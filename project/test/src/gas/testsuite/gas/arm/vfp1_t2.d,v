head	1.6;
access;
symbols
	binutils-2_24-branch:1.6.0.10
	binutils-2_24-branchpoint:1.6
	binutils-2_21_1:1.6
	binutils-2_23_2:1.6
	binutils-2_23_1:1.6
	binutils-2_23:1.6
	binutils-2_23-branch:1.6.0.8
	binutils-2_23-branchpoint:1.6
	binutils-2_22_branch:1.6.0.6
	binutils-2_22:1.6
	binutils-2_22-branch:1.6.0.4
	binutils-2_22-branchpoint:1.6
	binutils-2_21:1.6
	binutils-2_21-branch:1.6.0.2
	binutils-2_21-branchpoint:1.6
	binutils-2_20_1:1.5
	binutils-2_20:1.5
	binutils-arc-20081103-branch:1.3.0.8
	binutils-arc-20081103-branchpoint:1.3
	binutils-2_20-branch:1.5.0.2
	binutils-2_20-branchpoint:1.5
	dje-cgen-play1-branch:1.4.0.2
	dje-cgen-play1-branchpoint:1.4
	arc-20081103-branch:1.3.0.6
	arc-20081103-branchpoint:1.3
	binutils-2_19_1:1.3
	binutils-2_19:1.3
	binutils-2_19-branch:1.3.0.4
	binutils-2_19-branchpoint:1.3
	binutils-2_18:1.3
	binutils-2_18-branch:1.3.0.2
	binutils-2_18-branchpoint:1.3
	binutils-csl-coldfire-4_1-32:1.1.2.2
	binutils-csl-sourcerygxx-4_1-32:1.1.2.2
	binutils-csl-innovasic-fido-3_4_4-33:1.1.2.2
	binutils-csl-coldfire-4_1-30:1.1.2.2
	binutils-csl-sourcerygxx-4_1-30:1.1.2.2
	binutils-csl-coldfire-4_1-28:1.1.2.2
	binutils-csl-sourcerygxx-4_1-29:1.1.2.2
	binutils-csl-sourcerygxx-4_1-28:1.1.2.2
	binutils-csl-arm-2006q3-27:1.1.2.2
	binutils-csl-sourcerygxx-4_1-27:1.1.2.2
	binutils-csl-arm-2006q3-26:1.1.2.2
	binutils-csl-sourcerygxx-4_1-26:1.1.2.2
	binutils-csl-sourcerygxx-4_1-25:1.1.2.2
	binutils-csl-sourcerygxx-4_1-24:1.1.2.2
	binutils-csl-sourcerygxx-4_1-23:1.1.2.2
	binutils-csl-sourcerygxx-4_1-21:1.1.2.2
	binutils-csl-arm-2006q3-21:1.1.2.2
	binutils-csl-sourcerygxx-4_1-22:1.1.2.2
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.1.2.2
	binutils-csl-sourcerygxx-4_1-20:1.1.2.2
	binutils-csl-arm-2006q3-19:1.1.2.2
	binutils-csl-sourcerygxx-4_1-19:1.1.2.2
	binutils-csl-sourcerygxx-4_1-18:1.1.2.2
	binutils-csl-renesas-4_1-9:1.1.2.2
	binutils-csl-renesas-4_1-8:1.1.2.2
	binutils-csl-renesas-4_1-7:1.1.2.2
	binutils-csl-renesas-4_1-6:1.1.2.2
	binutils-csl-sourcerygxx-4_1-17:1.1.2.2
	binutils-csl-sourcerygxx-4_1-14:1.1.2.2
	binutils-csl-sourcerygxx-4_1-15:1.1.2.2
	binutils-csl-sourcerygxx-4_1-13:1.1.2.2
	binutils-2_17:1.1
	binutils-csl-sourcerygxx-4_1-12:1.1.2.2
	binutils-csl-sourcerygxx-3_4_4-21:1.1.2.2
	binutils-csl-sourcerygxx-4_1-9:1.1.2.2
	binutils-csl-sourcerygxx-4_1-8:1.1.2.2
	binutils-csl-sourcerygxx-4_1-7:1.1.2.2
	binutils-csl-arm-2006q1-6:1.1.2.2
	binutils-csl-sourcerygxx-4_1-6:1.1.2.2
	binutils-csl-coldfire-4_1-11:1.1.2.2
	binutils-csl-sourcerygxx-3_4_4-19:1.1.2.2
	binutils-csl-coldfire-4_1-10:1.1.2.2
	binutils-csl-sourcerygxx-4_1-5:1.1.2.2
	binutils-csl-sourcerygxx-4_1-4:1.1.2.2
	binutils-csl-morpho-4_1-4:1.1.2.1
	binutils-csl-sourcerygxx-3_4_4-17:1.1.2.1
	binutils-2_17-branch:1.1.0.4
	binutils-2_17-branchpoint:1.1
	binutils-csl-2_17-branch:1.1.0.2
	binutils-csl-2_17-branchpoint:1.1
	binutils_latest_snapshot:1.6;
locks; strict;
comment	@# @;


1.6
date	2010.01.13.19.01.09;	author drow;	state Exp;
branches;
next	1.5;

1.5
date	2009.06.30.11.57.05;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2008.12.15.17.24.12;	author rearnsha;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.07.14.08.18;	author pbrook;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.26.15.42.17;	author jules;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.02.13.12.42;	author pbrook;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.04.03.00.03.34;	author jules;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2006.04.29.17.54.31;	author pbrook;	state Exp;
branches;
next	;


desc
@@


1.6
log
@	gas/
	* config/tc-arm.c (do_t_nop): Correct check for Thumb-2 NOP.

	gas/testsuite/
	* gas/arm/thumb-nop.d, gas/arm/thumb-nop.s: New test.
	* gas/arm/relax_branch_align.d: Expect a default NOP instruction.
	* gas/arm/vfp1_t2.d, gas/arm/vfp1xD_t2.d: Specify a CPU with
	Thumb-2.

	ld/testsuite/
	* ld-arm/arm-elf.exp (armelftests): Assemble Cortex-A8 tests with
	-mcpu=cortex-a8.
@
text
@#objdump: -dr --prefix-addresses --show-raw-insn
#name: Thumb-2 VFP Double-precision instructions
#as: -mfpu=vfp -mcpu=arm1156t2f-s

# Test the ARM VFP Double Precision instructions

.*: +file format .*arm.*

Disassembly of section .text:
0+000 <[^>]*> eeb4 0bc0 	(vcmpe\.f64|fcmped)	d0, d0
0+004 <[^>]*> eeb5 0bc0 	(vcmpe\.f64	d0, #0.0|fcmpezd	d0)
0+008 <[^>]*> eeb4 0b40 	(vcmp\.f64|fcmpd)	d0, d0
0+00c <[^>]*> eeb5 0b40 	(vcmp\.f64	d0, #0.0|fcmpzd	d0)
0+010 <[^>]*> eeb0 0bc0 	(vabs\.f64|fabsd)	d0, d0
0+014 <[^>]*> eeb0 0b40 	(vmov\.f64|fcpyd)	d0, d0
0+018 <[^>]*> eeb1 0b40 	(vneg\.f64|fnegd)	d0, d0
0+01c <[^>]*> eeb1 0bc0 	(vsqrt\.f64|fsqrtd)	d0, d0
0+020 <[^>]*> ee30 0b00 	(vadd\.f64|faddd)	d0, d0, d0
0+024 <[^>]*> ee80 0b00 	(vdiv\.f64|fdivd)	d0, d0, d0
0+028 <[^>]*> ee00 0b00 	(vmla\.f64|fmacd)	d0, d0, d0
0+02c <[^>]*> ee10 0b00 	(vnmls\.f64|fmscd)	d0, d0, d0
0+030 <[^>]*> ee20 0b00 	(vmul\.f64|fmuld)	d0, d0, d0
0+034 <[^>]*> ee00 0b40 	(vmls\.f64|fnmacd)	d0, d0, d0
0+038 <[^>]*> ee10 0b40 	(vnmla\.f64|fnmscd)	d0, d0, d0
0+03c <[^>]*> ee20 0b40 	(vnmul\.f64|fnmuld)	d0, d0, d0
0+040 <[^>]*> ee30 0b40 	(vsub\.f64|fsubd)	d0, d0, d0
0+044 <[^>]*> ed90 0b00 	vldr	d0, \[r0\]
0+048 <[^>]*> ed80 0b00 	vstr	d0, \[r0\]
0+04c <[^>]*> ec90 0b02 	vldmia	r0, {d0}
0+050 <[^>]*> ec90 0b02 	vldmia	r0, {d0}
0+054 <[^>]*> ecb0 0b02 	vldmia	r0!, {d0}
0+058 <[^>]*> ecb0 0b02 	vldmia	r0!, {d0}
0+05c <[^>]*> ed30 0b02 	vldmdb	r0!, {d0}
0+060 <[^>]*> ed30 0b02 	vldmdb	r0!, {d0}
0+064 <[^>]*> ec80 0b02 	vstmia	r0, {d0}
0+068 <[^>]*> ec80 0b02 	vstmia	r0, {d0}
0+06c <[^>]*> eca0 0b02 	vstmia	r0!, {d0}
0+070 <[^>]*> eca0 0b02 	vstmia	r0!, {d0}
0+074 <[^>]*> ed20 0b02 	vstmdb	r0!, {d0}
0+078 <[^>]*> ed20 0b02 	vstmdb	r0!, {d0}
0+07c <[^>]*> eeb8 0bc0 	(vcvt\.f64\.s32|fsitod)	d0, s0
0+080 <[^>]*> eeb8 0b40 	(vcvt\.f64\.u32|fuitod)	d0, s0
0+084 <[^>]*> eebd 0b40 	(vcvtr\.s32\.f64|ftosid)	s0, d0
0+088 <[^>]*> eebd 0bc0 	(vcvt\.s32\.f64|ftosizd)	s0, d0
0+08c <[^>]*> eebc 0b40 	(vcvtr\.u32\.f64|ftouid)	s0, d0
0+090 <[^>]*> eebc 0bc0 	(vcvt\.u32\.f64|ftouizd)	s0, d0
0+094 <[^>]*> eeb7 0ac0 	(vcvt\.f64\.f32|fcvtds)	d0, s0
0+098 <[^>]*> eeb7 0bc0 	(vcvt\.f32\.f64|fcvtsd)	s0, d0
0+09c <[^>]*> ee30 0b10 	vmov\.32	r0, d0\[1\]
0+0a0 <[^>]*> ee10 0b10 	vmov\.32	r0, d0\[0\]
0+0a4 <[^>]*> ee20 0b10 	vmov\.32	d0\[1\], r0
0+0a8 <[^>]*> ee00 0b10 	vmov\.32	d0\[0\], r0
0+0ac <[^>]*> eeb5 1b40 	(vcmp\.f64	d1, #0.0|fcmpzd	d1)
0+0b0 <[^>]*> eeb5 2b40 	(vcmp\.f64	d2, #0.0|fcmpzd	d2)
0+0b4 <[^>]*> eeb5 fb40 	(vcmp\.f64	d15, #0.0|fcmpzd	d15)
0+0b8 <[^>]*> eeb4 0b41 	(vcmp\.f64|fcmpd)	d0, d1
0+0bc <[^>]*> eeb4 0b42 	(vcmp\.f64|fcmpd)	d0, d2
0+0c0 <[^>]*> eeb4 0b4f 	(vcmp\.f64|fcmpd)	d0, d15
0+0c4 <[^>]*> eeb4 1b40 	(vcmp\.f64|fcmpd)	d1, d0
0+0c8 <[^>]*> eeb4 2b40 	(vcmp\.f64|fcmpd)	d2, d0
0+0cc <[^>]*> eeb4 fb40 	(vcmp\.f64|fcmpd)	d15, d0
0+0d0 <[^>]*> eeb4 5b4c 	(vcmp\.f64|fcmpd)	d5, d12
0+0d4 <[^>]*> eeb1 0b41 	(vneg\.f64|fnegd)	d0, d1
0+0d8 <[^>]*> eeb1 0b42 	(vneg\.f64|fnegd)	d0, d2
0+0dc <[^>]*> eeb1 0b4f 	(vneg\.f64|fnegd)	d0, d15
0+0e0 <[^>]*> eeb1 1b40 	(vneg\.f64|fnegd)	d1, d0
0+0e4 <[^>]*> eeb1 2b40 	(vneg\.f64|fnegd)	d2, d0
0+0e8 <[^>]*> eeb1 fb40 	(vneg\.f64|fnegd)	d15, d0
0+0ec <[^>]*> eeb1 cb45 	(vneg\.f64|fnegd)	d12, d5
0+0f0 <[^>]*> ee30 0b01 	(vadd\.f64|faddd)	d0, d0, d1
0+0f4 <[^>]*> ee30 0b02 	(vadd\.f64|faddd)	d0, d0, d2
0+0f8 <[^>]*> ee30 0b0f 	(vadd\.f64|faddd)	d0, d0, d15
0+0fc <[^>]*> ee31 0b00 	(vadd\.f64|faddd)	d0, d1, d0
0+100 <[^>]*> ee32 0b00 	(vadd\.f64|faddd)	d0, d2, d0
0+104 <[^>]*> ee3f 0b00 	(vadd\.f64|faddd)	d0, d15, d0
0+108 <[^>]*> ee30 1b00 	(vadd\.f64|faddd)	d1, d0, d0
0+10c <[^>]*> ee30 2b00 	(vadd\.f64|faddd)	d2, d0, d0
0+110 <[^>]*> ee30 fb00 	(vadd\.f64|faddd)	d15, d0, d0
0+114 <[^>]*> ee39 cb05 	(vadd\.f64|faddd)	d12, d9, d5
0+118 <[^>]*> eeb7 0ae0 	(vcvt\.f64\.f32|fcvtds)	d0, s1
0+11c <[^>]*> eeb7 0ac1 	(vcvt\.f64\.f32|fcvtds)	d0, s2
0+120 <[^>]*> eeb7 0aef 	(vcvt\.f64\.f32|fcvtds)	d0, s31
0+124 <[^>]*> eeb7 1ac0 	(vcvt\.f64\.f32|fcvtds)	d1, s0
0+128 <[^>]*> eeb7 2ac0 	(vcvt\.f64\.f32|fcvtds)	d2, s0
0+12c <[^>]*> eeb7 fac0 	(vcvt\.f64\.f32|fcvtds)	d15, s0
0+130 <[^>]*> eef7 0bc0 	(vcvt\.f32\.f64|fcvtsd)	s1, d0
0+134 <[^>]*> eeb7 1bc0 	(vcvt\.f32\.f64|fcvtsd)	s2, d0
0+138 <[^>]*> eef7 fbc0 	(vcvt\.f32\.f64|fcvtsd)	s31, d0
0+13c <[^>]*> eeb7 0bc1 	(vcvt\.f32\.f64|fcvtsd)	s0, d1
0+140 <[^>]*> eeb7 0bc2 	(vcvt\.f32\.f64|fcvtsd)	s0, d2
0+144 <[^>]*> eeb7 0bcf 	(vcvt\.f32\.f64|fcvtsd)	s0, d15
0+148 <[^>]*> ee30 1b10 	vmov\.32	r1, d0\[1\]
0+14c <[^>]*> ee30 eb10 	vmov\.32	lr, d0\[1\]
0+150 <[^>]*> ee31 0b10 	vmov\.32	r0, d1\[1\]
0+154 <[^>]*> ee32 0b10 	vmov\.32	r0, d2\[1\]
0+158 <[^>]*> ee3f 0b10 	vmov\.32	r0, d15\[1\]
0+15c <[^>]*> ee10 1b10 	vmov\.32	r1, d0\[0\]
0+160 <[^>]*> ee10 eb10 	vmov\.32	lr, d0\[0\]
0+164 <[^>]*> ee11 0b10 	vmov\.32	r0, d1\[0\]
0+168 <[^>]*> ee12 0b10 	vmov\.32	r0, d2\[0\]
0+16c <[^>]*> ee1f 0b10 	vmov\.32	r0, d15\[0\]
0+170 <[^>]*> ee20 1b10 	vmov\.32	d0\[1\], r1
0+174 <[^>]*> ee20 eb10 	vmov\.32	d0\[1\], lr
0+178 <[^>]*> ee21 0b10 	vmov\.32	d1\[1\], r0
0+17c <[^>]*> ee22 0b10 	vmov\.32	d2\[1\], r0
0+180 <[^>]*> ee2f 0b10 	vmov\.32	d15\[1\], r0
0+184 <[^>]*> ee00 1b10 	vmov\.32	d0\[0\], r1
0+188 <[^>]*> ee00 eb10 	vmov\.32	d0\[0\], lr
0+18c <[^>]*> ee01 0b10 	vmov\.32	d1\[0\], r0
0+190 <[^>]*> ee02 0b10 	vmov\.32	d2\[0\], r0
0+194 <[^>]*> ee0f 0b10 	vmov\.32	d15\[0\], r0
0+198 <[^>]*> ed91 0b00 	vldr	d0, \[r1\]
0+19c <[^>]*> ed9e 0b00 	vldr	d0, \[lr\]
0+1a0 <[^>]*> ed90 0b00 	vldr	d0, \[r0\]
0+1a4 <[^>]*> ed90 0bff 	vldr	d0, \[r0, #1020\].*
0+1a8 <[^>]*> ed10 0bff 	vldr	d0, \[r0, #-1020\].*
0+1ac <[^>]*> ed90 1b00 	vldr	d1, \[r0\]
0+1b0 <[^>]*> ed90 2b00 	vldr	d2, \[r0\]
0+1b4 <[^>]*> ed90 fb00 	vldr	d15, \[r0\]
0+1b8 <[^>]*> ed8c cbc9 	vstr	d12, \[ip, #804\].*
0+1bc <[^>]*> ec90 1b02 	vldmia	r0, {d1}
0+1c0 <[^>]*> ec90 2b02 	vldmia	r0, {d2}
0+1c4 <[^>]*> ec90 fb02 	vldmia	r0, {d15}
0+1c8 <[^>]*> ec90 0b04 	vldmia	r0, {d0-d1}
0+1cc <[^>]*> ec90 0b06 	vldmia	r0, {d0-d2}
0+1d0 <[^>]*> ec90 0b20 	vldmia	r0, {d0-d15}
0+1d4 <[^>]*> ec90 1b1e 	vldmia	r0, {d1-d15}
0+1d8 <[^>]*> ec90 2b1c 	vldmia	r0, {d2-d15}
0+1dc <[^>]*> ec90 eb04 	vldmia	r0, {d14-d15}
0+1e0 <[^>]*> ec91 0b02 	vldmia	r1, {d0}
0+1e4 <[^>]*> ec9e 0b02 	vldmia	lr, {d0}
0+1e8 <[^>]*> eeb5 0b40 	(vcmp\.f64	d0, #0.0|fcmpzd	d0)
0+1ec <[^>]*> eeb5 1b40 	(vcmp\.f64	d1, #0.0|fcmpzd	d1)
0+1f0 <[^>]*> eeb5 2b40 	(vcmp\.f64	d2, #0.0|fcmpzd	d2)
0+1f4 <[^>]*> eeb5 3b40 	(vcmp\.f64	d3, #0.0|fcmpzd	d3)
0+1f8 <[^>]*> eeb5 4b40 	(vcmp\.f64	d4, #0.0|fcmpzd	d4)
0+1fc <[^>]*> eeb5 5b40 	(vcmp\.f64	d5, #0.0|fcmpzd	d5)
0+200 <[^>]*> eeb5 6b40 	(vcmp\.f64	d6, #0.0|fcmpzd	d6)
0+204 <[^>]*> eeb5 7b40 	(vcmp\.f64	d7, #0.0|fcmpzd	d7)
0+208 <[^>]*> eeb5 8b40 	(vcmp\.f64	d8, #0.0|fcmpzd	d8)
0+20c <[^>]*> eeb5 9b40 	(vcmp\.f64	d9, #0.0|fcmpzd	d9)
0+210 <[^>]*> eeb5 ab40 	(vcmp\.f64	d10, #0.0|fcmpzd	d10)
0+214 <[^>]*> eeb5 bb40 	(vcmp\.f64	d11, #0.0|fcmpzd	d11)
0+218 <[^>]*> eeb5 cb40 	(vcmp\.f64	d12, #0.0|fcmpzd	d12)
0+21c <[^>]*> eeb5 db40 	(vcmp\.f64	d13, #0.0|fcmpzd	d13)
0+220 <[^>]*> eeb5 eb40 	(vcmp\.f64	d14, #0.0|fcmpzd	d14)
0+224 <[^>]*> eeb5 fb40 	(vcmp\.f64	d15, #0.0|fcmpzd	d15)
0+228 <[^>]*> bf01      	itttt	eq
0+22a <[^>]*> eeb4 1bcf 	(vcmpeeq\.f64|fcmpedeq)	d1, d15
0+22e <[^>]*> eeb5 2bc0 	(vcmpeeq\.f64	d2, #0.0|fcmpezdeq	d2)
0+232 <[^>]*> eeb4 3b4e 	(vcmpeq\.f64|fcmpdeq)	d3, d14
0+236 <[^>]*> eeb5 4b40 	(vcmpeq\.f64	d4, #0.0|fcmpzdeq	d4)
0+23a <[^>]*> bf01      	itttt	eq
0+23c <[^>]*> eeb0 5bcd 	(vabseq\.f64|fabsdeq)	d5, d13
0+240 <[^>]*> eeb0 6b4c 	(vmoveq\.f64|fcpydeq)	d6, d12
0+244 <[^>]*> eeb1 7b4b 	(vnegeq\.f64|fnegdeq)	d7, d11
0+248 <[^>]*> eeb1 8bca 	(vsqrteq\.f64|fsqrtdeq)	d8, d10
0+24c <[^>]*> bf01      	itttt	eq
0+24e <[^>]*> ee31 9b0f 	(vaddeq\.f64|fadddeq)	d9, d1, d15
0+252 <[^>]*> ee83 2b0e 	(vdiveq\.f64|fdivdeq)	d2, d3, d14
0+256 <[^>]*> ee0d 4b0c 	(vmlaeq\.f64|fmacdeq)	d4, d13, d12
0+25a <[^>]*> ee16 5b0b 	(vnmlseq\.f64|fmscdeq)	d5, d6, d11
0+25e <[^>]*> bf01      	itttt	eq
0+260 <[^>]*> ee2a 7b09 	(vmuleq\.f64|fmuldeq)	d7, d10, d9
0+264 <[^>]*> ee09 8b4a 	(vmlseq\.f64|fnmacdeq)	d8, d9, d10
0+268 <[^>]*> ee16 7b4b 	(vnmlaeq\.f64|fnmscdeq)	d7, d6, d11
0+26c <[^>]*> ee24 5b4c 	(vnmuleq\.f64|fnmuldeq)	d5, d4, d12
0+270 <[^>]*> bf02      	ittt	eq
0+272 <[^>]*> ee3d 3b4e 	(vsubeq\.f64|fsubdeq)	d3, d13, d14
0+276 <[^>]*> ed95 2b00 	vldreq	d2, \[r5\]
0+27a <[^>]*> ed8c 1b00 	vstreq	d1, \[ip\]
0+27e <[^>]*> bf01      	itttt	eq
0+280 <[^>]*> ec91 1b02 	vldmiaeq	r1, {d1}
0+284 <[^>]*> ec92 2b02 	vldmiaeq	r2, {d2}
0+288 <[^>]*> ecb3 3b02 	vldmiaeq	r3!, {d3}
0+28c <[^>]*> ecb4 4b02 	vldmiaeq	r4!, {d4}
0+290 <[^>]*> bf01      	itttt	eq
0+292 <[^>]*> ed35 5b02 	vldmdbeq	r5!, {d5}
0+296 <[^>]*> ed36 6b02 	vldmdbeq	r6!, {d6}
0+29a <[^>]*> ec87 fb02 	vstmiaeq	r7, {d15}
0+29e <[^>]*> ec88 eb02 	vstmiaeq	r8, {d14}
0+2a2 <[^>]*> bf01      	itttt	eq
0+2a4 <[^>]*> eca9 db02 	vstmiaeq	r9!, {d13}
0+2a8 <[^>]*> ecaa cb02 	vstmiaeq	sl!, {d12}
0+2ac <[^>]*> ed2b bb02 	vstmdbeq	fp!, {d11}
0+2b0 <[^>]*> ed2c ab02 	vstmdbeq	ip!, {d10}
0+2b4 <[^>]*> bf01      	itttt	eq
0+2b6 <[^>]*> eeb8 fbe0 	(vcvteq\.f64\.s32|fsitodeq)	d15, s1
0+2ba <[^>]*> eeb8 1b6f 	(vcvteq\.f64\.u32|fuitodeq)	d1, s31
0+2be <[^>]*> eefd 0b4f 	(vcvtreq\.s32\.f64|ftosideq)	s1, d15
0+2c2 <[^>]*> eefd fbc2 	(vcvteq\.s32\.f64|ftosizdeq)	s31, d2
0+2c6 <[^>]*> bf01      	itttt	eq
0+2c8 <[^>]*> eefc 7b42 	(vcvtreq\.u32\.f64|ftouideq)	s15, d2
0+2cc <[^>]*> eefc 5bc3 	(vcvteq\.u32\.f64|ftouizdeq)	s11, d3
0+2d0 <[^>]*> eeb7 1ac5 	(vcvteq\.f64\.f32|fcvtdseq)	d1, s10
0+2d4 <[^>]*> eef7 5bc1 	(vcvteq\.f32\.f64|fcvtsdeq)	s11, d1
0+2d8 <[^>]*> bf01      	itttt	eq
0+2da <[^>]*> ee31 8b10 	vmoveq\.32	r8, d1\[1\]
0+2de <[^>]*> ee1f 7b10 	vmoveq\.32	r7, d15\[0\]
0+2e2 <[^>]*> ee21 fb10 	vmoveq\.32	d1\[1\], pc
0+2e6 <[^>]*> ee0f 1b10 	vmoveq\.32	d15\[0\], r1
0+2ea <[^>]*> bf00      	nop
0+2ec <[^>]*> bf00      	nop
0+2ee <[^>]*> bf00      	nop
@


1.5
log
@        PR 10288
        * arm-dis.c (coprocessor): Print the LDC and STC versions of the
        LFM and SFM instructions as comments,.
        Improve consistency of formatting for instructions displayed as
        comments and decimal values displayed with their hexadecimal
        equivalents.
        Formatting tidy ups.

        Updated expected disassembler regexps.
@
text
@d3 1
a3 1
#as: -mfpu=vfp
@


1.4
log
@opcodes:
	* arm-dis.c (coprocessor_opcodes): Disassemble VFP instructions using
	unified syntax.
gas/testsuite:
	* gas/arm/group-reloc-ldc.d: Disassembly of VFP instructions now uses
	unified syntax.
	* gas/arm/vfp-non-overlap.d: Likewise.
	* gas/arm/vfp-neon-syntax.d: Likewise.
	* gas/arm/vfp-neon-syntax_t2.d: Likewise.
	* gas/arm/vfp1.d: Likewise.
	* gas/arm/vfp1_t2.d: Likewise.
	* gas/arm/vfp1xD.d: Likewise.
	* gas/arm/vfp1xD_t2.d: Likewise.
	* gas/arm/vfp2.d: Likewise.
	* gas/arm/vfp2_t2.d: Likewise.
	* gas/arm/vfpv3-32drs.d: Likewise.
	* gas/arm/vfpv3-const-conv.d: Likewise.
ld/testsuite:
	* ld-arm/vfp11-fix-scalar.d: Disassembly of VFP instructions now uses
	unified syntax.
	* ld-arm/vfp11-fix-vector.d: Likewise.
@
text
@d115 2
a116 2
0+1a4 <[^>]*> ed90 0bff 	vldr	d0, \[r0, #1020\]
0+1a8 <[^>]*> ed10 0bff 	vldr	d0, \[r0, #-1020\]
d120 1
a120 1
0+1b8 <[^>]*> ed8c cbc9 	vstr	d12, \[ip, #804\]
@


1.3
log
@2006-06-06  Paul Brook  <paul@@codesourcery.com>

opcodes/
	* arm-dis.c (coprocessor_opcodes): Add %c to unconditional arm
	instructions.
	(neon_opcodes): Add conditional execution specifiers.
	(thumb_opcodes): Ditto.
	(thumb32_opcodes): Ditto.
	(arm_conditional): Change 0xe to "al" and add "" to end.
	(ifthen_state, ifthen_next_state, ifthen_address): New.
	(IFTHEN_COND): Define.
	(print_insn_coprocessor, print_insn_neon): Print thumb conditions.
	(print_insn_arm): Change %c to use new values of arm_conditional.
	(print_insn_thumb16): Print thumb conditions.  Add %I.
	(print_insn_thumb32): Print thumb conditions.
	(find_ifthen_state): New function.
	(print_insn): Track IT block state.
gas/testsuite/
	* gas/arm/thumb2_bcond.d: Update expected output.
	* gas/arm/thumb32.d: Ditto.
	* gas/arm/vfp1_t2.d: Ditto.
	* gas/arm/vfp1xD_t2.d: Ditto.
binutils/testsuite/
	* binutils-all/arm/objdump.exp: New file.
	* binutils-all/arm/thumb2-cond.s: New test.
@
text
@d10 17
a26 17
0+000 <[^>]*> eeb4 0bc0 	fcmped	d0, d0
0+004 <[^>]*> eeb5 0bc0 	fcmpezd	d0
0+008 <[^>]*> eeb4 0b40 	fcmpd	d0, d0
0+00c <[^>]*> eeb5 0b40 	fcmpzd	d0
0+010 <[^>]*> eeb0 0bc0 	fabsd	d0, d0
0+014 <[^>]*> eeb0 0b40 	fcpyd	d0, d0
0+018 <[^>]*> eeb1 0b40 	fnegd	d0, d0
0+01c <[^>]*> eeb1 0bc0 	fsqrtd	d0, d0
0+020 <[^>]*> ee30 0b00 	faddd	d0, d0, d0
0+024 <[^>]*> ee80 0b00 	fdivd	d0, d0, d0
0+028 <[^>]*> ee00 0b00 	fmacd	d0, d0, d0
0+02c <[^>]*> ee10 0b00 	fmscd	d0, d0, d0
0+030 <[^>]*> ee20 0b00 	fmuld	d0, d0, d0
0+034 <[^>]*> ee00 0b40 	fnmacd	d0, d0, d0
0+038 <[^>]*> ee10 0b40 	fnmscd	d0, d0, d0
0+03c <[^>]*> ee20 0b40 	fnmuld	d0, d0, d0
0+040 <[^>]*> ee30 0b40 	fsubd	d0, d0, d0
d41 8
a48 8
0+07c <[^>]*> eeb8 0bc0 	fsitod	d0, s0
0+080 <[^>]*> eeb8 0b40 	fuitod	d0, s0
0+084 <[^>]*> eebd 0b40 	ftosid	s0, d0
0+088 <[^>]*> eebd 0bc0 	ftosizd	s0, d0
0+08c <[^>]*> eebc 0b40 	ftouid	s0, d0
0+090 <[^>]*> eebc 0bc0 	ftouizd	s0, d0
0+094 <[^>]*> eeb7 0ac0 	fcvtds	d0, s0
0+098 <[^>]*> eeb7 0bc0 	fcvtsd	s0, d0
d53 39
a91 39
0+0ac <[^>]*> eeb5 1b40 	fcmpzd	d1
0+0b0 <[^>]*> eeb5 2b40 	fcmpzd	d2
0+0b4 <[^>]*> eeb5 fb40 	fcmpzd	d15
0+0b8 <[^>]*> eeb4 0b41 	fcmpd	d0, d1
0+0bc <[^>]*> eeb4 0b42 	fcmpd	d0, d2
0+0c0 <[^>]*> eeb4 0b4f 	fcmpd	d0, d15
0+0c4 <[^>]*> eeb4 1b40 	fcmpd	d1, d0
0+0c8 <[^>]*> eeb4 2b40 	fcmpd	d2, d0
0+0cc <[^>]*> eeb4 fb40 	fcmpd	d15, d0
0+0d0 <[^>]*> eeb4 5b4c 	fcmpd	d5, d12
0+0d4 <[^>]*> eeb1 0b41 	fnegd	d0, d1
0+0d8 <[^>]*> eeb1 0b42 	fnegd	d0, d2
0+0dc <[^>]*> eeb1 0b4f 	fnegd	d0, d15
0+0e0 <[^>]*> eeb1 1b40 	fnegd	d1, d0
0+0e4 <[^>]*> eeb1 2b40 	fnegd	d2, d0
0+0e8 <[^>]*> eeb1 fb40 	fnegd	d15, d0
0+0ec <[^>]*> eeb1 cb45 	fnegd	d12, d5
0+0f0 <[^>]*> ee30 0b01 	faddd	d0, d0, d1
0+0f4 <[^>]*> ee30 0b02 	faddd	d0, d0, d2
0+0f8 <[^>]*> ee30 0b0f 	faddd	d0, d0, d15
0+0fc <[^>]*> ee31 0b00 	faddd	d0, d1, d0
0+100 <[^>]*> ee32 0b00 	faddd	d0, d2, d0
0+104 <[^>]*> ee3f 0b00 	faddd	d0, d15, d0
0+108 <[^>]*> ee30 1b00 	faddd	d1, d0, d0
0+10c <[^>]*> ee30 2b00 	faddd	d2, d0, d0
0+110 <[^>]*> ee30 fb00 	faddd	d15, d0, d0
0+114 <[^>]*> ee39 cb05 	faddd	d12, d9, d5
0+118 <[^>]*> eeb7 0ae0 	fcvtds	d0, s1
0+11c <[^>]*> eeb7 0ac1 	fcvtds	d0, s2
0+120 <[^>]*> eeb7 0aef 	fcvtds	d0, s31
0+124 <[^>]*> eeb7 1ac0 	fcvtds	d1, s0
0+128 <[^>]*> eeb7 2ac0 	fcvtds	d2, s0
0+12c <[^>]*> eeb7 fac0 	fcvtds	d15, s0
0+130 <[^>]*> eef7 0bc0 	fcvtsd	s1, d0
0+134 <[^>]*> eeb7 1bc0 	fcvtsd	s2, d0
0+138 <[^>]*> eef7 fbc0 	fcvtsd	s31, d0
0+13c <[^>]*> eeb7 0bc1 	fcvtsd	s0, d1
0+140 <[^>]*> eeb7 0bc2 	fcvtsd	s0, d2
0+144 <[^>]*> eeb7 0bcf 	fcvtsd	s0, d15
d132 16
a147 16
0+1e8 <[^>]*> eeb5 0b40 	fcmpzd	d0
0+1ec <[^>]*> eeb5 1b40 	fcmpzd	d1
0+1f0 <[^>]*> eeb5 2b40 	fcmpzd	d2
0+1f4 <[^>]*> eeb5 3b40 	fcmpzd	d3
0+1f8 <[^>]*> eeb5 4b40 	fcmpzd	d4
0+1fc <[^>]*> eeb5 5b40 	fcmpzd	d5
0+200 <[^>]*> eeb5 6b40 	fcmpzd	d6
0+204 <[^>]*> eeb5 7b40 	fcmpzd	d7
0+208 <[^>]*> eeb5 8b40 	fcmpzd	d8
0+20c <[^>]*> eeb5 9b40 	fcmpzd	d9
0+210 <[^>]*> eeb5 ab40 	fcmpzd	d10
0+214 <[^>]*> eeb5 bb40 	fcmpzd	d11
0+218 <[^>]*> eeb5 cb40 	fcmpzd	d12
0+21c <[^>]*> eeb5 db40 	fcmpzd	d13
0+220 <[^>]*> eeb5 eb40 	fcmpzd	d14
0+224 <[^>]*> eeb5 fb40 	fcmpzd	d15
d149 4
a152 4
0+22a <[^>]*> eeb4 1bcf 	fcmpedeq	d1, d15
0+22e <[^>]*> eeb5 2bc0 	fcmpezdeq	d2
0+232 <[^>]*> eeb4 3b4e 	fcmpdeq	d3, d14
0+236 <[^>]*> eeb5 4b40 	fcmpzdeq	d4
d154 4
a157 4
0+23c <[^>]*> eeb0 5bcd 	fabsdeq	d5, d13
0+240 <[^>]*> eeb0 6b4c 	fcpydeq	d6, d12
0+244 <[^>]*> eeb1 7b4b 	fnegdeq	d7, d11
0+248 <[^>]*> eeb1 8bca 	fsqrtdeq	d8, d10
d159 4
a162 4
0+24e <[^>]*> ee31 9b0f 	fadddeq	d9, d1, d15
0+252 <[^>]*> ee83 2b0e 	fdivdeq	d2, d3, d14
0+256 <[^>]*> ee0d 4b0c 	fmacdeq	d4, d13, d12
0+25a <[^>]*> ee16 5b0b 	fmscdeq	d5, d6, d11
d164 4
a167 4
0+260 <[^>]*> ee2a 7b09 	fmuldeq	d7, d10, d9
0+264 <[^>]*> ee09 8b4a 	fnmacdeq	d8, d9, d10
0+268 <[^>]*> ee16 7b4b 	fnmscdeq	d7, d6, d11
0+26c <[^>]*> ee24 5b4c 	fnmuldeq	d5, d4, d12
d169 1
a169 1
0+272 <[^>]*> ee3d 3b4e 	fsubdeq	d3, d13, d14
d188 4
a191 4
0+2b6 <[^>]*> eeb8 fbe0 	fsitodeq	d15, s1
0+2ba <[^>]*> eeb8 1b6f 	fuitodeq	d1, s31
0+2be <[^>]*> eefd 0b4f 	ftosideq	s1, d15
0+2c2 <[^>]*> eefd fbc2 	ftosizdeq	s31, d2
d193 4
a196 4
0+2c8 <[^>]*> eefc 7b42 	ftouideq	s15, d2
0+2cc <[^>]*> eefc 5bc3 	ftouizdeq	s11, d3
0+2d0 <[^>]*> eeb7 1ac5 	fcvtdseq	d1, s10
0+2d4 <[^>]*> eef7 5bc1 	fcvtsdeq	s11, d1
@


1.2
log
@	* gas/arm/copro.s: Avoid ldcl which encodes as a bad Neon instruction.
	* gas/arm/copro.d: Update accordingly.
	* gas/arm/neon-cond.s: New test. Conditional Neon opcodes in ARM mode.
	* gas/arm/neon-cond.d: Expected results of above.
	* gas/arm/neon-cov.s: New test. Coverage of Neon instructions.
	* gas/arm/neon-cov.d: Expected results of above.
	* gas/arm/neon-ldst-es.s: New test. Element and structure loads and
	stores.
	* gas/arm/neon-ldst-es.d: Expected results of above.
	* gas/arm/neon-ldst-rm.s: New test. Single and multiple register loads
	and stores.
	* gas/arm/neon-ldst-rm.d: Expected results of above.
	* gas/arm/neon-omit.s: New test. Omission of optional operands.
	* gas/arm/neon-omit.d: Expected results of above.
	* gas/arm/vfp1.d: Expect Neon syntax for some VFP instructions.
	* gas/arm/vfp1_t2.d: Likewise.
	* gas/arm/vfp1xD.d: Likewise.
	* gas/arm/vfp1xD_t2.d: Likewise.
	* gas/arm/vfp2.d: Likewise.
	* gas/arm/vfp2_t2.d: Likewise.
	* gas/arm/vfp3-32drs.s: New test. Extended D register range for VFP
	instructions.
	* gas/arm/vfp3-32drs.d: Expected results of above.
	* gas/arm/vfp3-const-conv.s: New test. VFPv3 constant-load and
	conversion instructions.
	* gas/arm/vfp3-const-conv.d: Expected results of above.
@
text
@a147 1
# The "(eq|)" should be replaces by "eq" once the disassembler is fixed.
d149 4
a152 4
0+22a <[^>]*> eeb4 1bcf 	fcmped(eq|)	d1, d15
0+22e <[^>]*> eeb5 2bc0 	fcmpezd(eq|)	d2
0+232 <[^>]*> eeb4 3b4e 	fcmpd(eq|)	d3, d14
0+236 <[^>]*> eeb5 4b40 	fcmpzd(eq|)	d4
d154 4
a157 4
0+23c <[^>]*> eeb0 5bcd 	fabsd(eq|)	d5, d13
0+240 <[^>]*> eeb0 6b4c 	fcpyd(eq|)	d6, d12
0+244 <[^>]*> eeb1 7b4b 	fnegd(eq|)	d7, d11
0+248 <[^>]*> eeb1 8bca 	fsqrtd(eq|)	d8, d10
d159 4
a162 4
0+24e <[^>]*> ee31 9b0f 	faddd(eq|)	d9, d1, d15
0+252 <[^>]*> ee83 2b0e 	fdivd(eq|)	d2, d3, d14
0+256 <[^>]*> ee0d 4b0c 	fmacd(eq|)	d4, d13, d12
0+25a <[^>]*> ee16 5b0b 	fmscd(eq|)	d5, d6, d11
d164 4
a167 4
0+260 <[^>]*> ee2a 7b09 	fmuld(eq|)	d7, d10, d9
0+264 <[^>]*> ee09 8b4a 	fnmacd(eq|)	d8, d9, d10
0+268 <[^>]*> ee16 7b4b 	fnmscd(eq|)	d7, d6, d11
0+26c <[^>]*> ee24 5b4c 	fnmuld(eq|)	d5, d4, d12
d169 3
a171 3
0+272 <[^>]*> ee3d 3b4e 	fsubd(eq|)	d3, d13, d14
0+276 <[^>]*> ed95 2b00 	vldr(eq|)	d2, \[r5\]
0+27a <[^>]*> ed8c 1b00 	vstr(eq|)	d1, \[ip\]
d173 4
a176 4
0+280 <[^>]*> ec91 1b02 	vldmia(eq|)	r1, {d1}
0+284 <[^>]*> ec92 2b02 	vldmia(eq|)	r2, {d2}
0+288 <[^>]*> ecb3 3b02 	vldmia(eq|)	r3!, {d3}
0+28c <[^>]*> ecb4 4b02 	vldmia(eq|)	r4!, {d4}
d178 4
a181 4
0+292 <[^>]*> ed35 5b02 	vldmdb(eq|)	r5!, {d5}
0+296 <[^>]*> ed36 6b02 	vldmdb(eq|)	r6!, {d6}
0+29a <[^>]*> ec87 fb02 	vstmia(eq|)	r7, {d15}
0+29e <[^>]*> ec88 eb02 	vstmia(eq|)	r8, {d14}
d183 4
a186 4
0+2a4 <[^>]*> eca9 db02 	vstmia(eq|)	r9!, {d13}
0+2a8 <[^>]*> ecaa cb02 	vstmia(eq|)	sl!, {d12}
0+2ac <[^>]*> ed2b bb02 	vstmdb(eq|)	fp!, {d11}
0+2b0 <[^>]*> ed2c ab02 	vstmdb(eq|)	ip!, {d10}
d188 4
a191 4
0+2b6 <[^>]*> eeb8 fbe0 	fsitod(eq|)	d15, s1
0+2ba <[^>]*> eeb8 1b6f 	fuitod(eq|)	d1, s31
0+2be <[^>]*> eefd 0b4f 	ftosid(eq|)	s1, d15
0+2c2 <[^>]*> eefd fbc2 	ftosizd(eq|)	s31, d2
d193 4
a196 4
0+2c8 <[^>]*> eefc 7b42 	ftouid(eq|)	s15, d2
0+2cc <[^>]*> eefc 5bc3 	ftouizd(eq|)	s11, d3
0+2d0 <[^>]*> eeb7 1ac5 	fcvtds(eq|)	d1, s10
0+2d4 <[^>]*> eef7 5bc1 	fcvtsd(eq|)	s11, d1
d198 4
a201 4
0+2da <[^>]*> ee31 8b10 	vmov(eq|)\.32	r8, d1\[1\]
0+2de <[^>]*> ee1f 7b10 	vmov(eq|)\.32	r7, d15\[0\]
0+2e2 <[^>]*> ee21 fb10 	vmov(eq|)\.32	d1\[1\], pc
0+2e6 <[^>]*> ee0f 1b10 	vmov(eq|)\.32	d15\[0\], r1
@


1.1
log
@2005-09-02  Paul Brook  <paul@@codesourcery.com>

bfd/
	* libbdf.h: Regenerate.
	* bfd-in2.h: Regenerate.
	* reloc.c: Add BFD_RELOC_ARM_T32_CP_OFF_IMM and
	BFD_RELOC_ARM_T32_CP_OFF_IMM_S2.
gas/
	* config/tc-arm.c (encode_arm_cp_address): Use
	BFD_RELOC_ARM_T32_CP_OFF_IMM in thumb mode.
	(do_iwmmxt_wldstbh): Use BFD_RELOC_ARM_T32_CP_OFF_IMM_S2 in thumb
	mode.
	(md_assemble): Only allow coprocessor instructions when Thumb-2 is
	available.
	(cCE, cC3): Define.
	(insns): Use them for coprocessor instructions.
	(md_pcrel_from_section): Handle BFD_RELOC_ARM_T32_CP_OFF_IMM.
	(get_thumb32_insn): New function.
	(put_thumb32_insn): New function.
	(md_apply_fix): Handle BFD_RELOC_ARM_T32_CP_OFF_IMM and
	BFD_RELOC_ARM_T32_CP_OFF_IMM_S2.
gas/testsuite/
	* gas/arm/vfp-bad_t2.d, gas/arm/vfp-bad_t2.l, arm/vfp-bad_t2.s,
	gas/arm/vfp1_t2.d, gas/arm/vfp1_t2.s, gas/arm/vfp1xD_t2.d,
	gas/arm/vfp1xD_t2.s, gas/arm/vfp2_t2.d, gas/arm/vfp2_t2.s): New files.
opcodes/
	* arm-dis.c (coprocessor_opcodes): New.
	(arm_opcodes, thumb32_opcodes): Remove coprocessor insns.
	(print_insn_coprocessor): New function.
	(print_insn_arm): Use print_insn_coprocessor.  Remove coprocessor
	format characters.
	(print_insn_thumb32): Use print_insn_coprocessor.
@
text
@d27 14
a40 14
0+044 <[^>]*> ed90 0b00 	fldd	d0, \[r0\]
0+048 <[^>]*> ed80 0b00 	fstd	d0, \[r0\]
0+04c <[^>]*> ec90 0b02 	fldmiad	r0, {d0}
0+050 <[^>]*> ec90 0b02 	fldmiad	r0, {d0}
0+054 <[^>]*> ecb0 0b02 	fldmiad	r0!, {d0}
0+058 <[^>]*> ecb0 0b02 	fldmiad	r0!, {d0}
0+05c <[^>]*> ed30 0b02 	fldmdbd	r0!, {d0}
0+060 <[^>]*> ed30 0b02 	fldmdbd	r0!, {d0}
0+064 <[^>]*> ec80 0b02 	fstmiad	r0, {d0}
0+068 <[^>]*> ec80 0b02 	fstmiad	r0, {d0}
0+06c <[^>]*> eca0 0b02 	fstmiad	r0!, {d0}
0+070 <[^>]*> eca0 0b02 	fstmiad	r0!, {d0}
0+074 <[^>]*> ed20 0b02 	fstmdbd	r0!, {d0}
0+078 <[^>]*> ed20 0b02 	fstmdbd	r0!, {d0}
d49 4
a52 4
0+09c <[^>]*> ee30 0b10 	fmrdh	r0, d0
0+0a0 <[^>]*> ee10 0b10 	fmrdl	r0, d0
0+0a4 <[^>]*> ee20 0b10 	fmdhr	d0, r0
0+0a8 <[^>]*> ee00 0b10 	fmdlr	d0, r0
d92 40
a131 40
0+148 <[^>]*> ee30 1b10 	fmrdh	r1, d0
0+14c <[^>]*> ee30 eb10 	fmrdh	lr, d0
0+150 <[^>]*> ee31 0b10 	fmrdh	r0, d1
0+154 <[^>]*> ee32 0b10 	fmrdh	r0, d2
0+158 <[^>]*> ee3f 0b10 	fmrdh	r0, d15
0+15c <[^>]*> ee10 1b10 	fmrdl	r1, d0
0+160 <[^>]*> ee10 eb10 	fmrdl	lr, d0
0+164 <[^>]*> ee11 0b10 	fmrdl	r0, d1
0+168 <[^>]*> ee12 0b10 	fmrdl	r0, d2
0+16c <[^>]*> ee1f 0b10 	fmrdl	r0, d15
0+170 <[^>]*> ee20 1b10 	fmdhr	d0, r1
0+174 <[^>]*> ee20 eb10 	fmdhr	d0, lr
0+178 <[^>]*> ee21 0b10 	fmdhr	d1, r0
0+17c <[^>]*> ee22 0b10 	fmdhr	d2, r0
0+180 <[^>]*> ee2f 0b10 	fmdhr	d15, r0
0+184 <[^>]*> ee00 1b10 	fmdlr	d0, r1
0+188 <[^>]*> ee00 eb10 	fmdlr	d0, lr
0+18c <[^>]*> ee01 0b10 	fmdlr	d1, r0
0+190 <[^>]*> ee02 0b10 	fmdlr	d2, r0
0+194 <[^>]*> ee0f 0b10 	fmdlr	d15, r0
0+198 <[^>]*> ed91 0b00 	fldd	d0, \[r1\]
0+19c <[^>]*> ed9e 0b00 	fldd	d0, \[lr\]
0+1a0 <[^>]*> ed90 0b00 	fldd	d0, \[r0\]
0+1a4 <[^>]*> ed90 0bff 	fldd	d0, \[r0, #1020\]
0+1a8 <[^>]*> ed10 0bff 	fldd	d0, \[r0, #-1020\]
0+1ac <[^>]*> ed90 1b00 	fldd	d1, \[r0\]
0+1b0 <[^>]*> ed90 2b00 	fldd	d2, \[r0\]
0+1b4 <[^>]*> ed90 fb00 	fldd	d15, \[r0\]
0+1b8 <[^>]*> ed8c cbc9 	fstd	d12, \[ip, #804\]
0+1bc <[^>]*> ec90 1b02 	fldmiad	r0, {d1}
0+1c0 <[^>]*> ec90 2b02 	fldmiad	r0, {d2}
0+1c4 <[^>]*> ec90 fb02 	fldmiad	r0, {d15}
0+1c8 <[^>]*> ec90 0b04 	fldmiad	r0, {d0-d1}
0+1cc <[^>]*> ec90 0b06 	fldmiad	r0, {d0-d2}
0+1d0 <[^>]*> ec90 0b20 	fldmiad	r0, {d0-d15}
0+1d4 <[^>]*> ec90 1b1e 	fldmiad	r0, {d1-d15}
0+1d8 <[^>]*> ec90 2b1c 	fldmiad	r0, {d2-d15}
0+1dc <[^>]*> ec90 eb04 	fldmiad	r0, {d14-d15}
0+1e0 <[^>]*> ec91 0b02 	fldmiad	r1, {d0}
0+1e4 <[^>]*> ec9e 0b02 	fldmiad	lr, {d0}
d171 2
a172 2
0+276 <[^>]*> ed95 2b00 	fldd(eq|)	d2, \[r5\]
0+27a <[^>]*> ed8c 1b00 	fstd(eq|)	d1, \[ip\]
d174 4
a177 4
0+280 <[^>]*> ec91 1b02 	fldmiad(eq|)	r1, {d1}
0+284 <[^>]*> ec92 2b02 	fldmiad(eq|)	r2, {d2}
0+288 <[^>]*> ecb3 3b02 	fldmiad(eq|)	r3!, {d3}
0+28c <[^>]*> ecb4 4b02 	fldmiad(eq|)	r4!, {d4}
d179 4
a182 4
0+292 <[^>]*> ed35 5b02 	fldmdbd(eq|)	r5!, {d5}
0+296 <[^>]*> ed36 6b02 	fldmdbd(eq|)	r6!, {d6}
0+29a <[^>]*> ec87 fb02 	fstmiad(eq|)	r7, {d15}
0+29e <[^>]*> ec88 eb02 	fstmiad(eq|)	r8, {d14}
d184 4
a187 4
0+2a4 <[^>]*> eca9 db02 	fstmiad(eq|)	r9!, {d13}
0+2a8 <[^>]*> ecaa cb02 	fstmiad(eq|)	sl!, {d12}
0+2ac <[^>]*> ed2b bb02 	fstmdbd(eq|)	fp!, {d11}
0+2b0 <[^>]*> ed2c ab02 	fstmdbd(eq|)	ip!, {d10}
d199 4
a202 4
0+2da <[^>]*> ee31 8b10 	fmrdh(eq|)	r8, d1
0+2de <[^>]*> ee1f 7b10 	fmrdl(eq|)	r7, d15
0+2e2 <[^>]*> ee21 fb10 	fmdhr(eq|)	d1, pc
0+2e6 <[^>]*> ee0f 1b10 	fmdlr(eq|)	d15, r1
@


1.1.2.1
log
@	* binutils/readelf.c (arm_attr_tag_VFP_arch): Add VFPv3.

	* gas/config/tc-arm.c (limits.h): Include.
	(fpu_arch_vfp_v3, fpu_vfp_ext_v3, fpu_neon_ext_v1)
	(fpu_vfp_v3_or_neon_ext): Declare constants.
	(neon_el_type): New enumeration of types for Neon vector elements.
	(neon_type_el): New struct. Define type and size of a vector element.
   	(NEON_MAX_TYPE_ELS): Define constant. The maximum number of types per
	instruction.
	(neon_type): Define struct. The type of an instruction.
	(arm_it): Add 'vectype' for the current instruction.
	(isscalar, immisalign, regisimm, isquad): New predicates for operands.
	(vfp_sp_reg_pos): Rename to...
	(vfp_reg_pos): ...this, and add VFP_REG_Dd, VFP_REG_Dm, VFP_REG_Dn
	tags.
	(arm_reg_type): Add REG_TYPE_NQ (Neon Q register) and REG_TYPE_NDQ
	(Neon D or Q register).
	(reg_expected_msgs): Sync with above. Allow VFD to mean VFP or Neon
	D register.
	(GE_OPT_PREFIX_BIG): Define constant, for use in...
	(my_get_expression): Allow above constant as argument to accept
	64-bit constants with optional prefix.
	(arm_reg_parse): Add extra argument to return the specific type of
	register in when either a D or Q register (REG_TYPE_NDQ) is requested.
	Can be NULL.
	(parse_scalar): New function. Parse Neon scalar (vector reg and index).
	(parse_reg_list): Update for new arm_reg_parse args.
	(parse_vfp_reg_list): Allow parsing of Neon D/Q register lists.
	(parse_neon_el_struct_list): New function. Parse element/structure
	register lists for VLD<n>/VST<n> instructions.
	(s_arm_unwind_save_vfp): Update for new parse_vfp_reg_list args.
	(s_arm_unwind_save_mmxwr): Likewise.
	(s_arm_unwind_save_mmxwcg): Likewise.
	(s_arm_unwind_movsp): Likewise.
	(s_arm_unwind_setfp): Likewise.
	(parse_big_immediate): New function. Parse an immediate, which may
	be 64 bits wide. Put results in inst.operands[i].
	(parse_shift): Update for new arm_reg_parse args.
	(parse_address): Likewise. Add parsing of alignment specifiers.
	(parse_neon_mov): Parse the operands of a VMOV instruction.
	(operand_parse_code): Add OP_RND, OP_RNQ, OP_RNDQ, OP_RNSC,
	OP_NRDLST, OP_NSTRLST, OP_NILO, OP_RNDQ_I0, OP_RR_RNSC,
	OP_RNDQ_RNSC, OP_RND_RNSC, OP_VMOV, OP_RNDQ_IMVNb, OP_RNDQ_I63b,
	OP_I0, OP_I16z, OP_I32z, OP_I64, OP_I64z, OP_oI32b, OP_oRND,
	OP_oRNQ, OP_oRNDQ.
	(parse_operands): Handle new codes above.
	(encode_arm_vfp_sp_reg): Rename to...
	(encode_arm_vfp_reg): ...this. Handle D regs (0-31) too. Complain if
	selected VFP version only supports D0-D15.
	(do_vfp_sp_monadic, do_vfp_sp_dyadic, do_vfp_sp_compare_z)
	(do_vfp_dp_sp_cvt, do_vfp_reg_from_sp, do_vfp_reg2_from_sp2)
	(do_vfp_sp_from_reg, do_vfp_sp2_from_reg2, do_vfp_sp_ldst)
	(do_vfp_dp_ldst, vfp_sp_ldstm, vfp_dp_ldstm): Update for new
	encode_arm_vfp_reg name, and allow 32 D regs.
	(do_vfp_dp_rd_rm, do_vfp_dp_rn_rd, do_vfp_dp_rd_rn)
	(do_vfp_dp_rd_rn_rm, do_vfp_rm_rd_rn): New functions to encode VFP
	insns allowing 32 D regs.
	(do_vfp_sp_const, do_vfp_dp_const, vfp_conv, do_vfp_sp_conv_16)
	(do_vfp_dp_conv_16, do_vfp_sp_conv_32, do_vfp_dp_conv_32): Handle
	constant-load and conversion insns introduced with VFPv3.
	(neon_tab_entry): New struct.
	(NEON_ENC_TAB): Bit patterns for overloaded Neon instructions, and
	those which are the targets of pseudo-instructions.
	(neon_opc): Enumerate opcodes, use as indices into...
	(neon_enc_tab): ...this. Hold data from NEON_ENC_TAB.
	(NEON_ENC_INTEGER, NEON_ENC_ARMREG, NEON_ENC_POLY, NEON_ENC_FLOAT)
	(NEON_ENC_SCALAR, NEON_ENC_IMMED, NEON_ENC_INTERLV, NEON_ENC_LANE)
	(NEON_ENC_DUP): Define meaningful helper macros to look up values in
	neon_enc_tab.
	(neon_shape): Enumerate shapes (permitted register widths, etc.) for
	Neon instructions.
	(neon_type_mask): New. Compact type representation for type
	checking.
	(N_SU_ALL, N_SU_32, N_SU_16_64, N_SUF_32, N_I_ALL, N_IF_32): Common
	permitted type combinations.
	(N_IGNORE_TYPE): New macro.
	(neon_check_shape): New function. Check an instruction shape for
	multiple alternatives. Return the specific shape for the current
	instruction.
	(neon_modify_type_size): New function. Modify a vector type and
	size, depending on the bit mask in argument 1.
	(neon_type_promote): New function. Convert a given "key" type (of an
	operand) into the correct type for a different operand, based on a bit
	mask.
	(type_chk_of_el_type): New function. Convert a type and size into the
	compact representation used for type checking.
	(el_type_of_type_ckh): New function. Reverse of above (only when a
	single bit is set in the bit mask).
	(modify_types_allowed): New function. Alter a mask of allowed types
	based on a bit mask of modifications.
	(neon_check_type): New function. Check the type of the current
	instruction against the variable argument list. The "key" type of the
	instruction is returned.
	(neon_dp_fixup): New function. Fill in and modify instruction bits for
	a Neon data-processing instruction depending on whether we're in ARM
	mode or Thumb-2 mode.
	(neon_logbits): New function.
	(neon_three_same, neon_two_same, do_neon_dyadic_i_su)
	(do_neon_dyadic_i64_su, neon_imm_shift, do_neon_shl_imm)
	(do_neon_qshl_imm, neon_cmode_for_logic_imm)
	(neon_bits_same_in_bytes, neon_squash_bits, neon_is_quarter_float)
	(neon_qfloat_bits, neon_cmode_for_move_imm, neon_write_immbits)
	(neon_invert_size, do_neon_logic, do_neon_bitfield, neon_dyadic)
	(do_neon_dyadic_if_su, do_neon_dyadic_if_su_d, do_neon_dyadic_if_i)
	(do_neon_dyadic_if_i_d, do_neon_addsub_if_i, neon_exchange_operands)
	(neon_compare, do_neon_cmp, do_neon_cmp_inv, do_neon_ceq)
	(neon_scalar_for_mul, neon_mul_mac, do_neon_mac_maybe_scalar)
	(do_neon_tst, do_neon_mul, do_neon_qdmulh, do_neon_fcmp_absolute)
	(do_neon_fcmp_absolute_inv, do_neon_step, do_neon_abs_neg)
	(do_neon_sli, do_neon_sri, do_neon_qshlu_imm, do_neon_qmovn)
	(do_neon_qmovun, do_neon_rshift_sat_narrow)
	(do_neon_rshift_sat_narrow_u, do_neon_movn, do_neon_rshift_narrow)
	(do_neon_shll, neon_cvt_flavour, do_neon_cvt, neon_move_immediate)
	(do_neon_mvn, neon_mixed_length, do_neon_dyadic_long, do_neon_abal)
	(neon_mac_reg_scalar_long, do_neon_mac_maybe_scalar_long)
	(do_neon_dyadic_wide, do_neon_vmull, do_neon_ext, do_neon_rev)
	(do_neon_dup, do_neon_mov, do_neon_rshift_round_imm, do_neon_movl)
	(do_neon_trn, do_neon_zip_uzp, do_neon_sat_abs_neg)
	(do_neon_pair_long, do_neon_recip_est, do_neon_cls, do_neon_clz)
	(do_neon_cnt, do_neon_swp, do_neon_tbl_tbx, do_neon_ldm_stm)
	(do_neon_ldr_str, do_neon_ld_st_interleave, neon_alignment_bit)
	(do_neon_ld_st_lane, do_neon_ld_dup, do_neon_ldx_stx): New
	functions. Neon bit encoding and encoding helpers.
	(parse_neon_type): New function. Parse Neon type specifier.
	(opcode_lookup): Allow parsing of Neon type specifiers.
	(REGNUM2, REGSETH, REGSET2): New macros.
	(reg_names): Add new VFPv3 and Neon registers.
	(NUF, nUF, NCE, nCE): New macros for opcode table.
	(insns): More VFP registers allowed in fcpyd, fmdhr, fmdlr, fmrdh,
	fmrdl, fabsd, fnegd, fsqrtd, faddd, fsubd, fmuld, fdivd, fmacd,
	fmscd, fnmuld, fnmacd, fnmscd, fcmpd, fcmpzd, fcmped, fcmpezd,
	fmdrr, fmrrd. Add Neon instructions vaba, vhadd, vrhadd, vhsub,
	vqadd, vqsub, vrshl, vqrshl, vshl, vqshl{u}, vand, vbic, vorr, vorn,
	veor, vbsl, vbit, vbif, vabd, vmax, vmin, vcge, vcgt, vclt, vcle,
	vceq, vpmax, vpmin, vmla, vmls, vpadd, vadd, vsub, vtst, vmul,
	vqdmulh, vqrdmulh, vacge, vacgt, vaclt, vacle, vrecps, vrsqrts,
	vabs, vneg, v{r}shr,  v{r}sra, vsli, vsri, vqshrn, vq{r}shr{u}n,
	v{r}shrn, vshll, vcvt, vmov, vmvn, vabal, vabdl, vaddl, vsubl,
	vmlal, vmlsl, vaddw, vsubw, v{r}addhn, v{r}subhn, vqdmlal, vqdmlsl,
	vqdmull, vmull, vext, vrev64, vrev32, vrev16, vdup, vmovl, v{q}movn,
	vzip, vuzp, vqabs, vqneg, vpadal, vpaddl, vrecpe, vrsqrte, vcls,
	vclz, vcnt, vswp, vtrn, vtbl, vtbx, vldm, vstm, vldr, vstr,
	vld[1234], vst[1234], fconst[sd], f[us][lh]to[sd], fto[us][lh][sd].
	(tc_arm_regname_to_dw2regnum): Update for arm_reg_parse args.
	(arm_cpu_option_table): Add Neon and VFPv3 to Cortex-A8.
	(arm_option_cpu_value): Add vfp3 and neon.
	(aeabi_set_public_attributes): Support VFPv3 and NEON attributes.
	Fix VFPv1 attribute.

	* gas/testsuite/gas/arm/copro.s: Avoid ldcl which encodes as a bad Neon
	instruction.
	* gas/testsuite/gas/arm/copro.d: Update accordingly.
	* gas/testsuite/gas/arm/neon-cond.s: New test. Conditional Neon opcodes
	in ARM mode.
	* gas/testsuite/gas/arm/neon-cond.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-cov.s: New test. Coverage of Neon
	instructions.
	* gas/testsuite/gas/arm/neon-cov.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-ldst-es.s: New test. Element and structure
	loads and stores.
	* gas/testsuite/gas/arm/neon-ldst-es.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-ldst-rm.s: New test. Single and multiple
	register loads and stores.
	* gas/testsuite/gas/arm/neon-ldst-rm.d: Expected results of above.
	* gas/testsuite/gas/arm/neon-omit.s: New test. Omission of optional
	operands.
	* gas/testsuite/gas/arm/neon-omit.d: Expected results of above.
	* gas/testsuite/gas/arm/vfp1.d: Expect Neon syntax for some VFP
	instructions.
	* gas/testsuite/gas/arm/vfp1_t2.d: Likewise.
	* gas/testsuite/gas/arm/vfp1xD.d: Likewise.
	* gas/testsuite/gas/arm/vfp1xD_t2.d: Likewise.
	* gas/testsuite/gas/arm/vfp2.d: Likewise.
	* gas/testsuite/gas/arm/vfp2_t2.d: Likewise.
	* gas/testsuite/gas/arm/vfp3-32drs.s: New test. Extended D register
	range for VFP instructions.
	* gas/testsuite/gas/arm/vfp3-32drs.d: Expected results of above.
	* gas/testsuite/gas/arm/vfp3-const-conv.s: New test. VFPv3
	constant-load and conversion instructions.
	* gas/testsuite/gas/arm/vfp3-const-conv.d: Expected results of above.

	* include/opcode/arm.h (FPU_VFP_EXT_V3): Define constant.
	(FPU_NEON_EXT_V1): Likewise.
	(FPU_VFP_HARD): Update.
	(FPU_VFP_V3): Define macro.
	(FPU_ARCH_VFP_V3, FPU_ARCH_VFP_V3_PLUS_NEON_V1): Define macros.

	* opcodes/arm-dis.c (coprocessor_opcodes): Add %A, %B, %k,
	convert %<code>[zy] into %[zy]<code>.  Expand meaning of
	%<bitfield>['`?].
	Add unified load/store instruction names.
	(neon_opcode_table): New.
	(arm_opcodes): Expand meaning of %<bitfield>['`?].
	(arm_decode_bitfield): New.
	(print_insn_coprocessor): Add pc argument. Add %A & %B specifiers.
	Use arm_decode_bitfield and adjust numeric specifiers.
	Adjust %z & %y.
	(print_insn_neon): New.
	(print_insn_arm): Adjust print_insn_coprocessor call. Call
	print_insn_neon. Use arm_decode_bitfield and adjust numeric specifiers.
	(print_insn_thumb32): Likewise.
@
text
@d27 14
a40 14
0+044 <[^>]*> ed90 0b00 	vldr	d0, \[r0\]
0+048 <[^>]*> ed80 0b00 	vstr	d0, \[r0\]
0+04c <[^>]*> ec90 0b02 	vldmia	r0, {d0}
0+050 <[^>]*> ec90 0b02 	vldmia	r0, {d0}
0+054 <[^>]*> ecb0 0b02 	vldmia	r0!, {d0}
0+058 <[^>]*> ecb0 0b02 	vldmia	r0!, {d0}
0+05c <[^>]*> ed30 0b02 	vldmdb	r0!, {d0}
0+060 <[^>]*> ed30 0b02 	vldmdb	r0!, {d0}
0+064 <[^>]*> ec80 0b02 	vstmia	r0, {d0}
0+068 <[^>]*> ec80 0b02 	vstmia	r0, {d0}
0+06c <[^>]*> eca0 0b02 	vstmia	r0!, {d0}
0+070 <[^>]*> eca0 0b02 	vstmia	r0!, {d0}
0+074 <[^>]*> ed20 0b02 	vstmdb	r0!, {d0}
0+078 <[^>]*> ed20 0b02 	vstmdb	r0!, {d0}
d49 4
a52 4
0+09c <[^>]*> ee30 0b10 	vmov\.32	r0, d0\[1\]
0+0a0 <[^>]*> ee10 0b10 	vmov\.32	r0, d0\[0\]
0+0a4 <[^>]*> ee20 0b10 	vmov\.32	d0\[1\], r0
0+0a8 <[^>]*> ee00 0b10 	vmov\.32	d0\[0\], r0
d92 40
a131 40
0+148 <[^>]*> ee30 1b10 	vmov\.32	r1, d0\[1\]
0+14c <[^>]*> ee30 eb10 	vmov\.32	lr, d0\[1\]
0+150 <[^>]*> ee31 0b10 	vmov\.32	r0, d1\[1\]
0+154 <[^>]*> ee32 0b10 	vmov\.32	r0, d2\[1\]
0+158 <[^>]*> ee3f 0b10 	vmov\.32	r0, d15\[1\]
0+15c <[^>]*> ee10 1b10 	vmov\.32	r1, d0\[0\]
0+160 <[^>]*> ee10 eb10 	vmov\.32	lr, d0\[0\]
0+164 <[^>]*> ee11 0b10 	vmov\.32	r0, d1\[0\]
0+168 <[^>]*> ee12 0b10 	vmov\.32	r0, d2\[0\]
0+16c <[^>]*> ee1f 0b10 	vmov\.32	r0, d15\[0\]
0+170 <[^>]*> ee20 1b10 	vmov\.32	d0\[1\], r1
0+174 <[^>]*> ee20 eb10 	vmov\.32	d0\[1\], lr
0+178 <[^>]*> ee21 0b10 	vmov\.32	d1\[1\], r0
0+17c <[^>]*> ee22 0b10 	vmov\.32	d2\[1\], r0
0+180 <[^>]*> ee2f 0b10 	vmov\.32	d15\[1\], r0
0+184 <[^>]*> ee00 1b10 	vmov\.32	d0\[0\], r1
0+188 <[^>]*> ee00 eb10 	vmov\.32	d0\[0\], lr
0+18c <[^>]*> ee01 0b10 	vmov\.32	d1\[0\], r0
0+190 <[^>]*> ee02 0b10 	vmov\.32	d2\[0\], r0
0+194 <[^>]*> ee0f 0b10 	vmov\.32	d15\[0\], r0
0+198 <[^>]*> ed91 0b00 	vldr	d0, \[r1\]
0+19c <[^>]*> ed9e 0b00 	vldr	d0, \[lr\]
0+1a0 <[^>]*> ed90 0b00 	vldr	d0, \[r0\]
0+1a4 <[^>]*> ed90 0bff 	vldr	d0, \[r0, #1020\]
0+1a8 <[^>]*> ed10 0bff 	vldr	d0, \[r0, #-1020\]
0+1ac <[^>]*> ed90 1b00 	vldr	d1, \[r0\]
0+1b0 <[^>]*> ed90 2b00 	vldr	d2, \[r0\]
0+1b4 <[^>]*> ed90 fb00 	vldr	d15, \[r0\]
0+1b8 <[^>]*> ed8c cbc9 	vstr	d12, \[ip, #804\]
0+1bc <[^>]*> ec90 1b02 	vldmia	r0, {d1}
0+1c0 <[^>]*> ec90 2b02 	vldmia	r0, {d2}
0+1c4 <[^>]*> ec90 fb02 	vldmia	r0, {d15}
0+1c8 <[^>]*> ec90 0b04 	vldmia	r0, {d0-d1}
0+1cc <[^>]*> ec90 0b06 	vldmia	r0, {d0-d2}
0+1d0 <[^>]*> ec90 0b20 	vldmia	r0, {d0-d15}
0+1d4 <[^>]*> ec90 1b1e 	vldmia	r0, {d1-d15}
0+1d8 <[^>]*> ec90 2b1c 	vldmia	r0, {d2-d15}
0+1dc <[^>]*> ec90 eb04 	vldmia	r0, {d14-d15}
0+1e0 <[^>]*> ec91 0b02 	vldmia	r1, {d0}
0+1e4 <[^>]*> ec9e 0b02 	vldmia	lr, {d0}
d171 2
a172 2
0+276 <[^>]*> ed95 2b00 	vldr(eq|)	d2, \[r5\]
0+27a <[^>]*> ed8c 1b00 	vstr(eq|)	d1, \[ip\]
d174 4
a177 4
0+280 <[^>]*> ec91 1b02 	vldmia(eq|)	r1, {d1}
0+284 <[^>]*> ec92 2b02 	vldmia(eq|)	r2, {d2}
0+288 <[^>]*> ecb3 3b02 	vldmia(eq|)	r3!, {d3}
0+28c <[^>]*> ecb4 4b02 	vldmia(eq|)	r4!, {d4}
d179 4
a182 4
0+292 <[^>]*> ed35 5b02 	vldmdb(eq|)	r5!, {d5}
0+296 <[^>]*> ed36 6b02 	vldmdb(eq|)	r6!, {d6}
0+29a <[^>]*> ec87 fb02 	vstmia(eq|)	r7, {d15}
0+29e <[^>]*> ec88 eb02 	vstmia(eq|)	r8, {d14}
d184 4
a187 4
0+2a4 <[^>]*> eca9 db02 	vstmia(eq|)	r9!, {d13}
0+2a8 <[^>]*> ecaa cb02 	vstmia(eq|)	sl!, {d12}
0+2ac <[^>]*> ed2b bb02 	vstmdb(eq|)	fp!, {d11}
0+2b0 <[^>]*> ed2c ab02 	vstmdb(eq|)	ip!, {d10}
d199 4
a202 4
0+2da <[^>]*> ee31 8b10 	vmov(eq|)\.32	r8, d1\[1\]
0+2de <[^>]*> ee1f 7b10 	vmov(eq|)\.32	r7, d15\[0\]
0+2e2 <[^>]*> ee21 fb10 	vmov(eq|)\.32	d1\[1\], pc
0+2e6 <[^>]*> ee0f 1b10 	vmov(eq|)\.32	d15\[0\], r1
@


1.1.2.2
log
@2006-04-29  Paul Brook  <paul@@codesourcery.com>

	* opcodes/arm-dis.c (coprocessor_opcodes): Add %c to unconditional
	arm instructions.
	(neon_opcodes): Add conditional execution specifiers.
	(thumb_opcodes): Ditto.
	(thumb32_opcodes): Ditto.
	(arm_conditional): Change 0xe to "al" and add "" to end.
	(ifthen_state, ifthen_next_state, ifthen_address): New.
	(IFTHEN_COND): Define.
	(print_insn_coprocessor, print_insn_neon): Print thumb conditions.
	(print_insn_arm): Change %c to use new values of arm_conditional.
	(print_insn_thumb16): Print thumb conditions.  Add %I.
	(print_insn_thumb32): Print thumb conditions.
	(find_ifthen_state): New function.
	(print_insn): Track IT block state.
	* gas/testsuite/gas/arm/thumb2_bcond.d: Update expected output.
	* gas/testsuite/gas/arm/thumb32.d: Ditto.
	* gas/testsuite/gas/arm/vfp1_t2.d: Ditto.
	* gas/testsuite/gas/arm/vfp1xD_t2.d: Ditto.
	* binutils/testsuite/binutils-all/arm/objdump.exp: New file.
	* binutils/testsuite/binutils-all/arm/thumb2-cond.s: New test.
@
text
@d148 1
d150 4
a153 4
0+22a <[^>]*> eeb4 1bcf 	fcmpedeq	d1, d15
0+22e <[^>]*> eeb5 2bc0 	fcmpezdeq	d2
0+232 <[^>]*> eeb4 3b4e 	fcmpdeq	d3, d14
0+236 <[^>]*> eeb5 4b40 	fcmpzdeq	d4
d155 4
a158 4
0+23c <[^>]*> eeb0 5bcd 	fabsdeq	d5, d13
0+240 <[^>]*> eeb0 6b4c 	fcpydeq	d6, d12
0+244 <[^>]*> eeb1 7b4b 	fnegdeq	d7, d11
0+248 <[^>]*> eeb1 8bca 	fsqrtdeq	d8, d10
d160 4
a163 4
0+24e <[^>]*> ee31 9b0f 	fadddeq	d9, d1, d15
0+252 <[^>]*> ee83 2b0e 	fdivdeq	d2, d3, d14
0+256 <[^>]*> ee0d 4b0c 	fmacdeq	d4, d13, d12
0+25a <[^>]*> ee16 5b0b 	fmscdeq	d5, d6, d11
d165 4
a168 4
0+260 <[^>]*> ee2a 7b09 	fmuldeq	d7, d10, d9
0+264 <[^>]*> ee09 8b4a 	fnmacdeq	d8, d9, d10
0+268 <[^>]*> ee16 7b4b 	fnmscdeq	d7, d6, d11
0+26c <[^>]*> ee24 5b4c 	fnmuldeq	d5, d4, d12
d170 3
a172 3
0+272 <[^>]*> ee3d 3b4e 	fsubdeq	d3, d13, d14
0+276 <[^>]*> ed95 2b00 	vldreq	d2, \[r5\]
0+27a <[^>]*> ed8c 1b00 	vstreq	d1, \[ip\]
d174 4
a177 4
0+280 <[^>]*> ec91 1b02 	vldmiaeq	r1, {d1}
0+284 <[^>]*> ec92 2b02 	vldmiaeq	r2, {d2}
0+288 <[^>]*> ecb3 3b02 	vldmiaeq	r3!, {d3}
0+28c <[^>]*> ecb4 4b02 	vldmiaeq	r4!, {d4}
d179 4
a182 4
0+292 <[^>]*> ed35 5b02 	vldmdbeq	r5!, {d5}
0+296 <[^>]*> ed36 6b02 	vldmdbeq	r6!, {d6}
0+29a <[^>]*> ec87 fb02 	vstmiaeq	r7, {d15}
0+29e <[^>]*> ec88 eb02 	vstmiaeq	r8, {d14}
d184 4
a187 4
0+2a4 <[^>]*> eca9 db02 	vstmiaeq	r9!, {d13}
0+2a8 <[^>]*> ecaa cb02 	vstmiaeq	sl!, {d12}
0+2ac <[^>]*> ed2b bb02 	vstmdbeq	fp!, {d11}
0+2b0 <[^>]*> ed2c ab02 	vstmdbeq	ip!, {d10}
d189 4
a192 4
0+2b6 <[^>]*> eeb8 fbe0 	fsitodeq	d15, s1
0+2ba <[^>]*> eeb8 1b6f 	fuitodeq	d1, s31
0+2be <[^>]*> eefd 0b4f 	ftosideq	s1, d15
0+2c2 <[^>]*> eefd fbc2 	ftosizdeq	s31, d2
d194 4
a197 4
0+2c8 <[^>]*> eefc 7b42 	ftouideq	s15, d2
0+2cc <[^>]*> eefc 5bc3 	ftouizdeq	s11, d3
0+2d0 <[^>]*> eeb7 1ac5 	fcvtdseq	d1, s10
0+2d4 <[^>]*> eef7 5bc1 	fcvtsdeq	s11, d1
d199 4
a202 4
0+2da <[^>]*> ee31 8b10 	vmoveq\.32	r8, d1\[1\]
0+2de <[^>]*> ee1f 7b10 	vmoveq\.32	r7, d15\[0\]
0+2e2 <[^>]*> ee21 fb10 	vmoveq\.32	d1\[1\], pc
0+2e6 <[^>]*> ee0f 1b10 	vmoveq\.32	d15\[0\], r1
@


