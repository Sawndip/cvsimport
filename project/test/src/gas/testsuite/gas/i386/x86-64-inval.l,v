head	1.15;
access;
symbols
	binutils-2_24-branch:1.15.0.2
	binutils-2_24-branchpoint:1.15
	binutils-2_21_1:1.14
	binutils-2_23_2:1.14
	binutils-2_23_1:1.14
	binutils-2_23:1.14
	binutils-2_23-branch:1.14.0.8
	binutils-2_23-branchpoint:1.14
	binutils-2_22_branch:1.14.0.6
	binutils-2_22:1.14
	binutils-2_22-branch:1.14.0.4
	binutils-2_22-branchpoint:1.14
	binutils-2_21:1.14
	binutils-2_21-branch:1.14.0.2
	binutils-2_21-branchpoint:1.14
	binutils-2_20_1:1.13
	binutils-2_20:1.13
	binutils-arc-20081103-branch:1.13.0.10
	binutils-arc-20081103-branchpoint:1.13
	binutils-2_20-branch:1.13.0.8
	binutils-2_20-branchpoint:1.13
	dje-cgen-play1-branch:1.13.0.6
	dje-cgen-play1-branchpoint:1.13
	arc-20081103-branch:1.13.0.4
	arc-20081103-branchpoint:1.13
	binutils-2_19_1:1.13
	binutils-2_19:1.13
	binutils-2_19-branch:1.13.0.2
	binutils-2_19-branchpoint:1.13
	binutils-2_18:1.7
	binutils-2_18-branch:1.7.0.2
	binutils-2_18-branchpoint:1.7
	binutils-csl-coldfire-4_1-32:1.4
	binutils-csl-sourcerygxx-4_1-32:1.4
	binutils-csl-innovasic-fido-3_4_4-33:1.4
	binutils-csl-sourcerygxx-3_4_4-32:1.4
	binutils-csl-coldfire-4_1-30:1.4
	binutils-csl-sourcerygxx-4_1-30:1.4
	binutils-csl-coldfire-4_1-28:1.4
	binutils-csl-sourcerygxx-4_1-29:1.4
	binutils-csl-sourcerygxx-4_1-28:1.4
	binutils-csl-arm-2006q3-27:1.4
	binutils-csl-sourcerygxx-4_1-27:1.4
	binutils-csl-arm-2006q3-26:1.4
	binutils-csl-sourcerygxx-4_1-26:1.4
	binutils-csl-sourcerygxx-4_1-25:1.4
	binutils-csl-sourcerygxx-4_1-24:1.4
	binutils-csl-sourcerygxx-4_1-23:1.4
	binutils-csl-sourcerygxx-4_1-21:1.4
	binutils-csl-arm-2006q3-21:1.4
	binutils-csl-sourcerygxx-4_1-22:1.4
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.4
	binutils-csl-sourcerygxx-4_1-20:1.4
	binutils-csl-arm-2006q3-19:1.4
	binutils-csl-sourcerygxx-4_1-19:1.4
	binutils-csl-sourcerygxx-4_1-18:1.4
	binutils-csl-renesas-4_1-9:1.4
	binutils-csl-sourcerygxx-3_4_4-25:1.4
	binutils-csl-renesas-4_1-8:1.4
	binutils-csl-renesas-4_1-7:1.4
	binutils-csl-renesas-4_1-6:1.4
	binutils-csl-sourcerygxx-4_1-17:1.4
	binutils-csl-sourcerygxx-4_1-14:1.4
	binutils-csl-sourcerygxx-4_1-15:1.4
	binutils-csl-sourcerygxx-4_1-13:1.4
	binutils-2_17:1.4
	binutils-csl-sourcerygxx-4_1-12:1.4
	binutils-csl-sourcerygxx-3_4_4-21:1.4
	binutils-csl-wrs-linux-3_4_4-24:1.4
	binutils-csl-wrs-linux-3_4_4-23:1.4
	binutils-csl-sourcerygxx-4_1-9:1.4
	binutils-csl-sourcerygxx-4_1-8:1.4
	binutils-csl-sourcerygxx-4_1-7:1.4
	binutils-csl-arm-2006q1-6:1.4
	binutils-csl-sourcerygxx-4_1-6:1.4
	binutils-csl-wrs-linux-3_4_4-22:1.4
	binutils-csl-coldfire-4_1-11:1.4
	binutils-csl-sourcerygxx-3_4_4-19:1.4
	binutils-csl-coldfire-4_1-10:1.4
	binutils-csl-sourcerygxx-4_1-5:1.4
	binutils-csl-sourcerygxx-4_1-4:1.4
	binutils-csl-wrs-linux-3_4_4-21:1.4
	binutils-csl-morpho-4_1-4:1.4
	binutils-csl-sourcerygxx-3_4_4-17:1.4
	binutils-csl-wrs-linux-3_4_4-20:1.4
	binutils-2_17-branch:1.4.0.10
	binutils-2_17-branchpoint:1.4
	binutils-csl-2_17-branch:1.4.0.8
	binutils-csl-2_17-branchpoint:1.4
	binutils-csl-gxxpro-3_4-branch:1.4.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.4
	binutils-2_16_1:1.4
	binutils-csl-arm-2005q1b:1.4
	binutils-2_16:1.4
	binutils-csl-arm-2005q1a:1.4
	binutils-csl-arm-2005q1-branch:1.4.0.4
	binutils-csl-arm-2005q1-branchpoint:1.4
	binutils-2_16-branch:1.4.0.2
	binutils-2_16-branchpoint:1.4
	csl-arm-2004-q3d:1.3
	csl-arm-2004-q3:1.3
	binutils-2_15:1.1
	binutils-2_15-branchpoint:1.1
	csl-arm-2004-q1a:1.1
	csl-arm-2004-q1:1.1
	binutils-2_15-branch:1.1.0.12
	cagney_bfdfile-20040213-branch:1.1.0.10
	cagney_bfdfile-20040213-branchpoint:1.1
	cagney_bigcore-20040122-branch:1.1.0.8
	cagney_bigcore-20040122-branchpoint:1.1
	csl-arm-2003-q4:1.1
	binutils-2_14:1.1
	binutils-2_14-branch:1.1.0.6
	binutils-2_14-branchpoint:1.1
	binutils-2_13_2_1:1.1
	binutils-2_13_2:1.1
	binutils-2_13_1:1.1
	binutils-2_13:1.1
	binutils-2_13-branchpoint:1.1
	binutils-2_13-branch:1.1.0.4
	binutils-2_12_1:1.1.2.1
	binutils-2_12-branch:1.1.0.2
	binutils_latest_snapshot:1.15;
locks; strict;
comment	@ * @;


1.15
date	2013.03.02.01.55.20;	author hjl;	state Exp;
branches;
next	1.14;

1.14
date	2009.09.14.13.57.45;	author hjl;	state Exp;
branches;
next	1.13;

1.13
date	2008.03.01.23.30.50;	author hjl;	state Exp;
branches;
next	1.12;

1.12
date	2008.02.23.17.29.17;	author hjl;	state Exp;
branches;
next	1.11;

1.11
date	2008.01.15.18.50.43;	author hjl;	state Exp;
branches;
next	1.10;

1.10
date	2008.01.15.01.37.55;	author hjl;	state Exp;
branches;
next	1.9;

1.9
date	2008.01.12.16.05.41;	author hjl;	state Exp;
branches;
next	1.8;

1.8
date	2008.01.02.21.43.34;	author hjl;	state Exp;
branches;
next	1.7;

1.7
date	2006.12.15.13.11.56;	author hjl;	state Exp;
branches;
next	1.6;

1.6
date	2006.12.14.20.13.28;	author hjl;	state Exp;
branches;
next	1.5;

1.5
date	2006.12.13.18.00.00;	author hjl;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.25.08.42.54;	author jbeulich;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.22.18.09.02;	author hjl;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.21.18.18.03;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	2002.03.01.08.10.06;	author nickc;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2002.04.27.12.46.10;	author amodra;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Add tests for invalid addresses and riz/eiz

	* gas/i386/inval.s: Add tests for invalid addresses and eiz.

	* gas/i386/x86-64-inval.s: Add tests for invalid addresses and
	riz/eiz.

	* gas/i386/inval.l: Updated.
	* gas/i386/x86-64-inval.l: Likewise.
@
text
@.*: Assembler messages:
.*:4: Error: .*
.*:5: Error: .*
.*:6: Error: .*
.*:7: Error: .*
.*:8: Error: .*
.*:9: Error: .*
.*:10: Error: .*
.*:11: Error: .*
.*:12: Error: .*
.*:13: Error: .*
.*:14: Error: .*
.*:15: Error: .*
.*:16: Error: .*
.*:17: Error: .*
.*:18: Error: .*
.*:19: Error: .*
.*:20: Error: .*
.*:21: Error: .*
.*:22: Error: .*
.*:23: Error: .*
.*:24: Error: .*
.*:25: Error: .*
.*:26: Error: .*
.*:27: Error: .*
.*:28: Error: .*
.*:29: Error: .*
.*:30: Error: .*
.*:31: Error: .*
.*:32: Error: .*
.*:33: Error: .*
.*:34: Error: .*
.*:35: Error: .*
.*:36: Error: .*
.*:37: Error: .*
.*:38: Error: .*
.*:39: Error: .*
.*:40: Error: .*
.*:41: Error: .*
.*:42: Error: .*
.*:43: Error: .*
.*:44: Error: .*
.*:45: Error: .*
.*:46: Error: .*
.*:47: Error: .*
.*:48: Error: .*
.*:49: Error: .*
.*:50: Error: .*
.*:51: Error: .*
.*:52: Error: .*
.*:53: Error: .*
.*:54: Error: .*
.*:55: Error: .*
.*:56: Error: .*
.*:57: Error: .*
.*:58: Error: .*
.*:59: Error: .*
.*:60: Error: .*
.*:61: Error: .*
.*:62: Error: .*
.*:63: Error: .*
.*:64: Error: .*
.*:65: Error: .*
.*:67: Error: .*
.*:68: Error: .*
.*:70: Error: .*
.*:71: Error: .*
.*:72: Error: .*
.*:73: Error: .*
.*:74: Error: .*
.*:75: Error: .*
.*:76: Error: .*
.*:77: Error: .*
.*:78: Error: .*
.*:79: Error: .*
.*:80: Error: .*
.*:81: Error: .*
.*:84: Error: .*
.*:85: Error: .*
.*:86: Error: .*
.*:87: Error: .*
.*:88: Error: .*
.*:89: Error: .*
.*:90: Error: .*
.*:91: Error: .*
.*:92: Error: .*
.*:93: Error: .*
.*:94: Error: .*
.*:95: Error: .*
.*:96: Error: .*
.*:97: Error: .*
.*:98: Error: .*
.*:99: Error: .*
.*:100: Error: .*
.*:101: Error: .*
.*:102: Error: .*
.*:103: Error: .*
.*:104: Error: .*
.*:105: Error: .*
.*:106: Error: .*
.*:107: Error: .*
.*:108: Error: .*
.*:109: Error: .*
.*:110: Error: .*
.*:111: Error: .*
.*:112: Error: .*
.*:113: Error: .*
.*:114: Error: .*
.*:115: Error: .*
.*:116: Error: .*
.*:117: Error: .*
GAS LISTING .*


[ 	]*1[ 	]+\.text
[ 	]*2[ 	]+\.allow_index_reg
[ 	]*3[ 	]+\# All the following should be illegal for x86-64
[ 	]*4[ 	]+aaa		\# illegal
[ 	]*5[ 	]+aad		\# illegal
[ 	]*6[ 	]+aam		\# illegal
[ 	]*7[ 	]+aas		\# illegal
[ 	]*8[ 	]+arpl %ax,%ax	\# illegal
[ 	]*9[ 	]+bound %eax,\(%rax\) \# illegal
[ 	]*10[ 	]+calll \*%eax	\# 32-bit data size not allowed
[ 	]*11[ 	]+calll \*\(%ax\)	\# 32-bit data size not allowed
[ 	]*12[ 	]+calll \*\(%eax\)	\# 32-bit data size not allowed
[ 	]*13[ 	]+calll \*\(%r8\)	\# 32-bit data size not allowed
[ 	]*14[ 	]+calll \*\(%rax\)	\# 32-bit data size not allowed
[ 	]*15[ 	]+callq \*\(%ax\)	\# no 16-bit addressing
[ 	]*16[ 	]+daa		\# illegal
[ 	]*17[ 	]+das		\# illegal
[ 	]*18[ 	]+enterl \$0,\$0	\# can't have 32-bit stack operands
[ 	]*19[ 	]+into		\# illegal
[ 	]*20[ 	]+foo:	jcxz foo	\# No prefix exists to select CX as a counter
[ 	]*21[ 	]+jmpl \*%eax	\# 32-bit data size not allowed
[ 	]*22[ 	]+jmpl \*\(%ax\)	\# 32-bit data size not allowed
[ 	]*23[ 	]+jmpl \*\(%eax\)	\# 32-bit data size not allowed
[ 	]*24[ 	]+jmpl \*\(%r8\)	\# 32-bit data size not allowed
[ 	]*25[ 	]+jmpl \*\(%rax\)	\# 32-bit data size not allowed
[ 	]*26[ 	]+jmpq \*\(%ax\)	\# no 16-bit addressing
[ 	]*27[ 	]+lcalll \$0,\$0	\# illegal
[ 	]*28[ 	]+lcallq \$0,\$0	\# illegal
[ 	]*29[ 	]+ldsl %eax,\(%rax\) \# illegal
[ 	]*30[ 	]+ldsq %rax,\(%rax\) \# illegal
[ 	]*31[ 	]+lesl %eax,\(%rax\) \# illegal
[ 	]*32[ 	]+lesq %rax,\(%rax\) \# illegal
[ 	]*33[ 	]+ljmpl \$0,\$0	\# illegal
[ 	]*34[ 	]+ljmpq \$0,\$0	\# illegal
[ 	]*35[ 	]+ljmpq \*\(%rax\)	\# 64-bit data size not allowed
[ 	]*36[ 	]+loopw foo	\# No prefix exists to select CX as a counter
[ 	]*37[ 	]+loopew foo	\# No prefix exists to select CX as a counter
[ 	]*38[ 	]+loopnew foo	\# No prefix exists to select CX as a counter
[ 	]*39[ 	]+loopnzw foo	\# No prefix exists to select CX as a counter
[ 	]*40[ 	]+loopzw foo	\# No prefix exists to select CX as a counter
[ 	]*41[ 	]+leavel		\# can't have 32-bit stack operands
[ 	]*42[ 	]+pop %ds		\# illegal
[ 	]*43[ 	]+pop %es		\# illegal
[ 	]*44[ 	]+pop %ss		\# illegal
[ 	]*45[ 	]+popa		\# illegal
[ 	]*46[ 	]+popl %eax	\# can't have 32-bit stack operands
[ 	]*47[ 	]+push %cs	\# illegal
[ 	]*48[ 	]+push %ds	\# illegal
[ 	]*49[ 	]+push %es	\# illegal
[ 	]*50[ 	]+push %ss	\# illegal
[ 	]*51[ 	]+pusha		\# illegal
[ 	]*52[ 	]+pushl %eax	\# can't have 32-bit stack operands
[ 	]*53[ 	]+pushfl		\# can't have 32-bit stack operands
[ 	]*54[ 	]+popfl		\# can't have 32-bit stack operands
[ 	]*55[ 	]+retl		\# can't have 32-bit stack operands
[ 	]*56[ 	]+insertq \$4,\$2,%xmm2,%ebx \# The last operand must be XMM register\.
[ 	]*57[ 	]+fnstsw %eax
GAS LISTING .*


[ 	]*58[ 	]+fnstsw %al
[ 	]*59[ 	]+fstsw %eax
[ 	]*60[ 	]+fstsw %al
[ 	]*61[ 	]+in \$8,%rax
[ 	]*62[ 	]+out %rax,\$8
[ 	]*63[ 	]+movzxl \(%rax\),%rax
[ 	]*64[ 	]+movnti %ax, \(%rax\)
[ 	]*65[ 	]+movntiw %ax, \(%rax\)
[ 	]*66[ 	]+
[ 	]*67[ 	]+mov 0x80000000\(%rax\),%ebx
[ 	]*68[ 	]+mov 0x80000000,%ebx
[ 	]*69[ 	]+
[ 	]*70[ 	]+add \(%rip,%rsi\), %eax
[ 	]*71[ 	]+add \(%rsi,%rip\), %eax
[ 	]*72[ 	]+add \(,%rip\), %eax
[ 	]*73[ 	]+add \(%eip,%esi\), %eax
[ 	]*74[ 	]+add \(%esi,%eip\), %eax
[ 	]*75[ 	]+add \(,%eip\), %eax
[ 	]*76[ 	]+add \(%rsi,%esi\), %eax
[ 	]*77[ 	]+add \(%esi,%rsi\), %eax
[ 	]*78[ 	]+add \(%eiz\), %eax
[ 	]*79[ 	]+add \(%riz\), %eax
[ 	]*80[ 	]+add \(%rax\), %riz
[ 	]*81[ 	]+add \(%rax\), %eiz
[ 	]*82[ 	]+
[ 	]*83[ 	]+\.intel_syntax noprefix
[ 	]*84[ 	]+cmpxchg16b dword ptr \[rax\] \# Must be oword
[ 	]*85[ 	]+movq xmm1, XMMWORD PTR \[rsp\]
[ 	]*86[ 	]+movq xmm1, DWORD PTR \[rsp\]
[ 	]*87[ 	]+movq xmm1, WORD PTR \[rsp\]
[ 	]*88[ 	]+movq xmm1, BYTE PTR \[rsp\]
[ 	]*89[ 	]+movq XMMWORD PTR \[rsp\],xmm1
[ 	]*90[ 	]+movq DWORD PTR \[rsp\],xmm1
[ 	]*91[ 	]+movq WORD PTR \[rsp\],xmm1
[ 	]*92[ 	]+movq BYTE PTR \[rsp\],xmm1
[ 	]*93[ 	]+fnstsw eax
[ 	]*94[ 	]+fnstsw al
[ 	]*95[ 	]+fstsw eax
[ 	]*96[ 	]+fstsw al
[ 	]*97[ 	]+in rax,8
[ 	]*98[ 	]+out 8,rax
[ 	]*99[ 	]+movsx ax, \[rax\]
[ 	]*100[ 	]+movsx eax, \[rax\]
[ 	]*101[ 	]+movsx rax, \[rax\]
[ 	]*102[ 	]+movzx ax, \[rax\]
[ 	]*103[ 	]+movzx eax, \[rax\]
[ 	]*104[ 	]+movzx rax, \[rax\]
[ 	]*105[ 	]+movnti word ptr \[rax\], ax
[ 	]*106[ 	]+calld eax	\# 32-bit data size not allowed
[ 	]*107[ 	]+calld \[ax\]	\# 32-bit data size not allowed
[ 	]*108[ 	]+calld \[eax\]	\# 32-bit data size not allowed
[ 	]*109[ 	]+calld \[r8\]	\# 32-bit data size not allowed
[ 	]*110[ 	]+calld \[rax\]	\# 32-bit data size not allowed
[ 	]*111[ 	]+callq \[ax\]	\# no 16-bit addressing
[ 	]*112[ 	]+jmpd eax	\# 32-bit data size not allowed
[ 	]*113[ 	]+jmpd \[ax\]	\# 32-bit data size not allowed
[ 	]*114[ 	]+jmpd \[eax\]	\# 32-bit data size not allowed
GAS LISTING .*


[ 	]*115[ 	]+jmpd \[r8\]	\# 32-bit data size not allowed
[ 	]*116[ 	]+jmpd \[rax\]	\# 32-bit data size not allowed
[ 	]*117[ 	]+jmpq \[ax\]	\# no 16-bit addressing
@


1.14
log
@gas/

2009-09-14  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/10636
	* config/tc-i386.c (optimize_disp): Set disp32 for 64bit only
	if there is an ADDR_PREFIX.
	(i386_finalize_displacement): Repor error if signed 32bit
	displacement is out of range.

gas/testsuite/

2009-09-14  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/10636
	* gas/i386/disp.d: New.
	* gas/i386/disp.s: Likewise.
	* gas/i386/x86-64-disp.d: Likewise.
	* gas/i386/x86-64-disp.s: Likewise.

	* gas/i386/i386.exp: Run disp and x86-64-disp.

	* gas/i386/x86-64-addr32.s: Add high 32bit displacement tests.

	* gas/i386/x86-64-addr32.d: Updated.
	* gas/i386/x86-64-addr32-intel.d: Likewise.
	* gas/i386/x86-64-inval.l: Likewise.
	* gas/i386/x86-64-prescott.d: Likewise.

	* gas/i386/x86-64-inval.s: Add invalid displacement tests.

	* gas/i386/x86-64-prescott.s: Replace 0x90909090 displacement
	with 0x909090.
@
text
@a1 1
.*:3: Error: .*
d63 1
a63 1
.*:66: Error: .*
d65 1
a77 2
.*:82: Error: .*
.*:83: Error: .*
d98 14
d116 56
a171 56
[ 	]*2[ 	]+\# All the following should be illegal for x86-64
[ 	]*3[ 	]+aaa		\# illegal
[ 	]*4[ 	]+aad		\# illegal
[ 	]*5[ 	]+aam		\# illegal
[ 	]*6[ 	]+aas		\# illegal
[ 	]*7[ 	]+arpl %ax,%ax	\# illegal
[ 	]*8[ 	]+bound %eax,\(%rax\) \# illegal
[ 	]*9[ 	]+calll \*%eax	\# 32-bit data size not allowed
[ 	]*10[ 	]+calll \*\(%ax\)	\# 32-bit data size not allowed
[ 	]*11[ 	]+calll \*\(%eax\)	\# 32-bit data size not allowed
[ 	]*12[ 	]+calll \*\(%r8\)	\# 32-bit data size not allowed
[ 	]*13[ 	]+calll \*\(%rax\)	\# 32-bit data size not allowed
[ 	]*14[ 	]+callq \*\(%ax\)	\# no 16-bit addressing
[ 	]*15[ 	]+daa		\# illegal
[ 	]*16[ 	]+das		\# illegal
[ 	]*17[ 	]+enterl \$0,\$0	\# can't have 32-bit stack operands
[ 	]*18[ 	]+into		\# illegal
[ 	]*19[ 	]+foo:	jcxz foo	\# No prefix exists to select CX as a counter
[ 	]*20[ 	]+jmpl \*%eax	\# 32-bit data size not allowed
[ 	]*21[ 	]+jmpl \*\(%ax\)	\# 32-bit data size not allowed
[ 	]*22[ 	]+jmpl \*\(%eax\)	\# 32-bit data size not allowed
[ 	]*23[ 	]+jmpl \*\(%r8\)	\# 32-bit data size not allowed
[ 	]*24[ 	]+jmpl \*\(%rax\)	\# 32-bit data size not allowed
[ 	]*25[ 	]+jmpq \*\(%ax\)	\# no 16-bit addressing
[ 	]*26[ 	]+lcalll \$0,\$0	\# illegal
[ 	]*27[ 	]+lcallq \$0,\$0	\# illegal
[ 	]*28[ 	]+ldsl %eax,\(%rax\) \# illegal
[ 	]*29[ 	]+ldsq %rax,\(%rax\) \# illegal
[ 	]*30[ 	]+lesl %eax,\(%rax\) \# illegal
[ 	]*31[ 	]+lesq %rax,\(%rax\) \# illegal
[ 	]*32[ 	]+ljmpl \$0,\$0	\# illegal
[ 	]*33[ 	]+ljmpq \$0,\$0	\# illegal
[ 	]*34[ 	]+ljmpq \*\(%rax\)	\# 64-bit data size not allowed
[ 	]*35[ 	]+loopw foo	\# No prefix exists to select CX as a counter
[ 	]*36[ 	]+loopew foo	\# No prefix exists to select CX as a counter
[ 	]*37[ 	]+loopnew foo	\# No prefix exists to select CX as a counter
[ 	]*38[ 	]+loopnzw foo	\# No prefix exists to select CX as a counter
[ 	]*39[ 	]+loopzw foo	\# No prefix exists to select CX as a counter
[ 	]*40[ 	]+leavel		\# can't have 32-bit stack operands
[ 	]*41[ 	]+pop %ds		\# illegal
[ 	]*42[ 	]+pop %es		\# illegal
[ 	]*43[ 	]+pop %ss		\# illegal
[ 	]*44[ 	]+popa		\# illegal
[ 	]*45[ 	]+popl %eax	\# can't have 32-bit stack operands
[ 	]*46[ 	]+push %cs	\# illegal
[ 	]*47[ 	]+push %ds	\# illegal
[ 	]*48[ 	]+push %es	\# illegal
[ 	]*49[ 	]+push %ss	\# illegal
[ 	]*50[ 	]+pusha		\# illegal
[ 	]*51[ 	]+pushl %eax	\# can't have 32-bit stack operands
[ 	]*52[ 	]+pushfl		\# can't have 32-bit stack operands
[ 	]*53[ 	]+popfl		\# can't have 32-bit stack operands
[ 	]*54[ 	]+retl		\# can't have 32-bit stack operands
[ 	]*55[ 	]+insertq \$4,\$2,%xmm2,%ebx \# The last operand must be XMM register\.
[ 	]*56[ 	]+fnstsw %eax
[ 	]*57[ 	]+fnstsw %al
d175 63
a237 46
[ 	]*58[ 	]+fstsw %eax
[ 	]*59[ 	]+fstsw %al
[ 	]*60[ 	]+in \$8,%rax
[ 	]*61[ 	]+out %rax,\$8
[ 	]*62[ 	]+movzxl \(%rax\),%rax
[ 	]*63[ 	]+movnti %ax, \(%rax\)
[ 	]*64[ 	]+movntiw %ax, \(%rax\)
[ 	]*65[ 	]+
[ 	]*66[ 	]+mov 0x80000000\(%rax\),%ebx
[ 	]*67[ 	]+mov 0x80000000,%ebx
[ 	]*68[ 	]+
[ 	]*69[ 	]+\.intel_syntax noprefix
[ 	]*70[ 	]+cmpxchg16b dword ptr \[rax\] \# Must be oword
[ 	]*71[ 	]+movq xmm1, XMMWORD PTR \[rsp\]
[ 	]*72[ 	]+movq xmm1, DWORD PTR \[rsp\]
[ 	]*73[ 	]+movq xmm1, WORD PTR \[rsp\]
[ 	]*74[ 	]+movq xmm1, BYTE PTR \[rsp\]
[ 	]*75[ 	]+movq XMMWORD PTR \[rsp\],xmm1
[ 	]*76[ 	]+movq DWORD PTR \[rsp\],xmm1
[ 	]*77[ 	]+movq WORD PTR \[rsp\],xmm1
[ 	]*78[ 	]+movq BYTE PTR \[rsp\],xmm1
[ 	]*79[ 	]+fnstsw eax
[ 	]*80[ 	]+fnstsw al
[ 	]*81[ 	]+fstsw eax
[ 	]*82[ 	]+fstsw al
[ 	]*83[ 	]+in rax,8
[ 	]*84[ 	]+out 8,rax
[ 	]*85[ 	]+movsx ax, \[rax\]
[ 	]*86[ 	]+movsx eax, \[rax\]
[ 	]*87[ 	]+movsx rax, \[rax\]
[ 	]*88[ 	]+movzx ax, \[rax\]
[ 	]*89[ 	]+movzx eax, \[rax\]
[ 	]*90[ 	]+movzx rax, \[rax\]
[ 	]*91[ 	]+movnti word ptr \[rax\], ax
[ 	]*92[ 	]+calld eax	\# 32-bit data size not allowed
[ 	]*93[ 	]+calld \[ax\]	\# 32-bit data size not allowed
[ 	]*94[ 	]+calld \[eax\]	\# 32-bit data size not allowed
[ 	]*95[ 	]+calld \[r8\]	\# 32-bit data size not allowed
[ 	]*96[ 	]+calld \[rax\]	\# 32-bit data size not allowed
[ 	]*97[ 	]+callq \[ax\]	\# no 16-bit addressing
[ 	]*98[ 	]+jmpd eax	\# 32-bit data size not allowed
[ 	]*99[ 	]+jmpd \[ax\]	\# 32-bit data size not allowed
[ 	]*100[ 	]+jmpd \[eax\]	\# 32-bit data size not allowed
[ 	]*101[ 	]+jmpd \[r8\]	\# 32-bit data size not allowed
[ 	]*102[ 	]+jmpd \[rax\]	\# 32-bit data size not allowed
[ 	]*103[ 	]+jmpq \[ax\]	\# no 16-bit addressing
@


1.13
log
@gas/testsuite/

2008-03-01  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/x86-64-branch.s: Add tests for 16-bit near indirect
	branches.

	* gas/i386/x86-64-inval.s: Remove tests for 16-bit near indirect
	branches.

	* gas/i386/x86-64-branch.d: Updated.
	* gas/i386/x86-64-inval.l: Likewise.

opcodes/

2008-03-01  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-opc.tbl: Allow 16-bit near indirect branches for x86-64.
	* i386-tbl.h: Regenerated.
@
text
@d64 1
a65 2
.*:68: Error: .*
.*:69: Error: .*
d97 3
d171 38
a208 35
[ 	]*66[ 	]+\.intel_syntax noprefix
[ 	]*67[ 	]+cmpxchg16b dword ptr \[rax\] \# Must be oword
[ 	]*68[ 	]+movq xmm1, XMMWORD PTR \[rsp\]
[ 	]*69[ 	]+movq xmm1, DWORD PTR \[rsp\]
[ 	]*70[ 	]+movq xmm1, WORD PTR \[rsp\]
[ 	]*71[ 	]+movq xmm1, BYTE PTR \[rsp\]
[ 	]*72[ 	]+movq XMMWORD PTR \[rsp\],xmm1
[ 	]*73[ 	]+movq DWORD PTR \[rsp\],xmm1
[ 	]*74[ 	]+movq WORD PTR \[rsp\],xmm1
[ 	]*75[ 	]+movq BYTE PTR \[rsp\],xmm1
[ 	]*76[ 	]+fnstsw eax
[ 	]*77[ 	]+fnstsw al
[ 	]*78[ 	]+fstsw eax
[ 	]*79[ 	]+fstsw al
[ 	]*80[ 	]+in rax,8
[ 	]*81[ 	]+out 8,rax
[ 	]*82[ 	]+movsx ax, \[rax\]
[ 	]*83[ 	]+movsx eax, \[rax\]
[ 	]*84[ 	]+movsx rax, \[rax\]
[ 	]*85[ 	]+movzx ax, \[rax\]
[ 	]*86[ 	]+movzx eax, \[rax\]
[ 	]*87[ 	]+movzx rax, \[rax\]
[ 	]*88[ 	]+movnti word ptr \[rax\], ax
[ 	]*89[ 	]+calld eax	\# 32-bit data size not allowed
[ 	]*90[ 	]+calld \[ax\]	\# 32-bit data size not allowed
[ 	]*91[ 	]+calld \[eax\]	\# 32-bit data size not allowed
[ 	]*92[ 	]+calld \[r8\]	\# 32-bit data size not allowed
[ 	]*93[ 	]+calld \[rax\]	\# 32-bit data size not allowed
[ 	]*94[ 	]+callq \[ax\]	\# no 16-bit addressing
[ 	]*95[ 	]+jmpd eax	\# 32-bit data size not allowed
[ 	]*96[ 	]+jmpd \[ax\]	\# 32-bit data size not allowed
[ 	]*97[ 	]+jmpd \[eax\]	\# 32-bit data size not allowed
[ 	]*98[ 	]+jmpd \[r8\]	\# 32-bit data size not allowed
[ 	]*99[ 	]+jmpd \[rax\]	\# 32-bit data size not allowed
[ 	]*100[ 	]+jmpq \[ax\]	\# no 16-bit addressing
@


1.12
log
@gas/testsuite/

2008-02-23  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/jump.s: Add tests for far branches.
	* gas/i386/jump16.s: Likewise.

	* gas/i386/jump.d: Updated.
	* gas/i386/jump16.d: Likewise.
	* gas/i386/x86-64-inval.l: Likewise.

	* gas/i386/x86-64-inval.s: Add tests for 16-bit near indirect
	branches.

opcodes/

2008-02-23  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-opc.tbl: Disallow 16-bit near indirect branches for
	x86-64.
	* i386-tbl.h: Regenerated.
@
text
@a63 2
.*:65: Error: .*
.*:66: Error: .*
d72 2
a97 20
.*:101: Error: .*
.*:102: Error: .*
.*:103: Error: .*
.*:104: Error: .*
.*:105: Error: .*
.*:106: Error: .*
.*:107: Error: .*
.*:108: Error: .*
.*:109: Error: .*
.*:110: Error: .*
.*:111: Error: .*
.*:112: Error: .*
.*:113: Error: .*
.*:114: Error: .*
.*:115: Error: .*
.*:116: Error: .*
.*:117: Error: .*
.*:118: Error: .*
.*:119: Error: .*
.*:120: Error: .*
d114 44
a157 44
[ 	]*14[ 	]+callw \*%ax	\# 16-bit data size not allowed
[ 	]*15[ 	]+callw \*\(%ax\)	\# 16-bit data size not allowed
[ 	]*16[ 	]+callw \*\(%eax\)	\# 16-bit data size not allowed
[ 	]*17[ 	]+callw \*\(%r8\)	\# 16-bit data size not allowed
[ 	]*18[ 	]+callw \*\(%rax\)	\# 16-bit data size not allowed
[ 	]*19[ 	]+callq \*\(%ax\)	\# no 16-bit addressing
[ 	]*20[ 	]+daa		\# illegal
[ 	]*21[ 	]+das		\# illegal
[ 	]*22[ 	]+enterl \$0,\$0	\# can't have 32-bit stack operands
[ 	]*23[ 	]+into		\# illegal
[ 	]*24[ 	]+foo:	jcxz foo	\# No prefix exists to select CX as a counter
[ 	]*25[ 	]+jmpl \*%eax	\# 32-bit data size not allowed
[ 	]*26[ 	]+jmpl \*\(%ax\)	\# 32-bit data size not allowed
[ 	]*27[ 	]+jmpl \*\(%eax\)	\# 32-bit data size not allowed
[ 	]*28[ 	]+jmpl \*\(%r8\)	\# 32-bit data size not allowed
[ 	]*29[ 	]+jmpl \*\(%rax\)	\# 32-bit data size not allowed
[ 	]*30[ 	]+jmpw \*%ax	\# 16-bit data size not allowed
[ 	]*31[ 	]+jmpw \*\(%ax\)	\# 16-bit data size not allowed
[ 	]*32[ 	]+jmpw \*\(%eax\)	\# 16-bit data size not allowed
[ 	]*33[ 	]+jmpw \*\(%r8\)	\# 16-bit data size not allowed
[ 	]*34[ 	]+jmpw \*\(%rax\)	\# 16-bit data size not allowed
[ 	]*35[ 	]+jmpq \*\(%ax\)	\# no 16-bit addressing
[ 	]*36[ 	]+lcalll \$0,\$0	\# illegal
[ 	]*37[ 	]+lcallq \$0,\$0	\# illegal
[ 	]*38[ 	]+ldsl %eax,\(%rax\) \# illegal
[ 	]*39[ 	]+ldsq %rax,\(%rax\) \# illegal
[ 	]*40[ 	]+lesl %eax,\(%rax\) \# illegal
[ 	]*41[ 	]+lesq %rax,\(%rax\) \# illegal
[ 	]*42[ 	]+ljmpl \$0,\$0	\# illegal
[ 	]*43[ 	]+ljmpq \$0,\$0	\# illegal
[ 	]*44[ 	]+ljmpq \*\(%rax\)	\# 64-bit data size not allowed
[ 	]*45[ 	]+loopw foo	\# No prefix exists to select CX as a counter
[ 	]*46[ 	]+loopew foo	\# No prefix exists to select CX as a counter
[ 	]*47[ 	]+loopnew foo	\# No prefix exists to select CX as a counter
[ 	]*48[ 	]+loopnzw foo	\# No prefix exists to select CX as a counter
[ 	]*49[ 	]+loopzw foo	\# No prefix exists to select CX as a counter
[ 	]*50[ 	]+leavel		\# can't have 32-bit stack operands
[ 	]*51[ 	]+pop %ds		\# illegal
[ 	]*52[ 	]+pop %es		\# illegal
[ 	]*53[ 	]+pop %ss		\# illegal
[ 	]*54[ 	]+popa		\# illegal
[ 	]*55[ 	]+popl %eax	\# can't have 32-bit stack operands
[ 	]*56[ 	]+push %cs	\# illegal
[ 	]*57[ 	]+push %ds	\# illegal
d161 43
a203 66
[ 	]*58[ 	]+push %es	\# illegal
[ 	]*59[ 	]+push %ss	\# illegal
[ 	]*60[ 	]+pusha		\# illegal
[ 	]*61[ 	]+pushl %eax	\# can't have 32-bit stack operands
[ 	]*62[ 	]+pushfl		\# can't have 32-bit stack operands
[ 	]*63[ 	]+popfl		\# can't have 32-bit stack operands
[ 	]*64[ 	]+retl		\# can't have 32-bit stack operands
[ 	]*65[ 	]+insertq \$4,\$2,%xmm2,%ebx \# The last operand must be XMM register\.
[ 	]*66[ 	]+fnstsw %eax
[ 	]*67[ 	]+fnstsw %al
[ 	]*68[ 	]+fstsw %eax
[ 	]*69[ 	]+fstsw %al
[ 	]*70[ 	]+in \$8,%rax
[ 	]*71[ 	]+out %rax,\$8
[ 	]*72[ 	]+movzxl \(%rax\),%rax
[ 	]*73[ 	]+movnti %ax, \(%rax\)
[ 	]*74[ 	]+movntiw %ax, \(%rax\)
[ 	]*75[ 	]+
[ 	]*76[ 	]+\.intel_syntax noprefix
[ 	]*77[ 	]+cmpxchg16b dword ptr \[rax\] \# Must be oword
[ 	]*78[ 	]+movq xmm1, XMMWORD PTR \[rsp\]
[ 	]*79[ 	]+movq xmm1, DWORD PTR \[rsp\]
[ 	]*80[ 	]+movq xmm1, WORD PTR \[rsp\]
[ 	]*81[ 	]+movq xmm1, BYTE PTR \[rsp\]
[ 	]*82[ 	]+movq XMMWORD PTR \[rsp\],xmm1
[ 	]*83[ 	]+movq DWORD PTR \[rsp\],xmm1
[ 	]*84[ 	]+movq WORD PTR \[rsp\],xmm1
[ 	]*85[ 	]+movq BYTE PTR \[rsp\],xmm1
[ 	]*86[ 	]+fnstsw eax
[ 	]*87[ 	]+fnstsw al
[ 	]*88[ 	]+fstsw eax
[ 	]*89[ 	]+fstsw al
[ 	]*90[ 	]+in rax,8
[ 	]*91[ 	]+out 8,rax
[ 	]*92[ 	]+movsx ax, \[rax\]
[ 	]*93[ 	]+movsx eax, \[rax\]
[ 	]*94[ 	]+movsx rax, \[rax\]
[ 	]*95[ 	]+movzx ax, \[rax\]
[ 	]*96[ 	]+movzx eax, \[rax\]
[ 	]*97[ 	]+movzx rax, \[rax\]
[ 	]*98[ 	]+movnti word ptr \[rax\], ax
[ 	]*99[ 	]+calld eax	\# 32-bit data size not allowed
[ 	]*100[ 	]+calld \[ax\]	\# 32-bit data size not allowed
[ 	]*101[ 	]+calld \[eax\]	\# 32-bit data size not allowed
[ 	]*102[ 	]+calld \[r8\]	\# 32-bit data size not allowed
[ 	]*103[ 	]+calld \[rax\]	\# 32-bit data size not allowed
[ 	]*104[ 	]+callw ax	\# 16-bit data size not allowed
[ 	]*105[ 	]+callw \[ax\]	\# 16-bit data size not allowed
[ 	]*106[ 	]+callw \[eax\]	\# 16-bit data size not allowed
[ 	]*107[ 	]+callw \[r8\]	\# 16-bit data size not allowed
[ 	]*108[ 	]+callw \[rax\]	\# 16-bit data size not allowed
[ 	]*109[ 	]+callq \[ax\]	\# no 16-bit addressing
[ 	]*110[ 	]+jmpd eax	\# 32-bit data size not allowed
[ 	]*111[ 	]+jmpd \[ax\]	\# 32-bit data size not allowed
[ 	]*112[ 	]+jmpd \[eax\]	\# 32-bit data size not allowed
[ 	]*113[ 	]+jmpd \[r8\]	\# 32-bit data size not allowed
[ 	]*114[ 	]+jmpd \[rax\]	\# 32-bit data size not allowed
GAS LISTING .*


[ 	]*115[ 	]+jmpw ax		\# 16-bit data size not allowed
[ 	]*116[ 	]+jmpw \[ax\]	\# 16-bit data size not allowed
[ 	]*117[ 	]+jmpw \[eax\]	\# 16-bit data size not allowed
[ 	]*118[ 	]+jmpw \[r8\]	\# 16-bit data size not allowed
[ 	]*119[ 	]+jmpw \[rax\]	\# 16-bit data size not allowed
[ 	]*120[ 	]+jmpq \[ax\]	\# no 16-bit addressing
@


1.11
log
@gas/

2008-01-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (md_assemble): Also zap movzx and movsx
	suffix for AT&T syntax.

gas/testsuite/

2008-01-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/i386.s: Add more tests for movsx and movzx.
	* gas/i386/x86_64.s: Likewise.

	* gas/i386/inval.s: Remove tests for movsxw and movzxw.

	* gas/i386/x86-64-inval.s: Remove tests for movsxb, movsxw,
	movsxl, movzxb and movzxw.

	* gas/i386/i386.d: Updated.
	* gas/i386/inval.l: Likewise.
	* gas/i386/x86_64.d: Likewise.
	* gas/i386/x86-64-inval.l: Likewise.

opcodes/

2008-01-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-opc.tbl: Put back 16bit movsx/movzx for AT&T syntax.
	* i386-tbl.h: Regenerated.
@
text
@d61 2
a73 2
.*:75: Error: .*
.*:76: Error: .*
d83 35
d134 44
a177 44
[ 	]*14[ 	]+callq \*\(%ax\)	\# 32-bit data size not allowed
[ 	]*15[ 	]+callw \*\(%ax\)	\# no 16-bit addressing
[ 	]*16[ 	]+daa		\# illegal
[ 	]*17[ 	]+das		\# illegal
[ 	]*18[ 	]+enterl \$0,\$0	\# can't have 32-bit stack operands
[ 	]*19[ 	]+into		\# illegal
[ 	]*20[ 	]+foo:	jcxz foo	\# No prefix exists to select CX as a counter
[ 	]*21[ 	]+jmpl \*%eax	\# 32-bit data size not allowed
[ 	]*22[ 	]+jmpl \*\(%rax\)	\# 32-bit data size not allowed
[ 	]*23[ 	]+lcalll \$0,\$0	\# illegal
[ 	]*24[ 	]+lcallq \$0,\$0	\# illegal
[ 	]*25[ 	]+ldsl %eax,\(%rax\) \# illegal
[ 	]*26[ 	]+ldsq %rax,\(%rax\) \# illegal
[ 	]*27[ 	]+lesl %eax,\(%rax\) \# illegal
[ 	]*28[ 	]+lesq %rax,\(%rax\) \# illegal
[ 	]*29[ 	]+ljmpl \$0,\$0	\# illegal
[ 	]*30[ 	]+ljmpq \$0,\$0	\# illegal
[ 	]*31[ 	]+ljmpq \*\(%rax\)	\# 64-bit data size not allowed
[ 	]*32[ 	]+loopw foo	\# No prefix exists to select CX as a counter
[ 	]*33[ 	]+loopew foo	\# No prefix exists to select CX as a counter
[ 	]*34[ 	]+loopnew foo	\# No prefix exists to select CX as a counter
[ 	]*35[ 	]+loopnzw foo	\# No prefix exists to select CX as a counter
[ 	]*36[ 	]+loopzw foo	\# No prefix exists to select CX as a counter
[ 	]*37[ 	]+leavel		\# can't have 32-bit stack operands
[ 	]*38[ 	]+pop %ds		\# illegal
[ 	]*39[ 	]+pop %es		\# illegal
[ 	]*40[ 	]+pop %ss		\# illegal
[ 	]*41[ 	]+popa		\# illegal
[ 	]*42[ 	]+popl %eax	\# can't have 32-bit stack operands
[ 	]*43[ 	]+push %cs	\# illegal
[ 	]*44[ 	]+push %ds	\# illegal
[ 	]*45[ 	]+push %es	\# illegal
[ 	]*46[ 	]+push %ss	\# illegal
[ 	]*47[ 	]+pusha		\# illegal
[ 	]*48[ 	]+pushl %eax	\# can't have 32-bit stack operands
[ 	]*49[ 	]+pushfl		\# can't have 32-bit stack operands
[ 	]*50[ 	]+popfl		\# can't have 32-bit stack operands
[ 	]*51[ 	]+retl		\# can't have 32-bit stack operands
[ 	]*52[ 	]+insertq \$4,\$2,%xmm2,%ebx \# The last operand must be XMM register\.
[ 	]*53[ 	]+fnstsw %eax
[ 	]*54[ 	]+fnstsw %al
[ 	]*55[ 	]+fstsw %eax
[ 	]*56[ 	]+fstsw %al
[ 	]*57[ 	]+in \$8,%rax
d181 66
a246 28
[ 	]*58[ 	]+out %rax,\$8
[ 	]*59[ 	]+movzxl \(%rax\),%rax
[ 	]*60[ 	]+movnti %ax, \(%rax\)
[ 	]*61[ 	]+movntiw %ax, \(%rax\)
[ 	]*62[ 	]+
[ 	]*63[ 	]+\.intel_syntax noprefix
[ 	]*64[ 	]+cmpxchg16b dword ptr \[rax\] \# Must be oword
[ 	]*65[ 	]+movq xmm1, XMMWORD PTR \[rsp\]
[ 	]*66[ 	]+movq xmm1, DWORD PTR \[rsp\]
[ 	]*67[ 	]+movq xmm1, WORD PTR \[rsp\]
[ 	]*68[ 	]+movq xmm1, BYTE PTR \[rsp\]
[ 	]*69[ 	]+movq XMMWORD PTR \[rsp\],xmm1
[ 	]*70[ 	]+movq DWORD PTR \[rsp\],xmm1
[ 	]*71[ 	]+movq WORD PTR \[rsp\],xmm1
[ 	]*72[ 	]+movq BYTE PTR \[rsp\],xmm1
[ 	]*73[ 	]+fnstsw eax
[ 	]*74[ 	]+fnstsw al
[ 	]*75[ 	]+fstsw eax
[ 	]*76[ 	]+fstsw al
[ 	]*77[ 	]+in rax,8
[ 	]*78[ 	]+out 8,rax
[ 	]*79[ 	]+movsx ax, \[rax\]
[ 	]*80[ 	]+movsx eax, \[rax\]
[ 	]*81[ 	]+movsx rax, \[rax\]
[ 	]*82[ 	]+movzx ax, \[rax\]
[ 	]*83[ 	]+movzx eax, \[rax\]
[ 	]*84[ 	]+movzx rax, \[rax\]
[ 	]*85[ 	]+movnti word ptr \[rax\], ax
@


1.10
log
@gas/

2008-01-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (match_reg_size): New.
	(match_mem_size): Likewise.
	(operand_size_match): Likewise.
	(operand_type_match): Also clear all size fields.
	(match_template): Skip Intel syntax when in AT&T syntax.
	Call operand_size_match to check operand size.
	(i386_att_operand): Set the mem field to 1 for memory
	operand.
	(i386_intel_operand): Likewise.

gas/testsuite/

2008-01-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/i386.s: Add tests for movsx, movzx and movnti.
	* gas/i386/inval.s: Likewise.
	* gas/i386/x86_64.s: Likewise.
	* gas/i386/x86-64-inval.s: Likewise.

	* gas/i386/i386.d: Updated.
	* gas/i386/inval.l: Likewise.
	* gas/i386/x86_64.d: Likewise.
	* gas/i386/x86-64-inval.l: Likewise.

opcodes/

2008-01-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-gen.c (opcode_modifiers): Add IntelSyntax.
	(operand_types): Add Mem.

	* i386-opc.h (IntelSyntax): New.
	* i386-opc.h (Mem): New.
	(Byte): Updated.
	(Opcode_Modifier_Max): Updated.
	(i386_opcode_modifier): Add intelsyntax.
	(i386_operand_type): Add mem.

	* i386-opc.tbl: Remove Reg16 from movnti.  Add sizes to more
	instructions.

	* i386-reg.tbl: Add size for accumulator.

	* i386-init.h: Regenerated.
	* i386-tbl.h: Likewise.
@
text
@a60 2
.*:62: Error: .*
.*:63: Error: .*
d68 2
a82 9
.*:86: Error: .*
.*:87: Error: .*
.*:88: Error: .*
.*:89: Error: .*
.*:90: Error: .*
.*:91: Error: .*
.*:92: Error: .*
.*:93: Error: .*
.*:94: Error: .*
d147 27
a173 36
[ 	]*59[ 	]+movsxb \(%rax\),%eax
[ 	]*60[ 	]+movsxb \(%rax\),%rax
[ 	]*61[ 	]+movsxw \(%rax\),%eax
[ 	]*62[ 	]+movsxw \(%rax\),%rax
[ 	]*63[ 	]+movsxl \(%rax\),%rax
[ 	]*64[ 	]+movzxb \(%rax\),%eax
[ 	]*65[ 	]+movzxb \(%rax\),%rax
[ 	]*66[ 	]+movzxw \(%rax\),%eax
[ 	]*67[ 	]+movzxw \(%rax\),%rax
[ 	]*68[ 	]+movzxl \(%rax\),%rax
[ 	]*69[ 	]+movnti %ax, \(%rax\)
[ 	]*70[ 	]+movntiw %ax, \(%rax\)
[ 	]*71[ 	]+
[ 	]*72[ 	]+\.intel_syntax noprefix
[ 	]*73[ 	]+cmpxchg16b dword ptr \[rax\] \# Must be oword
[ 	]*74[ 	]+movq xmm1, XMMWORD PTR \[rsp\]
[ 	]*75[ 	]+movq xmm1, DWORD PTR \[rsp\]
[ 	]*76[ 	]+movq xmm1, WORD PTR \[rsp\]
[ 	]*77[ 	]+movq xmm1, BYTE PTR \[rsp\]
[ 	]*78[ 	]+movq XMMWORD PTR \[rsp\],xmm1
[ 	]*79[ 	]+movq DWORD PTR \[rsp\],xmm1
[ 	]*80[ 	]+movq WORD PTR \[rsp\],xmm1
[ 	]*81[ 	]+movq BYTE PTR \[rsp\],xmm1
[ 	]*82[ 	]+fnstsw eax
[ 	]*83[ 	]+fnstsw al
[ 	]*84[ 	]+fstsw eax
[ 	]*85[ 	]+fstsw al
[ 	]*86[ 	]+in rax,8
[ 	]*87[ 	]+out 8,rax
[ 	]*88[ 	]+movsx ax, \[rax\]
[ 	]*89[ 	]+movsx eax, \[rax\]
[ 	]*90[ 	]+movsx rax, \[rax\]
[ 	]*91[ 	]+movzx ax, \[rax\]
[ 	]*92[ 	]+movzx eax, \[rax\]
[ 	]*93[ 	]+movzx rax, \[rax\]
[ 	]*94[ 	]+movnti word ptr \[rax\], ax
@


1.9
log
@gas/testsuite/

2008-01-12  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/5534
	* gas/i386/i386.s: Add tests for fnstsw and fstsw.
	* gas/i386/inval.s: Likewise.
	* gas/i386/x86_64.s: Likewise.

	* gas/i386/intel.s: Use word instead of dword on ss.

	* gas/i386/x86-64-inval.s: Add tests for fnstsw, fstsw, in
	and out.

	* gas/i386/prefix.s: Remove invalid fstsw.

	* gas/i386/inval.l: Updated.
	* gas/i386/intelbad.l: Likewise.
	* gas/i386/i386.d: Likewise.
	* gas/i386/x86_64.d: Likewise.
	* gas/i386/x86-64-inval.l: Likewise.
	* gas/i386/prefix.d: Updated.

gas/

2008-01-12  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/5534
	* config/tc-i386.c (_i386_insn): Update comment.
	(operand_type_match): Also clear unspecified.
	(operand_type_register_match): Likewise.
	(parse_operands): Initialize unspecified.
	(i386_intel_operand): Likewise.
	(match_template): Check memory and accumulator operand size.
	(i386_att_operand): Clear unspecified on register operand.
	(intel_e11): Likewise.
	(intel_e09): Set operand size and clean unspecified for
	"XXX PTR".

opcodes/

2008-01-12  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/5534
	* i386-gen.c (operand_type_init): Add Dword to
	OPERAND_TYPE_ACC32.  Add Qword to OPERAND_TYPE_ACC64.
	(opcode_modifiers): Remove CheckSize, Byte, Word, Dword,
	Qword and Xmmword.
	(operand_types): Add Byte, Word, Dword, Fword, Qword, Tbyte,
	Xmmword, Unspecified and Anysize.
	(set_bitfield): Make Mmword an alias of Qword.  Make Oword
	an alias of Xmmword.

	* i386-opc.h (CheckSize): Removed.
	(Byte): Updated.
	(Word): Likewise.
	(Dword): Likewise.
	(Qword): Likewise.
	(Xmmword): Likewise.
	(FWait): Updated.
	(OTMax): Likewise.
	(i386_opcode_modifier): Remove checksize, byte, word, dword,
	qword and xmmword.
	(Fword): New.
	(TBYTE): Likewise.
	(Unspecified): Likewise.
	(Anysize): Likewise.
	(i386_operand_type): Add byte, word, dword, fword, qword,
	tbyte xmmword, unspecified and anysize.

	* i386-opc.tbl: Updated to use Byte, Word, Dword, Fword, Qword,
	Tbyte, Xmmword, Unspecified and Anysize.

	* i386-reg.tbl: Add size for accumulator.

	* i386-init.h: Regenerated.
	* i386-tbl.h: Likewise.
@
text
@d58 2
a69 2
.*:71: Error: .*
.*:72: Error: .*
d73 19
d156 36
a191 17
[ 	]*59[ 	]+
[ 	]*60[ 	]+\.intel_syntax noprefix
[ 	]*61[ 	]+cmpxchg16b dword ptr \[rax\] \# Must be oword
[ 	]*62[ 	]+movq xmm1, XMMWORD PTR \[rsp\]
[ 	]*63[ 	]+movq xmm1, DWORD PTR \[rsp\]
[ 	]*64[ 	]+movq xmm1, WORD PTR \[rsp\]
[ 	]*65[ 	]+movq xmm1, BYTE PTR \[rsp\]
[ 	]*66[ 	]+movq XMMWORD PTR \[rsp\],xmm1
[ 	]*67[ 	]+movq DWORD PTR \[rsp\],xmm1
[ 	]*68[ 	]+movq WORD PTR \[rsp\],xmm1
[ 	]*69[ 	]+movq BYTE PTR \[rsp\],xmm1
[ 	]*70[ 	]+fnstsw eax
[ 	]*71[ 	]+fnstsw al
[ 	]*72[ 	]+fstsw eax
[ 	]*73[ 	]+fstsw al
[ 	]*74[ 	]+in rax,8
[ 	]*75[ 	]+out 8,rax
@


1.8
log
@gas/

2008-01-02  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/5534
	* config/tc-i386.c (match_template): Handle XMMWORD_MNEM_SUFFIX.
	Check memory size in Intel mode.
	(process_suffix): Handle XMMWORD_MNEM_SUFFIX.
	(intel_e09): Likewise.

	* config/tc-i386.h (XMMWORD_MNEM_SUFFIX): New.

gas/testsuite/

2008-01-02  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/5534
	* gas/i386/intel.s: Use QWORD on movq instead of DWORD.

	* gas/i386/inval.s: Add tests for movq.
	* gas/i386/x86-64-inval.s: Likewise.

	* gas/i386/inval.l: Updated.
	* gas/i386/x86-64-inval.l: Likewise.

opcodes/

2008-01-02  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/5534
	* i386-gen.c (opcode_modifiers): Add No_xSuf, CheckSize,
	Byte, Word, Dword, QWord and Xmmword.

	* i386-opc.h (No_xSuf): New.
	(CheckSize): Likewise.
	(Byte): Likewise.
	(Word): Likewise.
	(Dword): Likewise.
	(QWord): Likewise.
	(Xmmword): Likewise.
	(FWait): Updated.
	(i386_opcode_modifier): Add No_xSuf, CheckSize, Byte, Word,
	Dword, QWord and Xmmword.

	* i386-opc.tbl: Add CheckSize|QWord to movq if IgnoreSize is
	used.
	* i386-tbl.h: Regenerated.
@
text
@d52 1
a57 2
.*:59: Error: .*
.*:60: Error: .*
d60 13
d128 5
a132 5
[ 	]*53[ 	]+\.intel_syntax noprefix
[ 	]*54[ 	]+cmpxchg16b dword ptr \[rax\] \# Must be oword
[ 	]*55[ 	]+movq xmm1, XMMWORD PTR \[rsp\]
[ 	]*56[ 	]+movq xmm1, DWORD PTR \[rsp\]
[ 	]*57[ 	]+movq xmm1, WORD PTR \[rsp\]
d136 18
a153 5
[ 	]*58[ 	]+movq xmm1, BYTE PTR \[rsp\]
[ 	]*59[ 	]+movq XMMWORD PTR \[rsp\],xmm1
[ 	]*60[ 	]+movq DWORD PTR \[rsp\],xmm1
[ 	]*61[ 	]+movq WORD PTR \[rsp\],xmm1
[ 	]*62[ 	]+movq BYTE PTR \[rsp\],xmm1
@


1.7
log
@gas/testsuite/

2006-12-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/x86-64-inval.s: cmpxchg16b needs oword ptr, instead
	of xmmword ptr.
	* gas/i386/x86_64.s: Likewise.
	* gas/i386/x86-64-inval.l: Updated.

opcodes/

2006-12-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-dis.c (o_mode): New for 16-byte operand.
	(intel_operand_size): Generate "OWORD PTR " for o_mode.
	(CMPXCHG8B_Fixup): Set bytemode to o_mode instead of x_mode.
@
text
@d53 8
d64 65
a128 54
   1 [ 	]*.text
   2 [ 	]*# All the following should be illegal for x86-64
   3 [ 	]*aaa		# illegal
   4 [ 	]*aad		# illegal
   5 [ 	]*aam		# illegal
   6 [ 	]*aas		# illegal
   7 [ 	]*arpl %ax,%ax	# illegal
   8 [ 	]*bound %eax,\(%rax\) # illegal
   9 [ 	]*calll \*%eax	# 32-bit data size not allowed
  10 [ 	]*calll \*\(%ax\)	# 32-bit data size not allowed
  11 [ 	]*calll \*\(%eax\)	# 32-bit data size not allowed
  12 [ 	]*calll \*\(%r8\)	# 32-bit data size not allowed
  13 [ 	]*calll \*\(%rax\)	# 32-bit data size not allowed
  14 [ 	]*callq \*\(%ax\)	# 32-bit data size not allowed
  15 [ 	]*callw \*\(%ax\)	# no 16-bit addressing
  16 [ 	]*daa		# illegal
  17 [ 	]*das		# illegal
  18 [ 	]*enterl \$0,\$0	# can't have 32-bit stack operands
  19 [ 	]*into		# illegal
  20 [ 	]*foo:[ 	]*jcxz foo	# No prefix exists to select CX as a counter
  21 [ 	]*jmpl \*%eax	# 32-bit data size not allowed
  22 [ 	]*jmpl \*\(%rax\)	# 32-bit data size not allowed
  23 [ 	]*lcalll \$0,\$0	# illegal
  24 [ 	]*lcallq \$0,\$0	# illegal
  25 [ 	]*ldsl %eax,\(%rax\) # illegal
  26 [ 	]*ldsq %rax,\(%rax\) # illegal
  27 [ 	]*lesl %eax,\(%rax\) # illegal
  28 [ 	]*lesq %rax,\(%rax\) # illegal
  29 [ 	]*ljmpl \$0,\$0	# illegal
  30 [ 	]*ljmpq \$0,\$0	# illegal
  31 [ 	]*ljmpq \*\(%rax\)	# 64-bit data size not allowed
  32 [ 	]*loopw foo	# No prefix exists to select CX as a counter
  33 [ 	]*loopew foo	# No prefix exists to select CX as a counter
  34 [ 	]*loopnew foo	# No prefix exists to select CX as a counter
  35 [ 	]*loopnzw foo	# No prefix exists to select CX as a counter
  36 [ 	]*loopzw foo	# No prefix exists to select CX as a counter
  37 [ 	]*leavel		# can't have 32-bit stack operands
  38 [ 	]*pop %ds		# illegal
  39 [ 	]*pop %es		# illegal
  40 [ 	]*pop %ss		# illegal
  41 [ 	]*popa		# illegal
  42 [ 	]*popl %eax	# can't have 32-bit stack operands
  43 [ 	]*push %cs	# illegal
  44 [ 	]*push %ds	# illegal
  45 [ 	]*push %es	# illegal
  46 [ 	]*push %ss	# illegal
  47 [ 	]*pusha		# illegal
  48 [ 	]*pushl %eax	# can't have 32-bit stack operands
  49 [ 	]*pushfl		# can't have 32-bit stack operands
  50 [ 	]*popfl		# can't have 32-bit stack operands
  51 [ 	]*retl		# can't have 32-bit stack operands
  52 [ 	]*insertq \$4,\$2,%xmm2,%ebx # The last operand must be XMM register.
  53 [ 	]*.intel_syntax noprefix
  54 [ 	]*cmpxchg16b dword ptr \[rax\] # Must be oword
@


1.6
log
@gas/testsuite/

2006-12-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/x86-64-inval.s: Add cmpxchg16b.
	* gas/i386/x86_64.s: Likewise.
	* gas/i386/x86-64-inval.l: Updated.
	* gas/i386/x86_64.d: Likewise.

opcodes/

2006-12-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-dis.c (CMPXCHG8B_Fixup): New.
	(grps): Use CMPXCHG8B_Fixup for cmpxchg8b.
@
text
@d109 1
a109 1
  54 [ 	]*cmpxchg16b dword ptr \[rax\] # Must be xmmword
@


1.5
log
@gas/

2006-12-13  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/3712
	* config/tc-i386.c (match_template): Use MAX_OPERANDS for the
	number of operands. Issue an error if MAX_OPERANDS != 4. Add
	the 4th operand check.

gas/testsuite/

2006-12-13  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/3712
	* gas/i386/inval.s: Add invalid insertq.
	* gas/i386/x86-64-inval.s: Likewise.

	* gas/i386/inval.l: Updated.
	* gas/i386/x86-64-inval.l: Likewise.
@
text
@d52 1
d108 2
@


1.4
log
@gas/
2004-11-25 Jan Beulich <jbeulich@@novell.com>

	* config/tc-i386.c (optimize_imm): Adjust immediates to only those
	permissible for the selected instruction suffix.
	(process_suffix): For DefaultSize instructions, suppressing the
	guessing of a 'q' suffix if the instruction doesn't support it is
	pointless, because only an 'l' suffix can be guessed in this place.

gas/testsuite/
2004-11-25 Jan Beulich <jbeulich@@novell.com>
	* gas/i386/x86-64-inval.[sl]: Remove sahf/lahf.

include/opcode/
2004-11-25 Jan Beulich <jbeulich@@novell.com>

	* i386.h: CpuNo64 mov can't reasonably have a 'q' suffix. Moves
	to/from test registers are illegal in 64-bit mode. Add missing
	NoRex64 to sidt. fxsave/fxrstor now allow for a 'q' suffix
	(previously one had to explicitly encode a rex64 prefix). Re-enable
	lahf/sahf in 64-bit mode as at least some Athlon64/Opteron steppings
	support it there. Add cmpxchg16b as per Intel's 64-bit documentation.
@
text
@d51 1
d106 1
@


1.3
log
@2004-07-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/x86-64-inval.l: Remove the leading `+'.
@
text
@a50 2
.*:52: Error: .*
.*:53: Error: .*
d76 29
a104 31
  23 [ 	]*lahf		# illegal
  24 [ 	]*lcalll \$0,\$0	# illegal
  25 [ 	]*lcallq \$0,\$0	# illegal
  26 [ 	]*ldsl %eax,\(%rax\) # illegal
  27 [ 	]*ldsq %rax,\(%rax\) # illegal
  28 [ 	]*lesl %eax,\(%rax\) # illegal
  29 [ 	]*lesq %rax,\(%rax\) # illegal
  30 [ 	]*ljmpl \$0,\$0	# illegal
  31 [ 	]*ljmpq \$0,\$0	# illegal
  32 [ 	]*ljmpq \*\(%rax\)	# 64-bit data size not allowed
  33 [ 	]*loopw foo	# No prefix exists to select CX as a counter
  34 [ 	]*loopew foo	# No prefix exists to select CX as a counter
  35 [ 	]*loopnew foo	# No prefix exists to select CX as a counter
  36 [ 	]*loopnzw foo	# No prefix exists to select CX as a counter
  37 [ 	]*loopzw foo	# No prefix exists to select CX as a counter
  38 [ 	]*leavel		# can't have 32-bit stack operands
  39 [ 	]*pop %ds		# illegal
  40 [ 	]*pop %es		# illegal
  41 [ 	]*pop %ss		# illegal
  42 [ 	]*popa		# illegal
  43 [ 	]*popl %eax	# can't have 32-bit stack operands
  44 [ 	]*push %cs	# illegal
  45 [ 	]*push %ds	# illegal
  46 [ 	]*push %es	# illegal
  47 [ 	]*push %ss	# illegal
  48 [ 	]*pusha		# illegal
  49 [ 	]*pushl %eax	# can't have 32-bit stack operands
  50 [ 	]*pushfl		# can't have 32-bit stack operands
  51 [ 	]*popfl		# can't have 32-bit stack operands
  52 [ 	]*retl		# can't have 32-bit stack operands
  53 [ 	]*sahf		# illegal
@


1.2
log
@For DefaultSize instructions, don't guess a 'q'	suffix if the instruction
doesn't support it.
@
text
@d14 39
a52 39
+.*:15: Error: .*
+.*:16: Error: .*
+.*:17: Error: .*
+.*:18: Error: .*
+.*:19: Error: .*
+.*:20: Error: .*
+.*:21: Error: .*
+.*:22: Error: .*
+.*:23: Error: .*
+.*:24: Error: .*
+.*:25: Error: .*
+.*:26: Error: .*
+.*:27: Error: .*
+.*:28: Error: .*
+.*:29: Error: .*
+.*:30: Error: .*
+.*:31: Error: .*
+.*:32: Error: .*
+.*:33: Error: .*
+.*:34: Error: .*
+.*:35: Error: .*
+.*:36: Error: .*
+.*:37: Error: .*
+.*:38: Error: .*
+.*:39: Error: .*
+.*:40: Error: .*
+.*:41: Error: .*
+.*:42: Error: .*
+.*:43: Error: .*
+.*:44: Error: .*
+.*:45: Error: .*
+.*:46: Error: .*
+.*:47: Error: .*
+.*:48: Error: .*
+.*:49: Error: .*
+.*:50: Error: .*
+.*:51: Error: .*
+.*:52: Error: .*
+.*:53: Error: .*
@


1.1
log
@Add x86-64-opcode (checks valid opcodes) and x86-64-inval (checks invalid opcodes) checks
@
text
@d14 39
d56 1
a56 1
   1 [ 	]*	.text
d58 51
a108 12
   3 [ 	]*calll \*%eax	# 32-bit data size not allowed
   4 [ 	]*calll \*\(%ax\)	# 32-bit data size not allowed
   5 [ 	]*calll \*\(%eax\)	# 32-bit data size not allowed
   6 [ 	]*calll \*\(%r8\)	# 32-bit data size not allowed
   7 [ 	]*calll \*\(%rax\)	# 32-bit data size not allowed
   8 [ 	]*callq \*\(%ax\)	# 32-bit data size not allowed
   9 [ 	]*callw \*\(%ax\)	# no 16-bit addressing
  10 [ 	]*foo:[ 	]*jcxz foo	# No prefix exists to select CX as a counter
  11 [ 	]*popl %eax	# can\'t have 32-bit stack operands
  12 [ 	]*pushl %eax	# can\'t have 32-bit stack operands
  13 [ 	]*pushfl		# can\'t have 32-bit stack operands
  14 [ 	]*popfl		# can\'t have 32-bit stack operands
@


1.1.2.1
log
@	Merge from mainline.
	2002-04-23  H.J. Lu <hjl@@gnu.org>
	* gas/hppa/parse/parse.exp: Don't expect failure on line separator
	test on hppa*-*-linux* nor hppa*-*-netbsd*.

	2002-03-19  Bo Thorsen  <bo@@suse.de>
	* gas/i386/x86-64-opcode.d: More test cases for x86-64 opcodes.
	* gas/i386/x86-64-opcode.s: Likewise

	2002-02-24  Hans-Peter Nilsson  <hp@@bitrange.com>
	* gas/mmix/bspec-1.d, gas/mmix/bspec-2.d, gas/mmix/comment-1.d:
	Adjust to changes in readelf output.

	2002-02-22  Bo Thorsen  <bo@@suse.de>
	* i386.exp: Add x86-64-opcode (checks valid opcodes) and x86-64-inval
	(checks invalid opcodes) checks
	* x86-64-inval.l: New file.
	* x86-64-inval.s: New file.
	* x86-64-opcode.d: New file.
	* x86-64-opcode.s: New file.
@
text
@@

