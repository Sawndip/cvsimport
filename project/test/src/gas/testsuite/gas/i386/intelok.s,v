head	1.13;
access;
symbols
	binutils-2_24-branch:1.13.0.10
	binutils-2_24-branchpoint:1.13
	binutils-2_21_1:1.13
	binutils-2_23_2:1.13
	binutils-2_23_1:1.13
	binutils-2_23:1.13
	binutils-2_23-branch:1.13.0.8
	binutils-2_23-branchpoint:1.13
	binutils-2_22_branch:1.13.0.6
	binutils-2_22:1.13
	binutils-2_22-branch:1.13.0.4
	binutils-2_22-branchpoint:1.13
	binutils-2_21:1.13
	binutils-2_21-branch:1.13.0.2
	binutils-2_21-branchpoint:1.13
	binutils-2_20_1:1.10
	binutils-2_20:1.10
	binutils-arc-20081103-branch:1.9.0.6
	binutils-arc-20081103-branchpoint:1.9
	binutils-2_20-branch:1.10.0.4
	binutils-2_20-branchpoint:1.10
	dje-cgen-play1-branch:1.10.0.2
	dje-cgen-play1-branchpoint:1.10
	arc-20081103-branch:1.9.0.4
	arc-20081103-branchpoint:1.9
	binutils-2_19_1:1.9
	binutils-2_19:1.9
	binutils-2_19-branch:1.9.0.2
	binutils-2_19-branchpoint:1.9
	binutils-2_18:1.6
	binutils-2_18-branch:1.6.0.6
	binutils-2_18-branchpoint:1.6
	binutils-csl-coldfire-4_1-32:1.6
	binutils-csl-sourcerygxx-4_1-32:1.6
	binutils-csl-innovasic-fido-3_4_4-33:1.6
	binutils-csl-sourcerygxx-3_4_4-32:1.4
	binutils-csl-coldfire-4_1-30:1.6
	binutils-csl-sourcerygxx-4_1-30:1.6
	binutils-csl-coldfire-4_1-28:1.6
	binutils-csl-sourcerygxx-4_1-29:1.6
	binutils-csl-sourcerygxx-4_1-28:1.6
	binutils-csl-arm-2006q3-27:1.6
	binutils-csl-sourcerygxx-4_1-27:1.6
	binutils-csl-arm-2006q3-26:1.6
	binutils-csl-sourcerygxx-4_1-26:1.6
	binutils-csl-sourcerygxx-4_1-25:1.6
	binutils-csl-sourcerygxx-4_1-24:1.6
	binutils-csl-sourcerygxx-4_1-23:1.6
	binutils-csl-sourcerygxx-4_1-21:1.6
	binutils-csl-arm-2006q3-21:1.6
	binutils-csl-sourcerygxx-4_1-22:1.6
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.6
	binutils-csl-sourcerygxx-4_1-20:1.6
	binutils-csl-arm-2006q3-19:1.6
	binutils-csl-sourcerygxx-4_1-19:1.6
	binutils-csl-sourcerygxx-4_1-18:1.6
	binutils-csl-renesas-4_1-9:1.6
	binutils-csl-sourcerygxx-3_4_4-25:1.4
	binutils-csl-renesas-4_1-8:1.6
	binutils-csl-renesas-4_1-7:1.6
	binutils-csl-renesas-4_1-6:1.6
	binutils-csl-sourcerygxx-4_1-17:1.6
	binutils-csl-sourcerygxx-4_1-14:1.6
	binutils-csl-sourcerygxx-4_1-15:1.6
	binutils-csl-sourcerygxx-4_1-13:1.6
	binutils-2_17:1.6
	binutils-csl-sourcerygxx-4_1-12:1.6
	binutils-csl-sourcerygxx-3_4_4-21:1.6
	binutils-csl-wrs-linux-3_4_4-24:1.4
	binutils-csl-wrs-linux-3_4_4-23:1.4
	binutils-csl-sourcerygxx-4_1-9:1.6
	binutils-csl-sourcerygxx-4_1-8:1.6
	binutils-csl-sourcerygxx-4_1-7:1.6
	binutils-csl-arm-2006q1-6:1.6
	binutils-csl-sourcerygxx-4_1-6:1.6
	binutils-csl-wrs-linux-3_4_4-22:1.4
	binutils-csl-coldfire-4_1-11:1.6
	binutils-csl-sourcerygxx-3_4_4-19:1.6
	binutils-csl-coldfire-4_1-10:1.6
	binutils-csl-sourcerygxx-4_1-5:1.6
	binutils-csl-sourcerygxx-4_1-4:1.6
	binutils-csl-wrs-linux-3_4_4-21:1.4
	binutils-csl-morpho-4_1-4:1.6
	binutils-csl-sourcerygxx-3_4_4-17:1.6
	binutils-csl-wrs-linux-3_4_4-20:1.4
	binutils-2_17-branch:1.6.0.4
	binutils-2_17-branchpoint:1.6
	binutils-csl-2_17-branch:1.6.0.2
	binutils-csl-2_17-branchpoint:1.6
	binutils-csl-gxxpro-3_4-branch:1.4.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.4
	binutils-2_16_1:1.4
	binutils-csl-arm-2005q1b:1.4
	binutils-2_16:1.4
	binutils-csl-arm-2005q1a:1.4
	binutils-csl-arm-2005q1-branch:1.4.0.4
	binutils-csl-arm-2005q1-branchpoint:1.4
	binutils-2_16-branch:1.4.0.2
	binutils-2_16-branchpoint:1.4
	csl-arm-2004-q3d:1.1
	binutils_latest_snapshot:1.13;
locks; strict;
comment	@# @;


1.13
date	2010.04.24.17.41.04;	author hjl;	state Exp;
branches;
next	1.12;

1.12
date	2009.10.08.12.44.57;	author hjl;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.07.20.02.05;	author hjl;	state Exp;
branches;
next	1.10;

1.10
date	2009.04.20.06.31.50;	author jbeulich;	state Exp;
branches;
next	1.9;

1.9
date	2008.02.13.13.41.25;	author jbeulich;	state Exp;
branches;
next	1.8;

1.8
date	2008.02.13.13.29.31;	author jbeulich;	state Exp;
branches;
next	1.7;

1.7
date	2007.09.19.17.52.21;	author hjl;	state Exp;
branches;
next	1.6;

1.6
date	2005.08.26.15.51.15;	author jbeulich;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.17.12.05.24;	author jbeulich;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.02.07.55.01;	author jbeulich;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.09.08.05.42;	author jbeulich;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.10.04.29.55;	author amodra;	state Exp;
branches;
next	1.1;

1.1
date	2004.11.04.09.16.05;	author jbeulich;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Restore "call|jmp [xtrn]" in x86 assembler.

gas/

2010-04-24  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/11535
	* config/tc-i386-intel.c (intel_state): Add is_indirect.
	(i386_intel_operand): Initialize intel_state.is_indirect.  Check
	intel_state.is_indirect for "call|jmp [symbol]".

gas/testsuite/

2010-04-24  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/11535
	* gas/i386/intelok.s: Add tests for "call|jmp [xtrn]".
	* gas/i386/intelok.d: Updated.
@
text
@	.intel_syntax noprefix
	.text
start:

	# operand sizes

	add	al, [eax]
	add	al, byte ptr [eax]
	add	ax, [eax]
	add	ax, word ptr [eax]
	add	eax, [eax]
	add	eax, dword ptr [eax]
	add	byte ptr [eax], 1
	add	dword ptr [eax], 1
	add	word ptr [eax], 1
	addpd	xmm0, [eax]
	addpd	xmm0, xmmword ptr [eax]
	addps	xmm0, [eax]
	addps	xmm0, xmmword ptr [eax]
	addsd	xmm0, [eax]
	addsd	xmm0, qword ptr [eax]
	addss	xmm0, [eax]
	addss	xmm0, dword ptr [eax]
	bound	ax, dword ptr [ecx]
	bound	eax, qword ptr [ecx]
	call	word ptr [eax]
	call	dword ptr [eax]
	call	fword ptr [eax]
	cmps	[esi], byte ptr es:[edi]
	cmps	dword ptr [esi], es:[edi]
	cmps	word ptr [esi], word ptr es:[edi]
	cmpxchg8b qword ptr [eax]
	fadd	dword ptr [eax]
	fadd	qword ptr [eax]
	fbld	[eax]
	fbld	tbyte ptr [eax]
	fbstp	[eax]
	fbstp	tbyte ptr [eax]
	fiadd	dword ptr [eax]
	fiadd	word ptr [eax]
	fild	dword ptr [eax]
	fild	qword ptr [eax]
	fild	word ptr [eax]
	fist	dword ptr [eax]
	fist	word ptr [eax]
	fistp	dword ptr [eax]
	fistp	qword ptr [eax]
	fistp	word ptr [eax]
	fisttp	dword ptr [eax]
	fisttp	qword ptr [eax]
	fisttp	word ptr [eax]
	fld	dword ptr [eax]
	fld	qword ptr [eax]
	fld	tbyte ptr [eax]
	fldcw	[eax]
	fldcw	word ptr [eax]
	fldenv	[eax]
	fldenvd	[eax]
	fldenvw	[eax]
	fst	dword ptr [eax]
	fst	qword ptr [eax]
	fstp	dword ptr [eax]
	fstp	qword ptr [eax]
	fstp	tbyte ptr [eax]
	lds	ax, [eax]
	lds	eax, [eax]
	lds	ax, dword ptr [eax]
	lds	eax, fword ptr [eax]
	lea	eax, [eax]
	lea	eax, byte ptr [eax]
	lea	eax, dword ptr [eax]
	lea	eax, fword ptr [eax]
	lea	eax, qword ptr [eax]
	lea	eax, tbyte ptr [eax]
	lea	eax, word ptr [eax]
	lea	eax, xmmword ptr [eax]
	lgdt	[eax]
	lgdtd	[eax]
	lgdtw	[eax]
	movs	es:[edi], byte ptr [esi]
	movs	dword ptr es:[edi], [esi]
	movs	word ptr es:[edi], word ptr [esi]
	movsx	eax, byte ptr [eax]
	movsx	eax, word ptr [eax]
	paddb	mm0, [eax]
	paddb	mm0, qword ptr [eax]
	paddb	xmm0, [eax]
	paddb	xmm0, xmmword ptr [eax]
	pinsrw	mm0, word ptr [eax], 3
	pinsrw	xmm0, word ptr [eax], 7
	push	dword ptr [eax]
	xlat	[ebx]
	xlat	byte ptr [ebx]
	xlatb

	# memory operands

	mov	eax, dword ptr [byte+eax]
	mov	eax, dword ptr byte[eax]
	mov	eax, [dword+eax]
	mov	eax, dword[eax]
	mov	eax, [fword+eax]
	mov	eax, fword[eax]
	mov	eax, [qword+eax+dword]
	mov	eax, qword[eax+dword]
	mov	eax, [tbyte+eax+dword*2]
	mov	eax, tbyte[eax+dword*2]
	mov	eax, [word+eax*dword]
	mov	eax, word[eax*dword]
	movzx	eax, word ptr byte ptr [eax]
	movzx	eax, byte ptr [word ptr [eax]]
	movzx	eax, word ptr es:[eax]
	movzx	eax, byte ptr [fs:[eax]]
	movzx	eax, gs:word ptr [eax]

	mov	eax, FLAT:1
	mov	eax, FLAT:[1]
	mov	eax, gs:1
	mov	eax, gs:[1]
	mov	eax, x
	mov	eax, FLAT:x
	mov	eax, gs:x
	mov	eax, [x]

	mov	eax, [eax*1]
	mov	eax, [eax*+1]
	mov	eax, [+1*eax]
	mov	eax, [eax*+2]
	mov	eax, [+2*eax]
	mov	eax, [ecx*dword]
	mov	eax, [dword*ecx]
	mov	eax, 1[eax]
	mov	eax, [eax]+1
	mov	eax, [eax - 5 + ecx]
	mov	eax, [eax + 5 and 3 + ecx]
	mov	eax, [eax + 5 * 3 + ecx]
	mov	eax, [oword][eax]
	mov	eax, [eax][oword]
	mov	eax, xmmword[eax][ecx]
	mov	eax, [eax]+[ecx]
	mov	eax, [eax]+1[ecx]
	mov	eax, [eax+2[ecx]]
	mov	eax, [eax][ecx]+3
	mov	eax, [4][eax][ecx]
	mov	eax, [eax][5][ecx]
	mov	eax, [eax][ecx][6]
	mov	eax, [eax+ecx*(2+2)+7]
	mov	eax, [eax+(ecx+2)*4]
	mov	eax, [[eax]]
	mov	eax, [eax[ecx]]
	mov	eax, [[eax][ecx]]
	mov	eax, es:[eax]
	mov	eax, fs:gs:[eax]

	# expressions

	push	+ 1
	push	- 1
	push	not 1
	push	1 + 1
	push	2 - 1
	push	2 * 2
	push	3 / 2
	push	3 mod 2
	push	4 shl 1
	push	5 shr 2
	push	6 and 3
	push	7 xor 4
	push	8 or 5

	push	+dword
	push	-dword
	push	not dword
	push	not +dword
	push	not -dword
	push	not not dword

	# offset expressions

	mov	eax, 1
	mov	eax, [1]
	mov	eax, dword ptr 1
	mov	eax, dword ptr [1]
	mov	eax, offset x
	mov	eax, offset flat:x
	mov	eax, offset gs:x
	mov	eax, offset [x]
	mov	eax, offset flat:[x]
	mov	eax, offset gs:[x]
	mov	eax, [offset x]
	mov	eax, [offset [x]]
	mov	eax, dword ptr [offset [x]]
	mov	eax, FLAT:[offset [x]]
	mov	eax, gs:[offset [x]]
	mov	eax, offset [dword ptr [x]]
	mov	eax, offset [gs:[x]]
	mov	eax, [eax + offset x]
	mov	eax, [eax + offset 1]
	mov	eax, [offset x + eax]
	mov	eax, [offset 1 + eax]
	mov	eax, offset x + 1[eax]
	mov	eax, [eax] + offset x
	mov	eax, [eax] + offset 1
	mov	eax, offset x + [1]
	mov	eax, [offset x] - [1]
	mov	eax, offset x + es:[2]
	mov	eax, offset x + offset es:[3]
	mov	eax, [4] + offset x
	mov	eax, [5] + [offset x]
	mov	eax, ss:[6] + offset x
	mov	eax, ss:[7] + [offset x]

	# other operands
	call	3:5
	jmp	5:[3]
	call	dword ptr xtrn
	jmp	word ptr xtrn
	call	[xtrn]
	jmp	[xtrn]
@


1.12
log
@2009-10-08  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/10704
	* gas/i386/intelok.s: Move 2 PIC tests to ...
	* gas/i386/intelpic.s: Here.

	* gas/i386/intelok.d: Updated.
	* gas/i386/intelpic.d: Likewise.
@
text
@d218 2
@


1.11
log
@2009-10-07  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/10704
	* gas/i386/intelok.s: Add 2 new tests.
	* gas/i386/intelok.d: Updated.
@
text
@a217 5

.L11:
        jmp     DWORD PTR[ .L11  + eax * 4 ]
.LC0:
        lea     eax, DWORD PTR[ .LC0@@GOTOFF + ebx ]
@


1.10
log
@gas/
2009-04-20  Jan Beulich  <jbeulich@@novell.com>

	* Makefile.am: Add explicit dependency of tc-i386.o on
	tc-i386-intel.c.
	* Makefile.in: Likewise.
	* config/tc-i386.c (i386_finalize_immediate): Declare, broken
	out from i386_immediate.
	(i386_immediate): Slightly re-arrange, call
	i386_finalize_immediate.
	(i386_finalize_displacement): Declare, broken out from
	i386_displacement.
	(i386_displacement): Slightly re-arrange, call
	i386_finalize_displacement.
	(i386_intel_simplify, i386_intel_parse_name): Declare.
	(this_operand): Initialize to -1.
	(set_intel_syntax): Set expression rank for O_full_ptr.
	(md_assemble): Set this_operand back to -1 after parsing
	operands.
	(x86_cons): Negate intel_syntax to indicate state. Call
	i386_intel_simplify.
	(md_operand): Convert if to switch. Handle '[' for Intel
	syntax.
	(i386_intel_operand): Delete, including all helper functions
	and data.
	* config/tc-i386-intel.c: New file, all new code.
	* config/tc-i386.h (i386_operator): Declare.
	(md_operator): Define to i386_operator.
	(i386_need_index_operator): Declare.
	(md_need_index_operator): Define to i386_need_index_operator.
	(O_full_ptr): Define.

gas/testsuite/
2009-04-20  Jan Beulich  <jbeulich@@novell.com>

	* gas/i386/equ.s: Adjust.
	* gas/i386/equ.d: Remove reference to equ.e.
	* gas/i386/equ.e: Delete.
	* gas/i386/intel-expr.s: New.
	* gas/i386/intel-expr.d: New.
	* gas/i386/i386.exp: Run new test.
	* gas/i386/intel.s: Adjust.
	* gas/i386/intel.e: Remove no longer valid warning messages.
	* gas/i386/intel16.s: Adjust.
	* gas/i386/intel16.d: Remove reference to intel16.e.
	* gas/i386/intel16.e: Delete.
	* gas/i386/intelbad.s: Add more tests.
	* gas/i386/intelbad.l: Adjust.
	* gas/i386/intelok.s: Remove now unneeded equates. Add more
	tests.
	* gas/i386/intelok.d: Remove reference to intelok.e. Adjust.
	* gas/i386/intelok.e: Delete.
	* gas/i386/x86_64.s: Adjust.
	* gas/i386/x86_64.d: Remove reference to x86_64.e.
	* gas/i386/x86_64.e: Delete.
@
text
@d219 4
a222 2
	# Force a good alignment.
	.p2align	4,0
@


1.9
log
@gas/
2008-02-13  Jan Beulich  <jbeulich@@novell.com>

	* config/tc-i386.c (parse_real_register): Don't return 'FLAT'
	if not in Intel mode.
	(i386_intel_operand): Ignore segment overrides in immediate and
	offset operands.
	(intel_e11): Range-check i.mem_operands before use as array
	index. Filter out FLAT for uses other than as segment override.
	(intel_get_token): Remove broken promotion of "FLAT:" to mean
	"offset FLAT:".

gas/testsuite/
2008-02-13  Jan Beulich  <jbeulich@@novell.com>

	* gas/i386/intelok.s: Replace invalid offset expression with
	valid ones.
	* gas/i386/x86_64.s: Likewise.

opcodes/
2008-02-13  Jan Beulich  <jbeulich@@novell.com>

	* i386-opc.h (RegFlat): New.
	* i386-reg.tbl (flat): Add.
	* i386-tbl.h: Re-generate.
@
text
@a1 8
	.equiv byte, 1
	.equiv word, 2
	.equiv dword, 4
	.equiv fword, 6
	.equiv qword, 8
	.equiv tbyte, 10
	.equiv oword, 16
	.equiv xmmword, 16
d110 14
d136 1
a136 1
	mov	eax, [eax + 5*3 + ecx]
d140 1
d142 7
a148 4
	mov	eax, [eax][ecx]+1
	mov	eax, [1][eax][ecx]
	mov	eax, [eax][1][ecx]
	mov	eax, [eax][ecx][1]
d153 1
d180 4
d191 6
d200 2
a201 1
	mov	eax, offset x+1[eax]
a211 1
	mov	eax, dword ptr [8]
d215 1
a215 1
	jmp	5:3
@


1.8
log
@gas/
2008-02-13  Jan Beulich  <jbeulich@@novell.com>

	* config/tc-i386.c (intel_e09): Also special-case 'bound'.

gas/testsuite/
2008-02-13  Jan Beulich  <jbeulich@@novell.com>

	* gas/i386/intelbad.s, gas/i386/intelok.s: Add 'bound' tests.
	* gas/i386/intelbad.l, gas/i386/intelok.l, gas/i386/intelok.e,
	gas/i386/opcode-intel.d: Adjust.

opcodes/
2008-02-13  Jan Beulich  <jbeulich@@novell.com>

	* i386-dis.c (a_mode): New.
	(cond_jump_mode): Adjust.
	(Ma): Change to a_mode.
	(intel_operand_size): Handle a_mode.
	* i386-opc.tbl: Allow Dword and Qword for bound.
	* i386-tbl.h: Re-generate.
@
text
@d171 1
a171 1
	mov	eax, flat:x
d174 1
a174 1
	mov	eax, flat:[x]
@


1.7
log
@gas/testsuite/gas/

2007-09-19  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/intelok.s: Add tests for memory without base.
	* gas/i386/intelok.d: Updated.
	* gas/i386/intelok.e: Likewise.

opcodes/

2007-09-19  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-dis.c (OP_E_extended): Always display scale for memory.
@
text
@d32 2
@


1.6
log
@gas/
2005-08-26  Jan Beulich  <jbeulich@@novell.com>

	* config/tc-i386.c (intel_e09): Set JumpAbsolute when seeing a PTR-
	qualified operand of a branch.
	(intel_bracket_expr): Set JumpAbsolute here...
	(intel_e11): ... rather than here.

gas/testsuite/
2005-08-26  Jan Beulich  <jbeulich@@novell.com>

	* gas/i386/intel.s: Adjust.
	* gas/i386/intelok.s: Add two more insns.
	* gas/i386/intelok.d: Adjust.
@
text
@d117 3
@


1.5
log
@gas/
2005-03-17  Jan Beulich  <jbeulich@@novell.com>

	* config/tc-i386.c (i386_scale): Beautify error message.
	(Intel syntax comments): Update.
	(struct intel_parser_s): Add fields in_offset, in_bracket, and
	next_operand.
	(intel_e04_1, intel_e05_1, intel_e05_1, intel_e09_1, intel_e10_1):
	Remove declarations.
	(intel_bracket_expr): Declare.
	(i386_intel_operand): Initialize new intel_parser fields. Wrap most
	of the function body in a loop allowing to split an operand into two.
	Replace calls to malloc and checks of it returning non-NULL with
	calls to xmalloc/xstrdup.
	(intel_expr): SHORT no longer handled here. Add comment indicating
	comparison ops need implementation.
	(intel_e04, intel_e04_1): Combine, replace recursion with loop.
	Check right operand of - does not specify a register when parsing
	the address of a memory reference.
	(intel_e05, intel_e05_1): Combine, replace recursion with loop.
	Check operands do not specify a register when parsing the address of
	a memory reference.
	(intel_e06, intel_e06_1): Likewise.
	(intel_e09, intel_e09_1): Combine, replace recursion with loop. Also
	handle SHORT as well as unary + and -. Don't accept : except for
	segment overrides or in direct far jump/call insns.
	(intel_brack_expr): New.
	(intel_e10, intel_e10_1): Combine, replace recursion with loop. Use
	intel_brack_expr.
	(intel_e11): Replace chain of if/else-if by switch, alloing fall-
	through in certain cases. Use intel_brack_expr. Add new diagnostics.
	Allow symbolic constants as register scale value.
	(intel_get_token): Replace call to malloc and check of return value
	with call to xmalloc. Change handling for FLAT to match MASM's.
	(intel_putback_token): Don't try to back up/free current token if
	that is T_NIL.

gas/testsuite/
2005-03-17  Jan Beulich  <jbeulich@@novell.com>

	* gas/i386/intel.d: Add stderr directive.
	* gas/i386/intel.e: New.
	* gas/i386/intel16.d: Add stderr directive. Adjust for changed
	source.
	* gas/i386/intel16.e: New.
	* gas/i386/intel16.s: Add instances of addressing forms with base
	and index specified in reverse order.
	* gas/i386/intelbad.l: Adjust for changed source.
	* gas/i386/intelbad.s: Add more operand forms to check.
	* gas/i386/intelok.d: Remove -r from objdump options. Add stderr
	directive. Adjust for changed source.
	* gas/i386/intelok.e: New.
	* gas/i386/intelok.s: Define MASM constants byte, word, etc. Add
	more operand forms to check.
	* gas/i386/x86_64.d: Add stderr directive.
	* gas/i386/x86_64.e: New.
	* gas/i386/x86_64.s: Adjust for parser changes.
@
text
@d190 2
@


1.4
log
@gas/
2005-03-02  Jan Beulich  <jbeulich@@novell.com>

	* config/tc-i386.c (intel_e11): If not followed by T_PTR, treat T_BYTE
	etc. like normal symbol references (T_ID).

gas/testsuite/
2005-03-02  Jan Beulich  <jbeulich@@novell.com>

	* gas/i386/intelok.d: Add -r to objdump options. Adjust expectations.
	* gas/i386/intelok.s: Add checks for various special memory operands.
@
text
@d2 2
d5 5
d114 24
a137 4
#	mov	eax, [word+eax*dword]
#	mov	eax, word[eax*dword]
#	mov	eax, [xmmword+(eax+1)*dword]
#	mov	eax, xmmword[(eax+1)*dword]
d155 36
@


1.3
log
@gas/testsuite/
2005-02-09  Jan Beulich  <jbeulich@@novell.com>

	* gas/i386/intelok.s: Remove comments disabling alternative forms of
	fbld, fbstp, and fldcw.
	* gas/i386/intelok.d: Expect two instances of fbld, fbstp, and fldcw.

include/opcode/
2005-02-09  Jan Beulich  <jbeulich@@novell.com>

	PR gas/707
	* i386.h (i386_optab): Add x_Suf to fbld and fbstp. Add w_Suf and
	FloatMF to fldcw, fstcw, fnstcw, and the memory formas of fstsw and
	fnstsw.
@
text
@d2 1
d5 3
d95 17
@


1.2
log
@	* gas/i386/opcode.s: Pad section.
	* gas/i386/intelok.s: Likewise.
	* gas/i386/opcode.d: Update.
	* gas/i386/intelok.d: Update.
@
text
@d31 1
a31 1
#XXX	fbld	tbyte ptr [eax]
d33 1
a33 1
#XXX	fbstp	tbyte ptr [eax]
d51 1
a51 1
#XXX	fldcw	word ptr [eax]
@


1.1
log
@gas/
2004-11-04 Jan Beulich <jbeulich@@novell.com>

	* config/tc-i386.c (set_intel_syntax): Allow % in symbol names when
	intel syntax and no register prefix, allow $ in symbol names when
	intel syntax.
	(set_16bit_gcc_code_flag): Replace literal 'l' by LONG_MNEM_SUFFIX.
	(intel_float_operand): Add fourth return value indicating math control
	operations. Make classification more precise.
	(md_assemble): Complain if memory operand of mov[sz]x has no size
	specified.
	(parse_insn): Translate word operands to floating point instructions
	operating on integers as well as control instructions to short ones
	as expected by AT&T syntax. Translate 'd' suffix to short one only for
	floating point instructions operating on non-integer operands.
	(match_template): Remove fldcw special case. Adjust q-suffix handling
	to permit it on fild/fistp/fisttp in AT&T mode.
	(process_suffix): Don't guess DefaultSize insns' suffix from
	stackop_size for certain floating point control instructions. Guess
	suffix for branch and [ls][gi]dt based on flag_code. Split error
	messages for Intel and AT&T syntax, and make the condition more strict
	for the former. Adjust suppressing of generation of operand size
	overrides.
	(intel parser): Allow the full set of MASM operators. Add FWORD, TBYTE,
	OWORD, and XMMWORD operand size specifiers (TBYTE replaces XWORD). Add
	more error checking.
	* config/tc-i386.h (BYTE_PTR WORD_PTR DWORD_PTR QWORD_PTR XWORD_PTR
	SHORT OFFSET_FLAT FLAT NONE_FOUND): Remove unused defines.

gas/testsuite/
2004-11-04 Jan Beulich <jbeulich@@novell.com>
	* gas/i386/i386.exp: Execute new tests intelbad and intelok.
	* gas/i386/intelbad.[sl]: New test to check for various things not
	permitted in Intel mode.
	* gas/i386/intel.d, gas/i386/opcode.d, gas/i386/x86-64-opcode.d:
	Adjust for change to segment register store.
	* gas/i386/intelok.[sd]: New test to check various Intel mode specific
	things get handled correctly.
	* gas/i386/x86_64.[sd]: Remove unsupported constructs referring to
	'high' and 'low' parts of an operand, which the parser previously
	accepted while neither telling that it's not supported nor that it
	ignored the remainder of the line following these supposed keywords.

include/opcode/
2004-11-04 Jan Beulich <jbeulich@@novell.com>

	* i386.h (sldx_Suf): Remove.
	(FP, l_FP, sl_FP, x_FP): Don't imply IgnoreSize.
	(q_FP): Define, implying no REX64.
	(x_FP, sl_FP): Imply FloatMF.
	(i386_optab): Split reg and mem forms of moving from segment registers
	so that the memory forms can ignore the 16-/32-bit operand size
	distinction. Adjust a few others for Intel mode. Remove *FP uses from
	all non-floating-point instructions. Unite 32- and 64-bit forms of
	movsx, movzx, and movd. Adjust floating point operations for the above
	changes to the *FP macros. Add DefaultSize to floating point control
	insns operating on larger memory ranges. Remove left over comments
	hinting at certain insns being Intel-syntax ones where the ones
	actually meant are already gone.

opcodes/
2004-11-04 Jan Beulich <jbeulich@@novell.com>

	* i386-dis.c (Eq, Edqw, indirEp, Gdq, I1): Define.
	(indirEb): Remove.
	(Mp): Use f_mode rather than none at all.
	(t_mode, dq_mode, dqw_mode, f_mode, const_1_mode): Define. t_mode
	replaces what previously was x_mode; x_mode now means 128-bit SSE
	operands.
	(dis386): Make far jumps and calls have an 'l' prefix only in AT&T
	mode. movmskpX's, pextrw's, and pmovmskb's first operands are Gdq.
	pinsrw's second operand is Edqw.
	(grps): 1-bit shifts' and rotates' second operands are I1. cmpxchg8b's
	operand is Eq. movntq's and movntdq's first operands are EM. s[gi]dt,
	fldenv, frstor, fsave, fstenv all should also have suffixes in Intel
	mode when an operand size override is present or always suffixing.
	More instructions will need to be added to this group.
	(putop): Handle new macro chars 'C' (short/long suffix selector),
	'I' (Intel mode override for following macro char), and 'J' (for
	adding the 'l' prefix to far branches in AT&T mode). When an
	alternative was specified in the template, honor macro character when
	specified for Intel mode.
	(OP_E): Handle new *_mode values. Correct pointer specifications for
	memory operands. Consolidate output of index register.
	(OP_G): Handle new *_mode values.
	(OP_I): Handle const_1_mode.
	(OP_ESreg, OP_DSreg): Generate pointer specifications. Indicate
	respective opcode prefix bits have been consumed.
	(OP_EM, OP_EX): Provide some default handling for generating pointer
	specifications.
@
text
@d106 3
@

