head	1.5;
access;
symbols
	binutils-2_24-branch:1.5.0.2
	binutils-2_24-branchpoint:1.5
	binutils-2_23_2:1.4
	binutils-2_23_1:1.4
	binutils-2_23:1.4
	binutils-2_23-branch:1.4.0.2
	binutils-2_23-branchpoint:1.4
	binutils-2_22_branch:1.2.0.4
	binutils-2_22:1.2
	binutils-2_22-branch:1.2.0.2
	binutils-2_22-branchpoint:1.2
	binutils_latest_snapshot:1.5;
locks; strict;
comment	@# @;


1.5
date	2013.01.15.20.34.11;	author hjl;	state Exp;
branches;
next	1.4;

1.4
date	2012.05.12.12.34.37;	author hjl;	state Exp;
branches;
next	1.3;

1.3
date	2012.05.10.03.25.15;	author hjl;	state Exp;
branches;
next	1.2;

1.2
date	2011.02.25.19.19.45;	author hjl;	state Exp;
branches;
next	1.1;

1.1
date	2011.01.16.17.06.12;	author hjl;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Increment length by 1 if the relocation token is removed

gas/

	PR gas/15019
	* config/tc-i386.c (lex_got): Increment length by 1 if the
	relocation token is removed.

gas/testsuite/

	PR gas/15019
	* gas/i386/reloc32.s: Add tests for "xtrn@@got -/+ 4".
	* gas/i386/reloc64.s: Likewise.
	* gas/i386/ilp32/reloc64.s: Likewise.

	* gas/i386/reloc32.d: Updated.
	* gas/i386/reloc64.d: Likewise.
	* gas/i386/ilp32/reloc64.d: Likewise.
@
text
@ .macro bad args:vararg
  .ifdef _bad_
	\args
  .endif
 .endm

 .macro ill args:vararg
  # This is used to mark entries that aren't handled consistently,
  # and thus shouldn't currently be checked for.
  #	\args
 .endm

 .text
_start:
	add	$xtrn, %rax
	mov	$xtrn, %eax
	mov	$xtrn, %ax
	mov	$xtrn, %al
	mov	xtrn(%rbx), %eax
	mov	xtrn(%ebx), %eax

	add	$(xtrn - .), %rax
ill	mov	$(xtrn - .), %eax
	mov	$(xtrn - .), %ax
	mov	$(xtrn - .), %al
	mov	xtrn(%rip), %eax
	mov	xtrn(%eip), %eax
	call	xtrn
	jrcxz	xtrn

	add	$xtrn@@got, %rax
	mov	$xtrn@@got, %eax
bad	mov	$xtrn@@got, %ax
bad	mov	$xtrn@@got, %al
	mov	xtrn@@got(%rbx), %eax
	mov	xtrn@@got(%ebx), %eax
bad	call	xtrn@@got

bad	add	$xtrn@@gotoff, %rax
bad	mov	$xtrn@@gotoff, %eax
bad	mov	$xtrn@@gotoff, %ax
bad	mov	$xtrn@@gotoff, %al
bad	mov	xtrn@@gotoff(%rbx), %eax
bad	mov	xtrn@@gotoff(%ebx), %eax
bad	call	xtrn@@gotoff

bad	movabs	$xtrn@@gotpcrel, %rax
	add	$xtrn@@gotpcrel, %rax
	mov	$xtrn@@gotpcrel, %eax
bad	mov	$xtrn@@gotpcrel, %ax
bad	mov	$xtrn@@gotpcrel, %al
	mov	xtrn@@gotpcrel(%rbx), %eax
	mov	xtrn@@gotpcrel(%ebx), %eax
	call	xtrn@@gotpcrel

ill	movabs	$_GLOBAL_OFFSET_TABLE_, %rax
	add	$_GLOBAL_OFFSET_TABLE_, %rax
ill	add	$_GLOBAL_OFFSET_TABLE_, %eax
ill	add	$_GLOBAL_OFFSET_TABLE_, %ax
ill	add	$_GLOBAL_OFFSET_TABLE_, %al
	lea	_GLOBAL_OFFSET_TABLE_(%rip), %rax
	lea	_GLOBAL_OFFSET_TABLE_(%eip), %rax
ill	movabs	$(_GLOBAL_OFFSET_TABLE_ - .), %rax
	add	$(_GLOBAL_OFFSET_TABLE_ - .), %rax
ill	add	$(_GLOBAL_OFFSET_TABLE_ - .), %eax
ill	add	$(_GLOBAL_OFFSET_TABLE_ - .), %ax
ill	add	$(_GLOBAL_OFFSET_TABLE_ - .), %al

bad	movabs	$xtrn@@plt, %rax
	add	$xtrn@@plt, %rax
	mov	$xtrn@@plt, %eax
bad	mov	$xtrn@@plt, %ax
bad	mov	$xtrn@@plt, %al
	mov	xtrn@@plt(%rbx), %eax
	mov	xtrn@@plt(%ebx), %eax
	call	xtrn@@plt
bad	jrcxz	xtrn@@plt

bad	movabs	$xtrn@@tlsgd, %rax
	add	$xtrn@@tlsgd, %rax
	mov	$xtrn@@tlsgd, %eax
bad	mov	$xtrn@@tlsgd, %ax
bad	mov	$xtrn@@tlsgd, %al
	mov	xtrn@@tlsgd(%rbx), %eax
	mov	xtrn@@tlsgd(%ebx), %eax
	call	xtrn@@tlsgd

bad	movabs	$xtrn@@gottpoff, %rax
	add	$xtrn@@gottpoff, %rax
	mov	$xtrn@@gottpoff, %eax
bad	mov	$xtrn@@gottpoff, %ax
bad	mov	$xtrn@@gottpoff, %al
	mov	xtrn@@gottpoff(%rbx), %eax
	mov	xtrn@@gottpoff(%ebx), %eax
	call	xtrn@@gottpoff

bad	movabs	$xtrn@@tlsld, %rax
	add	$xtrn@@tlsld, %rax
	mov	$xtrn@@tlsld, %eax
bad	mov	$xtrn@@tlsld, %ax
bad	mov	$xtrn@@tlsld, %al
	mov	xtrn@@tlsld(%rbx), %eax
	mov	xtrn@@tlsld(%ebx), %eax
	call	xtrn@@tlsld

	add	$xtrn@@dtpoff, %rax
	mov	$xtrn@@dtpoff, %eax
bad	mov	$xtrn@@dtpoff, %ax
bad	mov	$xtrn@@dtpoff, %al
	mov	xtrn@@dtpoff(%rbx), %eax
	mov	xtrn@@dtpoff(%ebx), %eax
bad	call	xtrn@@dtpoff

	add	$xtrn@@tpoff, %rax
	mov	$xtrn@@tpoff, %eax
bad	mov	$xtrn@@tpoff, %ax
bad	mov	$xtrn@@tpoff, %al
	mov	xtrn@@tpoff(%rbx), %eax
	mov	xtrn@@tpoff(%ebx), %eax
bad	call	xtrn@@tpoff

 .data
	.long	xtrn
	.long	xtrn - .
	.long	xtrn@@got
bad	.long	xtrn@@gotoff
	.long	xtrn@@gotpcrel
	.long	_GLOBAL_OFFSET_TABLE_
	.long	_GLOBAL_OFFSET_TABLE_ - .
	.long	xtrn@@plt
	.long	xtrn@@tlsgd
	.long	xtrn@@gottpoff
	.long	xtrn@@tlsld
	.long	xtrn@@dtpoff
	.long	xtrn@@tpoff
	
	.slong	xtrn
	.slong	xtrn - .
	.slong	xtrn@@got
bad	.slong	xtrn@@gotoff
	.slong	xtrn@@gotpcrel
	.slong	_GLOBAL_OFFSET_TABLE_
	.slong	_GLOBAL_OFFSET_TABLE_ - .
	.slong	xtrn@@plt
	.slong	xtrn@@tlsgd
	.slong	xtrn@@gottpoff
	.slong	xtrn@@tlsld
	.slong	xtrn@@dtpoff
	.slong	xtrn@@tpoff
	
	.word	xtrn
	.word	xtrn - .
bad	.word	xtrn@@got
bad	.word	xtrn@@gotoff
bad	.word	xtrn@@gotpcrel
ill	.word	_GLOBAL_OFFSET_TABLE_
ill	.word	_GLOBAL_OFFSET_TABLE_ - .
bad	.word	xtrn@@plt
bad	.word	xtrn@@tlsgd
bad	.word	xtrn@@gottpoff
bad	.word	xtrn@@tlsld
bad	.word	xtrn@@dtpoff
bad	.word	xtrn@@tpoff

	.byte	xtrn
	.byte	xtrn - .
bad	.byte	xtrn@@got
bad	.byte	xtrn@@gotoff
bad	.byte	xtrn@@gotpcrel
ill	.byte	_GLOBAL_OFFSET_TABLE_
ill	.byte	_GLOBAL_OFFSET_TABLE_ - .
bad	.byte	xtrn@@plt
bad	.byte	xtrn@@tlsgd
bad	.byte	xtrn@@gottpoff
bad	.byte	xtrn@@tlsld
bad	.byte	xtrn@@dtpoff
bad	.byte	xtrn@@tpoff

	.text
	mov	xtrn@@tpoff (%rbx), %eax
	movabsq	$xtrn - 4294967295, %rbp

	.data
	.quad	xtrn
	.quad	xtrn + 0x7fffffff
	.quad	xtrn - 0x80000000
	.long	xtrn@@got - 4
	.long	xtrn@@got + 4
@


1.4
log
@Remove x32 addend overflow for BFD_RELOC_64

gas/

	* config/tc-i386.c (tc_gen_reloc): Remove x32 addend overflow
	for BFD_RELOC_64.

gas/testsuite/

	* gas/i386/ilp32/ilp32.exp: Don't run reloc64-inval.

	* gas/i386/ilp32/reloc64.s: Add test for -4294967295 addend.
	* gas/i386/ilp32/reloc64.d: Updated.

	* gas/i386/ilp32/reloc64-inval.l: Removed.
	* gas/i386/ilp32/reloc64-inval.s: Likewise.
@
text
@d187 2
@


1.3
log
@Check 64-bit relocation addend overflow for x32

bfd/

	* elf64-x86-64.c (elf_x86_64_relocate_section): Check addend
	overflow for R_X86_64_RELATIVE64.

gas/

	* config/tc-i386.c (tc_gen_reloc): Check x32 addend overflow
	for BFD_RELOC_64.

gas/testsuite/

	* gas/i386/ilp32/ilp32.exp: Run reloc64-inval.

	* gas/i386/ilp32/reloc64.s: Add tests for ".quad".
	* gas/i386/ilp32/reloc64.d: Updated.

	* gas/i386/ilp32/reloc64-inval.l: New file.
	* gas/i386/ilp32/reloc64-inval.s: Likewise.

ld/testsuite/

	* ld-x86-64/ilp32-11.d: New file.
	* ld-x86-64/ilp32-11.s: Likewise.

	* ld-x86-64/x86-64.exp: Run ilp32-11.
@
text
@d181 1
@


1.2
log
@Don't sign-checking 4-byte relocations for x32.

gas/

2011-02-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (reloc): Don't sign-checking 4-byte
	relocations if 64bit relocations aren't allowed.

gas/testsuite/

2011-02-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/ilp32/ilp32.exp: Run reloc64.

	* gas/i386/ilp32/reloc64.s: Allow TLS relocations with 32bit
	register destinations.
	* gas/i386/ilp32/reloc64.d: Updated.

	* gas/i386/ilp32/reloc64.l: New.
@
text
@d181 5
@


1.1
log
@Disallow 64bit relocations in x32 mode.

gas/

2011-01-16  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (disallow_64bit_disp): Renamed to ...
	(disallow_64bit_reloc): This.
	(md_assemble): Don't check movabs for x32 mode here.
	(i386_target_format): Updated.
	(tc_gen_reloc): Check if 64bit relocations are allowed.

gas/testsuite/

2011-01-16  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/ilp32/immed64.s: New.
	* gas/i386/ilp32/reloc64.s: Likewise.
	* gas/i386/ilp32/x86-64-pcrel.s: Likewise.

	* gas/i386/ilp32/inval.s: Add more tests.

	* gas/i386/ilp32/immed64.d: Updated.
	* gas/i386/ilp32/inval.l: Likewise.
	* gas/i386/ilp32/reloc64.d: Likewise.
	* gas/i386/ilp32/x86-64-pcrel.d: Likewise.
@
text
@d32 1
a32 1
bad	mov	$xtrn@@got, %eax
d36 1
a36 1
bad	mov	xtrn@@got(%ebx), %eax
d49 1
a49 1
bad	mov	$xtrn@@gotpcrel, %eax
d53 1
a53 1
bad	mov	xtrn@@gotpcrel(%ebx), %eax
d71 1
a71 1
bad	mov	$xtrn@@plt, %eax
d75 1
a75 1
bad	mov	xtrn@@plt(%ebx), %eax
d81 1
a81 1
bad	mov	$xtrn@@tlsgd, %eax
d85 1
a85 1
bad	mov	xtrn@@tlsgd(%ebx), %eax
d90 1
a90 1
bad	mov	$xtrn@@gottpoff, %eax
d94 1
a94 1
bad	mov	xtrn@@gottpoff(%ebx), %eax
d99 1
a99 1
bad	mov	$xtrn@@tlsld, %eax
d103 1
a103 1
bad	mov	xtrn@@tlsld(%ebx), %eax
d107 1
a107 1
bad	mov	$xtrn@@dtpoff, %eax
d111 1
a111 1
bad	mov	xtrn@@dtpoff(%ebx), %eax
d115 1
a115 1
bad	mov	$xtrn@@tpoff, %eax
d119 1
a119 1
bad	mov	xtrn@@tpoff(%ebx), %eax
@

