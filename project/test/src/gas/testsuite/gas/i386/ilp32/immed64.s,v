head	1.1;
access;
symbols
	binutils-2_24-branch:1.1.0.8
	binutils-2_24-branchpoint:1.1
	binutils-2_23_2:1.1
	binutils-2_23_1:1.1
	binutils-2_23:1.1
	binutils-2_23-branch:1.1.0.6
	binutils-2_23-branchpoint:1.1
	binutils-2_22_branch:1.1.0.4
	binutils-2_22:1.1
	binutils-2_22-branch:1.1.0.2
	binutils-2_22-branchpoint:1.1
	binutils_latest_snapshot:1.1;
locks; strict;
comment	@# @;


1.1
date	2011.01.16.17.06.12;	author hjl;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Disallow 64bit relocations in x32 mode.

gas/

2011-01-16  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (disallow_64bit_disp): Renamed to ...
	(disallow_64bit_reloc): This.
	(md_assemble): Don't check movabs for x32 mode here.
	(i386_target_format): Updated.
	(tc_gen_reloc): Check if 64bit relocations are allowed.

gas/testsuite/

2011-01-16  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/ilp32/immed64.s: New.
	* gas/i386/ilp32/reloc64.s: Likewise.
	* gas/i386/ilp32/x86-64-pcrel.s: Likewise.

	* gas/i386/ilp32/inval.s: Add more tests.

	* gas/i386/ilp32/immed64.d: Updated.
	* gas/i386/ilp32/inval.l: Likewise.
	* gas/i386/ilp32/reloc64.d: Likewise.
	* gas/i386/ilp32/x86-64-pcrel.d: Likewise.
@
text
@	.equiv early, 4

_start:
	callq	*early(%rax)
	callq	*late(%rax)
	callq	*xtrn(%rax)
	callq	*early(%eax)
	callq	*late(%eax)
	callq	*xtrn(%eax)
	movb	$early, %al
	movb	$late, %al
	movb	$xtrn, %al
	movw	$early, %ax
	movw	$late, %ax
	movw	$xtrn, %ax
	movl	$early, %eax
	movl	$late, %eax
	movl	$xtrn, %eax
	movabsq	$early, %rax
	movabsq	$late, %rax
	addb	$early, %al
	addb	$late, %al
	addb	$xtrn, %al
	addw	$early, %ax
	addw	$late, %ax
	addw	$xtrn, %ax
	addl	$early, %eax
	addl	$late, %eax
	addl	$xtrn, %eax
	addq	$early, %rax
	addq	$late, %rax
	addq	$xtrn, %rax
	shlb	$early, %al
	shlb	$late, %al
	shlb	$xtrn, %al
	shlw	$early, %ax
	shlw	$late, %ax
	shlw	$xtrn, %ax
	shll	$early, %eax
	shll	$late, %eax
	shll	$xtrn, %eax
	shlq	$early, %rax
	shlq	$late, %rax
	shlq	$xtrn, %rax
	inb	$early, %al
	inb	$late, %al
	inb	$xtrn, %al
	inw	$early, %ax
	inw	$late, %ax
	inw	$xtrn, %ax
	inl	$early, %eax
	inl	$late, %eax
	inl	$xtrn, %eax

	.equiv late, 8

	movabs	$0x80000001, %rax
	movabsq	$0x80000001, %rax
@
