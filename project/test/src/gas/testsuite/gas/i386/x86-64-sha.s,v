head	1.1;
access;
symbols
	binutils-2_24-branch:1.1.0.2
	binutils-2_24-branchpoint:1.1
	binutils_latest_snapshot:1.1;
locks; strict;
comment	@# @;


1.1
date	2013.07.25.16.16.35;	author hjl;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Support Intel SHA

gas/

2013-07-25  Michael Zolotukhin  <michael.v.zolotukhin@@intel.com>

	* config/tc-i386.c (cpu_arch): Add .sha.
	* doc/c-i386.texi: Document sha/.sha.

gas/testsuite/

2013-07-25  Michael Zolotukhin  <michael.v.zolotukhin@@intel.com>

	* gas/i386/sha.d: New.
	* gas/i386/sha.s: New.
	* gas/i386/x86-64-sha.d: New.
	* gas/i386/x86-64-sha.s: New.
	* gas/i386/i386.exp: Run new SHA tests.

opcodes/

2013-07-25  Michael Zolotukhin  <michael.v.zolotukhin@@intel.com>

	* i386-dis.c (PREFIX enum): Add PREFIX_0F38C8, PREFIX_0F38C9,
	PREFIX_0F38CA, PREFIX_0F38CB, PREFIX_0F38CC, PREFIX_0F38CD,
	PREFIX_0F3ACC.
	(prefix_table): Updated.
	(three_byte_table): Likewise.
	* i386-gen.c (cpu_flag_init): Add CPU_SHA_FLAGS.
	(cpu_flags): Add CpuSHA.
	(i386_cpu_flags): Add cpusha.
	* i386-init.h: Regenerate.
	* i386-opc.h (CpuSHA): New.
	(CpuUnused): Restored.
	(i386_cpu_flags): Add cpusha.
	* i386-opc.tbl: Add SHA instructions.
	* i386-tbl.h: Regenerate.
@
text
@# Check SHA instructions

	.allow_index_reg
	.text
_start:
	sha1rnds4 $9, %xmm2, %xmm1
	sha1rnds4 $7, (%rax), %xmm2
	sha1rnds4 $5, 0x12(%rax), %xmm3
	sha1rnds4 $1, (%rax,%rbx,2), %xmm4
	sha1nexte %xmm2, %xmm7
	sha1nexte (%rax), %xmm8
	sha1nexte 0x12(%rax), %xmm9
	sha1nexte (%rax,%rbx,2), %xmm10
	sha1msg1 %xmm2, %xmm7
	sha1msg1 (%rax), %xmm8
	sha1msg1 0x12(%rax), %xmm9
	sha1msg1 (%rax,%rbx,2), %xmm10
	sha1msg2 %xmm2, %xmm7
	sha1msg2 (%rax), %xmm8
	sha1msg2 0x12(%rax), %xmm9
	sha1msg2 (%rax,%rbx,2), %xmm10
	sha256rnds2 %xmm2, %xmm1
	sha256rnds2 (%rax), %xmm1
	sha256rnds2 0x12(%rax), %xmm1
	sha256rnds2 (%rax,%rbx,2), %xmm1
	sha256rnds2 %xmm0, %xmm2, %xmm1
	sha256rnds2 %xmm0, (%rax), %xmm1
	sha256rnds2 %xmm0, 0x12(%rax), %xmm1
	sha256rnds2 %xmm0, (%rax,%rbx,2), %xmm1
	sha256msg1 %xmm2, %xmm1
	sha256msg1 (%rax), %xmm1
	sha256msg1 0x12(%rax), %xmm1
	sha256msg1 (%rax,%rbx,2), %xmm1
	sha256msg2 %xmm2, %xmm1
	sha256msg2 (%rax), %xmm1
	sha256msg2 0x12(%rax), %xmm1
	sha256msg2 (%rax,%rbx,2), %xmm1

	.intel_syntax noprefix

	sha1rnds4 xmm1, xmm2, 9
	sha1rnds4 xmm2, XMMWORD PTR [rax], 7
	sha1rnds4 xmm3, XMMWORD PTR [rax+0x12], 5
	sha1rnds4 xmm4, XMMWORD PTR [rax+rbx*2], 1
	sha1nexte xmm1, xmm2
	sha1nexte xmm2, XMMWORD PTR [rax]
	sha1nexte xmm3, XMMWORD PTR [rax+0x12]
	sha1nexte xmm4, XMMWORD PTR [rax+rbx*2]
	sha1msg1 xmm1, xmm2
	sha1msg1 xmm2, XMMWORD PTR [rax]
	sha1msg1 xmm3, XMMWORD PTR [rax+0x12]
	sha1msg1 xmm4, XMMWORD PTR [rax+rbx*2]
	sha1msg2 xmm1, xmm2
	sha1msg2 xmm2, XMMWORD PTR [rax]
	sha1msg2 xmm3, XMMWORD PTR [rax+0x12]
	sha1msg2 xmm4, XMMWORD PTR [rax+rbx*2]
	sha256rnds2 xmm1, xmm2
	sha256rnds2 xmm2, XMMWORD PTR [rax]
	sha256rnds2 xmm3, XMMWORD PTR [rax+0x12]
	sha256rnds2 xmm4, XMMWORD PTR [rax+rbx*2]
	sha256rnds2 xmm1, xmm2, xmm0
	sha256rnds2 xmm2, XMMWORD PTR [rax], xmm0
	sha256rnds2 xmm3, XMMWORD PTR [rax+0x12], xmm0
	sha256rnds2 xmm4, XMMWORD PTR [rax+rbx*2], xmm0
	sha256msg1 xmm1, xmm2
	sha256msg1 xmm2, XMMWORD PTR [rax]
	sha256msg1 xmm3, XMMWORD PTR [rax+0x12]
	sha256msg1 xmm4, XMMWORD PTR [rax+rbx*2]
	sha256msg2 xmm1, xmm2
	sha256msg2 xmm2, XMMWORD PTR [rax]
	sha256msg2 xmm3, XMMWORD PTR [rax+0x12]
	sha256msg2 xmm4, XMMWORD PTR [rax+rbx*2]

@
