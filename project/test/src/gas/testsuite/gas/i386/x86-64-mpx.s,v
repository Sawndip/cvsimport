head	1.2;
access;
symbols
	binutils-2_24-branch:1.1.0.2
	binutils-2_24-branchpoint:1.1
	binutils_latest_snapshot:1.2;
locks; strict;
comment	@# @;


1.2
date	2013.10.12.15.57.07;	author hjl;	state Exp;
branches;
next	1.1;

1.1
date	2013.07.24.15.47.24;	author hjl;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2013.10.12.17.11.40;	author hjl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Only allow 32-bit/64-bit registers for bndcl/bndcu/bndcn

gas/testsuite/

	* gas/i386/mpx.s: Remove bndcl/bndcu/bndcn tests with AX.
	* gas/i386/x86-64-mpx.s: Likwise.

	* gas/i386/mpx.d: Updated.
	* gas/i386/x86-64-mpx.d: Likewise.

opcodes/

	* i386-dis.c (intel_operand_size): Move v_bnd_mode alongside the
	default case.
	(OP_E_register): Move v_bnd_mode alongside m_mode.
	* i386-opc.tbl (bndcl, bndcu, bndcn): Split 32- and 64-bit variants.
	Drop Reg16 and Disp16. Add NoRex64.
	(bndmk, bndmov, bndldx, bndstx): Drop Disp16.
	* i386-tbl.h: Re-generate.
@
text
@# MPX instructions
	.allow_index_reg
	.text
start:
	### bndmk
	bndmk (%r11), %bnd1
	bndmk (%rax), %bnd1
	bndmk (0x399), %bnd1
	bndmk 0x3(%r9), %bnd1
	bndmk 0x3(%rax), %bnd1
	bndmk 0x3(,%r12,1), %bnd1
	bndmk (%rax,%rcx), %bnd1
	bndmk 0x3(%r11,%rax,1), %bnd1
	bndmk 0x3(%rbx,%r9,1), %bnd1

	### bndmov
	bndmov (%r11), %bnd1
	bndmov (%rax), %bnd1
	bndmov (0x399), %bnd1
	bndmov 0x3(%r9), %bnd2
	bndmov 0x3(%rax), %bnd2
	bndmov 0x3(,%r12,1), %bnd0
	bndmov (%rax,%rdx), %bnd2
	bndmov 0x3(%r11,%rax,1), %bnd1
	bndmov 0x3(%rbx,%r9,1), %bnd1
	bndmov %bnd2, %bnd0

	bndmov %bnd1, (%r11)
	bndmov %bnd1, (%rax)
	bndmov %bnd1, (0x399)
	bndmov %bnd2, 0x3(%r9)
	bndmov %bnd2, 0x3(%rax)
	bndmov %bnd0, 0x3(,%r12,1)
	bndmov %bnd2, (%rax,%rdx)
	bndmov %bnd1, 0x3(%r11,%rax,1)
	bndmov %bnd1, 0x3(%rbx,%r9,1)
	bndmov %bnd0, %bnd2

	### bndcl
	bndcl (%r11), %bnd1
	bndcl (%rax), %bnd1
	bndcl %r11, %bnd1
	bndcl %rcx, %bnd1
	bndcl (0x399), %bnd1
	bndcl 0x3(%r9), %bnd2
	bndcl 0x3(%rax), %bnd2
	bndcl 0x3(,%r12,1), %bnd0
	bndcl (%rax,%rdx), %bnd2
	bndcl 0x3(%r11,%rax,1), %bnd1
	bndcl 0x3(%rbx,%r9,1), %bnd1

	### bndcu
	bndcu (%r11), %bnd1
	bndcu (%rax), %bnd1
	bndcu %r11, %bnd1
	bndcu %rcx, %bnd1
	bndcu (0x399), %bnd1
	bndcu 0x3(%r9), %bnd2
	bndcu 0x3(%rax), %bnd2
	bndcu 0x3(,%r12,1), %bnd0
	bndcu (%rax,%rdx), %bnd2
	bndcu 0x3(%r11,%rax,1), %bnd1
	bndcu 0x3(%rbx,%r9,1), %bnd1

	### bndcn
	bndcn (%r11), %bnd1
	bndcn (%rax), %bnd1
	bndcn %r11, %bnd1
	bndcn %rcx, %bnd1
	bndcn (0x399), %bnd1
	bndcn 0x3(%r9), %bnd2
	bndcn 0x3(%rax), %bnd2
	bndcn 0x3(,%r12,1), %bnd0
	bndcn (%rax,%rdx), %bnd2
	bndcn 0x3(%r11,%rax,1), %bnd1
	bndcn 0x3(%rbx,%r9,1), %bnd1

	### bndstx
	bndstx %bnd0, 0x3(%rax,%rbx,1)
	bndstx %bnd2, 3(%rbx,%rdx)
	bndstx %bnd3, 0x399(%r12)
	bndstx %bnd1, 0x1234(%r11)
	bndstx %bnd2, 0x1234(%rbx)
	bndstx %bnd2, 3(,%rbx,1)
	bndstx %bnd2, 3(,%r12,1)
	bndstx %bnd1, (%rdx)

	### bndldx
	bndldx 0x3(%rax,%rbx,1), %bnd0
	bndldx 3(%rbx,%rdx), %bnd2
	bndldx 0x399(%r12), %bnd3
	bndldx 0x1234(%r11), %bnd1
	bndldx 0x1234(%rbx), %bnd2
	bndldx 3(,%rbx,1), %bnd2
	bndldx 3(,%r12,1), %bnd2
	bndldx (%rdx), %bnd1

	### bnd
	bnd call	foo
	bnd call	*(%rax)
	bnd call	*(%r11)
	bnd je	foo
	bnd jmp	foo
	bnd jmp	*(%rcx)
	bnd jmp	*(%r12)
	bnd ret

.intel_syntax noprefix
	bndmk bnd1, [r11]
	bndmk bnd1, [rax]
	bndmk bnd1, [0x399]
	bndmk bnd1, [r9+0x3]
	bndmk bnd1, [rax+0x3]
	bndmk bnd1, [1*r12+0x3]
	bndmk bnd1, [rax+rcx]
	bndmk bnd1, [r11+1*rax+0x3]
	bndmk bnd1, [rbx+1*r9+0x3]

	### bndmov
	bndmov bnd1, [r11]
	bndmov bnd1, [rax]
	bndmov bnd1, [0x399]
	bndmov bnd2, [r9+0x3]
	bndmov bnd2, [rax+0x3]
	bndmov bnd0, [1*r12+0x3]
	bndmov bnd2, [rax+rdx]
	bndmov bnd1, [r11+1*rax+0x3]
	bndmov bnd1, [rbx+1*r9+0x3]
	bndmov bnd0, bnd2

	bndmov [r11], bnd1
	bndmov [rax], bnd1
	bndmov [0x399], bnd1
	bndmov [r9+0x3], bnd2
	bndmov [rax+0x3], bnd2
	bndmov [1*r12+0x3], bnd0
	bndmov [rax+rdx], bnd2
	bndmov [r11+1*rax+0x3], bnd1
	bndmov [rbx+1*r9+0x3], bnd1
	bndmov bnd2, bnd0

	### bndcl
	bndcl bnd1, [r11]
	bndcl bnd1, [rax]
	bndcl bnd1, r11
	bndcl bnd1, rcx
	bndcl bnd1, [0x399]
	bndcl bnd1, [r9+0x3]
	bndcl bnd1, [rax+0x3]
	bndcl bnd1, [1*r12+0x3]
	bndcl bnd1, [rax+rcx]
	bndcl bnd1, [r11+1*rax+0x3]
	bndcl bnd1, [rbx+1*r9+0x3]

	### bndcu
	bndcu bnd1, [r11]
	bndcu bnd1, [rax]
	bndcu bnd1, r11
	bndcu bnd1, rcx
	bndcu bnd1, [0x399]
	bndcu bnd1, [r9+0x3]
	bndcu bnd1, [rax+0x3]
	bndcu bnd1, [1*r12+0x3]
	bndcu bnd1, [rax+rcx]
	bndcu bnd1, [r11+1*rax+0x3]
	bndcu bnd1, [rbx+1*r9+0x3]

	### bndcn
	bndcn bnd1, [r11]
	bndcn bnd1, [rax]
	bndcn bnd1, r11
	bndcn bnd1, rcx
	bndcn bnd1, [0x399]
	bndcn bnd1, [r9+0x3]
	bndcn bnd1, [rax+0x3]
	bndcn bnd1, [1*r9+0x3]
	bndcn bnd1, [rax+rcx]
	bndcn bnd1, [r11+1*rax+0x3]
	bndcn bnd1, [rbx+1*r9+0x3]

	### bndstx
	bndstx [rax+rbx*1+0x3], bnd0
	bndstx [rbx+rdx+3], bnd2
	bndstx [r12+0x399], bnd3
	bndstx [r11+0x1234], bnd1
	bndstx [rbx+0x1234], bnd2
	bndstx [1*rbx+3], bnd2
	bndstx [1*r12+3], bnd2
	bndstx [rdx], bnd1

	### bndldx
	bndldx bnd0, [rax+rbx*1+0x3]
	bndldx bnd2, [rbx+rdx+3]
	bndldx bnd3, [r12+0x399]
	bndldx bnd1, [r11+0x1234]
	bndldx bnd2, [rbx+0x1234]
	bndldx bnd2, [1*rbx+3]
	bndldx bnd2, [1*r12+3]
	bndldx bnd1, [rdx]

	### bnd
	bnd call	foo
	bnd call	rax
	bnd call	r11
	bnd je	foo
	bnd jmp	foo
	bnd jmp	rcx
	bnd jmp	r12
	bnd ret

foo:	bnd ret
@


1.1
log
@Support Intel MPX

gas/

2013-07-24  Anna Tikhonova  <anna.tikhonova@@intel.com>
	    Kirill Yukhin  <kirill.yukhin@@intel.com>
	    Michael Zolotukhin  <michael.v.zolotukhin@@intel.com>

	* config/tc-i386.c (BND_PREFIX): New.
	(struct _i386_insn): Add new field bnd_prefix.
	(add_bnd_prefix): New.
	(cpu_arch): Add MPX.
	(i386_operand_type): Add regbnd.
	(md_assemble): Handle BND prefixes.
	(parse_insn): Likewise.
	(output_branch): Likewise.
	(output_jump): Likewise.
	(build_modrm_byte): Handle regbnd.
	(OPTION_MADD_BND_PREFIX): New.
	(md_longopts): Add entry for 'madd-bnd-prefix'.
	(md_parse_option): Handle madd-bnd-prefix option.
	(md_show_usage): Add description for madd-bnd-prefix
	option.
	* doc/c-i386.texi: Document mpx/.mpx and -madd-bnd-prefix.

gas/testsuite/

2013-07-24  Anna Tikhonova  <anna.tikhonova@@intel.com>
	    Kirill Yukhin  <kirill.yukhin@@intel.com>
	    Michael Zolotukhin  <michael.v.zolotukhin@@intel.com>

	* gas/i386/mpx-add-bnd-prefix.s: New.
	* gas/i386/mpx-add-bnd-prefix.d: New.
	* gas/i386/mpx-inval-1.l: New.
	* gas/i386/mpx-inval-1.s: New.
	* gas/i386/mpx.d: New.
	* gas/i386/mpx.s: New.
	* gas/i386/x86-64-mpx-add-bnd-prefix.d: New.
	* gas/i386/x86-64-mpx-add-bnd-prefix.s: New.
	* gas/i386/x86-64-mpx-addr32.d: New.
	* gas/i386/x86-64-mpx-addr32.s: New.
	* gas/i386/x86-64-mpx-inval-1.l: New.
	* gas/i386/x86-64-mpx-inval-1.s: New.
	* gas/i386/x86-64-mpx-inval-2.l: New.
	* gas/i386/x86-64-mpx-inval-2.s: New.
	* gas/i386/x86-64-mpx.d: New.
	* gas/i386/x86-64-mpx.s: New.
	* gas/i386/nops.d: Adjust to MPX changes.
	* gas/i386/nops.s: Likewise.
	* gas/i386/x86-64-nops.d: Likewise.
	* gas/i386/x86-64-nops.s: Likewise.
	* gas/i386/ilp32/x86-64-nops.d: Likewise.
	* gas/i386/i386.exp: Run new MPX tests.

include/opcode/

2013-07-24  Anna Tikhonova  <anna.tikhonova@@intel.com>
	    Kirill Yukhin  <kirill.yukhin@@intel.com>
	    Michael Zolotukhin  <michael.v.zolotukhin@@intel.com>

	* i386.h (BND_PREFIX_OPCODE): New.

opcodes/

2013-07-24  Anna Tikhonova  <anna.tikhonova@@intel.com>
	    Kirill Yukhin  <kirill.yukhin@@intel.com>
	    Michael Zolotukhin  <michael.v.zolotukhin@@intel.com>

	* i386-dis.c (BND_Fixup): New.
	(Ebnd): New.
	(Ev_bnd): New.
	(Gbnd): New.
	(BND): New.
	(v_bnd_mode): New.
	(bnd_mode): New.
	(MOD enum): Add new entries.
	(PREFIX enum): Likewise.
	(dis tables): Replace XX with BND for near branch and call
	instructions.
	(prefix_table): Add new entries.
	(mod_table): Likewise.
	(names_bnd): New.
	(intel_names_bnd): New.
	(att_names_bnd): New.
	(BND_PREFIX): New.
	(prefix_name): Handle BND_PREFIX.
	(print_insn): Initialize names_bnd.
	(intel_operand_size): Handle new modes.
	(OP_E_register): Likewise.
	(OP_E_memory): Likewise.
	(OP_G): Likewise.
	* i386-gen.c (cpu_flag_init): Add CpuMPX.
	(cpu_flags): Add CpuMPX.
	(operand_type_init): Add RegBND.
	(opcode_modifiers): Add BNDPrefixOk.
	(operand_types): Add RegBND.
	* i386-init.h: Regenerate.
	* i386-opc.h (CpuMPX): New.
	(CpuUnused): Comment out.
	(i386_cpu_flags): Add cpumpx.
	(BNDPrefixOk): New.
	(i386_opcode_modifier): Add bndprefixok.
	(RegBND): New.
	(i386_operand_type): Add regbnd.
	* i386-opc.tbl: Add BNDPrefixOk to near jumps, calls and rets.
	Add MPX instructions and bnd prefix.
	* i386-reg.tbl: Add bnd0-bnd3 registers.
	* i386-tbl.h: Regenerate.
@
text
@d4 1
a4 1

a43 1
	bndcl %ax, %bnd1
a56 1
	bndcu %ax, %bnd1
a69 1
	bndcn %ax, %bnd1
a146 1
	bndcl bnd1, ax
a159 1
	bndcu bnd1, ax
a172 1
	bndcn bnd1, ax
@


1.1.2.1
log
@Only allow 32-bit/64-bit registers for bndcl/bndcu/bndcn

gcc/

	PR target/58690
	* config/i386/i386.c (ix86_copy_addr_to_reg): New function.
	(ix86_expand_movmem): Replace copy_addr_to_reg with
	ix86_copy_addr_to_reg.
	(ix86_expand_setmem): Likewise.

gcc/testsuite/

	PR target/58690
	* gcc.target/i386/pr58690.c: New test
@
text
@d4 1
a4 1
start:
d44 1
d58 1
d72 1
d150 1
d164 1
d178 1
@


