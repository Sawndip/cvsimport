head	1.20;
access;
symbols
	binutils-2_24-branch:1.20.0.10
	binutils-2_24-branchpoint:1.20
	binutils-2_21_1:1.20
	binutils-2_23_2:1.20
	binutils-2_23_1:1.20
	binutils-2_23:1.20
	binutils-2_23-branch:1.20.0.8
	binutils-2_23-branchpoint:1.20
	binutils-2_22_branch:1.20.0.6
	binutils-2_22:1.20
	binutils-2_22-branch:1.20.0.4
	binutils-2_22-branchpoint:1.20
	binutils-2_21:1.20
	binutils-2_21-branch:1.20.0.2
	binutils-2_21-branchpoint:1.20
	binutils-2_20_1:1.19
	binutils-2_20:1.19
	binutils-arc-20081103-branch:1.18.0.6
	binutils-arc-20081103-branchpoint:1.18
	binutils-2_20-branch:1.19.0.4
	binutils-2_20-branchpoint:1.19
	dje-cgen-play1-branch:1.19.0.2
	dje-cgen-play1-branchpoint:1.19
	arc-20081103-branch:1.18.0.4
	arc-20081103-branchpoint:1.18
	binutils-2_19_1:1.18
	binutils-2_19:1.18
	binutils-2_19-branch:1.18.0.2
	binutils-2_19-branchpoint:1.18
	binutils-2_18:1.13
	binutils-2_18-branch:1.13.0.2
	binutils-2_18-branchpoint:1.13
	binutils-csl-coldfire-4_1-32:1.9
	binutils-csl-sourcerygxx-4_1-32:1.9
	binutils-csl-innovasic-fido-3_4_4-33:1.9
	binutils-csl-sourcerygxx-3_4_4-32:1.5
	binutils-csl-coldfire-4_1-30:1.9
	binutils-csl-sourcerygxx-4_1-30:1.9
	binutils-csl-coldfire-4_1-28:1.9
	binutils-csl-sourcerygxx-4_1-29:1.9
	binutils-csl-sourcerygxx-4_1-28:1.9
	binutils-csl-arm-2006q3-27:1.9
	binutils-csl-sourcerygxx-4_1-27:1.9
	binutils-csl-arm-2006q3-26:1.9
	binutils-csl-sourcerygxx-4_1-26:1.9
	binutils-csl-sourcerygxx-4_1-25:1.9
	binutils-csl-sourcerygxx-4_1-24:1.9
	binutils-csl-sourcerygxx-4_1-23:1.9
	binutils-csl-sourcerygxx-4_1-21:1.9
	binutils-csl-arm-2006q3-21:1.9
	binutils-csl-sourcerygxx-4_1-22:1.9
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.9
	binutils-csl-sourcerygxx-4_1-20:1.9
	binutils-csl-arm-2006q3-19:1.9
	binutils-csl-sourcerygxx-4_1-19:1.9
	binutils-csl-sourcerygxx-4_1-18:1.9
	binutils-csl-renesas-4_1-9:1.9
	binutils-csl-sourcerygxx-3_4_4-25:1.5
	binutils-csl-renesas-4_1-8:1.9
	binutils-csl-renesas-4_1-7:1.9
	binutils-csl-renesas-4_1-6:1.9
	binutils-csl-sourcerygxx-4_1-17:1.9
	binutils-csl-sourcerygxx-4_1-14:1.9
	binutils-csl-sourcerygxx-4_1-15:1.9
	binutils-csl-sourcerygxx-4_1-13:1.9
	binutils-2_17:1.9
	binutils-csl-sourcerygxx-4_1-12:1.9
	binutils-csl-sourcerygxx-3_4_4-21:1.9
	binutils-csl-wrs-linux-3_4_4-24:1.5
	binutils-csl-wrs-linux-3_4_4-23:1.5
	binutils-csl-sourcerygxx-4_1-9:1.9
	binutils-csl-sourcerygxx-4_1-8:1.9
	binutils-csl-sourcerygxx-4_1-7:1.9
	binutils-csl-arm-2006q1-6:1.9
	binutils-csl-sourcerygxx-4_1-6:1.9
	binutils-csl-wrs-linux-3_4_4-22:1.5
	binutils-csl-coldfire-4_1-11:1.9
	binutils-csl-sourcerygxx-3_4_4-19:1.9
	binutils-csl-coldfire-4_1-10:1.9
	binutils-csl-sourcerygxx-4_1-5:1.9
	binutils-csl-sourcerygxx-4_1-4:1.9
	binutils-csl-wrs-linux-3_4_4-21:1.5
	binutils-csl-morpho-4_1-4:1.9
	binutils-csl-sourcerygxx-3_4_4-17:1.9
	binutils-csl-wrs-linux-3_4_4-20:1.5
	binutils-2_17-branch:1.9.0.4
	binutils-2_17-branchpoint:1.9
	binutils-csl-2_17-branch:1.9.0.2
	binutils-csl-2_17-branchpoint:1.9
	binutils-csl-gxxpro-3_4-branch:1.5.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.5
	binutils-2_16_1:1.5
	binutils-csl-arm-2005q1b:1.5
	binutils-2_16:1.5
	binutils-csl-arm-2005q1a:1.5
	binutils-csl-arm-2005q1-branch:1.5.0.4
	binutils-csl-arm-2005q1-branchpoint:1.5
	binutils-2_16-branch:1.5.0.2
	binutils-2_16-branchpoint:1.5
	csl-arm-2004-q3d:1.4
	csl-arm-2004-q3:1.3
	binutils-2_15:1.2
	binutils-2_15-branchpoint:1.2
	csl-arm-2004-q1a:1.2
	csl-arm-2004-q1:1.2
	binutils-2_15-branch:1.2.0.12
	cagney_bfdfile-20040213-branch:1.2.0.10
	cagney_bfdfile-20040213-branchpoint:1.2
	cagney_bigcore-20040122-branch:1.2.0.8
	cagney_bigcore-20040122-branchpoint:1.2
	csl-arm-2003-q4:1.2
	binutils-2_14:1.2
	binutils-2_14-branch:1.2.0.6
	binutils-2_14-branchpoint:1.2
	binutils-2_13_2_1:1.2
	binutils-2_13_2:1.2
	binutils-2_13_1:1.2
	binutils-2_13:1.2
	binutils-2_13-branchpoint:1.2
	binutils-2_13-branch:1.2.0.4
	binutils-2_12_1:1.2
	binutils-2_12:1.2
	binutils-2_12-branch:1.2.0.2
	binutils-2_12-branchpoint:1.2
	cygnus_cvs_20020108_pre:1.2
	binutils-2_11_2:1.1
	binutils-2_11_1:1.1
	binutils-2_11:1.1
	x86_64versiong3:1.1
	binutils-2_11-branch:1.1.0.2
	binutils_latest_snapshot:1.20;
locks; strict;
comment	@# @;


1.20
date	2009.10.20.22.18.18;	author hjl;	state Exp;
branches;
next	1.19;

1.19
date	2009.04.20.06.31.50;	author jbeulich;	state Exp;
branches;
next	1.18;

1.18
date	2008.01.15.18.50.43;	author hjl;	state Exp;
branches;
next	1.17;

1.17
date	2008.01.15.01.37.55;	author hjl;	state Exp;
branches;
next	1.16;

1.16
date	2008.01.12.16.05.41;	author hjl;	state Exp;
branches;
next	1.15;

1.15
date	2008.01.03.03.28.35;	author hjl;	state Exp;
branches;
next	1.14;

1.14
date	2007.11.01.16.27.08;	author hjl;	state Exp;
branches;
next	1.13;

1.13
date	2007.04.27.04.22.00;	author hjl;	state Exp;
branches;
next	1.12;

1.12
date	2006.12.14.20.13.28;	author hjl;	state Exp;
branches;
next	1.11;

1.11
date	2006.12.06.18.15.45;	author hjl;	state Exp;
branches;
next	1.10;

1.10
date	2006.09.20.11.35.11;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.07.20.18.05;	author hjl;	state Exp;
branches;
next	1.8;

1.8
date	2005.07.10.16.54.01;	author hjl;	state Exp;
branches;
next	1.7;

1.7
date	2005.06.20.23.18.39;	author hjl;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.17.12.05.24;	author jbeulich;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.09.14.12.07;	author schwab;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.04.09.16.06;	author jbeulich;	state Exp;
branches;
next	1.3;

1.3
date	2004.07.21.16.09.43;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.12.02.03.10;	author amodra;	state Exp;
branches;
next	1.1;

1.1
date	2001.01.06.12.36.04;	author hubicka;	state Exp;
branches;
next	;


desc
@@


1.20
log
@gas/

2009-10-20  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/10775
	* doc/c-i386.texi: Mention movabs.

gas/testsuite/

2009-10-20  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/10775
	* gas/i386/immed64.d: Updated.
	* gas/i386/l1om.d: Likewise.
	* gas/i386/x86-64-disp-intel.d: Likewise.
	* gas/i386/x86-64-disp.d: Likewise.
	* gas/i386/x86_64.d: Likewise.

opcodes/

2009-10-20  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/10775
	* i386-dis.c: Document LB, LS and LV macros.
	(dis386): Use mov%LB, mov%LS and mov%LV on mov instruction
	with the 64-bit displacement or immediate operand.
	(putop): Handle LB, LS and LV macros.
@
text
@#as: -J
#objdump: -dw
#name: x86_64
.*: +file format .*

Disassembly of section .text:

0+ <.*>:
[ 	]*[a-f0-9]+:	01 ca                	add    %ecx,%edx
[ 	]*[a-f0-9]+:	44 01 ca             	add    %r9d,%edx
[ 	]*[a-f0-9]+:	41 01 ca             	add    %ecx,%r10d
[ 	]*[a-f0-9]+:	48 01 ca             	add    %rcx,%rdx
[ 	]*[a-f0-9]+:	4d 01 ca             	add    %r9,%r10
[ 	]*[a-f0-9]+:	41 01 c0             	add    %eax,%r8d
[ 	]*[a-f0-9]+:	66 41 01 c0          	add    %ax,%r8w
[ 	]*[a-f0-9]+:	49 01 c0             	add    %rax,%r8
[ 	]*[a-f0-9]+:	05 11 22 33 44       	add    \$0x44332211,%eax
[ 	]*[a-f0-9]+:	48 05 11 22 33 f4    	add    \$0xfffffffff4332211,%rax
[ 	]*[a-f0-9]+:	66 05 33 44          	add    \$0x4433,%ax
[ 	]*[a-f0-9]+:	48 05 11 22 33 44    	add    \$0x44332211,%rax
[ 	]*[a-f0-9]+:	00 ca                	add    %cl,%dl
[ 	]*[a-f0-9]+:	00 f7                	add    %dh,%bh
[ 	]*[a-f0-9]+:	40 00 f7             	add    %sil,%dil
[ 	]*[a-f0-9]+:	41 00 f7             	add    %sil,%r15b
[ 	]*[a-f0-9]+:	44 00 f7             	add    %r14b,%dil
[ 	]*[a-f0-9]+:	45 00 f7             	add    %r14b,%r15b
[ 	]*[a-f0-9]+:	50                   	push   %rax
[ 	]*[a-f0-9]+:	41 50                	push   %r8
[ 	]*[a-f0-9]+:	41 59                	pop    %r9
[ 	]*[a-f0-9]+:	04 11                	add    \$0x11,%al
[ 	]*[a-f0-9]+:	80 c4 11             	add    \$0x11,%ah
[ 	]*[a-f0-9]+:	40 80 c4 11          	add    \$0x11,%spl
[ 	]*[a-f0-9]+:	41 80 c0 11          	add    \$0x11,%r8b
[ 	]*[a-f0-9]+:	41 80 c4 11          	add    \$0x11,%r12b
[ 	]*[a-f0-9]+:	0f 20 c0             	mov    %cr0,%rax
[ 	]*[a-f0-9]+:	41 0f 20 c0          	mov    %cr0,%r8
[ 	]*[a-f0-9]+:	44 0f 20 c0          	mov    %cr8,%rax
[ 	]*[a-f0-9]+:	44 0f 22 c0          	mov    %rax,%cr8
[ 	]*[a-f0-9]+:	f3 48 a5             	rep movsq %ds:\(%rsi\),%es:\(%rdi\)
[ 	]*[a-f0-9]+:	66 f3 a5             	rep movsw %ds:\(%rsi\),%es:\(%rdi\)
[ 	]*[a-f0-9]+:	f3 48 a5             	rep movsq %ds:\(%rsi\),%es:\(%rdi\)
[ 	]*[a-f0-9]+:	b0 11                	mov    \$0x11,%al
[ 	]*[a-f0-9]+:	b4 11                	mov    \$0x11,%ah
[ 	]*[a-f0-9]+:	40 b4 11             	mov    \$0x11,%spl
[ 	]*[a-f0-9]+:	41 b4 11             	mov    \$0x11,%r12b
[ 	]*[a-f0-9]+:	b8 44 33 22 11       	mov    \$0x11223344,%eax
[ 	]*[a-f0-9]+:	41 b8 44 33 22 11    	mov    \$0x11223344,%r8d
[ 	]*[a-f0-9]+:	48 b8 88 77 66 55 44 33 22 11 	movabs \$0x1122334455667788,%rax
[ 	]*[a-f0-9]+:	49 b8 88 77 66 55 44 33 22 11 	movabs \$0x1122334455667788,%r8
[ 	]*[a-f0-9]+:	03 00                	add    \(%rax\),%eax
[ 	]*[a-f0-9]+:	41 03 00             	add    \(%r8\),%eax
[ 	]*[a-f0-9]+:	45 03 00             	add    \(%r8\),%r8d
[ 	]*[a-f0-9]+:	49 03 00             	add    \(%r8\),%rax
[ 	]*[a-f0-9]+:	03 05 22 22 22 22    	add    0x22222222\(%rip\),%eax        # 222222c7 <foo\+0x222220c4>
[ 	]*[a-f0-9]+:	03 45 00             	add    0x0\(%rbp\),%eax
[ 	]*[a-f0-9]+:	03 04 25 22 22 22 22 	add    0x22222222,%eax
[ 	]*[a-f0-9]+:	41 03 45 00          	add    0x0\(%r13\),%eax
[ 	]*[a-f0-9]+:	03 04 80             	add    \(%rax,%rax,4\),%eax
[ 	]*[a-f0-9]+:	41 03 04 80          	add    \(%r8,%rax,4\),%eax
[ 	]*[a-f0-9]+:	45 03 04 80          	add    \(%r8,%rax,4\),%r8d
[ 	]*[a-f0-9]+:	43 03 04 80          	add    \(%r8,%r8,4\),%eax
[ 	]*[a-f0-9]+:	46 01 04 81          	add    %r8d,\(%rcx,%r8,4\)
[ 	]*[a-f0-9]+:	03 14 c0             	add    \(%rax,%rax,8\),%edx
[ 	]*[a-f0-9]+:	03 14 c8             	add    \(%rax,%rcx,8\),%edx
[ 	]*[a-f0-9]+:	03 14 d0             	add    \(%rax,%rdx,8\),%edx
[ 	]*[a-f0-9]+:	03 14 d8             	add    \(%rax,%rbx,8\),%edx
[ 	]*[a-f0-9]+:	03 10                	add    \(%rax\),%edx
[ 	]*[a-f0-9]+:	03 14 e8             	add    \(%rax,%rbp,8\),%edx
[ 	]*[a-f0-9]+:	03 14 f0             	add    \(%rax,%rsi,8\),%edx
[ 	]*[a-f0-9]+:	03 14 f8             	add    \(%rax,%rdi,8\),%edx
[ 	]*[a-f0-9]+:	42 03 14 c0          	add    \(%rax,%r8,8\),%edx
[ 	]*[a-f0-9]+:	42 03 14 c8          	add    \(%rax,%r9,8\),%edx
[ 	]*[a-f0-9]+:	42 03 14 d0          	add    \(%rax,%r10,8\),%edx
[ 	]*[a-f0-9]+:	42 03 14 d8          	add    \(%rax,%r11,8\),%edx
[ 	]*[a-f0-9]+:	42 03 14 e0          	add    \(%rax,%r12,8\),%edx
[ 	]*[a-f0-9]+:	42 03 14 e8          	add    \(%rax,%r13,8\),%edx
[ 	]*[a-f0-9]+:	42 03 14 f0          	add    \(%rax,%r14,8\),%edx
[ 	]*[a-f0-9]+:	42 03 14 f8          	add    \(%rax,%r15,8\),%edx
[ 	]*[a-f0-9]+:	83 c1 11             	add    \$0x11,%ecx
[ 	]*[a-f0-9]+:	83 00 11             	addl   \$0x11,\(%rax\)
[ 	]*[a-f0-9]+:	48 83 00 11          	addq   \$0x11,\(%rax\)
[ 	]*[a-f0-9]+:	41 83 00 11          	addl   \$0x11,\(%r8\)
[ 	]*[a-f0-9]+:	83 04 81 11          	addl   \$0x11,\(%rcx,%rax,4\)
[ 	]*[a-f0-9]+:	41 83 04 81 11       	addl   \$0x11,\(%r9,%rax,4\)
[ 	]*[a-f0-9]+:	42 83 04 81 11       	addl   \$0x11,\(%rcx,%r8,4\)
[ 	]*[a-f0-9]+:	83 05 22 22 22 22 33 	addl   \$0x33,0x22222222\(%rip\)        # 22222342 <foo\+0x2222213f>
[ 	]*[a-f0-9]+:	48 83 05 22 22 22 22 33 	addq   \$0x33,0x22222222\(%rip\)        # 2222234a <foo\+0x22222147>
[ 	]*[a-f0-9]+:	81 05 22 22 22 22 33 33 33 33 	addl   \$0x33333333,0x22222222\(%rip\)        # 22222354 <foo\+0x22222151>
[ 	]*[a-f0-9]+:	48 81 05 22 22 22 22 33 33 33 33 	addq   \$0x33333333,0x22222222\(%rip\)        # 2222235f <foo\+0x2222215c>
[ 	]*[a-f0-9]+:	83 04 c5 22 22 22 22 33 	addl   \$0x33,0x22222222\(,%rax,8\)
[ 	]*[a-f0-9]+:	83 80 22 22 22 22 33 	addl   \$0x33,0x22222222\(%rax\)
[ 	]*[a-f0-9]+:	83 80 22 22 22 22 33 	addl   \$0x33,0x22222222\(%rax\)
[ 	]*[a-f0-9]+:	41 83 04 e8 33       	addl   \$0x33,\(%r8,%rbp,8\)
[ 	]*[a-f0-9]+:	83 04 25 22 22 22 22 33 	addl   \$0x33,0x22222222
[ 	]*[a-f0-9]+:	a0 11 22 33 44 55 66 77 88 	movabs 0x8877665544332211,%al
[ 	]*[a-f0-9]+:	a1 11 22 33 44 55 66 77 88 	movabs 0x8877665544332211,%eax
[ 	]*[a-f0-9]+:	a2 11 22 33 44 55 66 77 88 	movabs %al,0x8877665544332211
[ 	]*[a-f0-9]+:	a3 11 22 33 44 55 66 77 88 	movabs %eax,0x8877665544332211
[ 	]*[a-f0-9]+:	48 a1 11 22 33 44 55 66 77 88 	movabs 0x8877665544332211,%rax
[ 	]*[a-f0-9]+:	48 a3 11 22 33 44 55 66 77 88 	movabs %rax,0x8877665544332211
[ 	]*[a-f0-9]+:	48 99                	cqto   
[ 	]*[a-f0-9]+:	48 98                	cltq   
[ 	]*[a-f0-9]+:	48 63 c0             	movslq %eax,%rax
[ 	]*[a-f0-9]+:	48 0f bf c0          	movswq %ax,%rax
[ 	]*[a-f0-9]+:	48 0f be c0          	movsbq %al,%rax

0+1a7 <bar>:
[ 	]*[a-f0-9]+:	b0 00                	mov    \$0x0,%al
[ 	]*[a-f0-9]+:	66 b8 00 00          	mov    \$0x0,%ax
[ 	]*[a-f0-9]+:	b8 00 00 00 00       	mov    \$0x0,%eax
[ 	]*[a-f0-9]+:	48 c7 c0 00 00 00 00 	mov    \$0x0,%rax
[ 	]*[a-f0-9]+:	a1 00 00 00 00 00 00 00 00 	movabs 0x0,%eax
[ 	]*[a-f0-9]+:	8b 04 25 00 00 00 00 	mov    0x0,%eax
[ 	]*[a-f0-9]+:	8b 80 00 00 00 00    	mov    0x0\(%rax\),%eax
[ 	]*[a-f0-9]+:	8b 05 00 00 00 00    	mov    0x0\(%rip\),%eax        # 1d5 <bar\+0x2e>
[ 	]*[a-f0-9]+:	b0 00                	mov    \$0x0,%al
[ 	]*[a-f0-9]+:	66 b8 00 00          	mov    \$0x0,%ax
[ 	]*[a-f0-9]+:	b8 00 00 00 00       	mov    \$0x0,%eax
[ 	]*[a-f0-9]+:	48 c7 c0 00 00 00 00 	mov    \$0x0,%rax
[ 	]*[a-f0-9]+:	a1 00 00 00 00 00 00 00 00 	movabs 0x0,%eax
[ 	]*[a-f0-9]+:	8b 04 25 00 00 00 00 	mov    0x0,%eax
[ 	]*[a-f0-9]+:	8b 80 00 00 00 00    	mov    0x0\(%rax\),%eax
[ 	]*[a-f0-9]+:	8b 05 00 00 00 00    	mov    0x0\(%rip\),%eax        # 203 <foo>

0+203 <foo>:
[ 	]*[a-f0-9]+:	a0 11 22 33 44 55 66 77 88 	movabs 0x8877665544332211,%al
[ 	]*[a-f0-9]+:	66 a1 11 22 33 44 55 66 77 88 	movabs 0x8877665544332211,%ax
[ 	]*[a-f0-9]+:	a1 11 22 33 44 55 66 77 88 	movabs 0x8877665544332211,%eax
[ 	]*[a-f0-9]+:	48 a1 11 22 33 44 55 66 77 88 	movabs 0x8877665544332211,%rax
[ 	]*[a-f0-9]+:	a2 11 22 33 44 55 66 77 88 	movabs %al,0x8877665544332211
[ 	]*[a-f0-9]+:	66 a3 11 22 33 44 55 66 77 88 	movabs %ax,0x8877665544332211
[ 	]*[a-f0-9]+:	a3 11 22 33 44 55 66 77 88 	movabs %eax,0x8877665544332211
[ 	]*[a-f0-9]+:	48 a3 11 22 33 44 55 66 77 88 	movabs %rax,0x8877665544332211
[ 	]*[a-f0-9]+:	a0 11 22 33 44 55 66 77 88 	movabs 0x8877665544332211,%al
[ 	]*[a-f0-9]+:	66 a1 11 22 33 44 55 66 77 88 	movabs 0x8877665544332211,%ax
[ 	]*[a-f0-9]+:	a1 11 22 33 44 55 66 77 88 	movabs 0x8877665544332211,%eax
[ 	]*[a-f0-9]+:	48 a1 11 22 33 44 55 66 77 88 	movabs 0x8877665544332211,%rax
[ 	]*[a-f0-9]+:	a2 11 22 33 44 55 66 77 88 	movabs %al,0x8877665544332211
[ 	]*[a-f0-9]+:	66 a3 11 22 33 44 55 66 77 88 	movabs %ax,0x8877665544332211
[ 	]*[a-f0-9]+:	a3 11 22 33 44 55 66 77 88 	movabs %eax,0x8877665544332211
[ 	]*[a-f0-9]+:	48 a3 11 22 33 44 55 66 77 88 	movabs %rax,0x8877665544332211
[ 	]*[a-f0-9]+:	8a 04 25 11 22 33 ff 	mov    0xffffffffff332211,%al
[ 	]*[a-f0-9]+:	66 8b 04 25 11 22 33 ff 	mov    0xffffffffff332211,%ax
[ 	]*[a-f0-9]+:	8b 04 25 11 22 33 ff 	mov    0xffffffffff332211,%eax
[ 	]*[a-f0-9]+:	48 8b 04 25 11 22 33 ff 	mov    0xffffffffff332211,%rax
[ 	]*[a-f0-9]+:	88 04 25 11 22 33 ff 	mov    %al,0xffffffffff332211
[ 	]*[a-f0-9]+:	66 89 04 25 11 22 33 ff 	mov    %ax,0xffffffffff332211
[ 	]*[a-f0-9]+:	89 04 25 11 22 33 ff 	mov    %eax,0xffffffffff332211
[ 	]*[a-f0-9]+:	48 89 04 25 11 22 33 ff 	mov    %rax,0xffffffffff332211
[ 	]*[a-f0-9]+:	8a 04 25 11 22 33 ff 	mov    0xffffffffff332211,%al
[ 	]*[a-f0-9]+:	66 8b 04 25 11 22 33 ff 	mov    0xffffffffff332211,%ax
[ 	]*[a-f0-9]+:	8b 04 25 11 22 33 ff 	mov    0xffffffffff332211,%eax
[ 	]*[a-f0-9]+:	48 8b 04 25 11 22 33 ff 	mov    0xffffffffff332211,%rax
[ 	]*[a-f0-9]+:	88 04 25 11 22 33 ff 	mov    %al,0xffffffffff332211
[ 	]*[a-f0-9]+:	66 89 04 25 11 22 33 ff 	mov    %ax,0xffffffffff332211
[ 	]*[a-f0-9]+:	89 04 25 11 22 33 ff 	mov    %eax,0xffffffffff332211
[ 	]*[a-f0-9]+:	48 89 04 25 11 22 33 ff 	mov    %rax,0xffffffffff332211
[ 	]*[a-f0-9]+:	48 0f c7 08          	cmpxchg16b \(%rax\)
[ 	]*[a-f0-9]+:	48 0f c7 08          	cmpxchg16b \(%rax\)
[ 	]*[a-f0-9]+:	66 0f be f0          	movsbw %al,%si
[ 	]*[a-f0-9]+:	0f be f0             	movsbl %al,%esi
[ 	]*[a-f0-9]+:	48 0f be f0          	movsbq %al,%rsi
[ 	]*[a-f0-9]+:	0f bf f0             	movswl %ax,%esi
[ 	]*[a-f0-9]+:	48 0f bf f0          	movswq %ax,%rsi
[ 	]*[a-f0-9]+:	48 63 f0             	movslq %eax,%rsi
[ 	]*[a-f0-9]+:	0f be 10             	movsbl \(%rax\),%edx
[ 	]*[a-f0-9]+:	48 0f be 10          	movsbq \(%rax\),%rdx
[ 	]*[a-f0-9]+:	66 0f be 10          	movsbw \(%rax\),%dx
[ 	]*[a-f0-9]+:	0f be 10             	movsbl \(%rax\),%edx
[ 	]*[a-f0-9]+:	48 0f be 10          	movsbq \(%rax\),%rdx
[ 	]*[a-f0-9]+:	66 0f be 10          	movsbw \(%rax\),%dx
[ 	]*[a-f0-9]+:	0f bf 10             	movswl \(%rax\),%edx
[ 	]*[a-f0-9]+:	48 0f bf 10          	movswq \(%rax\),%rdx
[ 	]*[a-f0-9]+:	66 0f b6 f0          	movzbw %al,%si
[ 	]*[a-f0-9]+:	0f b6 f0             	movzbl %al,%esi
[ 	]*[a-f0-9]+:	48 0f b6 f0          	movzbq %al,%rsi
[ 	]*[a-f0-9]+:	0f b7 f0             	movzwl %ax,%esi
[ 	]*[a-f0-9]+:	48 0f b7 f0          	movzwq %ax,%rsi
[ 	]*[a-f0-9]+:	0f b6 10             	movzbl \(%rax\),%edx
[ 	]*[a-f0-9]+:	48 0f b6 10          	movzbq \(%rax\),%rdx
[ 	]*[a-f0-9]+:	66 0f b6 10          	movzbw \(%rax\),%dx
[ 	]*[a-f0-9]+:	0f b6 10             	movzbl \(%rax\),%edx
[ 	]*[a-f0-9]+:	48 0f b6 10          	movzbq \(%rax\),%rdx
[ 	]*[a-f0-9]+:	66 0f b6 10          	movzbw \(%rax\),%dx
[ 	]*[a-f0-9]+:	0f b6 10             	movzbl \(%rax\),%edx
[ 	]*[a-f0-9]+:	48 0f b6 10          	movzbq \(%rax\),%rdx
[ 	]*[a-f0-9]+:	66 0f b6 10          	movzbw \(%rax\),%dx
[ 	]*[a-f0-9]+:	0f b7 10             	movzwl \(%rax\),%edx
[ 	]*[a-f0-9]+:	48 0f b7 10          	movzwq \(%rax\),%rdx
[ 	]*[a-f0-9]+:	66 0f be f0          	movsbw %al,%si
[ 	]*[a-f0-9]+:	0f be f0             	movsbl %al,%esi
[ 	]*[a-f0-9]+:	48 0f be f0          	movsbq %al,%rsi
[ 	]*[a-f0-9]+:	0f bf f0             	movswl %ax,%esi
[ 	]*[a-f0-9]+:	48 0f bf f0          	movswq %ax,%rsi
[ 	]*[a-f0-9]+:	48 63 f0             	movslq %eax,%rsi
[ 	]*[a-f0-9]+:	0f be 10             	movsbl \(%rax\),%edx
[ 	]*[a-f0-9]+:	48 0f be 10          	movsbq \(%rax\),%rdx
[ 	]*[a-f0-9]+:	66 0f be 10          	movsbw \(%rax\),%dx
[ 	]*[a-f0-9]+:	0f bf 10             	movswl \(%rax\),%edx
[ 	]*[a-f0-9]+:	48 0f bf 10          	movswq \(%rax\),%rdx
[ 	]*[a-f0-9]+:	66 0f b6 f0          	movzbw %al,%si
[ 	]*[a-f0-9]+:	0f b6 f0             	movzbl %al,%esi
[ 	]*[a-f0-9]+:	48 0f b6 f0          	movzbq %al,%rsi
[ 	]*[a-f0-9]+:	0f b7 f0             	movzwl %ax,%esi
[ 	]*[a-f0-9]+:	48 0f b7 f0          	movzwq %ax,%rsi
[ 	]*[a-f0-9]+:	0f b6 10             	movzbl \(%rax\),%edx
[ 	]*[a-f0-9]+:	48 0f b6 10          	movzbq \(%rax\),%rdx
[ 	]*[a-f0-9]+:	66 0f b6 10          	movzbw \(%rax\),%dx
[ 	]*[a-f0-9]+:	0f b7 10             	movzwl \(%rax\),%edx
[ 	]*[a-f0-9]+:	48 0f b7 10          	movzwq \(%rax\),%rdx
[ 	]*[a-f0-9]+:	f3 0f 7e 0c 24       	movq   \(%rsp\),%xmm1
[ 	]*[a-f0-9]+:	f3 0f 7e 0c 24       	movq   \(%rsp\),%xmm1
[ 	]*[a-f0-9]+:	66 0f d6 0c 24       	movq   %xmm1,\(%rsp\)
[ 	]*[a-f0-9]+:	66 0f d6 0c 24       	movq   %xmm1,\(%rsp\)
[ 	]*[a-f0-9]+:	df e0                	fnstsw %ax
[ 	]*[a-f0-9]+:	df e0                	fnstsw %ax
[ 	]*[a-f0-9]+:	9b df e0             	fstsw  %ax
[ 	]*[a-f0-9]+:	9b df e0             	fstsw  %ax
[ 	]*[a-f0-9]+:	df e0                	fnstsw %ax
[ 	]*[a-f0-9]+:	df e0                	fnstsw %ax
[ 	]*[a-f0-9]+:	9b df e0             	fstsw  %ax
[ 	]*[a-f0-9]+:	9b df e0             	fstsw  %ax
[ 	]*[a-f0-9]+:	66 0f be 00          	movsbw \(%rax\),%ax
[ 	]*[a-f0-9]+:	0f be 00             	movsbl \(%rax\),%eax
[ 	]*[a-f0-9]+:	48 0f be 00          	movsbq \(%rax\),%rax
[ 	]*[a-f0-9]+:	66 0f be 10          	movsbw \(%rax\),%dx
[ 	]*[a-f0-9]+:	0f be 10             	movsbl \(%rax\),%edx
[ 	]*[a-f0-9]+:	48 0f be 10          	movsbq \(%rax\),%rdx
[ 	]*[a-f0-9]+:	0f bf 10             	movswl \(%rax\),%edx
[ 	]*[a-f0-9]+:	48 0f bf 10          	movswq \(%rax\),%rdx
[ 	]*[a-f0-9]+:	48 63 10             	movslq \(%rax\),%rdx
[ 	]*[a-f0-9]+:	48 63 00             	movslq \(%rax\),%rax
[ 	]*[a-f0-9]+:	66 0f b6 00          	movzbw \(%rax\),%ax
[ 	]*[a-f0-9]+:	0f b6 00             	movzbl \(%rax\),%eax
[ 	]*[a-f0-9]+:	48 0f b6 00          	movzbq \(%rax\),%rax
[ 	]*[a-f0-9]+:	66 0f b6 10          	movzbw \(%rax\),%dx
[ 	]*[a-f0-9]+:	0f b6 10             	movzbl \(%rax\),%edx
[ 	]*[a-f0-9]+:	48 0f b6 10          	movzbq \(%rax\),%rdx
[ 	]*[a-f0-9]+:	0f b7 10             	movzwl \(%rax\),%edx
[ 	]*[a-f0-9]+:	48 0f b7 10          	movzwq \(%rax\),%rdx
[ 	]*[a-f0-9]+:	0f c3 00             	movnti %eax,\(%rax\)
[ 	]*[a-f0-9]+:	0f c3 00             	movnti %eax,\(%rax\)
[ 	]*[a-f0-9]+:	48 0f c3 00          	movnti %rax,\(%rax\)
[ 	]*[a-f0-9]+:	48 0f c3 00          	movnti %rax,\(%rax\)
[ 	]*[a-f0-9]+:	66 0f be 00          	movsbw \(%rax\),%ax
[ 	]*[a-f0-9]+:	0f be 00             	movsbl \(%rax\),%eax
[ 	]*[a-f0-9]+:	0f bf 00             	movswl \(%rax\),%eax
[ 	]*[a-f0-9]+:	48 0f bf 00          	movswq \(%rax\),%rax
[ 	]*[a-f0-9]+:	48 63 00             	movslq \(%rax\),%rax
[ 	]*[a-f0-9]+:	48 63 00             	movslq \(%rax\),%rax
[ 	]*[a-f0-9]+:	66 0f b6 00          	movzbw \(%rax\),%ax
[ 	]*[a-f0-9]+:	0f b6 00             	movzbl \(%rax\),%eax
[ 	]*[a-f0-9]+:	0f b7 00             	movzwl \(%rax\),%eax
[ 	]*[a-f0-9]+:	48 0f b7 00          	movzwq \(%rax\),%rax
[ 	]*[a-f0-9]+:	0f c3 00             	movnti %eax,\(%rax\)
[ 	]*[a-f0-9]+:	48 0f c3 00          	movnti %rax,\(%rax\)
#pass
@


1.19
log
@gas/
2009-04-20  Jan Beulich  <jbeulich@@novell.com>

	* Makefile.am: Add explicit dependency of tc-i386.o on
	tc-i386-intel.c.
	* Makefile.in: Likewise.
	* config/tc-i386.c (i386_finalize_immediate): Declare, broken
	out from i386_immediate.
	(i386_immediate): Slightly re-arrange, call
	i386_finalize_immediate.
	(i386_finalize_displacement): Declare, broken out from
	i386_displacement.
	(i386_displacement): Slightly re-arrange, call
	i386_finalize_displacement.
	(i386_intel_simplify, i386_intel_parse_name): Declare.
	(this_operand): Initialize to -1.
	(set_intel_syntax): Set expression rank for O_full_ptr.
	(md_assemble): Set this_operand back to -1 after parsing
	operands.
	(x86_cons): Negate intel_syntax to indicate state. Call
	i386_intel_simplify.
	(md_operand): Convert if to switch. Handle '[' for Intel
	syntax.
	(i386_intel_operand): Delete, including all helper functions
	and data.
	* config/tc-i386-intel.c: New file, all new code.
	* config/tc-i386.h (i386_operator): Declare.
	(md_operator): Define to i386_operator.
	(i386_need_index_operator): Declare.
	(md_need_index_operator): Define to i386_need_index_operator.
	(O_full_ptr): Define.

gas/testsuite/
2009-04-20  Jan Beulich  <jbeulich@@novell.com>

	* gas/i386/equ.s: Adjust.
	* gas/i386/equ.d: Remove reference to equ.e.
	* gas/i386/equ.e: Delete.
	* gas/i386/intel-expr.s: New.
	* gas/i386/intel-expr.d: New.
	* gas/i386/i386.exp: Run new test.
	* gas/i386/intel.s: Adjust.
	* gas/i386/intel.e: Remove no longer valid warning messages.
	* gas/i386/intel16.s: Adjust.
	* gas/i386/intel16.d: Remove reference to intel16.e.
	* gas/i386/intel16.e: Delete.
	* gas/i386/intelbad.s: Add more tests.
	* gas/i386/intelbad.l: Adjust.
	* gas/i386/intelok.s: Remove now unneeded equates. Add more
	tests.
	* gas/i386/intelok.d: Remove reference to intelok.e. Adjust.
	* gas/i386/intelok.e: Delete.
	* gas/i386/x86_64.s: Adjust.
	* gas/i386/x86_64.d: Remove reference to x86_64.e.
	* gas/i386/x86_64.e: Delete.
@
text
@d48 2
a49 2
[ 	]*[a-f0-9]+:	48 b8 88 77 66 55 44 33 22 11 	mov    \$0x1122334455667788,%rax
[ 	]*[a-f0-9]+:	49 b8 88 77 66 55 44 33 22 11 	mov    \$0x1122334455667788,%r8
d95 6
a100 6
[ 	]*[a-f0-9]+:	a0 11 22 33 44 55 66 77 88 	mov    0x8877665544332211,%al
[ 	]*[a-f0-9]+:	a1 11 22 33 44 55 66 77 88 	mov    0x8877665544332211,%eax
[ 	]*[a-f0-9]+:	a2 11 22 33 44 55 66 77 88 	mov    %al,0x8877665544332211
[ 	]*[a-f0-9]+:	a3 11 22 33 44 55 66 77 88 	mov    %eax,0x8877665544332211
[ 	]*[a-f0-9]+:	48 a1 11 22 33 44 55 66 77 88 	mov    0x8877665544332211,%rax
[ 	]*[a-f0-9]+:	48 a3 11 22 33 44 55 66 77 88 	mov    %rax,0x8877665544332211
d112 1
a112 1
[ 	]*[a-f0-9]+:	a1 00 00 00 00 00 00 00 00 	mov    0x0,%eax
d120 1
a120 1
[ 	]*[a-f0-9]+:	a1 00 00 00 00 00 00 00 00 	mov    0x0,%eax
d126 16
a141 16
[ 	]*[a-f0-9]+:	a0 11 22 33 44 55 66 77 88 	mov    0x8877665544332211,%al
[ 	]*[a-f0-9]+:	66 a1 11 22 33 44 55 66 77 88 	mov    0x8877665544332211,%ax
[ 	]*[a-f0-9]+:	a1 11 22 33 44 55 66 77 88 	mov    0x8877665544332211,%eax
[ 	]*[a-f0-9]+:	48 a1 11 22 33 44 55 66 77 88 	mov    0x8877665544332211,%rax
[ 	]*[a-f0-9]+:	a2 11 22 33 44 55 66 77 88 	mov    %al,0x8877665544332211
[ 	]*[a-f0-9]+:	66 a3 11 22 33 44 55 66 77 88 	mov    %ax,0x8877665544332211
[ 	]*[a-f0-9]+:	a3 11 22 33 44 55 66 77 88 	mov    %eax,0x8877665544332211
[ 	]*[a-f0-9]+:	48 a3 11 22 33 44 55 66 77 88 	mov    %rax,0x8877665544332211
[ 	]*[a-f0-9]+:	a0 11 22 33 44 55 66 77 88 	mov    0x8877665544332211,%al
[ 	]*[a-f0-9]+:	66 a1 11 22 33 44 55 66 77 88 	mov    0x8877665544332211,%ax
[ 	]*[a-f0-9]+:	a1 11 22 33 44 55 66 77 88 	mov    0x8877665544332211,%eax
[ 	]*[a-f0-9]+:	48 a1 11 22 33 44 55 66 77 88 	mov    0x8877665544332211,%rax
[ 	]*[a-f0-9]+:	a2 11 22 33 44 55 66 77 88 	mov    %al,0x8877665544332211
[ 	]*[a-f0-9]+:	66 a3 11 22 33 44 55 66 77 88 	mov    %ax,0x8877665544332211
[ 	]*[a-f0-9]+:	a3 11 22 33 44 55 66 77 88 	mov    %eax,0x8877665544332211
[ 	]*[a-f0-9]+:	48 a3 11 22 33 44 55 66 77 88 	mov    %rax,0x8877665544332211
@


1.18
log
@gas/

2008-01-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (md_assemble): Also zap movzx and movsx
	suffix for AT&T syntax.

gas/testsuite/

2008-01-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/i386.s: Add more tests for movsx and movzx.
	* gas/i386/x86_64.s: Likewise.

	* gas/i386/inval.s: Remove tests for movsxw and movzxw.

	* gas/i386/x86-64-inval.s: Remove tests for movsxb, movsxw,
	movsxl, movzxb and movzxw.

	* gas/i386/i386.d: Updated.
	* gas/i386/inval.l: Likewise.
	* gas/i386/x86_64.d: Likewise.
	* gas/i386/x86-64-inval.l: Likewise.

opcodes/

2008-01-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-opc.tbl: Put back 16bit movsx/movzx for AT&T syntax.
	* i386-tbl.h: Regenerated.
@
text
@a3 1
#stderr: x86_64.e
@


1.17
log
@gas/

2008-01-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (match_reg_size): New.
	(match_mem_size): Likewise.
	(operand_size_match): Likewise.
	(operand_type_match): Also clear all size fields.
	(match_template): Skip Intel syntax when in AT&T syntax.
	Call operand_size_match to check operand size.
	(i386_att_operand): Set the mem field to 1 for memory
	operand.
	(i386_intel_operand): Likewise.

gas/testsuite/

2008-01-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/i386.s: Add tests for movsx, movzx and movnti.
	* gas/i386/inval.s: Likewise.
	* gas/i386/x86_64.s: Likewise.
	* gas/i386/x86-64-inval.s: Likewise.

	* gas/i386/i386.d: Updated.
	* gas/i386/inval.l: Likewise.
	* gas/i386/x86_64.d: Likewise.
	* gas/i386/x86-64-inval.l: Likewise.

opcodes/

2008-01-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-gen.c (opcode_modifiers): Add IntelSyntax.
	(operand_types): Add Mem.

	* i386-opc.h (IntelSyntax): New.
	* i386-opc.h (Mem): New.
	(Byte): Updated.
	(Opcode_Modifier_Max): Updated.
	(i386_opcode_modifier): Add intelsyntax.
	(i386_operand_type): Add mem.

	* i386-opc.tbl: Remove Reg16 from movnti.  Add sizes to more
	instructions.

	* i386-reg.tbl: Add size for accumulator.

	* i386-init.h: Regenerated.
	* i386-tbl.h: Likewise.
@
text
@d161 6
d175 5
d191 6
d202 5
d227 6
d237 5
@


1.16
log
@gas/testsuite/

2008-01-12  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/5534
	* gas/i386/i386.s: Add tests for fnstsw and fstsw.
	* gas/i386/inval.s: Likewise.
	* gas/i386/x86_64.s: Likewise.

	* gas/i386/intel.s: Use word instead of dword on ss.

	* gas/i386/x86-64-inval.s: Add tests for fnstsw, fstsw, in
	and out.

	* gas/i386/prefix.s: Remove invalid fstsw.

	* gas/i386/inval.l: Updated.
	* gas/i386/intelbad.l: Likewise.
	* gas/i386/i386.d: Likewise.
	* gas/i386/x86_64.d: Likewise.
	* gas/i386/x86-64-inval.l: Likewise.
	* gas/i386/prefix.d: Updated.

gas/

2008-01-12  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/5534
	* config/tc-i386.c (_i386_insn): Update comment.
	(operand_type_match): Also clear unspecified.
	(operand_type_register_match): Likewise.
	(parse_operands): Initialize unspecified.
	(i386_intel_operand): Likewise.
	(match_template): Check memory and accumulator operand size.
	(i386_att_operand): Clear unspecified on register operand.
	(intel_e11): Likewise.
	(intel_e09): Set operand size and clean unspecified for
	"XXX PTR".

opcodes/

2008-01-12  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/5534
	* i386-gen.c (operand_type_init): Add Dword to
	OPERAND_TYPE_ACC32.  Add Qword to OPERAND_TYPE_ACC64.
	(opcode_modifiers): Remove CheckSize, Byte, Word, Dword,
	Qword and Xmmword.
	(operand_types): Add Byte, Word, Dword, Fword, Qword, Tbyte,
	Xmmword, Unspecified and Anysize.
	(set_bitfield): Make Mmword an alias of Qword.  Make Oword
	an alias of Xmmword.

	* i386-opc.h (CheckSize): Removed.
	(Byte): Updated.
	(Word): Likewise.
	(Dword): Likewise.
	(Qword): Likewise.
	(Xmmword): Likewise.
	(FWait): Updated.
	(OTMax): Likewise.
	(i386_opcode_modifier): Remove checksize, byte, word, dword,
	qword and xmmword.
	(Fword): New.
	(TBYTE): Likewise.
	(Unspecified): Likewise.
	(Anysize): Likewise.
	(i386_operand_type): Add byte, word, dword, fword, qword,
	tbyte xmmword, unspecified and anysize.

	* i386-opc.tbl: Updated to use Byte, Word, Dword, Fword, Qword,
	Tbyte, Xmmword, Unspecified and Anysize.

	* i386-reg.tbl: Add size for accumulator.

	* i386-init.h: Regenerated.
	* i386-tbl.h: Likewise.
@
text
@d202 23
@


1.15
log
@gas/testsuite/

2008-01-02  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/i386.s: Add tests for movq.
	* gas/i386/x86_64.s: Likewise.

	* gas/i386/i386.d Updated.
	* gas/i386/x86_64.d: Likewise.

opcodes/

2008-01-02  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-opc.h: Update comments.
@
text
@d194 8
@


1.14
log
@gas/

2007-11-01  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (process_suffix): Check addrprefixop0 to
	see if the address size override prefix changes the size of the
	first operand.
	(check_byte_reg): Don't warn if byteokintel is set.
	(check_long_reg): Set i.suffix to QWORD_MNEM_SUFFIX if toqword
	is set.
	(check_qword_reg): Set i.suffix to LONG_MNEM_SUFFIX if todword
	is set.

gas/testsuite/

2007-11-01  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/i386.d: New.
	* gas/i386/i386.s: Likewise.

	* gas/i386/i386.exp: Run i386.

	* gas/i386/x86_64.s: Add tests for movsx, movsbl, movsbq,
	movsbw, movswl, movswq, movzx, movzb, movzbl, movzbq,
	movzbw, movzwl and movzwq.
	* gas/i386/x86_64.d: Updated.

opcodes/

2007-11-01  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-gen.c (opcode_modifiers): Add ByteOkIntel, ToDword,
	ToQword and AddrPrefixOp0.

	* i386-opc.h (ByteOkIntel): New.
	(ToDword): Likewise.
	(ToQword): Likewise.
	(AddrPrefixOp0): Likewise.
	(IsPrefix): Updated.
	(i386_opcode_modifier): Add byteokintel, todword, toqword
	and addrprefixop0.

	* i386-opc.tbl (cvtss2si): Add ToQword.
	(cvttss2si): Likewise.
	(cvtsd2si): Add ToDword.
	(cvttsd2si): Likewise.
	(monitor): Add AddrPrefixOp0.
	(invlpga): Likewise.
	(vmload): Likewise.
	(vmrun): Likewise.
	(vmsave): Likewise.
	(pextrb): Add ByteOkIntel.
	(pinsrb): Likewise.
	* i386-tbl.h: Regenerated.
@
text
@d190 4
a193 1
	...
@


1.13
log
@gas/testsuite/

2007-04-26  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/4430
	* gas/i386/amd.d: Updated.
	* gas/i386/immed32.d: Likewise.
	* gas/i386/intel.d: Likewise.
	* gas/i386/intel16.d: Likewise.
	* gas/i386/intelok.d: Likewise.
	* gas/i386/jump16.d: Likewise.
	* gas/i386/naked.d: Likewise.
	* gas/i386/opcode-suffix.d: Likewise.
	* gas/i386/opcode.d: Likewise.
	* gas/i386/prescott.d: Likewise.
	* gas/i386/ssemmx2.d: Likewise.
	* gas/i386/tlsd.d: Likewise.
	* gas/i386/tlspic.d: Likewise.
	* gas/i386/x86-64-addr32.d: Likewise.
	* gas/i386/x86-64-prescott.d: Likewise.
	* gas/i386/x86-64-rip.d: Likewise.
	* gas/i386/x86_64.d: Likewise.

ld/testsuite/

2007-04-26  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/4430
	* ld-i386/tlsbin.dd: Updated.
	* ld-i386/tlsbindesc.dd: Likewise
	* ld-i386/tlsdesc.dd: Likewise
	* ld-i386/tlsgdesc.dd: Likewise
	* ld-i386/tlsnopic.dd: Likewise
	* ld-i386/tlspic.dd: Likewise
	* ld-x86-64/tlsbin.dd: Likewise
	* ld-x86-64/tlsbindesc.dd: Likewise
	* ld-x86-64/tlsdesc.dd: Likewise
	* ld-x86-64/tlsgdesc.dd: Likewise
	* ld-x86-64/tlspic.dd: Likewise

opcodes/

2007-04-26  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/4430
	* i386-dis.c (print_displacement): New.
	(OP_E): Call print_displacement instead of print_operand_value
	to output displacement when either base or index exist.  Print
	the explicit zero displacement in 16bit mode.
@
text
@d3 1
a3 1
#name: i386 x86_64
d10 97
a106 97
[ 	]+0:	01 ca[ 	]+add[ 	]+%ecx,%edx
[ 	]+2:	44 01 ca[ 	]+add[ 	]+%r9d,%edx
[ 	]+5:	41 01 ca[ 	]+add[ 	]+%ecx,%r10d
[ 	]+8:	48 01 ca[ 	]+add[ 	]+%rcx,%rdx
[ 	]+b:	4d 01 ca[ 	]+add[ 	]+%r9,%r10
[ 	]+e:	41 01 c0[ 	]+add[ 	]+%eax,%r8d
[ 	]+11:	66 41 01 c0[ 	]+add[ 	]+%ax,%r8w
[ 	]+15:	49 01 c0[ 	]+add[ 	]+%rax,%r8
[ 	]+18:	05 11 22 33 44[ 	]+add[ 	]+\$0x44332211,%eax
[ 	]+1d:	48 05 11 22 33 f4[ 	]+add[ 	]+\$0xf+4332211,%rax
[ 	]+23:	66 05 33 44[ 	]+add[ 	]+\$0x4433,%ax
[ 	]+27:	48 05 11 22 33 44[ 	]+add[ 	]+\$0x44332211,%rax
[ 	]+2d:	00 ca[ 	]+add[ 	]+%cl,%dl
[ 	]+2f:	00 f7[ 	]+add[ 	]+%dh,%bh
[ 	]+31:	40 00 f7[ 	]+add[ 	]+%sil,%dil
[ 	]+34:	41 00 f7[ 	]+add[ 	]+%sil,%r15b
[ 	]+37:	44 00 f7[ 	]+add[ 	]+%r14b,%dil
[ 	]+3a:	45 00 f7[ 	]+add[ 	]+%r14b,%r15b
[ 	]+3d:	50[ 	]+push[ 	]+%rax
[ 	]+3e:	41 50[ 	]+push[ 	]+%r8
[ 	]+40:	41 59[ 	]+pop[ 	]+%r9
[ 	]+42:	04 11[ 	]+add[ 	]+\$0x11,%al
[ 	]+44:	80 c4 11[ 	]+add[ 	]+\$0x11,%ah
[ 	]+47:	40 80 c4 11[ 	]+add[ 	]+\$0x11,%spl
[ 	]+4b:	41 80 c0 11[ 	]+add[ 	]+\$0x11,%r8b
[ 	]+4f:	41 80 c4 11[ 	]+add[ 	]+\$0x11,%r12b
[ 	]+53:	0f 20 c0[ 	]+mov[ 	]+%cr0,%rax
[ 	]+56:	41 0f 20 c0[ 	]+mov[ 	]+%cr0,%r8
[ 	]+5a:	44 0f 20 c0[ 	]+mov[ 	]+%cr8,%rax
[ 	]+5e:	44 0f 22 c0[ 	]+mov[ 	]+%rax,%cr8
[ 	]+62:	f3 48 a5[ 	]+rep movsq %ds:\(%rsi\),%es:\(%rdi\)
[ 	]+65:	66 f3 a5[ 	]+rep movsw %ds:\(%rsi\),%es:\(%rdi\)
[ 	]+68:	f3 48 a5[ 	]+rep movsq %ds:\(%rsi\),%es:\(%rdi\)
[ 	]+6b:	b0 11[ 	]+mov[ 	]+\$0x11,%al
[ 	]+6d:	b4 11[ 	]+mov[ 	]+\$0x11,%ah
[ 	]+6f:	40 b4 11[ 	]+mov[ 	]+\$0x11,%spl
[ 	]+72:	41 b4 11[ 	]+mov[ 	]+\$0x11,%r12b
[ 	]+75:	b8 44 33 22 11[ 	]+mov[ 	]+\$0x11223344,%eax
[ 	]+7a:	41 b8 44 33 22 11[ 	]+mov[ 	]+\$0x11223344,%r8d
[ 	]+80:	48 b8 88 77 66 55 44 33 22 11 	mov[ 	]+\$0x1122334455667788,%rax
[ 	]+8a:	49 b8 88 77 66 55 44 33 22 11 	mov[ 	]+\$0x1122334455667788,%r8
[ 	]+94:	03 00[ 	]+add[ 	]+\(%rax\),%eax
[ 	]+96:	41 03 00[ 	]+add[ 	]+\(%r8\),%eax
[ 	]+99:	45 03 00[ 	]+add[ 	]+\(%r8\),%r8d
[ 	]+9c:	49 03 00[ 	]+add[ 	]+\(%r8\),%rax
[ 	]+9f:	03 05 22 22 22 22[ 	]+add[ 	]+0x22222222\(%rip\),%eax.*
[ 	]+a5:	03 45 00[ 	]+add[ 	]+0x0\(%rbp\),%eax
[ 	]+a8:	03 04 25 22 22 22 22 	add[ 	]+0x22222222,%eax
[ 	]+af:	41 03 45 00[ 	]+add[ 	]+0x0\(%r13\),%eax
[ 	]+b3:	03 04 80[ 	]+add[ 	]+\(%rax,%rax,4\),%eax
[ 	]+b6:	41 03 04 80[ 	]+add[ 	]+\(%r8,%rax,4\),%eax
[ 	]+ba:	45 03 04 80[ 	]+add[ 	]+\(%r8,%rax,4\),%r8d
[ 	]+be:	43 03 04 80[ 	]+add[ 	]+\(%r8,%r8,4\),%eax
[ 	]+c2:	46 01 04 81[ 	]+add[ 	]+%r8d,\(%rcx,%r8,4\)
[ 	]+c6:	03 14 c0[ 	]+add[ 	]+\(%rax,%rax,8\),%edx
[ 	]+c9:	03 14 c8[ 	]+add[ 	]+\(%rax,%rcx,8\),%edx
[ 	]+cc:	03 14 d0[ 	]+add[ 	]+\(%rax,%rdx,8\),%edx
[ 	]+cf:	03 14 d8[ 	]+add[ 	]+\(%rax,%rbx,8\),%edx
[ 	]+d2:	03 10[ 	]+add[ 	]+\(%rax\),%edx
[ 	]+d4:	03 14 e8[ 	]+add[ 	]+\(%rax,%rbp,8\),%edx
[ 	]+d7:	03 14 f0[ 	]+add[ 	]+\(%rax,%rsi,8\),%edx
[ 	]+da:	03 14 f8[ 	]+add[ 	]+\(%rax,%rdi,8\),%edx
[ 	]+dd:	42 03 14 c0[ 	]+add[ 	]+\(%rax,%r8,8\),%edx
[ 	]+e1:	42 03 14 c8[ 	]+add[ 	]+\(%rax,%r9,8\),%edx
[ 	]+e5:	42 03 14 d0[ 	]+add[ 	]+\(%rax,%r10,8\),%edx
[ 	]+e9:	42 03 14 d8[ 	]+add[ 	]+\(%rax,%r11,8\),%edx
[ 	]+ed:	42 03 14 e0[ 	]+add[ 	]+\(%rax,%r12,8\),%edx
[ 	]+f1:	42 03 14 e8[ 	]+add[ 	]+\(%rax,%r13,8\),%edx
[ 	]+f5:	42 03 14 f0[ 	]+add[ 	]+\(%rax,%r14,8\),%edx
[ 	]+f9:	42 03 14 f8[ 	]+add[ 	]+\(%rax,%r15,8\),%edx
[ 	]+fd:	83 c1 11[ 	]+add[ 	]+\$0x11,%ecx
 100:	83 00 11[ 	]+addl[ 	]+\$0x11,\(%rax\)
 103:	48 83 00 11[ 	]+addq[ 	]+\$0x11,\(%rax\)
 107:	41 83 00 11[ 	]+addl[ 	]+\$0x11,\(%r8\)
 10b:	83 04 81 11[ 	]+addl[ 	]+\$0x11,\(%rcx,%rax,4\)
 10f:	41 83 04 81 11[ 	]+addl[ 	]+\$0x11,\(%r9,%rax,4\)
 114:	42 83 04 81 11[ 	]+addl[ 	]+\$0x11,\(%rcx,%r8,4\)
 119:	83 05 22 22 22 22 33 	addl[ 	]+\$0x33,0x22222222\(%rip\).*
 120:	48 83 05 22 22 22 22 33 	addq[ 	]+\$0x33,0x22222222\(%rip\).*
 128:	81 05 22 22 22 22 33 33 33 33 	addl[ 	]+\$0x33333333,0x22222222\(%rip\).*
 132:	48 81 05 22 22 22 22 33 33 33 33 	addq[ 	]+\$0x33333333,0x22222222\(%rip\).*
 13d:	83 04 c5 22 22 22 22 33 	addl[ 	]+\$0x33,0x22222222\(,%rax,8\)
 145:	83 80 22 22 22 22 33 	addl[ 	]+\$0x33,0x22222222\(%rax\)
 14c:	83 80 22 22 22 22 33 	addl[ 	]+\$0x33,0x22222222\(%rax\)
 153:	41 83 04 e8 33[ 	]+addl[ 	]+\$0x33,\(%r8,%rbp,8\)
 158:	83 04 25 22 22 22 22 33 	addl[ 	]+\$0x33,0x22222222
 160:	a0 11 22 33 44 55 66 77 88 	mov[ 	]+0x8877665544332211,%al
 169:	a1 11 22 33 44 55 66 77 88 	mov[ 	]+0x8877665544332211,%eax
 172:	a2 11 22 33 44 55 66 77 88 	mov[ 	]+%al,0x8877665544332211
 17b:	a3 11 22 33 44 55 66 77 88 	mov[ 	]+%eax,0x8877665544332211
 184:	48 a1 11 22 33 44 55 66 77 88 	mov[ 	]+0x8877665544332211,%rax
 18e:	48 a3 11 22 33 44 55 66 77 88 	mov[ 	]+%rax,0x8877665544332211
 198:	48 99[ 	]+cqto[ 	]+
 19a:	48 98[ 	]+cltq[ 	]+
 19c:	48 63 c0[ 	]+movslq %eax,%rax
 19f:	48 0f bf c0[ 	]+movswq %ax,%rax
 1a3:	48 0f be c0[ 	]+movsbq %al,%rax
d109 16
a124 16
 1a7:	b0 00[ 	]+mov[ 	]+\$0x0,%al
 1a9:	66 b8 00 00[ 	]+mov[ 	]+\$0x0,%ax
 1ad:	b8 00 00 00 00[ 	]+mov[ 	]+\$0x0,%eax
 1b2:	48 c7 c0 00 00 00 00 	mov[ 	]+\$0x0,%rax
 1b9:	a1 00 00 00 00 00 00 00 00 	mov[ 	]+0x0,%eax
 1c2:	8b 04 25 00 00 00 00 	mov[ 	]+0x0,%eax
 1c9:	8b 80 00 00 00 00[ 	]+mov[ 	]+0x0\(%rax\),%eax
 1cf:	8b 05 00 00 00 00[ 	]+mov[ 	]+0x0\(%rip\),%eax.*
 1d5:	b0 00[ 	]+mov[ 	]+\$0x0,%al
 1d7:	66 b8 00 00[ 	]+mov[ 	]+\$0x0,%ax
 1db:	b8 00 00 00 00[ 	]+mov[ 	]+\$0x0,%eax
 1e0:	48 c7 c0 00 00 00 00 	mov[ 	]+\$0x0,%rax
 1e7:	a1 00 00 00 00 00 00 00 00 	mov[ 	]+0x0,%eax
 1f0:	8b 04 25 00 00 00 00 	mov[ 	]+0x0,%eax
 1f7:	8b 80 00 00 00 00[ 	]+mov[ 	]+0x0\(%rax\),%eax
 1fd:	8b 05 00 00 00 00[ 	]+mov[ 	]+0x0\(%rip\),%eax.*
d127 64
a190 34
 203:	a0 11 22 33 44 55 66 77 88 	mov[ 	]+0x8877665544332211,%al
 20c:	66 a1 11 22 33 44 55 66 77 88 	mov[ 	]+0x8877665544332211,%ax
 216:	a1 11 22 33 44 55 66 77 88 	mov[ 	]+0x8877665544332211,%eax
 21f:	48 a1 11 22 33 44 55 66 77 88 	mov[ 	]+0x8877665544332211,%rax
 229:	a2 11 22 33 44 55 66 77 88 	mov[ 	]+%al,0x8877665544332211
 232:	66 a3 11 22 33 44 55 66 77 88 	mov[ 	]+%ax,0x8877665544332211
 23c:	a3 11 22 33 44 55 66 77 88 	mov[ 	]+%eax,0x8877665544332211
 245:	48 a3 11 22 33 44 55 66 77 88 	mov[ 	]+%rax,0x8877665544332211
 24f:	a0 11 22 33 44 55 66 77 88 	mov[ 	]+0x8877665544332211,%al
 258:	66 a1 11 22 33 44 55 66 77 88 	mov[ 	]+0x8877665544332211,%ax
 262:	a1 11 22 33 44 55 66 77 88 	mov[ 	]+0x8877665544332211,%eax
 26b:	48 a1 11 22 33 44 55 66 77 88 	mov[ 	]+0x8877665544332211,%rax
 275:	a2 11 22 33 44 55 66 77 88 	mov[ 	]+%al,0x8877665544332211
 27e:	66 a3 11 22 33 44 55 66 77 88 	mov[ 	]+%ax,0x8877665544332211
 288:	a3 11 22 33 44 55 66 77 88 	mov[ 	]+%eax,0x8877665544332211
 291:	48 a3 11 22 33 44 55 66 77 88 	mov[ 	]+%rax,0x8877665544332211
 29b:	8a 04 25 11 22 33 ff 	mov[ 	]+0xffffffffff332211,%al
 2a2:	66 8b 04 25 11 22 33 ff 	mov[ 	]+0xffffffffff332211,%ax
 2aa:	8b 04 25 11 22 33 ff 	mov[ 	]+0xffffffffff332211,%eax
 2b1:	48 8b 04 25 11 22 33 ff 	mov[ 	]+0xffffffffff332211,%rax
 2b9:	88 04 25 11 22 33 ff 	mov[ 	]+%al,0xffffffffff332211
 2c0:	66 89 04 25 11 22 33 ff 	mov[ 	]+%ax,0xffffffffff332211
 2c8:	89 04 25 11 22 33 ff 	mov[ 	]+%eax,0xffffffffff332211
 2cf:	48 89 04 25 11 22 33 ff 	mov[ 	]+%rax,0xffffffffff332211
 2d7:	8a 04 25 11 22 33 ff 	mov[ 	]+0xffffffffff332211,%al
 2de:	66 8b 04 25 11 22 33 ff 	mov[ 	]+0xffffffffff332211,%ax
 2e6:	8b 04 25 11 22 33 ff 	mov[ 	]+0xffffffffff332211,%eax
 2ed:	48 8b 04 25 11 22 33 ff 	mov[ 	]+0xffffffffff332211,%rax
 2f5:	88 04 25 11 22 33 ff 	mov[ 	]+%al,0xffffffffff332211
 2fc:	66 89 04 25 11 22 33 ff 	mov[ 	]+%ax,0xffffffffff332211
 304:	89 04 25 11 22 33 ff 	mov[ 	]+%eax,0xffffffffff332211
 30b:	48 89 04 25 11 22 33 ff 	mov[ 	]+%rax,0xffffffffff332211
 313:	48 0f c7 08[ 	]+cmpxchg16b \(%rax\)
 317:	48 0f c7 08[ 	]+cmpxchg16b \(%rax\)
@


1.12
log
@gas/testsuite/

2006-12-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/x86-64-inval.s: Add cmpxchg16b.
	* gas/i386/x86_64.s: Likewise.
	* gas/i386/x86-64-inval.l: Updated.
	* gas/i386/x86_64.d: Likewise.

opcodes/

2006-12-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-dis.c (CMPXCHG8B_Fixup): New.
	(grps): Use CMPXCHG8B_Fixup for cmpxchg8b.
@
text
@d55 1
a55 1
[ 	]+9f:	03 05 22 22 22 22[ 	]+add[ 	]+572662306\(%rip\),%eax.*
d87 4
a90 4
 119:	83 05 22 22 22 22 33 	addl[ 	]+\$0x33,572662306\(%rip\).*
 120:	48 83 05 22 22 22 22 33 	addq[ 	]+\$0x33,572662306\(%rip\).*
 128:	81 05 22 22 22 22 33 33 33 33 	addl[ 	]+\$0x33333333,572662306\(%rip\).*
 132:	48 81 05 22 22 22 22 33 33 33 33 	addq[ 	]+\$0x33333333,572662306\(%rip\).*
d116 1
a116 1
 1cf:	8b 05 00 00 00 00[ 	]+mov[ 	]+0\(%rip\),%eax.*
d124 1
a124 1
 1fd:	8b 05 00 00 00 00[ 	]+mov[ 	]+0\(%rip\),%eax.*
@


1.11
log
@gas/

2006-12-06  H.J. Lu <hjl@@gnu.org>

	* config/tc-i386.h: Change the prefix order to SEG_PREFIX,
	ADDR_PREFIX, DATA_PREFIX, LOCKREP_PREFIX.

gas/testsuite/

2006-12-06  H.J. Lu <hjl@@gnu.org>

	* gas/i386/amdfam10.d: Updated for operand/address-size override
	prefix position change.
	* gas/i386/naked.d: Likewise.
	* gas/i386/rep-suffix.d: Likewise.
	* gas/i386/rep.d: Likewise.
	* gas/i386/white.l: Likewise.
	* gas/i386/x86-64-amdfam10.d: Likewise.
	* gas/i386/x86-64-rep-suffix.d: Likewise.
	* gas/i386/x86-64-rep.d: Likewise.
	* gas/i386/x86_64.d: Likewise.
@
text
@d159 2
@


1.10
log
@Add x86_64-mingw64 target
@
text
@d41 1
a41 1
[ 	]+65:	f3 66 a5[ 	]+rep movsw %ds:\(%rsi\),%es:\(%rdi\)
@


1.9
log
@gas/testsuite/

2006-03-07  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/2428
	* gas/i386/i386.exp: Add rep, rep-suffix, x86-64-rep and
	x86-64-rep-suffix.

	* gas/i386/naked.d: Replace repz with rep.
	* gas/i386/x86_64.d: Likewise.

	* gas/i386/rep-suffix.d: New file.
	* gas/i386/rep-suffix.s: Likewise.
	* gas/i386/rep.d: Likewise.
	* gas/i386/rep.s: Likewise.
	* gas/i386/x86-64-rep-suffix.d: Likewise.
	* gas/i386/x86-64-rep-suffix.s: Likewise.
	* gas/i386/x86-64-rep.d: Likewise.
	* gas/i386/x86-64-rep.s: Likewise.

opcodes/

2006-03-07  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/2428
	* i386-dis.c (REP_Fixup): New function.
	(AL): Remove duplicate.
	(Xbr): New.
	(Xvr): Likewise.
	(Ybr): Likewise.
	(Yvr): Likewise.
	(indirDXr): Likewise.
	(ALr): Likewise.
	(eAXr): Likewise.
	(dis386): Updated entries of ins, outs, movs, lods and stos.
@
text
@d9 1
a9 1
0+ <bar-0x1a7>:
@


1.8
log
@gas/

2005-07-10  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (optimize_disp): Optimize signed 32bit
	displacements.

testsuite/gas/

2005-07-10  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386/x86_64.s: Add absolute siged 32bit addressing tests for
	mov.
	* i386/x86_64.d: Updated.
@
text
@d40 3
a42 3
[ 	]+62:	f3 48 a5[ 	]+repz movsq %ds:\(%rsi\),%es:\(%rdi\)
[ 	]+65:	f3 66 a5[ 	]+repz movsw %ds:\(%rsi\),%es:\(%rdi\)
[ 	]+68:	f3 48 a5[ 	]+repz movsq %ds:\(%rsi\),%es:\(%rdi\)
@


1.7
log
@gas/

2005-06-20  H.J. Lu  <hongjiu.lu@@intel.com>

	PR 1013
	* config/tc-i386.c (md_assemble): Don't call optimize_disp on
	movabs.
	(optimize_disp): Optimize only if possible. Don't use 64bit
	displacement on non-constants and do same on constants if
	possible.

gas/testsuite/

2005-06-20  H.J. Lu  <hongjiu.lu@@intel.com>

	PR 1013
	* i386/x86_64.s: Add absolute 64bit addressing tests for mov.
	* i386/x86_64.s: Updated.

include/opcode/

2005-06-20  H.J. Lu  <hongjiu.lu@@intel.com>

	PR 1013
	* i386.h (i386_optab): Update comments for 64bit addressing on
	mov. Allow 64bit addressing for mov and movq.
@
text
@d143 16
@


1.6
log
@gas/
2005-03-17  Jan Beulich  <jbeulich@@novell.com>

	* config/tc-i386.c (i386_scale): Beautify error message.
	(Intel syntax comments): Update.
	(struct intel_parser_s): Add fields in_offset, in_bracket, and
	next_operand.
	(intel_e04_1, intel_e05_1, intel_e05_1, intel_e09_1, intel_e10_1):
	Remove declarations.
	(intel_bracket_expr): Declare.
	(i386_intel_operand): Initialize new intel_parser fields. Wrap most
	of the function body in a loop allowing to split an operand into two.
	Replace calls to malloc and checks of it returning non-NULL with
	calls to xmalloc/xstrdup.
	(intel_expr): SHORT no longer handled here. Add comment indicating
	comparison ops need implementation.
	(intel_e04, intel_e04_1): Combine, replace recursion with loop.
	Check right operand of - does not specify a register when parsing
	the address of a memory reference.
	(intel_e05, intel_e05_1): Combine, replace recursion with loop.
	Check operands do not specify a register when parsing the address of
	a memory reference.
	(intel_e06, intel_e06_1): Likewise.
	(intel_e09, intel_e09_1): Combine, replace recursion with loop. Also
	handle SHORT as well as unary + and -. Don't accept : except for
	segment overrides or in direct far jump/call insns.
	(intel_brack_expr): New.
	(intel_e10, intel_e10_1): Combine, replace recursion with loop. Use
	intel_brack_expr.
	(intel_e11): Replace chain of if/else-if by switch, alloing fall-
	through in certain cases. Use intel_brack_expr. Add new diagnostics.
	Allow symbolic constants as register scale value.
	(intel_get_token): Replace call to malloc and check of return value
	with call to xmalloc. Change handling for FLAT to match MASM's.
	(intel_putback_token): Don't try to back up/free current token if
	that is T_NIL.

gas/testsuite/
2005-03-17  Jan Beulich  <jbeulich@@novell.com>

	* gas/i386/intel.d: Add stderr directive.
	* gas/i386/intel.e: New.
	* gas/i386/intel16.d: Add stderr directive. Adjust for changed
	source.
	* gas/i386/intel16.e: New.
	* gas/i386/intel16.s: Add instances of addressing forms with base
	and index specified in reverse order.
	* gas/i386/intelbad.l: Adjust for changed source.
	* gas/i386/intelbad.s: Add more operand forms to check.
	* gas/i386/intelok.d: Remove -r from objdump options. Add stderr
	directive. Adjust for changed source.
	* gas/i386/intelok.e: New.
	* gas/i386/intelok.s: Define MASM constants byte, word, etc. Add
	more operand forms to check.
	* gas/i386/x86_64.d: Add stderr directive.
	* gas/i386/x86_64.e: New.
	* gas/i386/x86_64.s: Adjust for parser changes.
@
text
@d125 18
@


1.5
log
@	* gas/i386/intel16.d: Ignore trailing text with #pass.
	* gas/i386/intelok.d: Likewise.
	* gas/i386/prefix.d: Likewise.
	* gas/i386/sub.d: Likewise.
	* gas/i386/padlock.d: Likewise.
	* gas/i386/x86_64.d: Likewise.
@
text
@d4 1
@


1.4
log
@gas/
2004-11-04 Jan Beulich <jbeulich@@novell.com>

	* config/tc-i386.c (set_intel_syntax): Allow % in symbol names when
	intel syntax and no register prefix, allow $ in symbol names when
	intel syntax.
	(set_16bit_gcc_code_flag): Replace literal 'l' by LONG_MNEM_SUFFIX.
	(intel_float_operand): Add fourth return value indicating math control
	operations. Make classification more precise.
	(md_assemble): Complain if memory operand of mov[sz]x has no size
	specified.
	(parse_insn): Translate word operands to floating point instructions
	operating on integers as well as control instructions to short ones
	as expected by AT&T syntax. Translate 'd' suffix to short one only for
	floating point instructions operating on non-integer operands.
	(match_template): Remove fldcw special case. Adjust q-suffix handling
	to permit it on fild/fistp/fisttp in AT&T mode.
	(process_suffix): Don't guess DefaultSize insns' suffix from
	stackop_size for certain floating point control instructions. Guess
	suffix for branch and [ls][gi]dt based on flag_code. Split error
	messages for Intel and AT&T syntax, and make the condition more strict
	for the former. Adjust suppressing of generation of operand size
	overrides.
	(intel parser): Allow the full set of MASM operators. Add FWORD, TBYTE,
	OWORD, and XMMWORD operand size specifiers (TBYTE replaces XWORD). Add
	more error checking.
	* config/tc-i386.h (BYTE_PTR WORD_PTR DWORD_PTR QWORD_PTR XWORD_PTR
	SHORT OFFSET_FLAT FLAT NONE_FOUND): Remove unused defines.

gas/testsuite/
2004-11-04 Jan Beulich <jbeulich@@novell.com>
	* gas/i386/i386.exp: Execute new tests intelbad and intelok.
	* gas/i386/intelbad.[sl]: New test to check for various things not
	permitted in Intel mode.
	* gas/i386/intel.d, gas/i386/opcode.d, gas/i386/x86-64-opcode.d:
	Adjust for change to segment register store.
	* gas/i386/intelok.[sd]: New test to check various Intel mode specific
	things get handled correctly.
	* gas/i386/x86_64.[sd]: Remove unsupported constructs referring to
	'high' and 'low' parts of an operand, which the parser previously
	accepted while neither telling that it's not supported nor that it
	ignored the remainder of the line following these supposed keywords.

include/opcode/
2004-11-04 Jan Beulich <jbeulich@@novell.com>

	* i386.h (sldx_Suf): Remove.
	(FP, l_FP, sl_FP, x_FP): Don't imply IgnoreSize.
	(q_FP): Define, implying no REX64.
	(x_FP, sl_FP): Imply FloatMF.
	(i386_optab): Split reg and mem forms of moving from segment registers
	so that the memory forms can ignore the 16-/32-bit operand size
	distinction. Adjust a few others for Intel mode. Remove *FP uses from
	all non-floating-point instructions. Unite 32- and 64-bit forms of
	movsx, movzx, and movd. Adjust floating point operations for the above
	changes to the *FP macros. Add DefaultSize to floating point control
	insns operating on larger memory ranges. Remove left over comments
	hinting at certain insns being Intel-syntax ones where the ones
	actually meant are already gone.

opcodes/
2004-11-04 Jan Beulich <jbeulich@@novell.com>

	* i386-dis.c (Eq, Edqw, indirEp, Gdq, I1): Define.
	(indirEb): Remove.
	(Mp): Use f_mode rather than none at all.
	(t_mode, dq_mode, dqw_mode, f_mode, const_1_mode): Define. t_mode
	replaces what previously was x_mode; x_mode now means 128-bit SSE
	operands.
	(dis386): Make far jumps and calls have an 'l' prefix only in AT&T
	mode. movmskpX's, pextrw's, and pmovmskb's first operands are Gdq.
	pinsrw's second operand is Edqw.
	(grps): 1-bit shifts' and rotates' second operands are I1. cmpxchg8b's
	operand is Eq. movntq's and movntdq's first operands are EM. s[gi]dt,
	fldenv, frstor, fsave, fstenv all should also have suffixes in Intel
	mode when an operand size override is present or always suffixing.
	More instructions will need to be added to this group.
	(putop): Handle new macro chars 'C' (short/long suffix selector),
	'I' (Intel mode override for following macro char), and 'J' (for
	adding the 'l' prefix to far branches in AT&T mode). When an
	alternative was specified in the template, honor macro character when
	specified for Intel mode.
	(OP_E): Handle new *_mode values. Correct pointer specifications for
	memory operands. Consolidate output of index register.
	(OP_G): Handle new *_mode values.
	(OP_I): Handle const_1_mode.
	(OP_ESreg, OP_DSreg): Generate pointer specifications. Indicate
	respective opcode prefix bits have been consumed.
	(OP_EM, OP_EX): Provide some default handling for generating pointer
	specifications.
@
text
@d124 1
a124 1
	...
@


1.3
log
@Corrections for x86_64 assembly.
@
text
@d120 4
a123 6
 1e7:	8b 04 25 00 00 00 00 	mov[ 	]+0x0,%eax
 1ee:	8b 04 25 00 00 00 00 	mov[ 	]+0x0,%eax
 1f5:	a1 00 00 00 00 00 00 00 00 	mov[ 	]+0x0,%eax
 1fe:	8b 04 25 00 00 00 00 	mov[ 	]+0x0,%eax
 205:	8b 80 00 00 00 00[ 	]+mov[ 	]+0x0\(%rax\),%eax
 20b:	8b 05 00 00 00 00[ 	]+mov[ 	]+0\(%rip\),%eax.*
@


1.2
log
@	* gas/i386/x86_64.d: Update for 2001-06-11 disassembler change.
@
text
@d40 1
a40 1
[ 	]+65:	f3 66 a5[ 	]+repz movsw %ds:\(%esi\),%es:\(%edi\)
@


1.1
log
@	* configure.in: Define DEFAULT_ARCH for i386.
	* tc-i386.c (md_assemble): Return after the error message;
	move testing for 64bit operands to proper place.

	* i386.exp: Add tests for presence of 32bit versus 64bit output
	format; run both 64bit and 32bit tests when format is available;
	add x86_64 test.
	* x86_64.s: New file.
	* x86_64.d: New file.
@
text
@d27 3
a29 3
[ 	]+3d:	50[ 	]+pushq[ 	]+%rax
[ 	]+3e:	41 50[ 	]+pushq[ 	]+%r8
[ 	]+40:	41 59[ 	]+popq[ 	]+%r9
@

