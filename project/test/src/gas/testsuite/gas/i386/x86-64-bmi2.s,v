head	1.2;
access;
symbols
	binutils-2_24-branch:1.2.0.8
	binutils-2_24-branchpoint:1.2
	binutils-2_23_2:1.2
	binutils-2_23_1:1.2
	binutils-2_23:1.2
	binutils-2_23-branch:1.2.0.6
	binutils-2_23-branchpoint:1.2
	binutils-2_22_branch:1.2.0.4
	binutils-2_22:1.2
	binutils-2_22-branch:1.2.0.2
	binutils-2_22-branchpoint:1.2
	binutils_latest_snapshot:1.2;
locks; strict;
comment	@# @;


1.2
date	2011.06.30.15.44.53;	author hjl;	state Exp;
branches;
next	1.1;

1.1
date	2011.06.10.21.27.39;	author hjl;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix rorx in BMI2.

gas/testsuite/

2011-06-30  H.J. Lu  <hongjiu.lu@@intel.com>

	AVX Programming Reference (June, 2011)
	* gas/i386/bmi2.s: Correct rorx tests.
	* gas/i386/x86-64-bmi2.s: Likewise.

	* gas/i386/bmi2-intel.d: Updated.
	* gas/i386/bmi2.d: Likewise.
	* gas/i386/x86-64-bmi2-intel.d: Likewise.
	* gas/i386/x86-64-bmi2.d: Likewise.

opcodes/

2011-06-30  H.J. Lu  <hongjiu.lu@@intel.com>

	AVX Programming Reference (June, 2011)
	* i386-dis.c (vex_len_table): Correct rorxS.

	* i386-opc.tbl: Correct rorx.
	* i386-tbl.h: Regenerated.
@
text
@# Check 64bit BMI2 instructions

	.allow_index_reg
	.text
_start:

# Test for op r32, r/m32, imm8
	rorx $7,%eax,%ebx
	rorx $7,(%rcx),%ebx
	rorx $7,%r9d,%r15d
	rorx $7,(%rcx),%r15d

# Test for op r32, r32, r/m32
	mulx %eax,%ebx,%esi
	mulx (%rcx),%ebx,%esi
	mulx %r9d,%r15d,%r10d
	mulx (%rcx),%r15d,%r10d
	pdep %eax,%ebx,%esi
	pdep (%rcx),%ebx,%esi
	pdep %r9d,%r15d,%r10d
	pdep (%rcx),%r15d,%r10d
	pext %eax,%ebx,%esi
	pext (%rcx),%ebx,%esi
	pext %r9d,%r15d,%r10d
	pext (%rcx),%r15d,%r10d

# Test for op r32, r/m32, r32
	bzhi %eax,%ebx,%esi
	bzhi %ebx,(%rcx),%esi
	bzhi %r9d,%r15d,%r10d
	bzhi %r9d,(%rcx),%r10d
	sarx %eax,%ebx,%esi
	sarx %ebx,(%rcx),%esi
	sarx %r9d,%r15d,%r10d
	sarx %r9d,(%rcx),%r10d
	shlx %eax,%ebx,%esi
	shlx %ebx,(%rcx),%esi
	shlx %r9d,%r15d,%r10d
	shlx %r9d,(%rcx),%r10d
	shrx %eax,%ebx,%esi
	shrx %ebx,(%rcx),%esi
	shrx %r9d,%r15d,%r10d
	shrx %r9d,(%rcx),%r10d

# Test for op r64, r/m64, imm8
	rorx $7,%rax,%rbx
	rorx $7,(%rcx),%rbx
	rorx $7,%r9,%r15
	rorx $7,(%rcx),%r15

# Test for op r64, r64, r/m64
	mulx %rax,%rbx,%rsi
	mulx (%rcx),%rbx,%rsi
	mulx %r9,%r15,%r10
	mulx (%rcx),%r15,%r10
	pdep %rax,%rbx,%rsi
	pdep (%rcx),%rbx,%rsi
	pdep %r9,%r15,%r10
	pdep (%rcx),%r15,%r10
	pext %rax,%rbx,%rsi
	pext (%rcx),%rbx,%rsi
	pext %r9,%r15,%r10
	pext (%rcx),%r15,%r10

# Test for op r64, r/m64, r64
	bzhi %rax,%rbx,%rsi
	bzhi %rax,(%rcx),%rsi
	bzhi %r9,%r15,%r10
	bzhi %r9,(%rcx),%r10
	sarx %rax,%rbx,%rsi
	sarx %rax,(%rcx),%rsi
	sarx %r9,%r15,%r10
	sarx %r9,(%rcx),%r10
	shlx %rax,%rbx,%rsi
	shlx %rax,(%rcx),%rsi
	shlx %r9,%r15,%r10
	shlx %r9,(%rcx),%r10
	shrx %rax,%rbx,%rsi
	shrx %rax,(%rcx),%rsi
	shrx %r9,%r15,%r10
	shrx %r9,(%rcx),%r10

	.intel_syntax noprefix

# Test for op r32, r/m32, imm8
	rorx ebx,eax,7
	rorx ebx,DWORD PTR [rcx],7
	rorx r10d,r9d,7
	rorx r10d,DWORD PTR [rcx],7
	rorx ebx,[rcx],7

# Test for op r32, r32, r/m32
	mulx esi,ebx,eax
	mulx esi,ebx,DWORD PTR [rcx]
	mulx r15d,r10d,r9d
	mulx r15d,r10d,DWORD PTR [rcx]
	mulx esi,ebx,[rcx]
	pdep esi,ebx,eax
	pdep esi,ebx,DWORD PTR [rcx]
	pdep r15d,r10d,r9d
	pdep r15d,r10d,DWORD PTR [rcx]
	pdep esi,ebx,[rcx]
	pext esi,ebx,eax
	pext esi,ebx,DWORD PTR [rcx]
	pext r15d,r10d,r9d
	pext r15d,r10d,DWORD PTR [rcx]
	pext esi,ebx,[rcx]

# Test for op r32, r/m32, r32
	bzhi esi,ebx,eax
	bzhi esi,DWORD PTR [rcx],ebx
	bzhi r15d,r10d,r9d
	bzhi r15d,DWORD PTR [rcx],r9d
	bzhi esi,[rcx],ebx
	sarx esi,ebx,eax
	sarx esi,DWORD PTR [rcx],ebx
	sarx r15d,r10d,r9d
	sarx r15d,DWORD PTR [rcx],r9d
	sarx esi,[rcx],ebx
	shlx esi,ebx,eax
	shlx esi,DWORD PTR [rcx],ebx
	shlx r15d,r10d,r9d
	shlx r15d,DWORD PTR [rcx],r9d
	shlx esi,[rcx],ebx
	shrx esi,ebx,eax
	shrx esi,DWORD PTR [rcx],ebx
	shrx r15d,r10d,r9d
	shrx r15d,DWORD PTR [rcx],r9d
	shrx esi,[rcx],ebx

# Test for op r64, r/m64, imm8
	rorx rbx,rax,7
	rorx rbx,QWORD PTR [rcx],7
	rorx r15,r9,7
	rorx r15,QWORD PTR [rcx],7
	rorx rbx,[rcx],7

# Test for op r64, r64, r/m64
	mulx rsi,rbx,rax
	mulx rsi,rbx,QWORD PTR [rcx]
	mulx r10,r15,r9
	mulx r10,r15,QWORD PTR [rcx]
	mulx rsi,rbx,[rcx]
	pdep rsi,rbx,rax
	pdep rsi,rbx,QWORD PTR [rcx]
	pdep r10,r15,r9
	pdep r10,r15,QWORD PTR [rcx]
	pdep rsi,rbx,[rcx]
	pext rsi,rbx,rax
	pext rsi,rbx,QWORD PTR [rcx]
	pext r10,r15,r9
	pext r10,r15,QWORD PTR [rcx]
	pext rsi,rbx,[rcx]

# Test for op r64, r/m64, r64
	bzhi rsi,rbx,rax
	bzhi rsi,QWORD PTR [rcx],rax
	bzhi r10,r15,r9
	bzhi r10,QWORD PTR [rcx],r9
	bzhi rsi,[rcx],rax
	sarx rsi,rbx,rax
	sarx rsi,QWORD PTR [rcx],rax
	sarx r10,r15,r9
	sarx r10,QWORD PTR [rcx],r9
	sarx rsi,[rcx],rax
	shlx rsi,rbx,rax
	shlx rsi,QWORD PTR [rcx],rax
	shlx r10,r15,r9
	shlx r10,QWORD PTR [rcx],r9
	shlx rsi,[rcx],rax
	shrx rsi,rbx,rax
	shrx rsi,QWORD PTR [rcx],rax
	shrx r10,r15,r9
	shrx r10,QWORD PTR [rcx],r9
	shrx rsi,[rcx],rax
@


1.1
log
@Support AVX Programming Reference (June, 2011).

gas/

2011-06-10  H.J. Lu  <hongjiu.lu@@intel.com>

	AVX Programming Reference (June, 2011)
	* config/tc-i386.c (i386_error): Add invalid_vsib_address and
	unsupported_vector_index_register.
	(cpu_arch): Add .avx2, .bmi2, .lzcnt and .invpcid.
	(check_VecOperands): New.
	(match_template): Call check_VecOperands.  Handle
	invalid_vsib_address and unsupported_vector_index_register.
	(build_modrm_byte): Support VecSIB.  Check register-only source
	operand when two source operands are swapped.
	(i386_index_check): Allow Xmm/Ymm index registers.

	* doc/c-i386.texi: Document avx2/.avx2, bmi2/.bmi2, lzcnt/.lzcnt
	and invpcid./invpcid.

gas/testsuite/

2011-06-10  H.J. Lu  <hongjiu.lu@@intel.com>

	AVX Programming Reference (June, 2011)
	* gas/i386/arch-10-1.l: Updated.
	* gas/i386/arch-10-2.l: Likewise.
	* gas/i386/arch-10-3.l: Likewise.
	* gas/i386/arch-10-4.l: Likewise.

	* gas/i386/arch-10.s: Add LZCNT to comments.
	* gas/i386/x86-64-arch-2.s: Likewise.

	* gas/i386/arch-10-lzcnt.d: New.
	* gas/i386/avx-gather-intel.d: Likewise.
	* gas/i386/avx-gather.d: Likewise.
	* gas/i386/avx-gather.s: Likewise.
	* gas/i386/avx2-intel.d: Likewise.
	* gas/i386/avx2.d: Likewise.
	* gas/i386/avx2.s: Likewise
	* gas/i386/avx256int-intel.d: Likewise.
	* gas/i386/avx256int.d: Likewise.
	* gas/i386/avx256int.s: Likewise.
	* gas/i386/bmi2-intel.d: Likewise.
	* gas/i386/bmi2.d: Likewise.
	* gas/i386/bmi2.s: Likewise.
	* gas/i386/inval-invpcid.l:Likewise.
	* gas/i386/inval-invpcid.s: Likewise.
	* gas/i386/invpcid-intel.d: Likewise.
	* gas/i386/invpcid.d: Likewise.
	* gas/i386/invpcid.s: Likewise.
	* gas/i386/x86-64-arch-2-lzcnt.d: Likewise.
	* gas/i386/x86-64-avx-gather-intel.d: Likewise.
	* gas/i386/x86-64-avx-gather.d: Likewise.
	* gas/i386/x86-64-avx-gather.s: Likewise.
	* gas/i386/x86-64-avx2-intel.d: Likewise.
	* gas/i386/x86-64-avx2.d: Likewise.
	* gas/i386/x86-64-avx2.s: Likewise.
	* gas/i386/x86-64-avx256int-intel.d: Likewise.
	* gas/i386/x86-64-avx256int.d: Likewise.
	* gas/i386/x86-64-avx256int.s: Likewise.
	* gas/i386/x86-64-bmi2-intel.d: Likewise.
	* gas/i386/x86-64-bmi2.d: Likewise.
	* gas/i386/x86-64-bmi2.s: Likewise.
	* gas/i386/x86-64-inval-invpcid.l: Likewise.
	* gas/i386/x86-64-inval-invpcid.s: Likewise.
	* gas/i386/x86-64-invpcid-intel.d: Likewise.
	* gas/i386/x86-64-invpcid.d: Likewise.
	* gas/i386/x86-64-invpcid.s: Likewise.

opcodes/

2011-06-10  H.J. Lu  <hongjiu.lu@@intel.com>

	AVX Programming Reference (June, 2011)
	* i386-dis.c (XMGatherQ): New.
	* i386-dis.c (EXxmm_mb): New.
	(EXxmm_mb): Likewise.
	(EXxmm_mw): Likewise.
	(EXxmm_md): Likewise.
	(EXxmm_mq): Likewise.
	(EXxmmdw): Likewise.
	(EXxmmqd): Likewise.
	(VexGatherQ): Likewise.
	(MVexVSIBDWpX): Likewise.
	(MVexVSIBQWpX): Likewise.
	(xmm_mb_mode): Likewise.
	(xmm_mw_mode): Likewise.
	(xmm_md_mode): Likewise.
	(xmm_mq_mode): Likewise.
	(xmmdw_mode): Likewise.
	(xmmqd_mode): Likewise.
	(ymmxmm_mode): Likewise.
	(vex_vsib_d_w_dq_mode): Likewise.
	(vex_vsib_q_w_dq_mode): Likewise.
	(MOD_VEX_0F385A_PREFIX_2): Likewise.
	(MOD_VEX_0F388C_PREFIX_2): Likewise.
	(MOD_VEX_0F388E_PREFIX_2): Likewise.
	(PREFIX_0F3882): Likewise.
	(PREFIX_VEX_0F3816): Likewise.
	(PREFIX_VEX_0F3836): Likewise.
	(PREFIX_VEX_0F3845): Likewise.
	(PREFIX_VEX_0F3846): Likewise.
	(PREFIX_VEX_0F3847): Likewise.
	(PREFIX_VEX_0F3858): Likewise.
	(PREFIX_VEX_0F3859): Likewise.
	(PREFIX_VEX_0F385A): Likewise.
	(PREFIX_VEX_0F3878): Likewise.
	(PREFIX_VEX_0F3879): Likewise.
	(PREFIX_VEX_0F388C): Likewise.
	(PREFIX_VEX_0F388E): Likewise.
	(PREFIX_VEX_0F3890..PREFIX_VEX_0F3893): Likewise.
	(PREFIX_VEX_0F38F5): Likewise.
	(PREFIX_VEX_0F38F6): Likewise.
	(PREFIX_VEX_0F3A00): Likewise.
	(PREFIX_VEX_0F3A01): Likewise.
	(PREFIX_VEX_0F3A02): Likewise.
	(PREFIX_VEX_0F3A38): Likewise.
	(PREFIX_VEX_0F3A39): Likewise.
	(PREFIX_VEX_0F3A46): Likewise.
	(PREFIX_VEX_0F3AF0): Likewise.
	(VEX_LEN_0F3816_P_2): Likewise.
	(VEX_LEN_0F3819_P_2): Likewise.
	(VEX_LEN_0F3836_P_2): Likewise.
	(VEX_LEN_0F385A_P_2_M_0): Likewise.
	(VEX_LEN_0F38F5_P_0): Likewise.
	(VEX_LEN_0F38F5_P_1): Likewise.
	(VEX_LEN_0F38F5_P_3): Likewise.
	(VEX_LEN_0F38F6_P_3): Likewise.
	(VEX_LEN_0F38F7_P_1): Likewise.
	(VEX_LEN_0F38F7_P_2): Likewise.
	(VEX_LEN_0F38F7_P_3): Likewise.
	(VEX_LEN_0F3A00_P_2): Likewise.
	(VEX_LEN_0F3A01_P_2): Likewise.
	(VEX_LEN_0F3A38_P_2): Likewise.
	(VEX_LEN_0F3A39_P_2): Likewise.
	(VEX_LEN_0F3A46_P_2): Likewise.
	(VEX_LEN_0F3AF0_P_3): Likewise.
	(VEX_W_0F3816_P_2): Likewise.
	(VEX_W_0F3818_P_2): Likewise.
	(VEX_W_0F3819_P_2): Likewise.
	(VEX_W_0F3836_P_2): Likewise.
	(VEX_W_0F3846_P_2): Likewise.
	(VEX_W_0F3858_P_2): Likewise.
	(VEX_W_0F3859_P_2): Likewise.
	(VEX_W_0F385A_P_2_M_0): Likewise.
	(VEX_W_0F3878_P_2): Likewise.
	(VEX_W_0F3879_P_2): Likewise.
	(VEX_W_0F3A00_P_2): Likewise.
	(VEX_W_0F3A01_P_2): Likewise.
	(VEX_W_0F3A02_P_2): Likewise.
	(VEX_W_0F3A38_P_2): Likewise.
	(VEX_W_0F3A39_P_2): Likewise.
	(VEX_W_0F3A46_P_2): Likewise.
	(MOD_VEX_0F3818_PREFIX_2): Removed.
	(MOD_VEX_0F3819_PREFIX_2): Likewise.
	(VEX_LEN_0F60_P_2..VEX_LEN_0F6D_P_2): Likewise.
	(VEX_LEN_0F70_P_1..VEX_LEN_0F76_P_2): Likewise.
	(VEX_LEN_0FD1_P_2..VEX_LEN_0FD5_P_2): Likewise.
	(VEX_LEN_0FD7_P_2_M_1..VEX_LEN_0F3819_P_2_M_0): Likewise.
	(VEX_LEN_0F381C_P_2..VEX_LEN_0F3840_P_2): Likewise.
	(VEX_LEN_0F3A0E_P_2): Likewise.
	(VEX_LEN_0F3A0F_P_2): Likewise.
	(VEX_LEN_0F3A42_P_2): Likewise.
	(VEX_LEN_0F3A4C_P_2): Likewise.
	(VEX_W_0F3818_P_2_M_0): Likewise.
	(VEX_W_0F3819_P_2_M_0): Likewise.
	(prefix_table): Updated.
	(three_byte_table): Likewise.
	(vex_table): Likewise.
	(vex_len_table): Likewise.
	(vex_w_table): Likewise.
	(mod_table): Likewise.
	(putop): Handle "LW".
	(intel_operand_size): Handle xmm_mb_mode, xmm_mw_mode,
	xmm_md_mode, xmm_mq_mode, xmmdw_mode, xmmqd_mode, ymmxmm_mode,
	vex_vsib_d_w_dq_mode, vex_vsib_q_w_dq_mode.
	(OP_EX): Likewise.
	(OP_E_memory): Handle vex_vsib_d_w_dq_mode and
	vex_vsib_q_w_dq_mode.
	(OP_XMM): Handle vex_vsib_q_w_dq_mode.
	(OP_VEX): Likewise.

	* i386-gen.c (cpu_flag_init): Add CpuAVX2 to CPU_ANY_SSE_FLAGS
	and CPU_ANY_AVX_FLAGS.  Add CPU_BMI2_FLAGS, CPU_LZCNT_FLAGS,
	CPU_INVPCID_FLAGS and CPU_AVX2_FLAGS.
	(cpu_flags): Add CpuAVX2, CpuBMI2, CpuLZCNT and CpuINVPCID.
	(opcode_modifiers): Add VecSIB.

	* i386-opc.h (CpuAVX2): New.
	(CpuBMI2): Likewise.
	(CpuLZCNT): Likewise.
	(CpuINVPCID): Likewise.
	(VecSIB128): Likewise.
	(VecSIB256): Likewise.
	(VecSIB): Likewise.
	(i386_cpu_flags): Add cpuavx2, cpubmi2, cpulzcnt and cpuinvpcid.
	(i386_opcode_modifier): Add vecsib.

	* i386-opc.tbl: Add invpcid, AVX2 and BMI2 instructions.
	* i386-init.h: Regenerated.
	* i386-tbl.h: Likewise.
@
text
@d7 5
a11 5
# Test for op r32, r32, r/m32, imm8
	rorx $7,%eax,%ebx,%esi
	rorx $7,(%rcx),%ebx,%esi
	rorx $7,%r9d,%r15d,%r10d
	rorx $7,(%rcx),%r15d,%r10d
d45 5
a49 5
# Test for op r64, r64, r/m64, imm8
	rorx $7,%rax,%rbx,%rsi
	rorx $7,(%rcx),%rbx,%rsi
	rorx $7,%r9,%r15,%r10
	rorx $7,(%rcx),%r15,%r10
d85 6
a90 6
# Test for op r32, r32, r/m32, imm8
	rorx esi,ebx,eax,7
	rorx esi,ebx,DWORD PTR [rcx],7
	rorx r15d,r10d,r9d,7
	rorx r15d,r10d,DWORD PTR [rcx],7
	rorx esi,ebx,[rcx],7
d131 6
a136 6
# Test for op r64, r64, r/m64, imm8
	rorx rsi,rbx,rax,7
	rorx rsi,rbx,QWORD PTR [rcx],7
	rorx r10,r15,r9,7
	rorx r10,r15,QWORD PTR [rcx],7
	rorx rsi,rbx,[rcx],7
@

