head	1.7;
access;
symbols
	binutils-2_24-branch:1.7.0.10
	binutils-2_24-branchpoint:1.7
	binutils-2_21_1:1.7
	binutils-2_23_2:1.7
	binutils-2_23_1:1.7
	binutils-2_23:1.7
	binutils-2_23-branch:1.7.0.8
	binutils-2_23-branchpoint:1.7
	binutils-2_22_branch:1.7.0.6
	binutils-2_22:1.7
	binutils-2_22-branch:1.7.0.4
	binutils-2_22-branchpoint:1.7
	binutils-2_21:1.7
	binutils-2_21-branch:1.7.0.2
	binutils-2_21-branchpoint:1.7
	binutils-2_20_1:1.5
	binutils-2_20:1.5
	binutils-arc-20081103-branch:1.4.0.6
	binutils-arc-20081103-branchpoint:1.4
	binutils-2_20-branch:1.5.0.4
	binutils-2_20-branchpoint:1.5
	dje-cgen-play1-branch:1.5.0.2
	dje-cgen-play1-branchpoint:1.5
	arc-20081103-branch:1.4.0.4
	arc-20081103-branchpoint:1.4
	binutils-2_19_1:1.4
	binutils-2_19:1.4
	binutils-2_19-branch:1.4.0.2
	binutils-2_19-branchpoint:1.4
	binutils-2_18:1.3
	binutils-2_18-branch:1.3.0.2
	binutils-2_18-branchpoint:1.3
	binutils-csl-coldfire-4_1-32:1.2
	binutils-csl-sourcerygxx-4_1-32:1.2
	binutils-csl-innovasic-fido-3_4_4-33:1.2
	binutils-csl-sourcerygxx-3_4_4-32:1.2
	binutils-csl-coldfire-4_1-30:1.2
	binutils-csl-sourcerygxx-4_1-30:1.2
	binutils-csl-coldfire-4_1-28:1.2
	binutils-csl-sourcerygxx-4_1-29:1.2
	binutils-csl-sourcerygxx-4_1-28:1.2
	binutils-csl-arm-2006q3-27:1.2
	binutils-csl-sourcerygxx-4_1-27:1.2
	binutils-csl-arm-2006q3-26:1.2
	binutils-csl-sourcerygxx-4_1-26:1.2
	binutils-csl-sourcerygxx-4_1-25:1.2
	binutils-csl-sourcerygxx-4_1-24:1.2
	binutils-csl-sourcerygxx-4_1-23:1.2
	binutils-csl-sourcerygxx-4_1-21:1.2
	binutils-csl-arm-2006q3-21:1.2
	binutils-csl-sourcerygxx-4_1-22:1.2
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.2
	binutils-csl-sourcerygxx-4_1-20:1.2
	binutils-csl-arm-2006q3-19:1.2
	binutils-csl-sourcerygxx-4_1-19:1.2
	binutils-csl-sourcerygxx-4_1-18:1.2
	binutils-csl-renesas-4_1-9:1.2
	binutils-csl-sourcerygxx-3_4_4-25:1.2
	binutils-csl-renesas-4_1-8:1.2
	binutils-csl-renesas-4_1-7:1.2
	binutils-csl-renesas-4_1-6:1.2
	binutils-csl-sourcerygxx-4_1-17:1.2
	binutils-csl-sourcerygxx-4_1-14:1.2
	binutils-csl-sourcerygxx-4_1-15:1.2
	binutils-csl-sourcerygxx-4_1-13:1.2
	binutils-2_17:1.2
	binutils-csl-sourcerygxx-4_1-12:1.2
	binutils-csl-sourcerygxx-3_4_4-21:1.2
	binutils-csl-wrs-linux-3_4_4-24:1.2
	binutils-csl-wrs-linux-3_4_4-23:1.2
	binutils-csl-sourcerygxx-4_1-9:1.2
	binutils-csl-sourcerygxx-4_1-8:1.2
	binutils-csl-sourcerygxx-4_1-7:1.2
	binutils-csl-arm-2006q1-6:1.2
	binutils-csl-sourcerygxx-4_1-6:1.2
	binutils-csl-wrs-linux-3_4_4-22:1.2
	binutils-csl-coldfire-4_1-11:1.2
	binutils-csl-sourcerygxx-3_4_4-19:1.2
	binutils-csl-coldfire-4_1-10:1.2
	binutils-csl-sourcerygxx-4_1-5:1.2
	binutils-csl-sourcerygxx-4_1-4:1.2
	binutils-csl-wrs-linux-3_4_4-21:1.2
	binutils-csl-morpho-4_1-4:1.2
	binutils-csl-sourcerygxx-3_4_4-17:1.2
	binutils-csl-wrs-linux-3_4_4-20:1.2
	binutils-2_17-branch:1.2.0.26
	binutils-2_17-branchpoint:1.2
	binutils-csl-2_17-branch:1.2.0.24
	binutils-csl-2_17-branchpoint:1.2
	binutils-csl-gxxpro-3_4-branch:1.2.0.22
	binutils-csl-gxxpro-3_4-branchpoint:1.2
	binutils-2_16_1:1.2
	binutils-csl-arm-2005q1b:1.2
	binutils-2_16:1.2
	binutils-csl-arm-2005q1a:1.2
	binutils-csl-arm-2005q1-branch:1.2.0.20
	binutils-csl-arm-2005q1-branchpoint:1.2
	binutils-2_16-branch:1.2.0.18
	binutils-2_16-branchpoint:1.2
	csl-arm-2004-q3d:1.2
	csl-arm-2004-q3:1.2
	binutils-2_15:1.2
	binutils-2_15-branchpoint:1.2
	csl-arm-2004-q1a:1.2
	csl-arm-2004-q1:1.2
	binutils-2_15-branch:1.2.0.16
	cagney_bfdfile-20040213-branch:1.2.0.14
	cagney_bfdfile-20040213-branchpoint:1.2
	cagney_bigcore-20040122-branch:1.2.0.12
	cagney_bigcore-20040122-branchpoint:1.2
	csl-arm-2003-q4:1.2
	binutils-2_14:1.2
	binutils-2_14-branch:1.2.0.10
	binutils-2_14-branchpoint:1.2
	binutils-2_13_2_1:1.2
	binutils-2_13_2:1.2
	binutils-2_13_1:1.2
	binutils-2_13:1.2
	binutils-2_13-branchpoint:1.2
	binutils-2_13-branch:1.2.0.8
	binutils-2_12_1:1.2
	binutils-2_12:1.2
	binutils-2_12-branch:1.2.0.6
	binutils-2_12-branchpoint:1.2
	cygnus_cvs_20020108_pre:1.2
	binutils-2_11_2:1.2
	binutils-2_11_1:1.2
	binutils-2_11:1.2
	x86_64versiong3:1.2
	binutils-2_11-branch:1.2.0.4
	binutils-2_10_1:1.2
	binutils-2_10:1.2
	binutils-2_10-branch:1.2.0.2
	binutils-2_10-branchpoint:1.2
	binutils_latest_snapshot:1.7
	repo-unification-2000-02-06:1.2;
locks; strict;
comment	@# @;


1.7
date	2009.11.13.20.42.09;	author hjl;	state Exp;
branches;
next	1.6;

1.6
date	2009.10.13.16.23.25;	author hjl;	state Exp;
branches;
next	1.5;

1.5
date	2009.06.01.16.31.00;	author hjl;	state Exp;
branches;
next	1.4;

1.4
date	2008.02.23.17.29.17;	author hjl;	state Exp;
branches;
next	1.3;

1.3
date	2007.04.27.04.22.00;	author hjl;	state Exp;
branches;
next	1.2;

1.2
date	2000.01.21.22.58.04;	author amodra;	state Exp;
branches;
next	1.1;

1.1
date	2000.01.21.10.18.33;	author amodra;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Rewrite prefix processing.

gas/testsuite/

2009-11-13  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/i386.exp: Run long-1, long-1-intel, x86-64-long-1,
	and x86-64-long-1-intel.

	* gas/i386/long-1-intel.d: New.
	* gas/i386/long-1.d: Likewise.
	* gas/i386/long-1.s: Likewise.
	* gas/i386/x86-64-long-1-intel.d: Likewise.
	* gas/i386/x86-64-long-1.d: Likewise.
	* gas/i386/x86-64-long-1.s: Likewise.

	* gas/i386/jump16.d: Updated for prefix processing.
	* gas/i386/naked.d: Likewise.
	* gas/i386/nops-1-core2.d: Likewise.
	* gas/i386/nops-1-i686.d: Likewise.
	* gas/i386/nops-3-i686.d: Likewise.
	* gas/i386/nops-4-i686.d: Likewise.
	* gas/i386/nops-5-i686.d: Likewise.
	* gas/i386/nops-5.d: Likewise.
	* gas/i386/prefix.d: Likewise.
	* gas/i386/rep.d: Likewise.
	* gas/i386/string-ok.d: Likewise.
	* gas/i386/x86-64-addr32-intel.d: Likewise.
	* gas/i386/x86-64-addr32.d: Likewise.
	* gas/i386/x86-64-cbw-intel.d: Likewise.
	* gas/i386/x86-64-cbw.d: Likewise.
	* gas/i386/x86-64-io-intel.d: Likewise.
	* gas/i386/x86-64-io-suffix.d: Likewise.
	* gas/i386/x86-64-io.d: Likewise.
	* gas/i386/x86-64-lwp.d: Likewise.
	* gas/i386/x86-64-nops-1-core2.d: Likewise.
	* gas/i386/x86-64-nops-1-nocona.d: Likewise.
	* gas/i386/x86-64-nops-1.d: Likewise.
	* gas/i386/x86-64-nops-2.d: Likewise.
	* gas/i386/x86-64-nops-3.d: Likewise.
	* gas/i386/x86-64-nops-4-core2.d: Likewise.
	* gas/i386/x86-64-nops-4.d: Likewise.
	* gas/i386/x86-64-nops-5-k8.d: Likewise.
	* gas/i386/x86-64-nops-5.d: Likewise.
	* gas/i386/x86-64-rep.d: Likewise.
	* gas/i386/x86-64-stack-intel.d: Likewise.
	* gas/i386/x86-64-stack-suffix.d: Likewise.
	* gas/i386/x86-64-stack.d: Likewise.

ld/testsuite/

2009-11-13  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-x86-64/tlsbin.dd: Updated for prefix processing.
	* ld-x86-64/tlsgdesc.dd: Likewise.
	* ld-x86-64/tlsld1.dd: Likewise.
	* ld-x86-64/tlspic.dd: Likewise.

opcodes/

2009-11-13  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-dis.c (ckprefix): Updated to return 0 if number of
	prefixes > 14 and record the last position for each prefix.
	(lock_prefix): Removed.
	(data_prefix): Likewise.
	(addr_prefix): Likewise.
	(repz_prefix): Likewise.
	(repnz_prefix): Likewise.
	(last_lock_prefix): New.
	(last_repz_prefix): Likewise.
	(last_repnz_prefix): Likewise.
	(last_data_prefix): Likewise.
	(last_addr_prefix): Likewise.
	(last_rex_prefix): Likewise.
	(last_seg_prefix): Likewise.
	(MAX_CODE_LENGTH): Likewise.
	(ADDR16_PREFIX): Likewise.
	(ADDR32_PREFIX): Likewise.
	(DATA16_PREFIX): Likewise.
	(DATA32_PREFIX): Likewise.
	(REP_PREFIX): Likewise.
	(seg_prefix): Likewise.
	(all_prefixes): Change size to MAX_CODE_LENGTH - 1.
	(prefix_name): Handle ADDR16_PREFIX, ADDR32_PREFIX,
	DATA16_PREFIX, DATA32_PREFIX and REP_PREFIX.
	(get_valid_dis386): Updated.
	(OP_C): Likewise.
	(OP_Monitor): Likewise.
	(REP_Fixup): Likewise.
	(print_insn): Display all prefixes.
	(putop): Set PREFIX_DATA on used_prefixes only if it is used.
	(intel_operand_size): Likewise.
	(OP_E_register): Likewise.
	(OP_G): Likewise.
	(OP_REG): Likewise.
	(OP_IMREG): Likewise.
	(OP_I): Likewise.
	(OP_I64): Likewise.
	(OP_sI): Likewise.
	(CRC32_Fixup): Likewise.
	(MOVBE_Fixup): Likewise.
	(OP_E_memory): Set REFIX_DATA on used_prefixes when it is used
	in 16bit mode.
	(OP_J): Set REX_W used if it is used. Set PREFIX_DATA on
	used_prefixes only if it is used.
@
text
@#name: i386 jump16
#objdump: -drw -mi8086

.*:     file format .*i386.*

Disassembly of section .text:

0+ <.text>:
[ 	]*[a-f0-9]+:	eb fe                	jmp    (0x0|0 <.text>)
[ 	]*[a-f0-9]+:	e9 f(e|b) ff             	jmp    (0x3|0 <.text>)	3: (R_386_PC)?(DISP)?16	xxx
[ 	]*[a-f0-9]+:	ff 26 00 00          	jmp    \*0x0	7: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	66 ff e7             	jmpl   \*%edi
[ 	]*[a-f0-9]+:	67 ff 27             	jmp    \*\(%edi\)
[ 	]*[a-f0-9]+:	67 ff af 00 00 00 00 	ljmp   \*0x0\(%edi\)	12: (R_386_)?(dir)?32	xxx
[ 	]*[a-f0-9]+:	ff 2e 00 00          	ljmp   \*0x0	18: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	ea 00 00 34 12       	ljmp   \$0x1234,\$0x0	1b: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	66 e8 db ff ff ff    	calll  (0x0|0 <.text>)
[ 	]*[a-f0-9]+:	66 e8 (fc|d5) ff ff ff    	calll  (0x27|0 <.text>)	27: (R_386_PC)?(DISP)?32	xxx
[ 	]*[a-f0-9]+:	66 ff 16 00 00       	calll  \*0x0	2e: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	66 ff d7             	calll  \*%edi
[ 	]*[a-f0-9]+:	67 66 ff 17          	calll  \*\(%edi\)
[ 	]*[a-f0-9]+:	67 66 ff 9f 00 00 00 00 	lcalll \*0x0\(%edi\)	3b: (R_386_)?(dir)?32	xxx
[ 	]*[a-f0-9]+:	66 ff 1e 00 00       	lcalll \*0x0	42: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	66 9a 00 00 00 00 34 12 	lcalll \$0x1234,\$0x0	46: (R_386_)?(dir)?32	xxx
[ 	]*[a-f0-9]+:	eb b2                	jmp    (0x0|0 <.text>)
[ 	]*[a-f0-9]+:	ff 26 00 00          	jmp    \*0x0	50: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	ff e7                	jmp    \*%di
[ 	]*[a-f0-9]+:	ff 25                	jmp    \*\(%di\)
[ 	]*[a-f0-9]+:	ff ad 00 00          	ljmp   \*0x0\(%di\)	58: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	66 ff ad 00 00       	ljmpl  \*0x0\(%di\)	5d: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	ff 2e 00 00          	ljmp   \*0x0	61: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	66 ff 2e 00 00       	ljmpl  \*0x0	66: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	ea 00 00 34 12       	ljmp   \$0x1234,\$0x0	69: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	e8 90 ff             	call   (0x0|0 <.text>)
[ 	]*[a-f0-9]+:	e8 (fe|8d) ff             	call   (0x71|0 <.text>)	71: (R_386_PC)?(DISP)?16	xxx
[ 	]*[a-f0-9]+:	ff 16 00 00          	call   \*0x0	75: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	ff d7                	call   \*%di
[ 	]*[a-f0-9]+:	ff 15                	call   \*\(%di\)
[ 	]*[a-f0-9]+:	ff 9d 00 00          	lcall  \*0x0\(%di\)	7d: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	66 ff 9d 00 00       	lcalll \*0x0\(%di\)	82: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	ff 1e 00 00          	lcall  \*0x0	86: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	66 ff 1e 00 00       	lcalll \*0x0	8b: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	9a 00 00 34 12       	lcall  \$0x1234,\$0x0	8e: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	ff 17                	call   \*\(%bx\)
[ 	]*[a-f0-9]+:	ff 1f                	lcall  \*\(%bx\)
[ 	]*[a-f0-9]+:	66 ff 1f             	lcalll \*\(%bx\)
[ 	]*[a-f0-9]+:	ff 27                	jmp    \*\(%bx\)
[ 	]*[a-f0-9]+:	ff 2f                	ljmp   \*\(%bx\)
[ 	]*[a-f0-9]+:	66 ff 2f             	ljmpl  \*\(%bx\)
[ 	]*[a-f0-9]+:	eb 00                	jmp    (0xa2|a2 <.text\+0xa2>)
[ 	]*[a-f0-9]+:	90                   	nop
[ 	]*[a-f0-9]+:	eb 00                	jmp    (0xa5|a5 <.text\+0xa5>)
[ 	]*[a-f0-9]+:	90                   	nop
[ 	]*[a-f0-9]+:	9a 10 10 90 90       	lcall  \$0x9090,\$0x1010
[ 	]*[a-f0-9]+:	9a 10 10 90 90       	lcall  \$0x9090,\$0x1010
[ 	]*[a-f0-9]+:	9a 00 00 90 90       	lcall  \$0x9090,\$0x0	b1: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	9a 00 00 90 90       	lcall  \$0x9090,\$0x0	b6: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	9a 10 10 90 90       	lcall  \$0x9090,\$0x1010
[ 	]*[a-f0-9]+:	9a 10 10 90 90       	lcall  \$0x9090,\$0x1010
[ 	]*[a-f0-9]+:	9a 00 00 90 90       	lcall  \$0x9090,\$0x0	c5: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	9a 00 00 90 90       	lcall  \$0x9090,\$0x0	ca: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	ea 10 10 90 90       	ljmp   \$0x9090,\$0x1010
[ 	]*[a-f0-9]+:	ea 10 10 90 90       	ljmp   \$0x9090,\$0x1010
[ 	]*[a-f0-9]+:	ea 00 00 90 90       	ljmp   \$0x9090,\$0x0	d9: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	ea 00 00 90 90       	ljmp   \$0x9090,\$0x0	de: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	ea 10 10 90 90       	ljmp   \$0x9090,\$0x1010
[ 	]*[a-f0-9]+:	ea 10 10 90 90       	ljmp   \$0x9090,\$0x1010
[ 	]*[a-f0-9]+:	ea 00 00 90 90       	ljmp   \$0x9090,\$0x0	ed: (R_386_)?16	xxx
[ 	]*[a-f0-9]+:	ea 00 00 90 90       	ljmp   \$0x9090,\$0x0	f2: (R_386_)?16	xxx
#pass
@


1.6
log
@gas/

2009-10-13  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/10740
	* config/tc-i386-intel.c (i386_intel_operand): Handle call
	and jump with 2 immediate operands.

	* config/tc-i386.c (i386_finalize_immediate): Don't generate
	error message if operand string is NULL.

gas/testsuite/

2009-10-13  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/10740
	* gas/i386/jump.s: Add new tests.
	* gas/i386/jump16.s: Likewise.

	* gas/i386/jump.d: Updated.
	* gas/i386/jump16.d: Likewise.
@
text
@d13 2
a14 2
[ 	]*[a-f0-9]+:	67 ff 27             	addr32 jmp \*\(%edi\)
[ 	]*[a-f0-9]+:	67 ff af 00 00 00 00 	addr32 ljmp \*0x0\(%edi\)	12: (R_386_)?(dir)?32	xxx
d21 2
a22 2
[ 	]*[a-f0-9]+:	67 66 ff 17          	addr32 calll \*\(%edi\)
[ 	]*[a-f0-9]+:	67 66 ff 9f 00 00 00 00 	addr32 lcalll \*0x0\(%edi\)	3b: (R_386_)?(dir)?32	xxx
@


1.5
log
@gas/

2009-06-01  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/10198
	* config/tc-i386-intel.c (i386_intel_operand): Check '$' as '.'.

gas/testsuite/

2009-06-01  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/10198
	* gas/i386/jump.s: Add test for "jmp $+2".
	* gas/i386/jump16.s: Likewise.

	* gas/i386/jump.d: Updated.
	* gas/i386/jump16.d: Likewise.
@
text
@d10 2
a11 2
[ 	]*[a-f0-9]+:	e9 fe ff             	jmp    0x3	3: R_386_PC16	xxx
[ 	]*[a-f0-9]+:	ff 26 00 00          	jmp    \*0x0	7: R_386_16	xxx
d15 5
a19 5
[ 	]*[a-f0-9]+:	ff 2e 00 00          	ljmp   \*0x0	18: R_386_16	xxx
[ 	]*[a-f0-9]+:	ea 00 00 34 12       	ljmp   \$0x1234,\$0x0	1b: R_386_16	xxx
[ 	]*[a-f0-9]+:	66 e8 db ff ff ff    	calll  0x0
[ 	]*[a-f0-9]+:	66 e8 fc ff ff ff    	calll  0x27	27: (R_386_PC)?(DISP)?32	xxx
[ 	]*[a-f0-9]+:	66 ff 16 00 00       	calll  \*0x0	2e: R_386_16	xxx
d23 1
a23 1
[ 	]*[a-f0-9]+:	66 ff 1e 00 00       	lcalll \*0x0	42: R_386_16	xxx
d26 1
a26 1
[ 	]*[a-f0-9]+:	ff 26 00 00          	jmp    \*0x0	50: R_386_16	xxx
d29 5
a33 5
[ 	]*[a-f0-9]+:	ff ad 00 00          	ljmp   \*0x0\(%di\)	58: R_386_16	xxx
[ 	]*[a-f0-9]+:	66 ff ad 00 00       	ljmpl  \*0x0\(%di\)	5d: R_386_16	xxx
[ 	]*[a-f0-9]+:	ff 2e 00 00          	ljmp   \*0x0	61: R_386_16	xxx
[ 	]*[a-f0-9]+:	66 ff 2e 00 00       	ljmpl  \*0x0	66: R_386_16	xxx
[ 	]*[a-f0-9]+:	ea 00 00 34 12       	ljmp   \$0x1234,\$0x0	69: R_386_16	xxx
d35 2
a36 2
[ 	]*[a-f0-9]+:	e8 fe ff             	call   0x71	71: R_386_PC16	xxx
[ 	]*[a-f0-9]+:	ff 16 00 00          	call   \*0x0	75: R_386_16	xxx
d39 5
a43 5
[ 	]*[a-f0-9]+:	ff 9d 00 00          	lcall  \*0x0\(%di\)	7d: R_386_16	xxx
[ 	]*[a-f0-9]+:	66 ff 9d 00 00       	lcalll \*0x0\(%di\)	82: R_386_16	xxx
[ 	]*[a-f0-9]+:	ff 1e 00 00          	lcall  \*0x0	86: R_386_16	xxx
[ 	]*[a-f0-9]+:	66 ff 1e 00 00       	lcalll \*0x0	8b: R_386_16	xxx
[ 	]*[a-f0-9]+:	9a 00 00 34 12       	lcall  \$0x1234,\$0x0	8e: R_386_16	xxx
d50 1
a50 1
[ 	]*[a-f0-9]+:	eb 00                	jmp    0xa2
d52 1
a52 1
[ 	]*[a-f0-9]+:	eb 00                	jmp    0xa5
d54 16
@


1.4
log
@gas/testsuite/

2008-02-23  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/jump.s: Add tests for far branches.
	* gas/i386/jump16.s: Likewise.

	* gas/i386/jump.d: Updated.
	* gas/i386/jump16.d: Likewise.
	* gas/i386/x86-64-inval.l: Likewise.

	* gas/i386/x86-64-inval.s: Add tests for 16-bit near indirect
	branches.

opcodes/

2008-02-23  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-opc.tbl: Disallow 16-bit near indirect branches for
	x86-64.
	* i386-tbl.h: Regenerated.
@
text
@d9 1
a9 1
[ 	]*[a-f0-9]+:	eb fe                	jmp    0x0
d14 1
a14 1
[ 	]*[a-f0-9]+:	67 ff af 00 00 00 00 	addr32 ljmp \*0x0\(%edi\)	12: R_386_32	xxx
d18 1
a18 1
[ 	]*[a-f0-9]+:	66 e8 fc ff ff ff    	calll  0x27	27: R_386_PC32	xxx
d22 1
a22 1
[ 	]*[a-f0-9]+:	67 66 ff 9f 00 00 00 00 	addr32 lcalll \*0x0\(%edi\)	3b: R_386_32	xxx
d24 2
a25 2
[ 	]*[a-f0-9]+:	66 9a 00 00 00 00 34 12 	lcalll \$0x1234,\$0x0	46: R_386_32	xxx
[ 	]*[a-f0-9]+:	eb b2                	jmp    0x0
d34 1
a34 1
[ 	]*[a-f0-9]+:	e8 90 ff             	call   0x0
d50 4
@


1.3
log
@gas/testsuite/

2007-04-26  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/4430
	* gas/i386/amd.d: Updated.
	* gas/i386/immed32.d: Likewise.
	* gas/i386/intel.d: Likewise.
	* gas/i386/intel16.d: Likewise.
	* gas/i386/intelok.d: Likewise.
	* gas/i386/jump16.d: Likewise.
	* gas/i386/naked.d: Likewise.
	* gas/i386/opcode-suffix.d: Likewise.
	* gas/i386/opcode.d: Likewise.
	* gas/i386/prescott.d: Likewise.
	* gas/i386/ssemmx2.d: Likewise.
	* gas/i386/tlsd.d: Likewise.
	* gas/i386/tlspic.d: Likewise.
	* gas/i386/x86-64-addr32.d: Likewise.
	* gas/i386/x86-64-prescott.d: Likewise.
	* gas/i386/x86-64-rip.d: Likewise.
	* gas/i386/x86_64.d: Likewise.

ld/testsuite/

2007-04-26  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/4430
	* ld-i386/tlsbin.dd: Updated.
	* ld-i386/tlsbindesc.dd: Likewise
	* ld-i386/tlsdesc.dd: Likewise
	* ld-i386/tlsgdesc.dd: Likewise
	* ld-i386/tlsnopic.dd: Likewise
	* ld-i386/tlspic.dd: Likewise
	* ld-x86-64/tlsbin.dd: Likewise
	* ld-x86-64/tlsbindesc.dd: Likewise
	* ld-x86-64/tlsdesc.dd: Likewise
	* ld-x86-64/tlsgdesc.dd: Likewise
	* ld-x86-64/tlspic.dd: Likewise

opcodes/

2007-04-26  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/4430
	* i386-dis.c (print_displacement): New.
	(OP_E): Call print_displacement instead of print_operand_value
	to output displacement when either base or index exist.  Print
	the explicit zero displacement in 16bit mode.
@
text
@d8 43
a50 33
0+000 <.text>:
   0:	eb fe [ 	]*jmp    (0x0|0 <.text>)
   2:	e9 (fe|fb) ff [ 	]*jmp    (0x3|0x0|0 <.text>)	3: (R_386_PC)?(DISP)?16	xxx
   5:	ff 26 00 00 [ 	]*jmp    \*0x0	7: (R_386_)?(dir)?16	xxx
   9:	66 ff e7 [ 	]*jmpl   \*%edi
   c:	67 ff 27 [ 	]*addr32 jmp \*\(%edi\)
   f:	67 ff af 00 00 00 00 [ 	]*addr32 ljmp \*0x0\(%edi\)	12: (R_386_)?(dir)?32	xxx
  16:	ff 2e 00 00 [ 	]*ljmp   \*0x0	18: (R_386_)?(dir)?16	xxx
  1a:	ea 00 00 34 12 [ 	]*ljmp   \$0x1234,\$0x0	1b: (R_386_)?(dir)?16	xxx
  1f:	66 e8 db ff ff ff [ 	]*calll  (0x0|0 <.text>)
  25:	66 e8 (fc|d5) ff ff ff [ 	]*calll  (0x27|0x0|0 <.text>)	27: (R_386_PC)?(DISP)?32	xxx
  2b:	66 ff 16 00 00 [ 	]*calll  \*0x0	2e: (R_386_)?(dir)?16	xxx
  30:	66 ff d7 [ 	]*calll  \*%edi
  33:	67 66 ff 17 [ 	]*addr32 calll \*\(%edi\)
  37:	67 66 ff 9f 00 00 00 00 [ 	]*addr32 lcalll \*0x0\(%edi\)	3b: (R_386_)?(dir)?32	xxx
  3f:	66 ff 1e 00 00 [ 	]*lcalll \*0x0	42: (R_386_)?(dir)?16	xxx
  44:	66 9a 00 00 00 00 34 12 [ 	]*lcalll \$0x1234,\$0x0	46: (R_386_)?(dir)?32	xxx
  4c:	eb b2 [ 	]*jmp    (0x0|0 <.text>)
  4e:	ff 26 00 00 [ 	]*jmp    \*0x0	50: (R_386_)?(dir)?16	xxx
  52:	ff e7 [ 	]*jmp    \*%di
  54:	ff 25 [ 	]*jmp    \*\(%di\)
  56:	ff ad 00 00 [ 	]*ljmp   \*0x0\(%di\)	58: (R_386_)?(dir)?16	xxx
  5a:	ff 2e 00 00 [ 	]*ljmp   \*0x0	5c: (R_386_)?(dir)?16	xxx
  5e:	ea 00 00 34 12 [ 	]*ljmp   \$0x1234,\$0x0	5f: (R_386_)?(dir)?16	xxx
  63:	e8 9a ff [ 	]*call   (0x0|0 <.text>)
  66:	e8 (fe|97) ff [ 	]*call   (0x67|0x0|0 <.text>)	67: (R_386_PC)?(DISP)?16	xxx
  69:	ff 16 00 00 [ 	]*call   \*0x0	6b: (R_386_)?(dir)?16	xxx
  6d:	ff d7 [ 	]*call   \*%di
  6f:	ff 15 [ 	]*call   \*\(%di\)
  71:	ff 9d 00 00 [ 	]*lcall  \*0x0\(%di\)	73: (R_386_)?(dir)?16	xxx
  75:	ff 1e 00 00 [ 	]*lcall  \*0x0	77: (R_386_)?(dir)?16	xxx
  79:	9a 00 00 34 12 [ 	]*lcall  \$0x1234,\$0x0	7a: (R_386_)?(dir)?16	xxx
	...
@


1.2
log
@Fix gas x86 testsuite for a.out
@
text
@d11 1
a11 1
   5:	ff 26 00 00 [ 	]*jmp    \*0	7: (R_386_)?(dir)?16	xxx
d15 1
a15 1
  16:	ff 2e 00 00 [ 	]*ljmp   \*0	18: (R_386_)?(dir)?16	xxx
d19 1
a19 1
  2b:	66 ff 16 00 00 [ 	]*calll  \*0	2e: (R_386_)?(dir)?16	xxx
d23 1
a23 1
  3f:	66 ff 1e 00 00 [ 	]*lcalll \*0	42: (R_386_)?(dir)?16	xxx
d26 1
a26 1
  4e:	ff 26 00 00 [ 	]*jmp    \*0	50: (R_386_)?(dir)?16	xxx
d29 2
a30 2
  56:	ff ad 00 00 [ 	]*ljmp   \*0\(%di\)	58: (R_386_)?(dir)?16	xxx
  5a:	ff 2e 00 00 [ 	]*ljmp   \*0	5c: (R_386_)?(dir)?16	xxx
d34 1
a34 1
  69:	ff 16 00 00 [ 	]*call   \*0	6b: (R_386_)?(dir)?16	xxx
d37 2
a38 2
  71:	ff 9d 00 00 [ 	]*lcall  \*0\(%di\)	73: (R_386_)?(dir)?16	xxx
  75:	ff 1e 00 00 [ 	]*lcall  \*0	77: (R_386_)?(dir)?16	xxx
@


1.1
log
@gas/testsuite/ChangeLog
	* gas/i386/general.{s,l}: Move 16 bit jmp and call tests from here
	* gas/i386/jump16.{s,d}: To here.
	* gas/i386/jump.{s,d}: New files.  Duplicate 32 bit jmp and call
	tests in general.s so that objdump is exercised.

	* gas/i386/i386.exp: Call new tests.
@
text
@d10 1
a10 1
   2:	e9 (fe|fb) ff [ 	]*jmp    (0x3|0 <.text>)	3: (R_386_PC)?(DISP)?16	xxx
d18 1
a18 1
  25:	66 e8 (fc|d5) ff ff ff [ 	]*calll  (0x27|0 <.text>)	27: (R_386_PC)?(DISP)?32	xxx
d33 1
a33 1
  66:	e8 (fe|97) ff [ 	]*call   (0x67|0 <.text>)	67: (R_386_PC)?(DISP)?16	xxx
@

