head	1.9;
access;
symbols
	binutils-2_24-branch:1.9.0.32
	binutils-2_24-branchpoint:1.9
	binutils-2_21_1:1.9
	binutils-2_23_2:1.9
	binutils-2_23_1:1.9
	binutils-2_23:1.9
	binutils-2_23-branch:1.9.0.30
	binutils-2_23-branchpoint:1.9
	binutils-2_22_branch:1.9.0.28
	binutils-2_22:1.9
	binutils-2_22-branch:1.9.0.26
	binutils-2_22-branchpoint:1.9
	binutils-2_21:1.9
	binutils-2_21-branch:1.9.0.24
	binutils-2_21-branchpoint:1.9
	binutils-2_20_1:1.9
	binutils-2_20:1.9
	binutils-arc-20081103-branch:1.9.0.22
	binutils-arc-20081103-branchpoint:1.9
	binutils-2_20-branch:1.9.0.20
	binutils-2_20-branchpoint:1.9
	dje-cgen-play1-branch:1.9.0.18
	dje-cgen-play1-branchpoint:1.9
	arc-20081103-branch:1.9.0.16
	arc-20081103-branchpoint:1.9
	binutils-2_19_1:1.9
	binutils-2_19:1.9
	binutils-2_19-branch:1.9.0.14
	binutils-2_19-branchpoint:1.9
	binutils-2_18:1.9
	binutils-2_18-branch:1.9.0.12
	binutils-2_18-branchpoint:1.9
	binutils-csl-coldfire-4_1-32:1.9
	binutils-csl-sourcerygxx-4_1-32:1.9
	binutils-csl-innovasic-fido-3_4_4-33:1.9
	binutils-csl-sourcerygxx-3_4_4-32:1.9
	binutils-csl-coldfire-4_1-30:1.9
	binutils-csl-sourcerygxx-4_1-30:1.9
	binutils-csl-coldfire-4_1-28:1.9
	binutils-csl-sourcerygxx-4_1-29:1.9
	binutils-csl-sourcerygxx-4_1-28:1.9
	binutils-csl-arm-2006q3-27:1.9
	binutils-csl-sourcerygxx-4_1-27:1.9
	binutils-csl-arm-2006q3-26:1.9
	binutils-csl-sourcerygxx-4_1-26:1.9
	binutils-csl-sourcerygxx-4_1-25:1.9
	binutils-csl-sourcerygxx-4_1-24:1.9
	binutils-csl-sourcerygxx-4_1-23:1.9
	binutils-csl-sourcerygxx-4_1-21:1.9
	binutils-csl-arm-2006q3-21:1.9
	binutils-csl-sourcerygxx-4_1-22:1.9
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.9
	binutils-csl-sourcerygxx-4_1-20:1.9
	binutils-csl-arm-2006q3-19:1.9
	binutils-csl-sourcerygxx-4_1-19:1.9
	binutils-csl-sourcerygxx-4_1-18:1.9
	binutils-csl-renesas-4_1-9:1.9
	binutils-csl-sourcerygxx-3_4_4-25:1.9
	binutils-csl-renesas-4_1-8:1.9
	binutils-csl-renesas-4_1-7:1.9
	binutils-csl-renesas-4_1-6:1.9
	binutils-csl-sourcerygxx-4_1-17:1.9
	binutils-csl-sourcerygxx-4_1-14:1.9
	binutils-csl-sourcerygxx-4_1-15:1.9
	binutils-csl-sourcerygxx-4_1-13:1.9
	binutils-2_17:1.9
	binutils-csl-sourcerygxx-4_1-12:1.9
	binutils-csl-sourcerygxx-3_4_4-21:1.9
	binutils-csl-wrs-linux-3_4_4-24:1.9
	binutils-csl-wrs-linux-3_4_4-23:1.9
	binutils-csl-sourcerygxx-4_1-9:1.9
	binutils-csl-sourcerygxx-4_1-8:1.9
	binutils-csl-sourcerygxx-4_1-7:1.9
	binutils-csl-arm-2006q1-6:1.9
	binutils-csl-sourcerygxx-4_1-6:1.9
	binutils-csl-wrs-linux-3_4_4-22:1.9
	binutils-csl-coldfire-4_1-11:1.9
	binutils-csl-sourcerygxx-3_4_4-19:1.9
	binutils-csl-coldfire-4_1-10:1.9
	binutils-csl-sourcerygxx-4_1-5:1.9
	binutils-csl-sourcerygxx-4_1-4:1.9
	binutils-csl-wrs-linux-3_4_4-21:1.9
	binutils-csl-morpho-4_1-4:1.9
	binutils-csl-sourcerygxx-3_4_4-17:1.9
	binutils-csl-wrs-linux-3_4_4-20:1.9
	binutils-2_17-branch:1.9.0.10
	binutils-2_17-branchpoint:1.9
	binutils-csl-2_17-branch:1.9.0.8
	binutils-csl-2_17-branchpoint:1.9
	binutils-csl-gxxpro-3_4-branch:1.9.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.9
	binutils-2_16_1:1.9
	binutils-csl-arm-2005q1b:1.9
	binutils-2_16:1.9
	binutils-csl-arm-2005q1a:1.9
	binutils-csl-arm-2005q1-branch:1.9.0.4
	binutils-csl-arm-2005q1-branchpoint:1.9
	binutils-2_16-branch:1.9.0.2
	binutils-2_16-branchpoint:1.9
	csl-arm-2004-q3d:1.8
	csl-arm-2004-q3:1.8
	binutils-2_15:1.8
	binutils-2_15-branchpoint:1.8
	csl-arm-2004-q1a:1.8
	csl-arm-2004-q1:1.8
	binutils-2_15-branch:1.8.0.14
	cagney_bfdfile-20040213-branch:1.8.0.12
	cagney_bfdfile-20040213-branchpoint:1.8
	cagney_bigcore-20040122-branch:1.8.0.10
	cagney_bigcore-20040122-branchpoint:1.8
	csl-arm-2003-q4:1.8
	binutils-2_14:1.8
	binutils-2_14-branch:1.8.0.8
	binutils-2_14-branchpoint:1.8
	binutils-2_13_2_1:1.8
	binutils-2_13_2:1.8
	binutils-2_13_1:1.8
	binutils-2_13:1.8
	binutils-2_13-branchpoint:1.8
	binutils-2_13-branch:1.8.0.6
	binutils-2_12_1:1.8
	binutils-2_12:1.8
	binutils-2_12-branch:1.8.0.4
	binutils-2_12-branchpoint:1.8
	cygnus_cvs_20020108_pre:1.8
	binutils-2_11_2:1.8
	binutils-2_11_1:1.8
	binutils-2_11:1.8
	x86_64versiong3:1.8
	binutils-2_11-branch:1.8.0.2
	binutils-2_10_1:1.7
	binutils-2_10:1.7
	binutils-2_10-branch:1.7.0.2
	binutils-2_10-branchpoint:1.7
	binutils_latest_snapshot:1.9
	repo-unification-2000-02-06:1.6
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.9
date	2004.11.06.01.50.21;	author hjl;	state Exp;
branches;
next	1.8;

1.8
date	2000.04.03.12.20.55;	author amodra;	state Exp;
branches;
next	1.7;

1.7
date	2000.02.25.11.41.12;	author amodra;	state Exp;
branches;
next	1.6;

1.6
date	2000.01.21.10.18.33;	author amodra;	state Exp;
branches;
next	1.5;

1.5
date	2000.01.15.12.06.03;	author amodra;	state Exp;
branches;
next	1.4;

1.4
date	2000.01.15.04.46.00;	author amodra;	state Exp;
branches;
next	1.3;

1.3
date	99.08.20.11.59.19;	author amodra;	state Exp;
branches;
next	1.2;

1.2
date	99.08.09.04.41.00;	author ian;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.50;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.03.07.28.50;	author rth;	state Exp;
branches;
next	;


desc
@@


1.9
log
@2004-11-05  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/general.s: Add movzb.
	* gas/i386/general.l: Updated.
@
text
@.psize 0
.text
#test jumps and calls
1:	jmp	1b
	jmp	xxx
	jmp	*xxx
	jmp	xxx(,1)
	jmp	*%edi
	jmp	%edi
	jmp	*(%edi)
	jmp	(%edi)
	ljmp	*xxx(,%edi,4)
	ljmp	xxx(,%edi,4)
	ljmp	*xxx
	ljmp	xxx(,1)
	ljmp	$0x1234,$xxx

	call	1b
	call	xxx
	call	*xxx
	call	xxx(,1)
	call	*%edi
	call	%edi
	call	*(%edi)
	call	(%edi)
	lcall	*xxx(,%edi,4)
	lcall	xxx(,%edi,4)
	lcall	*xxx
	lcall	xxx(,1)
	lcall	$0x1234,$xxx

# test various segment reg insns
	push	%ds
	pushl	%ds
	pop	%ds
	popl	%ds
	mov	%ds,%eax
	movl	%ds,%eax
	movl	%ds,%ax
	mov	%eax,%ds
	movl	%ax,%ds
	movl	%eax,%ds

	pushw	%ds
	popw	%ds
	mov	%ds,%ax
	movw	%ds,%ax
	movw	%ds,%eax
	mov	%ax,%ds
	movw	%ax,%ds
	movw	%eax,%ds

# test various pushes
	pushl	$10
	pushw	$10
	push	$10
	pushl	$1000
	pushw	$1000
	push	$1000
	pushl	1f
	pushw	1f
	push	1f
	push	(1f-.)(%ebx)
	push	1f-.
# these, and others like them should have no operand size prefix
1:	lldt	%cx
	lmsw	%ax

# Just to make sure these don't become illegal due to over-enthusiastic
# register checking
	movsbw	%al,%di
	movsbl	%al,%ecx
	movswl	%ax,%ecx
	movzbw	%al,%di
	movzbl	%al,%ecx
	movzwl	%ax,%ecx

	in	%dx,%al
	in	%dx,%ax
	in	%dx,%eax
	in	(%dx),%al
	in	(%dx),%ax
	in	(%dx),%eax
	inb	%dx,%al
	inw	%dx,%ax
	inl	%dx,%eax
	inb	%dx
	inw	%dx
	inl	%dx
	inb	$255
	inw	$2
	inl	$4
	in	$13, %ax
	out	%al,%dx
	out	%ax,%dx
	out	%eax,%dx
	out	%al,(%dx)
	out	%ax,(%dx)
	out	%eax,(%dx)
	outb	%al,%dx
	outw	%ax,%dx
	outl	%eax,%dx
	outb	%dx
	outw	%dx
	outl	%dx
	outb	$255
	outw	$2
	outl	$4
	out	%ax, $13
# These are used in AIX.
	inw	(%dx)
	outw	(%dx)

	movsb
	cmpsw
	scasl
	xlatb
	movsl	%cs:(%esi),%es:(%edi)
	setae	(%ebx)
	setaeb	(%ebx)
	setae	%al

#these should give warnings
	orb	$1,%ax
	orb	$1,%eax
	orb	$1,%bx
	orb	$1,%ebx
	fldl	%st(1)
	fstl	%st(2)
	fstpl	%st(3)
	fcoml	%st(4)
	fcompl	%st(5)
	faddp	%st(1),%st
	fmulp	%st(2),%st
	fsubp	%st(3),%st
	fsubrp	%st(4),%st
	fdivp	%st(5),%st
	fdivrp	%st(6),%st
	fadd
	fsub
	fmul
	fdiv
	fsubr
	fdivr
#these should all be legal
	btl	%edx, 0x123456
	btl	%edx, %eax
	orb	$1,%al
	orb	$1,%bl
	movl	17,%eax
	mov	17,%eax
	inw	%dx,%ax
	inl	%dx,%eax
	inw	(%dx),%ax
	inl	(%dx),%eax
	in	(%dx),%al
	in	(%dx),%ax
	in	(%dx),%eax
	movzbl	(%edi,%esi),%edx
	movzbl	28(%ebp),%eax
	movzbl	%al,%eax
	movzbl	%cl,%esi
	xlat	%es:(%ebx)
	xlat
	xlatb
1:	fstp	%st(0)
	loop	1b
	divb    %cl 
	divw    %cx 
	divl    %ecx
	div	%cl
	div	%cx
	div	%ecx
	div	%cl,%al
	div	%cx,%ax
	div	%ecx,%eax
	mov	%si,%ds
	movl	%si,%ds		# warning here
	pushl	%ds
	push	%ds
	mov	0,%al
	mov	0x10000,%ax
	mov	%eax,%ebx
	pushf
	pushfl
	pushfw
	popf
	popfl
	popfw
	mov	%esi,(,%ebx,1)
	andb	$~0x80,foo

	and	$0xfffe,%ax
	and	$0xff00,%ax
	and	$0xfffe,%eax
	and	$0xff00,%eax
	and	$0xfffffffe,%eax

.code16
	and	$0xfffe,%ax
	and	$0xff00,%ax
	and	$0xfffe,%eax
	and	$0xff00,%eax
	and	$0xfffffffe,%eax

#check 16-bit code auto address prefix
.code16gcc
	leal	-256(%ebp),%edx
	mov	%al,-129(%ebp)
	mov	%ah,-128(%ebp)
	leal	-1760(%ebp),%ebx
	movl	%eax,140(%esp)

.code32
# Make sure that we won't remove movzb by accident.
	movzb	%al,%di
	movzb	%al,%ecx

	# Force a good alignment.
	.p2align	4,0
@


1.8
log
@Add 16-bit immediate tests.
@
text
@d214 5
@


1.7
log
@Extend the i386 gas testsuite to do some tests for intel_syntax.  Fix all
the errors exposed by this addition.  These were intel mode
"fi... word ptr", "fi... dword ptr", "jmp Imm seg, Imm offset", "out dx,al".
The failure with intel "out dx,al" was also present in att "out al,dx".
Extend testsuite to catch this case too.
@
text
@d3 29
d193 13
a212 29

.code32
	jmp	1b
	jmp	xxx
	jmp	*xxx
	jmp	xxx(,1)
	jmp	*%edi
	jmp	%edi
	jmp	*(%edi)
	jmp	(%edi)
	ljmp	*xxx(,%edi,4)
	ljmp	xxx(,%edi,4)
	ljmp	*xxx
	ljmp	xxx(,1)
	ljmp	$0x1234,$xxx

	call	1b
	call	xxx
	call	*xxx
	call	xxx(,1)
	call	*%edi
	call	%edi
	call	*(%edi)
	call	(%edi)
	lcall	*xxx(,%edi,4)
	lcall	xxx(,%edi,4)
	lcall	*xxx
	lcall	xxx(,1)
	lcall	$0x1234,$xxx
@


1.6
log
@gas/testsuite/ChangeLog
	* gas/i386/general.{s,l}: Move 16 bit jmp and call tests from here
	* gas/i386/jump16.{s,d}: To here.
	* gas/i386/jump.{s,d}: New files.  Duplicate 32 bit jmp and call
	tests in general.s so that objdump is exercised.

	* gas/i386/i386.exp: Call new tests.
@
text
@d64 9
d74 7
a80 2
	out	%al, $42
	in	$13, %ax
@


1.5
log
@Cosmetic changes to tc-i386.[ch] + extend x86 gas testsuite jmp and
call tests + tweak intel mode far call and jmp.
@
text
@a157 58
.extern xxx
	jmp	1b
	jmp	xxx
	jmp	*xxx
	jmp	xxx(,1)
	jmp	*%edi
	jmp	%edi
	jmp	*(%edi)
	jmp	(%edi)
	ljmp	*xxx(%edi)
	ljmp	xxx(%edi)
	ljmp	*xxx
	ljmp	xxx(,1)
	ljmp	$0x1234,$xxx

	call	1b
	call	xxx
	call	*xxx
	call	xxx(,1)
	call	*%edi
	call	%edi
	call	*(%edi)
	call	(%edi)
	lcall	*xxx(%edi)
	lcall	xxx(%edi)
	lcall	*xxx
	lcall	xxx(,1)
	lcall	$0x1234,$xxx

.code16
	jmp	1b
	jmp	xxx
	jmp	*xxx
	jmp	xxx(,1)
	jmp	*%di
	jmp	%di
	jmp	*(%di)
	jmp	(%di)
	ljmp	*xxx(%di)
	ljmp	xxx(%di)
	ljmp	*xxx
	ljmp	xxx(,1)
	ljmp	$0x1234,$xxx

	call	1b
	call	xxx
	call	*xxx
	call	xxx(,1)
	call	*%di
	call	%di
	call	*(%di)
	call	(%di)
	lcall	*xxx(%di)
	lcall	xxx(%di)
	lcall	*xxx
	lcall	xxx(,1)
	lcall	$0x1234,$xxx

@


1.4
log
@Add jmp and call tests to prevent intel mode lossage creeping in again.
@
text
@d158 58
a216 1
.extern xxx
@


1.3
log
@
*gas/config/tc-i386.c: Fix errors in displacement size when
automatically inferring an address prefex.
@
text
@d158 30
@


1.2
log
@	* gas/i386/float.s, gas/i386/float.l: Modify to work correctly
	when gas uses 2**4 alignment for .text.
	* gas/i386/general.s, gas/i386/general.l: Likewise.
	* gas/i386/katmai.s, gas/i386/katmai.d: Likewise.
	* gas/i386/modrm.s, gas/i386/modrm.l: Likewise.
	* gas/i386/prefix.s, gas/i386/prefix.d: Likewise.
@
text
@d150 8
@


1.1
log
@Initial revision
@
text
@d151 1
a151 2
	.word	0
	.byte	0
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

