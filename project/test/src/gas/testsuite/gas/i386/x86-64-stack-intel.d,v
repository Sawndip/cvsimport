head	1.6;
access;
symbols
	binutils-2_24-branch:1.6.0.2
	binutils-2_24-branchpoint:1.6
	binutils-2_21_1:1.3
	binutils-2_23_2:1.3
	binutils-2_23_1:1.3
	binutils-2_23:1.3
	binutils-2_23-branch:1.3.0.8
	binutils-2_23-branchpoint:1.3
	binutils-2_22_branch:1.3.0.6
	binutils-2_22:1.3
	binutils-2_22-branch:1.3.0.4
	binutils-2_22-branchpoint:1.3
	binutils-2_21:1.3
	binutils-2_21-branch:1.3.0.2
	binutils-2_21-branchpoint:1.3
	binutils-2_20_1:1.2
	binutils-2_20:1.2
	binutils-arc-20081103-branch:1.2.0.12
	binutils-arc-20081103-branchpoint:1.2
	binutils-2_20-branch:1.2.0.10
	binutils-2_20-branchpoint:1.2
	dje-cgen-play1-branch:1.2.0.8
	dje-cgen-play1-branchpoint:1.2
	arc-20081103-branch:1.2.0.6
	arc-20081103-branchpoint:1.2
	binutils-2_19_1:1.2
	binutils-2_19:1.2
	binutils-2_19-branch:1.2.0.4
	binutils-2_19-branchpoint:1.2
	binutils-2_18:1.2
	binutils-2_18-branch:1.2.0.2
	binutils-2_18-branchpoint:1.2
	binutils-csl-coldfire-4_1-32:1.1
	binutils-csl-sourcerygxx-4_1-32:1.1
	binutils-csl-innovasic-fido-3_4_4-33:1.1
	binutils-csl-coldfire-4_1-30:1.1
	binutils-csl-sourcerygxx-4_1-30:1.1
	binutils-csl-coldfire-4_1-28:1.1
	binutils-csl-sourcerygxx-4_1-29:1.1
	binutils-csl-sourcerygxx-4_1-28:1.1
	binutils-csl-arm-2006q3-27:1.1
	binutils-csl-sourcerygxx-4_1-27:1.1
	binutils-csl-arm-2006q3-26:1.1
	binutils-csl-sourcerygxx-4_1-26:1.1
	binutils-csl-sourcerygxx-4_1-25:1.1
	binutils-csl-sourcerygxx-4_1-24:1.1
	binutils-csl-sourcerygxx-4_1-23:1.1
	binutils-csl-sourcerygxx-4_1-21:1.1
	binutils-csl-arm-2006q3-21:1.1
	binutils-csl-sourcerygxx-4_1-22:1.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.1
	binutils-csl-sourcerygxx-4_1-20:1.1
	binutils-csl-arm-2006q3-19:1.1
	binutils-csl-sourcerygxx-4_1-19:1.1
	binutils-csl-sourcerygxx-4_1-18:1.1
	binutils-csl-renesas-4_1-9:1.1
	binutils-csl-renesas-4_1-8:1.1
	binutils-csl-renesas-4_1-7:1.1
	binutils-csl-renesas-4_1-6:1.1
	binutils-csl-sourcerygxx-4_1-17:1.1
	binutils-csl-sourcerygxx-4_1-14:1.1
	binutils-csl-sourcerygxx-4_1-15:1.1
	binutils-csl-sourcerygxx-4_1-13:1.1
	binutils-2_17:1.1
	binutils-csl-sourcerygxx-4_1-12:1.1
	binutils-csl-sourcerygxx-3_4_4-21:1.1
	binutils-csl-sourcerygxx-4_1-9:1.1
	binutils-csl-sourcerygxx-4_1-8:1.1
	binutils-csl-sourcerygxx-4_1-7:1.1
	binutils-csl-arm-2006q1-6:1.1
	binutils-csl-sourcerygxx-4_1-6:1.1
	binutils-csl-coldfire-4_1-11:1.1
	binutils-csl-sourcerygxx-3_4_4-19:1.1
	binutils-csl-coldfire-4_1-10:1.1
	binutils-csl-sourcerygxx-4_1-5:1.1
	binutils-csl-sourcerygxx-4_1-4:1.1
	binutils-csl-morpho-4_1-4:1.1
	binutils-csl-sourcerygxx-3_4_4-17:1.1
	binutils-2_17-branch:1.1.0.4
	binutils-2_17-branchpoint:1.1
	binutils-csl-2_17-branch:1.1.0.2
	binutils-csl-2_17-branchpoint:1.1
	binutils_latest_snapshot:1.6;
locks; strict;
comment	@# @;


1.6
date	2012.08.06.22.08.25;	author roland;	state Exp;
branches;
next	1.5;

1.5
date	2012.08.06.20.19.33;	author roland;	state Exp;
branches;
next	1.4;

1.4
date	2012.08.03.21.45.16;	author roland;	state Exp;
branches;
next	1.3;

1.3
date	2009.11.13.20.42.09;	author hjl;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.20.11.35.11;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.28.15.34.51;	author jbeulich;	state Exp;
branches;
next	;


desc
@@


1.6
log
@gas/testsuite/
	* gas/i386/x86-64-stack.s: Add cases for push segment register.
	* gas/i386/x86-64-stack.d: Updated.
	* gas/i386/x86-64-stack-suffix.d: Updated.
	* gas/i386/x86-64-stack-intel.d: Updated.
	* gas/i386/ilp32/x86-64-stack.d: Updated.
	* gas/i386/ilp32/x86-64-stack-suffix.d: Updated.
	* gas/i386/ilp32/x86-64-stack-intel.d: Updated.

opcodes/
	* i386-dis.c (print_insn): Print spaces between multiple excess
	prefixes.  Return actual number of excess prefixes consumed,
	not always one.

	* i386-dis.c (OP_REG): Ignore REX_B for segment register cases.
@
text
@#objdump: -dwMintel
#name: x86-64 stack-related opcodes (Intel mode)
#source: x86-64-stack.s

.*: +file format .*

Disassembly of section .text:

0+ <_start>:
[ 	]*[a-f0-9]+:	50                   	push   rax
[ 	]*[a-f0-9]+:	66 50                	push   ax
[ 	]*[a-f0-9]+:	48 50                	rex.W push rax
[ 	]*[a-f0-9]+:	66 48 50             	data32 rex.W push rax
[ 	]*[a-f0-9]+:	58                   	pop    rax
[ 	]*[a-f0-9]+:	66 58                	pop    ax
[ 	]*[a-f0-9]+:	48 58                	rex.W pop rax
[ 	]*[a-f0-9]+:	66 48 58             	data32 rex.W pop rax
[ 	]*[a-f0-9]+:	8f c0                	pop    rax
[ 	]*[a-f0-9]+:	66 8f c0             	pop    ax
[ 	]*[a-f0-9]+:	48 8f c0             	rex.W pop rax
[ 	]*[a-f0-9]+:	66 48 8f c0          	data32 rex.W pop rax
[ 	]*[a-f0-9]+:	8f 00                	pop    QWORD PTR \[rax\]
[ 	]*[a-f0-9]+:	66 8f 00             	pop    WORD PTR \[rax\]
[ 	]*[a-f0-9]+:	48 8f 00             	rex.W pop QWORD PTR \[rax\]
[ 	]*[a-f0-9]+:	66 48 8f 00          	data32 rex.W pop QWORD PTR \[rax\]
[ 	]*[a-f0-9]+:	ff d0                	call   rax
[ 	]*[a-f0-9]+:	66 ff d0             	call   ax
[ 	]*[a-f0-9]+:	48 ff d0             	rex.W call rax
[ 	]*[a-f0-9]+:	66 48 ff d0          	data32 rex.W call rax
[ 	]*[a-f0-9]+:	ff 10                	call   QWORD PTR \[rax\]
[ 	]*[a-f0-9]+:	66 ff 10             	call   WORD PTR \[rax\]
[ 	]*[a-f0-9]+:	48 ff 10             	rex.W call QWORD PTR \[rax\]
[ 	]*[a-f0-9]+:	66 48 ff 10          	data32 rex.W call QWORD PTR \[rax\]
[ 	]*[a-f0-9]+:	ff e0                	jmp    rax
[ 	]*[a-f0-9]+:	66 ff e0             	jmp    ax
[ 	]*[a-f0-9]+:	48 ff e0             	rex.W jmp rax
[ 	]*[a-f0-9]+:	66 48 ff e0          	data32 rex.W jmp rax
[ 	]*[a-f0-9]+:	ff 20                	jmp    QWORD PTR \[rax\]
[ 	]*[a-f0-9]+:	66 ff 20             	jmp    WORD PTR \[rax\]
[ 	]*[a-f0-9]+:	48 ff 20             	rex.W jmp QWORD PTR \[rax\]
[ 	]*[a-f0-9]+:	66 48 ff 20          	data32 rex.W jmp QWORD PTR \[rax\]
[ 	]*[a-f0-9]+:	ff f0                	push   rax
[ 	]*[a-f0-9]+:	66 ff f0             	push   ax
[ 	]*[a-f0-9]+:	48 ff f0             	rex.W push rax
[ 	]*[a-f0-9]+:	66 48 ff f0          	data32 rex.W push rax
[ 	]*[a-f0-9]+:	ff 30                	push   QWORD PTR \[rax\]
[ 	]*[a-f0-9]+:	66 ff 30             	push   WORD PTR \[rax\]
[ 	]*[a-f0-9]+:	48 ff 30             	rex.W push QWORD PTR \[rax\]
[ 	]*[a-f0-9]+:	66 48 ff 30          	data32 rex.W push QWORD PTR \[rax\]
[ 	]*[a-f0-9]+:	6a ff                	push   0xffffffffffffffff
[ 	]*[a-f0-9]+:	66 6a ff             	pushw  0xffff
[ 	]*[a-f0-9]+:	48 6a ff             	rex.W push 0xffffffffffffffff
[ 	]*[a-f0-9]+:	66 48 6a ff          	data32 rex.W push 0xffffffffffffffff
[ 	]*[a-f0-9]+:	68 01 02 03 04       	push   0x4030201
[ 	]*[a-f0-9]+:	66 68 01 02          	pushw  0x201
[ 	]*[a-f0-9]+:	03 04 48             	add    eax,DWORD PTR \[rax\+rcx\*2\]
[ 	]*[a-f0-9]+:	68 01 02 03 04       	push   0x4030201
[ 	]*[a-f0-9]+:	66 48 68 01 02 03 04 	data32 rex.W push 0x4030201
[ 	]*[a-f0-9]+:	0f a8                	push   gs
[ 	]*[a-f0-9]+:	66 0f a8             	pushw  gs
[ 	]*[a-f0-9]+:	48 0f a8             	rex.W push gs
[ 	]*[a-f0-9]+:	66 48 0f a8          	data32 rex.W push gs
[ 	]*[a-f0-9]+:	41 0f a8             	rex.B push gs
[ 	]*[a-f0-9]+:	66 41 0f a8          	rex.B pushw gs
[ 	]*[a-f0-9]+:	48                   	rex.W
[ 	]*[a-f0-9]+:	41 0f a8             	rex.B push gs
[ 	]*[a-f0-9]+:	66 48                	data16 rex.W
[ 	]*[a-f0-9]+:	41 0f a8             	rex.B push gs
[ 	]*[a-f0-9]+:	90                   	nop
#pass
@


1.5
log
@gas/testsuite/
	* gas/i386/x86-64-stack.s: Add cases for push immediate.
	* gas/testsuite/gas/i386/ilp32/x86-64-stack-intel.d: Updated.
	* gas/testsuite/gas/i386/ilp32/x86-64-stack-suffix.d: Updated.
	* gas/testsuite/gas/i386/ilp32/x86-64-stack.d: Updated.
	* gas/testsuite/gas/i386/x86-64-stack-intel.d: Updated.
	* gas/testsuite/gas/i386/x86-64-stack-suffix.d: Updated.
	* gas/testsuite/gas/i386/x86-64-stack.d: Updated.

opcodes/
	* i386-dis.c (OP_sI): In b_T_mode and v_mode, REX_W trumps DFLAG.
	(putop): For 'T', 'U', and 'V', treat REX_W like DFLAG.
	(intel_operand_size): For stack_v_mode, treat REX_W like DFLAG.
	(OP_E_register): Likewise.
	(OP_REG): For low 8 whole registers, treat REX_W like DFLAG.
@
text
@d59 10
@


1.4
log
@gas/testsuite/
* gas/i386/x86-64-stack.s (try): Also try just rex.W (0x48) prefix.
* gas/testsuite/gas/i386/ilp32/x86-64-stack-intel.d: Updated.
* gas/testsuite/gas/i386/ilp32/x86-64-stack-suffix.d: Updated.
* gas/testsuite/gas/i386/ilp32/x86-64-stack.d: Updated.
* gas/testsuite/gas/i386/x86-64-stack-intel.d: Updated.
* gas/testsuite/gas/i386/x86-64-stack-suffix.d: Updated.
* gas/testsuite/gas/i386/x86-64-stack.d: Updated.
@
text
@d13 1
a13 1
[ 	]*[a-f0-9]+:	66 48 50             	data32 push rax
d17 1
a17 1
[ 	]*[a-f0-9]+:	66 48 58             	data32 pop rax
d21 1
a21 1
[ 	]*[a-f0-9]+:	66 48 8f c0          	data32 pop rax
d25 1
a25 1
[ 	]*[a-f0-9]+:	66 48 8f 00          	data32 pop QWORD PTR \[rax\]
d29 1
a29 1
[ 	]*[a-f0-9]+:	66 48 ff d0          	data32 call rax
d33 1
a33 1
[ 	]*[a-f0-9]+:	66 48 ff 10          	data32 call QWORD PTR \[rax\]
d37 1
a37 1
[ 	]*[a-f0-9]+:	66 48 ff e0          	data32 jmp rax
d41 1
a41 1
[ 	]*[a-f0-9]+:	66 48 ff 20          	data32 jmp QWORD PTR \[rax\]
d45 1
a45 1
[ 	]*[a-f0-9]+:	66 48 ff f0          	data32 push rax
d49 11
a59 1
[ 	]*[a-f0-9]+:	66 48 ff 30          	data32 push QWORD PTR \[rax\]
@


1.3
log
@Rewrite prefix processing.

gas/testsuite/

2009-11-13  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/i386.exp: Run long-1, long-1-intel, x86-64-long-1,
	and x86-64-long-1-intel.

	* gas/i386/long-1-intel.d: New.
	* gas/i386/long-1.d: Likewise.
	* gas/i386/long-1.s: Likewise.
	* gas/i386/x86-64-long-1-intel.d: Likewise.
	* gas/i386/x86-64-long-1.d: Likewise.
	* gas/i386/x86-64-long-1.s: Likewise.

	* gas/i386/jump16.d: Updated for prefix processing.
	* gas/i386/naked.d: Likewise.
	* gas/i386/nops-1-core2.d: Likewise.
	* gas/i386/nops-1-i686.d: Likewise.
	* gas/i386/nops-3-i686.d: Likewise.
	* gas/i386/nops-4-i686.d: Likewise.
	* gas/i386/nops-5-i686.d: Likewise.
	* gas/i386/nops-5.d: Likewise.
	* gas/i386/prefix.d: Likewise.
	* gas/i386/rep.d: Likewise.
	* gas/i386/string-ok.d: Likewise.
	* gas/i386/x86-64-addr32-intel.d: Likewise.
	* gas/i386/x86-64-addr32.d: Likewise.
	* gas/i386/x86-64-cbw-intel.d: Likewise.
	* gas/i386/x86-64-cbw.d: Likewise.
	* gas/i386/x86-64-io-intel.d: Likewise.
	* gas/i386/x86-64-io-suffix.d: Likewise.
	* gas/i386/x86-64-io.d: Likewise.
	* gas/i386/x86-64-lwp.d: Likewise.
	* gas/i386/x86-64-nops-1-core2.d: Likewise.
	* gas/i386/x86-64-nops-1-nocona.d: Likewise.
	* gas/i386/x86-64-nops-1.d: Likewise.
	* gas/i386/x86-64-nops-2.d: Likewise.
	* gas/i386/x86-64-nops-3.d: Likewise.
	* gas/i386/x86-64-nops-4-core2.d: Likewise.
	* gas/i386/x86-64-nops-4.d: Likewise.
	* gas/i386/x86-64-nops-5-k8.d: Likewise.
	* gas/i386/x86-64-nops-5.d: Likewise.
	* gas/i386/x86-64-rep.d: Likewise.
	* gas/i386/x86-64-stack-intel.d: Likewise.
	* gas/i386/x86-64-stack-suffix.d: Likewise.
	* gas/i386/x86-64-stack.d: Likewise.

ld/testsuite/

2009-11-13  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-x86-64/tlsbin.dd: Updated for prefix processing.
	* ld-x86-64/tlsgdesc.dd: Likewise.
	* ld-x86-64/tlsld1.dd: Likewise.
	* ld-x86-64/tlspic.dd: Likewise.

opcodes/

2009-11-13  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-dis.c (ckprefix): Updated to return 0 if number of
	prefixes > 14 and record the last position for each prefix.
	(lock_prefix): Removed.
	(data_prefix): Likewise.
	(addr_prefix): Likewise.
	(repz_prefix): Likewise.
	(repnz_prefix): Likewise.
	(last_lock_prefix): New.
	(last_repz_prefix): Likewise.
	(last_repnz_prefix): Likewise.
	(last_data_prefix): Likewise.
	(last_addr_prefix): Likewise.
	(last_rex_prefix): Likewise.
	(last_seg_prefix): Likewise.
	(MAX_CODE_LENGTH): Likewise.
	(ADDR16_PREFIX): Likewise.
	(ADDR32_PREFIX): Likewise.
	(DATA16_PREFIX): Likewise.
	(DATA32_PREFIX): Likewise.
	(REP_PREFIX): Likewise.
	(seg_prefix): Likewise.
	(all_prefixes): Change size to MAX_CODE_LENGTH - 1.
	(prefix_name): Handle ADDR16_PREFIX, ADDR32_PREFIX,
	DATA16_PREFIX, DATA32_PREFIX and REP_PREFIX.
	(get_valid_dis386): Updated.
	(OP_C): Likewise.
	(OP_Monitor): Likewise.
	(REP_Fixup): Likewise.
	(print_insn): Display all prefixes.
	(putop): Set PREFIX_DATA on used_prefixes only if it is used.
	(intel_operand_size): Likewise.
	(OP_E_register): Likewise.
	(OP_G): Likewise.
	(OP_REG): Likewise.
	(OP_IMREG): Likewise.
	(OP_I): Likewise.
	(OP_I64): Likewise.
	(OP_sI): Likewise.
	(CRC32_Fixup): Likewise.
	(MOVBE_Fixup): Likewise.
	(OP_E_memory): Set REFIX_DATA on used_prefixes when it is used
	in 16bit mode.
	(OP_J): Set REX_W used if it is used. Set PREFIX_DATA on
	used_prefixes only if it is used.
@
text
@d12 1
d16 1
d20 1
d24 1
d28 1
d32 1
d36 1
d40 1
d44 1
d48 1
@


1.2
log
@Add x86_64-mingw64 target
@
text
@d10 30
a39 30
[	 ]*[0-9a-f]+:[	 ]+50[	 ]+push[	 ]+rax
[	 ]*[0-9a-f]+:[	 ]+66 50[	 ]+push[	 ]+ax
[	 ]*[0-9a-f]+:[	 ]+66 48 50[	 ]+push[	 ]+rax
[	 ]*[0-9a-f]+:[	 ]+58[	 ]+pop[	 ]+rax
[	 ]*[0-9a-f]+:[	 ]+66 58[	 ]+pop[	 ]+ax
[	 ]*[0-9a-f]+:[	 ]+66 48 58[	 ]+pop[	 ]+rax
[	 ]*[0-9a-f]+:[	 ]+8f c0[	 ]+pop[	 ]+rax
[	 ]*[0-9a-f]+:[	 ]+66 8f c0[	 ]+pop[	 ]+ax
[	 ]*[0-9a-f]+:[	 ]+66 48 8f c0[	 ]+pop[	 ]+rax
[	 ]*[0-9a-f]+:[	 ]+8f 00[	 ]+pop[	 ]+QWORD PTR \[rax\]
[	 ]*[0-9a-f]+:[	 ]+66 8f 00[	 ]+pop[	 ]+WORD PTR \[rax\]
[	 ]*[0-9a-f]+:[	 ]+66 48 8f 00[	 ]+pop[	 ]+QWORD PTR \[rax\]
[	 ]*[0-9a-f]+:[	 ]+ff d0[	 ]+call[	 ]+rax
[	 ]*[0-9a-f]+:[	 ]+66 ff d0[	 ]+call[	 ]+ax
[	 ]*[0-9a-f]+:[	 ]+66 48 ff d0[	 ]+call[	 ]+rax
[	 ]*[0-9a-f]+:[	 ]+ff 10[	 ]+call[	 ]+QWORD PTR \[rax\]
[	 ]*[0-9a-f]+:[	 ]+66 ff 10[	 ]+call[	 ]+WORD PTR \[rax\]
[	 ]*[0-9a-f]+:[	 ]+66 48 ff 10[	 ]+call[	 ]+QWORD PTR \[rax\]
[	 ]*[0-9a-f]+:[	 ]+ff e0[	 ]+jmp[	 ]+rax
[	 ]*[0-9a-f]+:[	 ]+66 ff e0[	 ]+jmp[	 ]+ax
[	 ]*[0-9a-f]+:[	 ]+66 48 ff e0[	 ]+jmp[	 ]+rax
[	 ]*[0-9a-f]+:[	 ]+ff 20[	 ]+jmp[	 ]+QWORD PTR \[rax\]
[	 ]*[0-9a-f]+:[	 ]+66 ff 20[	 ]+jmp[	 ]+WORD PTR \[rax\]
[	 ]*[0-9a-f]+:[	 ]+66 48 ff 20[	 ]+jmp[	 ]+QWORD PTR \[rax\]
[	 ]*[0-9a-f]+:[	 ]+ff f0[	 ]+push[	 ]+rax
[	 ]*[0-9a-f]+:[	 ]+66 ff f0[	 ]+push[	 ]+ax
[	 ]*[0-9a-f]+:[	 ]+66 48 ff f0[	 ]+push[	 ]+rax
[	 ]*[0-9a-f]+:[	 ]+ff 30[	 ]+push[	 ]+QWORD PTR \[rax\]
[	 ]*[0-9a-f]+:[	 ]+66 ff 30[	 ]+push[	 ]+WORD PTR \[rax\]
[	 ]*[0-9a-f]+:[	 ]+66 48 ff 30[	 ]+push[	 ]+QWORD PTR \[rax\]
@


1.1
log
@gas/testsuite/
2005-09-28  Jan Beulich  <jbeulich@@novell.com>

	* gas/i386/x86-64-stack.s, gas/i386/x86-64-stack.d,
	gas/i386/x86-64-stack-suffix.d, gas/i386/x86-64-stack-intel.d: New.
	* gas/i386/i386.exp: Run new tests.

ld/testsuite/
2005-09-28  Jan Beulich  <jbeulich@@novell.com>

	* ld-x86-64/tlspic.dd: Adjust.

opcodes/
2005-09-28  Jan Beulich  <jbeulich@@novell.com>

	* i386-dis.c (stack_v_mode): Renamed from branch_v_mode.
	(indirEv): Use it.
	(stackEv): New.
	(Ob64, Ov64): Rename to Ob, Ov. Delete unused original definitions.
	(dis386): Document and use new 'V' meta character. Use it for
	single-byte push/pop opcode forms. Use stackEv for mod-r/m push/pop
	opcode forms. Correct typo in 'pop ss'. Replace Ob64/Ov64 by Ob/Ov.
	(putop): 'q' suffix for 'T' and 'U' meta depends on DFLAG. Mark
	data prefix as used whenever DFLAG was examined. Handle 'V'.
	(intel_operand_size): Use stack_v_mode.
	(OP_E): Use stack_v_mode, but handle only the special case of
	64-bit mode without operand size override here; fall through to
	v_mode case otherwise.
	(OP_REG): Special case rAX_reg ... rDI_reg only when 64-bit mode
	and no operand size override is present.
	(OP_J): Use get32s for obtaining the displacement also when rex64
	is present.
@
text
@d5 1
a5 1
.*: +file format elf64-x86-64
@

