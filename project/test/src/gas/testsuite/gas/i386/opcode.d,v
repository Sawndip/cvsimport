head	1.17;
access;
symbols
	binutils-2_24-branch:1.17.0.8
	binutils-2_24-branchpoint:1.17
	binutils-2_21_1:1.16
	binutils-2_23_2:1.17
	binutils-2_23_1:1.17
	binutils-2_23:1.17
	binutils-2_23-branch:1.17.0.6
	binutils-2_23-branchpoint:1.17
	binutils-2_22_branch:1.17.0.4
	binutils-2_22:1.17
	binutils-2_22-branch:1.17.0.2
	binutils-2_22-branchpoint:1.17
	binutils-2_21:1.16
	binutils-2_21-branch:1.16.0.2
	binutils-2_21-branchpoint:1.16
	binutils-2_20_1:1.15
	binutils-2_20:1.15
	binutils-arc-20081103-branch:1.13.0.8
	binutils-arc-20081103-branchpoint:1.13
	binutils-2_20-branch:1.15.0.4
	binutils-2_20-branchpoint:1.15
	dje-cgen-play1-branch:1.15.0.2
	dje-cgen-play1-branchpoint:1.15
	arc-20081103-branch:1.13.0.6
	arc-20081103-branchpoint:1.13
	binutils-2_19_1:1.13
	binutils-2_19:1.13
	binutils-2_19-branch:1.13.0.4
	binutils-2_19-branchpoint:1.13
	binutils-2_18:1.13
	binutils-2_18-branch:1.13.0.2
	binutils-2_18-branchpoint:1.13
	binutils-csl-coldfire-4_1-32:1.6
	binutils-csl-sourcerygxx-4_1-32:1.6
	binutils-csl-innovasic-fido-3_4_4-33:1.6
	binutils-csl-sourcerygxx-3_4_4-32:1.5
	binutils-csl-coldfire-4_1-30:1.6
	binutils-csl-sourcerygxx-4_1-30:1.6
	binutils-csl-coldfire-4_1-28:1.6
	binutils-csl-sourcerygxx-4_1-29:1.6
	binutils-csl-sourcerygxx-4_1-28:1.6
	binutils-csl-arm-2006q3-27:1.6
	binutils-csl-sourcerygxx-4_1-27:1.6
	binutils-csl-arm-2006q3-26:1.6
	binutils-csl-sourcerygxx-4_1-26:1.6
	binutils-csl-sourcerygxx-4_1-25:1.6
	binutils-csl-sourcerygxx-4_1-24:1.6
	binutils-csl-sourcerygxx-4_1-23:1.6
	binutils-csl-sourcerygxx-4_1-21:1.6
	binutils-csl-arm-2006q3-21:1.6
	binutils-csl-sourcerygxx-4_1-22:1.6
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.6
	binutils-csl-sourcerygxx-4_1-20:1.6
	binutils-csl-arm-2006q3-19:1.6
	binutils-csl-sourcerygxx-4_1-19:1.6
	binutils-csl-sourcerygxx-4_1-18:1.6
	binutils-csl-renesas-4_1-9:1.6
	binutils-csl-sourcerygxx-3_4_4-25:1.5
	binutils-csl-renesas-4_1-8:1.6
	binutils-csl-renesas-4_1-7:1.6
	binutils-csl-renesas-4_1-6:1.6
	binutils-csl-sourcerygxx-4_1-17:1.6
	binutils-csl-sourcerygxx-4_1-14:1.6
	binutils-csl-sourcerygxx-4_1-15:1.6
	binutils-csl-sourcerygxx-4_1-13:1.6
	binutils-2_17:1.6
	binutils-csl-sourcerygxx-4_1-12:1.6
	binutils-csl-sourcerygxx-3_4_4-21:1.6
	binutils-csl-wrs-linux-3_4_4-24:1.5
	binutils-csl-wrs-linux-3_4_4-23:1.5
	binutils-csl-sourcerygxx-4_1-9:1.6
	binutils-csl-sourcerygxx-4_1-8:1.6
	binutils-csl-sourcerygxx-4_1-7:1.6
	binutils-csl-arm-2006q1-6:1.6
	binutils-csl-sourcerygxx-4_1-6:1.6
	binutils-csl-wrs-linux-3_4_4-22:1.5
	binutils-csl-coldfire-4_1-11:1.6
	binutils-csl-sourcerygxx-3_4_4-19:1.6
	binutils-csl-coldfire-4_1-10:1.6
	binutils-csl-sourcerygxx-4_1-5:1.6
	binutils-csl-sourcerygxx-4_1-4:1.6
	binutils-csl-wrs-linux-3_4_4-21:1.5
	binutils-csl-morpho-4_1-4:1.6
	binutils-csl-sourcerygxx-3_4_4-17:1.6
	binutils-csl-wrs-linux-3_4_4-20:1.5
	binutils-2_17-branch:1.6.0.4
	binutils-2_17-branchpoint:1.6
	binutils-csl-2_17-branch:1.6.0.2
	binutils-csl-2_17-branchpoint:1.6
	binutils-csl-gxxpro-3_4-branch:1.5.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.5
	binutils-2_16_1:1.5
	binutils-csl-arm-2005q1b:1.5
	binutils-2_16:1.5
	binutils-csl-arm-2005q1a:1.5
	binutils-csl-arm-2005q1-branch:1.5.0.4
	binutils-csl-arm-2005q1-branchpoint:1.5
	binutils-2_16-branch:1.5.0.2
	binutils-2_16-branchpoint:1.5
	csl-arm-2004-q3d:1.4
	csl-arm-2004-q3:1.3
	binutils-2_15:1.3
	binutils-2_15-branchpoint:1.3
	csl-arm-2004-q1a:1.3
	csl-arm-2004-q1:1.3
	binutils-2_15-branch:1.3.0.12
	cagney_bfdfile-20040213-branch:1.3.0.10
	cagney_bfdfile-20040213-branchpoint:1.3
	cagney_bigcore-20040122-branch:1.3.0.8
	cagney_bigcore-20040122-branchpoint:1.3
	csl-arm-2003-q4:1.3
	binutils-2_14:1.3
	binutils-2_14-branch:1.3.0.6
	binutils-2_14-branchpoint:1.3
	binutils-2_13_2_1:1.3
	binutils-2_13_2:1.3
	binutils-2_13_1:1.3
	binutils-2_13:1.3
	binutils-2_13-branchpoint:1.3
	binutils-2_13-branch:1.3.0.4
	binutils-2_12_1:1.3
	binutils-2_12:1.3
	binutils-2_12-branch:1.3.0.2
	binutils-2_12-branchpoint:1.3
	cygnus_cvs_20020108_pre:1.3
	binutils-2_11_2:1.2
	binutils-2_11_1:1.2
	binutils-2_11:1.2
	x86_64versiong3:1.2
	binutils-2_11-branch:1.2.0.4
	binutils-2_10_1:1.2
	binutils-2_10:1.2
	binutils-2_10-branch:1.2.0.2
	binutils-2_10-branchpoint:1.2
	binutils_latest_snapshot:1.17
	repo-unification-2000-02-06:1.2
	binu_ss_19990721:1.2
	binu_ss_19990602:1.2
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.17
date	2011.01.18.17.08.13;	author hjl;	state Exp;
branches;
next	1.16;

1.16
date	2010.08.06.00.52.56;	author hjl;	state Exp;
branches;
next	1.15;

1.15
date	2008.12.18.22.47.28;	author hjl;	state Exp;
branches;
next	1.14;

1.14
date	2008.11.03.19.38.09;	author hjl;	state Exp;
branches;
next	1.13;

1.13
date	2007.04.27.04.22.00;	author hjl;	state Exp;
branches;
next	1.12;

1.12
date	2007.02.12.04.51.40;	author hjl;	state Exp;
branches;
next	1.11;

1.11
date	2006.12.29.21.48.48;	author hjl;	state Exp;
branches;
next	1.10;

1.10
date	2006.12.01.16.49.21;	author jbeulich;	state Exp;
branches;
next	1.9;

1.9
date	2006.12.01.15.17.32;	author jbeulich;	state Exp;
branches;
next	1.8;

1.8
date	2006.07.18.20.25.40;	author hjl;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.12.18.55.39;	author hjl;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.29.19.30.47;	author hjl;	state Exp;
branches;
next	1.5;

1.5
date	2004.11.10.04.29.55;	author amodra;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.04.09.16.05;	author jbeulich;	state Exp;
branches;
next	1.3;

1.3
date	2001.07.23.07.43.09;	author amodra;	state Exp;
branches;
next	1.2;

1.2
date	99.05.13.06.00.21;	author amodra;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	99.05.03.07.28.50;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.2.4.1
date	2001.09.04.02.00.08;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.28.50;	author rth;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Properly sign-extend byte.

gas/testsuite/

2011-01-18  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/intel.d: Updated.
	* gas/i386/opcode-intel.d: Likewise.
	* gas/i386/opcode-suffix.d: Likewise.
	* gas/i386/opcode.d: Likewise.

opcodes/

2011-01-18  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-dis.c (sIbT): New.
	(b_T_mode): Likewise.
	(dis386): Replace sIb with sIbT on "pushT".
	(x86_64_table): Replace sIb with Ib on "aam" and "aad".
	(OP_sI): Handle b_T_mode.  Properly sign-extend byte.
@
text
@#as: -J
#objdump: -dw
#name: i386 opcodes

.*: +file format .*

Disassembly of section .text:

0+000 <foo>:
   0:	00 90 90 90 90 90 [ 	]*add    %dl,-0x6f6f6f70\(%eax\)
   6:	01 90 90 90 90 90 [ 	]*add    %edx,-0x6f6f6f70\(%eax\)
   c:	02 90 90 90 90 90 [ 	]*add    -0x6f6f6f70\(%eax\),%dl
  12:	03 90 90 90 90 90 [ 	]*add    -0x6f6f6f70\(%eax\),%edx
  18:	04 90 [ 	]*add    \$0x90,%al
  1a:	05 90 90 90 90 [ 	]*add    \$0x90909090,%eax
  1f:	06 [ 	]*push   %es
  20:	07 [ 	]*pop    %es
  21:	08 90 90 90 90 90 [ 	]*or     %dl,-0x6f6f6f70\(%eax\)
  27:	09 90 90 90 90 90 [ 	]*or     %edx,-0x6f6f6f70\(%eax\)
  2d:	0a 90 90 90 90 90 [ 	]*or     -0x6f6f6f70\(%eax\),%dl
  33:	0b 90 90 90 90 90 [ 	]*or     -0x6f6f6f70\(%eax\),%edx
  39:	0c 90 [ 	]*or     \$0x90,%al
  3b:	0d 90 90 90 90 [ 	]*or     \$0x90909090,%eax
  40:	0e [ 	]*push   %cs
  41:	10 90 90 90 90 90 [ 	]*adc    %dl,-0x6f6f6f70\(%eax\)
  47:	11 90 90 90 90 90 [ 	]*adc    %edx,-0x6f6f6f70\(%eax\)
  4d:	12 90 90 90 90 90 [ 	]*adc    -0x6f6f6f70\(%eax\),%dl
  53:	13 90 90 90 90 90 [ 	]*adc    -0x6f6f6f70\(%eax\),%edx
  59:	14 90 [ 	]*adc    \$0x90,%al
  5b:	15 90 90 90 90 [ 	]*adc    \$0x90909090,%eax
  60:	16 [ 	]*push   %ss
  61:	17 [ 	]*pop    %ss
  62:	18 90 90 90 90 90 [ 	]*sbb    %dl,-0x6f6f6f70\(%eax\)
  68:	19 90 90 90 90 90 [ 	]*sbb    %edx,-0x6f6f6f70\(%eax\)
  6e:	1a 90 90 90 90 90 [ 	]*sbb    -0x6f6f6f70\(%eax\),%dl
  74:	1b 90 90 90 90 90 [ 	]*sbb    -0x6f6f6f70\(%eax\),%edx
  7a:	1c 90 [ 	]*sbb    \$0x90,%al
  7c:	1d 90 90 90 90 [ 	]*sbb    \$0x90909090,%eax
  81:	1e [ 	]*push   %ds
  82:	1f [ 	]*pop    %ds
  83:	20 90 90 90 90 90 [ 	]*and    %dl,-0x6f6f6f70\(%eax\)
  89:	21 90 90 90 90 90 [ 	]*and    %edx,-0x6f6f6f70\(%eax\)
  8f:	22 90 90 90 90 90 [ 	]*and    -0x6f6f6f70\(%eax\),%dl
  95:	23 90 90 90 90 90 [ 	]*and    -0x6f6f6f70\(%eax\),%edx
  9b:	24 90 [ 	]*and    \$0x90,%al
  9d:	25 90 90 90 90 [ 	]*and    \$0x90909090,%eax
  a2:	27 [ 	]*daa    
  a3:	28 90 90 90 90 90 [ 	]*sub    %dl,-0x6f6f6f70\(%eax\)
  a9:	29 90 90 90 90 90 [ 	]*sub    %edx,-0x6f6f6f70\(%eax\)
  af:	2a 90 90 90 90 90 [ 	]*sub    -0x6f6f6f70\(%eax\),%dl
  b5:	2b 90 90 90 90 90 [ 	]*sub    -0x6f6f6f70\(%eax\),%edx
  bb:	2c 90 [ 	]*sub    \$0x90,%al
  bd:	2d 90 90 90 90 [ 	]*sub    \$0x90909090,%eax
  c2:	2f [ 	]*das    
  c3:	30 90 90 90 90 90 [ 	]*xor    %dl,-0x6f6f6f70\(%eax\)
  c9:	31 90 90 90 90 90 [ 	]*xor    %edx,-0x6f6f6f70\(%eax\)
  cf:	32 90 90 90 90 90 [ 	]*xor    -0x6f6f6f70\(%eax\),%dl
  d5:	33 90 90 90 90 90 [ 	]*xor    -0x6f6f6f70\(%eax\),%edx
  db:	34 90 [ 	]*xor    \$0x90,%al
  dd:	35 90 90 90 90 [ 	]*xor    \$0x90909090,%eax
  e2:	37 [ 	]*aaa    
  e3:	38 90 90 90 90 90 [ 	]*cmp    %dl,-0x6f6f6f70\(%eax\)
  e9:	39 90 90 90 90 90 [ 	]*cmp    %edx,-0x6f6f6f70\(%eax\)
  ef:	3a 90 90 90 90 90 [ 	]*cmp    -0x6f6f6f70\(%eax\),%dl
  f5:	3b 90 90 90 90 90 [ 	]*cmp    -0x6f6f6f70\(%eax\),%edx
  fb:	3c 90 [ 	]*cmp    \$0x90,%al
  fd:	3d 90 90 90 90 [ 	]*cmp    \$0x90909090,%eax
 102:	3f [ 	]*aas    
 103:	40 [ 	]*inc    %eax
 104:	41 [ 	]*inc    %ecx
 105:	42 [ 	]*inc    %edx
 106:	43 [ 	]*inc    %ebx
 107:	44 [ 	]*inc    %esp
 108:	45 [ 	]*inc    %ebp
 109:	46 [ 	]*inc    %esi
 10a:	47 [ 	]*inc    %edi
 10b:	48 [ 	]*dec    %eax
 10c:	49 [ 	]*dec    %ecx
 10d:	4a [ 	]*dec    %edx
 10e:	4b [ 	]*dec    %ebx
 10f:	4c [ 	]*dec    %esp
 110:	4d [ 	]*dec    %ebp
 111:	4e [ 	]*dec    %esi
 112:	4f [ 	]*dec    %edi
 113:	50 [ 	]*push   %eax
 114:	51 [ 	]*push   %ecx
 115:	52 [ 	]*push   %edx
 116:	53 [ 	]*push   %ebx
 117:	54 [ 	]*push   %esp
 118:	55 [ 	]*push   %ebp
 119:	56 [ 	]*push   %esi
 11a:	57 [ 	]*push   %edi
 11b:	58 [ 	]*pop    %eax
 11c:	59 [ 	]*pop    %ecx
 11d:	5a [ 	]*pop    %edx
 11e:	5b [ 	]*pop    %ebx
 11f:	5c [ 	]*pop    %esp
 120:	5d [ 	]*pop    %ebp
 121:	5e [ 	]*pop    %esi
 122:	5f [ 	]*pop    %edi
 123:	60 [ 	]*pusha  
 124:	61 [ 	]*popa   
 125:	62 90 90 90 90 90 [ 	]*bound  %edx,-0x6f6f6f70\(%eax\)
 12b:	63 90 90 90 90 90 [ 	]*arpl   %dx,-0x6f6f6f70\(%eax\)
 131:	68 90 90 90 90 [ 	]*push   \$0x90909090
 136:	69 90 90 90 90 90 90 90 90 90 [ 	]*imul   \$0x90909090,-0x6f6f6f70\(%eax\),%edx
 140:	6a 90 [ 	]*push   \$0xffffff90
 142:	6b 90 90 90 90 90 90 [ 	]*imul   \$0xffffff90,-0x6f6f6f70\(%eax\),%edx
 149:	6c [ 	]*insb   \(%dx\),%es:\(%edi\)
 14a:	6d [ 	]*insl   \(%dx\),%es:\(%edi\)
 14b:	6e [ 	]*outsb  %ds:\(%esi\),\(%dx\)
 14c:	6f [ 	]*outsl  %ds:\(%esi\),\(%dx\)
 14d:	70 90 [ 	]*jo     (0x)?df.*
 14f:	71 90 [ 	]*jno    (0x)?e1.*
 151:	72 90 [ 	]*jb     (0x)?e3.*
 153:	73 90 [ 	]*jae    (0x)?e5.*
 155:	74 90 [ 	]*je     (0x)?e7.*
 157:	75 90 [ 	]*jne    (0x)?e9.*
 159:	76 90 [ 	]*jbe    (0x)?eb.*
 15b:	77 90 [ 	]*ja     (0x)?ed.*
 15d:	78 90 [ 	]*js     (0x)?ef.*
 15f:	79 90 [ 	]*jns    (0x)?f1.*
 161:	7a 90 [ 	]*jp     (0x)?f3.*
 163:	7b 90 [ 	]*jnp    (0x)?f5.*
 165:	7c 90 [ 	]*jl     (0x)?f7.*
 167:	7d 90 [ 	]*jge    (0x)?f9.*
 169:	7e 90 [ 	]*jle    (0x)?fb.*
 16b:	7f 90 [ 	]*jg     (0x)?fd.*
 16d:	80 90 90 90 90 90 90 [ 	]*adcb   \$0x90,-0x6f6f6f70\(%eax\)
 174:	81 90 90 90 90 90 90 90 90 90 [ 	]*adcl   \$0x90909090,-0x6f6f6f70\(%eax\)
 17e:	83 90 90 90 90 90 90 [ 	]*adcl   \$0xffffff90,-0x6f6f6f70\(%eax\)
 185:	84 90 90 90 90 90 [ 	]*test   %dl,-0x6f6f6f70\(%eax\)
 18b:	85 90 90 90 90 90 [ 	]*test   %edx,-0x6f6f6f70\(%eax\)
 191:	86 90 90 90 90 90 [ 	]*xchg   %dl,-0x6f6f6f70\(%eax\)
 197:	87 90 90 90 90 90 [ 	]*xchg   %edx,-0x6f6f6f70\(%eax\)
 19d:	88 90 90 90 90 90 [ 	]*mov    %dl,-0x6f6f6f70\(%eax\)
 1a3:	89 90 90 90 90 90 [ 	]*mov    %edx,-0x6f6f6f70\(%eax\)
 1a9:	8a 90 90 90 90 90 [ 	]*mov    -0x6f6f6f70\(%eax\),%dl
 1af:	8b 90 90 90 90 90 [ 	]*mov    -0x6f6f6f70\(%eax\),%edx
 1b5:	8c 90 90 90 90 90 [ 	]*mov    %ss,-0x6f6f6f70\(%eax\)
 1bb:	8d 90 90 90 90 90 [ 	]*lea    -0x6f6f6f70\(%eax\),%edx
 1c1:	8e 90 90 90 90 90 [ 	]*mov    -0x6f6f6f70\(%eax\),%ss
 1c7:	8f 80 90 90 90 90 [ 	]*popl   -0x6f6f6f70\(%eax\)
 1cd:	90 [ 	]*nop
 1ce:	91 [ 	]*xchg   %eax,%ecx
 1cf:	92 [ 	]*xchg   %eax,%edx
 1d0:	93 [ 	]*xchg   %eax,%ebx
 1d1:	94 [ 	]*xchg   %eax,%esp
 1d2:	95 [ 	]*xchg   %eax,%ebp
 1d3:	96 [ 	]*xchg   %eax,%esi
 1d4:	97 [ 	]*xchg   %eax,%edi
 1d5:	98 [ 	]*cwtl   
 1d6:	99 [ 	]*cltd   
 1d7:	9a 90 90 90 90 90 90 [ 	]*lcall  \$0x9090,\$0x90909090
 1de:	9b [ 	]*fwait
 1df:	9c [ 	]*pushf  
 1e0:	9d [ 	]*popf   
 1e1:	9e [ 	]*sahf   
 1e2:	9f [ 	]*lahf   
 1e3:	a0 90 90 90 90 [ 	]*mov    0x90909090,%al
 1e8:	a1 90 90 90 90 [ 	]*mov    0x90909090,%eax
 1ed:	a2 90 90 90 90 [ 	]*mov    %al,0x90909090
 1f2:	a3 90 90 90 90 [ 	]*mov    %eax,0x90909090
 1f7:	a4 [ 	]*movsb  %ds:\(%esi\),%es:\(%edi\)
 1f8:	a5 [ 	]*movsl  %ds:\(%esi\),%es:\(%edi\)
 1f9:	a6 [ 	]*cmpsb  %es:\(%edi\),%ds:\(%esi\)
 1fa:	a7 [ 	]*cmpsl  %es:\(%edi\),%ds:\(%esi\)
 1fb:	a8 90 [ 	]*test   \$0x90,%al
 1fd:	a9 90 90 90 90 [ 	]*test   \$0x90909090,%eax
 202:	aa [ 	]*stos   %al,%es:\(%edi\)
 203:	ab [ 	]*stos   %eax,%es:\(%edi\)
 204:	ac [ 	]*lods   %ds:\(%esi\),%al
 205:	ad [ 	]*lods   %ds:\(%esi\),%eax
 206:	ae [ 	]*scas   %es:\(%edi\),%al
 207:	af [ 	]*scas   %es:\(%edi\),%eax
 208:	b0 90 [ 	]*mov    \$0x90,%al
 20a:	b1 90 [ 	]*mov    \$0x90,%cl
 20c:	b2 90 [ 	]*mov    \$0x90,%dl
 20e:	b3 90 [ 	]*mov    \$0x90,%bl
 210:	b4 90 [ 	]*mov    \$0x90,%ah
 212:	b5 90 [ 	]*mov    \$0x90,%ch
 214:	b6 90 [ 	]*mov    \$0x90,%dh
 216:	b7 90 [ 	]*mov    \$0x90,%bh
 218:	b8 90 90 90 90 [ 	]*mov    \$0x90909090,%eax
 21d:	b9 90 90 90 90 [ 	]*mov    \$0x90909090,%ecx
 222:	ba 90 90 90 90 [ 	]*mov    \$0x90909090,%edx
 227:	bb 90 90 90 90 [ 	]*mov    \$0x90909090,%ebx
 22c:	bc 90 90 90 90 [ 	]*mov    \$0x90909090,%esp
 231:	bd 90 90 90 90 [ 	]*mov    \$0x90909090,%ebp
 236:	be 90 90 90 90 [ 	]*mov    \$0x90909090,%esi
 23b:	bf 90 90 90 90 [ 	]*mov    \$0x90909090,%edi
 240:	c0 90 90 90 90 90 90 [ 	]*rclb   \$0x90,-0x6f6f6f70\(%eax\)
 247:	c1 90 90 90 90 90 90 [ 	]*rcll   \$0x90,-0x6f6f6f70\(%eax\)
 24e:	c2 90 90 [ 	]*ret    \$0x9090
 251:	c3 [ 	]*ret    
 252:	c4 90 90 90 90 90 [ 	]*les    -0x6f6f6f70\(%eax\),%edx
 258:	c5 90 90 90 90 90 [ 	]*lds    -0x6f6f6f70\(%eax\),%edx
 25e:	c6 80 90 90 90 90 90 [ 	]*movb   \$0x90,-0x6f6f6f70\(%eax\)
 265:	c7 80 90 90 90 90 90 90 90 90 [ 	]*movl   \$0x90909090,-0x6f6f6f70\(%eax\)
 26f:	c8 90 90 90 [ 	]*enter  \$0x9090,\$0x90
 273:	c9 [ 	]*leave  
 274:	ca 90 90 [ 	]*lret   \$0x9090
 277:	cb [ 	]*lret   
 278:	cc [ 	]*int3   
 279:	cd 90 [ 	]*int    \$0x90
 27b:	ce [ 	]*into   
 27c:	cf [ 	]*iret   
 27d:	d0 90 90 90 90 90 [ 	]*rclb   -0x6f6f6f70\(%eax\)
 283:	d1 90 90 90 90 90 [ 	]*rcll   -0x6f6f6f70\(%eax\)
 289:	d2 90 90 90 90 90 [ 	]*rclb   %cl,-0x6f6f6f70\(%eax\)
 28f:	d3 90 90 90 90 90 [ 	]*rcll   %cl,-0x6f6f6f70\(%eax\)
 295:	d4 90 [ 	]*aam    \$0x90
 297:	d5 90 [ 	]*aad    \$0x90
 299:	d7 [ 	]*xlat   %ds:\(%ebx\)
 29a:	d8 90 90 90 90 90 [ 	]*fcoms  -0x6f6f6f70\(%eax\)
 2a0:	d9 90 90 90 90 90 [ 	]*fsts   -0x6f6f6f70\(%eax\)
 2a6:	da 90 90 90 90 90 [ 	]*ficoml -0x6f6f6f70\(%eax\)
 2ac:	db 90 90 90 90 90 [ 	]*fistl  -0x6f6f6f70\(%eax\)
 2b2:	dc 90 90 90 90 90 [ 	]*fcoml  -0x6f6f6f70\(%eax\)
 2b8:	dd 90 90 90 90 90 [ 	]*fstl   -0x6f6f6f70\(%eax\)
 2be:	de 90 90 90 90 90 [ 	]*ficom  -0x6f6f6f70\(%eax\)
 2c4:	df 90 90 90 90 90 [ 	]*fist   -0x6f6f6f70\(%eax\)
 2ca:	e0 90 [ 	]*loopne (0x)?25c.*
 2cc:	e1 90 [ 	]*loope  (0x)?25e.*
 2ce:	e2 90 [ 	]*loop   (0x)?260.*
 2d0:	e3 90 [ 	]*jecxz  (0x)?262.*
 2d2:	e4 90 [ 	]*in     \$0x90,%al
 2d4:	e5 90 [ 	]*in     \$0x90,%eax
 2d6:	e6 90 [ 	]*out    %al,\$0x90
 2d8:	e7 90 [ 	]*out    %eax,\$0x90
 2da:	e8 90 90 90 90 [ 	]*call   (0x)?9090936f.*
 2df:	e9 90 90 90 90 [ 	]*jmp    (0x)?90909374.*
 2e4:	ea 90 90 90 90 90 90 [ 	]*ljmp   \$0x9090,\$0x90909090
 2eb:	eb 90 [ 	]*jmp    (0x)?27d.*
 2ed:	ec [ 	]*in     \(%dx\),%al
 2ee:	ed [ 	]*in     \(%dx\),%eax
 2ef:	ee [ 	]*out    %al,\(%dx\)
 2f0:	ef [ 	]*out    %eax,\(%dx\)
 2f1:	f4 [ 	]*hlt    
 2f2:	f5 [ 	]*cmc    
 2f3:	f6 90 90 90 90 90 [ 	]*notb   -0x6f6f6f70\(%eax\)
 2f9:	f7 90 90 90 90 90 [ 	]*notl   -0x6f6f6f70\(%eax\)
 2ff:	f8 [ 	]*clc    
 300:	f9 [ 	]*stc    
 301:	fa [ 	]*cli    
 302:	fb [ 	]*sti    
 303:	fc [ 	]*cld    
 304:	fd [ 	]*std    
 305:	ff 90 90 90 90 90 [ 	]*call   \*-0x6f6f6f70\(%eax\)
 30b:	0f 00 90 90 90 90 90 [ 	]*lldt   -0x6f6f6f70\(%eax\)
 312:	0f 01 90 90 90 90 90 [ 	]*lgdtl  -0x6f6f6f70\(%eax\)
 319:	0f 02 90 90 90 90 90 [ 	]*lar    -0x6f6f6f70\(%eax\),%edx
 320:	0f 03 90 90 90 90 90 [ 	]*lsl    -0x6f6f6f70\(%eax\),%edx
 327:	0f 06 [ 	]*clts   
 329:	0f 08 [ 	]*invd   
 32b:	0f 09 [ 	]*wbinvd 
 32d:	0f 0b [ 	]*ud2    
 32f:	0f 20 d0 [ 	]*mov    %cr2,%eax
 332:	0f 21 d0 [ 	]*mov    %db2,%eax
 335:	0f 22 d0 [ 	]*mov    %eax,%cr2
 338:	0f 23 d0 [ 	]*mov    %eax,%db2
 33b:	0f 24 d0 [ 	]*mov    %tr2,%eax
 33e:	0f 26 d0 [ 	]*mov    %eax,%tr2
 341:	0f 30 [ 	]*wrmsr  
 343:	0f 31 [ 	]*rdtsc  
 345:	0f 32 [ 	]*rdmsr  
 347:	0f 33 [ 	]*rdpmc  
 349:	0f 40 90 90 90 90 90 [ 	]*cmovo  -0x6f6f6f70\(%eax\),%edx
 350:	0f 41 90 90 90 90 90 [ 	]*cmovno -0x6f6f6f70\(%eax\),%edx
 357:	0f 42 90 90 90 90 90 [ 	]*cmovb  -0x6f6f6f70\(%eax\),%edx
 35e:	0f 43 90 90 90 90 90 [ 	]*cmovae -0x6f6f6f70\(%eax\),%edx
 365:	0f 44 90 90 90 90 90 [ 	]*cmove  -0x6f6f6f70\(%eax\),%edx
 36c:	0f 45 90 90 90 90 90 [ 	]*cmovne -0x6f6f6f70\(%eax\),%edx
 373:	0f 46 90 90 90 90 90 [ 	]*cmovbe -0x6f6f6f70\(%eax\),%edx
 37a:	0f 47 90 90 90 90 90 [ 	]*cmova  -0x6f6f6f70\(%eax\),%edx
 381:	0f 48 90 90 90 90 90 [ 	]*cmovs  -0x6f6f6f70\(%eax\),%edx
 388:	0f 49 90 90 90 90 90 [ 	]*cmovns -0x6f6f6f70\(%eax\),%edx
 38f:	0f 4a 90 90 90 90 90 [ 	]*cmovp  -0x6f6f6f70\(%eax\),%edx
 396:	0f 4b 90 90 90 90 90 [ 	]*cmovnp -0x6f6f6f70\(%eax\),%edx
 39d:	0f 4c 90 90 90 90 90 [ 	]*cmovl  -0x6f6f6f70\(%eax\),%edx
 3a4:	0f 4d 90 90 90 90 90 [ 	]*cmovge -0x6f6f6f70\(%eax\),%edx
 3ab:	0f 4e 90 90 90 90 90 [ 	]*cmovle -0x6f6f6f70\(%eax\),%edx
 3b2:	0f 4f 90 90 90 90 90 [ 	]*cmovg  -0x6f6f6f70\(%eax\),%edx
 3b9:	0f 60 90 90 90 90 90 [ 	]*punpcklbw -0x6f6f6f70\(%eax\),%mm2
 3c0:	0f 61 90 90 90 90 90 [ 	]*punpcklwd -0x6f6f6f70\(%eax\),%mm2
 3c7:	0f 62 90 90 90 90 90 [ 	]*punpckldq -0x6f6f6f70\(%eax\),%mm2
 3ce:	0f 63 90 90 90 90 90 [ 	]*packsswb -0x6f6f6f70\(%eax\),%mm2
 3d5:	0f 64 90 90 90 90 90 [ 	]*pcmpgtb -0x6f6f6f70\(%eax\),%mm2
 3dc:	0f 65 90 90 90 90 90 [ 	]*pcmpgtw -0x6f6f6f70\(%eax\),%mm2
 3e3:	0f 66 90 90 90 90 90 [ 	]*pcmpgtd -0x6f6f6f70\(%eax\),%mm2
 3ea:	0f 67 90 90 90 90 90 [ 	]*packuswb -0x6f6f6f70\(%eax\),%mm2
 3f1:	0f 68 90 90 90 90 90 [ 	]*punpckhbw -0x6f6f6f70\(%eax\),%mm2
 3f8:	0f 69 90 90 90 90 90 [ 	]*punpckhwd -0x6f6f6f70\(%eax\),%mm2
 3ff:	0f 6a 90 90 90 90 90 [ 	]*punpckhdq -0x6f6f6f70\(%eax\),%mm2
 406:	0f 6b 90 90 90 90 90 [ 	]*packssdw -0x6f6f6f70\(%eax\),%mm2
 40d:	0f 6e 90 90 90 90 90 [ 	]*movd   -0x6f6f6f70\(%eax\),%mm2
 414:	0f 6f 90 90 90 90 90 [ 	]*movq   -0x6f6f6f70\(%eax\),%mm2
 41b:	0f 71 d0 90 [ 	]*psrlw  \$0x90,%mm0
 41f:	0f 72 d0 90 [ 	]*psrld  \$0x90,%mm0
 423:	0f 73 d0 90 [ 	]*psrlq  \$0x90,%mm0
 427:	0f 74 90 90 90 90 90 [ 	]*pcmpeqb -0x6f6f6f70\(%eax\),%mm2
 42e:	0f 75 90 90 90 90 90 [ 	]*pcmpeqw -0x6f6f6f70\(%eax\),%mm2
 435:	0f 76 90 90 90 90 90 [ 	]*pcmpeqd -0x6f6f6f70\(%eax\),%mm2
 43c:	0f 77 [ 	]*emms   
 43e:	0f 7e 90 90 90 90 90 [ 	]*movd   %mm2,-0x6f6f6f70\(%eax\)
 445:	0f 7f 90 90 90 90 90 [ 	]*movq   %mm2,-0x6f6f6f70\(%eax\)
 44c:	0f 80 90 90 90 90 [ 	]*jo     (0x)?909094e2.*
 452:	0f 81 90 90 90 90 [ 	]*jno    (0x)?909094e8.*
 458:	0f 82 90 90 90 90 [ 	]*jb     (0x)?909094ee.*
 45e:	0f 83 90 90 90 90 [ 	]*jae    (0x)?909094f4.*
 464:	0f 84 90 90 90 90 [ 	]*je     (0x)?909094fa.*
 46a:	0f 85 90 90 90 90 [ 	]*jne    (0x)?90909500.*
 470:	0f 86 90 90 90 90 [ 	]*jbe    (0x)?90909506.*
 476:	0f 87 90 90 90 90 [ 	]*ja     (0x)?9090950c.*
 47c:	0f 88 90 90 90 90 [ 	]*js     (0x)?90909512.*
 482:	0f 89 90 90 90 90 [ 	]*jns    (0x)?90909518.*
 488:	0f 8a 90 90 90 90 [ 	]*jp     (0x)?9090951e.*
 48e:	0f 8b 90 90 90 90 [ 	]*jnp    (0x)?90909524.*
 494:	0f 8c 90 90 90 90 [ 	]*jl     (0x)?9090952a.*
 49a:	0f 8d 90 90 90 90 [ 	]*jge    (0x)?90909530.*
 4a0:	0f 8e 90 90 90 90 [ 	]*jle    (0x)?90909536.*
 4a6:	0f 8f 90 90 90 90 [ 	]*jg     (0x)?9090953c.*
 4ac:	0f 90 80 90 90 90 90 [ 	]*seto   -0x6f6f6f70\(%eax\)
 4b3:	0f 91 80 90 90 90 90 [ 	]*setno  -0x6f6f6f70\(%eax\)
 4ba:	0f 92 80 90 90 90 90 [ 	]*setb   -0x6f6f6f70\(%eax\)
 4c1:	0f 93 80 90 90 90 90 [ 	]*setae  -0x6f6f6f70\(%eax\)
 4c8:	0f 94 80 90 90 90 90 [ 	]*sete   -0x6f6f6f70\(%eax\)
 4cf:	0f 95 80 90 90 90 90 [ 	]*setne  -0x6f6f6f70\(%eax\)
 4d6:	0f 96 80 90 90 90 90 [ 	]*setbe  -0x6f6f6f70\(%eax\)
 4dd:	0f 97 80 90 90 90 90 [ 	]*seta   -0x6f6f6f70\(%eax\)
 4e4:	0f 98 80 90 90 90 90 [ 	]*sets   -0x6f6f6f70\(%eax\)
 4eb:	0f 99 80 90 90 90 90 [ 	]*setns  -0x6f6f6f70\(%eax\)
 4f2:	0f 9a 80 90 90 90 90 [ 	]*setp   -0x6f6f6f70\(%eax\)
 4f9:	0f 9b 80 90 90 90 90 [ 	]*setnp  -0x6f6f6f70\(%eax\)
 500:	0f 9c 80 90 90 90 90 [ 	]*setl   -0x6f6f6f70\(%eax\)
 507:	0f 9d 80 90 90 90 90 [ 	]*setge  -0x6f6f6f70\(%eax\)
 50e:	0f 9e 80 90 90 90 90 [ 	]*setle  -0x6f6f6f70\(%eax\)
 515:	0f 9f 80 90 90 90 90 [ 	]*setg   -0x6f6f6f70\(%eax\)
 51c:	0f a0 [ 	]*push   %fs
 51e:	0f a1 [ 	]*pop    %fs
 520:	0f a2 [ 	]*cpuid  
 522:	0f a3 90 90 90 90 90 [ 	]*bt     %edx,-0x6f6f6f70\(%eax\)
 529:	0f a4 90 90 90 90 90 90 [ 	]*shld   \$0x90,%edx,-0x6f6f6f70\(%eax\)
 531:	0f a5 90 90 90 90 90 [ 	]*shld   %cl,%edx,-0x6f6f6f70\(%eax\)
 538:	0f a8 [ 	]*push   %gs
 53a:	0f a9 [ 	]*pop    %gs
 53c:	0f aa [ 	]*rsm    
 53e:	0f ab 90 90 90 90 90 [ 	]*bts    %edx,-0x6f6f6f70\(%eax\)
 545:	0f ac 90 90 90 90 90 90 [ 	]*shrd   \$0x90,%edx,-0x6f6f6f70\(%eax\)
 54d:	0f ad 90 90 90 90 90 [ 	]*shrd   %cl,%edx,-0x6f6f6f70\(%eax\)
 554:	0f af 90 90 90 90 90 [ 	]*imul   -0x6f6f6f70\(%eax\),%edx
 55b:	0f b0 90 90 90 90 90 [ 	]*cmpxchg %dl,-0x6f6f6f70\(%eax\)
 562:	0f b1 90 90 90 90 90 [ 	]*cmpxchg %edx,-0x6f6f6f70\(%eax\)
 569:	0f b2 90 90 90 90 90 [ 	]*lss    -0x6f6f6f70\(%eax\),%edx
 570:	0f b3 90 90 90 90 90 [ 	]*btr    %edx,-0x6f6f6f70\(%eax\)
 577:	0f b4 90 90 90 90 90 [ 	]*lfs    -0x6f6f6f70\(%eax\),%edx
 57e:	0f b5 90 90 90 90 90 [ 	]*lgs    -0x6f6f6f70\(%eax\),%edx
 585:	0f b6 90 90 90 90 90 [ 	]*movzbl -0x6f6f6f70\(%eax\),%edx
 58c:	0f b7 90 90 90 90 90 [ 	]*movzwl -0x6f6f6f70\(%eax\),%edx
 593:	0f b9 [ 	]*ud1    
 595:	0f bb 90 90 90 90 90 [ 	]*btc    %edx,-0x6f6f6f70\(%eax\)
 59c:	0f bc 90 90 90 90 90 [ 	]*bsf    -0x6f6f6f70\(%eax\),%edx
 5a3:	0f bd 90 90 90 90 90 [ 	]*bsr    -0x6f6f6f70\(%eax\),%edx
 5aa:	0f be 90 90 90 90 90 [ 	]*movsbl -0x6f6f6f70\(%eax\),%edx
 5b1:	0f bf 90 90 90 90 90 [ 	]*movswl -0x6f6f6f70\(%eax\),%edx
 5b8:	0f c0 90 90 90 90 90 [ 	]*xadd   %dl,-0x6f6f6f70\(%eax\)
 5bf:	0f c1 90 90 90 90 90 [ 	]*xadd   %edx,-0x6f6f6f70\(%eax\)
 5c6:	0f c8 [ 	]*bswap  %eax
 5c8:	0f c9 [ 	]*bswap  %ecx
 5ca:	0f ca [ 	]*bswap  %edx
 5cc:	0f cb [ 	]*bswap  %ebx
 5ce:	0f cc [ 	]*bswap  %esp
 5d0:	0f cd [ 	]*bswap  %ebp
 5d2:	0f ce [ 	]*bswap  %esi
 5d4:	0f cf [ 	]*bswap  %edi
 5d6:	0f d1 90 90 90 90 90 [ 	]*psrlw  -0x6f6f6f70\(%eax\),%mm2
 5dd:	0f d2 90 90 90 90 90 [ 	]*psrld  -0x6f6f6f70\(%eax\),%mm2
 5e4:	0f d3 90 90 90 90 90 [ 	]*psrlq  -0x6f6f6f70\(%eax\),%mm2
 5eb:	0f d5 90 90 90 90 90 [ 	]*pmullw -0x6f6f6f70\(%eax\),%mm2
 5f2:	0f d8 90 90 90 90 90 [ 	]*psubusb -0x6f6f6f70\(%eax\),%mm2
 5f9:	0f d9 90 90 90 90 90 [ 	]*psubusw -0x6f6f6f70\(%eax\),%mm2
 600:	0f db 90 90 90 90 90 [ 	]*pand   -0x6f6f6f70\(%eax\),%mm2
 607:	0f dc 90 90 90 90 90 [ 	]*paddusb -0x6f6f6f70\(%eax\),%mm2
 60e:	0f dd 90 90 90 90 90 [ 	]*paddusw -0x6f6f6f70\(%eax\),%mm2
 615:	0f df 90 90 90 90 90 [ 	]*pandn  -0x6f6f6f70\(%eax\),%mm2
 61c:	0f e1 90 90 90 90 90 [ 	]*psraw  -0x6f6f6f70\(%eax\),%mm2
 623:	0f e2 90 90 90 90 90 [ 	]*psrad  -0x6f6f6f70\(%eax\),%mm2
 62a:	0f e5 90 90 90 90 90 [ 	]*pmulhw -0x6f6f6f70\(%eax\),%mm2
 631:	0f e8 90 90 90 90 90 [ 	]*psubsb -0x6f6f6f70\(%eax\),%mm2
 638:	0f e9 90 90 90 90 90 [ 	]*psubsw -0x6f6f6f70\(%eax\),%mm2
 63f:	0f eb 90 90 90 90 90 [ 	]*por    -0x6f6f6f70\(%eax\),%mm2
 646:	0f ec 90 90 90 90 90 [ 	]*paddsb -0x6f6f6f70\(%eax\),%mm2
 64d:	0f ed 90 90 90 90 90 [ 	]*paddsw -0x6f6f6f70\(%eax\),%mm2
 654:	0f ef 90 90 90 90 90 [ 	]*pxor   -0x6f6f6f70\(%eax\),%mm2
 65b:	0f f1 90 90 90 90 90 [ 	]*psllw  -0x6f6f6f70\(%eax\),%mm2
 662:	0f f2 90 90 90 90 90 [ 	]*pslld  -0x6f6f6f70\(%eax\),%mm2
 669:	0f f3 90 90 90 90 90 [ 	]*psllq  -0x6f6f6f70\(%eax\),%mm2
 670:	0f f5 90 90 90 90 90 [ 	]*pmaddwd -0x6f6f6f70\(%eax\),%mm2
 677:	0f f8 90 90 90 90 90 [ 	]*psubb  -0x6f6f6f70\(%eax\),%mm2
 67e:	0f f9 90 90 90 90 90 [ 	]*psubw  -0x6f6f6f70\(%eax\),%mm2
 685:	0f fa 90 90 90 90 90 [ 	]*psubd  -0x6f6f6f70\(%eax\),%mm2
 68c:	0f fc 90 90 90 90 90 [ 	]*paddb  -0x6f6f6f70\(%eax\),%mm2
 693:	0f fd 90 90 90 90 90 [ 	]*paddw  -0x6f6f6f70\(%eax\),%mm2
 69a:	0f fe 90 90 90 90 90 [ 	]*paddd  -0x6f6f6f70\(%eax\),%mm2
 6a1:	66 01 90 90 90 90 90 [ 	]*add    %dx,-0x6f6f6f70\(%eax\)
 6a8:	66 03 90 90 90 90 90 [ 	]*add    -0x6f6f6f70\(%eax\),%dx
 6af:	66 05 90 90 [ 	]*add    \$0x9090,%ax
 6b3:	66 06 [ 	]*pushw  %es
 6b5:	66 07 [ 	]*popw   %es
 6b7:	66 09 90 90 90 90 90 [ 	]*or     %dx,-0x6f6f6f70\(%eax\)
 6be:	66 0b 90 90 90 90 90 [ 	]*or     -0x6f6f6f70\(%eax\),%dx
 6c5:	66 0d 90 90 [ 	]*or     \$0x9090,%ax
 6c9:	66 0e [ 	]*pushw  %cs
 6cb:	66 11 90 90 90 90 90 [ 	]*adc    %dx,-0x6f6f6f70\(%eax\)
 6d2:	66 13 90 90 90 90 90 [ 	]*adc    -0x6f6f6f70\(%eax\),%dx
 6d9:	66 15 90 90 [ 	]*adc    \$0x9090,%ax
 6dd:	66 16 [ 	]*pushw  %ss
 6df:	66 17 [ 	]*popw   %ss
 6e1:	66 19 90 90 90 90 90 [ 	]*sbb    %dx,-0x6f6f6f70\(%eax\)
 6e8:	66 1b 90 90 90 90 90 [ 	]*sbb    -0x6f6f6f70\(%eax\),%dx
 6ef:	66 1d 90 90 [ 	]*sbb    \$0x9090,%ax
 6f3:	66 1e [ 	]*pushw  %ds
 6f5:	66 1f [ 	]*popw   %ds
 6f7:	66 21 90 90 90 90 90 [ 	]*and    %dx,-0x6f6f6f70\(%eax\)
 6fe:	66 23 90 90 90 90 90 [ 	]*and    -0x6f6f6f70\(%eax\),%dx
 705:	66 25 90 90 [ 	]*and    \$0x9090,%ax
 709:	66 29 90 90 90 90 90 [ 	]*sub    %dx,-0x6f6f6f70\(%eax\)
 710:	66 2b 90 90 90 90 90 [ 	]*sub    -0x6f6f6f70\(%eax\),%dx
 717:	66 2d 90 90 [ 	]*sub    \$0x9090,%ax
 71b:	66 31 90 90 90 90 90 [ 	]*xor    %dx,-0x6f6f6f70\(%eax\)
 722:	66 33 90 90 90 90 90 [ 	]*xor    -0x6f6f6f70\(%eax\),%dx
 729:	66 35 90 90 [ 	]*xor    \$0x9090,%ax
 72d:	66 39 90 90 90 90 90 [ 	]*cmp    %dx,-0x6f6f6f70\(%eax\)
 734:	66 3b 90 90 90 90 90 [ 	]*cmp    -0x6f6f6f70\(%eax\),%dx
 73b:	66 3d 90 90 [ 	]*cmp    \$0x9090,%ax
 73f:	66 40 [ 	]*inc    %ax
 741:	66 41 [ 	]*inc    %cx
 743:	66 42 [ 	]*inc    %dx
 745:	66 43 [ 	]*inc    %bx
 747:	66 44 [ 	]*inc    %sp
 749:	66 45 [ 	]*inc    %bp
 74b:	66 46 [ 	]*inc    %si
 74d:	66 47 [ 	]*inc    %di
 74f:	66 48 [ 	]*dec    %ax
 751:	66 49 [ 	]*dec    %cx
 753:	66 4a [ 	]*dec    %dx
 755:	66 4b [ 	]*dec    %bx
 757:	66 4c [ 	]*dec    %sp
 759:	66 4d [ 	]*dec    %bp
 75b:	66 4e [ 	]*dec    %si
 75d:	66 4f [ 	]*dec    %di
 75f:	66 50 [ 	]*push   %ax
 761:	66 51 [ 	]*push   %cx
 763:	66 52 [ 	]*push   %dx
 765:	66 53 [ 	]*push   %bx
 767:	66 54 [ 	]*push   %sp
 769:	66 55 [ 	]*push   %bp
 76b:	66 56 [ 	]*push   %si
 76d:	66 57 [ 	]*push   %di
 76f:	66 58 [ 	]*pop    %ax
 771:	66 59 [ 	]*pop    %cx
 773:	66 5a [ 	]*pop    %dx
 775:	66 5b [ 	]*pop    %bx
 777:	66 5c [ 	]*pop    %sp
 779:	66 5d [ 	]*pop    %bp
 77b:	66 5e [ 	]*pop    %si
 77d:	66 5f [ 	]*pop    %di
 77f:	66 60 [ 	]*pushaw 
 781:	66 61 [ 	]*popaw  
 783:	66 62 90 90 90 90 90 [ 	]*bound  %dx,-0x6f6f6f70\(%eax\)
 78a:	66 68 90 90 [ 	]*pushw  \$0x9090
 78e:	66 69 90 90 90 90 90 90 90 [ 	]*imul   \$0x9090,-0x6f6f6f70\(%eax\),%dx
 797:	66 6a 90 [ 	]*pushw  \$0xff90
 79a:	66 6b 90 90 90 90 90 90 [ 	]*imul   \$0xff90,-0x6f6f6f70\(%eax\),%dx
 7a2:	66 6d [ 	]*insw   \(%dx\),%es:\(%edi\)
 7a4:	66 6f [ 	]*outsw  %ds:\(%esi\),\(%dx\)
 7a6:	66 81 90 90 90 90 90 90 90 [ 	]*adcw   \$0x9090,-0x6f6f6f70\(%eax\)
 7af:	66 83 90 90 90 90 90 90 [ 	]*adcw   \$0xff90,-0x6f6f6f70\(%eax\)
 7b7:	66 85 90 90 90 90 90 [ 	]*test   %dx,-0x6f6f6f70\(%eax\)
 7be:	66 87 90 90 90 90 90 [ 	]*xchg   %dx,-0x6f6f6f70\(%eax\)
 7c5:	66 89 90 90 90 90 90 [ 	]*mov    %dx,-0x6f6f6f70\(%eax\)
 7cc:	66 8b 90 90 90 90 90 [ 	]*mov    -0x6f6f6f70\(%eax\),%dx
 7d3:	8c 90 90 90 90 90 [ 	]*mov[w ]   %ss,-0x6f6f6f70\(%eax\)
 7d9:	66 8d 90 90 90 90 90 [ 	]*lea    -0x6f6f6f70\(%eax\),%dx
 7e0:	66 8f 80 90 90 90 90 [ 	]*popw   -0x6f6f6f70\(%eax\)
 7e7:	66 91 [ 	]*xchg   %ax,%cx
 7e9:	66 92 [ 	]*xchg   %ax,%dx
 7eb:	66 93 [ 	]*xchg   %ax,%bx
 7ed:	66 94 [ 	]*xchg   %ax,%sp
 7ef:	66 95 [ 	]*xchg   %ax,%bp
 7f1:	66 96 [ 	]*xchg   %ax,%si
 7f3:	66 97 [ 	]*xchg   %ax,%di
 7f5:	66 98 [ 	]*cbtw   
 7f7:	66 99 [ 	]*cwtd   
 7f9:	66 9a 90 90 90 90 [ 	]*lcallw \$0x9090,\$0x9090
 7ff:	66 9c [ 	]*pushfw 
 801:	66 9d [ 	]*popfw  
 803:	66 a1 90 90 90 90 [ 	]*mov    0x90909090,%ax
 809:	66 a3 90 90 90 90 [ 	]*mov    %ax,0x90909090
 80f:	66 a5 [ 	]*movsw  %ds:\(%esi\),%es:\(%edi\)
 811:	66 a7 [ 	]*cmpsw  %es:\(%edi\),%ds:\(%esi\)
 813:	66 a9 90 90 [ 	]*test   \$0x9090,%ax
 817:	66 ab [ 	]*stos   %ax,%es:\(%edi\)
 819:	66 ad [ 	]*lods   %ds:\(%esi\),%ax
 81b:	66 af [ 	]*scas   %es:\(%edi\),%ax
 81d:	66 b8 90 90 [ 	]*mov    \$0x9090,%ax
 821:	66 b9 90 90 [ 	]*mov    \$0x9090,%cx
 825:	66 ba 90 90 [ 	]*mov    \$0x9090,%dx
 829:	66 bb 90 90 [ 	]*mov    \$0x9090,%bx
 82d:	66 bc 90 90 [ 	]*mov    \$0x9090,%sp
 831:	66 bd 90 90 [ 	]*mov    \$0x9090,%bp
 835:	66 be 90 90 [ 	]*mov    \$0x9090,%si
 839:	66 bf 90 90 [ 	]*mov    \$0x9090,%di
 83d:	66 c1 90 90 90 90 90 90 [ 	]*rclw   \$0x90,-0x6f6f6f70\(%eax\)
 845:	66 c2 90 90 [ 	]*retw   \$0x9090
 849:	66 c3 [ 	]*retw   
 84b:	66 c4 90 90 90 90 90 [ 	]*les    -0x6f6f6f70\(%eax\),%dx
 852:	66 c5 90 90 90 90 90 [ 	]*lds    -0x6f6f6f70\(%eax\),%dx
 859:	66 c7 80 90 90 90 90 90 90 [ 	]*movw   \$0x9090,-0x6f6f6f70\(%eax\)
 862:	66 c8 90 90 90 [ 	]*enterw \$0x9090,\$0x90
 867:	66 c9 [ 	]*leavew 
 869:	66 ca 90 90 [ 	]*lretw  \$0x9090
 86d:	66 cb [ 	]*lretw  
 86f:	66 cf [ 	]*iretw  
 871:	66 d1 90 90 90 90 90 [ 	]*rclw   -0x6f6f6f70\(%eax\)
 878:	66 d3 90 90 90 90 90 [ 	]*rclw   %cl,-0x6f6f6f70\(%eax\)
 87f:	66 e5 90 [ 	]*in     \$0x90,%ax
 882:	66 e7 90 [ 	]*out    %ax,\$0x90
 885:	66 e8 8f 90 [ 	]*callw  (0x)?9918.*
 889:	66 ea 90 90 90 90 [ 	]*ljmpw  \$0x9090,\$0x9090
 88f:	66 ed [ 	]*in     \(%dx\),%ax
 891:	66 ef [ 	]*out    %ax,\(%dx\)
 893:	66 f7 90 90 90 90 90 [ 	]*notw   -0x6f6f6f70\(%eax\)
 89a:	66 ff 90 90 90 90 90 [ 	]*callw  \*-0x6f6f6f70\(%eax\)
 8a1:	66 0f 02 90 90 90 90 90 [ 	]*lar    -0x6f6f6f70\(%eax\),%dx
 8a9:	66 0f 03 90 90 90 90 90 [ 	]*lsl    -0x6f6f6f70\(%eax\),%dx
 8b1:	66 0f 40 90 90 90 90 90 [ 	]*cmovo  -0x6f6f6f70\(%eax\),%dx
 8b9:	66 0f 41 90 90 90 90 90 [ 	]*cmovno -0x6f6f6f70\(%eax\),%dx
 8c1:	66 0f 42 90 90 90 90 90 [ 	]*cmovb  -0x6f6f6f70\(%eax\),%dx
 8c9:	66 0f 43 90 90 90 90 90 [ 	]*cmovae -0x6f6f6f70\(%eax\),%dx
 8d1:	66 0f 44 90 90 90 90 90 [ 	]*cmove  -0x6f6f6f70\(%eax\),%dx
 8d9:	66 0f 45 90 90 90 90 90 [ 	]*cmovne -0x6f6f6f70\(%eax\),%dx
 8e1:	66 0f 46 90 90 90 90 90 [ 	]*cmovbe -0x6f6f6f70\(%eax\),%dx
 8e9:	66 0f 47 90 90 90 90 90 [ 	]*cmova  -0x6f6f6f70\(%eax\),%dx
 8f1:	66 0f 48 90 90 90 90 90 [ 	]*cmovs  -0x6f6f6f70\(%eax\),%dx
 8f9:	66 0f 49 90 90 90 90 90 [ 	]*cmovns -0x6f6f6f70\(%eax\),%dx
 901:	66 0f 4a 90 90 90 90 90 [ 	]*cmovp  -0x6f6f6f70\(%eax\),%dx
 909:	66 0f 4b 90 90 90 90 90 [ 	]*cmovnp -0x6f6f6f70\(%eax\),%dx
 911:	66 0f 4c 90 90 90 90 90 [ 	]*cmovl  -0x6f6f6f70\(%eax\),%dx
 919:	66 0f 4d 90 90 90 90 90 [ 	]*cmovge -0x6f6f6f70\(%eax\),%dx
 921:	66 0f 4e 90 90 90 90 90 [ 	]*cmovle -0x6f6f6f70\(%eax\),%dx
 929:	66 0f 4f 90 90 90 90 90 [ 	]*cmovg  -0x6f6f6f70\(%eax\),%dx
 931:	66 0f a0 [ 	]*pushw  %fs
 934:	66 0f a1 [ 	]*popw   %fs
 937:	66 0f a3 90 90 90 90 90 [ 	]*bt     %dx,-0x6f6f6f70\(%eax\)
 93f:	66 0f a4 90 90 90 90 90 90 [ 	]*shld   \$0x90,%dx,-0x6f6f6f70\(%eax\)
 948:	66 0f a5 90 90 90 90 90 [ 	]*shld   %cl,%dx,-0x6f6f6f70\(%eax\)
 950:	66 0f a8 [ 	]*pushw  %gs
 953:	66 0f a9 [ 	]*popw   %gs
 956:	66 0f ab 90 90 90 90 90 [ 	]*bts    %dx,-0x6f6f6f70\(%eax\)
 95e:	66 0f ac 90 90 90 90 90 90 [ 	]*shrd   \$0x90,%dx,-0x6f6f6f70\(%eax\)
 967:	66 0f ad 90 90 90 90 90 [ 	]*shrd   %cl,%dx,-0x6f6f6f70\(%eax\)
 96f:	66 0f af 90 90 90 90 90 [ 	]*imul   -0x6f6f6f70\(%eax\),%dx
 977:	66 0f b1 90 90 90 90 90 [ 	]*cmpxchg %dx,-0x6f6f6f70\(%eax\)
 97f:	66 0f b2 90 90 90 90 90 [ 	]*lss    -0x6f6f6f70\(%eax\),%dx
 987:	66 0f b3 90 90 90 90 90 [ 	]*btr    %dx,-0x6f6f6f70\(%eax\)
 98f:	66 0f b4 90 90 90 90 90 [ 	]*lfs    -0x6f6f6f70\(%eax\),%dx
 997:	66 0f b5 90 90 90 90 90 [ 	]*lgs    -0x6f6f6f70\(%eax\),%dx
 99f:	66 0f b6 90 90 90 90 90 [ 	]*movzbw -0x6f6f6f70\(%eax\),%dx
 9a7:	66 0f bb 90 90 90 90 90 [ 	]*btc    %dx,-0x6f6f6f70\(%eax\)
 9af:	66 0f bc 90 90 90 90 90 [ 	]*bsf    -0x6f6f6f70\(%eax\),%dx
 9b7:	66 0f bd 90 90 90 90 90 [ 	]*bsr    -0x6f6f6f70\(%eax\),%dx
 9bf:	66 0f be 90 90 90 90 90 [ 	]*movsbw -0x6f6f6f70\(%eax\),%dx
 9c7:	66 0f c1 90 90 90 90 90 [ 	]*xadd   %dx,-0x6f6f6f70\(%eax\)
 9cf:	66 90 [ 	]*xchg   %ax,%ax
 9d1:	0f 00 c0 [ 	]*sldt   %eax
 9d4:	66 0f 00 c0 [ 	]*sldt   %ax
 9d8:	0f 00 00 [ 	]*sldt   \(%eax\)
 9db:	0f 01 e0 [ 	]*smsw   %eax
 9de:	66 0f 01 e0 [ 	]*smsw   %ax
 9e2:	0f 01 20 [ 	]*smsw   \(%eax\)
 9e5:	0f 00 c8 [ 	]*str    %eax
 9e8:	66 0f 00 c8 [ 	]*str    %ax
 9ec:	0f 00 08 [ 	]*str    \(%eax\)
 9ef:	0f ad d0 [ 	]*shrd   %cl,%edx,%eax
 9f2:	0f a5 d0 [ 	]*shld   %cl,%edx,%eax
 9f5:	85 c3 [ 	]*test   %eax,%ebx
 9f7:	85 d8 [ 	]*test   %ebx,%eax
 9f9:	85 18 [ 	]*test   %ebx,\(%eax\)
[ 	]*[a-f0-9]+:	0f 4a 90 90 90 90 90 	cmovp  -0x6f6f6f70\(%eax\),%edx
[ 	]*[a-f0-9]+:	0f 4b 90 90 90 90 90 	cmovnp -0x6f6f6f70\(%eax\),%edx
[ 	]*[a-f0-9]+:	66 0f 4a 90 90 90 90 90 	cmovp  -0x6f6f6f70\(%eax\),%dx
[ 	]*[a-f0-9]+:	66 0f 4b 90 90 90 90 90 	cmovnp -0x6f6f6f70\(%eax\),%dx
#pass
@


1.16
log
@Add ud1 to x86.

gas/testsuite/

2010-08-05  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/i386.exp: Run arch-4.

	* gas/i386/arch-4.d: New.
	* gas/i386/arch-4.s: Likewise.

	* gas/i386/intel.d: Replace ud2a/ud2b with ud2/ud1.
	* gas/i386/opcode-intel.d: Likewise.
	* gas/i386/opcode-suffix.d: Likewise.
	* gas/i386/opcode.d: Likewise.

opcodes/

2010-08-05  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-dis.c (dis386_twobyte): Replace ud2a/ud2b with ud2/ud1.

	* i386-opc.tbl: Add ud1.  Remove Cpu686 from ud2/ud2a/ud2b.
	* i386-tbl.h: Regenerated.
@
text
@d212 2
a213 2
 295:	d4 90 [ 	]*aam    \$0xffffff90
 297:	d5 90 [ 	]*aad    \$0xffffff90
d473 2
a474 2
 797:	66 6a 90 [ 	]*pushw  \$0xffffff90
 79a:	66 6b 90 90 90 90 90 90 [ 	]*imul   \$0xffffff90,-0x6f6f6f70\(%eax\),%dx
d478 1
a478 1
 7af:	66 83 90 90 90 90 90 90 [ 	]*adcw   \$0xffffff90,-0x6f6f6f70\(%eax\)
@


1.15
log
@gas/testsuite/

2008-12-18  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/intel.d: Remove trailing white spaces after nop.
	* gas/i386/intelpic.d: Likewise.
	* gas/i386/nops16-1.d: Likewise.
	* gas/i386/nops-1-i686.d: Likewise.
	* gas/i386/nops-3.d: Likewise.
	* gas/i386/nops-3-i386.d: Likewise.
	* gas/i386/nops-3-i686.d: Likewise.
	* gas/i386/nops-4.d: Likewise.
	* gas/i386/nops-4-i386.d: Likewise.
	* gas/i386/nops-4-i686.d: Likewise.
	* gas/i386/opcode.d: Likewise.
	* gas/i386/opcode-suffix.d: Likewise.
	* gas/i386/reloc.d: Likewise.
	* gas/i386/tlsnopic.d: Likewise.
	* gas/i386/x86-64-nops-1.d: Likewise.
	* gas/i386/x86-64-nops-1-nocona.d: Likewise.
	* gas/i386/x86-64-nops-2.d: Likewise.
	* gas/i386/x86-64-nops-3.d: Likewise.
	* gas/i386/x86-64-nops-4-core2.d: Likewise.
	* gas/i386/x86-64-nops-4.d: Likewise.
	* gas/i386/x86-64-nops-4-k8.d: Likewise.
	* gas/i386/x86-64-opcode.d: Likewise.

ld/testsuite/

2008-12-18  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-i386/tlsld1.dd: Remove trailing white spaces after nop.

opcodes/

2008-12-18  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-dis.c (mnemonicendp): New.
	(op): Likewise.
	(print_insn): Use mnemonicendp.
	(OP_3DNowSuffix): Likewise.
	(CMP_Fixup): Likewise.
	(CMPXCHG8B_Fixup): Likewise.
	(CRC32_Fixup): Likewise.
	(OP_DREX_FCMP): Likewise.
	(OP_DREX_ICMP): Likewise.
	(VZERO_Fixup): Likewise.
	(VCMP_Fixup): Likewise.
	(PCLMUL_Fixup): Likewise.
	(VPERMIL2_Fixup): Likewise.
	(MOVBE_Fixup): Likewise.
	(putop): Update mnemonicendp.
	(oappend): Use stpcpy.
	(simd_cmp_op): Changed to struct op.
	(vex_cmp_op): Likewise.
	(pclmul_op): Likewise.
	(vpermil2_op): Likewise.
@
text
@d257 1
a257 1
 32d:	0f 0b [ 	]*ud2a   
d360 1
a360 1
 593:	0f b9 [ 	]*ud2b   
@


1.14
log
@gas/testsuite/

2008-11-03  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/intel.s: Add tests for cmovpe and cmovpo.
	* gas/i386/opcode.s: Likewise.

	* gas/i386/intel.d: Updated.
	* gas/i386/opcode.d: Likewise.
	* gas/i386/opcode-intel.d: Likewise.
	* gas/i386/opcode-suffix.d: Likewise.

opcodes/

2008-11-03  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-opc.tbl: Add cmovpe and cmovpo.
	* i386-tbl.h: Regenerated.
@
text
@d144 1
a144 1
 1cd:	90 [ 	]*nop    
@


1.13
log
@gas/testsuite/

2007-04-26  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/4430
	* gas/i386/amd.d: Updated.
	* gas/i386/immed32.d: Likewise.
	* gas/i386/intel.d: Likewise.
	* gas/i386/intel16.d: Likewise.
	* gas/i386/intelok.d: Likewise.
	* gas/i386/jump16.d: Likewise.
	* gas/i386/naked.d: Likewise.
	* gas/i386/opcode-suffix.d: Likewise.
	* gas/i386/opcode.d: Likewise.
	* gas/i386/prescott.d: Likewise.
	* gas/i386/ssemmx2.d: Likewise.
	* gas/i386/tlsd.d: Likewise.
	* gas/i386/tlspic.d: Likewise.
	* gas/i386/x86-64-addr32.d: Likewise.
	* gas/i386/x86-64-prescott.d: Likewise.
	* gas/i386/x86-64-rip.d: Likewise.
	* gas/i386/x86_64.d: Likewise.

ld/testsuite/

2007-04-26  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/4430
	* ld-i386/tlsbin.dd: Updated.
	* ld-i386/tlsbindesc.dd: Likewise
	* ld-i386/tlsdesc.dd: Likewise
	* ld-i386/tlsgdesc.dd: Likewise
	* ld-i386/tlsnopic.dd: Likewise
	* ld-i386/tlspic.dd: Likewise
	* ld-x86-64/tlsbin.dd: Likewise
	* ld-x86-64/tlsbindesc.dd: Likewise
	* ld-x86-64/tlsdesc.dd: Likewise
	* ld-x86-64/tlsgdesc.dd: Likewise
	* ld-x86-64/tlspic.dd: Likewise

opcodes/

2007-04-26  H.J. Lu  <hongjiu.lu@@intel.com>

	PR binutils/4430
	* i386-dis.c (print_displacement): New.
	(OP_E): Call print_displacement instead of print_operand_value
	to output displacement when either base or index exist.  Print
	the explicit zero displacement in 16bit mode.
@
text
@d590 4
@


1.12
log
@gas/testsuite/

2007-02-11  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/4027
	* gas/i386/opcode.s: Add more tests for "test".
	* i386/opcode-intel.d: Updated.
	* gas/i386/opcode-suffix.d: Likewise.
	* gas/i386/opcode.d: Likewise.

include/opcode/

2007-02-11  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/4027
	* i386.h (i386_optab): Put the real "test" before the pseudo
	one.
@
text
@d10 4
a13 4
   0:	00 90 90 90 90 90 [ 	]*add    %dl,0x90909090\(%eax\)
   6:	01 90 90 90 90 90 [ 	]*add    %edx,0x90909090\(%eax\)
   c:	02 90 90 90 90 90 [ 	]*add    0x90909090\(%eax\),%dl
  12:	03 90 90 90 90 90 [ 	]*add    0x90909090\(%eax\),%edx
d18 4
a21 4
  21:	08 90 90 90 90 90 [ 	]*or     %dl,0x90909090\(%eax\)
  27:	09 90 90 90 90 90 [ 	]*or     %edx,0x90909090\(%eax\)
  2d:	0a 90 90 90 90 90 [ 	]*or     0x90909090\(%eax\),%dl
  33:	0b 90 90 90 90 90 [ 	]*or     0x90909090\(%eax\),%edx
d25 4
a28 4
  41:	10 90 90 90 90 90 [ 	]*adc    %dl,0x90909090\(%eax\)
  47:	11 90 90 90 90 90 [ 	]*adc    %edx,0x90909090\(%eax\)
  4d:	12 90 90 90 90 90 [ 	]*adc    0x90909090\(%eax\),%dl
  53:	13 90 90 90 90 90 [ 	]*adc    0x90909090\(%eax\),%edx
d33 4
a36 4
  62:	18 90 90 90 90 90 [ 	]*sbb    %dl,0x90909090\(%eax\)
  68:	19 90 90 90 90 90 [ 	]*sbb    %edx,0x90909090\(%eax\)
  6e:	1a 90 90 90 90 90 [ 	]*sbb    0x90909090\(%eax\),%dl
  74:	1b 90 90 90 90 90 [ 	]*sbb    0x90909090\(%eax\),%edx
d41 4
a44 4
  83:	20 90 90 90 90 90 [ 	]*and    %dl,0x90909090\(%eax\)
  89:	21 90 90 90 90 90 [ 	]*and    %edx,0x90909090\(%eax\)
  8f:	22 90 90 90 90 90 [ 	]*and    0x90909090\(%eax\),%dl
  95:	23 90 90 90 90 90 [ 	]*and    0x90909090\(%eax\),%edx
d48 4
a51 4
  a3:	28 90 90 90 90 90 [ 	]*sub    %dl,0x90909090\(%eax\)
  a9:	29 90 90 90 90 90 [ 	]*sub    %edx,0x90909090\(%eax\)
  af:	2a 90 90 90 90 90 [ 	]*sub    0x90909090\(%eax\),%dl
  b5:	2b 90 90 90 90 90 [ 	]*sub    0x90909090\(%eax\),%edx
d55 4
a58 4
  c3:	30 90 90 90 90 90 [ 	]*xor    %dl,0x90909090\(%eax\)
  c9:	31 90 90 90 90 90 [ 	]*xor    %edx,0x90909090\(%eax\)
  cf:	32 90 90 90 90 90 [ 	]*xor    0x90909090\(%eax\),%dl
  d5:	33 90 90 90 90 90 [ 	]*xor    0x90909090\(%eax\),%edx
d62 4
a65 4
  e3:	38 90 90 90 90 90 [ 	]*cmp    %dl,0x90909090\(%eax\)
  e9:	39 90 90 90 90 90 [ 	]*cmp    %edx,0x90909090\(%eax\)
  ef:	3a 90 90 90 90 90 [ 	]*cmp    0x90909090\(%eax\),%dl
  f5:	3b 90 90 90 90 90 [ 	]*cmp    0x90909090\(%eax\),%edx
d103 2
a104 2
 125:	62 90 90 90 90 90 [ 	]*bound  %edx,0x90909090\(%eax\)
 12b:	63 90 90 90 90 90 [ 	]*arpl   %dx,0x90909090\(%eax\)
d106 1
a106 1
 136:	69 90 90 90 90 90 90 90 90 90 [ 	]*imul   \$0x90909090,0x90909090\(%eax\),%edx
d108 1
a108 1
 142:	6b 90 90 90 90 90 90 [ 	]*imul   \$0xffffff90,0x90909090\(%eax\),%edx
d129 15
a143 15
 16d:	80 90 90 90 90 90 90 [ 	]*adcb   \$0x90,0x90909090\(%eax\)
 174:	81 90 90 90 90 90 90 90 90 90 [ 	]*adcl   \$0x90909090,0x90909090\(%eax\)
 17e:	83 90 90 90 90 90 90 [ 	]*adcl   \$0xffffff90,0x90909090\(%eax\)
 185:	84 90 90 90 90 90 [ 	]*test   %dl,0x90909090\(%eax\)
 18b:	85 90 90 90 90 90 [ 	]*test   %edx,0x90909090\(%eax\)
 191:	86 90 90 90 90 90 [ 	]*xchg   %dl,0x90909090\(%eax\)
 197:	87 90 90 90 90 90 [ 	]*xchg   %edx,0x90909090\(%eax\)
 19d:	88 90 90 90 90 90 [ 	]*mov    %dl,0x90909090\(%eax\)
 1a3:	89 90 90 90 90 90 [ 	]*mov    %edx,0x90909090\(%eax\)
 1a9:	8a 90 90 90 90 90 [ 	]*mov    0x90909090\(%eax\),%dl
 1af:	8b 90 90 90 90 90 [ 	]*mov    0x90909090\(%eax\),%edx
 1b5:	8c 90 90 90 90 90 [ 	]*mov    %ss,0x90909090\(%eax\)
 1bb:	8d 90 90 90 90 90 [ 	]*lea    0x90909090\(%eax\),%edx
 1c1:	8e 90 90 90 90 90 [ 	]*mov    0x90909090\(%eax\),%ss
 1c7:	8f 80 90 90 90 90 [ 	]*popl   0x90909090\(%eax\)
d192 2
a193 2
 240:	c0 90 90 90 90 90 90 [ 	]*rclb   \$0x90,0x90909090\(%eax\)
 247:	c1 90 90 90 90 90 90 [ 	]*rcll   \$0x90,0x90909090\(%eax\)
d196 4
a199 4
 252:	c4 90 90 90 90 90 [ 	]*les    0x90909090\(%eax\),%edx
 258:	c5 90 90 90 90 90 [ 	]*lds    0x90909090\(%eax\),%edx
 25e:	c6 80 90 90 90 90 90 [ 	]*movb   \$0x90,0x90909090\(%eax\)
 265:	c7 80 90 90 90 90 90 90 90 90 [ 	]*movl   \$0x90909090,0x90909090\(%eax\)
d208 4
a211 4
 27d:	d0 90 90 90 90 90 [ 	]*rclb   0x90909090\(%eax\)
 283:	d1 90 90 90 90 90 [ 	]*rcll   0x90909090\(%eax\)
 289:	d2 90 90 90 90 90 [ 	]*rclb   %cl,0x90909090\(%eax\)
 28f:	d3 90 90 90 90 90 [ 	]*rcll   %cl,0x90909090\(%eax\)
d215 8
a222 8
 29a:	d8 90 90 90 90 90 [ 	]*fcoms  0x90909090\(%eax\)
 2a0:	d9 90 90 90 90 90 [ 	]*fsts   0x90909090\(%eax\)
 2a6:	da 90 90 90 90 90 [ 	]*ficoml 0x90909090\(%eax\)
 2ac:	db 90 90 90 90 90 [ 	]*fistl  0x90909090\(%eax\)
 2b2:	dc 90 90 90 90 90 [ 	]*fcoml  0x90909090\(%eax\)
 2b8:	dd 90 90 90 90 90 [ 	]*fstl   0x90909090\(%eax\)
 2be:	de 90 90 90 90 90 [ 	]*ficom  0x90909090\(%eax\)
 2c4:	df 90 90 90 90 90 [ 	]*fist   0x90909090\(%eax\)
d241 2
a242 2
 2f3:	f6 90 90 90 90 90 [ 	]*notb   0x90909090\(%eax\)
 2f9:	f7 90 90 90 90 90 [ 	]*notl   0x90909090\(%eax\)
d249 5
a253 5
 305:	ff 90 90 90 90 90 [ 	]*call   \*0x90909090\(%eax\)
 30b:	0f 00 90 90 90 90 90 [ 	]*lldt   0x90909090\(%eax\)
 312:	0f 01 90 90 90 90 90 [ 	]*lgdtl  0x90909090\(%eax\)
 319:	0f 02 90 90 90 90 90 [ 	]*lar    0x90909090\(%eax\),%edx
 320:	0f 03 90 90 90 90 90 [ 	]*lsl    0x90909090\(%eax\),%edx
d268 30
a297 30
 349:	0f 40 90 90 90 90 90 [ 	]*cmovo  0x90909090\(%eax\),%edx
 350:	0f 41 90 90 90 90 90 [ 	]*cmovno 0x90909090\(%eax\),%edx
 357:	0f 42 90 90 90 90 90 [ 	]*cmovb  0x90909090\(%eax\),%edx
 35e:	0f 43 90 90 90 90 90 [ 	]*cmovae 0x90909090\(%eax\),%edx
 365:	0f 44 90 90 90 90 90 [ 	]*cmove  0x90909090\(%eax\),%edx
 36c:	0f 45 90 90 90 90 90 [ 	]*cmovne 0x90909090\(%eax\),%edx
 373:	0f 46 90 90 90 90 90 [ 	]*cmovbe 0x90909090\(%eax\),%edx
 37a:	0f 47 90 90 90 90 90 [ 	]*cmova  0x90909090\(%eax\),%edx
 381:	0f 48 90 90 90 90 90 [ 	]*cmovs  0x90909090\(%eax\),%edx
 388:	0f 49 90 90 90 90 90 [ 	]*cmovns 0x90909090\(%eax\),%edx
 38f:	0f 4a 90 90 90 90 90 [ 	]*cmovp  0x90909090\(%eax\),%edx
 396:	0f 4b 90 90 90 90 90 [ 	]*cmovnp 0x90909090\(%eax\),%edx
 39d:	0f 4c 90 90 90 90 90 [ 	]*cmovl  0x90909090\(%eax\),%edx
 3a4:	0f 4d 90 90 90 90 90 [ 	]*cmovge 0x90909090\(%eax\),%edx
 3ab:	0f 4e 90 90 90 90 90 [ 	]*cmovle 0x90909090\(%eax\),%edx
 3b2:	0f 4f 90 90 90 90 90 [ 	]*cmovg  0x90909090\(%eax\),%edx
 3b9:	0f 60 90 90 90 90 90 [ 	]*punpcklbw 0x90909090\(%eax\),%mm2
 3c0:	0f 61 90 90 90 90 90 [ 	]*punpcklwd 0x90909090\(%eax\),%mm2
 3c7:	0f 62 90 90 90 90 90 [ 	]*punpckldq 0x90909090\(%eax\),%mm2
 3ce:	0f 63 90 90 90 90 90 [ 	]*packsswb 0x90909090\(%eax\),%mm2
 3d5:	0f 64 90 90 90 90 90 [ 	]*pcmpgtb 0x90909090\(%eax\),%mm2
 3dc:	0f 65 90 90 90 90 90 [ 	]*pcmpgtw 0x90909090\(%eax\),%mm2
 3e3:	0f 66 90 90 90 90 90 [ 	]*pcmpgtd 0x90909090\(%eax\),%mm2
 3ea:	0f 67 90 90 90 90 90 [ 	]*packuswb 0x90909090\(%eax\),%mm2
 3f1:	0f 68 90 90 90 90 90 [ 	]*punpckhbw 0x90909090\(%eax\),%mm2
 3f8:	0f 69 90 90 90 90 90 [ 	]*punpckhwd 0x90909090\(%eax\),%mm2
 3ff:	0f 6a 90 90 90 90 90 [ 	]*punpckhdq 0x90909090\(%eax\),%mm2
 406:	0f 6b 90 90 90 90 90 [ 	]*packssdw 0x90909090\(%eax\),%mm2
 40d:	0f 6e 90 90 90 90 90 [ 	]*movd   0x90909090\(%eax\),%mm2
 414:	0f 6f 90 90 90 90 90 [ 	]*movq   0x90909090\(%eax\),%mm2
d301 3
a303 3
 427:	0f 74 90 90 90 90 90 [ 	]*pcmpeqb 0x90909090\(%eax\),%mm2
 42e:	0f 75 90 90 90 90 90 [ 	]*pcmpeqw 0x90909090\(%eax\),%mm2
 435:	0f 76 90 90 90 90 90 [ 	]*pcmpeqd 0x90909090\(%eax\),%mm2
d305 2
a306 2
 43e:	0f 7e 90 90 90 90 90 [ 	]*movd   %mm2,0x90909090\(%eax\)
 445:	0f 7f 90 90 90 90 90 [ 	]*movq   %mm2,0x90909090\(%eax\)
d323 16
a338 16
 4ac:	0f 90 80 90 90 90 90 [ 	]*seto   0x90909090\(%eax\)
 4b3:	0f 91 80 90 90 90 90 [ 	]*setno  0x90909090\(%eax\)
 4ba:	0f 92 80 90 90 90 90 [ 	]*setb   0x90909090\(%eax\)
 4c1:	0f 93 80 90 90 90 90 [ 	]*setae  0x90909090\(%eax\)
 4c8:	0f 94 80 90 90 90 90 [ 	]*sete   0x90909090\(%eax\)
 4cf:	0f 95 80 90 90 90 90 [ 	]*setne  0x90909090\(%eax\)
 4d6:	0f 96 80 90 90 90 90 [ 	]*setbe  0x90909090\(%eax\)
 4dd:	0f 97 80 90 90 90 90 [ 	]*seta   0x90909090\(%eax\)
 4e4:	0f 98 80 90 90 90 90 [ 	]*sets   0x90909090\(%eax\)
 4eb:	0f 99 80 90 90 90 90 [ 	]*setns  0x90909090\(%eax\)
 4f2:	0f 9a 80 90 90 90 90 [ 	]*setp   0x90909090\(%eax\)
 4f9:	0f 9b 80 90 90 90 90 [ 	]*setnp  0x90909090\(%eax\)
 500:	0f 9c 80 90 90 90 90 [ 	]*setl   0x90909090\(%eax\)
 507:	0f 9d 80 90 90 90 90 [ 	]*setge  0x90909090\(%eax\)
 50e:	0f 9e 80 90 90 90 90 [ 	]*setle  0x90909090\(%eax\)
 515:	0f 9f 80 90 90 90 90 [ 	]*setg   0x90909090\(%eax\)
d342 3
a344 3
 522:	0f a3 90 90 90 90 90 [ 	]*bt     %edx,0x90909090\(%eax\)
 529:	0f a4 90 90 90 90 90 90 [ 	]*shld   \$0x90,%edx,0x90909090\(%eax\)
 531:	0f a5 90 90 90 90 90 [ 	]*shld   %cl,%edx,0x90909090\(%eax\)
d348 12
a359 12
 53e:	0f ab 90 90 90 90 90 [ 	]*bts    %edx,0x90909090\(%eax\)
 545:	0f ac 90 90 90 90 90 90 [ 	]*shrd   \$0x90,%edx,0x90909090\(%eax\)
 54d:	0f ad 90 90 90 90 90 [ 	]*shrd   %cl,%edx,0x90909090\(%eax\)
 554:	0f af 90 90 90 90 90 [ 	]*imul   0x90909090\(%eax\),%edx
 55b:	0f b0 90 90 90 90 90 [ 	]*cmpxchg %dl,0x90909090\(%eax\)
 562:	0f b1 90 90 90 90 90 [ 	]*cmpxchg %edx,0x90909090\(%eax\)
 569:	0f b2 90 90 90 90 90 [ 	]*lss    0x90909090\(%eax\),%edx
 570:	0f b3 90 90 90 90 90 [ 	]*btr    %edx,0x90909090\(%eax\)
 577:	0f b4 90 90 90 90 90 [ 	]*lfs    0x90909090\(%eax\),%edx
 57e:	0f b5 90 90 90 90 90 [ 	]*lgs    0x90909090\(%eax\),%edx
 585:	0f b6 90 90 90 90 90 [ 	]*movzbl 0x90909090\(%eax\),%edx
 58c:	0f b7 90 90 90 90 90 [ 	]*movzwl 0x90909090\(%eax\),%edx
d361 7
a367 7
 595:	0f bb 90 90 90 90 90 [ 	]*btc    %edx,0x90909090\(%eax\)
 59c:	0f bc 90 90 90 90 90 [ 	]*bsf    0x90909090\(%eax\),%edx
 5a3:	0f bd 90 90 90 90 90 [ 	]*bsr    0x90909090\(%eax\),%edx
 5aa:	0f be 90 90 90 90 90 [ 	]*movsbl 0x90909090\(%eax\),%edx
 5b1:	0f bf 90 90 90 90 90 [ 	]*movswl 0x90909090\(%eax\),%edx
 5b8:	0f c0 90 90 90 90 90 [ 	]*xadd   %dl,0x90909090\(%eax\)
 5bf:	0f c1 90 90 90 90 90 [ 	]*xadd   %edx,0x90909090\(%eax\)
d376 31
a406 31
 5d6:	0f d1 90 90 90 90 90 [ 	]*psrlw  0x90909090\(%eax\),%mm2
 5dd:	0f d2 90 90 90 90 90 [ 	]*psrld  0x90909090\(%eax\),%mm2
 5e4:	0f d3 90 90 90 90 90 [ 	]*psrlq  0x90909090\(%eax\),%mm2
 5eb:	0f d5 90 90 90 90 90 [ 	]*pmullw 0x90909090\(%eax\),%mm2
 5f2:	0f d8 90 90 90 90 90 [ 	]*psubusb 0x90909090\(%eax\),%mm2
 5f9:	0f d9 90 90 90 90 90 [ 	]*psubusw 0x90909090\(%eax\),%mm2
 600:	0f db 90 90 90 90 90 [ 	]*pand   0x90909090\(%eax\),%mm2
 607:	0f dc 90 90 90 90 90 [ 	]*paddusb 0x90909090\(%eax\),%mm2
 60e:	0f dd 90 90 90 90 90 [ 	]*paddusw 0x90909090\(%eax\),%mm2
 615:	0f df 90 90 90 90 90 [ 	]*pandn  0x90909090\(%eax\),%mm2
 61c:	0f e1 90 90 90 90 90 [ 	]*psraw  0x90909090\(%eax\),%mm2
 623:	0f e2 90 90 90 90 90 [ 	]*psrad  0x90909090\(%eax\),%mm2
 62a:	0f e5 90 90 90 90 90 [ 	]*pmulhw 0x90909090\(%eax\),%mm2
 631:	0f e8 90 90 90 90 90 [ 	]*psubsb 0x90909090\(%eax\),%mm2
 638:	0f e9 90 90 90 90 90 [ 	]*psubsw 0x90909090\(%eax\),%mm2
 63f:	0f eb 90 90 90 90 90 [ 	]*por    0x90909090\(%eax\),%mm2
 646:	0f ec 90 90 90 90 90 [ 	]*paddsb 0x90909090\(%eax\),%mm2
 64d:	0f ed 90 90 90 90 90 [ 	]*paddsw 0x90909090\(%eax\),%mm2
 654:	0f ef 90 90 90 90 90 [ 	]*pxor   0x90909090\(%eax\),%mm2
 65b:	0f f1 90 90 90 90 90 [ 	]*psllw  0x90909090\(%eax\),%mm2
 662:	0f f2 90 90 90 90 90 [ 	]*pslld  0x90909090\(%eax\),%mm2
 669:	0f f3 90 90 90 90 90 [ 	]*psllq  0x90909090\(%eax\),%mm2
 670:	0f f5 90 90 90 90 90 [ 	]*pmaddwd 0x90909090\(%eax\),%mm2
 677:	0f f8 90 90 90 90 90 [ 	]*psubb  0x90909090\(%eax\),%mm2
 67e:	0f f9 90 90 90 90 90 [ 	]*psubw  0x90909090\(%eax\),%mm2
 685:	0f fa 90 90 90 90 90 [ 	]*psubd  0x90909090\(%eax\),%mm2
 68c:	0f fc 90 90 90 90 90 [ 	]*paddb  0x90909090\(%eax\),%mm2
 693:	0f fd 90 90 90 90 90 [ 	]*paddw  0x90909090\(%eax\),%mm2
 69a:	0f fe 90 90 90 90 90 [ 	]*paddd  0x90909090\(%eax\),%mm2
 6a1:	66 01 90 90 90 90 90 [ 	]*add    %dx,0x90909090\(%eax\)
 6a8:	66 03 90 90 90 90 90 [ 	]*add    0x90909090\(%eax\),%dx
d410 2
a411 2
 6b7:	66 09 90 90 90 90 90 [ 	]*or     %dx,0x90909090\(%eax\)
 6be:	66 0b 90 90 90 90 90 [ 	]*or     0x90909090\(%eax\),%dx
d414 2
a415 2
 6cb:	66 11 90 90 90 90 90 [ 	]*adc    %dx,0x90909090\(%eax\)
 6d2:	66 13 90 90 90 90 90 [ 	]*adc    0x90909090\(%eax\),%dx
d419 2
a420 2
 6e1:	66 19 90 90 90 90 90 [ 	]*sbb    %dx,0x90909090\(%eax\)
 6e8:	66 1b 90 90 90 90 90 [ 	]*sbb    0x90909090\(%eax\),%dx
d424 2
a425 2
 6f7:	66 21 90 90 90 90 90 [ 	]*and    %dx,0x90909090\(%eax\)
 6fe:	66 23 90 90 90 90 90 [ 	]*and    0x90909090\(%eax\),%dx
d427 2
a428 2
 709:	66 29 90 90 90 90 90 [ 	]*sub    %dx,0x90909090\(%eax\)
 710:	66 2b 90 90 90 90 90 [ 	]*sub    0x90909090\(%eax\),%dx
d430 2
a431 2
 71b:	66 31 90 90 90 90 90 [ 	]*xor    %dx,0x90909090\(%eax\)
 722:	66 33 90 90 90 90 90 [ 	]*xor    0x90909090\(%eax\),%dx
d433 2
a434 2
 72d:	66 39 90 90 90 90 90 [ 	]*cmp    %dx,0x90909090\(%eax\)
 734:	66 3b 90 90 90 90 90 [ 	]*cmp    0x90909090\(%eax\),%dx
d470 1
a470 1
 783:	66 62 90 90 90 90 90 [ 	]*bound  %dx,0x90909090\(%eax\)
d472 1
a472 1
 78e:	66 69 90 90 90 90 90 90 90 [ 	]*imul   \$0x9090,0x90909090\(%eax\),%dx
d474 1
a474 1
 79a:	66 6b 90 90 90 90 90 90 [ 	]*imul   \$0xffffff90,0x90909090\(%eax\),%dx
d477 9
a485 9
 7a6:	66 81 90 90 90 90 90 90 90 [ 	]*adcw   \$0x9090,0x90909090\(%eax\)
 7af:	66 83 90 90 90 90 90 90 [ 	]*adcw   \$0xffffff90,0x90909090\(%eax\)
 7b7:	66 85 90 90 90 90 90 [ 	]*test   %dx,0x90909090\(%eax\)
 7be:	66 87 90 90 90 90 90 [ 	]*xchg   %dx,0x90909090\(%eax\)
 7c5:	66 89 90 90 90 90 90 [ 	]*mov    %dx,0x90909090\(%eax\)
 7cc:	66 8b 90 90 90 90 90 [ 	]*mov    0x90909090\(%eax\),%dx
 7d3:	8c 90 90 90 90 90 [ 	]*mov[w ]   %ss,0x90909090\(%eax\)
 7d9:	66 8d 90 90 90 90 90 [ 	]*lea    0x90909090\(%eax\),%dx
 7e0:	66 8f 80 90 90 90 90 [ 	]*popw   0x90909090\(%eax\)
d514 1
a514 1
 83d:	66 c1 90 90 90 90 90 90 [ 	]*rclw   \$0x90,0x90909090\(%eax\)
d517 3
a519 3
 84b:	66 c4 90 90 90 90 90 [ 	]*les    0x90909090\(%eax\),%dx
 852:	66 c5 90 90 90 90 90 [ 	]*lds    0x90909090\(%eax\),%dx
 859:	66 c7 80 90 90 90 90 90 90 [ 	]*movw   \$0x9090,0x90909090\(%eax\)
d525 2
a526 2
 871:	66 d1 90 90 90 90 90 [ 	]*rclw   0x90909090\(%eax\)
 878:	66 d3 90 90 90 90 90 [ 	]*rclw   %cl,0x90909090\(%eax\)
d533 20
a552 20
 893:	66 f7 90 90 90 90 90 [ 	]*notw   0x90909090\(%eax\)
 89a:	66 ff 90 90 90 90 90 [ 	]*callw  \*0x90909090\(%eax\)
 8a1:	66 0f 02 90 90 90 90 90 [ 	]*lar    0x90909090\(%eax\),%dx
 8a9:	66 0f 03 90 90 90 90 90 [ 	]*lsl    0x90909090\(%eax\),%dx
 8b1:	66 0f 40 90 90 90 90 90 [ 	]*cmovo  0x90909090\(%eax\),%dx
 8b9:	66 0f 41 90 90 90 90 90 [ 	]*cmovno 0x90909090\(%eax\),%dx
 8c1:	66 0f 42 90 90 90 90 90 [ 	]*cmovb  0x90909090\(%eax\),%dx
 8c9:	66 0f 43 90 90 90 90 90 [ 	]*cmovae 0x90909090\(%eax\),%dx
 8d1:	66 0f 44 90 90 90 90 90 [ 	]*cmove  0x90909090\(%eax\),%dx
 8d9:	66 0f 45 90 90 90 90 90 [ 	]*cmovne 0x90909090\(%eax\),%dx
 8e1:	66 0f 46 90 90 90 90 90 [ 	]*cmovbe 0x90909090\(%eax\),%dx
 8e9:	66 0f 47 90 90 90 90 90 [ 	]*cmova  0x90909090\(%eax\),%dx
 8f1:	66 0f 48 90 90 90 90 90 [ 	]*cmovs  0x90909090\(%eax\),%dx
 8f9:	66 0f 49 90 90 90 90 90 [ 	]*cmovns 0x90909090\(%eax\),%dx
 901:	66 0f 4a 90 90 90 90 90 [ 	]*cmovp  0x90909090\(%eax\),%dx
 909:	66 0f 4b 90 90 90 90 90 [ 	]*cmovnp 0x90909090\(%eax\),%dx
 911:	66 0f 4c 90 90 90 90 90 [ 	]*cmovl  0x90909090\(%eax\),%dx
 919:	66 0f 4d 90 90 90 90 90 [ 	]*cmovge 0x90909090\(%eax\),%dx
 921:	66 0f 4e 90 90 90 90 90 [ 	]*cmovle 0x90909090\(%eax\),%dx
 929:	66 0f 4f 90 90 90 90 90 [ 	]*cmovg  0x90909090\(%eax\),%dx
d555 3
a557 3
 937:	66 0f a3 90 90 90 90 90 [ 	]*bt     %dx,0x90909090\(%eax\)
 93f:	66 0f a4 90 90 90 90 90 90 [ 	]*shld   \$0x90,%dx,0x90909090\(%eax\)
 948:	66 0f a5 90 90 90 90 90 [ 	]*shld   %cl,%dx,0x90909090\(%eax\)
d560 15
a574 15
 956:	66 0f ab 90 90 90 90 90 [ 	]*bts    %dx,0x90909090\(%eax\)
 95e:	66 0f ac 90 90 90 90 90 90 [ 	]*shrd   \$0x90,%dx,0x90909090\(%eax\)
 967:	66 0f ad 90 90 90 90 90 [ 	]*shrd   %cl,%dx,0x90909090\(%eax\)
 96f:	66 0f af 90 90 90 90 90 [ 	]*imul   0x90909090\(%eax\),%dx
 977:	66 0f b1 90 90 90 90 90 [ 	]*cmpxchg %dx,0x90909090\(%eax\)
 97f:	66 0f b2 90 90 90 90 90 [ 	]*lss    0x90909090\(%eax\),%dx
 987:	66 0f b3 90 90 90 90 90 [ 	]*btr    %dx,0x90909090\(%eax\)
 98f:	66 0f b4 90 90 90 90 90 [ 	]*lfs    0x90909090\(%eax\),%dx
 997:	66 0f b5 90 90 90 90 90 [ 	]*lgs    0x90909090\(%eax\),%dx
 99f:	66 0f b6 90 90 90 90 90 [ 	]*movzbw 0x90909090\(%eax\),%dx
 9a7:	66 0f bb 90 90 90 90 90 [ 	]*btc    %dx,0x90909090\(%eax\)
 9af:	66 0f bc 90 90 90 90 90 [ 	]*bsf    0x90909090\(%eax\),%dx
 9b7:	66 0f bd 90 90 90 90 90 [ 	]*bsr    0x90909090\(%eax\),%dx
 9bf:	66 0f be 90 90 90 90 90 [ 	]*movsbw 0x90909090\(%eax\),%dx
 9c7:	66 0f c1 90 90 90 90 90 [ 	]*xadd   %dx,0x90909090\(%eax\)
@


1.11
log
@gas/

2006-12-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (build_modrm_byte): Handle shift count
	register with 3 operands.

gas/testsuite/

2006-12-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/intel.s: Add tests for "shrd %cl,%edx,%eax" and
	"shld %cl,%edx,%eax".
	* gas/i386/opcode.s: Likewise.

	* gas/i386/intel.d: Updated.
	* gas/i386/opcode-intel.d: Likewise.
	* gas/i386/opcode-suffix.d: Likewise.
	* gas/i386/opcode.d: Likewise.
@
text
@d587 4
a590 1
	\.\.\.
@


1.10
log
@gas/testsuite/
2006-12-01  Jan Beulich  <jbeulich@@novell.com>

	* gas/i386/opcode.d: Adjust name.
	* gas/i386/opcode-intel.d: New.
	* gas/i386/opcode-suffix.d: New.
	* gas/i386/i386.exp: Run new tests.
@
text
@d585 2
@


1.9
log
@opcodes/
2006-11-30  Jan Beulich  <jbeulich@@novell.com>

	* i386-dis.c (SEG_Fixup): Delete.
	(Sv): Use OP_SEG.
	(putop): New suffix character 'D'.
	(dis386): Use it.
	(grps): Likewise.
	(OP_SEG): Handle bytemode other than w_mode.

gas/testsuite/
2006-11-30  Jan Beulich  <jbeulich@@novell.com>

	* gas/i386/intel.d: Adjust.
	* gas/i386/naked.d: Adjust.
	* gas/i386/opcode.d: Adjust.
@
text
@d3 1
a3 1
#name: i386 intel
@


1.8
log
@gas/testsuite/

2006-07-18  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/opcode.s: Add sldt, smsw and str.
	* gas/i386/x86-64-opcode.s: Likewise.

	* gas/i386/opcode.d: Updated.
	* gas/i386/x86-64-opcode.d: Likewise.

opcodes/

2006-07-18  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-dis.c (grps): Change "sldtQ", "strQ" and "smswQ" to
	"sldt", "str" and "smsw".
@
text
@d140 1
a140 1
 1b5:	8c 90 90 90 90 90 [ 	]*movw   %ss,0x90909090\(%eax\)
d142 1
a142 1
 1c1:	8e 90 90 90 90 90 [ 	]*movw   0x90909090\(%eax\),%ss
@


1.7
log
@gas/

2006-06-12  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (process_suffix): Don't add rex64 for
	"xchg %rax,%rax".

gas/testsuite/

2006-06-12  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/opcode.s: Add "xchg %ax,%ax".
	* gas/i386/opcode.d: Updated.

	* gas/i386/x86-64-opcode.s: Add xchg %ax,%ax, xchg %eax,%eax,
	xchg %rax,%rax, rex64 xchg %rax,%rax and xchg %rax,%r8.
	* gas/i386/x86-64-opcode.d: Updated.

include/opcode/

2006-06-12  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386.h (i386_optab): Update comment for 64bit NOP.

opcodes/

2006-06-12  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-dis.c (NOP_Fixup): Removed.
	(NOP_Fixup1): New.
	(NOP_Fixup2): Likewise.
	(dis386): Use NOP_Fixup1 and NOP_Fixup2 on 0x90.
@
text
@d576 9
@


1.6
log
@gas/testsuite/

2005-03-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/i386.exp: Run segment and inval-seg for i386. Run
	x86-64-segment and x86-64-inval-seg for x86-64.

	* gas/i386/intel.d: Expect movw for moving between memory and
	segment register.
	* gas/i386/naked.d: Likewise.
	* gas/i386/opcode.d: Likewise.
	* gas/i386/x86-64-opcode.d: Likewise.

	* gas/i386/opcode.s: Use movw for moving between memory and
	segment register.
	* gas/i386/x86-64-opcode.s: Likewise.

	* : Likewise.

	* gas/i386/inval-seg.l: New.
	* gas/i386/inval-seg.s: New.
	* gas/i386/segment.l: New.
	* gas/i386/segment.s: New.
	* gas/i386/x86-64-inval-seg.l: New.
	* gas/i386/x86-64-inval-seg.s: New.
	* gas/i386/x86-64-segment.l: New.
	* gas/i386/x86-64-segment.s: New.

include/opcode/

2005-03-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386.h (i386_optab): Don't allow the `l' suffix for moving
	moving between memory and segment register. Allow movq for
	moving between general-purpose register and segment register.

opcodes/

2005-03-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-dis.c (SEG_Fixup): New.
	(Sv): New.
	(dis386): Use "Sv" for 0x8c and 0x8e.
@
text
@d575 1
@


1.5
log
@	* gas/i386/opcode.s: Pad section.
	* gas/i386/intelok.s: Likewise.
	* gas/i386/opcode.d: Update.
	* gas/i386/intelok.d: Update.
@
text
@d140 1
a140 1
 1b5:	8c 90 90 90 90 90 [ 	]*movl   %ss,0x90909090\(%eax\)
d142 1
a142 1
 1c1:	8e 90 90 90 90 90 [ 	]*movl   0x90909090\(%eax\),%ss
d483 1
a483 1
 7d3:	8c 90 90 90 90 90 [ 	]*mov[l ]   %ss,0x90909090\(%eax\)
@


1.4
log
@gas/
2004-11-04 Jan Beulich <jbeulich@@novell.com>

	* config/tc-i386.c (set_intel_syntax): Allow % in symbol names when
	intel syntax and no register prefix, allow $ in symbol names when
	intel syntax.
	(set_16bit_gcc_code_flag): Replace literal 'l' by LONG_MNEM_SUFFIX.
	(intel_float_operand): Add fourth return value indicating math control
	operations. Make classification more precise.
	(md_assemble): Complain if memory operand of mov[sz]x has no size
	specified.
	(parse_insn): Translate word operands to floating point instructions
	operating on integers as well as control instructions to short ones
	as expected by AT&T syntax. Translate 'd' suffix to short one only for
	floating point instructions operating on non-integer operands.
	(match_template): Remove fldcw special case. Adjust q-suffix handling
	to permit it on fild/fistp/fisttp in AT&T mode.
	(process_suffix): Don't guess DefaultSize insns' suffix from
	stackop_size for certain floating point control instructions. Guess
	suffix for branch and [ls][gi]dt based on flag_code. Split error
	messages for Intel and AT&T syntax, and make the condition more strict
	for the former. Adjust suppressing of generation of operand size
	overrides.
	(intel parser): Allow the full set of MASM operators. Add FWORD, TBYTE,
	OWORD, and XMMWORD operand size specifiers (TBYTE replaces XWORD). Add
	more error checking.
	* config/tc-i386.h (BYTE_PTR WORD_PTR DWORD_PTR QWORD_PTR XWORD_PTR
	SHORT OFFSET_FLAT FLAT NONE_FOUND): Remove unused defines.

gas/testsuite/
2004-11-04 Jan Beulich <jbeulich@@novell.com>
	* gas/i386/i386.exp: Execute new tests intelbad and intelok.
	* gas/i386/intelbad.[sl]: New test to check for various things not
	permitted in Intel mode.
	* gas/i386/intel.d, gas/i386/opcode.d, gas/i386/x86-64-opcode.d:
	Adjust for change to segment register store.
	* gas/i386/intelok.[sd]: New test to check various Intel mode specific
	things get handled correctly.
	* gas/i386/x86_64.[sd]: Remove unsupported constructs referring to
	'high' and 'low' parts of an operand, which the parser previously
	accepted while neither telling that it's not supported nor that it
	ignored the remainder of the line following these supposed keywords.

include/opcode/
2004-11-04 Jan Beulich <jbeulich@@novell.com>

	* i386.h (sldx_Suf): Remove.
	(FP, l_FP, sl_FP, x_FP): Don't imply IgnoreSize.
	(q_FP): Define, implying no REX64.
	(x_FP, sl_FP): Imply FloatMF.
	(i386_optab): Split reg and mem forms of moving from segment registers
	so that the memory forms can ignore the 16-/32-bit operand size
	distinction. Adjust a few others for Intel mode. Remove *FP uses from
	all non-floating-point instructions. Unite 32- and 64-bit forms of
	movsx, movzx, and movd. Adjust floating point operations for the above
	changes to the *FP macros. Add DefaultSize to floating point control
	insns operating on larger memory ranges. Remove left over comments
	hinting at certain insns being Intel-syntax ones where the ones
	actually meant are already gone.

opcodes/
2004-11-04 Jan Beulich <jbeulich@@novell.com>

	* i386-dis.c (Eq, Edqw, indirEp, Gdq, I1): Define.
	(indirEb): Remove.
	(Mp): Use f_mode rather than none at all.
	(t_mode, dq_mode, dqw_mode, f_mode, const_1_mode): Define. t_mode
	replaces what previously was x_mode; x_mode now means 128-bit SSE
	operands.
	(dis386): Make far jumps and calls have an 'l' prefix only in AT&T
	mode. movmskpX's, pextrw's, and pmovmskb's first operands are Gdq.
	pinsrw's second operand is Edqw.
	(grps): 1-bit shifts' and rotates' second operands are I1. cmpxchg8b's
	operand is Eq. movntq's and movntdq's first operands are EM. s[gi]dt,
	fldenv, frstor, fsave, fstenv all should also have suffixes in Intel
	mode when an operand size override is present or always suffixing.
	More instructions will need to be added to this group.
	(putop): Handle new macro chars 'C' (short/long suffix selector),
	'I' (Intel mode override for following macro char), and 'J' (for
	adding the 'l' prefix to far branches in AT&T mode). When an
	alternative was specified in the template, honor macro character when
	specified for Intel mode.
	(OP_E): Handle new *_mode values. Correct pointer specifications for
	memory operands. Consolidate output of index register.
	(OP_G): Handle new *_mode values.
	(OP_I): Handle const_1_mode.
	(OP_ESreg, OP_DSreg): Generate pointer specifications. Indicate
	respective opcode prefix bits have been consumed.
	(OP_EM, OP_EX): Provide some default handling for generating pointer
	specifications.
@
text
@d575 1
@


1.3
log
@	* gas/i386/opcode.d: Tweak lgdt for 2001-07-18 change.
	* gas/i386/intel.d: Likewise.
@
text
@d3 1
a3 1
#name: i386 opcode
d483 92
a574 92
 7d3:	66 8c 90 90 90 90 90 [ 	]*movw   %ss,0x90909090\(%eax\)
 7da:	66 8d 90 90 90 90 90 [ 	]*lea    0x90909090\(%eax\),%dx
 7e1:	66 8f 80 90 90 90 90 [ 	]*popw   0x90909090\(%eax\)
 7e8:	66 91 [ 	]*xchg   %ax,%cx
 7ea:	66 92 [ 	]*xchg   %ax,%dx
 7ec:	66 93 [ 	]*xchg   %ax,%bx
 7ee:	66 94 [ 	]*xchg   %ax,%sp
 7f0:	66 95 [ 	]*xchg   %ax,%bp
 7f2:	66 96 [ 	]*xchg   %ax,%si
 7f4:	66 97 [ 	]*xchg   %ax,%di
 7f6:	66 98 [ 	]*cbtw   
 7f8:	66 99 [ 	]*cwtd   
 7fa:	66 9a 90 90 90 90 [ 	]*lcallw \$0x9090,\$0x9090
 800:	66 9c [ 	]*pushfw 
 802:	66 9d [ 	]*popfw  
 804:	66 a1 90 90 90 90 [ 	]*mov    0x90909090,%ax
 80a:	66 a3 90 90 90 90 [ 	]*mov    %ax,0x90909090
 810:	66 a5 [ 	]*movsw  %ds:\(%esi\),%es:\(%edi\)
 812:	66 a7 [ 	]*cmpsw  %es:\(%edi\),%ds:\(%esi\)
 814:	66 a9 90 90 [ 	]*test   \$0x9090,%ax
 818:	66 ab [ 	]*stos   %ax,%es:\(%edi\)
 81a:	66 ad [ 	]*lods   %ds:\(%esi\),%ax
 81c:	66 af [ 	]*scas   %es:\(%edi\),%ax
 81e:	66 b8 90 90 [ 	]*mov    \$0x9090,%ax
 822:	66 b9 90 90 [ 	]*mov    \$0x9090,%cx
 826:	66 ba 90 90 [ 	]*mov    \$0x9090,%dx
 82a:	66 bb 90 90 [ 	]*mov    \$0x9090,%bx
 82e:	66 bc 90 90 [ 	]*mov    \$0x9090,%sp
 832:	66 bd 90 90 [ 	]*mov    \$0x9090,%bp
 836:	66 be 90 90 [ 	]*mov    \$0x9090,%si
 83a:	66 bf 90 90 [ 	]*mov    \$0x9090,%di
 83e:	66 c1 90 90 90 90 90 90 [ 	]*rclw   \$0x90,0x90909090\(%eax\)
 846:	66 c2 90 90 [ 	]*retw   \$0x9090
 84a:	66 c3 [ 	]*retw   
 84c:	66 c4 90 90 90 90 90 [ 	]*les    0x90909090\(%eax\),%dx
 853:	66 c5 90 90 90 90 90 [ 	]*lds    0x90909090\(%eax\),%dx
 85a:	66 c7 80 90 90 90 90 90 90 [ 	]*movw   \$0x9090,0x90909090\(%eax\)
 863:	66 c8 90 90 90 [ 	]*enterw \$0x9090,\$0x90
 868:	66 c9 [ 	]*leavew 
 86a:	66 ca 90 90 [ 	]*lretw  \$0x9090
 86e:	66 cb [ 	]*lretw  
 870:	66 cf [ 	]*iretw  
 872:	66 d1 90 90 90 90 90 [ 	]*rclw   0x90909090\(%eax\)
 879:	66 d3 90 90 90 90 90 [ 	]*rclw   %cl,0x90909090\(%eax\)
 880:	66 e5 90 [ 	]*in     \$0x90,%ax
 883:	66 e7 90 [ 	]*out    %ax,\$0x90
 886:	66 e8 8f 90 [ 	]*callw  (0x)?9919.*
 88a:	66 ea 90 90 90 90 [ 	]*ljmpw  \$0x9090,\$0x9090
 890:	66 ed [ 	]*in     \(%dx\),%ax
 892:	66 ef [ 	]*out    %ax,\(%dx\)
 894:	66 f7 90 90 90 90 90 [ 	]*notw   0x90909090\(%eax\)
 89b:	66 ff 90 90 90 90 90 [ 	]*callw  \*0x90909090\(%eax\)
 8a2:	66 0f 02 90 90 90 90 90 [ 	]*lar    0x90909090\(%eax\),%dx
 8aa:	66 0f 03 90 90 90 90 90 [ 	]*lsl    0x90909090\(%eax\),%dx
 8b2:	66 0f 40 90 90 90 90 90 [ 	]*cmovo  0x90909090\(%eax\),%dx
 8ba:	66 0f 41 90 90 90 90 90 [ 	]*cmovno 0x90909090\(%eax\),%dx
 8c2:	66 0f 42 90 90 90 90 90 [ 	]*cmovb  0x90909090\(%eax\),%dx
 8ca:	66 0f 43 90 90 90 90 90 [ 	]*cmovae 0x90909090\(%eax\),%dx
 8d2:	66 0f 44 90 90 90 90 90 [ 	]*cmove  0x90909090\(%eax\),%dx
 8da:	66 0f 45 90 90 90 90 90 [ 	]*cmovne 0x90909090\(%eax\),%dx
 8e2:	66 0f 46 90 90 90 90 90 [ 	]*cmovbe 0x90909090\(%eax\),%dx
 8ea:	66 0f 47 90 90 90 90 90 [ 	]*cmova  0x90909090\(%eax\),%dx
 8f2:	66 0f 48 90 90 90 90 90 [ 	]*cmovs  0x90909090\(%eax\),%dx
 8fa:	66 0f 49 90 90 90 90 90 [ 	]*cmovns 0x90909090\(%eax\),%dx
 902:	66 0f 4a 90 90 90 90 90 [ 	]*cmovp  0x90909090\(%eax\),%dx
 90a:	66 0f 4b 90 90 90 90 90 [ 	]*cmovnp 0x90909090\(%eax\),%dx
 912:	66 0f 4c 90 90 90 90 90 [ 	]*cmovl  0x90909090\(%eax\),%dx
 91a:	66 0f 4d 90 90 90 90 90 [ 	]*cmovge 0x90909090\(%eax\),%dx
 922:	66 0f 4e 90 90 90 90 90 [ 	]*cmovle 0x90909090\(%eax\),%dx
 92a:	66 0f 4f 90 90 90 90 90 [ 	]*cmovg  0x90909090\(%eax\),%dx
 932:	66 0f a0 [ 	]*pushw  %fs
 935:	66 0f a1 [ 	]*popw   %fs
 938:	66 0f a3 90 90 90 90 90 [ 	]*bt     %dx,0x90909090\(%eax\)
 940:	66 0f a4 90 90 90 90 90 90 [ 	]*shld   \$0x90,%dx,0x90909090\(%eax\)
 949:	66 0f a5 90 90 90 90 90 [ 	]*shld   %cl,%dx,0x90909090\(%eax\)
 951:	66 0f a8 [ 	]*pushw  %gs
 954:	66 0f a9 [ 	]*popw   %gs
 957:	66 0f ab 90 90 90 90 90 [ 	]*bts    %dx,0x90909090\(%eax\)
 95f:	66 0f ac 90 90 90 90 90 90 [ 	]*shrd   \$0x90,%dx,0x90909090\(%eax\)
 968:	66 0f ad 90 90 90 90 90 [ 	]*shrd   %cl,%dx,0x90909090\(%eax\)
 970:	66 0f af 90 90 90 90 90 [ 	]*imul   0x90909090\(%eax\),%dx
 978:	66 0f b1 90 90 90 90 90 [ 	]*cmpxchg %dx,0x90909090\(%eax\)
 980:	66 0f b2 90 90 90 90 90 [ 	]*lss    0x90909090\(%eax\),%dx
 988:	66 0f b3 90 90 90 90 90 [ 	]*btr    %dx,0x90909090\(%eax\)
 990:	66 0f b4 90 90 90 90 90 [ 	]*lfs    0x90909090\(%eax\),%dx
 998:	66 0f b5 90 90 90 90 90 [ 	]*lgs    0x90909090\(%eax\),%dx
 9a0:	66 0f b6 90 90 90 90 90 [ 	]*movzbw 0x90909090\(%eax\),%dx
 9a8:	66 0f bb 90 90 90 90 90 [ 	]*btc    %dx,0x90909090\(%eax\)
 9b0:	66 0f bc 90 90 90 90 90 [ 	]*bsf    0x90909090\(%eax\),%dx
 9b8:	66 0f bd 90 90 90 90 90 [ 	]*bsr    0x90909090\(%eax\),%dx
 9c0:	66 0f be 90 90 90 90 90 [ 	]*movsbw 0x90909090\(%eax\),%dx
 9c8:	66 0f c1 90 90 90 90 90 [ 	]*xadd   %dx,0x90909090\(%eax\)
@


1.2
log
@P
i386 PIII SIMD support, remove ReverseRegRegmem kludge
tidy a few things in i386 intel mode disassembly
@
text
@d251 1
a251 1
 312:	0f 01 90 90 90 90 90 [ 	]*lgdt   0x90909090\(%eax\)
@


1.2.4.1
log
@	Merge from mainline.
	2001-07-23  Alan Modra  <amodra@@bigpond.net.au>
	* gas/i386/opcode.d: Tweak lgdt for 2001-07-18 change.
	* gas/i386/intel.d: Likewise.
@
text
@d251 1
a251 1
 312:	0f 01 90 90 90 90 90 [ 	]*lgdtl  0x90909090\(%eax\)
@


1.1
log
@Initial revision
@
text
@d529 1
a529 1
 886:	66 e8 8f 90 [ 	]*callw  (0x)?ffff9919.*
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

