head	1.3;
access;
symbols
	binutils-2_24-branch:1.3.0.10
	binutils-2_24-branchpoint:1.3
	binutils-2_21_1:1.3
	binutils-2_23_2:1.3
	binutils-2_23_1:1.3
	binutils-2_23:1.3
	binutils-2_23-branch:1.3.0.8
	binutils-2_23-branchpoint:1.3
	binutils-2_22_branch:1.3.0.6
	binutils-2_22:1.3
	binutils-2_22-branch:1.3.0.4
	binutils-2_22-branchpoint:1.3
	binutils-2_21:1.3
	binutils-2_21-branch:1.3.0.2
	binutils-2_21-branchpoint:1.3
	binutils_latest_snapshot:1.3;
locks; strict;
comment	@# @;


1.3
date	2009.11.19.15.26.41;	author hjl;	state Exp;
branches;
next	1.2;

1.2
date	2009.11.14.06.04.34;	author hjl;	state Exp;
branches;
next	1.1;

1.1
date	2009.11.12.18.57.14;	author hjl;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Allow lock on cmpxch16b.

gas/testsuite/

2009-11-19  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/lock-1.s: Add cmpxchg16b test.
	* gas/i386/lock-1-intel.d: Updated.
	* gas/i386/lock-1.d: Likewise.

opcodes/

2009-11-19  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-opc.tbl: Add IsLockable to cmpxch16b.
	* i386-tbl.h: Regenerated.
@
text
@#objdump: -dw
#name: x86-64 lockable insns

.*: +file format .*


Disassembly of section .text:

0+ <foo>:
[ 	]*[a-f0-9]+:	f0 01 03             	lock add %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 83 03 64          	lock addl \$0x64,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 11 03             	lock adc %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 83 13 64          	lock adcl \$0x64,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 21 03             	lock and %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 83 23 64          	lock andl \$0x64,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 0f bb 03          	lock btc %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 0f ba 3b 64       	lock btcl \$0x64,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 0f b3 03          	lock btr %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 0f ba 33 64       	lock btrl \$0x64,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 0f ab 03          	lock bts %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 0f ba 2b 64       	lock btsl \$0x64,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 0f b1 03          	lock cmpxchg %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 0f c7 0b          	lock cmpxchg8b \(%rbx\)
[ 	]*[a-f0-9]+:	f0 48 0f c7 0b       	lock cmpxchg16b \(%rbx\)
[ 	]*[a-f0-9]+:	f0 ff 0b             	lock decl \(%rbx\)
[ 	]*[a-f0-9]+:	f0 ff 03             	lock incl \(%rbx\)
[ 	]*[a-f0-9]+:	f0 f7 1b             	lock negl \(%rbx\)
[ 	]*[a-f0-9]+:	f0 f7 13             	lock notl \(%rbx\)
[ 	]*[a-f0-9]+:	f0 09 03             	lock or %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 83 0b 64          	lock orl \$0x64,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 19 03             	lock sbb %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 83 1b 64          	lock sbbl \$0x64,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 29 03             	lock sub %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 83 2b 64          	lock subl \$0x64,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 0f c1 03          	lock xadd %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 87 03             	lock xchg %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 87 03             	lock xchg %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 31 03             	lock xor %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 83 33 64          	lock xorl \$0x64,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 01 03             	lock add %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 83 03 64          	lock addl \$0x64,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 11 03             	lock adc %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 83 13 64          	lock adcl \$0x64,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 21 03             	lock and %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 83 23 64          	lock andl \$0x64,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 0f bb 03          	lock btc %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 0f ba 3b 64       	lock btcl \$0x64,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 0f b3 03          	lock btr %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 0f ba 33 64       	lock btrl \$0x64,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 0f ab 03          	lock bts %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 0f ba 2b 64       	lock btsl \$0x64,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 0f b1 03          	lock cmpxchg %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 0f c7 0b          	lock cmpxchg8b \(%rbx\)
[ 	]*[a-f0-9]+:	f0 48 0f c7 0b       	lock cmpxchg16b \(%rbx\)
[ 	]*[a-f0-9]+:	f0 ff 0b             	lock decl \(%rbx\)
[ 	]*[a-f0-9]+:	f0 ff 03             	lock incl \(%rbx\)
[ 	]*[a-f0-9]+:	f0 f7 1b             	lock negl \(%rbx\)
[ 	]*[a-f0-9]+:	f0 f7 13             	lock notl \(%rbx\)
[ 	]*[a-f0-9]+:	f0 09 03             	lock or %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 83 0b 64          	lock orl \$0x64,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 19 03             	lock sbb %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 83 1b 64          	lock sbbl \$0x64,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 29 03             	lock sub %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 83 2b 64          	lock subl \$0x64,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 0f c1 03          	lock xadd %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 87 03             	lock xchg %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 87 03             	lock xchg %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 31 03             	lock xor %eax,\(%rbx\)
[ 	]*[a-f0-9]+:	f0 83 33 64          	lock xorl \$0x64,\(%rbx\)
#pass
@


1.2
log
@Check destination operand for lockable instructions.

gas/

2009-11-13  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (md_assemble): Check destination operand
	for lockable instructions.

gas/testsuite/

2009-11-13  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/lock-1-intel.d: Updated.
	* gas/i386/lock-1.d: Likewise.
	* gas/i386/lock-1.s: Likewise.
	* gas/i386/lockbad-1.l: Likewise.
	* gas/i386/lockbad-1.s: Likewise.
	* gas/i386/x86-64-lock-1-intel.d: Likewise.
	* gas/i386/x86-64-lock-1.d: Likewise.
	* gas/i386/x86-64-lock-1.s: Likewise.
	* gas/i386/x86-64-lockbad-1.l: Likewise.
	* gas/i386/x86-64-lockbad-1.s: Likewise.
@
text
@d24 1
d54 1
@


1.1
log
@gas/

2009-11-12  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (LOCKREP_PREFIX): Removed.
	(REP_PREFIX): New.
	(LOCK_PREFIX): Likewise.
	(PREFIX_GROUP): Likewise.
	(REX_PREFIX): Updated.
	(MAX_PREFIXES): Likewise.
	(add_prefix): Updated.  Return enum PREFIX_GROUP.
	(md_assemble): Check for lock without a lockable instruction.
	(parse_insn): Updated.
	(output_insn): Likewise.

gas/testsuite/

2009-11-12  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/i386.exp: Run lock-1, lock-1-intel, lockbad-1,
	x86-64-lock-1, x86-64-lock-1-intel and x86-64-lockbad-1.

	* gas/i386/lock-1-intel.d: New.
	* gas/i386/lock-1.d: Likewise.
	* gas/i386/lock-1.s: Likewise.
	* gas/i386/lockbad-1.l: Likewise.
	* gas/i386/lockbad-1.s: Likewise.
	* gas/i386/x86-64-lock-1-intel.d: Likewise.
	* gas/i386/x86-64-lock-1.d: Likewise.
	* gas/i386/x86-64-lock-1.s: Likewise.
	* gas/i386/x86-64-lockbad-1.l: Likewise.
	* gas/i386/x86-64-lockbad-1.s: Likewise.

opcodes/

2009-11-12  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-gen.c (opcode_modifiers): Add IsLockable.

	* i386-opc.h (IsLockable): New.
	(i386_opcode_modifier): Add islockable.

	* i386-opc.tbl: Add IsLockable to add, adc, and, btc, btr,
	bts, cmpxchg, cmpxch8b, dec, inc, neg, not, or, sbb, sub,
	xor, xadd and xchg.
	* i386-tbl.h: Regenerated.
@
text
@d10 1
a10 1
[ 	]*[a-f0-9]+:	f0 03 03             	lock add \(%rbx\),%eax
d12 1
a12 1
[ 	]*[a-f0-9]+:	f0 13 03             	lock adc \(%rbx\),%eax
d14 1
a14 1
[ 	]*[a-f0-9]+:	f0 23 03             	lock and \(%rbx\),%eax
d28 1
a28 1
[ 	]*[a-f0-9]+:	f0 0b 03             	lock or \(%rbx\),%eax
d30 1
a30 1
[ 	]*[a-f0-9]+:	f0 1b 03             	lock sbb \(%rbx\),%eax
d32 1
a32 1
[ 	]*[a-f0-9]+:	f0 2b 03             	lock sub \(%rbx\),%eax
d37 1
a37 1
[ 	]*[a-f0-9]+:	f0 33 03             	lock xor \(%rbx\),%eax
d39 1
a39 1
[ 	]*[a-f0-9]+:	f0 03 03             	lock add \(%rbx\),%eax
d41 1
a41 1
[ 	]*[a-f0-9]+:	f0 13 03             	lock adc \(%rbx\),%eax
d43 1
a43 1
[ 	]*[a-f0-9]+:	f0 23 03             	lock and \(%rbx\),%eax
d57 1
a57 1
[ 	]*[a-f0-9]+:	f0 0b 03             	lock or \(%rbx\),%eax
d59 1
a59 1
[ 	]*[a-f0-9]+:	f0 1b 03             	lock sbb \(%rbx\),%eax
d61 1
a61 1
[ 	]*[a-f0-9]+:	f0 2b 03             	lock sub \(%rbx\),%eax
d66 1
a66 1
[ 	]*[a-f0-9]+:	f0 33 03             	lock xor \(%rbx\),%eax
@

