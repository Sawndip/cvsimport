head	1.1;
access;
symbols
	binutils-2_24-branch:1.1.0.4
	binutils-2_24-branchpoint:1.1
	binutils-2_23_2:1.1
	binutils-2_23_1:1.1
	binutils-2_23:1.1
	binutils-2_23-branch:1.1.0.2
	binutils-2_23-branchpoint:1.1
	binutils_latest_snapshot:1.1;
locks; strict;
comment	@# @;


1.1
date	2012.02.08.18.20.37;	author hjl;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Implement Intel Transactional Synchronization Extensions

gas/

2012-02-08  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (HLE_PREFIX): New.
	(check_hle): Likewise.
	(_i386_insn): Add have_hle.
	(cpu_arch): Add .hle and .rtm.
	(md_assemble): Call check_hle if i.have_hle isn't zero.
	(parse_insn): Set i.have_hle to 1 for HLE prefix.
	(output_jump): Support up to 2 byte opcode.

	* doc/c-i386.texi: Document hle/.hle and rtm/.rtm.

gas/testsuite/

2012-02-08  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/hle-intel.d: New.
	* gas/i386/hle.d: Likewise.
	* gas/i386/hle.s: Likewise.
	* gas/i386/hlebad.l: Likewise.
	* gas/i386/hlebad.s: Likewise.
	* gas/i386/rtm-intel.d: Likewise.
	* gas/i386/rtm.d: Likewise.
	* gas/i386/rtm.s: Likewise.
	* gas/i386/x86-64-hle-intel.d: Likewise.
	* gas/i386/x86-64-hle.d: Likewise.
	* gas/i386/x86-64-hle.s: Likewise.
	* gas/i386/x86-64-hlebad.l: Likewise.
	* gas/i386/x86-64-hlebad.s: Likewise.
	* gas/i386/x86-64-rtm-intel.d: Likewise.
	* gas/i386/x86-64-rtm.d: Likewise.
	* gas/i386/x86-64-rtm.s: Likewise.

	* gas/i386/i386.exp: Run hle, hle-intel, hlebad x86-64-hle, rtm,
	rtm-intel, x86-64-hle-intel, x86-64-hlebad, x86-64-rtm and
	x86-64-rtm-intel.

include/opcode/

2012-02-08  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386.h (XACQUIRE_PREFIX_OPCODE): New.
	(XRELEASE_PREFIX_OPCODE): Likewise.

opcodes/

2012-02-08  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-dis.c (HLE_Fixup1): New.
	(HLE_Fixup2): Likewise.
	(HLE_Fixup3): Likewise.
	(Ebh1): Likewise.
	(Evh1): Likewise.
	(Ebh2): Likewise.
	(Evh2): Likewise.
	(Ebh3): Likewise.
	(Evh3): Likewise.
	(MOD_C6_REG_7): Likewise.
	(MOD_C7_REG_7): Likewise.
	(RM_C6_REG_7): Likewise.
	(RM_C7_REG_7): Likewise.
	(XACQUIRE_PREFIX): Likewise.
	(XRELEASE_PREFIX): Likewise.
	(dis386): Use Ebh1/Evh1 on add, adc, and, btc, btr, bts,
	cmpxchg, dec, inc, neg, not, or, sbb, sub, xor and xadd. Use
	Ebh2/Evh2 on xchg.  Use Ebh3/Evh3 on mov.
	(reg_table): Use Ebh1/Evh1 on add, adc, and, dec, inc, neg,
	not, or, sbb, sub and xor.  Use Ebh3/Evh3 on mov.  Use
	MOD_C6_REG_7 and MOD_C7_REG_7.
	(mod_table): Add MOD_C6_REG_7 and MOD_C7_REG_7.
	(rm_table): Add RM_C6_REG_7 and RM_C7_REG_7.  Add xend and
	xtest.
	(prefix_name): Handle XACQUIRE_PREFIX and XRELEASE_PREFIX.
	(CMPXCHG8B_Fixup): Handle HLE prefix on cmpxchg8b.

	* i386-gen.c (cpu_flag_init): Add CPU_HLE_FLAGS and
	CPU_RTM_FLAGS.
	(cpu_flags): Add CpuHLE and CpuRTM.
	(opcode_modifiers): Add HLEPrefixOk.

	* i386-opc.h (CpuHLE): New.
	(CpuRTM): Likewise.
	(HLEPrefixOk): Likewise.
	(i386_cpu_flags): Add cpuhle and cpurtm.
	(i386_opcode_modifier): Add hleprefixok.

	* i386-opc.tbl: Add HLEPrefixOk=3 to mov.  Add HLEPrefixOk to
	add, adc, and, btc, btr, bts, cmpxchg, dec, inc, neg, not, or,
	sbb, sub, xor and xadd.  Add HLEPrefixOk=2 to xchg with memory
	operand.  Add xacquire, xrelease, xabort, xbegin, xend and
	xtest.
	* i386-init.h: Regenerated.
	* i386-tbl.h: Likewise.
@
text
@# Check 32bit unsupported HLE instructions

	.allow_index_reg
	.text
_start:

# Tests for op imm8 al
	xacquire adc $100,%al
	xacquire lock adc $100,%al
	lock xacquire adc $100,%al
	xrelease adc $100,%al
	xrelease lock adc $100,%al
	lock xrelease adc $100,%al

# Tests for op imm16 ax
	xacquire adc $1000,%ax
	xacquire lock adc $1000,%ax
	lock xacquire adc $1000,%ax
	xrelease adc $1000,%ax
	xrelease lock adc $1000,%ax
	lock xrelease adc $1000,%ax

# Tests for op imm32 eax
	xacquire adc $10000000,%eax
	xacquire lock adc $10000000,%eax
	lock xacquire adc $10000000,%eax
	xrelease adc $10000000,%eax
	xrelease lock adc $10000000,%eax
	lock xrelease adc $10000000,%eax

# Tests for op imm8 regb/m8
	xacquire adcb $100,%cl
	xacquire lock adcb $100,%cl
	lock xacquire adcb $100,%cl
	xrelease adcb $100,%cl
	xrelease lock adcb $100,%cl
	lock xrelease adcb $100,%cl
	xacquire adcb $100,(%ecx)
	xrelease adcb $100,(%ecx)

# Tests for op imm16 regs/m16
	xacquire adcw $1000,%cx
	xacquire lock adcw $1000,%cx
	lock xacquire adcw $1000,%cx
	xrelease adcw $1000,%cx
	xrelease lock adcw $1000,%cx
	lock xrelease adcw $1000,%cx
	xacquire adcw $1000,(%ecx)
	xrelease adcw $1000,(%ecx)

# Tests for op imm32 regl/m32
	xacquire adcl $10000000,%ecx
	xacquire lock adcl $10000000,%ecx
	lock xacquire adcl $10000000,%ecx
	xrelease adcl $10000000,%ecx
	xrelease lock adcl $10000000,%ecx
	lock xrelease adcl $10000000,%ecx
	xacquire adcl $10000000,(%ecx)
	xrelease adcl $10000000,(%ecx)

# Tests for op imm8 regs/m16
	xacquire adcw $100,%cx
	xacquire lock adcw $100,%cx
	lock xacquire adcw $100,%cx
	xrelease adcw $100,%cx
	xrelease lock adcw $100,%cx
	lock xrelease adcw $100,%cx
	xacquire adcw $100,(%ecx)
	xrelease adcw $100,(%ecx)

# Tests for op imm8 regl/m32
	xacquire adcl $100,%ecx
	xacquire lock adcl $100,%ecx
	lock xacquire adcl $100,%ecx
	xrelease adcl $100,%ecx
	xrelease lock adcl $100,%ecx
	lock xrelease adcl $100,%ecx
	xacquire adcl $100,(%ecx)
	xrelease adcl $100,(%ecx)

# Tests for op imm8 regb/m8
	xacquire adcb $100,%cl
	xacquire lock adcb $100,%cl
	lock xacquire adcb $100,%cl
	xrelease adcb $100,%cl
	xrelease lock adcb $100,%cl
	lock xrelease adcb $100,%cl
	xacquire adcb $100,(%ecx)
	xrelease adcb $100,(%ecx)

# Tests for op regb regb/m8
# Tests for op regb/m8 regb
	xacquire adcb %al,%cl
	xacquire lock adcb %al,%cl
	lock xacquire adcb %al,%cl
	xrelease adcb %al,%cl
	xrelease lock adcb %al,%cl
	lock xrelease adcb %al,%cl
	xacquire adcb %al,(%ecx)
	xrelease adcb %al,(%ecx)
	xacquire adcb %cl,%al
	xacquire lock adcb %cl,%al
	lock xacquire adcb %cl,%al
	xrelease adcb %cl,%al
	xrelease lock adcb %cl,%al
	lock xrelease adcb %cl,%al
	xacquire adcb (%ecx),%al
	xacquire lock adcb (%ecx),%al
	lock xacquire adcb (%ecx),%al
	xrelease adcb (%ecx),%al
	xrelease lock adcb (%ecx),%al
	lock xrelease adcb (%ecx),%al

# Tests for op regs regs/m16
# Tests for op regs/m16 regs
	xacquire adcw %ax,%cx
	xacquire lock adcw %ax,%cx
	lock xacquire adcw %ax,%cx
	xrelease adcw %ax,%cx
	xrelease lock adcw %ax,%cx
	lock xrelease adcw %ax,%cx
	xacquire adcw %ax,(%ecx)
	xrelease adcw %ax,(%ecx)
	xacquire adcw %cx,%ax
	xacquire lock adcw %cx,%ax
	lock xacquire adcw %cx,%ax
	xrelease adcw %cx,%ax
	xrelease lock adcw %cx,%ax
	lock xrelease adcw %cx,%ax
	xacquire adcw (%ecx),%ax
	xacquire lock adcw (%ecx),%ax
	lock xacquire adcw (%ecx),%ax
	xrelease adcw (%ecx),%ax
	xrelease lock adcw (%ecx),%ax
	lock xrelease adcw (%ecx),%ax

# Tests for op regl regl/m32
# Tests for op regl/m32 regl
	xacquire adcl %eax,%ecx
	xacquire lock adcl %eax,%ecx
	lock xacquire adcl %eax,%ecx
	xrelease adcl %eax,%ecx
	xrelease lock adcl %eax,%ecx
	lock xrelease adcl %eax,%ecx
	xacquire adcl %eax,(%ecx)
	xrelease adcl %eax,(%ecx)
	xacquire adcl %ecx,%eax
	xacquire lock adcl %ecx,%eax
	lock xacquire adcl %ecx,%eax
	xrelease adcl %ecx,%eax
	xrelease lock adcl %ecx,%eax
	lock xrelease adcl %ecx,%eax
	xacquire adcl (%ecx),%eax
	xacquire lock adcl (%ecx),%eax
	lock xacquire adcl (%ecx),%eax
	xrelease adcl (%ecx),%eax
	xrelease lock adcl (%ecx),%eax
	lock xrelease adcl (%ecx),%eax

# Tests for op regs, regs/m16
	xacquire btcw %ax,%cx
	xacquire lock btcw %ax,%cx
	lock xacquire btcw %ax,%cx
	xrelease btcw %ax,%cx
	xrelease lock btcw %ax,%cx
	lock xrelease btcw %ax,%cx
	xacquire btcw %ax,(%ecx)
	xrelease btcw %ax,(%ecx)

# Tests for op regl regl/m32
	xacquire btcl %eax,%ecx
	xacquire lock btcl %eax,%ecx
	lock xacquire btcl %eax,%ecx
	xrelease btcl %eax,%ecx
	xrelease lock btcl %eax,%ecx
	lock xrelease btcl %eax,%ecx
	xacquire btcl %eax,(%ecx)
	xrelease btcl %eax,(%ecx)

# Tests for op regb/m8
	xacquire decb %cl
	xacquire lock decb %cl
	lock xacquire decb %cl
	xrelease decb %cl
	xrelease lock decb %cl
	lock xrelease decb %cl
	xacquire decb (%ecx)
	xrelease decb (%ecx)

# Tests for op regs/m16
	xacquire decw %cx
	xacquire lock decw %cx
	lock xacquire decw %cx
	xrelease decw %cx
	xrelease lock decw %cx
	lock xrelease decw %cx
	xacquire decw (%ecx)
	xrelease decw (%ecx)

# Tests for op regl/m32
	xacquire decl %ecx
	xacquire lock decl %ecx
	lock xacquire decl %ecx
	xrelease decl %ecx
	xrelease lock decl %ecx
	lock xrelease decl %ecx
	xacquire decl (%ecx)
	xrelease decl (%ecx)

# Tests for op m64
	xacquire cmpxchg8bq (%ecx)
	xrelease cmpxchg8bq (%ecx)

# Tests for op regb, regb/m8
	xacquire cmpxchgb %cl,%al
	xacquire lock cmpxchgb %cl,%al
	lock xacquire cmpxchgb %cl,%al
	xrelease cmpxchgb %cl,%al
	xrelease lock cmpxchgb %cl,%al
	lock xrelease cmpxchgb %cl,%al
	xacquire cmpxchgb %cl,(%ecx)
	xrelease cmpxchgb %cl,(%ecx)

	.intel_syntax noprefix

# Tests for op imm8 al
	xacquire adc al,100
	xacquire lock adc al,100
	lock xacquire adc al,100
	xrelease adc al,100
	xrelease lock adc al,100
	lock xrelease adc al,100

# Tests for op imm16 ax
	xacquire adc ax,1000
	xacquire lock adc ax,1000
	lock xacquire adc ax,1000
	xrelease adc ax,1000
	xrelease lock adc ax,1000
	lock xrelease adc ax,1000

# Tests for op imm32 eax
	xacquire adc eax,10000000
	xacquire lock adc eax,10000000
	lock xacquire adc eax,10000000
	xrelease adc eax,10000000
	xrelease lock adc eax,10000000
	lock xrelease adc eax,10000000

# Tests for op imm8 regb/m8
	xacquire adc cl,100
	xacquire lock adc cl,100
	lock xacquire adc cl,100
	xrelease adc cl,100
	xrelease lock adc cl,100
	lock xrelease adc cl,100
	xacquire adc BYTE PTR [ecx],100
	xrelease adc BYTE PTR [ecx],100

# Tests for op imm16 regs/m16
	xacquire adc cx,1000
	xacquire lock adc cx,1000
	lock xacquire adc cx,1000
	xrelease adc cx,1000
	xrelease lock adc cx,1000
	lock xrelease adc cx,1000
	xacquire adc WORD PTR [ecx],1000
	xrelease adc WORD PTR [ecx],1000

# Tests for op imm32 regl/m32
	xacquire adc ecx,10000000
	xacquire lock adc ecx,10000000
	lock xacquire adc ecx,10000000
	xrelease adc ecx,10000000
	xrelease lock adc ecx,10000000
	lock xrelease adc ecx,10000000
	xacquire adc DWORD PTR [ecx],10000000
	xrelease adc DWORD PTR [ecx],10000000

# Tests for op imm8 regs/m16
	xacquire adc cx,100
	xacquire lock adc cx,100
	lock xacquire adc cx,100
	xrelease adc cx,100
	xrelease lock adc cx,100
	lock xrelease adc cx,100
	xacquire adc WORD PTR [ecx],100
	xrelease adc WORD PTR [ecx],100

# Tests for op imm8 regl/m32
	xacquire adc ecx,100
	xacquire lock adc ecx,100
	lock xacquire adc ecx,100
	xrelease adc ecx,100
	xrelease lock adc ecx,100
	lock xrelease adc ecx,100
	xacquire adc DWORD PTR [ecx],100
	xrelease adc DWORD PTR [ecx],100

# Tests for op imm8 regb/m8
	xacquire adc cl,100
	xacquire lock adc cl,100
	lock xacquire adc cl,100
	xrelease adc cl,100
	xrelease lock adc cl,100
	lock xrelease adc cl,100
	xacquire adc BYTE PTR [ecx],100
	xrelease adc BYTE PTR [ecx],100

# Tests for op regb regb/m8
# Tests for op regb/m8 regb
	xacquire adc cl,al
	xacquire lock adc cl,al
	lock xacquire adc cl,al
	xrelease adc cl,al
	xrelease lock adc cl,al
	lock xrelease adc cl,al
	xacquire adc BYTE PTR [ecx],al
	xrelease adc BYTE PTR [ecx],al
	xacquire adc al,cl
	xacquire lock adc al,cl
	lock xacquire adc al,cl
	xrelease adc al,cl
	xrelease lock adc al,cl
	lock xrelease adc al,cl
	xacquire adc al,BYTE PTR [ecx]
	xacquire lock adc al,BYTE PTR [ecx]
	lock xacquire adc al,BYTE PTR [ecx]
	xrelease adc al,BYTE PTR [ecx]
	xrelease lock adc al,BYTE PTR [ecx]
	lock xrelease adc al,BYTE PTR [ecx]

# Tests for op regs regs/m16
# Tests for op regs/m16 regs
	xacquire adc cx,ax
	xacquire lock adc cx,ax
	lock xacquire adc cx,ax
	xrelease adc cx,ax
	xrelease lock adc cx,ax
	lock xrelease adc cx,ax
	xacquire adc WORD PTR [ecx],ax
	xrelease adc WORD PTR [ecx],ax
	xacquire adc ax,cx
	xacquire lock adc ax,cx
	lock xacquire adc ax,cx
	xrelease adc ax,cx
	xrelease lock adc ax,cx
	lock xrelease adc ax,cx
	xacquire adc ax,WORD PTR [ecx]
	xacquire lock adc ax,WORD PTR [ecx]
	lock xacquire adc ax,WORD PTR [ecx]
	xrelease adc ax,WORD PTR [ecx]
	xrelease lock adc ax,WORD PTR [ecx]
	lock xrelease adc ax,WORD PTR [ecx]

# Tests for op regl regl/m32
# Tests for op regl/m32 regl
	xacquire adc ecx,eax
	xacquire lock adc ecx,eax
	lock xacquire adc ecx,eax
	xrelease adc ecx,eax
	xrelease lock adc ecx,eax
	lock xrelease adc ecx,eax
	xacquire adc DWORD PTR [ecx],eax
	xrelease adc DWORD PTR [ecx],eax
	xacquire adc eax,ecx
	xacquire lock adc eax,ecx
	lock xacquire adc eax,ecx
	xrelease adc eax,ecx
	xrelease lock adc eax,ecx
	lock xrelease adc eax,ecx
	xacquire adc eax,DWORD PTR [ecx]
	xacquire lock adc eax,DWORD PTR [ecx]
	lock xacquire adc eax,DWORD PTR [ecx]
	xrelease adc eax,DWORD PTR [ecx]
	xrelease lock adc eax,DWORD PTR [ecx]
	lock xrelease adc eax,DWORD PTR [ecx]

# Tests for op regs, regs/m16
	xacquire btc cx,ax
	xacquire lock btc cx,ax
	lock xacquire btc cx,ax
	xrelease btc cx,ax
	xrelease lock btc cx,ax
	lock xrelease btc cx,ax
	xacquire btc WORD PTR [ecx],ax
	xrelease btc WORD PTR [ecx],ax

# Tests for op regl regl/m32
	xacquire btc ecx,eax
	xacquire lock btc ecx,eax
	lock xacquire btc ecx,eax
	xrelease btc ecx,eax
	xrelease lock btc ecx,eax
	lock xrelease btc ecx,eax
	xacquire btc DWORD PTR [ecx],eax
	xrelease btc DWORD PTR [ecx],eax

# Tests for op regb/m8
	xacquire dec cl
	xacquire lock dec cl
	lock xacquire dec cl
	xrelease dec cl
	xrelease lock dec cl
	lock xrelease dec cl
	xacquire dec BYTE PTR [ecx]
	xrelease dec BYTE PTR [ecx]

# Tests for op regs/m16
	xacquire dec cx
	xacquire lock dec cx
	lock xacquire dec cx
	xrelease dec cx
	xrelease lock dec cx
	lock xrelease dec cx
	xacquire dec WORD PTR [ecx]
	xrelease dec WORD PTR [ecx]

# Tests for op regl/m32
	xacquire dec ecx
	xacquire lock dec ecx
	lock xacquire dec ecx
	xrelease dec ecx
	xrelease lock dec ecx
	lock xrelease dec ecx
	xacquire dec DWORD PTR [ecx]
	xrelease dec DWORD PTR [ecx]

# Tests for op m64
	xacquire cmpxchg8b QWORD PTR [ecx]
	xrelease cmpxchg8b QWORD PTR [ecx]

# Tests for op regb, regb/m8
	xacquire cmpxchg al,cl
	xacquire lock cmpxchg al,cl
	lock xacquire cmpxchg al,cl
	xrelease cmpxchg al,cl
	xrelease lock cmpxchg al,cl
	lock xrelease cmpxchg al,cl
	xacquire cmpxchg BYTE PTR [ecx],cl
	xrelease cmpxchg BYTE PTR [ecx],cl
@
