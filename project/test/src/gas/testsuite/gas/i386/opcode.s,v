head	1.8;
access;
symbols
	binutils-2_24-branch:1.8.0.14
	binutils-2_24-branchpoint:1.8
	binutils-2_21_1:1.8
	binutils-2_23_2:1.8
	binutils-2_23_1:1.8
	binutils-2_23:1.8
	binutils-2_23-branch:1.8.0.12
	binutils-2_23-branchpoint:1.8
	binutils-2_22_branch:1.8.0.10
	binutils-2_22:1.8
	binutils-2_22-branch:1.8.0.8
	binutils-2_22-branchpoint:1.8
	binutils-2_21:1.8
	binutils-2_21-branch:1.8.0.6
	binutils-2_21-branchpoint:1.8
	binutils-2_20_1:1.8
	binutils-2_20:1.8
	binutils-arc-20081103-branch:1.7.0.8
	binutils-arc-20081103-branchpoint:1.7
	binutils-2_20-branch:1.8.0.4
	binutils-2_20-branchpoint:1.8
	dje-cgen-play1-branch:1.8.0.2
	dje-cgen-play1-branchpoint:1.8
	arc-20081103-branch:1.7.0.6
	arc-20081103-branchpoint:1.7
	binutils-2_19_1:1.7
	binutils-2_19:1.7
	binutils-2_19-branch:1.7.0.4
	binutils-2_19-branchpoint:1.7
	binutils-2_18:1.7
	binutils-2_18-branch:1.7.0.2
	binutils-2_18-branchpoint:1.7
	binutils-csl-coldfire-4_1-32:1.3
	binutils-csl-sourcerygxx-4_1-32:1.3
	binutils-csl-innovasic-fido-3_4_4-33:1.3
	binutils-csl-sourcerygxx-3_4_4-32:1.2
	binutils-csl-coldfire-4_1-30:1.3
	binutils-csl-sourcerygxx-4_1-30:1.3
	binutils-csl-coldfire-4_1-28:1.3
	binutils-csl-sourcerygxx-4_1-29:1.3
	binutils-csl-sourcerygxx-4_1-28:1.3
	binutils-csl-arm-2006q3-27:1.3
	binutils-csl-sourcerygxx-4_1-27:1.3
	binutils-csl-arm-2006q3-26:1.3
	binutils-csl-sourcerygxx-4_1-26:1.3
	binutils-csl-sourcerygxx-4_1-25:1.3
	binutils-csl-sourcerygxx-4_1-24:1.3
	binutils-csl-sourcerygxx-4_1-23:1.3
	binutils-csl-sourcerygxx-4_1-21:1.3
	binutils-csl-arm-2006q3-21:1.3
	binutils-csl-sourcerygxx-4_1-22:1.3
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.3
	binutils-csl-sourcerygxx-4_1-20:1.3
	binutils-csl-arm-2006q3-19:1.3
	binutils-csl-sourcerygxx-4_1-19:1.3
	binutils-csl-sourcerygxx-4_1-18:1.3
	binutils-csl-renesas-4_1-9:1.3
	binutils-csl-sourcerygxx-3_4_4-25:1.2
	binutils-csl-renesas-4_1-8:1.3
	binutils-csl-renesas-4_1-7:1.3
	binutils-csl-renesas-4_1-6:1.3
	binutils-csl-sourcerygxx-4_1-17:1.3
	binutils-csl-sourcerygxx-4_1-14:1.3
	binutils-csl-sourcerygxx-4_1-15:1.3
	binutils-csl-sourcerygxx-4_1-13:1.3
	binutils-2_17:1.3
	binutils-csl-sourcerygxx-4_1-12:1.3
	binutils-csl-sourcerygxx-3_4_4-21:1.3
	binutils-csl-wrs-linux-3_4_4-24:1.2
	binutils-csl-wrs-linux-3_4_4-23:1.2
	binutils-csl-sourcerygxx-4_1-9:1.3
	binutils-csl-sourcerygxx-4_1-8:1.3
	binutils-csl-sourcerygxx-4_1-7:1.3
	binutils-csl-arm-2006q1-6:1.3
	binutils-csl-sourcerygxx-4_1-6:1.3
	binutils-csl-wrs-linux-3_4_4-22:1.2
	binutils-csl-coldfire-4_1-11:1.3
	binutils-csl-sourcerygxx-3_4_4-19:1.3
	binutils-csl-coldfire-4_1-10:1.3
	binutils-csl-sourcerygxx-4_1-5:1.3
	binutils-csl-sourcerygxx-4_1-4:1.3
	binutils-csl-wrs-linux-3_4_4-21:1.2
	binutils-csl-morpho-4_1-4:1.3
	binutils-csl-sourcerygxx-3_4_4-17:1.3
	binutils-csl-wrs-linux-3_4_4-20:1.2
	binutils-2_17-branch:1.3.0.4
	binutils-2_17-branchpoint:1.3
	binutils-csl-2_17-branch:1.3.0.2
	binutils-csl-2_17-branchpoint:1.3
	binutils-csl-gxxpro-3_4-branch:1.2.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.2
	binutils-2_16_1:1.2
	binutils-csl-arm-2005q1b:1.2
	binutils-2_16:1.2
	binutils-csl-arm-2005q1a:1.2
	binutils-csl-arm-2005q1-branch:1.2.0.4
	binutils-csl-arm-2005q1-branchpoint:1.2
	binutils-2_16-branch:1.2.0.2
	binutils-2_16-branchpoint:1.2
	csl-arm-2004-q3d:1.1.1.1
	csl-arm-2004-q3:1.1.1.1
	binutils-2_15:1.1.1.1
	binutils-2_15-branchpoint:1.1.1.1
	csl-arm-2004-q1a:1.1.1.1
	csl-arm-2004-q1:1.1.1.1
	binutils-2_15-branch:1.1.1.1.0.16
	cagney_bfdfile-20040213-branch:1.1.1.1.0.14
	cagney_bfdfile-20040213-branchpoint:1.1.1.1
	cagney_bigcore-20040122-branch:1.1.1.1.0.12
	cagney_bigcore-20040122-branchpoint:1.1.1.1
	csl-arm-2003-q4:1.1.1.1
	binutils-2_14:1.1.1.1
	binutils-2_14-branch:1.1.1.1.0.10
	binutils-2_14-branchpoint:1.1.1.1
	binutils-2_13_2_1:1.1.1.1
	binutils-2_13_2:1.1.1.1
	binutils-2_13_1:1.1.1.1
	binutils-2_13:1.1.1.1
	binutils-2_13-branchpoint:1.1.1.1
	binutils-2_13-branch:1.1.1.1.0.8
	binutils-2_12_1:1.1.1.1
	binutils-2_12:1.1.1.1
	binutils-2_12-branch:1.1.1.1.0.6
	binutils-2_12-branchpoint:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.1
	binutils-2_11_2:1.1.1.1
	binutils-2_11_1:1.1.1.1
	binutils-2_11:1.1.1.1
	x86_64versiong3:1.1.1.1
	binutils-2_11-branch:1.1.1.1.0.4
	binutils-2_10_1:1.1.1.1
	binutils-2_10:1.1.1.1
	binutils-2_10-branch:1.1.1.1.0.2
	binutils-2_10-branchpoint:1.1.1.1
	binutils_latest_snapshot:1.8
	repo-unification-2000-02-06:1.1.1.1
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2008.11.03.19.38.09;	author hjl;	state Exp;
branches;
next	1.7;

1.7
date	2007.02.12.04.51.40;	author hjl;	state Exp;
branches;
next	1.6;

1.6
date	2006.12.29.21.48.48;	author hjl;	state Exp;
branches;
next	1.5;

1.5
date	2006.07.18.20.25.40;	author hjl;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.12.18.55.39;	author hjl;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.29.19.30.47;	author hjl;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.10.04.29.55;	author amodra;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.28.50;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.03.07.28.50;	author rth;	state Exp;
branches;
next	;


desc
@@


1.8
log
@gas/testsuite/

2008-11-03  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/intel.s: Add tests for cmovpe and cmovpo.
	* gas/i386/opcode.s: Likewise.

	* gas/i386/intel.d: Updated.
	* gas/i386/opcode.d: Likewise.
	* gas/i386/opcode-intel.d: Likewise.
	* gas/i386/opcode-suffix.d: Likewise.

opcodes/

2008-11-03  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-opc.tbl: Add cmovpe and cmovpo.
	* i386-tbl.h: Regenerated.
@
text
@.text
foo:
 add    %dl,0x90909090(%eax)
 add    %edx,0x90909090(%eax)
 add    0x90909090(%eax),%dl
 add    0x90909090(%eax),%edx
 add    $0x90,%al
 add    $0x90909090,%eax
 push   %es
 pop    %es
 or     %dl,0x90909090(%eax)
 or     %edx,0x90909090(%eax)
 or     0x90909090(%eax),%dl
 or     0x90909090(%eax),%edx
 or     $0x90,%al
 or     $0x90909090,%eax
 push   %cs
 adc    %dl,0x90909090(%eax)
 adc    %edx,0x90909090(%eax)
 adc    0x90909090(%eax),%dl
 adc    0x90909090(%eax),%edx
 adc    $0x90,%al
 adc    $0x90909090,%eax
 push   %ss
 pop    %ss
 sbb    %dl,0x90909090(%eax)
 sbb    %edx,0x90909090(%eax)
 sbb    0x90909090(%eax),%dl
 sbb    0x90909090(%eax),%edx
 sbb    $0x90,%al
 sbb    $0x90909090,%eax
 push   %ds
 pop    %ds
 and    %dl,0x90909090(%eax)
 and    %edx,0x90909090(%eax)
 and    0x90909090(%eax),%dl
 and    0x90909090(%eax),%edx
 and    $0x90,%al
 and    $0x90909090,%eax
 daa
 sub    %dl,0x90909090(%eax)
 sub    %edx,0x90909090(%eax)
 sub    0x90909090(%eax),%dl
 sub    0x90909090(%eax),%edx
 sub    $0x90,%al
 sub    $0x90909090,%eax
 das
 xor    %dl,0x90909090(%eax)
 xor    %edx,0x90909090(%eax)
 xor    0x90909090(%eax),%dl
 xor    0x90909090(%eax),%edx
 xor    $0x90,%al
 xor    $0x90909090,%eax
 aaa
 cmp    %dl,0x90909090(%eax)
 cmp    %edx,0x90909090(%eax)
 cmp    0x90909090(%eax),%dl
 cmp    0x90909090(%eax),%edx
 cmp    $0x90,%al
 cmp    $0x90909090,%eax
 aas
 inc    %eax
 inc    %ecx
 inc    %edx
 inc    %ebx
 inc    %esp
 inc    %ebp
 inc    %esi
 inc    %edi
 dec    %eax
 dec    %ecx
 dec    %edx
 dec    %ebx
 dec    %esp
 dec    %ebp
 dec    %esi
 dec    %edi
 push   %eax
 push   %ecx
 push   %edx
 push   %ebx
 push   %esp
 push   %ebp
 push   %esi
 push   %edi
 pop    %eax
 pop    %ecx
 pop    %edx
 pop    %ebx
 pop    %esp
 pop    %ebp
 pop    %esi
 pop    %edi
 pusha
 popa
 bound  %edx,0x90909090(%eax)
 arpl   %dx,0x90909090(%eax)
 push   $0x90909090
 imul   $0x90909090,0x90909090(%eax),%edx
 push   $0xffffff90
 imul   $0xffffff90,0x90909090(%eax),%edx
 insb   (%dx),%es:(%edi)
 insl   (%dx),%es:(%edi)
 outsb  %ds:(%esi),(%dx)
 outsl  %ds:(%esi),(%dx)
 jo     .+2-0x70
 jno    .+2-0x70
 jb     .+2-0x70
 jae    .+2-0x70
 je     .+2-0x70
 jne    .+2-0x70
 jbe    .+2-0x70
 ja     .+2-0x70
 js     .+2-0x70
 jns    .+2-0x70
 jp     .+2-0x70
 jnp    .+2-0x70
 jl     .+2-0x70
 jge    .+2-0x70
 jle    .+2-0x70
 jg     .+2-0x70
 adcb   $0x90,0x90909090(%eax)
 adcl   $0x90909090,0x90909090(%eax)
 adcl   $0xffffff90,0x90909090(%eax)
 test   %dl,0x90909090(%eax)
 test   %edx,0x90909090(%eax)
 xchg   %dl,0x90909090(%eax)
 xchg   %edx,0x90909090(%eax)
 mov    %dl,0x90909090(%eax)
 mov    %edx,0x90909090(%eax)
 mov    0x90909090(%eax),%dl
 mov    0x90909090(%eax),%edx
 movw   %ss,0x90909090(%eax)
 lea    0x90909090(%eax),%edx
 movw   0x90909090(%eax),%ss
 popl   0x90909090(%eax)
 xchg   %eax,%eax
 xchg   %eax,%ecx
 xchg   %eax,%edx
 xchg   %eax,%ebx
 xchg   %eax,%esp
 xchg   %eax,%ebp
 xchg   %eax,%esi
 xchg   %eax,%edi
 cwtl
 cltd
 lcall  $0x9090,$0x90909090
 fwait
 pushf
 popf
 sahf
 lahf
 mov    0x90909090,%al
 mov    0x90909090,%eax
 mov    %al,0x90909090
 mov    %eax,0x90909090
 movsb  %ds:(%esi),%es:(%edi)
 movsl  %ds:(%esi),%es:(%edi)
 cmpsb  %es:(%edi),%ds:(%esi)
 cmpsl  %es:(%edi),%ds:(%esi)
 test   $0x90,%al
 test   $0x90909090,%eax
 stos   %al,%es:(%edi)
 stos   %eax,%es:(%edi)
 lods   %ds:(%esi),%al
 lods   %ds:(%esi),%eax
 scas   %es:(%edi),%al
 scas   %es:(%edi),%eax
 mov    $0x90,%al
 mov    $0x90,%cl
 mov    $0x90,%dl
 mov    $0x90,%bl
 mov    $0x90,%ah
 mov    $0x90,%ch
 mov    $0x90,%dh
 mov    $0x90,%bh
 mov    $0x90909090,%eax
 mov    $0x90909090,%ecx
 mov    $0x90909090,%edx
 mov    $0x90909090,%ebx
 mov    $0x90909090,%esp
 mov    $0x90909090,%ebp
 mov    $0x90909090,%esi
 mov    $0x90909090,%edi
 rclb   $0x90,0x90909090(%eax)
 rcll   $0x90,0x90909090(%eax)
 ret    $0x9090
 ret
 les    0x90909090(%eax),%edx
 lds    0x90909090(%eax),%edx
 movb   $0x90,0x90909090(%eax)
 movl   $0x90909090,0x90909090(%eax)
 enter  $0x9090,$0x90
 leave
 lret   $0x9090
 lret
 int3
 int    $0x90
 into
 iret
 rclb   0x90909090(%eax)
 rcll   0x90909090(%eax)
 rclb   %cl,0x90909090(%eax)
 rcll   %cl,0x90909090(%eax)
 aam    $0xffffff90
 aad    $0xffffff90
 xlat   %ds:(%ebx)
 fcoms  0x90909090(%eax)
 fsts   0x90909090(%eax)
 ficoml 0x90909090(%eax)
 fistl  0x90909090(%eax)
 fcoml  0x90909090(%eax)
 fstl   0x90909090(%eax)
 ficom  0x90909090(%eax)
 fist   0x90909090(%eax)
 loopne .+2-0x70
 loope  .+2-0x70
 loop   .+2-0x70
 jecxz  .+2-0x70
 in     $0x90,%al
 in     $0x90,%eax
 out    %al,$0x90
 out    %eax,$0x90
 call   .+5+0x90909090
 jmp    .+5+0x90909090
 ljmp   $0x9090,$0x90909090
 jmp    .+2-0x70
 in     (%dx),%al
 in     (%dx),%eax
 out    %al,(%dx)
 out    %eax,(%dx)
 hlt
 cmc
 notb   0x90909090(%eax)
 notl   0x90909090(%eax)
 clc
 stc
 cli
 sti
 cld
 std
 call   *0x90909090(%eax)
 lldt   0x90909090(%eax)
 lgdt   0x90909090(%eax)
 lar    0x90909090(%eax),%edx
 lsl    0x90909090(%eax),%edx
 clts
 invd
 wbinvd
 ud2a
 mov    %cr2,%eax
 mov    %db2,%eax
 mov    %eax,%cr2
 mov    %eax,%db2
 mov    %tr2,%eax
 mov    %eax,%tr2
 wrmsr
 rdtsc
 rdmsr
 rdpmc
 cmovo  0x90909090(%eax),%edx
 cmovno 0x90909090(%eax),%edx
 cmovb  0x90909090(%eax),%edx
 cmovae 0x90909090(%eax),%edx
 cmove  0x90909090(%eax),%edx
 cmovne 0x90909090(%eax),%edx
 cmovbe 0x90909090(%eax),%edx
 cmova  0x90909090(%eax),%edx
 cmovs  0x90909090(%eax),%edx
 cmovns 0x90909090(%eax),%edx
 cmovp  0x90909090(%eax),%edx
 cmovnp 0x90909090(%eax),%edx
 cmovl  0x90909090(%eax),%edx
 cmovge 0x90909090(%eax),%edx
 cmovle 0x90909090(%eax),%edx
 cmovg  0x90909090(%eax),%edx
 punpcklbw 0x90909090(%eax),%mm2
 punpcklwd 0x90909090(%eax),%mm2
 punpckldq 0x90909090(%eax),%mm2
 packsswb 0x90909090(%eax),%mm2
 pcmpgtb 0x90909090(%eax),%mm2
 pcmpgtw 0x90909090(%eax),%mm2
 pcmpgtd 0x90909090(%eax),%mm2
 packuswb 0x90909090(%eax),%mm2
 punpckhbw 0x90909090(%eax),%mm2
 punpckhwd 0x90909090(%eax),%mm2
 punpckhdq 0x90909090(%eax),%mm2
 packssdw 0x90909090(%eax),%mm2
 movd   0x90909090(%eax),%mm2
 movq   0x90909090(%eax),%mm2
 psrlw  $0x90,%mm0
 psrld  $0x90,%mm0
 psrlq  $0x90,%mm0
 pcmpeqb 0x90909090(%eax),%mm2
 pcmpeqw 0x90909090(%eax),%mm2
 pcmpeqd 0x90909090(%eax),%mm2
 emms
 movd   %mm2,0x90909090(%eax)
 movq   %mm2,0x90909090(%eax)
 jo     .+6+0x90909090
 jno    .+6+0x90909090
 jb     .+6+0x90909090
 jae    .+6+0x90909090
 je     .+6+0x90909090
 jne    .+6+0x90909090
 jbe    .+6+0x90909090
 ja     .+6+0x90909090
 js     .+6+0x90909090
 jns    .+6+0x90909090
 jp     .+6+0x90909090
 jnp    .+6+0x90909090
 jl     .+6+0x90909090
 jge    .+6+0x90909090
 jle    .+6+0x90909090
 jg     .+6+0x90909090
 seto   0x90909090(%eax)
 setno  0x90909090(%eax)
 setb   0x90909090(%eax)
 setae  0x90909090(%eax)
 sete   0x90909090(%eax)
 setne  0x90909090(%eax)
 setbe  0x90909090(%eax)
 seta   0x90909090(%eax)
 sets   0x90909090(%eax)
 setns  0x90909090(%eax)
 setp   0x90909090(%eax)
 setnp  0x90909090(%eax)
 setl   0x90909090(%eax)
 setge  0x90909090(%eax)
 setle  0x90909090(%eax)
 setg   0x90909090(%eax)
 push   %fs
 pop    %fs
 cpuid
 bt     %edx,0x90909090(%eax)
 shld   $0x90,%edx,0x90909090(%eax)
 shld   %cl,%edx,0x90909090(%eax)
 push   %gs
 pop    %gs
 rsm
 bts    %edx,0x90909090(%eax)
 shrd   $0x90,%edx,0x90909090(%eax)
 shrd   %cl,%edx,0x90909090(%eax)
 imul   0x90909090(%eax),%edx
 cmpxchg %dl,0x90909090(%eax)
 cmpxchg %edx,0x90909090(%eax)
 lss    0x90909090(%eax),%edx
 btr    %edx,0x90909090(%eax)
 lfs    0x90909090(%eax),%edx
 lgs    0x90909090(%eax),%edx
 movzbl 0x90909090(%eax),%edx
 movzwl 0x90909090(%eax),%edx
 ud2b
 btc    %edx,0x90909090(%eax)
 bsf    0x90909090(%eax),%edx
 bsr    0x90909090(%eax),%edx
 movsbl 0x90909090(%eax),%edx
 movswl 0x90909090(%eax),%edx
 xadd   %dl,0x90909090(%eax)
 xadd   %edx,0x90909090(%eax)
 bswap  %eax
 bswap  %ecx
 bswap  %edx
 bswap  %ebx
 bswap  %esp
 bswap  %ebp
 bswap  %esi
 bswap  %edi
 psrlw  0x90909090(%eax),%mm2
 psrld  0x90909090(%eax),%mm2
 psrlq  0x90909090(%eax),%mm2
 pmullw 0x90909090(%eax),%mm2
 psubusb 0x90909090(%eax),%mm2
 psubusw 0x90909090(%eax),%mm2
 pand   0x90909090(%eax),%mm2
 paddusb 0x90909090(%eax),%mm2
 paddusw 0x90909090(%eax),%mm2
 pandn  0x90909090(%eax),%mm2
 psraw  0x90909090(%eax),%mm2
 psrad  0x90909090(%eax),%mm2
 pmulhw 0x90909090(%eax),%mm2
 psubsb 0x90909090(%eax),%mm2
 psubsw 0x90909090(%eax),%mm2
 por    0x90909090(%eax),%mm2
 paddsb 0x90909090(%eax),%mm2
 paddsw 0x90909090(%eax),%mm2
 pxor   0x90909090(%eax),%mm2
 psllw  0x90909090(%eax),%mm2
 pslld  0x90909090(%eax),%mm2
 psllq  0x90909090(%eax),%mm2
 pmaddwd 0x90909090(%eax),%mm2
 psubb  0x90909090(%eax),%mm2
 psubw  0x90909090(%eax),%mm2
 psubd  0x90909090(%eax),%mm2
 paddb  0x90909090(%eax),%mm2
 paddw  0x90909090(%eax),%mm2
 paddd  0x90909090(%eax),%mm2
 add    %dx,0x90909090(%eax)
 add    0x90909090(%eax),%dx
 add    $0x9090,%ax
 pushw  %es
 popw   %es
 or     %dx,0x90909090(%eax)
 or     0x90909090(%eax),%dx
 or     $0x9090,%ax
 pushw  %cs
 adc    %dx,0x90909090(%eax)
 adc    0x90909090(%eax),%dx
 adc    $0x9090,%ax
 pushw  %ss
 popw   %ss
 sbb    %dx,0x90909090(%eax)
 sbb    0x90909090(%eax),%dx
 sbb    $0x9090,%ax
 pushw  %ds
 popw   %ds
 and    %dx,0x90909090(%eax)
 and    0x90909090(%eax),%dx
 and    $0x9090,%ax
 sub    %dx,0x90909090(%eax)
 sub    0x90909090(%eax),%dx
 sub    $0x9090,%ax
 xor    %dx,0x90909090(%eax)
 xor    0x90909090(%eax),%dx
 xor    $0x9090,%ax
 cmp    %dx,0x90909090(%eax)
 cmp    0x90909090(%eax),%dx
 cmp    $0x9090,%ax
 inc    %ax
 inc    %cx
 inc    %dx
 inc    %bx
 inc    %sp
 inc    %bp
 inc    %si
 inc    %di
 dec    %ax
 dec    %cx
 dec    %dx
 dec    %bx
 dec    %sp
 dec    %bp
 dec    %si
 dec    %di
 push   %ax
 push   %cx
 push   %dx
 push   %bx
 push   %sp
 push   %bp
 push   %si
 push   %di
 pop    %ax
 pop    %cx
 pop    %dx
 pop    %bx
 pop    %sp
 pop    %bp
 pop    %si
 pop    %di
 pushaw
 popaw
 bound  %dx,0x90909090(%eax)
 pushw  $0x9090
 imul   $0x9090,0x90909090(%eax),%dx
 pushw  $0xffffff90
 imul   $0xffffff90,0x90909090(%eax),%dx
 insw   (%dx),%es:(%edi)
 outsw  %ds:(%esi),(%dx)
 adcw   $0x9090,0x90909090(%eax)
 adcw   $0xffffff90,0x90909090(%eax)
 test   %dx,0x90909090(%eax)
 xchg   %dx,0x90909090(%eax)
 mov    %dx,0x90909090(%eax)
 mov    0x90909090(%eax),%dx
 movw   %ss,0x90909090(%eax)
 lea    0x90909090(%eax),%dx
 popw   0x90909090(%eax)
 xchg   %ax,%cx
 xchg   %ax,%dx
 xchg   %ax,%bx
 xchg   %ax,%sp
 xchg   %ax,%bp
 xchg   %ax,%si
 xchg   %ax,%di
 cbtw
 cwtd
 lcallw $0x9090,$0x9090
 pushfw
 popfw
 mov    0x90909090,%ax
 mov    %ax,0x90909090
 movsw  %ds:(%esi),%es:(%edi)
 cmpsw  %es:(%edi),%ds:(%esi)
 test   $0x9090,%ax
 stos   %ax,%es:(%edi)
 lods   %ds:(%esi),%ax
 scas   %es:(%edi),%ax
 mov    $0x9090,%ax
 mov    $0x9090,%cx
 mov    $0x9090,%dx
 mov    $0x9090,%bx
 mov    $0x9090,%sp
 mov    $0x9090,%bp
 mov    $0x9090,%si
 mov    $0x9090,%di
 rclw   $0x90,0x90909090(%eax)
 retw   $0x9090
 retw
 les    0x90909090(%eax),%dx
 lds    0x90909090(%eax),%dx
 movw   $0x9090,0x90909090(%eax)
 enterw $0x9090,$0x90
 leavew
 lretw  $0x9090
 lretw
 iretw
 rclw   0x90909090(%eax)
 rclw   %cl,0x90909090(%eax)
 in     $0x90,%ax
 out    %ax,$0x90
 callw  .+3+0x9090
 ljmpw  $0x9090,$0x9090
 in     (%dx),%ax
 out    %ax,(%dx)
 notw   0x90909090(%eax)
 callw  *0x90909090(%eax)
 lar    0x90909090(%eax),%dx
 lsl    0x90909090(%eax),%dx
 cmovo  0x90909090(%eax),%dx
 cmovno 0x90909090(%eax),%dx
 cmovb  0x90909090(%eax),%dx
 cmovae 0x90909090(%eax),%dx
 cmove  0x90909090(%eax),%dx
 cmovne 0x90909090(%eax),%dx
 cmovbe 0x90909090(%eax),%dx
 cmova  0x90909090(%eax),%dx
 cmovs  0x90909090(%eax),%dx
 cmovns 0x90909090(%eax),%dx
 cmovp  0x90909090(%eax),%dx
 cmovnp 0x90909090(%eax),%dx
 cmovl  0x90909090(%eax),%dx
 cmovge 0x90909090(%eax),%dx
 cmovle 0x90909090(%eax),%dx
 cmovg  0x90909090(%eax),%dx
 pushw  %fs
 popw   %fs
 bt     %dx,0x90909090(%eax)
 shld   $0x90,%dx,0x90909090(%eax)
 shld   %cl,%dx,0x90909090(%eax)
 pushw  %gs
 popw   %gs
 bts    %dx,0x90909090(%eax)
 shrd   $0x90,%dx,0x90909090(%eax)
 shrd   %cl,%dx,0x90909090(%eax)
 imul   0x90909090(%eax),%dx
 cmpxchg %dx,0x90909090(%eax)
 lss    0x90909090(%eax),%dx
 btr    %dx,0x90909090(%eax)
 lfs    0x90909090(%eax),%dx
 lgs    0x90909090(%eax),%dx
 movzbw 0x90909090(%eax),%dx
 btc    %dx,0x90909090(%eax)
 bsf    0x90909090(%eax),%dx
 bsr    0x90909090(%eax),%dx
 movsbw 0x90909090(%eax),%dx
 xadd   %dx,0x90909090(%eax)

 xchg   %ax,%ax

 sldt	%eax
 sldt	%ax
 sldt	(%eax)
 smsw	%eax
 smsw	%ax
 smsw	(%eax)
 str	%eax
 str	%ax
 str	(%eax)

 shrd   %cl,%edx,%eax
 shld   %cl,%edx,%eax

 test   %eax,%ebx
 test   %ebx,%eax
 test   (%eax),%ebx

 cmovpe  0x90909090(%eax),%edx
 cmovpo 0x90909090(%eax),%edx
 cmovpe  0x90909090(%eax),%dx
 cmovpo 0x90909090(%eax),%dx
@


1.7
log
@gas/testsuite/

2007-02-11  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/4027
	* gas/i386/opcode.s: Add more tests for "test".
	* i386/opcode-intel.d: Updated.
	* gas/i386/opcode-suffix.d: Likewise.
	* gas/i386/opcode.d: Likewise.

include/opcode/

2007-02-11  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/4027
	* i386.h (i386_optab): Put the real "test" before the pseudo
	one.
@
text
@d588 4
a591 2
# Force a good alignment.
 .p2align 4,0
@


1.6
log
@gas/

2006-12-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (build_modrm_byte): Handle shift count
	register with 3 operands.

gas/testsuite/

2006-12-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/intel.s: Add tests for "shrd %cl,%edx,%eax" and
	"shld %cl,%edx,%eax".
	* gas/i386/opcode.s: Likewise.

	* gas/i386/intel.d: Updated.
	* gas/i386/opcode-intel.d: Likewise.
	* gas/i386/opcode-suffix.d: Likewise.
	* gas/i386/opcode.d: Likewise.
@
text
@d584 4
@


1.5
log
@gas/testsuite/

2006-07-18  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/opcode.s: Add sldt, smsw and str.
	* gas/i386/x86-64-opcode.s: Likewise.

	* gas/i386/opcode.d: Updated.
	* gas/i386/x86-64-opcode.d: Likewise.

opcodes/

2006-07-18  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-dis.c (grps): Change "sldtQ", "strQ" and "smswQ" to
	"sldt", "str" and "smsw".
@
text
@d581 3
@


1.4
log
@gas/

2006-06-12  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (process_suffix): Don't add rex64 for
	"xchg %rax,%rax".

gas/testsuite/

2006-06-12  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/opcode.s: Add "xchg %ax,%ax".
	* gas/i386/opcode.d: Updated.

	* gas/i386/x86-64-opcode.s: Add xchg %ax,%ax, xchg %eax,%eax,
	xchg %rax,%rax, rex64 xchg %rax,%rax and xchg %rax,%r8.
	* gas/i386/x86-64-opcode.d: Updated.

include/opcode/

2006-06-12  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386.h (i386_optab): Update comment for 64bit NOP.

opcodes/

2006-06-12  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-dis.c (NOP_Fixup): Removed.
	(NOP_Fixup1): New.
	(NOP_Fixup2): Likewise.
	(dis386): Use NOP_Fixup1 and NOP_Fixup2 on 0x90.
@
text
@d571 10
@


1.3
log
@gas/testsuite/

2005-03-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/i386.exp: Run segment and inval-seg for i386. Run
	x86-64-segment and x86-64-inval-seg for x86-64.

	* gas/i386/intel.d: Expect movw for moving between memory and
	segment register.
	* gas/i386/naked.d: Likewise.
	* gas/i386/opcode.d: Likewise.
	* gas/i386/x86-64-opcode.d: Likewise.

	* gas/i386/opcode.s: Use movw for moving between memory and
	segment register.
	* gas/i386/x86-64-opcode.s: Likewise.

	* : Likewise.

	* gas/i386/inval-seg.l: New.
	* gas/i386/inval-seg.s: New.
	* gas/i386/segment.l: New.
	* gas/i386/segment.s: New.
	* gas/i386/x86-64-inval-seg.l: New.
	* gas/i386/x86-64-inval-seg.s: New.
	* gas/i386/x86-64-segment.l: New.
	* gas/i386/x86-64-segment.s: New.

include/opcode/

2005-03-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386.h (i386_optab): Don't allow the `l' suffix for moving
	moving between memory and segment register. Allow movq for
	moving between general-purpose register and segment register.

opcodes/

2005-03-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-dis.c (SEG_Fixup): New.
	(Sv): New.
	(dis386): Use "Sv" for 0x8c and 0x8e.
@
text
@d569 2
@


1.2
log
@	* gas/i386/opcode.s: Pad section.
	* gas/i386/intelok.s: Likewise.
	* gas/i386/opcode.d: Update.
	* gas/i386/intelok.d: Update.
@
text
@d133 1
a133 1
 movl   %ss,0x90909090(%eax)
d135 1
a135 1
 movl   0x90909090(%eax),%ss
@


1.1
log
@Initial revision
@
text
@d568 3
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

