head	1.6;
access;
symbols
	binutils-2_24-branch:1.6.0.2
	binutils-2_24-branchpoint:1.6
	binutils-2_21_1:1.5
	binutils-2_23_2:1.5
	binutils-2_23_1:1.5
	binutils-2_23:1.5
	binutils-2_23-branch:1.5.0.18
	binutils-2_23-branchpoint:1.5
	binutils-2_22_branch:1.5.0.16
	binutils-2_22:1.5
	binutils-2_22-branch:1.5.0.14
	binutils-2_22-branchpoint:1.5
	binutils-2_21:1.5
	binutils-2_21-branch:1.5.0.12
	binutils-2_21-branchpoint:1.5
	binutils-2_20_1:1.5
	binutils-2_20:1.5
	binutils-arc-20081103-branch:1.5.0.10
	binutils-arc-20081103-branchpoint:1.5
	binutils-2_20-branch:1.5.0.8
	binutils-2_20-branchpoint:1.5
	dje-cgen-play1-branch:1.5.0.6
	dje-cgen-play1-branchpoint:1.5
	arc-20081103-branch:1.5.0.4
	arc-20081103-branchpoint:1.5
	binutils-2_19_1:1.5
	binutils-2_19:1.5
	binutils-2_19-branch:1.5.0.2
	binutils-2_19-branchpoint:1.5
	binutils-2_18:1.4
	binutils-2_18-branch:1.4.0.2
	binutils-2_18-branchpoint:1.4
	binutils-csl-coldfire-4_1-32:1.2.2.1
	binutils-csl-sourcerygxx-4_1-32:1.2.2.1
	binutils-csl-innovasic-fido-3_4_4-33:1.2.2.1
	binutils-csl-coldfire-4_1-30:1.2.2.1
	binutils-csl-sourcerygxx-4_1-30:1.2.2.1
	binutils-csl-coldfire-4_1-28:1.2.2.1
	binutils-csl-sourcerygxx-4_1-29:1.2.2.1
	binutils-csl-sourcerygxx-4_1-28:1.2.2.1
	binutils-csl-arm-2006q3-27:1.2.2.1
	binutils-csl-sourcerygxx-4_1-27:1.2.2.1
	binutils-csl-arm-2006q3-26:1.2.2.1
	binutils-csl-sourcerygxx-4_1-26:1.2.2.1
	binutils-csl-sourcerygxx-4_1-25:1.2.2.1
	binutils-csl-sourcerygxx-4_1-24:1.2.2.1
	binutils-csl-sourcerygxx-4_1-23:1.2.2.1
	binutils-csl-sourcerygxx-4_1-21:1.2.2.1
	binutils-csl-arm-2006q3-21:1.2.2.1
	binutils-csl-sourcerygxx-4_1-22:1.2.2.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.2.2.1
	binutils-csl-sourcerygxx-4_1-20:1.2.2.1
	binutils-csl-arm-2006q3-19:1.2.2.1
	binutils-csl-sourcerygxx-4_1-19:1.2.2.1
	binutils-csl-sourcerygxx-4_1-18:1.2.2.1
	binutils-csl-renesas-4_1-9:1.2.2.1
	binutils-csl-renesas-4_1-8:1.2
	binutils-csl-renesas-4_1-7:1.2
	binutils-csl-renesas-4_1-6:1.2
	binutils-csl-sourcerygxx-4_1-17:1.2
	binutils-csl-sourcerygxx-4_1-14:1.2
	binutils-csl-sourcerygxx-4_1-15:1.2
	binutils-csl-sourcerygxx-4_1-13:1.2
	binutils-2_17:1.3
	binutils-csl-sourcerygxx-4_1-12:1.2
	binutils-csl-sourcerygxx-3_4_4-21:1.2
	binutils-csl-sourcerygxx-4_1-9:1.2
	binutils-csl-sourcerygxx-4_1-8:1.2
	binutils-csl-sourcerygxx-4_1-7:1.2
	binutils-csl-arm-2006q1-6:1.2
	binutils-csl-sourcerygxx-4_1-6:1.2
	binutils-csl-coldfire-4_1-11:1.2
	binutils-csl-sourcerygxx-3_4_4-19:1.2
	binutils-csl-coldfire-4_1-10:1.2
	binutils-csl-sourcerygxx-4_1-5:1.2
	binutils-csl-sourcerygxx-4_1-4:1.2
	binutils-csl-morpho-4_1-4:1.2
	binutils-csl-sourcerygxx-3_4_4-17:1.2
	binutils-2_17-branch:1.3.0.2
	binutils-2_17-branchpoint:1.3
	binutils-csl-2_17-branch:1.2.0.2
	binutils-csl-2_17-branchpoint:1.2
	binutils_latest_snapshot:1.6;
locks; strict;
comment	@# @;


1.6
date	2013.01.15.20.34.11;	author hjl;	state Exp;
branches;
next	1.5;

1.5
date	2007.09.26.13.40.57;	author jbeulich;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.04.00.44.36;	author hjl;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.23.08.23.09;	author aj;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.28.14.44.25;	author jbeulich;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2005.07.18.06.27.24;	author jbeulich;	state Exp;
branches;
next	;

1.2.2.1
date	2006.08.22.15.08.39;	author jsm28;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Increment length by 1 if the relocation token is removed

gas/

	PR gas/15019
	* config/tc-i386.c (lex_got): Increment length by 1 if the
	relocation token is removed.

gas/testsuite/

	PR gas/15019
	* gas/i386/reloc32.s: Add tests for "xtrn@@got -/+ 4".
	* gas/i386/reloc64.s: Likewise.
	* gas/i386/ilp32/reloc64.s: Likewise.

	* gas/i386/reloc32.d: Updated.
	* gas/i386/reloc64.d: Likewise.
	* gas/i386/ilp32/reloc64.d: Likewise.
@
text
@ .macro bad args:vararg
  .ifdef _bad_
	\args
  .endif
 .endm

 .macro ill args:vararg
  # This is used to mark entries that aren't handled consistently,
  # and thus shouldn't currently be checked for.
  #	\args
 .endm

 .text
_start:
	movabs	$xtrn, %rax
	add	$xtrn, %rax
	mov	$xtrn, %eax
	mov	$xtrn, %ax
	mov	$xtrn, %al
	mov	xtrn(%rbx), %eax
	mov	xtrn(%ebx), %eax

	movabs	$(xtrn - .), %rax
	add	$(xtrn - .), %rax
ill	mov	$(xtrn - .), %eax
	mov	$(xtrn - .), %ax
	mov	$(xtrn - .), %al
	mov	xtrn(%rip), %eax
	mov	xtrn(%eip), %eax
	call	xtrn
	jrcxz	xtrn

	movabs	$xtrn@@got, %rax
	add	$xtrn@@got, %rax
bad	mov	$xtrn@@got, %eax
bad	mov	$xtrn@@got, %ax
bad	mov	$xtrn@@got, %al
	mov	xtrn@@got(%rbx), %eax
bad	mov	xtrn@@got(%ebx), %eax
bad	call	xtrn@@got

	movabs	$xtrn@@gotoff, %rax
bad	add	$xtrn@@gotoff, %rax
bad	mov	$xtrn@@gotoff, %eax
bad	mov	$xtrn@@gotoff, %ax
bad	mov	$xtrn@@gotoff, %al
bad	mov	xtrn@@gotoff(%rbx), %eax
bad	mov	xtrn@@gotoff(%ebx), %eax
bad	call	xtrn@@gotoff

bad	movabs	$xtrn@@gotpcrel, %rax
	add	$xtrn@@gotpcrel, %rax
bad	mov	$xtrn@@gotpcrel, %eax
bad	mov	$xtrn@@gotpcrel, %ax
bad	mov	$xtrn@@gotpcrel, %al
	mov	xtrn@@gotpcrel(%rbx), %eax
bad	mov	xtrn@@gotpcrel(%ebx), %eax
	call	xtrn@@gotpcrel

ill	movabs	$_GLOBAL_OFFSET_TABLE_, %rax
	add	$_GLOBAL_OFFSET_TABLE_, %rax
ill	add	$_GLOBAL_OFFSET_TABLE_, %eax
ill	add	$_GLOBAL_OFFSET_TABLE_, %ax
ill	add	$_GLOBAL_OFFSET_TABLE_, %al
	lea	_GLOBAL_OFFSET_TABLE_(%rip), %rax
	lea	_GLOBAL_OFFSET_TABLE_(%eip), %rax
ill	movabs	$(_GLOBAL_OFFSET_TABLE_ - .), %rax
	add	$(_GLOBAL_OFFSET_TABLE_ - .), %rax
ill	add	$(_GLOBAL_OFFSET_TABLE_ - .), %eax
ill	add	$(_GLOBAL_OFFSET_TABLE_ - .), %ax
ill	add	$(_GLOBAL_OFFSET_TABLE_ - .), %al

bad	movabs	$xtrn@@plt, %rax
	add	$xtrn@@plt, %rax
bad	mov	$xtrn@@plt, %eax
bad	mov	$xtrn@@plt, %ax
bad	mov	$xtrn@@plt, %al
	mov	xtrn@@plt(%rbx), %eax
bad	mov	xtrn@@plt(%ebx), %eax
	call	xtrn@@plt
bad	jrcxz	xtrn@@plt

bad	movabs	$xtrn@@tlsgd, %rax
	add	$xtrn@@tlsgd, %rax
bad	mov	$xtrn@@tlsgd, %eax
bad	mov	$xtrn@@tlsgd, %ax
bad	mov	$xtrn@@tlsgd, %al
	mov	xtrn@@tlsgd(%rbx), %eax
bad	mov	xtrn@@tlsgd(%ebx), %eax
	call	xtrn@@tlsgd

bad	movabs	$xtrn@@gottpoff, %rax
	add	$xtrn@@gottpoff, %rax
bad	mov	$xtrn@@gottpoff, %eax
bad	mov	$xtrn@@gottpoff, %ax
bad	mov	$xtrn@@gottpoff, %al
	mov	xtrn@@gottpoff(%rbx), %eax
bad	mov	xtrn@@gottpoff(%ebx), %eax
	call	xtrn@@gottpoff

bad	movabs	$xtrn@@tlsld, %rax
	add	$xtrn@@tlsld, %rax
bad	mov	$xtrn@@tlsld, %eax
bad	mov	$xtrn@@tlsld, %ax
bad	mov	$xtrn@@tlsld, %al
	mov	xtrn@@tlsld(%rbx), %eax
bad	mov	xtrn@@tlsld(%ebx), %eax
	call	xtrn@@tlsld

	movabs	$xtrn@@dtpoff, %rax
	add	$xtrn@@dtpoff, %rax
bad	mov	$xtrn@@dtpoff, %eax
bad	mov	$xtrn@@dtpoff, %ax
bad	mov	$xtrn@@dtpoff, %al
	mov	xtrn@@dtpoff(%rbx), %eax
bad	mov	xtrn@@dtpoff(%ebx), %eax
bad	call	xtrn@@dtpoff

	movabs	$xtrn@@tpoff, %rax
	add	$xtrn@@tpoff, %rax
bad	mov	$xtrn@@tpoff, %eax
bad	mov	$xtrn@@tpoff, %ax
bad	mov	$xtrn@@tpoff, %al
	mov	xtrn@@tpoff(%rbx), %eax
bad	mov	xtrn@@tpoff(%ebx), %eax
bad	call	xtrn@@tpoff

 .data
	.quad	xtrn
	.quad	xtrn - .
	.quad	xtrn@@got
	.quad	xtrn@@gotoff
	.quad	xtrn@@gotpcrel
ill	.quad	_GLOBAL_OFFSET_TABLE_
ill	.quad	_GLOBAL_OFFSET_TABLE_ - .
bad	.quad	xtrn@@plt
bad	.quad	xtrn@@tlsgd
bad	.quad	xtrn@@gottpoff
bad	.quad	xtrn@@tlsld
	.quad	xtrn@@dtpoff
	.quad	xtrn@@tpoff
	
	.long	xtrn
	.long	xtrn - .
	.long	xtrn@@got
bad	.long	xtrn@@gotoff
	.long	xtrn@@gotpcrel
	.long	_GLOBAL_OFFSET_TABLE_
	.long	_GLOBAL_OFFSET_TABLE_ - .
	.long	xtrn@@plt
	.long	xtrn@@tlsgd
	.long	xtrn@@gottpoff
	.long	xtrn@@tlsld
	.long	xtrn@@dtpoff
	.long	xtrn@@tpoff
	
	.slong	xtrn
	.slong	xtrn - .
	.slong	xtrn@@got
bad	.slong	xtrn@@gotoff
	.slong	xtrn@@gotpcrel
	.slong	_GLOBAL_OFFSET_TABLE_
	.slong	_GLOBAL_OFFSET_TABLE_ - .
	.slong	xtrn@@plt
	.slong	xtrn@@tlsgd
	.slong	xtrn@@gottpoff
	.slong	xtrn@@tlsld
	.slong	xtrn@@dtpoff
	.slong	xtrn@@tpoff
	
	.word	xtrn
	.word	xtrn - .
bad	.word	xtrn@@got
bad	.word	xtrn@@gotoff
bad	.word	xtrn@@gotpcrel
ill	.word	_GLOBAL_OFFSET_TABLE_
ill	.word	_GLOBAL_OFFSET_TABLE_ - .
bad	.word	xtrn@@plt
bad	.word	xtrn@@tlsgd
bad	.word	xtrn@@gottpoff
bad	.word	xtrn@@tlsld
bad	.word	xtrn@@dtpoff
bad	.word	xtrn@@tpoff

	.byte	xtrn
	.byte	xtrn - .
bad	.byte	xtrn@@got
bad	.byte	xtrn@@gotoff
bad	.byte	xtrn@@gotpcrel
ill	.byte	_GLOBAL_OFFSET_TABLE_
ill	.byte	_GLOBAL_OFFSET_TABLE_ - .
bad	.byte	xtrn@@plt
bad	.byte	xtrn@@tlsgd
bad	.byte	xtrn@@gottpoff
bad	.byte	xtrn@@tlsld
bad	.byte	xtrn@@dtpoff
bad	.byte	xtrn@@tpoff

	.text
	mov	xtrn@@tpoff (%rbx), %eax

	.data
	.long	xtrn@@got - 4
	.long	xtrn@@got + 4
@


1.5
log
@gas/
2007-09-26  Jan Beulich  <jbeulich@@novell.com>

	* config/tc-i386.c (build_modrm_byte): Also check for RegEip
	when considering IP-relative addressing.

gas/testsuite/
2007-09-26  Jan Beulich  <jbeulich@@novell.com>

	* gas/i386/reloc64.s: Adjust for %eip-relative addressing no
	longer generating errors.
	* gas/i386/reloc64.d, gas/i386/reloc64.l: Update.
	* gas/i386/x86-64-addr32.s: Remove explicit addr32 prefix
	for %eip-realtive addressing case.

opcodes/
2007-09-26  Jan Beulich  <jbeulich@@novell.com>

	* i386-opc.h (RegEip): Define.
	(RegEiz): Adjust.
	* i386-reg.tbl: Add eip. Mark rip and eip with RegRex64.
	* i386-tbl.h: Re-generate.
@
text
@d201 4
@


1.4
log
@2007-05-03  H.J. Lu  <hongjiu.lu@@intel.com>

	PR gas/4460
	* gas/i386/gotpc.s: Add a new test.
	* gas/i386/reloc64.s: Likewise.

	* gas/i386/gotpc.d: Updated.
	* gas/i386/reloc64.d: Likewise.
@
text
@d29 1
a29 1
bad	mov	xtrn(%eip), %eax
d65 2
a66 2
	lea	_GLOBAL_OFFSET_TABLE_(%rip), %rax #???
bad	lea	_GLOBAL_OFFSET_TABLE_(%eip), %rax
@


1.3
log
@Patch by matz@@suse.de:
bfd/ChangeLog:
	* reloc.c: Add BFD_RELOC_X86_64_GOT64, BFD_RELOC_X86_64_GOTPCREL64,
	BFD_RELOC_X86_64_GOTPC64, BFD_RELOC_X86_64_GOTPLT64,
	BFD_RELOC_X86_64_PLTOFF64.
	* bfd-in2.h: Regenerated.
	* libbfd.h: Regenerated.
	* elf64-x86-64.c (x86_64_elf_howto_table): Correct comment.
	Add howtos for above relocs.
	(x86_64_reloc_map): Add mappings for new relocs.
	(elf64_x86_64_check_relocs): R_X86_64_GOT64, R_X86_64_GOTPCREL64,
	R_X86_64_GOTPLT64 need a got entry.  R_X86_64_GOTPLT64 also a PLT
	entry.  R_X86_64_GOTPC64 needs a .got section.  R_X86_64_PLTOFF64
	needs a PLT entry.
	(elf64_x86_64_gc_sweep_hook): Reflect changes from
	elf64_x86_64_check_relocs for the new relocs.
	(elf64_x86_64_relocate_section): Handle new relocs.

gas/ChangeLog:
	* config/tc-i386.c (type_names): Correct placement of 'static'.
	(reloc): Map some more relocs to their 64 bit counterpart when
	size is 8.
	(output_insn): Work around breakage if DEBUG386 is defined.
	(output_disp): A BFD_RELOC_64 with GOT_symbol as operand also
	needs to be mapped to BFD_RELOC_X86_64_GOTPC64 or
	BFD_RELOC_X86_64_GOTPC32.  Also x86-64 handles pcrel addressing
	different from i386.
	(output_imm): Ditto.
	(lex_got): Recognize @@PLTOFF and @@GOTPLT.  Make @@GOT accept also
	Imm64.
	(md_convert_frag): Jumps can now be larger than 2GB away, error
	out in that case.
	(tc_gen_reloc): New relocs are passed through.  BFD_RELOC_64
	and BFD_RELOC_64_PCREL are mapped to BFD_RELOC_X86_64_GOTPC64.

gas/testsuite/ChangeLog:
	* gas/i386/reloc64.s: Accept 64-bit forms.
	* gas/i386/reloc64.d: Adjust.
	* gas/i386/reloc64.l: Adjust.

include/ChangeLog:
	* elf/x86-64.h: Add the new relocations with their official
	numbers.
@
text
@d198 3
@


1.2
log
@gas/
2005-09-28  Jan Beulich  <jbeulich@@novell.com>

	* config/tc-i386.h (x86_cons_fix_new): Declare unconditionally.
	(TC_CONS_FIX_NEW): Define unconditionally.
	(x86_pe_cons_fix_new): Remove.
	* config/tc-i386.c (signed_cons): New.
	(md_pseudo_table): Add slong.
	(x86_cons_fix_new): Declare unconditionally.
	(x86_pe_cons_fix_new): Merge into x86_cons_fix_new.
	(tc_gen_reloc): Also consider BFD_RELOC_X86_64_32S for gotpc
	conversion.

gas/testsuite/
2005-09-28  Jan Beulich  <jbeulich@@novell.com>

	* gas/i386/reloc64.s: Also test .slong.
	* gas/i386/reloc64.l: Adjust.
	* gas/i386/reloc64.d: Adjust.
@
text
@d33 1
a33 1
bad	movabs	$xtrn@@got, %rax
d131 1
a131 1
bad	.quad	xtrn@@got
d133 1
a133 1
bad	.quad	xtrn@@gotpcrel
@


1.2.2.1
log
@Merge changes between binutils-csl-2_17-branchpoint and
binutils-2_17, except for the addition of generated files to CVS.
@
text
@d33 1
a33 1
	movabs	$xtrn@@got, %rax
d131 1
a131 1
	.quad	xtrn@@got
d133 1
a133 1
	.quad	xtrn@@gotpcrel
@


1.1
log
@gas/
2005-07-18  Jan Beulich  <jbeulich@@novell.com>

	* config/tc-i386.c (reloc): Convert to ISO C90. Change first
	parameter to unsigned. Parameter sign now is tristate - zero/
	positive mean unsigned/signed, negative means signedness doesn't
	matter. Check field size,
	signedness, and pcrel-ness are in agreement between relocated field
	and relocation type. Adjust diagnostics.
	(optimize_imm): And type mask of operand instead of overwriting it.
	(lex_got): Convert to ISO C90. Add third parameter. Add new field to
	local structure and initialize gotrel accordingly. Pass caller as
	mask of types that the operator can match.
	(x86_cons_fix_new): Let reloc know that signedness of relocation
	doesn't matter.
	(x86_pe_cons_fix_new): Likewise.
	(x86_cons): Pass additional argument to lex_got.
	(i386_immediate): New local variable 'types'. Pass its address as
	additional argument to lex_got. Mask out operand types not supported
	befoe returning.
	(i386_displacement): Likewise. Set bigdisp to all types supported in
	64-bit mode, combining the previously split initialization.

gas/testsuite/
2005-07-18  Jan Beulich  <jbeulich@@novell.com>

	* gas/i386/reloc32.[sdl]: New.
	* gas/i386/reloc64.[sdl]: New.
	* gas/i386/i386.exp: Run new tests.
@
text
@d157 14
@

