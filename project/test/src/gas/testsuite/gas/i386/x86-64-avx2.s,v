head	1.1;
access;
symbols
	binutils-2_24-branch:1.1.0.8
	binutils-2_24-branchpoint:1.1
	binutils-2_23_2:1.1
	binutils-2_23_1:1.1
	binutils-2_23:1.1
	binutils-2_23-branch:1.1.0.6
	binutils-2_23-branchpoint:1.1
	binutils-2_22_branch:1.1.0.4
	binutils-2_22:1.1
	binutils-2_22-branch:1.1.0.2
	binutils-2_22-branchpoint:1.1
	binutils_latest_snapshot:1.1;
locks; strict;
comment	@# @;


1.1
date	2011.06.10.21.27.39;	author hjl;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Support AVX Programming Reference (June, 2011).

gas/

2011-06-10  H.J. Lu  <hongjiu.lu@@intel.com>

	AVX Programming Reference (June, 2011)
	* config/tc-i386.c (i386_error): Add invalid_vsib_address and
	unsupported_vector_index_register.
	(cpu_arch): Add .avx2, .bmi2, .lzcnt and .invpcid.
	(check_VecOperands): New.
	(match_template): Call check_VecOperands.  Handle
	invalid_vsib_address and unsupported_vector_index_register.
	(build_modrm_byte): Support VecSIB.  Check register-only source
	operand when two source operands are swapped.
	(i386_index_check): Allow Xmm/Ymm index registers.

	* doc/c-i386.texi: Document avx2/.avx2, bmi2/.bmi2, lzcnt/.lzcnt
	and invpcid./invpcid.

gas/testsuite/

2011-06-10  H.J. Lu  <hongjiu.lu@@intel.com>

	AVX Programming Reference (June, 2011)
	* gas/i386/arch-10-1.l: Updated.
	* gas/i386/arch-10-2.l: Likewise.
	* gas/i386/arch-10-3.l: Likewise.
	* gas/i386/arch-10-4.l: Likewise.

	* gas/i386/arch-10.s: Add LZCNT to comments.
	* gas/i386/x86-64-arch-2.s: Likewise.

	* gas/i386/arch-10-lzcnt.d: New.
	* gas/i386/avx-gather-intel.d: Likewise.
	* gas/i386/avx-gather.d: Likewise.
	* gas/i386/avx-gather.s: Likewise.
	* gas/i386/avx2-intel.d: Likewise.
	* gas/i386/avx2.d: Likewise.
	* gas/i386/avx2.s: Likewise
	* gas/i386/avx256int-intel.d: Likewise.
	* gas/i386/avx256int.d: Likewise.
	* gas/i386/avx256int.s: Likewise.
	* gas/i386/bmi2-intel.d: Likewise.
	* gas/i386/bmi2.d: Likewise.
	* gas/i386/bmi2.s: Likewise.
	* gas/i386/inval-invpcid.l:Likewise.
	* gas/i386/inval-invpcid.s: Likewise.
	* gas/i386/invpcid-intel.d: Likewise.
	* gas/i386/invpcid.d: Likewise.
	* gas/i386/invpcid.s: Likewise.
	* gas/i386/x86-64-arch-2-lzcnt.d: Likewise.
	* gas/i386/x86-64-avx-gather-intel.d: Likewise.
	* gas/i386/x86-64-avx-gather.d: Likewise.
	* gas/i386/x86-64-avx-gather.s: Likewise.
	* gas/i386/x86-64-avx2-intel.d: Likewise.
	* gas/i386/x86-64-avx2.d: Likewise.
	* gas/i386/x86-64-avx2.s: Likewise.
	* gas/i386/x86-64-avx256int-intel.d: Likewise.
	* gas/i386/x86-64-avx256int.d: Likewise.
	* gas/i386/x86-64-avx256int.s: Likewise.
	* gas/i386/x86-64-bmi2-intel.d: Likewise.
	* gas/i386/x86-64-bmi2.d: Likewise.
	* gas/i386/x86-64-bmi2.s: Likewise.
	* gas/i386/x86-64-inval-invpcid.l: Likewise.
	* gas/i386/x86-64-inval-invpcid.s: Likewise.
	* gas/i386/x86-64-invpcid-intel.d: Likewise.
	* gas/i386/x86-64-invpcid.d: Likewise.
	* gas/i386/x86-64-invpcid.s: Likewise.

opcodes/

2011-06-10  H.J. Lu  <hongjiu.lu@@intel.com>

	AVX Programming Reference (June, 2011)
	* i386-dis.c (XMGatherQ): New.
	* i386-dis.c (EXxmm_mb): New.
	(EXxmm_mb): Likewise.
	(EXxmm_mw): Likewise.
	(EXxmm_md): Likewise.
	(EXxmm_mq): Likewise.
	(EXxmmdw): Likewise.
	(EXxmmqd): Likewise.
	(VexGatherQ): Likewise.
	(MVexVSIBDWpX): Likewise.
	(MVexVSIBQWpX): Likewise.
	(xmm_mb_mode): Likewise.
	(xmm_mw_mode): Likewise.
	(xmm_md_mode): Likewise.
	(xmm_mq_mode): Likewise.
	(xmmdw_mode): Likewise.
	(xmmqd_mode): Likewise.
	(ymmxmm_mode): Likewise.
	(vex_vsib_d_w_dq_mode): Likewise.
	(vex_vsib_q_w_dq_mode): Likewise.
	(MOD_VEX_0F385A_PREFIX_2): Likewise.
	(MOD_VEX_0F388C_PREFIX_2): Likewise.
	(MOD_VEX_0F388E_PREFIX_2): Likewise.
	(PREFIX_0F3882): Likewise.
	(PREFIX_VEX_0F3816): Likewise.
	(PREFIX_VEX_0F3836): Likewise.
	(PREFIX_VEX_0F3845): Likewise.
	(PREFIX_VEX_0F3846): Likewise.
	(PREFIX_VEX_0F3847): Likewise.
	(PREFIX_VEX_0F3858): Likewise.
	(PREFIX_VEX_0F3859): Likewise.
	(PREFIX_VEX_0F385A): Likewise.
	(PREFIX_VEX_0F3878): Likewise.
	(PREFIX_VEX_0F3879): Likewise.
	(PREFIX_VEX_0F388C): Likewise.
	(PREFIX_VEX_0F388E): Likewise.
	(PREFIX_VEX_0F3890..PREFIX_VEX_0F3893): Likewise.
	(PREFIX_VEX_0F38F5): Likewise.
	(PREFIX_VEX_0F38F6): Likewise.
	(PREFIX_VEX_0F3A00): Likewise.
	(PREFIX_VEX_0F3A01): Likewise.
	(PREFIX_VEX_0F3A02): Likewise.
	(PREFIX_VEX_0F3A38): Likewise.
	(PREFIX_VEX_0F3A39): Likewise.
	(PREFIX_VEX_0F3A46): Likewise.
	(PREFIX_VEX_0F3AF0): Likewise.
	(VEX_LEN_0F3816_P_2): Likewise.
	(VEX_LEN_0F3819_P_2): Likewise.
	(VEX_LEN_0F3836_P_2): Likewise.
	(VEX_LEN_0F385A_P_2_M_0): Likewise.
	(VEX_LEN_0F38F5_P_0): Likewise.
	(VEX_LEN_0F38F5_P_1): Likewise.
	(VEX_LEN_0F38F5_P_3): Likewise.
	(VEX_LEN_0F38F6_P_3): Likewise.
	(VEX_LEN_0F38F7_P_1): Likewise.
	(VEX_LEN_0F38F7_P_2): Likewise.
	(VEX_LEN_0F38F7_P_3): Likewise.
	(VEX_LEN_0F3A00_P_2): Likewise.
	(VEX_LEN_0F3A01_P_2): Likewise.
	(VEX_LEN_0F3A38_P_2): Likewise.
	(VEX_LEN_0F3A39_P_2): Likewise.
	(VEX_LEN_0F3A46_P_2): Likewise.
	(VEX_LEN_0F3AF0_P_3): Likewise.
	(VEX_W_0F3816_P_2): Likewise.
	(VEX_W_0F3818_P_2): Likewise.
	(VEX_W_0F3819_P_2): Likewise.
	(VEX_W_0F3836_P_2): Likewise.
	(VEX_W_0F3846_P_2): Likewise.
	(VEX_W_0F3858_P_2): Likewise.
	(VEX_W_0F3859_P_2): Likewise.
	(VEX_W_0F385A_P_2_M_0): Likewise.
	(VEX_W_0F3878_P_2): Likewise.
	(VEX_W_0F3879_P_2): Likewise.
	(VEX_W_0F3A00_P_2): Likewise.
	(VEX_W_0F3A01_P_2): Likewise.
	(VEX_W_0F3A02_P_2): Likewise.
	(VEX_W_0F3A38_P_2): Likewise.
	(VEX_W_0F3A39_P_2): Likewise.
	(VEX_W_0F3A46_P_2): Likewise.
	(MOD_VEX_0F3818_PREFIX_2): Removed.
	(MOD_VEX_0F3819_PREFIX_2): Likewise.
	(VEX_LEN_0F60_P_2..VEX_LEN_0F6D_P_2): Likewise.
	(VEX_LEN_0F70_P_1..VEX_LEN_0F76_P_2): Likewise.
	(VEX_LEN_0FD1_P_2..VEX_LEN_0FD5_P_2): Likewise.
	(VEX_LEN_0FD7_P_2_M_1..VEX_LEN_0F3819_P_2_M_0): Likewise.
	(VEX_LEN_0F381C_P_2..VEX_LEN_0F3840_P_2): Likewise.
	(VEX_LEN_0F3A0E_P_2): Likewise.
	(VEX_LEN_0F3A0F_P_2): Likewise.
	(VEX_LEN_0F3A42_P_2): Likewise.
	(VEX_LEN_0F3A4C_P_2): Likewise.
	(VEX_W_0F3818_P_2_M_0): Likewise.
	(VEX_W_0F3819_P_2_M_0): Likewise.
	(prefix_table): Updated.
	(three_byte_table): Likewise.
	(vex_table): Likewise.
	(vex_len_table): Likewise.
	(vex_w_table): Likewise.
	(mod_table): Likewise.
	(putop): Handle "LW".
	(intel_operand_size): Handle xmm_mb_mode, xmm_mw_mode,
	xmm_md_mode, xmm_mq_mode, xmmdw_mode, xmmqd_mode, ymmxmm_mode,
	vex_vsib_d_w_dq_mode, vex_vsib_q_w_dq_mode.
	(OP_EX): Likewise.
	(OP_E_memory): Handle vex_vsib_d_w_dq_mode and
	vex_vsib_q_w_dq_mode.
	(OP_XMM): Handle vex_vsib_q_w_dq_mode.
	(OP_VEX): Likewise.

	* i386-gen.c (cpu_flag_init): Add CpuAVX2 to CPU_ANY_SSE_FLAGS
	and CPU_ANY_AVX_FLAGS.  Add CPU_BMI2_FLAGS, CPU_LZCNT_FLAGS,
	CPU_INVPCID_FLAGS and CPU_AVX2_FLAGS.
	(cpu_flags): Add CpuAVX2, CpuBMI2, CpuLZCNT and CpuINVPCID.
	(opcode_modifiers): Add VecSIB.

	* i386-opc.h (CpuAVX2): New.
	(CpuBMI2): Likewise.
	(CpuLZCNT): Likewise.
	(CpuINVPCID): Likewise.
	(VecSIB128): Likewise.
	(VecSIB256): Likewise.
	(VecSIB): Likewise.
	(i386_cpu_flags): Add cpuavx2, cpubmi2, cpulzcnt and cpuinvpcid.
	(i386_opcode_modifier): Add vecsib.

	* i386-opc.tbl: Add invpcid, AVX2 and BMI2 instructions.
	* i386-init.h: Regenerated.
	* i386-tbl.h: Likewise.
@
text
@# Check x86-64 AVX2 instructions

	.allow_index_reg
	.text
_start:

# Tests for op mem256, mask,  ymm
# Tests for op ymm, mask, mem256
	vpmaskmovd (%rcx),%ymm4,%ymm6
	vpmaskmovd %ymm4,%ymm6,(%rcx)
	vpmaskmovq (%rcx),%ymm4,%ymm6
	vpmaskmovq %ymm4,%ymm6,(%rcx)

# Tests for op imm8, ymm/mem256, ymm
	vpermpd $7,%ymm6,%ymm2
	vpermpd $7,(%rcx),%ymm6
	vpermq $7,%ymm6,%ymm2
	vpermq $7,(%rcx),%ymm6

# Tests for op ymm/mem256, ymm, ymm
	vpermd %ymm4,%ymm6,%ymm2
	vpermd (%rcx),%ymm6,%ymm2
	vpermps %ymm4,%ymm6,%ymm2
	vpermps (%rcx),%ymm6,%ymm2
	vpsllvd %ymm4,%ymm6,%ymm2
	vpsllvd (%rcx),%ymm6,%ymm2
	vpsllvq %ymm4,%ymm6,%ymm2
	vpsllvq (%rcx),%ymm6,%ymm2
	vpsravd %ymm4,%ymm6,%ymm2
	vpsravd (%rcx),%ymm6,%ymm2
	vpsrlvd %ymm4,%ymm6,%ymm2
	vpsrlvd (%rcx),%ymm6,%ymm2
	vpsrlvq %ymm4,%ymm6,%ymm2
	vpsrlvq (%rcx),%ymm6,%ymm2

# Tests for op mem256, ymm
	vmovntdqa (%rcx),%ymm4

# Tests for op ymm, xmm
	vbroadcastsd %xmm4,%ymm6
	vbroadcastss %xmm4,%ymm6

# Tests for op imm8, ymm/mem256, ymm, ymm
	vpblendd $7,%ymm4,%ymm6,%ymm2
	vpblendd $7,(%rcx),%ymm6,%ymm2
	vperm2i128 $7,%ymm4,%ymm6,%ymm2
	vperm2i128 $7,(%rcx),%ymm6,%ymm2

# Tests for op imm8, xmm/mem128, ymm, ymm
	vinserti128 $7,%xmm4,%ymm4,%ymm6
	vinserti128 $7,(%rcx),%ymm4,%ymm6

# Tests for op mem128, ymm
	vbroadcasti128 (%rcx),%ymm4

# Tests for op xmm/mem128, xmm, xmm
	vpsllvd %xmm4,%xmm6,%xmm2
	vpsllvd (%rcx),%xmm6,%xmm7
	vpsllvq %xmm4,%xmm6,%xmm2
	vpsllvq (%rcx),%xmm6,%xmm7
	vpsravd %xmm4,%xmm6,%xmm2
	vpsravd (%rcx),%xmm6,%xmm7
	vpsrlvd %xmm4,%xmm6,%xmm2
	vpsrlvd (%rcx),%xmm6,%xmm7
	vpsrlvq %xmm4,%xmm6,%xmm2
	vpsrlvq (%rcx),%xmm6,%xmm7

# Tests for op mem128, xmm, xmm
	vpmaskmovd (%rcx),%xmm4,%xmm6
	vpmaskmovq (%rcx),%xmm4,%xmm6

# Tests for op imm8, ymm, xmm128/mem
	vextracti128 $7,%ymm4,%xmm6
	vextracti128 $7,%ymm4,(%rcx)

# Tests for op xmm, xmm, mem128
	vpmaskmovd %xmm4,%xmm6,(%rcx)
	vpmaskmovq %xmm4,%xmm6,(%rcx)

# Tests for op imm8, xmm/mem128, xmm, xmm
	vpblendd $7,%xmm4,%xmm6,%xmm2
	vpblendd $7,(%rcx),%xmm6,%xmm2

# Tests for op xmm/mem64, xmm
	vpbroadcastq %xmm4,%xmm6
	vpbroadcastq (%rcx),%xmm4

# Tests for op xmm/mem64, ymm
	vpbroadcastq %xmm4,%ymm6
	vpbroadcastq (%rcx),%ymm4

# Tests for op xmm/mem32, ymm
	vpbroadcastd %xmm4,%ymm4
	vpbroadcastd (%rcx),%ymm4

# Tests for op xmm/mem32, xmm
	vpbroadcastd %xmm4,%xmm6
	vpbroadcastd (%rcx),%xmm4

# Tests for op xmm/m16, xmm
	vpbroadcastw %xmm4,%xmm6
	vpbroadcastw (%rcx),%xmm4

# Tests for op xmm/m16, ymm
	vpbroadcastw %xmm4,%ymm6
	vpbroadcastw (%rcx),%ymm4

# Tests for op xmm/m8, xmm
	vpbroadcastb %xmm4,%xmm6
	vpbroadcastb (%rcx),%xmm4

# Tests for op xmm/m8, ymm
	vpbroadcastb %xmm4,%ymm6
	vpbroadcastb (%rcx),%ymm4

# Tests for op xmm, xmm
	vbroadcastss %xmm4,%xmm6

	.intel_syntax noprefix

# Tests for op mem256, mask,  ymm
# Tests for op ymm, mask, mem256
	vpmaskmovd ymm6,ymm4,YMMWORD PTR [rcx]
	vpmaskmovd YMMWORD PTR [rcx],ymm6,ymm4
	vpmaskmovd ymm6,ymm4,[rcx]
	vpmaskmovd [rcx],ymm6,ymm4
	vpmaskmovq ymm6,ymm4,YMMWORD PTR [rcx]
	vpmaskmovq YMMWORD PTR [rcx],ymm6,ymm4
	vpmaskmovq ymm6,ymm4,[rcx]
	vpmaskmovq [rcx],ymm6,ymm4

# Tests for op imm8, ymm/mem256, ymm
	vpermpd ymm2,ymm6,7
	vpermpd ymm6,YMMWORD PTR [rcx],7
	vpermpd ymm6,[rcx],7
	vpermq ymm2,ymm6,7
	vpermq ymm6,YMMWORD PTR [rcx],7
	vpermq ymm6,[rcx],7

# Tests for op ymm/mem256, ymm, ymm
	vpermd ymm2,ymm6,ymm4
	vpermd ymm2,ymm6,YMMWORD PTR [rcx]
	vpermd ymm2,ymm6,[rcx]
	vpermps ymm2,ymm6,ymm4
	vpermps ymm2,ymm6,YMMWORD PTR [rcx]
	vpermps ymm2,ymm6,[rcx]
	vpsllvd ymm2,ymm6,ymm4
	vpsllvd ymm2,ymm6,YMMWORD PTR [rcx]
	vpsllvd ymm2,ymm6,[rcx]
	vpsllvq ymm2,ymm6,ymm4
	vpsllvq ymm2,ymm6,YMMWORD PTR [rcx]
	vpsllvq ymm2,ymm6,[rcx]
	vpsravd ymm2,ymm6,ymm4
	vpsravd ymm2,ymm6,YMMWORD PTR [rcx]
	vpsravd ymm2,ymm6,[rcx]
	vpsrlvd ymm2,ymm6,ymm4
	vpsrlvd ymm2,ymm6,YMMWORD PTR [rcx]
	vpsrlvd ymm2,ymm6,[rcx]
	vpsrlvq ymm2,ymm6,ymm4
	vpsrlvq ymm2,ymm6,YMMWORD PTR [rcx]
	vpsrlvq ymm2,ymm6,[rcx]

# Tests for op mem256, ymm
	vmovntdqa ymm4,YMMWORD PTR [rcx]
	vmovntdqa ymm4,[rcx]

# Tests for op ymm, xmm
	vbroadcastsd ymm6,xmm4
	vbroadcastss ymm6,xmm4

# Tests for op imm8, ymm/mem256, ymm, ymm
	vpblendd ymm2,ymm6,ymm4,7
	vpblendd ymm2,ymm6,YMMWORD PTR [rcx],7
	vpblendd ymm2,ymm6,[rcx],7
	vperm2i128 ymm2,ymm6,ymm4,7
	vperm2i128 ymm2,ymm6,YMMWORD PTR [rcx],7
	vperm2i128 ymm2,ymm6,[rcx],7

# Tests for op imm8, xmm/mem128, ymm, ymm
	vinserti128 ymm6,ymm4,xmm4,7
	vinserti128 ymm6,ymm4,XMMWORD PTR [rcx],7
	vinserti128 ymm6,ymm4,[rcx],7

# Tests for op mem128, ymm
	vbroadcasti128 ymm4,XMMWORD PTR [rcx]
	vbroadcasti128 ymm4,[rcx]

# Tests for op xmm/mem128, xmm, xmm
	vpsllvd xmm2,xmm6,xmm4
	vpsllvd xmm7,xmm6,XMMWORD PTR [rcx]
	vpsllvd xmm7,xmm6,[rcx]
	vpsllvq xmm2,xmm6,xmm4
	vpsllvq xmm7,xmm6,XMMWORD PTR [rcx]
	vpsllvq xmm7,xmm6,[rcx]
	vpsravd xmm2,xmm6,xmm4
	vpsravd xmm7,xmm6,XMMWORD PTR [rcx]
	vpsravd xmm7,xmm6,[rcx]
	vpsrlvd xmm2,xmm6,xmm4
	vpsrlvd xmm7,xmm6,XMMWORD PTR [rcx]
	vpsrlvd xmm7,xmm6,[rcx]
	vpsrlvq xmm2,xmm6,xmm4
	vpsrlvq xmm7,xmm6,XMMWORD PTR [rcx]
	vpsrlvq xmm7,xmm6,[rcx]

# Tests for op mem128, xmm, xmm
	vpmaskmovd xmm6,xmm4,XMMWORD PTR [rcx]
	vpmaskmovd xmm6,xmm4,[rcx]
	vpmaskmovq xmm6,xmm4,XMMWORD PTR [rcx]
	vpmaskmovq xmm6,xmm4,[rcx]

# Tests for op imm8, ymm, xmm128/mem
	vextracti128 xmm6,ymm4,7
	vextracti128 XMMWORD PTR [rcx],ymm4,7
	vextracti128 [rcx],ymm4,7

# Tests for op xmm, xmm, mem128
	vpmaskmovd XMMWORD PTR [rcx],xmm6,xmm4
	vpmaskmovd [rcx],xmm6,xmm4
	vpmaskmovq XMMWORD PTR [rcx],xmm6,xmm4
	vpmaskmovq [rcx],xmm6,xmm4

# Tests for op imm8, xmm/mem128, xmm, xmm
	vpblendd xmm2,xmm6,xmm4,7
	vpblendd xmm2,xmm6,XMMWORD PTR [rcx],7
	vpblendd xmm2,xmm6,[rcx],7

# Tests for op xmm/mem64, xmm
	vpbroadcastq xmm6,xmm4
	vpbroadcastq xmm4,QWORD PTR [rcx]
	vpbroadcastq xmm4,[rcx]

# Tests for op xmm/mem64, ymm
	vpbroadcastq ymm6,xmm4
	vpbroadcastq ymm4,QWORD PTR [rcx]
	vpbroadcastq ymm4,[rcx]

# Tests for op xmm/mem32, ymm
	vpbroadcastd ymm4,xmm4
	vpbroadcastd ymm4,DWORD PTR [rcx]
	vpbroadcastd ymm4,[rcx]

# Tests for op xmm/mem32, xmm
	vpbroadcastd xmm6,xmm4
	vpbroadcastd xmm4,DWORD PTR [rcx]
	vpbroadcastd xmm4,[rcx]

# Tests for op xmm/m16, xmm
	vpbroadcastw xmm6,xmm4
	vpbroadcastw xmm4,WORD PTR [rcx]
	vpbroadcastw xmm4,[rcx]

# Tests for op xmm/m16, ymm
	vpbroadcastw ymm6,xmm4
	vpbroadcastw ymm4,WORD PTR [rcx]
	vpbroadcastw ymm4,[rcx]

# Tests for op xmm/m8, xmm
	vpbroadcastb xmm6,xmm4
	vpbroadcastb xmm4,BYTE PTR [rcx]
	vpbroadcastb xmm4,[rcx]

# Tests for op xmm/m8, ymm
	vpbroadcastb ymm6,xmm4
	vpbroadcastb ymm4,BYTE PTR [rcx]
	vpbroadcastb ymm4,[rcx]

# Tests for op xmm, xmm
	vbroadcastss xmm6,xmm4
@
