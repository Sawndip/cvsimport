head	1.1;
access;
symbols
	binutils-2_24-branch:1.1.0.2
	binutils-2_24-branchpoint:1.1
	binutils_latest_snapshot:1.1;
locks; strict;
comment	@# @;


1.1
date	2013.06.20.19.25.20;	author rsandifo;	state Exp;
branches;
next	;


desc
@@


1.1
log
@gas/
	* config/tc-mips.c (ISA_SUPPORTS_SMARTMIPS, ISA_SUPPORTS_DSP_ASE)
	(ISA_SUPPORTS_DSP64_ASE, ISA_SUPPORTS_DSPR2_ASE, ISA_SUPPORTS_EVA_ASE)
	(ISA_SUPPORTS_MT_ASE, ISA_SUPPORTS_MCU_ASE, ISA_SUPPORTS_VIRT_ASE)
	(ISA_SUPPORTS_VIRT64_ASE): Delete.
	(mips_ase): New structure.
	(mips_ases): New table.
	(FP64_ASES): New macro.
	(mips_ase_groups): New array.
	(mips_isa_rev, mips_ase_mask, mips_check_isa_supports_ase)
	(mips_check_isa_supports_ases, mips_set_ase, mips_lookup_ase): New
	functions.
	(is_opcode_valid): Use mips_ases to get the 64-bit ASE flags.
	(md_parse_option): Use mips_ases and mips_set_ase instead of
	separate case statements for each ASE option.
	(mips_after_parse_args): Use FP64_ASES.  Use
	mips_check_isa_supports_ases to check the ASEs against
	other options.
	(s_mipsset): Use mips_ases and mips_set_ase instead of
	separate if statements for each ASE option.  Use
	mips_check_isa_supports_ases, even when a non-ASE option
	is specified.

gas/testsuite/
	* gas/mips/ase-errors-1.s, gas/mips/ase-errors-1.l,
	gas/mips/ase-errors-2.s, gas/mips/ase-errors-2.l,
	gas/mips/ase-errors-3.s, gas/mips/ase-errors-3.l,
	gas/mips/ase-errors-4.s, gas/mips/ase-errors-4.l: New tests.
	* gas/mips/mips.exp: Run them.
@
text
@	.set micromips
	.set mips64r2
	.set dsp		# OK
	lbux $4,$5($6)		# OK
	ldx $4,$5($6)		# ERROR: micromips doesn't have 64-bit DSPr1
	absq_s.qb $3,$4		# ERROR: dspr2 not enabled
	.set mips3		# OK (we assume r2 anyway)
	.set nodsp
	lbux $4,$5($6)		# ERROR: dsp not enabled
	absq_s.qb $3,$4		# ERROR: dspr2 not enabled

	.set mips64r2
	.set dspr2		# OK
	lbux $4,$5($6)		# OK
	absq_s.qb $3,$4		# OK
	.set mips3		# OK (we assume r2 anyway)
	.set nodspr2
	lbux $4,$5($6)		# ERROR: dsp not enabled
	absq_s.qb $3,$4		# ERROR: dspr2 not enabled

	.set mips64r2
	.set mcu		# OK
	aclr 4,100($4)		# OK
	.set mips3		# OK (we assume r2 anyway)
	.set nomcu
	aclr 4,100($4)		# ERROR: mcu not enabled

	.set mips64r2
	.set mdmx		# ERROR: not supported at all
	add.ob $f4,$f6,$f8	# ERROR: not supported at all
	.set nomdmx

	.set mips64r2
	.set mips3d		# ERROR: not supported at all
	addr.ps $f4,$f6,$f8	# ERROR: not supported at all
	.set nomips3d

	.set mips64r2
	.set mt			# ERROR: not supported at all
	dmt			# ERROR: not supported at all
	.set nomt

	.set mips64
	.set smartmips		# ERROR: not supported at all
	maddp $4,$5		# ERROR: not supported at all
	.set nosmartmips

	.set mips64r2
	.set virt		# OK
	hypcall			# OK
	dmfgc0 $3, $29		# OK
	.set mips3		# OK (we assume r2 anyway)
	.set novirt
	hypcall			# ERROR: virt not enabled
	dmfgc0 $3, $29		# ERROR: virt not enabled

	.set mips64r2
	.set eva		# OK
	lbue $4,16($5)		# OK
	.set mips3		# OK (we assume r2 anyway)
	lbue $4,16($5)		# OK
	.set noeva
	lbue $4,16($5)		# ERROR: eva not enabled

	# There should be no errors after this.
	.set fp=32
	.set mips4
	.set dsp
	.set dspr2
	.set mcu
	.set mdmx
	.set mips3d
	.set mt
	.set smartmips
	.set eva
@
