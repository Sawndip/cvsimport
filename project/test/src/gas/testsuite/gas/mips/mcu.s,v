head	1.1;
access;
symbols
	binutils-2_24-branch:1.1.0.8
	binutils-2_24-branchpoint:1.1
	binutils-2_23_2:1.1
	binutils-2_23_1:1.1
	binutils-2_23:1.1
	binutils-2_23-branch:1.1.0.6
	binutils-2_23-branchpoint:1.1
	binutils-2_22_branch:1.1.0.4
	binutils-2_22:1.1
	binutils-2_22-branch:1.1.0.2
	binutils-2_22-branchpoint:1.1
	binutils_latest_snapshot:1.1;
locks; strict;
comment	@# @;


1.1
date	2011.08.09.15.20.02;	author macro;	state Exp;
branches;
next	;


desc
@@


1.1
log
@	gas/
	* config/tc-mips.c (mips_set_options): Add ase_mcu.
	(mips_opts): Initialise ase_mcu to -1.
	(ISA_SUPPORTS_MCU_ASE): New macro.
	(MIPS_CPU_ASE_MCU): Likewise.
	(is_opcode_valid): Handle MCU.
	(macro_build, macro): Likewise.
	(validate_mips_insn, validate_micromips_insn): Likewise.
	(mips_ip): Likewise.
	(options): Add OPTION_MCU and OPTION_NO_MCU.
	(md_longopts): Add mmcu and mno-mcu.
	(md_parse_option): Handle OPTION_MCU and OPTION_NO_MCU.
	(mips_after_parse_args): Handle MCU.
	(s_mipsset): Likewise.
	(md_show_usage): Handle MCU options.

	* doc/as.texinfo: Document -mmcu and -mno-mcu options.
	* doc/c-mips.texi: Likewise, and document ".set mcu" and
	".set nomcu" directives.

	gas/testsuite/
	* gas/mips/micromips@@mcu.d: New test.
	* gas/mips/mcu.d: Likewise.
	* gas/mips/mcu.s: New test source.
	* gas/mips/mips.exp: Run the new tests.

	include/opcode/
	* mips.h (OP_MASK_3BITPOS, OP_SH_3BITPOS): New macros.
	(OP_MASK_OFFSET12, OP_SH_OFFSET12): Redefine.
	(INSN_ASE_MASK): Add the MCU bit.
	(INSN_MCU): New macro.
	(M_ACLR_AB, M_ACLR_OB, M_ASET_AB, M_ASET_OB): New enum values.
	(MICROMIPSOP_MASK_3BITPOS, MICROMIPSOP_SH_3BITPOS): New macros.

	opcodes/
	* mips-dis.c (mips_arch_choices): Enable MCU for "mips32r2"
	and "mips64r2".
	(print_insn_args, print_insn_micromips): Handle MCU.
	* micromips-opc.c (MC): New macro.
	(micromips_opcodes): Add "aclr", "aset" and "iret".
	* mips-opc.c (MC): New macro.
	(mips_builtin_opcodes): Add "aclr", "aset" and "iret".
@
text
@	.text
	.set	mcu
	.ent	foo
	.globl	foo
foo:
	iret

	aclr	0, 0
	aclr	0, ($0)
	aclr	0, 0($0)
	aclr	1, 0($0)
	aclr	2, 0($0)
	aclr	3, 0($0)
	aclr	4, 0($0)
	aclr	5, 0($0)
	aclr	6, 0($0)
	aclr	7, 0($0)
	aclr	7, 0($2)
	aclr	7, 0($31)
	aclr	7, 2047($31)
	aclr	7, -2048($31)
	aclr	7, 2048($31)
	aclr	7, -2049($31)
	aclr	7, 32767($31)
	aclr	7, -32768($31)
	aclr	7, 65535($4)
	aclr	7, 65536($4)
	aclr	7, 0xffff0000($4)
	aclr	7, 0xffff8000($4)
	aclr	7, 0xffff0001($4)
	aclr	7, 0xffff8001($4)
	aclr	7, 0xf0000000($4)
	aclr	7, 0xffffffff($4)
	aclr	7, 0x12345678($4)

	aclr	1, %lo(foo)($3)
	aset	1, %lo(foo)($3)

	aset	0, 0
	aset	0, ($0)
	aset	0, 0($0)
	aset	1, 0($0)
	aset	2, 0($0)
	aset	3, 0($0)
	aset	4, 0($0)
	aset	5, 0($0)
	aset	6, 0($0)
	aset	7, 0($0)
	aset	7, 0($2)
	aset	7, 0($31)
	aset	7, 2047($31)
	aset	7, -2048($31)
	aset	7, 2048($31)
	aset	7, -2049($31)
	aset	7, 32767($31)
	aset	7, -32768($31)
	aset	7, 65535($4)
	aset	7, 65536($4)
	aset	7, 0xffff0000($4)
	aset	7, 0xffff8000($4)
	aset	7, 0xffff0001($4)
	aset	7, 0xffff8001($4)
	aset	7, 0xf0000000($4)
	aset	7, 0xffffffff($4)
	aset	7, 0x12345678($4)
	.end	foo

# Force at least 8 (non-delay-slot) zero bytes, to make 'objdump' print ...
	.align	2
	.space	8
@
