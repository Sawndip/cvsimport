head	1.2;
access;
symbols
	binutils-2_24-branch:1.2.0.8
	binutils-2_24-branchpoint:1.2
	binutils-2_23_2:1.2
	binutils-2_23_1:1.2
	binutils-2_23:1.2
	binutils-2_23-branch:1.2.0.6
	binutils-2_23-branchpoint:1.2
	binutils-2_22_branch:1.2.0.4
	binutils-2_22:1.2
	binutils-2_22-branch:1.2.0.2
	binutils-2_22-branchpoint:1.2
	binutils_latest_snapshot:1.2;
locks; strict;
comment	@# @;


1.2
date	2011.07.24.14.20.11;	author rsandifo;	state Exp;
branches;
next	1.1;

1.1
date	2011.02.28.15.52.25;	author macro;	state Exp;
branches;
next	;


desc
@@


1.2
log
@bfd/
2011-02-25  Chao-ying Fu  <fu@@mips.com>
            Ilie Garbacea  <ilie@@mips.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>
            Catherine Moore  <clm@@codesourcery.com>
	    Richard Sandiford  <rdsandiford@@googlemail.com>

	* archures.c (bfd_mach_mips_micromips): New macro.
	* cpu-mips.c (I_micromips): New enum value.
	(arch_info_struct): Add bfd_mach_mips_micromips.
	* elfxx-mips.h (_bfd_mips_elf_is_target_special_symbol): New
	prototype.
	(_bfd_mips_elf_relax_section): Likewise.
	(_bfd_mips16_elf_reloc_unshuffle): Rename to...
	(_bfd_mips_elf_reloc_unshuffle): ... this.  Handle microMIPS
	ASE.
	(_bfd_mips16_elf_reloc_shuffle): Rename to...
	(_bfd_mips_elf_reloc_shuffle): ... this.  Handle microMIPS ASE.
	(gprel16_reloc_p): Handle microMIPS ASE.
	(literal_reloc_p): New function.
	* elf32-mips.c (elf_micromips_howto_table_rel): New variable.
	(_bfd_mips_elf32_gprel16_reloc): Handle microMIPS ASE.
	(mips16_gprel_reloc): Update for _bfd_mips_elf_reloc_unshuffle
	and _bfd_mips_elf_reloc_shuffle changes.
	(mips_elf_gprel32_reloc): Update comment.
	(micromips_reloc_map): New variable.
	(bfd_elf32_bfd_reloc_type_lookup): Handle microMIPS ASE.
	(mips_elf32_rtype_to_howto): Likewise.
	(mips_info_to_howto_rel): Likewise.
	(bfd_elf32_bfd_is_target_special_symbol): Define.
	(bfd_elf32_bfd_relax_section): Likewise.
	* elf64-mips.c (micromips_elf64_howto_table_rel): New variable.
	(micromips_elf64_howto_table_rela): Likewise.
	(mips16_gprel_reloc): Update for _bfd_mips_elf_reloc_unshuffle
	and _bfd_mips_elf_reloc_shuffle changes.
	(micromips_reloc_map): Likewise.
	(bfd_elf64_bfd_reloc_type_lookup): Handle microMIPS ASE.
	(bfd_elf64_bfd_reloc_name_lookup): Likewise.
	(mips_elf64_rtype_to_howto): Likewise.
	(bfd_elf64_bfd_is_target_special_symbol): Define.
	* elfn32-mips.c (elf_micromips_howto_table_rel): New variable.
	(elf_micromips_howto_table_rela): Likewise.
	(mips16_gprel_reloc): Update for _bfd_mips_elf_reloc_unshuffle
	and _bfd_mips_elf_reloc_shuffle changes.
	(micromips_reloc_map): Likewise.
	(bfd_elf32_bfd_reloc_type_lookup): Handle microMIPS ASE.
	(bfd_elf32_bfd_reloc_name_lookup): Likewise.
	(mips_elf_n32_rtype_to_howto): Likewise.
	(bfd_elf32_bfd_is_target_special_symbol): Define.
	* elfxx-mips.c (LA25_LUI_MICROMIPS_1): New macro.
	(LA25_LUI_MICROMIPS_2): Likewise.
	(LA25_J_MICROMIPS_1, LA25_J_MICROMIPS_2): Likewise.
	(LA25_ADDIU_MICROMIPS_1, LA25_ADDIU_MICROMIPS_2): Likewise.
	(TLS_RELOC_P): Handle microMIPS ASE.
	(mips_elf_create_stub_symbol): Adjust value of stub symbol if
	target is a microMIPS function.
	(micromips_reloc_p): New function.
	(micromips_reloc_shuffle_p): Likewise.
	(got16_reloc_p, call16_reloc_p): Handle microMIPS ASE.
	(got_disp_reloc_p, got_page_reloc_p): New functions.
	(got_ofst_reloc_p): Likewise.
	(got_hi16_reloc_p, got_lo16_reloc_p): Likewise.
	(call_hi16_reloc_p, call_lo16_reloc_p): Likewise.
	(hi16_reloc_p, lo16_reloc_p, jal_reloc_p): Handle microMIPS ASE.
	(micromips_branch_reloc_p): New function.
	(tls_gd_reloc_p, tls_ldm_reloc_p): Likewise.
	(tls_gottprel_reloc_p): Likewise.
	(_bfd_mips16_elf_reloc_unshuffle): Rename to...
	(_bfd_mips_elf_reloc_unshuffle): ... this.  Handle microMIPS
	ASE.
	(_bfd_mips16_elf_reloc_shuffle): Rename to...
	(_bfd_mips_elf_reloc_shuffle): ... this.  Handle microMIPS ASE.
	(_bfd_mips_elf_lo16_reloc): Handle microMIPS ASE.
	(mips_tls_got_index, mips_elf_got_page): Likewise.
	(mips_elf_create_local_got_entry): Likewise.
	(mips_elf_relocation_needs_la25_stub): Likewise.
	(mips_elf_calculate_relocation): Likewise.
	(mips_elf_perform_relocation): Likewise.
	(_bfd_mips_elf_symbol_processing): Likewise.
	(_bfd_mips_elf_add_symbol_hook): Likewise.
	(_bfd_mips_elf_link_output_symbol_hook): Likewise.
	(mips_elf_add_lo16_rel_addend): Likewise.
	(_bfd_mips_elf_check_relocs): Likewise.
	(mips_elf_adjust_addend): Likewise.
	(_bfd_mips_elf_relocate_section): Likewise.
	(mips_elf_create_la25_stub): Likewise.
	(_bfd_mips_vxworks_finish_dynamic_symbol): Likewise.
	(_bfd_mips_elf_gc_sweep_hook): Likewise.
	(_bfd_mips_elf_is_target_special_symbol): New function.
	(mips_elf_relax_delete_bytes): Likewise.
	(opcode_descriptor): New structure.
	(RA): New macro.
	(OP32_SREG, OP32_TREG, OP16_VALID_REG): Likewise.
	(b_insns_32, bc_insn_32, bz_insn_32, bzal_insn_32): New variables.
	(beq_insn_32): Likewise.
	(b_insn_16, bz_insn_16): New variables.
	(BZC32_REG_FIELD): New macro.
	(bz_rs_insns_32, bz_rt_insns_32): New variables.
	(bzc_insns_32, bz_insns_16):Likewise.
	(BZ16_REG, BZ16_REG_FIELD): New macros.
	(jal_insn_32_bd16, jal_insn_32_bd32): New variables.
	(jal_x_insn_32_bd32): Likewise.
	(j_insn_32, jalr_insn_32): Likewise.
	(ds_insns_32_bd16, ds_insns_32_bd32): Likewise.
	(jalr_insn_16_bd16, jalr_insn_16_bd32, jr_insn_16): Likewise.
	(JR16_REG): New macro.
	(ds_insns_16_bd16): New variable.
	(lui_insn): Likewise.
	(addiu_insn, addiupc_insn): Likewise.
	(ADDIUPC_REG_FIELD): New macro.
	(MOVE32_RD, MOVE32_RS): Likewise.
	(MOVE16_RD_FIELD, MOVE16_RS_FIELD): Likewise.
	(move_insns_32, move_insns_16): New variables.
	(nop_insn_32, nop_insn_16): Likewise.
	(MATCH): New macro.
	(find_match): New function.
	(check_br16_dslot, check_br32_dslot): Likewise.
	(check_br16, check_br32): Likewise.
	(IS_BITSIZE): New macro.
	(check_4byte_branch): New function.
	(_bfd_mips_elf_relax_section): Likewise.
	(_bfd_mips_elf_merge_private_bfd_data): Disallow linking MIPS16
	and microMIPS modules together.
	(_bfd_mips_elf_print_private_bfd_data):	Handle microMIPS ASE.
	* reloc.c (BFD_RELOC_MICROMIPS_7_PCREL_S1): New relocation.
	(BFD_RELOC_MICROMIPS_10_PCREL_S1): Likewise.
	(BFD_RELOC_MICROMIPS_16_PCREL_S1): Likewise.
	(BFD_RELOC_MICROMIPS_GPREL16): Likewise.
	(BFD_RELOC_MICROMIPS_JMP, BFD_RELOC_MICROMIPS_HI16): Likewise.
	(BFD_RELOC_MICROMIPS_HI16_S): Likewise.
	(BFD_RELOC_MICROMIPS_LO16): Likewise.
	(BFD_RELOC_MICROMIPS_LITERAL): Likewise.
	(BFD_RELOC_MICROMIPS_GOT16): Likewise.
	(BFD_RELOC_MICROMIPS_CALL16): Likewise.
	(BFD_RELOC_MICROMIPS_GOT_HI16): Likewise.
	(BFD_RELOC_MICROMIPS_GOT_LO16): Likewise.
	(BFD_RELOC_MICROMIPS_CALL_HI16): Likewise.
	(BFD_RELOC_MICROMIPS_CALL_LO16): Likewise.
	(BFD_RELOC_MICROMIPS_SUB): Likewise.
	(BFD_RELOC_MICROMIPS_GOT_PAGE): Likewise.
	(BFD_RELOC_MICROMIPS_GOT_OFST): Likewise.
	(BFD_RELOC_MICROMIPS_GOT_DISP): Likewise.
	(BFD_RELOC_MICROMIPS_HIGHEST): Likewise.
	(BFD_RELOC_MICROMIPS_HIGHER): Likewise.
	(BFD_RELOC_MICROMIPS_SCN_DISP): Likewise.
	(BFD_RELOC_MICROMIPS_JALR): Likewise.
	(BFD_RELOC_MICROMIPS_TLS_GD): Likewise.
	(BFD_RELOC_MICROMIPS_TLS_LDM): Likewise.
	(BFD_RELOC_MICROMIPS_TLS_DTPREL_HI16): Likewise.
	(BFD_RELOC_MICROMIPS_TLS_DTPREL_LO16): Likewise.
	(BFD_RELOC_MICROMIPS_TLS_GOTTPREL): Likewise.
	(BFD_RELOC_MICROMIPS_TLS_TPREL_HI16): Likewise.
	(BFD_RELOC_MICROMIPS_TLS_TPREL_LO16): Likewise.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.

binutils/
2011-02-25  Chao-ying Fu  <fu@@mips.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>

	* readelf.c (get_machine_flags): Handle microMIPS ASE.
	(get_mips_symbol_other): Likewise.

gas/
2011-02-25  Maciej W. Rozycki  <macro@@codesourcery.com>
            Chao-ying Fu  <fu@@mips.com>
	    Richard Sandiford  <rdsandiford@@googlemail.com>

	* config/tc-mips.h (mips_segment_info): Add one bit for
	microMIPS.
	(TC_LABEL_IS_LOCAL): New macro.
	(mips_label_is_local): New prototype.
	* config/tc-mips.c (S0, S7): New macros.
	(emit_branch_likely_macro): New variable.
	(mips_set_options): Add micromips.
	(mips_opts): Initialise micromips to -1.
	(file_ase_micromips): New variable.
	(CPU_HAS_MICROMIPS): New macro.
	(hilo_interlocks): Set for microMIPS too.
	(gpr_interlocks): Likewise.
	(cop_interlocks): Likewise.
	(cop_mem_interlocks): Likewise.
	(HAVE_CODE_COMPRESSION): New macro.
	(micromips_op_hash): New variable.
	(micromips_nop16_insn, micromips_nop32_insn): New variables.
	(NOP_INSN): Handle microMIPS ASE.
	(mips32_to_micromips_reg_b_map): New macro.
	(mips32_to_micromips_reg_c_map): Likewise.
	(mips32_to_micromips_reg_d_map): Likewise.
	(mips32_to_micromips_reg_e_map): Likewise.
	(mips32_to_micromips_reg_f_map): Likewise.
	(mips32_to_micromips_reg_g_map): Likewise.
	(mips32_to_micromips_reg_l_map): Likewise.
	(mips32_to_micromips_reg_n_map): Likewise.
	(mips32_to_micromips_reg_h_map): New variable.
	(mips32_to_micromips_reg_m_map): Likewise.
	(mips32_to_micromips_reg_q_map): Likewise.
	(micromips_to_32_reg_h_map): New variable.
	(micromips_to_32_reg_i_map): Likewise.
	(micromips_to_32_reg_m_map): Likewise.
	(micromips_to_32_reg_q_map): Likewise.
	(micromips_to_32_reg_b_map): New macro.
	(micromips_to_32_reg_c_map): Likewise.
	(micromips_to_32_reg_d_map): Likewise.
	(micromips_to_32_reg_e_map): Likewise.
	(micromips_to_32_reg_f_map): Likewise.
	(micromips_to_32_reg_g_map): Likewise.
	(micromips_to_32_reg_l_map): Likewise.
	(micromips_to_32_reg_n_map): Likewise.
	(micromips_imm_b_map, micromips_imm_c_map): New macros.
	(RELAX_DELAY_SLOT_16BIT): New macro.
	(RELAX_DELAY_SLOT_SIZE_FIRST): Likewise.
	(RELAX_DELAY_SLOT_SIZE_SECOND): Likewise.
	(RELAX_MICROMIPS_ENCODE, RELAX_MICROMIPS_P): New macros.
	(RELAX_MICROMIPS_TYPE, RELAX_MICROMIPS_AT): Likewise.
	(RELAX_MICROMIPS_U16BIT, RELAX_MICROMIPS_UNCOND): Likewise.
	(RELAX_MICROMIPS_COMPACT, RELAX_MICROMIPS_LINK): Likewise.
	(RELAX_MICROMIPS_RELAX32, RELAX_MICROMIPS_TOOFAR16): Likewise.
	(RELAX_MICROMIPS_MARK_TOOFAR16): Likewise.
	(RELAX_MICROMIPS_CLEAR_TOOFAR16): Likewise.
	(RELAX_MICROMIPS_TOOFAR32): Likewise.
	(RELAX_MICROMIPS_MARK_TOOFAR32): Likewise.
	(RELAX_MICROMIPS_CLEAR_TOOFAR32): Likewise.
	(INSERT_OPERAND, EXTRACT_OPERAND): Handle microMIPS ASE.
	(mips_macro_warning): Add delay_slot_16bit_p, delay_slot_32bit_p,
	fsize and insns.
	(mips_mark_labels): New function.
	(mips16_small, mips16_ext): Remove variables, replacing with...
	(forced_insn_size): ... this.
	(append_insn, mips16_ip): Update accordingly.
	(micromips_insn_length): New function.
	(insn_length): Return the length of microMIPS instructions.
	(mips_record_mips16_mode): Rename to...
	(mips_record_compressed_mode): ... this.  Handle microMIPS ASE.
	(install_insn): Handle microMIPS ASE.
	(reglist_lookup): New function.
	(is_size_valid, is_delay_slot_valid): Likewise.
	(md_begin): Handle microMIPS ASE.
	(md_assemble): Likewise.  Update for append_insn interface change.
	(micromips_reloc_p): New function.
	(got16_reloc_p): Handle microMIPS ASE.
	(hi16_reloc_p): Likewise.
	(lo16_reloc_p): Likewise.
	(jmp_reloc_p): New function.
	(jalr_reloc_p): Likewise.
	(matching_lo_reloc): Handle microMIPS ASE.
	(insn_uses_reg, reg_needs_delay): Likewise.
	(mips_move_labels): Likewise.
	(mips16_mark_labels): Rename to...
	(mips_compressed_mark_labels): ... this.  Handle microMIPS ASE.
	(gpr_mod_mask): New function.
	(gpr_read_mask, gpr_write_mask): Handle microMIPS ASE.
	(fpr_read_mask, fpr_write_mask): Likewise.
	(insns_between, nops_for_vr4130, nops_for_insn): Likewise.
	(fix_loongson2f_nop, fix_loongson2f_jump): Likewise.
	(MICROMIPS_LABEL_CHAR): New macro.
	(micromips_target_label, micromips_target_name): New variables.
	(micromips_label_name, micromips_label_expr): New functions.
	(micromips_label_inc, micromips_add_label): Likewise.
	(mips_label_is_local): Likewise.
	(micromips_map_reloc): Likewise.
	(can_swap_branch_p): Handle microMIPS ASE.
	(append_insn): Add expansionp argument.  Handle microMIPS ASE.
	(start_noreorder, end_noreorder): Handle microMIPS ASE.
	(macro_start, macro_warning, macro_end): Likewise.
	(brk_fmt, cop12_fmt, jalr_fmt, lui_fmt): New variables.
	(mem12_fmt, mfhl_fmt, shft_fmt, trap_fmt): Likewise.
	(BRK_FMT, COP12_FMT, JALR_FMT, LUI_FMT): New macros.
	(MEM12_FMT, MFHL_FMT, SHFT_FMT, TRAP_FMT): Likewise.
	(macro_build): Handle microMIPS ASE.  Update for append_insn
	interface change.
	(mips16_macro_build): Update for append_insn interface change.
	(macro_build_jalr): Handle microMIPS ASE.
	(macro_build_lui): Likewise.  Simplify.
	(load_register): Handle microMIPS ASE.
	(load_address): Likewise.
	(move_register): Likewise.
	(macro_build_branch_likely): New function.
	(macro_build_branch_ccl): Likewise.
	(macro_build_branch_rs): Likewise.
	(macro_build_branch_rsrt): Likewise.
	(macro): Handle microMIPS ASE.
	(validate_micromips_insn): New function.
	(expr_const_in_range): Likewise.
	(mips_ip): Handle microMIPS ASE.
	(options): Add OPTION_MICROMIPS and OPTION_NO_MICROMIPS.
	(md_longopts): Add mmicromips and mno-micromips.
	(md_parse_option): Handle OPTION_MICROMIPS and
	OPTION_NO_MICROMIPS.
	(mips_after_parse_args): Handle microMIPS ASE.
	(md_pcrel_from): Handle microMIPS relocations.
	(mips_force_relocation): Likewise.
	(md_apply_fix): Likewise.
	(mips_align): Handle microMIPS ASE.
	(s_mipsset): Likewise.
	(s_cpload, s_cpsetup, s_cpreturn): Use relocation wrappers.
	(s_dtprel_internal): Likewise.
	(s_gpword, s_gpdword): Likewise.
	(s_insn): Handle microMIPS ASE.
	(s_mips_stab): Likewise.
	(relaxed_micromips_32bit_branch_length): New function.
	(relaxed_micromips_16bit_branch_length): New function.
	(md_estimate_size_before_relax): Handle microMIPS ASE.
	(mips_fix_adjustable): Likewise.
	(tc_gen_reloc): Handle microMIPS relocations.
	(mips_relax_frag): Handle microMIPS ASE.
	(md_convert_frag): Likewise.
	(mips_frob_file_after_relocs): Likewise.
	(mips_elf_final_processing): Likewise.
	(mips_nop_opcode): Likewise.
	(mips_handle_align): Likewise.
	(md_show_usage): Handle microMIPS options.
	* symbols.c (TC_LABEL_IS_LOCAL): New macro.
	(S_IS_LOCAL): Add a TC_LABEL_IS_LOCAL check.

	* doc/as.texinfo (Target MIPS options): Add -mmicromips and
	-mno-micromips.
	(-mmicromips, -mno-micromips): New options.
	* doc/c-mips.texi (-mmicromips, -mno-micromips): New options.
	(MIPS ISA): Document .set micromips and .set nomicromips.
	(MIPS insn): Update for microMIPS support.

gas/testsuite/
2011-02-25  Maciej W. Rozycki  <macro@@codesourcery.com>
            Chao-ying Fu  <fu@@mips.com>
	    Richard Sandiford  <rdsandiford@@googlemail.com>

	* gas/mips/micromips.d: New test.
	* gas/mips/micromips-branch-delay.d: Likewise.
	* gas/mips/micromips-branch-relax.d: Likewise.
	* gas/mips/micromips-branch-relax-pic.d: Likewise.
	* gas/mips/micromips-size-1.d: Likewise.
	* gas/mips/micromips-trap.d: Likewise.
	* gas/mips/micromips.l: New stderr output.
	* gas/mips/micromips-branch-delay.l: Likewise.
	* gas/mips/micromips-branch-relax.l: Likewise.
	* gas/mips/micromips-branch-relax-pic.l: Likewise.
	* gas/mips/micromips-size-0.l: New list test.
	* gas/mips/micromips-size-1.l: New stderr output.
	* gas/mips/micromips.s: New test source.
	* gas/mips/micromips-branch-delay.s: Likewise.
	* gas/mips/micromips-branch-relax.s: Likewise.
	* gas/mips/micromips-size-0.s: Likewise.
	* gas/mips/micromips-size-1.s: Likewise.
	* gas/mips/mips.exp: Run the new tests.

	* gas/mips/dli.s: Use .p2align.
	* gas/mips/elf_ase_micromips.d: New test.
	* gas/mips/elf_ase_micromips-2.d: Likewise.
	* gas/mips/micromips@@abs.d: Likewise.
	* gas/mips/micromips@@add.d: Likewise.
	* gas/mips/micromips@@alnv_ps-swap.d: Likewise.
	* gas/mips/micromips@@and.d: Likewise.
	* gas/mips/micromips@@beq.d: Likewise.
	* gas/mips/micromips@@bge.d: Likewise.
	* gas/mips/micromips@@bgeu.d: Likewise.
	* gas/mips/micromips@@blt.d: Likewise.
	* gas/mips/micromips@@bltu.d: Likewise.
	* gas/mips/micromips@@branch-likely.d: Likewise.
	* gas/mips/micromips@@branch-misc-1.d: Likewise.
	* gas/mips/micromips@@branch-misc-2-64.d: Likewise.
	* gas/mips/micromips@@branch-misc-2.d: Likewise.
	* gas/mips/micromips@@branch-misc-2pic-64.d: Likewise.
	* gas/mips/micromips@@branch-misc-2pic.d: Likewise.
	* gas/mips/micromips@@branch-misc-4-64.d: Likewise.
	* gas/mips/micromips@@branch-misc-4.d: Likewise.
	* gas/mips/micromips@@branch-self.d: Likewise.
	* gas/mips/micromips@@cache.d: Likewise.
	* gas/mips/micromips@@daddi.d: Likewise.
	* gas/mips/micromips@@dli.d: Likewise.
	* gas/mips/micromips@@elf-jal.d: Likewise.
	* gas/mips/micromips@@elf-rel2.d: Likewise.
	* gas/mips/micromips@@elfel-rel2.d: Likewise.
	* gas/mips/micromips@@elf-rel4.d: Likewise.
	* gas/mips/micromips@@jal-svr4pic.d: Likewise.
	* gas/mips/micromips@@jal-svr4pic-noreorder.d: Likewise.
	* gas/mips/micromips@@lb-svr4pic-ilocks.d: Likewise.
	* gas/mips/micromips@@li.d: Likewise.
	* gas/mips/micromips@@loc-swap-dis.d: Likewise.
	* gas/mips/micromips@@loc-swap.d: Likewise.
	* gas/mips/micromips@@mips1-fp.d: Likewise.
	* gas/mips/micromips@@mips32-cp2.d: Likewise.
	* gas/mips/micromips@@mips32-imm.d: Likewise.
	* gas/mips/micromips@@mips32-sf32.d: Likewise.
	* gas/mips/micromips@@mips32.d: Likewise.
	* gas/mips/micromips@@mips32r2-cp2.d: Likewise.
	* gas/mips/micromips@@mips32r2-fp32.d: Likewise.
	* gas/mips/micromips@@mips32r2-sync.d: Likewise.
	* gas/mips/micromips@@mips32r2.d: Likewise.
	* gas/mips/micromips@@mips4-branch-likely.d: Likewise.
	* gas/mips/micromips@@mips4-fp.d: Likewise.
	* gas/mips/micromips@@mips4.d: Likewise.
	* gas/mips/micromips@@mips5.d: Likewise.
	* gas/mips/micromips@@mips64-cp2.d: Likewise.
	* gas/mips/micromips@@mips64.d: Likewise.
	* gas/mips/micromips@@mips64r2.d: Likewise.
	* gas/mips/micromips@@pref.d: Likewise.
	* gas/mips/micromips@@relax-at.d: Likewise.
	* gas/mips/micromips@@relax.d: Likewise.
	* gas/mips/micromips@@rol-hw.d: Likewise.
	* gas/mips/micromips@@uld2-eb.d: Likewise.
	* gas/mips/micromips@@uld2-el.d: Likewise.
	* gas/mips/micromips@@ulh2-eb.d: Likewise.
	* gas/mips/micromips@@ulh2-el.d: Likewise.
	* gas/mips/micromips@@ulw2-eb-ilocks.d: Likewise.
	* gas/mips/micromips@@ulw2-el-ilocks.d: Likewise.
	* gas/mips/cache.d: Likewise.
	* gas/mips/daddi.d: Likewise.
	* gas/mips/mips32-imm.d: Likewise.
	* gas/mips/pref.d: Likewise.
	* gas/mips/elf-rel27.d: Handle microMIPS ASE.
	* gas/mips/l_d.d: Likewise.
	* gas/mips/l_d-n32.d: Likewise.
	* gas/mips/l_d-n64.d: Likewise.
	* gas/mips/ld.d: Likewise.
	* gas/mips/ld-n32.d: Likewise.
	* gas/mips/ld-n64.d: Likewise.
	* gas/mips/s_d.d: Likewise.
	* gas/mips/s_d-n32.d: Likewise.
	* gas/mips/s_d-n64.d: Likewise.
	* gas/mips/sd.d: Likewise.
	* gas/mips/sd-n32.d: Likewise.
	* gas/mips/sd-n64.d: Likewise.
	* gas/mips/mips32.d: Update immediates.
	* gas/mips/micromips@@mips32-cp2.s: New test source.
	* gas/mips/micromips@@mips32-imm.s: Likewise.
	* gas/mips/micromips@@mips32r2-cp2.s: Likewise.
	* gas/mips/micromips@@mips64-cp2.s: Likewise.
	* gas/mips/cache.s: Likewise.
	* gas/mips/daddi.s: Likewise.
	* gas/mips/mips32-imm.s: Likewise.
	* gas/mips/elf-rel4.s: Handle microMIPS ASE.
	* gas/mips/lb-pic.s: Likewise.
	* gas/mips/ld.s: Likewise.
	* gas/mips/mips32.s: Likewise.
	* gas/mips/mips.exp: Add the micromips arch.  Exclude mips16e
	from micromips.  Run mips32-imm.

	* gas/mips/jal-mask-11.d: New test.
	* gas/mips/jal-mask-12.d: Likewise.
	* gas/mips/micromips@@jal-mask-11.d: Likewise.
	* gas/mips/jal-mask-1.s: Source for the new tests.
	* gas/mips/jal-mask-21.d: New test.
	* gas/mips/jal-mask-22.d: Likewise.
	* gas/mips/micromips@@jal-mask-12.d: Likewise.
	* gas/mips/jal-mask-2.s: Source for the new tests.
	* gas/mips/mips.exp: Run the new tests.

	* gas/mips/mips16-e.d: Add --special-syms to `objdump'.
	* gas/mips/tmips16-e.d: Likewise.
	* gas/mips/mipsel16-e.d: Likewise.
	* gas/mips/tmipsel16-e.d: Likewise.

	* gas/mips/and.s: Adjust padding.
	* gas/mips/beq.s: Likewise.
	* gas/mips/bge.s: Likewise.
	* gas/mips/bgeu.s: Likewise.
	* gas/mips/blt.s: Likewise.
	* gas/mips/bltu.s: Likewise.
	* gas/mips/branch-misc-2.s: Likewise.
	* gas/mips/jal.s: Likewise.
	* gas/mips/li.s: Likewise.
	* gas/mips/mips4.s: Likewise.
	* gas/mips/mips4-fp.s: Likewise.
	* gas/mips/relax.s: Likewise.
	* gas/mips/and.d: Update accordingly.
	* gas/mips/elf-jal.d: Likewise.
	* gas/mips/jal.d: Likewise.
	* gas/mips/li.d: Likewise.
	* gas/mips/relax-at.d: Likewise.
	* gas/mips/relax.d: Likewise.

include/elf/
2011-02-25  Chao-ying Fu  <fu@@mips.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>

	* mips.h (R_MICROMIPS_min): New relocations.
	(R_MICROMIPS_26_S1): Likewise.
	(R_MICROMIPS_HI16, R_MICROMIPS_LO16): Likewise.
	(R_MICROMIPS_GPREL16, R_MICROMIPS_LITERAL): Likewise.
	(R_MICROMIPS_GOT16, R_MICROMIPS_PC7_S1): Likewise.
	(R_MICROMIPS_PC10_S1, R_MICROMIPS_PC16_S1): Likewise.
	(R_MICROMIPS_CALL16, R_MICROMIPS_GOT_DISP): Likewise.
	(R_MICROMIPS_GOT_PAGE, R_MICROMIPS_GOT_OFST): Likewise.
	(R_MICROMIPS_GOT_HI16, R_MICROMIPS_GOT_LO16): Likewise.
	(R_MICROMIPS_SUB, R_MICROMIPS_HIGHER): Likewise.
	(R_MICROMIPS_HIGHEST, R_MICROMIPS_CALL_HI16): Likewise.
	(R_MICROMIPS_CALL_LO16, R_MICROMIPS_SCN_DISP): Likewise.
	(R_MICROMIPS_JALR, R_MICROMIPS_HI0_LO16): Likewise.
	(R_MICROMIPS_TLS_GD, R_MICROMIPS_TLS_LDM): Likewise.
	(R_MICROMIPS_TLS_DTPREL_HI, R_MICROMIPS_TLS_DTPREL_LO): Likewise.
	(R_MICROMIPS_TLS_GOTTPREL): Likewise.
	(R_MICROMIPS_TLS_TPREL_HI16): Likewise.
	(R_MICROMIPS_TLS_TPREL_LO16): Likewise.
	(R_MICROMIPS_GPREL7_S2, R_MICROMIPS_PC23_S2): Likewise.
	(R_MICROMIPS_max): Likewise.
	(EF_MIPS_ARCH_ASE_MICROMIPS): New macro.
	(STO_MIPS_ISA, STO_MIPS_FLAGS): Likewise.
	(ELF_ST_IS_MIPS_PLT, ELF_ST_SET_MIPS_PLT): Likewise.
	(STO_MICROMIPS): Likewise.
	(ELF_ST_IS_MICROMIPS, ELF_ST_SET_MICROMIPS): Likewise.
	(ELF_ST_IS_COMPRESSED): Likewise.
	(STO_MIPS_PLT, STO_MIPS_PIC): Rework.
	(ELF_ST_IS_MIPS_PIC, ELF_ST_SET_MIPS_PIC): Likewise.
	(STO_MIPS16, ELF_ST_IS_MIPS16, ELF_ST_SET_MIPS16): Likewise.

include/opcode/
2011-02-25  Chao-ying Fu  <fu@@mips.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>

	* mips.h (OP_MASK_EXTLSB, OP_SH_EXTLSB): New macros.
	(OP_MASK_STYPE, OP_SH_STYPE): Likewise.
	(OP_MASK_CODE10, OP_SH_CODE10): Likewise.
	(OP_MASK_TRAP, OP_SH_TRAP): Likewise.
	(OP_MASK_OFFSET12, OP_SH_OFFSET12): Likewise.
	(OP_MASK_OFFSET10, OP_SH_OFFSET10): Likewise.
	(OP_MASK_RS3, OP_SH_RS3): Likewise.
	(OP_MASK_MB, OP_SH_MB, OP_MASK_MC, OP_SH_MC): Likewise.
	(OP_MASK_MD, OP_SH_MD, OP_MASK_ME, OP_SH_ME): Likewise.
	(OP_MASK_MF, OP_SH_MF, OP_MASK_MG, OP_SH_MG): Likewise.
	(OP_MASK_MJ, OP_SH_MJ, OP_MASK_ML, OP_SH_ML): Likewise.
	(OP_MASK_MP, OP_SH_MP, OP_MASK_MQ, OP_SH_MQ): Likewise.
	(OP_MASK_IMMA, OP_SH_IMMA, OP_MASK_IMMB, OP_SH_IMMB): Likewise.
	(OP_MASK_IMMC, OP_SH_IMMC, OP_MASK_IMMF, OP_SH_IMMF): Likewise.
	(OP_MASK_IMMG, OP_SH_IMMG, OP_MASK_IMMH, OP_SH_IMMH): Likewise.
	(OP_MASK_IMMI, OP_SH_IMMI, OP_MASK_IMMJ, OP_SH_IMMJ): Likewise.
	(OP_MASK_IMML, OP_SH_IMML, OP_MASK_IMMM, OP_SH_IMMM): Likewise.
	(OP_MASK_IMMN, OP_SH_IMMN, OP_MASK_IMMO, OP_SH_IMMO): Likewise.
	(OP_MASK_IMMP, OP_SH_IMMP, OP_MASK_IMMQ, OP_SH_IMMQ): Likewise.
	(OP_MASK_IMMU, OP_SH_IMMU, OP_MASK_IMMW, OP_SH_IMMW): Likewise.
	(OP_MASK_IMMX, OP_SH_IMMX, OP_MASK_IMMY, OP_SH_IMMY): Likewise.
	(INSN_WRITE_GPR_S): New macro.
	(INSN2_BRANCH_DELAY_16BIT, INSN2_BRANCH_DELAY_32BIT): Likewise.
	(INSN2_READ_FPR_D): Likewise.
	(INSN2_MOD_GPR_MB, INSN2_MOD_GPR_MC): Likewise.
	(INSN2_MOD_GPR_MD, INSN2_MOD_GPR_ME): Likewise.
	(INSN2_MOD_GPR_MF, INSN2_MOD_GPR_MG): Likewise.
	(INSN2_MOD_GPR_MJ, INSN2_MOD_GPR_MP): Likewise.
	(INSN2_MOD_GPR_MQ, INSN2_MOD_SP): Likewise.
	(INSN2_READ_GPR_31, INSN2_READ_GP, INSN2_READ_PC): Likewise.
	(INSN2_UNCOND_BRANCH, INSN2_COND_BRANCH): Likewise.
	(INSN2_MOD_GPR_MHI, INSN2_MOD_GPR_MM, INSN2_MOD_GPR_MN): Likewise.
	(CPU_MICROMIPS): New macro.
	(M_BC1FL, M_BC1TL, M_BC2FL, M_BC2TL): New enum values.
	(M_BEQL, M_BGEZ, M_BGEZL, M_BGEZALL, M_BGTZ, M_BGTZL): Likewise.
	(M_BLEZ, M_BLEZL, M_BLTZ, M_BLTZL, M_BLTZALL, M_BNEL): Likewise.
	(M_CACHE_OB, M_JALS_1, M_JALS_2, M_JALS_A): Likewise.
	(M_LDC2_OB, M_LDL_OB, M_LDM_AB, M_LDM_OB): Likewise.
	(M_LDP_AB, M_LDP_OB, M_LDR_OB, M_LL_OB, M_LLD_OB): Likewise.
	(M_LWC2_OB, M_LWL_OB, M_LWM_AB, M_LWM_OB): Likewise.
	(M_LWP_AB, M_LWP_OB, M_LWR_OB): Likewise.
	(M_LWU_OB, M_PREF_OB, M_SC_OB, M_SCD_OB): Likewise.
	(M_SDC2_OB, M_SDL_OB, M_SDM_AB, M_SDM_OB): Likewise.
	(M_SDP_AB, M_SDP_OB, M_SDR_OB): Likewise.
	(M_SWC2_OB, M_SWL_OB, M_SWM_AB, M_SWM_OB): Likewise.
	(M_SWP_AB, M_SWP_OB, M_SWR_OB): Likewise.
	(MICROMIPSOP_MASK_MAJOR, MICROMIPSOP_SH_MAJOR): New macros.
	(MICROMIPSOP_MASK_IMMEDIATE, MICROMIPSOP_SH_IMMEDIATE): Likewise.
	(MICROMIPSOP_MASK_DELTA, MICROMIPSOP_SH_DELTA): Likewise.
	(MICROMIPSOP_MASK_CODE10, MICROMIPSOP_SH_CODE10): Likewise.
	(MICROMIPSOP_MASK_TRAP, MICROMIPSOP_SH_TRAP): Likewise.
	(MICROMIPSOP_MASK_SHAMT, MICROMIPSOP_SH_SHAMT): Likewise.
	(MICROMIPSOP_MASK_TARGET, MICROMIPSOP_SH_TARGET): Likewise.
	(MICROMIPSOP_MASK_EXTLSB, MICROMIPSOP_SH_EXTLSB): Likewise.
	(MICROMIPSOP_MASK_EXTMSBD, MICROMIPSOP_SH_EXTMSBD): Likewise.
	(MICROMIPSOP_MASK_INSMSB, MICROMIPSOP_SH_INSMSB): Likewise.
	(MICROMIPSOP_MASK_CODE, MICROMIPSOP_SH_CODE): Likewise.
	(MICROMIPSOP_MASK_CODE2, MICROMIPSOP_SH_CODE2): Likewise.
	(MICROMIPSOP_MASK_CACHE, MICROMIPSOP_SH_CACHE): Likewise.
	(MICROMIPSOP_MASK_SEL, MICROMIPSOP_SH_SEL): Likewise.
	(MICROMIPSOP_MASK_OFFSET12, MICROMIPSOP_SH_OFFSET12): Likewise.
	(MICROMIPSOP_MASK_3BITPOS, MICROMIPSOP_SH_3BITPOS): Likewise.
	(MICROMIPSOP_MASK_STYPE, MICROMIPSOP_SH_STYPE): Likewise.
	(MICROMIPSOP_MASK_OFFSET10, MICROMIPSOP_SH_OFFSET10): Likewise.
	(MICROMIPSOP_MASK_RS, MICROMIPSOP_SH_RS): Likewise.
	(MICROMIPSOP_MASK_RT, MICROMIPSOP_SH_RT): Likewise.
	(MICROMIPSOP_MASK_RD, MICROMIPSOP_SH_RD): Likewise.
	(MICROMIPSOP_MASK_FS, MICROMIPSOP_SH_FS): Likewise.
	(MICROMIPSOP_MASK_FT, MICROMIPSOP_SH_FT): Likewise.
	(MICROMIPSOP_MASK_FD, MICROMIPSOP_SH_FD): Likewise.
	(MICROMIPSOP_MASK_FR, MICROMIPSOP_SH_FR): Likewise.
	(MICROMIPSOP_MASK_RS3, MICROMIPSOP_SH_RS3): Likewise.
	(MICROMIPSOP_MASK_PREFX, MICROMIPSOP_SH_PREFX): Likewise.
	(MICROMIPSOP_MASK_BCC, MICROMIPSOP_SH_BCC): Likewise.
	(MICROMIPSOP_MASK_CCC, MICROMIPSOP_SH_CCC): Likewise.
	(MICROMIPSOP_MASK_COPZ, MICROMIPSOP_SH_COPZ): Likewise.
	(MICROMIPSOP_MASK_MB, MICROMIPSOP_SH_MB): Likewise.
	(MICROMIPSOP_MASK_MC, MICROMIPSOP_SH_MC): Likewise.
	(MICROMIPSOP_MASK_MD, MICROMIPSOP_SH_MD): Likewise.
	(MICROMIPSOP_MASK_ME, MICROMIPSOP_SH_ME): Likewise.
	(MICROMIPSOP_MASK_MF, MICROMIPSOP_SH_MF): Likewise.
	(MICROMIPSOP_MASK_MG, MICROMIPSOP_SH_MG): Likewise.
	(MICROMIPSOP_MASK_MH, MICROMIPSOP_SH_MH): Likewise.
	(MICROMIPSOP_MASK_MI, MICROMIPSOP_SH_MI): Likewise.
	(MICROMIPSOP_MASK_MJ, MICROMIPSOP_SH_MJ): Likewise.
	(MICROMIPSOP_MASK_ML, MICROMIPSOP_SH_ML): Likewise.
	(MICROMIPSOP_MASK_MM, MICROMIPSOP_SH_MM): Likewise.
	(MICROMIPSOP_MASK_MN, MICROMIPSOP_SH_MN): Likewise.
	(MICROMIPSOP_MASK_MP, MICROMIPSOP_SH_MP): Likewise.
	(MICROMIPSOP_MASK_MQ, MICROMIPSOP_SH_MQ): Likewise.
	(MICROMIPSOP_MASK_IMMA, MICROMIPSOP_SH_IMMA): Likewise.
	(MICROMIPSOP_MASK_IMMB, MICROMIPSOP_SH_IMMB): Likewise.
	(MICROMIPSOP_MASK_IMMC, MICROMIPSOP_SH_IMMC): Likewise.
	(MICROMIPSOP_MASK_IMMD, MICROMIPSOP_SH_IMMD): Likewise.
	(MICROMIPSOP_MASK_IMME, MICROMIPSOP_SH_IMME): Likewise.
	(MICROMIPSOP_MASK_IMMF, MICROMIPSOP_SH_IMMF): Likewise.
	(MICROMIPSOP_MASK_IMMG, MICROMIPSOP_SH_IMMG): Likewise.
	(MICROMIPSOP_MASK_IMMH, MICROMIPSOP_SH_IMMH): Likewise.
	(MICROMIPSOP_MASK_IMMI, MICROMIPSOP_SH_IMMI): Likewise.
	(MICROMIPSOP_MASK_IMMJ, MICROMIPSOP_SH_IMMJ): Likewise.
	(MICROMIPSOP_MASK_IMML, MICROMIPSOP_SH_IMML): Likewise.
	(MICROMIPSOP_MASK_IMMM, MICROMIPSOP_SH_IMMM): Likewise.
	(MICROMIPSOP_MASK_IMMN, MICROMIPSOP_SH_IMMN): Likewise.
	(MICROMIPSOP_MASK_IMMO, MICROMIPSOP_SH_IMMO): Likewise.
	(MICROMIPSOP_MASK_IMMP, MICROMIPSOP_SH_IMMP): Likewise.
	(MICROMIPSOP_MASK_IMMQ, MICROMIPSOP_SH_IMMQ): Likewise.
	(MICROMIPSOP_MASK_IMMU, MICROMIPSOP_SH_IMMU): Likewise.
	(MICROMIPSOP_MASK_IMMW, MICROMIPSOP_SH_IMMW): Likewise.
	(MICROMIPSOP_MASK_IMMX, MICROMIPSOP_SH_IMMX): Likewise.
	(MICROMIPSOP_MASK_IMMY, MICROMIPSOP_SH_IMMY): Likewise.
	(MICROMIPSOP_MASK_CODE, MICROMIPSOP_SH_CODE): Likewise.
	(MICROMIPSOP_MASK_CODE2, MICROMIPSOP_SH_CODE2): Likewise.
	(MICROMIPSOP_MASK_CACHE, MICROMIPSOP_SH_CACHE): Likewise.
	(MICROMIPSOP_MASK_CODE20, MICROMIPSOP_SH_CODE20): Likewise.
	(MICROMIPSOP_MASK_PERFREG, MICROMIPSOP_SH_PERFREG): Likewise.
	(MICROMIPSOP_MASK_CODE19, MICROMIPSOP_SH_CODE19): Likewise.
	(MICROMIPSOP_MASK_ALN, MICROMIPSOP_SH_ALN): Likewise.
	(MICROMIPSOP_MASK_VECBYTE, MICROMIPSOP_SH_VECBYTE): Likewise.
	(MICROMIPSOP_MASK_VECALIGN, MICROMIPSOP_SH_VECALIGN): Likewise.
	(MICROMIPSOP_MASK_DSPACC, MICROMIPSOP_SH_DSPACC): Likewise.
	(MICROMIPSOP_MASK_DSPACC_S, MICROMIPSOP_SH_DSPACC_S): Likewise.
	(MICROMIPSOP_MASK_DSPSFT, MICROMIPSOP_SH_DSPSFT): Likewise.
	(MICROMIPSOP_MASK_DSPSFT_7, MICROMIPSOP_SH_DSPSFT_7): Likewise.
	(MICROMIPSOP_MASK_SA3, MICROMIPSOP_SH_SA3): Likewise.
	(MICROMIPSOP_MASK_SA4, MICROMIPSOP_SH_SA4): Likewise.
	(MICROMIPSOP_MASK_IMM8, MICROMIPSOP_SH_IMM8): Likewise.
	(MICROMIPSOP_MASK_IMM10, MICROMIPSOP_SH_IMM10): Likewise.
	(MICROMIPSOP_MASK_WRDSP, MICROMIPSOP_SH_WRDSP): Likewise.
	(MICROMIPSOP_MASK_RDDSP, MICROMIPSOP_SH_RDDSP): Likewise.
	(MICROMIPSOP_MASK_BP, MICROMIPSOP_SH_BP): Likewise.
	(MICROMIPSOP_MASK_MT_U, MICROMIPSOP_SH_MT_U): Likewise.
	(MICROMIPSOP_MASK_MT_H, MICROMIPSOP_SH_MT_H): Likewise.
	(MICROMIPSOP_MASK_MTACC_T, MICROMIPSOP_SH_MTACC_T): Likewise.
	(MICROMIPSOP_MASK_MTACC_D, MICROMIPSOP_SH_MTACC_D): Likewise.
	(MICROMIPSOP_MASK_BBITIND, MICROMIPSOP_SH_BBITIND): Likewise.
	(MICROMIPSOP_MASK_CINSPOS, MICROMIPSOP_SH_CINSPOS): Likewise.
	(MICROMIPSOP_MASK_CINSLM1, MICROMIPSOP_SH_CINSLM1): Likewise.
	(MICROMIPSOP_MASK_SEQI, MICROMIPSOP_SH_SEQI): Likewise.
	(micromips_opcodes): New declaration.
	(bfd_micromips_num_opcodes): Likewise.

ld/testsuite/
2011-02-25  Catherine Moore  <clm@@codesourcery.com>
            Chao-ying Fu  <fu@@mips.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>

	* lib/ld-lib.exp (run_dump_test): Support distinct assembler
	flags for the same source named multiple times.
	* ld-mips-elf/jalx-1.s: New test source.
	* ld-mips-elf/jalx-1.d: New test output.
	* ld-mips-elf/jalx-1.ld: New test linker script.
	* ld-mips-elf/jalx-2-main.s: New test source.
	* ld-mips-elf/jalx-2-ex.s: Likewise.
	* ld-mips-elf/jalx-2-printf.s: Likewise.
	* ld-mips-elf/jalx-2.dd: New test output.
	* ld-mips-elf/jalx-2.ld: New test linker script.
	* ld-mips-elf/mips16-and-micromips.d: New test.
	* ld-mips-elf/mips-elf.exp: Run the new tests

opcodes/
2011-02-25  Chao-ying Fu  <fu@@mips.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>

	* micromips-opc.c: New file.
	* mips-dis.c (micromips_to_32_reg_b_map): New array.
	(micromips_to_32_reg_c_map, micromips_to_32_reg_d_map): Likewise.
	(micromips_to_32_reg_e_map, micromips_to_32_reg_f_map): Likewise.
	(micromips_to_32_reg_g_map, micromips_to_32_reg_l_map): Likewise.
	(micromips_to_32_reg_q_map): Likewise.
	(micromips_imm_b_map, micromips_imm_c_map): Likewise.
	(micromips_ase): New variable.
	(is_micromips): New function.
	(set_default_mips_dis_options): Handle microMIPS ASE.
	(print_insn_micromips): New function.
	(is_compressed_mode_p): Likewise.
	(_print_insn_mips): Handle microMIPS instructions.
	* Makefile.am (CFILES): Add micromips-opc.c.
	* configure.in (bfd_mips_arch): Add micromips-opc.lo.
	* Makefile.in: Regenerate.
	* configure: Regenerate.

	* mips-dis.c (micromips_to_32_reg_h_map): New variable.
	(micromips_to_32_reg_i_map): Likewise.
	(micromips_to_32_reg_m_map): Likewise.
	(micromips_to_32_reg_n_map): New macro.
@
text
@#as: -KPIC -32 -relax-branch --defsym atk0=1
#objdump: -dr --prefix-addresses
#name: MIPS relax with .set at
#stderr: relax.l
#source: relax.s

# Test relaxation with .set at.

.*: +file format .*mips.*

Disassembly of section \.text:
00000000 <foo> lw	k0,2\(gp\)
			0: R_MIPS_GOT16	\.text
00000004 <foo\+0x4> addiu	k0,k0,592
			4: R_MIPS_LO16	\.text
00000008 <foo\+0x8> jr	k0
0000000c <foo\+0xc> nop
00000010 <foo\+0x10> lw	k0,2\(gp\)
			10: R_MIPS_GOT16	\.text
00000014 <foo\+0x14> addiu	k0,k0,592
			14: R_MIPS_LO16	\.text
00000018 <foo\+0x18> jalr	k0
0000001c <foo\+0x1c> nop
00000020 <foo\+0x20> bne	v0,v1,00000034 <foo\+0x34>
00000024 <foo\+0x24> nop
00000028 <foo\+0x28> lw	k0,2\(gp\)
			28: R_MIPS_GOT16	\.text
0000002c <foo\+0x2c> addiu	k0,k0,592
			2c: R_MIPS_LO16	\.text
00000030 <foo\+0x30> jr	k0
00000034 <foo\+0x34> nop
00000038 <foo\+0x38> beq	a0,a1,0000004c <foo\+0x4c>
0000003c <foo\+0x3c> nop
00000040 <foo\+0x40> lw	k0,2\(gp\)
			40: R_MIPS_GOT16	\.text
00000044 <foo\+0x44> addiu	k0,k0,592
			44: R_MIPS_LO16	\.text
00000048 <foo\+0x48> jr	k0
0000004c <foo\+0x4c> nop
00000050 <foo\+0x50> bgtz	v0,00000064 <foo\+0x64>
00000054 <foo\+0x54> nop
00000058 <foo\+0x58> lw	k0,2\(gp\)
			58: R_MIPS_GOT16	\.text
0000005c <foo\+0x5c> addiu	k0,k0,592
			5c: R_MIPS_LO16	\.text
00000060 <foo\+0x60> jr	k0
00000064 <foo\+0x64> nop
00000068 <foo\+0x68> blez	v1,0000007c <foo\+0x7c>
0000006c <foo\+0x6c> nop
00000070 <foo\+0x70> lw	k0,2\(gp\)
			70: R_MIPS_GOT16	\.text
00000074 <foo\+0x74> addiu	k0,k0,592
			74: R_MIPS_LO16	\.text
00000078 <foo\+0x78> jr	k0
0000007c <foo\+0x7c> nop
00000080 <foo\+0x80> bgez	a0,00000094 <foo\+0x94>
00000084 <foo\+0x84> nop
00000088 <foo\+0x88> lw	k0,2\(gp\)
			88: R_MIPS_GOT16	\.text
0000008c <foo\+0x8c> addiu	k0,k0,592
			8c: R_MIPS_LO16	\.text
00000090 <foo\+0x90> jr	k0
00000094 <foo\+0x94> nop
00000098 <foo\+0x98> bltz	a1,000000ac <foo\+0xac>
0000009c <foo\+0x9c> nop
000000a0 <foo\+0xa0> lw	k0,2\(gp\)
			a0: R_MIPS_GOT16	\.text
000000a4 <foo\+0xa4> addiu	k0,k0,592
			a4: R_MIPS_LO16	\.text
000000a8 <foo\+0xa8> jr	k0
000000ac <foo\+0xac> nop
000000b0 <foo\+0xb0> bc1t	000000c4 <foo\+0xc4>
000000b4 <foo\+0xb4> nop
000000b8 <foo\+0xb8> lw	k0,2\(gp\)
			b8: R_MIPS_GOT16	\.text
000000bc <foo\+0xbc> addiu	k0,k0,592
			bc: R_MIPS_LO16	\.text
000000c0 <foo\+0xc0> jr	k0
000000c4 <foo\+0xc4> nop
000000c8 <foo\+0xc8> bc1f	000000dc <foo\+0xdc>
000000cc <foo\+0xcc> nop
000000d0 <foo\+0xd0> lw	k0,2\(gp\)
			d0: R_MIPS_GOT16	\.text
000000d4 <foo\+0xd4> addiu	k0,k0,592
			d4: R_MIPS_LO16	\.text
000000d8 <foo\+0xd8> jr	k0
000000dc <foo\+0xdc> nop
000000e0 <foo\+0xe0> bgez	v0,000000f4 <foo\+0xf4>
000000e4 <foo\+0xe4> nop
000000e8 <foo\+0xe8> lw	k0,2\(gp\)
			e8: R_MIPS_GOT16	\.text
000000ec <foo\+0xec> addiu	k0,k0,592
			ec: R_MIPS_LO16	\.text
000000f0 <foo\+0xf0> jalr	k0
000000f4 <foo\+0xf4> nop
000000f8 <foo\+0xf8> bltz	v1,0000010c <foo\+0x10c>
000000fc <foo\+0xfc> nop
00000100 <foo\+0x100> lw	k0,2\(gp\)
			100: R_MIPS_GOT16	\.text
00000104 <foo\+0x104> addiu	k0,k0,592
			104: R_MIPS_LO16	\.text
00000108 <foo\+0x108> jalr	k0
0000010c <foo\+0x10c> nop
00000110 <foo\+0x110> beql	v0,v1,00000120 <foo\+0x120>
00000114 <foo\+0x114> nop
00000118 <foo\+0x118> beqzl	zero,00000130 <foo\+0x130>
0000011c <foo\+0x11c> nop
00000120 <foo\+0x120> lw	k0,2\(gp\)
			120: R_MIPS_GOT16	\.text
00000124 <foo\+0x124> addiu	k0,k0,592
			124: R_MIPS_LO16	\.text
00000128 <foo\+0x128> jr	k0
0000012c <foo\+0x12c> nop
00000130 <foo\+0x130> bnel	a0,a1,00000140 <foo\+0x140>
00000134 <foo\+0x134> nop
00000138 <foo\+0x138> beqzl	zero,00000150 <foo\+0x150>
0000013c <foo\+0x13c> nop
00000140 <foo\+0x140> lw	k0,2\(gp\)
			140: R_MIPS_GOT16	\.text
00000144 <foo\+0x144> addiu	k0,k0,592
			144: R_MIPS_LO16	\.text
00000148 <foo\+0x148> jr	k0
0000014c <foo\+0x14c> nop
00000150 <foo\+0x150> blezl	v0,00000160 <foo\+0x160>
00000154 <foo\+0x154> nop
00000158 <foo\+0x158> beqzl	zero,00000170 <foo\+0x170>
0000015c <foo\+0x15c> nop
00000160 <foo\+0x160> lw	k0,2\(gp\)
			160: R_MIPS_GOT16	\.text
00000164 <foo\+0x164> addiu	k0,k0,592
			164: R_MIPS_LO16	\.text
00000168 <foo\+0x168> jr	k0
0000016c <foo\+0x16c> nop
00000170 <foo\+0x170> bgtzl	v1,00000180 <foo\+0x180>
00000174 <foo\+0x174> nop
00000178 <foo\+0x178> beqzl	zero,00000190 <foo\+0x190>
0000017c <foo\+0x17c> nop
00000180 <foo\+0x180> lw	k0,2\(gp\)
			180: R_MIPS_GOT16	\.text
00000184 <foo\+0x184> addiu	k0,k0,592
			184: R_MIPS_LO16	\.text
00000188 <foo\+0x188> jr	k0
0000018c <foo\+0x18c> nop
00000190 <foo\+0x190> bltzl	a0,000001a0 <foo\+0x1a0>
00000194 <foo\+0x194> nop
00000198 <foo\+0x198> beqzl	zero,000001b0 <foo\+0x1b0>
0000019c <foo\+0x19c> nop
000001a0 <foo\+0x1a0> lw	k0,2\(gp\)
			1a0: R_MIPS_GOT16	\.text
000001a4 <foo\+0x1a4> addiu	k0,k0,592
			1a4: R_MIPS_LO16	\.text
000001a8 <foo\+0x1a8> jr	k0
000001ac <foo\+0x1ac> nop
000001b0 <foo\+0x1b0> bgezl	a1,000001c0 <foo\+0x1c0>
000001b4 <foo\+0x1b4> nop
000001b8 <foo\+0x1b8> beqzl	zero,000001d0 <foo\+0x1d0>
000001bc <foo\+0x1bc> nop
000001c0 <foo\+0x1c0> lw	k0,2\(gp\)
			1c0: R_MIPS_GOT16	\.text
000001c4 <foo\+0x1c4> addiu	k0,k0,592
			1c4: R_MIPS_LO16	\.text
000001c8 <foo\+0x1c8> jr	k0
000001cc <foo\+0x1cc> nop
000001d0 <foo\+0x1d0> bc1fl	000001e0 <foo\+0x1e0>
000001d4 <foo\+0x1d4> nop
000001d8 <foo\+0x1d8> beqzl	zero,000001f0 <foo\+0x1f0>
000001dc <foo\+0x1dc> nop
000001e0 <foo\+0x1e0> lw	k0,2\(gp\)
			1e0: R_MIPS_GOT16	\.text
000001e4 <foo\+0x1e4> addiu	k0,k0,592
			1e4: R_MIPS_LO16	\.text
000001e8 <foo\+0x1e8> jr	k0
000001ec <foo\+0x1ec> nop
000001f0 <foo\+0x1f0> bc1tl	00000200 <foo\+0x200>
000001f4 <foo\+0x1f4> nop
000001f8 <foo\+0x1f8> beqzl	zero,00000210 <foo\+0x210>
000001fc <foo\+0x1fc> nop
00000200 <foo\+0x200> lw	k0,2\(gp\)
			200: R_MIPS_GOT16	\.text
00000204 <foo\+0x204> addiu	k0,k0,592
			204: R_MIPS_LO16	\.text
00000208 <foo\+0x208> jr	k0
0000020c <foo\+0x20c> nop
00000210 <foo\+0x210> bltzl	v0,00000220 <foo\+0x220>
00000214 <foo\+0x214> nop
00000218 <foo\+0x218> beqzl	zero,00000230 <foo\+0x230>
0000021c <foo\+0x21c> nop
00000220 <foo\+0x220> lw	k0,2\(gp\)
			220: R_MIPS_GOT16	\.text
00000224 <foo\+0x224> addiu	k0,k0,592
			224: R_MIPS_LO16	\.text
00000228 <foo\+0x228> jalr	k0
0000022c <foo\+0x22c> nop
00000230 <foo\+0x230> bgezl	v1,00000240 <foo\+0x240>
00000234 <foo\+0x234> nop
00000238 <foo\+0x238> beqzl	zero,00000250 <foo\+0x250>
0000023c <foo\+0x23c> nop
00000240 <foo\+0x240> lw	k0,2\(gp\)
			240: R_MIPS_GOT16	\.text
00000244 <foo\+0x244> addiu	k0,k0,592
			244: R_MIPS_LO16	\.text
00000248 <foo\+0x248> jalr	k0
0000024c <foo\+0x24c> nop
	\.\.\.
00020250 <bar> lw	k0,0\(gp\)
			20250: R_MIPS_GOT16	\.text
00020254 <bar\+0x4> addiu	k0,k0,0
			20254: R_MIPS_LO16	\.text
00020258 <bar\+0x8> jr	k0
0002025c <bar\+0xc> nop
00020260 <bar\+0x10> lw	k0,0\(gp\)
			20260: R_MIPS_GOT16	\.text
00020264 <bar\+0x14> addiu	k0,k0,0
			20264: R_MIPS_LO16	\.text
00020268 <bar\+0x18> jalr	k0
0002026c <bar\+0x1c> nop
00020270 <bar\+0x20> bne	v0,v1,00020284 <bar\+0x34>
00020274 <bar\+0x24> nop
00020278 <bar\+0x28> lw	k0,0\(gp\)
			20278: R_MIPS_GOT16	\.text
0002027c <bar\+0x2c> addiu	k0,k0,0
			2027c: R_MIPS_LO16	\.text
00020280 <bar\+0x30> jr	k0
00020284 <bar\+0x34> nop
00020288 <bar\+0x38> beq	a0,a1,0002029c <bar\+0x4c>
0002028c <bar\+0x3c> nop
00020290 <bar\+0x40> lw	k0,0\(gp\)
			20290: R_MIPS_GOT16	\.text
00020294 <bar\+0x44> addiu	k0,k0,0
			20294: R_MIPS_LO16	\.text
00020298 <bar\+0x48> jr	k0
0002029c <bar\+0x4c> nop
000202a0 <bar\+0x50> bgtz	v0,000202b4 <bar\+0x64>
000202a4 <bar\+0x54> nop
000202a8 <bar\+0x58> lw	k0,0\(gp\)
			202a8: R_MIPS_GOT16	\.text
000202ac <bar\+0x5c> addiu	k0,k0,0
			202ac: R_MIPS_LO16	\.text
000202b0 <bar\+0x60> jr	k0
000202b4 <bar\+0x64> nop
000202b8 <bar\+0x68> blez	v1,000202cc <bar\+0x7c>
000202bc <bar\+0x6c> nop
000202c0 <bar\+0x70> lw	k0,0\(gp\)
			202c0: R_MIPS_GOT16	\.text
000202c4 <bar\+0x74> addiu	k0,k0,0
			202c4: R_MIPS_LO16	\.text
000202c8 <bar\+0x78> jr	k0
000202cc <bar\+0x7c> nop
000202d0 <bar\+0x80> bgez	a0,000202e4 <bar\+0x94>
000202d4 <bar\+0x84> nop
000202d8 <bar\+0x88> lw	k0,0\(gp\)
			202d8: R_MIPS_GOT16	\.text
000202dc <bar\+0x8c> addiu	k0,k0,0
			202dc: R_MIPS_LO16	\.text
000202e0 <bar\+0x90> jr	k0
000202e4 <bar\+0x94> nop
000202e8 <bar\+0x98> bltz	a1,000202fc <bar\+0xac>
000202ec <bar\+0x9c> nop
000202f0 <bar\+0xa0> lw	k0,0\(gp\)
			202f0: R_MIPS_GOT16	\.text
000202f4 <bar\+0xa4> addiu	k0,k0,0
			202f4: R_MIPS_LO16	\.text
000202f8 <bar\+0xa8> jr	k0
000202fc <bar\+0xac> nop
00020300 <bar\+0xb0> bc1t	00020314 <bar\+0xc4>
00020304 <bar\+0xb4> nop
00020308 <bar\+0xb8> lw	k0,0\(gp\)
			20308: R_MIPS_GOT16	\.text
0002030c <bar\+0xbc> addiu	k0,k0,0
			2030c: R_MIPS_LO16	\.text
00020310 <bar\+0xc0> jr	k0
00020314 <bar\+0xc4> nop
00020318 <bar\+0xc8> bc1f	0002032c <bar\+0xdc>
0002031c <bar\+0xcc> nop
00020320 <bar\+0xd0> lw	k0,0\(gp\)
			20320: R_MIPS_GOT16	\.text
00020324 <bar\+0xd4> addiu	k0,k0,0
			20324: R_MIPS_LO16	\.text
00020328 <bar\+0xd8> jr	k0
0002032c <bar\+0xdc> nop
00020330 <bar\+0xe0> bgez	v0,00020344 <bar\+0xf4>
00020334 <bar\+0xe4> nop
00020338 <bar\+0xe8> lw	k0,0\(gp\)
			20338: R_MIPS_GOT16	\.text
0002033c <bar\+0xec> addiu	k0,k0,0
			2033c: R_MIPS_LO16	\.text
00020340 <bar\+0xf0> jalr	k0
00020344 <bar\+0xf4> nop
00020348 <bar\+0xf8> bltz	v1,0002035c <bar\+0x10c>
0002034c <bar\+0xfc> nop
00020350 <bar\+0x100> lw	k0,0\(gp\)
			20350: R_MIPS_GOT16	\.text
00020354 <bar\+0x104> addiu	k0,k0,0
			20354: R_MIPS_LO16	\.text
00020358 <bar\+0x108> jalr	k0
0002035c <bar\+0x10c> nop
00020360 <bar\+0x110> beql	v0,v1,00020370 <bar\+0x120>
00020364 <bar\+0x114> nop
00020368 <bar\+0x118> beqzl	zero,00020380 <bar\+0x130>
0002036c <bar\+0x11c> nop
00020370 <bar\+0x120> lw	k0,0\(gp\)
			20370: R_MIPS_GOT16	\.text
00020374 <bar\+0x124> addiu	k0,k0,0
			20374: R_MIPS_LO16	\.text
00020378 <bar\+0x128> jr	k0
0002037c <bar\+0x12c> nop
00020380 <bar\+0x130> bnel	a0,a1,00020390 <bar\+0x140>
00020384 <bar\+0x134> nop
00020388 <bar\+0x138> beqzl	zero,000203a0 <bar\+0x150>
0002038c <bar\+0x13c> nop
00020390 <bar\+0x140> lw	k0,0\(gp\)
			20390: R_MIPS_GOT16	\.text
00020394 <bar\+0x144> addiu	k0,k0,0
			20394: R_MIPS_LO16	\.text
00020398 <bar\+0x148> jr	k0
0002039c <bar\+0x14c> nop
000203a0 <bar\+0x150> blezl	v0,000203b0 <bar\+0x160>
000203a4 <bar\+0x154> nop
000203a8 <bar\+0x158> beqzl	zero,000203c0 <bar\+0x170>
000203ac <bar\+0x15c> nop
000203b0 <bar\+0x160> lw	k0,0\(gp\)
			203b0: R_MIPS_GOT16	\.text
000203b4 <bar\+0x164> addiu	k0,k0,0
			203b4: R_MIPS_LO16	\.text
000203b8 <bar\+0x168> jr	k0
000203bc <bar\+0x16c> nop
000203c0 <bar\+0x170> bgtzl	v1,000203d0 <bar\+0x180>
000203c4 <bar\+0x174> nop
000203c8 <bar\+0x178> beqzl	zero,000203e0 <bar\+0x190>
000203cc <bar\+0x17c> nop
000203d0 <bar\+0x180> lw	k0,0\(gp\)
			203d0: R_MIPS_GOT16	\.text
000203d4 <bar\+0x184> addiu	k0,k0,0
			203d4: R_MIPS_LO16	\.text
000203d8 <bar\+0x188> jr	k0
000203dc <bar\+0x18c> nop
000203e0 <bar\+0x190> bltzl	a0,000203f0 <bar\+0x1a0>
000203e4 <bar\+0x194> nop
000203e8 <bar\+0x198> beqzl	zero,00020400 <bar\+0x1b0>
000203ec <bar\+0x19c> nop
000203f0 <bar\+0x1a0> lw	k0,0\(gp\)
			203f0: R_MIPS_GOT16	\.text
000203f4 <bar\+0x1a4> addiu	k0,k0,0
			203f4: R_MIPS_LO16	\.text
000203f8 <bar\+0x1a8> jr	k0
000203fc <bar\+0x1ac> nop
00020400 <bar\+0x1b0> bgezl	a1,00020410 <bar\+0x1c0>
00020404 <bar\+0x1b4> nop
00020408 <bar\+0x1b8> beqzl	zero,00020420 <bar\+0x1d0>
0002040c <bar\+0x1bc> nop
00020410 <bar\+0x1c0> lw	k0,0\(gp\)
			20410: R_MIPS_GOT16	\.text
00020414 <bar\+0x1c4> addiu	k0,k0,0
			20414: R_MIPS_LO16	\.text
00020418 <bar\+0x1c8> jr	k0
0002041c <bar\+0x1cc> nop
00020420 <bar\+0x1d0> bc1fl	00020430 <bar\+0x1e0>
00020424 <bar\+0x1d4> nop
00020428 <bar\+0x1d8> beqzl	zero,00020440 <bar\+0x1f0>
0002042c <bar\+0x1dc> nop
00020430 <bar\+0x1e0> lw	k0,0\(gp\)
			20430: R_MIPS_GOT16	\.text
00020434 <bar\+0x1e4> addiu	k0,k0,0
			20434: R_MIPS_LO16	\.text
00020438 <bar\+0x1e8> jr	k0
0002043c <bar\+0x1ec> nop
00020440 <bar\+0x1f0> bc1tl	00020450 <bar\+0x200>
00020444 <bar\+0x1f4> nop
00020448 <bar\+0x1f8> beqzl	zero,00020460 <bar\+0x210>
0002044c <bar\+0x1fc> nop
00020450 <bar\+0x200> lw	k0,0\(gp\)
			20450: R_MIPS_GOT16	\.text
00020454 <bar\+0x204> addiu	k0,k0,0
			20454: R_MIPS_LO16	\.text
00020458 <bar\+0x208> jr	k0
0002045c <bar\+0x20c> nop
00020460 <bar\+0x210> bltzl	v0,00020470 <bar\+0x220>
00020464 <bar\+0x214> nop
00020468 <bar\+0x218> beqzl	zero,00020480 <bar\+0x230>
0002046c <bar\+0x21c> nop
00020470 <bar\+0x220> lw	k0,0\(gp\)
			20470: R_MIPS_GOT16	\.text
00020474 <bar\+0x224> addiu	k0,k0,0
			20474: R_MIPS_LO16	\.text
00020478 <bar\+0x228> jalr	k0
0002047c <bar\+0x22c> nop
00020480 <bar\+0x230> bgezl	v1,00020490 <bar\+0x240>
00020484 <bar\+0x234> nop
00020488 <bar\+0x238> beqzl	zero,000204a0 <bar\+0x250>
0002048c <bar\+0x23c> nop
00020490 <bar\+0x240> lw	k0,0\(gp\)
			20490: R_MIPS_GOT16	\.text
00020494 <bar\+0x244> addiu	k0,k0,0
			20494: R_MIPS_LO16	\.text
00020498 <bar\+0x248> jalr	k0
0002049c <bar\+0x24c> nop
	\.\.\.
@


1.1
log
@	gas/
	* config/tc-mips.c (RELAX_BRANCH_ENCODE): Encode the temporary
	register to use.
	(RELAX_BRANCH_UNCOND): Adjust accordingly.
	(RELAX_BRANCH_LIKELY): Likewise.
	(RELAX_BRANCH_LINK): Likewise.
	(RELAX_BRANCH_TOOFAR): Likewise.
	(RELAX_BRANCH_AT): New macro.
	(append_insn): Encode the temporary register to use in standard
	MIPS branch relaxation.
	(relaxed_branch_length): Update according to changes to
	RELAX_BRANCH_ENCODE.
	(md_convert_frag): Use the encoded register as the temporary.

	gas/testsuite/
	* gas/mips/relax-at.d: New test for branch relaxation with .set
	at.
	* gas/mips/relax.s: Update to support the new test.
	* gas/mips/relax.l: Update accordingly.
	* gas/mips/relax.d: Update for multi-arch invocation.
	* gas/mips/mips.exp: Run the new test.  Adjust to run "relax"
	across all applicable architectures.
@
text
@d397 1
@

