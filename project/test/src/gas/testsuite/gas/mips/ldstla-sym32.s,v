head	1.1;
access;
symbols
	binutils-2_24-branch:1.1.0.32
	binutils-2_24-branchpoint:1.1
	binutils-2_21_1:1.1
	binutils-2_23_2:1.1
	binutils-2_23_1:1.1
	binutils-2_23:1.1
	binutils-2_23-branch:1.1.0.30
	binutils-2_23-branchpoint:1.1
	binutils-2_22_branch:1.1.0.28
	binutils-2_22:1.1
	binutils-2_22-branch:1.1.0.26
	binutils-2_22-branchpoint:1.1
	binutils-2_21:1.1
	binutils-2_21-branch:1.1.0.24
	binutils-2_21-branchpoint:1.1
	binutils-2_20_1:1.1
	binutils-2_20:1.1
	binutils-arc-20081103-branch:1.1.0.22
	binutils-arc-20081103-branchpoint:1.1
	binutils-2_20-branch:1.1.0.20
	binutils-2_20-branchpoint:1.1
	dje-cgen-play1-branch:1.1.0.18
	dje-cgen-play1-branchpoint:1.1
	arc-20081103-branch:1.1.0.16
	arc-20081103-branchpoint:1.1
	binutils-2_19_1:1.1
	binutils-2_19:1.1
	binutils-2_19-branch:1.1.0.14
	binutils-2_19-branchpoint:1.1
	binutils-2_18:1.1
	binutils-2_18-branch:1.1.0.12
	binutils-2_18-branchpoint:1.1
	binutils-csl-coldfire-4_1-32:1.1
	binutils-csl-sourcerygxx-4_1-32:1.1
	binutils-csl-innovasic-fido-3_4_4-33:1.1
	binutils-csl-sourcerygxx-3_4_4-32:1.1
	binutils-csl-coldfire-4_1-30:1.1
	binutils-csl-sourcerygxx-4_1-30:1.1
	binutils-csl-coldfire-4_1-28:1.1
	binutils-csl-sourcerygxx-4_1-29:1.1
	binutils-csl-sourcerygxx-4_1-28:1.1
	binutils-csl-arm-2006q3-27:1.1
	binutils-csl-sourcerygxx-4_1-27:1.1
	binutils-csl-arm-2006q3-26:1.1
	binutils-csl-sourcerygxx-4_1-26:1.1
	binutils-csl-sourcerygxx-4_1-25:1.1
	binutils-csl-sourcerygxx-4_1-24:1.1
	binutils-csl-sourcerygxx-4_1-23:1.1
	binutils-csl-sourcerygxx-4_1-21:1.1
	binutils-csl-arm-2006q3-21:1.1
	binutils-csl-sourcerygxx-4_1-22:1.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.1
	binutils-csl-sourcerygxx-4_1-20:1.1
	binutils-csl-arm-2006q3-19:1.1
	binutils-csl-sourcerygxx-4_1-19:1.1
	binutils-csl-sourcerygxx-4_1-18:1.1
	binutils-csl-renesas-4_1-9:1.1
	binutils-csl-sourcerygxx-3_4_4-25:1.1
	binutils-csl-renesas-4_1-8:1.1
	binutils-csl-renesas-4_1-7:1.1
	binutils-csl-renesas-4_1-6:1.1
	binutils-csl-sourcerygxx-4_1-17:1.1
	binutils-csl-sourcerygxx-4_1-14:1.1
	binutils-csl-sourcerygxx-4_1-15:1.1
	binutils-csl-sourcerygxx-4_1-13:1.1
	binutils-2_17:1.1
	binutils-csl-sourcerygxx-4_1-12:1.1
	binutils-csl-sourcerygxx-3_4_4-21:1.1
	binutils-csl-wrs-linux-3_4_4-24:1.1
	binutils-csl-wrs-linux-3_4_4-23:1.1
	binutils-csl-sourcerygxx-4_1-9:1.1
	binutils-csl-sourcerygxx-4_1-8:1.1
	binutils-csl-sourcerygxx-4_1-7:1.1
	binutils-csl-arm-2006q1-6:1.1
	binutils-csl-sourcerygxx-4_1-6:1.1
	binutils-csl-wrs-linux-3_4_4-22:1.1
	binutils-csl-coldfire-4_1-11:1.1
	binutils-csl-sourcerygxx-3_4_4-19:1.1
	binutils-csl-coldfire-4_1-10:1.1
	binutils-csl-sourcerygxx-4_1-5:1.1
	binutils-csl-sourcerygxx-4_1-4:1.1
	binutils-csl-wrs-linux-3_4_4-21:1.1
	binutils-csl-morpho-4_1-4:1.1
	binutils-csl-sourcerygxx-3_4_4-17:1.1
	binutils-csl-wrs-linux-3_4_4-20:1.1
	binutils-2_17-branch:1.1.0.10
	binutils-2_17-branchpoint:1.1
	binutils-csl-2_17-branch:1.1.0.8
	binutils-csl-2_17-branchpoint:1.1
	binutils-csl-gxxpro-3_4-branch:1.1.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.1
	binutils-2_16_1:1.1
	binutils-csl-arm-2005q1b:1.1
	binutils-2_16:1.1
	binutils-csl-arm-2005q1a:1.1
	binutils-csl-arm-2005q1-branch:1.1.0.4
	binutils-csl-arm-2005q1-branchpoint:1.1
	binutils-2_16-branch:1.1.0.2
	binutils-2_16-branchpoint:1.1
	binutils_latest_snapshot:1.1;
locks; strict;
comment	@# @;


1.1
date	2005.03.04.09.51.11;	author rsandifo;	state Exp;
branches;
next	;


desc
@@


1.1
log
@	* config/tc-mips.c (mips_set_options): Add sym32 field.
	(mips_opts): Initialize it.
	(HAVE_32BIT_ADDRESSES): Set to true if pointers are 32 bits wide.
	(HAVE_64BIT_ADDRESSES): Redefine as !HAVE_32BIT_ADDRESSES.
	(HAVE_32BIT_SYMBOLS, HAVE_64BIT_SYMBOLS): New macros.
	(load_address): Use HAVE_64BIT_SYMBOLS instead of HAVE_64BIT_ADDRESSES
	when deciding whether to use a symbolic %highest/%higher expansion.
	(macro): Likewise.  Remove o64/n32 linux hack.  Always use
	ADDRESS_ADD*_INSN for address addition in the expansion of "dla"
	and "la".  Handle constants separately from symbolic expressions in
	the "ld_st:" case, using 64-bit arithmetic if HAVE_64BIT_ADDRESSES
	and using load_register to load the high part of the address.
	(OPTION_MSYM32, OPTION_NO_MSYM32): New macros.
	(OPTION_ELF_BASE): Bump by 2.
	(md_longopts): Add entries for -msym32 and -mno-sym32.
	(md_parse_option): Handle them.
	(usage): Document them.
	(s_mipsset): Handle ".set sym32" and ".set nosym32".
	(s_cpload, s_cpsetup): Use HAVE_64BIT_SYMBOLS instead of
	HAVE_64BIT_ADDRESSES to detect 64-bit values of "_gp".
	* doc/c-mips.texi: Document ".set sym32", ".set nosym32",
	-msym32 and -mno-sym32.
@
text
@	dla	$4,0xa800000000000000
	dla	$4,0xa800000000000000($3)
	dla	$4,0xffffffff80000000
	dla	$4,0xffffffff80000000($3)
	dla	$4,0x000000007fff7ff8
	dla	$4,0x000000007fff7ff8($3)
	dla	$4,0x000000007ffffff8
	dla	$4,0x000000007ffffff8($3)
	dla	$4,0x123456789abcdef0
	dla	$4,0x123456789abcdef0($3)

	dla	$4,small_comm
	dla	$4,small_comm($3)
	dla	$4,small_comm+3
	dla	$4,small_comm+3($3)

	dla	$4,big_comm
	dla	$4,big_comm($3)
	dla	$4,big_comm+3
	dla	$4,big_comm+3($3)

	dla	$4,small_data
	dla	$4,small_data($3)
	dla	$4,small_data+3
	dla	$4,small_data+3($3)

	dla	$4,big_data
	dla	$4,big_data($3)
	dla	$4,big_data+3
	dla	$4,big_data+3($3)

	dla	$4,extern
	dla	$4,extern($3)
	dla	$4,extern + 0x34000
	dla	$4,extern + 0x34000($3)
	dla	$4,extern - 0x34000
	dla	$4,extern - 0x34000($3)

	lw	$4,0xa800000000000000
	lw	$4,0xa800000000000000($3)
	lw	$4,0xffffffff80000000
	lw	$4,0xffffffff80000000($3)
	lw	$4,0x000000007fff7ff8
	lw	$4,0x000000007fff7ff8($3)
	lw	$4,0x000000007ffffff8
	lw	$4,0x000000007ffffff8($3)
	lw	$4,0x123456789abcdef0
	lw	$4,0x123456789abcdef0($3)

	lw	$4,small_comm
	lw	$4,small_comm($3)
	lw	$4,small_comm+3
	lw	$4,small_comm+3($3)

	lw	$4,big_comm
	lw	$4,big_comm($3)
	lw	$4,big_comm+3
	lw	$4,big_comm+3($3)

	lw	$4,small_data
	lw	$4,small_data($3)
	lw	$4,small_data+3
	lw	$4,small_data+3($3)

	lw	$4,big_data
	lw	$4,big_data($3)
	lw	$4,big_data+3
	lw	$4,big_data+3($3)

	lw	$4,extern
	lw	$4,extern($3)
	lw	$4,extern + 0x34000
	lw	$4,extern + 0x34000($3)
	lw	$4,extern - 0x34000
	lw	$4,extern - 0x34000($3)

	sw	$4,0xa800000000000000
	sw	$4,0xa800000000000000($3)
	sw	$4,0xffffffff80000000
	sw	$4,0xffffffff80000000($3)
	sw	$4,0x000000007fff7ff8
	sw	$4,0x000000007fff7ff8($3)
	sw	$4,0x000000007ffffff8
	sw	$4,0x000000007ffffff8($3)
	sw	$4,0x123456789abcdef0
	sw	$4,0x123456789abcdef0($3)

	sw	$4,small_comm
	sw	$4,small_comm($3)
	sw	$4,small_comm+3
	sw	$4,small_comm+3($3)

	sw	$4,big_comm
	sw	$4,big_comm($3)
	sw	$4,big_comm+3
	sw	$4,big_comm+3($3)

	sw	$4,small_data
	sw	$4,small_data($3)
	sw	$4,small_data+3
	sw	$4,small_data+3($3)

	sw	$4,big_data
	sw	$4,big_data($3)
	sw	$4,big_data+3
	sw	$4,big_data+3($3)

	sw	$4,extern
	sw	$4,extern($3)
	sw	$4,extern + 0x34000
	sw	$4,extern + 0x34000($3)
	sw	$4,extern - 0x34000
	sw	$4,extern - 0x34000($3)

	usw	$4,0xa800000000000000
	usw	$4,0xa800000000000000($3)
	usw	$4,0xffffffff80000000
	usw	$4,0xffffffff80000000($3)
	usw	$4,0x000000007fff7ff8
	usw	$4,0x000000007fff7ff8($3)
	usw	$4,0x000000007ffffff8
	usw	$4,0x000000007ffffff8($3)
	usw	$4,0x123456789abcdef0
	usw	$4,0x123456789abcdef0($3)

	usw	$4,small_comm
	usw	$4,small_comm($3)
	usw	$4,small_comm+3
	usw	$4,small_comm+3($3)

	usw	$4,big_comm
	usw	$4,big_comm($3)
	usw	$4,big_comm+3
	usw	$4,big_comm+3($3)

	usw	$4,small_data
	usw	$4,small_data($3)
	usw	$4,small_data+3
	usw	$4,small_data+3($3)

	usw	$4,big_data
	usw	$4,big_data($3)
	usw	$4,big_data+3
	usw	$4,big_data+3($3)

	usw	$4,extern
	usw	$4,extern($3)
	usw	$4,extern + 0x34000
	usw	$4,extern + 0x34000($3)
	usw	$4,extern - 0x34000
	usw	$4,extern - 0x34000($3)

	.set	nosym32
	dla	$4,extern
	lw	$4,extern
	sw	$4,extern
	usw	$4,extern

	.set	sym32
	dla	$4,extern
	lw	$4,extern
	sw	$4,extern
	usw	$4,extern

	.section	.sdata
	.globl	small_data
small_data:
	.fill	16

	.data
	.globl	big_data
big_data:
	.fill	16

	.comm	small_comm,8
	.comm	big_comm,16
@
