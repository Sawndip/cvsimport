head	1.1;
access;
symbols
	binutils-2_24-branch:1.1.0.32
	binutils-2_24-branchpoint:1.1
	binutils-2_21_1:1.1
	binutils-2_23_2:1.1
	binutils-2_23_1:1.1
	binutils-2_23:1.1
	binutils-2_23-branch:1.1.0.30
	binutils-2_23-branchpoint:1.1
	binutils-2_22_branch:1.1.0.28
	binutils-2_22:1.1
	binutils-2_22-branch:1.1.0.26
	binutils-2_22-branchpoint:1.1
	binutils-2_21:1.1
	binutils-2_21-branch:1.1.0.24
	binutils-2_21-branchpoint:1.1
	binutils-2_20_1:1.1
	binutils-2_20:1.1
	binutils-arc-20081103-branch:1.1.0.22
	binutils-arc-20081103-branchpoint:1.1
	binutils-2_20-branch:1.1.0.20
	binutils-2_20-branchpoint:1.1
	dje-cgen-play1-branch:1.1.0.18
	dje-cgen-play1-branchpoint:1.1
	arc-20081103-branch:1.1.0.16
	arc-20081103-branchpoint:1.1
	binutils-2_19_1:1.1
	binutils-2_19:1.1
	binutils-2_19-branch:1.1.0.14
	binutils-2_19-branchpoint:1.1
	binutils-2_18:1.1
	binutils-2_18-branch:1.1.0.12
	binutils-2_18-branchpoint:1.1
	binutils-csl-coldfire-4_1-32:1.1
	binutils-csl-sourcerygxx-4_1-32:1.1
	binutils-csl-innovasic-fido-3_4_4-33:1.1
	binutils-csl-sourcerygxx-3_4_4-32:1.1
	binutils-csl-coldfire-4_1-30:1.1
	binutils-csl-sourcerygxx-4_1-30:1.1
	binutils-csl-coldfire-4_1-28:1.1
	binutils-csl-sourcerygxx-4_1-29:1.1
	binutils-csl-sourcerygxx-4_1-28:1.1
	binutils-csl-arm-2006q3-27:1.1
	binutils-csl-sourcerygxx-4_1-27:1.1
	binutils-csl-arm-2006q3-26:1.1
	binutils-csl-sourcerygxx-4_1-26:1.1
	binutils-csl-sourcerygxx-4_1-25:1.1
	binutils-csl-sourcerygxx-4_1-24:1.1
	binutils-csl-sourcerygxx-4_1-23:1.1
	binutils-csl-sourcerygxx-4_1-21:1.1
	binutils-csl-arm-2006q3-21:1.1
	binutils-csl-sourcerygxx-4_1-22:1.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.1
	binutils-csl-sourcerygxx-4_1-20:1.1
	binutils-csl-arm-2006q3-19:1.1
	binutils-csl-sourcerygxx-4_1-19:1.1
	binutils-csl-sourcerygxx-4_1-18:1.1
	binutils-csl-renesas-4_1-9:1.1
	binutils-csl-sourcerygxx-3_4_4-25:1.1
	binutils-csl-renesas-4_1-8:1.1
	binutils-csl-renesas-4_1-7:1.1
	binutils-csl-renesas-4_1-6:1.1
	binutils-csl-sourcerygxx-4_1-17:1.1
	binutils-csl-sourcerygxx-4_1-14:1.1
	binutils-csl-sourcerygxx-4_1-15:1.1
	binutils-csl-sourcerygxx-4_1-13:1.1
	binutils-2_17:1.1
	binutils-csl-sourcerygxx-4_1-12:1.1
	binutils-csl-sourcerygxx-3_4_4-21:1.1
	binutils-csl-wrs-linux-3_4_4-24:1.1
	binutils-csl-wrs-linux-3_4_4-23:1.1
	binutils-csl-sourcerygxx-4_1-9:1.1
	binutils-csl-sourcerygxx-4_1-8:1.1
	binutils-csl-sourcerygxx-4_1-7:1.1
	binutils-csl-arm-2006q1-6:1.1
	binutils-csl-sourcerygxx-4_1-6:1.1
	binutils-csl-wrs-linux-3_4_4-22:1.1
	binutils-csl-coldfire-4_1-11:1.1
	binutils-csl-sourcerygxx-3_4_4-19:1.1
	binutils-csl-coldfire-4_1-10:1.1
	binutils-csl-sourcerygxx-4_1-5:1.1
	binutils-csl-sourcerygxx-4_1-4:1.1
	binutils-csl-wrs-linux-3_4_4-21:1.1
	binutils-csl-morpho-4_1-4:1.1
	binutils-csl-sourcerygxx-3_4_4-17:1.1
	binutils-csl-wrs-linux-3_4_4-20:1.1
	binutils-2_17-branch:1.1.0.10
	binutils-2_17-branchpoint:1.1
	binutils-csl-2_17-branch:1.1.0.8
	binutils-csl-2_17-branchpoint:1.1
	binutils-csl-gxxpro-3_4-branch:1.1.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.1
	binutils-2_16_1:1.1
	binutils-csl-arm-2005q1b:1.1
	binutils-2_16:1.1
	binutils-csl-arm-2005q1a:1.1
	binutils-csl-arm-2005q1-branch:1.1.0.4
	binutils-csl-arm-2005q1-branchpoint:1.1
	binutils-2_16-branch:1.1.0.2
	binutils-2_16-branchpoint:1.1
	binutils_latest_snapshot:1.1;
locks; strict;
comment	@# @;


1.1
date	2005.02.15.19.57.53;	author macro;	state Exp;
branches;
next	;


desc
@@


1.1
log
@bfd/:
2005-02-15  Nigel Stephens  <nigel@@mips.com>
            Maciej W. Rozycki  <macro@@mips.com>

	* elf32-mips.c (elf_mips16_howto_table_rel): New array for MIPS16
	reloc howtos.  Add R_MIPS16_HI16 and R_MIPS16_LO16 relocs and
	R_MIPS16_GOT16 and R_MIPS16_CALL16 placeholders.
	(elf_mips16_jump_howto): Move into elf_mips16_howto_table_rel.
	(elf_mips16_gprel_howto): Likewise.  Redefine src_mask and
	dst_mask.
	(mips16_gprel_reloc): Remove bit shuffling; call
	_bfd_mips16_elf_reloc_unshuffle(), _bfd_mips_elf_gprel16_with_gp()
	and _bfd_mips16_elf_reloc_shuffle() instead.
	(mips16_reloc_map): New reloc map for MIPS16 relocs.
	(bfd_elf32_bfd_reloc_type_lookup): Use mips16_reloc_map for MIPS16
	relocs.
	(mips_elf32_rtype_to_howto): Fetch MIPS16 howtos from
	elf_mips16_howto_table_rel.
	* elf64-mips.c (mips16_elf64_howto_table_rel): New array for
	MIPS16 REL reloc howtos.  Add R_MIPS16_HI16 and R_MIPS16_LO16
	relocs and R_MIPS16_GOT16 and R_MIPS16_CALL16 placeholders.
	(elf_mips16_jump_howto): Move into mips16_elf64_howto_table_rel.
	(elf_mips16_gprel_howto): Likewise.  Redefine src_mask and
	dst_mask.
	(mips16_elf64_howto_table_rela): New array for MIPS16 RELA
	reloc howtos.  Add R_MIPS16_26, R_MIPS16_GPREL, R_MIPS16_HI16 and
	R_MIPS16_LO16 relocs and R_MIPS16_GOT16 and R_MIPS16_CALL16
	placeholders.
	(mips16_gprel_reloc): Remove bit shuffling; call
	_bfd_mips16_elf_reloc_unshuffle(), _bfd_mips_elf_gprel16_with_gp()
	and _bfd_mips16_elf_reloc_shuffle() instead.
	(mips16_reloc_map): New reloc map for MIPS16 relocs.
	(bfd_elf64_bfd_reloc_type_lookup): Use mips16_reloc_map for MIPS16
	relocs.
	(mips_elf64_rtype_to_howto): Fetch MIPS16 howtos from
	mips16_elf64_howto_table_rela or mips16_elf64_howto_table_rel.
	* elfn32-mips.c (elf_mips16_howto_table_rel): New array for MIPS16
	REL reloc howtos.  Add R_MIPS16_HI16 and R_MIPS16_LO16 relocs and
	R_MIPS16_GOT16 and R_MIPS16_CALL16 placeholders.
	(elf_mips16_jump_howto): Move into elf_mips16_howto_table_rel.
	(elf_mips16_gprel_howto): Likewise.  Redefine src_mask and
	dst_mask.
	(mips16_gprel_reloc): Remove bit shuffling; call
	_bfd_mips16_elf_reloc_unshuffle(), _bfd_mips_elf_gprel16_with_gp()
	and _bfd_mips16_elf_reloc_shuffle() instead.
	(mips16_reloc_map): New reloc map for MIPS16 relocs.
	(bfd_elf32_bfd_reloc_type_lookup): Use mips16_reloc_map for MIPS16
	relocs.
	(mips_elf_n32_rtype_to_howto): Fetch MIPS16 howtos from
	elf_mips16_howto_table_rela or elf_mips16_howto_table_rel.
	* elfxx-mips.c (_bfd_mips16_elf_reloc_unshuffle): New function to
	handle bit shuffling for MIPS16 relocs.
	(_bfd_mips16_elf_reloc_shuffle): Likewise.
	(_bfd_mips_elf_lo16_reloc): Use _bfd_mips16_elf_reloc_unshuffle()
	and _bfd_mips16_elf_reloc_shuffle().
	(_bfd_mips_elf_generic_reloc): Likewise.
	(mips_elf_calculate_relocation): Likewise.  Handle R_MIPS16_HI16
	and R_MIPS16_LO16.
	(mips_elf_obtain_contents): Remove bit shuffling.
	(mips_elf_perform_relocation): Likewise; call
	_bfd_mips16_elf_reloc_unshuffle() and _bfd_mips16_elf_reloc_shuffle()
	instead.
	(_bfd_mips_elf_relocate_section): Likewise.  Handle R_MIPS16_HI16
	and R_MIPS16_LO16.
	* elfxx-mips.h (_bfd_mips16_elf_reloc_unshuffle): Declare.
	(_bfd_mips16_elf_reloc_shuffle): Likewise.
	* reloc.c (BFD_RELOC_MIPS16_HI16): New reloc.
	(BFD_RELOC_MIPS16_HI16_S): Likewise.
	(BFD_RELOC_MIPS16_LO16): Likewise.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.

gas/:
2005-02-15  Nigel Stephens  <nigel@@mips.com>
            Maciej W. Rozycki  <macro@@mips.com>

	* config/tc-mips.c (reloc_needs_lo_p): Handle
	BFD_RELOC_MIPS16_HI16_S.
	(fixup_has_matching_lo_p): Handle BFD_RELOC_MIPS16_LO16.
	(append_insn): Add BFD_RELOC_MIPS16_GPREL, BFD_RELOC_MIPS16_HI16_S
	and BFD_RELOC_MIPS16_LO16 to relocs to suppress overflow
	complaints on.
	(mips16_ip): Resolve BFD_RELOC_MIPS16_HI16_S,
	BFD_RELOC_MIPS16_HI16 and BFD_RELOC_MIPS16_LO16 for constants.
	Call my_getSmallExpression() to parse percent operators.
	(percent_op_match, mips_percent_op): Separate definitions.
	(mips16_percent_op): Define percent operators for the MIPS16 mode.
	(parse_relocation): Handle the MIPS16 mode using
	mips16_percent_op.
	(md_apply_fix3): Handle BFD_RELOC_MIPS16_HI16,
	BFD_RELOC_MIPS16_HI16_S and BFD_RELOC_MIPS16_LO16.

gas/testsuite/:
2005-02-15  Nigel Stephens  <nigel@@mips.com>
            Maciej W. Rozycki  <macro@@mips.com>

	* gas/mips/mips16-hilo.d: New test for the R_MIPS16_HI16 and
	R_MIPS16_LO16 relocs.
	* gas/mips/mips16-hilo-n32.d: Likewise, for the n32 ABI.
	* gas/mips/mips16-hilo.s: Source for the new tests.
	* gas/mips/mips.exp: Run the new tests.

include/:
2005-02-15  Nigel Stephens  <nigel@@mips.com>
            Maciej W. Rozycki  <macro@@mips.com>

	* elf/mips.h (R_MIPS16_GOT16): New reloc code.
	(R_MIPS16_CALL16): Likewise.
	(R_MIPS16_HI16): Likewise.
	(R_MIPS16_LO16): Likewise.
	(R_MIPS16_min): New fake reloc code.
	(R_MIPS16_max): Likewise.

ld/testsuite/:
2005-02-15  Nigel Stephens  <nigel@@mips.com>
            Maciej W. Rozycki  <macro@@mips.com>

	* ld-mips-elf/mips16-hilo.d: New test for the R_MIPS16_HI16 and
	R_MIPS16_LO16 relocs.
	* ld-mips-elf/mips16-hilo-n32.d: Likewise, for the n32 ABI.
	* ld-mips-elf/mips16-hilo.s: Auxiliary source for the new tests.
	* ld-mips-elf/mips-elf.exp: Run the new tests.
@
text
@# Source file used to test li/addi on MIPS16
	
	.set	mips16
	
	.data
data_label:
	.word	0
data_label2:
	.word	0
	
	.extern big_external_data_label,1000
	.extern small_external_data_label,1
	.comm big_external_common,1000
	.comm small_external_common,1
	.lcomm big_local_common,1000
	.lcomm small_local_common,1
	
	.text
stuff:		
	li	$4,%hi(0)
	sll	$4,16
	addiu	$4,%lo(0)
	li	$4,%hi(data_label)
	sll	$4,16
	addiu	$4,%lo(data_label)
	li	$4,%hi(data_label2)
	sll	$4,16
	addiu	$4,%lo(data_label2)
	li	$4,%hi(big_external_data_label)
	sll	$4,16
	addiu	$4,%lo(big_external_data_label)
	li	$4,%hi(small_external_data_label)
	sll	$4,16
	addiu	$4,%lo(small_external_data_label)
	li	$4,%hi(big_external_common)
	sll	$4,16
	addiu	$4,%lo(big_external_common)
	li	$4,%hi(small_external_common)
	sll	$4,16
	addiu	$4,%lo(small_external_common)
	li	$4,%hi(big_local_common)
	sll	$4,16
	addiu	$4,%lo(big_local_common)
	li	$4,%hi(small_local_common)
	sll	$4,16
	addiu	$4,%lo(small_local_common)
	li	$4,%hi(1)
	sll	$4,16
	addiu	$4,%lo(1)
	li	$4,%hi(data_label+1)
	sll	$4,16
	addiu	$4,%lo(data_label+1)
	li	$4,%hi(data_label2+1)
	sll	$4,16
	addiu	$4,%lo(data_label2+1)
	li	$4,%hi(big_external_data_label+1)
	sll	$4,16
	addiu	$4,%lo(big_external_data_label+1)
	li	$4,%hi(small_external_data_label+1)
	sll	$4,16
	addiu	$4,%lo(small_external_data_label+1)
	li	$4,%hi(big_external_common+1)
	sll	$4,16
	addiu	$4,%lo(big_external_common+1)
	li	$4,%hi(small_external_common+1)
	sll	$4,16
	addiu	$4,%lo(small_external_common+1)
	li	$4,%hi(big_local_common+1)
	sll	$4,16
	addiu	$4,%lo(big_local_common+1)
	li	$4,%hi(small_local_common+1)
	sll	$4,16
	addiu	$4,%lo(small_local_common+1)
	li	$4,%hi(0x8000)
	sll	$4,16
	addiu	$4,%lo(0x8000)
	li	$4,%hi(data_label+0x8000)
	sll	$4,16
	addiu	$4,%lo(data_label+0x8000)
	li	$4,%hi(data_label2+0x8000)
	sll	$4,16
	addiu	$4,%lo(data_label2+0x8000)
	li	$4,%hi(big_external_data_label+0x8000)
	sll	$4,16
	addiu	$4,%lo(big_external_data_label+0x8000)
	li	$4,%hi(small_external_data_label+0x8000)
	sll	$4,16
	addiu	$4,%lo(small_external_data_label+0x8000)
	li	$4,%hi(big_external_common+0x8000)
	sll	$4,16
	addiu	$4,%lo(big_external_common+0x8000)
	li	$4,%hi(small_external_common+0x8000)
	sll	$4,16
	addiu	$4,%lo(small_external_common+0x8000)
	li	$4,%hi(big_local_common+0x8000)
	sll	$4,16
	addiu	$4,%lo(big_local_common+0x8000)
	li	$4,%hi(small_local_common+0x8000)
	sll	$4,16
	addiu	$4,%lo(small_local_common+0x8000)
	li	$4,%hi(-0x8000)
	sll	$4,16
	addiu	$4,%lo(-0x8000)
	li	$4,%hi(data_label-0x8000)
	sll	$4,16
	addiu	$4,%lo(data_label-0x8000)
	li	$4,%hi(data_label2-0x8000)
	sll	$4,16
	addiu	$4,%lo(data_label2-0x8000)
	li	$4,%hi(big_external_data_label-0x8000)
	sll	$4,16
	addiu	$4,%lo(big_external_data_label-0x8000)
	li	$4,%hi(small_external_data_label-0x8000)
	sll	$4,16
	addiu	$4,%lo(small_external_data_label-0x8000)
	li	$4,%hi(big_external_common-0x8000)
	sll	$4,16
	addiu	$4,%lo(big_external_common-0x8000)
	li	$4,%hi(small_external_common-0x8000)
	sll	$4,16
	addiu	$4,%lo(small_external_common-0x8000)
	li	$4,%hi(big_local_common-0x8000)
	sll	$4,16
	addiu	$4,%lo(big_local_common-0x8000)
	li	$4,%hi(small_local_common-0x8000)
	sll	$4,16
	addiu	$4,%lo(small_local_common-0x8000)
	li	$4,%hi(0x10000)
	sll	$4,16
	addiu	$4,%lo(0x10000)
	li	$4,%hi(data_label+0x10000)
	sll	$4,16
	addiu	$4,%lo(data_label+0x10000)
	li	$4,%hi(data_label2+0x10000)
	sll	$4,16
	addiu	$4,%lo(data_label2+0x10000)
	li	$4,%hi(big_external_data_label+0x10000)
	sll	$4,16
	addiu	$4,%lo(big_external_data_label+0x10000)
	li	$4,%hi(small_external_data_label+0x10000)
	sll	$4,16
	addiu	$4,%lo(small_external_data_label+0x10000)
	li	$4,%hi(big_external_common+0x10000)
	sll	$4,16
	addiu	$4,%lo(big_external_common+0x10000)
	li	$4,%hi(small_external_common+0x10000)
	sll	$4,16
	addiu	$4,%lo(small_external_common+0x10000)
	li	$4,%hi(big_local_common+0x10000)
	sll	$4,16
	addiu	$4,%lo(big_local_common+0x10000)
	li	$4,%hi(small_local_common+0x10000)
	sll	$4,16
	addiu	$4,%lo(small_local_common+0x10000)
	li	$4,%hi(0x1a5a5)
	sll	$4,16
	addiu	$4,%lo(0x1a5a5)
	li	$4,%hi(data_label+0x1a5a5)
	sll	$4,16
	addiu	$4,%lo(data_label+0x1a5a5)
	li	$4,%hi(data_label2+0x1a5a5)
	sll	$4,16
	addiu	$4,%lo(data_label2+0x1a5a5)
	li	$4,%hi(big_external_data_label+0x1a5a5)
	sll	$4,16
	addiu	$4,%lo(big_external_data_label+0x1a5a5)
	li	$4,%hi(small_external_data_label+0x1a5a5)
	sll	$4,16
	addiu	$4,%lo(small_external_data_label+0x1a5a5)
	li	$4,%hi(big_external_common+0x1a5a5)
	sll	$4,16
	addiu	$4,%lo(big_external_common+0x1a5a5)
	li	$4,%hi(small_external_common+0x1a5a5)
	sll	$4,16
	addiu	$4,%lo(small_external_common+0x1a5a5)
	li	$4,%hi(big_local_common+0x1a5a5)
	sll	$4,16
	addiu	$4,%lo(big_local_common+0x1a5a5)
	li	$4,%hi(small_local_common+0x1a5a5)
	sll	$4,16
	addiu	$4,%lo(small_local_common+0x1a5a5)
	li	$5,%hi(0)
	sll	$5,16
	lw	$4,%hi(0)($5)
	li	$5,%hi(data_label)
	sll	$5,16
	lw	$4,%hi(data_label)($5)
	li	$5,%hi(data_label2)
	sll	$5,16
	lw	$4,%hi(data_label2)($5)
	li	$5,%hi(big_external_data_label)
	sll	$5,16
	lw	$4,%lo(big_external_data_label)($5)
	li	$5,%hi(small_external_data_label)
	sll	$5,16
	lw	$4,%lo(small_external_data_label)($5)
	li	$5,%hi(big_external_common)
	sll	$5,16
	lw	$4,%lo(big_external_common)($5)
	li	$5,%hi(small_external_common)
	sll	$5,16
	lw	$4,%lo(small_external_common)($5)
	li	$5,%hi(big_local_common)
	sll	$5,16
	lw	$4,%lo(big_local_common)($5)
	li	$5,%hi(small_local_common)
	sll	$5,16
	lw	$4,%lo(small_local_common)($5)
	li	$5,%hi(1)
	sll	$5,16
	lw	$4,%lo(1)($5)
	li	$5,%hi(data_label+1)
	sll	$5,16
	lw	$4,%lo(data_label+1)($5)
	li	$5,%hi(data_label2+1)
	sll	$5,16
	lw	$4,%lo(data_label2+1)($5)
	li	$5,%hi(big_external_data_label+1)
	sll	$5,16
	lw	$4,%lo(big_external_data_label+1)($5)
	li	$5,%hi(small_external_data_label+1)
	sll	$5,16
	lw	$4,%lo(small_external_data_label+1)($5)
	li	$5,%hi(big_external_common+1)
	sll	$5,16
	lw	$4,%lo(big_external_common+1)($5)
	li	$5,%hi(small_external_common+1)
	sll	$5,16
	lw	$4,%lo(small_external_common+1)($5)
	li	$5,%hi(big_local_common+1)
	sll	$5,16
	lw	$4,%lo(big_local_common+1)($5)
	li	$5,%hi(small_local_common+1)
	sll	$5,16
	lw	$4,%lo(small_local_common+1)($5)
	li	$5,%hi(0x8000)
	sll	$5,16
	lw	$4,%lo(0x8000)($5)
	li	$5,%hi(data_label+0x8000)
	sll	$5,16
	lw	$4,%lo(data_label+0x8000)($5)
	li	$5,%hi(data_label2+0x8000)
	sll	$5,16
	lw	$4,%lo(data_label2+0x8000)($5)
	li	$5,%hi(big_external_data_label+0x8000)
	sll	$5,16
	lw	$4,%lo(big_external_data_label+0x8000)($5)
	li	$5,%hi(small_external_data_label+0x8000)
	sll	$5,16
	lw	$4,%lo(small_external_data_label+0x8000)($5)
	li	$5,%hi(big_external_common+0x8000)
	sll	$5,16
	lw	$4,%lo(big_external_common+0x8000)($5)
	li	$5,%hi(small_external_common+0x8000)
	sll	$5,16
	lw	$4,%lo(small_external_common+0x8000)($5)
	li	$5,%hi(big_local_common+0x8000)
	sll	$5,16
	lw	$4,%lo(big_local_common+0x8000)($5)
	li	$5,%hi(small_local_common+0x8000)
	sll	$5,16
	lw	$4,%lo(small_local_common+0x8000)($5)
	li	$5,%hi(-0x8000)
	sll	$5,16
	lw	$4,%lo(-0x8000)($5)
	li	$5,%hi(data_label-0x8000)
	sll	$5,16
	lw	$4,%lo(data_label-0x8000)($5)
	li	$5,%hi(data_label2-0x8000)
	sll	$5,16
	lw	$4,%lo(data_label2-0x8000)($5)
	li	$5,%hi(big_external_data_label-0x8000)
	sll	$5,16
	lw	$4,%lo(big_external_data_label-0x8000)($5)
	li	$5,%hi(small_external_data_label-0x8000)
	sll	$5,16
	lw	$4,%lo(small_external_data_label-0x8000)($5)
	li	$5,%hi(big_external_common-0x8000)
	sll	$5,16
	lw	$4,%lo(big_external_common-0x8000)($5)
	li	$5,%hi(small_external_common-0x8000)
	sll	$5,16
	lw	$4,%lo(small_external_common-0x8000)($5)
	li	$5,%hi(big_local_common-0x8000)
	sll	$5,16
	lw	$4,%lo(big_local_common-0x8000)($5)
	li	$5,%hi(small_local_common-0x8000)
	sll	$5,16
	lw	$4,%lo(small_local_common-0x8000)($5)
	li	$5,%hi(0x10000)
	sll	$5,16
	lw	$4,%lo(0x10000)($5)
	li	$5,%hi(data_label+0x10000)
	sll	$5,16
	lw	$4,%lo(data_label+0x10000)($5)
	li	$5,%hi(data_label2+0x10000)
	sll	$5,16
	lw	$4,%lo(data_label2+0x10000)($5)
	li	$5,%hi(big_external_data_label+0x10000)
	sll	$5,16
	lw	$4,%lo(big_external_data_label+0x10000)($5)
	li	$5,%hi(small_external_data_label+0x10000)
	sll	$5,16
	lw	$4,%lo(small_external_data_label+0x10000)($5)
	li	$5,%hi(big_external_common+0x10000)
	sll	$5,16
	lw	$4,%lo(big_external_common+0x10000)($5)
	li	$5,%hi(small_external_common+0x10000)
	sll	$5,16
	lw	$4,%lo(small_external_common+0x10000)($5)
	li	$5,%hi(big_local_common+0x10000)
	sll	$5,16
	lw	$4,%lo(big_local_common+0x10000)($5)
	li	$5,%hi(small_local_common+0x10000)
	sll	$5,16
	lw	$4,%lo(small_local_common+0x10000)($5)
	li	$5,%hi(0x1a5a5)
	sll	$5,16
	lw	$4,%lo(0x1a5a5)($5)
	li	$5,%hi(data_label+0x1a5a5)
	sll	$5,16
	lw	$4,%lo(data_label+0x1a5a5)($5)
	li	$5,%hi(data_label2+0x1a5a5)
	sll	$5,16
	lw	$4,%lo(data_label2+0x1a5a5)($5)
	li	$5,%hi(big_external_data_label+0x1a5a5)
	sll	$5,16
	lw	$4,%lo(big_external_data_label+0x1a5a5)($5)
	li	$5,%hi(small_external_data_label+0x1a5a5)
	sll	$5,16
	lw	$4,%lo(small_external_data_label+0x1a5a5)($5)
	li	$5,%hi(big_external_common+0x1a5a5)
	sll	$5,16
	lw	$4,%lo(big_external_common+0x1a5a5)($5)
	li	$5,%hi(small_external_common+0x1a5a5)
	sll	$5,16
	lw	$4,%lo(small_external_common+0x1a5a5)($5)
	li	$5,%hi(big_local_common+0x1a5a5)
	sll	$5,16
	lw	$4,%lo(big_local_common+0x1a5a5)($5)
	li	$5,%hi(small_local_common+0x1a5a5)
	sll	$5,16
	lw	$4,%lo(small_local_common+0x1a5a5)($5)

# align section end to 16-byte boundary for easier testing on multiple targets
	.p2align 4
@
