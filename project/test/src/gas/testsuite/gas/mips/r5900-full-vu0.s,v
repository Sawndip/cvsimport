head	1.2;
access;
symbols
	binutils-2_24-branch:1.2.0.2
	binutils-2_24-branchpoint:1.2
	binutils_latest_snapshot:1.2;
locks; strict;
comment	@# @;


1.2
date	2013.08.06.19.27.07;	author rsandifo;	state Exp;
branches;
next	1.1;

1.1
date	2013.08.04.07.31.39;	author rsandifo;	state Exp;
branches;
next	;


desc
@@


1.2
log
@opcodes/
2013-08-06  Jürgen Urban  <JuergenUrban@@gmx.de>

	* mips-opc.c (mips_builtin_opcodes): Add a suffixless version of
	VCLIPW.

gas/
2013-08-06  Jürgen Urban  <JuergenUrban@@gmx.de>

	* config/tc-mips.c (match_vu0_suffix_operand): Allow single-channel
	suffixes to be elided too.
	(mips_lookup_insn): Don't reject INSN2_VU0_CHANNEL_SUFFIX here.
	(mips_ip): Assume .xyzw if no VU0 suffix is specified.  Allow +N
	to be omitted too.

gas/testsuite/
2013-08-06  Jürgen Urban  <JuergenUrban@@gmx.de>

	* gas/mips/r5900-error-vu0.s, gas/mips/r5900-error-vu0.l,
	gas/mips/r5900-full-vu0.s, gas/mips/r5900-full-vu0.d: Allow
	single-channel suffixes to be elided.
@
text
@	.set noreorder
	.set noat

	.globl text_label .text
text_label:

	# VU Macromode instruction set
	vabs.xyzw	$vf0xyzw,$vf31xyzw
	vadd.xyzw	$vf10xyzw,$vf31xyzw,$vf0xyzw
	vaddi.xyzw	$vf10xyzw,$vf31xyzw,$I
	vaddq.xyzw	$vf10xyzw,$vf31xyzw,$Q
	vaddw.xyzw	$vf10xyzw,$vf31xyzw,$vf1w
	vaddx.xyzw	$vf10xyzw,$vf31xyzw,$vf1x
	vaddy.xyzw	$vf10xyzw,$vf31xyzw,$vf1y
	vaddz.xyzw	$vf10xyzw,$vf31xyzw,$vf1z
	vadda.xyzw	$ACCxyzw,$vf0xyzw,$vf31xyzw
	vaddai.xyzw	$ACCxyzw,$vf31xyzw,$I
	vaddaq.xyzw	$ACCxyzw,$vf31xyzw,$Q
	vaddaw.xyzw	$ACCxyzw,$vf31xyzw,$vf1w
	vaddax.xyzw	$ACCxyzw,$vf31xyzw,$vf1x
	vadday.xyzw	$ACCxyzw,$vf31xyzw,$vf1y
	vaddaz.xyzw	$ACCxyzw,$vf31xyzw,$vf1z
	vcallms	0x0
	vcallms	0x340
	vcallms	0xff8
	vcallmsr	$vi27
	vclipw.xyz	$vf31xyz,$vf1w
	vclipw		$vf31xyz,$vf1w
	vdiv		$Q,$vf1y,$vf11x
	vftoi0.xyzw	$vf0xyzw,$vf31xyzw
	vftoi4.xyzw	$vf0xyzw,$vf31xyzw
	vftoi12.xyzw	$vf0xyzw,$vf31xyzw
	vftoi15.xyzw	$vf0xyzw,$vf31xyzw
	viadd	$vi1,$vi15,$vi0
	viaddi	$vi0,$vi15,-1
	viand	$vi1,$vi15,$vi0
	vilwr.w	$vi0,($vi15)
	vilwr.x	$vi0,($vi15)
	vilwr.y	$vi0,($vi15)
	vilwr.z	$vi0,($vi15)
	vior	$vi1,$vi15,$vi0
	viswr.w	$vi0,($vi15)
	viswr.x	$vi0,($vi15)
	viswr.y	$vi0,($vi15)
	viswr.z	$vi0,($vi15)
	visub	$vi1,$vi15,$vi0
	vitof0.xyzw	$vf0xyzw,$vf31xyzw
	vitof4.xyzw	$vf0xyzw,$vf31xyzw
	vitof12.xyzw	$vf0xyzw,$vf31xyzw
	vitof15.xyzw	$vf0xyzw,$vf31xyzw
	vlqd.xyzw	$vf0xyzw,(--$vi15)
	vlqi.xyzw	$vf0xyzw,($vi15++)
	vmadd.xyzw	$vf10xyzw,$vf31xyzw,$vf0xyzw
	vmaddi.xyzw	$vf10xyzw,$vf31xyzw,$I
	vmaddq.xyzw	$vf10xyzw,$vf31xyzw,$Q
	vmaddw.xyzw	$vf10xyzw,$vf31xyzw,$vf1w
	vmaddx.xyzw	$vf10xyzw,$vf31xyzw,$vf1x
	vmaddy.xyzw	$vf10xyzw,$vf31xyzw,$vf1y
	vmaddz.xyzw	$vf10xyzw,$vf31xyzw,$vf1z
	vmaddz		$vf6, $vf3, $vf5
	vmadda.xyzw	$ACCxyzw,$vf31xyzw,$vf0xyzw
	vmaddai.xyzw	$ACCxyzw,$vf31xyzw,$I
	vmaddaq.xyzw	$ACCxyzw,$vf31xyzw,$Q
	vmaddaw.xyzw	$ACCxyzw,$vf31xyzw,$vf1w
	vmaddax.xyzw	$ACCxyzw,$vf31xyzw,$vf1x
	vmaddax		$ACC, $vf1, $vf5
	vmadday.xyzw	$ACCxyzw,$vf31xyzw,$vf1y
	vmadday		$ACC, $vf2, $vf5
	vmaddaz.xyzw	$ACCxyzw,$vf31xyzw,$vf1z
	vmax.xyzw	$vf10xyzw,$vf31xyzw,$vf0xyzw
	vmaxi.xyzw	$vf10xyzw,$vf31xyzw,$I
	vmaxw.xyzw	$vf10xyzw,$vf31xyzw,$vf1w
	vmaxx.xyzw	$vf10xyzw,$vf31xyzw,$vf1x
	vmaxy.xyzw	$vf10xyzw,$vf31xyzw,$vf1y
	vmaxz.xyzw	$vf10xyzw,$vf31xyzw,$vf1z
	vmfir.xyzw	$vf0xyzw,$vi15
	vmini.xyzw	$vf10xyzw,$vf31xyzw,$vf0xyzw
	vminii.xyzw	$vf10xyzw,$vf31xyzw,$I
	vminiw.xyzw	$vf10xyzw,$vf31xyzw,$vf1w
	vminix.xyzw	$vf10xyzw,$vf31xyzw,$vf1x
	vminiy.xyzw	$vf10xyzw,$vf31xyzw,$vf1y
	vminiz.xyzw	$vf10xyzw,$vf31xyzw,$vf1z
	vmove.xyzw	$vf0xyzw,$vf31xyzw
	vmr32.xyzw	$vf0xyzw,$vf31xyzw
	vmsub.xyzw	$vf10xyzw,$vf31xyzw,$vf0xyzw
	vmsubi.xyzw	$vf10xyzw,$vf31xyzw,$I
	vmsubq.xyzw	$vf10xyzw,$vf31xyzw,$Q
	vmsubw.xyzw	$vf10xyzw,$vf31xyzw,$vf1w
	vmsubx.xyzw	$vf10xyzw,$vf31xyzw,$vf1x
	vmsuby.xyzw	$vf10xyzw,$vf31xyzw,$vf1y
	vmsubz.xyzw	$vf10xyzw,$vf31xyzw,$vf1z
	vmsuba.xyzw	$ACCxyzw,$vf0xyzw,$vf31xyzw
	vmsubai.xyzw	$ACCxyzw,$vf31xyzw,$I
	vmsubaq.xyzw	$ACCxyzw,$vf31xyzw,$Q
	vmsubaw.xyzw	$ACCxyzw,$vf31xyzw,$vf1w
	vmsubax.xyzw	$ACCxyzw,$vf31xyzw,$vf1x
	vmsubay.xyzw	$ACCxyzw,$vf31xyzw,$vf1y
	vmsubaz.xyzw	$ACCxyzw,$vf31xyzw,$vf1z
	vmtir	$vi0,$vf1z
	vmul.xyzw	$vf10xyzw,$vf31xyzw,$vf0xyzw
	vmuli.xyzw	$vf10xyzw,$vf31xyzw,$I
	vmulq.xyzw	$vf10xyzw,$vf31xyzw,$Q
	vmulw.xyzw	$vf10xyzw,$vf31xyzw,$vf1w
	vmulx.xyzw	$vf10xyzw,$vf31xyzw,$vf1x
	vmuly.xyzw	$vf10xyzw,$vf31xyzw,$vf1y
	vmulz.xyzw	$vf10xyzw,$vf31xyzw,$vf1z
	vmula.xyzw	$ACCxyzw,$vf31xyzw,$vf0xyzw
	vmulai.xyzw	$ACCxyzw,$vf31xyzw,$I
	vmulaq.xyzw	$ACCxyzw,$vf31xyzw,$Q
	vmulaw.xyzw	$ACCxyzw,$vf31xyzw,$vf1w
	vmulaw		$ACC, $vf4, $vf0
	vmulax.xyzw	$ACCxyzw,$vf31xyzw,$vf1x
	vmulay.xyzw	$ACCxyzw,$vf31xyzw,$vf1y
	vmulaz.xyzw	$ACCxyzw,$vf31xyzw,$vf1z
	vnop
	vopmula.xyz	$ACCxyz,$vf31xyz,$vf0xyz
	vopmsub.xyz	$vf10xyz,$vf31xyz,$vf0xyz
	vrget.xyzw	$vf0xyzw,$R
	vrinit	$R,$vf1w
	vrnext.xyzw	$vf0xyzw,$R
	vrsqrt	$Q,$vf1w,$vf11x
	vrxor	$R,$vf1x
	vsqd.xyzw	$vf31xyzw,(--$vi0)
	vsqi.xyzw	$vf31xyzw,($vi0++)
	vsqrt	$Q,$vf11z
	vsub.xyzw	$vf10xyzw,$vf31xyzw,$vf0xyzw
	vsubi.xyzw	$vf10xyzw,$vf31xyzw,$I
	vsubq.xyzw	$vf10xyzw,$vf31xyzw,$Q
	vsubw.xyzw	$vf10xyzw,$vf31xyzw,$vf1w
	vsubx.xyzw	$vf10xyzw,$vf31xyzw,$vf1x
	vsuby.xyzw	$vf10xyzw,$vf31xyzw,$vf1y
	vsubz.xyzw	$vf10xyzw,$vf31xyzw,$vf1z
	vsuba.xyzw	$ACCxyzw,$vf31xyzw,$vf0xyzw
	vsubai.xyzw	$ACCxyzw,$vf31xyzw,$I
	vsubaq.xyzw	$ACCxyzw,$vf31xyzw,$Q
	vsubaw.xyzw	$ACCxyzw,$vf31xyzw,$vf1w
	vsubax.xyzw	$ACCxyzw,$vf31xyzw,$vf1x
	vsubay.xyzw	$ACCxyzw,$vf31xyzw,$vf1y
	vsubaz.xyzw	$ACCxyzw,$vf31xyzw,$vf1z
	vwaitq

	# Implicit suffixes
	vadd.xyzw	$vf10,$vf31,$vf0
	vadd.xy	$vf10,$vf31,$vf0
	vadd.xyzw	$vf10,$vf31,$vf0
	vlqi.xy	$vf0,($vi15++)

	# VU floating point registers
	vadd.xyzw	$vf0,$vf1,$vf2
	vadd.xyzw	$vf3,$vf4,$vf5
	vadd.xyzw	$vf6,$vf7,$vf8
	vadd.xyzw	$vf9,$vf10,$vf11
	vadd.xyzw	$vf12,$vf13,$vf14
	vadd.xyzw	$vf15,$vf16,$vf17
	vadd.xyzw	$vf18,$vf19,$vf20
	vadd.xyzw	$vf21,$vf22,$vf23
	vadd.xyzw	$vf24,$vf25,$vf26
	vadd.xyzw	$vf27,$vf28,$vf29
	vadd.xyzw	$vf30,$vf31,$vf0

	# VU integer registers
	viadd	$vi0,$vi1,$vi2
	viadd	$vi3,$vi4,$vi5
	viadd	$vi6,$vi7,$vi8
	viadd	$vi9,$vi10,$vi11
	viadd	$vi12,$vi13,$vi14
	viadd	$vi15,$vi16,$vi17
	viadd	$vi18,$vi19,$vi20
	viadd	$vi21,$vi22,$vi23
	viadd	$vi24,$vi25,$vi26
	viadd	$vi27,$vi28,$vi29
	viadd	$vi30,$vi31,$vi0

	# Floating point transfer to VU
	lqc2	$0,0($0)
	lqc2	$1, 0x7fff($1)
	lqc2	$8, -0x8000($8)
	lqc2	$31, -1($31)

	# Floating point transfer from VU
	sqc2	$0,0($0)
	sqc2	$1, 0x7fff($1)
	sqc2	$8, -0x8000($8)
	sqc2	$31, -1($31)

	# Integer transfer from VU
	cfc2	$0,$0
	cfc2	$0,$31
	cfc2.i	$0,$0
	cfc2.i	$0,$31
	cfc2.ni	$0,$0
	cfc2.ni	$0,$31

	# Integer transfer to VU
	ctc2	$0,$0
	ctc2	$0,$31
	ctc2.i	$0,$0
	ctc2.i	$0,$31
	ctc2.ni	$0,$0
	ctc2.ni	$0,$31

	# Floating point transfer from VU
	qmfc2	$0,$0
	qmfc2	$0,$31
	qmfc2.i	$0,$0
	qmfc2.i	$0,$31
	qmfc2.ni	$0,$0
	qmfc2.ni	$0,$31

	# Floating point transfer to VU
	qmtc2	$0,$0
	qmtc2	$0,$31
	qmtc2.i	$0,$0
	qmtc2.i	$0,$31
	qmtc2.ni	$0,$0
	qmtc2.ni	$0,$31

# Force at least 8 (non-delay-slot) zero bytes, to make 'objdump' print ...
      .space  8
@


1.1
log
@include/opcode/
2013-08-04  Jürgen Urban  <JuergenUrban@@gmx.de>
	    Richard Sandiford  <rdsandiford@@googlemail.com>

	* mips.h: Document new VU0 operand characters.
	(OP_VU0_SUFFIX, OP_VU0_MATCH_SUFFIX): New mips_operand_types.
	(OP_REG_VF, OP_REG_VI, OP_REG_R5900_I, OP_REG_R5900_Q, OP_REG_R5900_R)
	(OP_REG_R5900_ACC): New mips_reg_operand_types.
	(INSN2_VU0_CHANNEL_SUFFIX): New macro.
	(mips_vu0_channel_mask): Declare.

opcodes/
2013-08-04  Jürgen Urban  <JuergenUrban@@gmx.de>
	    Richard Sandiford  <rdsandiford@@googlemail.com>

	* mips-dis.c (print_reg): Handle OP_REG_VI, OP_REG_VF, OP_REG_R5900_I,
	OP_REG_R5900_Q, OP_REG_R5900_R and OP_REG_R5900_ACC.
	(print_vu0_channel): New function.
	(print_insn_arg): Handle OP_VU0_SUFFIX and OP_VU0_MATCH_SUFFIX.
	(print_insn_args): Handle '#'.
	(print_insn_mips): Handle INSN2_VU0_CHANNEL_SUFFIX.
	* mips-opc.c (mips_vu0_channel_mask): New constant.
	(decode_mips_operand): Handle new VU0 operand types.
	(VU0, VU0CH): New macros.
	(mips_builtin_opcodes): Add VU0 opcodes.  Use "+7" rather than "E"
	for LQC2 and SQC2.  Use "+9" rather than "G" for EE CFC2 and CTC2.
	Use "+6" rather than "G" for QMFC2 and QMTC2.

gas/
2013-08-04  Jürgen Urban  <JuergenUrban@@gmx.de>
	    Richard Sandiford  <rdsandiford@@googlemail.com>

	* config/tc-mips.c (MAX_OPERANDS): Bump to 6.
	(RWARN): Bump to 0x8000000.
	(RTYPE_VI, RTYPE_VF, RTYPE_R5900_I, RTYPE_R5900_Q, RTYPE_R5900_R)
	(RTYPE_R5900_ACC): New register types.
	(RTYPE_MASK): Include them.
	(R5900_I_NAMES, R5900_Q_NAMES, R5900_R_NAMES, R5900_ACC_NAMES): New
	macros.
	(reg_names): Include them.
	(mips_parse_register_1): New function, split out from...
	(mips_parse_register): ...here.  Add a channels_ptr parameter.
	Look for VU0 channel suffixes when nonnull.
	(reg_lookup): Update the call to mips_parse_register.
	(mips_parse_vu0_channels): New function.
	(OT_CHANNELS, OT_DOUBLE_CHAR): New mips_operand_token_types.
	(mips_operand_token): Add a "channels" field to the union.
	Extend the comment above "ch" to OT_DOUBLE_CHAR.
	(mips_parse_base_start): Match -- and ++.  Handle channel suffixes.
	(mips_parse_argument_token): Handle channel suffixes here too.
	(validate_mips_insn): Handle INSN2_VU0_CHANNEL_SUFFIX.
	Ignore OP_VU0_MATCH_SUFFIX when calculating the used bits.
	Handle '#' formats.
	(md_begin): Register $vfN and $vfI registers.
	(operand_reg_mask): Handle OP_VU0_SUFFIX and OP_VU0_MATCH_SUFFIX.
	(convert_reg_type): Handle OP_REG_VI, OP_REG_VF, OP_REG_R5900_I,
	OP_REG_R5900_Q, OP_REG_R5900_R and OP_REG_R5900_ACC.
	(match_vu0_suffix_operand): New function.
	(match_operand): Handle OP_VU0_SUFFIX and OP_VU0_MATCH_SUFFIX.
	(macro): Use "+7" rather than "E" for LDQ2 and STQ2.
	(mips_lookup_insn): New function.
	(mips_ip): Use it.  Allow "+K" operands to be elided at the end
	of an instruction.  Handle '#' sequences.

gas/testsuite/
2013-08-04  Jürgen Urban  <JuergenUrban@@gmx.de>

	* gas/mips/r5900-vu0.d: Expect $vfN and $viN instead of numeric
	coprocessor registers.
	* gas/mips/r5900-all-vu0.s, gas/mips/r5900-all-vu0.d,
	gas/mips/r5900-full-vu0.s, gas/mips/r5900-full-vu0.d,
	gas/mips/r5900-error-vu0.s, gas/mips/r5900-error-vu0.l: New tests.
	* gas/mips/mips.exp: Run them.
@
text
@d28 2
a29 1
	vdiv	$Q,$vf1y,$vf11x
d60 1
d66 1
d68 1
d111 1
@

