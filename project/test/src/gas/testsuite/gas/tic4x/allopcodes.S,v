head	1.2;
access;
symbols
	binutils-2_24-branch:1.2.0.40
	binutils-2_24-branchpoint:1.2
	binutils-2_21_1:1.2
	binutils-2_23_2:1.2
	binutils-2_23_1:1.2
	binutils-2_23:1.2
	binutils-2_23-branch:1.2.0.38
	binutils-2_23-branchpoint:1.2
	binutils-2_22_branch:1.2.0.36
	binutils-2_22:1.2
	binutils-2_22-branch:1.2.0.34
	binutils-2_22-branchpoint:1.2
	binutils-2_21:1.2
	binutils-2_21-branch:1.2.0.32
	binutils-2_21-branchpoint:1.2
	binutils-2_20_1:1.2
	binutils-2_20:1.2
	binutils-arc-20081103-branch:1.2.0.30
	binutils-arc-20081103-branchpoint:1.2
	binutils-2_20-branch:1.2.0.28
	binutils-2_20-branchpoint:1.2
	dje-cgen-play1-branch:1.2.0.26
	dje-cgen-play1-branchpoint:1.2
	arc-20081103-branch:1.2.0.24
	arc-20081103-branchpoint:1.2
	binutils-2_19_1:1.2
	binutils-2_19:1.2
	binutils-2_19-branch:1.2.0.22
	binutils-2_19-branchpoint:1.2
	binutils-2_18:1.2
	binutils-2_18-branch:1.2.0.20
	binutils-2_18-branchpoint:1.2
	binutils-csl-coldfire-4_1-32:1.2
	binutils-csl-sourcerygxx-4_1-32:1.2
	binutils-csl-innovasic-fido-3_4_4-33:1.2
	binutils-csl-sourcerygxx-3_4_4-32:1.2
	binutils-csl-coldfire-4_1-30:1.2
	binutils-csl-sourcerygxx-4_1-30:1.2
	binutils-csl-coldfire-4_1-28:1.2
	binutils-csl-sourcerygxx-4_1-29:1.2
	binutils-csl-sourcerygxx-4_1-28:1.2
	binutils-csl-arm-2006q3-27:1.2
	binutils-csl-sourcerygxx-4_1-27:1.2
	binutils-csl-arm-2006q3-26:1.2
	binutils-csl-sourcerygxx-4_1-26:1.2
	binutils-csl-sourcerygxx-4_1-25:1.2
	binutils-csl-sourcerygxx-4_1-24:1.2
	binutils-csl-sourcerygxx-4_1-23:1.2
	binutils-csl-sourcerygxx-4_1-21:1.2
	binutils-csl-arm-2006q3-21:1.2
	binutils-csl-sourcerygxx-4_1-22:1.2
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.2
	binutils-csl-sourcerygxx-4_1-20:1.2
	binutils-csl-arm-2006q3-19:1.2
	binutils-csl-sourcerygxx-4_1-19:1.2
	binutils-csl-sourcerygxx-4_1-18:1.2
	binutils-csl-renesas-4_1-9:1.2
	binutils-csl-sourcerygxx-3_4_4-25:1.2
	binutils-csl-renesas-4_1-8:1.2
	binutils-csl-renesas-4_1-7:1.2
	binutils-csl-renesas-4_1-6:1.2
	binutils-csl-sourcerygxx-4_1-17:1.2
	binutils-csl-sourcerygxx-4_1-14:1.2
	binutils-csl-sourcerygxx-4_1-15:1.2
	binutils-csl-sourcerygxx-4_1-13:1.2
	binutils-2_17:1.2
	binutils-csl-sourcerygxx-4_1-12:1.2
	binutils-csl-sourcerygxx-3_4_4-21:1.2
	binutils-csl-wrs-linux-3_4_4-24:1.2
	binutils-csl-wrs-linux-3_4_4-23:1.2
	binutils-csl-sourcerygxx-4_1-9:1.2
	binutils-csl-sourcerygxx-4_1-8:1.2
	binutils-csl-sourcerygxx-4_1-7:1.2
	binutils-csl-arm-2006q1-6:1.2
	binutils-csl-sourcerygxx-4_1-6:1.2
	binutils-csl-wrs-linux-3_4_4-22:1.2
	binutils-csl-coldfire-4_1-11:1.2
	binutils-csl-sourcerygxx-3_4_4-19:1.2
	binutils-csl-coldfire-4_1-10:1.2
	binutils-csl-sourcerygxx-4_1-5:1.2
	binutils-csl-sourcerygxx-4_1-4:1.2
	binutils-csl-wrs-linux-3_4_4-21:1.2
	binutils-csl-morpho-4_1-4:1.2
	binutils-csl-sourcerygxx-3_4_4-17:1.2
	binutils-csl-wrs-linux-3_4_4-20:1.2
	binutils-2_17-branch:1.2.0.18
	binutils-2_17-branchpoint:1.2
	binutils-csl-2_17-branch:1.2.0.16
	binutils-csl-2_17-branchpoint:1.2
	binutils-csl-gxxpro-3_4-branch:1.2.0.14
	binutils-csl-gxxpro-3_4-branchpoint:1.2
	binutils-2_16_1:1.2
	binutils-csl-arm-2005q1b:1.2
	binutils-2_16:1.2
	binutils-csl-arm-2005q1a:1.2
	binutils-csl-arm-2005q1-branch:1.2.0.12
	binutils-csl-arm-2005q1-branchpoint:1.2
	binutils-2_16-branch:1.2.0.10
	binutils-2_16-branchpoint:1.2
	csl-arm-2004-q3d:1.2
	csl-arm-2004-q3:1.2
	binutils-2_15:1.2
	binutils-2_15-branchpoint:1.2
	csl-arm-2004-q1a:1.2
	csl-arm-2004-q1:1.2
	binutils-2_15-branch:1.2.0.8
	cagney_bfdfile-20040213-branch:1.2.0.6
	cagney_bfdfile-20040213-branchpoint:1.2
	cagney_bigcore-20040122-branch:1.2.0.4
	cagney_bigcore-20040122-branchpoint:1.2
	csl-arm-2003-q4:1.2
	binutils-2_14:1.2
	binutils-2_14-branch:1.2.0.2
	binutils-2_14-branchpoint:1.2
	binutils_latest_snapshot:1.2;
locks; strict;
comment	@# @;


1.2
date	2002.11.18.09.09.31;	author sveinse;	state Exp;
branches;
next	1.1;

1.1
date	2002.11.18.08.28.37;	author sveinse;	state Exp;
branches;
next	;


desc
@@


1.2
log
@
	* gas/config/tc-tic4x.c: Fixed proper commandline
	parameters. Added support for new opcode-list format. General
	error message fixups.
	(c4x_inst_add): Reject insn not for our CPU
	(md_begin): Added matrix for setting the proper opcode-level &
	device-flags according to cpu type and revision. Rewrite the
	opcode hasher.
	(c4x_operand_parse): Fix opcode bug
	(c4x_operands_match): New function argument. Added dry-run
	mechanism, that is optional error generation. Added constraint 'i'
	and 'j'.
	(c4x_insn_check): Added new function for post-verification of the
	generated insn.
	(md_assemble): Check all opcodes before croaking because of an
	argument mismatch. Need this to be able to fully support
	ortogonally arguments.
	(md_parse_options): Revised commandprompt swicthes and added new
	ones.
	(md_show_usage): Complete rewrite of printout.
	* gas/testsuite/gas/tic4x/addressing.s: Fix bug in one insn
	* gas/testsuite/gas/tic4x/addressing_c3x.d: Update thereafter
	* gas/testsuite/gas/tic4x/addressing_c4x.d: Update thereafter
	* gas/testsuite/gas/tic4x/allopcodes.S: Add support for new
	opclass.h changes
	* gas/testsuite/gas/tic4x/opclasses.h: Added testsuites for
	the new enhanced opcodes.
	* gas/testsuite/gas/tic4x/opcodes.s: Regenerate
	* gas/testsuite/gas/tic4x/opcodes_c3x.d: Update from above
	* gas/testsuite/gas/tic4x/opcodes_c4x.d: Update from above
	* gas/testsuite/gas/tic4x/opcodes_new.d: Added new testsuite for
	the enhanced and special insns.
	* gas/testsuite/gas/tic4x/tic4x.exp: Added the opcodes_new testsuite
	* include/opcode/tic4x.h: File reordering. Added enhanced opcodes.
	* opcodes/tic4x-dis.c: Added support for enhanced and special
	insn.
	(c4x_print_op): Added insn class 'i' and 'j'
	(c4x_hash_opcode_special): Add to support special insn
	(c4x_hash_opcode): Update to support the new opcode-list
	format. Add support for the new special insns.
	(c4x_disassemble): New opcode-list support.
@
text
@;;; 
;;;  Test all opcodes and argument permuation
;;;  To make our job a lot simpler, we define a couple of
;;;  insn classes, that we use to generate the proper
;;;  test output.
;;;  
;;;  To rebuild this file you must use
;;;    ./rebuild.sh
;;;
;;;  These definitions are used within this file:
;;;    TEST_C3X    Enables testing of c3x opcodes
;;;    TEST_C4X    Enables testing of c4x opcodes
;;;    TEST_ENH    Enable testing of enhanced opcodes
;;;    TEST_IDLE2  Enable testing of IDLE2 command
;;;    TEST_LPWR   Enable testing of LOPOWER commands
;;; 
#include "opclasses.h"
        
            .text
            ;;------------------------------------
            ;;  C3X INSNS
            ;;------------------------------------ 
start:      B_CLASS(   absf,        TEST_C3X )
            P_CLASS(   absf, stf,   TEST_C3X )
            A_CLASS(   absi,        TEST_C3X )
            P_CLASS(   absi, sti,   TEST_C3X )
            A_CLASS(   addc,        TEST_C3X )
            TC_CLASS(  addc,        TEST_C3X )
            B_CLASS(   addf,        TEST_C3X )
            SC_CLASS(  addf,        TEST_C3X )
            QC_CLASS(  addf, stf,   TEST_C3X )
            A_CLASS(   addi,        TEST_C3X )
            TC_CLASS(  addi,        TEST_C3X )
            QC_CLASS(  addi, sti,   TEST_C3X )
            AU_CLASS(  and,         TEST_C3X )
            TC_CLASS(  and,         TEST_C3X )
            QC_CLASS(  and, sti,    TEST_C3X )
            AU_CLASS(  andn,        TEST_C3X )
            T_CLASS(   andn,        TEST_C3X )
            A_CLASS(   ash,         TEST_C3X )
            T_CLASS(   ash,         TEST_C3X )
            Q_CLASS(   ash, sti,    TEST_C3X )
            J_CLASS(   bC, b,       TEST_C3X )
            J_CLASS(   bCd, bd,     TEST_C3X )
            .ifdef TEST_C3X
br_I:       br      start
brd_I:      brd     start
call_I:     call    start
call_JS:    callc   R0
            callc   start
            .endif
            B_CLASS(   cmpf,        TEST_C3X )
            S2_CLASS(  cmpf,        TEST_C3X )
            A_CLASS(   cmpi,        TEST_C3X )
            T2_CLASS(  cmpi,        TEST_C3X )
            D_CLASS(   dbC, db,     TEST_C3X )
            D_CLASS(   dbCd, dbd,   TEST_C3X )
            AF_CLASS(  fix,         TEST_C3X )
            P_CLASS(   fix, sti,    TEST_C3X )
            BI_CLASS(  float,       TEST_C3X )
            P_CLASS(   float, stf,  TEST_C3X )
            .ifdef TEST_C3X
iack_Z:     iack    @@start
            iack    *+AR0(1)
idle_Z:     idle
            .endif
            .ifdef TEST_IDLE2
idle2_Z:    idle2
            .endif
            B_CLASS(   lde,         TEST_C3X )
            B_CLASS(   ldf,         TEST_C3X )
            LL_CLASS(  ldf,         TEST_C3X )
            P_CLASS(   ldf, stf,    TEST_C3X )
            BB_CLASS(  ldfC,        TEST_C3X )
            B6_CLASS(  ldfi,        TEST_C3X )
            A_CLASS(   ldi,         TEST_C3X )
            LL_CLASS(  ldi,         TEST_C3X )
            P_CLASS(   ldi, sti,    TEST_C3X )
            AB_CLASS(  ldiC,        TEST_C3X )
            A6_CLASS(  ldii,        TEST_C3X )
            .ifdef TEST_C3X
ldp_Z:      ldp     start
            .endif
            B_CLASS(  ldm,          TEST_C3X )
            .ifdef TEST_LPWR
lopower_Z:  lopower
            .endif
            A_CLASS(   lsh,         TEST_C3X )
            T_CLASS(   lsh,         TEST_C3X )
            Q_CLASS(   lsh, sti,    TEST_C3X )
            .ifdef TEST_LPWR
maxspeed_Z: maxspeed
            .endif
            B_CLASS(   mpyf,        TEST_C3X )
            SC_CLASS(  mpyf,        TEST_C3X )
            M_CLASS(   mpyf, addf,  TEST_C3X )
            QC_CLASS(  mpyf, stf,   TEST_C3X )
            M_CLASS(   mpyf, subf,  TEST_C3X )
            A_CLASS(   mpyi,        TEST_C3X )
            TC_CLASS(  mpyi,        TEST_C3X )
            M_CLASS(   mpyi, addi,  TEST_C3X )
            QC_CLASS(  mpyi, sti,   TEST_C3X )
            M_CLASS(   mpyi, subi,  TEST_C3X )
            A_CLASS(   negb,        TEST_C3X )
            B_CLASS(   negf,        TEST_C3X )
            P_CLASS(   negf, stf,   TEST_C3X )
            A_CLASS(   negi,        TEST_C3X )
            P_CLASS(   negi, sti,   TEST_C3X )
            A2_CLASS(  nop,         TEST_C3X )
            B_CLASS(   norm,        TEST_C3X )
            AU_CLASS(  not,         TEST_C3X )
            P_CLASS(   not, sti,    TEST_C3X )
            AU_CLASS(  or,          TEST_C3X )
            TC_CLASS(  or,          TEST_C3X )
            QC_CLASS(  or, sti,     TEST_C3X )
            R_CLASS(   pop,         TEST_C3X )
            RF_CLASS(  popf,        TEST_C3X )
            R_CLASS(   push,        TEST_C3X )
            RF_CLASS(  pushf,       TEST_C3X )
            .ifdef TEST_C3X
reti_Z:     retiC
            reti
rets_Z:     retsC
            rets
            .endif
            B_CLASS(   rnd,         TEST_C3X )
            R_CLASS(   rol,         TEST_C3X )
            R_CLASS(   rolc,        TEST_C3X )
            R_CLASS(   ror,         TEST_C3X )
            R_CLASS(   rorc,        TEST_C3X )
            .ifdef TEST_C3X
rptb_I2:    rptb    start
            .endif
            A3_CLASS(  rpts,        TEST_C3X )
            .ifdef TEST_C3X
sigi_Z:     sigi
            .endif
            B7_CLASS(  stf,         TEST_C3X )
            LS_CLASS(  stf,         TEST_C3X )
            B7_CLASS(  stfi,        TEST_C3X )
            A7_CLASS(  sti,         TEST_C3X )
            LS_CLASS(  sti,         TEST_C3X )
            A7_CLASS(  stii,        TEST_C3X )
            A_CLASS(   subb,        TEST_C3X )
            T_CLASS(   subb,        TEST_C3X )
            A_CLASS(   subc,        TEST_C3X )
            B_CLASS(   subf,        TEST_C3X )
            S_CLASS(   subf,        TEST_C3X )
            Q_CLASS(   subf, stf,   TEST_C3X )
            A_CLASS(   subi,        TEST_C3X )
            T_CLASS(   subi,        TEST_C3X )
            Q_CLASS(   subi, sti,   TEST_C3X )
            A_CLASS(   subrb,       TEST_C3X )
            B_CLASS(   subrf,       TEST_C3X )
            A_CLASS(   subri,       TEST_C3X )
            .ifdef TEST_C3X
swi_Z:      swi
trap_Z:     trapC   10
            trap    10
            .endif
            AU_CLASS(  tstb,        TEST_C3X )
            T2C_CLASS( tstb,        TEST_C3X )
            AU_CLASS(  xor,         TEST_C3X )
            TC_CLASS(  xor,         TEST_C3X )
            QC_CLASS(  xor, sti,    TEST_C3X )

            ;;------------------------------------
            ;;  C4X INSNS
            ;;------------------------------------ 
            .ifdef  TEST_C4X
            J_CLASS(   bCaf, baf,   TEST_C4X )
            J_CLASS(   bCat, bat,   TEST_C4X )
            B6_CLASS(  frieee,      TEST_C4X )
            P_CLASS(   frieee, stf, TEST_C4X )
            .ifdef TEST_C4X
laj_I:      laj     start
laj_JS:     lajc    R0
            lajc    start
lat_Z:      latC    10
            .endif
            A_CLASS(   lb0,         TEST_C4X )
            A_CLASS(   lb1,         TEST_C4X )
            A_CLASS(   lb2,         TEST_C4X )
            A_CLASS(   lb3,         TEST_C4X )
            AU_CLASS(  lbu0,        TEST_C4X )
            AU_CLASS(  lbu1,        TEST_C4X )
            AU_CLASS(  lbu2,        TEST_C4X )
            AU_CLASS(  lbu3,        TEST_C4X )
            AY_CLASS(  lda,         TEST_C4X )
            .ifdef TEST_C4X
ldep_Z:     ldep    IVTP, AR0
ldhi_Z:     ldhi    35, R0
            ldhi    start, R0
ldpe_Z:     ldpe    AR0, IVTP
ldpk_Z:     ldpk    start
            .endif
            A_CLASS(   lh0,         TEST_C4X )
            A_CLASS(   lh1,         TEST_C4X )
            AU_CLASS(  lhu0,        TEST_C4X )
            AU_CLASS(  lhu1,        TEST_C4X )
            A_CLASS(   lwl0,        TEST_C4X )
            A_CLASS(   lwl1,        TEST_C4X )
            A_CLASS(   lwl2,        TEST_C4X )
            A_CLASS(   lwl3,        TEST_C4X )
            A_CLASS(   lwr0,        TEST_C4X )
            A_CLASS(   lwr1,        TEST_C4X )
            A_CLASS(   lwr2,        TEST_C4X )
            A_CLASS(   lwr3,        TEST_C4X )
            A_CLASS(   mb0,         TEST_C4X )
            A_CLASS(   mb1,         TEST_C4X )
            A_CLASS(   mb2,         TEST_C4X )
            A_CLASS(   mb3,         TEST_C4X )
            A_CLASS(   mh0,         TEST_C4X )
            A_CLASS(   mh1,         TEST_C4X )
            A_CLASS(   mh2,         TEST_C4X )
            A_CLASS(   mh3,         TEST_C4X )
            A_CLASS(   mpyshi,      TEST_C4X )
            TC_CLASS(  mpyshi,      TEST_C4X )
            A_CLASS(   mpyuhi,      TEST_C4X )
            TC_CLASS(  mpyuhi,      TEST_C4X )
            BA_CLASS(  rcpf,        TEST_C4X )
            .ifdef TEST_C4X
retid_Z:    retiCd
            retid
rptb2_I2:   rptb    AR0
rptbd_I2:   rptbd  start
            rptbd   AR0
            .endif
            B_CLASS(   rsqrf,       TEST_C4X )
            A6_CLASS(  sigi,        TEST_C4X )
            .ifdef TEST_C4X
sti2_A7:    sti     -5, @@start
            sti     -5, *+AR0(5)
stik_Z:     stik    -5, @@start
            stik    -5, *+AR0(5)
            .endif
            B_CLASS(   toieee,      TEST_C4X )
            P_CLASS(   toieee, stf, TEST_C4X )
            .endif
            .end
        
@


1.1
log
@
TIC4X testcase commit

	* binutils/testsuite/binutils-all/objcopy.exp: Disable tic4x
	from test
	* binutils/testsuite/binutils-all/objdump.exp: Setup proper
	values for tic4x testcase
	* gas/testsuite/gas/all/gas.exp: Setup for tic4x testcase
	* gas/testsuite/gas/macros/macros.exp: Ditto
	* gas/testsuite/gas/all/gas.exp: Setup for tic4x testcase
	* gas/testsuite/gas/macros/macros.exp: Ditto
	* gas/testsuite/gas/tic4x: New tic4x gas testsuite directory
	* ld/testsuite/ld-scripts/script.exp: Setup for tic4x testcase
@
text
@d9 7
d20 26
a45 22
start:      B_CLASS( absf )
            P_CLASS( absf, stf )
            A_CLASS( absi )
            P_CLASS( absi, sti )
            A_CLASS( addc )
            TC_CLASS( addc )
            B_CLASS( addf )
            SC_CLASS( addf )
            QC_CLASS( addf, stf )
            A_CLASS( addi )
            TC_CLASS( addi )
            QC_CLASS( addi, sti )
            AU_CLASS( and )
            TC_CLASS( and )
            QC_CLASS( and, sti )
            AU_CLASS( andn )
            T_CLASS( andn )
            A_CLASS( ash )
            T_CLASS( ash )
            Q_CLASS( ash, sti )
            J_CLASS( bC, b )
            J_CLASS( bCd, bd )
d51 12
a62 10
            B_CLASS( cmpf )
            S2_CLASS( cmpf )
            A_CLASS( cmpi )
            T2_CLASS( cmpi )
            D_CLASS( dbC, db )
            D_CLASS( dbCd, dbd )
            AF_CLASS( fix )
            P_CLASS( fix, sti )
            BI_CLASS( float )
            P_CLASS( float, stf )
d66 1
d70 12
a81 11
            B_CLASS( lde )
            B_CLASS( ldf )
            LL_CLASS( ldf )
            P_CLASS( ldf, stf )
            BB_CLASS( ldfC )
            B6_CLASS( ldfi )
            A_CLASS( ldi )
            LL_CLASS( ldi )
            P_CLASS( ldi, sti )
            AB_CLASS( ldiC )
            A6_CLASS( ldii )
d83 2
a84 1
            B_CLASS( ldm )
d88 3
a90 3
            A_CLASS( lsh )
            T_CLASS( lsh )
            Q_CLASS( lsh, sti )
d94 27
a120 26
            B_CLASS( mpyf )
            SC_CLASS( mpyf )
            M_CLASS( mpyf, addf )
            QC_CLASS( mpyf, stf )
            M_CLASS( mpyf, subf )
            A_CLASS( mpyi )
            TC_CLASS( mpyi )
            M_CLASS( mpyi, addi )
            QC_CLASS( mpyi, sti )
            M_CLASS( mpyi, subi )
            A_CLASS( negb )
            B_CLASS( negf )
            P_CLASS( negf, stf )
            A_CLASS( negi )
            P_CLASS( negi, sti )
            A2_CLASS( nop )
            B_CLASS( norm )
            AU_CLASS( not )
            P_CLASS( not, sti )
            AU_CLASS( or )
            TC_CLASS( or )
            QC_CLASS( or, sti )
            R_CLASS( pop )
            RF_CLASS( popf )
            R_CLASS( push )
            RF_CLASS( pushf )
d125 7
a131 5
            B_CLASS( rnd )
            R_CLASS( rol )
            R_CLASS( rolc )
            R_CLASS( ror )
            R_CLASS( rorc )
d133 3
a135 1
            A3_CLASS( rpts )
d137 20
a156 18
            B7_CLASS( stf )
            LS_CLASS( stf )
            B7_CLASS( stfi )
            A7_CLASS( sti )
            LS_CLASS( sti )
            A7_CLASS( stii )
            A_CLASS( subb )
            T_CLASS( subb )
            A_CLASS( subc )
            B_CLASS( subf )
            S_CLASS( subf )
            Q_CLASS( subf, stf )
            A_CLASS( subi )
            T_CLASS( subi )
            Q_CLASS( subi, sti )
            A_CLASS( subrb )
            B_CLASS( subrf )
            A_CLASS( subri )
d160 10
a169 6
            AU_CLASS( tstb )
            T2C_CLASS( tstb )
            AU_CLASS( xor )
            TC_CLASS( xor )
            QC_CLASS( xor, sti )
    
d171 5
a175 4
            J_CLASS( bCaf, baf )
            J_CLASS( bCat, bat )
            B6_CLASS( frieee )
            P_CLASS( frieee, stf )
d180 11
a190 9
            A_CLASS( lb0 )
            A_CLASS( lb1 )
            A_CLASS( lb2 )
            A_CLASS( lb3 )
            AU_CLASS( lbu0 )
            AU_CLASS( lbu1 )
            AU_CLASS( lbu2 )
            AU_CLASS( lbu3 )
            AY_CLASS( lda )
d196 27
a222 25
            A_CLASS( lh0 )
            A_CLASS( lh1 )
            AU_CLASS( lhu0 )
            AU_CLASS( lhu1 )
            A_CLASS( lwl0 )
            A_CLASS( lwl1 )
            A_CLASS( lwl2 )
            A_CLASS( lwl3 )
            A_CLASS( lwr0 )
            A_CLASS( lwr1 )
            A_CLASS( lwr2 )
            A_CLASS( lwr3 )
            A_CLASS( mb0 )
            A_CLASS( mb1 )
            A_CLASS( mb2 )
            A_CLASS( mb3 )
            A_CLASS( mh0 )
            A_CLASS( mh1 )
            A_CLASS( mh2 )
            A_CLASS( mh3 )
            A_CLASS( mpyshi )
            TC_CLASS( mpyshi )
            A_CLASS( mpyuhi )
            TC_CLASS( mpyuhi )
            BA_CLASS( rcpf )
d228 4
a231 2
            B_CLASS( rsqrf )
            A6_CLASS( sigi )
d236 3
a238 2
            B_CLASS( toieee )
            P_CLASS( toieee, stf )
@

