head	1.9;
access;
symbols
	binutils-2_24-branch:1.9.0.4
	binutils-2_24-branchpoint:1.9
	binutils-2_21_1:1.8
	binutils-2_23_2:1.9
	binutils-2_23_1:1.9
	binutils-2_23:1.9
	binutils-2_23-branch:1.9.0.2
	binutils-2_23-branchpoint:1.9
	binutils-2_22_branch:1.8.0.36
	binutils-2_22:1.8
	binutils-2_22-branch:1.8.0.34
	binutils-2_22-branchpoint:1.8
	binutils-2_21:1.8
	binutils-2_21-branch:1.8.0.32
	binutils-2_21-branchpoint:1.8
	binutils-2_20_1:1.8
	binutils-2_20:1.8
	binutils-arc-20081103-branch:1.8.0.30
	binutils-arc-20081103-branchpoint:1.8
	binutils-2_20-branch:1.8.0.28
	binutils-2_20-branchpoint:1.8
	dje-cgen-play1-branch:1.8.0.26
	dje-cgen-play1-branchpoint:1.8
	arc-20081103-branch:1.8.0.24
	arc-20081103-branchpoint:1.8
	binutils-2_19_1:1.8
	binutils-2_19:1.8
	binutils-2_19-branch:1.8.0.22
	binutils-2_19-branchpoint:1.8
	binutils-2_18:1.8
	binutils-2_18-branch:1.8.0.20
	binutils-2_18-branchpoint:1.8
	binutils-csl-coldfire-4_1-32:1.8
	binutils-csl-sourcerygxx-4_1-32:1.8
	binutils-csl-innovasic-fido-3_4_4-33:1.8
	binutils-csl-sourcerygxx-3_4_4-32:1.8
	binutils-csl-coldfire-4_1-30:1.8
	binutils-csl-sourcerygxx-4_1-30:1.8
	binutils-csl-coldfire-4_1-28:1.8
	binutils-csl-sourcerygxx-4_1-29:1.8
	binutils-csl-sourcerygxx-4_1-28:1.8
	binutils-csl-arm-2006q3-27:1.8
	binutils-csl-sourcerygxx-4_1-27:1.8
	binutils-csl-arm-2006q3-26:1.8
	binutils-csl-sourcerygxx-4_1-26:1.8
	binutils-csl-sourcerygxx-4_1-25:1.8
	binutils-csl-sourcerygxx-4_1-24:1.8
	binutils-csl-sourcerygxx-4_1-23:1.8
	binutils-csl-sourcerygxx-4_1-21:1.8
	binutils-csl-arm-2006q3-21:1.8
	binutils-csl-sourcerygxx-4_1-22:1.8
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.8
	binutils-csl-sourcerygxx-4_1-20:1.8
	binutils-csl-arm-2006q3-19:1.8
	binutils-csl-sourcerygxx-4_1-19:1.8
	binutils-csl-sourcerygxx-4_1-18:1.8
	binutils-csl-renesas-4_1-9:1.8
	binutils-csl-sourcerygxx-3_4_4-25:1.8
	binutils-csl-renesas-4_1-8:1.8
	binutils-csl-renesas-4_1-7:1.8
	binutils-csl-renesas-4_1-6:1.8
	binutils-csl-sourcerygxx-4_1-17:1.8
	binutils-csl-sourcerygxx-4_1-14:1.8
	binutils-csl-sourcerygxx-4_1-15:1.8
	binutils-csl-sourcerygxx-4_1-13:1.8
	binutils-2_17:1.8
	binutils-csl-sourcerygxx-4_1-12:1.8
	binutils-csl-sourcerygxx-3_4_4-21:1.8
	binutils-csl-wrs-linux-3_4_4-24:1.8
	binutils-csl-wrs-linux-3_4_4-23:1.8
	binutils-csl-sourcerygxx-4_1-9:1.8
	binutils-csl-sourcerygxx-4_1-8:1.8
	binutils-csl-sourcerygxx-4_1-7:1.8
	binutils-csl-arm-2006q1-6:1.8
	binutils-csl-sourcerygxx-4_1-6:1.8
	binutils-csl-wrs-linux-3_4_4-22:1.8
	binutils-csl-coldfire-4_1-11:1.8
	binutils-csl-sourcerygxx-3_4_4-19:1.8
	binutils-csl-coldfire-4_1-10:1.8
	binutils-csl-sourcerygxx-4_1-5:1.8
	binutils-csl-sourcerygxx-4_1-4:1.8
	binutils-csl-wrs-linux-3_4_4-21:1.8
	binutils-csl-morpho-4_1-4:1.8
	binutils-csl-sourcerygxx-3_4_4-17:1.8
	binutils-csl-wrs-linux-3_4_4-20:1.8
	binutils-2_17-branch:1.8.0.18
	binutils-2_17-branchpoint:1.8
	binutils-csl-2_17-branch:1.8.0.16
	binutils-csl-2_17-branchpoint:1.8
	binutils-csl-gxxpro-3_4-branch:1.8.0.14
	binutils-csl-gxxpro-3_4-branchpoint:1.8
	binutils-2_16_1:1.8
	binutils-csl-arm-2005q1b:1.8
	binutils-2_16:1.8
	binutils-csl-arm-2005q1a:1.8
	binutils-csl-arm-2005q1-branch:1.8.0.12
	binutils-csl-arm-2005q1-branchpoint:1.8
	binutils-2_16-branch:1.8.0.10
	binutils-2_16-branchpoint:1.8
	csl-arm-2004-q3d:1.8
	csl-arm-2004-q3:1.8
	binutils-2_15:1.8
	binutils-2_15-branchpoint:1.8
	csl-arm-2004-q1a:1.8
	csl-arm-2004-q1:1.8
	binutils-2_15-branch:1.8.0.8
	cagney_bfdfile-20040213-branch:1.8.0.6
	cagney_bfdfile-20040213-branchpoint:1.8
	cagney_bigcore-20040122-branch:1.8.0.4
	cagney_bigcore-20040122-branchpoint:1.8
	csl-arm-2003-q4:1.8
	binutils-2_14:1.8
	binutils-2_14-branch:1.8.0.2
	binutils-2_14-branchpoint:1.8
	binutils-2_13_2_1:1.4
	binutils-2_13_2:1.4
	binutils-2_13_1:1.4
	binutils-2_13:1.4
	binutils-2_13-branchpoint:1.4
	binutils-2_13-branch:1.4.0.4
	binutils-2_12_1:1.4
	binutils-2_12:1.4
	binutils-2_12-branch:1.4.0.2
	binutils-2_12-branchpoint:1.4
	cygnus_cvs_20020108_pre:1.4
	binutils-2_11_2:1.3
	binutils-2_11_1:1.3
	binutils-2_11:1.3
	x86_64versiong3:1.3
	binutils-2_11-branch:1.3.0.2
	binutils_latest_snapshot:1.9;
locks; strict;
comment	@# @;


1.9
date	2012.05.15.12.55.39;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	2002.12.08.21.08.07;	author ciceron;	state Exp;
branches;
next	1.7;

1.7
date	2002.12.01.13.46.08;	author ciceron;	state Exp;
branches;
next	1.6;

1.6
date	2002.08.26.11.35.32;	author amodra;	state Exp;
branches;
next	1.5;

1.5
date	2002.08.13.22.45.22;	author ciceron;	state Exp;
branches;
next	1.4;

1.4
date	2001.11.01.09.52.03;	author ciceron;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.11.20.19.17;	author ciceron;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2000.11.26.21.18.15;	author ciceron;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.19.01.22.41;	author nickc;	state Exp;
branches;
next	;

1.3.2.1
date	2001.11.01.09.53.17;	author ciceron;	state Exp;
branches;
next	;


desc
@@


1.9
log
@	* config/tc-m68hc11.c: Add S12X and XGATE co-processor support.
	Add option to offset S12 addresses into XGATE memory space.
	Tweak target flags to match other tools. (i.e. -m m68hc11).
	* doc/as.texinfo: Mention new options.
	* doc/c-m68hc11.texi: Document new options.
	* NEWS: Mention new support.

	* archures.c: Add bfd_arch_m9s12x and bfd_arch_m9s12xg.
	* config.bfd: Likewise.
	* cpu-m9s12x.c: New.
	* cpu-m9s12xg.c: New.
	* elf32-m68hc12.c: Add S12X and XGATE co-processor support.
	Add option to offset S12 addresses into XGATE memory space.
	Fix carry bug in IMM16 (IMM8 low/high) relocate.
	* Makefile.am (ALL_MACHINES): Add cpu-m9s12x and cpu-m9s12xg.
	(ALL_MACHINES_CFILES): Likewise.
	* reloc.c: Add S12X relocs.
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.

	* gas/m68hc11/insns9s12x.s: New
	* gas/m68hc11/insns9s12x.d: New
	* gas/m68hc11/hexprefix.s: New
	* gas/m68hc11/hexprefix.d: New
	* gas/m68hc11/9s12x-exg-sex-tfr.s: New
	* gas/m68hc11/9s12x-exg-sex-tfr.d: New
	* gas/m68hc11/insns9s12xg.s: New
	* gas/m68hc11/insns9s12xg.d: New
	* gas/m68hc11/9s12x-mov.s: New
	* gas/m68hc11/9s12x-mov.d: New
	* gas/m68hc11/m68hc11.exp: Updated
	* gas/m68hc11/*.d: Brought in line with changed objdump output.
	* gas/all/gas.exp: XFAIL all hc11/12 targets for redef2,3.
	* gas/elf/elf.exp: XFAIL all hc11/12 targets for redef.
	* gas/elf/dwarf2-1.d: Skip for hc11/12 targets.
	* gas/elf/dwarf2-2.d: Likewise.

	* ld-m68hc11/xgate-link.s: New.
	* ld-m68hc11/xgate-link.d: New.
	* ld-m68hc11/xgate-offset.s: New.
	* ld-m68hc11/xgate-offset.d: New.
	* ld-m68hc11/xgate1.s: New.
	* ld-m68hc11/xgate1.d: New.
	* ld-m68hc11/xgate2.s: New.
	* ld-m68hc11/m68hc11.exp: Updated.
	* ld-m68hc11/*.d: Brought in line with changed objdump output.
	* ld-gc/gc.exp: Update CFLAGS for m68hc11.
	* ld-plugin/plugin.exp: Likewise.
	* ld-srec/srec.exp: XFAIL for m68hc11 and m68hc12.

	* configure.in: Add S12X and XGATE co-processor support to m68hc11
	target.
	* disassemble.c: Likewise.
	* configure: Regenerate.
	* m68hc11-dis.c: Make objdump output more consistent, use hex
	instead of decimal and use 0x prefix for hex.
	* m68hc11-opc.c: Add S12X and XGATE opcodes.
	* dis-asm.h (print_insn_m9s12x): Prototype.
	(print_insn_m9s12xg): Prototype.

	* m68hc11.h (R_M68HC12_16B, R_M68HC12_PCREL_9, R_M68HC12_PCREL_10)
	R_M68HC12_HI8XG, R_M68HC12_LO8XG): New relocations.
	(E_M68HC11_XGATE_RAMOFFSET): Define.

	* m68hc11.h: Add XGate definitions.
	(struct m68hc11_opcode): Add xg_mask field.
@
text
@#objdump: -d --prefix-addresses --reloc
#as: -m68hc12
#name: 68HC12 specific addressing modes (opers12)

.*: +file format elf32\-m68hc12

Disassembly of section .text:
0+0+ <start> anda	\[0xc,X\]
0+0004 <start\+0x4> ldaa	#0xa
0+0006 <start\+0x6> ldx	0x0+0+ <start>
[	]+7: R_M68HC12_16	L1
0+0009 <L1> ldy	0x0,X
0+000b <L1\+0x2> addd	0x1,Y
0+000d <L1\+0x4> subd	0xffff,Y
0+000f <L1\+0x6> eora	0xf,Y
0+0011 <L1\+0x8> eora	0xfff0,Y
0+0013 <L1\+0xa> eorb	0x10,Y
0+0016 <L1\+0xd> eorb	0xffef,Y
0+0019 <L1\+0x10> oraa	0x80,SP
0+001c <L1\+0x13> orab	0xff80,SP
0+001f <L1\+0x16> orab	0xff,X
0+0022 <L1\+0x19> orab	0xff00,X
0+0025 <L1\+0x1c> anda	0x100,X
0+0029 <L1\+0x20> andb	0xfeff,X
0+002d <L1\+0x24> anda	\[0xc,X\]
0+0031 <L1\+0x28> ldaa	\[0x101,Y\]
0+0035 <L1\+0x2c> ldab	\[0x7fff,SP\]
0+0039 <L1\+0x30> ldd	\[0x8000,PC\]
0+003d <L1\+0x34> ldd	0xffc9,PC \{0x0+9 <L1>\}
0+0040 <L1\+0x37> std	A,X
0+0042 <L1\+0x39> ldx	B,X
0+0044 <L1\+0x3b> stx	D,Y
0+0046 <L1\+0x3d> addd	1,\+X
0+0048 <L1\+0x3f> addd	2,\+X
0+004a <L1\+0x41> addd	8,\+X
0+004c <L1\+0x43> addd	1,SP\+
0+004e <L1\+0x45> addd	2,SP\+
0+0050 <L1\+0x47> addd	8,SP\+
0+0052 <L1\+0x49> subd	1,\-Y
0+0054 <L1\+0x4b> subd	2,\-Y
0+0056 <L1\+0x4d> subd	8,\-Y
0+0058 <L1\+0x4f> addd	1,Y\-
0+005a <L1\+0x51> addd	2,Y\-
0+005c <L1\+0x53> addd	8,Y\-
0+005e <L1\+0x55> std	\[D,X\]
0+0060 <L1\+0x57> std	\[D,Y\]
0+0062 <L1\+0x59> std	\[D,SP\]
0+0064 <L1\+0x5b> std	\[D,PC\]
0+0066 <L1\+0x5d> beq	0x0+0009 <L1>
[	]+66: R_M68HC12_RL_JUMP	\*ABS\*
0+0068 <L1\+0x5f> lbeq	0x0+0 <start>
[	]+68: R_M68HC12_RL_JUMP	\*ABS\*
0+006c <L1\+0x63> lbcc	0x0+00bc <L2>
[	]+6c: R_M68HC12_RL_JUMP	\*ABS\*
0+0070 <L1\+0x67> movb	0x0+0+ <start>, 0x1,X
[	]+73: R_M68HC12_16	start
0+0075 <L1\+0x6c> movw	0x1,X, 0x0+0+ <start>
[	]+78: R_M68HC12_16	start
0+007a <L1\+0x71> movb	0x0+0+ <start>, 1,\+X
[	]+7d: R_M68HC12_16	start
0+007f <L1\+0x76> movb	0x0+0+ <start>, 1,\-X
[	]+82: R_M68HC12_16	start
0+0084 <L1\+0x7b> movb	#0x17, 1,\-SP
0+0088 <L1\+0x7f> movb	0x0+0+ <start>, 0x0+0+ <start>
[	]+8a: R_M68HC12_16	L1
[	]+8c: R_M68HC12_16	L2
0+008e <L1\+0x85> movb	0x0+0+ <start>, A,X
[	]+91: R_M68HC12_16	L1
0+0093 <L1\+0x8a> movw	0x0+0+ <start>, B,X
[	]+96: R_M68HC12_16	L1
0+0098 <L1\+0x8f> movw	0x0+0+ <start>, D,X
[	]+9b: R_M68HC12_16	L1
0+009d <L1\+0x94> movw	D,X, A,X
0+00a1 <L1\+0x98> movw	B,SP, D,PC
0+00a5 <L1\+0x9c> movw	B,SP, 0x0+0+ <start>
[	]+a8: R_M68HC12_16	L1
0+00aa <L1\+0xa1> movw	B,SP, 0x1,X
0+00ae <L1\+0xa5> movw	D,X, A,Y
0+00b2 <L1\+0xa9> trap	#0x30
0+00b4 <L1\+0xab> trap	#0x39
0+00b6 <L1\+0xad> trap	#0x40
0+00b8 <L1\+0xaf> trap	#0x80
0+00ba <L1\+0xb1> trap	#0xff
0+00bc <L2> movw	0x1,X, 0x2,X
0+00c0 <L2\+0x4> movw	0x0+ffff <bb\+0xd7ff>, 0x0+ffff <bb\+0xd7ff>
0+00c6 <L2\+0xa> movw	0x0+ffff <bb\+0xd7ff>, 0x1,X
0+00cb <L2\+0xf> movw	#0x0+ffff <bb\+0xd7ff>, 0x1,X
0+00d0 <L2\+0x14> movw	0x0+0003 <start\+0x3>, 0x0+0008 <start\+0x8>
0+00d6 <L2\+0x1a> movw	#0x0+0003 <start\+0x3>, 0x0+0003 <start\+0x3>
0+00dc <L2\+0x20> movw	#0x0+0003 <start\+0x3>, 0x1,X
0+00e1 <L2\+0x25> movw	0x0+0003 <start\+0x3>, 0x1,X
0+00e6 <L2\+0x2a> movw	0x0+0003 <start\+0x3>, 0x2,X
0+00eb <L2\+0x2f> movw	0x0+0004 <start\+0x4>, 0xfffe,X
0+00f0 <L2\+0x34> rts
0+00f1 <post_indexed_pb> leas	0x0,X
[	]+f3: R_M68HC12_16	abort
0+00f5 <t2> leax	0x4,Y
0+00f7 <t2\+0x2> leax	0x64,X
0+00fa <t2\+0x5> leas	0x6e,SP
0+00fd <t2\+0x8> leay	0xa,X
0+00ff <t2\+0xa> leas	0x2800,Y
0+0103 <t2\+0xe> leas	0xfff0,PC \{0x0+f5 <t2>\}
0+0105 <t2\+0x10> leas	0xf,PC \{0x0+116 <t2\+0x21>\}
0+0107 <t2\+0x12> leas	0xff00,PC \{0x0+b <L1\+0x2>\}
0+010b <t2\+0x16> leas	0xff,PC \{0x0+20d <max9b\+0x10e>\}
0+010e <t2\+0x19> movb	#0x17, 0x0+2345 <max9b\+0x2246>
0+0113 <t2\+0x1e> movb	#0x28, 0xc,SP
0+0117 <t2\+0x22> movb	#0x27, 3,\+SP
0+011b <t2\+0x26> movb	#0x14, 0xe,SP
0+011f <t2\+0x2a> movw	#0x0+3210 <bb\+0xa10>, 0x0+3456 <bb\+0xc56>
0+0125 <t2\+0x30> movw	#0x0+4040 <bb\+0x1840>, 0xc,SP
0+012a <t2\+0x35> movw	#0x0+3900 <bb\+0x1100>, 3,\+SP
0+012f <t2\+0x3a> movw	#0x0+2000 <max9b\+0x1f01>, 0xe,SP
@


1.8
log
@	* gas/m68hc11/bug-1825.s: Add some tests.
	* gas/m68hc11/bug-1825.d: Update.
	* gas/m68hc11/opers12.d: Update.
	* gas/m68hc11/opers12-dwarf2.d: Update.
@
text
@d8 3
a10 3
0+0+ <start> anda	\[12,X\]
0+0004 <start\+0x4> ldaa	#10
0+0006 <start\+0x6> ldx	0+0+ <start>
d12 18
a29 18
0+0009 <L1> ldy	0,X
0+000b <L1\+0x2> addd	1,Y
0+000d <L1\+0x4> subd	\-1,Y
0+000f <L1\+0x6> eora	15,Y
0+0011 <L1\+0x8> eora	\-16,Y
0+0013 <L1\+0xa> eorb	16,Y
0+0016 <L1\+0xd> eorb	\-17,Y
0+0019 <L1\+0x10> oraa	128,SP
0+001c <L1\+0x13> orab	\-128,SP
0+001f <L1\+0x16> orab	255,X
0+0022 <L1\+0x19> orab	\-256,X
0+0025 <L1\+0x1c> anda	256,X
0+0029 <L1\+0x20> andb	\-257,X
0+002d <L1\+0x24> anda	\[12,X\]
0+0031 <L1\+0x28> ldaa	\[257,Y\]
0+0035 <L1\+0x2c> ldab	\[32767,SP\]
0+0039 <L1\+0x30> ldd	\[32768,PC\]
0+003d <L1\+0x34> ldd	\-55,PC \{0+9 <L1>\}
d49 1
a49 1
0+0066 <L1\+0x5d> beq	0+0009 <L1>
d51 1
a51 1
0+0068 <L1\+0x5f> lbeq	0+0+ <start>
d53 1
a53 1
0+006c <L1\+0x63> lbcc	0+00bc <L2>
d55 1
a55 1
0+0070 <L1\+0x67> movb	0+0+ <start>, 1,X
d57 1
a57 1
0+0075 <L1\+0x6c> movw	1,X, 0+0+ <start>
d59 1
a59 1
0+007a <L1\+0x71> movb	0+0+ <start>, 1,\+X
d61 1
a61 1
0+007f <L1\+0x76> movb	0+0+ <start>, 1,\-X
d63 2
a64 2
0+0084 <L1\+0x7b> movb	#23, 1,\-SP
0+0088 <L1\+0x7f> movb	0+0+ <start>, 0+0+ <start>
d67 1
a67 1
0+008e <L1\+0x85> movb	0+0+ <start>, A,X
d69 1
a69 1
0+0093 <L1\+0x8a> movw	0+0+ <start>, B,X
d71 1
a71 1
0+0098 <L1\+0x8f> movw	0+0+ <start>, D,X
d75 1
a75 1
0+00a5 <L1\+0x9c> movw	B,SP, 0+0+ <start>
d77 1
a77 1
0+00aa <L1\+0xa1> movw	B,SP, 1,X
d79 15
a93 15
0+00b2 <L1\+0xa9> trap	#48
0+00b4 <L1\+0xab> trap	#57
0+00b6 <L1\+0xad> trap	#64
0+00b8 <L1\+0xaf> trap	#128
0+00ba <L1\+0xb1> trap	#255
0+00bc <L2> movw	1,X, 2,X
0+00c0 <L2\+0x4> movw	0+ffff <bb\+0xd7ff>, 0+ffff <bb\+0xd7ff>
0+00c6 <L2\+0xa> movw	0+ffff <bb\+0xd7ff>, 1,X
0+00cb <L2\+0xf> movw	#0+ffff <bb\+0xd7ff>, 1,X
0+00d0 <L2\+0x14> movw	0+0003 <start\+0x3>, 0+0008 <start\+0x8>
0+00d6 <L2\+0x1a> movw	#0+0003 <start\+0x3>, 0+0003 <start\+0x3>
0+00dc <L2\+0x20> movw	#0+0003 <start\+0x3>, 1,X
0+00e1 <L2\+0x25> movw	0+0003 <start\+0x3>, 1,X
0+00e6 <L2\+0x2a> movw	0+0003 <start\+0x3>, 2,X
0+00eb <L2\+0x2f> movw	0+0004 <start\+0x4>, \-2,X
d95 1
a95 1
0+00f1 <post_indexed_pb> leas	0,X
d97 17
a113 17
0+00f5 <t2> leax	4,Y
0+00f7 <t2\+0x2> leax	100,X
0+00fa <t2\+0x5> leas	110,SP
0+00fd <t2\+0x8> leay	10,X
0+00ff <t2\+0xa> leas	10240,Y
0+0103 <t2\+0xe> leas	-16,PC \{0+f5 <t2>\}
0+0105 <t2\+0x10> leas	15,PC \{0+116 <t2\+0x21>\}
0+0107 <t2\+0x12> leas	-256,PC \{0+b <L1\+0x2>\}
0+010b <t2\+0x16> leas	255,PC \{0+20d <max9b\+0x10e>\}
0+010e <t2\+0x19> movb	#23, 0+2345 <max9b\+0x2246>
0+0113 <t2\+0x1e> movb	#40, 12,SP
0+0117 <t2\+0x22> movb	#39, 3,\+SP
0+011b <t2\+0x26> movb	#20, 14,SP
0+011f <t2\+0x2a> movw	#0+3210 <bb\+0xa10>, 0+3456 <bb\+0xc56>
0+0125 <t2\+0x30> movw	#0+4040 <bb\+0x1840>, 12,SP
0+012a <t2\+0x35> movw	#0+3900 <bb\+0x1100>, 3,\+SP
0+012f <t2\+0x3a> movw	#0+2000 <max9b\+0x1f01>, 14,SP
@


1.7
log
@	* gas/m68hc11/insns.s: Don't use .comm for stack symbol so that objdump
	can find the real symbol and not a gas internal debug symbol.
	* gas/m68hc11/insns.d: Update.
	* gas/m68hc11/insns-dwarf2.d: Update.
	* gas/m68hc11/insns12.d: Update.
	* gas/m68hc11/opers12.s (min5b, min9b): Use 16 and -256 for the min.
	* gas/m68hc11/opers12.d: Update after indexed offset operand fixes.
	* gas/m68hc11/opers12-dwarf2.d: Likewise.
@
text
@d29 1
a29 1
0+003d <L1\+0x34> ldd	\-54,PC \{0+9 <L1>\}
d104 10
a113 10
0+0107 <t2\+0x12> leas	-256,PC \{0+9 <L1>\}
0+010a <t2\+0x15> leas	255,PC \{0+20b <max9b\+0x10c>\}
0+010d <t2\+0x18> movb	#23, 0+2345 <max9b\+0x2246>
0+0112 <t2\+0x1d> movb	#40, 12,SP
0+0116 <t2\+0x21> movb	#39, 3,\+SP
0+011a <t2\+0x25> movb	#20, 14,SP
0+011e <t2\+0x29> movw	#0+3210 <bb\+0xa10>, 0+3456 <bb\+0xc56>
0+0124 <t2\+0x2f> movw	#0+4040 <bb\+0x1840>, 12,SP
0+0129 <t2\+0x34> movw	#0+3900 <bb\+0x1100>, 3,\+SP
0+012e <t2\+0x39> movw	#0+2000 <max9b\+0x1f01>, 14,SP
@


1.6
log
@	* gas/m68hc11/insns.d: Quote dots.
	* gas/m68hc11/opers12.d: Likewise.
@
text
@d3 1
a3 1
#name: opers
d29 1
a29 2
0+003d <L1\+0x34> ldd	9,PC
[	]+3f: R_M68HC12_8	\.text
d99 15
a113 15
0+00fb <t2\+0x6> leas	110,SP
0+00ff <t2\+0xa> leay	10,X
0+0103 <t2\+0xe> leas	10240,Y
0+0107 <t2\+0x12> leas	255,PC
0+010b <t2\+0x16> leas	0,PC
0+010f <t2\+0x1a> leas	255,PC
0+0113 <t2\+0x1e> leas	0,PC
0+0117 <t2\+0x22> movb	#23, 0+2345 <max9b\+0x2246>
0+011c <t2\+0x27> movb	#40, 12,SP
0+0120 <t2\+0x2b> movb	#39, 3,\+SP
0+0124 <t2\+0x2f> movb	#20, 14,SP
0+0128 <t2\+0x33> movw	#0+3210 <bb\+0xa10>, 0+3456 <bb\+0xc56>
0+012e <t2\+0x39> movw	#0+4040 <bb\+0x1840>, 12,SP
0+0133 <t2\+0x3e> movw	#0+3900 <bb\+0x1100>, 3,\+SP
0+0138 <t2\+0x43> movw	#0+2000 <max9b\+0x1f01>, 14,SP
@


1.5
log
@	* gas/m68hc11/all.exp: Run the new test.
	* gas/m68hc11/insns12.s: New file to test specific 68HC12 insns.
	* gas/m68hc11/insns12.d: New file.
	* gas/m68hc11/branchs12.s: New test.
	* gas/m68hc11/branchs12.d: New test.

	* gas/m68hc11/all_insns.d: Dump the relocs to verify that they
	are against symbols and not sections (for linker relaxation).
	* gas/m68hc11/insns-dwarf2.d: Likewise.
	* gas/m68hc11/insns.d: Likewise.
	* gas/m68hc11/lbranch.d: Likewise.
	* gas/m68hc11/lbranch-dwarf2.d: Likewise.
	* gas/m68hc11/opers12.d: Likewise.
	* gas/m68hc11/opers12-dwarf2.d: Likewise.
@
text
@d30 1
a30 1
[	]+3f: R_M68HC12_8	.text
@


1.4
log
@	* gas/m68hc11/opers12.s: Add test for disassembler bug with movb
	instruction.
	* gas/m68hc11/opers12.d: Likewise.
	* gas/m68hc11/opers12-dwarf2.d: Likewise.
@
text
@d1 1
a1 1
#objdump: -d --prefix-addresses
d8 107
a114 91
0+000 <start> anda	\[12,X\]
0+004 <start\+0x4> ldaa	#10
0+006 <start\+0x6> ldx	0+009 <L1>
0+009 <L1> ldy	0,X
0+00b <L1\+0x2> addd	1,Y
0+00d <L1\+0x4> subd	-1,Y
0+00f <L1\+0x6> eora	15,Y
0+011 <L1\+0x8> eora	-16,Y
0+013 <L1\+0xa> eorb	16,Y
0+016 <L1\+0xd> eorb	-17,Y
0+019 <L1\+0x10> oraa	128,SP
0+01c <L1\+0x13> orab	-128,SP
0+01f <L1\+0x16> orab	255,X
0+022 <L1\+0x19> orab	-256,X
0+025 <L1\+0x1c> anda	256,X
0+029 <L1\+0x20> andb	-257,X
0+02d <L1\+0x24> anda	\[12,X\]
0+031 <L1\+0x28> ldaa	\[257,Y\]
0+035 <L1\+0x2c> ldab	\[32767,SP\]
0+039 <L1\+0x30> ldd	\[32768,PC\]
0+03d <L1\+0x34> ldd	9,PC
0+040 <L1\+0x37> std	A,X
0+042 <L1\+0x39> ldx	B,X
0+044 <L1\+0x3b> stx	D,Y
0+046 <L1\+0x3d> addd	1,\+X
0+048 <L1\+0x3f> addd	2,\+X
0+04a <L1\+0x41> addd	8,\+X
0+04c <L1\+0x43> addd	1,SP\+
0+04e <L1\+0x45> addd	2,SP\+
0+050 <L1\+0x47> addd	8,SP\+
0+052 <L1\+0x49> subd	1,\-Y
0+054 <L1\+0x4b> subd	2,\-Y
0+056 <L1\+0x4d> subd	8,\-Y
0+058 <L1\+0x4f> addd	1,Y\-
0+05a <L1\+0x51> addd	2,Y\-
0+05c <L1\+0x53> addd	8,Y\-
0+05e <L1\+0x55> std	\[D,X\]
0+060 <L1\+0x57> std	\[D,Y\]
0+062 <L1\+0x59> std	\[D,SP\]
0+064 <L1\+0x5b> std	\[D,PC\]
0+066 <L1\+0x5d> beq	0+009 <L1>
0+068 <L1\+0x5f> lbeq	0+000 <start>
0+06c <L1\+0x63> lbcc	0+0bc <L2>
0+070 <L1\+0x67> movb	0+000 <start>, 1,X
0+075 <L1\+0x6c> movw	1,X, 0+000 <start>
0+07a <L1\+0x71> movb	0+000 <start>, 1,\+X
0+07f <L1\+0x76> movb	0+000 <start>, 1,\-X
0+084 <L1\+0x7b> movb	#23, 1,\-SP
0+088 <L1\+0x7f> movb	0+009 <L1>, 0+0bc <L2>
0+08e <L1\+0x85> movb	0+009 <L1>, A,X
0+093 <L1\+0x8a> movw	0+009 <L1>, B,X
0+098 <L1\+0x8f> movw	0+009 <L1>, D,X
0+09d <L1\+0x94> movw	D,X, A,X
0+0a1 <L1\+0x98> movw	B,SP, D,PC
0+0a5 <L1\+0x9c> movw	B,SP, 0+009 <L1>
0+0aa <L1\+0xa1> movw	B,SP, 1,X
0+0ae <L1\+0xa5> movw	D,X, A,Y
0+0b2 <L1\+0xa9> trap	#48
0+0b4 <L1\+0xab> trap	#57
0+0b6 <L1\+0xad> trap	#64
0+0b8 <L1\+0xaf> trap	#128
0+0ba <L1\+0xb1> trap	#255
0+0bc <L2> movw	1,X, 2,X
0+0c0 <L2\+0x4> movw	0+0ffff <bb\+0xd7ff>, 0000ffff <bb\+0xd7ff>
0+0c6 <L2\+0xa> movw	0+0ffff <bb\+0xd7ff>, 1,X
0+0cb <L2\+0xf> movw	#0+0ffff <bb\+0xd7ff>, 1,X
0+0d0 <L2\+0x14> movw	0+03 <start\+0x3>, 0+08 <start\+0x8>
0+0d6 <L2\+0x1a> movw	#0+03 <start\+0x3>, 0+03 <start\+0x3>
0+0dc <L2\+0x20> movw	#0+03 <start\+0x3>, 1,X
0+0e1 <L2\+0x25> movw	0+03 <start\+0x3>, 1,X
0+0e6 <L2\+0x2a> movw	0+03 <start\+0x3>, 2,X
0+0eb <L2\+0x2f> movw	0+04 <start\+0x4>, -2,X
0+0f0 <L2\+0x34> rts
0+0f1 <post_indexed_pb> leas	0,X
0+0f5 <t2> leax	4,Y
0+0f7 <t2\+0x2> leax	100,X
0+0fb <t2\+0x6> leas	110,SP
0+0ff <t2\+0xa> leay	10,X
0+103 <t2\+0xe> leas	10240,Y
0+107 <t2\+0x12> leas	255,PC
0+10b <t2\+0x16> leas	0,PC
0+10f <t2\+0x1a> leas	255,PC
0+113 <t2\+0x1e> leas	0,PC
0+117 <t2\+0x22> movb	#23, 0+2345 <max9b\+0x2246>
0+11c <t2\+0x27> movb	#40, 12,SP
0+120 <t2\+0x2b> movb	#39, 3,\+SP
0+124 <t2\+0x2f> movb	#20, 14,SP
0+128 <t2\+0x33> movw	#0+3210 <bb\+0xa10>, 0+3456 <bb\+0xc56>
0+12e <t2\+0x39> movw	#0+4040 <bb\+0x1840>, 12,SP
0+133 <t2\+0x3e> movw	#0+3900 <bb\+0x1100>, 3,\+SP
0+138 <t2\+0x43> movw	#0+2000 <max9b\+0x1f01>, 14,SP
@


1.3
log
@Fix gas 68HC12 indexed addressing code generation
@
text
@d91 8
@


1.3.2.1
log
@	* gas/m68hc11/opers12.s: Add test for disassembler bug with movb
	instruction.
	* gas/m68hc11/opers12.d: Likewise.
	* gas/m68hc11/opers12-dwarf2.d: Likewise.
@
text
@a90 8
0+117 <t2\+0x22> movb	#23, 0+2345 <max9b\+0x2246>
0+11c <t2\+0x27> movb	#40, 12,SP
0+120 <t2\+0x2b> movb	#39, 3,\+SP
0+124 <t2\+0x2f> movb	#20, 14,SP
0+128 <t2\+0x33> movw	#0+3210 <bb\+0xa10>, 0+3456 <bb\+0xc56>
0+12e <t2\+0x39> movw	#0+4040 <bb\+0x1840>, 12,SP
0+133 <t2\+0x3e> movw	#0+3900 <bb\+0x1100>, 3,\+SP
0+138 <t2\+0x43> movw	#0+2000 <max9b\+0x1f01>, 14,SP
@


1.2
log
@Fix movw/movb operands for 68HC12
@
text
@d28 1
a28 1
0+03d <L1\+0x34> ldd	0,PC
d71 3
a73 3
0+0c0 <L2\+0x4> movw	0+0ffff <L2\+0xff43>, 0000ffff <L2\+0xff43>
0+0c6 <L2\+0xa> movw	0+0ffff <L2\+0xff43>, 1,X
0+0cb <L2\+0xf> movw	#0+0ffff <L2\+0xff43>, 1,X
d81 10
a90 1

@


1.1
log
@Applied Stephane Carrez <Stephane.Carrez@@worldnet.fr> patches to add support
for m68hc11 and m68hc12 processors.
@
text
@d70 12
a81 1
0+0bc <L2> rts
@

