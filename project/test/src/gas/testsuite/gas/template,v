head	1.1;
branch	1.1.1;
access;
symbols
	binutils-2_24-branch:1.1.1.1.0.48
	binutils-2_24-branchpoint:1.1.1.1
	binutils-2_21_1:1.1.1.1
	binutils-2_23_2:1.1.1.1
	binutils-2_23_1:1.1.1.1
	binutils-2_23:1.1.1.1
	binutils-2_23-branch:1.1.1.1.0.46
	binutils-2_23-branchpoint:1.1.1.1
	binutils-2_22_branch:1.1.1.1.0.44
	binutils-2_22:1.1.1.1
	binutils-2_22-branch:1.1.1.1.0.42
	binutils-2_22-branchpoint:1.1.1.1
	binutils-2_21:1.1.1.1
	binutils-2_21-branch:1.1.1.1.0.40
	binutils-2_21-branchpoint:1.1.1.1
	binutils-2_20_1:1.1.1.1
	binutils-2_20:1.1.1.1
	binutils-arc-20081103-branch:1.1.1.1.0.38
	binutils-arc-20081103-branchpoint:1.1.1.1
	binutils-2_20-branch:1.1.1.1.0.36
	binutils-2_20-branchpoint:1.1.1.1
	dje-cgen-play1-branch:1.1.1.1.0.34
	dje-cgen-play1-branchpoint:1.1.1.1
	arc-20081103-branch:1.1.1.1.0.32
	arc-20081103-branchpoint:1.1.1.1
	binutils-2_19_1:1.1.1.1
	binutils-2_19:1.1.1.1
	binutils-2_19-branch:1.1.1.1.0.30
	binutils-2_19-branchpoint:1.1.1.1
	binutils-2_18:1.1.1.1
	binutils-2_18-branch:1.1.1.1.0.28
	binutils-2_18-branchpoint:1.1.1.1
	binutils-csl-coldfire-4_1-32:1.1.1.1
	binutils-csl-sourcerygxx-4_1-32:1.1.1.1
	binutils-csl-innovasic-fido-3_4_4-33:1.1.1.1
	binutils-csl-sourcerygxx-3_4_4-32:1.1.1.1
	binutils-csl-coldfire-4_1-30:1.1.1.1
	binutils-csl-sourcerygxx-4_1-30:1.1.1.1
	binutils-csl-coldfire-4_1-28:1.1.1.1
	binutils-csl-sourcerygxx-4_1-29:1.1.1.1
	binutils-csl-sourcerygxx-4_1-28:1.1.1.1
	binutils-csl-arm-2006q3-27:1.1.1.1
	binutils-csl-sourcerygxx-4_1-27:1.1.1.1
	binutils-csl-arm-2006q3-26:1.1.1.1
	binutils-csl-sourcerygxx-4_1-26:1.1.1.1
	binutils-csl-sourcerygxx-4_1-25:1.1.1.1
	binutils-csl-sourcerygxx-4_1-24:1.1.1.1
	binutils-csl-sourcerygxx-4_1-23:1.1.1.1
	binutils-csl-sourcerygxx-4_1-21:1.1.1.1
	binutils-csl-arm-2006q3-21:1.1.1.1
	binutils-csl-sourcerygxx-4_1-22:1.1.1.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.1.1.1
	binutils-csl-sourcerygxx-4_1-20:1.1.1.1
	binutils-csl-arm-2006q3-19:1.1.1.1
	binutils-csl-sourcerygxx-4_1-19:1.1.1.1
	binutils-csl-sourcerygxx-4_1-18:1.1.1.1
	binutils-csl-renesas-4_1-9:1.1.1.1
	binutils-csl-sourcerygxx-3_4_4-25:1.1.1.1
	binutils-csl-renesas-4_1-8:1.1.1.1
	binutils-csl-renesas-4_1-7:1.1.1.1
	binutils-csl-renesas-4_1-6:1.1.1.1
	binutils-csl-sourcerygxx-4_1-17:1.1.1.1
	binutils-csl-sourcerygxx-4_1-14:1.1.1.1
	binutils-csl-sourcerygxx-4_1-15:1.1.1.1
	binutils-csl-sourcerygxx-4_1-13:1.1.1.1
	binutils-2_17:1.1.1.1
	binutils-csl-sourcerygxx-4_1-12:1.1.1.1
	binutils-csl-sourcerygxx-3_4_4-21:1.1.1.1
	binutils-csl-wrs-linux-3_4_4-24:1.1.1.1
	binutils-csl-wrs-linux-3_4_4-23:1.1.1.1
	binutils-csl-sourcerygxx-4_1-9:1.1.1.1
	binutils-csl-sourcerygxx-4_1-8:1.1.1.1
	binutils-csl-sourcerygxx-4_1-7:1.1.1.1
	binutils-csl-arm-2006q1-6:1.1.1.1
	binutils-csl-sourcerygxx-4_1-6:1.1.1.1
	binutils-csl-wrs-linux-3_4_4-22:1.1.1.1
	binutils-csl-coldfire-4_1-11:1.1.1.1
	binutils-csl-sourcerygxx-3_4_4-19:1.1.1.1
	binutils-csl-coldfire-4_1-10:1.1.1.1
	binutils-csl-sourcerygxx-4_1-5:1.1.1.1
	binutils-csl-sourcerygxx-4_1-4:1.1.1.1
	binutils-csl-wrs-linux-3_4_4-21:1.1.1.1
	binutils-csl-morpho-4_1-4:1.1.1.1
	binutils-csl-sourcerygxx-3_4_4-17:1.1.1.1
	binutils-csl-wrs-linux-3_4_4-20:1.1.1.1
	binutils-2_17-branch:1.1.1.1.0.26
	binutils-2_17-branchpoint:1.1.1.1
	binutils-csl-2_17-branch:1.1.1.1.0.24
	binutils-csl-2_17-branchpoint:1.1.1.1
	binutils-csl-gxxpro-3_4-branch:1.1.1.1.0.22
	binutils-csl-gxxpro-3_4-branchpoint:1.1.1.1
	binutils-2_16_1:1.1.1.1
	binutils-csl-arm-2005q1b:1.1.1.1
	binutils-2_16:1.1.1.1
	binutils-csl-arm-2005q1a:1.1.1.1
	binutils-csl-arm-2005q1-branch:1.1.1.1.0.20
	binutils-csl-arm-2005q1-branchpoint:1.1.1.1
	binutils-2_16-branch:1.1.1.1.0.18
	binutils-2_16-branchpoint:1.1.1.1
	csl-arm-2004-q3d:1.1.1.1
	csl-arm-2004-q3:1.1.1.1
	binutils-2_15:1.1.1.1
	binutils-2_15-branchpoint:1.1.1.1
	csl-arm-2004-q1a:1.1.1.1
	csl-arm-2004-q1:1.1.1.1
	binutils-2_15-branch:1.1.1.1.0.16
	cagney_bfdfile-20040213-branch:1.1.1.1.0.14
	cagney_bfdfile-20040213-branchpoint:1.1.1.1
	cagney_bigcore-20040122-branch:1.1.1.1.0.12
	cagney_bigcore-20040122-branchpoint:1.1.1.1
	csl-arm-2003-q4:1.1.1.1
	binutils-2_14:1.1.1.1
	binutils-2_14-branch:1.1.1.1.0.10
	binutils-2_14-branchpoint:1.1.1.1
	binutils-2_13_2_1:1.1.1.1
	binutils-2_13_2:1.1.1.1
	binutils-2_13_1:1.1.1.1
	binutils-2_13:1.1.1.1
	binutils-2_13-branchpoint:1.1.1.1
	binutils-2_13-branch:1.1.1.1.0.8
	binutils-2_12_1:1.1.1.1
	binutils-2_12:1.1.1.1
	binutils-2_12-branch:1.1.1.1.0.6
	binutils-2_12-branchpoint:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.1
	binutils-2_11_2:1.1.1.1
	binutils-2_11_1:1.1.1.1
	binutils-2_11:1.1.1.1
	x86_64versiong3:1.1.1.1
	binutils-2_11-branch:1.1.1.1.0.4
	binutils-2_10_1:1.1.1.1
	binutils-2_10:1.1.1.1
	binutils-2_10-branch:1.1.1.1.0.2
	binutils-2_10-branchpoint:1.1.1.1
	binutils_latest_snapshot:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.1
date	99.05.03.07.28.46;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.03.07.28.46;	author rth;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#
# This is sort of a prototype test case, which parses the listing output
# from the assembler.  Later, more prototypes should be added for cases
# where objdump gets run over the .o file, and anything else like that...
#
# When you write a test case that uses the listing output, just copy this
# file (trimming down the overly-verbose comments a little), and
# adjust it to do what you need.
#
# Remember that any ".exp" file found in the tree will be processed by
# dejagnu.

#
# FIRST SAMPLE TEST CASE
#

proc do_foo {} {
# This string is used below when printing out a success or failure message.
# If more than one test is run by a given .exp file, it'd be nice to include
# the name of the input file.
    set testname "foo.s: multi-register tweaking and frobnication"

# I use this as a flag to record whether the test case passed.  If this
# flag is still clear when EOF is reached, this test fails.  If there are
# two or more patterns, and I need to see all of them, I'll create N variables
# and check if the sum is N.
    set x 0

# Call gas_start with two arguments: The input file name (which it'll search
# for in $srcdir/$subdir, that is, the source directory where the .exp file
# is), and a (possibly empty) string of options to pass to the assembler.
    gas_start "foo.s" "-al"

# Now I just iterate over all the output lines, looking for what I want
# to see.  Since each pattern explicitly will not span line breaks, there's
# also a pattern for lines that don't match anything else.   (Is it safe to
# use ".*" for patterns not crossing line breaks? I don't think "$" does the
# right thing for that, in any case.  I should check into whether the extra
# pattern is even needed.

# Apparently CRLF is received when using ptys for subprocesses; hence the
# \r\n for matching line number 3.

# Note that if you use "{ ... }" for the expect clause, you can't have
# comments inside it.

# This test case is kinda bogus in that seeing either a word of all zeros
# at address zero or a C-style comment on line three that says "Looking for
# C comments" (with very specific punctuation and whitespace) will cause
# it to pass this test.  Usually 
    while 1 {
	expect {
	    -re "^ +\[0-9\]+ 0000 00000000\[^\n\]*\n"		{ set x 1 }
	    -re "^ +3\[ \t\]+/. Looking for C comments. ./\r\n"	{ set x 1 }
	    -re "\[^\n\]*\n"				{ }
	    timeout				{ perror "timeout\n"; break }
	    eof					{ break }
	}
    }
# This was intended to do any cleanup necessary.  It kinda looks like it isn't
# needed, but just in case, please keep it in for now.
    gas_finish

# Did we find what we were looking for?  If not, flunk it.
    if $x then { pass $testname } else { fail $testname }
}

# Now actually run the test.  It can be conditionalized if the test is
# not appropriate for all targets.  The proc "istarget" checks a generalized
# form of the target name, so that (e.g.) "m68332-unknown-aout" would match
# here.  So far, I think only the CPU name is actually ever altered.
if [istarget m68k-*] then {
    do_foo
}




#
# SECOND SAMPLE TEST CASE
#

# This is a tiny bit like the C compiler torture tests, in that it'll run
# the assembler with the power set of the list of options supplied.
#
# The first argument is the test file name; the second is arguments that
# are always to be provided; the third is a space-separated list of options
# which are optional (ending in ">" if output should be ignored, like "-a>");
# the fourth is the name of the test.  So far, only binary options are handled
# this way; N-way options (like CPU type for m68k) aren't handled yet.
#
# The variable $stdoptlist usually has a reasonable set of optional options
# for this target.

# No, PIC isn't supported yet.  This is only an example.
gas_test "quux.s" "-K" $stdoptlist "use of quuxes in PIC mode"
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

