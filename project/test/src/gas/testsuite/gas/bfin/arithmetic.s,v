head	1.4;
access;
symbols
	binutils-2_24-branch:1.4.0.12
	binutils-2_24-branchpoint:1.4
	binutils-2_21_1:1.4
	binutils-2_23_2:1.4
	binutils-2_23_1:1.4
	binutils-2_23:1.4
	binutils-2_23-branch:1.4.0.10
	binutils-2_23-branchpoint:1.4
	binutils-2_22_branch:1.4.0.8
	binutils-2_22:1.4
	binutils-2_22-branch:1.4.0.6
	binutils-2_22-branchpoint:1.4
	binutils-2_21:1.4
	binutils-2_21-branch:1.4.0.4
	binutils-2_21-branchpoint:1.4
	binutils-2_20_1:1.4
	binutils-2_20:1.4
	binutils-arc-20081103-branch:1.3.0.8
	binutils-arc-20081103-branchpoint:1.3
	binutils-2_20-branch:1.4.0.2
	binutils-2_20-branchpoint:1.4
	dje-cgen-play1-branch:1.3.0.6
	dje-cgen-play1-branchpoint:1.3
	arc-20081103-branch:1.3.0.4
	arc-20081103-branchpoint:1.3
	binutils-2_19_1:1.3
	binutils-2_19:1.3
	binutils-2_19-branch:1.3.0.2
	binutils-2_19-branchpoint:1.3
	binutils-2_18:1.1
	binutils-2_18-branch:1.1.0.6
	binutils-2_18-branchpoint:1.1
	binutils-csl-coldfire-4_1-32:1.1
	binutils-csl-sourcerygxx-4_1-32:1.1
	binutils-csl-innovasic-fido-3_4_4-33:1.1
	binutils-csl-coldfire-4_1-30:1.1
	binutils-csl-sourcerygxx-4_1-30:1.1
	binutils-csl-coldfire-4_1-28:1.1
	binutils-csl-sourcerygxx-4_1-29:1.1
	binutils-csl-sourcerygxx-4_1-28:1.1
	binutils-csl-arm-2006q3-27:1.1
	binutils-csl-sourcerygxx-4_1-27:1.1
	binutils-csl-arm-2006q3-26:1.1
	binutils-csl-sourcerygxx-4_1-26:1.1
	binutils-csl-sourcerygxx-4_1-25:1.1
	binutils-csl-sourcerygxx-4_1-24:1.1
	binutils-csl-sourcerygxx-4_1-23:1.1
	binutils-csl-sourcerygxx-4_1-21:1.1
	binutils-csl-arm-2006q3-21:1.1
	binutils-csl-sourcerygxx-4_1-22:1.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.1
	binutils-csl-sourcerygxx-4_1-20:1.1
	binutils-csl-arm-2006q3-19:1.1
	binutils-csl-sourcerygxx-4_1-19:1.1
	binutils-csl-sourcerygxx-4_1-18:1.1
	binutils-csl-renesas-4_1-9:1.1
	binutils-csl-renesas-4_1-8:1.1
	binutils-csl-renesas-4_1-7:1.1
	binutils-csl-renesas-4_1-6:1.1
	binutils-csl-sourcerygxx-4_1-17:1.1
	binutils-csl-sourcerygxx-4_1-14:1.1
	binutils-csl-sourcerygxx-4_1-15:1.1
	binutils-csl-sourcerygxx-4_1-13:1.1
	binutils-2_17:1.1
	binutils-csl-sourcerygxx-4_1-12:1.1
	binutils-csl-sourcerygxx-3_4_4-21:1.1
	binutils-csl-sourcerygxx-4_1-9:1.1
	binutils-csl-sourcerygxx-4_1-8:1.1
	binutils-csl-sourcerygxx-4_1-7:1.1
	binutils-csl-arm-2006q1-6:1.1
	binutils-csl-sourcerygxx-4_1-6:1.1
	binutils-csl-coldfire-4_1-11:1.1
	binutils-csl-sourcerygxx-3_4_4-19:1.1
	binutils-csl-coldfire-4_1-10:1.1
	binutils-csl-sourcerygxx-4_1-5:1.1
	binutils-csl-sourcerygxx-4_1-4:1.1
	binutils-csl-morpho-4_1-4:1.1
	binutils-csl-sourcerygxx-3_4_4-17:1.1
	binutils-2_17-branch:1.1.0.4
	binutils-2_17-branchpoint:1.1
	binutils-csl-2_17-branch:1.1.0.2
	binutils-csl-2_17-branchpoint:1.1
	binutils_latest_snapshot:1.4;
locks; strict;
comment	@# @;


1.4
date	2009.09.04.02.48.08;	author jiez;	state Exp;
branches;
next	1.3;

1.3
date	2008.03.26.16.48.32;	author bernds;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.26.16.21.10;	author bernds;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.30.15.10.16;	author clm;	state Exp;
branches;
next	;


desc
@@


1.4
log
@	* gas/bfin/arithmetic.s, gas/bfin/arithmetic.d: Add check
	for (IU) option for multiply and multiply-accumulate to
	data register instructon.
@
text
@	.text
	.global abs
abs:
	a0 = abs a0;
	A0 = ABS A1;
	A1 = Abs a0;
	a1 = aBs A1;
	A1 = abs a1, a0 = ABS A0;
	r0 = abs r2;

	.text
	.global add
add:
	sp = sp + P0;
	SP = SP + P2;
	FP = p1 + fp;

	R7 = r7 + r2 (NS);
	r6 = r6 + r0 (s);
	
	r4.L = R2.h + r0.L (s);
	r5.H = R1.H + R1.L (S);
	r6.L = R6.L + r5.l (NS);

	.text
	.global add_sub_prescale_down
add_sub_prescale_down:
	r4.l = r0 + r1 (RND20);
	R3.H = r5 + r0 (rnd20);
	r1.L = r7 - R5 (rND20);

	.text
	.global add_sub_prescale_up
add_sub_prescale_up:
	r2.L = R0 + R1 (rnd12);
	r7.H = r7 + r6 (RND12);
	r5.l = r3 - R2 (rNd12);
	r2.h = R1 - R2 (Rnd12);

	.text
	.global add_immediate
add_immediate:
	R5 += -64;
	r2 += 63;
	i0 += 2;
	I3 += 2;
	I2 += 4;
	i1 += 4;
	P0 += 4;
	sp += 16;
	FP += -32;

	.text
	.global divide_primitive
divide_primitive:
	divs (r3, r5);
	divq (R3, R5);

	.text
	.global expadj
expadj:
	r6.L = EXPADJ (r5, r4.l);
	R5.l = ExpAdj (r0.h, r1.l);
	R4.L = expadj (R3, R5.L) (V);

	.text
	.global max
max:
	R6 = MAX (r5, R2);
	r0 = max (r1, r3);

	.text 
	.global min
min:
	r5 = mIn (r2, R3);
	R4 = Min (r7, R0);


	.text
	.global modify_decrement
modify_decrement:
	A0 -= A1;
	a0 -= a1 (w32);
	fp -= p2;
	SP -= P0;
	I3 -= M0;
	i1 -= m1;

	.text
	.global modify_increment
modify_increment:
	a0 += a1;
	A0 += A1 (w32);
	Sp += P1 (Brev);
	P5 += Fp (BREV);
	i2 += M2;
	I0 += m0 (brev);
	r7 = ( a0 += a1);
	r6.l = (A0 += a1);
	R0.H = (a0 += A1);

	.text
	.global multiply16
multiply16:
	R0.l = r1.h * r2.l;
	r1.L = r5.H * r0.H (s2rnd);
	r7.l = r3.l * r3.H (FU);
	r4 = r2.H * r5.H (iSS2);
	r0 = r1.l * r3.l (is);
	r6 = R5.H * r0.l;

	r2.h = r7.l * r6.H (M, iu);
	r3.H = r5.H * r0.L;
	R0.H = r1.L * r1.H (M);
	r1 = r7.H * r6.L (M, is);
	R5 = r0.l * r2.h;
	r3 = r6.H * r0.H (m);

	.text
	.global multiply32
multiply32:
	R4 *= r0;
	r7 *= R2;

	.text
	.global multiply_accumulate
multiply_accumulate:
	a0 = r5.l * R7.H (w32);
	a0 = r0.h * r0.l;
	A0 += R2.L * r3.H (FU);
	A0 += r4.h * r1.L;
	a0 -= r7.l * r6.H (Is);
	A0 -= R5.H * r2.H;

	a1 = r1.L * r0.H (M);
	A1 = r2.h * r0.L;
	A1 = R7.H * R6.L (M, W32);
	a1 += r3.l * r2.l (fu);
	a1 += R6.H * r1.L;
	A1 -= r0.L * R3.H (is);
	a1 -= r2.l * r7.h;

	.text
	.global multiply_accumulate_half
multiply_accumulate_half:
	r7.l = (a0 = r6.H * r5.L);
	r0.L = (A0 = r1.h * R2.l) (tfu);
	R2.L = (a0 += r5.L * r4.L);
	r3.l = (A0 += r7.H * r6.h) (T);
	r0.l = (a0 -= r3.h * r2.h);
	r1.l = (a0 -= r5.L * r4.L) (iH);

	r1.H = (a1 = r1.l * R0.H);
	r2.h = (A1 = r0.H * r3.L) (M, Iss2);
	R6.H = (a1 += r7.l * r7.H);
	r7.h = (a1 += R2.L * R3.L) (S2rnd);
	r6.H = (A1 -= R4.h * r2.h);
	r5.h = (a1 -= r3.H * r7.L) (M, tFu);

	.text
	.global multiply_accumulate_data_reg
multiply_accumulate_data_reg:
	R0 = (A0 = R1.L * R2.L);
	R2 = (A0 = r1.l * r2.l) (is);
	r4 = (a0 += r7.h * r6.L);
	r6 = (A0 += R5.L * r3.h) (s2RND);
	R6 = (a0 -= r2.h * r7.l);
	r4 = (A0 -= R0.L * r6.H) (FU);

	r7 = (a1 = r0.h * r1.l);
	R5 = (A1 = r2.H * r3.H) (M, fu);
	R3 = (A1 += r7.l * r5.l);
	r1 = (a1 += r2.h * r7.h) (iss2);
	r3 = (A1 -= r0.l * R0.H);
	R5 = (a1 -= R2.l * R7.h) (m, is);
	r7 = (a1+=r1.h*r3.h) (IU);

	.text
	.global negate
negate:
	R5 = - r0;
	r7 = -R2(s);
	R7 = -r2(Ns);
	A0 = -A0;
	a0 = -a1;
	A1 = -A0;
	a1 = -A1;
	a1 = -a1, a0 = -a0;

	.text
	.global round_half
round_half:
	R5.L = r3 (rnd);
	r6.H = r0 (RND);

	.text
	.global saturate
saturate:
	A0 = A0 (S);
	a1 = a1 (s);
	A1 = a1 (S), a0 = A0 (s);

	.text
	.global signbits
signbits:
	R5.l = signbits r0;
	r0.L = SIGNbits r7.H;
	r3.l = signBits A0;
	r7.L = SIGNBITS a1;

	.text
	.global subtract
subtract:
	R5 = R3 - R0;
	R7 = R7 - r0 (S);
	r3 = r2 - r1 (ns);

	r5.l = R6.H - R7.h (s);
	r0.H = r3.l - r3.h (NS);

	.text
	.global subtract_immediate
subtract_immediate:
	I2 -= 2;
	i0 -= 4;

@


1.3
log
@gas/testsuite/:
	From Robin Getz  <rgetz@@blackfin.uclinux.org>
	* gas/bfin/arithmetic.d: Update to reflect spaces/capitalization in
	recent changes in opcodes/bfin-dis.c.
	gas/bfin/arithmetic.s: Likewise.
	gas/bfin/bit.d: Likewise.
	gas/bfin/bit2.d: Likewise.
	gas/bfin/control_code.d: Likewise.
	gas/bfin/control_code2.d: Likewise.
	gas/bfin/event.d: Likewise.
	gas/bfin/event2.d: Likewise.
	gas/bfin/flow.d: Likewise.
	gas/bfin/flow2.d: Likewise.
	gas/bfin/load.d: Likewise.
	gas/bfin/logical.d: Likewise.
	gas/bfin/logical2.d: Likewise.
	gas/bfin/move.d: Likewise.
	gas/bfin/move2.d: Likewise.
	gas/bfin/parallel.d: Likewise.
	gas/bfin/parallel2.d: Likewise.
	gas/bfin/parallel3.d: Likewise.
	gas/bfin/parallel4.d: Likewise.
	gas/bfin/shift.d: Likewise.
	gas/bfin/shift2.d: Likewise.
	gas/bfin/stack.d: Likewise.
	gas/bfin/stack2.d: Likewise.
	gas/bfin/store.d: Likewise.
	gas/bfin/vector.d: Likewise.
	gas/bfin/vector2.d: Likewise.
	gas/bfin/video.d: Likewise.
	gas/bfin/video2.d: Likewise.

opcodes/:
	* bfin-dis.c: (c_uimm4s4d, c_imm5d, c_imm7d, c_imm16d, c_uimm16s4d,
	c_imm32, c_huimm32e): Define.
	(constant_formats): Add flags for printing decimal, leading spaces, and
	exact symbols.
	(comment, parallel): Add global flags in all disassembly.
	(fmtconst): Take advantage of new flags, and print default in hex.
	(fmtconst_val): Likewise.
	(decode_macfunc): Be consistant with spaces, tabs, comments,
	capitalization in disassembly, fix minor coding style issues.
	(reg_names, amod0, amod1, amod0amod2, aligndir, get_allreg): Likewise.
	(decode_ProgCtrl_0, decode_PushPopMultiple_0, decode_CCflag_0,
	decode_CC2dreg_0, decode_CC2stat_0, decode_BRCC_0, decode_UJUMP_0,
	decode_REGMV_0, decode_ALU2op_0, decode_PTR2op_0, decode_LOGI2op_0,
	decode_COMP3op_0, decode_COMPI2opD_0, decode_COMPI2opP_0,
	decode_LDSTpmod_0, decode_dagMODim_0, decode_dagMODik_0,
	decode_dspLDST_0, decode_LDST_0, decode_LDSTiiFP_0, decode_LDSTii_0,
	decode_LoopSetup_0, decode_LDIMMhalf_0, decode_CALLa_0,
	decode_LDSTidxI_0, decode_linkage_0, decode_dsp32alu_0,
	decode_dsp32shift_0, decode_dsp32shiftimm_0, decode_pseudodbg_assert_0,
	_print_insn_bfin, print_insn_bfin): Likewise.
@
text
@d176 1
a176 1
	r7 = (a1+=r1.h*r3.h);
@


1.2
log
@gas/
	* config/bfin-parse.y (check_macfunc_option): Allow (IU)
	option for multiply and multiply-accumulate to data register
	instruction.
	(check_macfuncs): Don't check if accumulator matches the data register
	here.
	(assign_macfunc): Check if accumulator matches the
	data register in each rule that moves to the data
	register.

gas/testsuite/
	* gas/bfin/arithmetic.s, gas/bfin/arithmetic.d: Add check
	for IU option.
	* gas/bfin/expected_errors.l, gas/bfin/expected_errors.s:
	Add check for mismatch of accumulator and data register.

opcodes/
	* bfin-dis.c (decode_dsp32mac_0): Decode (IU) option for
	multiply and multiply-accumulate to data register instruction.
@
text
@d176 1
a176 1
	r7 = (a1+=r1.h*r3.h) (IU);
@


1.1
log
@	* gas/bfin: New testsuite for bfin.
	* gas/all/gas.exp (bfin-*-*): Expected failure for alternate
	macro syntax.
@
text
@d176 1
@

