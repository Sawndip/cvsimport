head	1.1;
access;
symbols
	binutils-2_24-branch:1.1.0.20
	binutils-2_24-branchpoint:1.1
	binutils-2_21_1:1.1
	binutils-2_23_2:1.1
	binutils-2_23_1:1.1
	binutils-2_23:1.1
	binutils-2_23-branch:1.1.0.18
	binutils-2_23-branchpoint:1.1
	binutils-2_22_branch:1.1.0.16
	binutils-2_22:1.1
	binutils-2_22-branch:1.1.0.14
	binutils-2_22-branchpoint:1.1
	binutils-2_21:1.1
	binutils-2_21-branch:1.1.0.12
	binutils-2_21-branchpoint:1.1
	binutils-2_20_1:1.1
	binutils-2_20:1.1
	binutils-arc-20081103-branch:1.1.0.10
	binutils-arc-20081103-branchpoint:1.1
	binutils-2_20-branch:1.1.0.8
	binutils-2_20-branchpoint:1.1
	dje-cgen-play1-branch:1.1.0.6
	dje-cgen-play1-branchpoint:1.1
	arc-20081103-branch:1.1.0.4
	arc-20081103-branchpoint:1.1
	binutils-2_19_1:1.1
	binutils-2_19:1.1
	binutils-2_19-branch:1.1.0.2
	binutils-2_19-branchpoint:1.1
	binutils_latest_snapshot:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.08.26.10.03.24;	author jiez;	state Exp;
branches;
next	;


desc
@@


1.1
log
@	* config/bfin-parse.y (check_macfunc_option): Fix instruction
	mode checking.
	(asm_1): Check mode for 16-bit multiply instructions.

	testsuite/
	* gas/bfin/arith_mode.d: New test.
	* gas/bfin/arith_mode.s: New test.
	* gas/bfin/invalid_arith_mode.l: New test.
	* gas/bfin/invalid_arith_mode.s: New test.
	* gas/bfin/bfin.exp: Add arith_mode and invalid_arith_mode.
@
text
@	.text

	// Accumulator to Half D-register Moves

	R0.L = A0;
	R0.L = A0 (FU);
	R0.L = A0 (IS);
	R0.L = A0 (IU);
	R0.L = A0 (T);
	R0.L = A0 (TFU); // Not documented
	R0.L = A0 (S2RND);
	R0.L = A0 (ISS2);
	R0.L = A0 (IH);

	// Accumulator to D-register Moves

	R0 = A0;
	R0 = A0 (FU);
	R0 = A0 (IS); // Not documented
	R0 = A0 (IU); // Not documented
	R0 = A0 (S2RND);
	R0 = A0 (ISS2);

	// Multiply 16-Bit Operands to Half Dreg

	R0.H = R1.L * R2.H;
	R0.H = R1.L * R2.H (FU);
	R0.H = R1.L * R2.H (IS);
	R0.H = R1.L * R2.H (IU);
	R0.H = R1.L * R2.H (T);
	R0.H = R1.L * R2.H (TFU);
	R0.H = R1.L * R2.H (S2RND);
	R0.H = R1.L * R2.H (ISS2);
	R0.H = R1.L * R2.H (IH);

	// Multiply 16-Bit Operands to Dreg

	R0 = R1.L * R2.H;
	R0 = R1.L * R2.H (FU);
	R0 = R1.L * R2.H (IS);
	R0 = R1.L * R2.H (S2RND); // Not documented
	R0 = R1.L * R2.H (ISS2);

	// Multiply and Multiply-Accumulate to Accumulator

	A0 = R1.L * R2.H;
	A0 = R1.L * R2.H (FU);
	A0 = R1.L * R2.H (IS);
	A0 = R1.L * R2.H (W32);

	// Multiply and Multiply-Accumulate to Half-Register

	R0.L = (A0 = R1.L * R2.H);
	R0.L = (A0 = R1.L * R2.H) (FU);
	R0.L = (A0 = R1.L * R2.H) (IS);
	R0.L = (A0 = R1.L * R2.H) (IU);
	R0.L = (A0 = R1.L * R2.H) (T);
	R0.L = (A0 = R1.L * R2.H) (TFU);
	R0.L = (A0 = R1.L * R2.H) (S2RND);
	R0.L = (A0 = R1.L * R2.H) (ISS2);
	R0.L = (A0 = R1.L * R2.H) (IH);

	// Multiply and Multiply-Accumulate to Data Register

	R0 = (A0 = R1.L * R2.H);
	R0 = (A0 = R1.L * R2.H) (FU);
	R0 = (A0 = R1.L * R2.H) (IS);
	R0 = (A0 = R1.L * R2.H) (IU); // Not documented
	R0 = (A0 = R1.L * R2.H) (S2RND);
	R0 = (A0 = R1.L * R2.H) (ISS2);


@
