head	1.11;
access;
symbols
	binutils-2_24-branch:1.11.0.8
	binutils-2_24-branchpoint:1.11
	binutils-2_21_1:1.4
	binutils-2_23_2:1.11
	binutils-2_23_1:1.11
	binutils-2_23:1.11
	binutils-2_23-branch:1.11.0.6
	binutils-2_23-branchpoint:1.11
	binutils-2_22_branch:1.11.0.4
	binutils-2_22:1.11
	binutils-2_22-branch:1.11.0.2
	binutils-2_22-branchpoint:1.11
	binutils-2_21:1.4
	binutils-2_21-branch:1.4.0.4
	binutils-2_21-branchpoint:1.4
	binutils-2_20_1:1.4
	binutils-2_20:1.4
	binutils-arc-20081103-branch:1.3.0.8
	binutils-arc-20081103-branchpoint:1.3
	binutils-2_20-branch:1.4.0.2
	binutils-2_20-branchpoint:1.4
	dje-cgen-play1-branch:1.3.0.6
	dje-cgen-play1-branchpoint:1.3
	arc-20081103-branch:1.3.0.4
	arc-20081103-branchpoint:1.3
	binutils-2_19_1:1.3
	binutils-2_19:1.3
	binutils-2_19-branch:1.3.0.2
	binutils-2_19-branchpoint:1.3
	binutils-2_18:1.1
	binutils-2_18-branch:1.1.0.6
	binutils-2_18-branchpoint:1.1
	binutils-csl-coldfire-4_1-32:1.1
	binutils-csl-sourcerygxx-4_1-32:1.1
	binutils-csl-innovasic-fido-3_4_4-33:1.1
	binutils-csl-coldfire-4_1-30:1.1
	binutils-csl-sourcerygxx-4_1-30:1.1
	binutils-csl-coldfire-4_1-28:1.1
	binutils-csl-sourcerygxx-4_1-29:1.1
	binutils-csl-sourcerygxx-4_1-28:1.1
	binutils-csl-arm-2006q3-27:1.1
	binutils-csl-sourcerygxx-4_1-27:1.1
	binutils-csl-arm-2006q3-26:1.1
	binutils-csl-sourcerygxx-4_1-26:1.1
	binutils-csl-sourcerygxx-4_1-25:1.1
	binutils-csl-sourcerygxx-4_1-24:1.1
	binutils-csl-sourcerygxx-4_1-23:1.1
	binutils-csl-sourcerygxx-4_1-21:1.1
	binutils-csl-arm-2006q3-21:1.1
	binutils-csl-sourcerygxx-4_1-22:1.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.1
	binutils-csl-sourcerygxx-4_1-20:1.1
	binutils-csl-arm-2006q3-19:1.1
	binutils-csl-sourcerygxx-4_1-19:1.1
	binutils-csl-sourcerygxx-4_1-18:1.1
	binutils-csl-renesas-4_1-9:1.1
	binutils-csl-renesas-4_1-8:1.1
	binutils-csl-renesas-4_1-7:1.1
	binutils-csl-renesas-4_1-6:1.1
	binutils-csl-sourcerygxx-4_1-17:1.1
	binutils-csl-sourcerygxx-4_1-14:1.1
	binutils-csl-sourcerygxx-4_1-15:1.1
	binutils-csl-sourcerygxx-4_1-13:1.1
	binutils-2_17:1.1
	binutils-csl-sourcerygxx-4_1-12:1.1
	binutils-csl-sourcerygxx-3_4_4-21:1.1
	binutils-csl-sourcerygxx-4_1-9:1.1
	binutils-csl-sourcerygxx-4_1-8:1.1
	binutils-csl-sourcerygxx-4_1-7:1.1
	binutils-csl-arm-2006q1-6:1.1
	binutils-csl-sourcerygxx-4_1-6:1.1
	binutils-csl-coldfire-4_1-11:1.1
	binutils-csl-sourcerygxx-3_4_4-19:1.1
	binutils-csl-coldfire-4_1-10:1.1
	binutils-csl-sourcerygxx-4_1-5:1.1
	binutils-csl-sourcerygxx-4_1-4:1.1
	binutils-csl-morpho-4_1-4:1.1
	binutils-csl-sourcerygxx-3_4_4-17:1.1
	binutils-2_17-branch:1.1.0.4
	binutils-2_17-branchpoint:1.1
	binutils-csl-2_17-branch:1.1.0.2
	binutils-csl-2_17-branchpoint:1.1
	binutils_latest_snapshot:1.11;
locks; strict;
comment	@# @;


1.11
date	2011.03.29.05.54.41;	author vapier;	state Exp;
branches;
next	1.10;

1.10
date	2011.03.29.05.51.22;	author vapier;	state Exp;
branches;
next	1.9;

1.9
date	2011.03.29.05.44.56;	author vapier;	state Exp;
branches;
next	1.8;

1.8
date	2011.03.29.01.25.13;	author vapier;	state Exp;
branches;
next	1.7;

1.7
date	2011.03.24.06.17.47;	author vapier;	state Exp;
branches;
next	1.6;

1.6
date	2011.03.24.04.25.25;	author vapier;	state Exp;
branches;
next	1.5;

1.5
date	2011.03.24.04.20.10;	author vapier;	state Exp;
branches;
next	1.4;

1.4
date	2009.09.02.07.30.34;	author jiez;	state Exp;
branches;
next	1.3;

1.3
date	2008.03.26.16.21.10;	author bernds;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.26.15.58.27;	author bernds;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.30.15.10.16;	author clm;	state Exp;
branches;
next	;


desc
@@


1.11
log
@gas: blackfin: gas: blackfin: reject invalid BYTEUNPACK insns

The destination registers must be different with BYTEUNPACK insns,
otherwise the hardware throws up an exception.  So reject them.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@	.text

	p0.H = 0x12345678;
	P0.l = 0x12345678;

	CC = R3 < 4;
	CC = R3 < 7;
	CC = R3 < 8;
	CC = R3 <= 4;
	CC = R3 <= 7;
	CC = R3 <= 8;

	A1 -= M2.h * R3.L, A0 -= M2.l * R3.L;

	R1.H = (A1=R7.L*R5.L) , A0 += R1.L*R0.L (IS);

	a0 += R2.L * R3.L (IU);
	a0 += R2.L * R3.L (T);
	a0 += R2.L * R3.L (TFU);
	a0 += R2.L * R3.L (S2RND);
	a0 += R2.L * R3.L (ISS2);
	a0 += R2.L * R3.L (IH);
	R0.H = (A1 = R4.L * R3.L) (T), A0 = R4.H * R3.L;
	R0.L = (A0 = R7.L * R4.H) (T), A1 += R7.H * R4.H;

	R0 = (A1 += R1.H * R3.H) (IU)
	R0.L = (A1 += R1.H * R3.H) (IU)
	R1 = (A0 += R1.H * R3.H) (IU)
	R1.H = (A0 += R1.H * R3.H) (IU)

	W [p0 + 1] = r0;
	[p0 + 1] = r0;
	[p0 + 2] = r0;
	[p0 + 3] = r0;

	B [p0 + 32768] = r0;
	W [p0 + 65536] = r0;
	[p0 + 131072] = r0;

	B [p0 + -32769] = r0;
	W [p0 + -65538] = r0;
	[p0 + -131076] = r0;

	r0 = W [p0 + 1] (x);
	r0 = [p0 + 1];
	r0 = [p0 + 2];
	r0 = [p0 + 3];

	r0 = [p0 + foo];
	r0 = W [p0 + foo];
	r0 = B [p0 + foo];

	r0 = [p0 + 131076];
	r0 = W [p0 + 65536];
	r0 = B [p0 + 131076];

	[ R0 ++ M2 ] = R2;
	[ I0 ++ R2 ] = R2;
	[ R0 ++ P2 ] = R2;
	[ P0 ++ R2 ] = R2;
	[ P0 ++ M2 ] = R2;
	[ I0 ++ P2 ] = R2;

	W [ R0 ++ M2 ] = R2.h;
	W [ I0 ++ R2 ] = R2.h;
	W [ R0 ++ P2 ] = R2.h;
	W [ P0 ++ R2 ] = R2.h;
	W [ P0 ++ M2 ] = R2.h;
	W [ I0 ++ P2 ] = R2.h;

	[ R0 ++ ] = R2;
	[ I0 ++ ] = P2;

	W [ R0 ++ ] = R2.h;
	W [ I0 ++ ] = P2.h;

	W [ R0 ++ ] = R2;
	W [ I0 ++ ] = R2;
	W [ P0 ++ ] = P2;

	B [ R0 ++ ] = R2;
	B [ I0 ++ ] = R2;
	B [ P0 ++ ] = P2;

	R2 = [ R0 ++ M2 ];
	R2 = [ I0 ++ R2 ];
	R2 = [ R0 ++ P2 ];
	R2 = [ P0 ++ R2 ];
	R2 = [ P0 ++ M2 ];
	R2 = [ I0 ++ P2 ];

	R2.h = W [ R0 ++ M2 ];
	R2.h = W [ I0 ++ R2 ];
	R2.h = W [ R0 ++ P2 ];
	R2.h = W [ P0 ++ R2 ];
	R2.h = W [ P0 ++ M2 ];
	R2.h = W [ I0 ++ P2 ];

	R2 = [ R0 ++ ];
	P2 = [ I0 ++ ];

	R0.l = B [ P0 ++ ];
	R0.l = B [ I0 ++ ];

	R0.l = W [ P0 ++ ];
	R2.h = W [ R0 ++ ];
	P2.h = W [ I0 ++ ];

	R2 = W [ R0 ++ ] (X);
	R2 = W [ I0 ++ ] (X);
	P2 = W [ P0 ++ ] (X);

	R2 = B [ R0 ++ ] (X);
	R2 = B [ I0 ++ ] (X);
	P2 = B [ P0 ++ ] (X);

	(R3, R3) = SEARCH R0 (GE);
	BITMUX (R4, R4, A0) (ASR);

	R0 = A0, R3 = A1;
	R0.L = A0, R1.H = A1;
	R0 = A0, R1.H = A1;

	R0 = R1 +|+ R2, R0 = R1 -|- R2;
	R0 = R4 +|+ R5, R1 = R6 -|- R7;
	R1 = R3 +|- R7, R1 = R3 -|+ R7;
	R7 = R3 +|- R4, R1 = R1 -|+ R2;

	R0 = R3 + R4, R1 = R5 - R6;

	R7 = A1.L + A1.H, R7 = A0.L + A0.H;

	(R0, R0) = BYTEOP16P (R1:0, R3:2);
	(R7, R7) = BYTEOP16P (R1:0, R3:2);
	(R1, R1) = BYTEOP16M (R1:0, R3:2);
	(R4, R4) = BYTEOP16M (R1:0, R3:2);
	(R5, R5) = BYTEUNPACK R3:2;
@


1.10
log
@gas: blackfin: gas: blackfin: reject invalid BYTEOP16M insns

The destination registers must be different with BYTEOP16M insns,
otherwise the hardware throws up an exception.  So reject them.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d137 1
@


1.9
log
@gas: blackfin: gas: blackfin: reject invalid BYTEOP16P insns

The destination registers must be different with BYTEOP16P insns,
otherwise the hardware throws up an exception.  So reject them.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d135 2
@


1.8
log
@gas: blackfin: reject invalid 16bit acc add insns

The 16bit acc add insn cannot assign the two results to the same dreg,
so make sure gas rejects attempts to use this insn variant.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d132 3
@


1.7
log
@gas: blackfin: reject invalid register destinations for vector add/sub

The destination registers with vector add/sub insns must be different,
so make sure gas rejects attempt to write these.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d130 2
@


1.6
log
@gas: blackfin: catch invalid dest dregs in dsp mult insns

While we were catching a few mismatches in vectorized dsp mult insns,
the error we displayed was misleading.  Once we fix that up, we can
convert previously dead code into proper checking for destination
dreg matching.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d123 7
@


1.5
log
@gas: blackfin: catch invalid register combinations with SEARCH/BITMUX

The destination registers for SEARCH cannot be the same.  Same rule
for the source registers for BITMUX.

Signed-off-by: Mike Frsyinger <vapier@@gentoo.org>
@
text
@d119 4
@


1.4
log
@	From  Bernd Schmidt  <bernd.schmidt@@analog.com>
	* config/gas/bfin-parse.y (asm_1): Clean up and unify error handling
	for load and store insns.
	(neg_value): Delete function.

	testsuite/
	From  Bernd Schmidt  <bernd.schmidt@@analog.com>
	* gas/bfin/expected_errors.l, gas/bfin/expected_errors.s:
	Check error messages for invalid load/store insns.
@
text
@d116 3
@


1.3
log
@gas/
	* config/bfin-parse.y (check_macfunc_option): Allow (IU)
	option for multiply and multiply-accumulate to data register
	instruction.
	(check_macfuncs): Don't check if accumulator matches the data register
	here.
	(assign_macfunc): Check if accumulator matches the
	data register in each rule that moves to the data
	register.

gas/testsuite/
	* gas/bfin/arithmetic.s, gas/bfin/arithmetic.d: Add check
	for IU option.
	* gas/bfin/expected_errors.l, gas/bfin/expected_errors.s:
	Add check for mismatch of accumulator and data register.

opcodes/
	* bfin-dis.c (decode_dsp32mac_0): Decode (IU) option for
	multiply and multiply-accumulate to data register instruction.
@
text
@d30 86
@


1.2
log
@gas/:
	* config/bfin-parse.y (check_macfunc_option): New.
 	(check_macfuncs): Check option by calling check_macfunc_option.
	Fix comparison always true warnings.  Both scalar instructions
	of vector instruction must share the same mode option.  Only allow
	option mode at the end of the second instruction of the vector.
 	(asm_1): Check option by calling check_macfunc_option.

gas/testsuite/:
	* gas/bfin/expected_errors.l, gas/bfin/expected_errors.s: Add
	tests for bad options of "multiply and multipy-accumulate to
	accumulator" instructions.  Add new vector instruction option
	mode tests.
	* gas/bfin/vector2.s: Add new vector instruction option mode test.
	* gas/bfin/vector2.d: Adjust accordingly.

	* gas/bfin/expected_errors.s, gas/bfin/expected_errors.l: Add test
	for mismatched half registers in vector multipy-accumulate
	instructions.
@
text
@d25 5
@


1.1
log
@	* gas/bfin: New testsuite for bfin.
	* gas/all/gas.exp (bfin-*-*): Expected failure for alternate
	macro syntax.
@
text
@d14 11
@

