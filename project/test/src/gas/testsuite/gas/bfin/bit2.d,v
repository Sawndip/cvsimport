head	1.2;
access;
symbols
	binutils-2_24-branch:1.2.0.20
	binutils-2_24-branchpoint:1.2
	binutils-2_21_1:1.2
	binutils-2_23_2:1.2
	binutils-2_23_1:1.2
	binutils-2_23:1.2
	binutils-2_23-branch:1.2.0.18
	binutils-2_23-branchpoint:1.2
	binutils-2_22_branch:1.2.0.16
	binutils-2_22:1.2
	binutils-2_22-branch:1.2.0.14
	binutils-2_22-branchpoint:1.2
	binutils-2_21:1.2
	binutils-2_21-branch:1.2.0.12
	binutils-2_21-branchpoint:1.2
	binutils-2_20_1:1.2
	binutils-2_20:1.2
	binutils-arc-20081103-branch:1.2.0.10
	binutils-arc-20081103-branchpoint:1.2
	binutils-2_20-branch:1.2.0.8
	binutils-2_20-branchpoint:1.2
	dje-cgen-play1-branch:1.2.0.6
	dje-cgen-play1-branchpoint:1.2
	arc-20081103-branch:1.2.0.4
	arc-20081103-branchpoint:1.2
	binutils-2_19_1:1.2
	binutils-2_19:1.2
	binutils-2_19-branch:1.2.0.2
	binutils-2_19-branchpoint:1.2
	binutils-2_18:1.1
	binutils-2_18-branch:1.1.0.6
	binutils-2_18-branchpoint:1.1
	binutils-csl-coldfire-4_1-32:1.1
	binutils-csl-sourcerygxx-4_1-32:1.1
	binutils-csl-innovasic-fido-3_4_4-33:1.1
	binutils-csl-coldfire-4_1-30:1.1
	binutils-csl-sourcerygxx-4_1-30:1.1
	binutils-csl-coldfire-4_1-28:1.1
	binutils-csl-sourcerygxx-4_1-29:1.1
	binutils-csl-sourcerygxx-4_1-28:1.1
	binutils-csl-arm-2006q3-27:1.1
	binutils-csl-sourcerygxx-4_1-27:1.1
	binutils-csl-arm-2006q3-26:1.1
	binutils-csl-sourcerygxx-4_1-26:1.1
	binutils-csl-sourcerygxx-4_1-25:1.1
	binutils-csl-sourcerygxx-4_1-24:1.1
	binutils-csl-sourcerygxx-4_1-23:1.1
	binutils-csl-sourcerygxx-4_1-21:1.1
	binutils-csl-arm-2006q3-21:1.1
	binutils-csl-sourcerygxx-4_1-22:1.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.1
	binutils-csl-sourcerygxx-4_1-20:1.1
	binutils-csl-arm-2006q3-19:1.1
	binutils-csl-sourcerygxx-4_1-19:1.1
	binutils-csl-sourcerygxx-4_1-18:1.1
	binutils-csl-renesas-4_1-9:1.1
	binutils-csl-renesas-4_1-8:1.1
	binutils-csl-renesas-4_1-7:1.1
	binutils-csl-renesas-4_1-6:1.1
	binutils-csl-sourcerygxx-4_1-17:1.1
	binutils-csl-sourcerygxx-4_1-14:1.1
	binutils-csl-sourcerygxx-4_1-15:1.1
	binutils-csl-sourcerygxx-4_1-13:1.1
	binutils-2_17:1.1
	binutils-csl-sourcerygxx-4_1-12:1.1
	binutils-csl-sourcerygxx-3_4_4-21:1.1
	binutils-csl-sourcerygxx-4_1-9:1.1
	binutils-csl-sourcerygxx-4_1-8:1.1
	binutils-csl-sourcerygxx-4_1-7:1.1
	binutils-csl-arm-2006q1-6:1.1
	binutils-csl-sourcerygxx-4_1-6:1.1
	binutils-csl-coldfire-4_1-11:1.1
	binutils-csl-sourcerygxx-3_4_4-19:1.1
	binutils-csl-coldfire-4_1-10:1.1
	binutils-csl-sourcerygxx-4_1-5:1.1
	binutils-csl-sourcerygxx-4_1-4:1.1
	binutils-csl-morpho-4_1-4:1.1
	binutils-csl-sourcerygxx-3_4_4-17:1.1
	binutils-2_17-branch:1.1.0.4
	binutils-2_17-branchpoint:1.1
	binutils-csl-2_17-branch:1.1.0.2
	binutils-csl-2_17-branchpoint:1.1
	binutils_latest_snapshot:1.2;
locks; strict;
comment	@# @;


1.2
date	2008.03.26.16.48.32;	author bernds;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.30.15.10.16;	author clm;	state Exp;
branches;
next	;


desc
@@


1.2
log
@gas/testsuite/:
	From Robin Getz  <rgetz@@blackfin.uclinux.org>
	* gas/bfin/arithmetic.d: Update to reflect spaces/capitalization in
	recent changes in opcodes/bfin-dis.c.
	gas/bfin/arithmetic.s: Likewise.
	gas/bfin/bit.d: Likewise.
	gas/bfin/bit2.d: Likewise.
	gas/bfin/control_code.d: Likewise.
	gas/bfin/control_code2.d: Likewise.
	gas/bfin/event.d: Likewise.
	gas/bfin/event2.d: Likewise.
	gas/bfin/flow.d: Likewise.
	gas/bfin/flow2.d: Likewise.
	gas/bfin/load.d: Likewise.
	gas/bfin/logical.d: Likewise.
	gas/bfin/logical2.d: Likewise.
	gas/bfin/move.d: Likewise.
	gas/bfin/move2.d: Likewise.
	gas/bfin/parallel.d: Likewise.
	gas/bfin/parallel2.d: Likewise.
	gas/bfin/parallel3.d: Likewise.
	gas/bfin/parallel4.d: Likewise.
	gas/bfin/shift.d: Likewise.
	gas/bfin/shift2.d: Likewise.
	gas/bfin/stack.d: Likewise.
	gas/bfin/stack2.d: Likewise.
	gas/bfin/store.d: Likewise.
	gas/bfin/vector.d: Likewise.
	gas/bfin/vector2.d: Likewise.
	gas/bfin/video.d: Likewise.
	gas/bfin/video2.d: Likewise.

opcodes/:
	* bfin-dis.c: (c_uimm4s4d, c_imm5d, c_imm7d, c_imm16d, c_uimm16s4d,
	c_imm32, c_huimm32e): Define.
	(constant_formats): Add flags for printing decimal, leading spaces, and
	exact symbols.
	(comment, parallel): Add global flags in all disassembly.
	(fmtconst): Take advantage of new flags, and print default in hex.
	(fmtconst_val): Likewise.
	(decode_macfunc): Be consistant with spaces, tabs, comments,
	capitalization in disassembly, fix minor coding style issues.
	(reg_names, amod0, amod1, amod0amod2, aligndir, get_allreg): Likewise.
	(decode_ProgCtrl_0, decode_PushPopMultiple_0, decode_CCflag_0,
	decode_CC2dreg_0, decode_CC2stat_0, decode_BRCC_0, decode_UJUMP_0,
	decode_REGMV_0, decode_ALU2op_0, decode_PTR2op_0, decode_LOGI2op_0,
	decode_COMP3op_0, decode_COMPI2opD_0, decode_COMPI2opP_0,
	decode_LDSTpmod_0, decode_dagMODim_0, decode_dagMODik_0,
	decode_dspLDST_0, decode_LDST_0, decode_LDSTiiFP_0, decode_LDSTii_0,
	decode_LoopSetup_0, decode_LDIMMhalf_0, decode_CALLa_0,
	decode_LDSTidxI_0, decode_linkage_0, decode_dsp32alu_0,
	decode_dsp32shift_0, decode_dsp32shiftimm_0, decode_pseudodbg_assert_0,
	_print_insn_bfin, print_insn_bfin): Likewise.
@
text
@#objdump: -dr
#name: bit2
.*: +file format .*

Disassembly of section .text:

00000000 <.text>:
   0:	07 4c       	BITCLR \(R7, 0x0\);.*
   2:	ff 4c       	BITCLR \(R7, 0x1f\);.*
   4:	7f 4c       	BITCLR \(R7, 0xf\);.*
   6:	01 4c       	BITCLR \(R1, 0x0\);.*
   8:	0a 4c       	BITCLR \(R2, 0x1\);.*
   a:	9b 4c       	BITCLR \(R3, 0x13\);.*
   c:	07 4a       	BITSET \(R7, 0x0\);.*
   e:	ff 4a       	BITSET \(R7, 0x1f\);.*
  10:	7f 4a       	BITSET \(R7, 0xf\);.*
  12:	01 4a       	BITSET \(R1, 0x0\);.*
  14:	0a 4a       	BITSET \(R2, 0x1\);.*
  16:	9b 4a       	BITSET \(R3, 0x13\);.*
  18:	07 4b       	BITTGL \(R7, 0x0\);.*
  1a:	ff 4b       	BITTGL \(R7, 0x1f\);.*
  1c:	7f 4b       	BITTGL \(R7, 0xf\);.*
  1e:	01 4b       	BITTGL \(R1, 0x0\);.*
  20:	0a 4b       	BITTGL \(R2, 0x1\);.*
  22:	9b 4b       	BITTGL \(R3, 0x13\);.*
  24:	07 49       	CC = BITTST \(R7, 0x0\);.*
  26:	ff 49       	CC = BITTST \(R7, 0x1f\);.*
  28:	7f 49       	CC = BITTST \(R7, 0xf\);.*
  2a:	01 49       	CC = BITTST \(R1, 0x0\);.*
  2c:	0a 49       	CC = BITTST \(R2, 0x1\);.*
  2e:	9b 49       	CC = BITTST \(R3, 0x13\);.*
  30:	07 48       	CC = !BITTST \(R7, 0x0\);.*
  32:	ff 48       	CC = !BITTST \(R7, 0x1f\);.*
  34:	7f 48       	CC = !BITTST \(R7, 0xf\);.*
  36:	01 48       	CC = !BITTST \(R1, 0x0\);.*
  38:	0a 48       	CC = !BITTST \(R2, 0x1\);.*
  3a:	9b 48       	CC = !BITTST \(R3, 0x13\);.*
  3c:	0a c6 08 8e 	R7 = DEPOSIT \(R0, R1\);
  40:	0a c6 0f 8e 	R7 = DEPOSIT \(R7, R1\);
  44:	0a c6 3f 8e 	R7 = DEPOSIT \(R7, R7\);
  48:	0a c6 08 82 	R1 = DEPOSIT \(R0, R1\);
  4c:	0a c6 0f 84 	R2 = DEPOSIT \(R7, R1\);
  50:	0a c6 3f 86 	R3 = DEPOSIT \(R7, R7\);
  54:	0a c6 08 ce 	R7 = DEPOSIT \(R0, R1\) \(X\);
  58:	0a c6 0f ce 	R7 = DEPOSIT \(R7, R1\) \(X\);
  5c:	0a c6 3f ce 	R7 = DEPOSIT \(R7, R7\) \(X\);
  60:	0a c6 08 c2 	R1 = DEPOSIT \(R0, R1\) \(X\);
  64:	0a c6 0f c4 	R2 = DEPOSIT \(R7, R1\) \(X\);
  68:	0a c6 3f c6 	R3 = DEPOSIT \(R7, R7\) \(X\);
  6c:	0a c6 08 0e 	R7 = EXTRACT \(R0, R1.L\) \(Z\);
  70:	0a c6 0f 0e 	R7 = EXTRACT \(R7, R1.L\) \(Z\);
  74:	0a c6 3f 0e 	R7 = EXTRACT \(R7, R7.L\) \(Z\);
  78:	0a c6 08 02 	R1 = EXTRACT \(R0, R1.L\) \(Z\);
  7c:	0a c6 0f 04 	R2 = EXTRACT \(R7, R1.L\) \(Z\);
  80:	0a c6 3f 06 	R3 = EXTRACT \(R7, R7.L\) \(Z\);
  84:	0a c6 08 4e 	R7 = EXTRACT \(R0, R1.L\) \(X\);
  88:	0a c6 0f 4e 	R7 = EXTRACT \(R7, R1.L\) \(X\);
  8c:	0a c6 3f 4e 	R7 = EXTRACT \(R7, R7.L\) \(X\);
  90:	0a c6 08 42 	R1 = EXTRACT \(R0, R1.L\) \(X\);
  94:	0a c6 0f 44 	R2 = EXTRACT \(R7, R1.L\) \(X\);
  98:	0a c6 3f 46 	R3 = EXTRACT \(R7, R7.L\) \(X\);
  9c:	08 c6 01 00 	BITMUX \(R0, R1, A0\) \(ASR\);
  a0:	08 c6 02 00 	BITMUX \(R0, R2, A0\) \(ASR\);
  a4:	08 c6 0b 00 	BITMUX \(R1, R3, A0\) \(ASR\);
  a8:	08 c6 01 40 	BITMUX \(R0, R1, A0\) \(ASL\);
  ac:	08 c6 0a 40 	BITMUX \(R1, R2, A0\) \(ASL\);
  b0:	06 c6 00 c0 	R0.L = ONES R0;
  b4:	06 c6 01 c0 	R0.L = ONES R1;
  b8:	06 c6 06 c2 	R1.L = ONES R6;
  bc:	06 c6 07 c4 	R2.L = ONES R7;
@


1.1
log
@	* gas/bfin: New testsuite for bfin.
	* gas/all/gas.exp (bfin-*-*): Expected failure for alternate
	macro syntax.
@
text
@d8 63
a70 63
   0:	07 4c       	BITCLR \(R7,0x0\);
   2:	ff 4c       	BITCLR \(R7,0x1f\);
   4:	7f 4c       	BITCLR \(R7,0xf\);
   6:	01 4c       	BITCLR \(R1,0x0\);
   8:	0a 4c       	BITCLR \(R2,0x1\);
   a:	9b 4c       	BITCLR \(R3,0x13\);
   c:	07 4a       	BITSET \(R7,0x0\);
   e:	ff 4a       	BITSET \(R7,0x1f\);
  10:	7f 4a       	BITSET \(R7,0xf\);
  12:	01 4a       	BITSET \(R1,0x0\);
  14:	0a 4a       	BITSET \(R2,0x1\);
  16:	9b 4a       	BITSET \(R3,0x13\);
  18:	07 4b       	BITTGL \(R7,0x0\);
  1a:	ff 4b       	BITTGL \(R7,0x1f\);
  1c:	7f 4b       	BITTGL \(R7,0xf\);
  1e:	01 4b       	BITTGL \(R1,0x0\);
  20:	0a 4b       	BITTGL \(R2,0x1\);
  22:	9b 4b       	BITTGL \(R3,0x13\);
  24:	07 49       	CC = BITTST \(R7,0x0\);
  26:	ff 49       	CC = BITTST \(R7,0x1f\);
  28:	7f 49       	CC = BITTST \(R7,0xf\);
  2a:	01 49       	CC = BITTST \(R1,0x0\);
  2c:	0a 49       	CC = BITTST \(R2,0x1\);
  2e:	9b 49       	CC = BITTST \(R3,0x13\);
  30:	07 48       	CC = ! BITTST \(R7,0x0\);
  32:	ff 48       	CC = ! BITTST \(R7,0x1f\);
  34:	7f 48       	CC = ! BITTST \(R7,0xf\);
  36:	01 48       	CC = ! BITTST \(R1,0x0\);
  38:	0a 48       	CC = ! BITTST \(R2,0x1\);
  3a:	9b 48       	CC = ! BITTST \(R3,0x13\);
  3c:	0a c6 08 8e 	R7=DEPOSIT\(R0,R1\);
  40:	0a c6 0f 8e 	R7=DEPOSIT\(R7,R1\);
  44:	0a c6 3f 8e 	R7=DEPOSIT\(R7,R7\);
  48:	0a c6 08 82 	R1=DEPOSIT\(R0,R1\);
  4c:	0a c6 0f 84 	R2=DEPOSIT\(R7,R1\);
  50:	0a c6 3f 86 	R3=DEPOSIT\(R7,R7\);
  54:	0a c6 08 ce 	R7=DEPOSIT\(R0,R1\)\(X\);
  58:	0a c6 0f ce 	R7=DEPOSIT\(R7,R1\)\(X\);
  5c:	0a c6 3f ce 	R7=DEPOSIT\(R7,R7\)\(X\);
  60:	0a c6 08 c2 	R1=DEPOSIT\(R0,R1\)\(X\);
  64:	0a c6 0f c4 	R2=DEPOSIT\(R7,R1\)\(X\);
  68:	0a c6 3f c6 	R3=DEPOSIT\(R7,R7\)\(X\);
  6c:	0a c6 08 0e 	R7=EXTRACT\(R0,R1.L\) \(Z\);
  70:	0a c6 0f 0e 	R7=EXTRACT\(R7,R1.L\) \(Z\);
  74:	0a c6 3f 0e 	R7=EXTRACT\(R7,R7.L\) \(Z\);
  78:	0a c6 08 02 	R1=EXTRACT\(R0,R1.L\) \(Z\);
  7c:	0a c6 0f 04 	R2=EXTRACT\(R7,R1.L\) \(Z\);
  80:	0a c6 3f 06 	R3=EXTRACT\(R7,R7.L\) \(Z\);
  84:	0a c6 08 4e 	R7=EXTRACT\(R0,R1.L\)\(X\);
  88:	0a c6 0f 4e 	R7=EXTRACT\(R7,R1.L\)\(X\);
  8c:	0a c6 3f 4e 	R7=EXTRACT\(R7,R7.L\)\(X\);
  90:	0a c6 08 42 	R1=EXTRACT\(R0,R1.L\)\(X\);
  94:	0a c6 0f 44 	R2=EXTRACT\(R7,R1.L\)\(X\);
  98:	0a c6 3f 46 	R3=EXTRACT\(R7,R7.L\)\(X\);
  9c:	08 c6 01 00 	BITMUX \(R0,R1,A0 \)\(ASR\);
  a0:	08 c6 02 00 	BITMUX \(R0,R2,A0 \)\(ASR\);
  a4:	08 c6 0b 00 	BITMUX \(R1,R3,A0 \)\(ASR\);
  a8:	08 c6 01 40 	BITMUX \(R0,R1,A0 \)\(ASL\);
  ac:	08 c6 0a 40 	BITMUX \(R1,R2,A0 \)\(ASL\);
  b0:	06 c6 00 c0 	R0.L=ONES R0;
  b4:	06 c6 01 c0 	R0.L=ONES R1;
  b8:	06 c6 06 c2 	R1.L=ONES R6;
  bc:	06 c6 07 c4 	R2.L=ONES R7;
@

