head	1.6;
access;
symbols
	binutils-2_24-branch:1.6.0.4
	binutils-2_24-branchpoint:1.6
	binutils-2_21_1:1.4
	binutils-2_23_2:1.6
	binutils-2_23_1:1.6
	binutils-2_23:1.6
	binutils-2_23-branch:1.6.0.2
	binutils-2_23-branchpoint:1.6
	binutils-2_22_branch:1.5.0.4
	binutils-2_22:1.5
	binutils-2_22-branch:1.5.0.2
	binutils-2_22-branchpoint:1.5
	binutils-2_21:1.4
	binutils-2_21-branch:1.4.0.2
	binutils-2_21-branchpoint:1.4
	binutils-2_20_1:1.2
	binutils-2_20:1.2
	binutils-arc-20081103-branch:1.2.0.10
	binutils-arc-20081103-branchpoint:1.2
	binutils-2_20-branch:1.2.0.8
	binutils-2_20-branchpoint:1.2
	dje-cgen-play1-branch:1.2.0.6
	dje-cgen-play1-branchpoint:1.2
	arc-20081103-branch:1.2.0.4
	arc-20081103-branchpoint:1.2
	binutils-2_19_1:1.2
	binutils-2_19:1.2
	binutils-2_19-branch:1.2.0.2
	binutils-2_19-branchpoint:1.2
	binutils-2_18:1.1
	binutils-2_18-branch:1.1.0.6
	binutils-2_18-branchpoint:1.1
	binutils-csl-coldfire-4_1-32:1.1
	binutils-csl-sourcerygxx-4_1-32:1.1
	binutils-csl-innovasic-fido-3_4_4-33:1.1
	binutils-csl-coldfire-4_1-30:1.1
	binutils-csl-sourcerygxx-4_1-30:1.1
	binutils-csl-coldfire-4_1-28:1.1
	binutils-csl-sourcerygxx-4_1-29:1.1
	binutils-csl-sourcerygxx-4_1-28:1.1
	binutils-csl-arm-2006q3-27:1.1
	binutils-csl-sourcerygxx-4_1-27:1.1
	binutils-csl-arm-2006q3-26:1.1
	binutils-csl-sourcerygxx-4_1-26:1.1
	binutils-csl-sourcerygxx-4_1-25:1.1
	binutils-csl-sourcerygxx-4_1-24:1.1
	binutils-csl-sourcerygxx-4_1-23:1.1
	binutils-csl-sourcerygxx-4_1-21:1.1
	binutils-csl-arm-2006q3-21:1.1
	binutils-csl-sourcerygxx-4_1-22:1.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.1
	binutils-csl-sourcerygxx-4_1-20:1.1
	binutils-csl-arm-2006q3-19:1.1
	binutils-csl-sourcerygxx-4_1-19:1.1
	binutils-csl-sourcerygxx-4_1-18:1.1
	binutils-csl-renesas-4_1-9:1.1
	binutils-csl-renesas-4_1-8:1.1
	binutils-csl-renesas-4_1-7:1.1
	binutils-csl-renesas-4_1-6:1.1
	binutils-csl-sourcerygxx-4_1-17:1.1
	binutils-csl-sourcerygxx-4_1-14:1.1
	binutils-csl-sourcerygxx-4_1-15:1.1
	binutils-csl-sourcerygxx-4_1-13:1.1
	binutils-2_17:1.1
	binutils-csl-sourcerygxx-4_1-12:1.1
	binutils-csl-sourcerygxx-3_4_4-21:1.1
	binutils-csl-sourcerygxx-4_1-9:1.1
	binutils-csl-sourcerygxx-4_1-8:1.1
	binutils-csl-sourcerygxx-4_1-7:1.1
	binutils-csl-arm-2006q1-6:1.1
	binutils-csl-sourcerygxx-4_1-6:1.1
	binutils-csl-coldfire-4_1-11:1.1
	binutils-csl-sourcerygxx-3_4_4-19:1.1
	binutils-csl-coldfire-4_1-10:1.1
	binutils-csl-sourcerygxx-4_1-5:1.1
	binutils-csl-sourcerygxx-4_1-4:1.1
	binutils-csl-morpho-4_1-4:1.1
	binutils-csl-sourcerygxx-3_4_4-17:1.1
	binutils-2_17-branch:1.1.0.4
	binutils-2_17-branchpoint:1.1
	binutils-csl-2_17-branch:1.1.0.2
	binutils-csl-2_17-branchpoint:1.1
	binutils_latest_snapshot:1.6;
locks; strict;
comment	@# @;


1.6
date	2011.12.15.04.25.10;	author jiez;	state Exp;
branches;
next	1.5;

1.5
date	2011.02.13.18.53.16;	author vapier;	state Exp;
branches;
next	1.4;

1.4
date	2010.10.15.20.44.46;	author vapier;	state Exp;
branches;
next	1.3;

1.3
date	2010.10.15.20.43.15;	author vapier;	state Exp;
branches;
next	1.2;

1.2
date	2008.03.26.16.48.32;	author bernds;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.30.15.10.16;	author clm;	state Exp;
branches;
next	;


desc
@@


1.6
log
@gas/
2011-12-14  Stuart Henderson  <shenders@@gcc.gnu.org>

	* config/bfin-parse.y (asm_1): set SRCx fields to all 1s for
	dspalu32 instrs that don't use them.

gas/testsuite/
2011-12-14  Stuart Henderson  <shenders@@gcc.gnu.org>

	* gas/bfin/move.d: Update SRCx field expectations.
	* gas/bfin/move2.d: Likewise.
	* gas/bfin/parallel.d: Likewise.
	* gas/bfin/parallel2.d: Likewise.
	* gas/bfin/parallel3.d: Likewise.
	* gas/bfin/parallel4.d: Likewise.
	* gas/bfin/video.d: Likewise.
	* gas/bfin/video2.d: Likewise.
@
text
@#objdump: -dr
#name: video
.*: +file format .*
Disassembly of section .text:

[0-9a-f]+ <align>:
[ 0-9a-f]+:	0d c6 15 0e 	R7 = ALIGN8 \(R5, R2\);
[ 0-9a-f]+:	0d c6 08 4a 	R5 = ALIGN16 \(R0, R1\);
[ 0-9a-f]+:	0d c6 05 84 	R2 = ALIGN24 \(R5, R0\);

[0-9a-f]+ <disalgnexcpt>:
[ 0-9a-f]+:	12 c4 00 c0 	DISALGNEXCPT;

[0-9a-f]+ <byteop3p>:
[ 0-9a-f]+:	17 c4 02 0a 	R5 = BYTEOP3P \(R1:0, R3:2\) \(LO\);
[ 0-9a-f]+:	37 c4 02 00 	R0 = BYTEOP3P \(R1:0, R3:2\) \(HI\);
[ 0-9a-f]+:	17 c4 02 22 	R1 = BYTEOP3P \(R1:0, R3:2\) \(LO, R\);
[ 0-9a-f]+:	37 c4 02 24 	R2 = BYTEOP3P \(R1:0, R3:2\) \(HI, R\);

[0-9a-f]+ <dual16>:
[ 0-9a-f]+:	0c c4 7f 45 	R5 = A1.L \+ A1.H, R2 = A0.L \+ A0.H;

[0-9a-f]+ <byteop16p>:
[ 0-9a-f]+:	15 c4 82 06 	\(R2, R3\) = BYTEOP16P \(R1:0, R3:2\);
[ 0-9a-f]+:	15 c4 82 21 	\(R6, R0\) = BYTEOP16P \(R1:0, R3:2\) \(R\);

[0-9a-f]+ <byteop1p>:
[ 0-9a-f]+:	14 c4 02 0e 	R7 = BYTEOP1P \(R1:0, R3:2\);
[ 0-9a-f]+:	14 c4 02 44 	R2 = BYTEOP1P \(R1:0, R3:2\) \(T\);
[ 0-9a-f]+:	14 c4 02 26 	R3 = BYTEOP1P \(R1:0, R3:2\) \(R\);
[ 0-9a-f]+:	14 c4 02 6e 	R7 = BYTEOP1P \(R1:0, R3:2\) \(T, R\);

[0-9a-f]+ <byteop2p>:
[ 0-9a-f]+:	16 c4 02 00 	R0 = BYTEOP2P \(R1:0, R3:2\) \(RNDL\);
[ 0-9a-f]+:	36 c4 02 02 	R1 = BYTEOP2P \(R1:0, R3:2\) \(RNDH\);
[ 0-9a-f]+:	16 c4 02 44 	R2 = BYTEOP2P \(R1:0, R3:2\) \(TL\);
[ 0-9a-f]+:	36 c4 02 46 	R3 = BYTEOP2P \(R1:0, R3:2\) \(TH\);
[ 0-9a-f]+:	16 c4 02 28 	R4 = BYTEOP2P \(R1:0, R3:2\) \(RNDL, R\);
[ 0-9a-f]+:	36 c4 02 2a 	R5 = BYTEOP2P \(R1:0, R3:2\) \(RNDH, R\);
[ 0-9a-f]+:	16 c4 02 6c 	R6 = BYTEOP2P \(R1:0, R3:2\) \(TL, R\);
[ 0-9a-f]+:	36 c4 02 6e 	R7 = BYTEOP2P \(R1:0, R3:2\) \(TH, R\);

[0-9a-f]+ <bytepack>:
[ 0-9a-f]+:	18 c4 03 0a 	R5 = BYTEPACK \(R0, R3\);

[0-9a-f]+ <byteop16m>:
[ 0-9a-f]+:	15 c4 82 45 	\(R6, R2\) = BYTEOP16M \(R1:0, R3:2\);
[ 0-9a-f]+:	15 c4 02 6a 	\(R0, R5\) = BYTEOP16M \(R1:0, R3:2\) \(R\);

[0-9a-f]+ <saa>:
[ 0-9a-f]+:	12 c4 02 00 	SAA \(R1:0, R3:2\);
[ 0-9a-f]+:	12 c4 02 20 	SAA \(R1:0, R3:2\) \(R\);

[0-9a-f]+ <byteunpack>:
[ 0-9a-f]+:	18 c4 c0 45 	\(R7, R2\) = BYTEUNPACK R1:0;
[ 0-9a-f]+:	18 c4 90 69 	\(R6, R4\) = BYTEUNPACK R3:2 \(R\);
@


1.5
log
@gas/opcodes: blackfin: punt BYTEOP2M insn support

The BYTEOP2M insn was part of the initial Blackfin designs, but never made
it into any actual silicon.  So punt support for it.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d21 1
a21 1
[ 0-9a-f]+:	0c c4 40 45 	R5 = A1.L \+ A1.H, R2 = A0.L \+ A0.H;
@


1.4
log
@gas: blackfin: fix encoding of BYTEOP2M insn

The BYTEOP2M parser incorrectly calls BYTEOP2P to generate the opcode.
Once we've fixed that, it's easy to see that the disassembler also likes
to decode this insn incorrectly.  So fix that and then add some tests.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@a42 10
[0-9a-f]+ <byteop2m>:
[ 0-9a-f]+:	16 c4 02 80 	R0 = BYTEOP2M \(R1:0, R3:2\) \(RNDL\);
[ 0-9a-f]+:	36 c4 02 82 	R1 = BYTEOP2M \(R1:0, R3:2\) \(RNDH\);
[ 0-9a-f]+:	16 c4 02 c4 	R2 = BYTEOP2M \(R1:0, R3:2\) \(TL\);
[ 0-9a-f]+:	36 c4 02 c6 	R3 = BYTEOP2M \(R1:0, R3:2\) \(TH\);
[ 0-9a-f]+:	16 c4 02 a8 	R4 = BYTEOP2M \(R1:0, R3:2\) \(RNDL, R\);
[ 0-9a-f]+:	36 c4 02 aa 	R5 = BYTEOP2M \(R1:0, R3:2\) \(RNDH, R\);
[ 0-9a-f]+:	16 c4 02 ec 	R6 = BYTEOP2M \(R1:0, R3:2\) \(TL, R\);
[ 0-9a-f]+:	36 c4 02 ee 	R7 = BYTEOP2M \(R1:0, R3:2\) \(TH, R\);

@


1.3
log
@gas: blackfin: generalize matching in the video tests

The exact symbol addresses are not important to these tests.  We only
care about the opcodes and the disassembly output.  This makes adding
more insns to these tests easier.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d43 10
@


1.2
log
@gas/testsuite/:
	From Robin Getz  <rgetz@@blackfin.uclinux.org>
	* gas/bfin/arithmetic.d: Update to reflect spaces/capitalization in
	recent changes in opcodes/bfin-dis.c.
	gas/bfin/arithmetic.s: Likewise.
	gas/bfin/bit.d: Likewise.
	gas/bfin/bit2.d: Likewise.
	gas/bfin/control_code.d: Likewise.
	gas/bfin/control_code2.d: Likewise.
	gas/bfin/event.d: Likewise.
	gas/bfin/event2.d: Likewise.
	gas/bfin/flow.d: Likewise.
	gas/bfin/flow2.d: Likewise.
	gas/bfin/load.d: Likewise.
	gas/bfin/logical.d: Likewise.
	gas/bfin/logical2.d: Likewise.
	gas/bfin/move.d: Likewise.
	gas/bfin/move2.d: Likewise.
	gas/bfin/parallel.d: Likewise.
	gas/bfin/parallel2.d: Likewise.
	gas/bfin/parallel3.d: Likewise.
	gas/bfin/parallel4.d: Likewise.
	gas/bfin/shift.d: Likewise.
	gas/bfin/shift2.d: Likewise.
	gas/bfin/stack.d: Likewise.
	gas/bfin/stack2.d: Likewise.
	gas/bfin/store.d: Likewise.
	gas/bfin/vector.d: Likewise.
	gas/bfin/vector2.d: Likewise.
	gas/bfin/video.d: Likewise.
	gas/bfin/video2.d: Likewise.

opcodes/:
	* bfin-dis.c: (c_uimm4s4d, c_imm5d, c_imm7d, c_imm16d, c_uimm16s4d,
	c_imm32, c_huimm32e): Define.
	(constant_formats): Add flags for printing decimal, leading spaces, and
	exact symbols.
	(comment, parallel): Add global flags in all disassembly.
	(fmtconst): Take advantage of new flags, and print default in hex.
	(fmtconst_val): Likewise.
	(decode_macfunc): Be consistant with spaces, tabs, comments,
	capitalization in disassembly, fix minor coding style issues.
	(reg_names, amod0, amod1, amod0amod2, aligndir, get_allreg): Likewise.
	(decode_ProgCtrl_0, decode_PushPopMultiple_0, decode_CCflag_0,
	decode_CC2dreg_0, decode_CC2stat_0, decode_BRCC_0, decode_UJUMP_0,
	decode_REGMV_0, decode_ALU2op_0, decode_PTR2op_0, decode_LOGI2op_0,
	decode_COMP3op_0, decode_COMPI2opD_0, decode_COMPI2opP_0,
	decode_LDSTpmod_0, decode_dagMODim_0, decode_dagMODik_0,
	decode_dspLDST_0, decode_LDST_0, decode_LDSTiiFP_0, decode_LDSTii_0,
	decode_LoopSetup_0, decode_LDIMMhalf_0, decode_CALLa_0,
	decode_LDSTidxI_0, decode_linkage_0, decode_dsp32alu_0,
	decode_dsp32shift_0, decode_dsp32shiftimm_0, decode_pseudodbg_assert_0,
	_print_insn_bfin, print_insn_bfin): Likewise.
@
text
@d6 51
a56 51
00000000 <align>:
   0:	0d c6 15 0e 	R7 = ALIGN8 \(R5, R2\);
   4:	0d c6 08 4a 	R5 = ALIGN16 \(R0, R1\);
   8:	0d c6 05 84 	R2 = ALIGN24 \(R5, R0\);

0000000c <disalgnexcpt>:
   c:	12 c4 00 c0 	DISALGNEXCPT;

00000010 <byteop3p>:
  10:	17 c4 02 0a 	R5 = BYTEOP3P \(R1:0, R3:2\) \(LO\);
  14:	37 c4 02 00 	R0 = BYTEOP3P \(R1:0, R3:2\) \(HI\);
  18:	17 c4 02 22 	R1 = BYTEOP3P \(R1:0, R3:2\) \(LO, R\);
  1c:	37 c4 02 24 	R2 = BYTEOP3P \(R1:0, R3:2\) \(HI, R\);

00000020 <dual16>:
  20:	0c c4 [4-7][[:xdigit:]] 45 	R5 = A1.L \+ A1.H, R2 = A0.L \+ A0.H;

00000024 <byteop16p>:
  24:	15 c4 82 06 	\(R2, R3\) = BYTEOP16P \(R1:0, R3:2\);
  28:	15 c4 82 21 	\(R6, R0\) = BYTEOP16P \(R1:0, R3:2\) \(R\);

0000002c <byteop1p>:
  2c:	14 c4 02 0e 	R7 = BYTEOP1P \(R1:0, R3:2\);
  30:	14 c4 02 44 	R2 = BYTEOP1P \(R1:0, R3:2\) \(T\);
  34:	14 c4 02 26 	R3 = BYTEOP1P \(R1:0, R3:2\) \(R\);
  38:	14 c4 02 6e 	R7 = BYTEOP1P \(R1:0, R3:2\) \(T, R\);

0000003c <byteop2p>:
  3c:	16 c4 02 00 	R0 = BYTEOP2P \(R1:0, R3:2\) \(RNDL\);
  40:	36 c4 02 02 	R1 = BYTEOP2P \(R1:0, R3:2\) \(RNDH\);
  44:	16 c4 02 44 	R2 = BYTEOP2P \(R1:0, R3:2\) \(TL\);
  48:	36 c4 02 46 	R3 = BYTEOP2P \(R1:0, R3:2\) \(TH\);
  4c:	16 c4 02 28 	R4 = BYTEOP2P \(R1:0, R3:2\) \(RNDL, R\);
  50:	36 c4 02 2a 	R5 = BYTEOP2P \(R1:0, R3:2\) \(RNDH, R\);
  54:	16 c4 02 6c 	R6 = BYTEOP2P \(R1:0, R3:2\) \(TL, R\);
  58:	36 c4 02 6e 	R7 = BYTEOP2P \(R1:0, R3:2\) \(TH, R\);

0000005c <bytepack>:
  5c:	18 c4 03 0a 	R5 = BYTEPACK \(R0, R3\);

00000060 <byteop16m>:
  60:	15 c4 82 45 	\(R6, R2\) = BYTEOP16M \(R1:0, R3:2\);
  64:	15 c4 02 6a 	\(R0, R5\) = BYTEOP16M \(R1:0, R3:2\) \(R\);

00000068 <saa>:
  68:	12 c4 02 00 	SAA \(R1:0, R3:2\);
  6c:	12 c4 02 20 	SAA \(R1:0, R3:2\) \(R\);

00000070 <byteunpack>:
  70:	18 c4 c0 45 	\(R7, R2\) = BYTEUNPACK R1:0;
  74:	18 c4 90 69 	\(R6, R4\) = BYTEUNPACK R3:2 \(R\);
@


1.1
log
@	* gas/bfin: New testsuite for bfin.
	* gas/all/gas.exp (bfin-*-*): Expected failure for alternate
	macro syntax.
@
text
@d7 3
a9 3
   0:	0d c6 15 0e 	R7=ALIGN8\(R5,R2\);
   4:	0d c6 08 4a 	R5=ALIGN16\(R0,R1\);
   8:	0d c6 05 84 	R2=ALIGN24\(R5,R0\);
d15 4
a18 4
  10:	17 c4 02 0a 	R5=BYTEOP3P\(R1:0x0,R3:0x2\)\(LO\);
  14:	37 c4 02 00 	R0=BYTEOP3P\(R1:0x0,R3:0x2\)\(HI\);
  18:	17 c4 02 22 	R1=BYTEOP3P\(R1:0x0,R3:0x2\)\(LO, R\);
  1c:	37 c4 02 24 	R2=BYTEOP3P\(R1:0x0,R3:0x2\)\(HI, R\);
d21 1
a21 1
  20:	0c c4 [4-7][[:xdigit:]] 45 	R5=A1.L\+A1.H,R2=A0.L\+A0.H;
d24 2
a25 2
  24:	15 c4 82 06 	\(R2,R3\)=BYTEOP16P\(R1:0x0,R3:0x2\) ;
  28:	15 c4 82 21 	\(R6,R0\)=BYTEOP16P\(R1:0x0,R3:0x2\) \(R\);
d28 4
a31 4
  2c:	14 c4 02 0e 	R7=BYTEOP1P\(R1:0x0,R3:0x2\);
  30:	14 c4 02 44 	R2=BYTEOP1P\(R1:0x0,R3:0x2\)\(T\);
  34:	14 c4 02 26 	R3=BYTEOP1P\(R1:0x0,R3:0x2\)\(R\);
  38:	14 c4 02 6e 	R7=BYTEOP1P\(R1:0x0,R3:0x2\)\(T, R\);
d34 8
a41 8
  3c:	16 c4 02 00 	R0=BYTEOP2P\(R1:0x0,R3:0x2\)\(RNDL\);
  40:	36 c4 02 02 	R1=BYTEOP2P\(R1:0x0,R3:0x2\)\(RNDH\);
  44:	16 c4 02 44 	R2=BYTEOP2P\(R1:0x0,R3:0x2\)\(TL\);
  48:	36 c4 02 46 	R3=BYTEOP2P\(R1:0x0,R3:0x2\)\(TH\);
  4c:	16 c4 02 28 	R4=BYTEOP2P\(R1:0x0,R3:0x2\)\(RNDL, R\);
  50:	36 c4 02 2a 	R5=BYTEOP2P\(R1:0x0,R3:0x2\)\(RNDH, R\);
  54:	16 c4 02 6c 	R6=BYTEOP2P\(R1:0x0,R3:0x2\)\(TL, R\);
  58:	36 c4 02 6e 	R7=BYTEOP2P\(R1:0x0,R3:0x2\)\(TH, R\);
d44 1
a44 1
  5c:	18 c4 03 0a 	R5=BYTEPACK\(R0,R3\);
d47 2
a48 2
  60:	15 c4 82 45 	\(R6,R2\)=BYTEOP16M\(R1:0x0,R3:0x2\) ;
  64:	15 c4 02 6a 	\(R0,R5\)=BYTEOP16M\(R1:0x0,R3:0x2\) \(R\);
d51 2
a52 2
  68:	12 c4 02 00 	SAA\(R1:0x0,R3:0x2\) ;
  6c:	12 c4 02 20 	SAA\(R1:0x0,R3:0x2\) \(R\);
d55 2
a56 2
  70:	18 c4 c0 45 	\(R7,R2\) = BYTEUNPACK R1:0x0 ;
  74:	18 c4 90 69 	\(R6,R4\) = BYTEUNPACK R3:0x2 \(R\);
@

