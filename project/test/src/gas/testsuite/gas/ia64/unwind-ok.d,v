head	1.2;
access;
symbols
	binutils-2_24-branch:1.2.0.26
	binutils-2_24-branchpoint:1.2
	binutils-2_21_1:1.2
	binutils-2_23_2:1.2
	binutils-2_23_1:1.2
	binutils-2_23:1.2
	binutils-2_23-branch:1.2.0.24
	binutils-2_23-branchpoint:1.2
	binutils-2_22_branch:1.2.0.22
	binutils-2_22:1.2
	binutils-2_22-branch:1.2.0.20
	binutils-2_22-branchpoint:1.2
	binutils-2_21:1.2
	binutils-2_21-branch:1.2.0.18
	binutils-2_21-branchpoint:1.2
	binutils-2_20_1:1.2
	binutils-2_20:1.2
	binutils-arc-20081103-branch:1.2.0.16
	binutils-arc-20081103-branchpoint:1.2
	binutils-2_20-branch:1.2.0.14
	binutils-2_20-branchpoint:1.2
	dje-cgen-play1-branch:1.2.0.12
	dje-cgen-play1-branchpoint:1.2
	arc-20081103-branch:1.2.0.10
	arc-20081103-branchpoint:1.2
	binutils-2_19_1:1.2
	binutils-2_19:1.2
	binutils-2_19-branch:1.2.0.8
	binutils-2_19-branchpoint:1.2
	binutils-2_18:1.2
	binutils-2_18-branch:1.2.0.6
	binutils-2_18-branchpoint:1.2
	binutils-csl-coldfire-4_1-32:1.2
	binutils-csl-sourcerygxx-4_1-32:1.2
	binutils-csl-innovasic-fido-3_4_4-33:1.2
	binutils-csl-coldfire-4_1-30:1.2
	binutils-csl-sourcerygxx-4_1-30:1.2
	binutils-csl-coldfire-4_1-28:1.2
	binutils-csl-sourcerygxx-4_1-29:1.2
	binutils-csl-sourcerygxx-4_1-28:1.2
	binutils-csl-arm-2006q3-27:1.2
	binutils-csl-sourcerygxx-4_1-27:1.2
	binutils-csl-arm-2006q3-26:1.2
	binutils-csl-sourcerygxx-4_1-26:1.2
	binutils-csl-sourcerygxx-4_1-25:1.2
	binutils-csl-sourcerygxx-4_1-24:1.2
	binutils-csl-sourcerygxx-4_1-23:1.2
	binutils-csl-sourcerygxx-4_1-21:1.2
	binutils-csl-arm-2006q3-21:1.2
	binutils-csl-sourcerygxx-4_1-22:1.2
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.2
	binutils-csl-sourcerygxx-4_1-20:1.2
	binutils-csl-arm-2006q3-19:1.2
	binutils-csl-sourcerygxx-4_1-19:1.2
	binutils-csl-sourcerygxx-4_1-18:1.2
	binutils-csl-renesas-4_1-9:1.2
	binutils-csl-renesas-4_1-8:1.2
	binutils-csl-renesas-4_1-7:1.2
	binutils-csl-renesas-4_1-6:1.2
	binutils-csl-sourcerygxx-4_1-17:1.2
	binutils-csl-sourcerygxx-4_1-14:1.2
	binutils-csl-sourcerygxx-4_1-15:1.2
	binutils-csl-sourcerygxx-4_1-13:1.2
	binutils-2_17:1.2
	binutils-csl-sourcerygxx-4_1-12:1.2
	binutils-csl-sourcerygxx-3_4_4-21:1.2
	binutils-csl-sourcerygxx-4_1-9:1.2
	binutils-csl-sourcerygxx-4_1-8:1.2
	binutils-csl-sourcerygxx-4_1-7:1.2
	binutils-csl-arm-2006q1-6:1.2
	binutils-csl-sourcerygxx-4_1-6:1.2
	binutils-csl-coldfire-4_1-11:1.2
	binutils-csl-sourcerygxx-3_4_4-19:1.2
	binutils-csl-coldfire-4_1-10:1.2
	binutils-csl-sourcerygxx-4_1-5:1.2
	binutils-csl-sourcerygxx-4_1-4:1.2
	binutils-csl-morpho-4_1-4:1.2
	binutils-csl-sourcerygxx-3_4_4-17:1.2
	binutils-2_17-branch:1.2.0.4
	binutils-2_17-branchpoint:1.2
	binutils-csl-2_17-branch:1.2.0.2
	binutils-csl-2_17-branchpoint:1.2
	binutils_latest_snapshot:1.2;
locks; strict;
comment	@# @;


1.2
date	2005.07.27.06.32.46;	author jbeulich;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.01.06.51.39;	author jbeulich;	state Exp;
branches;
next	;


desc
@@


1.2
log
@gas/
2005-07-27  Jan Beulich  <jbeulich@@novell.com>

	* config/tc-ia64.h (unw_r_record): Change type of fr_mem to unsigned
	int.
	(unw_p_record): Remove unused/redundant fields imask and rmask.
	Combine spoff and pspoff into a union. Combine gr and br into a
	union. Change type of grmask and brmask to unsigned char. Change type
	of frmask to unsigned int.
	(unw_x_record): Combine spoff, pspoff, and treg into a union.
	* config/tc-ia64.c (unwind): New field 'pending_saves'.
	(check_pending_save): New.
	(alloc_record): Clear out entire record.
	(output_psp_gr): Use renamed structure fields.
	(output_psp_sprel): Likewise.
	(output_rp_gr): Likewise.
	(output_rp_br): Likewise.
	(output_rp_psprel): Likewise.
	(output_rp_sprel): Likewise.
	(output_pfs_gr): Likewise.
	(output_pfs_psprel): Likewise.
	(output_pfs_sprel): Likewise.
	(output_preds_gr): Likewise.
	(output_preds_psprel): Likewise.
	(output_preds_sprel): Likewise.
	(output_spill_base): Likewise.
	(output_unat_gr): Likewise.
	(output_unat_psprel): Likewise.
	(output_unat_sprel): Likewise.
	(output_lc_gr): Likewise.
	(output_lc_psprel): Likewise.
	(output_lc_sprel): Likewise.
	(output_fpsr_gr): Likewise.
	(output_fpsr_psprel): Likewise.
	(output_fpsr_sprel): Likewise.
	(output_priunat_gr): Likewise.
	(output_priunat_psprel): Likewise.
	(output_priunat_sprel): Likewise.
	(output_bsp_gr): Likewise.
	(output_bsp_psprel): Likewise.
	(output_bsp_sprel): Likewise.
	(output_bspstore_gr): Likewise.
	(output_bspstore_psprel): Likewise.
	(output_bspstore_sprel): Likewise.
	(output_rnat_gr): Likewise.
	(output_rnat_psprel): Likewise.
	(output_rnat_sprel): Likewise.
	(output_spill_psprel): Likewise.
	(output_spill_sprel): Likewise.
	(output_spill_reg): Likewise.
	(output_fr_mem): Likewise. Allocate one unwind record per set mask
	bit.
	(output_frgr_mem): Likewise.
	(output_gr_mem): Likewise.
	(output_br_mem): Likewise.
	(output_gr_gr): Likewise.
	(output_br_gr): Likewise.
	(fixup_unw_records): Likewise.
	(process_one_record): Use renamed structure fields. For gr_gr and
	br_gr, collect mask from chain of records before output.
	(in_prologue): Simplify and eliminate early returns. Call
	check_pending_save.
	(in_body): Simplify and eliminate early returns.
	(dot_body): Call check_pending_save.
	(md_assemble): Update comment. Deal with pending saves.

gas/testsuite/
2005-07-27  Jan Beulich  <jbeulich@@novell.com>

	* gas/ia64/unwind-bad.l: Uncomment patterns matching new warnings.
	* gas/ia64/unwind-ok.d: Correct expectations.
@
text
@#readelf: -u
#name: ia64 unwind descriptors

Unwind section '\.IA_64\.unwind' at offset 0x[[:xdigit:]]+ contains 8 entries:

<full1>: \[0x[[:xdigit:]]*0-0x[[:xdigit:]]*0\], info at \+0x[[:xdigit:]]*[08]
[[:space:]]*v[[:digit:]]+, flags=0x3 \( ?ehandler uhandler\), len=[[:digit:]]+ bytes
[[:space:]]*R1:prologue\(rlen=8\)
[[:space:]]*P6:fr_mem\(frmask=\[f2,f5\]\)
[[:space:]]*P6:gr_mem\(grmask=\[r4,r7\]\)
[[:space:]]*P1:br_mem\(brmask=\[b1,b5\]\)
[[:space:]]*P4:spill_mask\(imask=\[rfb,rfb,--\]\)
[[:space:]]*P7:spill_base\(pspoff=0x10-0x10\)
[[:space:]]*P3:rp_br\(reg=b7\)
[[:space:]]*P10:unwabi\(abi=@@svr4,context=0x00\)
[[:space:]]*R1:body\(rlen=25\)
[[:space:]]*X2:spill_reg\(t=0,reg=r4,treg=r2\)
[[:space:]]*X4:spill_reg_p\(qp=p1,t=1,reg=r7,treg=r31\)
[[:space:]]*X1:spill_sprel\(reg=b1,t=2,spoff=0x8\)
[[:space:]]*X3:spill_sprel_p\(qp=p2,t=3,reg=b5,spoff=0x10\)
[[:space:]]*X1:spill_psprel\(reg=f2,t=4,pspoff=0x10-0x28\)
[[:space:]]*X3:spill_psprel_p\(qp=p4,t=5,reg=f5,pspoff=0x10-0x30\)
[[:space:]]*X2:restore\(t=6,reg=f16\)
[[:space:]]*X4:restore_p\(qp=p8,t=7,reg=f31\)
[[:space:]]*X2:spill_reg\(t=8,reg=ar\.bsp,treg=r16\)
[[:space:]]*X2:spill_reg\(t=9,reg=ar\.bspstore,treg=r17\)
[[:space:]]*X2:spill_reg\(t=10,reg=ar\.fpsr,treg=r18\)
[[:space:]]*X2:spill_reg\(t=11,reg=ar\.lc,treg=r19\)
[[:space:]]*X2:spill_reg\(t=12,reg=ar\.pfs,treg=r20\)
[[:space:]]*X2:spill_reg\(t=13,reg=ar\.rnat,treg=r21\)
[[:space:]]*X2:spill_reg\(t=14,reg=ar\.unat,treg=r22\)
[[:space:]]*X2:spill_reg\(t=15,reg=psp,treg=r23\)
[[:space:]]*X2:spill_reg\(t=16,reg=pr,treg=r24\)
[[:space:]]*X2:spill_reg\(t=17,reg=rp,treg=r25\)
[[:space:]]*X2:spill_reg\(t=18,reg=@@priunat,treg=r26\)
[[:space:]]*B1:label_state\(label=1\)
[[:space:]]*B2:epilogue\(t=4,ecount=0\)
[[:space:]]*B1:copy_state\(label=1\)
#...
<full2>: \[0x[[:xdigit:]]*0-0x[[:xdigit:]]*0\], info at \+0x[[:xdigit:]]*[08]
[[:space:]]*v[[:digit:]]+, flags=0x0( \(\))?, len=[[:digit:]]+ bytes
[[:space:]]*R2:prologue_gr\(mask=\[rp,psp,pr\],grsave=r8,rlen=14\)
[[:space:]]*P5:frgr_mem\(grmask=\[r4,r7\],frmask=\[f2,f31\]\)
[[:space:]]*P4:spill_mask\(imask=\[frb,bfr,---,---,--\]\)
[[:space:]]*P7:spill_base\(pspoff=0x10-0x10\)
[[:space:]]*P2:br_gr\(brmask=\[b1,b5\],gr=r32\)
[[:space:]]*X2:spill_reg\(t=6,reg=f31,treg=f31\)
[[:space:]]*X4:spill_reg_p\(qp=p63,t=7,reg=f16,treg=f0\)
[[:space:]]*X1:spill_sprel\(reg=f5,t=8,spoff=0x20\)
[[:space:]]*X3:spill_sprel_p\(qp=p31,t=9,reg=f2,spoff=0x18\)
[[:space:]]*X1:spill_psprel\(reg=b5,t=10,pspoff=0x10-0x20\)
[[:space:]]*X3:spill_psprel_p\(qp=p15,t=11,reg=b1,pspoff=0x10-0x18\)
[[:space:]]*X2:restore\(t=12,reg=r7\)
[[:space:]]*X4:restore_p\(qp=p7,t=13,reg=r4\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=0\)
[[:space:]]*R1:prologue\(rlen=0\)
[[:space:]]*R1:body\(rlen=7\)
[[:space:]]*B4:label_state\(label=32\)
[[:space:]]*B3:epilogue\(t=4,ecount=32\)
[[:space:]]*B4:copy_state\(label=32\)
#...
<full3>: \[0x[[:xdigit:]]*0-0x[[:xdigit:]]*0\], info at \+0x[[:xdigit:]]*[08]
[[:space:]]*v[[:digit:]]+, flags=0x0( \(\))?, len=[[:digit:]]+ bytes
[[:space:]]*R3:prologue\(rlen=33\)
[[:space:]]*P4:spill_mask\(imask=\[rrb,brr,bb-,---,---,---,---,---,---,---,---\]\)
[[:space:]]*P7:spill_base\(pspoff=0x10-0x10\)
[[:space:]]*P9:gr_gr\(grmask=\[r4,r5\],r32\)
[[:space:]]*P2:br_gr\(brmask=\[b1,b2\],gr=r34\)
[[:space:]]*P9:gr_gr\(grmask=\[r6,r7\],r124\)
[[:space:]]*P2:br_gr\(brmask=\[b4,b5\],gr=r126\)
[[:space:]]*R3:body\(rlen=33\)
#...
<fframe>: \[0x[[:xdigit:]]*0-0x[[:xdigit:]]*0\], info at \+0x[[:xdigit:]]*[08]
[[:space:]]*v[[:digit:]]+, flags=0x0( \(\))?, len=[[:digit:]]+ bytes
[[:space:]]*R1:prologue\(rlen=1\)
[[:space:]]*P7:mem_stack_f\(t=0,size=0\)
[[:space:]]*R1:body\(rlen=2\)
#...
<vframe>: \[0x[[:xdigit:]]*0-0x[[:xdigit:]]*0\], info at \+0x[[:xdigit:]]*[08]
[[:space:]]*v[[:digit:]]+, flags=0x0( \(\))?, len=[[:digit:]]+ bytes
[[:space:]]*R1:prologue\(rlen=11\)
[[:space:]]*P7:mem_stack_v\(t=0\)
[[:space:]]*P3:psp_gr\(reg=r16\)
[[:space:]]*P8:bsp_when\(t=1\)
[[:space:]]*P3:bsp_gr\(reg=r17\)
[[:space:]]*P8:bspstore_when\(t=2\)
[[:space:]]*P3:bspstore_gr\(reg=r18\)
[[:space:]]*P7:fpsr_when\(t=3\)
[[:space:]]*P3:fpsr_gr\(reg=r19\)
[[:space:]]*P7:lc_when\(t=4\)
[[:space:]]*P3:lc_gr\(reg=r20\)
[[:space:]]*P7:pfs_when\(t=5\)
[[:space:]]*P3:pfs_gr\(reg=r21\)
[[:space:]]*P8:rnat_when\(t=6\)
[[:space:]]*P3:rnat_gr\(reg=r22\)
[[:space:]]*P7:unat_when\(t=7\)
[[:space:]]*P3:unat_gr\(reg=r23\)
[[:space:]]*P7:pr_when\(t=8\)
[[:space:]]*P3:pr_gr\(reg=r24\)
[[:space:]]*P8:priunat_when_gr\(t=9\)
[[:space:]]*P3:priunat_gr\(reg=r25\)
[[:space:]]*P7:rp_when\(t=10\)
[[:space:]]*P3:rp_gr\(reg=r26\)
[[:space:]]*R1:body\(rlen=1\)
#...
<vframesp>: \[0x[[:xdigit:]]*0-0x[[:xdigit:]]*0\], info at \+0x[[:xdigit:]]*[08]
[[:space:]]*v[[:digit:]]+, flags=0x0( \(\))?, len=[[:digit:]]+ bytes
[[:space:]]*R1:prologue\(rlen=11\)
[[:space:]]*P7:mem_stack_v\(t=0\)
[[:space:]]*P7:psp_sprel\(spoff=0x0\)
[[:space:]]*P8:bsp_when\(t=1\)
[[:space:]]*P8:bsp_sprel\(spoff=0x8\)
[[:space:]]*P8:bspstore_when\(t=2\)
[[:space:]]*P8:bspstore_sprel\(spoff=0x10\)
[[:space:]]*P7:fpsr_when\(t=3\)
[[:space:]]*P8:fpsr_sprel\(spoff=0x18\)
[[:space:]]*P7:lc_when\(t=4\)
[[:space:]]*P8:lc_sprel\(spoff=0x20\)
[[:space:]]*P7:pfs_when\(t=5\)
[[:space:]]*P8:pfs_sprel\(spoff=0x28\)
[[:space:]]*P8:rnat_when\(t=6\)
[[:space:]]*P8:rnat_sprel\(spoff=0x30\)
[[:space:]]*P7:unat_when\(t=7\)
[[:space:]]*P8:unat_sprel\(spoff=0x38\)
[[:space:]]*P7:pr_when\(t=8\)
[[:space:]]*P8:pr_sprel\(spoff=0x40\)
[[:space:]]*P8:priunat_when_mem\(t=9\)
[[:space:]]*P8:priunat_sprel\(spoff=0x48\)
[[:space:]]*P7:rp_when\(t=10\)
[[:space:]]*P8:rp_sprel\(spoff=0x50\)
[[:space:]]*R1:body\(rlen=1\)
#...
<psp>: \[0x[[:xdigit:]]*0-0x[[:xdigit:]]*0\], info at \+0x[[:xdigit:]]*[08]
[[:space:]]*v[[:digit:]]+, flags=0x0( \(\))?, len=[[:digit:]]+ bytes
[[:space:]]*R1:prologue\(rlen=11\)
[[:space:]]*P7:mem_stack_v\(t=0\)
[[:space:]]*P7:psp_sprel\(spoff=0x0\)
[[:space:]]*P8:bsp_when\(t=1\)
[[:space:]]*P8:bsp_psprel\(pspoff=0x10-0x18\)
[[:space:]]*P8:bspstore_when\(t=2\)
[[:space:]]*P8:bspstore_psprel\(pspoff=0x10-0x20\)
[[:space:]]*P7:fpsr_when\(t=3\)
[[:space:]]*P7:fpsr_psprel\(pspoff=0x10-0x28\)
[[:space:]]*P7:lc_when\(t=4\)
[[:space:]]*P7:lc_psprel\(pspoff=0x10-0x30\)
[[:space:]]*P7:pfs_when\(t=5\)
[[:space:]]*P7:pfs_psprel\(pspoff=0x10-0x38\)
[[:space:]]*P8:rnat_when\(t=6\)
[[:space:]]*P8:rnat_psprel\(pspoff=0x10-0x40\)
[[:space:]]*P7:unat_when\(t=7\)
[[:space:]]*P7:unat_psprel\(pspoff=0x10-0x48\)
[[:space:]]*P7:pr_when\(t=8\)
[[:space:]]*P7:pr_psprel\(pspoff=0x10-0x50\)
[[:space:]]*P8:priunat_when_mem\(t=9\)
[[:space:]]*P8:priunat_psprel\(pspoff=0x10-0x58\)
[[:space:]]*P7:rp_when\(t=10\)
[[:space:]]*P7:rp_psprel\(pspoff=0x10-0x60\)
[[:space:]]*R1:body\(rlen=1\)
#...
<simple>: \[0x[[:xdigit:]]*0-0x[[:xdigit:]]*0\], info at \+0x[[:xdigit:]]*[08]
[[:space:]]*v[[:digit:]]+, flags=0x0( \(\))?, len=[[:digit:]]+ bytes
#pass
@


1.1
log
@gas/
2005-07-01  Jan Beulich  <jbeulich@@novell.com>

	* config/tc-ia64.c (line_separator_chars): Add '{' and '}'.
	(output_spill_psprel, output_spill_psprel_p): Combine.
	(output_spill_sprel, output_spill_sprel_p): Combine.
	(output_spill_reg, output_spill_regp_p): Combine.
	(process_one_record): Handle psp_psprel.
	(parse_predicate_and_operand): New.
	(convert_expr_to_ab_reg): Two new parameters. Return void. Always
	initialize output values. Emit diagnostic case here.
	(convert_expr_to_xy_reg): Likewise. Don't allow r0, f0, and f1.
	(add_unwind_entry): New second parameter. Allow first parameter to
	be NULL. Parse optional tag, emit warning about further support for
	it otherwise being missing. Check end-of-line when requested.
	(dot_fframe): Clear operand when wrong. Allow tag.
	(dot_vframe): Likewise.
	(dot_vframesp): Likewise. Rename parameter, issue warning when psp
	relative.
	(dot_vframepsp): Remove.
	(dot_altrp): Clear operand when wrong. Allow tag.
	(dot_save): Likewise. Let default case also go through
	add_unwind_entry.
	(dot_savemem): Likewise.
	(dot_restore): Don't return when wrong operand. Allow tag.
	(dot_spillreg, dot_spillreg_p): Combine. Simplify by using
	parse_predicate_and_operand and the new arguments to
	convert_expr_to_ab_reg and convert_expr_to_xy_reg. Don't return
	when wrong operand. Allow tag.
	(dot_restorereg, dot_restorereg_p): Likewise.
	(dot_spillmem, dot_spillmem_p): Likewise.
	(dot_saveg): Clear operand when wrong. Perform tighter operand
	checks. Allow tag.
	(dot_savef): Likewise.
	(dot_saveb): Likewise.
	(dot_savegf): Likewise.
	(dot_spill): Remove end-of-line check. 	Combine. Simplify by using
	parse_predicate_and_operand and the new arguments to
	convert_expr_to_ab_reg and convert_expr_to_xy_reg. Don't return
	when wrong operand. Allow tag.
	(popcount): New.
	(dot_label_state): Don't return when wrong operand.
	(dot_copy_state): Likewise.
	(dot_unwabi): Likewise. Check if in prologue.
	(dot_body): Don't call demand_empty_rest_of_line.
	(dot_prologue): Type of mask and grsave is unsigned. Perform tighter
	operand checks.
	(md_pseudo_table): Also use dot_restorereg for .restorereg.p. Also
	use dot_spillreg for .spillreg.p. Also use dot_spillmem for
	.spillpsp.p and .spillsp.p. Also use dot_vframesp for .vframepsp.
	(parse_operand): New second parameter. Don't deal with '}' here
	anymore. Don't advance past end-of-line.
	(parse_operands): Pass second argument to parse_operand.
	(ia64_start_line): Prevent out-of-bounds access through
	input_line_pointer. Deal with '}' here.
	(ia64_unrecognized_line): Don't deal with '}' here.
	(dot_alias): Use ignore_rest_of_line not its deprecated alias
	discard_rest_of_line.

gas/testsuite/
2005-07-01  Jan Beulich  <jbeulich@@novell.com>

	* gas/ia64/group-2.s: Use register as second operand of .prologue.
	* gas/ia64/unwind-err.s: Add check for .vframesp.
	* gas/ia64/unwind-err.l: Adjust.
	* gas/ia64/strange.[sd]: New.
	* gas/ia64/unwind-bad.[sl]: New.
	* gas/ia64/unwind-ok.[sd]: New.
	* gas/ia64/ia64.exp: Run new tests.
@
text
@d16 1
a16 1
[[:space:]]*R1:body\(rlen=[[:digit:]]+\)
d44 1
a44 1
[[:space:]]*P4:spill_mask\(imask=\[b-b,bb-,---,---,--\]\)
@

