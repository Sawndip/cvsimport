head	1.2;
access;
symbols
	binutils-2_24-branch:1.2.0.26
	binutils-2_24-branchpoint:1.2
	binutils-2_21_1:1.2
	binutils-2_23_2:1.2
	binutils-2_23_1:1.2
	binutils-2_23:1.2
	binutils-2_23-branch:1.2.0.24
	binutils-2_23-branchpoint:1.2
	binutils-2_22_branch:1.2.0.22
	binutils-2_22:1.2
	binutils-2_22-branch:1.2.0.20
	binutils-2_22-branchpoint:1.2
	binutils-2_21:1.2
	binutils-2_21-branch:1.2.0.18
	binutils-2_21-branchpoint:1.2
	binutils-2_20_1:1.2
	binutils-2_20:1.2
	binutils-arc-20081103-branch:1.2.0.16
	binutils-arc-20081103-branchpoint:1.2
	binutils-2_20-branch:1.2.0.14
	binutils-2_20-branchpoint:1.2
	dje-cgen-play1-branch:1.2.0.12
	dje-cgen-play1-branchpoint:1.2
	arc-20081103-branch:1.2.0.10
	arc-20081103-branchpoint:1.2
	binutils-2_19_1:1.2
	binutils-2_19:1.2
	binutils-2_19-branch:1.2.0.8
	binutils-2_19-branchpoint:1.2
	binutils-2_18:1.2
	binutils-2_18-branch:1.2.0.6
	binutils-2_18-branchpoint:1.2
	binutils-csl-coldfire-4_1-32:1.2
	binutils-csl-sourcerygxx-4_1-32:1.2
	binutils-csl-innovasic-fido-3_4_4-33:1.2
	binutils-csl-sourcerygxx-3_4_4-32:1.1
	binutils-csl-coldfire-4_1-30:1.2
	binutils-csl-sourcerygxx-4_1-30:1.2
	binutils-csl-coldfire-4_1-28:1.2
	binutils-csl-sourcerygxx-4_1-29:1.2
	binutils-csl-sourcerygxx-4_1-28:1.2
	binutils-csl-arm-2006q3-27:1.2
	binutils-csl-sourcerygxx-4_1-27:1.2
	binutils-csl-arm-2006q3-26:1.2
	binutils-csl-sourcerygxx-4_1-26:1.2
	binutils-csl-sourcerygxx-4_1-25:1.2
	binutils-csl-sourcerygxx-4_1-24:1.2
	binutils-csl-sourcerygxx-4_1-23:1.2
	binutils-csl-sourcerygxx-4_1-21:1.2
	binutils-csl-arm-2006q3-21:1.2
	binutils-csl-sourcerygxx-4_1-22:1.2
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.2
	binutils-csl-sourcerygxx-4_1-20:1.2
	binutils-csl-arm-2006q3-19:1.2
	binutils-csl-sourcerygxx-4_1-19:1.2
	binutils-csl-sourcerygxx-4_1-18:1.2
	binutils-csl-renesas-4_1-9:1.2
	binutils-csl-sourcerygxx-3_4_4-25:1.1
	binutils-csl-renesas-4_1-8:1.2
	binutils-csl-renesas-4_1-7:1.2
	binutils-csl-renesas-4_1-6:1.2
	binutils-csl-sourcerygxx-4_1-17:1.2
	binutils-csl-sourcerygxx-4_1-14:1.2
	binutils-csl-sourcerygxx-4_1-15:1.2
	binutils-csl-sourcerygxx-4_1-13:1.2
	binutils-2_17:1.2
	binutils-csl-sourcerygxx-4_1-12:1.2
	binutils-csl-sourcerygxx-3_4_4-21:1.2
	binutils-csl-wrs-linux-3_4_4-24:1.1
	binutils-csl-wrs-linux-3_4_4-23:1.1
	binutils-csl-sourcerygxx-4_1-9:1.2
	binutils-csl-sourcerygxx-4_1-8:1.2
	binutils-csl-sourcerygxx-4_1-7:1.2
	binutils-csl-arm-2006q1-6:1.2
	binutils-csl-sourcerygxx-4_1-6:1.2
	binutils-csl-wrs-linux-3_4_4-22:1.1
	binutils-csl-coldfire-4_1-11:1.2
	binutils-csl-sourcerygxx-3_4_4-19:1.2
	binutils-csl-coldfire-4_1-10:1.2
	binutils-csl-sourcerygxx-4_1-5:1.2
	binutils-csl-sourcerygxx-4_1-4:1.2
	binutils-csl-wrs-linux-3_4_4-21:1.1
	binutils-csl-morpho-4_1-4:1.2
	binutils-csl-sourcerygxx-3_4_4-17:1.2
	binutils-csl-wrs-linux-3_4_4-20:1.1
	binutils-2_17-branch:1.2.0.4
	binutils-2_17-branchpoint:1.2
	binutils-csl-2_17-branch:1.2.0.2
	binutils-csl-2_17-branchpoint:1.2
	binutils-csl-gxxpro-3_4-branch:1.1.0.20
	binutils-csl-gxxpro-3_4-branchpoint:1.1
	binutils-2_16_1:1.1
	binutils-csl-arm-2005q1b:1.1
	binutils-2_16:1.1
	binutils-csl-arm-2005q1a:1.1
	binutils-csl-arm-2005q1-branch:1.1.0.18
	binutils-csl-arm-2005q1-branchpoint:1.1
	binutils-2_16-branch:1.1.0.16
	binutils-2_16-branchpoint:1.1
	csl-arm-2004-q3d:1.1
	csl-arm-2004-q3:1.1
	binutils-2_15:1.1
	binutils-2_15-branchpoint:1.1
	csl-arm-2004-q1a:1.1
	csl-arm-2004-q1:1.1
	binutils-2_15-branch:1.1.0.14
	cagney_bfdfile-20040213-branch:1.1.0.12
	cagney_bfdfile-20040213-branchpoint:1.1
	cagney_bigcore-20040122-branch:1.1.0.10
	cagney_bigcore-20040122-branchpoint:1.1
	csl-arm-2003-q4:1.1
	binutils-2_14:1.1
	binutils-2_14-branch:1.1.0.8
	binutils-2_14-branchpoint:1.1
	binutils-2_13_2_1:1.1
	binutils-2_13_2:1.1
	binutils-2_13_1:1.1
	binutils-2_13:1.1
	binutils-2_13-branchpoint:1.1
	binutils-2_13-branch:1.1.0.6
	binutils-2_12_1:1.1
	binutils-2_12:1.1
	binutils-2_12-branch:1.1.0.4
	binutils-2_12-branchpoint:1.1
	cygnus_cvs_20020108_pre:1.1
	binutils-2_11_2:1.1
	binutils-2_11_1:1.1
	binutils-2_11:1.1
	x86_64versiong3:1.1
	binutils-2_11-branch:1.1.0.2
	binutils_latest_snapshot:1.2;
locks; strict;
comment	@# @;


1.2
date	2005.10.24.07.36.40;	author jbeulich;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.21.20.22.22;	author wilson;	state Exp;
branches;
next	;


desc
@@


1.2
log
@gas/
2005-10-24  Jan Beulich  <jbeulich@@novell.com>

	* config/tc-ia64.c (declare_register): Call symbol_create.
	(md_begin): Remove local variables total, ar_base, and cr_base.
	Start loops for registers at their respective first one. Don't
	update md.regsym for alias names. Generate alias name tp for r13.

gas/testsuite/
2005-10-24  Jan Beulich  <jbeulich@@novell.com>

	* gas/ia64/regs.pl: Also check tp alias of r13.
	* gas/ia64/regs.s: Regenerate.
	* gas/ia64/regs.d: Adjust.
@
text
@print ".text\n";
print "\t.type _start,@@","function\n";
print "_start:\n\n";

print "// Fixed and stacked integer registers.\n";
for ($i = 1; $i < 128; ++$i) {
  print "\t{ .mii; mov r$i = r0; nop.i 0; nop.i 0;; }\n";
}
print "\n";

print "// Alternate names for input registers\n";
print "\t.regstk 96, 0, 0, 0\n";
for ($i = 0; $i < 96; ++$i) {
  print "\t{ .mii; mov in$i = r0; nop.i 0; nop.i 0;; }\n";
}
print "\n";

print "// Alternate names for output registers\n";
print "\t.regstk 0, 0, 96, 0\n";
for ($i = 0; $i < 96; ++$i) {
  print "\t{ .mii; mov out$i = r0; nop.i 0; nop.i 0;; }\n";
}
print "\n";

print "// Alternate names for local registers\n";
print "\t.regstk 0, 96, 0, 0\n";
for ($i = 0; $i < 96; ++$i) {
  print "\t{ .mii; mov loc$i = r0; nop.i 0; nop.i 0;; }\n";
}
print "\n";

print "// Return value registers\n";
for ($i = 0; $i < 4; ++$i) {
  print "\t{ .mii; mov ret$i = r0; nop.i 0; nop.i 0;; }\n";
}
print "\n";

print "\t{ .mii;\n";
print "\tmov gp = r0\n";
print "\tmov sp = r0\n";
print "\tmov tp = r0;; }\n\n";

print "// Floating point registers\n";
for ($i = 2; $i < 128; ++$i) {
  print "\t{ .mfi; mov f$i = f0 ;; }\n";
}
print "\n";

print "// Floating point argument registers\n";
for ($i = 0; $i < 8; ++$i) {
  print "\t{ .mfi; mov farg$i = f1 ;; }\n";
}
print "\n";

print "// Floating point return value registers\n";
for ($i = 0; $i < 8; ++$i) {
  print "\t{ .mfi; mov fret$i = f1 ;; }\n";
}
print "\n";

print "// Predicate registers\n";
for ($i = 0; $i < 64; ++$i) {
  print "\t{ .mii; (p$i)\tmov r", $i+1, " = r0; nop.i 0; nop.i 0;; }\n";
}
print "\n";

print "// Predicates as a unit\n";
print "\t{ .mmi; nop.m 0; mov r1 = pr ;; }\n";
print "//\tmov r2 = pr.rot\n";
print "\n";

print "// Branch registers.\n";
for ($i = 0; $i < 8; ++$i) {
  print "\t{ .mmi; mov b$i = r0;; }\n";
}
print "\n";

print "\t{ .mmi; mov rp = r0;; }\n";
print "\n";

print "// Application registers\n";
@@reserved = ( 8..15, 20, 22..23, 31, 33..35, 37..39, 41..47, 67..111 );
%reserved = ();
foreach $i (@@reserved) {
  $reserved{$i} = 1;
}
for ($i = 0; $i < 128; ++$i) {
  print "//" if $reserved{$i};
  print "\t{ .mmi; nop.m 0; mov r1 = ar$i ;; }";
  print "\t\t// reserved" if $reserved{$i};
  print "\n";
}
print "\n";

print "// Application registers by name\n";
for ($i = 0; $i < 8; ++$i) {
  print "\t{ .mmi; nop.m 0; mov r1 = ar.k$i ;;}\n";
}

@@regs = ( "rsc", "bsp", "bspstore", "rnat", "ccv", "unat", "fpsr", "itc",
	  "pfs", "lc", "ec" );
foreach $i (@@regs) {
  print "\t{ .mmi; nop.m 0; mov r1 = ar.$i ;; }\n";
}
print "\n";

print "// Control registers\n";
@@reserved = ( 3..7, 10..15, 18, 26..63, 75..79, 82..127 );
%reserved = ();
foreach $i (@@reserved) {
  $reserved{$i} = 1;
}
for ($i = 0; $i < 128; ++$i) {
  print "//" if $reserved{$i};
  print "\t{ .mfb; mov r1 = cr$i ;; }";
  print "\t\t// reserved" if $reserved{$i};
  print "\n";
}
print "\n";

print "// Control registers by name\n";
@@regs = ( "dcr", "itm", "iva", "pta", "ipsr", "isr", "iip",
	  "iipa", "ifs", "iim", "iha", "lid", "ivr",
	  "tpr", "eoi", "irr0", "irr1", "irr2", "irr3", "itv", "pmv",
	  "lrr0", "lrr1", "cmcv" );
# ias doesn't accept these, despite documentation to the contrary.
# push @@regs, "ida", "idtr", "iitr"
foreach $i (@@regs) {
  print "\t{ .mfb; mov r1 = cr.$i ;; }\n";
}
print "\n";


print "// Other registers\n";
print "\t{ .mfb; mov r1 = psr ;; }\n";
print "//\t{ .mfb; mov r1 = psr.l ;; }\n";
print "\t{ .mfb; mov r1 = psr.um ;; }\n";
print "\t{ .mmi; mov r1 = ip ;; }\n";
print "\n";

print "// Indirect register files\n";
@@regs = ("pmc", "pmd", "pkr", "rr", "ibr", "dbr", "CPUID", "cpuid");
# ias doesn't accept these, despite documentation to the contrary.
# push @@regs, "itr", "dtr";
foreach $i (@@regs) {
  print "\t{ .mmi\n";
  print "\tmov r1 = ${i}[r3]\n";
  print "\tmov r2 = ${i}[r4]\n";
  print "\tnop.i 0;; }\n";
}
@


1.1
log
@IA-64 ELF support.
@
text
@d41 1
a41 1
print "\tnop.i 0;; }\n\n";
@

