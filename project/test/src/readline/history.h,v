head	1.7;
access;
symbols
	gdb_7_6_1-2013-08-30-release:1.7
	gdb_7_6-2013-04-26-release:1.7
	gdb_7_6-branch:1.7.0.6
	gdb_7_6-2013-03-12-branchpoint:1.7
	gdb_7_5_1-2012-11-29-release:1.7
	gdb_7_5-2012-08-17-release:1.7
	gdb_7_5-branch:1.7.0.4
	gdb_7_5-2012-07-18-branchpoint:1.7
	gdb_7_4_1-2012-04-26-release:1.7
	gdb_7_4-2012-01-24-release:1.7
	gdb_7_4-branch:1.7.0.2
	gdb_7_4-2011-12-13-branchpoint:1.7
	gdb_7_3_1-2011-09-04-release:1.6
	gdb_7_3-2011-07-26-release:1.6
	gdb_7_3-branch:1.6.0.36
	gdb_7_3-2011-04-01-branchpoint:1.6
	gdb_7_2-2010-09-02-release:1.6
	gdb_7_2-branch:1.6.0.34
	gdb_7_2-2010-07-07-branchpoint:1.6
	gdb_7_1-2010-03-18-release:1.6
	gdb_7_1-branch:1.6.0.32
	gdb_7_1-2010-02-18-branchpoint:1.6
	gdb_7_0_1-2009-12-22-release:1.6
	gdb_7_0-2009-10-06-release:1.6
	gdb_7_0-branch:1.6.0.30
	gdb_7_0-2009-09-16-branchpoint:1.6
	arc-sim-20090309:1.6
	msnyder-checkpoint-072509-branch:1.6.0.28
	msnyder-checkpoint-072509-branchpoint:1.6
	arc-insight_6_8-branch:1.6.0.26
	arc-insight_6_8-branchpoint:1.6
	insight_6_8-branch:1.6.0.24
	insight_6_8-branchpoint:1.6
	reverse-20081226-branch:1.6.0.22
	reverse-20081226-branchpoint:1.6
	multiprocess-20081120-branch:1.6.0.20
	multiprocess-20081120-branchpoint:1.6
	reverse-20080930-branch:1.6.0.18
	reverse-20080930-branchpoint:1.6
	reverse-20080717-branch:1.6.0.16
	reverse-20080717-branchpoint:1.6
	msnyder-reverse-20080609-branch:1.6.0.14
	msnyder-reverse-20080609-branchpoint:1.6
	drow-reverse-20070409-branch:1.6.0.12
	drow-reverse-20070409-branchpoint:1.6
	gdb_6_8-2008-03-27-release:1.6
	gdb_6_8-branch:1.6.0.10
	gdb_6_8-2008-02-26-branchpoint:1.6
	gdb_6_7_1-2007-10-29-release:1.6
	gdb_6_7-2007-10-10-release:1.6
	gdb_6_7-branch:1.6.0.8
	gdb_6_7-2007-09-07-branchpoint:1.6
	insight_6_6-20070208-release:1.6
	gdb_6_6-2006-12-18-release:1.6
	gdb_6_6-branch:1.6.0.6
	gdb_6_6-2006-11-15-branchpoint:1.6
	insight_6_5-20061003-release:1.6
	gdb-csl-symbian-6_4_50_20060226-12:1.4
	gdb-csl-sourcerygxx-3_4_4-25:1.4
	nickrob-async-20060828-mergepoint:1.6
	gdb-csl-symbian-6_4_50_20060226-11:1.4
	gdb-csl-sourcerygxx-4_1-17:1.4
	gdb-csl-20060226-branch-local-2:1.4
	gdb-csl-sourcerygxx-4_1-14:1.4
	gdb-csl-sourcerygxx-4_1-13:1.4
	gdb-csl-sourcerygxx-4_1-12:1.4
	gdb-csl-sourcerygxx-3_4_4-21:1.4
	gdb_6_5-20060621-release:1.6
	gdb-csl-sourcerygxx-4_1-9:1.4
	gdb-csl-sourcerygxx-4_1-8:1.4
	gdb-csl-sourcerygxx-4_1-7:1.4
	gdb-csl-arm-2006q1-6:1.4
	gdb-csl-sourcerygxx-4_1-6:1.4
	gdb-csl-symbian-6_4_50_20060226-10:1.4
	gdb-csl-symbian-6_4_50_20060226-9:1.4
	gdb-csl-symbian-6_4_50_20060226-8:1.4
	gdb-csl-coldfire-4_1-11:1.4
	gdb-csl-sourcerygxx-3_4_4-19:1.4
	gdb-csl-coldfire-4_1-10:1.4
	gdb_6_5-branch:1.6.0.4
	gdb_6_5-2006-05-14-branchpoint:1.6
	gdb-csl-sourcerygxx-4_1-5:1.4
	nickrob-async-20060513-branch:1.6.0.2
	nickrob-async-20060513-branchpoint:1.6
	gdb-csl-sourcerygxx-4_1-4:1.4
	msnyder-reverse-20060502-branch:1.5.0.4
	msnyder-reverse-20060502-branchpoint:1.5
	gdb-csl-morpho-4_1-4:1.4
	gdb-csl-sourcerygxx-3_4_4-17:1.4
	readline_5_1-import-branch:1.5.0.2
	readline_5_1-import-branchpoint:1.5
	readline-pre-51-import:1.5
	readline_5_1:1.1.1.5
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.4
	gdb-csl-symbian-20060226-branch:1.4.0.78
	gdb-csl-symbian-20060226-branchpoint:1.4
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.4
	msnyder-reverse-20060331-branch:1.4.0.76
	msnyder-reverse-20060331-branchpoint:1.4
	gdb-csl-available-20060303-branch:1.4.0.74
	gdb-csl-available-20060303-branchpoint:1.4
	gdb-csl-20060226-branch:1.4.0.72
	gdb-csl-20060226-branchpoint:1.4
	gdb_6_4-20051202-release:1.4
	msnyder-fork-checkpoint-branch:1.4.0.70
	msnyder-fork-checkpoint-branchpoint:1.4
	gdb-csl-gxxpro-6_3-branch:1.4.0.68
	gdb-csl-gxxpro-6_3-branchpoint:1.4
	gdb_6_4-branch:1.4.0.66
	gdb_6_4-2005-11-01-branchpoint:1.4
	gdb-csl-arm-20051020-branch:1.4.0.64
	gdb-csl-arm-20051020-branchpoint:1.4
	msnyder-tracepoint-checkpoint-branch:1.4.0.62
	msnyder-tracepoint-checkpoint-branchpoint:1.4
	gdb-csl-arm-20050325-2005-q1b:1.4
	gdb-csl-arm-20050325-2005-q1a:1.4
	csl-arm-20050325-branch:1.4.0.60
	csl-arm-20050325-branchpoint:1.4
	gdb_6_3-20041109-release:1.4
	gdb_6_3-branch:1.4.0.56
	gdb_6_3-20041019-branchpoint:1.4
	drow_intercu-merge-20040921:1.4
	drow_intercu-merge-20040915:1.4
	jimb-gdb_6_2-e500-branch:1.4.0.58
	jimb-gdb_6_2-e500-branchpoint:1.4
	gdb_6_2-20040730-release:1.4
	gdb_6_2-branch:1.4.0.54
	gdb_6_2-2004-07-10-gmt-branchpoint:1.4
	gdb_6_1_1-20040616-release:1.4
	gdb_6_1-2004-04-05-release:1.4
	drow_intercu-merge-20040402:1.4
	drow_intercu-merge-20040327:1.4
	ezannoni_pie-20040323-branch:1.4.0.52
	ezannoni_pie-20040323-branchpoint:1.4
	cagney_tramp-20040321-mergepoint:1.4
	cagney_tramp-20040309-branch:1.4.0.50
	cagney_tramp-20040309-branchpoint:1.4
	gdb_6_1-branch:1.4.0.48
	gdb_6_1-2004-03-01-gmt-branchpoint:1.4
	drow_intercu-20040221-branch:1.4.0.46
	drow_intercu-20040221-branchpoint:1.4
	cagney_bfdfile-20040213-branch:1.4.0.44
	cagney_bfdfile-20040213-branchpoint:1.4
	drow-cplus-merge-20040208:1.4
	carlton_dictionary-20040126-merge:1.4
	cagney_bigcore-20040122-branch:1.4.0.42
	cagney_bigcore-20040122-branchpoint:1.4
	drow-cplus-merge-20040113:1.4
	drow-cplus-merge-20031224:1.4
	drow-cplus-merge-20031220:1.4
	carlton_dictionary-20031215-merge:1.4
	drow-cplus-merge-20031214:1.4
	carlton-dictionary-20031111-merge:1.4
	gdb_6_0-2003-10-04-release:1.4
	kettenis_sparc-20030918-branch:1.4.0.40
	kettenis_sparc-20030918-branchpoint:1.4
	carlton_dictionary-20030917-merge:1.4
	ezannoni_pie-20030916-branchpoint:1.4
	ezannoni_pie-20030916-branch:1.4.0.38
	cagney_x86i386-20030821-branch:1.4.0.36
	cagney_x86i386-20030821-branchpoint:1.4
	carlton_dictionary-20030805-merge:1.4
	carlton_dictionary-20030627-merge:1.4
	gdb_6_0-branch:1.4.0.34
	gdb_6_0-2003-06-23-branchpoint:1.4
	jimb-ppc64-linux-20030613-branch:1.4.0.32
	jimb-ppc64-linux-20030613-branchpoint:1.4
	cagney_convert-20030606-branch:1.4.0.30
	cagney_convert-20030606-branchpoint:1.4
	cagney_writestrings-20030508-branch:1.4.0.28
	cagney_writestrings-20030508-branchpoint:1.4
	jimb-ppc64-linux-20030528-branch:1.4.0.26
	jimb-ppc64-linux-20030528-branchpoint:1.4
	carlton_dictionary-20030523-merge:1.4
	cagney_fileio-20030521-branch:1.4.0.24
	cagney_fileio-20030521-branchpoint:1.4
	kettenis_i386newframe-20030517-mergepoint:1.4
	jimb-ppc64-linux-20030509-branch:1.4.0.22
	jimb-ppc64-linux-20030509-branchpoint:1.4
	kettenis_i386newframe-20030504-mergepoint:1.4
	carlton_dictionary-20030430-merge:1.4
	kettenis_i386newframe-20030419-branch:1.4.0.20
	kettenis_i386newframe-20030419-branchpoint:1.4
	carlton_dictionary-20030416-merge:1.4
	cagney_frameaddr-20030409-mergepoint:1.4
	kettenis_i386newframe-20030406-branch:1.4.0.18
	kettenis_i386newframe-20030406-branchpoint:1.4
	cagney_frameaddr-20030403-branchpoint:1.4
	cagney_frameaddr-20030403-branch:1.4.0.16
	cagney_framebase-20030330-mergepoint:1.4
	cagney_framebase-20030326-branch:1.4.0.14
	cagney_framebase-20030326-branchpoint:1.4
	cagney_lazyid-20030317-branch:1.4.0.12
	cagney_lazyid-20030317-branchpoint:1.4
	kettenis-i386newframe-20030316-mergepoint:1.4
	offbyone-20030313-branch:1.4.0.10
	offbyone-20030313-branchpoint:1.4
	kettenis-i386newframe-20030308-branch:1.4.0.8
	kettenis-i386newframe-20030308-branchpoint:1.4
	carlton_dictionary-20030305-merge:1.4
	cagney_offbyone-20030303-branch:1.4.0.6
	cagney_offbyone-20030303-branchpoint:1.4
	carlton_dictionary-20030207-merge:1.4
	interps-20030202-branch:1.4.0.4
	interps-20030202-branchpoint:1.4
	cagney-unwind-20030108-branch:1.4.0.2
	cagney-unwind-20030108-branchpoint:1.4
	carlton_dictionary-20021223-merge:1.4
	gdb_5_3-2002-12-12-release:1.3
	readline-pre-43-import:1.3
	carlton_dictionary-20021115-merge:1.3
	kseitz_interps-20021105-merge:1.3
	kseitz_interps-20021103-merge:1.3
	drow-cplus-merge-20021020:1.3
	drow-cplus-merge-20021025:1.3
	carlton_dictionary-20021025-merge:1.3
	carlton_dictionary-20021011-merge:1.3
	drow-cplus-branch:1.3.0.24
	drow-cplus-branchpoint:1.3
	kseitz_interps-20020930-merge:1.3
	carlton_dictionary-20020927-merge:1.3
	carlton_dictionary-branch:1.3.0.22
	carlton_dictionary-20020920-branchpoint:1.3
	gdb_5_3-branch:1.3.0.20
	gdb_5_3-2002-09-04-branchpoint:1.3
	kseitz_interps-20020829-merge:1.3
	cagney_sysregs-20020825-branch:1.3.0.18
	cagney_sysregs-20020825-branchpoint:1.3
	readline_4_3-import-branch:1.3.0.16
	readline_4_3-import-branchpoint:1.3
	readline_4_3:1.1.1.4
	gdb_5_2_1-2002-07-23-release:1.3
	kseitz_interps-20020528-branch:1.3.0.14
	kseitz_interps-20020528-branchpoint:1.3
	cagney_regbuf-20020515-branch:1.3.0.12
	cagney_regbuf-20020515-branchpoint:1.3
	jimb-macro-020506-branch:1.3.0.10
	jimb-macro-020506-branchpoint:1.3
	gdb_5_2-2002-04-29-release:1.3
	gdb_5_2-branch:1.3.0.8
	gdb_5_2-2002-03-03-branchpoint:1.3
	gdb_5_1_1-2002-01-24-release:1.3
	gdb_5_1_0_1-2002-01-03-release:1.3
	cygnus_cvs_20020108_pre:1.3
	gdb_5_1_0_1-2002-01-03-branch:1.3.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.3
	gdb_5_1-2001-11-21-release:1.3
	gdb_s390-2001-09-26-branch:1.3.0.4
	gdb_s390-2001-09-26-branchpoint:1.3
	gdb_5_1-2001-07-29-branch:1.3.0.2
	gdb_5_1-2001-07-29-branchpoint:1.3
	insight-precleanup-2001-01-01:1.3
	readline_4_1:1.1.1.3
	readline_4_0:1.1.1.2
	FSF:1.1.1
	readline-pre-41-import:1.2
	gdb-premipsmulti-2000-06-06-branch:1.1.1.2.0.4
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.2
	gdb_5_0-2000-05-19-release:1.1.1.2
	gdb_4_18_2-2000-05-18-release:1.1.1.2
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.2
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.2
	gdb_5_0-2000-04-10-branch:1.1.1.2.0.2
	gdb_5_0-2000-04-10-branchpoint:1.1.1.2
	repo-unification-2000-02-06:1.1.1.2
	gdb-2000-02-04:1.1.1.2
	gdb-2000-02-02:1.1.1.2
	gdb-2000-02-01:1.1.1.2
	gdb-2000-01-31:1.1.1.2
	gdb-2000-01-26:1.1.1.2
	gdb-2000-01-24:1.1.1.2
	gdb-2000-01-17:1.1.1.2
	gdb-2000-01-10:1.1.1.2
	gdb-2000-01-05:1.1.1.2
	gdb-1999-12-21:1.1.1.2
	gdb-1999-12-13:1.1.1.2
	gdb-1999-12-07:1.1.1.2
	gdb-1999-12-06:1.1.1.2
	gdb-1999-11-16:1.1.1.2
	gdb-1999-11-08:1.1.1.2
	gdb-1999-11-01:1.1.1.2
	gdb-1999-10-25:1.1.1.2
	gdb-1999-10-18:1.1.1.2
	gdb-1999-10-11:1.1.1.2
	gdb-1999-10-04:1.1.1.2
	gdb-1999-09-28:1.1.1.2
	gdb-1999-09-21:1.1.1.2
	gdb-1999-09-13:1.1.1.2
	gdb-1999-09-08:1.1.1.2
	gdb-1999-08-30:1.1.1.2
	gdb-1999-08-23:1.1.1.2
	gdb-1999-08-16:1.1.1.2
	gdb-1999-08-09:1.1.1.2
	gdb-1999-08-02:1.1.1.2
	gdb-1999-07-26:1.1.1.1
	gdb-1999-07-19:1.1.1.1
	gdb-1999-07-12:1.1.1.1
	gdb-post-reformat-19990707:1.1.1.1
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.1
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.7
date	2011.05.11.23.38.39;	author jkratoch;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.05.18.26.12;	author drow;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.20.20.13.20;	author ezannoni;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2002.12.08.22.31.37;	author ezannoni;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.09.17.19.56;	author ezannoni;	state Exp;
branches
	1.3.16.1
	1.3.22.1
	1.3.24.1;
next	1.2;

1.2
date	2000.07.07.17.15.45;	author ezannoni;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.53;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.5.2.1
date	2006.04.24.22.00.25;	author drow;	state Exp;
branches;
next	;

1.3.16.1
date	2002.08.25.23.41.17;	author ezannoni;	state Exp;
branches;
next	;

1.3.22.1
date	2002.12.23.19.39.43;	author carlton;	state Exp;
branches;
next	;

1.3.24.1
date	2003.12.14.20.28.14;	author drow;	state Exp;
branches;
next	;

1.1.1.1
date	99.04.16.01.34.53;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.08.02.23.47.58;	author jsm;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.07.09.16.21.20;	author ezannoni;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.08.23.22.02.27;	author ezannoni;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.04.20.20.05.35;	author ezannoni;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Imported readline 6.2, and upstream patch 001.

[patch 0/3] readline-6.2 rebase
http://sourceware.org/ml/gdb-patches/2011-05/msg00003.html
[patch 1/3] readline-6.2: Merge of already posted patches
http://sourceware.org/ml/gdb-patches/2011-05/msg00004.html
	=
	[Bug-readline] [RFC/readline] bind.c, rl_function_dumper, Free allocated
	http://lists.gnu.org/archive/html/bug-readline/2011-03/msg00000.html
	[Bug-readline] [patch] Fix underquotation in readline/examples/rlfe/conf
	http://lists.gnu.org/archive/html/bug-readline/2011-04/msg00001.html
	[Bug-readline] [patch] Makefile.in htm<->html
	http://lists.gnu.org/archive/html/bug-readline/2011-04/msg00002.html
	Re: [Bug-readline] [patch] Makefile.in dependency: callback.o: xmalloc.h
	http://lists.gnu.org/archive/html/bug-readline/2011-04/msg00004.html
	[Bug-readline] [patch] Remove . from the VPATH directive
	http://lists.gnu.org/archive/html/bug-readline/2011-04/msg00005.html
	Eli Zaretskii's __MSDOS__ / __GO32__ / __MINGW32__ / __DJGPP__ stuff:
	http://sourceware.org/ml/gdb/2011-04/msg00002.html
	Jan Kratochvil's patch for FSF GDB tree local-specific changes:
	http://sourceware.org/ml/gdb/2011-04/msg00006.html
	Preservation of existing ChangeLog.gdb files, their updates.
[patch 2/3] readline-6.2: Workaround "ask" regression
http://sourceware.org/ml/gdb-patches/2011-05/msg00005.html
[patch 3/3] readline-6.2: Revert 5.x compat., apply 6.x compat.
http://sourceware.org/ml/gdb-patches/2011-05/msg00006.html
[patch 4/3] readline-6.2: Substitute inc-hist.texinfo
http://sourceware.org/ml/gdb-patches/2011-05/msg00010.html

readline/
	Workaround gdb.base/completion.exp regression on readline-6.2.
	* complete.c (get_y_or_n): Disable the return on RL_STATE_CALLBACK.

	Imported readline 6.2, and upstream patch 001.
	* configure: Regenerate.

readline/doc/
	* hsuser.texi (Using History Interactively): Disable !BashFeatures
	@@defcodeindex.  Make the `Programming with GNU History' reference
	external.
	* inc-hist.texinfo: Remove.

	Imported readline 6.2, and upstream patch 001.

readline/examples/
	Imported readline 6.2, and upstream patch 001.

readline/examples/rlfe/
	Imported readline 6.2, and upstream patch 001.

gdb/
	* config.in: Regenerate.
	* configure: Regenerate.
	* configure.ac <--with-system-readline> (for readline_echoing_p):
	Remove the test.
	* tui/tui-io.c (tui_old_readline_echoing_p): Rename to ...
	(tui_old_rl_echoing_p): ... here.
	(tui_setup_io): Rename extern declaration readline_echoing_p to
	_rl_echoing_p.  Adjust assignments for the both renames.

gdb/doc/
	* Makefile.in (GDB_DOC_SOURCE_INCLUDES): Rename inc-hist.texinfo to
	hsuser.texi.
	* gdb.texinfo <!SYSTEM_READLINE>: Rename inc-hist.texinfo inclusion and
	comment to hsuser.texi.  Change rluser.texi name in the comment.
@
text
@/* history.h -- the names of functions that you can call in history. */

/* Copyright (C) 1989-2009 Free Software Foundation, Inc.

   This file contains the GNU History Library (History), a set of
   routines for managing the text of previously typed lines.

   History is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   History is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with History.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef _HISTORY_H_
#define _HISTORY_H_

#ifdef __cplusplus
extern "C" {
#endif

#include <time.h>		/* XXX - for history timestamp code */

#if defined READLINE_LIBRARY
#  include "rlstdc.h"
#  include "rltypedefs.h"
#else
#  include <readline/rlstdc.h>
#  include <readline/rltypedefs.h>
#endif

#ifdef __STDC__
typedef void *histdata_t;
#else
typedef char *histdata_t;
#endif

/* The structure used to store a history entry. */
typedef struct _hist_entry {
  char *line;
  char *timestamp;		/* char * rather than time_t for read/write */
  histdata_t data;
} HIST_ENTRY;

/* Size of the history-library-managed space in history entry HS. */
#define HISTENT_BYTES(hs)	(strlen ((hs)->line) + strlen ((hs)->timestamp))

/* A structure used to pass the current state of the history stuff around. */
typedef struct _hist_state {
  HIST_ENTRY **entries;		/* Pointer to the entries themselves. */
  int offset;			/* The location pointer within this array. */
  int length;			/* Number of elements within this array. */
  int size;			/* Number of slots allocated to this array. */
  int flags;
} HISTORY_STATE;

/* Flag values for the `flags' member of HISTORY_STATE. */
#define HS_STIFLED	0x01

/* Initialization and state management. */

/* Begin a session in which the history functions might be used.  This
   just initializes the interactive variables. */
extern void using_history PARAMS((void));

/* Return the current HISTORY_STATE of the history. */
extern HISTORY_STATE *history_get_history_state PARAMS((void));

/* Set the state of the current history array to STATE. */
extern void history_set_history_state PARAMS((HISTORY_STATE *));

/* Manage the history list. */

/* Place STRING at the end of the history list.
   The associated data field (if any) is set to NULL. */
extern void add_history PARAMS((const char *));

/* Change the timestamp associated with the most recent history entry to
   STRING. */
extern void add_history_time PARAMS((const char *));

/* A reasonably useless function, only here for completeness.  WHICH
   is the magic number that tells us which element to delete.  The
   elements are numbered from 0. */
extern HIST_ENTRY *remove_history PARAMS((int));

/* Free the history entry H and return any application-specific data
   associated with it. */
extern histdata_t free_history_entry PARAMS((HIST_ENTRY *));

/* Make the history entry at WHICH have LINE and DATA.  This returns
   the old entry so you can dispose of the data.  In the case of an
   invalid WHICH, a NULL pointer is returned. */
extern HIST_ENTRY *replace_history_entry PARAMS((int, const char *, histdata_t));

/* Clear the history list and start over. */
extern void clear_history PARAMS((void));

/* Stifle the history list, remembering only MAX number of entries. */
extern void stifle_history PARAMS((int));

/* Stop stifling the history.  This returns the previous amount the
   history was stifled by.  The value is positive if the history was
   stifled, negative if it wasn't. */
extern int unstifle_history PARAMS((void));

/* Return 1 if the history is stifled, 0 if it is not. */
extern int history_is_stifled PARAMS((void));

/* Information about the history list. */

/* Return a NULL terminated array of HIST_ENTRY which is the current input
   history.  Element 0 of this list is the beginning of time.  If there
   is no history, return NULL. */
extern HIST_ENTRY **history_list PARAMS((void));

/* Returns the number which says what history element we are now
   looking at.  */
extern int where_history PARAMS((void));
  
/* Return the history entry at the current position, as determined by
   history_offset.  If there is no entry there, return a NULL pointer. */
extern HIST_ENTRY *current_history PARAMS((void));

/* Return the history entry which is logically at OFFSET in the history
   array.  OFFSET is relative to history_base. */
extern HIST_ENTRY *history_get PARAMS((int));

/* Return the timestamp associated with the HIST_ENTRY * passed as an
   argument */
extern time_t history_get_time PARAMS((HIST_ENTRY *));

/* Return the number of bytes that the primary history entries are using.
   This just adds up the lengths of the_history->lines. */
extern int history_total_bytes PARAMS((void));

/* Moving around the history list. */

/* Set the position in the history list to POS. */
extern int history_set_pos PARAMS((int));

/* Back up history_offset to the previous history entry, and return
   a pointer to that entry.  If there is no previous entry, return
   a NULL pointer. */
extern HIST_ENTRY *previous_history PARAMS((void));

/* Move history_offset forward to the next item in the input_history,
   and return the a pointer to that entry.  If there is no next entry,
   return a NULL pointer. */
extern HIST_ENTRY *next_history PARAMS((void));

/* Searching the history list. */

/* Search the history for STRING, starting at history_offset.
   If DIRECTION < 0, then the search is through previous entries,
   else through subsequent.  If the string is found, then
   current_history () is the history entry, and the value of this function
   is the offset in the line of that history entry that the string was
   found in.  Otherwise, nothing is changed, and a -1 is returned. */
extern int history_search PARAMS((const char *, int));

/* Search the history for STRING, starting at history_offset.
   The search is anchored: matching lines must begin with string.
   DIRECTION is as in history_search(). */
extern int history_search_prefix PARAMS((const char *, int));

/* Search for STRING in the history list, starting at POS, an
   absolute index into the list.  DIR, if negative, says to search
   backwards from POS, else forwards.
   Returns the absolute index of the history element where STRING
   was found, or -1 otherwise. */
extern int history_search_pos PARAMS((const char *, int, int));

/* Managing the history file. */

/* Add the contents of FILENAME to the history list, a line at a time.
   If FILENAME is NULL, then read from ~/.history.  Returns 0 if
   successful, or errno if not. */
extern int read_history PARAMS((const char *));

/* Read a range of lines from FILENAME, adding them to the history list.
   Start reading at the FROM'th line and end at the TO'th.  If FROM
   is zero, start at the beginning.  If TO is less than FROM, read
   until the end of the file.  If FILENAME is NULL, then read from
   ~/.history.  Returns 0 if successful, or errno if not. */
extern int read_history_range PARAMS((const char *, int, int));

/* Write the current history to FILENAME.  If FILENAME is NULL,
   then write the history list to ~/.history.  Values returned
   are as in read_history ().  */
extern int write_history PARAMS((const char *));

/* Append NELEMENT entries to FILENAME.  The entries appended are from
   the end of the list minus NELEMENTs up to the end of the list. */
extern int append_history PARAMS((int, const char *));

/* Truncate the history file, leaving only the last NLINES lines. */
extern int history_truncate_file PARAMS((const char *, int));

/* History expansion. */

/* Expand the string STRING, placing the result into OUTPUT, a pointer
   to a string.  Returns:

   0) If no expansions took place (or, if the only change in
      the text was the de-slashifying of the history expansion
      character)
   1) If expansions did take place
  -1) If there was an error in expansion.
   2) If the returned line should just be printed.

  If an error ocurred in expansion, then OUTPUT contains a descriptive
  error message. */
extern int history_expand PARAMS((char *, char **));

/* Extract a string segment consisting of the FIRST through LAST
   arguments present in STRING.  Arguments are broken up as in
   the shell. */
extern char *history_arg_extract PARAMS((int, int, const char *));

/* Return the text of the history event beginning at the current
   offset into STRING.  Pass STRING with *INDEX equal to the
   history_expansion_char that begins this specification.
   DELIMITING_QUOTE is a character that is allowed to end the string
   specification for what to search for in addition to the normal
   characters `:', ` ', `\t', `\n', and sometimes `?'. */
extern char *get_history_event PARAMS((const char *, int *, int));

/* Return an array of tokens, much as the shell might.  The tokens are
   parsed out of STRING. */
extern char **history_tokenize PARAMS((const char *));

/* Exported history variables. */
extern int history_base;
extern int history_length;
extern int history_max_entries;
extern char history_expansion_char;
extern char history_subst_char;
extern char *history_word_delimiters;
extern char history_comment_char;
extern char *history_no_expand_chars;
extern char *history_search_delimiter_chars;
extern int history_quotes_inhibit_expansion;

extern int history_write_timestamps;

/* Backwards compatibility */
extern int max_input_history;

/* If set, this function is called to decide whether or not a particular
   history expansion should be treated as a special case for the calling
   application and not expanded. */
extern rl_linebuf_func_t *history_inhibit_expansion_function;

#ifdef __cplusplus
}
#endif

#endif /* !_HISTORY_H_ */
@


1.6
log
@Readline 5.1 import for HEAD.
@
text
@a1 1
/* Copyright (C) 1989-2003 Free Software Foundation, Inc.
d3 3
a5 1
   This file contains the GNU History Library (the Library), a set of
d8 1
a8 1
   The Library is free software; you can redistribute it and/or modify
d10 2
a11 2
   the Free Software Foundation; either version 2, or (at your option)
   any later version.
d13 8
a20 9
   The Library is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   The GNU General Public License is often shipped with GNU software, and
   is generally kept in a file called COPYING or LICENSE.  If you do not
   have a copy of the license, write to the Free Software Foundation,
   59 Temple Place, Suite 330, Boston, MA 02111 USA. */
@


1.5
log
@touched all sources to ease import of readline-5.1
@
text
@d1 2
a2 2
/* History.h -- the names of functions that you can call in history. */
/* Copyright (C) 1989, 1992 Free Software Foundation, Inc.
d29 2
d48 1
d52 3
d85 4
d94 4
d136 4
d252 2
@


1.5.2.1
log
@Import readline 5.1 on the branch.
@
text
@d1 2
a2 2
/* history.h -- the names of functions that you can call in history. */
/* Copyright (C) 1989-2003 Free Software Foundation, Inc.
a28 2
#include <time.h>		/* XXX - for history timestamp code */

a45 1
  char *timestamp;		/* char * rather than time_t for read/write */
a48 3
/* Size of the history-library-managed space in history entry HS. */
#define HISTENT_BYTES(hs)	(strlen ((hs)->line) + strlen ((hs)->timestamp))

a78 4
/* Change the timestamp associated with the most recent history entry to
   STRING. */
extern void add_history_time PARAMS((const char *));

a83 4
/* Free the history entry H and return any application-specific data
   associated with it. */
extern histdata_t free_history_entry PARAMS((HIST_ENTRY *));

a121 4
/* Return the timestamp associated with the HIST_ENTRY * passed as an
   argument */
extern time_t history_get_time PARAMS((HIST_ENTRY *));

a233 2
extern int history_write_timestamps;

@


1.4
log
@Import of readline 4.3.
Non-readline modified files:

src/gdb/ChangeLog src/gdb/defs.h src/gdb/cli/cli-cmds.c
src/gdb/cli/cli-setshow.c src/gdb/tui/ChangeLog
src/gdb/tui/tuiWin.c

In readline directory:

        * compat.c, mbutil.c, misc.c, rlmbutil.h, rltypedefs.h,
        text.c, doc/history.0, doc/history.3, support/wcwidth.c,
        examples/readlinebuf.h, examples/rlcat.c: New files.

        * CHANGELOG, CHANGES, INSTALL,  MANIFEST, Makefile.in, README,
        aclocal.m4, ansi_stdlib.h, bind.c, callback.c, chardefs.h,
        complete.c, config.h.in, configure, configure.in, display.c,
        emacs_keymap.c, funmap.c, histexpand.c, histfile.c, histlib.h,
        history.c, history.h, histsearch.c, input.c, isearch.c,
        keymaps.c, keymaps.h, kill.c, macro.c, nls.c, parens.c,
        posixdir.h, readline.c, readline.h, rlconf.h, rldefs.h,
        rlprivate.h, rlshell.h, rlstdc.h, rltty.c, savestring.c,
        search.c, shell.c, signals.c, terminal.c, tilde.c, tilde.h,
        undo.c, util.c, vi_keymap.c, vi_mode.c, xmalloc.c, xmalloc.h,
        doc/Makefile.in, doc/hist.texinfo, doc/hstech.texinfo,
        doc/hsuser.texinfo, doc/manvers.texinfo, doc/readline.3,
        doc/rlman.texinfo, doc/rltech.texinfo, doc/rluser.texinfo
        doc/rluserman.texinfo, doc/texi2dvi, doc/texi2html,
        shlib/Makefile.in, support/install.sh, support/mkdirs,
        support/mkdist, support/shlib-install, support/shobj-conf,
        examples/Inputrc, examples/Makefile.in, examples/fileman.c,
        examples/histexamp.c, examples/manexamp.c, examples/rl.c,
        examples/rlfe.c, examples/rltest.c, examples/rlversion.c:
        Modified files.
@
text
@@


1.3
log
@readline:
2000-07-09  Elena Zannoni  <ezannoni@@kwikemart.cygnus.com>

        * Import of readline 4.1.

        Locally modified files: Makefile.in, configure.in, configure
        (regenerated), config.h.in (regenerated), readline.h, rltty.c,
 	shell.c signals.c.

        Locally added files: acconfig.h, config/*, config.h.bot,
        cross-build/*, doc/inc-hit.texinfo.

        New files: USAGE, rlprivate.h, rlshell.h, xmalloc.h.
examples:
2000-07-09  Elena Zannoni  <ezannoni@@kwikemart.cygnus.com>

        * Import of readline 4.1.

        New files: excallback.c, rlfe.c.
doc:
2000-07-09  Elena Zannoni  <ezannoni@@kwikemart.cygnus.com>

        * Import of readline 4.1.

        Regenerated inc-hist.texinfo as copy of hsuser.texinfo, for
        inclusion in the gdb manual.

        New file: rluserman.texinfo
@
text
@d31 1
d34 1
a34 8
#endif

#if !defined (_FUNCTION_DEF)
#  define _FUNCTION_DEF
typedef int Function ();
typedef void VFunction ();
typedef char *CPFunction ();
typedef char **CPPFunction ();
d65 1
a65 1
extern void using_history __P((void));
d68 1
a68 1
extern HISTORY_STATE *history_get_history_state __P((void));
d71 1
a71 1
extern void history_set_history_state __P((HISTORY_STATE *));
d77 1
a77 1
extern void add_history __P((char *));
d82 1
a82 1
extern HIST_ENTRY *remove_history __P((int));
d87 1
a87 1
extern HIST_ENTRY *replace_history_entry __P((int, char *, histdata_t));
d90 1
a90 1
extern void clear_history __P((void));
d93 1
a93 1
extern void stifle_history __P((int));
d98 1
a98 1
extern int unstifle_history __P((void));
d101 1
a101 1
extern int history_is_stifled __P((void));
d108 1
a108 1
extern HIST_ENTRY **history_list __P((void));
d112 1
a112 1
extern int where_history __P((void));
d116 1
a116 1
extern HIST_ENTRY *current_history __P((void));
d120 1
a120 1
extern HIST_ENTRY *history_get __P((int));
d124 1
a124 1
extern int history_total_bytes __P((void));
d129 1
a129 1
extern int history_set_pos __P((int));
d134 1
a134 1
extern HIST_ENTRY *previous_history __P((void));
d139 1
a139 1
extern HIST_ENTRY *next_history __P((void));
d149 1
a149 1
extern int history_search __P((char *, int));
d154 1
a154 1
extern int history_search_prefix __P((char *, int));
d161 1
a161 1
extern int history_search_pos __P((char *, int, int));
d168 1
a168 1
extern int read_history __P((char *));
d175 1
a175 1
extern int read_history_range __P((char *, int, int));
d180 1
a180 1
extern int write_history __P((char *));
d184 1
a184 1
extern int append_history __P((int, char *));
d187 1
a187 1
extern int history_truncate_file __P((char *, int));
d203 1
a203 1
extern int history_expand __P((char *, char **));
d208 1
a208 1
extern char *history_arg_extract __P((int, int, char *));
d216 1
a216 1
extern char *get_history_event __P((char *, int *, int));
d220 1
a220 1
extern char **history_tokenize __P((char *));
d225 1
a225 1
extern int max_input_history;
d228 1
d234 3
d240 1
a240 1
extern Function *history_inhibit_expansion_function;
@


1.3.24.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@a30 1
#  include "rltypedefs.h"
d33 8
a40 1
#  include <readline/rltypedefs.h>
d71 1
a71 1
extern void using_history PARAMS((void));
d74 1
a74 1
extern HISTORY_STATE *history_get_history_state PARAMS((void));
d77 1
a77 1
extern void history_set_history_state PARAMS((HISTORY_STATE *));
d83 1
a83 1
extern void add_history PARAMS((const char *));
d88 1
a88 1
extern HIST_ENTRY *remove_history PARAMS((int));
d93 1
a93 1
extern HIST_ENTRY *replace_history_entry PARAMS((int, const char *, histdata_t));
d96 1
a96 1
extern void clear_history PARAMS((void));
d99 1
a99 1
extern void stifle_history PARAMS((int));
d104 1
a104 1
extern int unstifle_history PARAMS((void));
d107 1
a107 1
extern int history_is_stifled PARAMS((void));
d114 1
a114 1
extern HIST_ENTRY **history_list PARAMS((void));
d118 1
a118 1
extern int where_history PARAMS((void));
d122 1
a122 1
extern HIST_ENTRY *current_history PARAMS((void));
d126 1
a126 1
extern HIST_ENTRY *history_get PARAMS((int));
d130 1
a130 1
extern int history_total_bytes PARAMS((void));
d135 1
a135 1
extern int history_set_pos PARAMS((int));
d140 1
a140 1
extern HIST_ENTRY *previous_history PARAMS((void));
d145 1
a145 1
extern HIST_ENTRY *next_history PARAMS((void));
d155 1
a155 1
extern int history_search PARAMS((const char *, int));
d160 1
a160 1
extern int history_search_prefix PARAMS((const char *, int));
d167 1
a167 1
extern int history_search_pos PARAMS((const char *, int, int));
d174 1
a174 1
extern int read_history PARAMS((const char *));
d181 1
a181 1
extern int read_history_range PARAMS((const char *, int, int));
d186 1
a186 1
extern int write_history PARAMS((const char *));
d190 1
a190 1
extern int append_history PARAMS((int, const char *));
d193 1
a193 1
extern int history_truncate_file PARAMS((const char *, int));
d209 1
a209 1
extern int history_expand PARAMS((char *, char **));
d214 1
a214 1
extern char *history_arg_extract PARAMS((int, int, const char *));
d222 1
a222 1
extern char *get_history_event PARAMS((const char *, int *, int));
d226 1
a226 1
extern char **history_tokenize PARAMS((const char *));
d231 1
a231 1
extern int history_max_entries;
a233 1
extern char *history_word_delimiters;
a238 3
/* Backwards compatibility */
extern int max_input_history;

d242 1
a242 1
extern rl_linebuf_func_t *history_inhibit_expansion_function;
@


1.3.22.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@a30 1
#  include "rltypedefs.h"
d33 8
a40 1
#  include <readline/rltypedefs.h>
d71 1
a71 1
extern void using_history PARAMS((void));
d74 1
a74 1
extern HISTORY_STATE *history_get_history_state PARAMS((void));
d77 1
a77 1
extern void history_set_history_state PARAMS((HISTORY_STATE *));
d83 1
a83 1
extern void add_history PARAMS((const char *));
d88 1
a88 1
extern HIST_ENTRY *remove_history PARAMS((int));
d93 1
a93 1
extern HIST_ENTRY *replace_history_entry PARAMS((int, const char *, histdata_t));
d96 1
a96 1
extern void clear_history PARAMS((void));
d99 1
a99 1
extern void stifle_history PARAMS((int));
d104 1
a104 1
extern int unstifle_history PARAMS((void));
d107 1
a107 1
extern int history_is_stifled PARAMS((void));
d114 1
a114 1
extern HIST_ENTRY **history_list PARAMS((void));
d118 1
a118 1
extern int where_history PARAMS((void));
d122 1
a122 1
extern HIST_ENTRY *current_history PARAMS((void));
d126 1
a126 1
extern HIST_ENTRY *history_get PARAMS((int));
d130 1
a130 1
extern int history_total_bytes PARAMS((void));
d135 1
a135 1
extern int history_set_pos PARAMS((int));
d140 1
a140 1
extern HIST_ENTRY *previous_history PARAMS((void));
d145 1
a145 1
extern HIST_ENTRY *next_history PARAMS((void));
d155 1
a155 1
extern int history_search PARAMS((const char *, int));
d160 1
a160 1
extern int history_search_prefix PARAMS((const char *, int));
d167 1
a167 1
extern int history_search_pos PARAMS((const char *, int, int));
d174 1
a174 1
extern int read_history PARAMS((const char *));
d181 1
a181 1
extern int read_history_range PARAMS((const char *, int, int));
d186 1
a186 1
extern int write_history PARAMS((const char *));
d190 1
a190 1
extern int append_history PARAMS((int, const char *));
d193 1
a193 1
extern int history_truncate_file PARAMS((const char *, int));
d209 1
a209 1
extern int history_expand PARAMS((char *, char **));
d214 1
a214 1
extern char *history_arg_extract PARAMS((int, int, const char *));
d222 1
a222 1
extern char *get_history_event PARAMS((const char *, int *, int));
d226 1
a226 1
extern char **history_tokenize PARAMS((const char *));
d231 1
a231 1
extern int history_max_entries;
a233 1
extern char *history_word_delimiters;
a238 3
/* Backwards compatibility */
extern int max_input_history;

d242 1
a242 1
extern rl_linebuf_func_t *history_inhibit_expansion_function;
@


1.3.16.1
log
@2002-08-24  Elena Zannoni  <ezannoni@@redhat.com>

        Import of readline 4.3:

        * compat.c, mbutil.c, misc.c, rlmbutil.h, rltypedefs.h,
        text.c, doc/history.0, doc/history.3, support/wcwidth.c,
        examples/readlinebuf.h, examples/rlcat.c: New files.

        * CHANGELOG, CHANGES, INSTALL,  MANIFEST, Makefile.in, README,
        aclocal.m4, ansi_stdlib.h, bind.c, callback.c, chardefs.h,
        complete.c, config.h.in, configure, configure.in, display.c,
        emacs_keymap.c, funmap.c, histexpand.c, histfile.c, histlib.h,
        history.c, history.h, histsearch.c, input.c, isearch.c,
        keymaps.c, keymaps.h, kill.c, macro.c, nls.c, parens.c,
        posixdir.h, readline.c, readline.h, rlconf.h, rldefs.h,
        rlprivate.h, rlshell.h, rlstdc.h, rltty.c, savestring.c,
        search.c, shell.c, signals.c, terminal.c, tilde.c, tilde.h,
        undo.c, util.c, vi_keymap.c, vi_mode.c, xmalloc.c, xmalloc.h,
        doc/Makefile.in, doc/hist.texinfo, doc/hstech.texinfo,
        doc/hsuser.texinfo, doc/manvers.texinfo, doc/readline.3,
        doc/rlman.texinfo, doc/rltech.texinfo, doc/rluser.texinfo
        doc/rluserman.texinfo, doc/texi2dvi, doc/texi2html,
        shlib/Makefile.in, support/install.sh, support/mkdirs,
        support/mkdist, support/shlib-install, support/shobj-conf,
        examples/Inputrc, examples/Makefile.in, examples/fileman.c,
        examples/histexamp.c, examples/manexamp.c, examples/rl.c,
        examples/rlfe.c, examples/rltest.c, examples/rlversion.c:
        Modified files.
@
text
@a30 1
#  include "rltypedefs.h"
d33 8
a40 1
#  include <readline/rltypedefs.h>
d71 1
a71 1
extern void using_history PARAMS((void));
d74 1
a74 1
extern HISTORY_STATE *history_get_history_state PARAMS((void));
d77 1
a77 1
extern void history_set_history_state PARAMS((HISTORY_STATE *));
d83 1
a83 1
extern void add_history PARAMS((const char *));
d88 1
a88 1
extern HIST_ENTRY *remove_history PARAMS((int));
d93 1
a93 1
extern HIST_ENTRY *replace_history_entry PARAMS((int, const char *, histdata_t));
d96 1
a96 1
extern void clear_history PARAMS((void));
d99 1
a99 1
extern void stifle_history PARAMS((int));
d104 1
a104 1
extern int unstifle_history PARAMS((void));
d107 1
a107 1
extern int history_is_stifled PARAMS((void));
d114 1
a114 1
extern HIST_ENTRY **history_list PARAMS((void));
d118 1
a118 1
extern int where_history PARAMS((void));
d122 1
a122 1
extern HIST_ENTRY *current_history PARAMS((void));
d126 1
a126 1
extern HIST_ENTRY *history_get PARAMS((int));
d130 1
a130 1
extern int history_total_bytes PARAMS((void));
d135 1
a135 1
extern int history_set_pos PARAMS((int));
d140 1
a140 1
extern HIST_ENTRY *previous_history PARAMS((void));
d145 1
a145 1
extern HIST_ENTRY *next_history PARAMS((void));
d155 1
a155 1
extern int history_search PARAMS((const char *, int));
d160 1
a160 1
extern int history_search_prefix PARAMS((const char *, int));
d167 1
a167 1
extern int history_search_pos PARAMS((const char *, int, int));
d174 1
a174 1
extern int read_history PARAMS((const char *));
d181 1
a181 1
extern int read_history_range PARAMS((const char *, int, int));
d186 1
a186 1
extern int write_history PARAMS((const char *));
d190 1
a190 1
extern int append_history PARAMS((int, const char *));
d193 1
a193 1
extern int history_truncate_file PARAMS((const char *, int));
d209 1
a209 1
extern int history_expand PARAMS((char *, char **));
d214 1
a214 1
extern char *history_arg_extract PARAMS((int, int, const char *));
d222 1
a222 1
extern char *get_history_event PARAMS((const char *, int *, int));
d226 1
a226 1
extern char **history_tokenize PARAMS((const char *));
d231 1
a231 1
extern int history_max_entries;
a233 1
extern char *history_word_delimiters;
a238 3
/* Backwards compatibility */
extern int max_input_history;

d242 1
a242 1
extern rl_linebuf_func_t *history_inhibit_expansion_function;
@


1.2
log
@Dummy commit before importof 4.1 version
@
text
@d9 1
a9 1
   the Free Software Foundation; either version 1, or (at your option)
d20 1
a20 1
   675 Mass Ave, Cambridge, MA 02139, USA. */
d122 1
a122 1
HIST_ENTRY *current_history __P((void));
d135 1
a135 1
int history_set_pos __P((int));
d190 1
a190 1
int append_history __P((int, char *));
@


1.1
log
@Initial revision
@
text
@d25 10
d43 6
d52 1
a52 1
  char *data;
d71 1
a71 1
extern void using_history ();
d74 1
a74 1
extern HISTORY_STATE *history_get_history_state ();
d77 1
a77 1
extern void history_set_history_state ();
d83 1
a83 1
extern void add_history ();
d88 1
a88 1
extern HIST_ENTRY *remove_history ();
d93 1
a93 1
extern HIST_ENTRY *replace_history_entry ();
d96 1
a96 1
extern void clear_history ();
d99 1
a99 1
extern void stifle_history ();
d104 1
a104 1
extern int unstifle_history ();
d107 1
a107 1
extern int history_is_stifled ();
d114 1
a114 1
extern HIST_ENTRY **history_list ();
d118 1
a118 1
extern int where_history ();
d122 1
a122 1
HIST_ENTRY *current_history ();
d126 1
a126 1
extern HIST_ENTRY *history_get ();
d130 1
a130 1
extern int history_total_bytes ();
d135 1
a135 1
int history_set_pos ();
d140 1
a140 1
extern HIST_ENTRY *previous_history ();
d145 1
a145 1
extern HIST_ENTRY *next_history ();
d155 1
a155 1
extern int history_search ();
d158 3
a160 2
   The search is anchored: matching lines must begin with string. */
extern int history_search_prefix ();
d167 1
a167 1
extern int history_search_pos ();
d174 1
a174 1
extern int read_history ();
d181 1
a181 1
extern int read_history_range ();
d186 1
a186 1
extern int write_history ();
d190 1
a190 1
int append_history ();
d193 1
a193 1
extern int history_truncate_file ();
d209 1
a209 1
extern int history_expand ();
d214 1
a214 1
extern char *history_arg_extract ();
d217 6
a222 2
   offset into STRING. */
extern char *get_history_event ();
d226 1
a226 1
extern char **history_tokenize ();
d243 4
@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@import gdb-1999-08-02 snapshot
@
text
@a24 10
#ifdef __cplusplus
extern "C" {
#endif

#if defined READLINE_LIBRARY
#  include "rlstdc.h"
#else
#  include <readline/rlstdc.h>
#endif

a32 6
#ifdef __STDC__
typedef void *histdata_t;
#else
typedef char *histdata_t;
#endif

d36 1
a36 1
  histdata_t data;
d55 1
a55 1
extern void using_history __P((void));
d58 1
a58 1
extern HISTORY_STATE *history_get_history_state __P((void));
d61 1
a61 1
extern void history_set_history_state __P((HISTORY_STATE *));
d67 1
a67 1
extern void add_history __P((char *));
d72 1
a72 1
extern HIST_ENTRY *remove_history __P((int));
d77 1
a77 1
extern HIST_ENTRY *replace_history_entry __P((int, char *, histdata_t));
d80 1
a80 1
extern void clear_history __P((void));
d83 1
a83 1
extern void stifle_history __P((int));
d88 1
a88 1
extern int unstifle_history __P((void));
d91 1
a91 1
extern int history_is_stifled __P((void));
d98 1
a98 1
extern HIST_ENTRY **history_list __P((void));
d102 1
a102 1
extern int where_history __P((void));
d106 1
a106 1
HIST_ENTRY *current_history __P((void));
d110 1
a110 1
extern HIST_ENTRY *history_get __P((int));
d114 1
a114 1
extern int history_total_bytes __P((void));
d119 1
a119 1
int history_set_pos __P((int));
d124 1
a124 1
extern HIST_ENTRY *previous_history __P((void));
d129 1
a129 1
extern HIST_ENTRY *next_history __P((void));
d139 1
a139 1
extern int history_search __P((char *, int));
d142 2
a143 3
   The search is anchored: matching lines must begin with string.
   DIRECTION is as in history_search(). */
extern int history_search_prefix __P((char *, int));
d150 1
a150 1
extern int history_search_pos __P((char *, int, int));
d157 1
a157 1
extern int read_history __P((char *));
d164 1
a164 1
extern int read_history_range __P((char *, int, int));
d169 1
a169 1
extern int write_history __P((char *));
d173 1
a173 1
int append_history __P((int, char *));
d176 1
a176 1
extern int history_truncate_file __P((char *, int));
d192 1
a192 1
extern int history_expand __P((char *, char **));
d197 1
a197 1
extern char *history_arg_extract __P((int, int, char *));
d200 2
a201 6
   offset into STRING.  Pass STRING with *INDEX equal to the
   history_expansion_char that begins this specification.
   DELIMITING_QUOTE is a character that is allowed to end the string
   specification for what to search for in addition to the normal
   characters `:', ` ', `\t', `\n', and sometimes `?'. */
extern char *get_history_event __P((char *, int *, int));
d205 1
a205 1
extern char **history_tokenize __P((char *));
a221 4

#ifdef __cplusplus
}
#endif
@


1.1.1.3
log
@Import of readline 4.1
@
text
@d9 1
a9 1
   the Free Software Foundation; either version 2, or (at your option)
d20 1
a20 1
   59 Temple Place, Suite 330, Boston, MA 02111 USA. */
d122 1
a122 1
extern HIST_ENTRY *current_history __P((void));
d135 1
a135 1
extern int history_set_pos __P((int));
d190 1
a190 1
extern int append_history __P((int, char *));
@


1.1.1.4
log
@import of readline-4.3
@
text
@a30 1
#  include "rltypedefs.h"
d33 8
a40 1
#  include <readline/rltypedefs.h>
d71 1
a71 1
extern void using_history PARAMS((void));
d74 1
a74 1
extern HISTORY_STATE *history_get_history_state PARAMS((void));
d77 1
a77 1
extern void history_set_history_state PARAMS((HISTORY_STATE *));
d83 1
a83 1
extern void add_history PARAMS((const char *));
d88 1
a88 1
extern HIST_ENTRY *remove_history PARAMS((int));
d93 1
a93 1
extern HIST_ENTRY *replace_history_entry PARAMS((int, const char *, histdata_t));
d96 1
a96 1
extern void clear_history PARAMS((void));
d99 1
a99 1
extern void stifle_history PARAMS((int));
d104 1
a104 1
extern int unstifle_history PARAMS((void));
d107 1
a107 1
extern int history_is_stifled PARAMS((void));
d114 1
a114 1
extern HIST_ENTRY **history_list PARAMS((void));
d118 1
a118 1
extern int where_history PARAMS((void));
d122 1
a122 1
extern HIST_ENTRY *current_history PARAMS((void));
d126 1
a126 1
extern HIST_ENTRY *history_get PARAMS((int));
d130 1
a130 1
extern int history_total_bytes PARAMS((void));
d135 1
a135 1
extern int history_set_pos PARAMS((int));
d140 1
a140 1
extern HIST_ENTRY *previous_history PARAMS((void));
d145 1
a145 1
extern HIST_ENTRY *next_history PARAMS((void));
d155 1
a155 1
extern int history_search PARAMS((const char *, int));
d160 1
a160 1
extern int history_search_prefix PARAMS((const char *, int));
d167 1
a167 1
extern int history_search_pos PARAMS((const char *, int, int));
d174 1
a174 1
extern int read_history PARAMS((const char *));
d181 1
a181 1
extern int read_history_range PARAMS((const char *, int, int));
d186 1
a186 1
extern int write_history PARAMS((const char *));
d190 1
a190 1
extern int append_history PARAMS((int, const char *));
d193 1
a193 1
extern int history_truncate_file PARAMS((const char *, int));
d209 1
a209 1
extern int history_expand PARAMS((char *, char **));
d214 1
a214 1
extern char *history_arg_extract PARAMS((int, int, const char *));
d222 1
a222 1
extern char *get_history_event PARAMS((const char *, int *, int));
d226 1
a226 1
extern char **history_tokenize PARAMS((const char *));
d231 1
a231 1
extern int history_max_entries;
a233 1
extern char *history_word_delimiters;
a238 3
/* Backwards compatibility */
extern int max_input_history;

d242 1
a242 1
extern rl_linebuf_func_t *history_inhibit_expansion_function;
@


1.1.1.5
log
@import of readlilne 5.1
@
text
@d1 2
a2 2
/* history.h -- the names of functions that you can call in history. */
/* Copyright (C) 1989-2003 Free Software Foundation, Inc.
a28 2
#include <time.h>		/* XXX - for history timestamp code */

a45 1
  char *timestamp;		/* char * rather than time_t for read/write */
a48 3
/* Size of the history-library-managed space in history entry HS. */
#define HISTENT_BYTES(hs)	(strlen ((hs)->line) + strlen ((hs)->timestamp))

a78 4
/* Change the timestamp associated with the most recent history entry to
   STRING. */
extern void add_history_time PARAMS((const char *));

a83 4
/* Free the history entry H and return any application-specific data
   associated with it. */
extern histdata_t free_history_entry PARAMS((HIST_ENTRY *));

a121 4
/* Return the timestamp associated with the HIST_ENTRY * passed as an
   argument */
extern time_t history_get_time PARAMS((HIST_ENTRY *));

a233 2
extern int history_write_timestamps;

@


