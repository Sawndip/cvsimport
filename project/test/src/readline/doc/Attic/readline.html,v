head	1.2;
access;
symbols
	readline_5_1:1.1.1.4
	readline_4_3:1.1.1.3
	readline_4_1:1.1.1.2
	readline_4_0:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2000.07.09.17.19.58;	author ezannoni;	state dead;
branches;
next	1.1;

1.1
date	2000.07.07.19.14.18;	author ezannoni;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.07.07.19.14.18;	author ezannoni;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.07.09.16.21.22;	author ezannoni;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.08.23.22.02.31;	author ezannoni;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.04.20.20.05.47;	author ezannoni;	state Exp;
branches;
next	;


desc
@@


1.2
log
@readline:
2000-07-09  Elena Zannoni  <ezannoni@@kwikemart.cygnus.com>

        * Import of readline 4.1.

        Locally modified files: Makefile.in, configure.in, configure
        (regenerated), config.h.in (regenerated), readline.h, rltty.c,
 	shell.c signals.c.

        Locally added files: acconfig.h, config/*, config.h.bot,
        cross-build/*, doc/inc-hit.texinfo.

        New files: USAGE, rlprivate.h, rlshell.h, xmalloc.h.
examples:
2000-07-09  Elena Zannoni  <ezannoni@@kwikemart.cygnus.com>

        * Import of readline 4.1.

        New files: excallback.c, rlfe.c.
doc:
2000-07-09  Elena Zannoni  <ezannoni@@kwikemart.cygnus.com>

        * Import of readline 4.1.

        Regenerated inc-hist.texinfo as copy of hsuser.texinfo, for
        inclusion in the gdb manual.

        New file: rluserman.texinfo
@
text
@<HTML>
<HEAD>
<!-- This HTML file has been created by texi2html 1.52
     from /usr/homes/chet/src/bash/readline-src/doc/rlman.texinfo on 31 December 1998 -->

<TITLE>GNU Readline Library</TITLE>
</HEAD>
<BODY>
<H1>GNU Readline Library</H1>
<H2>Edition 4.0, for <CODE>Readline Library</CODE> Version 4.0.</H2>
<H2>December 1998</H2>
<ADDRESS>Brian Fox, Free Software Foundation</ADDRESS>
<ADDRESS>Chet Ramey, Case Western Reserve University</ADDRESS>
<P>
<P><HR><P>
<H1>Table of Contents</H1>
<UL>
<LI><A NAME="TOC1" HREF="readline.html#SEC1">Command Line Editing</A>
<UL>
<LI><A NAME="TOC2" HREF="readline.html#SEC2">Introduction to Line Editing</A>
<LI><A NAME="TOC3" HREF="readline.html#SEC3">Readline Interaction</A>
<UL>
<LI><A NAME="TOC4" HREF="readline.html#SEC4">Readline Bare Essentials</A>
<LI><A NAME="TOC5" HREF="readline.html#SEC5">Readline Movement Commands</A>
<LI><A NAME="TOC6" HREF="readline.html#SEC6">Readline Killing Commands</A>
<LI><A NAME="TOC7" HREF="readline.html#SEC7">Readline Arguments</A>
<LI><A NAME="TOC8" HREF="readline.html#SEC8">Searching for Commands in the History</A>
</UL>
<LI><A NAME="TOC9" HREF="readline.html#SEC9">Readline Init File</A>
<UL>
<LI><A NAME="TOC10" HREF="readline.html#SEC10">Readline Init File Syntax</A>
<LI><A NAME="TOC11" HREF="readline.html#SEC11">Conditional Init Constructs</A>
<LI><A NAME="TOC12" HREF="readline.html#SEC12">Sample Init File</A>
</UL>
<LI><A NAME="TOC13" HREF="readline.html#SEC13">Bindable Readline Commands</A>
<UL>
<LI><A NAME="TOC14" HREF="readline.html#SEC14">Commands For Moving</A>
<LI><A NAME="TOC15" HREF="readline.html#SEC15">Commands For Manipulating The History</A>
<LI><A NAME="TOC16" HREF="readline.html#SEC16">Commands For Changing Text</A>
<LI><A NAME="TOC17" HREF="readline.html#SEC17">Killing And Yanking</A>
<LI><A NAME="TOC18" HREF="readline.html#SEC18">Specifying Numeric Arguments</A>
<LI><A NAME="TOC19" HREF="readline.html#SEC19">Letting Readline Type For You</A>
<LI><A NAME="TOC20" HREF="readline.html#SEC20">Keyboard Macros</A>
<LI><A NAME="TOC21" HREF="readline.html#SEC21">Some Miscellaneous Commands</A>
</UL>
<LI><A NAME="TOC22" HREF="readline.html#SEC22">Readline vi Mode</A>
</UL>
<LI><A NAME="TOC23" HREF="readline.html#SEC23">Programming with GNU Readline</A>
<UL>
<LI><A NAME="TOC24" HREF="readline.html#SEC24">Basic Behavior</A>
<LI><A NAME="TOC25" HREF="readline.html#SEC25">Custom Functions</A>
<UL>
<LI><A NAME="TOC26" HREF="readline.html#SEC26">The Function Type</A>
<LI><A NAME="TOC27" HREF="readline.html#SEC27">Writing a New Function</A>
</UL>
<LI><A NAME="TOC28" HREF="readline.html#SEC28">Readline Variables</A>
<LI><A NAME="TOC29" HREF="readline.html#SEC29">Readline Convenience Functions</A>
<UL>
<LI><A NAME="TOC30" HREF="readline.html#SEC30">Naming a Function</A>
<LI><A NAME="TOC31" HREF="readline.html#SEC31">Selecting a Keymap</A>
<LI><A NAME="TOC32" HREF="readline.html#SEC32">Binding Keys</A>
<LI><A NAME="TOC33" HREF="readline.html#SEC33">Associating Function Names and Bindings</A>
<LI><A NAME="TOC34" HREF="readline.html#SEC34">Allowing Undoing</A>
<LI><A NAME="TOC35" HREF="readline.html#SEC35">Redisplay</A>
<LI><A NAME="TOC36" HREF="readline.html#SEC36">Modifying Text</A>
<LI><A NAME="TOC37" HREF="readline.html#SEC37">Utility Functions</A>
<LI><A NAME="TOC38" HREF="readline.html#SEC38">Alternate Interface</A>
<LI><A NAME="TOC39" HREF="readline.html#SEC39">An Example</A>
</UL>
<LI><A NAME="TOC40" HREF="readline.html#SEC40">Readline Signal Handling</A>
<LI><A NAME="TOC41" HREF="readline.html#SEC41">Custom Completers</A>
<UL>
<LI><A NAME="TOC42" HREF="readline.html#SEC42">How Completing Works</A>
<LI><A NAME="TOC43" HREF="readline.html#SEC43">Completion Functions</A>
<LI><A NAME="TOC44" HREF="readline.html#SEC44">Completion Variables</A>
<LI><A NAME="TOC45" HREF="readline.html#SEC45">A Short Completion Example</A>
</UL>
</UL>
<LI><A NAME="TOC46" HREF="readline.html#SEC46">Concept Index</A>
<LI><A NAME="TOC47" HREF="readline.html#SEC47">Function and Variable Index</A>
</UL>
<P><HR><P>

<P>
This document describes the GNU Readline Library, a utility which aids
in the consistency of user interface across discrete programs that need
to provide a command line interface.

</P>
<P>
Published by the Free Software Foundation <BR>
675 Massachusetts Avenue, <BR>
Cambridge, MA 02139 USA

</P>
<P>
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

</P>
<P>
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

</P>
<P>
Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Free Software Foundation.

</P>
<P>
Copyright (C) 1988-1999 Free Software Foundation, Inc.

</P>



<H1><A NAME="SEC1" HREF="readline.html#TOC1">Command Line Editing</A></H1>

<P>
This chapter describes the basic features of the GNU
command line editing interface.

</P>

<UL>
<LI><A HREF="readline.html#SEC2">Introduction and Notation</A>: Notation used in this text.
<LI><A HREF="readline.html#SEC3">Readline Interaction</A>: The minimum set of commands for editing a line.
<LI><A HREF="readline.html#SEC9">Readline Init File</A>: Customizing Readline from a user's view.
<LI><A HREF="readline.html#SEC13">Bindable Readline Commands</A>: A description of most of the Readline commands
				available for binding
<LI><A HREF="readline.html#SEC22">Readline vi Mode</A>: A short description of how to make Readline
				behave like the vi editor.
</UL>



<H2><A NAME="SEC2" HREF="readline.html#TOC2">Introduction to Line Editing</A></H2>

<P>
The following paragraphs describe the notation used to represent
keystrokes.

</P>
<P>
The text <KBD>C-k</KBD> is read as `Control-K' and describes the character
produced when the <KBD>k</KBD> key is pressed while the Control key
is depressed.

</P>
<P>
The text <KBD>M-k</KBD> is read as `Meta-K' and describes the character
produced when the meta key (if you have one) is depressed, and the <KBD>k</KBD>
key is pressed.  If you do not have a meta key, the identical keystroke
can be generated by typing <KBD>ESC</KBD> <I>first</I>, and then typing <KBD>k</KBD>.
Either process is known as <EM>metafying</EM> the <KBD>k</KBD> key.

</P>
<P>
The text <KBD>M-C-k</KBD> is read as `Meta-Control-k' and describes the
character produced by <EM>metafying</EM> <KBD>C-k</KBD>.

</P>
<P>
In addition, several keys have their own names.  Specifically,
<KBD>DEL</KBD>, <KBD>ESC</KBD>, <KBD>LFD</KBD>, <KBD>SPC</KBD>, <KBD>RET</KBD>, and <KBD>TAB</KBD> all
stand for themselves when seen in this text, or in an init file
(see section <A HREF="readline.html#SEC9">Readline Init File</A>).

</P>


<H2><A NAME="SEC3" HREF="readline.html#TOC3">Readline Interaction</A></H2>
<P>
<A NAME="IDX1"></A>

</P>
<P>
Often during an interactive session you type in a long line of text,
only to notice that the first word on the line is misspelled.  The
Readline library gives you a set of commands for manipulating the text
as you type it in, allowing you to just fix your typo, and not forcing
you to retype the majority of the line.  Using these editing commands,
you move the cursor to the place that needs correction, and delete or
insert the text of the corrections.  Then, when you are satisfied with
the line, you simply press <KBD>RETURN</KBD>.  You do not have to be at the
end of the line to press <KBD>RETURN</KBD>; the entire line is accepted
regardless of the location of the cursor within the line.

</P>

<UL>
<LI><A HREF="readline.html#SEC4">Readline Bare Essentials</A>: The least you need to know about Readline.
<LI><A HREF="readline.html#SEC5">Readline Movement Commands</A>: Moving about the input line.
<LI><A HREF="readline.html#SEC6">Readline Killing Commands</A>: How to delete text, and how to get it back!
<LI><A HREF="readline.html#SEC7">Readline Arguments</A>: Giving numeric arguments to commands.
<LI><A HREF="readline.html#SEC8">Searching</A>: Searching through previous lines.
</UL>



<H3><A NAME="SEC4" HREF="readline.html#TOC4">Readline Bare Essentials</A></H3>
<P>
<A NAME="IDX2"></A>
<A NAME="IDX3"></A>
<A NAME="IDX4"></A>

</P>
<P>
In order to enter characters into the line, simply type them.  The typed
character appears where the cursor was, and then the cursor moves one
space to the right.  If you mistype a character, you can use your
erase character to back up and delete the mistyped character.

</P>
<P>
Sometimes you may miss typing a character that you wanted to type, and
not notice your error until you have typed several other characters.  In
that case, you can type <KBD>C-b</KBD> to move the cursor to the left, and then
correct your mistake.  Afterwards, you can move the cursor to the right
with <KBD>C-f</KBD>.

</P>
<P>
When you add text in the middle of a line, you will notice that characters
to the right of the cursor are `pushed over' to make room for the text
that you have inserted.  Likewise, when you delete text behind the cursor,
characters to the right of the cursor are `pulled back' to fill in the
blank space created by the removal of the text.  A list of the basic bare
essentials for editing the text of an input line follows.

</P>
<DL COMPACT>

<DT><KBD>C-b</KBD>
<DD>
Move back one character.
<DT><KBD>C-f</KBD>
<DD>
Move forward one character.
<DT><KBD>DEL</KBD>
<DD>
Delete the character to the left of the cursor.
<DT><KBD>C-d</KBD>
<DD>
Delete the character underneath the cursor.
<DT>Printing characters
<DD>
Insert the character into the line at the cursor.
<DT><KBD>C-_</KBD>
<DD>
Undo the last editing command.  You can undo all the way back to an
empty line.
</DL>



<H3><A NAME="SEC5" HREF="readline.html#TOC5">Readline Movement Commands</A></H3>

<P>
The above table describes the most basic possible keystrokes that you need
in order to do editing of the input line.  For your convenience, many
other commands have been added in addition to <KBD>C-b</KBD>, <KBD>C-f</KBD>,
<KBD>C-d</KBD>, and <KBD>DEL</KBD>.  Here are some commands for moving more rapidly
about the line.

</P>
<DL COMPACT>

<DT><KBD>C-a</KBD>
<DD>
Move to the start of the line.
<DT><KBD>C-e</KBD>
<DD>
Move to the end of the line.
<DT><KBD>M-f</KBD>
<DD>
Move forward a word, where a word is composed of letters and digits.
<DT><KBD>M-b</KBD>
<DD>
Move backward a word.
<DT><KBD>C-l</KBD>
<DD>
Clear the screen, reprinting the current line at the top.
</DL>

<P>
Notice how <KBD>C-f</KBD> moves forward a character, while <KBD>M-f</KBD> moves
forward a word.  It is a loose convention that control keystrokes
operate on characters while meta keystrokes operate on words.

</P>


<H3><A NAME="SEC6" HREF="readline.html#TOC6">Readline Killing Commands</A></H3>

<P>
<A NAME="IDX5"></A>
<A NAME="IDX6"></A>

</P>
<P>
<EM>Killing</EM> text means to delete the text from the line, but to save
it away for later use, usually by <EM>yanking</EM> (re-inserting)
it back into the line.
If the description for a command says that it `kills' text, then you can
be sure that you can get the text back in a different (or the same)
place later.

</P>
<P>
When you use a kill command, the text is saved in a <EM>kill-ring</EM>.
Any number of consecutive kills save all of the killed text together, so
that when you yank it back, you get it all.  The kill
ring is not line specific; the text that you killed on a previously
typed line is available to be yanked back later, when you are typing
another line.
<A NAME="IDX7"></A>

</P>
<P>
Here is the list of commands for killing text.

</P>
<DL COMPACT>

<DT><KBD>C-k</KBD>
<DD>
Kill the text from the current cursor position to the end of the line.

<DT><KBD>M-d</KBD>
<DD>
Kill from the cursor to the end of the current word, or if between
words, to the end of the next word.

<DT><KBD>M-DEL</KBD>
<DD>
Kill from the cursor the start of the previous word, or if between
words, to the start of the previous word.

<DT><KBD>C-w</KBD>
<DD>
Kill from the cursor to the previous whitespace.  This is different than
<KBD>M-DEL</KBD> because the word boundaries differ.

</DL>

<P>
Here is how to <EM>yank</EM> the text back into the line.  Yanking
means to copy the most-recently-killed text from the kill buffer.

</P>
<DL COMPACT>

<DT><KBD>C-y</KBD>
<DD>
Yank the most recently killed text back into the buffer at the cursor.

<DT><KBD>M-y</KBD>
<DD>
Rotate the kill-ring, and yank the new top.  You can only do this if
the prior command is <KBD>C-y</KBD> or <KBD>M-y</KBD>.
</DL>



<H3><A NAME="SEC7" HREF="readline.html#TOC7">Readline Arguments</A></H3>

<P>
You can pass numeric arguments to Readline commands.  Sometimes the
argument acts as a repeat count, other times it is the <I>sign</I> of the
argument that is significant.  If you pass a negative argument to a
command which normally acts in a forward direction, that command will
act in a backward direction.  For example, to kill text back to the
start of the line, you might type <SAMP>`M-- C-k'</SAMP>.

</P>
<P>
The general way to pass numeric arguments to a command is to type meta
digits before the command.  If the first `digit' typed is a minus
sign (<KBD>-</KBD>), then the sign of the argument will be negative.  Once
you have typed one meta digit to get the argument started, you can type
the remainder of the digits, and then the command.  For example, to give
the <KBD>C-d</KBD> command an argument of 10, you could type <SAMP>`M-1 0 C-d'</SAMP>.

</P>


<H3><A NAME="SEC8" HREF="readline.html#TOC8">Searching for Commands in the History</A></H3>

<P>
Readline provides commands for searching through the command history
for lines containing a specified string.
There are two search modes:  <VAR>incremental</VAR> and <VAR>non-incremental</VAR>.

</P>
<P>
Incremental searches begin before the user has finished typing the
search string.
As each character of the search string is typed, Readline displays
the next entry from the history matching the string typed so far.
An incremental search requires only as many characters as needed to
find the desired history entry.
The characters present in the value of the <VAR>isearch-terminators</VAR> variable
are used to terminate an incremental search.
If that variable has not been assigned a value, the <KBD>ESC</KBD> and
<KBD>C-J</KBD> characters will terminate an incremental search.
<KBD>C-g</KBD> will abort an incremental search and restore the original line.
When the search is terminated, the history entry containing the
search string becomes the current line.
To find other matching entries in the history list, type <KBD>C-s</KBD> or
<KBD>C-r</KBD> as appropriate.
This will search backward or forward in the history for the next
entry matching the search string typed so far.
Any other key sequence bound to a Readline command will terminate
the search and execute that command.
For instance, a <KBD>RET</KBD> will terminate the search and accept
the line, thereby executing the command from the history list.

</P>
<P>
Non-incremental searches read the entire search string before starting
to search for matching history lines.  The search string may be
typed by the user or be part of the contents of the current line.

</P>


<H2><A NAME="SEC9" HREF="readline.html#TOC9">Readline Init File</A></H2>
<P>
<A NAME="IDX8"></A>

</P>
<P>
Although the Readline library comes with a set of <CODE>emacs</CODE>-like
keybindings installed by default, it is possible to use a different set
of keybindings.
Any user can customize programs that use Readline by putting
commands in an <EM>inputrc</EM> file in his home directory.
The name of this
file is taken from the value of the environment variable <CODE>INPUTRC</CODE>.  If
that variable is unset, the default is <TT>`~/.inputrc'</TT>.

</P>
<P>
When a program which uses the Readline library starts up, the
init file is read, and the key bindings are set.

</P>
<P>
In addition, the <CODE>C-x C-r</CODE> command re-reads this init file, thus
incorporating any changes that you might have made to it.

</P>

<UL>
<LI><A HREF="readline.html#SEC10">Readline Init File Syntax</A>: Syntax for the commands in the inputrc file.

<LI><A HREF="readline.html#SEC11">Conditional Init Constructs</A>: Conditional key bindings in the inputrc file.

<LI><A HREF="readline.html#SEC12">Sample Init File</A>: An example inputrc file.
</UL>



<H3><A NAME="SEC10" HREF="readline.html#TOC10">Readline Init File Syntax</A></H3>

<P>
There are only a few basic constructs allowed in the
Readline init file.  Blank lines are ignored.
Lines beginning with a <SAMP>`#'</SAMP> are comments.
Lines beginning with a <SAMP>`$'</SAMP> indicate conditional
constructs (see section <A HREF="readline.html#SEC11">Conditional Init Constructs</A>).  Other lines
denote variable settings and key bindings.

</P>
<DL COMPACT>

<DT>Variable Settings
<DD>
You can modify the run-time behavior of Readline by
altering the values of variables in Readline
using the <CODE>set</CODE> command within the init file.  Here is how to
change from the default Emacs-like key binding to use
<CODE>vi</CODE> line editing commands:


<PRE>
set editing-mode vi
</PRE>

A great deal of run-time behavior is changeable with the following
variables.

<DL COMPACT>

<DT><CODE>bell-style</CODE>
<DD>
<A NAME="IDX9"></A>
Controls what happens when Readline wants to ring the terminal bell.
If set to <SAMP>`none'</SAMP>, Readline never rings the bell.  If set to
<SAMP>`visible'</SAMP>, Readline uses a visible bell if one is available.
If set to <SAMP>`audible'</SAMP> (the default), Readline attempts to ring
the terminal's bell.

<DT><CODE>comment-begin</CODE>
<DD>
<A NAME="IDX10"></A>
The string to insert at the beginning of the line when the
<CODE>insert-comment</CODE> command is executed.  The default value
is <CODE>"#"</CODE>.

<DT><CODE>completion-ignore-case</CODE>
<DD>
If set to <SAMP>`on'</SAMP>, Readline performs filename matching and completion
in a case-insensitive fashion.
The default value is <SAMP>`off'</SAMP>.

<DT><CODE>completion-query-items</CODE>
<DD>
<A NAME="IDX11"></A>
The number of possible completions that determines when the user is
asked whether he wants to see the list of possibilities.  If the
number of possible completions is greater than this value,
Readline will ask the user whether or not he wishes to view
them; otherwise, they are simply listed.  The default limit is
<CODE>100</CODE>.

<DT><CODE>convert-meta</CODE>
<DD>
<A NAME="IDX12"></A>
If set to <SAMP>`on'</SAMP>, Readline will convert characters with the
eighth bit set to an ASCII key sequence by stripping the eighth
bit and prepending an <KBD>ESC</KBD> character, converting them to a
meta-prefixed key sequence.  The default value is <SAMP>`on'</SAMP>.

<DT><CODE>disable-completion</CODE>
<DD>
<A NAME="IDX13"></A>
If set to <SAMP>`On'</SAMP>, Readline will inhibit word completion.
Completion  characters will be inserted into the line as if they had
been mapped to <CODE>self-insert</CODE>.  The default is <SAMP>`off'</SAMP>.

<DT><CODE>editing-mode</CODE>
<DD>
<A NAME="IDX14"></A>
The <CODE>editing-mode</CODE> variable controls which default set of
key bindings is used.  By default, Readline starts up in Emacs editing
mode, where the keystrokes are most similar to Emacs.  This variable can be
set to either <SAMP>`emacs'</SAMP> or <SAMP>`vi'</SAMP>.

<DT><CODE>enable-keypad</CODE>
<DD>
<A NAME="IDX15"></A>
When set to <SAMP>`on'</SAMP>, Readline will try to enable the application
keypad when it is called.  Some systems need this to enable the
arrow keys.  The default is <SAMP>`off'</SAMP>.

<DT><CODE>expand-tilde</CODE>
<DD>
<A NAME="IDX16"></A>
If set to <SAMP>`on'</SAMP>, tilde expansion is performed when Readline
attempts word completion.  The default is <SAMP>`off'</SAMP>.

<DT><CODE>horizontal-scroll-mode</CODE>
<DD>
<A NAME="IDX17"></A>
This variable can be set to either <SAMP>`on'</SAMP> or <SAMP>`off'</SAMP>.  Setting it
to <SAMP>`on'</SAMP> means that the text of the lines being edited will scroll
horizontally on a single screen line when they are longer than the width
of the screen, instead of wrapping onto a new screen line.  By default,
this variable is set to <SAMP>`off'</SAMP>.

<DT><CODE>input-meta</CODE>
<DD>
<A NAME="IDX18"></A>
<A NAME="IDX19"></A>
If set to <SAMP>`on'</SAMP>, Readline will enable eight-bit input (it
will not strip the eighth bit from the characters it reads),
regardless of what the terminal claims it can support.  The
default value is <SAMP>`off'</SAMP>.  The name <CODE>meta-flag</CODE> is a
synonym for this variable.

<DT><CODE>isearch-terminators</CODE>
<DD>
<A NAME="IDX20"></A>
The string of characters that should terminate an incremental search without
subsequently executing the character as a command (see section <A HREF="readline.html#SEC8">Searching for Commands in the History</A>).
If this variable has not been given a value, the characters <KBD>ESC</KBD> and
<KBD>C-J</KBD> will terminate an incremental search.

<DT><CODE>keymap</CODE>
<DD>
<A NAME="IDX21"></A>
Sets Readline's idea of the current keymap for key binding commands.
Acceptable <CODE>keymap</CODE> names are
<CODE>emacs</CODE>,
<CODE>emacs-standard</CODE>,
<CODE>emacs-meta</CODE>,
<CODE>emacs-ctlx</CODE>,
<CODE>vi</CODE>,
<CODE>vi-command</CODE>, and
<CODE>vi-insert</CODE>.
<CODE>vi</CODE> is equivalent to <CODE>vi-command</CODE>; <CODE>emacs</CODE> is
equivalent to <CODE>emacs-standard</CODE>.  The default value is <CODE>emacs</CODE>.
The value of the <CODE>editing-mode</CODE> variable also affects the
default keymap.

<DT><CODE>mark-directories</CODE>
<DD>
If set to <SAMP>`on'</SAMP>, completed directory names have a slash
appended.  The default is <SAMP>`on'</SAMP>.

<DT><CODE>mark-modified-lines</CODE>
<DD>
<A NAME="IDX22"></A>
This variable, when set to <SAMP>`on'</SAMP>, causes Readline to display an
asterisk (<SAMP>`*'</SAMP>) at the start of history lines which have been modified.
This variable is <SAMP>`off'</SAMP> by default.

<DT><CODE>output-meta</CODE>
<DD>
<A NAME="IDX23"></A>
If set to <SAMP>`on'</SAMP>, Readline will display characters with the
eighth bit set directly rather than as a meta-prefixed escape
sequence.  The default is <SAMP>`off'</SAMP>.

<DT><CODE>print-completions-horizontally</CODE>
<DD>
If set to <SAMP>`on'</SAMP>, Readline will display completions with matches
sorted horizontally in alphabetical order, rather than down the screen.
The default is <SAMP>`off'</SAMP>.

<DT><CODE>show-all-if-ambiguous</CODE>
<DD>
<A NAME="IDX24"></A>
This alters the default behavior of the completion functions.  If
set to <SAMP>`on'</SAMP>, 
words which have more than one possible completion cause the
matches to be listed immediately instead of ringing the bell.
The default value is <SAMP>`off'</SAMP>.

<DT><CODE>visible-stats</CODE>
<DD>
<A NAME="IDX25"></A>
If set to <SAMP>`on'</SAMP>, a character denoting a file's type
is appended to the filename when listing possible
completions.  The default is <SAMP>`off'</SAMP>.

</DL>

<DT>Key Bindings
<DD>
The syntax for controlling key bindings in the init file is
simple.  First you have to know the name of the command that you
want to change.  The following sections contain tables of the command
name, the default keybinding, if any, and a short description of what
the command does.

Once you know the name of the command, simply place the name of the key
you wish to bind the command to, a colon, and then the name of the
command on a line in the init file.  The name of the key
can be expressed in different ways, depending on which is most
comfortable for you.

<DL COMPACT>

<DT><VAR>keyname</VAR>: <VAR>function-name</VAR> or <VAR>macro</VAR>
<DD>
<VAR>keyname</VAR> is the name of a key spelled out in English.  For example:

<PRE>
Control-u: universal-argument
Meta-Rubout: backward-kill-word
Control-o: "&#62; output"
</PRE>

In the above example, <KBD>C-u</KBD> is bound to the function
<CODE>universal-argument</CODE>, and <KBD>C-o</KBD> is bound to run the macro
expressed on the right hand side (that is, to insert the text
<SAMP>`&#62; output'</SAMP> into the line).

<DT>"<VAR>keyseq</VAR>": <VAR>function-name</VAR> or <VAR>macro</VAR>
<DD>
<VAR>keyseq</VAR> differs from <VAR>keyname</VAR> above in that strings
denoting an entire key sequence can be specified, by placing
the key sequence in double quotes.  Some GNU Emacs style key
escapes can be used, as in the following example, but the
special character names are not recognized.


<PRE>
"\C-u": universal-argument
"\C-x\C-r": re-read-init-file
"\e[11~": "Function Key 1"
</PRE>

In the above example, <KBD>C-u</KBD> is bound to the function
<CODE>universal-argument</CODE> (just as it was in the first example),
<SAMP>`<KBD>C-x</KBD> <KBD>C-r</KBD>'</SAMP> is bound to the function <CODE>re-read-init-file</CODE>,
and <SAMP>`<KBD>ESC</KBD> <KBD>[</KBD> <KBD>1</KBD> <KBD>1</KBD> <KBD>~</KBD>'</SAMP> is bound to insert
the text <SAMP>`Function Key 1'</SAMP>.

</DL>

The following GNU Emacs style escape sequences are available when
specifying key sequences:

<DL COMPACT>

<DT><CODE><KBD>\C-</KBD></CODE>
<DD>
control prefix
<DT><CODE><KBD>\M-</KBD></CODE>
<DD>
meta prefix
<DT><CODE><KBD>\e</KBD></CODE>
<DD>
an escape character
<DT><CODE><KBD>\\</KBD></CODE>
<DD>
backslash
<DT><CODE><KBD>\"</KBD></CODE>
<DD>
<KBD>"</KBD>
<DT><CODE><KBD>\'</KBD></CODE>
<DD>
<KBD>'</KBD>
</DL>

In addition to the GNU Emacs style escape sequences, a second
set of backslash escapes is available:

<DL COMPACT>

<DT><CODE>\a</CODE>
<DD>
alert (bell)
<DT><CODE>\b</CODE>
<DD>
backspace
<DT><CODE>\d</CODE>
<DD>
delete
<DT><CODE>\f</CODE>
<DD>
form feed
<DT><CODE>\n</CODE>
<DD>
newline
<DT><CODE>\r</CODE>
<DD>
carriage return
<DT><CODE>\t</CODE>
<DD>
horizontal tab
<DT><CODE>\v</CODE>
<DD>
vertical tab
<DT><CODE>\<VAR>nnn</VAR></CODE>
<DD>
the character whose ASCII code is the octal value <VAR>nnn</VAR>
(one to three digits)
<DT><CODE>\x<VAR>nnn</VAR></CODE>
<DD>
the character whose ASCII code is the hexadecimal value <VAR>nnn</VAR>
(one to three digits)
</DL>

When entering the text of a macro, single or double quotes must
be used to indicate a macro definition.
Unquoted text is assumed to be a function name.
In the macro body, the backslash escapes described above are expanded.
Backslash will quote any other character in the macro text,
including <SAMP>`"'</SAMP> and <SAMP>`''</SAMP>.
For example, the following binding will make <SAMP>`C-x \'</SAMP>
insert a single <SAMP>`\'</SAMP> into the line:

<PRE>
"\C-x\\": "\\"
</PRE>

</DL>



<H3><A NAME="SEC11" HREF="readline.html#TOC11">Conditional Init Constructs</A></H3>

<P>
Readline implements a facility similar in spirit to the conditional
compilation features of the C preprocessor which allows key
bindings and variable settings to be performed as the result
of tests.  There are four parser directives used.

</P>
<DL COMPACT>

<DT><CODE>$if</CODE>
<DD>
The <CODE>$if</CODE> construct allows bindings to be made based on the
editing mode, the terminal being used, or the application using
Readline.  The text of the test extends to the end of the line;
no characters are required to isolate it.

<DL COMPACT>

<DT><CODE>mode</CODE>
<DD>
The <CODE>mode=</CODE> form of the <CODE>$if</CODE> directive is used to test
whether Readline is in <CODE>emacs</CODE> or <CODE>vi</CODE> mode.
This may be used in conjunction
with the <SAMP>`set keymap'</SAMP> command, for instance, to set bindings in
the <CODE>emacs-standard</CODE> and <CODE>emacs-ctlx</CODE> keymaps only if
Readline is starting out in <CODE>emacs</CODE> mode.

<DT><CODE>term</CODE>
<DD>
The <CODE>term=</CODE> form may be used to include terminal-specific
key bindings, perhaps to bind the key sequences output by the
terminal's function keys.  The word on the right side of the
<SAMP>`='</SAMP> is tested against both the full name of the terminal and
the portion of the terminal name before the first <SAMP>`-'</SAMP>.  This
allows <CODE>sun</CODE> to match both <CODE>sun</CODE> and <CODE>sun-cmd</CODE>,
for instance.

<DT><CODE>application</CODE>
<DD>
The <VAR>application</VAR> construct is used to include
application-specific settings.  Each program using the Readline
library sets the <VAR>application name</VAR>, and you can test for it. 
This could be used to bind key sequences to functions useful for
a specific program.  For instance, the following command adds a
key sequence that quotes the current or previous word in Bash:

<PRE>
$if Bash
# Quote the current or previous word
"\C-xq": "\eb\"\ef\""
$endif
</PRE>

</DL>

<DT><CODE>$endif</CODE>
<DD>
This command, as seen in the previous example, terminates an
<CODE>$if</CODE> command.

<DT><CODE>$else</CODE>
<DD>
Commands in this branch of the <CODE>$if</CODE> directive are executed if
the test fails.

<DT><CODE>$include</CODE>
<DD>
This directive takes a single filename as an argument and reads commands
and bindings from that file.

<PRE>
$include /etc/inputrc
</PRE>

</DL>



<H3><A NAME="SEC12" HREF="readline.html#TOC12">Sample Init File</A></H3>

<P>
Here is an example of an inputrc file.  This illustrates key
binding, variable assignment, and conditional syntax.

</P>

<PRE>
# This file controls the behaviour of line input editing for
# programs that use the Gnu Readline library.  Existing programs
# include FTP, Bash, and Gdb.
#
# You can re-read the inputrc file with C-x C-r.
# Lines beginning with '#' are comments.
#
# First, include any systemwide bindings and variable assignments from
# /etc/Inputrc
$include /etc/Inputrc

#
# Set various bindings for emacs mode.

set editing-mode emacs 

$if mode=emacs

Meta-Control-h:	backward-kill-word	Text after the function name is ignored

#
# Arrow keys in keypad mode
#
#"\M-OD":        backward-char
#"\M-OC":        forward-char
#"\M-OA":        previous-history
#"\M-OB":        next-history
#
# Arrow keys in ANSI mode
#
"\M-[D":        backward-char
"\M-[C":        forward-char
"\M-[A":        previous-history
"\M-[B":        next-history
#
# Arrow keys in 8 bit keypad mode
#
#"\M-\C-OD":       backward-char
#"\M-\C-OC":       forward-char
#"\M-\C-OA":       previous-history
#"\M-\C-OB":       next-history
#
# Arrow keys in 8 bit ANSI mode
#
#"\M-\C-[D":       backward-char
#"\M-\C-[C":       forward-char
#"\M-\C-[A":       previous-history
#"\M-\C-[B":       next-history

C-q: quoted-insert

$endif

# An old-style binding.  This happens to be the default.
TAB: complete

# Macros that are convenient for shell interaction
$if Bash
# edit the path
"\C-xp": "PATH=${PATH}\e\C-e\C-a\ef\C-f"
# prepare to type a quoted word -- insert open and close double quotes
# and move to just after the open quote
"\C-x\"": "\"\"\C-b"
# insert a backslash (testing backslash escapes in sequences and macros)
"\C-x\\": "\\"
# Quote the current or previous word
"\C-xq": "\eb\"\ef\""
# Add a binding to refresh the line, which is unbound
"\C-xr": redraw-current-line
# Edit variable on current line.
"\M-\C-v": "\C-a\C-k$\C-y\M-\C-e\C-a\C-y="
$endif

# use a visible bell if one is available
set bell-style visible

# don't strip characters to 7 bits when reading
set input-meta on

# allow iso-latin1 characters to be inserted rather than converted to
# prefix-meta sequences
set convert-meta off

# display characters with the eighth bit set directly rather than
# as meta-prefixed characters
set output-meta on

# if there are more than 150 possible completions for a word, ask the
# user if he wants to see all of them
set completion-query-items 150

# For FTP
$if Ftp
"\C-xg": "get \M-?"
"\C-xt": "put \M-?"
"\M-.": yank-last-arg
$endif
</PRE>



<H2><A NAME="SEC13" HREF="readline.html#TOC13">Bindable Readline Commands</A></H2>


<UL>
<LI><A HREF="readline.html#SEC14">Commands For Moving</A>: Moving about the line.
<LI><A HREF="readline.html#SEC15">Commands For History</A>: Getting at previous lines.
<LI><A HREF="readline.html#SEC16">Commands For Text</A>: Commands for changing text.
<LI><A HREF="readline.html#SEC17">Commands For Killing</A>: Commands for killing and yanking.
<LI><A HREF="readline.html#SEC18">Numeric Arguments</A>: Specifying numeric arguments, repeat counts.
<LI><A HREF="readline.html#SEC19">Commands For Completion</A>: Getting Readline to do the typing for you.
<LI><A HREF="readline.html#SEC20">Keyboard Macros</A>: Saving and re-executing typed characters
<LI><A HREF="readline.html#SEC21">Miscellaneous Commands</A>: Other miscellaneous commands.
</UL>

<P>
This section describes Readline commands that may be bound to key
sequences.

</P>


<H3><A NAME="SEC14" HREF="readline.html#TOC14">Commands For Moving</A></H3>
<DL COMPACT>

<DT><CODE>beginning-of-line (C-a)</CODE>
<DD>
<A NAME="IDX26"></A>
Move to the start of the current line.

<DT><CODE>end-of-line (C-e)</CODE>
<DD>
<A NAME="IDX27"></A>
Move to the end of the line.

<DT><CODE>forward-char (C-f)</CODE>
<DD>
<A NAME="IDX28"></A>
Move forward a character.

<DT><CODE>backward-char (C-b)</CODE>
<DD>
<A NAME="IDX29"></A>
Move back a character.

<DT><CODE>forward-word (M-f)</CODE>
<DD>
<A NAME="IDX30"></A>
Move forward to the end of the next word.  Words are composed of
letters and digits.

<DT><CODE>backward-word (M-b)</CODE>
<DD>
<A NAME="IDX31"></A>
Move back to the start of this, or the previous, word.  Words are
composed of letters and digits.

<DT><CODE>clear-screen (C-l)</CODE>
<DD>
<A NAME="IDX32"></A>
Clear the screen and redraw the current line,
leaving the current line at the top of the screen.

<DT><CODE>redraw-current-line ()</CODE>
<DD>
<A NAME="IDX33"></A>
Refresh the current line.  By default, this is unbound.

</DL>



<H3><A NAME="SEC15" HREF="readline.html#TOC15">Commands For Manipulating The History</A></H3>

<DL COMPACT>

<DT><CODE>accept-line (Newline, Return)</CODE>
<DD>
<A NAME="IDX34"></A>
Accept the line regardless of where the cursor is.  If this line is
non-empty, add it to the history list.  If this line was a history
line, then restore the history line to its original state.

<DT><CODE>previous-history (C-p)</CODE>
<DD>
<A NAME="IDX35"></A>
Move `up' through the history list.

<DT><CODE>next-history (C-n)</CODE>
<DD>
<A NAME="IDX36"></A>
Move `down' through the history list.

<DT><CODE>beginning-of-history (M-&#60;)</CODE>
<DD>
<A NAME="IDX37"></A>
Move to the first line in the history.

<DT><CODE>end-of-history (M-&#62;)</CODE>
<DD>
<A NAME="IDX38"></A>
Move to the end of the input history, i.e., the line currently
being entered.

<DT><CODE>reverse-search-history (C-r)</CODE>
<DD>
<A NAME="IDX39"></A>
Search backward starting at the current line and moving `up' through
the history as necessary.  This is an incremental search.

<DT><CODE>forward-search-history (C-s)</CODE>
<DD>
<A NAME="IDX40"></A>
Search forward starting at the current line and moving `down' through
the the history as necessary.  This is an incremental search.

<DT><CODE>non-incremental-reverse-search-history (M-p)</CODE>
<DD>
<A NAME="IDX41"></A>
Search backward starting at the current line and moving `up'
through the history as necessary using a non-incremental search
for a string supplied by the user.

<DT><CODE>non-incremental-forward-search-history (M-n)</CODE>
<DD>
<A NAME="IDX42"></A>
Search forward starting at the current line and moving `down'
through the the history as necessary using a non-incremental search
for a string supplied by the user.

<DT><CODE>history-search-forward ()</CODE>
<DD>
<A NAME="IDX43"></A>
Search forward through the history for the string of characters
between the start of the current line and the current cursor
position (the <VAR>point</VAR>).  This is a non-incremental search.  By
default, this command is unbound.

<DT><CODE>history-search-backward ()</CODE>
<DD>
<A NAME="IDX44"></A>
Search backward through the history for the string of characters
between the start of the current line and the point.  This
is a non-incremental search.  By default, this command is unbound.

<DT><CODE>yank-nth-arg (M-C-y)</CODE>
<DD>
<A NAME="IDX45"></A>
Insert the first argument to the previous command (usually
the second word on the previous line).  With an argument <VAR>n</VAR>,
insert the <VAR>n</VAR>th word from the previous command (the words
in the previous command begin with word 0).  A negative argument
inserts the <VAR>n</VAR>th word from the end of the previous command.

<DT><CODE>yank-last-arg (M-., M-_)</CODE>
<DD>
<A NAME="IDX46"></A>
Insert last argument to the previous command (the last word of the
previous history entry).  With an
argument, behave exactly like <CODE>yank-nth-arg</CODE>.
Successive calls to <CODE>yank-last-arg</CODE> move back through the history
list, inserting the last argument of each line in turn.

</DL>



<H3><A NAME="SEC16" HREF="readline.html#TOC16">Commands For Changing Text</A></H3>

<DL COMPACT>

<DT><CODE>delete-char (C-d)</CODE>
<DD>
<A NAME="IDX47"></A>
Delete the character under the cursor.  If the cursor is at the
beginning of the line, there are no characters in the line, and
the last character typed was not bound to <CODE>delete-char</CODE>, then
return <CODE>EOF</CODE>.

<DT><CODE>backward-delete-char (Rubout)</CODE>
<DD>
<A NAME="IDX48"></A>
Delete the character behind the cursor.  A numeric argument means
to kill the characters instead of deleting them.

<DT><CODE>forward-backward-delete-char ()</CODE>
<DD>
<A NAME="IDX49"></A>
Delete the character under the cursor, unless the cursor is at the
end of the line, in which case the character behind the cursor is
deleted.  By default, this is not bound to a key.

<DT><CODE>quoted-insert (C-q, C-v)</CODE>
<DD>
<A NAME="IDX50"></A>
Add the next character typed to the line verbatim.  This is
how to insert key sequences like <KBD>C-q</KBD>, for example.

<DT><CODE>tab-insert (M-TAB)</CODE>
<DD>
<A NAME="IDX51"></A>
Insert a tab character.

<DT><CODE>self-insert (a, b, A, 1, !, ...)</CODE>
<DD>
<A NAME="IDX52"></A>
Insert yourself.

<DT><CODE>transpose-chars (C-t)</CODE>
<DD>
<A NAME="IDX53"></A>
Drag the character before the cursor forward over
the character at the cursor, moving the
cursor forward as well.  If the insertion point
is at the end of the line, then this
transposes the last two characters of the line.
Negative arguments don't work.

<DT><CODE>transpose-words (M-t)</CODE>
<DD>
<A NAME="IDX54"></A>
Drag the word behind the cursor past the word in front of the cursor
moving the cursor over that word as well.

<DT><CODE>upcase-word (M-u)</CODE>
<DD>
<A NAME="IDX55"></A>
Uppercase the current (or following) word.  With a negative argument,
uppercase the previous word, but do not move the cursor.

<DT><CODE>downcase-word (M-l)</CODE>
<DD>
<A NAME="IDX56"></A>
Lowercase the current (or following) word.  With a negative argument,
lowercase the previous word, but do not move the cursor.

<DT><CODE>capitalize-word (M-c)</CODE>
<DD>
<A NAME="IDX57"></A>
Capitalize the current (or following) word.  With a negative argument,
capitalize the previous word, but do not move the cursor.

</DL>



<H3><A NAME="SEC17" HREF="readline.html#TOC17">Killing And Yanking</A></H3>

<DL COMPACT>

<DT><CODE>kill-line (C-k)</CODE>
<DD>
<A NAME="IDX58"></A>
Kill the text from the current cursor position to the end of the line.

<DT><CODE>backward-kill-line (C-x Rubout)</CODE>
<DD>
<A NAME="IDX59"></A>
Kill backward to the beginning of the line.

<DT><CODE>unix-line-discard (C-u)</CODE>
<DD>
<A NAME="IDX60"></A>
Kill backward from the cursor to the beginning of the current line.
The killed text is saved on the kill-ring.

<DT><CODE>kill-whole-line ()</CODE>
<DD>
<A NAME="IDX61"></A>
Kill all characters on the current line, no matter where the
cursor is.  By default, this is unbound.

<DT><CODE>kill-word (M-d)</CODE>
<DD>
<A NAME="IDX62"></A>
Kill from the cursor to the end of the current word, or if between
words, to the end of the next word.  Word boundaries are the same
as <CODE>forward-word</CODE>.

<DT><CODE>backward-kill-word (M-DEL)</CODE>
<DD>
<A NAME="IDX63"></A>
Kill the word behind the cursor.  Word boundaries are the same
as <CODE>backward-word</CODE>.

<DT><CODE>unix-word-rubout (C-w)</CODE>
<DD>
<A NAME="IDX64"></A>
Kill the word behind the cursor, using white space as a word
boundary.  The killed text is saved on the kill-ring.

<DT><CODE>delete-horizontal-space ()</CODE>
<DD>
<A NAME="IDX65"></A>
Delete all spaces and tabs around point.  By default, this is unbound.

<DT><CODE>kill-region ()</CODE>
<DD>
<A NAME="IDX66"></A>
Kill the text between the point and the <EM>mark</EM> (saved
cursor position).  This text is referred to as the <VAR>region</VAR>.
By default, this command is unbound.

<DT><CODE>copy-region-as-kill ()</CODE>
<DD>
<A NAME="IDX67"></A>
Copy the text in the region to the kill buffer, so it can be yanked
right away.  By default, this command is unbound.

<DT><CODE>copy-backward-word ()</CODE>
<DD>
<A NAME="IDX68"></A>
Copy the word before point to the kill buffer.
The word boundaries are the same as <CODE>backward-word</CODE>.
By default, this command is unbound.

<DT><CODE>copy-forward-word ()</CODE>
<DD>
<A NAME="IDX69"></A>
Copy the word following point to the kill buffer.
The word boundaries are the same as <CODE>forward-word</CODE>.
By default, this command is unbound.

<DT><CODE>yank (C-y)</CODE>
<DD>
<A NAME="IDX70"></A>
Yank the top of the kill ring into the buffer at the current
cursor position.

<DT><CODE>yank-pop (M-y)</CODE>
<DD>
<A NAME="IDX71"></A>
Rotate the kill-ring, and yank the new top.  You can only do this if
the prior command is yank or yank-pop.
</DL>



<H3><A NAME="SEC18" HREF="readline.html#TOC18">Specifying Numeric Arguments</A></H3>
<DL COMPACT>

<DT><CODE>digit-argument (M-0, M-1, ... M--)</CODE>
<DD>
<A NAME="IDX72"></A>
Add this digit to the argument already accumulating, or start a new
argument.  <KBD>M--</KBD> starts a negative argument.

<DT><CODE>universal-argument ()</CODE>
<DD>
<A NAME="IDX73"></A>
This is another way to specify an argument.
If this command is followed by one or more digits, optionally with a
leading minus sign, those digits define the argument.
If the command is followed by digits, executing <CODE>universal-argument</CODE>
again ends the numeric argument, but is otherwise ignored.
As a special case, if this command is immediately followed by a
character that is neither a digit or minus sign, the argument count
for the next command is multiplied by four.
The argument count is initially one, so executing this function the
first time makes the argument count four, a second time makes the
argument count sixteen, and so on.
By default, this is not bound to a key.
</DL>



<H3><A NAME="SEC19" HREF="readline.html#TOC19">Letting Readline Type For You</A></H3>

<DL COMPACT>

<DT><CODE>complete (TAB)</CODE>
<DD>
<A NAME="IDX74"></A>
Attempt to do completion on the text before the cursor.  This is
application-specific.  Generally, if you are typing a filename
argument, you can do filename completion; if you are typing a command,
you can do command completion; if you are typing in a symbol to GDB, you
can do symbol name completion; if you are typing in a variable to Bash,
you can do variable name completion, and so on.

<DT><CODE>possible-completions (M-?)</CODE>
<DD>
<A NAME="IDX75"></A>
List the possible completions of the text before the cursor.

<DT><CODE>insert-completions (M-*)</CODE>
<DD>
<A NAME="IDX76"></A>
Insert all completions of the text before point that would have
been generated by <CODE>possible-completions</CODE>.

<DT><CODE>menu-complete ()</CODE>
<DD>
<A NAME="IDX77"></A>
Similar to <CODE>complete</CODE>, but replaces the word to be completed
with a single match from the list of possible completions.
Repeated execution of <CODE>menu-complete</CODE> steps through the list
of possible completions, inserting each match in turn.
At the end of the list of completions, the bell is rung and the
original text is restored.
An argument of <VAR>n</VAR> moves <VAR>n</VAR> positions forward in the list
of matches; a negative argument may be used to move backward
through the list.
This command is intended to be bound to <CODE>TAB</CODE>, but is unbound
by default.

<DT><CODE>delete-char-or-list ()</CODE>
<DD>
<A NAME="IDX78"></A>
Deletes the character under the cursor if not at the beginning or
end of the line (like <CODE>delete-char</CODE>).
If at the end of the line, behaves identically to
<CODE>possible-completions</CODE>.
This command is unbound by default.

</DL>



<H3><A NAME="SEC20" HREF="readline.html#TOC20">Keyboard Macros</A></H3>
<DL COMPACT>

<DT><CODE>start-kbd-macro (C-x ()</CODE>
<DD>
<A NAME="IDX79"></A>
Begin saving the characters typed into the current keyboard macro.

<DT><CODE>end-kbd-macro (C-x ))</CODE>
<DD>
<A NAME="IDX80"></A>
Stop saving the characters typed into the current keyboard macro
and save the definition.

<DT><CODE>call-last-kbd-macro (C-x e)</CODE>
<DD>
<A NAME="IDX81"></A>
Re-execute the last keyboard macro defined, by making the characters
in the macro appear as if typed at the keyboard.

</DL>



<H3><A NAME="SEC21" HREF="readline.html#TOC21">Some Miscellaneous Commands</A></H3>
<DL COMPACT>

<DT><CODE>re-read-init-file (C-x C-r)</CODE>
<DD>
<A NAME="IDX82"></A>
Read in the contents of the inputrc file, and incorporate
any bindings or variable assignments found there.

<DT><CODE>abort (C-g)</CODE>
<DD>
<A NAME="IDX83"></A>
Abort the current editing command and
ring the terminal's bell (subject to the setting of
<CODE>bell-style</CODE>).

<DT><CODE>do-uppercase-version (M-a, M-b, M-<VAR>x</VAR>, ...)</CODE>
<DD>
<A NAME="IDX84"></A>
If the metafied character <VAR>x</VAR> is lowercase, run the command
that is bound to the corresponding uppercase character.

<DT><CODE>prefix-meta (ESC)</CODE>
<DD>
<A NAME="IDX85"></A>
Make the next character typed be metafied.  This is for keyboards
without a meta key.  Typing <SAMP>`ESC f'</SAMP> is equivalent to typing
<SAMP>`M-f'</SAMP>.

<DT><CODE>undo (C-_, C-x C-u)</CODE>
<DD>
<A NAME="IDX86"></A>
Incremental undo, separately remembered for each line.

<DT><CODE>revert-line (M-r)</CODE>
<DD>
<A NAME="IDX87"></A>
Undo all changes made to this line.  This is like executing the <CODE>undo</CODE>
command enough times to get back to the beginning.

<DT><CODE>tilde-expand (M-~)</CODE>
<DD>
<A NAME="IDX88"></A>
Perform tilde expansion on the current word.

<DT><CODE>set-mark (C-@@)</CODE>
<DD>
<A NAME="IDX89"></A>
Set the mark to the current point.  If a
numeric argument is supplied, the mark is set to that position.

<DT><CODE>exchange-point-and-mark (C-x C-x)</CODE>
<DD>
<A NAME="IDX90"></A>
Swap the point with the mark.  The current cursor position is set to
the saved position, and the old cursor position is saved as the mark.

<DT><CODE>character-search (C-])</CODE>
<DD>
<A NAME="IDX91"></A>
A character is read and point is moved to the next occurrence of that
character.  A negative count searches for previous occurrences.

<DT><CODE>character-search-backward (M-C-])</CODE>
<DD>
<A NAME="IDX92"></A>
A character is read and point is moved to the previous occurrence
of that character.  A negative count searches for subsequent
occurrences.

<DT><CODE>insert-comment (M-#)</CODE>
<DD>
<A NAME="IDX93"></A>
The value of the <CODE>comment-begin</CODE>
variable is inserted at the beginning of the current line,
and the line is accepted as if a newline had been typed.

<DT><CODE>dump-functions ()</CODE>
<DD>
<A NAME="IDX94"></A>
Print all of the functions and their key bindings to the
Readline output stream.  If a numeric argument is supplied,
the output is formatted in such a way that it can be made part
of an <VAR>inputrc</VAR> file.  This command is unbound by default.

<DT><CODE>dump-variables ()</CODE>
<DD>
<A NAME="IDX95"></A>
Print all of the settable variables and their values to the
Readline output stream.  If a numeric argument is supplied,
the output is formatted in such a way that it can be made part
of an <VAR>inputrc</VAR> file.  This command is unbound by default.

<DT><CODE>dump-macros ()</CODE>
<DD>
<A NAME="IDX96"></A>
Print all of the Readline key sequences bound to macros and the
strings they ouput.  If a numeric argument is supplied,
the output is formatted in such a way that it can be made part
of an <VAR>inputrc</VAR> file.  This command is unbound by default.

</DL>



<H2><A NAME="SEC22" HREF="readline.html#TOC22">Readline vi Mode</A></H2>

<P>
While the Readline library does not have a full set of <CODE>vi</CODE>
editing functions, it does contain enough to allow simple editing
of the line.  The Readline <CODE>vi</CODE> mode behaves as specified in
the POSIX 1003.2 standard.

</P>
<P>
In order to switch interactively between <CODE>emacs</CODE> and <CODE>vi</CODE>
editing modes, use the command M-C-j (toggle-editing-mode).
The Readline default is <CODE>emacs</CODE> mode.

</P>
<P>
When you enter a line in <CODE>vi</CODE> mode, you are already placed in
`insertion' mode, as if you had typed an <SAMP>`i'</SAMP>.  Pressing <KBD>ESC</KBD>
switches you into `command' mode, where you can edit the text of the
line with the standard <CODE>vi</CODE> movement keys, move to previous
history lines with <SAMP>`k'</SAMP> and subsequent lines with <SAMP>`j'</SAMP>, and
so forth.

</P>



<H1><A NAME="SEC23" HREF="readline.html#TOC23">Programming with GNU Readline</A></H1>

<P>
This chapter describes the interface between the GNU Readline Library and
other programs.  If you are a programmer, and you wish to include the
features found in GNU Readline
such as completion, line editing, and interactive history manipulation
in your own programs, this section is for you.

</P>

<UL>
<LI><A HREF="readline.html#SEC24">Basic Behavior</A>: Using the default behavior of Readline.
<LI><A HREF="readline.html#SEC25">Custom Functions</A>: Adding your own functions to Readline.
<LI><A HREF="readline.html#SEC28">Readline Variables</A>: Variables accessible to custom
					functions.
<LI><A HREF="readline.html#SEC29">Readline Convenience Functions</A>: Functions which Readline supplies to
					aid in writing your own custom
					functions.
<LI><A HREF="readline.html#SEC40">Readline Signal Handling</A>: How Readline behaves when it receives signals.
<LI><A HREF="readline.html#SEC41">Custom Completers</A>: Supplanting or supplementing Readline's
			completion functions.
</UL>



<H2><A NAME="SEC24" HREF="readline.html#TOC24">Basic Behavior</A></H2>

<P>
Many programs provide a command line interface, such as <CODE>mail</CODE>,
<CODE>ftp</CODE>, and <CODE>sh</CODE>.  For such programs, the default behaviour of
Readline is sufficient.  This section describes how to use Readline in
the simplest way possible, perhaps to replace calls in your code to
<CODE>gets()</CODE> or <CODE>fgets ()</CODE>.

</P>
<P>
<A NAME="IDX97"></A>
<A NAME="IDX98"></A>
The function <CODE>readline ()</CODE> prints a prompt and then reads and returns
a single line of text from the user.  The line <CODE>readline</CODE>
returns is allocated with <CODE>malloc ()</CODE>; you should <CODE>free ()</CODE>
the line when you are done with it.  The declaration for <CODE>readline</CODE>
in ANSI C is

</P>

<PRE>
<CODE>char *readline (char *<VAR>prompt</VAR>);</CODE>
</PRE>

<P>
So, one might say

<PRE>
<CODE>char *line = readline ("Enter a line: ");</CODE>
</PRE>

<P>
in order to read a line of text from the user.
The line returned has the final newline removed, so only the
text remains.

</P>
<P>
If <CODE>readline</CODE> encounters an <CODE>EOF</CODE> while reading the line, and the
line is empty at that point, then <CODE>(char *)NULL</CODE> is returned.
Otherwise, the line is ended just as if a newline had been typed.

</P>
<P>
If you want the user to be able to get at the line later, (with
<KBD>C-p</KBD> for example), you must call <CODE>add_history ()</CODE> to save the
line away in a <EM>history</EM> list of such lines.

</P>

<PRE>
<CODE>add_history (line)</CODE>;
</PRE>

<P>
For full details on the GNU History Library, see the associated manual.

</P>
<P>
It is preferable to avoid saving empty lines on the history list, since
users rarely have a burning need to reuse a blank line.  Here is
a function which usefully replaces the standard <CODE>gets ()</CODE> library
function, and has the advantage of no static buffer to overflow:

</P>

<PRE>
/* A static variable for holding the line. */
static char *line_read = (char *)NULL;

/* Read a string, and return a pointer to it.  Returns NULL on EOF. */
char *
rl_gets ()
{
  /* If the buffer has already been allocated, return the memory
     to the free pool. */
  if (line_read)
    {
      free (line_read);
      line_read = (char *)NULL;
    }

  /* Get a line from the user. */
  line_read = readline ("");

  /* If the line has any text in it, save it on the history. */
  if (line_read &#38;&#38; *line_read)
    add_history (line_read);

  return (line_read);
}
</PRE>

<P>
This function gives the user the default behaviour of <KBD>TAB</KBD>
completion: completion on file names.  If you do not want Readline to
complete on filenames, you can change the binding of the <KBD>TAB</KBD> key
with <CODE>rl_bind_key ()</CODE>.

</P>

<PRE>
<CODE>int rl_bind_key (int <VAR>key</VAR>, int (*<VAR>function</VAR>)());</CODE>
</PRE>

<P>
<CODE>rl_bind_key ()</CODE> takes two arguments: <VAR>key</VAR> is the character that
you want to bind, and <VAR>function</VAR> is the address of the function to
call when <VAR>key</VAR> is pressed.  Binding <KBD>TAB</KBD> to <CODE>rl_insert ()</CODE>
makes <KBD>TAB</KBD> insert itself.
<CODE>rl_bind_key ()</CODE> returns non-zero if <VAR>key</VAR> is not a valid
ASCII character code (between 0 and 255).

</P>
<P>
Thus, to disable the default <KBD>TAB</KBD> behavior, the following suffices:

<PRE>
<CODE>rl_bind_key ('\t', rl_insert);</CODE>
</PRE>

<P>
This code should be executed once at the start of your program; you
might write a function called <CODE>initialize_readline ()</CODE> which
performs this and other desired initializations, such as installing
custom completers (see section <A HREF="readline.html#SEC41">Custom Completers</A>).

</P>


<H2><A NAME="SEC25" HREF="readline.html#TOC25">Custom Functions</A></H2>

<P>
Readline provides many functions for manipulating the text of
the line, but it isn't possible to anticipate the needs of all
programs.  This section describes the various functions and variables
defined within the Readline library which allow a user program to add
customized functionality to Readline.

</P>

<UL>
<LI><A HREF="readline.html#SEC26">The Function Type</A>: C declarations to make code readable.
<LI><A HREF="readline.html#SEC27">Function Writing</A>: Variables and calling conventions.
</UL>



<H3><A NAME="SEC26" HREF="readline.html#TOC26">The Function Type</A></H3>

<P>
For readabilty, we declare a new type of object, called
<EM>Function</EM>.  A <CODE>Function</CODE> is a C function which
returns an <CODE>int</CODE>.  The type declaration for <CODE>Function</CODE> is:

</P>
<P>
<CODE>typedef int Function ();</CODE>

</P>
<P>
The reason for declaring this new type is to make it easier to write
code describing pointers to C functions.  Let us say we had a variable
called <VAR>func</VAR> which was a pointer to a function.  Instead of the
classic C declaration

</P>
<P>
<CODE>int (*)()func;</CODE>

</P>
<P>
we may write

</P>
<P>
<CODE>Function *func;</CODE>

</P>
<P>
Similarly, there are

</P>

<PRE>
typedef void VFunction ();
typedef char *CPFunction (); and
typedef char **CPPFunction ();
</PRE>

<P>
for functions returning no value, <CODE>pointer to char</CODE>, and
<CODE>pointer to pointer to char</CODE>, respectively.

</P>


<H3><A NAME="SEC27" HREF="readline.html#TOC27">Writing a New Function</A></H3>

<P>
In order to write new functions for Readline, you need to know the
calling conventions for keyboard-invoked functions, and the names of the
variables that describe the current state of the line read so far.

</P>
<P>
The calling sequence for a command <CODE>foo</CODE> looks like

</P>

<PRE>
<CODE>foo (int count, int key)</CODE>
</PRE>

<P>
where <VAR>count</VAR> is the numeric argument (or 1 if defaulted) and
<VAR>key</VAR> is the key that invoked this function.

</P>
<P>
It is completely up to the function as to what should be done with the
numeric argument.  Some functions use it as a repeat count, some
as a flag, and others to choose alternate behavior (refreshing the current
line as opposed to refreshing the screen, for example).  Some choose to
ignore it.  In general, if a
function uses the numeric argument as a repeat count, it should be able
to do something useful with both negative and positive arguments.
At the very least, it should be aware that it can be passed a
negative argument.

</P>


<H2><A NAME="SEC28" HREF="readline.html#TOC28">Readline Variables</A></H2>

<P>
These variables are available to function writers.

</P>
<P>
<DL>
<DT><U>Variable:</U> char * <B>rl_line_buffer</B>
<DD><A NAME="IDX99"></A>
This is the line gathered so far.  You are welcome to modify the
contents of the line, but see section <A HREF="readline.html#SEC34">Allowing Undoing</A>.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_point</B>
<DD><A NAME="IDX100"></A>
The offset of the current cursor position in <CODE>rl_line_buffer</CODE>
(the <EM>point</EM>).
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_end</B>
<DD><A NAME="IDX101"></A>
The number of characters present in <CODE>rl_line_buffer</CODE>.  When
<CODE>rl_point</CODE> is at the end of the line, <CODE>rl_point</CODE> and
<CODE>rl_end</CODE> are equal.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_mark</B>
<DD><A NAME="IDX102"></A>
The mark (saved position) in the current line.  If set, the mark
and point define a <EM>region</EM>.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_done</B>
<DD><A NAME="IDX103"></A>
Setting this to a non-zero value causes Readline to return the current
line immediately.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_pending_input</B>
<DD><A NAME="IDX104"></A>
Setting this to a value makes it the next keystroke read.  This is a
way to stuff a single character into the input stream.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_erase_empty_line</B>
<DD><A NAME="IDX105"></A>
Setting this to a non-zero value causes Readline to completely erase
the current line, including any prompt, any time a newline is typed as
the only character on an otherwise-empty line.  The cursor is moved to
the beginning of the newly-blank line.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> char * <B>rl_prompt</B>
<DD><A NAME="IDX106"></A>
The prompt Readline uses.  This is set from the argument to
<CODE>readline ()</CODE>, and should not be assigned to directly.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> char * <B>rl_library_version</B>
<DD><A NAME="IDX107"></A>
The version number of this revision of the library.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> char * <B>rl_terminal_name</B>
<DD><A NAME="IDX108"></A>
The terminal type, used for initialization.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> char * <B>rl_readline_name</B>
<DD><A NAME="IDX109"></A>
This variable is set to a unique name by each application using Readline.
The value allows conditional parsing of the inputrc file
(see section <A HREF="readline.html#SEC11">Conditional Init Constructs</A>).
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> FILE * <B>rl_instream</B>
<DD><A NAME="IDX110"></A>
The stdio stream from which Readline reads input.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> FILE * <B>rl_outstream</B>
<DD><A NAME="IDX111"></A>
The stdio stream to which Readline performs output.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> Function * <B>rl_startup_hook</B>
<DD><A NAME="IDX112"></A>
If non-zero, this is the address of a function to call just
before <CODE>readline</CODE> prints the first prompt.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> Function * <B>rl_pre_input_hook</B>
<DD><A NAME="IDX113"></A>
If non-zero, this is the address of a function to call after
the first prompt has been printed and just before <CODE>readline</CODE>
starts reading input characters.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> Function * <B>rl_event_hook</B>
<DD><A NAME="IDX114"></A>
If non-zero, this is the address of a function to call periodically
when readline is waiting for terminal input.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> Function * <B>rl_getc_function</B>
<DD><A NAME="IDX115"></A>
If non-zero, <CODE>readline</CODE> will call indirectly through this pointer
to get a character from the input stream.  By default, it is set to
<CODE>rl_getc</CODE>, the default <CODE>readline</CODE> character input function
(see section <A HREF="readline.html#SEC37">Utility Functions</A>).
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> VFunction * <B>rl_redisplay_function</B>
<DD><A NAME="IDX116"></A>
If non-zero, <CODE>readline</CODE> will call indirectly through this pointer
to update the display with the current contents of the editing buffer.
By default, it is set to <CODE>rl_redisplay</CODE>, the default <CODE>readline</CODE>
redisplay function (see section <A HREF="readline.html#SEC35">Redisplay</A>).
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> Keymap <B>rl_executing_keymap</B>
<DD><A NAME="IDX117"></A>
This variable is set to the keymap (see section <A HREF="readline.html#SEC31">Selecting a Keymap</A>) in which the
currently executing readline function was found.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> Keymap <B>rl_binding_keymap</B>
<DD><A NAME="IDX118"></A>
This variable is set to the keymap (see section <A HREF="readline.html#SEC31">Selecting a Keymap</A>) in which the
last key binding occurred.
</DL>

</P>


<H2><A NAME="SEC29" HREF="readline.html#TOC29">Readline Convenience Functions</A></H2>


<UL>
<LI><A HREF="readline.html#SEC30">Function Naming</A>: How to give a function you write a name.
<LI><A HREF="readline.html#SEC31">Keymaps</A>: Making keymaps.
<LI><A HREF="readline.html#SEC32">Binding Keys</A>: Changing Keymaps.
<LI><A HREF="readline.html#SEC33">Associating Function Names and Bindings</A>: Translate function names to
						key sequences.
<LI><A HREF="readline.html#SEC34">Allowing Undoing</A>: How to make your functions undoable.
<LI><A HREF="readline.html#SEC35">Redisplay</A>: Functions to control line display.
<LI><A HREF="readline.html#SEC36">Modifying Text</A>: Functions to modify <CODE>rl_line_buffer</CODE>.
<LI><A HREF="readline.html#SEC37">Utility Functions</A>: Generally useful functions and hooks.
<LI><A HREF="readline.html#SEC38">Alternate Interface</A>: Using Readline in a `callback' fashion.
</UL>



<H3><A NAME="SEC30" HREF="readline.html#TOC30">Naming a Function</A></H3>

<P>
The user can dynamically change the bindings of keys while using
Readline.  This is done by representing the function with a descriptive
name.  The user is able to type the descriptive name when referring to
the function.  Thus, in an init file, one might find

</P>

<PRE>
Meta-Rubout:	backward-kill-word
</PRE>

<P>
This binds the keystroke <KBD>Meta-Rubout</KBD> to the function
<EM>descriptively</EM> named <CODE>backward-kill-word</CODE>.  You, as the
programmer, should bind the functions you write to descriptive names as
well.  Readline provides a function for doing that:

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_add_defun</B> <I>(char *name, Function *function, int key)</I>
<DD><A NAME="IDX119"></A>
Add <VAR>name</VAR> to the list of named functions.  Make <VAR>function</VAR> be
the function that gets called.  If <VAR>key</VAR> is not -1, then bind it to
<VAR>function</VAR> using <CODE>rl_bind_key ()</CODE>.
</DL>

</P>
<P>
Using this function alone is sufficient for most applications.  It is
the recommended way to add a few functions to the default functions that
Readline has built in.  If you need to do something other
than adding a function to Readline, you may need to use the
underlying functions described below.

</P>


<H3><A NAME="SEC31" HREF="readline.html#TOC31">Selecting a Keymap</A></H3>

<P>
Key bindings take place on a <EM>keymap</EM>.  The keymap is the
association between the keys that the user types and the functions that
get run.  You can make your own keymaps, copy existing keymaps, and tell
Readline which keymap to use.

</P>
<P>
<DL>
<DT><U>Function:</U> Keymap <B>rl_make_bare_keymap</B> <I>()</I>
<DD><A NAME="IDX120"></A>
Returns a new, empty keymap.  The space for the keymap is allocated with
<CODE>malloc ()</CODE>; you should <CODE>free ()</CODE> it when you are done.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> Keymap <B>rl_copy_keymap</B> <I>(Keymap map)</I>
<DD><A NAME="IDX121"></A>
Return a new keymap which is a copy of <VAR>map</VAR>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> Keymap <B>rl_make_keymap</B> <I>()</I>
<DD><A NAME="IDX122"></A>
Return a new keymap with the printing characters bound to rl_insert,
the lowercase Meta characters bound to run their equivalents, and
the Meta digits bound to produce numeric arguments.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> void <B>rl_discard_keymap</B> <I>(Keymap keymap)</I>
<DD><A NAME="IDX123"></A>
Free the storage associated with <VAR>keymap</VAR>.
</DL>

</P>
<P>
Readline has several internal keymaps.  These functions allow you to
change which keymap is active.

</P>
<P>
<DL>
<DT><U>Function:</U> Keymap <B>rl_get_keymap</B> <I>()</I>
<DD><A NAME="IDX124"></A>
Returns the currently active keymap.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> void <B>rl_set_keymap</B> <I>(Keymap keymap)</I>
<DD><A NAME="IDX125"></A>
Makes <VAR>keymap</VAR> the currently active keymap.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> Keymap <B>rl_get_keymap_by_name</B> <I>(char *name)</I>
<DD><A NAME="IDX126"></A>
Return the keymap matching <VAR>name</VAR>.  <VAR>name</VAR> is one which would
be supplied in a <CODE>set keymap</CODE> inputrc line (see section <A HREF="readline.html#SEC9">Readline Init File</A>).
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> char * <B>rl_get_keymap_name</B> <I>(Keymap keymap)</I>
<DD><A NAME="IDX127"></A>
Return the name matching <VAR>keymap</VAR>.  <VAR>name</VAR> is one which would
be supplied in a <CODE>set keymap</CODE> inputrc line (see section <A HREF="readline.html#SEC9">Readline Init File</A>).
</DL>

</P>


<H3><A NAME="SEC32" HREF="readline.html#TOC32">Binding Keys</A></H3>

<P>
You associate keys with functions through the keymap.  Readline has
several internal keymaps: <CODE>emacs_standard_keymap</CODE>,
<CODE>emacs_meta_keymap</CODE>, <CODE>emacs_ctlx_keymap</CODE>,
<CODE>vi_movement_keymap</CODE>, and <CODE>vi_insertion_keymap</CODE>.
<CODE>emacs_standard_keymap</CODE> is the default, and the examples in
this manual assume that.

</P>
<P>
These functions manage key bindings.

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_bind_key</B> <I>(int key, Function *function)</I>
<DD><A NAME="IDX128"></A>
Binds <VAR>key</VAR> to <VAR>function</VAR> in the currently active keymap.
Returns non-zero in the case of an invalid <VAR>key</VAR>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_bind_key_in_map</B> <I>(int key, Function *function, Keymap map)</I>
<DD><A NAME="IDX129"></A>
Bind <VAR>key</VAR> to <VAR>function</VAR> in <VAR>map</VAR>.  Returns non-zero in the case
of an invalid <VAR>key</VAR>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_unbind_key</B> <I>(int key)</I>
<DD><A NAME="IDX130"></A>
Bind <VAR>key</VAR> to the null function in the currently active keymap.
Returns non-zero in case of error.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_unbind_key_in_map</B> <I>(int key, Keymap map)</I>
<DD><A NAME="IDX131"></A>
Bind <VAR>key</VAR> to the null function in <VAR>map</VAR>.
Returns non-zero in case of error.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_unbind_function_in_map</B> <I>(Function *function, Keymap map)</I>
<DD><A NAME="IDX132"></A>
Unbind all keys that execute <VAR>function</VAR> in <VAR>map</VAR>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_unbind_command_in_map</B> <I>(char *command, Keymap map)</I>
<DD><A NAME="IDX133"></A>
Unbind all keys that are bound to <VAR>command</VAR> in <VAR>map</VAR>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_generic_bind</B> <I>(int type, char *keyseq, char *data, Keymap map)</I>
<DD><A NAME="IDX134"></A>
Bind the key sequence represented by the string <VAR>keyseq</VAR> to the arbitrary
pointer <VAR>data</VAR>.  <VAR>type</VAR> says what kind of data is pointed to by
<VAR>data</VAR>; this can be a function (<CODE>ISFUNC</CODE>), a macro
(<CODE>ISMACR</CODE>), or a keymap (<CODE>ISKMAP</CODE>).  This makes new keymaps as
necessary.  The initial keymap in which to do bindings is <VAR>map</VAR>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_parse_and_bind</B> <I>(char *line)</I>
<DD><A NAME="IDX135"></A>
Parse <VAR>line</VAR> as if it had been read from the <CODE>inputrc</CODE> file and
perform any key bindings and variable assignments found
(see section <A HREF="readline.html#SEC9">Readline Init File</A>).
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_read_init_file</B> <I>(char *filename)</I>
<DD><A NAME="IDX136"></A>
Read keybindings and variable assignments from <VAR>filename</VAR>
(see section <A HREF="readline.html#SEC9">Readline Init File</A>).
</DL>

</P>


<H3><A NAME="SEC33" HREF="readline.html#TOC33">Associating Function Names and Bindings</A></H3>

<P>
These functions allow you to find out what keys invoke named functions
and the functions invoked by a particular key sequence.

</P>
<P>
<DL>
<DT><U>Function:</U> Function * <B>rl_named_function</B> <I>(char *name)</I>
<DD><A NAME="IDX137"></A>
Return the function with name <VAR>name</VAR>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> Function * <B>rl_function_of_keyseq</B> <I>(char *keyseq, Keymap map, int *type)</I>
<DD><A NAME="IDX138"></A>
Return the function invoked by <VAR>keyseq</VAR> in keymap <VAR>map</VAR>.
If <VAR>map</VAR> is NULL, the current keymap is used.  If <VAR>type</VAR> is
not NULL, the type of the object is returned in it (one of <CODE>ISFUNC</CODE>,
<CODE>ISKMAP</CODE>, or <CODE>ISMACR</CODE>).
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> char ** <B>rl_invoking_keyseqs</B> <I>(Function *function)</I>
<DD><A NAME="IDX139"></A>
Return an array of strings representing the key sequences used to
invoke <VAR>function</VAR> in the current keymap.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> char ** <B>rl_invoking_keyseqs_in_map</B> <I>(Function *function, Keymap map)</I>
<DD><A NAME="IDX140"></A>
Return an array of strings representing the key sequences used to
invoke <VAR>function</VAR> in the keymap <VAR>map</VAR>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> void <B>rl_function_dumper</B> <I>(int readable)</I>
<DD><A NAME="IDX141"></A>
Print the readline function names and the key sequences currently
bound to them to <CODE>rl_outstream</CODE>.  If <VAR>readable</VAR> is non-zero,
the list is formatted in such a way that it can be made part of an
<CODE>inputrc</CODE> file and re-read.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> void <B>rl_list_funmap_names</B> <I>()</I>
<DD><A NAME="IDX142"></A>
Print the names of all bindable Readline functions to <CODE>rl_outstream</CODE>.
</DL>

</P>


<H3><A NAME="SEC34" HREF="readline.html#TOC34">Allowing Undoing</A></H3>

<P>
Supporting the undo command is a painless thing, and makes your
functions much more useful.  It is certainly easy to try
something if you know you can undo it.  I could use an undo function for
the stock market.

</P>
<P>
If your function simply inserts text once, or deletes text once, and
uses <CODE>rl_insert_text ()</CODE> or <CODE>rl_delete_text ()</CODE> to do it, then
undoing is already done for you automatically.

</P>
<P>
If you do multiple insertions or multiple deletions, or any combination
of these operations, you should group them together into one operation.
This is done with <CODE>rl_begin_undo_group ()</CODE> and
<CODE>rl_end_undo_group ()</CODE>.

</P>
<P>
The types of events that can be undone are:

</P>

<PRE>
enum undo_code { UNDO_DELETE, UNDO_INSERT, UNDO_BEGIN, UNDO_END }; 
</PRE>

<P>
Notice that <CODE>UNDO_DELETE</CODE> means to insert some text, and
<CODE>UNDO_INSERT</CODE> means to delete some text.  That is, the undo code
tells undo what to undo, not how to undo it.  <CODE>UNDO_BEGIN</CODE> and
<CODE>UNDO_END</CODE> are tags added by <CODE>rl_begin_undo_group ()</CODE> and
<CODE>rl_end_undo_group ()</CODE>.

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_begin_undo_group</B> <I>()</I>
<DD><A NAME="IDX143"></A>
Begins saving undo information in a group construct.  The undo
information usually comes from calls to <CODE>rl_insert_text ()</CODE> and
<CODE>rl_delete_text ()</CODE>, but could be the result of calls to
<CODE>rl_add_undo ()</CODE>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_end_undo_group</B> <I>()</I>
<DD><A NAME="IDX144"></A>
Closes the current undo group started with <CODE>rl_begin_undo_group
()</CODE>.  There should be one call to <CODE>rl_end_undo_group ()</CODE>
for each call to <CODE>rl_begin_undo_group ()</CODE>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> void <B>rl_add_undo</B> <I>(enum undo_code what, int start, int end, char *text)</I>
<DD><A NAME="IDX145"></A>
Remember how to undo an event (according to <VAR>what</VAR>).  The affected
text runs from <VAR>start</VAR> to <VAR>end</VAR>, and encompasses <VAR>text</VAR>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> void <B>free_undo_list</B> <I>()</I>
<DD><A NAME="IDX146"></A>
Free the existing undo list.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_do_undo</B> <I>()</I>
<DD><A NAME="IDX147"></A>
Undo the first thing on the undo list.  Returns <CODE>0</CODE> if there was
nothing to undo, non-zero if something was undone.
</DL>

</P>
<P>
Finally, if you neither insert nor delete text, but directly modify the
existing text (e.g., change its case), call <CODE>rl_modifying ()</CODE>
once, just before you modify the text.  You must supply the indices of
the text range that you are going to modify.

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_modifying</B> <I>(int start, int end)</I>
<DD><A NAME="IDX148"></A>
Tell Readline to save the text between <VAR>start</VAR> and <VAR>end</VAR> as a
single undo unit.  It is assumed that you will subsequently modify
that text.
</DL>

</P>


<H3><A NAME="SEC35" HREF="readline.html#TOC35">Redisplay</A></H3>

<P>
<DL>
<DT><U>Function:</U> void <B>rl_redisplay</B> <I>()</I>
<DD><A NAME="IDX149"></A>
Change what's displayed on the screen to reflect the current contents
of <CODE>rl_line_buffer</CODE>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_forced_update_display</B> <I>()</I>
<DD><A NAME="IDX150"></A>
Force the line to be updated and redisplayed, whether or not
Readline thinks the screen display is correct.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_on_new_line</B> <I>()</I>
<DD><A NAME="IDX151"></A>
Tell the update routines that we have moved onto a new (empty) line,
usually after ouputting a newline.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_reset_line_state</B> <I>()</I>
<DD><A NAME="IDX152"></A>
Reset the display state to a clean state and redisplay the current line
starting on a new line.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_message</B> <I>(va_alist)</I>
<DD><A NAME="IDX153"></A>
The arguments are a string as would be supplied to <CODE>printf</CODE>.  The
resulting string is displayed in the <EM>echo area</EM>.  The echo area
is also used to display numeric arguments and search strings.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_clear_message</B> <I>()</I>
<DD><A NAME="IDX154"></A>
Clear the message in the echo area.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> void <B>rl_save_prompt</B> <I>()</I>
<DD><A NAME="IDX155"></A>
Save the local Readline prompt display state in preparation for
displaying a new message in the message area with <CODE>rl_message</CODE>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> void <B>rl_restore_prompt</B> <I>()</I>
<DD><A NAME="IDX156"></A>
Restore the local Readline prompt display state saved by the most
recent call to <CODE>rl_save_prompt</CODE>.
</DL>

</P>


<H3><A NAME="SEC36" HREF="readline.html#TOC36">Modifying Text</A></H3>

<P>
<DL>
<DT><U>Function:</U> int <B>rl_insert_text</B> <I>(char *text)</I>
<DD><A NAME="IDX157"></A>
Insert <VAR>text</VAR> into the line at the current cursor position.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_delete_text</B> <I>(int start, int end)</I>
<DD><A NAME="IDX158"></A>
Delete the text between <VAR>start</VAR> and <VAR>end</VAR> in the current line.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> char * <B>rl_copy_text</B> <I>(int start, int end)</I>
<DD><A NAME="IDX159"></A>
Return a copy of the text between <VAR>start</VAR> and <VAR>end</VAR> in
the current line.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_kill_text</B> <I>(int start, int end)</I>
<DD><A NAME="IDX160"></A>
Copy the text between <VAR>start</VAR> and <VAR>end</VAR> in the current line
to the kill ring, appending or prepending to the last kill if the
last command was a kill command.  The text is deleted.
If <VAR>start</VAR> is less than <VAR>end</VAR>,
the text is appended, otherwise prepended.  If the last command was
not a kill, a new kill ring slot is used.
</DL>

</P>


<H3><A NAME="SEC37" HREF="readline.html#TOC37">Utility Functions</A></H3>

<P>
<DL>
<DT><U>Function:</U> int <B>rl_read_key</B> <I>()</I>
<DD><A NAME="IDX161"></A>
Return the next character available.  This handles input inserted into
the input stream via <VAR>pending input</VAR> (see section <A HREF="readline.html#SEC28">Readline Variables</A>)
and <CODE>rl_stuff_char ()</CODE>, macros, and characters read from the keyboard.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_getc</B> <I>(FILE *)</I>
<DD><A NAME="IDX162"></A>
Return the next character available from the keyboard.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_stuff_char</B> <I>(int c)</I>
<DD><A NAME="IDX163"></A>
Insert <VAR>c</VAR> into the Readline input stream.  It will be "read"
before Readline attempts to read characters from the terminal with
<CODE>rl_read_key ()</CODE>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> rl_extend_line_buffer <B>(int</B> <I>len)</I>
<DD><A NAME="IDX164"></A>
Ensure that <CODE>rl_line_buffer</CODE> has enough space to hold <VAR>len</VAR>
characters, possibly reallocating it if necessary.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_initialize</B> <I>()</I>
<DD><A NAME="IDX165"></A>
Initialize or re-initialize Readline's internal state.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_reset_terminal</B> <I>(char *terminal_name)</I>
<DD><A NAME="IDX166"></A>
Reinitialize Readline's idea of the terminal settings using
<VAR>terminal_name</VAR> as the terminal type (e.g., <CODE>vt100</CODE>).
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>alphabetic</B> <I>(int c)</I>
<DD><A NAME="IDX167"></A>
Return 1 if <VAR>c</VAR> is an alphabetic character.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>numeric</B> <I>(int c)</I>
<DD><A NAME="IDX168"></A>
Return 1 if <VAR>c</VAR> is a numeric character.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>ding</B> <I>()</I>
<DD><A NAME="IDX169"></A>
Ring the terminal bell, obeying the setting of <CODE>bell-style</CODE>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> void <B>rl_display_match_list</B> <I>(char **matches, int len, int max)</I>
<DD><A NAME="IDX170"></A>
A convenience function for displaying a list of strings in
columnar format on Readline's output stream.  <CODE>matches</CODE> is the list
of strings, in argv format, such as a list of completion matches.
<CODE>len</CODE> is the number of strings in <CODE>matches</CODE>, and <CODE>max</CODE>
is the length of the longest string in <CODE>matches</CODE>.  This function uses
the setting of <CODE>print-completions-horizontally</CODE> to select how the
matches are displayed (see section <A HREF="readline.html#SEC10">Readline Init File Syntax</A>).
</DL>

</P>
<P>
The following are implemented as macros, defined in <CODE>chartypes.h</CODE>.

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>uppercase_p</B> <I>(int c)</I>
<DD><A NAME="IDX171"></A>
Return 1 if <VAR>c</VAR> is an uppercase alphabetic character.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>lowercase_p</B> <I>(int c)</I>
<DD><A NAME="IDX172"></A>
Return 1 if <VAR>c</VAR> is a lowercase alphabetic character.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>digit_p</B> <I>(int c)</I>
<DD><A NAME="IDX173"></A>
Return 1 if <VAR>c</VAR> is a numeric character.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>to_upper</B> <I>(int c)</I>
<DD><A NAME="IDX174"></A>
If <VAR>c</VAR> is a lowercase alphabetic character, return the corresponding
uppercase character.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>to_lower</B> <I>(int c)</I>
<DD><A NAME="IDX175"></A>
If <VAR>c</VAR> is an uppercase alphabetic character, return the corresponding
lowercase character.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>digit_value</B> <I>(int c)</I>
<DD><A NAME="IDX176"></A>
If <VAR>c</VAR> is a number, return the value it represents.
</DL>

</P>


<H3><A NAME="SEC38" HREF="readline.html#TOC38">Alternate Interface</A></H3>

<P>
An alternate interface is available to plain <CODE>readline()</CODE>.  Some
applications need to interleave keyboard I/O with file, device, or
window system I/O, typically by using a main loop to <CODE>select()</CODE>
on various file descriptors.  To accomodate this need, readline can
also be invoked as a `callback' function from an event loop.  There
are functions available to make this easy.

</P>
<P>
<DL>
<DT><U>Function:</U> void <B>rl_callback_handler_install</B> <I>(char *prompt, Vfunction *lhandler)</I>
<DD><A NAME="IDX177"></A>
Set up the terminal for readline I/O and display the initial
expanded value of <VAR>prompt</VAR>.  Save the value of <VAR>lhandler</VAR> to
use as a callback when a complete line of input has been entered.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> void <B>rl_callback_read_char</B> <I>()</I>
<DD><A NAME="IDX178"></A>
Whenever an application determines that keyboard input is available, it
should call <CODE>rl_callback_read_char()</CODE>, which will read the next
character from the current input source.  If that character completes the
line, <CODE>rl_callback_read_char</CODE> will invoke the <VAR>lhandler</VAR>
function saved by <CODE>rl_callback_handler_install</CODE> to process the
line.  <CODE>EOF</CODE> is  indicated by calling <VAR>lhandler</VAR> with a
<CODE>NULL</CODE> line.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> void <B>rl_callback_handler_remove</B> <I>()</I>
<DD><A NAME="IDX179"></A>
Restore the terminal to its initial state and remove the line handler.
This may be called from within a callback as well as independently.
</DL>

</P>


<H3><A NAME="SEC39" HREF="readline.html#TOC39">An Example</A></H3>

<P>
Here is a function which changes lowercase characters to their uppercase
equivalents, and uppercase characters to lowercase.  If
this function was bound to <SAMP>`M-c'</SAMP>, then typing <SAMP>`M-c'</SAMP> would
change the case of the character under point.  Typing <SAMP>`M-1 0 M-c'</SAMP>
would change the case of the following 10 characters, leaving the cursor on
the last character changed.

</P>

<PRE>
/* Invert the case of the COUNT following characters. */
int
invert_case_line (count, key)
     int count, key;
{
  register int start, end, i;

  start = rl_point;

  if (rl_point &#62;= rl_end)
    return (0);

  if (count &#60; 0)
    {
      direction = -1;
      count = -count;
    }
  else
    direction = 1;
      
  /* Find the end of the range to modify. */
  end = start + (count * direction);

  /* Force it to be within range. */
  if (end &#62; rl_end)
    end = rl_end;
  else if (end &#60; 0)
    end = 0;

  if (start == end)
    return (0);

  if (start &#62; end)
    {
      int temp = start;
      start = end;
      end = temp;
    }

  /* Tell readline that we are modifying the line, so it will save
     the undo information. */
  rl_modifying (start, end);

  for (i = start; i != end; i++)
    {
      if (uppercase_p (rl_line_buffer[i]))
        rl_line_buffer[i] = to_lower (rl_line_buffer[i]);
      else if (lowercase_p (rl_line_buffer[i]))
        rl_line_buffer[i] = to_upper (rl_line_buffer[i]);
    }
  /* Move point to on top of the last character changed. */
  rl_point = (direction == 1) ? end - 1 : start;
  return (0);
}
</PRE>



<H2><A NAME="SEC40" HREF="readline.html#TOC40">Readline Signal Handling</A></H2>

<P>
Signals are asynchronous events sent to a process by the Unix kernel,
sometimes on behalf of another process.  They are intended to indicate
exceptional events, like a user pressing the interrupt key on his
terminal, or a network connection being broken.  There is a class of
signals that can be sent to the process currently reading input from
the keyboard.  Since Readline changes the terminal attributes when it
is called, it needs to perform special processing when a signal is
received to restore the terminal to a sane state, or provide application
writers with functions to do so manually.

</P>
<P>
Readline contains an internal signal handler that is installed for a
number of signals (<CODE>SIGINT</CODE>, <CODE>SIGQUIT</CODE>, <CODE>SIGTERM</CODE>,
<CODE>SIGALRM</CODE>, <CODE>SIGTSTP</CODE>, <CODE>SIGTTIN</CODE>, and <CODE>SIGTTOU</CODE>).
When one of these signals is received, the signal handler
will reset the terminal attributes to those that were in effect before
<CODE>readline ()</CODE> was called, reset the signal handling to what it was
before <CODE>readline ()</CODE> was called, and resend the signal to the calling
application.
If and when the calling application's signal handler returns, Readline
will reinitialize the terminal and continue to accept input.
When a <CODE>SIGINT</CODE> is received, the Readline signal handler performs
some additional work, which will cause any partially-entered line to be
aborted (see the description of <CODE>rl_free_line_state ()</CODE>).

</P>
<P>
There is an additional Readline signal handler, for <CODE>SIGWINCH</CODE>, which
the kernel sends to a process whenever the terminal's size changes (for
example, if a user resizes an <CODE>xterm</CODE>).  The Readline <CODE>SIGWINCH</CODE>
handler updates Readline's internal screen size state, and then calls any
<CODE>SIGWINCH</CODE> signal handler the calling application has installed. 
Readline calls the application's <CODE>SIGWINCH</CODE> signal handler without
resetting the terminal to its original state.  If the application's signal
handler does more than update its idea of the terminal size and return (for
example, a <CODE>longjmp</CODE> back to a main processing loop), it <EM>must</EM>
call <CODE>rl_cleanup_after_signal ()</CODE> (described below), to restore the
terminal state. 

</P>
<P>
Readline provides two variables that allow application writers to
control whether or not it will catch certain signals and act on them
when they are received.  It is important that applications change the
values of these variables only when calling <CODE>readline ()</CODE>, not in
a signal handler, so Readline's internal signal state is not corrupted.

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_catch_signals</B>
<DD><A NAME="IDX180"></A>
If this variable is non-zero, Readline will install signal handlers for
<CODE>SIGINT</CODE>, <CODE>SIGQUIT</CODE>, <CODE>SIGTERM</CODE>, <CODE>SIGALRM</CODE>,
<CODE>SIGTSTP</CODE>, <CODE>SIGTTIN</CODE>, and <CODE>SIGTTOU</CODE>.

</P>
<P>
The default value of <CODE>rl_catch_signals</CODE> is 1.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_catch_sigwinch</B>
<DD><A NAME="IDX181"></A>
If this variable is non-zero, Readline will install a signal handler for
<CODE>SIGWINCH</CODE>.

</P>
<P>
The default value of <CODE>rl_catch_sigwinch</CODE> is 1.
</DL>

</P>
<P>
If an application does not wish to have Readline catch any signals, or
to handle signals other than those Readline catches (<CODE>SIGHUP</CODE>,
for example), 
Readline provides convenience functions to do the necessary terminal
and internal state cleanup upon receipt of a signal.

</P>
<P>
<DL>
<DT><U>Function:</U> void <B>rl_cleanup_after_signal</B> <I>(void)</I>
<DD><A NAME="IDX182"></A>
This function will reset the state of the terminal to what it was before
<CODE>readline ()</CODE> was called, and remove the Readline signal handlers for
all signals, depending on the values of <CODE>rl_catch_signals</CODE> and
<CODE>rl_catch_sigwinch</CODE>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> void <B>rl_free_line_state</B> <I>(void)</I>
<DD><A NAME="IDX183"></A>
This will free any partial state associated with the current input line
(undo information, any partial history entry, any partially-entered
keyboard macro, and any partially-entered numeric argument).  This
should be called before <CODE>rl_cleanup_after_signal ()</CODE>.  The
Readline signal handler for <CODE>SIGINT</CODE> calls this to abort the
current input line.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> void <B>rl_reset_after_signal</B> <I>(void)</I>
<DD><A NAME="IDX184"></A>
This will reinitialize the terminal and reinstall any Readline signal
handlers, depending on the values of <CODE>rl_catch_signals</CODE> and
<CODE>rl_catch_sigwinch</CODE>.
</DL>

</P>
<P>
If an application does not wish Readline to catch <CODE>SIGWINCH</CODE>, it may
call <CODE>rl_resize_terminal ()</CODE> to force Readline to update its idea of
the terminal size when a <CODE>SIGWINCH</CODE> is received.

</P>
<P>
<DL>
<DT><U>Function:</U> void <B>rl_resize_terminal</B> <I>(void)</I>
<DD><A NAME="IDX185"></A>
Update Readline's internal screen size.
</DL>

</P>
<P>
The following functions install and remove Readline's signal handlers.

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_set_signals</B> <I>(void)</I>
<DD><A NAME="IDX186"></A>
Install Readline's signal handler for <CODE>SIGINT</CODE>, <CODE>SIGQUIT</CODE>,
<CODE>SIGTERM</CODE>, <CODE>SIGALRM</CODE>, <CODE>SIGTSTP</CODE>, <CODE>SIGTTIN</CODE>,
<CODE>SIGTTOU</CODE>, and <CODE>SIGWINCH</CODE>, depending on the values of
<CODE>rl_catch_signals</CODE> and <CODE>rl_catch_sigwinch</CODE>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_clear_signals</B> <I>(void)</I>
<DD><A NAME="IDX187"></A>
Remove all of the Readline signal handlers installed by
<CODE>rl_set_signals ()</CODE>.
</DL>

</P>


<H2><A NAME="SEC41" HREF="readline.html#TOC41">Custom Completers</A></H2>

<P>
Typically, a program that reads commands from the user has a way of
disambiguating commands and data.  If your program is one of these, then
it can provide completion for commands, data, or both.
The following sections describe how your program and Readline
cooperate to provide this service.

</P>

<UL>
<LI><A HREF="readline.html#SEC42">How Completing Works</A>: The logic used to do completion.
<LI><A HREF="readline.html#SEC43">Completion Functions</A>: Functions provided by Readline.
<LI><A HREF="readline.html#SEC44">Completion Variables</A>: Variables which control completion.
<LI><A HREF="readline.html#SEC45">A Short Completion Example</A>: An example of writing completer subroutines.
</UL>



<H3><A NAME="SEC42" HREF="readline.html#TOC42">How Completing Works</A></H3>

<P>
In order to complete some text, the full list of possible completions
must be available.  That is, it is not possible to accurately
expand a partial word without knowing all of the possible words
which make sense in that context.  The Readline library provides
the user interface to completion, and two of the most common
completion functions:  filename and username.  For completing other types
of text, you must write your own completion function.  This section
describes exactly what such functions must do, and provides an example.

</P>
<P>
There are three major functions used to perform completion:

</P>

<OL>
<LI>

The user-interface function <CODE>rl_complete ()</CODE>.  This function is
called with the same arguments as other Readline
functions intended for interactive use:  <VAR>count</VAR> and
<VAR>invoking_key</VAR>.  It isolates the word to be completed and calls
<CODE>completion_matches ()</CODE> to generate a list of possible completions.
It then either lists the possible completions, inserts the possible
completions, or actually performs the
completion, depending on which behavior is desired.

<LI>

The internal function <CODE>completion_matches ()</CODE> uses your
<EM>generator</EM> function to generate the list of possible matches, and
then returns the array of these matches.  You should place the address
of your generator function in <CODE>rl_completion_entry_function</CODE>.

<LI>

The generator function is called repeatedly from
<CODE>completion_matches ()</CODE>, returning a string each time.  The
arguments to the generator function are <VAR>text</VAR> and <VAR>state</VAR>.
<VAR>text</VAR> is the partial word to be completed.  <VAR>state</VAR> is zero the
first time the function is called, allowing the generator to perform
any necessary initialization, and a positive non-zero integer for
each subsequent call.  When the generator function returns
<CODE>(char *)NULL</CODE> this signals <CODE>completion_matches ()</CODE> that there are
no more possibilities left.  Usually the generator function computes the
list of possible completions when <VAR>state</VAR> is zero, and returns them
one at a time on subsequent calls.  Each string the generator function
returns as a match must be allocated with <CODE>malloc()</CODE>; Readline
frees the strings when it has finished with them.

</OL>

<P>
<DL>
<DT><U>Function:</U> int <B>rl_complete</B> <I>(int ignore, int invoking_key)</I>
<DD><A NAME="IDX188"></A>
Complete the word at or before point.  You have supplied the function
that does the initial simple matching selection algorithm (see
<CODE>completion_matches ()</CODE>).  The default is to do filename completion.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> Function * <B>rl_completion_entry_function</B>
<DD><A NAME="IDX189"></A>
This is a pointer to the generator function for <CODE>completion_matches
()</CODE>.  If the value of <CODE>rl_completion_entry_function</CODE> is
<CODE>(Function *)NULL</CODE> then the default filename generator function,
<CODE>filename_completion_function ()</CODE>, is used.
</DL>

</P>


<H3><A NAME="SEC43" HREF="readline.html#TOC43">Completion Functions</A></H3>

<P>
Here is the complete list of callable completion functions present in
Readline.

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_complete_internal</B> <I>(int what_to_do)</I>
<DD><A NAME="IDX190"></A>
Complete the word at or before point.  <VAR>what_to_do</VAR> says what to do
with the completion.  A value of <SAMP>`?'</SAMP> means list the possible
completions.  <SAMP>`TAB'</SAMP> means do standard completion.  <SAMP>`*'</SAMP> means
insert all of the possible completions.  <SAMP>`!'</SAMP> means to display
all of the possible completions, if there is more than one, as well as
performing partial completion.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_complete</B> <I>(int ignore, int invoking_key)</I>
<DD><A NAME="IDX191"></A>
Complete the word at or before point.  You have supplied the function
that does the initial simple matching selection algorithm (see
<CODE>completion_matches ()</CODE> and <CODE>rl_completion_entry_function</CODE>).
The default is to do filename
completion.  This calls <CODE>rl_complete_internal ()</CODE> with an
argument depending on <VAR>invoking_key</VAR>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_possible_completions</B> <I>(int count, int invoking_key))</I>
<DD><A NAME="IDX192"></A>
List the possible completions.  See description of <CODE>rl_complete
()</CODE>.  This calls <CODE>rl_complete_internal ()</CODE> with an argument of
<SAMP>`?'</SAMP>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> int <B>rl_insert_completions</B> <I>(int count, int invoking_key))</I>
<DD><A NAME="IDX193"></A>
Insert the list of possible completions into the line, deleting the
partially-completed word.  See description of <CODE>rl_complete ()</CODE>.
This calls <CODE>rl_complete_internal ()</CODE> with an argument of <SAMP>`*'</SAMP>.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> char ** <B>completion_matches</B> <I>(char *text, CPFunction *entry_func)</I>
<DD><A NAME="IDX194"></A>
Returns an array of <CODE>(char *)</CODE> which is a list of completions for
<VAR>text</VAR>.  If there are no completions, returns <CODE>(char **)NULL</CODE>.
The first entry in the returned array is the substitution for <VAR>text</VAR>.
The remaining entries are the possible completions.  The array is
terminated with a <CODE>NULL</CODE> pointer.

</P>
<P>
<VAR>entry_func</VAR> is a function of two args, and returns a
<CODE>(char *)</CODE>.  The first argument is <VAR>text</VAR>.  The second is a
state argument; it is zero on the first call, and non-zero on subsequent
calls.  <VAR>entry_func</VAR> returns a <CODE>NULL</CODE>  pointer to the caller
when there are no more matches.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> char * <B>filename_completion_function</B> <I>(char *text, int state)</I>
<DD><A NAME="IDX195"></A>
A generator function for filename completion in the general case.  Note
that completion in Bash is a little different because of all
the pathnames that must be followed when looking up completions for a
command.  The Bash source is a useful reference for writing custom
completion functions.
</DL>

</P>
<P>
<DL>
<DT><U>Function:</U> char * <B>username_completion_function</B> <I>(char *text, int state)</I>
<DD><A NAME="IDX196"></A>
A completion generator for usernames.  <VAR>text</VAR> contains a partial
username preceded by a random character (usually <SAMP>`~'</SAMP>).  As with all
completion generators, <VAR>state</VAR> is zero on the first call and non-zero
for subsequent calls.
</DL>

</P>


<H3><A NAME="SEC44" HREF="readline.html#TOC44">Completion Variables</A></H3>

<P>
<DL>
<DT><U>Variable:</U> Function * <B>rl_completion_entry_function</B>
<DD><A NAME="IDX197"></A>
A pointer to the generator function for <CODE>completion_matches ()</CODE>.
<CODE>NULL</CODE> means to use <CODE>filename_entry_function ()</CODE>, the default
filename completer.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> CPPFunction * <B>rl_attempted_completion_function</B>
<DD><A NAME="IDX198"></A>
A pointer to an alternative function to create matches.
The function is called with <VAR>text</VAR>, <VAR>start</VAR>, and <VAR>end</VAR>.
<VAR>start</VAR> and <VAR>end</VAR> are indices in <CODE>rl_line_buffer</CODE> saying
what the boundaries of <VAR>text</VAR> are.  If this function exists and
returns <CODE>NULL</CODE>, or if this variable is set to <CODE>NULL</CODE>, then
<CODE>rl_complete ()</CODE> will call the value of
<CODE>rl_completion_entry_function</CODE> to generate matches, otherwise the
array of strings returned will be used.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> CPFunction * <B>rl_filename_quoting_function</B>
<DD><A NAME="IDX199"></A>
A pointer to a function that will quote a filename in an application-
specific fashion.  This is called if filename completion is being
attempted and one of the characters in <CODE>rl_filename_quote_characters</CODE>
appears in a completed filename.  The function is called with
<VAR>text</VAR>, <VAR>match_type</VAR>, and <VAR>quote_pointer</VAR>.  The <VAR>text</VAR>
is the filename to be quoted.  The <VAR>match_type</VAR> is either
<CODE>SINGLE_MATCH</CODE>, if there is only one completion match, or
<CODE>MULT_MATCH</CODE>.  Some functions use this to decide whether or not to
insert a closing quote character.  The <VAR>quote_pointer</VAR> is a pointer
to any opening quote character the user typed.  Some functions choose
to reset this character.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> CPFunction * <B>rl_filename_dequoting_function</B>
<DD><A NAME="IDX200"></A>
A pointer to a function that will remove application-specific quoting
characters from a filename before completion is attempted, so those
characters do not interfere with matching the text against names in
the filesystem.  It is called with <VAR>text</VAR>, the text of the word
to be dequoted, and <VAR>quote_char</VAR>, which is the quoting character 
that delimits the filename (usually <SAMP>`''</SAMP> or <SAMP>`"'</SAMP>).  If
<VAR>quote_char</VAR> is zero, the filename was not in an embedded string.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> Function * <B>rl_char_is_quoted_p</B>
<DD><A NAME="IDX201"></A>
A pointer to a function to call that determines whether or not a specific
character in the line buffer is quoted, according to whatever quoting
mechanism the program calling readline uses.  The function is called with
two arguments: <VAR>text</VAR>, the text of the line, and <VAR>index</VAR>, the
index of the character in the line.  It is used to decide whether a
character found in <CODE>rl_completer_word_break_characters</CODE> should be
used to break words for the completer.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_completion_query_items</B>
<DD><A NAME="IDX202"></A>
Up to this many items will be displayed in response to a
possible-completions call.  After that, we ask the user if she is sure
she wants to see them all.  The default value is 100.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> char * <B>rl_basic_word_break_characters</B>
<DD><A NAME="IDX203"></A>
The basic list of characters that signal a break between words for the
completer routine.  The default value of this variable is the characters
which break words for completion in Bash, i.e.,
<CODE>" \t\n\"\\'`@@$&#62;&#60;=;|&#38;{("</CODE>.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> char * <B>rl_basic_quote_characters</B>
<DD><A NAME="IDX204"></A>
List of quote characters which can cause a word break.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> char * <B>rl_completer_word_break_characters</B>
<DD><A NAME="IDX205"></A>
The list of characters that signal a break between words for
<CODE>rl_complete_internal ()</CODE>.  The default list is the value of
<CODE>rl_basic_word_break_characters</CODE>.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> char * <B>rl_completer_quote_characters</B>
<DD><A NAME="IDX206"></A>
List of characters which can be used to quote a substring of the line.
Completion occurs on the entire substring, and within the substring
<CODE>rl_completer_word_break_characters</CODE> are treated as any other character,
unless they also appear within this list.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> char * <B>rl_filename_quote_characters</B>
<DD><A NAME="IDX207"></A>
A list of characters that cause a filename to be quoted by the completer
when they appear in a completed filename.  The default is the null string.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> char * <B>rl_special_prefixes</B>
<DD><A NAME="IDX208"></A>
The list of characters that are word break characters, but should be
left in <VAR>text</VAR> when it is passed to the completion function.
Programs can use this to help determine what kind of completing to do.
For instance, Bash sets this variable to "$@@" so that it can complete
shell variables and hostnames.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_completion_append_character</B>
<DD><A NAME="IDX209"></A>
When a single completion alternative matches at the end of the command
line, this character is appended to the inserted completion text.  The
default is a space character (<SAMP>` '</SAMP>).  Setting this to the null
character (<SAMP>`\0'</SAMP>) prevents anything being appended automatically.
This can be changed in custom completion functions to
provide the "most sensible word separator character" according to
an application-specific command line syntax specification.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_ignore_completion_duplicates</B>
<DD><A NAME="IDX210"></A>
If non-zero, then disallow duplicates in the matches.  Default is 1.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_filename_completion_desired</B>
<DD><A NAME="IDX211"></A>
Non-zero means that the results of the matches are to be treated as
filenames.  This is <EM>always</EM> zero on entry, and can only be changed
within a completion entry generator function.  If it is set to a non-zero
value, directory names have a slash appended and Readline attempts to
quote completed filenames if they contain any embedded word break
characters.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_filename_quoting_desired</B>
<DD><A NAME="IDX212"></A>
Non-zero means that the results of the matches are to be quoted using
double quotes (or an application-specific quoting mechanism) if the
completed filename contains any characters in
<CODE>rl_filename_quote_chars</CODE>.  This is <EM>always</EM> non-zero
on entry, and can only be changed within a completion entry generator
function.  The quoting is effected via a call to the function pointed to
by <CODE>rl_filename_quoting_function</CODE>.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> int <B>rl_inhibit_completion</B>
<DD><A NAME="IDX213"></A>
If this variable is non-zero, completion is inhibit&#60;ed.  The completion
character will be inserted as any other bound to <CODE>self-insert</CODE>.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> Function * <B>rl_ignore_some_completions_function</B>
<DD><A NAME="IDX214"></A>
This function, if defined, is called by the completer when real filename
completion is done, after all the matching names have been generated.
It is passed a <CODE>NULL</CODE> terminated array of matches.
The first element (<CODE>matches[0]</CODE>) is the
maximal substring common to all matches. This function can
re-arrange the list of matches as required, but each element deleted
from the array must be freed.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> Function * <B>rl_directory_completion_hook</B>
<DD><A NAME="IDX215"></A>
This function, if defined, is allowed to modify the directory portion
of filenames Readline completes.  It is called with the address of a
string (the current directory name) as an argument.  It could be used
to expand symbolic links or shell variables in pathnames.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> VFunction * <B>rl_completion_display_matches_hook</B>
<DD><A NAME="IDX216"></A>
If non-zero, then this is the address of a function to call when
completing a word would normally display the list of possible matches.
This function is called in lieu of Readline displaying the list.
It takes three arguments:
(<CODE>char **</CODE><VAR>matches</VAR>, <CODE>int</CODE> <VAR>num_matches</VAR>, <CODE>int</CODE> <VAR>max_length</VAR>)
where <VAR>matches</VAR> is the array of matching strings,
<VAR>num_matches</VAR> is the number of strings in that array, and
<VAR>max_length</VAR> is the length of the longest string in that array.
Readline provides a convenience function, <CODE>rl_display_match_list</CODE>,
that takes care of doing the display to Readline's output stream.  That
function may be called from this hook.
</DL>

</P>


<H3><A NAME="SEC45" HREF="readline.html#TOC45">A Short Completion Example</A></H3>

<P>
Here is a small application demonstrating the use of the GNU Readline
library.  It is called <CODE>fileman</CODE>, and the source code resides in
<TT>`examples/fileman.c'</TT>.  This sample application provides
completion of command names, line editing features, and access to the
history list.

</P>

<PRE>
/* fileman.c -- A tiny application which demonstrates how to use the
   GNU Readline library.  This application interactively allows users
   to manipulate files and their modes. */

#include &#60;stdio.h&#62;
#include &#60;sys/types.h&#62;
#include &#60;sys/file.h&#62;
#include &#60;sys/stat.h&#62;
#include &#60;sys/errno.h&#62;

#include &#60;readline/readline.h&#62;
#include &#60;readline/history.h&#62;

extern char *getwd ();
extern char *xmalloc ();

/* The names of functions that actually do the manipulation. */
int com_list (), com_view (), com_rename (), com_stat (), com_pwd ();
int com_delete (), com_help (), com_cd (), com_quit ();

/* A structure which contains information on the commands this program
   can understand. */

typedef struct {
  char *name;			/* User printable name of the function. */
  Function *func;		/* Function to call to do the job. */
  char *doc;			/* Documentation for this function.  */
} COMMAND;

COMMAND commands[] = {
  { "cd", com_cd, "Change to directory DIR" },
  { "delete", com_delete, "Delete FILE" },
  { "help", com_help, "Display this text" },
  { "?", com_help, "Synonym for `help'" },
  { "list", com_list, "List files in DIR" },
  { "ls", com_list, "Synonym for `list'" },
  { "pwd", com_pwd, "Print the current working directory" },
  { "quit", com_quit, "Quit using Fileman" },
  { "rename", com_rename, "Rename FILE to NEWNAME" },
  { "stat", com_stat, "Print out statistics on FILE" },
  { "view", com_view, "View the contents of FILE" },
  { (char *)NULL, (Function *)NULL, (char *)NULL }
};

/* Forward declarations. */
char *stripwhite ();
COMMAND *find_command ();

/* The name of this program, as taken from argv[0]. */
char *progname;

/* When non-zero, this global means the user is done using this program. */
int done;

char *
dupstr (s)
     int s;
{
  char *r;

  r = xmalloc (strlen (s) + 1);
  strcpy (r, s);
  return (r);
}

main (argc, argv)
     int argc;
     char **argv;
{
  char *line, *s;

  progname = argv[0];

  initialize_readline ();	/* Bind our completer. */

  /* Loop reading and executing lines until the user quits. */
  for ( ; done == 0; )
    {
      line = readline ("FileMan: ");

      if (!line)
        break;

      /* Remove leading and trailing whitespace from the line.
         Then, if there is anything left, add it to the history list
         and execute it. */
      s = stripwhite (line);

      if (*s)
        {
          add_history (s);
          execute_line (s);
        }

      free (line);
    }
  exit (0);
}

/* Execute a command line. */
int
execute_line (line)
     char *line;
{
  register int i;
  COMMAND *command;
  char *word;

  /* Isolate the command word. */
  i = 0;
  while (line[i] &#38;&#38; whitespace (line[i]))
    i++;
  word = line + i;

  while (line[i] &#38;&#38; !whitespace (line[i]))
    i++;

  if (line[i])
    line[i++] = '\0';

  command = find_command (word);

  if (!command)
    {
      fprintf (stderr, "%s: No such command for FileMan.\n", word);
      return (-1);
    }

  /* Get argument to command, if any. */
  while (whitespace (line[i]))
    i++;

  word = line + i;

  /* Call the function. */
  return ((*(command-&#62;func)) (word));
}

/* Look up NAME as the name of a command, and return a pointer to that
   command.  Return a NULL pointer if NAME isn't a command name. */
COMMAND *
find_command (name)
     char *name;
{
  register int i;

  for (i = 0; commands[i].name; i++)
    if (strcmp (name, commands[i].name) == 0)
      return (&#38;commands[i]);

  return ((COMMAND *)NULL);
}

/* Strip whitespace from the start and end of STRING.  Return a pointer
   into STRING. */
char *
stripwhite (string)
     char *string;
{
  register char *s, *t;

  for (s = string; whitespace (*s); s++)
    ;
    
  if (*s == 0)
    return (s);

  t = s + strlen (s) - 1;
  while (t &#62; s &#38;&#38; whitespace (*t))
    t--;
  *++t = '\0';

  return s;
}

/* **************************************************************** */
/*                                                                  */
/*                  Interface to Readline Completion                */
/*                                                                  */
/* **************************************************************** */

char *command_generator ();
char **fileman_completion ();

/* Tell the GNU Readline library how to complete.  We want to try to complete
   on command names if this is the first word in the line, or on filenames
   if not. */
initialize_readline ()
{
  /* Allow conditional parsing of the ~/.inputrc file. */
  rl_readline_name = "FileMan";

  /* Tell the completer that we want a crack first. */
  rl_attempted_completion_function = (CPPFunction *)fileman_completion;
}

/* Attempt to complete on the contents of TEXT.  START and END bound the
   region of rl_line_buffer that contains the word to complete.  TEXT is
   the word to complete.  We can use the entire contents of rl_line_buffer
   in case we want to do some simple parsing.  Return the array of matches,
   or NULL if there aren't any. */
char **
fileman_completion (text, start, end)
     char *text;
     int start, end;
{
  char **matches;

  matches = (char **)NULL;

  /* If this word is at the start of the line, then it is a command
     to complete.  Otherwise it is the name of a file in the current
     directory. */
  if (start == 0)
    matches = completion_matches (text, command_generator);

  return (matches);
}

/* Generator function for command completion.  STATE lets us know whether
   to start from scratch; without any state (i.e. STATE == 0), then we
   start at the top of the list. */
char *
command_generator (text, state)
     char *text;
     int state;
{
  static int list_index, len;
  char *name;

  /* If this is a new word to complete, initialize now.  This includes
     saving the length of TEXT for efficiency, and initializing the index
     variable to 0. */
  if (!state)
    {
      list_index = 0;
      len = strlen (text);
    }

  /* Return the next name which partially matches from the command list. */
  while (name = commands[list_index].name)
    {
      list_index++;

      if (strncmp (name, text, len) == 0)
        return (dupstr(name));
    }

  /* If no names matched, then return NULL. */
  return ((char *)NULL);
}

/* **************************************************************** */
/*                                                                  */
/*                       FileMan Commands                           */
/*                                                                  */
/* **************************************************************** */

/* String to pass to system ().  This is for the LIST, VIEW and RENAME
   commands. */
static char syscom[1024];

/* List the file(s) named in arg. */
com_list (arg)
     char *arg;
{
  if (!arg)
    arg = "";

  sprintf (syscom, "ls -FClg %s", arg);
  return (system (syscom));
}

com_view (arg)
     char *arg;
{
  if (!valid_argument ("view", arg))
    return 1;

  sprintf (syscom, "more %s", arg);
  return (system (syscom));
}

com_rename (arg)
     char *arg;
{
  too_dangerous ("rename");
  return (1);
}

com_stat (arg)
     char *arg;
{
  struct stat finfo;

  if (!valid_argument ("stat", arg))
    return (1);

  if (stat (arg, &#38;finfo) == -1)
    {
      perror (arg);
      return (1);
    }

  printf ("Statistics for `%s':\n", arg);

  printf ("%s has %d link%s, and is %d byte%s in length.\n", arg,
          finfo.st_nlink,
          (finfo.st_nlink == 1) ? "" : "s",
          finfo.st_size,
          (finfo.st_size == 1) ? "" : "s");
  printf ("Inode Last Change at: %s", ctime (&#38;finfo.st_ctime));
  printf ("      Last access at: %s", ctime (&#38;finfo.st_atime));
  printf ("    Last modified at: %s", ctime (&#38;finfo.st_mtime));
  return (0);
}

com_delete (arg)
     char *arg;
{
  too_dangerous ("delete");
  return (1);
}

/* Print out help for ARG, or for all of the commands if ARG is
   not present. */
com_help (arg)
     char *arg;
{
  register int i;
  int printed = 0;

  for (i = 0; commands[i].name; i++)
    {
      if (!*arg || (strcmp (arg, commands[i].name) == 0))
        {
          printf ("%s\t\t%s.\n", commands[i].name, commands[i].doc);
          printed++;
        }
    }

  if (!printed)
    {
      printf ("No commands match `%s'.  Possibilties are:\n", arg);

      for (i = 0; commands[i].name; i++)
        {
          /* Print in six columns. */
          if (printed == 6)
            {
              printed = 0;
              printf ("\n");
            }

          printf ("%s\t", commands[i].name);
          printed++;
        }

      if (printed)
        printf ("\n");
    }
  return (0);
}

/* Change to the directory ARG. */
com_cd (arg)
     char *arg;
{
  if (chdir (arg) == -1)
    {
      perror (arg);
      return 1;
    }

  com_pwd ("");
  return (0);
}

/* Print out the current working directory. */
com_pwd (ignore)
     char *ignore;
{
  char dir[1024], *s;

  s = getwd (dir);
  if (s == 0)
    {
      printf ("Error getting pwd: %s\n", dir);
      return 1;
    }

  printf ("Current directory is %s\n", dir);
  return 0;
}

/* The user wishes to quit using this program.  Just set DONE non-zero. */
com_quit (arg)
     char *arg;
{
  done = 1;
  return (0);
}

/* Function which tells you that you can't do this. */
too_dangerous (caller)
     char *caller;
{
  fprintf (stderr,
           "%s: Too dangerous for me to distribute.  Write it yourself.\n",
           caller);
}

/* Return non-zero if ARG is a valid argument for CALLER, else print
   an error message and return zero. */
int
valid_argument (caller, arg)
     char *caller, *arg;
{
  if (!arg || !*arg)
    {
      fprintf (stderr, "%s: Argument required.\n", caller);
      return (0);
    }

  return (1);
}
</PRE>



<H1><A NAME="SEC46" HREF="readline.html#TOC46">Concept Index</A></H1>
<P>
Jump to:
<A HREF="#c">c</A>
-
<A HREF="#e">e</A>
-
<A HREF="#i">i</A>
-
<A HREF="#k">k</A>
-
<A HREF="#n">n</A>
-
<A HREF="#r">r</A>
-
<A HREF="#y">y</A>
<P>
<H2><A NAME="c">c</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX3">command editing</A>
</DIR>
<H2><A NAME="e">e</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX4">editing command lines</A>
</DIR>
<H2><A NAME="i">i</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX8">initialization file, readline</A>
<LI><A HREF="readline.html#IDX1">interaction, readline</A>
</DIR>
<H2><A NAME="k">k</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX7">kill ring</A>
<LI><A HREF="readline.html#IDX5">killing text</A>
</DIR>
<H2><A NAME="n">n</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX2">notation, readline</A>
</DIR>
<H2><A NAME="r">r</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX98">readline, function</A>
</DIR>
<H2><A NAME="y">y</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX6">yanking text</A>
</DIR>

</P>


<H1><A NAME="SEC47" HREF="readline.html#TOC47">Function and Variable Index</A></H1>
<P>
Jump to:
<A HREF="#(">(</A>
-
<A HREF="#a">a</A>
-
<A HREF="#b">b</A>
-
<A HREF="#c">c</A>
-
<A HREF="#d">d</A>
-
<A HREF="#e">e</A>
-
<A HREF="#f">f</A>
-
<A HREF="#h">h</A>
-
<A HREF="#i">i</A>
-
<A HREF="#k">k</A>
-
<A HREF="#l">l</A>
-
<A HREF="#m">m</A>
-
<A HREF="#n">n</A>
-
<A HREF="#o">o</A>
-
<A HREF="#p">p</A>
-
<A HREF="#q">q</A>
-
<A HREF="#r">r</A>
-
<A HREF="#s">s</A>
-
<A HREF="#t">t</A>
-
<A HREF="#u">u</A>
-
<A HREF="#v">v</A>
-
<A HREF="#y">y</A>
<P>
<H2><A NAME="(">(</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX164">(int</A>
</DIR>
<H2><A NAME="a">a</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX83">abort (C-g)</A>
<LI><A HREF="readline.html#IDX34">accept-line (Newline, Return)</A>
<LI><A HREF="readline.html#IDX167">alphabetic</A>
</DIR>
<H2><A NAME="b">b</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX29">backward-char (C-b)</A>
<LI><A HREF="readline.html#IDX48">backward-delete-char (Rubout)</A>
<LI><A HREF="readline.html#IDX59">backward-kill-line (C-x Rubout)</A>
<LI><A HREF="readline.html#IDX63">backward-kill-word (M-DEL)</A>
<LI><A HREF="readline.html#IDX31">backward-word (M-b)</A>
<LI><A HREF="readline.html#IDX37">beginning-of-history (M-&#38;#60;)</A>
<LI><A HREF="readline.html#IDX26">beginning-of-line (C-a)</A>
<LI><A HREF="readline.html#IDX9">bell-style</A>
</DIR>
<H2><A NAME="c">c</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX81">call-last-kbd-macro (C-x e)</A>
<LI><A HREF="readline.html#IDX57">capitalize-word (M-c)</A>
<LI><A HREF="readline.html#IDX91">character-search (C-])</A>
<LI><A HREF="readline.html#IDX92">character-search-backward (M-C-])</A>
<LI><A HREF="readline.html#IDX32">clear-screen (C-l)</A>
<LI><A HREF="readline.html#IDX10">comment-begin</A>
<LI><A HREF="readline.html#IDX74">complete (TAB)</A>
<LI><A HREF="readline.html#IDX11">completion-query-items</A>
<LI><A HREF="readline.html#IDX194">completion_matches</A>
<LI><A HREF="readline.html#IDX12">convert-meta</A>
<LI><A HREF="readline.html#IDX68">copy-backward-word ()</A>
<LI><A HREF="readline.html#IDX69">copy-forward-word ()</A>
<LI><A HREF="readline.html#IDX67">copy-region-as-kill ()</A>
</DIR>
<H2><A NAME="d">d</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX47">delete-char (C-d)</A>
<LI><A HREF="readline.html#IDX78">delete-char-or-list ()</A>
<LI><A HREF="readline.html#IDX65">delete-horizontal-space ()</A>
<LI><A HREF="readline.html#IDX72">digit-argument (M-0, M-1, ... M--)</A>
<LI><A HREF="readline.html#IDX173">digit_p</A>
<LI><A HREF="readline.html#IDX176">digit_value</A>
<LI><A HREF="readline.html#IDX169">ding</A>
<LI><A HREF="readline.html#IDX13">disable-completion</A>
<LI><A HREF="readline.html#IDX84">do-uppercase-version (M-a, M-b, M-<VAR>x</VAR>, ...)</A>
<LI><A HREF="readline.html#IDX56">downcase-word (M-l)</A>
<LI><A HREF="readline.html#IDX94">dump-functions ()</A>
<LI><A HREF="readline.html#IDX96">dump-macros ()</A>
<LI><A HREF="readline.html#IDX95">dump-variables ()</A>
</DIR>
<H2><A NAME="e">e</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX14">editing-mode</A>
<LI><A HREF="readline.html#IDX15">enable-keypad</A>
<LI><A HREF="readline.html#IDX80">end-kbd-macro (C-x ))</A>
<LI><A HREF="readline.html#IDX38">end-of-history (M-&#38;#62;)</A>
<LI><A HREF="readline.html#IDX27">end-of-line (C-e)</A>
<LI><A HREF="readline.html#IDX90">exchange-point-and-mark (C-x C-x)</A>
<LI><A HREF="readline.html#IDX16">expand-tilde</A>
</DIR>
<H2><A NAME="f">f</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX195">filename_completion_function</A>
<LI><A HREF="readline.html#IDX49">forward-backward-delete-char ()</A>
<LI><A HREF="readline.html#IDX28">forward-char (C-f)</A>
<LI><A HREF="readline.html#IDX40">forward-search-history (C-s)</A>
<LI><A HREF="readline.html#IDX30">forward-word (M-f)</A>
<LI><A HREF="readline.html#IDX146">free_undo_list</A>
</DIR>
<H2><A NAME="h">h</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX44">history-search-backward ()</A>
<LI><A HREF="readline.html#IDX43">history-search-forward ()</A>
<LI><A HREF="readline.html#IDX17">horizontal-scroll-mode</A>
</DIR>
<H2><A NAME="i">i</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX18">input-meta</A>
<LI><A HREF="readline.html#IDX93">insert-comment (M-#)</A>
<LI><A HREF="readline.html#IDX76">insert-completions (M-*)</A>
<LI><A HREF="readline.html#IDX20">isearch-terminators</A>
</DIR>
<H2><A NAME="k">k</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX21">keymap</A>
<LI><A HREF="readline.html#IDX58">kill-line (C-k)</A>
<LI><A HREF="readline.html#IDX66">kill-region ()</A>
<LI><A HREF="readline.html#IDX61">kill-whole-line ()</A>
<LI><A HREF="readline.html#IDX62">kill-word (M-d)</A>
</DIR>
<H2><A NAME="l">l</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX172">lowercase_p</A>
</DIR>
<H2><A NAME="m">m</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX22">mark-modified-lines</A>
<LI><A HREF="readline.html#IDX77">menu-complete ()</A>
<LI><A HREF="readline.html#IDX19">meta-flag</A>
</DIR>
<H2><A NAME="n">n</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX36">next-history (C-n)</A>
<LI><A HREF="readline.html#IDX42">non-incremental-forward-search-history (M-n)</A>
<LI><A HREF="readline.html#IDX41">non-incremental-reverse-search-history (M-p)</A>
<LI><A HREF="readline.html#IDX168">numeric</A>
</DIR>
<H2><A NAME="o">o</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX23">output-meta</A>
</DIR>
<H2><A NAME="p">p</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX75">possible-completions (M-?)</A>
<LI><A HREF="readline.html#IDX85">prefix-meta (ESC)</A>
<LI><A HREF="readline.html#IDX35">previous-history (C-p)</A>
</DIR>
<H2><A NAME="q">q</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX50">quoted-insert (C-q, C-v)</A>
</DIR>
<H2><A NAME="r">r</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX82">re-read-init-file (C-x C-r)</A>
<LI><A HREF="readline.html#IDX97">readline</A>
<LI><A HREF="readline.html#IDX33">redraw-current-line ()</A>
<LI><A HREF="readline.html#IDX39">reverse-search-history (C-r)</A>
<LI><A HREF="readline.html#IDX87">revert-line (M-r)</A>
<LI><A HREF="readline.html#IDX119">rl_add_defun</A>
<LI><A HREF="readline.html#IDX145">rl_add_undo</A>
<LI><A HREF="readline.html#IDX198">rl_attempted_completion_function</A>
<LI><A HREF="readline.html#IDX204">rl_basic_quote_characters</A>
<LI><A HREF="readline.html#IDX203">rl_basic_word_break_characters</A>
<LI><A HREF="readline.html#IDX143">rl_begin_undo_group</A>
<LI><A HREF="readline.html#IDX128">rl_bind_key</A>
<LI><A HREF="readline.html#IDX129">rl_bind_key_in_map</A>
<LI><A HREF="readline.html#IDX118">rl_binding_keymap</A>
<LI><A HREF="readline.html#IDX177">rl_callback_handler_install</A>
<LI><A HREF="readline.html#IDX179">rl_callback_handler_remove</A>
<LI><A HREF="readline.html#IDX178">rl_callback_read_char</A>
<LI><A HREF="readline.html#IDX180">rl_catch_signals</A>
<LI><A HREF="readline.html#IDX181">rl_catch_sigwinch</A>
<LI><A HREF="readline.html#IDX201">rl_char_is_quoted_p</A>
<LI><A HREF="readline.html#IDX182">rl_cleanup_after_signal</A>
<LI><A HREF="readline.html#IDX154">rl_clear_message</A>
<LI><A HREF="readline.html#IDX187">rl_clear_signals</A>
<LI><A HREF="readline.html#IDX188">rl_complete</A>, <A HREF="rlman.html#IDX191">rl_complete</A>
<LI><A HREF="readline.html#IDX190">rl_complete_internal</A>
<LI><A HREF="readline.html#IDX206">rl_completer_quote_characters</A>
<LI><A HREF="readline.html#IDX205">rl_completer_word_break_characters</A>
<LI><A HREF="readline.html#IDX209">rl_completion_append_character</A>
<LI><A HREF="readline.html#IDX216">rl_completion_display_matches_hook</A>
<LI><A HREF="readline.html#IDX189">rl_completion_entry_function</A>, <A HREF="rlman.html#IDX197">rl_completion_entry_function</A>
<LI><A HREF="readline.html#IDX202">rl_completion_query_items</A>
<LI><A HREF="readline.html#IDX121">rl_copy_keymap</A>
<LI><A HREF="readline.html#IDX159">rl_copy_text</A>
<LI><A HREF="readline.html#IDX158">rl_delete_text</A>
<LI><A HREF="readline.html#IDX215">rl_directory_completion_hook</A>
<LI><A HREF="readline.html#IDX123">rl_discard_keymap</A>
<LI><A HREF="readline.html#IDX170">rl_display_match_list</A>
<LI><A HREF="readline.html#IDX147">rl_do_undo</A>
<LI><A HREF="readline.html#IDX103">rl_done</A>
<LI><A HREF="readline.html#IDX101">rl_end</A>
<LI><A HREF="readline.html#IDX144">rl_end_undo_group</A>
<LI><A HREF="readline.html#IDX105">rl_erase_empty_line</A>
<LI><A HREF="readline.html#IDX114">rl_event_hook</A>
<LI><A HREF="readline.html#IDX117">rl_executing_keymap</A>
<LI><A HREF="readline.html#IDX211">rl_filename_completion_desired</A>
<LI><A HREF="readline.html#IDX200">rl_filename_dequoting_function</A>
<LI><A HREF="readline.html#IDX207">rl_filename_quote_characters</A>
<LI><A HREF="readline.html#IDX212">rl_filename_quoting_desired</A>
<LI><A HREF="readline.html#IDX199">rl_filename_quoting_function</A>
<LI><A HREF="readline.html#IDX150">rl_forced_update_display</A>
<LI><A HREF="readline.html#IDX183">rl_free_line_state</A>
<LI><A HREF="readline.html#IDX141">rl_function_dumper</A>
<LI><A HREF="readline.html#IDX138">rl_function_of_keyseq</A>
<LI><A HREF="readline.html#IDX134">rl_generic_bind</A>
<LI><A HREF="readline.html#IDX124">rl_get_keymap</A>
<LI><A HREF="readline.html#IDX126">rl_get_keymap_by_name</A>
<LI><A HREF="readline.html#IDX127">rl_get_keymap_name</A>
<LI><A HREF="readline.html#IDX162">rl_getc</A>
<LI><A HREF="readline.html#IDX115">rl_getc_function</A>
<LI><A HREF="readline.html#IDX210">rl_ignore_completion_duplicates</A>
<LI><A HREF="readline.html#IDX214">rl_ignore_some_completions_function</A>
<LI><A HREF="readline.html#IDX213">rl_inhibit_completion</A>
<LI><A HREF="readline.html#IDX165">rl_initialize</A>
<LI><A HREF="readline.html#IDX193">rl_insert_completions</A>
<LI><A HREF="readline.html#IDX157">rl_insert_text</A>
<LI><A HREF="readline.html#IDX110">rl_instream</A>
<LI><A HREF="readline.html#IDX139">rl_invoking_keyseqs</A>
<LI><A HREF="readline.html#IDX140">rl_invoking_keyseqs_in_map</A>
<LI><A HREF="readline.html#IDX160">rl_kill_text</A>
<LI><A HREF="readline.html#IDX107">rl_library_version</A>
<LI><A HREF="readline.html#IDX99">rl_line_buffer</A>
<LI><A HREF="readline.html#IDX142">rl_list_funmap_names</A>
<LI><A HREF="readline.html#IDX120">rl_make_bare_keymap</A>
<LI><A HREF="readline.html#IDX122">rl_make_keymap</A>
<LI><A HREF="readline.html#IDX102">rl_mark</A>
<LI><A HREF="readline.html#IDX153">rl_message</A>
<LI><A HREF="readline.html#IDX148">rl_modifying</A>
<LI><A HREF="readline.html#IDX137">rl_named_function</A>
<LI><A HREF="readline.html#IDX151">rl_on_new_line</A>
<LI><A HREF="readline.html#IDX111">rl_outstream</A>
<LI><A HREF="readline.html#IDX135">rl_parse_and_bind</A>
<LI><A HREF="readline.html#IDX104">rl_pending_input</A>
<LI><A HREF="readline.html#IDX100">rl_point</A>
<LI><A HREF="readline.html#IDX192">rl_possible_completions</A>
<LI><A HREF="readline.html#IDX113">rl_pre_input_hook</A>
<LI><A HREF="readline.html#IDX106">rl_prompt</A>
<LI><A HREF="readline.html#IDX136">rl_read_init_file</A>
<LI><A HREF="readline.html#IDX161">rl_read_key</A>
<LI><A HREF="readline.html#IDX109">rl_readline_name</A>
<LI><A HREF="readline.html#IDX149">rl_redisplay</A>
<LI><A HREF="readline.html#IDX116">rl_redisplay_function</A>
<LI><A HREF="readline.html#IDX184">rl_reset_after_signal</A>
<LI><A HREF="readline.html#IDX152">rl_reset_line_state</A>
<LI><A HREF="readline.html#IDX166">rl_reset_terminal</A>
<LI><A HREF="readline.html#IDX185">rl_resize_terminal</A>
<LI><A HREF="readline.html#IDX156">rl_restore_prompt</A>
<LI><A HREF="readline.html#IDX155">rl_save_prompt</A>
<LI><A HREF="readline.html#IDX125">rl_set_keymap</A>
<LI><A HREF="readline.html#IDX186">rl_set_signals</A>
<LI><A HREF="readline.html#IDX208">rl_special_prefixes</A>
<LI><A HREF="readline.html#IDX112">rl_startup_hook</A>
<LI><A HREF="readline.html#IDX163">rl_stuff_char</A>
<LI><A HREF="readline.html#IDX108">rl_terminal_name</A>
<LI><A HREF="readline.html#IDX133">rl_unbind_command_in_map</A>
<LI><A HREF="readline.html#IDX132">rl_unbind_function_in_map</A>
<LI><A HREF="readline.html#IDX130">rl_unbind_key</A>
<LI><A HREF="readline.html#IDX131">rl_unbind_key_in_map</A>
</DIR>
<H2><A NAME="s">s</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX52">self-insert (a, b, A, 1, !, ...)</A>
<LI><A HREF="readline.html#IDX89">set-mark (C-@@)</A>
<LI><A HREF="readline.html#IDX24">show-all-if-ambiguous</A>
<LI><A HREF="readline.html#IDX79">start-kbd-macro (C-x ()</A>
</DIR>
<H2><A NAME="t">t</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX51">tab-insert (M-TAB)</A>
<LI><A HREF="readline.html#IDX88">tilde-expand (M-~)</A>
<LI><A HREF="readline.html#IDX175">to_lower</A>
<LI><A HREF="readline.html#IDX174">to_upper</A>
<LI><A HREF="readline.html#IDX53">transpose-chars (C-t)</A>
<LI><A HREF="readline.html#IDX54">transpose-words (M-t)</A>
</DIR>
<H2><A NAME="u">u</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX86">undo (C-_, C-x C-u)</A>
<LI><A HREF="readline.html#IDX73">universal-argument ()</A>
<LI><A HREF="readline.html#IDX60">unix-line-discard (C-u)</A>
<LI><A HREF="readline.html#IDX64">unix-word-rubout (C-w)</A>
<LI><A HREF="readline.html#IDX55">upcase-word (M-u)</A>
<LI><A HREF="readline.html#IDX171">uppercase_p</A>
<LI><A HREF="readline.html#IDX196">username_completion_function</A>
</DIR>
<H2><A NAME="v">v</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX25">visible-stats</A>
</DIR>
<H2><A NAME="y">y</A></H2>
<DIR>
<LI><A HREF="readline.html#IDX70">yank (C-y)</A>
<LI><A HREF="readline.html#IDX46">yank-last-arg (M-., M-_)</A>
<LI><A HREF="readline.html#IDX45">yank-nth-arg (M-C-y)</A>
<LI><A HREF="readline.html#IDX71">yank-pop (M-y)</A>
</DIR>

</P>
<P><HR><P>
This document was generated on 31 December 1998 using the
<A HREF="http://wwwinfo.cern.ch/dis/texi2html/">texi2html</A>
translator version 1.52.</P>
</BODY>
</HTML>
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of readline 4.0
@
text
@@


1.1.1.2
log
@Import of readline 4.1
@
text
@d4 1
a4 1
     from /usr/homes/chet/src/bash/readline-src/doc/rlman.texinfo on 1 March 2000 -->
d10 2
a11 2
<H2>Edition 4.1, for <CODE>Readline Library</CODE> Version 4.1.</H2>
<H2>January 2000</H2>
d92 2
a93 2
59 Temple Place, Suite 330, <BR>
Boston, MA 02111 USA
d158 3
a160 15
produced when the Meta key (if you have one) is depressed, and the <KBD>k</KBD>
key is pressed.
The Meta key is labeled <KBD>ALT</KBD> on many keyboards.
On keyboards with two keys labeled <KBD>ALT</KBD> (usually to either side of
the space bar), the <KBD>ALT</KBD> on the left side is generally set to
work as a Meta key.
The <KBD>ALT</KBD> key on the right may also be configured to work as a
Meta key or may be configured as some other modifier, such as a
Compose key for typing accented characters.

</P>
<P>
If you do not have a Meta or <KBD>ALT</KBD> key, or another key working as
a Meta key, the identical keystroke can be generated by typing <KBD>ESC</KBD>
<I>first</I>, and then typing <KBD>k</KBD>.
a173 4
If your keyboard lacks a <KBD>LFD</KBD> key, typing <KBD>C-j</KBD> will
produce the desired character.
The <KBD>RET</KBD> key may be labeled <KBD>Return</KBD> or <KBD>Enter</KBD> on
some keyboards.
d222 2
a223 2
Sometimes you may mistype a character, and
not notice the error until you have typed several other characters.  In
d234 1
a234 1
blank space created by the removal of the text.  A list of the bare
d246 1
a246 1
<DT><KBD>DEL</KBD> or <KBD>Backspace</KBD>
d255 1
a255 1
<DT><KBD>C-_</KBD> or <KBD>C-x C-u</KBD>
a260 7
<P>
(Depending on your configuration, the <KBD>Backspace</KBD> key be set to
delete the character to the left of the cursor and the <KBD>DEL</KBD> key set
to delete the character underneath the cursor, like <KBD>C-d</KBD>, rather
than the character to the left of the cursor.)

</P>
d266 1
a266 1
The above table describes the most basic keystrokes that you need
a310 4
(`Cut' and `paste' are more recent jargon for `kill' and `yank'.)

</P>
<P>
d338 1
a338 1
Kill from the cursor to the end of the current word, or, if between
a339 1
Word boundaries are the same as those used by <KBD>M-f</KBD>.
d343 1
a343 1
Kill from the cursor the start of the previous word, or, if between
a344 1
Word boundaries are the same as those used by <KBD>M-b</KBD>.
d386 1
a386 1
sign (<SAMP>`-'</SAMP>), then the sign of the argument will be negative.  Once
d409 1
a409 3
To search backward in the history for a particular string, type
<KBD>C-r</KBD>.  Typing <KBD>C-s</KBD> searches forward through the history.
The characters present in the value of the <CODE>isearch-terminators</CODE> variable
d416 2
a417 5

</P>
<P>
To find other matching entries in the history list, type <KBD>C-r</KBD> or
<KBD>C-s</KBD> as appropriate.
d440 1
a440 1
Although the Readline library comes with a set of Emacs-like
d444 1
a444 1
commands in an <EM>inputrc</EM> file, conventionally in his home directory.
d539 1
a539 1
bit and prefixing an <KBD>ESC</KBD> character, converting them to a
d660 1
a660 1
simple.  First you need to find the name of the command that you
d730 1
a730 1
<KBD>"</KBD>, a double quotation mark
d733 1
a733 1
<KBD>'</KBD>, a single quote or apostrophe
d767 1
a767 1
the character whose <CODE>ASCII</CODE> code is the octal value <VAR>nnn</VAR>
d771 1
a771 1
the character whose <CODE>ASCII</CODE> code is the hexadecimal value <VAR>nnn</VAR>
a1000 8
<P>
Command names without an accompanying key sequence are unbound by default.
In the following descriptions, <VAR>point</VAR> refers to the current cursor
position, and <VAR>mark</VAR> refers to a cursor position saved by the
<CODE>set-mark</CODE> command.
The text between the point and mark is referred to as the <VAR>region</VAR>.

</P>
d1035 1
a1035 1
Move back to the start of the current or previous word.  Words are
d1115 3
a1117 3
between the start of the current line and the point.
This is a non-incremental search.
By default, this command is unbound.
d1197 1
a1197 1
Negative arguments have no effect.
d1202 2
a1203 2
Drag the word before point past the word after point,
moving point past that word as well.
d1234 1
a1234 1
Kill the text from point to the end of the line.
d1245 1
d1250 2
a1251 2
Kill all characters on the current line, no matter point is.
By default, this is unbound.
d1256 3
a1258 3
Kill from point to the end of the current word, or if between
words, to the end of the next word.
Word boundaries are the same as <CODE>forward-word</CODE>.
d1263 2
a1264 2
Kill the word behind point.
Word boundaries are the same as <CODE>backward-word</CODE>.
d1269 2
a1270 2
Kill the word behind point, using white space as a word boundary.
The killed text is saved on the kill-ring.
d1280 2
a1281 1
Kill the text in the current region.
d1430 1
a1430 1
Read in the contents of the <VAR>inputrc</VAR> file, and incorporate
a1722 9
<P>
Before declaring any functions that customize Readline's behavior, or
using any functionality Readline provides in other code, an
application writer should include the file <CODE>&#60;readline/readline.h&#62;</CODE>
in any file that uses Readline's features.  Since some of the definitions
in <CODE>readline.h</CODE> use the <CODE>stdio</CODE> library, the file
<CODE>&#60;stdio.h&#62;</CODE> should be included before <CODE>readline.h</CODE>.

</P>
d1827 1
a1827 3
contents of the line, but see section <A HREF="readline.html#SEC34">Allowing Undoing</A>.  The
function <CODE>rl_extend_line_buffer</CODE> is available to increase
the memory allocated to <CODE>rl_line_buffer</CODE>.
d1899 1
a1899 1
<DT><U>Variable:</U> int <B>rl_already_prompted</B>
a1900 14
If an application wishes to display the prompt itself, rather than have
Readline do it the first time <CODE>readline()</CODE> is called, it should set
this variable to a non-zero value after displaying the prompt.
The prompt must also be passed as the argument to <CODE>readline()</CODE> so
the redisplay functions can update the display properly.
The calling application is responsible for managing the value; Readline
never sets it.
</DL>

</P>
<P>
<DL>
<DT><U>Variable:</U> char * <B>rl_library_version</B>
<DD><A NAME="IDX108"></A>
d1908 1
a1908 1
<DD><A NAME="IDX109"></A>
d1916 1
a1916 1
<DD><A NAME="IDX110"></A>
d1926 1
a1926 1
<DD><A NAME="IDX111"></A>
d1934 1
a1934 1
<DD><A NAME="IDX112"></A>
d1942 1
a1942 1
<DD><A NAME="IDX113"></A>
d1951 1
a1951 1
<DD><A NAME="IDX114"></A>
d1961 1
a1961 1
<DD><A NAME="IDX115"></A>
d1970 1
a1970 1
<DD><A NAME="IDX116"></A>
d1981 1
a1981 1
<DD><A NAME="IDX117"></A>
d1992 1
a1992 1
<DD><A NAME="IDX118"></A>
d2001 1
a2001 1
<DD><A NAME="IDX119"></A>
d2051 1
a2051 1
<DD><A NAME="IDX120"></A>
d2080 1
a2080 1
<DD><A NAME="IDX121"></A>
d2089 1
a2089 1
<DD><A NAME="IDX122"></A>
d2097 1
a2097 1
<DD><A NAME="IDX123"></A>
d2107 1
a2107 1
<DD><A NAME="IDX124"></A>
d2120 1
a2120 1
<DD><A NAME="IDX125"></A>
d2128 1
a2128 1
<DD><A NAME="IDX126"></A>
d2136 1
a2136 1
<DD><A NAME="IDX127"></A>
d2145 1
a2145 1
<DD><A NAME="IDX128"></A>
a2164 9
Since <CODE>readline</CODE> installs a set of default key bindings the first
time it is called, there is always the danger that a custom binding
installed before the first call to <CODE>readline</CODE> will be overridden.
An alternate mechanism is to install custom key bindings in an
initialization function assigned to the <CODE>rl_startup_hook</CODE> variable
(see section <A HREF="readline.html#SEC28">Readline Variables</A>).

</P>
<P>
d2171 1
a2171 1
<DD><A NAME="IDX129"></A>
d2180 1
a2180 1
<DD><A NAME="IDX130"></A>
d2189 1
a2189 1
<DD><A NAME="IDX131"></A>
d2198 1
a2198 1
<DD><A NAME="IDX132"></A>
d2207 1
a2207 1
<DD><A NAME="IDX133"></A>
d2215 1
a2215 1
<DD><A NAME="IDX134"></A>
d2223 1
a2223 1
<DD><A NAME="IDX135"></A>
d2235 1
a2235 1
<DD><A NAME="IDX136"></A>
d2245 1
a2245 1
<DD><A NAME="IDX137"></A>
d2263 1
a2263 1
<DD><A NAME="IDX138"></A>
d2271 1
a2271 1
<DD><A NAME="IDX139"></A>
d2282 1
a2282 1
<DD><A NAME="IDX140"></A>
d2291 1
a2291 1
<DD><A NAME="IDX141"></A>
d2300 1
a2300 1
<DD><A NAME="IDX142"></A>
d2311 1
a2311 1
<DD><A NAME="IDX143"></A>
a2315 10
<P>
<DL>
<DT><U>Function:</U> char ** <B>rl_funmap_names</B> <I>()</I>
<DD><A NAME="IDX144"></A>
Return a NULL terminated array of known function names.  The array is
sorted.  The array itself is allocated, but not the strings inside.  You
should free () the array when you done, but not the pointrs.
</DL>

</P>
d2360 1
a2360 1
<DD><A NAME="IDX145"></A>
d2371 1
a2371 1
<DD><A NAME="IDX146"></A>
d2381 1
a2381 1
<DD><A NAME="IDX147"></A>
d2390 1
a2390 1
<DD><A NAME="IDX148"></A>
d2398 1
a2398 1
<DD><A NAME="IDX149"></A>
d2414 1
a2414 1
<DD><A NAME="IDX150"></A>
d2428 1
a2428 1
<DD><A NAME="IDX151"></A>
d2437 1
a2437 1
<DD><A NAME="IDX152"></A>
d2446 2
a2447 2
<DD><A NAME="IDX153"></A>
Tell the update functions that we have moved onto a new (empty) line,
a2453 13
<DT><U>Function:</U> int <B>rl_on_new_line_with_prompt</B> <I>()</I>
<DD><A NAME="IDX154"></A>
Tell the update functions that we have moved onto a new line, with
<VAR>rl_prompt</VAR> already displayed.
This could be used by applications that want to output the prompt string
themselves, but still need Readline to know the prompt string length for
redisplay.
It should be used after setting <VAR>rl_already_prompted</VAR>.
</DL>

</P>
<P>
<DL>
d2455 1
a2455 1
<DD><A NAME="IDX155"></A>
d2464 1
a2464 1
<DD><A NAME="IDX156"></A>
d2474 1
a2474 1
<DD><A NAME="IDX157"></A>
d2482 1
a2482 1
<DD><A NAME="IDX158"></A>
d2491 1
a2491 1
<DD><A NAME="IDX159"></A>
d2504 1
a2504 1
<DD><A NAME="IDX160"></A>
d2512 1
a2512 1
<DD><A NAME="IDX161"></A>
d2520 1
a2520 1
<DD><A NAME="IDX162"></A>
d2529 1
a2529 1
<DD><A NAME="IDX163"></A>
d2546 1
a2546 1
<DD><A NAME="IDX164"></A>
d2556 1
a2556 1
<DD><A NAME="IDX165"></A>
d2564 1
a2564 1
<DD><A NAME="IDX166"></A>
d2573 2
a2574 2
<DT><U>Function:</U> int <B>rl_extend_line_buffer</B> <I>(int len)</I>
<DD><A NAME="IDX167"></A>
d2583 1
a2583 1
<DD><A NAME="IDX168"></A>
d2591 1
a2591 1
<DD><A NAME="IDX169"></A>
a2593 2
If <VAR>terminal_name</VAR> is NULL, the value of the <CODE>TERM</CODE>
environment variable is used.
d2600 1
a2600 1
<DD><A NAME="IDX170"></A>
d2608 1
a2608 1
<DD><A NAME="IDX171"></A>
d2616 1
a2616 1
<DD><A NAME="IDX172"></A>
d2624 1
a2624 1
<DD><A NAME="IDX173"></A>
d2642 1
a2642 1
<DD><A NAME="IDX174"></A>
d2650 1
a2650 1
<DD><A NAME="IDX175"></A>
d2658 1
a2658 1
<DD><A NAME="IDX176"></A>
d2666 1
a2666 1
<DD><A NAME="IDX177"></A>
d2675 1
a2675 1
<DD><A NAME="IDX178"></A>
d2684 1
a2684 1
<DD><A NAME="IDX179"></A>
d2705 1
a2705 1
<DD><A NAME="IDX180"></A>
d2715 1
a2715 1
<DD><A NAME="IDX181"></A>
d2729 1
a2729 1
<DD><A NAME="IDX182"></A>
d2863 1
a2863 1
<DD><A NAME="IDX183"></A>
d2877 1
a2877 1
<DD><A NAME="IDX184"></A>
d2898 1
a2898 1
<DD><A NAME="IDX185"></A>
d2909 1
a2909 1
<DD><A NAME="IDX186"></A>
d2922 1
a2922 1
<DD><A NAME="IDX187"></A>
d2938 1
a2938 1
<DD><A NAME="IDX188"></A>
d2950 1
a2950 1
<DD><A NAME="IDX189"></A>
d2961 1
a2961 1
<DD><A NAME="IDX190"></A>
d3047 1
a3047 1
<DD><A NAME="IDX191"></A>
d3057 1
a3057 1
<DD><A NAME="IDX192"></A>
d3077 1
a3077 1
<DD><A NAME="IDX193"></A>
d3090 1
a3090 1
<DD><A NAME="IDX194"></A>
d3103 1
a3103 1
<DD><A NAME="IDX195"></A>
d3113 1
a3113 1
<DD><A NAME="IDX196"></A>
d3123 1
a3123 1
<DD><A NAME="IDX197"></A>
d3143 1
a3143 1
<DD><A NAME="IDX198"></A>
d3155 1
a3155 1
<DD><A NAME="IDX199"></A>
d3170 1
a3170 1
<DD><A NAME="IDX200"></A>
d3172 1
a3172 1
<CODE>NULL</CODE> means to use <CODE>filename_completion_function ()</CODE>, the default
d3180 1
a3180 1
<DD><A NAME="IDX201"></A>
d3195 1
a3195 1
<DD><A NAME="IDX202"></A>
d3213 1
a3213 1
<DD><A NAME="IDX203"></A>
d3227 1
a3227 1
<DD><A NAME="IDX204"></A>
d3241 1
a3241 1
<DD><A NAME="IDX205"></A>
d3251 1
a3251 1
<DD><A NAME="IDX206"></A>
d3262 1
a3262 1
<DD><A NAME="IDX207"></A>
d3270 1
a3270 1
<DD><A NAME="IDX208"></A>
d3280 1
a3280 1
<DD><A NAME="IDX209"></A>
d3291 1
a3291 1
<DD><A NAME="IDX210"></A>
d3300 1
a3300 1
<DD><A NAME="IDX211"></A>
d3312 1
a3312 1
<DD><A NAME="IDX212"></A>
d3326 1
a3326 1
<DD><A NAME="IDX213"></A>
d3334 1
a3334 1
<DD><A NAME="IDX214"></A>
d3347 1
a3347 1
<DD><A NAME="IDX215"></A>
d3361 1
a3361 1
<DD><A NAME="IDX216"></A>
d3370 1
a3370 1
<DD><A NAME="IDX217"></A>
d3384 1
a3384 1
<DD><A NAME="IDX218"></A>
d3395 1
a3395 1
<DD><A NAME="IDX219"></A>
d3857 1
a3857 1
<A HREF="#cindex_c">c</A>
d3859 1
a3859 1
<A HREF="#cindex_e">e</A>
d3861 1
a3861 1
<A HREF="#cindex_i">i</A>
d3863 1
a3863 1
<A HREF="#cindex_k">k</A>
d3865 1
a3865 1
<A HREF="#cindex_n">n</A>
d3867 1
a3867 1
<A HREF="#cindex_r">r</A>
d3869 1
a3869 1
<A HREF="#cindex_y">y</A>
d3871 1
a3871 1
<H2><A NAME="cindex_c">c</A></H2>
d3875 1
a3875 1
<H2><A NAME="cindex_e">e</A></H2>
d3879 1
a3879 1
<H2><A NAME="cindex_i">i</A></H2>
d3884 1
a3884 1
<H2><A NAME="cindex_k">k</A></H2>
d3889 1
a3889 1
<H2><A NAME="cindex_n">n</A></H2>
d3893 1
a3893 1
<H2><A NAME="cindex_r">r</A></H2>
d3897 1
a3897 1
<H2><A NAME="cindex_y">y</A></H2>
d3908 3
a3910 1
<A HREF="#findex_a">a</A>
d3912 1
a3912 1
<A HREF="#findex_b">b</A>
d3914 1
a3914 1
<A HREF="#findex_c">c</A>
d3916 1
a3916 1
<A HREF="#findex_d">d</A>
d3918 1
a3918 1
<A HREF="#findex_e">e</A>
d3920 1
a3920 1
<A HREF="#findex_f">f</A>
d3922 1
a3922 1
<A HREF="#findex_h">h</A>
d3924 1
a3924 1
<A HREF="#findex_i">i</A>
d3926 1
a3926 1
<A HREF="#findex_k">k</A>
d3928 1
a3928 1
<A HREF="#findex_l">l</A>
d3930 1
a3930 1
<A HREF="#findex_m">m</A>
d3932 1
a3932 1
<A HREF="#findex_n">n</A>
d3934 1
a3934 1
<A HREF="#findex_o">o</A>
d3936 1
a3936 1
<A HREF="#findex_p">p</A>
d3938 1
a3938 1
<A HREF="#findex_q">q</A>
d3940 1
a3940 1
<A HREF="#findex_r">r</A>
d3942 1
a3942 1
<A HREF="#findex_s">s</A>
d3944 1
a3944 1
<A HREF="#findex_t">t</A>
d3946 1
a3946 1
<A HREF="#findex_u">u</A>
d3948 1
a3948 1
<A HREF="#findex_v">v</A>
d3950 1
a3950 1
<A HREF="#findex_y">y</A>
d3952 5
a3956 1
<H2><A NAME="findex_a">a</A></H2>
d3960 1
a3960 1
<LI><A HREF="readline.html#IDX170">alphabetic</A>
d3962 1
a3962 1
<H2><A NAME="findex_b">b</A></H2>
d3973 1
a3973 1
<H2><A NAME="findex_c">c</A></H2>
d3983 1
a3983 1
<LI><A HREF="readline.html#IDX197">completion_matches</A>
d3989 1
a3989 1
<H2><A NAME="findex_d">d</A></H2>
d3995 3
a3997 3
<LI><A HREF="readline.html#IDX176">digit_p</A>
<LI><A HREF="readline.html#IDX179">digit_value</A>
<LI><A HREF="readline.html#IDX172">ding</A>
d4005 1
a4005 1
<H2><A NAME="findex_e">e</A></H2>
d4015 1
a4015 1
<H2><A NAME="findex_f">f</A></H2>
d4017 1
a4017 1
<LI><A HREF="readline.html#IDX198">filename_completion_function</A>
d4022 1
a4022 1
<LI><A HREF="readline.html#IDX148">free_undo_list</A>
d4024 1
a4024 1
<H2><A NAME="findex_h">h</A></H2>
d4030 1
a4030 1
<H2><A NAME="findex_i">i</A></H2>
d4037 1
a4037 1
<H2><A NAME="findex_k">k</A></H2>
d4045 1
a4045 1
<H2><A NAME="findex_l">l</A></H2>
d4047 1
a4047 1
<LI><A HREF="readline.html#IDX175">lowercase_p</A>
d4049 1
a4049 1
<H2><A NAME="findex_m">m</A></H2>
d4055 1
a4055 1
<H2><A NAME="findex_n">n</A></H2>
d4060 1
a4060 1
<LI><A HREF="readline.html#IDX171">numeric</A>
d4062 1
a4062 1
<H2><A NAME="findex_o">o</A></H2>
d4066 1
a4066 1
<H2><A NAME="findex_p">p</A></H2>
d4072 1
a4072 1
<H2><A NAME="findex_q">q</A></H2>
d4076 1
a4076 1
<H2><A NAME="findex_r">r</A></H2>
d4083 33
a4115 34
<LI><A HREF="readline.html#IDX120">rl_add_defun</A>
<LI><A HREF="readline.html#IDX147">rl_add_undo</A>
<LI><A HREF="readline.html#IDX107">rl_already_prompted</A>
<LI><A HREF="readline.html#IDX201">rl_attempted_completion_function</A>
<LI><A HREF="readline.html#IDX207">rl_basic_quote_characters</A>
<LI><A HREF="readline.html#IDX206">rl_basic_word_break_characters</A>
<LI><A HREF="readline.html#IDX145">rl_begin_undo_group</A>
<LI><A HREF="readline.html#IDX129">rl_bind_key</A>
<LI><A HREF="readline.html#IDX130">rl_bind_key_in_map</A>
<LI><A HREF="readline.html#IDX119">rl_binding_keymap</A>
<LI><A HREF="readline.html#IDX180">rl_callback_handler_install</A>
<LI><A HREF="readline.html#IDX182">rl_callback_handler_remove</A>
<LI><A HREF="readline.html#IDX181">rl_callback_read_char</A>
<LI><A HREF="readline.html#IDX183">rl_catch_signals</A>
<LI><A HREF="readline.html#IDX184">rl_catch_sigwinch</A>
<LI><A HREF="readline.html#IDX204">rl_char_is_quoted_p</A>
<LI><A HREF="readline.html#IDX185">rl_cleanup_after_signal</A>
<LI><A HREF="readline.html#IDX157">rl_clear_message</A>
<LI><A HREF="readline.html#IDX190">rl_clear_signals</A>
<LI><A HREF="readline.html#IDX191">rl_complete</A>, <A HREF="readline.html#IDX194">rl_complete</A>
<LI><A HREF="readline.html#IDX193">rl_complete_internal</A>
<LI><A HREF="readline.html#IDX209">rl_completer_quote_characters</A>
<LI><A HREF="readline.html#IDX208">rl_completer_word_break_characters</A>
<LI><A HREF="readline.html#IDX212">rl_completion_append_character</A>
<LI><A HREF="readline.html#IDX219">rl_completion_display_matches_hook</A>
<LI><A HREF="readline.html#IDX192">rl_completion_entry_function</A>, <A HREF="readline.html#IDX200">rl_completion_entry_function</A>
<LI><A HREF="readline.html#IDX205">rl_completion_query_items</A>
<LI><A HREF="readline.html#IDX122">rl_copy_keymap</A>
<LI><A HREF="readline.html#IDX162">rl_copy_text</A>
<LI><A HREF="readline.html#IDX161">rl_delete_text</A>
<LI><A HREF="readline.html#IDX218">rl_directory_completion_hook</A>
<LI><A HREF="readline.html#IDX124">rl_discard_keymap</A>
<LI><A HREF="readline.html#IDX173">rl_display_match_list</A>
<LI><A HREF="readline.html#IDX149">rl_do_undo</A>
d4118 1
a4118 1
<LI><A HREF="readline.html#IDX146">rl_end_undo_group</A>
d4120 28
a4147 30
<LI><A HREF="readline.html#IDX115">rl_event_hook</A>
<LI><A HREF="readline.html#IDX118">rl_executing_keymap</A>
<LI><A HREF="readline.html#IDX167">rl_extend_line_buffer</A>
<LI><A HREF="readline.html#IDX214">rl_filename_completion_desired</A>
<LI><A HREF="readline.html#IDX203">rl_filename_dequoting_function</A>
<LI><A HREF="readline.html#IDX210">rl_filename_quote_characters</A>
<LI><A HREF="readline.html#IDX215">rl_filename_quoting_desired</A>
<LI><A HREF="readline.html#IDX202">rl_filename_quoting_function</A>
<LI><A HREF="readline.html#IDX152">rl_forced_update_display</A>
<LI><A HREF="readline.html#IDX186">rl_free_line_state</A>
<LI><A HREF="readline.html#IDX142">rl_function_dumper</A>
<LI><A HREF="readline.html#IDX139">rl_function_of_keyseq</A>
<LI><A HREF="readline.html#IDX144">rl_funmap_names</A>
<LI><A HREF="readline.html#IDX135">rl_generic_bind</A>
<LI><A HREF="readline.html#IDX125">rl_get_keymap</A>
<LI><A HREF="readline.html#IDX127">rl_get_keymap_by_name</A>
<LI><A HREF="readline.html#IDX128">rl_get_keymap_name</A>
<LI><A HREF="readline.html#IDX165">rl_getc</A>
<LI><A HREF="readline.html#IDX116">rl_getc_function</A>
<LI><A HREF="readline.html#IDX213">rl_ignore_completion_duplicates</A>
<LI><A HREF="readline.html#IDX217">rl_ignore_some_completions_function</A>
<LI><A HREF="readline.html#IDX216">rl_inhibit_completion</A>
<LI><A HREF="readline.html#IDX168">rl_initialize</A>
<LI><A HREF="readline.html#IDX196">rl_insert_completions</A>
<LI><A HREF="readline.html#IDX160">rl_insert_text</A>
<LI><A HREF="readline.html#IDX111">rl_instream</A>
<LI><A HREF="readline.html#IDX140">rl_invoking_keyseqs</A>
<LI><A HREF="readline.html#IDX141">rl_invoking_keyseqs_in_map</A>
<LI><A HREF="readline.html#IDX163">rl_kill_text</A>
<LI><A HREF="readline.html#IDX108">rl_library_version</A>
d4149 3
a4151 3
<LI><A HREF="readline.html#IDX143">rl_list_funmap_names</A>
<LI><A HREF="readline.html#IDX121">rl_make_bare_keymap</A>
<LI><A HREF="readline.html#IDX123">rl_make_keymap</A>
d4153 6
a4158 7
<LI><A HREF="readline.html#IDX156">rl_message</A>
<LI><A HREF="readline.html#IDX150">rl_modifying</A>
<LI><A HREF="readline.html#IDX138">rl_named_function</A>
<LI><A HREF="readline.html#IDX153">rl_on_new_line</A>
<LI><A HREF="readline.html#IDX154">rl_on_new_line_with_prompt</A>
<LI><A HREF="readline.html#IDX112">rl_outstream</A>
<LI><A HREF="readline.html#IDX136">rl_parse_and_bind</A>
d4161 2
a4162 2
<LI><A HREF="readline.html#IDX195">rl_possible_completions</A>
<LI><A HREF="readline.html#IDX114">rl_pre_input_hook</A>
d4164 21
a4184 21
<LI><A HREF="readline.html#IDX137">rl_read_init_file</A>
<LI><A HREF="readline.html#IDX164">rl_read_key</A>
<LI><A HREF="readline.html#IDX110">rl_readline_name</A>
<LI><A HREF="readline.html#IDX151">rl_redisplay</A>
<LI><A HREF="readline.html#IDX117">rl_redisplay_function</A>
<LI><A HREF="readline.html#IDX187">rl_reset_after_signal</A>
<LI><A HREF="readline.html#IDX155">rl_reset_line_state</A>
<LI><A HREF="readline.html#IDX169">rl_reset_terminal</A>
<LI><A HREF="readline.html#IDX188">rl_resize_terminal</A>
<LI><A HREF="readline.html#IDX159">rl_restore_prompt</A>
<LI><A HREF="readline.html#IDX158">rl_save_prompt</A>
<LI><A HREF="readline.html#IDX126">rl_set_keymap</A>
<LI><A HREF="readline.html#IDX189">rl_set_signals</A>
<LI><A HREF="readline.html#IDX211">rl_special_prefixes</A>
<LI><A HREF="readline.html#IDX113">rl_startup_hook</A>
<LI><A HREF="readline.html#IDX166">rl_stuff_char</A>
<LI><A HREF="readline.html#IDX109">rl_terminal_name</A>
<LI><A HREF="readline.html#IDX134">rl_unbind_command_in_map</A>
<LI><A HREF="readline.html#IDX133">rl_unbind_function_in_map</A>
<LI><A HREF="readline.html#IDX131">rl_unbind_key</A>
<LI><A HREF="readline.html#IDX132">rl_unbind_key_in_map</A>
d4186 1
a4186 1
<H2><A NAME="findex_s">s</A></H2>
d4193 1
a4193 1
<H2><A NAME="findex_t">t</A></H2>
d4197 2
a4198 2
<LI><A HREF="readline.html#IDX178">to_lower</A>
<LI><A HREF="readline.html#IDX177">to_upper</A>
d4202 1
a4202 1
<H2><A NAME="findex_u">u</A></H2>
d4209 2
a4210 2
<LI><A HREF="readline.html#IDX174">uppercase_p</A>
<LI><A HREF="readline.html#IDX199">username_completion_function</A>
d4212 1
a4212 1
<H2><A NAME="findex_v">v</A></H2>
d4216 1
a4216 1
<H2><A NAME="findex_y">y</A></H2>
d4226 1
a4226 1
This document was generated on 1 March 2000 using the
@


1.1.1.3
log
@import of readline-4.3
@
text
@a1 11
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!-- Created on June, 27  2002 by texi2html 1.64 -->
<!-- 
Written by: Lionel Cons <Lionel.Cons@@cern.ch> (original author)
            Karl Berry  <karl@@freefriends.org>
            Olaf Bachmann <obachman@@mathematik.uni-kl.de>
            and many others.
Maintained by: Olaf Bachmann <obachman@@mathematik.uni-kl.de>
Send bugs and suggestions to <texi2html@@mathematik.uni-kl.de>
 
-->
d3 2
a4 7
<TITLE>GNU Readline Library: </TITLE>

<META NAME="description" CONTENT="GNU Readline Library: ">
<META NAME="keywords" CONTENT="GNU Readline Library: ">
<META NAME="resource-type" CONTENT="document">
<META NAME="distribution" CONTENT="global">
<META NAME="Generator" CONTENT="texi2html 1.64">
d6 1
d8 75
d84 1
a84 11
<BODY LANG="" BGCOLOR="#FFFFFF" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<A NAME="SEC_Top"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H1>GNU Readline Library</H1></P><P>

a87 1
</P><P>
d89 27
a115 25
<BLOCKQUOTE><TABLE BORDER=0 CELLSPACING=0> 
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC1">1. Command Line Editing</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">GNU Readline User's Manual.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC23">2. Programming with GNU Readline</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">GNU Readline Programmer's Manual.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC49">Concept Index</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Index of concepts described in this manual.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC50">Function and Variable Index</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Index of externally visible functions
				   and variables.</TD></TR>
</TABLE></BLOCKQUOTE>
<P>

<HR SIZE=1>
<A NAME="SEC1"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC2"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[ &lt;&lt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC23"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<A NAME="Command Line Editing"></A>
<H1> 1. Command Line Editing </H1>
<!--docid::SEC1::-->
d117 5
d123 3
a127 1
</P><P>
d129 16
a144 27
<BLOCKQUOTE><TABLE BORDER=0 CELLSPACING=0> 
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC2">1.1 Introduction to Line Editing</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Notation used in this text.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC3">1.2 Readline Interaction</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">The minimum set of commands for editing a line.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC9">1.3 Readline Init File</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Customizing Readline from a user's view.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC13">1.4 Bindable Readline Commands</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">A description of most of the Readline commands
				available for binding</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC22">1.5 Readline vi Mode</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">A short description of how to make Readline
				behave like the vi editor.</TD></TR>
</TABLE></BLOCKQUOTE>
<P>

<A NAME="Introduction and Notation"></A>
<HR SIZE="6">
<A NAME="SEC2"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC1"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC3"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[ &lt;&lt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC1"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC23"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H2> 1.1 Introduction to Line Editing </H2>
<!--docid::SEC2::-->
a145 1

a147 1
</P><P>
d149 2
a153 1
</P><P>
d155 2
a166 1
</P><P>
d168 2
d172 1
a172 1
<EM>first</EM>, and then typing <KBD>k</KBD>.
a173 1
</P><P>
d175 2
a178 1
</P><P>
d180 2
d185 1
a185 1
(see section <A HREF="readline.html#SEC9">1.3 Readline Init File</A>).
a189 1
</P><P>
d191 4
a194 16
<A NAME="Readline Interaction"></A>
<HR SIZE="6">
<A NAME="SEC3"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC2"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC4"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC9"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC1"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC9"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H2> 1.2 Readline Interaction </H2>
<!--docid::SEC3::-->
d196 1
d198 2
d207 2
a208 2
the line, you simply press <KBD>RET</KBD>.  You do not have to be at the
end of the line to press <KBD>RET</KBD>; the entire line is accepted
a209 1
</P><P>
d211 13
a223 25
<BLOCKQUOTE><TABLE BORDER=0 CELLSPACING=0> 
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC4">1.2.1 Readline Bare Essentials</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">The least you need to know about Readline.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC5">1.2.2 Readline Movement Commands</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Moving about the input line.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC6">1.2.3 Readline Killing Commands</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">How to delete text, and how to get it back!</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC7">1.2.4 Readline Arguments</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Giving numeric arguments to commands.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC8">1.2.5 Searching for Commands in the History</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Searching through previous lines.</TD></TR>
</TABLE></BLOCKQUOTE>
<P>

<A NAME="Readline Bare Essentials"></A>
<HR SIZE="6">
<A NAME="SEC4"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC3"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC5"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC9"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC3"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC9"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 1.2.1 Readline Bare Essentials </H3>
<!--docid::SEC4::-->
d225 3
d229 2
a234 1
</P><P>
d236 2
a242 1
</P><P>
d244 2
a251 1
</P><P>
d253 1
d255 1
d257 2
a258 1
<DD>Move back one character.
d260 2
a261 1
<DD>Move forward one character.
d263 2
a264 1
<DD>Delete the character to the left of the cursor.
d266 2
a267 1
<DD>Delete the character underneath the cursor.
d269 2
a270 1
<DD>Insert the character into the line at the cursor.
d272 2
a273 1
<DD>Undo the last editing command.  You can undo all the way back to an
d276 1
a277 1

a281 1
</P><P>
d283 5
a287 16
<A NAME="Readline Movement Commands"></A>
<HR SIZE="6">
<A NAME="SEC5"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC4"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC6"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC6"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC3"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC9"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 1.2.2 Readline Movement Commands </H3>
<!--docid::SEC5::-->
a288 1

a293 1
</P><P>
d295 1
d297 1
d299 2
a300 1
<DD>Move to the start of the line.
d302 2
a303 1
<DD>Move to the end of the line.
d305 2
a306 1
<DD>Move forward a word, where a word is composed of letters and digits.
d308 2
a309 1
<DD>Move backward a word.
d311 2
a312 1
<DD>Clear the screen, reprinting the current line at the top.
d314 1
a315 1

a318 1
</P><P>
d320 5
a324 16
<A NAME="Readline Killing Commands"></A>
<HR SIZE="6">
<A NAME="SEC6"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC5"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC7"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC7"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC3"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC9"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 1.2.3 Readline Killing Commands </H3>
<!--docid::SEC6::-->
d326 2
d329 2
a330 4
<A NAME="IDX1"></A>
<A NAME="IDX2"></A>
</P><P>

a334 1
</P><P>
d336 2
a340 1
</P><P>
d342 2
d350 1
a350 2
<A NAME="IDX3"></A>
</P><P>
d352 2
a354 1
</P><P>
d356 1
d358 1
d360 2
a361 2
<DD>Kill the text from the current cursor position to the end of the line.
<P>
d364 2
a365 1
<DD>Kill from the cursor to the end of the current word, or, if between
a367 1
<P>
d369 3
a371 2
<DT><KBD>M-<KBD>DEL</KBD></KBD>
<DD>Kill from the cursor the start of the current word, or, if between
a373 1
<P>
d376 3
a378 3
<DD>Kill from the cursor to the previous whitespace.  This is different than
<KBD>M-<KBD>DEL</KBD></KBD> because the word boundaries differ.
<P>
d381 1
a382 1

a384 1
</P><P>
d386 1
d388 1
d390 2
a391 2
<DD>Yank the most recently killed text back into the buffer at the cursor.
<P>
d394 2
a395 1
<DD>Rotate the kill-ring, and yank the new top.  You can only do this if
a397 1
<P>
d399 4
a402 16
<A NAME="Readline Arguments"></A>
<HR SIZE="6">
<A NAME="SEC7"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC6"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC8"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC8"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC3"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC9"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 1.2.4 Readline Arguments </H3>
<!--docid::SEC7::-->
a403 1

a409 1
</P><P>
d411 2
d418 7
a424 20
the <KBD>C-d</KBD> command an argument of 10, you could type <SAMP>`M-1 0 C-d'</SAMP>,
which will delete the next ten characters on the input line.
</P><P>

<A NAME="Searching"></A>
<HR SIZE="6">
<A NAME="SEC8"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC7"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC9"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC9"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC3"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC9"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 1.2.5 Searching for Commands in the History </H3>
<!--docid::SEC8::-->
a425 1

d428 1
a428 2
There are two search modes:  <EM>incremental</EM> and <EM>non-incremental</EM>.
</P><P>
d430 2
a446 1
</P><P>
d448 2
a457 8
A movement command will terminate the search, make the last line found
the current line, and begin editing.
</P><P>

Readline remembers the last incremental search string.  If two
<KBD>C-r</KBD>s are typed without any intervening characters defining a new
search string, any remembered search string is used.
</P><P>
d459 2
a463 1
</P><P>
d465 4
a468 16
<A NAME="Readline Init File"></A>
<HR SIZE="6">
<A NAME="SEC9"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC8"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC10"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC13"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC1"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC13"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H2> 1.3 Readline Init File </H2>
<!--docid::SEC9::-->
d470 1
d472 2
a481 1
</P><P>
d483 2
a486 1
</P><P>
d488 2
a491 1
</P><P>
d493 14
a506 31
<BLOCKQUOTE><TABLE BORDER=0 CELLSPACING=0> 
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Syntax for the commands in the inputrc file.</TD></TR>
</TABLE>

<br>
<TABLE BORDER=0 CELLSPACING=0>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC11">1.3.2 Conditional Init Constructs</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Conditional key bindings in the inputrc file.</TD></TR>
</TABLE>

<br>
<TABLE BORDER=0 CELLSPACING=0>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC12">1.3.3 Sample Init File</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">An example inputrc file.</TD></TR>
</TABLE></BLOCKQUOTE>
<P>

<A NAME="Readline Init File Syntax"></A>
<HR SIZE="6">
<A NAME="SEC10"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC9"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC11"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC13"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC9"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC13"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 1.3.1 Readline Init File Syntax </H3>
<!--docid::SEC10::-->
a507 1

d512 1
a512 1
constructs (see section <A HREF="readline.html#SEC11">1.3.2 Conditional Init Constructs</A>).  Other lines
a513 1
</P><P>
d515 1
d517 1
d519 2
a520 1
<DD>You can modify the run-time behavior of Readline by
d522 1
a522 8
using the <CODE>set</CODE> command within the init file.
The syntax is simple:
<P>

<TABLE><tr><td>&nbsp;</td><td class=example><pre>set <VAR>variable</VAR> <VAR>value</VAR>
</pre></td></tr></table></P><P>

Here, for example, is how to
a524 1
</P><P>
a525 2
<TABLE><tr><td>&nbsp;</td><td class=example><pre>set editing-mode vi
</pre></td></tr></table></P><P>
d527 3
a529 3
Variable names and values, where appropriate, are recognized without regard
to case. 
</P><P>
a532 1
</P><P>
a533 1
<A NAME="IDX4"></A>
d537 2
a538 1
<DD><A NAME="IDX5"></A>
a543 1
<P>
d546 2
a547 1
<DD><A NAME="IDX6"></A>
a550 1
<P>
d553 2
a554 1
<DD>If set to <SAMP>`on'</SAMP>, Readline performs filename matching and completion
a556 1
<P>
d559 2
a560 1
<DD><A NAME="IDX7"></A>
d565 2
a566 4
them; otherwise, they are simply listed.
This variable must be set to an integer value greater than or equal to 0.
The default limit is <CODE>100</CODE>.
<P>
d569 2
a570 1
<DD><A NAME="IDX8"></A>
a574 1
<P>
d577 2
a578 1
<DD><A NAME="IDX9"></A>
a581 1
<P>
d584 2
a585 1
<DD><A NAME="IDX10"></A>
a589 1
<P>
d592 2
a593 1
<DD><A NAME="IDX11"></A>
a596 1
<P>
d599 2
a600 1
<DD><A NAME="IDX12"></A>
a602 7
<P>

<A NAME="IDX13"></A>
If set to <SAMP>`on'</SAMP>, the history code attempts to place point at the
same location on each history line retrived with <CODE>previous-history</CODE>
or <CODE>next-history</CODE>.
</P><P>
d605 2
a606 1
<DD><A NAME="IDX14"></A>
a611 1
<P>
d614 3
a616 2
<DD><A NAME="IDX15"></A>
<A NAME="IDX16"></A>
d618 1
a618 1
will not clear the eighth bit in the characters it reads),
a621 1
<P>
d624 2
a625 1
<DD><A NAME="IDX17"></A>
d627 1
a627 1
subsequently executing the character as a command (see section <A HREF="readline.html#SEC8">1.2.5 Searching for Commands in the History</A>).
a629 1
<P>
d632 2
a633 1
<DD><A NAME="IDX18"></A>
a640 1
<CODE>vi-move</CODE>,
a646 1
<P>
d649 2
a650 1
<DD>If set to <SAMP>`on'</SAMP>, completed directory names have a slash
a651 1
<P>
d654 2
a655 1
<DD><A NAME="IDX19"></A>
a658 18
<P>

<DT><CODE>mark-symlinked-directories</CODE>
<DD><A NAME="IDX20"></A>
If set to <SAMP>`on'</SAMP>, completed names which are symbolic links
to directories have a slash appended (subject to the value of
<CODE>mark-directories</CODE>).
The default is <SAMP>`off'</SAMP>.
<P>

<DT><CODE>match-hidden-files</CODE>
<DD><A NAME="IDX21"></A>
This variable, when set to <SAMP>`on'</SAMP>, causes Readline to match files whose
names begin with a <SAMP>`.'</SAMP> (hidden files) when performing filename
completion, unless the leading <SAMP>`.'</SAMP> is
supplied by the user in the filename to be completed.
This variable is <SAMP>`on'</SAMP> by default.
<P>
d661 2
a662 1
<DD><A NAME="IDX22"></A>
a665 8
<P>

<DT><CODE>page-completions</CODE>
<DD><A NAME="IDX23"></A>
If set to <SAMP>`on'</SAMP>, Readline uses an internal <CODE>more</CODE>-like pager
to display a screenful of possible completions at a time.
This variable is <SAMP>`on'</SAMP> by default.
<P>
d668 2
a669 1
<DD>If set to <SAMP>`on'</SAMP>, Readline will display completions with matches
a671 1
<P>
d674 2
a675 1
<DD><A NAME="IDX24"></A>
a680 1
<P>
d683 2
a684 1
<DD><A NAME="IDX25"></A>
a687 1
<P>
a689 1
<P>
d692 2
a693 1
<DD>The syntax for controlling key bindings in the init file is
a697 1
<P>
d699 1
a699 2
Once you know the name of the command, simply place on a line
in the init file the name of the key
d701 3
a703 8
command.  The name of the key
can be expressed in different ways, depending on what you find most
comfortable.
</P><P>

In addition to command names, readline allows keys to be bound
to a string that is inserted when the key is pressed (a <VAR>macro</VAR>).
</P><P>
d706 1
d708 5
a712 2
<DD><VAR>keyname</VAR> is the name of a key spelled out in English.  For example:
<TABLE><tr><td>&nbsp;</td><td class=example><pre>Control-u: universal-argument
d715 1
a715 1
</pre></td></tr></table><P>
d718 1
a718 3
<CODE>universal-argument</CODE>,
<KBD>M-DEL</KBD> is bound to the function <CODE>backward-kill-word</CODE>, and
<KBD>C-o</KBD> is bound to run the macro
a720 17
</P><P>

A number of symbolic character names are recognized while
processing this key binding syntax:
<VAR>DEL</VAR>,
<VAR>ESC</VAR>,
<VAR>ESCAPE</VAR>,
<VAR>LFD</VAR>,
<VAR>NEWLINE</VAR>,
<VAR>RET</VAR>,
<VAR>RETURN</VAR>,
<VAR>RUBOUT</VAR>,
<VAR>SPACE</VAR>,
<VAR>SPC</VAR>,
and
<VAR>TAB</VAR>.
</P><P>
d723 2
a724 1
<DD><VAR>keyseq</VAR> differs from <VAR>keyname</VAR> above in that strings
a728 1
<P>
d730 3
a732 1
<TABLE><tr><td>&nbsp;</td><td class=example><pre>"\C-u": universal-argument
d735 1
a735 1
</pre></td></tr></table></P><P>
d737 1
a737 1
In the above example, <KBD>C-u</KBD> is again bound to the function
a741 1
</P><P>
a743 1
<P>
a746 1
</P><P>
d749 1
d751 2
a752 1
<DD>control prefix
d754 2
a755 1
<DD>meta prefix
d757 2
a758 1
<DD>an escape character
d760 2
a761 1
<DD>backslash
d763 2
a764 1
<DD><KBD>"</KBD>, a double quotation mark
d766 2
a767 1
<DD><KBD>'</KBD>, a single quote or apostrophe
a768 1
<P>
a771 1
</P><P>
d774 1
d776 2
a777 1
<DD>alert (bell)
d779 2
a780 1
<DD>backspace
d782 2
a783 1
<DD>delete
d785 2
a786 1
<DD>form feed
d788 2
a789 1
<DD>newline
d791 2
a792 1
<DD>carriage return
d794 2
a795 1
<DD>horizontal tab
d797 2
a798 1
<DD>vertical tab
d800 6
a805 1
<DD>the eight-bit character whose value is the octal value <VAR>nnn</VAR>
a806 3
<DT><CODE>\x<VAR>HH</VAR></CODE>
<DD>the eight-bit character whose value is the hexadecimal value <VAR>HH</VAR>
(one or two hex digits)
a807 1
<P>
d815 1
a815 1
For example, the following binding will make <SAMP>`<KBD>C-x</KBD> \'</SAMP>
d817 4
a820 2
<TABLE><tr><td>&nbsp;</td><td class=example><pre>"\C-x\\": "\\"
</pre></td></tr></table></P><P>
a822 1
<P>
d824 4
a827 16
<A NAME="Conditional Init Constructs"></A>
<HR SIZE="6">
<A NAME="SEC11"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC10"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC12"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC12"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC9"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC13"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 1.3.2 Conditional Init Constructs </H3>
<!--docid::SEC11::-->
a828 1

a832 1
</P><P>
d834 1
d836 1
d838 2
a839 1
<DD>The <CODE>$if</CODE> construct allows bindings to be made based on the
a842 1
<P>
d845 1
d847 2
a848 1
<DD>The <CODE>mode=</CODE> form of the <CODE>$if</CODE> directive is used to test
a853 1
<P>
d856 2
a857 1
<DD>The <CODE>term=</CODE> form may be used to include terminal-specific
a863 1
<P>
d866 2
a867 1
<DD>The <VAR>application</VAR> construct is used to include
d869 1
a869 2
library sets the <VAR>application name</VAR>, and you can test for
a particular value. 
d873 3
a875 1
<TABLE><tr><td>&nbsp;</td><td class=example><pre>$if Bash
d879 3
a881 2
</pre></td></tr></table></DL>
<P>
d884 2
a885 1
<DD>This command, as seen in the previous example, terminates an
a886 1
<P>
d889 2
a890 1
<DD>Commands in this branch of the <CODE>$if</CODE> directive are executed if
a891 1
<P>
d894 2
a895 1
<DD>This directive takes a single filename as an argument and reads commands
d897 11
a907 21
For example, the following directive reads from <TT>`/etc/inputrc'</TT>:
<TABLE><tr><td>&nbsp;</td><td class=example><pre>$include /etc/inputrc
</pre></td></tr></table></DL>
<P>

<A NAME="Sample Init File"></A>
<HR SIZE="6">
<A NAME="SEC12"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC11"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC13"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC13"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC9"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC13"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 1.3.3 Sample Init File </H3>
<!--docid::SEC12::-->
d909 2
d912 1
a912 3
Here is an example of an <VAR>inputrc</VAR> file.  This illustrates key
binding, variable assignment, and conditional syntax.
</P><P>
d914 4
a917 3
<TABLE><tr><td>&nbsp;</td><td class=example><pre># This file controls the behaviour of line input editing for
# programs that use the GNU Readline library.  Existing
# programs include FTP, Bash, and GDB.
d922 2
a923 2
# First, include any systemwide bindings and variable
# assignments from /etc/Inputrc
d975 1
a975 2
# prepare to type a quoted word --
# insert open and close double quotes
d978 1
a978 2
# insert a backslash (testing backslash escapes
# in sequences and macros)
d994 2
a995 2
# allow iso-latin1 characters to be inserted rather
# than converted to prefix-meta sequences
d998 2
a999 2
# display characters with the eighth bit set directly
# rather than as meta-prefixed characters
d1002 2
a1003 2
# if there are more than 150 possible completions for
# a word, ask the user if he wants to see all of them
d1012 17
a1028 1
</pre></td></tr></table></P><P>
a1029 28
<A NAME="Bindable Readline Commands"></A>
<HR SIZE="6">
<A NAME="SEC13"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC12"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC14"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC22"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC1"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC22"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H2> 1.4 Bindable Readline Commands </H2>
<!--docid::SEC13::-->
<P>

<BLOCKQUOTE><TABLE BORDER=0 CELLSPACING=0> 
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Moving about the line.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Getting at previous lines.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Commands for changing text.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Commands for killing and yanking.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC18">1.4.5 Specifying Numeric Arguments</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Specifying numeric arguments, repeat counts.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Getting Readline to do the typing for you.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC20">1.4.7 Keyboard Macros</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Saving and re-executing typed characters</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Other miscellaneous commands.</TD></TR>
</TABLE></BLOCKQUOTE>
a1030 1

d1033 3
d1037 6
a1042 1
</P><P>
a1043 5
In the following descriptions, <EM>point</EM> refers to the current cursor
position, and <EM>mark</EM> refers to a cursor position saved by the
<CODE>set-mark</CODE> command.
The text between the point and mark is referred to as the <EM>region</EM>.
</P><P>
d1045 1
a1045 16
<A NAME="Commands For Moving"></A>
<HR SIZE="6">
<A NAME="SEC14"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC13"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC15"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC22"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC13"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC22"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 1.4.1 Commands For Moving </H3>
<!--docid::SEC14::-->
d1047 3
a1050 2
<DT><CODE>beginning-of-line (C-a)</CODE>
<DD><A NAME="IDX27"></A>
a1051 1
<P>
a1052 1
<A NAME="IDX28"></A>
d1054 2
a1055 1
<DD><A NAME="IDX29"></A>
a1056 1
<P>
a1057 1
<A NAME="IDX30"></A>
d1059 2
a1060 1
<DD><A NAME="IDX31"></A>
a1061 1
<P>
a1062 1
<A NAME="IDX32"></A>
d1064 2
a1065 1
<DD><A NAME="IDX33"></A>
a1066 1
<P>
a1067 1
<A NAME="IDX34"></A>
d1069 2
a1070 1
<DD><A NAME="IDX35"></A>
a1072 1
<P>
a1073 1
<A NAME="IDX36"></A>
d1075 2
a1076 1
<DD><A NAME="IDX37"></A>
a1078 1
<P>
a1079 1
<A NAME="IDX38"></A>
d1081 2
a1082 1
<DD><A NAME="IDX39"></A>
a1084 1
<P>
a1085 1
<A NAME="IDX40"></A>
d1087 2
a1088 1
<DD><A NAME="IDX41"></A>
a1089 1
<P>
a1091 1
<P>
d1093 3
a1095 17
<A NAME="Commands For History"></A>
<HR SIZE="6">
<A NAME="SEC15"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC14"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC16"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC16"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC13"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC22"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 1.4.2 Commands For Manipulating The History </H3>
<!--docid::SEC15::-->
<P>
a1097 10
<A NAME="IDX42"></A>
<DT><CODE>accept-line (Newline or Return)</CODE>
<DD><A NAME="IDX43"></A>
Accept the line regardless of where the cursor is.
If this line is
non-empty, it may be added to the history list for future recall with
<CODE>add_history()</CODE>.
If this line is a modified history line, the history line is restored
to its original state.
<P>
d1099 7
a1105 1
<A NAME="IDX44"></A>
d1107 3
a1109 3
<DD><A NAME="IDX45"></A>
Move `back' through the history list, fetching the previous command.
<P>
a1110 1
<A NAME="IDX46"></A>
d1112 3
a1114 3
<DD><A NAME="IDX47"></A>
Move `forward' through the history list, fetching the next command.
<P>
a1115 1
<A NAME="IDX48"></A>
d1117 2
a1118 1
<DD><A NAME="IDX49"></A>
a1119 1
<P>
a1120 1
<A NAME="IDX50"></A>
d1122 2
a1123 1
<DD><A NAME="IDX51"></A>
a1125 1
<P>
a1126 1
<A NAME="IDX52"></A>
d1128 2
a1129 1
<DD><A NAME="IDX53"></A>
a1131 1
<P>
a1132 1
<A NAME="IDX54"></A>
d1134 2
a1135 1
<DD><A NAME="IDX55"></A>
a1137 1
<P>
a1138 1
<A NAME="IDX56"></A>
d1140 2
a1141 1
<DD><A NAME="IDX57"></A>
a1144 1
<P>
a1145 1
<A NAME="IDX58"></A>
d1147 2
a1148 1
<DD><A NAME="IDX59"></A>
a1151 1
<P>
a1152 1
<A NAME="IDX60"></A>
d1154 2
a1155 1
<DD><A NAME="IDX61"></A>
a1159 1
<P>
a1160 1
<A NAME="IDX62"></A>
d1162 2
a1163 1
<DD><A NAME="IDX63"></A>
a1166 1
<P>
a1167 1
<A NAME="IDX64"></A>
d1169 2
a1170 1
<DD><A NAME="IDX65"></A>
d1172 1
a1172 2
the second word on the previous line) at point.
With an argument <VAR>n</VAR>,
a1175 1
<P>
d1177 3
a1179 3
<A NAME="IDX66"></A>
<DT><CODE>yank-last-arg (M-. or M-_)</CODE>
<DD><A NAME="IDX67"></A>
a1184 1
<P>
a1186 1
<P>
d1188 3
a1190 17
<A NAME="Commands For Text"></A>
<HR SIZE="6">
<A NAME="SEC16"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC15"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC17"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC17"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC13"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC22"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 1.4.3 Commands For Changing Text </H3>
<!--docid::SEC16::-->
<P>
d1193 1
a1193 1
<A NAME="IDX68"></A>
d1195 3
a1197 2
<DD><A NAME="IDX69"></A>
Delete the character at point.  If point is at the
d1200 1
a1200 2
return EOF.
<P>
a1201 1
<A NAME="IDX70"></A>
d1203 2
a1204 1
<DD><A NAME="IDX71"></A>
a1206 1
<P>
a1207 1
<A NAME="IDX72"></A>
d1209 2
a1210 1
<DD><A NAME="IDX73"></A>
a1213 1
<P>
d1215 3
a1217 3
<A NAME="IDX74"></A>
<DT><CODE>quoted-insert (C-q or C-v)</CODE>
<DD><A NAME="IDX75"></A>
a1219 1
<P>
d1221 3
a1223 3
<A NAME="IDX76"></A>
<DT><CODE>tab-insert (M-<KBD>TAB</KBD>)</CODE>
<DD><A NAME="IDX77"></A>
a1224 1
<P>
d1226 3
a1228 3
<A NAME="IDX78"></A>
<DT><CODE>self-insert (a, b, A, 1, !, <small>...</small>)</CODE>
<DD><A NAME="IDX79"></A>
a1229 1
<P>
a1230 1
<A NAME="IDX80"></A>
d1232 2
a1233 1
<DD><A NAME="IDX81"></A>
a1239 1
<P>
a1240 1
<A NAME="IDX82"></A>
d1242 2
a1243 1
<DD><A NAME="IDX83"></A>
a1245 3
If the insertion point is at the end of the line, this transposes
the last two words on the line.
<P>
a1246 1
<A NAME="IDX84"></A>
d1248 2
a1249 1
<DD><A NAME="IDX85"></A>
a1251 1
<P>
a1252 1
<A NAME="IDX86"></A>
d1254 2
a1255 1
<DD><A NAME="IDX87"></A>
a1257 1
<P>
a1258 1
<A NAME="IDX88"></A>
d1260 2
a1261 1
<DD><A NAME="IDX89"></A>
a1263 1
<P>
d1265 1
a1265 9
<A NAME="IDX90"></A>
<DT><CODE>overwrite-mode ()</CODE>
<DD><A NAME="IDX91"></A>
Toggle overwrite mode.  With an explicit positive numeric argument,
switches to overwrite mode.  With an explicit non-positive numeric
argument, switches to insert mode.  This command affects only
<CODE>emacs</CODE> mode; <CODE>vi</CODE> mode does overwrite differently.
Each call to <CODE>readline()</CODE> starts in insert mode.
<P>
a1266 5
In overwrite mode, characters bound to <CODE>self-insert</CODE> replace
the text at point rather than pushing the text to the right.
Characters bound to <CODE>backward-delete-char</CODE> replace the character
before point with a space.
</P><P>
a1267 2
By default, this command is unbound.
</P><P>
d1269 1
a1269 20
</DL>
<P>

<A NAME="Commands For Killing"></A>
<HR SIZE="6">
<A NAME="SEC17"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC16"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC18"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC18"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC13"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC22"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 1.4.4 Killing And Yanking </H3>
<!--docid::SEC17::-->
<P>
a1272 1
<A NAME="IDX92"></A>
d1274 2
a1275 1
<DD><A NAME="IDX93"></A>
a1276 1
<P>
a1277 1
<A NAME="IDX94"></A>
d1279 2
a1280 1
<DD><A NAME="IDX95"></A>
a1281 1
<P>
a1282 1
<A NAME="IDX96"></A>
d1284 2
a1285 1
<DD><A NAME="IDX97"></A>
a1286 1
<P>
a1287 1
<A NAME="IDX98"></A>
d1289 3
a1291 2
<DD><A NAME="IDX99"></A>
Kill all characters on the current line, no matter where point is.
a1292 1
<P>
a1293 1
<A NAME="IDX100"></A>
d1295 2
a1296 1
<DD><A NAME="IDX101"></A>
a1299 1
<P>
d1301 3
a1303 3
<A NAME="IDX102"></A>
<DT><CODE>backward-kill-word (M-<KBD>DEL</KBD>)</CODE>
<DD><A NAME="IDX103"></A>
a1305 1
<P>
a1306 1
<A NAME="IDX104"></A>
d1308 2
a1309 1
<DD><A NAME="IDX105"></A>
a1311 1
<P>
a1312 1
<A NAME="IDX106"></A>
d1314 2
a1315 1
<DD><A NAME="IDX107"></A>
a1316 1
<P>
a1317 1
<A NAME="IDX108"></A>
d1319 2
a1320 1
<DD><A NAME="IDX109"></A>
a1322 1
<P>
a1323 1
<A NAME="IDX110"></A>
d1325 2
a1326 1
<DD><A NAME="IDX111"></A>
a1328 1
<P>
a1329 1
<A NAME="IDX112"></A>
d1331 2
a1332 1
<DD><A NAME="IDX113"></A>
a1335 1
<P>
a1336 1
<A NAME="IDX114"></A>
d1338 2
a1339 1
<DD><A NAME="IDX115"></A>
a1342 1
<P>
a1343 1
<A NAME="IDX116"></A>
d1345 4
a1348 3
<DD><A NAME="IDX117"></A>
Yank the top of the kill ring into the buffer at point.
<P>
a1349 1
<A NAME="IDX118"></A>
d1351 2
a1352 1
<DD><A NAME="IDX119"></A>
d1354 1
a1354 1
the prior command is <CODE>yank</CODE> or <CODE>yank-pop</CODE>.
a1355 1
<P>
d1357 3
a1359 16
<A NAME="Numeric Arguments"></A>
<HR SIZE="6">
<A NAME="SEC18"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC17"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC19"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC19"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC13"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC22"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 1.4.5 Specifying Numeric Arguments </H3>
<!--docid::SEC18::-->
d1362 3
a1364 3
<A NAME="IDX120"></A>
<DT><CODE>digit-argument (<KBD>M-0</KBD>, <KBD>M-1</KBD>, <small>...</small> <KBD>M--</KBD>)</CODE>
<DD><A NAME="IDX121"></A>
a1366 1
<P>
a1367 1
<A NAME="IDX122"></A>
d1369 2
a1370 1
<DD><A NAME="IDX123"></A>
a1383 1
<P>
d1385 3
a1387 17
<A NAME="Commands For Completion"></A>
<HR SIZE="6">
<A NAME="SEC19"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC18"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC20"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC20"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC13"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC22"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 1.4.6 Letting Readline Type For You </H3>
<!--docid::SEC19::-->
<P>
a1389 7
<A NAME="IDX124"></A>
<DT><CODE>complete (<KBD>TAB</KBD>)</CODE>
<DD><A NAME="IDX125"></A>
Attempt to perform completion on the text before point.
The actual completion performed is application-specific.
The default is filename completion.
<P>
d1391 10
a1400 1
<A NAME="IDX126"></A>
d1402 3
a1404 3
<DD><A NAME="IDX127"></A>
List the possible completions of the text before point.
<P>
a1405 1
<A NAME="IDX128"></A>
d1407 2
a1408 1
<DD><A NAME="IDX129"></A>
a1410 1
<P>
a1411 1
<A NAME="IDX130"></A>
d1413 2
a1414 1
<DD><A NAME="IDX131"></A>
d1419 2
a1420 3
At the end of the list of completions, the bell is rung
(subject to the setting of <CODE>bell-style</CODE>)
and the original text is restored.
d1424 1
a1424 1
This command is intended to be bound to <KBD>TAB</KBD>, but is unbound
a1425 1
<P>
a1426 1
<A NAME="IDX132"></A>
d1428 2
a1429 1
<DD><A NAME="IDX133"></A>
a1434 1
<P>
a1436 1
<P>
d1438 3
a1440 16
<A NAME="Keyboard Macros"></A>
<HR SIZE="6">
<A NAME="SEC20"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC19"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC21"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC21"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC13"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC22"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 1.4.7 Keyboard Macros </H3>
<!--docid::SEC20::-->
a1442 1
<A NAME="IDX134"></A>
d1444 2
a1445 1
<DD><A NAME="IDX135"></A>
a1446 1
<P>
a1447 1
<A NAME="IDX136"></A>
d1449 2
a1450 1
<DD><A NAME="IDX137"></A>
a1452 1
<P>
a1453 1
<A NAME="IDX138"></A>
d1455 2
a1456 1
<DD><A NAME="IDX139"></A>
a1458 1
<P>
a1460 1
<P>
d1462 3
a1464 16
<A NAME="Miscellaneous Commands"></A>
<HR SIZE="6">
<A NAME="SEC21"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC20"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC22"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC22"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC13"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC22"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 1.4.8 Some Miscellaneous Commands </H3>
<!--docid::SEC21::-->
a1466 1
<A NAME="IDX140"></A>
d1468 2
a1469 1
<DD><A NAME="IDX141"></A>
a1471 1
<P>
a1472 1
<A NAME="IDX142"></A>
d1474 2
a1475 1
<DD><A NAME="IDX143"></A>
a1478 1
<P>
d1480 3
a1482 3
<A NAME="IDX144"></A>
<DT><CODE>do-uppercase-version (M-a, M-b, M-<VAR>x</VAR>, <small>...</small>)</CODE>
<DD><A NAME="IDX145"></A>
a1484 1
<P>
d1486 6
a1491 7
<A NAME="IDX146"></A>
<DT><CODE>prefix-meta (<KBD>ESC</KBD>)</CODE>
<DD><A NAME="IDX147"></A>
Metafy the next character typed.  This is for keyboards
without a meta key.  Typing <SAMP>`<KBD>ESC</KBD> f'</SAMP> is equivalent to typing
<KBD>M-f</KBD>.
<P>
d1493 3
a1495 3
<A NAME="IDX148"></A>
<DT><CODE>undo (C-_ or C-x C-u)</CODE>
<DD><A NAME="IDX149"></A>
a1496 1
<P>
a1497 1
<A NAME="IDX150"></A>
d1499 2
a1500 1
<DD><A NAME="IDX151"></A>
a1502 1
<P>
a1503 1
<A NAME="IDX152"></A>
d1505 2
a1506 1
<DD><A NAME="IDX153"></A>
a1507 1
<P>
a1508 1
<A NAME="IDX154"></A>
d1510 3
a1512 2
<DD><A NAME="IDX155"></A>
Set the mark to the point.  If a
a1513 1
<P>
a1514 1
<A NAME="IDX156"></A>
d1516 2
a1517 1
<DD><A NAME="IDX157"></A>
a1519 1
<P>
a1520 1
<A NAME="IDX158"></A>
d1522 2
a1523 1
<DD><A NAME="IDX159"></A>
a1525 1
<P>
a1526 1
<A NAME="IDX160"></A>
d1528 2
a1529 1
<DD><A NAME="IDX161"></A>
a1532 1
<P>
a1533 1
<A NAME="IDX162"></A>
d1535 5
a1539 10
<DD><A NAME="IDX163"></A>
Without a numeric argument, the value of the <CODE>comment-begin</CODE>
variable is inserted at the beginning of the current line.
If a numeric argument is supplied, this command acts as a toggle:  if
the characters at the beginning of the line do not match the value
of <CODE>comment-begin</CODE>, the value is inserted, otherwise
the characters in <CODE>comment-begin</CODE> are deleted from the beginning of
the line.
In either case, the line is accepted as if a newline had been typed.
<P>
a1540 1
<A NAME="IDX164"></A>
d1542 2
a1543 1
<DD><A NAME="IDX165"></A>
a1547 1
<P>
a1548 1
<A NAME="IDX166"></A>
d1550 2
a1551 1
<DD><A NAME="IDX167"></A>
a1555 1
<P>
a1556 1
<A NAME="IDX168"></A>
d1558 2
a1559 1
<DD><A NAME="IDX169"></A>
d1561 1
a1561 1
strings they output.  If a numeric argument is supplied,
a1563 1
<P>
d1565 2
a1566 6
<A NAME="IDX170"></A>
<DT><CODE>emacs-editing-mode (C-e)</CODE>
<DD><A NAME="IDX171"></A>
When in <CODE>vi</CODE> command mode, this causes a switch to <CODE>emacs</CODE>
editing mode.
<P>
a1567 6
<A NAME="IDX172"></A>
<DT><CODE>vi-editing-mode (M-C-j)</CODE>
<DD><A NAME="IDX173"></A>
When in <CODE>emacs</CODE> editing mode, this causes a switch to <CODE>vi</CODE>
editing mode.
<P>
d1569 1
a1569 2
</DL>
<P>
a1570 16
<A NAME="Readline vi Mode"></A>
<HR SIZE="6">
<A NAME="SEC22"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC21"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC23"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[ &lt;&lt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC1"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC23"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H2> 1.5 Readline vi Mode </H2>
<!--docid::SEC22::-->
a1571 1

a1575 1
</P><P>
d1577 2
d1580 1
a1580 2
editing modes, use the command <KBD>M-C-j</KBD> (bound to emacs-editing-mode
when in <CODE>vi</CODE> mode and to vi-editing-mode in <CODE>emacs</CODE> mode).
a1581 1
</P><P>
d1583 2
a1590 1
</P><P>
d1592 1
a1592 4
This document describes the GNU Readline Library, a utility for aiding
in the consitency of user interface across discrete programs that need
to provide a command line interface.
</P><P>
a1593 2
Copyright (C) 1988-2002 Free Software Foundation, Inc.
</P><P>
a1594 10
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
pare preserved on all copies.
</P><P>

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.
</P><P>
d1596 1
a1596 5
Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Foundation.
</P><P>
a1597 16
<A NAME="Programming with GNU Readline"></A>
<HR SIZE="6">
<A NAME="SEC23"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC22"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC24"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[ &lt;&lt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[ &gt;&gt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H1> 2. Programming with GNU Readline </H1>
<!--docid::SEC23::-->
a1598 1

a1603 1
</P><P>
d1605 8
a1612 6
<BLOCKQUOTE><TABLE BORDER=0 CELLSPACING=0> 
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC24">2.1 Basic Behavior</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Using the default behavior of Readline.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC25">2.2 Custom Functions</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Adding your own functions to Readline.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Variables accessible to custom
					functions.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC29">2.4 Readline Convenience Functions</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Functions which Readline supplies to
d1614 10
a1623 23
					functions.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">How Readline behaves when it receives signals.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC44">2.6 Custom Completers</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Supplanting or supplementing Readline's
			completion functions.</TD></TR>
</TABLE></BLOCKQUOTE>
<P>

<A NAME="Basic Behavior"></A>
<HR SIZE="6">
<A NAME="SEC24"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC23"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC25"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[ &lt;&lt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC23"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[ &gt;&gt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H2> 2.1 Basic Behavior </H2>
<!--docid::SEC24::-->
a1624 1

d1629 17
a1645 2
<CODE>gets()</CODE> or <CODE>fgets()</CODE>.
</P><P>
d1647 2
a1648 11
<A NAME="IDX174"></A>
<A NAME="IDX175"></A>
</P><P>

The function <CODE>readline()</CODE> prints a prompt <VAR>prompt</VAR>
and then reads and returns a single line of text from the user.
If <VAR>prompt</VAR> is <CODE>NULL</CODE> or the empty string, no prompt is displayed.
The line <CODE>readline</CODE> returns is allocated with <CODE>malloc()</CODE>;
the caller should <CODE>free()</CODE> the line when it has finished with it.
The declaration for <CODE>readline</CODE> in ANSI C is
</P><P>
d1650 3
a1652 2
<TABLE><tr><td>&nbsp;</td><td class=example><pre><CODE>char *readline (const char *<VAR>prompt</VAR>);</CODE>
</pre></td></tr></table></P><P>
d1654 2
a1655 3
So, one might say
<TABLE><tr><td>&nbsp;</td><td class=example><pre><CODE>char *line = readline ("Enter a line: ");</CODE>
</pre></td></tr></table>in order to read a line of text from the user.
a1657 1
</P><P>
d1659 2
a1663 1
</P><P>
d1665 2
d1668 1
a1668 1
<KBD>C-p</KBD> for example), you must call <CODE>add_history()</CODE> to save the
a1669 1
</P><P>
d1671 5
a1675 2
<TABLE><tr><td>&nbsp;</td><td class=example><pre><CODE>add_history (line)</CODE>;
</pre></td></tr></table></P><P>
d1677 1
a1678 1
</P><P>
d1680 2
d1684 1
a1684 1
a function which usefully replaces the standard <CODE>gets()</CODE> library
a1685 1
</P><P>
d1687 4
a1690 1
<TABLE><tr><td>&nbsp;</td><td class=example><pre>/* A static variable for holding the line. */
d1693 1
a1693 2
/* Read a string, and return a pointer to it.
   Returns NULL on EOF. */
d1697 2
a1698 2
  /* If the buffer has already been allocated,
     return the memory to the free pool. */
d1708 1
a1708 2
  /* If the line has any text in it,
     save it on the history. */
d1714 1
a1714 1
</pre></td></tr></table></P><P>
d1716 1
d1720 3
a1722 2
with <CODE>rl_bind_key()</CODE>.
</P><P>
d1724 3
a1726 2
<TABLE><tr><td>&nbsp;</td><td class=example><pre><CODE>int rl_bind_key (int <VAR>key</VAR>, rl_command_func_t *<VAR>function</VAR>);</CODE>
</pre></td></tr></table></P><P>
d1728 2
a1729 1
<CODE>rl_bind_key()</CODE> takes two arguments: <VAR>key</VAR> is the character that
d1731 1
a1731 1
call when <VAR>key</VAR> is pressed.  Binding <KBD>TAB</KBD> to <CODE>rl_insert()</CODE>
d1733 1
a1733 1
<CODE>rl_bind_key()</CODE> returns non-zero if <VAR>key</VAR> is not a valid
a1734 1
</P><P>
d1736 2
a1738 2
<TABLE><tr><td>&nbsp;</td><td class=example><pre><CODE>rl_bind_key ('\t', rl_insert);</CODE>
</pre></td></tr></table></P><P>
d1740 5
d1746 1
a1746 1
might write a function called <CODE>initialize_readline()</CODE> which
d1748 6
a1753 2
custom completers (see section <A HREF="readline.html#SEC44">2.6 Custom Completers</A>).
</P><P>
a1754 16
<A NAME="Custom Functions"></A>
<HR SIZE="6">
<A NAME="SEC25"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC24"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC26"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC28"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC23"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC28"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H2> 2.2 Custom Functions </H2>
<!--docid::SEC25::-->
a1755 1

a1760 1
</P><P>
d1762 2
a1769 1
</P><P>
d1771 1
a1771 49
<CODE>readline.h</CODE> defines a C preprocessor variable that should
be treated as an integer, <CODE>RL_READLINE_VERSION</CODE>, which may
be used to conditionally compile application code depending on
the installed Readline version.  The value is a hexadecimal
encoding of the major and minor version numbers of the library,
of the form 0x<VAR>MMmm</VAR>.  <VAR>MM</VAR> is the two-digit major
version number; <VAR>mm</VAR> is the two-digit minor version number. 
For Readline 4.2, for example, the value of
<CODE>RL_READLINE_VERSION</CODE> would be <CODE>0x0402</CODE>. 
</P><P>

<BLOCKQUOTE><TABLE BORDER=0 CELLSPACING=0> 
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC26">2.2.1 Readline Typedefs</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">C declarations to make code readable.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC27">2.2.2 Writing a New Function</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Variables and calling conventions.</TD></TR>
</TABLE></BLOCKQUOTE>
<P>

<A NAME="Readline Typedefs"></A>
<HR SIZE="6">
<A NAME="SEC26"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC25"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC27"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC28"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC25"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC28"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 2.2.1 Readline Typedefs </H3>
<!--docid::SEC26::-->
<P>

For readabilty, we declare a number of new object types, all pointers
to functions.
</P><P>

The reason for declaring these new types is to make it easier to write
code describing pointers to C functions with appropriately prototyped
arguments and return values.
</P><P>

For instance, say we want to declare a variable <VAR>func</VAR> as a pointer
to a function which takes two <CODE>int</CODE> arguments and returns an
<CODE>int</CODE> (this is the type of all of the Readline bindable functions).
Instead of the classic C declaration
</P><P>
d1773 4
a1776 2
<CODE>int (*func)();</CODE>
</P><P>
a1777 2
or the ANSI-C style declaration
</P><P>
a1778 2
<CODE>int (*func)(int, int);</CODE>
</P><P>
d1780 1
a1780 2
we may write
</P><P>
d1782 4
a1785 2
<CODE>rl_command_func_t *func;</CODE>
</P><P>
d1787 3
a1789 2
The full list of function pointer types available is
</P><P>
d1791 6
a1796 3
<DL COMPACT>
<DT><CODE>typedef int rl_command_func_t (int, int);</CODE>
<DD><P>
d1798 3
a1800 2
<DT><CODE>typedef char *rl_compentry_func_t (const char *, int);</CODE>
<DD><P>
d1802 3
a1804 2
<DT><CODE>typedef char **rl_completion_func_t (const char *, int, int);</CODE>
<DD><P>
d1806 3
a1808 32
<DT><CODE>typedef char *rl_quote_func_t (char *, int, char *);</CODE>
<DD><P>

<DT><CODE>typedef char *rl_dequote_func_t (char *, int);</CODE>
<DD><P>

<DT><CODE>typedef int rl_compignore_func_t (char **);</CODE>
<DD><P>

<DT><CODE>typedef void rl_compdisp_func_t (char **, int, int);</CODE>
<DD><P>

<DT><CODE>typedef int rl_hook_func_t (void);</CODE>
<DD><P>

<DT><CODE>typedef int rl_getc_func_t (FILE *);</CODE>
<DD><P>

<DT><CODE>typedef int rl_linebuf_func_t (char *, int);</CODE>
<DD><P>

<DT><CODE>typedef int rl_intfunc_t (int);</CODE>
<DD><DT><CODE>#define rl_ivoidfunc_t rl_hook_func_t</CODE>
<DD><DT><CODE>typedef int rl_icpfunc_t (char *);</CODE>
<DD><DT><CODE>typedef int rl_icppfunc_t (char **);</CODE>
<DD><P>

<DT><CODE>typedef void rl_voidfunc_t (void);</CODE>
<DD><DT><CODE>typedef void rl_vintfunc_t (int);</CODE>
<DD><DT><CODE>typedef void rl_vcpfunc_t (char *);</CODE>
<DD><DT><CODE>typedef void rl_vcppfunc_t (char **);</CODE>
<DD><P>
d1810 1
a1810 1
</DL>
d1812 9
a1821 16
<A NAME="Function Writing"></A>
<HR SIZE="6">
<A NAME="SEC27"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC26"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC28"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC28"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC25"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC28"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 2.2.2 Writing a New Function </H3>
<!--docid::SEC27::-->
d1823 4
d1828 4
a1834 1
</P><P>
d1836 2
a1838 1
</P><P>
d1840 5
a1844 2
<TABLE><tr><td>&nbsp;</td><td class=example><pre><CODE>int foo (int count, int key)</CODE>
</pre></td></tr></table></P><P>
d1846 1
a1848 1
</P><P>
d1850 2
a1860 1
</P><P>
d1862 5
a1866 20
A command function should return 0 if its action completes successfully,
and a non-zero value if some error occurs.
</P><P>

<A NAME="Readline Variables"></A>
<HR SIZE="6">
<A NAME="SEC28"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC27"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC29"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC29"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC23"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[ &gt;&gt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H2> 2.3 Readline Variables </H2>
<!--docid::SEC28::-->
a1867 1

a1868 1
</P><P>
d1870 2
a1871 1
<A NAME="IDX176"></A>
d1874 3
a1876 2
<DD>This is the line gathered so far.  You are welcome to modify the
contents of the line, but see <A HREF="readline.html#SEC34">2.4.5 Allowing Undoing</A>.  The
a1879 1
</P><P>
d1881 2
a1882 1
<A NAME="IDX177"></A>
d1885 2
a1886 1
<DD>The offset of the current cursor position in <CODE>rl_line_buffer</CODE>
a1888 1
</P><P>
d1890 2
a1891 1
<A NAME="IDX178"></A>
d1894 2
a1895 1
<DD>The number of characters present in <CODE>rl_line_buffer</CODE>.  When
a1898 1
</P><P>
d1900 2
a1901 1
<A NAME="IDX179"></A>
d1904 2
a1905 1
<DD>The <VAR>mark</VAR> (saved position) in the current line.  If set, the mark
a1907 1
</P><P>
d1909 2
a1910 1
<A NAME="IDX180"></A>
d1913 2
a1914 1
<DD>Setting this to a non-zero value causes Readline to return the current
a1916 1
</P><P>
d1918 2
a1919 10
<A NAME="IDX181"></A>
<DL>
<DT><U>Variable:</U> int <B>rl_num_chars_to_read</B>
<DD>Setting this to a positive value before calling <CODE>readline()</CODE> causes
Readline to return after accepting that many characters, rather
than reading up to a character bound to <CODE>accept-line</CODE>.
</DL>
</P><P>

<A NAME="IDX182"></A>
d1922 2
a1923 1
<DD>Setting this to a value makes it the next keystroke read.  This is a
a1925 1
</P><P>
d1927 2
a1928 10
<A NAME="IDX183"></A>
<DL>
<DT><U>Variable:</U> int <B>rl_dispatching</B>
<DD>Set to a non-zero value if a function is being called from a key binding;
zero otherwise.  Application functions can test this to discover whether
they were called directly or by Readline's dispatching mechanism.
</DL>
</P><P>

<A NAME="IDX184"></A>
d1931 2
a1932 1
<DD>Setting this to a non-zero value causes Readline to completely erase
a1936 1
</P><P>
d1938 2
a1939 1
<A NAME="IDX185"></A>
d1942 3
a1944 4
<DD>The prompt Readline uses.  This is set from the argument to
<CODE>readline()</CODE>, and should not be assigned to directly.
The <CODE>rl_set_prompt()</CODE> function (see section <A HREF="readline.html#SEC35">2.4.6 Redisplay</A>) may
be used to modify the prompt string after calling <CODE>readline()</CODE>.
a1945 1
</P><P>
d1947 2
a1948 1
<A NAME="IDX186"></A>
d1951 2
a1952 1
<DD>If an application wishes to display the prompt itself, rather than have
a1959 1
</P><P>
d1961 2
a1962 1
<A NAME="IDX187"></A>
d1964 3
a1966 2
<DT><U>Variable:</U> const char * <B>rl_library_version</B>
<DD>The version number of this revision of the library.
a1967 1
</P><P>
d1969 2
a1970 1
<A NAME="IDX188"></A>
d1972 3
a1974 6
<DT><U>Variable:</U> int <B>rl_readline_version</B>
<DD>An integer encoding the current version of the library.  The encoding is
of the form 0x<VAR>MMmm</VAR>, where <VAR>MM</VAR> is the two-digit major version
number, and <VAR>mm</VAR> is the two-digit minor version number.
For example, for Readline-4.2, <CODE>rl_readline_version</CODE> would have the
value 0x0402.
a1975 1
</P><P>
d1977 2
a1978 1
<A NAME="IDX189"></A>
d1980 3
a1982 19
<DT><U>Variable:</U> int <B>rl_gnu_readline_p</B>
<DD>Always set to 1, denoting that this is GNU readline rather than some
emulation.
</DL>
</P><P>

<A NAME="IDX190"></A>
<DL>
<DT><U>Variable:</U> const char * <B>rl_terminal_name</B>
<DD>The terminal type, used for initialization.  If not set by the application,
Readline sets this to the value of the <CODE>TERM</CODE> environment variable
the first time it is called.
</DL>
</P><P>

<A NAME="IDX191"></A>
<DL>
<DT><U>Variable:</U> const char * <B>rl_readline_name</B>
<DD>This variable is set to a unique name by each application using Readline.
d1984 1
a1984 1
(see section <A HREF="readline.html#SEC11">1.3.2 Conditional Init Constructs</A>).
a1985 1
</P><P>
d1987 2
a1988 1
<A NAME="IDX192"></A>
d1991 2
a1992 2
<DD>The stdio stream from which Readline reads input.
If <CODE>NULL</CODE>, Readline defaults to <VAR>stdin</VAR>.
a1993 1
</P><P>
d1995 2
a1996 1
<A NAME="IDX193"></A>
d1999 2
a2000 2
<DD>The stdio stream to which Readline performs output.
If <CODE>NULL</CODE>, Readline defaults to <VAR>stdout</VAR>.
a2001 1
</P><P>
d2003 2
a2004 1
<A NAME="IDX194"></A>
d2006 3
a2008 11
<DT><U>Variable:</U> rl_command_func_t * <B>rl_last_func</B>
<DD>The address of the last command function Readline executed.  May be used to
test whether or not a function is being executed twice in succession, for
example.
</DL>
</P><P>

<A NAME="IDX195"></A>
<DL>
<DT><U>Variable:</U> rl_hook_func_t * <B>rl_startup_hook</B>
<DD>If non-zero, this is the address of a function to call just
a2010 1
</P><P>
d2012 2
a2013 1
<A NAME="IDX196"></A>
d2015 3
a2017 2
<DT><U>Variable:</U> rl_hook_func_t * <B>rl_pre_input_hook</B>
<DD>If non-zero, this is the address of a function to call after
a2020 1
</P><P>
d2022 2
a2023 1
<A NAME="IDX197"></A>
d2025 4
a2028 5
<DT><U>Variable:</U> rl_hook_func_t * <B>rl_event_hook</B>
<DD>If non-zero, this is the address of a function to call periodically
when Readline is waiting for terminal input.
By default, this will be called at most ten times a second if there
is no keyboard input.
a2029 1
</P><P>
d2031 2
a2032 1
<A NAME="IDX198"></A>
d2034 3
a2036 2
<DT><U>Variable:</U> rl_getc_func_t * <B>rl_getc_function</B>
<DD>If non-zero, Readline will call indirectly through this pointer
d2038 2
a2039 2
<CODE>rl_getc</CODE>, the default Readline character input function
(see section <A HREF="readline.html#SEC37">2.4.8 Character Input</A>).
a2040 1
</P><P>
d2042 2
a2043 1
<A NAME="IDX199"></A>
d2045 3
a2047 2
<DT><U>Variable:</U> rl_voidfunc_t * <B>rl_redisplay_function</B>
<DD>If non-zero, Readline will call indirectly through this pointer
d2049 2
a2050 2
By default, it is set to <CODE>rl_redisplay</CODE>, the default Readline
redisplay function (see section <A HREF="readline.html#SEC35">2.4.6 Redisplay</A>).
a2051 1
</P><P>
d2053 2
a2054 23
<A NAME="IDX200"></A>
<DL>
<DT><U>Variable:</U> rl_vintfunc_t * <B>rl_prep_term_function</B>
<DD>If non-zero, Readline will call indirectly through this pointer
to initialize the terminal.  The function takes a single argument, an
<CODE>int</CODE> flag that says whether or not to use eight-bit characters.
By default, this is set to <CODE>rl_prep_terminal</CODE>
(see section <A HREF="readline.html#SEC38">2.4.9 Terminal Management</A>).
</DL>
</P><P>

<A NAME="IDX201"></A>
<DL>
<DT><U>Variable:</U> rl_voidfunc_t * <B>rl_deprep_term_function</B>
<DD>If non-zero, Readline will call indirectly through this pointer
to reset the terminal.  This function should undo the effects of
<CODE>rl_prep_term_function</CODE>.
By default, this is set to <CODE>rl_deprep_terminal</CODE>
(see section <A HREF="readline.html#SEC38">2.4.9 Terminal Management</A>).
</DL>
</P><P>

<A NAME="IDX202"></A>
d2057 2
a2058 1
<DD>This variable is set to the keymap (see section <A HREF="readline.html#SEC31">2.4.2 Selecting a Keymap</A>) in which the
a2060 1
</P><P>
d2062 2
a2063 1
<A NAME="IDX203"></A>
d2066 2
a2067 1
<DD>This variable is set to the keymap (see section <A HREF="readline.html#SEC31">2.4.2 Selecting a Keymap</A>) in which the
a2069 1
</P><P>
d2071 20
a2090 6
<A NAME="IDX204"></A>
<DL>
<DT><U>Variable:</U> char * <B>rl_executing_macro</B>
<DD>This variable is set to the text of any currently-executing macro.
</DL>
</P><P>
d2092 1
a2092 8
<A NAME="IDX205"></A>
<DL>
<DT><U>Variable:</U> int <B>rl_readline_state</B>
<DD>A variable with bit values that encapsulate the current Readline state.
A bit is set with the <CODE>RL_SETSTATE</CODE> macro, and unset with the
<CODE>RL_UNSETSTATE</CODE> macro.  Use the <CODE>RL_ISSTATE</CODE> macro to test
whether a particular state bit is set.  Current state bits include:
</P><P>
a2093 125
<DL COMPACT>
<DT><CODE>RL_STATE_NONE</CODE>
<DD>Readline has not yet been called, nor has it begun to intialize.
<DT><CODE>RL_STATE_INITIALIZING</CODE>
<DD>Readline is initializing its internal data structures.
<DT><CODE>RL_STATE_INITIALIZED</CODE>
<DD>Readline has completed its initialization.
<DT><CODE>RL_STATE_TERMPREPPED</CODE>
<DD>Readline has modified the terminal modes to do its own input and redisplay.
<DT><CODE>RL_STATE_READCMD</CODE>
<DD>Readline is reading a command from the keyboard.
<DT><CODE>RL_STATE_METANEXT</CODE>
<DD>Readline is reading more input after reading the meta-prefix character.
<DT><CODE>RL_STATE_DISPATCHING</CODE>
<DD>Readline is dispatching to a command.
<DT><CODE>RL_STATE_MOREINPUT</CODE>
<DD>Readline is reading more input while executing an editing command.
<DT><CODE>RL_STATE_ISEARCH</CODE>
<DD>Readline is performing an incremental history search.
<DT><CODE>RL_STATE_NSEARCH</CODE>
<DD>Readline is performing a non-incremental history search.
<DT><CODE>RL_STATE_SEARCH</CODE>
<DD>Readline is searching backward or forward through the history for a string.
<DT><CODE>RL_STATE_NUMERICARG</CODE>
<DD>Readline is reading a numeric argument.
<DT><CODE>RL_STATE_MACROINPUT</CODE>
<DD>Readline is currently getting its input from a previously-defined keyboard
macro.
<DT><CODE>RL_STATE_MACRODEF</CODE>
<DD>Readline is currently reading characters defining a keyboard macro.
<DT><CODE>RL_STATE_OVERWRITE</CODE>
<DD>Readline is in overwrite mode.
<DT><CODE>RL_STATE_COMPLETING</CODE>
<DD>Readline is performing word completion.
<DT><CODE>RL_STATE_SIGHANDLER</CODE>
<DD>Readline is currently executing the readline signal handler.
<DT><CODE>RL_STATE_UNDOING</CODE>
<DD>Readline is performing an undo.
<DT><CODE>RL_STATE_DONE</CODE>
<DD>Readline has read a key sequence bound to <CODE>accept-line</CODE>
and is about to return the line to the caller.
</DL>
<P>

</DL>
</P><P>

<A NAME="IDX206"></A>
<DL>
<DT><U>Variable:</U> int <B>rl_explicit_arg</B>
<DD>Set to a non-zero value if an explicit numeric argument was specified by
the user.  Only valid in a bindable command function.
</DL>
</P><P>

<A NAME="IDX207"></A>
<DL>
<DT><U>Variable:</U> int <B>rl_numeric_arg</B>
<DD>Set to the value of any numeric argument explicitly specified by the user
before executing the current Readline function.  Only valid in a bindable
command function.
</DL>
</P><P>

<A NAME="IDX208"></A>
<DL>
<DT><U>Variable:</U> int <B>rl_editing_mode</B>
<DD>Set to a value denoting Readline's current editing mode.  A value of
<VAR>1</VAR> means Readline is currently in emacs mode; <VAR>0</VAR>
means that vi mode is active.
</DL>
</P><P>

<A NAME="Readline Convenience Functions"></A>
<HR SIZE="6">
<A NAME="SEC29"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC28"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC30"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC43"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC23"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC43"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H2> 2.4 Readline Convenience Functions </H2>
<!--docid::SEC29::-->
<P>

<BLOCKQUOTE><TABLE BORDER=0 CELLSPACING=0> 
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC30">2.4.1 Naming a Function</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">How to give a function you write a name.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC31">2.4.2 Selecting a Keymap</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Making keymaps.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Changing Keymaps.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC33">2.4.4 Associating Function Names and Bindings</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Translate function names to
						key sequences.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC34">2.4.5 Allowing Undoing</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">How to make your functions undoable.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Functions to control line display.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC36">2.4.7 Modifying Text</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Functions to modify <CODE>rl_line_buffer</CODE>.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC37">2.4.8 Character Input</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Functions to read keyboard input.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC38">2.4.9 Terminal Management</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Functions to manage terminal settings.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Generally useful functions and hooks.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC40">2.4.11 Miscellaneous Functions</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Functions that don't fall into any category.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC41">2.4.12 Alternate Interface</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Using Readline in a `callback' fashion.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC42">2.4.13 A Readline Example</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">An example Readline function.</TD></TR>
</TABLE></BLOCKQUOTE>
<P>

<A NAME="Function Naming"></A>
<HR SIZE="6">
<A NAME="SEC30"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC29"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC31"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC43"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC29"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC43"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 2.4.1 Naming a Function </H3>
<!--docid::SEC30::-->
a2094 1

a2098 1
</P><P>
d2100 5
a2104 2
<TABLE><tr><td>&nbsp;</td><td class=example><pre>Meta-Rubout:	backward-kill-word
</pre></td></tr></table></P><P>
d2106 1
a2110 1
</P><P>
d2112 2
a2113 1
<A NAME="IDX209"></A>
d2115 3
a2117 2
<DT><U>Function:</U> int <B>rl_add_defun</B> <I>(const char *name, rl_command_func_t *function, int key)</I>
<DD>Add <VAR>name</VAR> to the list of named functions.  Make <VAR>function</VAR> be
d2119 1
a2119 1
<VAR>function</VAR> using <CODE>rl_bind_key()</CODE>.
a2120 1
</P><P>
d2122 2
a2128 1
</P><P>
d2130 5
a2134 16
<A NAME="Keymaps"></A>
<HR SIZE="6">
<A NAME="SEC31"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC30"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC32"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC32"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC29"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC43"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 2.4.2 Selecting a Keymap </H3>
<!--docid::SEC31::-->
a2135 1

a2139 1
</P><P>
d2141 2
a2142 1
<A NAME="IDX210"></A>
d2144 4
a2147 4
<DT><U>Function:</U> Keymap <B>rl_make_bare_keymap</B> <I>(void)</I>
<DD>Returns a new, empty keymap.  The space for the keymap is allocated with
<CODE>malloc()</CODE>; the caller should free it by calling
<CODE>rl_discard_keymap()</CODE> when done.
a2148 1
</P><P>
d2150 2
a2151 1
<A NAME="IDX211"></A>
d2154 2
a2155 1
<DD>Return a new keymap which is a copy of <VAR>map</VAR>.
a2156 1
</P><P>
d2158 2
a2159 1
<A NAME="IDX212"></A>
d2161 3
a2163 2
<DT><U>Function:</U> Keymap <B>rl_make_keymap</B> <I>(void)</I>
<DD>Return a new keymap with the printing characters bound to rl_insert,
a2166 1
</P><P>
d2168 2
a2169 1
<A NAME="IDX213"></A>
d2172 2
a2173 1
<DD>Free the storage associated with <VAR>keymap</VAR>.
a2174 1
</P><P>
d2176 2
a2179 1
</P><P>
d2181 2
a2182 1
<A NAME="IDX214"></A>
d2184 3
a2186 2
<DT><U>Function:</U> Keymap <B>rl_get_keymap</B> <I>(void)</I>
<DD>Returns the currently active keymap.
a2187 1
</P><P>
d2189 2
a2190 1
<A NAME="IDX215"></A>
d2193 2
a2194 1
<DD>Makes <VAR>keymap</VAR> the currently active keymap.
a2195 1
</P><P>
d2197 2
a2198 1
<A NAME="IDX216"></A>
d2200 4
a2203 3
<DT><U>Function:</U> Keymap <B>rl_get_keymap_by_name</B> <I>(const char *name)</I>
<DD>Return the keymap matching <VAR>name</VAR>.  <VAR>name</VAR> is one which would
be supplied in a <CODE>set keymap</CODE> inputrc line (see section <A HREF="readline.html#SEC9">1.3 Readline Init File</A>).
a2204 1
</P><P>
d2206 2
a2207 1
<A NAME="IDX217"></A>
d2210 3
a2212 2
<DD>Return the name matching <VAR>keymap</VAR>.  <VAR>name</VAR> is one which would
be supplied in a <CODE>set keymap</CODE> inputrc line (see section <A HREF="readline.html#SEC9">1.3 Readline Init File</A>).
a2213 1
</P><P>
d2215 5
a2219 16
<A NAME="Binding Keys"></A>
<HR SIZE="6">
<A NAME="SEC32"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC31"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC33"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC33"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC29"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC43"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 2.4.3 Binding Keys </H3>
<!--docid::SEC32::-->
d2221 2
a2222 3

Key sequences are associate with functions through the keymap.
Readline has several internal keymaps: <CODE>emacs_standard_keymap</CODE>,
a2226 1
</P><P>
d2228 3
a2230 1
Since <CODE>readline()</CODE> installs a set of default key bindings the first
d2232 1
a2232 1
installed before the first call to <CODE>readline()</CODE> will be overridden.
d2235 1
a2235 2
(see section <A HREF="readline.html#SEC28">2.3 Readline Variables</A>).
</P><P>
d2237 2
a2239 1
</P><P>
d2241 2
a2242 1
<A NAME="IDX218"></A>
d2244 3
a2246 2
<DT><U>Function:</U> int <B>rl_bind_key</B> <I>(int key, rl_command_func_t *function)</I>
<DD>Binds <VAR>key</VAR> to <VAR>function</VAR> in the currently active keymap.
a2248 1
</P><P>
d2250 2
a2251 1
<A NAME="IDX219"></A>
d2253 3
a2255 2
<DT><U>Function:</U> int <B>rl_bind_key_in_map</B> <I>(int key, rl_command_func_t *function, Keymap map)</I>
<DD>Bind <VAR>key</VAR> to <VAR>function</VAR> in <VAR>map</VAR>.  Returns non-zero in the case
a2257 1
</P><P>
d2259 2
a2260 1
<A NAME="IDX220"></A>
d2263 2
a2264 1
<DD>Bind <VAR>key</VAR> to the null function in the currently active keymap.
a2266 1
</P><P>
d2268 2
a2269 1
<A NAME="IDX221"></A>
d2272 2
a2273 1
<DD>Bind <VAR>key</VAR> to the null function in <VAR>map</VAR>.
a2275 1
</P><P>
d2277 2
a2278 1
<A NAME="IDX222"></A>
d2280 3
a2282 2
<DT><U>Function:</U> int <B>rl_unbind_function_in_map</B> <I>(rl_command_func_t *function, Keymap map)</I>
<DD>Unbind all keys that execute <VAR>function</VAR> in <VAR>map</VAR>.
a2283 1
</P><P>
d2285 2
a2286 1
<A NAME="IDX223"></A>
d2288 3
a2290 2
<DT><U>Function:</U> int <B>rl_unbind_command_in_map</B> <I>(const char *command, Keymap map)</I>
<DD>Unbind all keys that are bound to <VAR>command</VAR> in <VAR>map</VAR>.
a2291 1
</P><P>
d2293 2
a2294 1
<A NAME="IDX224"></A>
d2296 3
a2298 11
<DT><U>Function:</U> int <B>rl_set_key</B> <I>(const char *keyseq, rl_command_func_t *function, Keymap map)</I>
<DD>Bind the key sequence represented by the string <VAR>keyseq</VAR> to the function
<VAR>function</VAR>.  This makes new keymaps as
necessary.  The initial keymap in which to do bindings is <VAR>map</VAR>.
</DL>
</P><P>

<A NAME="IDX225"></A>
<DL>
<DT><U>Function:</U> int <B>rl_generic_bind</B> <I>(int type, const char *keyseq, char *data, Keymap map)</I>
<DD>Bind the key sequence represented by the string <VAR>keyseq</VAR> to the arbitrary
a2303 1
</P><P>
d2305 2
a2306 1
<A NAME="IDX226"></A>
d2309 2
a2310 1
<DD>Parse <VAR>line</VAR> as if it had been read from the <CODE>inputrc</CODE> file and
d2312 1
a2312 1
(see section <A HREF="readline.html#SEC9">1.3 Readline Init File</A>).
a2313 1
</P><P>
d2315 2
a2316 1
<A NAME="IDX227"></A>
d2318 11
a2328 22
<DT><U>Function:</U> int <B>rl_read_init_file</B> <I>(const char *filename)</I>
<DD>Read keybindings and variable assignments from <VAR>filename</VAR>
(see section <A HREF="readline.html#SEC9">1.3 Readline Init File</A>).
</DL>
</P><P>

<A NAME="Associating Function Names and Bindings"></A>
<HR SIZE="6">
<A NAME="SEC33"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC32"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC34"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC34"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC29"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC43"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 2.4.4 Associating Function Names and Bindings </H3>
<!--docid::SEC33::-->
a2329 1

d2331 1
a2331 3
and the functions invoked by a particular key sequence.  You may also
associate a new function name with an arbitrary function.
</P><P>
d2333 2
a2334 1
<A NAME="IDX228"></A>
d2336 3
a2338 2
<DT><U>Function:</U> rl_command_func_t * <B>rl_named_function</B> <I>(const char *name)</I>
<DD>Return the function with name <VAR>name</VAR>.
a2339 1
</P><P>
d2341 2
a2342 1
<A NAME="IDX229"></A>
d2344 6
a2349 5
<DT><U>Function:</U> rl_command_func_t * <B>rl_function_of_keyseq</B> <I>(const char *keyseq, Keymap map, int *type)</I>
<DD>Return the function invoked by <VAR>keyseq</VAR> in keymap <VAR>map</VAR>.
If <VAR>map</VAR> is <CODE>NULL</CODE>, the current keymap is used.  If <VAR>type</VAR> is
not <CODE>NULL</CODE>, the type of the object is returned in the <CODE>int</CODE> variable
it points to (one of <CODE>ISFUNC</CODE>, <CODE>ISKMAP</CODE>, or <CODE>ISMACR</CODE>).
a2350 1
</P><P>
d2352 2
a2353 1
<A NAME="IDX230"></A>
d2355 3
a2357 2
<DT><U>Function:</U> char ** <B>rl_invoking_keyseqs</B> <I>(rl_command_func_t *function)</I>
<DD>Return an array of strings representing the key sequences used to
a2359 1
</P><P>
d2361 2
a2362 1
<A NAME="IDX231"></A>
d2364 3
a2366 2
<DT><U>Function:</U> char ** <B>rl_invoking_keyseqs_in_map</B> <I>(rl_command_func_t *function, Keymap map)</I>
<DD>Return an array of strings representing the key sequences used to
a2368 1
</P><P>
d2370 2
a2371 1
<A NAME="IDX232"></A>
d2374 2
a2375 1
<DD>Print the readline function names and the key sequences currently
a2379 1
</P><P>
d2381 2
a2382 1
<A NAME="IDX233"></A>
d2384 3
a2386 2
<DT><U>Function:</U> void <B>rl_list_funmap_names</B> <I>(void)</I>
<DD>Print the names of all bindable Readline functions to <CODE>rl_outstream</CODE>.
a2387 1
</P><P>
d2389 2
a2390 1
<A NAME="IDX234"></A>
d2392 3
a2394 2
<DT><U>Function:</U> const char ** <B>rl_funmap_names</B> <I>(void)</I>
<DD>Return a NULL terminated array of known function names.  The array is
d2396 1
a2396 1
should <CODE>free()</CODE> the array when you are done, but not the pointers.
a2397 1
</P><P>
d2399 5
a2403 24
<A NAME="IDX235"></A>
<DL>
<DT><U>Function:</U> int <B>rl_add_funmap_entry</B> <I>(const char *name, rl_command_func_t *function)</I>
<DD>Add <VAR>name</VAR> to the list of bindable Readline command names, and make
<VAR>function</VAR> the function to be called when <VAR>name</VAR> is invoked.
</DL>
</P><P>

<A NAME="Allowing Undoing"></A>
<HR SIZE="6">
<A NAME="SEC34"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC33"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC35"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC35"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC29"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC43"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 2.4.5 Allowing Undoing </H3>
<!--docid::SEC34::-->
a2404 1

d2407 2
a2408 2
something if you know you can undo it.
</P><P>
d2410 2
d2413 1
a2413 1
uses <CODE>rl_insert_text()</CODE> or <CODE>rl_delete_text()</CODE> to do it, then
a2414 1
</P><P>
d2416 2
d2420 2
a2421 3
This is done with <CODE>rl_begin_undo_group()</CODE> and
<CODE>rl_end_undo_group()</CODE>.
</P><P>
d2423 2
a2425 1
</P><P>
d2427 1
a2427 2
<TABLE><tr><td>&nbsp;</td><td class=smallexample><FONT SIZE=-1><pre>enum undo_code { UNDO_DELETE, UNDO_INSERT, UNDO_BEGIN, UNDO_END }; 
</FONT></pre></td></tr></table></P><P>
d2429 5
d2436 3
a2438 4
tells what to undo, not how to undo it.  <CODE>UNDO_BEGIN</CODE> and
<CODE>UNDO_END</CODE> are tags added by <CODE>rl_begin_undo_group()</CODE> and
<CODE>rl_end_undo_group()</CODE>.
</P><P>
d2440 2
a2441 1
<A NAME="IDX236"></A>
d2443 6
a2448 5
<DT><U>Function:</U> int <B>rl_begin_undo_group</B> <I>(void)</I>
<DD>Begins saving undo information in a group construct.  The undo
information usually comes from calls to <CODE>rl_insert_text()</CODE> and
<CODE>rl_delete_text()</CODE>, but could be the result of calls to
<CODE>rl_add_undo()</CODE>.
a2449 1
</P><P>
d2451 2
a2452 1
<A NAME="IDX237"></A>
d2454 5
a2458 4
<DT><U>Function:</U> int <B>rl_end_undo_group</B> <I>(void)</I>
<DD>Closes the current undo group started with <CODE>rl_begin_undo_group
()</CODE>.  There should be one call to <CODE>rl_end_undo_group()</CODE>
for each call to <CODE>rl_begin_undo_group()</CODE>.
a2459 1
</P><P>
d2461 2
a2462 1
<A NAME="IDX238"></A>
d2465 2
a2466 1
<DD>Remember how to undo an event (according to <VAR>what</VAR>).  The affected
a2468 1
</P><P>
d2470 2
a2471 1
<A NAME="IDX239"></A>
d2473 3
a2475 2
<DT><U>Function:</U> void <B>rl_free_undo_list</B> <I>(void)</I>
<DD>Free the existing undo list.
a2476 1
</P><P>
d2478 2
a2479 1
<A NAME="IDX240"></A>
d2481 3
a2483 2
<DT><U>Function:</U> int <B>rl_do_undo</B> <I>(void)</I>
<DD>Undo the first thing on the undo list.  Returns <CODE>0</CODE> if there was
a2485 1
</P><P>
d2487 2
d2490 1
a2490 1
existing text (e.g., change its case), call <CODE>rl_modifying()</CODE>
a2492 1
</P><P>
d2494 2
a2495 1
<A NAME="IDX241"></A>
d2498 2
a2499 1
<DD>Tell Readline to save the text between <VAR>start</VAR> and <VAR>end</VAR> as a
a2502 1
</P><P>
d2504 5
a2508 16
<A NAME="Redisplay"></A>
<HR SIZE="6">
<A NAME="SEC35"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC34"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC36"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC36"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC29"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC43"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 2.4.6 Redisplay </H3>
<!--docid::SEC35::-->
a2509 2

<A NAME="IDX242"></A>
d2511 3
a2513 2
<DT><U>Function:</U> void <B>rl_redisplay</B> <I>(void)</I>
<DD>Change what's displayed on the screen to reflect the current contents
a2515 1
</P><P>
d2517 2
a2518 1
<A NAME="IDX243"></A>
d2520 3
a2522 2
<DT><U>Function:</U> int <B>rl_forced_update_display</B> <I>(void)</I>
<DD>Force the line to be updated and redisplayed, whether or not
a2524 1
</P><P>
d2526 2
a2527 1
<A NAME="IDX244"></A>
d2529 3
a2531 2
<DT><U>Function:</U> int <B>rl_on_new_line</B> <I>(void)</I>
<DD>Tell the update functions that we have moved onto a new (empty) line,
a2533 1
</P><P>
d2535 2
a2536 1
<A NAME="IDX245"></A>
d2538 3
a2540 2
<DT><U>Function:</U> int <B>rl_on_new_line_with_prompt</B> <I>(void)</I>
<DD>Tell the update functions that we have moved onto a new line, with
a2546 1
</P><P>
d2548 2
a2549 1
<A NAME="IDX246"></A>
d2551 3
a2553 2
<DT><U>Function:</U> int <B>rl_reset_line_state</B> <I>(void)</I>
<DD>Reset the display state to a clean state and redisplay the current line
a2555 19
</P><P>

<A NAME="IDX247"></A>
<DL>
<DT><U>Function:</U> int <B>rl_crlf</B> <I>(void)</I>
<DD>Move the cursor to the start of the next screen line.
</DL>
</P><P>

<A NAME="IDX248"></A>
<DL>
<DT><U>Function:</U> int <B>rl_show_char</B> <I>(int c)</I>
<DD>Display character <VAR>c</VAR> on <CODE>rl_outstream</CODE>.
If Readline has not been set to display meta characters directly, this
will convert meta characters to a meta-prefixed key sequence.
This is intended for use by applications which wish to do their own
redisplay.
</DL>
</P><P>
d2557 2
a2558 1
<A NAME="IDX249"></A>
d2560 4
a2563 5
<DT><U>Function:</U> int <B>rl_message</B> <I>(const char *, <small>...</small>)</I>
<DD>The arguments are a format string as would be supplied to <CODE>printf</CODE>,
possibly containing conversion specifications such as <SAMP>`%d'</SAMP>, and
any additional arguments necessary to satisfy the conversion specifications.
The resulting string is displayed in the <EM>echo area</EM>.  The echo area
a2565 1
</P><P>
d2567 2
a2568 1
<A NAME="IDX250"></A>
d2570 3
a2572 2
<DT><U>Function:</U> int <B>rl_clear_message</B> <I>(void)</I>
<DD>Clear the message in the echo area.
a2573 1
</P><P>
d2575 2
a2576 1
<A NAME="IDX251"></A>
d2578 4
a2581 3
<DT><U>Function:</U> void <B>rl_save_prompt</B> <I>(void)</I>
<DD>Save the local Readline prompt display state in preparation for
displaying a new message in the message area with <CODE>rl_message()</CODE>.
a2582 1
</P><P>
d2584 2
a2585 1
<A NAME="IDX252"></A>
d2587 3
a2589 2
<DT><U>Function:</U> void <B>rl_restore_prompt</B> <I>(void)</I>
<DD>Restore the local Readline prompt display state saved by the most
a2591 1
</P><P>
d2593 6
a2598 1
<A NAME="IDX253"></A>
d2600 3
a2602 43
<DT><U>Function:</U> int <B>rl_expand_prompt</B> <I>(char *prompt)</I>
<DD>Expand any special character sequences in <VAR>prompt</VAR> and set up the
local Readline prompt redisplay variables.
This function is called by <CODE>readline()</CODE>.  It may also be called to
expand the primary prompt if the <CODE>rl_on_new_line_with_prompt()</CODE>
function or <CODE>rl_already_prompted</CODE> variable is used.
It returns the number of visible characters on the last line of the
(possibly multi-line) prompt.
</DL>
</P><P>

<A NAME="IDX254"></A>
<DL>
<DT><U>Function:</U> int <B>rl_set_prompt</B> <I>(const char *prompt)</I>
<DD>Make Readline use <VAR>prompt</VAR> for subsequent redisplay.  This calls
<CODE>rl_expand_prompt()</CODE> to expand the prompt and sets <CODE>rl_prompt</CODE>
to the result.
</DL>
</P><P>

<A NAME="Modifying Text"></A>
<HR SIZE="6">
<A NAME="SEC36"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC35"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC37"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC37"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC29"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC43"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 2.4.7 Modifying Text </H3>
<!--docid::SEC36::-->
<P>

<A NAME="IDX255"></A>
<DL>
<DT><U>Function:</U> int <B>rl_insert_text</B> <I>(const char *text)</I>
<DD>Insert <VAR>text</VAR> into the line at the current cursor position.
Returns the number of characters inserted.
a2603 1
</P><P>
d2605 2
a2606 1
<A NAME="IDX256"></A>
d2609 2
a2610 2
<DD>Delete the text between <VAR>start</VAR> and <VAR>end</VAR> in the current line.
Returns the number of characters deleted.
a2611 1
</P><P>
d2613 2
a2614 1
<A NAME="IDX257"></A>
d2617 2
a2618 1
<DD>Return a copy of the text between <VAR>start</VAR> and <VAR>end</VAR> in
a2620 1
</P><P>
d2622 2
a2623 1
<A NAME="IDX258"></A>
d2626 2
a2627 1
<DD>Copy the text between <VAR>start</VAR> and <VAR>end</VAR> in the current line
a2633 1
</P><P>
d2635 1
a2635 46
<A NAME="IDX259"></A>
<DL>
<DT><U>Function:</U> int <B>rl_push_macro_input</B> <I>(char *macro)</I>
<DD>Cause <VAR>macro</VAR> to be inserted into the line, as if it had been invoked
by a key bound to a macro.  Not especially useful; use
<CODE>rl_insert_text()</CODE> instead.
</DL>
</P><P>

<A NAME="Character Input"></A>
<HR SIZE="6">
<A NAME="SEC37"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC36"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC38"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC38"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC29"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC43"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 2.4.8 Character Input </H3>
<!--docid::SEC37::-->
<P>

<A NAME="IDX260"></A>
<DL>
<DT><U>Function:</U> int <B>rl_read_key</B> <I>(void)</I>
<DD>Return the next character available from Readline's current input stream.
This handles input inserted into
the input stream via <VAR>rl_pending_input</VAR> (see section <A HREF="readline.html#SEC28">2.3 Readline Variables</A>)
and <CODE>rl_stuff_char()</CODE>, macros, and characters read from the keyboard.
While waiting for input, this function will call any function assigned to
the <CODE>rl_event_hook</CODE> variable.
</DL>
</P><P>

<A NAME="IDX261"></A>
<DL>
<DT><U>Function:</U> int <B>rl_getc</B> <I>(FILE *stream)</I>
<DD>Return the next character available from <VAR>stream</VAR>, which is assumed to
be the keyboard.
</DL>
</P><P>
a2636 10
<A NAME="IDX262"></A>
<DL>
<DT><U>Function:</U> int <B>rl_stuff_char</B> <I>(int c)</I>
<DD>Insert <VAR>c</VAR> into the Readline input stream.  It will be "read"
before Readline attempts to read characters from the terminal with
<CODE>rl_read_key()</CODE>.  Up to 512 characters may be pushed back.
<CODE>rl_stuff_char</CODE> returns 1 if the character was successfully inserted;
0 otherwise.
</DL>
</P><P>
d2638 1
a2638 7
<A NAME="IDX263"></A>
<DL>
<DT><U>Function:</U> int <B>rl_execute_next</B> <I>(int c)</I>
<DD>Make <VAR>c</VAR> be the next command to be executed when <CODE>rl_read_key()</CODE>
is called.  This sets <VAR>rl_pending_input</VAR>.
</DL>
</P><P>
d2640 1
a2640 1
<A NAME="IDX264"></A>
d2642 5
a2646 4
<DT><U>Function:</U> int <B>rl_clear_pending_input</B> <I>(void)</I>
<DD>Unset <VAR>rl_pending_input</VAR>, effectively negating the effect of any
previous call to <CODE>rl_execute_next()</CODE>.  This works only if the
pending input has not already been read with <CODE>rl_read_key()</CODE>.
a2647 1
</P><P>
d2649 2
a2650 1
<A NAME="IDX265"></A>
d2652 3
a2654 5
<DT><U>Function:</U> int <B>rl_set_keyboard_input_timeout</B> <I>(int u)</I>
<DD>While waiting for keyboard input in <CODE>rl_read_key()</CODE>, Readline will
wait for <VAR>u</VAR> microseconds for input before calling any function
assigned to <CODE>rl_event_hook</CODE>.  The default waiting period is
one-tenth of a second.  Returns the old timeout value.
a2655 1
</P><P>
d2657 1
a2657 16
<A NAME="Terminal Management"></A>
<HR SIZE="6">
<A NAME="SEC38"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC37"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC39"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC43"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC29"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC43"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 2.4.9 Terminal Management </H3>
<!--docid::SEC38::-->
a2658 2

<A NAME="IDX266"></A>
d2660 5
a2664 5
<DT><U>Function:</U> void <B>rl_prep_terminal</B> <I>(int meta_flag)</I>
<DD>Modify the terminal settings for Readline's use, so <CODE>readline()</CODE>
can read a single character at a time from the keyboard.
The <VAR>meta_flag</VAR> argument should be non-zero if Readline should
read eight-bit input.
a2665 1
</P><P>
d2667 2
a2668 1
<A NAME="IDX267"></A>
d2670 4
a2673 4
<DT><U>Function:</U> void <B>rl_deprep_terminal</B> <I>(void)</I>
<DD>Undo the effects of <CODE>rl_prep_terminal()</CODE>, leaving the terminal in
the state in which it was before the most recent call to
<CODE>rl_prep_terminal()</CODE>.
a2674 1
</P><P>
d2676 2
a2677 1
<A NAME="IDX268"></A>
d2679 3
a2681 4
<DT><U>Function:</U> void <B>rl_tty_set_default_bindings</B> <I>(Keymap kmap)</I>
<DD>Read the operating system's terminal editing characters (as would be displayed
by <CODE>stty</CODE>) to their Readline equivalents.  The bindings are performed
in <VAR>kmap</VAR>.
a2682 1
</P><P>
d2684 2
a2685 1
<A NAME="IDX269"></A>
d2687 3
a2689 2
<DT><U>Function:</U> int <B>rl_reset_terminal</B> <I>(const char *terminal_name)</I>
<DD>Reinitialize Readline's idea of the terminal settings using
d2691 1
a2691 1
If <VAR>terminal_name</VAR> is <CODE>NULL</CODE>, the value of the <CODE>TERM</CODE>
a2693 1
</P><P>
d2695 2
a2696 29
<A NAME="Utility Functions"></A>
<HR SIZE="6">
<A NAME="SEC39"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC38"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC40"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC31"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC29"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC43"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 2.4.10 Utility Functions </H3>
<!--docid::SEC39::-->
<P>

<A NAME="IDX270"></A>
<DL>
<DT><U>Function:</U> void <B>rl_replace_line</B> <I>(const char *text, int clear_undo)</I>
<DD>Replace the contents of <CODE>rl_line_buffer</CODE> with <VAR>text</VAR>.
The point and mark are preserved, if possible.
If <VAR>clear_undo</VAR> is non-zero, the undo list associated with the
current line is cleared.
</DL>
</P><P>

<A NAME="IDX271"></A>
d2698 3
a2700 3
<DT><U>Function:</U> int <B>rl_extend_line_buffer</B> <I>(int len)</I>
<DD>Ensure that <CODE>rl_line_buffer</CODE> has enough space to hold <VAR>len</VAR>
characters, possibly reallocating it if necessary.
a2701 1
</P><P>
d2703 2
a2704 1
<A NAME="IDX272"></A>
d2706 3
a2708 4
<DT><U>Function:</U> int <B>rl_initialize</B> <I>(void)</I>
<DD>Initialize or re-initialize Readline's internal state.
It's not strictly necessary to call this; <CODE>readline()</CODE> calls it before
reading any input.
a2709 1
</P><P>
d2711 2
a2712 1
<A NAME="IDX273"></A>
d2714 3
a2716 2
<DT><U>Function:</U> int <B>rl_ding</B> <I>(void)</I>
<DD>Ring the terminal bell, obeying the setting of <CODE>bell-style</CODE>.
a2717 1
</P><P>
d2719 2
a2720 8
<A NAME="IDX274"></A>
<DL>
<DT><U>Function:</U> int <B>rl_alphabetic</B> <I>(int c)</I>
<DD>Return 1 if <VAR>c</VAR> is an alphabetic character.
</DL>
</P><P>

<A NAME="IDX275"></A>
d2723 2
a2724 1
<DD>A convenience function for displaying a list of strings in
d2730 1
a2730 1
matches are displayed (see section <A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A>).
a2731 1
</P><P>
d2733 3
a2735 3
The following are implemented as macros, defined in <CODE>chardefs.h</CODE>.
Applications should refrain from using them.
</P><P>
d2737 2
a2738 1
<A NAME="IDX276"></A>
d2740 3
a2742 2
<DT><U>Function:</U> int <B>_rl_uppercase_p</B> <I>(int c)</I>
<DD>Return 1 if <VAR>c</VAR> is an uppercase alphabetic character.
a2743 1
</P><P>
d2745 2
a2746 1
<A NAME="IDX277"></A>
d2748 3
a2750 2
<DT><U>Function:</U> int <B>_rl_lowercase_p</B> <I>(int c)</I>
<DD>Return 1 if <VAR>c</VAR> is a lowercase alphabetic character.
a2751 1
</P><P>
d2753 2
a2754 1
<A NAME="IDX278"></A>
d2756 3
a2758 2
<DT><U>Function:</U> int <B>_rl_digit_p</B> <I>(int c)</I>
<DD>Return 1 if <VAR>c</VAR> is a numeric character.
a2759 1
</P><P>
d2761 2
a2762 1
<A NAME="IDX279"></A>
d2764 3
a2766 2
<DT><U>Function:</U> int <B>_rl_to_upper</B> <I>(int c)</I>
<DD>If <VAR>c</VAR> is a lowercase alphabetic character, return the corresponding
a2768 1
</P><P>
d2770 2
a2771 1
<A NAME="IDX280"></A>
d2773 3
a2775 2
<DT><U>Function:</U> int <B>_rl_to_lower</B> <I>(int c)</I>
<DD>If <VAR>c</VAR> is an uppercase alphabetic character, return the corresponding
a2777 1
</P><P>
d2779 2
a2780 1
<A NAME="IDX281"></A>
d2782 3
a2784 2
<DT><U>Function:</U> int <B>_rl_digit_value</B> <I>(int c)</I>
<DD>If <VAR>c</VAR> is a number, return the value it represents.
a2785 1
</P><P>
d2787 5
a2791 94
<A NAME="Miscellaneous Functions"></A>
<HR SIZE="6">
<A NAME="SEC40"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC39"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC41"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC31"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC29"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC43"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 2.4.11 Miscellaneous Functions </H3>
<!--docid::SEC40::-->
<P>

<A NAME="IDX282"></A>
<DL>
<DT><U>Function:</U> int <B>rl_macro_bind</B> <I>(const char *keyseq, const char *macro, Keymap map)</I>
<DD>Bind the key sequence <VAR>keyseq</VAR> to invoke the macro <VAR>macro</VAR>.
The binding is performed in <VAR>map</VAR>.  When <VAR>keyseq</VAR> is invoked, the
<VAR>macro</VAR> will be inserted into the line.  This function is deprecated;
use <CODE>rl_generic_bind()</CODE> instead.
</DL>
</P><P>

<A NAME="IDX283"></A>
<DL>
<DT><U>Function:</U> void <B>rl_macro_dumper</B> <I>(int readable)</I>
<DD>Print the key sequences bound to macros and their values, using
the current keymap, to <CODE>rl_outstream</CODE>.
If <VAR>readable</VAR> is non-zero, the list is formatted in such a way
that it can be made part of an <CODE>inputrc</CODE> file and re-read.
</DL>
</P><P>

<A NAME="IDX284"></A>
<DL>
<DT><U>Function:</U> int <B>rl_variable_bind</B> <I>(const char *variable, const char *value)</I>
<DD>Make the Readline variable <VAR>variable</VAR> have <VAR>value</VAR>.
This behaves as if the readline command
<SAMP>`set <VAR>variable</VAR> <VAR>value</VAR>'</SAMP> had been executed in an <CODE>inputrc</CODE>
file (see section <A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A>).
</DL>
</P><P>

<A NAME="IDX285"></A>
<DL>
<DT><U>Function:</U> void <B>rl_variable_dumper</B> <I>(int readable)</I>
<DD>Print the readline variable names and their current values
to <CODE>rl_outstream</CODE>.
If <VAR>readable</VAR> is non-zero, the list is formatted in such a way
that it can be made part of an <CODE>inputrc</CODE> file and re-read.
</DL>
</P><P>

<A NAME="IDX286"></A>
<DL>
<DT><U>Function:</U> int <B>rl_set_paren_blink_timeout</B> <I>(int u)</I>
<DD>Set the time interval (in microseconds) that Readline waits when showing
a balancing character when <CODE>blink-matching-paren</CODE> has been enabled.
</DL>
</P><P>

<A NAME="IDX287"></A>
<DL>
<DT><U>Function:</U> char * <B>rl_get_termcap</B> <I>(const char *cap)</I>
<DD>Retrieve the string value of the termcap capability <VAR>cap</VAR>.
Readline fetches the termcap entry for the current terminal name and
uses those capabilities to move around the screen line and perform other
terminal-specific operations, like erasing a line.  Readline does not
use all of a terminal's capabilities, and this function will return
values for only those capabilities Readline uses.
</DL>
</P><P>

<A NAME="Alternate Interface"></A>
<HR SIZE="6">
<A NAME="SEC41"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC40"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC42"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC31"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC29"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC43"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 2.4.12 Alternate Interface </H3>
<!--docid::SEC41::-->
a2792 1

a2798 1
</P><P>
d2800 2
a2801 1
<A NAME="IDX288"></A>
d2803 3
a2805 2
<DT><U>Function:</U> void <B>rl_callback_handler_install</B> <I>(const char *prompt, rl_vcpfunc_t *lhandler)</I>
<DD>Set up the terminal for readline I/O and display the initial
d2807 1
a2807 2
use as a function to call when a complete line of input has been entered.
The function takes the text of the line as an argument.
a2808 1
</P><P>
d2810 2
a2811 1
<A NAME="IDX289"></A>
d2813 3
a2815 2
<DT><U>Function:</U> void <B>rl_callback_read_char</B> <I>(void)</I>
<DD>Whenever an application determines that keyboard input is available, it
d2817 4
a2820 10
character from the current input source.
If that character completes the line, <CODE>rl_callback_read_char</CODE> will
invoke the <VAR>lhandler</VAR> function saved by <CODE>rl_callback_handler_install</CODE>
to process the line.
Before calling the <VAR>lhandler</VAR> function, the terminal settings are
reset to the values they had before calling
<CODE>rl_callback_handler_install</CODE>.
If the <VAR>lhandler</VAR> function returns,
the terminal settings are modified for Readline's use again.
<CODE>EOF</CODE> is  indicated by calling <VAR>lhandler</VAR> with a
a2822 1
</P><P>
d2824 2
a2825 1
<A NAME="IDX290"></A>
d2827 3
a2829 2
<DT><U>Function:</U> void <B>rl_callback_handler_remove</B> <I>(void)</I>
<DD>Restore the terminal to its initial state and remove the line handler.
d2831 7
a2837 23
If the <VAR>lhandler</VAR> installed by <CODE>rl_callback_handler_install</CODE>
does not exit the program, either this function or the function referred
to by the value of <CODE>rl_deprep_term_function</CODE> should be called before
the program exits to reset the terminal settings.
</DL>
</P><P>

<A NAME="A Readline Example"></A>
<HR SIZE="6">
<A NAME="SEC42"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC41"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC43"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC31"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC29"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC43"> &gt;&gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 2.4.13 A Readline Example </H3>
<!--docid::SEC42::-->
a2838 1

a2844 1
</P><P>
d2846 4
a2849 1
<TABLE><tr><td>&nbsp;</td><td class=example><pre>/* Invert the case of the COUNT following characters. */
d2888 2
a2889 2
  /* Tell readline that we are modifying the line,
     so it will save the undo information. */
d2894 4
a2897 4
      if (_rl_uppercase_p (rl_line_buffer[i]))
        rl_line_buffer[i] = _rl_to_lower (rl_line_buffer[i]);
      else if (_rl_lowercase_p (rl_line_buffer[i]))
        rl_line_buffer[i] = _rl_to_upper (rl_line_buffer[i]);
d2903 5
a2907 1
</pre></td></tr></table></P><P>
a2908 16
<A NAME="Readline Signal Handling"></A>
<HR SIZE="6">
<A NAME="SEC43"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC42"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC44"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC44"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC23"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[ &gt;&gt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H2> 2.5 Readline Signal Handling </H2>
<!--docid::SEC43::-->
a2909 1

d2912 7
a2918 8
exceptional events, like a user pressing the interrupt key on his terminal,
or a network connection being broken.  There is a class of signals that can
be sent to the process currently reading input from the keyboard.  Since
Readline changes the terminal attributes when it is called, it needs to
perform special processing when such a signal is received in order to
restore the terminal to a sane state, or provide application writers with
functions to do so manually. 
</P><P>
d2920 2
d2927 2
a2928 2
<CODE>readline()</CODE> was called, reset the signal handling to what it was
before <CODE>readline()</CODE> was called, and resend the signal to the calling
d2934 1
a2934 2
aborted (see the description of <CODE>rl_free_line_state()</CODE> below).
</P><P>
d2936 2
d2941 2
a2942 2
handler updates Readline's internal screen size information, and then calls
any <CODE>SIGWINCH</CODE> signal handler the calling application has installed. 
d2947 1
a2947 1
call <CODE>rl_cleanup_after_signal()</CODE> (described below), to restore the
a2948 1
</P><P>
d2950 2
d2955 1
a2955 1
values of these variables only when calling <CODE>readline()</CODE>, not in
a2956 1
</P><P>
d2958 2
a2959 1
<A NAME="IDX291"></A>
d2962 2
a2963 1
<DD>If this variable is non-zero, Readline will install signal handlers for
a2965 1
</P><P>
d2967 2
a2970 1
</P><P>
d2972 2
a2973 1
<A NAME="IDX292"></A>
d2976 2
a2977 1
<DD>If this variable is non-zero, Readline will install a signal handler for
a2978 1
</P><P>
d2980 2
a2983 1
</P><P>
d2985 2
a2991 1
</P><P>
d2993 2
a2994 1
<A NAME="IDX293"></A>
d2997 3
a2999 2
<DD>This function will reset the state of the terminal to what it was before
<CODE>readline()</CODE> was called, and remove the Readline signal handlers for
a3002 1
</P><P>
d3004 2
a3005 1
<A NAME="IDX294"></A>
d3008 2
a3009 1
<DD>This will free any partial state associated with the current input line
d3012 1
a3012 1
should be called before <CODE>rl_cleanup_after_signal()</CODE>.  The
a3015 1
</P><P>
d3017 2
a3018 1
<A NAME="IDX295"></A>
d3021 2
a3022 1
<DD>This will reinitialize the terminal and reinstall any Readline signal
a3025 1
</P><P>
d3027 2
d3030 2
a3031 4
call <CODE>rl_resize_terminal()</CODE> or <CODE>rl_set_screen_size()</CODE> to force
Readline to update its idea of the terminal size when a <CODE>SIGWINCH</CODE>
is received.
</P><P>
d3033 2
a3034 1
<A NAME="IDX296"></A>
d3037 2
a3038 1
<DD>Update Readline's internal screen size by reading values from the kernel.
a3039 22
</P><P>

<A NAME="IDX297"></A>
<DL>
<DT><U>Function:</U> void <B>rl_set_screen_size</B> <I>(int rows, int cols)</I>
<DD>Set Readline's idea of the terminal size to <VAR>rows</VAR> rows and
<VAR>cols</VAR> columns.
</DL>
</P><P>

If an application does not want to install a <CODE>SIGWINCH</CODE> handler, but
is still interested in the screen dimensions, Readline's idea of the screen
size may be queried.
</P><P>

<A NAME="IDX298"></A>
<DL>
<DT><U>Function:</U> void <B>rl_get_screen_size</B> <I>(int *rows, int *cols)</I>
<DD>Return Readline's idea of the terminal's size in the
variables pointed to by the arguments.
</DL>
</P><P>
d3041 2
a3043 1
</P><P>
d3045 2
a3046 1
<A NAME="IDX299"></A>
d3049 2
a3050 1
<DD>Install Readline's signal handler for <CODE>SIGINT</CODE>, <CODE>SIGQUIT</CODE>,
a3054 1
</P><P>
d3056 2
a3057 1
<A NAME="IDX300"></A>
d3060 3
a3062 2
<DD>Remove all of the Readline signal handlers installed by
<CODE>rl_set_signals()</CODE>.
a3063 1
</P><P>
d3065 5
a3069 16
<A NAME="Custom Completers"></A>
<HR SIZE="6">
<A NAME="SEC44"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC43"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC45"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[ &lt;&lt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC23"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[ &gt;&gt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H2> 2.6 Custom Completers </H2>
<!--docid::SEC44::-->
a3070 1

a3075 1
</P><P>
d3077 13
a3089 24
<BLOCKQUOTE><TABLE BORDER=0 CELLSPACING=0> 
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC45">2.6.1 How Completing Works</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">The logic used to do completion.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC46">2.6.2 Completion Functions</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Functions provided by Readline.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Variables which control completion.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC48">2.6.4 A Short Completion Example</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">An example of writing completer subroutines.</TD></TR>
</TABLE></BLOCKQUOTE>
<P>

<A NAME="How Completing Works"></A>
<HR SIZE="6">
<A NAME="SEC45"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC44"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC46"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[ &lt;&lt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC44"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[ &gt;&gt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 2.6.1 How Completing Works </H3>
<!--docid::SEC45::-->
a3090 1

a3098 1
</P><P>
d3100 2
d3103 2
a3104 1
</P><P>
d3108 6
a3113 5
The user-interface function <CODE>rl_complete()</CODE>.  This function is
called with the same arguments as other bindable Readline functions:
<VAR>count</VAR> and <VAR>invoking_key</VAR>.
It isolates the word to be completed and calls
<CODE>rl_completion_matches()</CODE> to generate a list of possible completions.
a3116 1
<P>
d3119 5
a3123 6
The internal function <CODE>rl_completion_matches()</CODE> uses an
application-supplied <EM>generator</EM> function to generate the list of
possible matches, and then returns the array of these matches.
The caller should place the address of its generator function in
<CODE>rl_completion_entry_function</CODE>.
<P>
d3126 1
d3128 1
a3128 1
<CODE>rl_completion_matches()</CODE>, returning a string each time.  The
d3133 2
a3134 2
each subsequent call.  The generator function returns
<CODE>(char *)NULL</CODE> to inform <CODE>rl_completion_matches()</CODE> that there are
a3139 1
<P>
d3142 1
a3143 2

<A NAME="IDX301"></A>
d3146 2
a3147 1
<DD>Complete the word at or before point.  You have supplied the function
d3149 1
a3149 1
<CODE>rl_completion_matches()</CODE>).  The default is to do filename completion.
a3150 1
</P><P>
d3152 2
a3153 1
<A NAME="IDX302"></A>
d3155 13
a3167 25
<DT><U>Variable:</U> rl_compentry_func_t * <B>rl_completion_entry_function</B>
<DD>This is a pointer to the generator function for
<CODE>rl_completion_matches()</CODE>.
If the value of <CODE>rl_completion_entry_function</CODE> is
<CODE>NULL</CODE> then the default filename generator
function, <CODE>rl_filename_completion_function()</CODE>, is used.
</DL>
</P><P>

<A NAME="Completion Functions"></A>
<HR SIZE="6">
<A NAME="SEC46"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC45"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC47"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC47"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC44"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[ &gt;&gt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 2.6.2 Completion Functions </H3>
<!--docid::SEC46::-->
a3168 1

a3170 1
</P><P>
d3172 2
a3173 1
<A NAME="IDX303"></A>
d3176 2
a3177 1
<DD>Complete the word at or before point.  <VAR>what_to_do</VAR> says what to do
a3183 1
</P><P>
d3185 2
a3186 1
<A NAME="IDX304"></A>
d3189 2
a3190 1
<DD>Complete the word at or before point.  You have supplied the function
d3192 1
a3192 1
<CODE>rl_completion_matches()</CODE> and <CODE>rl_completion_entry_function</CODE>).
d3194 1
a3194 1
completion.  This calls <CODE>rl_complete_internal()</CODE> with an
a3196 1
</P><P>
d3198 2
a3199 1
<A NAME="IDX305"></A>
d3201 4
a3204 3
<DT><U>Function:</U> int <B>rl_possible_completions</B> <I>(int count, int invoking_key)</I>
<DD>List the possible completions.  See description of <CODE>rl_complete
()</CODE>.  This calls <CODE>rl_complete_internal()</CODE> with an argument of
a3206 1
</P><P>
d3208 2
a3209 1
<A NAME="IDX306"></A>
d3211 5
a3215 4
<DT><U>Function:</U> int <B>rl_insert_completions</B> <I>(int count, int invoking_key)</I>
<DD>Insert the list of possible completions into the line, deleting the
partially-completed word.  See description of <CODE>rl_complete()</CODE>.
This calls <CODE>rl_complete_internal()</CODE> with an argument of <SAMP>`*'</SAMP>.
a3216 1
</P><P>
d3218 2
a3219 1
<A NAME="IDX307"></A>
d3221 4
a3224 14
<DT><U>Function:</U> int <B>rl_completion_mode</B> <I>(rl_command_func_t *cfunc)</I>
<DD>Returns the apppriate value to pass to <CODE>rl_complete_internal()</CODE>
depending on whether <VAR>cfunc</VAR> was called twice in succession and
the value of the <CODE>show-all-if-ambiguous</CODE> variable.
Application-specific completion functions may use this function to present
the same interface as <CODE>rl_complete()</CODE>.
</DL>
</P><P>

<A NAME="IDX308"></A>
<DL>
<DT><U>Function:</U> char ** <B>rl_completion_matches</B> <I>(const char *text, rl_compentry_func_t *entry_func)</I>
<DD>Returns an array of strings which is a list of completions for
<VAR>text</VAR>.  If there are no completions, returns <CODE>NULL</CODE>.
a3227 1
</P><P>
d3229 2
d3232 1
a3232 1
<CODE>char *</CODE>.  The first argument is <VAR>text</VAR>.  The second is a
a3236 1
</P><P>
d3238 2
a3239 1
<A NAME="IDX309"></A>
d3241 7
a3247 6
<DT><U>Function:</U> char * <B>rl_filename_completion_function</B> <I>(const char *text, int state)</I>
<DD>A generator function for filename completion in the general case.
<VAR>text</VAR> is a partial filename.
The Bash source is a useful reference for writing custom
completion functions (the Bash completion functions call this and other
Readline functions).
a3248 1
</P><P>
d3250 2
a3251 1
<A NAME="IDX310"></A>
d3253 3
a3255 2
<DT><U>Function:</U> char * <B>rl_username_completion_function</B> <I>(const char *text, int state)</I>
<DD>A completion generator for usernames.  <VAR>text</VAR> contains a partial
a3259 1
</P><P>
d3261 11
a3271 23
<A NAME="Completion Variables"></A>
<HR SIZE="6">
<A NAME="SEC47"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC46"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC48"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC48"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC44"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[ &gt;&gt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 2.6.3 Completion Variables </H3>
<!--docid::SEC47::-->
<P>

<A NAME="IDX311"></A>
<DL>
<DT><U>Variable:</U> rl_compentry_func_t * <B>rl_completion_entry_function</B>
<DD>A pointer to the generator function for <CODE>rl_completion_matches()</CODE>.
<CODE>NULL</CODE> means to use <CODE>rl_filename_completion_function()</CODE>, the default
a3273 1
</P><P>
d3275 2
a3276 1
<A NAME="IDX312"></A>
d3278 3
a3280 2
<DT><U>Variable:</U> rl_completion_func_t * <B>rl_attempted_completion_function</B>
<DD>A pointer to an alternative function to create matches.
d3282 4
a3285 4
<VAR>start</VAR> and <VAR>end</VAR> are indices in <CODE>rl_line_buffer</CODE> defining
the boundaries of <VAR>text</VAR>, which is a character string.
If this function exists and returns <CODE>NULL</CODE>, or if this variable is
set to <CODE>NULL</CODE>, then <CODE>rl_complete()</CODE> will call the value of
a3287 3
If this function sets the <CODE>rl_attempted_completion_over</CODE>
variable to a non-zero value, Readline will not perform its default
completion even if this function returns no matches.
a3288 1
</P><P>
d3290 2
a3291 1
<A NAME="IDX313"></A>
d3293 4
a3296 3
<DT><U>Variable:</U> rl_quote_func_t * <B>rl_filename_quoting_function</B>
<DD>A pointer to a function that will quote a filename in an
application-specific fashion.  This is called if filename completion is being
a3306 1
</P><P>
d3308 2
a3309 1
<A NAME="IDX314"></A>
d3311 3
a3313 2
<DT><U>Variable:</U> rl_dequote_func_t * <B>rl_filename_dequoting_function</B>
<DD>A pointer to a function that will remove application-specific quoting
a3320 1
</P><P>
d3322 2
a3323 1
<A NAME="IDX315"></A>
d3325 3
a3327 2
<DT><U>Variable:</U> rl_linebuf_func_t * <B>rl_char_is_quoted_p</B>
<DD>A pointer to a function to call that determines whether or not a specific
d3329 1
a3329 1
mechanism the program calling Readline uses.  The function is called with
a3334 1
</P><P>
d3336 2
a3337 1
<A NAME="IDX316"></A>
d3339 5
a3343 8
<DT><U>Variable:</U> rl_compignore_func_t * <B>rl_ignore_some_completions_function</B>
<DD>This function, if defined, is called by the completer when real filename
completion is done, after all the matching names have been generated.
It is passed a <CODE>NULL</CODE> terminated array of matches.
The first element (<CODE>matches[0]</CODE>) is the
maximal substring common to all matches. This function can
re-arrange the list of matches as required, but each element deleted
from the array must be freed.
a3344 1
</P><P>
d3346 2
a3347 34
<A NAME="IDX317"></A>
<DL>
<DT><U>Variable:</U> rl_icppfunc_t * <B>rl_directory_completion_hook</B>
<DD>This function, if defined, is allowed to modify the directory portion
of filenames Readline completes.  It is called with the address of a
string (the current directory name) as an argument, and may modify that string.
If the string is replaced with a new string, the old value should be freed.
Any modified directory name should have a trailing slash.
The modified value will be displayed as part of the completion, replacing
the directory portion of the pathname the user typed.
It returns an integer that should be non-zero if the function modifies
its directory argument.
It could be used to expand symbolic links or shell variables in pathnames.
</DL>
</P><P>

<A NAME="IDX318"></A>
<DL>
<DT><U>Variable:</U> rl_compdisp_func_t * <B>rl_completion_display_matches_hook</B>
<DD>If non-zero, then this is the address of a function to call when
completing a word would normally display the list of possible matches.
This function is called in lieu of Readline displaying the list.
It takes three arguments:
(<CODE>char **</CODE><VAR>matches</VAR>, <CODE>int</CODE> <VAR>num_matches</VAR>, <CODE>int</CODE> <VAR>max_length</VAR>)
where <VAR>matches</VAR> is the array of matching strings,
<VAR>num_matches</VAR> is the number of strings in that array, and
<VAR>max_length</VAR> is the length of the longest string in that array.
Readline provides a convenience function, <CODE>rl_display_match_list</CODE>,
that takes care of doing the display to Readline's output stream.  That
function may be called from this hook.
</DL>
</P><P>

<A NAME="IDX319"></A>
d3349 3
a3351 2
<DT><U>Variable:</U> const char * <B>rl_basic_word_break_characters</B>
<DD>The basic list of characters that signal a break between words for the
d3353 2
a3354 2
which break words for completion in Bash:
<CODE>" \t\n\"\\'`@@$>&#60;=;|&#38;{("</CODE>.
a3355 1
</P><P>
d3357 2
a3358 1
<A NAME="IDX320"></A>
d3360 3
a3362 2
<DT><U>Variable:</U> const char * <B>rl_basic_quote_characters</B>
<DD>A list of quote characters which can cause a word break.
a3363 1
</P><P>
d3365 2
a3366 1
<A NAME="IDX321"></A>
d3368 4
a3371 3
<DT><U>Variable:</U> const char * <B>rl_completer_word_break_characters</B>
<DD>The list of characters that signal a break between words for
<CODE>rl_complete_internal()</CODE>.  The default list is the value of
a3373 1
</P><P>
d3375 2
a3376 1
<A NAME="IDX322"></A>
d3378 3
a3380 2
<DT><U>Variable:</U> const char * <B>rl_completer_quote_characters</B>
<DD>A list of characters which can be used to quote a substring of the line.
a3384 1
</P><P>
d3386 2
a3387 1
<A NAME="IDX323"></A>
d3389 3
a3391 2
<DT><U>Variable:</U> const char * <B>rl_filename_quote_characters</B>
<DD>A list of characters that cause a filename to be quoted by the completer
a3393 1
</P><P>
d3395 2
a3396 1
<A NAME="IDX324"></A>
d3398 3
a3400 2
<DT><U>Variable:</U> const char * <B>rl_special_prefixes</B>
<DD>The list of characters that are word break characters, but should be
a3405 1
</P><P>
d3407 2
a3408 10
<A NAME="IDX325"></A>
<DL>
<DT><U>Variable:</U> int <B>rl_completion_query_items</B>
<DD>Up to this many items will be displayed in response to a
possible-completions call.  After that, we ask the user if she is sure
she wants to see them all.  The default value is 100.
</DL>
</P><P>

<A NAME="IDX326"></A>
d3411 2
a3412 1
<DD>When a single completion alternative matches at the end of the command
a3419 1
</P><P>
d3421 2
a3422 25
<A NAME="IDX327"></A>
<DL>
<DT><U>Variable:</U> int <B>rl_completion_suppress_append</B>
<DD>If non-zero, <VAR>rl_completion_append_character</VAR> is not appended to
matches at the end of the command line, as described above.  It is
set to 0 before any application-specific completion function is called.
</DL>
</P><P>

<A NAME="IDX328"></A>
<DL>
<DT><U>Variable:</U> int <B>rl_completion_mark_symlink_dirs</B>
<DD>If non-zero, a slash will be appended to completed filenames that are
symbolic links to directory names, subject to the value of the
user-settable <VAR>mark-directories</VAR> variable.
This variable exists so that application completion functions can
override the user's global preference (set via the
<VAR>mark-symlinked-directories</VAR> Readline variable) if appropriate.
This variable is set to the user's preference before any
application completion function is called, so unless that function
modifies the value, the user's preferences are honored.
</DL>
</P><P>

<A NAME="IDX329"></A>
d3425 2
a3426 2
<DD>If non-zero, then duplicates in the matches are removed.
The default is 1.
a3427 1
</P><P>
d3429 2
a3430 1
<A NAME="IDX330"></A>
d3433 2
a3434 1
<DD>Non-zero means that the results of the matches are to be treated as
d3438 2
a3439 3
quote completed filenames if they contain any characters in
<CODE>rl_filename_quote_characters</CODE> and <CODE>rl_filename_quoting_desired</CODE>
is set to a non-zero value.
a3440 1
</P><P>
d3442 2
a3443 1
<A NAME="IDX331"></A>
d3446 2
a3447 1
<DD>Non-zero means that the results of the matches are to be quoted using
a3454 1
</P><P>
d3456 2
a3457 1
<A NAME="IDX332"></A>
d3459 4
a3462 6
<DT><U>Variable:</U> int <B>rl_attempted_completion_over</B>
<DD>If an application-specific completion function assigned to
<CODE>rl_attempted_completion_function</CODE> sets this variable to a non-zero
value, Readline will not perform its default filename completion even
if the application's completion function returns no matches.
It should be set only by an application's completion function.
a3463 1
</P><P>
d3465 2
a3466 1
<A NAME="IDX333"></A>
d3468 9
a3476 4
<DT><U>Variable:</U> int <B>rl_completion_type</B>
<DD>Set to a character describing the type of completion Readline is currently
attempting; see the description of <CODE>rl_complete_internal()</CODE>
(see section <A HREF="readline.html#SEC46">2.6.2 Completion Functions</A>) for the list of characters.
a3477 1
</P><P>
d3479 2
a3480 1
<A NAME="IDX334"></A>
d3482 6
a3487 3
<DT><U>Variable:</U> int <B>rl_inhibit_completion</B>
<DD>If this variable is non-zero, completion is inhibited.  The completion
character will be inserted as any other bound to <CODE>self-insert</CODE>.
a3488 1
</P><P>
d3490 1
a3490 16
<A NAME="A Short Completion Example"></A>
<HR SIZE="6">
<A NAME="SEC48"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC47"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[ &lt;&lt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC44"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[ &gt;&gt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> 2.6.4 A Short Completion Example </H3>
<!--docid::SEC48::-->
d3492 18
d3511 3
a3518 1
</P><P>
d3520 4
a3523 1
<TABLE><tr><td>&nbsp;</td><td class=smallexample><FONT SIZE=-1><pre>/* fileman.c -- A tiny application which demonstrates how to use the
d3536 1
d3540 2
a3541 9
int com_list __P((char *));
int com_view __P((char *));
int com_rename __P((char *));
int com_stat __P((char *));
int com_pwd __P((char *));
int com_delete __P((char *));
int com_help __P((char *));
int com_cd __P((char *));
int com_quit __P((char *));
d3548 1
a3548 1
  rl_icpfunc_t *func;		/* Function to call to do the job. */
d3564 1
a3564 1
  { (char *)NULL, (rl_icpfunc_t *)NULL, (char *)NULL }
d3574 1
a3574 1
/* When non-zero, this means the user is done using this program. */
d3704 2
a3705 2
char *command_generator __P((const char *, int));
char **fileman_completion __P((const char *, int, int));
d3707 3
a3709 3
/* Tell the GNU Readline library how to complete.  We want to try to
   complete on command names if this is the first word in the line, or
   on filenames if not. */
d3716 1
a3716 1
  rl_attempted_completion_function = fileman_completion;
d3719 5
a3723 5
/* Attempt to complete on the contents of TEXT.  START and END
   bound the region of rl_line_buffer that contains the word to
   complete.  TEXT is the word to complete.  We can use the entire
   contents of rl_line_buffer in case we want to do some simple
   parsing.  Returnthe array of matches, or NULL if there aren't any. */
d3726 1
a3726 1
     const char *text;
d3737 1
a3737 1
    matches = rl_completion_matches (text, command_generator);
d3742 3
a3744 3
/* Generator function for command completion.  STATE lets us
   know whether to start from scratch; without any state
   (i.e. STATE == 0), then we start at the top of the list. */
d3747 1
a3747 1
     const char *text;
d3753 3
a3755 3
  /* If this is a new word to complete, initialize now.  This
     includes saving the length of TEXT for efficiency, and
     initializing the index variable to 0. */
d3762 1
a3762 2
  /* Return the next name which partially matches from the
     command list. */
d3907 1
a3907 1
  s = getcwd (dir, sizeof(dir) - 1);
d3918 1
a3918 2
/* The user wishes to quit using this program.  Just set DONE
   non-zero. */
d3931 1
a3931 1
           "%s: Too dangerous for me to distribute.\n"
a3932 1
  fprintf (stderr, "Write it yourself.\n");
d3935 2
a3936 2
/* Return non-zero if ARG is a valid argument for CALLER,
   else print an error message and return zero. */
d3949 1
a3949 1
</FONT></pre></td></tr></table></P><P>
a3950 872
<A NAME="Concept Index"></A>
<HR SIZE="6">
<A NAME="SEC49"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC48"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC50"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[ &lt;&lt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[ &gt;&gt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H1> Concept Index </H1>
<!--docid::SEC49::-->
<table><tr><th valign=top>Jump to: &nbsp; </th><td><A HREF="readline.html#cp_C" style="text-decoration:none"><b>C</b></A>
 &nbsp; 
<A HREF="readline.html#cp_E" style="text-decoration:none"><b>E</b></A>
 &nbsp; 
<A HREF="readline.html#cp_I" style="text-decoration:none"><b>I</b></A>
 &nbsp; 
<A HREF="readline.html#cp_K" style="text-decoration:none"><b>K</b></A>
 &nbsp; 
<A HREF="readline.html#cp_N" style="text-decoration:none"><b>N</b></A>
 &nbsp; 
<A HREF="readline.html#cp_R" style="text-decoration:none"><b>R</b></A>
 &nbsp; 
<A HREF="readline.html#cp_V" style="text-decoration:none"><b>V</b></A>
 &nbsp; 
<A HREF="readline.html#cp_Y" style="text-decoration:none"><b>Y</b></A>
 &nbsp; 
</td></tr></table><br><P></P>
<TABLE border=0>
<TR><TD></TD><TH ALIGN=LEFT>Index Entry</TH><TH ALIGN=LEFT> Section</TH></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="cp_C"></A>C</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#SEC4">command editing</A></TD><TD valign=top><A HREF="readline.html#SEC4">1.2.1 Readline Bare Essentials</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="cp_E"></A>E</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#SEC4">editing command lines</A></TD><TD valign=top><A HREF="readline.html#SEC4">1.2.1 Readline Bare Essentials</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="cp_I"></A>I</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#SEC9">initialization file, readline</A></TD><TD valign=top><A HREF="readline.html#SEC9">1.3 Readline Init File</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#SEC3">interaction, readline</A></TD><TD valign=top><A HREF="readline.html#SEC3">1.2 Readline Interaction</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="cp_K"></A>K</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX3">kill ring</A></TD><TD valign=top><A HREF="readline.html#SEC6">1.2.3 Readline Killing Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX1">killing text</A></TD><TD valign=top><A HREF="readline.html#SEC6">1.2.3 Readline Killing Commands</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="cp_N"></A>N</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#SEC4">notation, readline</A></TD><TD valign=top><A HREF="readline.html#SEC4">1.2.1 Readline Bare Essentials</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="cp_R"></A>R</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX175">readline, function</A></TD><TD valign=top><A HREF="readline.html#SEC24">2.1 Basic Behavior</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="cp_V"></A>V</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX4">variables, readline</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="cp_Y"></A>Y</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX2">yanking text</A></TD><TD valign=top><A HREF="readline.html#SEC6">1.2.3 Readline Killing Commands</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
</TABLE><P></P><table><tr><th valign=top>Jump to: &nbsp; </th><td><A HREF="readline.html#cp_C" style="text-decoration:none"><b>C</b></A>
 &nbsp; 
<A HREF="readline.html#cp_E" style="text-decoration:none"><b>E</b></A>
 &nbsp; 
<A HREF="readline.html#cp_I" style="text-decoration:none"><b>I</b></A>
 &nbsp; 
<A HREF="readline.html#cp_K" style="text-decoration:none"><b>K</b></A>
 &nbsp; 
<A HREF="readline.html#cp_N" style="text-decoration:none"><b>N</b></A>
 &nbsp; 
<A HREF="readline.html#cp_R" style="text-decoration:none"><b>R</b></A>
 &nbsp; 
<A HREF="readline.html#cp_V" style="text-decoration:none"><b>V</b></A>
 &nbsp; 
<A HREF="readline.html#cp_Y" style="text-decoration:none"><b>Y</b></A>
 &nbsp; 
</td></tr></table><br><P>

<A NAME="Function and Variable Index"></A>
<HR SIZE="6">
<A NAME="SEC50"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[ &gt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[ &lt;&lt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[ &gt;&gt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H1> Function and Variable Index </H1>
<!--docid::SEC50::-->
<table><tr><th valign=top>Jump to: &nbsp; </th><td><A HREF="readline.html#fn__" style="text-decoration:none"><b>_</b></A>
 &nbsp; 
<BR>
<A HREF="readline.html#fn_A" style="text-decoration:none"><b>A</b></A>
 &nbsp; 
<A HREF="readline.html#fn_B" style="text-decoration:none"><b>B</b></A>
 &nbsp; 
<A HREF="readline.html#fn_C" style="text-decoration:none"><b>C</b></A>
 &nbsp; 
<A HREF="readline.html#fn_D" style="text-decoration:none"><b>D</b></A>
 &nbsp; 
<A HREF="readline.html#fn_E" style="text-decoration:none"><b>E</b></A>
 &nbsp; 
<A HREF="readline.html#fn_F" style="text-decoration:none"><b>F</b></A>
 &nbsp; 
<A HREF="readline.html#fn_H" style="text-decoration:none"><b>H</b></A>
 &nbsp; 
<A HREF="readline.html#fn_I" style="text-decoration:none"><b>I</b></A>
 &nbsp; 
<A HREF="readline.html#fn_K" style="text-decoration:none"><b>K</b></A>
 &nbsp; 
<A HREF="readline.html#fn_M" style="text-decoration:none"><b>M</b></A>
 &nbsp; 
<A HREF="readline.html#fn_N" style="text-decoration:none"><b>N</b></A>
 &nbsp; 
<A HREF="readline.html#fn_O" style="text-decoration:none"><b>O</b></A>
 &nbsp; 
<A HREF="readline.html#fn_P" style="text-decoration:none"><b>P</b></A>
 &nbsp; 
<A HREF="readline.html#fn_Q" style="text-decoration:none"><b>Q</b></A>
 &nbsp; 
<A HREF="readline.html#fn_R" style="text-decoration:none"><b>R</b></A>
 &nbsp; 
<A HREF="readline.html#fn_S" style="text-decoration:none"><b>S</b></A>
 &nbsp; 
<A HREF="readline.html#fn_T" style="text-decoration:none"><b>T</b></A>
 &nbsp; 
<A HREF="readline.html#fn_U" style="text-decoration:none"><b>U</b></A>
 &nbsp; 
<A HREF="readline.html#fn_V" style="text-decoration:none"><b>V</b></A>
 &nbsp; 
<A HREF="readline.html#fn_Y" style="text-decoration:none"><b>Y</b></A>
 &nbsp; 
</td></tr></table><br><P></P>
<TABLE border=0>
<TR><TD></TD><TH ALIGN=LEFT>Index Entry</TH><TH ALIGN=LEFT> Section</TH></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn__"></A>_</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX278"><CODE>_rl_digit_p</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX281"><CODE>_rl_digit_value</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX277"><CODE>_rl_lowercase_p</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX280"><CODE>_rl_to_lower</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX279"><CODE>_rl_to_upper</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX276"><CODE>_rl_uppercase_p</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn_A"></A>A</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX142"><CODE>abort (C-g)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX143"><CODE>abort (C-g)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX42"><CODE>accept-line (Newline or Return)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX43"><CODE>accept-line (Newline or Return)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn_B"></A>B</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX32"><CODE>backward-char (C-b)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX33"><CODE>backward-char (C-b)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX70"><CODE>backward-delete-char (Rubout)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX71"><CODE>backward-delete-char (Rubout)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX94"><CODE>backward-kill-line (C-x Rubout)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX95"><CODE>backward-kill-line (C-x Rubout)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX102"><CODE>backward-kill-word (M-<KBD>DEL</KBD>)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX103"><CODE>backward-kill-word (M-<KBD>DEL</KBD>)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX36"><CODE>backward-word (M-b)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX37"><CODE>backward-word (M-b)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX48"><CODE>beginning-of-history (M-&#38;#60;)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX49"><CODE>beginning-of-history (M-&#38;#60;)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX26"><CODE>beginning-of-line (C-a)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX27"><CODE>beginning-of-line (C-a)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX5">bell-style</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn_C"></A>C</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX138"><CODE>call-last-kbd-macro (C-x e)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC20">1.4.7 Keyboard Macros</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX139"><CODE>call-last-kbd-macro (C-x e)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC20">1.4.7 Keyboard Macros</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX88"><CODE>capitalize-word (M-c)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX89"><CODE>capitalize-word (M-c)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX158"><CODE>character-search (C-])</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX159"><CODE>character-search (C-])</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX160"><CODE>character-search-backward (M-C-])</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX161"><CODE>character-search-backward (M-C-])</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX38"><CODE>clear-screen (C-l)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX39"><CODE>clear-screen (C-l)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX6">comment-begin</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX124"><CODE>complete (<KBD>TAB</KBD>)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX125"><CODE>complete (<KBD>TAB</KBD>)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX7">completion-query-items</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX8">convert-meta</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX112"><CODE>copy-backward-word ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX113"><CODE>copy-backward-word ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX114"><CODE>copy-forward-word ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX115"><CODE>copy-forward-word ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX110"><CODE>copy-region-as-kill ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX111"><CODE>copy-region-as-kill ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn_D"></A>D</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX68"><CODE>delete-char (C-d)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX69"><CODE>delete-char (C-d)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX132"><CODE>delete-char-or-list ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX133"><CODE>delete-char-or-list ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX106"><CODE>delete-horizontal-space ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX107"><CODE>delete-horizontal-space ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX120"><CODE>digit-argument (<KBD>M-0</KBD>, <KBD>M-1</KBD>, &#60;small&#62;...&#60;/small&#62; <KBD>M--</KBD>)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC18">1.4.5 Specifying Numeric Arguments</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX121"><CODE>digit-argument (<KBD>M-0</KBD>, <KBD>M-1</KBD>, &#60;small&#62;...&#60;/small&#62; <KBD>M--</KBD>)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC18">1.4.5 Specifying Numeric Arguments</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX9">disable-completion</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX144"><CODE>do-uppercase-version (M-a, M-b, M-<VAR>x</VAR>, &#60;small&#62;...&#60;/small&#62;)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX145"><CODE>do-uppercase-version (M-a, M-b, M-<VAR>x</VAR>, &#60;small&#62;...&#60;/small&#62;)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX86"><CODE>downcase-word (M-l)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX87"><CODE>downcase-word (M-l)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX164"><CODE>dump-functions ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX165"><CODE>dump-functions ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX168"><CODE>dump-macros ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX169"><CODE>dump-macros ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX166"><CODE>dump-variables ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX167"><CODE>dump-variables ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn_E"></A>E</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX10">editing-mode</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX170"><CODE>emacs-editing-mode (C-e)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX171"><CODE>emacs-editing-mode (C-e)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX11">enable-keypad</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX136"><CODE>end-kbd-macro (C-x ))</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC20">1.4.7 Keyboard Macros</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX137"><CODE>end-kbd-macro (C-x ))</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC20">1.4.7 Keyboard Macros</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX50"><CODE>end-of-history (M-&#38;#62;)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX51"><CODE>end-of-history (M-&#38;#62;)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX28"><CODE>end-of-line (C-e)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX29"><CODE>end-of-line (C-e)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX156"><CODE>exchange-point-and-mark (C-x C-x)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX157"><CODE>exchange-point-and-mark (C-x C-x)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX12">expand-tilde</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn_F"></A>F</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX72"><CODE>forward-backward-delete-char ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX73"><CODE>forward-backward-delete-char ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX30"><CODE>forward-char (C-f)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX31"><CODE>forward-char (C-f)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX54"><CODE>forward-search-history (C-s)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX55"><CODE>forward-search-history (C-s)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX34"><CODE>forward-word (M-f)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX35"><CODE>forward-word (M-f)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn_H"></A>H</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX13">history-preserve-point</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX62"><CODE>history-search-backward ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX63"><CODE>history-search-backward ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX60"><CODE>history-search-forward ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX61"><CODE>history-search-forward ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX14">horizontal-scroll-mode</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn_I"></A>I</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX15">input-meta</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX162"><CODE>insert-comment (M-#)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX163"><CODE>insert-comment (M-#)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX128"><CODE>insert-completions (M-*)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX129"><CODE>insert-completions (M-*)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX17">isearch-terminators</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn_K"></A>K</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX18">keymap</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX92"><CODE>kill-line (C-k)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX93"><CODE>kill-line (C-k)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX108"><CODE>kill-region ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX109"><CODE>kill-region ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX98"><CODE>kill-whole-line ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX99"><CODE>kill-whole-line ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX100"><CODE>kill-word (M-d)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX101"><CODE>kill-word (M-d)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn_M"></A>M</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX19">mark-modified-lines</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX20">mark-symlinked-directories</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX21">match-hidden-files</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX130"><CODE>menu-complete ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX131"><CODE>menu-complete ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX16">meta-flag</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn_N"></A>N</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX46"><CODE>next-history (C-n)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX47"><CODE>next-history (C-n)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX58"><CODE>non-incremental-forward-search-history (M-n)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX59"><CODE>non-incremental-forward-search-history (M-n)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX56"><CODE>non-incremental-reverse-search-history (M-p)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX57"><CODE>non-incremental-reverse-search-history (M-p)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn_O"></A>O</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX22">output-meta</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX90"><CODE>overwrite-mode ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX91"><CODE>overwrite-mode ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn_P"></A>P</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX23">page-completions</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX126"><CODE>possible-completions (M-?)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX127"><CODE>possible-completions (M-?)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX146"><CODE>prefix-meta (<KBD>ESC</KBD>)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX147"><CODE>prefix-meta (<KBD>ESC</KBD>)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX44"><CODE>previous-history (C-p)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX45"><CODE>previous-history (C-p)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn_Q"></A>Q</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX74"><CODE>quoted-insert (C-q or C-v)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX75"><CODE>quoted-insert (C-q or C-v)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn_R"></A>R</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX140"><CODE>re-read-init-file (C-x C-r)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX141"><CODE>re-read-init-file (C-x C-r)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX174"><CODE>readline</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC24">2.1 Basic Behavior</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX40"><CODE>redraw-current-line ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX41"><CODE>redraw-current-line ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX52"><CODE>reverse-search-history (C-r)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX53"><CODE>reverse-search-history (C-r)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX150"><CODE>revert-line (M-r)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX151"><CODE>revert-line (M-r)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX209"><CODE>rl_add_defun</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC30">2.4.1 Naming a Function</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX235"><CODE>rl_add_funmap_entry</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC33">2.4.4 Associating Function Names and Bindings</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX238"><CODE>rl_add_undo</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC34">2.4.5 Allowing Undoing</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX274"><CODE>rl_alphabetic</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX186">rl_already_prompted</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX312">rl_attempted_completion_function</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX332">rl_attempted_completion_over</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX320">rl_basic_quote_characters</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX319">rl_basic_word_break_characters</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX236"><CODE>rl_begin_undo_group</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC34">2.4.5 Allowing Undoing</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX218"><CODE>rl_bind_key</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX219"><CODE>rl_bind_key_in_map</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX203">rl_binding_keymap</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX288"><CODE>rl_callback_handler_install</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC41">2.4.12 Alternate Interface</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX290"><CODE>rl_callback_handler_remove</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC41">2.4.12 Alternate Interface</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX289"><CODE>rl_callback_read_char</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC41">2.4.12 Alternate Interface</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX291">rl_catch_signals</A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX292">rl_catch_sigwinch</A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX315">rl_char_is_quoted_p</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX293"><CODE>rl_cleanup_after_signal</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX250"><CODE>rl_clear_message</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX264"><CODE>rl_clear_pending_input</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC37">2.4.8 Character Input</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX300"><CODE>rl_clear_signals</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX301"><CODE>rl_complete</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC45">2.6.1 How Completing Works</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX304"><CODE>rl_complete</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC46">2.6.2 Completion Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX303"><CODE>rl_complete_internal</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC46">2.6.2 Completion Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX322">rl_completer_quote_characters</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX321">rl_completer_word_break_characters</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX326">rl_completion_append_character</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX318">rl_completion_display_matches_hook</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX302">rl_completion_entry_function</A></TD><TD valign=top><A HREF="readline.html#SEC45">2.6.1 How Completing Works</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX311">rl_completion_entry_function</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX328">rl_completion_mark_symlink_dirs</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX308"><CODE>rl_completion_matches</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC46">2.6.2 Completion Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX307"><CODE>rl_completion_mode</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC46">2.6.2 Completion Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX325">rl_completion_query_items</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX327">rl_completion_suppress_append</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX333">rl_completion_type</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX211"><CODE>rl_copy_keymap</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC31">2.4.2 Selecting a Keymap</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX257"><CODE>rl_copy_text</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC36">2.4.7 Modifying Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX247"><CODE>rl_crlf</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX256"><CODE>rl_delete_text</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC36">2.4.7 Modifying Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX201">rl_deprep_term_function</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX267"><CODE>rl_deprep_terminal</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC38">2.4.9 Terminal Management</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX273"><CODE>rl_ding</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX317">rl_directory_completion_hook</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX213"><CODE>rl_discard_keymap</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC31">2.4.2 Selecting a Keymap</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX183">rl_dispatching</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX275"><CODE>rl_display_match_list</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX240"><CODE>rl_do_undo</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC34">2.4.5 Allowing Undoing</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX180">rl_done</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX208">rl_editing_mode</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX178">rl_end</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX237"><CODE>rl_end_undo_group</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC34">2.4.5 Allowing Undoing</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX184">rl_erase_empty_line</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX197">rl_event_hook</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX263"><CODE>rl_execute_next</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC37">2.4.8 Character Input</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX202">rl_executing_keymap</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX204">rl_executing_macro</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX253"><CODE>rl_expand_prompt</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX206">rl_explicit_arg</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX271"><CODE>rl_extend_line_buffer</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX330">rl_filename_completion_desired</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX309"><CODE>rl_filename_completion_function</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC46">2.6.2 Completion Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX314">rl_filename_dequoting_function</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX323">rl_filename_quote_characters</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX331">rl_filename_quoting_desired</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX313">rl_filename_quoting_function</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX243"><CODE>rl_forced_update_display</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX294"><CODE>rl_free_line_state</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX239"><CODE>rl_free_undo_list</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC34">2.4.5 Allowing Undoing</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX232"><CODE>rl_function_dumper</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC33">2.4.4 Associating Function Names and Bindings</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX229"><CODE>rl_function_of_keyseq</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC33">2.4.4 Associating Function Names and Bindings</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX234"><CODE>rl_funmap_names</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC33">2.4.4 Associating Function Names and Bindings</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX225"><CODE>rl_generic_bind</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX214"><CODE>rl_get_keymap</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC31">2.4.2 Selecting a Keymap</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX216"><CODE>rl_get_keymap_by_name</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC31">2.4.2 Selecting a Keymap</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX217"><CODE>rl_get_keymap_name</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC31">2.4.2 Selecting a Keymap</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX298"><CODE>rl_get_screen_size</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX287"><CODE>rl_get_termcap</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC40">2.4.11 Miscellaneous Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX261"><CODE>rl_getc</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC37">2.4.8 Character Input</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX198">rl_getc_function</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX189">rl_gnu_readline_p</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX329">rl_ignore_completion_duplicates</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX316">rl_ignore_some_completions_function</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX334">rl_inhibit_completion</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX272"><CODE>rl_initialize</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX306"><CODE>rl_insert_completions</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC46">2.6.2 Completion Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX255"><CODE>rl_insert_text</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC36">2.4.7 Modifying Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX192">rl_instream</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX230"><CODE>rl_invoking_keyseqs</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC33">2.4.4 Associating Function Names and Bindings</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX231"><CODE>rl_invoking_keyseqs_in_map</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC33">2.4.4 Associating Function Names and Bindings</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX258"><CODE>rl_kill_text</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC36">2.4.7 Modifying Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX194">rl_last_func</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX187">rl_library_version</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX176">rl_line_buffer</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX233"><CODE>rl_list_funmap_names</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC33">2.4.4 Associating Function Names and Bindings</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX282"><CODE>rl_macro_bind</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC40">2.4.11 Miscellaneous Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX283"><CODE>rl_macro_dumper</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC40">2.4.11 Miscellaneous Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX210"><CODE>rl_make_bare_keymap</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC31">2.4.2 Selecting a Keymap</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX212"><CODE>rl_make_keymap</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC31">2.4.2 Selecting a Keymap</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX179">rl_mark</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX249"><CODE>rl_message</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX241"><CODE>rl_modifying</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC34">2.4.5 Allowing Undoing</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX228"><CODE>rl_named_function</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC33">2.4.4 Associating Function Names and Bindings</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX181">rl_num_chars_to_read</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX207">rl_numeric_arg</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX244"><CODE>rl_on_new_line</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX245"><CODE>rl_on_new_line_with_prompt</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX193">rl_outstream</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX226"><CODE>rl_parse_and_bind</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX182">rl_pending_input</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX177">rl_point</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX305"><CODE>rl_possible_completions</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC46">2.6.2 Completion Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX196">rl_pre_input_hook</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX200">rl_prep_term_function</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX266"><CODE>rl_prep_terminal</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC38">2.4.9 Terminal Management</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX185">rl_prompt</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX259"><CODE>rl_push_macro_input</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC36">2.4.7 Modifying Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX227"><CODE>rl_read_init_file</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX260"><CODE>rl_read_key</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC37">2.4.8 Character Input</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX191">rl_readline_name</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX205">rl_readline_state</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX188">rl_readline_version</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX242"><CODE>rl_redisplay</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX199">rl_redisplay_function</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX270"><CODE>rl_replace_line</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX295"><CODE>rl_reset_after_signal</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX246"><CODE>rl_reset_line_state</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX269"><CODE>rl_reset_terminal</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC38">2.4.9 Terminal Management</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX296"><CODE>rl_resize_terminal</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX252"><CODE>rl_restore_prompt</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX251"><CODE>rl_save_prompt</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX224"><CODE>rl_set_key</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX265"><CODE>rl_set_keyboard_input_timeout</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC37">2.4.8 Character Input</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX215"><CODE>rl_set_keymap</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC31">2.4.2 Selecting a Keymap</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX286"><CODE>rl_set_paren_blink_timeout</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC40">2.4.11 Miscellaneous Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX254"><CODE>rl_set_prompt</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX297"><CODE>rl_set_screen_size</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX299"><CODE>rl_set_signals</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX248"><CODE>rl_show_char</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX324">rl_special_prefixes</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX195">rl_startup_hook</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX262"><CODE>rl_stuff_char</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC37">2.4.8 Character Input</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX190">rl_terminal_name</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX268"><CODE>rl_tty_set_default_bindings</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC38">2.4.9 Terminal Management</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX223"><CODE>rl_unbind_command_in_map</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX222"><CODE>rl_unbind_function_in_map</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX220"><CODE>rl_unbind_key</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX221"><CODE>rl_unbind_key_in_map</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX310"><CODE>rl_username_completion_function</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC46">2.6.2 Completion Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX284"><CODE>rl_variable_bind</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC40">2.4.11 Miscellaneous Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX285"><CODE>rl_variable_dumper</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC40">2.4.11 Miscellaneous Functions</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn_S"></A>S</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX78"><CODE>self-insert (a, b, A, 1, !, &#60;small&#62;...&#60;/small&#62;)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX79"><CODE>self-insert (a, b, A, 1, !, &#60;small&#62;...&#60;/small&#62;)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX154"><CODE>set-mark (C-@@)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX155"><CODE>set-mark (C-@@)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX24">show-all-if-ambiguous</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX134"><CODE>start-kbd-macro (C-x ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC20">1.4.7 Keyboard Macros</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX135"><CODE>start-kbd-macro (C-x ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC20">1.4.7 Keyboard Macros</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn_T"></A>T</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX76"><CODE>tab-insert (M-<KBD>TAB</KBD>)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX77"><CODE>tab-insert (M-<KBD>TAB</KBD>)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX152"><CODE>tilde-expand (M-~)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX153"><CODE>tilde-expand (M-~)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX80"><CODE>transpose-chars (C-t)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX81"><CODE>transpose-chars (C-t)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX82"><CODE>transpose-words (M-t)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX83"><CODE>transpose-words (M-t)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn_U"></A>U</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX148"><CODE>undo (C-_ or C-x C-u)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX149"><CODE>undo (C-_ or C-x C-u)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX122"><CODE>universal-argument ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC18">1.4.5 Specifying Numeric Arguments</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX123"><CODE>universal-argument ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC18">1.4.5 Specifying Numeric Arguments</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX96"><CODE>unix-line-discard (C-u)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX97"><CODE>unix-line-discard (C-u)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX104"><CODE>unix-word-rubout (C-w)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX105"><CODE>unix-word-rubout (C-w)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX84"><CODE>upcase-word (M-u)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX85"><CODE>upcase-word (M-u)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn_V"></A>V</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX172"><CODE>vi-editing-mode (M-C-j)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX173"><CODE>vi-editing-mode (M-C-j)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX25">visible-stats</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
<TR><TH><A NAME="fn_Y"></A>Y</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX116"><CODE>yank (C-y)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX117"><CODE>yank (C-y)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX66"><CODE>yank-last-arg (M-. or M-_)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX67"><CODE>yank-last-arg (M-. or M-_)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX64"><CODE>yank-nth-arg (M-C-y)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX65"><CODE>yank-nth-arg (M-C-y)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX118"><CODE>yank-pop (M-y)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX119"><CODE>yank-pop (M-y)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
</TABLE><P></P><table><tr><th valign=top>Jump to: &nbsp; </th><td><A HREF="readline.html#fn__" style="text-decoration:none"><b>_</b></A>
 &nbsp; 
<BR>
<A HREF="readline.html#fn_A" style="text-decoration:none"><b>A</b></A>
 &nbsp; 
<A HREF="readline.html#fn_B" style="text-decoration:none"><b>B</b></A>
 &nbsp; 
<A HREF="readline.html#fn_C" style="text-decoration:none"><b>C</b></A>
 &nbsp; 
<A HREF="readline.html#fn_D" style="text-decoration:none"><b>D</b></A>
 &nbsp; 
<A HREF="readline.html#fn_E" style="text-decoration:none"><b>E</b></A>
 &nbsp; 
<A HREF="readline.html#fn_F" style="text-decoration:none"><b>F</b></A>
 &nbsp; 
<A HREF="readline.html#fn_H" style="text-decoration:none"><b>H</b></A>
 &nbsp; 
<A HREF="readline.html#fn_I" style="text-decoration:none"><b>I</b></A>
 &nbsp; 
<A HREF="readline.html#fn_K" style="text-decoration:none"><b>K</b></A>
 &nbsp; 
<A HREF="readline.html#fn_M" style="text-decoration:none"><b>M</b></A>
 &nbsp; 
<A HREF="readline.html#fn_N" style="text-decoration:none"><b>N</b></A>
 &nbsp; 
<A HREF="readline.html#fn_O" style="text-decoration:none"><b>O</b></A>
 &nbsp; 
<A HREF="readline.html#fn_P" style="text-decoration:none"><b>P</b></A>
 &nbsp; 
<A HREF="readline.html#fn_Q" style="text-decoration:none"><b>Q</b></A>
 &nbsp; 
<A HREF="readline.html#fn_R" style="text-decoration:none"><b>R</b></A>
 &nbsp; 
<A HREF="readline.html#fn_S" style="text-decoration:none"><b>S</b></A>
 &nbsp; 
<A HREF="readline.html#fn_T" style="text-decoration:none"><b>T</b></A>
 &nbsp; 
<A HREF="readline.html#fn_U" style="text-decoration:none"><b>U</b></A>
 &nbsp; 
<A HREF="readline.html#fn_V" style="text-decoration:none"><b>V</b></A>
 &nbsp; 
<A HREF="readline.html#fn_Y" style="text-decoration:none"><b>Y</b></A>
 &nbsp; 
</td></tr></table><br><P>

<HR SIZE="6">
<A NAME="SEC_Contents"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H1>Table of Contents</H1>
<UL>
<A NAME="TOC1" HREF="readline.html#SEC1">1. Command Line Editing</A>
<BR>
<UL>
<A NAME="TOC2" HREF="readline.html#SEC2">1.1 Introduction to Line Editing</A>
<BR>
<A NAME="TOC3" HREF="readline.html#SEC3">1.2 Readline Interaction</A>
<BR>
<UL>
<A NAME="TOC4" HREF="readline.html#SEC4">1.2.1 Readline Bare Essentials</A>
<BR>
<A NAME="TOC5" HREF="readline.html#SEC5">1.2.2 Readline Movement Commands</A>
<BR>
<A NAME="TOC6" HREF="readline.html#SEC6">1.2.3 Readline Killing Commands</A>
<BR>
<A NAME="TOC7" HREF="readline.html#SEC7">1.2.4 Readline Arguments</A>
<BR>
<A NAME="TOC8" HREF="readline.html#SEC8">1.2.5 Searching for Commands in the History</A>
<BR>
</UL>
<A NAME="TOC9" HREF="readline.html#SEC9">1.3 Readline Init File</A>
<BR>
<UL>
<A NAME="TOC10" HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A>
<BR>
<A NAME="TOC11" HREF="readline.html#SEC11">1.3.2 Conditional Init Constructs</A>
<BR>
<A NAME="TOC12" HREF="readline.html#SEC12">1.3.3 Sample Init File</A>
<BR>
</UL>
<A NAME="TOC13" HREF="readline.html#SEC13">1.4 Bindable Readline Commands</A>
<BR>
<UL>
<A NAME="TOC14" HREF="readline.html#SEC14">1.4.1 Commands For Moving</A>
<BR>
<A NAME="TOC15" HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A>
<BR>
<A NAME="TOC16" HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A>
<BR>
<A NAME="TOC17" HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A>
<BR>
<A NAME="TOC18" HREF="readline.html#SEC18">1.4.5 Specifying Numeric Arguments</A>
<BR>
<A NAME="TOC19" HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A>
<BR>
<A NAME="TOC20" HREF="readline.html#SEC20">1.4.7 Keyboard Macros</A>
<BR>
<A NAME="TOC21" HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A>
<BR>
</UL>
<A NAME="TOC22" HREF="readline.html#SEC22">1.5 Readline vi Mode</A>
<BR>
</UL>
<A NAME="TOC23" HREF="readline.html#SEC23">2. Programming with GNU Readline</A>
<BR>
<UL>
<A NAME="TOC24" HREF="readline.html#SEC24">2.1 Basic Behavior</A>
<BR>
<A NAME="TOC25" HREF="readline.html#SEC25">2.2 Custom Functions</A>
<BR>
<UL>
<A NAME="TOC26" HREF="readline.html#SEC26">2.2.1 Readline Typedefs</A>
<BR>
<A NAME="TOC27" HREF="readline.html#SEC27">2.2.2 Writing a New Function</A>
<BR>
</UL>
<A NAME="TOC28" HREF="readline.html#SEC28">2.3 Readline Variables</A>
<BR>
<A NAME="TOC29" HREF="readline.html#SEC29">2.4 Readline Convenience Functions</A>
<BR>
<UL>
<A NAME="TOC30" HREF="readline.html#SEC30">2.4.1 Naming a Function</A>
<BR>
<A NAME="TOC31" HREF="readline.html#SEC31">2.4.2 Selecting a Keymap</A>
<BR>
<A NAME="TOC32" HREF="readline.html#SEC32">2.4.3 Binding Keys</A>
<BR>
<A NAME="TOC33" HREF="readline.html#SEC33">2.4.4 Associating Function Names and Bindings</A>
<BR>
<A NAME="TOC34" HREF="readline.html#SEC34">2.4.5 Allowing Undoing</A>
<BR>
<A NAME="TOC35" HREF="readline.html#SEC35">2.4.6 Redisplay</A>
<BR>
<A NAME="TOC36" HREF="readline.html#SEC36">2.4.7 Modifying Text</A>
<BR>
<A NAME="TOC37" HREF="readline.html#SEC37">2.4.8 Character Input</A>
<BR>
<A NAME="TOC38" HREF="readline.html#SEC38">2.4.9 Terminal Management</A>
<BR>
<A NAME="TOC39" HREF="readline.html#SEC39">2.4.10 Utility Functions</A>
<BR>
<A NAME="TOC40" HREF="readline.html#SEC40">2.4.11 Miscellaneous Functions</A>
<BR>
<A NAME="TOC41" HREF="readline.html#SEC41">2.4.12 Alternate Interface</A>
<BR>
<A NAME="TOC42" HREF="readline.html#SEC42">2.4.13 A Readline Example</A>
<BR>
</UL>
<A NAME="TOC43" HREF="readline.html#SEC43">2.5 Readline Signal Handling</A>
<BR>
<A NAME="TOC44" HREF="readline.html#SEC44">2.6 Custom Completers</A>
<BR>
<UL>
<A NAME="TOC45" HREF="readline.html#SEC45">2.6.1 How Completing Works</A>
<BR>
<A NAME="TOC46" HREF="readline.html#SEC46">2.6.2 Completion Functions</A>
<BR>
<A NAME="TOC47" HREF="readline.html#SEC47">2.6.3 Completion Variables</A>
<BR>
<A NAME="TOC48" HREF="readline.html#SEC48">2.6.4 A Short Completion Example</A>
<BR>
</UL>
</UL>
<A NAME="TOC49" HREF="readline.html#SEC49">Concept Index</A>
<BR>
<A NAME="TOC50" HREF="readline.html#SEC50">Function and Variable Index</A>
<BR>
</UL>
<HR SIZE=1>
<A NAME="SEC_OVERVIEW"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H1>Short Table of Contents</H1>
<BLOCKQUOTE>
<A NAME="TOC1" HREF="readline.html#SEC1">1. Command Line Editing</A>
<BR>
<A NAME="TOC23" HREF="readline.html#SEC23">2. Programming with GNU Readline</A>
<BR>
<A NAME="TOC49" HREF="readline.html#SEC49">Concept Index</A>
<BR>
<A NAME="TOC50" HREF="readline.html#SEC50">Function and Variable Index</A>
<BR>

</BLOCKQUOTE>
<HR SIZE=1>
<A NAME="SEC_About"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H1>About this document</H1>
This document was generated by <I>Chet Ramey</I> on <I>June, 27  2002</I>
using <A HREF="http://www.mathematik.uni-kl.de/~obachman/Texi2html
"><I>texi2html</I></A>
<P></P>  
The buttons in the navigation panels have the following meaning:
<P></P>
<table border = "1">
<TR>
<TH> Button </TH>
<TH> Name </TH>
<TH> Go to </TH>
<TH> From 1.2.3 go to</TH>
</TR>
<TR>
<TD ALIGN="CENTER">
 [ &lt; ] </TD>
<TD ALIGN="CENTER">
Back
</TD>
<TD>
previous section in reading order
</TD>
<TD>
1.2.2
</TD>
</TR>
<TR>
<TD ALIGN="CENTER">
 [ &gt; ] </TD>
<TD ALIGN="CENTER">
Forward
</TD>
<TD>
next section in reading order
</TD>
<TD>
1.2.4
</TD>
</TR>
<TR>
<TD ALIGN="CENTER">
 [ &lt;&lt; ] </TD>
<TD ALIGN="CENTER">
FastBack
</TD>
<TD>
previous or up-and-previous section 
</TD>
<TD>
1.1
</TD>
</TR>
<TR>
<TD ALIGN="CENTER">
 [ Up ] </TD>
<TD ALIGN="CENTER">
Up
</TD>
<TD>
up section
</TD>
<TD>
1.2
</TD>
</TR>
<TR>
<TD ALIGN="CENTER">
 [ &gt;&gt; ] </TD>
<TD ALIGN="CENTER">
FastForward
</TD>
<TD>
next or up-and-next section
</TD>
<TD>
1.3
</TD>
</TR>
<TR>
<TD ALIGN="CENTER">
 [Top] </TD>
<TD ALIGN="CENTER">
Top
</TD>
<TD>
cover (top) of document
</TD>
<TD>
 &nbsp; 
</TD>
</TR>
<TR>
<TD ALIGN="CENTER">
 [Contents] </TD>
<TD ALIGN="CENTER">
Contents
</TD>
<TD>
table of contents
</TD>
<TD>
 &nbsp; 
</TD>
</TR>
<TR>
<TD ALIGN="CENTER">
 [Index] </TD>
<TD ALIGN="CENTER">
Index
</TD>
<TD>
concept index
</TD>
<TD>
 &nbsp; 
</TD>
</TR>
<TR>
<TD ALIGN="CENTER">
 [ ? ] </TD>
<TD ALIGN="CENTER">
About
</TD>
<TD>
this page
</TD>
<TD>
 &nbsp; 
</TD>
</TR>
</TABLE>
<P></P>
where the <STRONG> Example </STRONG> assumes that the current position 
is at <STRONG> Subsubsection One-Two-Three </STRONG> of a document of 
the following structure:
<UL>
<LI> 1. Section One  </LI>
<UL>
<LI>1.1 Subsection One-One</LI>
<UL>
<LI> ... </LI>
</UL>
<LI>1.2 Subsection One-Two</LI>
<UL>
<LI>1.2.1 Subsubsection One-Two-One
</LI><LI>1.2.2 Subsubsection One-Two-Two
</LI><LI>1.2.3 Subsubsection One-Two-Three &nbsp; &nbsp; <STRONG>
&lt;== Current Position </STRONG>
</LI><LI>1.2.4 Subsubsection One-Two-Four
</LI></UL>
<LI>1.3 Subsection One-Three</LI>
<UL>
<LI> ... </LI>
</UL>
<LI>1.4 Subsection One-Four</LI>
</UL>
</UL>
a3951 7
<HR SIZE=1>
<BR>  
<FONT SIZE="-1">
This document was generated
by <I>Chet Ramey</I> on <I>June, 27  2002</I>
using <A HREF="http://www.mathematik.uni-kl.de/~obachman/Texi2html
"><I>texi2html</I></A>
d3953 373
@


1.1.1.4
log
@import of readlilne 5.1
@
text
@d3 1
a3 1
<!-- Created on December, 6  2005 by texi2html 1.64 -->
d30 1
a30 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d36 2
a37 2
in the consistency of user interface across discrete programs which
provide a command line interface.
d43 2
a44 3
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC49">A. Copying This Manual</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Copying this manual.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC52">Concept Index</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Index of concepts described in this manual.</TD></TR>
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC53">Function and Variable Index</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">Index of externally visible functions
d59 1
a59 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d93 1
a93 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d152 1
a152 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d191 1
a191 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d253 1
a253 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d297 1
a297 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d382 1
a382 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d417 1
a417 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d479 1
a479 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d530 1
a530 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d565 1
a565 6
to case.  Unrecognized variable names are ignored.
</P><P>

Boolean variables (those that can be set to on or off) are set to on if
the value is null or empty, <VAR>on</VAR> (case-insensitive), or 1.  Any other
value results in the variable being set to off.
d584 1
a584 1
<DT><CODE>bind-tty-special-chars</CODE>
a585 7
If set to <SAMP>`on'</SAMP>, Readline attempts to bind the control characters  
treated specially by the kernel's terminal driver to their Readline
equivalents.
<P>

<DT><CODE>comment-begin</CODE>
<DD><A NAME="IDX7"></A>
d598 1
a598 1
<DD><A NAME="IDX8"></A>
d600 2
a601 2
asked whether the list of possibilities should be displayed.
If the number of possible completions is greater than this value,
a604 1
A negative value means Readline should never ask.
d609 1
a609 1
<DD><A NAME="IDX9"></A>
d617 1
a617 1
<DD><A NAME="IDX10"></A>
d624 1
a624 1
<DD><A NAME="IDX11"></A>
d632 1
a632 1
<DD><A NAME="IDX12"></A>
d639 1
a639 1
<DD><A NAME="IDX13"></A>
d644 1
a644 2
<DT><CODE>history-preserve-point</CODE>
<DD><A NAME="IDX14"></A>
d646 3
a648 3
same location on each history line retrieved with <CODE>previous-history</CODE>
or <CODE>next-history</CODE>.  The default is <SAMP>`off'</SAMP>.
<P>
d651 1
a651 1
<DD><A NAME="IDX15"></A>
d660 2
a661 2
<DD><A NAME="IDX16"></A>
<A NAME="IDX17"></A>
d670 1
a670 1
<DD><A NAME="IDX18"></A>
d678 1
a678 1
<DD><A NAME="IDX19"></A>
d701 1
a701 1
<DD><A NAME="IDX20"></A>
d708 1
a708 1
<DD><A NAME="IDX21"></A>
d716 1
a716 1
<DD><A NAME="IDX22"></A>
d725 1
a725 1
<DD><A NAME="IDX23"></A>
d732 1
a732 1
<DD><A NAME="IDX24"></A>
d745 1
a745 1
<DD><A NAME="IDX25"></A>
a752 12
<DT><CODE>show-all-if-unmodified</CODE>
<DD><A NAME="IDX26"></A>
This alters the default behavior of the completion functions in
a fashion similar to <VAR>show-all-if-ambiguous</VAR>.
If set to <SAMP>`on'</SAMP>, 
words which have more than one possible completion without any
possible partial completion (the possible completions don't share
a common prefix) cause the matches to be listed immediately instead
of ringing the bell.
The default value is <SAMP>`off'</SAMP>.
<P>

d754 1
a754 1
<DD><A NAME="IDX27"></A>
d913 1
a913 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d998 1
a998 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d1121 1
a1121 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d1162 1
a1162 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d1168 1
a1168 1
<A NAME="IDX28"></A>
d1170 1
a1170 1
<DD><A NAME="IDX29"></A>
d1174 1
a1174 1
<A NAME="IDX30"></A>
d1176 1
a1176 1
<DD><A NAME="IDX31"></A>
d1180 1
a1180 1
<A NAME="IDX32"></A>
d1182 1
a1182 1
<DD><A NAME="IDX33"></A>
d1186 1
a1186 1
<A NAME="IDX34"></A>
d1188 1
a1188 1
<DD><A NAME="IDX35"></A>
d1192 1
a1192 1
<A NAME="IDX36"></A>
d1194 1
a1194 1
<DD><A NAME="IDX37"></A>
d1199 1
a1199 1
<A NAME="IDX38"></A>
d1201 1
a1201 1
<DD><A NAME="IDX39"></A>
d1206 1
a1206 1
<A NAME="IDX40"></A>
d1208 1
a1208 1
<DD><A NAME="IDX41"></A>
d1213 1
a1213 1
<A NAME="IDX42"></A>
d1215 1
a1215 1
<DD><A NAME="IDX43"></A>
d1233 1
a1233 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d1241 1
a1241 1
<A NAME="IDX44"></A>
d1243 1
a1243 1
<DD><A NAME="IDX45"></A>
d1252 1
a1252 1
<A NAME="IDX46"></A>
d1254 1
a1254 1
<DD><A NAME="IDX47"></A>
d1258 1
a1258 1
<A NAME="IDX48"></A>
d1260 1
a1260 1
<DD><A NAME="IDX49"></A>
d1264 1
a1264 1
<A NAME="IDX50"></A>
d1266 1
a1266 1
<DD><A NAME="IDX51"></A>
d1270 1
a1270 1
<A NAME="IDX52"></A>
d1272 1
a1272 1
<DD><A NAME="IDX53"></A>
d1277 1
a1277 1
<A NAME="IDX54"></A>
d1279 1
a1279 1
<DD><A NAME="IDX55"></A>
d1284 1
a1284 1
<A NAME="IDX56"></A>
d1286 1
a1286 1
<DD><A NAME="IDX57"></A>
d1291 1
a1291 1
<A NAME="IDX58"></A>
d1293 1
a1293 1
<DD><A NAME="IDX59"></A>
d1299 1
a1299 1
<A NAME="IDX60"></A>
d1301 1
a1301 1
<DD><A NAME="IDX61"></A>
d1307 1
a1307 1
<A NAME="IDX62"></A>
d1309 1
a1309 1
<DD><A NAME="IDX63"></A>
d1316 1
a1316 1
<A NAME="IDX64"></A>
d1318 1
a1318 1
<DD><A NAME="IDX65"></A>
d1324 1
a1324 1
<A NAME="IDX66"></A>
d1326 1
a1326 1
<DD><A NAME="IDX67"></A>
a1332 2
Once the argument <VAR>n</VAR> is computed, the argument is extracted
as if the <SAMP>`!<VAR>n</VAR>'</SAMP> history expansion had been specified.
d1335 1
a1335 1
<A NAME="IDX68"></A>
d1337 1
a1337 1
<DD><A NAME="IDX69"></A>
a1342 2
The history expansion facilities are used to extract the last argument,
as if the <SAMP>`!$'</SAMP> history expansion had been specified.
d1359 1
a1359 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d1367 1
a1367 1
<A NAME="IDX70"></A>
d1369 1
a1369 1
<DD><A NAME="IDX71"></A>
d1376 1
a1376 1
<A NAME="IDX72"></A>
d1378 1
a1378 1
<DD><A NAME="IDX73"></A>
d1383 1
a1383 1
<A NAME="IDX74"></A>
d1385 1
a1385 1
<DD><A NAME="IDX75"></A>
d1391 1
a1391 1
<A NAME="IDX76"></A>
d1393 1
a1393 1
<DD><A NAME="IDX77"></A>
d1398 1
a1398 1
<A NAME="IDX78"></A>
d1400 1
a1400 1
<DD><A NAME="IDX79"></A>
d1404 1
a1404 1
<A NAME="IDX80"></A>
d1406 1
a1406 1
<DD><A NAME="IDX81"></A>
d1410 1
a1410 1
<A NAME="IDX82"></A>
d1412 1
a1412 1
<DD><A NAME="IDX83"></A>
d1421 1
a1421 1
<A NAME="IDX84"></A>
d1423 1
a1423 1
<DD><A NAME="IDX85"></A>
d1430 1
a1430 1
<A NAME="IDX86"></A>
d1432 1
a1432 1
<DD><A NAME="IDX87"></A>
d1437 1
a1437 1
<A NAME="IDX88"></A>
d1439 1
a1439 1
<DD><A NAME="IDX89"></A>
d1444 1
a1444 1
<A NAME="IDX90"></A>
d1446 1
a1446 1
<DD><A NAME="IDX91"></A>
d1451 1
a1451 1
<A NAME="IDX92"></A>
d1453 1
a1453 1
<DD><A NAME="IDX93"></A>
d1484 1
a1484 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d1493 1
a1493 1
<A NAME="IDX94"></A>
d1495 1
a1495 1
<DD><A NAME="IDX95"></A>
d1499 1
a1499 1
<A NAME="IDX96"></A>
d1501 1
a1501 1
<DD><A NAME="IDX97"></A>
d1505 1
a1505 1
<A NAME="IDX98"></A>
d1507 1
a1507 1
<DD><A NAME="IDX99"></A>
d1511 1
a1511 1
<A NAME="IDX100"></A>
d1513 1
a1513 1
<DD><A NAME="IDX101"></A>
d1518 1
a1518 1
<A NAME="IDX102"></A>
d1520 1
a1520 1
<DD><A NAME="IDX103"></A>
d1526 1
a1526 1
<A NAME="IDX104"></A>
d1528 1
a1528 1
<DD><A NAME="IDX105"></A>
d1533 1
a1533 1
<A NAME="IDX106"></A>
d1535 1
a1535 1
<DD><A NAME="IDX107"></A>
d1540 1
a1540 9
<A NAME="IDX108"></A>
<DT><CODE>unix-filename-rubout ()</CODE>
<DD><A NAME="IDX109"></A>
Kill the word behind point, using white space and the slash character
as the word boundaries.
The killed text is saved on the kill-ring.
<P>

<A NAME="IDX110"></A>
d1542 1
a1542 1
<DD><A NAME="IDX111"></A>
d1546 1
a1546 1
<A NAME="IDX112"></A>
d1548 1
a1548 1
<DD><A NAME="IDX113"></A>
d1553 1
a1553 1
<A NAME="IDX114"></A>
d1555 1
a1555 1
<DD><A NAME="IDX115"></A>
d1560 1
a1560 1
<A NAME="IDX116"></A>
d1562 1
a1562 1
<DD><A NAME="IDX117"></A>
d1568 1
a1568 1
<A NAME="IDX118"></A>
d1570 1
a1570 1
<DD><A NAME="IDX119"></A>
d1576 1
a1576 1
<A NAME="IDX120"></A>
d1578 1
a1578 1
<DD><A NAME="IDX121"></A>
d1582 1
a1582 1
<A NAME="IDX122"></A>
d1584 1
a1584 1
<DD><A NAME="IDX123"></A>
d1601 1
a1601 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d1608 1
a1608 1
<A NAME="IDX124"></A>
d1610 1
a1610 1
<DD><A NAME="IDX125"></A>
d1615 1
a1615 1
<A NAME="IDX126"></A>
d1617 1
a1617 1
<DD><A NAME="IDX127"></A>
d1644 1
a1644 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d1652 1
a1652 1
<A NAME="IDX128"></A>
d1654 1
a1654 1
<DD><A NAME="IDX129"></A>
d1660 1
a1660 1
<A NAME="IDX130"></A>
d1662 1
a1662 1
<DD><A NAME="IDX131"></A>
d1666 1
a1666 1
<A NAME="IDX132"></A>
d1668 1
a1668 1
<DD><A NAME="IDX133"></A>
d1673 1
a1673 1
<A NAME="IDX134"></A>
d1675 1
a1675 1
<DD><A NAME="IDX135"></A>
d1690 1
a1690 1
<A NAME="IDX136"></A>
d1692 1
a1692 1
<DD><A NAME="IDX137"></A>
d1714 1
a1714 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d1721 1
a1721 1
<A NAME="IDX138"></A>
d1723 1
a1723 1
<DD><A NAME="IDX139"></A>
d1727 1
a1727 1
<A NAME="IDX140"></A>
d1729 1
a1729 1
<DD><A NAME="IDX141"></A>
d1734 1
a1734 1
<A NAME="IDX142"></A>
d1736 1
a1736 1
<DD><A NAME="IDX143"></A>
d1755 1
a1755 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d1762 1
a1762 1
<A NAME="IDX144"></A>
d1764 1
a1764 1
<DD><A NAME="IDX145"></A>
d1769 1
a1769 1
<A NAME="IDX146"></A>
d1771 1
a1771 1
<DD><A NAME="IDX147"></A>
d1777 1
a1777 1
<A NAME="IDX148"></A>
d1779 1
a1779 1
<DD><A NAME="IDX149"></A>
d1784 1
a1784 1
<A NAME="IDX150"></A>
d1786 1
a1786 1
<DD><A NAME="IDX151"></A>
d1792 1
a1792 1
<A NAME="IDX152"></A>
d1794 1
a1794 1
<DD><A NAME="IDX153"></A>
d1798 1
a1798 1
<A NAME="IDX154"></A>
d1800 1
a1800 1
<DD><A NAME="IDX155"></A>
d1805 1
a1805 1
<A NAME="IDX156"></A>
d1807 1
a1807 1
<DD><A NAME="IDX157"></A>
d1811 1
a1811 1
<A NAME="IDX158"></A>
d1813 1
a1813 1
<DD><A NAME="IDX159"></A>
d1818 1
a1818 1
<A NAME="IDX160"></A>
d1820 1
a1820 1
<DD><A NAME="IDX161"></A>
d1825 1
a1825 1
<A NAME="IDX162"></A>
d1827 1
a1827 1
<DD><A NAME="IDX163"></A>
d1832 1
a1832 1
<A NAME="IDX164"></A>
d1834 1
a1834 1
<DD><A NAME="IDX165"></A>
d1840 1
a1840 1
<A NAME="IDX166"></A>
d1842 1
a1842 1
<DD><A NAME="IDX167"></A>
d1853 1
a1853 1
<A NAME="IDX168"></A>
d1855 1
a1855 1
<DD><A NAME="IDX169"></A>
d1862 1
a1862 1
<A NAME="IDX170"></A>
d1864 1
a1864 1
<DD><A NAME="IDX171"></A>
d1871 1
a1871 1
<A NAME="IDX172"></A>
d1873 1
a1873 1
<DD><A NAME="IDX173"></A>
d1880 1
a1880 1
<A NAME="IDX174"></A>
d1882 1
a1882 1
<DD><A NAME="IDX175"></A>
d1887 1
a1887 1
<A NAME="IDX176"></A>
d1889 1
a1889 1
<DD><A NAME="IDX177"></A>
d1908 1
a1908 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d1936 1
a1936 1
in the consistency of user interface across discrete programs that need
d1940 1
a1940 1
Copyright (C) 1988-2005 Free Software Foundation, Inc.
d1968 1
a1968 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49"> &gt;&gt; </A>]</TD>
d1971 1
a1971 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d2007 1
a2007 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49"> &gt;&gt; </A>]</TD>
d2010 1
a2010 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d2024 2
a2025 2
<A NAME="IDX178"></A>
<A NAME="IDX179"></A>
d2134 1
a2134 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d2184 1
a2184 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d2281 1
a2281 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
a2315 2
This is the convention obeyed by all of the builtin Readline bindable
command functions.
d2326 1
a2326 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49"> &gt;&gt; </A>]</TD>
d2329 1
a2329 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d2339 1
a2339 1
<A NAME="IDX180"></A>
d2349 1
a2349 1
<A NAME="IDX181"></A>
d2357 1
a2357 1
<A NAME="IDX182"></A>
d2366 1
a2366 1
<A NAME="IDX183"></A>
d2374 1
a2374 1
<A NAME="IDX184"></A>
d2382 1
a2382 1
<A NAME="IDX185"></A>
d2391 1
a2391 1
<A NAME="IDX186"></A>
d2399 1
a2399 1
<A NAME="IDX187"></A>
d2408 1
a2408 1
<A NAME="IDX188"></A>
d2418 1
a2418 1
<A NAME="IDX189"></A>
d2428 1
a2428 1
<A NAME="IDX190"></A>
d2441 1
a2441 1
<A NAME="IDX191"></A>
d2448 1
a2448 1
<A NAME="IDX192"></A>
d2459 1
a2459 1
<A NAME="IDX193"></A>
d2467 1
a2467 1
<A NAME="IDX194"></A>
d2476 1
a2476 1
<A NAME="IDX195"></A>
d2485 1
a2485 1
<A NAME="IDX196"></A>
d2493 1
a2493 1
<A NAME="IDX197"></A>
d2501 1
a2501 10
<A NAME="IDX198"></A>
<DL>
<DT><U>Variable:</U> int <B>rl_prefer_env_winsize</B>
<DD>If non-zero, Readline gives values found in the <CODE>LINES</CODE> and
<CODE>COLUMNS</CODE> environment variables greater precedence than values fetched
from the kernel when computing the screen dimensions.
</DL>
</P><P>

<A NAME="IDX199"></A>
d2510 1
a2510 1
<A NAME="IDX200"></A>
d2518 1
a2518 1
<A NAME="IDX201"></A>
d2527 1
a2527 1
<A NAME="IDX202"></A>
d2537 1
a2537 1
<A NAME="IDX203"></A>
d2547 1
a2547 1
<A NAME="IDX204"></A>
d2557 1
a2557 1
<A NAME="IDX205"></A>
d2568 1
a2568 1
<A NAME="IDX206"></A>
d2579 1
a2579 1
<A NAME="IDX207"></A>
d2587 1
a2587 1
<A NAME="IDX208"></A>
d2595 1
a2595 1
<A NAME="IDX209"></A>
d2602 1
a2602 1
<A NAME="IDX210"></A>
d2658 1
a2658 1
<A NAME="IDX211"></A>
d2666 1
a2666 1
<A NAME="IDX212"></A>
d2675 1
a2675 1
<A NAME="IDX213"></A>
d2695 1
a2695 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d2731 1
a2731 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d2753 1
a2753 1
<A NAME="IDX214"></A>
d2762 5
a2766 5
Using this function alone is sufficient for most applications.
It is the recommended way to add a few functions to the default
functions that Readline has built in.
If you need to do something other than adding a function to Readline,
you may need to use the underlying functions described below.
d2780 1
a2780 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d2793 1
a2793 1
<A NAME="IDX215"></A>
d2802 1
a2802 1
<A NAME="IDX216"></A>
d2809 1
a2809 1
<A NAME="IDX217"></A>
d2818 1
a2818 1
<A NAME="IDX218"></A>
d2829 1
a2829 1
<A NAME="IDX219"></A>
d2836 1
a2836 1
<A NAME="IDX220"></A>
d2843 1
a2843 1
<A NAME="IDX221"></A>
d2851 1
a2851 1
<A NAME="IDX222"></A>
d2870 1
a2870 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d2896 1
a2896 1
<A NAME="IDX223"></A>
d2904 1
a2904 1
<A NAME="IDX224"></A>
d2907 2
a2908 2
<DD>Bind <VAR>key</VAR> to <VAR>function</VAR> in <VAR>map</VAR>.
Returns non-zero in the case of an invalid <VAR>key</VAR>.
d2912 1
a2912 20
<A NAME="IDX225"></A>
<DL>
<DT><U>Function:</U> int <B>rl_bind_key_if_unbound</B> <I>(int key, rl_command_func_t *function)</I>
<DD>Binds <VAR>key</VAR> to <VAR>function</VAR> if it is not already bound in the
currently active keymap.
Returns non-zero in the case of an invalid <VAR>key</VAR> or if <VAR>key</VAR> is
already bound.
</DL>
</P><P>

<A NAME="IDX226"></A>
<DL>
<DT><U>Function:</U> int <B>rl_bind_key_if_unbound_in_map</B> <I>(int key, rl_command_func_t *function, Keymap map)</I>
<DD>Binds <VAR>key</VAR> to <VAR>function</VAR> if it is not already bound in <VAR>map</VAR>.
Returns non-zero in the case of an invalid <VAR>key</VAR> or if <VAR>key</VAR> is
already bound.
</DL>
</P><P>

<A NAME="IDX227"></A>
d2920 1
a2920 1
<A NAME="IDX228"></A>
d2928 1
a2928 1
<A NAME="IDX229"></A>
d2935 1
a2935 1
<A NAME="IDX230"></A>
d2942 1
a2942 1
<A NAME="IDX231"></A>
d2944 1
a2944 1
<DT><U>Function:</U> int <B>rl_bind_keyseq</B> <I>(const char *keyseq, rl_command_func_t *function)</I>
d2946 2
a2947 3
<VAR>function</VAR>, beginning in the current keymap.
This makes new keymaps as necessary.
The return value is non-zero if <VAR>keyseq</VAR> is invalid.
d2951 1
a2951 37
<A NAME="IDX232"></A>
<DL>
<DT><U>Function:</U> int <B>rl_bind_keyseq_in_map</B> <I>(const char *keyseq, rl_command_func_t *function, Keymap map)</I>
<DD>Bind the key sequence represented by the string <VAR>keyseq</VAR> to the function
<VAR>function</VAR>.  This makes new keymaps as necessary.
Initial bindings are performed in <VAR>map</VAR>.
The return value is non-zero if <VAR>keyseq</VAR> is invalid.
</DL>
</P><P>

<A NAME="IDX233"></A>
<DL>
<DT><U>Function:</U> int <B>rl_set_key</B> <I>(const char *keyseq, rl_command_func_t *function, Keymap map)</I>
<DD>Equivalent to <CODE>rl_bind_keyseq_in_map</CODE>.
</DL>
</P><P>

<A NAME="IDX234"></A>
<DL>
<DT><U>Function:</U> int <B>rl_bind_keyseq_if_unbound</B> <I>(const char *keyseq, rl_command_func_t *function)</I>
<DD>Binds <VAR>keyseq</VAR> to <VAR>function</VAR> if it is not already bound in the
currently active keymap.
Returns non-zero in the case of an invalid <VAR>keyseq</VAR> or if <VAR>keyseq</VAR> is
already bound.
</DL>
</P><P>

<A NAME="IDX235"></A>
<DL>
<DT><U>Function:</U> int <B>rl_bind_keyseq_if_unbound_in_map</B> <I>(const char *keyseq, rl_command_func_t *function, Keymap map)</I>
<DD>Binds <VAR>keyseq</VAR> to <VAR>function</VAR> if it is not already bound in <VAR>map</VAR>.
Returns non-zero in the case of an invalid <VAR>keyseq</VAR> or if <VAR>keyseq</VAR> is
already bound.
</DL>
</P><P>

<A NAME="IDX236"></A>
d2962 1
a2962 1
<A NAME="IDX237"></A>
d2971 1
a2971 1
<A NAME="IDX238"></A>
d2990 1
a2990 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d3002 1
a3002 1
<A NAME="IDX239"></A>
d3009 1
a3009 1
<A NAME="IDX240"></A>
d3019 1
a3019 1
<A NAME="IDX241"></A>
d3027 1
a3027 1
<A NAME="IDX242"></A>
d3035 1
a3035 1
<A NAME="IDX243"></A>
d3045 1
a3045 1
<A NAME="IDX244"></A>
d3052 1
a3052 1
<A NAME="IDX245"></A>
d3061 1
a3061 1
<A NAME="IDX246"></A>
d3080 1
a3080 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d3116 1
a3116 1
<A NAME="IDX247"></A>
d3126 1
a3126 1
<A NAME="IDX248"></A>
d3135 1
a3135 1
<A NAME="IDX249"></A>
d3143 1
a3143 1
<A NAME="IDX250"></A>
d3150 1
a3150 1
<A NAME="IDX251"></A>
d3164 1
a3164 1
<A NAME="IDX252"></A>
d3184 1
a3184 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d3191 1
a3191 1
<A NAME="IDX253"></A>
d3199 1
a3199 1
<A NAME="IDX254"></A>
d3207 1
a3207 1
<A NAME="IDX255"></A>
d3215 1
a3215 1
<A NAME="IDX256"></A>
d3227 1
a3227 1
<A NAME="IDX257"></A>
d3235 1
a3235 1
<A NAME="IDX258"></A>
d3242 1
a3242 1
<A NAME="IDX259"></A>
d3253 1
a3253 1
<A NAME="IDX260"></A>
a3260 2
You should call <CODE>rl_save_prompt</CODE> to save the prompt information
before calling this function.
d3264 1
a3264 1
<A NAME="IDX261"></A>
d3267 1
a3267 3
<DD>Clear the message in the echo area.  If the prompt was saved with a call to
<CODE>rl_save_prompt</CODE> before the last call to <CODE>rl_message</CODE>,
call <CODE>rl_restore_prompt</CODE> before calling this function.
d3271 1
a3271 1
<A NAME="IDX262"></A>
d3279 1
a3279 1
<A NAME="IDX263"></A>
a3283 3
if <CODE>rl_save_prompt</CODE> was called to save the prompt before a call
to <CODE>rl_message</CODE>, this function should be called before the
corresponding call to <CODE>rl_clear_message</CODE>.
d3287 1
a3287 1
<A NAME="IDX264"></A>
a3296 5
Applications may indicate that the prompt contains characters that take
up no physical screen space when displayed by bracketing a sequence of
such characters with the special markers <CODE>RL_PROMPT_START_IGNORE</CODE>
and <CODE>RL_PROMPT_END_IGNORE</CODE> (declared in <TT>`readline.h'</TT>.  This may
be used to embed terminal-specific escape sequences in prompts.
d3300 1
a3300 1
<A NAME="IDX265"></A>
d3320 1
a3320 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d3327 1
a3327 1
<A NAME="IDX266"></A>
d3335 1
a3335 1
<A NAME="IDX267"></A>
d3343 1
a3343 1
<A NAME="IDX268"></A>
d3351 1
a3351 1
<A NAME="IDX269"></A>
d3363 1
a3363 1
<A NAME="IDX270"></A>
d3383 1
a3383 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d3390 1
a3390 1
<A NAME="IDX271"></A>
d3402 1
a3402 1
<A NAME="IDX272"></A>
d3410 1
a3410 1
<A NAME="IDX273"></A>
d3421 1
a3421 1
<A NAME="IDX274"></A>
d3429 1
a3429 1
<A NAME="IDX275"></A>
d3438 1
a3438 1
<A NAME="IDX276"></A>
d3459 1
a3459 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d3466 1
a3466 1
<A NAME="IDX277"></A>
d3476 1
a3476 1
<A NAME="IDX278"></A>
d3485 1
a3485 1
<A NAME="IDX279"></A>
d3488 3
a3490 3
<DD>Read the operating system's terminal editing characters (as would be
displayed by <CODE>stty</CODE>) to their Readline equivalents.
The bindings are performed in <VAR>kmap</VAR>.
d3494 1
a3494 10
<A NAME="IDX280"></A>
<DL>
<DT><U>Function:</U> void <B>rl_tty_unset_default_bindings</B> <I>(Keymap kmap)</I>
<DD>Reset the bindings manipulated by <CODE>rl_tty_set_default_bindings</CODE> so
that the terminal editing characters are bound to <CODE>rl_insert</CODE>.
The bindings are performed in <VAR>kmap</VAR>.
</DL>
</P><P>

<A NAME="IDX281"></A>
d3515 1
a3515 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d3522 1
a3522 1
<A NAME="IDX282"></A>
d3532 1
a3532 1
<A NAME="IDX283"></A>
d3540 1
a3540 1
<A NAME="IDX284"></A>
d3549 1
a3549 1
<A NAME="IDX285"></A>
d3556 1
a3556 1
<A NAME="IDX286"></A>
d3563 1
a3563 1
<A NAME="IDX287"></A>
d3580 1
a3580 1
<A NAME="IDX288"></A>
d3587 1
a3587 1
<A NAME="IDX289"></A>
d3594 1
a3594 1
<A NAME="IDX290"></A>
d3601 1
a3601 1
<A NAME="IDX291"></A>
d3609 1
a3609 1
<A NAME="IDX292"></A>
d3617 1
a3617 1
<A NAME="IDX293"></A>
d3635 1
a3635 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d3642 1
a3642 1
<A NAME="IDX294"></A>
d3652 1
a3652 1
<A NAME="IDX295"></A>
d3662 1
a3662 1
<A NAME="IDX296"></A>
d3672 1
a3672 9
<A NAME="IDX297"></A>
<DL>
<DT><U>Function:</U> char * <B>rl_variable_value</B> <I>(const char *variable)</I>
<DD>Return a string representing the value of the Readline variable <VAR>variable</VAR>.
For boolean variables, this string is either <SAMP>`on'</SAMP> or <SAMP>`off'</SAMP>.
</DL>
</P><P>

<A NAME="IDX298"></A>
d3682 1
a3682 1
<A NAME="IDX299"></A>
d3690 1
a3690 1
<A NAME="IDX300"></A>
d3713 1
a3713 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d3728 1
a3728 1
<A NAME="IDX301"></A>
d3738 1
a3738 1
<A NAME="IDX302"></A>
d3757 1
a3757 1
<A NAME="IDX303"></A>
d3780 1
a3780 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d3859 1
a3859 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49"> &gt;&gt; </A>]</TD>
d3862 1
a3862 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d3915 1
a3915 1
<A NAME="IDX304"></A>
d3927 1
a3927 1
<A NAME="IDX305"></A>
d3945 1
a3945 1
<A NAME="IDX306"></A>
d3955 1
a3955 1
<A NAME="IDX307"></A>
d3967 1
a3967 1
<A NAME="IDX308"></A>
d3982 1
a3982 1
<A NAME="IDX309"></A>
d3989 1
a3989 1
<A NAME="IDX310"></A>
d3993 1
a3993 2
<VAR>cols</VAR> columns.  If either <VAR>rows</VAR> or <VAR>columns</VAR> is less than
or equal to 0, Readline's idea of that terminal dimension is unchanged.
d4002 1
a4002 1
<A NAME="IDX311"></A>
a4009 7
<A NAME="IDX312"></A>
<DL>
<DT><U>Function:</U> void <B>rl_reset_screen_size</B> <I>(void)</I>
<DD>Cause Readline to reobtain the screen size and recalculate its dimensions.
</DL>
</P><P>

d4013 1
a4013 1
<A NAME="IDX313"></A>
d4023 1
a4023 1
<A NAME="IDX314"></A>
d4039 1
a4039 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49"> &gt;&gt; </A>]</TD>
d4042 1
a4042 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d4072 1
a4072 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49"> &gt;&gt; </A>]</TD>
d4075 1
a4075 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
a4128 2
Such a generator function is referred to as an
<EM>application-specific completion function</EM>.
d4134 1
a4134 1
<A NAME="IDX315"></A>
d4143 1
a4143 1
<A NAME="IDX316"></A>
a4150 3
An <EM>application-specific completion function</EM> is a function whose
address is assigned to <CODE>rl_completion_entry_function</CODE> and whose
return values are used to  generate possible completions.
d4162 1
a4162 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49"> &gt;&gt; </A>]</TD>
d4165 1
a4165 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d4176 1
a4176 1
<A NAME="IDX317"></A>
d4184 1
a4184 3
performing partial completion.  <SAMP>`@@'</SAMP> is similar to <SAMP>`!'</SAMP>, but
possible completions are not listed if the possible completions share
a common prefix.
d4188 1
a4188 1
<A NAME="IDX318"></A>
d4200 1
a4200 1
<A NAME="IDX319"></A>
d4209 1
a4209 1
<A NAME="IDX320"></A>
d4218 1
a4218 1
<A NAME="IDX321"></A>
d4223 1
a4223 2
the values of the <CODE>show-all-if-ambiguous</CODE> and
<CODE>show-all-if-unmodified</CODE> variables.
d4229 1
a4229 1
<A NAME="IDX322"></A>
d4247 1
a4247 1
<A NAME="IDX323"></A>
d4252 1
a4252 1
The Bash source is a useful reference for writing application-specific
d4258 1
a4258 1
<A NAME="IDX324"></A>
d4276 1
a4276 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49"> &gt;&gt; </A>]</TD>
d4279 1
a4279 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d4286 1
a4286 1
<A NAME="IDX325"></A>
d4290 2
a4291 2
<CODE>NULL</CODE> means to use <CODE>rl_filename_completion_function()</CODE>,
the default filename completer.
d4295 1
a4295 1
<A NAME="IDX326"></A>
d4312 1
a4312 1
<A NAME="IDX327"></A>
d4329 1
a4329 1
<A NAME="IDX328"></A>
d4342 1
a4342 1
<A NAME="IDX329"></A>
d4355 1
a4355 1
<A NAME="IDX330"></A>
d4368 1
a4368 1
<A NAME="IDX331"></A>
d4384 1
a4384 1
<A NAME="IDX332"></A>
d4401 1
a4401 1
<A NAME="IDX333"></A>
d4411 1
a4411 1
<A NAME="IDX334"></A>
d4418 1
a4418 1
<A NAME="IDX335"></A>
d4427 1
a4427 13
<A NAME="IDX336"></A>
<DL>
<DT><U>Variable:</U> rl_cpvfunc_t * <B>rl_completion_word_break_hook</B>
<DD>If non-zero, this is the address of a function to call when Readline is
deciding where to separate words for word completion.  It should return
a character string like <CODE>rl_completer_word_break_characters</CODE> to be
used to perform the current completion.  The function may choose to set
<CODE>rl_completer_word_break_characters</CODE> itself.  If the function
returns <CODE>NULL</CODE>, <CODE>rl_completer_word_break_characters</CODE> is used.
</DL>
</P><P>

<A NAME="IDX337"></A>
d4437 1
a4437 1
<A NAME="IDX338"></A>
d4445 1
a4445 1
<A NAME="IDX339"></A>
d4456 1
a4456 1
<A NAME="IDX340"></A>
d4460 2
a4461 3
possible-completions call.  After that, readline asks the user if she is sure
she wants to see them all.  The default value is 100.  A negative value 
indicates that Readline should never ask the user.
d4465 1
a4465 1
<A NAME="IDX341"></A>
d4472 1
a4472 1
This can be changed in application-specific completion functions to
d4478 1
a4478 1
<A NAME="IDX342"></A>
d4482 2
a4483 3
matches at the end of the command line, as described above.
It is set to 0 before any application-specific completion function
is called, and may only be changed within such a function.
d4487 1
a4487 31
<A NAME="IDX343"></A>
<DL>
<DT><U>Variable:</U> int <B>rl_completion_quote_character</B>
<DD>When Readline is completing quoted text, as delimited by one of the
characters in <VAR>rl_completer_quote_characters</VAR>, it sets this variable
to the quoting character found.
This is set before any application-specific completion function is called.
</DL>
</P><P>

<A NAME="IDX344"></A>
<DL>
<DT><U>Variable:</U> int <B>rl_completion_suppress_quote</B>
<DD>If non-zero, Readline does not append a matching quote character when
performing completion on a quoted string.
It is set to 0 before any application-specific completion function
is called, and may only be changed within such a function.
</DL>
</P><P>

<A NAME="IDX345"></A>
<DL>
<DT><U>Variable:</U> int <B>rl_completion_found_quote</B>
<DD>When Readline is completing quoted text, it sets this variable
to a non-zero value if the word being completed contains or is delimited
by any quoting characters, including backslashes.
This is set before any application-specific completion function is called.
</DL>
</P><P>

<A NAME="IDX346"></A>
d4493 2
a4494 2
This variable exists so that application-specific completion functions
can override the user's global preference (set via the
d4497 2
a4498 2
application-specific completion function is called, so unless that
function modifies the value, the user's preferences are honored.
d4502 1
a4502 1
<A NAME="IDX347"></A>
d4510 1
a4510 1
<A NAME="IDX348"></A>
d4514 6
a4519 7
filenames.  This is <EM>always</EM> zero when completion is attempted,
and can only be changed
within an application-specific completion function.  If it is set to a
non-zero value by such a function, directory names have a slash appended
and Readline attempts to quote completed filenames if they contain any
characters in <CODE>rl_filename_quote_characters</CODE> and
<CODE>rl_filename_quoting_desired</CODE> is set to a non-zero value.
d4523 1
a4523 1
<A NAME="IDX349"></A>
d4530 2
a4531 3
when completion is attempted, and can only be changed within an
application-specific completion function.
The quoting is effected via a call to the function pointed to
d4536 1
a4536 1
<A NAME="IDX350"></A>
d4547 1
a4547 1
<A NAME="IDX351"></A>
a4552 3
This is set to the appropriate value before any application-specific
completion function is called, allowing such functions to present
the same interface as <CODE>rl_complete()</CODE>.
d4556 1
a4556 1
<A NAME="IDX352"></A>
d4572 1
a4572 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49"> &gt;&gt; </A>]</TD>
d4575 1
a4575 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d5005 1
a5005 1
           "%s: Too dangerous for me to distribute.\n",
d5026 1
a5026 1
<A NAME="Copying This Manual"></A>
a5031 561
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC23"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[ &gt;&gt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H1> A. Copying This Manual </H1>
<!--docid::SEC49::-->
<P>

<BLOCKQUOTE><TABLE BORDER=0 CELLSPACING=0> 
<TR><TD ALIGN="left" VALIGN="TOP"><A HREF="readline.html#SEC50">A.1 GNU Free Documentation License</A></TD><TD>&nbsp;&nbsp;</TD><TD ALIGN="left" VALIGN="TOP">License for copying this manual.</TD></TR>
</TABLE></BLOCKQUOTE>
<P>

<A NAME="GNU Free Documentation License"></A>
<HR SIZE="6">
<A NAME="SEC50"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC51"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[ &gt;&gt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H2> A.1 GNU Free Documentation License </H2>
<!--docid::SEC50::-->
<P>

<A NAME="IDX353"></A>
<center>
 Version 1.2, November 2002
</center>
</P><P>

<TABLE><tr><td>&nbsp;</td><td class=display><pre style="font-family: serif">Copyright (C) 2000,2001,2002 Free Software Foundation, Inc.
59 Temple Place, Suite 330, Boston, MA  02111-1307, USA

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
</pre></td></tr></table></P><P>

<OL>
<LI>
PREAMBLE
<P>

The purpose of this License is to make a manual, textbook, or other
functional and useful document <EM>free</EM> in the sense of freedom: to
assure everyone the effective freedom to copy and redistribute it,
with or without modifying it, either commercially or noncommercially.
Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible
for modifications made by others.
</P><P>

This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.
</P><P>

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.
</P><P>

<LI>
APPLICABILITY AND DEFINITIONS
<P>

This License applies to any manual or other work, in any medium, that
contains a notice placed by the copyright holder saying it can be
distributed under the terms of this License.  Such a notice grants a
world-wide, royalty-free license, unlimited in duration, to use that
work under the conditions stated herein.  The "Document", below,
refers to any such manual or work.  Any member of the public is a
licensee, and is addressed as "you".  You accept the license if you
copy, modify or distribute the work in a way requiring permission
under copyright law.
</P><P>

A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.
</P><P>

A "Secondary Section" is a named appendix or a front-matter section
of the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall
subject (or to related matters) and contains nothing that could fall
directly within that overall subject.  (Thus, if the Document is in
part a textbook of mathematics, a Secondary Section may not explain
any mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.
</P><P>

The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.  If a
section does not fit the above definition of Secondary then it is not
allowed to be designated as Invariant.  The Document may contain zero
Invariant Sections.  If the Document does not identify any Invariant
Sections then there are none.
</P><P>

The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.  A Front-Cover Text may
be at most 5 words, and a Back-Cover Text may be at most 25 words.
</P><P>

A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, that is suitable for revising the document
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup, or absence of markup, has been arranged to thwart
or discourage subsequent modification by readers is not Transparent.
An image format is not Transparent if used for any substantial amount
of text.  A copy that is not "Transparent" is called "Opaque".
</P><P>

Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input
format, <FONT SIZE="-1">SGML</FONT> or <FONT SIZE="-1">XML</FONT> using a publicly available
<FONT SIZE="-1">DTD</FONT>, and standard-conforming simple <FONT SIZE="-1">HTML</FONT>,
PostScript or <FONT SIZE="-1">PDF</FONT> designed for human modification.  Examples
of transparent image formats include <FONT SIZE="-1">PNG</FONT>, <FONT SIZE="-1">XCF</FONT> and
<FONT SIZE="-1">JPG</FONT>.  Opaque formats include proprietary formats that can be
read and edited only by proprietary word processors, <FONT SIZE="-1">SGML</FONT> or
<FONT SIZE="-1">XML</FONT> for which the <FONT SIZE="-1">DTD</FONT> and/or processing tools are
not generally available, and the machine-generated <FONT SIZE="-1">HTML</FONT>,
PostScript or <FONT SIZE="-1">PDF</FONT> produced by some word processors for
output purposes only.
</P><P>

The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.
</P><P>

A section "Entitled XYZ" means a named subunit of the Document whose
title either is precisely XYZ or contains XYZ in parentheses following
text that translates XYZ in another language.  (Here XYZ stands for a
specific section name mentioned below, such as "Acknowledgements",
"Dedications", "Endorsements", or "History".)  To "Preserve the Title"
of such a section when you modify the Document means that it remains a
section "Entitled XYZ" according to this definition.
</P><P>

The Document may include Warranty Disclaimers next to the notice which
states that this License applies to the Document.  These Warranty
Disclaimers are considered to be included by reference in this
License, but only as regards disclaiming warranties: any other
implication that these Warranty Disclaimers may have is void and has
no effect on the meaning of this License.
</P><P>

<LI>
VERBATIM COPYING
<P>

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.
</P><P>

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.
</P><P>

<LI>
COPYING IN QUANTITY
<P>

If you publish printed copies (or copies in media that commonly have
printed covers) of the Document, numbering more than 100, and the
Document's license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.
</P><P>

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.
</P><P>

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a computer-network location from which the general network-using
public has access to download using public-standard network protocols
a complete Transparent copy of the Document, free of added material.
If you use the latter option, you must take reasonably prudent steps,
when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.
</P><P>

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.
</P><P>

<LI>
MODIFICATIONS
<P>

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:
</P><P>

<OL>
<LI>
Use in the Title Page (and on the covers, if any) a title distinct
from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.
<P>

<LI>
List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has fewer than five),
unless they release you from this requirement.
<P>

<LI>
State on the Title page the name of the publisher of the
Modified Version, as the publisher.
<P>

<LI>
Preserve all the copyright notices of the Document.
<P>

<LI>
Add an appropriate copyright notice for your modifications
adjacent to the other copyright notices.
<P>

<LI>
Include, immediately after the copyright notices, a license notice
giving the public permission to use the Modified Version under the
terms of this License, in the form shown in the Addendum below.
<P>

<LI>
Preserve in that license notice the full lists of Invariant Sections
and required Cover Texts given in the Document's license notice.
<P>

<LI>
Include an unaltered copy of this License.
<P>

<LI>
Preserve the section Entitled "History", Preserve its Title, and add
to it an item stating at least the title, year, new authors, and
publisher of the Modified Version as given on the Title Page.  If
there is no section Entitled "History" in the Document, create one
stating the title, year, authors, and publisher of the Document as
given on its Title Page, then add an item describing the Modified
Version as stated in the previous sentence.
<P>

<LI>
Preserve the network location, if any, given in the Document for
public access to a Transparent copy of the Document, and likewise
the network locations given in the Document for previous versions
it was based on.  These may be placed in the "History" section.
You may omit a network location for a work that was published at
least four years before the Document itself, or if the original
publisher of the version it refers to gives permission.
<P>

<LI>
For any section Entitled "Acknowledgements" or "Dedications", Preserve
the Title of the section, and preserve in the section all the
substance and tone of each of the contributor acknowledgements and/or
dedications given therein.
<P>

<LI>
Preserve all the Invariant Sections of the Document,
unaltered in their text and in their titles.  Section numbers
or the equivalent are not considered part of the section titles.
<P>

<LI>
Delete any section Entitled "Endorsements".  Such a section
may not be included in the Modified Version.
<P>

<LI>
Do not retitle any existing section to be Entitled "Endorsements" or
to conflict in title with any Invariant Section.
<P>

<LI>
Preserve any Warranty Disclaimers.
</OL>
<P>

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.
</P><P>

You may add a section Entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties--for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.
</P><P>

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.
</P><P>

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.
</P><P>

<LI>
COMBINING DOCUMENTS
<P>

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice, and that you preserve all their Warranty Disclaimers.
</P><P>

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.
</P><P>

In the combination, you must combine any sections Entitled "History"
in the various original documents, forming one section Entitled
"History"; likewise combine any sections Entitled "Acknowledgements",
and any sections Entitled "Dedications".  You must delete all
sections Entitled "Endorsements."
</P><P>

<LI>
COLLECTIONS OF DOCUMENTS
<P>

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.
</P><P>

You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.
</P><P>

<LI>
AGGREGATION WITH INDEPENDENT WORKS
<P>

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, is called an "aggregate" if the copyright
resulting from the compilation is not used to limit the legal rights
of the compilation's users beyond what the individual works permit.
When the Document is included an aggregate, this License does not
apply to the other works in the aggregate which are not themselves
derivative works of the Document.
</P><P>

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one half of
the entire aggregate, the Document's Cover Texts may be placed on
covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form.
Otherwise they must appear on printed covers that bracket the whole
aggregate.
</P><P>

<LI>
TRANSLATION
<P>

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License, and all the license notices in the
Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions
of those notices and disclaimers.  In case of a disagreement between
the translation and the original version of this License or a notice
or disclaimer, the original version will prevail.
</P><P>

If a section in the Document is Entitled "Acknowledgements",
"Dedications", or "History", the requirement (section 4) to Preserve
its Title (section 1) will typically require changing the actual
title.
</P><P>

<LI>
TERMINATION
<P>

You may not copy, modify, sublicense, or distribute the Document except
as expressly provided for under this License.  Any other attempt to
copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such
parties remain in full compliance.
</P><P>

<LI>
FUTURE REVISIONS OF THIS LICENSE
<P>

The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
<A HREF="http://www.gnu.org/copyleft/">http://www.gnu.org/copyleft/</A>.
</P><P>

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.
</OL>
<P>

<HR SIZE="6">
<A NAME="SEC51"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC50"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52"> &gt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC49"> &lt;&lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC50"> Up </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[ &gt;&gt; ]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT"> &nbsp; <TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Top">Top</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_Contents">Contents</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC_About"> ? </A>]</TD>
</TR></TABLE>
<H3> A.1.1 ADDENDUM: How to use this License for your documents </H3>
<!--docid::SEC51::-->
<P>

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:
</P><P>

<TABLE><tr><td>&nbsp;</td><td class=smallexample><FONT SIZE=-1><pre>  Copyright (C)  <VAR>year</VAR>  <VAR>your name</VAR>.
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.2
  or any later version published by the Free Software Foundation;
  with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
  A copy of the license is included in the section entitled ``GNU
  Free Documentation License''.
</FONT></pre></td></tr></table></P><P>

If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the "with...Texts." line with this:
</P><P>

<TABLE><tr><td>&nbsp;</td><td class=smallexample><FONT SIZE=-1><pre>    with the Invariant Sections being <VAR>list their titles</VAR>, with
    the Front-Cover Texts being <VAR>list</VAR>, and with the Back-Cover Texts
    being <VAR>list</VAR>.
</FONT></pre></td></tr></table></P><P>

If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.
</P><P>

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.
</P><P>

<A NAME="Concept Index"></A>
<HR SIZE="6">
<A NAME="SEC52"></A>
<TABLE CELLPADDING=1 CELLSPACING=1 BORDER=0>
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC51"> &lt; </A>]</TD>
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC53"> &gt; </A>]</TD>
d5037 1
a5037 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d5041 2
a5042 4
<!--docid::SEC52::-->
<table><tr><th valign=top>Jump to: &nbsp; </th><td><A HREF="readline.html#cp_A" style="text-decoration:none"><b>A</b></A>
 &nbsp; 
<A HREF="readline.html#cp_C" style="text-decoration:none"><b>C</b></A>
a5045 2
<A HREF="readline.html#cp_F" style="text-decoration:none"><b>F</b></A>
 &nbsp; 
a5061 3
<TR><TH><A NAME="cp_A"></A>A</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#SEC44">application-specific completion functions</A></TD><TD valign=top><A HREF="readline.html#SEC44">2.6 Custom Completers</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
a5067 3
<TR><TH><A NAME="cp_F"></A>F</TH><TD></TD><TD></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX353">FDL, GNU Free Documentation License</A></TD><TD valign=top><A HREF="readline.html#SEC50">A.1 GNU Free Documentation License</A></TD></TR>
<TR><TD COLSPAN=3> <HR></TD></TR>
d5080 1
a5080 1
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX179">readline, function</A></TD><TD valign=top><A HREF="readline.html#SEC24">2.1 Basic Behavior</A></TD></TR>
d5088 1
a5088 3
</TABLE><P></P><table><tr><th valign=top>Jump to: &nbsp; </th><td><A HREF="readline.html#cp_A" style="text-decoration:none"><b>A</b></A>
 &nbsp; 
<A HREF="readline.html#cp_C" style="text-decoration:none"><b>C</b></A>
a5091 2
<A HREF="readline.html#cp_F" style="text-decoration:none"><b>F</b></A>
 &nbsp; 
d5108 1
a5108 1
<A NAME="SEC53"></A>
d5110 1
a5110 1
<TR><TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52"> &lt; </A>]</TD>
d5117 1
a5117 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d5121 1
a5121 1
<!--docid::SEC53::-->
d5170 6
a5175 6
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX290"><CODE>_rl_digit_p</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX293"><CODE>_rl_digit_value</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX289"><CODE>_rl_lowercase_p</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX292"><CODE>_rl_to_lower</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX291"><CODE>_rl_to_upper</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX288"><CODE>_rl_uppercase_p</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
d5178 4
a5181 4
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX146"><CODE>abort (C-g)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX147"><CODE>abort (C-g)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX44"><CODE>accept-line (Newline or Return)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX45"><CODE>accept-line (Newline or Return)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
d5184 14
a5197 14
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX34"><CODE>backward-char (C-b)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX35"><CODE>backward-char (C-b)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX72"><CODE>backward-delete-char (Rubout)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX73"><CODE>backward-delete-char (Rubout)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX96"><CODE>backward-kill-line (C-x Rubout)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX97"><CODE>backward-kill-line (C-x Rubout)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX104"><CODE>backward-kill-word (M-<KBD>DEL</KBD>)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX105"><CODE>backward-kill-word (M-<KBD>DEL</KBD>)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX38"><CODE>backward-word (M-b)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX39"><CODE>backward-word (M-b)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX50"><CODE>beginning-of-history (M-&#38;#60;)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX51"><CODE>beginning-of-history (M-&#38;#60;)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX28"><CODE>beginning-of-line (C-a)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX29"><CODE>beginning-of-line (C-a)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
a5198 1
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX6">bind-tty-special-chars</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
d5201 21
a5221 21
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX142"><CODE>call-last-kbd-macro (C-x e)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC20">1.4.7 Keyboard Macros</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX143"><CODE>call-last-kbd-macro (C-x e)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC20">1.4.7 Keyboard Macros</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX90"><CODE>capitalize-word (M-c)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX91"><CODE>capitalize-word (M-c)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX162"><CODE>character-search (C-])</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX163"><CODE>character-search (C-])</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX164"><CODE>character-search-backward (M-C-])</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX165"><CODE>character-search-backward (M-C-])</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX40"><CODE>clear-screen (C-l)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX41"><CODE>clear-screen (C-l)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX7">comment-begin</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX128"><CODE>complete (<KBD>TAB</KBD>)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX129"><CODE>complete (<KBD>TAB</KBD>)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX8">completion-query-items</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX9">convert-meta</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX116"><CODE>copy-backward-word ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX117"><CODE>copy-backward-word ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX118"><CODE>copy-forward-word ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX119"><CODE>copy-forward-word ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX114"><CODE>copy-region-as-kill ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX115"><CODE>copy-region-as-kill ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
d5224 19
a5242 19
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX70"><CODE>delete-char (C-d)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX71"><CODE>delete-char (C-d)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX136"><CODE>delete-char-or-list ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX137"><CODE>delete-char-or-list ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX110"><CODE>delete-horizontal-space ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX111"><CODE>delete-horizontal-space ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX124"><CODE>digit-argument (<KBD>M-0</KBD>, <KBD>M-1</KBD>, &#60;small&#62;...&#60;/small&#62; <KBD>M--</KBD>)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC18">1.4.5 Specifying Numeric Arguments</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX125"><CODE>digit-argument (<KBD>M-0</KBD>, <KBD>M-1</KBD>, &#60;small&#62;...&#60;/small&#62; <KBD>M--</KBD>)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC18">1.4.5 Specifying Numeric Arguments</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX10">disable-completion</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX148"><CODE>do-uppercase-version (M-a, M-b, M-<VAR>x</VAR>, &#60;small&#62;...&#60;/small&#62;)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX149"><CODE>do-uppercase-version (M-a, M-b, M-<VAR>x</VAR>, &#60;small&#62;...&#60;/small&#62;)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX88"><CODE>downcase-word (M-l)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX89"><CODE>downcase-word (M-l)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX168"><CODE>dump-functions ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX169"><CODE>dump-functions ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX172"><CODE>dump-macros ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX173"><CODE>dump-macros ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX170"><CODE>dump-variables ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX171"><CODE>dump-variables ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
d5245 13
a5257 13
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX11">editing-mode</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX174"><CODE>emacs-editing-mode (C-e)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX175"><CODE>emacs-editing-mode (C-e)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX12">enable-keypad</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX140"><CODE>end-kbd-macro (C-x ))</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC20">1.4.7 Keyboard Macros</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX141"><CODE>end-kbd-macro (C-x ))</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC20">1.4.7 Keyboard Macros</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX52"><CODE>end-of-history (M-&#38;#62;)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX53"><CODE>end-of-history (M-&#38;#62;)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX30"><CODE>end-of-line (C-e)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX31"><CODE>end-of-line (C-e)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX160"><CODE>exchange-point-and-mark (C-x C-x)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX161"><CODE>exchange-point-and-mark (C-x C-x)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX13">expand-tilde</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
d5260 8
a5267 8
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX74"><CODE>forward-backward-delete-char ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX75"><CODE>forward-backward-delete-char ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX32"><CODE>forward-char (C-f)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX33"><CODE>forward-char (C-f)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX56"><CODE>forward-search-history (C-s)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX57"><CODE>forward-search-history (C-s)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX36"><CODE>forward-word (M-f)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX37"><CODE>forward-word (M-f)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
d5270 6
a5275 6
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX14">history-preserve-point</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX64"><CODE>history-search-backward ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX65"><CODE>history-search-backward ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX62"><CODE>history-search-forward ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX63"><CODE>history-search-forward ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX15">horizontal-scroll-mode</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
d5278 6
a5283 6
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX16">input-meta</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX166"><CODE>insert-comment (M-#)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX167"><CODE>insert-comment (M-#)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX132"><CODE>insert-completions (M-*)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX133"><CODE>insert-completions (M-*)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX18">isearch-terminators</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
d5286 9
a5294 9
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX19">keymap</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX94"><CODE>kill-line (C-k)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX95"><CODE>kill-line (C-k)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX112"><CODE>kill-region ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX113"><CODE>kill-region ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX100"><CODE>kill-whole-line ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX101"><CODE>kill-whole-line ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX102"><CODE>kill-word (M-d)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX103"><CODE>kill-word (M-d)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
d5297 6
a5302 6
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX20">mark-modified-lines</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX21">mark-symlinked-directories</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX22">match-hidden-files</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX134"><CODE>menu-complete ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX135"><CODE>menu-complete ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX17">meta-flag</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
d5305 6
a5310 6
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX48"><CODE>next-history (C-n)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX49"><CODE>next-history (C-n)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX60"><CODE>non-incremental-forward-search-history (M-n)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX61"><CODE>non-incremental-forward-search-history (M-n)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX58"><CODE>non-incremental-reverse-search-history (M-p)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX59"><CODE>non-incremental-reverse-search-history (M-p)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
d5313 3
a5315 3
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX23">output-meta</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX92"><CODE>overwrite-mode ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX93"><CODE>overwrite-mode ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
d5318 7
a5324 7
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX24">page-completions</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX130"><CODE>possible-completions (M-?)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX131"><CODE>possible-completions (M-?)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC19">1.4.6 Letting Readline Type For You</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX150"><CODE>prefix-meta (<KBD>ESC</KBD>)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX151"><CODE>prefix-meta (<KBD>ESC</KBD>)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX46"><CODE>previous-history (C-p)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX47"><CODE>previous-history (C-p)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
d5327 2
a5328 2
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX76"><CODE>quoted-insert (C-q or C-v)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX77"><CODE>quoted-insert (C-q or C-v)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
d5331 162
a5492 176
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX144"><CODE>re-read-init-file (C-x C-r)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX145"><CODE>re-read-init-file (C-x C-r)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX178"><CODE>readline</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC24">2.1 Basic Behavior</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX42"><CODE>redraw-current-line ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX43"><CODE>redraw-current-line ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC14">1.4.1 Commands For Moving</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX54"><CODE>reverse-search-history (C-r)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX55"><CODE>reverse-search-history (C-r)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX154"><CODE>revert-line (M-r)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX155"><CODE>revert-line (M-r)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX214"><CODE>rl_add_defun</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC30">2.4.1 Naming a Function</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX246"><CODE>rl_add_funmap_entry</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC33">2.4.4 Associating Function Names and Bindings</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX249"><CODE>rl_add_undo</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC34">2.4.5 Allowing Undoing</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX286"><CODE>rl_alphabetic</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX190">rl_already_prompted</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX326">rl_attempted_completion_function</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX350">rl_attempted_completion_over</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX334">rl_basic_quote_characters</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX333">rl_basic_word_break_characters</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX247"><CODE>rl_begin_undo_group</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC34">2.4.5 Allowing Undoing</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX223"><CODE>rl_bind_key</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX225"><CODE>rl_bind_key_if_unbound</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX226"><CODE>rl_bind_key_if_unbound_in_map</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX224"><CODE>rl_bind_key_in_map</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX231"><CODE>rl_bind_keyseq</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX234"><CODE>rl_bind_keyseq_if_unbound</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX235"><CODE>rl_bind_keyseq_if_unbound_in_map</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX232"><CODE>rl_bind_keyseq_in_map</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX208">rl_binding_keymap</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX301"><CODE>rl_callback_handler_install</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC41">2.4.12 Alternate Interface</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX303"><CODE>rl_callback_handler_remove</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC41">2.4.12 Alternate Interface</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX302"><CODE>rl_callback_read_char</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC41">2.4.12 Alternate Interface</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX304">rl_catch_signals</A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX305">rl_catch_sigwinch</A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX329">rl_char_is_quoted_p</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX306"><CODE>rl_cleanup_after_signal</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX261"><CODE>rl_clear_message</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX275"><CODE>rl_clear_pending_input</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC37">2.4.8 Character Input</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX314"><CODE>rl_clear_signals</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX315"><CODE>rl_complete</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC45">2.6.1 How Completing Works</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX318"><CODE>rl_complete</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC46">2.6.2 Completion Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX317"><CODE>rl_complete_internal</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC46">2.6.2 Completion Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX337">rl_completer_quote_characters</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX335">rl_completer_word_break_characters</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX341">rl_completion_append_character</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX332">rl_completion_display_matches_hook</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX316">rl_completion_entry_function</A></TD><TD valign=top><A HREF="readline.html#SEC45">2.6.1 How Completing Works</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX325">rl_completion_entry_function</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX345">rl_completion_found_quote</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX346">rl_completion_mark_symlink_dirs</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX322"><CODE>rl_completion_matches</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC46">2.6.2 Completion Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX321"><CODE>rl_completion_mode</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC46">2.6.2 Completion Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX340">rl_completion_query_items</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX343">rl_completion_quote_character</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX342">rl_completion_suppress_append</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX344">rl_completion_suppress_quote</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX351">rl_completion_type</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX336">rl_completion_word_break_hook</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX216"><CODE>rl_copy_keymap</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC31">2.4.2 Selecting a Keymap</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX268"><CODE>rl_copy_text</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC36">2.4.7 Modifying Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX258"><CODE>rl_crlf</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX267"><CODE>rl_delete_text</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC36">2.4.7 Modifying Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX206">rl_deprep_term_function</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX278"><CODE>rl_deprep_terminal</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC38">2.4.9 Terminal Management</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX285"><CODE>rl_ding</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX331">rl_directory_completion_hook</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX218"><CODE>rl_discard_keymap</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC31">2.4.2 Selecting a Keymap</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX187">rl_dispatching</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX287"><CODE>rl_display_match_list</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX251"><CODE>rl_do_undo</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC34">2.4.5 Allowing Undoing</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX184">rl_done</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX213">rl_editing_mode</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX182">rl_end</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX248"><CODE>rl_end_undo_group</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC34">2.4.5 Allowing Undoing</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX188">rl_erase_empty_line</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX202">rl_event_hook</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX274"><CODE>rl_execute_next</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC37">2.4.8 Character Input</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX207">rl_executing_keymap</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX209">rl_executing_macro</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX264"><CODE>rl_expand_prompt</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX211">rl_explicit_arg</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX283"><CODE>rl_extend_line_buffer</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX348">rl_filename_completion_desired</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX323"><CODE>rl_filename_completion_function</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC46">2.6.2 Completion Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX328">rl_filename_dequoting_function</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX338">rl_filename_quote_characters</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX349">rl_filename_quoting_desired</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX327">rl_filename_quoting_function</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX254"><CODE>rl_forced_update_display</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX307"><CODE>rl_free_line_state</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX250"><CODE>rl_free_undo_list</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC34">2.4.5 Allowing Undoing</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX243"><CODE>rl_function_dumper</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC33">2.4.4 Associating Function Names and Bindings</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX240"><CODE>rl_function_of_keyseq</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC33">2.4.4 Associating Function Names and Bindings</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX245"><CODE>rl_funmap_names</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC33">2.4.4 Associating Function Names and Bindings</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX236"><CODE>rl_generic_bind</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX219"><CODE>rl_get_keymap</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC31">2.4.2 Selecting a Keymap</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX221"><CODE>rl_get_keymap_by_name</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC31">2.4.2 Selecting a Keymap</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX222"><CODE>rl_get_keymap_name</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC31">2.4.2 Selecting a Keymap</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX311"><CODE>rl_get_screen_size</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX300"><CODE>rl_get_termcap</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC40">2.4.11 Miscellaneous Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX272"><CODE>rl_getc</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC37">2.4.8 Character Input</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX203">rl_getc_function</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX193">rl_gnu_readline_p</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX347">rl_ignore_completion_duplicates</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX330">rl_ignore_some_completions_function</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX352">rl_inhibit_completion</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX284"><CODE>rl_initialize</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX320"><CODE>rl_insert_completions</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC46">2.6.2 Completion Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX266"><CODE>rl_insert_text</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC36">2.4.7 Modifying Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX196">rl_instream</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX241"><CODE>rl_invoking_keyseqs</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC33">2.4.4 Associating Function Names and Bindings</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX242"><CODE>rl_invoking_keyseqs_in_map</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC33">2.4.4 Associating Function Names and Bindings</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX269"><CODE>rl_kill_text</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC36">2.4.7 Modifying Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX199">rl_last_func</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX191">rl_library_version</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX180">rl_line_buffer</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX244"><CODE>rl_list_funmap_names</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC33">2.4.4 Associating Function Names and Bindings</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX294"><CODE>rl_macro_bind</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC40">2.4.11 Miscellaneous Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX295"><CODE>rl_macro_dumper</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC40">2.4.11 Miscellaneous Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX215"><CODE>rl_make_bare_keymap</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC31">2.4.2 Selecting a Keymap</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX217"><CODE>rl_make_keymap</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC31">2.4.2 Selecting a Keymap</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX183">rl_mark</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX260"><CODE>rl_message</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX252"><CODE>rl_modifying</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC34">2.4.5 Allowing Undoing</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX239"><CODE>rl_named_function</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC33">2.4.4 Associating Function Names and Bindings</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX185">rl_num_chars_to_read</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX212">rl_numeric_arg</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX255"><CODE>rl_on_new_line</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX256"><CODE>rl_on_new_line_with_prompt</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX197">rl_outstream</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX237"><CODE>rl_parse_and_bind</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX186">rl_pending_input</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX181">rl_point</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX319"><CODE>rl_possible_completions</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC46">2.6.2 Completion Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX201">rl_pre_input_hook</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX198">rl_prefer_env_winsize</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX205">rl_prep_term_function</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX277"><CODE>rl_prep_terminal</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC38">2.4.9 Terminal Management</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX189">rl_prompt</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX270"><CODE>rl_push_macro_input</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC36">2.4.7 Modifying Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX238"><CODE>rl_read_init_file</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX271"><CODE>rl_read_key</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC37">2.4.8 Character Input</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX195">rl_readline_name</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX210">rl_readline_state</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX192">rl_readline_version</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX253"><CODE>rl_redisplay</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX204">rl_redisplay_function</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX282"><CODE>rl_replace_line</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC39">2.4.10 Utility Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX308"><CODE>rl_reset_after_signal</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX257"><CODE>rl_reset_line_state</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX312"><CODE>rl_reset_screen_size</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX281"><CODE>rl_reset_terminal</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC38">2.4.9 Terminal Management</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX309"><CODE>rl_resize_terminal</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX263"><CODE>rl_restore_prompt</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX262"><CODE>rl_save_prompt</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX233"><CODE>rl_set_key</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX276"><CODE>rl_set_keyboard_input_timeout</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC37">2.4.8 Character Input</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX220"><CODE>rl_set_keymap</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC31">2.4.2 Selecting a Keymap</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX299"><CODE>rl_set_paren_blink_timeout</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC40">2.4.11 Miscellaneous Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX265"><CODE>rl_set_prompt</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX310"><CODE>rl_set_screen_size</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX313"><CODE>rl_set_signals</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC43">2.5 Readline Signal Handling</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX259"><CODE>rl_show_char</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC35">2.4.6 Redisplay</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX339">rl_special_prefixes</A></TD><TD valign=top><A HREF="readline.html#SEC47">2.6.3 Completion Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX200">rl_startup_hook</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX273"><CODE>rl_stuff_char</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC37">2.4.8 Character Input</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX194">rl_terminal_name</A></TD><TD valign=top><A HREF="readline.html#SEC28">2.3 Readline Variables</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX279"><CODE>rl_tty_set_default_bindings</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC38">2.4.9 Terminal Management</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX280"><CODE>rl_tty_unset_default_bindings</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC38">2.4.9 Terminal Management</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX230"><CODE>rl_unbind_command_in_map</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX229"><CODE>rl_unbind_function_in_map</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX227"><CODE>rl_unbind_key</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX228"><CODE>rl_unbind_key_in_map</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC32">2.4.3 Binding Keys</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX324"><CODE>rl_username_completion_function</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC46">2.6.2 Completion Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX296"><CODE>rl_variable_bind</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC40">2.4.11 Miscellaneous Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX298"><CODE>rl_variable_dumper</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC40">2.4.11 Miscellaneous Functions</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX297"><CODE>rl_variable_value</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC40">2.4.11 Miscellaneous Functions</A></TD></TR>
d5495 7
a5501 8
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX80"><CODE>self-insert (a, b, A, 1, !, &#60;small&#62;...&#60;/small&#62;)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX81"><CODE>self-insert (a, b, A, 1, !, &#60;small&#62;...&#60;/small&#62;)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX158"><CODE>set-mark (C-@@)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX159"><CODE>set-mark (C-@@)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX25">show-all-if-ambiguous</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX26">show-all-if-unmodified</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX138"><CODE>start-kbd-macro (C-x ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC20">1.4.7 Keyboard Macros</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX139"><CODE>start-kbd-macro (C-x ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC20">1.4.7 Keyboard Macros</A></TD></TR>
d5504 8
a5511 8
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX78"><CODE>tab-insert (M-<KBD>TAB</KBD>)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX79"><CODE>tab-insert (M-<KBD>TAB</KBD>)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX156"><CODE>tilde-expand (M-~)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX157"><CODE>tilde-expand (M-~)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX82"><CODE>transpose-chars (C-t)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX83"><CODE>transpose-chars (C-t)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX84"><CODE>transpose-words (M-t)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX85"><CODE>transpose-words (M-t)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
d5514 10
a5523 12
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX152"><CODE>undo (C-_ or C-x C-u)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX153"><CODE>undo (C-_ or C-x C-u)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX126"><CODE>universal-argument ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC18">1.4.5 Specifying Numeric Arguments</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX127"><CODE>universal-argument ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC18">1.4.5 Specifying Numeric Arguments</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX108"><CODE>unix-filename-rubout ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX109"><CODE>unix-filename-rubout ()</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX98"><CODE>unix-line-discard (C-u)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX99"><CODE>unix-line-discard (C-u)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX106"><CODE>unix-word-rubout (C-w)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX107"><CODE>unix-word-rubout (C-w)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX86"><CODE>upcase-word (M-u)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX87"><CODE>upcase-word (M-u)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC16">1.4.3 Commands For Changing Text</A></TD></TR>
d5526 3
a5528 3
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX176"><CODE>vi-editing-mode (M-C-j)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX177"><CODE>vi-editing-mode (M-C-j)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC21">1.4.8 Some Miscellaneous Commands</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX27">visible-stats</A></TD><TD valign=top><A HREF="readline.html#SEC10">1.3.1 Readline Init File Syntax</A></TD></TR>
d5531 8
a5538 8
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX120"><CODE>yank (C-y)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX121"><CODE>yank (C-y)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX68"><CODE>yank-last-arg (M-. or M-_)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX69"><CODE>yank-last-arg (M-. or M-_)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX66"><CODE>yank-nth-arg (M-C-y)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX67"><CODE>yank-nth-arg (M-C-y)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC15">1.4.2 Commands For Manipulating The History</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX122"><CODE>yank-pop (M-y)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
<TR><TD></TD><TD valign=top><A HREF="readline.html#IDX123"><CODE>yank-pop (M-y)</CODE></A></TD><TD valign=top><A HREF="readline.html#SEC17">1.4.4 Killing And Yanking</A></TD></TR>
d5590 1
a5590 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d5707 1
a5707 11
<A NAME="TOC49" HREF="readline.html#SEC49">A. Copying This Manual</A>
<BR>
<UL>
<A NAME="TOC50" HREF="readline.html#SEC50">A.1 GNU Free Documentation License</A>
<BR>
<UL>
<A NAME="TOC51" HREF="readline.html#SEC51">A.1.1 ADDENDUM: How to use this License for your documents</A>
<BR>
</UL>
</UL>
<A NAME="TOC52" HREF="readline.html#SEC52">Concept Index</A>
d5709 1
a5709 1
<A NAME="TOC53" HREF="readline.html#SEC53">Function and Variable Index</A>
d5717 1
a5717 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d5726 1
a5726 3
<A NAME="TOC49" HREF="readline.html#SEC49">A. Copying This Manual</A>
<BR>
<A NAME="TOC52" HREF="readline.html#SEC52">Concept Index</A>
d5728 1
a5728 1
<A NAME="TOC53" HREF="readline.html#SEC53">Function and Variable Index</A>
d5737 1
a5737 1
<TD VALIGN="MIDDLE" ALIGN="LEFT">[<A HREF="readline.html#SEC52">Index</A>]</TD>
d5741 1
a5741 1
This document was generated by <I>Chet Ramey</I> on <I>December, 6  2005</I>
d5903 1
a5903 1
by <I>Chet Ramey</I> on <I>December, 6  2005</I>
@


