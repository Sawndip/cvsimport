head	1.6;
access;
symbols
	gdb-csl-symbian-6_4_50_20060226-12:1.4
	gdb-csl-sourcerygxx-3_4_4-25:1.4
	gdb-csl-symbian-6_4_50_20060226-11:1.4
	gdb-csl-sourcerygxx-4_1-17:1.4
	gdb-csl-20060226-branch-local-2:1.4
	gdb-csl-sourcerygxx-4_1-14:1.4
	gdb-csl-sourcerygxx-4_1-13:1.4
	gdb-csl-sourcerygxx-4_1-12:1.4
	gdb-csl-sourcerygxx-3_4_4-21:1.4
	gdb-csl-sourcerygxx-4_1-9:1.4
	gdb-csl-sourcerygxx-4_1-8:1.4
	gdb-csl-sourcerygxx-4_1-7:1.4
	gdb-csl-arm-2006q1-6:1.4
	gdb-csl-sourcerygxx-4_1-6:1.4
	gdb-csl-symbian-6_4_50_20060226-10:1.4
	gdb-csl-symbian-6_4_50_20060226-9:1.4
	gdb-csl-symbian-6_4_50_20060226-8:1.4
	gdb-csl-coldfire-4_1-11:1.4
	gdb-csl-sourcerygxx-3_4_4-19:1.4
	gdb-csl-coldfire-4_1-10:1.4
	gdb-csl-sourcerygxx-4_1-5:1.4
	gdb-csl-sourcerygxx-4_1-4:1.4
	msnyder-reverse-20060502-branch:1.5.0.4
	msnyder-reverse-20060502-branchpoint:1.5
	gdb-csl-morpho-4_1-4:1.4
	gdb-csl-sourcerygxx-3_4_4-17:1.4
	readline_5_1-import-branch:1.5.0.2
	readline_5_1-import-branchpoint:1.5
	readline-pre-51-import:1.5
	gdb-csl-20060226-branch-merge-to-csl-symbian-1:1.4
	gdb-csl-symbian-20060226-branch:1.4.0.78
	gdb-csl-symbian-20060226-branchpoint:1.4
	gdb-csl-20060226-branch-merge-to-csl-local-1:1.4
	msnyder-reverse-20060331-branch:1.4.0.76
	msnyder-reverse-20060331-branchpoint:1.4
	gdb-csl-available-20060303-branch:1.4.0.74
	gdb-csl-available-20060303-branchpoint:1.4
	gdb-csl-20060226-branch:1.4.0.72
	gdb-csl-20060226-branchpoint:1.4
	gdb_6_4-20051202-release:1.4
	msnyder-fork-checkpoint-branch:1.4.0.70
	msnyder-fork-checkpoint-branchpoint:1.4
	gdb-csl-gxxpro-6_3-branch:1.4.0.68
	gdb-csl-gxxpro-6_3-branchpoint:1.4
	gdb_6_4-branch:1.4.0.66
	gdb_6_4-2005-11-01-branchpoint:1.4
	gdb-csl-arm-20051020-branch:1.4.0.64
	gdb-csl-arm-20051020-branchpoint:1.4
	msnyder-tracepoint-checkpoint-branch:1.4.0.62
	msnyder-tracepoint-checkpoint-branchpoint:1.4
	gdb-csl-arm-20050325-2005-q1b:1.4
	gdb-csl-arm-20050325-2005-q1a:1.4
	csl-arm-20050325-branch:1.4.0.60
	csl-arm-20050325-branchpoint:1.4
	gdb_6_3-20041109-release:1.4
	gdb_6_3-branch:1.4.0.56
	gdb_6_3-20041019-branchpoint:1.4
	drow_intercu-merge-20040921:1.4
	drow_intercu-merge-20040915:1.4
	jimb-gdb_6_2-e500-branch:1.4.0.58
	jimb-gdb_6_2-e500-branchpoint:1.4
	gdb_6_2-20040730-release:1.4
	gdb_6_2-branch:1.4.0.54
	gdb_6_2-2004-07-10-gmt-branchpoint:1.4
	gdb_6_1_1-20040616-release:1.4
	gdb_6_1-2004-04-05-release:1.4
	drow_intercu-merge-20040402:1.4
	drow_intercu-merge-20040327:1.4
	ezannoni_pie-20040323-branch:1.4.0.52
	ezannoni_pie-20040323-branchpoint:1.4
	cagney_tramp-20040321-mergepoint:1.4
	cagney_tramp-20040309-branch:1.4.0.50
	cagney_tramp-20040309-branchpoint:1.4
	gdb_6_1-branch:1.4.0.48
	gdb_6_1-2004-03-01-gmt-branchpoint:1.4
	drow_intercu-20040221-branch:1.4.0.46
	drow_intercu-20040221-branchpoint:1.4
	cagney_bfdfile-20040213-branch:1.4.0.44
	cagney_bfdfile-20040213-branchpoint:1.4
	drow-cplus-merge-20040208:1.4
	carlton_dictionary-20040126-merge:1.4
	cagney_bigcore-20040122-branch:1.4.0.42
	cagney_bigcore-20040122-branchpoint:1.4
	drow-cplus-merge-20040113:1.4
	drow-cplus-merge-20031224:1.4
	drow-cplus-merge-20031220:1.4
	carlton_dictionary-20031215-merge:1.4
	drow-cplus-merge-20031214:1.4
	carlton-dictionary-20031111-merge:1.4
	gdb_6_0-2003-10-04-release:1.4
	kettenis_sparc-20030918-branch:1.4.0.40
	kettenis_sparc-20030918-branchpoint:1.4
	carlton_dictionary-20030917-merge:1.4
	ezannoni_pie-20030916-branchpoint:1.4
	ezannoni_pie-20030916-branch:1.4.0.38
	cagney_x86i386-20030821-branch:1.4.0.36
	cagney_x86i386-20030821-branchpoint:1.4
	carlton_dictionary-20030805-merge:1.4
	carlton_dictionary-20030627-merge:1.4
	gdb_6_0-branch:1.4.0.34
	gdb_6_0-2003-06-23-branchpoint:1.4
	jimb-ppc64-linux-20030613-branch:1.4.0.32
	jimb-ppc64-linux-20030613-branchpoint:1.4
	cagney_convert-20030606-branch:1.4.0.30
	cagney_convert-20030606-branchpoint:1.4
	cagney_writestrings-20030508-branch:1.4.0.28
	cagney_writestrings-20030508-branchpoint:1.4
	jimb-ppc64-linux-20030528-branch:1.4.0.26
	jimb-ppc64-linux-20030528-branchpoint:1.4
	carlton_dictionary-20030523-merge:1.4
	cagney_fileio-20030521-branch:1.4.0.24
	cagney_fileio-20030521-branchpoint:1.4
	kettenis_i386newframe-20030517-mergepoint:1.4
	jimb-ppc64-linux-20030509-branch:1.4.0.22
	jimb-ppc64-linux-20030509-branchpoint:1.4
	kettenis_i386newframe-20030504-mergepoint:1.4
	carlton_dictionary-20030430-merge:1.4
	kettenis_i386newframe-20030419-branch:1.4.0.20
	kettenis_i386newframe-20030419-branchpoint:1.4
	carlton_dictionary-20030416-merge:1.4
	cagney_frameaddr-20030409-mergepoint:1.4
	kettenis_i386newframe-20030406-branch:1.4.0.18
	kettenis_i386newframe-20030406-branchpoint:1.4
	cagney_frameaddr-20030403-branchpoint:1.4
	cagney_frameaddr-20030403-branch:1.4.0.16
	cagney_framebase-20030330-mergepoint:1.4
	cagney_framebase-20030326-branch:1.4.0.14
	cagney_framebase-20030326-branchpoint:1.4
	cagney_lazyid-20030317-branch:1.4.0.12
	cagney_lazyid-20030317-branchpoint:1.4
	kettenis-i386newframe-20030316-mergepoint:1.4
	offbyone-20030313-branch:1.4.0.10
	offbyone-20030313-branchpoint:1.4
	kettenis-i386newframe-20030308-branch:1.4.0.8
	kettenis-i386newframe-20030308-branchpoint:1.4
	carlton_dictionary-20030305-merge:1.4
	cagney_offbyone-20030303-branch:1.4.0.6
	cagney_offbyone-20030303-branchpoint:1.4
	carlton_dictionary-20030207-merge:1.4
	interps-20030202-branch:1.4.0.4
	interps-20030202-branchpoint:1.4
	cagney-unwind-20030108-branch:1.4.0.2
	cagney-unwind-20030108-branchpoint:1.4
	carlton_dictionary-20021223-merge:1.4
	gdb_5_3-2002-12-12-release:1.3
	readline-pre-43-import:1.3
	carlton_dictionary-20021115-merge:1.3
	kseitz_interps-20021105-merge:1.3
	kseitz_interps-20021103-merge:1.3
	drow-cplus-merge-20021020:1.3
	drow-cplus-merge-20021025:1.3
	carlton_dictionary-20021025-merge:1.3
	carlton_dictionary-20021011-merge:1.3
	drow-cplus-branch:1.3.0.24
	drow-cplus-branchpoint:1.3
	kseitz_interps-20020930-merge:1.3
	carlton_dictionary-20020927-merge:1.3
	carlton_dictionary-branch:1.3.0.22
	carlton_dictionary-20020920-branchpoint:1.3
	gdb_5_3-branch:1.3.0.20
	gdb_5_3-2002-09-04-branchpoint:1.3
	kseitz_interps-20020829-merge:1.3
	cagney_sysregs-20020825-branch:1.3.0.18
	cagney_sysregs-20020825-branchpoint:1.3
	readline_4_3-import-branch:1.3.0.16
	readline_4_3-import-branchpoint:1.3
	readline_4_3:1.1.1.3
	gdb_5_2_1-2002-07-23-release:1.3
	kseitz_interps-20020528-branch:1.3.0.14
	kseitz_interps-20020528-branchpoint:1.3
	cagney_regbuf-20020515-branch:1.3.0.12
	cagney_regbuf-20020515-branchpoint:1.3
	jimb-macro-020506-branch:1.3.0.10
	jimb-macro-020506-branchpoint:1.3
	gdb_5_2-2002-04-29-release:1.3
	gdb_5_2-branch:1.3.0.8
	gdb_5_2-2002-03-03-branchpoint:1.3
	gdb_5_1_1-2002-01-24-release:1.3
	gdb_5_1_0_1-2002-01-03-release:1.3
	cygnus_cvs_20020108_pre:1.3
	gdb_5_1_0_1-2002-01-03-branch:1.3.0.6
	gdb_5_1_0_1-2002-01-03-branchpoint:1.3
	gdb_5_1-2001-11-21-release:1.3
	gdb_s390-2001-09-26-branch:1.3.0.4
	gdb_s390-2001-09-26-branchpoint:1.3
	gdb_5_1-2001-07-29-branch:1.3.0.2
	gdb_5_1-2001-07-29-branchpoint:1.3
	insight-precleanup-2001-01-01:1.3
	readline_4_1:1.1.1.2
	readline_4_0:1.1.1.1
	FSF:1.1.1
	readline-pre-41-import:1.2
	gdb-premipsmulti-2000-06-06-branch:1.1.1.1.0.6
	gdb-premipsmulti-2000-06-06-branchpoint:1.1.1.1
	gdb_5_0-2000-05-19-release:1.1.1.1
	gdb_4_18_2-2000-05-18-release:1.1.1.1
	gdb_4_95_1-2000-05-11-snapshot:1.1.1.1
	gdb_4_95_0-2000-04-27-snapshot:1.1.1.1
	gdb_5_0-2000-04-10-branch:1.1.1.1.0.4
	gdb_5_0-2000-04-10-branchpoint:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	gdb-2000-02-04:1.1.1.1
	gdb-2000-02-02:1.1.1.1
	gdb-2000-02-01:1.1.1.1
	gdb-2000-01-31:1.1.1.1
	gdb-2000-01-26:1.1.1.1
	gdb-2000-01-24:1.1.1.1
	gdb-2000-01-17:1.1.1.1
	gdb-2000-01-10:1.1.1.1
	gdb-2000-01-05:1.1.1.1
	gdb-1999-12-21:1.1.1.1
	gdb-1999-12-13:1.1.1.1
	gdb-1999-12-07:1.1.1.1
	gdb-1999-12-06:1.1.1.1
	gdb-1999-11-16:1.1.1.1
	gdb-1999-11-08:1.1.1.1
	gdb-1999-11-01:1.1.1.1
	gdb-1999-10-25:1.1.1.1
	gdb-1999-10-18:1.1.1.1
	gdb-1999-10-11:1.1.1.1
	gdb-1999-10-04:1.1.1.1
	gdb-1999-09-28:1.1.1.1
	gdb-1999-09-21:1.1.1.1
	gdb-1999-09-13:1.1.1.1
	gdb-1999-09-08:1.1.1.1
	gdb-1999-08-30:1.1.1.1
	gdb-1999-08-23:1.1.1.1
	gdb-1999-08-16:1.1.1.1
	gdb-1999-08-09:1.1.1.1
	gdb-1999-08-02:1.1.1.1
	gdb-1999-07-26:1.1.1.1
	gdb-1999-07-19:1.1.1.1
	gdb-1999-07-12:1.1.1.1
	gdb-post-reformat-19990707:1.1.1.1
	gdb-1999-07-07-post-reformat-snapshot:1.1.1.1
	gdb-pre-reformat-19990707:1.1.1.1
	gdb-1999-07-07:1.1.1.1
	gdb-1999-07-05:1.1.1.1
	gdb-1999-06-28:1.1.1.1
	gdb-1999-06-21:1.1.1.1
	gdb-1999-06-14:1.1.1.1
	gdb-1999-06-07:1.1.1.1
	gdb-1999-06-01:1.1.1.1
	gdb-4_18-branch:1.1.1.1.0.2
	gdb-4_18-release:1.1.1.1
	gdb-1999-05-25:1.1.1.1
	gdb-1999-05-19:1.1.1.1
	gdb-1999-05-10:1.1.1.1
	gdb-19990504:1.1.1.1
	gdb-19990422:1.1.1.1
	SNAPSHOT:1.1.1
	gdb-4_18:1.1.1.1
	GDB_4_18:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.6
date	2006.05.05.18.26.13;	author drow;	state dead;
branches;
next	1.5;

1.5
date	2006.04.20.20.13.20;	author ezannoni;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2002.12.08.22.31.38;	author ezannoni;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.09.17.19.57;	author ezannoni;	state Exp;
branches
	1.3.16.1
	1.3.22.1
	1.3.24.1;
next	1.2;

1.2
date	2000.07.07.17.15.45;	author ezannoni;	state Exp;
branches;
next	1.1;

1.1
date	99.04.16.01.34.54;	author shebs;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.16.01.34.54;	author shebs;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.07.09.16.21.21;	author ezannoni;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.08.23.22.02.29;	author ezannoni;	state Exp;
branches;
next	;

1.3.16.1
date	2002.08.25.23.41.17;	author ezannoni;	state Exp;
branches;
next	;

1.3.22.1
date	2002.12.23.19.39.47;	author carlton;	state Exp;
branches;
next	;

1.3.24.1
date	2003.12.14.20.28.15;	author drow;	state Exp;
branches;
next	;

1.5.2.1
date	2006.04.24.22.00.25;	author drow;	state dead;
branches;
next	;


desc
@@


1.6
log
@Readline 5.1 import for HEAD.
@
text
@@@ignore
This file documents the user interface to the GNU History library.

Copyright (C) 1988-2002 Free Software Foundation, Inc.
Authored by Brian Fox and Chet Ramey.

Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved on
all copies.

Permission is granted to process this file through Tex and print the
results, provided the printed document carries copying permission notice
identical to this one except for the removal of this paragraph (this
paragraph not being relevant to the printed manual).

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
GNU Copyright statement is available to the distributee, and provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
@@end ignore

@@node Programming with GNU History
@@chapter Programming with GNU History

This chapter describes how to interface programs that you write
with the @@sc{gnu} History Library.
It should be considered a technical guide.
For information on the interactive use of @@sc{gnu} History, @@pxref{Using
History Interactively}.

@@menu
* Introduction to History::	What is the GNU History library for?
* History Storage::		How information is stored.
* History Functions::		Functions that you can use.
* History Variables::		Variables that control behaviour.
* History Programming Example::	Example of using the GNU History Library.
@@end menu

@@node Introduction to History
@@section Introduction to History

Many programs read input from the user a line at a time.  The @@sc{gnu}
History library is able to keep track of those lines, associate arbitrary
data with each line, and utilize information from previous lines in
composing new ones. 

The programmer using the History library has available functions
for remembering lines on a history list, associating arbitrary data
with a line, removing lines from the list, searching through the list
for a line containing an arbitrary text string, and referencing any line
in the list directly.  In addition, a history @@dfn{expansion} function
is available which provides for a consistent user interface across
different programs.

The user using programs written with the History library has the
benefit of a consistent user interface with a set of well-known
commands for manipulating the text of previous lines and using that text
in new commands.  The basic history manipulation commands are similar to
the history substitution provided by @@code{csh}.

If the programmer desires, he can use the Readline library, which
includes some history manipulation by default, and has the added
advantage of command line editing.

Before declaring any functions using any functionality the History
library provides in other code, an application writer should include
the file @@code{<readline/history.h>} in any file that uses the
History library's features.  It supplies extern declarations for all
of the library's public functions and variables, and declares all of
the public data structures.

@@node History Storage
@@section History Storage

The history list is an array of history entries.  A history entry is
declared as follows:

@@example
typedef void *histdata_t;

typedef struct _hist_entry @@{
  char *line;
  histdata_t data;
@@} HIST_ENTRY;
@@end example

The history list itself might therefore be declared as

@@example
HIST_ENTRY **the_history_list;
@@end example

The state of the History library is encapsulated into a single structure:

@@example
/*
 * A structure used to pass around the current state of the history.
 */
typedef struct _hist_state @@{
  HIST_ENTRY **entries; /* Pointer to the entries themselves. */
  int offset;           /* The location pointer within this array. */
  int length;           /* Number of elements within this array. */
  int size;             /* Number of slots allocated to this array. */
  int flags;
@@} HISTORY_STATE;
@@end example

If the flags member includes @@code{HS_STIFLED}, the history has been
stifled.

@@node History Functions
@@section History Functions

This section describes the calling sequence for the various functions
exported by the @@sc{gnu} History library.

@@menu
* Initializing History and State Management::	Functions to call when you
						want to use history in a
						program.
* History List Management::		Functions used to manage the list
					of history entries.
* Information About the History List::	Functions returning information about
					the history list.
* Moving Around the History List::	Functions used to change the position
					in the history list.
* Searching the History List::		Functions to search the history list
					for entries containing a string.
* Managing the History File::		Functions that read and write a file
					containing the history list.
* History Expansion::			Functions to perform csh-like history
					expansion.
@@end menu

@@node Initializing History and State Management
@@subsection Initializing History and State Management

This section describes functions used to initialize and manage
the state of the History library when you want to use the history
functions in your program.

@@deftypefun void using_history (void)
Begin a session in which the history functions might be used.  This
initializes the interactive variables.
@@end deftypefun

@@deftypefun {HISTORY_STATE *} history_get_history_state (void)
Return a structure describing the current state of the input history.
@@end deftypefun

@@deftypefun void history_set_history_state (HISTORY_STATE *state)
Set the state of the history list according to @@var{state}.
@@end deftypefun

@@node History List Management
@@subsection History List Management

These functions manage individual entries on the history list, or set
parameters managing the list itself.

@@deftypefun void add_history (const char *string)
Place @@var{string} at the end of the history list.  The associated data
field (if any) is set to @@code{NULL}.
@@end deftypefun

@@deftypefun {HIST_ENTRY *} remove_history (int which)
Remove history entry at offset @@var{which} from the history.  The
removed element is returned so you can free the line, data,
and containing structure.
@@end deftypefun

@@deftypefun {HIST_ENTRY *} replace_history_entry (int which, const char *line, histdata_t data)
Make the history entry at offset @@var{which} have @@var{line} and @@var{data}.
This returns the old entry so you can dispose of the data.  In the case
of an invalid @@var{which}, a @@code{NULL} pointer is returned.
@@end deftypefun

@@deftypefun void clear_history (void)
Clear the history list by deleting all the entries.
@@end deftypefun

@@deftypefun void stifle_history (int max)
Stifle the history list, remembering only the last @@var{max} entries.
@@end deftypefun

@@deftypefun int unstifle_history (void)
Stop stifling the history.  This returns the previously-set
maximum number of history entries (as set by @@code{stifle_history()}).
The value is positive if the history was
stifled, negative if it wasn't.
@@end deftypefun

@@deftypefun int history_is_stifled (void)
Returns non-zero if the history is stifled, zero if it is not.
@@end deftypefun

@@node Information About the History List
@@subsection Information About the History List

These functions return information about the entire history list or
individual list entries.

@@deftypefun {HIST_ENTRY **} history_list (void)
Return a @@code{NULL} terminated array of @@code{HIST_ENTRY *} which is the
current input history.  Element 0 of this list is the beginning of time.
If there is no history, return @@code{NULL}.
@@end deftypefun

@@deftypefun int where_history (void)
Returns the offset of the current history element.
@@end deftypefun

@@deftypefun {HIST_ENTRY *} current_history (void)
Return the history entry at the current position, as determined by
@@code{where_history()}.  If there is no entry there, return a @@code{NULL}
pointer.
@@end deftypefun

@@deftypefun {HIST_ENTRY *} history_get (int offset)
Return the history entry at position @@var{offset}, starting from
@@code{history_base} (@@pxref{History Variables}).
If there is no entry there, or if @@var{offset}
is greater than the history length, return a @@code{NULL} pointer.
@@end deftypefun

@@deftypefun int history_total_bytes (void)
Return the number of bytes that the primary history entries are using.
This function returns the sum of the lengths of all the lines in the
history.
@@end deftypefun

@@node Moving Around the History List
@@subsection Moving Around the History List

These functions allow the current index into the history list to be
set or changed.

@@deftypefun int history_set_pos (int pos)
Set the current history offset to @@var{pos}, an absolute index
into the list.
Returns 1 on success, 0 if @@var{pos} is less than zero or greater
than the number of history entries.
@@end deftypefun

@@deftypefun {HIST_ENTRY *} previous_history (void)
Back up the current history offset to the previous history entry, and
return a pointer to that entry.  If there is no previous entry, return
a @@code{NULL} pointer.
@@end deftypefun

@@deftypefun {HIST_ENTRY *} next_history (void)
Move the current history offset forward to the next history entry, and
return the a pointer to that entry.  If there is no next entry, return
a @@code{NULL} pointer.
@@end deftypefun

@@node Searching the History List
@@subsection Searching the History List
@@cindex History Searching

These functions allow searching of the history list for entries containing
a specific string.  Searching may be performed both forward and backward
from the current history position.  The search may be @@dfn{anchored},
meaning that the string must match at the beginning of the history entry.
@@cindex anchored search

@@deftypefun int history_search (const char *string, int direction)
Search the history for @@var{string}, starting at the current history offset.
If @@var{direction} is less than 0, then the search is through
previous entries, otherwise through subsequent entries.
If @@var{string} is found, then
the current history index is set to that history entry, and the value
returned is the offset in the line of the entry where
@@var{string} was found.  Otherwise, nothing is changed, and a -1 is
returned.
@@end deftypefun

@@deftypefun int history_search_prefix (const char *string, int direction)
Search the history for @@var{string}, starting at the current history
offset.  The search is anchored: matching lines must begin with
@@var{string}.  If @@var{direction} is less than 0, then the search is
through previous entries, otherwise through subsequent entries.
If @@var{string} is found, then the
current history index is set to that entry, and the return value is 0. 
Otherwise, nothing is changed, and a -1 is returned. 
@@end deftypefun

@@deftypefun int history_search_pos (const char *string, int direction, int pos)
Search for @@var{string} in the history list, starting at @@var{pos}, an
absolute index into the list.  If @@var{direction} is negative, the search
proceeds backward from @@var{pos}, otherwise forward.  Returns the absolute
index of the history element where @@var{string} was found, or -1 otherwise.
@@end deftypefun

@@node Managing the History File
@@subsection Managing the History File

The History library can read the history from and write it to a file.
This section documents the functions for managing a history file.

@@deftypefun int read_history (const char *filename)
Add the contents of @@var{filename} to the history list, a line at a time.
If @@var{filename} is @@code{NULL}, then read from @@file{~/.history}.
Returns 0 if successful, or @@code{errno} if not.
@@end deftypefun

@@deftypefun int read_history_range (const char *filename, int from, int to)
Read a range of lines from @@var{filename}, adding them to the history list.
Start reading at line @@var{from} and end at @@var{to}.
If @@var{from} is zero, start at the beginning.  If @@var{to} is less than
@@var{from}, then read until the end of the file.  If @@var{filename} is
@@code{NULL}, then read from @@file{~/.history}.  Returns 0 if successful,
or @@code{errno} if not.
@@end deftypefun

@@deftypefun int write_history (const char *filename)
Write the current history to @@var{filename}, overwriting @@var{filename}
if necessary.
If @@var{filename} is @@code{NULL}, then write the history list to
@@file{~/.history}.
Returns 0 on success, or @@code{errno} on a read or write error.
@@end deftypefun

@@deftypefun int append_history (int nelements, const char *filename)
Append the last @@var{nelements} of the history list to @@var{filename}.
If @@var{filename} is @@code{NULL}, then append to @@file{~/.history}.
Returns 0 on success, or @@code{errno} on a read or write error.
@@end deftypefun

@@deftypefun int history_truncate_file (const char *filename, int nlines)
Truncate the history file @@var{filename}, leaving only the last
@@var{nlines} lines.
If @@var{filename} is @@code{NULL}, then @@file{~/.history} is truncated.
Returns 0 on success, or @@code{errno} on failure.
@@end deftypefun

@@node History Expansion
@@subsection History Expansion

These functions implement history expansion.

@@deftypefun int history_expand (char *string, char **output)
Expand @@var{string}, placing the result into @@var{output}, a pointer
to a string (@@pxref{History Interaction}).  Returns:
@@table @@code
@@item 0
If no expansions took place (or, if the only change in
the text was the removal of escape characters preceding the history expansion
character);
@@item 1
if expansions did take place;
@@item -1
if there was an error in expansion;
@@item 2
if the returned line should be displayed, but not executed,
as with the @@code{:p} modifier (@@pxref{Modifiers}).
@@end table

If an error ocurred in expansion, then @@var{output} contains a descriptive
error message.
@@end deftypefun

@@deftypefun {char *} get_history_event (const char *string, int *cindex, int qchar)
Returns the text of the history event beginning at @@var{string} +
@@var{*cindex}.  @@var{*cindex} is modified to point to after the event
specifier.  At function entry, @@var{cindex} points to the index into
@@var{string} where the history event specification begins.  @@var{qchar}
is a character that is allowed to end the event specification in addition
to the ``normal'' terminating characters.
@@end deftypefun

@@deftypefun {char **} history_tokenize (const char *string)
Return an array of tokens parsed out of @@var{string}, much as the
shell might.  The tokens are split on the characters in the
@@var{history_word_delimiters} variable,
and shell quoting conventions are obeyed.
@@end deftypefun

@@deftypefun {char *} history_arg_extract (int first, int last, const char *string)
Extract a string segment consisting of the @@var{first} through @@var{last}
arguments present in @@var{string}.  Arguments are split using
@@code{history_tokenize}.
@@end deftypefun

@@node History Variables
@@section History Variables

This section describes the externally-visible variables exported by
the @@sc{gnu} History Library.

@@deftypevar int history_base
The logical offset of the first entry in the history list.
@@end deftypevar

@@deftypevar int history_length
The number of entries currently stored in the history list.
@@end deftypevar

@@deftypevar int history_max_entries
The maximum number of history entries.  This must be changed using
@@code{stifle_history()}.
@@end deftypevar

@@deftypevar char history_expansion_char
The character that introduces a history event.  The default is @@samp{!}.
Setting this to 0 inhibits history expansion.
@@end deftypevar

@@deftypevar char history_subst_char
The character that invokes word substitution if found at the start of
a line.  The default is @@samp{^}.
@@end deftypevar

@@deftypevar char history_comment_char
During tokenization, if this character is seen as the first character
of a word, then it and all subsequent characters up to a newline are
ignored, suppressing history expansion for the remainder of the line.
This is disabled by default.
@@end deftypevar

@@deftypevar {char *} history_word_delimiters
The characters that separate tokens for @@code{history_tokenize()}.
The default value is @@code{" \t\n()<>;&|"}.
@@end deftypevar

@@deftypevar {char *} history_no_expand_chars
The list of characters which inhibit history expansion if found immediately
following @@var{history_expansion_char}.  The default is space, tab, newline,
carriage return, and @@samp{=}.
@@end deftypevar

@@deftypevar {char *} history_search_delimiter_chars
The list of additional characters which can delimit a history search
string, in addition to space, TAB, @@samp{:} and @@samp{?} in the case of
a substring search.  The default is empty.
@@end deftypevar

@@deftypevar int history_quotes_inhibit_expansion
If non-zero, single-quoted words are not scanned for the history expansion
character.  The default value is 0.
@@end deftypevar

@@deftypevar {rl_linebuf_func_t *} history_inhibit_expansion_function
This should be set to the address of a function that takes two arguments:
a @@code{char *} (@@var{string})
and an @@code{int} index into that string (@@var{i}).
It should return a non-zero value if the history expansion starting at
@@var{string[i]} should not be performed; zero if the expansion should
be done.
It is intended for use by applications like Bash that use the history
expansion character for additional purposes.
By default, this variable is set to @@code{NULL}.
@@end deftypevar

@@node History Programming Example
@@section History Programming Example

The following program demonstrates simple use of the @@sc{gnu} History Library.

@@smallexample
#include <stdio.h>
#include <readline/history.h>

main (argc, argv)
     int argc;
     char **argv;
@@{
  char line[1024], *t;
  int len, done = 0;

  line[0] = 0;

  using_history ();
  while (!done)
    @@{
      printf ("history$ ");
      fflush (stdout);
      t = fgets (line, sizeof (line) - 1, stdin);
      if (t && *t)
        @@{
          len = strlen (t);
          if (t[len - 1] == '\n')
            t[len - 1] = '\0';
        @@}

      if (!t)
        strcpy (line, "quit");

      if (line[0])
        @@{
          char *expansion;
          int result;

          result = history_expand (line, &expansion);
          if (result)
            fprintf (stderr, "%s\n", expansion);

          if (result < 0 || result == 2)
            @@{
              free (expansion);
              continue;
            @@}

          add_history (expansion);
          strncpy (line, expansion, sizeof (line) - 1);
          free (expansion);
        @@}

      if (strcmp (line, "quit") == 0)
        done = 1;
      else if (strcmp (line, "save") == 0)
        write_history ("history_file");
      else if (strcmp (line, "read") == 0)
        read_history ("history_file");
      else if (strcmp (line, "list") == 0)
        @@{
          register HIST_ENTRY **the_list;
          register int i;

          the_list = history_list ();
          if (the_list)
            for (i = 0; the_list[i]; i++)
              printf ("%d: %s\n", i + history_base, the_list[i]->line);
        @@}
      else if (strncmp (line, "delete", 6) == 0)
        @@{
          int which;
          if ((sscanf (line + 6, "%d", &which)) == 1)
            @@{
              HIST_ENTRY *entry = remove_history (which);
              if (!entry)
                fprintf (stderr, "No such entry %d\n", which);
              else
                @@{
                  free (entry->line);
                  free (entry);
                @@}
            @@}
          else
            @@{
              fprintf (stderr, "non-numeric arg given to `delete'\n");
            @@}
        @@}
    @@}
@@}
@@end smallexample
@


1.5
log
@touched all sources to ease import of readline-5.1
@
text
@@


1.5.2.1
log
@Import readline 5.1 on the branch.
@
text
@@


1.4
log
@Import of readline 4.3.
Non-readline modified files:

src/gdb/ChangeLog src/gdb/defs.h src/gdb/cli/cli-cmds.c
src/gdb/cli/cli-setshow.c src/gdb/tui/ChangeLog
src/gdb/tui/tuiWin.c

In readline directory:

        * compat.c, mbutil.c, misc.c, rlmbutil.h, rltypedefs.h,
        text.c, doc/history.0, doc/history.3, support/wcwidth.c,
        examples/readlinebuf.h, examples/rlcat.c: New files.

        * CHANGELOG, CHANGES, INSTALL,  MANIFEST, Makefile.in, README,
        aclocal.m4, ansi_stdlib.h, bind.c, callback.c, chardefs.h,
        complete.c, config.h.in, configure, configure.in, display.c,
        emacs_keymap.c, funmap.c, histexpand.c, histfile.c, histlib.h,
        history.c, history.h, histsearch.c, input.c, isearch.c,
        keymaps.c, keymaps.h, kill.c, macro.c, nls.c, parens.c,
        posixdir.h, readline.c, readline.h, rlconf.h, rldefs.h,
        rlprivate.h, rlshell.h, rlstdc.h, rltty.c, savestring.c,
        search.c, shell.c, signals.c, terminal.c, tilde.c, tilde.h,
        undo.c, util.c, vi_keymap.c, vi_mode.c, xmalloc.c, xmalloc.h,
        doc/Makefile.in, doc/hist.texinfo, doc/hstech.texinfo,
        doc/hsuser.texinfo, doc/manvers.texinfo, doc/readline.3,
        doc/rlman.texinfo, doc/rltech.texinfo, doc/rluser.texinfo
        doc/rluserman.texinfo, doc/texi2dvi, doc/texi2html,
        shlib/Makefile.in, support/install.sh, support/mkdirs,
        support/mkdist, support/shlib-install, support/shobj-conf,
        examples/Inputrc, examples/Makefile.in, examples/fileman.c,
        examples/histexamp.c, examples/manexamp.c, examples/rl.c,
        examples/rlfe.c, examples/rltest.c, examples/rlversion.c:
        Modified files.
@
text
@@


1.3
log
@readline:
2000-07-09  Elena Zannoni  <ezannoni@@kwikemart.cygnus.com>

        * Import of readline 4.1.

        Locally modified files: Makefile.in, configure.in, configure
        (regenerated), config.h.in (regenerated), readline.h, rltty.c,
 	shell.c signals.c.

        Locally added files: acconfig.h, config/*, config.h.bot,
        cross-build/*, doc/inc-hit.texinfo.

        New files: USAGE, rlprivate.h, rlshell.h, xmalloc.h.
examples:
2000-07-09  Elena Zannoni  <ezannoni@@kwikemart.cygnus.com>

        * Import of readline 4.1.

        New files: excallback.c, rlfe.c.
doc:
2000-07-09  Elena Zannoni  <ezannoni@@kwikemart.cygnus.com>

        * Import of readline 4.1.

        Regenerated inc-hist.texinfo as copy of hsuser.texinfo, for
        inclusion in the gdb manual.

        New file: rluserman.texinfo
@
text
@d4 1
a4 1
Copyright (C) 1988, 1991, 1994, 1996 Free Software Foundation, Inc.
d30 1
a30 1
with the GNU History Library.
d32 1
a32 1
For information on the interactive use of GNU History, @@pxref{Using
d46 4
a49 4
Many programs read input from the user a line at a time.  The GNU History
library is able to keep track of those lines, associate arbitrary data with
each line, and utilize information from previous lines in composing new
ones.
d83 2
d87 1
a87 1
  char *data;
d100 3
a102 1
/* A structure used to pass the current state of the history stuff around. */
d104 4
a107 4
  HIST_ENTRY **entries;         /* Pointer to the entries themselves. */
  int offset;                   /* The location pointer within this array. */
  int length;                   /* Number of elements within this array. */
  int size;                     /* Number of slots allocated to this array. */
d119 1
a119 1
present in GNU History.
d146 1
a146 1
@@deftypefun void using_history ()
d151 1
a151 1
@@deftypefun {HISTORY_STATE *} history_get_history_state ()
d165 1
a165 1
@@deftypefun void add_history (char *string)
d176 1
a176 1
@@deftypefun {HIST_ENTRY *} replace_history_entry (int which, char *line, char *data)
d182 1
a182 1
@@deftypefun void clear_history ()
d190 4
a193 3
@@deftypefun int unstifle_history ()
Stop stifling the history.  This returns the previous amount the
history was stifled.  The value is positive if the history was
d197 1
a197 1
@@deftypefun int history_is_stifled ()
d207 2
a208 2
@@deftypefun {HIST_ENTRY **} history_list ()
Return a @@code{NULL} terminated array of @@code{HIST_ENTRY} which is the
d213 1
a213 1
@@deftypefun int where_history ()
d217 1
a217 1
@@deftypefun {HIST_ENTRY *} current_history ()
d219 1
a219 1
@@code{where_history ()}.  If there is no entry there, return a @@code{NULL}
d225 2
a226 1
@@code{history_base}.  If there is no entry there, or if @@var{offset}
d230 1
a230 1
@@deftypefun int history_total_bytes ()
d243 1
a243 1
Set the position in the history list to @@var{pos}, an absolute index
d245 2
d249 1
a249 1
@@deftypefun {HIST_ENTRY *} previous_history ()
d255 1
a255 1
@@deftypefun {HIST_ENTRY *} next_history ()
d271 5
a275 4
@@deftypefun int history_search (char *string, int direction)
Search the history for @@var{string}, starting at the current history
offset.  If @@var{direction} < 0, then the search is through previous entries,
else through subsequent.  If @@var{string} is found, then
d282 1
a282 1
@@deftypefun int history_search_prefix (char *string, int direction)
d285 3
a287 2
@@var{string}.  If @@var{direction} < 0, then the search is through previous
entries, else through subsequent.  If @@var{string} is found, then the
d292 1
a292 1
@@deftypefun int history_search_pos (char *string, int direction, int pos)
d305 4
a308 4
@@deftypefun int read_history (char *filename)
Add the contents of @@var{filename} to the history list, a line at a
time.  If @@var{filename} is @@code{NULL}, then read from
@@file{~/.history}.  Returns 0 if successful, or errno if not.
d311 1
a311 1
@@deftypefun int read_history_range (char *filename, int from, int to)
d313 2
a314 2
Start reading at line @@var{from} and end at @@var{to}.  If
@@var{from} is zero, start at the beginning.  If @@var{to} is less than
d320 1
a320 1
@@deftypefun int write_history (char *filename)
d322 4
a325 3
if necessary.  If @@var{filename} is
@@code{NULL}, then write the history list to @@file{~/.history}.  Values
returned are as in @@code{read_history ()}.
d328 1
a328 1
@@deftypefun int append_history (int nelements, char *filename)
d330 2
d334 1
a334 1
@@deftypefun int history_truncate_file (char *filename, int nlines)
d337 2
d344 1
a344 1
These functions implement @@code{csh}-like history expansion.
d352 1
a352 1
the text was the de-slashifying of the history expansion
d367 1
a367 6
@@deftypefun {char *} history_arg_extract (int first, int last, char *string)
Extract a string segment consisting of the @@var{first} through @@var{last}
arguments present in @@var{string}.  Arguments are broken up as in Bash.
@@end deftypefun

@@deftypefun {char *} get_history_event (char *string, int *cindex, int qchar)
d376 1
a376 1
@@deftypefun {char **} history_tokenize (char *string)
d378 9
a386 3
shell might.  The tokens are split on white space and on the
characters @@code{()<>;&|$}, and shell quoting conventions are
obeyed.
d392 2
a393 2
This section describes the externally visible variables exported by
the GNU History Library.
d403 1
a403 1
@@deftypevar int max_input_history
d405 1
a405 1
@@code{stifle_history ()}.
d409 2
a410 1
The character that starts a history event.  The default is @@samp{!}.
d425 5
d432 2
a433 2
following @@var{history_expansion_char}.  The default is whitespace and
@@samp{=}.
d438 1
a438 1
string, in addition to whitespace, @@samp{:} and @@samp{?} in the case of
d447 1
a447 1
@@deftypevar {Function *} history_inhibit_expansion_function
d449 2
a450 1
a @@code{char *} (@@var{string}) and an integer index into that string (@@var{i}).
d456 1
a456 1
By default, this variable is set to NULL.
d462 1
a462 1
The following program demonstrates simple use of the GNU History Library.
d465 6
a470 1
main ()
@


1.3.24.1
log
@Merge drow-cplus-branch to:
  cvs rtag -D 2003-12-14 00:00:00 UTC drow-cplus-merge-20031214 gdb+dejagnu
@
text
@d4 1
a4 1
Copyright (C) 1988-2002 Free Software Foundation, Inc.
d30 1
a30 1
with the @@sc{gnu} History Library.
d32 1
a32 1
For information on the interactive use of @@sc{gnu} History, @@pxref{Using
d46 4
a49 4
Many programs read input from the user a line at a time.  The @@sc{gnu}
History library is able to keep track of those lines, associate arbitrary
data with each line, and utilize information from previous lines in
composing new ones. 
a82 2
typedef void *histdata_t;

d85 1
a85 1
  histdata_t data;
d98 1
a98 3
/*
 * A structure used to pass around the current state of the history.
 */
d100 4
a103 4
  HIST_ENTRY **entries; /* Pointer to the entries themselves. */
  int offset;           /* The location pointer within this array. */
  int length;           /* Number of elements within this array. */
  int size;             /* Number of slots allocated to this array. */
d115 1
a115 1
exported by the @@sc{gnu} History library.
d142 1
a142 1
@@deftypefun void using_history (void)
d147 1
a147 1
@@deftypefun {HISTORY_STATE *} history_get_history_state (void)
d161 1
a161 1
@@deftypefun void add_history (const char *string)
d172 1
a172 1
@@deftypefun {HIST_ENTRY *} replace_history_entry (int which, const char *line, histdata_t data)
d178 1
a178 1
@@deftypefun void clear_history (void)
d186 3
a188 4
@@deftypefun int unstifle_history (void)
Stop stifling the history.  This returns the previously-set
maximum number of history entries (as set by @@code{stifle_history()}).
The value is positive if the history was
d192 1
a192 1
@@deftypefun int history_is_stifled (void)
d202 2
a203 2
@@deftypefun {HIST_ENTRY **} history_list (void)
Return a @@code{NULL} terminated array of @@code{HIST_ENTRY *} which is the
d208 1
a208 1
@@deftypefun int where_history (void)
d212 1
a212 1
@@deftypefun {HIST_ENTRY *} current_history (void)
d214 1
a214 1
@@code{where_history()}.  If there is no entry there, return a @@code{NULL}
d220 1
a220 2
@@code{history_base} (@@pxref{History Variables}).
If there is no entry there, or if @@var{offset}
d224 1
a224 1
@@deftypefun int history_total_bytes (void)
d237 1
a237 1
Set the current history offset to @@var{pos}, an absolute index
a238 2
Returns 1 on success, 0 if @@var{pos} is less than zero or greater
than the number of history entries.
d241 1
a241 1
@@deftypefun {HIST_ENTRY *} previous_history (void)
d247 1
a247 1
@@deftypefun {HIST_ENTRY *} next_history (void)
d263 4
a266 5
@@deftypefun int history_search (const char *string, int direction)
Search the history for @@var{string}, starting at the current history offset.
If @@var{direction} is less than 0, then the search is through
previous entries, otherwise through subsequent entries.
If @@var{string} is found, then
d273 1
a273 1
@@deftypefun int history_search_prefix (const char *string, int direction)
d276 2
a277 3
@@var{string}.  If @@var{direction} is less than 0, then the search is
through previous entries, otherwise through subsequent entries.
If @@var{string} is found, then the
d282 1
a282 1
@@deftypefun int history_search_pos (const char *string, int direction, int pos)
d295 4
a298 4
@@deftypefun int read_history (const char *filename)
Add the contents of @@var{filename} to the history list, a line at a time.
If @@var{filename} is @@code{NULL}, then read from @@file{~/.history}.
Returns 0 if successful, or @@code{errno} if not.
d301 1
a301 1
@@deftypefun int read_history_range (const char *filename, int from, int to)
d303 2
a304 2
Start reading at line @@var{from} and end at @@var{to}.
If @@var{from} is zero, start at the beginning.  If @@var{to} is less than
d310 1
a310 1
@@deftypefun int write_history (const char *filename)
d312 3
a314 4
if necessary.
If @@var{filename} is @@code{NULL}, then write the history list to
@@file{~/.history}.
Returns 0 on success, or @@code{errno} on a read or write error.
d317 1
a317 1
@@deftypefun int append_history (int nelements, const char *filename)
a318 2
If @@var{filename} is @@code{NULL}, then append to @@file{~/.history}.
Returns 0 on success, or @@code{errno} on a read or write error.
d321 1
a321 1
@@deftypefun int history_truncate_file (const char *filename, int nlines)
a323 2
If @@var{filename} is @@code{NULL}, then @@file{~/.history} is truncated.
Returns 0 on success, or @@code{errno} on failure.
d329 1
a329 1
These functions implement history expansion.
d337 1
a337 1
the text was the removal of escape characters preceding the history expansion
d352 6
a357 1
@@deftypefun {char *} get_history_event (const char *string, int *cindex, int qchar)
d366 1
a366 1
@@deftypefun {char **} history_tokenize (const char *string)
d368 3
a370 9
shell might.  The tokens are split on the characters in the
@@var{history_word_delimiters} variable,
and shell quoting conventions are obeyed.
@@end deftypefun

@@deftypefun {char *} history_arg_extract (int first, int last, const char *string)
Extract a string segment consisting of the @@var{first} through @@var{last}
arguments present in @@var{string}.  Arguments are split using
@@code{history_tokenize}.
d376 2
a377 2
This section describes the externally-visible variables exported by
the @@sc{gnu} History Library.
d387 1
a387 1
@@deftypevar int history_max_entries
d389 1
a389 1
@@code{stifle_history()}.
d393 1
a393 2
The character that introduces a history event.  The default is @@samp{!}.
Setting this to 0 inhibits history expansion.
a407 5
@@deftypevar {char *} history_word_delimiters
The characters that separate tokens for @@code{history_tokenize()}.
The default value is @@code{" \t\n()<>;&|"}.
@@end deftypevar

d410 2
a411 2
following @@var{history_expansion_char}.  The default is space, tab, newline,
carriage return, and @@samp{=}.
d416 1
a416 1
string, in addition to space, TAB, @@samp{:} and @@samp{?} in the case of
d425 1
a425 1
@@deftypevar {rl_linebuf_func_t *} history_inhibit_expansion_function
d427 1
a427 2
a @@code{char *} (@@var{string})
and an @@code{int} index into that string (@@var{i}).
d433 1
a433 1
By default, this variable is set to @@code{NULL}.
d439 1
a439 1
The following program demonstrates simple use of the @@sc{gnu} History Library.
d442 1
a442 6
#include <stdio.h>
#include <readline/history.h>

main (argc, argv)
     int argc;
     char **argv;
@


1.3.22.1
log
@2002-12-23  David Carlton  <carlton@@math.stanford.edu>

	* Merge from mainline; tag is carlton_dictionary-20021223-merge.
@
text
@d4 1
a4 1
Copyright (C) 1988-2002 Free Software Foundation, Inc.
d30 1
a30 1
with the @@sc{gnu} History Library.
d32 1
a32 1
For information on the interactive use of @@sc{gnu} History, @@pxref{Using
d46 4
a49 4
Many programs read input from the user a line at a time.  The @@sc{gnu}
History library is able to keep track of those lines, associate arbitrary
data with each line, and utilize information from previous lines in
composing new ones. 
a82 2
typedef void *histdata_t;

d85 1
a85 1
  histdata_t data;
d98 1
a98 3
/*
 * A structure used to pass around the current state of the history.
 */
d100 4
a103 4
  HIST_ENTRY **entries; /* Pointer to the entries themselves. */
  int offset;           /* The location pointer within this array. */
  int length;           /* Number of elements within this array. */
  int size;             /* Number of slots allocated to this array. */
d115 1
a115 1
exported by the @@sc{gnu} History library.
d142 1
a142 1
@@deftypefun void using_history (void)
d147 1
a147 1
@@deftypefun {HISTORY_STATE *} history_get_history_state (void)
d161 1
a161 1
@@deftypefun void add_history (const char *string)
d172 1
a172 1
@@deftypefun {HIST_ENTRY *} replace_history_entry (int which, const char *line, histdata_t data)
d178 1
a178 1
@@deftypefun void clear_history (void)
d186 3
a188 4
@@deftypefun int unstifle_history (void)
Stop stifling the history.  This returns the previously-set
maximum number of history entries (as set by @@code{stifle_history()}).
The value is positive if the history was
d192 1
a192 1
@@deftypefun int history_is_stifled (void)
d202 2
a203 2
@@deftypefun {HIST_ENTRY **} history_list (void)
Return a @@code{NULL} terminated array of @@code{HIST_ENTRY *} which is the
d208 1
a208 1
@@deftypefun int where_history (void)
d212 1
a212 1
@@deftypefun {HIST_ENTRY *} current_history (void)
d214 1
a214 1
@@code{where_history()}.  If there is no entry there, return a @@code{NULL}
d220 1
a220 2
@@code{history_base} (@@pxref{History Variables}).
If there is no entry there, or if @@var{offset}
d224 1
a224 1
@@deftypefun int history_total_bytes (void)
d237 1
a237 1
Set the current history offset to @@var{pos}, an absolute index
a238 2
Returns 1 on success, 0 if @@var{pos} is less than zero or greater
than the number of history entries.
d241 1
a241 1
@@deftypefun {HIST_ENTRY *} previous_history (void)
d247 1
a247 1
@@deftypefun {HIST_ENTRY *} next_history (void)
d263 4
a266 5
@@deftypefun int history_search (const char *string, int direction)
Search the history for @@var{string}, starting at the current history offset.
If @@var{direction} is less than 0, then the search is through
previous entries, otherwise through subsequent entries.
If @@var{string} is found, then
d273 1
a273 1
@@deftypefun int history_search_prefix (const char *string, int direction)
d276 2
a277 3
@@var{string}.  If @@var{direction} is less than 0, then the search is
through previous entries, otherwise through subsequent entries.
If @@var{string} is found, then the
d282 1
a282 1
@@deftypefun int history_search_pos (const char *string, int direction, int pos)
d295 4
a298 4
@@deftypefun int read_history (const char *filename)
Add the contents of @@var{filename} to the history list, a line at a time.
If @@var{filename} is @@code{NULL}, then read from @@file{~/.history}.
Returns 0 if successful, or @@code{errno} if not.
d301 1
a301 1
@@deftypefun int read_history_range (const char *filename, int from, int to)
d303 2
a304 2
Start reading at line @@var{from} and end at @@var{to}.
If @@var{from} is zero, start at the beginning.  If @@var{to} is less than
d310 1
a310 1
@@deftypefun int write_history (const char *filename)
d312 3
a314 4
if necessary.
If @@var{filename} is @@code{NULL}, then write the history list to
@@file{~/.history}.
Returns 0 on success, or @@code{errno} on a read or write error.
d317 1
a317 1
@@deftypefun int append_history (int nelements, const char *filename)
a318 2
If @@var{filename} is @@code{NULL}, then append to @@file{~/.history}.
Returns 0 on success, or @@code{errno} on a read or write error.
d321 1
a321 1
@@deftypefun int history_truncate_file (const char *filename, int nlines)
a323 2
If @@var{filename} is @@code{NULL}, then @@file{~/.history} is truncated.
Returns 0 on success, or @@code{errno} on failure.
d329 1
a329 1
These functions implement history expansion.
d337 1
a337 1
the text was the removal of escape characters preceding the history expansion
d352 6
a357 1
@@deftypefun {char *} get_history_event (const char *string, int *cindex, int qchar)
d366 1
a366 1
@@deftypefun {char **} history_tokenize (const char *string)
d368 3
a370 9
shell might.  The tokens are split on the characters in the
@@var{history_word_delimiters} variable,
and shell quoting conventions are obeyed.
@@end deftypefun

@@deftypefun {char *} history_arg_extract (int first, int last, const char *string)
Extract a string segment consisting of the @@var{first} through @@var{last}
arguments present in @@var{string}.  Arguments are split using
@@code{history_tokenize}.
d376 2
a377 2
This section describes the externally-visible variables exported by
the @@sc{gnu} History Library.
d387 1
a387 1
@@deftypevar int history_max_entries
d389 1
a389 1
@@code{stifle_history()}.
d393 1
a393 2
The character that introduces a history event.  The default is @@samp{!}.
Setting this to 0 inhibits history expansion.
a407 5
@@deftypevar {char *} history_word_delimiters
The characters that separate tokens for @@code{history_tokenize()}.
The default value is @@code{" \t\n()<>;&|"}.
@@end deftypevar

d410 2
a411 2
following @@var{history_expansion_char}.  The default is space, tab, newline,
carriage return, and @@samp{=}.
d416 1
a416 1
string, in addition to space, TAB, @@samp{:} and @@samp{?} in the case of
d425 1
a425 1
@@deftypevar {rl_linebuf_func_t *} history_inhibit_expansion_function
d427 1
a427 2
a @@code{char *} (@@var{string})
and an @@code{int} index into that string (@@var{i}).
d433 1
a433 1
By default, this variable is set to @@code{NULL}.
d439 1
a439 1
The following program demonstrates simple use of the @@sc{gnu} History Library.
d442 1
a442 6
#include <stdio.h>
#include <readline/history.h>

main (argc, argv)
     int argc;
     char **argv;
@


1.3.16.1
log
@2002-08-24  Elena Zannoni  <ezannoni@@redhat.com>

        Import of readline 4.3:

        * compat.c, mbutil.c, misc.c, rlmbutil.h, rltypedefs.h,
        text.c, doc/history.0, doc/history.3, support/wcwidth.c,
        examples/readlinebuf.h, examples/rlcat.c: New files.

        * CHANGELOG, CHANGES, INSTALL,  MANIFEST, Makefile.in, README,
        aclocal.m4, ansi_stdlib.h, bind.c, callback.c, chardefs.h,
        complete.c, config.h.in, configure, configure.in, display.c,
        emacs_keymap.c, funmap.c, histexpand.c, histfile.c, histlib.h,
        history.c, history.h, histsearch.c, input.c, isearch.c,
        keymaps.c, keymaps.h, kill.c, macro.c, nls.c, parens.c,
        posixdir.h, readline.c, readline.h, rlconf.h, rldefs.h,
        rlprivate.h, rlshell.h, rlstdc.h, rltty.c, savestring.c,
        search.c, shell.c, signals.c, terminal.c, tilde.c, tilde.h,
        undo.c, util.c, vi_keymap.c, vi_mode.c, xmalloc.c, xmalloc.h,
        doc/Makefile.in, doc/hist.texinfo, doc/hstech.texinfo,
        doc/hsuser.texinfo, doc/manvers.texinfo, doc/readline.3,
        doc/rlman.texinfo, doc/rltech.texinfo, doc/rluser.texinfo
        doc/rluserman.texinfo, doc/texi2dvi, doc/texi2html,
        shlib/Makefile.in, support/install.sh, support/mkdirs,
        support/mkdist, support/shlib-install, support/shobj-conf,
        examples/Inputrc, examples/Makefile.in, examples/fileman.c,
        examples/histexamp.c, examples/manexamp.c, examples/rl.c,
        examples/rlfe.c, examples/rltest.c, examples/rlversion.c:
        Modified files.
@
text
@d4 1
a4 1
Copyright (C) 1988-2002 Free Software Foundation, Inc.
d30 1
a30 1
with the @@sc{gnu} History Library.
d32 1
a32 1
For information on the interactive use of @@sc{gnu} History, @@pxref{Using
d46 4
a49 4
Many programs read input from the user a line at a time.  The @@sc{gnu}
History library is able to keep track of those lines, associate arbitrary
data with each line, and utilize information from previous lines in
composing new ones. 
a82 2
typedef void *histdata_t;

d85 1
a85 1
  histdata_t data;
d98 1
a98 3
/*
 * A structure used to pass around the current state of the history.
 */
d100 4
a103 4
  HIST_ENTRY **entries; /* Pointer to the entries themselves. */
  int offset;           /* The location pointer within this array. */
  int length;           /* Number of elements within this array. */
  int size;             /* Number of slots allocated to this array. */
d115 1
a115 1
exported by the @@sc{gnu} History library.
d142 1
a142 1
@@deftypefun void using_history (void)
d147 1
a147 1
@@deftypefun {HISTORY_STATE *} history_get_history_state (void)
d161 1
a161 1
@@deftypefun void add_history (const char *string)
d172 1
a172 1
@@deftypefun {HIST_ENTRY *} replace_history_entry (int which, const char *line, histdata_t data)
d178 1
a178 1
@@deftypefun void clear_history (void)
d186 3
a188 4
@@deftypefun int unstifle_history (void)
Stop stifling the history.  This returns the previously-set
maximum number of history entries (as set by @@code{stifle_history()}).
The value is positive if the history was
d192 1
a192 1
@@deftypefun int history_is_stifled (void)
d202 2
a203 2
@@deftypefun {HIST_ENTRY **} history_list (void)
Return a @@code{NULL} terminated array of @@code{HIST_ENTRY *} which is the
d208 1
a208 1
@@deftypefun int where_history (void)
d212 1
a212 1
@@deftypefun {HIST_ENTRY *} current_history (void)
d214 1
a214 1
@@code{where_history()}.  If there is no entry there, return a @@code{NULL}
d220 1
a220 2
@@code{history_base} (@@pxref{History Variables}).
If there is no entry there, or if @@var{offset}
d224 1
a224 1
@@deftypefun int history_total_bytes (void)
d237 1
a237 1
Set the current history offset to @@var{pos}, an absolute index
a238 2
Returns 1 on success, 0 if @@var{pos} is less than zero or greater
than the number of history entries.
d241 1
a241 1
@@deftypefun {HIST_ENTRY *} previous_history (void)
d247 1
a247 1
@@deftypefun {HIST_ENTRY *} next_history (void)
d263 4
a266 5
@@deftypefun int history_search (const char *string, int direction)
Search the history for @@var{string}, starting at the current history offset.
If @@var{direction} is less than 0, then the search is through
previous entries, otherwise through subsequent entries.
If @@var{string} is found, then
d273 1
a273 1
@@deftypefun int history_search_prefix (const char *string, int direction)
d276 2
a277 3
@@var{string}.  If @@var{direction} is less than 0, then the search is
through previous entries, otherwise through subsequent entries.
If @@var{string} is found, then the
d282 1
a282 1
@@deftypefun int history_search_pos (const char *string, int direction, int pos)
d295 4
a298 4
@@deftypefun int read_history (const char *filename)
Add the contents of @@var{filename} to the history list, a line at a time.
If @@var{filename} is @@code{NULL}, then read from @@file{~/.history}.
Returns 0 if successful, or @@code{errno} if not.
d301 1
a301 1
@@deftypefun int read_history_range (const char *filename, int from, int to)
d303 2
a304 2
Start reading at line @@var{from} and end at @@var{to}.
If @@var{from} is zero, start at the beginning.  If @@var{to} is less than
d310 1
a310 1
@@deftypefun int write_history (const char *filename)
d312 3
a314 4
if necessary.
If @@var{filename} is @@code{NULL}, then write the history list to
@@file{~/.history}.
Returns 0 on success, or @@code{errno} on a read or write error.
d317 1
a317 1
@@deftypefun int append_history (int nelements, const char *filename)
a318 2
If @@var{filename} is @@code{NULL}, then append to @@file{~/.history}.
Returns 0 on success, or @@code{errno} on a read or write error.
d321 1
a321 1
@@deftypefun int history_truncate_file (const char *filename, int nlines)
a323 2
If @@var{filename} is @@code{NULL}, then @@file{~/.history} is truncated.
Returns 0 on success, or @@code{errno} on failure.
d329 1
a329 1
These functions implement history expansion.
d337 1
a337 1
the text was the removal of escape characters preceding the history expansion
d352 6
a357 1
@@deftypefun {char *} get_history_event (const char *string, int *cindex, int qchar)
d366 1
a366 1
@@deftypefun {char **} history_tokenize (const char *string)
d368 3
a370 9
shell might.  The tokens are split on the characters in the
@@var{history_word_delimiters} variable,
and shell quoting conventions are obeyed.
@@end deftypefun

@@deftypefun {char *} history_arg_extract (int first, int last, const char *string)
Extract a string segment consisting of the @@var{first} through @@var{last}
arguments present in @@var{string}.  Arguments are split using
@@code{history_tokenize}.
d376 2
a377 2
This section describes the externally-visible variables exported by
the @@sc{gnu} History Library.
d387 1
a387 1
@@deftypevar int history_max_entries
d389 1
a389 1
@@code{stifle_history()}.
d393 1
a393 2
The character that introduces a history event.  The default is @@samp{!}.
Setting this to 0 inhibits history expansion.
a407 5
@@deftypevar {char *} history_word_delimiters
The characters that separate tokens for @@code{history_tokenize()}.
The default value is @@code{" \t\n()<>;&|"}.
@@end deftypevar

d410 2
a411 2
following @@var{history_expansion_char}.  The default is space, tab, newline,
carriage return, and @@samp{=}.
d416 1
a416 1
string, in addition to space, TAB, @@samp{:} and @@samp{?} in the case of
d425 1
a425 1
@@deftypevar {rl_linebuf_func_t *} history_inhibit_expansion_function
d427 1
a427 2
a @@code{char *} (@@var{string})
and an @@code{int} index into that string (@@var{i}).
d433 1
a433 1
By default, this variable is set to @@code{NULL}.
d439 1
a439 1
The following program demonstrates simple use of the @@sc{gnu} History Library.
d442 1
a442 6
#include <stdio.h>
#include <readline/history.h>

main (argc, argv)
     int argc;
     char **argv;
@


1.2
log
@Dummy commit before importof 4.1 version
@
text
@d69 7
d344 1
a344 1
if the returned line should only be displayed, but not executed,
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial creation of sourceware repository
@
text
@@


1.1.1.2
log
@Import of readline 4.1
@
text
@a68 7
Before declaring any functions using any functionality the History
library provides in other code, an application writer should include
the file @@code{<readline/history.h>} in any file that uses the
History library's features.  It supplies extern declarations for all
of the library's public functions and variables, and declares all of
the public data structures.

d337 1
a337 1
if the returned line should be displayed, but not executed,
@


1.1.1.3
log
@import of readline-4.3
@
text
@d4 1
a4 1
Copyright (C) 1988-2002 Free Software Foundation, Inc.
d30 1
a30 1
with the @@sc{gnu} History Library.
d32 1
a32 1
For information on the interactive use of @@sc{gnu} History, @@pxref{Using
d46 4
a49 4
Many programs read input from the user a line at a time.  The @@sc{gnu}
History library is able to keep track of those lines, associate arbitrary
data with each line, and utilize information from previous lines in
composing new ones. 
a82 2
typedef void *histdata_t;

d85 1
a85 1
  histdata_t data;
d98 1
a98 3
/*
 * A structure used to pass around the current state of the history.
 */
d100 4
a103 4
  HIST_ENTRY **entries; /* Pointer to the entries themselves. */
  int offset;           /* The location pointer within this array. */
  int length;           /* Number of elements within this array. */
  int size;             /* Number of slots allocated to this array. */
d115 1
a115 1
exported by the @@sc{gnu} History library.
d142 1
a142 1
@@deftypefun void using_history (void)
d147 1
a147 1
@@deftypefun {HISTORY_STATE *} history_get_history_state (void)
d161 1
a161 1
@@deftypefun void add_history (const char *string)
d172 1
a172 1
@@deftypefun {HIST_ENTRY *} replace_history_entry (int which, const char *line, histdata_t data)
d178 1
a178 1
@@deftypefun void clear_history (void)
d186 3
a188 4
@@deftypefun int unstifle_history (void)
Stop stifling the history.  This returns the previously-set
maximum number of history entries (as set by @@code{stifle_history()}).
The value is positive if the history was
d192 1
a192 1
@@deftypefun int history_is_stifled (void)
d202 2
a203 2
@@deftypefun {HIST_ENTRY **} history_list (void)
Return a @@code{NULL} terminated array of @@code{HIST_ENTRY *} which is the
d208 1
a208 1
@@deftypefun int where_history (void)
d212 1
a212 1
@@deftypefun {HIST_ENTRY *} current_history (void)
d214 1
a214 1
@@code{where_history()}.  If there is no entry there, return a @@code{NULL}
d220 1
a220 2
@@code{history_base} (@@pxref{History Variables}).
If there is no entry there, or if @@var{offset}
d224 1
a224 1
@@deftypefun int history_total_bytes (void)
d237 1
a237 1
Set the current history offset to @@var{pos}, an absolute index
a238 2
Returns 1 on success, 0 if @@var{pos} is less than zero or greater
than the number of history entries.
d241 1
a241 1
@@deftypefun {HIST_ENTRY *} previous_history (void)
d247 1
a247 1
@@deftypefun {HIST_ENTRY *} next_history (void)
d263 4
a266 5
@@deftypefun int history_search (const char *string, int direction)
Search the history for @@var{string}, starting at the current history offset.
If @@var{direction} is less than 0, then the search is through
previous entries, otherwise through subsequent entries.
If @@var{string} is found, then
d273 1
a273 1
@@deftypefun int history_search_prefix (const char *string, int direction)
d276 2
a277 3
@@var{string}.  If @@var{direction} is less than 0, then the search is
through previous entries, otherwise through subsequent entries.
If @@var{string} is found, then the
d282 1
a282 1
@@deftypefun int history_search_pos (const char *string, int direction, int pos)
d295 4
a298 4
@@deftypefun int read_history (const char *filename)
Add the contents of @@var{filename} to the history list, a line at a time.
If @@var{filename} is @@code{NULL}, then read from @@file{~/.history}.
Returns 0 if successful, or @@code{errno} if not.
d301 1
a301 1
@@deftypefun int read_history_range (const char *filename, int from, int to)
d303 2
a304 2
Start reading at line @@var{from} and end at @@var{to}.
If @@var{from} is zero, start at the beginning.  If @@var{to} is less than
d310 1
a310 1
@@deftypefun int write_history (const char *filename)
d312 3
a314 4
if necessary.
If @@var{filename} is @@code{NULL}, then write the history list to
@@file{~/.history}.
Returns 0 on success, or @@code{errno} on a read or write error.
d317 1
a317 1
@@deftypefun int append_history (int nelements, const char *filename)
a318 2
If @@var{filename} is @@code{NULL}, then append to @@file{~/.history}.
Returns 0 on success, or @@code{errno} on a read or write error.
d321 1
a321 1
@@deftypefun int history_truncate_file (const char *filename, int nlines)
a323 2
If @@var{filename} is @@code{NULL}, then @@file{~/.history} is truncated.
Returns 0 on success, or @@code{errno} on failure.
d329 1
a329 1
These functions implement history expansion.
d337 1
a337 1
the text was the removal of escape characters preceding the history expansion
d352 6
a357 1
@@deftypefun {char *} get_history_event (const char *string, int *cindex, int qchar)
d366 1
a366 1
@@deftypefun {char **} history_tokenize (const char *string)
d368 3
a370 9
shell might.  The tokens are split on the characters in the
@@var{history_word_delimiters} variable,
and shell quoting conventions are obeyed.
@@end deftypefun

@@deftypefun {char *} history_arg_extract (int first, int last, const char *string)
Extract a string segment consisting of the @@var{first} through @@var{last}
arguments present in @@var{string}.  Arguments are split using
@@code{history_tokenize}.
d376 2
a377 2
This section describes the externally-visible variables exported by
the @@sc{gnu} History Library.
d387 1
a387 1
@@deftypevar int history_max_entries
d389 1
a389 1
@@code{stifle_history()}.
d393 1
a393 2
The character that introduces a history event.  The default is @@samp{!}.
Setting this to 0 inhibits history expansion.
a407 5
@@deftypevar {char *} history_word_delimiters
The characters that separate tokens for @@code{history_tokenize()}.
The default value is @@code{" \t\n()<>;&|"}.
@@end deftypevar

d410 2
a411 2
following @@var{history_expansion_char}.  The default is space, tab, newline,
carriage return, and @@samp{=}.
d416 1
a416 1
string, in addition to space, TAB, @@samp{:} and @@samp{?} in the case of
d425 1
a425 1
@@deftypevar {rl_linebuf_func_t *} history_inhibit_expansion_function
d427 1
a427 2
a @@code{char *} (@@var{string})
and an @@code{int} index into that string (@@var{i}).
d433 1
a433 1
By default, this variable is set to @@code{NULL}.
d439 1
a439 1
The following program demonstrates simple use of the @@sc{gnu} History Library.
d442 1
a442 6
#include <stdio.h>
#include <readline/history.h>

main (argc, argv)
     int argc;
     char **argv;
@


