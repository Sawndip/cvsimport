head	1.1;
access;
symbols
	binutils-2_23_2:1.1.24.1
	binutils-2_23_1:1.1.24.1
	binutils-2_23-branch:1.1.0.24
	binutils-2_20_1:1.1.22.1
	binutils-2_20:1.1.22.1
	binutils-2_20-branch:1.1.0.22
	binutils-2_19_1:1.1.20.1
	binutils-2_19:1.1.20.1
	binutils-2_19-branch:1.1.0.20
	binutils-2_18:1.1.18.1
	binutils-2_18-branch:1.1.0.18
	binutils-2_17:1.1.16.1
	binutils-csl-wrs-linux-3_4_4-24:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-23:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-22:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-21:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-20:1.1.14.1
	binutils-2_17-branch:1.1.0.16
	binutils-csl-gxxpro-3_4-branch:1.1.14.1.0.4
	binutils-csl-gxxpro-3_4-branchpoint:1.1.14.1
	binutils-2_16_1:1.1.14.1
	binutils-csl-arm-2005q1b:1.1.14.1
	binutils-2_16:1.1.14.1
	binutils-csl-arm-2005q1a:1.1.14.1
	binutils-csl-arm-2005q1-branch:1.1.14.1.0.2
	binutils-csl-arm-2005q1-branchpoint:1.1.14.1
	binutils-2_16-branch:1.1.0.14
	binutils-2_15:1.1.12.1
	binutils-2_15-branch:1.1.0.12
	binutils-2_14:1.1.10.1
	binutils-2_14-branch:1.1.0.10
	binutils-2_13_2_1:1.1.8.1
	binutils-2_13_2:1.1.8.1
	binutils-2_13_1:1.1.8.1
	binutils-2_13:1.1.8.1
	binutils-2_13-branch:1.1.0.8
	binutils-2_12_1:1.1.6.1
	binutils-2_12:1.1.6.1
	binutils-2_12-branch:1.1.0.6
	binutils-2_11_2:1.1.4.1
	binutils-2_11_1:1.1.4.1
	binutils-2_11:1.1.4.1
	binutils-2_11-branch:1.1.0.4
	binutils-2_10_1:1.1.2.1
	binutils-2_10:1.1.2.1
	binutils_latest_snapshot:1.1.2.1
	binutils-2_10-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2000.05.29.14.08.53;	author pb;	state dead;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1
	1.1.8.1
	1.1.10.1
	1.1.12.1
	1.1.14.1
	1.1.16.1
	1.1.18.1
	1.1.20.1
	1.1.22.1
	1.1.24.1;
next	;

1.1.2.1
date	2000.05.29.14.08.53;	author pb;	state Exp;
branches;
next	;

1.1.4.1
date	2001.03.12.15.41.12;	author pb;	state Exp;
branches;
next	;

1.1.6.1
date	2002.03.08.17.01.33;	author drow;	state Exp;
branches;
next	;

1.1.8.1
date	2002.08.05.20.43.48;	author drow;	state Exp;
branches;
next	;

1.1.10.1
date	2003.04.27.20.36.16;	author drow;	state Exp;
branches;
next	;

1.1.12.1
date	2004.04.09.19.32.20;	author drow;	state Exp;
branches;
next	;

1.1.14.1
date	2005.03.08.17.19.53;	author drow;	state Exp;
branches
	1.1.14.1.4.1;
next	;

1.1.14.1.4.1
date	2006.03.16.20.02.33;	author carlos;	state dead;
branches;
next	;

1.1.16.1
date	2006.04.16.18.36.47;	author drow;	state Exp;
branches;
next	;

1.1.18.1
date	2007.08.06.21.05.38;	author drow;	state Exp;
branches;
next	;

1.1.20.1
date	2008.09.11.08.24.19;	author gingold;	state Exp;
branches;
next	;

1.1.22.1
date	2009.10.16.12.07.05;	author gingold;	state Exp;
branches;
next	;

1.1.24.1
date	2012.11.13.14.51.36;	author gingold;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file ldgram.h was initially added on branch binutils-2_10-branch.
@
text
@@


1.1.24.1
log
@*** empty log message ***
@
text
@a0 343
/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton interface for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     INT = 258,
     NAME = 259,
     LNAME = 260,
     OREQ = 261,
     ANDEQ = 262,
     RSHIFTEQ = 263,
     LSHIFTEQ = 264,
     DIVEQ = 265,
     MULTEQ = 266,
     MINUSEQ = 267,
     PLUSEQ = 268,
     OROR = 269,
     ANDAND = 270,
     NE = 271,
     EQ = 272,
     GE = 273,
     LE = 274,
     RSHIFT = 275,
     LSHIFT = 276,
     UNARY = 277,
     END = 278,
     ALIGN_K = 279,
     BLOCK = 280,
     BIND = 281,
     QUAD = 282,
     SQUAD = 283,
     LONG = 284,
     SHORT = 285,
     BYTE = 286,
     SECTIONS = 287,
     PHDRS = 288,
     INSERT_K = 289,
     AFTER = 290,
     BEFORE = 291,
     DATA_SEGMENT_ALIGN = 292,
     DATA_SEGMENT_RELRO_END = 293,
     DATA_SEGMENT_END = 294,
     SORT_BY_NAME = 295,
     SORT_BY_ALIGNMENT = 296,
     SORT_NONE = 297,
     SORT_BY_INIT_PRIORITY = 298,
     SIZEOF_HEADERS = 299,
     OUTPUT_FORMAT = 300,
     FORCE_COMMON_ALLOCATION = 301,
     OUTPUT_ARCH = 302,
     INHIBIT_COMMON_ALLOCATION = 303,
     SEGMENT_START = 304,
     INCLUDE = 305,
     MEMORY = 306,
     REGION_ALIAS = 307,
     LD_FEATURE = 308,
     NOLOAD = 309,
     DSECT = 310,
     COPY = 311,
     INFO = 312,
     OVERLAY = 313,
     DEFINED = 314,
     TARGET_K = 315,
     SEARCH_DIR = 316,
     MAP = 317,
     ENTRY = 318,
     NEXT = 319,
     SIZEOF = 320,
     ALIGNOF = 321,
     ADDR = 322,
     LOADADDR = 323,
     MAX_K = 324,
     MIN_K = 325,
     STARTUP = 326,
     HLL = 327,
     SYSLIB = 328,
     FLOAT = 329,
     NOFLOAT = 330,
     NOCROSSREFS = 331,
     ORIGIN = 332,
     FILL = 333,
     LENGTH = 334,
     CREATE_OBJECT_SYMBOLS = 335,
     INPUT = 336,
     GROUP = 337,
     OUTPUT = 338,
     CONSTRUCTORS = 339,
     ALIGNMOD = 340,
     AT = 341,
     SUBALIGN = 342,
     HIDDEN = 343,
     PROVIDE = 344,
     PROVIDE_HIDDEN = 345,
     AS_NEEDED = 346,
     CHIP = 347,
     LIST = 348,
     SECT = 349,
     ABSOLUTE = 350,
     LOAD = 351,
     NEWLINE = 352,
     ENDWORD = 353,
     ORDER = 354,
     NAMEWORD = 355,
     ASSERT_K = 356,
     FORMAT = 357,
     PUBLIC = 358,
     DEFSYMEND = 359,
     BASE = 360,
     ALIAS = 361,
     TRUNCATE = 362,
     REL = 363,
     INPUT_SCRIPT = 364,
     INPUT_MRI_SCRIPT = 365,
     INPUT_DEFSYM = 366,
     CASE = 367,
     EXTERN = 368,
     START = 369,
     VERS_TAG = 370,
     VERS_IDENTIFIER = 371,
     GLOBAL = 372,
     LOCAL = 373,
     VERSIONK = 374,
     INPUT_VERSION_SCRIPT = 375,
     KEEP = 376,
     ONLY_IF_RO = 377,
     ONLY_IF_RW = 378,
     SPECIAL = 379,
     INPUT_SECTION_FLAGS = 380,
     EXCLUDE_FILE = 381,
     CONSTANT = 382,
     INPUT_DYNAMIC_LIST = 383
   };
#endif
/* Tokens.  */
#define INT 258
#define NAME 259
#define LNAME 260
#define OREQ 261
#define ANDEQ 262
#define RSHIFTEQ 263
#define LSHIFTEQ 264
#define DIVEQ 265
#define MULTEQ 266
#define MINUSEQ 267
#define PLUSEQ 268
#define OROR 269
#define ANDAND 270
#define NE 271
#define EQ 272
#define GE 273
#define LE 274
#define RSHIFT 275
#define LSHIFT 276
#define UNARY 277
#define END 278
#define ALIGN_K 279
#define BLOCK 280
#define BIND 281
#define QUAD 282
#define SQUAD 283
#define LONG 284
#define SHORT 285
#define BYTE 286
#define SECTIONS 287
#define PHDRS 288
#define INSERT_K 289
#define AFTER 290
#define BEFORE 291
#define DATA_SEGMENT_ALIGN 292
#define DATA_SEGMENT_RELRO_END 293
#define DATA_SEGMENT_END 294
#define SORT_BY_NAME 295
#define SORT_BY_ALIGNMENT 296
#define SORT_NONE 297
#define SORT_BY_INIT_PRIORITY 298
#define SIZEOF_HEADERS 299
#define OUTPUT_FORMAT 300
#define FORCE_COMMON_ALLOCATION 301
#define OUTPUT_ARCH 302
#define INHIBIT_COMMON_ALLOCATION 303
#define SEGMENT_START 304
#define INCLUDE 305
#define MEMORY 306
#define REGION_ALIAS 307
#define LD_FEATURE 308
#define NOLOAD 309
#define DSECT 310
#define COPY 311
#define INFO 312
#define OVERLAY 313
#define DEFINED 314
#define TARGET_K 315
#define SEARCH_DIR 316
#define MAP 317
#define ENTRY 318
#define NEXT 319
#define SIZEOF 320
#define ALIGNOF 321
#define ADDR 322
#define LOADADDR 323
#define MAX_K 324
#define MIN_K 325
#define STARTUP 326
#define HLL 327
#define SYSLIB 328
#define FLOAT 329
#define NOFLOAT 330
#define NOCROSSREFS 331
#define ORIGIN 332
#define FILL 333
#define LENGTH 334
#define CREATE_OBJECT_SYMBOLS 335
#define INPUT 336
#define GROUP 337
#define OUTPUT 338
#define CONSTRUCTORS 339
#define ALIGNMOD 340
#define AT 341
#define SUBALIGN 342
#define HIDDEN 343
#define PROVIDE 344
#define PROVIDE_HIDDEN 345
#define AS_NEEDED 346
#define CHIP 347
#define LIST 348
#define SECT 349
#define ABSOLUTE 350
#define LOAD 351
#define NEWLINE 352
#define ENDWORD 353
#define ORDER 354
#define NAMEWORD 355
#define ASSERT_K 356
#define FORMAT 357
#define PUBLIC 358
#define DEFSYMEND 359
#define BASE 360
#define ALIAS 361
#define TRUNCATE 362
#define REL 363
#define INPUT_SCRIPT 364
#define INPUT_MRI_SCRIPT 365
#define INPUT_DEFSYM 366
#define CASE 367
#define EXTERN 368
#define START 369
#define VERS_TAG 370
#define VERS_IDENTIFIER 371
#define GLOBAL 372
#define LOCAL 373
#define VERSIONK 374
#define INPUT_VERSION_SCRIPT 375
#define KEEP 376
#define ONLY_IF_RO 377
#define ONLY_IF_RW 378
#define SPECIAL 379
#define INPUT_SECTION_FLAGS 380
#define EXCLUDE_FILE 381
#define CONSTANT 382
#define INPUT_DYNAMIC_LIST 383




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 62 "ldgram.y"
{
  bfd_vma integer;
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  struct flag_info_list *flag_info_list;
  struct flag_info *flag_info;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      bfd_boolean filehdr;
      bfd_boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
}
/* Line 1529 of yacc.c.  */
#line 336 "ldgram.h"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif

extern YYSTYPE yylval;

@


1.1.22.1
log
@bfd/
2009-10-16  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.20
	* Makefile.am (RELEASE): Set.
	* configure, Makefile.in: Regenerate.
@
text
@a0 331
/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton interface for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     INT = 258,
     NAME = 259,
     LNAME = 260,
     OREQ = 261,
     ANDEQ = 262,
     RSHIFTEQ = 263,
     LSHIFTEQ = 264,
     DIVEQ = 265,
     MULTEQ = 266,
     MINUSEQ = 267,
     PLUSEQ = 268,
     OROR = 269,
     ANDAND = 270,
     NE = 271,
     EQ = 272,
     GE = 273,
     LE = 274,
     RSHIFT = 275,
     LSHIFT = 276,
     UNARY = 277,
     END = 278,
     ALIGN_K = 279,
     BLOCK = 280,
     BIND = 281,
     QUAD = 282,
     SQUAD = 283,
     LONG = 284,
     SHORT = 285,
     BYTE = 286,
     SECTIONS = 287,
     PHDRS = 288,
     INSERT_K = 289,
     AFTER = 290,
     BEFORE = 291,
     DATA_SEGMENT_ALIGN = 292,
     DATA_SEGMENT_RELRO_END = 293,
     DATA_SEGMENT_END = 294,
     SORT_BY_NAME = 295,
     SORT_BY_ALIGNMENT = 296,
     SIZEOF_HEADERS = 297,
     OUTPUT_FORMAT = 298,
     FORCE_COMMON_ALLOCATION = 299,
     OUTPUT_ARCH = 300,
     INHIBIT_COMMON_ALLOCATION = 301,
     SEGMENT_START = 302,
     INCLUDE = 303,
     MEMORY = 304,
     REGION_ALIAS = 305,
     NOLOAD = 306,
     DSECT = 307,
     COPY = 308,
     INFO = 309,
     OVERLAY = 310,
     DEFINED = 311,
     TARGET_K = 312,
     SEARCH_DIR = 313,
     MAP = 314,
     ENTRY = 315,
     NEXT = 316,
     SIZEOF = 317,
     ALIGNOF = 318,
     ADDR = 319,
     LOADADDR = 320,
     MAX_K = 321,
     MIN_K = 322,
     STARTUP = 323,
     HLL = 324,
     SYSLIB = 325,
     FLOAT = 326,
     NOFLOAT = 327,
     NOCROSSREFS = 328,
     ORIGIN = 329,
     FILL = 330,
     LENGTH = 331,
     CREATE_OBJECT_SYMBOLS = 332,
     INPUT = 333,
     GROUP = 334,
     OUTPUT = 335,
     CONSTRUCTORS = 336,
     ALIGNMOD = 337,
     AT = 338,
     SUBALIGN = 339,
     PROVIDE = 340,
     PROVIDE_HIDDEN = 341,
     AS_NEEDED = 342,
     CHIP = 343,
     LIST = 344,
     SECT = 345,
     ABSOLUTE = 346,
     LOAD = 347,
     NEWLINE = 348,
     ENDWORD = 349,
     ORDER = 350,
     NAMEWORD = 351,
     ASSERT_K = 352,
     FORMAT = 353,
     PUBLIC = 354,
     DEFSYMEND = 355,
     BASE = 356,
     ALIAS = 357,
     TRUNCATE = 358,
     REL = 359,
     INPUT_SCRIPT = 360,
     INPUT_MRI_SCRIPT = 361,
     INPUT_DEFSYM = 362,
     CASE = 363,
     EXTERN = 364,
     START = 365,
     VERS_TAG = 366,
     VERS_IDENTIFIER = 367,
     GLOBAL = 368,
     LOCAL = 369,
     VERSIONK = 370,
     INPUT_VERSION_SCRIPT = 371,
     KEEP = 372,
     ONLY_IF_RO = 373,
     ONLY_IF_RW = 374,
     SPECIAL = 375,
     EXCLUDE_FILE = 376,
     CONSTANT = 377,
     INPUT_DYNAMIC_LIST = 378
   };
#endif
/* Tokens.  */
#define INT 258
#define NAME 259
#define LNAME 260
#define OREQ 261
#define ANDEQ 262
#define RSHIFTEQ 263
#define LSHIFTEQ 264
#define DIVEQ 265
#define MULTEQ 266
#define MINUSEQ 267
#define PLUSEQ 268
#define OROR 269
#define ANDAND 270
#define NE 271
#define EQ 272
#define GE 273
#define LE 274
#define RSHIFT 275
#define LSHIFT 276
#define UNARY 277
#define END 278
#define ALIGN_K 279
#define BLOCK 280
#define BIND 281
#define QUAD 282
#define SQUAD 283
#define LONG 284
#define SHORT 285
#define BYTE 286
#define SECTIONS 287
#define PHDRS 288
#define INSERT_K 289
#define AFTER 290
#define BEFORE 291
#define DATA_SEGMENT_ALIGN 292
#define DATA_SEGMENT_RELRO_END 293
#define DATA_SEGMENT_END 294
#define SORT_BY_NAME 295
#define SORT_BY_ALIGNMENT 296
#define SIZEOF_HEADERS 297
#define OUTPUT_FORMAT 298
#define FORCE_COMMON_ALLOCATION 299
#define OUTPUT_ARCH 300
#define INHIBIT_COMMON_ALLOCATION 301
#define SEGMENT_START 302
#define INCLUDE 303
#define MEMORY 304
#define REGION_ALIAS 305
#define NOLOAD 306
#define DSECT 307
#define COPY 308
#define INFO 309
#define OVERLAY 310
#define DEFINED 311
#define TARGET_K 312
#define SEARCH_DIR 313
#define MAP 314
#define ENTRY 315
#define NEXT 316
#define SIZEOF 317
#define ALIGNOF 318
#define ADDR 319
#define LOADADDR 320
#define MAX_K 321
#define MIN_K 322
#define STARTUP 323
#define HLL 324
#define SYSLIB 325
#define FLOAT 326
#define NOFLOAT 327
#define NOCROSSREFS 328
#define ORIGIN 329
#define FILL 330
#define LENGTH 331
#define CREATE_OBJECT_SYMBOLS 332
#define INPUT 333
#define GROUP 334
#define OUTPUT 335
#define CONSTRUCTORS 336
#define ALIGNMOD 337
#define AT 338
#define SUBALIGN 339
#define PROVIDE 340
#define PROVIDE_HIDDEN 341
#define AS_NEEDED 342
#define CHIP 343
#define LIST 344
#define SECT 345
#define ABSOLUTE 346
#define LOAD 347
#define NEWLINE 348
#define ENDWORD 349
#define ORDER 350
#define NAMEWORD 351
#define ASSERT_K 352
#define FORMAT 353
#define PUBLIC 354
#define DEFSYMEND 355
#define BASE 356
#define ALIAS 357
#define TRUNCATE 358
#define REL 359
#define INPUT_SCRIPT 360
#define INPUT_MRI_SCRIPT 361
#define INPUT_DEFSYM 362
#define CASE 363
#define EXTERN 364
#define START 365
#define VERS_TAG 366
#define VERS_IDENTIFIER 367
#define GLOBAL 368
#define LOCAL 369
#define VERSIONK 370
#define INPUT_VERSION_SCRIPT 371
#define KEEP 372
#define ONLY_IF_RO 373
#define ONLY_IF_RW 374
#define SPECIAL 375
#define EXCLUDE_FILE 376
#define CONSTANT 377
#define INPUT_DYNAMIC_LIST 378




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 62 "ldgram.y"
{
  bfd_vma integer;
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      bfd_boolean filehdr;
      bfd_boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
}
/* Line 1529 of yacc.c.  */
#line 324 "ldgram.h"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif

extern YYSTYPE yylval;

@


1.1.20.1
log
@Generated files for binutils 2.19.
@
text
@a0 319
/* A Bison parser, made by GNU Bison 2.1.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     INT = 258,
     NAME = 259,
     LNAME = 260,
     OREQ = 261,
     ANDEQ = 262,
     RSHIFTEQ = 263,
     LSHIFTEQ = 264,
     DIVEQ = 265,
     MULTEQ = 266,
     MINUSEQ = 267,
     PLUSEQ = 268,
     OROR = 269,
     ANDAND = 270,
     NE = 271,
     EQ = 272,
     GE = 273,
     LE = 274,
     RSHIFT = 275,
     LSHIFT = 276,
     UNARY = 277,
     END = 278,
     ALIGN_K = 279,
     BLOCK = 280,
     BIND = 281,
     QUAD = 282,
     SQUAD = 283,
     LONG = 284,
     SHORT = 285,
     BYTE = 286,
     SECTIONS = 287,
     PHDRS = 288,
     INSERT_K = 289,
     AFTER = 290,
     BEFORE = 291,
     DATA_SEGMENT_ALIGN = 292,
     DATA_SEGMENT_RELRO_END = 293,
     DATA_SEGMENT_END = 294,
     SORT_BY_NAME = 295,
     SORT_BY_ALIGNMENT = 296,
     SIZEOF_HEADERS = 297,
     OUTPUT_FORMAT = 298,
     FORCE_COMMON_ALLOCATION = 299,
     OUTPUT_ARCH = 300,
     INHIBIT_COMMON_ALLOCATION = 301,
     SEGMENT_START = 302,
     INCLUDE = 303,
     MEMORY = 304,
     NOLOAD = 305,
     DSECT = 306,
     COPY = 307,
     INFO = 308,
     OVERLAY = 309,
     DEFINED = 310,
     TARGET_K = 311,
     SEARCH_DIR = 312,
     MAP = 313,
     ENTRY = 314,
     NEXT = 315,
     SIZEOF = 316,
     ALIGNOF = 317,
     ADDR = 318,
     LOADADDR = 319,
     MAX_K = 320,
     MIN_K = 321,
     STARTUP = 322,
     HLL = 323,
     SYSLIB = 324,
     FLOAT = 325,
     NOFLOAT = 326,
     NOCROSSREFS = 327,
     ORIGIN = 328,
     FILL = 329,
     LENGTH = 330,
     CREATE_OBJECT_SYMBOLS = 331,
     INPUT = 332,
     GROUP = 333,
     OUTPUT = 334,
     CONSTRUCTORS = 335,
     ALIGNMOD = 336,
     AT = 337,
     SUBALIGN = 338,
     PROVIDE = 339,
     PROVIDE_HIDDEN = 340,
     AS_NEEDED = 341,
     CHIP = 342,
     LIST = 343,
     SECT = 344,
     ABSOLUTE = 345,
     LOAD = 346,
     NEWLINE = 347,
     ENDWORD = 348,
     ORDER = 349,
     NAMEWORD = 350,
     ASSERT_K = 351,
     FORMAT = 352,
     PUBLIC = 353,
     DEFSYMEND = 354,
     BASE = 355,
     ALIAS = 356,
     TRUNCATE = 357,
     REL = 358,
     INPUT_SCRIPT = 359,
     INPUT_MRI_SCRIPT = 360,
     INPUT_DEFSYM = 361,
     CASE = 362,
     EXTERN = 363,
     START = 364,
     VERS_TAG = 365,
     VERS_IDENTIFIER = 366,
     GLOBAL = 367,
     LOCAL = 368,
     VERSIONK = 369,
     INPUT_VERSION_SCRIPT = 370,
     KEEP = 371,
     ONLY_IF_RO = 372,
     ONLY_IF_RW = 373,
     SPECIAL = 374,
     EXCLUDE_FILE = 375,
     CONSTANT = 376,
     INPUT_DYNAMIC_LIST = 377
   };
#endif
/* Tokens.  */
#define INT 258
#define NAME 259
#define LNAME 260
#define OREQ 261
#define ANDEQ 262
#define RSHIFTEQ 263
#define LSHIFTEQ 264
#define DIVEQ 265
#define MULTEQ 266
#define MINUSEQ 267
#define PLUSEQ 268
#define OROR 269
#define ANDAND 270
#define NE 271
#define EQ 272
#define GE 273
#define LE 274
#define RSHIFT 275
#define LSHIFT 276
#define UNARY 277
#define END 278
#define ALIGN_K 279
#define BLOCK 280
#define BIND 281
#define QUAD 282
#define SQUAD 283
#define LONG 284
#define SHORT 285
#define BYTE 286
#define SECTIONS 287
#define PHDRS 288
#define INSERT_K 289
#define AFTER 290
#define BEFORE 291
#define DATA_SEGMENT_ALIGN 292
#define DATA_SEGMENT_RELRO_END 293
#define DATA_SEGMENT_END 294
#define SORT_BY_NAME 295
#define SORT_BY_ALIGNMENT 296
#define SIZEOF_HEADERS 297
#define OUTPUT_FORMAT 298
#define FORCE_COMMON_ALLOCATION 299
#define OUTPUT_ARCH 300
#define INHIBIT_COMMON_ALLOCATION 301
#define SEGMENT_START 302
#define INCLUDE 303
#define MEMORY 304
#define NOLOAD 305
#define DSECT 306
#define COPY 307
#define INFO 308
#define OVERLAY 309
#define DEFINED 310
#define TARGET_K 311
#define SEARCH_DIR 312
#define MAP 313
#define ENTRY 314
#define NEXT 315
#define SIZEOF 316
#define ALIGNOF 317
#define ADDR 318
#define LOADADDR 319
#define MAX_K 320
#define MIN_K 321
#define STARTUP 322
#define HLL 323
#define SYSLIB 324
#define FLOAT 325
#define NOFLOAT 326
#define NOCROSSREFS 327
#define ORIGIN 328
#define FILL 329
#define LENGTH 330
#define CREATE_OBJECT_SYMBOLS 331
#define INPUT 332
#define GROUP 333
#define OUTPUT 334
#define CONSTRUCTORS 335
#define ALIGNMOD 336
#define AT 337
#define SUBALIGN 338
#define PROVIDE 339
#define PROVIDE_HIDDEN 340
#define AS_NEEDED 341
#define CHIP 342
#define LIST 343
#define SECT 344
#define ABSOLUTE 345
#define LOAD 346
#define NEWLINE 347
#define ENDWORD 348
#define ORDER 349
#define NAMEWORD 350
#define ASSERT_K 351
#define FORMAT 352
#define PUBLIC 353
#define DEFSYMEND 354
#define BASE 355
#define ALIAS 356
#define TRUNCATE 357
#define REL 358
#define INPUT_SCRIPT 359
#define INPUT_MRI_SCRIPT 360
#define INPUT_DEFSYM 361
#define CASE 362
#define EXTERN 363
#define START 364
#define VERS_TAG 365
#define VERS_IDENTIFIER 366
#define GLOBAL 367
#define LOCAL 368
#define VERSIONK 369
#define INPUT_VERSION_SCRIPT 370
#define KEEP 371
#define ONLY_IF_RO 372
#define ONLY_IF_RW 373
#define SPECIAL 374
#define EXCLUDE_FILE 375
#define CONSTANT 376
#define INPUT_DYNAMIC_LIST 377




#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
#line 61 "ldgram.y"
typedef union YYSTYPE {
  bfd_vma integer;
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      bfd_boolean filehdr;
      bfd_boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
} YYSTYPE;
/* Line 1447 of yacc.c.  */
#line 311 "ldgram.h"
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif

extern YYSTYPE yylval;



@


1.1.18.1
log
@Commit generated files for binutils 2.17.90.
@
text
@a0 323
/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton interface for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     INT = 258,
     NAME = 259,
     LNAME = 260,
     OREQ = 261,
     ANDEQ = 262,
     RSHIFTEQ = 263,
     LSHIFTEQ = 264,
     DIVEQ = 265,
     MULTEQ = 266,
     MINUSEQ = 267,
     PLUSEQ = 268,
     OROR = 269,
     ANDAND = 270,
     NE = 271,
     EQ = 272,
     GE = 273,
     LE = 274,
     RSHIFT = 275,
     LSHIFT = 276,
     UNARY = 277,
     END = 278,
     ALIGN_K = 279,
     BLOCK = 280,
     BIND = 281,
     QUAD = 282,
     SQUAD = 283,
     LONG = 284,
     SHORT = 285,
     BYTE = 286,
     SECTIONS = 287,
     PHDRS = 288,
     DATA_SEGMENT_ALIGN = 289,
     DATA_SEGMENT_RELRO_END = 290,
     DATA_SEGMENT_END = 291,
     SORT_BY_NAME = 292,
     SORT_BY_ALIGNMENT = 293,
     SIZEOF_HEADERS = 294,
     OUTPUT_FORMAT = 295,
     FORCE_COMMON_ALLOCATION = 296,
     OUTPUT_ARCH = 297,
     INHIBIT_COMMON_ALLOCATION = 298,
     SEGMENT_START = 299,
     INCLUDE = 300,
     MEMORY = 301,
     NOLOAD = 302,
     DSECT = 303,
     COPY = 304,
     INFO = 305,
     OVERLAY = 306,
     DEFINED = 307,
     TARGET_K = 308,
     SEARCH_DIR = 309,
     MAP = 310,
     ENTRY = 311,
     NEXT = 312,
     SIZEOF = 313,
     ALIGNOF = 314,
     ADDR = 315,
     LOADADDR = 316,
     MAX_K = 317,
     MIN_K = 318,
     STARTUP = 319,
     HLL = 320,
     SYSLIB = 321,
     FLOAT = 322,
     NOFLOAT = 323,
     NOCROSSREFS = 324,
     ORIGIN = 325,
     FILL = 326,
     LENGTH = 327,
     CREATE_OBJECT_SYMBOLS = 328,
     INPUT = 329,
     GROUP = 330,
     OUTPUT = 331,
     CONSTRUCTORS = 332,
     ALIGNMOD = 333,
     AT = 334,
     SUBALIGN = 335,
     PROVIDE = 336,
     PROVIDE_HIDDEN = 337,
     AS_NEEDED = 338,
     CHIP = 339,
     LIST = 340,
     SECT = 341,
     ABSOLUTE = 342,
     LOAD = 343,
     NEWLINE = 344,
     ENDWORD = 345,
     ORDER = 346,
     NAMEWORD = 347,
     ASSERT_K = 348,
     FORMAT = 349,
     PUBLIC = 350,
     DEFSYMEND = 351,
     BASE = 352,
     ALIAS = 353,
     TRUNCATE = 354,
     REL = 355,
     INPUT_SCRIPT = 356,
     INPUT_MRI_SCRIPT = 357,
     INPUT_DEFSYM = 358,
     CASE = 359,
     EXTERN = 360,
     START = 361,
     VERS_TAG = 362,
     VERS_IDENTIFIER = 363,
     GLOBAL = 364,
     LOCAL = 365,
     VERSIONK = 366,
     INPUT_VERSION_SCRIPT = 367,
     KEEP = 368,
     ONLY_IF_RO = 369,
     ONLY_IF_RW = 370,
     SPECIAL = 371,
     EXCLUDE_FILE = 372,
     CONSTANT = 373,
     INPUT_DYNAMIC_LIST = 374
   };
#endif
/* Tokens.  */
#define INT 258
#define NAME 259
#define LNAME 260
#define OREQ 261
#define ANDEQ 262
#define RSHIFTEQ 263
#define LSHIFTEQ 264
#define DIVEQ 265
#define MULTEQ 266
#define MINUSEQ 267
#define PLUSEQ 268
#define OROR 269
#define ANDAND 270
#define NE 271
#define EQ 272
#define GE 273
#define LE 274
#define RSHIFT 275
#define LSHIFT 276
#define UNARY 277
#define END 278
#define ALIGN_K 279
#define BLOCK 280
#define BIND 281
#define QUAD 282
#define SQUAD 283
#define LONG 284
#define SHORT 285
#define BYTE 286
#define SECTIONS 287
#define PHDRS 288
#define DATA_SEGMENT_ALIGN 289
#define DATA_SEGMENT_RELRO_END 290
#define DATA_SEGMENT_END 291
#define SORT_BY_NAME 292
#define SORT_BY_ALIGNMENT 293
#define SIZEOF_HEADERS 294
#define OUTPUT_FORMAT 295
#define FORCE_COMMON_ALLOCATION 296
#define OUTPUT_ARCH 297
#define INHIBIT_COMMON_ALLOCATION 298
#define SEGMENT_START 299
#define INCLUDE 300
#define MEMORY 301
#define NOLOAD 302
#define DSECT 303
#define COPY 304
#define INFO 305
#define OVERLAY 306
#define DEFINED 307
#define TARGET_K 308
#define SEARCH_DIR 309
#define MAP 310
#define ENTRY 311
#define NEXT 312
#define SIZEOF 313
#define ALIGNOF 314
#define ADDR 315
#define LOADADDR 316
#define MAX_K 317
#define MIN_K 318
#define STARTUP 319
#define HLL 320
#define SYSLIB 321
#define FLOAT 322
#define NOFLOAT 323
#define NOCROSSREFS 324
#define ORIGIN 325
#define FILL 326
#define LENGTH 327
#define CREATE_OBJECT_SYMBOLS 328
#define INPUT 329
#define GROUP 330
#define OUTPUT 331
#define CONSTRUCTORS 332
#define ALIGNMOD 333
#define AT 334
#define SUBALIGN 335
#define PROVIDE 336
#define PROVIDE_HIDDEN 337
#define AS_NEEDED 338
#define CHIP 339
#define LIST 340
#define SECT 341
#define ABSOLUTE 342
#define LOAD 343
#define NEWLINE 344
#define ENDWORD 345
#define ORDER 346
#define NAMEWORD 347
#define ASSERT_K 348
#define FORMAT 349
#define PUBLIC 350
#define DEFSYMEND 351
#define BASE 352
#define ALIAS 353
#define TRUNCATE 354
#define REL 355
#define INPUT_SCRIPT 356
#define INPUT_MRI_SCRIPT 357
#define INPUT_DEFSYM 358
#define CASE 359
#define EXTERN 360
#define START 361
#define VERS_TAG 362
#define VERS_IDENTIFIER 363
#define GLOBAL 364
#define LOCAL 365
#define VERSIONK 366
#define INPUT_VERSION_SCRIPT 367
#define KEEP 368
#define ONLY_IF_RO 369
#define ONLY_IF_RW 370
#define SPECIAL 371
#define EXCLUDE_FILE 372
#define CONSTANT 373
#define INPUT_DYNAMIC_LIST 374




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 66 "ldgram.y"
{
  bfd_vma integer;
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      bfd_boolean filehdr;
      bfd_boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
}
/* Line 1489 of yacc.c.  */
#line 316 "ldgram.h"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif

extern YYSTYPE yylval;

@


1.1.16.1
log
@Commit generated files.
@
text
@a0 307
/* A Bison parser, made by GNU Bison 2.1.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     INT = 258,
     NAME = 259,
     LNAME = 260,
     OREQ = 261,
     ANDEQ = 262,
     RSHIFTEQ = 263,
     LSHIFTEQ = 264,
     DIVEQ = 265,
     MULTEQ = 266,
     MINUSEQ = 267,
     PLUSEQ = 268,
     OROR = 269,
     ANDAND = 270,
     NE = 271,
     EQ = 272,
     GE = 273,
     LE = 274,
     RSHIFT = 275,
     LSHIFT = 276,
     UNARY = 277,
     END = 278,
     ALIGN_K = 279,
     BLOCK = 280,
     BIND = 281,
     QUAD = 282,
     SQUAD = 283,
     LONG = 284,
     SHORT = 285,
     BYTE = 286,
     SECTIONS = 287,
     PHDRS = 288,
     DATA_SEGMENT_ALIGN = 289,
     DATA_SEGMENT_RELRO_END = 290,
     DATA_SEGMENT_END = 291,
     SORT_BY_NAME = 292,
     SORT_BY_ALIGNMENT = 293,
     SIZEOF_HEADERS = 294,
     OUTPUT_FORMAT = 295,
     FORCE_COMMON_ALLOCATION = 296,
     OUTPUT_ARCH = 297,
     INHIBIT_COMMON_ALLOCATION = 298,
     SEGMENT_START = 299,
     INCLUDE = 300,
     MEMORY = 301,
     DEFSYMEND = 302,
     NOLOAD = 303,
     DSECT = 304,
     COPY = 305,
     INFO = 306,
     OVERLAY = 307,
     DEFINED = 308,
     TARGET_K = 309,
     SEARCH_DIR = 310,
     MAP = 311,
     ENTRY = 312,
     NEXT = 313,
     SIZEOF = 314,
     ADDR = 315,
     LOADADDR = 316,
     MAX_K = 317,
     MIN_K = 318,
     STARTUP = 319,
     HLL = 320,
     SYSLIB = 321,
     FLOAT = 322,
     NOFLOAT = 323,
     NOCROSSREFS = 324,
     ORIGIN = 325,
     FILL = 326,
     LENGTH = 327,
     CREATE_OBJECT_SYMBOLS = 328,
     INPUT = 329,
     GROUP = 330,
     OUTPUT = 331,
     CONSTRUCTORS = 332,
     ALIGNMOD = 333,
     AT = 334,
     SUBALIGN = 335,
     PROVIDE = 336,
     PROVIDE_HIDDEN = 337,
     AS_NEEDED = 338,
     CHIP = 339,
     LIST = 340,
     SECT = 341,
     ABSOLUTE = 342,
     LOAD = 343,
     NEWLINE = 344,
     ENDWORD = 345,
     ORDER = 346,
     NAMEWORD = 347,
     ASSERT_K = 348,
     FORMAT = 349,
     PUBLIC = 350,
     BASE = 351,
     ALIAS = 352,
     TRUNCATE = 353,
     REL = 354,
     INPUT_SCRIPT = 355,
     INPUT_MRI_SCRIPT = 356,
     INPUT_DEFSYM = 357,
     CASE = 358,
     EXTERN = 359,
     START = 360,
     VERS_TAG = 361,
     VERS_IDENTIFIER = 362,
     GLOBAL = 363,
     LOCAL = 364,
     VERSIONK = 365,
     INPUT_VERSION_SCRIPT = 366,
     KEEP = 367,
     ONLY_IF_RO = 368,
     ONLY_IF_RW = 369,
     SPECIAL = 370,
     EXCLUDE_FILE = 371
   };
#endif
/* Tokens.  */
#define INT 258
#define NAME 259
#define LNAME 260
#define OREQ 261
#define ANDEQ 262
#define RSHIFTEQ 263
#define LSHIFTEQ 264
#define DIVEQ 265
#define MULTEQ 266
#define MINUSEQ 267
#define PLUSEQ 268
#define OROR 269
#define ANDAND 270
#define NE 271
#define EQ 272
#define GE 273
#define LE 274
#define RSHIFT 275
#define LSHIFT 276
#define UNARY 277
#define END 278
#define ALIGN_K 279
#define BLOCK 280
#define BIND 281
#define QUAD 282
#define SQUAD 283
#define LONG 284
#define SHORT 285
#define BYTE 286
#define SECTIONS 287
#define PHDRS 288
#define DATA_SEGMENT_ALIGN 289
#define DATA_SEGMENT_RELRO_END 290
#define DATA_SEGMENT_END 291
#define SORT_BY_NAME 292
#define SORT_BY_ALIGNMENT 293
#define SIZEOF_HEADERS 294
#define OUTPUT_FORMAT 295
#define FORCE_COMMON_ALLOCATION 296
#define OUTPUT_ARCH 297
#define INHIBIT_COMMON_ALLOCATION 298
#define SEGMENT_START 299
#define INCLUDE 300
#define MEMORY 301
#define DEFSYMEND 302
#define NOLOAD 303
#define DSECT 304
#define COPY 305
#define INFO 306
#define OVERLAY 307
#define DEFINED 308
#define TARGET_K 309
#define SEARCH_DIR 310
#define MAP 311
#define ENTRY 312
#define NEXT 313
#define SIZEOF 314
#define ADDR 315
#define LOADADDR 316
#define MAX_K 317
#define MIN_K 318
#define STARTUP 319
#define HLL 320
#define SYSLIB 321
#define FLOAT 322
#define NOFLOAT 323
#define NOCROSSREFS 324
#define ORIGIN 325
#define FILL 326
#define LENGTH 327
#define CREATE_OBJECT_SYMBOLS 328
#define INPUT 329
#define GROUP 330
#define OUTPUT 331
#define CONSTRUCTORS 332
#define ALIGNMOD 333
#define AT 334
#define SUBALIGN 335
#define PROVIDE 336
#define PROVIDE_HIDDEN 337
#define AS_NEEDED 338
#define CHIP 339
#define LIST 340
#define SECT 341
#define ABSOLUTE 342
#define LOAD 343
#define NEWLINE 344
#define ENDWORD 345
#define ORDER 346
#define NAMEWORD 347
#define ASSERT_K 348
#define FORMAT 349
#define PUBLIC 350
#define BASE 351
#define ALIAS 352
#define TRUNCATE 353
#define REL 354
#define INPUT_SCRIPT 355
#define INPUT_MRI_SCRIPT 356
#define INPUT_DEFSYM 357
#define CASE 358
#define EXTERN 359
#define START 360
#define VERS_TAG 361
#define VERS_IDENTIFIER 362
#define GLOBAL 363
#define LOCAL 364
#define VERSIONK 365
#define INPUT_VERSION_SCRIPT 366
#define KEEP 367
#define ONLY_IF_RO 368
#define ONLY_IF_RW 369
#define SPECIAL 370
#define EXCLUDE_FILE 371




#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
#line 65 "ldgram.y"
typedef union YYSTYPE {
  bfd_vma integer;
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      bfd_boolean filehdr;
      bfd_boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
} YYSTYPE;
/* Line 1447 of yacc.c.  */
#line 299 "ldgram.h"
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif

extern YYSTYPE yylval;



@


1.1.14.1
log
@Commit generated files for the binutils 2.16 branch.
@
text
@a0 152
#ifndef BISON_Y_TAB_H
# define BISON_Y_TAB_H

#ifndef YYSTYPE
typedef union {
  bfd_vma integer;
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      bfd_boolean filehdr;
      bfd_boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif
# define	INT	257
# define	NAME	258
# define	LNAME	259
# define	PLUSEQ	260
# define	MINUSEQ	261
# define	MULTEQ	262
# define	DIVEQ	263
# define	LSHIFTEQ	264
# define	RSHIFTEQ	265
# define	ANDEQ	266
# define	OREQ	267
# define	OROR	268
# define	ANDAND	269
# define	EQ	270
# define	NE	271
# define	LE	272
# define	GE	273
# define	LSHIFT	274
# define	RSHIFT	275
# define	UNARY	276
# define	END	277
# define	ALIGN_K	278
# define	BLOCK	279
# define	BIND	280
# define	QUAD	281
# define	SQUAD	282
# define	LONG	283
# define	SHORT	284
# define	BYTE	285
# define	SECTIONS	286
# define	PHDRS	287
# define	DATA_SEGMENT_ALIGN	288
# define	DATA_SEGMENT_RELRO_END	289
# define	DATA_SEGMENT_END	290
# define	SORT_BY_NAME	291
# define	SORT_BY_ALIGNMENT	292
# define	SIZEOF_HEADERS	293
# define	OUTPUT_FORMAT	294
# define	FORCE_COMMON_ALLOCATION	295
# define	OUTPUT_ARCH	296
# define	INHIBIT_COMMON_ALLOCATION	297
# define	SEGMENT_START	298
# define	INCLUDE	299
# define	MEMORY	300
# define	DEFSYMEND	301
# define	NOLOAD	302
# define	DSECT	303
# define	COPY	304
# define	INFO	305
# define	OVERLAY	306
# define	DEFINED	307
# define	TARGET_K	308
# define	SEARCH_DIR	309
# define	MAP	310
# define	ENTRY	311
# define	NEXT	312
# define	SIZEOF	313
# define	ADDR	314
# define	LOADADDR	315
# define	MAX_K	316
# define	MIN_K	317
# define	STARTUP	318
# define	HLL	319
# define	SYSLIB	320
# define	FLOAT	321
# define	NOFLOAT	322
# define	NOCROSSREFS	323
# define	ORIGIN	324
# define	FILL	325
# define	LENGTH	326
# define	CREATE_OBJECT_SYMBOLS	327
# define	INPUT	328
# define	GROUP	329
# define	OUTPUT	330
# define	CONSTRUCTORS	331
# define	ALIGNMOD	332
# define	AT	333
# define	SUBALIGN	334
# define	PROVIDE	335
# define	AS_NEEDED	336
# define	CHIP	337
# define	LIST	338
# define	SECT	339
# define	ABSOLUTE	340
# define	LOAD	341
# define	NEWLINE	342
# define	ENDWORD	343
# define	ORDER	344
# define	NAMEWORD	345
# define	ASSERT_K	346
# define	FORMAT	347
# define	PUBLIC	348
# define	BASE	349
# define	ALIAS	350
# define	TRUNCATE	351
# define	REL	352
# define	INPUT_SCRIPT	353
# define	INPUT_MRI_SCRIPT	354
# define	INPUT_DEFSYM	355
# define	CASE	356
# define	EXTERN	357
# define	START	358
# define	VERS_TAG	359
# define	VERS_IDENTIFIER	360
# define	GLOBAL	361
# define	LOCAL	362
# define	VERSIONK	363
# define	INPUT_VERSION_SCRIPT	364
# define	KEEP	365
# define	ONLY_IF_RO	366
# define	ONLY_IF_RW	367
# define	EXCLUDE_FILE	368


extern YYSTYPE yylval;

#endif /* not BISON_Y_TAB_H */
@


1.1.14.1.4.1
log
@
binutils/

2006-03-16  Carlos O'Donell  <carlos@@codesourcery.com>

	* rcparse.c: Remove generated file.
	* rcparse.h: Likewise.
	* nlmheader.c: Likewise.
	* nlmheader.h: Likewise.
	* arparse.c: Likewise.
	* arparse.h: Likewise.
	* sysinfo.c: Likewise.
	* sysinfo.h: Likewise.
	* defparse.c: Likewise.
	* defparse.h: Likewise.
	* rclex.c: Likewise.
	* syslex.c: Likewise.
	* deflex.c: Likewise.
	* arlex: Likewise.

gas/

2006-03-16  Carlos O'Donell  <carlos@@codesourcery.com>

	* itbl-parse.c: Remove generated file.
	* itbl-parse.h: Likewise.
	* m68k-parse.c: Likewise.
	* itbl-lex.c: Likewise.

ld/

2006-03-16  Carlos O'Donell  <carlos@@codesourcery.com>

	* ldgram.c: Remove generated file.
	* ldgram.h: Likewise.
	* ldlex.c: Likewise.
@
text
@@


1.1.12.1
log
@Generated files for the 2.15 branch.
@
text
@a0 146
#ifndef BISON_Y_TAB_H
# define BISON_Y_TAB_H

#ifndef YYSTYPE
typedef union {
  bfd_vma integer;
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      bfd_boolean filehdr;
      bfd_boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif
# define	INT	257
# define	NAME	258
# define	LNAME	259
# define	PLUSEQ	260
# define	MINUSEQ	261
# define	MULTEQ	262
# define	DIVEQ	263
# define	LSHIFTEQ	264
# define	RSHIFTEQ	265
# define	ANDEQ	266
# define	OREQ	267
# define	OROR	268
# define	ANDAND	269
# define	EQ	270
# define	NE	271
# define	LE	272
# define	GE	273
# define	LSHIFT	274
# define	RSHIFT	275
# define	UNARY	276
# define	END	277
# define	ALIGN_K	278
# define	BLOCK	279
# define	BIND	280
# define	QUAD	281
# define	SQUAD	282
# define	LONG	283
# define	SHORT	284
# define	BYTE	285
# define	SECTIONS	286
# define	PHDRS	287
# define	SORT	288
# define	DATA_SEGMENT_ALIGN	289
# define	DATA_SEGMENT_END	290
# define	SIZEOF_HEADERS	291
# define	OUTPUT_FORMAT	292
# define	FORCE_COMMON_ALLOCATION	293
# define	OUTPUT_ARCH	294
# define	INHIBIT_COMMON_ALLOCATION	295
# define	INCLUDE	296
# define	MEMORY	297
# define	DEFSYMEND	298
# define	NOLOAD	299
# define	DSECT	300
# define	COPY	301
# define	INFO	302
# define	OVERLAY	303
# define	DEFINED	304
# define	TARGET_K	305
# define	SEARCH_DIR	306
# define	MAP	307
# define	ENTRY	308
# define	NEXT	309
# define	SIZEOF	310
# define	ADDR	311
# define	LOADADDR	312
# define	MAX_K	313
# define	MIN_K	314
# define	STARTUP	315
# define	HLL	316
# define	SYSLIB	317
# define	FLOAT	318
# define	NOFLOAT	319
# define	NOCROSSREFS	320
# define	ORIGIN	321
# define	FILL	322
# define	LENGTH	323
# define	CREATE_OBJECT_SYMBOLS	324
# define	INPUT	325
# define	GROUP	326
# define	OUTPUT	327
# define	CONSTRUCTORS	328
# define	ALIGNMOD	329
# define	AT	330
# define	SUBALIGN	331
# define	PROVIDE	332
# define	CHIP	333
# define	LIST	334
# define	SECT	335
# define	ABSOLUTE	336
# define	LOAD	337
# define	NEWLINE	338
# define	ENDWORD	339
# define	ORDER	340
# define	NAMEWORD	341
# define	ASSERT_K	342
# define	FORMAT	343
# define	PUBLIC	344
# define	BASE	345
# define	ALIAS	346
# define	TRUNCATE	347
# define	REL	348
# define	INPUT_SCRIPT	349
# define	INPUT_MRI_SCRIPT	350
# define	INPUT_DEFSYM	351
# define	CASE	352
# define	EXTERN	353
# define	START	354
# define	VERS_TAG	355
# define	VERS_IDENTIFIER	356
# define	GLOBAL	357
# define	LOCAL	358
# define	VERSIONK	359
# define	INPUT_VERSION_SCRIPT	360
# define	KEEP	361
# define	EXCLUDE_FILE	362


extern YYSTYPE yylval;

#endif /* not BISON_Y_TAB_H */
@


1.1.10.1
log
@Add generated files on 2.14 branch.
@
text
@a0 145
#ifndef BISON_Y_TAB_H
# define BISON_Y_TAB_H

#ifndef YYSTYPE
typedef union {
  bfd_vma integer;
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      bfd_boolean filehdr;
      bfd_boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif
# define	INT	257
# define	NAME	258
# define	LNAME	259
# define	PLUSEQ	260
# define	MINUSEQ	261
# define	MULTEQ	262
# define	DIVEQ	263
# define	LSHIFTEQ	264
# define	RSHIFTEQ	265
# define	ANDEQ	266
# define	OREQ	267
# define	OROR	268
# define	ANDAND	269
# define	EQ	270
# define	NE	271
# define	LE	272
# define	GE	273
# define	LSHIFT	274
# define	RSHIFT	275
# define	UNARY	276
# define	END	277
# define	ALIGN_K	278
# define	BLOCK	279
# define	BIND	280
# define	QUAD	281
# define	SQUAD	282
# define	LONG	283
# define	SHORT	284
# define	BYTE	285
# define	SECTIONS	286
# define	PHDRS	287
# define	SORT	288
# define	DATA_SEGMENT_ALIGN	289
# define	DATA_SEGMENT_END	290
# define	SIZEOF_HEADERS	291
# define	OUTPUT_FORMAT	292
# define	FORCE_COMMON_ALLOCATION	293
# define	OUTPUT_ARCH	294
# define	INHIBIT_COMMON_ALLOCATION	295
# define	INCLUDE	296
# define	MEMORY	297
# define	DEFSYMEND	298
# define	NOLOAD	299
# define	DSECT	300
# define	COPY	301
# define	INFO	302
# define	OVERLAY	303
# define	DEFINED	304
# define	TARGET_K	305
# define	SEARCH_DIR	306
# define	MAP	307
# define	ENTRY	308
# define	NEXT	309
# define	SIZEOF	310
# define	ADDR	311
# define	LOADADDR	312
# define	MAX_K	313
# define	MIN_K	314
# define	STARTUP	315
# define	HLL	316
# define	SYSLIB	317
# define	FLOAT	318
# define	NOFLOAT	319
# define	NOCROSSREFS	320
# define	ORIGIN	321
# define	FILL	322
# define	LENGTH	323
# define	CREATE_OBJECT_SYMBOLS	324
# define	INPUT	325
# define	GROUP	326
# define	OUTPUT	327
# define	CONSTRUCTORS	328
# define	ALIGNMOD	329
# define	AT	330
# define	PROVIDE	331
# define	CHIP	332
# define	LIST	333
# define	SECT	334
# define	ABSOLUTE	335
# define	LOAD	336
# define	NEWLINE	337
# define	ENDWORD	338
# define	ORDER	339
# define	NAMEWORD	340
# define	ASSERT_K	341
# define	FORMAT	342
# define	PUBLIC	343
# define	BASE	344
# define	ALIAS	345
# define	TRUNCATE	346
# define	REL	347
# define	INPUT_SCRIPT	348
# define	INPUT_MRI_SCRIPT	349
# define	INPUT_DEFSYM	350
# define	CASE	351
# define	EXTERN	352
# define	START	353
# define	VERS_TAG	354
# define	VERS_IDENTIFIER	355
# define	GLOBAL	356
# define	LOCAL	357
# define	VERSIONK	358
# define	INPUT_VERSION_SCRIPT	359
# define	KEEP	360
# define	EXCLUDE_FILE	361


extern YYSTYPE yylval;

#endif /* not BISON_Y_TAB_H */
@


1.1.8.1
log
@Add generated files.
@
text
@a0 145
#ifndef BISON_Y_TAB_H
# define BISON_Y_TAB_H

#ifndef YYSTYPE
typedef union {
  bfd_vma integer;
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      boolean filehdr;
      boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif
# define	INT	257
# define	NAME	258
# define	LNAME	259
# define	PLUSEQ	260
# define	MINUSEQ	261
# define	MULTEQ	262
# define	DIVEQ	263
# define	LSHIFTEQ	264
# define	RSHIFTEQ	265
# define	ANDEQ	266
# define	OREQ	267
# define	OROR	268
# define	ANDAND	269
# define	EQ	270
# define	NE	271
# define	LE	272
# define	GE	273
# define	LSHIFT	274
# define	RSHIFT	275
# define	UNARY	276
# define	END	277
# define	ALIGN_K	278
# define	BLOCK	279
# define	BIND	280
# define	QUAD	281
# define	SQUAD	282
# define	LONG	283
# define	SHORT	284
# define	BYTE	285
# define	SECTIONS	286
# define	PHDRS	287
# define	SORT	288
# define	DATA_SEGMENT_ALIGN	289
# define	DATA_SEGMENT_END	290
# define	SIZEOF_HEADERS	291
# define	OUTPUT_FORMAT	292
# define	FORCE_COMMON_ALLOCATION	293
# define	OUTPUT_ARCH	294
# define	INHIBIT_COMMON_ALLOCATION	295
# define	INCLUDE	296
# define	MEMORY	297
# define	DEFSYMEND	298
# define	NOLOAD	299
# define	DSECT	300
# define	COPY	301
# define	INFO	302
# define	OVERLAY	303
# define	DEFINED	304
# define	TARGET_K	305
# define	SEARCH_DIR	306
# define	MAP	307
# define	ENTRY	308
# define	NEXT	309
# define	SIZEOF	310
# define	ADDR	311
# define	LOADADDR	312
# define	MAX_K	313
# define	MIN_K	314
# define	STARTUP	315
# define	HLL	316
# define	SYSLIB	317
# define	FLOAT	318
# define	NOFLOAT	319
# define	NOCROSSREFS	320
# define	ORIGIN	321
# define	FILL	322
# define	LENGTH	323
# define	CREATE_OBJECT_SYMBOLS	324
# define	INPUT	325
# define	GROUP	326
# define	OUTPUT	327
# define	CONSTRUCTORS	328
# define	ALIGNMOD	329
# define	AT	330
# define	PROVIDE	331
# define	CHIP	332
# define	LIST	333
# define	SECT	334
# define	ABSOLUTE	335
# define	LOAD	336
# define	NEWLINE	337
# define	ENDWORD	338
# define	ORDER	339
# define	NAMEWORD	340
# define	ASSERT_K	341
# define	FORMAT	342
# define	PUBLIC	343
# define	BASE	344
# define	ALIAS	345
# define	TRUNCATE	346
# define	REL	347
# define	INPUT_SCRIPT	348
# define	INPUT_MRI_SCRIPT	349
# define	INPUT_DEFSYM	350
# define	CASE	351
# define	EXTERN	352
# define	START	353
# define	VERS_TAG	354
# define	VERS_IDENTIFIER	355
# define	GLOBAL	356
# define	LOCAL	357
# define	VERSIONK	358
# define	INPUT_VERSION_SCRIPT	359
# define	KEEP	360
# define	EXCLUDE_FILE	361


extern YYSTYPE yylval;

#endif /* not BISON_Y_TAB_H */
@


1.1.6.1
log
@Add generated files on 2.12 release branch.
@
text
@a0 136
#ifndef BISON_Y_TAB_H
# define BISON_Y_TAB_H

#ifndef YYSTYPE
typedef union {
  bfd_vma integer;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      boolean filehdr;
      boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
} yystype;
# define YYSTYPE yystype
#endif
# define	INT	257
# define	NAME	258
# define	LNAME	259
# define	PLUSEQ	260
# define	MINUSEQ	261
# define	MULTEQ	262
# define	DIVEQ	263
# define	LSHIFTEQ	264
# define	RSHIFTEQ	265
# define	ANDEQ	266
# define	OREQ	267
# define	OROR	268
# define	ANDAND	269
# define	EQ	270
# define	NE	271
# define	LE	272
# define	GE	273
# define	LSHIFT	274
# define	RSHIFT	275
# define	UNARY	276
# define	END	277
# define	ALIGN_K	278
# define	BLOCK	279
# define	BIND	280
# define	QUAD	281
# define	SQUAD	282
# define	LONG	283
# define	SHORT	284
# define	BYTE	285
# define	SECTIONS	286
# define	PHDRS	287
# define	SORT	288
# define	SIZEOF_HEADERS	289
# define	OUTPUT_FORMAT	290
# define	FORCE_COMMON_ALLOCATION	291
# define	OUTPUT_ARCH	292
# define	INHIBIT_COMMON_ALLOCATION	293
# define	INCLUDE	294
# define	MEMORY	295
# define	DEFSYMEND	296
# define	NOLOAD	297
# define	DSECT	298
# define	COPY	299
# define	INFO	300
# define	OVERLAY	301
# define	DEFINED	302
# define	TARGET_K	303
# define	SEARCH_DIR	304
# define	MAP	305
# define	ENTRY	306
# define	NEXT	307
# define	SIZEOF	308
# define	ADDR	309
# define	LOADADDR	310
# define	MAX_K	311
# define	MIN_K	312
# define	STARTUP	313
# define	HLL	314
# define	SYSLIB	315
# define	FLOAT	316
# define	NOFLOAT	317
# define	NOCROSSREFS	318
# define	ORIGIN	319
# define	FILL	320
# define	LENGTH	321
# define	CREATE_OBJECT_SYMBOLS	322
# define	INPUT	323
# define	GROUP	324
# define	OUTPUT	325
# define	CONSTRUCTORS	326
# define	ALIGNMOD	327
# define	AT	328
# define	PROVIDE	329
# define	CHIP	330
# define	LIST	331
# define	SECT	332
# define	ABSOLUTE	333
# define	LOAD	334
# define	NEWLINE	335
# define	ENDWORD	336
# define	ORDER	337
# define	NAMEWORD	338
# define	ASSERT_K	339
# define	FORMAT	340
# define	PUBLIC	341
# define	BASE	342
# define	ALIAS	343
# define	TRUNCATE	344
# define	REL	345
# define	INPUT_SCRIPT	346
# define	INPUT_MRI_SCRIPT	347
# define	INPUT_DEFSYM	348
# define	CASE	349
# define	EXTERN	350
# define	START	351
# define	VERS_TAG	352
# define	VERS_IDENTIFIER	353
# define	GLOBAL	354
# define	LOCAL	355
# define	VERSIONK	356
# define	INPUT_VERSION_SCRIPT	357
# define	KEEP	358
# define	EXCLUDE_FILE	359


extern YYSTYPE yylval;

#endif /* not BISON_Y_TAB_H */
@


1.1.4.1
log
@Add generated files to release branch.
@
text
@a0 126
typedef union {
  bfd_vma integer;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      boolean filehdr;
      boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
} YYSTYPE;
#define	INT	257
#define	NAME	258
#define	LNAME	259
#define	PLUSEQ	260
#define	MINUSEQ	261
#define	MULTEQ	262
#define	DIVEQ	263
#define	LSHIFTEQ	264
#define	RSHIFTEQ	265
#define	ANDEQ	266
#define	OREQ	267
#define	OROR	268
#define	ANDAND	269
#define	EQ	270
#define	NE	271
#define	LE	272
#define	GE	273
#define	LSHIFT	274
#define	RSHIFT	275
#define	UNARY	276
#define	END	277
#define	ALIGN_K	278
#define	BLOCK	279
#define	BIND	280
#define	QUAD	281
#define	SQUAD	282
#define	LONG	283
#define	SHORT	284
#define	BYTE	285
#define	SECTIONS	286
#define	PHDRS	287
#define	SORT	288
#define	SIZEOF_HEADERS	289
#define	OUTPUT_FORMAT	290
#define	FORCE_COMMON_ALLOCATION	291
#define	OUTPUT_ARCH	292
#define	INCLUDE	293
#define	MEMORY	294
#define	DEFSYMEND	295
#define	NOLOAD	296
#define	DSECT	297
#define	COPY	298
#define	INFO	299
#define	OVERLAY	300
#define	DEFINED	301
#define	TARGET_K	302
#define	SEARCH_DIR	303
#define	MAP	304
#define	ENTRY	305
#define	NEXT	306
#define	SIZEOF	307
#define	ADDR	308
#define	LOADADDR	309
#define	MAX_K	310
#define	MIN_K	311
#define	STARTUP	312
#define	HLL	313
#define	SYSLIB	314
#define	FLOAT	315
#define	NOFLOAT	316
#define	NOCROSSREFS	317
#define	ORIGIN	318
#define	FILL	319
#define	LENGTH	320
#define	CREATE_OBJECT_SYMBOLS	321
#define	INPUT	322
#define	GROUP	323
#define	OUTPUT	324
#define	CONSTRUCTORS	325
#define	ALIGNMOD	326
#define	AT	327
#define	PROVIDE	328
#define	CHIP	329
#define	LIST	330
#define	SECT	331
#define	ABSOLUTE	332
#define	LOAD	333
#define	NEWLINE	334
#define	ENDWORD	335
#define	ORDER	336
#define	NAMEWORD	337
#define	ASSERT_K	338
#define	FORMAT	339
#define	PUBLIC	340
#define	BASE	341
#define	ALIAS	342
#define	TRUNCATE	343
#define	REL	344
#define	INPUT_SCRIPT	345
#define	INPUT_MRI_SCRIPT	346
#define	INPUT_DEFSYM	347
#define	CASE	348
#define	EXTERN	349
#define	START	350
#define	VERS_TAG	351
#define	VERS_IDENTIFIER	352
#define	GLOBAL	353
#define	LOCAL	354
#define	VERSIONK	355
#define	INPUT_VERSION_SCRIPT	356
#define	KEEP	357
#define	EXCLUDE_FILE	358


extern YYSTYPE yylval;
@


1.1.2.1
log
@Add generated files.
@
text
@a0 126
typedef union {
  bfd_vma integer;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      boolean filehdr;
      boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
} YYSTYPE;
#define	INT	257
#define	NAME	258
#define	LNAME	259
#define	PLUSEQ	260
#define	MINUSEQ	261
#define	MULTEQ	262
#define	DIVEQ	263
#define	LSHIFTEQ	264
#define	RSHIFTEQ	265
#define	ANDEQ	266
#define	OREQ	267
#define	OROR	268
#define	ANDAND	269
#define	EQ	270
#define	NE	271
#define	LE	272
#define	GE	273
#define	LSHIFT	274
#define	RSHIFT	275
#define	UNARY	276
#define	END	277
#define	ALIGN_K	278
#define	BLOCK	279
#define	BIND	280
#define	QUAD	281
#define	SQUAD	282
#define	LONG	283
#define	SHORT	284
#define	BYTE	285
#define	SECTIONS	286
#define	PHDRS	287
#define	SORT	288
#define	SIZEOF_HEADERS	289
#define	OUTPUT_FORMAT	290
#define	FORCE_COMMON_ALLOCATION	291
#define	OUTPUT_ARCH	292
#define	INCLUDE	293
#define	MEMORY	294
#define	DEFSYMEND	295
#define	NOLOAD	296
#define	DSECT	297
#define	COPY	298
#define	INFO	299
#define	OVERLAY	300
#define	DEFINED	301
#define	TARGET_K	302
#define	SEARCH_DIR	303
#define	MAP	304
#define	ENTRY	305
#define	NEXT	306
#define	SIZEOF	307
#define	ADDR	308
#define	LOADADDR	309
#define	MAX_K	310
#define	MIN_K	311
#define	STARTUP	312
#define	HLL	313
#define	SYSLIB	314
#define	FLOAT	315
#define	NOFLOAT	316
#define	NOCROSSREFS	317
#define	ORIGIN	318
#define	FILL	319
#define	LENGTH	320
#define	CREATE_OBJECT_SYMBOLS	321
#define	INPUT	322
#define	GROUP	323
#define	OUTPUT	324
#define	CONSTRUCTORS	325
#define	ALIGNMOD	326
#define	AT	327
#define	PROVIDE	328
#define	CHIP	329
#define	LIST	330
#define	SECT	331
#define	ABSOLUTE	332
#define	LOAD	333
#define	NEWLINE	334
#define	ENDWORD	335
#define	ORDER	336
#define	NAMEWORD	337
#define	ASSERT_K	338
#define	FORMAT	339
#define	PUBLIC	340
#define	BASE	341
#define	ALIAS	342
#define	TRUNCATE	343
#define	REL	344
#define	INPUT_SCRIPT	345
#define	INPUT_MRI_SCRIPT	346
#define	INPUT_DEFSYM	347
#define	CASE	348
#define	EXTERN	349
#define	START	350
#define	VERS_TAG	351
#define	VERS_IDENTIFIER	352
#define	GLOBAL	353
#define	LOCAL	354
#define	VERSIONK	355
#define	INPUT_VERSION_SCRIPT	356
#define	KEEP	357
#define	EXCLUDE_FILE	358


extern YYSTYPE yylval;
@

