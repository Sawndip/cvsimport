head	1.12;
access;
symbols
	binutils-2_23_2:1.12.20.2
	binutils-2_23_1:1.12.20.1
	binutils-2_23-branch:1.12.0.20
	binutils-2_20_1:1.12.18.1
	binutils-2_20:1.12.18.1
	binutils-2_20-branch:1.12.0.18
	binutils-2_19_1:1.12.16.1
	binutils-2_19:1.12.16.1
	binutils-2_19-branch:1.12.0.16
	binutils-2_18:1.12.14.2
	binutils-2_18-branch:1.12.0.14
	binutils-csl-sourcerygxx-3_4_4-32:1.12.10.4
	binutils-csl-sourcerygxx-3_4_4-25:1.12.10.4
	binutils-2_17:1.12.12.4
	binutils-2_17-branch:1.12.0.12
	binutils-csl-gxxpro-3_4-branch:1.12.10.4.0.2
	binutils-csl-gxxpro-3_4-branchpoint:1.12.10.4
	binutils-2_16_1:1.12.10.4
	binutils-2_16:1.12.10.3
	binutils-csl-arm-2005q1a:1.12.10.1
	binutils-csl-arm-2005q1-branch:1.12.10.1.0.2
	binutils-csl-arm-2005q1-branchpoint:1.12.10.1
	binutils-2_16-branch:1.12.0.10
	binutils-2_15:1.12.8.4
	binutils-2_15-branch:1.12.0.8
	binutils-2_14:1.12.6.4
	binutils-2_14-branch:1.12.0.6
	binutils-2_13_2_1:1.12.4.5
	binutils-2_13_2:1.12.4.3
	binutils-2_13_1:1.12.4.2
	binutils-2_13:1.12.4.1
	binutils-2_13-branch:1.12.0.4
	binutils-2_12_1:1.12.2.2
	binutils-2_12:1.12.2.1
	binutils-2_12-branch:1.12.0.2
	binutils-2_11_2:1.5.2.1
	binutils-2_11_1:1.5.2.1
	binutils-2_11:1.5
	x86_64versiong3:1.6
	binutils-2_11-branch:1.5.0.2
	binutils-2_10_1:1.1.1.1
	binutils-2_10:1.1.1.1
	binutils-2_10-branch:1.1.1.1.0.2
	binutils-2_10-branchpoint:1.1.1.1
	binutils_latest_snapshot:1.11
	repo-unification-2000-02-06:1.1.1.1
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@.\" @;


1.12
date	2001.06.19.11.57.23;	author nickc;	state dead;
branches
	1.12.2.1
	1.12.4.1
	1.12.6.1
	1.12.8.1
	1.12.10.1
	1.12.12.1
	1.12.14.1
	1.12.16.1
	1.12.18.1
	1.12.20.1;
next	1.11;

1.11
date	2001.05.22.14.00.18;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	2001.04.13.02.22.23;	author jtc;	state Exp;
branches;
next	1.9;

1.9
date	2001.03.25.20.32.31;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	2001.03.17.21.24.26;	author drepper;	state Exp;
branches;
next	1.7;

1.7
date	2001.03.13.06.14.27;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2001.02.01.18.44.43;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.28.20.40.34;	author nickc;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2000.11.25.10.58.09;	author obrien;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.06.20.27.26;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.22.21.58.40;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.29.06;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.12.2.1
date	2002.03.08.17.01.33;	author drow;	state Exp;
branches;
next	1.12.2.2;

1.12.2.2
date	2002.05.11.20.00.53;	author drow;	state Exp;
branches;
next	;

1.12.4.1
date	2002.08.05.20.43.48;	author drow;	state Exp;
branches;
next	1.12.4.2;

1.12.4.2
date	2002.10.30.16.29.45;	author drow;	state Exp;
branches;
next	1.12.4.3;

1.12.4.3
date	2002.12.20.21.33.25;	author drow;	state Exp;
branches;
next	1.12.4.4;

1.12.4.4
date	2003.01.02.00.51.34;	author drow;	state Exp;
branches;
next	1.12.4.5;

1.12.4.5
date	2003.01.02.01.22.37;	author drow;	state Exp;
branches;
next	;

1.12.6.1
date	2003.04.27.20.36.14;	author drow;	state Exp;
branches;
next	1.12.6.2;

1.12.6.2
date	2003.05.06.02.21.27;	author drow;	state Exp;
branches;
next	1.12.6.3;

1.12.6.3
date	2003.06.02.20.56.02;	author drow;	state Exp;
branches;
next	1.12.6.4;

1.12.6.4
date	2003.06.12.15.54.23;	author drow;	state Exp;
branches;
next	;

1.12.8.1
date	2004.04.09.19.32.20;	author drow;	state Exp;
branches;
next	1.12.8.2;

1.12.8.2
date	2004.05.07.06.32.35;	author drow;	state Exp;
branches;
next	1.12.8.3;

1.12.8.3
date	2004.05.17.16.16.41;	author drow;	state Exp;
branches;
next	1.12.8.4;

1.12.8.4
date	2004.05.17.19.46.23;	author drow;	state Exp;
branches;
next	;

1.12.10.1
date	2005.03.08.17.19.52;	author drow;	state Exp;
branches
	1.12.10.1.2.1;
next	1.12.10.2;

1.12.10.2
date	2005.04.20.19.05.45;	author drow;	state Exp;
branches;
next	1.12.10.3;

1.12.10.3
date	2005.05.02.22.04.17;	author drow;	state Exp;
branches;
next	1.12.10.4;

1.12.10.4
date	2005.06.12.19.13.57;	author drow;	state Exp;
branches;
next	;

1.12.10.1.2.1
date	2005.04.29.15.57.16;	author pbrook;	state dead;
branches;
next	;

1.12.12.1
date	2006.04.16.18.36.45;	author drow;	state Exp;
branches;
next	1.12.12.2;

1.12.12.2
date	2006.05.17.19.13.33;	author drow;	state Exp;
branches;
next	1.12.12.3;

1.12.12.3
date	2006.06.12.13.54.20;	author drow;	state Exp;
branches;
next	1.12.12.4;

1.12.12.4
date	2006.06.23.20.05.47;	author drow;	state Exp;
branches;
next	;

1.12.14.1
date	2007.08.06.21.05.38;	author drow;	state Exp;
branches;
next	1.12.14.2;

1.12.14.2
date	2007.08.28.20.41.01;	author drow;	state Exp;
branches;
next	;

1.12.16.1
date	2008.09.11.08.24.19;	author gingold;	state Exp;
branches;
next	;

1.12.18.1
date	2009.10.16.12.07.04;	author gingold;	state Exp;
branches;
next	;

1.12.20.1
date	2012.11.13.14.51.34;	author gingold;	state Exp;
branches;
next	1.12.20.2;

1.12.20.2
date	2013.03.25.16.03.28;	author gingold;	state Exp;
branches;
next	;

1.5.2.1
date	2001.05.23.03.41.11;	author amodra;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2001.10.17.14.45.08;	author nickc;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.06;	author rth;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Remove auot generated man pages
@
text
@.\" Automatically generated by Pod::Man version 1.02
.\" Tue May 22 15:43:56 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.\"
.\" Accent mark definitions (@@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "LD 1"
.TH LD 1 "binutils-2.11.90" "2001-05-22" "GNU"
.UC
.SH "NAME"
ld \- Using \s-1LD\s0, the \s-1GNU\s0 linker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
ld [ options ] objfile...
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`ld\*(C'\fR combines a number of object and archive files, relocates
their data and ties up symbol references. Usually the last step in
compiling a program is to run \f(CW\*(C`ld\*(C'\fR.
.PP
\&\f(CW\*(C`ld\*(C'\fR accepts Linker Command Language files written in
a superset of \s-1AT&T\s0's Link Editor Command Language syntax,
to provide explicit and total control over the linking process.
.PP
This man page does not describe the command language; see the 
\&\f(CW\*(C`ld\*(C'\fR entry in \f(CW\*(C`info\*(C'\fR, or the manual
ld: the \s-1GNU\s0 linker, for full details on the command language and 
on other aspects of the \s-1GNU\s0 linker. 
.PP
This version of \f(CW\*(C`ld\*(C'\fR uses the general purpose \s-1BFD\s0 libraries
to operate on object files. This allows \f(CW\*(C`ld\*(C'\fR to read, combine, and
write object files in many different formats\-\-\-for example, \s-1COFF\s0 or
\&\f(CW\*(C`a.out\*(C'\fR.  Different formats may be linked together to produce any
available kind of object file.  
.PP
Aside from its flexibility, the \s-1GNU\s0 linker is more helpful than other
linkers in providing diagnostic information.  Many linkers abandon
execution immediately upon encountering an error; whenever possible,
\&\f(CW\*(C`ld\*(C'\fR continues executing, allowing you to identify other errors
(or, in some cases, to get an output file in spite of the error).
.PP
The \s-1GNU\s0 linker \f(CW\*(C`ld\*(C'\fR is meant to cover a broad range of situations,
and to be as compatible as possible with other linkers.  As a result,
you have many choices to control its behavior.
.SH "OPTIONS"
.IX Header "OPTIONS"
The linker supports a plethora of command-line options, but in actual
practice few of them are used in any particular context.
For instance, a frequent use of \f(CW\*(C`ld\*(C'\fR is to link standard Unix
object files on a standard, supported Unix system.  On such a system, to
link a file \f(CW\*(C`hello.o\*(C'\fR:
.PP
.Vb 1
\&        ld -o I<output> /lib/crt0.o hello.o -lc
.Ve
This tells \f(CW\*(C`ld\*(C'\fR to produce a file called \fIoutput\fR as the
result of linking the file \f(CW\*(C`/lib/crt0.o\*(C'\fR with \f(CW\*(C`hello.o\*(C'\fR and
the library \f(CW\*(C`libc.a\*(C'\fR, which will come from the standard search
directories.  (See the discussion of the \fB\-l\fR option below.)
.PP
Some of the command-line options to \f(CW\*(C`ld\*(C'\fR may be specified at any
point in the command line.  However, options which refer to files, such
as \fB\-l\fR or \fB\-T\fR, cause the file to be read at the point at
which the option appears in the command line, relative to the object
files and other file options.  Repeating non-file options with a
different argument will either have no further effect, or override prior
occurrences (those further to the left on the command line) of that
option.  Options which may be meaningfully specified more than once are
noted in the descriptions below.
.PP
Non-option arguments are object files or archives which are to be linked
together.  They may follow, precede, or be mixed in with command-line
options, except that an object file argument may not be placed between
an option and its argument.
.PP
Usually the linker is invoked with at least one object file, but you can
specify other forms of binary input files using \fB\-l\fR, \fB\-R\fR,
and the script command language.  If \fIno\fR binary input files at all
are specified, the linker does not produce any output, and issues the
message \fBNo input files\fR.
.PP
If the linker can not recognize the format of an object file, it will
assume that it is a linker script.  A script specified in this way
augments the main linker script used for the link (either the default
linker script or the one specified by using \fB\-T\fR).  This feature
permits the linker to link against a file which appears to be an object
or an archive, but actually merely defines some symbol values, or uses
\&\f(CW\*(C`INPUT\*(C'\fR or \f(CW\*(C`GROUP\*(C'\fR to load other objects.  Note that
specifying a script in this way should only be used to augment the main
linker script; if you want to use some command that logically can only
appear once, such as the \f(CW\*(C`SECTIONS\*(C'\fR or \f(CW\*(C`MEMORY\*(C'\fR command, you
must replace the default linker script using the \fB\-T\fR option.
.PP
For options whose names are a single letter,
option arguments must either follow the option letter without intervening
whitespace, or be given as separate arguments immediately following the
option that requires them.
.PP
For options whose names are multiple letters, either one dash or two can
precede the option name; for example, \fB\-trace-symbol\fR and
\&\fB\*(--trace-symbol\fR are equivalent.  Note \- there is one exception to
this rule.  Multiple letter options that start with a lower case 'o' can
only be preceeded by two dashes.  This is to reduce confusion with the
\&\fB\-o\fR option.  So for example \fB\-omagic\fR sets the output file
name to \fBmagic\fR whereas \fB\*(--omagic\fR sets the \s-1NMAGIC\s0 flag on the
output.
.PP
Arguments to multiple-letter options must either be separated from the
option name by an equals sign, or be given as separate arguments
immediately following the option that requires them.  For example,
\&\fB\*(--trace-symbol foo\fR and \fB\*(--trace-symbol=foo\fR are equivalent.
Unique abbreviations of the names of multiple-letter options are
accepted.
.PP
Note \- if the linker is being invoked indirectly, via a compiler driver
(eg \fBgcc\fR) then all the linker command line options should be
prefixed by \fB\-Wl,\fR (or whatever is appropriate for the particular
compiler driver) like this:
.PP
.Vb 1
\&          gcc -Wl,--startgroup foo.o bar.o -Wl,--endgroup
.Ve
This is important, because otherwise the compiler driver program may
silently drop the linker options, resulting in a bad link.
.PP
Here is a table of the generic command line switches accepted by the \s-1GNU\s0
linker:
.Ip "\f(CW\*(C`\-a\f(CIkeyword\f(CW\*(C'\fR" 4
.IX Item "-akeyword"
This option is supported for \s-1HP/UX\s0 compatibility.  The \fIkeyword\fR
argument must be one of the strings \fBarchive\fR, \fBshared\fR, or
\&\fBdefault\fR.  \fB\-aarchive\fR is functionally equivalent to
\&\fB\-Bstatic\fR, and the other two keywords are functionally equivalent
to \fB\-Bdynamic\fR.  This option may be used any number of times.
.Ip "\f(CW\*(C`\-A\f(CIarchitecture\f(CW\*(C'\fR" 4
.IX Item "-Aarchitecture"
.Ip "\f(CW\*(C`\-\-architecture=\f(CIarchitecture\f(CW\*(C'\fR" 4
.IX Item "--architecture=architecture"
In the current release of \f(CW\*(C`ld\*(C'\fR, this option is useful only for the
Intel 960 family of architectures.  In that \f(CW\*(C`ld\*(C'\fR configuration, the
\&\fIarchitecture\fR argument identifies the particular architecture in
the 960 family, enabling some safeguards and modifying the
archive-library search path.  
.Sp
Future releases of \f(CW\*(C`ld\*(C'\fR may support similar functionality for
other architecture families.
.Ip "\f(CW\*(C`\-b \f(CIinput\-format\f(CW\*(C'\fR" 4
.IX Item "-b input-format"
.Ip "\f(CW\*(C`\-\-format=\f(CIinput\-format\f(CW\*(C'\fR" 4
.IX Item "--format=input-format"
\&\f(CW\*(C`ld\*(C'\fR may be configured to support more than one kind of object
file.  If your \f(CW\*(C`ld\*(C'\fR is configured this way, you can use the
\&\fB\-b\fR option to specify the binary format for input object files
that follow this option on the command line.  Even when \f(CW\*(C`ld\*(C'\fR is
configured to support alternative object formats, you don't usually need
to specify this, as \f(CW\*(C`ld\*(C'\fR should be configured to expect as a
default input format the most usual format on each machine.
\&\fIinput-format\fR is a text string, the name of a particular format
supported by the \s-1BFD\s0 libraries.  (You can list the available binary
formats with \fBobjdump \-i\fR.)
.Sp
You may want to use this option if you are linking files with an unusual
binary format.  You can also use \fB\-b\fR to switch formats explicitly (when
linking object files of different formats), by including
\&\fB\-b\fR \fIinput-format\fR before each group of object files in a
particular format.
.Sp
The default format is taken from the environment variable
\&\f(CW\*(C`GNUTARGET\*(C'\fR.
.Sp
You can also define the input format from a script, using the command
\&\f(CW\*(C`TARGET\*(C'\fR;
.Ip "\f(CW\*(C`\-c \f(CIMRI\-commandfile\f(CW\*(C'\fR" 4
.IX Item "-c MRI-commandfile"
.Ip "\f(CW\*(C`\-\-mri\-script=\f(CIMRI\-commandfile\f(CW\*(C'\fR" 4
.IX Item "--mri-script=MRI-commandfile"
For compatibility with linkers produced by \s-1MRI\s0, \f(CW\*(C`ld\*(C'\fR accepts script
files written in an alternate, restricted command language, described in
the \s-1MRI\s0 Compatible Script Files section of \s-1GNU\s0 ld documentation.
Introduce \s-1MRI\s0 script files with
the option \fB\-c\fR; use the \fB\-T\fR option to run linker
scripts written in the general-purpose \f(CW\*(C`ld\*(C'\fR scripting language.
If \fIMRI-cmdfile\fR does not exist, \f(CW\*(C`ld\*(C'\fR looks for it in the directories
specified by any \fB\-L\fR options.
.Ip "\f(CW\*(C`\-d\*(C'\fR" 4
.IX Item "-d"
.Ip "\f(CW\*(C`\-dc\*(C'\fR" 4
.IX Item "-dc"
.Ip "\f(CW\*(C`\-dp\*(C'\fR" 4
.IX Item "-dp"
These three options are equivalent; multiple forms are supported for
compatibility with other linkers.  They assign space to common symbols
even if a relocatable output file is specified (with \fB\-r\fR).  The
script command \f(CW\*(C`FORCE_COMMON_ALLOCATION\*(C'\fR has the same effect.
.Ip "\f(CW\*(C`\-e \f(CIentry\f(CW\*(C'\fR" 4
.IX Item "-e entry"
.Ip "\f(CW\*(C`\-\-entry=\f(CIentry\f(CW\*(C'\fR" 4
.IX Item "--entry=entry"
Use \fIentry\fR as the explicit symbol for beginning execution of your
program, rather than the default entry point.  If there is no symbol
named \fIentry\fR, the linker will try to parse \fIentry\fR as a number,
and use that as the entry address (the number will be interpreted in
base 10; you may use a leading \fB0x\fR for base 16, or a leading
\&\fB0\fR for base 8).  
.Ip "\f(CW\*(C`\-E\*(C'\fR" 4
.IX Item "-E"
.Ip "\f(CW\*(C`\-\-export\-dynamic\*(C'\fR" 4
.IX Item "--export-dynamic"
When creating a dynamically linked executable, add all symbols to the
dynamic symbol table.  The dynamic symbol table is the set of symbols
which are visible from dynamic objects at run time.
.Sp
If you do not use this option, the dynamic symbol table will normally
contain only those symbols which are referenced by some dynamic object
mentioned in the link.
.Sp
If you use \f(CW\*(C`dlopen\*(C'\fR to load a dynamic object which needs to refer
back to the symbols defined by the program, rather than some other
dynamic object, then you will probably need to use this option when
linking the program itself.
.Ip "\f(CW\*(C`\-EB\*(C'\fR" 4
.IX Item "-EB"
Link big-endian objects.  This affects the default output format.
.Ip "\f(CW\*(C`\-EL\*(C'\fR" 4
.IX Item "-EL"
Link little-endian objects.  This affects the default output format.
.Ip "\f(CW\*(C`\-f\*(C'\fR" 4
.IX Item "-f"
.Ip "\f(CW\*(C`\-\-auxiliary \f(CIname\f(CW\*(C'\fR" 4
.IX Item "--auxiliary name"
When creating an \s-1ELF\s0 shared object, set the internal \s-1DT_AUXILIARY\s0 field
to the specified name.  This tells the dynamic linker that the symbol
table of the shared object should be used as an auxiliary filter on the
symbol table of the shared object \fIname\fR.
.Sp
If you later link a program against this filter object, then, when you
run the program, the dynamic linker will see the \s-1DT_AUXILIARY\s0 field.  If
the dynamic linker resolves any symbols from the filter object, it will
first check whether there is a definition in the shared object
\&\fIname\fR.  If there is one, it will be used instead of the definition
in the filter object.  The shared object \fIname\fR need not exist.
Thus the shared object \fIname\fR may be used to provide an alternative
implementation of certain functions, perhaps for debugging or for
machine specific performance.
.Sp
This option may be specified more than once.  The \s-1DT_AUXILIARY\s0 entries
will be created in the order in which they appear on the command line.
.Ip "\f(CW\*(C`\-F \f(CIname\f(CW\*(C'\fR" 4
.IX Item "-F name"
.Ip "\f(CW\*(C`\-\-filter \f(CIname\f(CW\*(C'\fR" 4
.IX Item "--filter name"
When creating an \s-1ELF\s0 shared object, set the internal \s-1DT_FILTER\s0 field to
the specified name.  This tells the dynamic linker that the symbol table
of the shared object which is being created should be used as a filter
on the symbol table of the shared object \fIname\fR.
.Sp
If you later link a program against this filter object, then, when you
run the program, the dynamic linker will see the \s-1DT_FILTER\s0 field.  The
dynamic linker will resolve symbols according to the symbol table of the
filter object as usual, but it will actually link to the definitions
found in the shared object \fIname\fR.  Thus the filter object can be
used to select a subset of the symbols provided by the object
\&\fIname\fR.
.Sp
Some older linkers used the \f(CW\*(C`\-F\*(C'\fR option throughout a compilation
toolchain for specifying object-file format for both input and output
object files.  The \s-1GNU\s0 linker uses other mechanisms for this
purpose: the \f(CW\*(C`\-b\*(C'\fR, \f(CW\*(C`\-\-format\*(C'\fR, \f(CW\*(C`\-\-oformat\*(C'\fR options, the
\&\f(CW\*(C`TARGET\*(C'\fR command in linker scripts, and the \f(CW\*(C`GNUTARGET\*(C'\fR
environment variable.  The \s-1GNU\s0 linker will ignore the \f(CW\*(C`\-F\*(C'\fR
option when not creating an \s-1ELF\s0 shared object.
.Ip "\f(CW\*(C`\-fini \f(CIname\f(CW\*(C'\fR" 4
.IX Item "-fini name"
When creating an \s-1ELF\s0 executable or shared object, call \s-1NAME\s0 when the
executable or shared object is unloaded, by setting \s-1DT_FINI\s0 to the
address of the function.  By default, the linker uses \f(CW\*(C`_fini\*(C'\fR as
the function to call.
.Ip "\f(CW\*(C`\-g\*(C'\fR" 4
.IX Item "-g"
Ignored.  Provided for compatibility with other tools.
.Ip "\f(CW\*(C`\-G\f(CIvalue\f(CW\*(C'\fR" 4
.IX Item "-Gvalue"
.Ip "\f(CW\*(C`\-\-gpsize=\f(CIvalue\f(CW\*(C'\fR" 4
.IX Item "--gpsize=value"
Set the maximum size of objects to be optimized using the \s-1GP\s0 register to
\&\fIsize\fR.  This is only meaningful for object file formats such as
\&\s-1MIPS\s0 \s-1ECOFF\s0 which supports putting large and small objects into different
sections.  This is ignored for other object file formats.
.Ip "\f(CW\*(C`\-h\f(CIname\f(CW\*(C'\fR" 4
.IX Item "-hname"
.Ip "\f(CW\*(C`\-soname=\f(CIname\f(CW\*(C'\fR" 4
.IX Item "-soname=name"
When creating an \s-1ELF\s0 shared object, set the internal \s-1DT_SONAME\s0 field to
the specified name.  When an executable is linked with a shared object
which has a \s-1DT_SONAME\s0 field, then when the executable is run the dynamic
linker will attempt to load the shared object specified by the \s-1DT_SONAME\s0
field rather than the using the file name given to the linker.
.Ip "\f(CW\*(C`\-i\*(C'\fR" 4
.IX Item "-i"
Perform an incremental link (same as option \fB\-r\fR).
.Ip "\f(CW\*(C`\-init \f(CIname\f(CW\*(C'\fR" 4
.IX Item "-init name"
When creating an \s-1ELF\s0 executable or shared object, call \s-1NAME\s0 when the
executable or shared object is loaded, by setting \s-1DT_INIT\s0 to the address
of the function.  By default, the linker uses \f(CW\*(C`_init\*(C'\fR as the
function to call.
.Ip "\f(CW\*(C`\-l\f(CIarchive\f(CW\*(C'\fR" 4
.IX Item "-larchive"
.Ip "\f(CW\*(C`\-\-library=\f(CIarchive\f(CW\*(C'\fR" 4
.IX Item "--library=archive"
Add archive file \fIarchive\fR to the list of files to link.  This
option may be used any number of times.  \f(CW\*(C`ld\*(C'\fR will search its
path-list for occurrences of \f(CW\*(C`lib\f(CIarchive\f(CW.a\*(C'\fR for every
\&\fIarchive\fR specified.
.Sp
On systems which support shared libraries, \f(CW\*(C`ld\*(C'\fR may also search for
libraries with extensions other than \f(CW\*(C`.a\*(C'\fR.  Specifically, on \s-1ELF\s0
and SunOS systems, \f(CW\*(C`ld\*(C'\fR will search a directory for a library with
an extension of \f(CW\*(C`.so\*(C'\fR before searching for one with an extension of
\&\f(CW\*(C`.a\*(C'\fR.  By convention, a \f(CW\*(C`.so\*(C'\fR extension indicates a shared
library.
.Sp
The linker will search an archive only once, at the location where it is
specified on the command line.  If the archive defines a symbol which
was undefined in some object which appeared before the archive on the
command line, the linker will include the appropriate \fIfile\fR\|(s) from the
archive.  However, an undefined symbol in an object appearing later on
the command line will not cause the linker to search the archive again.
.Sp
See the \f(CW\*(C`\-(\*(C'\fR option for a way to force the linker to search
archives multiple times.
.Sp
You may list the same archive multiple times on the command line.
.Sp
This type of archive searching is standard for Unix linkers.  However,
if you are using \f(CW\*(C`ld\*(C'\fR on \s-1AIX\s0, note that it is different from the
behaviour of the \s-1AIX\s0 linker.
.Ip "\f(CW\*(C`\-L\f(CIsearchdir\f(CW\*(C'\fR" 4
.IX Item "-Lsearchdir"
.Ip "\f(CW\*(C`\-\-library\-path=\f(CIsearchdir\f(CW\*(C'\fR" 4
.IX Item "--library-path=searchdir"
Add path \fIsearchdir\fR to the list of paths that \f(CW\*(C`ld\*(C'\fR will search
for archive libraries and \f(CW\*(C`ld\*(C'\fR control scripts.  You may use this
option any number of times.  The directories are searched in the order
in which they are specified on the command line.  Directories specified
on the command line are searched before the default directories.  All
\&\f(CW\*(C`\-L\*(C'\fR options apply to all \f(CW\*(C`\-l\*(C'\fR options, regardless of the
order in which the options appear.
.Sp
The default set of paths searched (without being specified with
\&\fB\-L\fR) depends on which emulation mode \f(CW\*(C`ld\*(C'\fR is using, and in
some cases also on how it was configured.  
.Sp
The paths can also be specified in a link script with the
\&\f(CW\*(C`SEARCH_DIR\*(C'\fR command.  Directories specified this way are searched
at the point in which the linker script appears in the command line.
.Ip "\f(CW\*(C`\-m\f(CIemulation\f(CW\*(C'\fR" 4
.IX Item "-memulation"
Emulate the \fIemulation\fR linker.  You can list the available
emulations with the \fB\*(--verbose\fR or \fB\-V\fR options.
.Sp
If the \fB\-m\fR option is not used, the emulation is taken from the
\&\f(CW\*(C`LDEMULATION\*(C'\fR environment variable, if that is defined.
.Sp
Otherwise, the default emulation depends upon how the linker was
configured.
.Ip "\f(CW\*(C`\-M\*(C'\fR" 4
.IX Item "-M"
.Ip "\f(CW\*(C`\-\-print\-map\*(C'\fR" 4
.IX Item "--print-map"
Print a link map to the standard output.  A link map provides
information about the link, including the following:
.RS 4
.Ip "\(bu" 4
Where object files and symbols are mapped into memory.
.Ip "\(bu" 4
How common symbols are allocated.
.Ip "\(bu" 4
All archive members included in the link, with a mention of the symbol
which caused the archive member to be brought in.
.RE
.RS 4
.RE
.Ip "\f(CW\*(C`\-n\*(C'\fR" 4
.IX Item "-n"
.Ip "\f(CW\*(C`\-\-nmagic\*(C'\fR" 4
.IX Item "--nmagic"
Turn off page alignment of sections, and mark the output as
\&\f(CW\*(C`NMAGIC\*(C'\fR if possible.
.Ip "\f(CW\*(C`\-N\*(C'\fR" 4
.IX Item "-N"
.Ip "\f(CW\*(C`\-\-omagic\*(C'\fR" 4
.IX Item "--omagic"
Set the text and data sections to be readable and writable.  Also, do
not page-align the data segment.  If the output format supports Unix
style magic numbers, mark the output as \f(CW\*(C`OMAGIC\*(C'\fR.
.Ip "\f(CW\*(C`\-o \f(CIoutput\f(CW\*(C'\fR" 4
.IX Item "-o output"
.Ip "\f(CW\*(C`\-\-output=\f(CIoutput\f(CW\*(C'\fR" 4
.IX Item "--output=output"
Use \fIoutput\fR as the name for the program produced by \f(CW\*(C`ld\*(C'\fR; if this
option is not specified, the name \fIa.out\fR is used by default.  The
script command \f(CW\*(C`OUTPUT\*(C'\fR can also specify the output file name.
.Ip "\f(CW\*(C`\-O \f(CIlevel\f(CW\*(C'\fR" 4
.IX Item "-O level"
If \fIlevel\fR is a numeric values greater than zero \f(CW\*(C`ld\*(C'\fR optimizes
the output.  This might take significantly longer and therefore probably
should only be enabled for the final binary.
.Ip "\f(CW\*(C`\-q\*(C'\fR" 4
.IX Item "-q"
.Ip "\f(CW\*(C`\-\-emit\-relocs\*(C'\fR" 4
.IX Item "--emit-relocs"
Leave relocation sections and contents in fully linked exececutables.
Post link analysis and optimization tools may need this information in
order to perform correct modifications of executables.  This results
in larger executables.
.Ip "\f(CW\*(C`\-r\*(C'\fR" 4
.IX Item "-r"
.Ip "\f(CW\*(C`\-\-relocateable\*(C'\fR" 4
.IX Item "--relocateable"
Generate relocatable output\-\-\-i.e., generate an output file that can in
turn serve as input to \f(CW\*(C`ld\*(C'\fR.  This is often called \fIpartial
linking\fR.  As a side effect, in environments that support standard Unix
magic numbers, this option also sets the output file's magic number to
\&\f(CW\*(C`OMAGIC\*(C'\fR.
If this option is not specified, an absolute file is produced.  When
linking \*(C+ programs, this option \fIwill not\fR resolve references to
constructors; to do that, use \fB\-Ur\fR.
.Sp
This option does the same thing as \fB\-i\fR.
.Ip "\f(CW\*(C`\-R \f(CIfilename\f(CW\*(C'\fR" 4
.IX Item "-R filename"
.Ip "\f(CW\*(C`\-\-just\-symbols=\f(CIfilename\f(CW\*(C'\fR" 4
.IX Item "--just-symbols=filename"
Read symbol names and their addresses from \fIfilename\fR, but do not
relocate it or include it in the output.  This allows your output file
to refer symbolically to absolute locations of memory defined in other
programs.  You may use this option more than once.
.Sp
For compatibility with other \s-1ELF\s0 linkers, if the \f(CW\*(C`\-R\*(C'\fR option is
followed by a directory name, rather than a file name, it is treated as
the \f(CW\*(C`\-rpath\*(C'\fR option.
.Ip "\f(CW\*(C`\-s\*(C'\fR" 4
.IX Item "-s"
.Ip "\f(CW\*(C`\-\-strip\-all\*(C'\fR" 4
.IX Item "--strip-all"
Omit all symbol information from the output file.
.Ip "\f(CW\*(C`\-S\*(C'\fR" 4
.IX Item "-S"
.Ip "\f(CW\*(C`\-\-strip\-debug\*(C'\fR" 4
.IX Item "--strip-debug"
Omit debugger symbol information (but not all symbols) from the output file.
.Ip "\f(CW\*(C`\-t\*(C'\fR" 4
.IX Item "-t"
.Ip "\f(CW\*(C`\-\-trace\*(C'\fR" 4
.IX Item "--trace"
Print the names of the input files as \f(CW\*(C`ld\*(C'\fR processes them.
.Ip "\f(CW\*(C`\-T \f(CIscriptfile\f(CW\*(C'\fR" 4
.IX Item "-T scriptfile"
.Ip "\f(CW\*(C`\-\-script=\f(CIscriptfile\f(CW\*(C'\fR" 4
.IX Item "--script=scriptfile"
Use \fIscriptfile\fR as the linker script.  This script replaces
\&\f(CW\*(C`ld\*(C'\fR's default linker script (rather than adding to it), so
\&\fIcommandfile\fR must specify everything necessary to describe the
output file.  You must use this option if you want to use a command
which can only appear once in a linker script, such as the
\&\f(CW\*(C`SECTIONS\*(C'\fR or \f(CW\*(C`MEMORY\*(C'\fR command.    If
\&\fIscriptfile\fR does not exist in the current directory, \f(CW\*(C`ld\*(C'\fR
looks for it in the directories specified by any preceding \fB\-L\fR
options.  Multiple \fB\-T\fR options accumulate.
.Ip "\f(CW\*(C`\-u \f(CIsymbol\f(CW\*(C'\fR" 4
.IX Item "-u symbol"
.Ip "\f(CW\*(C`\-\-undefined=\f(CIsymbol\f(CW\*(C'\fR" 4
.IX Item "--undefined=symbol"
Force \fIsymbol\fR to be entered in the output file as an undefined
symbol.  Doing this may, for example, trigger linking of additional
modules from standard libraries.  \fB\-u\fR may be repeated with
different option arguments to enter additional undefined symbols.  This
option is equivalent to the \f(CW\*(C`EXTERN\*(C'\fR linker script command.
.Ip "\f(CW\*(C`\-Ur\*(C'\fR" 4
.IX Item "-Ur"
For anything other than \*(C+ programs, this option is equivalent to
\&\fB\-r\fR: it generates relocatable output\-\-\-i.e., an output file that can in
turn serve as input to \f(CW\*(C`ld\*(C'\fR.  When linking \*(C+ programs, \fB\-Ur\fR
\&\fIdoes\fR resolve references to constructors, unlike \fB\-r\fR.
It does not work to use \fB\-Ur\fR on files that were themselves linked
with \fB\-Ur\fR; once the constructor table has been built, it cannot
be added to.  Use \fB\-Ur\fR only for the last partial link, and
\&\fB\-r\fR for the others.
.Ip "\f(CW\*(C`\-\-unique[=\f(CI\s\-1SECTION\s0\f(CW]\*(C'\fR" 4
.IX Item "--unique[=SECTION]"
Creates a separate output section for every input section matching
\&\fI\s-1SECTION\s0\fR, or if the optional wildcard \fI\s-1SECTION\s0\fR argument is
missing, for every orphan input section.  An orphan section is one not
specifically mentioned in a linker script.  You may use this option
multiple times on the command line;  It prevents the normal merging of
input sections with the same name, overriding output section assignments
in a linker script.
.Ip "\f(CW\*(C`\-v\*(C'\fR" 4
.IX Item "-v"
.Ip "\f(CW\*(C`\-\-version\*(C'\fR" 4
.IX Item "--version"
.Ip "\f(CW\*(C`\-V\*(C'\fR" 4
.IX Item "-V"
Display the version number for \f(CW\*(C`ld\*(C'\fR.  The \f(CW\*(C`\-V\*(C'\fR option also
lists the supported emulations.
.Ip "\f(CW\*(C`\-x\*(C'\fR" 4
.IX Item "-x"
.Ip "\f(CW\*(C`\-\-discard\-all\*(C'\fR" 4
.IX Item "--discard-all"
Delete all local symbols.
.Ip "\f(CW\*(C`\-X\*(C'\fR" 4
.IX Item "-X"
.Ip "\f(CW\*(C`\-\-discard\-locals\*(C'\fR" 4
.IX Item "--discard-locals"
Delete all temporary local symbols.  For most targets, this is all local
symbols whose names begin with \fBL\fR.
.Ip "\f(CW\*(C`\-y \f(CIsymbol\f(CW\*(C'\fR" 4
.IX Item "-y symbol"
.Ip "\f(CW\*(C`\-\-trace\-symbol=\f(CIsymbol\f(CW\*(C'\fR" 4
.IX Item "--trace-symbol=symbol"
Print the name of each linked file in which \fIsymbol\fR appears.  This
option may be given any number of times.  On many systems it is necessary
to prepend an underscore.
.Sp
This option is useful when you have an undefined symbol in your link but
don't know where the reference is coming from.
.Ip "\f(CW\*(C`\-Y \f(CIpath\f(CW\*(C'\fR" 4
.IX Item "-Y path"
Add \fIpath\fR to the default library search path.  This option exists
for Solaris compatibility.
.Ip "\f(CW\*(C`\-z \f(CIkeyword\f(CW\*(C'\fR" 4
.IX Item "-z keyword"
The recognized keywords are \f(CW\*(C`initfirst\*(C'\fR, \f(CW\*(C`interpose\*(C'\fR,
\&\f(CW\*(C`loadfltr\*(C'\fR, \f(CW\*(C`nodefaultlib\*(C'\fR, \f(CW\*(C`nodelete\*(C'\fR, \f(CW\*(C`nodlopen\*(C'\fR,
\&\f(CW\*(C`nodump\*(C'\fR, \f(CW\*(C`now\*(C'\fR and \f(CW\*(C`origin\*(C'\fR. The other keywords are
ignored for Solaris compatibility. \f(CW\*(C`initfirst\*(C'\fR marks the object
to be initialized first at runtime before any other objects.
\&\f(CW\*(C`interpose\*(C'\fR marks the object that its symbol table interposes
before all symbols but the primary executable. \f(CW\*(C`loadfltr\*(C'\fR marks
the object that its filtees be processed immediately at runtime.
\&\f(CW\*(C`nodefaultlib\*(C'\fR marks the object that the search for dependencies
of this object will ignore any default library search paths.
\&\f(CW\*(C`nodelete\*(C'\fR marks the object shouldn't be unloaded at runtime.
\&\f(CW\*(C`nodlopen\*(C'\fR marks the object not available to \f(CW\*(C`dlopen\*(C'\fR.
\&\f(CW\*(C`nodump\*(C'\fR marks the object can not be dumped by \f(CW\*(C`dldump\*(C'\fR.
\&\f(CW\*(C`now\*(C'\fR marks the object with the non-lazy runtime binding.
\&\f(CW\*(C`origin\*(C'\fR marks the object may contain \f(CW$ORIGIN\fR.
\&\f(CW\*(C`defs\*(C'\fR disallows undefined symbols.
.Ip "\f(CW\*(C`\-( \f(CIarchives\f(CW \-)\*(C'\fR" 4
.IX Item "-( archives -)"
.Ip "\f(CW\*(C`\-\-start\-group \f(CIarchives\f(CW \-\-end\-group\*(C'\fR" 4
.IX Item "--start-group archives --end-group"
The \fIarchives\fR should be a list of archive files.  They may be
either explicit file names, or \fB\-l\fR options.
.Sp
The specified archives are searched repeatedly until no new undefined
references are created.  Normally, an archive is searched only once in
the order that it is specified on the command line.  If a symbol in that
archive is needed to resolve an undefined symbol referred to by an
object in an archive that appears later on the command line, the linker
would not be able to resolve that reference.  By grouping the archives,
they all be searched repeatedly until all possible references are
resolved.
.Sp
Using this option has a significant performance cost.  It is best to use
it only when there are unavoidable circular references between two or
more archives.
.Ip "\f(CW\*(C`\-assert \f(CIkeyword\f(CW\*(C'\fR" 4
.IX Item "-assert keyword"
This option is ignored for SunOS compatibility.
.Ip "\f(CW\*(C`\-Bdynamic\*(C'\fR" 4
.IX Item "-Bdynamic"
.Ip "\f(CW\*(C`\-dy\*(C'\fR" 4
.IX Item "-dy"
.Ip "\f(CW\*(C`\-call_shared\*(C'\fR" 4
.IX Item "-call_shared"
Link against dynamic libraries.  This is only meaningful on platforms
for which shared libraries are supported.  This option is normally the
default on such platforms.  The different variants of this option are
for compatibility with various systems.  You may use this option
multiple times on the command line: it affects library searching for
\&\f(CW\*(C`\-l\*(C'\fR options which follow it.
.Ip "\f(CW\*(C`\-Bgroup\*(C'\fR" 4
.IX Item "-Bgroup"
Set the \f(CW\*(C`DF_1_GROUP\*(C'\fR flag in the \f(CW\*(C`DT_FLAGS_1\*(C'\fR entry in the dynamic
section.  This causes the runtime linker to handle lookups in this
object and its dependencies to be performed only inside the group.
\&\f(CW\*(C`\-\-no\-undefined\*(C'\fR is implied.  This option is only meaningful on \s-1ELF\s0
platforms which support shared libraries.
.Ip "\f(CW\*(C`\-Bstatic\*(C'\fR" 4
.IX Item "-Bstatic"
.Ip "\f(CW\*(C`\-dn\*(C'\fR" 4
.IX Item "-dn"
.Ip "\f(CW\*(C`\-non_shared\*(C'\fR" 4
.IX Item "-non_shared"
.Ip "\f(CW\*(C`\-static\*(C'\fR" 4
.IX Item "-static"
Do not link against shared libraries.  This is only meaningful on
platforms for which shared libraries are supported.  The different
variants of this option are for compatibility with various systems.  You
may use this option multiple times on the command line: it affects
library searching for \f(CW\*(C`\-l\*(C'\fR options which follow it.
.Ip "\f(CW\*(C`\-Bsymbolic\*(C'\fR" 4
.IX Item "-Bsymbolic"
When creating a shared library, bind references to global symbols to the
definition within the shared library, if any.  Normally, it is possible
for a program linked against a shared library to override the definition
within the shared library.  This option is only meaningful on \s-1ELF\s0
platforms which support shared libraries.
.Ip "\f(CW\*(C`\-\-check\-sections\*(C'\fR" 4
.IX Item "--check-sections"
.Ip "\f(CW\*(C`\-\-no\-check\-sections\*(C'\fR" 4
.IX Item "--no-check-sections"
Asks the linker \fInot\fR to check section addresses after they have
been assigned to see if there any overlaps.  Normally the linker will
perform this check, and if it finds any overlaps it will produce
suitable error messages.  The linker does know about, and does make
allowances for sections in overlays.  The default behaviour can be
restored by using the command line switch \fB\*(--check-sections\fR.
.Ip "\f(CW\*(C`\-\-cref\*(C'\fR" 4
.IX Item "--cref"
Output a cross reference table.  If a linker map file is being
generated, the cross reference table is printed to the map file.
Otherwise, it is printed on the standard output.
.Sp
The format of the table is intentionally simple, so that it may be
easily processed by a script if necessary.  The symbols are printed out,
sorted by name.  For each symbol, a list of file names is given.  If the
symbol is defined, the first file listed is the location of the
definition.  The remaining files contain references to the symbol.
.Ip "\f(CW\*(C`\-\-defsym \f(CIsymbol\f(CW=\f(CIexpression\f(CW\*(C'\fR" 4
.IX Item "--defsym symbol=expression"
Create a global symbol in the output file, containing the absolute
address given by \fIexpression\fR.  You may use this option as many
times as necessary to define multiple symbols in the command line.  A
limited form of arithmetic is supported for the \fIexpression\fR in this
context: you may give a hexadecimal constant or the name of an existing
symbol, or use \f(CW\*(C`+\*(C'\fR and \f(CW\*(C`\-\*(C'\fR to add or subtract hexadecimal
constants or symbols.  If you need more elaborate expressions, consider
using the linker command language from a script.  \fINote:\fR there should be no white
space between \fIsymbol\fR, the equals sign (``\fB=\fR''), and
\&\fIexpression\fR.
.Ip "\f(CW\*(C`\-\-demangle[=\f(CIstyle\f(CW]\*(C'\fR" 4
.IX Item "--demangle[=style]"
.Ip "\f(CW\*(C`\-\-no\-demangle\*(C'\fR" 4
.IX Item "--no-demangle"
These options control whether to demangle symbol names in error messages
and other output.  When the linker is told to demangle, it tries to
present symbol names in a readable fashion: it strips leading
underscores if they are used by the object file format, and converts \*(C+
mangled symbol names into user readable names.  Different compilers have
different mangling styles.  The optional demangling style argument can be used
to choose an appropriate demangling style for your compiler.  The linker will
demangle by default unless the environment variable \fB\s-1COLLECT_NO_DEMANGLE\s0\fR
is set.  These options may be used to override the default.
.Ip "\f(CW\*(C`\-\-dynamic\-linker \f(CIfile\f(CW\*(C'\fR" 4
.IX Item "--dynamic-linker file"
Set the name of the dynamic linker.  This is only meaningful when
generating dynamically linked \s-1ELF\s0 executables.  The default dynamic
linker is normally correct; don't use this unless you know what you are
doing.
.Ip "\f(CW\*(C`\-\-embedded\-relocs\*(C'\fR" 4
.IX Item "--embedded-relocs"
This option is only meaningful when linking \s-1MIPS\s0 embedded \s-1PIC\s0 code,
generated by the \-membedded-pic option to the \s-1GNU\s0 compiler and
assembler.  It causes the linker to create a table which may be used at
runtime to relocate any data which was statically initialized to pointer
values.  See the code in testsuite/ld-empic for details.
.Ip "\f(CW\*(C`\-\-fatal\-warnings\*(C'\fR" 4
.IX Item "--fatal-warnings"
Treat all warnings as errors.
.Ip "\f(CW\*(C`\-\-force\-exe\-suffix\*(C'\fR" 4
.IX Item "--force-exe-suffix"
Make sure that an output file has a .exe suffix.
.Sp
If a successfully built fully linked output file does not have a
\&\f(CW\*(C`.exe\*(C'\fR or \f(CW\*(C`.dll\*(C'\fR suffix, this option forces the linker to copy
the output file to one of the same name with a \f(CW\*(C`.exe\*(C'\fR suffix. This
option is useful when using unmodified Unix makefiles on a Microsoft
Windows host, since some versions of Windows won't run an image unless
it ends in a \f(CW\*(C`.exe\*(C'\fR suffix.
.Ip "\f(CW\*(C`\-\-no\-gc\-sections\*(C'\fR" 4
.IX Item "--no-gc-sections"
.Ip "\f(CW\*(C`\-\-gc\-sections\*(C'\fR" 4
.IX Item "--gc-sections"
Enable garbage collection of unused input sections.  It is ignored on
targets that do not support this option.  This option is not compatible
with \fB\-r\fR, nor should it be used with dynamic linking.  The default
behaviour (of not performing this garbage collection) can be restored by
specifying \fB\*(--no-gc-sections\fR on the command line.
.Ip "\f(CW\*(C`\-\-help\*(C'\fR" 4
.IX Item "--help"
Print a summary of the command-line options on the standard output and exit.
.Ip "\f(CW\*(C`\-\-target\-help\*(C'\fR" 4
.IX Item "--target-help"
Print a summary of all target specific options on the standard output and exit.
.Ip "\f(CW\*(C`\-Map \f(CImapfile\f(CW\*(C'\fR" 4
.IX Item "-Map mapfile"
Print a link map to the file \fImapfile\fR.  See the description of the
\&\fB\-M\fR option, above.
.Ip "\f(CW\*(C`\-\-no\-keep\-memory\*(C'\fR" 4
.IX Item "--no-keep-memory"
\&\f(CW\*(C`ld\*(C'\fR normally optimizes for speed over memory usage by caching the
symbol tables of input files in memory.  This option tells \f(CW\*(C`ld\*(C'\fR to
instead optimize for memory usage, by rereading the symbol tables as
necessary.  This may be required if \f(CW\*(C`ld\*(C'\fR runs out of memory space
while linking a large executable.
.Ip "\f(CW\*(C`\-\-no\-undefined\*(C'\fR" 4
.IX Item "--no-undefined"
.Ip "\f(CW\*(C`\-z defs\*(C'\fR" 4
.IX Item "-z defs"
Normally when creating a non-symbolic shared library, undefined symbols
are allowed and left to be resolved by the runtime loader.  These options
disallows such undefined symbols.
.Ip "\f(CW\*(C`\-\-allow\-shlib\-undefined\*(C'\fR" 4
.IX Item "--allow-shlib-undefined"
Allow undefined symbols in shared objects even  when \-\-no-undefined is
set. The net result will be that undefined symbols in regular objects
will still trigger an error, but undefined symbols in shared objects
will be ignored.  The implementation of no_undefined makes the
assumption that the runtime linker will choke on undefined symbols.
However there is at least one system (BeOS) where undefined symbols in
shared libraries is normal since the kernel patches them at load time to
select which function is most appropriate for the current architecture.
I.E. dynamically select an appropriate memset function.  Apparently it
is also normal for \s-1HPPA\s0 shared libraries to have undefined symbols.
.Ip "\f(CW\*(C`\-\-no\-warn\-mismatch\*(C'\fR" 4
.IX Item "--no-warn-mismatch"
Normally \f(CW\*(C`ld\*(C'\fR will give an error if you try to link together input
files that are mismatched for some reason, perhaps because they have
been compiled for different processors or for different endiannesses.
This option tells \f(CW\*(C`ld\*(C'\fR that it should silently permit such possible
errors.  This option should only be used with care, in cases when you
have taken some special action that ensures that the linker errors are
inappropriate.
.Ip "\f(CW\*(C`\-\-no\-whole\-archive\*(C'\fR" 4
.IX Item "--no-whole-archive"
Turn off the effect of the \f(CW\*(C`\-\-whole\-archive\*(C'\fR option for subsequent
archive files.
.Ip "\f(CW\*(C`\-\-noinhibit\-exec\*(C'\fR" 4
.IX Item "--noinhibit-exec"
Retain the executable output file whenever it is still usable.
Normally, the linker will not produce an output file if it encounters
errors during the link process; it exits without writing an output file
when it issues any error whatsoever.
.Ip "\f(CW\*(C`\-\-oformat \f(CIoutput\-format\f(CW\*(C'\fR" 4
.IX Item "--oformat output-format"
\&\f(CW\*(C`ld\*(C'\fR may be configured to support more than one kind of object
file.  If your \f(CW\*(C`ld\*(C'\fR is configured this way, you can use the
\&\fB\*(--oformat\fR option to specify the binary format for the output
object file.  Even when \f(CW\*(C`ld\*(C'\fR is configured to support alternative
object formats, you don't usually need to specify this, as \f(CW\*(C`ld\*(C'\fR
should be configured to produce as a default output format the most
usual format on each machine.  \fIoutput-format\fR is a text string, the
name of a particular format supported by the \s-1BFD\s0 libraries.  (You can
list the available binary formats with \fBobjdump \-i\fR.)  The script
command \f(CW\*(C`OUTPUT_FORMAT\*(C'\fR can also specify the output format, but
this option overrides it.  
.Ip "\f(CW\*(C`\-qmagic\*(C'\fR" 4
.IX Item "-qmagic"
This option is ignored for Linux compatibility.
.Ip "\f(CW\*(C`\-Qy\*(C'\fR" 4
.IX Item "-Qy"
This option is ignored for \s-1SVR4\s0 compatibility.
.Ip "\f(CW\*(C`\-\-relax\*(C'\fR" 4
.IX Item "--relax"
An option with machine dependent effects.
This option is only supported on a few targets.
.Sp
On some platforms, the \fB\*(--relax\fR option performs global
optimizations that become possible when the linker resolves addressing
in the program, such as relaxing address modes and synthesizing new
instructions in the output object file.
.Sp
On some platforms these link time global optimizations may make symbolic
debugging of the resulting executable impossible.
This is known to be
the case for the Matsushita \s-1MN10200\s0 and \s-1MN10300\s0 family of processors.
.Sp
On platforms where this is not supported, \fB\*(--relax\fR is accepted,
but ignored.
.Ip "\f(CW\*(C`\-\-retain\-symbols\-file \f(CIfilename\f(CW\*(C'\fR" 4
.IX Item "--retain-symbols-file filename"
Retain \fIonly\fR the symbols listed in the file \fIfilename\fR,
discarding all others.  \fIfilename\fR is simply a flat file, with one
symbol name per line.  This option is especially useful in environments
(such as VxWorks)
where a large global symbol table is accumulated gradually, to conserve
run-time memory.
.Sp
\&\fB\*(--retain-symbols-file\fR does \fInot\fR discard undefined symbols,
or symbols needed for relocations.
.Sp
You may only specify \fB\*(--retain-symbols-file\fR once in the command
line.  It overrides \fB\-s\fR and \fB\-S\fR.
.Ip "\f(CW\*(C`\-rpath \f(CIdir\f(CW\*(C'\fR" 4
.IX Item "-rpath dir"
Add a directory to the runtime library search path.  This is used when
linking an \s-1ELF\s0 executable with shared objects.  All \f(CW\*(C`\-rpath\*(C'\fR
arguments are concatenated and passed to the runtime linker, which uses
them to locate shared objects at runtime.  The \f(CW\*(C`\-rpath\*(C'\fR option is
also used when locating shared objects which are needed by shared
objects explicitly included in the link; see the description of the
\&\f(CW\*(C`\-rpath\-link\*(C'\fR option.  If \f(CW\*(C`\-rpath\*(C'\fR is not used when linking an
\&\s-1ELF\s0 executable, the contents of the environment variable
\&\f(CW\*(C`LD_RUN_PATH\*(C'\fR will be used if it is defined.
.Sp
The \f(CW\*(C`\-rpath\*(C'\fR option may also be used on SunOS.  By default, on
SunOS, the linker will form a runtime search patch out of all the
\&\f(CW\*(C`\-L\*(C'\fR options it is given.  If a \f(CW\*(C`\-rpath\*(C'\fR option is used, the
runtime search path will be formed exclusively using the \f(CW\*(C`\-rpath\*(C'\fR
options, ignoring the \f(CW\*(C`\-L\*(C'\fR options.  This can be useful when using
gcc, which adds many \f(CW\*(C`\-L\*(C'\fR options which may be on \s-1NFS\s0 mounted
filesystems.
.Sp
For compatibility with other \s-1ELF\s0 linkers, if the \f(CW\*(C`\-R\*(C'\fR option is
followed by a directory name, rather than a file name, it is treated as
the \f(CW\*(C`\-rpath\*(C'\fR option.
.Ip "\f(CW\*(C`\-rpath\-link \f(CI\s\-1DIR\s0\f(CW\*(C'\fR" 4
.IX Item "-rpath-link DIR"
When using \s-1ELF\s0 or SunOS, one shared library may require another.  This
happens when an \f(CW\*(C`ld \-shared\*(C'\fR link includes a shared library as one
of the input files.
.Sp
When the linker encounters such a dependency when doing a non-shared,
non-relocatable link, it will automatically try to locate the required
shared library and include it in the link, if it is not included
explicitly.  In such a case, the \f(CW\*(C`\-rpath\-link\*(C'\fR option
specifies the first set of directories to search.  The
\&\f(CW\*(C`\-rpath\-link\*(C'\fR option may specify a sequence of directory names
either by specifying a list of names separated by colons, or by
appearing multiple times.
.Sp
This option should be used with caution as it overrides the search path
that may have been hard compiled into a shared library. In such a case it
is possible to use unintentionally a different search path than the
runtime linker would do.
.Sp
The linker uses the following search paths to locate required shared
libraries.
.RS 4
.Ip "1." 4
Any directories specified by \f(CW\*(C`\-rpath\-link\*(C'\fR options.
.Ip "2." 4
Any directories specified by \f(CW\*(C`\-rpath\*(C'\fR options.  The difference
between \f(CW\*(C`\-rpath\*(C'\fR and \f(CW\*(C`\-rpath\-link\*(C'\fR is that directories
specified by \f(CW\*(C`\-rpath\*(C'\fR options are included in the executable and
used at runtime, whereas the \f(CW\*(C`\-rpath\-link\*(C'\fR option is only effective
at link time. It is for the native linker only.
.Ip "3." 4
On an \s-1ELF\s0 system, if the \f(CW\*(C`\-rpath\*(C'\fR and \f(CW\*(C`rpath\-link\*(C'\fR options
were not used, search the contents of the environment variable
\&\f(CW\*(C`LD_RUN_PATH\*(C'\fR. It is for the native linker only.
.Ip "4." 4
On SunOS, if the \f(CW\*(C`\-rpath\*(C'\fR option was not used, search any
directories specified using \f(CW\*(C`\-L\*(C'\fR options.
.Ip "5." 4
For a native linker, the contents of the environment variable
\&\f(CW\*(C`LD_LIBRARY_PATH\*(C'\fR.
.Ip "6." 4
For a native \s-1ELF\s0 linker, the directories in \f(CW\*(C`DT_RUNPATH\*(C'\fR or
\&\f(CW\*(C`DT_RPATH\*(C'\fR of a shared library are searched for shared
libraries needed by it. The \f(CW\*(C`DT_RPATH\*(C'\fR entries are ignored if
\&\f(CW\*(C`DT_RUNPATH\*(C'\fR entries exist.
.Ip "7." 4
The default directories, normally \fI/lib\fR and \fI/usr/lib\fR.
.Ip "8." 4
For a native linker on an \s-1ELF\s0 system, if the file \fI/etc/ld.so.conf\fR
exists, the list of directories found in that file.
.RE
.RS 4
.Sp
If the required shared library is not found, the linker will issue a
warning and continue with the link.
.RE
.Ip "\f(CW\*(C`\-shared\*(C'\fR" 4
.IX Item "-shared"
.Ip "\f(CW\*(C`\-Bshareable\*(C'\fR" 4
.IX Item "-Bshareable"
Create a shared library.  This is currently only supported on \s-1ELF\s0, \s-1XCOFF\s0
and SunOS platforms.  On SunOS, the linker will automatically create a
shared library if the \f(CW\*(C`\-e\*(C'\fR option is not used and there are
undefined symbols in the link.
.Ip "\f(CW\*(C`\-\-sort\-common\*(C'\fR" 4
.IX Item "--sort-common"
This option tells \f(CW\*(C`ld\*(C'\fR to sort the common symbols by size when it
places them in the appropriate output sections.  First come all the one
byte symbols, then all the two bytes, then all the four bytes, and then
everything else.  This is to prevent gaps between symbols due to
alignment constraints.
.Ip "\f(CW\*(C`\-\-split\-by\-file [\f(CIsize\f(CW]\*(C'\fR" 4
.IX Item "--split-by-file [size]"
Similar to \f(CW\*(C`\-\-split\-by\-reloc\*(C'\fR but creates a new output section for
each input file when \fIsize\fR is reached.  \fIsize\fR defaults to a
size of 1 if not given.
.Ip "\f(CW\*(C`\-\-split\-by\-reloc [\f(CIcount\f(CW]\*(C'\fR" 4
.IX Item "--split-by-reloc [count]"
Tries to creates extra sections in the output file so that no single
output section in the file contains more than \fIcount\fR relocations.
This is useful when generating huge relocatable files for downloading into
certain real time kernels with the \s-1COFF\s0 object file format; since \s-1COFF\s0
cannot represent more than 65535 relocations in a single section.  Note
that this will fail to work with object file formats which do not
support arbitrary sections.  The linker will not split up individual
input sections for redistribution, so if a single input section contains
more than \fIcount\fR relocations one output section will contain that
many relocations.  \fIcount\fR defaults to a value of 32768.
.Ip "\f(CW\*(C`\-\-stats\*(C'\fR" 4
.IX Item "--stats"
Compute and display statistics about the operation of the linker, such
as execution time and memory usage.
.Ip "\f(CW\*(C`\-\-traditional\-format\*(C'\fR" 4
.IX Item "--traditional-format"
For some targets, the output of \f(CW\*(C`ld\*(C'\fR is different in some ways from
the output of some existing linker.  This switch requests \f(CW\*(C`ld\*(C'\fR to
use the traditional format instead.
.Sp
For example, on SunOS, \f(CW\*(C`ld\*(C'\fR combines duplicate entries in the
symbol string table.  This can reduce the size of an output file with
full debugging information by over 30 percent.  Unfortunately, the SunOS
\&\f(CW\*(C`dbx\*(C'\fR program can not read the resulting program (\f(CW\*(C`gdb\*(C'\fR has no
trouble).  The \fB\*(--traditional-format\fR switch tells \f(CW\*(C`ld\*(C'\fR to not
combine duplicate entries.
.Ip "\f(CW\*(C`\-\-section\-start \f(CIsectionname\f(CW=\f(CIorg\f(CW\*(C'\fR" 4
.IX Item "--section-start sectionname=org"
Locate a section in the output file at the absolute
address given by \fIorg\fR.  You may use this option as many
times as necessary to locate multiple sections in the command
line.
\&\fIorg\fR must be a single hexadecimal integer;
for compatibility with other linkers, you may omit the leading
\&\fB0x\fR usually associated with hexadecimal values.  \fINote:\fR there
should be no white space between \fIsectionname\fR, the equals
sign (``\fB=\fR''), and \fIorg\fR.
.Ip "\f(CW\*(C`\-Tbss \f(CIorg\f(CW\*(C'\fR" 4
.IX Item "-Tbss org"
.Ip "\f(CW\*(C`\-Tdata \f(CIorg\f(CW\*(C'\fR" 4
.IX Item "-Tdata org"
.Ip "\f(CW\*(C`\-Ttext \f(CIorg\f(CW\*(C'\fR" 4
.IX Item "-Ttext org"
Use \fIorg\fR as the starting address for\-\-\-respectively\-\-\-the
\&\f(CW\*(C`bss\*(C'\fR, \f(CW\*(C`data\*(C'\fR, or the \f(CW\*(C`text\*(C'\fR segment of the output file.
\&\fIorg\fR must be a single hexadecimal integer;
for compatibility with other linkers, you may omit the leading
\&\fB0x\fR usually associated with hexadecimal values.
.Ip "\f(CW\*(C`\-\-dll\-verbose\*(C'\fR" 4
.IX Item "--dll-verbose"
.Ip "\f(CW\*(C`\-\-verbose\*(C'\fR" 4
.IX Item "--verbose"
Display the version number for \f(CW\*(C`ld\*(C'\fR and list the linker emulations
supported.  Display which input files can and cannot be opened.  Display
the linker script if using a default builtin script.
.Ip "\f(CW\*(C`\-\-version\-script=\f(CIversion\-scriptfile\f(CW\*(C'\fR" 4
.IX Item "--version-script=version-scriptfile"
Specify the name of a version script to the linker.  This is typically
used when creating shared libraries to specify additional information
about the version heirarchy for the library being created.  This option
is only meaningful on \s-1ELF\s0 platforms which support shared libraries.
.Ip "\f(CW\*(C`\-\-warn\-common\*(C'\fR" 4
.IX Item "--warn-common"
Warn when a common symbol is combined with another common symbol or with
a symbol definition.  Unix linkers allow this somewhat sloppy practice,
but linkers on some other operating systems do not.  This option allows
you to find potential problems from combining global symbols.
Unfortunately, some C libraries use this practice, so you may get some
warnings about symbols in the libraries as well as in your programs.
.Sp
There are three kinds of global symbols, illustrated here by C examples:
.RS 4
.Ip "\fBint i = 1;\fR" 4
.IX Item "int i = 1;"
A definition, which goes in the initialized data section of the output
file.
.Ip "\fBextern int i;\fR" 4
.IX Item "extern int i;"
An undefined reference, which does not allocate space.
There must be either a definition or a common symbol for the
variable somewhere.
.Ip "\fBint i;\fR" 4
.IX Item "int i;"
A common symbol.  If there are only (one or more) common symbols for a
variable, it goes in the uninitialized data area of the output file.
The linker merges multiple common symbols for the same variable into a
single symbol.  If they are of different sizes, it picks the largest
size.  The linker turns a common symbol into a declaration, if there is
a definition of the same variable.
.RE
.RS 4
.Sp
The \fB\*(--warn-common\fR option can produce five kinds of warnings.
Each warning consists of a pair of lines: the first describes the symbol
just encountered, and the second describes the previous symbol
encountered with the same name.  One or both of the two symbols will be
a common symbol.
.RS 4
.RE
.Ip "1." 4
Turning a common symbol into a reference, because there is already a
definition for the symbol.
.Sp
.Vb 3
\&        I<file>(I<section>): warning: common of `I<symbol>'
\&           overridden by definition
\&        I<file>(I<section>): warning: defined here
.Ve
.Ip "2." 4
Turning a common symbol into a reference, because a later definition for
the symbol is encountered.  This is the same as the previous case,
except that the symbols are encountered in a different order.
.Sp
.Vb 3
\&        I<file>(I<section>): warning: definition of `I<symbol>'
\&           overriding common
\&        I<file>(I<section>): warning: common is here
.Ve
.Ip "3." 4
Merging a common symbol with a previous same-sized common symbol.
.Sp
.Vb 3
\&        I<file>(I<section>): warning: multiple common
\&           of `I<symbol>'
\&        I<file>(I<section>): warning: previous common is here
.Ve
.Ip "4." 4
Merging a common symbol with a previous larger common symbol.
.Sp
.Vb 3
\&        I<file>(I<section>): warning: common of `I<symbol>'
\&           overridden by larger common
\&        I<file>(I<section>): warning: larger common is here
.Ve
.Ip "5." 4
Merging a common symbol with a previous smaller common symbol.  This is
the same as the previous case, except that the symbols are
encountered in a different order.
.Sp
.Vb 3
\&        I<file>(I<section>): warning: common of `I<symbol>'
\&           overriding smaller common
\&        I<file>(I<section>): warning: smaller common is here
.Ve
.RE
.RS 4
.RE
.Ip "\f(CW\*(C`\-\-warn\-constructors\*(C'\fR" 4
.IX Item "--warn-constructors"
Warn if any global constructors are used.  This is only useful for a few
object file formats.  For formats like \s-1COFF\s0 or \s-1ELF\s0, the linker can not
detect the use of global constructors.
.Ip "\f(CW\*(C`\-\-warn\-multiple\-gp\*(C'\fR" 4
.IX Item "--warn-multiple-gp"
Warn if multiple global pointer values are required in the output file.
This is only meaningful for certain processors, such as the Alpha.
Specifically, some processors put large-valued constants in a special
section.  A special register (the global pointer) points into the middle
of this section, so that constants can be loaded efficiently via a
base-register relative addressing mode.  Since the offset in
base-register relative mode is fixed and relatively small (e.g., 16
bits), this limits the maximum size of the constant pool.  Thus, in
large programs, it is often necessary to use multiple global pointer
values in order to be able to address all possible constants.  This
option causes a warning to be issued whenever this case occurs.
.Ip "\f(CW\*(C`\-\-warn\-once\*(C'\fR" 4
.IX Item "--warn-once"
Only warn once for each undefined symbol, rather than once per module
which refers to it.
.Ip "\f(CW\*(C`\-\-warn\-section\-align\*(C'\fR" 4
.IX Item "--warn-section-align"
Warn if the address of an output section is changed because of
alignment.  Typically, the alignment will be set by an input section.
The address will only be changed if it not explicitly specified; that
is, if the \f(CW\*(C`SECTIONS\*(C'\fR command does not specify a start address for
the section.
.Ip "\f(CW\*(C`\-\-whole\-archive\*(C'\fR" 4
.IX Item "--whole-archive"
For each archive mentioned on the command line after the
\&\f(CW\*(C`\-\-whole\-archive\*(C'\fR option, include every object file in the archive
in the link, rather than searching the archive for the required object
files.  This is normally used to turn an archive file into a shared
library, forcing every object to be included in the resulting shared
library.  This option may be used more than once.
.Sp
Two notes when using this option from gcc: First, gcc doesn't know
about this option, so you have to use \f(CW\*(C`\-Wl,\-whole\-archive\*(C'\fR.
Second, don't forget to use \f(CW\*(C`\-Wl,\-no\-whole\-archive\*(C'\fR after your
list of archives, because gcc will add its own list of archives to
your link and you may not want this flag to affect those as well.
.Ip "\f(CW\*(C`\-\-wrap \f(CIsymbol\f(CW\*(C'\fR" 4
.IX Item "--wrap symbol"
Use a wrapper function for \fIsymbol\fR.  Any undefined reference to
\&\fIsymbol\fR will be resolved to \f(CW\*(C`_\|_wrap_\f(CIsymbol\f(CW\*(C'\fR.  Any
undefined reference to \f(CW\*(C`_\|_real_\f(CIsymbol\f(CW\*(C'\fR will be resolved to
\&\fIsymbol\fR.
.Sp
This can be used to provide a wrapper for a system function.  The
wrapper function should be called \f(CW\*(C`_\|_wrap_\f(CIsymbol\f(CW\*(C'\fR.  If it
wishes to call the system function, it should call
\&\f(CW\*(C`_\|_real_\f(CIsymbol\f(CW\*(C'\fR.
.Sp
Here is a trivial example:
.Sp
.Vb 6
\&        void *
\&        __wrap_malloc (int c)
\&        {
\&          printf ("malloc called with %ld\en", c);
\&          return __real_malloc (c);
\&        }
.Ve
If you link other code with this file using \f(CW\*(C`\-\-wrap malloc\*(C'\fR, then
all calls to \f(CW\*(C`malloc\*(C'\fR will call the function \f(CW\*(C`_\|_wrap_malloc\*(C'\fR
instead.  The call to \f(CW\*(C`_\|_real_malloc\*(C'\fR in \f(CW\*(C`_\|_wrap_malloc\*(C'\fR will
call the real \f(CW\*(C`malloc\*(C'\fR function.
.Sp
You may wish to provide a \f(CW\*(C`_\|_real_malloc\*(C'\fR function as well, so that
links without the \f(CW\*(C`\-\-wrap\*(C'\fR option will succeed.  If you do this,
you should not put the definition of \f(CW\*(C`_\|_real_malloc\*(C'\fR in the same
file as \f(CW\*(C`_\|_wrap_malloc\*(C'\fR; if you do, the assembler may resolve the
call before the linker has a chance to wrap it to \f(CW\*(C`malloc\*(C'\fR.
.Ip "\f(CW\*(C`\-\-enable\-new\-dtags\*(C'\fR" 4
.IX Item "--enable-new-dtags"
.Ip "\f(CW\*(C`\-\-disable\-new\-dtags\*(C'\fR" 4
.IX Item "--disable-new-dtags"
This linker can create the new dynamic tags in \s-1ELF\s0. But the older \s-1ELF\s0
systems may not understand them. If you specify
\&\f(CW\*(C`\-\-enable\-new\-dtags\*(C'\fR, the dynamic tags will be created as needed.
If you specify \f(CW\*(C`\-\-disable\-new\-dtags\*(C'\fR, no new dynamic tags will be
created. By default, the new dynamic tags are not created. Note that
those options are only available for \s-1ELF\s0 systems.
.PP
The i386 \s-1PE\s0 linker supports the \f(CW\*(C`\-shared\*(C'\fR option, which causes
the output to be a dynamically linked library (\s-1DLL\s0) instead of a
normal executable.  You should name the output \f(CW\*(C`*.dll\*(C'\fR when you
use this option.  In addition, the linker fully supports the standard
\&\f(CW\*(C`*.def\*(C'\fR files, which may be specified on the linker command line
like an object file (in fact, it should precede archives it exports
symbols from, to ensure that they get linked in, just like a normal
object file).
.PP
In addition to the options common to all targets, the i386 \s-1PE\s0 linker
support additional command line options that are specific to the i386
\&\s-1PE\s0 target.  Options that take values may be separated from their
values by either a space or an equals sign.
.Ip "\f(CW\*(C`\-\-add\-stdcall\-alias\*(C'\fR" 4
.IX Item "--add-stdcall-alias"
If given, symbols with a stdcall suffix (@@\fInn\fR) will be exported
as-is and also with the suffix stripped.
.Ip "\f(CW\*(C`\-\-base\-file \f(CIfile\f(CW\*(C'\fR" 4
.IX Item "--base-file file"
Use \fIfile\fR as the name of a file in which to save the base
addresses of all the relocations needed for generating DLLs with
\&\fIdlltool\fR.
.Ip "\f(CW\*(C`\-\-dll\*(C'\fR" 4
.IX Item "--dll"
Create a \s-1DLL\s0 instead of a regular executable.  You may also use
\&\f(CW\*(C`\-shared\*(C'\fR or specify a \f(CW\*(C`LIBRARY\*(C'\fR in a given \f(CW\*(C`.def\*(C'\fR
file.
.Ip "\f(CW\*(C`\-\-enable\-stdcall\-fixup\*(C'\fR" 4
.IX Item "--enable-stdcall-fixup"
.Ip "\f(CW\*(C`\-\-disable\-stdcall\-fixup\*(C'\fR" 4
.IX Item "--disable-stdcall-fixup"
If the link finds a symbol that it cannot resolve, it will attempt to
do \*(L"fuzzy linking\*(R" by looking for another defined symbol that differs
only in the format of the symbol name (cdecl vs stdcall) and will
resolve that symbol by linking to the match.  For example, the
undefined symbol \f(CW\*(C`_foo\*(C'\fR might be linked to the function
\&\f(CW\*(C`_foo@@12\*(C'\fR, or the undefined symbol \f(CW\*(C`_bar@@16\*(C'\fR might be linked
to the function \f(CW\*(C`_bar\*(C'\fR.  When the linker does this, it prints a
warning, since it normally should have failed to link, but sometimes
import libraries generated from third-party dlls may need this feature
to be usable.  If you specify \f(CW\*(C`\-\-enable\-stdcall\-fixup\*(C'\fR, this
feature is fully enabled and warnings are not printed.  If you specify
\&\f(CW\*(C`\-\-disable\-stdcall\-fixup\*(C'\fR, this feature is disabled and such
mismatches are considered to be errors.
.Ip "\f(CW\*(C`\-\-export\-all\-symbols\*(C'\fR" 4
.IX Item "--export-all-symbols"
If given, all global symbols in the objects used to build a \s-1DLL\s0 will
be exported by the \s-1DLL\s0.  Note that this is the default if there
otherwise wouldn't be any exported symbols.  When symbols are
explicitly exported via \s-1DEF\s0 files or implicitly exported via function
attributes, the default is to not export anything else unless this
option is given.  Note that the symbols \f(CW\*(C`DllMain@@12\*(C'\fR,
\&\f(CW\*(C`DllEntryPoint@@0\*(C'\fR, and \f(CW\*(C`impure_ptr\*(C'\fR will not be automatically
exported.
.Ip "\f(CW\*(C`\-\-exclude\-symbols \f(CIsymbol\f(CW,\f(CIsymbol\f(CW,...\*(C'\fR" 4
.IX Item "--exclude-symbols symbol,symbol,..."
Specifies a list of symbols which should not be automatically
exported.  The symbol names may be delimited by commas or colons.
.Ip "\f(CW\*(C`\-\-file\-alignment\*(C'\fR" 4
.IX Item "--file-alignment"
Specify the file alignment.  Sections in the file will always begin at
file offsets which are multiples of this number.  This defaults to
512.
.Ip "\f(CW\*(C`\-\-heap \f(CIreserve\f(CW\*(C'\fR" 4
.IX Item "--heap reserve"
.Ip "\f(CW\*(C`\-\-heap \f(CIreserve\f(CW,\f(CIcommit\f(CW\*(C'\fR" 4
.IX Item "--heap reserve,commit"
Specify the amount of memory to reserve (and optionally commit) to be
used as heap for this program.  The default is 1Mb reserved, 4K
committed.
.Ip "\f(CW\*(C`\-\-image\-base \f(CIvalue\f(CW\*(C'\fR" 4
.IX Item "--image-base value"
Use \fIvalue\fR as the base address of your program or dll.  This is
the lowest memory location that will be used when your program or dll
is loaded.  To reduce the need to relocate and improve performance of
your dlls, each should have a unique base address and not overlap any
other dlls.  The default is 0x400000 for executables, and 0x10000000
for dlls.
.Ip "\f(CW\*(C`\-\-kill\-at\*(C'\fR" 4
.IX Item "--kill-at"
If given, the stdcall suffixes (@@\fInn\fR) will be stripped from
symbols before they are exported.
.Ip "\f(CW\*(C`\-\-major\-image\-version \f(CIvalue\f(CW\*(C'\fR" 4
.IX Item "--major-image-version value"
Sets the major number of the \*(L"image version\*(R".  Defaults to 1.
.Ip "\f(CW\*(C`\-\-major\-os\-version \f(CIvalue\f(CW\*(C'\fR" 4
.IX Item "--major-os-version value"
Sets the major number of the \*(L"os version\*(R".  Defaults to 4.
.Ip "\f(CW\*(C`\-\-major\-subsystem\-version \f(CIvalue\f(CW\*(C'\fR" 4
.IX Item "--major-subsystem-version value"
Sets the major number of the \*(L"subsystem version\*(R".  Defaults to 4.
.Ip "\f(CW\*(C`\-\-minor\-image\-version \f(CIvalue\f(CW\*(C'\fR" 4
.IX Item "--minor-image-version value"
Sets the minor number of the \*(L"image version\*(R".  Defaults to 0.
.Ip "\f(CW\*(C`\-\-minor\-os\-version \f(CIvalue\f(CW\*(C'\fR" 4
.IX Item "--minor-os-version value"
Sets the minor number of the \*(L"os version\*(R".  Defaults to 0.
.Ip "\f(CW\*(C`\-\-minor\-subsystem\-version \f(CIvalue\f(CW\*(C'\fR" 4
.IX Item "--minor-subsystem-version value"
Sets the minor number of the \*(L"subsystem version\*(R".  Defaults to 0.
.Ip "\f(CW\*(C`\-\-output\-def \f(CIfile\f(CW\*(C'\fR" 4
.IX Item "--output-def file"
The linker will create the file \fIfile\fR which will contain a \s-1DEF\s0
file corresponding to the \s-1DLL\s0 the linker is generating.  This \s-1DEF\s0 file
(which should be called \f(CW\*(C`*.def\*(C'\fR) may be used to create an import
library with \f(CW\*(C`dlltool\*(C'\fR or may be used as a reference to
automatically or implicitly exported symbols.
.Ip "\f(CW\*(C`\-\-section\-alignment\*(C'\fR" 4
.IX Item "--section-alignment"
Sets the section alignment.  Sections in memory will always begin at
addresses which are a multiple of this number.  Defaults to 0x1000.
.Ip "\f(CW\*(C`\-\-stack \f(CIreserve\f(CW\*(C'\fR" 4
.IX Item "--stack reserve"
.Ip "\f(CW\*(C`\-\-stack \f(CIreserve\f(CW,\f(CIcommit\f(CW\*(C'\fR" 4
.IX Item "--stack reserve,commit"
Specify the amount of memory to reserve (and optionally commit) to be
used as stack for this program.  The default is 32Mb reserved, 4K
committed.
.Ip "\f(CW\*(C`\-\-subsystem \f(CIwhich\f(CW\*(C'\fR" 4
.IX Item "--subsystem which"
.Ip "\f(CW\*(C`\-\-subsystem \f(CIwhich\f(CW:\f(CImajor\f(CW\*(C'\fR" 4
.IX Item "--subsystem which:major"
.Ip "\f(CW\*(C`\-\-subsystem \f(CIwhich\f(CW:\f(CImajor\f(CW.\f(CIminor\f(CW\*(C'\fR" 4
.IX Item "--subsystem which:major.minor"
Specifies the subsystem under which your program will execute.  The
legal values for \fIwhich\fR are \f(CW\*(C`native\*(C'\fR, \f(CW\*(C`windows\*(C'\fR,
\&\f(CW\*(C`console\*(C'\fR, and \f(CW\*(C`posix\*(C'\fR.  You may optionally set the
subsystem version also.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
You can change the behavior of \f(CW\*(C`ld\*(C'\fR with the environment variables
\&\f(CW\*(C`GNUTARGET\*(C'\fR, \f(CW\*(C`LDEMULATION\*(C'\fR, and \f(CW\*(C`COLLECT_NO_DEMANGLE\*(C'\fR.
.PP
\&\f(CW\*(C`GNUTARGET\*(C'\fR determines the input-file object format if you don't
use \fB\-b\fR (or its synonym \fB\*(--format\fR).  Its value should be one
of the \s-1BFD\s0 names for an input format.  If there is no
\&\f(CW\*(C`GNUTARGET\*(C'\fR in the environment, \f(CW\*(C`ld\*(C'\fR uses the natural format
of the target. If \f(CW\*(C`GNUTARGET\*(C'\fR is set to \f(CW\*(C`default\*(C'\fR then \s-1BFD\s0
attempts to discover the input format by examining binary input files;
this method often succeeds, but there are potential ambiguities, since
there is no method of ensuring that the magic number used to specify
object-file formats is unique.  However, the configuration procedure for
\&\s-1BFD\s0 on each system places the conventional format for that system first
in the search-list, so ambiguities are resolved in favor of convention.
.PP
\&\f(CW\*(C`LDEMULATION\*(C'\fR determines the default emulation if you don't use the
\&\fB\-m\fR option.  The emulation can affect various aspects of linker
behaviour, particularly the default linker script.  You can list the
available emulations with the \fB\*(--verbose\fR or \fB\-V\fR options.  If
the \fB\-m\fR option is not used, and the \f(CW\*(C`LDEMULATION\*(C'\fR environment
variable is not defined, the default emulation depends upon how the
linker was configured.
.PP
Normally, the linker will default to demangling symbols.  However, if
\&\f(CW\*(C`COLLECT_NO_DEMANGLE\*(C'\fR is set in the environment, then it will
default to not demangling symbols.  This environment variable is used in
a similar fashion by the \f(CW\*(C`gcc\*(C'\fR linker wrapper program.  The default
may be overridden by the \fB\*(--demangle\fR and \fB\*(--no-demangle\fR
options.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIar\fR\|(1), \fInm\fR\|(1), \fIobjcopy\fR\|(1), \fIobjdump\fR\|(1), \fIreadelf\fR\|(1) and
the Info entries for \fIbinutils\fR and
\&\fIld\fR.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000 Free Software Foundation, Inc.
.PP
Permission is granted to copy, distribute and/or modify this document
under the terms of the \s-1GNU\s0 Free Documentation License, Version 1.1
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled \*(L"\s-1GNU\s0 Free Documentation License\*(R".
@


1.12.20.1
log
@*** empty log message ***
@
text
@d1 2
a2 1
.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
d5 9
a13 1
.\" ========================================================================
d18 6
d31 1
d36 5
a40 5
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
d49 2
a50 2
.    ds C` ""
.    ds C' ""
d59 5
a63 9
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
d66 1
a66 1
..
d70 4
a73 4
.el \{\
.    de IX
..
.\}
d77 1
d137 1
a137 1
.\" ========================================================================
d140 2
a141 5
.TH LD 1 "2012-11-13" "binutils-2.23.1" "GNU Development Tools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
d143 1
a143 1
ld \- The GNU linker
d146 1
a146 1
ld [\fBoptions\fR] \fIobjfile\fR ...
d149 1
a149 1
\&\fBld\fR combines a number of object and archive files, relocates
d151 1
a151 1
compiling a program is to run \fBld\fR.
d153 1
a153 1
\&\fBld\fR accepts Linker Command Language files written in
d157 4
a160 3
This man page does not describe the command language; see the
\&\fBld\fR entry in \f(CW\*(C`info\*(C'\fR for full details on the command
language and on other aspects of the \s-1GNU\s0 linker.
d162 2
a163 2
This version of \fBld\fR uses the general purpose \s-1BFD\s0 libraries
to operate on object files. This allows \fBld\fR to read, combine, and
d166 1
a166 1
available kind of object file.
d171 1
a171 1
\&\fBld\fR continues executing, allowing you to identify other errors
d174 1
a174 1
The \s-1GNU\s0 linker \fBld\fR is meant to cover a broad range of situations,
d181 1
a181 1
For instance, a frequent use of \fBld\fR is to link standard Unix
d186 1
a186 1
\&        ld \-o <output> /lib/crt0.o hello.o \-lc
d188 1
a188 2
.PP
This tells \fBld\fR to produce a file called \fIoutput\fR as the
d193 1
a193 1
Some of the command-line options to \fBld\fR may be specified at any
d214 1
a214 1
If the linker cannot recognize the format of an object file, it will
d220 5
a224 5
\&\f(CW\*(C`INPUT\*(C'\fR or \f(CW\*(C`GROUP\*(C'\fR to load other objects.  Specifying a
script in this way merely augments the main linker script, with the
extra commands placed after the main script; use the \fB\-T\fR option
to replace the default linker script entirely, but note the effect of
the \f(CW\*(C`INSERT\*(C'\fR command.
d232 2
a233 2
precede the option name; for example, \fB\-trace\-symbol\fR and
\&\fB\-\-trace\-symbol\fR are equivalent.  Note\-\-\-there is one exception to
d235 1
a235 1
only be preceded by two dashes.  This is to reduce confusion with the
d237 1
a237 1
name to \fBmagic\fR whereas \fB\-\-omagic\fR sets the \s-1NMAGIC\s0 flag on the
d243 1
a243 1
\&\fB\-\-trace\-symbol foo\fR and \fB\-\-trace\-symbol=foo\fR are equivalent.
d247 2
a248 2
Note\-\-\-if the linker is being invoked indirectly, via a compiler driver
(e.g. \fBgcc\fR) then all the linker command line options should be
d253 1
a253 1
\&          gcc \-Wl,\-\-start\-group foo.o bar.o \-Wl,\-\-end\-group
a254 1
.PP
d256 1
a256 10
silently drop the linker options, resulting in a bad link.  Confusion
may also arise when passing options that require values through a
driver, as the use of a space between option and argument acts as
a separator, and causes the driver to pass only the option to the linker
and the argument to the compiler.  In this case, it is simplest to use
the joined forms of both single\- and multiple-letter options, such as:
.PP
.Vb 1
\&          gcc foo.o bar.o \-Wl,\-eENTRY \-Wl,\-Map=a.map
.Ve
d260 2
a261 15
.IP "\fB@@\fR\fIfile\fR" 4
.IX Item "@@file"
Read command-line options from \fIfile\fR.  The options read are
inserted in place of the original @@\fIfile\fR option.  If \fIfile\fR
does not exist, or cannot be read, then the option will be treated
literally, and not removed.
.Sp
Options in \fIfile\fR are separated by whitespace.  A whitespace
character may be included in an option by surrounding the entire
option in either single or double quotes.  Any character (including a
backslash) may be included by prefixing the character to be included
with a backslash.  The \fIfile\fR may itself contain additional
@@\fIfile\fR options; any such options will be processed recursively.
.IP "\fB\-a\fR \fIkeyword\fR" 4
.IX Item "-a keyword"
d267 3
a269 14
.IP "\fB\-\-audit\fR \fI\s-1AUDITLIB\s0\fR" 4
.IX Item "--audit AUDITLIB"
Adds \fI\s-1AUDITLIB\s0\fR to the \f(CW\*(C`DT_AUDIT\*(C'\fR entry of the dynamic section.
\&\fI\s-1AUDITLIB\s0\fR is not checked for existence, nor will it use the \s-1DT_SONAME\s0
specified in the library.  If specified multiple times \f(CW\*(C`DT_AUDIT\*(C'\fR
will contain a colon separated list of audit interfaces to use. If the linker
finds an object with an audit entry while searching for shared libraries,
it will add a corresponding \f(CW\*(C`DT_DEPAUDIT\*(C'\fR entry in the output file.  
This option is only meaningful on \s-1ELF\s0 platforms supporting the rtld-audit
interface.
.IP "\fB\-A\fR \fIarchitecture\fR" 4
.IX Item "-A architecture"
.PD 0
.IP "\fB\-\-architecture=\fR\fIarchitecture\fR" 4
d271 2
a272 3
.PD
In the current release of \fBld\fR, this option is useful only for the
Intel 960 family of architectures.  In that \fBld\fR configuration, the
d275 1
a275 1
archive-library search path.
d277 1
a277 1
Future releases of \fBld\fR may support similar functionality for
d279 1
a279 1
.IP "\fB\-b\fR \fIinput-format\fR" 4
d281 1
a281 2
.PD 0
.IP "\fB\-\-format=\fR\fIinput-format\fR" 4
d283 2
a284 3
.PD
\&\fBld\fR may be configured to support more than one kind of object
file.  If your \fBld\fR is configured this way, you can use the
d286 1
a286 1
that follow this option on the command line.  Even when \fBld\fR is
d288 1
a288 1
to specify this, as \fBld\fR should be configured to expect as a
d305 1
a305 1
.IP "\fB\-c\fR \fIMRI-commandfile\fR" 4
d307 1
a307 2
.PD 0
.IP "\fB\-\-mri\-script=\fR\fIMRI-commandfile\fR" 4
d309 1
a309 2
.PD
For compatibility with linkers produced by \s-1MRI\s0, \fBld\fR accepts script
d314 2
a315 2
scripts written in the general-purpose \fBld\fR scripting language.
If \fIMRI-cmdfile\fR does not exist, \fBld\fR looks for it in the directories
d317 1
a317 1
.IP "\fB\-d\fR" 4
d319 1
a319 2
.PD 0
.IP "\fB\-dc\fR" 4
d321 1
a321 1
.IP "\fB\-dp\fR" 4
a322 1
.PD
d327 1
a327 13
.IP "\fB\-\-depaudit\fR \fI\s-1AUDITLIB\s0\fR" 4
.IX Item "--depaudit AUDITLIB"
.PD 0
.IP "\fB\-P\fR \fI\s-1AUDITLIB\s0\fR" 4
.IX Item "-P AUDITLIB"
.PD
Adds \fI\s-1AUDITLIB\s0\fR to the \f(CW\*(C`DT_DEPAUDIT\*(C'\fR entry of the dynamic section.
\&\fI\s-1AUDITLIB\s0\fR is not checked for existence, nor will it use the \s-1DT_SONAME\s0
specified in the library.  If specified multiple times \f(CW\*(C`DT_DEPAUDIT\*(C'\fR
will contain a colon separated list of audit interfaces to use.  This
option is only meaningful on \s-1ELF\s0 platforms supporting the rtld-audit interface.
The \-P option is provided for Solaris compatibility.
.IP "\fB\-e\fR \fIentry\fR" 4
d329 1
a329 2
.PD 0
.IP "\fB\-\-entry=\fR\fIentry\fR" 4
a330 1
.PD
d336 2
a337 24
\&\fB0\fR for base 8).
.IP "\fB\-\-exclude\-libs\fR \fIlib\fR\fB,\fR\fIlib\fR\fB,...\fR" 4
.IX Item "--exclude-libs lib,lib,..."
Specifies a list of archive libraries from which symbols should not be automatically
exported.  The library names may be delimited by commas or colons.  Specifying
\&\f(CW\*(C`\-\-exclude\-libs ALL\*(C'\fR excludes symbols in all archive libraries from
automatic export.  This option is available only for the i386 \s-1PE\s0 targeted
port of the linker and for \s-1ELF\s0 targeted ports.  For i386 \s-1PE\s0, symbols
explicitly listed in a .def file are still exported, regardless of this
option.  For \s-1ELF\s0 targeted ports, symbols affected by this option will
be treated as hidden.
.IP "\fB\-\-exclude\-modules\-for\-implib\fR \fImodule\fR\fB,\fR\fImodule\fR\fB,...\fR" 4
.IX Item "--exclude-modules-for-implib module,module,..."
Specifies a list of object files or archive members, from which symbols
should not be automatically exported, but which should be copied wholesale
into the import library being generated during the link.  The module names
may be delimited by commas or colons, and must match exactly the filenames
used by \fBld\fR to open the files; for archive members, this is simply
the member name, but for object files the name listed must include and
match precisely any path used to specify the input file on the linker's
command-line.  This option is available only for the i386 \s-1PE\s0 targeted port
of the linker.  Symbols explicitly listed in a .def file are still exported,
regardless of this option.
.IP "\fB\-E\fR" 4
d339 1
a339 2
.PD 0
.IP "\fB\-\-export\-dynamic\fR" 4
d341 7
a347 12
.IP "\fB\-\-no\-export\-dynamic\fR" 4
.IX Item "--no-export-dynamic"
.PD
When creating a dynamically linked executable, using the \fB\-E\fR
option or the \fB\-\-export\-dynamic\fR option causes the linker to add
all symbols to the dynamic symbol table.  The dynamic symbol table is the
set of symbols which are visible from dynamic objects at run time.
.Sp
If you do not use either of these options (or use the
\&\fB\-\-no\-export\-dynamic\fR option to restore the default behavior), the
dynamic symbol table will normally contain only those symbols which are
referenced by some dynamic object mentioned in the link.
d353 1
a353 9
.Sp
You can also use the dynamic list to control what symbols should
be added to the dynamic symbol table if the output format supports it.
See the description of \fB\-\-dynamic\-list\fR.
.Sp
Note that this option is specific to \s-1ELF\s0 targeted ports.  \s-1PE\s0 targets
support a similar function to export all symbols from a \s-1DLL\s0 or \s-1EXE\s0; see
the description of \fB\-\-export\-all\-symbols\fR below.
.IP "\fB\-EB\fR" 4
d356 1
a356 1
.IP "\fB\-EL\fR" 4
d359 4
a362 6
.IP "\fB\-f\fR \fIname\fR" 4
.IX Item "-f name"
.PD 0
.IP "\fB\-\-auxiliary=\fR\fIname\fR" 4
.IX Item "--auxiliary=name"
.PD
d380 1
a380 1
.IP "\fB\-F\fR \fIname\fR" 4
d382 2
a383 4
.PD 0
.IP "\fB\-\-filter=\fR\fIname\fR" 4
.IX Item "--filter=name"
.PD
d397 1
a397 1
Some older linkers used the \fB\-F\fR option throughout a compilation
d399 2
a400 3
object files.
The \s-1GNU\s0 linker uses other mechanisms for this purpose: the
\&\fB\-b\fR, \fB\-\-format\fR, \fB\-\-oformat\fR options, the
d402 4
a405 5
environment variable.
The \s-1GNU\s0 linker will ignore the \fB\-F\fR option when not
creating an \s-1ELF\s0 shared object.
.IP "\fB\-fini=\fR\fIname\fR" 4
.IX Item "-fini=name"
d410 1
a410 1
.IP "\fB\-g\fR" 4
d413 3
a415 4
.IP "\fB\-G\fR \fIvalue\fR" 4
.IX Item "-G value"
.PD 0
.IP "\fB\-\-gpsize=\fR\fIvalue\fR" 4
a416 1
.PD
d421 3
a423 4
.IP "\fB\-h\fR \fIname\fR" 4
.IX Item "-h name"
.PD 0
.IP "\fB\-soname=\fR\fIname\fR" 4
a424 1
.PD
d430 1
a430 1
.IP "\fB\-i\fR" 4
d433 2
a434 2
.IP "\fB\-init=\fR\fIname\fR" 4
.IX Item "-init=name"
d439 15
a453 20
.IP "\fB\-l\fR \fInamespec\fR" 4
.IX Item "-l namespec"
.PD 0
.IP "\fB\-\-library=\fR\fInamespec\fR" 4
.IX Item "--library=namespec"
.PD
Add the archive or object file specified by \fInamespec\fR to the
list of files to link.  This option may be used any number of times.
If \fInamespec\fR is of the form \fI:\fIfilename\fI\fR, \fBld\fR
will search the library path for a file called \fIfilename\fR, otherwise it
will search the library path for a file called \fIlib\fInamespec\fI.a\fR.
.Sp
On systems which support shared libraries, \fBld\fR may also search for
files other than \fIlib\fInamespec\fI.a\fR.  Specifically, on \s-1ELF\s0
and SunOS systems, \fBld\fR will search a directory for a library
called \fIlib\fInamespec\fI.so\fR before searching for one called
\&\fIlib\fInamespec\fI.a\fR.  (By convention, a \f(CW\*(C`.so\*(C'\fR extension
indicates a shared library.)  Note that this behavior does not apply
to \fI:\fIfilename\fI\fR, which always specifies a file called
\&\fIfilename\fR.
d458 1
a458 1
command line, the linker will include the appropriate file(s) from the
d462 1
a462 1
See the \fB\-(\fR option for a way to force the linker to search
d468 1
a468 1
if you are using \fBld\fR on \s-1AIX\s0, note that it is different from the
d470 3
a472 4
.IP "\fB\-L\fR \fIsearchdir\fR" 4
.IX Item "-L searchdir"
.PD 0
.IP "\fB\-\-library\-path=\fR\fIsearchdir\fR" 4
d474 2
a475 3
.PD
Add path \fIsearchdir\fR to the list of paths that \fBld\fR will search
for archive libraries and \fBld\fR control scripts.  You may use this
d479 2
a480 7
\&\fB\-L\fR options apply to all \fB\-l\fR options, regardless of the
order in which the options appear.  \fB\-L\fR options do not affect
how \fBld\fR searches for a linker script unless \fB\-T\fR
option is specified.
.Sp
If \fIsearchdir\fR begins with \f(CW\*(C`=\*(C'\fR, then the \f(CW\*(C`=\*(C'\fR will be replaced
by the \fIsysroot prefix\fR, a path specified when the linker is configured.
d483 2
a484 2
\&\fB\-L\fR) depends on which emulation mode \fBld\fR is using, and in
some cases also on how it was configured.
d489 2
a490 2
.IP "\fB\-m\fR \fIemulation\fR" 4
.IX Item "-m emulation"
d492 1
a492 1
emulations with the \fB\-\-verbose\fR or \fB\-V\fR options.
d499 1
a499 1
.IP "\fB\-M\fR" 4
d501 1
a501 2
.PD 0
.IP "\fB\-\-print\-map\fR" 4
a502 1
.PD
d506 3
a508 3
.IP "\(bu" 4
Where object files are mapped into memory.
.IP "\(bu" 4
d510 1
a510 1
.IP "\(bu" 4
a512 28
.IP "\(bu" 4
The values assigned to symbols.
.Sp
Note \- symbols whose values are computed by an expression which
involves a reference to a previous value of the same symbol may not
have correct result displayed in the link map.  This is because the
linker discards intermediate results and only retains the final value
of an expression.  Under such circumstances the linker will display
the final value enclosed by square brackets.  Thus for example a
linker script containing:
.Sp
.Vb 3
\&           foo = 1
\&           foo = foo * 4
\&           foo = foo + 8
.Ve
.Sp
will produce the following output in the link map if the \fB\-M\fR
option is used:
.Sp
.Vb 3
\&           0x00000001                foo = 0x1
\&           [0x0000000c]                foo = (foo * 0x4)
\&           [0x0000000c]                foo = (foo + 0x8)
.Ve
.Sp
See \fBExpressions\fR for more information about expressions in linker
scripts.
d516 1
a516 1
.IP "\fB\-n\fR" 4
d518 1
a518 2
.PD 0
.IP "\fB\-\-nmagic\fR" 4
d520 3
a522 5
.PD
Turn off page alignment of sections, and disable linking against shared
libraries.  If the output format supports Unix style magic numbers,
mark the output as \f(CW\*(C`NMAGIC\*(C'\fR.
.IP "\fB\-N\fR" 4
d524 1
a524 2
.PD 0
.IP "\fB\-\-omagic\fR" 4
a525 1
.PD
d527 3
a529 12
not page-align the data segment, and disable linking against shared
libraries.  If the output format supports Unix style magic numbers,
mark the output as \f(CW\*(C`OMAGIC\*(C'\fR. Note: Although a writable text section
is allowed for PE-COFF targets, it does not conform to the format
specification published by Microsoft.
.IP "\fB\-\-no\-omagic\fR" 4
.IX Item "--no-omagic"
This option negates most of the effects of the \fB\-N\fR option.  It
sets the text section to be read-only, and forces the data segment to
be page-aligned.  Note \- this option does not enable linking against
shared libraries.  Use \fB\-Bdynamic\fR for this.
.IP "\fB\-o\fR \fIoutput\fR" 4
d531 1
a531 2
.PD 0
.IP "\fB\-\-output=\fR\fIoutput\fR" 4
d533 1
a533 2
.PD
Use \fIoutput\fR as the name for the program produced by \fBld\fR; if this
d536 1
a536 1
.IP "\fB\-O\fR \fIlevel\fR" 4
d538 1
a538 1
If \fIlevel\fR is a numeric values greater than zero \fBld\fR optimizes
d540 2
a541 6
should only be enabled for the final binary.  At the moment this
option only affects \s-1ELF\s0 shared library generation.  Future releases of
the linker may make more use of this option.  Also currently there is
no difference in the linker's behaviour for different non-zero values
of this option.  Again this may change with future releases.
.IP "\fB\-q\fR" 4
d543 1
a543 2
.PD 0
.IP "\fB\-\-emit\-relocs\fR" 4
d545 1
a545 2
.PD
Leave relocation sections and contents in fully linked executables.
d549 1
a549 7
.Sp
This option is currently only supported on \s-1ELF\s0 platforms.
.IP "\fB\-\-force\-dynamic\fR" 4
.IX Item "--force-dynamic"
Force the output file to have dynamic sections.  This option is specific
to VxWorks targets.
.IP "\fB\-r\fR" 4
d551 2
a552 4
.PD 0
.IP "\fB\-\-relocatable\fR" 4
.IX Item "--relocatable"
.PD
d554 1
a554 1
turn serve as input to \fBld\fR.  This is often called \fIpartial
a561 6
When an input file does not have the same format as the output file,
partial linking is only supported if that input file does not contain any
relocations.  Different output formats can have further restrictions; for
example some \f(CW\*(C`a.out\*(C'\fR\-based formats do not support partial linking
with input files in other formats at all.
.Sp
d563 1
a563 1
.IP "\fB\-R\fR \fIfilename\fR" 4
d565 1
a565 2
.PD 0
.IP "\fB\-\-just\-symbols=\fR\fIfilename\fR" 4
a566 1
.PD
d572 1
a572 1
For compatibility with other \s-1ELF\s0 linkers, if the \fB\-R\fR option is
d574 2
a575 2
the \fB\-rpath\fR option.
.IP "\fB\-s\fR" 4
d577 1
a577 2
.PD 0
.IP "\fB\-\-strip\-all\fR" 4
a578 1
.PD
d580 1
a580 1
.IP "\fB\-S\fR" 4
d582 1
a582 2
.PD 0
.IP "\fB\-\-strip\-debug\fR" 4
a583 1
.PD
d585 1
a585 1
.IP "\fB\-t\fR" 4
d587 1
a587 2
.PD 0
.IP "\fB\-\-trace\fR" 4
d589 2
a590 3
.PD
Print the names of the input files as \fBld\fR processes them.
.IP "\fB\-T\fR \fIscriptfile\fR" 4
d592 1
a592 2
.PD 0
.IP "\fB\-\-script=\fR\fIscriptfile\fR" 4
a593 1
.PD
d595 1
a595 1
\&\fBld\fR's default linker script (rather than adding to it), so
d597 7
a603 21
output file.    If \fIscriptfile\fR does not exist in
the current directory, \f(CW\*(C`ld\*(C'\fR looks for it in the directories
specified by any preceding \fB\-L\fR options.  Multiple \fB\-T\fR
options accumulate.
.IP "\fB\-dT\fR \fIscriptfile\fR" 4
.IX Item "-dT scriptfile"
.PD 0
.IP "\fB\-\-default\-script=\fR\fIscriptfile\fR" 4
.IX Item "--default-script=scriptfile"
.PD
Use \fIscriptfile\fR as the default linker script.
.Sp
This option is similar to the \fB\-\-script\fR option except that
processing of the script is delayed until after the rest of the
command line has been processed.  This allows options placed after the
\&\fB\-\-default\-script\fR option on the command line to affect the
behaviour of the linker script, which can be important when the linker
command line cannot be directly controlled by the user.  (eg because
the command line is being constructed by another tool, such as
\&\fBgcc\fR).
.IP "\fB\-u\fR \fIsymbol\fR" 4
d605 1
a605 2
.PD 0
.IP "\fB\-\-undefined=\fR\fIsymbol\fR" 4
a606 1
.PD
d612 1
a612 1
.IP "\fB\-Ur\fR" 4
d616 1
a616 1
turn serve as input to \fBld\fR.  When linking \*(C+ programs, \fB\-Ur\fR
d622 1
a622 1
.IP "\fB\-\-unique[=\fR\fI\s-1SECTION\s0\fR\fB]\fR" 4
d631 1
a631 1
.IP "\fB\-v\fR" 4
d633 1
a633 2
.PD 0
.IP "\fB\-\-version\fR" 4
d635 1
a635 1
.IP "\fB\-V\fR" 4
d637 1
a637 2
.PD
Display the version number for \fBld\fR.  The \fB\-V\fR option also
d639 1
a639 1
.IP "\fB\-x\fR" 4
d641 1
a641 2
.PD 0
.IP "\fB\-\-discard\-all\fR" 4
a642 1
.PD
d644 1
a644 1
.IP "\fB\-X\fR" 4
d646 1
a646 2
.PD 0
.IP "\fB\-\-discard\-locals\fR" 4
d648 3
a650 5
.PD
Delete all temporary local symbols.  (These symbols start with
system-specific local label prefixes, typically \fB.L\fR for \s-1ELF\s0 systems
or \fBL\fR for traditional a.out systems.)
.IP "\fB\-y\fR \fIsymbol\fR" 4
d652 1
a652 2
.PD 0
.IP "\fB\-\-trace\-symbol=\fR\fIsymbol\fR" 4
a653 1
.PD
d660 1
a660 1
.IP "\fB\-Y\fR \fIpath\fR" 4
d664 1
a664 1
.IP "\fB\-z\fR \fIkeyword\fR" 4
d666 17
a682 88
The recognized keywords are:
.RS 4
.IP "\fBcombreloc\fR" 4
.IX Item "combreloc"
Combines multiple reloc sections and sorts them to make dynamic symbol
lookup caching possible.
.IP "\fBdefs\fR" 4
.IX Item "defs"
Disallows undefined symbols in object files.  Undefined symbols in
shared libraries are still allowed.
.IP "\fBexecstack\fR" 4
.IX Item "execstack"
Marks the object as requiring executable stack.
.IP "\fBinitfirst\fR" 4
.IX Item "initfirst"
This option is only meaningful when building a shared object.
It marks the object so that its runtime initialization will occur
before the runtime initialization of any other objects brought into
the process at the same time.  Similarly the runtime finalization of
the object will occur after the runtime finalization of any other
objects.
.IP "\fBinterpose\fR" 4
.IX Item "interpose"
Marks the object that its symbol table interposes before all symbols
but the primary executable.
.IP "\fBlazy\fR" 4
.IX Item "lazy"
When generating an executable or shared library, mark it to tell the
dynamic linker to defer function call resolution to the point when
the function is called (lazy binding), rather than at load time.
Lazy binding is the default.
.IP "\fBloadfltr\fR" 4
.IX Item "loadfltr"
Marks  the object that its filters be processed immediately at
runtime.
.IP "\fBmuldefs\fR" 4
.IX Item "muldefs"
Allows multiple definitions.
.IP "\fBnocombreloc\fR" 4
.IX Item "nocombreloc"
Disables multiple reloc sections combining.
.IP "\fBnocopyreloc\fR" 4
.IX Item "nocopyreloc"
Disables production of copy relocs.
.IP "\fBnodefaultlib\fR" 4
.IX Item "nodefaultlib"
Marks the object that the search for dependencies of this object will
ignore any default library search paths.
.IP "\fBnodelete\fR" 4
.IX Item "nodelete"
Marks the object shouldn't be unloaded at runtime.
.IP "\fBnodlopen\fR" 4
.IX Item "nodlopen"
Marks the object not available to \f(CW\*(C`dlopen\*(C'\fR.
.IP "\fBnodump\fR" 4
.IX Item "nodump"
Marks the object can not be dumped by \f(CW\*(C`dldump\*(C'\fR.
.IP "\fBnoexecstack\fR" 4
.IX Item "noexecstack"
Marks the object as not requiring executable stack.
.IP "\fBnorelro\fR" 4
.IX Item "norelro"
Don't create an \s-1ELF\s0 \f(CW\*(C`PT_GNU_RELRO\*(C'\fR segment header in the object.
.IP "\fBnow\fR" 4
.IX Item "now"
When generating an executable or shared library, mark it to tell the
dynamic linker to resolve all symbols when the program is started, or
when the shared library is linked to using dlopen, instead of
deferring function call resolution to the point when the function is
first called.
.IP "\fBorigin\fR" 4
.IX Item "origin"
Marks the object may contain \f(CW$ORIGIN\fR.
.IP "\fBrelro\fR" 4
.IX Item "relro"
Create an \s-1ELF\s0 \f(CW\*(C`PT_GNU_RELRO\*(C'\fR segment header in the object.
.IP "\fBmax\-page\-size=\fR\fIvalue\fR" 4
.IX Item "max-page-size=value"
Set the emulation maximum page size to \fIvalue\fR.
.IP "\fBcommon\-page\-size=\fR\fIvalue\fR" 4
.IX Item "common-page-size=value"
Set the emulation common page size to \fIvalue\fR.
.RE
.RS 4
.Sp
Other keywords are ignored for Solaris compatibility.
.RE
.IP "\fB\-(\fR \fIarchives\fR \fB\-)\fR" 4
d684 1
a684 2
.PD 0
.IP "\fB\-\-start\-group\fR \fIarchives\fR \fB\-\-end\-group\fR" 4
a685 1
.PD
d701 1
a701 40
.IP "\fB\-\-accept\-unknown\-input\-arch\fR" 4
.IX Item "--accept-unknown-input-arch"
.PD 0
.IP "\fB\-\-no\-accept\-unknown\-input\-arch\fR" 4
.IX Item "--no-accept-unknown-input-arch"
.PD
Tells the linker to accept input files whose architecture cannot be
recognised.  The assumption is that the user knows what they are doing
and deliberately wants to link in these unknown input files.  This was
the default behaviour of the linker, before release 2.14.  The default
behaviour from release 2.14 onwards is to reject such input files, and
so the \fB\-\-accept\-unknown\-input\-arch\fR option has been added to
restore the old behaviour.
.IP "\fB\-\-as\-needed\fR" 4
.IX Item "--as-needed"
.PD 0
.IP "\fB\-\-no\-as\-needed\fR" 4
.IX Item "--no-as-needed"
.PD
This option affects \s-1ELF\s0 \s-1DT_NEEDED\s0 tags for dynamic libraries mentioned
on the command line after the \fB\-\-as\-needed\fR option.  Normally
the linker will add a \s-1DT_NEEDED\s0 tag for each dynamic library mentioned
on the command line, regardless of whether the library is actually
needed or not.  \fB\-\-as\-needed\fR causes a \s-1DT_NEEDED\s0 tag to only be
emitted for a library that satisfies an undefined symbol reference
from a regular object file or, if the library is not found in the
\&\s-1DT_NEEDED\s0 lists of other libraries linked up to that point, an
undefined symbol reference from another dynamic library.
\&\fB\-\-no\-as\-needed\fR restores the default behaviour.
.IP "\fB\-\-add\-needed\fR" 4
.IX Item "--add-needed"
.PD 0
.IP "\fB\-\-no\-add\-needed\fR" 4
.IX Item "--no-add-needed"
.PD
These two options have been deprecated because of the similarity of
their names to the \fB\-\-as\-needed\fR and \fB\-\-no\-as\-needed\fR
options.  They have been replaced by \fB\-\-copy\-dt\-needed\-entries\fR
and \fB\-\-no\-copy\-dt\-needed\-entries\fR.
.IP "\fB\-assert\fR \fIkeyword\fR" 4
d704 1
a704 1
.IP "\fB\-Bdynamic\fR" 4
d706 1
a706 2
.PD 0
.IP "\fB\-dy\fR" 4
d708 1
a708 1
.IP "\fB\-call_shared\fR" 4
a709 1
.PD
d715 2
a716 2
\&\fB\-l\fR options which follow it.
.IP "\fB\-Bgroup\fR" 4
d721 3
a723 3
\&\fB\-\-unresolved\-symbols=report\-all\fR is implied.  This option is
only meaningful on \s-1ELF\s0 platforms which support shared libraries.
.IP "\fB\-Bstatic\fR" 4
d725 1
a725 2
.PD 0
.IP "\fB\-dn\fR" 4
d727 1
a727 1
.IP "\fB\-non_shared\fR" 4
d729 1
a729 1
.IP "\fB\-static\fR" 4
a730 1
.PD
d735 2
a736 7
library searching for \fB\-l\fR options which follow it.  This
option also implies \fB\-\-unresolved\-symbols=report\-all\fR.  This
option can be used with \fB\-shared\fR.  Doing so means that a
shared library is being created but that all of the library's external
references must be resolved by pulling in entries from static
libraries.
.IP "\fB\-Bsymbolic\fR" 4
d743 1
a743 29
.IP "\fB\-Bsymbolic\-functions\fR" 4
.IX Item "-Bsymbolic-functions"
When creating a shared library, bind references to global function
symbols to the definition within the shared library, if any.
This option is only meaningful on \s-1ELF\s0 platforms which support shared
libraries.
.IP "\fB\-\-dynamic\-list=\fR\fIdynamic-list-file\fR" 4
.IX Item "--dynamic-list=dynamic-list-file"
Specify the name of a dynamic list file to the linker.  This is
typically used when creating shared libraries to specify a list of
global symbols whose references shouldn't be bound to the definition
within the shared library, or creating dynamically linked executables
to specify a list of symbols which should be added to the symbol table
in the executable.  This option is only meaningful on \s-1ELF\s0 platforms
which support shared libraries.
.Sp
The format of the dynamic list is the same as the version node without
scope and node name.  See \fB\s-1VERSION\s0\fR for more information.
.IP "\fB\-\-dynamic\-list\-data\fR" 4
.IX Item "--dynamic-list-data"
Include all global data symbols to the dynamic list.
.IP "\fB\-\-dynamic\-list\-cpp\-new\fR" 4
.IX Item "--dynamic-list-cpp-new"
Provide the builtin dynamic list for \*(C+ operator new and delete.  It
is mainly useful for building shared libstdc++.
.IP "\fB\-\-dynamic\-list\-cpp\-typeinfo\fR" 4
.IX Item "--dynamic-list-cpp-typeinfo"
Provide the builtin dynamic list for \*(C+ runtime type identification.
.IP "\fB\-\-check\-sections\fR" 4
d745 1
a745 2
.PD 0
.IP "\fB\-\-no\-check\-sections\fR" 4
a746 1
.PD
d748 1
a748 1
been assigned to see if there are any overlaps.  Normally the linker will
d752 2
a753 28
restored by using the command line switch \fB\-\-check\-sections\fR.
Section overlap is not usually checked for relocatable links.  You can
force checking in that case by using the \fB\-\-check\-sections\fR
option.
.IP "\fB\-\-copy\-dt\-needed\-entries\fR" 4
.IX Item "--copy-dt-needed-entries"
.PD 0
.IP "\fB\-\-no\-copy\-dt\-needed\-entries\fR" 4
.IX Item "--no-copy-dt-needed-entries"
.PD
This option affects the treatment of dynamic libraries referred to 
by \s-1DT_NEEDED\s0 tags \fIinside\fR \s-1ELF\s0 dynamic libraries mentioned on the
command line.  Normally the linker won't add a \s-1DT_NEEDED\s0 tag to the
output binary for each library mentioned in a \s-1DT_NEEDED\s0 tag in an
input dynamic library.  With \fB\-\-copy\-dt\-needed\-entries\fR
specified on the command line however any dynamic libraries that
follow it will have their \s-1DT_NEEDED\s0 entries added.  The default
behaviour can be restored with \fB\-\-no\-copy\-dt\-needed\-entries\fR.
.Sp
This option also has an effect on the resolution of symbols in dynamic
libraries.  With \fB\-\-copy\-dt\-needed\-entries\fR dynamic libraries
mentioned on the command line will be recursively searched, following
their \s-1DT_NEEDED\s0 tags to other libraries, in order to resolve symbols
required by the output binary.  With the default setting however
the searching of dynamic libraries that follow it will stop with the
dynamic library itself.  No \s-1DT_NEEDED\s0 links will be traversed to resolve
symbols.
.IP "\fB\-\-cref\fR" 4
d764 2
a765 17
.IP "\fB\-\-no\-define\-common\fR" 4
.IX Item "--no-define-common"
This option inhibits the assignment of addresses to common symbols.
The script command \f(CW\*(C`INHIBIT_COMMON_ALLOCATION\*(C'\fR has the same effect.
.Sp
The \fB\-\-no\-define\-common\fR option allows decoupling
the decision to assign addresses to Common symbols from the choice
of the output file type; otherwise a non-Relocatable output type
forces assigning addresses to Common symbols.
Using \fB\-\-no\-define\-common\fR allows Common symbols that are referenced
from a shared library to be assigned addresses only in the main program.
This eliminates the unused duplicate space in the shared library,
and also prevents any possible confusion over resolving to the wrong
duplicate when there are many dynamic modules with specialized search
paths for runtime symbol resolution.
.IP "\fB\-\-defsym=\fR\fIsymbol\fR\fB=\fR\fIexpression\fR" 4
.IX Item "--defsym=symbol=expression"
d774 1
a774 1
space between \fIsymbol\fR, the equals sign ("\fB=\fR"), and
d776 1
a776 1
.IP "\fB\-\-demangle[=\fR\fIstyle\fR\fB]\fR" 4
d778 1
a778 2
.PD 0
.IP "\fB\-\-no\-demangle\fR" 4
a779 1
.PD
d789 2
a790 6
.IP "\fB\-I\fR\fIfile\fR" 4
.IX Item "-Ifile"
.PD 0
.IP "\fB\-\-dynamic\-linker=\fR\fIfile\fR" 4
.IX Item "--dynamic-linker=file"
.PD
d795 8
a802 1
.IP "\fB\-\-fatal\-warnings\fR" 4
d804 2
a805 7
.PD 0
.IP "\fB\-\-no\-fatal\-warnings\fR" 4
.IX Item "--no-fatal-warnings"
.PD
Treat all warnings as errors.  The default behaviour can be restored
with the option \fB\-\-no\-fatal\-warnings\fR.
.IP "\fB\-\-force\-exe\-suffix\fR" 4
d815 3
a817 1
.IP "\fB\-\-gc\-sections\fR" 4
a818 4
.PD 0
.IP "\fB\-\-no\-gc\-sections\fR" 4
.IX Item "--no-gc-sections"
.PD
d820 5
a824 36
targets that do not support this option.  The default behaviour (of not
performing this garbage collection) can be restored by specifying
\&\fB\-\-no\-gc\-sections\fR on the command line.
.Sp
\&\fB\-\-gc\-sections\fR decides which input sections are used by
examining symbols and relocations.  The section containing the entry
symbol and all sections containing symbols undefined on the
command-line will be kept, as will sections containing symbols
referenced by dynamic objects.  Note that when building shared
libraries, the linker must assume that any visible symbol is
referenced.  Once this initial set of sections has been determined,
the linker recursively marks as used any section referenced by their
relocations.  See \fB\-\-entry\fR and \fB\-\-undefined\fR.
.Sp
This option can be set when doing a partial link (enabled with option
\&\fB\-r\fR).  In this case the root of symbols kept must be explicitly 
specified either by an \fB\-\-entry\fR or \fB\-\-undefined\fR option or by
a \f(CW\*(C`ENTRY\*(C'\fR command in the linker script.
.IP "\fB\-\-print\-gc\-sections\fR" 4
.IX Item "--print-gc-sections"
.PD 0
.IP "\fB\-\-no\-print\-gc\-sections\fR" 4
.IX Item "--no-print-gc-sections"
.PD
List all sections removed by garbage collection.  The listing is
printed on stderr.  This option is only effective if garbage
collection has been enabled via the \fB\-\-gc\-sections\fR) option.  The
default behaviour (of not listing the sections that are removed) can
be restored by specifying \fB\-\-no\-print\-gc\-sections\fR on the command
line.
.IP "\fB\-\-print\-output\-format\fR" 4
.IX Item "--print-output-format"
Print the name of the default output format (perhaps influenced by
other command-line options).  This is the string that would appear
in an \f(CW\*(C`OUTPUT_FORMAT\*(C'\fR linker script command.
.IP "\fB\-\-help\fR" 4
d827 1
a827 1
.IP "\fB\-\-target\-help\fR" 4
d830 2
a831 2
.IP "\fB\-Map=\fR\fImapfile\fR" 4
.IX Item "-Map=mapfile"
d834 1
a834 1
.IP "\fB\-\-no\-keep\-memory\fR" 4
d836 2
a837 2
\&\fBld\fR normally optimizes for speed over memory usage by caching the
symbol tables of input files in memory.  This option tells \fBld\fR to
d839 1
a839 1
necessary.  This may be required if \fBld\fR runs out of memory space
d841 1
a841 1
.IP "\fB\-\-no\-undefined\fR" 4
d843 1
a843 2
.PD 0
.IP "\fB\-z defs\fR" 4
d845 4
a848 16
.PD
Report unresolved symbol references from regular object files.  This
is done even if the linker is creating a non-symbolic shared library.
The switch \fB\-\-[no\-]allow\-shlib\-undefined\fR controls the
behaviour for reporting unresolved references found in shared
libraries being linked in.
.IP "\fB\-\-allow\-multiple\-definition\fR" 4
.IX Item "--allow-multiple-definition"
.PD 0
.IP "\fB\-z muldefs\fR" 4
.IX Item "-z muldefs"
.PD
Normally when a symbol is defined multiple times, the linker will
report a fatal error. These options allow multiple definitions and the
first definition will be used.
.IP "\fB\-\-allow\-shlib\-undefined\fR" 4
d850 11
a860 47
.PD 0
.IP "\fB\-\-no\-allow\-shlib\-undefined\fR" 4
.IX Item "--no-allow-shlib-undefined"
.PD
Allows or disallows undefined symbols in shared libraries.
This switch is similar to \fB\-\-no\-undefined\fR except that it
determines the behaviour when the undefined symbols are in a
shared library rather than a regular object file.  It does not affect
how undefined symbols in regular object files are handled.
.Sp
The default behaviour is to report errors for any undefined symbols
referenced in shared libraries if the linker is being used to create
an executable, but to allow them if the linker is being used to create
a shared library.
.Sp
The reasons for allowing undefined symbol references in shared
libraries specified at link time are that:
.RS 4
.IP "\(bu" 4
A shared library specified at link time may not be the same as the one
that is available at load time, so the symbol might actually be
resolvable at load time.
.IP "\(bu" 4
There are some operating systems, eg BeOS and \s-1HPPA\s0, where undefined
symbols in shared libraries are normal.
.Sp
The BeOS kernel for example patches shared libraries at load time to
select whichever function is most appropriate for the current
architecture.  This is used, for example, to dynamically select an
appropriate memset function.
.RE
.RS 4
.RE
.IP "\fB\-\-no\-undefined\-version\fR" 4
.IX Item "--no-undefined-version"
Normally when a symbol has an undefined version, the linker will ignore
it. This option disallows symbols with undefined version and a fatal error
will be issued instead.
.IP "\fB\-\-default\-symver\fR" 4
.IX Item "--default-symver"
Create and use a default symbol version (the soname) for unversioned
exported symbols.
.IP "\fB\-\-default\-imported\-symver\fR" 4
.IX Item "--default-imported-symver"
Create and use a default symbol version (the soname) for unversioned
imported symbols.
.IP "\fB\-\-no\-warn\-mismatch\fR" 4
d862 1
a862 1
Normally \fBld\fR will give an error if you try to link together input
d865 1
a865 1
This option tells \fBld\fR that it should silently permit such possible
d869 1
a869 5
.IP "\fB\-\-no\-warn\-search\-mismatch\fR" 4
.IX Item "--no-warn-search-mismatch"
Normally \fBld\fR will give a warning if it finds an incompatible
library during a library search.  This option silences the warning.
.IP "\fB\-\-no\-whole\-archive\fR" 4
d871 1
a871 1
Turn off the effect of the \fB\-\-whole\-archive\fR option for subsequent
d873 1
a873 1
.IP "\fB\-\-noinhibit\-exec\fR" 4
d879 7
a885 12
.IP "\fB\-nostdlib\fR" 4
.IX Item "-nostdlib"
Only search library directories explicitly specified on the
command line.  Library directories specified in linker scripts
(including linker scripts specified on the command line) are ignored.
.IP "\fB\-\-oformat=\fR\fIoutput-format\fR" 4
.IX Item "--oformat=output-format"
\&\fBld\fR may be configured to support more than one kind of object
file.  If your \fBld\fR is configured this way, you can use the
\&\fB\-\-oformat\fR option to specify the binary format for the output
object file.  Even when \fBld\fR is configured to support alternative
object formats, you don't usually need to specify this, as \fBld\fR
d891 2
a892 14
this option overrides it.
.IP "\fB\-pie\fR" 4
.IX Item "-pie"
.PD 0
.IP "\fB\-\-pic\-executable\fR" 4
.IX Item "--pic-executable"
.PD
Create a position independent executable.  This is currently only supported on
\&\s-1ELF\s0 platforms.  Position independent executables are similar to shared
libraries in that they are relocated by the dynamic linker to the virtual
address the \s-1OS\s0 chooses for them (which can vary between invocations).  Like
normal dynamically linked executables they can be executed and symbols
defined in the executable cannot be overridden by shared libraries.
.IP "\fB\-qmagic\fR" 4
d895 1
a895 1
.IP "\fB\-Qy\fR" 4
d898 1
a898 1
.IP "\fB\-\-relax\fR" 4
a899 4
.PD 0
.IP "\fB\-\-no\-relax\fR" 4
.IX Item "--no-relax"
.PD
d903 4
a906 5
On some platforms the \fB\-\-relax\fR option performs target specific,
global optimizations that become possible when the linker resolves
addressing in the program, such as relaxing address modes,
synthesizing new instructions, selecting shorter version of current
instructions, and combinig constant values.
d910 2
a911 2
This is known to be the case for the Matsushita \s-1MN10200\s0 and \s-1MN10300\s0
family of processors.
d913 1
a913 1
On platforms where this is not supported, \fB\-\-relax\fR is accepted,
d915 2
a916 5
.Sp
On platforms where \fB\-\-relax\fR is accepted the option
\&\fB\-\-no\-relax\fR can be used to disable the feature.
.IP "\fB\-\-retain\-symbols\-file=\fR\fIfilename\fR" 4
.IX Item "--retain-symbols-file=filename"
d924 1
a924 1
\&\fB\-\-retain\-symbols\-file\fR does \fInot\fR discard undefined symbols,
d927 1
a927 1
You may only specify \fB\-\-retain\-symbols\-file\fR once in the command
d929 2
a930 2
.IP "\fB\-rpath=\fR\fIdir\fR" 4
.IX Item "-rpath=dir"
d932 1
a932 1
linking an \s-1ELF\s0 executable with shared objects.  All \fB\-rpath\fR
d934 1
a934 1
them to locate shared objects at runtime.  The \fB\-rpath\fR option is
d937 1
a937 1
\&\fB\-rpath\-link\fR option.  If \fB\-rpath\fR is not used when linking an
d941 1
a941 1
The \fB\-rpath\fR option may also be used on SunOS.  By default, on
d943 5
a947 5
\&\fB\-L\fR options it is given.  If a \fB\-rpath\fR option is used, the
runtime search path will be formed exclusively using the \fB\-rpath\fR
options, ignoring the \fB\-L\fR options.  This can be useful when using
gcc, which adds many \fB\-L\fR options which may be on \s-1NFS\s0 mounted
file systems.
d949 1
a949 1
For compatibility with other \s-1ELF\s0 linkers, if the \fB\-R\fR option is
d951 3
a953 3
the \fB\-rpath\fR option.
.IP "\fB\-rpath\-link=\fR\fIdir\fR" 4
.IX Item "-rpath-link=dir"
d961 1
a961 1
explicitly.  In such a case, the \fB\-rpath\-link\fR option
d963 1
a963 1
\&\fB\-rpath\-link\fR option may specify a sequence of directory names
d973 1
a973 1
libraries:
d975 19
a993 21
.IP "1." 4
Any directories specified by \fB\-rpath\-link\fR options.
.IP "2." 4
Any directories specified by \fB\-rpath\fR options.  The difference
between \fB\-rpath\fR and \fB\-rpath\-link\fR is that directories
specified by \fB\-rpath\fR options are included in the executable and
used at runtime, whereas the \fB\-rpath\-link\fR option is only effective
at link time. Searching \fB\-rpath\fR in this way is only supported
by native linkers and cross linkers which have been configured with
the \fB\-\-with\-sysroot\fR option.
.IP "3." 4
On an \s-1ELF\s0 system, for native linkers, if the \fB\-rpath\fR and
\&\fB\-rpath\-link\fR options were not used, search the contents of the
environment variable \f(CW\*(C`LD_RUN_PATH\*(C'\fR.
.IP "4." 4
On SunOS, if the \fB\-rpath\fR option was not used, search any
directories specified using \fB\-L\fR options.
.IP "5." 4
For a native linker, the search the contents of the environment
variable \f(CW\*(C`LD_LIBRARY_PATH\*(C'\fR.
.IP "6." 4
d998 1
a998 1
.IP "7." 4
d1000 1
a1000 1
.IP "8." 4
d1009 1
a1009 1
.IP "\fB\-shared\fR" 4
d1011 1
a1011 2
.PD 0
.IP "\fB\-Bshareable\fR" 4
a1012 1
.PD
d1015 1
a1015 1
shared library if the \fB\-e\fR option is not used and there are
d1017 1
a1017 1
.IP "\fB\-\-sort\-common\fR" 4
d1019 8
a1026 23
.PD 0
.IP "\fB\-\-sort\-common=ascending\fR" 4
.IX Item "--sort-common=ascending"
.IP "\fB\-\-sort\-common=descending\fR" 4
.IX Item "--sort-common=descending"
.PD
This option tells \fBld\fR to sort the common symbols by alignment in
ascending or descending order when it places them in the appropriate output
sections.  The symbol alignments considered are sixteen-byte or larger,
eight-byte, four-byte, two-byte, and one-byte. This is to prevent gaps
between symbols due to alignment constraints.  If no sorting order is
specified, then descending order is assumed.
.IP "\fB\-\-sort\-section=name\fR" 4
.IX Item "--sort-section=name"
This option will apply \f(CW\*(C`SORT_BY_NAME\*(C'\fR to all wildcard section
patterns in the linker script.
.IP "\fB\-\-sort\-section=alignment\fR" 4
.IX Item "--sort-section=alignment"
This option will apply \f(CW\*(C`SORT_BY_ALIGNMENT\*(C'\fR to all wildcard section
patterns in the linker script.
.IP "\fB\-\-split\-by\-file[=\fR\fIsize\fR\fB]\fR" 4
.IX Item "--split-by-file[=size]"
Similar to \fB\-\-split\-by\-reloc\fR but creates a new output section for
d1029 2
a1030 2
.IP "\fB\-\-split\-by\-reloc[=\fR\fIcount\fR\fB]\fR" 4
.IX Item "--split-by-reloc[=count]"
d1041 1
a1041 1
.IP "\fB\-\-stats\fR" 4
d1045 1
a1045 6
.IP "\fB\-\-sysroot=\fR\fIdirectory\fR" 4
.IX Item "--sysroot=directory"
Use \fIdirectory\fR as the location of the sysroot, overriding the
configure-time default.  This option is only supported by linkers
that were configured using \fB\-\-with\-sysroot\fR.
.IP "\fB\-\-traditional\-format\fR" 4
d1047 2
a1048 2
For some targets, the output of \fBld\fR is different in some ways from
the output of some existing linker.  This switch requests \fBld\fR to
d1051 1
a1051 1
For example, on SunOS, \fBld\fR combines duplicate entries in the
d1055 1
a1055 1
trouble).  The \fB\-\-traditional\-format\fR switch tells \fBld\fR to not
d1057 2
a1058 2
.IP "\fB\-\-section\-start=\fR\fIsectionname\fR\fB=\fR\fIorg\fR" 4
.IX Item "--section-start=sectionname=org"
d1067 13
a1079 48
sign ("\fB=\fR"), and \fIorg\fR.
.IP "\fB\-Tbss=\fR\fIorg\fR" 4
.IX Item "-Tbss=org"
.PD 0
.IP "\fB\-Tdata=\fR\fIorg\fR" 4
.IX Item "-Tdata=org"
.IP "\fB\-Ttext=\fR\fIorg\fR" 4
.IX Item "-Ttext=org"
.PD
Same as \fB\-\-section\-start\fR, with \f(CW\*(C`.bss\*(C'\fR, \f(CW\*(C`.data\*(C'\fR or
\&\f(CW\*(C`.text\*(C'\fR as the \fIsectionname\fR.
.IP "\fB\-Ttext\-segment=\fR\fIorg\fR" 4
.IX Item "-Ttext-segment=org"
When creating an \s-1ELF\s0 executable or shared object, it will set the address
of the first byte of the text segment.
.IP "\fB\-\-unresolved\-symbols=\fR\fImethod\fR" 4
.IX Item "--unresolved-symbols=method"
Determine how to handle unresolved symbols.  There are four possible
values for \fBmethod\fR:
.RS 4
.IP "\fBignore-all\fR" 4
.IX Item "ignore-all"
Do not report any unresolved symbols.
.IP "\fBreport-all\fR" 4
.IX Item "report-all"
Report all unresolved symbols.  This is the default.
.IP "\fBignore-in-object-files\fR" 4
.IX Item "ignore-in-object-files"
Report unresolved symbols that are contained in shared libraries, but
ignore them if they come from regular object files.
.IP "\fBignore-in-shared-libs\fR" 4
.IX Item "ignore-in-shared-libs"
Report unresolved symbols that come from regular object files, but
ignore them if they come from shared libraries.  This can be useful
when creating a dynamic binary and it is known that all the shared
libraries that it should be referencing are included on the linker's
command line.
.RE
.RS 4
.Sp
The behaviour for shared libraries on their own can also be controlled
by the \fB\-\-[no\-]allow\-shlib\-undefined\fR option.
.Sp
Normally the linker will generate an error message for each reported
unresolved symbol but the option \fB\-\-warn\-unresolved\-symbols\fR
can change this to a warning.
.RE
.IP "\fB\-\-dll\-verbose\fR" 4
d1081 3
a1083 5
.PD 0
.IP "\fB\-\-verbose[=\fR\fI\s-1NUMBER\s0\fR\fB]\fR" 4
.IX Item "--verbose[=NUMBER]"
.PD
Display the version number for \fBld\fR and list the linker emulations
d1085 2
a1086 3
the linker script being used by the linker. If the optional \fI\s-1NUMBER\s0\fR
argument > 1, plugin symbol status will also be displayed.
.IP "\fB\-\-version\-script=\fR\fIversion-scriptfile\fR" 4
d1090 3
a1092 6
about the version hierarchy for the library being created.  This option
is only fully supported on \s-1ELF\s0 platforms which support shared libraries;
see \fB\s-1VERSION\s0\fR.  It is partially supported on \s-1PE\s0 platforms, which can
use version scripts to filter symbol visibility in auto-export mode: any
symbols marked \fBlocal\fR in the version script will not be exported.
.IP "\fB\-\-warn\-common\fR" 4
d1095 1
a1095 1
a symbol definition.  Unix linkers allow this somewhat sloppy practise,
d1098 1
a1098 1
Unfortunately, some C libraries use this practise, so you may get some
d1103 1
a1103 1
.IP "\fBint i = 1;\fR" 4
d1107 1
a1107 1
.IP "\fBextern int i;\fR" 4
d1112 1
a1112 1
.IP "\fBint i;\fR" 4
d1123 1
a1123 1
The \fB\-\-warn\-common\fR option can produce five kinds of warnings.
d1128 3
a1130 1
.IP "1." 4
d1135 1
a1135 1
\&        <file>(<section>): warning: common of \`<symbol>\*(Aq
d1137 1
a1137 1
\&        <file>(<section>): warning: defined here
d1139 1
a1139 1
.IP "2." 4
d1145 1
a1145 1
\&        <file>(<section>): warning: definition of \`<symbol>\*(Aq
d1147 1
a1147 1
\&        <file>(<section>): warning: common is here
d1149 1
a1149 1
.IP "3." 4
d1153 3
a1155 3
\&        <file>(<section>): warning: multiple common
\&           of \`<symbol>\*(Aq
\&        <file>(<section>): warning: previous common is here
d1157 1
a1157 1
.IP "4." 4
d1161 1
a1161 1
\&        <file>(<section>): warning: common of \`<symbol>\*(Aq
d1163 1
a1163 1
\&        <file>(<section>): warning: larger common is here
d1165 1
a1165 1
.IP "5." 4
d1171 1
a1171 1
\&        <file>(<section>): warning: common of \`<symbol>\*(Aq
d1173 1
a1173 1
\&        <file>(<section>): warning: smaller common is here
d1178 1
a1178 1
.IP "\fB\-\-warn\-constructors\fR" 4
d1183 1
a1183 1
.IP "\fB\-\-warn\-multiple\-gp\fR" 4
d1196 1
a1196 1
.IP "\fB\-\-warn\-once\fR" 4
d1200 1
a1200 1
.IP "\fB\-\-warn\-section\-align\fR" 4
d1207 1
a1207 16
.IP "\fB\-\-warn\-shared\-textrel\fR" 4
.IX Item "--warn-shared-textrel"
Warn if the linker adds a \s-1DT_TEXTREL\s0 to a shared object.
.IP "\fB\-\-warn\-alternate\-em\fR" 4
.IX Item "--warn-alternate-em"
Warn if an object has alternate \s-1ELF\s0 machine code.
.IP "\fB\-\-warn\-unresolved\-symbols\fR" 4
.IX Item "--warn-unresolved-symbols"
If the linker is going to report an unresolved symbol (see the option
\&\fB\-\-unresolved\-symbols\fR) it will normally generate an error.
This option makes it generate a warning instead.
.IP "\fB\-\-error\-unresolved\-symbols\fR" 4
.IX Item "--error-unresolved-symbols"
This restores the linker's default behaviour of generating errors when
it is reporting unresolved symbols.
.IP "\fB\-\-whole\-archive\fR" 4
d1210 1
a1210 1
\&\fB\-\-whole\-archive\fR option, include every object file in the archive
d1217 2
a1218 2
about this option, so you have to use \fB\-Wl,\-whole\-archive\fR.
Second, don't forget to use \fB\-Wl,\-no\-whole\-archive\fR after your
d1221 2
a1222 2
.IP "\fB\-\-wrap=\fR\fIsymbol\fR" 4
.IX Item "--wrap=symbol"
d1237 1
a1237 1
\&        _\|_wrap_malloc (size_t c)
d1239 2
a1240 2
\&          printf ("malloc called with %zu\en", c);
\&          return _\|_real_malloc (c);
d1243 1
a1243 2
.Sp
If you link other code with this file using \fB\-\-wrap malloc\fR, then
d1249 1
a1249 1
links without the \fB\-\-wrap\fR option will succeed.  If you do this,
d1253 1
a1253 10
.IP "\fB\-\-eh\-frame\-hdr\fR" 4
.IX Item "--eh-frame-hdr"
Request creation of \f(CW\*(C`.eh_frame_hdr\*(C'\fR section and \s-1ELF\s0
\&\f(CW\*(C`PT_GNU_EH_FRAME\*(C'\fR segment header.
.IP "\fB\-\-no\-ld\-generated\-unwind\-info\fR" 4
.IX Item "--no-ld-generated-unwind-info"
Request creation of \f(CW\*(C`.eh_frame\*(C'\fR unwind info for linker
generated code sections like \s-1PLT\s0.  This option is on by default
if linker generated unwind info is supported.
.IP "\fB\-\-enable\-new\-dtags\fR" 4
d1255 1
a1255 2
.PD 0
.IP "\fB\-\-disable\-new\-dtags\fR" 4
a1256 1
.PD
d1259 2
a1260 2
\&\fB\-\-enable\-new\-dtags\fR, the dynamic tags will be created as needed.
If you specify \fB\-\-disable\-new\-dtags\fR, no new dynamic tags will be
a1262 54
.IP "\fB\-\-hash\-size=\fR\fInumber\fR" 4
.IX Item "--hash-size=number"
Set the default size of the linker's hash tables to a prime number
close to \fInumber\fR.  Increasing this value can reduce the length of
time it takes the linker to perform its tasks, at the expense of
increasing the linker's memory requirements.  Similarly reducing this
value can reduce the memory requirements at the expense of speed.
.IP "\fB\-\-hash\-style=\fR\fIstyle\fR" 4
.IX Item "--hash-style=style"
Set the type of linker's hash table(s).  \fIstyle\fR can be either
\&\f(CW\*(C`sysv\*(C'\fR for classic \s-1ELF\s0 \f(CW\*(C`.hash\*(C'\fR section, \f(CW\*(C`gnu\*(C'\fR for
new style \s-1GNU\s0 \f(CW\*(C`.gnu.hash\*(C'\fR section or \f(CW\*(C`both\*(C'\fR for both
the classic \s-1ELF\s0 \f(CW\*(C`.hash\*(C'\fR and new style \s-1GNU\s0 \f(CW\*(C`.gnu.hash\*(C'\fR
hash tables.  The default is \f(CW\*(C`sysv\*(C'\fR.
.IP "\fB\-\-reduce\-memory\-overheads\fR" 4
.IX Item "--reduce-memory-overheads"
This option reduces memory requirements at ld runtime, at the expense of
linking speed.  This was introduced to select the old O(n^2) algorithm
for link map file generation, rather than the new O(n) algorithm which uses
about 40% more memory for symbol storage.
.Sp
Another effect of the switch is to set the default hash table size to
1021, which again saves memory at the cost of lengthening the linker's
run time.  This is not done however if the \fB\-\-hash\-size\fR switch
has been used.
.Sp
The \fB\-\-reduce\-memory\-overheads\fR switch may be also be used to
enable other tradeoffs in future versions of the linker.
.IP "\fB\-\-build\-id\fR" 4
.IX Item "--build-id"
.PD 0
.IP "\fB\-\-build\-id=\fR\fIstyle\fR" 4
.IX Item "--build-id=style"
.PD
Request creation of \f(CW\*(C`.note.gnu.build\-id\*(C'\fR \s-1ELF\s0 note section.
The contents of the note are unique bits identifying this linked
file.  \fIstyle\fR can be \f(CW\*(C`uuid\*(C'\fR to use 128 random bits,
\&\f(CW\*(C`sha1\*(C'\fR to use a 160\-bit \s-1SHA1\s0 hash on the normative
parts of the output contents, \f(CW\*(C`md5\*(C'\fR to use a 128\-bit
\&\s-1MD5\s0 hash on the normative parts of the output contents, or
\&\f(CW\*(C`0x\f(CIhexstring\f(CW\*(C'\fR to use a chosen bit string specified as
an even number of hexadecimal digits (\f(CW\*(C`\-\*(C'\fR and \f(CW\*(C`:\*(C'\fR
characters between digit pairs are ignored).  If \fIstyle\fR is
omitted, \f(CW\*(C`sha1\*(C'\fR is used.
.Sp
The \f(CW\*(C`md5\*(C'\fR and \f(CW\*(C`sha1\*(C'\fR styles produces an identifier
that is always the same in an identical output file, but will be
unique among all nonidentical output files.  It is not intended
to be compared as a checksum for the file's contents.  A linked
file may be changed later by other tools, but the build \s-1ID\s0 bit
string identifying the original linked file does not change.
.Sp
Passing \f(CW\*(C`none\*(C'\fR for \fIstyle\fR disables the setting from any
\&\f(CW\*(C`\-\-build\-id\*(C'\fR options earlier on the command line.
d1264 1
a1264 1
The i386 \s-1PE\s0 linker supports the \fB\-shared\fR option, which causes
d1277 1
a1277 1
.IP "\fB\-\-add\-stdcall\-alias\fR" 4
d1281 1
a1281 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-base\-file\fR \fIfile\fR" 4
d1286 1
a1286 2
[This is an i386 \s-1PE\s0 specific option]
.IP "\fB\-\-dll\fR" 4
d1289 1
a1289 1
\&\fB\-shared\fR or specify a \f(CW\*(C`LIBRARY\*(C'\fR in a given \f(CW\*(C`.def\*(C'\fR
d1291 1
a1291 25
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-long\-section\-names\fR" 4
.IX Item "--enable-long-section-names"
.PD 0
.IP "\fB\-\-disable\-long\-section\-names\fR" 4
.IX Item "--disable-long-section-names"
.PD
The \s-1PE\s0 variants of the Coff object format add an extension that permits
the use of section names longer than eight characters, the normal limit
for Coff.  By default, these names are only allowed in object files, as
fully-linked executable images do not carry the Coff string table required
to support the longer names.  As a \s-1GNU\s0 extension, it is possible to
allow their use in executable images as well, or to (probably pointlessly!)
disallow it in object files, by using these two options.  Executable images
generated with these long section names are slightly non-standard, carrying
as they do a string table, and may generate confusing output when examined
with non-GNU PE-aware tools, such as file viewers and dumpers.  However, 
\&\s-1GDB\s0 relies on the use of \s-1PE\s0 long section names to find Dwarf\-2 debug 
information sections in an executable image at runtime, and so if neither
option is specified on the command-line, \fBld\fR will enable long
section names, overriding the default and technically correct behaviour,
when it finds the presence of debug information while linking an executable
image and not stripping symbols.
[This option is valid for all \s-1PE\s0 targeted ports of the linker]
.IP "\fB\-\-enable\-stdcall\-fixup\fR" 4
d1293 1
a1293 2
.PD 0
.IP "\fB\-\-disable\-stdcall\-fixup\fR" 4
a1294 1
.PD
d1304 1
a1304 1
to be usable.  If you specify \fB\-\-enable\-stdcall\-fixup\fR, this
d1306 1
a1306 1
\&\fB\-\-disable\-stdcall\-fixup\fR, this feature is disabled and such
d1308 1
a1308 11
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-leading\-underscore\fR" 4
.IX Item "--leading-underscore"
.PD 0
.IP "\fB\-\-no\-leading\-underscore\fR" 4
.IX Item "--no-leading-underscore"
.PD
For most targets default symbol-prefix is an underscore and is defined
in target's description. By this option it is possible to
disable/enable the default underscore symbol-prefix.
.IP "\fB\-\-export\-all\-symbols\fR" 4
d1316 3
a1318 18
\&\f(CW\*(C`DllEntryPoint@@0\*(C'\fR, \f(CW\*(C`DllMainCRTStartup@@12\*(C'\fR, and
\&\f(CW\*(C`impure_ptr\*(C'\fR will not be automatically
exported.  Also, symbols imported from other DLLs will not be
re-exported, nor will symbols specifying the \s-1DLL\s0's internal layout
such as those beginning with \f(CW\*(C`_head_\*(C'\fR or ending with
\&\f(CW\*(C`_iname\*(C'\fR.  In addition, no symbols from \f(CW\*(C`libgcc\*(C'\fR,
\&\f(CW\*(C`libstd++\*(C'\fR, \f(CW\*(C`libmingw32\*(C'\fR, or \f(CW\*(C`crtX.o\*(C'\fR will be exported.
Symbols whose names begin with \f(CW\*(C`_\|_rtti_\*(C'\fR or \f(CW\*(C`_\|_builtin_\*(C'\fR will
not be exported, to help with \*(C+ DLLs.  Finally, there is an
extensive list of cygwin-private symbols that are not exported
(obviously, this applies on when building DLLs for cygwin targets).
These cygwin-excludes are: \f(CW\*(C`_cygwin_dll_entry@@12\*(C'\fR,
\&\f(CW\*(C`_cygwin_crt0_common@@8\*(C'\fR, \f(CW\*(C`_cygwin_noncygwin_dll_entry@@12\*(C'\fR,
\&\f(CW\*(C`_fmode\*(C'\fR, \f(CW\*(C`_impure_ptr\*(C'\fR, \f(CW\*(C`cygwin_attach_dll\*(C'\fR,
\&\f(CW\*(C`cygwin_premain0\*(C'\fR, \f(CW\*(C`cygwin_premain1\*(C'\fR, \f(CW\*(C`cygwin_premain2\*(C'\fR,
\&\f(CW\*(C`cygwin_premain3\*(C'\fR, and \f(CW\*(C`environ\*(C'\fR.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-exclude\-symbols\fR \fIsymbol\fR\fB,\fR\fIsymbol\fR\fB,...\fR" 4
d1322 1
a1322 6
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-exclude\-all\-symbols\fR" 4
.IX Item "--exclude-all-symbols"
Specifies no symbols should be automatically exported.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-file\-alignment\fR" 4
d1327 1
a1327 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-heap\fR \fIreserve\fR" 4
d1329 1
a1329 2
.PD 0
.IP "\fB\-\-heap\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
d1331 2
a1332 3
.PD
Specify the number of bytes of memory to reserve (and optionally commit)
to be used as heap for this program.  The default is 1Mb reserved, 4K
d1334 1
a1334 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-image\-base\fR \fIvalue\fR" 4
d1342 1
a1342 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-kill\-at\fR" 4
d1346 1
a1346 10
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-large\-address\-aware\fR" 4
.IX Item "--large-address-aware"
If given, the appropriate bit in the \*(L"Characteristics\*(R" field of the \s-1COFF\s0
header is set to indicate that this executable supports virtual addresses
greater than 2 gigabytes.  This should be used in conjunction with the /3GB
or /USERVA=\fIvalue\fR megabytes switch in the \*(L"[operating systems]\*(R"
section of the \s-1BOOT\s0.INI.  Otherwise, this bit has no effect.
[This option is specific to \s-1PE\s0 targeted ports of the linker]
.IP "\fB\-\-major\-image\-version\fR \fIvalue\fR" 4
d1349 1
a1349 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-major\-os\-version\fR \fIvalue\fR" 4
d1352 1
a1352 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-major\-subsystem\-version\fR \fIvalue\fR" 4
d1355 1
a1355 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-image\-version\fR \fIvalue\fR" 4
d1358 1
a1358 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-os\-version\fR \fIvalue\fR" 4
d1361 1
a1361 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-subsystem\-version\fR \fIvalue\fR" 4
d1364 1
a1364 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-output\-def\fR \fIfile\fR" 4
d1371 1
a1371 188
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-out\-implib\fR \fIfile\fR" 4
.IX Item "--out-implib file"
The linker will create the file \fIfile\fR which will contain an
import lib corresponding to the \s-1DLL\s0 the linker is generating. This
import lib (which should be called \f(CW\*(C`*.dll.a\*(C'\fR or \f(CW\*(C`*.a\*(C'\fR
may be used to link clients against the generated \s-1DLL\s0; this behaviour
makes it possible to skip a separate \f(CW\*(C`dlltool\*(C'\fR import library
creation step.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-auto\-image\-base\fR" 4
.IX Item "--enable-auto-image-base"
Automatically choose the image base for DLLs, unless one is specified
using the \f(CW\*(C`\-\-image\-base\*(C'\fR argument.  By using a hash generated
from the dllname to create unique image bases for each \s-1DLL\s0, in-memory
collisions and relocations which can delay program execution are
avoided.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-auto\-image\-base\fR" 4
.IX Item "--disable-auto-image-base"
Do not automatically generate a unique image base.  If there is no
user-specified image base (\f(CW\*(C`\-\-image\-base\*(C'\fR) then use the platform
default.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-dll\-search\-prefix\fR \fIstring\fR" 4
.IX Item "--dll-search-prefix string"
When linking dynamically to a dll without an import library,
search for \f(CW\*(C`<string><basename>.dll\*(C'\fR in preference to
\&\f(CW\*(C`lib<basename>.dll\*(C'\fR. This behaviour allows easy distinction
between DLLs built for the various \*(L"subplatforms\*(R": native, cygwin,
uwin, pw, etc.  For instance, cygwin DLLs typically use
\&\f(CW\*(C`\-\-dll\-search\-prefix=cyg\*(C'\fR.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-auto\-import\fR" 4
.IX Item "--enable-auto-import"
Do sophisticated linking of \f(CW\*(C`_symbol\*(C'\fR to \f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for
\&\s-1DATA\s0 imports from DLLs, and create the necessary thunking symbols when
building the import libraries with those \s-1DATA\s0 exports. Note: Use of the
\&'auto\-import' extension will cause the text section of the image file
to be made writable. This does not conform to the PE-COFF format
specification published by Microsoft.
.Sp
Note \- use of the 'auto\-import' extension will also cause read only
data which would normally be placed into the .rdata section to be
placed into the .data section instead.  This is in order to work
around a problem with consts that is described here:
http://www.cygwin.com/ml/cygwin/2004\-09/msg01101.html
.Sp
Using 'auto\-import' generally will 'just work' \*(-- but sometimes you may
see this message:
.Sp
"variable '<var>' can't be auto-imported. Please read the
documentation for ld's \f(CW\*(C`\-\-enable\-auto\-import\*(C'\fR for details."
.Sp
This message occurs when some (sub)expression accesses an address
ultimately given by the sum of two constants (Win32 import tables only
allow one).  Instances where this may occur include accesses to member
fields of struct variables imported from a \s-1DLL\s0, as well as using a
constant index into an array variable imported from a \s-1DLL\s0.  Any
multiword variable (arrays, structs, long long, etc) may trigger
this error condition.  However, regardless of the exact data type
of the offending exported variable, ld will always detect it, issue
the warning, and exit.
.Sp
There are several ways to address this difficulty, regardless of the
data type of the exported variable:
.Sp
One way is to use \-\-enable\-runtime\-pseudo\-reloc switch. This leaves the task
of adjusting references in your client code for runtime environment, so
this method works only when runtime environment supports this feature.
.Sp
A second solution is to force one of the 'constants' to be a variable \*(--
that is, unknown and un-optimizable at compile time.  For arrays,
there are two possibilities: a) make the indexee (the array's address)
a variable, or b) make the 'constant' index a variable.  Thus:
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] \-\->
\&           { volatile type *t=extern_array; t[1] }
.Ve
.Sp
or
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] \-\->
\&           { volatile int t=1; extern_array[t] }
.Ve
.Sp
For structs (and most other multiword data types) the only option
is to make the struct itself (or the long long, or the ...) variable:
.Sp
.Vb 3
\&        extern struct s extern_struct;
\&        extern_struct.field \-\->
\&           { volatile struct s *t=&extern_struct; t\->field }
.Ve
.Sp
or
.Sp
.Vb 3
\&        extern long long extern_ll;
\&        extern_ll \-\->
\&          { volatile long long * local_ll=&extern_ll; *local_ll }
.Ve
.Sp
A third method of dealing with this difficulty is to abandon
\&'auto\-import' for the offending symbol and mark it with
\&\f(CW\*(C`_\|_declspec(dllimport)\*(C'\fR.  However, in practise that
requires using compile-time #defines to indicate whether you are
building a \s-1DLL\s0, building client code that will link to the \s-1DLL\s0, or
merely building/linking to a static library.   In making the choice
between the various methods of resolving the 'direct address with
constant offset' problem, you should consider typical real-world usage:
.Sp
Original:
.Sp
.Vb 7
\&        \-\-foo.h
\&        extern int arr[];
\&        \-\-foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
.Sp
Solution 1:
.Sp
.Vb 9
\&        \-\-foo.h
\&        extern int arr[];
\&        \-\-foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          /* This workaround is for win32 and cygwin; do not "optimize" */
\&          volatile int *parr = arr;
\&          printf("%d\en",parr[1]);
\&        }
.Ve
.Sp
Solution 2:
.Sp
.Vb 10
\&        \-\-foo.h
\&        /* Note: auto\-export is assumed (no _\|_declspec(dllexport)) */
\&        #if (defined(_WIN32) || defined(_\|_CYGWIN_\|_)) && \e
\&          !(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))
\&        #define FOO_IMPORT _\|_declspec(dllimport)
\&        #else
\&        #define FOO_IMPORT
\&        #endif
\&        extern FOO_IMPORT int arr[];
\&        \-\-foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
.Sp
A fourth way to avoid this problem is to re-code your
library to use a functional interface rather than a data interface
for the offending variables (e.g. \fIset_foo()\fR and \fIget_foo()\fR accessor
functions).
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-auto\-import\fR" 4
.IX Item "--disable-auto-import"
Do not attempt to do sophisticated linking of \f(CW\*(C`_symbol\*(C'\fR to
\&\f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for \s-1DATA\s0 imports from DLLs.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-runtime\-pseudo\-reloc\fR" 4
.IX Item "--enable-runtime-pseudo-reloc"
If your code contains expressions described in \-\-enable\-auto\-import section,
that is, \s-1DATA\s0 imports from \s-1DLL\s0 with non-zero offset, this switch will create
a vector of 'runtime pseudo relocations' which can be used by runtime
environment to adjust references to such data in your client code.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-runtime\-pseudo\-reloc\fR" 4
.IX Item "--disable-runtime-pseudo-reloc"
Do not create pseudo relocations for non-zero offset \s-1DATA\s0 imports from
DLLs.  This is the default.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-extra\-pe\-debug\fR" 4
.IX Item "--enable-extra-pe-debug"
Show additional debug info related to auto-import symbol thunking.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-section\-alignment\fR" 4
d1375 1
a1375 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-stack\fR \fIreserve\fR" 4
d1377 1
a1377 2
.PD 0
.IP "\fB\-\-stack\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
d1379 2
a1380 3
.PD
Specify the number of bytes of memory to reserve (and optionally commit)
to be used as stack for this program.  The default is 2Mb reserved, 4K
d1382 1
a1382 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-subsystem\fR \fIwhich\fR" 4
d1384 1
a1384 2
.PD 0
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR" 4
d1386 1
a1386 1
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR\fB.\fR\fIminor\fR" 4
a1387 1
.PD
d1390 2
a1391 77
\&\f(CW\*(C`console\*(C'\fR, \f(CW\*(C`posix\*(C'\fR, and \f(CW\*(C`xbox\*(C'\fR.  You may optionally set
the subsystem version also.  Numeric values are also accepted for
\&\fIwhich\fR.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.Sp
The following options set flags in the \f(CW\*(C`DllCharacteristics\*(C'\fR field
of the \s-1PE\s0 file header:
[These options are specific to \s-1PE\s0 targeted ports of the linker]
.IP "\fB\-\-dynamicbase\fR" 4
.IX Item "--dynamicbase"
The image base address may be relocated using address space layout
randomization (\s-1ASLR\s0).  This feature was introduced with \s-1MS\s0 Windows
Vista for i386 \s-1PE\s0 targets.
.IP "\fB\-\-forceinteg\fR" 4
.IX Item "--forceinteg"
Code integrity checks are enforced.
.IP "\fB\-\-nxcompat\fR" 4
.IX Item "--nxcompat"
The image is compatible with the Data Execution Prevention.
This feature was introduced with \s-1MS\s0 Windows \s-1XP\s0 \s-1SP2\s0 for i386 \s-1PE\s0 targets.
.IP "\fB\-\-no\-isolation\fR" 4
.IX Item "--no-isolation"
Although the image understands isolation, do not isolate the image.
.IP "\fB\-\-no\-seh\fR" 4
.IX Item "--no-seh"
The image does not use \s-1SEH\s0. No \s-1SE\s0 handler may be called from
this image.
.IP "\fB\-\-no\-bind\fR" 4
.IX Item "--no-bind"
Do not bind this image.
.IP "\fB\-\-wdmdriver\fR" 4
.IX Item "--wdmdriver"
The driver uses the \s-1MS\s0 Windows Driver Model.
.IP "\fB\-\-tsaware\fR" 4
.IX Item "--tsaware"
The image is Terminal Server aware.
.PP
The C6X uClinux target uses a binary format called \s-1DSBT\s0 to support shared
libraries.  Each shared library in the system needs to have a unique index;
all executables use an index of 0.
.IP "\fB\-\-dsbt\-size\fR \fIsize\fR" 4
.IX Item "--dsbt-size size"
This option sets the number of entires in the \s-1DSBT\s0 of the current executable
or shared library to \fIsize\fR.  The default is to create a table with 64
entries.
.IP "\fB\-\-dsbt\-index\fR \fIindex\fR" 4
.IX Item "--dsbt-index index"
This option sets the \s-1DSBT\s0 index of the current executable or shared library
to \fIindex\fR.  The default is 0, which is appropriate for generating
executables.  If a shared library is generated with a \s-1DSBT\s0 index of 0, the
\&\f(CW\*(C`R_C6000_DSBT_INDEX\*(C'\fR relocs are copied into the output file.
.Sp
The \fB\-\-no\-merge\-exidx\-entries\fR switch disables the merging of adjacent
exidx entries in frame unwind info.
.PP
The 68HC11 and 68HC12 linkers support specific options to control the
memory bank switching mapping and trampoline code generation.
.IP "\fB\-\-no\-trampoline\fR" 4
.IX Item "--no-trampoline"
This option disables the generation of trampoline. By default a trampoline
is generated for each far function which is called using a \f(CW\*(C`jsr\*(C'\fR
instruction (this happens when a pointer to a far function is taken).
.IP "\fB\-\-bank\-window\fR \fIname\fR" 4
.IX Item "--bank-window name"
This option indicates to the linker the name of the memory region in
the \fB\s-1MEMORY\s0\fR specification that describes the memory bank window.
The definition of such region is then used by the linker to compute
paging and addresses within the memory window.
.PP
The following options are supported to control handling of \s-1GOT\s0 generation
when linking for 68K targets.
.IP "\fB\-\-got=\fR\fItype\fR" 4
.IX Item "--got=type"
This option tells the linker which \s-1GOT\s0 generation scheme to use.
\&\fItype\fR should be one of \fBsingle\fR, \fBnegative\fR,
\&\fBmultigot\fR or \fBtarget\fR.  For more information refer to the
Info entry for \fIld\fR.
d1394 2
a1395 3
You can change the behaviour of \fBld\fR with the environment variables
\&\f(CW\*(C`GNUTARGET\*(C'\fR,
\&\f(CW\*(C`LDEMULATION\*(C'\fR and \f(CW\*(C`COLLECT_NO_DEMANGLE\*(C'\fR.
d1398 1
a1398 1
use \fB\-b\fR (or its synonym \fB\-\-format\fR).  Its value should be one
d1400 1
a1400 1
\&\f(CW\*(C`GNUTARGET\*(C'\fR in the environment, \fBld\fR uses the natural format
d1412 1
a1412 1
available emulations with the \fB\-\-verbose\fR or \fB\-V\fR options.  If
d1421 1
a1421 1
may be overridden by the \fB\-\-demangle\fR and \fB\-\-no\-demangle\fR
d1430 1
a1430 3
Copyright (c) 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free
Software Foundation, Inc.
d1433 1
a1433 1
under the terms of the \s-1GNU\s0 Free Documentation License, Version 1.3
@


1.12.20.2
log
@bfd/
2013-03-25  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.23.2
	* Makefile.am (RELEASE): Set.
	* configure, Makefile.in: Regenerate.
@
text
@d127 1
a127 1
.TH LD 1 "2013-03-25" "binutils-2.23.2" "GNU Development Tools"
d287 1
a287 1
it will add a corresponding \f(CW\*(C`DT_DEPAUDIT\*(C'\fR entry in the output file.
d1117 1
a1117 1
This option affects the treatment of dynamic libraries referred to
d1237 1
a1237 1
\&\fB\-r\fR).  In this case the root of symbols kept must be explicitly
a1616 5
.IP "\fB\-Trodata\-segment=\fR\fIorg\fR" 4
.IX Item "-Trodata-segment=org"
When creating an \s-1ELF\s0 executable or shared object for a target where
the read-only data is in its own segment separate from the executable
text, it will set the address of the first byte of the read-only data segment.
d1964 2
a1965 2
with non-GNU PE-aware tools, such as file viewers and dumpers.  However,
\&\s-1GDB\s0 relies on the use of \s-1PE\s0 long section names to find Dwarf\-2 debug
@


1.12.18.1
log
@bfd/
2009-10-16  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.20
	* Makefile.am (RELEASE): Set.
	* configure, Makefile.in: Regenerate.
@
text
@d1 2
a2 1
.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.05)
d5 1
a5 1
.\" ========================================================================
d18 6
d31 1
d36 5
a40 5
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
d49 2
a50 2
.    ds C` ""
.    ds C' ""
d59 5
a63 9
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
d66 1
a66 1
..
d70 4
a73 4
.el \{\
.    de IX
..
.\}
d77 1
d137 1
a137 1
.\" ========================================================================
d140 2
a141 5
.TH LD 1 "2009-10-16" "binutils-2.20" "GNU Development Tools"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
d143 1
a143 1
ld \- The GNU linker
d146 1
a146 1
ld [\fBoptions\fR] \fIobjfile\fR ...
d149 1
a149 1
\&\fBld\fR combines a number of object and archive files, relocates
d151 1
a151 1
compiling a program is to run \fBld\fR.
d153 1
a153 1
\&\fBld\fR accepts Linker Command Language files written in
d157 4
a160 3
This man page does not describe the command language; see the
\&\fBld\fR entry in \f(CW\*(C`info\*(C'\fR for full details on the command
language and on other aspects of the \s-1GNU\s0 linker.
d162 2
a163 2
This version of \fBld\fR uses the general purpose \s-1BFD\s0 libraries
to operate on object files. This allows \fBld\fR to read, combine, and
d166 1
a166 1
available kind of object file.
d171 1
a171 1
\&\fBld\fR continues executing, allowing you to identify other errors
d174 1
a174 1
The \s-1GNU\s0 linker \fBld\fR is meant to cover a broad range of situations,
d181 1
a181 1
For instance, a frequent use of \fBld\fR is to link standard Unix
d186 1
a186 1
\&        ld \-o <output> /lib/crt0.o hello.o \-lc
d188 1
a188 2
.PP
This tells \fBld\fR to produce a file called \fIoutput\fR as the
d193 1
a193 1
Some of the command-line options to \fBld\fR may be specified at any
d214 1
a214 1
If the linker cannot recognize the format of an object file, it will
d220 5
a224 5
\&\f(CW\*(C`INPUT\*(C'\fR or \f(CW\*(C`GROUP\*(C'\fR to load other objects.  Specifying a
script in this way merely augments the main linker script, with the
extra commands placed after the main script; use the \fB\-T\fR option
to replace the default linker script entirely, but note the effect of
the \f(CW\*(C`INSERT\*(C'\fR command.
d232 2
a233 2
precede the option name; for example, \fB\-trace\-symbol\fR and
\&\fB\-\-trace\-symbol\fR are equivalent.  Note\-\-\-there is one exception to
d235 1
a235 1
only be preceded by two dashes.  This is to reduce confusion with the
d237 1
a237 1
name to \fBmagic\fR whereas \fB\-\-omagic\fR sets the \s-1NMAGIC\s0 flag on the
d243 1
a243 1
\&\fB\-\-trace\-symbol foo\fR and \fB\-\-trace\-symbol=foo\fR are equivalent.
d247 2
a248 2
Note\-\-\-if the linker is being invoked indirectly, via a compiler driver
(e.g. \fBgcc\fR) then all the linker command line options should be
d253 1
a253 1
\&          gcc \-Wl,\-\-start\-group foo.o bar.o \-Wl,\-\-end\-group
a254 1
.PP
d256 1
a256 10
silently drop the linker options, resulting in a bad link.  Confusion
may also arise when passing options that require values through a
driver, as the use of a space between option and argument acts as
a separator, and causes the driver to pass only the option to the linker
and the argument to the compiler.  In this case, it is simplest to use
the joined forms of both single\- and multiple-letter options, such as:
.PP
.Vb 1
\&          gcc foo.o bar.o \-Wl,\-eENTRY \-Wl,\-Map=a.map
.Ve
d260 2
a261 15
.IP "\fB@@\fR\fIfile\fR" 4
.IX Item "@@file"
Read command-line options from \fIfile\fR.  The options read are
inserted in place of the original @@\fIfile\fR option.  If \fIfile\fR
does not exist, or cannot be read, then the option will be treated
literally, and not removed.
.Sp
Options in \fIfile\fR are separated by whitespace.  A whitespace
character may be included in an option by surrounding the entire
option in either single or double quotes.  Any character (including a
backslash) may be included by prefixing the character to be included
with a backslash.  The \fIfile\fR may itself contain additional
@@\fIfile\fR options; any such options will be processed recursively.
.IP "\fB\-a\fR \fIkeyword\fR" 4
.IX Item "-a keyword"
d267 3
a269 4
.IP "\fB\-A\fR \fIarchitecture\fR" 4
.IX Item "-A architecture"
.PD 0
.IP "\fB\-\-architecture=\fR\fIarchitecture\fR" 4
d271 2
a272 3
.PD
In the current release of \fBld\fR, this option is useful only for the
Intel 960 family of architectures.  In that \fBld\fR configuration, the
d275 1
a275 1
archive-library search path.
d277 1
a277 1
Future releases of \fBld\fR may support similar functionality for
d279 1
a279 1
.IP "\fB\-b\fR \fIinput-format\fR" 4
d281 1
a281 2
.PD 0
.IP "\fB\-\-format=\fR\fIinput-format\fR" 4
d283 2
a284 3
.PD
\&\fBld\fR may be configured to support more than one kind of object
file.  If your \fBld\fR is configured this way, you can use the
d286 1
a286 1
that follow this option on the command line.  Even when \fBld\fR is
d288 1
a288 1
to specify this, as \fBld\fR should be configured to expect as a
d305 1
a305 1
.IP "\fB\-c\fR \fIMRI-commandfile\fR" 4
d307 1
a307 2
.PD 0
.IP "\fB\-\-mri\-script=\fR\fIMRI-commandfile\fR" 4
d309 1
a309 2
.PD
For compatibility with linkers produced by \s-1MRI\s0, \fBld\fR accepts script
d314 2
a315 2
scripts written in the general-purpose \fBld\fR scripting language.
If \fIMRI-cmdfile\fR does not exist, \fBld\fR looks for it in the directories
d317 1
a317 1
.IP "\fB\-d\fR" 4
d319 1
a319 2
.PD 0
.IP "\fB\-dc\fR" 4
d321 1
a321 1
.IP "\fB\-dp\fR" 4
a322 1
.PD
d327 1
a327 1
.IP "\fB\-e\fR \fIentry\fR" 4
d329 1
a329 2
.PD 0
.IP "\fB\-\-entry=\fR\fIentry\fR" 4
a330 1
.PD
d336 2
a337 24
\&\fB0\fR for base 8).
.IP "\fB\-\-exclude\-libs\fR \fIlib\fR\fB,\fR\fIlib\fR\fB,...\fR" 4
.IX Item "--exclude-libs lib,lib,..."
Specifies a list of archive libraries from which symbols should not be automatically
exported.  The library names may be delimited by commas or colons.  Specifying
\&\f(CW\*(C`\-\-exclude\-libs ALL\*(C'\fR excludes symbols in all archive libraries from
automatic export.  This option is available only for the i386 \s-1PE\s0 targeted
port of the linker and for \s-1ELF\s0 targeted ports.  For i386 \s-1PE\s0, symbols
explicitly listed in a .def file are still exported, regardless of this
option.  For \s-1ELF\s0 targeted ports, symbols affected by this option will
be treated as hidden.
.IP "\fB\-\-exclude\-modules\-for\-implib\fR \fImodule\fR\fB,\fR\fImodule\fR\fB,...\fR" 4
.IX Item "--exclude-modules-for-implib module,module,..."
Specifies a list of object files or archive members, from which symbols
should not be automatically exported, but which should be copied wholesale
into the import library being generated during the link.  The module names
may be delimited by commas or colons, and must match exactly the filenames
used by \fBld\fR to open the files; for archive members, this is simply
the member name, but for object files the name listed must include and
match precisely any path used to specify the input file on the linker's
command-line.  This option is available only for the i386 \s-1PE\s0 targeted port
of the linker.  Symbols explicitly listed in a .def file are still exported,
regardless of this option.
.IP "\fB\-E\fR" 4
d339 1
a339 2
.PD 0
.IP "\fB\-\-export\-dynamic\fR" 4
d341 7
a347 12
.IP "\fB\-\-no\-export\-dynamic\fR" 4
.IX Item "--no-export-dynamic"
.PD
When creating a dynamically linked executable, using the \fB\-E\fR
option or the \fB\-\-export\-dynamic\fR option causes the linker to add
all symbols to the dynamic symbol table.  The dynamic symbol table is the
set of symbols which are visible from dynamic objects at run time.
.Sp
If you do not use either of these options (or use the
\&\fB\-\-no\-export\-dynamic\fR option to restore the default behavior), the
dynamic symbol table will normally contain only those symbols which are
referenced by some dynamic object mentioned in the link.
d353 1
a353 9
.Sp
You can also use the dynamic list to control what symbols should
be added to the dynamic symbol table if the output format supports it.
See the description of \fB\-\-dynamic\-list\fR.
.Sp
Note that this option is specific to \s-1ELF\s0 targeted ports.  \s-1PE\s0 targets
support a similar function to export all symbols from a \s-1DLL\s0 or \s-1EXE\s0; see
the description of \fB\-\-export\-all\-symbols\fR below.
.IP "\fB\-EB\fR" 4
d356 1
a356 1
.IP "\fB\-EL\fR" 4
d359 4
a362 6
.IP "\fB\-f\fR \fIname\fR" 4
.IX Item "-f name"
.PD 0
.IP "\fB\-\-auxiliary=\fR\fIname\fR" 4
.IX Item "--auxiliary=name"
.PD
d380 1
a380 1
.IP "\fB\-F\fR \fIname\fR" 4
d382 2
a383 4
.PD 0
.IP "\fB\-\-filter=\fR\fIname\fR" 4
.IX Item "--filter=name"
.PD
d397 1
a397 1
Some older linkers used the \fB\-F\fR option throughout a compilation
d399 2
a400 3
object files.
The \s-1GNU\s0 linker uses other mechanisms for this purpose: the
\&\fB\-b\fR, \fB\-\-format\fR, \fB\-\-oformat\fR options, the
d402 4
a405 5
environment variable.
The \s-1GNU\s0 linker will ignore the \fB\-F\fR option when not
creating an \s-1ELF\s0 shared object.
.IP "\fB\-fini=\fR\fIname\fR" 4
.IX Item "-fini=name"
d410 1
a410 1
.IP "\fB\-g\fR" 4
d413 3
a415 4
.IP "\fB\-G\fR \fIvalue\fR" 4
.IX Item "-G value"
.PD 0
.IP "\fB\-\-gpsize=\fR\fIvalue\fR" 4
a416 1
.PD
d421 3
a423 4
.IP "\fB\-h\fR \fIname\fR" 4
.IX Item "-h name"
.PD 0
.IP "\fB\-soname=\fR\fIname\fR" 4
a424 1
.PD
d430 1
a430 1
.IP "\fB\-i\fR" 4
d433 2
a434 2
.IP "\fB\-init=\fR\fIname\fR" 4
.IX Item "-init=name"
d439 15
a453 20
.IP "\fB\-l\fR \fInamespec\fR" 4
.IX Item "-l namespec"
.PD 0
.IP "\fB\-\-library=\fR\fInamespec\fR" 4
.IX Item "--library=namespec"
.PD
Add the archive or object file specified by \fInamespec\fR to the
list of files to link.  This option may be used any number of times.
If \fInamespec\fR is of the form \fI:\fIfilename\fI\fR, \fBld\fR
will search the library path for a file called \fIfilename\fR, otherwise it
will search the library path for a file called \fIlib\fInamespec\fI.a\fR.
.Sp
On systems which support shared libraries, \fBld\fR may also search for
files other than \fIlib\fInamespec\fI.a\fR.  Specifically, on \s-1ELF\s0
and SunOS systems, \fBld\fR will search a directory for a library
called \fIlib\fInamespec\fI.so\fR before searching for one called
\&\fIlib\fInamespec\fI.a\fR.  (By convention, a \f(CW\*(C`.so\*(C'\fR extension
indicates a shared library.)  Note that this behavior does not apply
to \fI:\fIfilename\fI\fR, which always specifies a file called
\&\fIfilename\fR.
d458 1
a458 1
command line, the linker will include the appropriate file(s) from the
d462 1
a462 1
See the \fB\-(\fR option for a way to force the linker to search
d468 1
a468 1
if you are using \fBld\fR on \s-1AIX\s0, note that it is different from the
d470 3
a472 4
.IP "\fB\-L\fR \fIsearchdir\fR" 4
.IX Item "-L searchdir"
.PD 0
.IP "\fB\-\-library\-path=\fR\fIsearchdir\fR" 4
d474 2
a475 3
.PD
Add path \fIsearchdir\fR to the list of paths that \fBld\fR will search
for archive libraries and \fBld\fR control scripts.  You may use this
d479 2
a480 7
\&\fB\-L\fR options apply to all \fB\-l\fR options, regardless of the
order in which the options appear.  \fB\-L\fR options do not affect
how \fBld\fR searches for a linker script unless \fB\-T\fR
option is specified.
.Sp
If \fIsearchdir\fR begins with \f(CW\*(C`=\*(C'\fR, then the \f(CW\*(C`=\*(C'\fR will be replaced
by the \fIsysroot prefix\fR, a path specified when the linker is configured.
d483 2
a484 2
\&\fB\-L\fR) depends on which emulation mode \fBld\fR is using, and in
some cases also on how it was configured.
d489 2
a490 2
.IP "\fB\-m\fR \fIemulation\fR" 4
.IX Item "-m emulation"
d492 1
a492 1
emulations with the \fB\-\-verbose\fR or \fB\-V\fR options.
d499 1
a499 1
.IP "\fB\-M\fR" 4
d501 1
a501 2
.PD 0
.IP "\fB\-\-print\-map\fR" 4
a502 1
.PD
d506 3
a508 3
.IP "\(bu" 4
Where object files are mapped into memory.
.IP "\(bu" 4
d510 1
a510 1
.IP "\(bu" 4
a512 28
.IP "\(bu" 4
The values assigned to symbols.
.Sp
Note \- symbols whose values are computed by an expression which
involves a reference to a previous value of the same symbol may not
have correct result displayed in the link map.  This is because the
linker discards intermediate results and only retains the final value
of an expression.  Under such circumstances the linker will display
the final value enclosed by square brackets.  Thus for example a
linker script containing:
.Sp
.Vb 3
\&           foo = 1
\&           foo = foo * 4
\&           foo = foo + 8
.Ve
.Sp
will produce the following output in the link map if the \fB\-M\fR
option is used:
.Sp
.Vb 3
\&           0x00000001                foo = 0x1
\&           [0x0000000c]                foo = (foo * 0x4)
\&           [0x0000000c]                foo = (foo + 0x8)
.Ve
.Sp
See \fBExpressions\fR for more information about expressions in linker
scripts.
d516 1
a516 1
.IP "\fB\-n\fR" 4
d518 1
a518 2
.PD 0
.IP "\fB\-\-nmagic\fR" 4
a519 1
.PD
d522 1
a522 1
.IP "\fB\-N\fR" 4
d524 1
a524 2
.PD 0
.IP "\fB\-\-omagic\fR" 4
a525 1
.PD
d527 3
a529 12
not page-align the data segment, and disable linking against shared
libraries.  If the output format supports Unix style magic numbers,
mark the output as \f(CW\*(C`OMAGIC\*(C'\fR. Note: Although a writable text section
is allowed for PE-COFF targets, it does not conform to the format
specification published by Microsoft.
.IP "\fB\-\-no\-omagic\fR" 4
.IX Item "--no-omagic"
This option negates most of the effects of the \fB\-N\fR option.  It
sets the text section to be read-only, and forces the data segment to
be page-aligned.  Note \- this option does not enable linking against
shared libraries.  Use \fB\-Bdynamic\fR for this.
.IP "\fB\-o\fR \fIoutput\fR" 4
d531 1
a531 2
.PD 0
.IP "\fB\-\-output=\fR\fIoutput\fR" 4
d533 1
a533 2
.PD
Use \fIoutput\fR as the name for the program produced by \fBld\fR; if this
d536 1
a536 1
.IP "\fB\-O\fR \fIlevel\fR" 4
d538 1
a538 1
If \fIlevel\fR is a numeric values greater than zero \fBld\fR optimizes
d540 2
a541 6
should only be enabled for the final binary.  At the moment this
option only affects \s-1ELF\s0 shared library generation.  Future releases of
the linker may make more use of this option.  Also currently there is
no difference in the linker's behaviour for different non-zero values
of this option.  Again this may change with future releases.
.IP "\fB\-q\fR" 4
d543 1
a543 2
.PD 0
.IP "\fB\-\-emit\-relocs\fR" 4
d545 1
a545 2
.PD
Leave relocation sections and contents in fully linked executables.
d549 1
a549 7
.Sp
This option is currently only supported on \s-1ELF\s0 platforms.
.IP "\fB\-\-force\-dynamic\fR" 4
.IX Item "--force-dynamic"
Force the output file to have dynamic sections.  This option is specific
to VxWorks targets.
.IP "\fB\-r\fR" 4
d551 2
a552 4
.PD 0
.IP "\fB\-\-relocatable\fR" 4
.IX Item "--relocatable"
.PD
d554 1
a554 1
turn serve as input to \fBld\fR.  This is often called \fIpartial
a561 6
When an input file does not have the same format as the output file,
partial linking is only supported if that input file does not contain any
relocations.  Different output formats can have further restrictions; for
example some \f(CW\*(C`a.out\*(C'\fR\-based formats do not support partial linking
with input files in other formats at all.
.Sp
d563 1
a563 1
.IP "\fB\-R\fR \fIfilename\fR" 4
d565 1
a565 2
.PD 0
.IP "\fB\-\-just\-symbols=\fR\fIfilename\fR" 4
a566 1
.PD
d572 1
a572 1
For compatibility with other \s-1ELF\s0 linkers, if the \fB\-R\fR option is
d574 2
a575 2
the \fB\-rpath\fR option.
.IP "\fB\-s\fR" 4
d577 1
a577 2
.PD 0
.IP "\fB\-\-strip\-all\fR" 4
a578 1
.PD
d580 1
a580 1
.IP "\fB\-S\fR" 4
d582 1
a582 2
.PD 0
.IP "\fB\-\-strip\-debug\fR" 4
a583 1
.PD
d585 1
a585 1
.IP "\fB\-t\fR" 4
d587 1
a587 2
.PD 0
.IP "\fB\-\-trace\fR" 4
d589 2
a590 3
.PD
Print the names of the input files as \fBld\fR processes them.
.IP "\fB\-T\fR \fIscriptfile\fR" 4
d592 1
a592 2
.PD 0
.IP "\fB\-\-script=\fR\fIscriptfile\fR" 4
a593 1
.PD
d595 1
a595 1
\&\fBld\fR's default linker script (rather than adding to it), so
d597 7
a603 21
output file.    If \fIscriptfile\fR does not exist in
the current directory, \f(CW\*(C`ld\*(C'\fR looks for it in the directories
specified by any preceding \fB\-L\fR options.  Multiple \fB\-T\fR
options accumulate.
.IP "\fB\-dT\fR \fIscriptfile\fR" 4
.IX Item "-dT scriptfile"
.PD 0
.IP "\fB\-\-default\-script=\fR\fIscriptfile\fR" 4
.IX Item "--default-script=scriptfile"
.PD
Use \fIscriptfile\fR as the default linker script.
.Sp
This option is similar to the \fB\-\-script\fR option except that
processing of the script is delayed until after the rest of the
command line has been processed.  This allows options placed after the
\&\fB\-\-default\-script\fR option on the command line to affect the
behaviour of the linker script, which can be important when the linker
command line cannot be directly controlled by the user.  (eg because
the command line is being constructed by another tool, such as
\&\fBgcc\fR).
.IP "\fB\-u\fR \fIsymbol\fR" 4
d605 1
a605 2
.PD 0
.IP "\fB\-\-undefined=\fR\fIsymbol\fR" 4
a606 1
.PD
d612 1
a612 1
.IP "\fB\-Ur\fR" 4
d616 1
a616 1
turn serve as input to \fBld\fR.  When linking \*(C+ programs, \fB\-Ur\fR
d622 1
a622 1
.IP "\fB\-\-unique[=\fR\fI\s-1SECTION\s0\fR\fB]\fR" 4
d631 1
a631 1
.IP "\fB\-v\fR" 4
d633 1
a633 2
.PD 0
.IP "\fB\-\-version\fR" 4
d635 1
a635 1
.IP "\fB\-V\fR" 4
d637 1
a637 2
.PD
Display the version number for \fBld\fR.  The \fB\-V\fR option also
d639 1
a639 1
.IP "\fB\-x\fR" 4
d641 1
a641 2
.PD 0
.IP "\fB\-\-discard\-all\fR" 4
a642 1
.PD
d644 1
a644 1
.IP "\fB\-X\fR" 4
d646 1
a646 2
.PD 0
.IP "\fB\-\-discard\-locals\fR" 4
d648 3
a650 5
.PD
Delete all temporary local symbols.  (These symbols start with
system-specific local label prefixes, typically \fB.L\fR for \s-1ELF\s0 systems
or \fBL\fR for traditional a.out systems.)
.IP "\fB\-y\fR \fIsymbol\fR" 4
d652 1
a652 2
.PD 0
.IP "\fB\-\-trace\-symbol=\fR\fIsymbol\fR" 4
a653 1
.PD
d660 1
a660 1
.IP "\fB\-Y\fR \fIpath\fR" 4
d664 1
a664 1
.IP "\fB\-z\fR \fIkeyword\fR" 4
d666 17
a682 88
The recognized keywords are:
.RS 4
.IP "\fBcombreloc\fR" 4
.IX Item "combreloc"
Combines multiple reloc sections and sorts them to make dynamic symbol
lookup caching possible.
.IP "\fBdefs\fR" 4
.IX Item "defs"
Disallows undefined symbols in object files.  Undefined symbols in
shared libraries are still allowed.
.IP "\fBexecstack\fR" 4
.IX Item "execstack"
Marks the object as requiring executable stack.
.IP "\fBinitfirst\fR" 4
.IX Item "initfirst"
This option is only meaningful when building a shared object.
It marks the object so that its runtime initialization will occur
before the runtime initialization of any other objects brought into
the process at the same time.  Similarly the runtime finalization of
the object will occur after the runtime finalization of any other
objects.
.IP "\fBinterpose\fR" 4
.IX Item "interpose"
Marks the object that its symbol table interposes before all symbols
but the primary executable.
.IP "\fBlazy\fR" 4
.IX Item "lazy"
When generating an executable or shared library, mark it to tell the
dynamic linker to defer function call resolution to the point when
the function is called (lazy binding), rather than at load time.
Lazy binding is the default.
.IP "\fBloadfltr\fR" 4
.IX Item "loadfltr"
Marks  the object that its filters be processed immediately at
runtime.
.IP "\fBmuldefs\fR" 4
.IX Item "muldefs"
Allows multiple definitions.
.IP "\fBnocombreloc\fR" 4
.IX Item "nocombreloc"
Disables multiple reloc sections combining.
.IP "\fBnocopyreloc\fR" 4
.IX Item "nocopyreloc"
Disables production of copy relocs.
.IP "\fBnodefaultlib\fR" 4
.IX Item "nodefaultlib"
Marks the object that the search for dependencies of this object will
ignore any default library search paths.
.IP "\fBnodelete\fR" 4
.IX Item "nodelete"
Marks the object shouldn't be unloaded at runtime.
.IP "\fBnodlopen\fR" 4
.IX Item "nodlopen"
Marks the object not available to \f(CW\*(C`dlopen\*(C'\fR.
.IP "\fBnodump\fR" 4
.IX Item "nodump"
Marks the object can not be dumped by \f(CW\*(C`dldump\*(C'\fR.
.IP "\fBnoexecstack\fR" 4
.IX Item "noexecstack"
Marks the object as not requiring executable stack.
.IP "\fBnorelro\fR" 4
.IX Item "norelro"
Don't create an \s-1ELF\s0 \f(CW\*(C`PT_GNU_RELRO\*(C'\fR segment header in the object.
.IP "\fBnow\fR" 4
.IX Item "now"
When generating an executable or shared library, mark it to tell the
dynamic linker to resolve all symbols when the program is started, or
when the shared library is linked to using dlopen, instead of
deferring function call resolution to the point when the function is
first called.
.IP "\fBorigin\fR" 4
.IX Item "origin"
Marks the object may contain \f(CW$ORIGIN\fR.
.IP "\fBrelro\fR" 4
.IX Item "relro"
Create an \s-1ELF\s0 \f(CW\*(C`PT_GNU_RELRO\*(C'\fR segment header in the object.
.IP "\fBmax\-page\-size=\fR\fIvalue\fR" 4
.IX Item "max-page-size=value"
Set the emulation maximum page size to \fIvalue\fR.
.IP "\fBcommon\-page\-size=\fR\fIvalue\fR" 4
.IX Item "common-page-size=value"
Set the emulation common page size to \fIvalue\fR.
.RE
.RS 4
.Sp
Other keywords are ignored for Solaris compatibility.
.RE
.IP "\fB\-(\fR \fIarchives\fR \fB\-)\fR" 4
d684 1
a684 2
.PD 0
.IP "\fB\-\-start\-group\fR \fIarchives\fR \fB\-\-end\-group\fR" 4
a685 1
.PD
d701 1
a701 43
.IP "\fB\-\-accept\-unknown\-input\-arch\fR" 4
.IX Item "--accept-unknown-input-arch"
.PD 0
.IP "\fB\-\-no\-accept\-unknown\-input\-arch\fR" 4
.IX Item "--no-accept-unknown-input-arch"
.PD
Tells the linker to accept input files whose architecture cannot be
recognised.  The assumption is that the user knows what they are doing
and deliberately wants to link in these unknown input files.  This was
the default behaviour of the linker, before release 2.14.  The default
behaviour from release 2.14 onwards is to reject such input files, and
so the \fB\-\-accept\-unknown\-input\-arch\fR option has been added to
restore the old behaviour.
.IP "\fB\-\-as\-needed\fR" 4
.IX Item "--as-needed"
.PD 0
.IP "\fB\-\-no\-as\-needed\fR" 4
.IX Item "--no-as-needed"
.PD
This option affects \s-1ELF\s0 \s-1DT_NEEDED\s0 tags for dynamic libraries mentioned
on the command line after the \fB\-\-as\-needed\fR option.  Normally,
the linker will add a \s-1DT_NEEDED\s0 tag for each dynamic library mentioned
on the command line, regardless of whether the library is actually
needed.  \fB\-\-as\-needed\fR causes a \s-1DT_NEEDED\s0 tag to only be emitted
for a library that satisfies a symbol reference from regular objects
which is undefined at the point that the library was linked, or, if
the library is not found in the \s-1DT_NEEDED\s0 lists of other libraries
linked up to that point, a reference from another dynamic library.
\&\fB\-\-no\-as\-needed\fR restores the default behaviour.
.IP "\fB\-\-add\-needed\fR" 4
.IX Item "--add-needed"
.PD 0
.IP "\fB\-\-no\-add\-needed\fR" 4
.IX Item "--no-add-needed"
.PD
This option affects the treatment of dynamic libraries from \s-1ELF\s0
\&\s-1DT_NEEDED\s0 tags in dynamic libraries mentioned on the command line after
the \fB\-\-no\-add\-needed\fR option.  Normally, the linker will add
a \s-1DT_NEEDED\s0 tag for each dynamic library from \s-1DT_NEEDED\s0 tags.
\&\fB\-\-no\-add\-needed\fR causes \s-1DT_NEEDED\s0 tags will never be emitted
for those libraries from \s-1DT_NEEDED\s0 tags. \fB\-\-add\-needed\fR restores
the default behaviour.
.IP "\fB\-assert\fR \fIkeyword\fR" 4
d704 1
a704 1
.IP "\fB\-Bdynamic\fR" 4
d706 1
a706 2
.PD 0
.IP "\fB\-dy\fR" 4
d708 1
a708 1
.IP "\fB\-call_shared\fR" 4
a709 1
.PD
d715 2
a716 2
\&\fB\-l\fR options which follow it.
.IP "\fB\-Bgroup\fR" 4
d721 3
a723 3
\&\fB\-\-unresolved\-symbols=report\-all\fR is implied.  This option is
only meaningful on \s-1ELF\s0 platforms which support shared libraries.
.IP "\fB\-Bstatic\fR" 4
d725 1
a725 2
.PD 0
.IP "\fB\-dn\fR" 4
d727 1
a727 1
.IP "\fB\-non_shared\fR" 4
d729 1
a729 1
.IP "\fB\-static\fR" 4
a730 1
.PD
d735 2
a736 7
library searching for \fB\-l\fR options which follow it.  This
option also implies \fB\-\-unresolved\-symbols=report\-all\fR.  This
option can be used with \fB\-shared\fR.  Doing so means that a
shared library is being created but that all of the library's external
references must be resolved by pulling in entries from static
libraries.
.IP "\fB\-Bsymbolic\fR" 4
d743 1
a743 29
.IP "\fB\-Bsymbolic\-functions\fR" 4
.IX Item "-Bsymbolic-functions"
When creating a shared library, bind references to global function
symbols to the definition within the shared library, if any.
This option is only meaningful on \s-1ELF\s0 platforms which support shared
libraries.
.IP "\fB\-\-dynamic\-list=\fR\fIdynamic-list-file\fR" 4
.IX Item "--dynamic-list=dynamic-list-file"
Specify the name of a dynamic list file to the linker.  This is
typically used when creating shared libraries to specify a list of
global symbols whose references shouldn't be bound to the definition
within the shared library, or creating dynamically linked executables
to specify a list of symbols which should be added to the symbol table
in the executable.  This option is only meaningful on \s-1ELF\s0 platforms
which support shared libraries.
.Sp
The format of the dynamic list is the same as the version node without
scope and node name.  See \fB\s-1VERSION\s0\fR for more information.
.IP "\fB\-\-dynamic\-list\-data\fR" 4
.IX Item "--dynamic-list-data"
Include all global data symbols to the dynamic list.
.IP "\fB\-\-dynamic\-list\-cpp\-new\fR" 4
.IX Item "--dynamic-list-cpp-new"
Provide the builtin dynamic list for \*(C+ operator new and delete.  It
is mainly useful for building shared libstdc++.
.IP "\fB\-\-dynamic\-list\-cpp\-typeinfo\fR" 4
.IX Item "--dynamic-list-cpp-typeinfo"
Provide the builtin dynamic list for \*(C+ runtime type identification.
.IP "\fB\-\-check\-sections\fR" 4
d745 1
a745 2
.PD 0
.IP "\fB\-\-no\-check\-sections\fR" 4
a746 1
.PD
d748 1
a748 1
been assigned to see if there are any overlaps.  Normally the linker will
d752 2
a753 5
restored by using the command line switch \fB\-\-check\-sections\fR.
Section overlap is not usually checked for relocatable links.  You can
force checking in that case by using the \fB\-\-check\-sections\fR
option.
.IP "\fB\-\-cref\fR" 4
d764 2
a765 17
.IP "\fB\-\-no\-define\-common\fR" 4
.IX Item "--no-define-common"
This option inhibits the assignment of addresses to common symbols.
The script command \f(CW\*(C`INHIBIT_COMMON_ALLOCATION\*(C'\fR has the same effect.
.Sp
The \fB\-\-no\-define\-common\fR option allows decoupling
the decision to assign addresses to Common symbols from the choice
of the output file type; otherwise a non-Relocatable output type
forces assigning addresses to Common symbols.
Using \fB\-\-no\-define\-common\fR allows Common symbols that are referenced
from a shared library to be assigned addresses only in the main program.
This eliminates the unused duplicate space in the shared library,
and also prevents any possible confusion over resolving to the wrong
duplicate when there are many dynamic modules with specialized search
paths for runtime symbol resolution.
.IP "\fB\-\-defsym=\fR\fIsymbol\fR\fB=\fR\fIexpression\fR" 4
.IX Item "--defsym=symbol=expression"
d774 1
a774 1
space between \fIsymbol\fR, the equals sign ("\fB=\fR"), and
d776 1
a776 1
.IP "\fB\-\-demangle[=\fR\fIstyle\fR\fB]\fR" 4
d778 1
a778 2
.PD 0
.IP "\fB\-\-no\-demangle\fR" 4
a779 1
.PD
d789 2
a790 6
.IP "\fB\-I\fR\fIfile\fR" 4
.IX Item "-Ifile"
.PD 0
.IP "\fB\-\-dynamic\-linker=\fR\fIfile\fR" 4
.IX Item "--dynamic-linker=file"
.PD
d795 8
a802 1
.IP "\fB\-\-fatal\-warnings\fR" 4
d804 2
a805 7
.PD 0
.IP "\fB\-\-no\-fatal\-warnings\fR" 4
.IX Item "--no-fatal-warnings"
.PD
Treat all warnings as errors.  The default behaviour can be restored
with the option \fB\-\-no\-fatal\-warnings\fR.
.IP "\fB\-\-force\-exe\-suffix\fR" 4
d815 3
a817 1
.IP "\fB\-\-gc\-sections\fR" 4
a818 4
.PD 0
.IP "\fB\-\-no\-gc\-sections\fR" 4
.IX Item "--no-gc-sections"
.PD
d820 5
a824 31
targets that do not support this option.  The default behaviour (of not
performing this garbage collection) can be restored by specifying
\&\fB\-\-no\-gc\-sections\fR on the command line.
.Sp
\&\fB\-\-gc\-sections\fR decides which input sections are used by
examining symbols and relocations.  The section containing the entry
symbol and all sections containing symbols undefined on the
command-line will be kept, as will sections containing symbols
referenced by dynamic objects.  Note that when building shared
libraries, the linker must assume that any visible symbol is
referenced.  Once this initial set of sections has been determined,
the linker recursively marks as used any section referenced by their
relocations.  See \fB\-\-entry\fR and \fB\-\-undefined\fR.
.Sp
This option can be set when doing a partial link (enabled with option
\&\fB\-r\fR).  In this case the root of symbols kept must be explicitely 
specified either by an \fB\-\-entry\fR or \fB\-\-undefined\fR option or by
a \f(CW\*(C`ENTRY\*(C'\fR command in the linker script.
.IP "\fB\-\-print\-gc\-sections\fR" 4
.IX Item "--print-gc-sections"
.PD 0
.IP "\fB\-\-no\-print\-gc\-sections\fR" 4
.IX Item "--no-print-gc-sections"
.PD
List all sections removed by garbage collection.  The listing is
printed on stderr.  This option is only effective if garbage
collection has been enabled via the \fB\-\-gc\-sections\fR) option.  The
default behaviour (of not listing the sections that are removed) can
be restored by specifying \fB\-\-no\-print\-gc\-sections\fR on the command
line.
.IP "\fB\-\-help\fR" 4
d827 1
a827 1
.IP "\fB\-\-target\-help\fR" 4
d830 2
a831 2
.IP "\fB\-Map=\fR\fImapfile\fR" 4
.IX Item "-Map=mapfile"
d834 1
a834 1
.IP "\fB\-\-no\-keep\-memory\fR" 4
d836 2
a837 2
\&\fBld\fR normally optimizes for speed over memory usage by caching the
symbol tables of input files in memory.  This option tells \fBld\fR to
d839 1
a839 1
necessary.  This may be required if \fBld\fR runs out of memory space
d841 1
a841 1
.IP "\fB\-\-no\-undefined\fR" 4
d843 1
a843 2
.PD 0
.IP "\fB\-z defs\fR" 4
d845 4
a848 16
.PD
Report unresolved symbol references from regular object files.  This
is done even if the linker is creating a non-symbolic shared library.
The switch \fB\-\-[no\-]allow\-shlib\-undefined\fR controls the
behaviour for reporting unresolved references found in shared
libraries being linked in.
.IP "\fB\-\-allow\-multiple\-definition\fR" 4
.IX Item "--allow-multiple-definition"
.PD 0
.IP "\fB\-z muldefs\fR" 4
.IX Item "-z muldefs"
.PD
Normally when a symbol is defined multiple times, the linker will
report a fatal error. These options allow multiple definitions and the
first definition will be used.
.IP "\fB\-\-allow\-shlib\-undefined\fR" 4
d850 11
a860 47
.PD 0
.IP "\fB\-\-no\-allow\-shlib\-undefined\fR" 4
.IX Item "--no-allow-shlib-undefined"
.PD
Allows or disallows undefined symbols in shared libraries.
This switch is similar to \fB\-\-no\-undefined\fR except that it
determines the behaviour when the undefined symbols are in a
shared library rather than a regular object file.  It does not affect
how undefined symbols in regular object files are handled.
.Sp
The default behaviour is to report errors for any undefined symbols
referenced in shared libraries if the linker is being used to create
an executable, but to allow them if the linker is being used to create
a shared library.
.Sp
The reasons for allowing undefined symbol references in shared
libraries specified at link time are that:
.RS 4
.IP "\(bu" 4
A shared library specified at link time may not be the same as the one
that is available at load time, so the symbol might actually be
resolvable at load time.
.IP "\(bu" 4
There are some operating systems, eg BeOS and \s-1HPPA\s0, where undefined
symbols in shared libraries are normal.
.Sp
The BeOS kernel for example patches shared libraries at load time to
select whichever function is most appropriate for the current
architecture.  This is used, for example, to dynamically select an
appropriate memset function.
.RE
.RS 4
.RE
.IP "\fB\-\-no\-undefined\-version\fR" 4
.IX Item "--no-undefined-version"
Normally when a symbol has an undefined version, the linker will ignore
it. This option disallows symbols with undefined version and a fatal error
will be issued instead.
.IP "\fB\-\-default\-symver\fR" 4
.IX Item "--default-symver"
Create and use a default symbol version (the soname) for unversioned
exported symbols.
.IP "\fB\-\-default\-imported\-symver\fR" 4
.IX Item "--default-imported-symver"
Create and use a default symbol version (the soname) for unversioned
imported symbols.
.IP "\fB\-\-no\-warn\-mismatch\fR" 4
d862 1
a862 1
Normally \fBld\fR will give an error if you try to link together input
d865 1
a865 1
This option tells \fBld\fR that it should silently permit such possible
d869 1
a869 5
.IP "\fB\-\-no\-warn\-search\-mismatch\fR" 4
.IX Item "--no-warn-search-mismatch"
Normally \fBld\fR will give a warning if it finds an incompatible
library during a library search.  This option silences the warning.
.IP "\fB\-\-no\-whole\-archive\fR" 4
d871 1
a871 1
Turn off the effect of the \fB\-\-whole\-archive\fR option for subsequent
d873 1
a873 1
.IP "\fB\-\-noinhibit\-exec\fR" 4
d879 7
a885 12
.IP "\fB\-nostdlib\fR" 4
.IX Item "-nostdlib"
Only search library directories explicitly specified on the
command line.  Library directories specified in linker scripts
(including linker scripts specified on the command line) are ignored.
.IP "\fB\-\-oformat=\fR\fIoutput-format\fR" 4
.IX Item "--oformat=output-format"
\&\fBld\fR may be configured to support more than one kind of object
file.  If your \fBld\fR is configured this way, you can use the
\&\fB\-\-oformat\fR option to specify the binary format for the output
object file.  Even when \fBld\fR is configured to support alternative
object formats, you don't usually need to specify this, as \fBld\fR
d891 2
a892 14
this option overrides it.
.IP "\fB\-pie\fR" 4
.IX Item "-pie"
.PD 0
.IP "\fB\-\-pic\-executable\fR" 4
.IX Item "--pic-executable"
.PD
Create a position independent executable.  This is currently only supported on
\&\s-1ELF\s0 platforms.  Position independent executables are similar to shared
libraries in that they are relocated by the dynamic linker to the virtual
address the \s-1OS\s0 chooses for them (which can vary between invocations).  Like
normal dynamically linked executables they can be executed and symbols
defined in the executable cannot be overridden by shared libraries.
.IP "\fB\-qmagic\fR" 4
d895 1
a895 1
.IP "\fB\-Qy\fR" 4
d898 1
a898 1
.IP "\fB\-\-relax\fR" 4
d903 1
a903 1
On some platforms, the \fB\-\-relax\fR option performs global
d913 1
a913 1
On platforms where this is not supported, \fB\-\-relax\fR is accepted,
d915 2
a916 2
.IP "\fB\-\-retain\-symbols\-file=\fR\fIfilename\fR" 4
.IX Item "--retain-symbols-file=filename"
d924 1
a924 1
\&\fB\-\-retain\-symbols\-file\fR does \fInot\fR discard undefined symbols,
d927 1
a927 1
You may only specify \fB\-\-retain\-symbols\-file\fR once in the command
d929 2
a930 2
.IP "\fB\-rpath=\fR\fIdir\fR" 4
.IX Item "-rpath=dir"
d932 1
a932 1
linking an \s-1ELF\s0 executable with shared objects.  All \fB\-rpath\fR
d934 1
a934 1
them to locate shared objects at runtime.  The \fB\-rpath\fR option is
d937 1
a937 1
\&\fB\-rpath\-link\fR option.  If \fB\-rpath\fR is not used when linking an
d941 1
a941 1
The \fB\-rpath\fR option may also be used on SunOS.  By default, on
d943 5
a947 5
\&\fB\-L\fR options it is given.  If a \fB\-rpath\fR option is used, the
runtime search path will be formed exclusively using the \fB\-rpath\fR
options, ignoring the \fB\-L\fR options.  This can be useful when using
gcc, which adds many \fB\-L\fR options which may be on \s-1NFS\s0 mounted
file systems.
d949 1
a949 1
For compatibility with other \s-1ELF\s0 linkers, if the \fB\-R\fR option is
d951 3
a953 3
the \fB\-rpath\fR option.
.IP "\fB\-rpath\-link=\fR\fIdir\fR" 4
.IX Item "-rpath-link=dir"
d961 1
a961 1
explicitly.  In such a case, the \fB\-rpath\-link\fR option
d963 1
a963 1
\&\fB\-rpath\-link\fR option may specify a sequence of directory names
d973 1
a973 1
libraries:
d975 19
a993 21
.IP "1." 4
Any directories specified by \fB\-rpath\-link\fR options.
.IP "2." 4
Any directories specified by \fB\-rpath\fR options.  The difference
between \fB\-rpath\fR and \fB\-rpath\-link\fR is that directories
specified by \fB\-rpath\fR options are included in the executable and
used at runtime, whereas the \fB\-rpath\-link\fR option is only effective
at link time. Searching \fB\-rpath\fR in this way is only supported
by native linkers and cross linkers which have been configured with
the \fB\-\-with\-sysroot\fR option.
.IP "3." 4
On an \s-1ELF\s0 system, for native linkers, if the \fB\-rpath\fR and
\&\fB\-rpath\-link\fR options were not used, search the contents of the
environment variable \f(CW\*(C`LD_RUN_PATH\*(C'\fR.
.IP "4." 4
On SunOS, if the \fB\-rpath\fR option was not used, search any
directories specified using \fB\-L\fR options.
.IP "5." 4
For a native linker, the search the contents of the environment
variable \f(CW\*(C`LD_LIBRARY_PATH\*(C'\fR.
.IP "6." 4
d998 1
a998 1
.IP "7." 4
d1000 1
a1000 1
.IP "8." 4
d1009 1
a1009 1
.IP "\fB\-shared\fR" 4
d1011 1
a1011 2
.PD 0
.IP "\fB\-Bshareable\fR" 4
a1012 1
.PD
d1015 1
a1015 1
shared library if the \fB\-e\fR option is not used and there are
d1017 1
a1017 1
.IP "\fB\-\-sort\-common\fR" 4
d1019 8
a1026 23
.PD 0
.IP "\fB\-\-sort\-common=ascending\fR" 4
.IX Item "--sort-common=ascending"
.IP "\fB\-\-sort\-common=descending\fR" 4
.IX Item "--sort-common=descending"
.PD
This option tells \fBld\fR to sort the common symbols by alignment in
ascending or descending order when it places them in the appropriate output
sections.  The symbol alignments considered are sixteen-byte or larger,
eight-byte, four-byte, two-byte, and one-byte. This is to prevent gaps
between symbols due to alignment constraints.  If no sorting order is
specified, then descending order is assumed.
.IP "\fB\-\-sort\-section=name\fR" 4
.IX Item "--sort-section=name"
This option will apply \f(CW\*(C`SORT_BY_NAME\*(C'\fR to all wildcard section
patterns in the linker script.
.IP "\fB\-\-sort\-section=alignment\fR" 4
.IX Item "--sort-section=alignment"
This option will apply \f(CW\*(C`SORT_BY_ALIGNMENT\*(C'\fR to all wildcard section
patterns in the linker script.
.IP "\fB\-\-split\-by\-file[=\fR\fIsize\fR\fB]\fR" 4
.IX Item "--split-by-file[=size]"
Similar to \fB\-\-split\-by\-reloc\fR but creates a new output section for
d1029 2
a1030 2
.IP "\fB\-\-split\-by\-reloc[=\fR\fIcount\fR\fB]\fR" 4
.IX Item "--split-by-reloc[=count]"
d1041 1
a1041 1
.IP "\fB\-\-stats\fR" 4
d1045 1
a1045 6
.IP "\fB\-\-sysroot=\fR\fIdirectory\fR" 4
.IX Item "--sysroot=directory"
Use \fIdirectory\fR as the location of the sysroot, overriding the
configure-time default.  This option is only supported by linkers
that were configured using \fB\-\-with\-sysroot\fR.
.IP "\fB\-\-traditional\-format\fR" 4
d1047 2
a1048 2
For some targets, the output of \fBld\fR is different in some ways from
the output of some existing linker.  This switch requests \fBld\fR to
d1051 1
a1051 1
For example, on SunOS, \fBld\fR combines duplicate entries in the
d1055 1
a1055 1
trouble).  The \fB\-\-traditional\-format\fR switch tells \fBld\fR to not
d1057 2
a1058 2
.IP "\fB\-\-section\-start=\fR\fIsectionname\fR\fB=\fR\fIorg\fR" 4
.IX Item "--section-start=sectionname=org"
d1067 13
a1079 48
sign ("\fB=\fR"), and \fIorg\fR.
.IP "\fB\-Tbss=\fR\fIorg\fR" 4
.IX Item "-Tbss=org"
.PD 0
.IP "\fB\-Tdata=\fR\fIorg\fR" 4
.IX Item "-Tdata=org"
.IP "\fB\-Ttext=\fR\fIorg\fR" 4
.IX Item "-Ttext=org"
.PD
Same as \fB\-\-section\-start\fR, with \f(CW\*(C`.bss\*(C'\fR, \f(CW\*(C`.data\*(C'\fR or
\&\f(CW\*(C`.text\*(C'\fR as the \fIsectionname\fR.
.IP "\fB\-Ttext\-segment=\fR\fIorg\fR" 4
.IX Item "-Ttext-segment=org"
When creating an \s-1ELF\s0 executable or shared object, it will set the address
of the first byte of the text segment.
.IP "\fB\-\-unresolved\-symbols=\fR\fImethod\fR" 4
.IX Item "--unresolved-symbols=method"
Determine how to handle unresolved symbols.  There are four possible
values for \fBmethod\fR:
.RS 4
.IP "\fBignore-all\fR" 4
.IX Item "ignore-all"
Do not report any unresolved symbols.
.IP "\fBreport-all\fR" 4
.IX Item "report-all"
Report all unresolved symbols.  This is the default.
.IP "\fBignore-in-object-files\fR" 4
.IX Item "ignore-in-object-files"
Report unresolved symbols that are contained in shared libraries, but
ignore them if they come from regular object files.
.IP "\fBignore-in-shared-libs\fR" 4
.IX Item "ignore-in-shared-libs"
Report unresolved symbols that come from regular object files, but
ignore them if they come from shared libraries.  This can be useful
when creating a dynamic binary and it is known that all the shared
libraries that it should be referencing are included on the linker's
command line.
.RE
.RS 4
.Sp
The behaviour for shared libraries on their own can also be controlled
by the \fB\-\-[no\-]allow\-shlib\-undefined\fR option.
.Sp
Normally the linker will generate an error message for each reported
unresolved symbol but the option \fB\-\-warn\-unresolved\-symbols\fR
can change this to a warning.
.RE
.IP "\fB\-\-dll\-verbose\fR" 4
d1081 1
a1081 2
.PD 0
.IP "\fB\-\-verbose\fR" 4
d1083 1
a1083 2
.PD
Display the version number for \fBld\fR and list the linker emulations
d1085 2
a1086 2
the linker script being used by the linker.
.IP "\fB\-\-version\-script=\fR\fIversion-scriptfile\fR" 4
d1090 3
a1092 6
about the version hierarchy for the library being created.  This option
is only fully supported on \s-1ELF\s0 platforms which support shared libraries;
see \fB\s-1VERSION\s0\fR.  It is partially supported on \s-1PE\s0 platforms, which can
use version scripts to filter symbol visibility in auto-export mode: any
symbols marked \fBlocal\fR in the version script will not be exported.
.IP "\fB\-\-warn\-common\fR" 4
d1095 1
a1095 1
a symbol definition.  Unix linkers allow this somewhat sloppy practise,
d1098 1
a1098 1
Unfortunately, some C libraries use this practise, so you may get some
d1103 1
a1103 1
.IP "\fBint i = 1;\fR" 4
d1107 1
a1107 1
.IP "\fBextern int i;\fR" 4
d1112 1
a1112 1
.IP "\fBint i;\fR" 4
d1123 1
a1123 1
The \fB\-\-warn\-common\fR option can produce five kinds of warnings.
d1128 3
a1130 1
.IP "1." 4
d1135 1
a1135 1
\&        <file>(<section>): warning: common of \`<symbol>\*(Aq
d1137 1
a1137 1
\&        <file>(<section>): warning: defined here
d1139 1
a1139 1
.IP "2." 4
d1145 1
a1145 1
\&        <file>(<section>): warning: definition of \`<symbol>\*(Aq
d1147 1
a1147 1
\&        <file>(<section>): warning: common is here
d1149 1
a1149 1
.IP "3." 4
d1153 3
a1155 3
\&        <file>(<section>): warning: multiple common
\&           of \`<symbol>\*(Aq
\&        <file>(<section>): warning: previous common is here
d1157 1
a1157 1
.IP "4." 4
d1161 1
a1161 1
\&        <file>(<section>): warning: common of \`<symbol>\*(Aq
d1163 1
a1163 1
\&        <file>(<section>): warning: larger common is here
d1165 1
a1165 1
.IP "5." 4
d1171 1
a1171 1
\&        <file>(<section>): warning: common of \`<symbol>\*(Aq
d1173 1
a1173 1
\&        <file>(<section>): warning: smaller common is here
d1178 1
a1178 1
.IP "\fB\-\-warn\-constructors\fR" 4
d1183 1
a1183 1
.IP "\fB\-\-warn\-multiple\-gp\fR" 4
d1196 1
a1196 1
.IP "\fB\-\-warn\-once\fR" 4
d1200 1
a1200 1
.IP "\fB\-\-warn\-section\-align\fR" 4
d1207 1
a1207 16
.IP "\fB\-\-warn\-shared\-textrel\fR" 4
.IX Item "--warn-shared-textrel"
Warn if the linker adds a \s-1DT_TEXTREL\s0 to a shared object.
.IP "\fB\-\-warn\-alternate\-em\fR" 4
.IX Item "--warn-alternate-em"
Warn if an object has alternate \s-1ELF\s0 machine code.
.IP "\fB\-\-warn\-unresolved\-symbols\fR" 4
.IX Item "--warn-unresolved-symbols"
If the linker is going to report an unresolved symbol (see the option
\&\fB\-\-unresolved\-symbols\fR) it will normally generate an error.
This option makes it generate a warning instead.
.IP "\fB\-\-error\-unresolved\-symbols\fR" 4
.IX Item "--error-unresolved-symbols"
This restores the linker's default behaviour of generating errors when
it is reporting unresolved symbols.
.IP "\fB\-\-whole\-archive\fR" 4
d1210 1
a1210 1
\&\fB\-\-whole\-archive\fR option, include every object file in the archive
d1217 2
a1218 2
about this option, so you have to use \fB\-Wl,\-whole\-archive\fR.
Second, don't forget to use \fB\-Wl,\-no\-whole\-archive\fR after your
d1221 2
a1222 2
.IP "\fB\-\-wrap=\fR\fIsymbol\fR" 4
.IX Item "--wrap=symbol"
d1237 1
a1237 1
\&        _\|_wrap_malloc (size_t c)
d1239 2
a1240 2
\&          printf ("malloc called with %zu\en", c);
\&          return _\|_real_malloc (c);
d1243 1
a1243 2
.Sp
If you link other code with this file using \fB\-\-wrap malloc\fR, then
d1249 1
a1249 1
links without the \fB\-\-wrap\fR option will succeed.  If you do this,
d1253 1
a1253 5
.IP "\fB\-\-eh\-frame\-hdr\fR" 4
.IX Item "--eh-frame-hdr"
Request creation of \f(CW\*(C`.eh_frame_hdr\*(C'\fR section and \s-1ELF\s0
\&\f(CW\*(C`PT_GNU_EH_FRAME\*(C'\fR segment header.
.IP "\fB\-\-enable\-new\-dtags\fR" 4
d1255 1
a1255 2
.PD 0
.IP "\fB\-\-disable\-new\-dtags\fR" 4
a1256 1
.PD
d1259 2
a1260 2
\&\fB\-\-enable\-new\-dtags\fR, the dynamic tags will be created as needed.
If you specify \fB\-\-disable\-new\-dtags\fR, no new dynamic tags will be
a1262 54
.IP "\fB\-\-hash\-size=\fR\fInumber\fR" 4
.IX Item "--hash-size=number"
Set the default size of the linker's hash tables to a prime number
close to \fInumber\fR.  Increasing this value can reduce the length of
time it takes the linker to perform its tasks, at the expense of
increasing the linker's memory requirements.  Similarly reducing this
value can reduce the memory requirements at the expense of speed.
.IP "\fB\-\-hash\-style=\fR\fIstyle\fR" 4
.IX Item "--hash-style=style"
Set the type of linker's hash table(s).  \fIstyle\fR can be either
\&\f(CW\*(C`sysv\*(C'\fR for classic \s-1ELF\s0 \f(CW\*(C`.hash\*(C'\fR section, \f(CW\*(C`gnu\*(C'\fR for
new style \s-1GNU\s0 \f(CW\*(C`.gnu.hash\*(C'\fR section or \f(CW\*(C`both\*(C'\fR for both
the classic \s-1ELF\s0 \f(CW\*(C`.hash\*(C'\fR and new style \s-1GNU\s0 \f(CW\*(C`.gnu.hash\*(C'\fR
hash tables.  The default is \f(CW\*(C`sysv\*(C'\fR.
.IP "\fB\-\-reduce\-memory\-overheads\fR" 4
.IX Item "--reduce-memory-overheads"
This option reduces memory requirements at ld runtime, at the expense of
linking speed.  This was introduced to select the old O(n^2) algorithm
for link map file generation, rather than the new O(n) algorithm which uses
about 40% more memory for symbol storage.
.Sp
Another effect of the switch is to set the default hash table size to
1021, which again saves memory at the cost of lengthening the linker's
run time.  This is not done however if the \fB\-\-hash\-size\fR switch
has been used.
.Sp
The \fB\-\-reduce\-memory\-overheads\fR switch may be also be used to
enable other tradeoffs in future versions of the linker.
.IP "\fB\-\-build\-id\fR" 4
.IX Item "--build-id"
.PD 0
.IP "\fB\-\-build\-id=\fR\fIstyle\fR" 4
.IX Item "--build-id=style"
.PD
Request creation of \f(CW\*(C`.note.gnu.build\-id\*(C'\fR \s-1ELF\s0 note section.
The contents of the note are unique bits identifying this linked
file.  \fIstyle\fR can be \f(CW\*(C`uuid\*(C'\fR to use 128 random bits,
\&\f(CW\*(C`sha1\*(C'\fR to use a 160\-bit \s-1SHA1\s0 hash on the normative
parts of the output contents, \f(CW\*(C`md5\*(C'\fR to use a 128\-bit
\&\s-1MD5\s0 hash on the normative parts of the output contents, or
\&\f(CW\*(C`0x\f(CIhexstring\f(CW\*(C'\fR to use a chosen bit string specified as
an even number of hexadecimal digits (\f(CW\*(C`\-\*(C'\fR and \f(CW\*(C`:\*(C'\fR
characters between digit pairs are ignored).  If \fIstyle\fR is
omitted, \f(CW\*(C`sha1\*(C'\fR is used.
.Sp
The \f(CW\*(C`md5\*(C'\fR and \f(CW\*(C`sha1\*(C'\fR styles produces an identifier
that is always the same in an identical output file, but will be
unique among all nonidentical output files.  It is not intended
to be compared as a checksum for the file's contents.  A linked
file may be changed later by other tools, but the build \s-1ID\s0 bit
string identifying the original linked file does not change.
.Sp
Passing \f(CW\*(C`none\*(C'\fR for \fIstyle\fR disables the setting from any
\&\f(CW\*(C`\-\-build\-id\*(C'\fR options earlier on the command line.
d1264 1
a1264 1
The i386 \s-1PE\s0 linker supports the \fB\-shared\fR option, which causes
d1277 1
a1277 1
.IP "\fB\-\-add\-stdcall\-alias\fR" 4
d1281 1
a1281 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-base\-file\fR \fIfile\fR" 4
d1286 1
a1286 2
[This is an i386 \s-1PE\s0 specific option]
.IP "\fB\-\-dll\fR" 4
d1289 1
a1289 1
\&\fB\-shared\fR or specify a \f(CW\*(C`LIBRARY\*(C'\fR in a given \f(CW\*(C`.def\*(C'\fR
d1291 1
a1291 25
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-long\-section\-names\fR" 4
.IX Item "--enable-long-section-names"
.PD 0
.IP "\fB\-\-disable\-long\-section\-names\fR" 4
.IX Item "--disable-long-section-names"
.PD
The \s-1PE\s0 variants of the Coff object format add an extension that permits
the use of section names longer than eight characters, the normal limit
for Coff.  By default, these names are only allowed in object files, as
fully-linked executable images do not carry the Coff string table required
to support the longer names.  As a \s-1GNU\s0 extension, it is possible to
allow their use in executable images as well, or to (probably pointlessly!)
disallow it in object files, by using these two options.  Executable images
generated with these long section names are slightly non-standard, carrying
as they do a string table, and may generate confusing output when examined
with non-GNU PE-aware tools, such as file viewers and dumpers.  However, 
\&\s-1GDB\s0 relies on the use of \s-1PE\s0 long section names to find Dwarf\-2 debug 
information sections in an executable image at runtime, and so if neither
option is specified on the command-line, \fBld\fR will enable long
section names, overriding the default and technically correct behaviour,
when it finds the presence of debug information while linking an executable
image and not stripping symbols.
[This option is valid for all \s-1PE\s0 targeted ports of the linker]
.IP "\fB\-\-enable\-stdcall\-fixup\fR" 4
d1293 1
a1293 2
.PD 0
.IP "\fB\-\-disable\-stdcall\-fixup\fR" 4
a1294 1
.PD
d1304 1
a1304 1
to be usable.  If you specify \fB\-\-enable\-stdcall\-fixup\fR, this
d1306 1
a1306 1
\&\fB\-\-disable\-stdcall\-fixup\fR, this feature is disabled and such
d1308 1
a1308 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-export\-all\-symbols\fR" 4
d1316 3
a1318 18
\&\f(CW\*(C`DllEntryPoint@@0\*(C'\fR, \f(CW\*(C`DllMainCRTStartup@@12\*(C'\fR, and
\&\f(CW\*(C`impure_ptr\*(C'\fR will not be automatically
exported.  Also, symbols imported from other DLLs will not be
re-exported, nor will symbols specifying the \s-1DLL\s0's internal layout
such as those beginning with \f(CW\*(C`_head_\*(C'\fR or ending with
\&\f(CW\*(C`_iname\*(C'\fR.  In addition, no symbols from \f(CW\*(C`libgcc\*(C'\fR,
\&\f(CW\*(C`libstd++\*(C'\fR, \f(CW\*(C`libmingw32\*(C'\fR, or \f(CW\*(C`crtX.o\*(C'\fR will be exported.
Symbols whose names begin with \f(CW\*(C`_\|_rtti_\*(C'\fR or \f(CW\*(C`_\|_builtin_\*(C'\fR will
not be exported, to help with \*(C+ DLLs.  Finally, there is an
extensive list of cygwin-private symbols that are not exported
(obviously, this applies on when building DLLs for cygwin targets).
These cygwin-excludes are: \f(CW\*(C`_cygwin_dll_entry@@12\*(C'\fR,
\&\f(CW\*(C`_cygwin_crt0_common@@8\*(C'\fR, \f(CW\*(C`_cygwin_noncygwin_dll_entry@@12\*(C'\fR,
\&\f(CW\*(C`_fmode\*(C'\fR, \f(CW\*(C`_impure_ptr\*(C'\fR, \f(CW\*(C`cygwin_attach_dll\*(C'\fR,
\&\f(CW\*(C`cygwin_premain0\*(C'\fR, \f(CW\*(C`cygwin_premain1\*(C'\fR, \f(CW\*(C`cygwin_premain2\*(C'\fR,
\&\f(CW\*(C`cygwin_premain3\*(C'\fR, and \f(CW\*(C`environ\*(C'\fR.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-exclude\-symbols\fR \fIsymbol\fR\fB,\fR\fIsymbol\fR\fB,...\fR" 4
d1322 1
a1322 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-file\-alignment\fR" 4
d1327 1
a1327 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-heap\fR \fIreserve\fR" 4
d1329 1
a1329 2
.PD 0
.IP "\fB\-\-heap\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
d1331 2
a1332 3
.PD
Specify the number of bytes of memory to reserve (and optionally commit)
to be used as heap for this program.  The default is 1Mb reserved, 4K
d1334 1
a1334 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-image\-base\fR \fIvalue\fR" 4
d1342 1
a1342 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-kill\-at\fR" 4
d1346 1
a1346 10
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-large\-address\-aware\fR" 4
.IX Item "--large-address-aware"
If given, the appropriate bit in the \*(L"Characteristics\*(R" field of the \s-1COFF\s0
header is set to indicate that this executable supports virtual addresses
greater than 2 gigabytes.  This should be used in conjunction with the /3GB
or /USERVA=\fIvalue\fR megabytes switch in the \*(L"[operating systems]\*(R"
section of the \s-1BOOT\s0.INI.  Otherwise, this bit has no effect.
[This option is specific to \s-1PE\s0 targeted ports of the linker]
.IP "\fB\-\-major\-image\-version\fR \fIvalue\fR" 4
d1349 1
a1349 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-major\-os\-version\fR \fIvalue\fR" 4
d1352 1
a1352 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-major\-subsystem\-version\fR \fIvalue\fR" 4
d1355 1
a1355 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-image\-version\fR \fIvalue\fR" 4
d1358 1
a1358 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-os\-version\fR \fIvalue\fR" 4
d1361 1
a1361 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-subsystem\-version\fR \fIvalue\fR" 4
d1364 1
a1364 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-output\-def\fR \fIfile\fR" 4
d1371 1
a1371 188
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-out\-implib\fR \fIfile\fR" 4
.IX Item "--out-implib file"
The linker will create the file \fIfile\fR which will contain an
import lib corresponding to the \s-1DLL\s0 the linker is generating. This
import lib (which should be called \f(CW\*(C`*.dll.a\*(C'\fR or \f(CW\*(C`*.a\*(C'\fR
may be used to link clients against the generated \s-1DLL\s0; this behaviour
makes it possible to skip a separate \f(CW\*(C`dlltool\*(C'\fR import library
creation step.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-auto\-image\-base\fR" 4
.IX Item "--enable-auto-image-base"
Automatically choose the image base for DLLs, unless one is specified
using the \f(CW\*(C`\-\-image\-base\*(C'\fR argument.  By using a hash generated
from the dllname to create unique image bases for each \s-1DLL\s0, in-memory
collisions and relocations which can delay program execution are
avoided.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-auto\-image\-base\fR" 4
.IX Item "--disable-auto-image-base"
Do not automatically generate a unique image base.  If there is no
user-specified image base (\f(CW\*(C`\-\-image\-base\*(C'\fR) then use the platform
default.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-dll\-search\-prefix\fR \fIstring\fR" 4
.IX Item "--dll-search-prefix string"
When linking dynamically to a dll without an import library,
search for \f(CW\*(C`<string><basename>.dll\*(C'\fR in preference to
\&\f(CW\*(C`lib<basename>.dll\*(C'\fR. This behaviour allows easy distinction
between DLLs built for the various \*(L"subplatforms\*(R": native, cygwin,
uwin, pw, etc.  For instance, cygwin DLLs typically use
\&\f(CW\*(C`\-\-dll\-search\-prefix=cyg\*(C'\fR.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-auto\-import\fR" 4
.IX Item "--enable-auto-import"
Do sophisticated linking of \f(CW\*(C`_symbol\*(C'\fR to \f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for
\&\s-1DATA\s0 imports from DLLs, and create the necessary thunking symbols when
building the import libraries with those \s-1DATA\s0 exports. Note: Use of the
\&'auto\-import' extension will cause the text section of the image file
to be made writable. This does not conform to the PE-COFF format
specification published by Microsoft.
.Sp
Note \- use of the 'auto\-import' extension will also cause read only
data which would normally be placed into the .rdata section to be
placed into the .data section instead.  This is in order to work
around a problem with consts that is described here:
http://www.cygwin.com/ml/cygwin/2004\-09/msg01101.html
.Sp
Using 'auto\-import' generally will 'just work' \*(-- but sometimes you may
see this message:
.Sp
"variable '<var>' can't be auto-imported. Please read the
documentation for ld's \f(CW\*(C`\-\-enable\-auto\-import\*(C'\fR for details."
.Sp
This message occurs when some (sub)expression accesses an address
ultimately given by the sum of two constants (Win32 import tables only
allow one).  Instances where this may occur include accesses to member
fields of struct variables imported from a \s-1DLL\s0, as well as using a
constant index into an array variable imported from a \s-1DLL\s0.  Any
multiword variable (arrays, structs, long long, etc) may trigger
this error condition.  However, regardless of the exact data type
of the offending exported variable, ld will always detect it, issue
the warning, and exit.
.Sp
There are several ways to address this difficulty, regardless of the
data type of the exported variable:
.Sp
One way is to use \-\-enable\-runtime\-pseudo\-reloc switch. This leaves the task
of adjusting references in your client code for runtime environment, so
this method works only when runtime environment supports this feature.
.Sp
A second solution is to force one of the 'constants' to be a variable \*(--
that is, unknown and un-optimizable at compile time.  For arrays,
there are two possibilities: a) make the indexee (the array's address)
a variable, or b) make the 'constant' index a variable.  Thus:
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] \-\->
\&           { volatile type *t=extern_array; t[1] }
.Ve
.Sp
or
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] \-\->
\&           { volatile int t=1; extern_array[t] }
.Ve
.Sp
For structs (and most other multiword data types) the only option
is to make the struct itself (or the long long, or the ...) variable:
.Sp
.Vb 3
\&        extern struct s extern_struct;
\&        extern_struct.field \-\->
\&           { volatile struct s *t=&extern_struct; t\->field }
.Ve
.Sp
or
.Sp
.Vb 3
\&        extern long long extern_ll;
\&        extern_ll \-\->
\&          { volatile long long * local_ll=&extern_ll; *local_ll }
.Ve
.Sp
A third method of dealing with this difficulty is to abandon
\&'auto\-import' for the offending symbol and mark it with
\&\f(CW\*(C`_\|_declspec(dllimport)\*(C'\fR.  However, in practise that
requires using compile-time #defines to indicate whether you are
building a \s-1DLL\s0, building client code that will link to the \s-1DLL\s0, or
merely building/linking to a static library.   In making the choice
between the various methods of resolving the 'direct address with
constant offset' problem, you should consider typical real-world usage:
.Sp
Original:
.Sp
.Vb 7
\&        \-\-foo.h
\&        extern int arr[];
\&        \-\-foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
.Sp
Solution 1:
.Sp
.Vb 9
\&        \-\-foo.h
\&        extern int arr[];
\&        \-\-foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          /* This workaround is for win32 and cygwin; do not "optimize" */
\&          volatile int *parr = arr;
\&          printf("%d\en",parr[1]);
\&        }
.Ve
.Sp
Solution 2:
.Sp
.Vb 10
\&        \-\-foo.h
\&        /* Note: auto\-export is assumed (no _\|_declspec(dllexport)) */
\&        #if (defined(_WIN32) || defined(_\|_CYGWIN_\|_)) && \e
\&          !(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))
\&        #define FOO_IMPORT _\|_declspec(dllimport)
\&        #else
\&        #define FOO_IMPORT
\&        #endif
\&        extern FOO_IMPORT int arr[];
\&        \-\-foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
.Sp
A fourth way to avoid this problem is to re-code your
library to use a functional interface rather than a data interface
for the offending variables (e.g. \fIset_foo()\fR and \fIget_foo()\fR accessor
functions).
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-auto\-import\fR" 4
.IX Item "--disable-auto-import"
Do not attempt to do sophisticated linking of \f(CW\*(C`_symbol\*(C'\fR to
\&\f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for \s-1DATA\s0 imports from DLLs.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-runtime\-pseudo\-reloc\fR" 4
.IX Item "--enable-runtime-pseudo-reloc"
If your code contains expressions described in \-\-enable\-auto\-import section,
that is, \s-1DATA\s0 imports from \s-1DLL\s0 with non-zero offset, this switch will create
a vector of 'runtime pseudo relocations' which can be used by runtime
environment to adjust references to such data in your client code.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-runtime\-pseudo\-reloc\fR" 4
.IX Item "--disable-runtime-pseudo-reloc"
Do not create pseudo relocations for non-zero offset \s-1DATA\s0 imports from
DLLs.  This is the default.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-extra\-pe\-debug\fR" 4
.IX Item "--enable-extra-pe-debug"
Show additional debug info related to auto-import symbol thunking.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-section\-alignment\fR" 4
d1375 1
a1375 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-stack\fR \fIreserve\fR" 4
d1377 1
a1377 2
.PD 0
.IP "\fB\-\-stack\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
d1379 2
a1380 3
.PD
Specify the number of bytes of memory to reserve (and optionally commit)
to be used as stack for this program.  The default is 2Mb reserved, 4K
d1382 1
a1382 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-subsystem\fR \fIwhich\fR" 4
d1384 1
a1384 2
.PD 0
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR" 4
d1386 1
a1386 1
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR\fB.\fR\fIminor\fR" 4
a1387 1
.PD
d1390 2
a1391 59
\&\f(CW\*(C`console\*(C'\fR, \f(CW\*(C`posix\*(C'\fR, and \f(CW\*(C`xbox\*(C'\fR.  You may optionally set
the subsystem version also.  Numeric values are also accepted for
\&\fIwhich\fR.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.Sp
The following options set flags in the \f(CW\*(C`DllCharacteristics\*(C'\fR field
of the \s-1PE\s0 file header:
[These options are specific to \s-1PE\s0 targeted ports of the linker]
.IP "\fB\-\-dynamicbase\fR" 4
.IX Item "--dynamicbase"
The image base address may be relocated using address space layout
randomization (\s-1ASLR\s0).  This feature was introduced with \s-1MS\s0 Windows
Vista for i386 \s-1PE\s0 targets.
.IP "\fB\-\-forceinteg\fR" 4
.IX Item "--forceinteg"
Code integrity checks are enforced.
.IP "\fB\-\-nxcompat\fR" 4
.IX Item "--nxcompat"
The image is compatible with the Data Execution Prevention.
This feature was introduced with \s-1MS\s0 Windows \s-1XP\s0 \s-1SP2\s0 for i386 \s-1PE\s0 targets.
.IP "\fB\-\-no\-isolation\fR" 4
.IX Item "--no-isolation"
Although the image understands isolation, do not isolate the image.
.IP "\fB\-\-no\-seh\fR" 4
.IX Item "--no-seh"
The image does not use \s-1SEH\s0. No \s-1SE\s0 handler may be called from
this image.
.IP "\fB\-\-no\-bind\fR" 4
.IX Item "--no-bind"
Do not bind this image.
.IP "\fB\-\-wdmdriver\fR" 4
.IX Item "--wdmdriver"
The driver uses the \s-1MS\s0 Windows Driver Model.
.IP "\fB\-\-tsaware\fR" 4
.IX Item "--tsaware"
The image is Terminal Server aware.
.PP
The 68HC11 and 68HC12 linkers support specific options to control the
memory bank switching mapping and trampoline code generation.
.IP "\fB\-\-no\-trampoline\fR" 4
.IX Item "--no-trampoline"
This option disables the generation of trampoline. By default a trampoline
is generated for each far function which is called using a \f(CW\*(C`jsr\*(C'\fR
instruction (this happens when a pointer to a far function is taken).
.IP "\fB\-\-bank\-window\fR \fIname\fR" 4
.IX Item "--bank-window name"
This option indicates to the linker the name of the memory region in
the \fB\s-1MEMORY\s0\fR specification that describes the memory bank window.
The definition of such region is then used by the linker to compute
paging and addresses within the memory window.
.PP
The following options are supported to control handling of \s-1GOT\s0 generation
when linking for 68K targets.
.IP "\fB\-\-got=\fR\fItype\fR" 4
.IX Item "--got=type"
This option tells the linker which \s-1GOT\s0 generation scheme to use.
\&\fItype\fR should be one of \fBsingle\fR, \fBnegative\fR,
\&\fBmultigot\fR or \fBtarget\fR.  For more information refer to the
Info entry for \fIld\fR.
d1394 2
a1395 3
You can change the behaviour of \fBld\fR with the environment variables
\&\f(CW\*(C`GNUTARGET\*(C'\fR,
\&\f(CW\*(C`LDEMULATION\*(C'\fR and \f(CW\*(C`COLLECT_NO_DEMANGLE\*(C'\fR.
d1398 1
a1398 1
use \fB\-b\fR (or its synonym \fB\-\-format\fR).  Its value should be one
d1400 1
a1400 1
\&\f(CW\*(C`GNUTARGET\*(C'\fR in the environment, \fBld\fR uses the natural format
d1412 1
a1412 1
available emulations with the \fB\-\-verbose\fR or \fB\-V\fR options.  If
d1421 1
a1421 1
may be overridden by the \fB\-\-demangle\fR and \fB\-\-no\-demangle\fR
d1430 1
a1430 2
Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001,
2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.
d1433 1
a1433 1
under the terms of the \s-1GNU\s0 Free Documentation License, Version 1.3
@


1.12.16.1
log
@Generated files for binutils 2.19.
@
text
@d1 2
a2 1
.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
d5 1
a5 1
.\" ========================================================================
d18 6
d31 1
d37 3
a39 3
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
d49 2
a50 2
.    ds C` ""
.    ds C' ""
d59 4
a62 4
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
d66 1
a66 1
..
d71 2
a72 2
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
d77 1
d137 1
a137 1
.\" ========================================================================
d140 2
a141 1
.TH LD 1 "2008-09-10" "binutils-2.18.90" "GNU Development Tools"
d143 1
a143 1
ld \- The GNU linker
d146 1
a146 1
ld [\fBoptions\fR] \fIobjfile\fR ...
d149 1
a149 1
\&\fBld\fR combines a number of object and archive files, relocates
d151 1
a151 1
compiling a program is to run \fBld\fR.
d153 1
a153 1
\&\fBld\fR accepts Linker Command Language files written in
d157 4
a160 3
This man page does not describe the command language; see the
\&\fBld\fR entry in \f(CW\*(C`info\*(C'\fR for full details on the command
language and on other aspects of the \s-1GNU\s0 linker.
d162 2
a163 2
This version of \fBld\fR uses the general purpose \s-1BFD\s0 libraries
to operate on object files. This allows \fBld\fR to read, combine, and
d171 1
a171 1
\&\fBld\fR continues executing, allowing you to identify other errors
d174 1
a174 1
The \s-1GNU\s0 linker \fBld\fR is meant to cover a broad range of situations,
d181 1
a181 1
For instance, a frequent use of \fBld\fR is to link standard Unix
d186 1
a186 1
\&        ld -o <output> /lib/crt0.o hello.o -lc
d188 1
a188 2
.PP
This tells \fBld\fR to produce a file called \fIoutput\fR as the
d193 1
a193 1
Some of the command-line options to \fBld\fR may be specified at any
d214 1
a214 1
If the linker cannot recognize the format of an object file, it will
d220 5
a224 5
\&\f(CW\*(C`INPUT\*(C'\fR or \f(CW\*(C`GROUP\*(C'\fR to load other objects.  Specifying a
script in this way merely augments the main linker script, with the
extra commands placed after the main script; use the \fB\-T\fR option
to replace the default linker script entirely, but note the effect of
the \f(CW\*(C`INSERT\*(C'\fR command.  
d232 2
a233 2
precede the option name; for example, \fB\-trace\-symbol\fR and
\&\fB\-\-trace\-symbol\fR are equivalent.  Note\-\-\-there is one exception to
d235 1
a235 1
only be preceded by two dashes.  This is to reduce confusion with the
d237 1
a237 1
name to \fBmagic\fR whereas \fB\-\-omagic\fR sets the \s-1NMAGIC\s0 flag on the
d243 1
a243 1
\&\fB\-\-trace\-symbol foo\fR and \fB\-\-trace\-symbol=foo\fR are equivalent.
d247 2
a248 2
Note\-\-\-if the linker is being invoked indirectly, via a compiler driver
(e.g. \fBgcc\fR) then all the linker command line options should be
a254 1
.PP
d260 1
a260 14
.IP "\fB@@\fR\fIfile\fR" 4
.IX Item "@@file"
Read command-line options from \fIfile\fR.  The options read are
inserted in place of the original @@\fIfile\fR option.  If \fIfile\fR
does not exist, or cannot be read, then the option will be treated
literally, and not removed.  
.Sp
Options in \fIfile\fR are separated by whitespace.  A whitespace
character may be included in an option by surrounding the entire
option in either single or double quotes.  Any character (including a
backslash) may be included by prefixing the character to be included
with a backslash.  The \fIfile\fR may itself contain additional
@@\fIfile\fR options; any such options will be processed recursively.
.IP "\fB\-a\fR\fIkeyword\fR" 4
d267 1
a267 1
.IP "\fB\-A\fR\fIarchitecture\fR" 4
d269 1
a269 2
.PD 0
.IP "\fB\-\-architecture=\fR\fIarchitecture\fR" 4
d271 2
a272 3
.PD
In the current release of \fBld\fR, this option is useful only for the
Intel 960 family of architectures.  In that \fBld\fR configuration, the
d277 1
a277 1
Future releases of \fBld\fR may support similar functionality for
d279 1
a279 1
.IP "\fB\-b\fR \fIinput-format\fR" 4
d281 1
a281 2
.PD 0
.IP "\fB\-\-format=\fR\fIinput-format\fR" 4
d283 2
a284 3
.PD
\&\fBld\fR may be configured to support more than one kind of object
file.  If your \fBld\fR is configured this way, you can use the
d286 1
a286 1
that follow this option on the command line.  Even when \fBld\fR is
d288 1
a288 1
to specify this, as \fBld\fR should be configured to expect as a
d305 1
a305 1
.IP "\fB\-c\fR \fIMRI-commandfile\fR" 4
d307 1
a307 2
.PD 0
.IP "\fB\-\-mri\-script=\fR\fIMRI-commandfile\fR" 4
d309 1
a309 2
.PD
For compatibility with linkers produced by \s-1MRI\s0, \fBld\fR accepts script
d314 2
a315 2
scripts written in the general-purpose \fBld\fR scripting language.
If \fIMRI-cmdfile\fR does not exist, \fBld\fR looks for it in the directories
d317 1
a317 1
.IP "\fB\-d\fR" 4
d319 1
a319 2
.PD 0
.IP "\fB\-dc\fR" 4
d321 1
a321 1
.IP "\fB\-dp\fR" 4
a322 1
.PD
d327 1
a327 1
.IP "\fB\-e\fR \fIentry\fR" 4
d329 1
a329 2
.PD 0
.IP "\fB\-\-entry=\fR\fIentry\fR" 4
a330 1
.PD
d337 1
a337 11
.IP "\fB\-\-exclude\-libs\fR \fIlib\fR\fB,\fR\fIlib\fR\fB,...\fR" 4
.IX Item "--exclude-libs lib,lib,..."
Specifies a list of archive libraries from which symbols should not be automatically
exported. The library names may be delimited by commas or colons.  Specifying
\&\f(CW\*(C`\-\-exclude\-libs ALL\*(C'\fR excludes symbols in all archive libraries from
automatic export.  This option is available only for the i386 \s-1PE\s0 targeted
port of the linker and for \s-1ELF\s0 targeted ports.  For i386 \s-1PE\s0, symbols
explicitly listed in a .def file are still exported, regardless of this
option.  For \s-1ELF\s0 targeted ports, symbols affected by this option will
be treated as hidden.
.IP "\fB\-E\fR" 4
d339 1
a339 2
.PD 0
.IP "\fB\-\-export\-dynamic\fR" 4
a340 1
.PD
d353 1
a353 5
.Sp
You can also use the dynamic list to control what symbols should
be added to the dynamic symbol table if the output format supports it.
See the description of \fB\-\-dynamic\-list\fR.
.IP "\fB\-EB\fR" 4
d356 1
a356 1
.IP "\fB\-EL\fR" 4
d359 1
a359 1
.IP "\fB\-f\fR" 4
d361 1
a361 2
.PD 0
.IP "\fB\-\-auxiliary\fR \fIname\fR" 4
a362 1
.PD
d380 1
a380 1
.IP "\fB\-F\fR \fIname\fR" 4
d382 1
a382 2
.PD 0
.IP "\fB\-\-filter\fR \fIname\fR" 4
a383 1
.PD
d397 1
a397 1
Some older linkers used the \fB\-F\fR option throughout a compilation
d399 2
a400 3
object files.
The \s-1GNU\s0 linker uses other mechanisms for this purpose: the
\&\fB\-b\fR, \fB\-\-format\fR, \fB\-\-oformat\fR options, the
d402 3
a404 4
environment variable.
The \s-1GNU\s0 linker will ignore the \fB\-F\fR option when not
creating an \s-1ELF\s0 shared object.
.IP "\fB\-fini\fR \fIname\fR" 4
d410 1
a410 1
.IP "\fB\-g\fR" 4
d413 1
a413 1
.IP "\fB\-G\fR\fIvalue\fR" 4
d415 1
a415 2
.PD 0
.IP "\fB\-\-gpsize=\fR\fIvalue\fR" 4
a416 1
.PD
d421 1
a421 1
.IP "\fB\-h\fR\fIname\fR" 4
d423 1
a423 2
.PD 0
.IP "\fB\-soname=\fR\fIname\fR" 4
a424 1
.PD
d430 1
a430 1
.IP "\fB\-i\fR" 4
d433 1
a433 1
.IP "\fB\-init\fR \fIname\fR" 4
d439 15
a453 20
.IP "\fB\-l\fR\fInamespec\fR" 4
.IX Item "-lnamespec"
.PD 0
.IP "\fB\-\-library=\fR\fInamespec\fR" 4
.IX Item "--library=namespec"
.PD
Add the archive or object file specified by \fInamespec\fR to the
list of files to link.  This option may be used any number of times.
If \fInamespec\fR is of the form \fI:\fIfilename\fI\fR, \fBld\fR
will search the library path for a file called \fIfilename\fR, otherise it
will search the library path for a file called \fIlib\fInamespec\fI.a\fR.
.Sp
On systems which support shared libraries, \fBld\fR may also search for
files other than \fIlib\fInamespec\fI.a\fR.  Specifically, on \s-1ELF\s0
and SunOS systems, \fBld\fR will search a directory for a library
called \fIlib\fInamespec\fI.so\fR before searching for one called
\&\fIlib\fInamespec\fI.a\fR.  (By convention, a \f(CW\*(C`.so\*(C'\fR extension
indicates a shared library.)  Note that this behavior does not apply
to \fI:\fIfilename\fI\fR, which always specifies a file called
\&\fIfilename\fR.
d458 1
a458 1
command line, the linker will include the appropriate file(s) from the
d462 1
a462 1
See the \fB\-(\fR option for a way to force the linker to search
d468 1
a468 1
if you are using \fBld\fR on \s-1AIX\s0, note that it is different from the
d470 1
a470 1
.IP "\fB\-L\fR\fIsearchdir\fR" 4
d472 1
a472 2
.PD 0
.IP "\fB\-\-library\-path=\fR\fIsearchdir\fR" 4
d474 2
a475 3
.PD
Add path \fIsearchdir\fR to the list of paths that \fBld\fR will search
for archive libraries and \fBld\fR control scripts.  You may use this
d479 1
a479 1
\&\fB\-L\fR options apply to all \fB\-l\fR options, regardless of the
a481 3
If \fIsearchdir\fR begins with \f(CW\*(C`=\*(C'\fR, then the \f(CW\*(C`=\*(C'\fR will be replaced
by the \fIsysroot prefix\fR, a path specified when the linker is configured.
.Sp
d483 1
a483 1
\&\fB\-L\fR) depends on which emulation mode \fBld\fR is using, and in
d489 1
a489 1
.IP "\fB\-m\fR\fIemulation\fR" 4
d492 1
a492 1
emulations with the \fB\-\-verbose\fR or \fB\-V\fR options.
d499 1
a499 1
.IP "\fB\-M\fR" 4
d501 1
a501 2
.PD 0
.IP "\fB\-\-print\-map\fR" 4
a502 1
.PD
d506 3
a508 3
.IP "*" 4
Where object files are mapped into memory.
.IP "*" 4
d510 1
a510 1
.IP "*" 4
a512 28
.IP "*" 4
The values assigned to symbols.
.Sp
Note \- symbols whose values are computed by an expression which
involves a reference to a previous value of the same symbol may not
have correct result displayed in the link map.  This is because the
linker discards intermediate results and only retains the final value
of an expression.  Under such circumstances the linker will display
the final value enclosed by square brackets.  Thus for example a
linker script containing:
.Sp
.Vb 3
\&           foo = 1
\&           foo = foo * 4
\&           foo = foo + 8
.Ve
.Sp
will produce the following output in the link map if the \fB\-M\fR
option is used:
.Sp
.Vb 3
\&           0x00000001                foo = 0x1
\&           [0x0000000c]                foo = (foo * 0x4)
\&           [0x0000000c]                foo = (foo + 0x8)
.Ve
.Sp
See \fBExpressions\fR for more information about expressions in linker
scripts.
d516 1
a516 1
.IP "\fB\-n\fR" 4
d518 1
a518 2
.PD 0
.IP "\fB\-\-nmagic\fR" 4
a519 1
.PD
d522 1
a522 1
.IP "\fB\-N\fR" 4
d524 1
a524 2
.PD 0
.IP "\fB\-\-omagic\fR" 4
a525 1
.PD
d527 3
a529 12
not page-align the data segment, and disable linking against shared
libraries.  If the output format supports Unix style magic numbers,
mark the output as \f(CW\*(C`OMAGIC\*(C'\fR. Note: Although a writable text section
is allowed for PE-COFF targets, it does not conform to the format
specification published by Microsoft.
.IP "\fB\-\-no\-omagic\fR" 4
.IX Item "--no-omagic"
This option negates most of the effects of the \fB\-N\fR option.  It
sets the text section to be read\-only, and forces the data segment to
be page\-aligned.  Note \- this option does not enable linking against
shared libraries.  Use \fB\-Bdynamic\fR for this.
.IP "\fB\-o\fR \fIoutput\fR" 4
d531 1
a531 2
.PD 0
.IP "\fB\-\-output=\fR\fIoutput\fR" 4
d533 1
a533 2
.PD
Use \fIoutput\fR as the name for the program produced by \fBld\fR; if this
d536 1
a536 1
.IP "\fB\-O\fR \fIlevel\fR" 4
d538 1
a538 1
If \fIlevel\fR is a numeric values greater than zero \fBld\fR optimizes
d540 2
a541 6
should only be enabled for the final binary.  At the moment this
option only affects \s-1ELF\s0 shared library generation.  Future releases of
the linker may make more use of this option.  Also currently there is
no difference in the linker's behaviour for different non-zero values
of this option.  Again this may change with future releases.
.IP "\fB\-q\fR" 4
d543 1
a543 2
.PD 0
.IP "\fB\-\-emit\-relocs\fR" 4
d545 1
a545 2
.PD
Leave relocation sections and contents in fully linked executables.
d549 1
a549 7
.Sp
This option is currently only supported on \s-1ELF\s0 platforms.
.IP "\fB\-\-force\-dynamic\fR" 4
.IX Item "--force-dynamic"
Force the output file to have dynamic sections.  This option is specific
to VxWorks targets.
.IP "\fB\-r\fR" 4
d551 2
a552 4
.PD 0
.IP "\fB\-\-relocatable\fR" 4
.IX Item "--relocatable"
.PD
d554 1
a554 1
turn serve as input to \fBld\fR.  This is often called \fIpartial
a561 6
When an input file does not have the same format as the output file,
partial linking is only supported if that input file does not contain any
relocations.  Different output formats can have further restrictions; for
example some \f(CW\*(C`a.out\*(C'\fR\-based formats do not support partial linking
with input files in other formats at all.
.Sp
d563 1
a563 1
.IP "\fB\-R\fR \fIfilename\fR" 4
d565 1
a565 2
.PD 0
.IP "\fB\-\-just\-symbols=\fR\fIfilename\fR" 4
a566 1
.PD
d572 1
a572 1
For compatibility with other \s-1ELF\s0 linkers, if the \fB\-R\fR option is
d574 2
a575 2
the \fB\-rpath\fR option.
.IP "\fB\-s\fR" 4
d577 1
a577 2
.PD 0
.IP "\fB\-\-strip\-all\fR" 4
a578 1
.PD
d580 1
a580 1
.IP "\fB\-S\fR" 4
d582 1
a582 2
.PD 0
.IP "\fB\-\-strip\-debug\fR" 4
a583 1
.PD
d585 1
a585 1
.IP "\fB\-t\fR" 4
d587 1
a587 2
.PD 0
.IP "\fB\-\-trace\fR" 4
d589 2
a590 3
.PD
Print the names of the input files as \fBld\fR processes them.
.IP "\fB\-T\fR \fIscriptfile\fR" 4
d592 1
a592 2
.PD 0
.IP "\fB\-\-script=\fR\fIscriptfile\fR" 4
a593 1
.PD
d595 1
a595 1
\&\fBld\fR's default linker script (rather than adding to it), so
d597 7
a603 21
output file.    If \fIscriptfile\fR does not exist in
the current directory, \f(CW\*(C`ld\*(C'\fR looks for it in the directories
specified by any preceding \fB\-L\fR options.  Multiple \fB\-T\fR
options accumulate.
.IP "\fB\-dT\fR \fIscriptfile\fR" 4
.IX Item "-dT scriptfile"
.PD 0
.IP "\fB\-\-default\-script=\fR\fIscriptfile\fR" 4
.IX Item "--default-script=scriptfile"
.PD
Use \fIscriptfile\fR as the default linker script.  
.Sp
This option is similar to the \fB\-\-script\fR option except that
processing of the script is delayed until after the rest of the
command line has been processed.  This allows options placed after the
\&\fB\-\-default\-script\fR option on the command line to affect the
behaviour of the linker script, which can be important when the linker
command line cannot be directly controlled by the user.  (eg because
the command line is being constructed by another tool, such as
\&\fBgcc\fR).
.IP "\fB\-u\fR \fIsymbol\fR" 4
d605 1
a605 2
.PD 0
.IP "\fB\-\-undefined=\fR\fIsymbol\fR" 4
a606 1
.PD
d612 1
a612 1
.IP "\fB\-Ur\fR" 4
d616 1
a616 1
turn serve as input to \fBld\fR.  When linking \*(C+ programs, \fB\-Ur\fR
d622 1
a622 1
.IP "\fB\-\-unique[=\fR\fI\s-1SECTION\s0\fR\fB]\fR" 4
d631 1
a631 1
.IP "\fB\-v\fR" 4
d633 1
a633 2
.PD 0
.IP "\fB\-\-version\fR" 4
d635 1
a635 1
.IP "\fB\-V\fR" 4
d637 1
a637 2
.PD
Display the version number for \fBld\fR.  The \fB\-V\fR option also
d639 1
a639 1
.IP "\fB\-x\fR" 4
d641 1
a641 2
.PD 0
.IP "\fB\-\-discard\-all\fR" 4
a642 1
.PD
d644 1
a644 1
.IP "\fB\-X\fR" 4
d646 1
a646 2
.PD 0
.IP "\fB\-\-discard\-locals\fR" 4
d648 3
a650 5
.PD
Delete all temporary local symbols.  (These symbols start with
system-specific local label prefixes, typically \fB.L\fR for \s-1ELF\s0 systems
or \fBL\fR for traditional a.out systems.)
.IP "\fB\-y\fR \fIsymbol\fR" 4
d652 1
a652 2
.PD 0
.IP "\fB\-\-trace\-symbol=\fR\fIsymbol\fR" 4
a653 1
.PD
d660 1
a660 1
.IP "\fB\-Y\fR \fIpath\fR" 4
d664 1
a664 1
.IP "\fB\-z\fR \fIkeyword\fR" 4
d666 17
a682 88
The recognized keywords are:
.RS 4
.IP "\fBcombreloc\fR" 4
.IX Item "combreloc"
Combines multiple reloc sections and sorts them to make dynamic symbol
lookup caching possible.
.IP "\fBdefs\fR" 4
.IX Item "defs"
Disallows undefined symbols in object files.  Undefined symbols in
shared libraries are still allowed.
.IP "\fBexecstack\fR" 4
.IX Item "execstack"
Marks the object as requiring executable stack.
.IP "\fBinitfirst\fR" 4
.IX Item "initfirst"
This option is only meaningful when building a shared object.
It marks the object so that its runtime initialization will occur
before the runtime initialization of any other objects brought into
the process at the same time.  Similarly the runtime finalization of
the object will occur after the runtime finalization of any other
objects.
.IP "\fBinterpose\fR" 4
.IX Item "interpose"
Marks the object that its symbol table interposes before all symbols
but the primary executable.
.IP "\fBlazy\fR" 4
.IX Item "lazy"
When generating an executable or shared library, mark it to tell the
dynamic linker to defer function call resolution to the point when
the function is called (lazy binding), rather than at load time.
Lazy binding is the default.
.IP "\fBloadfltr\fR" 4
.IX Item "loadfltr"
Marks  the object that its filters be processed immediately at
runtime.
.IP "\fBmuldefs\fR" 4
.IX Item "muldefs"
Allows multiple definitions.
.IP "\fBnocombreloc\fR" 4
.IX Item "nocombreloc"
Disables multiple reloc sections combining.
.IP "\fBnocopyreloc\fR" 4
.IX Item "nocopyreloc"
Disables production of copy relocs.
.IP "\fBnodefaultlib\fR" 4
.IX Item "nodefaultlib"
Marks the object that the search for dependencies of this object will
ignore any default library search paths.
.IP "\fBnodelete\fR" 4
.IX Item "nodelete"
Marks the object shouldn't be unloaded at runtime.
.IP "\fBnodlopen\fR" 4
.IX Item "nodlopen"
Marks the object not available to \f(CW\*(C`dlopen\*(C'\fR.
.IP "\fBnodump\fR" 4
.IX Item "nodump"
Marks the object can not be dumped by \f(CW\*(C`dldump\*(C'\fR.
.IP "\fBnoexecstack\fR" 4
.IX Item "noexecstack"
Marks the object as not requiring executable stack.
.IP "\fBnorelro\fR" 4
.IX Item "norelro"
Don't create an \s-1ELF\s0 \f(CW\*(C`PT_GNU_RELRO\*(C'\fR segment header in the object.
.IP "\fBnow\fR" 4
.IX Item "now"
When generating an executable or shared library, mark it to tell the
dynamic linker to resolve all symbols when the program is started, or
when the shared library is linked to using dlopen, instead of
deferring function call resolution to the point when the function is
first called.
.IP "\fBorigin\fR" 4
.IX Item "origin"
Marks the object may contain \f(CW$ORIGIN\fR.
.IP "\fBrelro\fR" 4
.IX Item "relro"
Create an \s-1ELF\s0 \f(CW\*(C`PT_GNU_RELRO\*(C'\fR segment header in the object.
.IP "\fBmax\-page\-size=\fR\fIvalue\fR" 4
.IX Item "max-page-size=value"
Set the emulation maximum page size to \fIvalue\fR.
.IP "\fBcommon\-page\-size=\fR\fIvalue\fR" 4
.IX Item "common-page-size=value"
Set the emulation common page size to \fIvalue\fR.
.RE
.RS 4
.Sp
Other keywords are ignored for Solaris compatibility.
.RE
.IP "\fB\-(\fR \fIarchives\fR \fB\-)\fR" 4
d684 1
a684 2
.PD 0
.IP "\fB\-\-start\-group\fR \fIarchives\fR \fB\-\-end\-group\fR" 4
a685 1
.PD
d701 1
a701 41
.IP "\fB\-\-accept\-unknown\-input\-arch\fR" 4
.IX Item "--accept-unknown-input-arch"
.PD 0
.IP "\fB\-\-no\-accept\-unknown\-input\-arch\fR" 4
.IX Item "--no-accept-unknown-input-arch"
.PD
Tells the linker to accept input files whose architecture cannot be
recognised.  The assumption is that the user knows what they are doing
and deliberately wants to link in these unknown input files.  This was
the default behaviour of the linker, before release 2.14.  The default
behaviour from release 2.14 onwards is to reject such input files, and
so the \fB\-\-accept\-unknown\-input\-arch\fR option has been added to
restore the old behaviour.
.IP "\fB\-\-as\-needed\fR" 4
.IX Item "--as-needed"
.PD 0
.IP "\fB\-\-no\-as\-needed\fR" 4
.IX Item "--no-as-needed"
.PD
This option affects \s-1ELF\s0 \s-1DT_NEEDED\s0 tags for dynamic libraries mentioned
on the command line after the \fB\-\-as\-needed\fR option.  Normally,
the linker will add a \s-1DT_NEEDED\s0 tag for each dynamic library mentioned
on the command line, regardless of whether the library is actually
needed.  \fB\-\-as\-needed\fR causes \s-1DT_NEEDED\s0 tags to only be emitted
for libraries that satisfy some symbol reference from regular objects
which is undefined at the point that the library was linked.
\&\fB\-\-no\-as\-needed\fR restores the default behaviour.
.IP "\fB\-\-add\-needed\fR" 4
.IX Item "--add-needed"
.PD 0
.IP "\fB\-\-no\-add\-needed\fR" 4
.IX Item "--no-add-needed"
.PD
This option affects the treatment of dynamic libraries from \s-1ELF\s0
\&\s-1DT_NEEDED\s0 tags in dynamic libraries mentioned on the command line after
the \fB\-\-no\-add\-needed\fR option.  Normally, the linker will add
a \s-1DT_NEEDED\s0 tag for each dynamic library from \s-1DT_NEEDED\s0 tags.
\&\fB\-\-no\-add\-needed\fR causes \s-1DT_NEEDED\s0 tags will never be emitted
for those libraries from \s-1DT_NEEDED\s0 tags. \fB\-\-add\-needed\fR restores
the default behaviour.
.IP "\fB\-assert\fR \fIkeyword\fR" 4
d704 1
a704 1
.IP "\fB\-Bdynamic\fR" 4
d706 1
a706 2
.PD 0
.IP "\fB\-dy\fR" 4
d708 1
a708 1
.IP "\fB\-call_shared\fR" 4
a709 1
.PD
d715 2
a716 2
\&\fB\-l\fR options which follow it.
.IP "\fB\-Bgroup\fR" 4
d721 3
a723 3
\&\fB\-\-unresolved\-symbols=report\-all\fR is implied.  This option is
only meaningful on \s-1ELF\s0 platforms which support shared libraries.
.IP "\fB\-Bstatic\fR" 4
d725 1
a725 2
.PD 0
.IP "\fB\-dn\fR" 4
d727 1
a727 1
.IP "\fB\-non_shared\fR" 4
d729 1
a729 1
.IP "\fB\-static\fR" 4
a730 1
.PD
d735 2
a736 7
library searching for \fB\-l\fR options which follow it.  This
option also implies \fB\-\-unresolved\-symbols=report\-all\fR.  This
option can be used with \fB\-shared\fR.  Doing so means that a
shared library is being created but that all of the library's external
references must be resolved by pulling in entries from static
libraries.
.IP "\fB\-Bsymbolic\fR" 4
d743 1
a743 29
.IP "\fB\-Bsymbolic\-functions\fR" 4
.IX Item "-Bsymbolic-functions"
When creating a shared library, bind references to global function
symbols to the definition within the shared library, if any.
This option is only meaningful on \s-1ELF\s0 platforms which support shared
libraries.
.IP "\fB\-\-dynamic\-list=\fR\fIdynamic-list-file\fR" 4
.IX Item "--dynamic-list=dynamic-list-file"
Specify the name of a dynamic list file to the linker.  This is
typically used when creating shared libraries to specify a list of
global symbols whose references shouldn't be bound to the definition
within the shared library, or creating dynamically linked executables
to specify a list of symbols which should be added to the symbol table
in the executable.  This option is only meaningful on \s-1ELF\s0 platforms
which support shared libraries.
.Sp
The format of the dynamic list is the same as the version node without
scope and node name.  See \fB\s-1VERSION\s0\fR for more information.
.IP "\fB\-\-dynamic\-list\-data\fR" 4
.IX Item "--dynamic-list-data"
Include all global data symbols to the dynamic list.
.IP "\fB\-\-dynamic\-list\-cpp\-new\fR" 4
.IX Item "--dynamic-list-cpp-new"
Provide the builtin dynamic list for \*(C+ operator new and delete.  It
is mainly useful for building shared libstdc++.
.IP "\fB\-\-dynamic\-list\-cpp\-typeinfo\fR" 4
.IX Item "--dynamic-list-cpp-typeinfo"
Provide the builtin dynamic list for \*(C+ runtime type identification.
.IP "\fB\-\-check\-sections\fR" 4
d745 1
a745 2
.PD 0
.IP "\fB\-\-no\-check\-sections\fR" 4
a746 1
.PD
d748 1
a748 1
been assigned to see if there are any overlaps.  Normally the linker will
d752 2
a753 2
restored by using the command line switch \fB\-\-check\-sections\fR.
.IP "\fB\-\-cref\fR" 4
d764 1
a764 16
.IP "\fB\-\-no\-define\-common\fR" 4
.IX Item "--no-define-common"
This option inhibits the assignment of addresses to common symbols.
The script command \f(CW\*(C`INHIBIT_COMMON_ALLOCATION\*(C'\fR has the same effect.
.Sp
The \fB\-\-no\-define\-common\fR option allows decoupling
the decision to assign addresses to Common symbols from the choice
of the output file type; otherwise a non-Relocatable output type
forces assigning addresses to Common symbols.
Using \fB\-\-no\-define\-common\fR allows Common symbols that are referenced
from a shared library to be assigned addresses only in the main program.
This eliminates the unused duplicate space in the shared library,
and also prevents any possible confusion over resolving to the wrong
duplicate when there are many dynamic modules with specialized search
paths for runtime symbol resolution.
.IP "\fB\-\-defsym\fR \fIsymbol\fR\fB=\fR\fIexpression\fR" 4
d774 1
a774 1
space between \fIsymbol\fR, the equals sign ("\fB=\fR"), and
d776 1
a776 1
.IP "\fB\-\-demangle[=\fR\fIstyle\fR\fB]\fR" 4
d778 1
a778 2
.PD 0
.IP "\fB\-\-no\-demangle\fR" 4
a779 1
.PD
d789 1
a789 1
.IP "\fB\-\-dynamic\-linker\fR \fIfile\fR" 4
d795 8
a802 1
.IP "\fB\-\-fatal\-warnings\fR" 4
d804 2
a805 7
.PD 0
.IP "\fB\-\-no\-fatal\-warnings\fR" 4
.IX Item "--no-fatal-warnings"
.PD
Treat all warnings as errors.  The default behaviour can be restored
with the option \fB\-\-no\-fatal\-warnings\fR.
.IP "\fB\-\-force\-exe\-suffix\fR" 4
d815 3
a817 1
.IP "\fB\-\-gc\-sections\fR" 4
a818 4
.PD 0
.IP "\fB\-\-no\-gc\-sections\fR" 4
.IX Item "--no-gc-sections"
.PD
d820 5
a824 31
targets that do not support this option.  The default behaviour (of not
performing this garbage collection) can be restored by specifying
\&\fB\-\-no\-gc\-sections\fR on the command line.
.Sp
\&\fB\-\-gc\-sections\fR decides which input sections are used by
examining symbols and relocations.  The section containing the entry
symbol and all sections containing symbols undefined on the
command-line will be kept, as will sections containing symbols
referenced by dynamic objects.  Note that when building shared
libraries, the linker must assume that any visible symbol is
referenced.  Once this initial set of sections has been determined,
the linker recursively marks as used any section referenced by their
relocations.  See \fB\-\-entry\fR and \fB\-\-undefined\fR.
.Sp
This option can be set when doing a partial link (enabled with option
\&\fB\-r\fR).  In this case the root of symbols kept must be explicitely 
specified either by an \fB\-\-entry\fR or \fB\-\-undefined\fR option or by
a \f(CW\*(C`ENTRY\*(C'\fR command in the linker script.
.IP "\fB\-\-print\-gc\-sections\fR" 4
.IX Item "--print-gc-sections"
.PD 0
.IP "\fB\-\-no\-print\-gc\-sections\fR" 4
.IX Item "--no-print-gc-sections"
.PD
List all sections removed by garbage collection.  The listing is
printed on stderr.  This option is only effective if garbage
collection has been enabled via the \fB\-\-gc\-sections\fR) option.  The
default behaviour (of not listing the sections that are removed) can
be restored by specifying \fB\-\-no\-print\-gc\-sections\fR on the command
line.
.IP "\fB\-\-help\fR" 4
d827 1
a827 1
.IP "\fB\-\-target\-help\fR" 4
d830 1
a830 1
.IP "\fB\-Map\fR \fImapfile\fR" 4
d834 1
a834 1
.IP "\fB\-\-no\-keep\-memory\fR" 4
d836 2
a837 2
\&\fBld\fR normally optimizes for speed over memory usage by caching the
symbol tables of input files in memory.  This option tells \fBld\fR to
d839 1
a839 1
necessary.  This may be required if \fBld\fR runs out of memory space
d841 1
a841 1
.IP "\fB\-\-no\-undefined\fR" 4
d843 1
a843 2
.PD 0
.IP "\fB\-z defs\fR" 4
d845 4
a848 16
.PD
Report unresolved symbol references from regular object files.  This
is done even if the linker is creating a non-symbolic shared library.
The switch \fB\-\-[no\-]allow\-shlib\-undefined\fR controls the
behaviour for reporting unresolved references found in shared
libraries being linked in.
.IP "\fB\-\-allow\-multiple\-definition\fR" 4
.IX Item "--allow-multiple-definition"
.PD 0
.IP "\fB\-z muldefs\fR" 4
.IX Item "-z muldefs"
.PD
Normally when a symbol is defined multiple times, the linker will
report a fatal error. These options allow multiple definitions and the
first definition will be used.
.IP "\fB\-\-allow\-shlib\-undefined\fR" 4
d850 11
a860 33
.PD 0
.IP "\fB\-\-no\-allow\-shlib\-undefined\fR" 4
.IX Item "--no-allow-shlib-undefined"
.PD
Allows (the default) or disallows undefined symbols in shared libraries.
This switch is similar to \fB\-\-no\-undefined\fR except that it
determines the behaviour when the undefined symbols are in a
shared library rather than a regular object file.  It does not affect
how undefined symbols in regular object files are handled.
.Sp
The reason that \fB\-\-allow\-shlib\-undefined\fR is the default is that
the shared library being specified at link time may not be the same as
the one that is available at load time, so the symbols might actually be
resolvable at load time.  Plus there are some systems, (eg BeOS) where
undefined symbols in shared libraries is normal.  (The kernel patches
them at load time to select which function is most appropriate
for the current architecture.  This is used for example to dynamically
select an appropriate memset function).  Apparently it is also normal
for \s-1HPPA\s0 shared libraries to have undefined symbols.
.IP "\fB\-\-no\-undefined\-version\fR" 4
.IX Item "--no-undefined-version"
Normally when a symbol has an undefined version, the linker will ignore
it. This option disallows symbols with undefined version and a fatal error
will be issued instead.
.IP "\fB\-\-default\-symver\fR" 4
.IX Item "--default-symver"
Create and use a default symbol version (the soname) for unversioned
exported symbols.
.IP "\fB\-\-default\-imported\-symver\fR" 4
.IX Item "--default-imported-symver"
Create and use a default symbol version (the soname) for unversioned
imported symbols.
.IP "\fB\-\-no\-warn\-mismatch\fR" 4
d862 1
a862 1
Normally \fBld\fR will give an error if you try to link together input
d865 1
a865 1
This option tells \fBld\fR that it should silently permit such possible
d869 1
a869 5
.IP "\fB\-\-no\-warn\-search\-mismatch\fR" 4
.IX Item "--no-warn-search-mismatch"
Normally \fBld\fR will give a warning if it finds an incompatible
library during a library search.  This option silences the warning.
.IP "\fB\-\-no\-whole\-archive\fR" 4
d871 1
a871 1
Turn off the effect of the \fB\-\-whole\-archive\fR option for subsequent
d873 1
a873 1
.IP "\fB\-\-noinhibit\-exec\fR" 4
d879 1
a879 6
.IP "\fB\-nostdlib\fR" 4
.IX Item "-nostdlib"
Only search library directories explicitly specified on the
command line.  Library directories specified in linker scripts
(including linker scripts specified on the command line) are ignored.
.IP "\fB\-\-oformat\fR \fIoutput-format\fR" 4
d881 5
a885 5
\&\fBld\fR may be configured to support more than one kind of object
file.  If your \fBld\fR is configured this way, you can use the
\&\fB\-\-oformat\fR option to specify the binary format for the output
object file.  Even when \fBld\fR is configured to support alternative
object formats, you don't usually need to specify this, as \fBld\fR
d892 1
a892 13
.IP "\fB\-pie\fR" 4
.IX Item "-pie"
.PD 0
.IP "\fB\-\-pic\-executable\fR" 4
.IX Item "--pic-executable"
.PD
Create a position independent executable.  This is currently only supported on
\&\s-1ELF\s0 platforms.  Position independent executables are similar to shared
libraries in that they are relocated by the dynamic linker to the virtual
address the \s-1OS\s0 chooses for them (which can vary between invocations).  Like
normal dynamically linked executables they can be executed and symbols
defined in the executable cannot be overridden by shared libraries.
.IP "\fB\-qmagic\fR" 4
d895 1
a895 1
.IP "\fB\-Qy\fR" 4
d898 1
a898 1
.IP "\fB\-\-relax\fR" 4
d903 1
a903 1
On some platforms, the \fB\-\-relax\fR option performs global
d913 1
a913 1
On platforms where this is not supported, \fB\-\-relax\fR is accepted,
d915 1
a915 1
.IP "\fB\-\-retain\-symbols\-file\fR \fIfilename\fR" 4
d924 1
a924 1
\&\fB\-\-retain\-symbols\-file\fR does \fInot\fR discard undefined symbols,
d927 1
a927 1
You may only specify \fB\-\-retain\-symbols\-file\fR once in the command
d929 1
a929 1
.IP "\fB\-rpath\fR \fIdir\fR" 4
d932 1
a932 1
linking an \s-1ELF\s0 executable with shared objects.  All \fB\-rpath\fR
d934 1
a934 1
them to locate shared objects at runtime.  The \fB\-rpath\fR option is
d937 1
a937 1
\&\fB\-rpath\-link\fR option.  If \fB\-rpath\fR is not used when linking an
d941 1
a941 1
The \fB\-rpath\fR option may also be used on SunOS.  By default, on
d943 5
a947 5
\&\fB\-L\fR options it is given.  If a \fB\-rpath\fR option is used, the
runtime search path will be formed exclusively using the \fB\-rpath\fR
options, ignoring the \fB\-L\fR options.  This can be useful when using
gcc, which adds many \fB\-L\fR options which may be on \s-1NFS\s0 mounted
file systems.
d949 1
a949 1
For compatibility with other \s-1ELF\s0 linkers, if the \fB\-R\fR option is
d951 2
a952 2
the \fB\-rpath\fR option.
.IP "\fB\-rpath\-link\fR \fI\s-1DIR\s0\fR" 4
d958 1
a958 1
When the linker encounters such a dependency when doing a non\-shared,
d961 1
a961 1
explicitly.  In such a case, the \fB\-rpath\-link\fR option
d963 1
a963 1
\&\fB\-rpath\-link\fR option may specify a sequence of directory names
d973 1
a973 1
libraries:
d975 19
a993 21
.IP "1." 4
Any directories specified by \fB\-rpath\-link\fR options.
.IP "2." 4
Any directories specified by \fB\-rpath\fR options.  The difference
between \fB\-rpath\fR and \fB\-rpath\-link\fR is that directories
specified by \fB\-rpath\fR options are included in the executable and
used at runtime, whereas the \fB\-rpath\-link\fR option is only effective
at link time. Searching \fB\-rpath\fR in this way is only supported
by native linkers and cross linkers which have been configured with
the \fB\-\-with\-sysroot\fR option.
.IP "3." 4
On an \s-1ELF\s0 system, for native linkers, if the \fB\-rpath\fR and
\&\fB\-rpath\-link\fR options were not used, search the contents of the
environment variable \f(CW\*(C`LD_RUN_PATH\*(C'\fR.
.IP "4." 4
On SunOS, if the \fB\-rpath\fR option was not used, search any
directories specified using \fB\-L\fR options.
.IP "5." 4
For a native linker, the search the contents of the environment
variable \f(CW\*(C`LD_LIBRARY_PATH\*(C'\fR.
.IP "6." 4
d998 1
a998 1
.IP "7." 4
d1000 1
a1000 1
.IP "8." 4
d1009 1
a1009 1
.IP "\fB\-shared\fR" 4
d1011 1
a1011 2
.PD 0
.IP "\fB\-Bshareable\fR" 4
a1012 1
.PD
d1015 1
a1015 1
shared library if the \fB\-e\fR option is not used and there are
d1017 8
a1024 17
.IP "\fB\-\-sort\-common [= ascending | descending]\fR" 4
.IX Item "--sort-common [= ascending | descending]"
This option tells \fBld\fR to sort the common symbols by alignment in
ascending or descending order when it places them in the appropriate output
sections.  The symbol alignments considered are sixteen-byte or larger,
eight\-byte, four\-byte, two\-byte, and one\-byte. This is to prevent gaps
between symbols due to alignment constraints.  If no sorting order is
specified, then descending order is assumed.
.IP "\fB\-\-sort\-section name\fR" 4
.IX Item "--sort-section name"
This option will apply \f(CW\*(C`SORT_BY_NAME\*(C'\fR to all wildcard section
patterns in the linker script.
.IP "\fB\-\-sort\-section alignment\fR" 4
.IX Item "--sort-section alignment"
This option will apply \f(CW\*(C`SORT_BY_ALIGNMENT\*(C'\fR to all wildcard section
patterns in the linker script.
.IP "\fB\-\-split\-by\-file [\fR\fIsize\fR\fB]\fR" 4
d1026 1
a1026 1
Similar to \fB\-\-split\-by\-reloc\fR but creates a new output section for
d1029 1
a1029 1
.IP "\fB\-\-split\-by\-reloc [\fR\fIcount\fR\fB]\fR" 4
d1041 1
a1041 1
.IP "\fB\-\-stats\fR" 4
d1045 1
a1045 6
.IP "\fB\-\-sysroot=\fR\fIdirectory\fR" 4
.IX Item "--sysroot=directory"
Use \fIdirectory\fR as the location of the sysroot, overriding the
configure-time default.  This option is only supported by linkers
that were configured using \fB\-\-with\-sysroot\fR.
.IP "\fB\-\-traditional\-format\fR" 4
d1047 2
a1048 2
For some targets, the output of \fBld\fR is different in some ways from
the output of some existing linker.  This switch requests \fBld\fR to
d1051 1
a1051 1
For example, on SunOS, \fBld\fR combines duplicate entries in the
d1055 1
a1055 1
trouble).  The \fB\-\-traditional\-format\fR switch tells \fBld\fR to not
d1057 1
a1057 1
.IP "\fB\-\-section\-start\fR \fIsectionname\fR\fB=\fR\fIorg\fR" 4
d1067 2
a1068 2
sign ("\fB=\fR"), and \fIorg\fR.
.IP "\fB\-Tbss\fR \fIorg\fR" 4
d1070 1
a1070 2
.PD 0
.IP "\fB\-Tdata\fR \fIorg\fR" 4
d1072 1
a1072 1
.IP "\fB\-Ttext\fR \fIorg\fR" 4
d1074 6
a1079 36
.PD
Same as \-\-section\-start, with \f(CW\*(C`.bss\*(C'\fR, \f(CW\*(C`.data\*(C'\fR or
\&\f(CW\*(C`.text\*(C'\fR as the \fIsectionname\fR.
.IP "\fB\-\-unresolved\-symbols=\fR\fImethod\fR" 4
.IX Item "--unresolved-symbols=method"
Determine how to handle unresolved symbols.  There are four possible
values for \fBmethod\fR:
.RS 4
.IP "\fBignore-all\fR" 4
.IX Item "ignore-all"
Do not report any unresolved symbols.
.IP "\fBreport-all\fR" 4
.IX Item "report-all"
Report all unresolved symbols.  This is the default.
.IP "\fBignore-in-object-files\fR" 4
.IX Item "ignore-in-object-files"
Report unresolved symbols that are contained in shared libraries, but
ignore them if they come from regular object files.
.IP "\fBignore-in-shared-libs\fR" 4
.IX Item "ignore-in-shared-libs"
Report unresolved symbols that come from regular object files, but
ignore them if they come from shared libraries.  This can be useful
when creating a dynamic binary and it is known that all the shared
libraries that it should be referencing are included on the linker's
command line.
.RE
.RS 4
.Sp
The behaviour for shared libraries on their own can also be controlled
by the \fB\-\-[no\-]allow\-shlib\-undefined\fR option.
.Sp
Normally the linker will generate an error message for each reported
unresolved symbol but the option \fB\-\-warn\-unresolved\-symbols\fR
can change this to a warning.
.RE
.IP "\fB\-\-dll\-verbose\fR" 4
d1081 1
a1081 2
.PD 0
.IP "\fB\-\-verbose\fR" 4
d1083 1
a1083 2
.PD
Display the version number for \fBld\fR and list the linker emulations
d1085 2
a1086 2
the linker script being used by the linker.
.IP "\fB\-\-version\-script=\fR\fIversion-scriptfile\fR" 4
d1090 1
a1090 1
about the version hierarchy for the library being created.  This option
d1092 1
a1092 1
.IP "\fB\-\-warn\-common\fR" 4
d1095 1
a1095 1
a symbol definition.  Unix linkers allow this somewhat sloppy practise,
d1098 1
a1098 1
Unfortunately, some C libraries use this practise, so you may get some
d1103 1
a1103 1
.IP "\fBint i = 1;\fR" 4
d1107 1
a1107 1
.IP "\fBextern int i;\fR" 4
d1112 1
a1112 1
.IP "\fBint i;\fR" 4
d1123 1
a1123 1
The \fB\-\-warn\-common\fR option can produce five kinds of warnings.
d1128 3
a1130 1
.IP "1." 4
d1135 1
a1135 1
\&        <file>(<section>): warning: common of `<symbol>'
d1137 1
a1137 1
\&        <file>(<section>): warning: defined here
d1139 1
a1139 1
.IP "2." 4
d1145 1
a1145 1
\&        <file>(<section>): warning: definition of `<symbol>'
d1147 1
a1147 1
\&        <file>(<section>): warning: common is here
d1149 1
a1149 1
.IP "3." 4
d1153 3
a1155 3
\&        <file>(<section>): warning: multiple common
\&           of `<symbol>'
\&        <file>(<section>): warning: previous common is here
d1157 1
a1157 1
.IP "4." 4
d1161 1
a1161 1
\&        <file>(<section>): warning: common of `<symbol>'
d1163 1
a1163 1
\&        <file>(<section>): warning: larger common is here
d1165 1
a1165 1
.IP "5." 4
d1171 1
a1171 1
\&        <file>(<section>): warning: common of `<symbol>'
d1173 1
a1173 1
\&        <file>(<section>): warning: smaller common is here
d1178 1
a1178 1
.IP "\fB\-\-warn\-constructors\fR" 4
d1183 1
a1183 1
.IP "\fB\-\-warn\-multiple\-gp\fR" 4
d1196 1
a1196 1
.IP "\fB\-\-warn\-once\fR" 4
d1200 1
a1200 1
.IP "\fB\-\-warn\-section\-align\fR" 4
d1207 1
a1207 13
.IP "\fB\-\-warn\-shared\-textrel\fR" 4
.IX Item "--warn-shared-textrel"
Warn if the linker adds a \s-1DT_TEXTREL\s0 to a shared object.
.IP "\fB\-\-warn\-unresolved\-symbols\fR" 4
.IX Item "--warn-unresolved-symbols"
If the linker is going to report an unresolved symbol (see the option
\&\fB\-\-unresolved\-symbols\fR) it will normally generate an error.
This option makes it generate a warning instead.
.IP "\fB\-\-error\-unresolved\-symbols\fR" 4
.IX Item "--error-unresolved-symbols"
This restores the linker's default behaviour of generating errors when
it is reporting unresolved symbols.
.IP "\fB\-\-whole\-archive\fR" 4
d1210 1
a1210 1
\&\fB\-\-whole\-archive\fR option, include every object file in the archive
d1217 2
a1218 2
about this option, so you have to use \fB\-Wl,\-whole\-archive\fR.
Second, don't forget to use \fB\-Wl,\-no\-whole\-archive\fR after your
d1221 1
a1221 1
.IP "\fB\-\-wrap\fR \fIsymbol\fR" 4
d1237 1
a1237 1
\&        __wrap_malloc (size_t c)
d1239 1
a1239 1
\&          printf ("malloc called with %zu\en", c);
d1243 1
a1243 2
.Sp
If you link other code with this file using \fB\-\-wrap malloc\fR, then
d1249 1
a1249 1
links without the \fB\-\-wrap\fR option will succeed.  If you do this,
d1253 1
a1253 5
.IP "\fB\-\-eh\-frame\-hdr\fR" 4
.IX Item "--eh-frame-hdr"
Request creation of \f(CW\*(C`.eh_frame_hdr\*(C'\fR section and \s-1ELF\s0
\&\f(CW\*(C`PT_GNU_EH_FRAME\*(C'\fR segment header.
.IP "\fB\-\-enable\-new\-dtags\fR" 4
d1255 1
a1255 2
.PD 0
.IP "\fB\-\-disable\-new\-dtags\fR" 4
a1256 1
.PD
d1259 2
a1260 2
\&\fB\-\-enable\-new\-dtags\fR, the dynamic tags will be created as needed.
If you specify \fB\-\-disable\-new\-dtags\fR, no new dynamic tags will be
a1262 54
.IP "\fB\-\-hash\-size=\fR\fInumber\fR" 4
.IX Item "--hash-size=number"
Set the default size of the linker's hash tables to a prime number
close to \fInumber\fR.  Increasing this value can reduce the length of
time it takes the linker to perform its tasks, at the expense of
increasing the linker's memory requirements.  Similarly reducing this
value can reduce the memory requirements at the expense of speed.
.IP "\fB\-\-hash\-style=\fR\fIstyle\fR" 4
.IX Item "--hash-style=style"
Set the type of linker's hash table(s).  \fIstyle\fR can be either
\&\f(CW\*(C`sysv\*(C'\fR for classic \s-1ELF\s0 \f(CW\*(C`.hash\*(C'\fR section, \f(CW\*(C`gnu\*(C'\fR for
new style \s-1GNU\s0 \f(CW\*(C`.gnu.hash\*(C'\fR section or \f(CW\*(C`both\*(C'\fR for both
the classic \s-1ELF\s0 \f(CW\*(C`.hash\*(C'\fR and new style \s-1GNU\s0 \f(CW\*(C`.gnu.hash\*(C'\fR
hash tables.  The default is \f(CW\*(C`sysv\*(C'\fR.
.IP "\fB\-\-reduce\-memory\-overheads\fR" 4
.IX Item "--reduce-memory-overheads"
This option reduces memory requirements at ld runtime, at the expense of
linking speed.  This was introduced to select the old O(n^2) algorithm
for link map file generation, rather than the new O(n) algorithm which uses
about 40% more memory for symbol storage.
.Sp
Another effect of the switch is to set the default hash table size to
1021, which again saves memory at the cost of lengthening the linker's
run time.  This is not done however if the \fB\-\-hash\-size\fR switch
has been used.
.Sp
The \fB\-\-reduce\-memory\-overheads\fR switch may be also be used to
enable other tradeoffs in future versions of the linker.
.IP "\fB\-\-build\-id\fR" 4
.IX Item "--build-id"
.PD 0
.IP "\fB\-\-build\-id=\fR\fIstyle\fR" 4
.IX Item "--build-id=style"
.PD
Request creation of \f(CW\*(C`.note.gnu.build\-id\*(C'\fR \s-1ELF\s0 note section.
The contents of the note are unique bits identifying this linked
file.  \fIstyle\fR can be \f(CW\*(C`uuid\*(C'\fR to use 128 random bits,
\&\f(CW\*(C`sha1\*(C'\fR to use a 160\-bit \s-1SHA1\s0 hash on the normative
parts of the output contents, \f(CW\*(C`md5\*(C'\fR to use a 128\-bit
\&\s-1MD5\s0 hash on the normative parts of the output contents, or
\&\f(CW\*(C`0x\f(CIhexstring\f(CW\*(C'\fR to use a chosen bit string specified as
an even number of hexadecimal digits (\f(CW\*(C`\-\*(C'\fR and \f(CW\*(C`:\*(C'\fR
characters between digit pairs are ignored).  If \fIstyle\fR is
omitted, \f(CW\*(C`sha1\*(C'\fR is used.
.Sp
The \f(CW\*(C`md5\*(C'\fR and \f(CW\*(C`sha1\*(C'\fR styles produces an identifier
that is always the same in an identical output file, but will be
unique among all nonidentical output files.  It is not intended
to be compared as a checksum for the file's contents.  A linked
file may be changed later by other tools, but the build \s-1ID\s0 bit
string identifying the original linked file does not change.
.Sp
Passing \f(CW\*(C`none\*(C'\fR for \fIstyle\fR disables the setting from any
\&\f(CW\*(C`\-\-build\-id\*(C'\fR options earlier on the command line.
d1264 1
a1264 1
The i386 \s-1PE\s0 linker supports the \fB\-shared\fR option, which causes
d1277 1
a1277 1
.IP "\fB\-\-add\-stdcall\-alias\fR" 4
d1281 1
a1281 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-base\-file\fR \fIfile\fR" 4
d1286 1
a1286 2
[This is an i386 \s-1PE\s0 specific option]
.IP "\fB\-\-dll\fR" 4
d1289 1
a1289 1
\&\fB\-shared\fR or specify a \f(CW\*(C`LIBRARY\*(C'\fR in a given \f(CW\*(C`.def\*(C'\fR
d1291 1
a1291 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-stdcall\-fixup\fR" 4
d1293 1
a1293 2
.PD 0
.IP "\fB\-\-disable\-stdcall\-fixup\fR" 4
a1294 1
.PD
d1304 1
a1304 1
to be usable.  If you specify \fB\-\-enable\-stdcall\-fixup\fR, this
d1306 1
a1306 1
\&\fB\-\-disable\-stdcall\-fixup\fR, this feature is disabled and such
d1308 1
a1308 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-export\-all\-symbols\fR" 4
d1316 3
a1318 18
\&\f(CW\*(C`DllEntryPoint@@0\*(C'\fR, \f(CW\*(C`DllMainCRTStartup@@12\*(C'\fR, and
\&\f(CW\*(C`impure_ptr\*(C'\fR will not be automatically
exported.  Also, symbols imported from other DLLs will not be
re\-exported, nor will symbols specifying the \s-1DLL\s0's internal layout
such as those beginning with \f(CW\*(C`_head_\*(C'\fR or ending with
\&\f(CW\*(C`_iname\*(C'\fR.  In addition, no symbols from \f(CW\*(C`libgcc\*(C'\fR,
\&\f(CW\*(C`libstd++\*(C'\fR, \f(CW\*(C`libmingw32\*(C'\fR, or \f(CW\*(C`crtX.o\*(C'\fR will be exported.
Symbols whose names begin with \f(CW\*(C`_\|_rtti_\*(C'\fR or \f(CW\*(C`_\|_builtin_\*(C'\fR will
not be exported, to help with \*(C+ DLLs.  Finally, there is an
extensive list of cygwin-private symbols that are not exported
(obviously, this applies on when building DLLs for cygwin targets).
These cygwin-excludes are: \f(CW\*(C`_cygwin_dll_entry@@12\*(C'\fR,
\&\f(CW\*(C`_cygwin_crt0_common@@8\*(C'\fR, \f(CW\*(C`_cygwin_noncygwin_dll_entry@@12\*(C'\fR,
\&\f(CW\*(C`_fmode\*(C'\fR, \f(CW\*(C`_impure_ptr\*(C'\fR, \f(CW\*(C`cygwin_attach_dll\*(C'\fR,
\&\f(CW\*(C`cygwin_premain0\*(C'\fR, \f(CW\*(C`cygwin_premain1\*(C'\fR, \f(CW\*(C`cygwin_premain2\*(C'\fR,
\&\f(CW\*(C`cygwin_premain3\*(C'\fR, and \f(CW\*(C`environ\*(C'\fR.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-exclude\-symbols\fR \fIsymbol\fR\fB,\fR\fIsymbol\fR\fB,...\fR" 4
d1322 1
a1322 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-file\-alignment\fR" 4
d1327 1
a1327 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-heap\fR \fIreserve\fR" 4
d1329 1
a1329 2
.PD 0
.IP "\fB\-\-heap\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
d1331 2
a1332 3
.PD
Specify the number of bytes of memory to reserve (and optionally commit)
to be used as heap for this program.  The default is 1Mb reserved, 4K
d1334 1
a1334 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-image\-base\fR \fIvalue\fR" 4
d1342 1
a1342 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-kill\-at\fR" 4
d1346 1
a1346 10
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-large\-address\-aware\fR" 4
.IX Item "--large-address-aware"
If given, the appropriate bit in the \*(L"Characteristics\*(R" field of the \s-1COFF\s0
header is set to indicate that this executable supports virtual addresses
greater than 2 gigabytes.  This should be used in conjunction with the /3GB
or /USERVA=\fIvalue\fR megabytes switch in the \*(L"[operating systems]\*(R"
section of the \s-1BOOT\s0.INI.  Otherwise, this bit has no effect.
[This option is specific to \s-1PE\s0 targeted ports of the linker]
.IP "\fB\-\-major\-image\-version\fR \fIvalue\fR" 4
d1349 1
a1349 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-major\-os\-version\fR \fIvalue\fR" 4
d1352 1
a1352 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-major\-subsystem\-version\fR \fIvalue\fR" 4
d1355 1
a1355 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-image\-version\fR \fIvalue\fR" 4
d1358 1
a1358 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-os\-version\fR \fIvalue\fR" 4
d1361 1
a1361 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-subsystem\-version\fR \fIvalue\fR" 4
d1364 1
a1364 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-output\-def\fR \fIfile\fR" 4
d1371 1
a1371 188
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-out\-implib\fR \fIfile\fR" 4
.IX Item "--out-implib file"
The linker will create the file \fIfile\fR which will contain an
import lib corresponding to the \s-1DLL\s0 the linker is generating. This
import lib (which should be called \f(CW\*(C`*.dll.a\*(C'\fR or \f(CW\*(C`*.a\*(C'\fR
may be used to link clients against the generated \s-1DLL\s0; this behaviour
makes it possible to skip a separate \f(CW\*(C`dlltool\*(C'\fR import library
creation step.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-auto\-image\-base\fR" 4
.IX Item "--enable-auto-image-base"
Automatically choose the image base for DLLs, unless one is specified
using the \f(CW\*(C`\-\-image\-base\*(C'\fR argument.  By using a hash generated
from the dllname to create unique image bases for each \s-1DLL\s0, in-memory
collisions and relocations which can delay program execution are
avoided.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-auto\-image\-base\fR" 4
.IX Item "--disable-auto-image-base"
Do not automatically generate a unique image base.  If there is no
user-specified image base (\f(CW\*(C`\-\-image\-base\*(C'\fR) then use the platform
default.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-dll\-search\-prefix\fR \fIstring\fR" 4
.IX Item "--dll-search-prefix string"
When linking dynamically to a dll without an import library,
search for \f(CW\*(C`<string><basename>.dll\*(C'\fR in preference to
\&\f(CW\*(C`lib<basename>.dll\*(C'\fR. This behaviour allows easy distinction
between DLLs built for the various \*(L"subplatforms\*(R": native, cygwin,
uwin, pw, etc.  For instance, cygwin DLLs typically use
\&\f(CW\*(C`\-\-dll\-search\-prefix=cyg\*(C'\fR.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-auto\-import\fR" 4
.IX Item "--enable-auto-import"
Do sophisticated linking of \f(CW\*(C`_symbol\*(C'\fR to \f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for
\&\s-1DATA\s0 imports from DLLs, and create the necessary thunking symbols when
building the import libraries with those \s-1DATA\s0 exports. Note: Use of the
\&'auto\-import' extension will cause the text section of the image file
to be made writable. This does not conform to the PE-COFF format
specification published by Microsoft.
.Sp
Note \- use of the 'auto\-import' extension will also cause read only
data which would normally be placed into the .rdata section to be
placed into the .data section instead.  This is in order to work
around a problem with consts that is described here:
http://www.cygwin.com/ml/cygwin/2004\-09/msg01101.html
.Sp
Using 'auto\-import' generally will 'just work' \*(-- but sometimes you may
see this message:
.Sp
"variable '<var>' can't be auto\-imported. Please read the
documentation for ld's \f(CW\*(C`\-\-enable\-auto\-import\*(C'\fR for details."
.Sp
This message occurs when some (sub)expression accesses an address
ultimately given by the sum of two constants (Win32 import tables only
allow one).  Instances where this may occur include accesses to member
fields of struct variables imported from a \s-1DLL\s0, as well as using a
constant index into an array variable imported from a \s-1DLL\s0.  Any
multiword variable (arrays, structs, long long, etc) may trigger
this error condition.  However, regardless of the exact data type
of the offending exported variable, ld will always detect it, issue
the warning, and exit.
.Sp
There are several ways to address this difficulty, regardless of the
data type of the exported variable:
.Sp
One way is to use \-\-enable\-runtime\-pseudo\-reloc switch. This leaves the task
of adjusting references in your client code for runtime environment, so
this method works only when runtime environment supports this feature.
.Sp
A second solution is to force one of the 'constants' to be a variable \*(--
that is, unknown and un-optimizable at compile time.  For arrays,
there are two possibilities: a) make the indexee (the array's address)
a variable, or b) make the 'constant' index a variable.  Thus:
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] -->
\&           { volatile type *t=extern_array; t[1] }
.Ve
.Sp
or
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] -->
\&           { volatile int t=1; extern_array[t] }
.Ve
.Sp
For structs (and most other multiword data types) the only option
is to make the struct itself (or the long long, or the ...) variable:
.Sp
.Vb 3
\&        extern struct s extern_struct;
\&        extern_struct.field -->
\&           { volatile struct s *t=&extern_struct; t->field }
.Ve
.Sp
or
.Sp
.Vb 3
\&        extern long long extern_ll;
\&        extern_ll -->
\&          { volatile long long * local_ll=&extern_ll; *local_ll }
.Ve
.Sp
A third method of dealing with this difficulty is to abandon
\&'auto\-import' for the offending symbol and mark it with
\&\f(CW\*(C`_\|_declspec(dllimport)\*(C'\fR.  However, in practise that
requires using compile-time #defines to indicate whether you are
building a \s-1DLL\s0, building client code that will link to the \s-1DLL\s0, or
merely building/linking to a static library.   In making the choice
between the various methods of resolving the 'direct address with
constant offset' problem, you should consider typical real-world usage:
.Sp
Original:
.Sp
.Vb 7
\&        --foo.h
\&        extern int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
.Sp
Solution 1:
.Sp
.Vb 9
\&        --foo.h
\&        extern int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          /* This workaround is for win32 and cygwin; do not "optimize" */
\&          volatile int *parr = arr;
\&          printf("%d\en",parr[1]);
\&        }
.Ve
.Sp
Solution 2:
.Sp
.Vb 14
\&        --foo.h
\&        /* Note: auto-export is assumed (no __declspec(dllexport)) */
\&        #if (defined(_WIN32) || defined(__CYGWIN__)) && \e
\&          !(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))
\&        #define FOO_IMPORT __declspec(dllimport)
\&        #else
\&        #define FOO_IMPORT
\&        #endif
\&        extern FOO_IMPORT int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
.Sp
A fourth way to avoid this problem is to re-code your
library to use a functional interface rather than a data interface
for the offending variables (e.g. \fIset_foo()\fR and \fIget_foo()\fR accessor
functions).
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-auto\-import\fR" 4
.IX Item "--disable-auto-import"
Do not attempt to do sophisticated linking of \f(CW\*(C`_symbol\*(C'\fR to
\&\f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for \s-1DATA\s0 imports from DLLs.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-runtime\-pseudo\-reloc\fR" 4
.IX Item "--enable-runtime-pseudo-reloc"
If your code contains expressions described in \-\-enable\-auto\-import section,
that is, \s-1DATA\s0 imports from \s-1DLL\s0 with non-zero offset, this switch will create
a vector of 'runtime pseudo relocations' which can be used by runtime
environment to adjust references to such data in your client code.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-runtime\-pseudo\-reloc\fR" 4
.IX Item "--disable-runtime-pseudo-reloc"
Do not create pseudo relocations for non-zero offset \s-1DATA\s0 imports from
DLLs.  This is the default.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-extra\-pe\-debug\fR" 4
.IX Item "--enable-extra-pe-debug"
Show additional debug info related to auto-import symbol thunking.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-section\-alignment\fR" 4
d1375 1
a1375 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-stack\fR \fIreserve\fR" 4
d1377 1
a1377 2
.PD 0
.IP "\fB\-\-stack\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
d1379 2
a1380 3
.PD
Specify the number of bytes of memory to reserve (and optionally commit)
to be used as stack for this program.  The default is 2Mb reserved, 4K
d1382 1
a1382 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-subsystem\fR \fIwhich\fR" 4
d1384 1
a1384 2
.PD 0
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR" 4
d1386 1
a1386 1
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR\fB.\fR\fIminor\fR" 4
a1387 1
.PD
d1390 2
a1391 27
\&\f(CW\*(C`console\*(C'\fR, \f(CW\*(C`posix\*(C'\fR, and \f(CW\*(C`xbox\*(C'\fR.  You may optionally set
the subsystem version also.  Numeric values are also accepted for
\&\fIwhich\fR.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.PP
The 68HC11 and 68HC12 linkers support specific options to control the
memory bank switching mapping and trampoline code generation.
.IP "\fB\-\-no\-trampoline\fR" 4
.IX Item "--no-trampoline"
This option disables the generation of trampoline. By default a trampoline
is generated for each far function which is called using a \f(CW\*(C`jsr\*(C'\fR
instruction (this happens when a pointer to a far function is taken).
.IP "\fB\-\-bank\-window\fR \fIname\fR" 4
.IX Item "--bank-window name"
This option indicates to the linker the name of the memory region in
the \fB\s-1MEMORY\s0\fR specification that describes the memory bank window.
The definition of such region is then used by the linker to compute
paging and addresses within the memory window.
.PP
The following options are supported to control handling of \s-1GOT\s0 generation
when linking for 68K targets.
.IP "\fB\-\-got=\fR\fItype\fR" 4
.IX Item "--got=type"
This option tells the linker which \s-1GOT\s0 generation scheme to use.
\&\fItype\fR should be one of \fBsingle\fR, \fBnegative\fR,
\&\fBmultigot\fR or \fBtarget\fR.  For more information refer to the
Info entry for \fIld\fR.
d1394 2
a1395 3
You can change the behaviour of \fBld\fR with the environment variables
\&\f(CW\*(C`GNUTARGET\*(C'\fR,
\&\f(CW\*(C`LDEMULATION\*(C'\fR and \f(CW\*(C`COLLECT_NO_DEMANGLE\*(C'\fR.
d1398 1
a1398 1
use \fB\-b\fR (or its synonym \fB\-\-format\fR).  Its value should be one
d1400 1
a1400 1
\&\f(CW\*(C`GNUTARGET\*(C'\fR in the environment, \fBld\fR uses the natural format
d1407 1
a1407 1
in the search\-list, so ambiguities are resolved in favor of convention.
d1412 1
a1412 1
available emulations with the \fB\-\-verbose\fR or \fB\-V\fR options.  If
d1421 1
a1421 1
may be overridden by the \fB\-\-demangle\fR and \fB\-\-no\-demangle\fR
d1430 1
a1430 2
Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001,
2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.
@


1.12.14.1
log
@Commit generated files for binutils 2.17.90.
@
text
@d1 2
a2 1
.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
d5 1
a5 1
.\" ========================================================================
d18 6
d31 1
d36 5
a40 5
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
d49 2
a50 2
.    ds C` ""
.    ds C' ""
d59 4
a62 4
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
d66 1
a66 1
..
d71 2
a72 2
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
d77 1
d137 1
a137 1
.\" ========================================================================
d140 2
a141 1
.TH LD 1 "2007-08-06" "binutils-2.17.90" "GNU Development Tools"
d143 1
a143 1
ld \- The GNU linker
d146 1
a146 1
ld [\fBoptions\fR] \fIobjfile\fR ...
d149 1
a149 1
\&\fBld\fR combines a number of object and archive files, relocates
d151 1
a151 1
compiling a program is to run \fBld\fR.
d153 1
a153 1
\&\fBld\fR accepts Linker Command Language files written in
d157 4
a160 3
This man page does not describe the command language; see the
\&\fBld\fR entry in \f(CW\*(C`info\*(C'\fR for full details on the command
language and on other aspects of the \s-1GNU\s0 linker.
d162 2
a163 2
This version of \fBld\fR uses the general purpose \s-1BFD\s0 libraries
to operate on object files. This allows \fBld\fR to read, combine, and
d171 1
a171 1
\&\fBld\fR continues executing, allowing you to identify other errors
d174 1
a174 1
The \s-1GNU\s0 linker \fBld\fR is meant to cover a broad range of situations,
d181 1
a181 1
For instance, a frequent use of \fBld\fR is to link standard Unix
d186 1
a186 1
\&        ld \-o <output> /lib/crt0.o hello.o \-lc
d188 1
a188 2
.PP
This tells \fBld\fR to produce a file called \fIoutput\fR as the
d193 1
a193 1
Some of the command-line options to \fBld\fR may be specified at any
d214 1
a214 1
If the linker cannot recognize the format of an object file, it will
d221 4
a224 2
specifying a script in this way merely augments the main linker script;
use the \fB\-T\fR option to replace the default linker script entirely.
d232 2
a233 2
precede the option name; for example, \fB\-trace\-symbol\fR and
\&\fB\-\-trace\-symbol\fR are equivalent.  Note\-\-\-there is one exception to
d235 1
a235 1
only be preceded by two dashes.  This is to reduce confusion with the
d237 1
a237 1
name to \fBmagic\fR whereas \fB\-\-omagic\fR sets the \s-1NMAGIC\s0 flag on the
d243 1
a243 1
\&\fB\-\-trace\-symbol foo\fR and \fB\-\-trace\-symbol=foo\fR are equivalent.
d247 2
a248 2
Note\-\-\-if the linker is being invoked indirectly, via a compiler driver
(e.g. \fBgcc\fR) then all the linker command line options should be
d253 1
a253 1
\&          gcc \-Wl,\-\-startgroup foo.o bar.o \-Wl,\-\-endgroup
a254 1
.PP
d260 1
a260 14
.IP "\fB@@\fR\fIfile\fR" 4
.IX Item "@@file"
Read command-line options from \fIfile\fR.  The options read are
inserted in place of the original @@\fIfile\fR option.  If \fIfile\fR
does not exist, or cannot be read, then the option will be treated
literally, and not removed.  
.Sp
Options in \fIfile\fR are separated by whitespace.  A whitespace
character may be included in an option by surrounding the entire
option in either single or double quotes.  Any character (including a
backslash) may be included by prefixing the character to be included
with a backslash.  The \fIfile\fR may itself contain additional
@@\fIfile\fR options; any such options will be processed recursively.
.IP "\fB\-a\fR\fIkeyword\fR" 4
d267 1
a267 1
.IP "\fB\-A\fR\fIarchitecture\fR" 4
d269 1
a269 2
.PD 0
.IP "\fB\-\-architecture=\fR\fIarchitecture\fR" 4
d271 2
a272 3
.PD
In the current release of \fBld\fR, this option is useful only for the
Intel 960 family of architectures.  In that \fBld\fR configuration, the
d277 1
a277 1
Future releases of \fBld\fR may support similar functionality for
d279 1
a279 1
.IP "\fB\-b\fR \fIinput-format\fR" 4
d281 1
a281 2
.PD 0
.IP "\fB\-\-format=\fR\fIinput-format\fR" 4
d283 2
a284 3
.PD
\&\fBld\fR may be configured to support more than one kind of object
file.  If your \fBld\fR is configured this way, you can use the
d286 1
a286 1
that follow this option on the command line.  Even when \fBld\fR is
d288 1
a288 1
to specify this, as \fBld\fR should be configured to expect as a
d305 1
a305 1
.IP "\fB\-c\fR \fIMRI-commandfile\fR" 4
d307 1
a307 2
.PD 0
.IP "\fB\-\-mri\-script=\fR\fIMRI-commandfile\fR" 4
d309 1
a309 2
.PD
For compatibility with linkers produced by \s-1MRI\s0, \fBld\fR accepts script
d314 2
a315 2
scripts written in the general-purpose \fBld\fR scripting language.
If \fIMRI-cmdfile\fR does not exist, \fBld\fR looks for it in the directories
d317 1
a317 1
.IP "\fB\-d\fR" 4
d319 1
a319 2
.PD 0
.IP "\fB\-dc\fR" 4
d321 1
a321 1
.IP "\fB\-dp\fR" 4
a322 1
.PD
d327 1
a327 1
.IP "\fB\-e\fR \fIentry\fR" 4
d329 1
a329 2
.PD 0
.IP "\fB\-\-entry=\fR\fIentry\fR" 4
a330 1
.PD
d337 1
a337 11
.IP "\fB\-\-exclude\-libs\fR \fIlib\fR\fB,\fR\fIlib\fR\fB,...\fR" 4
.IX Item "--exclude-libs lib,lib,..."
Specifies a list of archive libraries from which symbols should not be automatically
exported. The library names may be delimited by commas or colons.  Specifying
\&\f(CW\*(C`\-\-exclude\-libs ALL\*(C'\fR excludes symbols in all archive libraries from
automatic export.  This option is available only for the i386 \s-1PE\s0 targeted
port of the linker and for \s-1ELF\s0 targeted ports.  For i386 \s-1PE\s0, symbols
explicitly listed in a .def file are still exported, regardless of this
option.  For \s-1ELF\s0 targeted ports, symbols affected by this option will
be treated as hidden.
.IP "\fB\-E\fR" 4
d339 1
a339 2
.PD 0
.IP "\fB\-\-export\-dynamic\fR" 4
a340 1
.PD
d353 1
a353 5
.Sp
You can also use the dynamic list to control what symbols should
be added to the dynamic symbol table if the output format supports it.
See the description of \fB\-\-dynamic\-list\fR.
.IP "\fB\-EB\fR" 4
d356 1
a356 1
.IP "\fB\-EL\fR" 4
d359 1
a359 1
.IP "\fB\-f\fR" 4
d361 1
a361 2
.PD 0
.IP "\fB\-\-auxiliary\fR \fIname\fR" 4
a362 1
.PD
d380 1
a380 1
.IP "\fB\-F\fR \fIname\fR" 4
d382 1
a382 2
.PD 0
.IP "\fB\-\-filter\fR \fIname\fR" 4
a383 1
.PD
d397 1
a397 1
Some older linkers used the \fB\-F\fR option throughout a compilation
d399 2
a400 3
object files.
The \s-1GNU\s0 linker uses other mechanisms for this purpose: the
\&\fB\-b\fR, \fB\-\-format\fR, \fB\-\-oformat\fR options, the
d402 3
a404 4
environment variable.
The \s-1GNU\s0 linker will ignore the \fB\-F\fR option when not
creating an \s-1ELF\s0 shared object.
.IP "\fB\-fini\fR \fIname\fR" 4
d410 1
a410 1
.IP "\fB\-g\fR" 4
d413 1
a413 1
.IP "\fB\-G\fR\fIvalue\fR" 4
d415 1
a415 2
.PD 0
.IP "\fB\-\-gpsize=\fR\fIvalue\fR" 4
a416 1
.PD
d421 1
a421 1
.IP "\fB\-h\fR\fIname\fR" 4
d423 1
a423 2
.PD 0
.IP "\fB\-soname=\fR\fIname\fR" 4
a424 1
.PD
d430 1
a430 1
.IP "\fB\-i\fR" 4
d433 1
a433 1
.IP "\fB\-init\fR \fIname\fR" 4
d439 15
a453 20
.IP "\fB\-l\fR\fInamespec\fR" 4
.IX Item "-lnamespec"
.PD 0
.IP "\fB\-\-library=\fR\fInamespec\fR" 4
.IX Item "--library=namespec"
.PD
Add the archive or object file specified by \fInamespec\fR to the
list of files to link.  This option may be used any number of times.
If \fInamespec\fR is of the form \fI:\fIfilename\fI\fR, \fBld\fR
will search the library path for a file called \fIfilename\fR, otherise it
will search the library path for a file called \fIlib\fInamespec\fI.a\fR.
.Sp
On systems which support shared libraries, \fBld\fR may also search for
files other than \fIlib\fInamespec\fI.a\fR.  Specifically, on \s-1ELF\s0
and SunOS systems, \fBld\fR will search a directory for a library
called \fIlib\fInamespec\fI.so\fR before searching for one called
\&\fIlib\fInamespec\fI.a\fR.  (By convention, a \f(CW\*(C`.so\*(C'\fR extension
indicates a shared library.)  Note that this behavior does not apply
to \fI:\fIfilename\fI\fR, which always specifies a file called
\&\fIfilename\fR.
d458 1
a458 1
command line, the linker will include the appropriate file(s) from the
d462 1
a462 1
See the \fB\-(\fR option for a way to force the linker to search
d468 1
a468 1
if you are using \fBld\fR on \s-1AIX\s0, note that it is different from the
d470 1
a470 1
.IP "\fB\-L\fR\fIsearchdir\fR" 4
d472 1
a472 2
.PD 0
.IP "\fB\-\-library\-path=\fR\fIsearchdir\fR" 4
d474 2
a475 3
.PD
Add path \fIsearchdir\fR to the list of paths that \fBld\fR will search
for archive libraries and \fBld\fR control scripts.  You may use this
d479 1
a479 1
\&\fB\-L\fR options apply to all \fB\-l\fR options, regardless of the
a481 3
If \fIsearchdir\fR begins with \f(CW\*(C`=\*(C'\fR, then the \f(CW\*(C`=\*(C'\fR will be replaced
by the \fIsysroot prefix\fR, a path specified when the linker is configured.
.Sp
d483 1
a483 1
\&\fB\-L\fR) depends on which emulation mode \fBld\fR is using, and in
d489 1
a489 1
.IP "\fB\-m\fR\fIemulation\fR" 4
d492 1
a492 1
emulations with the \fB\-\-verbose\fR or \fB\-V\fR options.
d499 1
a499 1
.IP "\fB\-M\fR" 4
d501 1
a501 2
.PD 0
.IP "\fB\-\-print\-map\fR" 4
a502 1
.PD
d506 3
a508 3
.IP "*" 4
Where object files are mapped into memory.
.IP "*" 4
d510 1
a510 1
.IP "*" 4
a512 28
.IP "*" 4
The values assigned to symbols.
.Sp
Note \- symbols whose values are computed by an expression which
involves a reference to a previous value of the same symbol may not
have correct result displayed in the link map.  This is because the
linker discards intermediate results and only retains the final value
of an expression.  Under such circumstances the linker will display
the final value enclosed by square brackets.  Thus for example a
linker script containing:
.Sp
.Vb 3
\&           foo = 1
\&           foo = foo * 4
\&           foo = foo + 8
.Ve
.Sp
will produce the following output in the link map if the \fB\-M\fR
option is used:
.Sp
.Vb 3
\&           0x00000001                foo = 0x1
\&           [0x0000000c]                foo = (foo * 0x4)
\&           [0x0000000c]                foo = (foo + 0x8)
.Ve
.Sp
See \fBExpressions\fR for more information about expressions in linker
scripts.
d516 1
a516 1
.IP "\fB\-n\fR" 4
d518 1
a518 2
.PD 0
.IP "\fB\-\-nmagic\fR" 4
a519 1
.PD
d522 1
a522 1
.IP "\fB\-N\fR" 4
d524 1
a524 2
.PD 0
.IP "\fB\-\-omagic\fR" 4
a525 1
.PD
d527 3
a529 12
not page-align the data segment, and disable linking against shared
libraries.  If the output format supports Unix style magic numbers,
mark the output as \f(CW\*(C`OMAGIC\*(C'\fR. Note: Although a writable text section
is allowed for PE-COFF targets, it does not conform to the format
specification published by Microsoft.
.IP "\fB\-\-no\-omagic\fR" 4
.IX Item "--no-omagic"
This option negates most of the effects of the \fB\-N\fR option.  It
sets the text section to be read\-only, and forces the data segment to
be page\-aligned.  Note \- this option does not enable linking against
shared libraries.  Use \fB\-Bdynamic\fR for this.
.IP "\fB\-o\fR \fIoutput\fR" 4
d531 1
a531 2
.PD 0
.IP "\fB\-\-output=\fR\fIoutput\fR" 4
d533 1
a533 2
.PD
Use \fIoutput\fR as the name for the program produced by \fBld\fR; if this
d536 1
a536 1
.IP "\fB\-O\fR \fIlevel\fR" 4
d538 1
a538 1
If \fIlevel\fR is a numeric values greater than zero \fBld\fR optimizes
d540 2
a541 6
should only be enabled for the final binary.  At the moment this
option only affects \s-1ELF\s0 shared library generation.  Future releases of
the linker may make more use of this option.  Also currently there is
no difference in the linker's behaviour for different non-zero values
of this option.  Again this may change with future releases.
.IP "\fB\-q\fR" 4
d543 1
a543 2
.PD 0
.IP "\fB\-\-emit\-relocs\fR" 4
d545 1
a545 2
.PD
Leave relocation sections and contents in fully linked executables.
d549 1
a549 7
.Sp
This option is currently only supported on \s-1ELF\s0 platforms.
.IP "\fB\-\-force\-dynamic\fR" 4
.IX Item "--force-dynamic"
Force the output file to have dynamic sections.  This option is specific
to VxWorks targets.
.IP "\fB\-r\fR" 4
d551 2
a552 4
.PD 0
.IP "\fB\-\-relocatable\fR" 4
.IX Item "--relocatable"
.PD
d554 1
a554 1
turn serve as input to \fBld\fR.  This is often called \fIpartial
a561 6
When an input file does not have the same format as the output file,
partial linking is only supported if that input file does not contain any
relocations.  Different output formats can have further restrictions; for
example some \f(CW\*(C`a.out\*(C'\fR\-based formats do not support partial linking
with input files in other formats at all.
.Sp
d563 1
a563 1
.IP "\fB\-R\fR \fIfilename\fR" 4
d565 1
a565 2
.PD 0
.IP "\fB\-\-just\-symbols=\fR\fIfilename\fR" 4
a566 1
.PD
d572 1
a572 1
For compatibility with other \s-1ELF\s0 linkers, if the \fB\-R\fR option is
d574 2
a575 2
the \fB\-rpath\fR option.
.IP "\fB\-s\fR" 4
d577 1
a577 2
.PD 0
.IP "\fB\-\-strip\-all\fR" 4
a578 1
.PD
d580 1
a580 1
.IP "\fB\-S\fR" 4
d582 1
a582 2
.PD 0
.IP "\fB\-\-strip\-debug\fR" 4
a583 1
.PD
d585 1
a585 1
.IP "\fB\-t\fR" 4
d587 1
a587 2
.PD 0
.IP "\fB\-\-trace\fR" 4
d589 2
a590 3
.PD
Print the names of the input files as \fBld\fR processes them.
.IP "\fB\-T\fR \fIscriptfile\fR" 4
d592 1
a592 2
.PD 0
.IP "\fB\-\-script=\fR\fIscriptfile\fR" 4
a593 1
.PD
d595 1
a595 1
\&\fBld\fR's default linker script (rather than adding to it), so
d597 7
a603 21
output file.    If \fIscriptfile\fR does not exist in
the current directory, \f(CW\*(C`ld\*(C'\fR looks for it in the directories
specified by any preceding \fB\-L\fR options.  Multiple \fB\-T\fR
options accumulate.
.IP "\fB\-dT\fR \fIscriptfile\fR" 4
.IX Item "-dT scriptfile"
.PD 0
.IP "\fB\-\-default\-script=\fR\fIscriptfile\fR" 4
.IX Item "--default-script=scriptfile"
.PD
Use \fIscriptfile\fR as the default linker script.  
.Sp
This option is similar to the \fB\-\-script\fR option except that
processing of the script is delayed until after the rest of the
command line has been processed.  This allows options placed after the
\&\fB\-\-default\-script\fR option on the command line to affect the
behaviour of the linker script, which can be important when the linker
command line cannot be directly controlled by the user.  (eg because
the command line is being constructed by another tool, such as
\&\fBgcc\fR).
.IP "\fB\-u\fR \fIsymbol\fR" 4
d605 1
a605 2
.PD 0
.IP "\fB\-\-undefined=\fR\fIsymbol\fR" 4
a606 1
.PD
d612 1
a612 1
.IP "\fB\-Ur\fR" 4
d616 1
a616 1
turn serve as input to \fBld\fR.  When linking \*(C+ programs, \fB\-Ur\fR
d622 1
a622 1
.IP "\fB\-\-unique[=\fR\fI\s-1SECTION\s0\fR\fB]\fR" 4
d631 1
a631 1
.IP "\fB\-v\fR" 4
d633 1
a633 2
.PD 0
.IP "\fB\-\-version\fR" 4
d635 1
a635 1
.IP "\fB\-V\fR" 4
d637 1
a637 2
.PD
Display the version number for \fBld\fR.  The \fB\-V\fR option also
d639 1
a639 1
.IP "\fB\-x\fR" 4
d641 1
a641 2
.PD 0
.IP "\fB\-\-discard\-all\fR" 4
a642 1
.PD
d644 1
a644 1
.IP "\fB\-X\fR" 4
d646 1
a646 2
.PD 0
.IP "\fB\-\-discard\-locals\fR" 4
d648 3
a650 5
.PD
Delete all temporary local symbols.  (These symbols start with
system-specific local label prefixes, typically \fB.L\fR for \s-1ELF\s0 systems
or \fBL\fR for traditional a.out systems.)
.IP "\fB\-y\fR \fIsymbol\fR" 4
d652 1
a652 2
.PD 0
.IP "\fB\-\-trace\-symbol=\fR\fIsymbol\fR" 4
a653 1
.PD
d660 1
a660 1
.IP "\fB\-Y\fR \fIpath\fR" 4
d664 1
a664 1
.IP "\fB\-z\fR \fIkeyword\fR" 4
d666 17
a682 88
The recognized keywords are:
.RS 4
.IP "\fBcombreloc\fR" 4
.IX Item "combreloc"
Combines multiple reloc sections and sorts them to make dynamic symbol
lookup caching possible.
.IP "\fBdefs\fR" 4
.IX Item "defs"
Disallows undefined symbols in object files.  Undefined symbols in
shared libraries are still allowed.
.IP "\fBexecstack\fR" 4
.IX Item "execstack"
Marks the object as requiring executable stack.
.IP "\fBinitfirst\fR" 4
.IX Item "initfirst"
This option is only meaningful when building a shared object.
It marks the object so that its runtime initialization will occur
before the runtime initialization of any other objects brought into
the process at the same time.  Similarly the runtime finalization of
the object will occur after the runtime finalization of any other
objects.
.IP "\fBinterpose\fR" 4
.IX Item "interpose"
Marks the object that its symbol table interposes before all symbols
but the primary executable.
.IP "\fBlazy\fR" 4
.IX Item "lazy"
When generating an executable or shared library, mark it to tell the
dynamic linker to defer function call resolution to the point when
the function is called (lazy binding), rather than at load time.
Lazy binding is the default.
.IP "\fBloadfltr\fR" 4
.IX Item "loadfltr"
Marks  the object that its filters be processed immediately at
runtime.
.IP "\fBmuldefs\fR" 4
.IX Item "muldefs"
Allows multiple definitions.
.IP "\fBnocombreloc\fR" 4
.IX Item "nocombreloc"
Disables multiple reloc sections combining.
.IP "\fBnocopyreloc\fR" 4
.IX Item "nocopyreloc"
Disables production of copy relocs.
.IP "\fBnodefaultlib\fR" 4
.IX Item "nodefaultlib"
Marks the object that the search for dependencies of this object will
ignore any default library search paths.
.IP "\fBnodelete\fR" 4
.IX Item "nodelete"
Marks the object shouldn't be unloaded at runtime.
.IP "\fBnodlopen\fR" 4
.IX Item "nodlopen"
Marks the object not available to \f(CW\*(C`dlopen\*(C'\fR.
.IP "\fBnodump\fR" 4
.IX Item "nodump"
Marks the object can not be dumped by \f(CW\*(C`dldump\*(C'\fR.
.IP "\fBnoexecstack\fR" 4
.IX Item "noexecstack"
Marks the object as not requiring executable stack.
.IP "\fBnorelro\fR" 4
.IX Item "norelro"
Don't create an \s-1ELF\s0 \f(CW\*(C`PT_GNU_RELRO\*(C'\fR segment header in the object.
.IP "\fBnow\fR" 4
.IX Item "now"
When generating an executable or shared library, mark it to tell the
dynamic linker to resolve all symbols when the program is started, or
when the shared library is linked to using dlopen, instead of
deferring function call resolution to the point when the function is
first called.
.IP "\fBorigin\fR" 4
.IX Item "origin"
Marks the object may contain \f(CW$ORIGIN\fR.
.IP "\fBrelro\fR" 4
.IX Item "relro"
Create an \s-1ELF\s0 \f(CW\*(C`PT_GNU_RELRO\*(C'\fR segment header in the object.
.IP "\fBmax\-page\-size=\fR\fIvalue\fR" 4
.IX Item "max-page-size=value"
Set the emulation maximum page size to \fIvalue\fR.
.IP "\fBcommon\-page\-size=\fR\fIvalue\fR" 4
.IX Item "common-page-size=value"
Set the emulation common page size to \fIvalue\fR.
.RE
.RS 4
.Sp
Other keywords are ignored for Solaris compatibility.
.RE
.IP "\fB\-(\fR \fIarchives\fR \fB\-)\fR" 4
d684 1
a684 2
.PD 0
.IP "\fB\-\-start\-group\fR \fIarchives\fR \fB\-\-end\-group\fR" 4
a685 1
.PD
d701 1
a701 41
.IP "\fB\-\-accept\-unknown\-input\-arch\fR" 4
.IX Item "--accept-unknown-input-arch"
.PD 0
.IP "\fB\-\-no\-accept\-unknown\-input\-arch\fR" 4
.IX Item "--no-accept-unknown-input-arch"
.PD
Tells the linker to accept input files whose architecture cannot be
recognised.  The assumption is that the user knows what they are doing
and deliberately wants to link in these unknown input files.  This was
the default behaviour of the linker, before release 2.14.  The default
behaviour from release 2.14 onwards is to reject such input files, and
so the \fB\-\-accept\-unknown\-input\-arch\fR option has been added to
restore the old behaviour.
.IP "\fB\-\-as\-needed\fR" 4
.IX Item "--as-needed"
.PD 0
.IP "\fB\-\-no\-as\-needed\fR" 4
.IX Item "--no-as-needed"
.PD
This option affects \s-1ELF\s0 \s-1DT_NEEDED\s0 tags for dynamic libraries mentioned
on the command line after the \fB\-\-as\-needed\fR option.  Normally,
the linker will add a \s-1DT_NEEDED\s0 tag for each dynamic library mentioned
on the command line, regardless of whether the library is actually
needed.  \fB\-\-as\-needed\fR causes \s-1DT_NEEDED\s0 tags to only be emitted
for libraries that satisfy some symbol reference from regular objects
which is undefined at the point that the library was linked.
\&\fB\-\-no\-as\-needed\fR restores the default behaviour.
.IP "\fB\-\-add\-needed\fR" 4
.IX Item "--add-needed"
.PD 0
.IP "\fB\-\-no\-add\-needed\fR" 4
.IX Item "--no-add-needed"
.PD
This option affects the treatment of dynamic libraries from \s-1ELF\s0
\&\s-1DT_NEEDED\s0 tags in dynamic libraries mentioned on the command line after
the \fB\-\-no\-add\-needed\fR option.  Normally, the linker will add
a \s-1DT_NEEDED\s0 tag for each dynamic library from \s-1DT_NEEDED\s0 tags.
\&\fB\-\-no\-add\-needed\fR causes \s-1DT_NEEDED\s0 tags will never be emitted
for those libraries from \s-1DT_NEEDED\s0 tags. \fB\-\-add\-needed\fR restores
the default behaviour.
.IP "\fB\-assert\fR \fIkeyword\fR" 4
d704 1
a704 1
.IP "\fB\-Bdynamic\fR" 4
d706 1
a706 2
.PD 0
.IP "\fB\-dy\fR" 4
d708 1
a708 1
.IP "\fB\-call_shared\fR" 4
a709 1
.PD
d715 2
a716 2
\&\fB\-l\fR options which follow it.
.IP "\fB\-Bgroup\fR" 4
d721 3
a723 3
\&\fB\-\-unresolved\-symbols=report\-all\fR is implied.  This option is
only meaningful on \s-1ELF\s0 platforms which support shared libraries.
.IP "\fB\-Bstatic\fR" 4
d725 1
a725 2
.PD 0
.IP "\fB\-dn\fR" 4
d727 1
a727 1
.IP "\fB\-non_shared\fR" 4
d729 1
a729 1
.IP "\fB\-static\fR" 4
a730 1
.PD
d735 2
a736 7
library searching for \fB\-l\fR options which follow it.  This
option also implies \fB\-\-unresolved\-symbols=report\-all\fR.  This
option can be used with \fB\-shared\fR.  Doing so means that a
shared library is being created but that all of the library's external
references must be resolved by pulling in entries from static
libraries.
.IP "\fB\-Bsymbolic\fR" 4
d743 1
a743 29
.IP "\fB\-Bsymbolic\-functions\fR" 4
.IX Item "-Bsymbolic-functions"
When creating a shared library, bind references to global function
symbols to the definition within the shared library, if any.
This option is only meaningful on \s-1ELF\s0 platforms which support shared
libraries.
.IP "\fB\-\-dynamic\-list=\fR\fIdynamic-list-file\fR" 4
.IX Item "--dynamic-list=dynamic-list-file"
Specify the name of a dynamic list file to the linker.  This is
typically used when creating shared libraries to specify a list of
global symbols whose references shouldn't be bound to the definition
within the shared library, or creating dynamically linked executables
to specify a list of symbols which should be added to the symbol table
in the executable.  This option is only meaningful on \s-1ELF\s0 platforms
which support shared libraries.
.Sp
The format of the dynamic list is the same as the version node without
scope and node name.  See \fB\s-1VERSION\s0\fR for more information.
.IP "\fB\-\-dynamic\-list\-data\fR" 4
.IX Item "--dynamic-list-data"
Include all global data symbols to the dynamic list.
.IP "\fB\-\-dynamic\-list\-cpp\-new\fR" 4
.IX Item "--dynamic-list-cpp-new"
Provide the builtin dynamic list for \*(C+ operator new and delete.  It
is mainly useful for building shared libstdc++.
.IP "\fB\-\-dynamic\-list\-cpp\-typeinfo\fR" 4
.IX Item "--dynamic-list-cpp-typeinfo"
Provide the builtin dynamic list for \*(C+ runtime type identification.
.IP "\fB\-\-check\-sections\fR" 4
d745 1
a745 2
.PD 0
.IP "\fB\-\-no\-check\-sections\fR" 4
a746 1
.PD
d748 1
a748 1
been assigned to see if there are any overlaps.  Normally the linker will
d752 2
a753 2
restored by using the command line switch \fB\-\-check\-sections\fR.
.IP "\fB\-\-cref\fR" 4
d764 1
a764 16
.IP "\fB\-\-no\-define\-common\fR" 4
.IX Item "--no-define-common"
This option inhibits the assignment of addresses to common symbols.
The script command \f(CW\*(C`INHIBIT_COMMON_ALLOCATION\*(C'\fR has the same effect.
.Sp
The \fB\-\-no\-define\-common\fR option allows decoupling
the decision to assign addresses to Common symbols from the choice
of the output file type; otherwise a non-Relocatable output type
forces assigning addresses to Common symbols.
Using \fB\-\-no\-define\-common\fR allows Common symbols that are referenced
from a shared library to be assigned addresses only in the main program.
This eliminates the unused duplicate space in the shared library,
and also prevents any possible confusion over resolving to the wrong
duplicate when there are many dynamic modules with specialized search
paths for runtime symbol resolution.
.IP "\fB\-\-defsym\fR \fIsymbol\fR\fB=\fR\fIexpression\fR" 4
d774 1
a774 1
space between \fIsymbol\fR, the equals sign ("\fB=\fR"), and
d776 1
a776 1
.IP "\fB\-\-demangle[=\fR\fIstyle\fR\fB]\fR" 4
d778 1
a778 2
.PD 0
.IP "\fB\-\-no\-demangle\fR" 4
a779 1
.PD
d789 1
a789 1
.IP "\fB\-\-dynamic\-linker\fR \fIfile\fR" 4
d795 8
a802 1
.IP "\fB\-\-fatal\-warnings\fR" 4
d805 1
a805 1
.IP "\fB\-\-force\-exe\-suffix\fR" 4
d815 3
a817 1
.IP "\fB\-\-gc\-sections\fR" 4
a818 4
.PD 0
.IP "\fB\-\-no\-gc\-sections\fR" 4
.IX Item "--no-gc-sections"
.PD
d821 4
a824 16
with \fB\-r\fR or \fB\-\-emit\-relocs\fR. The default behaviour (of not
performing this garbage collection) can be restored by specifying
\&\fB\-\-no\-gc\-sections\fR on the command line.
.IP "\fB\-\-print\-gc\-sections\fR" 4
.IX Item "--print-gc-sections"
.PD 0
.IP "\fB\-\-no\-print\-gc\-sections\fR" 4
.IX Item "--no-print-gc-sections"
.PD
List all sections removed by garbage collection.  The listing is
printed on stderr.  This option is only effective if garbage
collection has been enabled via the \fB\-\-gc\-sections\fR) option.  The
default behaviour (of not listing the sections that are removed) can
be restored by specifying \fB\-\-no\-print\-gc\-sections\fR on the command
line.
.IP "\fB\-\-help\fR" 4
d827 1
a827 1
.IP "\fB\-\-target\-help\fR" 4
d830 1
a830 1
.IP "\fB\-Map\fR \fImapfile\fR" 4
d834 1
a834 1
.IP "\fB\-\-no\-keep\-memory\fR" 4
d836 2
a837 2
\&\fBld\fR normally optimizes for speed over memory usage by caching the
symbol tables of input files in memory.  This option tells \fBld\fR to
d839 1
a839 1
necessary.  This may be required if \fBld\fR runs out of memory space
d841 1
a841 1
.IP "\fB\-\-no\-undefined\fR" 4
d843 1
a843 2
.PD 0
.IP "\fB\-z defs\fR" 4
d845 4
a848 16
.PD
Report unresolved symbol references from regular object files.  This
is done even if the linker is creating a non-symbolic shared library.
The switch \fB\-\-[no\-]allow\-shlib\-undefined\fR controls the
behaviour for reporting unresolved references found in shared
libraries being linked in.
.IP "\fB\-\-allow\-multiple\-definition\fR" 4
.IX Item "--allow-multiple-definition"
.PD 0
.IP "\fB\-z muldefs\fR" 4
.IX Item "-z muldefs"
.PD
Normally when a symbol is defined multiple times, the linker will
report a fatal error. These options allow multiple definitions and the
first definition will be used.
.IP "\fB\-\-allow\-shlib\-undefined\fR" 4
d850 11
a860 33
.PD 0
.IP "\fB\-\-no\-allow\-shlib\-undefined\fR" 4
.IX Item "--no-allow-shlib-undefined"
.PD
Allows (the default) or disallows undefined symbols in shared libraries.
This switch is similar to \fB\-\-no\-undefined\fR except that it
determines the behaviour when the undefined symbols are in a
shared library rather than a regular object file.  It does not affect
how undefined symbols in regular object files are handled.
.Sp
The reason that \fB\-\-allow\-shlib\-undefined\fR is the default is that
the shared library being specified at link time may not be the same as
the one that is available at load time, so the symbols might actually be
resolvable at load time.  Plus there are some systems, (eg BeOS) where
undefined symbols in shared libraries is normal.  (The kernel patches
them at load time to select which function is most appropriate
for the current architecture.  This is used for example to dynamically
select an appropriate memset function).  Apparently it is also normal
for \s-1HPPA\s0 shared libraries to have undefined symbols.
.IP "\fB\-\-no\-undefined\-version\fR" 4
.IX Item "--no-undefined-version"
Normally when a symbol has an undefined version, the linker will ignore
it. This option disallows symbols with undefined version and a fatal error
will be issued instead.
.IP "\fB\-\-default\-symver\fR" 4
.IX Item "--default-symver"
Create and use a default symbol version (the soname) for unversioned
exported symbols.
.IP "\fB\-\-default\-imported\-symver\fR" 4
.IX Item "--default-imported-symver"
Create and use a default symbol version (the soname) for unversioned
imported symbols.
.IP "\fB\-\-no\-warn\-mismatch\fR" 4
d862 1
a862 1
Normally \fBld\fR will give an error if you try to link together input
d865 1
a865 1
This option tells \fBld\fR that it should silently permit such possible
d869 1
a869 5
.IP "\fB\-\-no\-warn\-search\-mismatch\fR" 4
.IX Item "--no-warn-search-mismatch"
Normally \fBld\fR will give a warning if it finds an incompatible
library during a library search.  This option silences the warning.
.IP "\fB\-\-no\-whole\-archive\fR" 4
d871 1
a871 1
Turn off the effect of the \fB\-\-whole\-archive\fR option for subsequent
d873 1
a873 1
.IP "\fB\-\-noinhibit\-exec\fR" 4
d879 1
a879 6
.IP "\fB\-nostdlib\fR" 4
.IX Item "-nostdlib"
Only search library directories explicitly specified on the
command line.  Library directories specified in linker scripts
(including linker scripts specified on the command line) are ignored.
.IP "\fB\-\-oformat\fR \fIoutput-format\fR" 4
d881 5
a885 5
\&\fBld\fR may be configured to support more than one kind of object
file.  If your \fBld\fR is configured this way, you can use the
\&\fB\-\-oformat\fR option to specify the binary format for the output
object file.  Even when \fBld\fR is configured to support alternative
object formats, you don't usually need to specify this, as \fBld\fR
d892 1
a892 13
.IP "\fB\-pie\fR" 4
.IX Item "-pie"
.PD 0
.IP "\fB\-\-pic\-executable\fR" 4
.IX Item "--pic-executable"
.PD
Create a position independent executable.  This is currently only supported on
\&\s-1ELF\s0 platforms.  Position independent executables are similar to shared
libraries in that they are relocated by the dynamic linker to the virtual
address the \s-1OS\s0 chooses for them (which can vary between invocations).  Like
normal dynamically linked executables they can be executed and symbols
defined in the executable cannot be overridden by shared libraries.
.IP "\fB\-qmagic\fR" 4
d895 1
a895 1
.IP "\fB\-Qy\fR" 4
d898 1
a898 1
.IP "\fB\-\-relax\fR" 4
d903 1
a903 1
On some platforms, the \fB\-\-relax\fR option performs global
d913 1
a913 1
On platforms where this is not supported, \fB\-\-relax\fR is accepted,
d915 1
a915 1
.IP "\fB\-\-retain\-symbols\-file\fR \fIfilename\fR" 4
d924 1
a924 1
\&\fB\-\-retain\-symbols\-file\fR does \fInot\fR discard undefined symbols,
d927 1
a927 1
You may only specify \fB\-\-retain\-symbols\-file\fR once in the command
d929 1
a929 1
.IP "\fB\-rpath\fR \fIdir\fR" 4
d932 1
a932 1
linking an \s-1ELF\s0 executable with shared objects.  All \fB\-rpath\fR
d934 1
a934 1
them to locate shared objects at runtime.  The \fB\-rpath\fR option is
d937 1
a937 1
\&\fB\-rpath\-link\fR option.  If \fB\-rpath\fR is not used when linking an
d941 1
a941 1
The \fB\-rpath\fR option may also be used on SunOS.  By default, on
d943 5
a947 5
\&\fB\-L\fR options it is given.  If a \fB\-rpath\fR option is used, the
runtime search path will be formed exclusively using the \fB\-rpath\fR
options, ignoring the \fB\-L\fR options.  This can be useful when using
gcc, which adds many \fB\-L\fR options which may be on \s-1NFS\s0 mounted
file systems.
d949 1
a949 1
For compatibility with other \s-1ELF\s0 linkers, if the \fB\-R\fR option is
d951 2
a952 2
the \fB\-rpath\fR option.
.IP "\fB\-rpath\-link\fR \fI\s-1DIR\s0\fR" 4
d958 1
a958 1
When the linker encounters such a dependency when doing a non\-shared,
d961 1
a961 1
explicitly.  In such a case, the \fB\-rpath\-link\fR option
d963 1
a963 1
\&\fB\-rpath\-link\fR option may specify a sequence of directory names
d973 1
a973 1
libraries:
d975 10
a984 12
.IP "1." 4
Any directories specified by \fB\-rpath\-link\fR options.
.IP "2." 4
Any directories specified by \fB\-rpath\fR options.  The difference
between \fB\-rpath\fR and \fB\-rpath\-link\fR is that directories
specified by \fB\-rpath\fR options are included in the executable and
used at runtime, whereas the \fB\-rpath\-link\fR option is only effective
at link time. Searching \fB\-rpath\fR in this way is only supported
by native linkers and cross linkers which have been configured with
the \fB\-\-with\-sysroot\fR option.
.IP "3." 4
On an \s-1ELF\s0 system, if the \fB\-rpath\fR and \f(CW\*(C`rpath\-link\*(C'\fR options
d987 4
a990 4
.IP "4." 4
On SunOS, if the \fB\-rpath\fR option was not used, search any
directories specified using \fB\-L\fR options.
.IP "5." 4
d993 1
a993 1
.IP "6." 4
d998 1
a998 1
.IP "7." 4
d1000 1
a1000 1
.IP "8." 4
d1009 1
a1009 1
.IP "\fB\-shared\fR" 4
d1011 1
a1011 2
.PD 0
.IP "\fB\-Bshareable\fR" 4
a1012 1
.PD
d1015 1
a1015 1
shared library if the \fB\-e\fR option is not used and there are
d1017 1
a1017 1
.IP "\fB\-\-sort\-common\fR" 4
d1019 1
a1019 1
This option tells \fBld\fR to sort the common symbols by size when it
d1021 1
a1021 1
byte symbols, then all the two byte, then all the four byte, and then
d1024 1
a1024 9
.IP "\fB\-\-sort\-section name\fR" 4
.IX Item "--sort-section name"
This option will apply \f(CW\*(C`SORT_BY_NAME\*(C'\fR to all wildcard section
patterns in the linker script.
.IP "\fB\-\-sort\-section alignment\fR" 4
.IX Item "--sort-section alignment"
This option will apply \f(CW\*(C`SORT_BY_ALIGNMENT\*(C'\fR to all wildcard section
patterns in the linker script.
.IP "\fB\-\-split\-by\-file [\fR\fIsize\fR\fB]\fR" 4
d1026 1
a1026 1
Similar to \fB\-\-split\-by\-reloc\fR but creates a new output section for
d1029 1
a1029 1
.IP "\fB\-\-split\-by\-reloc [\fR\fIcount\fR\fB]\fR" 4
d1041 1
a1041 1
.IP "\fB\-\-stats\fR" 4
d1045 1
a1045 6
.IP "\fB\-\-sysroot=\fR\fIdirectory\fR" 4
.IX Item "--sysroot=directory"
Use \fIdirectory\fR as the location of the sysroot, overriding the
configure-time default.  This option is only supported by linkers
that were configured using \fB\-\-with\-sysroot\fR.
.IP "\fB\-\-traditional\-format\fR" 4
d1047 2
a1048 2
For some targets, the output of \fBld\fR is different in some ways from
the output of some existing linker.  This switch requests \fBld\fR to
d1051 1
a1051 1
For example, on SunOS, \fBld\fR combines duplicate entries in the
d1055 1
a1055 1
trouble).  The \fB\-\-traditional\-format\fR switch tells \fBld\fR to not
d1057 1
a1057 1
.IP "\fB\-\-section\-start\fR \fIsectionname\fR\fB=\fR\fIorg\fR" 4
d1067 2
a1068 2
sign ("\fB=\fR"), and \fIorg\fR.
.IP "\fB\-Tbss\fR \fIorg\fR" 4
d1070 1
a1070 2
.PD 0
.IP "\fB\-Tdata\fR \fIorg\fR" 4
d1072 1
a1072 1
.IP "\fB\-Ttext\fR \fIorg\fR" 4
d1074 6
a1079 36
.PD
Same as \-\-section\-start, with \f(CW\*(C`.bss\*(C'\fR, \f(CW\*(C`.data\*(C'\fR or
\&\f(CW\*(C`.text\*(C'\fR as the \fIsectionname\fR.
.IP "\fB\-\-unresolved\-symbols=\fR\fImethod\fR" 4
.IX Item "--unresolved-symbols=method"
Determine how to handle unresolved symbols.  There are four possible
values for \fBmethod\fR:
.RS 4
.IP "\fBignore-all\fR" 4
.IX Item "ignore-all"
Do not report any unresolved symbols.
.IP "\fBreport-all\fR" 4
.IX Item "report-all"
Report all unresolved symbols.  This is the default.
.IP "\fBignore-in-object-files\fR" 4
.IX Item "ignore-in-object-files"
Report unresolved symbols that are contained in shared libraries, but
ignore them if they come from regular object files.
.IP "\fBignore-in-shared-libs\fR" 4
.IX Item "ignore-in-shared-libs"
Report unresolved symbols that come from regular object files, but
ignore them if they come from shared libraries.  This can be useful
when creating a dynamic binary and it is known that all the shared
libraries that it should be referencing are included on the linker's
command line.
.RE
.RS 4
.Sp
The behaviour for shared libraries on their own can also be controlled
by the \fB\-\-[no\-]allow\-shlib\-undefined\fR option.
.Sp
Normally the linker will generate an error message for each reported
unresolved symbol but the option \fB\-\-warn\-unresolved\-symbols\fR
can change this to a warning.
.RE
.IP "\fB\-\-dll\-verbose\fR" 4
d1081 1
a1081 2
.PD 0
.IP "\fB\-\-verbose\fR" 4
d1083 1
a1083 2
.PD
Display the version number for \fBld\fR and list the linker emulations
d1085 2
a1086 2
the linker script being used by the linker.
.IP "\fB\-\-version\-script=\fR\fIversion-scriptfile\fR" 4
d1090 1
a1090 1
about the version hierarchy for the library being created.  This option
d1092 1
a1092 1
.IP "\fB\-\-warn\-common\fR" 4
d1095 1
a1095 1
a symbol definition.  Unix linkers allow this somewhat sloppy practise,
d1098 1
a1098 1
Unfortunately, some C libraries use this practise, so you may get some
d1103 1
a1103 1
.IP "\fBint i = 1;\fR" 4
d1107 1
a1107 1
.IP "\fBextern int i;\fR" 4
d1112 1
a1112 1
.IP "\fBint i;\fR" 4
d1123 1
a1123 1
The \fB\-\-warn\-common\fR option can produce five kinds of warnings.
d1128 3
a1130 1
.IP "1." 4
d1135 1
a1135 1
\&        <file>(<section>): warning: common of `<symbol>'
d1137 1
a1137 1
\&        <file>(<section>): warning: defined here
d1139 1
a1139 1
.IP "2." 4
d1145 1
a1145 1
\&        <file>(<section>): warning: definition of `<symbol>'
d1147 1
a1147 1
\&        <file>(<section>): warning: common is here
d1149 1
a1149 1
.IP "3." 4
d1153 3
a1155 3
\&        <file>(<section>): warning: multiple common
\&           of `<symbol>'
\&        <file>(<section>): warning: previous common is here
d1157 1
a1157 1
.IP "4." 4
d1161 1
a1161 1
\&        <file>(<section>): warning: common of `<symbol>'
d1163 1
a1163 1
\&        <file>(<section>): warning: larger common is here
d1165 1
a1165 1
.IP "5." 4
d1171 1
a1171 1
\&        <file>(<section>): warning: common of `<symbol>'
d1173 1
a1173 1
\&        <file>(<section>): warning: smaller common is here
d1178 1
a1178 1
.IP "\fB\-\-warn\-constructors\fR" 4
d1183 1
a1183 1
.IP "\fB\-\-warn\-multiple\-gp\fR" 4
d1196 1
a1196 1
.IP "\fB\-\-warn\-once\fR" 4
d1200 1
a1200 1
.IP "\fB\-\-warn\-section\-align\fR" 4
d1207 1
a1207 13
.IP "\fB\-\-warn\-shared\-textrel\fR" 4
.IX Item "--warn-shared-textrel"
Warn if the linker adds a \s-1DT_TEXTREL\s0 to a shared object.
.IP "\fB\-\-warn\-unresolved\-symbols\fR" 4
.IX Item "--warn-unresolved-symbols"
If the linker is going to report an unresolved symbol (see the option
\&\fB\-\-unresolved\-symbols\fR) it will normally generate an error.
This option makes it generate a warning instead.
.IP "\fB\-\-error\-unresolved\-symbols\fR" 4
.IX Item "--error-unresolved-symbols"
This restores the linker's default behaviour of generating errors when
it is reporting unresolved symbols.
.IP "\fB\-\-whole\-archive\fR" 4
d1210 1
a1210 1
\&\fB\-\-whole\-archive\fR option, include every object file in the archive
d1217 2
a1218 2
about this option, so you have to use \fB\-Wl,\-whole\-archive\fR.
Second, don't forget to use \fB\-Wl,\-no\-whole\-archive\fR after your
d1221 1
a1221 1
.IP "\fB\-\-wrap\fR \fIsymbol\fR" 4
d1237 1
a1237 1
\&        __wrap_malloc (size_t c)
d1239 1
a1239 1
\&          printf ("malloc called with %zu\en", c);
d1243 1
a1243 2
.Sp
If you link other code with this file using \fB\-\-wrap malloc\fR, then
d1249 1
a1249 1
links without the \fB\-\-wrap\fR option will succeed.  If you do this,
d1253 1
a1253 5
.IP "\fB\-\-eh\-frame\-hdr\fR" 4
.IX Item "--eh-frame-hdr"
Request creation of \f(CW\*(C`.eh_frame_hdr\*(C'\fR section and \s-1ELF\s0
\&\f(CW\*(C`PT_GNU_EH_FRAME\*(C'\fR segment header.
.IP "\fB\-\-enable\-new\-dtags\fR" 4
d1255 1
a1255 2
.PD 0
.IP "\fB\-\-disable\-new\-dtags\fR" 4
a1256 1
.PD
d1259 2
a1260 2
\&\fB\-\-enable\-new\-dtags\fR, the dynamic tags will be created as needed.
If you specify \fB\-\-disable\-new\-dtags\fR, no new dynamic tags will be
a1262 54
.IP "\fB\-\-hash\-size=\fR\fInumber\fR" 4
.IX Item "--hash-size=number"
Set the default size of the linker's hash tables to a prime number
close to \fInumber\fR.  Increasing this value can reduce the length of
time it takes the linker to perform its tasks, at the expense of
increasing the linker's memory requirements.  Similarly reducing this
value can reduce the memory requirements at the expense of speed.
.IP "\fB\-\-hash\-style=\fR\fIstyle\fR" 4
.IX Item "--hash-style=style"
Set the type of linker's hash table(s).  \fIstyle\fR can be either
\&\f(CW\*(C`sysv\*(C'\fR for classic \s-1ELF\s0 \f(CW\*(C`.hash\*(C'\fR section, \f(CW\*(C`gnu\*(C'\fR for
new style \s-1GNU\s0 \f(CW\*(C`.gnu.hash\*(C'\fR section or \f(CW\*(C`both\*(C'\fR for both
the classic \s-1ELF\s0 \f(CW\*(C`.hash\*(C'\fR and new style \s-1GNU\s0 \f(CW\*(C`.gnu.hash\*(C'\fR
hash tables.  The default is \f(CW\*(C`sysv\*(C'\fR.
.IP "\fB\-\-reduce\-memory\-overheads\fR" 4
.IX Item "--reduce-memory-overheads"
This option reduces memory requirements at ld runtime, at the expense of
linking speed.  This was introduced to select the old O(n^2) algorithm
for link map file generation, rather than the new O(n) algorithm which uses
about 40% more memory for symbol storage.
.Sp
Another effect of the switch is to set the default hash table size to
1021, which again saves memory at the cost of lengthening the linker's
run time.  This is not done however if the \fB\-\-hash\-size\fR switch
has been used.
.Sp
The \fB\-\-reduce\-memory\-overheads\fR switch may be also be used to
enable other tradeoffs in future versions of the linker.
.IP "\fB\-\-build\-id\fR" 4
.IX Item "--build-id"
.PD 0
.IP "\fB\-\-build\-id=\fR\fIstyle\fR" 4
.IX Item "--build-id=style"
.PD
Request creation of \f(CW\*(C`.note.gnu.build\-id\*(C'\fR \s-1ELF\s0 note section.
The contents of the note are unique bits identifying this linked
file.  \fIstyle\fR can be \f(CW\*(C`uuid\*(C'\fR to use 128 random bits,
\&\f(CW\*(C`sha1\*(C'\fR to use a 160\-bit \s-1SHA1\s0 hash on the normative
parts of the output contents, \f(CW\*(C`md5\*(C'\fR to use a 128\-bit
\&\s-1MD5\s0 hash on the normative parts of the output contents, or
\&\f(CW\*(C`0x\f(CIhexstring\f(CW\*(C'\fR to use a chosen bit string specified as
an even number of hexadecimal digits (\f(CW\*(C`\-\*(C'\fR and \f(CW\*(C`:\*(C'\fR
characters between digit pairs are ignored).  If \fIstyle\fR is
omitted, \f(CW\*(C`sha1\*(C'\fR is used.
.Sp
The \f(CW\*(C`md5\*(C'\fR and \f(CW\*(C`sha1\*(C'\fR styles produces an identifier
that is always the same in an identical output file, but will be
unique among all nonidentical output files.  It is not intended
to be compared as a checksum for the file's contents.  A linked
file may be changed later by other tools, but the build \s-1ID\s0 bit
string identifying the original linked file does not change.
.Sp
Passing \f(CW\*(C`none\*(C'\fR for \fIstyle\fR disables the setting from any
\&\f(CW\*(C`\-\-build\-id\*(C'\fR options earlier on the command line.
d1264 1
a1264 1
The i386 \s-1PE\s0 linker supports the \fB\-shared\fR option, which causes
d1277 1
a1277 1
.IP "\fB\-\-add\-stdcall\-alias\fR" 4
d1281 1
a1281 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-base\-file\fR \fIfile\fR" 4
d1286 1
a1286 2
[This is an i386 \s-1PE\s0 specific option]
.IP "\fB\-\-dll\fR" 4
d1289 1
a1289 1
\&\fB\-shared\fR or specify a \f(CW\*(C`LIBRARY\*(C'\fR in a given \f(CW\*(C`.def\*(C'\fR
d1291 1
a1291 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-stdcall\-fixup\fR" 4
d1293 1
a1293 2
.PD 0
.IP "\fB\-\-disable\-stdcall\-fixup\fR" 4
a1294 1
.PD
d1304 1
a1304 1
to be usable.  If you specify \fB\-\-enable\-stdcall\-fixup\fR, this
d1306 1
a1306 1
\&\fB\-\-disable\-stdcall\-fixup\fR, this feature is disabled and such
d1308 1
a1308 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-export\-all\-symbols\fR" 4
d1316 3
a1318 18
\&\f(CW\*(C`DllEntryPoint@@0\*(C'\fR, \f(CW\*(C`DllMainCRTStartup@@12\*(C'\fR, and
\&\f(CW\*(C`impure_ptr\*(C'\fR will not be automatically
exported.  Also, symbols imported from other DLLs will not be
re\-exported, nor will symbols specifying the \s-1DLL\s0's internal layout
such as those beginning with \f(CW\*(C`_head_\*(C'\fR or ending with
\&\f(CW\*(C`_iname\*(C'\fR.  In addition, no symbols from \f(CW\*(C`libgcc\*(C'\fR,
\&\f(CW\*(C`libstd++\*(C'\fR, \f(CW\*(C`libmingw32\*(C'\fR, or \f(CW\*(C`crtX.o\*(C'\fR will be exported.
Symbols whose names begin with \f(CW\*(C`_\|_rtti_\*(C'\fR or \f(CW\*(C`_\|_builtin_\*(C'\fR will
not be exported, to help with \*(C+ DLLs.  Finally, there is an
extensive list of cygwin-private symbols that are not exported
(obviously, this applies on when building DLLs for cygwin targets).
These cygwin-excludes are: \f(CW\*(C`_cygwin_dll_entry@@12\*(C'\fR,
\&\f(CW\*(C`_cygwin_crt0_common@@8\*(C'\fR, \f(CW\*(C`_cygwin_noncygwin_dll_entry@@12\*(C'\fR,
\&\f(CW\*(C`_fmode\*(C'\fR, \f(CW\*(C`_impure_ptr\*(C'\fR, \f(CW\*(C`cygwin_attach_dll\*(C'\fR,
\&\f(CW\*(C`cygwin_premain0\*(C'\fR, \f(CW\*(C`cygwin_premain1\*(C'\fR, \f(CW\*(C`cygwin_premain2\*(C'\fR,
\&\f(CW\*(C`cygwin_premain3\*(C'\fR, and \f(CW\*(C`environ\*(C'\fR.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-exclude\-symbols\fR \fIsymbol\fR\fB,\fR\fIsymbol\fR\fB,...\fR" 4
d1322 1
a1322 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-file\-alignment\fR" 4
d1327 1
a1327 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-heap\fR \fIreserve\fR" 4
d1329 1
a1329 2
.PD 0
.IP "\fB\-\-heap\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
d1331 2
a1332 3
.PD
Specify the number of bytes of memory to reserve (and optionally commit)
to be used as heap for this program.  The default is 1Mb reserved, 4K
d1334 1
a1334 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-image\-base\fR \fIvalue\fR" 4
d1342 1
a1342 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-kill\-at\fR" 4
d1346 1
a1346 10
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-large\-address\-aware\fR" 4
.IX Item "--large-address-aware"
If given, the appropriate bit in the \*(L"Characteristics\*(R" field of the \s-1COFF\s0
header is set to indicate that this executable supports virtual addresses
greater than 2 gigabytes.  This should be used in conjunction with the /3GB
or /USERVA=\fIvalue\fR megabytes switch in the \*(L"[operating systems]\*(R"
section of the \s-1BOOT\s0.INI.  Otherwise, this bit has no effect.
[This option is specific to \s-1PE\s0 targeted ports of the linker]
.IP "\fB\-\-major\-image\-version\fR \fIvalue\fR" 4
d1349 1
a1349 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-major\-os\-version\fR \fIvalue\fR" 4
d1352 1
a1352 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-major\-subsystem\-version\fR \fIvalue\fR" 4
d1355 1
a1355 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-image\-version\fR \fIvalue\fR" 4
d1358 1
a1358 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-os\-version\fR \fIvalue\fR" 4
d1361 1
a1361 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-subsystem\-version\fR \fIvalue\fR" 4
d1364 1
a1364 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-output\-def\fR \fIfile\fR" 4
d1371 1
a1371 182
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-out\-implib\fR \fIfile\fR" 4
.IX Item "--out-implib file"
The linker will create the file \fIfile\fR which will contain an
import lib corresponding to the \s-1DLL\s0 the linker is generating. This
import lib (which should be called \f(CW\*(C`*.dll.a\*(C'\fR or \f(CW\*(C`*.a\*(C'\fR
may be used to link clients against the generated \s-1DLL\s0; this behaviour
makes it possible to skip a separate \f(CW\*(C`dlltool\*(C'\fR import library
creation step.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-auto\-image\-base\fR" 4
.IX Item "--enable-auto-image-base"
Automatically choose the image base for DLLs, unless one is specified
using the \f(CW\*(C`\-\-image\-base\*(C'\fR argument.  By using a hash generated
from the dllname to create unique image bases for each \s-1DLL\s0, in-memory
collisions and relocations which can delay program execution are
avoided.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-auto\-image\-base\fR" 4
.IX Item "--disable-auto-image-base"
Do not automatically generate a unique image base.  If there is no
user-specified image base (\f(CW\*(C`\-\-image\-base\*(C'\fR) then use the platform
default.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-dll\-search\-prefix\fR \fIstring\fR" 4
.IX Item "--dll-search-prefix string"
When linking dynamically to a dll without an import library,
search for \f(CW\*(C`<string><basename>.dll\*(C'\fR in preference to
\&\f(CW\*(C`lib<basename>.dll\*(C'\fR. This behaviour allows easy distinction
between DLLs built for the various \*(L"subplatforms\*(R": native, cygwin,
uwin, pw, etc.  For instance, cygwin DLLs typically use
\&\f(CW\*(C`\-\-dll\-search\-prefix=cyg\*(C'\fR.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-auto\-import\fR" 4
.IX Item "--enable-auto-import"
Do sophisticated linking of \f(CW\*(C`_symbol\*(C'\fR to \f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for
\&\s-1DATA\s0 imports from DLLs, and create the necessary thunking symbols when
building the import libraries with those \s-1DATA\s0 exports. Note: Use of the
\&'auto\-import' extension will cause the text section of the image file
to be made writable. This does not conform to the PE-COFF format
specification published by Microsoft.
.Sp
Using 'auto\-import' generally will 'just work' \*(-- but sometimes you may
see this message:
.Sp
"variable '<var>' can't be auto\-imported. Please read the
documentation for ld's \f(CW\*(C`\-\-enable\-auto\-import\*(C'\fR for details."
.Sp
This message occurs when some (sub)expression accesses an address
ultimately given by the sum of two constants (Win32 import tables only
allow one).  Instances where this may occur include accesses to member
fields of struct variables imported from a \s-1DLL\s0, as well as using a
constant index into an array variable imported from a \s-1DLL\s0.  Any
multiword variable (arrays, structs, long long, etc) may trigger
this error condition.  However, regardless of the exact data type
of the offending exported variable, ld will always detect it, issue
the warning, and exit.
.Sp
There are several ways to address this difficulty, regardless of the
data type of the exported variable:
.Sp
One way is to use \-\-enable\-runtime\-pseudo\-reloc switch. This leaves the task
of adjusting references in your client code for runtime environment, so
this method works only when runtime environment supports this feature.
.Sp
A second solution is to force one of the 'constants' to be a variable \*(--
that is, unknown and un-optimizable at compile time.  For arrays,
there are two possibilities: a) make the indexee (the array's address)
a variable, or b) make the 'constant' index a variable.  Thus:
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] \-\->
\&           { volatile type *t=extern_array; t[1] }
.Ve
.Sp
or
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] \-\->
\&           { volatile int t=1; extern_array[t] }
.Ve
.Sp
For structs (and most other multiword data types) the only option
is to make the struct itself (or the long long, or the ...) variable:
.Sp
.Vb 3
\&        extern struct s extern_struct;
\&        extern_struct.field \-\->
\&           { volatile struct s *t=&extern_struct; t\->field }
.Ve
.Sp
or
.Sp
.Vb 3
\&        extern long long extern_ll;
\&        extern_ll \-\->
\&          { volatile long long * local_ll=&extern_ll; *local_ll }
.Ve
.Sp
A third method of dealing with this difficulty is to abandon
\&'auto\-import' for the offending symbol and mark it with
\&\f(CW\*(C`_\|_declspec(dllimport)\*(C'\fR.  However, in practise that
requires using compile-time #defines to indicate whether you are
building a \s-1DLL\s0, building client code that will link to the \s-1DLL\s0, or
merely building/linking to a static library.   In making the choice
between the various methods of resolving the 'direct address with
constant offset' problem, you should consider typical real-world usage:
.Sp
Original:
.Sp
.Vb 7
\&        \-\-foo.h
\&        extern int arr[];
\&        \-\-foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
.Sp
Solution 1:
.Sp
.Vb 9
\&        \-\-foo.h
\&        extern int arr[];
\&        \-\-foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          /* This workaround is for win32 and cygwin; do not "optimize" */
\&          volatile int *parr = arr;
\&          printf("%d\en",parr[1]);
\&        }
.Ve
.Sp
Solution 2:
.Sp
.Vb 14
\&        \-\-foo.h
\&        /* Note: auto\-export is assumed (no __declspec(dllexport)) */
\&        #if (defined(_WIN32) || defined(__CYGWIN__)) && \e
\&          !(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))
\&        #define FOO_IMPORT __declspec(dllimport)
\&        #else
\&        #define FOO_IMPORT
\&        #endif
\&        extern FOO_IMPORT int arr[];
\&        \-\-foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
.Sp
A fourth way to avoid this problem is to re-code your
library to use a functional interface rather than a data interface
for the offending variables (e.g. \fIset_foo()\fR and \fIget_foo()\fR accessor
functions).
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-auto\-import\fR" 4
.IX Item "--disable-auto-import"
Do not attempt to do sophisticated linking of \f(CW\*(C`_symbol\*(C'\fR to
\&\f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for \s-1DATA\s0 imports from DLLs.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-runtime\-pseudo\-reloc\fR" 4
.IX Item "--enable-runtime-pseudo-reloc"
If your code contains expressions described in \-\-enable\-auto\-import section,
that is, \s-1DATA\s0 imports from \s-1DLL\s0 with non-zero offset, this switch will create
a vector of 'runtime pseudo relocations' which can be used by runtime
environment to adjust references to such data in your client code.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-runtime\-pseudo\-reloc\fR" 4
.IX Item "--disable-runtime-pseudo-reloc"
Do not create pseudo relocations for non-zero offset \s-1DATA\s0 imports from
DLLs.  This is the default.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-extra\-pe\-debug\fR" 4
.IX Item "--enable-extra-pe-debug"
Show additional debug info related to auto-import symbol thunking.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-section\-alignment\fR" 4
d1375 1
a1375 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-stack\fR \fIreserve\fR" 4
d1377 1
a1377 2
.PD 0
.IP "\fB\-\-stack\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
d1379 2
a1380 3
.PD
Specify the number of bytes of memory to reserve (and optionally commit)
to be used as stack for this program.  The default is 2Mb reserved, 4K
d1382 1
a1382 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-subsystem\fR \fIwhich\fR" 4
d1384 1
a1384 2
.PD 0
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR" 4
d1386 1
a1386 1
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR\fB.\fR\fIminor\fR" 4
a1387 1
.PD
d1390 2
a1391 18
\&\f(CW\*(C`console\*(C'\fR, \f(CW\*(C`posix\*(C'\fR, and \f(CW\*(C`xbox\*(C'\fR.  You may optionally set
the subsystem version also.  Numeric values are also accepted for
\&\fIwhich\fR.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.PP
The 68HC11 and 68HC12 linkers support specific options to control the
memory bank switching mapping and trampoline code generation.
.IP "\fB\-\-no\-trampoline\fR" 4
.IX Item "--no-trampoline"
This option disables the generation of trampoline. By default a trampoline
is generated for each far function which is called using a \f(CW\*(C`jsr\*(C'\fR
instruction (this happens when a pointer to a far function is taken).
.IP "\fB\-\-bank\-window\fR \fIname\fR" 4
.IX Item "--bank-window name"
This option indicates to the linker the name of the memory region in
the \fB\s-1MEMORY\s0\fR specification that describes the memory bank window.
The definition of such region is then used by the linker to compute
paging and addresses within the memory window.
d1394 2
a1395 3
You can change the behaviour of \fBld\fR with the environment variables
\&\f(CW\*(C`GNUTARGET\*(C'\fR,
\&\f(CW\*(C`LDEMULATION\*(C'\fR and \f(CW\*(C`COLLECT_NO_DEMANGLE\*(C'\fR.
d1398 1
a1398 1
use \fB\-b\fR (or its synonym \fB\-\-format\fR).  Its value should be one
d1400 1
a1400 1
\&\f(CW\*(C`GNUTARGET\*(C'\fR in the environment, \fBld\fR uses the natural format
d1407 1
a1407 1
in the search\-list, so ambiguities are resolved in favor of convention.
d1412 1
a1412 1
available emulations with the \fB\-\-verbose\fR or \fB\-V\fR options.  If
d1421 1
a1421 1
may be overridden by the \fB\-\-demangle\fR and \fB\-\-no\-demangle\fR
d1430 1
a1430 2
Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001,
2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.
@


1.12.14.2
log
@Commit generated files for binutils 2.18.
@
text
@d131 1
a131 1
.TH LD 1 "2007-08-28" "binutils-2.18" "GNU Development Tools"
@


1.12.12.1
log
@Commit generated files.
@
text
@d1 2
a2 1
.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
d5 1
a5 1
.\" ========================================================================
d18 6
d31 1
d36 5
a40 5
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
d49 2
a50 2
.    ds C` ""
.    ds C' ""
d59 4
a62 4
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
d66 1
a66 1
..
d71 2
a72 2
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
d77 1
d137 1
a137 1
.\" ========================================================================
d140 2
a141 1
.TH LD 1 "2006-04-16" "binutils-2.16.92" "GNU Development Tools"
d143 1
a143 1
ld \- Using LD, the GNU linker
d146 1
a146 1
ld [\fBoptions\fR] \fIobjfile\fR ...
d149 1
a149 1
\&\fBld\fR combines a number of object and archive files, relocates
d151 1
a151 1
compiling a program is to run \fBld\fR.
d153 1
a153 1
\&\fBld\fR accepts Linker Command Language files written in
d158 1
a158 1
\&\fBld\fR entry in \f(CW\*(C`info\*(C'\fR, or the manual
d162 2
a163 2
This version of \fBld\fR uses the general purpose \s-1BFD\s0 libraries
to operate on object files. This allows \fBld\fR to read, combine, and
d171 1
a171 1
\&\fBld\fR continues executing, allowing you to identify other errors
d174 1
a174 1
The \s-1GNU\s0 linker \fBld\fR is meant to cover a broad range of situations,
d181 1
a181 1
For instance, a frequent use of \fBld\fR is to link standard Unix
d186 1
a186 1
\&        ld \-o <output> /lib/crt0.o hello.o \-lc
d188 1
a188 2
.PP
This tells \fBld\fR to produce a file called \fIoutput\fR as the
d193 1
a193 1
Some of the command-line options to \fBld\fR may be specified at any
d214 1
a214 1
If the linker cannot recognize the format of an object file, it will
d221 4
a224 2
specifying a script in this way merely augments the main linker script;
use the \fB\-T\fR option to replace the default linker script entirely.
d232 2
a233 2
precede the option name; for example, \fB\-trace\-symbol\fR and
\&\fB\-\-trace\-symbol\fR are equivalent.  Note\-\-\-there is one exception to
d237 1
a237 1
name to \fBmagic\fR whereas \fB\-\-omagic\fR sets the \s-1NMAGIC\s0 flag on the
d243 1
a243 1
\&\fB\-\-trace\-symbol foo\fR and \fB\-\-trace\-symbol=foo\fR are equivalent.
d247 2
a248 2
Note\-\-\-if the linker is being invoked indirectly, via a compiler driver
(e.g. \fBgcc\fR) then all the linker command line options should be
d253 1
a253 1
\&          gcc \-Wl,\-\-startgroup foo.o bar.o \-Wl,\-\-endgroup
a254 1
.PP
d260 1
a260 14
.IP "\fB@@\fR\fIfile\fR" 4
.IX Item "@@file"
Read command-line options from \fIfile\fR.  The options read are
inserted in place of the original @@\fIfile\fR option.  If \fIfile\fR
does not exist, or cannot be read, then the option will be treated
literally, and not removed.  
.Sp
Options in \fIfile\fR are separated by whitespace.  A whitespace
character may be included in an option by surrounding the entire
option in either single or double quotes.  Any character (including a
backslash) may be included by prefixing the character to be included
with a backslash.  The \fIfile\fR may itself contain additional
@@\fIfile\fR options; any such options will be processed recursively.
.IP "\fB\-a\fR\fIkeyword\fR" 4
d267 1
a267 1
.IP "\fB\-A\fR\fIarchitecture\fR" 4
d269 1
a269 2
.PD 0
.IP "\fB\-\-architecture=\fR\fIarchitecture\fR" 4
d271 2
a272 3
.PD
In the current release of \fBld\fR, this option is useful only for the
Intel 960 family of architectures.  In that \fBld\fR configuration, the
d277 1
a277 1
Future releases of \fBld\fR may support similar functionality for
d279 1
a279 1
.IP "\fB\-b\fR \fIinput-format\fR" 4
d281 1
a281 2
.PD 0
.IP "\fB\-\-format=\fR\fIinput-format\fR" 4
d283 2
a284 3
.PD
\&\fBld\fR may be configured to support more than one kind of object
file.  If your \fBld\fR is configured this way, you can use the
d286 1
a286 1
that follow this option on the command line.  Even when \fBld\fR is
d288 1
a288 1
to specify this, as \fBld\fR should be configured to expect as a
d305 1
a305 1
.IP "\fB\-c\fR \fIMRI-commandfile\fR" 4
d307 1
a307 2
.PD 0
.IP "\fB\-\-mri\-script=\fR\fIMRI-commandfile\fR" 4
d309 1
a309 2
.PD
For compatibility with linkers produced by \s-1MRI\s0, \fBld\fR accepts script
d314 2
a315 2
scripts written in the general-purpose \fBld\fR scripting language.
If \fIMRI-cmdfile\fR does not exist, \fBld\fR looks for it in the directories
d317 1
a317 1
.IP "\fB\-d\fR" 4
d319 1
a319 2
.PD 0
.IP "\fB\-dc\fR" 4
d321 1
a321 1
.IP "\fB\-dp\fR" 4
a322 1
.PD
d327 1
a327 1
.IP "\fB\-e\fR \fIentry\fR" 4
d329 1
a329 2
.PD 0
.IP "\fB\-\-entry=\fR\fIentry\fR" 4
a330 1
.PD
d337 1
a337 11
.IP "\fB\-\-exclude\-libs\fR \fIlib\fR\fB,\fR\fIlib\fR\fB,...\fR" 4
.IX Item "--exclude-libs lib,lib,..."
Specifies a list of archive libraries from which symbols should not be automatically
exported. The library names may be delimited by commas or colons.  Specifying
\&\f(CW\*(C`\-\-exclude\-libs ALL\*(C'\fR excludes symbols in all archive libraries from
automatic export.  This option is available only for the i386 \s-1PE\s0 targeted
port of the linker and for \s-1ELF\s0 targeted ports.  For i386 \s-1PE\s0, symbols
explicitly listed in a .def file are still exported, regardless of this
option.  For \s-1ELF\s0 targeted ports, symbols affected by this option will
be treated as hidden.
.IP "\fB\-E\fR" 4
d339 1
a339 2
.PD 0
.IP "\fB\-\-export\-dynamic\fR" 4
a340 1
.PD
d353 1
a353 5
.Sp
You can also use the version script to control what symbols should
be added to the dynamic symbol table if the output format supports it.
See the description of \fB\-\-version\-script\fR in \fB\s-1VERSION\s0\fR.
.IP "\fB\-EB\fR" 4
d356 1
a356 1
.IP "\fB\-EL\fR" 4
d359 1
a359 1
.IP "\fB\-f\fR" 4
d361 1
a361 2
.PD 0
.IP "\fB\-\-auxiliary\fR \fIname\fR" 4
a362 1
.PD
d380 1
a380 1
.IP "\fB\-F\fR \fIname\fR" 4
d382 1
a382 2
.PD 0
.IP "\fB\-\-filter\fR \fIname\fR" 4
a383 1
.PD
d397 1
a397 1
Some older linkers used the \fB\-F\fR option throughout a compilation
d399 2
a400 3
object files.
The \s-1GNU\s0 linker uses other mechanisms for this purpose: the
\&\fB\-b\fR, \fB\-\-format\fR, \fB\-\-oformat\fR options, the 
d402 3
a404 4
environment variable.
The \s-1GNU\s0 linker will ignore the \fB\-F\fR option when not
creating an \s-1ELF\s0 shared object.
.IP "\fB\-fini\fR \fIname\fR" 4
d410 1
a410 1
.IP "\fB\-g\fR" 4
d413 1
a413 1
.IP "\fB\-G\fR\fIvalue\fR" 4
d415 1
a415 2
.PD 0
.IP "\fB\-\-gpsize=\fR\fIvalue\fR" 4
a416 1
.PD
d421 1
a421 1
.IP "\fB\-h\fR\fIname\fR" 4
d423 1
a423 2
.PD 0
.IP "\fB\-soname=\fR\fIname\fR" 4
a424 1
.PD
d430 1
a430 1
.IP "\fB\-i\fR" 4
d433 1
a433 1
.IP "\fB\-init\fR \fIname\fR" 4
d439 1
a439 1
.IP "\fB\-l\fR\fIarchive\fR" 4
d441 1
a441 2
.PD 0
.IP "\fB\-\-library=\fR\fIarchive\fR" 4
a442 1
.PD
d444 1
a444 1
option may be used any number of times.  \fBld\fR will search its
d448 1
a448 1
On systems which support shared libraries, \fBld\fR may also search for
d450 1
a450 1
and SunOS systems, \fBld\fR will search a directory for a library with
d458 1
a458 1
command line, the linker will include the appropriate file(s) from the
d462 1
a462 1
See the \fB\-(\fR option for a way to force the linker to search
d468 1
a468 1
if you are using \fBld\fR on \s-1AIX\s0, note that it is different from the
d470 1
a470 1
.IP "\fB\-L\fR\fIsearchdir\fR" 4
d472 1
a472 2
.PD 0
.IP "\fB\-\-library\-path=\fR\fIsearchdir\fR" 4
d474 2
a475 3
.PD
Add path \fIsearchdir\fR to the list of paths that \fBld\fR will search
for archive libraries and \fBld\fR control scripts.  You may use this
d479 1
a479 1
\&\fB\-L\fR options apply to all \fB\-l\fR options, regardless of the
a481 3
If \fIsearchdir\fR begins with \f(CW\*(C`=\*(C'\fR, then the \f(CW\*(C`=\*(C'\fR will be replaced
by the \fIsysroot prefix\fR, a path specified when the linker is configured.
.Sp
d483 1
a483 1
\&\fB\-L\fR) depends on which emulation mode \fBld\fR is using, and in
d489 1
a489 1
.IP "\fB\-m\fR\fIemulation\fR" 4
d492 1
a492 1
emulations with the \fB\-\-verbose\fR or \fB\-V\fR options.
d499 1
a499 1
.IP "\fB\-M\fR" 4
d501 1
a501 2
.PD 0
.IP "\fB\-\-print\-map\fR" 4
a502 1
.PD
d506 3
a508 3
.IP "*" 4
Where object files are mapped into memory.
.IP "*" 4
d510 1
a510 1
.IP "*" 4
a512 28
.IP "*" 4
The values assigned to symbols.
.Sp
Note \- symbols whose values are computed by an expression which
involves a reference to a previous value of the same symbol may not
have correct result displayed in the link map.  This is because the
linker discards intermediate results and only retains the final value
of an expression.  Under such circumstances the linker will display
the final value enclosed by square brackets.  Thus for example a
linker script containing:
.Sp
.Vb 3
\&           foo = 1
\&           foo = foo * 4
\&           foo = foo + 8
.Ve
.Sp
will produce the following output in the link map if the \fB\-M\fR
option is used:
.Sp
.Vb 3
\&           0x00000001                foo = 0x1
\&           [0x0000000c]                foo = (foo * 0x4)
\&           [0x0000000c]                foo = (foo + 0x8)
.Ve
.Sp
See \fBExpressions\fR for more information about expressions in linker
scripts.
d516 1
a516 1
.IP "\fB\-n\fR" 4
d518 1
a518 2
.PD 0
.IP "\fB\-\-nmagic\fR" 4
a519 1
.PD
d522 1
a522 1
.IP "\fB\-N\fR" 4
d524 1
a524 2
.PD 0
.IP "\fB\-\-omagic\fR" 4
a525 1
.PD
d527 3
a529 12
not page-align the data segment, and disable linking against shared
libraries.  If the output format supports Unix style magic numbers,
mark the output as \f(CW\*(C`OMAGIC\*(C'\fR. Note: Although a writable text section
is allowed for PE-COFF targets, it does not conform to the format
specification published by Microsoft.
.IP "\fB\-\-no\-omagic\fR" 4
.IX Item "--no-omagic"
This option negates most of the effects of the \fB\-N\fR option.  It
sets the text section to be read\-only, and forces the data segment to
be page\-aligned.  Note \- this option does not enable linking against
shared libraries.  Use \fB\-Bdynamic\fR for this.
.IP "\fB\-o\fR \fIoutput\fR" 4
d531 1
a531 2
.PD 0
.IP "\fB\-\-output=\fR\fIoutput\fR" 4
d533 1
a533 2
.PD
Use \fIoutput\fR as the name for the program produced by \fBld\fR; if this
d536 1
a536 1
.IP "\fB\-O\fR \fIlevel\fR" 4
d538 1
a538 1
If \fIlevel\fR is a numeric values greater than zero \fBld\fR optimizes
d541 1
a541 1
.IP "\fB\-q\fR" 4
d543 1
a543 2
.PD 0
.IP "\fB\-\-emit\-relocs\fR" 4
a544 1
.PD
d549 1
a549 7
.Sp
This option is currently only supported on \s-1ELF\s0 platforms.
.IP "\fB\-\-force\-dynamic\fR" 4
.IX Item "--force-dynamic"
Force the output file to have dynamic sections.  This option is specific
to VxWorks targets.
.IP "\fB\-r\fR" 4
d551 2
a552 4
.PD 0
.IP "\fB\-\-relocatable\fR" 4
.IX Item "--relocatable"
.PD
d554 1
a554 1
turn serve as input to \fBld\fR.  This is often called \fIpartial
a561 6
When an input file does not have the same format as the output file,
partial linking is only supported if that input file does not contain any
relocations.  Different output formats can have further restrictions; for
example some \f(CW\*(C`a.out\*(C'\fR\-based formats do not support partial linking
with input files in other formats at all.
.Sp
d563 1
a563 1
.IP "\fB\-R\fR \fIfilename\fR" 4
d565 1
a565 2
.PD 0
.IP "\fB\-\-just\-symbols=\fR\fIfilename\fR" 4
a566 1
.PD
d572 1
a572 1
For compatibility with other \s-1ELF\s0 linkers, if the \fB\-R\fR option is
d574 2
a575 2
the \fB\-rpath\fR option.
.IP "\fB\-s\fR" 4
d577 1
a577 2
.PD 0
.IP "\fB\-\-strip\-all\fR" 4
a578 1
.PD
d580 1
a580 1
.IP "\fB\-S\fR" 4
d582 1
a582 2
.PD 0
.IP "\fB\-\-strip\-debug\fR" 4
a583 1
.PD
d585 1
a585 1
.IP "\fB\-t\fR" 4
d587 1
a587 2
.PD 0
.IP "\fB\-\-trace\fR" 4
d589 2
a590 3
.PD
Print the names of the input files as \fBld\fR processes them.
.IP "\fB\-T\fR \fIscriptfile\fR" 4
d592 1
a592 2
.PD 0
.IP "\fB\-\-script=\fR\fIscriptfile\fR" 4
a593 1
.PD
d595 1
a595 1
\&\fBld\fR's default linker script (rather than adding to it), so
d597 7
a603 5
output file.    If \fIscriptfile\fR does not exist in
the current directory, \f(CW\*(C`ld\*(C'\fR looks for it in the directories
specified by any preceding \fB\-L\fR options.  Multiple \fB\-T\fR
options accumulate.
.IP "\fB\-u\fR \fIsymbol\fR" 4
d605 1
a605 2
.PD 0
.IP "\fB\-\-undefined=\fR\fIsymbol\fR" 4
a606 1
.PD
d612 1
a612 1
.IP "\fB\-Ur\fR" 4
d616 1
a616 1
turn serve as input to \fBld\fR.  When linking \*(C+ programs, \fB\-Ur\fR
d622 1
a622 1
.IP "\fB\-\-unique[=\fR\fI\s-1SECTION\s0\fR\fB]\fR" 4
d631 1
a631 1
.IP "\fB\-v\fR" 4
d633 1
a633 2
.PD 0
.IP "\fB\-\-version\fR" 4
d635 1
a635 1
.IP "\fB\-V\fR" 4
d637 1
a637 2
.PD
Display the version number for \fBld\fR.  The \fB\-V\fR option also
d639 1
a639 1
.IP "\fB\-x\fR" 4
d641 1
a641 2
.PD 0
.IP "\fB\-\-discard\-all\fR" 4
a642 1
.PD
d644 1
a644 1
.IP "\fB\-X\fR" 4
d646 1
a646 2
.PD 0
.IP "\fB\-\-discard\-locals\fR" 4
a647 1
.PD
d650 1
a650 1
.IP "\fB\-y\fR \fIsymbol\fR" 4
d652 1
a652 2
.PD 0
.IP "\fB\-\-trace\-symbol=\fR\fIsymbol\fR" 4
a653 1
.PD
d660 1
a660 1
.IP "\fB\-Y\fR \fIpath\fR" 4
d664 1
a664 1
.IP "\fB\-z\fR \fIkeyword\fR" 4
d666 17
a682 76
The recognized keywords are:
.RS 4
.IP "\fBcombreloc\fR" 4
.IX Item "combreloc"
Combines multiple reloc sections and sorts them to make dynamic symbol
lookup caching possible.
.IP "\fBdefs\fR" 4
.IX Item "defs"
Disallows undefined symbols in object files.  Undefined symbols in
shared libraries are still allowed.
.IP "\fBexecstack\fR" 4
.IX Item "execstack"
Marks the object as requiring executable stack.
.IP "\fBinitfirst\fR" 4
.IX Item "initfirst"
This option is only meaningful when building a shared object.
It marks the object so that its runtime initialization will occur
before the runtime initialization of any other objects brought into
the process at the same time.  Similarly the runtime finalization of
the object will occur after the runtime finalization of any other
objects.
.IP "\fBinterpose\fR" 4
.IX Item "interpose"
Marks the object that its symbol table interposes before all symbols
but the primary executable.
.IP "\fBloadfltr\fR" 4
.IX Item "loadfltr"
Marks  the object that its filters be processed immediately at
runtime.
.IP "\fBmuldefs\fR" 4
.IX Item "muldefs"
Allows multiple definitions.
.IP "\fBnocombreloc\fR" 4
.IX Item "nocombreloc"
Disables multiple reloc sections combining.
.IP "\fBnocopyreloc\fR" 4
.IX Item "nocopyreloc"
Disables production of copy relocs.
.IP "\fBnodefaultlib\fR" 4
.IX Item "nodefaultlib"
Marks the object that the search for dependencies of this object will
ignore any default library search paths.
.IP "\fBnodelete\fR" 4
.IX Item "nodelete"
Marks the object shouldn't be unloaded at runtime.
.IP "\fBnodlopen\fR" 4
.IX Item "nodlopen"
Marks the object not available to \f(CW\*(C`dlopen\*(C'\fR.
.IP "\fBnodump\fR" 4
.IX Item "nodump"
Marks the object can not be dumped by \f(CW\*(C`dldump\*(C'\fR.
.IP "\fBnoexecstack\fR" 4
.IX Item "noexecstack"
Marks the object as not requiring executable stack.
.IP "\fBnorelro\fR" 4
.IX Item "norelro"
Don't create an \s-1ELF\s0 \f(CW\*(C`PT_GNU_RELRO\*(C'\fR segment header in the object.
.IP "\fBnow\fR" 4
.IX Item "now"
When generating an executable or shared library, mark it to tell the
dynamic linker to resolve all symbols when the program is started, or
when the shared library is linked to using dlopen, instead of
deferring function call resolution to the point when the function is
first called.
.IP "\fBorigin\fR" 4
.IX Item "origin"
Marks the object may contain \f(CW$ORIGIN\fR.
.IP "\fBrelro\fR" 4
.IX Item "relro"
Create an \s-1ELF\s0 \f(CW\*(C`PT_GNU_RELRO\*(C'\fR segment header in the object.
.RE
.RS 4
.Sp
Other keywords are ignored for Solaris compatibility.  
.RE
.IP "\fB\-(\fR \fIarchives\fR \fB\-)\fR" 4
d684 1
a684 2
.PD 0
.IP "\fB\-\-start\-group\fR \fIarchives\fR \fB\-\-end\-group\fR" 4
a685 1
.PD
d701 1
a701 41
.IP "\fB\-\-accept\-unknown\-input\-arch\fR" 4
.IX Item "--accept-unknown-input-arch"
.PD 0
.IP "\fB\-\-no\-accept\-unknown\-input\-arch\fR" 4
.IX Item "--no-accept-unknown-input-arch"
.PD
Tells the linker to accept input files whose architecture cannot be
recognised.  The assumption is that the user knows what they are doing
and deliberately wants to link in these unknown input files.  This was
the default behaviour of the linker, before release 2.14.  The default
behaviour from release 2.14 onwards is to reject such input files, and
so the \fB\-\-accept\-unknown\-input\-arch\fR option has been added to
restore the old behaviour.
.IP "\fB\-\-as\-needed\fR" 4
.IX Item "--as-needed"
.PD 0
.IP "\fB\-\-no\-as\-needed\fR" 4
.IX Item "--no-as-needed"
.PD
This option affects \s-1ELF\s0 \s-1DT_NEEDED\s0 tags for dynamic libraries mentioned
on the command line after the \fB\-\-as\-needed\fR option.  Normally,
the linker will add a \s-1DT_NEEDED\s0 tag for each dynamic library mentioned
on the command line, regardless of whether the library is actually
needed.  \fB\-\-as\-needed\fR causes \s-1DT_NEEDED\s0 tags to only be emitted
for libraries that satisfy some symbol reference from regular objects
which is undefined at the point that the library was linked.
\&\fB\-\-no\-as\-needed\fR restores the default behaviour.
.IP "\fB\-\-add\-needed\fR" 4
.IX Item "--add-needed"
.PD 0
.IP "\fB\-\-no\-add\-needed\fR" 4
.IX Item "--no-add-needed"
.PD
This option affects the treatment of dynamic libraries from \s-1ELF\s0
\&\s-1DT_NEEDED\s0 tags in dynamic libraries mentioned on the command line after
the \fB\-\-no\-add\-needed\fR option.  Normally, the linker will add
a \s-1DT_NEEDED\s0 tag for each dynamic library from \s-1DT_NEEDED\s0 tags.
\&\fB\-\-no\-add\-needed\fR causes \s-1DT_NEEDED\s0 tags will never be emitted
for those libraries from \s-1DT_NEEDED\s0 tags. \fB\-\-add\-needed\fR restores
the default behaviour.
.IP "\fB\-assert\fR \fIkeyword\fR" 4
d704 1
a704 1
.IP "\fB\-Bdynamic\fR" 4
d706 1
a706 2
.PD 0
.IP "\fB\-dy\fR" 4
d708 1
a708 1
.IP "\fB\-call_shared\fR" 4
a709 1
.PD
d715 2
a716 2
\&\fB\-l\fR options which follow it.
.IP "\fB\-Bgroup\fR" 4
d721 3
a723 3
\&\fB\-\-unresolved\-symbols=report\-all\fR is implied.  This option is
only meaningful on \s-1ELF\s0 platforms which support shared libraries.
.IP "\fB\-Bstatic\fR" 4
d725 1
a725 2
.PD 0
.IP "\fB\-dn\fR" 4
d727 1
a727 1
.IP "\fB\-non_shared\fR" 4
d729 1
a729 1
.IP "\fB\-static\fR" 4
a730 1
.PD
d735 2
a736 7
library searching for \fB\-l\fR options which follow it.  This
option also implies \fB\-\-unresolved\-symbols=report\-all\fR.  This
option can be used with \fB\-shared\fR.  Doing so means that a
shared library is being created but that all of the library's external
references must be resolved by pulling in entries from static
libraries. 
.IP "\fB\-Bsymbolic\fR" 4
d743 1
a743 1
.IP "\fB\-\-check\-sections\fR" 4
d745 1
a745 2
.PD 0
.IP "\fB\-\-no\-check\-sections\fR" 4
a746 1
.PD
d748 1
a748 1
been assigned to see if there are any overlaps.  Normally the linker will
d752 2
a753 2
restored by using the command line switch \fB\-\-check\-sections\fR.
.IP "\fB\-\-cref\fR" 4
d764 1
a764 16
.IP "\fB\-\-no\-define\-common\fR" 4
.IX Item "--no-define-common"
This option inhibits the assignment of addresses to common symbols.
The script command \f(CW\*(C`INHIBIT_COMMON_ALLOCATION\*(C'\fR has the same effect.
.Sp
The \fB\-\-no\-define\-common\fR option allows decoupling
the decision to assign addresses to Common symbols from the choice
of the output file type; otherwise a non-Relocatable output type
forces assigning addresses to Common symbols.
Using \fB\-\-no\-define\-common\fR allows Common symbols that are referenced
from a shared library to be assigned addresses only in the main program.
This eliminates the unused duplicate space in the shared library,
and also prevents any possible confusion over resolving to the wrong
duplicate when there are many dynamic modules with specialized search
paths for runtime symbol resolution.
.IP "\fB\-\-defsym\fR \fIsymbol\fR\fB=\fR\fIexpression\fR" 4
d774 1
a774 1
space between \fIsymbol\fR, the equals sign ("\fB=\fR"), and
d776 1
a776 1
.IP "\fB\-\-demangle[=\fR\fIstyle\fR\fB]\fR" 4
d778 1
a778 2
.PD 0
.IP "\fB\-\-no\-demangle\fR" 4
a779 1
.PD
d789 1
a789 1
.IP "\fB\-\-dynamic\-linker\fR \fIfile\fR" 4
d795 8
a802 1
.IP "\fB\-\-fatal\-warnings\fR" 4
d805 1
a805 1
.IP "\fB\-\-force\-exe\-suffix\fR" 4
d815 1
a815 1
.IP "\fB\-\-no\-gc\-sections\fR" 4
d817 1
a817 2
.PD 0
.IP "\fB\-\-gc\-sections\fR" 4
a818 1
.PD
d821 4
a824 4
with \fB\-r\fR. The default behaviour (of not performing this garbage
collection) can be restored by specifying \fB\-\-no\-gc\-sections\fR on
the command line.
.IP "\fB\-\-help\fR" 4
d827 1
a827 1
.IP "\fB\-\-target\-help\fR" 4
d830 1
a830 1
.IP "\fB\-Map\fR \fImapfile\fR" 4
d834 1
a834 1
.IP "\fB\-\-no\-keep\-memory\fR" 4
d836 2
a837 2
\&\fBld\fR normally optimizes for speed over memory usage by caching the
symbol tables of input files in memory.  This option tells \fBld\fR to
d839 1
a839 1
necessary.  This may be required if \fBld\fR runs out of memory space
d841 1
a841 1
.IP "\fB\-\-no\-undefined\fR" 4
d843 1
a843 2
.PD 0
.IP "\fB\-z defs\fR" 4
d845 4
a848 16
.PD
Report unresolved symbol references from regular object files.  This
is done even if the linker is creating a non-symbolic shared library.
The switch \fB\-\-[no\-]allow\-shlib\-undefined\fR controls the
behaviour for reporting unresolved references found in shared
libraries being linked in.  
.IP "\fB\-\-allow\-multiple\-definition\fR" 4
.IX Item "--allow-multiple-definition"
.PD 0
.IP "\fB\-z muldefs\fR" 4
.IX Item "-z muldefs"
.PD
Normally when a symbol is defined multiple times, the linker will
report a fatal error. These options allow multiple definitions and the
first definition will be used.
.IP "\fB\-\-allow\-shlib\-undefined\fR" 4
d850 11
a860 33
.PD 0
.IP "\fB\-\-no\-allow\-shlib\-undefined\fR" 4
.IX Item "--no-allow-shlib-undefined"
.PD
Allows (the default) or disallows undefined symbols in shared libraries.
This switch is similar to \fB\-\-no\-undefined\fR except that it
determines the behaviour when the undefined symbols are in a
shared library rather than a regular object file.  It does not affect
how undefined symbols in regular object files are handled.
.Sp
The reason that \fB\-\-allow\-shlib\-undefined\fR is the default is that
the shared library being specified at link time may not be the same as
the one that is available at load time, so the symbols might actually be
resolvable at load time.  Plus there are some systems, (eg BeOS) where
undefined symbols in shared libraries is normal.  (The kernel patches
them at load time to select which function is most appropriate 
for the current architecture.  This is used for example to dynamically
select an appropriate memset function).  Apparently it is also normal
for \s-1HPPA\s0 shared libraries to have undefined symbols.
.IP "\fB\-\-no\-undefined\-version\fR" 4
.IX Item "--no-undefined-version"
Normally when a symbol has an undefined version, the linker will ignore
it. This option disallows symbols with undefined version and a fatal error
will be issued instead.
.IP "\fB\-\-default\-symver\fR" 4
.IX Item "--default-symver"
Create and use a default symbol version (the soname) for unversioned
exported symbols.
.IP "\fB\-\-default\-imported\-symver\fR" 4
.IX Item "--default-imported-symver"
Create and use a default symbol version (the soname) for unversioned
imported symbols.
.IP "\fB\-\-no\-warn\-mismatch\fR" 4
d862 1
a862 1
Normally \fBld\fR will give an error if you try to link together input
d865 1
a865 1
This option tells \fBld\fR that it should silently permit such possible
d869 1
a869 1
.IP "\fB\-\-no\-whole\-archive\fR" 4
d871 1
a871 1
Turn off the effect of the \fB\-\-whole\-archive\fR option for subsequent
d873 1
a873 1
.IP "\fB\-\-noinhibit\-exec\fR" 4
d879 1
a879 6
.IP "\fB\-nostdlib\fR" 4
.IX Item "-nostdlib"
Only search library directories explicitly specified on the
command line.  Library directories specified in linker scripts
(including linker scripts specified on the command line) are ignored.
.IP "\fB\-\-oformat\fR \fIoutput-format\fR" 4
d881 5
a885 5
\&\fBld\fR may be configured to support more than one kind of object
file.  If your \fBld\fR is configured this way, you can use the
\&\fB\-\-oformat\fR option to specify the binary format for the output
object file.  Even when \fBld\fR is configured to support alternative
object formats, you don't usually need to specify this, as \fBld\fR
d892 1
a892 13
.IP "\fB\-pie\fR" 4
.IX Item "-pie"
.PD 0
.IP "\fB\-\-pic\-executable\fR" 4
.IX Item "--pic-executable"
.PD
Create a position independent executable.  This is currently only supported on
\&\s-1ELF\s0 platforms.  Position independent executables are similar to shared
libraries in that they are relocated by the dynamic linker to the virtual
address the \s-1OS\s0 chooses for them (which can vary between invocations).  Like
normal dynamically linked executables they can be executed and symbols
defined in the executable cannot be overridden by shared libraries.
.IP "\fB\-qmagic\fR" 4
d895 1
a895 1
.IP "\fB\-Qy\fR" 4
d898 1
a898 1
.IP "\fB\-\-relax\fR" 4
d903 1
a903 1
On some platforms, the \fB\-\-relax\fR option performs global
d913 1
a913 1
On platforms where this is not supported, \fB\-\-relax\fR is accepted,
d915 1
a915 1
.IP "\fB\-\-retain\-symbols\-file\fR \fIfilename\fR" 4
d924 1
a924 1
\&\fB\-\-retain\-symbols\-file\fR does \fInot\fR discard undefined symbols,
d927 1
a927 1
You may only specify \fB\-\-retain\-symbols\-file\fR once in the command
d929 1
a929 1
.IP "\fB\-rpath\fR \fIdir\fR" 4
d932 1
a932 1
linking an \s-1ELF\s0 executable with shared objects.  All \fB\-rpath\fR
d934 1
a934 1
them to locate shared objects at runtime.  The \fB\-rpath\fR option is
d937 1
a937 1
\&\fB\-rpath\-link\fR option.  If \fB\-rpath\fR is not used when linking an
d941 1
a941 1
The \fB\-rpath\fR option may also be used on SunOS.  By default, on
d943 4
a946 4
\&\fB\-L\fR options it is given.  If a \fB\-rpath\fR option is used, the
runtime search path will be formed exclusively using the \fB\-rpath\fR
options, ignoring the \fB\-L\fR options.  This can be useful when using
gcc, which adds many \fB\-L\fR options which may be on \s-1NFS\s0 mounted
d949 1
a949 1
For compatibility with other \s-1ELF\s0 linkers, if the \fB\-R\fR option is
d951 2
a952 2
the \fB\-rpath\fR option.
.IP "\fB\-rpath\-link\fR \fI\s-1DIR\s0\fR" 4
d958 1
a958 1
When the linker encounters such a dependency when doing a non\-shared,
d961 1
a961 1
explicitly.  In such a case, the \fB\-rpath\-link\fR option
d963 1
a963 1
\&\fB\-rpath\-link\fR option may specify a sequence of directory names
d975 7
a981 7
.IP "1." 4
Any directories specified by \fB\-rpath\-link\fR options.
.IP "2." 4
Any directories specified by \fB\-rpath\fR options.  The difference
between \fB\-rpath\fR and \fB\-rpath\-link\fR is that directories
specified by \fB\-rpath\fR options are included in the executable and
used at runtime, whereas the \fB\-rpath\-link\fR option is only effective
d983 2
a984 2
.IP "3." 4
On an \s-1ELF\s0 system, if the \fB\-rpath\fR and \f(CW\*(C`rpath\-link\*(C'\fR options
d987 4
a990 4
.IP "4." 4
On SunOS, if the \fB\-rpath\fR option was not used, search any
directories specified using \fB\-L\fR options.
.IP "5." 4
d993 1
a993 1
.IP "6." 4
d998 1
a998 1
.IP "7." 4
d1000 1
a1000 1
.IP "8." 4
d1009 1
a1009 1
.IP "\fB\-shared\fR" 4
d1011 1
a1011 2
.PD 0
.IP "\fB\-Bshareable\fR" 4
a1012 1
.PD
d1015 1
a1015 1
shared library if the \fB\-e\fR option is not used and there are
d1017 1
a1017 1
.IP "\fB\-\-sort\-common\fR" 4
d1019 1
a1019 1
This option tells \fBld\fR to sort the common symbols by size when it
d1021 1
a1021 1
byte symbols, then all the two byte, then all the four byte, and then
d1024 1
a1024 9
.IP "\fB\-\-sort\-section name\fR" 4
.IX Item "--sort-section name"
This option will apply \f(CW\*(C`SORT_BY_NAME\*(C'\fR to all wildcard section
patterns in the linker script.
.IP "\fB\-\-sort\-section alignment\fR" 4
.IX Item "--sort-section alignment"
This option will apply \f(CW\*(C`SORT_BY_ALIGNMENT\*(C'\fR to all wildcard section
patterns in the linker script.
.IP "\fB\-\-split\-by\-file [\fR\fIsize\fR\fB]\fR" 4
d1026 1
a1026 1
Similar to \fB\-\-split\-by\-reloc\fR but creates a new output section for
d1029 1
a1029 1
.IP "\fB\-\-split\-by\-reloc [\fR\fIcount\fR\fB]\fR" 4
d1041 1
a1041 1
.IP "\fB\-\-stats\fR" 4
d1045 1
a1045 6
.IP "\fB\-\-sysroot=\fR\fIdirectory\fR" 4
.IX Item "--sysroot=directory"
Use \fIdirectory\fR as the location of the sysroot, overriding the
configure-time default.  This option is only supported by linkers
that were configured using \fB\-\-with\-sysroot\fR.
.IP "\fB\-\-traditional\-format\fR" 4
d1047 2
a1048 2
For some targets, the output of \fBld\fR is different in some ways from
the output of some existing linker.  This switch requests \fBld\fR to
d1051 1
a1051 1
For example, on SunOS, \fBld\fR combines duplicate entries in the
d1055 1
a1055 1
trouble).  The \fB\-\-traditional\-format\fR switch tells \fBld\fR to not
d1057 1
a1057 1
.IP "\fB\-\-section\-start\fR \fIsectionname\fR\fB=\fR\fIorg\fR" 4
d1067 2
a1068 2
sign ("\fB=\fR"), and \fIorg\fR.
.IP "\fB\-Tbss\fR \fIorg\fR" 4
d1070 1
a1070 2
.PD 0
.IP "\fB\-Tdata\fR \fIorg\fR" 4
d1072 1
a1072 1
.IP "\fB\-Ttext\fR \fIorg\fR" 4
d1074 6
a1079 36
.PD
Same as \-\-section\-start, with \f(CW\*(C`.bss\*(C'\fR, \f(CW\*(C`.data\*(C'\fR or
\&\f(CW\*(C`.text\*(C'\fR as the \fIsectionname\fR.
.IP "\fB\-\-unresolved\-symbols=\fR\fImethod\fR" 4
.IX Item "--unresolved-symbols=method"
Determine how to handle unresolved symbols.  There are four possible
values for \fBmethod\fR:
.RS 4
.IP "\fBignore-all\fR" 4
.IX Item "ignore-all"
Do not report any unresolved symbols.
.IP "\fBreport-all\fR" 4
.IX Item "report-all"
Report all unresolved symbols.  This is the default.
.IP "\fBignore-in-object-files\fR" 4
.IX Item "ignore-in-object-files"
Report unresolved symbols that are contained in shared libraries, but
ignore them if they come from regular object files.
.IP "\fBignore-in-shared-libs\fR" 4
.IX Item "ignore-in-shared-libs"
Report unresolved symbols that come from regular object files, but
ignore them if they come from shared libraries.  This can be useful
when creating a dynamic binary and it is known that all the shared
libraries that it should be referencing are included on the linker's
command line.
.RE
.RS 4
.Sp
The behaviour for shared libraries on their own can also be controlled
by the \fB\-\-[no\-]allow\-shlib\-undefined\fR option.
.Sp
Normally the linker will generate an error message for each reported
unresolved symbol but the option \fB\-\-warn\-unresolved\-symbols\fR
can change this to a warning.
.RE
.IP "\fB\-\-dll\-verbose\fR" 4
d1081 1
a1081 2
.PD 0
.IP "\fB\-\-verbose\fR" 4
d1083 1
a1083 2
.PD
Display the version number for \fBld\fR and list the linker emulations
d1085 2
a1086 2
the linker script being used by the linker.
.IP "\fB\-\-version\-script=\fR\fIversion-scriptfile\fR" 4
d1090 1
a1090 1
about the version hierarchy for the library being created.  This option
d1092 1
a1092 1
.IP "\fB\-\-warn\-common\fR" 4
d1095 1
a1095 1
a symbol definition.  Unix linkers allow this somewhat sloppy practise,
d1098 1
a1098 1
Unfortunately, some C libraries use this practise, so you may get some
d1103 1
a1103 1
.IP "\fBint i = 1;\fR" 4
d1107 1
a1107 1
.IP "\fBextern int i;\fR" 4
d1112 1
a1112 1
.IP "\fBint i;\fR" 4
d1123 1
a1123 1
The \fB\-\-warn\-common\fR option can produce five kinds of warnings.
d1128 3
a1130 1
.IP "1." 4
d1135 1
a1135 1
\&        <file>(<section>): warning: common of `<symbol>'
d1137 1
a1137 1
\&        <file>(<section>): warning: defined here
d1139 1
a1139 1
.IP "2." 4
d1145 1
a1145 1
\&        <file>(<section>): warning: definition of `<symbol>'
d1147 1
a1147 1
\&        <file>(<section>): warning: common is here
d1149 1
a1149 1
.IP "3." 4
d1153 3
a1155 3
\&        <file>(<section>): warning: multiple common
\&           of `<symbol>'
\&        <file>(<section>): warning: previous common is here
d1157 1
a1157 1
.IP "4." 4
d1161 1
a1161 1
\&        <file>(<section>): warning: common of `<symbol>'
d1163 1
a1163 1
\&        <file>(<section>): warning: larger common is here
d1165 1
a1165 1
.IP "5." 4
d1171 1
a1171 1
\&        <file>(<section>): warning: common of `<symbol>'
d1173 1
a1173 1
\&        <file>(<section>): warning: smaller common is here
d1178 1
a1178 1
.IP "\fB\-\-warn\-constructors\fR" 4
d1183 1
a1183 1
.IP "\fB\-\-warn\-multiple\-gp\fR" 4
d1196 1
a1196 1
.IP "\fB\-\-warn\-once\fR" 4
d1200 1
a1200 1
.IP "\fB\-\-warn\-section\-align\fR" 4
d1207 1
a1207 13
.IP "\fB\-\-warn\-shared\-textrel\fR" 4
.IX Item "--warn-shared-textrel"
Warn if the linker adds a \s-1DT_TEXTREL\s0 to a shared object.  
.IP "\fB\-\-warn\-unresolved\-symbols\fR" 4
.IX Item "--warn-unresolved-symbols"
If the linker is going to report an unresolved symbol (see the option
\&\fB\-\-unresolved\-symbols\fR) it will normally generate an error.
This option makes it generate a warning instead.
.IP "\fB\-\-error\-unresolved\-symbols\fR" 4
.IX Item "--error-unresolved-symbols"
This restores the linker's default behaviour of generating errors when
it is reporting unresolved symbols.
.IP "\fB\-\-whole\-archive\fR" 4
d1210 1
a1210 1
\&\fB\-\-whole\-archive\fR option, include every object file in the archive
d1217 2
a1218 2
about this option, so you have to use \fB\-Wl,\-whole\-archive\fR.
Second, don't forget to use \fB\-Wl,\-no\-whole\-archive\fR after your
d1221 1
a1221 1
.IP "\fB\-\-wrap\fR \fIsymbol\fR" 4
d1237 1
a1237 1
\&        __wrap_malloc (size_t c)
d1239 1
a1239 1
\&          printf ("malloc called with %zu\en", c);
d1243 1
a1243 2
.Sp
If you link other code with this file using \fB\-\-wrap malloc\fR, then
d1249 1
a1249 1
links without the \fB\-\-wrap\fR option will succeed.  If you do this,
d1253 1
a1253 5
.IP "\fB\-\-eh\-frame\-hdr\fR" 4
.IX Item "--eh-frame-hdr"
Request creation of \f(CW\*(C`.eh_frame_hdr\*(C'\fR section and \s-1ELF\s0
\&\f(CW\*(C`PT_GNU_EH_FRAME\*(C'\fR segment header.
.IP "\fB\-\-enable\-new\-dtags\fR" 4
d1255 1
a1255 2
.PD 0
.IP "\fB\-\-disable\-new\-dtags\fR" 4
a1256 1
.PD
d1259 2
a1260 2
\&\fB\-\-enable\-new\-dtags\fR, the dynamic tags will be created as needed.
If you specify \fB\-\-disable\-new\-dtags\fR, no new dynamic tags will be
a1262 21
.IP "\fB\-\-hash\-size=\fR\fInumber\fR" 4
.IX Item "--hash-size=number"
Set the default size of the linker's hash tables to a prime number
close to \fInumber\fR.  Increasing this value can reduce the length of
time it takes the linker to perform its tasks, at the expense of
increasing the linker's memory requirements.  Similarly reducing this
value can reduce the memory requirements at the expense of speed.
.IP "\fB\-\-reduce\-memory\-overheads\fR" 4
.IX Item "--reduce-memory-overheads"
This option reduces memory requirements at ld runtime, at the expense of
linking speed.  This was introduced to select the old O(n^2) algorithm
for link map file generation, rather than the new O(n) algorithm which uses
about 40% more memory for symbol storage.
.Sp
Another effect of the switch is to set the default hash table size to
1021, which again saves memory at the cost of lengthening the linker's
run time.  This is not done however if the \fB\-\-hash\-size\fR switch
has been used.
.Sp
The \fB\-\-reduce\-memory\-overheads\fR switch may be also be used to
enable other tradeoffs in future versions of the linker.
d1264 1
a1264 1
The i386 \s-1PE\s0 linker supports the \fB\-shared\fR option, which causes
d1277 1
a1277 1
.IP "\fB\-\-add\-stdcall\-alias\fR" 4
d1281 1
a1281 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-base\-file\fR \fIfile\fR" 4
d1286 1
a1286 2
[This is an i386 \s-1PE\s0 specific option]
.IP "\fB\-\-dll\fR" 4
d1289 1
a1289 1
\&\fB\-shared\fR or specify a \f(CW\*(C`LIBRARY\*(C'\fR in a given \f(CW\*(C`.def\*(C'\fR
d1291 1
a1291 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-stdcall\-fixup\fR" 4
d1293 1
a1293 2
.PD 0
.IP "\fB\-\-disable\-stdcall\-fixup\fR" 4
a1294 1
.PD
d1304 1
a1304 1
to be usable.  If you specify \fB\-\-enable\-stdcall\-fixup\fR, this
d1306 1
a1306 1
\&\fB\-\-disable\-stdcall\-fixup\fR, this feature is disabled and such
d1308 1
a1308 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-export\-all\-symbols\fR" 4
d1316 3
a1318 18
\&\f(CW\*(C`DllEntryPoint@@0\*(C'\fR, \f(CW\*(C`DllMainCRTStartup@@12\*(C'\fR, and 
\&\f(CW\*(C`impure_ptr\*(C'\fR will not be automatically
exported.  Also, symbols imported from other DLLs will not be 
re\-exported, nor will symbols specifying the \s-1DLL\s0's internal layout 
such as those beginning with \f(CW\*(C`_head_\*(C'\fR or ending with 
\&\f(CW\*(C`_iname\*(C'\fR.  In addition, no symbols from \f(CW\*(C`libgcc\*(C'\fR, 
\&\f(CW\*(C`libstd++\*(C'\fR, \f(CW\*(C`libmingw32\*(C'\fR, or \f(CW\*(C`crtX.o\*(C'\fR will be exported.
Symbols whose names begin with \f(CW\*(C`_\|_rtti_\*(C'\fR or \f(CW\*(C`_\|_builtin_\*(C'\fR will
not be exported, to help with \*(C+ DLLs.  Finally, there is an
extensive list of cygwin-private symbols that are not exported 
(obviously, this applies on when building DLLs for cygwin targets).
These cygwin-excludes are: \f(CW\*(C`_cygwin_dll_entry@@12\*(C'\fR, 
\&\f(CW\*(C`_cygwin_crt0_common@@8\*(C'\fR, \f(CW\*(C`_cygwin_noncygwin_dll_entry@@12\*(C'\fR,
\&\f(CW\*(C`_fmode\*(C'\fR, \f(CW\*(C`_impure_ptr\*(C'\fR, \f(CW\*(C`cygwin_attach_dll\*(C'\fR, 
\&\f(CW\*(C`cygwin_premain0\*(C'\fR, \f(CW\*(C`cygwin_premain1\*(C'\fR, \f(CW\*(C`cygwin_premain2\*(C'\fR,
\&\f(CW\*(C`cygwin_premain3\*(C'\fR, and \f(CW\*(C`environ\*(C'\fR. 
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-exclude\-symbols\fR \fIsymbol\fR\fB,\fR\fIsymbol\fR\fB,...\fR" 4
d1322 1
a1322 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-file\-alignment\fR" 4
d1327 1
a1327 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-heap\fR \fIreserve\fR" 4
d1329 1
a1329 2
.PD 0
.IP "\fB\-\-heap\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
a1330 1
.PD
d1334 1
a1334 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-image\-base\fR \fIvalue\fR" 4
d1342 1
a1342 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-kill\-at\fR" 4
d1346 1
a1346 10
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-large\-address\-aware\fR" 4
.IX Item "--large-address-aware"
If given, the appropriate bit in the \*(L"Charateristics\*(R" field of the \s-1COFF\s0
header is set to indicate that this executable supports virtual addresses
greater than 2 gigabytes.  This should be used in conjuction with the /3GB
or /USERVA=\fIvalue\fR megabytes switch in the \*(L"[operating systems]\*(R"
section of the \s-1BOOT\s0.INI.  Otherwise, this bit has no effect.
[This option is specific to \s-1PE\s0 targeted ports of the linker]
.IP "\fB\-\-major\-image\-version\fR \fIvalue\fR" 4
d1349 1
a1349 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-major\-os\-version\fR \fIvalue\fR" 4
d1352 1
a1352 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-major\-subsystem\-version\fR \fIvalue\fR" 4
d1355 1
a1355 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-image\-version\fR \fIvalue\fR" 4
d1358 1
a1358 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-os\-version\fR \fIvalue\fR" 4
d1361 1
a1361 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-subsystem\-version\fR \fIvalue\fR" 4
d1364 1
a1364 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-output\-def\fR \fIfile\fR" 4
d1371 1
a1371 182
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-out\-implib\fR \fIfile\fR" 4
.IX Item "--out-implib file"
The linker will create the file \fIfile\fR which will contain an
import lib corresponding to the \s-1DLL\s0 the linker is generating. This
import lib (which should be called \f(CW\*(C`*.dll.a\*(C'\fR or \f(CW\*(C`*.a\*(C'\fR
may be used to link clients against the generated \s-1DLL\s0; this behaviour
makes it possible to skip a separate \f(CW\*(C`dlltool\*(C'\fR import library
creation step.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-auto\-image\-base\fR" 4
.IX Item "--enable-auto-image-base"
Automatically choose the image base for DLLs, unless one is specified
using the \f(CW\*(C`\-\-image\-base\*(C'\fR argument.  By using a hash generated
from the dllname to create unique image bases for each \s-1DLL\s0, in-memory
collisions and relocations which can delay program execution are
avoided.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-auto\-image\-base\fR" 4
.IX Item "--disable-auto-image-base"
Do not automatically generate a unique image base.  If there is no
user-specified image base (\f(CW\*(C`\-\-image\-base\*(C'\fR) then use the platform
default.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-dll\-search\-prefix\fR \fIstring\fR" 4
.IX Item "--dll-search-prefix string"
When linking dynamically to a dll without an import library,
search for \f(CW\*(C`<string><basename>.dll\*(C'\fR in preference to 
\&\f(CW\*(C`lib<basename>.dll\*(C'\fR. This behaviour allows easy distinction
between DLLs built for the various \*(L"subplatforms\*(R": native, cygwin,
uwin, pw, etc.  For instance, cygwin DLLs typically use
\&\f(CW\*(C`\-\-dll\-search\-prefix=cyg\*(C'\fR. 
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-auto\-import\fR" 4
.IX Item "--enable-auto-import"
Do sophisticated linking of \f(CW\*(C`_symbol\*(C'\fR to \f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for 
\&\s-1DATA\s0 imports from DLLs, and create the necessary thunking symbols when 
building the import libraries with those \s-1DATA\s0 exports. Note: Use of the
\&'auto\-import' extension will cause the text section of the image file
to be made writable. This does not conform to the PE-COFF format
specification published by Microsoft.
.Sp
Using 'auto\-import' generally will 'just work' \*(-- but sometimes you may
see this message:
.Sp
"variable '<var>' can't be auto\-imported. Please read the 
documentation for ld's \f(CW\*(C`\-\-enable\-auto\-import\*(C'\fR for details."
.Sp
This message occurs when some (sub)expression accesses an address 
ultimately given by the sum of two constants (Win32 import tables only 
allow one).  Instances where this may occur include accesses to member 
fields of struct variables imported from a \s-1DLL\s0, as well as using a 
constant index into an array variable imported from a \s-1DLL\s0.  Any 
multiword variable (arrays, structs, long long, etc) may trigger
this error condition.  However, regardless of the exact data type
of the offending exported variable, ld will always detect it, issue
the warning, and exit.
.Sp
There are several ways to address this difficulty, regardless of the
data type of the exported variable:
.Sp
One way is to use \-\-enable\-runtime\-pseudo\-reloc switch. This leaves the task
of adjusting references in your client code for runtime environment, so
this method works only when runtime environment supports this feature.
.Sp
A second solution is to force one of the 'constants' to be a variable \*(-- 
that is, unknown and un-optimizable at compile time.  For arrays, 
there are two possibilities: a) make the indexee (the array's address) 
a variable, or b) make the 'constant' index a variable.  Thus:
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] \-\-> 
\&           { volatile type *t=extern_array; t[1] }
.Ve
.Sp
or
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] \-\-> 
\&           { volatile int t=1; extern_array[t] }
.Ve
.Sp
For structs (and most other multiword data types) the only option 
is to make the struct itself (or the long long, or the ...) variable:
.Sp
.Vb 3
\&        extern struct s extern_struct;
\&        extern_struct.field \-\-> 
\&           { volatile struct s *t=&extern_struct; t\->field }
.Ve
.Sp
or
.Sp
.Vb 3
\&        extern long long extern_ll;
\&        extern_ll \-\->
\&          { volatile long long * local_ll=&extern_ll; *local_ll }
.Ve
.Sp
A third method of dealing with this difficulty is to abandon
\&'auto\-import' for the offending symbol and mark it with 
\&\f(CW\*(C`_\|_declspec(dllimport)\*(C'\fR.  However, in practise that
requires using compile-time #defines to indicate whether you are
building a \s-1DLL\s0, building client code that will link to the \s-1DLL\s0, or 
merely building/linking to a static library.   In making the choice 
between the various methods of resolving the 'direct address with 
constant offset' problem, you should consider typical real-world usage:
.Sp
Original:
.Sp
.Vb 7
\&        \-\-foo.h
\&        extern int arr[];
\&        \-\-foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
.Sp
Solution 1:
.Sp
.Vb 9
\&        \-\-foo.h
\&        extern int arr[];
\&        \-\-foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          /* This workaround is for win32 and cygwin; do not "optimize" */
\&          volatile int *parr = arr;
\&          printf("%d\en",parr[1]);
\&        }
.Ve
.Sp
Solution 2:
.Sp
.Vb 14
\&        \-\-foo.h
\&        /* Note: auto\-export is assumed (no __declspec(dllexport)) */
\&        #if (defined(_WIN32) || defined(__CYGWIN__)) && \e
\&          !(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))
\&        #define FOO_IMPORT __declspec(dllimport)
\&        #else
\&        #define FOO_IMPORT
\&        #endif
\&        extern FOO_IMPORT int arr[];
\&        \-\-foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
.Sp
A fourth way to avoid this problem is to re-code your 
library to use a functional interface rather than a data interface
for the offending variables (e.g. \fIset_foo()\fR and \fIget_foo()\fR accessor
functions).
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-auto\-import\fR" 4
.IX Item "--disable-auto-import"
Do not attempt to do sophisticated linking of \f(CW\*(C`_symbol\*(C'\fR to 
\&\f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for \s-1DATA\s0 imports from DLLs.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-runtime\-pseudo\-reloc\fR" 4
.IX Item "--enable-runtime-pseudo-reloc"
If your code contains expressions described in \-\-enable\-auto\-import section,
that is, \s-1DATA\s0 imports from \s-1DLL\s0 with non-zero offset, this switch will create
a vector of 'runtime pseudo relocations' which can be used by runtime
environment to adjust references to such data in your client code. 
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-runtime\-pseudo\-reloc\fR" 4
.IX Item "--disable-runtime-pseudo-reloc"
Do not create pseudo relocations for non-zero offset \s-1DATA\s0 imports from
DLLs.  This is the default.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-extra\-pe\-debug\fR" 4
.IX Item "--enable-extra-pe-debug"
Show additional debug info related to auto-import symbol thunking.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-section\-alignment\fR" 4
d1375 1
a1375 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-stack\fR \fIreserve\fR" 4
d1377 1
a1377 2
.PD 0
.IP "\fB\-\-stack\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
a1378 1
.PD
d1380 1
a1380 1
used as stack for this program.  The default is 2Mb reserved, 4K
d1382 1
a1382 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-subsystem\fR \fIwhich\fR" 4
d1384 1
a1384 2
.PD 0
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR" 4
d1386 1
a1386 1
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR\fB.\fR\fIminor\fR" 4
a1387 1
.PD
d1390 2
a1391 18
\&\f(CW\*(C`console\*(C'\fR, \f(CW\*(C`posix\*(C'\fR, and \f(CW\*(C`xbox\*(C'\fR.  You may optionally set
the subsystem version also.  Numeric values are also accepted for
\&\fIwhich\fR.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.PP
The 68HC11 and 68HC12 linkers support specific options to control the
memory bank switching mapping and trampoline code generation.
.IP "\fB\-\-no\-trampoline\fR" 4
.IX Item "--no-trampoline"
This option disables the generation of trampoline. By default a trampoline
is generated for each far function which is called using a \f(CW\*(C`jsr\*(C'\fR
instruction (this happens when a pointer to a far function is taken).
.IP "\fB\-\-bank\-window\fR \fIname\fR" 4
.IX Item "--bank-window name"
This option indicates to the linker the name of the memory region in
the \fB\s-1MEMORY\s0\fR specification that describes the memory bank window.
The definition of such region is then used by the linker to compute
paging and addresses within the memory window.
d1394 2
a1395 3
You can change the behaviour of \fBld\fR with the environment variables
\&\f(CW\*(C`GNUTARGET\*(C'\fR,
\&\f(CW\*(C`LDEMULATION\*(C'\fR and \f(CW\*(C`COLLECT_NO_DEMANGLE\*(C'\fR.
d1398 1
a1398 1
use \fB\-b\fR (or its synonym \fB\-\-format\fR).  Its value should be one
d1400 1
a1400 1
\&\f(CW\*(C`GNUTARGET\*(C'\fR in the environment, \fBld\fR uses the natural format
d1407 1
a1407 1
in the search\-list, so ambiguities are resolved in favor of convention.
d1412 1
a1412 1
available emulations with the \fB\-\-verbose\fR or \fB\-V\fR options.  If
d1421 1
a1421 1
may be overridden by the \fB\-\-demangle\fR and \fB\-\-no\-demangle\fR
d1430 1
a1430 2
Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001,
2002, 2003, 2004 Free Software Foundation, Inc.
@


1.12.12.2
log
@Update generated files on the branch.
@
text
@d131 1
a131 1
.TH LD 1 "2006-05-17" "binutils-2.16.93" "GNU Development Tools"
@


1.12.12.3
log
@Update generated files.
@
text
@d131 1
a131 1
.TH LD 1 "2006-06-12" "binutils-2.16.94" "GNU Development Tools"
@


1.12.12.4
log
@Commit generated files.
@
text
@d131 1
a131 1
.TH LD 1 "2006-06-23" "binutils-2.17" "GNU Development Tools"
@


1.12.10.1
log
@Commit generated files for the binutils 2.16 branch.
@
text
@d1 2
a2 1
.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
d5 1
a5 1
.\" ========================================================================
d18 6
d31 1
d37 3
a39 3
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
d49 2
a50 2
.    ds C` ""
.    ds C' ""
d59 4
a62 4
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
d66 1
a66 1
..
d71 2
a72 2
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
d77 1
d137 1
a137 1
.\" ========================================================================
d140 2
a141 1
.TH LD 1 "2005-03-08" "binutils-2.15.96" "GNU Development Tools"
d143 1
a143 1
ld \- Using LD, the GNU linker
d146 1
a146 1
ld [\fBoptions\fR] \fIobjfile\fR ...
d149 1
a149 1
\&\fBld\fR combines a number of object and archive files, relocates
d151 1
a151 1
compiling a program is to run \fBld\fR.
d153 1
a153 1
\&\fBld\fR accepts Linker Command Language files written in
d158 1
a158 1
\&\fBld\fR entry in \f(CW\*(C`info\*(C'\fR, or the manual
d162 2
a163 2
This version of \fBld\fR uses the general purpose \s-1BFD\s0 libraries
to operate on object files. This allows \fBld\fR to read, combine, and
d171 1
a171 1
\&\fBld\fR continues executing, allowing you to identify other errors
d174 1
a174 1
The \s-1GNU\s0 linker \fBld\fR is meant to cover a broad range of situations,
d181 1
a181 1
For instance, a frequent use of \fBld\fR is to link standard Unix
d186 1
a186 1
\&        ld -o <output> /lib/crt0.o hello.o -lc
d188 1
a188 2
.PP
This tells \fBld\fR to produce a file called \fIoutput\fR as the
d193 1
a193 1
Some of the command-line options to \fBld\fR may be specified at any
d214 1
a214 1
If the linker cannot recognize the format of an object file, it will
d221 4
a224 2
specifying a script in this way merely augments the main linker script;
use the \fB\-T\fR option to replace the default linker script entirely.
d232 2
a233 2
precede the option name; for example, \fB\-trace\-symbol\fR and
\&\fB\-\-trace\-symbol\fR are equivalent.  Note\-\-\-there is one exception to
d237 1
a237 1
name to \fBmagic\fR whereas \fB\-\-omagic\fR sets the \s-1NMAGIC\s0 flag on the
d243 1
a243 1
\&\fB\-\-trace\-symbol foo\fR and \fB\-\-trace\-symbol=foo\fR are equivalent.
d247 2
a248 2
Note\-\-\-if the linker is being invoked indirectly, via a compiler driver
(e.g. \fBgcc\fR) then all the linker command line options should be
a254 1
.PP
d260 1
a260 1
.IP "\fB\-a\fR\fIkeyword\fR" 4
d267 1
a267 1
.IP "\fB\-A\fR\fIarchitecture\fR" 4
d269 1
a269 2
.PD 0
.IP "\fB\-\-architecture=\fR\fIarchitecture\fR" 4
d271 2
a272 3
.PD
In the current release of \fBld\fR, this option is useful only for the
Intel 960 family of architectures.  In that \fBld\fR configuration, the
d277 1
a277 1
Future releases of \fBld\fR may support similar functionality for
d279 1
a279 1
.IP "\fB\-b\fR \fIinput-format\fR" 4
d281 1
a281 2
.PD 0
.IP "\fB\-\-format=\fR\fIinput-format\fR" 4
d283 2
a284 3
.PD
\&\fBld\fR may be configured to support more than one kind of object
file.  If your \fBld\fR is configured this way, you can use the
d286 1
a286 1
that follow this option on the command line.  Even when \fBld\fR is
d288 1
a288 1
to specify this, as \fBld\fR should be configured to expect as a
d305 1
a305 1
.IP "\fB\-c\fR \fIMRI-commandfile\fR" 4
d307 1
a307 2
.PD 0
.IP "\fB\-\-mri\-script=\fR\fIMRI-commandfile\fR" 4
d309 1
a309 2
.PD
For compatibility with linkers produced by \s-1MRI\s0, \fBld\fR accepts script
d314 2
a315 2
scripts written in the general-purpose \fBld\fR scripting language.
If \fIMRI-cmdfile\fR does not exist, \fBld\fR looks for it in the directories
d317 1
a317 1
.IP "\fB\-d\fR" 4
d319 1
a319 2
.PD 0
.IP "\fB\-dc\fR" 4
d321 1
a321 1
.IP "\fB\-dp\fR" 4
a322 1
.PD
d327 1
a327 1
.IP "\fB\-e\fR \fIentry\fR" 4
d329 1
a329 2
.PD 0
.IP "\fB\-\-entry=\fR\fIentry\fR" 4
a330 1
.PD
d337 1
a337 11
.IP "\fB\-\-exclude\-libs\fR \fIlib\fR\fB,\fR\fIlib\fR\fB,...\fR" 4
.IX Item "--exclude-libs lib,lib,..."
Specifies a list of archive libraries from which symbols should not be automatically
exported. The library names may be delimited by commas or colons.  Specifying
\&\f(CW\*(C`\-\-exclude\-libs ALL\*(C'\fR excludes symbols in all archive libraries from
automatic export.  This option is available only for the i386 \s-1PE\s0 targeted
port of the linker and for \s-1ELF\s0 targeted ports.  For i386 \s-1PE\s0, symbols
explicitly listed in a .def file are still exported, regardless of this
option.  For \s-1ELF\s0 targeted ports, symbols affected by this option will
be treated as hidden.
.IP "\fB\-E\fR" 4
d339 1
a339 2
.PD 0
.IP "\fB\-\-export\-dynamic\fR" 4
a340 1
.PD
d353 1
a353 5
.Sp
You can also use the version script to control what symbols should
be added to the dynamic symbol table if the output format supports it.
See the description of \fB\-\-version\-script\fR in \f(CW@@ref\fR{\s-1VERSION\s0}.
.IP "\fB\-EB\fR" 4
d356 1
a356 1
.IP "\fB\-EL\fR" 4
d359 1
a359 1
.IP "\fB\-f\fR" 4
d361 1
a361 2
.PD 0
.IP "\fB\-\-auxiliary\fR \fIname\fR" 4
a362 1
.PD
d380 1
a380 1
.IP "\fB\-F\fR \fIname\fR" 4
d382 1
a382 2
.PD 0
.IP "\fB\-\-filter\fR \fIname\fR" 4
a383 1
.PD
d397 1
a397 1
Some older linkers used the \fB\-F\fR option throughout a compilation
d399 2
a400 3
object files.
The \s-1GNU\s0 linker uses other mechanisms for this purpose: the
\&\fB\-b\fR, \fB\-\-format\fR, \fB\-\-oformat\fR options, the 
d402 3
a404 4
environment variable.
The \s-1GNU\s0 linker will ignore the \fB\-F\fR option when not
creating an \s-1ELF\s0 shared object.
.IP "\fB\-fini\fR \fIname\fR" 4
d410 1
a410 1
.IP "\fB\-g\fR" 4
d413 1
a413 1
.IP "\fB\-G\fR\fIvalue\fR" 4
d415 1
a415 2
.PD 0
.IP "\fB\-\-gpsize=\fR\fIvalue\fR" 4
a416 1
.PD
d421 1
a421 1
.IP "\fB\-h\fR\fIname\fR" 4
d423 1
a423 2
.PD 0
.IP "\fB\-soname=\fR\fIname\fR" 4
a424 1
.PD
d430 1
a430 1
.IP "\fB\-i\fR" 4
d433 1
a433 1
.IP "\fB\-init\fR \fIname\fR" 4
d439 1
a439 1
.IP "\fB\-l\fR\fIarchive\fR" 4
d441 1
a441 2
.PD 0
.IP "\fB\-\-library=\fR\fIarchive\fR" 4
a442 1
.PD
d444 1
a444 1
option may be used any number of times.  \fBld\fR will search its
d448 1
a448 1
On systems which support shared libraries, \fBld\fR may also search for
d450 1
a450 1
and SunOS systems, \fBld\fR will search a directory for a library with
d458 1
a458 1
command line, the linker will include the appropriate file(s) from the
d462 1
a462 1
See the \fB\-(\fR option for a way to force the linker to search
d468 1
a468 1
if you are using \fBld\fR on \s-1AIX\s0, note that it is different from the
d470 1
a470 1
.IP "\fB\-L\fR\fIsearchdir\fR" 4
d472 1
a472 2
.PD 0
.IP "\fB\-\-library\-path=\fR\fIsearchdir\fR" 4
d474 2
a475 3
.PD
Add path \fIsearchdir\fR to the list of paths that \fBld\fR will search
for archive libraries and \fBld\fR control scripts.  You may use this
d479 1
a479 1
\&\fB\-L\fR options apply to all \fB\-l\fR options, regardless of the
a481 3
If \fIsearchdir\fR begins with \f(CW\*(C`=\*(C'\fR, then the \f(CW\*(C`=\*(C'\fR will be replaced
by the \fIsysroot prefix\fR, a path specified when the linker is configured.
.Sp
d483 1
a483 1
\&\fB\-L\fR) depends on which emulation mode \fBld\fR is using, and in
d489 1
a489 1
.IP "\fB\-m\fR\fIemulation\fR" 4
d492 1
a492 1
emulations with the \fB\-\-verbose\fR or \fB\-V\fR options.
d499 1
a499 1
.IP "\fB\-M\fR" 4
d501 1
a501 2
.PD 0
.IP "\fB\-\-print\-map\fR" 4
a502 1
.PD
d506 1
a506 1
.IP "*" 4
d508 1
a508 1
.IP "*" 4
d510 1
a510 1
.IP "*" 4
d516 1
a516 1
.IP "\fB\-n\fR" 4
d518 1
a518 2
.PD 0
.IP "\fB\-\-nmagic\fR" 4
a519 1
.PD
d522 1
a522 1
.IP "\fB\-N\fR" 4
d524 1
a524 2
.PD 0
.IP "\fB\-\-omagic\fR" 4
a525 1
.PD
d527 3
a529 12
not page-align the data segment, and disable linking against shared
libraries.  If the output format supports Unix style magic numbers,
mark the output as \f(CW\*(C`OMAGIC\*(C'\fR. Note: Although a writable text section
is allowed for PE-COFF targets, it does not conform to the format
specification published by Microsoft.
.IP "\fB\-\-no\-omagic\fR" 4
.IX Item "--no-omagic"
This option negates most of the effects of the \fB\-N\fR option.  It
sets the text section to be read\-only, and forces the data segment to
be page\-aligned.  Note \- this option does not enable linking against
shared libraries.  Use \fB\-Bdynamic\fR for this.
.IP "\fB\-o\fR \fIoutput\fR" 4
d531 1
a531 2
.PD 0
.IP "\fB\-\-output=\fR\fIoutput\fR" 4
d533 1
a533 2
.PD
Use \fIoutput\fR as the name for the program produced by \fBld\fR; if this
d536 1
a536 1
.IP "\fB\-O\fR \fIlevel\fR" 4
d538 1
a538 1
If \fIlevel\fR is a numeric values greater than zero \fBld\fR optimizes
d541 1
a541 1
.IP "\fB\-q\fR" 4
d543 1
a543 2
.PD 0
.IP "\fB\-\-emit\-relocs\fR" 4
a544 1
.PD
d549 1
a549 3
.Sp
This option is currently only supported on \s-1ELF\s0 platforms.
.IP "\fB\-r\fR" 4
d551 2
a552 4
.PD 0
.IP "\fB\-\-relocatable\fR" 4
.IX Item "--relocatable"
.PD
d554 1
a554 1
turn serve as input to \fBld\fR.  This is often called \fIpartial
a561 6
When an input file does not have the same format as the output file,
partial linking is only supported if that input file does not contain any
relocations.  Different output formats can have further restrictions; for
example some \f(CW\*(C`a.out\*(C'\fR\-based formats do not support partial linking
with input files in other formats at all.
.Sp
d563 1
a563 1
.IP "\fB\-R\fR \fIfilename\fR" 4
d565 1
a565 2
.PD 0
.IP "\fB\-\-just\-symbols=\fR\fIfilename\fR" 4
a566 1
.PD
d572 1
a572 1
For compatibility with other \s-1ELF\s0 linkers, if the \fB\-R\fR option is
d574 2
a575 2
the \fB\-rpath\fR option.
.IP "\fB\-s\fR" 4
d577 1
a577 2
.PD 0
.IP "\fB\-\-strip\-all\fR" 4
a578 1
.PD
d580 1
a580 1
.IP "\fB\-S\fR" 4
d582 1
a582 2
.PD 0
.IP "\fB\-\-strip\-debug\fR" 4
a583 1
.PD
d585 1
a585 1
.IP "\fB\-t\fR" 4
d587 1
a587 2
.PD 0
.IP "\fB\-\-trace\fR" 4
d589 2
a590 3
.PD
Print the names of the input files as \fBld\fR processes them.
.IP "\fB\-T\fR \fIscriptfile\fR" 4
d592 1
a592 2
.PD 0
.IP "\fB\-\-script=\fR\fIscriptfile\fR" 4
a593 1
.PD
d595 1
a595 1
\&\fBld\fR's default linker script (rather than adding to it), so
d597 7
a603 5
output file.    If \fIscriptfile\fR does not exist in
the current directory, \f(CW\*(C`ld\*(C'\fR looks for it in the directories
specified by any preceding \fB\-L\fR options.  Multiple \fB\-T\fR
options accumulate.
.IP "\fB\-u\fR \fIsymbol\fR" 4
d605 1
a605 2
.PD 0
.IP "\fB\-\-undefined=\fR\fIsymbol\fR" 4
a606 1
.PD
d612 1
a612 1
.IP "\fB\-Ur\fR" 4
d616 1
a616 1
turn serve as input to \fBld\fR.  When linking \*(C+ programs, \fB\-Ur\fR
d622 1
a622 1
.IP "\fB\-\-unique[=\fR\fI\s-1SECTION\s0\fR\fB]\fR" 4
d631 1
a631 1
.IP "\fB\-v\fR" 4
d633 1
a633 2
.PD 0
.IP "\fB\-\-version\fR" 4
d635 1
a635 1
.IP "\fB\-V\fR" 4
d637 1
a637 2
.PD
Display the version number for \fBld\fR.  The \fB\-V\fR option also
d639 1
a639 1
.IP "\fB\-x\fR" 4
d641 1
a641 2
.PD 0
.IP "\fB\-\-discard\-all\fR" 4
a642 1
.PD
d644 1
a644 1
.IP "\fB\-X\fR" 4
d646 1
a646 2
.PD 0
.IP "\fB\-\-discard\-locals\fR" 4
a647 1
.PD
d650 1
a650 1
.IP "\fB\-y\fR \fIsymbol\fR" 4
d652 1
a652 2
.PD 0
.IP "\fB\-\-trace\-symbol=\fR\fIsymbol\fR" 4
a653 1
.PD
d660 1
a660 1
.IP "\fB\-Y\fR \fIpath\fR" 4
d664 1
a664 1
.IP "\fB\-z\fR \fIkeyword\fR" 4
d666 17
a682 64
The recognized keywords are:
.RS 4
.IP "\fBcombreloc\fR" 4
.IX Item "combreloc"
Combines multiple reloc sections and sorts them to make dynamic symbol
lookup caching possible.
.IP "\fBdefs\fR" 4
.IX Item "defs"
Disallows undefined symbols in object files.  Undefined symbols in
shared libraries are still allowed.
.IP "\fBinitfirst\fR" 4
.IX Item "initfirst"
This option is only meaningful when building a shared object.
It marks the object so that its runtime initialization will occur
before the runtime initialization of any other objects brought into
the process at the same time.  Similarly the runtime finalization of
the object will occur after the runtime finalization of any other
objects.
.IP "\fBinterpose\fR" 4
.IX Item "interpose"
Marks the object that its symbol table interposes before all symbols
but the primary executable.
.IP "\fBloadfltr\fR" 4
.IX Item "loadfltr"
Marks  the object that its filters be processed immediately at
runtime.
.IP "\fBmuldefs\fR" 4
.IX Item "muldefs"
Allows multiple definitions.
.IP "\fBnocombreloc\fR" 4
.IX Item "nocombreloc"
Disables multiple reloc sections combining.
.IP "\fBnocopyreloc\fR" 4
.IX Item "nocopyreloc"
Disables production of copy relocs.
.IP "\fBnodefaultlib\fR" 4
.IX Item "nodefaultlib"
Marks the object that the search for dependencies of this object will
ignore any default library search paths.
.IP "\fBnodelete\fR" 4
.IX Item "nodelete"
Marks the object shouldn't be unloaded at runtime.
.IP "\fBnodlopen\fR" 4
.IX Item "nodlopen"
Marks the object not available to \f(CW\*(C`dlopen\*(C'\fR.
.IP "\fBnodump\fR" 4
.IX Item "nodump"
Marks the object can not be dumped by \f(CW\*(C`dldump\*(C'\fR.
.IP "\fBnow\fR" 4
.IX Item "now"
When generating an executable or shared library, mark it to tell the
dynamic linker to resolve all symbols when the program is started, or
when the shared library is linked to using dlopen, instead of
deferring function call resolution to the point when the function is
first called.
.IP "\fBorigin\fR" 4
.IX Item "origin"
Marks the object may contain \f(CW$ORIGIN\fR.
.RE
.RS 4
.Sp
Other keywords are ignored for Solaris compatibility.  
.RE
.IP "\fB\-(\fR \fIarchives\fR \fB\-)\fR" 4
d684 1
a684 2
.PD 0
.IP "\fB\-\-start\-group\fR \fIarchives\fR \fB\-\-end\-group\fR" 4
a685 1
.PD
d701 1
a701 41
.IP "\fB\-\-accept\-unknown\-input\-arch\fR" 4
.IX Item "--accept-unknown-input-arch"
.PD 0
.IP "\fB\-\-no\-accept\-unknown\-input\-arch\fR" 4
.IX Item "--no-accept-unknown-input-arch"
.PD
Tells the linker to accept input files whose architecture cannot be
recognised.  The assumption is that the user knows what they are doing
and deliberately wants to link in these unknown input files.  This was
the default behaviour of the linker, before release 2.14.  The default
behaviour from release 2.14 onwards is to reject such input files, and
so the \fB\-\-accept\-unknown\-input\-arch\fR option has been added to
restore the old behaviour.
.IP "\fB\-\-as\-needed\fR" 4
.IX Item "--as-needed"
.PD 0
.IP "\fB\-\-no\-as\-needed\fR" 4
.IX Item "--no-as-needed"
.PD
This option affects \s-1ELF\s0 \s-1DT_NEEDED\s0 tags for dynamic libraries mentioned
on the command line after the \fB\-\-as\-needed\fR option.  Normally,
the linker will add a \s-1DT_NEEDED\s0 tag for each dynamic library mentioned
on the command line, regardless of whether the library is actually
needed.  \fB\-\-as\-needed\fR causes \s-1DT_NEEDED\s0 tags to only be emitted
for libraries that satisfy some symbol reference from regular objects
which is undefined at the point that the library was linked.
\&\fB\-\-no\-as\-needed\fR restores the default behaviour.
.IP "\fB\-\-add\-needed\fR" 4
.IX Item "--add-needed"
.PD 0
.IP "\fB\-\-no\-add\-needed\fR" 4
.IX Item "--no-add-needed"
.PD
This option affects the treatment of dynamic libraries from \s-1ELF\s0
\&\s-1DT_NEEDED\s0 tags in dynamic libraries mentioned on the command line after
the \fB\-\-no\-add\-needed\fR option.  Normally, the linker will add
a \s-1DT_NEEDED\s0 tag for each dynamic library from \s-1DT_NEEDED\s0 tags.
\&\fB\-\-no\-add\-needed\fR causes \s-1DT_NEEDED\s0 tags will never be emitted
for those libraries from \s-1DT_NEEDED\s0 tags. \fB\-\-add\-needed\fR restores
the default behaviour.
.IP "\fB\-assert\fR \fIkeyword\fR" 4
d704 1
a704 1
.IP "\fB\-Bdynamic\fR" 4
d706 1
a706 2
.PD 0
.IP "\fB\-dy\fR" 4
d708 1
a708 1
.IP "\fB\-call_shared\fR" 4
a709 1
.PD
d715 2
a716 2
\&\fB\-l\fR options which follow it.
.IP "\fB\-Bgroup\fR" 4
d721 3
a723 3
\&\fB\-\-unresolved\-symbols=report\-all\fR is implied.  This option is
only meaningful on \s-1ELF\s0 platforms which support shared libraries.
.IP "\fB\-Bstatic\fR" 4
d725 1
a725 2
.PD 0
.IP "\fB\-dn\fR" 4
d727 1
a727 1
.IP "\fB\-non_shared\fR" 4
d729 1
a729 1
.IP "\fB\-static\fR" 4
a730 1
.PD
d735 2
a736 3
library searching for \fB\-l\fR options which follow it.  This
option also implies \fB\-\-unresolved\-symbols=report\-all\fR.
.IP "\fB\-Bsymbolic\fR" 4
d743 1
a743 1
.IP "\fB\-\-check\-sections\fR" 4
d745 1
a745 2
.PD 0
.IP "\fB\-\-no\-check\-sections\fR" 4
a746 1
.PD
d752 2
a753 2
restored by using the command line switch \fB\-\-check\-sections\fR.
.IP "\fB\-\-cref\fR" 4
d764 1
a764 16
.IP "\fB\-\-no\-define\-common\fR" 4
.IX Item "--no-define-common"
This option inhibits the assignment of addresses to common symbols.
The script command \f(CW\*(C`INHIBIT_COMMON_ALLOCATION\*(C'\fR has the same effect.
.Sp
The \fB\-\-no\-define\-common\fR option allows decoupling
the decision to assign addresses to Common symbols from the choice
of the output file type; otherwise a non-Relocatable output type
forces assigning addresses to Common symbols.
Using \fB\-\-no\-define\-common\fR allows Common symbols that are referenced
from a shared library to be assigned addresses only in the main program.
This eliminates the unused duplicate space in the shared library,
and also prevents any possible confusion over resolving to the wrong
duplicate when there are many dynamic modules with specialized search
paths for runtime symbol resolution.
.IP "\fB\-\-defsym\fR \fIsymbol\fR\fB=\fR\fIexpression\fR" 4
d776 1
a776 1
.IP "\fB\-\-demangle[=\fR\fIstyle\fR\fB]\fR" 4
d778 1
a778 2
.PD 0
.IP "\fB\-\-no\-demangle\fR" 4
a779 1
.PD
d789 1
a789 1
.IP "\fB\-\-dynamic\-linker\fR \fIfile\fR" 4
d795 8
a802 1
.IP "\fB\-\-fatal\-warnings\fR" 4
d805 1
a805 1
.IP "\fB\-\-force\-exe\-suffix\fR" 4
d815 1
a815 1
.IP "\fB\-\-no\-gc\-sections\fR" 4
d817 1
a817 2
.PD 0
.IP "\fB\-\-gc\-sections\fR" 4
a818 1
.PD
d821 4
a824 4
with \fB\-r\fR. The default behaviour (of not performing this garbage
collection) can be restored by specifying \fB\-\-no\-gc\-sections\fR on
the command line.
.IP "\fB\-\-help\fR" 4
d827 1
a827 1
.IP "\fB\-\-target\-help\fR" 4
d830 1
a830 1
.IP "\fB\-Map\fR \fImapfile\fR" 4
d834 1
a834 1
.IP "\fB\-\-no\-keep\-memory\fR" 4
d836 2
a837 2
\&\fBld\fR normally optimizes for speed over memory usage by caching the
symbol tables of input files in memory.  This option tells \fBld\fR to
d839 1
a839 1
necessary.  This may be required if \fBld\fR runs out of memory space
d841 1
a841 1
.IP "\fB\-\-no\-undefined\fR" 4
d843 1
a843 2
.PD 0
.IP "\fB\-z defs\fR" 4
d845 4
a848 16
.PD
Report unresolved symbol references from regular object files.  This
is done even if the linker is creating a non-symbolic shared library.
The switch \fB\-\-[no\-]allow\-shlib\-undefined\fR controls the
behaviour for reporting unresolved references found in shared
libraries being linked in.  
.IP "\fB\-\-allow\-multiple\-definition\fR" 4
.IX Item "--allow-multiple-definition"
.PD 0
.IP "\fB\-z muldefs\fR" 4
.IX Item "-z muldefs"
.PD
Normally when a symbol is defined multiple times, the linker will
report a fatal error. These options allow multiple definitions and the
first definition will be used.
.IP "\fB\-\-allow\-shlib\-undefined\fR" 4
d850 11
a860 33
.PD 0
.IP "\fB\-\-no\-allow\-shlib\-undefined\fR" 4
.IX Item "--no-allow-shlib-undefined"
.PD
Allows (the default) or disallows undefined symbols in shared libraries.
This switch is similar to \fB\-\-no\-undefined\fR except that it
determines the behaviour when the undefined symbols are in a
shared library rather than a regular object file.  It does not affect
how undefined symbols in regular object files are handled.
.Sp
The reason that \fB\-\-allow\-shlib\-undefined\fR is the default is that
the shared library being specified at link time may not be the same as
the one that is available at load time, so the symbols might actually be
resolvable at load time.  Plus there are some systems, (eg BeOS) where
undefined symbols in shared libraries is normal.  (The kernel patches
them at load time to select which function is most appropriate 
for the current architecture.  This is used for example to dynamically
select an appropriate memset function).  Apparently it is also normal
for \s-1HPPA\s0 shared libraries to have undefined symbols.
.IP "\fB\-\-no\-undefined\-version\fR" 4
.IX Item "--no-undefined-version"
Normally when a symbol has an undefined version, the linker will ignore
it. This option disallows symbols with undefined version and a fatal error
will be issued instead.
.IP "\fB\-\-default\-symver\fR" 4
.IX Item "--default-symver"
Create and use a default symbol version (the soname) for unversioned
exported symbols.
.IP "\fB\-\-default\-imported\-symver\fR" 4
.IX Item "--default-imported-symver"
Create and use a default symbol version (the soname) for unversioned
imported symbols.
.IP "\fB\-\-no\-warn\-mismatch\fR" 4
d862 1
a862 1
Normally \fBld\fR will give an error if you try to link together input
d865 1
a865 1
This option tells \fBld\fR that it should silently permit such possible
d869 1
a869 1
.IP "\fB\-\-no\-whole\-archive\fR" 4
d871 1
a871 1
Turn off the effect of the \fB\-\-whole\-archive\fR option for subsequent
d873 1
a873 1
.IP "\fB\-\-noinhibit\-exec\fR" 4
d879 1
a879 6
.IP "\fB\-nostdlib\fR" 4
.IX Item "-nostdlib"
Only search library directories explicitly specified on the
command line.  Library directories specified in linker scripts
(including linker scripts specified on the command line) are ignored.
.IP "\fB\-\-oformat\fR \fIoutput-format\fR" 4
d881 5
a885 5
\&\fBld\fR may be configured to support more than one kind of object
file.  If your \fBld\fR is configured this way, you can use the
\&\fB\-\-oformat\fR option to specify the binary format for the output
object file.  Even when \fBld\fR is configured to support alternative
object formats, you don't usually need to specify this, as \fBld\fR
d892 1
a892 13
.IP "\fB\-pie\fR" 4
.IX Item "-pie"
.PD 0
.IP "\fB\-\-pic\-executable\fR" 4
.IX Item "--pic-executable"
.PD
Create a position independent executable.  This is currently only supported on
\&\s-1ELF\s0 platforms.  Position independent executables are similar to shared
libraries in that they are relocated by the dynamic linker to the virtual
address the \s-1OS\s0 chooses for them (which can vary between invocations).  Like
normal dynamically linked executables they can be executed and symbols
defined in the executable cannot be overridden by shared libraries.
.IP "\fB\-qmagic\fR" 4
d895 1
a895 1
.IP "\fB\-Qy\fR" 4
d898 1
a898 1
.IP "\fB\-\-relax\fR" 4
d903 1
a903 1
On some platforms, the \fB\-\-relax\fR option performs global
d913 1
a913 1
On platforms where this is not supported, \fB\-\-relax\fR is accepted,
d915 1
a915 1
.IP "\fB\-\-retain\-symbols\-file\fR \fIfilename\fR" 4
d924 1
a924 1
\&\fB\-\-retain\-symbols\-file\fR does \fInot\fR discard undefined symbols,
d927 1
a927 1
You may only specify \fB\-\-retain\-symbols\-file\fR once in the command
d929 1
a929 1
.IP "\fB\-rpath\fR \fIdir\fR" 4
d932 1
a932 1
linking an \s-1ELF\s0 executable with shared objects.  All \fB\-rpath\fR
d934 1
a934 1
them to locate shared objects at runtime.  The \fB\-rpath\fR option is
d937 1
a937 1
\&\fB\-rpath\-link\fR option.  If \fB\-rpath\fR is not used when linking an
d941 1
a941 1
The \fB\-rpath\fR option may also be used on SunOS.  By default, on
d943 4
a946 4
\&\fB\-L\fR options it is given.  If a \fB\-rpath\fR option is used, the
runtime search path will be formed exclusively using the \fB\-rpath\fR
options, ignoring the \fB\-L\fR options.  This can be useful when using
gcc, which adds many \fB\-L\fR options which may be on \s-1NFS\s0 mounted
d949 1
a949 1
For compatibility with other \s-1ELF\s0 linkers, if the \fB\-R\fR option is
d951 2
a952 2
the \fB\-rpath\fR option.
.IP "\fB\-rpath\-link\fR \fI\s-1DIR\s0\fR" 4
d958 1
a958 1
When the linker encounters such a dependency when doing a non\-shared,
d961 1
a961 1
explicitly.  In such a case, the \fB\-rpath\-link\fR option
d963 1
a963 1
\&\fB\-rpath\-link\fR option may specify a sequence of directory names
d975 7
a981 7
.IP "1." 4
Any directories specified by \fB\-rpath\-link\fR options.
.IP "2." 4
Any directories specified by \fB\-rpath\fR options.  The difference
between \fB\-rpath\fR and \fB\-rpath\-link\fR is that directories
specified by \fB\-rpath\fR options are included in the executable and
used at runtime, whereas the \fB\-rpath\-link\fR option is only effective
d983 2
a984 2
.IP "3." 4
On an \s-1ELF\s0 system, if the \fB\-rpath\fR and \f(CW\*(C`rpath\-link\*(C'\fR options
d987 4
a990 4
.IP "4." 4
On SunOS, if the \fB\-rpath\fR option was not used, search any
directories specified using \fB\-L\fR options.
.IP "5." 4
d993 1
a993 1
.IP "6." 4
d998 1
a998 1
.IP "7." 4
d1000 1
a1000 1
.IP "8." 4
d1009 1
a1009 1
.IP "\fB\-shared\fR" 4
d1011 1
a1011 2
.PD 0
.IP "\fB\-Bshareable\fR" 4
a1012 1
.PD
d1015 1
a1015 1
shared library if the \fB\-e\fR option is not used and there are
d1017 1
a1017 1
.IP "\fB\-\-sort\-common\fR" 4
d1019 1
a1019 1
This option tells \fBld\fR to sort the common symbols by size when it
d1021 1
a1021 1
byte symbols, then all the two byte, then all the four byte, and then
d1024 1
a1024 9
.IP "\fB\-\-sort\-section name\fR" 4
.IX Item "--sort-section name"
This option will apply \f(CW\*(C`SORT_BY_NAME\*(C'\fR to all wildcard section
patterns in the linker script.
.IP "\fB\-\-sort\-section alignment\fR" 4
.IX Item "--sort-section alignment"
This option will apply \f(CW\*(C`SORT_BY_ALIGNMENT\*(C'\fR to all wildcard section
patterns in the linker script.
.IP "\fB\-\-split\-by\-file [\fR\fIsize\fR\fB]\fR" 4
d1026 1
a1026 1
Similar to \fB\-\-split\-by\-reloc\fR but creates a new output section for
d1029 1
a1029 1
.IP "\fB\-\-split\-by\-reloc [\fR\fIcount\fR\fB]\fR" 4
d1041 1
a1041 1
.IP "\fB\-\-stats\fR" 4
d1045 1
a1045 6
.IP "\fB\-\-sysroot=\fR\fIdirectory\fR" 4
.IX Item "--sysroot=directory"
Use \fIdirectory\fR as the location of the sysroot, overriding the
configure-time default.  This option is only supported by linkers
that were configured using \fB\-\-with\-sysroot\fR.
.IP "\fB\-\-traditional\-format\fR" 4
d1047 2
a1048 2
For some targets, the output of \fBld\fR is different in some ways from
the output of some existing linker.  This switch requests \fBld\fR to
d1051 1
a1051 1
For example, on SunOS, \fBld\fR combines duplicate entries in the
d1055 1
a1055 1
trouble).  The \fB\-\-traditional\-format\fR switch tells \fBld\fR to not
d1057 1
a1057 1
.IP "\fB\-\-section\-start\fR \fIsectionname\fR\fB=\fR\fIorg\fR" 4
d1068 1
a1068 1
.IP "\fB\-Tbss\fR \fIorg\fR" 4
d1070 1
a1070 2
.PD 0
.IP "\fB\-Tdata\fR \fIorg\fR" 4
d1072 1
a1072 1
.IP "\fB\-Ttext\fR \fIorg\fR" 4
d1074 6
a1079 36
.PD
Same as \-\-section\-start, with \f(CW\*(C`.bss\*(C'\fR, \f(CW\*(C`.data\*(C'\fR or
\&\f(CW\*(C`.text\*(C'\fR as the \fIsectionname\fR.
.IP "\fB\-\-unresolved\-symbols=\fR\fImethod\fR" 4
.IX Item "--unresolved-symbols=method"
Determine how to handle unresolved symbols.  There are four possible
values for \fBmethod\fR:
.RS 4
.IP "\fBignore-all\fR" 4
.IX Item "ignore-all"
Do not report any unresolved symbols.
.IP "\fBreport-all\fR" 4
.IX Item "report-all"
Report all unresolved symbols.  This is the default.
.IP "\fBignore-in-object-files\fR" 4
.IX Item "ignore-in-object-files"
Report unresolved symbols that are contained in shared libraries, but
ignore them if they come from regular object files.
.IP "\fBignore-in-shared-libs\fR" 4
.IX Item "ignore-in-shared-libs"
Report unresolved symbols that come from regular object files, but
ignore them if they come from shared libraries.  This can be useful
when creating a dynamic binary and it is known that all the shared
libraries that it should be referencing are included on the linker's
command line.
.RE
.RS 4
.Sp
The behaviour for shared libraries on their own can also be controlled
by the \fB\-\-[no\-]allow\-shlib\-undefined\fR option.
.Sp
Normally the linker will generate an error message for each reported
unresolved symbol but the option \fB\-\-warn\-unresolved\-symbols\fR
can change this to a warning.
.RE
.IP "\fB\-\-dll\-verbose\fR" 4
d1081 1
a1081 2
.PD 0
.IP "\fB\-\-verbose\fR" 4
d1083 1
a1083 2
.PD
Display the version number for \fBld\fR and list the linker emulations
d1085 2
a1086 2
the linker script being used by the linker.
.IP "\fB\-\-version\-script=\fR\fIversion-scriptfile\fR" 4
d1090 1
a1090 1
about the version hierarchy for the library being created.  This option
d1092 1
a1092 1
.IP "\fB\-\-warn\-common\fR" 4
d1095 1
a1095 1
a symbol definition.  Unix linkers allow this somewhat sloppy practise,
d1098 1
a1098 1
Unfortunately, some C libraries use this practise, so you may get some
d1103 1
a1103 1
.IP "\fBint i = 1;\fR" 4
d1107 1
a1107 1
.IP "\fBextern int i;\fR" 4
d1112 1
a1112 1
.IP "\fBint i;\fR" 4
d1123 1
a1123 1
The \fB\-\-warn\-common\fR option can produce five kinds of warnings.
d1128 3
a1130 1
.IP "1." 4
d1135 1
a1135 1
\&        <file>(<section>): warning: common of `<symbol>'
d1137 1
a1137 1
\&        <file>(<section>): warning: defined here
d1139 1
a1139 1
.IP "2." 4
d1145 1
a1145 1
\&        <file>(<section>): warning: definition of `<symbol>'
d1147 1
a1147 1
\&        <file>(<section>): warning: common is here
d1149 1
a1149 1
.IP "3." 4
d1153 3
a1155 3
\&        <file>(<section>): warning: multiple common
\&           of `<symbol>'
\&        <file>(<section>): warning: previous common is here
d1157 1
a1157 1
.IP "4." 4
d1161 1
a1161 1
\&        <file>(<section>): warning: common of `<symbol>'
d1163 1
a1163 1
\&        <file>(<section>): warning: larger common is here
d1165 1
a1165 1
.IP "5." 4
d1171 1
a1171 1
\&        <file>(<section>): warning: common of `<symbol>'
d1173 1
a1173 1
\&        <file>(<section>): warning: smaller common is here
d1178 1
a1178 1
.IP "\fB\-\-warn\-constructors\fR" 4
d1183 1
a1183 1
.IP "\fB\-\-warn\-multiple\-gp\fR" 4
d1196 1
a1196 1
.IP "\fB\-\-warn\-once\fR" 4
d1200 1
a1200 1
.IP "\fB\-\-warn\-section\-align\fR" 4
d1207 1
a1207 13
.IP "\fB\-\-warn\-shared\-textrel\fR" 4
.IX Item "--warn-shared-textrel"
Warn if the linker adds a \s-1DT_TEXTREL\s0 to a shared object.  
.IP "\fB\-\-warn\-unresolved\-symbols\fR" 4
.IX Item "--warn-unresolved-symbols"
If the linker is going to report an unresolved symbol (see the option
\&\fB\-\-unresolved\-symbols\fR) it will normally generate an error.
This option makes it generate a warning instead.
.IP "\fB\-\-error\-unresolved\-symbols\fR" 4
.IX Item "--error-unresolved-symbols"
This restores the linker's default behaviour of generating errors when
it is reporting unresolved symbols.
.IP "\fB\-\-whole\-archive\fR" 4
d1210 1
a1210 1
\&\fB\-\-whole\-archive\fR option, include every object file in the archive
d1217 2
a1218 2
about this option, so you have to use \fB\-Wl,\-whole\-archive\fR.
Second, don't forget to use \fB\-Wl,\-no\-whole\-archive\fR after your
d1221 1
a1221 1
.IP "\fB\-\-wrap\fR \fIsymbol\fR" 4
d1237 1
a1237 1
\&        __wrap_malloc (size_t c)
d1239 1
a1239 1
\&          printf ("malloc called with %zu\en", c);
d1243 1
a1243 2
.Sp
If you link other code with this file using \fB\-\-wrap malloc\fR, then
d1249 1
a1249 1
links without the \fB\-\-wrap\fR option will succeed.  If you do this,
d1253 1
a1253 1
.IP "\fB\-\-enable\-new\-dtags\fR" 4
d1255 1
a1255 2
.PD 0
.IP "\fB\-\-disable\-new\-dtags\fR" 4
a1256 1
.PD
d1259 2
a1260 2
\&\fB\-\-enable\-new\-dtags\fR, the dynamic tags will be created as needed.
If you specify \fB\-\-disable\-new\-dtags\fR, no new dynamic tags will be
a1262 20
.Sp
Set the default size of the linker's hash tables to a prime number
close to \fInumber\fR.  Increasing this value can reduce the length of
time it takes the linker to perform its tasks, at the expense of
increasing the linker's memory requirements.  Similarly reducing this
value can reduce the memory requirements at the expense of speed.
.IP "\fB\-\-reduce\-memory\-overheads\fR" 4
.IX Item "--reduce-memory-overheads"
This option reduces memory requirements at ld runtime, at the expense of
linking speed.  This was introduced to to select the old O(n^2) algorithm
for link map file generation, rather than the new O(n) algorithm which uses
about 40% more memory for symbol storage.
.Sp
Another affect of the switch is to set the default hash table size to
1021, which again saves memory at the cost of lengthening the linker's
run time.  This is not done however if the \fB\-\-hash\-size\fR switch
has been used.
.Sp
The \fB\-\-reduce\-memory\-overheads\fR switch may be also be used to
enable other tradeoffs in future versions of the linker.
d1264 1
a1264 1
The i386 \s-1PE\s0 linker supports the \fB\-shared\fR option, which causes
d1277 1
a1277 1
.IP "\fB\-\-add\-stdcall\-alias\fR" 4
d1281 1
a1281 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-base\-file\fR \fIfile\fR" 4
d1286 1
a1286 2
[This is an i386 \s-1PE\s0 specific option]
.IP "\fB\-\-dll\fR" 4
d1289 1
a1289 1
\&\fB\-shared\fR or specify a \f(CW\*(C`LIBRARY\*(C'\fR in a given \f(CW\*(C`.def\*(C'\fR
d1291 1
a1291 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-stdcall\-fixup\fR" 4
d1293 1
a1293 2
.PD 0
.IP "\fB\-\-disable\-stdcall\-fixup\fR" 4
a1294 1
.PD
d1296 1
a1296 1
do ``fuzzy linking'' by looking for another defined symbol that differs
d1304 1
a1304 1
to be usable.  If you specify \fB\-\-enable\-stdcall\-fixup\fR, this
d1306 1
a1306 1
\&\fB\-\-disable\-stdcall\-fixup\fR, this feature is disabled and such
d1308 1
a1308 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-export\-all\-symbols\fR" 4
d1316 3
a1318 18
\&\f(CW\*(C`DllEntryPoint@@0\*(C'\fR, \f(CW\*(C`DllMainCRTStartup@@12\*(C'\fR, and 
\&\f(CW\*(C`impure_ptr\*(C'\fR will not be automatically
exported.  Also, symbols imported from other DLLs will not be 
re\-exported, nor will symbols specifying the \s-1DLL\s0's internal layout 
such as those beginning with \f(CW\*(C`_head_\*(C'\fR or ending with 
\&\f(CW\*(C`_iname\*(C'\fR.  In addition, no symbols from \f(CW\*(C`libgcc\*(C'\fR, 
\&\f(CW\*(C`libstd++\*(C'\fR, \f(CW\*(C`libmingw32\*(C'\fR, or \f(CW\*(C`crtX.o\*(C'\fR will be exported.
Symbols whose names begin with \f(CW\*(C`_\|_rtti_\*(C'\fR or \f(CW\*(C`_\|_builtin_\*(C'\fR will
not be exported, to help with \*(C+ DLLs.  Finally, there is an
extensive list of cygwin-private symbols that are not exported 
(obviously, this applies on when building DLLs for cygwin targets).
These cygwin-excludes are: \f(CW\*(C`_cygwin_dll_entry@@12\*(C'\fR, 
\&\f(CW\*(C`_cygwin_crt0_common@@8\*(C'\fR, \f(CW\*(C`_cygwin_noncygwin_dll_entry@@12\*(C'\fR,
\&\f(CW\*(C`_fmode\*(C'\fR, \f(CW\*(C`_impure_ptr\*(C'\fR, \f(CW\*(C`cygwin_attach_dll\*(C'\fR, 
\&\f(CW\*(C`cygwin_premain0\*(C'\fR, \f(CW\*(C`cygwin_premain1\*(C'\fR, \f(CW\*(C`cygwin_premain2\*(C'\fR,
\&\f(CW\*(C`cygwin_premain3\*(C'\fR, and \f(CW\*(C`environ\*(C'\fR. 
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-exclude\-symbols\fR \fIsymbol\fR\fB,\fR\fIsymbol\fR\fB,...\fR" 4
d1322 1
a1322 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-file\-alignment\fR" 4
d1327 1
a1327 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-heap\fR \fIreserve\fR" 4
d1329 1
a1329 2
.PD 0
.IP "\fB\-\-heap\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
a1330 1
.PD
d1334 1
a1334 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-image\-base\fR \fIvalue\fR" 4
d1342 1
a1342 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-kill\-at\fR" 4
d1346 1
a1346 10
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-large\-address\-aware\fR" 4
.IX Item "--large-address-aware"
If given, the appropriate bit in the ``Charateristics'' field of the \s-1COFF\s0
header is set to indicate that this executable supports virtual addresses
greater than 2 gigabytes.  This should be used in conjuction with the /3GB
or /USERVA=\fIvalue\fR megabytes switch in the ``[operating systems]''
section of the \s-1BOOT\s0.INI.  Otherwise, this bit has no effect.
[This option is specific to \s-1PE\s0 targeted ports of the linker]
.IP "\fB\-\-major\-image\-version\fR \fIvalue\fR" 4
d1348 2
a1349 3
Sets the major number of the ``image version''.  Defaults to 1.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-major\-os\-version\fR \fIvalue\fR" 4
d1351 2
a1352 3
Sets the major number of the ``os version''.  Defaults to 4.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-major\-subsystem\-version\fR \fIvalue\fR" 4
d1354 2
a1355 3
Sets the major number of the ``subsystem version''.  Defaults to 4.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-image\-version\fR \fIvalue\fR" 4
d1357 2
a1358 3
Sets the minor number of the ``image version''.  Defaults to 0.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-os\-version\fR \fIvalue\fR" 4
d1360 2
a1361 3
Sets the minor number of the ``os version''.  Defaults to 0.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-subsystem\-version\fR \fIvalue\fR" 4
d1363 2
a1364 3
Sets the minor number of the ``subsystem version''.  Defaults to 0.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-output\-def\fR \fIfile\fR" 4
d1371 1
a1371 182
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-out\-implib\fR \fIfile\fR" 4
.IX Item "--out-implib file"
The linker will create the file \fIfile\fR which will contain an
import lib corresponding to the \s-1DLL\s0 the linker is generating. This
import lib (which should be called \f(CW\*(C`*.dll.a\*(C'\fR or \f(CW\*(C`*.a\*(C'\fR
may be used to link clients against the generated \s-1DLL\s0; this behaviour
makes it possible to skip a separate \f(CW\*(C`dlltool\*(C'\fR import library
creation step.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-auto\-image\-base\fR" 4
.IX Item "--enable-auto-image-base"
Automatically choose the image base for DLLs, unless one is specified
using the \f(CW\*(C`\-\-image\-base\*(C'\fR argument.  By using a hash generated
from the dllname to create unique image bases for each \s-1DLL\s0, in-memory
collisions and relocations which can delay program execution are
avoided.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-auto\-image\-base\fR" 4
.IX Item "--disable-auto-image-base"
Do not automatically generate a unique image base.  If there is no
user-specified image base (\f(CW\*(C`\-\-image\-base\*(C'\fR) then use the platform
default.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-dll\-search\-prefix\fR \fIstring\fR" 4
.IX Item "--dll-search-prefix string"
When linking dynamically to a dll without an import library,
search for \f(CW\*(C`<string><basename>.dll\*(C'\fR in preference to 
\&\f(CW\*(C`lib<basename>.dll\*(C'\fR. This behaviour allows easy distinction
between DLLs built for the various \*(L"subplatforms\*(R": native, cygwin,
uwin, pw, etc.  For instance, cygwin DLLs typically use
\&\f(CW\*(C`\-\-dll\-search\-prefix=cyg\*(C'\fR. 
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-auto\-import\fR" 4
.IX Item "--enable-auto-import"
Do sophisticated linking of \f(CW\*(C`_symbol\*(C'\fR to \f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for 
\&\s-1DATA\s0 imports from DLLs, and create the necessary thunking symbols when 
building the import libraries with those \s-1DATA\s0 exports. Note: Use of the
\&'auto\-import' extension will cause the text section of the image file
to be made writable. This does not conform to the PE-COFF format
specification published by Microsoft.
.Sp
Using 'auto\-import' generally will 'just work' \*(-- but sometimes you may
see this message:
.Sp
"variable '<var>' can't be auto\-imported. Please read the 
documentation for ld's \f(CW\*(C`\-\-enable\-auto\-import\*(C'\fR for details."
.Sp
This message occurs when some (sub)expression accesses an address 
ultimately given by the sum of two constants (Win32 import tables only 
allow one).  Instances where this may occur include accesses to member 
fields of struct variables imported from a \s-1DLL\s0, as well as using a 
constant index into an array variable imported from a \s-1DLL\s0.  Any 
multiword variable (arrays, structs, long long, etc) may trigger
this error condition.  However, regardless of the exact data type
of the offending exported variable, ld will always detect it, issue
the warning, and exit.
.Sp
There are several ways to address this difficulty, regardless of the
data type of the exported variable:
.Sp
One way is to use \-\-enable\-runtime\-pseudo\-reloc switch. This leaves the task
of adjusting references in your client code for runtime environment, so
this method works only when runtime environment supports this feature.
.Sp
A second solution is to force one of the 'constants' to be a variable \*(-- 
that is, unknown and un-optimizable at compile time.  For arrays, 
there are two possibilities: a) make the indexee (the array's address) 
a variable, or b) make the 'constant' index a variable.  Thus:
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] --> 
\&           { volatile type *t=extern_array; t[1] }
.Ve
.Sp
or
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] --> 
\&           { volatile int t=1; extern_array[t] }
.Ve
.Sp
For structs (and most other multiword data types) the only option 
is to make the struct itself (or the long long, or the ...) variable:
.Sp
.Vb 3
\&        extern struct s extern_struct;
\&        extern_struct.field --> 
\&           { volatile struct s *t=&extern_struct; t->field }
.Ve
.Sp
or
.Sp
.Vb 3
\&        extern long long extern_ll;
\&        extern_ll -->
\&          { volatile long long * local_ll=&extern_ll; *local_ll }
.Ve
.Sp
A third method of dealing with this difficulty is to abandon
\&'auto\-import' for the offending symbol and mark it with 
\&\f(CW\*(C`_\|_declspec(dllimport)\*(C'\fR.  However, in practise that
requires using compile-time #defines to indicate whether you are
building a \s-1DLL\s0, building client code that will link to the \s-1DLL\s0, or 
merely building/linking to a static library.   In making the choice 
between the various methods of resolving the 'direct address with 
constant offset' problem, you should consider typical real-world usage:
.Sp
Original:
.Sp
.Vb 7
\&        --foo.h
\&        extern int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
.Sp
Solution 1:
.Sp
.Vb 9
\&        --foo.h
\&        extern int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          /* This workaround is for win32 and cygwin; do not "optimize" */
\&          volatile int *parr = arr;
\&          printf("%d\en",parr[1]);
\&        }
.Ve
.Sp
Solution 2:
.Sp
.Vb 14
\&        --foo.h
\&        /* Note: auto-export is assumed (no __declspec(dllexport)) */
\&        #if (defined(_WIN32) || defined(__CYGWIN__)) && \e
\&          !(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))
\&        #define FOO_IMPORT __declspec(dllimport)
\&        #else
\&        #define FOO_IMPORT
\&        #endif
\&        extern FOO_IMPORT int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
.Sp
A fourth way to avoid this problem is to re-code your 
library to use a functional interface rather than a data interface
for the offending variables (e.g. \fIset_foo()\fR and \fIget_foo()\fR accessor
functions).
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-auto\-import\fR" 4
.IX Item "--disable-auto-import"
Do not attempt to do sophisticated linking of \f(CW\*(C`_symbol\*(C'\fR to 
\&\f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for \s-1DATA\s0 imports from DLLs.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-runtime\-pseudo\-reloc\fR" 4
.IX Item "--enable-runtime-pseudo-reloc"
If your code contains expressions described in \-\-enable\-auto\-import section,
that is, \s-1DATA\s0 imports from \s-1DLL\s0 with non-zero offset, this switch will create
a vector of 'runtime pseudo relocations' which can be used by runtime
environment to adjust references to such data in your client code. 
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-runtime\-pseudo\-reloc\fR" 4
.IX Item "--disable-runtime-pseudo-reloc"
Do not create pseudo relocations for non-zero offset \s-1DATA\s0 imports from
DLLs.  This is the default.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-extra\-pe\-debug\fR" 4
.IX Item "--enable-extra-pe-debug"
Show additional debug info related to auto-import symbol thunking.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-section\-alignment\fR" 4
d1375 1
a1375 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-stack\fR \fIreserve\fR" 4
d1377 1
a1377 2
.PD 0
.IP "\fB\-\-stack\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
a1378 1
.PD
d1380 1
a1380 1
used as stack for this program.  The default is 2Mb reserved, 4K
d1382 1
a1382 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-subsystem\fR \fIwhich\fR" 4
d1384 1
a1384 2
.PD 0
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR" 4
d1386 1
a1386 1
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR\fB.\fR\fIminor\fR" 4
a1387 1
.PD
d1390 2
a1391 18
\&\f(CW\*(C`console\*(C'\fR, \f(CW\*(C`posix\*(C'\fR, and \f(CW\*(C`xbox\*(C'\fR.  You may optionally set
the subsystem version also.  Numeric values are also accepted for
\&\fIwhich\fR.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.PP
The 68HC11 and 68HC12 linkers support specific options to control the
memory bank switching mapping and trampoline code generation.
.IP "\fB\-\-no\-trampoline\fR" 4
.IX Item "--no-trampoline"
This option disables the generation of trampoline. By default a trampoline
is generated for each far function which is called using a \f(CW\*(C`jsr\*(C'\fR
instruction (this happens when a pointer to a far function is taken).
.IP "\fB\-\-bank\-window\fR \fIname\fR" 4
.IX Item "--bank-window name"
This option indicates to the linker the name of the memory region in
the \fB\s-1MEMORY\s0\fR specification that describes the memory bank window.
The definition of such region is then used by the linker to compute
paging and addresses within the memory window.
d1394 2
a1395 3
You can change the behaviour of \fBld\fR with the environment variables
\&\f(CW\*(C`GNUTARGET\*(C'\fR,
\&\f(CW\*(C`LDEMULATION\*(C'\fR and \f(CW\*(C`COLLECT_NO_DEMANGLE\*(C'\fR.
d1398 1
a1398 1
use \fB\-b\fR (or its synonym \fB\-\-format\fR).  Its value should be one
d1400 1
a1400 1
\&\f(CW\*(C`GNUTARGET\*(C'\fR in the environment, \fBld\fR uses the natural format
d1407 1
a1407 1
in the search\-list, so ambiguities are resolved in favor of convention.
d1412 1
a1412 1
available emulations with the \fB\-\-verbose\fR or \fB\-V\fR options.  If
d1421 1
a1421 1
may be overridden by the \fB\-\-demangle\fR and \fB\-\-no\-demangle\fR
d1430 1
a1430 2
Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001,
2002, 2003, 2004 Free Software Foundation, Inc.
d1437 1
a1437 1
section entitled ``\s-1GNU\s0 Free Documentation License''.
@


1.12.10.1.2.1
log
@Remove generated documentation and translation files from CVS.
@
text
@@


1.12.10.2
log
@Committing generated files for binutils 2.15.97.
@
text
@d131 1
a131 1
.TH LD 1 "2005-04-20" "binutils-2.15.97" "GNU Development Tools"
d176 1
a176 1
\&        ld \-o <output> /lib/crt0.o hello.o \-lc
d242 1
a242 1
\&          gcc \-Wl,\-\-startgroup foo.o bar.o \-Wl,\-\-endgroup
d1806 1
a1806 1
\&        extern_array[1] \-\-> 
d1814 1
a1814 1
\&        extern_array[1] \-\-> 
d1823 2
a1824 2
\&        extern_struct.field \-\-> 
\&           { volatile struct s *t=&extern_struct; t\->field }
d1831 1
a1831 1
\&        extern_ll \-\->
d1847 1
a1847 1
\&        \-\-foo.h
d1849 1
a1849 1
\&        \-\-foo.c
d1859 1
a1859 1
\&        \-\-foo.h
d1861 1
a1861 1
\&        \-\-foo.c
d1873 2
a1874 2
\&        \-\-foo.h
\&        /* Note: auto\-export is assumed (no __declspec(dllexport)) */
d1882 1
a1882 1
\&        \-\-foo.c
@


1.12.10.3
log
@Update generated files on the branch.
@
text
@d131 1
a131 1
.TH LD 1 "2005-05-02" "binutils-2.16" "GNU Development Tools"
@


1.12.10.4
log
@Update generated files for binutils 2.16.1.
@
text
@d131 1
a131 1
.TH LD 1 "2005-06-12" "binutils-2.16.1" "GNU Development Tools"
d1564 1
a1564 2
.IP "\fB\-\-hash\-size=\fR\fInumber\fR" 4
.IX Item "--hash-size=number"
@


1.12.8.1
log
@Generated files for the 2.15 branch.
@
text
@d1 2
a2 1
.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
d5 1
a5 1
.\" ========================================================================
d18 6
d31 1
d37 3
a39 3
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
d49 2
a50 2
.    ds C` ""
.    ds C' ""
d59 4
a62 4
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
d66 1
a66 1
..
d71 2
a72 2
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
d77 1
d137 1
a137 1
.\" ========================================================================
d140 2
a141 1
.TH LD 1 "2004-04-09" "binutils-2.14.91" "GNU Development Tools"
d143 1
a143 1
ld \- Using LD, the GNU linker
d146 1
a146 1
ld [\fBoptions\fR] \fIobjfile\fR ...
d149 1
a149 1
\&\fBld\fR combines a number of object and archive files, relocates
d151 1
a151 1
compiling a program is to run \fBld\fR.
d153 1
a153 1
\&\fBld\fR accepts Linker Command Language files written in
d158 1
a158 1
\&\fBld\fR entry in \f(CW\*(C`info\*(C'\fR, or the manual
d162 2
a163 2
This version of \fBld\fR uses the general purpose \s-1BFD\s0 libraries
to operate on object files. This allows \fBld\fR to read, combine, and
d171 1
a171 1
\&\fBld\fR continues executing, allowing you to identify other errors
d174 1
a174 1
The \s-1GNU\s0 linker \fBld\fR is meant to cover a broad range of situations,
d181 1
a181 1
For instance, a frequent use of \fBld\fR is to link standard Unix
d186 1
a186 1
\&        ld -o <output> /lib/crt0.o hello.o -lc
d188 1
a188 2
.PP
This tells \fBld\fR to produce a file called \fIoutput\fR as the
d193 1
a193 1
Some of the command-line options to \fBld\fR may be specified at any
d214 1
a214 1
If the linker cannot recognize the format of an object file, it will
d221 4
a224 2
specifying a script in this way merely augments the main linker script;
use the \fB\-T\fR option to replace the default linker script entirely.
d232 2
a233 2
precede the option name; for example, \fB\-trace\-symbol\fR and
\&\fB\-\-trace\-symbol\fR are equivalent.  Note\-\-\-there is one exception to
d237 1
a237 1
name to \fBmagic\fR whereas \fB\-\-omagic\fR sets the \s-1NMAGIC\s0 flag on the
d243 1
a243 1
\&\fB\-\-trace\-symbol foo\fR and \fB\-\-trace\-symbol=foo\fR are equivalent.
d247 2
a248 2
Note\-\-\-if the linker is being invoked indirectly, via a compiler driver
(e.g. \fBgcc\fR) then all the linker command line options should be
a254 1
.PP
d260 1
a260 1
.IP "\fB\-a\fR\fIkeyword\fR" 4
d267 1
a267 1
.IP "\fB\-A\fR\fIarchitecture\fR" 4
d269 1
a269 2
.PD 0
.IP "\fB\-\-architecture=\fR\fIarchitecture\fR" 4
d271 2
a272 3
.PD
In the current release of \fBld\fR, this option is useful only for the
Intel 960 family of architectures.  In that \fBld\fR configuration, the
d277 1
a277 1
Future releases of \fBld\fR may support similar functionality for
d279 1
a279 1
.IP "\fB\-b\fR \fIinput-format\fR" 4
d281 1
a281 2
.PD 0
.IP "\fB\-\-format=\fR\fIinput-format\fR" 4
d283 2
a284 3
.PD
\&\fBld\fR may be configured to support more than one kind of object
file.  If your \fBld\fR is configured this way, you can use the
d286 1
a286 1
that follow this option on the command line.  Even when \fBld\fR is
d288 1
a288 1
to specify this, as \fBld\fR should be configured to expect as a
d305 1
a305 1
.IP "\fB\-c\fR \fIMRI-commandfile\fR" 4
d307 1
a307 2
.PD 0
.IP "\fB\-\-mri\-script=\fR\fIMRI-commandfile\fR" 4
d309 1
a309 2
.PD
For compatibility with linkers produced by \s-1MRI\s0, \fBld\fR accepts script
d314 2
a315 2
scripts written in the general-purpose \fBld\fR scripting language.
If \fIMRI-cmdfile\fR does not exist, \fBld\fR looks for it in the directories
d317 1
a317 1
.IP "\fB\-d\fR" 4
d319 1
a319 2
.PD 0
.IP "\fB\-dc\fR" 4
d321 1
a321 1
.IP "\fB\-dp\fR" 4
a322 1
.PD
d327 1
a327 1
.IP "\fB\-e\fR \fIentry\fR" 4
d329 1
a329 2
.PD 0
.IP "\fB\-\-entry=\fR\fIentry\fR" 4
a330 1
.PD
d337 1
a337 1
.IP "\fB\-E\fR" 4
d339 1
a339 2
.PD 0
.IP "\fB\-\-export\-dynamic\fR" 4
a340 1
.PD
d353 1
a353 5
.Sp
You can also use the version script to control what symbols should
be added to the dynamic symbol table if the output format supports it.
See the description of \fB\-\-version\-script\fR in \f(CW@@ref\fR{\s-1VERSION\s0}.
.IP "\fB\-EB\fR" 4
d356 1
a356 1
.IP "\fB\-EL\fR" 4
d359 1
a359 1
.IP "\fB\-f\fR" 4
d361 1
a361 2
.PD 0
.IP "\fB\-\-auxiliary\fR \fIname\fR" 4
a362 1
.PD
d380 1
a380 1
.IP "\fB\-F\fR \fIname\fR" 4
d382 1
a382 2
.PD 0
.IP "\fB\-\-filter\fR \fIname\fR" 4
a383 1
.PD
d397 1
a397 1
Some older linkers used the \fB\-F\fR option throughout a compilation
d399 2
a400 3
object files.
The \s-1GNU\s0 linker uses other mechanisms for this purpose: the
\&\fB\-b\fR, \fB\-\-format\fR, \fB\-\-oformat\fR options, the 
d402 3
a404 4
environment variable.
The \s-1GNU\s0 linker will ignore the \fB\-F\fR option when not
creating an \s-1ELF\s0 shared object.
.IP "\fB\-fini\fR \fIname\fR" 4
d410 1
a410 1
.IP "\fB\-g\fR" 4
d413 1
a413 1
.IP "\fB\-G\fR\fIvalue\fR" 4
d415 1
a415 2
.PD 0
.IP "\fB\-\-gpsize=\fR\fIvalue\fR" 4
a416 1
.PD
d421 1
a421 1
.IP "\fB\-h\fR\fIname\fR" 4
d423 1
a423 2
.PD 0
.IP "\fB\-soname=\fR\fIname\fR" 4
a424 1
.PD
d430 1
a430 1
.IP "\fB\-i\fR" 4
d433 1
a433 1
.IP "\fB\-init\fR \fIname\fR" 4
d439 1
a439 1
.IP "\fB\-l\fR\fIarchive\fR" 4
d441 1
a441 2
.PD 0
.IP "\fB\-\-library=\fR\fIarchive\fR" 4
a442 1
.PD
d444 1
a444 1
option may be used any number of times.  \fBld\fR will search its
d448 1
a448 1
On systems which support shared libraries, \fBld\fR may also search for
d450 1
a450 1
and SunOS systems, \fBld\fR will search a directory for a library with
d458 1
a458 1
command line, the linker will include the appropriate file(s) from the
d462 1
a462 1
See the \fB\-(\fR option for a way to force the linker to search
d468 1
a468 1
if you are using \fBld\fR on \s-1AIX\s0, note that it is different from the
d470 1
a470 1
.IP "\fB\-L\fR\fIsearchdir\fR" 4
d472 1
a472 2
.PD 0
.IP "\fB\-\-library\-path=\fR\fIsearchdir\fR" 4
d474 2
a475 3
.PD
Add path \fIsearchdir\fR to the list of paths that \fBld\fR will search
for archive libraries and \fBld\fR control scripts.  You may use this
d479 1
a479 1
\&\fB\-L\fR options apply to all \fB\-l\fR options, regardless of the
a481 3
If \fIsearchdir\fR begins with \f(CW\*(C`=\*(C'\fR, then the \f(CW\*(C`=\*(C'\fR will be replaced
by the \fIsysroot prefix\fR, a path specified when the linker is configured.
.Sp
d483 1
a483 1
\&\fB\-L\fR) depends on which emulation mode \fBld\fR is using, and in
d489 1
a489 1
.IP "\fB\-m\fR\fIemulation\fR" 4
d492 1
a492 1
emulations with the \fB\-\-verbose\fR or \fB\-V\fR options.
d499 1
a499 1
.IP "\fB\-M\fR" 4
d501 1
a501 2
.PD 0
.IP "\fB\-\-print\-map\fR" 4
a502 1
.PD
d506 1
a506 1
.IP "*" 4
d508 1
a508 1
.IP "*" 4
d510 1
a510 1
.IP "*" 4
d516 1
a516 1
.IP "\fB\-n\fR" 4
d518 1
a518 2
.PD 0
.IP "\fB\-\-nmagic\fR" 4
a519 1
.PD
d522 1
a522 1
.IP "\fB\-N\fR" 4
d524 1
a524 2
.PD 0
.IP "\fB\-\-omagic\fR" 4
a525 1
.PD
d527 3
a529 12
not page-align the data segment, and disable linking against shared
libraries.  If the output format supports Unix style magic numbers,
mark the output as \f(CW\*(C`OMAGIC\*(C'\fR. Note: Although a writable text section
is allowed for PE-COFF targets, it does not conform to the format
specification published by Microsoft.
.IP "\fB\-\-no\-omagic\fR" 4
.IX Item "--no-omagic"
This option negates most of the effects of the \fB\-N\fR option.  It
sets the text section to be read\-only, and forces the data segment to
be page\-aligned.  Note \- this option does not enable linking against
shared libraries.  Use \fB\-Bdynamic\fR for this.
.IP "\fB\-o\fR \fIoutput\fR" 4
d531 1
a531 2
.PD 0
.IP "\fB\-\-output=\fR\fIoutput\fR" 4
d533 1
a533 2
.PD
Use \fIoutput\fR as the name for the program produced by \fBld\fR; if this
d536 1
a536 1
.IP "\fB\-O\fR \fIlevel\fR" 4
d538 1
a538 1
If \fIlevel\fR is a numeric values greater than zero \fBld\fR optimizes
d541 1
a541 1
.IP "\fB\-q\fR" 4
d543 1
a543 2
.PD 0
.IP "\fB\-\-emit\-relocs\fR" 4
a544 1
.PD
d549 1
a549 3
.Sp
This option is currently only supported on \s-1ELF\s0 platforms.
.IP "\fB\-r\fR" 4
d551 2
a552 4
.PD 0
.IP "\fB\-\-relocatable\fR" 4
.IX Item "--relocatable"
.PD
d554 1
a554 1
turn serve as input to \fBld\fR.  This is often called \fIpartial
a561 6
When an input file does not have the same format as the output file,
partial linking is only supported if that input file does not contain any
relocations.  Different output formats can have further restrictions; for
example some \f(CW\*(C`a.out\*(C'\fR\-based formats do not support partial linking
with input files in other formats at all.
.Sp
d563 1
a563 1
.IP "\fB\-R\fR \fIfilename\fR" 4
d565 1
a565 2
.PD 0
.IP "\fB\-\-just\-symbols=\fR\fIfilename\fR" 4
a566 1
.PD
d572 1
a572 1
For compatibility with other \s-1ELF\s0 linkers, if the \fB\-R\fR option is
d574 2
a575 2
the \fB\-rpath\fR option.
.IP "\fB\-s\fR" 4
d577 1
a577 2
.PD 0
.IP "\fB\-\-strip\-all\fR" 4
a578 1
.PD
d580 1
a580 1
.IP "\fB\-S\fR" 4
d582 1
a582 2
.PD 0
.IP "\fB\-\-strip\-debug\fR" 4
a583 1
.PD
d585 1
a585 1
.IP "\fB\-t\fR" 4
d587 1
a587 2
.PD 0
.IP "\fB\-\-trace\fR" 4
d589 2
a590 3
.PD
Print the names of the input files as \fBld\fR processes them.
.IP "\fB\-T\fR \fIscriptfile\fR" 4
d592 1
a592 2
.PD 0
.IP "\fB\-\-script=\fR\fIscriptfile\fR" 4
a593 1
.PD
d595 1
a595 1
\&\fBld\fR's default linker script (rather than adding to it), so
d597 7
a603 5
output file.    If \fIscriptfile\fR does not exist in
the current directory, \f(CW\*(C`ld\*(C'\fR looks for it in the directories
specified by any preceding \fB\-L\fR options.  Multiple \fB\-T\fR
options accumulate.
.IP "\fB\-u\fR \fIsymbol\fR" 4
d605 1
a605 2
.PD 0
.IP "\fB\-\-undefined=\fR\fIsymbol\fR" 4
a606 1
.PD
d612 1
a612 1
.IP "\fB\-Ur\fR" 4
d616 1
a616 1
turn serve as input to \fBld\fR.  When linking \*(C+ programs, \fB\-Ur\fR
d622 1
a622 1
.IP "\fB\-\-unique[=\fR\fI\s-1SECTION\s0\fR\fB]\fR" 4
d631 1
a631 1
.IP "\fB\-v\fR" 4
d633 1
a633 2
.PD 0
.IP "\fB\-\-version\fR" 4
d635 1
a635 1
.IP "\fB\-V\fR" 4
d637 1
a637 2
.PD
Display the version number for \fBld\fR.  The \fB\-V\fR option also
d639 1
a639 1
.IP "\fB\-x\fR" 4
d641 1
a641 2
.PD 0
.IP "\fB\-\-discard\-all\fR" 4
a642 1
.PD
d644 1
a644 1
.IP "\fB\-X\fR" 4
d646 1
a646 2
.PD 0
.IP "\fB\-\-discard\-locals\fR" 4
a647 1
.PD
d650 1
a650 1
.IP "\fB\-y\fR \fIsymbol\fR" 4
d652 1
a652 2
.PD 0
.IP "\fB\-\-trace\-symbol=\fR\fIsymbol\fR" 4
a653 1
.PD
d660 1
a660 1
.IP "\fB\-Y\fR \fIpath\fR" 4
d664 1
a664 1
.IP "\fB\-z\fR \fIkeyword\fR" 4
d666 17
a682 64
The recognized keywords are:
.RS 4
.IP "\fBcombreloc\fR" 4
.IX Item "combreloc"
Combines multiple reloc sections and sorts them to make dynamic symbol
lookup caching possible.
.IP "\fBdefs\fR" 4
.IX Item "defs"
Disallows undefined symbols in object files.  Undefined symbols in
shared libraries are still allowed.
.IP "\fBinitfirst\fR" 4
.IX Item "initfirst"
This option is only meaningful when building a shared object.
It marks the object so that its runtime initialization will occur
before the runtime initialization of any other objects brought into
the process at the same time.  Similarly the runtime finalization of
the object will occur after the runtime finalization of any other
objects.
.IP "\fBinterpose\fR" 4
.IX Item "interpose"
Marks the object that its symbol table interposes before all symbols
but the primary executable.
.IP "\fBloadfltr\fR" 4
.IX Item "loadfltr"
Marks  the object that its filters be processed immediately at
runtime.
.IP "\fBmuldefs\fR" 4
.IX Item "muldefs"
Allows multiple definitions.
.IP "\fBnocombreloc\fR" 4
.IX Item "nocombreloc"
Disables multiple reloc sections combining.
.IP "\fBnocopyreloc\fR" 4
.IX Item "nocopyreloc"
Disables production of copy relocs.
.IP "\fBnodefaultlib\fR" 4
.IX Item "nodefaultlib"
Marks the object that the search for dependencies of this object will
ignore any default library search paths.
.IP "\fBnodelete\fR" 4
.IX Item "nodelete"
Marks the object shouldn't be unloaded at runtime.
.IP "\fBnodlopen\fR" 4
.IX Item "nodlopen"
Marks the object not available to \f(CW\*(C`dlopen\*(C'\fR.
.IP "\fBnodump\fR" 4
.IX Item "nodump"
Marks the object can not be dumped by \f(CW\*(C`dldump\*(C'\fR.
.IP "\fBnow\fR" 4
.IX Item "now"
When generating an executable or shared library, mark it to tell the
dynamic linker to resolve all symbols when the program is started, or
when the shared library is linked to using dlopen, instead of
deferring function call resolution to the point when the function is
first called.
.IP "\fBorigin\fR" 4
.IX Item "origin"
Marks the object may contain \f(CW$ORIGIN\fR.
.RE
.RS 4
.Sp
Other keywords are ignored for Solaris compatibility.  
.RE
.IP "\fB\-(\fR \fIarchives\fR \fB\-)\fR" 4
d684 1
a684 2
.PD 0
.IP "\fB\-\-start\-group\fR \fIarchives\fR \fB\-\-end\-group\fR" 4
a685 1
.PD
d701 1
a701 27
.IP "\fB\-\-accept\-unknown\-input\-arch\fR" 4
.IX Item "--accept-unknown-input-arch"
.PD 0
.IP "\fB\-\-no\-accept\-unknown\-input\-arch\fR" 4
.IX Item "--no-accept-unknown-input-arch"
.PD
Tells the linker to accept input files whose architecture cannot be
recognised.  The assumption is that the user knows what they are doing
and deliberately wants to link in these unknown input files.  This was
the default behaviour of the linker, before release 2.14.  The default
behaviour from release 2.14 onwards is to reject such input files, and
so the \fB\-\-accept\-unknown\-input\-arch\fR option has been added to
restore the old behaviour.
.IP "\fB\-\-as\-needed\fR" 4
.IX Item "--as-needed"
.PD 0
.IP "\fB\-\-no\-as\-needed\fR" 4
.IX Item "--no-as-needed"
.PD
This option affects \s-1ELF\s0 \s-1DT_NEEDED\s0 tags for dynamic libraries mentioned
on the command line after the \fB\-\-as\-needed\fR option.  Normally,
the linker will add a \s-1DT_NEEDED\s0 tag for each dynamic library mentioned
on the command line, regardless of whether the library is actually
needed. \fB\-\-as\-needed\fR causes \s-1DT_NEEDED\s0 tags to only be emitted
for libraries that satisfy some reference from regular objects.
\&\fB\-\-no\-as\-needed\fR restores the default behaviour.
.IP "\fB\-assert\fR \fIkeyword\fR" 4
d704 1
a704 1
.IP "\fB\-Bdynamic\fR" 4
d706 1
a706 2
.PD 0
.IP "\fB\-dy\fR" 4
d708 1
a708 1
.IP "\fB\-call_shared\fR" 4
a709 1
.PD
d715 2
a716 2
\&\fB\-l\fR options which follow it.
.IP "\fB\-Bgroup\fR" 4
d721 3
a723 3
\&\fB\-\-unresolved\-symbols=report\-all\fR is implied.  This option is
only meaningful on \s-1ELF\s0 platforms which support shared libraries.
.IP "\fB\-Bstatic\fR" 4
d725 1
a725 2
.PD 0
.IP "\fB\-dn\fR" 4
d727 1
a727 1
.IP "\fB\-non_shared\fR" 4
d729 1
a729 1
.IP "\fB\-static\fR" 4
a730 1
.PD
d735 2
a736 3
library searching for \fB\-l\fR options which follow it.  This
option also implies \fB\-\-unresolved\-symbols=report\-all\fR.
.IP "\fB\-Bsymbolic\fR" 4
d743 1
a743 1
.IP "\fB\-\-check\-sections\fR" 4
d745 1
a745 2
.PD 0
.IP "\fB\-\-no\-check\-sections\fR" 4
a746 1
.PD
d752 2
a753 2
restored by using the command line switch \fB\-\-check\-sections\fR.
.IP "\fB\-\-cref\fR" 4
d764 1
a764 16
.IP "\fB\-\-no\-define\-common\fR" 4
.IX Item "--no-define-common"
This option inhibits the assignment of addresses to common symbols.
The script command \f(CW\*(C`INHIBIT_COMMON_ALLOCATION\*(C'\fR has the same effect.
.Sp
The \fB\-\-no\-define\-common\fR option allows decoupling
the decision to assign addresses to Common symbols from the choice
of the output file type; otherwise a non-Relocatable output type
forces assigning addresses to Common symbols.
Using \fB\-\-no\-define\-common\fR allows Common symbols that are referenced
from a shared library to be assigned addresses only in the main program.
This eliminates the unused duplicate space in the shared library,
and also prevents any possible confusion over resolving to the wrong
duplicate when there are many dynamic modules with specialized search
paths for runtime symbol resolution.
.IP "\fB\-\-defsym\fR \fIsymbol\fR\fB=\fR\fIexpression\fR" 4
d776 1
a776 1
.IP "\fB\-\-demangle[=\fR\fIstyle\fR\fB]\fR" 4
d778 1
a778 2
.PD 0
.IP "\fB\-\-no\-demangle\fR" 4
a779 1
.PD
d789 1
a789 1
.IP "\fB\-\-dynamic\-linker\fR \fIfile\fR" 4
d795 1
a795 1
.IP "\fB\-\-embedded\-relocs\fR" 4
d798 1
a798 1
generated by the \-membedded\-pic option to the \s-1GNU\s0 compiler and
d801 2
a802 2
values.  See the code in testsuite/ld\-empic for details.
.IP "\fB\-\-fatal\-warnings\fR" 4
d805 1
a805 1
.IP "\fB\-\-force\-exe\-suffix\fR" 4
d815 1
a815 1
.IP "\fB\-\-no\-gc\-sections\fR" 4
d817 1
a817 2
.PD 0
.IP "\fB\-\-gc\-sections\fR" 4
a818 1
.PD
d823 2
a824 2
specifying \fB\-\-no\-gc\-sections\fR on the command line.
.IP "\fB\-\-help\fR" 4
d827 1
a827 1
.IP "\fB\-\-target\-help\fR" 4
d830 1
a830 1
.IP "\fB\-Map\fR \fImapfile\fR" 4
d834 1
a834 1
.IP "\fB\-\-no\-keep\-memory\fR" 4
d836 2
a837 2
\&\fBld\fR normally optimizes for speed over memory usage by caching the
symbol tables of input files in memory.  This option tells \fBld\fR to
d839 1
a839 1
necessary.  This may be required if \fBld\fR runs out of memory space
d841 1
a841 1
.IP "\fB\-\-no\-undefined\fR" 4
d843 1
a843 2
.PD 0
.IP "\fB\-z defs\fR" 4
d845 4
a848 16
.PD
Report unresolved symbol references from regular object files.  This
is done even if the linker is creating a non-symbolic shared library.
The switch \fB\-\-[no\-]allow\-shlib\-undefined\fR controls the
behaviour for reporting unresolved references found in shared
libraries being linked in.  
.IP "\fB\-\-allow\-multiple\-definition\fR" 4
.IX Item "--allow-multiple-definition"
.PD 0
.IP "\fB\-z muldefs\fR" 4
.IX Item "-z muldefs"
.PD
Normally when a symbol is defined multiple times, the linker will
report a fatal error. These options allow multiple definitions and the
first definition will be used.
.IP "\fB\-\-allow\-shlib\-undefined\fR" 4
d850 11
a860 25
.PD 0
.IP "\fB\-\-no\-allow\-shlib\-undefined\fR" 4
.IX Item "--no-allow-shlib-undefined"
.PD
Allows (the default) or disallows undefined symbols in shared libraries.
This switch is similar to \fB\-\-no\-undefined\fR except that it
determines the behaviour when the undefined symbols are in a
shared library rather than a regular object file.  It does not affect
how undefined symbols in regular object files are handled.
.Sp
The reason that \fB\-\-allow\-shlib\-undefined\fR is the default is that
the shared library being specified at link time may not be the same as
the one that is available at load time, so the symbols might actually be
resolvable at load time.  Plus there are some systems, (eg BeOS) where
undefined symbols in shared libraries is normal.  (The kernel patches
them at load time to select which function is most appropriate 
for the current architecture.  This is used for example to dynamically
select an appropriate memset function).  Apparently it is also normal
for \s-1HPPA\s0 shared libraries to have undefined symbols.
.IP "\fB\-\-no\-undefined\-version\fR" 4
.IX Item "--no-undefined-version"
Normally when a symbol has an undefined version, the linker will ignore
it. This option disallows symbols with undefined version and a fatal error
will be issued instead.
.IP "\fB\-\-no\-warn\-mismatch\fR" 4
d862 1
a862 1
Normally \fBld\fR will give an error if you try to link together input
d865 1
a865 1
This option tells \fBld\fR that it should silently permit such possible
d869 1
a869 1
.IP "\fB\-\-no\-whole\-archive\fR" 4
d871 1
a871 1
Turn off the effect of the \fB\-\-whole\-archive\fR option for subsequent
d873 1
a873 1
.IP "\fB\-\-noinhibit\-exec\fR" 4
d879 1
a879 6
.IP "\fB\-nostdlib\fR" 4
.IX Item "-nostdlib"
Only search library directories explicitly specified on the
command line.  Library directories specified in linker scripts
(including linker scripts specified on the command line) are ignored.
.IP "\fB\-\-oformat\fR \fIoutput-format\fR" 4
d881 5
a885 5
\&\fBld\fR may be configured to support more than one kind of object
file.  If your \fBld\fR is configured this way, you can use the
\&\fB\-\-oformat\fR option to specify the binary format for the output
object file.  Even when \fBld\fR is configured to support alternative
object formats, you don't usually need to specify this, as \fBld\fR
d892 1
a892 13
.IP "\fB\-pie\fR" 4
.IX Item "-pie"
.PD 0
.IP "\fB\-\-pic\-executable\fR" 4
.IX Item "--pic-executable"
.PD
Create a position independent executable.  This is currently only supported on
\&\s-1ELF\s0 platforms.  Position independent executables are similar to shared
libraries in that they are relocated by the dynamic linker to the virtual
address the \s-1OS\s0 chooses for them (which can vary between invocations).  Like
normal dynamically linked executables they can be executed and symbols
defined in the executable cannot be overridden by shared libraries.
.IP "\fB\-qmagic\fR" 4
d895 1
a895 1
.IP "\fB\-Qy\fR" 4
d898 1
a898 1
.IP "\fB\-\-relax\fR" 4
d903 1
a903 1
On some platforms, the \fB\-\-relax\fR option performs global
d913 1
a913 1
On platforms where this is not supported, \fB\-\-relax\fR is accepted,
d915 1
a915 1
.IP "\fB\-\-retain\-symbols\-file\fR \fIfilename\fR" 4
d924 1
a924 1
\&\fB\-\-retain\-symbols\-file\fR does \fInot\fR discard undefined symbols,
d927 1
a927 1
You may only specify \fB\-\-retain\-symbols\-file\fR once in the command
d929 1
a929 1
.IP "\fB\-rpath\fR \fIdir\fR" 4
d932 1
a932 1
linking an \s-1ELF\s0 executable with shared objects.  All \fB\-rpath\fR
d934 1
a934 1
them to locate shared objects at runtime.  The \fB\-rpath\fR option is
d937 1
a937 1
\&\fB\-rpath\-link\fR option.  If \fB\-rpath\fR is not used when linking an
d941 1
a941 1
The \fB\-rpath\fR option may also be used on SunOS.  By default, on
d943 4
a946 4
\&\fB\-L\fR options it is given.  If a \fB\-rpath\fR option is used, the
runtime search path will be formed exclusively using the \fB\-rpath\fR
options, ignoring the \fB\-L\fR options.  This can be useful when using
gcc, which adds many \fB\-L\fR options which may be on \s-1NFS\s0 mounted
d949 1
a949 1
For compatibility with other \s-1ELF\s0 linkers, if the \fB\-R\fR option is
d951 2
a952 2
the \fB\-rpath\fR option.
.IP "\fB\-rpath\-link\fR \fI\s-1DIR\s0\fR" 4
d958 1
a958 1
When the linker encounters such a dependency when doing a non\-shared,
d961 1
a961 1
explicitly.  In such a case, the \fB\-rpath\-link\fR option
d963 1
a963 1
\&\fB\-rpath\-link\fR option may specify a sequence of directory names
d975 7
a981 7
.IP "1." 4
Any directories specified by \fB\-rpath\-link\fR options.
.IP "2." 4
Any directories specified by \fB\-rpath\fR options.  The difference
between \fB\-rpath\fR and \fB\-rpath\-link\fR is that directories
specified by \fB\-rpath\fR options are included in the executable and
used at runtime, whereas the \fB\-rpath\-link\fR option is only effective
d983 2
a984 2
.IP "3." 4
On an \s-1ELF\s0 system, if the \fB\-rpath\fR and \f(CW\*(C`rpath\-link\*(C'\fR options
d987 4
a990 4
.IP "4." 4
On SunOS, if the \fB\-rpath\fR option was not used, search any
directories specified using \fB\-L\fR options.
.IP "5." 4
d993 1
a993 1
.IP "6." 4
d998 1
a998 1
.IP "7." 4
d1000 1
a1000 1
.IP "8." 4
d1009 1
a1009 1
.IP "\fB\-shared\fR" 4
d1011 1
a1011 2
.PD 0
.IP "\fB\-Bshareable\fR" 4
a1012 1
.PD
d1015 1
a1015 1
shared library if the \fB\-e\fR option is not used and there are
d1017 1
a1017 1
.IP "\fB\-\-sort\-common\fR" 4
d1019 1
a1019 1
This option tells \fBld\fR to sort the common symbols by size when it
d1021 1
a1021 1
byte symbols, then all the two byte, then all the four byte, and then
d1024 1
a1024 1
.IP "\fB\-\-split\-by\-file [\fR\fIsize\fR\fB]\fR" 4
d1026 1
a1026 1
Similar to \fB\-\-split\-by\-reloc\fR but creates a new output section for
d1029 1
a1029 1
.IP "\fB\-\-split\-by\-reloc [\fR\fIcount\fR\fB]\fR" 4
d1041 1
a1041 1
.IP "\fB\-\-stats\fR" 4
d1045 1
a1045 1
.IP "\fB\-\-traditional\-format\fR" 4
d1047 2
a1048 2
For some targets, the output of \fBld\fR is different in some ways from
the output of some existing linker.  This switch requests \fBld\fR to
d1051 1
a1051 1
For example, on SunOS, \fBld\fR combines duplicate entries in the
d1055 1
a1055 1
trouble).  The \fB\-\-traditional\-format\fR switch tells \fBld\fR to not
d1057 1
a1057 1
.IP "\fB\-\-section\-start\fR \fIsectionname\fR\fB=\fR\fIorg\fR" 4
d1068 1
a1068 1
.IP "\fB\-Tbss\fR \fIorg\fR" 4
d1070 1
a1070 2
.PD 0
.IP "\fB\-Tdata\fR \fIorg\fR" 4
d1072 1
a1072 1
.IP "\fB\-Ttext\fR \fIorg\fR" 4
d1074 6
a1079 36
.PD
Same as \-\-section\-start, with \f(CW\*(C`.bss\*(C'\fR, \f(CW\*(C`.data\*(C'\fR or
\&\f(CW\*(C`.text\*(C'\fR as the \fIsectionname\fR.
.IP "\fB\-\-unresolved\-symbols=\fR\fImethod\fR" 4
.IX Item "--unresolved-symbols=method"
Determine how to handle unresolved symbols.  There are four possible
values for \fBmethod\fR:
.RS 4
.IP "\fBignore-all\fR" 4
.IX Item "ignore-all"
Do not report any unresolved symbols.
.IP "\fBreport-all\fR" 4
.IX Item "report-all"
Report all unresolved symbols.  This is the default.
.IP "\fBignore-in-object-files\fR" 4
.IX Item "ignore-in-object-files"
Report unresolved symbols that are contained in shared libraries, but
ignore them if they come from regular object files.
.IP "\fBignore-in-shared-libs\fR" 4
.IX Item "ignore-in-shared-libs"
Report unresolved symbols that come from regular object files, but
ignore them if they come from shared libraries.  This can be useful
when creating a dynamic binary and it is known that all the shared
libraries that it should be referencing are included on the linker's
command line.
.RE
.RS 4
.Sp
The behaviour for shared libraries on their own can also be controlled
by the \fB\-\-[no\-]allow\-shlib\-undefined\fR option.
.Sp
Normally the linker will generate an error message for each reported
unresolved symbol but the option \fB\-\-warn\-unresolved\-symbols\fR
can change this to a warning.
.RE
.IP "\fB\-\-dll\-verbose\fR" 4
d1081 1
a1081 2
.PD 0
.IP "\fB\-\-verbose\fR" 4
d1083 1
a1083 2
.PD
Display the version number for \fBld\fR and list the linker emulations
d1085 2
a1086 2
the linker script being used by the linker.
.IP "\fB\-\-version\-script=\fR\fIversion-scriptfile\fR" 4
d1090 1
a1090 1
about the version hierarchy for the library being created.  This option
d1092 1
a1092 1
.IP "\fB\-\-warn\-common\fR" 4
d1095 1
a1095 1
a symbol definition.  Unix linkers allow this somewhat sloppy practise,
d1098 1
a1098 1
Unfortunately, some C libraries use this practise, so you may get some
d1103 1
a1103 1
.IP "\fBint i = 1;\fR" 4
d1107 1
a1107 1
.IP "\fBextern int i;\fR" 4
d1112 1
a1112 1
.IP "\fBint i;\fR" 4
d1123 1
a1123 1
The \fB\-\-warn\-common\fR option can produce five kinds of warnings.
d1128 3
a1130 1
.IP "1." 4
d1135 1
a1135 1
\&        <file>(<section>): warning: common of `<symbol>'
d1137 1
a1137 1
\&        <file>(<section>): warning: defined here
d1139 1
a1139 1
.IP "2." 4
d1145 1
a1145 1
\&        <file>(<section>): warning: definition of `<symbol>'
d1147 1
a1147 1
\&        <file>(<section>): warning: common is here
d1149 1
a1149 1
.IP "3." 4
d1153 3
a1155 3
\&        <file>(<section>): warning: multiple common
\&           of `<symbol>'
\&        <file>(<section>): warning: previous common is here
d1157 1
a1157 1
.IP "4." 4
d1161 1
a1161 1
\&        <file>(<section>): warning: common of `<symbol>'
d1163 1
a1163 1
\&        <file>(<section>): warning: larger common is here
d1165 1
a1165 1
.IP "5." 4
d1171 1
a1171 1
\&        <file>(<section>): warning: common of `<symbol>'
d1173 1
a1173 1
\&        <file>(<section>): warning: smaller common is here
d1178 1
a1178 1
.IP "\fB\-\-warn\-constructors\fR" 4
d1183 1
a1183 1
.IP "\fB\-\-warn\-multiple\-gp\fR" 4
d1196 1
a1196 1
.IP "\fB\-\-warn\-once\fR" 4
d1200 1
a1200 1
.IP "\fB\-\-warn\-section\-align\fR" 4
d1207 1
a1207 10
.IP "\fB\-\-warn\-unresolved\-symbols\fR" 4
.IX Item "--warn-unresolved-symbols"
If the linker is going to report an unresolved symbol (see the option
\&\fB\-\-unresolved\-symbols\fR) it will normally generate an error.
This option makes it generate a warning instead.
.IP "\fB\-\-error\-unresolved\-symbols\fR" 4
.IX Item "--error-unresolved-symbols"
This restores the linker's default behaviour of generating errors when
it is reporting unresolved symbols.
.IP "\fB\-\-whole\-archive\fR" 4
d1210 1
a1210 1
\&\fB\-\-whole\-archive\fR option, include every object file in the archive
d1217 2
a1218 2
about this option, so you have to use \fB\-Wl,\-whole\-archive\fR.
Second, don't forget to use \fB\-Wl,\-no\-whole\-archive\fR after your
d1221 1
a1221 1
.IP "\fB\-\-wrap\fR \fIsymbol\fR" 4
d1237 1
a1237 1
\&        __wrap_malloc (size_t c)
d1239 1
a1239 1
\&          printf ("malloc called with %zu\en", c);
d1243 1
a1243 2
.Sp
If you link other code with this file using \fB\-\-wrap malloc\fR, then
d1249 1
a1249 1
links without the \fB\-\-wrap\fR option will succeed.  If you do this,
d1253 1
a1253 1
.IP "\fB\-\-enable\-new\-dtags\fR" 4
d1255 1
a1255 2
.PD 0
.IP "\fB\-\-disable\-new\-dtags\fR" 4
a1256 1
.PD
d1259 2
a1260 2
\&\fB\-\-enable\-new\-dtags\fR, the dynamic tags will be created as needed.
If you specify \fB\-\-disable\-new\-dtags\fR, no new dynamic tags will be
d1264 1
a1264 1
The i386 \s-1PE\s0 linker supports the \fB\-shared\fR option, which causes
d1277 1
a1277 1
.IP "\fB\-\-add\-stdcall\-alias\fR" 4
d1281 1
a1281 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-base\-file\fR \fIfile\fR" 4
d1286 1
a1286 2
[This is an i386 \s-1PE\s0 specific option]
.IP "\fB\-\-dll\fR" 4
d1289 1
a1289 1
\&\fB\-shared\fR or specify a \f(CW\*(C`LIBRARY\*(C'\fR in a given \f(CW\*(C`.def\*(C'\fR
d1291 1
a1291 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-stdcall\-fixup\fR" 4
d1293 1
a1293 2
.PD 0
.IP "\fB\-\-disable\-stdcall\-fixup\fR" 4
a1294 1
.PD
d1296 1
a1296 1
do ``fuzzy linking'' by looking for another defined symbol that differs
d1304 1
a1304 1
to be usable.  If you specify \fB\-\-enable\-stdcall\-fixup\fR, this
d1306 1
a1306 1
\&\fB\-\-disable\-stdcall\-fixup\fR, this feature is disabled and such
d1308 1
a1308 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-export\-all\-symbols\fR" 4
d1316 3
a1318 18
\&\f(CW\*(C`DllEntryPoint@@0\*(C'\fR, \f(CW\*(C`DllMainCRTStartup@@12\*(C'\fR, and 
\&\f(CW\*(C`impure_ptr\*(C'\fR will not be automatically
exported.  Also, symbols imported from other DLLs will not be 
re\-exported, nor will symbols specifying the \s-1DLL\s0's internal layout 
such as those beginning with \f(CW\*(C`_head_\*(C'\fR or ending with 
\&\f(CW\*(C`_iname\*(C'\fR.  In addition, no symbols from \f(CW\*(C`libgcc\*(C'\fR, 
\&\f(CW\*(C`libstd++\*(C'\fR, \f(CW\*(C`libmingw32\*(C'\fR, or \f(CW\*(C`crtX.o\*(C'\fR will be exported.
Symbols whose names begin with \f(CW\*(C`_\|_rtti_\*(C'\fR or \f(CW\*(C`_\|_builtin_\*(C'\fR will
not be exported, to help with \*(C+ DLLs.  Finally, there is an
extensive list of cygwin-private symbols that are not exported 
(obviously, this applies on when building DLLs for cygwin targets).
These cygwin-excludes are: \f(CW\*(C`_cygwin_dll_entry@@12\*(C'\fR, 
\&\f(CW\*(C`_cygwin_crt0_common@@8\*(C'\fR, \f(CW\*(C`_cygwin_noncygwin_dll_entry@@12\*(C'\fR,
\&\f(CW\*(C`_fmode\*(C'\fR, \f(CW\*(C`_impure_ptr\*(C'\fR, \f(CW\*(C`cygwin_attach_dll\*(C'\fR, 
\&\f(CW\*(C`cygwin_premain0\*(C'\fR, \f(CW\*(C`cygwin_premain1\*(C'\fR, \f(CW\*(C`cygwin_premain2\*(C'\fR,
\&\f(CW\*(C`cygwin_premain3\*(C'\fR, and \f(CW\*(C`environ\*(C'\fR. 
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-exclude\-symbols\fR \fIsymbol\fR\fB,\fR\fIsymbol\fR\fB,...\fR" 4
d1322 1
a1322 10
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-exclude\-libs\fR \fIlib\fR\fB,\fR\fIlib\fR\fB,...\fR" 4
.IX Item "--exclude-libs lib,lib,..."
Specifies a list of archive libraries from which symbols should not be automatically
exported. The library names may be delimited by commas or colons.  Specifying
\&\f(CW\*(C`\-\-exclude\-libs ALL\*(C'\fR excludes symbols in all archive libraries from
automatic export. Symbols explicitly listed in a .def file are still exported,
regardless of this option. 
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-file\-alignment\fR" 4
d1327 1
a1327 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-heap\fR \fIreserve\fR" 4
d1329 1
a1329 2
.PD 0
.IP "\fB\-\-heap\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
a1330 1
.PD
d1334 1
a1334 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-image\-base\fR \fIvalue\fR" 4
d1342 1
a1342 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-kill\-at\fR" 4
d1346 1
a1346 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-major\-image\-version\fR \fIvalue\fR" 4
d1348 2
a1349 3
Sets the major number of the ``image version''.  Defaults to 1.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-major\-os\-version\fR \fIvalue\fR" 4
d1351 2
a1352 3
Sets the major number of the ``os version''.  Defaults to 4.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-major\-subsystem\-version\fR \fIvalue\fR" 4
d1354 2
a1355 3
Sets the major number of the ``subsystem version''.  Defaults to 4.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-image\-version\fR \fIvalue\fR" 4
d1357 2
a1358 3
Sets the minor number of the ``image version''.  Defaults to 0.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-os\-version\fR \fIvalue\fR" 4
d1360 2
a1361 3
Sets the minor number of the ``os version''.  Defaults to 0.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-subsystem\-version\fR \fIvalue\fR" 4
d1363 2
a1364 3
Sets the minor number of the ``subsystem version''.  Defaults to 0.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-output\-def\fR \fIfile\fR" 4
d1371 1
a1371 182
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-out\-implib\fR \fIfile\fR" 4
.IX Item "--out-implib file"
The linker will create the file \fIfile\fR which will contain an
import lib corresponding to the \s-1DLL\s0 the linker is generating. This
import lib (which should be called \f(CW\*(C`*.dll.a\*(C'\fR or \f(CW\*(C`*.a\*(C'\fR
may be used to link clients against the generated \s-1DLL\s0; this behaviour
makes it possible to skip a separate \f(CW\*(C`dlltool\*(C'\fR import library
creation step.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-auto\-image\-base\fR" 4
.IX Item "--enable-auto-image-base"
Automatically choose the image base for DLLs, unless one is specified
using the \f(CW\*(C`\-\-image\-base\*(C'\fR argument.  By using a hash generated
from the dllname to create unique image bases for each \s-1DLL\s0, in-memory
collisions and relocations which can delay program execution are
avoided.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-auto\-image\-base\fR" 4
.IX Item "--disable-auto-image-base"
Do not automatically generate a unique image base.  If there is no
user-specified image base (\f(CW\*(C`\-\-image\-base\*(C'\fR) then use the platform
default.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-dll\-search\-prefix\fR \fIstring\fR" 4
.IX Item "--dll-search-prefix string"
When linking dynamically to a dll without an import library,
search for \f(CW\*(C`<string><basename>.dll\*(C'\fR in preference to 
\&\f(CW\*(C`lib<basename>.dll\*(C'\fR. This behaviour allows easy distinction
between DLLs built for the various \*(L"subplatforms\*(R": native, cygwin,
uwin, pw, etc.  For instance, cygwin DLLs typically use
\&\f(CW\*(C`\-\-dll\-search\-prefix=cyg\*(C'\fR. 
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-auto\-import\fR" 4
.IX Item "--enable-auto-import"
Do sophisticated linking of \f(CW\*(C`_symbol\*(C'\fR to \f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for 
\&\s-1DATA\s0 imports from DLLs, and create the necessary thunking symbols when 
building the import libraries with those \s-1DATA\s0 exports. Note: Use of the
\&'auto\-import' extension will cause the text section of the image file
to be made writable. This does not conform to the PE-COFF format
specification published by Microsoft.
.Sp
Using 'auto\-import' generally will 'just work' \*(-- but sometimes you may
see this message:
.Sp
"variable '<var>' can't be auto\-imported. Please read the 
documentation for ld's \f(CW\*(C`\-\-enable\-auto\-import\*(C'\fR for details."
.Sp
This message occurs when some (sub)expression accesses an address 
ultimately given by the sum of two constants (Win32 import tables only 
allow one).  Instances where this may occur include accesses to member 
fields of struct variables imported from a \s-1DLL\s0, as well as using a 
constant index into an array variable imported from a \s-1DLL\s0.  Any 
multiword variable (arrays, structs, long long, etc) may trigger
this error condition.  However, regardless of the exact data type
of the offending exported variable, ld will always detect it, issue
the warning, and exit.
.Sp
There are several ways to address this difficulty, regardless of the
data type of the exported variable:
.Sp
One way is to use \-\-enable\-runtime\-pseudo\-reloc switch. This leaves the task
of adjusting references in your client code for runtime environment, so
this method works only when runtime environment supports this feature.
.Sp
A second solution is to force one of the 'constants' to be a variable \*(-- 
that is, unknown and un-optimizable at compile time.  For arrays, 
there are two possibilities: a) make the indexee (the array's address) 
a variable, or b) make the 'constant' index a variable.  Thus:
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] --> 
\&           { volatile type *t=extern_array; t[1] }
.Ve
.Sp
or
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] --> 
\&           { volatile int t=1; extern_array[t] }
.Ve
.Sp
For structs (and most other multiword data types) the only option 
is to make the struct itself (or the long long, or the ...) variable:
.Sp
.Vb 3
\&        extern struct s extern_struct;
\&        extern_struct.field --> 
\&           { volatile struct s *t=&extern_struct; t->field }
.Ve
.Sp
or
.Sp
.Vb 3
\&        extern long long extern_ll;
\&        extern_ll -->
\&          { volatile long long * local_ll=&extern_ll; *local_ll }
.Ve
.Sp
A third method of dealing with this difficulty is to abandon
\&'auto\-import' for the offending symbol and mark it with 
\&\f(CW\*(C`_\|_declspec(dllimport)\*(C'\fR.  However, in practise that
requires using compile-time #defines to indicate whether you are
building a \s-1DLL\s0, building client code that will link to the \s-1DLL\s0, or 
merely building/linking to a static library.   In making the choice 
between the various methods of resolving the 'direct address with 
constant offset' problem, you should consider typical real-world usage:
.Sp
Original:
.Sp
.Vb 7
\&        --foo.h
\&        extern int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
.Sp
Solution 1:
.Sp
.Vb 9
\&        --foo.h
\&        extern int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          /* This workaround is for win32 and cygwin; do not "optimize" */
\&          volatile int *parr = arr;
\&          printf("%d\en",parr[1]);
\&        }
.Ve
.Sp
Solution 2:
.Sp
.Vb 14
\&        --foo.h
\&        /* Note: auto-export is assumed (no __declspec(dllexport)) */
\&        #if (defined(_WIN32) || defined(__CYGWIN__)) && \e
\&          !(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))
\&        #define FOO_IMPORT __declspec(dllimport)
\&        #else
\&        #define FOO_IMPORT
\&        #endif
\&        extern FOO_IMPORT int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
.Sp
A fourth way to avoid this problem is to re-code your 
library to use a functional interface rather than a data interface
for the offending variables (e.g. \fIset_foo()\fR and \fIget_foo()\fR accessor
functions).
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-auto\-import\fR" 4
.IX Item "--disable-auto-import"
Do not attempt to do sophisticated linking of \f(CW\*(C`_symbol\*(C'\fR to 
\&\f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for \s-1DATA\s0 imports from DLLs.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-runtime\-pseudo\-reloc\fR" 4
.IX Item "--enable-runtime-pseudo-reloc"
If your code contains expressions described in \-\-enable\-auto\-import section,
that is, \s-1DATA\s0 imports from \s-1DLL\s0 with non-zero offset, this switch will create
a vector of 'runtime pseudo relocations' which can be used by runtime
environment to adjust references to such data in your client code. 
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-runtime\-pseudo\-reloc\fR" 4
.IX Item "--disable-runtime-pseudo-reloc"
Do not create pseudo relocations for non-zero offset \s-1DATA\s0 imports from
DLLs.  This is the default.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-extra\-pe\-debug\fR" 4
.IX Item "--enable-extra-pe-debug"
Show additional debug info related to auto-import symbol thunking.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-section\-alignment\fR" 4
d1375 1
a1375 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-stack\fR \fIreserve\fR" 4
d1377 1
a1377 2
.PD 0
.IP "\fB\-\-stack\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
a1378 1
.PD
d1380 1
a1380 1
used as stack for this program.  The default is 2Mb reserved, 4K
d1382 1
a1382 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-subsystem\fR \fIwhich\fR" 4
d1384 1
a1384 2
.PD 0
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR" 4
d1386 1
a1386 1
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR\fB.\fR\fIminor\fR" 4
a1387 1
.PD
a1391 1
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
d1394 2
a1395 3
You can change the behaviour of \fBld\fR with the environment variables
\&\f(CW\*(C`GNUTARGET\*(C'\fR,
\&\f(CW\*(C`LDEMULATION\*(C'\fR and \f(CW\*(C`COLLECT_NO_DEMANGLE\*(C'\fR.
d1398 1
a1398 1
use \fB\-b\fR (or its synonym \fB\-\-format\fR).  Its value should be one
d1400 1
a1400 1
\&\f(CW\*(C`GNUTARGET\*(C'\fR in the environment, \fBld\fR uses the natural format
d1407 1
a1407 1
in the search\-list, so ambiguities are resolved in favor of convention.
d1412 1
a1412 1
available emulations with the \fB\-\-verbose\fR or \fB\-V\fR options.  If
d1421 1
a1421 1
may be overridden by the \fB\-\-demangle\fR and \fB\-\-no\-demangle\fR
d1430 1
a1430 2
Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001,
2002, 2003, 2004 Free Software Foundation, Inc.
d1437 1
a1437 1
section entitled ``\s-1GNU\s0 Free Documentation License''.
@


1.12.8.2
log
@Additional merges to branch for 2.15.
@
text
@d131 1
a131 1
.TH LD 1 "2004-05-07" "binutils-2.14.91" "GNU Development Tools"
@


1.12.8.3
log
@Merge or32-rtems, French translation, and ARM mapping symbol testsuite fix
to 2.15.
@
text
@d131 1
a131 1
.TH LD 1 "2004-05-07" "binutils-2.14.92" "GNU Development Tools"
@


1.12.8.4
log
@Update generated files for 2.15.
@
text
@d131 1
a131 1
.TH LD 1 "2004-05-17" "binutils-2.15" "GNU Development Tools"
@


1.12.6.1
log
@Add generated files on 2.14 branch.
@
text
@d1 2
a2 1
.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
d5 1
a5 1
.\" ========================================================================
d18 6
d31 1
d37 3
a39 3
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
d49 2
a50 2
.    ds C` ""
.    ds C' ""
d59 4
a62 4
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
d66 1
a66 1
..
d71 2
a72 2
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
d77 1
d137 1
a137 1
.\" ========================================================================
d140 2
a141 1
.TH LD 1 "2003-04-27" "binutils-2.13.90" "GNU Development Tools"
d143 1
a143 1
ld \- Using LD, the GNU linker
d146 1
a146 1
ld [\fBoptions\fR] \fIobjfile\fR ...
d149 1
a149 1
\&\fBld\fR combines a number of object and archive files, relocates
d151 1
a151 1
compiling a program is to run \fBld\fR.
d153 1
a153 1
\&\fBld\fR accepts Linker Command Language files written in
d158 1
a158 1
\&\fBld\fR entry in \f(CW\*(C`info\*(C'\fR, or the manual
d162 2
a163 2
This version of \fBld\fR uses the general purpose \s-1BFD\s0 libraries
to operate on object files. This allows \fBld\fR to read, combine, and
d171 1
a171 1
\&\fBld\fR continues executing, allowing you to identify other errors
d174 1
a174 1
The \s-1GNU\s0 linker \fBld\fR is meant to cover a broad range of situations,
d181 1
a181 1
For instance, a frequent use of \fBld\fR is to link standard Unix
d186 1
a186 1
\&        ld -o <output> /lib/crt0.o hello.o -lc
d188 1
a188 2
.PP
This tells \fBld\fR to produce a file called \fIoutput\fR as the
d193 1
a193 1
Some of the command-line options to \fBld\fR may be specified at any
d214 1
a214 1
If the linker cannot recognize the format of an object file, it will
d221 4
a224 2
specifying a script in this way merely augments the main linker script;
use the \fB\-T\fR option to replace the default linker script entirely.
d232 2
a233 2
precede the option name; for example, \fB\-trace\-symbol\fR and
\&\fB\-\-trace\-symbol\fR are equivalent.  Note\-\-\-there is one exception to
d237 1
a237 1
name to \fBmagic\fR whereas \fB\-\-omagic\fR sets the \s-1NMAGIC\s0 flag on the
d243 1
a243 1
\&\fB\-\-trace\-symbol foo\fR and \fB\-\-trace\-symbol=foo\fR are equivalent.
d247 2
a248 2
Note\-\-\-if the linker is being invoked indirectly, via a compiler driver
(e.g. \fBgcc\fR) then all the linker command line options should be
a254 1
.PP
d260 1
a260 1
.IP "\fB\-a\fR\fIkeyword\fR" 4
d267 1
a267 1
.IP "\fB\-A\fR\fIarchitecture\fR" 4
d269 1
a269 2
.PD 0
.IP "\fB\-\-architecture=\fR\fIarchitecture\fR" 4
d271 2
a272 3
.PD
In the current release of \fBld\fR, this option is useful only for the
Intel 960 family of architectures.  In that \fBld\fR configuration, the
d277 1
a277 1
Future releases of \fBld\fR may support similar functionality for
d279 1
a279 1
.IP "\fB\-b\fR \fIinput-format\fR" 4
d281 1
a281 2
.PD 0
.IP "\fB\-\-format=\fR\fIinput-format\fR" 4
d283 2
a284 3
.PD
\&\fBld\fR may be configured to support more than one kind of object
file.  If your \fBld\fR is configured this way, you can use the
d286 1
a286 1
that follow this option on the command line.  Even when \fBld\fR is
d288 1
a288 1
to specify this, as \fBld\fR should be configured to expect as a
d305 1
a305 1
.IP "\fB\-c\fR \fIMRI-commandfile\fR" 4
d307 1
a307 2
.PD 0
.IP "\fB\-\-mri\-script=\fR\fIMRI-commandfile\fR" 4
d309 1
a309 2
.PD
For compatibility with linkers produced by \s-1MRI\s0, \fBld\fR accepts script
d314 2
a315 2
scripts written in the general-purpose \fBld\fR scripting language.
If \fIMRI-cmdfile\fR does not exist, \fBld\fR looks for it in the directories
d317 1
a317 1
.IP "\fB\-d\fR" 4
d319 1
a319 2
.PD 0
.IP "\fB\-dc\fR" 4
d321 1
a321 1
.IP "\fB\-dp\fR" 4
a322 1
.PD
d327 1
a327 1
.IP "\fB\-e\fR \fIentry\fR" 4
d329 1
a329 2
.PD 0
.IP "\fB\-\-entry=\fR\fIentry\fR" 4
a330 1
.PD
d337 1
a337 1
.IP "\fB\-E\fR" 4
d339 1
a339 2
.PD 0
.IP "\fB\-\-export\-dynamic\fR" 4
a340 1
.PD
d353 1
a353 5
.Sp
You can also use the version script to control what symbols should
be added to the dynamic symbol table if the output format supports it.
See the description of \fB\-\-version\-script\fR in \f(CW@@ref\fR{\s-1VERSION\s0}.
.IP "\fB\-EB\fR" 4
d356 1
a356 1
.IP "\fB\-EL\fR" 4
d359 1
a359 1
.IP "\fB\-f\fR" 4
d361 1
a361 2
.PD 0
.IP "\fB\-\-auxiliary\fR \fIname\fR" 4
a362 1
.PD
d380 1
a380 1
.IP "\fB\-F\fR \fIname\fR" 4
d382 1
a382 2
.PD 0
.IP "\fB\-\-filter\fR \fIname\fR" 4
a383 1
.PD
d397 1
a397 1
Some older linkers used the \fB\-F\fR option throughout a compilation
d399 2
a400 3
object files.
The \s-1GNU\s0 linker uses other mechanisms for this purpose: the
\&\fB\-b\fR, \fB\-\-format\fR, \fB\-\-oformat\fR options, the 
d402 3
a404 4
environment variable.
The \s-1GNU\s0 linker will ignore the \fB\-F\fR option when not
creating an \s-1ELF\s0 shared object.
.IP "\fB\-fini\fR \fIname\fR" 4
d410 1
a410 1
.IP "\fB\-g\fR" 4
d413 1
a413 1
.IP "\fB\-G\fR\fIvalue\fR" 4
d415 1
a415 2
.PD 0
.IP "\fB\-\-gpsize=\fR\fIvalue\fR" 4
a416 1
.PD
d421 1
a421 1
.IP "\fB\-h\fR\fIname\fR" 4
d423 1
a423 2
.PD 0
.IP "\fB\-soname=\fR\fIname\fR" 4
a424 1
.PD
d430 1
a430 1
.IP "\fB\-i\fR" 4
d433 1
a433 1
.IP "\fB\-init\fR \fIname\fR" 4
d439 1
a439 1
.IP "\fB\-l\fR\fIarchive\fR" 4
d441 1
a441 2
.PD 0
.IP "\fB\-\-library=\fR\fIarchive\fR" 4
a442 1
.PD
d444 1
a444 1
option may be used any number of times.  \fBld\fR will search its
d448 1
a448 1
On systems which support shared libraries, \fBld\fR may also search for
d450 1
a450 1
and SunOS systems, \fBld\fR will search a directory for a library with
d458 1
a458 1
command line, the linker will include the appropriate file(s) from the
d462 1
a462 1
See the \fB\-(\fR option for a way to force the linker to search
d468 1
a468 1
if you are using \fBld\fR on \s-1AIX\s0, note that it is different from the
d470 1
a470 1
.IP "\fB\-L\fR\fIsearchdir\fR" 4
d472 1
a472 2
.PD 0
.IP "\fB\-\-library\-path=\fR\fIsearchdir\fR" 4
d474 2
a475 3
.PD
Add path \fIsearchdir\fR to the list of paths that \fBld\fR will search
for archive libraries and \fBld\fR control scripts.  You may use this
d479 1
a479 1
\&\fB\-L\fR options apply to all \fB\-l\fR options, regardless of the
a481 3
If \fIsearchdir\fR begins with \f(CW\*(C`=\*(C'\fR, then the \f(CW\*(C`=\*(C'\fR will be replaced
by the \fIsysroot prefix\fR, a path specified when the linker is configured.
.Sp
d483 1
a483 1
\&\fB\-L\fR) depends on which emulation mode \fBld\fR is using, and in
d489 1
a489 1
.IP "\fB\-m\fR\fIemulation\fR" 4
d492 1
a492 1
emulations with the \fB\-\-verbose\fR or \fB\-V\fR options.
d499 1
a499 1
.IP "\fB\-M\fR" 4
d501 1
a501 2
.PD 0
.IP "\fB\-\-print\-map\fR" 4
a502 1
.PD
d506 1
a506 1
.IP "\(bu" 4
d508 1
a508 1
.IP "\(bu" 4
d510 1
a510 1
.IP "\(bu" 4
d516 1
a516 1
.IP "\fB\-n\fR" 4
d518 1
a518 2
.PD 0
.IP "\fB\-\-nmagic\fR" 4
a519 1
.PD
d522 1
a522 1
.IP "\fB\-N\fR" 4
d524 1
a524 2
.PD 0
.IP "\fB\-\-omagic\fR" 4
a525 1
.PD
d527 3
a529 10
not page-align the data segment, and disable linking against shared
libraries.  If the output format supports Unix style magic numbers,
mark the output as \f(CW\*(C`OMAGIC\*(C'\fR.
.IP "\fB\-\-no\-omagic\fR" 4
.IX Item "--no-omagic"
This option negates most of the effects of the \fB\-N\fR option.  It
sets the text section to be read\-only, and forces the data segment to
be page\-aligned.  Note \- this option does not enable linking against
shared libraries.  Use \fB\-Bdynamic\fR for this.
.IP "\fB\-o\fR \fIoutput\fR" 4
d531 1
a531 2
.PD 0
.IP "\fB\-\-output=\fR\fIoutput\fR" 4
d533 1
a533 2
.PD
Use \fIoutput\fR as the name for the program produced by \fBld\fR; if this
d536 1
a536 1
.IP "\fB\-O\fR \fIlevel\fR" 4
d538 1
a538 1
If \fIlevel\fR is a numeric values greater than zero \fBld\fR optimizes
d541 1
a541 1
.IP "\fB\-q\fR" 4
d543 1
a543 2
.PD 0
.IP "\fB\-\-emit\-relocs\fR" 4
a544 1
.PD
d549 1
a549 3
.Sp
This option is currently only supported on \s-1ELF\s0 platforms.
.IP "\fB\-r\fR" 4
d551 1
a551 2
.PD 0
.IP "\fB\-\-relocateable\fR" 4
a552 1
.PD
d554 1
a554 1
turn serve as input to \fBld\fR.  This is often called \fIpartial
a561 6
When an input file does not have the same format as the output file,
partial linking is only supported if that input file does not contain any
relocations.  Different output formats can have further restrictions; for
example some \f(CW\*(C`a.out\*(C'\fR\-based formats do not support partial linking
with input files in other formats at all.
.Sp
d563 1
a563 1
.IP "\fB\-R\fR \fIfilename\fR" 4
d565 1
a565 2
.PD 0
.IP "\fB\-\-just\-symbols=\fR\fIfilename\fR" 4
a566 1
.PD
d572 1
a572 1
For compatibility with other \s-1ELF\s0 linkers, if the \fB\-R\fR option is
d574 2
a575 2
the \fB\-rpath\fR option.
.IP "\fB\-s\fR" 4
d577 1
a577 2
.PD 0
.IP "\fB\-\-strip\-all\fR" 4
a578 1
.PD
d580 1
a580 1
.IP "\fB\-S\fR" 4
d582 1
a582 2
.PD 0
.IP "\fB\-\-strip\-debug\fR" 4
a583 1
.PD
d585 1
a585 1
.IP "\fB\-t\fR" 4
d587 1
a587 2
.PD 0
.IP "\fB\-\-trace\fR" 4
d589 2
a590 3
.PD
Print the names of the input files as \fBld\fR processes them.
.IP "\fB\-T\fR \fIscriptfile\fR" 4
d592 1
a592 2
.PD 0
.IP "\fB\-\-script=\fR\fIscriptfile\fR" 4
a593 1
.PD
d595 1
a595 1
\&\fBld\fR's default linker script (rather than adding to it), so
d597 7
a603 5
output file.    If \fIscriptfile\fR does not exist in
the current directory, \f(CW\*(C`ld\*(C'\fR looks for it in the directories
specified by any preceding \fB\-L\fR options.  Multiple \fB\-T\fR
options accumulate.
.IP "\fB\-u\fR \fIsymbol\fR" 4
d605 1
a605 2
.PD 0
.IP "\fB\-\-undefined=\fR\fIsymbol\fR" 4
a606 1
.PD
d612 1
a612 1
.IP "\fB\-Ur\fR" 4
d616 1
a616 1
turn serve as input to \fBld\fR.  When linking \*(C+ programs, \fB\-Ur\fR
d622 1
a622 1
.IP "\fB\-\-unique[=\fR\fI\s-1SECTION\s0\fR\fB]\fR" 4
d631 1
a631 1
.IP "\fB\-v\fR" 4
d633 1
a633 2
.PD 0
.IP "\fB\-\-version\fR" 4
d635 1
a635 1
.IP "\fB\-V\fR" 4
d637 1
a637 2
.PD
Display the version number for \fBld\fR.  The \fB\-V\fR option also
d639 1
a639 1
.IP "\fB\-x\fR" 4
d641 1
a641 2
.PD 0
.IP "\fB\-\-discard\-all\fR" 4
a642 1
.PD
d644 1
a644 1
.IP "\fB\-X\fR" 4
d646 1
a646 2
.PD 0
.IP "\fB\-\-discard\-locals\fR" 4
a647 1
.PD
d650 1
a650 1
.IP "\fB\-y\fR \fIsymbol\fR" 4
d652 1
a652 2
.PD 0
.IP "\fB\-\-trace\-symbol=\fR\fIsymbol\fR" 4
a653 1
.PD
d660 1
a660 1
.IP "\fB\-Y\fR \fIpath\fR" 4
d664 1
a664 1
.IP "\fB\-z\fR \fIkeyword\fR" 4
d668 1
a668 3
\&\f(CW\*(C`nodump\*(C'\fR, \f(CW\*(C`now\*(C'\fR, \f(CW\*(C`origin\*(C'\fR, \f(CW\*(C`combreloc\*(C'\fR, \f(CW\*(C`nocombreloc\*(C'\fR 
and \f(CW\*(C`nocopyreloc\*(C'\fR.
The other keywords are
d682 1
a682 6
\&\f(CW\*(C`muldefs\*(C'\fR allows multiple definitions.
\&\f(CW\*(C`combreloc\*(C'\fR combines multiple reloc sections and sorts them
to make dynamic symbol lookup caching possible.
\&\f(CW\*(C`nocombreloc\*(C'\fR disables multiple reloc sections combining.
\&\f(CW\*(C`nocopyreloc\*(C'\fR disables production of copy relocs.
.IP "\fB\-(\fR \fIarchives\fR \fB\-)\fR" 4
d684 1
a684 2
.PD 0
.IP "\fB\-\-start\-group\fR \fIarchives\fR \fB\-\-end\-group\fR" 4
a685 1
.PD
d701 1
a701 14
.IP "\fB\-\-accept\-unknown\-input\-arch\fR" 4
.IX Item "--accept-unknown-input-arch"
.PD 0
.IP "\fB\-\-no\-accept\-unknown\-input\-arch\fR" 4
.IX Item "--no-accept-unknown-input-arch"
.PD
Tells the linker to accept input files whose architecture cannot be
recognised.  The assumption is that the user knows what they are doing
and deliberately wants to link in these unknown input files.  This was
the default behaviour of the linker, before release 2.14.  The default
behaviour from release 2.14 onwards is to reject such input files, and
so the \fB\-\-accept\-unknown\-input\-arch\fR option has been added to
restore the old behaviour.
.IP "\fB\-assert\fR \fIkeyword\fR" 4
d704 1
a704 1
.IP "\fB\-Bdynamic\fR" 4
d706 1
a706 2
.PD 0
.IP "\fB\-dy\fR" 4
d708 1
a708 1
.IP "\fB\-call_shared\fR" 4
a709 1
.PD
d715 2
a716 2
\&\fB\-l\fR options which follow it.
.IP "\fB\-Bgroup\fR" 4
d721 1
a721 1
\&\fB\-\-no\-undefined\fR is implied.  This option is only meaningful on \s-1ELF\s0
d723 1
a723 1
.IP "\fB\-Bstatic\fR" 4
d725 1
a725 2
.PD 0
.IP "\fB\-dn\fR" 4
d727 1
a727 1
.IP "\fB\-non_shared\fR" 4
d729 1
a729 1
.IP "\fB\-static\fR" 4
a730 1
.PD
d735 2
a736 2
library searching for \fB\-l\fR options which follow it.
.IP "\fB\-Bsymbolic\fR" 4
d743 1
a743 1
.IP "\fB\-\-check\-sections\fR" 4
d745 1
a745 2
.PD 0
.IP "\fB\-\-no\-check\-sections\fR" 4
a746 1
.PD
d752 2
a753 2
restored by using the command line switch \fB\-\-check\-sections\fR.
.IP "\fB\-\-cref\fR" 4
d764 1
a764 16
.IP "\fB\-\-no\-define\-common\fR" 4
.IX Item "--no-define-common"
This option inhibits the assignment of addresses to common symbols.
The script command \f(CW\*(C`INHIBIT_COMMON_ALLOCATION\*(C'\fR has the same effect.
.Sp
The \fB\-\-no\-define\-common\fR option allows decoupling
the decision to assign addresses to Common symbols from the choice
of the output file type; otherwise a non-Relocatable output type
forces assigning addresses to Common symbols.
Using \fB\-\-no\-define\-common\fR allows Common symbols that are referenced
from a shared library to be assigned addresses only in the main program.
This eliminates the unused duplicate space in the shared library,
and also prevents any possible confusion over resolving to the wrong
duplicate when there are many dynamic modules with specialized search
paths for runtime symbol resolution.
.IP "\fB\-\-defsym\fR \fIsymbol\fR\fB=\fR\fIexpression\fR" 4
d776 1
a776 1
.IP "\fB\-\-demangle[=\fR\fIstyle\fR\fB]\fR" 4
d778 1
a778 2
.PD 0
.IP "\fB\-\-no\-demangle\fR" 4
a779 1
.PD
d789 1
a789 1
.IP "\fB\-\-dynamic\-linker\fR \fIfile\fR" 4
d795 1
a795 1
.IP "\fB\-\-embedded\-relocs\fR" 4
d798 1
a798 1
generated by the \-membedded\-pic option to the \s-1GNU\s0 compiler and
d801 2
a802 2
values.  See the code in testsuite/ld\-empic for details.
.IP "\fB\-\-fatal\-warnings\fR" 4
d805 1
a805 1
.IP "\fB\-\-force\-exe\-suffix\fR" 4
d815 1
a815 1
.IP "\fB\-\-no\-gc\-sections\fR" 4
d817 1
a817 2
.PD 0
.IP "\fB\-\-gc\-sections\fR" 4
a818 1
.PD
d823 2
a824 2
specifying \fB\-\-no\-gc\-sections\fR on the command line.
.IP "\fB\-\-help\fR" 4
d827 1
a827 1
.IP "\fB\-\-target\-help\fR" 4
d830 1
a830 1
.IP "\fB\-Map\fR \fImapfile\fR" 4
d834 1
a834 1
.IP "\fB\-\-no\-keep\-memory\fR" 4
d836 2
a837 2
\&\fBld\fR normally optimizes for speed over memory usage by caching the
symbol tables of input files in memory.  This option tells \fBld\fR to
d839 1
a839 1
necessary.  This may be required if \fBld\fR runs out of memory space
d841 1
a841 1
.IP "\fB\-\-no\-undefined\fR" 4
d843 1
a843 2
.PD 0
.IP "\fB\-z defs\fR" 4
a844 1
.PD
d846 3
a848 14
are allowed and left to be resolved by the runtime loader.  This option
disallows such undefined symbols if they come from regular object
files.  The switch \fB\-\-no\-allow\-shlib\-undefined\fR controls the
behaviour for shared objects being linked into the shared library.
.IP "\fB\-\-allow\-multiple\-definition\fR" 4
.IX Item "--allow-multiple-definition"
.PD 0
.IP "\fB\-z muldefs\fR" 4
.IX Item "-z muldefs"
.PD
Normally when a symbol is defined multiple times, the linker will
report a fatal error. These options allow multiple definitions and the
first definition will be used.
.IP "\fB\-\-allow\-shlib\-undefined\fR" 4
d850 11
a860 26
.PD 0
.IP "\fB\-\-no\-allow\-shlib\-undefined\fR" 4
.IX Item "--no-allow-shlib-undefined"
.PD
Allow (the default) or disallow undefined symbols in shared objects.
The setting of this switch overrides \fB\-\-no\-undefined\fR where
shared objects are concerned.  Thus if \fB\-\-no\-undefined\fR is set
but \fB\-\-no\-allow\-shlib\-undefined\fR is not, the net result will be
that undefined symbols in regular object files will trigger an error,
but undefined symbols in shared objects will be ignored.
.Sp
The reason that \fB\-\-allow\-shlib\-undefined\fR is the default is that
the shared object being specified at link time may not be the same one
that is available at load time, so the symbols might actually be
resolvable at load time.  Plus there are some systems, (eg BeOS) where
undefined symbols in shared libraries is normal since the kernel
patches them at load time to select which function is most appropriate
for the current architecture. eg. to dynamically select an appropriate
memset function.  Apparently it is also normal for \s-1HPPA\s0 shared
libraries to have undefined symbols.
.IP "\fB\-\-no\-undefined\-version\fR" 4
.IX Item "--no-undefined-version"
Normally when a symbol has an undefined version, the linker will ignore
it. This option disallows symbols with undefined version and a fatal error
will be issued instead.
.IP "\fB\-\-no\-warn\-mismatch\fR" 4
d862 1
a862 1
Normally \fBld\fR will give an error if you try to link together input
d865 1
a865 1
This option tells \fBld\fR that it should silently permit such possible
d869 1
a869 1
.IP "\fB\-\-no\-whole\-archive\fR" 4
d871 1
a871 1
Turn off the effect of the \fB\-\-whole\-archive\fR option for subsequent
d873 1
a873 1
.IP "\fB\-\-noinhibit\-exec\fR" 4
d879 1
a879 6
.IP "\fB\-nostdlib\fR" 4
.IX Item "-nostdlib"
Only search library directories explicitly specified on the
command line.  Library directories specified in linker scripts
(including linker scripts specified on the command line) are ignored.
.IP "\fB\-\-oformat\fR \fIoutput-format\fR" 4
d881 5
a885 5
\&\fBld\fR may be configured to support more than one kind of object
file.  If your \fBld\fR is configured this way, you can use the
\&\fB\-\-oformat\fR option to specify the binary format for the output
object file.  Even when \fBld\fR is configured to support alternative
object formats, you don't usually need to specify this, as \fBld\fR
d892 1
a892 1
.IP "\fB\-qmagic\fR" 4
d895 1
a895 1
.IP "\fB\-Qy\fR" 4
d898 1
a898 1
.IP "\fB\-\-relax\fR" 4
d903 1
a903 1
On some platforms, the \fB\-\-relax\fR option performs global
d913 1
a913 1
On platforms where this is not supported, \fB\-\-relax\fR is accepted,
d915 1
a915 1
.IP "\fB\-\-retain\-symbols\-file\fR \fIfilename\fR" 4
d924 1
a924 1
\&\fB\-\-retain\-symbols\-file\fR does \fInot\fR discard undefined symbols,
d927 1
a927 1
You may only specify \fB\-\-retain\-symbols\-file\fR once in the command
d929 1
a929 1
.IP "\fB\-rpath\fR \fIdir\fR" 4
d932 1
a932 1
linking an \s-1ELF\s0 executable with shared objects.  All \fB\-rpath\fR
d934 1
a934 1
them to locate shared objects at runtime.  The \fB\-rpath\fR option is
d937 1
a937 1
\&\fB\-rpath\-link\fR option.  If \fB\-rpath\fR is not used when linking an
d941 1
a941 1
The \fB\-rpath\fR option may also be used on SunOS.  By default, on
d943 4
a946 4
\&\fB\-L\fR options it is given.  If a \fB\-rpath\fR option is used, the
runtime search path will be formed exclusively using the \fB\-rpath\fR
options, ignoring the \fB\-L\fR options.  This can be useful when using
gcc, which adds many \fB\-L\fR options which may be on \s-1NFS\s0 mounted
d949 1
a949 1
For compatibility with other \s-1ELF\s0 linkers, if the \fB\-R\fR option is
d951 2
a952 2
the \fB\-rpath\fR option.
.IP "\fB\-rpath\-link\fR \fI\s-1DIR\s0\fR" 4
d958 1
a958 1
When the linker encounters such a dependency when doing a non\-shared,
d961 1
a961 1
explicitly.  In such a case, the \fB\-rpath\-link\fR option
d963 1
a963 1
\&\fB\-rpath\-link\fR option may specify a sequence of directory names
d975 7
a981 7
.IP "1." 4
Any directories specified by \fB\-rpath\-link\fR options.
.IP "2." 4
Any directories specified by \fB\-rpath\fR options.  The difference
between \fB\-rpath\fR and \fB\-rpath\-link\fR is that directories
specified by \fB\-rpath\fR options are included in the executable and
used at runtime, whereas the \fB\-rpath\-link\fR option is only effective
d983 2
a984 2
.IP "3." 4
On an \s-1ELF\s0 system, if the \fB\-rpath\fR and \f(CW\*(C`rpath\-link\*(C'\fR options
d987 4
a990 4
.IP "4." 4
On SunOS, if the \fB\-rpath\fR option was not used, search any
directories specified using \fB\-L\fR options.
.IP "5." 4
d993 1
a993 1
.IP "6." 4
d998 1
a998 1
.IP "7." 4
d1000 1
a1000 1
.IP "8." 4
d1009 1
a1009 1
.IP "\fB\-shared\fR" 4
d1011 1
a1011 2
.PD 0
.IP "\fB\-Bshareable\fR" 4
a1012 1
.PD
d1015 1
a1015 1
shared library if the \fB\-e\fR option is not used and there are
d1017 1
a1017 1
.IP "\fB\-\-sort\-common\fR" 4
d1019 1
a1019 1
This option tells \fBld\fR to sort the common symbols by size when it
d1021 1
a1021 1
byte symbols, then all the two byte, then all the four byte, and then
d1024 1
a1024 1
.IP "\fB\-\-split\-by\-file [\fR\fIsize\fR\fB]\fR" 4
d1026 1
a1026 1
Similar to \fB\-\-split\-by\-reloc\fR but creates a new output section for
d1029 1
a1029 1
.IP "\fB\-\-split\-by\-reloc [\fR\fIcount\fR\fB]\fR" 4
d1041 1
a1041 1
.IP "\fB\-\-stats\fR" 4
d1045 1
a1045 1
.IP "\fB\-\-traditional\-format\fR" 4
d1047 2
a1048 2
For some targets, the output of \fBld\fR is different in some ways from
the output of some existing linker.  This switch requests \fBld\fR to
d1051 1
a1051 1
For example, on SunOS, \fBld\fR combines duplicate entries in the
d1055 1
a1055 1
trouble).  The \fB\-\-traditional\-format\fR switch tells \fBld\fR to not
d1057 1
a1057 1
.IP "\fB\-\-section\-start\fR \fIsectionname\fR\fB=\fR\fIorg\fR" 4
d1068 1
a1068 1
.IP "\fB\-Tbss\fR \fIorg\fR" 4
d1070 1
a1070 2
.PD 0
.IP "\fB\-Tdata\fR \fIorg\fR" 4
d1072 1
a1072 1
.IP "\fB\-Ttext\fR \fIorg\fR" 4
d1074 6
a1079 4
.PD
Same as \-\-section\-start, with \f(CW\*(C`.bss\*(C'\fR, \f(CW\*(C`.data\*(C'\fR or
\&\f(CW\*(C`.text\*(C'\fR as the \fIsectionname\fR.
.IP "\fB\-\-dll\-verbose\fR" 4
d1081 1
a1081 2
.PD 0
.IP "\fB\-\-verbose\fR" 4
d1083 1
a1083 2
.PD
Display the version number for \fBld\fR and list the linker emulations
d1085 2
a1086 2
the linker script being used by the linker.
.IP "\fB\-\-version\-script=\fR\fIversion-scriptfile\fR" 4
d1090 1
a1090 1
about the version hierarchy for the library being created.  This option
d1092 1
a1092 1
.IP "\fB\-\-warn\-common\fR" 4
d1103 1
a1103 1
.IP "\fBint i = 1;\fR" 4
d1107 1
a1107 1
.IP "\fBextern int i;\fR" 4
d1112 1
a1112 1
.IP "\fBint i;\fR" 4
d1123 1
a1123 1
The \fB\-\-warn\-common\fR option can produce five kinds of warnings.
d1128 3
a1130 1
.IP "1." 4
d1135 1
a1135 1
\&        <file>(<section>): warning: common of `<symbol>'
d1137 1
a1137 1
\&        <file>(<section>): warning: defined here
d1139 1
a1139 1
.IP "2." 4
d1145 1
a1145 1
\&        <file>(<section>): warning: definition of `<symbol>'
d1147 1
a1147 1
\&        <file>(<section>): warning: common is here
d1149 1
a1149 1
.IP "3." 4
d1153 3
a1155 3
\&        <file>(<section>): warning: multiple common
\&           of `<symbol>'
\&        <file>(<section>): warning: previous common is here
d1157 1
a1157 1
.IP "4." 4
d1161 1
a1161 1
\&        <file>(<section>): warning: common of `<symbol>'
d1163 1
a1163 1
\&        <file>(<section>): warning: larger common is here
d1165 1
a1165 1
.IP "5." 4
d1171 1
a1171 1
\&        <file>(<section>): warning: common of `<symbol>'
d1173 1
a1173 1
\&        <file>(<section>): warning: smaller common is here
d1178 1
a1178 1
.IP "\fB\-\-warn\-constructors\fR" 4
d1183 1
a1183 1
.IP "\fB\-\-warn\-multiple\-gp\fR" 4
d1196 1
a1196 1
.IP "\fB\-\-warn\-once\fR" 4
d1200 1
a1200 1
.IP "\fB\-\-warn\-section\-align\fR" 4
d1207 1
a1207 1
.IP "\fB\-\-whole\-archive\fR" 4
d1210 1
a1210 1
\&\fB\-\-whole\-archive\fR option, include every object file in the archive
d1217 2
a1218 2
about this option, so you have to use \fB\-Wl,\-whole\-archive\fR.
Second, don't forget to use \fB\-Wl,\-no\-whole\-archive\fR after your
d1221 1
a1221 1
.IP "\fB\-\-wrap\fR \fIsymbol\fR" 4
d1243 1
a1243 2
.Sp
If you link other code with this file using \fB\-\-wrap malloc\fR, then
d1249 1
a1249 1
links without the \fB\-\-wrap\fR option will succeed.  If you do this,
d1253 1
a1253 1
.IP "\fB\-\-enable\-new\-dtags\fR" 4
d1255 1
a1255 2
.PD 0
.IP "\fB\-\-disable\-new\-dtags\fR" 4
a1256 1
.PD
d1259 2
a1260 2
\&\fB\-\-enable\-new\-dtags\fR, the dynamic tags will be created as needed.
If you specify \fB\-\-disable\-new\-dtags\fR, no new dynamic tags will be
d1264 1
a1264 1
The i386 \s-1PE\s0 linker supports the \fB\-shared\fR option, which causes
d1277 1
a1277 1
.IP "\fB\-\-add\-stdcall\-alias\fR" 4
d1281 1
a1281 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-base\-file\fR \fIfile\fR" 4
d1286 1
a1286 2
[This is an i386 \s-1PE\s0 specific option]
.IP "\fB\-\-dll\fR" 4
d1289 1
a1289 1
\&\fB\-shared\fR or specify a \f(CW\*(C`LIBRARY\*(C'\fR in a given \f(CW\*(C`.def\*(C'\fR
d1291 1
a1291 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-stdcall\-fixup\fR" 4
d1293 1
a1293 2
.PD 0
.IP "\fB\-\-disable\-stdcall\-fixup\fR" 4
a1294 1
.PD
d1296 1
a1296 1
do ``fuzzy linking'' by looking for another defined symbol that differs
d1304 1
a1304 1
to be usable.  If you specify \fB\-\-enable\-stdcall\-fixup\fR, this
d1306 1
a1306 1
\&\fB\-\-disable\-stdcall\-fixup\fR, this feature is disabled and such
d1308 1
a1308 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-export\-all\-symbols\fR" 4
d1316 3
a1318 18
\&\f(CW\*(C`DllEntryPoint@@0\*(C'\fR, \f(CW\*(C`DllMainCRTStartup@@12\*(C'\fR, and 
\&\f(CW\*(C`impure_ptr\*(C'\fR will not be automatically
exported.  Also, symbols imported from other DLLs will not be 
re\-exported, nor will symbols specifying the \s-1DLL\s0's internal layout 
such as those beginning with \f(CW\*(C`_head_\*(C'\fR or ending with 
\&\f(CW\*(C`_iname\*(C'\fR.  In addition, no symbols from \f(CW\*(C`libgcc\*(C'\fR, 
\&\f(CW\*(C`libstd++\*(C'\fR, \f(CW\*(C`libmingw32\*(C'\fR, or \f(CW\*(C`crtX.o\*(C'\fR will be exported.
Symbols whose names begin with \f(CW\*(C`_\|_rtti_\*(C'\fR or \f(CW\*(C`_\|_builtin_\*(C'\fR will
not be exported, to help with \*(C+ DLLs.  Finally, there is an
extensive list of cygwin-private symbols that are not exported 
(obviously, this applies on when building DLLs for cygwin targets).
These cygwin-excludes are: \f(CW\*(C`_cygwin_dll_entry@@12\*(C'\fR, 
\&\f(CW\*(C`_cygwin_crt0_common@@8\*(C'\fR, \f(CW\*(C`_cygwin_noncygwin_dll_entry@@12\*(C'\fR,
\&\f(CW\*(C`_fmode\*(C'\fR, \f(CW\*(C`_impure_ptr\*(C'\fR, \f(CW\*(C`cygwin_attach_dll\*(C'\fR, 
\&\f(CW\*(C`cygwin_premain0\*(C'\fR, \f(CW\*(C`cygwin_premain1\*(C'\fR, \f(CW\*(C`cygwin_premain2\*(C'\fR,
\&\f(CW\*(C`cygwin_premain3\*(C'\fR, and \f(CW\*(C`environ\*(C'\fR. 
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-exclude\-symbols\fR \fIsymbol\fR\fB,\fR\fIsymbol\fR\fB,...\fR" 4
d1322 1
a1322 10
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-exclude\-libs\fR \fIlib\fR\fB,\fR\fIlib\fR\fB,...\fR" 4
.IX Item "--exclude-libs lib,lib,..."
Specifies a list of archive libraries from which symbols should not be automatically
exported. The library names may be delimited by commas or colons.  Specifying
\&\f(CW\*(C`\-\-exclude\-libs ALL\*(C'\fR excludes symbols in all archive libraries from
automatic export. Symbols explicitly listed in a .def file are still exported,
regardless of this option. 
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-file\-alignment\fR" 4
d1327 1
a1327 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-heap\fR \fIreserve\fR" 4
d1329 1
a1329 2
.PD 0
.IP "\fB\-\-heap\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
a1330 1
.PD
d1334 1
a1334 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-image\-base\fR \fIvalue\fR" 4
d1342 1
a1342 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-kill\-at\fR" 4
d1346 1
a1346 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-major\-image\-version\fR \fIvalue\fR" 4
d1348 2
a1349 3
Sets the major number of the ``image version''.  Defaults to 1.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-major\-os\-version\fR \fIvalue\fR" 4
d1351 2
a1352 3
Sets the major number of the ``os version''.  Defaults to 4.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-major\-subsystem\-version\fR \fIvalue\fR" 4
d1354 2
a1355 3
Sets the major number of the ``subsystem version''.  Defaults to 4.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-image\-version\fR \fIvalue\fR" 4
d1357 2
a1358 3
Sets the minor number of the ``image version''.  Defaults to 0.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-os\-version\fR \fIvalue\fR" 4
d1360 2
a1361 3
Sets the minor number of the ``os version''.  Defaults to 0.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-minor\-subsystem\-version\fR \fIvalue\fR" 4
d1363 2
a1364 3
Sets the minor number of the ``subsystem version''.  Defaults to 0.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-output\-def\fR \fIfile\fR" 4
d1371 1
a1371 177
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-out\-implib\fR \fIfile\fR" 4
.IX Item "--out-implib file"
The linker will create the file \fIfile\fR which will contain an
import lib corresponding to the \s-1DLL\s0 the linker is generating. This
import lib (which should be called \f(CW\*(C`*.dll.a\*(C'\fR or \f(CW\*(C`*.a\*(C'\fR
may be used to link clients against the generated \s-1DLL\s0; this behavior
makes it possible to skip a separate \f(CW\*(C`dlltool\*(C'\fR import library
creation step.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-auto\-image\-base\fR" 4
.IX Item "--enable-auto-image-base"
Automatically choose the image base for DLLs, unless one is specified
using the \f(CW\*(C`\-\-image\-base\*(C'\fR argument.  By using a hash generated
from the dllname to create unique image bases for each \s-1DLL\s0, in-memory
collisions and relocations which can delay program execution are
avoided.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-auto\-image\-base\fR" 4
.IX Item "--disable-auto-image-base"
Do not automatically generate a unique image base.  If there is no
user-specified image base (\f(CW\*(C`\-\-image\-base\*(C'\fR) then use the platform
default.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-dll\-search\-prefix\fR \fIstring\fR" 4
.IX Item "--dll-search-prefix string"
When linking dynamically to a dll without an import library,
search for \f(CW\*(C`<string><basename>.dll\*(C'\fR in preference to 
\&\f(CW\*(C`lib<basename>.dll\*(C'\fR. This behavior allows easy distinction
between DLLs built for the various \*(L"subplatforms\*(R": native, cygwin,
uwin, pw, etc.  For instance, cygwin DLLs typically use
\&\f(CW\*(C`\-\-dll\-search\-prefix=cyg\*(C'\fR. 
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-auto\-import\fR" 4
.IX Item "--enable-auto-import"
Do sophisticated linking of \f(CW\*(C`_symbol\*(C'\fR to \f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for 
\&\s-1DATA\s0 imports from DLLs, and create the necessary thunking symbols when 
building the import libraries with those \s-1DATA\s0 exports.  This generally 
will 'just work' \*(-- but sometimes you may see this message:
.Sp
"variable '<var>' can't be auto\-imported. Please read the 
documentation for ld's \f(CW\*(C`\-\-enable\-auto\-import\*(C'\fR for details."
.Sp
This message occurs when some (sub)expression accesses an address 
ultimately given by the sum of two constants (Win32 import tables only 
allow one).  Instances where this may occur include accesses to member 
fields of struct variables imported from a \s-1DLL\s0, as well as using a 
constant index into an array variable imported from a \s-1DLL\s0.  Any 
multiword variable (arrays, structs, long long, etc) may trigger
this error condition.  However, regardless of the exact data type
of the offending exported variable, ld will always detect it, issue
the warning, and exit.
.Sp
There are several ways to address this difficulty, regardless of the
data type of the exported variable:
.Sp
One way is to use \-\-enable\-runtime\-pseudo\-reloc switch. This leaves the task
of adjusting references in your client code for runtime environment, so
this method works only when runtime environtment supports this feature.
.Sp
A second solution is to force one of the 'constants' to be a variable \*(-- 
that is, unknown and un-optimizable at compile time.  For arrays, 
there are two possibilities: a) make the indexee (the array's address) 
a variable, or b) make the 'constant' index a variable.  Thus:
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] --> 
\&           { volatile type *t=extern_array; t[1] }
.Ve
.Sp
or
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] --> 
\&           { volatile int t=1; extern_array[t] }
.Ve
.Sp
For structs (and most other multiword data types) the only option 
is to make the struct itself (or the long long, or the ...) variable:
.Sp
.Vb 3
\&        extern struct s extern_struct;
\&        extern_struct.field --> 
\&           { volatile struct s *t=&extern_struct; t->field }
.Ve
.Sp
or
.Sp
.Vb 3
\&        extern long long extern_ll;
\&        extern_ll -->
\&          { volatile long long * local_ll=&extern_ll; *local_ll }
.Ve
.Sp
A third method of dealing with this difficulty is to abandon
\&'auto\-import' for the offending symbol and mark it with 
\&\f(CW\*(C`_\|_declspec(dllimport)\*(C'\fR.  However, in practice that
requires using compile-time #defines to indicate whether you are
building a \s-1DLL\s0, building client code that will link to the \s-1DLL\s0, or 
merely building/linking to a static library.   In making the choice 
between the various methods of resolving the 'direct address with 
constant offset' problem, you should consider typical real-world usage:
.Sp
Original:
.Sp
.Vb 7
\&        --foo.h
\&        extern int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
.Sp
Solution 1:
.Sp
.Vb 9
\&        --foo.h
\&        extern int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          /* This workaround is for win32 and cygwin; do not "optimize" */
\&          volatile int *parr = arr;
\&          printf("%d\en",parr[1]);
\&        }
.Ve
.Sp
Solution 2:
.Sp
.Vb 14
\&        --foo.h
\&        /* Note: auto-export is assumed (no __declspec(dllexport)) */
\&        #if (defined(_WIN32) || defined(__CYGWIN__)) && \e
\&          !(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))
\&        #define FOO_IMPORT __declspec(dllimport)
\&        #else
\&        #define FOO_IMPORT
\&        #endif
\&        extern FOO_IMPORT int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
.Sp
A fourth way to avoid this problem is to re-code your 
library to use a functional interface rather than a data interface
for the offending variables (e.g. \fIset_foo()\fR and \fIget_foo()\fR accessor
functions).
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-auto\-import\fR" 4
.IX Item "--disable-auto-import"
Do not attempt to do sophisticalted linking of \f(CW\*(C`_symbol\*(C'\fR to 
\&\f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for \s-1DATA\s0 imports from DLLs.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-runtime\-pseudo\-reloc\fR" 4
.IX Item "--enable-runtime-pseudo-reloc"
If your code contains expressions described in \-\-enable\-auto\-import section,
that is, \s-1DATA\s0 imports from \s-1DLL\s0 with non-zero offset, this switch will create
a vector of 'runtime pseudo relocations' which can be used by runtime
environment to adjust references to such data in your client code. 
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-disable\-runtime\-pseudo\-reloc\fR" 4
.IX Item "--disable-runtime-pseudo-reloc"
Do not create pseudo relocations for non-zero offset \s-1DATA\s0 imports from
DLLs.  This is the default.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-enable\-extra\-pe\-debug\fR" 4
.IX Item "--enable-extra-pe-debug"
Show additional debug info related to auto-import symbol thunking.
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-section\-alignment\fR" 4
d1375 1
a1375 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-stack\fR \fIreserve\fR" 4
d1377 1
a1377 2
.PD 0
.IP "\fB\-\-stack\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
a1378 1
.PD
d1380 1
a1380 1
used as stack for this program.  The default is 2Mb reserved, 4K
d1382 1
a1382 2
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
.IP "\fB\-\-subsystem\fR \fIwhich\fR" 4
d1384 1
a1384 2
.PD 0
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR" 4
d1386 1
a1386 1
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR\fB.\fR\fIminor\fR" 4
a1387 1
.PD
a1391 1
[This option is specific to the i386 \s-1PE\s0 targeted port of the linker]
d1394 2
a1395 3
You can change the behavior of \fBld\fR with the environment variables
\&\f(CW\*(C`GNUTARGET\*(C'\fR,
\&\f(CW\*(C`LDEMULATION\*(C'\fR and \f(CW\*(C`COLLECT_NO_DEMANGLE\*(C'\fR.
d1398 1
a1398 1
use \fB\-b\fR (or its synonym \fB\-\-format\fR).  Its value should be one
d1400 1
a1400 1
\&\f(CW\*(C`GNUTARGET\*(C'\fR in the environment, \fBld\fR uses the natural format
d1407 1
a1407 1
in the search\-list, so ambiguities are resolved in favor of convention.
d1412 1
a1412 1
available emulations with the \fB\-\-verbose\fR or \fB\-V\fR options.  If
d1421 1
a1421 1
may be overridden by the \fB\-\-demangle\fR and \fB\-\-no\-demangle\fR
d1430 1
a1430 2
Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001,
2002, 2003 Free Software Foundation, Inc.
d1437 1
a1437 1
section entitled ``\s-1GNU\s0 Free Documentation License''.
@


1.12.6.2
log
@Update generated files on the release branch.
@
text
@d131 1
a131 1
.TH LD 1 "2003-05-05" "binutils-2.13.91" "GNU Development Tools"
@


1.12.6.3
log
@Update generated files.
@
text
@d131 1
a131 1
.TH LD 1 "2003-06-02" "binutils-2.13.92" "GNU Development Tools"
@


1.12.6.4
log
@Update generated files for binutils 2.14.
@
text
@d131 1
a131 1
.TH LD 1 "2003-06-12" "binutils-2.14" "GNU Development Tools"
@


1.12.4.1
log
@Add generated files.
@
text
@d1 2
a2 1
.\" Automatically generated by Pod::Man v1.3, Pod::Parser v1.13
d5 1
a5 1
.\" ========================================================================
d18 6
d37 3
a39 3
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
d49 2
a50 2
.    ds C` ""
.    ds C' ""
d59 4
a62 4
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
d66 1
a66 1
..
d71 2
a72 2
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
d77 1
d137 1
a137 1
.\" ========================================================================
d140 1
a140 1
.TH LD 1 "2002-08-05" "binutils-2.12.91" "GNU Development Tools"
d146 1
a146 1
ld [\fBoptions\fR] \fIobjfile\fR ...
d149 1
a149 1
\&\fBld\fR combines a number of object and archive files, relocates
d151 1
a151 1
compiling a program is to run \fBld\fR.
d153 1
a153 1
\&\fBld\fR accepts Linker Command Language files written in
d158 1
a158 1
\&\fBld\fR entry in \f(CW\*(C`info\*(C'\fR, or the manual
d162 2
a163 2
This version of \fBld\fR uses the general purpose \s-1BFD\s0 libraries
to operate on object files. This allows \fBld\fR to read, combine, and
d171 1
a171 1
\&\fBld\fR continues executing, allowing you to identify other errors
d174 1
a174 1
The \s-1GNU\s0 linker \fBld\fR is meant to cover a broad range of situations,
d181 1
a181 1
For instance, a frequent use of \fBld\fR is to link standard Unix
d186 1
a186 1
\&        ld -o <output> /lib/crt0.o hello.o -lc
d188 1
a188 1
This tells \fBld\fR to produce a file called \fIoutput\fR as the
d193 1
a193 1
Some of the command-line options to \fBld\fR may be specified at any
d221 4
a224 2
specifying a script in this way merely augments the main linker script;
use the \fB\-T\fR option to replace the default linker script entirely.
d232 2
a233 2
precede the option name; for example, \fB\-trace\-symbol\fR and
\&\fB\-\-trace\-symbol\fR are equivalent.  Note \- there is one exception to
d237 1
a237 1
name to \fBmagic\fR whereas \fB\-\-omagic\fR sets the \s-1NMAGIC\s0 flag on the
d243 1
a243 1
\&\fB\-\-trace\-symbol foo\fR and \fB\-\-trace\-symbol=foo\fR are equivalent.
d260 1
a260 1
.IP "\fB\-a\fR\fIkeyword\fR" 4
d267 1
a267 1
.IP "\fB\-A\fR\fIarchitecture\fR" 4
d269 1
a269 2
.PD 0
.IP "\fB\-\-architecture=\fR\fIarchitecture\fR" 4
d271 2
a272 3
.PD
In the current release of \fBld\fR, this option is useful only for the
Intel 960 family of architectures.  In that \fBld\fR configuration, the
d277 1
a277 1
Future releases of \fBld\fR may support similar functionality for
d279 1
a279 1
.IP "\fB\-b\fR \fIinput-format\fR" 4
d281 1
a281 2
.PD 0
.IP "\fB\-\-format=\fR\fIinput-format\fR" 4
d283 2
a284 3
.PD
\&\fBld\fR may be configured to support more than one kind of object
file.  If your \fBld\fR is configured this way, you can use the
d286 1
a286 1
that follow this option on the command line.  Even when \fBld\fR is
d288 1
a288 1
to specify this, as \fBld\fR should be configured to expect as a
d305 1
a305 1
.IP "\fB\-c\fR \fIMRI-commandfile\fR" 4
d307 1
a307 2
.PD 0
.IP "\fB\-\-mri\-script=\fR\fIMRI-commandfile\fR" 4
d309 1
a309 2
.PD
For compatibility with linkers produced by \s-1MRI\s0, \fBld\fR accepts script
d314 2
a315 2
scripts written in the general-purpose \fBld\fR scripting language.
If \fIMRI-cmdfile\fR does not exist, \fBld\fR looks for it in the directories
d317 1
a317 1
.IP "\fB\-d\fR" 4
d319 1
a319 2
.PD 0
.IP "\fB\-dc\fR" 4
d321 1
a321 1
.IP "\fB\-dp\fR" 4
a322 1
.PD
d327 1
a327 1
.IP "\fB\-e\fR \fIentry\fR" 4
d329 1
a329 2
.PD 0
.IP "\fB\-\-entry=\fR\fIentry\fR" 4
a330 1
.PD
d337 1
a337 1
.IP "\fB\-E\fR" 4
d339 1
a339 2
.PD 0
.IP "\fB\-\-export\-dynamic\fR" 4
a340 1
.PD
d353 1
a353 5
.Sp
You can also use the version script to control what symbols should
be added to the dynamic symbol table if the output format supports it.
See the description of \fB\-\-version\-script\fR in \f(CW@@ref\fR{\s-1VERSION\s0}.
.IP "\fB\-EB\fR" 4
d356 1
a356 1
.IP "\fB\-EL\fR" 4
d359 1
a359 1
.IP "\fB\-f\fR" 4
d361 1
a361 2
.PD 0
.IP "\fB\-\-auxiliary\fR \fIname\fR" 4
a362 1
.PD
d380 1
a380 1
.IP "\fB\-F\fR \fIname\fR" 4
d382 1
a382 2
.PD 0
.IP "\fB\-\-filter\fR \fIname\fR" 4
a383 1
.PD
d397 1
a397 1
Some older linkers used the \fB\-F\fR option throughout a compilation
d400 1
a400 1
purpose: the \fB\-b\fR, \fB\-\-format\fR, \fB\-\-oformat\fR options, the
d402 1
a402 1
environment variable.  The \s-1GNU\s0 linker will ignore the \fB\-F\fR
d404 1
a404 1
.IP "\fB\-fini\fR \fIname\fR" 4
d410 1
a410 1
.IP "\fB\-g\fR" 4
d413 1
a413 1
.IP "\fB\-G\fR\fIvalue\fR" 4
d415 1
a415 2
.PD 0
.IP "\fB\-\-gpsize=\fR\fIvalue\fR" 4
a416 1
.PD
d421 1
a421 1
.IP "\fB\-h\fR\fIname\fR" 4
d423 1
a423 2
.PD 0
.IP "\fB\-soname=\fR\fIname\fR" 4
a424 1
.PD
d430 1
a430 1
.IP "\fB\-i\fR" 4
d433 1
a433 1
.IP "\fB\-init\fR \fIname\fR" 4
d439 1
a439 1
.IP "\fB\-l\fR\fIarchive\fR" 4
d441 1
a441 2
.PD 0
.IP "\fB\-\-library=\fR\fIarchive\fR" 4
a442 1
.PD
d444 1
a444 1
option may be used any number of times.  \fBld\fR will search its
d448 1
a448 1
On systems which support shared libraries, \fBld\fR may also search for
d450 1
a450 1
and SunOS systems, \fBld\fR will search a directory for a library with
d458 1
a458 1
command line, the linker will include the appropriate file(s) from the
d462 1
a462 1
See the \fB\-(\fR option for a way to force the linker to search
d468 1
a468 1
if you are using \fBld\fR on \s-1AIX\s0, note that it is different from the
d470 1
a470 1
.IP "\fB\-L\fR\fIsearchdir\fR" 4
d472 1
a472 2
.PD 0
.IP "\fB\-\-library\-path=\fR\fIsearchdir\fR" 4
d474 2
a475 3
.PD
Add path \fIsearchdir\fR to the list of paths that \fBld\fR will search
for archive libraries and \fBld\fR control scripts.  You may use this
d479 1
a479 1
\&\fB\-L\fR options apply to all \fB\-l\fR options, regardless of the
d483 1
a483 1
\&\fB\-L\fR) depends on which emulation mode \fBld\fR is using, and in
d489 1
a489 1
.IP "\fB\-m\fR\fIemulation\fR" 4
d492 1
a492 1
emulations with the \fB\-\-verbose\fR or \fB\-V\fR options.
d499 1
a499 1
.IP "\fB\-M\fR" 4
d501 1
a501 2
.PD 0
.IP "\fB\-\-print\-map\fR" 4
a502 1
.PD
d506 1
a506 1
.IP "\(bu" 4
d508 1
a508 1
.IP "\(bu" 4
d510 1
a510 1
.IP "\(bu" 4
d516 1
a516 1
.IP "\fB\-n\fR" 4
d518 1
a518 2
.PD 0
.IP "\fB\-\-nmagic\fR" 4
a519 1
.PD
d522 1
a522 1
.IP "\fB\-N\fR" 4
d524 1
a524 2
.PD 0
.IP "\fB\-\-omagic\fR" 4
a525 1
.PD
d529 1
a529 1
.IP "\fB\-o\fR \fIoutput\fR" 4
d531 1
a531 2
.PD 0
.IP "\fB\-\-output=\fR\fIoutput\fR" 4
d533 1
a533 2
.PD
Use \fIoutput\fR as the name for the program produced by \fBld\fR; if this
d536 1
a536 1
.IP "\fB\-O\fR \fIlevel\fR" 4
d538 1
a538 1
If \fIlevel\fR is a numeric values greater than zero \fBld\fR optimizes
d541 1
a541 1
.IP "\fB\-q\fR" 4
d543 1
a543 2
.PD 0
.IP "\fB\-\-emit\-relocs\fR" 4
a544 1
.PD
d549 1
a549 3
.Sp
This option is currently only supported on \s-1ELF\s0 platforms.
.IP "\fB\-r\fR" 4
d551 1
a551 2
.PD 0
.IP "\fB\-\-relocateable\fR" 4
a552 1
.PD
d554 1
a554 1
turn serve as input to \fBld\fR.  This is often called \fIpartial
a561 6
When an input file does not have the same format as the output file,
partial linking is only supported if that input file does not contain any
relocations.  Different output formats can have further restrictions; for
example some \f(CW\*(C`a.out\*(C'\fR\-based formats do not support partial linking
with input files in other formats at all.
.Sp
d563 1
a563 1
.IP "\fB\-R\fR \fIfilename\fR" 4
d565 1
a565 2
.PD 0
.IP "\fB\-\-just\-symbols=\fR\fIfilename\fR" 4
a566 1
.PD
d572 1
a572 1
For compatibility with other \s-1ELF\s0 linkers, if the \fB\-R\fR option is
d574 2
a575 2
the \fB\-rpath\fR option.
.IP "\fB\-s\fR" 4
d577 1
a577 2
.PD 0
.IP "\fB\-\-strip\-all\fR" 4
a578 1
.PD
d580 1
a580 1
.IP "\fB\-S\fR" 4
d582 1
a582 2
.PD 0
.IP "\fB\-\-strip\-debug\fR" 4
a583 1
.PD
d585 1
a585 1
.IP "\fB\-t\fR" 4
d587 1
a587 2
.PD 0
.IP "\fB\-\-trace\fR" 4
d589 2
a590 3
.PD
Print the names of the input files as \fBld\fR processes them.
.IP "\fB\-T\fR \fIscriptfile\fR" 4
d592 1
a592 2
.PD 0
.IP "\fB\-\-script=\fR\fIscriptfile\fR" 4
a593 1
.PD
d595 1
a595 1
\&\fBld\fR's default linker script (rather than adding to it), so
d597 7
a603 5
output file.    If \fIscriptfile\fR does not exist in
the current directory, \f(CW\*(C`ld\*(C'\fR looks for it in the directories
specified by any preceding \fB\-L\fR options.  Multiple \fB\-T\fR
options accumulate.
.IP "\fB\-u\fR \fIsymbol\fR" 4
d605 1
a605 2
.PD 0
.IP "\fB\-\-undefined=\fR\fIsymbol\fR" 4
a606 1
.PD
d612 1
a612 1
.IP "\fB\-Ur\fR" 4
d616 1
a616 1
turn serve as input to \fBld\fR.  When linking \*(C+ programs, \fB\-Ur\fR
d622 1
a622 1
.IP "\fB\-\-unique[=\fR\fI\s-1SECTION\s0\fR\fB]\fR" 4
d631 1
a631 1
.IP "\fB\-v\fR" 4
d633 1
a633 2
.PD 0
.IP "\fB\-\-version\fR" 4
d635 1
a635 1
.IP "\fB\-V\fR" 4
d637 1
a637 2
.PD
Display the version number for \fBld\fR.  The \fB\-V\fR option also
d639 1
a639 1
.IP "\fB\-x\fR" 4
d641 1
a641 2
.PD 0
.IP "\fB\-\-discard\-all\fR" 4
a642 1
.PD
d644 1
a644 1
.IP "\fB\-X\fR" 4
d646 1
a646 2
.PD 0
.IP "\fB\-\-discard\-locals\fR" 4
a647 1
.PD
d650 1
a650 1
.IP "\fB\-y\fR \fIsymbol\fR" 4
d652 1
a652 2
.PD 0
.IP "\fB\-\-trace\-symbol=\fR\fIsymbol\fR" 4
a653 1
.PD
d660 1
a660 1
.IP "\fB\-Y\fR \fIpath\fR" 4
d664 1
a664 1
.IP "\fB\-z\fR \fIkeyword\fR" 4
d668 1
a668 3
\&\f(CW\*(C`nodump\*(C'\fR, \f(CW\*(C`now\*(C'\fR, \f(CW\*(C`origin\*(C'\fR, \f(CW\*(C`combreloc\*(C'\fR, \f(CW\*(C`nocombreloc\*(C'\fR 
and \f(CW\*(C`nocopyreloc\*(C'\fR.
The other keywords are
d682 1
a682 6
\&\f(CW\*(C`muldefs\*(C'\fR allows multiple definitions.
\&\f(CW\*(C`combreloc\*(C'\fR combines multiple reloc sections and sorts them
to make dynamic symbol lookup caching possible.
\&\f(CW\*(C`nocombreloc\*(C'\fR disables multiple reloc sections combining.
\&\f(CW\*(C`nocopyreloc\*(C'\fR disables production of copy relocs.
.IP "\fB\-(\fR \fIarchives\fR \fB\-)\fR" 4
d684 1
a684 2
.PD 0
.IP "\fB\-\-start\-group\fR \fIarchives\fR \fB\-\-end\-group\fR" 4
a685 1
.PD
d701 1
a701 1
.IP "\fB\-assert\fR \fIkeyword\fR" 4
d704 1
a704 1
.IP "\fB\-Bdynamic\fR" 4
d706 1
a706 2
.PD 0
.IP "\fB\-dy\fR" 4
d708 1
a708 1
.IP "\fB\-call_shared\fR" 4
a709 1
.PD
d715 2
a716 2
\&\fB\-l\fR options which follow it.
.IP "\fB\-Bgroup\fR" 4
d721 1
a721 1
\&\fB\-\-no\-undefined\fR is implied.  This option is only meaningful on \s-1ELF\s0
d723 1
a723 1
.IP "\fB\-Bstatic\fR" 4
d725 1
a725 2
.PD 0
.IP "\fB\-dn\fR" 4
d727 1
a727 1
.IP "\fB\-non_shared\fR" 4
d729 1
a729 1
.IP "\fB\-static\fR" 4
a730 1
.PD
d735 2
a736 2
library searching for \fB\-l\fR options which follow it.
.IP "\fB\-Bsymbolic\fR" 4
d743 1
a743 1
.IP "\fB\-\-check\-sections\fR" 4
d745 1
a745 2
.PD 0
.IP "\fB\-\-no\-check\-sections\fR" 4
a746 1
.PD
d752 2
a753 2
restored by using the command line switch \fB\-\-check\-sections\fR.
.IP "\fB\-\-cref\fR" 4
d764 1
a764 16
.IP "\fB\-\-no\-define\-common\fR" 4
.IX Item "--no-define-common"
This option inhibits the assignment of addresses to common symbols.
The script command \f(CW\*(C`INHIBIT_COMMON_ALLOCATION\*(C'\fR has the same effect.
.Sp
The \fB\-\-no\-define\-common\fR option allows decoupling
the decision to assign addresses to Common symbols from the choice
of the output file type; otherwise a non-Relocatable output type
forces assigning addresses to Common symbols.
Using \fB\-\-no\-define\-common\fR allows Common symbols that are referenced
from a shared library to be assigned addresses only in the main program.
This eliminates the unused duplicate space in the shared library,
and also prevents any possible confusion over resolving to the wrong
duplicate when there are many dynamic modules with specialized search
paths for runtime symbol resolution.
.IP "\fB\-\-defsym\fR \fIsymbol\fR\fB=\fR\fIexpression\fR" 4
d776 1
a776 1
.IP "\fB\-\-demangle[=\fR\fIstyle\fR\fB]\fR" 4
d778 1
a778 2
.PD 0
.IP "\fB\-\-no\-demangle\fR" 4
a779 1
.PD
d789 1
a789 1
.IP "\fB\-\-dynamic\-linker\fR \fIfile\fR" 4
d795 1
a795 1
.IP "\fB\-\-embedded\-relocs\fR" 4
d798 1
a798 1
generated by the \-membedded\-pic option to the \s-1GNU\s0 compiler and
d801 2
a802 2
values.  See the code in testsuite/ld\-empic for details.
.IP "\fB\-\-fatal\-warnings\fR" 4
d805 1
a805 1
.IP "\fB\-\-force\-exe\-suffix\fR" 4
d815 1
a815 1
.IP "\fB\-\-no\-gc\-sections\fR" 4
d817 1
a817 2
.PD 0
.IP "\fB\-\-gc\-sections\fR" 4
a818 1
.PD
d823 2
a824 2
specifying \fB\-\-no\-gc\-sections\fR on the command line.
.IP "\fB\-\-help\fR" 4
d827 1
a827 1
.IP "\fB\-\-target\-help\fR" 4
d830 1
a830 1
.IP "\fB\-Map\fR \fImapfile\fR" 4
d834 1
a834 1
.IP "\fB\-\-no\-keep\-memory\fR" 4
d836 2
a837 2
\&\fBld\fR normally optimizes for speed over memory usage by caching the
symbol tables of input files in memory.  This option tells \fBld\fR to
d839 1
a839 1
necessary.  This may be required if \fBld\fR runs out of memory space
d841 1
a841 1
.IP "\fB\-\-no\-undefined\fR" 4
d843 1
a843 2
.PD 0
.IP "\fB\-z defs\fR" 4
a844 1
.PD
d848 1
a848 10
.IP "\fB\-\-allow\-multiple\-definition\fR" 4
.IX Item "--allow-multiple-definition"
.PD 0
.IP "\fB\-z muldefs\fR" 4
.IX Item "-z muldefs"
.PD
Normally when a symbol is defined multiple times, the linker will
report a fatal error. These options allow multiple definitions and the
first definition will be used.
.IP "\fB\-\-allow\-shlib\-undefined\fR" 4
d850 1
a850 1
Allow undefined symbols in shared objects even  when \-\-no\-undefined is
d860 1
a860 1
.IP "\fB\-\-no\-warn\-mismatch\fR" 4
d862 1
a862 1
Normally \fBld\fR will give an error if you try to link together input
d865 1
a865 1
This option tells \fBld\fR that it should silently permit such possible
d869 1
a869 1
.IP "\fB\-\-no\-whole\-archive\fR" 4
d871 1
a871 1
Turn off the effect of the \fB\-\-whole\-archive\fR option for subsequent
d873 1
a873 1
.IP "\fB\-\-noinhibit\-exec\fR" 4
d879 1
a879 6
.IP "\fB\-nostdlib\fR" 4
.IX Item "-nostdlib"
Only search library directories explicitly specified on the
command line.  Library directories specified in linker scripts
(including linker scripts specified on the command line) are ignored.
.IP "\fB\-\-oformat\fR \fIoutput-format\fR" 4
d881 5
a885 5
\&\fBld\fR may be configured to support more than one kind of object
file.  If your \fBld\fR is configured this way, you can use the
\&\fB\-\-oformat\fR option to specify the binary format for the output
object file.  Even when \fBld\fR is configured to support alternative
object formats, you don't usually need to specify this, as \fBld\fR
d892 1
a892 1
.IP "\fB\-qmagic\fR" 4
d895 1
a895 1
.IP "\fB\-Qy\fR" 4
d898 1
a898 1
.IP "\fB\-\-relax\fR" 4
d903 1
a903 1
On some platforms, the \fB\-\-relax\fR option performs global
d913 1
a913 1
On platforms where this is not supported, \fB\-\-relax\fR is accepted,
d915 1
a915 1
.IP "\fB\-\-retain\-symbols\-file\fR \fIfilename\fR" 4
d924 1
a924 1
\&\fB\-\-retain\-symbols\-file\fR does \fInot\fR discard undefined symbols,
d927 1
a927 1
You may only specify \fB\-\-retain\-symbols\-file\fR once in the command
d929 1
a929 1
.IP "\fB\-rpath\fR \fIdir\fR" 4
d932 1
a932 1
linking an \s-1ELF\s0 executable with shared objects.  All \fB\-rpath\fR
d934 1
a934 1
them to locate shared objects at runtime.  The \fB\-rpath\fR option is
d937 1
a937 1
\&\fB\-rpath\-link\fR option.  If \fB\-rpath\fR is not used when linking an
d941 1
a941 1
The \fB\-rpath\fR option may also be used on SunOS.  By default, on
d943 4
a946 4
\&\fB\-L\fR options it is given.  If a \fB\-rpath\fR option is used, the
runtime search path will be formed exclusively using the \fB\-rpath\fR
options, ignoring the \fB\-L\fR options.  This can be useful when using
gcc, which adds many \fB\-L\fR options which may be on \s-1NFS\s0 mounted
d949 1
a949 1
For compatibility with other \s-1ELF\s0 linkers, if the \fB\-R\fR option is
d951 2
a952 2
the \fB\-rpath\fR option.
.IP "\fB\-rpath\-link\fR \fI\s-1DIR\s0\fR" 4
d958 1
a958 1
When the linker encounters such a dependency when doing a non\-shared,
d961 1
a961 1
explicitly.  In such a case, the \fB\-rpath\-link\fR option
d963 1
a963 1
\&\fB\-rpath\-link\fR option may specify a sequence of directory names
d975 7
a981 7
.IP "1." 4
Any directories specified by \fB\-rpath\-link\fR options.
.IP "2." 4
Any directories specified by \fB\-rpath\fR options.  The difference
between \fB\-rpath\fR and \fB\-rpath\-link\fR is that directories
specified by \fB\-rpath\fR options are included in the executable and
used at runtime, whereas the \fB\-rpath\-link\fR option is only effective
d983 2
a984 2
.IP "3." 4
On an \s-1ELF\s0 system, if the \fB\-rpath\fR and \f(CW\*(C`rpath\-link\*(C'\fR options
d987 4
a990 4
.IP "4." 4
On SunOS, if the \fB\-rpath\fR option was not used, search any
directories specified using \fB\-L\fR options.
.IP "5." 4
d993 1
a993 1
.IP "6." 4
d998 1
a998 1
.IP "7." 4
d1000 1
a1000 1
.IP "8." 4
d1009 1
a1009 1
.IP "\fB\-shared\fR" 4
d1011 1
a1011 2
.PD 0
.IP "\fB\-Bshareable\fR" 4
a1012 1
.PD
d1015 1
a1015 1
shared library if the \fB\-e\fR option is not used and there are
d1017 1
a1017 1
.IP "\fB\-\-sort\-common\fR" 4
d1019 1
a1019 1
This option tells \fBld\fR to sort the common symbols by size when it
d1021 1
a1021 1
byte symbols, then all the two byte, then all the four byte, and then
d1024 1
a1024 1
.IP "\fB\-\-split\-by\-file [\fR\fIsize\fR\fB]\fR" 4
d1026 1
a1026 1
Similar to \fB\-\-split\-by\-reloc\fR but creates a new output section for
d1029 1
a1029 1
.IP "\fB\-\-split\-by\-reloc [\fR\fIcount\fR\fB]\fR" 4
d1041 1
a1041 1
.IP "\fB\-\-stats\fR" 4
d1045 1
a1045 1
.IP "\fB\-\-traditional\-format\fR" 4
d1047 2
a1048 2
For some targets, the output of \fBld\fR is different in some ways from
the output of some existing linker.  This switch requests \fBld\fR to
d1051 1
a1051 1
For example, on SunOS, \fBld\fR combines duplicate entries in the
d1055 1
a1055 1
trouble).  The \fB\-\-traditional\-format\fR switch tells \fBld\fR to not
d1057 1
a1057 1
.IP "\fB\-\-section\-start\fR \fIsectionname\fR\fB=\fR\fIorg\fR" 4
d1068 1
a1068 1
.IP "\fB\-Tbss\fR \fIorg\fR" 4
d1070 1
a1070 2
.PD 0
.IP "\fB\-Tdata\fR \fIorg\fR" 4
d1072 1
a1072 1
.IP "\fB\-Ttext\fR \fIorg\fR" 4
a1073 1
.PD
d1079 1
a1079 1
.IP "\fB\-\-dll\-verbose\fR" 4
d1081 1
a1081 2
.PD 0
.IP "\fB\-\-verbose\fR" 4
d1083 1
a1083 2
.PD
Display the version number for \fBld\fR and list the linker emulations
d1085 2
a1086 2
the linker script being used by the linker.
.IP "\fB\-\-version\-script=\fR\fIversion-scriptfile\fR" 4
d1092 1
a1092 1
.IP "\fB\-\-warn\-common\fR" 4
d1103 1
a1103 1
.IP "\fBint i = 1;\fR" 4
d1107 1
a1107 1
.IP "\fBextern int i;\fR" 4
d1112 1
a1112 1
.IP "\fBint i;\fR" 4
d1123 1
a1123 1
The \fB\-\-warn\-common\fR option can produce five kinds of warnings.
d1128 3
a1130 1
.IP "1." 4
d1135 1
a1135 1
\&        <file>(<section>): warning: common of `<symbol>'
d1137 1
a1137 1
\&        <file>(<section>): warning: defined here
d1139 1
a1139 1
.IP "2." 4
d1145 1
a1145 1
\&        <file>(<section>): warning: definition of `<symbol>'
d1147 1
a1147 1
\&        <file>(<section>): warning: common is here
d1149 1
a1149 1
.IP "3." 4
d1153 3
a1155 3
\&        <file>(<section>): warning: multiple common
\&           of `<symbol>'
\&        <file>(<section>): warning: previous common is here
d1157 1
a1157 1
.IP "4." 4
d1161 1
a1161 1
\&        <file>(<section>): warning: common of `<symbol>'
d1163 1
a1163 1
\&        <file>(<section>): warning: larger common is here
d1165 1
a1165 1
.IP "5." 4
d1171 1
a1171 1
\&        <file>(<section>): warning: common of `<symbol>'
d1173 1
a1173 1
\&        <file>(<section>): warning: smaller common is here
d1178 1
a1178 1
.IP "\fB\-\-warn\-constructors\fR" 4
d1183 1
a1183 1
.IP "\fB\-\-warn\-multiple\-gp\fR" 4
d1196 1
a1196 1
.IP "\fB\-\-warn\-once\fR" 4
d1200 1
a1200 1
.IP "\fB\-\-warn\-section\-align\fR" 4
d1207 1
a1207 1
.IP "\fB\-\-whole\-archive\fR" 4
d1210 1
a1210 1
\&\fB\-\-whole\-archive\fR option, include every object file in the archive
d1217 2
a1218 2
about this option, so you have to use \fB\-Wl,\-whole\-archive\fR.
Second, don't forget to use \fB\-Wl,\-no\-whole\-archive\fR after your
d1221 1
a1221 1
.IP "\fB\-\-wrap\fR \fIsymbol\fR" 4
d1243 1
a1243 1
If you link other code with this file using \fB\-\-wrap malloc\fR, then
d1249 1
a1249 1
links without the \fB\-\-wrap\fR option will succeed.  If you do this,
d1253 1
a1253 1
.IP "\fB\-\-enable\-new\-dtags\fR" 4
d1255 1
a1255 2
.PD 0
.IP "\fB\-\-disable\-new\-dtags\fR" 4
a1256 1
.PD
d1259 2
a1260 2
\&\fB\-\-enable\-new\-dtags\fR, the dynamic tags will be created as needed.
If you specify \fB\-\-disable\-new\-dtags\fR, no new dynamic tags will be
d1264 1
a1264 1
The i386 \s-1PE\s0 linker supports the \fB\-shared\fR option, which causes
d1277 1
a1277 1
.IP "\fB\-\-add\-stdcall\-alias\fR" 4
d1281 1
a1281 1
.IP "\fB\-\-base\-file\fR \fIfile\fR" 4
d1286 1
a1286 1
.IP "\fB\-\-dll\fR" 4
d1289 1
a1289 1
\&\fB\-shared\fR or specify a \f(CW\*(C`LIBRARY\*(C'\fR in a given \f(CW\*(C`.def\*(C'\fR
d1291 1
a1291 1
.IP "\fB\-\-enable\-stdcall\-fixup\fR" 4
d1293 1
a1293 2
.PD 0
.IP "\fB\-\-disable\-stdcall\-fixup\fR" 4
a1294 1
.PD
d1304 1
a1304 1
to be usable.  If you specify \fB\-\-enable\-stdcall\-fixup\fR, this
d1306 1
a1306 1
\&\fB\-\-disable\-stdcall\-fixup\fR, this feature is disabled and such
d1308 1
a1308 1
.IP "\fB\-\-export\-all\-symbols\fR" 4
d1316 3
a1318 17
\&\f(CW\*(C`DllEntryPoint@@0\*(C'\fR, \f(CW\*(C`DllMainCRTStartup@@12\*(C'\fR, and 
\&\f(CW\*(C`impure_ptr\*(C'\fR will not be automatically
exported.  Also, symbols imported from other DLLs will not be 
re\-exported, nor will symbols specifying the \s-1DLL\s0's internal layout 
such as those beginning with \f(CW\*(C`_head_\*(C'\fR or ending with 
\&\f(CW\*(C`_iname\*(C'\fR.  In addition, no symbols from \f(CW\*(C`libgcc\*(C'\fR, 
\&\f(CW\*(C`libstd++\*(C'\fR, \f(CW\*(C`libmingw32\*(C'\fR, or \f(CW\*(C`crtX.o\*(C'\fR will be exported.
Symbols whose names begin with \f(CW\*(C`_\|_rtti_\*(C'\fR or \f(CW\*(C`_\|_builtin_\*(C'\fR will
not be exported, to help with \*(C+ DLLs.  Finally, there is an
extensive list of cygwin-private symbols that are not exported 
(obviously, this applies on when building DLLs for cygwin targets).
These cygwin-excludes are: \f(CW\*(C`_cygwin_dll_entry@@12\*(C'\fR, 
\&\f(CW\*(C`_cygwin_crt0_common@@8\*(C'\fR, \f(CW\*(C`_cygwin_noncygwin_dll_entry@@12\*(C'\fR,
\&\f(CW\*(C`_fmode\*(C'\fR, \f(CW\*(C`_impure_ptr\*(C'\fR, \f(CW\*(C`cygwin_attach_dll\*(C'\fR, 
\&\f(CW\*(C`cygwin_premain0\*(C'\fR, \f(CW\*(C`cygwin_premain1\*(C'\fR, \f(CW\*(C`cygwin_premain2\*(C'\fR,
\&\f(CW\*(C`cygwin_premain3\*(C'\fR, and \f(CW\*(C`environ\*(C'\fR. 
.IP "\fB\-\-exclude\-symbols\fR \fIsymbol\fR\fB,\fR\fIsymbol\fR\fB,...\fR" 4
d1322 1
a1322 8
.IP "\fB\-\-exclude\-libs\fR \fIlib\fR\fB,\fR\fIlib\fR\fB,...\fR" 4
.IX Item "--exclude-libs lib,lib,..."
Specifies a list of archive libraries from which symbols should not be automatically
exported. The library names may be delimited by commas or colons.  Specifying
\&\f(CW\*(C`\-\-exclude\-libs ALL\*(C'\fR excludes symbols in all archive libraries from
automatic export. Symbols explicitly listed in a .def file are still exported,
regardless of this option. 
.IP "\fB\-\-file\-alignment\fR" 4
d1327 1
a1327 1
.IP "\fB\-\-heap\fR \fIreserve\fR" 4
d1329 1
a1329 2
.PD 0
.IP "\fB\-\-heap\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
a1330 1
.PD
d1334 1
a1334 1
.IP "\fB\-\-image\-base\fR \fIvalue\fR" 4
d1342 1
a1342 1
.IP "\fB\-\-kill\-at\fR" 4
d1346 1
a1346 1
.IP "\fB\-\-major\-image\-version\fR \fIvalue\fR" 4
d1349 1
a1349 1
.IP "\fB\-\-major\-os\-version\fR \fIvalue\fR" 4
d1352 1
a1352 1
.IP "\fB\-\-major\-subsystem\-version\fR \fIvalue\fR" 4
d1355 1
a1355 1
.IP "\fB\-\-minor\-image\-version\fR \fIvalue\fR" 4
d1358 1
a1358 1
.IP "\fB\-\-minor\-os\-version\fR \fIvalue\fR" 4
d1361 1
a1361 1
.IP "\fB\-\-minor\-subsystem\-version\fR \fIvalue\fR" 4
d1364 1
a1364 1
.IP "\fB\-\-output\-def\fR \fIfile\fR" 4
d1371 1
a1371 146
.IP "\fB\-\-out\-implib\fR \fIfile\fR" 4
.IX Item "--out-implib file"
The linker will create the file \fIfile\fR which will contain an
import lib corresponding to the \s-1DLL\s0 the linker is generating. This
import lib (which should be called \f(CW\*(C`*.dll.a\*(C'\fR or \f(CW\*(C`*.a\*(C'\fR
may be used to link clients against the generated \s-1DLL\s0; this behavior
makes it possible to skip a separate \f(CW\*(C`dlltool\*(C'\fR import library
creation step.
.IP "\fB\-\-enable\-auto\-image\-base\fR" 4
.IX Item "--enable-auto-image-base"
Automatically choose the image base for DLLs, unless one is specified
using the \f(CW\*(C`\-\-image\-base\*(C'\fR argument.  By using a hash generated
from the dllname to create unique image bases for each \s-1DLL\s0, in-memory
collisions and relocations which can delay program execution are
avoided.
.IP "\fB\-\-disable\-auto\-image\-base\fR" 4
.IX Item "--disable-auto-image-base"
Do not automatically generate a unique image base.  If there is no
user-specified image base (\f(CW\*(C`\-\-image\-base\*(C'\fR) then use the platform
default.
.IP "\fB\-\-dll\-search\-prefix\fR \fIstring\fR" 4
.IX Item "--dll-search-prefix string"
When linking dynamically to a dll without an import library, i
search for \f(CW\*(C`<string><basename>.dll\*(C'\fR in preference to 
\&\f(CW\*(C`lib<basename>.dll\*(C'\fR. This behavior allows easy distinction
between DLLs built for the various \*(L"subplatforms\*(R": native, cygwin,
uwin, pw, etc.  For instance, cygwin DLLs typically use
\&\f(CW\*(C`\-\-dll\-search\-prefix=cyg\*(C'\fR. 
.IP "\fB\-\-enable\-auto\-import\fR" 4
.IX Item "--enable-auto-import"
Do sophisticated linking of \f(CW\*(C`_symbol\*(C'\fR to \f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for 
\&\s-1DATA\s0 imports from DLLs, and create the necessary thunking symbols when 
building the DLLs with those \s-1DATA\s0 exports.  This generally will 'just 
work' \*(-- but sometimes you may see this message:
.Sp
"variable '<var>' can't be auto\-imported. Please read the 
documentation for ld's \f(CW\*(C`\-\-enable\-auto\-import\*(C'\fR for details."
.Sp
This message occurs when some (sub)expression accesses an address 
ultimately given by the sum of two constants (Win32 import tables only 
allow one).  Instances where this may occur include accesses to member 
fields of struct variables imported from a \s-1DLL\s0, as well as using a 
constant index into an array variable imported from a \s-1DLL\s0.  Any 
multiword variable (arrays, structs, long long, etc) may trigger
this error condition.  However, regardless of the exact data type
of the offending exported variable, ld will always detect it, issue
the warning, and exit.
.Sp
There are several ways to address this difficulty, regardless of the
data type of the exported variable:
.Sp
One solution is to force one of the 'constants' to be a variable \*(-- 
that is, unknown and un-optimizable at compile time.  For arrays, 
there are two possibilities: a) make the indexee (the array's address) 
a variable, or b) make the 'constant' index a variable.  Thus:
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] --> 
\&           { volatile type *t=extern_array; t[1] }
.Ve
or
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] --> 
\&           { volatile int t=1; extern_array[t] }
.Ve
For structs (and most other multiword data types) the only option 
is to make the struct itself (or the long long, or the ...) variable:
.Sp
.Vb 3
\&        extern struct s extern_struct;
\&        extern_struct.field --> 
\&           { volatile struct s *t=&extern_struct; t->field }
.Ve
or
.Sp
.Vb 3
\&        extern long long extern_ll;
\&        extern_ll -->
\&          { volatile long long * local_ll=&extern_ll; *local_ll }
.Ve
A second method of dealing with this difficulty is to abandon
\&'auto\-import' for the offending symbol and mark it with 
\&\f(CW\*(C`_\|_declspec(dllimport)\*(C'\fR.  However, in practice that
requires using compile-time #defines to indicate whether you are
building a \s-1DLL\s0, building client code that will link to the \s-1DLL\s0, or 
merely building/linking to a static library.   In making the choice 
between the various methods of resolving the 'direct address with 
constant offset' problem, you should consider typical real-world usage:
.Sp
Original:
.Sp
.Vb 7
\&        --foo.h
\&        extern int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
Solution 1:
.Sp
.Vb 9
\&        --foo.h
\&        extern int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          /* This workaround is for win32 and cygwin; do not "optimize" */
\&          volatile int *parr = arr;
\&          printf("%d\en",parr[1]);
\&        }
.Ve
Solution 2:
.Sp
.Vb 14
\&        --foo.h
\&        /* Note: auto-export is assumed (no __declspec(dllexport)) */
\&        #if (defined(_WIN32) || defined(__CYGWIN__)) && \e
\&          !(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))
\&        #define FOO_IMPORT __declspec(dllimport)
\&        #else
\&        #define FOO_IMPORT
\&        #endif
\&        extern FOO_IMPORT int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
A third way to avoid this problem is to re-code your 
library to use a functional interface rather than a data interface
for the offending variables (e.g. \fIset_foo()\fR and \fIget_foo()\fR accessor
functions).
.IP "\fB\-\-disable\-auto\-import\fR" 4
.IX Item "--disable-auto-import"
Do not attempt to do sophisticalted linking of \f(CW\*(C`_symbol\*(C'\fR to 
\&\f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for \s-1DATA\s0 imports from DLLs.
.IP "\fB\-\-enable\-extra\-pe\-debug\fR" 4
.IX Item "--enable-extra-pe-debug"
Show additional debug info related to auto-import symbol thunking.
.IP "\fB\-\-section\-alignment\fR" 4
d1375 1
a1375 1
.IP "\fB\-\-stack\fR \fIreserve\fR" 4
d1377 1
a1377 2
.PD 0
.IP "\fB\-\-stack\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
a1378 1
.PD
d1380 1
a1380 1
used as stack for this program.  The default is 2Mb reserved, 4K
d1382 1
a1382 1
.IP "\fB\-\-subsystem\fR \fIwhich\fR" 4
d1384 1
a1384 2
.PD 0
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR" 4
d1386 1
a1386 1
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR\fB.\fR\fIminor\fR" 4
a1387 1
.PD
d1394 1
a1394 1
You can change the behavior of \fBld\fR with the environment variables
d1398 1
a1398 1
use \fB\-b\fR (or its synonym \fB\-\-format\fR).  Its value should be one
d1400 1
a1400 1
\&\f(CW\*(C`GNUTARGET\*(C'\fR in the environment, \fBld\fR uses the natural format
d1407 1
a1407 1
in the search\-list, so ambiguities are resolved in favor of convention.
d1412 1
a1412 1
available emulations with the \fB\-\-verbose\fR or \fB\-V\fR options.  If
d1421 1
a1421 1
may be overridden by the \fB\-\-demangle\fR and \fB\-\-no\-demangle\fR
d1430 1
a1430 1
Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001 Free Software Foundation, Inc.
@


1.12.4.2
log
@Regenerate generated files.
@
text
@d1 1
a1 1
.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
d24 1
d132 2
a133 1
.TH LD 1 "2002-10-30" "binutils-2.13" "GNU Development Tools"
d135 1
a135 1
ld \- Using LD, the GNU linker
a179 1
.PP
a244 1
.PP
a960 5
.IP "\fB\-\-no\-undefined\-version\fR" 4
.IX Item "--no-undefined-version"
Normally when a symbol has an undefined version, the linker will ignore
it. This option disallows symbols with undefined version and a fatal error
will be issued instead.
a1352 1
.Sp
a1568 1
.Sp
a1575 1
.Sp
a1583 1
.Sp
a1590 1
.Sp
a1610 1
.Sp
a1623 1
.Sp
a1641 1
.Sp
@


1.12.4.3
log
@Commit generated files for 2.13.2.
@
text
@d131 1
a131 1
.TH LD 1 "2002-12-16" "binutils-2.13.1" "GNU Development Tools"
@


1.12.4.4
log
@	Suggested by Manfred Hollstein <manfred.h@@gmx.net>:
	* Makefile.am (ld.1): Depend on configdoc.texi
	and ldver.texi.
	* Makefile.in: Regenerated.
@
text
@d131 1
a131 1
.TH LD 1 "2003-01-01" "binutils-2.13.2" "GNU Development Tools"
@


1.12.4.5
log
@Rebuild generated files, release 2.13.2.1.
@
text
@d131 1
a131 1
.TH LD 1 "2003-01-01" "binutils-2.13.2.1" "GNU Development Tools"
@


1.12.2.1
log
@Add generated files on 2.12 release branch.
@
text
@d1 2
a2 1
.\" Automatically generated by Pod::Man v1.3, Pod::Parser v1.13
d5 1
a5 1
.\" ========================================================================
d18 6
d37 3
a39 3
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
d49 2
a50 2
.    ds C` ""
.    ds C' ""
d59 4
a62 4
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
d66 1
a66 1
..
d71 2
a72 2
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
d77 1
d137 1
a137 1
.\" ========================================================================
d140 1
a140 1
.TH LD 1 "2002-03-08" "binutils-2.12" "GNU Development Tools"
d146 1
a146 1
ld [\fBoptions\fR] \fIobjfile\fR ...
d149 1
a149 1
\&\fBld\fR combines a number of object and archive files, relocates
d151 1
a151 1
compiling a program is to run \fBld\fR.
d153 1
a153 1
\&\fBld\fR accepts Linker Command Language files written in
d158 1
a158 1
\&\fBld\fR entry in \f(CW\*(C`info\*(C'\fR, or the manual
d162 2
a163 2
This version of \fBld\fR uses the general purpose \s-1BFD\s0 libraries
to operate on object files. This allows \fBld\fR to read, combine, and
d171 1
a171 1
\&\fBld\fR continues executing, allowing you to identify other errors
d174 1
a174 1
The \s-1GNU\s0 linker \fBld\fR is meant to cover a broad range of situations,
d181 1
a181 1
For instance, a frequent use of \fBld\fR is to link standard Unix
d188 1
a188 1
This tells \fBld\fR to produce a file called \fIoutput\fR as the
d193 1
a193 1
Some of the command-line options to \fBld\fR may be specified at any
d221 4
a224 2
specifying a script in this way merely augments the main linker script;
use the \fB\-T\fR option to replace the default linker script entirely.
d232 2
a233 2
precede the option name; for example, \fB\-trace\-symbol\fR and
\&\fB\-\-trace\-symbol\fR are equivalent.  Note \- there is one exception to
d237 1
a237 1
name to \fBmagic\fR whereas \fB\-\-omagic\fR sets the \s-1NMAGIC\s0 flag on the
d243 1
a243 1
\&\fB\-\-trace\-symbol foo\fR and \fB\-\-trace\-symbol=foo\fR are equivalent.
d260 1
a260 1
.IP "\fB\-a\fR\fIkeyword\fR" 4
d267 1
a267 1
.IP "\fB\-A\fR\fIarchitecture\fR" 4
d269 1
a269 2
.PD 0
.IP "\fB\-\-architecture=\fR\fIarchitecture\fR" 4
d271 2
a272 3
.PD
In the current release of \fBld\fR, this option is useful only for the
Intel 960 family of architectures.  In that \fBld\fR configuration, the
d277 1
a277 1
Future releases of \fBld\fR may support similar functionality for
d279 1
a279 1
.IP "\fB\-b\fR \fIinput-format\fR" 4
d281 1
a281 2
.PD 0
.IP "\fB\-\-format=\fR\fIinput-format\fR" 4
d283 2
a284 3
.PD
\&\fBld\fR may be configured to support more than one kind of object
file.  If your \fBld\fR is configured this way, you can use the
d286 1
a286 1
that follow this option on the command line.  Even when \fBld\fR is
d288 1
a288 1
to specify this, as \fBld\fR should be configured to expect as a
d305 1
a305 1
.IP "\fB\-c\fR \fIMRI-commandfile\fR" 4
d307 1
a307 2
.PD 0
.IP "\fB\-\-mri\-script=\fR\fIMRI-commandfile\fR" 4
d309 1
a309 2
.PD
For compatibility with linkers produced by \s-1MRI\s0, \fBld\fR accepts script
d314 2
a315 2
scripts written in the general-purpose \fBld\fR scripting language.
If \fIMRI-cmdfile\fR does not exist, \fBld\fR looks for it in the directories
d317 1
a317 1
.IP "\fB\-d\fR" 4
d319 1
a319 2
.PD 0
.IP "\fB\-dc\fR" 4
d321 1
a321 1
.IP "\fB\-dp\fR" 4
a322 1
.PD
d327 1
a327 1
.IP "\fB\-e\fR \fIentry\fR" 4
d329 1
a329 2
.PD 0
.IP "\fB\-\-entry=\fR\fIentry\fR" 4
a330 1
.PD
d337 1
a337 1
.IP "\fB\-E\fR" 4
d339 1
a339 2
.PD 0
.IP "\fB\-\-export\-dynamic\fR" 4
a340 1
.PD
d353 1
a353 5
.Sp
You can also use the version script to control what symbols should
be added to the dynamic symbol table if the output format supports it.
See the description of \fB\-\-version\-script\fR in \f(CW@@ref\fR{\s-1VERSION\s0}.
.IP "\fB\-EB\fR" 4
d356 1
a356 1
.IP "\fB\-EL\fR" 4
d359 1
a359 1
.IP "\fB\-f\fR" 4
d361 1
a361 2
.PD 0
.IP "\fB\-\-auxiliary\fR \fIname\fR" 4
a362 1
.PD
d380 1
a380 1
.IP "\fB\-F\fR \fIname\fR" 4
d382 1
a382 2
.PD 0
.IP "\fB\-\-filter\fR \fIname\fR" 4
a383 1
.PD
d397 1
a397 1
Some older linkers used the \fB\-F\fR option throughout a compilation
d400 1
a400 1
purpose: the \fB\-b\fR, \fB\-\-format\fR, \fB\-\-oformat\fR options, the
d402 1
a402 1
environment variable.  The \s-1GNU\s0 linker will ignore the \fB\-F\fR
d404 1
a404 1
.IP "\fB\-fini\fR \fIname\fR" 4
d410 1
a410 1
.IP "\fB\-g\fR" 4
d413 1
a413 1
.IP "\fB\-G\fR\fIvalue\fR" 4
d415 1
a415 2
.PD 0
.IP "\fB\-\-gpsize=\fR\fIvalue\fR" 4
a416 1
.PD
d421 1
a421 1
.IP "\fB\-h\fR\fIname\fR" 4
d423 1
a423 2
.PD 0
.IP "\fB\-soname=\fR\fIname\fR" 4
a424 1
.PD
d430 1
a430 1
.IP "\fB\-i\fR" 4
d433 1
a433 1
.IP "\fB\-init\fR \fIname\fR" 4
d439 1
a439 1
.IP "\fB\-l\fR\fIarchive\fR" 4
d441 1
a441 2
.PD 0
.IP "\fB\-\-library=\fR\fIarchive\fR" 4
a442 1
.PD
d444 1
a444 1
option may be used any number of times.  \fBld\fR will search its
d448 1
a448 1
On systems which support shared libraries, \fBld\fR may also search for
d450 1
a450 1
and SunOS systems, \fBld\fR will search a directory for a library with
d458 1
a458 1
command line, the linker will include the appropriate file(s) from the
d462 1
a462 1
See the \fB\-(\fR option for a way to force the linker to search
d468 1
a468 1
if you are using \fBld\fR on \s-1AIX\s0, note that it is different from the
d470 1
a470 1
.IP "\fB\-L\fR\fIsearchdir\fR" 4
d472 1
a472 2
.PD 0
.IP "\fB\-\-library\-path=\fR\fIsearchdir\fR" 4
d474 2
a475 3
.PD
Add path \fIsearchdir\fR to the list of paths that \fBld\fR will search
for archive libraries and \fBld\fR control scripts.  You may use this
d479 1
a479 1
\&\fB\-L\fR options apply to all \fB\-l\fR options, regardless of the
d483 1
a483 1
\&\fB\-L\fR) depends on which emulation mode \fBld\fR is using, and in
d489 1
a489 1
.IP "\fB\-m\fR\fIemulation\fR" 4
d492 1
a492 1
emulations with the \fB\-\-verbose\fR or \fB\-V\fR options.
d499 1
a499 1
.IP "\fB\-M\fR" 4
d501 1
a501 2
.PD 0
.IP "\fB\-\-print\-map\fR" 4
a502 1
.PD
d506 1
a506 1
.IP "\(bu" 4
d508 1
a508 1
.IP "\(bu" 4
d510 1
a510 1
.IP "\(bu" 4
d516 1
a516 1
.IP "\fB\-n\fR" 4
d518 1
a518 2
.PD 0
.IP "\fB\-\-nmagic\fR" 4
a519 1
.PD
d522 1
a522 1
.IP "\fB\-N\fR" 4
d524 1
a524 2
.PD 0
.IP "\fB\-\-omagic\fR" 4
a525 1
.PD
d529 1
a529 1
.IP "\fB\-o\fR \fIoutput\fR" 4
d531 1
a531 2
.PD 0
.IP "\fB\-\-output=\fR\fIoutput\fR" 4
d533 1
a533 2
.PD
Use \fIoutput\fR as the name for the program produced by \fBld\fR; if this
d536 1
a536 1
.IP "\fB\-O\fR \fIlevel\fR" 4
d538 1
a538 1
If \fIlevel\fR is a numeric values greater than zero \fBld\fR optimizes
d541 1
a541 1
.IP "\fB\-q\fR" 4
d543 1
a543 2
.PD 0
.IP "\fB\-\-emit\-relocs\fR" 4
a544 1
.PD
d549 1
a549 3
.Sp
This option is currently only supported on \s-1ELF\s0 platforms.
.IP "\fB\-r\fR" 4
d551 1
a551 2
.PD 0
.IP "\fB\-\-relocateable\fR" 4
a552 1
.PD
d554 1
a554 1
turn serve as input to \fBld\fR.  This is often called \fIpartial
a561 6
When an input file does not have the same format as the output file,
partial linking is only supported if that input file does not contain any
relocations.  Different output formats can have further restrictions; for
example some \f(CW\*(C`a.out\*(C'\fR\-based formats do not support partial linking
with input files in other formats at all.
.Sp
d563 1
a563 1
.IP "\fB\-R\fR \fIfilename\fR" 4
d565 1
a565 2
.PD 0
.IP "\fB\-\-just\-symbols=\fR\fIfilename\fR" 4
a566 1
.PD
d572 1
a572 1
For compatibility with other \s-1ELF\s0 linkers, if the \fB\-R\fR option is
d574 2
a575 2
the \fB\-rpath\fR option.
.IP "\fB\-s\fR" 4
d577 1
a577 2
.PD 0
.IP "\fB\-\-strip\-all\fR" 4
a578 1
.PD
d580 1
a580 1
.IP "\fB\-S\fR" 4
d582 1
a582 2
.PD 0
.IP "\fB\-\-strip\-debug\fR" 4
a583 1
.PD
d585 1
a585 1
.IP "\fB\-t\fR" 4
d587 1
a587 2
.PD 0
.IP "\fB\-\-trace\fR" 4
d589 2
a590 3
.PD
Print the names of the input files as \fBld\fR processes them.
.IP "\fB\-T\fR \fIscriptfile\fR" 4
d592 1
a592 2
.PD 0
.IP "\fB\-\-script=\fR\fIscriptfile\fR" 4
a593 1
.PD
d595 1
a595 1
\&\fBld\fR's default linker script (rather than adding to it), so
d597 7
a603 5
output file.    If \fIscriptfile\fR does not exist in
the current directory, \f(CW\*(C`ld\*(C'\fR looks for it in the directories
specified by any preceding \fB\-L\fR options.  Multiple \fB\-T\fR
options accumulate.
.IP "\fB\-u\fR \fIsymbol\fR" 4
d605 1
a605 2
.PD 0
.IP "\fB\-\-undefined=\fR\fIsymbol\fR" 4
a606 1
.PD
d612 1
a612 1
.IP "\fB\-Ur\fR" 4
d616 1
a616 1
turn serve as input to \fBld\fR.  When linking \*(C+ programs, \fB\-Ur\fR
d622 1
a622 1
.IP "\fB\-\-unique[=\fR\fI\s-1SECTION\s0\fR\fB]\fR" 4
d631 1
a631 1
.IP "\fB\-v\fR" 4
d633 1
a633 2
.PD 0
.IP "\fB\-\-version\fR" 4
d635 1
a635 1
.IP "\fB\-V\fR" 4
d637 1
a637 2
.PD
Display the version number for \fBld\fR.  The \fB\-V\fR option also
d639 1
a639 1
.IP "\fB\-x\fR" 4
d641 1
a641 2
.PD 0
.IP "\fB\-\-discard\-all\fR" 4
a642 1
.PD
d644 1
a644 1
.IP "\fB\-X\fR" 4
d646 1
a646 2
.PD 0
.IP "\fB\-\-discard\-locals\fR" 4
a647 1
.PD
d650 1
a650 1
.IP "\fB\-y\fR \fIsymbol\fR" 4
d652 1
a652 2
.PD 0
.IP "\fB\-\-trace\-symbol=\fR\fIsymbol\fR" 4
a653 1
.PD
d660 1
a660 1
.IP "\fB\-Y\fR \fIpath\fR" 4
d664 1
a664 1
.IP "\fB\-z\fR \fIkeyword\fR" 4
d668 1
a668 3
\&\f(CW\*(C`nodump\*(C'\fR, \f(CW\*(C`now\*(C'\fR, \f(CW\*(C`origin\*(C'\fR, \f(CW\*(C`combreloc\*(C'\fR, \f(CW\*(C`nocombreloc\*(C'\fR 
and \f(CW\*(C`nocopyreloc\*(C'\fR.
The other keywords are
d682 1
a682 5
\&\f(CW\*(C`combreloc\*(C'\fR combines multiple reloc sections and sorts them
to make dynamic symbol lookup caching possible.
\&\f(CW\*(C`nocombreloc\*(C'\fR disables multiple reloc sections combining.
\&\f(CW\*(C`nocopyreloc\*(C'\fR disables production of copy relocs.
.IP "\fB\-(\fR \fIarchives\fR \fB\-)\fR" 4
d684 1
a684 2
.PD 0
.IP "\fB\-\-start\-group\fR \fIarchives\fR \fB\-\-end\-group\fR" 4
a685 1
.PD
d701 1
a701 1
.IP "\fB\-assert\fR \fIkeyword\fR" 4
d704 1
a704 1
.IP "\fB\-Bdynamic\fR" 4
d706 1
a706 2
.PD 0
.IP "\fB\-dy\fR" 4
d708 1
a708 1
.IP "\fB\-call_shared\fR" 4
a709 1
.PD
d715 2
a716 2
\&\fB\-l\fR options which follow it.
.IP "\fB\-Bgroup\fR" 4
d721 1
a721 1
\&\fB\-\-no\-undefined\fR is implied.  This option is only meaningful on \s-1ELF\s0
d723 1
a723 1
.IP "\fB\-Bstatic\fR" 4
d725 1
a725 2
.PD 0
.IP "\fB\-dn\fR" 4
d727 1
a727 1
.IP "\fB\-non_shared\fR" 4
d729 1
a729 1
.IP "\fB\-static\fR" 4
a730 1
.PD
d735 2
a736 2
library searching for \fB\-l\fR options which follow it.
.IP "\fB\-Bsymbolic\fR" 4
d743 1
a743 1
.IP "\fB\-\-check\-sections\fR" 4
d745 1
a745 2
.PD 0
.IP "\fB\-\-no\-check\-sections\fR" 4
a746 1
.PD
d752 2
a753 2
restored by using the command line switch \fB\-\-check\-sections\fR.
.IP "\fB\-\-cref\fR" 4
d764 1
a764 16
.IP "\fB\-\-no\-define\-common\fR" 4
.IX Item "--no-define-common"
This option inhibits the assignment of addresses to common symbols.
The script command \f(CW\*(C`INHIBIT_COMMON_ALLOCATION\*(C'\fR has the same effect.
.Sp
The \fB\-\-no\-define\-common\fR option allows decoupling
the decision to assign addresses to Common symbols from the choice
of the output file type; otherwise a non-Relocatable output type
forces assigning addresses to Common symbols.
Using \fB\-\-no\-define\-common\fR allows Common symbols that are referenced
from a shared library to be assigned addresses only in the main program.
This eliminates the unused duplicate space in the shared library,
and also prevents any possible confusion over resolving to the wrong
duplicate when there are many dynamic modules with specialized search
paths for runtime symbol resolution.
.IP "\fB\-\-defsym\fR \fIsymbol\fR\fB=\fR\fIexpression\fR" 4
d776 1
a776 1
.IP "\fB\-\-demangle[=\fR\fIstyle\fR\fB]\fR" 4
d778 1
a778 2
.PD 0
.IP "\fB\-\-no\-demangle\fR" 4
a779 1
.PD
d789 1
a789 1
.IP "\fB\-\-dynamic\-linker\fR \fIfile\fR" 4
d795 1
a795 1
.IP "\fB\-\-embedded\-relocs\fR" 4
d798 1
a798 1
generated by the \-membedded\-pic option to the \s-1GNU\s0 compiler and
d801 2
a802 2
values.  See the code in testsuite/ld\-empic for details.
.IP "\fB\-\-fatal\-warnings\fR" 4
d805 1
a805 1
.IP "\fB\-\-force\-exe\-suffix\fR" 4
d815 1
a815 1
.IP "\fB\-\-no\-gc\-sections\fR" 4
d817 1
a817 2
.PD 0
.IP "\fB\-\-gc\-sections\fR" 4
a818 1
.PD
d823 2
a824 2
specifying \fB\-\-no\-gc\-sections\fR on the command line.
.IP "\fB\-\-help\fR" 4
d827 1
a827 1
.IP "\fB\-\-target\-help\fR" 4
d830 1
a830 1
.IP "\fB\-Map\fR \fImapfile\fR" 4
d834 1
a834 1
.IP "\fB\-\-no\-keep\-memory\fR" 4
d836 2
a837 2
\&\fBld\fR normally optimizes for speed over memory usage by caching the
symbol tables of input files in memory.  This option tells \fBld\fR to
d839 1
a839 1
necessary.  This may be required if \fBld\fR runs out of memory space
d841 1
a841 1
.IP "\fB\-\-no\-undefined\fR" 4
d843 1
a843 2
.PD 0
.IP "\fB\-z defs\fR" 4
a844 1
.PD
d848 1
a848 1
.IP "\fB\-\-allow\-shlib\-undefined\fR" 4
d850 1
a850 1
Allow undefined symbols in shared objects even  when \-\-no\-undefined is
d860 1
a860 1
.IP "\fB\-\-no\-warn\-mismatch\fR" 4
d862 1
a862 1
Normally \fBld\fR will give an error if you try to link together input
d865 1
a865 1
This option tells \fBld\fR that it should silently permit such possible
d869 1
a869 1
.IP "\fB\-\-no\-whole\-archive\fR" 4
d871 1
a871 1
Turn off the effect of the \fB\-\-whole\-archive\fR option for subsequent
d873 1
a873 1
.IP "\fB\-\-noinhibit\-exec\fR" 4
d879 1
a879 6
.IP "\fB\-nostdlib\fR" 4
.IX Item "-nostdlib"
Only search library directories explicitly specified on the
command line.  Library directories specified in linker scripts
(including linker scripts specified on the command line) are ignored.
.IP "\fB\-\-oformat\fR \fIoutput-format\fR" 4
d881 5
a885 5
\&\fBld\fR may be configured to support more than one kind of object
file.  If your \fBld\fR is configured this way, you can use the
\&\fB\-\-oformat\fR option to specify the binary format for the output
object file.  Even when \fBld\fR is configured to support alternative
object formats, you don't usually need to specify this, as \fBld\fR
d892 1
a892 1
.IP "\fB\-qmagic\fR" 4
d895 1
a895 1
.IP "\fB\-Qy\fR" 4
d898 1
a898 1
.IP "\fB\-\-relax\fR" 4
d903 1
a903 1
On some platforms, the \fB\-\-relax\fR option performs global
d913 1
a913 1
On platforms where this is not supported, \fB\-\-relax\fR is accepted,
d915 1
a915 1
.IP "\fB\-\-retain\-symbols\-file\fR \fIfilename\fR" 4
d924 1
a924 1
\&\fB\-\-retain\-symbols\-file\fR does \fInot\fR discard undefined symbols,
d927 1
a927 1
You may only specify \fB\-\-retain\-symbols\-file\fR once in the command
d929 1
a929 1
.IP "\fB\-rpath\fR \fIdir\fR" 4
d932 1
a932 1
linking an \s-1ELF\s0 executable with shared objects.  All \fB\-rpath\fR
d934 1
a934 1
them to locate shared objects at runtime.  The \fB\-rpath\fR option is
d937 1
a937 1
\&\fB\-rpath\-link\fR option.  If \fB\-rpath\fR is not used when linking an
d941 1
a941 1
The \fB\-rpath\fR option may also be used on SunOS.  By default, on
d943 4
a946 4
\&\fB\-L\fR options it is given.  If a \fB\-rpath\fR option is used, the
runtime search path will be formed exclusively using the \fB\-rpath\fR
options, ignoring the \fB\-L\fR options.  This can be useful when using
gcc, which adds many \fB\-L\fR options which may be on \s-1NFS\s0 mounted
d949 1
a949 1
For compatibility with other \s-1ELF\s0 linkers, if the \fB\-R\fR option is
d951 2
a952 2
the \fB\-rpath\fR option.
.IP "\fB\-rpath\-link\fR \fI\s-1DIR\s0\fR" 4
d958 1
a958 1
When the linker encounters such a dependency when doing a non\-shared,
d961 1
a961 1
explicitly.  In such a case, the \fB\-rpath\-link\fR option
d963 1
a963 1
\&\fB\-rpath\-link\fR option may specify a sequence of directory names
d975 7
a981 7
.IP "1." 4
Any directories specified by \fB\-rpath\-link\fR options.
.IP "2." 4
Any directories specified by \fB\-rpath\fR options.  The difference
between \fB\-rpath\fR and \fB\-rpath\-link\fR is that directories
specified by \fB\-rpath\fR options are included in the executable and
used at runtime, whereas the \fB\-rpath\-link\fR option is only effective
d983 2
a984 2
.IP "3." 4
On an \s-1ELF\s0 system, if the \fB\-rpath\fR and \f(CW\*(C`rpath\-link\*(C'\fR options
d987 4
a990 4
.IP "4." 4
On SunOS, if the \fB\-rpath\fR option was not used, search any
directories specified using \fB\-L\fR options.
.IP "5." 4
d993 1
a993 1
.IP "6." 4
d998 1
a998 1
.IP "7." 4
d1000 1
a1000 1
.IP "8." 4
d1009 1
a1009 1
.IP "\fB\-shared\fR" 4
d1011 1
a1011 2
.PD 0
.IP "\fB\-Bshareable\fR" 4
a1012 1
.PD
d1015 1
a1015 1
shared library if the \fB\-e\fR option is not used and there are
d1017 1
a1017 1
.IP "\fB\-\-sort\-common\fR" 4
d1019 1
a1019 1
This option tells \fBld\fR to sort the common symbols by size when it
d1021 1
a1021 1
byte symbols, then all the two byte, then all the four byte, and then
d1024 1
a1024 1
.IP "\fB\-\-split\-by\-file [\fR\fIsize\fR\fB]\fR" 4
d1026 1
a1026 1
Similar to \fB\-\-split\-by\-reloc\fR but creates a new output section for
d1029 1
a1029 1
.IP "\fB\-\-split\-by\-reloc [\fR\fIcount\fR\fB]\fR" 4
d1041 1
a1041 1
.IP "\fB\-\-stats\fR" 4
d1045 1
a1045 1
.IP "\fB\-\-traditional\-format\fR" 4
d1047 2
a1048 2
For some targets, the output of \fBld\fR is different in some ways from
the output of some existing linker.  This switch requests \fBld\fR to
d1051 1
a1051 1
For example, on SunOS, \fBld\fR combines duplicate entries in the
d1055 1
a1055 1
trouble).  The \fB\-\-traditional\-format\fR switch tells \fBld\fR to not
d1057 1
a1057 1
.IP "\fB\-\-section\-start\fR \fIsectionname\fR\fB=\fR\fIorg\fR" 4
d1068 1
a1068 1
.IP "\fB\-Tbss\fR \fIorg\fR" 4
d1070 1
a1070 2
.PD 0
.IP "\fB\-Tdata\fR \fIorg\fR" 4
d1072 1
a1072 1
.IP "\fB\-Ttext\fR \fIorg\fR" 4
a1073 1
.PD
d1079 1
a1079 1
.IP "\fB\-\-dll\-verbose\fR" 4
d1081 1
a1081 2
.PD 0
.IP "\fB\-\-verbose\fR" 4
d1083 1
a1083 2
.PD
Display the version number for \fBld\fR and list the linker emulations
d1085 2
a1086 2
the linker script being used by the linker.
.IP "\fB\-\-version\-script=\fR\fIversion-scriptfile\fR" 4
d1092 1
a1092 1
.IP "\fB\-\-warn\-common\fR" 4
d1103 1
a1103 1
.IP "\fBint i = 1;\fR" 4
d1107 1
a1107 1
.IP "\fBextern int i;\fR" 4
d1112 1
a1112 1
.IP "\fBint i;\fR" 4
d1123 1
a1123 1
The \fB\-\-warn\-common\fR option can produce five kinds of warnings.
d1128 3
a1130 1
.IP "1." 4
d1139 1
a1139 1
.IP "2." 4
d1149 1
a1149 1
.IP "3." 4
d1157 1
a1157 1
.IP "4." 4
d1165 1
a1165 1
.IP "5." 4
d1178 1
a1178 1
.IP "\fB\-\-warn\-constructors\fR" 4
d1183 1
a1183 1
.IP "\fB\-\-warn\-multiple\-gp\fR" 4
d1196 1
a1196 1
.IP "\fB\-\-warn\-once\fR" 4
d1200 1
a1200 1
.IP "\fB\-\-warn\-section\-align\fR" 4
d1207 1
a1207 1
.IP "\fB\-\-whole\-archive\fR" 4
d1210 1
a1210 1
\&\fB\-\-whole\-archive\fR option, include every object file in the archive
d1217 2
a1218 2
about this option, so you have to use \fB\-Wl,\-whole\-archive\fR.
Second, don't forget to use \fB\-Wl,\-no\-whole\-archive\fR after your
d1221 1
a1221 1
.IP "\fB\-\-wrap\fR \fIsymbol\fR" 4
d1243 1
a1243 1
If you link other code with this file using \fB\-\-wrap malloc\fR, then
d1249 1
a1249 1
links without the \fB\-\-wrap\fR option will succeed.  If you do this,
d1253 1
a1253 1
.IP "\fB\-\-enable\-new\-dtags\fR" 4
d1255 1
a1255 2
.PD 0
.IP "\fB\-\-disable\-new\-dtags\fR" 4
a1256 1
.PD
d1259 2
a1260 2
\&\fB\-\-enable\-new\-dtags\fR, the dynamic tags will be created as needed.
If you specify \fB\-\-disable\-new\-dtags\fR, no new dynamic tags will be
d1264 1
a1264 1
The i386 \s-1PE\s0 linker supports the \fB\-shared\fR option, which causes
d1277 1
a1277 1
.IP "\fB\-\-add\-stdcall\-alias\fR" 4
d1281 1
a1281 1
.IP "\fB\-\-base\-file\fR \fIfile\fR" 4
d1286 1
a1286 1
.IP "\fB\-\-dll\fR" 4
d1289 1
a1289 1
\&\fB\-shared\fR or specify a \f(CW\*(C`LIBRARY\*(C'\fR in a given \f(CW\*(C`.def\*(C'\fR
d1291 1
a1291 1
.IP "\fB\-\-enable\-stdcall\-fixup\fR" 4
d1293 1
a1293 2
.PD 0
.IP "\fB\-\-disable\-stdcall\-fixup\fR" 4
a1294 1
.PD
d1304 1
a1304 1
to be usable.  If you specify \fB\-\-enable\-stdcall\-fixup\fR, this
d1306 1
a1306 1
\&\fB\-\-disable\-stdcall\-fixup\fR, this feature is disabled and such
d1308 1
a1308 1
.IP "\fB\-\-export\-all\-symbols\fR" 4
d1316 3
a1318 17
\&\f(CW\*(C`DllEntryPoint@@0\*(C'\fR, \f(CW\*(C`DllMainCRTStartup@@12\*(C'\fR, and 
\&\f(CW\*(C`impure_ptr\*(C'\fR will not be automatically
exported.  Also, symbols imported from other DLLs will not be 
re\-exported, nor will symbols specifying the \s-1DLL\s0's internal layout 
such as those beginning with \f(CW\*(C`_head_\*(C'\fR or ending with 
\&\f(CW\*(C`_iname\*(C'\fR.  In addition, no symbols from \f(CW\*(C`libgcc\*(C'\fR, 
\&\f(CW\*(C`libstd++\*(C'\fR, \f(CW\*(C`libmingw32\*(C'\fR, or \f(CW\*(C`crtX.o\*(C'\fR will be exported.
Symbols whose names begin with \f(CW\*(C`_\|_rtti_\*(C'\fR or \f(CW\*(C`_\|_builtin_\*(C'\fR will
not be exported, to help with \*(C+ DLLs.  Finally, there is an
extensive list of cygwin-private symbols that are not exported 
(obviously, this applies on when building DLLs for cygwin targets).
These cygwin-excludes are: \f(CW\*(C`_cygwin_dll_entry@@12\*(C'\fR, 
\&\f(CW\*(C`_cygwin_crt0_common@@8\*(C'\fR, \f(CW\*(C`_cygwin_noncygwin_dll_entry@@12\*(C'\fR,
\&\f(CW\*(C`_fmode\*(C'\fR, \f(CW\*(C`_impure_ptr\*(C'\fR, \f(CW\*(C`cygwin_attach_dll\*(C'\fR, 
\&\f(CW\*(C`cygwin_premain0\*(C'\fR, \f(CW\*(C`cygwin_premain1\*(C'\fR, \f(CW\*(C`cygwin_premain2\*(C'\fR,
\&\f(CW\*(C`cygwin_premain3\*(C'\fR, and \f(CW\*(C`environ\*(C'\fR. 
.IP "\fB\-\-exclude\-symbols\fR \fIsymbol\fR\fB,\fR\fIsymbol\fR\fB,...\fR" 4
d1322 1
a1322 1
.IP "\fB\-\-file\-alignment\fR" 4
d1327 1
a1327 1
.IP "\fB\-\-heap\fR \fIreserve\fR" 4
d1329 1
a1329 2
.PD 0
.IP "\fB\-\-heap\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
a1330 1
.PD
d1334 1
a1334 1
.IP "\fB\-\-image\-base\fR \fIvalue\fR" 4
d1342 1
a1342 1
.IP "\fB\-\-kill\-at\fR" 4
d1346 1
a1346 1
.IP "\fB\-\-major\-image\-version\fR \fIvalue\fR" 4
d1349 1
a1349 1
.IP "\fB\-\-major\-os\-version\fR \fIvalue\fR" 4
d1352 1
a1352 1
.IP "\fB\-\-major\-subsystem\-version\fR \fIvalue\fR" 4
d1355 1
a1355 1
.IP "\fB\-\-minor\-image\-version\fR \fIvalue\fR" 4
d1358 1
a1358 1
.IP "\fB\-\-minor\-os\-version\fR \fIvalue\fR" 4
d1361 1
a1361 1
.IP "\fB\-\-minor\-subsystem\-version\fR \fIvalue\fR" 4
d1364 1
a1364 1
.IP "\fB\-\-output\-def\fR \fIfile\fR" 4
d1371 1
a1371 146
.IP "\fB\-\-out\-implib\fR \fIfile\fR" 4
.IX Item "--out-implib file"
The linker will create the file \fIfile\fR which will contain an
import lib corresponding to the \s-1DLL\s0 the linker is generating. This
import lib (which should be called \f(CW\*(C`*.dll.a\*(C'\fR or \f(CW\*(C`*.a\*(C'\fR
may be used to link clients against the generated \s-1DLL\s0; this behavior
makes it possible to skip a separate \f(CW\*(C`dlltool\*(C'\fR import library
creation step.
.IP "\fB\-\-enable\-auto\-image\-base\fR" 4
.IX Item "--enable-auto-image-base"
Automatically choose the image base for DLLs, unless one is specified
using the \f(CW\*(C`\-\-image\-base\*(C'\fR argument.  By using a hash generated
from the dllname to create unique image bases for each \s-1DLL\s0, in-memory
collisions and relocations which can delay program execution are
avoided.
.IP "\fB\-\-disable\-auto\-image\-base\fR" 4
.IX Item "--disable-auto-image-base"
Do not automatically generate a unique image base.  If there is no
user-specified image base (\f(CW\*(C`\-\-image\-base\*(C'\fR) then use the platform
default.
.IP "\fB\-\-dll\-search\-prefix\fR \fIstring\fR" 4
.IX Item "--dll-search-prefix string"
When linking dynamically to a dll without an import library, i
search for \f(CW\*(C`<string><basename>.dll\*(C'\fR in preference to 
\&\f(CW\*(C`lib<basename>.dll\*(C'\fR. This behavior allows easy distinction
between DLLs built for the various \*(L"subplatforms\*(R": native, cygwin,
uwin, pw, etc.  For instance, cygwin DLLs typically use
\&\f(CW\*(C`\-\-dll\-search\-prefix=cyg\*(C'\fR. 
.IP "\fB\-\-enable\-auto\-import\fR" 4
.IX Item "--enable-auto-import"
Do sophisticated linking of \f(CW\*(C`_symbol\*(C'\fR to \f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for 
\&\s-1DATA\s0 imports from DLLs, and create the necessary thunking symbols when 
building the DLLs with those \s-1DATA\s0 exports.  This generally will 'just 
work' \*(-- but sometimes you may see this message:
.Sp
"variable '<var>' can't be auto\-imported. Please read the 
documentation for ld's \f(CW\*(C`\-\-enable\-auto\-import\*(C'\fR for details."
.Sp
This message occurs when some (sub)expression accesses an address 
ultimately given by the sum of two constants (Win32 import tables only 
allow one).  Instances where this may occur include accesses to member 
fields of struct variables imported from a \s-1DLL\s0, as well as using a 
constant index into an array variable imported from a \s-1DLL\s0.  Any 
multiword variable (arrays, structs, long long, etc) may trigger
this error condition.  However, regardless of the exact data type
of the offending exported variable, ld will always detect it, issue
the warning, and exit.
.Sp
There are several ways to address this difficulty, regardless of the
data type of the exported variable:
.Sp
One solution is to force one of the 'constants' to be a variable \*(-- 
that is, unknown and un-optimizable at compile time.  For arrays, 
there are two possibilities: a) make the indexee (the array's address) 
a variable, or b) make the 'constant' index a variable.  Thus:
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] --> 
\&           { volatile type *t=extern_array; t[1] }
.Ve
or
.Sp
.Vb 3
\&        extern type extern_array[];
\&        extern_array[1] --> 
\&           { volatile int t=1; extern_array[t] }
.Ve
For structs (and most other multiword data types) the only option 
is to make the struct itself (or the long long, or the ...) variable:
.Sp
.Vb 3
\&        extern struct s extern_struct;
\&        extern_struct.field --> 
\&           { volatile struct s *t=&extern_struct; t->field }
.Ve
or
.Sp
.Vb 3
\&        extern long long extern_ll;
\&        extern_ll -->
\&          { volatile long long * local_ll=&extern_ll; *local_ll }
.Ve
A second method of dealing with this difficulty is to abandon
\&'auto\-import' for the offending symbol and mark it with 
\&\f(CW\*(C`_\|_declspec(dllimport)\*(C'\fR.  However, in practice that
requires using compile-time #defines to indicate whether you are
building a \s-1DLL\s0, building client code that will link to the \s-1DLL\s0, or 
merely building/linking to a static library.   In making the choice 
between the various methods of resolving the 'direct address with 
constant offset' problem, you should consider typical real-world usage:
.Sp
Original:
.Sp
.Vb 7
\&        --foo.h
\&        extern int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
Solution 1:
.Sp
.Vb 9
\&        --foo.h
\&        extern int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          /* This workaround is for win32 and cygwin; do not "optimize" */
\&          volatile int *parr = arr;
\&          printf("%d\en",parr[1]);
\&        }
.Ve
Solution 2:
.Sp
.Vb 14
\&        --foo.h
\&        /* Note: auto-export is assumed (no __declspec(dllexport)) */
\&        #if (defined(_WIN32) || defined(__CYGWIN__)) && \e
\&          !(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))
\&        #define FOO_IMPORT __declspec(dllimport)
\&        #else
\&        #define FOO_IMPORT
\&        #endif
\&        extern FOO_IMPORT int arr[];
\&        --foo.c
\&        #include "foo.h"
\&        void main(int argc, char **argv){
\&          printf("%d\en",arr[1]);
\&        }
.Ve
A third way to avoid this problem is to re-code your 
library to use a functional interface rather than a data interface
for the offending variables (e.g. \fIset_foo()\fR and \fIget_foo()\fR accessor
functions).
.IP "\fB\-\-disable\-auto\-import\fR" 4
.IX Item "--disable-auto-import"
Do not attempt to do sophisticalted linking of \f(CW\*(C`_symbol\*(C'\fR to 
\&\f(CW\*(C`_\|_imp_\|_symbol\*(C'\fR for \s-1DATA\s0 imports from DLLs.
.IP "\fB\-\-enable\-extra\-pe\-debug\fR" 4
.IX Item "--enable-extra-pe-debug"
Show additional debug info related to auto-import symbol thunking.
.IP "\fB\-\-section\-alignment\fR" 4
d1375 1
a1375 1
.IP "\fB\-\-stack\fR \fIreserve\fR" 4
d1377 1
a1377 2
.PD 0
.IP "\fB\-\-stack\fR \fIreserve\fR\fB,\fR\fIcommit\fR" 4
a1378 1
.PD
d1380 1
a1380 1
used as stack for this program.  The default is 2Mb reserved, 4K
d1382 1
a1382 1
.IP "\fB\-\-subsystem\fR \fIwhich\fR" 4
d1384 1
a1384 2
.PD 0
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR" 4
d1386 1
a1386 1
.IP "\fB\-\-subsystem\fR \fIwhich\fR\fB:\fR\fImajor\fR\fB.\fR\fIminor\fR" 4
a1387 1
.PD
d1394 1
a1394 1
You can change the behavior of \fBld\fR with the environment variables
d1398 1
a1398 1
use \fB\-b\fR (or its synonym \fB\-\-format\fR).  Its value should be one
d1400 1
a1400 1
\&\f(CW\*(C`GNUTARGET\*(C'\fR in the environment, \fBld\fR uses the natural format
d1407 1
a1407 1
in the search\-list, so ambiguities are resolved in favor of convention.
d1412 1
a1412 1
available emulations with the \fB\-\-verbose\fR or \fB\-V\fR options.  If
d1421 1
a1421 1
may be overridden by the \fB\-\-demangle\fR and \fB\-\-no\-demangle\fR
d1430 1
a1430 1
Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001 Free Software Foundation, Inc.
@


1.12.2.2
log
@Update generated files.
@
text
@d132 1
a132 1
.TH LD 1 "2002-05-11" "binutils-2.12.1" "GNU Development Tools"
@


1.11
log
@Improve Solaris compatability
@
text
@@


1.10
log
@* ld.texinfo: Document --fatal-warnings.
* ld.1: Regenerate.

* ldmisc.c (vfinfo): Set flag to inhibit making executable if
warnings have been turned into errors.
* lexsup.c (OPTION_WARN_FATAL): Define.
(ld_options): Entry for --fatal-warnings.
(parse_args): Handle OPTION_WARN_FATAL.
* ld.h (ld_config_type): Add fatal_warnings field.
@
text
@d1 6
a6 6
.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
d14 1
a14 1
.de Sp
d18 1
a18 1
.de Ip
d24 1
a24 1
.de Vb
d29 1
a29 1
.de Ve
d34 6
a39 6
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
d41 1
d43 8
a50 20
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
d53 4
a56 15
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
d58 11
a68 15
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
d70 7
a76 15
.TH LD 1 "binutils-2.11.90" "30/Mar/2001" "GNU"
.UC
.if n .hy 0
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
d78 1
a78 1
.	\" fudge factors for nroff and troff
d80 5
a84 5
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
d87 5
a91 5
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
d93 1
a93 1
.	\" simple accents for nroff and troff
d95 6
a100 9
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
d103 6
a108 9
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
d110 1
a110 1
.	\" troff and (daisy-wheel) nroff accents
a112 4
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
d120 1
a120 3
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
d123 1
a123 1
.	\" for low resolution devices (crt and lpr)
d126 9
a134 15
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
d137 5
d143 1
a143 1
ld \- Using LD, the GNU linker
d145 1
d148 2
a149 1
\f(CWld\fR combines a number of object and archive files, relocates
d151 1
a151 1
compiling a program is to run \f(CWld\fR.
d153 2
a154 2
\f(CWld\fR accepts Linker Command Language files written in
a superset of AT&T's Link Editor Command Language syntax,
d158 8
a165 8
\f(CWld\fR entry in \f(CWinfo\fR, or the manual
ld: the GNU linker, for full details on the command language and 
on other aspects of the GNU linker. 
.PP
This version of \f(CWld\fR uses the general purpose BFD libraries
to operate on object files. This allows \f(CWld\fR to read, combine, and
write object files in many different formats---for example, COFF or
\f(CWa.out\fR.  Different formats may be linked together to produce any
d168 1
a168 1
Aside from its flexibility, the GNU linker is more helpful than other
d171 1
a171 1
\f(CWld\fR continues executing, allowing you to identify other errors
d174 1
a174 1
The GNU linker \f(CWld\fR is meant to cover a broad range of situations,
d178 1
d181 1
a181 1
For instance, a frequent use of \f(CWld\fR is to link standard Unix
d183 1
a183 1
link a file \f(CWhello.o\fR:
d185 1
a185 2
.Vb 2
\&        
d188 3
a190 3
This tells \f(CWld\fR to produce a file called \fIoutput\fR as the
result of linking the file \f(CW/lib/crt0.o\fR with \f(CWhello.o\fR and
the library \f(CWlibc.a\fR, which will come from the standard search
d193 1
a193 1
Some of the command-line options to \f(CWld\fR may be specified at any
d220 1
a220 1
\f(CWINPUT\fR or \f(CWGROUP\fR to load other objects.  Note that
d223 1
a223 1
appear once, such as the \f(CWSECTIONS\fR or \f(CWMEMORY\fR command, you
d233 2
a234 2
\fB--trace-symbol\fR are equivalent.  Note \- there is one exception to
this rule.  Multiple letter options that start with a lower case \*(L'o\*(R' can
d236 2
a237 2
\fB\-o\fR option.  So for example \fB\-omagic\fR sets the output file
name to \fBmagic\fR whereas \fB--omagic\fR sets the NMAGIC flag on the
d243 1
a243 1
\fB--trace-symbol foo\fR and \fB--trace-symbol=foo\fR are equivalent.
d252 1
a252 2
.Vb 2
\&        
d258 1
a258 1
Here is a table of the generic command line switches accepted by the GNU
d260 2
a261 1
.Ip "\f(CW-a\fIkeyword\fR\fR" 4
d264 2
a265 2
\fBdefault\fR.  \fB\-aarchive\fR is functionally equivalent to
\fB\-Bstatic\fR, and the other two keywords are functionally equivalent
d267 7
a273 5
.Ip "\f(CW-A\fIarchitecture\fR\fR" 4
.Ip "\f(CW--architecture=\fIarchitecture\fR\fR" 4
In the current release of \f(CWld\fR, this option is useful only for the
Intel 960 family of architectures.  In that \f(CWld\fR configuration, the
\fIarchitecture\fR argument identifies the particular architecture in
d277 1
a277 1
Future releases of \f(CWld\fR may support similar functionality for
d279 8
a286 6
.Ip "\f(CW-b \fIinput-format\fR\fR" 4
.Ip "\f(CW--format=\fIinput-format\fR\fR" 4
\f(CWld\fR may be configured to support more than one kind of object
file.  If your \f(CWld\fR is configured this way, you can use the
\fB\-b\fR option to specify the binary format for input object files
that follow this option on the command line.  Even when \f(CWld\fR is
d288 1
a288 1
to specify this, as \f(CWld\fR should be configured to expect as a
d290 1
a290 1
\fIinput-format\fR is a text string, the name of a particular format
d297 1
a297 1
\fB\-b\fR \fIinput-format\fR before each group of object files in a
d301 1
a301 1
\f(CWGNUTARGET\fR.
d304 6
a309 4
\f(CWTARGET\fR;
.Ip "\f(CW-c \fIMRI-commandfile\fR\fR" 4
.Ip "\f(CW--mri-script=\fIMRI-commandfile\fR\fR" 4
For compatibility with linkers produced by \s-1MRI\s0, \f(CWld\fR accepts script
d314 2
a315 2
scripts written in the general-purpose \f(CWld\fR scripting language.
If \fI\s-1MRI\s0\-cmdfile\fR does not exist, \f(CWld\fR looks for it in the directories
d317 6
a322 3
.Ip "\f(CW-d\fR" 4
.Ip "\f(CW-dc\fR" 4
.Ip "\f(CW-dp\fR" 4
d326 5
a330 3
script command \f(CWFORCE_COMMON_ALLOCATION\fR has the same effect.
.Ip "\f(CW-e \fIentry\fR\fR" 4
.Ip "\f(CW--entry=\fIentry\fR\fR" 4
d336 5
a340 3
\fB0\fR for base 8).  
.Ip "\f(CW-E\fR" 4
.Ip "\f(CW--export-dynamic\fR" 4
d349 1
a349 1
If you use \f(CWdlopen\fR to load a dynamic object which needs to refer
d353 2
a354 1
.Ip "\f(CW-EB\fR" 4
d356 2
a357 1
.Ip "\f(CW-EL\fR" 4
d359 4
a362 2
.Ip "\f(CW-f\fR" 4
.Ip "\f(CW--auxiliary \fIname\fR\fR" 4
d372 1
a372 1
\fIname\fR.  If there is one, it will be used instead of the definition
d380 4
a383 2
.Ip "\f(CW-F \fIname\fR\fR" 4
.Ip "\f(CW--filter \fIname\fR\fR" 4
d395 1
a395 1
\fIname\fR.
d397 1
a397 1
Some older linkers used the \f(CW-F\fR option throughout a compilation
d400 3
a402 3
purpose: the \f(CW-b\fR, \f(CW--format\fR, \f(CW--oformat\fR options, the
\f(CWTARGET\fR command in linker scripts, and the \f(CWGNUTARGET\fR
environment variable.  The \s-1GNU\s0 linker will ignore the \f(CW-F\fR
d404 2
a405 1
.Ip "\f(CW-fini \fIname\fR\fR" 4
d408 1
a408 1
address of the function.  By default, the linker uses \f(CW_fini\fR as
d410 2
a411 1
.Ip "\f(CW-g\fR" 4
d413 4
a416 2
.Ip "\f(CW-G\fIvalue\fR\fR" 4
.Ip "\f(CW--gpsize=\fIvalue\fR\fR" 4
d418 2
a419 2
\fIsize\fR.  This is only meaningful for object file formats such as
\s-1MIPS\s0 \s-1ECOFF\s0 which supports putting large and small objects into different
d421 4
a424 2
.Ip "\f(CW-h\fIname\fR\fR" 4
.Ip "\f(CW-soname=\fIname\fR\fR" 4
d430 2
a431 1
.Ip "\f(CW-i\fR" 4
d433 2
a434 1
.Ip "\f(CW-init \fIname\fR\fR" 4
d437 1
a437 1
of the function.  By default, the linker uses \f(CW_init\fR as the
d439 4
a442 2
.Ip "\f(CW-l\fIarchive\fR\fR" 4
.Ip "\f(CW--library=\fIarchive\fR\fR" 4
d444 9
a452 9
option may be used any number of times.  \f(CWld\fR will search its
path-list for occurrences of \f(CWlib\fIarchive\fR.a\fR for every
\fIarchive\fR specified.
.Sp
On systems which support shared libraries, \f(CWld\fR may also search for
libraries with extensions other than \f(CW.a\fR.  Specifically, on \s-1ELF\s0
and SunOS systems, \f(CWld\fR will search a directory for a library with
an extension of \f(CW.so\fR before searching for one with an extension of
\&\f(CW.a\fR.  By convention, a \f(CW.so\fR extension indicates a shared
d462 1
a462 1
See the \f(CW-(\fR option for a way to force the linker to search
d468 1
a468 1
if you are using \f(CWld\fR on \s-1AIX\s0, note that it is different from the
d470 6
a475 4
.Ip "\f(CW-L\fIsearchdir\fR\fR" 4
.Ip "\f(CW--library-path=\fIsearchdir\fR\fR" 4
Add path \fIsearchdir\fR to the list of paths that \f(CWld\fR will search
for archive libraries and \f(CWld\fR control scripts.  You may use this
d479 1
a479 1
\f(CW-L\fR options apply to all \f(CW-l\fR options, regardless of the
d483 1
a483 1
\fB\-L\fR) depends on which emulation mode \f(CWld\fR is using, and in
d487 1
a487 1
\f(CWSEARCH_DIR\fR command.  Directories specified this way are searched
d489 2
a490 1
.Ip "\f(CW-m\fIemulation\fR\fR" 4
d492 1
a492 1
emulations with the \fB--verbose\fR or \fB\-V\fR options.
d495 1
a495 1
\f(CWLDEMULATION\fR environment variable, if that is defined.
d499 4
a502 2
.Ip "\f(CW-M\fR" 4
.Ip "\f(CW--print-map\fR" 4
d505 2
a506 1
.Ip "\(bu" 8
d508 1
a508 1
.Ip "\(bu" 8
d510 1
a510 1
.Ip "\(bu" 8
d513 7
a519 2
.Ip "\f(CW-n\fR" 4
.Ip "\f(CW--nmagic\fR" 4
d521 5
a525 3
\f(CWNMAGIC\fR if possible.
.Ip "\f(CW-N\fR" 4
.Ip "\f(CW--omagic\fR" 4
d528 6
a533 4
style magic numbers, mark the output as \f(CWOMAGIC\fR.
.Ip "\f(CW-o \fIoutput\fR\fR" 4
.Ip "\f(CW--output=\fIoutput\fR\fR" 4
Use \fIoutput\fR as the name for the program produced by \f(CWld\fR; if this
d535 4
a538 3
script command \f(CWOUTPUT\fR can also specify the output file name.
.Ip "\f(CW-O \fIlevel\fR\fR" 4
If \fIlevel\fR is a numeric values greater than zero \f(CWld\fR optimizes
d541 4
a544 2
.Ip "\f(CW-q\fR" 4
.Ip "\f(CW--emit-relocs\fR" 4
d549 6
a554 4
.Ip "\f(CW-r\fR" 4
.Ip "\f(CW--relocateable\fR" 4
Generate relocatable output---i.e., generate an output file that can in
turn serve as input to \f(CWld\fR.  This is often called \fIpartial
d557 1
a557 1
\f(CWOMAGIC\fR.
d563 4
a566 2
.Ip "\f(CW-R \fIfilename\fR\fR" 4
.Ip "\f(CW--just-symbols=\fIfilename\fR\fR" 4
d572 1
a572 1
For compatibility with other \s-1ELF\s0 linkers, if the \f(CW-R\fR option is
d574 5
a578 3
the \f(CW-rpath\fR option.
.Ip "\f(CW-s\fR" 4
.Ip "\f(CW--strip-all\fR" 4
d580 4
a583 2
.Ip "\f(CW-S\fR" 4
.Ip "\f(CW--strip-debug\fR" 4
d585 9
a593 5
.Ip "\f(CW-t\fR" 4
.Ip "\f(CW--trace\fR" 4
Print the names of the input files as \f(CWld\fR processes them.
.Ip "\f(CW-T \fIscriptfile\fR\fR" 4
.Ip "\f(CW--script=\fIscriptfile\fR\fR" 4
d595 2
a596 2
\f(CWld\fR's default linker script (rather than adding to it), so
\fIcommandfile\fR must specify everything necessary to describe the
d599 2
a600 2
\f(CWSECTIONS\fR or \f(CWMEMORY\fR command.    If
\fIscriptfile\fR does not exist in the current directory, \f(CWld\fR
d603 4
a606 2
.Ip "\f(CW-u \fIsymbol\fR\fR" 4
.Ip "\f(CW--undefined=\fIsymbol\fR\fR" 4
d611 3
a613 2
option is equivalent to the \f(CWEXTERN\fR linker script command.
.Ip "\f(CW-Ur\fR" 4
d615 3
a617 3
\fB\-r\fR: it generates relocatable output---i.e., an output file that can in
turn serve as input to \f(CWld\fR.  When linking \*(C+ programs, \fB\-Ur\fR
\fIdoes\fR resolve references to constructors, unlike \fB\-r\fR.
d621 3
a623 2
\fB\-r\fR for the others.
.Ip "\f(CW--unique[=\fISECTION\fR]\fR" 4
d625 1
a625 1
\fI\s-1SECTION\s0\fR, or if the optional wildcard \fI\s-1SECTION\s0\fR argument is
d631 7
a637 4
.Ip "\f(CW-v\fR" 4
.Ip "\f(CW--version\fR" 4
.Ip "\f(CW-V\fR" 4
Display the version number for \f(CWld\fR.  The \f(CW-V\fR option also
d639 4
a642 2
.Ip "\f(CW-x\fR" 4
.Ip "\f(CW--discard-all\fR" 4
d644 4
a647 2
.Ip "\f(CW-X\fR" 4
.Ip "\f(CW--discard-locals\fR" 4
d650 4
a653 2
.Ip "\f(CW-y \fIsymbol\fR\fR" 4
.Ip "\f(CW--trace-symbol=\fIsymbol\fR\fR" 4
d660 2
a661 1
.Ip "\f(CW-Y \fIpath\fR\fR" 4
d664 6
a669 5
.Ip "\f(CW-z \fIkeyword\fR\fR" 4
The recognized keywords are \f(CWinitfirst\fR, \f(CWinterpose\fR,
\f(CWloadfltr\fR, \f(CWnodefaultlib\fR, \f(CWnodelete\fR, \f(CWnodlopen\fR,
\f(CWnodump\fR, \f(CWnow\fR and \f(CWorigin\fR. The other keywords are
ignored for Solaris compatibility. \f(CWinitfirst\fR marks the object
d671 2
a672 2
\f(CWinterpose\fR marks the object that its symbol table interposes
before all symbols but the primary executable. \f(CWloadfltr\fR marks
d674 1
a674 1
\f(CWnodefaultlib\fR marks the object that the search for dependencies
d676 10
a685 8
\f(CWnodelete\fR marks the object shouldn't be unloaded at runtime.
\f(CWnodlopen\fR marks the object not available to \f(CWdlopen\fR.
\f(CWnodump\fR marks the object can not be dumped by \f(CWdldump\fR.
\f(CWnow\fR marks the object with the non-lazy runtime binding.
\f(CWorigin\fR marks the object may contain \f(CW$ORIGIN\fR.
\f(CWdefs\fR disallows undefined symbols.
.Ip "\f(CW-( \fIarchives\fR -)\fR" 4
.Ip "\f(CW--start-group \fIarchives\fR --end-group\fR" 4
d701 2
a702 1
.Ip "\f(CW-assert \fIkeyword\fR\fR" 4
d704 6
a709 3
.Ip "\f(CW-Bdynamic\fR" 4
.Ip "\f(CW-dy\fR" 4
.Ip "\f(CW-call_shared\fR" 4
d715 4
a718 3
\f(CW-l\fR options which follow it.
.Ip "\f(CW-Bgroup\fR" 4
Set the \f(CWDF_1_GROUP\fR flag in the \f(CWDT_FLAGS_1\fR entry in the dynamic
d721 1
a721 1
\f(CW--no-undefined\fR is implied.  This option is only meaningful on \s-1ELF\s0
d723 8
a730 4
.Ip "\f(CW-Bstatic\fR" 4
.Ip "\f(CW-dn\fR" 4
.Ip "\f(CW-non_shared\fR" 4
.Ip "\f(CW-static\fR" 4
d735 3
a737 2
library searching for \f(CW-l\fR options which follow it.
.Ip "\f(CW-Bsymbolic\fR" 4
d743 4
a746 2
.Ip "\f(CW--check-sections\fR" 4
.Ip "\f(CW--no-check-sections\fR" 4
d752 3
a754 2
restored by using the command line switch \fB--check-sections\fR.
.Ip "\f(CW--cref\fR" 4
d764 2
a765 1
.Ip "\f(CW--defsym \fIsymbol\fR=\fIexpression\fR\fR" 4
d771 1
a771 1
symbol, or use \f(CW+\fR and \f(CW-\fR to add or subtract hexadecimal
d775 5
a779 3
\fIexpression\fR.
.Ip "\f(CW--demangle[=\fIstyle\fR]\fR" 4
.Ip "\f(CW--no-demangle\fR" 4
d789 2
a790 1
.Ip "\f(CW--dynamic-linker \fIfile\fR\fR" 4
d795 2
a796 1
.Ip "\f(CW--embedded-relocs\fR" 4
d802 2
a803 1
.Ip "\f(CW--fatal-warnings\fR" 4
d805 2
a806 1
.Ip "\f(CW--force-exe-suffix\fR" 4
d810 2
a811 2
\&\f(CW.exe\fR or \f(CW.dll\fR suffix, this option forces the linker to copy
the output file to one of the same name with a \f(CW.exe\fR suffix. This
d814 5
a818 3
it ends in a \f(CW.exe\fR suffix.
.Ip "\f(CW--no-gc-sections\fR" 4
.Ip "\f(CW--gc-sections\fR" 4
d823 3
a825 2
specifying \fB--no-gc-sections\fR on the command line.
.Ip "\f(CW--help\fR" 4
d827 2
a828 1
.Ip "\f(CW--target-help\fR" 4
d830 2
a831 1
.Ip "\f(CW-Map \fImapfile\fR\fR" 4
d833 5
a837 4
\fB\-M\fR option, above.
.Ip "\f(CW--no-keep-memory\fR" 4
\f(CWld\fR normally optimizes for speed over memory usage by caching the
symbol tables of input files in memory.  This option tells \f(CWld\fR to
d839 1
a839 1
necessary.  This may be required if \f(CWld\fR runs out of memory space
d841 4
a844 2
.Ip "\f(CW--no-undefined\fR" 4
.Ip "\f(CW-z defs\fR" 4
d848 3
a850 2
.Ip "\f(CW--allow-shlib-undefined\fR" 4
Allow undefined symbols in shared objects even  when --no-undefined is
d860 3
a862 2
.Ip "\f(CW--no-warn-mismatch\fR" 4
Normally \f(CWld\fR will give an error if you try to link together input
d865 1
a865 1
This option tells \f(CWld\fR that it should silently permit such possible
d869 3
a871 2
.Ip "\f(CW--no-whole-archive\fR" 4
Turn off the effect of the \f(CW--whole-archive\fR option for subsequent
d873 2
a874 1
.Ip "\f(CW--noinhibit-exec\fR" 4
d879 7
a885 6
.Ip "\f(CW--oformat \fIoutput-format\fR\fR" 4
\f(CWld\fR may be configured to support more than one kind of object
file.  If your \f(CWld\fR is configured this way, you can use the
\fB--oformat\fR option to specify the binary format for the output
object file.  Even when \f(CWld\fR is configured to support alternative
object formats, you don't usually need to specify this, as \f(CWld\fR
d890 1
a890 1
command \f(CWOUTPUT_FORMAT\fR can also specify the output format, but
d892 2
a893 1
.Ip "\f(CW-qmagic\fR" 4
d895 2
a896 1
.Ip "\f(CW-Qy\fR" 4
d898 2
a899 1
.Ip "\f(CW--relax\fR" 4
d903 1
a903 1
On some platforms, the \fB--relax\fR option performs global
d913 1
a913 1
On platforms where this is not supported, \fB--relax\fR is accepted,
d915 2
a916 1
.Ip "\f(CW--retain-symbols-file \fIfilename\fR\fR" 4
d924 1
a924 1
\fB--retain-symbols-file\fR does \fInot\fR discard undefined symbols,
d927 1
a927 1
You may only specify \fB--retain-symbols-file\fR once in the command
d929 2
a930 1
.Ip "\f(CW-rpath \fIdir\fR\fR" 4
d932 1
a932 1
linking an \s-1ELF\s0 executable with shared objects.  All \f(CW-rpath\fR
d934 1
a934 1
them to locate shared objects at runtime.  The \f(CW-rpath\fR option is
d937 3
a939 3
\f(CW-rpath-link\fR option.  If \f(CW-rpath\fR is not used when linking an
\s-1ELF\s0 executable, the contents of the environment variable
\f(CWLD_RUN_PATH\fR will be used if it is defined.
d941 1
a941 1
The \f(CW-rpath\fR option may also be used on SunOS.  By default, on
d943 4
a946 4
\f(CW-L\fR options it is given.  If a \f(CW-rpath\fR option is used, the
runtime search path will be formed exclusively using the \f(CW-rpath\fR
options, ignoring the \f(CW-L\fR options.  This can be useful when using
gcc, which adds many \f(CW-L\fR options which may be on \s-1NFS\s0 mounted
d949 1
a949 1
For compatibility with other \s-1ELF\s0 linkers, if the \f(CW-R\fR option is
d951 3
a953 2
the \f(CW-rpath\fR option.
.Ip "\f(CW-rpath-link \fIDIR\fR\fR" 4
d955 1
a955 1
happens when an \f(CWld -shared\fR link includes a shared library as one
d961 1
a961 1
explicitly.  In such a case, the \f(CW-rpath-link\fR option
d963 1
a963 1
\f(CW-rpath-link\fR option may specify a sequence of directory names
d974 8
a981 7
.Ip "1." 8
Any directories specified by \f(CW-rpath-link\fR options.
.Ip "2." 8
Any directories specified by \f(CW-rpath\fR options.  The difference
between \f(CW-rpath\fR and \f(CW-rpath-link\fR is that directories
specified by \f(CW-rpath\fR options are included in the executable and
used at runtime, whereas the \f(CW-rpath-link\fR option is only effective
d983 2
a984 2
.Ip "3." 8
On an \s-1ELF\s0 system, if the \f(CW-rpath\fR and \f(CWrpath-link\fR options
d986 5
a990 5
\f(CWLD_RUN_PATH\fR. It is for the native linker only.
.Ip "4." 8
On SunOS, if the \f(CW-rpath\fR option was not used, search any
directories specified using \f(CW-L\fR options.
.Ip "5." 8
d992 7
a998 7
\f(CWLD_LIBRARY_PATH\fR.
.Ip "6." 8
For a native \s-1ELF\s0 linker, the directories in \f(CWDT_RUNPATH\fR or
\f(CWDT_RPATH\fR of a shared library are searched for shared
libraries needed by it. The \f(CWDT_RPATH\fR entries are ignored if
\f(CWDT_RUNPATH\fR entries exist.
.Ip "7." 8
d1000 1
a1000 1
.Ip "8." 8
d1003 2
d1008 5
a1012 2
.Ip "\f(CW-shared\fR" 4
.Ip "\f(CW-Bshareable\fR" 4
d1015 1
a1015 1
shared library if the \f(CW-e\fR option is not used and there are
d1017 3
a1019 2
.Ip "\f(CW--sort-common\fR" 4
This option tells \f(CWld\fR to sort the common symbols by size when it
d1024 3
a1026 2
.Ip "\f(CW--split-by-file [\fIsize\fR]\fR" 4
Similar to \f(CW--split-by-reloc\fR but creates a new output section for
d1029 2
a1030 1
.Ip "\f(CW--split-by-reloc [\fIcount\fR]\fR" 4
d1041 2
a1042 1
.Ip "\f(CW--stats\fR" 4
d1045 4
a1048 3
.Ip "\f(CW--traditional-format\fR" 4
For some targets, the output of \f(CWld\fR is different in some ways from
the output of some existing linker.  This switch requests \f(CWld\fR to
d1051 1
a1051 1
For example, on SunOS, \f(CWld\fR combines duplicate entries in the
d1054 2
a1055 2
\f(CWdbx\fR program can not read the resulting program (\f(CWgdb\fR has no
trouble).  The \fB--traditional-format\fR switch tells \f(CWld\fR to not
d1057 2
a1058 1
.Ip "\f(CW--section-start \fIsectionname\fR=\fIorg\fR\fR" 4
d1063 1
a1063 1
\fIorg\fR must be a single hexadecimal integer;
d1065 1
a1065 1
\fB0x\fR usually associated with hexadecimal values.  \fINote:\fR there
d1068 9
a1076 6
.Ip "\f(CW-Tbss \fIorg\fR\fR" 4
.Ip "\f(CW-Tdata \fIorg\fR\fR" 4
.Ip "\f(CW-Ttext \fIorg\fR\fR" 4
Use \fIorg\fR as the starting address for---respectively---the
\f(CWbss\fR, \f(CWdata\fR, or the \f(CWtext\fR segment of the output file.
\fIorg\fR must be a single hexadecimal integer;
d1078 6
a1083 4
\fB0x\fR usually associated with hexadecimal values.
.Ip "\f(CW--dll-verbose\fR" 4
.Ip "\f(CW--verbose\fR" 4
Display the version number for \f(CWld\fR and list the linker emulations
d1086 2
a1087 1
.Ip "\f(CW--version-script=\fIversion-scriptfile\fR\fR" 4
d1092 2
a1093 1
.Ip "\f(CW--warn-common\fR" 4
d1102 3
a1104 1
.Ip "\fBint i = 1;\fR" 8
d1107 2
a1108 1
.Ip "\fBextern int i;\fR" 8
d1112 2
a1113 1
.Ip "\fBint i;\fR" 8
d1120 2
d1123 1
a1123 1
The \fB--warn-common\fR option can produce five kinds of warnings.
d1128 3
a1130 1
.Ip "1." 8
d1133 7
a1139 5
	
	\fIfile\fR(\fIsection\fR): warning: common of `\fIsymbol\fR\*(R'
	   overridden by definition
	\fIfile\fR(\fIsection\fR): warning: defined here
.Ip "2." 8
d1143 7
a1149 5
	
	\fIfile\fR(\fIsection\fR): warning: definition of `\fIsymbol\fR\*(R'
	   overriding common
	\fIfile\fR(\fIsection\fR): warning: common is here
.Ip "3." 8
d1151 7
a1157 5
	
	\fIfile\fR(\fIsection\fR): warning: multiple common
	   of `\fIsymbol\fR\*(R'
	\fIfile\fR(\fIsection\fR): warning: previous common is here
.Ip "4." 8
d1159 7
a1165 5
	
	\fIfile\fR(\fIsection\fR): warning: common of `\fIsymbol\fR\*(R'
	   overridden by larger common
	\fIfile\fR(\fIsection\fR): warning: larger common is here
.Ip "5." 8
d1169 11
a1179 5
	
	\fIfile\fR(\fIsection\fR): warning: common of `\fIsymbol\fR\*(R'
	   overriding smaller common
	\fIfile\fR(\fIsection\fR): warning: smaller common is here
.Ip "\f(CW--warn-constructors\fR" 4
d1183 2
a1184 1
.Ip "\f(CW--warn-multiple-gp\fR" 4
d1196 2
a1197 1
.Ip "\f(CW--warn-once\fR" 4
d1200 2
a1201 1
.Ip "\f(CW--warn-section-align\fR" 4
d1205 1
a1205 1
is, if the \f(CWSECTIONS\fR command does not specify a start address for
d1207 2
a1208 1
.Ip "\f(CW--whole-archive\fR" 4
d1210 1
a1210 1
\f(CW--whole-archive\fR option, include every object file in the archive
d1217 2
a1218 2
about this option, so you have to use \f(CW-Wl,-whole-archive\fR.
Second, don't forget to use \f(CW-Wl,-no-whole-archive\fR after your
d1221 2
a1222 1
.Ip "\f(CW--wrap \fIsymbol\fR\fR" 4
d1224 3
a1226 3
\fIsymbol\fR will be resolved to \f(CW__wrap_\fIsymbol\fR\fR.  Any
undefined reference to \f(CW__real_\fIsymbol\fR\fR will be resolved to
\fIsymbol\fR.
d1229 1
a1229 1
wrapper function should be called \f(CW__wrap_\fIsymbol\fR\fR.  If it
d1231 1
a1231 1
\f(CW__real_\fIsymbol\fR\fR.
d1235 1
a1235 2
.Vb 7
\&        
d1243 14
a1256 12
If you link other code with this file using \f(CW--wrap malloc\fR, then
all calls to \f(CWmalloc\fR will call the function \f(CW__wrap_malloc\fR
instead.  The call to \f(CW__real_malloc\fR in \f(CW__wrap_malloc\fR will
call the real \f(CWmalloc\fR function.
.Sp
You may wish to provide a \f(CW__real_malloc\fR function as well, so that
links without the \f(CW--wrap\fR option will succeed.  If you do this,
you should not put the definition of \f(CW__real_malloc\fR in the same
file as \f(CW__wrap_malloc\fR; if you do, the assembler may resolve the
call before the linker has a chance to wrap it to \f(CWmalloc\fR.
.Ip "\f(CW--enable-new-dtags\fR" 4
.Ip "\f(CW--disable-new-dtags\fR" 4
d1259 2
a1260 2
\f(CW--enable-new-dtags\fR, the dynamic tags will be created as needed.
If you specify \f(CW--disable-new-dtags\fR, no new dynamic tags will be
d1264 1
a1264 1
The i386 \s-1PE\s0 linker supports the \f(CW-shared\fR option, which causes
d1266 1
a1266 1
normal executable.  You should name the output \f(CW*.dll\fR when you
d1268 1
a1268 1
\f(CW*.def\fR files, which may be specified on the linker command line
d1275 1
a1275 1
\s-1PE\s0 target.  Options that take values may be separated from their
d1277 2
a1278 1
.Ip "\f(CW--add-stdcall-alias\fR" 4
d1281 2
a1282 1
.Ip "\f(CW--base-file \fIfile\fR\fR" 4
d1285 3
a1287 2
\fIdlltool\fR.
.Ip "\f(CW--dll\fR" 4
d1289 1
a1289 1
\f(CW-shared\fR or specify a \f(CWLIBRARY\fR in a given \f(CW.def\fR
d1291 4
a1294 2
.Ip "\f(CW--enable-stdcall-fixup\fR" 4
.Ip "\f(CW--disable-stdcall-fixup\fR" 4
d1299 3
a1301 3
undefined symbol \f(CW_foo\fR might be linked to the function
\f(CW_foo@@12\fR, or the undefined symbol \f(CW_bar@@16\fR might be linked
to the function \f(CW_bar\fR.  When the linker does this, it prints a
d1304 1
a1304 1
to be usable.  If you specify \f(CW--enable-stdcall-fixup\fR, this
d1306 1
a1306 1
\f(CW--disable-stdcall-fixup\fR, this feature is disabled and such
d1308 2
a1309 1
.Ip "\f(CW--export-all-symbols\fR" 4
d1315 2
a1316 2
option is given.  Note that the symbols \f(CWDllMain@@12\fR,
\f(CWDllEntryPoint@@0\fR, and \f(CWimpure_ptr\fR will not be automatically
d1318 2
a1319 1
.Ip "\f(CW--exclude-symbols \fIsymbol\fR,\fIsymbol\fR,...\fR" 4
d1322 2
a1323 1
.Ip "\f(CW--file-alignment\fR" 4
d1327 4
a1330 2
.Ip "\f(CW--heap \fIreserve\fR\fR" 4
.Ip "\f(CW--heap \fIreserve\fR,\fIcommit\fR\fR" 4
d1334 2
a1335 1
.Ip "\f(CW--image-base \fIvalue\fR\fR" 4
d1342 2
a1343 1
.Ip "\f(CW--kill-at\fR" 4
d1346 2
a1347 1
.Ip "\f(CW--major-image-version \fIvalue\fR\fR" 4
d1349 2
a1350 1
.Ip "\f(CW--major-os-version \fIvalue\fR\fR" 4
d1352 2
a1353 1
.Ip "\f(CW--major-subsystem-version \fIvalue\fR\fR" 4
d1355 2
a1356 1
.Ip "\f(CW--minor-image-version \fIvalue\fR\fR" 4
d1358 2
a1359 1
.Ip "\f(CW--minor-os-version \fIvalue\fR\fR" 4
d1361 2
a1362 1
.Ip "\f(CW--minor-subsystem-version \fIvalue\fR\fR" 4
d1364 2
a1365 1
.Ip "\f(CW--output-def \fIfile\fR\fR" 4
d1368 2
a1369 2
(which should be called \f(CW*.def\fR) may be used to create an import
library with \f(CWdlltool\fR or may be used as a reference to
d1371 2
a1372 1
.Ip "\f(CW--section-alignment\fR" 4
d1375 4
a1378 2
.Ip "\f(CW--stack \fIreserve\fR\fR" 4
.Ip "\f(CW--stack \fIreserve\fR,\fIcommit\fR\fR" 4
d1382 6
a1387 3
.Ip "\f(CW--subsystem \fIwhich\fR\fR" 4
.Ip "\f(CW--subsystem \fIwhich\fR:\fImajor\fR\fR" 4
.Ip "\f(CW--subsystem \fIwhich\fR:\fImajor\fR.\fIminor\fR\fR" 4
d1389 2
a1390 2
legal values for \fIwhich\fR are \f(CWnative\fR, \f(CWwindows\fR,
\f(CWconsole\fR, and \f(CWposix\fR.  You may optionally set the
d1393 3
a1395 2
You can change the behavior of \f(CWld\fR with the environment variables
\f(CWGNUTARGET\fR, \f(CWLDEMULATION\fR, and \f(CWCOLLECT_NO_DEMANGLE\fR.
d1397 5
a1401 5
\f(CWGNUTARGET\fR determines the input-file object format if you don't
use \fB\-b\fR (or its synonym \fB--format\fR).  Its value should be one
of the BFD names for an input format.  If there is no
\f(CWGNUTARGET\fR in the environment, \f(CWld\fR uses the natural format
of the target. If \f(CWGNUTARGET\fR is set to \f(CWdefault\fR then BFD
d1406 1
a1406 1
BFD on each system places the conventional format for that system first
d1409 2
a1410 2
\f(CWLDEMULATION\fR determines the default emulation if you don't use the
\fB\-m\fR option.  The emulation can affect various aspects of linker
d1412 2
a1413 2
available emulations with the \fB--verbose\fR or \fB\-V\fR options.  If
the \fB\-m\fR option is not used, and the \f(CWLDEMULATION\fR environment
d1418 1
a1418 1
\f(CWCOLLECT_NO_DEMANGLE\fR is set in the environment, then it will
d1420 2
a1421 2
a similar fashion by the \f(CWgcc\fR linker wrapper program.  The default
may be overridden by the \fB--demangle\fR and \fB--no-demangle\fR
d1424 2
a1425 1
\fIar\fR\|(1), \fInm\fR\|(1), \fIobjcopy\fR\|(1), \fIobjdump\fR\|(1), \fIreadelf\fR\|(1) and
d1427 1
a1427 1
\fIld\fR.
d1429 1
d1433 1
a1433 1
under the terms of the GNU Free Documentation License, Version 1.1
d1437 1
a1437 378
section entitled \*(L"GNU Free Documentation License\*(R".

.rn }` ''
.IX Title "LD 1"
.IX Name "ld - Using LD, the GNU linker"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "OPTIONS"

.IX Item "\f(CW-a\fIkeyword\fR\fR"

.IX Item "\f(CW-A\fIarchitecture\fR\fR"

.IX Item "\f(CW--architecture=\fIarchitecture\fR\fR"

.IX Item "\f(CW-b \fIinput-format\fR\fR"

.IX Item "\f(CW--format=\fIinput-format\fR\fR"

.IX Item "\f(CW-c \fIMRI-commandfile\fR\fR"

.IX Item "\f(CW--mri-script=\fIMRI-commandfile\fR\fR"

.IX Item "\f(CW-d\fR"

.IX Item "\f(CW-dc\fR"

.IX Item "\f(CW-dp\fR"

.IX Item "\f(CW-e \fIentry\fR\fR"

.IX Item "\f(CW--entry=\fIentry\fR\fR"

.IX Item "\f(CW-E\fR"

.IX Item "\f(CW--export-dynamic\fR"

.IX Item "\f(CW-EB\fR"

.IX Item "\f(CW-EL\fR"

.IX Item "\f(CW-f\fR"

.IX Item "\f(CW--auxiliary \fIname\fR\fR"

.IX Item "\f(CW-F \fIname\fR\fR"

.IX Item "\f(CW--filter \fIname\fR\fR"

.IX Item "\f(CW-fini \fIname\fR\fR"

.IX Item "\f(CW-g\fR"

.IX Item "\f(CW-G\fIvalue\fR\fR"

.IX Item "\f(CW--gpsize=\fIvalue\fR\fR"

.IX Item "\f(CW-h\fIname\fR\fR"

.IX Item "\f(CW-soname=\fIname\fR\fR"

.IX Item "\f(CW-i\fR"

.IX Item "\f(CW-init \fIname\fR\fR"

.IX Item "\f(CW-l\fIarchive\fR\fR"

.IX Item "\f(CW--library=\fIarchive\fR\fR"

.IX Item "\f(CW-L\fIsearchdir\fR\fR"

.IX Item "\f(CW--library-path=\fIsearchdir\fR\fR"

.IX Item "\f(CW-m\fIemulation\fR\fR"

.IX Item "\f(CW-M\fR"

.IX Item "\f(CW--print-map\fR"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\f(CW-n\fR"

.IX Item "\f(CW--nmagic\fR"

.IX Item "\f(CW-N\fR"

.IX Item "\f(CW--omagic\fR"

.IX Item "\f(CW-o \fIoutput\fR\fR"

.IX Item "\f(CW--output=\fIoutput\fR\fR"

.IX Item "\f(CW-O \fIlevel\fR\fR"

.IX Item "\f(CW-q\fR"

.IX Item "\f(CW--emit-relocs\fR"

.IX Item "\f(CW-r\fR"

.IX Item "\f(CW--relocateable\fR"

.IX Item "\f(CW-R \fIfilename\fR\fR"

.IX Item "\f(CW--just-symbols=\fIfilename\fR\fR"

.IX Item "\f(CW-s\fR"

.IX Item "\f(CW--strip-all\fR"

.IX Item "\f(CW-S\fR"

.IX Item "\f(CW--strip-debug\fR"

.IX Item "\f(CW-t\fR"

.IX Item "\f(CW--trace\fR"

.IX Item "\f(CW-T \fIscriptfile\fR\fR"

.IX Item "\f(CW--script=\fIscriptfile\fR\fR"

.IX Item "\f(CW-u \fIsymbol\fR\fR"

.IX Item "\f(CW--undefined=\fIsymbol\fR\fR"

.IX Item "\f(CW-Ur\fR"

.IX Item "\f(CW--unique[=\fISECTION\fR]\fR"

.IX Item "\f(CW-v\fR"

.IX Item "\f(CW--version\fR"

.IX Item "\f(CW-V\fR"

.IX Item "\f(CW-x\fR"

.IX Item "\f(CW--discard-all\fR"

.IX Item "\f(CW-X\fR"

.IX Item "\f(CW--discard-locals\fR"

.IX Item "\f(CW-y \fIsymbol\fR\fR"

.IX Item "\f(CW--trace-symbol=\fIsymbol\fR\fR"

.IX Item "\f(CW-Y \fIpath\fR\fR"

.IX Item "\f(CW-z \fIkeyword\fR\fR"

.IX Item "\f(CW-( \fIarchives\fR -)\fR"

.IX Item "\f(CW--start-group \fIarchives\fR --end-group\fR"

.IX Item "\f(CW-assert \fIkeyword\fR\fR"

.IX Item "\f(CW-Bdynamic\fR"

.IX Item "\f(CW-dy\fR"

.IX Item "\f(CW-call_shared\fR"

.IX Item "\f(CW-Bgroup\fR"

.IX Item "\f(CW-Bstatic\fR"

.IX Item "\f(CW-dn\fR"

.IX Item "\f(CW-non_shared\fR"

.IX Item "\f(CW-static\fR"

.IX Item "\f(CW-Bsymbolic\fR"

.IX Item "\f(CW--check-sections\fR"

.IX Item "\f(CW--no-check-sections\fR"

.IX Item "\f(CW--cref\fR"

.IX Item "\f(CW--defsym \fIsymbol\fR=\fIexpression\fR\fR"

.IX Item "\f(CW--demangle[=\fIstyle\fR]\fR"

.IX Item "\f(CW--no-demangle\fR"

.IX Item "\f(CW--dynamic-linker \fIfile\fR\fR"

.IX Item "\f(CW--embedded-relocs\fR"

.IX Item "\f(CW--fatal-warnings\fR"

.IX Item "\f(CW--force-exe-suffix\fR"

.IX Item "\f(CW--no-gc-sections\fR"

.IX Item "\f(CW--gc-sections\fR"

.IX Item "\f(CW--help\fR"

.IX Item "\f(CW--target-help\fR"

.IX Item "\f(CW-Map \fImapfile\fR\fR"

.IX Item "\f(CW--no-keep-memory\fR"

.IX Item "\f(CW--no-undefined\fR"

.IX Item "\f(CW-z defs\fR"

.IX Item "\f(CW--allow-shlib-undefined\fR"

.IX Item "\f(CW--no-warn-mismatch\fR"

.IX Item "\f(CW--no-whole-archive\fR"

.IX Item "\f(CW--noinhibit-exec\fR"

.IX Item "\f(CW--oformat \fIoutput-format\fR\fR"

.IX Item "\f(CW-qmagic\fR"

.IX Item "\f(CW-Qy\fR"

.IX Item "\f(CW--relax\fR"

.IX Item "\f(CW--retain-symbols-file \fIfilename\fR\fR"

.IX Item "\f(CW-rpath \fIdir\fR\fR"

.IX Item "\f(CW-rpath-link \fIDIR\fR\fR"

.IX Item "1."

.IX Item "2."

.IX Item "3."

.IX Item "4."

.IX Item "5."

.IX Item "6."

.IX Item "7."

.IX Item "8."

.IX Item "\f(CW-shared\fR"

.IX Item "\f(CW-Bshareable\fR"

.IX Item "\f(CW--sort-common\fR"

.IX Item "\f(CW--split-by-file [\fIsize\fR]\fR"

.IX Item "\f(CW--split-by-reloc [\fIcount\fR]\fR"

.IX Item "\f(CW--stats\fR"

.IX Item "\f(CW--traditional-format\fR"

.IX Item "\f(CW--section-start \fIsectionname\fR=\fIorg\fR\fR"

.IX Item "\f(CW-Tbss \fIorg\fR\fR"

.IX Item "\f(CW-Tdata \fIorg\fR\fR"

.IX Item "\f(CW-Ttext \fIorg\fR\fR"

.IX Item "\f(CW--dll-verbose\fR"

.IX Item "\f(CW--verbose\fR"

.IX Item "\f(CW--version-script=\fIversion-scriptfile\fR\fR"

.IX Item "\f(CW--warn-common\fR"

.IX Item "\fBint i = 1;\fR"

.IX Item "\fBextern int i;\fR"

.IX Item "\fBint i;\fR"

.IX Item "1."

.IX Item "2."

.IX Item "3."

.IX Item "4."

.IX Item "5."

.IX Item "\f(CW--warn-constructors\fR"

.IX Item "\f(CW--warn-multiple-gp\fR"

.IX Item "\f(CW--warn-once\fR"

.IX Item "\f(CW--warn-section-align\fR"

.IX Item "\f(CW--whole-archive\fR"

.IX Item "\f(CW--wrap \fIsymbol\fR\fR"

.IX Item "\f(CW--enable-new-dtags\fR"

.IX Item "\f(CW--disable-new-dtags\fR"

.IX Item "\f(CW--add-stdcall-alias\fR"

.IX Item "\f(CW--base-file \fIfile\fR\fR"

.IX Item "\f(CW--dll\fR"

.IX Item "\f(CW--enable-stdcall-fixup\fR"

.IX Item "\f(CW--disable-stdcall-fixup\fR"

.IX Item "\f(CW--export-all-symbols\fR"

.IX Item "\f(CW--exclude-symbols \fIsymbol\fR,\fIsymbol\fR,...\fR"

.IX Item "\f(CW--file-alignment\fR"

.IX Item "\f(CW--heap \fIreserve\fR\fR"

.IX Item "\f(CW--heap \fIreserve\fR,\fIcommit\fR\fR"

.IX Item "\f(CW--image-base \fIvalue\fR\fR"

.IX Item "\f(CW--kill-at\fR"

.IX Item "\f(CW--major-image-version \fIvalue\fR\fR"

.IX Item "\f(CW--major-os-version \fIvalue\fR\fR"

.IX Item "\f(CW--major-subsystem-version \fIvalue\fR\fR"

.IX Item "\f(CW--minor-image-version \fIvalue\fR\fR"

.IX Item "\f(CW--minor-os-version \fIvalue\fR\fR"

.IX Item "\f(CW--minor-subsystem-version \fIvalue\fR\fR"

.IX Item "\f(CW--output-def \fIfile\fR\fR"

.IX Item "\f(CW--section-alignment\fR"

.IX Item "\f(CW--stack \fIreserve\fR\fR"

.IX Item "\f(CW--stack \fIreserve\fR,\fIcommit\fR\fR"

.IX Item "\f(CW--subsystem \fIwhich\fR\fR"

.IX Item "\f(CW--subsystem \fIwhich\fR:\fImajor\fR\fR"

.IX Item "\f(CW--subsystem \fIwhich\fR:\fImajor\fR.\fIminor\fR\fR"

.IX Header "ENVIRONMENT"

.IX Header "SEE ALSO"

.IX Header "COPYRIGHT"

@


1.9
log
@Automate generate on man pages
@
text
@d96 1
a96 1
.TH LD 1 "binutils-2.11.90" "23/Mar/101" "GNU"
d753 2
d1493 2
@


1.8
log
@	* emultempl/elf32.em (OPTION_GROUP): New macro.
	Add new option Bgroup to longopts.
	(gld*_parse_args): Handle GROUP_OPTION and recognize -z defs.
	(gld*_list_options): Add -Bgroup and -z defs.
	* ld.1: Document -Bgroup and -z defs.
	* ld.texinfo: Likewise.
@
text
@d1 27
a27 8
.\" Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
.\" 2001 Free Software Foundation, Inc.
.\" See section COPYING for conditions for redistribution
.TH ld 1 "" "Free Software Foundation" "GNU Development Tools"
.de BP
.sp
.ti \-.2i
\(**
d29 2
d32 168
a199 164
.SH NAME
ld \- the GNU linker

.SH SYNOPSIS
.hy 0
.na
.TP
.B ld 
.RB "[\|" \-o "
.I output\c
\&\|] \c
.I objfile\c
\&.\|.\|.
.br
.RB "[\|" \-A\c
.I architecture\c
\&\|] 
.RB "[\|" "\-b\ "\c
.I input-format\c
\&\|] 
.RB "[\|" \-Bstatic "\|]"  
.RB "[\|" \-Bgroup "\|]"  
.RB "[\|" \-Bdynamic "\|]"  
.RB "[\|" \-Bsymbolic "\|]"  
.RB "[\|" "\-c\ "\c
.I commandfile\c
\&\|] 
.RB "[\|" \-\-cref "\|]"
.RB "[\|" \-d | \-dc | \-dp\c
\|]
.br
.RB "[\|" "\-defsym\ "\c
.I symbol\c
\&=\c
.I expression\c
\&\|]
.RB "[\|" \-\-demangle "\|]"
.RB "[\|" \-\-no\-demangle "\|]"
.RB "[\|" "\-e\ "\c
.I entry\c
\&\|] 
.RB "[\|" \-embedded\-relocs "\|]"
.RB "[\|" \-E "\|]" 
.RB "[\|" \-export\-dynamic "\|]"
.RB "[\|" "\-f\ "\c
.I name\c
\&\|]
.RB "[\|" "\-\-auxiliary\ "\c
.I name\c
\&\|]
.RB "[\|" "\-F\ "\c
.I name\c
\&\|]
.RB "[\|" "\-\-filter\ "\c
.I name\c
\&\|]
.RB "[\|" "\-format\ "\c
.I input-format\c
\&\|] 
.RB "[\|" \-g "\|]" 
.RB "[\|" \-G
.I size\c
\&\|]
.RB "[\|" "\-h\ "\c
.I name\c
\&\|]
.RB "[\|" "\-soname\ "\c
.I name\c
\&\|]
.RB "[\|" \-\-help "\|]"
.RB "[\|" \-i "\|]"
.RB "[\|" \-l\c
.I ar\c
\&\|] 
.RB "[\|" \-L\c
.I searchdir\c
\&\|] 
.RB "[\|" \-M "\|]" 
.RB "[\|" \-Map
.I mapfile\c
\&\|] 
.RB "[\|" \-m
.I emulation\c
\&\|] 
.RB "[\|" \-n | \-N "\|]" 
.RB "[\|" \-noinhibit-exec "\|]" 
.RB "[\|" \-no\-keep\-memory "\|]" 
.RB "[\|" \-no\-warn\-mismatch "\|]" 
.RB "[\|" \-O\c
.I level\c
\&\|]
.RB "[\|" "\--oformat\ "\c
.I output-format\c
\&\|] 
.RB "[\|" "\-R\ "\c
.I filename\c
\&\|]
.RB "[\|" \-relax "\|]"
.RB "[\|" \-r | \-Ur "\|]" 
.RB "[\|" "\-rpath\ "\c
.I directory\c
\&\|]
.RB "[\|" "\-rpath\-link\ "\c
.I directory\c
\&\|]
.RB "[\|" \-S "\|]" 
.RB "[\|" \-s "\|]" 
.RB "[\|" \-shared "\|]" 
.RB "[\|" \-sort\-common "\|]" 
.RB "[\|" "\-split\-by\-reloc\ "\c
.I count\c
\&\|]
.RB "[\|" \-split\-by\-file "\|]" 
.RB "[\|" "\-T\ "\c
.I commandfile\c
\&\|]  
.RB "[\|" "\-\-section\-start\ "\c
.I sectionname\c
\&=\c
.I sectionorg\c
\&\|]
.RB "[\|" "\-Ttext\ "\c
.I textorg\c
\&\|] 
.RB "[\|" "\-Tdata\ "\c
.I dataorg\c
\&\|] 
.RB "[\|" "\-Tbss\ "\c
.I bssorg\c
\&\|]
.RB "[\|" \-t "\|]" 
.RB "[\|" "\-u\ "\c
.I sym\c
\&]
.RB "[\|" \-V "\|]"
.RB "[\|" \-v "\|]"
.RB "[\|" \-\-verbose "\|]"
.RB "[\|" \-\-version "\|]"
.RB "[\|" \-warn\-common "\|]" 
.RB "[\|" \-warn\-constructors "\|]" 
.RB "[\|" \-warn\-multiple\-gp "\|]" 
.RB "[\|" \-warn\-once "\|]" 
.RB "[\|" \-warn\-section\-align "\|]" 
.RB "[\|" \-\-whole\-archive "\|]" 
.RB "[\|" \-\-no\-whole\-archive "\|]" 
.RB "[\|" "\-\-wrap\ "\c
.I symbol\c
\&\|]
.RB "[\|" \-X "\|]" 
.RB "[\|" \-x "\|]" 
.ad b
.hy 1
.SH DESCRIPTION
\c
.B ld\c
\& combines a number of object and archive files, relocates
their data and ties up symbol references. Often the last step in
building a new compiled program to run is a call to \c
.B ld\c
\&.

\c
.B ld\c
\& accepts Linker Command Language files 
d201 12
a212 25
This man page does not describe the command language; see the `\|\c
.B ld\c
\|' entry in `\|\c
.B info\c
\|', or the manual
.I
ld: the GNU linker
\&, for full details on the command language and on other aspects of
the GNU linker. 

This version of \c
.B ld\c
\& uses the general purpose BFD libraries
to operate on object files. This allows \c
.B ld\c
\& to read, combine, and
write object files in many different formats\(em\&for example, COFF or
\c
.B a.out\c
\&.  Different formats may be linked together to produce any
available kind of object file.  You can use `\|\c
.B objdump \-i\c
\|' to get a list of formats supported on various architectures; see 
.BR objdump ( 1 ).

d216 1
a216 3
\c
.B ld\c
\& continues executing, allowing you to identify other errors
d218 2
a219 4

The GNU linker \c
.B ld\c
\& is meant to cover a broad range of situations,
d221 5
a225 9
you have many choices to control its behavior through the command line,
and through environment variables.

.SH OPTIONS
The plethora of command-line options may seem intimidating, but in
actual practice few of them are used in any particular context.
For instance, a frequent use of \c
.B ld\c
\& is to link standard Unix
d227 16
a242 27
link a file \c
.B hello.o\c
\&:
.sp
.br
$\ ld\ \-o\ output\ /lib/crt0.o\ hello.o\ \-lc
.br
.sp
This tells \c
.B ld\c
\& to produce a file called \c
.B output\c
\& as the
result of linking the file \c
.B /lib/crt0.o\c
\& with \c
.B hello.o\c
\& and
the library \c
.B libc.a\c
\& which will come from the standard search
directories.

The command-line options to \c
.B ld\c
\& may be specified in any order, and
may be repeated at will.  For the most part, repeating an option with a
d244 29
a272 48
occurrences (those further to the left on the command line) of an
option.  

The exceptions\(em\&which may meaningfully be used more than once\(em\&are
\c
.B \-A\c
\&, \c
.B \-b\c
\& (or its synonym \c
.B \-format\c
\&), \c
.B \-defsym\c
\&, \c
.B \-\-section\-start\c
\&, \c
.B \-L\c
\&, \c
.B \-l\c
\&, \c
.B \-R\c
\&, and \c
.B \-u\c
\&.

The list of object files to be linked together, shown as \c
.I objfile\c
\&,
may follow, precede, or be mixed in with command-line options; save that
an \c
.I objfile\c
\& argument may not be placed between an option flag and
its argument.

Usually the linker is invoked with at least one object file, but other
forms of binary input files can also be specified with \c
.B \-l\c
\&,
\c
.B \-R\c
\&, and the script command language.  If \c
.I no\c
\& binary input
files at all are specified, the linker does not produce any output, and
issues the message `\|\c
.B No input files\c
\|'.

Option arguments must either follow the option letter without intervening
d275 46
a320 51

.TP
.BI "-A" "architecture"
In the current release of \c
.B ld\c
\&, this option is useful only for the
Intel 960 family of architectures.  In that \c
.B ld\c
\& configuration, the
\c
.I architecture\c
\& argument is one of the two-letter names identifying
members of the 960 family; the option specifies the desired output
target, and warns of any incompatible instructions in the input files.
It also modifies the linker's search strategy for archive libraries, to
support the use of libraries specific to each particular
architecture, by including in the search loop names suffixed with the
string identifying the architecture.

For example, if your \c
.B ld\c
\& command line included `\|\c
.B \-ACA\c
\|' as
well as `\|\c
.B \-ltry\c
\|', the linker would look (in its built-in search
paths, and in any paths you specify with \c
.B \-L\c
\&) for a library with
the names
.sp
.br
try
.br
libtry.a
.br
tryca
.br
libtryca.a
.br
.sp

The first two possibilities would be considered in any event; the last
two are due to the use of `\|\c
.B \-ACA\c
\|'.

Future releases of \c
.B ld\c
\& may support similar functionality for
d322 13
a334 27

You can meaningfully use \c
.B \-A\c
\& more than once on a command line, if
an architecture family allows combination of target architectures; each
use will add another pair of name variants to search for when \c
.B \-l
specifies a library.

.TP
.BI "\-b " "input-format"
Specify the binary format for input object files that follow this option
on the command line.  You don't usually need to specify this, as
\c
.B ld\c
\& is configured to expect as a default input format the most
usual format on each machine.  \c
.I input-format\c
\& is a text string, the
name of a particular format supported by the BFD libraries.  
\c
.B \-format \c
.I input-format\c
\&\c
\& has the same effect, as does the script command
.BR TARGET .

d336 1
a336 3
binary format.  You can also use \c
.B \-b\c
\& to switch formats explicitly (when
d338 3
a340 7
\c
.B \-b \c
.I input-format\c
\&\c
\& before each group of object files in a
particular format.  

d342 333
a674 13
.B GNUTARGET\c
\&.  You can also define the input
format from a script, using the command \c
.B TARGET\c
\&.

.TP
.B \-Bstatic 
Do not link against shared libraries.  This is only meaningful on
platforms for which shared libraries are supported.

.TP
.B \-Bdynamic
d677 34
a710 48
default on such platforms.

.TP
.B \-Bgroup
Set the \c
.B DF_1_GROUP
\c
flag in the \c
.B DT_FLAGS_1
\c
entry in the dynamic section.  This causes the runtime linker to handle
lookups in this object and its dependencies to be performed only inside
the group.  No undefined symbols are allowed.  This option is only
meaningful on ELF platforms which support shared libraries.

.TP
.B \-Bsymbolic
When creating a shared library, bind references to global symbols to
the definition within the shared library, if any.  Normally, it is
possible for a program linked against a shared library to override the
definition within the shared library.  This option is only meaningful
on ELF platforms which support shared libraries.

.TP
.BI "\-c " "commandfile"
Directs \c
.B ld\c
\& to read link commands from the file
\c
.I commandfile\c
\&.  These commands will completely override \c
.B ld\c
\&'s
default link format (rather than adding to it); \c
.I commandfile\c
\& must
specify everything necessary to describe the target format.


You may also include a script of link commands directly in the command
line by bracketing it between `\|\c
.B {\c
\|' and `\|\c
.B }\c
\|' characters.

.TP
.B \-\-cref
d714 7
a720 20

.TP
.B \-d 
.TP
.B \-dc
.TP
.B \-dp
These three options are equivalent; multiple forms are supported for
compatibility with other linkers.  Use any of them to make \c
.B ld
assign space to common symbols even if a relocatable output file is
specified (\c
.B \-r\c
\&).  The script command
\c
.B FORCE_COMMON_ALLOCATION\c
\& has the same effect.

.TP
.BI "-defsym " "symbol" "\fR=\fP" expression
d722 1
a722 3
address given by \c
.I expression\c
\&.  You may use this option as many
d724 1
a724 3
limited form of arithmetic is supported for the \c
.I expression\c
\& in this
d726 1
a726 5
symbol, or use \c
.B +\c
\& and \c
.B \-\c
\& to add or subtract hexadecimal
d728 13
a740 13
using the linker command language from a script.

.TP
.B \-\-demangle
.TP
.B \-\-no\-demangle
These options control whether to demangle symbol names in error
messages and other output.  When the linker is told to demangle, it
tries to present symbol names in a readable fashion: it strips leading
underscores if they are used by the object file format, and converts
C++ mangled symbol names into user readable names.  The linker will
demangle by default unless the environment variable
.B COLLECT_NO_DEMANGLE
d742 28
a769 85

.TP
.BI "-e " "entry"\c
\& 
Use \c
.I entry\c
\& as the explicit symbol for beginning execution of your
program, rather than the default entry point.  See the `\|\c
.B ld\c
\|' entry in `\|\c
.B info\c
\|' for a
discussion of defaults and other ways of specifying the
entry point.

.TP
.B \-embedded\-relocs
This option is only meaningful when linking MIPS embedded PIC code,
generated by the
.B \-membedded\-pic
option to the GNU compiler and assembler.  It causes the linker to
create a table which may be used at runtime to relocate any data which
was statically initialized to pointer values.  See the code in
testsuite/ld-empic for details.

.TP
.B \-E
.TP
.B \-export\-dynamic
When creating an ELF file, add all symbols to the dynamic symbol table.
Normally, the dynamic symbol table contains only symbols which are used
by a dynamic object.  This option is needed for some uses of
.I dlopen.

.TP
.BI "-f " "name"
.TP
.BI "--auxiliary " "name"
When creating an ELF shared object, set the internal DT_AUXILIARY field
to the specified name.  This tells the dynamic linker that the symbol
table of the shared object should be used as an auxiliary filter on the
symbol table of the shared object
.I name.

.TP
.BI "-F " "name"
.TP
.BI "--filter " "name"
When creating an ELF shared object, set the internal DT_FILTER field to
the specified name.  This tells the dynamic linker that the symbol table
of the shared object should be used as a filter on the symbol table of
the shared object
.I name.

.TP
.BI "\-format " "input\-format"
Synonym for \c
.B \-b\c
\& \c
.I input\-format\c
\&.

.TP
.B \-g
Accepted, but ignored; provided for compatibility with other tools.

.TP
.BI "\-G " "size"\c
Set the maximum size of objects to be optimized using the GP register
to
.I size
under MIPS ECOFF.  Ignored for other object file formats.

.TP
.BI "-h " "name"
.TP
.BI "-soname " "name"
When creating an ELF shared object, set the internal DT_SONAME field to
the specified name.  When an executable is linked with a shared object
which has a DT_SONAME field, then when the executable is run the dynamic
linker will attempt to load the shared object specified by the DT_SONAME
field rather than the using the file name given to the linker.

.TP
.B \-\-help
d771 40
a810 106
This option and
.B \-\-version
begin with two dashes instead of one
for compatibility with other GNU programs.  The other options start with
only one dash for compatibility with other linkers.

.TP
.B \-i
Perform an incremental link (same as option \c
.B \-r\c
\&).

.TP
.BI "\-l" "ar"\c
\& 
Add an archive file \c
.I ar\c
\& to the list of files to link.  This 
option may be used any number of times.  \c
.B ld\c
\& will search its
path-list for occurrences of \c
.B lib\c
.I ar\c
\&.a\c
\& for every \c
.I ar
specified.

.TP
.BI "\-L" "searchdir"
This command adds path \c
.I searchdir\c
\& to the list of paths that
\c
.B ld\c
\& will search for archive libraries.  You may use this option
any number of times.

The default set of paths searched (without being specified with
\c
.B \-L\c
\&) depends on what emulation mode \c
.B ld\c
\& is using, and in
some cases also on how it was configured.    The
paths can also be specified in a link script with the \c
.B SEARCH_DIR
command.

.TP
.B \-M 
Print (to the standard output file) a link map\(em\&diagnostic information
about where symbols are mapped by \c
.B ld\c
\&, and information on global
common storage allocation.

.TP
.BI "\-Map " "mapfile"\c
Print to the file
.I mapfile
a link map\(em\&diagnostic information
about where symbols are mapped by \c
.B ld\c
\&, and information on global
common storage allocation.

.TP
.BI "\-m " "emulation"\c
Emulate the
.I emulation
linker.  You can list the available emulations with the
.I \-\-verbose
or
.I \-V
options.  This option overrides the compiled-in default, which is the
system for which you configured
.BR ld .

.TP
.B \-N 
specifies readable and writable \c
.B text\c
\& and \c
.B data\c
\& sections. If
the output format supports Unix style magic numbers, the output is
marked as \c
.B OMAGIC\c
\&.

When you use the `\|\c
.B \-N\c
\&\|' option, the linker does not page-align the
data segment.

.TP
.B \-n 
sets the text segment to be read only, and \c
.B NMAGIC\c
\& is written
if possible.

.TP
.B \-noinhibit\-exec
d812 48
a859 109
errors during the link process.  With this flag, you can specify that
you wish the output file retained even after non-fatal errors.

.TP
.B \-no\-keep\-memory
The linker normally optimizes for speed over memory usage by caching
the symbol tables of input files in memory.  This option tells the
linker to instead optimize for memory usage, by rereading the symbol
tables as necessary.  This may be required if the linker runs out of
memory space while linking a large executable.

.TP
.B \-no\-warn\-mismatch
Normally the linker will give an error if you try to link together
input files that are mismatched for some reason, perhaps because they
have been compiled for different processors or for different
endiannesses.  This option tells the linker that it should silently
permit such possible errors.  This option should only be used with
care, in cases when you have taken some special action that ensures
that the linker errors are inappropriate.

.TP
.BI "\-o " "output"
.I output\c
\& is a name for the program produced by \c
.B ld\c
\&; if this
option is not specified, the name `\|\c
.B a.out\c
\|' is used by default.  The
script command \c
.B OUTPUT\c
\& can also specify the output file name.

.TP
.BI "\-O" "level"
Generate optimized output files.  This might use significantly more
time and therefore probably should be enabled only for generating the
final binary.
\c
.I level\c
\& is supposed to be a numeric value.  Any value greater than zero enables
the optimizations.

.TP
.BI "\--oformat " "output\-format"
Specify the binary format for the output object file.
You don't usually need to specify this, as
\c
.B ld\c
\& is configured to produce as a default output format the most
usual format on each machine.  \c
.I output-format\c
\& is a text string, the
name of a particular format supported by the BFD libraries.  
The script command
.B OUTPUT_FORMAT
can also specify the output format, but this option overrides it.

.TP
.BI "\-R " "filename"
Read symbol names and their addresses from \c
.I filename\c
\&, but do not
relocate it or include it in the output.  This allows your output file
to refer symbolically to absolute locations of memory defined in other
programs.

.TP
.B \-relax
An option with machine dependent effects.  Currently this option is only
supported on the H8/300.

On some platforms, use this option to perform global optimizations that
become possible when the linker resolves addressing in your program, such
as relaxing address modes and synthesizing new instructions in the
output object file.  

On platforms where this is not supported, `\|\c
.B \-relax\c
\&\|' is accepted, but has no effect.

.TP
.B \-r 
Generates relocatable output\(em\&i.e., generate an output file that can in
turn serve as input to \c
.B ld\c
\&.  This is often called \c
.I partial
linking\c
\&.  As a side effect, in environments that support standard Unix
magic numbers, this option also sets the output file's magic number to
\c
.B OMAGIC\c
\&.
If this option is not specified, an absolute file is produced.  When
linking C++ programs, this option \c
.I will not\c
\& resolve references to
constructors; \c
.B \-Ur\c
\& is an alternative. 

This option does the same as \c
.B \-i\c
\&.

.TP
.B \-rpath\ \fIdirectory
d861 1
a861 2
linking an ELF executable with shared objects.  All 
.B \-rpath
d863 23
a885 37
them to locate shared objects at runtime.  The
.B \-rpath
option is also used when locating shared objects which are needed by
shared objects explicitly included in the link; see the description of
the
.B \-rpath\-link
option.  If
.B \-rpath
is not used when linking an ELF executable, the contents of the
environment variable
.B LD_RUN_PATH
will be used if it is defined.

The
.B \-rpath
option may also be used on SunOS.  By default, on SunOS, the linker
will form a runtime search path out of all the
.B \-L
options it is given.  If a
.B \-rpath
option is used, the runtime search path will be formed exclusively
using the
.B \-rpath
options, ignoring
the
.B \-L
options.  This can be useful when using gcc, which adds many
.B \-L
options which may be on NFS mounted filesystems.

.TP
.B \-rpath\-link\ \fIdirectory
When using ELF or SunOS, one shared library may require another.  This
happens when an
.B ld\ \-shared
link includes a shared library as one of the input files.

d887 1
a887 1
non-relocateable link, it will automatically try to locate the required
d889 42
a930 7
explicitly.  In such a case, the
.B \-rpath\-link
option specifies the first set of directories to search.  The
.B \-rpath\-link
option may specify a sequence of directory names either by specifying
a list of names separated by colons, or by appearing multiple times.

d933 23
a955 38

.TP
.B \-S 
Omits debugger symbol information (but not all symbols) from the output file.

.TP
.B \-s 
Omits all symbol information from the output file.

.TP
.B \-shared
Create a shared library.  This is currently only supported on ELF and
SunOS platforms (on SunOS it is not required, as the linker will
automatically create a shared library when there are undefined symbols
and the
.B \-e
option is not used).

.TP
.B \-sort\-common
Normally, when
.B ld
places the global common symbols in the appropriate output sections,
it sorts them by size.  First come all the one byte symbols, then all
the two bytes, then all the four bytes, and then everything else.
This is to prevent gaps between symbols due to
alignment constraints.  This option disables that sorting.

.TP
.B \-split\-by\-reloc\ \fIcount
Trys to creates extra sections in the output file so that no single
output section in the file contains more than
.I count
relocations.
This is useful when generating huge relocatable for downloading into
certain real time kernels with the COFF object file format; since COFF
cannot represent more than 65535 relocations in a single section.
Note that this will fail to work with object file formats which do not
d957 18
a974 13
input sections for redistribution, so if a single input section
contains more than
.I count
relocations one output section will contain that many relocations.

.TP
.B \-split\-by\-file
Similar to
.B \-split\-by\-reloc
but creates a new output section for each input file.

.TP
.BI "--section-start " "sectionname" "\fR=\fP"org
d976 1
a976 7
address given by \c
.I org\c
\&.  \c
\c
.I org\c
\& must be a hexadecimal integer.
You may use this option as many
d978 25
a1002 88
line.  If you need more elaborate expressions, consider
using the linker command language from a script.

.TP
.BI "\-Tbss " "org"\c
.TP
.BI "\-Tdata " "org"\c
.TP
.BI "\-Ttext " "org"\c
Use \c
.I org\c
\& as the starting address for\(em\&respectively\(em\&the
\c
.B bss\c
\&, \c
.B data\c
\&, or the \c
.B text\c
\& segment of the output file.
\c
.I org\c
\& must be a hexadecimal integer.

.TP
.BI "\-T " "commandfile"
Equivalent to \c
.B \-c \c
.I commandfile\c
\&\c
\&; supported for compatibility with
other tools.  

.TP
.B \-t 
Prints names of input files as \c
.B ld\c
\& processes them.

.TP
.BI "\-u " "sym"
Forces \c
.I sym\c
\& to be entered in the output file as an undefined symbol.
This may, for example, trigger linking of additional modules from
standard libraries.  \c
.B \-u\c
\& may be repeated with different option
arguments to enter additional undefined symbols.

.TP
.B \-Ur 
For anything other than C++ programs, this option is equivalent to
\c
.B \-r\c
\&: it generates relocatable output\(em\&i.e., an output file that can in
turn serve as input to \c
.B ld\c
\&.  When linking C++ programs, \c
.B \-Ur
.I will\c
\& resolve references to constructors, unlike \c
.B \-r\c
\&.

.TP
.B \-\-verbose
Display the version number for \c
.B ld
and list the supported emulations.
Display which input files can and can not be opened.

.TP
.B \-v, \-V
Display the version number for \c
.B ld\c
\&.
The
.B \-V
option also lists the supported emulations.

.TP
.B \-\-version
Display the version number for \c
.B ld
and exit.

.TP
.B \-warn\-common
d1007 76
a1082 14

.TP
.B \-warn\-constructors
Warn if any global constructors are used.  This is only useful for a
few object file formats.  For formats like COFF or ELF, the linker can
not detect the use of global constructors.

.TP
.B \-warn\-multiple\-gp
Warn if the output file requires multiple global-pointer values.  This
option is only meaningful for certain processors, such as the Alpha.

.TP
.B \-warn\-once
d1085 1
a1085 3

.TP
.B \-warn\-section\-align
d1089 288
a1376 2
is, if the SECTIONS command does not specify a start address for the
section.
d1378 275
a1652 27
.TP
.B \-\-whole\-archive
For each archive mentioned on the command line after the
.B \-\-whole\-archive
option, include every object file in the archive in the link, rather
than searching the archive for the required object files.  This is
normally used to turn an archive file into a shared library, forcing
every object to be included in the resulting shared library.

.TP
.B \-\-no\-whole\-archive
Turn off the effect of the
.B \-\-whole\-archive
option for archives which appear later on the command line.

.TP
.BI "--wrap " "symbol"
Use a wrapper function for 
.I symbol.
Any undefined reference to
.I symbol
will be resolved to
.BI "__wrap_" "symbol".
Any undefined reference to
.BI "__real_" "symbol"
will be resolved to
.I symbol.
d1654 1
a1654 6
.TP
.B \-X 
Delete all temporary local symbols.  For most targets, this is all local
symbols whose names begin with `\|\c
.B L\c
\|'.
d1656 1
a1656 3
.TP
.B \-x
Delete all local symbols.
d1658 1
a1658 1
.PP
d1660 1
a1660 33
.SH ENVIRONMENT
\c
You can change the behavior of
.B ld\c
\& with the environment variable \c
.B GNUTARGET\c
\&.

\c
.B GNUTARGET\c
\& determines the input-file object format if you don't
use \c
.B \-b\c
\& (or its synonym \c
.B \-format\c
\&).  Its value should be one
of the BFD names for an input format.  If there is no
\c
.B GNUTARGET\c
\& in the environment, \c
.B ld\c
\& uses the natural format
of the host. If \c
.B GNUTARGET\c
\& is set to \c
.B default\c
\& then BFD attempts to discover the
input format by examining binary input files; this method often
succeeds, but there are potential ambiguities, since there is no method
of ensuring that the magic number used to flag object-file formats is
unique.  However, the configuration procedure for BFD on each system
places the conventional format for that system first in the search-list,
so ambiguities are resolved in favor of convention.
d1662 1
a1662 1
.PP
d1664 1
a1664 1
.SH "SEE ALSO"
a1665 389
.BR objdump ( 1 )
.br
.br
.RB "`\|" ld "\|' and `\|" binutils "\|'"
entries in
.B info\c
.br
.I 
ld: the GNU linker\c
, Steve Chamberlain and Roland Pesch;
.I
The GNU Binary Utilities\c
, Roland H. Pesch.

.SH COPYING
Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 1998, 2000 Free Software Foundation, Inc.
.PP
This document is distributed under the terms of the GNU Free
Documentation License, version 1.1.  That license is described in the
sources for this manual page, but it is not displayed here in order to
make this manual more consise.  Copies of this license can also be
obtained from: http://www.gnu.org/copyleft/.

\"  .SH GNU Free Documentation License
\"    Version 1.1, March 2000

\"    Copyright (C) 2000  Free Software Foundation, Inc.
\"    59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     
\"    Everyone is permitted to copy and distribute verbatim
\"    copies of this license document, but changing it is
\"    not allowed.
\"  .PP
\"  0. PREAMBLE
\"  .PP
\"  The purpose of this License is to make a manual, textbook, or other
\"  written document "free" in the sense of freedom: to assure everyone
\"  the effective freedom to copy and redistribute it, with or without
\"  modifying it, either commercially or noncommercially.  Secondarily,
\"  this License preserves for the author and publisher a way to get
\"  credit for their work, while not being considered responsible for
\"  modifications made by others.
\"  .PP
\"  This License is a kind of "copyleft", which means that derivative
\"  works of the document must themselves be free in the same sense.  It
\"  complements the GNU General Public License, which is a copyleft
\"  license designed for free software.
\"  .PP
\"  We have designed this License in order to use it for manuals for free
\"  software, because free software needs free documentation: a free
\"  program should come with manuals providing the same freedoms that the
\"  software does.  But this License is not limited to software manuals;
\"  it can be used for any textual work, regardless of subject matter or
\"  whether it is published as a printed book.  We recommend this License
\"  principally for works whose purpose is instruction or reference.
\"  .PP
\"  1. APPLICABILITY AND DEFINITIONS
\"  .PP
\"  This License applies to any manual or other work that contains a
\"  notice placed by the copyright holder saying it can be distributed
\"  under the terms of this License.  The "Document", below, refers to any
\"  such manual or work.  Any member of the public is a licensee, and is
\"  addressed as "you".
\"  .PP
\"  A "Modified Version" of the Document means any work containing the
\"  Document or a portion of it, either copied verbatim, or with
\"  modifications and/or translated into another language.
\"  .PP
\"  A "Secondary Section" is a named appendix or a front-matter section of
\"  the Document that deals exclusively with the relationship of the
\"  publishers or authors of the Document to the Document's overall subject
\"  (or to related matters) and contains nothing that could fall directly
\"  within that overall subject.  (For example, if the Document is in part a
\"  textbook of mathematics, a Secondary Section may not explain any
\"  mathematics.)  The relationship could be a matter of historical
\"  connection with the subject or with related matters, or of legal,
\"  commercial, philosophical, ethical or political position regarding
\"  them.
\"  .PP
\"  The "Invariant Sections" are certain Secondary Sections whose titles
\"  are designated, as being those of Invariant Sections, in the notice
\"  that says that the Document is released under this License.
\"  .PP
\"  The "Cover Texts" are certain short passages of text that are listed,
\"  as Front-Cover Texts or Back-Cover Texts, in the notice that says that
\"  the Document is released under this License.
\"  .PP
\"  A "Transparent" copy of the Document means a machine-readable copy,
\"  represented in a format whose specification is available to the
\"  general public, whose contents can be viewed and edited directly and
\"  straightforwardly with generic text editors or (for images composed of
\"  pixels) generic paint programs or (for drawings) some widely available
\"  drawing editor, and that is suitable for input to text formatters or
\"  for automatic translation to a variety of formats suitable for input
\"  to text formatters.  A copy made in an otherwise Transparent file
\"  format whose markup has been designed to thwart or discourage
\"  subsequent modification by readers is not Transparent.  A copy that is
\"  not "Transparent" is called "Opaque".
\"  .PP
\"  Examples of suitable formats for Transparent copies include plain
\"  ASCII without markup, Texinfo input format, LaTeX input format, SGML
\"  or XML using a publicly available DTD, and standard-conforming simple
\"  HTML designed for human modification.  Opaque formats include
\"  PostScript, PDF, proprietary formats that can be read and edited only
\"  by proprietary word processors, SGML or XML for which the DTD and/or
\"  processing tools are not generally available, and the
\"  machine-generated HTML produced by some word processors for output
\"  purposes only.
\"  .PP
\"  The "Title Page" means, for a printed book, the title page itself,
\"  plus such following pages as are needed to hold, legibly, the material
\"  this License requires to appear in the title page.  For works in
\"  formats which do not have any title page as such, "Title Page" means
\"  the text near the most prominent appearance of the work's title,
\"  preceding the beginning of the body of the text.
\"  .PP
\"  2. VERBATIM COPYING
\"  .PP
\"  You may copy and distribute the Document in any medium, either
\"  commercially or noncommercially, provided that this License, the
\"  copyright notices, and the license notice saying this License applies
\"  to the Document are reproduced in all copies, and that you add no other
\"  conditions whatsoever to those of this License.  You may not use
\"  technical measures to obstruct or control the reading or further
\"  copying of the copies you make or distribute.  However, you may accept
\"  compensation in exchange for copies.  If you distribute a large enough
\"  number of copies you must also follow the conditions in section 3.
\"  .PP
\"  You may also lend copies, under the same conditions stated above, and
\"  you may publicly display copies.
\"  .PP
\"  3. COPYING IN QUANTITY
\"  .PP
\"  If you publish printed copies of the Document numbering more than 100,
\"  and the Document's license notice requires Cover Texts, you must enclose
\"  the copies in covers that carry, clearly and legibly, all these Cover
\"  Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
\"  the back cover.  Both covers must also clearly and legibly identify
\"  you as the publisher of these copies.  The front cover must present
\"  the full title with all words of the title equally prominent and
\"  visible.  You may add other material on the covers in addition.
\"  Copying with changes limited to the covers, as long as they preserve
\"  the title of the Document and satisfy these conditions, can be treated
\"  as verbatim copying in other respects.
\"  .PP
\"  If the required texts for either cover are too voluminous to fit
\"  legibly, you should put the first ones listed (as many as fit
\"  reasonably) on the actual cover, and continue the rest onto adjacent
\"  pages.
\"  .PP
\"  If you publish or distribute Opaque copies of the Document numbering
\"  more than 100, you must either include a machine-readable Transparent
\"  copy along with each Opaque copy, or state in or with each Opaque copy
\"  a publicly-accessible computer-network location containing a complete
\"  Transparent copy of the Document, free of added material, which the
\"  general network-using public has access to download anonymously at no
\"  charge using public-standard network protocols.  If you use the latter
\"  option, you must take reasonably prudent steps, when you begin
\"  distribution of Opaque copies in quantity, to ensure that this
\"  Transparent copy will remain thus accessible at the stated location
\"  until at least one year after the last time you distribute an Opaque
\"  copy (directly or through your agents or retailers) of that edition to
\"  the public.
\"  .PP
\"  It is requested, but not required, that you contact the authors of the
\"  Document well before redistributing any large number of copies, to give
\"  them a chance to provide you with an updated version of the Document.
\"  .PP
\"  4. MODIFICATIONS
\"  .PP
\"  You may copy and distribute a Modified Version of the Document under
\"  the conditions of sections 2 and 3 above, provided that you release
\"  the Modified Version under precisely this License, with the Modified
\"  Version filling the role of the Document, thus licensing distribution
\"  and modification of the Modified Version to whoever possesses a copy
\"  of it.  In addition, you must do these things in the Modified Version:
\"  .PP
\"  A. Use in the Title Page (and on the covers, if any) a title distinct
\"  from that of the Document, and from those of previous versions
\"  (which should, if there were any, be listed in the History section
\"  of the Document).  You may use the same title as a previous version
\"  if the original publisher of that version gives permission.
\"  .PP
\"  B. List on the Title Page, as authors, one or more persons or entities
\"  responsible for authorship of the modifications in the Modified
\"  Version, together with at least five of the principal authors of the
\"  Document (all of its principal authors, if it has less than five).
\"  .PP
\"  C. State on the Title page the name of the publisher of the
\"  Modified Version, as the publisher.
\"  .PP
\"  D. Preserve all the copyright notices of the Document.
\"  .PP
\"  E. Add an appropriate copyright notice for your modifications
\"  adjacent to the other copyright notices.
\"  .PP
\"  F. Include, immediately after the copyright notices, a license notice
\"  giving the public permission to use the Modified Version under the
\"  terms of this License, in the form shown in the Addendum below.
\"  Preserve in that license notice the full lists of Invariant Sections
\"  and required Cover Texts given in the Document's license notice.
\"  .PP
\"  H. Include an unaltered copy of this License.
\"  .PP
\"  I. Preserve the section entitled "History", and its title, and add to
\"  it an item stating at least the title, year, new authors, and
\"  publisher of the Modified Version as given on the Title Page.  If
\"  there is no section entitled "History" in the Document, create one
\"  stating the title, year, authors, and publisher of the Document as
\"  given on its Title Page, then add an item describing the Modified
\"  Version as stated in the previous sentence.
\"  .PP
\"  J. Preserve the network location, if any, given in the Document for
\"  public access to a Transparent copy of the Document, and likewise
\"  the network locations given in the Document for previous versions
\"  it was based on.  These may be placed in the "History" section.
\"  You may omit a network location for a work that was published at
\"  least four years before the Document itself, or if the original
\"  publisher of the version it refers to gives permission.
\"  .PP
\"  K. In any section entitled "Acknowledgements" or "Dedications",
\"  preserve the section's title, and preserve in the section all the
\"  substance and tone of each of the contributor acknowledgements
\"  and/or dedications given therein.
\"  .PP
\"  L. Preserve all the Invariant Sections of the Document,
\"  unaltered in their text and in their titles.  Section numbers
\"  or the equivalent are not considered part of the section titles.
\"  .PP
\"  M. Delete any section entitled "Endorsements".  Such a section
\"  may not be included in the Modified Version.
\"  .PP
\"  N. Do not retitle any existing section as "Endorsements"
\"  or to conflict in title with any Invariant Section.
\"  .PP
\"  If the Modified Version includes new front-matter sections or
\"  appendices that qualify as Secondary Sections and contain no material
\"  copied from the Document, you may at your option designate some or all
\"  of these sections as invariant.  To do this, add their titles to the
\"  list of Invariant Sections in the Modified Version's license notice.
\"  These titles must be distinct from any other section titles.
\"  .PP
\"  You may add a section entitled "Endorsements", provided it contains
\"  nothing but endorsements of your Modified Version by various
\"  parties--for example, statements of peer review or that the text has
\"  been approved by an organization as the authoritative definition of a
\"  standard.
\"  .PP
\"  You may add a passage of up to five words as a Front-Cover Text, and a
\"  passage of up to 25 words as a Back-Cover Text, to the end of the list
\"  of Cover Texts in the Modified Version.  Only one passage of
\"  Front-Cover Text and one of Back-Cover Text may be added by (or
\"  through arrangements made by) any one entity.  If the Document already
\"  includes a cover text for the same cover, previously added by you or
\"  by arrangement made by the same entity you are acting on behalf of,
\"  you may not add another; but you may replace the old one, on explicit
\"  permission from the previous publisher that added the old one.
\"  .PP
\"  The author(s) and publisher(s) of the Document do not by this License
\"  give permission to use their names for publicity for or to assert or
\"  imply endorsement of any Modified Version.
\"  .PP

\"  5. COMBINING DOCUMENTS
\"  .PP
\"  You may combine the Document with other documents released under this
\"  License, under the terms defined in section 4 above for modified
\"  versions, provided that you include in the combination all of the
\"  Invariant Sections of all of the original documents, unmodified, and
\"  list them all as Invariant Sections of your combined work in its
\"  license notice.
\"  .PP
\"  The combined work need only contain one copy of this License, and
\"  multiple identical Invariant Sections may be replaced with a single
\"  copy.  If there are multiple Invariant Sections with the same name but
\"  different contents, make the title of each such section unique by
\"  adding at the end of it, in parentheses, the name of the original
\"  author or publisher of that section if known, or else a unique number.
\"  Make the same adjustment to the section titles in the list of
\"  Invariant Sections in the license notice of the combined work.
\"  .PP
\"  In the combination, you must combine any sections entitled "History"
\"  in the various original documents, forming one section entitled
\"  "History"; likewise combine any sections entitled "Acknowledgements",
\"  and any sections entitled "Dedications".  You must delete all sections
\"  entitled "Endorsements."
\"  .PP

\"  6. COLLECTIONS OF DOCUMENTS
\"  .PP
\"  You may make a collection consisting of the Document and other documents
\"  released under this License, and replace the individual copies of this
\"  License in the various documents with a single copy that is included in
\"  the collection, provided that you follow the rules of this License for
\"  verbatim copying of each of the documents in all other respects.
\"  .PP
\"  You may extract a single document from such a collection, and distribute
\"  it individually under this License, provided you insert a copy of this
\"  License into the extracted document, and follow this License in all
\"  other respects regarding verbatim copying of that document.
\"  .PP

\"  7. AGGREGATION WITH INDEPENDENT WORKS
\"  .PP
\"  A compilation of the Document or its derivatives with other separate
\"  and independent documents or works, in or on a volume of a storage or
\"  distribution medium, does not as a whole count as a Modified Version
\"  of the Document, provided no compilation copyright is claimed for the
\"  compilation.  Such a compilation is called an "aggregate", and this
\"  License does not apply to the other self-contained works thus compiled
\"  with the Document, on account of their being thus compiled, if they
\"  are not themselves derivative works of the Document.
\"  .PP
\"  If the Cover Text requirement of section 3 is applicable to these
\"  copies of the Document, then if the Document is less than one quarter
\"  of the entire aggregate, the Document's Cover Texts may be placed on
\"  covers that surround only the Document within the aggregate.
\"  Otherwise they must appear on covers around the whole aggregate.
\"  .PP

\"  8. TRANSLATION
\"  .PP
\"  Translation is considered a kind of modification, so you may
\"  distribute translations of the Document under the terms of section 4.
\"  Replacing Invariant Sections with translations requires special
\"  permission from their copyright holders, but you may include
\"  translations of some or all Invariant Sections in addition to the
\"  original versions of these Invariant Sections.  You may include a
\"  translation of this License provided that you also include the
\"  original English version of this License.  In case of a disagreement
\"  between the translation and the original English version of this
\"  License, the original English version will prevail.
\"  .PP

\"  9. TERMINATION
\"  .PP
\"  You may not copy, modify, sublicense, or distribute the Document except
\"  as expressly provided for under this License.  Any other attempt to
\"  copy, modify, sublicense or distribute the Document is void, and will
\"  automatically terminate your rights under this License.  However,
\"  parties who have received copies, or rights, from you under this
\"  License will not have their licenses terminated so long as such
\"  parties remain in full compliance.
\"  .PP

\"  10. FUTURE REVISIONS OF THIS LICENSE
\"  .PP
\"  The Free Software Foundation may publish new, revised versions
\"  of the GNU Free Documentation License from time to time.  Such new
\"  versions will be similar in spirit to the present version, but may
\"  differ in detail to address new problems or concerns.  See
\"  http://www.gnu.org/copyleft/.
\"  .PP
\"  Each version of the License is given a distinguishing version number.
\"  If the Document specifies that a particular numbered version of this
\"  License "or any later version" applies to it, you have the option of
\"  following the terms and conditions either of that specified version or
\"  of any later version that has been published (not as a draft) by the
\"  Free Software Foundation.  If the Document does not specify a version
\"  number of this License, you may choose any version ever published (not
\"  as a draft) by the Free Software Foundation.
\"  .PP

\"  ADDENDUM: How to use this License for your documents
\"  .PP
\"  To use this License in a document you have written, include a copy of
\"  the License in the document and put the following copyright and
\"  license notices just after the title page:
\"  .PP
\"      Copyright (c)  YEAR  YOUR NAME.
\"      Permission is granted to copy, distribute and/or
\"      modify this document under the terms of the GNU
\"      Free Documentation License, Version 1.1 or any later
\"      version published by the Free Software Foundation;
\"      with the Invariant Sections being LIST THEIR TITLES,
\"      with the Front-Cover Texts being LIST, and with the
\"      Back-Cover Texts being LIST.  A copy of the license
\"      is included in the section entitled "GNU Free
\"      Documentation License".
\"  .PP
\"  If you have no Invariant Sections, write "with no Invariant Sections"
\"  instead of saying which ones are invariant.  If you have no
\"  Front-Cover Texts, write "no Front-Cover Texts" instead of
\"  "Front-Cover Texts being LIST"; likewise for Back-Cover Texts.
\"  .PP
\"  If your document contains nontrivial examples of program code, we
\"  recommend releasing these examples in parallel under your choice of
\"  free software license, such as the GNU General Public License,
\"  to permit their use in free software.
@


1.7
log
@Fixtypos in ChangeLogs, fix copyright dates in files
@
text
@d32 1
d409 13
@


1.6
log
@Replace occurances of -oformat with --oformat.
@
text
@d1 2
a2 1
.\" Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 98, 1999, 2000 Free Software Foundation
@


1.5
log
@Move GNU Free Documentation License from the output into a comment
@
text
@d100 1
a100 1
.RB "[\|" "\-oformat\ "\c
d731 1
a731 1
.BI "\-oformat " "output\-format"
@


1.5.2.1
log
@Merge from mainline.
@
text
@d1 1
a1 2
.\" Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
.\" 2001 Free Software Foundation, Inc.
a30 1
.RB "[\|" \-Bgroup "\|]"  
d100 1
a100 1
.RB "[\|" "\--oformat\ "\c
a408 13
.B \-Bgroup
Set the \c
.B DF_1_GROUP
\c
flag in the \c
.B DT_FLAGS_1
\c
entry in the dynamic section.  This causes the runtime linker to handle
lookups in this object and its dependencies to be performed only inside
the group.  No undefined symbols are allowed.  This option is only
meaningful on ELF platforms which support shared libraries.

.TP
d731 1
a731 1
.BI "\--oformat " "output\-format"
@


1.5.2.2
log
@Remove .TP from SYNOPSIS section
@
text
@d17 1
@


1.4
log
@2000-11-25  David O'Brien  <obrien@@FreeBSD.org>
	* ld.1: Remove old date so it does not give the impression the
	manpage is way out of date.

Approved by:  Nick Clifton <nickc@@redhat.com>
              <200011250036.QAA09984@@elmo.cygnus.com>
@
text
@d1123 4
a1126 2
Documenation License.  That license is described in the GNU Free
Documentation License section.
d1128 2
a1129 2
.SH GNU Free Documentation License
  Version 1.1, March 2000
d1131 2
a1132 2
  Copyright (C) 2000  Free Software Foundation, Inc.
  59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
d1134 233
a1366 233
  Everyone is permitted to copy and distribute verbatim
  copies of this license document, but changing it is
  not allowed.
.PP
0. PREAMBLE
.PP
The purpose of this License is to make a manual, textbook, or other
written document "free" in the sense of freedom: to assure everyone
the effective freedom to copy and redistribute it, with or without
modifying it, either commercially or noncommercially.  Secondarily,
this License preserves for the author and publisher a way to get
credit for their work, while not being considered responsible for
modifications made by others.
.PP
This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.
.PP
We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.
.PP
1. APPLICABILITY AND DEFINITIONS
.PP
This License applies to any manual or other work that contains a
notice placed by the copyright holder saying it can be distributed
under the terms of this License.  The "Document", below, refers to any
such manual or work.  Any member of the public is a licensee, and is
addressed as "you".
.PP
A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.
.PP
A "Secondary Section" is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall subject
(or to related matters) and contains nothing that could fall directly
within that overall subject.  (For example, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any
mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.
.PP
The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.
.PP
The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.
.PP
A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, whose contents can be viewed and edited directly and
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup has been designed to thwart or discourage
subsequent modification by readers is not Transparent.  A copy that is
not "Transparent" is called "Opaque".
.PP
Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML
or XML using a publicly available DTD, and standard-conforming simple
HTML designed for human modification.  Opaque formats include
PostScript, PDF, proprietary formats that can be read and edited only
by proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the
machine-generated HTML produced by some word processors for output
purposes only.
.PP
The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.
.PP
2. VERBATIM COPYING
.PP
You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.
.PP
You may also lend copies, under the same conditions stated above, and
you may publicly display copies.
.PP
3. COPYING IN QUANTITY
.PP
If you publish printed copies of the Document numbering more than 100,
and the Document's license notice requires Cover Texts, you must enclose
the copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.
.PP
If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.
.PP
If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a publicly-accessible computer-network location containing a complete
Transparent copy of the Document, free of added material, which the
general network-using public has access to download anonymously at no
charge using public-standard network protocols.  If you use the latter
option, you must take reasonably prudent steps, when you begin
distribution of Opaque copies in quantity, to ensure that this
Transparent copy will remain thus accessible at the stated location
until at least one year after the last time you distribute an Opaque
copy (directly or through your agents or retailers) of that edition to
the public.
.PP
It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.
.PP
4. MODIFICATIONS
.PP
You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:
.PP
A. Use in the Title Page (and on the covers, if any) a title distinct
from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.
.PP
B. List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has less than five).
.PP
C. State on the Title page the name of the publisher of the
Modified Version, as the publisher.
.PP
D. Preserve all the copyright notices of the Document.
.PP
E. Add an appropriate copyright notice for your modifications
adjacent to the other copyright notices.
.PP
F. Include, immediately after the copyright notices, a license notice
giving the public permission to use the Modified Version under the
terms of this License, in the form shown in the Addendum below.
Preserve in that license notice the full lists of Invariant Sections
and required Cover Texts given in the Document's license notice.
.PP
H. Include an unaltered copy of this License.
.PP
I. Preserve the section entitled "History", and its title, and add to
it an item stating at least the title, year, new authors, and
publisher of the Modified Version as given on the Title Page.  If
there is no section entitled "History" in the Document, create one
stating the title, year, authors, and publisher of the Document as
given on its Title Page, then add an item describing the Modified
Version as stated in the previous sentence.
.PP
J. Preserve the network location, if any, given in the Document for
public access to a Transparent copy of the Document, and likewise
the network locations given in the Document for previous versions
it was based on.  These may be placed in the "History" section.
You may omit a network location for a work that was published at
least four years before the Document itself, or if the original
publisher of the version it refers to gives permission.
.PP
K. In any section entitled "Acknowledgements" or "Dedications",
preserve the section's title, and preserve in the section all the
substance and tone of each of the contributor acknowledgements
and/or dedications given therein.
.PP
L. Preserve all the Invariant Sections of the Document,
unaltered in their text and in their titles.  Section numbers
or the equivalent are not considered part of the section titles.
.PP
M. Delete any section entitled "Endorsements".  Such a section
may not be included in the Modified Version.
.PP
N. Do not retitle any existing section as "Endorsements"
or to conflict in title with any Invariant Section.
.PP
If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.
.PP
You may add a section entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties--for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.
.PP
You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.
.PP
The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.
.PP
d1368 24
a1391 24
5. COMBINING DOCUMENTS
.PP
You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice.
.PP
The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.
.PP
In the combination, you must combine any sections entitled "History"
in the various original documents, forming one section entitled
"History"; likewise combine any sections entitled "Acknowledgements",
and any sections entitled "Dedications".  You must delete all sections
entitled "Endorsements."
.PP
d1393 13
a1405 13
6. COLLECTIONS OF DOCUMENTS
.PP
You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.
.PP
You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.
.PP
d1407 17
a1423 17
7. AGGREGATION WITH INDEPENDENT WORKS
.PP
A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, does not as a whole count as a Modified Version
of the Document, provided no compilation copyright is claimed for the
compilation.  Such a compilation is called an "aggregate", and this
License does not apply to the other self-contained works thus compiled
with the Document, on account of their being thus compiled, if they
are not themselves derivative works of the Document.
.PP
If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one quarter
of the entire aggregate, the Document's Cover Texts may be placed on
covers that surround only the Document within the aggregate.
Otherwise they must appear on covers around the whole aggregate.
.PP
d1425 13
a1437 13
8. TRANSLATION
.PP
Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License provided that you also include the
original English version of this License.  In case of a disagreement
between the translation and the original English version of this
License, the original English version will prevail.
.PP
d1439 10
a1448 10
9. TERMINATION
.PP
You may not copy, modify, sublicense, or distribute the Document except
as expressly provided for under this License.  Any other attempt to
copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such
parties remain in full compliance.
.PP
d1450 17
a1466 17
10. FUTURE REVISIONS OF THIS LICENSE
.PP
The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
http://www.gnu.org/copyleft/.
.PP
Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.
.PP
d1468 26
a1493 26
ADDENDUM: How to use this License for your documents
.PP
To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:
.PP
    Copyright (c)  YEAR  YOUR NAME.
    Permission is granted to copy, distribute and/or
    modify this document under the terms of the GNU
    Free Documentation License, Version 1.1 or any later
    version published by the Free Software Foundation;
    with the Invariant Sections being LIST THEIR TITLES,
    with the Front-Cover Texts being LIST, and with the
    Back-Cover Texts being LIST.  A copy of the license
    is included in the section entitled "GNU Free
    Documentation License".
.PP
If you have no Invariant Sections, write "with no Invariant Sections"
instead of saying which ones are invariant.  If you have no
Front-Cover Texts, write "no Front-Cover Texts" instead of
"Front-Cover Texts being LIST"; likewise for Back-Cover Texts.
.PP
If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.
@


1.3
log
@Add GNU Free Documentation License
@
text
@d3 1
a3 1
.TH ld 1 "17 August 1992" "Free Software Foundation" "GNU Development Tools"
@


1.2
log
@Patch from Thomas de Lellis to implement --section-start
@
text
@d1 1
a1 1
.\" Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 98, 1999 Free Software Foundation
d3 1
a3 1
.TH ld 1 "17 August 1992" "cygnus support" "GNU Development Tools"
d1120 1
a1120 1
Copyright (c) 1991, 92, 93, 94, 95, 96, 97, 1998 Free Software Foundation, Inc.
d1122 370
a1491 14
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.
.PP
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.
.PP
Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be included in
translations approved by the Free Software Foundation instead of in
the original English.
@


1.1
log
@Initial revision
@
text
@d42 1
a42 1
\& = \c
d125 5
d261 3
a263 2
\&,
\c
d463 1
a463 1
.BI "-defsym " "symbol" "\fR = \fP" expression
d897 14
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

