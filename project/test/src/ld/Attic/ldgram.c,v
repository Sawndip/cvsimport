head	1.1;
access;
symbols
	binutils-2_23_2:1.1.24.1
	binutils-2_23_1:1.1.24.1
	binutils-2_23-branch:1.1.0.24
	binutils-2_20_1:1.1.22.1
	binutils-2_20:1.1.22.1
	binutils-2_20-branch:1.1.0.22
	binutils-2_19_1:1.1.20.1
	binutils-2_19:1.1.20.1
	binutils-2_19-branch:1.1.0.20
	binutils-2_18:1.1.18.1
	binutils-2_18-branch:1.1.0.18
	binutils-2_17:1.1.16.1
	binutils-csl-wrs-linux-3_4_4-24:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-23:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-22:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-21:1.1.14.1
	binutils-csl-wrs-linux-3_4_4-20:1.1.14.1
	binutils-2_17-branch:1.1.0.16
	binutils-csl-gxxpro-3_4-branch:1.1.14.1.0.4
	binutils-csl-gxxpro-3_4-branchpoint:1.1.14.1
	binutils-2_16_1:1.1.14.1
	binutils-csl-arm-2005q1b:1.1.14.1
	binutils-2_16:1.1.14.1
	binutils-csl-arm-2005q1a:1.1.14.1
	binutils-csl-arm-2005q1-branch:1.1.14.1.0.2
	binutils-csl-arm-2005q1-branchpoint:1.1.14.1
	binutils-2_16-branch:1.1.0.14
	binutils-2_15:1.1.12.1
	binutils-2_15-branch:1.1.0.12
	binutils-2_14:1.1.10.1
	binutils-2_14-branch:1.1.0.10
	binutils-2_13_2_1:1.1.8.2
	binutils-2_13_2:1.1.8.2
	binutils-2_13_1:1.1.8.2
	binutils-2_13:1.1.8.1
	binutils-2_13-branch:1.1.0.8
	binutils-2_12_1:1.1.6.1
	binutils-2_12:1.1.6.1
	binutils-2_12-branch:1.1.0.6
	binutils-2_11_2:1.1.4.2
	binutils-2_11_1:1.1.4.2
	binutils-2_11:1.1.4.1
	binutils-2_11-branch:1.1.0.4
	binutils-2_10_1:1.1.2.1
	binutils-2_10:1.1.2.1
	binutils_latest_snapshot:1.1.2.1
	binutils-2_10-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.1
date	2000.05.29.14.08.53;	author pb;	state dead;
branches
	1.1.2.1
	1.1.4.1
	1.1.6.1
	1.1.8.1
	1.1.10.1
	1.1.12.1
	1.1.14.1
	1.1.16.1
	1.1.18.1
	1.1.20.1
	1.1.22.1
	1.1.24.1;
next	;

1.1.2.1
date	2000.05.29.14.08.53;	author pb;	state Exp;
branches;
next	;

1.1.4.1
date	2001.03.12.15.41.12;	author pb;	state Exp;
branches;
next	1.1.4.2;

1.1.4.2
date	2001.06.10.15.37.29;	author pb;	state Exp;
branches;
next	;

1.1.6.1
date	2002.03.08.17.01.33;	author drow;	state Exp;
branches;
next	;

1.1.8.1
date	2002.08.05.20.43.48;	author drow;	state Exp;
branches;
next	1.1.8.2;

1.1.8.2
date	2002.10.30.16.29.45;	author drow;	state Exp;
branches;
next	;

1.1.10.1
date	2003.04.27.20.36.16;	author drow;	state Exp;
branches;
next	;

1.1.12.1
date	2004.04.09.19.32.20;	author drow;	state Exp;
branches;
next	;

1.1.14.1
date	2005.03.08.17.19.53;	author drow;	state Exp;
branches
	1.1.14.1.4.1;
next	;

1.1.14.1.4.1
date	2006.03.16.20.02.30;	author carlos;	state dead;
branches;
next	;

1.1.16.1
date	2006.04.16.18.36.46;	author drow;	state Exp;
branches;
next	;

1.1.18.1
date	2007.08.06.21.05.38;	author drow;	state Exp;
branches;
next	;

1.1.20.1
date	2008.09.11.08.24.19;	author gingold;	state Exp;
branches;
next	;

1.1.22.1
date	2009.10.16.12.07.05;	author gingold;	state Exp;
branches;
next	;

1.1.24.1
date	2012.11.13.14.51.36;	author gingold;	state Exp;
branches;
next	;


desc
@@


1.1
log
@file ldgram.c was initially added on branch binutils-2_10-branch.
@
text
@@


1.1.24.1
log
@*** empty log message ***
@
text
@a0 4672
/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     INT = 258,
     NAME = 259,
     LNAME = 260,
     OREQ = 261,
     ANDEQ = 262,
     RSHIFTEQ = 263,
     LSHIFTEQ = 264,
     DIVEQ = 265,
     MULTEQ = 266,
     MINUSEQ = 267,
     PLUSEQ = 268,
     OROR = 269,
     ANDAND = 270,
     NE = 271,
     EQ = 272,
     GE = 273,
     LE = 274,
     RSHIFT = 275,
     LSHIFT = 276,
     UNARY = 277,
     END = 278,
     ALIGN_K = 279,
     BLOCK = 280,
     BIND = 281,
     QUAD = 282,
     SQUAD = 283,
     LONG = 284,
     SHORT = 285,
     BYTE = 286,
     SECTIONS = 287,
     PHDRS = 288,
     INSERT_K = 289,
     AFTER = 290,
     BEFORE = 291,
     DATA_SEGMENT_ALIGN = 292,
     DATA_SEGMENT_RELRO_END = 293,
     DATA_SEGMENT_END = 294,
     SORT_BY_NAME = 295,
     SORT_BY_ALIGNMENT = 296,
     SORT_NONE = 297,
     SORT_BY_INIT_PRIORITY = 298,
     SIZEOF_HEADERS = 299,
     OUTPUT_FORMAT = 300,
     FORCE_COMMON_ALLOCATION = 301,
     OUTPUT_ARCH = 302,
     INHIBIT_COMMON_ALLOCATION = 303,
     SEGMENT_START = 304,
     INCLUDE = 305,
     MEMORY = 306,
     REGION_ALIAS = 307,
     LD_FEATURE = 308,
     NOLOAD = 309,
     DSECT = 310,
     COPY = 311,
     INFO = 312,
     OVERLAY = 313,
     DEFINED = 314,
     TARGET_K = 315,
     SEARCH_DIR = 316,
     MAP = 317,
     ENTRY = 318,
     NEXT = 319,
     SIZEOF = 320,
     ALIGNOF = 321,
     ADDR = 322,
     LOADADDR = 323,
     MAX_K = 324,
     MIN_K = 325,
     STARTUP = 326,
     HLL = 327,
     SYSLIB = 328,
     FLOAT = 329,
     NOFLOAT = 330,
     NOCROSSREFS = 331,
     ORIGIN = 332,
     FILL = 333,
     LENGTH = 334,
     CREATE_OBJECT_SYMBOLS = 335,
     INPUT = 336,
     GROUP = 337,
     OUTPUT = 338,
     CONSTRUCTORS = 339,
     ALIGNMOD = 340,
     AT = 341,
     SUBALIGN = 342,
     HIDDEN = 343,
     PROVIDE = 344,
     PROVIDE_HIDDEN = 345,
     AS_NEEDED = 346,
     CHIP = 347,
     LIST = 348,
     SECT = 349,
     ABSOLUTE = 350,
     LOAD = 351,
     NEWLINE = 352,
     ENDWORD = 353,
     ORDER = 354,
     NAMEWORD = 355,
     ASSERT_K = 356,
     FORMAT = 357,
     PUBLIC = 358,
     DEFSYMEND = 359,
     BASE = 360,
     ALIAS = 361,
     TRUNCATE = 362,
     REL = 363,
     INPUT_SCRIPT = 364,
     INPUT_MRI_SCRIPT = 365,
     INPUT_DEFSYM = 366,
     CASE = 367,
     EXTERN = 368,
     START = 369,
     VERS_TAG = 370,
     VERS_IDENTIFIER = 371,
     GLOBAL = 372,
     LOCAL = 373,
     VERSIONK = 374,
     INPUT_VERSION_SCRIPT = 375,
     KEEP = 376,
     ONLY_IF_RO = 377,
     ONLY_IF_RW = 378,
     SPECIAL = 379,
     INPUT_SECTION_FLAGS = 380,
     EXCLUDE_FILE = 381,
     CONSTANT = 382,
     INPUT_DYNAMIC_LIST = 383
   };
#endif
/* Tokens.  */
#define INT 258
#define NAME 259
#define LNAME 260
#define OREQ 261
#define ANDEQ 262
#define RSHIFTEQ 263
#define LSHIFTEQ 264
#define DIVEQ 265
#define MULTEQ 266
#define MINUSEQ 267
#define PLUSEQ 268
#define OROR 269
#define ANDAND 270
#define NE 271
#define EQ 272
#define GE 273
#define LE 274
#define RSHIFT 275
#define LSHIFT 276
#define UNARY 277
#define END 278
#define ALIGN_K 279
#define BLOCK 280
#define BIND 281
#define QUAD 282
#define SQUAD 283
#define LONG 284
#define SHORT 285
#define BYTE 286
#define SECTIONS 287
#define PHDRS 288
#define INSERT_K 289
#define AFTER 290
#define BEFORE 291
#define DATA_SEGMENT_ALIGN 292
#define DATA_SEGMENT_RELRO_END 293
#define DATA_SEGMENT_END 294
#define SORT_BY_NAME 295
#define SORT_BY_ALIGNMENT 296
#define SORT_NONE 297
#define SORT_BY_INIT_PRIORITY 298
#define SIZEOF_HEADERS 299
#define OUTPUT_FORMAT 300
#define FORCE_COMMON_ALLOCATION 301
#define OUTPUT_ARCH 302
#define INHIBIT_COMMON_ALLOCATION 303
#define SEGMENT_START 304
#define INCLUDE 305
#define MEMORY 306
#define REGION_ALIAS 307
#define LD_FEATURE 308
#define NOLOAD 309
#define DSECT 310
#define COPY 311
#define INFO 312
#define OVERLAY 313
#define DEFINED 314
#define TARGET_K 315
#define SEARCH_DIR 316
#define MAP 317
#define ENTRY 318
#define NEXT 319
#define SIZEOF 320
#define ALIGNOF 321
#define ADDR 322
#define LOADADDR 323
#define MAX_K 324
#define MIN_K 325
#define STARTUP 326
#define HLL 327
#define SYSLIB 328
#define FLOAT 329
#define NOFLOAT 330
#define NOCROSSREFS 331
#define ORIGIN 332
#define FILL 333
#define LENGTH 334
#define CREATE_OBJECT_SYMBOLS 335
#define INPUT 336
#define GROUP 337
#define OUTPUT 338
#define CONSTRUCTORS 339
#define ALIGNMOD 340
#define AT 341
#define SUBALIGN 342
#define HIDDEN 343
#define PROVIDE 344
#define PROVIDE_HIDDEN 345
#define AS_NEEDED 346
#define CHIP 347
#define LIST 348
#define SECT 349
#define ABSOLUTE 350
#define LOAD 351
#define NEWLINE 352
#define ENDWORD 353
#define ORDER 354
#define NAMEWORD 355
#define ASSERT_K 356
#define FORMAT 357
#define PUBLIC 358
#define DEFSYMEND 359
#define BASE 360
#define ALIAS 361
#define TRUNCATE 362
#define REL 363
#define INPUT_SCRIPT 364
#define INPUT_MRI_SCRIPT 365
#define INPUT_DEFSYM 366
#define CASE 367
#define EXTERN 368
#define START 369
#define VERS_TAG 370
#define VERS_IDENTIFIER 371
#define GLOBAL 372
#define LOCAL 373
#define VERSIONK 374
#define INPUT_VERSION_SCRIPT 375
#define KEEP 376
#define ONLY_IF_RO 377
#define ONLY_IF_RW 378
#define SPECIAL 379
#define INPUT_SECTION_FLAGS 380
#define EXCLUDE_FILE 381
#define CONSTANT 382
#define INPUT_DYNAMIC_LIST 383




/* Copy the first part of user declarations.  */
#line 24 "ldgram.y"

/*

 */

#define DONTDECLARE_MALLOC

#include "sysdep.h"
#include "bfd.h"
#include "bfdlink.h"
#include "ld.h"
#include "ldexp.h"
#include "ldver.h"
#include "ldlang.h"
#include "ldfile.h"
#include "ldemul.h"
#include "ldmisc.h"
#include "ldmain.h"
#include "mri.h"
#include "ldctor.h"
#include "ldlex.h"

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

static enum section_type sectype;
static lang_memory_region_type *region;

bfd_boolean ldgram_had_keep = FALSE;
char *ldgram_vers_current_lang = NULL;

#define ERROR_NAME_MAX 20
static char *error_names[ERROR_NAME_MAX];
static int error_index;
#define PUSH_ERROR(x) if (error_index < ERROR_NAME_MAX) error_names[error_index] = x; error_index++;
#define POP_ERROR()   error_index--;


/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 62 "ldgram.y"
{
  bfd_vma integer;
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  struct flag_info_list *flag_info_list;
  struct flag_info *flag_info;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      bfd_boolean filehdr;
      bfd_boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
}
/* Line 193 of yacc.c.  */
#line 422 "ldgram.c"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 216 of yacc.c.  */
#line 435 "ldgram.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  17
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1883

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  152
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  128
/* YYNRULES -- Number of rules.  */
#define YYNRULES  366
/* YYNRULES -- Number of states.  */
#define YYNSTATES  797

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   383

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   150,     2,     2,     2,    34,    21,     2,
      37,   147,    32,    30,   145,    31,     2,    33,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    16,   146,
      24,     6,    25,    15,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   148,     2,   149,    20,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    58,    19,    59,   151,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     7,     8,     9,    10,    11,    12,    13,    14,    17,
      18,    22,    23,    26,    27,    28,    29,    35,    36,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    15,    18,    20,    21,
      26,    27,    30,    34,    35,    38,    43,    45,    47,    50,
      52,    57,    62,    66,    69,    74,    78,    83,    88,    93,
      98,   103,   106,   109,   112,   117,   122,   125,   128,   131,
     134,   135,   141,   144,   145,   149,   152,   153,   155,   159,
     161,   165,   166,   168,   172,   173,   176,   178,   181,   185,
     186,   189,   192,   193,   195,   197,   199,   201,   203,   205,
     207,   209,   211,   213,   218,   223,   228,   233,   242,   247,
     249,   251,   256,   257,   263,   268,   269,   275,   280,   285,
     289,   293,   300,   305,   307,   311,   314,   316,   320,   323,
     324,   330,   331,   339,   340,   347,   352,   355,   358,   359,
     364,   367,   368,   376,   378,   380,   382,   384,   390,   395,
     400,   405,   413,   421,   429,   437,   446,   451,   453,   457,
     462,   465,   467,   471,   473,   475,   478,   482,   487,   492,
     498,   500,   501,   507,   510,   512,   514,   516,   521,   523,
     528,   533,   534,   543,   544,   550,   553,   555,   556,   558,
     560,   562,   564,   566,   568,   570,   573,   574,   576,   578,
     580,   582,   584,   586,   588,   590,   592,   594,   598,   602,
     609,   616,   623,   625,   626,   631,   633,   634,   638,   640,
     641,   649,   650,   656,   660,   664,   665,   669,   671,   674,
     676,   679,   684,   689,   693,   697,   699,   704,   708,   709,
     711,   713,   714,   717,   721,   722,   725,   728,   732,   737,
     740,   743,   746,   750,   754,   758,   762,   766,   770,   774,
     778,   782,   786,   790,   794,   798,   802,   806,   810,   816,
     820,   824,   829,   831,   833,   838,   843,   848,   853,   858,
     863,   868,   875,   882,   889,   894,   901,   906,   908,   915,
     922,   929,   934,   939,   943,   944,   949,   950,   955,   956,
     961,   962,   964,   966,   968,   969,   970,   971,   972,   973,
     974,   994,   995,   996,   997,   998,   999,  1018,  1019,  1020,
    1028,  1029,  1035,  1037,  1039,  1041,  1043,  1045,  1049,  1050,
    1053,  1057,  1060,  1067,  1078,  1081,  1083,  1084,  1086,  1089,
    1090,  1091,  1095,  1096,  1097,  1098,  1099,  1111,  1116,  1117,
    1120,  1121,  1122,  1129,  1131,  1132,  1136,  1142,  1143,  1147,
    1148,  1151,  1153,  1156,  1161,  1164,  1165,  1168,  1169,  1175,
    1177,  1180,  1185,  1191,  1198,  1200,  1203,  1204,  1207,  1212,
    1217,  1226,  1228,  1230,  1234,  1238,  1239,  1249,  1250,  1258,
    1260,  1264,  1266,  1270,  1272,  1276,  1277
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     153,     0,    -1,   125,   169,    -1,   126,   157,    -1,   136,
     268,    -1,   144,   263,    -1,   127,   155,    -1,     4,    -1,
      -1,   156,     4,     6,   224,    -1,    -1,   158,   159,    -1,
     159,   160,   113,    -1,    -1,   108,   224,    -1,   108,   224,
     145,   224,    -1,     4,    -1,   109,    -1,   115,   162,    -1,
     114,    -1,   119,     4,     6,   224,    -1,   119,     4,   145,
     224,    -1,   119,     4,   224,    -1,   118,     4,    -1,   110,
       4,   145,   224,    -1,   110,     4,   224,    -1,   110,     4,
       6,   224,    -1,    38,     4,     6,   224,    -1,    38,     4,
     145,   224,    -1,   101,     4,     6,   224,    -1,   101,     4,
     145,   224,    -1,   111,   164,    -1,   112,   163,    -1,   116,
       4,    -1,   122,     4,   145,     4,    -1,   122,     4,   145,
       3,    -1,   121,   224,    -1,   123,     3,    -1,   128,   165,
      -1,   129,   166,    -1,    -1,    66,   154,   161,   159,    36,
      -1,   130,     4,    -1,    -1,   162,   145,     4,    -1,   162,
       4,    -1,    -1,     4,    -1,   163,   145,     4,    -1,     4,
      -1,   164,   145,     4,    -1,    -1,     4,    -1,   165,   145,
       4,    -1,    -1,   167,   168,    -1,     4,    -1,   168,     4,
      -1,   168,   145,     4,    -1,    -1,   170,   171,    -1,   171,
     172,    -1,    -1,   204,    -1,   179,    -1,   255,    -1,   215,
      -1,   216,    -1,   218,    -1,   220,    -1,   181,    -1,   270,
      -1,   146,    -1,    76,    37,     4,   147,    -1,    77,    37,
     154,   147,    -1,    99,    37,   154,   147,    -1,    61,    37,
       4,   147,    -1,    61,    37,     4,   145,     4,   145,     4,
     147,    -1,    63,    37,     4,   147,    -1,    62,    -1,    64,
      -1,    97,    37,   175,   147,    -1,    -1,    98,   173,    37,
     175,   147,    -1,    78,    37,   154,   147,    -1,    -1,    66,
     154,   174,   171,    36,    -1,    92,    37,   221,   147,    -1,
     129,    37,   166,   147,    -1,    48,    49,     4,    -1,    48,
      50,     4,    -1,    68,    37,     4,   145,     4,   147,    -1,
      69,    37,     4,   147,    -1,     4,    -1,   175,   145,     4,
      -1,   175,     4,    -1,     5,    -1,   175,   145,     5,    -1,
     175,     5,    -1,    -1,   107,    37,   176,   175,   147,    -1,
      -1,   175,   145,   107,    37,   177,   175,   147,    -1,    -1,
     175,   107,    37,   178,   175,   147,    -1,    46,    58,   180,
      59,    -1,   180,   230,    -1,   180,   181,    -1,    -1,    79,
      37,     4,   147,    -1,   202,   201,    -1,    -1,   117,   182,
      37,   224,   145,     4,   147,    -1,     4,    -1,    32,    -1,
      15,    -1,   183,    -1,   142,    37,   187,   147,   183,    -1,
      54,    37,   183,   147,    -1,    55,    37,   183,   147,    -1,
      56,    37,   183,   147,    -1,    54,    37,    55,    37,   183,
     147,   147,    -1,    54,    37,    54,    37,   183,   147,   147,
      -1,    55,    37,    54,    37,   183,   147,   147,    -1,    55,
      37,    55,    37,   183,   147,   147,    -1,    54,    37,   142,
      37,   187,   147,   183,   147,    -1,    57,    37,   183,   147,
      -1,     4,    -1,   185,    21,     4,    -1,   141,    37,   185,
     147,    -1,   187,   183,    -1,   183,    -1,   188,   203,   184,
      -1,   184,    -1,     4,    -1,   186,     4,    -1,   148,   188,
     149,    -1,   186,   148,   188,   149,    -1,   184,    37,   188,
     147,    -1,   186,   184,    37,   188,   147,    -1,   189,    -1,
      -1,   137,    37,   191,   189,   147,    -1,   202,   201,    -1,
      96,    -1,   146,    -1,   100,    -1,    54,    37,   100,   147,
      -1,   190,    -1,   197,    37,   222,   147,    -1,    94,    37,
     198,   147,    -1,    -1,   117,   193,    37,   224,   145,     4,
     147,   201,    -1,    -1,    66,   154,   194,   196,    36,    -1,
     195,   192,    -1,   192,    -1,    -1,   195,    -1,    41,    -1,
      42,    -1,    43,    -1,    44,    -1,    45,    -1,   222,    -1,
       6,   198,    -1,    -1,    14,    -1,    13,    -1,    12,    -1,
      11,    -1,    10,    -1,     9,    -1,     8,    -1,     7,    -1,
     146,    -1,   145,    -1,     4,     6,   222,    -1,     4,   200,
     222,    -1,   104,    37,     4,     6,   222,   147,    -1,   105,
      37,     4,     6,   222,   147,    -1,   106,    37,     4,     6,
     222,   147,    -1,   145,    -1,    -1,    67,    58,   205,    59,
      -1,   206,    -1,    -1,   206,   203,   207,    -1,   207,    -1,
      -1,     4,   208,   212,    16,   210,   203,   211,    -1,    -1,
      66,   154,   209,   205,    36,    -1,    93,     6,   222,    -1,
      95,     6,   222,    -1,    -1,    37,   213,   147,    -1,   214,
      -1,   213,   214,    -1,     4,    -1,   150,     4,    -1,    87,
      37,   154,   147,    -1,    88,    37,   217,   147,    -1,    88,
      37,   147,    -1,   217,   203,   154,    -1,   154,    -1,    89,
      37,   219,   147,    -1,   219,   203,   154,    -1,    -1,    90,
      -1,    91,    -1,    -1,     4,   221,    -1,     4,   145,   221,
      -1,    -1,   223,   224,    -1,    31,   224,    -1,    37,   224,
     147,    -1,    80,    37,   224,   147,    -1,   150,   224,    -1,
      30,   224,    -1,   151,   224,    -1,   224,    32,   224,    -1,
     224,    33,   224,    -1,   224,    34,   224,    -1,   224,    30,
     224,    -1,   224,    31,   224,    -1,   224,    29,   224,    -1,
     224,    28,   224,    -1,   224,    23,   224,    -1,   224,    22,
     224,    -1,   224,    27,   224,    -1,   224,    26,   224,    -1,
     224,    24,   224,    -1,   224,    25,   224,    -1,   224,    21,
     224,    -1,   224,    20,   224,    -1,   224,    19,   224,    -1,
     224,    15,   224,    16,   224,    -1,   224,    18,   224,    -1,
     224,    17,   224,    -1,    75,    37,     4,   147,    -1,     3,
      -1,    60,    -1,    82,    37,     4,   147,    -1,    81,    37,
       4,   147,    -1,    83,    37,     4,   147,    -1,    84,    37,
       4,   147,    -1,   143,    37,     4,   147,    -1,   111,    37,
     224,   147,    -1,    38,    37,   224,   147,    -1,    38,    37,
     224,   145,   224,   147,    -1,    51,    37,   224,   145,   224,
     147,    -1,    52,    37,   224,   145,   224,   147,    -1,    53,
      37,   224,   147,    -1,    65,    37,     4,   145,   224,   147,
      -1,    39,    37,   224,   147,    -1,     4,    -1,    85,    37,
     224,   145,   224,   147,    -1,    86,    37,   224,   145,   224,
     147,    -1,   117,    37,   224,   145,     4,   147,    -1,    93,
      37,     4,   147,    -1,    95,    37,     4,   147,    -1,   102,
      25,     4,    -1,    -1,   102,    37,   224,   147,    -1,    -1,
      38,    37,   224,   147,    -1,    -1,   103,    37,   224,   147,
      -1,    -1,   138,    -1,   139,    -1,   140,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     4,   231,   246,   226,   227,   228,
     232,   229,    58,   233,   196,    59,   234,   249,   225,   250,
     199,   235,   203,    -1,    -1,    -1,    -1,    -1,    -1,    74,
     236,   247,   248,   226,   228,   237,    58,   238,   251,    59,
     239,   249,   225,   250,   199,   240,   203,    -1,    -1,    -1,
      98,   241,   246,   242,    58,   180,    59,    -1,    -1,    66,
     154,   243,   180,    36,    -1,    70,    -1,    71,    -1,    72,
      -1,    73,    -1,    74,    -1,    37,   244,   147,    -1,    -1,
      37,   147,    -1,   224,   245,    16,    -1,   245,    16,    -1,
      40,    37,   224,   147,   245,    16,    -1,    40,    37,   224,
     147,    39,    37,   224,   147,   245,    16,    -1,   224,    16,
      -1,    16,    -1,    -1,    92,    -1,    25,     4,    -1,    -1,
      -1,   250,    16,     4,    -1,    -1,    -1,    -1,    -1,   251,
       4,   252,    58,   196,    59,   253,   250,   199,   254,   203,
      -1,    47,    58,   256,    59,    -1,    -1,   256,   257,    -1,
      -1,    -1,     4,   258,   260,   261,   259,   146,    -1,   224,
      -1,    -1,     4,   262,   261,    -1,   102,    37,   224,   147,
     261,    -1,    -1,    37,   224,   147,    -1,    -1,   264,   265,
      -1,   266,    -1,   265,   266,    -1,    58,   267,    59,   146,
      -1,   276,   146,    -1,    -1,   269,   272,    -1,    -1,   271,
     135,    58,   272,    59,    -1,   273,    -1,   272,   273,    -1,
      58,   275,    59,   146,    -1,   131,    58,   275,    59,   146,
      -1,   131,    58,   275,    59,   274,   146,    -1,   131,    -1,
     274,   131,    -1,    -1,   276,   146,    -1,   133,    16,   276,
     146,    -1,   134,    16,   276,   146,    -1,   133,    16,   276,
     146,   134,    16,   276,   146,    -1,   132,    -1,     4,    -1,
     276,   146,   132,    -1,   276,   146,     4,    -1,    -1,   276,
     146,   129,     4,    58,   277,   276,   279,    59,    -1,    -1,
     129,     4,    58,   278,   276,   279,    59,    -1,   133,    -1,
     276,   146,   133,    -1,   134,    -1,   276,   146,   134,    -1,
     129,    -1,   276,   146,   129,    -1,    -1,   146,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   168,   168,   169,   170,   171,   172,   176,   180,   180,
     190,   190,   203,   204,   208,   209,   210,   213,   216,   217,
     218,   220,   222,   224,   226,   228,   230,   232,   234,   236,
     238,   240,   241,   242,   244,   246,   248,   250,   252,   253,
     255,   254,   258,   260,   264,   265,   266,   270,   272,   276,
     278,   283,   284,   285,   290,   290,   295,   297,   299,   304,
     304,   310,   311,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   328,   330,   332,   335,   337,   339,
     341,   343,   345,   344,   348,   351,   350,   354,   358,   359,
     361,   363,   365,   370,   373,   376,   379,   382,   385,   389,
     388,   394,   393,   399,   398,   406,   410,   411,   412,   416,
     418,   419,   419,   427,   431,   435,   442,   449,   456,   463,
     470,   477,   484,   491,   498,   505,   512,   521,   539,   560,
     573,   582,   593,   602,   613,   622,   631,   635,   644,   648,
     656,   658,   657,   664,   665,   669,   670,   675,   680,   681,
     686,   690,   690,   694,   693,   700,   701,   704,   706,   710,
     712,   714,   716,   718,   723,   730,   732,   736,   738,   740,
     742,   744,   746,   748,   750,   755,   755,   760,   764,   772,
     776,   780,   788,   788,   792,   795,   795,   798,   799,   804,
     803,   809,   808,   815,   823,   831,   832,   836,   837,   841,
     843,   848,   853,   854,   859,   861,   867,   869,   871,   875,
     877,   883,   886,   895,   906,   906,   912,   914,   916,   918,
     920,   922,   925,   927,   929,   931,   933,   935,   937,   939,
     941,   943,   945,   947,   949,   951,   953,   955,   957,   959,
     961,   963,   965,   967,   970,   972,   974,   976,   978,   980,
     982,   984,   986,   988,   990,   992,  1001,  1003,  1005,  1007,
    1009,  1011,  1013,  1019,  1020,  1024,  1025,  1029,  1030,  1034,
    1035,  1039,  1040,  1041,  1042,  1045,  1049,  1052,  1058,  1060,
    1045,  1067,  1069,  1071,  1076,  1078,  1066,  1088,  1090,  1088,
    1096,  1095,  1102,  1103,  1104,  1105,  1106,  1110,  1111,  1112,
    1116,  1117,  1122,  1123,  1128,  1129,  1134,  1135,  1140,  1142,
    1147,  1150,  1163,  1167,  1172,  1174,  1165,  1182,  1185,  1187,
    1191,  1192,  1191,  1201,  1246,  1249,  1262,  1271,  1274,  1281,
    1281,  1293,  1294,  1298,  1302,  1311,  1311,  1325,  1325,  1335,
    1336,  1340,  1344,  1348,  1355,  1359,  1367,  1370,  1374,  1378,
    1382,  1389,  1393,  1397,  1401,  1406,  1405,  1419,  1418,  1428,
    1432,  1436,  1440,  1444,  1448,  1454,  1456
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "INT", "NAME", "LNAME", "'='", "OREQ",
  "ANDEQ", "RSHIFTEQ", "LSHIFTEQ", "DIVEQ", "MULTEQ", "MINUSEQ", "PLUSEQ",
  "'?'", "':'", "OROR", "ANDAND", "'|'", "'^'", "'&'", "NE", "EQ", "'<'",
  "'>'", "GE", "LE", "RSHIFT", "LSHIFT", "'+'", "'-'", "'*'", "'/'", "'%'",
  "UNARY", "END", "'('", "ALIGN_K", "BLOCK", "BIND", "QUAD", "SQUAD",
  "LONG", "SHORT", "BYTE", "SECTIONS", "PHDRS", "INSERT_K", "AFTER",
  "BEFORE", "DATA_SEGMENT_ALIGN", "DATA_SEGMENT_RELRO_END",
  "DATA_SEGMENT_END", "SORT_BY_NAME", "SORT_BY_ALIGNMENT", "SORT_NONE",
  "SORT_BY_INIT_PRIORITY", "'{'", "'}'", "SIZEOF_HEADERS", "OUTPUT_FORMAT",
  "FORCE_COMMON_ALLOCATION", "OUTPUT_ARCH", "INHIBIT_COMMON_ALLOCATION",
  "SEGMENT_START", "INCLUDE", "MEMORY", "REGION_ALIAS", "LD_FEATURE",
  "NOLOAD", "DSECT", "COPY", "INFO", "OVERLAY", "DEFINED", "TARGET_K",
  "SEARCH_DIR", "MAP", "ENTRY", "NEXT", "SIZEOF", "ALIGNOF", "ADDR",
  "LOADADDR", "MAX_K", "MIN_K", "STARTUP", "HLL", "SYSLIB", "FLOAT",
  "NOFLOAT", "NOCROSSREFS", "ORIGIN", "FILL", "LENGTH",
  "CREATE_OBJECT_SYMBOLS", "INPUT", "GROUP", "OUTPUT", "CONSTRUCTORS",
  "ALIGNMOD", "AT", "SUBALIGN", "HIDDEN", "PROVIDE", "PROVIDE_HIDDEN",
  "AS_NEEDED", "CHIP", "LIST", "SECT", "ABSOLUTE", "LOAD", "NEWLINE",
  "ENDWORD", "ORDER", "NAMEWORD", "ASSERT_K", "FORMAT", "PUBLIC",
  "DEFSYMEND", "BASE", "ALIAS", "TRUNCATE", "REL", "INPUT_SCRIPT",
  "INPUT_MRI_SCRIPT", "INPUT_DEFSYM", "CASE", "EXTERN", "START",
  "VERS_TAG", "VERS_IDENTIFIER", "GLOBAL", "LOCAL", "VERSIONK",
  "INPUT_VERSION_SCRIPT", "KEEP", "ONLY_IF_RO", "ONLY_IF_RW", "SPECIAL",
  "INPUT_SECTION_FLAGS", "EXCLUDE_FILE", "CONSTANT", "INPUT_DYNAMIC_LIST",
  "','", "';'", "')'", "'['", "']'", "'!'", "'~'", "$accept", "file",
  "filename", "defsym_expr", "@@1", "mri_script_file", "@@2",
  "mri_script_lines", "mri_script_command", "@@3", "ordernamelist",
  "mri_load_name_list", "mri_abs_name_list", "casesymlist",
  "extern_name_list", "@@4", "extern_name_list_body", "script_file", "@@5",
  "ifile_list", "ifile_p1", "@@6", "@@7", "input_list", "@@8", "@@9", "@@10",
  "sections", "sec_or_group_p1", "statement_anywhere", "@@11",
  "wildcard_name", "wildcard_spec", "sect_flag_list", "sect_flags",
  "exclude_name_list", "file_NAME_list", "input_section_spec_no_keep",
  "input_section_spec", "@@12", "statement", "@@13", "@@14", "statement_list",
  "statement_list_opt", "length", "fill_exp", "fill_opt", "assign_op",
  "end", "assignment", "opt_comma", "memory", "memory_spec_list_opt",
  "memory_spec_list", "memory_spec", "@@15", "@@16", "origin_spec",
  "length_spec", "attributes_opt", "attributes_list", "attributes_string",
  "startup", "high_level_library", "high_level_library_NAME_list",
  "low_level_library", "low_level_library_NAME_list",
  "floating_point_support", "nocrossref_list", "mustbe_exp", "@@17", "exp",
  "memspec_at_opt", "opt_at", "opt_align", "opt_subalign",
  "sect_constraint", "section", "@@18", "@@19", "@@20", "@@21", "@@22", "@@23",
  "@@24", "@@25", "@@26", "@@27", "@@28", "@@29", "@@30", "type", "atype",
  "opt_exp_with_type", "opt_exp_without_type", "opt_nocrossrefs",
  "memspec_opt", "phdr_opt", "overlay_section", "@@31", "@@32", "@@33",
  "phdrs", "phdr_list", "phdr", "@@34", "@@35", "phdr_type",
  "phdr_qualifiers", "phdr_val", "dynamic_list_file", "@@36",
  "dynamic_list_nodes", "dynamic_list_node", "dynamic_list_tag",
  "version_script_file", "@@37", "version", "@@38", "vers_nodes",
  "vers_node", "verdep", "vers_tag", "vers_defns", "@@39", "@@40",
  "opt_semicolon", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,    61,   261,   262,   263,
     264,   265,   266,   267,   268,    63,    58,   269,   270,   124,
      94,    38,   271,   272,    60,    62,   273,   274,   275,   276,
      43,    45,    42,    47,    37,   277,   278,    40,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   123,   125,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,    44,    59,    41,    91,    93,
      33,   126
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   152,   153,   153,   153,   153,   153,   154,   156,   155,
     158,   157,   159,   159,   160,   160,   160,   160,   160,   160,
     160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
     160,   160,   160,   160,   160,   160,   160,   160,   160,   160,
     161,   160,   160,   160,   162,   162,   162,   163,   163,   164,
     164,   165,   165,   165,   167,   166,   168,   168,   168,   170,
     169,   171,   171,   172,   172,   172,   172,   172,   172,   172,
     172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
     172,   172,   173,   172,   172,   174,   172,   172,   172,   172,
     172,   172,   172,   175,   175,   175,   175,   175,   175,   176,
     175,   177,   175,   178,   175,   179,   180,   180,   180,   181,
     181,   182,   181,   183,   183,   183,   184,   184,   184,   184,
     184,   184,   184,   184,   184,   184,   184,   185,   185,   186,
     187,   187,   188,   188,   189,   189,   189,   189,   189,   189,
     190,   191,   190,   192,   192,   192,   192,   192,   192,   192,
     192,   193,   192,   194,   192,   195,   195,   196,   196,   197,
     197,   197,   197,   197,   198,   199,   199,   200,   200,   200,
     200,   200,   200,   200,   200,   201,   201,   202,   202,   202,
     202,   202,   203,   203,   204,   205,   205,   206,   206,   208,
     207,   209,   207,   210,   211,   212,   212,   213,   213,   214,
     214,   215,   216,   216,   217,   217,   218,   219,   219,   220,
     220,   221,   221,   221,   223,   222,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   225,   225,   226,   226,   227,   227,   228,
     228,   229,   229,   229,   229,   231,   232,   233,   234,   235,
     230,   236,   237,   238,   239,   240,   230,   241,   242,   230,
     243,   230,   244,   244,   244,   244,   244,   245,   245,   245,
     246,   246,   246,   246,   247,   247,   248,   248,   249,   249,
     250,   250,   251,   252,   253,   254,   251,   255,   256,   256,
     258,   259,   257,   260,   261,   261,   261,   262,   262,   264,
     263,   265,   265,   266,   267,   269,   268,   271,   270,   272,
     272,   273,   273,   273,   274,   274,   275,   275,   275,   275,
     275,   276,   276,   276,   276,   277,   276,   278,   276,   276,
     276,   276,   276,   276,   276,   279,   279
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     2,     2,     2,     1,     0,     4,
       0,     2,     3,     0,     2,     4,     1,     1,     2,     1,
       4,     4,     3,     2,     4,     3,     4,     4,     4,     4,
       4,     2,     2,     2,     4,     4,     2,     2,     2,     2,
       0,     5,     2,     0,     3,     2,     0,     1,     3,     1,
       3,     0,     1,     3,     0,     2,     1,     2,     3,     0,
       2,     2,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     4,     4,     4,     8,     4,     1,
       1,     4,     0,     5,     4,     0,     5,     4,     4,     3,
       3,     6,     4,     1,     3,     2,     1,     3,     2,     0,
       5,     0,     7,     0,     6,     4,     2,     2,     0,     4,
       2,     0,     7,     1,     1,     1,     1,     5,     4,     4,
       4,     7,     7,     7,     7,     8,     4,     1,     3,     4,
       2,     1,     3,     1,     1,     2,     3,     4,     4,     5,
       1,     0,     5,     2,     1,     1,     1,     4,     1,     4,
       4,     0,     8,     0,     5,     2,     1,     0,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     3,     6,
       6,     6,     1,     0,     4,     1,     0,     3,     1,     0,
       7,     0,     5,     3,     3,     0,     3,     1,     2,     1,
       2,     4,     4,     3,     3,     1,     4,     3,     0,     1,
       1,     0,     2,     3,     0,     2,     2,     3,     4,     2,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     5,     3,
       3,     4,     1,     1,     4,     4,     4,     4,     4,     4,
       4,     6,     6,     6,     4,     6,     4,     1,     6,     6,
       6,     4,     4,     3,     0,     4,     0,     4,     0,     4,
       0,     1,     1,     1,     0,     0,     0,     0,     0,     0,
      19,     0,     0,     0,     0,     0,    18,     0,     0,     7,
       0,     5,     1,     1,     1,     1,     1,     3,     0,     2,
       3,     2,     6,    10,     2,     1,     0,     1,     2,     0,
       0,     3,     0,     0,     0,     0,    11,     4,     0,     2,
       0,     0,     6,     1,     0,     3,     5,     0,     3,     0,
       2,     1,     2,     4,     2,     0,     2,     0,     5,     1,
       2,     4,     5,     6,     1,     2,     0,     2,     4,     4,
       8,     1,     1,     3,     3,     0,     9,     0,     7,     1,
       3,     1,     3,     1,     3,     0,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,    59,    10,     8,   335,   329,     0,     2,    62,     3,
      13,     6,     0,     4,     0,     5,     0,     1,    60,    11,
       0,   346,     0,   336,   339,     0,   330,   331,     0,     0,
       0,     0,     0,    79,     0,    80,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   209,   210,     0,
       0,    82,     0,     0,     0,     0,   111,     0,    72,    61,
      64,    70,     0,    63,    66,    67,    68,    69,    65,    71,
       0,    16,     0,     0,     0,     0,    17,     0,     0,     0,
      19,    46,     0,     0,     0,     0,     0,     0,    51,    54,
       0,     0,     0,   352,   363,   351,   359,   361,     0,     0,
     346,   340,   359,   361,     0,     0,   332,   214,   174,   173,
     172,   171,   170,   169,   168,   167,   214,   108,   318,     0,
       0,     0,     0,     7,    85,   186,     0,     0,     0,     0,
       0,     0,     0,     0,   208,   211,     0,     0,     0,     0,
       0,     0,     0,    54,   176,   175,   110,     0,     0,    40,
       0,   242,   257,     0,     0,     0,     0,     0,     0,     0,
       0,   243,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    14,     0,
      49,    31,    47,    32,    18,    33,    23,     0,    36,     0,
      37,    52,    38,    39,     0,    42,    12,     9,     0,     0,
       0,     0,   347,     0,     0,   334,   177,     0,   178,     0,
       0,    89,    90,     0,     0,    62,   189,     0,     0,   183,
     188,     0,     0,     0,     0,     0,     0,     0,   203,   205,
     183,   183,   211,     0,    93,    96,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    13,     0,
       0,   220,   216,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   219,   221,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    25,     0,     0,
      45,     0,     0,     0,    22,     0,     0,    56,    55,   357,
       0,     0,   341,   354,   364,   353,   360,   362,     0,   333,
     215,   275,   105,     0,   281,   287,   107,   106,   320,   317,
     319,     0,    76,    78,   337,   195,   191,   184,   182,     0,
       0,    92,    73,    74,    84,   109,   201,   202,     0,   206,
       0,   211,   212,    87,    99,    95,    98,     0,     0,    81,
       0,    75,   214,   214,   214,     0,    88,     0,    27,    28,
      43,    29,    30,   217,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   240,   239,   237,   236,   235,   230,
     229,   233,   234,   232,   231,   228,   227,   225,   226,   222,
     223,   224,    15,    26,    24,    50,    48,    44,    20,    21,
      35,    34,    53,    57,     0,     0,   348,   349,     0,   344,
     342,     0,   298,   290,     0,   298,     0,     0,    86,     0,
       0,   186,   187,     0,   204,   207,   213,     0,   103,    94,
      97,     0,    83,     0,     0,     0,     0,   338,    41,     0,
     250,   256,     0,     0,   254,     0,   241,   218,   245,   244,
     246,   247,     0,     0,   261,   262,   249,     0,   248,     0,
      58,   365,   362,   355,   345,   343,     0,     0,   298,     0,
     266,   108,   305,     0,   306,   288,   323,   324,     0,   199,
       0,     0,   197,     0,     0,    91,     0,     0,   101,   179,
     180,   181,     0,     0,     0,     0,     0,     0,     0,     0,
     238,   366,     0,     0,     0,   292,   293,   294,   295,   296,
     299,     0,     0,     0,     0,   301,     0,   268,     0,   304,
     307,   266,     0,   327,     0,   321,     0,   200,   196,   198,
       0,   183,   192,   100,     0,     0,   112,   251,   252,   253,
     255,   258,   259,   260,   358,     0,   365,   297,     0,   300,
       0,     0,   270,   291,   270,   108,     0,   324,     0,     0,
      77,   214,     0,   104,     0,   350,     0,   298,     0,     0,
       0,   276,   282,     0,     0,   325,     0,   322,   193,     0,
     190,   102,   356,     0,     0,   265,     0,     0,   274,     0,
     289,   328,   324,   214,     0,   302,   267,     0,   271,   272,
     273,     0,   283,   326,   194,     0,   269,   277,   312,   298,
     157,     0,     0,   134,   115,   114,   159,   160,   161,   162,
     163,     0,     0,     0,     0,     0,     0,   144,   146,   151,
       0,     0,     0,   145,     0,   116,     0,     0,   140,   148,
     156,   158,     0,     0,     0,   313,   284,   303,     0,     0,
       0,     0,   153,   214,     0,   141,     0,     0,   113,     0,
     133,   183,     0,   135,     0,     0,   155,   278,   214,   143,
       0,   309,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   157,     0,   164,     0,     0,   127,     0,   131,
       0,     0,   136,     0,   183,   183,     0,   309,     0,   157,
       0,   264,     0,     0,   147,     0,   118,     0,     0,   119,
     120,   126,     0,   150,     0,   113,     0,     0,   129,     0,
     130,   132,   138,   137,   183,   264,   149,     0,   308,     0,
     310,     0,     0,     0,     0,     0,   154,     0,   142,   128,
     117,   139,   310,   314,     0,   166,     0,     0,     0,     0,
       0,     0,   166,   310,   263,   214,     0,   285,   122,   121,
       0,   123,   124,     0,   279,   166,   165,   311,   183,   125,
     152,   183,   315,   286,   280,   183,   316
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     6,   124,    11,    12,     9,    10,    19,    91,   248,
     184,   183,   181,   192,   193,   194,   308,     7,     8,    18,
      59,   137,   215,   237,   447,   555,   507,    60,   209,   326,
     142,   655,   656,   708,   657,   710,   681,   658,   659,   706,
     660,   674,   702,   661,   662,   663,   703,   777,   116,   146,
      62,   713,    63,   218,   219,   220,   335,   441,   551,   600,
     440,   501,   502,    64,    65,   230,    66,   231,    67,   233,
     704,   207,   253,   750,   537,   572,   591,   621,   327,   432,
     608,   630,   717,   791,   434,   609,   628,   691,   788,   435,
     542,   491,   531,   489,   490,   494,   541,   721,   765,   631,
     690,   773,   795,    68,   210,   330,   436,   579,   497,   545,
     577,    15,    16,    26,    27,   104,    13,    14,    69,    70,
      23,    24,   431,    98,    99,   524,   425,   522
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -709
static const yytype_int16 yypact[] =
{
     309,  -709,  -709,  -709,  -709,  -709,    40,  -709,  -709,  -709,
    -709,  -709,    80,  -709,   -10,  -709,    53,  -709,   837,  1623,
     108,   109,    70,   -10,  -709,   115,    53,  -709,   475,    92,
     140,   248,   150,  -709,   195,  -709,   235,   187,   219,   225,
     228,   240,   252,   257,   272,   282,   285,  -709,  -709,   290,
     294,  -709,   306,   307,   312,   314,  -709,   315,  -709,  -709,
    -709,  -709,   184,  -709,  -709,  -709,  -709,  -709,  -709,  -709,
     211,  -709,   281,   235,   346,   682,  -709,   350,   352,   365,
    -709,  -709,   368,   375,   382,   682,   387,   391,   398,  -709,
     399,   292,   682,  -709,   403,  -709,   392,   396,   356,   249,
     109,  -709,  -709,  -709,   378,   287,  -709,  -709,  -709,  -709,
    -709,  -709,  -709,  -709,  -709,  -709,  -709,  -709,  -709,   434,
     436,   437,   438,  -709,  -709,    72,   439,   442,   443,   235,
     235,   444,   235,    16,  -709,   445,   172,   414,   235,   448,
     452,   454,   429,  -709,  -709,  -709,  -709,   409,    25,  -709,
      28,  -709,  -709,   682,   682,   682,   431,   432,   433,   440,
     441,  -709,   455,   456,   457,   460,   461,   462,   463,   465,
     467,   468,   469,   470,   472,   474,   682,   682,  1405,   379,
    -709,   326,  -709,   328,    33,  -709,  -709,   514,  1805,   330,
    -709,  -709,   334,  -709,   487,  -709,  -709,  1805,   458,   115,
     115,   369,   242,   464,   373,   242,  -709,   682,  -709,   889,
      50,  -709,  -709,    78,   380,  -709,  -709,   235,   466,    -8,
    -709,   376,   381,   384,   386,   388,   389,   390,  -709,  -709,
     107,   125,    49,   393,  -709,  -709,   489,    19,   172,   394,
     528,   532,   537,   682,   400,   -10,   682,   682,  -709,   682,
     682,  -709,  -709,   790,   682,   682,   682,   682,   682,   542,
     544,   682,   545,   546,   564,   565,   682,   682,   567,   572,
     682,   682,   574,  -709,  -709,   682,   682,   682,   682,   682,
     682,   682,   682,   682,   682,   682,   682,   682,   682,   682,
     682,   682,   682,   682,   682,   682,   682,  1805,   577,   578,
    -709,   580,   682,   682,  1805,   336,   582,  -709,    77,  -709,
     446,   447,  -709,  -709,   583,  -709,  -709,  -709,    -6,  -709,
    1805,   475,  -709,   235,  -709,  -709,  -709,  -709,  -709,  -709,
    -709,   584,  -709,  -709,   913,   553,  -709,  -709,  -709,    72,
     599,  -709,  -709,  -709,  -709,  -709,  -709,  -709,   235,  -709,
     235,   445,  -709,  -709,  -709,  -709,  -709,   554,   180,  -709,
      22,  -709,  -709,  -709,  -709,  1436,  -709,    59,  1805,  1805,
    1646,  1805,  1805,  -709,   841,  1043,  1456,  1476,  1063,   477,
     459,  1083,   479,   480,   485,   486,  1496,  1534,   491,   492,
    1103,  1565,   493,  1675,  1822,  1514,  1023,  1836,  1849,   530,
     530,   587,   587,   587,   587,   332,   332,   259,   259,  -709,
    -709,  -709,  1805,  1805,  1805,  -709,  -709,  -709,  1805,  1805,
    -709,  -709,  -709,  -709,   601,   115,   267,   242,   550,  -709,
    -709,     8,     5,  -709,   598,     5,   682,   496,  -709,     3,
     597,    72,  -709,   495,  -709,  -709,  -709,   172,  -709,  -709,
    -709,   606,  -709,   497,   505,   508,   620,  -709,  -709,   682,
    -709,  -709,   682,   682,  -709,   682,  -709,  -709,  -709,  -709,
    -709,  -709,   682,   682,  -709,  -709,  -709,   630,  -709,   682,
    -709,   507,   640,  -709,  -709,  -709,   230,   623,  1762,   645,
     560,  -709,  -709,  1785,   575,  -709,  1805,    29,   662,  -709,
     664,     2,  -709,   576,   634,  -709,    90,   172,  -709,  -709,
    -709,  -709,   524,  1123,  1143,  1174,  1194,  1214,  1234,   525,
    1805,   242,   615,   115,   115,  -709,  -709,  -709,  -709,  -709,
    -709,   529,   682,   264,   659,  -709,   652,   639,   506,  -709,
    -709,   560,   632,   655,   657,  -709,   548,  -709,  -709,  -709,
     690,   552,  -709,  -709,   119,   172,  -709,  -709,  -709,  -709,
    -709,  -709,  -709,  -709,  -709,   555,   507,  -709,  1254,  -709,
     682,   661,   600,  -709,   600,  -709,   682,    29,   682,   561,
    -709,  -709,   611,  -709,   129,   242,   649,   236,  1274,   682,
     673,  -709,  -709,  1566,  1305,  -709,  1325,  -709,  -709,   705,
    -709,  -709,  -709,   677,   701,  -709,  1345,   682,   168,   660,
    -709,  -709,    29,  -709,   682,  -709,  -709,  1365,  -709,  -709,
    -709,   665,  -709,  -709,  -709,  1385,  -709,  -709,  -709,   685,
     740,    71,   708,   413,  -709,  -709,  -709,  -709,  -709,  -709,
    -709,   688,   689,   691,   692,   235,   694,  -709,  -709,  -709,
     695,   699,   700,  -709,    88,  -709,   702,    51,  -709,  -709,
    -709,   740,   668,   703,   184,  -709,  -709,  -709,   313,   374,
      35,    35,  -709,  -709,   706,  -709,   734,    35,  -709,   709,
    -709,   -52,    88,   713,    88,   714,  -709,  -709,  -709,  -709,
     696,   727,   716,   719,   612,   721,   613,   724,   732,   624,
     626,   627,   740,   629,  -709,   682,    17,  -709,     4,  -709,
      14,   338,  -709,    88,   141,   106,    88,   727,   631,   740,
     766,   678,    35,    35,  -709,    35,  -709,    35,    35,  -709,
    -709,  -709,   743,  -709,  1585,   641,   642,   782,  -709,    35,
    -709,  -709,  -709,  -709,   173,   678,  -709,   728,  -709,   765,
    -709,   644,   651,    15,   653,   654,  -709,   788,  -709,  -709,
    -709,  -709,  -709,  -709,   798,   234,   656,   679,    35,   680,
     681,   683,   234,  -709,  -709,  -709,   800,  -709,  -709,  -709,
     684,  -709,  -709,   184,  -709,   234,  -709,  -709,   552,  -709,
    -709,   552,  -709,  -709,  -709,   552,  -709
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -709,  -709,   -70,  -709,  -709,  -709,  -709,   581,  -709,  -709,
    -709,  -709,  -709,  -709,   704,  -709,  -709,  -709,  -709,   622,
    -709,  -709,  -709,  -223,  -709,  -709,  -709,  -709,  -439,   -13,
    -709,   -23,  -358,  -709,  -709,   110,  -453,   132,  -709,  -709,
     178,  -709,  -709,  -709,  -620,  -709,    67,  -708,  -709,  -642,
    -592,  -218,  -709,   402,  -709,   509,  -709,  -709,  -709,  -709,
    -709,  -709,   348,  -709,  -709,  -709,  -709,  -709,  -709,  -191,
    -105,  -709,   -75,   105,   310,  -709,   278,  -709,  -709,  -709,
    -709,  -709,  -709,  -709,  -709,  -709,  -709,  -709,  -709,  -709,
    -709,  -709,  -709,  -472,   418,  -709,  -709,   137,  -627,  -709,
    -709,  -709,  -709,  -709,  -709,  -709,  -709,  -709,  -709,  -516,
    -709,  -709,  -709,  -709,   829,  -709,  -709,  -709,  -709,  -709,
     633,   -19,  -709,   776,   -11,  -709,  -709,   321
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -338
static const yytype_int16 yytable[] =
{
     178,   339,   206,   149,   101,    61,   499,   499,   151,   152,
     188,   208,   348,   350,   105,   360,   534,   197,   678,   678,
     123,   735,   689,   355,   356,   737,   355,   356,  -185,   634,
     634,   246,   634,   543,   249,   153,   154,   300,   664,   678,
      17,   352,   486,   156,   157,   487,   635,   635,    21,   635,
     634,  -185,   538,   232,   328,   683,   158,   159,   160,   224,
     225,   595,   227,   229,   784,   161,   634,   635,   239,   664,
     162,   679,   642,   643,   644,   665,   216,   792,   251,   252,
     163,   423,   732,   635,    20,   164,   165,   166,   167,   168,
     169,   170,   678,   338,   355,   356,   623,   712,   171,   747,
     172,   273,   274,   634,   297,   679,   642,   643,   644,   329,
     664,    25,   304,    93,    92,   604,   173,    21,   457,    93,
     635,    22,   174,   355,   356,   429,   357,   664,   100,   357,
     666,   544,   320,   355,   356,   772,   593,   338,   217,   484,
     430,   790,   679,   642,   643,   644,   785,   336,   175,   548,
     117,   738,   500,   500,   485,   176,   177,   632,   651,   652,
     446,   739,   768,   228,   358,   654,   359,   358,   365,   452,
     247,   368,   369,   250,   371,   372,   234,   235,   301,   374,
     375,   376,   377,   378,   449,   450,   381,   121,   310,   311,
      22,   386,   387,   652,   351,   390,   391,   357,   118,   684,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   424,   331,   506,   332,   357,   418,   419,   714,
     652,   715,   122,   151,   152,   358,   357,   553,    94,   123,
     775,    95,    96,    97,    94,   125,   313,    95,   102,   103,
     776,   338,   338,   433,   347,   743,   126,   453,   454,   455,
     153,   154,   127,   744,   358,   128,   583,   155,   156,   157,
     338,   313,   349,   533,   358,   603,   601,   129,   444,   236,
     445,   158,   159,   160,   554,   148,   338,   451,   742,   130,
     161,   291,   292,   293,   131,   162,   680,   119,   120,   685,
     525,   526,   527,   528,   529,   163,   618,   619,   620,   132,
     164,   165,   166,   167,   168,   169,   170,   678,   338,   133,
     761,    61,   134,   171,   680,   172,   680,   135,   634,   144,
     145,   136,   584,   582,   525,   526,   527,   528,   529,   420,
     421,   173,   678,   138,   139,   635,   147,   174,   101,   140,
     150,   141,   143,   634,   179,   741,   180,   488,   680,   493,
     488,   496,   289,   290,   291,   292,   293,   692,   693,   182,
     635,   314,   185,   175,   315,   316,   317,   530,   678,   186,
     176,   177,   151,   152,   513,   295,   187,   514,   515,   634,
     516,   189,   692,   693,   190,   202,   314,   517,   518,   315,
     316,   482,   191,   195,   520,   196,   635,   198,   199,   153,
     154,   530,   200,   694,   481,   201,   155,   156,   157,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   697,   698,
     158,   159,   160,   205,     1,     2,     3,   204,   211,   161,
     212,   213,   214,   221,   162,     4,   222,   223,   226,   232,
    -113,   238,   240,     5,   163,   695,   241,   568,   242,   164,
     165,   166,   167,   168,   169,   170,   243,   245,   254,   255,
     256,   298,   171,   299,   172,   305,   598,   257,   258,   306,
     695,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     173,   307,   259,   260,   261,   588,   174,   262,   263,   264,
     265,   594,   266,   596,   267,   268,   269,   270,   624,   271,
     321,   272,   565,   566,   606,   312,   309,   151,   152,   319,
     302,   340,   175,   318,   296,   337,   354,   333,   341,   176,
     177,   342,   617,   343,   362,   344,   345,   346,   363,   625,
     353,   361,   573,   364,   153,   154,   379,   366,   380,   382,
     383,   155,   156,   157,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   158,   159,   160,   384,   385,
     793,   388,   323,   794,   161,   672,   389,   796,   392,   162,
     324,   415,   416,   718,   417,    43,   422,   428,   437,   163,
     439,   448,   426,   427,   164,   165,   166,   167,   168,   169,
     170,   151,   152,   443,   325,   480,   466,   171,   483,   172,
      53,    54,    55,   503,   492,   287,   288,   289,   290,   291,
     292,   293,   465,    56,   512,   173,   468,   469,   153,   154,
     734,   174,   470,   471,   519,   155,   156,   157,   474,   475,
     478,   498,   505,   508,   509,   696,   699,   700,   701,   158,
     159,   160,   510,   521,   709,   511,   523,   175,   161,   303,
     532,   535,   536,   162,   176,   177,   546,   540,   547,   550,
     552,   556,   563,   163,   564,   569,   567,   571,   164,   165,
     166,   167,   168,   169,   170,   151,   152,   740,   696,   570,
     575,   171,   576,   172,   578,   580,   581,   338,   589,   751,
     752,   585,   709,   590,   754,   755,   599,   597,   602,   173,
     607,   613,   153,   154,   614,   174,   760,   615,   622,   155,
     156,   157,   533,   627,   667,   668,   669,   687,   670,   671,
     740,   673,   675,   158,   159,   160,   676,   677,   707,   682,
     688,   175,   161,   705,   633,   780,   711,   162,   176,   177,
    -113,   716,   720,   722,   719,   634,   723,   163,   725,   724,
     726,   727,   164,   165,   166,   167,   168,   169,   170,   728,
     748,   729,   635,   730,   731,   171,   733,   172,   746,   756,
     749,   636,   637,   638,   639,   640,   759,   763,  -134,   758,
     764,   766,   771,   173,   641,   642,   643,   644,   767,   174,
     769,   770,   774,   778,   787,   275,   645,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   175,   779,   781,   782,   370,
     783,   789,   176,   177,   646,   753,   647,   334,   736,   686,
     648,    28,   786,   504,    53,    54,    55,   244,   442,   549,
     762,   574,   592,   495,   745,   106,   275,   649,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   203,   650,   367,     0,
       0,   651,   652,    29,    30,    31,   653,   586,   654,     0,
       0,     0,     0,   321,     0,     0,     0,     0,    32,    33,
      34,    35,     0,    36,    37,    38,    39,     0,     0,     0,
       0,     0,     0,    40,    41,    42,    43,    28,     0,     0,
       0,     0,     0,     0,    44,    45,    46,    47,    48,    49,
       0,     0,     0,     0,    50,    51,    52,   373,     0,     0,
       0,    53,    54,    55,     0,     0,     0,     0,   322,   438,
       0,     0,     0,     0,    56,   323,     0,     0,     0,    29,
      30,    31,     0,   324,     0,     0,    57,     0,    43,     0,
       0,     0,  -337,     0,    32,    33,    34,    35,     0,    36,
      37,    38,    39,    58,     0,     0,   459,   325,   460,    40,
      41,    42,    43,    53,    54,    55,     0,     0,     0,     0,
      44,    45,    46,    47,    48,    49,    56,     0,     0,     0,
      50,    51,    52,     0,     0,     0,     0,    53,    54,    55,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      56,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    57,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   275,    58,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   275,     0,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   275,     0,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   275,     0,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   275,     0,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   275,     0,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   275,
     461,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   275,
     464,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   275,
     467,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   275,
     476,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   275,
     557,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   275,
     558,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     275,   559,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     275,   560,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     275,   561,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     275,   562,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     275,   587,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     275,   605,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   275,   611,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   275,   612,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   275,   616,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   275,   626,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,     0,   629,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   275,
     294,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,     0,
     321,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     275,   456,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     275,   462,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
       0,   463,     0,     0,     0,   610,     0,    71,     0,     0,
       0,     0,   323,     0,     0,     0,     0,     0,     0,     0,
     324,   472,     0,     0,     0,    43,     0,     0,     0,     0,
      71,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    72,     0,     0,   325,     0,     0,     0,     0,     0,
      53,    54,    55,     0,     0,     0,     0,     0,     0,   473,
       0,     0,   458,    56,    72,     0,     0,     0,     0,    73,
     275,   479,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     477,     0,    73,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    74,     0,     0,     0,     0,     0,
     757,    75,    76,    77,    78,    79,   -43,    80,    81,    82,
       0,    83,    84,     0,    85,    86,    87,    74,     0,     0,
       0,    88,    89,    90,    75,    76,    77,    78,    79,     0,
      80,    81,    82,     0,    83,    84,     0,    85,    86,    87,
       0,     0,     0,     0,    88,    89,    90,   275,     0,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,     0,     0,   533,
     275,   539,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     275,     0,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293
};

static const yytype_int16 yycheck[] =
{
      75,   219,   107,    73,    23,    18,     4,     4,     3,     4,
      85,   116,   230,   231,    25,   238,   488,    92,     4,     4,
       4,     4,   664,     4,     5,    21,     4,     5,    36,    15,
      15,     6,    15,     4,     6,    30,    31,     4,   630,     4,
       0,   232,    37,    38,    39,    40,    32,    32,    58,    32,
      15,    59,   491,     4,     4,     4,    51,    52,    53,   129,
     130,   577,   132,   133,   772,    60,    15,    32,   138,   661,
      65,    54,    55,    56,    57,     4,     4,   785,   153,   154,
      75,     4,   702,    32,     4,    80,    81,    82,    83,    84,
      85,    86,     4,   145,     4,     5,   612,   149,    93,   719,
      95,   176,   177,    15,   179,    54,    55,    56,    57,    59,
     702,    58,   187,     4,     6,   587,   111,    58,    59,     4,
      32,   131,   117,     4,     5,   131,   107,   719,    58,   107,
      59,   102,   207,     4,     5,   762,   575,   145,    66,   131,
     146,   783,    54,    55,    56,    57,   773,   217,   143,   147,
      58,   147,   150,   150,   146,   150,   151,   629,   141,   142,
     351,   147,   147,   147,   145,   148,   147,   145,   243,   147,
     145,   246,   247,   145,   249,   250,     4,     5,   145,   254,
     255,   256,   257,   258,     4,     5,   261,    37,   199,   200,
     131,   266,   267,   142,   145,   270,   271,   107,    58,   148,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   145,   145,   447,   147,   107,   302,   303,   682,
     142,   684,    37,     3,     4,   145,   107,   147,   129,     4,
       6,   132,   133,   134,   129,    58,     4,   132,   133,   134,
      16,   145,   145,   323,   147,   149,    37,   362,   363,   364,
      30,    31,    37,   716,   145,    37,   147,    37,    38,    39,
     145,     4,   147,    37,   145,    39,   147,    37,   348,   107,
     350,    51,    52,    53,   507,     4,   145,   107,   147,    37,
      60,    32,    33,    34,    37,    65,   654,    49,    50,   657,
      70,    71,    72,    73,    74,    75,   138,   139,   140,    37,
      80,    81,    82,    83,    84,    85,    86,     4,   145,    37,
     147,   334,    37,    93,   682,    95,   684,    37,    15,   145,
     146,    37,   555,   551,    70,    71,    72,    73,    74,     3,
       4,   111,     4,    37,    37,    32,   135,   117,   367,    37,
       4,    37,    37,    15,     4,   713,     4,   432,   716,   434,
     435,   436,    30,    31,    32,    33,    34,    54,    55,     4,
      32,   129,     4,   143,   132,   133,   134,   147,     4,     4,
     150,   151,     3,     4,   459,     6,     4,   462,   463,    15,
     465,     4,    54,    55,     3,   146,   129,   472,   473,   132,
     133,   134,     4,     4,   479,   113,    32,     4,    16,    30,
      31,   147,    16,   100,   425,    59,    37,    38,    39,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    54,    55,
      51,    52,    53,   146,   125,   126,   127,    59,     4,    60,
       4,     4,     4,     4,    65,   136,     4,     4,     4,     4,
      37,    37,     4,   144,    75,   142,     4,   532,     4,    80,
      81,    82,    83,    84,    85,    86,    37,    58,    37,    37,
      37,   145,    93,   145,    95,   145,   581,    37,    37,   145,
     142,     6,     7,     8,     9,    10,    11,    12,    13,    14,
     111,     4,    37,    37,    37,   570,   117,    37,    37,    37,
      37,   576,    37,   578,    37,    37,    37,    37,   613,    37,
       4,    37,   523,   524,   589,   146,    58,     3,     4,   146,
       6,   145,   143,    59,   145,    59,    37,   147,   147,   150,
     151,   147,   607,   147,     6,   147,   147,   147,     6,   614,
     147,   147,    36,     6,    30,    31,     4,   147,     4,     4,
       4,    37,    38,    39,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    51,    52,    53,     4,     4,
     788,     4,    66,   791,    60,   645,     4,   795,     4,    65,
      74,     4,     4,   688,     4,    79,     4,     4,     4,    75,
      37,    37,   146,   146,    80,    81,    82,    83,    84,    85,
      86,     3,     4,     4,    98,     4,   147,    93,    58,    95,
     104,   105,   106,    16,    16,    28,    29,    30,    31,    32,
      33,    34,   145,   117,     4,   111,   147,   147,    30,    31,
     705,   117,   147,   147,     4,    37,    38,    39,   147,   147,
     147,   145,   147,    37,   147,   668,   669,   670,   671,    51,
      52,    53,   147,   146,   677,   147,    16,   143,    60,   145,
      37,    16,   102,    65,   150,   151,     4,    92,     4,    93,
      36,   147,   147,    75,    59,    16,   147,    38,    80,    81,
      82,    83,    84,    85,    86,     3,     4,   710,   711,    37,
      58,    93,    37,    95,    37,   147,     6,   145,    37,   722,
     723,   146,   725,   103,   727,   728,    95,   146,    59,   111,
      37,     6,    30,    31,    37,   117,   739,    16,    58,    37,
      38,    39,    37,    58,    16,    37,    37,    59,    37,    37,
     753,    37,    37,    51,    52,    53,    37,    37,     4,    37,
      37,   143,    60,    37,     4,   768,    37,    65,   150,   151,
      37,    37,    25,    37,    58,    15,    37,    75,    37,   147,
     147,    37,    80,    81,    82,    83,    84,    85,    86,    37,
       4,   147,    32,   147,   147,    93,   147,    95,   147,    36,
     102,    41,    42,    43,    44,    45,     4,    59,   147,   147,
      25,   147,     4,   111,    54,    55,    56,    57,   147,   117,
     147,   147,     4,   147,     4,    15,    66,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,   143,   147,   147,   147,   248,
     147,   147,   150,   151,    94,   725,    96,   215,   706,   661,
     100,     4,   775,   441,   104,   105,   106,   143,   339,   501,
     745,   541,   574,   435,   717,    26,    15,   117,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,   100,   137,   245,    -1,
      -1,   141,   142,    46,    47,    48,   146,   566,   148,    -1,
      -1,    -1,    -1,     4,    -1,    -1,    -1,    -1,    61,    62,
      63,    64,    -1,    66,    67,    68,    69,    -1,    -1,    -1,
      -1,    -1,    -1,    76,    77,    78,    79,     4,    -1,    -1,
      -1,    -1,    -1,    -1,    87,    88,    89,    90,    91,    92,
      -1,    -1,    -1,    -1,    97,    98,    99,   147,    -1,    -1,
      -1,   104,   105,   106,    -1,    -1,    -1,    -1,    59,    36,
      -1,    -1,    -1,    -1,   117,    66,    -1,    -1,    -1,    46,
      47,    48,    -1,    74,    -1,    -1,   129,    -1,    79,    -1,
      -1,    -1,   135,    -1,    61,    62,    63,    64,    -1,    66,
      67,    68,    69,   146,    -1,    -1,   145,    98,   147,    76,
      77,    78,    79,   104,   105,   106,    -1,    -1,    -1,    -1,
      87,    88,    89,    90,    91,    92,   117,    -1,    -1,    -1,
      97,    98,    99,    -1,    -1,    -1,    -1,   104,   105,   106,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   129,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    15,   146,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    15,    -1,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    15,    -1,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    15,    -1,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    15,    -1,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    15,    -1,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,
     147,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     147,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     147,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     147,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     147,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     147,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      15,   147,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   147,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   147,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   147,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   147,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   147,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    15,   147,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    15,   147,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    15,   147,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    15,   147,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,   147,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     145,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
       4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      15,   145,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   145,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,   145,    -1,    -1,    -1,    59,    -1,     4,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,   145,    -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,
       4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    98,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,    -1,    -1,    -1,    -1,    -1,    -1,   145,
      -1,    -1,    36,   117,    38,    -1,    -1,    -1,    -1,    66,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
     145,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,
     145,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,   119,    -1,   121,   122,   123,   101,    -1,    -1,
      -1,   128,   129,   130,   108,   109,   110,   111,   112,    -1,
     114,   115,   116,    -1,   118,   119,    -1,   121,   122,   123,
      -1,    -1,    -1,    -1,   128,   129,   130,    15,    -1,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    -1,    37,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,   125,   126,   127,   136,   144,   153,   169,   170,   157,
     158,   155,   156,   268,   269,   263,   264,     0,   171,   159,
       4,    58,   131,   272,   273,    58,   265,   266,     4,    46,
      47,    48,    61,    62,    63,    64,    66,    67,    68,    69,
      76,    77,    78,    79,    87,    88,    89,    90,    91,    92,
      97,    98,    99,   104,   105,   106,   117,   129,   146,   172,
     179,   181,   202,   204,   215,   216,   218,   220,   255,   270,
     271,     4,    38,    66,   101,   108,   109,   110,   111,   112,
     114,   115,   116,   118,   119,   121,   122,   123,   128,   129,
     130,   160,     6,     4,   129,   132,   133,   134,   275,   276,
      58,   273,   133,   134,   267,   276,   266,     6,     7,     8,
       9,    10,    11,    12,    13,    14,   200,    58,    58,    49,
      50,    37,    37,     4,   154,    58,    37,    37,    37,    37,
      37,    37,    37,    37,    37,    37,    37,   173,    37,    37,
      37,    37,   182,    37,   145,   146,   201,   135,     4,   154,
       4,     3,     4,    30,    31,    37,    38,    39,    51,    52,
      53,    60,    65,    75,    80,    81,    82,    83,    84,    85,
      86,    93,    95,   111,   117,   143,   150,   151,   224,     4,
       4,   164,     4,   163,   162,     4,     4,     4,   224,     4,
       3,     4,   165,   166,   167,     4,   113,   224,     4,    16,
      16,    59,   146,   275,    59,   146,   222,   223,   222,   180,
     256,     4,     4,     4,     4,   174,     4,    66,   205,   206,
     207,     4,     4,     4,   154,   154,     4,   154,   147,   154,
     217,   219,     4,   221,     4,     5,   107,   175,    37,   154,
       4,     4,     4,    37,   166,    58,     6,   145,   161,     6,
     145,   224,   224,   224,    37,    37,    37,    37,    37,    37,
      37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    37,   224,   224,    15,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,   145,     6,   145,   224,   145,   145,
       4,   145,     6,   145,   224,   145,   145,     4,   168,    58,
     276,   276,   146,     4,   129,   132,   133,   134,    59,   146,
     224,     4,    59,    66,    74,    98,   181,   230,     4,    59,
     257,   145,   147,   147,   171,   208,   154,    59,   145,   203,
     145,   147,   147,   147,   147,   147,   147,   147,   203,   147,
     203,   145,   221,   147,    37,     4,     5,   107,   145,   147,
     175,   147,     6,     6,     6,   224,   147,   272,   224,   224,
     159,   224,   224,   147,   224,   224,   224,   224,   224,     4,
       4,   224,     4,     4,     4,     4,   224,   224,     4,     4,
     224,   224,     4,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   224,   224,   224,   224,   224,   224,
     224,   224,   224,   224,   224,     4,     4,     4,   224,   224,
       3,     4,     4,     4,   145,   278,   146,   146,     4,   131,
     146,   274,   231,   154,   236,   241,   258,     4,    36,    37,
     212,   209,   207,     4,   154,   154,   221,   176,    37,     4,
       5,   107,   147,   222,   222,   222,   145,    59,    36,   145,
     147,   147,   145,   145,   147,   145,   147,   147,   147,   147,
     147,   147,   145,   145,   147,   147,   147,   145,   147,    16,
       4,   276,   134,    58,   131,   146,    37,    40,   224,   245,
     246,   243,    16,   224,   247,   246,   224,   260,   145,     4,
     150,   213,   214,    16,   205,   147,   175,   178,    37,   147,
     147,   147,     4,   224,   224,   224,   224,   224,   224,     4,
     224,   146,   279,    16,   277,    70,    71,    72,    73,    74,
     147,   244,    37,    37,   245,    16,   102,   226,   180,    16,
      92,   248,   242,     4,   102,   261,     4,     4,   147,   214,
      93,   210,    36,   147,   175,   177,   147,   147,   147,   147,
     147,   147,   147,   147,    59,   276,   276,   147,   224,    16,
      37,    38,   227,    36,   226,    58,    37,   262,    37,   259,
     147,     6,   203,   147,   175,   146,   279,   147,   224,    37,
     103,   228,   228,   180,   224,   261,   224,   146,   222,    95,
     211,   147,    59,    39,   245,   147,   224,    37,   232,   237,
      59,   147,   147,     6,    37,    16,   147,   224,   138,   139,
     140,   229,    58,   261,   222,   224,   147,    58,   238,   147,
     233,   251,   245,     4,    15,    32,    41,    42,    43,    44,
      45,    54,    55,    56,    57,    66,    94,    96,   100,   117,
     137,   141,   142,   146,   148,   183,   184,   186,   189,   190,
     192,   195,   196,   197,   202,     4,    59,    16,    37,    37,
      37,    37,   154,    37,   193,    37,    37,    37,     4,    54,
     184,   188,    37,     4,   148,   184,   192,    59,    37,   201,
     252,   239,    54,    55,   100,   142,   183,    54,    55,   183,
     183,   183,   194,   198,   222,    37,   191,     4,   185,   183,
     187,    37,   149,   203,   188,   188,    37,   234,   222,    58,
      25,   249,    37,    37,   147,    37,   147,    37,    37,   147,
     147,   147,   196,   147,   224,     4,   189,    21,   147,   147,
     183,   184,   147,   149,   188,   249,   147,   196,     4,   102,
     225,   183,   183,   187,   183,   183,    36,   145,   147,     4,
     183,   147,   225,    59,    25,   250,   147,   147,   147,   147,
     147,     4,   250,   253,     4,     6,    16,   199,   147,   147,
     183,   147,   147,   147,   199,   250,   198,     4,   240,   147,
     201,   235,   199,   203,   203,   254,   203
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  
  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 8:
#line 180 "ldgram.y"
    { ldlex_defsym(); }
    break;

  case 9:
#line 182 "ldgram.y"
    {
		  ldlex_popstate();
		  lang_add_assignment (exp_defsym ((yyvsp[(2) - (4)].name), (yyvsp[(4) - (4)].etree)));
		}
    break;

  case 10:
#line 190 "ldgram.y"
    {
		  ldlex_mri_script ();
		  PUSH_ERROR (_("MRI style script"));
		}
    break;

  case 11:
#line 195 "ldgram.y"
    {
		  ldlex_popstate ();
		  mri_draw_tree ();
		  POP_ERROR ();
		}
    break;

  case 16:
#line 210 "ldgram.y"
    {
			einfo(_("%P%F: unrecognised keyword in MRI style script '%s'\n"),(yyvsp[(1) - (1)].name));
			}
    break;

  case 17:
#line 213 "ldgram.y"
    {
			config.map_filename = "-";
			}
    break;

  case 20:
#line 219 "ldgram.y"
    { mri_public((yyvsp[(2) - (4)].name), (yyvsp[(4) - (4)].etree)); }
    break;

  case 21:
#line 221 "ldgram.y"
    { mri_public((yyvsp[(2) - (4)].name), (yyvsp[(4) - (4)].etree)); }
    break;

  case 22:
#line 223 "ldgram.y"
    { mri_public((yyvsp[(2) - (3)].name), (yyvsp[(3) - (3)].etree)); }
    break;

  case 23:
#line 225 "ldgram.y"
    { mri_format((yyvsp[(2) - (2)].name)); }
    break;

  case 24:
#line 227 "ldgram.y"
    { mri_output_section((yyvsp[(2) - (4)].name), (yyvsp[(4) - (4)].etree));}
    break;

  case 25:
#line 229 "ldgram.y"
    { mri_output_section((yyvsp[(2) - (3)].name), (yyvsp[(3) - (3)].etree));}
    break;

  case 26:
#line 231 "ldgram.y"
    { mri_output_section((yyvsp[(2) - (4)].name), (yyvsp[(4) - (4)].etree));}
    break;

  case 27:
#line 233 "ldgram.y"
    { mri_align((yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].etree)); }
    break;

  case 28:
#line 235 "ldgram.y"
    { mri_align((yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].etree)); }
    break;

  case 29:
#line 237 "ldgram.y"
    { mri_alignmod((yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].etree)); }
    break;

  case 30:
#line 239 "ldgram.y"
    { mri_alignmod((yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].etree)); }
    break;

  case 33:
#line 243 "ldgram.y"
    { mri_name((yyvsp[(2) - (2)].name)); }
    break;

  case 34:
#line 245 "ldgram.y"
    { mri_alias((yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].name),0);}
    break;

  case 35:
#line 247 "ldgram.y"
    { mri_alias ((yyvsp[(2) - (4)].name), 0, (int) (yyvsp[(4) - (4)].bigint).integer); }
    break;

  case 36:
#line 249 "ldgram.y"
    { mri_base((yyvsp[(2) - (2)].etree)); }
    break;

  case 37:
#line 251 "ldgram.y"
    { mri_truncate ((unsigned int) (yyvsp[(2) - (2)].bigint).integer); }
    break;

  case 40:
#line 255 "ldgram.y"
    { ldlex_script (); ldfile_open_command_file((yyvsp[(2) - (2)].name)); }
    break;

  case 41:
#line 257 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 42:
#line 259 "ldgram.y"
    { lang_add_entry ((yyvsp[(2) - (2)].name), FALSE); }
    break;

  case 44:
#line 264 "ldgram.y"
    { mri_order((yyvsp[(3) - (3)].name)); }
    break;

  case 45:
#line 265 "ldgram.y"
    { mri_order((yyvsp[(2) - (2)].name)); }
    break;

  case 47:
#line 271 "ldgram.y"
    { mri_load((yyvsp[(1) - (1)].name)); }
    break;

  case 48:
#line 272 "ldgram.y"
    { mri_load((yyvsp[(3) - (3)].name)); }
    break;

  case 49:
#line 277 "ldgram.y"
    { mri_only_load((yyvsp[(1) - (1)].name)); }
    break;

  case 50:
#line 279 "ldgram.y"
    { mri_only_load((yyvsp[(3) - (3)].name)); }
    break;

  case 51:
#line 283 "ldgram.y"
    { (yyval.name) = NULL; }
    break;

  case 54:
#line 290 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 55:
#line 292 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 56:
#line 296 "ldgram.y"
    { ldlang_add_undef ((yyvsp[(1) - (1)].name), FALSE); }
    break;

  case 57:
#line 298 "ldgram.y"
    { ldlang_add_undef ((yyvsp[(2) - (2)].name), FALSE); }
    break;

  case 58:
#line 300 "ldgram.y"
    { ldlang_add_undef ((yyvsp[(3) - (3)].name), FALSE); }
    break;

  case 59:
#line 304 "ldgram.y"
    { ldlex_both(); }
    break;

  case 60:
#line 306 "ldgram.y"
    { ldlex_popstate(); }
    break;

  case 73:
#line 327 "ldgram.y"
    { lang_add_target((yyvsp[(3) - (4)].name)); }
    break;

  case 74:
#line 329 "ldgram.y"
    { ldfile_add_library_path ((yyvsp[(3) - (4)].name), FALSE); }
    break;

  case 75:
#line 331 "ldgram.y"
    { lang_add_output((yyvsp[(3) - (4)].name), 1); }
    break;

  case 76:
#line 333 "ldgram.y"
    { lang_add_output_format ((yyvsp[(3) - (4)].name), (char *) NULL,
					    (char *) NULL, 1); }
    break;

  case 77:
#line 336 "ldgram.y"
    { lang_add_output_format ((yyvsp[(3) - (8)].name), (yyvsp[(5) - (8)].name), (yyvsp[(7) - (8)].name), 1); }
    break;

  case 78:
#line 338 "ldgram.y"
    { ldfile_set_output_arch ((yyvsp[(3) - (4)].name), bfd_arch_unknown); }
    break;

  case 79:
#line 340 "ldgram.y"
    { command_line.force_common_definition = TRUE ; }
    break;

  case 80:
#line 342 "ldgram.y"
    { command_line.inhibit_common_definition = TRUE ; }
    break;

  case 82:
#line 345 "ldgram.y"
    { lang_enter_group (); }
    break;

  case 83:
#line 347 "ldgram.y"
    { lang_leave_group (); }
    break;

  case 84:
#line 349 "ldgram.y"
    { lang_add_map((yyvsp[(3) - (4)].name)); }
    break;

  case 85:
#line 351 "ldgram.y"
    { ldlex_script (); ldfile_open_command_file((yyvsp[(2) - (2)].name)); }
    break;

  case 86:
#line 353 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 87:
#line 355 "ldgram.y"
    {
		  lang_add_nocrossref ((yyvsp[(3) - (4)].nocrossref));
		}
    break;

  case 89:
#line 360 "ldgram.y"
    { lang_add_insert ((yyvsp[(3) - (3)].name), 0); }
    break;

  case 90:
#line 362 "ldgram.y"
    { lang_add_insert ((yyvsp[(3) - (3)].name), 1); }
    break;

  case 91:
#line 364 "ldgram.y"
    { lang_memory_region_alias ((yyvsp[(3) - (6)].name), (yyvsp[(5) - (6)].name)); }
    break;

  case 92:
#line 366 "ldgram.y"
    { lang_ld_feature ((yyvsp[(3) - (4)].name)); }
    break;

  case 93:
#line 371 "ldgram.y"
    { lang_add_input_file((yyvsp[(1) - (1)].name),lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;

  case 94:
#line 374 "ldgram.y"
    { lang_add_input_file((yyvsp[(3) - (3)].name),lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;

  case 95:
#line 377 "ldgram.y"
    { lang_add_input_file((yyvsp[(2) - (2)].name),lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;

  case 96:
#line 380 "ldgram.y"
    { lang_add_input_file((yyvsp[(1) - (1)].name),lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;

  case 97:
#line 383 "ldgram.y"
    { lang_add_input_file((yyvsp[(3) - (3)].name),lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;

  case 98:
#line 386 "ldgram.y"
    { lang_add_input_file((yyvsp[(2) - (2)].name),lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;

  case 99:
#line 389 "ldgram.y"
    { (yyval.integer) = input_flags.add_DT_NEEDED_for_regular;
		    input_flags.add_DT_NEEDED_for_regular = TRUE; }
    break;

  case 100:
#line 392 "ldgram.y"
    { input_flags.add_DT_NEEDED_for_regular = (yyvsp[(3) - (5)].integer); }
    break;

  case 101:
#line 394 "ldgram.y"
    { (yyval.integer) = input_flags.add_DT_NEEDED_for_regular;
		    input_flags.add_DT_NEEDED_for_regular = TRUE; }
    break;

  case 102:
#line 397 "ldgram.y"
    { input_flags.add_DT_NEEDED_for_regular = (yyvsp[(5) - (7)].integer); }
    break;

  case 103:
#line 399 "ldgram.y"
    { (yyval.integer) = input_flags.add_DT_NEEDED_for_regular;
		    input_flags.add_DT_NEEDED_for_regular = TRUE; }
    break;

  case 104:
#line 402 "ldgram.y"
    { input_flags.add_DT_NEEDED_for_regular = (yyvsp[(4) - (6)].integer); }
    break;

  case 109:
#line 417 "ldgram.y"
    { lang_add_entry ((yyvsp[(3) - (4)].name), FALSE); }
    break;

  case 111:
#line 419 "ldgram.y"
    {ldlex_expression ();}
    break;

  case 112:
#line 420 "ldgram.y"
    { ldlex_popstate ();
		  lang_add_assignment (exp_assert ((yyvsp[(4) - (7)].etree), (yyvsp[(6) - (7)].name))); }
    break;

  case 113:
#line 428 "ldgram.y"
    {
			  (yyval.cname) = (yyvsp[(1) - (1)].name);
			}
    break;

  case 114:
#line 432 "ldgram.y"
    {
			  (yyval.cname) = "*";
			}
    break;

  case 115:
#line 436 "ldgram.y"
    {
			  (yyval.cname) = "?";
			}
    break;

  case 116:
#line 443 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(1) - (1)].cname);
			  (yyval.wildcard).sorted = none;
			  (yyval.wildcard).exclude_name_list = NULL;
			  (yyval.wildcard).section_flag_list = NULL;
			}
    break;

  case 117:
#line 450 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(5) - (5)].cname);
			  (yyval.wildcard).sorted = none;
			  (yyval.wildcard).exclude_name_list = (yyvsp[(3) - (5)].name_list);
			  (yyval.wildcard).section_flag_list = NULL;
			}
    break;

  case 118:
#line 457 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(3) - (4)].cname);
			  (yyval.wildcard).sorted = by_name;
			  (yyval.wildcard).exclude_name_list = NULL;
			  (yyval.wildcard).section_flag_list = NULL;
			}
    break;

  case 119:
#line 464 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(3) - (4)].cname);
			  (yyval.wildcard).sorted = by_alignment;
			  (yyval.wildcard).exclude_name_list = NULL;
			  (yyval.wildcard).section_flag_list = NULL;
			}
    break;

  case 120:
#line 471 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(3) - (4)].cname);
			  (yyval.wildcard).sorted = by_none;
			  (yyval.wildcard).exclude_name_list = NULL;
			  (yyval.wildcard).section_flag_list = NULL;
			}
    break;

  case 121:
#line 478 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(5) - (7)].cname);
			  (yyval.wildcard).sorted = by_name_alignment;
			  (yyval.wildcard).exclude_name_list = NULL;
			  (yyval.wildcard).section_flag_list = NULL;
			}
    break;

  case 122:
#line 485 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(5) - (7)].cname);
			  (yyval.wildcard).sorted = by_name;
			  (yyval.wildcard).exclude_name_list = NULL;
			  (yyval.wildcard).section_flag_list = NULL;
			}
    break;

  case 123:
#line 492 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(5) - (7)].cname);
			  (yyval.wildcard).sorted = by_alignment_name;
			  (yyval.wildcard).exclude_name_list = NULL;
			  (yyval.wildcard).section_flag_list = NULL;
			}
    break;

  case 124:
#line 499 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(5) - (7)].cname);
			  (yyval.wildcard).sorted = by_alignment;
			  (yyval.wildcard).exclude_name_list = NULL;
			  (yyval.wildcard).section_flag_list = NULL;
			}
    break;

  case 125:
#line 506 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(7) - (8)].cname);
			  (yyval.wildcard).sorted = by_name;
			  (yyval.wildcard).exclude_name_list = (yyvsp[(5) - (8)].name_list);
			  (yyval.wildcard).section_flag_list = NULL;
			}
    break;

  case 126:
#line 513 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(3) - (4)].cname);
			  (yyval.wildcard).sorted = by_init_priority;
			  (yyval.wildcard).exclude_name_list = NULL;
			  (yyval.wildcard).section_flag_list = NULL;
			}
    break;

  case 127:
#line 522 "ldgram.y"
    {
			  struct flag_info_list *n;
			  n = ((struct flag_info_list *) xmalloc (sizeof *n));
			  if ((yyvsp[(1) - (1)].name)[0] == '!')
			    {
			      n->with = without_flags;
			      n->name = &(yyvsp[(1) - (1)].name)[1];
			    }
			  else
			    {
			      n->with = with_flags;
			      n->name = (yyvsp[(1) - (1)].name);
			    }
			  n->valid = FALSE;
			  n->next = NULL;
			  (yyval.flag_info_list) = n;
			}
    break;

  case 128:
#line 540 "ldgram.y"
    {
			  struct flag_info_list *n;
			  n = ((struct flag_info_list *) xmalloc (sizeof *n));
			  if ((yyvsp[(3) - (3)].name)[0] == '!')
			    {
			      n->with = without_flags;
			      n->name = &(yyvsp[(3) - (3)].name)[1];
			    }
			  else
			    {
			      n->with = with_flags;
			      n->name = (yyvsp[(3) - (3)].name);
			    }
			  n->valid = FALSE;
			  n->next = (yyvsp[(1) - (3)].flag_info_list);
			  (yyval.flag_info_list) = n;
			}
    break;

  case 129:
#line 561 "ldgram.y"
    {
			  struct flag_info *n;
			  n = ((struct flag_info *) xmalloc (sizeof *n));
			  n->flag_list = (yyvsp[(3) - (4)].flag_info_list);
			  n->flags_initialized = FALSE;
			  n->not_with_flags = 0;
			  n->only_with_flags = 0;
			  (yyval.flag_info) = n;
			}
    break;

  case 130:
#line 574 "ldgram.y"
    {
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = (yyvsp[(2) - (2)].cname);
			  tmp->next = (yyvsp[(1) - (2)].name_list);
			  (yyval.name_list) = tmp;
			}
    break;

  case 131:
#line 583 "ldgram.y"
    {
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = (yyvsp[(1) - (1)].cname);
			  tmp->next = NULL;
			  (yyval.name_list) = tmp;
			}
    break;

  case 132:
#line 594 "ldgram.y"
    {
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = (yyvsp[(1) - (3)].wildcard_list);
			  tmp->spec = (yyvsp[(3) - (3)].wildcard);
			  (yyval.wildcard_list) = tmp;
			}
    break;

  case 133:
#line 603 "ldgram.y"
    {
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = NULL;
			  tmp->spec = (yyvsp[(1) - (1)].wildcard);
			  (yyval.wildcard_list) = tmp;
			}
    break;

  case 134:
#line 614 "ldgram.y"
    {
			  struct wildcard_spec tmp;
			  tmp.name = (yyvsp[(1) - (1)].name);
			  tmp.exclude_name_list = NULL;
			  tmp.sorted = none;
			  tmp.section_flag_list = NULL;
			  lang_add_wild (&tmp, NULL, ldgram_had_keep);
			}
    break;

  case 135:
#line 623 "ldgram.y"
    {
			  struct wildcard_spec tmp;
			  tmp.name = (yyvsp[(2) - (2)].name);
			  tmp.exclude_name_list = NULL;
			  tmp.sorted = none;
			  tmp.section_flag_list = (yyvsp[(1) - (2)].flag_info);
			  lang_add_wild (&tmp, NULL, ldgram_had_keep);
			}
    break;

  case 136:
#line 632 "ldgram.y"
    {
			  lang_add_wild (NULL, (yyvsp[(2) - (3)].wildcard_list), ldgram_had_keep);
			}
    break;

  case 137:
#line 636 "ldgram.y"
    {
			  struct wildcard_spec tmp;
			  tmp.name = NULL;
			  tmp.exclude_name_list = NULL;
			  tmp.sorted = none;
			  tmp.section_flag_list = (yyvsp[(1) - (4)].flag_info);
			  lang_add_wild (&tmp, (yyvsp[(3) - (4)].wildcard_list), ldgram_had_keep);
			}
    break;

  case 138:
#line 645 "ldgram.y"
    {
			  lang_add_wild (&(yyvsp[(1) - (4)].wildcard), (yyvsp[(3) - (4)].wildcard_list), ldgram_had_keep);
			}
    break;

  case 139:
#line 649 "ldgram.y"
    {
			  (yyvsp[(2) - (5)].wildcard).section_flag_list = (yyvsp[(1) - (5)].flag_info);
			  lang_add_wild (&(yyvsp[(2) - (5)].wildcard), (yyvsp[(4) - (5)].wildcard_list), ldgram_had_keep);
			}
    break;

  case 141:
#line 658 "ldgram.y"
    { ldgram_had_keep = TRUE; }
    break;

  case 142:
#line 660 "ldgram.y"
    { ldgram_had_keep = FALSE; }
    break;

  case 144:
#line 666 "ldgram.y"
    {
 		lang_add_attribute(lang_object_symbols_statement_enum);
	      	}
    break;

  case 146:
#line 671 "ldgram.y"
    {

		  lang_add_attribute(lang_constructors_statement_enum);
		}
    break;

  case 147:
#line 676 "ldgram.y"
    {
		  constructors_sorted = TRUE;
		  lang_add_attribute (lang_constructors_statement_enum);
		}
    break;

  case 149:
#line 682 "ldgram.y"
    {
			  lang_add_data ((int) (yyvsp[(1) - (4)].integer), (yyvsp[(3) - (4)].etree));
			}
    break;

  case 150:
#line 687 "ldgram.y"
    {
			  lang_add_fill ((yyvsp[(3) - (4)].fill));
			}
    break;

  case 151:
#line 690 "ldgram.y"
    {ldlex_expression ();}
    break;

  case 152:
#line 691 "ldgram.y"
    { ldlex_popstate ();
			  lang_add_assignment (exp_assert ((yyvsp[(4) - (8)].etree), (yyvsp[(6) - (8)].name))); }
    break;

  case 153:
#line 694 "ldgram.y"
    { ldlex_script (); ldfile_open_command_file((yyvsp[(2) - (2)].name)); }
    break;

  case 154:
#line 696 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 159:
#line 711 "ldgram.y"
    { (yyval.integer) = (yyvsp[(1) - (1)].token); }
    break;

  case 160:
#line 713 "ldgram.y"
    { (yyval.integer) = (yyvsp[(1) - (1)].token); }
    break;

  case 161:
#line 715 "ldgram.y"
    { (yyval.integer) = (yyvsp[(1) - (1)].token); }
    break;

  case 162:
#line 717 "ldgram.y"
    { (yyval.integer) = (yyvsp[(1) - (1)].token); }
    break;

  case 163:
#line 719 "ldgram.y"
    { (yyval.integer) = (yyvsp[(1) - (1)].token); }
    break;

  case 164:
#line 724 "ldgram.y"
    {
		  (yyval.fill) = exp_get_fill ((yyvsp[(1) - (1)].etree), 0, "fill value");
		}
    break;

  case 165:
#line 731 "ldgram.y"
    { (yyval.fill) = (yyvsp[(2) - (2)].fill); }
    break;

  case 166:
#line 732 "ldgram.y"
    { (yyval.fill) = (fill_type *) 0; }
    break;

  case 167:
#line 737 "ldgram.y"
    { (yyval.token) = '+'; }
    break;

  case 168:
#line 739 "ldgram.y"
    { (yyval.token) = '-'; }
    break;

  case 169:
#line 741 "ldgram.y"
    { (yyval.token) = '*'; }
    break;

  case 170:
#line 743 "ldgram.y"
    { (yyval.token) = '/'; }
    break;

  case 171:
#line 745 "ldgram.y"
    { (yyval.token) = LSHIFT; }
    break;

  case 172:
#line 747 "ldgram.y"
    { (yyval.token) = RSHIFT; }
    break;

  case 173:
#line 749 "ldgram.y"
    { (yyval.token) = '&'; }
    break;

  case 174:
#line 751 "ldgram.y"
    { (yyval.token) = '|'; }
    break;

  case 177:
#line 761 "ldgram.y"
    {
		  lang_add_assignment (exp_assign ((yyvsp[(1) - (3)].name), (yyvsp[(3) - (3)].etree), FALSE));
		}
    break;

  case 178:
#line 765 "ldgram.y"
    {
		  lang_add_assignment (exp_assign ((yyvsp[(1) - (3)].name),
						   exp_binop ((yyvsp[(2) - (3)].token),
							      exp_nameop (NAME,
									  (yyvsp[(1) - (3)].name)),
							      (yyvsp[(3) - (3)].etree)), FALSE));
		}
    break;

  case 179:
#line 773 "ldgram.y"
    {
		  lang_add_assignment (exp_assign ((yyvsp[(3) - (6)].name), (yyvsp[(5) - (6)].etree), TRUE));
		}
    break;

  case 180:
#line 777 "ldgram.y"
    {
		  lang_add_assignment (exp_provide ((yyvsp[(3) - (6)].name), (yyvsp[(5) - (6)].etree), FALSE));
		}
    break;

  case 181:
#line 781 "ldgram.y"
    {
		  lang_add_assignment (exp_provide ((yyvsp[(3) - (6)].name), (yyvsp[(5) - (6)].etree), TRUE));
		}
    break;

  case 189:
#line 804 "ldgram.y"
    { region = lang_memory_region_lookup ((yyvsp[(1) - (1)].name), TRUE); }
    break;

  case 190:
#line 807 "ldgram.y"
    {}
    break;

  case 191:
#line 809 "ldgram.y"
    { ldlex_script (); ldfile_open_command_file((yyvsp[(2) - (2)].name)); }
    break;

  case 192:
#line 811 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 193:
#line 816 "ldgram.y"
    {
		  region->origin = exp_get_vma ((yyvsp[(3) - (3)].etree), 0, "origin");
		  region->current = region->origin;
		}
    break;

  case 194:
#line 824 "ldgram.y"
    {
		  region->length = exp_get_vma ((yyvsp[(3) - (3)].etree), -1, "length");
		}
    break;

  case 195:
#line 831 "ldgram.y"
    { /* dummy action to avoid bison 1.25 error message */ }
    break;

  case 199:
#line 842 "ldgram.y"
    { lang_set_flags (region, (yyvsp[(1) - (1)].name), 0); }
    break;

  case 200:
#line 844 "ldgram.y"
    { lang_set_flags (region, (yyvsp[(2) - (2)].name), 1); }
    break;

  case 201:
#line 849 "ldgram.y"
    { lang_startup((yyvsp[(3) - (4)].name)); }
    break;

  case 203:
#line 855 "ldgram.y"
    { ldemul_hll((char *)NULL); }
    break;

  case 204:
#line 860 "ldgram.y"
    { ldemul_hll((yyvsp[(3) - (3)].name)); }
    break;

  case 205:
#line 862 "ldgram.y"
    { ldemul_hll((yyvsp[(1) - (1)].name)); }
    break;

  case 207:
#line 870 "ldgram.y"
    { ldemul_syslib((yyvsp[(3) - (3)].name)); }
    break;

  case 209:
#line 876 "ldgram.y"
    { lang_float(TRUE); }
    break;

  case 210:
#line 878 "ldgram.y"
    { lang_float(FALSE); }
    break;

  case 211:
#line 883 "ldgram.y"
    {
		  (yyval.nocrossref) = NULL;
		}
    break;

  case 212:
#line 887 "ldgram.y"
    {
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = (yyvsp[(1) - (2)].name);
		  n->next = (yyvsp[(2) - (2)].nocrossref);
		  (yyval.nocrossref) = n;
		}
    break;

  case 213:
#line 896 "ldgram.y"
    {
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = (yyvsp[(1) - (3)].name);
		  n->next = (yyvsp[(3) - (3)].nocrossref);
		  (yyval.nocrossref) = n;
		}
    break;

  case 214:
#line 906 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 215:
#line 908 "ldgram.y"
    { ldlex_popstate (); (yyval.etree)=(yyvsp[(2) - (2)].etree);}
    break;

  case 216:
#line 913 "ldgram.y"
    { (yyval.etree) = exp_unop ('-', (yyvsp[(2) - (2)].etree)); }
    break;

  case 217:
#line 915 "ldgram.y"
    { (yyval.etree) = (yyvsp[(2) - (3)].etree); }
    break;

  case 218:
#line 917 "ldgram.y"
    { (yyval.etree) = exp_unop ((int) (yyvsp[(1) - (4)].integer),(yyvsp[(3) - (4)].etree)); }
    break;

  case 219:
#line 919 "ldgram.y"
    { (yyval.etree) = exp_unop ('!', (yyvsp[(2) - (2)].etree)); }
    break;

  case 220:
#line 921 "ldgram.y"
    { (yyval.etree) = (yyvsp[(2) - (2)].etree); }
    break;

  case 221:
#line 923 "ldgram.y"
    { (yyval.etree) = exp_unop ('~', (yyvsp[(2) - (2)].etree));}
    break;

  case 222:
#line 926 "ldgram.y"
    { (yyval.etree) = exp_binop ('*', (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 223:
#line 928 "ldgram.y"
    { (yyval.etree) = exp_binop ('/', (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 224:
#line 930 "ldgram.y"
    { (yyval.etree) = exp_binop ('%', (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 225:
#line 932 "ldgram.y"
    { (yyval.etree) = exp_binop ('+', (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 226:
#line 934 "ldgram.y"
    { (yyval.etree) = exp_binop ('-' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 227:
#line 936 "ldgram.y"
    { (yyval.etree) = exp_binop (LSHIFT , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 228:
#line 938 "ldgram.y"
    { (yyval.etree) = exp_binop (RSHIFT , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 229:
#line 940 "ldgram.y"
    { (yyval.etree) = exp_binop (EQ , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 230:
#line 942 "ldgram.y"
    { (yyval.etree) = exp_binop (NE , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 231:
#line 944 "ldgram.y"
    { (yyval.etree) = exp_binop (LE , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 232:
#line 946 "ldgram.y"
    { (yyval.etree) = exp_binop (GE , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 233:
#line 948 "ldgram.y"
    { (yyval.etree) = exp_binop ('<' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 234:
#line 950 "ldgram.y"
    { (yyval.etree) = exp_binop ('>' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 235:
#line 952 "ldgram.y"
    { (yyval.etree) = exp_binop ('&' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 236:
#line 954 "ldgram.y"
    { (yyval.etree) = exp_binop ('^' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 237:
#line 956 "ldgram.y"
    { (yyval.etree) = exp_binop ('|' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 238:
#line 958 "ldgram.y"
    { (yyval.etree) = exp_trinop ('?' , (yyvsp[(1) - (5)].etree), (yyvsp[(3) - (5)].etree), (yyvsp[(5) - (5)].etree)); }
    break;

  case 239:
#line 960 "ldgram.y"
    { (yyval.etree) = exp_binop (ANDAND , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 240:
#line 962 "ldgram.y"
    { (yyval.etree) = exp_binop (OROR , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 241:
#line 964 "ldgram.y"
    { (yyval.etree) = exp_nameop (DEFINED, (yyvsp[(3) - (4)].name)); }
    break;

  case 242:
#line 966 "ldgram.y"
    { (yyval.etree) = exp_bigintop ((yyvsp[(1) - (1)].bigint).integer, (yyvsp[(1) - (1)].bigint).str); }
    break;

  case 243:
#line 968 "ldgram.y"
    { (yyval.etree) = exp_nameop (SIZEOF_HEADERS,0); }
    break;

  case 244:
#line 971 "ldgram.y"
    { (yyval.etree) = exp_nameop (ALIGNOF,(yyvsp[(3) - (4)].name)); }
    break;

  case 245:
#line 973 "ldgram.y"
    { (yyval.etree) = exp_nameop (SIZEOF,(yyvsp[(3) - (4)].name)); }
    break;

  case 246:
#line 975 "ldgram.y"
    { (yyval.etree) = exp_nameop (ADDR,(yyvsp[(3) - (4)].name)); }
    break;

  case 247:
#line 977 "ldgram.y"
    { (yyval.etree) = exp_nameop (LOADADDR,(yyvsp[(3) - (4)].name)); }
    break;

  case 248:
#line 979 "ldgram.y"
    { (yyval.etree) = exp_nameop (CONSTANT,(yyvsp[(3) - (4)].name)); }
    break;

  case 249:
#line 981 "ldgram.y"
    { (yyval.etree) = exp_unop (ABSOLUTE, (yyvsp[(3) - (4)].etree)); }
    break;

  case 250:
#line 983 "ldgram.y"
    { (yyval.etree) = exp_unop (ALIGN_K,(yyvsp[(3) - (4)].etree)); }
    break;

  case 251:
#line 985 "ldgram.y"
    { (yyval.etree) = exp_binop (ALIGN_K,(yyvsp[(3) - (6)].etree),(yyvsp[(5) - (6)].etree)); }
    break;

  case 252:
#line 987 "ldgram.y"
    { (yyval.etree) = exp_binop (DATA_SEGMENT_ALIGN, (yyvsp[(3) - (6)].etree), (yyvsp[(5) - (6)].etree)); }
    break;

  case 253:
#line 989 "ldgram.y"
    { (yyval.etree) = exp_binop (DATA_SEGMENT_RELRO_END, (yyvsp[(5) - (6)].etree), (yyvsp[(3) - (6)].etree)); }
    break;

  case 254:
#line 991 "ldgram.y"
    { (yyval.etree) = exp_unop (DATA_SEGMENT_END, (yyvsp[(3) - (4)].etree)); }
    break;

  case 255:
#line 993 "ldgram.y"
    { /* The operands to the expression node are
			     placed in the opposite order from the way
			     in which they appear in the script as
			     that allows us to reuse more code in
			     fold_binary.  */
			  (yyval.etree) = exp_binop (SEGMENT_START,
					  (yyvsp[(5) - (6)].etree),
					  exp_nameop (NAME, (yyvsp[(3) - (6)].name))); }
    break;

  case 256:
#line 1002 "ldgram.y"
    { (yyval.etree) = exp_unop (ALIGN_K,(yyvsp[(3) - (4)].etree)); }
    break;

  case 257:
#line 1004 "ldgram.y"
    { (yyval.etree) = exp_nameop (NAME,(yyvsp[(1) - (1)].name)); }
    break;

  case 258:
#line 1006 "ldgram.y"
    { (yyval.etree) = exp_binop (MAX_K, (yyvsp[(3) - (6)].etree), (yyvsp[(5) - (6)].etree) ); }
    break;

  case 259:
#line 1008 "ldgram.y"
    { (yyval.etree) = exp_binop (MIN_K, (yyvsp[(3) - (6)].etree), (yyvsp[(5) - (6)].etree) ); }
    break;

  case 260:
#line 1010 "ldgram.y"
    { (yyval.etree) = exp_assert ((yyvsp[(3) - (6)].etree), (yyvsp[(5) - (6)].name)); }
    break;

  case 261:
#line 1012 "ldgram.y"
    { (yyval.etree) = exp_nameop (ORIGIN, (yyvsp[(3) - (4)].name)); }
    break;

  case 262:
#line 1014 "ldgram.y"
    { (yyval.etree) = exp_nameop (LENGTH, (yyvsp[(3) - (4)].name)); }
    break;

  case 263:
#line 1019 "ldgram.y"
    { (yyval.name) = (yyvsp[(3) - (3)].name); }
    break;

  case 264:
#line 1020 "ldgram.y"
    { (yyval.name) = 0; }
    break;

  case 265:
#line 1024 "ldgram.y"
    { (yyval.etree) = (yyvsp[(3) - (4)].etree); }
    break;

  case 266:
#line 1025 "ldgram.y"
    { (yyval.etree) = 0; }
    break;

  case 267:
#line 1029 "ldgram.y"
    { (yyval.etree) = (yyvsp[(3) - (4)].etree); }
    break;

  case 268:
#line 1030 "ldgram.y"
    { (yyval.etree) = 0; }
    break;

  case 269:
#line 1034 "ldgram.y"
    { (yyval.etree) = (yyvsp[(3) - (4)].etree); }
    break;

  case 270:
#line 1035 "ldgram.y"
    { (yyval.etree) = 0; }
    break;

  case 271:
#line 1039 "ldgram.y"
    { (yyval.token) = ONLY_IF_RO; }
    break;

  case 272:
#line 1040 "ldgram.y"
    { (yyval.token) = ONLY_IF_RW; }
    break;

  case 273:
#line 1041 "ldgram.y"
    { (yyval.token) = SPECIAL; }
    break;

  case 274:
#line 1042 "ldgram.y"
    { (yyval.token) = 0; }
    break;

  case 275:
#line 1045 "ldgram.y"
    { ldlex_expression(); }
    break;

  case 276:
#line 1049 "ldgram.y"
    { ldlex_popstate (); ldlex_script (); }
    break;

  case 277:
#line 1052 "ldgram.y"
    {
			  lang_enter_output_section_statement((yyvsp[(1) - (9)].name), (yyvsp[(3) - (9)].etree),
							      sectype,
							      (yyvsp[(5) - (9)].etree), (yyvsp[(6) - (9)].etree), (yyvsp[(4) - (9)].etree), (yyvsp[(8) - (9)].token));
			}
    break;

  case 278:
#line 1058 "ldgram.y"
    { ldlex_popstate (); ldlex_expression (); }
    break;

  case 279:
#line 1060 "ldgram.y"
    {
		  ldlex_popstate ();
		  lang_leave_output_section_statement ((yyvsp[(17) - (17)].fill), (yyvsp[(14) - (17)].name), (yyvsp[(16) - (17)].section_phdr), (yyvsp[(15) - (17)].name));
		}
    break;

  case 280:
#line 1065 "ldgram.y"
    {}
    break;

  case 281:
#line 1067 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 282:
#line 1069 "ldgram.y"
    { ldlex_popstate (); ldlex_script (); }
    break;

  case 283:
#line 1071 "ldgram.y"
    {
			  lang_enter_overlay ((yyvsp[(3) - (8)].etree), (yyvsp[(6) - (8)].etree));
			}
    break;

  case 284:
#line 1076 "ldgram.y"
    { ldlex_popstate (); ldlex_expression (); }
    break;

  case 285:
#line 1078 "ldgram.y"
    {
			  ldlex_popstate ();
			  lang_leave_overlay ((yyvsp[(5) - (16)].etree), (int) (yyvsp[(4) - (16)].integer),
					      (yyvsp[(16) - (16)].fill), (yyvsp[(13) - (16)].name), (yyvsp[(15) - (16)].section_phdr), (yyvsp[(14) - (16)].name));
			}
    break;

  case 287:
#line 1088 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 288:
#line 1090 "ldgram.y"
    {
		  ldlex_popstate ();
		  lang_add_assignment (exp_assign (".", (yyvsp[(3) - (3)].etree), FALSE));
		}
    break;

  case 290:
#line 1096 "ldgram.y"
    { ldlex_script (); ldfile_open_command_file((yyvsp[(2) - (2)].name)); }
    break;

  case 291:
#line 1098 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 292:
#line 1102 "ldgram.y"
    { sectype = noload_section; }
    break;

  case 293:
#line 1103 "ldgram.y"
    { sectype = noalloc_section; }
    break;

  case 294:
#line 1104 "ldgram.y"
    { sectype = noalloc_section; }
    break;

  case 295:
#line 1105 "ldgram.y"
    { sectype = noalloc_section; }
    break;

  case 296:
#line 1106 "ldgram.y"
    { sectype = noalloc_section; }
    break;

  case 298:
#line 1111 "ldgram.y"
    { sectype = normal_section; }
    break;

  case 299:
#line 1112 "ldgram.y"
    { sectype = normal_section; }
    break;

  case 300:
#line 1116 "ldgram.y"
    { (yyval.etree) = (yyvsp[(1) - (3)].etree); }
    break;

  case 301:
#line 1117 "ldgram.y"
    { (yyval.etree) = (etree_type *)NULL;  }
    break;

  case 302:
#line 1122 "ldgram.y"
    { (yyval.etree) = (yyvsp[(3) - (6)].etree); }
    break;

  case 303:
#line 1124 "ldgram.y"
    { (yyval.etree) = (yyvsp[(3) - (10)].etree); }
    break;

  case 304:
#line 1128 "ldgram.y"
    { (yyval.etree) = (yyvsp[(1) - (2)].etree); }
    break;

  case 305:
#line 1129 "ldgram.y"
    { (yyval.etree) = (etree_type *) NULL;  }
    break;

  case 306:
#line 1134 "ldgram.y"
    { (yyval.integer) = 0; }
    break;

  case 307:
#line 1136 "ldgram.y"
    { (yyval.integer) = 1; }
    break;

  case 308:
#line 1141 "ldgram.y"
    { (yyval.name) = (yyvsp[(2) - (2)].name); }
    break;

  case 309:
#line 1142 "ldgram.y"
    { (yyval.name) = DEFAULT_MEMORY_REGION; }
    break;

  case 310:
#line 1147 "ldgram.y"
    {
		  (yyval.section_phdr) = NULL;
		}
    break;

  case 311:
#line 1151 "ldgram.y"
    {
		  struct lang_output_section_phdr_list *n;

		  n = ((struct lang_output_section_phdr_list *)
		       xmalloc (sizeof *n));
		  n->name = (yyvsp[(3) - (3)].name);
		  n->used = FALSE;
		  n->next = (yyvsp[(1) - (3)].section_phdr);
		  (yyval.section_phdr) = n;
		}
    break;

  case 313:
#line 1167 "ldgram.y"
    {
			  ldlex_script ();
			  lang_enter_overlay_section ((yyvsp[(2) - (2)].name));
			}
    break;

  case 314:
#line 1172 "ldgram.y"
    { ldlex_popstate (); ldlex_expression (); }
    break;

  case 315:
#line 1174 "ldgram.y"
    {
			  ldlex_popstate ();
			  lang_leave_overlay_section ((yyvsp[(9) - (9)].fill), (yyvsp[(8) - (9)].section_phdr));
			}
    break;

  case 320:
#line 1191 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 321:
#line 1192 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 322:
#line 1194 "ldgram.y"
    {
		  lang_new_phdr ((yyvsp[(1) - (6)].name), (yyvsp[(3) - (6)].etree), (yyvsp[(4) - (6)].phdr).filehdr, (yyvsp[(4) - (6)].phdr).phdrs, (yyvsp[(4) - (6)].phdr).at,
				 (yyvsp[(4) - (6)].phdr).flags);
		}
    break;

  case 323:
#line 1202 "ldgram.y"
    {
		  (yyval.etree) = (yyvsp[(1) - (1)].etree);

		  if ((yyvsp[(1) - (1)].etree)->type.node_class == etree_name
		      && (yyvsp[(1) - (1)].etree)->type.node_code == NAME)
		    {
		      const char *s;
		      unsigned int i;
		      static const char * const phdr_types[] =
			{
			  "PT_NULL", "PT_LOAD", "PT_DYNAMIC",
			  "PT_INTERP", "PT_NOTE", "PT_SHLIB",
			  "PT_PHDR", "PT_TLS"
			};

		      s = (yyvsp[(1) - (1)].etree)->name.name;
		      for (i = 0;
			   i < sizeof phdr_types / sizeof phdr_types[0];
			   i++)
			if (strcmp (s, phdr_types[i]) == 0)
			  {
			    (yyval.etree) = exp_intop (i);
			    break;
			  }
		      if (i == sizeof phdr_types / sizeof phdr_types[0])
			{
			  if (strcmp (s, "PT_GNU_EH_FRAME") == 0)
			    (yyval.etree) = exp_intop (0x6474e550);
			  else if (strcmp (s, "PT_GNU_STACK") == 0)
			    (yyval.etree) = exp_intop (0x6474e551);
			  else
			    {
			      einfo (_("\
%X%P:%S: unknown phdr type `%s' (try integer literal)\n"),
				     NULL, s);
			      (yyval.etree) = exp_intop (0);
			    }
			}
		    }
		}
    break;

  case 324:
#line 1246 "ldgram.y"
    {
		  memset (&(yyval.phdr), 0, sizeof (struct phdr_info));
		}
    break;

  case 325:
#line 1250 "ldgram.y"
    {
		  (yyval.phdr) = (yyvsp[(3) - (3)].phdr);
		  if (strcmp ((yyvsp[(1) - (3)].name), "FILEHDR") == 0 && (yyvsp[(2) - (3)].etree) == NULL)
		    (yyval.phdr).filehdr = TRUE;
		  else if (strcmp ((yyvsp[(1) - (3)].name), "PHDRS") == 0 && (yyvsp[(2) - (3)].etree) == NULL)
		    (yyval.phdr).phdrs = TRUE;
		  else if (strcmp ((yyvsp[(1) - (3)].name), "FLAGS") == 0 && (yyvsp[(2) - (3)].etree) != NULL)
		    (yyval.phdr).flags = (yyvsp[(2) - (3)].etree);
		  else
		    einfo (_("%X%P:%S: PHDRS syntax error at `%s'\n"),
			   NULL, (yyvsp[(1) - (3)].name));
		}
    break;

  case 326:
#line 1263 "ldgram.y"
    {
		  (yyval.phdr) = (yyvsp[(5) - (5)].phdr);
		  (yyval.phdr).at = (yyvsp[(3) - (5)].etree);
		}
    break;

  case 327:
#line 1271 "ldgram.y"
    {
		  (yyval.etree) = NULL;
		}
    break;

  case 328:
#line 1275 "ldgram.y"
    {
		  (yyval.etree) = (yyvsp[(2) - (3)].etree);
		}
    break;

  case 329:
#line 1281 "ldgram.y"
    {
		  ldlex_version_file ();
		  PUSH_ERROR (_("dynamic list"));
		}
    break;

  case 330:
#line 1286 "ldgram.y"
    {
		  ldlex_popstate ();
		  POP_ERROR ();
		}
    break;

  case 334:
#line 1303 "ldgram.y"
    {
		  lang_append_dynamic_list ((yyvsp[(1) - (2)].versyms));
		}
    break;

  case 335:
#line 1311 "ldgram.y"
    {
		  ldlex_version_file ();
		  PUSH_ERROR (_("VERSION script"));
		}
    break;

  case 336:
#line 1316 "ldgram.y"
    {
		  ldlex_popstate ();
		  POP_ERROR ();
		}
    break;

  case 337:
#line 1325 "ldgram.y"
    {
		  ldlex_version_script ();
		}
    break;

  case 338:
#line 1329 "ldgram.y"
    {
		  ldlex_popstate ();
		}
    break;

  case 341:
#line 1341 "ldgram.y"
    {
		  lang_register_vers_node (NULL, (yyvsp[(2) - (4)].versnode), NULL);
		}
    break;

  case 342:
#line 1345 "ldgram.y"
    {
		  lang_register_vers_node ((yyvsp[(1) - (5)].name), (yyvsp[(3) - (5)].versnode), NULL);
		}
    break;

  case 343:
#line 1349 "ldgram.y"
    {
		  lang_register_vers_node ((yyvsp[(1) - (6)].name), (yyvsp[(3) - (6)].versnode), (yyvsp[(5) - (6)].deflist));
		}
    break;

  case 344:
#line 1356 "ldgram.y"
    {
		  (yyval.deflist) = lang_add_vers_depend (NULL, (yyvsp[(1) - (1)].name));
		}
    break;

  case 345:
#line 1360 "ldgram.y"
    {
		  (yyval.deflist) = lang_add_vers_depend ((yyvsp[(1) - (2)].deflist), (yyvsp[(2) - (2)].name));
		}
    break;

  case 346:
#line 1367 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node (NULL, NULL);
		}
    break;

  case 347:
#line 1371 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node ((yyvsp[(1) - (2)].versyms), NULL);
		}
    break;

  case 348:
#line 1375 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node ((yyvsp[(3) - (4)].versyms), NULL);
		}
    break;

  case 349:
#line 1379 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node (NULL, (yyvsp[(3) - (4)].versyms));
		}
    break;

  case 350:
#line 1383 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node ((yyvsp[(3) - (8)].versyms), (yyvsp[(7) - (8)].versyms));
		}
    break;

  case 351:
#line 1390 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, (yyvsp[(1) - (1)].name), ldgram_vers_current_lang, FALSE);
		}
    break;

  case 352:
#line 1394 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, (yyvsp[(1) - (1)].name), ldgram_vers_current_lang, TRUE);
		}
    break;

  case 353:
#line 1398 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[(1) - (3)].versyms), (yyvsp[(3) - (3)].name), ldgram_vers_current_lang, FALSE);
		}
    break;

  case 354:
#line 1402 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[(1) - (3)].versyms), (yyvsp[(3) - (3)].name), ldgram_vers_current_lang, TRUE);
		}
    break;

  case 355:
#line 1406 "ldgram.y"
    {
			  (yyval.name) = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = (yyvsp[(4) - (5)].name);
			}
    break;

  case 356:
#line 1411 "ldgram.y"
    {
			  struct bfd_elf_version_expr *pat;
			  for (pat = (yyvsp[(7) - (9)].versyms); pat->next != NULL; pat = pat->next);
			  pat->next = (yyvsp[(1) - (9)].versyms);
			  (yyval.versyms) = (yyvsp[(7) - (9)].versyms);
			  ldgram_vers_current_lang = (yyvsp[(6) - (9)].name);
			}
    break;

  case 357:
#line 1419 "ldgram.y"
    {
			  (yyval.name) = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = (yyvsp[(2) - (3)].name);
			}
    break;

  case 358:
#line 1424 "ldgram.y"
    {
			  (yyval.versyms) = (yyvsp[(5) - (7)].versyms);
			  ldgram_vers_current_lang = (yyvsp[(4) - (7)].name);
			}
    break;

  case 359:
#line 1429 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, "global", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 360:
#line 1433 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[(1) - (3)].versyms), "global", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 361:
#line 1437 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, "local", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 362:
#line 1441 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[(1) - (3)].versyms), "local", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 363:
#line 1445 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, "extern", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 364:
#line 1449 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[(1) - (3)].versyms), "extern", ldgram_vers_current_lang, FALSE);
		}
    break;


/* Line 1267 of yacc.c.  */
#line 4445 "ldgram.c"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


#line 1459 "ldgram.y"

void
yyerror(arg)
     const char *arg;
{
  if (ldfile_assumed_script)
    einfo (_("%P:%s: file format not recognized; treating as linker script\n"),
	   ldlex_filename ());
  if (error_index > 0 && error_index < ERROR_NAME_MAX)
    einfo ("%P%F:%S: %s in %s\n", NULL, arg, error_names[error_index - 1]);
  else
    einfo ("%P%F:%S: %s\n", NULL, arg);
}

@


1.1.22.1
log
@bfd/
2009-10-16  Tristan Gingold  <gingold@@adacore.com>

	* configure.in: Bump version to 2.20
	* Makefile.am (RELEASE): Set.
	* configure, Makefile.in: Regenerate.
@
text
@a0 4495
/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     INT = 258,
     NAME = 259,
     LNAME = 260,
     OREQ = 261,
     ANDEQ = 262,
     RSHIFTEQ = 263,
     LSHIFTEQ = 264,
     DIVEQ = 265,
     MULTEQ = 266,
     MINUSEQ = 267,
     PLUSEQ = 268,
     OROR = 269,
     ANDAND = 270,
     NE = 271,
     EQ = 272,
     GE = 273,
     LE = 274,
     RSHIFT = 275,
     LSHIFT = 276,
     UNARY = 277,
     END = 278,
     ALIGN_K = 279,
     BLOCK = 280,
     BIND = 281,
     QUAD = 282,
     SQUAD = 283,
     LONG = 284,
     SHORT = 285,
     BYTE = 286,
     SECTIONS = 287,
     PHDRS = 288,
     INSERT_K = 289,
     AFTER = 290,
     BEFORE = 291,
     DATA_SEGMENT_ALIGN = 292,
     DATA_SEGMENT_RELRO_END = 293,
     DATA_SEGMENT_END = 294,
     SORT_BY_NAME = 295,
     SORT_BY_ALIGNMENT = 296,
     SIZEOF_HEADERS = 297,
     OUTPUT_FORMAT = 298,
     FORCE_COMMON_ALLOCATION = 299,
     OUTPUT_ARCH = 300,
     INHIBIT_COMMON_ALLOCATION = 301,
     SEGMENT_START = 302,
     INCLUDE = 303,
     MEMORY = 304,
     REGION_ALIAS = 305,
     NOLOAD = 306,
     DSECT = 307,
     COPY = 308,
     INFO = 309,
     OVERLAY = 310,
     DEFINED = 311,
     TARGET_K = 312,
     SEARCH_DIR = 313,
     MAP = 314,
     ENTRY = 315,
     NEXT = 316,
     SIZEOF = 317,
     ALIGNOF = 318,
     ADDR = 319,
     LOADADDR = 320,
     MAX_K = 321,
     MIN_K = 322,
     STARTUP = 323,
     HLL = 324,
     SYSLIB = 325,
     FLOAT = 326,
     NOFLOAT = 327,
     NOCROSSREFS = 328,
     ORIGIN = 329,
     FILL = 330,
     LENGTH = 331,
     CREATE_OBJECT_SYMBOLS = 332,
     INPUT = 333,
     GROUP = 334,
     OUTPUT = 335,
     CONSTRUCTORS = 336,
     ALIGNMOD = 337,
     AT = 338,
     SUBALIGN = 339,
     PROVIDE = 340,
     PROVIDE_HIDDEN = 341,
     AS_NEEDED = 342,
     CHIP = 343,
     LIST = 344,
     SECT = 345,
     ABSOLUTE = 346,
     LOAD = 347,
     NEWLINE = 348,
     ENDWORD = 349,
     ORDER = 350,
     NAMEWORD = 351,
     ASSERT_K = 352,
     FORMAT = 353,
     PUBLIC = 354,
     DEFSYMEND = 355,
     BASE = 356,
     ALIAS = 357,
     TRUNCATE = 358,
     REL = 359,
     INPUT_SCRIPT = 360,
     INPUT_MRI_SCRIPT = 361,
     INPUT_DEFSYM = 362,
     CASE = 363,
     EXTERN = 364,
     START = 365,
     VERS_TAG = 366,
     VERS_IDENTIFIER = 367,
     GLOBAL = 368,
     LOCAL = 369,
     VERSIONK = 370,
     INPUT_VERSION_SCRIPT = 371,
     KEEP = 372,
     ONLY_IF_RO = 373,
     ONLY_IF_RW = 374,
     SPECIAL = 375,
     EXCLUDE_FILE = 376,
     CONSTANT = 377,
     INPUT_DYNAMIC_LIST = 378
   };
#endif
/* Tokens.  */
#define INT 258
#define NAME 259
#define LNAME 260
#define OREQ 261
#define ANDEQ 262
#define RSHIFTEQ 263
#define LSHIFTEQ 264
#define DIVEQ 265
#define MULTEQ 266
#define MINUSEQ 267
#define PLUSEQ 268
#define OROR 269
#define ANDAND 270
#define NE 271
#define EQ 272
#define GE 273
#define LE 274
#define RSHIFT 275
#define LSHIFT 276
#define UNARY 277
#define END 278
#define ALIGN_K 279
#define BLOCK 280
#define BIND 281
#define QUAD 282
#define SQUAD 283
#define LONG 284
#define SHORT 285
#define BYTE 286
#define SECTIONS 287
#define PHDRS 288
#define INSERT_K 289
#define AFTER 290
#define BEFORE 291
#define DATA_SEGMENT_ALIGN 292
#define DATA_SEGMENT_RELRO_END 293
#define DATA_SEGMENT_END 294
#define SORT_BY_NAME 295
#define SORT_BY_ALIGNMENT 296
#define SIZEOF_HEADERS 297
#define OUTPUT_FORMAT 298
#define FORCE_COMMON_ALLOCATION 299
#define OUTPUT_ARCH 300
#define INHIBIT_COMMON_ALLOCATION 301
#define SEGMENT_START 302
#define INCLUDE 303
#define MEMORY 304
#define REGION_ALIAS 305
#define NOLOAD 306
#define DSECT 307
#define COPY 308
#define INFO 309
#define OVERLAY 310
#define DEFINED 311
#define TARGET_K 312
#define SEARCH_DIR 313
#define MAP 314
#define ENTRY 315
#define NEXT 316
#define SIZEOF 317
#define ALIGNOF 318
#define ADDR 319
#define LOADADDR 320
#define MAX_K 321
#define MIN_K 322
#define STARTUP 323
#define HLL 324
#define SYSLIB 325
#define FLOAT 326
#define NOFLOAT 327
#define NOCROSSREFS 328
#define ORIGIN 329
#define FILL 330
#define LENGTH 331
#define CREATE_OBJECT_SYMBOLS 332
#define INPUT 333
#define GROUP 334
#define OUTPUT 335
#define CONSTRUCTORS 336
#define ALIGNMOD 337
#define AT 338
#define SUBALIGN 339
#define PROVIDE 340
#define PROVIDE_HIDDEN 341
#define AS_NEEDED 342
#define CHIP 343
#define LIST 344
#define SECT 345
#define ABSOLUTE 346
#define LOAD 347
#define NEWLINE 348
#define ENDWORD 349
#define ORDER 350
#define NAMEWORD 351
#define ASSERT_K 352
#define FORMAT 353
#define PUBLIC 354
#define DEFSYMEND 355
#define BASE 356
#define ALIAS 357
#define TRUNCATE 358
#define REL 359
#define INPUT_SCRIPT 360
#define INPUT_MRI_SCRIPT 361
#define INPUT_DEFSYM 362
#define CASE 363
#define EXTERN 364
#define START 365
#define VERS_TAG 366
#define VERS_IDENTIFIER 367
#define GLOBAL 368
#define LOCAL 369
#define VERSIONK 370
#define INPUT_VERSION_SCRIPT 371
#define KEEP 372
#define ONLY_IF_RO 373
#define ONLY_IF_RW 374
#define SPECIAL 375
#define EXCLUDE_FILE 376
#define CONSTANT 377
#define INPUT_DYNAMIC_LIST 378




/* Copy the first part of user declarations.  */
#line 24 "ldgram.y"

/*

 */

#define DONTDECLARE_MALLOC

#include "sysdep.h"
#include "bfd.h"
#include "bfdlink.h"
#include "ld.h"
#include "ldexp.h"
#include "ldver.h"
#include "ldlang.h"
#include "ldfile.h"
#include "ldemul.h"
#include "ldmisc.h"
#include "ldmain.h"
#include "mri.h"
#include "ldctor.h"
#include "ldlex.h"

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

static enum section_type sectype;
static lang_memory_region_type *region;

bfd_boolean ldgram_had_keep = FALSE;
char *ldgram_vers_current_lang = NULL;

#define ERROR_NAME_MAX 20
static char *error_names[ERROR_NAME_MAX];
static int error_index;
#define PUSH_ERROR(x) if (error_index < ERROR_NAME_MAX) error_names[error_index] = x; error_index++;
#define POP_ERROR()   error_index--;


/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 62 "ldgram.y"
{
  bfd_vma integer;
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      bfd_boolean filehdr;
      bfd_boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
}
/* Line 193 of yacc.c.  */
#line 410 "ldgram.c"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 216 of yacc.c.  */
#line 423 "ldgram.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  17
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1838

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  147
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  126
/* YYNRULES -- Number of rules.  */
#define YYNRULES  356
/* YYNRULES -- Number of states.  */
#define YYNSTATES  763

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   378

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   145,     2,     2,     2,    34,    21,     2,
      37,   142,    32,    30,   140,    31,     2,    33,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    16,   141,
      24,     6,    25,    15,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   143,     2,   144,    20,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    56,    19,    57,   146,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     7,     8,     9,    10,    11,    12,    13,    14,    17,
      18,    22,    23,    26,    27,    28,    29,    35,    36,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    15,    18,    20,    21,
      26,    27,    30,    34,    35,    38,    43,    45,    47,    50,
      52,    57,    62,    66,    69,    74,    78,    83,    88,    93,
      98,   103,   106,   109,   112,   117,   122,   125,   128,   131,
     134,   135,   141,   144,   145,   149,   152,   153,   155,   159,
     161,   165,   166,   168,   172,   173,   176,   178,   181,   185,
     186,   189,   192,   193,   195,   197,   199,   201,   203,   205,
     207,   209,   211,   213,   218,   223,   228,   233,   242,   247,
     249,   251,   256,   257,   263,   268,   269,   275,   280,   285,
     289,   293,   300,   302,   306,   309,   311,   315,   318,   319,
     325,   326,   334,   335,   342,   347,   350,   353,   354,   359,
     362,   363,   371,   373,   375,   377,   379,   385,   390,   395,
     403,   411,   419,   427,   436,   439,   441,   445,   447,   449,
     453,   458,   460,   461,   467,   470,   472,   474,   476,   481,
     483,   488,   493,   494,   503,   504,   510,   513,   515,   516,
     518,   520,   522,   524,   526,   528,   530,   533,   534,   536,
     538,   540,   542,   544,   546,   548,   550,   552,   554,   558,
     562,   569,   576,   578,   579,   584,   586,   587,   591,   593,
     594,   602,   603,   609,   613,   617,   618,   622,   624,   627,
     629,   632,   637,   642,   646,   650,   652,   657,   661,   662,
     664,   666,   667,   670,   674,   675,   678,   681,   685,   690,
     693,   696,   699,   703,   707,   711,   715,   719,   723,   727,
     731,   735,   739,   743,   747,   751,   755,   759,   763,   769,
     773,   777,   782,   784,   786,   791,   796,   801,   806,   811,
     816,   821,   828,   835,   842,   847,   854,   859,   861,   868,
     875,   882,   887,   892,   896,   897,   902,   903,   908,   909,
     914,   915,   917,   919,   921,   922,   923,   924,   925,   926,
     927,   947,   948,   949,   950,   951,   952,   971,   972,   973,
     981,   982,   988,   990,   992,   994,   996,   998,  1002,  1003,
    1006,  1010,  1013,  1020,  1031,  1034,  1036,  1037,  1039,  1042,
    1043,  1044,  1048,  1049,  1050,  1051,  1052,  1064,  1069,  1070,
    1073,  1074,  1075,  1082,  1084,  1085,  1089,  1095,  1096,  1100,
    1101,  1104,  1106,  1109,  1114,  1117,  1118,  1121,  1122,  1128,
    1130,  1133,  1138,  1144,  1151,  1153,  1156,  1157,  1160,  1165,
    1170,  1179,  1181,  1183,  1187,  1191,  1192,  1202,  1203,  1211,
    1213,  1217,  1219,  1223,  1225,  1229,  1230
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     148,     0,    -1,   121,   164,    -1,   122,   152,    -1,   132,
     261,    -1,   139,   256,    -1,   123,   150,    -1,     4,    -1,
      -1,   151,     4,     6,   217,    -1,    -1,   153,   154,    -1,
     154,   155,   109,    -1,    -1,   104,   217,    -1,   104,   217,
     140,   217,    -1,     4,    -1,   105,    -1,   111,   157,    -1,
     110,    -1,   115,     4,     6,   217,    -1,   115,     4,   140,
     217,    -1,   115,     4,   217,    -1,   114,     4,    -1,   106,
       4,   140,   217,    -1,   106,     4,   217,    -1,   106,     4,
       6,   217,    -1,    38,     4,     6,   217,    -1,    38,     4,
     140,   217,    -1,    98,     4,     6,   217,    -1,    98,     4,
     140,   217,    -1,   107,   159,    -1,   108,   158,    -1,   112,
       4,    -1,   118,     4,   140,     4,    -1,   118,     4,   140,
       3,    -1,   117,   217,    -1,   119,     3,    -1,   124,   160,
      -1,   125,   161,    -1,    -1,    64,   149,   156,   154,    36,
      -1,   126,     4,    -1,    -1,   157,   140,     4,    -1,   157,
       4,    -1,    -1,     4,    -1,   158,   140,     4,    -1,     4,
      -1,   159,   140,     4,    -1,    -1,     4,    -1,   160,   140,
       4,    -1,    -1,   162,   163,    -1,     4,    -1,   163,     4,
      -1,   163,   140,     4,    -1,    -1,   165,   166,    -1,   166,
     167,    -1,    -1,   197,    -1,   174,    -1,   248,    -1,   208,
      -1,   209,    -1,   211,    -1,   213,    -1,   176,    -1,   263,
      -1,   141,    -1,    73,    37,     4,   142,    -1,    74,    37,
     149,   142,    -1,    96,    37,   149,   142,    -1,    59,    37,
       4,   142,    -1,    59,    37,     4,   140,     4,   140,     4,
     142,    -1,    61,    37,     4,   142,    -1,    60,    -1,    62,
      -1,    94,    37,   170,   142,    -1,    -1,    95,   168,    37,
     170,   142,    -1,    75,    37,   149,   142,    -1,    -1,    64,
     149,   169,   166,    36,    -1,    89,    37,   214,   142,    -1,
     125,    37,   161,   142,    -1,    48,    49,     4,    -1,    48,
      50,     4,    -1,    66,    37,     4,   140,     4,   142,    -1,
       4,    -1,   170,   140,     4,    -1,   170,     4,    -1,     5,
      -1,   170,   140,     5,    -1,   170,     5,    -1,    -1,   103,
      37,   171,   170,   142,    -1,    -1,   170,   140,   103,    37,
     172,   170,   142,    -1,    -1,   170,   103,    37,   173,   170,
     142,    -1,    46,    56,   175,    57,    -1,   175,   223,    -1,
     175,   176,    -1,    -1,    76,    37,     4,   142,    -1,   195,
     194,    -1,    -1,   113,   177,    37,   217,   140,     4,   142,
      -1,     4,    -1,    32,    -1,    15,    -1,   178,    -1,   137,
      37,   180,   142,   178,    -1,    54,    37,   178,   142,    -1,
      55,    37,   178,   142,    -1,    54,    37,    55,    37,   178,
     142,   142,    -1,    54,    37,    54,    37,   178,   142,   142,
      -1,    55,    37,    54,    37,   178,   142,   142,    -1,    55,
      37,    55,    37,   178,   142,   142,    -1,    54,    37,   137,
      37,   180,   142,   178,   142,    -1,   180,   178,    -1,   178,
      -1,   181,   196,   179,    -1,   179,    -1,     4,    -1,   143,
     181,   144,    -1,   179,    37,   181,   142,    -1,   182,    -1,
      -1,   133,    37,   184,   182,   142,    -1,   195,   194,    -1,
      93,    -1,   141,    -1,    97,    -1,    54,    37,    97,   142,
      -1,   183,    -1,   190,    37,   215,   142,    -1,    91,    37,
     191,   142,    -1,    -1,   113,   186,    37,   217,   140,     4,
     142,   194,    -1,    -1,    64,   149,   187,   189,    36,    -1,
     188,   185,    -1,   185,    -1,    -1,   188,    -1,    41,    -1,
      42,    -1,    43,    -1,    44,    -1,    45,    -1,   215,    -1,
       6,   191,    -1,    -1,    14,    -1,    13,    -1,    12,    -1,
      11,    -1,    10,    -1,     9,    -1,     8,    -1,     7,    -1,
     141,    -1,   140,    -1,     4,     6,   215,    -1,     4,   193,
     215,    -1,   101,    37,     4,     6,   215,   142,    -1,   102,
      37,     4,     6,   215,   142,    -1,   140,    -1,    -1,    65,
      56,   198,    57,    -1,   199,    -1,    -1,   199,   196,   200,
      -1,   200,    -1,    -1,     4,   201,   205,    16,   203,   196,
     204,    -1,    -1,    64,   149,   202,   198,    36,    -1,    90,
       6,   215,    -1,    92,     6,   215,    -1,    -1,    37,   206,
     142,    -1,   207,    -1,   206,   207,    -1,     4,    -1,   145,
       4,    -1,    84,    37,   149,   142,    -1,    85,    37,   210,
     142,    -1,    85,    37,   142,    -1,   210,   196,   149,    -1,
     149,    -1,    86,    37,   212,   142,    -1,   212,   196,   149,
      -1,    -1,    87,    -1,    88,    -1,    -1,     4,   214,    -1,
       4,   140,   214,    -1,    -1,   216,   217,    -1,    31,   217,
      -1,    37,   217,   142,    -1,    77,    37,   217,   142,    -1,
     145,   217,    -1,    30,   217,    -1,   146,   217,    -1,   217,
      32,   217,    -1,   217,    33,   217,    -1,   217,    34,   217,
      -1,   217,    30,   217,    -1,   217,    31,   217,    -1,   217,
      29,   217,    -1,   217,    28,   217,    -1,   217,    23,   217,
      -1,   217,    22,   217,    -1,   217,    27,   217,    -1,   217,
      26,   217,    -1,   217,    24,   217,    -1,   217,    25,   217,
      -1,   217,    21,   217,    -1,   217,    20,   217,    -1,   217,
      19,   217,    -1,   217,    15,   217,    16,   217,    -1,   217,
      18,   217,    -1,   217,    17,   217,    -1,    72,    37,     4,
     142,    -1,     3,    -1,    58,    -1,    79,    37,     4,   142,
      -1,    78,    37,     4,   142,    -1,    80,    37,     4,   142,
      -1,    81,    37,     4,   142,    -1,   138,    37,     4,   142,
      -1,   107,    37,   217,   142,    -1,    38,    37,   217,   142,
      -1,    38,    37,   217,   140,   217,   142,    -1,    51,    37,
     217,   140,   217,   142,    -1,    52,    37,   217,   140,   217,
     142,    -1,    53,    37,   217,   142,    -1,    63,    37,     4,
     140,   217,   142,    -1,    39,    37,   217,   142,    -1,     4,
      -1,    82,    37,   217,   140,   217,   142,    -1,    83,    37,
     217,   140,   217,   142,    -1,   113,    37,   217,   140,     4,
     142,    -1,    90,    37,     4,   142,    -1,    92,    37,     4,
     142,    -1,    99,    25,     4,    -1,    -1,    99,    37,   217,
     142,    -1,    -1,    38,    37,   217,   142,    -1,    -1,   100,
      37,   217,   142,    -1,    -1,   134,    -1,   135,    -1,   136,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,   224,   239,
     219,   220,   221,   225,   222,    56,   226,   189,    57,   227,
     242,   218,   243,   192,   228,   196,    -1,    -1,    -1,    -1,
      -1,    -1,    71,   229,   240,   241,   219,   221,   230,    56,
     231,   244,    57,   232,   242,   218,   243,   192,   233,   196,
      -1,    -1,    -1,    95,   234,   239,   235,    56,   175,    57,
      -1,    -1,    64,   149,   236,   175,    36,    -1,    67,    -1,
      68,    -1,    69,    -1,    70,    -1,    71,    -1,    37,   237,
     142,    -1,    -1,    37,   142,    -1,   217,   238,    16,    -1,
     238,    16,    -1,    40,    37,   217,   142,   238,    16,    -1,
      40,    37,   217,   142,    39,    37,   217,   142,   238,    16,
      -1,   217,    16,    -1,    16,    -1,    -1,    89,    -1,    25,
       4,    -1,    -1,    -1,   243,    16,     4,    -1,    -1,    -1,
      -1,    -1,   244,     4,   245,    56,   189,    57,   246,   243,
     192,   247,   196,    -1,    47,    56,   249,    57,    -1,    -1,
     249,   250,    -1,    -1,    -1,     4,   251,   253,   254,   252,
     141,    -1,   217,    -1,    -1,     4,   255,   254,    -1,    99,
      37,   217,   142,   254,    -1,    -1,    37,   217,   142,    -1,
      -1,   257,   258,    -1,   259,    -1,   258,   259,    -1,    56,
     260,    57,   141,    -1,   269,   141,    -1,    -1,   262,   265,
      -1,    -1,   264,   131,    56,   265,    57,    -1,   266,    -1,
     265,   266,    -1,    56,   268,    57,   141,    -1,   127,    56,
     268,    57,   141,    -1,   127,    56,   268,    57,   267,   141,
      -1,   127,    -1,   267,   127,    -1,    -1,   269,   141,    -1,
     129,    16,   269,   141,    -1,   130,    16,   269,   141,    -1,
     129,    16,   269,   141,   130,    16,   269,   141,    -1,   128,
      -1,     4,    -1,   269,   141,   128,    -1,   269,   141,     4,
      -1,    -1,   269,   141,   125,     4,    56,   270,   269,   272,
      57,    -1,    -1,   125,     4,    56,   271,   269,   272,    57,
      -1,   129,    -1,   269,   141,   129,    -1,   130,    -1,   269,
     141,   130,    -1,   125,    -1,   269,   141,   125,    -1,    -1,
     141,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   162,   162,   163,   164,   165,   166,   170,   174,   174,
     184,   184,   197,   198,   202,   203,   204,   207,   210,   211,
     212,   214,   216,   218,   220,   222,   224,   226,   228,   230,
     232,   234,   235,   236,   238,   240,   242,   244,   246,   247,
     249,   248,   252,   254,   258,   259,   260,   264,   266,   270,
     272,   277,   278,   279,   284,   284,   289,   291,   293,   298,
     298,   304,   305,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   322,   324,   326,   329,   331,   333,
     335,   337,   339,   338,   342,   345,   344,   348,   352,   353,
     355,   357,   362,   365,   368,   371,   374,   377,   381,   380,
     385,   384,   389,   388,   395,   399,   400,   401,   405,   407,
     408,   408,   416,   420,   424,   431,   437,   443,   449,   455,
     461,   467,   473,   479,   488,   497,   508,   517,   528,   536,
     540,   547,   549,   548,   555,   556,   560,   561,   566,   571,
     572,   577,   581,   581,   585,   584,   591,   592,   595,   597,
     601,   603,   605,   607,   609,   614,   621,   623,   627,   629,
     631,   633,   635,   637,   639,   641,   646,   646,   651,   655,
     663,   667,   675,   675,   679,   682,   682,   685,   686,   691,
     690,   696,   695,   702,   710,   718,   719,   723,   724,   728,
     730,   735,   740,   741,   746,   748,   754,   756,   758,   762,
     764,   770,   773,   782,   793,   793,   799,   801,   803,   805,
     807,   809,   812,   814,   816,   818,   820,   822,   824,   826,
     828,   830,   832,   834,   836,   838,   840,   842,   844,   846,
     848,   850,   852,   854,   857,   859,   861,   863,   865,   867,
     869,   871,   873,   875,   877,   879,   888,   890,   892,   894,
     896,   898,   900,   906,   907,   911,   912,   916,   917,   921,
     922,   926,   927,   928,   929,   932,   936,   939,   945,   947,
     932,   954,   956,   958,   963,   965,   953,   975,   977,   975,
     983,   982,   989,   990,   991,   992,   993,   997,   998,   999,
    1003,  1004,  1009,  1010,  1015,  1016,  1021,  1022,  1027,  1029,
    1034,  1037,  1050,  1054,  1059,  1061,  1052,  1069,  1072,  1074,
    1078,  1079,  1078,  1088,  1133,  1136,  1148,  1157,  1160,  1167,
    1167,  1179,  1180,  1184,  1188,  1197,  1197,  1211,  1211,  1221,
    1222,  1226,  1230,  1234,  1241,  1245,  1253,  1256,  1260,  1264,
    1268,  1275,  1279,  1283,  1287,  1292,  1291,  1305,  1304,  1314,
    1318,  1322,  1326,  1330,  1334,  1340,  1342
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "INT", "NAME", "LNAME", "'='", "OREQ",
  "ANDEQ", "RSHIFTEQ", "LSHIFTEQ", "DIVEQ", "MULTEQ", "MINUSEQ", "PLUSEQ",
  "'?'", "':'", "OROR", "ANDAND", "'|'", "'^'", "'&'", "NE", "EQ", "'<'",
  "'>'", "GE", "LE", "RSHIFT", "LSHIFT", "'+'", "'-'", "'*'", "'/'", "'%'",
  "UNARY", "END", "'('", "ALIGN_K", "BLOCK", "BIND", "QUAD", "SQUAD",
  "LONG", "SHORT", "BYTE", "SECTIONS", "PHDRS", "INSERT_K", "AFTER",
  "BEFORE", "DATA_SEGMENT_ALIGN", "DATA_SEGMENT_RELRO_END",
  "DATA_SEGMENT_END", "SORT_BY_NAME", "SORT_BY_ALIGNMENT", "'{'", "'}'",
  "SIZEOF_HEADERS", "OUTPUT_FORMAT", "FORCE_COMMON_ALLOCATION",
  "OUTPUT_ARCH", "INHIBIT_COMMON_ALLOCATION", "SEGMENT_START", "INCLUDE",
  "MEMORY", "REGION_ALIAS", "NOLOAD", "DSECT", "COPY", "INFO", "OVERLAY",
  "DEFINED", "TARGET_K", "SEARCH_DIR", "MAP", "ENTRY", "NEXT", "SIZEOF",
  "ALIGNOF", "ADDR", "LOADADDR", "MAX_K", "MIN_K", "STARTUP", "HLL",
  "SYSLIB", "FLOAT", "NOFLOAT", "NOCROSSREFS", "ORIGIN", "FILL", "LENGTH",
  "CREATE_OBJECT_SYMBOLS", "INPUT", "GROUP", "OUTPUT", "CONSTRUCTORS",
  "ALIGNMOD", "AT", "SUBALIGN", "PROVIDE", "PROVIDE_HIDDEN", "AS_NEEDED",
  "CHIP", "LIST", "SECT", "ABSOLUTE", "LOAD", "NEWLINE", "ENDWORD",
  "ORDER", "NAMEWORD", "ASSERT_K", "FORMAT", "PUBLIC", "DEFSYMEND", "BASE",
  "ALIAS", "TRUNCATE", "REL", "INPUT_SCRIPT", "INPUT_MRI_SCRIPT",
  "INPUT_DEFSYM", "CASE", "EXTERN", "START", "VERS_TAG", "VERS_IDENTIFIER",
  "GLOBAL", "LOCAL", "VERSIONK", "INPUT_VERSION_SCRIPT", "KEEP",
  "ONLY_IF_RO", "ONLY_IF_RW", "SPECIAL", "EXCLUDE_FILE", "CONSTANT",
  "INPUT_DYNAMIC_LIST", "','", "';'", "')'", "'['", "']'", "'!'", "'~'",
  "$accept", "file", "filename", "defsym_expr", "@@1", "mri_script_file",
  "@@2", "mri_script_lines", "mri_script_command", "@@3", "ordernamelist",
  "mri_load_name_list", "mri_abs_name_list", "casesymlist",
  "extern_name_list", "@@4", "extern_name_list_body", "script_file", "@@5",
  "ifile_list", "ifile_p1", "@@6", "@@7", "input_list", "@@8", "@@9", "@@10",
  "sections", "sec_or_group_p1", "statement_anywhere", "@@11",
  "wildcard_name", "wildcard_spec", "exclude_name_list", "file_NAME_list",
  "input_section_spec_no_keep", "input_section_spec", "@@12", "statement",
  "@@13", "@@14", "statement_list", "statement_list_opt", "length",
  "fill_exp", "fill_opt", "assign_op", "end", "assignment", "opt_comma",
  "memory", "memory_spec_list_opt", "memory_spec_list", "memory_spec",
  "@@15", "@@16", "origin_spec", "length_spec", "attributes_opt",
  "attributes_list", "attributes_string", "startup", "high_level_library",
  "high_level_library_NAME_list", "low_level_library",
  "low_level_library_NAME_list", "floating_point_support",
  "nocrossref_list", "mustbe_exp", "@@17", "exp", "memspec_at_opt",
  "opt_at", "opt_align", "opt_subalign", "sect_constraint", "section",
  "@@18", "@@19", "@@20", "@@21", "@@22", "@@23", "@@24", "@@25", "@@26", "@@27",
  "@@28", "@@29", "@@30", "type", "atype", "opt_exp_with_type",
  "opt_exp_without_type", "opt_nocrossrefs", "memspec_opt", "phdr_opt",
  "overlay_section", "@@31", "@@32", "@@33", "phdrs", "phdr_list", "phdr",
  "@@34", "@@35", "phdr_type", "phdr_qualifiers", "phdr_val",
  "dynamic_list_file", "@@36", "dynamic_list_nodes", "dynamic_list_node",
  "dynamic_list_tag", "version_script_file", "@@37", "version", "@@38",
  "vers_nodes", "vers_node", "verdep", "vers_tag", "vers_defns", "@@39",
  "@@40", "opt_semicolon", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,    61,   261,   262,   263,
     264,   265,   266,   267,   268,    63,    58,   269,   270,   124,
      94,    38,   271,   272,    60,    62,   273,   274,   275,   276,
      43,    45,    42,    47,    37,   277,   278,    40,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   123,   125,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
      44,    59,    41,    91,    93,    33,   126
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   147,   148,   148,   148,   148,   148,   149,   151,   150,
     153,   152,   154,   154,   155,   155,   155,   155,   155,   155,
     155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
     155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
     156,   155,   155,   155,   157,   157,   157,   158,   158,   159,
     159,   160,   160,   160,   162,   161,   163,   163,   163,   165,
     164,   166,   166,   167,   167,   167,   167,   167,   167,   167,
     167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
     167,   167,   168,   167,   167,   169,   167,   167,   167,   167,
     167,   167,   170,   170,   170,   170,   170,   170,   171,   170,
     172,   170,   173,   170,   174,   175,   175,   175,   176,   176,
     177,   176,   178,   178,   178,   179,   179,   179,   179,   179,
     179,   179,   179,   179,   180,   180,   181,   181,   182,   182,
     182,   183,   184,   183,   185,   185,   185,   185,   185,   185,
     185,   185,   186,   185,   187,   185,   188,   188,   189,   189,
     190,   190,   190,   190,   190,   191,   192,   192,   193,   193,
     193,   193,   193,   193,   193,   193,   194,   194,   195,   195,
     195,   195,   196,   196,   197,   198,   198,   199,   199,   201,
     200,   202,   200,   203,   204,   205,   205,   206,   206,   207,
     207,   208,   209,   209,   210,   210,   211,   212,   212,   213,
     213,   214,   214,   214,   216,   215,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   218,   218,   219,   219,   220,   220,   221,
     221,   222,   222,   222,   222,   224,   225,   226,   227,   228,
     223,   229,   230,   231,   232,   233,   223,   234,   235,   223,
     236,   223,   237,   237,   237,   237,   237,   238,   238,   238,
     239,   239,   239,   239,   240,   240,   241,   241,   242,   242,
     243,   243,   244,   245,   246,   247,   244,   248,   249,   249,
     251,   252,   250,   253,   254,   254,   254,   255,   255,   257,
     256,   258,   258,   259,   260,   262,   261,   264,   263,   265,
     265,   266,   266,   266,   267,   267,   268,   268,   268,   268,
     268,   269,   269,   269,   269,   270,   269,   271,   269,   269,
     269,   269,   269,   269,   269,   272,   272
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     2,     2,     2,     1,     0,     4,
       0,     2,     3,     0,     2,     4,     1,     1,     2,     1,
       4,     4,     3,     2,     4,     3,     4,     4,     4,     4,
       4,     2,     2,     2,     4,     4,     2,     2,     2,     2,
       0,     5,     2,     0,     3,     2,     0,     1,     3,     1,
       3,     0,     1,     3,     0,     2,     1,     2,     3,     0,
       2,     2,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     4,     4,     4,     8,     4,     1,
       1,     4,     0,     5,     4,     0,     5,     4,     4,     3,
       3,     6,     1,     3,     2,     1,     3,     2,     0,     5,
       0,     7,     0,     6,     4,     2,     2,     0,     4,     2,
       0,     7,     1,     1,     1,     1,     5,     4,     4,     7,
       7,     7,     7,     8,     2,     1,     3,     1,     1,     3,
       4,     1,     0,     5,     2,     1,     1,     1,     4,     1,
       4,     4,     0,     8,     0,     5,     2,     1,     0,     1,
       1,     1,     1,     1,     1,     1,     2,     0,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
       6,     6,     1,     0,     4,     1,     0,     3,     1,     0,
       7,     0,     5,     3,     3,     0,     3,     1,     2,     1,
       2,     4,     4,     3,     3,     1,     4,     3,     0,     1,
       1,     0,     2,     3,     0,     2,     2,     3,     4,     2,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     5,     3,
       3,     4,     1,     1,     4,     4,     4,     4,     4,     4,
       4,     6,     6,     6,     4,     6,     4,     1,     6,     6,
       6,     4,     4,     3,     0,     4,     0,     4,     0,     4,
       0,     1,     1,     1,     0,     0,     0,     0,     0,     0,
      19,     0,     0,     0,     0,     0,    18,     0,     0,     7,
       0,     5,     1,     1,     1,     1,     1,     3,     0,     2,
       3,     2,     6,    10,     2,     1,     0,     1,     2,     0,
       0,     3,     0,     0,     0,     0,    11,     4,     0,     2,
       0,     0,     6,     1,     0,     3,     5,     0,     3,     0,
       2,     1,     2,     4,     2,     0,     2,     0,     5,     1,
       2,     4,     5,     6,     1,     2,     0,     2,     4,     4,
       8,     1,     1,     3,     3,     0,     9,     0,     7,     1,
       3,     1,     3,     1,     3,     0,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,    59,    10,     8,   325,   319,     0,     2,    62,     3,
      13,     6,     0,     4,     0,     5,     0,     1,    60,    11,
       0,   336,     0,   326,   329,     0,   320,   321,     0,     0,
       0,     0,     0,    79,     0,    80,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   199,   200,     0,     0,
      82,     0,     0,     0,   110,     0,    72,    61,    64,    70,
       0,    63,    66,    67,    68,    69,    65,    71,     0,    16,
       0,     0,     0,     0,    17,     0,     0,     0,    19,    46,
       0,     0,     0,     0,     0,     0,    51,    54,     0,     0,
       0,   342,   353,   341,   349,   351,     0,     0,   336,   330,
     349,   351,     0,     0,   322,   204,   165,   164,   163,   162,
     161,   160,   159,   158,   204,   107,   308,     0,     0,     0,
       0,     7,    85,   176,     0,     0,     0,     0,     0,     0,
       0,   198,   201,     0,     0,     0,     0,     0,     0,    54,
     167,   166,   109,     0,     0,    40,     0,   232,   247,     0,
       0,     0,     0,     0,     0,     0,     0,   233,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    14,     0,    49,    31,    47,    32,
      18,    33,    23,     0,    36,     0,    37,    52,    38,    39,
       0,    42,    12,     9,     0,     0,     0,     0,   337,     0,
       0,   324,   168,     0,   169,     0,     0,    89,    90,     0,
       0,    62,   179,     0,     0,   173,   178,     0,     0,     0,
       0,     0,     0,   193,   195,   173,   173,   201,     0,    92,
      95,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    13,     0,     0,   210,   206,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   209,   211,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    25,     0,     0,    45,     0,     0,     0,    22,     0,
       0,    56,    55,   347,     0,     0,   331,   344,   354,   343,
     350,   352,     0,   323,   205,   265,   104,     0,   271,   277,
     106,   105,   310,   307,   309,     0,    76,    78,   327,   185,
     181,   174,   172,     0,     0,    73,    74,    84,   108,   191,
     192,     0,   196,     0,   201,   202,    87,    98,    94,    97,
       0,     0,    81,     0,    75,   204,   204,     0,    88,     0,
      27,    28,    43,    29,    30,   207,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   230,   229,   227,   226,
     225,   220,   219,   223,   224,   222,   221,   218,   217,   215,
     216,   212,   213,   214,    15,    26,    24,    50,    48,    44,
      20,    21,    35,    34,    53,    57,     0,     0,   338,   339,
       0,   334,   332,     0,   288,   280,     0,   288,     0,     0,
      86,     0,     0,   176,   177,     0,   194,   197,   203,     0,
     102,    93,    96,     0,    83,     0,     0,     0,   328,    41,
       0,   240,   246,     0,     0,   244,     0,   231,   208,   235,
     234,   236,   237,     0,     0,   251,   252,   239,     0,   238,
       0,    58,   355,   352,   345,   335,   333,     0,     0,   288,
       0,   256,   107,   295,     0,   296,   278,   313,   314,     0,
     189,     0,     0,   187,     0,     0,    91,     0,     0,   100,
     170,   171,     0,     0,     0,     0,     0,     0,     0,     0,
     228,   356,     0,     0,     0,   282,   283,   284,   285,   286,
     289,     0,     0,     0,     0,   291,     0,   258,     0,   294,
     297,   256,     0,   317,     0,   311,     0,   190,   186,   188,
       0,   173,   182,    99,     0,     0,   111,   241,   242,   243,
     245,   248,   249,   250,   348,     0,   355,   287,     0,   290,
       0,     0,   260,   281,   260,   107,     0,   314,     0,     0,
      77,   204,     0,   103,     0,   340,     0,   288,     0,     0,
       0,   266,   272,     0,     0,   315,     0,   312,   183,     0,
     180,   101,   346,     0,     0,   255,     0,     0,   264,     0,
     279,   318,   314,   204,     0,   292,   257,     0,   261,   262,
     263,     0,   273,   316,   184,     0,   259,   267,   302,   288,
     148,     0,     0,   128,   114,   113,   150,   151,   152,   153,
     154,     0,     0,     0,     0,   135,   137,   142,     0,     0,
     136,     0,   115,     0,   131,   139,   147,   149,     0,     0,
       0,   303,   274,   293,     0,     0,   144,   204,     0,   132,
       0,   112,     0,   127,   173,     0,   146,   268,   204,   134,
       0,   299,     0,     0,     0,     0,     0,     0,     0,     0,
     148,     0,   155,     0,     0,   125,     0,     0,   129,     0,
     173,   299,     0,   148,     0,   254,     0,     0,   138,     0,
     117,     0,     0,   118,     0,   141,     0,   112,     0,     0,
     124,   126,   130,   254,   140,     0,   298,     0,   300,     0,
       0,     0,     0,     0,   145,     0,   133,   116,   300,   304,
       0,   157,     0,     0,     0,     0,     0,     0,   157,   300,
     253,   204,     0,   275,   120,   119,     0,   121,   122,     0,
     269,   157,   156,   301,   173,   123,   143,   173,   305,   276,
     270,   173,   306
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     6,   122,    11,    12,     9,    10,    19,    89,   242,
     180,   179,   177,   188,   189,   190,   302,     7,     8,    18,
      57,   134,   211,   232,   439,   545,   498,    58,   205,   320,
     138,   642,   643,   686,   664,   644,   645,   684,   646,   658,
     680,   647,   648,   649,   681,   743,   114,   142,    60,   689,
      61,   214,   215,   216,   329,   433,   541,   590,   432,   492,
     493,    62,    63,   225,    64,   226,    65,   228,   682,   203,
     247,   718,   527,   562,   581,   611,   321,   424,   598,   620,
     691,   757,   426,   599,   618,   671,   754,   427,   532,   482,
     521,   480,   481,   485,   531,   695,   731,   621,   670,   739,
     761,    66,   206,   324,   428,   569,   488,   535,   567,    15,
      16,    26,    27,   102,    13,    14,    67,    68,    23,    24,
     423,    96,    97,   514,   417,   512
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -621
static const yytype_int16 yypact[] =
{
     180,  -621,  -621,  -621,  -621,  -621,    27,  -621,  -621,  -621,
    -621,  -621,    38,  -621,   -21,  -621,    23,  -621,   824,  1581,
     111,   112,    75,   -21,  -621,   120,    23,  -621,   623,    95,
     128,   170,   153,  -621,   201,  -621,   242,   195,   220,   223,
     226,   238,   245,   252,   280,   285,  -621,  -621,   286,   288,
    -621,   290,   291,   299,  -621,   315,  -621,  -621,  -621,  -621,
     129,  -621,  -621,  -621,  -621,  -621,  -621,  -621,   206,  -621,
     352,   242,   354,   680,  -621,   355,   359,   360,  -621,  -621,
     361,   363,   366,   680,   367,   369,   372,  -621,   374,   266,
     680,  -621,   378,  -621,   373,   376,   331,   253,   112,  -621,
    -621,  -621,   338,   255,  -621,  -621,  -621,  -621,  -621,  -621,
    -621,  -621,  -621,  -621,  -621,  -621,  -621,   402,   404,   405,
     406,  -621,  -621,    24,   409,   411,   242,   242,   412,   242,
       4,  -621,   418,    20,   388,   242,   423,   424,   392,  -621,
    -621,  -621,  -621,   375,    33,  -621,    41,  -621,  -621,   680,
     680,   680,   393,   399,   400,   401,   403,  -621,   408,   413,
     414,   415,   417,   419,   420,   428,   429,   430,   432,   433,
     435,   438,   680,   680,  1400,   228,  -621,   301,  -621,   302,
       5,  -621,  -621,   381,  1756,   303,  -621,  -621,   307,  -621,
     444,  -621,  -621,  1756,   421,   120,   120,   314,   217,   422,
     335,   217,  -621,   680,  -621,   322,    46,  -621,  -621,    10,
     336,  -621,  -621,   242,   425,    -2,  -621,   340,   341,   342,
     343,   347,   348,  -621,  -621,    87,   114,    22,   349,  -621,
    -621,   455,    32,    20,   356,   490,   491,   680,   357,   -21,
     680,   680,  -621,   680,   680,  -621,  -621,   833,   680,   680,
     680,   680,   680,   497,   498,   680,   503,   504,   505,   506,
     680,   680,   509,   510,   680,   680,   511,  -621,  -621,   680,
     680,   680,   680,   680,   680,   680,   680,   680,   680,   680,
     680,   680,   680,   680,   680,   680,   680,   680,   680,   680,
     680,  1756,   512,   513,  -621,   514,   680,   680,  1756,   310,
     516,  -621,    25,  -621,   384,   387,  -621,  -621,   518,  -621,
    -621,  -621,   -12,  -621,  1756,   623,  -621,   242,  -621,  -621,
    -621,  -621,  -621,  -621,  -621,   525,  -621,  -621,   897,   493,
    -621,  -621,  -621,    24,   528,  -621,  -621,  -621,  -621,  -621,
    -621,   242,  -621,   242,   418,  -621,  -621,  -621,  -621,  -621,
     496,    39,  -621,    86,  -621,  -621,  -621,  1420,  -621,     6,
    1756,  1756,   691,  1756,  1756,  -621,  1022,  1042,  1440,  1460,
    1062,   394,   395,  1082,   396,   426,   427,   436,  1480,  1500,
     437,   440,  1102,  1524,   441,  1716,  1773,  1789,  1804,  1002,
    1643,   987,   987,   371,   371,   371,   371,   300,   300,    37,
      37,  -621,  -621,  -621,  1756,  1756,  1756,  -621,  -621,  -621,
    1756,  1756,  -621,  -621,  -621,  -621,   531,   120,   232,   217,
     480,  -621,  -621,    -7,   536,  -621,   608,   536,   680,   407,
    -621,     3,   527,    24,  -621,   442,  -621,  -621,  -621,    20,
    -621,  -621,  -621,   507,  -621,   443,   448,   537,  -621,  -621,
     680,  -621,  -621,   680,   680,  -621,   680,  -621,  -621,  -621,
    -621,  -621,  -621,   680,   680,  -621,  -621,  -621,   542,  -621,
     680,  -621,   431,   532,  -621,  -621,  -621,    15,   522,  1693,
     545,   461,  -621,  -621,  1736,   473,  -621,  1756,    19,   560,
    -621,   566,     2,  -621,   481,   541,  -621,   122,    20,  -621,
    -621,  -621,   449,  1122,  1148,  1168,  1188,  1208,  1228,   450,
    1756,   217,   523,   120,   120,  -621,  -621,  -621,  -621,  -621,
    -621,   451,   680,   227,   570,  -621,   558,   559,   410,  -621,
    -621,   461,   540,   561,   563,  -621,   459,  -621,  -621,  -621,
     596,   463,  -621,  -621,   132,    20,  -621,  -621,  -621,  -621,
    -621,  -621,  -621,  -621,  -621,   465,   431,  -621,  1248,  -621,
     680,   567,   520,  -621,   520,  -621,   680,    19,   680,   466,
    -621,  -621,   517,  -621,   136,   217,   564,   248,  1274,   680,
     585,  -621,  -621,   601,  1294,  -621,  1314,  -621,  -621,   617,
    -621,  -621,  -621,   588,   611,  -621,  1334,   680,   214,   584,
    -621,  -621,    19,  -621,   680,  -621,  -621,  1354,  -621,  -621,
    -621,   586,  -621,  -621,  -621,  1374,  -621,  -621,  -621,   604,
     736,    47,   628,   544,  -621,  -621,  -621,  -621,  -621,  -621,
    -621,   613,   614,   242,   615,  -621,  -621,  -621,   616,   618,
    -621,   284,  -621,   619,  -621,  -621,  -621,   736,   591,   620,
     129,  -621,  -621,  -621,    57,   229,  -621,  -621,   625,  -621,
     151,  -621,   626,  -621,   -31,   284,  -621,  -621,  -621,  -621,
     598,   639,   630,   631,   533,   632,   534,   633,   636,   550,
     736,   551,  -621,   680,    26,  -621,    16,   289,  -621,   284,
     150,   639,   552,   736,   674,   580,   151,   151,  -621,   151,
    -621,   151,   151,  -621,   661,  -621,  1544,   557,   562,   151,
    -621,  -621,  -621,   580,  -621,   644,  -621,   681,  -621,   565,
     571,    17,   574,   578,  -621,   701,  -621,  -621,  -621,  -621,
     704,    58,   581,   582,   151,   583,   592,   593,    58,  -621,
    -621,  -621,   705,  -621,  -621,  -621,   594,  -621,  -621,   129,
    -621,    58,  -621,  -621,   463,  -621,  -621,   463,  -621,  -621,
    -621,   463,  -621
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -621,  -621,   -70,  -621,  -621,  -621,  -621,   470,  -621,  -621,
    -621,  -621,  -621,  -621,   587,  -621,  -621,  -621,  -621,   519,
    -621,  -621,  -621,  -221,  -621,  -621,  -621,  -621,  -444,   -13,
    -621,   927,  -540,    29,    72,    55,  -621,  -621,    94,  -621,
    -621,  -621,  -500,  -621,     1,  -508,  -621,  -617,  -425,  -212,
    -621,   311,  -621,   389,  -621,  -621,  -621,  -621,  -621,  -621,
     256,  -621,  -621,  -621,  -621,  -621,  -621,  -205,  -103,  -621,
     -73,    34,   218,  -621,   181,  -621,  -621,  -621,  -621,  -621,
    -621,  -621,  -621,  -621,  -621,  -621,  -621,  -621,  -621,  -621,
    -621,  -463,   323,  -621,  -621,    65,  -620,  -621,  -621,  -621,
    -621,  -621,  -621,  -621,  -621,  -621,  -621,  -527,  -621,  -621,
    -621,  -621,   738,  -621,  -621,  -621,  -621,  -621,   526,   -19,
    -621,   668,   -10,  -621,  -621,   211
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -328
static const yytype_int16 yytable[] =
{
     174,   145,   202,   333,    99,    59,   490,   490,   121,   294,
     184,   204,   353,   341,   343,   103,   524,   193,   147,   148,
     661,   661,   345,   533,   229,   230,   227,    17,   212,   415,
     707,   624,   624,   669,  -175,    21,   348,   349,   528,   240,
     585,   624,    20,   441,   442,   149,   150,   243,   625,   625,
     322,   651,   151,   152,   153,  -175,   219,   220,   625,   222,
     224,   661,    21,   448,   741,   234,   154,   155,   156,   285,
     286,   287,   624,   157,   742,   613,   245,   246,   158,    25,
     662,   632,   515,   516,   517,   518,   519,   159,   213,   625,
     348,   349,   160,   161,   162,   163,   164,   165,   166,   267,
     268,   663,   291,   323,   652,   167,    22,   168,   738,   332,
     298,   672,   673,   688,   594,   421,    91,    90,   534,   751,
     475,   583,   169,   231,    91,   663,   348,   349,   170,   422,
     314,    98,   756,    22,   476,   350,   348,   349,   332,   438,
     348,   349,   443,   330,   538,   295,   223,   491,   491,   711,
     325,   115,   326,   171,   674,   661,   622,   520,   709,   734,
     172,   173,   344,   639,   357,   416,   624,   360,   361,   641,
     363,   364,   351,   241,   352,   366,   367,   368,   369,   370,
     704,   244,   373,   625,   116,   304,   305,   378,   379,   350,
     119,   382,   383,   715,   675,   650,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   497,   117,
     118,   307,   650,   410,   411,   350,   351,   332,   444,   340,
     750,   147,   148,   661,   289,   350,   307,    92,   120,   350,
      93,    94,    95,   758,   624,    92,   121,   425,    93,   100,
     101,   123,   445,   446,   332,   650,   342,   124,   149,   150,
     125,   625,   351,   126,   543,   151,   152,   153,   650,   140,
     141,   436,   351,   437,   573,   127,   351,   544,   591,   154,
     155,   156,   128,   677,   678,   523,   157,   593,   661,   129,
     332,   158,   712,   661,   515,   516,   517,   518,   519,   624,
     159,     1,     2,     3,   624,   160,   161,   162,   163,   164,
     165,   166,     4,   412,   413,    59,   625,   130,   167,     5,
     168,   625,   131,   132,   574,   133,   315,   135,   136,   572,
     283,   284,   285,   286,   287,   169,   137,   143,   662,   632,
      99,   170,   308,   672,   673,   309,   310,   311,   608,   609,
     610,   479,   139,   484,   479,   487,   144,   308,   146,   175,
     309,   310,   473,   176,   178,   181,   171,   182,   290,   520,
     183,   185,   186,   172,   173,   192,   187,   503,   191,   316,
     504,   505,   194,   506,   147,   148,   317,   296,   197,   195,
     507,   508,   196,   318,   198,   200,   201,   510,    42,   281,
     282,   283,   284,   285,   286,   287,   207,   472,   208,   209,
     210,   149,   150,   217,   315,   218,   221,   319,   151,   152,
     153,   639,   227,    52,    53,   233,   675,   235,   236,   237,
     248,   239,   154,   155,   156,    54,   249,   250,   251,   157,
     252,   292,   293,   299,   158,   253,   563,   300,   301,   558,
     254,   255,   256,   159,   257,   306,   258,   259,   160,   161,
     162,   163,   164,   165,   166,   260,   261,   262,   588,   263,
     264,   167,   265,   168,   317,   266,   313,   303,   327,   312,
     334,   318,   331,   335,   336,   337,    42,   578,   169,   338,
     339,   346,   347,   584,   170,   586,   355,   356,   354,   358,
     614,   371,   372,   555,   556,   319,   596,   374,   375,   376,
     377,    52,    53,   380,   381,   384,   407,   408,   409,   171,
     414,   297,   420,    54,   607,   418,   172,   173,   419,   429,
     431,   615,   435,   440,   456,   471,   474,   457,   459,   147,
     148,   502,   759,   494,   499,   760,   509,   489,   513,   762,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   522,
     526,   525,   530,   656,   536,   692,   149,   150,   460,   461,
     537,   540,   511,   477,   152,   153,   478,   542,   462,   465,
     554,  -112,   466,   469,   496,   500,   559,   154,   155,   156,
     501,   546,   553,   557,   157,   560,   565,   561,   566,   158,
     568,   570,   571,   332,   579,   315,   575,   587,   159,   589,
     706,   147,   148,   160,   161,   162,   163,   164,   165,   166,
     580,   592,   597,   603,   483,   604,   167,   605,   168,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   149,   150,
     612,   523,   617,   169,   653,   151,   152,   153,   667,   170,
     654,   655,   657,   659,   693,   660,   665,   668,   600,   154,
     155,   156,   683,   687,   694,   317,   157,   696,   697,   699,
     701,   158,   318,   702,   171,   698,   700,    42,   716,   717,
     159,   172,   173,   147,   148,   160,   161,   162,   163,   164,
     165,   166,   703,   705,   714,    69,   319,   724,   167,  -128,
     168,   729,    52,    53,   726,   737,   730,   732,   740,   753,
     149,   150,   362,   733,    54,   169,   735,   151,   152,   153,
     736,   170,   434,   744,   745,   747,   238,   449,   721,    70,
     328,   154,   155,   156,   748,   749,   755,   690,   157,   708,
     623,   666,   752,   158,   495,   582,   171,   728,   539,   564,
     486,   624,   159,   172,   173,    71,   713,   160,   161,   162,
     163,   164,   165,   166,   104,   359,   199,   576,   625,     0,
     167,     0,   168,     0,     0,     0,     0,   626,   627,   628,
     629,   630,     0,     0,     0,     0,     0,   169,     0,    72,
     631,   632,     0,   170,     0,    73,    74,    75,    76,    77,
     633,    78,    79,    80,     0,    81,    82,     0,    83,    84,
      85,     0,     0,     0,     0,    86,    87,    88,   171,     0,
       0,     0,     0,     0,     0,   172,   173,   634,    28,   635,
       0,     0,     0,   636,     0,     0,     0,    52,    53,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   269,   637,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,     0,   638,
      29,    30,    31,   639,     0,     0,     0,   640,     0,   641,
       0,     0,     0,    32,    33,    34,    35,     0,    36,    37,
      38,     0,     0,     0,     0,     0,     0,    39,    40,    41,
      42,    28,     0,     0,     0,     0,     0,     0,    43,    44,
      45,    46,    47,    48,     0,     0,     0,     0,    49,    50,
      51,     0,     0,     0,     0,    52,    53,     0,     0,     0,
       0,     0,     0,   430,     0,     0,     0,    54,     0,     0,
       0,     0,     0,    29,    30,    31,     0,     0,     0,    55,
       0,     0,     0,     0,     0,  -327,    32,    33,    34,    35,
       0,    36,    37,    38,     0,    56,     0,     0,     0,     0,
      39,    40,    41,    42,     0,   365,     0,     0,     0,     0,
       0,    43,    44,    45,    46,    47,    48,     0,     0,     0,
       0,    49,    50,    51,     0,     0,     0,     0,    52,    53,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      54,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,    55,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   269,    56,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   269,     0,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   269,     0,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   269,     0,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   269,     0,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   269,     0,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,     0,     0,     0,
       0,     0,   450,   269,   451,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   269,   452,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   269,   455,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   269,   458,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   269,   467,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   269,   547,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,     0,     0,     0,     0,     0,     0,   269,
     548,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   269,
     549,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   269,
     550,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   269,
     551,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   269,
     552,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   269,
     577,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,     0,
       0,     0,     0,     0,     0,   269,   595,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   269,   601,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   269,   602,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   269,   606,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   269,   616,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   269,   619,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,     0,     0,     0,     0,   269,
     288,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   269,
     447,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,     0,
     453,   676,   679,     0,     0,    69,     0,   685,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     454,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   710,   676,     0,     0,     0,     0,    70,
     463,     0,     0,   719,   720,     0,   685,     0,   722,   723,
       0,     0,     0,     0,     0,     0,   727,     0,     0,     0,
     464,     0,     0,     0,     0,    71,     0,     0,   710,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   746,     0,     0,   468,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,     0,    72,
       0,     0,     0,     0,   725,    73,    74,    75,    76,    77,
     -43,    78,    79,    80,     0,    81,    82,     0,    83,    84,
      85,     0,     0,     0,     0,    86,    87,    88,   269,     0,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,     0,     0,
     523,   269,   470,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   269,   529,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   269,     0,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287
};

static const yytype_int16 yycheck[] =
{
      73,    71,   105,   215,    23,    18,     4,     4,     4,     4,
      83,   114,   233,   225,   226,    25,   479,    90,     3,     4,
       4,     4,   227,     4,     4,     5,     4,     0,     4,     4,
       4,    15,    15,   650,    36,    56,     4,     5,   482,     6,
     567,    15,     4,     4,     5,    30,    31,     6,    32,    32,
       4,     4,    37,    38,    39,    57,   126,   127,    32,   129,
     130,     4,    56,    57,     6,   135,    51,    52,    53,    32,
      33,    34,    15,    58,    16,   602,   149,   150,    63,    56,
      54,    55,    67,    68,    69,    70,    71,    72,    64,    32,
       4,     5,    77,    78,    79,    80,    81,    82,    83,   172,
     173,   641,   175,    57,    57,    90,   127,    92,   728,   140,
     183,    54,    55,   144,   577,   127,     4,     6,    99,   739,
     127,   565,   107,   103,     4,   665,     4,     5,   113,   141,
     203,    56,   749,   127,   141,   103,     4,     5,   140,   344,
       4,     5,   103,   213,   142,   140,   142,   145,   145,   689,
     140,    56,   142,   138,    97,     4,   619,   142,   142,   142,
     145,   146,   140,   137,   237,   140,    15,   240,   241,   143,
     243,   244,   140,   140,   142,   248,   249,   250,   251,   252,
     680,   140,   255,    32,    56,   195,   196,   260,   261,   103,
      37,   264,   265,   693,   137,   620,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   439,    49,
      50,     4,   647,   296,   297,   103,   140,   140,   142,   142,
     738,     3,     4,     4,     6,   103,     4,   125,    37,   103,
     128,   129,   130,   751,    15,   125,     4,   317,   128,   129,
     130,    56,   355,   356,   140,   680,   142,    37,    30,    31,
      37,    32,   140,    37,   142,    37,    38,    39,   693,   140,
     141,   341,   140,   343,   142,    37,   140,   498,   142,    51,
      52,    53,    37,    54,    55,    37,    58,    39,     4,    37,
     140,    63,   142,     4,    67,    68,    69,    70,    71,    15,
      72,   121,   122,   123,    15,    77,    78,    79,    80,    81,
      82,    83,   132,     3,     4,   328,    32,    37,    90,   139,
      92,    32,    37,    37,   545,    37,     4,    37,    37,   541,
      30,    31,    32,    33,    34,   107,    37,   131,    54,    55,
     359,   113,   125,    54,    55,   128,   129,   130,   134,   135,
     136,   424,    37,   426,   427,   428,     4,   125,     4,     4,
     128,   129,   130,     4,     4,     4,   138,     4,   140,   142,
       4,     4,     3,   145,   146,   109,     4,   450,     4,    57,
     453,   454,     4,   456,     3,     4,    64,     6,    57,    16,
     463,   464,    16,    71,   141,    57,   141,   470,    76,    28,
      29,    30,    31,    32,    33,    34,     4,   417,     4,     4,
       4,    30,    31,     4,     4,     4,     4,    95,    37,    38,
      39,   137,     4,   101,   102,    37,   137,     4,     4,    37,
      37,    56,    51,    52,    53,   113,    37,    37,    37,    58,
      37,   140,   140,   140,    63,    37,    36,   140,     4,   522,
      37,    37,    37,    72,    37,   141,    37,    37,    77,    78,
      79,    80,    81,    82,    83,    37,    37,    37,   571,    37,
      37,    90,    37,    92,    64,    37,   141,    56,   142,    57,
     140,    71,    57,   142,   142,   142,    76,   560,   107,   142,
     142,   142,    37,   566,   113,   568,     6,     6,   142,   142,
     603,     4,     4,   513,   514,    95,   579,     4,     4,     4,
       4,   101,   102,     4,     4,     4,     4,     4,     4,   138,
       4,   140,     4,   113,   597,   141,   145,   146,   141,     4,
      37,   604,     4,    37,   140,     4,    56,   142,   142,     3,
       4,     4,   754,    16,    37,   757,     4,   140,    16,   761,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    37,
      99,    16,    89,   633,     4,   668,    30,    31,   142,   142,
       4,    90,   141,    37,    38,    39,    40,    36,   142,   142,
      57,    37,   142,   142,   142,   142,    16,    51,    52,    53,
     142,   142,   142,   142,    58,    37,    56,    38,    37,    63,
      37,   142,     6,   140,    37,     4,   141,   141,    72,    92,
     683,     3,     4,    77,    78,    79,    80,    81,    82,    83,
     100,    57,    37,     6,    16,    37,    90,    16,    92,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    30,    31,
      56,    37,    56,   107,    16,    37,    38,    39,    57,   113,
      37,    37,    37,    37,    56,    37,    37,    37,    57,    51,
      52,    53,    37,    37,    25,    64,    58,    37,    37,    37,
      37,    63,    71,    37,   138,   142,   142,    76,     4,    99,
      72,   145,   146,     3,     4,    77,    78,    79,    80,    81,
      82,    83,   142,   142,   142,     4,    95,    36,    90,   142,
      92,    57,   101,   102,   142,     4,    25,   142,     4,     4,
      30,    31,   242,   142,   113,   107,   142,    37,    38,    39,
     142,   113,   333,   142,   142,   142,   139,    36,   699,    38,
     211,    51,    52,    53,   142,   142,   142,   665,    58,   684,
       4,   647,   741,    63,   433,   564,   138,   713,   492,   531,
     427,    15,    72,   145,   146,    64,   691,    77,    78,    79,
      80,    81,    82,    83,    26,   239,    98,   556,    32,    -1,
      90,    -1,    92,    -1,    -1,    -1,    -1,    41,    42,    43,
      44,    45,    -1,    -1,    -1,    -1,    -1,   107,    -1,    98,
      54,    55,    -1,   113,    -1,   104,   105,   106,   107,   108,
      64,   110,   111,   112,    -1,   114,   115,    -1,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,   125,   126,   138,    -1,
      -1,    -1,    -1,    -1,    -1,   145,   146,    91,     4,    93,
      -1,    -1,    -1,    97,    -1,    -1,    -1,   101,   102,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,   113,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    -1,   133,
      46,    47,    48,   137,    -1,    -1,    -1,   141,    -1,   143,
      -1,    -1,    -1,    59,    60,    61,    62,    -1,    64,    65,
      66,    -1,    -1,    -1,    -1,    -1,    -1,    73,    74,    75,
      76,     4,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,
      86,    87,    88,    89,    -1,    -1,    -1,    -1,    94,    95,
      96,    -1,    -1,    -1,    -1,   101,   102,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    -1,   113,    -1,    -1,
      -1,    -1,    -1,    46,    47,    48,    -1,    -1,    -1,   125,
      -1,    -1,    -1,    -1,    -1,   131,    59,    60,    61,    62,
      -1,    64,    65,    66,    -1,   141,    -1,    -1,    -1,    -1,
      73,    74,    75,    76,    -1,   142,    -1,    -1,    -1,    -1,
      -1,    84,    85,    86,    87,    88,    89,    -1,    -1,    -1,
      -1,    94,    95,    96,    -1,    -1,    -1,    -1,   101,   102,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     113,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,   125,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    15,   141,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    15,    -1,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    15,    -1,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    15,    -1,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    15,    -1,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    15,    -1,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,   140,    15,   142,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    15,   142,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    15,   142,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    15,   142,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    15,   142,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    15,   142,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    15,
     142,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     142,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     142,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     142,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     142,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     142,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    15,   142,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   142,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   142,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   142,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   142,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   142,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    15,
     140,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     140,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
     140,   654,   655,    -1,    -1,     4,    -1,   660,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     140,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   686,   687,    -1,    -1,    -1,    -1,    38,
     140,    -1,    -1,   696,   697,    -1,   699,    -1,   701,   702,
      -1,    -1,    -1,    -1,    -1,    -1,   709,    -1,    -1,    -1,
     140,    -1,    -1,    -1,    -1,    64,    -1,    -1,   721,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   734,    -1,    -1,   140,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    -1,    98,
      -1,    -1,    -1,    -1,   140,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,   115,    -1,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,   125,   126,    15,    -1,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
      37,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    15,    -1,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,   121,   122,   123,   132,   139,   148,   164,   165,   152,
     153,   150,   151,   261,   262,   256,   257,     0,   166,   154,
       4,    56,   127,   265,   266,    56,   258,   259,     4,    46,
      47,    48,    59,    60,    61,    62,    64,    65,    66,    73,
      74,    75,    76,    84,    85,    86,    87,    88,    89,    94,
      95,    96,   101,   102,   113,   125,   141,   167,   174,   176,
     195,   197,   208,   209,   211,   213,   248,   263,   264,     4,
      38,    64,    98,   104,   105,   106,   107,   108,   110,   111,
     112,   114,   115,   117,   118,   119,   124,   125,   126,   155,
       6,     4,   125,   128,   129,   130,   268,   269,    56,   266,
     129,   130,   260,   269,   259,     6,     7,     8,     9,    10,
      11,    12,    13,    14,   193,    56,    56,    49,    50,    37,
      37,     4,   149,    56,    37,    37,    37,    37,    37,    37,
      37,    37,    37,    37,   168,    37,    37,    37,   177,    37,
     140,   141,   194,   131,     4,   149,     4,     3,     4,    30,
      31,    37,    38,    39,    51,    52,    53,    58,    63,    72,
      77,    78,    79,    80,    81,    82,    83,    90,    92,   107,
     113,   138,   145,   146,   217,     4,     4,   159,     4,   158,
     157,     4,     4,     4,   217,     4,     3,     4,   160,   161,
     162,     4,   109,   217,     4,    16,    16,    57,   141,   268,
      57,   141,   215,   216,   215,   175,   249,     4,     4,     4,
       4,   169,     4,    64,   198,   199,   200,     4,     4,   149,
     149,     4,   149,   142,   149,   210,   212,     4,   214,     4,
       5,   103,   170,    37,   149,     4,     4,    37,   161,    56,
       6,   140,   156,     6,   140,   217,   217,   217,    37,    37,
      37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    37,    37,    37,    37,    37,   217,   217,    15,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,   140,     6,
     140,   217,   140,   140,     4,   140,     6,   140,   217,   140,
     140,     4,   163,    56,   269,   269,   141,     4,   125,   128,
     129,   130,    57,   141,   217,     4,    57,    64,    71,    95,
     176,   223,     4,    57,   250,   140,   142,   142,   166,   201,
     149,    57,   140,   196,   140,   142,   142,   142,   142,   142,
     142,   196,   142,   196,   140,   214,   142,    37,     4,     5,
     103,   140,   142,   170,   142,     6,     6,   217,   142,   265,
     217,   217,   154,   217,   217,   142,   217,   217,   217,   217,
     217,     4,     4,   217,     4,     4,     4,     4,   217,   217,
       4,     4,   217,   217,     4,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
     217,   217,   217,   217,   217,   217,   217,     4,     4,     4,
     217,   217,     3,     4,     4,     4,   140,   271,   141,   141,
       4,   127,   141,   267,   224,   149,   229,   234,   251,     4,
      36,    37,   205,   202,   200,     4,   149,   149,   214,   171,
      37,     4,     5,   103,   142,   215,   215,   140,    57,    36,
     140,   142,   142,   140,   140,   142,   140,   142,   142,   142,
     142,   142,   142,   140,   140,   142,   142,   142,   140,   142,
      16,     4,   269,   130,    56,   127,   141,    37,    40,   217,
     238,   239,   236,    16,   217,   240,   239,   217,   253,   140,
       4,   145,   206,   207,    16,   198,   142,   170,   173,    37,
     142,   142,     4,   217,   217,   217,   217,   217,   217,     4,
     217,   141,   272,    16,   270,    67,    68,    69,    70,    71,
     142,   237,    37,    37,   238,    16,    99,   219,   175,    16,
      89,   241,   235,     4,    99,   254,     4,     4,   142,   207,
      90,   203,    36,   142,   170,   172,   142,   142,   142,   142,
     142,   142,   142,   142,    57,   269,   269,   142,   217,    16,
      37,    38,   220,    36,   219,    56,    37,   255,    37,   252,
     142,     6,   196,   142,   170,   141,   272,   142,   217,    37,
     100,   221,   221,   175,   217,   254,   217,   141,   215,    92,
     204,   142,    57,    39,   238,   142,   217,    37,   225,   230,
      57,   142,   142,     6,    37,    16,   142,   217,   134,   135,
     136,   222,    56,   254,   215,   217,   142,    56,   231,   142,
     226,   244,   238,     4,    15,    32,    41,    42,    43,    44,
      45,    54,    55,    64,    91,    93,    97,   113,   133,   137,
     141,   143,   178,   179,   182,   183,   185,   188,   189,   190,
     195,     4,    57,    16,    37,    37,   149,    37,   186,    37,
      37,     4,    54,   179,   181,    37,   185,    57,    37,   194,
     245,   232,    54,    55,    97,   137,   178,    54,    55,   178,
     187,   191,   215,    37,   184,   178,   180,    37,   144,   196,
     181,   227,   215,    56,    25,   242,    37,    37,   142,    37,
     142,    37,    37,   142,   189,   142,   217,     4,   182,   142,
     178,   179,   142,   242,   142,   189,     4,    99,   218,   178,
     178,   180,   178,   178,    36,   140,   142,   178,   218,    57,
      25,   243,   142,   142,   142,   142,   142,     4,   243,   246,
       4,     6,    16,   192,   142,   142,   178,   142,   142,   142,
     192,   243,   191,     4,   233,   142,   194,   228,   192,   196,
     196,   247,   196
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  
  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 8:
#line 174 "ldgram.y"
    { ldlex_defsym(); }
    break;

  case 9:
#line 176 "ldgram.y"
    {
		  ldlex_popstate();
		  lang_add_assignment(exp_assop((yyvsp[(3) - (4)].token),(yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].etree)));
		}
    break;

  case 10:
#line 184 "ldgram.y"
    {
		  ldlex_mri_script ();
		  PUSH_ERROR (_("MRI style script"));
		}
    break;

  case 11:
#line 189 "ldgram.y"
    {
		  ldlex_popstate ();
		  mri_draw_tree ();
		  POP_ERROR ();
		}
    break;

  case 16:
#line 204 "ldgram.y"
    {
			einfo(_("%P%F: unrecognised keyword in MRI style script '%s'\n"),(yyvsp[(1) - (1)].name));
			}
    break;

  case 17:
#line 207 "ldgram.y"
    {
			config.map_filename = "-";
			}
    break;

  case 20:
#line 213 "ldgram.y"
    { mri_public((yyvsp[(2) - (4)].name), (yyvsp[(4) - (4)].etree)); }
    break;

  case 21:
#line 215 "ldgram.y"
    { mri_public((yyvsp[(2) - (4)].name), (yyvsp[(4) - (4)].etree)); }
    break;

  case 22:
#line 217 "ldgram.y"
    { mri_public((yyvsp[(2) - (3)].name), (yyvsp[(3) - (3)].etree)); }
    break;

  case 23:
#line 219 "ldgram.y"
    { mri_format((yyvsp[(2) - (2)].name)); }
    break;

  case 24:
#line 221 "ldgram.y"
    { mri_output_section((yyvsp[(2) - (4)].name), (yyvsp[(4) - (4)].etree));}
    break;

  case 25:
#line 223 "ldgram.y"
    { mri_output_section((yyvsp[(2) - (3)].name), (yyvsp[(3) - (3)].etree));}
    break;

  case 26:
#line 225 "ldgram.y"
    { mri_output_section((yyvsp[(2) - (4)].name), (yyvsp[(4) - (4)].etree));}
    break;

  case 27:
#line 227 "ldgram.y"
    { mri_align((yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].etree)); }
    break;

  case 28:
#line 229 "ldgram.y"
    { mri_align((yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].etree)); }
    break;

  case 29:
#line 231 "ldgram.y"
    { mri_alignmod((yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].etree)); }
    break;

  case 30:
#line 233 "ldgram.y"
    { mri_alignmod((yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].etree)); }
    break;

  case 33:
#line 237 "ldgram.y"
    { mri_name((yyvsp[(2) - (2)].name)); }
    break;

  case 34:
#line 239 "ldgram.y"
    { mri_alias((yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].name),0);}
    break;

  case 35:
#line 241 "ldgram.y"
    { mri_alias ((yyvsp[(2) - (4)].name), 0, (int) (yyvsp[(4) - (4)].bigint).integer); }
    break;

  case 36:
#line 243 "ldgram.y"
    { mri_base((yyvsp[(2) - (2)].etree)); }
    break;

  case 37:
#line 245 "ldgram.y"
    { mri_truncate ((unsigned int) (yyvsp[(2) - (2)].bigint).integer); }
    break;

  case 40:
#line 249 "ldgram.y"
    { ldlex_script (); ldfile_open_command_file((yyvsp[(2) - (2)].name)); }
    break;

  case 41:
#line 251 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 42:
#line 253 "ldgram.y"
    { lang_add_entry ((yyvsp[(2) - (2)].name), FALSE); }
    break;

  case 44:
#line 258 "ldgram.y"
    { mri_order((yyvsp[(3) - (3)].name)); }
    break;

  case 45:
#line 259 "ldgram.y"
    { mri_order((yyvsp[(2) - (2)].name)); }
    break;

  case 47:
#line 265 "ldgram.y"
    { mri_load((yyvsp[(1) - (1)].name)); }
    break;

  case 48:
#line 266 "ldgram.y"
    { mri_load((yyvsp[(3) - (3)].name)); }
    break;

  case 49:
#line 271 "ldgram.y"
    { mri_only_load((yyvsp[(1) - (1)].name)); }
    break;

  case 50:
#line 273 "ldgram.y"
    { mri_only_load((yyvsp[(3) - (3)].name)); }
    break;

  case 51:
#line 277 "ldgram.y"
    { (yyval.name) = NULL; }
    break;

  case 54:
#line 284 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 55:
#line 286 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 56:
#line 290 "ldgram.y"
    { ldlang_add_undef ((yyvsp[(1) - (1)].name)); }
    break;

  case 57:
#line 292 "ldgram.y"
    { ldlang_add_undef ((yyvsp[(2) - (2)].name)); }
    break;

  case 58:
#line 294 "ldgram.y"
    { ldlang_add_undef ((yyvsp[(3) - (3)].name)); }
    break;

  case 59:
#line 298 "ldgram.y"
    { ldlex_both(); }
    break;

  case 60:
#line 300 "ldgram.y"
    { ldlex_popstate(); }
    break;

  case 73:
#line 321 "ldgram.y"
    { lang_add_target((yyvsp[(3) - (4)].name)); }
    break;

  case 74:
#line 323 "ldgram.y"
    { ldfile_add_library_path ((yyvsp[(3) - (4)].name), FALSE); }
    break;

  case 75:
#line 325 "ldgram.y"
    { lang_add_output((yyvsp[(3) - (4)].name), 1); }
    break;

  case 76:
#line 327 "ldgram.y"
    { lang_add_output_format ((yyvsp[(3) - (4)].name), (char *) NULL,
					    (char *) NULL, 1); }
    break;

  case 77:
#line 330 "ldgram.y"
    { lang_add_output_format ((yyvsp[(3) - (8)].name), (yyvsp[(5) - (8)].name), (yyvsp[(7) - (8)].name), 1); }
    break;

  case 78:
#line 332 "ldgram.y"
    { ldfile_set_output_arch ((yyvsp[(3) - (4)].name), bfd_arch_unknown); }
    break;

  case 79:
#line 334 "ldgram.y"
    { command_line.force_common_definition = TRUE ; }
    break;

  case 80:
#line 336 "ldgram.y"
    { command_line.inhibit_common_definition = TRUE ; }
    break;

  case 82:
#line 339 "ldgram.y"
    { lang_enter_group (); }
    break;

  case 83:
#line 341 "ldgram.y"
    { lang_leave_group (); }
    break;

  case 84:
#line 343 "ldgram.y"
    { lang_add_map((yyvsp[(3) - (4)].name)); }
    break;

  case 85:
#line 345 "ldgram.y"
    { ldlex_script (); ldfile_open_command_file((yyvsp[(2) - (2)].name)); }
    break;

  case 86:
#line 347 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 87:
#line 349 "ldgram.y"
    {
		  lang_add_nocrossref ((yyvsp[(3) - (4)].nocrossref));
		}
    break;

  case 89:
#line 354 "ldgram.y"
    { lang_add_insert ((yyvsp[(3) - (3)].name), 0); }
    break;

  case 90:
#line 356 "ldgram.y"
    { lang_add_insert ((yyvsp[(3) - (3)].name), 1); }
    break;

  case 91:
#line 358 "ldgram.y"
    { lang_memory_region_alias ((yyvsp[(3) - (6)].name), (yyvsp[(5) - (6)].name)); }
    break;

  case 92:
#line 363 "ldgram.y"
    { lang_add_input_file((yyvsp[(1) - (1)].name),lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;

  case 93:
#line 366 "ldgram.y"
    { lang_add_input_file((yyvsp[(3) - (3)].name),lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;

  case 94:
#line 369 "ldgram.y"
    { lang_add_input_file((yyvsp[(2) - (2)].name),lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;

  case 95:
#line 372 "ldgram.y"
    { lang_add_input_file((yyvsp[(1) - (1)].name),lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;

  case 96:
#line 375 "ldgram.y"
    { lang_add_input_file((yyvsp[(3) - (3)].name),lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;

  case 97:
#line 378 "ldgram.y"
    { lang_add_input_file((yyvsp[(2) - (2)].name),lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;

  case 98:
#line 381 "ldgram.y"
    { (yyval.integer) = as_needed; as_needed = TRUE; }
    break;

  case 99:
#line 383 "ldgram.y"
    { as_needed = (yyvsp[(3) - (5)].integer); }
    break;

  case 100:
#line 385 "ldgram.y"
    { (yyval.integer) = as_needed; as_needed = TRUE; }
    break;

  case 101:
#line 387 "ldgram.y"
    { as_needed = (yyvsp[(5) - (7)].integer); }
    break;

  case 102:
#line 389 "ldgram.y"
    { (yyval.integer) = as_needed; as_needed = TRUE; }
    break;

  case 103:
#line 391 "ldgram.y"
    { as_needed = (yyvsp[(4) - (6)].integer); }
    break;

  case 108:
#line 406 "ldgram.y"
    { lang_add_entry ((yyvsp[(3) - (4)].name), FALSE); }
    break;

  case 110:
#line 408 "ldgram.y"
    {ldlex_expression ();}
    break;

  case 111:
#line 409 "ldgram.y"
    { ldlex_popstate ();
		  lang_add_assignment (exp_assert ((yyvsp[(4) - (7)].etree), (yyvsp[(6) - (7)].name))); }
    break;

  case 112:
#line 417 "ldgram.y"
    {
			  (yyval.cname) = (yyvsp[(1) - (1)].name);
			}
    break;

  case 113:
#line 421 "ldgram.y"
    {
			  (yyval.cname) = "*";
			}
    break;

  case 114:
#line 425 "ldgram.y"
    {
			  (yyval.cname) = "?";
			}
    break;

  case 115:
#line 432 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(1) - (1)].cname);
			  (yyval.wildcard).sorted = none;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 116:
#line 438 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(5) - (5)].cname);
			  (yyval.wildcard).sorted = none;
			  (yyval.wildcard).exclude_name_list = (yyvsp[(3) - (5)].name_list);
			}
    break;

  case 117:
#line 444 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(3) - (4)].cname);
			  (yyval.wildcard).sorted = by_name;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 118:
#line 450 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(3) - (4)].cname);
			  (yyval.wildcard).sorted = by_alignment;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 119:
#line 456 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(5) - (7)].cname);
			  (yyval.wildcard).sorted = by_name_alignment;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 120:
#line 462 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(5) - (7)].cname);
			  (yyval.wildcard).sorted = by_name;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 121:
#line 468 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(5) - (7)].cname);
			  (yyval.wildcard).sorted = by_alignment_name;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 122:
#line 474 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(5) - (7)].cname);
			  (yyval.wildcard).sorted = by_alignment;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 123:
#line 480 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(7) - (8)].cname);
			  (yyval.wildcard).sorted = by_name;
			  (yyval.wildcard).exclude_name_list = (yyvsp[(5) - (8)].name_list);
			}
    break;

  case 124:
#line 489 "ldgram.y"
    {
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = (yyvsp[(2) - (2)].cname);
			  tmp->next = (yyvsp[(1) - (2)].name_list);
			  (yyval.name_list) = tmp;
			}
    break;

  case 125:
#line 498 "ldgram.y"
    {
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = (yyvsp[(1) - (1)].cname);
			  tmp->next = NULL;
			  (yyval.name_list) = tmp;
			}
    break;

  case 126:
#line 509 "ldgram.y"
    {
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = (yyvsp[(1) - (3)].wildcard_list);
			  tmp->spec = (yyvsp[(3) - (3)].wildcard);
			  (yyval.wildcard_list) = tmp;
			}
    break;

  case 127:
#line 518 "ldgram.y"
    {
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = NULL;
			  tmp->spec = (yyvsp[(1) - (1)].wildcard);
			  (yyval.wildcard_list) = tmp;
			}
    break;

  case 128:
#line 529 "ldgram.y"
    {
			  struct wildcard_spec tmp;
			  tmp.name = (yyvsp[(1) - (1)].name);
			  tmp.exclude_name_list = NULL;
			  tmp.sorted = none;
			  lang_add_wild (&tmp, NULL, ldgram_had_keep);
			}
    break;

  case 129:
#line 537 "ldgram.y"
    {
			  lang_add_wild (NULL, (yyvsp[(2) - (3)].wildcard_list), ldgram_had_keep);
			}
    break;

  case 130:
#line 541 "ldgram.y"
    {
			  lang_add_wild (&(yyvsp[(1) - (4)].wildcard), (yyvsp[(3) - (4)].wildcard_list), ldgram_had_keep);
			}
    break;

  case 132:
#line 549 "ldgram.y"
    { ldgram_had_keep = TRUE; }
    break;

  case 133:
#line 551 "ldgram.y"
    { ldgram_had_keep = FALSE; }
    break;

  case 135:
#line 557 "ldgram.y"
    {
 		lang_add_attribute(lang_object_symbols_statement_enum);
	      	}
    break;

  case 137:
#line 562 "ldgram.y"
    {

		  lang_add_attribute(lang_constructors_statement_enum);
		}
    break;

  case 138:
#line 567 "ldgram.y"
    {
		  constructors_sorted = TRUE;
		  lang_add_attribute (lang_constructors_statement_enum);
		}
    break;

  case 140:
#line 573 "ldgram.y"
    {
			  lang_add_data ((int) (yyvsp[(1) - (4)].integer), (yyvsp[(3) - (4)].etree));
			}
    break;

  case 141:
#line 578 "ldgram.y"
    {
			  lang_add_fill ((yyvsp[(3) - (4)].fill));
			}
    break;

  case 142:
#line 581 "ldgram.y"
    {ldlex_expression ();}
    break;

  case 143:
#line 582 "ldgram.y"
    { ldlex_popstate ();
			  lang_add_assignment (exp_assert ((yyvsp[(4) - (8)].etree), (yyvsp[(6) - (8)].name))); }
    break;

  case 144:
#line 585 "ldgram.y"
    { ldlex_script (); ldfile_open_command_file((yyvsp[(2) - (2)].name)); }
    break;

  case 145:
#line 587 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 150:
#line 602 "ldgram.y"
    { (yyval.integer) = (yyvsp[(1) - (1)].token); }
    break;

  case 151:
#line 604 "ldgram.y"
    { (yyval.integer) = (yyvsp[(1) - (1)].token); }
    break;

  case 152:
#line 606 "ldgram.y"
    { (yyval.integer) = (yyvsp[(1) - (1)].token); }
    break;

  case 153:
#line 608 "ldgram.y"
    { (yyval.integer) = (yyvsp[(1) - (1)].token); }
    break;

  case 154:
#line 610 "ldgram.y"
    { (yyval.integer) = (yyvsp[(1) - (1)].token); }
    break;

  case 155:
#line 615 "ldgram.y"
    {
		  (yyval.fill) = exp_get_fill ((yyvsp[(1) - (1)].etree), 0, "fill value");
		}
    break;

  case 156:
#line 622 "ldgram.y"
    { (yyval.fill) = (yyvsp[(2) - (2)].fill); }
    break;

  case 157:
#line 623 "ldgram.y"
    { (yyval.fill) = (fill_type *) 0; }
    break;

  case 158:
#line 628 "ldgram.y"
    { (yyval.token) = '+'; }
    break;

  case 159:
#line 630 "ldgram.y"
    { (yyval.token) = '-'; }
    break;

  case 160:
#line 632 "ldgram.y"
    { (yyval.token) = '*'; }
    break;

  case 161:
#line 634 "ldgram.y"
    { (yyval.token) = '/'; }
    break;

  case 162:
#line 636 "ldgram.y"
    { (yyval.token) = LSHIFT; }
    break;

  case 163:
#line 638 "ldgram.y"
    { (yyval.token) = RSHIFT; }
    break;

  case 164:
#line 640 "ldgram.y"
    { (yyval.token) = '&'; }
    break;

  case 165:
#line 642 "ldgram.y"
    { (yyval.token) = '|'; }
    break;

  case 168:
#line 652 "ldgram.y"
    {
		  lang_add_assignment (exp_assop ((yyvsp[(2) - (3)].token), (yyvsp[(1) - (3)].name), (yyvsp[(3) - (3)].etree)));
		}
    break;

  case 169:
#line 656 "ldgram.y"
    {
		  lang_add_assignment (exp_assop ('=', (yyvsp[(1) - (3)].name),
						  exp_binop ((yyvsp[(2) - (3)].token),
							     exp_nameop (NAME,
									 (yyvsp[(1) - (3)].name)),
							     (yyvsp[(3) - (3)].etree))));
		}
    break;

  case 170:
#line 664 "ldgram.y"
    {
		  lang_add_assignment (exp_provide ((yyvsp[(3) - (6)].name), (yyvsp[(5) - (6)].etree), FALSE));
		}
    break;

  case 171:
#line 668 "ldgram.y"
    {
		  lang_add_assignment (exp_provide ((yyvsp[(3) - (6)].name), (yyvsp[(5) - (6)].etree), TRUE));
		}
    break;

  case 179:
#line 691 "ldgram.y"
    { region = lang_memory_region_lookup ((yyvsp[(1) - (1)].name), TRUE); }
    break;

  case 180:
#line 694 "ldgram.y"
    {}
    break;

  case 181:
#line 696 "ldgram.y"
    { ldlex_script (); ldfile_open_command_file((yyvsp[(2) - (2)].name)); }
    break;

  case 182:
#line 698 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 183:
#line 703 "ldgram.y"
    {
		  region->origin = exp_get_vma ((yyvsp[(3) - (3)].etree), 0, "origin");
		  region->current = region->origin;
		}
    break;

  case 184:
#line 711 "ldgram.y"
    {
		  region->length = exp_get_vma ((yyvsp[(3) - (3)].etree), -1, "length");
		}
    break;

  case 185:
#line 718 "ldgram.y"
    { /* dummy action to avoid bison 1.25 error message */ }
    break;

  case 189:
#line 729 "ldgram.y"
    { lang_set_flags (region, (yyvsp[(1) - (1)].name), 0); }
    break;

  case 190:
#line 731 "ldgram.y"
    { lang_set_flags (region, (yyvsp[(2) - (2)].name), 1); }
    break;

  case 191:
#line 736 "ldgram.y"
    { lang_startup((yyvsp[(3) - (4)].name)); }
    break;

  case 193:
#line 742 "ldgram.y"
    { ldemul_hll((char *)NULL); }
    break;

  case 194:
#line 747 "ldgram.y"
    { ldemul_hll((yyvsp[(3) - (3)].name)); }
    break;

  case 195:
#line 749 "ldgram.y"
    { ldemul_hll((yyvsp[(1) - (1)].name)); }
    break;

  case 197:
#line 757 "ldgram.y"
    { ldemul_syslib((yyvsp[(3) - (3)].name)); }
    break;

  case 199:
#line 763 "ldgram.y"
    { lang_float(TRUE); }
    break;

  case 200:
#line 765 "ldgram.y"
    { lang_float(FALSE); }
    break;

  case 201:
#line 770 "ldgram.y"
    {
		  (yyval.nocrossref) = NULL;
		}
    break;

  case 202:
#line 774 "ldgram.y"
    {
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = (yyvsp[(1) - (2)].name);
		  n->next = (yyvsp[(2) - (2)].nocrossref);
		  (yyval.nocrossref) = n;
		}
    break;

  case 203:
#line 783 "ldgram.y"
    {
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = (yyvsp[(1) - (3)].name);
		  n->next = (yyvsp[(3) - (3)].nocrossref);
		  (yyval.nocrossref) = n;
		}
    break;

  case 204:
#line 793 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 205:
#line 795 "ldgram.y"
    { ldlex_popstate (); (yyval.etree)=(yyvsp[(2) - (2)].etree);}
    break;

  case 206:
#line 800 "ldgram.y"
    { (yyval.etree) = exp_unop ('-', (yyvsp[(2) - (2)].etree)); }
    break;

  case 207:
#line 802 "ldgram.y"
    { (yyval.etree) = (yyvsp[(2) - (3)].etree); }
    break;

  case 208:
#line 804 "ldgram.y"
    { (yyval.etree) = exp_unop ((int) (yyvsp[(1) - (4)].integer),(yyvsp[(3) - (4)].etree)); }
    break;

  case 209:
#line 806 "ldgram.y"
    { (yyval.etree) = exp_unop ('!', (yyvsp[(2) - (2)].etree)); }
    break;

  case 210:
#line 808 "ldgram.y"
    { (yyval.etree) = (yyvsp[(2) - (2)].etree); }
    break;

  case 211:
#line 810 "ldgram.y"
    { (yyval.etree) = exp_unop ('~', (yyvsp[(2) - (2)].etree));}
    break;

  case 212:
#line 813 "ldgram.y"
    { (yyval.etree) = exp_binop ('*', (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 213:
#line 815 "ldgram.y"
    { (yyval.etree) = exp_binop ('/', (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 214:
#line 817 "ldgram.y"
    { (yyval.etree) = exp_binop ('%', (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 215:
#line 819 "ldgram.y"
    { (yyval.etree) = exp_binop ('+', (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 216:
#line 821 "ldgram.y"
    { (yyval.etree) = exp_binop ('-' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 217:
#line 823 "ldgram.y"
    { (yyval.etree) = exp_binop (LSHIFT , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 218:
#line 825 "ldgram.y"
    { (yyval.etree) = exp_binop (RSHIFT , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 219:
#line 827 "ldgram.y"
    { (yyval.etree) = exp_binop (EQ , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 220:
#line 829 "ldgram.y"
    { (yyval.etree) = exp_binop (NE , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 221:
#line 831 "ldgram.y"
    { (yyval.etree) = exp_binop (LE , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 222:
#line 833 "ldgram.y"
    { (yyval.etree) = exp_binop (GE , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 223:
#line 835 "ldgram.y"
    { (yyval.etree) = exp_binop ('<' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 224:
#line 837 "ldgram.y"
    { (yyval.etree) = exp_binop ('>' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 225:
#line 839 "ldgram.y"
    { (yyval.etree) = exp_binop ('&' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 226:
#line 841 "ldgram.y"
    { (yyval.etree) = exp_binop ('^' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 227:
#line 843 "ldgram.y"
    { (yyval.etree) = exp_binop ('|' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 228:
#line 845 "ldgram.y"
    { (yyval.etree) = exp_trinop ('?' , (yyvsp[(1) - (5)].etree), (yyvsp[(3) - (5)].etree), (yyvsp[(5) - (5)].etree)); }
    break;

  case 229:
#line 847 "ldgram.y"
    { (yyval.etree) = exp_binop (ANDAND , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 230:
#line 849 "ldgram.y"
    { (yyval.etree) = exp_binop (OROR , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 231:
#line 851 "ldgram.y"
    { (yyval.etree) = exp_nameop (DEFINED, (yyvsp[(3) - (4)].name)); }
    break;

  case 232:
#line 853 "ldgram.y"
    { (yyval.etree) = exp_bigintop ((yyvsp[(1) - (1)].bigint).integer, (yyvsp[(1) - (1)].bigint).str); }
    break;

  case 233:
#line 855 "ldgram.y"
    { (yyval.etree) = exp_nameop (SIZEOF_HEADERS,0); }
    break;

  case 234:
#line 858 "ldgram.y"
    { (yyval.etree) = exp_nameop (ALIGNOF,(yyvsp[(3) - (4)].name)); }
    break;

  case 235:
#line 860 "ldgram.y"
    { (yyval.etree) = exp_nameop (SIZEOF,(yyvsp[(3) - (4)].name)); }
    break;

  case 236:
#line 862 "ldgram.y"
    { (yyval.etree) = exp_nameop (ADDR,(yyvsp[(3) - (4)].name)); }
    break;

  case 237:
#line 864 "ldgram.y"
    { (yyval.etree) = exp_nameop (LOADADDR,(yyvsp[(3) - (4)].name)); }
    break;

  case 238:
#line 866 "ldgram.y"
    { (yyval.etree) = exp_nameop (CONSTANT,(yyvsp[(3) - (4)].name)); }
    break;

  case 239:
#line 868 "ldgram.y"
    { (yyval.etree) = exp_unop (ABSOLUTE, (yyvsp[(3) - (4)].etree)); }
    break;

  case 240:
#line 870 "ldgram.y"
    { (yyval.etree) = exp_unop (ALIGN_K,(yyvsp[(3) - (4)].etree)); }
    break;

  case 241:
#line 872 "ldgram.y"
    { (yyval.etree) = exp_binop (ALIGN_K,(yyvsp[(3) - (6)].etree),(yyvsp[(5) - (6)].etree)); }
    break;

  case 242:
#line 874 "ldgram.y"
    { (yyval.etree) = exp_binop (DATA_SEGMENT_ALIGN, (yyvsp[(3) - (6)].etree), (yyvsp[(5) - (6)].etree)); }
    break;

  case 243:
#line 876 "ldgram.y"
    { (yyval.etree) = exp_binop (DATA_SEGMENT_RELRO_END, (yyvsp[(5) - (6)].etree), (yyvsp[(3) - (6)].etree)); }
    break;

  case 244:
#line 878 "ldgram.y"
    { (yyval.etree) = exp_unop (DATA_SEGMENT_END, (yyvsp[(3) - (4)].etree)); }
    break;

  case 245:
#line 880 "ldgram.y"
    { /* The operands to the expression node are
			     placed in the opposite order from the way
			     in which they appear in the script as
			     that allows us to reuse more code in
			     fold_binary.  */
			  (yyval.etree) = exp_binop (SEGMENT_START,
					  (yyvsp[(5) - (6)].etree),
					  exp_nameop (NAME, (yyvsp[(3) - (6)].name))); }
    break;

  case 246:
#line 889 "ldgram.y"
    { (yyval.etree) = exp_unop (ALIGN_K,(yyvsp[(3) - (4)].etree)); }
    break;

  case 247:
#line 891 "ldgram.y"
    { (yyval.etree) = exp_nameop (NAME,(yyvsp[(1) - (1)].name)); }
    break;

  case 248:
#line 893 "ldgram.y"
    { (yyval.etree) = exp_binop (MAX_K, (yyvsp[(3) - (6)].etree), (yyvsp[(5) - (6)].etree) ); }
    break;

  case 249:
#line 895 "ldgram.y"
    { (yyval.etree) = exp_binop (MIN_K, (yyvsp[(3) - (6)].etree), (yyvsp[(5) - (6)].etree) ); }
    break;

  case 250:
#line 897 "ldgram.y"
    { (yyval.etree) = exp_assert ((yyvsp[(3) - (6)].etree), (yyvsp[(5) - (6)].name)); }
    break;

  case 251:
#line 899 "ldgram.y"
    { (yyval.etree) = exp_nameop (ORIGIN, (yyvsp[(3) - (4)].name)); }
    break;

  case 252:
#line 901 "ldgram.y"
    { (yyval.etree) = exp_nameop (LENGTH, (yyvsp[(3) - (4)].name)); }
    break;

  case 253:
#line 906 "ldgram.y"
    { (yyval.name) = (yyvsp[(3) - (3)].name); }
    break;

  case 254:
#line 907 "ldgram.y"
    { (yyval.name) = 0; }
    break;

  case 255:
#line 911 "ldgram.y"
    { (yyval.etree) = (yyvsp[(3) - (4)].etree); }
    break;

  case 256:
#line 912 "ldgram.y"
    { (yyval.etree) = 0; }
    break;

  case 257:
#line 916 "ldgram.y"
    { (yyval.etree) = (yyvsp[(3) - (4)].etree); }
    break;

  case 258:
#line 917 "ldgram.y"
    { (yyval.etree) = 0; }
    break;

  case 259:
#line 921 "ldgram.y"
    { (yyval.etree) = (yyvsp[(3) - (4)].etree); }
    break;

  case 260:
#line 922 "ldgram.y"
    { (yyval.etree) = 0; }
    break;

  case 261:
#line 926 "ldgram.y"
    { (yyval.token) = ONLY_IF_RO; }
    break;

  case 262:
#line 927 "ldgram.y"
    { (yyval.token) = ONLY_IF_RW; }
    break;

  case 263:
#line 928 "ldgram.y"
    { (yyval.token) = SPECIAL; }
    break;

  case 264:
#line 929 "ldgram.y"
    { (yyval.token) = 0; }
    break;

  case 265:
#line 932 "ldgram.y"
    { ldlex_expression(); }
    break;

  case 266:
#line 936 "ldgram.y"
    { ldlex_popstate (); ldlex_script (); }
    break;

  case 267:
#line 939 "ldgram.y"
    {
			  lang_enter_output_section_statement((yyvsp[(1) - (9)].name), (yyvsp[(3) - (9)].etree),
							      sectype,
							      (yyvsp[(5) - (9)].etree), (yyvsp[(6) - (9)].etree), (yyvsp[(4) - (9)].etree), (yyvsp[(8) - (9)].token));
			}
    break;

  case 268:
#line 945 "ldgram.y"
    { ldlex_popstate (); ldlex_expression (); }
    break;

  case 269:
#line 947 "ldgram.y"
    {
		  ldlex_popstate ();
		  lang_leave_output_section_statement ((yyvsp[(17) - (17)].fill), (yyvsp[(14) - (17)].name), (yyvsp[(16) - (17)].section_phdr), (yyvsp[(15) - (17)].name));
		}
    break;

  case 270:
#line 952 "ldgram.y"
    {}
    break;

  case 271:
#line 954 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 272:
#line 956 "ldgram.y"
    { ldlex_popstate (); ldlex_script (); }
    break;

  case 273:
#line 958 "ldgram.y"
    {
			  lang_enter_overlay ((yyvsp[(3) - (8)].etree), (yyvsp[(6) - (8)].etree));
			}
    break;

  case 274:
#line 963 "ldgram.y"
    { ldlex_popstate (); ldlex_expression (); }
    break;

  case 275:
#line 965 "ldgram.y"
    {
			  ldlex_popstate ();
			  lang_leave_overlay ((yyvsp[(5) - (16)].etree), (int) (yyvsp[(4) - (16)].integer),
					      (yyvsp[(16) - (16)].fill), (yyvsp[(13) - (16)].name), (yyvsp[(15) - (16)].section_phdr), (yyvsp[(14) - (16)].name));
			}
    break;

  case 277:
#line 975 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 278:
#line 977 "ldgram.y"
    {
		  ldlex_popstate ();
		  lang_add_assignment (exp_assop ('=', ".", (yyvsp[(3) - (3)].etree)));
		}
    break;

  case 280:
#line 983 "ldgram.y"
    { ldlex_script (); ldfile_open_command_file((yyvsp[(2) - (2)].name)); }
    break;

  case 281:
#line 985 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 282:
#line 989 "ldgram.y"
    { sectype = noload_section; }
    break;

  case 283:
#line 990 "ldgram.y"
    { sectype = noalloc_section; }
    break;

  case 284:
#line 991 "ldgram.y"
    { sectype = noalloc_section; }
    break;

  case 285:
#line 992 "ldgram.y"
    { sectype = noalloc_section; }
    break;

  case 286:
#line 993 "ldgram.y"
    { sectype = noalloc_section; }
    break;

  case 288:
#line 998 "ldgram.y"
    { sectype = normal_section; }
    break;

  case 289:
#line 999 "ldgram.y"
    { sectype = normal_section; }
    break;

  case 290:
#line 1003 "ldgram.y"
    { (yyval.etree) = (yyvsp[(1) - (3)].etree); }
    break;

  case 291:
#line 1004 "ldgram.y"
    { (yyval.etree) = (etree_type *)NULL;  }
    break;

  case 292:
#line 1009 "ldgram.y"
    { (yyval.etree) = (yyvsp[(3) - (6)].etree); }
    break;

  case 293:
#line 1011 "ldgram.y"
    { (yyval.etree) = (yyvsp[(3) - (10)].etree); }
    break;

  case 294:
#line 1015 "ldgram.y"
    { (yyval.etree) = (yyvsp[(1) - (2)].etree); }
    break;

  case 295:
#line 1016 "ldgram.y"
    { (yyval.etree) = (etree_type *) NULL;  }
    break;

  case 296:
#line 1021 "ldgram.y"
    { (yyval.integer) = 0; }
    break;

  case 297:
#line 1023 "ldgram.y"
    { (yyval.integer) = 1; }
    break;

  case 298:
#line 1028 "ldgram.y"
    { (yyval.name) = (yyvsp[(2) - (2)].name); }
    break;

  case 299:
#line 1029 "ldgram.y"
    { (yyval.name) = DEFAULT_MEMORY_REGION; }
    break;

  case 300:
#line 1034 "ldgram.y"
    {
		  (yyval.section_phdr) = NULL;
		}
    break;

  case 301:
#line 1038 "ldgram.y"
    {
		  struct lang_output_section_phdr_list *n;

		  n = ((struct lang_output_section_phdr_list *)
		       xmalloc (sizeof *n));
		  n->name = (yyvsp[(3) - (3)].name);
		  n->used = FALSE;
		  n->next = (yyvsp[(1) - (3)].section_phdr);
		  (yyval.section_phdr) = n;
		}
    break;

  case 303:
#line 1054 "ldgram.y"
    {
			  ldlex_script ();
			  lang_enter_overlay_section ((yyvsp[(2) - (2)].name));
			}
    break;

  case 304:
#line 1059 "ldgram.y"
    { ldlex_popstate (); ldlex_expression (); }
    break;

  case 305:
#line 1061 "ldgram.y"
    {
			  ldlex_popstate ();
			  lang_leave_overlay_section ((yyvsp[(9) - (9)].fill), (yyvsp[(8) - (9)].section_phdr));
			}
    break;

  case 310:
#line 1078 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 311:
#line 1079 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 312:
#line 1081 "ldgram.y"
    {
		  lang_new_phdr ((yyvsp[(1) - (6)].name), (yyvsp[(3) - (6)].etree), (yyvsp[(4) - (6)].phdr).filehdr, (yyvsp[(4) - (6)].phdr).phdrs, (yyvsp[(4) - (6)].phdr).at,
				 (yyvsp[(4) - (6)].phdr).flags);
		}
    break;

  case 313:
#line 1089 "ldgram.y"
    {
		  (yyval.etree) = (yyvsp[(1) - (1)].etree);

		  if ((yyvsp[(1) - (1)].etree)->type.node_class == etree_name
		      && (yyvsp[(1) - (1)].etree)->type.node_code == NAME)
		    {
		      const char *s;
		      unsigned int i;
		      static const char * const phdr_types[] =
			{
			  "PT_NULL", "PT_LOAD", "PT_DYNAMIC",
			  "PT_INTERP", "PT_NOTE", "PT_SHLIB",
			  "PT_PHDR", "PT_TLS"
			};

		      s = (yyvsp[(1) - (1)].etree)->name.name;
		      for (i = 0;
			   i < sizeof phdr_types / sizeof phdr_types[0];
			   i++)
			if (strcmp (s, phdr_types[i]) == 0)
			  {
			    (yyval.etree) = exp_intop (i);
			    break;
			  }
		      if (i == sizeof phdr_types / sizeof phdr_types[0])
			{
			  if (strcmp (s, "PT_GNU_EH_FRAME") == 0)
			    (yyval.etree) = exp_intop (0x6474e550);
			  else if (strcmp (s, "PT_GNU_STACK") == 0)
			    (yyval.etree) = exp_intop (0x6474e551);
			  else
			    {
			      einfo (_("\
%X%P:%S: unknown phdr type `%s' (try integer literal)\n"),
				     s);
			      (yyval.etree) = exp_intop (0);
			    }
			}
		    }
		}
    break;

  case 314:
#line 1133 "ldgram.y"
    {
		  memset (&(yyval.phdr), 0, sizeof (struct phdr_info));
		}
    break;

  case 315:
#line 1137 "ldgram.y"
    {
		  (yyval.phdr) = (yyvsp[(3) - (3)].phdr);
		  if (strcmp ((yyvsp[(1) - (3)].name), "FILEHDR") == 0 && (yyvsp[(2) - (3)].etree) == NULL)
		    (yyval.phdr).filehdr = TRUE;
		  else if (strcmp ((yyvsp[(1) - (3)].name), "PHDRS") == 0 && (yyvsp[(2) - (3)].etree) == NULL)
		    (yyval.phdr).phdrs = TRUE;
		  else if (strcmp ((yyvsp[(1) - (3)].name), "FLAGS") == 0 && (yyvsp[(2) - (3)].etree) != NULL)
		    (yyval.phdr).flags = (yyvsp[(2) - (3)].etree);
		  else
		    einfo (_("%X%P:%S: PHDRS syntax error at `%s'\n"), (yyvsp[(1) - (3)].name));
		}
    break;

  case 316:
#line 1149 "ldgram.y"
    {
		  (yyval.phdr) = (yyvsp[(5) - (5)].phdr);
		  (yyval.phdr).at = (yyvsp[(3) - (5)].etree);
		}
    break;

  case 317:
#line 1157 "ldgram.y"
    {
		  (yyval.etree) = NULL;
		}
    break;

  case 318:
#line 1161 "ldgram.y"
    {
		  (yyval.etree) = (yyvsp[(2) - (3)].etree);
		}
    break;

  case 319:
#line 1167 "ldgram.y"
    {
		  ldlex_version_file ();
		  PUSH_ERROR (_("dynamic list"));
		}
    break;

  case 320:
#line 1172 "ldgram.y"
    {
		  ldlex_popstate ();
		  POP_ERROR ();
		}
    break;

  case 324:
#line 1189 "ldgram.y"
    {
		  lang_append_dynamic_list ((yyvsp[(1) - (2)].versyms));
		}
    break;

  case 325:
#line 1197 "ldgram.y"
    {
		  ldlex_version_file ();
		  PUSH_ERROR (_("VERSION script"));
		}
    break;

  case 326:
#line 1202 "ldgram.y"
    {
		  ldlex_popstate ();
		  POP_ERROR ();
		}
    break;

  case 327:
#line 1211 "ldgram.y"
    {
		  ldlex_version_script ();
		}
    break;

  case 328:
#line 1215 "ldgram.y"
    {
		  ldlex_popstate ();
		}
    break;

  case 331:
#line 1227 "ldgram.y"
    {
		  lang_register_vers_node (NULL, (yyvsp[(2) - (4)].versnode), NULL);
		}
    break;

  case 332:
#line 1231 "ldgram.y"
    {
		  lang_register_vers_node ((yyvsp[(1) - (5)].name), (yyvsp[(3) - (5)].versnode), NULL);
		}
    break;

  case 333:
#line 1235 "ldgram.y"
    {
		  lang_register_vers_node ((yyvsp[(1) - (6)].name), (yyvsp[(3) - (6)].versnode), (yyvsp[(5) - (6)].deflist));
		}
    break;

  case 334:
#line 1242 "ldgram.y"
    {
		  (yyval.deflist) = lang_add_vers_depend (NULL, (yyvsp[(1) - (1)].name));
		}
    break;

  case 335:
#line 1246 "ldgram.y"
    {
		  (yyval.deflist) = lang_add_vers_depend ((yyvsp[(1) - (2)].deflist), (yyvsp[(2) - (2)].name));
		}
    break;

  case 336:
#line 1253 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node (NULL, NULL);
		}
    break;

  case 337:
#line 1257 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node ((yyvsp[(1) - (2)].versyms), NULL);
		}
    break;

  case 338:
#line 1261 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node ((yyvsp[(3) - (4)].versyms), NULL);
		}
    break;

  case 339:
#line 1265 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node (NULL, (yyvsp[(3) - (4)].versyms));
		}
    break;

  case 340:
#line 1269 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node ((yyvsp[(3) - (8)].versyms), (yyvsp[(7) - (8)].versyms));
		}
    break;

  case 341:
#line 1276 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, (yyvsp[(1) - (1)].name), ldgram_vers_current_lang, FALSE);
		}
    break;

  case 342:
#line 1280 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, (yyvsp[(1) - (1)].name), ldgram_vers_current_lang, TRUE);
		}
    break;

  case 343:
#line 1284 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[(1) - (3)].versyms), (yyvsp[(3) - (3)].name), ldgram_vers_current_lang, FALSE);
		}
    break;

  case 344:
#line 1288 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[(1) - (3)].versyms), (yyvsp[(3) - (3)].name), ldgram_vers_current_lang, TRUE);
		}
    break;

  case 345:
#line 1292 "ldgram.y"
    {
			  (yyval.name) = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = (yyvsp[(4) - (5)].name);
			}
    break;

  case 346:
#line 1297 "ldgram.y"
    {
			  struct bfd_elf_version_expr *pat;
			  for (pat = (yyvsp[(7) - (9)].versyms); pat->next != NULL; pat = pat->next);
			  pat->next = (yyvsp[(1) - (9)].versyms);
			  (yyval.versyms) = (yyvsp[(7) - (9)].versyms);
			  ldgram_vers_current_lang = (yyvsp[(6) - (9)].name);
			}
    break;

  case 347:
#line 1305 "ldgram.y"
    {
			  (yyval.name) = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = (yyvsp[(2) - (3)].name);
			}
    break;

  case 348:
#line 1310 "ldgram.y"
    {
			  (yyval.versyms) = (yyvsp[(5) - (7)].versyms);
			  ldgram_vers_current_lang = (yyvsp[(4) - (7)].name);
			}
    break;

  case 349:
#line 1315 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, "global", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 350:
#line 1319 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[(1) - (3)].versyms), "global", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 351:
#line 1323 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, "local", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 352:
#line 1327 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[(1) - (3)].versyms), "local", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 353:
#line 1331 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, "extern", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 354:
#line 1335 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[(1) - (3)].versyms), "extern", ldgram_vers_current_lang, FALSE);
		}
    break;


/* Line 1267 of yacc.c.  */
#line 4268 "ldgram.c"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


#line 1345 "ldgram.y"

void
yyerror(arg)
     const char *arg;
{
  if (ldfile_assumed_script)
    einfo (_("%P:%s: file format not recognized; treating as linker script\n"),
	   ldfile_input_filename);
  if (error_index > 0 && error_index < ERROR_NAME_MAX)
     einfo ("%P%F:%S: %s in %s\n", arg, error_names[error_index-1]);
  else
     einfo ("%P%F:%S: %s\n", arg);
}

@


1.1.20.1
log
@Generated files for binutils 2.19.
@
text
@a0 4306
/* A Bison parser, made by GNU Bison 2.1.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Written by Richard Stallman by simplifying the original so called
   ``semantic'' parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     INT = 258,
     NAME = 259,
     LNAME = 260,
     OREQ = 261,
     ANDEQ = 262,
     RSHIFTEQ = 263,
     LSHIFTEQ = 264,
     DIVEQ = 265,
     MULTEQ = 266,
     MINUSEQ = 267,
     PLUSEQ = 268,
     OROR = 269,
     ANDAND = 270,
     NE = 271,
     EQ = 272,
     GE = 273,
     LE = 274,
     RSHIFT = 275,
     LSHIFT = 276,
     UNARY = 277,
     END = 278,
     ALIGN_K = 279,
     BLOCK = 280,
     BIND = 281,
     QUAD = 282,
     SQUAD = 283,
     LONG = 284,
     SHORT = 285,
     BYTE = 286,
     SECTIONS = 287,
     PHDRS = 288,
     INSERT_K = 289,
     AFTER = 290,
     BEFORE = 291,
     DATA_SEGMENT_ALIGN = 292,
     DATA_SEGMENT_RELRO_END = 293,
     DATA_SEGMENT_END = 294,
     SORT_BY_NAME = 295,
     SORT_BY_ALIGNMENT = 296,
     SIZEOF_HEADERS = 297,
     OUTPUT_FORMAT = 298,
     FORCE_COMMON_ALLOCATION = 299,
     OUTPUT_ARCH = 300,
     INHIBIT_COMMON_ALLOCATION = 301,
     SEGMENT_START = 302,
     INCLUDE = 303,
     MEMORY = 304,
     NOLOAD = 305,
     DSECT = 306,
     COPY = 307,
     INFO = 308,
     OVERLAY = 309,
     DEFINED = 310,
     TARGET_K = 311,
     SEARCH_DIR = 312,
     MAP = 313,
     ENTRY = 314,
     NEXT = 315,
     SIZEOF = 316,
     ALIGNOF = 317,
     ADDR = 318,
     LOADADDR = 319,
     MAX_K = 320,
     MIN_K = 321,
     STARTUP = 322,
     HLL = 323,
     SYSLIB = 324,
     FLOAT = 325,
     NOFLOAT = 326,
     NOCROSSREFS = 327,
     ORIGIN = 328,
     FILL = 329,
     LENGTH = 330,
     CREATE_OBJECT_SYMBOLS = 331,
     INPUT = 332,
     GROUP = 333,
     OUTPUT = 334,
     CONSTRUCTORS = 335,
     ALIGNMOD = 336,
     AT = 337,
     SUBALIGN = 338,
     PROVIDE = 339,
     PROVIDE_HIDDEN = 340,
     AS_NEEDED = 341,
     CHIP = 342,
     LIST = 343,
     SECT = 344,
     ABSOLUTE = 345,
     LOAD = 346,
     NEWLINE = 347,
     ENDWORD = 348,
     ORDER = 349,
     NAMEWORD = 350,
     ASSERT_K = 351,
     FORMAT = 352,
     PUBLIC = 353,
     DEFSYMEND = 354,
     BASE = 355,
     ALIAS = 356,
     TRUNCATE = 357,
     REL = 358,
     INPUT_SCRIPT = 359,
     INPUT_MRI_SCRIPT = 360,
     INPUT_DEFSYM = 361,
     CASE = 362,
     EXTERN = 363,
     START = 364,
     VERS_TAG = 365,
     VERS_IDENTIFIER = 366,
     GLOBAL = 367,
     LOCAL = 368,
     VERSIONK = 369,
     INPUT_VERSION_SCRIPT = 370,
     KEEP = 371,
     ONLY_IF_RO = 372,
     ONLY_IF_RW = 373,
     SPECIAL = 374,
     EXCLUDE_FILE = 375,
     CONSTANT = 376,
     INPUT_DYNAMIC_LIST = 377
   };
#endif
/* Tokens.  */
#define INT 258
#define NAME 259
#define LNAME 260
#define OREQ 261
#define ANDEQ 262
#define RSHIFTEQ 263
#define LSHIFTEQ 264
#define DIVEQ 265
#define MULTEQ 266
#define MINUSEQ 267
#define PLUSEQ 268
#define OROR 269
#define ANDAND 270
#define NE 271
#define EQ 272
#define GE 273
#define LE 274
#define RSHIFT 275
#define LSHIFT 276
#define UNARY 277
#define END 278
#define ALIGN_K 279
#define BLOCK 280
#define BIND 281
#define QUAD 282
#define SQUAD 283
#define LONG 284
#define SHORT 285
#define BYTE 286
#define SECTIONS 287
#define PHDRS 288
#define INSERT_K 289
#define AFTER 290
#define BEFORE 291
#define DATA_SEGMENT_ALIGN 292
#define DATA_SEGMENT_RELRO_END 293
#define DATA_SEGMENT_END 294
#define SORT_BY_NAME 295
#define SORT_BY_ALIGNMENT 296
#define SIZEOF_HEADERS 297
#define OUTPUT_FORMAT 298
#define FORCE_COMMON_ALLOCATION 299
#define OUTPUT_ARCH 300
#define INHIBIT_COMMON_ALLOCATION 301
#define SEGMENT_START 302
#define INCLUDE 303
#define MEMORY 304
#define NOLOAD 305
#define DSECT 306
#define COPY 307
#define INFO 308
#define OVERLAY 309
#define DEFINED 310
#define TARGET_K 311
#define SEARCH_DIR 312
#define MAP 313
#define ENTRY 314
#define NEXT 315
#define SIZEOF 316
#define ALIGNOF 317
#define ADDR 318
#define LOADADDR 319
#define MAX_K 320
#define MIN_K 321
#define STARTUP 322
#define HLL 323
#define SYSLIB 324
#define FLOAT 325
#define NOFLOAT 326
#define NOCROSSREFS 327
#define ORIGIN 328
#define FILL 329
#define LENGTH 330
#define CREATE_OBJECT_SYMBOLS 331
#define INPUT 332
#define GROUP 333
#define OUTPUT 334
#define CONSTRUCTORS 335
#define ALIGNMOD 336
#define AT 337
#define SUBALIGN 338
#define PROVIDE 339
#define PROVIDE_HIDDEN 340
#define AS_NEEDED 341
#define CHIP 342
#define LIST 343
#define SECT 344
#define ABSOLUTE 345
#define LOAD 346
#define NEWLINE 347
#define ENDWORD 348
#define ORDER 349
#define NAMEWORD 350
#define ASSERT_K 351
#define FORMAT 352
#define PUBLIC 353
#define DEFSYMEND 354
#define BASE 355
#define ALIAS 356
#define TRUNCATE 357
#define REL 358
#define INPUT_SCRIPT 359
#define INPUT_MRI_SCRIPT 360
#define INPUT_DEFSYM 361
#define CASE 362
#define EXTERN 363
#define START 364
#define VERS_TAG 365
#define VERS_IDENTIFIER 366
#define GLOBAL 367
#define LOCAL 368
#define VERSIONK 369
#define INPUT_VERSION_SCRIPT 370
#define KEEP 371
#define ONLY_IF_RO 372
#define ONLY_IF_RW 373
#define SPECIAL 374
#define EXCLUDE_FILE 375
#define CONSTANT 376
#define INPUT_DYNAMIC_LIST 377




/* Copy the first part of user declarations.  */
#line 23 "ldgram.y"

/*

 */

#define DONTDECLARE_MALLOC

#include "sysdep.h"
#include "bfd.h"
#include "bfdlink.h"
#include "ld.h"
#include "ldexp.h"
#include "ldver.h"
#include "ldlang.h"
#include "ldfile.h"
#include "ldemul.h"
#include "ldmisc.h"
#include "ldmain.h"
#include "mri.h"
#include "ldctor.h"
#include "ldlex.h"

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

static enum section_type sectype;
static lang_memory_region_type *region;

bfd_boolean ldgram_had_keep = FALSE;
char *ldgram_vers_current_lang = NULL;

#define ERROR_NAME_MAX 20
static char *error_names[ERROR_NAME_MAX];
static int error_index;
#define PUSH_ERROR(x) if (error_index < ERROR_NAME_MAX) error_names[error_index] = x; error_index++;
#define POP_ERROR()   error_index--;


/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
#line 61 "ldgram.y"
typedef union YYSTYPE {
  bfd_vma integer;
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      bfd_boolean filehdr;
      bfd_boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
} YYSTYPE;
/* Line 196 of yacc.c.  */
#line 397 "ldgram.c"
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 219 of yacc.c.  */
#line 409 "ldgram.c"

#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T) && (defined (__STDC__) || defined (__cplusplus))
# include <stddef.h> /* INFRINGES ON USER NAME SPACE */
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

#if ! defined (yyoverflow) || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if defined (__STDC__) || defined (__cplusplus)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     define YYINCLUDED_STDLIB_H
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2005 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM ((YYSIZE_T) -1)
#  endif
#  ifdef __cplusplus
extern "C" {
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if (! defined (malloc) && ! defined (YYINCLUDED_STDLIB_H) \
	&& (defined (__STDC__) || defined (__cplusplus)))
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if (! defined (free) && ! defined (YYINCLUDED_STDLIB_H) \
	&& (defined (__STDC__) || defined (__cplusplus)))
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifdef __cplusplus
}
#  endif
# endif
#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short int yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short int) + sizeof (YYSTYPE))			\
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined (__GNUC__) && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif

#if defined (__STDC__) || defined (__cplusplus)
   typedef signed char yysigned_char;
#else
   typedef short int yysigned_char;
#endif

/* YYFINAL -- State number of the termination state. */
#define YYFINAL  17
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1766

/* YYNTOKENS -- Number of terminals. */
#define YYNTOKENS  146
/* YYNNTS -- Number of nonterminals. */
#define YYNNTS  126
/* YYNRULES -- Number of rules. */
#define YYNRULES  355
/* YYNRULES -- Number of states. */
#define YYNSTATES  757

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   377

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   144,     2,     2,     2,    34,    21,     2,
      37,   141,    32,    30,   139,    31,     2,    33,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    16,   140,
      24,     6,    25,    15,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   142,     2,   143,    20,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    56,    19,    57,   145,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     7,     8,     9,    10,    11,    12,    13,    14,    17,
      18,    22,    23,    26,    27,    28,    29,    35,    36,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short int yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    15,    18,    20,    21,
      26,    27,    30,    34,    35,    38,    43,    45,    47,    50,
      52,    57,    62,    66,    69,    74,    78,    83,    88,    93,
      98,   103,   106,   109,   112,   117,   122,   125,   128,   131,
     134,   135,   141,   144,   145,   149,   152,   153,   155,   159,
     161,   165,   166,   168,   172,   173,   176,   178,   181,   185,
     186,   189,   192,   193,   195,   197,   199,   201,   203,   205,
     207,   209,   211,   213,   218,   223,   228,   233,   242,   247,
     249,   251,   256,   257,   263,   268,   269,   275,   280,   285,
     289,   293,   295,   299,   302,   304,   308,   311,   312,   318,
     319,   327,   328,   335,   340,   343,   346,   347,   352,   355,
     356,   364,   366,   368,   370,   372,   378,   383,   388,   396,
     404,   412,   420,   429,   432,   434,   438,   440,   442,   446,
     451,   453,   454,   460,   463,   465,   467,   469,   474,   476,
     481,   486,   487,   496,   497,   503,   506,   508,   509,   511,
     513,   515,   517,   519,   521,   523,   526,   527,   529,   531,
     533,   535,   537,   539,   541,   543,   545,   547,   551,   555,
     562,   569,   571,   572,   577,   579,   580,   584,   586,   587,
     595,   596,   602,   606,   610,   611,   615,   617,   620,   622,
     625,   630,   635,   639,   643,   645,   650,   654,   655,   657,
     659,   660,   663,   667,   668,   671,   674,   678,   683,   686,
     689,   692,   696,   700,   704,   708,   712,   716,   720,   724,
     728,   732,   736,   740,   744,   748,   752,   756,   762,   766,
     770,   775,   777,   779,   784,   789,   794,   799,   804,   809,
     814,   821,   828,   835,   840,   847,   852,   854,   861,   868,
     875,   880,   885,   889,   890,   895,   896,   901,   902,   907,
     908,   910,   912,   914,   915,   916,   917,   918,   919,   920,
     940,   941,   942,   943,   944,   945,   964,   965,   966,   974,
     975,   981,   983,   985,   987,   989,   991,   995,   996,   999,
    1003,  1006,  1013,  1024,  1027,  1029,  1030,  1032,  1035,  1036,
    1037,  1041,  1042,  1043,  1044,  1045,  1057,  1062,  1063,  1066,
    1067,  1068,  1075,  1077,  1078,  1082,  1088,  1089,  1093,  1094,
    1097,  1099,  1102,  1107,  1110,  1111,  1114,  1115,  1121,  1123,
    1126,  1131,  1137,  1144,  1146,  1149,  1150,  1153,  1158,  1163,
    1172,  1174,  1176,  1180,  1184,  1185,  1195,  1196,  1204,  1206,
    1210,  1212,  1216,  1218,  1222,  1223
};

/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const short int yyrhs[] =
{
     147,     0,    -1,   120,   163,    -1,   121,   151,    -1,   131,
     260,    -1,   138,   255,    -1,   122,   149,    -1,     4,    -1,
      -1,   150,     4,     6,   216,    -1,    -1,   152,   153,    -1,
     153,   154,   108,    -1,    -1,   103,   216,    -1,   103,   216,
     139,   216,    -1,     4,    -1,   104,    -1,   110,   156,    -1,
     109,    -1,   114,     4,     6,   216,    -1,   114,     4,   139,
     216,    -1,   114,     4,   216,    -1,   113,     4,    -1,   105,
       4,   139,   216,    -1,   105,     4,   216,    -1,   105,     4,
       6,   216,    -1,    38,     4,     6,   216,    -1,    38,     4,
     139,   216,    -1,    97,     4,     6,   216,    -1,    97,     4,
     139,   216,    -1,   106,   158,    -1,   107,   157,    -1,   111,
       4,    -1,   117,     4,   139,     4,    -1,   117,     4,   139,
       3,    -1,   116,   216,    -1,   118,     3,    -1,   123,   159,
      -1,   124,   160,    -1,    -1,    64,   148,   155,   153,    36,
      -1,   125,     4,    -1,    -1,   156,   139,     4,    -1,   156,
       4,    -1,    -1,     4,    -1,   157,   139,     4,    -1,     4,
      -1,   158,   139,     4,    -1,    -1,     4,    -1,   159,   139,
       4,    -1,    -1,   161,   162,    -1,     4,    -1,   162,     4,
      -1,   162,   139,     4,    -1,    -1,   164,   165,    -1,   165,
     166,    -1,    -1,   196,    -1,   173,    -1,   247,    -1,   207,
      -1,   208,    -1,   210,    -1,   212,    -1,   175,    -1,   262,
      -1,   140,    -1,    72,    37,     4,   141,    -1,    73,    37,
     148,   141,    -1,    95,    37,   148,   141,    -1,    59,    37,
       4,   141,    -1,    59,    37,     4,   139,     4,   139,     4,
     141,    -1,    61,    37,     4,   141,    -1,    60,    -1,    62,
      -1,    93,    37,   169,   141,    -1,    -1,    94,   167,    37,
     169,   141,    -1,    74,    37,   148,   141,    -1,    -1,    64,
     148,   168,   165,    36,    -1,    88,    37,   213,   141,    -1,
     124,    37,   160,   141,    -1,    48,    49,     4,    -1,    48,
      50,     4,    -1,     4,    -1,   169,   139,     4,    -1,   169,
       4,    -1,     5,    -1,   169,   139,     5,    -1,   169,     5,
      -1,    -1,   102,    37,   170,   169,   141,    -1,    -1,   169,
     139,   102,    37,   171,   169,   141,    -1,    -1,   169,   102,
      37,   172,   169,   141,    -1,    46,    56,   174,    57,    -1,
     174,   222,    -1,   174,   175,    -1,    -1,    75,    37,     4,
     141,    -1,   194,   193,    -1,    -1,   112,   176,    37,   216,
     139,     4,   141,    -1,     4,    -1,    32,    -1,    15,    -1,
     177,    -1,   136,    37,   179,   141,   177,    -1,    54,    37,
     177,   141,    -1,    55,    37,   177,   141,    -1,    54,    37,
      55,    37,   177,   141,   141,    -1,    54,    37,    54,    37,
     177,   141,   141,    -1,    55,    37,    54,    37,   177,   141,
     141,    -1,    55,    37,    55,    37,   177,   141,   141,    -1,
      54,    37,   136,    37,   179,   141,   177,   141,    -1,   179,
     177,    -1,   177,    -1,   180,   195,   178,    -1,   178,    -1,
       4,    -1,   142,   180,   143,    -1,   178,    37,   180,   141,
      -1,   181,    -1,    -1,   132,    37,   183,   181,   141,    -1,
     194,   193,    -1,    92,    -1,   140,    -1,    96,    -1,    54,
      37,    96,   141,    -1,   182,    -1,   189,    37,   214,   141,
      -1,    90,    37,   190,   141,    -1,    -1,   112,   185,    37,
     216,   139,     4,   141,   193,    -1,    -1,    64,   148,   186,
     188,    36,    -1,   187,   184,    -1,   184,    -1,    -1,   187,
      -1,    41,    -1,    42,    -1,    43,    -1,    44,    -1,    45,
      -1,   214,    -1,     6,   190,    -1,    -1,    14,    -1,    13,
      -1,    12,    -1,    11,    -1,    10,    -1,     9,    -1,     8,
      -1,     7,    -1,   140,    -1,   139,    -1,     4,     6,   214,
      -1,     4,   192,   214,    -1,   100,    37,     4,     6,   214,
     141,    -1,   101,    37,     4,     6,   214,   141,    -1,   139,
      -1,    -1,    65,    56,   197,    57,    -1,   198,    -1,    -1,
     198,   195,   199,    -1,   199,    -1,    -1,     4,   200,   204,
      16,   202,   195,   203,    -1,    -1,    64,   148,   201,   197,
      36,    -1,    89,     6,   214,    -1,    91,     6,   214,    -1,
      -1,    37,   205,   141,    -1,   206,    -1,   205,   206,    -1,
       4,    -1,   144,     4,    -1,    83,    37,   148,   141,    -1,
      84,    37,   209,   141,    -1,    84,    37,   141,    -1,   209,
     195,   148,    -1,   148,    -1,    85,    37,   211,   141,    -1,
     211,   195,   148,    -1,    -1,    86,    -1,    87,    -1,    -1,
       4,   213,    -1,     4,   139,   213,    -1,    -1,   215,   216,
      -1,    31,   216,    -1,    37,   216,   141,    -1,    76,    37,
     216,   141,    -1,   144,   216,    -1,    30,   216,    -1,   145,
     216,    -1,   216,    32,   216,    -1,   216,    33,   216,    -1,
     216,    34,   216,    -1,   216,    30,   216,    -1,   216,    31,
     216,    -1,   216,    29,   216,    -1,   216,    28,   216,    -1,
     216,    23,   216,    -1,   216,    22,   216,    -1,   216,    27,
     216,    -1,   216,    26,   216,    -1,   216,    24,   216,    -1,
     216,    25,   216,    -1,   216,    21,   216,    -1,   216,    20,
     216,    -1,   216,    19,   216,    -1,   216,    15,   216,    16,
     216,    -1,   216,    18,   216,    -1,   216,    17,   216,    -1,
      71,    37,     4,   141,    -1,     3,    -1,    58,    -1,    78,
      37,     4,   141,    -1,    77,    37,     4,   141,    -1,    79,
      37,     4,   141,    -1,    80,    37,     4,   141,    -1,   137,
      37,     4,   141,    -1,   106,    37,   216,   141,    -1,    38,
      37,   216,   141,    -1,    38,    37,   216,   139,   216,   141,
      -1,    51,    37,   216,   139,   216,   141,    -1,    52,    37,
     216,   139,   216,   141,    -1,    53,    37,   216,   141,    -1,
      63,    37,     4,   139,   216,   141,    -1,    39,    37,   216,
     141,    -1,     4,    -1,    81,    37,   216,   139,   216,   141,
      -1,    82,    37,   216,   139,   216,   141,    -1,   112,    37,
     216,   139,     4,   141,    -1,    89,    37,     4,   141,    -1,
      91,    37,     4,   141,    -1,    98,    25,     4,    -1,    -1,
      98,    37,   216,   141,    -1,    -1,    38,    37,   216,   141,
      -1,    -1,    99,    37,   216,   141,    -1,    -1,   133,    -1,
     134,    -1,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       4,   223,   238,   218,   219,   220,   224,   221,    56,   225,
     188,    57,   226,   241,   217,   242,   191,   227,   195,    -1,
      -1,    -1,    -1,    -1,    -1,    70,   228,   239,   240,   218,
     220,   229,    56,   230,   243,    57,   231,   241,   217,   242,
     191,   232,   195,    -1,    -1,    -1,    94,   233,   238,   234,
      56,   174,    57,    -1,    -1,    64,   148,   235,   174,    36,
      -1,    66,    -1,    67,    -1,    68,    -1,    69,    -1,    70,
      -1,    37,   236,   141,    -1,    -1,    37,   141,    -1,   216,
     237,    16,    -1,   237,    16,    -1,    40,    37,   216,   141,
     237,    16,    -1,    40,    37,   216,   141,    39,    37,   216,
     141,   237,    16,    -1,   216,    16,    -1,    16,    -1,    -1,
      88,    -1,    25,     4,    -1,    -1,    -1,   242,    16,     4,
      -1,    -1,    -1,    -1,    -1,   243,     4,   244,    56,   188,
      57,   245,   242,   191,   246,   195,    -1,    47,    56,   248,
      57,    -1,    -1,   248,   249,    -1,    -1,    -1,     4,   250,
     252,   253,   251,   140,    -1,   216,    -1,    -1,     4,   254,
     253,    -1,    98,    37,   216,   141,   253,    -1,    -1,    37,
     216,   141,    -1,    -1,   256,   257,    -1,   258,    -1,   257,
     258,    -1,    56,   259,    57,   140,    -1,   268,   140,    -1,
      -1,   261,   264,    -1,    -1,   263,   130,    56,   264,    57,
      -1,   265,    -1,   264,   265,    -1,    56,   267,    57,   140,
      -1,   126,    56,   267,    57,   140,    -1,   126,    56,   267,
      57,   266,   140,    -1,   126,    -1,   266,   126,    -1,    -1,
     268,   140,    -1,   128,    16,   268,   140,    -1,   129,    16,
     268,   140,    -1,   128,    16,   268,   140,   129,    16,   268,
     140,    -1,   127,    -1,     4,    -1,   268,   140,   127,    -1,
     268,   140,     4,    -1,    -1,   268,   140,   124,     4,    56,
     269,   268,   271,    57,    -1,    -1,   124,     4,    56,   270,
     268,   271,    57,    -1,   128,    -1,   268,   140,   128,    -1,
     129,    -1,   268,   140,   129,    -1,   124,    -1,   268,   140,
     124,    -1,    -1,   140,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short int yyrline[] =
{
       0,   160,   160,   161,   162,   163,   164,   168,   172,   172,
     182,   182,   195,   196,   200,   201,   202,   205,   208,   209,
     210,   212,   214,   216,   218,   220,   222,   224,   226,   228,
     230,   232,   233,   234,   236,   238,   240,   242,   244,   245,
     247,   246,   250,   252,   256,   257,   258,   262,   264,   268,
     270,   275,   276,   277,   282,   282,   287,   289,   291,   296,
     296,   302,   303,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   320,   322,   324,   327,   329,   331,
     333,   335,   337,   336,   340,   343,   342,   346,   350,   351,
     353,   358,   361,   364,   367,   370,   373,   377,   376,   381,
     380,   385,   384,   391,   395,   396,   397,   401,   403,   404,
     404,   412,   416,   420,   427,   433,   439,   445,   451,   457,
     463,   469,   475,   484,   493,   504,   513,   524,   532,   536,
     543,   545,   544,   551,   552,   556,   557,   562,   567,   568,
     573,   577,   577,   581,   580,   587,   588,   591,   593,   597,
     599,   601,   603,   605,   610,   617,   619,   623,   625,   627,
     629,   631,   633,   635,   637,   642,   642,   647,   651,   659,
     663,   671,   671,   675,   678,   678,   681,   682,   687,   686,
     692,   691,   698,   706,   714,   715,   719,   720,   724,   726,
     731,   736,   737,   742,   744,   750,   752,   754,   758,   760,
     766,   769,   778,   789,   789,   795,   797,   799,   801,   803,
     805,   808,   810,   812,   814,   816,   818,   820,   822,   824,
     826,   828,   830,   832,   834,   836,   838,   840,   842,   844,
     846,   848,   850,   853,   855,   857,   859,   861,   863,   865,
     867,   869,   871,   873,   875,   884,   886,   888,   890,   892,
     894,   896,   902,   903,   907,   908,   912,   913,   917,   918,
     922,   923,   924,   925,   928,   932,   935,   941,   943,   928,
     950,   952,   954,   959,   961,   949,   971,   973,   971,   979,
     978,   985,   986,   987,   988,   989,   993,   994,   995,   999,
    1000,  1005,  1006,  1011,  1012,  1017,  1018,  1023,  1025,  1030,
    1033,  1046,  1050,  1055,  1057,  1048,  1065,  1068,  1070,  1074,
    1075,  1074,  1084,  1129,  1132,  1144,  1153,  1156,  1163,  1163,
    1175,  1176,  1180,  1184,  1193,  1193,  1207,  1207,  1217,  1218,
    1222,  1226,  1230,  1237,  1241,  1249,  1252,  1256,  1260,  1264,
    1271,  1275,  1279,  1283,  1288,  1287,  1301,  1300,  1310,  1314,
    1318,  1322,  1326,  1330,  1336,  1338
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "INT", "NAME", "LNAME", "'='", "OREQ",
  "ANDEQ", "RSHIFTEQ", "LSHIFTEQ", "DIVEQ", "MULTEQ", "MINUSEQ", "PLUSEQ",
  "'?'", "':'", "OROR", "ANDAND", "'|'", "'^'", "'&'", "NE", "EQ", "'<'",
  "'>'", "GE", "LE", "RSHIFT", "LSHIFT", "'+'", "'-'", "'*'", "'/'", "'%'",
  "UNARY", "END", "'('", "ALIGN_K", "BLOCK", "BIND", "QUAD", "SQUAD",
  "LONG", "SHORT", "BYTE", "SECTIONS", "PHDRS", "INSERT_K", "AFTER",
  "BEFORE", "DATA_SEGMENT_ALIGN", "DATA_SEGMENT_RELRO_END",
  "DATA_SEGMENT_END", "SORT_BY_NAME", "SORT_BY_ALIGNMENT", "'{'", "'}'",
  "SIZEOF_HEADERS", "OUTPUT_FORMAT", "FORCE_COMMON_ALLOCATION",
  "OUTPUT_ARCH", "INHIBIT_COMMON_ALLOCATION", "SEGMENT_START", "INCLUDE",
  "MEMORY", "NOLOAD", "DSECT", "COPY", "INFO", "OVERLAY", "DEFINED",
  "TARGET_K", "SEARCH_DIR", "MAP", "ENTRY", "NEXT", "SIZEOF", "ALIGNOF",
  "ADDR", "LOADADDR", "MAX_K", "MIN_K", "STARTUP", "HLL", "SYSLIB",
  "FLOAT", "NOFLOAT", "NOCROSSREFS", "ORIGIN", "FILL", "LENGTH",
  "CREATE_OBJECT_SYMBOLS", "INPUT", "GROUP", "OUTPUT", "CONSTRUCTORS",
  "ALIGNMOD", "AT", "SUBALIGN", "PROVIDE", "PROVIDE_HIDDEN", "AS_NEEDED",
  "CHIP", "LIST", "SECT", "ABSOLUTE", "LOAD", "NEWLINE", "ENDWORD",
  "ORDER", "NAMEWORD", "ASSERT_K", "FORMAT", "PUBLIC", "DEFSYMEND", "BASE",
  "ALIAS", "TRUNCATE", "REL", "INPUT_SCRIPT", "INPUT_MRI_SCRIPT",
  "INPUT_DEFSYM", "CASE", "EXTERN", "START", "VERS_TAG", "VERS_IDENTIFIER",
  "GLOBAL", "LOCAL", "VERSIONK", "INPUT_VERSION_SCRIPT", "KEEP",
  "ONLY_IF_RO", "ONLY_IF_RW", "SPECIAL", "EXCLUDE_FILE", "CONSTANT",
  "INPUT_DYNAMIC_LIST", "','", "';'", "')'", "'['", "']'", "'!'", "'~'",
  "$accept", "file", "filename", "defsym_expr", "@@1", "mri_script_file",
  "@@2", "mri_script_lines", "mri_script_command", "@@3", "ordernamelist",
  "mri_load_name_list", "mri_abs_name_list", "casesymlist",
  "extern_name_list", "@@4", "extern_name_list_body", "script_file", "@@5",
  "ifile_list", "ifile_p1", "@@6", "@@7", "input_list", "@@8", "@@9", "@@10",
  "sections", "sec_or_group_p1", "statement_anywhere", "@@11",
  "wildcard_name", "wildcard_spec", "exclude_name_list", "file_NAME_list",
  "input_section_spec_no_keep", "input_section_spec", "@@12", "statement",
  "@@13", "@@14", "statement_list", "statement_list_opt", "length",
  "fill_exp", "fill_opt", "assign_op", "end", "assignment", "opt_comma",
  "memory", "memory_spec_list_opt", "memory_spec_list", "memory_spec",
  "@@15", "@@16", "origin_spec", "length_spec", "attributes_opt",
  "attributes_list", "attributes_string", "startup", "high_level_library",
  "high_level_library_NAME_list", "low_level_library",
  "low_level_library_NAME_list", "floating_point_support",
  "nocrossref_list", "mustbe_exp", "@@17", "exp", "memspec_at_opt",
  "opt_at", "opt_align", "opt_subalign", "sect_constraint", "section",
  "@@18", "@@19", "@@20", "@@21", "@@22", "@@23", "@@24", "@@25", "@@26", "@@27",
  "@@28", "@@29", "@@30", "type", "atype", "opt_exp_with_type",
  "opt_exp_without_type", "opt_nocrossrefs", "memspec_opt", "phdr_opt",
  "overlay_section", "@@31", "@@32", "@@33", "phdrs", "phdr_list", "phdr",
  "@@34", "@@35", "phdr_type", "phdr_qualifiers", "phdr_val",
  "dynamic_list_file", "@@36", "dynamic_list_nodes", "dynamic_list_node",
  "dynamic_list_tag", "version_script_file", "@@37", "version", "@@38",
  "vers_nodes", "vers_node", "verdep", "vers_tag", "vers_defns", "@@39",
  "@@40", "opt_semicolon", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const unsigned short int yytoknum[] =
{
       0,   256,   257,   258,   259,   260,    61,   261,   262,   263,
     264,   265,   266,   267,   268,    63,    58,   269,   270,   124,
      94,    38,   271,   272,    60,    62,   273,   274,   275,   276,
      43,    45,    42,    47,    37,   277,   278,    40,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   123,   125,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,    44,
      59,    41,    91,    93,    33,   126
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned short int yyr1[] =
{
       0,   146,   147,   147,   147,   147,   147,   148,   150,   149,
     152,   151,   153,   153,   154,   154,   154,   154,   154,   154,
     154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
     154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
     155,   154,   154,   154,   156,   156,   156,   157,   157,   158,
     158,   159,   159,   159,   161,   160,   162,   162,   162,   164,
     163,   165,   165,   166,   166,   166,   166,   166,   166,   166,
     166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
     166,   166,   167,   166,   166,   168,   166,   166,   166,   166,
     166,   169,   169,   169,   169,   169,   169,   170,   169,   171,
     169,   172,   169,   173,   174,   174,   174,   175,   175,   176,
     175,   177,   177,   177,   178,   178,   178,   178,   178,   178,
     178,   178,   178,   179,   179,   180,   180,   181,   181,   181,
     182,   183,   182,   184,   184,   184,   184,   184,   184,   184,
     184,   185,   184,   186,   184,   187,   187,   188,   188,   189,
     189,   189,   189,   189,   190,   191,   191,   192,   192,   192,
     192,   192,   192,   192,   192,   193,   193,   194,   194,   194,
     194,   195,   195,   196,   197,   197,   198,   198,   200,   199,
     201,   199,   202,   203,   204,   204,   205,   205,   206,   206,
     207,   208,   208,   209,   209,   210,   211,   211,   212,   212,
     213,   213,   213,   215,   214,   216,   216,   216,   216,   216,
     216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   217,   217,   218,   218,   219,   219,   220,   220,
     221,   221,   221,   221,   223,   224,   225,   226,   227,   222,
     228,   229,   230,   231,   232,   222,   233,   234,   222,   235,
     222,   236,   236,   236,   236,   236,   237,   237,   237,   238,
     238,   238,   238,   239,   239,   240,   240,   241,   241,   242,
     242,   243,   244,   245,   246,   243,   247,   248,   248,   250,
     251,   249,   252,   253,   253,   253,   254,   254,   256,   255,
     257,   257,   258,   259,   261,   260,   263,   262,   264,   264,
     265,   265,   265,   266,   266,   267,   267,   267,   267,   267,
     268,   268,   268,   268,   269,   268,   270,   268,   268,   268,
     268,   268,   268,   268,   271,   271
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     2,     2,     2,     2,     2,     1,     0,     4,
       0,     2,     3,     0,     2,     4,     1,     1,     2,     1,
       4,     4,     3,     2,     4,     3,     4,     4,     4,     4,
       4,     2,     2,     2,     4,     4,     2,     2,     2,     2,
       0,     5,     2,     0,     3,     2,     0,     1,     3,     1,
       3,     0,     1,     3,     0,     2,     1,     2,     3,     0,
       2,     2,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     4,     4,     4,     8,     4,     1,
       1,     4,     0,     5,     4,     0,     5,     4,     4,     3,
       3,     1,     3,     2,     1,     3,     2,     0,     5,     0,
       7,     0,     6,     4,     2,     2,     0,     4,     2,     0,
       7,     1,     1,     1,     1,     5,     4,     4,     7,     7,
       7,     7,     8,     2,     1,     3,     1,     1,     3,     4,
       1,     0,     5,     2,     1,     1,     1,     4,     1,     4,
       4,     0,     8,     0,     5,     2,     1,     0,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     3,     6,
       6,     1,     0,     4,     1,     0,     3,     1,     0,     7,
       0,     5,     3,     3,     0,     3,     1,     2,     1,     2,
       4,     4,     3,     3,     1,     4,     3,     0,     1,     1,
       0,     2,     3,     0,     2,     2,     3,     4,     2,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     5,     3,     3,
       4,     1,     1,     4,     4,     4,     4,     4,     4,     4,
       6,     6,     6,     4,     6,     4,     1,     6,     6,     6,
       4,     4,     3,     0,     4,     0,     4,     0,     4,     0,
       1,     1,     1,     0,     0,     0,     0,     0,     0,    19,
       0,     0,     0,     0,     0,    18,     0,     0,     7,     0,
       5,     1,     1,     1,     1,     1,     3,     0,     2,     3,
       2,     6,    10,     2,     1,     0,     1,     2,     0,     0,
       3,     0,     0,     0,     0,    11,     4,     0,     2,     0,
       0,     6,     1,     0,     3,     5,     0,     3,     0,     2,
       1,     2,     4,     2,     0,     2,     0,     5,     1,     2,
       4,     5,     6,     1,     2,     0,     2,     4,     4,     8,
       1,     1,     3,     3,     0,     9,     0,     7,     1,     3,
       1,     3,     1,     3,     0,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const unsigned short int yydefact[] =
{
       0,    59,    10,     8,   324,   318,     0,     2,    62,     3,
      13,     6,     0,     4,     0,     5,     0,     1,    60,    11,
       0,   335,     0,   325,   328,     0,   319,   320,     0,     0,
       0,     0,     0,    79,     0,    80,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   198,   199,     0,     0,    82,
       0,     0,     0,   109,     0,    72,    61,    64,    70,     0,
      63,    66,    67,    68,    69,    65,    71,     0,    16,     0,
       0,     0,     0,    17,     0,     0,     0,    19,    46,     0,
       0,     0,     0,     0,     0,    51,    54,     0,     0,     0,
     341,   352,   340,   348,   350,     0,     0,   335,   329,   348,
     350,     0,     0,   321,   203,   164,   163,   162,   161,   160,
     159,   158,   157,   203,   106,   307,     0,     0,     0,     0,
       7,    85,   175,     0,     0,     0,     0,     0,     0,   197,
     200,     0,     0,     0,     0,     0,     0,    54,   166,   165,
     108,     0,     0,    40,     0,   231,   246,     0,     0,     0,
       0,     0,     0,     0,     0,   232,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    14,     0,    49,    31,    47,    32,    18,    33,
      23,     0,    36,     0,    37,    52,    38,    39,     0,    42,
      12,     9,     0,     0,     0,     0,   336,     0,     0,   323,
     167,     0,   168,     0,     0,    89,    90,     0,     0,    62,
     178,     0,     0,   172,   177,     0,     0,     0,     0,     0,
     192,   194,   172,   172,   200,     0,    91,    94,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    13,
       0,     0,   209,   205,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   208,   210,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    25,     0,
       0,    45,     0,     0,     0,    22,     0,     0,    56,    55,
     346,     0,     0,   330,   343,   353,   342,   349,   351,     0,
     322,   204,   264,   103,     0,   270,   276,   105,   104,   309,
     306,   308,     0,    76,    78,   326,   184,   180,   173,   171,
       0,    73,    74,    84,   107,   190,   191,     0,   195,     0,
     200,   201,    87,    97,    93,    96,     0,     0,    81,     0,
      75,   203,   203,     0,    88,     0,    27,    28,    43,    29,
      30,   206,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   229,   228,   226,   225,   224,   219,   218,   222,
     223,   221,   220,   217,   216,   214,   215,   211,   212,   213,
      15,    26,    24,    50,    48,    44,    20,    21,    35,    34,
      53,    57,     0,     0,   337,   338,     0,   333,   331,     0,
     287,   279,     0,   287,     0,     0,    86,     0,     0,   175,
     176,   193,   196,   202,     0,   101,    92,    95,     0,    83,
       0,     0,     0,   327,    41,     0,   239,   245,     0,     0,
     243,     0,   230,   207,   234,   233,   235,   236,     0,     0,
     250,   251,   238,     0,   237,     0,    58,   354,   351,   344,
     334,   332,     0,     0,   287,     0,   255,   106,   294,     0,
     295,   277,   312,   313,     0,   188,     0,     0,   186,     0,
       0,     0,     0,    99,   169,   170,     0,     0,     0,     0,
       0,     0,     0,     0,   227,   355,     0,     0,     0,   281,
     282,   283,   284,   285,   288,     0,     0,     0,     0,   290,
       0,   257,     0,   293,   296,   255,     0,   316,     0,   310,
       0,   189,   185,   187,     0,   172,   181,    98,     0,     0,
     110,   240,   241,   242,   244,   247,   248,   249,   347,     0,
     354,   286,     0,   289,     0,     0,   259,   280,   259,   106,
       0,   313,     0,     0,    77,   203,     0,   102,     0,   339,
       0,   287,     0,     0,     0,   265,   271,     0,     0,   314,
       0,   311,   182,     0,   179,   100,   345,     0,     0,   254,
       0,     0,   263,     0,   278,   317,   313,   203,     0,   291,
     256,     0,   260,   261,   262,     0,   272,   315,   183,     0,
     258,   266,   301,   287,   147,     0,     0,   127,   113,   112,
     149,   150,   151,   152,   153,     0,     0,     0,     0,   134,
     136,   141,     0,     0,   135,     0,   114,     0,   130,   138,
     146,   148,     0,     0,     0,   302,   273,   292,     0,     0,
     143,   203,     0,   131,     0,   111,     0,   126,   172,     0,
     145,   267,   203,   133,     0,   298,     0,     0,     0,     0,
       0,     0,     0,     0,   147,     0,   154,     0,     0,   124,
       0,     0,   128,     0,   172,   298,     0,   147,     0,   253,
       0,     0,   137,     0,   116,     0,     0,   117,     0,   140,
       0,   111,     0,     0,   123,   125,   129,   253,   139,     0,
     297,     0,   299,     0,     0,     0,     0,     0,   144,     0,
     132,   115,   299,   303,     0,   156,     0,     0,     0,     0,
       0,     0,   156,   299,   252,   203,     0,   274,   119,   118,
       0,   120,   121,     0,   268,   156,   155,   300,   172,   122,
     142,   172,   304,   275,   269,   172,   305
};

/* YYDEFGOTO[NTERM-NUM]. */
static const short int yydefgoto[] =
{
      -1,     6,   121,    11,    12,     9,    10,    19,    88,   239,
     178,   177,   175,   186,   187,   188,   299,     7,     8,    18,
      56,   132,   209,   229,   434,   539,   492,    57,   203,   317,
     136,   636,   637,   680,   658,   638,   639,   678,   640,   652,
     674,   641,   642,   643,   675,   737,   113,   140,    59,   683,
      60,   212,   213,   214,   326,   429,   535,   584,   428,   487,
     488,    61,    62,   222,    63,   223,    64,   225,   676,   201,
     244,   712,   521,   556,   575,   605,   318,   420,   592,   614,
     685,   751,   422,   593,   612,   665,   748,   423,   526,   477,
     515,   475,   476,   480,   525,   689,   725,   615,   664,   733,
     755,    65,   204,   321,   424,   563,   483,   529,   561,    15,
      16,    26,    27,   101,    13,    14,    66,    67,    23,    24,
     419,    95,    96,   508,   413,   506
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -701
static const short int yypact[] =
{
     209,  -701,  -701,  -701,  -701,  -701,    41,  -701,  -701,  -701,
    -701,  -701,    61,  -701,   -26,  -701,    21,  -701,   789,  1540,
      65,   106,    58,   -26,  -701,   112,    21,  -701,   558,    74,
      92,   247,    50,  -701,   114,  -701,   177,   136,   179,   190,
     194,   221,   239,   255,   278,  -701,  -701,   283,   296,  -701,
     298,   302,   309,  -701,   312,  -701,  -701,  -701,  -701,   143,
    -701,  -701,  -701,  -701,  -701,  -701,  -701,   121,  -701,   323,
     177,   353,   623,  -701,   354,   356,   360,  -701,  -701,   361,
     364,   366,   623,   367,   369,   371,  -701,   374,   274,   623,
    -701,   380,  -701,   372,   373,   333,   251,   106,  -701,  -701,
    -701,   337,   258,  -701,  -701,  -701,  -701,  -701,  -701,  -701,
    -701,  -701,  -701,  -701,  -701,  -701,   396,   397,   399,   400,
    -701,  -701,    43,   401,   177,   177,   402,   177,    22,  -701,
     405,    20,   375,   177,   406,   407,   381,  -701,  -701,  -701,
    -701,   365,    32,  -701,    45,  -701,  -701,   623,   623,   623,
     383,   385,   386,   388,   389,  -701,   390,   394,   395,   404,
     408,   409,   410,   414,   415,   423,   425,   427,   428,   430,
     623,   623,  1335,   222,  -701,   294,  -701,   295,    39,  -701,
    -701,   377,  1562,   297,  -701,  -701,   299,  -701,   413,  -701,
    -701,  1562,   418,   112,   112,   338,   214,   382,   339,   214,
    -701,   623,  -701,   262,    33,  -701,  -701,     0,   301,  -701,
    -701,   177,   420,    81,  -701,   340,   343,   344,   345,   346,
    -701,  -701,   105,   116,    40,   350,  -701,  -701,   443,    31,
      20,   352,   431,   486,   623,   357,   -26,   623,   623,  -701,
     623,   623,  -701,  -701,   798,   623,   623,   623,   623,   623,
     490,   495,   623,   496,   500,   501,   502,   623,   623,   503,
     504,   623,   623,   509,  -701,  -701,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,  1562,   511,
     513,  -701,   514,   623,   623,  1562,   351,   516,  -701,    84,
    -701,   387,   391,  -701,  -701,   524,  -701,  -701,  -701,    98,
    -701,  1562,   558,  -701,   177,  -701,  -701,  -701,  -701,  -701,
    -701,  -701,   525,  -701,  -701,   861,   497,  -701,  -701,  -701,
      43,  -701,  -701,  -701,  -701,  -701,  -701,   177,  -701,   177,
     405,  -701,  -701,  -701,  -701,  -701,   499,    23,  -701,   115,
    -701,  -701,  -701,  1360,  -701,     6,  1562,  1562,  1563,  1562,
    1562,  -701,   754,   985,  1380,  1400,  1005,   393,   392,  1025,
     398,   416,   421,   435,  1420,  1458,   436,   438,  1045,  1483,
     442,  1697,  1587,  1438,  1732,   965,  1523,   950,   950,   557,
     557,   557,   557,   276,   276,   230,   230,  -701,  -701,  -701,
    1562,  1562,  1562,  -701,  -701,  -701,  1562,  1562,  -701,  -701,
    -701,  -701,   533,   112,   268,   214,   484,  -701,  -701,   103,
     472,  -701,   543,   472,   623,   417,  -701,     3,   526,    43,
    -701,  -701,  -701,  -701,    20,  -701,  -701,  -701,   518,  -701,
     451,   452,   595,  -701,  -701,   623,  -701,  -701,   623,   623,
    -701,   623,  -701,  -701,  -701,  -701,  -701,  -701,   623,   623,
    -701,  -701,  -701,   596,  -701,   623,  -701,   462,   588,  -701,
    -701,  -701,    15,   570,  1674,   592,   512,  -701,  -701,  1717,
     523,  -701,  1562,    30,   608,  -701,   609,     2,  -701,   529,
     579,   130,    20,  -701,  -701,  -701,   492,  1065,  1085,  1110,
    1130,  1150,  1170,   506,  1562,   214,   574,   112,   112,  -701,
    -701,  -701,  -701,  -701,  -701,   507,   623,   403,   620,  -701,
     600,   605,   349,  -701,  -701,   512,   582,   613,   614,  -701,
     515,  -701,  -701,  -701,   651,   519,  -701,  -701,   140,    20,
    -701,  -701,  -701,  -701,  -701,  -701,  -701,  -701,  -701,   527,
     462,  -701,  1190,  -701,   623,   622,   564,  -701,   564,  -701,
     623,    30,   623,   528,  -701,  -701,   575,  -701,   145,   214,
     612,   277,  1210,   623,   633,  -701,  -701,   571,  1235,  -701,
    1255,  -701,  -701,   667,  -701,  -701,  -701,   641,   663,  -701,
    1275,   623,   156,   626,  -701,  -701,    30,  -701,   623,  -701,
    -701,  1295,  -701,  -701,  -701,   628,  -701,  -701,  -701,  1315,
    -701,  -701,  -701,   648,   702,    46,   673,   712,  -701,  -701,
    -701,  -701,  -701,  -701,  -701,   653,   654,   177,   655,  -701,
    -701,  -701,   656,   658,  -701,   233,  -701,   659,  -701,  -701,
    -701,   702,   640,   661,   143,  -701,  -701,  -701,    57,   290,
    -701,  -701,   670,  -701,   122,  -701,   671,  -701,    48,   233,
    -701,  -701,  -701,  -701,   657,   684,   674,   678,   569,   679,
     586,   691,   693,   590,   702,   591,  -701,   623,    25,  -701,
      16,   263,  -701,   233,   182,   684,   597,   702,   729,   638,
     122,   122,  -701,   122,  -701,   122,   122,  -701,   701,  -701,
    1503,   598,   599,   122,  -701,  -701,  -701,   638,  -701,   685,
    -701,   716,  -701,   607,   610,    17,   611,   617,  -701,   746,
    -701,  -701,  -701,  -701,   749,    54,   618,   621,   122,   624,
     629,   649,    54,  -701,  -701,  -701,   750,  -701,  -701,  -701,
     650,  -701,  -701,   143,  -701,    54,  -701,  -701,   519,  -701,
    -701,   519,  -701,  -701,  -701,   519,  -701
};

/* YYPGOTO[NTERM-NUM].  */
static const short int yypgoto[] =
{
    -701,  -701,   -69,  -701,  -701,  -701,  -701,   522,  -701,  -701,
    -701,  -701,  -701,  -701,   627,  -701,  -701,  -701,  -701,   546,
    -701,  -701,  -701,  -215,  -701,  -701,  -701,  -701,  -454,   -13,
    -701,   -51,  -495,    70,   137,   111,  -701,  -701,   154,  -701,
    -701,  -701,  -556,  -701,    62,  -609,  -701,  -635,  -572,  -210,
    -701,   370,  -701,   470,  -701,  -701,  -701,  -701,  -701,  -701,
     314,  -701,  -701,  -701,  -701,  -701,  -701,  -216,  -102,  -701,
     -72,    97,   280,  -701,   248,  -701,  -701,  -701,  -701,  -701,
    -701,  -701,  -701,  -701,  -701,  -701,  -701,  -701,  -701,  -701,
    -701,  -458,   384,  -701,  -701,   123,  -700,  -701,  -701,  -701,
    -701,  -701,  -701,  -701,  -701,  -701,  -701,  -522,  -701,  -701,
    -701,  -701,   783,  -701,  -701,  -701,  -701,  -701,   576,   -19,
    -701,   713,   -11,  -701,  -701,   261
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -327
static const short int yytable[] =
{
     172,   143,   200,   330,    98,    58,   485,   485,   341,   663,
     182,   202,   337,   339,   102,   349,   518,   191,   145,   146,
     655,   655,   732,   522,   226,   227,   120,   436,   437,   701,
      21,   618,   618,   745,   527,   344,   345,   319,   237,   579,
     618,    17,   644,   291,   224,   147,   148,   210,   619,   619,
     645,   240,   149,   150,   151,   216,   217,   619,   219,   221,
     735,   655,    21,   443,   231,    20,   152,   153,   154,   644,
     736,    89,   618,   155,   607,   242,   243,    25,   156,   656,
     626,   509,   510,   511,   512,   513,   157,   118,   411,   619,
     320,   158,   159,   160,   161,   162,   163,   164,   264,   265,
      22,   288,   644,   646,   165,   577,   166,   211,   750,   295,
      90,   666,   667,   588,    97,   644,    90,  -174,   698,   344,
     345,   167,   228,   744,   433,   438,   655,   168,   528,   311,
     114,   709,    22,   346,   344,   345,   752,   618,  -174,   322,
     657,   323,   327,   532,   344,   345,   486,   486,   115,   344,
     345,   119,   169,   668,   619,   616,   514,   703,   728,   170,
     171,   633,   353,   220,   657,   356,   357,   635,   359,   360,
     347,   238,   348,   362,   363,   364,   365,   366,   292,   340,
     369,   120,   301,   302,   241,   374,   375,   329,   705,   378,
     379,   682,   122,   669,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   123,   346,   304,   491,
     329,   406,   407,   412,   417,   145,   146,   124,   286,   470,
      91,   125,   346,    92,    93,    94,    91,   655,   418,    92,
      99,   100,   346,   471,   329,   421,   336,   346,   618,   440,
     441,   141,   147,   148,   347,   329,   439,   338,   126,   149,
     150,   151,   282,   283,   284,   619,   312,   655,   431,   347,
     432,   537,   304,   152,   153,   154,   127,   538,   618,   347,
     155,   567,   138,   139,   347,   156,   585,   656,   626,   602,
     603,   604,   128,   157,   655,   619,   116,   117,   158,   159,
     160,   161,   162,   163,   164,   618,   280,   281,   282,   283,
     284,   165,    58,   166,   517,   129,   587,   666,   667,   313,
     130,   329,   619,   706,   568,   566,   314,   142,   167,     1,
       2,     3,   315,   131,   168,   133,    98,    41,   305,   134,
       4,   306,   307,   308,   671,   672,   135,     5,   474,   137,
     479,   474,   482,   312,   408,   409,   316,   144,   173,   169,
     174,   287,    51,    52,   176,   179,   170,   171,   180,   633,
     181,   183,   184,   497,    53,   185,   498,   499,   189,   500,
     145,   146,   190,   293,   192,   557,   501,   502,   193,   194,
     195,   196,   305,   504,   198,   306,   307,   468,   199,   669,
     205,   206,   467,   207,   208,   215,   218,   147,   148,   224,
     232,   233,   230,   314,   149,   150,   151,   298,   234,   315,
     245,   236,   246,   247,    41,   248,   249,   250,   152,   153,
     154,   251,   252,   289,   290,   155,   296,   351,   297,   309,
     156,   253,   324,   316,   552,   254,   255,   256,   157,    51,
      52,   257,   258,   158,   159,   160,   161,   162,   163,   164,
     259,    53,   260,   582,   261,   262,   165,   263,   166,   509,
     510,   511,   512,   513,   300,   145,   146,   328,   303,   310,
     343,   331,   572,   167,   332,   333,   334,   335,   578,   168,
     580,   342,   352,   350,   367,   608,   549,   550,   354,   368,
     370,   590,   147,   148,   371,   372,   373,   376,   377,   472,
     150,   151,   473,   380,   169,   403,   294,   404,   405,   601,
     410,   170,   171,   152,   153,   154,   609,   414,   416,   425,
     155,   415,   451,   452,   427,   156,   435,   466,   753,   454,
     469,   754,   489,   157,   514,   756,   145,   146,   158,   159,
     160,   161,   162,   163,   164,   493,   484,   455,   650,   478,
     686,   165,   456,   166,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   147,   148,   312,   457,   460,   167,   461,
     149,   150,   151,   464,   168,   278,   279,   280,   281,   282,
     283,   284,   494,   495,   152,   153,   154,   670,   673,   496,
     503,   155,   505,   679,   507,   700,   156,   516,   519,   169,
     520,   524,   530,   531,   157,   536,   170,   171,   534,   158,
     159,   160,   161,   162,   163,   164,   145,   146,   594,   704,
     670,   548,   165,   540,   166,   314,   553,   554,   559,   713,
     714,   315,   679,   555,   716,   717,    41,   547,   551,   167,
     560,   562,   721,   147,   148,   168,   564,   565,   329,   573,
     149,   150,   151,   574,   704,   316,   583,   569,   581,   586,
     591,    51,    52,   597,   152,   153,   154,   740,   598,   599,
     169,   155,   606,    53,   611,   517,   156,   170,   171,   647,
     648,   649,   651,   653,   157,   654,   659,   661,   662,   158,
     159,   160,   161,   162,   163,   164,   617,   677,   681,   688,
     692,   690,   165,   687,   166,   691,   693,   618,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   694,   695,   167,
     696,   697,   699,   710,   619,   168,   711,   718,   708,  -127,
     720,   724,   723,   620,   621,   622,   623,   624,   726,  -111,
     731,   727,   729,   734,   747,   325,   625,   626,   730,   738,
     169,   358,   739,   715,   235,   741,   627,   170,   171,   266,
     742,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   702,
     743,   749,   628,    28,   629,   660,   684,   746,   630,   490,
     430,   533,    51,    52,   722,   558,   576,   481,   707,   103,
     197,   570,   355,   266,   631,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,     0,   632,    29,    30,    31,   633,     0,
       0,     0,   634,     0,   635,     0,     0,     0,    32,    33,
      34,    35,     0,    36,    37,     0,     0,     0,     0,     0,
       0,    38,    39,    40,    41,    28,     0,     0,     0,     0,
       0,     0,    42,    43,    44,    45,    46,    47,     0,     0,
       0,     0,    48,    49,    50,     0,     0,     0,     0,    51,
      52,     0,     0,   445,     0,   446,     0,   426,     0,     0,
       0,    53,     0,     0,     0,     0,     0,    29,    30,    31,
       0,     0,     0,    54,     0,     0,     0,     0,     0,  -326,
      32,    33,    34,    35,     0,    36,    37,     0,     0,    55,
       0,     0,     0,    38,    39,    40,    41,     0,     0,   361,
       0,     0,     0,     0,    42,    43,    44,    45,    46,    47,
       0,     0,     0,     0,    48,    49,    50,     0,     0,     0,
       0,    51,    52,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    53,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,    54,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     266,    55,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     266,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     266,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     266,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     266,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     266,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,     0,     0,     0,     0,   266,   447,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   266,   450,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   266,   453,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   266,   462,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   266,   541,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   266,   542,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,     0,     0,     0,     0,
     266,   543,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     266,   544,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     266,   545,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     266,   546,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     266,   571,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     266,   589,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,     0,     0,     0,     0,   266,   595,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   266,   596,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   266,   600,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   266,   610,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,   613,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   266,   285,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,     0,     0,     0,     0,     0,   266,   442,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   266,   448,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,   449,
       0,     0,     0,     0,    68,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,   458,
       0,     0,     0,     0,     0,     0,     0,    68,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   266,    69,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   459,     0,   444,
       0,    69,     0,     0,    70,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   463,     0,     0,     0,     0,    70,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    71,     0,     0,
       0,     0,   719,    72,    73,    74,    75,    76,   -43,    77,
      78,    79,     0,    80,    81,     0,    82,    83,    84,     0,
      71,     0,     0,    85,    86,    87,    72,    73,    74,    75,
      76,     0,    77,    78,    79,     0,    80,    81,     0,    82,
      83,    84,     0,     0,     0,     0,    85,    86,    87,   266,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
       0,   517,   266,   465,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   266,   523,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284
};

static const short int yycheck[] =
{
      72,    70,   104,   213,    23,    18,     4,     4,   224,   644,
      82,   113,   222,   223,    25,   230,   474,    89,     3,     4,
       4,     4,   722,   477,     4,     5,     4,     4,     5,     4,
      56,    15,    15,   733,     4,     4,     5,     4,     6,   561,
      15,     0,   614,     4,     4,    30,    31,     4,    32,    32,
       4,     6,    37,    38,    39,   124,   125,    32,   127,   128,
       6,     4,    56,    57,   133,     4,    51,    52,    53,   641,
      16,     6,    15,    58,   596,   147,   148,    56,    63,    54,
      55,    66,    67,    68,    69,    70,    71,    37,     4,    32,
      57,    76,    77,    78,    79,    80,    81,    82,   170,   171,
     126,   173,   674,    57,    89,   559,    91,    64,   743,   181,
       4,    54,    55,   571,    56,   687,     4,    36,   674,     4,
       5,   106,   102,   732,   340,   102,     4,   112,    98,   201,
      56,   687,   126,   102,     4,     5,   745,    15,    57,   139,
     635,   141,   211,   141,     4,     5,   144,   144,    56,     4,
       5,    37,   137,    96,    32,   613,   141,   141,   141,   144,
     145,   136,   234,   141,   659,   237,   238,   142,   240,   241,
     139,   139,   141,   245,   246,   247,   248,   249,   139,   139,
     252,     4,   193,   194,   139,   257,   258,   139,   683,   261,
     262,   143,    56,   136,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,    37,   102,     4,   434,
     139,   293,   294,   139,   126,     3,     4,    37,     6,   126,
     124,    37,   102,   127,   128,   129,   124,     4,   140,   127,
     128,   129,   102,   140,   139,   314,   141,   102,    15,   351,
     352,   130,    30,    31,   139,   139,   141,   141,    37,    37,
      38,    39,    32,    33,    34,    32,     4,     4,   337,   139,
     339,   141,     4,    51,    52,    53,    37,   492,    15,   139,
      58,   141,   139,   140,   139,    63,   141,    54,    55,   133,
     134,   135,    37,    71,     4,    32,    49,    50,    76,    77,
      78,    79,    80,    81,    82,    15,    30,    31,    32,    33,
      34,    89,   325,    91,    37,    37,    39,    54,    55,    57,
      37,   139,    32,   141,   539,   535,    64,     4,   106,   120,
     121,   122,    70,    37,   112,    37,   355,    75,   124,    37,
     131,   127,   128,   129,    54,    55,    37,   138,   420,    37,
     422,   423,   424,     4,     3,     4,    94,     4,     4,   137,
       4,   139,   100,   101,     4,     4,   144,   145,     4,   136,
       4,     4,     3,   445,   112,     4,   448,   449,     4,   451,
       3,     4,   108,     6,     4,    36,   458,   459,    16,    16,
      57,   140,   124,   465,    57,   127,   128,   129,   140,   136,
       4,     4,   413,     4,     4,     4,     4,    30,    31,     4,
       4,     4,    37,    64,    37,    38,    39,     4,    37,    70,
      37,    56,    37,    37,    75,    37,    37,    37,    51,    52,
      53,    37,    37,   139,   139,    58,   139,     6,   139,    57,
      63,    37,   141,    94,   516,    37,    37,    37,    71,   100,
     101,    37,    37,    76,    77,    78,    79,    80,    81,    82,
      37,   112,    37,   565,    37,    37,    89,    37,    91,    66,
      67,    68,    69,    70,    56,     3,     4,    57,   140,   140,
      37,   141,   554,   106,   141,   141,   141,   141,   560,   112,
     562,   141,     6,   141,     4,   597,   507,   508,   141,     4,
       4,   573,    30,    31,     4,     4,     4,     4,     4,    37,
      38,    39,    40,     4,   137,     4,   139,     4,     4,   591,
       4,   144,   145,    51,    52,    53,   598,   140,     4,     4,
      58,   140,   139,   141,    37,    63,    37,     4,   748,   141,
      56,   751,    16,    71,   141,   755,     3,     4,    76,    77,
      78,    79,    80,    81,    82,    37,   139,   141,   627,    16,
     662,    89,   141,    91,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    30,    31,     4,   141,   141,   106,   141,
      37,    38,    39,   141,   112,    28,    29,    30,    31,    32,
      33,    34,   141,   141,    51,    52,    53,   648,   649,     4,
       4,    58,   140,   654,    16,   677,    63,    37,    16,   137,
      98,    88,     4,     4,    71,    36,   144,   145,    89,    76,
      77,    78,    79,    80,    81,    82,     3,     4,    57,   680,
     681,    57,    89,   141,    91,    64,    16,    37,    56,   690,
     691,    70,   693,    38,   695,   696,    75,   141,   141,   106,
      37,    37,   703,    30,    31,   112,   141,     6,   139,    37,
      37,    38,    39,    99,   715,    94,    91,   140,   140,    57,
      37,   100,   101,     6,    51,    52,    53,   728,    37,    16,
     137,    58,    56,   112,    56,    37,    63,   144,   145,    16,
      37,    37,    37,    37,    71,    37,    37,    57,    37,    76,
      77,    78,    79,    80,    81,    82,     4,    37,    37,    25,
     141,    37,    89,    56,    91,    37,    37,    15,     6,     7,
       8,     9,    10,    11,    12,    13,    14,   141,    37,   106,
      37,   141,   141,     4,    32,   112,    98,    36,   141,   141,
     141,    25,    57,    41,    42,    43,    44,    45,   141,    37,
       4,   141,   141,     4,     4,   209,    54,    55,   141,   141,
     137,   239,   141,   693,   137,   141,    64,   144,   145,    15,
     141,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,   678,
     141,   141,    90,     4,    92,   641,   659,   735,    96,   429,
     330,   487,   100,   101,   707,   525,   558,   423,   685,    26,
      97,   550,   236,    15,   112,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,   132,    46,    47,    48,   136,    -1,
      -1,    -1,   140,    -1,   142,    -1,    -1,    -1,    59,    60,
      61,    62,    -1,    64,    65,    -1,    -1,    -1,    -1,    -1,
      -1,    72,    73,    74,    75,     4,    -1,    -1,    -1,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    -1,
      -1,    -1,    93,    94,    95,    -1,    -1,    -1,    -1,   100,
     101,    -1,    -1,   139,    -1,   141,    -1,    36,    -1,    -1,
      -1,   112,    -1,    -1,    -1,    -1,    -1,    46,    47,    48,
      -1,    -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,   130,
      59,    60,    61,    62,    -1,    64,    65,    -1,    -1,   140,
      -1,    -1,    -1,    72,    73,    74,    75,    -1,    -1,   141,
      -1,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    -1,    -1,    -1,    93,    94,    95,    -1,    -1,    -1,
      -1,   100,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   112,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,   124,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   140,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    15,   141,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   141,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   141,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   141,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   141,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   141,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      15,   141,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   141,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   141,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   141,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   141,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   141,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,    -1,    -1,    -1,    -1,    15,   141,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   141,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   141,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   141,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,   141,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    15,   139,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    15,   139,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    15,   139,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    -1,   139,
      -1,    -1,    -1,    -1,     4,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    -1,   139,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,    38,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,   139,    -1,    36,
      -1,    38,    -1,    -1,    64,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,   139,    -1,    -1,    -1,    -1,    64,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    97,    -1,    -1,
      -1,    -1,   139,   103,   104,   105,   106,   107,   108,   109,
     110,   111,    -1,   113,   114,    -1,   116,   117,   118,    -1,
      97,    -1,    -1,   123,   124,   125,   103,   104,   105,   106,
     107,    -1,   109,   110,   111,    -1,   113,   114,    -1,   116,
     117,   118,    -1,    -1,    -1,    -1,   123,   124,   125,    15,
      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    37,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned short int yystos[] =
{
       0,   120,   121,   122,   131,   138,   147,   163,   164,   151,
     152,   149,   150,   260,   261,   255,   256,     0,   165,   153,
       4,    56,   126,   264,   265,    56,   257,   258,     4,    46,
      47,    48,    59,    60,    61,    62,    64,    65,    72,    73,
      74,    75,    83,    84,    85,    86,    87,    88,    93,    94,
      95,   100,   101,   112,   124,   140,   166,   173,   175,   194,
     196,   207,   208,   210,   212,   247,   262,   263,     4,    38,
      64,    97,   103,   104,   105,   106,   107,   109,   110,   111,
     113,   114,   116,   117,   118,   123,   124,   125,   154,     6,
       4,   124,   127,   128,   129,   267,   268,    56,   265,   128,
     129,   259,   268,   258,     6,     7,     8,     9,    10,    11,
      12,    13,    14,   192,    56,    56,    49,    50,    37,    37,
       4,   148,    56,    37,    37,    37,    37,    37,    37,    37,
      37,    37,   167,    37,    37,    37,   176,    37,   139,   140,
     193,   130,     4,   148,     4,     3,     4,    30,    31,    37,
      38,    39,    51,    52,    53,    58,    63,    71,    76,    77,
      78,    79,    80,    81,    82,    89,    91,   106,   112,   137,
     144,   145,   216,     4,     4,   158,     4,   157,   156,     4,
       4,     4,   216,     4,     3,     4,   159,   160,   161,     4,
     108,   216,     4,    16,    16,    57,   140,   267,    57,   140,
     214,   215,   214,   174,   248,     4,     4,     4,     4,   168,
       4,    64,   197,   198,   199,     4,   148,   148,     4,   148,
     141,   148,   209,   211,     4,   213,     4,     5,   102,   169,
      37,   148,     4,     4,    37,   160,    56,     6,   139,   155,
       6,   139,   216,   216,   216,    37,    37,    37,    37,    37,
      37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    37,    37,   216,   216,    15,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,   139,     6,   139,   216,   139,
     139,     4,   139,     6,   139,   216,   139,   139,     4,   162,
      56,   268,   268,   140,     4,   124,   127,   128,   129,    57,
     140,   216,     4,    57,    64,    70,    94,   175,   222,     4,
      57,   249,   139,   141,   141,   165,   200,   148,    57,   139,
     195,   141,   141,   141,   141,   141,   141,   195,   141,   195,
     139,   213,   141,    37,     4,     5,   102,   139,   141,   169,
     141,     6,     6,   216,   141,   264,   216,   216,   153,   216,
     216,   141,   216,   216,   216,   216,   216,     4,     4,   216,
       4,     4,     4,     4,   216,   216,     4,     4,   216,   216,
       4,   216,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   216,   216,   216,   216,   216,   216,   216,   216,
     216,   216,   216,     4,     4,     4,   216,   216,     3,     4,
       4,     4,   139,   270,   140,   140,     4,   126,   140,   266,
     223,   148,   228,   233,   250,     4,    36,    37,   204,   201,
     199,   148,   148,   213,   170,    37,     4,     5,   102,   141,
     214,   214,   139,    57,    36,   139,   141,   141,   139,   139,
     141,   139,   141,   141,   141,   141,   141,   141,   139,   139,
     141,   141,   141,   139,   141,    16,     4,   268,   129,    56,
     126,   140,    37,    40,   216,   237,   238,   235,    16,   216,
     239,   238,   216,   252,   139,     4,   144,   205,   206,    16,
     197,   169,   172,    37,   141,   141,     4,   216,   216,   216,
     216,   216,   216,     4,   216,   140,   271,    16,   269,    66,
      67,    68,    69,    70,   141,   236,    37,    37,   237,    16,
      98,   218,   174,    16,    88,   240,   234,     4,    98,   253,
       4,     4,   141,   206,    89,   202,    36,   141,   169,   171,
     141,   141,   141,   141,   141,   141,   141,   141,    57,   268,
     268,   141,   216,    16,    37,    38,   219,    36,   218,    56,
      37,   254,    37,   251,   141,     6,   195,   141,   169,   140,
     271,   141,   216,    37,    99,   220,   220,   174,   216,   253,
     216,   140,   214,    91,   203,   141,    57,    39,   237,   141,
     216,    37,   224,   229,    57,   141,   141,     6,    37,    16,
     141,   216,   133,   134,   135,   221,    56,   253,   214,   216,
     141,    56,   230,   141,   225,   243,   237,     4,    15,    32,
      41,    42,    43,    44,    45,    54,    55,    64,    90,    92,
      96,   112,   132,   136,   140,   142,   177,   178,   181,   182,
     184,   187,   188,   189,   194,     4,    57,    16,    37,    37,
     148,    37,   185,    37,    37,     4,    54,   178,   180,    37,
     184,    57,    37,   193,   244,   231,    54,    55,    96,   136,
     177,    54,    55,   177,   186,   190,   214,    37,   183,   177,
     179,    37,   143,   195,   180,   226,   214,    56,    25,   241,
      37,    37,   141,    37,   141,    37,    37,   141,   188,   141,
     216,     4,   181,   141,   177,   178,   141,   241,   141,   188,
       4,    98,   217,   177,   177,   179,   177,   177,    36,   139,
     141,   177,   217,    57,    25,   242,   141,   141,   141,   141,
     141,     4,   242,   245,     4,     6,    16,   191,   141,   141,
     177,   141,   141,   141,   191,   242,   190,     4,   232,   141,
     193,   227,   191,   195,   195,   246,   195
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (0)


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (N)								\
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (0)
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
              (Loc).first_line, (Loc).first_column,	\
              (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr,					\
                  Type, Value);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_stack_print (short int *bottom, short int *top)
#else
static void
yy_stack_print (bottom, top)
    short int *bottom;
    short int *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (/* Nothing. */; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_reduce_print (int yyrule)
#else
static void
yy_reduce_print (yyrule)
    int yyrule;
#endif
{
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu), ",
             yyrule - 1, yylno);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
  YYFPRINTF (stderr, "-> %s\n", yytname[yyr1[yyrule]]);
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (Rule);		\
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      size_t yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

#endif /* YYERROR_VERBOSE */



#if YYDEBUG
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)
#else
static void
yysymprint (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);


# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  switch (yytype)
    {
      default:
        break;
    }
  YYFPRINTF (yyoutput, ")");
}

#endif /* ! YYDEBUG */
/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
        break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM);
# else
int yyparse ();
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM)
# else
int yyparse (YYPARSE_PARAM)
  void *YYPARSE_PARAM;
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int
yyparse (void)
#else
int
yyparse ()
    ;
#endif
#endif
{
  
  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  short int yyssa[YYINITDEPTH];
  short int *yyss = yyssa;
  short int *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK   (yyvsp--, yyssp--)

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* When reducing, the number of symbols on the RHS of the reduced
     rule.  */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short int *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	short int *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a look-ahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to look-ahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;


  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 8:
#line 172 "ldgram.y"
    { ldlex_defsym(); }
    break;

  case 9:
#line 174 "ldgram.y"
    {
		  ldlex_popstate();
		  lang_add_assignment(exp_assop((yyvsp[-1].token),(yyvsp[-2].name),(yyvsp[0].etree)));
		}
    break;

  case 10:
#line 182 "ldgram.y"
    {
		  ldlex_mri_script ();
		  PUSH_ERROR (_("MRI style script"));
		}
    break;

  case 11:
#line 187 "ldgram.y"
    {
		  ldlex_popstate ();
		  mri_draw_tree ();
		  POP_ERROR ();
		}
    break;

  case 16:
#line 202 "ldgram.y"
    {
			einfo(_("%P%F: unrecognised keyword in MRI style script '%s'\n"),(yyvsp[0].name));
			}
    break;

  case 17:
#line 205 "ldgram.y"
    {
			config.map_filename = "-";
			}
    break;

  case 20:
#line 211 "ldgram.y"
    { mri_public((yyvsp[-2].name), (yyvsp[0].etree)); }
    break;

  case 21:
#line 213 "ldgram.y"
    { mri_public((yyvsp[-2].name), (yyvsp[0].etree)); }
    break;

  case 22:
#line 215 "ldgram.y"
    { mri_public((yyvsp[-1].name), (yyvsp[0].etree)); }
    break;

  case 23:
#line 217 "ldgram.y"
    { mri_format((yyvsp[0].name)); }
    break;

  case 24:
#line 219 "ldgram.y"
    { mri_output_section((yyvsp[-2].name), (yyvsp[0].etree));}
    break;

  case 25:
#line 221 "ldgram.y"
    { mri_output_section((yyvsp[-1].name), (yyvsp[0].etree));}
    break;

  case 26:
#line 223 "ldgram.y"
    { mri_output_section((yyvsp[-2].name), (yyvsp[0].etree));}
    break;

  case 27:
#line 225 "ldgram.y"
    { mri_align((yyvsp[-2].name),(yyvsp[0].etree)); }
    break;

  case 28:
#line 227 "ldgram.y"
    { mri_align((yyvsp[-2].name),(yyvsp[0].etree)); }
    break;

  case 29:
#line 229 "ldgram.y"
    { mri_alignmod((yyvsp[-2].name),(yyvsp[0].etree)); }
    break;

  case 30:
#line 231 "ldgram.y"
    { mri_alignmod((yyvsp[-2].name),(yyvsp[0].etree)); }
    break;

  case 33:
#line 235 "ldgram.y"
    { mri_name((yyvsp[0].name)); }
    break;

  case 34:
#line 237 "ldgram.y"
    { mri_alias((yyvsp[-2].name),(yyvsp[0].name),0);}
    break;

  case 35:
#line 239 "ldgram.y"
    { mri_alias ((yyvsp[-2].name), 0, (int) (yyvsp[0].bigint).integer); }
    break;

  case 36:
#line 241 "ldgram.y"
    { mri_base((yyvsp[0].etree)); }
    break;

  case 37:
#line 243 "ldgram.y"
    { mri_truncate ((unsigned int) (yyvsp[0].bigint).integer); }
    break;

  case 40:
#line 247 "ldgram.y"
    { ldlex_script (); ldfile_open_command_file((yyvsp[0].name)); }
    break;

  case 41:
#line 249 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 42:
#line 251 "ldgram.y"
    { lang_add_entry ((yyvsp[0].name), FALSE); }
    break;

  case 44:
#line 256 "ldgram.y"
    { mri_order((yyvsp[0].name)); }
    break;

  case 45:
#line 257 "ldgram.y"
    { mri_order((yyvsp[0].name)); }
    break;

  case 47:
#line 263 "ldgram.y"
    { mri_load((yyvsp[0].name)); }
    break;

  case 48:
#line 264 "ldgram.y"
    { mri_load((yyvsp[0].name)); }
    break;

  case 49:
#line 269 "ldgram.y"
    { mri_only_load((yyvsp[0].name)); }
    break;

  case 50:
#line 271 "ldgram.y"
    { mri_only_load((yyvsp[0].name)); }
    break;

  case 51:
#line 275 "ldgram.y"
    { (yyval.name) = NULL; }
    break;

  case 54:
#line 282 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 55:
#line 284 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 56:
#line 288 "ldgram.y"
    { ldlang_add_undef ((yyvsp[0].name)); }
    break;

  case 57:
#line 290 "ldgram.y"
    { ldlang_add_undef ((yyvsp[0].name)); }
    break;

  case 58:
#line 292 "ldgram.y"
    { ldlang_add_undef ((yyvsp[0].name)); }
    break;

  case 59:
#line 296 "ldgram.y"
    { ldlex_both(); }
    break;

  case 60:
#line 298 "ldgram.y"
    { ldlex_popstate(); }
    break;

  case 73:
#line 319 "ldgram.y"
    { lang_add_target((yyvsp[-1].name)); }
    break;

  case 74:
#line 321 "ldgram.y"
    { ldfile_add_library_path ((yyvsp[-1].name), FALSE); }
    break;

  case 75:
#line 323 "ldgram.y"
    { lang_add_output((yyvsp[-1].name), 1); }
    break;

  case 76:
#line 325 "ldgram.y"
    { lang_add_output_format ((yyvsp[-1].name), (char *) NULL,
					    (char *) NULL, 1); }
    break;

  case 77:
#line 328 "ldgram.y"
    { lang_add_output_format ((yyvsp[-5].name), (yyvsp[-3].name), (yyvsp[-1].name), 1); }
    break;

  case 78:
#line 330 "ldgram.y"
    { ldfile_set_output_arch ((yyvsp[-1].name), bfd_arch_unknown); }
    break;

  case 79:
#line 332 "ldgram.y"
    { command_line.force_common_definition = TRUE ; }
    break;

  case 80:
#line 334 "ldgram.y"
    { command_line.inhibit_common_definition = TRUE ; }
    break;

  case 82:
#line 337 "ldgram.y"
    { lang_enter_group (); }
    break;

  case 83:
#line 339 "ldgram.y"
    { lang_leave_group (); }
    break;

  case 84:
#line 341 "ldgram.y"
    { lang_add_map((yyvsp[-1].name)); }
    break;

  case 85:
#line 343 "ldgram.y"
    { ldlex_script (); ldfile_open_command_file((yyvsp[0].name)); }
    break;

  case 86:
#line 345 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 87:
#line 347 "ldgram.y"
    {
		  lang_add_nocrossref ((yyvsp[-1].nocrossref));
		}
    break;

  case 89:
#line 352 "ldgram.y"
    { lang_add_insert ((yyvsp[0].name), 0); }
    break;

  case 90:
#line 354 "ldgram.y"
    { lang_add_insert ((yyvsp[0].name), 1); }
    break;

  case 91:
#line 359 "ldgram.y"
    { lang_add_input_file((yyvsp[0].name),lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;

  case 92:
#line 362 "ldgram.y"
    { lang_add_input_file((yyvsp[0].name),lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;

  case 93:
#line 365 "ldgram.y"
    { lang_add_input_file((yyvsp[0].name),lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;

  case 94:
#line 368 "ldgram.y"
    { lang_add_input_file((yyvsp[0].name),lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;

  case 95:
#line 371 "ldgram.y"
    { lang_add_input_file((yyvsp[0].name),lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;

  case 96:
#line 374 "ldgram.y"
    { lang_add_input_file((yyvsp[0].name),lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;

  case 97:
#line 377 "ldgram.y"
    { (yyval.integer) = as_needed; as_needed = TRUE; }
    break;

  case 98:
#line 379 "ldgram.y"
    { as_needed = (yyvsp[-2].integer); }
    break;

  case 99:
#line 381 "ldgram.y"
    { (yyval.integer) = as_needed; as_needed = TRUE; }
    break;

  case 100:
#line 383 "ldgram.y"
    { as_needed = (yyvsp[-2].integer); }
    break;

  case 101:
#line 385 "ldgram.y"
    { (yyval.integer) = as_needed; as_needed = TRUE; }
    break;

  case 102:
#line 387 "ldgram.y"
    { as_needed = (yyvsp[-2].integer); }
    break;

  case 107:
#line 402 "ldgram.y"
    { lang_add_entry ((yyvsp[-1].name), FALSE); }
    break;

  case 109:
#line 404 "ldgram.y"
    {ldlex_expression ();}
    break;

  case 110:
#line 405 "ldgram.y"
    { ldlex_popstate ();
		  lang_add_assignment (exp_assert ((yyvsp[-3].etree), (yyvsp[-1].name))); }
    break;

  case 111:
#line 413 "ldgram.y"
    {
			  (yyval.cname) = (yyvsp[0].name);
			}
    break;

  case 112:
#line 417 "ldgram.y"
    {
			  (yyval.cname) = "*";
			}
    break;

  case 113:
#line 421 "ldgram.y"
    {
			  (yyval.cname) = "?";
			}
    break;

  case 114:
#line 428 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[0].cname);
			  (yyval.wildcard).sorted = none;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 115:
#line 434 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[0].cname);
			  (yyval.wildcard).sorted = none;
			  (yyval.wildcard).exclude_name_list = (yyvsp[-2].name_list);
			}
    break;

  case 116:
#line 440 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[-1].cname);
			  (yyval.wildcard).sorted = by_name;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 117:
#line 446 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[-1].cname);
			  (yyval.wildcard).sorted = by_alignment;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 118:
#line 452 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[-2].cname);
			  (yyval.wildcard).sorted = by_name_alignment;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 119:
#line 458 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[-2].cname);
			  (yyval.wildcard).sorted = by_name;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 120:
#line 464 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[-2].cname);
			  (yyval.wildcard).sorted = by_alignment_name;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 121:
#line 470 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[-2].cname);
			  (yyval.wildcard).sorted = by_alignment;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 122:
#line 476 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[-1].cname);
			  (yyval.wildcard).sorted = by_name;
			  (yyval.wildcard).exclude_name_list = (yyvsp[-3].name_list);
			}
    break;

  case 123:
#line 485 "ldgram.y"
    {
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = (yyvsp[0].cname);
			  tmp->next = (yyvsp[-1].name_list);
			  (yyval.name_list) = tmp;
			}
    break;

  case 124:
#line 494 "ldgram.y"
    {
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = (yyvsp[0].cname);
			  tmp->next = NULL;
			  (yyval.name_list) = tmp;
			}
    break;

  case 125:
#line 505 "ldgram.y"
    {
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = (yyvsp[-2].wildcard_list);
			  tmp->spec = (yyvsp[0].wildcard);
			  (yyval.wildcard_list) = tmp;
			}
    break;

  case 126:
#line 514 "ldgram.y"
    {
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = NULL;
			  tmp->spec = (yyvsp[0].wildcard);
			  (yyval.wildcard_list) = tmp;
			}
    break;

  case 127:
#line 525 "ldgram.y"
    {
			  struct wildcard_spec tmp;
			  tmp.name = (yyvsp[0].name);
			  tmp.exclude_name_list = NULL;
			  tmp.sorted = none;
			  lang_add_wild (&tmp, NULL, ldgram_had_keep);
			}
    break;

  case 128:
#line 533 "ldgram.y"
    {
			  lang_add_wild (NULL, (yyvsp[-1].wildcard_list), ldgram_had_keep);
			}
    break;

  case 129:
#line 537 "ldgram.y"
    {
			  lang_add_wild (&(yyvsp[-3].wildcard), (yyvsp[-1].wildcard_list), ldgram_had_keep);
			}
    break;

  case 131:
#line 545 "ldgram.y"
    { ldgram_had_keep = TRUE; }
    break;

  case 132:
#line 547 "ldgram.y"
    { ldgram_had_keep = FALSE; }
    break;

  case 134:
#line 553 "ldgram.y"
    {
 		lang_add_attribute(lang_object_symbols_statement_enum);
	      	}
    break;

  case 136:
#line 558 "ldgram.y"
    {

		  lang_add_attribute(lang_constructors_statement_enum);
		}
    break;

  case 137:
#line 563 "ldgram.y"
    {
		  constructors_sorted = TRUE;
		  lang_add_attribute (lang_constructors_statement_enum);
		}
    break;

  case 139:
#line 569 "ldgram.y"
    {
			  lang_add_data ((int) (yyvsp[-3].integer), (yyvsp[-1].etree));
			}
    break;

  case 140:
#line 574 "ldgram.y"
    {
			  lang_add_fill ((yyvsp[-1].fill));
			}
    break;

  case 141:
#line 577 "ldgram.y"
    {ldlex_expression ();}
    break;

  case 142:
#line 578 "ldgram.y"
    { ldlex_popstate ();
			  lang_add_assignment (exp_assert ((yyvsp[-4].etree), (yyvsp[-2].name))); }
    break;

  case 143:
#line 581 "ldgram.y"
    { ldlex_script (); ldfile_open_command_file((yyvsp[0].name)); }
    break;

  case 144:
#line 583 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 149:
#line 598 "ldgram.y"
    { (yyval.integer) = (yyvsp[0].token); }
    break;

  case 150:
#line 600 "ldgram.y"
    { (yyval.integer) = (yyvsp[0].token); }
    break;

  case 151:
#line 602 "ldgram.y"
    { (yyval.integer) = (yyvsp[0].token); }
    break;

  case 152:
#line 604 "ldgram.y"
    { (yyval.integer) = (yyvsp[0].token); }
    break;

  case 153:
#line 606 "ldgram.y"
    { (yyval.integer) = (yyvsp[0].token); }
    break;

  case 154:
#line 611 "ldgram.y"
    {
		  (yyval.fill) = exp_get_fill ((yyvsp[0].etree), 0, "fill value");
		}
    break;

  case 155:
#line 618 "ldgram.y"
    { (yyval.fill) = (yyvsp[0].fill); }
    break;

  case 156:
#line 619 "ldgram.y"
    { (yyval.fill) = (fill_type *) 0; }
    break;

  case 157:
#line 624 "ldgram.y"
    { (yyval.token) = '+'; }
    break;

  case 158:
#line 626 "ldgram.y"
    { (yyval.token) = '-'; }
    break;

  case 159:
#line 628 "ldgram.y"
    { (yyval.token) = '*'; }
    break;

  case 160:
#line 630 "ldgram.y"
    { (yyval.token) = '/'; }
    break;

  case 161:
#line 632 "ldgram.y"
    { (yyval.token) = LSHIFT; }
    break;

  case 162:
#line 634 "ldgram.y"
    { (yyval.token) = RSHIFT; }
    break;

  case 163:
#line 636 "ldgram.y"
    { (yyval.token) = '&'; }
    break;

  case 164:
#line 638 "ldgram.y"
    { (yyval.token) = '|'; }
    break;

  case 167:
#line 648 "ldgram.y"
    {
		  lang_add_assignment (exp_assop ((yyvsp[-1].token), (yyvsp[-2].name), (yyvsp[0].etree)));
		}
    break;

  case 168:
#line 652 "ldgram.y"
    {
		  lang_add_assignment (exp_assop ('=', (yyvsp[-2].name),
						  exp_binop ((yyvsp[-1].token),
							     exp_nameop (NAME,
									 (yyvsp[-2].name)),
							     (yyvsp[0].etree))));
		}
    break;

  case 169:
#line 660 "ldgram.y"
    {
		  lang_add_assignment (exp_provide ((yyvsp[-3].name), (yyvsp[-1].etree), FALSE));
		}
    break;

  case 170:
#line 664 "ldgram.y"
    {
		  lang_add_assignment (exp_provide ((yyvsp[-3].name), (yyvsp[-1].etree), TRUE));
		}
    break;

  case 178:
#line 687 "ldgram.y"
    { region = lang_memory_region_lookup ((yyvsp[0].name), TRUE); }
    break;

  case 179:
#line 690 "ldgram.y"
    {}
    break;

  case 180:
#line 692 "ldgram.y"
    { ldlex_script (); ldfile_open_command_file((yyvsp[0].name)); }
    break;

  case 181:
#line 694 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 182:
#line 699 "ldgram.y"
    {
		  region->origin = exp_get_vma ((yyvsp[0].etree), 0, "origin");
		  region->current = region->origin;
		}
    break;

  case 183:
#line 707 "ldgram.y"
    {
		  region->length = exp_get_vma ((yyvsp[0].etree), -1, "length");
		}
    break;

  case 184:
#line 714 "ldgram.y"
    { /* dummy action to avoid bison 1.25 error message */ }
    break;

  case 188:
#line 725 "ldgram.y"
    { lang_set_flags (region, (yyvsp[0].name), 0); }
    break;

  case 189:
#line 727 "ldgram.y"
    { lang_set_flags (region, (yyvsp[0].name), 1); }
    break;

  case 190:
#line 732 "ldgram.y"
    { lang_startup((yyvsp[-1].name)); }
    break;

  case 192:
#line 738 "ldgram.y"
    { ldemul_hll((char *)NULL); }
    break;

  case 193:
#line 743 "ldgram.y"
    { ldemul_hll((yyvsp[0].name)); }
    break;

  case 194:
#line 745 "ldgram.y"
    { ldemul_hll((yyvsp[0].name)); }
    break;

  case 196:
#line 753 "ldgram.y"
    { ldemul_syslib((yyvsp[0].name)); }
    break;

  case 198:
#line 759 "ldgram.y"
    { lang_float(TRUE); }
    break;

  case 199:
#line 761 "ldgram.y"
    { lang_float(FALSE); }
    break;

  case 200:
#line 766 "ldgram.y"
    {
		  (yyval.nocrossref) = NULL;
		}
    break;

  case 201:
#line 770 "ldgram.y"
    {
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = (yyvsp[-1].name);
		  n->next = (yyvsp[0].nocrossref);
		  (yyval.nocrossref) = n;
		}
    break;

  case 202:
#line 779 "ldgram.y"
    {
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = (yyvsp[-2].name);
		  n->next = (yyvsp[0].nocrossref);
		  (yyval.nocrossref) = n;
		}
    break;

  case 203:
#line 789 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 204:
#line 791 "ldgram.y"
    { ldlex_popstate (); (yyval.etree)=(yyvsp[0].etree);}
    break;

  case 205:
#line 796 "ldgram.y"
    { (yyval.etree) = exp_unop ('-', (yyvsp[0].etree)); }
    break;

  case 206:
#line 798 "ldgram.y"
    { (yyval.etree) = (yyvsp[-1].etree); }
    break;

  case 207:
#line 800 "ldgram.y"
    { (yyval.etree) = exp_unop ((int) (yyvsp[-3].integer),(yyvsp[-1].etree)); }
    break;

  case 208:
#line 802 "ldgram.y"
    { (yyval.etree) = exp_unop ('!', (yyvsp[0].etree)); }
    break;

  case 209:
#line 804 "ldgram.y"
    { (yyval.etree) = (yyvsp[0].etree); }
    break;

  case 210:
#line 806 "ldgram.y"
    { (yyval.etree) = exp_unop ('~', (yyvsp[0].etree));}
    break;

  case 211:
#line 809 "ldgram.y"
    { (yyval.etree) = exp_binop ('*', (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 212:
#line 811 "ldgram.y"
    { (yyval.etree) = exp_binop ('/', (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 213:
#line 813 "ldgram.y"
    { (yyval.etree) = exp_binop ('%', (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 214:
#line 815 "ldgram.y"
    { (yyval.etree) = exp_binop ('+', (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 215:
#line 817 "ldgram.y"
    { (yyval.etree) = exp_binop ('-' , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 216:
#line 819 "ldgram.y"
    { (yyval.etree) = exp_binop (LSHIFT , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 217:
#line 821 "ldgram.y"
    { (yyval.etree) = exp_binop (RSHIFT , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 218:
#line 823 "ldgram.y"
    { (yyval.etree) = exp_binop (EQ , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 219:
#line 825 "ldgram.y"
    { (yyval.etree) = exp_binop (NE , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 220:
#line 827 "ldgram.y"
    { (yyval.etree) = exp_binop (LE , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 221:
#line 829 "ldgram.y"
    { (yyval.etree) = exp_binop (GE , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 222:
#line 831 "ldgram.y"
    { (yyval.etree) = exp_binop ('<' , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 223:
#line 833 "ldgram.y"
    { (yyval.etree) = exp_binop ('>' , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 224:
#line 835 "ldgram.y"
    { (yyval.etree) = exp_binop ('&' , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 225:
#line 837 "ldgram.y"
    { (yyval.etree) = exp_binop ('^' , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 226:
#line 839 "ldgram.y"
    { (yyval.etree) = exp_binop ('|' , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 227:
#line 841 "ldgram.y"
    { (yyval.etree) = exp_trinop ('?' , (yyvsp[-4].etree), (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 228:
#line 843 "ldgram.y"
    { (yyval.etree) = exp_binop (ANDAND , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 229:
#line 845 "ldgram.y"
    { (yyval.etree) = exp_binop (OROR , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 230:
#line 847 "ldgram.y"
    { (yyval.etree) = exp_nameop (DEFINED, (yyvsp[-1].name)); }
    break;

  case 231:
#line 849 "ldgram.y"
    { (yyval.etree) = exp_bigintop ((yyvsp[0].bigint).integer, (yyvsp[0].bigint).str); }
    break;

  case 232:
#line 851 "ldgram.y"
    { (yyval.etree) = exp_nameop (SIZEOF_HEADERS,0); }
    break;

  case 233:
#line 854 "ldgram.y"
    { (yyval.etree) = exp_nameop (ALIGNOF,(yyvsp[-1].name)); }
    break;

  case 234:
#line 856 "ldgram.y"
    { (yyval.etree) = exp_nameop (SIZEOF,(yyvsp[-1].name)); }
    break;

  case 235:
#line 858 "ldgram.y"
    { (yyval.etree) = exp_nameop (ADDR,(yyvsp[-1].name)); }
    break;

  case 236:
#line 860 "ldgram.y"
    { (yyval.etree) = exp_nameop (LOADADDR,(yyvsp[-1].name)); }
    break;

  case 237:
#line 862 "ldgram.y"
    { (yyval.etree) = exp_nameop (CONSTANT,(yyvsp[-1].name)); }
    break;

  case 238:
#line 864 "ldgram.y"
    { (yyval.etree) = exp_unop (ABSOLUTE, (yyvsp[-1].etree)); }
    break;

  case 239:
#line 866 "ldgram.y"
    { (yyval.etree) = exp_unop (ALIGN_K,(yyvsp[-1].etree)); }
    break;

  case 240:
#line 868 "ldgram.y"
    { (yyval.etree) = exp_binop (ALIGN_K,(yyvsp[-3].etree),(yyvsp[-1].etree)); }
    break;

  case 241:
#line 870 "ldgram.y"
    { (yyval.etree) = exp_binop (DATA_SEGMENT_ALIGN, (yyvsp[-3].etree), (yyvsp[-1].etree)); }
    break;

  case 242:
#line 872 "ldgram.y"
    { (yyval.etree) = exp_binop (DATA_SEGMENT_RELRO_END, (yyvsp[-1].etree), (yyvsp[-3].etree)); }
    break;

  case 243:
#line 874 "ldgram.y"
    { (yyval.etree) = exp_unop (DATA_SEGMENT_END, (yyvsp[-1].etree)); }
    break;

  case 244:
#line 876 "ldgram.y"
    { /* The operands to the expression node are
			     placed in the opposite order from the way
			     in which they appear in the script as
			     that allows us to reuse more code in
			     fold_binary.  */
			  (yyval.etree) = exp_binop (SEGMENT_START,
					  (yyvsp[-1].etree),
					  exp_nameop (NAME, (yyvsp[-3].name))); }
    break;

  case 245:
#line 885 "ldgram.y"
    { (yyval.etree) = exp_unop (ALIGN_K,(yyvsp[-1].etree)); }
    break;

  case 246:
#line 887 "ldgram.y"
    { (yyval.etree) = exp_nameop (NAME,(yyvsp[0].name)); }
    break;

  case 247:
#line 889 "ldgram.y"
    { (yyval.etree) = exp_binop (MAX_K, (yyvsp[-3].etree), (yyvsp[-1].etree) ); }
    break;

  case 248:
#line 891 "ldgram.y"
    { (yyval.etree) = exp_binop (MIN_K, (yyvsp[-3].etree), (yyvsp[-1].etree) ); }
    break;

  case 249:
#line 893 "ldgram.y"
    { (yyval.etree) = exp_assert ((yyvsp[-3].etree), (yyvsp[-1].name)); }
    break;

  case 250:
#line 895 "ldgram.y"
    { (yyval.etree) = exp_nameop (ORIGIN, (yyvsp[-1].name)); }
    break;

  case 251:
#line 897 "ldgram.y"
    { (yyval.etree) = exp_nameop (LENGTH, (yyvsp[-1].name)); }
    break;

  case 252:
#line 902 "ldgram.y"
    { (yyval.name) = (yyvsp[0].name); }
    break;

  case 253:
#line 903 "ldgram.y"
    { (yyval.name) = 0; }
    break;

  case 254:
#line 907 "ldgram.y"
    { (yyval.etree) = (yyvsp[-1].etree); }
    break;

  case 255:
#line 908 "ldgram.y"
    { (yyval.etree) = 0; }
    break;

  case 256:
#line 912 "ldgram.y"
    { (yyval.etree) = (yyvsp[-1].etree); }
    break;

  case 257:
#line 913 "ldgram.y"
    { (yyval.etree) = 0; }
    break;

  case 258:
#line 917 "ldgram.y"
    { (yyval.etree) = (yyvsp[-1].etree); }
    break;

  case 259:
#line 918 "ldgram.y"
    { (yyval.etree) = 0; }
    break;

  case 260:
#line 922 "ldgram.y"
    { (yyval.token) = ONLY_IF_RO; }
    break;

  case 261:
#line 923 "ldgram.y"
    { (yyval.token) = ONLY_IF_RW; }
    break;

  case 262:
#line 924 "ldgram.y"
    { (yyval.token) = SPECIAL; }
    break;

  case 263:
#line 925 "ldgram.y"
    { (yyval.token) = 0; }
    break;

  case 264:
#line 928 "ldgram.y"
    { ldlex_expression(); }
    break;

  case 265:
#line 932 "ldgram.y"
    { ldlex_popstate (); ldlex_script (); }
    break;

  case 266:
#line 935 "ldgram.y"
    {
			  lang_enter_output_section_statement((yyvsp[-8].name), (yyvsp[-6].etree),
							      sectype,
							      (yyvsp[-4].etree), (yyvsp[-3].etree), (yyvsp[-5].etree), (yyvsp[-1].token));
			}
    break;

  case 267:
#line 941 "ldgram.y"
    { ldlex_popstate (); ldlex_expression (); }
    break;

  case 268:
#line 943 "ldgram.y"
    {
		  ldlex_popstate ();
		  lang_leave_output_section_statement ((yyvsp[0].fill), (yyvsp[-3].name), (yyvsp[-1].section_phdr), (yyvsp[-2].name));
		}
    break;

  case 269:
#line 948 "ldgram.y"
    {}
    break;

  case 270:
#line 950 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 271:
#line 952 "ldgram.y"
    { ldlex_popstate (); ldlex_script (); }
    break;

  case 272:
#line 954 "ldgram.y"
    {
			  lang_enter_overlay ((yyvsp[-5].etree), (yyvsp[-2].etree));
			}
    break;

  case 273:
#line 959 "ldgram.y"
    { ldlex_popstate (); ldlex_expression (); }
    break;

  case 274:
#line 961 "ldgram.y"
    {
			  ldlex_popstate ();
			  lang_leave_overlay ((yyvsp[-11].etree), (int) (yyvsp[-12].integer),
					      (yyvsp[0].fill), (yyvsp[-3].name), (yyvsp[-1].section_phdr), (yyvsp[-2].name));
			}
    break;

  case 276:
#line 971 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 277:
#line 973 "ldgram.y"
    {
		  ldlex_popstate ();
		  lang_add_assignment (exp_assop ('=', ".", (yyvsp[0].etree)));
		}
    break;

  case 279:
#line 979 "ldgram.y"
    { ldlex_script (); ldfile_open_command_file((yyvsp[0].name)); }
    break;

  case 280:
#line 981 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 281:
#line 985 "ldgram.y"
    { sectype = noload_section; }
    break;

  case 282:
#line 986 "ldgram.y"
    { sectype = noalloc_section; }
    break;

  case 283:
#line 987 "ldgram.y"
    { sectype = noalloc_section; }
    break;

  case 284:
#line 988 "ldgram.y"
    { sectype = noalloc_section; }
    break;

  case 285:
#line 989 "ldgram.y"
    { sectype = noalloc_section; }
    break;

  case 287:
#line 994 "ldgram.y"
    { sectype = normal_section; }
    break;

  case 288:
#line 995 "ldgram.y"
    { sectype = normal_section; }
    break;

  case 289:
#line 999 "ldgram.y"
    { (yyval.etree) = (yyvsp[-2].etree); }
    break;

  case 290:
#line 1000 "ldgram.y"
    { (yyval.etree) = (etree_type *)NULL;  }
    break;

  case 291:
#line 1005 "ldgram.y"
    { (yyval.etree) = (yyvsp[-3].etree); }
    break;

  case 292:
#line 1007 "ldgram.y"
    { (yyval.etree) = (yyvsp[-7].etree); }
    break;

  case 293:
#line 1011 "ldgram.y"
    { (yyval.etree) = (yyvsp[-1].etree); }
    break;

  case 294:
#line 1012 "ldgram.y"
    { (yyval.etree) = (etree_type *) NULL;  }
    break;

  case 295:
#line 1017 "ldgram.y"
    { (yyval.integer) = 0; }
    break;

  case 296:
#line 1019 "ldgram.y"
    { (yyval.integer) = 1; }
    break;

  case 297:
#line 1024 "ldgram.y"
    { (yyval.name) = (yyvsp[0].name); }
    break;

  case 298:
#line 1025 "ldgram.y"
    { (yyval.name) = DEFAULT_MEMORY_REGION; }
    break;

  case 299:
#line 1030 "ldgram.y"
    {
		  (yyval.section_phdr) = NULL;
		}
    break;

  case 300:
#line 1034 "ldgram.y"
    {
		  struct lang_output_section_phdr_list *n;

		  n = ((struct lang_output_section_phdr_list *)
		       xmalloc (sizeof *n));
		  n->name = (yyvsp[0].name);
		  n->used = FALSE;
		  n->next = (yyvsp[-2].section_phdr);
		  (yyval.section_phdr) = n;
		}
    break;

  case 302:
#line 1050 "ldgram.y"
    {
			  ldlex_script ();
			  lang_enter_overlay_section ((yyvsp[0].name));
			}
    break;

  case 303:
#line 1055 "ldgram.y"
    { ldlex_popstate (); ldlex_expression (); }
    break;

  case 304:
#line 1057 "ldgram.y"
    {
			  ldlex_popstate ();
			  lang_leave_overlay_section ((yyvsp[0].fill), (yyvsp[-1].section_phdr));
			}
    break;

  case 309:
#line 1074 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 310:
#line 1075 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 311:
#line 1077 "ldgram.y"
    {
		  lang_new_phdr ((yyvsp[-5].name), (yyvsp[-3].etree), (yyvsp[-2].phdr).filehdr, (yyvsp[-2].phdr).phdrs, (yyvsp[-2].phdr).at,
				 (yyvsp[-2].phdr).flags);
		}
    break;

  case 312:
#line 1085 "ldgram.y"
    {
		  (yyval.etree) = (yyvsp[0].etree);

		  if ((yyvsp[0].etree)->type.node_class == etree_name
		      && (yyvsp[0].etree)->type.node_code == NAME)
		    {
		      const char *s;
		      unsigned int i;
		      static const char * const phdr_types[] =
			{
			  "PT_NULL", "PT_LOAD", "PT_DYNAMIC",
			  "PT_INTERP", "PT_NOTE", "PT_SHLIB",
			  "PT_PHDR", "PT_TLS"
			};

		      s = (yyvsp[0].etree)->name.name;
		      for (i = 0;
			   i < sizeof phdr_types / sizeof phdr_types[0];
			   i++)
			if (strcmp (s, phdr_types[i]) == 0)
			  {
			    (yyval.etree) = exp_intop (i);
			    break;
			  }
		      if (i == sizeof phdr_types / sizeof phdr_types[0])
			{
			  if (strcmp (s, "PT_GNU_EH_FRAME") == 0)
			    (yyval.etree) = exp_intop (0x6474e550);
			  else if (strcmp (s, "PT_GNU_STACK") == 0)
			    (yyval.etree) = exp_intop (0x6474e551);
			  else
			    {
			      einfo (_("\
%X%P:%S: unknown phdr type `%s' (try integer literal)\n"),
				     s);
			      (yyval.etree) = exp_intop (0);
			    }
			}
		    }
		}
    break;

  case 313:
#line 1129 "ldgram.y"
    {
		  memset (&(yyval.phdr), 0, sizeof (struct phdr_info));
		}
    break;

  case 314:
#line 1133 "ldgram.y"
    {
		  (yyval.phdr) = (yyvsp[0].phdr);
		  if (strcmp ((yyvsp[-2].name), "FILEHDR") == 0 && (yyvsp[-1].etree) == NULL)
		    (yyval.phdr).filehdr = TRUE;
		  else if (strcmp ((yyvsp[-2].name), "PHDRS") == 0 && (yyvsp[-1].etree) == NULL)
		    (yyval.phdr).phdrs = TRUE;
		  else if (strcmp ((yyvsp[-2].name), "FLAGS") == 0 && (yyvsp[-1].etree) != NULL)
		    (yyval.phdr).flags = (yyvsp[-1].etree);
		  else
		    einfo (_("%X%P:%S: PHDRS syntax error at `%s'\n"), (yyvsp[-2].name));
		}
    break;

  case 315:
#line 1145 "ldgram.y"
    {
		  (yyval.phdr) = (yyvsp[0].phdr);
		  (yyval.phdr).at = (yyvsp[-2].etree);
		}
    break;

  case 316:
#line 1153 "ldgram.y"
    {
		  (yyval.etree) = NULL;
		}
    break;

  case 317:
#line 1157 "ldgram.y"
    {
		  (yyval.etree) = (yyvsp[-1].etree);
		}
    break;

  case 318:
#line 1163 "ldgram.y"
    {
		  ldlex_version_file ();
		  PUSH_ERROR (_("dynamic list"));
		}
    break;

  case 319:
#line 1168 "ldgram.y"
    {
		  ldlex_popstate ();
		  POP_ERROR ();
		}
    break;

  case 323:
#line 1185 "ldgram.y"
    {
		  lang_append_dynamic_list ((yyvsp[-1].versyms));
		}
    break;

  case 324:
#line 1193 "ldgram.y"
    {
		  ldlex_version_file ();
		  PUSH_ERROR (_("VERSION script"));
		}
    break;

  case 325:
#line 1198 "ldgram.y"
    {
		  ldlex_popstate ();
		  POP_ERROR ();
		}
    break;

  case 326:
#line 1207 "ldgram.y"
    {
		  ldlex_version_script ();
		}
    break;

  case 327:
#line 1211 "ldgram.y"
    {
		  ldlex_popstate ();
		}
    break;

  case 330:
#line 1223 "ldgram.y"
    {
		  lang_register_vers_node (NULL, (yyvsp[-2].versnode), NULL);
		}
    break;

  case 331:
#line 1227 "ldgram.y"
    {
		  lang_register_vers_node ((yyvsp[-4].name), (yyvsp[-2].versnode), NULL);
		}
    break;

  case 332:
#line 1231 "ldgram.y"
    {
		  lang_register_vers_node ((yyvsp[-5].name), (yyvsp[-3].versnode), (yyvsp[-1].deflist));
		}
    break;

  case 333:
#line 1238 "ldgram.y"
    {
		  (yyval.deflist) = lang_add_vers_depend (NULL, (yyvsp[0].name));
		}
    break;

  case 334:
#line 1242 "ldgram.y"
    {
		  (yyval.deflist) = lang_add_vers_depend ((yyvsp[-1].deflist), (yyvsp[0].name));
		}
    break;

  case 335:
#line 1249 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node (NULL, NULL);
		}
    break;

  case 336:
#line 1253 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node ((yyvsp[-1].versyms), NULL);
		}
    break;

  case 337:
#line 1257 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node ((yyvsp[-1].versyms), NULL);
		}
    break;

  case 338:
#line 1261 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node (NULL, (yyvsp[-1].versyms));
		}
    break;

  case 339:
#line 1265 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node ((yyvsp[-5].versyms), (yyvsp[-1].versyms));
		}
    break;

  case 340:
#line 1272 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, (yyvsp[0].name), ldgram_vers_current_lang, FALSE);
		}
    break;

  case 341:
#line 1276 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, (yyvsp[0].name), ldgram_vers_current_lang, TRUE);
		}
    break;

  case 342:
#line 1280 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[-2].versyms), (yyvsp[0].name), ldgram_vers_current_lang, FALSE);
		}
    break;

  case 343:
#line 1284 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[-2].versyms), (yyvsp[0].name), ldgram_vers_current_lang, TRUE);
		}
    break;

  case 344:
#line 1288 "ldgram.y"
    {
			  (yyval.name) = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = (yyvsp[-1].name);
			}
    break;

  case 345:
#line 1293 "ldgram.y"
    {
			  struct bfd_elf_version_expr *pat;
			  for (pat = (yyvsp[-2].versyms); pat->next != NULL; pat = pat->next);
			  pat->next = (yyvsp[-8].versyms);
			  (yyval.versyms) = (yyvsp[-2].versyms);
			  ldgram_vers_current_lang = (yyvsp[-3].name);
			}
    break;

  case 346:
#line 1301 "ldgram.y"
    {
			  (yyval.name) = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = (yyvsp[-1].name);
			}
    break;

  case 347:
#line 1306 "ldgram.y"
    {
			  (yyval.versyms) = (yyvsp[-2].versyms);
			  ldgram_vers_current_lang = (yyvsp[-3].name);
			}
    break;

  case 348:
#line 1311 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, "global", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 349:
#line 1315 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[-2].versyms), "global", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 350:
#line 1319 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, "local", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 351:
#line 1323 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[-2].versyms), "local", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 352:
#line 1327 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, "extern", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 353:
#line 1331 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[-2].versyms), "extern", ldgram_vers_current_lang, FALSE);
		}
    break;


      default: break;
    }

/* Line 1126 of yacc.c.  */
#line 4025 "ldgram.c"

  yyvsp -= yylen;
  yyssp -= yylen;


  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (YYPACT_NINF < yyn && yyn < YYLAST)
	{
	  int yytype = YYTRANSLATE (yychar);
	  YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
	  YYSIZE_T yysize = yysize0;
	  YYSIZE_T yysize1;
	  int yysize_overflow = 0;
	  char *yymsg = 0;
#	  define YYERROR_VERBOSE_ARGS_MAXIMUM 5
	  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
	  int yyx;

#if 0
	  /* This is so xgettext sees the translatable formats that are
	     constructed on the fly.  */
	  YY_("syntax error, unexpected %s");
	  YY_("syntax error, unexpected %s, expecting %s");
	  YY_("syntax error, unexpected %s, expecting %s or %s");
	  YY_("syntax error, unexpected %s, expecting %s or %s or %s");
	  YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
#endif
	  char *yyfmt;
	  char const *yyf;
	  static char const yyunexpected[] = "syntax error, unexpected %s";
	  static char const yyexpecting[] = ", expecting %s";
	  static char const yyor[] = " or %s";
	  char yyformat[sizeof yyunexpected
			+ sizeof yyexpecting - 1
			+ ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
			   * (sizeof yyor - 1))];
	  char const *yyprefix = yyexpecting;

	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 1;

	  yyarg[0] = yytname[yytype];
	  yyfmt = yystpcpy (yyformat, yyunexpected);

	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      {
		if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
		  {
		    yycount = 1;
		    yysize = yysize0;
		    yyformat[sizeof yyunexpected - 1] = '\0';
		    break;
		  }
		yyarg[yycount++] = yytname[yyx];
		yysize1 = yysize + yytnamerr (0, yytname[yyx]);
		yysize_overflow |= yysize1 < yysize;
		yysize = yysize1;
		yyfmt = yystpcpy (yyfmt, yyprefix);
		yyprefix = yyor;
	      }

	  yyf = YY_(yyformat);
	  yysize1 = yysize + yystrlen (yyf);
	  yysize_overflow |= yysize1 < yysize;
	  yysize = yysize1;

	  if (!yysize_overflow && yysize <= YYSTACK_ALLOC_MAXIMUM)
	    yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg)
	    {
	      /* Avoid sprintf, as that infringes on the user's name space.
		 Don't have undefined behavior even if the translation
		 produced a string with the wrong number of "%s"s.  */
	      char *yyp = yymsg;
	      int yyi = 0;
	      while ((*yyp = *yyf))
		{
		  if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		    {
		      yyp += yytnamerr (yyp, yyarg[yyi++]);
		      yyf += 2;
		    }
		  else
		    {
		      yyp++;
		      yyf++;
		    }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    {
	      yyerror (YY_("syntax error"));
	      goto yyexhaustedlab;
	    }
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror (YY_("syntax error"));
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
        {
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
        }
      else
	{
	  yydestruct ("Error: discarding", yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (0)
     goto yyerrorlab;

yyvsp -= yylen;
  yyssp -= yylen;
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping", yystos[yystate], yyvsp);
      YYPOPSTACK;
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token. */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK;
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}


#line 1341 "ldgram.y"

void
yyerror(arg)
     const char *arg;
{
  if (ldfile_assumed_script)
    einfo (_("%P:%s: file format not recognized; treating as linker script\n"),
	   ldfile_input_filename);
  if (error_index > 0 && error_index < ERROR_NAME_MAX)
     einfo ("%P%F:%S: %s in %s\n", arg, error_names[error_index-1]);
  else
     einfo ("%P%F:%S: %s\n", arg);
}

@


1.1.18.1
log
@Commit generated files for binutils 2.17.90.
@
text
@a0 4405
/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     INT = 258,
     NAME = 259,
     LNAME = 260,
     OREQ = 261,
     ANDEQ = 262,
     RSHIFTEQ = 263,
     LSHIFTEQ = 264,
     DIVEQ = 265,
     MULTEQ = 266,
     MINUSEQ = 267,
     PLUSEQ = 268,
     OROR = 269,
     ANDAND = 270,
     NE = 271,
     EQ = 272,
     GE = 273,
     LE = 274,
     RSHIFT = 275,
     LSHIFT = 276,
     UNARY = 277,
     END = 278,
     ALIGN_K = 279,
     BLOCK = 280,
     BIND = 281,
     QUAD = 282,
     SQUAD = 283,
     LONG = 284,
     SHORT = 285,
     BYTE = 286,
     SECTIONS = 287,
     PHDRS = 288,
     DATA_SEGMENT_ALIGN = 289,
     DATA_SEGMENT_RELRO_END = 290,
     DATA_SEGMENT_END = 291,
     SORT_BY_NAME = 292,
     SORT_BY_ALIGNMENT = 293,
     SIZEOF_HEADERS = 294,
     OUTPUT_FORMAT = 295,
     FORCE_COMMON_ALLOCATION = 296,
     OUTPUT_ARCH = 297,
     INHIBIT_COMMON_ALLOCATION = 298,
     SEGMENT_START = 299,
     INCLUDE = 300,
     MEMORY = 301,
     NOLOAD = 302,
     DSECT = 303,
     COPY = 304,
     INFO = 305,
     OVERLAY = 306,
     DEFINED = 307,
     TARGET_K = 308,
     SEARCH_DIR = 309,
     MAP = 310,
     ENTRY = 311,
     NEXT = 312,
     SIZEOF = 313,
     ALIGNOF = 314,
     ADDR = 315,
     LOADADDR = 316,
     MAX_K = 317,
     MIN_K = 318,
     STARTUP = 319,
     HLL = 320,
     SYSLIB = 321,
     FLOAT = 322,
     NOFLOAT = 323,
     NOCROSSREFS = 324,
     ORIGIN = 325,
     FILL = 326,
     LENGTH = 327,
     CREATE_OBJECT_SYMBOLS = 328,
     INPUT = 329,
     GROUP = 330,
     OUTPUT = 331,
     CONSTRUCTORS = 332,
     ALIGNMOD = 333,
     AT = 334,
     SUBALIGN = 335,
     PROVIDE = 336,
     PROVIDE_HIDDEN = 337,
     AS_NEEDED = 338,
     CHIP = 339,
     LIST = 340,
     SECT = 341,
     ABSOLUTE = 342,
     LOAD = 343,
     NEWLINE = 344,
     ENDWORD = 345,
     ORDER = 346,
     NAMEWORD = 347,
     ASSERT_K = 348,
     FORMAT = 349,
     PUBLIC = 350,
     DEFSYMEND = 351,
     BASE = 352,
     ALIAS = 353,
     TRUNCATE = 354,
     REL = 355,
     INPUT_SCRIPT = 356,
     INPUT_MRI_SCRIPT = 357,
     INPUT_DEFSYM = 358,
     CASE = 359,
     EXTERN = 360,
     START = 361,
     VERS_TAG = 362,
     VERS_IDENTIFIER = 363,
     GLOBAL = 364,
     LOCAL = 365,
     VERSIONK = 366,
     INPUT_VERSION_SCRIPT = 367,
     KEEP = 368,
     ONLY_IF_RO = 369,
     ONLY_IF_RW = 370,
     SPECIAL = 371,
     EXCLUDE_FILE = 372,
     CONSTANT = 373,
     INPUT_DYNAMIC_LIST = 374
   };
#endif
/* Tokens.  */
#define INT 258
#define NAME 259
#define LNAME 260
#define OREQ 261
#define ANDEQ 262
#define RSHIFTEQ 263
#define LSHIFTEQ 264
#define DIVEQ 265
#define MULTEQ 266
#define MINUSEQ 267
#define PLUSEQ 268
#define OROR 269
#define ANDAND 270
#define NE 271
#define EQ 272
#define GE 273
#define LE 274
#define RSHIFT 275
#define LSHIFT 276
#define UNARY 277
#define END 278
#define ALIGN_K 279
#define BLOCK 280
#define BIND 281
#define QUAD 282
#define SQUAD 283
#define LONG 284
#define SHORT 285
#define BYTE 286
#define SECTIONS 287
#define PHDRS 288
#define DATA_SEGMENT_ALIGN 289
#define DATA_SEGMENT_RELRO_END 290
#define DATA_SEGMENT_END 291
#define SORT_BY_NAME 292
#define SORT_BY_ALIGNMENT 293
#define SIZEOF_HEADERS 294
#define OUTPUT_FORMAT 295
#define FORCE_COMMON_ALLOCATION 296
#define OUTPUT_ARCH 297
#define INHIBIT_COMMON_ALLOCATION 298
#define SEGMENT_START 299
#define INCLUDE 300
#define MEMORY 301
#define NOLOAD 302
#define DSECT 303
#define COPY 304
#define INFO 305
#define OVERLAY 306
#define DEFINED 307
#define TARGET_K 308
#define SEARCH_DIR 309
#define MAP 310
#define ENTRY 311
#define NEXT 312
#define SIZEOF 313
#define ALIGNOF 314
#define ADDR 315
#define LOADADDR 316
#define MAX_K 317
#define MIN_K 318
#define STARTUP 319
#define HLL 320
#define SYSLIB 321
#define FLOAT 322
#define NOFLOAT 323
#define NOCROSSREFS 324
#define ORIGIN 325
#define FILL 326
#define LENGTH 327
#define CREATE_OBJECT_SYMBOLS 328
#define INPUT 329
#define GROUP 330
#define OUTPUT 331
#define CONSTRUCTORS 332
#define ALIGNMOD 333
#define AT 334
#define SUBALIGN 335
#define PROVIDE 336
#define PROVIDE_HIDDEN 337
#define AS_NEEDED 338
#define CHIP 339
#define LIST 340
#define SECT 341
#define ABSOLUTE 342
#define LOAD 343
#define NEWLINE 344
#define ENDWORD 345
#define ORDER 346
#define NAMEWORD 347
#define ASSERT_K 348
#define FORMAT 349
#define PUBLIC 350
#define DEFSYMEND 351
#define BASE 352
#define ALIAS 353
#define TRUNCATE 354
#define REL 355
#define INPUT_SCRIPT 356
#define INPUT_MRI_SCRIPT 357
#define INPUT_DEFSYM 358
#define CASE 359
#define EXTERN 360
#define START 361
#define VERS_TAG 362
#define VERS_IDENTIFIER 363
#define GLOBAL 364
#define LOCAL 365
#define VERSIONK 366
#define INPUT_VERSION_SCRIPT 367
#define KEEP 368
#define ONLY_IF_RO 369
#define ONLY_IF_RW 370
#define SPECIAL 371
#define EXCLUDE_FILE 372
#define CONSTANT 373
#define INPUT_DYNAMIC_LIST 374




/* Copy the first part of user declarations.  */
#line 23 "ldgram.y"

/*

 */

#define DONTDECLARE_MALLOC

#include "sysdep.h"
#include "bfd.h"
#include "bfdlink.h"
#include "ld.h"
#include "ldexp.h"
#include "ldver.h"
#include "ldlang.h"
#include "ldfile.h"
#include "ldemul.h"
#include "ldmisc.h"
#include "ldmain.h"
#include "mri.h"
#include "ldctor.h"
#include "ldlex.h"

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

static enum section_type sectype;
static lang_memory_region_type *region;

FILE *saved_script_handle = NULL;
bfd_boolean force_make_executable = FALSE;

bfd_boolean ldgram_in_script = FALSE;
bfd_boolean ldgram_had_equals = FALSE;
bfd_boolean ldgram_had_keep = FALSE;
char *ldgram_vers_current_lang = NULL;

#define ERROR_NAME_MAX 20
static char *error_names[ERROR_NAME_MAX];
static int error_index;
#define PUSH_ERROR(x) if (error_index < ERROR_NAME_MAX) error_names[error_index] = x; error_index++;
#define POP_ERROR()   error_index--;


/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 66 "ldgram.y"
{
  bfd_vma integer;
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      bfd_boolean filehdr;
      bfd_boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
}
/* Line 187 of yacc.c.  */
#line 407 "ldgram.c"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 216 of yacc.c.  */
#line 420 "ldgram.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  17
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1716

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  143
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  122
/* YYNRULES -- Number of rules.  */
#define YYNRULES  346
/* YYNRULES -- Number of states.  */
#define YYNSTATES  737

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   374

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   141,     2,     2,     2,    34,    21,     2,
      37,   138,    32,    30,   136,    31,     2,    33,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    16,   137,
      24,     6,    25,    15,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   139,     2,   140,    20,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    53,    19,    54,   142,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     7,     8,     9,    10,    11,    12,    13,    14,    17,
      18,    22,    23,    26,    27,    28,    29,    35,    36,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    15,    18,    20,    21,
      26,    27,    30,    34,    35,    38,    43,    45,    47,    50,
      52,    57,    62,    66,    69,    74,    78,    83,    88,    93,
      98,   103,   106,   109,   112,   117,   122,   125,   128,   131,
     134,   135,   141,   144,   145,   149,   152,   153,   155,   159,
     161,   165,   166,   168,   172,   173,   176,   178,   181,   185,
     186,   189,   192,   193,   195,   197,   199,   201,   203,   205,
     207,   209,   211,   213,   218,   223,   228,   233,   242,   247,
     249,   251,   256,   257,   263,   268,   269,   275,   280,   285,
     287,   291,   294,   296,   300,   303,   304,   310,   311,   319,
     320,   327,   332,   335,   338,   339,   344,   347,   348,   356,
     358,   360,   362,   364,   370,   375,   380,   388,   396,   404,
     412,   421,   424,   426,   430,   432,   434,   438,   443,   445,
     446,   452,   455,   457,   459,   461,   466,   468,   473,   478,
     479,   488,   491,   493,   494,   496,   498,   500,   502,   504,
     506,   508,   511,   512,   514,   516,   518,   520,   522,   524,
     526,   528,   530,   532,   536,   540,   547,   554,   556,   557,
     563,   566,   570,   571,   572,   580,   584,   588,   589,   593,
     595,   598,   600,   603,   608,   613,   617,   621,   623,   628,
     632,   633,   635,   637,   638,   641,   645,   646,   649,   652,
     656,   661,   664,   667,   670,   674,   678,   682,   686,   690,
     694,   698,   702,   706,   710,   714,   718,   722,   726,   730,
     734,   740,   744,   748,   753,   755,   757,   762,   767,   772,
     777,   782,   787,   792,   799,   806,   813,   818,   825,   830,
     832,   839,   846,   853,   858,   863,   867,   868,   873,   874,
     879,   880,   885,   886,   888,   890,   892,   893,   894,   895,
     896,   897,   898,   918,   919,   920,   921,   922,   923,   942,
     943,   944,   952,   954,   956,   958,   960,   962,   966,   967,
     970,   974,   977,   984,   995,   998,  1000,  1001,  1003,  1006,
    1007,  1008,  1012,  1013,  1014,  1015,  1016,  1028,  1033,  1034,
    1037,  1038,  1039,  1046,  1048,  1049,  1053,  1059,  1060,  1064,
    1065,  1068,  1070,  1073,  1078,  1081,  1082,  1085,  1086,  1092,
    1094,  1097,  1102,  1108,  1115,  1117,  1120,  1121,  1124,  1129,
    1134,  1143,  1145,  1147,  1151,  1155,  1156,  1166,  1167,  1175,
    1177,  1181,  1183,  1187,  1189,  1193,  1194
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     144,     0,    -1,   117,   160,    -1,   118,   148,    -1,   128,
     253,    -1,   135,   248,    -1,   119,   146,    -1,     4,    -1,
      -1,   147,     4,     6,   210,    -1,    -1,   149,   150,    -1,
     150,   151,   105,    -1,    -1,   100,   210,    -1,   100,   210,
     136,   210,    -1,     4,    -1,   101,    -1,   107,   153,    -1,
     106,    -1,   111,     4,     6,   210,    -1,   111,     4,   136,
     210,    -1,   111,     4,   210,    -1,   110,     4,    -1,   102,
       4,   136,   210,    -1,   102,     4,   210,    -1,   102,     4,
       6,   210,    -1,    38,     4,     6,   210,    -1,    38,     4,
     136,   210,    -1,    94,     4,     6,   210,    -1,    94,     4,
     136,   210,    -1,   103,   155,    -1,   104,   154,    -1,   108,
       4,    -1,   114,     4,   136,     4,    -1,   114,     4,   136,
       3,    -1,   113,   210,    -1,   115,     3,    -1,   120,   156,
      -1,   121,   157,    -1,    -1,    61,   145,   152,   150,    36,
      -1,   122,     4,    -1,    -1,   153,   136,     4,    -1,   153,
       4,    -1,    -1,     4,    -1,   154,   136,     4,    -1,     4,
      -1,   155,   136,     4,    -1,    -1,     4,    -1,   156,   136,
       4,    -1,    -1,   158,   159,    -1,     4,    -1,   159,     4,
      -1,   159,   136,     4,    -1,    -1,   161,   162,    -1,   162,
     163,    -1,    -1,   192,    -1,   170,    -1,   240,    -1,   201,
      -1,   202,    -1,   204,    -1,   206,    -1,   172,    -1,   255,
      -1,   137,    -1,    69,    37,     4,   138,    -1,    70,    37,
     145,   138,    -1,    92,    37,   145,   138,    -1,    56,    37,
       4,   138,    -1,    56,    37,     4,   136,     4,   136,     4,
     138,    -1,    58,    37,     4,   138,    -1,    57,    -1,    59,
      -1,    90,    37,   166,   138,    -1,    -1,    91,   164,    37,
     166,   138,    -1,    71,    37,   145,   138,    -1,    -1,    61,
     145,   165,   162,    36,    -1,    85,    37,   207,   138,    -1,
     121,    37,   157,   138,    -1,     4,    -1,   166,   136,     4,
      -1,   166,     4,    -1,     5,    -1,   166,   136,     5,    -1,
     166,     5,    -1,    -1,    99,    37,   167,   166,   138,    -1,
      -1,   166,   136,    99,    37,   168,   166,   138,    -1,    -1,
     166,    99,    37,   169,   166,   138,    -1,    46,    53,   171,
      54,    -1,   171,   216,    -1,   171,   172,    -1,    -1,    72,
      37,     4,   138,    -1,   190,   189,    -1,    -1,   109,   173,
      37,   210,   136,     4,   138,    -1,     4,    -1,    32,    -1,
      15,    -1,   174,    -1,   133,    37,   176,   138,   174,    -1,
      51,    37,   174,   138,    -1,    52,    37,   174,   138,    -1,
      51,    37,    52,    37,   174,   138,   138,    -1,    51,    37,
      51,    37,   174,   138,   138,    -1,    52,    37,    51,    37,
     174,   138,   138,    -1,    52,    37,    52,    37,   174,   138,
     138,    -1,    51,    37,   133,    37,   176,   138,   174,   138,
      -1,   176,   174,    -1,   174,    -1,   177,   191,   175,    -1,
     175,    -1,     4,    -1,   139,   177,   140,    -1,   175,    37,
     177,   138,    -1,   178,    -1,    -1,   129,    37,   180,   178,
     138,    -1,   190,   189,    -1,    89,    -1,   137,    -1,    93,
      -1,    51,    37,    93,   138,    -1,   179,    -1,   185,    37,
     208,   138,    -1,    87,    37,   186,   138,    -1,    -1,   109,
     182,    37,   210,   136,     4,   138,   189,    -1,   183,   181,
      -1,   181,    -1,    -1,   183,    -1,    41,    -1,    42,    -1,
      43,    -1,    44,    -1,    45,    -1,   208,    -1,     6,   186,
      -1,    -1,    14,    -1,    13,    -1,    12,    -1,    11,    -1,
      10,    -1,     9,    -1,     8,    -1,     7,    -1,   137,    -1,
     136,    -1,     4,     6,   208,    -1,     4,   188,   208,    -1,
      97,    37,     4,     6,   208,   138,    -1,    98,    37,     4,
       6,   208,   138,    -1,   136,    -1,    -1,    62,    53,   194,
     193,    54,    -1,   193,   194,    -1,   193,   136,   194,    -1,
      -1,    -1,     4,   195,   198,    16,   196,   191,   197,    -1,
      86,     6,   208,    -1,    88,     6,   208,    -1,    -1,    37,
     199,   138,    -1,   200,    -1,   199,   200,    -1,     4,    -1,
     141,     4,    -1,    80,    37,   145,   138,    -1,    81,    37,
     203,   138,    -1,    81,    37,   138,    -1,   203,   191,   145,
      -1,   145,    -1,    82,    37,   205,   138,    -1,   205,   191,
     145,    -1,    -1,    83,    -1,    84,    -1,    -1,     4,   207,
      -1,     4,   136,   207,    -1,    -1,   209,   210,    -1,    31,
     210,    -1,    37,   210,   138,    -1,    73,    37,   210,   138,
      -1,   141,   210,    -1,    30,   210,    -1,   142,   210,    -1,
     210,    32,   210,    -1,   210,    33,   210,    -1,   210,    34,
     210,    -1,   210,    30,   210,    -1,   210,    31,   210,    -1,
     210,    29,   210,    -1,   210,    28,   210,    -1,   210,    23,
     210,    -1,   210,    22,   210,    -1,   210,    27,   210,    -1,
     210,    26,   210,    -1,   210,    24,   210,    -1,   210,    25,
     210,    -1,   210,    21,   210,    -1,   210,    20,   210,    -1,
     210,    19,   210,    -1,   210,    15,   210,    16,   210,    -1,
     210,    18,   210,    -1,   210,    17,   210,    -1,    68,    37,
       4,   138,    -1,     3,    -1,    55,    -1,    75,    37,     4,
     138,    -1,    74,    37,     4,   138,    -1,    76,    37,     4,
     138,    -1,    77,    37,     4,   138,    -1,   134,    37,     4,
     138,    -1,   103,    37,   210,   138,    -1,    38,    37,   210,
     138,    -1,    38,    37,   210,   136,   210,   138,    -1,    48,
      37,   210,   136,   210,   138,    -1,    49,    37,   210,   136,
     210,   138,    -1,    50,    37,   210,   138,    -1,    60,    37,
       4,   136,   210,   138,    -1,    39,    37,   210,   138,    -1,
       4,    -1,    78,    37,   210,   136,   210,   138,    -1,    79,
      37,   210,   136,   210,   138,    -1,   109,    37,   210,   136,
       4,   138,    -1,    86,    37,     4,   138,    -1,    88,    37,
       4,   138,    -1,    95,    25,     4,    -1,    -1,    95,    37,
     210,   138,    -1,    -1,    38,    37,   210,   138,    -1,    -1,
      96,    37,   210,   138,    -1,    -1,   130,    -1,   131,    -1,
     132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,   217,
     231,   212,   213,   214,   218,   215,    53,   219,   184,    54,
     220,   234,   211,   235,   187,   221,   191,    -1,    -1,    -1,
      -1,    -1,    -1,    67,   222,   232,   233,   212,   214,   223,
      53,   224,   236,    54,   225,   234,   211,   235,   187,   226,
     191,    -1,    -1,    -1,    91,   227,   231,   228,    53,   171,
      54,    -1,    63,    -1,    64,    -1,    65,    -1,    66,    -1,
      67,    -1,    37,   229,   138,    -1,    -1,    37,   138,    -1,
     210,   230,    16,    -1,   230,    16,    -1,    40,    37,   210,
     138,   230,    16,    -1,    40,    37,   210,   138,    39,    37,
     210,   138,   230,    16,    -1,   210,    16,    -1,    16,    -1,
      -1,    85,    -1,    25,     4,    -1,    -1,    -1,   235,    16,
       4,    -1,    -1,    -1,    -1,    -1,   236,     4,   237,    53,
     184,    54,   238,   235,   187,   239,   191,    -1,    47,    53,
     241,    54,    -1,    -1,   241,   242,    -1,    -1,    -1,     4,
     243,   245,   246,   244,   137,    -1,   210,    -1,    -1,     4,
     247,   246,    -1,    95,    37,   210,   138,   246,    -1,    -1,
      37,   210,   138,    -1,    -1,   249,   250,    -1,   251,    -1,
     250,   251,    -1,    53,   252,    54,   137,    -1,   261,   137,
      -1,    -1,   254,   257,    -1,    -1,   256,   127,    53,   257,
      54,    -1,   258,    -1,   257,   258,    -1,    53,   260,    54,
     137,    -1,   123,    53,   260,    54,   137,    -1,   123,    53,
     260,    54,   259,   137,    -1,   123,    -1,   259,   123,    -1,
      -1,   261,   137,    -1,   125,    16,   261,   137,    -1,   126,
      16,   261,   137,    -1,   125,    16,   261,   137,   126,    16,
     261,   137,    -1,   124,    -1,     4,    -1,   261,   137,   124,
      -1,   261,   137,     4,    -1,    -1,   261,   137,   121,     4,
      53,   262,   261,   264,    54,    -1,    -1,   121,     4,    53,
     263,   261,   264,    54,    -1,   125,    -1,   261,   137,   125,
      -1,   126,    -1,   261,   137,   126,    -1,   121,    -1,   261,
     137,   121,    -1,    -1,   137,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   164,   164,   165,   166,   167,   168,   172,   176,   176,
     186,   186,   199,   200,   204,   205,   206,   209,   212,   213,
     214,   216,   218,   220,   222,   224,   226,   228,   230,   232,
     234,   236,   237,   238,   240,   242,   244,   246,   248,   249,
     251,   250,   254,   256,   260,   261,   262,   266,   268,   272,
     274,   279,   280,   281,   286,   286,   291,   293,   295,   300,
     300,   306,   307,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   324,   326,   328,   331,   333,   335,
     337,   339,   341,   340,   344,   347,   346,   350,   354,   358,
     361,   364,   367,   370,   373,   377,   376,   381,   380,   385,
     384,   391,   395,   396,   397,   401,   403,   404,   404,   412,
     416,   420,   427,   433,   439,   445,   451,   457,   463,   469,
     475,   484,   493,   504,   513,   524,   532,   536,   543,   545,
     544,   551,   552,   556,   557,   562,   567,   568,   573,   577,
     577,   583,   584,   587,   589,   593,   595,   597,   599,   601,
     606,   613,   615,   619,   621,   623,   625,   627,   629,   631,
     633,   638,   638,   643,   647,   655,   659,   667,   667,   671,
     675,   676,   677,   682,   681,   689,   697,   705,   706,   710,
     711,   715,   717,   722,   727,   728,   733,   735,   741,   743,
     745,   749,   751,   757,   760,   769,   780,   780,   786,   788,
     790,   792,   794,   796,   799,   801,   803,   805,   807,   809,
     811,   813,   815,   817,   819,   821,   823,   825,   827,   829,
     831,   833,   835,   837,   839,   841,   844,   846,   848,   850,
     852,   854,   856,   858,   860,   862,   864,   866,   875,   877,
     879,   881,   883,   885,   887,   893,   894,   898,   899,   903,
     904,   908,   909,   913,   914,   915,   916,   919,   923,   926,
     932,   934,   919,   941,   943,   945,   950,   952,   940,   962,
     964,   962,   972,   973,   974,   975,   976,   980,   981,   982,
     986,   987,   992,   993,   998,   999,  1004,  1005,  1010,  1012,
    1017,  1020,  1033,  1037,  1042,  1044,  1035,  1052,  1055,  1057,
    1061,  1062,  1061,  1071,  1116,  1119,  1131,  1140,  1143,  1150,
    1150,  1162,  1163,  1167,  1171,  1180,  1180,  1194,  1194,  1204,
    1205,  1209,  1213,  1217,  1224,  1228,  1236,  1239,  1243,  1247,
    1251,  1258,  1262,  1266,  1270,  1275,  1274,  1288,  1287,  1297,
    1301,  1305,  1309,  1313,  1317,  1323,  1325
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "INT", "NAME", "LNAME", "'='", "OREQ",
  "ANDEQ", "RSHIFTEQ", "LSHIFTEQ", "DIVEQ", "MULTEQ", "MINUSEQ", "PLUSEQ",
  "'?'", "':'", "OROR", "ANDAND", "'|'", "'^'", "'&'", "NE", "EQ", "'<'",
  "'>'", "GE", "LE", "RSHIFT", "LSHIFT", "'+'", "'-'", "'*'", "'/'", "'%'",
  "UNARY", "END", "'('", "ALIGN_K", "BLOCK", "BIND", "QUAD", "SQUAD",
  "LONG", "SHORT", "BYTE", "SECTIONS", "PHDRS", "DATA_SEGMENT_ALIGN",
  "DATA_SEGMENT_RELRO_END", "DATA_SEGMENT_END", "SORT_BY_NAME",
  "SORT_BY_ALIGNMENT", "'{'", "'}'", "SIZEOF_HEADERS", "OUTPUT_FORMAT",
  "FORCE_COMMON_ALLOCATION", "OUTPUT_ARCH", "INHIBIT_COMMON_ALLOCATION",
  "SEGMENT_START", "INCLUDE", "MEMORY", "NOLOAD", "DSECT", "COPY", "INFO",
  "OVERLAY", "DEFINED", "TARGET_K", "SEARCH_DIR", "MAP", "ENTRY", "NEXT",
  "SIZEOF", "ALIGNOF", "ADDR", "LOADADDR", "MAX_K", "MIN_K", "STARTUP",
  "HLL", "SYSLIB", "FLOAT", "NOFLOAT", "NOCROSSREFS", "ORIGIN", "FILL",
  "LENGTH", "CREATE_OBJECT_SYMBOLS", "INPUT", "GROUP", "OUTPUT",
  "CONSTRUCTORS", "ALIGNMOD", "AT", "SUBALIGN", "PROVIDE",
  "PROVIDE_HIDDEN", "AS_NEEDED", "CHIP", "LIST", "SECT", "ABSOLUTE",
  "LOAD", "NEWLINE", "ENDWORD", "ORDER", "NAMEWORD", "ASSERT_K", "FORMAT",
  "PUBLIC", "DEFSYMEND", "BASE", "ALIAS", "TRUNCATE", "REL",
  "INPUT_SCRIPT", "INPUT_MRI_SCRIPT", "INPUT_DEFSYM", "CASE", "EXTERN",
  "START", "VERS_TAG", "VERS_IDENTIFIER", "GLOBAL", "LOCAL", "VERSIONK",
  "INPUT_VERSION_SCRIPT", "KEEP", "ONLY_IF_RO", "ONLY_IF_RW", "SPECIAL",
  "EXCLUDE_FILE", "CONSTANT", "INPUT_DYNAMIC_LIST", "','", "';'", "')'",
  "'['", "']'", "'!'", "'~'", "$accept", "file", "filename", "defsym_expr",
  "@@1", "mri_script_file", "@@2", "mri_script_lines", "mri_script_command",
  "@@3", "ordernamelist", "mri_load_name_list", "mri_abs_name_list",
  "casesymlist", "extern_name_list", "@@4", "extern_name_list_body",
  "script_file", "@@5", "ifile_list", "ifile_p1", "@@6", "@@7", "input_list",
  "@@8", "@@9", "@@10", "sections", "sec_or_group_p1", "statement_anywhere",
  "@@11", "wildcard_name", "wildcard_spec", "exclude_name_list",
  "file_NAME_list", "input_section_spec_no_keep", "input_section_spec",
  "@@12", "statement", "@@13", "statement_list", "statement_list_opt",
  "length", "fill_exp", "fill_opt", "assign_op", "end", "assignment",
  "opt_comma", "memory", "memory_spec_list", "memory_spec", "@@14",
  "origin_spec", "length_spec", "attributes_opt", "attributes_list",
  "attributes_string", "startup", "high_level_library",
  "high_level_library_NAME_list", "low_level_library",
  "low_level_library_NAME_list", "floating_point_support",
  "nocrossref_list", "mustbe_exp", "@@15", "exp", "memspec_at_opt",
  "opt_at", "opt_align", "opt_subalign", "sect_constraint", "section",
  "@@16", "@@17", "@@18", "@@19", "@@20", "@@21", "@@22", "@@23", "@@24", "@@25",
  "@@26", "@@27", "type", "atype", "opt_exp_with_type",
  "opt_exp_without_type", "opt_nocrossrefs", "memspec_opt", "phdr_opt",
  "overlay_section", "@@28", "@@29", "@@30", "phdrs", "phdr_list", "phdr",
  "@@31", "@@32", "phdr_type", "phdr_qualifiers", "phdr_val",
  "dynamic_list_file", "@@33", "dynamic_list_nodes", "dynamic_list_node",
  "dynamic_list_tag", "version_script_file", "@@34", "version", "@@35",
  "vers_nodes", "vers_node", "verdep", "vers_tag", "vers_defns", "@@36",
  "@@37", "opt_semicolon", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,    61,   261,   262,   263,
     264,   265,   266,   267,   268,    63,    58,   269,   270,   124,
      94,    38,   271,   272,    60,    62,   273,   274,   275,   276,
      43,    45,    42,    47,    37,   277,   278,    40,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   123,   125,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    44,    59,    41,    91,
      93,    33,   126
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   143,   144,   144,   144,   144,   144,   145,   147,   146,
     149,   148,   150,   150,   151,   151,   151,   151,   151,   151,
     151,   151,   151,   151,   151,   151,   151,   151,   151,   151,
     151,   151,   151,   151,   151,   151,   151,   151,   151,   151,
     152,   151,   151,   151,   153,   153,   153,   154,   154,   155,
     155,   156,   156,   156,   158,   157,   159,   159,   159,   161,
     160,   162,   162,   163,   163,   163,   163,   163,   163,   163,
     163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
     163,   163,   164,   163,   163,   165,   163,   163,   163,   166,
     166,   166,   166,   166,   166,   167,   166,   168,   166,   169,
     166,   170,   171,   171,   171,   172,   172,   173,   172,   174,
     174,   174,   175,   175,   175,   175,   175,   175,   175,   175,
     175,   176,   176,   177,   177,   178,   178,   178,   179,   180,
     179,   181,   181,   181,   181,   181,   181,   181,   181,   182,
     181,   183,   183,   184,   184,   185,   185,   185,   185,   185,
     186,   187,   187,   188,   188,   188,   188,   188,   188,   188,
     188,   189,   189,   190,   190,   190,   190,   191,   191,   192,
     193,   193,   193,   195,   194,   196,   197,   198,   198,   199,
     199,   200,   200,   201,   202,   202,   203,   203,   204,   205,
     205,   206,   206,   207,   207,   207,   209,   208,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   211,   211,   212,   212,   213,
     213,   214,   214,   215,   215,   215,   215,   217,   218,   219,
     220,   221,   216,   222,   223,   224,   225,   226,   216,   227,
     228,   216,   229,   229,   229,   229,   229,   230,   230,   230,
     231,   231,   231,   231,   232,   232,   233,   233,   234,   234,
     235,   235,   236,   237,   238,   239,   236,   240,   241,   241,
     243,   244,   242,   245,   246,   246,   246,   247,   247,   249,
     248,   250,   250,   251,   252,   254,   253,   256,   255,   257,
     257,   258,   258,   258,   259,   259,   260,   260,   260,   260,
     260,   261,   261,   261,   261,   262,   261,   263,   261,   261,
     261,   261,   261,   261,   261,   264,   264
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     2,     2,     2,     1,     0,     4,
       0,     2,     3,     0,     2,     4,     1,     1,     2,     1,
       4,     4,     3,     2,     4,     3,     4,     4,     4,     4,
       4,     2,     2,     2,     4,     4,     2,     2,     2,     2,
       0,     5,     2,     0,     3,     2,     0,     1,     3,     1,
       3,     0,     1,     3,     0,     2,     1,     2,     3,     0,
       2,     2,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     4,     4,     4,     8,     4,     1,
       1,     4,     0,     5,     4,     0,     5,     4,     4,     1,
       3,     2,     1,     3,     2,     0,     5,     0,     7,     0,
       6,     4,     2,     2,     0,     4,     2,     0,     7,     1,
       1,     1,     1,     5,     4,     4,     7,     7,     7,     7,
       8,     2,     1,     3,     1,     1,     3,     4,     1,     0,
       5,     2,     1,     1,     1,     4,     1,     4,     4,     0,
       8,     2,     1,     0,     1,     1,     1,     1,     1,     1,
       1,     2,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     3,     6,     6,     1,     0,     5,
       2,     3,     0,     0,     7,     3,     3,     0,     3,     1,
       2,     1,     2,     4,     4,     3,     3,     1,     4,     3,
       0,     1,     1,     0,     2,     3,     0,     2,     2,     3,
       4,     2,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       5,     3,     3,     4,     1,     1,     4,     4,     4,     4,
       4,     4,     4,     6,     6,     6,     4,     6,     4,     1,
       6,     6,     6,     4,     4,     3,     0,     4,     0,     4,
       0,     4,     0,     1,     1,     1,     0,     0,     0,     0,
       0,     0,    19,     0,     0,     0,     0,     0,    18,     0,
       0,     7,     1,     1,     1,     1,     1,     3,     0,     2,
       3,     2,     6,    10,     2,     1,     0,     1,     2,     0,
       0,     3,     0,     0,     0,     0,    11,     4,     0,     2,
       0,     0,     6,     1,     0,     3,     5,     0,     3,     0,
       2,     1,     2,     4,     2,     0,     2,     0,     5,     1,
       2,     4,     5,     6,     1,     2,     0,     2,     4,     4,
       8,     1,     1,     3,     3,     0,     9,     0,     7,     1,
       3,     1,     3,     1,     3,     0,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,    59,    10,     8,   315,   309,     0,     2,    62,     3,
      13,     6,     0,     4,     0,     5,     0,     1,    60,    11,
       0,   326,     0,   316,   319,     0,   310,   311,     0,     0,
       0,     0,    79,     0,    80,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   191,   192,     0,     0,    82,     0,
       0,     0,   107,     0,    72,    61,    64,    70,     0,    63,
      66,    67,    68,    69,    65,    71,     0,    16,     0,     0,
       0,     0,    17,     0,     0,     0,    19,    46,     0,     0,
       0,     0,     0,     0,    51,    54,     0,     0,     0,   332,
     343,   331,   339,   341,     0,     0,   326,   320,   339,   341,
       0,     0,   312,   196,   160,   159,   158,   157,   156,   155,
     154,   153,   196,   104,   298,     0,     0,     7,    85,     0,
       0,     0,     0,     0,     0,     0,   190,   193,     0,     0,
       0,     0,     0,     0,    54,   162,   161,   106,     0,     0,
      40,     0,   224,   239,     0,     0,     0,     0,     0,     0,
       0,     0,   225,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    14,
       0,    49,    31,    47,    32,    18,    33,    23,     0,    36,
       0,    37,    52,    38,    39,     0,    42,    12,     9,     0,
       0,     0,     0,   327,     0,     0,   314,   163,     0,   164,
       0,     0,     0,     0,    62,   173,   172,     0,     0,     0,
       0,     0,   185,   187,   168,   168,   193,     0,    89,    92,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    13,     0,     0,   202,   198,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   201,   203,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      25,     0,     0,    45,     0,     0,     0,    22,     0,     0,
      56,    55,   337,     0,     0,   321,   334,   344,   333,   340,
     342,     0,   313,   197,   257,   101,   263,   269,   103,   102,
     300,   297,   299,     0,    76,    78,   317,   177,     0,    73,
      74,    84,   105,   183,   167,   184,     0,   188,     0,   193,
     194,    87,    95,    91,    94,     0,     0,    81,     0,    75,
     196,   196,     0,    88,     0,    27,    28,    43,    29,    30,
     199,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   222,   221,   219,   218,   217,   212,   211,   215,   216,
     214,   213,   210,   209,   207,   208,   204,   205,   206,    15,
      26,    24,    50,    48,    44,    20,    21,    35,    34,    53,
      57,     0,     0,   328,   329,     0,   324,   322,     0,   278,
       0,   278,     0,     0,    86,     0,     0,   169,     0,   170,
     186,   189,   195,     0,    99,    90,    93,     0,    83,     0,
       0,     0,   318,    41,     0,   232,   238,     0,     0,   236,
       0,   223,   200,   227,   226,   228,   229,     0,     0,   243,
     244,   231,     0,   230,     0,    58,   345,   342,   335,   325,
     323,     0,     0,   278,     0,   248,   285,     0,   286,   270,
     303,   304,     0,   181,     0,     0,   179,     0,   171,     0,
       0,    97,   165,   166,     0,     0,     0,     0,     0,     0,
       0,     0,   220,   346,     0,     0,     0,   272,   273,   274,
     275,   276,   279,     0,     0,     0,     0,   281,     0,   250,
     284,   287,   248,     0,   307,     0,   301,     0,   182,   178,
     180,     0,   168,    96,     0,     0,   108,   233,   234,   235,
     237,   240,   241,   242,   338,     0,   345,   277,     0,   280,
       0,     0,   252,   252,   104,     0,   304,     0,     0,    77,
     196,     0,   100,     0,   330,     0,   278,     0,     0,     0,
     258,   264,     0,     0,   305,     0,   302,   175,     0,   174,
      98,   336,     0,     0,   247,     0,     0,   256,     0,   271,
     308,   304,   196,     0,   282,   249,     0,   253,   254,   255,
       0,   265,   306,   176,     0,   251,   259,   292,   278,   143,
       0,     0,   125,   111,   110,   145,   146,   147,   148,   149,
       0,     0,     0,   132,   134,   139,     0,     0,   133,     0,
     112,     0,   128,   136,   142,   144,     0,     0,     0,   293,
     266,   283,     0,     0,   196,     0,   129,     0,   109,     0,
     124,   168,     0,   141,   260,   196,   131,     0,   289,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   150,     0,
       0,   122,     0,     0,   126,     0,   168,   289,     0,   143,
       0,   246,     0,     0,   135,     0,   114,     0,     0,   115,
     138,     0,   109,     0,     0,   121,   123,   127,   246,   137,
       0,   288,     0,   290,     0,     0,     0,     0,     0,     0,
     130,   113,   290,   294,     0,   152,     0,     0,     0,     0,
       0,     0,   152,   290,   245,   196,     0,   267,   117,   116,
       0,   118,   119,     0,   261,   152,   151,   291,   168,   120,
     140,   168,   295,   268,   262,   168,   296
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     6,   118,    11,    12,     9,    10,    19,    87,   231,
     175,   174,   172,   183,   184,   185,   291,     7,     8,    18,
      55,   129,   204,   221,   423,   525,   480,    56,   200,    57,
     133,   620,   621,   662,   641,   622,   623,   660,   624,   635,
     625,   626,   627,   657,   717,   112,   137,    58,   665,    59,
     318,   206,   317,   522,   569,   416,   475,   476,    60,    61,
     214,    62,   215,    63,   217,   658,   198,   236,   693,   509,
     542,   560,   590,   309,   409,   577,   599,   667,   731,   410,
     578,   597,   648,   728,   411,   513,   503,   464,   465,   468,
     512,   671,   705,   600,   647,   713,   735,    64,   201,   312,
     412,   548,   471,   516,   546,    15,    16,    26,    27,   100,
      13,    14,    65,    66,    23,    24,   408,    94,    95,   496,
     402,   494
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -675
static const yytype_int16 yypact[] =
{
     293,  -675,  -675,  -675,  -675,  -675,    42,  -675,  -675,  -675,
    -675,  -675,    46,  -675,   -18,  -675,    14,  -675,   736,  1472,
      65,   104,    51,   -18,  -675,   206,    14,  -675,   445,    57,
      63,    40,  -675,    86,  -675,   124,   119,   139,   140,   144,
     189,   190,   196,   204,  -675,  -675,   209,   220,  -675,   223,
     231,   236,  -675,   238,  -675,  -675,  -675,  -675,    -4,  -675,
    -675,  -675,  -675,  -675,  -675,  -675,   153,  -675,   147,   124,
     277,   613,  -675,   279,   280,   283,  -675,  -675,   285,   294,
     296,   613,   298,   301,   302,  -675,   303,   205,   613,  -675,
     305,  -675,   307,   308,   259,   180,   104,  -675,  -675,  -675,
     264,   184,  -675,  -675,  -675,  -675,  -675,  -675,  -675,  -675,
    -675,  -675,  -675,  -675,  -675,   321,   324,  -675,  -675,   331,
     333,   124,   124,   338,   124,    16,  -675,   339,    20,   309,
     124,   346,   348,   317,  -675,  -675,  -675,  -675,   311,    28,
    -675,    35,  -675,  -675,   613,   613,   613,   320,   325,   328,
     344,   345,  -675,   347,   350,   351,   355,   356,   357,   358,
     363,   368,   369,   370,   371,   376,   395,   613,   613,  1295,
     217,  -675,   225,  -675,   295,    10,  -675,  -675,   341,  1667,
     299,  -675,  -675,   300,  -675,   381,  -675,  -675,  1667,   390,
     206,   206,   310,   249,   380,   323,   249,  -675,   613,  -675,
     394,    22,   -25,   326,  -675,  -675,  -675,   327,   329,   330,
     332,   334,  -675,  -675,    73,   100,    11,   335,  -675,  -675,
     408,    27,    20,   362,   440,   465,   613,   364,   -18,   613,
     613,  -675,   613,   613,  -675,  -675,   929,   613,   613,   613,
     613,   613,   480,   482,   613,   484,   489,   490,   491,   613,
     613,   497,   500,   613,   613,   502,  -675,  -675,   613,   613,
     613,   613,   613,   613,   613,   613,   613,   613,   613,   613,
     613,   613,   613,   613,   613,   613,   613,   613,   613,   613,
    1667,   506,   507,  -675,   511,   613,   613,  1667,   136,   512,
    -675,    24,  -675,   384,   385,  -675,  -675,   514,  -675,  -675,
    -675,   -75,  -675,  1667,   445,  -675,  -675,  -675,  -675,  -675,
    -675,  -675,  -675,   519,  -675,  -675,   808,   488,    98,  -675,
    -675,  -675,  -675,  -675,  -675,  -675,   124,  -675,   124,   339,
    -675,  -675,  -675,  -675,  -675,   492,    32,  -675,    81,  -675,
    -675,  -675,  1315,  -675,   -14,  1667,  1667,  1496,  1667,  1667,
    -675,   745,   949,  1335,  1355,   969,   406,   388,   989,   393,
     405,   410,   411,  1375,  1395,   412,   413,  1009,  1415,   422,
    1627,  1494,  1516,  1682,   909,   701,   894,   894,   525,   525,
     525,   525,   392,   392,   152,   152,  -675,  -675,  -675,  1667,
    1667,  1667,  -675,  -675,  -675,  1667,  1667,  -675,  -675,  -675,
    -675,   526,   206,   278,   249,   508,  -675,  -675,   -68,   459,
     536,   459,   613,   427,  -675,     4,   548,  -675,   331,  -675,
    -675,  -675,  -675,    20,  -675,  -675,  -675,   532,  -675,   432,
     438,   573,  -675,  -675,   613,  -675,  -675,   613,   613,  -675,
     613,  -675,  -675,  -675,  -675,  -675,  -675,   613,   613,  -675,
    -675,  -675,   574,  -675,   613,  -675,   442,   564,  -675,  -675,
    -675,    15,   544,  1604,   566,   503,  -675,  1647,   510,  -675,
    1667,    25,   583,  -675,   588,     3,  -675,   513,  -675,   125,
      20,  -675,  -675,  -675,   464,  1029,  1051,  1071,  1091,  1111,
    1131,   467,  1667,   249,   543,   206,   206,  -675,  -675,  -675,
    -675,  -675,  -675,   468,   613,   375,   587,  -675,   570,   580,
    -675,  -675,   503,   555,   584,   586,  -675,   487,  -675,  -675,
    -675,   620,   495,  -675,   133,    20,  -675,  -675,  -675,  -675,
    -675,  -675,  -675,  -675,  -675,   496,   442,  -675,  1151,  -675,
     613,   590,   540,   540,  -675,   613,    25,   613,   501,  -675,
    -675,   549,  -675,   138,   249,   592,   212,  1173,   613,   591,
    -675,  -675,   474,  1193,  -675,  1213,  -675,  -675,   634,  -675,
    -675,  -675,   605,   631,  -675,  1233,   613,   113,   595,  -675,
    -675,    25,  -675,   613,  -675,  -675,  1253,  -675,  -675,  -675,
     596,  -675,  -675,  -675,  1273,  -675,  -675,  -675,   617,   652,
      68,   639,   699,  -675,  -675,  -675,  -675,  -675,  -675,  -675,
     621,   622,   623,  -675,  -675,  -675,   627,   629,  -675,   227,
    -675,   632,  -675,  -675,  -675,   652,   603,   635,    -4,  -675,
    -675,  -675,   304,   282,  -675,   637,  -675,   284,  -675,   638,
    -675,   -93,   227,  -675,  -675,  -675,  -675,   618,   651,   642,
     643,   545,   645,   547,   661,   663,   576,   577,  -675,   613,
      83,  -675,    12,   297,  -675,   227,   114,   651,   579,   652,
     698,   624,   284,   284,  -675,   284,  -675,   284,   284,  -675,
    -675,  1435,   582,   599,   284,  -675,  -675,  -675,   624,  -675,
     664,  -675,   696,  -675,   600,   604,    80,   606,   608,   739,
    -675,  -675,  -675,  -675,   744,    43,   614,   615,   284,   619,
     646,   648,    43,  -675,  -675,  -675,   747,  -675,  -675,  -675,
     649,  -675,  -675,    -4,  -675,    43,  -675,  -675,   495,  -675,
    -675,   495,  -675,  -675,  -675,   495,  -675
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -675,  -675,   -64,  -675,  -675,  -675,  -675,   527,  -675,  -675,
    -675,  -675,  -675,  -675,   625,  -675,  -675,  -675,  -675,   552,
    -675,  -675,  -675,  -210,  -675,  -675,  -675,  -675,   244,  -194,
    -675,   -43,  -407,   105,   148,   141,  -675,  -675,   171,  -675,
    -675,   130,  -675,    85,  -674,  -675,  -606,  -569,  -211,  -675,
    -675,  -297,  -675,  -675,  -675,  -675,  -675,   336,  -675,  -675,
    -675,  -675,  -675,  -675,  -193,  -101,  -675,   -71,   115,   290,
    -675,   261,  -675,  -675,  -675,  -675,  -675,  -675,  -675,  -675,
    -675,  -675,  -675,  -675,  -675,  -675,  -675,  -450,   398,  -675,
    -675,   143,  -588,  -675,  -675,  -675,  -675,  -675,  -675,  -675,
    -675,  -675,  -675,  -513,  -675,  -675,  -675,  -675,   787,  -675,
    -675,  -675,  -675,  -675,   594,   -22,  -675,   718,   -16,  -675,
    -675,   287
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -318
static const yytype_int16 yytable[] =
{
     169,    97,   197,   326,   328,   140,   308,   473,   473,   101,
     179,   199,   338,   506,   283,   216,   638,   188,   142,   143,
     117,   419,   646,   330,   218,   219,   310,   603,   400,   514,
     628,   333,   334,   564,   229,    21,   425,   426,   724,    21,
     432,   232,    17,   324,   604,   144,   145,   664,   406,   715,
      20,   732,   146,   147,   148,   459,   628,   208,   209,   716,
     211,   213,   407,   149,   150,   151,   223,    25,   592,   460,
     152,    88,   629,   234,   235,   153,   311,   115,   497,   498,
     499,   500,   501,   154,   638,   333,   334,   682,   155,   156,
     157,   158,   159,   160,   161,   603,   256,   257,   603,   280,
     628,   162,   205,   163,    96,    22,   573,   287,    89,    22,
     113,   313,   604,   314,   712,   604,   114,   730,   164,   220,
     515,   478,   630,   116,   165,   725,   335,   303,   117,   333,
     334,   427,   135,   136,   639,   611,   422,   333,   334,   397,
     398,   519,   333,   334,   474,   474,   284,   329,   601,   166,
     684,   139,   417,   502,   212,   342,   167,   168,   345,   346,
     401,   348,   349,   336,   230,   337,   351,   352,   353,   354,
     355,   233,   119,   358,   293,   294,   120,   121,   363,   364,
     335,   122,   367,   368,   274,   275,   276,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   324,
      89,   325,   640,   479,   395,   396,   617,   336,   708,   428,
     142,   143,   619,   278,   335,    90,   123,   124,    91,    92,
      93,   638,   335,   125,   418,   640,   324,   335,   327,   429,
     430,   126,   603,   587,   588,   589,   127,   144,   145,   505,
     324,   572,   687,   296,   146,   147,   148,   128,   686,   604,
     130,   336,   420,   523,   421,   149,   150,   151,   131,   336,
     524,   552,   152,   132,   336,   134,   570,   153,   639,   611,
     138,   141,   296,   170,   171,   154,   638,   173,   638,   176,
     155,   156,   157,   158,   159,   160,   161,   603,   177,   603,
     178,   638,   180,   162,   181,   163,   182,   186,   638,   189,
     187,   551,   603,   192,   604,   553,   604,   193,   195,   603,
     164,   196,    97,   190,   191,   202,   165,    90,   203,   604,
      91,    98,    99,   654,   655,   205,   604,   207,   463,   467,
     463,   470,   210,   216,   142,   143,   222,   285,   649,   650,
     224,   166,   225,   279,   226,   649,   650,   237,   167,   168,
     617,   281,   238,   485,   228,   239,   486,   487,   308,   488,
     297,   144,   145,   298,   299,   300,   489,   490,   146,   147,
     148,   240,   241,   492,   242,   290,   456,   243,   244,   149,
     150,   151,   245,   246,   247,   248,   152,   651,   304,   297,
     249,   153,   298,   299,   457,   250,   251,   252,   253,   154,
       1,     2,     3,   254,   155,   156,   157,   158,   159,   160,
     161,     4,   272,   273,   274,   275,   276,   162,     5,   163,
     652,   282,   255,   538,   301,   288,   289,   652,   497,   498,
     499,   500,   501,   292,   164,   332,   340,   295,   305,   567,
     165,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     302,   306,   142,   143,   315,   319,    40,   320,   321,   557,
     322,   341,   323,   331,   563,   166,   565,   286,   304,   535,
     536,   593,   167,   168,   356,   307,   357,   575,   359,   144,
     145,    50,    51,   360,   361,   362,   461,   147,   148,   462,
     339,   365,   343,    52,   366,   586,   369,   149,   150,   151,
     392,   393,   594,   502,   152,   394,   399,   733,   405,   153,
     734,   403,   404,   413,   736,   415,   441,   154,   579,   424,
     455,   443,   155,   156,   157,   158,   159,   160,   161,   142,
     143,   306,   440,   444,   668,   162,    40,   163,   445,   446,
     449,   450,   466,   270,   271,   272,   273,   274,   275,   276,
     453,   458,   164,   472,   477,   307,   144,   145,   165,   481,
     482,    50,    51,   146,   147,   148,   483,   484,   491,   493,
     495,   504,   507,    52,   149,   150,   151,   517,   681,   653,
     656,   152,   518,   166,   661,   511,   153,   534,   508,   521,
     167,   168,   526,   539,   154,   533,   537,   540,   544,   155,
     156,   157,   158,   159,   160,   161,   142,   143,   541,   685,
     653,   545,   162,   547,   163,   549,   550,   558,   576,   694,
     695,   324,   661,   554,   697,   698,   559,   568,   566,   164,
     582,   701,   583,   144,   145,   165,   571,   584,   591,   596,
     146,   147,   148,   685,   505,   631,   602,   644,   632,   633,
     634,   149,   150,   151,   636,   720,   637,   603,   152,   642,
     166,   669,   645,   153,   659,   663,   670,   167,   168,   672,
     673,   154,   675,   674,   604,   676,   155,   156,   157,   158,
     159,   160,   161,   605,   606,   607,   608,   609,   677,   162,
     678,   163,   691,   610,   611,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   679,   680,   164,   689,   703,   692,
    -125,   704,   165,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,  -109,   700,   706,   612,
      28,   613,   707,   711,   709,   614,   710,   166,   714,    50,
      51,   727,   718,   719,   167,   168,   316,   721,   347,   227,
     258,   615,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     696,   616,    29,    30,   722,   617,   723,   729,   562,   618,
     666,   619,    31,    32,    33,    34,   643,    35,    36,   690,
     726,   683,   543,   702,   561,    37,    38,    39,    40,   469,
     688,   520,    28,   102,   194,     0,    41,    42,    43,    44,
      45,    46,   344,   555,     0,     0,    47,    48,    49,     0,
       0,     0,     0,    50,    51,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   414,    52,     0,     0,     0,     0,
       0,     0,     0,     0,    29,    30,     0,    53,     0,     0,
       0,     0,     0,  -317,    31,    32,    33,    34,     0,    35,
      36,     0,     0,    54,     0,     0,     0,    37,    38,    39,
      40,   434,     0,   435,     0,     0,     0,     0,    41,    42,
      43,    44,    45,    46,     0,     0,     0,     0,    47,    48,
      49,     0,     0,     0,     0,    50,    51,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    52,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    53,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   258,    54,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   258,     0,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   258,     0,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   258,     0,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   258,     0,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   258,     0,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,     0,     0,   258,   350,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   258,   436,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   258,   439,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   258,   442,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   258,   451,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   258,   527,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,     0,     0,   258,   528,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   258,   529,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   258,   530,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   258,   531,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   258,   532,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   258,   556,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,     0,     0,
     258,   574,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     258,   580,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     258,   581,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     258,   585,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     258,   595,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     258,   598,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     258,   277,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     258,   431,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
       0,   437,     0,     0,     0,     0,    67,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   438,     0,     0,     0,     0,     0,     0,     0,     0,
      67,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      68,   447,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
       0,   448,   433,    69,    68,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   452,     0,     0,     0,     0,     0,    69,     0,     0,
       0,     0,     0,     0,     0,     0,    70,     0,     0,     0,
       0,   699,    71,    72,    73,    74,    75,   -43,    76,    77,
      78,     0,    79,    80,     0,    81,    82,    83,     0,     0,
      70,     0,    84,    85,    86,     0,    71,    72,    73,    74,
      75,     0,    76,    77,    78,     0,    79,    80,     0,    81,
      82,    83,     0,     0,     0,     0,    84,    85,    86,   258,
       0,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,     0,
       0,   505,   258,   454,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   258,   510,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   258,     0,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276
};

static const yytype_int16 yycheck[] =
{
      71,    23,   103,   214,   215,    69,   200,     4,     4,    25,
      81,   112,   222,   463,     4,     4,     4,    88,     3,     4,
       4,   318,   628,   216,     4,     5,     4,    15,     4,     4,
     599,     4,     5,   546,     6,    53,     4,     5,   712,    53,
      54,     6,     0,   136,    32,    30,    31,   140,   123,     6,
       4,   725,    37,    38,    39,   123,   625,   121,   122,    16,
     124,   125,   137,    48,    49,    50,   130,    53,   581,   137,
      55,     6,     4,   144,   145,    60,    54,    37,    63,    64,
      65,    66,    67,    68,     4,     4,     5,     4,    73,    74,
      75,    76,    77,    78,    79,    15,   167,   168,    15,   170,
     669,    86,     4,    88,    53,   123,   556,   178,     4,   123,
      53,   136,    32,   138,   702,    32,    53,   723,   103,    99,
      95,   418,    54,    37,   109,   713,    99,   198,     4,     4,
       5,    99,   136,   137,    51,    52,   329,     4,     5,     3,
       4,   138,     4,     5,   141,   141,   136,   136,   598,   134,
     138,     4,    54,   138,   138,   226,   141,   142,   229,   230,
     136,   232,   233,   136,   136,   138,   237,   238,   239,   240,
     241,   136,    53,   244,   190,   191,    37,    37,   249,   250,
      99,    37,   253,   254,    32,    33,    34,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   136,
       4,   138,   619,   423,   285,   286,   133,   136,   138,   138,
       3,     4,   139,     6,    99,   121,    37,    37,   124,   125,
     126,     4,    99,    37,   136,   642,   136,    99,   138,   340,
     341,    37,    15,   130,   131,   132,    37,    30,    31,    37,
     136,    39,   138,     4,    37,    38,    39,    37,   665,    32,
      37,   136,   326,   138,   328,    48,    49,    50,    37,   136,
     480,   138,    55,    37,   136,    37,   138,    60,    51,    52,
     127,     4,     4,     4,     4,    68,     4,     4,     4,     4,
      73,    74,    75,    76,    77,    78,    79,    15,     4,    15,
       4,     4,     4,    86,     3,    88,     4,     4,     4,     4,
     105,   522,    15,    54,    32,   525,    32,   137,    54,    15,
     103,   137,   344,    16,    16,     4,   109,   121,     4,    32,
     124,   125,   126,    51,    52,     4,    32,     4,   409,   410,
     411,   412,     4,     4,     3,     4,    37,     6,    51,    52,
       4,   134,     4,   136,    37,    51,    52,    37,   141,   142,
     133,   136,    37,   434,    53,    37,   437,   438,   562,   440,
     121,    30,    31,   124,   125,   126,   447,   448,    37,    38,
      39,    37,    37,   454,    37,     4,   402,    37,    37,    48,
      49,    50,    37,    37,    37,    37,    55,    93,     4,   121,
      37,    60,   124,   125,   126,    37,    37,    37,    37,    68,
     117,   118,   119,    37,    73,    74,    75,    76,    77,    78,
      79,   128,    30,    31,    32,    33,    34,    86,   135,    88,
     133,   136,    37,   504,    54,   136,   136,   133,    63,    64,
      65,    66,    67,    53,   103,    37,     6,   137,    54,   550,
     109,     6,     7,     8,     9,    10,    11,    12,    13,    14,
     137,    67,     3,     4,   138,   138,    72,   138,   138,   540,
     138,     6,   138,   138,   545,   134,   547,   136,     4,   495,
     496,   582,   141,   142,     4,    91,     4,   558,     4,    30,
      31,    97,    98,     4,     4,     4,    37,    38,    39,    40,
     138,     4,   138,   109,     4,   576,     4,    48,    49,    50,
       4,     4,   583,   138,    55,     4,     4,   728,     4,    60,
     731,   137,   137,     4,   735,    37,   138,    68,    54,    37,
       4,   138,    73,    74,    75,    76,    77,    78,    79,     3,
       4,    67,   136,   138,   645,    86,    72,    88,   138,   138,
     138,   138,    16,    28,    29,    30,    31,    32,    33,    34,
     138,    53,   103,   136,    16,    91,    30,    31,   109,    37,
     138,    97,    98,    37,    38,    39,   138,     4,     4,   137,
      16,    37,    16,   109,    48,    49,    50,     4,   659,   632,
     633,    55,     4,   134,   637,    85,    60,    54,    95,    86,
     141,   142,   138,    16,    68,   138,   138,    37,    53,    73,
      74,    75,    76,    77,    78,    79,     3,     4,    38,   662,
     663,    37,    86,    37,    88,   138,     6,    37,    37,   672,
     673,   136,   675,   137,   677,   678,    96,    88,   137,   103,
       6,   684,    37,    30,    31,   109,    54,    16,    53,    53,
      37,    38,    39,   696,    37,    16,     4,    54,    37,    37,
      37,    48,    49,    50,    37,   708,    37,    15,    55,    37,
     134,    53,    37,    60,    37,    37,    25,   141,   142,    37,
      37,    68,    37,   138,    32,   138,    73,    74,    75,    76,
      77,    78,    79,    41,    42,    43,    44,    45,    37,    86,
      37,    88,     4,    51,    52,     6,     7,     8,     9,    10,
      11,    12,    13,    14,   138,   138,   103,   138,    54,    95,
     138,    25,   109,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    37,   138,   138,    87,
       4,    89,   138,     4,   138,    93,   138,   134,     4,    97,
      98,     4,   138,   138,   141,   142,   204,   138,   231,   134,
      15,   109,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
     675,   129,    46,    47,   138,   133,   138,   138,   544,   137,
     642,   139,    56,    57,    58,    59,   625,    61,    62,   669,
     715,   660,   512,   688,   543,    69,    70,    71,    72,   411,
     667,   475,     4,    26,    96,    -1,    80,    81,    82,    83,
      84,    85,   228,   536,    -1,    -1,    90,    91,    92,    -1,
      -1,    -1,    -1,    97,    98,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    46,    47,    -1,   121,    -1,    -1,
      -1,    -1,    -1,   127,    56,    57,    58,    59,    -1,    61,
      62,    -1,    -1,   137,    -1,    -1,    -1,    69,    70,    71,
      72,   136,    -1,   138,    -1,    -1,    -1,    -1,    80,    81,
      82,    83,    84,    85,    -1,    -1,    -1,    -1,    90,    91,
      92,    -1,    -1,    -1,    -1,    97,    98,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,   121,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   137,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,    -1,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,    -1,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,    -1,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,    -1,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,    -1,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,    -1,    15,   138,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    15,   138,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    15,   138,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    15,   138,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    15,   138,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    15,   138,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    -1,    15,   138,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    15,   138,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    15,   138,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    15,   138,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    15,   138,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    15,   138,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
      15,   138,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   138,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   138,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   138,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   138,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   138,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   136,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   136,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,   136,    -1,    -1,    -1,    -1,     4,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,   136,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,   136,    36,    61,    38,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,   136,    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    94,    -1,    -1,    -1,
      -1,   136,   100,   101,   102,   103,   104,   105,   106,   107,
     108,    -1,   110,   111,    -1,   113,   114,   115,    -1,    -1,
      94,    -1,   120,   121,   122,    -1,   100,   101,   102,   103,
     104,    -1,   106,   107,   108,    -1,   110,   111,    -1,   113,
     114,   115,    -1,    -1,    -1,    -1,   120,   121,   122,    15,
      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    37,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,   117,   118,   119,   128,   135,   144,   160,   161,   148,
     149,   146,   147,   253,   254,   248,   249,     0,   162,   150,
       4,    53,   123,   257,   258,    53,   250,   251,     4,    46,
      47,    56,    57,    58,    59,    61,    62,    69,    70,    71,
      72,    80,    81,    82,    83,    84,    85,    90,    91,    92,
      97,    98,   109,   121,   137,   163,   170,   172,   190,   192,
     201,   202,   204,   206,   240,   255,   256,     4,    38,    61,
      94,   100,   101,   102,   103,   104,   106,   107,   108,   110,
     111,   113,   114,   115,   120,   121,   122,   151,     6,     4,
     121,   124,   125,   126,   260,   261,    53,   258,   125,   126,
     252,   261,   251,     6,     7,     8,     9,    10,    11,    12,
      13,    14,   188,    53,    53,    37,    37,     4,   145,    53,
      37,    37,    37,    37,    37,    37,    37,    37,    37,   164,
      37,    37,    37,   173,    37,   136,   137,   189,   127,     4,
     145,     4,     3,     4,    30,    31,    37,    38,    39,    48,
      49,    50,    55,    60,    68,    73,    74,    75,    76,    77,
      78,    79,    86,    88,   103,   109,   134,   141,   142,   210,
       4,     4,   155,     4,   154,   153,     4,     4,     4,   210,
       4,     3,     4,   156,   157,   158,     4,   105,   210,     4,
      16,    16,    54,   137,   260,    54,   137,   208,   209,   208,
     171,   241,     4,     4,   165,     4,   194,     4,   145,   145,
       4,   145,   138,   145,   203,   205,     4,   207,     4,     5,
      99,   166,    37,   145,     4,     4,    37,   157,    53,     6,
     136,   152,     6,   136,   210,   210,   210,    37,    37,    37,
      37,    37,    37,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    37,    37,    37,    37,   210,   210,    15,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,   136,     6,   136,
     210,   136,   136,     4,   136,     6,   136,   210,   136,   136,
       4,   159,    53,   261,   261,   137,     4,   121,   124,   125,
     126,    54,   137,   210,     4,    54,    67,    91,   172,   216,
       4,    54,   242,   136,   138,   138,   162,   195,   193,   138,
     138,   138,   138,   138,   136,   138,   191,   138,   191,   136,
     207,   138,    37,     4,     5,    99,   136,   138,   166,   138,
       6,     6,   210,   138,   257,   210,   210,   150,   210,   210,
     138,   210,   210,   210,   210,   210,     4,     4,   210,     4,
       4,     4,     4,   210,   210,     4,     4,   210,   210,     4,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
     210,   210,     4,     4,     4,   210,   210,     3,     4,     4,
       4,   136,   263,   137,   137,     4,   123,   137,   259,   217,
     222,   227,   243,     4,    36,    37,   198,    54,   136,   194,
     145,   145,   207,   167,    37,     4,     5,    99,   138,   208,
     208,   136,    54,    36,   136,   138,   138,   136,   136,   138,
     136,   138,   138,   138,   138,   138,   138,   136,   136,   138,
     138,   138,   136,   138,    16,     4,   261,   126,    53,   123,
     137,    37,    40,   210,   230,   231,    16,   210,   232,   231,
     210,   245,   136,     4,   141,   199,   200,    16,   194,   166,
     169,    37,   138,   138,     4,   210,   210,   210,   210,   210,
     210,     4,   210,   137,   264,    16,   262,    63,    64,    65,
      66,    67,   138,   229,    37,    37,   230,    16,    95,   212,
      16,    85,   233,   228,     4,    95,   246,     4,     4,   138,
     200,    86,   196,   138,   166,   168,   138,   138,   138,   138,
     138,   138,   138,   138,    54,   261,   261,   138,   210,    16,
      37,    38,   213,   212,    53,    37,   247,    37,   244,   138,
       6,   191,   138,   166,   137,   264,   138,   210,    37,    96,
     214,   214,   171,   210,   246,   210,   137,   208,    88,   197,
     138,    54,    39,   230,   138,   210,    37,   218,   223,    54,
     138,   138,     6,    37,    16,   138,   210,   130,   131,   132,
     215,    53,   246,   208,   210,   138,    53,   224,   138,   219,
     236,   230,     4,    15,    32,    41,    42,    43,    44,    45,
      51,    52,    87,    89,    93,   109,   129,   133,   137,   139,
     174,   175,   178,   179,   181,   183,   184,   185,   190,     4,
      54,    16,    37,    37,    37,   182,    37,    37,     4,    51,
     175,   177,    37,   181,    54,    37,   189,   237,   225,    51,
      52,    93,   133,   174,    51,    52,   174,   186,   208,    37,
     180,   174,   176,    37,   140,   191,   177,   220,   208,    53,
      25,   234,    37,    37,   138,    37,   138,    37,    37,   138,
     138,   210,     4,   178,   138,   174,   175,   138,   234,   138,
     184,     4,    95,   211,   174,   174,   176,   174,   174,   136,
     138,   174,   211,    54,    25,   235,   138,   138,   138,   138,
     138,     4,   235,   238,     4,     6,    16,   187,   138,   138,
     174,   138,   138,   138,   187,   235,   186,     4,   226,   138,
     189,   221,   187,   191,   191,   239,   191
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  
  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 8:
#line 176 "ldgram.y"
    { ldlex_defsym(); }
    break;

  case 9:
#line 178 "ldgram.y"
    {
		  ldlex_popstate();
		  lang_add_assignment(exp_assop((yyvsp[(3) - (4)].token),(yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].etree)));
		}
    break;

  case 10:
#line 186 "ldgram.y"
    {
		  ldlex_mri_script ();
		  PUSH_ERROR (_("MRI style script"));
		}
    break;

  case 11:
#line 191 "ldgram.y"
    {
		  ldlex_popstate ();
		  mri_draw_tree ();
		  POP_ERROR ();
		}
    break;

  case 16:
#line 206 "ldgram.y"
    {
			einfo(_("%P%F: unrecognised keyword in MRI style script '%s'\n"),(yyvsp[(1) - (1)].name));
			}
    break;

  case 17:
#line 209 "ldgram.y"
    {
			config.map_filename = "-";
			}
    break;

  case 20:
#line 215 "ldgram.y"
    { mri_public((yyvsp[(2) - (4)].name), (yyvsp[(4) - (4)].etree)); }
    break;

  case 21:
#line 217 "ldgram.y"
    { mri_public((yyvsp[(2) - (4)].name), (yyvsp[(4) - (4)].etree)); }
    break;

  case 22:
#line 219 "ldgram.y"
    { mri_public((yyvsp[(2) - (3)].name), (yyvsp[(3) - (3)].etree)); }
    break;

  case 23:
#line 221 "ldgram.y"
    { mri_format((yyvsp[(2) - (2)].name)); }
    break;

  case 24:
#line 223 "ldgram.y"
    { mri_output_section((yyvsp[(2) - (4)].name), (yyvsp[(4) - (4)].etree));}
    break;

  case 25:
#line 225 "ldgram.y"
    { mri_output_section((yyvsp[(2) - (3)].name), (yyvsp[(3) - (3)].etree));}
    break;

  case 26:
#line 227 "ldgram.y"
    { mri_output_section((yyvsp[(2) - (4)].name), (yyvsp[(4) - (4)].etree));}
    break;

  case 27:
#line 229 "ldgram.y"
    { mri_align((yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].etree)); }
    break;

  case 28:
#line 231 "ldgram.y"
    { mri_align((yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].etree)); }
    break;

  case 29:
#line 233 "ldgram.y"
    { mri_alignmod((yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].etree)); }
    break;

  case 30:
#line 235 "ldgram.y"
    { mri_alignmod((yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].etree)); }
    break;

  case 33:
#line 239 "ldgram.y"
    { mri_name((yyvsp[(2) - (2)].name)); }
    break;

  case 34:
#line 241 "ldgram.y"
    { mri_alias((yyvsp[(2) - (4)].name),(yyvsp[(4) - (4)].name),0);}
    break;

  case 35:
#line 243 "ldgram.y"
    { mri_alias ((yyvsp[(2) - (4)].name), 0, (int) (yyvsp[(4) - (4)].bigint).integer); }
    break;

  case 36:
#line 245 "ldgram.y"
    { mri_base((yyvsp[(2) - (2)].etree)); }
    break;

  case 37:
#line 247 "ldgram.y"
    { mri_truncate ((unsigned int) (yyvsp[(2) - (2)].bigint).integer); }
    break;

  case 40:
#line 251 "ldgram.y"
    { ldlex_script (); ldfile_open_command_file((yyvsp[(2) - (2)].name)); }
    break;

  case 41:
#line 253 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 42:
#line 255 "ldgram.y"
    { lang_add_entry ((yyvsp[(2) - (2)].name), FALSE); }
    break;

  case 44:
#line 260 "ldgram.y"
    { mri_order((yyvsp[(3) - (3)].name)); }
    break;

  case 45:
#line 261 "ldgram.y"
    { mri_order((yyvsp[(2) - (2)].name)); }
    break;

  case 47:
#line 267 "ldgram.y"
    { mri_load((yyvsp[(1) - (1)].name)); }
    break;

  case 48:
#line 268 "ldgram.y"
    { mri_load((yyvsp[(3) - (3)].name)); }
    break;

  case 49:
#line 273 "ldgram.y"
    { mri_only_load((yyvsp[(1) - (1)].name)); }
    break;

  case 50:
#line 275 "ldgram.y"
    { mri_only_load((yyvsp[(3) - (3)].name)); }
    break;

  case 51:
#line 279 "ldgram.y"
    { (yyval.name) = NULL; }
    break;

  case 54:
#line 286 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 55:
#line 288 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 56:
#line 292 "ldgram.y"
    { ldlang_add_undef ((yyvsp[(1) - (1)].name)); }
    break;

  case 57:
#line 294 "ldgram.y"
    { ldlang_add_undef ((yyvsp[(2) - (2)].name)); }
    break;

  case 58:
#line 296 "ldgram.y"
    { ldlang_add_undef ((yyvsp[(3) - (3)].name)); }
    break;

  case 59:
#line 300 "ldgram.y"
    { ldlex_both(); }
    break;

  case 60:
#line 302 "ldgram.y"
    { ldlex_popstate(); }
    break;

  case 73:
#line 323 "ldgram.y"
    { lang_add_target((yyvsp[(3) - (4)].name)); }
    break;

  case 74:
#line 325 "ldgram.y"
    { ldfile_add_library_path ((yyvsp[(3) - (4)].name), FALSE); }
    break;

  case 75:
#line 327 "ldgram.y"
    { lang_add_output((yyvsp[(3) - (4)].name), 1); }
    break;

  case 76:
#line 329 "ldgram.y"
    { lang_add_output_format ((yyvsp[(3) - (4)].name), (char *) NULL,
					    (char *) NULL, 1); }
    break;

  case 77:
#line 332 "ldgram.y"
    { lang_add_output_format ((yyvsp[(3) - (8)].name), (yyvsp[(5) - (8)].name), (yyvsp[(7) - (8)].name), 1); }
    break;

  case 78:
#line 334 "ldgram.y"
    { ldfile_set_output_arch ((yyvsp[(3) - (4)].name), bfd_arch_unknown); }
    break;

  case 79:
#line 336 "ldgram.y"
    { command_line.force_common_definition = TRUE ; }
    break;

  case 80:
#line 338 "ldgram.y"
    { command_line.inhibit_common_definition = TRUE ; }
    break;

  case 82:
#line 341 "ldgram.y"
    { lang_enter_group (); }
    break;

  case 83:
#line 343 "ldgram.y"
    { lang_leave_group (); }
    break;

  case 84:
#line 345 "ldgram.y"
    { lang_add_map((yyvsp[(3) - (4)].name)); }
    break;

  case 85:
#line 347 "ldgram.y"
    { ldlex_script (); ldfile_open_command_file((yyvsp[(2) - (2)].name)); }
    break;

  case 86:
#line 349 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 87:
#line 351 "ldgram.y"
    {
		  lang_add_nocrossref ((yyvsp[(3) - (4)].nocrossref));
		}
    break;

  case 89:
#line 359 "ldgram.y"
    { lang_add_input_file((yyvsp[(1) - (1)].name),lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;

  case 90:
#line 362 "ldgram.y"
    { lang_add_input_file((yyvsp[(3) - (3)].name),lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;

  case 91:
#line 365 "ldgram.y"
    { lang_add_input_file((yyvsp[(2) - (2)].name),lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;

  case 92:
#line 368 "ldgram.y"
    { lang_add_input_file((yyvsp[(1) - (1)].name),lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;

  case 93:
#line 371 "ldgram.y"
    { lang_add_input_file((yyvsp[(3) - (3)].name),lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;

  case 94:
#line 374 "ldgram.y"
    { lang_add_input_file((yyvsp[(2) - (2)].name),lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;

  case 95:
#line 377 "ldgram.y"
    { (yyval.integer) = as_needed; as_needed = TRUE; }
    break;

  case 96:
#line 379 "ldgram.y"
    { as_needed = (yyvsp[(3) - (5)].integer); }
    break;

  case 97:
#line 381 "ldgram.y"
    { (yyval.integer) = as_needed; as_needed = TRUE; }
    break;

  case 98:
#line 383 "ldgram.y"
    { as_needed = (yyvsp[(5) - (7)].integer); }
    break;

  case 99:
#line 385 "ldgram.y"
    { (yyval.integer) = as_needed; as_needed = TRUE; }
    break;

  case 100:
#line 387 "ldgram.y"
    { as_needed = (yyvsp[(4) - (6)].integer); }
    break;

  case 105:
#line 402 "ldgram.y"
    { lang_add_entry ((yyvsp[(3) - (4)].name), FALSE); }
    break;

  case 107:
#line 404 "ldgram.y"
    {ldlex_expression ();}
    break;

  case 108:
#line 405 "ldgram.y"
    { ldlex_popstate ();
		  lang_add_assignment (exp_assert ((yyvsp[(4) - (7)].etree), (yyvsp[(6) - (7)].name))); }
    break;

  case 109:
#line 413 "ldgram.y"
    {
			  (yyval.cname) = (yyvsp[(1) - (1)].name);
			}
    break;

  case 110:
#line 417 "ldgram.y"
    {
			  (yyval.cname) = "*";
			}
    break;

  case 111:
#line 421 "ldgram.y"
    {
			  (yyval.cname) = "?";
			}
    break;

  case 112:
#line 428 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(1) - (1)].cname);
			  (yyval.wildcard).sorted = none;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 113:
#line 434 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(5) - (5)].cname);
			  (yyval.wildcard).sorted = none;
			  (yyval.wildcard).exclude_name_list = (yyvsp[(3) - (5)].name_list);
			}
    break;

  case 114:
#line 440 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(3) - (4)].cname);
			  (yyval.wildcard).sorted = by_name;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 115:
#line 446 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(3) - (4)].cname);
			  (yyval.wildcard).sorted = by_alignment;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 116:
#line 452 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(5) - (7)].cname);
			  (yyval.wildcard).sorted = by_name_alignment;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 117:
#line 458 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(5) - (7)].cname);
			  (yyval.wildcard).sorted = by_name;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 118:
#line 464 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(5) - (7)].cname);
			  (yyval.wildcard).sorted = by_alignment_name;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 119:
#line 470 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(5) - (7)].cname);
			  (yyval.wildcard).sorted = by_alignment;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 120:
#line 476 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[(7) - (8)].cname);
			  (yyval.wildcard).sorted = by_name;
			  (yyval.wildcard).exclude_name_list = (yyvsp[(5) - (8)].name_list);
			}
    break;

  case 121:
#line 485 "ldgram.y"
    {
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = (yyvsp[(2) - (2)].cname);
			  tmp->next = (yyvsp[(1) - (2)].name_list);
			  (yyval.name_list) = tmp;
			}
    break;

  case 122:
#line 494 "ldgram.y"
    {
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = (yyvsp[(1) - (1)].cname);
			  tmp->next = NULL;
			  (yyval.name_list) = tmp;
			}
    break;

  case 123:
#line 505 "ldgram.y"
    {
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = (yyvsp[(1) - (3)].wildcard_list);
			  tmp->spec = (yyvsp[(3) - (3)].wildcard);
			  (yyval.wildcard_list) = tmp;
			}
    break;

  case 124:
#line 514 "ldgram.y"
    {
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = NULL;
			  tmp->spec = (yyvsp[(1) - (1)].wildcard);
			  (yyval.wildcard_list) = tmp;
			}
    break;

  case 125:
#line 525 "ldgram.y"
    {
			  struct wildcard_spec tmp;
			  tmp.name = (yyvsp[(1) - (1)].name);
			  tmp.exclude_name_list = NULL;
			  tmp.sorted = none;
			  lang_add_wild (&tmp, NULL, ldgram_had_keep);
			}
    break;

  case 126:
#line 533 "ldgram.y"
    {
			  lang_add_wild (NULL, (yyvsp[(2) - (3)].wildcard_list), ldgram_had_keep);
			}
    break;

  case 127:
#line 537 "ldgram.y"
    {
			  lang_add_wild (&(yyvsp[(1) - (4)].wildcard), (yyvsp[(3) - (4)].wildcard_list), ldgram_had_keep);
			}
    break;

  case 129:
#line 545 "ldgram.y"
    { ldgram_had_keep = TRUE; }
    break;

  case 130:
#line 547 "ldgram.y"
    { ldgram_had_keep = FALSE; }
    break;

  case 132:
#line 553 "ldgram.y"
    {
 		lang_add_attribute(lang_object_symbols_statement_enum);
	      	}
    break;

  case 134:
#line 558 "ldgram.y"
    {

		  lang_add_attribute(lang_constructors_statement_enum);
		}
    break;

  case 135:
#line 563 "ldgram.y"
    {
		  constructors_sorted = TRUE;
		  lang_add_attribute (lang_constructors_statement_enum);
		}
    break;

  case 137:
#line 569 "ldgram.y"
    {
			  lang_add_data ((int) (yyvsp[(1) - (4)].integer), (yyvsp[(3) - (4)].etree));
			}
    break;

  case 138:
#line 574 "ldgram.y"
    {
			  lang_add_fill ((yyvsp[(3) - (4)].fill));
			}
    break;

  case 139:
#line 577 "ldgram.y"
    {ldlex_expression ();}
    break;

  case 140:
#line 578 "ldgram.y"
    { ldlex_popstate ();
			  lang_add_assignment (exp_assert ((yyvsp[(4) - (8)].etree), (yyvsp[(6) - (8)].name))); }
    break;

  case 145:
#line 594 "ldgram.y"
    { (yyval.integer) = (yyvsp[(1) - (1)].token); }
    break;

  case 146:
#line 596 "ldgram.y"
    { (yyval.integer) = (yyvsp[(1) - (1)].token); }
    break;

  case 147:
#line 598 "ldgram.y"
    { (yyval.integer) = (yyvsp[(1) - (1)].token); }
    break;

  case 148:
#line 600 "ldgram.y"
    { (yyval.integer) = (yyvsp[(1) - (1)].token); }
    break;

  case 149:
#line 602 "ldgram.y"
    { (yyval.integer) = (yyvsp[(1) - (1)].token); }
    break;

  case 150:
#line 607 "ldgram.y"
    {
		  (yyval.fill) = exp_get_fill ((yyvsp[(1) - (1)].etree), 0, "fill value");
		}
    break;

  case 151:
#line 614 "ldgram.y"
    { (yyval.fill) = (yyvsp[(2) - (2)].fill); }
    break;

  case 152:
#line 615 "ldgram.y"
    { (yyval.fill) = (fill_type *) 0; }
    break;

  case 153:
#line 620 "ldgram.y"
    { (yyval.token) = '+'; }
    break;

  case 154:
#line 622 "ldgram.y"
    { (yyval.token) = '-'; }
    break;

  case 155:
#line 624 "ldgram.y"
    { (yyval.token) = '*'; }
    break;

  case 156:
#line 626 "ldgram.y"
    { (yyval.token) = '/'; }
    break;

  case 157:
#line 628 "ldgram.y"
    { (yyval.token) = LSHIFT; }
    break;

  case 158:
#line 630 "ldgram.y"
    { (yyval.token) = RSHIFT; }
    break;

  case 159:
#line 632 "ldgram.y"
    { (yyval.token) = '&'; }
    break;

  case 160:
#line 634 "ldgram.y"
    { (yyval.token) = '|'; }
    break;

  case 163:
#line 644 "ldgram.y"
    {
		  lang_add_assignment (exp_assop ((yyvsp[(2) - (3)].token), (yyvsp[(1) - (3)].name), (yyvsp[(3) - (3)].etree)));
		}
    break;

  case 164:
#line 648 "ldgram.y"
    {
		  lang_add_assignment (exp_assop ('=', (yyvsp[(1) - (3)].name),
						  exp_binop ((yyvsp[(2) - (3)].token),
							     exp_nameop (NAME,
									 (yyvsp[(1) - (3)].name)),
							     (yyvsp[(3) - (3)].etree))));
		}
    break;

  case 165:
#line 656 "ldgram.y"
    {
		  lang_add_assignment (exp_provide ((yyvsp[(3) - (6)].name), (yyvsp[(5) - (6)].etree), FALSE));
		}
    break;

  case 166:
#line 660 "ldgram.y"
    {
		  lang_add_assignment (exp_provide ((yyvsp[(3) - (6)].name), (yyvsp[(5) - (6)].etree), TRUE));
		}
    break;

  case 173:
#line 682 "ldgram.y"
    { region = lang_memory_region_lookup ((yyvsp[(1) - (1)].name), TRUE); }
    break;

  case 174:
#line 685 "ldgram.y"
    {}
    break;

  case 175:
#line 690 "ldgram.y"
    {
		  region->origin = exp_get_vma ((yyvsp[(3) - (3)].etree), 0, "origin");
		  region->current = region->origin;
		}
    break;

  case 176:
#line 698 "ldgram.y"
    {
		  region->length = exp_get_vma ((yyvsp[(3) - (3)].etree), -1, "length");
		}
    break;

  case 177:
#line 705 "ldgram.y"
    { /* dummy action to avoid bison 1.25 error message */ }
    break;

  case 181:
#line 716 "ldgram.y"
    { lang_set_flags (region, (yyvsp[(1) - (1)].name), 0); }
    break;

  case 182:
#line 718 "ldgram.y"
    { lang_set_flags (region, (yyvsp[(2) - (2)].name), 1); }
    break;

  case 183:
#line 723 "ldgram.y"
    { lang_startup((yyvsp[(3) - (4)].name)); }
    break;

  case 185:
#line 729 "ldgram.y"
    { ldemul_hll((char *)NULL); }
    break;

  case 186:
#line 734 "ldgram.y"
    { ldemul_hll((yyvsp[(3) - (3)].name)); }
    break;

  case 187:
#line 736 "ldgram.y"
    { ldemul_hll((yyvsp[(1) - (1)].name)); }
    break;

  case 189:
#line 744 "ldgram.y"
    { ldemul_syslib((yyvsp[(3) - (3)].name)); }
    break;

  case 191:
#line 750 "ldgram.y"
    { lang_float(TRUE); }
    break;

  case 192:
#line 752 "ldgram.y"
    { lang_float(FALSE); }
    break;

  case 193:
#line 757 "ldgram.y"
    {
		  (yyval.nocrossref) = NULL;
		}
    break;

  case 194:
#line 761 "ldgram.y"
    {
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = (yyvsp[(1) - (2)].name);
		  n->next = (yyvsp[(2) - (2)].nocrossref);
		  (yyval.nocrossref) = n;
		}
    break;

  case 195:
#line 770 "ldgram.y"
    {
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = (yyvsp[(1) - (3)].name);
		  n->next = (yyvsp[(3) - (3)].nocrossref);
		  (yyval.nocrossref) = n;
		}
    break;

  case 196:
#line 780 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 197:
#line 782 "ldgram.y"
    { ldlex_popstate (); (yyval.etree)=(yyvsp[(2) - (2)].etree);}
    break;

  case 198:
#line 787 "ldgram.y"
    { (yyval.etree) = exp_unop ('-', (yyvsp[(2) - (2)].etree)); }
    break;

  case 199:
#line 789 "ldgram.y"
    { (yyval.etree) = (yyvsp[(2) - (3)].etree); }
    break;

  case 200:
#line 791 "ldgram.y"
    { (yyval.etree) = exp_unop ((int) (yyvsp[(1) - (4)].integer),(yyvsp[(3) - (4)].etree)); }
    break;

  case 201:
#line 793 "ldgram.y"
    { (yyval.etree) = exp_unop ('!', (yyvsp[(2) - (2)].etree)); }
    break;

  case 202:
#line 795 "ldgram.y"
    { (yyval.etree) = (yyvsp[(2) - (2)].etree); }
    break;

  case 203:
#line 797 "ldgram.y"
    { (yyval.etree) = exp_unop ('~', (yyvsp[(2) - (2)].etree));}
    break;

  case 204:
#line 800 "ldgram.y"
    { (yyval.etree) = exp_binop ('*', (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 205:
#line 802 "ldgram.y"
    { (yyval.etree) = exp_binop ('/', (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 206:
#line 804 "ldgram.y"
    { (yyval.etree) = exp_binop ('%', (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 207:
#line 806 "ldgram.y"
    { (yyval.etree) = exp_binop ('+', (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 208:
#line 808 "ldgram.y"
    { (yyval.etree) = exp_binop ('-' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 209:
#line 810 "ldgram.y"
    { (yyval.etree) = exp_binop (LSHIFT , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 210:
#line 812 "ldgram.y"
    { (yyval.etree) = exp_binop (RSHIFT , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 211:
#line 814 "ldgram.y"
    { (yyval.etree) = exp_binop (EQ , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 212:
#line 816 "ldgram.y"
    { (yyval.etree) = exp_binop (NE , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 213:
#line 818 "ldgram.y"
    { (yyval.etree) = exp_binop (LE , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 214:
#line 820 "ldgram.y"
    { (yyval.etree) = exp_binop (GE , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 215:
#line 822 "ldgram.y"
    { (yyval.etree) = exp_binop ('<' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 216:
#line 824 "ldgram.y"
    { (yyval.etree) = exp_binop ('>' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 217:
#line 826 "ldgram.y"
    { (yyval.etree) = exp_binop ('&' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 218:
#line 828 "ldgram.y"
    { (yyval.etree) = exp_binop ('^' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 219:
#line 830 "ldgram.y"
    { (yyval.etree) = exp_binop ('|' , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 220:
#line 832 "ldgram.y"
    { (yyval.etree) = exp_trinop ('?' , (yyvsp[(1) - (5)].etree), (yyvsp[(3) - (5)].etree), (yyvsp[(5) - (5)].etree)); }
    break;

  case 221:
#line 834 "ldgram.y"
    { (yyval.etree) = exp_binop (ANDAND , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 222:
#line 836 "ldgram.y"
    { (yyval.etree) = exp_binop (OROR , (yyvsp[(1) - (3)].etree), (yyvsp[(3) - (3)].etree)); }
    break;

  case 223:
#line 838 "ldgram.y"
    { (yyval.etree) = exp_nameop (DEFINED, (yyvsp[(3) - (4)].name)); }
    break;

  case 224:
#line 840 "ldgram.y"
    { (yyval.etree) = exp_bigintop ((yyvsp[(1) - (1)].bigint).integer, (yyvsp[(1) - (1)].bigint).str); }
    break;

  case 225:
#line 842 "ldgram.y"
    { (yyval.etree) = exp_nameop (SIZEOF_HEADERS,0); }
    break;

  case 226:
#line 845 "ldgram.y"
    { (yyval.etree) = exp_nameop (ALIGNOF,(yyvsp[(3) - (4)].name)); }
    break;

  case 227:
#line 847 "ldgram.y"
    { (yyval.etree) = exp_nameop (SIZEOF,(yyvsp[(3) - (4)].name)); }
    break;

  case 228:
#line 849 "ldgram.y"
    { (yyval.etree) = exp_nameop (ADDR,(yyvsp[(3) - (4)].name)); }
    break;

  case 229:
#line 851 "ldgram.y"
    { (yyval.etree) = exp_nameop (LOADADDR,(yyvsp[(3) - (4)].name)); }
    break;

  case 230:
#line 853 "ldgram.y"
    { (yyval.etree) = exp_nameop (CONSTANT,(yyvsp[(3) - (4)].name)); }
    break;

  case 231:
#line 855 "ldgram.y"
    { (yyval.etree) = exp_unop (ABSOLUTE, (yyvsp[(3) - (4)].etree)); }
    break;

  case 232:
#line 857 "ldgram.y"
    { (yyval.etree) = exp_unop (ALIGN_K,(yyvsp[(3) - (4)].etree)); }
    break;

  case 233:
#line 859 "ldgram.y"
    { (yyval.etree) = exp_binop (ALIGN_K,(yyvsp[(3) - (6)].etree),(yyvsp[(5) - (6)].etree)); }
    break;

  case 234:
#line 861 "ldgram.y"
    { (yyval.etree) = exp_binop (DATA_SEGMENT_ALIGN, (yyvsp[(3) - (6)].etree), (yyvsp[(5) - (6)].etree)); }
    break;

  case 235:
#line 863 "ldgram.y"
    { (yyval.etree) = exp_binop (DATA_SEGMENT_RELRO_END, (yyvsp[(5) - (6)].etree), (yyvsp[(3) - (6)].etree)); }
    break;

  case 236:
#line 865 "ldgram.y"
    { (yyval.etree) = exp_unop (DATA_SEGMENT_END, (yyvsp[(3) - (4)].etree)); }
    break;

  case 237:
#line 867 "ldgram.y"
    { /* The operands to the expression node are
			     placed in the opposite order from the way
			     in which they appear in the script as
			     that allows us to reuse more code in
			     fold_binary.  */
			  (yyval.etree) = exp_binop (SEGMENT_START,
					  (yyvsp[(5) - (6)].etree),
					  exp_nameop (NAME, (yyvsp[(3) - (6)].name))); }
    break;

  case 238:
#line 876 "ldgram.y"
    { (yyval.etree) = exp_unop (ALIGN_K,(yyvsp[(3) - (4)].etree)); }
    break;

  case 239:
#line 878 "ldgram.y"
    { (yyval.etree) = exp_nameop (NAME,(yyvsp[(1) - (1)].name)); }
    break;

  case 240:
#line 880 "ldgram.y"
    { (yyval.etree) = exp_binop (MAX_K, (yyvsp[(3) - (6)].etree), (yyvsp[(5) - (6)].etree) ); }
    break;

  case 241:
#line 882 "ldgram.y"
    { (yyval.etree) = exp_binop (MIN_K, (yyvsp[(3) - (6)].etree), (yyvsp[(5) - (6)].etree) ); }
    break;

  case 242:
#line 884 "ldgram.y"
    { (yyval.etree) = exp_assert ((yyvsp[(3) - (6)].etree), (yyvsp[(5) - (6)].name)); }
    break;

  case 243:
#line 886 "ldgram.y"
    { (yyval.etree) = exp_nameop (ORIGIN, (yyvsp[(3) - (4)].name)); }
    break;

  case 244:
#line 888 "ldgram.y"
    { (yyval.etree) = exp_nameop (LENGTH, (yyvsp[(3) - (4)].name)); }
    break;

  case 245:
#line 893 "ldgram.y"
    { (yyval.name) = (yyvsp[(3) - (3)].name); }
    break;

  case 246:
#line 894 "ldgram.y"
    { (yyval.name) = 0; }
    break;

  case 247:
#line 898 "ldgram.y"
    { (yyval.etree) = (yyvsp[(3) - (4)].etree); }
    break;

  case 248:
#line 899 "ldgram.y"
    { (yyval.etree) = 0; }
    break;

  case 249:
#line 903 "ldgram.y"
    { (yyval.etree) = (yyvsp[(3) - (4)].etree); }
    break;

  case 250:
#line 904 "ldgram.y"
    { (yyval.etree) = 0; }
    break;

  case 251:
#line 908 "ldgram.y"
    { (yyval.etree) = (yyvsp[(3) - (4)].etree); }
    break;

  case 252:
#line 909 "ldgram.y"
    { (yyval.etree) = 0; }
    break;

  case 253:
#line 913 "ldgram.y"
    { (yyval.token) = ONLY_IF_RO; }
    break;

  case 254:
#line 914 "ldgram.y"
    { (yyval.token) = ONLY_IF_RW; }
    break;

  case 255:
#line 915 "ldgram.y"
    { (yyval.token) = SPECIAL; }
    break;

  case 256:
#line 916 "ldgram.y"
    { (yyval.token) = 0; }
    break;

  case 257:
#line 919 "ldgram.y"
    { ldlex_expression(); }
    break;

  case 258:
#line 923 "ldgram.y"
    { ldlex_popstate (); ldlex_script (); }
    break;

  case 259:
#line 926 "ldgram.y"
    {
			  lang_enter_output_section_statement((yyvsp[(1) - (9)].name), (yyvsp[(3) - (9)].etree),
							      sectype,
							      (yyvsp[(5) - (9)].etree), (yyvsp[(6) - (9)].etree), (yyvsp[(4) - (9)].etree), (yyvsp[(8) - (9)].token));
			}
    break;

  case 260:
#line 932 "ldgram.y"
    { ldlex_popstate (); ldlex_expression (); }
    break;

  case 261:
#line 934 "ldgram.y"
    {
		  ldlex_popstate ();
		  lang_leave_output_section_statement ((yyvsp[(17) - (17)].fill), (yyvsp[(14) - (17)].name), (yyvsp[(16) - (17)].section_phdr), (yyvsp[(15) - (17)].name));
		}
    break;

  case 262:
#line 939 "ldgram.y"
    {}
    break;

  case 263:
#line 941 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 264:
#line 943 "ldgram.y"
    { ldlex_popstate (); ldlex_script (); }
    break;

  case 265:
#line 945 "ldgram.y"
    {
			  lang_enter_overlay ((yyvsp[(3) - (8)].etree), (yyvsp[(6) - (8)].etree));
			}
    break;

  case 266:
#line 950 "ldgram.y"
    { ldlex_popstate (); ldlex_expression (); }
    break;

  case 267:
#line 952 "ldgram.y"
    {
			  ldlex_popstate ();
			  lang_leave_overlay ((yyvsp[(5) - (16)].etree), (int) (yyvsp[(4) - (16)].integer),
					      (yyvsp[(16) - (16)].fill), (yyvsp[(13) - (16)].name), (yyvsp[(15) - (16)].section_phdr), (yyvsp[(14) - (16)].name));
			}
    break;

  case 269:
#line 962 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 270:
#line 964 "ldgram.y"
    {
		  ldlex_popstate ();
		  lang_add_assignment (exp_assop ('=', ".", (yyvsp[(3) - (3)].etree)));
		}
    break;

  case 272:
#line 972 "ldgram.y"
    { sectype = noload_section; }
    break;

  case 273:
#line 973 "ldgram.y"
    { sectype = noalloc_section; }
    break;

  case 274:
#line 974 "ldgram.y"
    { sectype = noalloc_section; }
    break;

  case 275:
#line 975 "ldgram.y"
    { sectype = noalloc_section; }
    break;

  case 276:
#line 976 "ldgram.y"
    { sectype = noalloc_section; }
    break;

  case 278:
#line 981 "ldgram.y"
    { sectype = normal_section; }
    break;

  case 279:
#line 982 "ldgram.y"
    { sectype = normal_section; }
    break;

  case 280:
#line 986 "ldgram.y"
    { (yyval.etree) = (yyvsp[(1) - (3)].etree); }
    break;

  case 281:
#line 987 "ldgram.y"
    { (yyval.etree) = (etree_type *)NULL;  }
    break;

  case 282:
#line 992 "ldgram.y"
    { (yyval.etree) = (yyvsp[(3) - (6)].etree); }
    break;

  case 283:
#line 994 "ldgram.y"
    { (yyval.etree) = (yyvsp[(3) - (10)].etree); }
    break;

  case 284:
#line 998 "ldgram.y"
    { (yyval.etree) = (yyvsp[(1) - (2)].etree); }
    break;

  case 285:
#line 999 "ldgram.y"
    { (yyval.etree) = (etree_type *) NULL;  }
    break;

  case 286:
#line 1004 "ldgram.y"
    { (yyval.integer) = 0; }
    break;

  case 287:
#line 1006 "ldgram.y"
    { (yyval.integer) = 1; }
    break;

  case 288:
#line 1011 "ldgram.y"
    { (yyval.name) = (yyvsp[(2) - (2)].name); }
    break;

  case 289:
#line 1012 "ldgram.y"
    { (yyval.name) = DEFAULT_MEMORY_REGION; }
    break;

  case 290:
#line 1017 "ldgram.y"
    {
		  (yyval.section_phdr) = NULL;
		}
    break;

  case 291:
#line 1021 "ldgram.y"
    {
		  struct lang_output_section_phdr_list *n;

		  n = ((struct lang_output_section_phdr_list *)
		       xmalloc (sizeof *n));
		  n->name = (yyvsp[(3) - (3)].name);
		  n->used = FALSE;
		  n->next = (yyvsp[(1) - (3)].section_phdr);
		  (yyval.section_phdr) = n;
		}
    break;

  case 293:
#line 1037 "ldgram.y"
    {
			  ldlex_script ();
			  lang_enter_overlay_section ((yyvsp[(2) - (2)].name));
			}
    break;

  case 294:
#line 1042 "ldgram.y"
    { ldlex_popstate (); ldlex_expression (); }
    break;

  case 295:
#line 1044 "ldgram.y"
    {
			  ldlex_popstate ();
			  lang_leave_overlay_section ((yyvsp[(9) - (9)].fill), (yyvsp[(8) - (9)].section_phdr));
			}
    break;

  case 300:
#line 1061 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 301:
#line 1062 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 302:
#line 1064 "ldgram.y"
    {
		  lang_new_phdr ((yyvsp[(1) - (6)].name), (yyvsp[(3) - (6)].etree), (yyvsp[(4) - (6)].phdr).filehdr, (yyvsp[(4) - (6)].phdr).phdrs, (yyvsp[(4) - (6)].phdr).at,
				 (yyvsp[(4) - (6)].phdr).flags);
		}
    break;

  case 303:
#line 1072 "ldgram.y"
    {
		  (yyval.etree) = (yyvsp[(1) - (1)].etree);

		  if ((yyvsp[(1) - (1)].etree)->type.node_class == etree_name
		      && (yyvsp[(1) - (1)].etree)->type.node_code == NAME)
		    {
		      const char *s;
		      unsigned int i;
		      static const char * const phdr_types[] =
			{
			  "PT_NULL", "PT_LOAD", "PT_DYNAMIC",
			  "PT_INTERP", "PT_NOTE", "PT_SHLIB",
			  "PT_PHDR", "PT_TLS"
			};

		      s = (yyvsp[(1) - (1)].etree)->name.name;
		      for (i = 0;
			   i < sizeof phdr_types / sizeof phdr_types[0];
			   i++)
			if (strcmp (s, phdr_types[i]) == 0)
			  {
			    (yyval.etree) = exp_intop (i);
			    break;
			  }
		      if (i == sizeof phdr_types / sizeof phdr_types[0])
			{
			  if (strcmp (s, "PT_GNU_EH_FRAME") == 0)
			    (yyval.etree) = exp_intop (0x6474e550);
			  else if (strcmp (s, "PT_GNU_STACK") == 0)
			    (yyval.etree) = exp_intop (0x6474e551);
			  else
			    {
			      einfo (_("\
%X%P:%S: unknown phdr type `%s' (try integer literal)\n"),
				     s);
			      (yyval.etree) = exp_intop (0);
			    }
			}
		    }
		}
    break;

  case 304:
#line 1116 "ldgram.y"
    {
		  memset (&(yyval.phdr), 0, sizeof (struct phdr_info));
		}
    break;

  case 305:
#line 1120 "ldgram.y"
    {
		  (yyval.phdr) = (yyvsp[(3) - (3)].phdr);
		  if (strcmp ((yyvsp[(1) - (3)].name), "FILEHDR") == 0 && (yyvsp[(2) - (3)].etree) == NULL)
		    (yyval.phdr).filehdr = TRUE;
		  else if (strcmp ((yyvsp[(1) - (3)].name), "PHDRS") == 0 && (yyvsp[(2) - (3)].etree) == NULL)
		    (yyval.phdr).phdrs = TRUE;
		  else if (strcmp ((yyvsp[(1) - (3)].name), "FLAGS") == 0 && (yyvsp[(2) - (3)].etree) != NULL)
		    (yyval.phdr).flags = (yyvsp[(2) - (3)].etree);
		  else
		    einfo (_("%X%P:%S: PHDRS syntax error at `%s'\n"), (yyvsp[(1) - (3)].name));
		}
    break;

  case 306:
#line 1132 "ldgram.y"
    {
		  (yyval.phdr) = (yyvsp[(5) - (5)].phdr);
		  (yyval.phdr).at = (yyvsp[(3) - (5)].etree);
		}
    break;

  case 307:
#line 1140 "ldgram.y"
    {
		  (yyval.etree) = NULL;
		}
    break;

  case 308:
#line 1144 "ldgram.y"
    {
		  (yyval.etree) = (yyvsp[(2) - (3)].etree);
		}
    break;

  case 309:
#line 1150 "ldgram.y"
    {
		  ldlex_version_file ();
		  PUSH_ERROR (_("dynamic list"));
		}
    break;

  case 310:
#line 1155 "ldgram.y"
    {
		  ldlex_popstate ();
		  POP_ERROR ();
		}
    break;

  case 314:
#line 1172 "ldgram.y"
    {
		  lang_append_dynamic_list ((yyvsp[(1) - (2)].versyms));
		}
    break;

  case 315:
#line 1180 "ldgram.y"
    {
		  ldlex_version_file ();
		  PUSH_ERROR (_("VERSION script"));
		}
    break;

  case 316:
#line 1185 "ldgram.y"
    {
		  ldlex_popstate ();
		  POP_ERROR ();
		}
    break;

  case 317:
#line 1194 "ldgram.y"
    {
		  ldlex_version_script ();
		}
    break;

  case 318:
#line 1198 "ldgram.y"
    {
		  ldlex_popstate ();
		}
    break;

  case 321:
#line 1210 "ldgram.y"
    {
		  lang_register_vers_node (NULL, (yyvsp[(2) - (4)].versnode), NULL);
		}
    break;

  case 322:
#line 1214 "ldgram.y"
    {
		  lang_register_vers_node ((yyvsp[(1) - (5)].name), (yyvsp[(3) - (5)].versnode), NULL);
		}
    break;

  case 323:
#line 1218 "ldgram.y"
    {
		  lang_register_vers_node ((yyvsp[(1) - (6)].name), (yyvsp[(3) - (6)].versnode), (yyvsp[(5) - (6)].deflist));
		}
    break;

  case 324:
#line 1225 "ldgram.y"
    {
		  (yyval.deflist) = lang_add_vers_depend (NULL, (yyvsp[(1) - (1)].name));
		}
    break;

  case 325:
#line 1229 "ldgram.y"
    {
		  (yyval.deflist) = lang_add_vers_depend ((yyvsp[(1) - (2)].deflist), (yyvsp[(2) - (2)].name));
		}
    break;

  case 326:
#line 1236 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node (NULL, NULL);
		}
    break;

  case 327:
#line 1240 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node ((yyvsp[(1) - (2)].versyms), NULL);
		}
    break;

  case 328:
#line 1244 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node ((yyvsp[(3) - (4)].versyms), NULL);
		}
    break;

  case 329:
#line 1248 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node (NULL, (yyvsp[(3) - (4)].versyms));
		}
    break;

  case 330:
#line 1252 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node ((yyvsp[(3) - (8)].versyms), (yyvsp[(7) - (8)].versyms));
		}
    break;

  case 331:
#line 1259 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, (yyvsp[(1) - (1)].name), ldgram_vers_current_lang, FALSE);
		}
    break;

  case 332:
#line 1263 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, (yyvsp[(1) - (1)].name), ldgram_vers_current_lang, TRUE);
		}
    break;

  case 333:
#line 1267 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[(1) - (3)].versyms), (yyvsp[(3) - (3)].name), ldgram_vers_current_lang, FALSE);
		}
    break;

  case 334:
#line 1271 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[(1) - (3)].versyms), (yyvsp[(3) - (3)].name), ldgram_vers_current_lang, TRUE);
		}
    break;

  case 335:
#line 1275 "ldgram.y"
    {
			  (yyval.name) = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = (yyvsp[(4) - (5)].name);
			}
    break;

  case 336:
#line 1280 "ldgram.y"
    {
			  struct bfd_elf_version_expr *pat;
			  for (pat = (yyvsp[(7) - (9)].versyms); pat->next != NULL; pat = pat->next);
			  pat->next = (yyvsp[(1) - (9)].versyms);
			  (yyval.versyms) = (yyvsp[(7) - (9)].versyms);
			  ldgram_vers_current_lang = (yyvsp[(6) - (9)].name);
			}
    break;

  case 337:
#line 1288 "ldgram.y"
    {
			  (yyval.name) = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = (yyvsp[(2) - (3)].name);
			}
    break;

  case 338:
#line 1293 "ldgram.y"
    {
			  (yyval.versyms) = (yyvsp[(5) - (7)].versyms);
			  ldgram_vers_current_lang = (yyvsp[(4) - (7)].name);
			}
    break;

  case 339:
#line 1298 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, "global", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 340:
#line 1302 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[(1) - (3)].versyms), "global", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 341:
#line 1306 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, "local", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 342:
#line 1310 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[(1) - (3)].versyms), "local", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 343:
#line 1314 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, "extern", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 344:
#line 1318 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[(1) - (3)].versyms), "extern", ldgram_vers_current_lang, FALSE);
		}
    break;


/* Line 1267 of yacc.c.  */
#line 4178 "ldgram.c"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


#line 1328 "ldgram.y"

void
yyerror(arg)
     const char *arg;
{
  if (ldfile_assumed_script)
    einfo (_("%P:%s: file format not recognized; treating as linker script\n"),
	   ldfile_input_filename);
  if (error_index > 0 && error_index < ERROR_NAME_MAX)
     einfo ("%P%F:%S: %s in %s\n", arg, error_names[error_index-1]);
  else
     einfo ("%P%F:%S: %s\n", arg);
}

@


1.1.16.1
log
@Commit generated files.
@
text
@a0 4163
/* A Bison parser, made by GNU Bison 2.1.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Written by Richard Stallman by simplifying the original so called
   ``semantic'' parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     INT = 258,
     NAME = 259,
     LNAME = 260,
     OREQ = 261,
     ANDEQ = 262,
     RSHIFTEQ = 263,
     LSHIFTEQ = 264,
     DIVEQ = 265,
     MULTEQ = 266,
     MINUSEQ = 267,
     PLUSEQ = 268,
     OROR = 269,
     ANDAND = 270,
     NE = 271,
     EQ = 272,
     GE = 273,
     LE = 274,
     RSHIFT = 275,
     LSHIFT = 276,
     UNARY = 277,
     END = 278,
     ALIGN_K = 279,
     BLOCK = 280,
     BIND = 281,
     QUAD = 282,
     SQUAD = 283,
     LONG = 284,
     SHORT = 285,
     BYTE = 286,
     SECTIONS = 287,
     PHDRS = 288,
     DATA_SEGMENT_ALIGN = 289,
     DATA_SEGMENT_RELRO_END = 290,
     DATA_SEGMENT_END = 291,
     SORT_BY_NAME = 292,
     SORT_BY_ALIGNMENT = 293,
     SIZEOF_HEADERS = 294,
     OUTPUT_FORMAT = 295,
     FORCE_COMMON_ALLOCATION = 296,
     OUTPUT_ARCH = 297,
     INHIBIT_COMMON_ALLOCATION = 298,
     SEGMENT_START = 299,
     INCLUDE = 300,
     MEMORY = 301,
     DEFSYMEND = 302,
     NOLOAD = 303,
     DSECT = 304,
     COPY = 305,
     INFO = 306,
     OVERLAY = 307,
     DEFINED = 308,
     TARGET_K = 309,
     SEARCH_DIR = 310,
     MAP = 311,
     ENTRY = 312,
     NEXT = 313,
     SIZEOF = 314,
     ADDR = 315,
     LOADADDR = 316,
     MAX_K = 317,
     MIN_K = 318,
     STARTUP = 319,
     HLL = 320,
     SYSLIB = 321,
     FLOAT = 322,
     NOFLOAT = 323,
     NOCROSSREFS = 324,
     ORIGIN = 325,
     FILL = 326,
     LENGTH = 327,
     CREATE_OBJECT_SYMBOLS = 328,
     INPUT = 329,
     GROUP = 330,
     OUTPUT = 331,
     CONSTRUCTORS = 332,
     ALIGNMOD = 333,
     AT = 334,
     SUBALIGN = 335,
     PROVIDE = 336,
     PROVIDE_HIDDEN = 337,
     AS_NEEDED = 338,
     CHIP = 339,
     LIST = 340,
     SECT = 341,
     ABSOLUTE = 342,
     LOAD = 343,
     NEWLINE = 344,
     ENDWORD = 345,
     ORDER = 346,
     NAMEWORD = 347,
     ASSERT_K = 348,
     FORMAT = 349,
     PUBLIC = 350,
     BASE = 351,
     ALIAS = 352,
     TRUNCATE = 353,
     REL = 354,
     INPUT_SCRIPT = 355,
     INPUT_MRI_SCRIPT = 356,
     INPUT_DEFSYM = 357,
     CASE = 358,
     EXTERN = 359,
     START = 360,
     VERS_TAG = 361,
     VERS_IDENTIFIER = 362,
     GLOBAL = 363,
     LOCAL = 364,
     VERSIONK = 365,
     INPUT_VERSION_SCRIPT = 366,
     KEEP = 367,
     ONLY_IF_RO = 368,
     ONLY_IF_RW = 369,
     SPECIAL = 370,
     EXCLUDE_FILE = 371
   };
#endif
/* Tokens.  */
#define INT 258
#define NAME 259
#define LNAME 260
#define OREQ 261
#define ANDEQ 262
#define RSHIFTEQ 263
#define LSHIFTEQ 264
#define DIVEQ 265
#define MULTEQ 266
#define MINUSEQ 267
#define PLUSEQ 268
#define OROR 269
#define ANDAND 270
#define NE 271
#define EQ 272
#define GE 273
#define LE 274
#define RSHIFT 275
#define LSHIFT 276
#define UNARY 277
#define END 278
#define ALIGN_K 279
#define BLOCK 280
#define BIND 281
#define QUAD 282
#define SQUAD 283
#define LONG 284
#define SHORT 285
#define BYTE 286
#define SECTIONS 287
#define PHDRS 288
#define DATA_SEGMENT_ALIGN 289
#define DATA_SEGMENT_RELRO_END 290
#define DATA_SEGMENT_END 291
#define SORT_BY_NAME 292
#define SORT_BY_ALIGNMENT 293
#define SIZEOF_HEADERS 294
#define OUTPUT_FORMAT 295
#define FORCE_COMMON_ALLOCATION 296
#define OUTPUT_ARCH 297
#define INHIBIT_COMMON_ALLOCATION 298
#define SEGMENT_START 299
#define INCLUDE 300
#define MEMORY 301
#define DEFSYMEND 302
#define NOLOAD 303
#define DSECT 304
#define COPY 305
#define INFO 306
#define OVERLAY 307
#define DEFINED 308
#define TARGET_K 309
#define SEARCH_DIR 310
#define MAP 311
#define ENTRY 312
#define NEXT 313
#define SIZEOF 314
#define ADDR 315
#define LOADADDR 316
#define MAX_K 317
#define MIN_K 318
#define STARTUP 319
#define HLL 320
#define SYSLIB 321
#define FLOAT 322
#define NOFLOAT 323
#define NOCROSSREFS 324
#define ORIGIN 325
#define FILL 326
#define LENGTH 327
#define CREATE_OBJECT_SYMBOLS 328
#define INPUT 329
#define GROUP 330
#define OUTPUT 331
#define CONSTRUCTORS 332
#define ALIGNMOD 333
#define AT 334
#define SUBALIGN 335
#define PROVIDE 336
#define PROVIDE_HIDDEN 337
#define AS_NEEDED 338
#define CHIP 339
#define LIST 340
#define SECT 341
#define ABSOLUTE 342
#define LOAD 343
#define NEWLINE 344
#define ENDWORD 345
#define ORDER 346
#define NAMEWORD 347
#define ASSERT_K 348
#define FORMAT 349
#define PUBLIC 350
#define BASE 351
#define ALIAS 352
#define TRUNCATE 353
#define REL 354
#define INPUT_SCRIPT 355
#define INPUT_MRI_SCRIPT 356
#define INPUT_DEFSYM 357
#define CASE 358
#define EXTERN 359
#define START 360
#define VERS_TAG 361
#define VERS_IDENTIFIER 362
#define GLOBAL 363
#define LOCAL 364
#define VERSIONK 365
#define INPUT_VERSION_SCRIPT 366
#define KEEP 367
#define ONLY_IF_RO 368
#define ONLY_IF_RW 369
#define SPECIAL 370
#define EXCLUDE_FILE 371




/* Copy the first part of user declarations.  */
#line 22 "ldgram.y"

/*

 */

#define DONTDECLARE_MALLOC

#include "bfd.h"
#include "sysdep.h"
#include "bfdlink.h"
#include "ld.h"
#include "ldexp.h"
#include "ldver.h"
#include "ldlang.h"
#include "ldfile.h"
#include "ldemul.h"
#include "ldmisc.h"
#include "ldmain.h"
#include "mri.h"
#include "ldctor.h"
#include "ldlex.h"

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

static enum section_type sectype;
static lang_memory_region_type *region;

FILE *saved_script_handle = NULL;
bfd_boolean force_make_executable = FALSE;

bfd_boolean ldgram_in_script = FALSE;
bfd_boolean ldgram_had_equals = FALSE;
bfd_boolean ldgram_had_keep = FALSE;
char *ldgram_vers_current_lang = NULL;

#define ERROR_NAME_MAX 20
static char *error_names[ERROR_NAME_MAX];
static int error_index;
#define PUSH_ERROR(x) if (error_index < ERROR_NAME_MAX) error_names[error_index] = x; error_index++;
#define POP_ERROR()   error_index--;


/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
#line 65 "ldgram.y"
typedef union YYSTYPE {
  bfd_vma integer;
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      bfd_boolean filehdr;
      bfd_boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
} YYSTYPE;
/* Line 196 of yacc.c.  */
#line 390 "ldgram.c"
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 219 of yacc.c.  */
#line 402 "ldgram.c"

#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T) && (defined (__STDC__) || defined (__cplusplus))
# include <stddef.h> /* INFRINGES ON USER NAME SPACE */
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

#if ! defined (yyoverflow) || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if defined (__STDC__) || defined (__cplusplus)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     define YYINCLUDED_STDLIB_H
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2005 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM ((YYSIZE_T) -1)
#  endif
#  ifdef __cplusplus
extern "C" {
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if (! defined (malloc) && ! defined (YYINCLUDED_STDLIB_H) \
	&& (defined (__STDC__) || defined (__cplusplus)))
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if (! defined (free) && ! defined (YYINCLUDED_STDLIB_H) \
	&& (defined (__STDC__) || defined (__cplusplus)))
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifdef __cplusplus
}
#  endif
# endif
#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short int yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short int) + sizeof (YYSTYPE))			\
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined (__GNUC__) && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif

#if defined (__STDC__) || defined (__cplusplus)
   typedef signed char yysigned_char;
#else
   typedef short int yysigned_char;
#endif

/* YYFINAL -- State number of the termination state. */
#define YYFINAL  14
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1716

/* YYNTOKENS -- Number of terminals. */
#define YYNTOKENS  140
/* YYNNTS -- Number of nonterminals. */
#define YYNNTS  114
/* YYNRULES -- Number of rules. */
#define YYNRULES  333
/* YYNRULES -- Number of states. */
#define YYNSTATES  707

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   371

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   138,     2,     2,     2,    34,    21,     2,
      37,   135,    32,    30,   133,    31,     2,    33,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    16,   134,
      24,     6,    25,    15,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   136,     2,   137,    20,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    53,    19,    54,   139,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     7,     8,     9,    10,    11,    12,    13,    14,    17,
      18,    22,    23,    26,    27,    28,    29,    35,    36,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short int yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    15,    17,    18,    23,
      24,    27,    31,    32,    35,    40,    42,    44,    47,    49,
      54,    59,    63,    66,    71,    75,    80,    85,    90,    95,
     100,   103,   106,   109,   114,   119,   122,   125,   128,   131,
     132,   138,   141,   142,   146,   149,   150,   152,   156,   158,
     162,   163,   165,   169,   171,   174,   178,   179,   182,   185,
     186,   188,   190,   192,   194,   196,   198,   200,   202,   204,
     206,   211,   216,   221,   226,   235,   240,   242,   244,   249,
     250,   256,   261,   262,   268,   273,   278,   280,   284,   287,
     289,   293,   296,   297,   303,   304,   312,   313,   320,   325,
     328,   331,   332,   337,   340,   341,   349,   351,   353,   355,
     357,   363,   368,   373,   381,   389,   397,   405,   414,   417,
     419,   423,   425,   427,   431,   436,   438,   439,   445,   448,
     450,   452,   454,   459,   461,   466,   471,   474,   476,   477,
     479,   481,   483,   485,   487,   489,   491,   494,   495,   497,
     499,   501,   503,   505,   507,   509,   511,   513,   515,   519,
     523,   530,   537,   539,   540,   546,   549,   553,   554,   555,
     563,   567,   571,   572,   576,   578,   581,   583,   586,   591,
     596,   600,   604,   606,   611,   615,   616,   618,   620,   621,
     624,   628,   629,   632,   635,   639,   644,   647,   650,   653,
     657,   661,   665,   669,   673,   677,   681,   685,   689,   693,
     697,   701,   705,   709,   713,   717,   723,   727,   731,   736,
     738,   740,   745,   750,   755,   760,   765,   772,   779,   786,
     791,   798,   803,   805,   812,   819,   826,   831,   836,   840,
     841,   846,   847,   852,   853,   858,   859,   861,   863,   865,
     866,   867,   868,   869,   870,   871,   891,   892,   893,   894,
     895,   896,   915,   916,   917,   925,   927,   929,   931,   933,
     935,   939,   940,   943,   947,   950,   957,   968,   971,   973,
     974,   976,   979,   980,   981,   985,   986,   987,   988,   989,
    1001,  1006,  1007,  1010,  1011,  1012,  1019,  1021,  1022,  1026,
    1032,  1033,  1037,  1038,  1041,  1042,  1048,  1050,  1053,  1058,
    1064,  1071,  1073,  1076,  1077,  1080,  1085,  1090,  1099,  1101,
    1103,  1107,  1111,  1112,  1122,  1123,  1131,  1133,  1137,  1139,
    1143,  1145,  1149,  1150
};

/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const short int yyrhs[] =
{
     141,     0,    -1,   116,   155,    -1,   117,   145,    -1,   127,
     242,    -1,   118,   143,    -1,     4,    -1,    -1,   144,     4,
       6,   204,    -1,    -1,   146,   147,    -1,   147,   148,   105,
      -1,    -1,   100,   204,    -1,   100,   204,   133,   204,    -1,
       4,    -1,   101,    -1,   107,   150,    -1,   106,    -1,   111,
       4,     6,   204,    -1,   111,     4,   133,   204,    -1,   111,
       4,   204,    -1,   110,     4,    -1,   102,     4,   133,   204,
      -1,   102,     4,   204,    -1,   102,     4,     6,   204,    -1,
      38,     4,     6,   204,    -1,    38,     4,   133,   204,    -1,
      94,     4,     6,   204,    -1,    94,     4,   133,   204,    -1,
     103,   152,    -1,   104,   151,    -1,   108,     4,    -1,   113,
       4,   133,     4,    -1,   113,     4,   133,     3,    -1,   112,
     204,    -1,   114,     3,    -1,   119,   153,    -1,   120,   154,
      -1,    -1,    61,   142,   149,   147,    36,    -1,   121,     4,
      -1,    -1,   150,   133,     4,    -1,   150,     4,    -1,    -1,
       4,    -1,   151,   133,     4,    -1,     4,    -1,   152,   133,
       4,    -1,    -1,     4,    -1,   153,   133,     4,    -1,     4,
      -1,   154,     4,    -1,   154,   133,     4,    -1,    -1,   156,
     157,    -1,   157,   158,    -1,    -1,   186,    -1,   165,    -1,
     234,    -1,   195,    -1,   196,    -1,   198,    -1,   200,    -1,
     167,    -1,   244,    -1,   134,    -1,    70,    37,     4,   135,
      -1,    71,    37,   142,   135,    -1,    92,    37,   142,   135,
      -1,    56,    37,     4,   135,    -1,    56,    37,     4,   133,
       4,   133,     4,   135,    -1,    58,    37,     4,   135,    -1,
      57,    -1,    59,    -1,    90,    37,   161,   135,    -1,    -1,
      91,   159,    37,   161,   135,    -1,    72,    37,   142,   135,
      -1,    -1,    61,   142,   160,   157,    36,    -1,    85,    37,
     201,   135,    -1,   120,    37,   154,   135,    -1,     4,    -1,
     161,   133,     4,    -1,   161,     4,    -1,     5,    -1,   161,
     133,     5,    -1,   161,     5,    -1,    -1,    99,    37,   162,
     161,   135,    -1,    -1,   161,   133,    99,    37,   163,   161,
     135,    -1,    -1,   161,    99,    37,   164,   161,   135,    -1,
      46,    53,   166,    54,    -1,   166,   210,    -1,   166,   167,
      -1,    -1,    73,    37,     4,   135,    -1,   184,   183,    -1,
      -1,   109,   168,    37,   204,   133,     4,   135,    -1,     4,
      -1,    32,    -1,    15,    -1,   169,    -1,   132,    37,   171,
     135,   169,    -1,    51,    37,   169,   135,    -1,    52,    37,
     169,   135,    -1,    51,    37,    52,    37,   169,   135,   135,
      -1,    51,    37,    51,    37,   169,   135,   135,    -1,    52,
      37,    51,    37,   169,   135,   135,    -1,    52,    37,    52,
      37,   169,   135,   135,    -1,    51,    37,   132,    37,   171,
     135,   169,   135,    -1,   171,   169,    -1,   169,    -1,   172,
     185,   170,    -1,   170,    -1,     4,    -1,   136,   172,   137,
      -1,   170,    37,   172,   135,    -1,   173,    -1,    -1,   128,
      37,   175,   173,   135,    -1,   184,   183,    -1,    89,    -1,
     134,    -1,    93,    -1,    51,    37,    93,   135,    -1,   174,
      -1,   179,    37,   202,   135,    -1,    87,    37,   180,   135,
      -1,   177,   176,    -1,   176,    -1,    -1,   177,    -1,    41,
      -1,    42,    -1,    43,    -1,    44,    -1,    45,    -1,   202,
      -1,     6,   180,    -1,    -1,    14,    -1,    13,    -1,    12,
      -1,    11,    -1,    10,    -1,     9,    -1,     8,    -1,     7,
      -1,   134,    -1,   133,    -1,     4,     6,   202,    -1,     4,
     182,   202,    -1,    97,    37,     4,     6,   202,   135,    -1,
      98,    37,     4,     6,   202,   135,    -1,   133,    -1,    -1,
      62,    53,   188,   187,    54,    -1,   187,   188,    -1,   187,
     133,   188,    -1,    -1,    -1,     4,   189,   192,    16,   190,
     185,   191,    -1,    86,     6,   202,    -1,    88,     6,   202,
      -1,    -1,    37,   193,   135,    -1,   194,    -1,   193,   194,
      -1,     4,    -1,   138,     4,    -1,    80,    37,   142,   135,
      -1,    81,    37,   197,   135,    -1,    81,    37,   135,    -1,
     197,   185,   142,    -1,   142,    -1,    82,    37,   199,   135,
      -1,   199,   185,   142,    -1,    -1,    83,    -1,    84,    -1,
      -1,     4,   201,    -1,     4,   133,   201,    -1,    -1,   203,
     204,    -1,    31,   204,    -1,    37,   204,   135,    -1,    74,
      37,   204,   135,    -1,   138,   204,    -1,    30,   204,    -1,
     139,   204,    -1,   204,    32,   204,    -1,   204,    33,   204,
      -1,   204,    34,   204,    -1,   204,    30,   204,    -1,   204,
      31,   204,    -1,   204,    29,   204,    -1,   204,    28,   204,
      -1,   204,    23,   204,    -1,   204,    22,   204,    -1,   204,
      27,   204,    -1,   204,    26,   204,    -1,   204,    24,   204,
      -1,   204,    25,   204,    -1,   204,    21,   204,    -1,   204,
      20,   204,    -1,   204,    19,   204,    -1,   204,    15,   204,
      16,   204,    -1,   204,    18,   204,    -1,   204,    17,   204,
      -1,    69,    37,     4,   135,    -1,     3,    -1,    55,    -1,
      75,    37,     4,   135,    -1,    76,    37,     4,   135,    -1,
      77,    37,     4,   135,    -1,   103,    37,   204,   135,    -1,
      38,    37,   204,   135,    -1,    38,    37,   204,   133,   204,
     135,    -1,    48,    37,   204,   133,   204,   135,    -1,    49,
      37,   204,   133,   204,   135,    -1,    50,    37,   204,   135,
      -1,    60,    37,     4,   133,   204,   135,    -1,    39,    37,
     204,   135,    -1,     4,    -1,    78,    37,   204,   133,   204,
     135,    -1,    79,    37,   204,   133,   204,   135,    -1,   109,
      37,   204,   133,     4,   135,    -1,    86,    37,     4,   135,
      -1,    88,    37,     4,   135,    -1,    95,    25,     4,    -1,
      -1,    95,    37,   204,   135,    -1,    -1,    38,    37,   204,
     135,    -1,    -1,    96,    37,   204,   135,    -1,    -1,   129,
      -1,   130,    -1,   131,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     4,   211,   225,   206,   207,   208,   212,   209,    53,
     213,   178,    54,   214,   228,   205,   229,   181,   215,   185,
      -1,    -1,    -1,    -1,    -1,    -1,    68,   216,   226,   227,
     206,   208,   217,    53,   218,   230,    54,   219,   228,   205,
     229,   181,   220,   185,    -1,    -1,    -1,    91,   221,   225,
     222,    53,   166,    54,    -1,    64,    -1,    65,    -1,    66,
      -1,    67,    -1,    68,    -1,    37,   223,   135,    -1,    -1,
      37,   135,    -1,   204,   224,    16,    -1,   224,    16,    -1,
      40,    37,   204,   135,   224,    16,    -1,    40,    37,   204,
     135,    39,    37,   204,   135,   224,    16,    -1,   204,    16,
      -1,    16,    -1,    -1,    85,    -1,    25,     4,    -1,    -1,
      -1,   229,    16,     4,    -1,    -1,    -1,    -1,    -1,   230,
       4,   231,    53,   178,    54,   232,   229,   181,   233,   185,
      -1,    47,    53,   235,    54,    -1,    -1,   235,   236,    -1,
      -1,    -1,     4,   237,   239,   240,   238,   134,    -1,   204,
      -1,    -1,     4,   241,   240,    -1,    95,    37,   204,   135,
     240,    -1,    -1,    37,   204,   135,    -1,    -1,   243,   246,
      -1,    -1,   245,   126,    53,   246,    54,    -1,   247,    -1,
     246,   247,    -1,    53,   249,    54,   134,    -1,   122,    53,
     249,    54,   134,    -1,   122,    53,   249,    54,   248,   134,
      -1,   122,    -1,   248,   122,    -1,    -1,   250,   134,    -1,
     124,    16,   250,   134,    -1,   125,    16,   250,   134,    -1,
     124,    16,   250,   134,   125,    16,   250,   134,    -1,   123,
      -1,     4,    -1,   250,   134,   123,    -1,   250,   134,     4,
      -1,    -1,   250,   134,   120,     4,    53,   251,   250,   253,
      54,    -1,    -1,   120,     4,    53,   252,   250,   253,    54,
      -1,   124,    -1,   250,   134,   124,    -1,   125,    -1,   250,
     134,   125,    -1,   120,    -1,   250,   134,   120,    -1,    -1,
     134,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short int yyrline[] =
{
       0,   162,   162,   163,   164,   165,   169,   173,   173,   183,
     183,   196,   197,   201,   202,   203,   206,   209,   210,   211,
     213,   215,   217,   219,   221,   223,   225,   227,   229,   231,
     233,   234,   235,   237,   239,   241,   243,   245,   246,   248,
     247,   251,   253,   257,   258,   259,   263,   265,   269,   271,
     276,   277,   278,   282,   284,   286,   291,   291,   302,   303,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   321,   323,   325,   328,   330,   332,   334,   336,   338,
     337,   341,   344,   343,   347,   351,   355,   358,   361,   364,
     367,   370,   374,   373,   378,   377,   382,   381,   388,   392,
     393,   394,   398,   400,   401,   401,   409,   413,   417,   424,
     430,   436,   442,   448,   454,   460,   466,   472,   481,   490,
     501,   510,   521,   529,   533,   540,   542,   541,   548,   549,
     553,   554,   559,   564,   565,   570,   577,   578,   581,   583,
     587,   589,   591,   593,   595,   600,   607,   609,   613,   615,
     617,   619,   621,   623,   625,   627,   632,   632,   637,   641,
     649,   653,   661,   661,   665,   669,   670,   671,   676,   675,
     683,   691,   699,   700,   704,   705,   709,   711,   716,   721,
     722,   727,   729,   735,   737,   739,   743,   745,   751,   754,
     763,   774,   774,   780,   782,   784,   786,   788,   790,   793,
     795,   797,   799,   801,   803,   805,   807,   809,   811,   813,
     815,   817,   819,   821,   823,   825,   827,   829,   831,   833,
     835,   838,   840,   842,   844,   846,   848,   850,   852,   854,
     856,   865,   867,   869,   871,   873,   875,   877,   883,   884,
     888,   889,   893,   894,   898,   899,   903,   904,   905,   906,
     909,   913,   916,   922,   924,   909,   931,   933,   935,   940,
     942,   930,   952,   954,   952,   962,   963,   964,   965,   966,
     970,   971,   972,   976,   977,   982,   983,   988,   989,   994,
     995,  1000,  1002,  1007,  1010,  1023,  1027,  1032,  1034,  1025,
    1042,  1045,  1047,  1051,  1052,  1051,  1061,  1106,  1109,  1121,
    1130,  1133,  1142,  1142,  1156,  1156,  1166,  1167,  1171,  1175,
    1179,  1186,  1190,  1198,  1201,  1205,  1209,  1213,  1220,  1224,
    1228,  1232,  1237,  1236,  1250,  1249,  1259,  1263,  1267,  1271,
    1275,  1279,  1285,  1287
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "INT", "NAME", "LNAME", "'='", "OREQ",
  "ANDEQ", "RSHIFTEQ", "LSHIFTEQ", "DIVEQ", "MULTEQ", "MINUSEQ", "PLUSEQ",
  "'?'", "':'", "OROR", "ANDAND", "'|'", "'^'", "'&'", "NE", "EQ", "'<'",
  "'>'", "GE", "LE", "RSHIFT", "LSHIFT", "'+'", "'-'", "'*'", "'/'", "'%'",
  "UNARY", "END", "'('", "ALIGN_K", "BLOCK", "BIND", "QUAD", "SQUAD",
  "LONG", "SHORT", "BYTE", "SECTIONS", "PHDRS", "DATA_SEGMENT_ALIGN",
  "DATA_SEGMENT_RELRO_END", "DATA_SEGMENT_END", "SORT_BY_NAME",
  "SORT_BY_ALIGNMENT", "'{'", "'}'", "SIZEOF_HEADERS", "OUTPUT_FORMAT",
  "FORCE_COMMON_ALLOCATION", "OUTPUT_ARCH", "INHIBIT_COMMON_ALLOCATION",
  "SEGMENT_START", "INCLUDE", "MEMORY", "DEFSYMEND", "NOLOAD", "DSECT",
  "COPY", "INFO", "OVERLAY", "DEFINED", "TARGET_K", "SEARCH_DIR", "MAP",
  "ENTRY", "NEXT", "SIZEOF", "ADDR", "LOADADDR", "MAX_K", "MIN_K",
  "STARTUP", "HLL", "SYSLIB", "FLOAT", "NOFLOAT", "NOCROSSREFS", "ORIGIN",
  "FILL", "LENGTH", "CREATE_OBJECT_SYMBOLS", "INPUT", "GROUP", "OUTPUT",
  "CONSTRUCTORS", "ALIGNMOD", "AT", "SUBALIGN", "PROVIDE",
  "PROVIDE_HIDDEN", "AS_NEEDED", "CHIP", "LIST", "SECT", "ABSOLUTE",
  "LOAD", "NEWLINE", "ENDWORD", "ORDER", "NAMEWORD", "ASSERT_K", "FORMAT",
  "PUBLIC", "BASE", "ALIAS", "TRUNCATE", "REL", "INPUT_SCRIPT",
  "INPUT_MRI_SCRIPT", "INPUT_DEFSYM", "CASE", "EXTERN", "START",
  "VERS_TAG", "VERS_IDENTIFIER", "GLOBAL", "LOCAL", "VERSIONK",
  "INPUT_VERSION_SCRIPT", "KEEP", "ONLY_IF_RO", "ONLY_IF_RW", "SPECIAL",
  "EXCLUDE_FILE", "','", "';'", "')'", "'['", "']'", "'!'", "'~'",
  "$accept", "file", "filename", "defsym_expr", "@@1", "mri_script_file",
  "@@2", "mri_script_lines", "mri_script_command", "@@3", "ordernamelist",
  "mri_load_name_list", "mri_abs_name_list", "casesymlist",
  "extern_name_list", "script_file", "@@4", "ifile_list", "ifile_p1", "@@5",
  "@@6", "input_list", "@@7", "@@8", "@@9", "sections", "sec_or_group_p1",
  "statement_anywhere", "@@10", "wildcard_name", "wildcard_spec",
  "exclude_name_list", "file_NAME_list", "input_section_spec_no_keep",
  "input_section_spec", "@@11", "statement", "statement_list",
  "statement_list_opt", "length", "fill_exp", "fill_opt", "assign_op",
  "end", "assignment", "opt_comma", "memory", "memory_spec_list",
  "memory_spec", "@@12", "origin_spec", "length_spec", "attributes_opt",
  "attributes_list", "attributes_string", "startup", "high_level_library",
  "high_level_library_NAME_list", "low_level_library",
  "low_level_library_NAME_list", "floating_point_support",
  "nocrossref_list", "mustbe_exp", "@@13", "exp", "memspec_at_opt",
  "opt_at", "opt_align", "opt_subalign", "sect_constraint", "section",
  "@@14", "@@15", "@@16", "@@17", "@@18", "@@19", "@@20", "@@21", "@@22", "@@23",
  "@@24", "@@25", "type", "atype", "opt_exp_with_type",
  "opt_exp_without_type", "opt_nocrossrefs", "memspec_opt", "phdr_opt",
  "overlay_section", "@@26", "@@27", "@@28", "phdrs", "phdr_list", "phdr",
  "@@29", "@@30", "phdr_type", "phdr_qualifiers", "phdr_val",
  "version_script_file", "@@31", "version", "@@32", "vers_nodes",
  "vers_node", "verdep", "vers_tag", "vers_defns", "@@33", "@@34",
  "opt_semicolon", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const unsigned short int yytoknum[] =
{
       0,   256,   257,   258,   259,   260,    61,   261,   262,   263,
     264,   265,   266,   267,   268,    63,    58,   269,   270,   124,
      94,    38,   271,   272,    60,    62,   273,   274,   275,   276,
      43,    45,    42,    47,    37,   277,   278,    40,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   123,   125,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    44,    59,    41,    91,    93,    33,   126
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned char yyr1[] =
{
       0,   140,   141,   141,   141,   141,   142,   144,   143,   146,
     145,   147,   147,   148,   148,   148,   148,   148,   148,   148,
     148,   148,   148,   148,   148,   148,   148,   148,   148,   148,
     148,   148,   148,   148,   148,   148,   148,   148,   148,   149,
     148,   148,   148,   150,   150,   150,   151,   151,   152,   152,
     153,   153,   153,   154,   154,   154,   156,   155,   157,   157,
     158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
     158,   158,   158,   158,   158,   158,   158,   158,   158,   159,
     158,   158,   160,   158,   158,   158,   161,   161,   161,   161,
     161,   161,   162,   161,   163,   161,   164,   161,   165,   166,
     166,   166,   167,   167,   168,   167,   169,   169,   169,   170,
     170,   170,   170,   170,   170,   170,   170,   170,   171,   171,
     172,   172,   173,   173,   173,   174,   175,   174,   176,   176,
     176,   176,   176,   176,   176,   176,   177,   177,   178,   178,
     179,   179,   179,   179,   179,   180,   181,   181,   182,   182,
     182,   182,   182,   182,   182,   182,   183,   183,   184,   184,
     184,   184,   185,   185,   186,   187,   187,   187,   189,   188,
     190,   191,   192,   192,   193,   193,   194,   194,   195,   196,
     196,   197,   197,   198,   199,   199,   200,   200,   201,   201,
     201,   203,   202,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   205,   205,
     206,   206,   207,   207,   208,   208,   209,   209,   209,   209,
     211,   212,   213,   214,   215,   210,   216,   217,   218,   219,
     220,   210,   221,   222,   210,   223,   223,   223,   223,   223,
     224,   224,   224,   225,   225,   225,   225,   226,   226,   227,
     227,   228,   228,   229,   229,   230,   231,   232,   233,   230,
     234,   235,   235,   237,   238,   236,   239,   240,   240,   240,
     241,   241,   243,   242,   245,   244,   246,   246,   247,   247,
     247,   248,   248,   249,   249,   249,   249,   249,   250,   250,
     250,   250,   251,   250,   252,   250,   250,   250,   250,   250,
     250,   250,   253,   253
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     2,     2,     2,     2,     1,     0,     4,     0,
       2,     3,     0,     2,     4,     1,     1,     2,     1,     4,
       4,     3,     2,     4,     3,     4,     4,     4,     4,     4,
       2,     2,     2,     4,     4,     2,     2,     2,     2,     0,
       5,     2,     0,     3,     2,     0,     1,     3,     1,     3,
       0,     1,     3,     1,     2,     3,     0,     2,     2,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     4,     4,     4,     8,     4,     1,     1,     4,     0,
       5,     4,     0,     5,     4,     4,     1,     3,     2,     1,
       3,     2,     0,     5,     0,     7,     0,     6,     4,     2,
       2,     0,     4,     2,     0,     7,     1,     1,     1,     1,
       5,     4,     4,     7,     7,     7,     7,     8,     2,     1,
       3,     1,     1,     3,     4,     1,     0,     5,     2,     1,
       1,     1,     4,     1,     4,     4,     2,     1,     0,     1,
       1,     1,     1,     1,     1,     1,     2,     0,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
       6,     6,     1,     0,     5,     2,     3,     0,     0,     7,
       3,     3,     0,     3,     1,     2,     1,     2,     4,     4,
       3,     3,     1,     4,     3,     0,     1,     1,     0,     2,
       3,     0,     2,     2,     3,     4,     2,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     5,     3,     3,     4,     1,
       1,     4,     4,     4,     4,     4,     6,     6,     6,     4,
       6,     4,     1,     6,     6,     6,     4,     4,     3,     0,
       4,     0,     4,     0,     4,     0,     1,     1,     1,     0,
       0,     0,     0,     0,     0,    19,     0,     0,     0,     0,
       0,    18,     0,     0,     7,     1,     1,     1,     1,     1,
       3,     0,     2,     3,     2,     6,    10,     2,     1,     0,
       1,     2,     0,     0,     3,     0,     0,     0,     0,    11,
       4,     0,     2,     0,     0,     6,     1,     0,     3,     5,
       0,     3,     0,     2,     0,     5,     1,     2,     4,     5,
       6,     1,     2,     0,     2,     4,     4,     8,     1,     1,
       3,     3,     0,     9,     0,     7,     1,     3,     1,     3,
       1,     3,     0,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const unsigned short int yydefact[] =
{
       0,    56,     9,     7,   302,     0,     2,    59,     3,    12,
       5,     0,     4,     0,     1,    57,    10,     0,   313,     0,
     303,   306,     0,     0,     0,     0,    76,     0,    77,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   186,   187,
       0,     0,    79,     0,     0,     0,   104,     0,    69,    58,
      61,    67,     0,    60,    63,    64,    65,    66,    62,    68,
       0,    15,     0,     0,     0,     0,    16,     0,     0,     0,
      18,    45,     0,     0,     0,     0,     0,     0,    50,     0,
       0,     0,     0,   319,   330,   318,   326,   328,     0,     0,
     313,   307,   191,   155,   154,   153,   152,   151,   150,   149,
     148,   191,   101,   291,     0,     0,     6,    82,     0,     0,
       0,     0,     0,     0,     0,   185,   188,     0,     0,     0,
       0,     0,     0,     0,   157,   156,   103,     0,     0,    39,
       0,   219,   232,     0,     0,     0,     0,     0,     0,     0,
       0,   220,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    13,     0,    48,    30,
      46,    31,    17,    32,    22,     0,    35,     0,    36,    51,
      37,    53,    38,    41,    11,     8,     0,     0,     0,     0,
     314,     0,   158,     0,   159,     0,     0,     0,     0,    59,
     168,   167,     0,     0,     0,     0,     0,   180,   182,   163,
     163,   188,     0,    86,    89,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    12,     0,     0,   197,
     193,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   196,
     198,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    24,     0,     0,    44,     0,     0,     0,
      21,     0,     0,    54,     0,   324,   326,   328,     0,     0,
     308,   321,   331,   320,   327,   329,     0,   192,   250,    98,
     256,   262,   100,    99,   293,   290,   292,     0,    73,    75,
     304,   172,     0,    70,    71,    81,   102,   178,   162,   179,
       0,   183,     0,   188,   189,    84,    92,    88,    91,     0,
       0,    78,     0,    72,   191,   191,     0,    85,     0,    26,
      27,    42,    28,    29,   194,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   217,   216,   214,   213,   212,   207,   206,
     210,   211,   209,   208,   205,   204,   202,   203,   199,   200,
     201,    14,    25,    23,    49,    47,    43,    19,    20,    34,
      33,    52,    55,     0,   315,   316,     0,   311,   309,     0,
     271,     0,   271,     0,     0,    83,     0,     0,   164,     0,
     165,   181,   184,   190,     0,    96,    87,    90,     0,    80,
       0,     0,     0,   305,    40,     0,   225,   231,     0,     0,
     229,     0,   218,   195,   221,   222,   223,     0,     0,   236,
     237,   224,     0,     0,   332,   329,   322,   312,   310,     0,
       0,   271,     0,   241,   278,     0,   279,   263,   296,   297,
       0,   176,     0,     0,   174,     0,   166,     0,     0,    94,
     160,   161,     0,     0,     0,     0,     0,     0,     0,     0,
     215,   333,     0,     0,     0,   265,   266,   267,   268,   269,
     272,     0,     0,     0,     0,   274,     0,   243,   277,   280,
     241,     0,   300,     0,   294,     0,   177,   173,   175,     0,
     163,    93,     0,     0,   105,   226,   227,   228,   230,   233,
     234,   235,   325,     0,   332,   270,     0,   273,     0,     0,
     245,   245,   101,     0,   297,     0,     0,    74,   191,     0,
      97,     0,   317,     0,   271,     0,     0,     0,   251,   257,
       0,     0,   298,     0,   295,   170,     0,   169,    95,   323,
       0,     0,   240,     0,     0,   249,     0,   264,   301,   297,
     191,     0,   275,   242,     0,   246,   247,   248,     0,   258,
     299,   171,     0,   244,   252,   285,   271,   138,     0,     0,
     122,   108,   107,   140,   141,   142,   143,   144,     0,     0,
       0,   129,   131,     0,     0,   130,     0,   109,     0,   125,
     133,   137,   139,     0,     0,     0,   286,   259,   276,     0,
       0,   191,   126,     0,   106,     0,   121,   163,     0,   136,
     253,   191,   128,     0,   282,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   145,     0,   119,     0,     0,   123,
       0,   163,   282,     0,   138,     0,   239,     0,     0,   132,
       0,   111,     0,     0,   112,   135,   106,     0,     0,   118,
     120,   124,   239,   134,     0,   281,     0,   283,     0,     0,
       0,     0,     0,   127,   110,   283,   287,     0,   147,     0,
       0,     0,     0,     0,   147,   283,   238,   191,     0,   260,
     114,   113,     0,   115,   116,   254,   147,   146,   284,   163,
     117,   163,   288,   261,   255,   163,   289
};

/* YYDEFGOTO[NTERM-NUM]. */
static const short int yydefgoto[] =
{
      -1,     5,   107,    10,    11,     8,     9,    16,    81,   216,
     162,   161,   159,   170,   172,     6,     7,    15,    49,   118,
     189,   206,   404,   503,   458,    50,   185,    51,   122,   597,
     598,   637,   617,   599,   600,   635,   601,   602,   603,   604,
     633,   689,   101,   126,    52,   640,    53,   302,   191,   301,
     500,   547,   397,   453,   454,    54,    55,   199,    56,   200,
      57,   202,   634,   183,   221,   667,   487,   520,   538,   568,
     293,   390,   555,   577,   642,   701,   391,   556,   575,   624,
     699,   392,   491,   481,   442,   443,   446,   490,   646,   678,
     578,   623,   685,   705,    58,   186,   296,   393,   526,   449,
     494,   524,    12,    13,    59,    60,    20,    21,   389,    88,
      89,   474,   383,   472
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -601
static const short int yypact[] =
{
     110,  -601,  -601,  -601,  -601,    51,  -601,  -601,  -601,  -601,
    -601,    14,  -601,    -9,  -601,   696,  1513,    59,    97,   -21,
      -9,  -601,   860,    36,    44,    92,  -601,   103,  -601,   144,
     120,   141,   164,   168,   179,   181,   187,   198,  -601,  -601,
     212,   223,  -601,   255,   258,   261,  -601,   262,  -601,  -601,
    -601,  -601,    76,  -601,  -601,  -601,  -601,  -601,  -601,  -601,
     174,  -601,   232,   144,   297,   589,  -601,   301,   302,   305,
    -601,  -601,   306,   309,   310,   589,   311,   313,   314,   316,
     317,   221,   589,  -601,   328,  -601,   320,   324,   279,   205,
      97,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,
    -601,  -601,  -601,  -601,   337,   338,  -601,  -601,   344,   345,
     144,   144,   346,   144,    35,  -601,   348,    26,   321,   144,
     350,   359,   327,   316,  -601,  -601,  -601,   319,     9,  -601,
      41,  -601,  -601,   589,   589,   589,   339,   340,   347,   355,
     364,  -601,   365,   366,   367,   374,   375,   376,   381,   384,
     385,   387,   394,   395,   589,   589,  1322,   331,  -601,   249,
    -601,   250,    17,  -601,  -601,   445,  1682,   254,  -601,  -601,
     263,  -601,    18,  -601,  -601,  1682,   380,   199,   199,   304,
     265,   390,  -601,   589,  -601,   369,    46,   -90,   300,  -601,
    -601,  -601,   312,   315,   318,   330,   336,  -601,  -601,   119,
     131,    32,   342,  -601,  -601,   402,    12,    26,   353,   435,
     439,   589,    69,    -9,   589,   589,  -601,   589,   589,  -601,
    -601,   905,   589,   589,   589,   589,   589,   442,   448,   589,
     450,   454,   455,   589,   589,   468,   469,   589,   589,  -601,
    -601,   589,   589,   589,   589,   589,   589,   589,   589,   589,
     589,   589,   589,   589,   589,   589,   589,   589,   589,   589,
     589,   589,   589,  1682,   475,   477,  -601,   481,   589,   589,
    1682,   226,   485,  -601,   486,  -601,  -601,  -601,   357,   368,
    -601,  -601,   492,  -601,  -601,  -601,   -48,  1682,   860,  -601,
    -601,  -601,  -601,  -601,  -601,  -601,  -601,   500,  -601,  -601,
     767,   471,    10,  -601,  -601,  -601,  -601,  -601,  -601,  -601,
     144,  -601,   144,   348,  -601,  -601,  -601,  -601,  -601,   472,
      78,  -601,    24,  -601,  -601,  -601,  1342,  -601,   -12,  1682,
    1682,  1535,  1682,  1682,  -601,   885,   925,  1362,  1382,   945,
     373,   377,   965,   378,   382,   383,  1439,  1459,   391,   392,
    1004,  1479,  1642,   982,  1121,  1259,  1397,   707,   677,   677,
     573,   573,   573,   573,   210,   210,   247,   247,  -601,  -601,
    -601,  1682,  1682,  1682,  -601,  -601,  -601,  1682,  1682,  -601,
    -601,  -601,  -601,   199,   274,   265,   457,  -601,  -601,   -46,
      30,   512,    30,   589,   397,  -601,     8,   495,  -601,   344,
    -601,  -601,  -601,  -601,    26,  -601,  -601,  -601,   488,  -601,
     399,   400,   528,  -601,  -601,   589,  -601,  -601,   589,   589,
    -601,   589,  -601,  -601,  -601,  -601,  -601,   589,   589,  -601,
    -601,  -601,   534,   589,   405,   525,  -601,  -601,  -601,   208,
     507,  1501,   529,   451,  -601,  1662,   462,  -601,  1682,    19,
     548,  -601,   549,     6,  -601,   470,  -601,   115,    26,  -601,
    -601,  -601,   420,  1024,  1044,  1064,  1084,  1104,  1143,   422,
    1682,   265,   504,   199,   199,  -601,  -601,  -601,  -601,  -601,
    -601,   424,   589,   362,   547,  -601,   531,   532,  -601,  -601,
     451,   513,   536,   539,  -601,   434,  -601,  -601,  -601,   565,
     449,  -601,   126,    26,  -601,  -601,  -601,  -601,  -601,  -601,
    -601,  -601,  -601,   460,   405,  -601,  1163,  -601,   589,   558,
     503,   503,  -601,   589,    19,   589,   476,  -601,  -601,   508,
    -601,   132,   265,   555,    87,  1183,   589,   574,  -601,  -601,
     389,  1203,  -601,  1223,  -601,  -601,   606,  -601,  -601,  -601,
     576,   598,  -601,  1243,   589,   159,   563,  -601,  -601,    19,
    -601,   589,  -601,  -601,  1282,  -601,  -601,  -601,   564,  -601,
    -601,  -601,  1302,  -601,  -601,  -601,   581,   628,    48,   607,
     675,  -601,  -601,  -601,  -601,  -601,  -601,  -601,   585,   587,
     588,  -601,  -601,   592,   593,  -601,   219,  -601,   594,  -601,
    -601,  -601,   628,   579,   597,    76,  -601,  -601,  -601,   323,
     363,  -601,  -601,    62,  -601,   599,  -601,    -5,   219,  -601,
    -601,  -601,  -601,   582,   615,   604,   605,   510,   609,   517,
     610,   611,   518,   519,  -601,    83,  -601,    23,   293,  -601,
     219,   158,   615,   520,   628,   652,   562,    62,    62,  -601,
      62,  -601,    62,    62,  -601,  -601,   524,   526,    62,  -601,
    -601,  -601,   562,  -601,   608,  -601,   649,  -601,   541,   543,
      31,   556,   559,  -601,  -601,  -601,  -601,   686,    42,   560,
     561,    62,   578,   583,    42,  -601,  -601,  -601,   689,  -601,
    -601,  -601,   584,  -601,  -601,  -601,    42,  -601,  -601,   449,
    -601,   449,  -601,  -601,  -601,   449,  -601
};

/* YYPGOTO[NTERM-NUM].  */
static const short int yypgoto[] =
{
    -601,  -601,   -57,  -601,  -601,  -601,  -601,   483,  -601,  -601,
    -601,  -601,  -601,  -601,   591,  -601,  -601,   527,  -601,  -601,
    -601,  -196,  -601,  -601,  -601,  -601,   175,  -180,  -601,   -73,
    -559,    70,   104,    88,  -601,  -601,   122,  -601,   100,  -601,
      58,  -600,  -601,   142,  -553,  -198,  -601,  -601,  -277,  -601,
    -601,  -601,  -601,  -601,   295,  -601,  -601,  -601,  -601,  -601,
    -601,  -175,   -92,  -601,   -62,    84,   259,  -601,   229,  -601,
    -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,
    -601,  -601,  -601,  -601,  -422,   371,  -601,  -601,   109,  -558,
    -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,  -601,
    -484,  -601,  -601,  -601,  -601,  -601,   546,   -16,  -601,   671,
    -170,  -601,  -601,   251
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -305
static const short int yytable[] =
{
     182,   310,   312,   156,    91,   292,   129,   278,   279,   184,
     451,   322,   451,   166,   190,   214,   317,   318,    17,   484,
     175,   266,   273,   492,   605,   400,   314,   614,   317,   318,
     203,   204,    90,   131,   132,   614,   201,   616,   581,   106,
     542,    18,   413,   297,    18,   298,   581,   217,   687,   605,
     294,    14,   606,   193,   194,   582,   196,   198,   688,   616,
     133,   134,   208,   582,   398,    82,   614,   439,   136,   137,
     440,   219,   220,   273,   387,   570,   437,   581,   138,   139,
     140,   660,   406,   407,   695,   141,   388,   656,   438,   102,
     142,   605,   239,   240,   582,   263,   702,   103,   581,   143,
     295,    83,   607,   270,   144,   145,   146,   147,   148,   149,
      19,   319,   551,    19,   493,   582,   150,   684,   151,   317,
     318,   287,   456,   319,   483,   205,   550,   696,   308,   104,
     317,   318,   639,   152,   615,   589,   317,   318,   403,   153,
     105,   497,   215,   399,   452,   320,   452,   321,   106,   326,
     267,   274,   329,   330,   579,   332,   333,   320,   658,   409,
     335,   336,   337,   338,   339,   313,   681,   342,   154,   155,
     197,   346,   347,   108,   218,   350,   351,   408,   109,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   110,   274,    83,   327,   111,   377,   378,   457,   124,
     125,   131,   132,   434,   319,   594,   112,    84,   113,   596,
      85,    86,    87,   614,   114,   319,     1,     2,     3,   379,
     380,   319,   410,   411,   581,   115,   128,     4,   133,   134,
     255,   256,   257,   258,   259,   135,   136,   137,   320,   116,
     501,   582,   308,   401,   309,   402,   138,   139,   140,   320,
     117,   530,   502,   141,   308,   320,   311,   548,   142,   281,
     615,   589,   475,   476,   477,   478,   479,   143,   281,   257,
     258,   259,   144,   145,   146,   147,   148,   149,   565,   566,
     567,   308,   119,   661,   150,   120,   151,   614,   121,   123,
     127,   130,   529,   513,   514,   157,   158,   531,   581,   160,
     163,   152,    91,   164,   165,   167,   168,   153,   169,    84,
     171,   173,    85,   276,   277,   582,   174,   614,   441,   445,
     441,   448,   176,   179,   131,   132,   177,   261,   581,   180,
     178,   187,   188,   480,   625,   626,   154,   155,   190,   192,
     195,   594,   201,   463,   209,   582,   464,   465,   207,   466,
     292,   133,   134,   210,   211,   467,   468,   614,   135,   136,
     137,   470,   213,   288,   625,   626,   222,   223,   581,   138,
     139,   140,   264,   265,   224,   282,   141,   271,   283,   284,
     285,   142,   225,   288,   282,   582,   272,   283,   284,   435,
     143,   226,   227,   228,   229,   144,   145,   146,   147,   148,
     149,   230,   231,   232,   630,   631,   627,   150,   233,   151,
     516,   234,   235,   289,   236,   628,   475,   476,   477,   478,
     479,   237,   238,   275,   152,   299,   545,   290,   280,   316,
     153,   324,    34,   557,   286,   325,   340,   303,   131,   132,
     304,   268,   341,   305,   343,   628,   535,   290,   344,   345,
     291,   541,    34,   543,   262,   306,    44,    45,   571,   154,
     155,   307,   348,   349,   553,   133,   134,   315,    46,   374,
     291,   375,   135,   136,   137,   376,    44,    45,   323,   381,
     382,   384,   564,   138,   139,   140,   386,   480,    46,   572,
     141,   703,   385,   704,   394,   142,   421,   706,   396,   405,
     436,   455,   422,   424,   143,   131,   132,   425,   426,   144,
     145,   146,   147,   148,   149,   459,   429,   430,   444,   643,
     450,   150,   462,   151,   460,   461,   629,   632,   469,   471,
     636,   473,   133,   134,   482,   485,   486,   489,   152,   135,
     136,   137,   495,   496,   153,   504,   499,   511,   512,   515,
     138,   139,   140,   517,   659,   629,   522,   141,   518,   527,
     519,   528,   142,   523,   668,   669,   525,   636,   269,   671,
     672,   143,   308,   154,   155,   674,   144,   145,   146,   147,
     148,   149,   131,   132,   532,   536,   546,   659,   150,   537,
     151,   253,   254,   255,   256,   257,   258,   259,   692,   549,
     544,   554,   560,   561,   562,   152,   569,   574,   483,   133,
     134,   153,   609,   608,   610,   611,   135,   136,   137,   612,
     613,   618,   580,   620,   621,   644,   638,   138,   139,   140,
     645,   647,   648,   581,   141,   649,   650,   652,   653,   142,
     154,   155,   651,   654,   655,   663,   665,   666,   143,  -122,
     582,   673,   676,   144,   145,   146,   147,   148,   149,   583,
     584,   585,   586,   587,   677,   150,   679,   151,   680,   588,
     589,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     686,   682,   152,   698,   683,   690,   691,   540,   153,   331,
      22,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,  -106,   693,   212,   590,   300,   591,   694,   700,
     670,   592,   641,   657,   619,    44,    45,   154,   155,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,    23,    24,   664,   697,   675,   622,   498,   521,
     539,   662,    25,    26,    27,    28,   593,    29,    30,   328,
     594,   181,   595,   447,   596,   533,    31,    32,    33,    34,
       0,    22,     0,     0,     0,     0,    35,    36,    37,    38,
      39,    40,     0,     0,     0,     0,    41,    42,    43,     0,
       0,     0,     0,    44,    45,     0,     0,     0,     0,     0,
       0,     0,     0,   395,     0,    46,     0,     0,     0,     0,
       0,     0,     0,    23,    24,     0,    47,     0,     0,     0,
       0,     0,  -304,    25,    26,    27,    28,     0,    29,    30,
      48,     0,     0,     0,     0,     0,     0,    31,    32,    33,
      34,     0,     0,     0,     0,     0,     0,    35,    36,    37,
      38,    39,    40,     0,     0,     0,     0,    41,    42,    43,
       0,     0,     0,     0,    44,    45,    92,    93,    94,    95,
      96,    97,    98,    99,   100,     0,    46,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    47,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     241,    48,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     241,     0,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     241,     0,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     241,     0,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     241,     0,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,     0,   415,   241,
     416,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   241,
     334,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   241,
     417,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   241,
     420,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   241,
     423,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   241,
       0,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   431,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,     0,     0,   241,   505,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   241,   506,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   241,   507,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   241,   508,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   241,   509,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   241,     0,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   510,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,     0,     0,     0,   241,   534,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   241,   552,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   241,   558,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   241,   559,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   241,   563,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   241,     0,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   573,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,     0,     0,     0,     0,     0,   576,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   241,   260,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   241,   412,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   241,   418,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,     0,   419,   241,    61,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,     0,     0,   483,    61,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    62,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   414,   427,    62,    63,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   428,     0,     0,     0,    63,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    64,     0,     0,
       0,     0,   432,    65,    66,    67,    68,    69,   -42,    70,
      71,    72,     0,    73,    74,    75,    76,    77,     0,    64,
       0,     0,    78,    79,    80,    65,    66,    67,    68,    69,
       0,    70,    71,    72,     0,    73,    74,    75,    76,    77,
       0,     0,     0,     0,    78,    79,    80,   241,   433,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   241,   488,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   241,     0,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259
};

static const short int yycheck[] =
{
      92,   199,   200,    65,    20,   185,    63,   177,   178,   101,
       4,   207,     4,    75,     4,     6,     4,     5,     4,   441,
      82,     4,     4,     4,   577,   302,   201,     4,     4,     5,
       4,     5,    53,     3,     4,     4,     4,   596,    15,     4,
     524,    53,    54,   133,    53,   135,    15,     6,     6,   602,
       4,     0,     4,   110,   111,    32,   113,   114,    16,   618,
      30,    31,   119,    32,    54,     6,     4,    37,    38,    39,
      40,   133,   134,     4,   122,   559,   122,    15,    48,    49,
      50,   640,     4,     5,   684,    55,   134,     4,   134,    53,
      60,   644,   154,   155,    32,   157,   696,    53,    15,    69,
      54,     4,    54,   165,    74,    75,    76,    77,    78,    79,
     122,    99,   534,   122,    95,    32,    86,   675,    88,     4,
       5,   183,   399,    99,    37,    99,    39,   685,   133,    37,
       4,     5,   137,   103,    51,    52,     4,     5,   313,   109,
      37,   135,   133,   133,   138,   133,   138,   135,     4,   211,
     133,   133,   214,   215,   576,   217,   218,   133,   135,   135,
     222,   223,   224,   225,   226,   133,   135,   229,   138,   139,
     135,   233,   234,    53,   133,   237,   238,    99,    37,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,    37,   133,     4,   135,    37,   268,   269,   404,   133,
     134,     3,     4,   383,    99,   132,    37,   120,    37,   136,
     123,   124,   125,     4,    37,    99,   116,   117,   118,     3,
       4,    99,   324,   325,    15,    37,     4,   127,    30,    31,
      30,    31,    32,    33,    34,    37,    38,    39,   133,    37,
     135,    32,   133,   310,   135,   312,    48,    49,    50,   133,
      37,   135,   458,    55,   133,   133,   135,   135,    60,     4,
      51,    52,    64,    65,    66,    67,    68,    69,     4,    32,
      33,    34,    74,    75,    76,    77,    78,    79,   129,   130,
     131,   133,    37,   135,    86,    37,    88,     4,    37,    37,
     126,     4,   500,   473,   474,     4,     4,   503,    15,     4,
       4,   103,   328,     4,     4,     4,     3,   109,     4,   120,
       4,     4,   123,   124,   125,    32,   105,     4,   390,   391,
     392,   393,     4,    54,     3,     4,    16,     6,    15,   134,
      16,     4,     4,   135,    51,    52,   138,   139,     4,     4,
       4,   132,     4,   415,     4,    32,   418,   419,    37,   421,
     540,    30,    31,     4,    37,   427,   428,     4,    37,    38,
      39,   433,    53,     4,    51,    52,    37,    37,    15,    48,
      49,    50,   133,   133,    37,   120,    55,   133,   123,   124,
     125,    60,    37,     4,   120,    32,   133,   123,   124,   125,
      69,    37,    37,    37,    37,    74,    75,    76,    77,    78,
      79,    37,    37,    37,    51,    52,    93,    86,    37,    88,
     482,    37,    37,    54,    37,   132,    64,    65,    66,    67,
      68,    37,    37,    53,   103,   135,   528,    68,   134,    37,
     109,     6,    73,    54,    54,     6,     4,   135,     3,     4,
     135,     6,     4,   135,     4,   132,   518,    68,     4,     4,
      91,   523,    73,   525,   133,   135,    97,    98,   560,   138,
     139,   135,     4,     4,   536,    30,    31,   135,   109,     4,
      91,     4,    37,    38,    39,     4,    97,    98,   135,     4,
       4,   134,   554,    48,    49,    50,     4,   135,   109,   561,
      55,   699,   134,   701,     4,    60,   133,   705,    37,    37,
      53,    16,   135,   135,    69,     3,     4,   135,   135,    74,
      75,    76,    77,    78,    79,    37,   135,   135,    16,   621,
     133,    86,     4,    88,   135,   135,   609,   610,     4,   134,
     613,    16,    30,    31,    37,    16,    95,    85,   103,    37,
      38,    39,     4,     4,   109,   135,    86,   135,    54,   135,
      48,    49,    50,    16,   637,   638,    53,    55,    37,   135,
      38,     6,    60,    37,   647,   648,    37,   650,   133,   652,
     653,    69,   133,   138,   139,   658,    74,    75,    76,    77,
      78,    79,     3,     4,   134,    37,    88,   670,    86,    96,
      88,    28,    29,    30,    31,    32,    33,    34,   681,    54,
     134,    37,     6,    37,    16,   103,    53,    53,    37,    30,
      31,   109,    37,    16,    37,    37,    37,    38,    39,    37,
      37,    37,     4,    54,    37,    53,    37,    48,    49,    50,
      25,    37,    37,    15,    55,   135,    37,    37,    37,    60,
     138,   139,   135,   135,   135,   135,     4,    95,    69,   135,
      32,   135,    54,    74,    75,    76,    77,    78,    79,    41,
      42,    43,    44,    45,    25,    86,   135,    88,   135,    51,
      52,     6,     7,     8,     9,    10,    11,    12,    13,    14,
       4,   135,   103,     4,   135,   135,   135,   522,   109,   216,
       4,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    37,   135,   123,    87,   189,    89,   135,   135,
     650,    93,   618,   635,   602,    97,    98,   138,   139,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    46,    47,   644,   687,   662,   605,   453,   490,
     521,   642,    56,    57,    58,    59,   128,    61,    62,   213,
     132,    90,   134,   392,   136,   514,    70,    71,    72,    73,
      -1,     4,    -1,    -1,    -1,    -1,    80,    81,    82,    83,
      84,    85,    -1,    -1,    -1,    -1,    90,    91,    92,    -1,
      -1,    -1,    -1,    97,    98,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,   109,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    47,    -1,   120,    -1,    -1,    -1,
      -1,    -1,   126,    56,    57,    58,    59,    -1,    61,    62,
     134,    -1,    -1,    -1,    -1,    -1,    -1,    70,    71,    72,
      73,    -1,    -1,    -1,    -1,    -1,    -1,    80,    81,    82,
      83,    84,    85,    -1,    -1,    -1,    -1,    90,    91,    92,
      -1,    -1,    -1,    -1,    97,    98,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    -1,   109,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      15,   134,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,   133,    15,
     135,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     135,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     135,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     135,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     135,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,   135,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    -1,    15,   135,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    15,   135,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    15,   135,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    15,   135,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    15,   135,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    15,    -1,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,   135,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    15,   135,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    15,   135,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    15,   135,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    15,   135,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    15,   135,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    15,    -1,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,   135,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,   135,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    15,   133,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   133,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   133,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,   133,    15,     4,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    -1,    37,     4,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    36,   133,    38,    61,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   133,    -1,    -1,    -1,    61,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    -1,    -1,
      -1,    -1,   133,   100,   101,   102,   103,   104,   105,   106,
     107,   108,    -1,   110,   111,   112,   113,   114,    -1,    94,
      -1,    -1,   119,   120,   121,   100,   101,   102,   103,   104,
      -1,   106,   107,   108,    -1,   110,   111,   112,   113,   114,
      -1,    -1,    -1,    -1,   119,   120,   121,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    15,    -1,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned char yystos[] =
{
       0,   116,   117,   118,   127,   141,   155,   156,   145,   146,
     143,   144,   242,   243,     0,   157,   147,     4,    53,   122,
     246,   247,     4,    46,    47,    56,    57,    58,    59,    61,
      62,    70,    71,    72,    73,    80,    81,    82,    83,    84,
      85,    90,    91,    92,    97,    98,   109,   120,   134,   158,
     165,   167,   184,   186,   195,   196,   198,   200,   234,   244,
     245,     4,    38,    61,    94,   100,   101,   102,   103,   104,
     106,   107,   108,   110,   111,   112,   113,   114,   119,   120,
     121,   148,     6,     4,   120,   123,   124,   125,   249,   250,
      53,   247,     6,     7,     8,     9,    10,    11,    12,    13,
      14,   182,    53,    53,    37,    37,     4,   142,    53,    37,
      37,    37,    37,    37,    37,    37,    37,    37,   159,    37,
      37,    37,   168,    37,   133,   134,   183,   126,     4,   142,
       4,     3,     4,    30,    31,    37,    38,    39,    48,    49,
      50,    55,    60,    69,    74,    75,    76,    77,    78,    79,
      86,    88,   103,   109,   138,   139,   204,     4,     4,   152,
       4,   151,   150,     4,     4,     4,   204,     4,     3,     4,
     153,     4,   154,     4,   105,   204,     4,    16,    16,    54,
     134,   249,   202,   203,   202,   166,   235,     4,     4,   160,
       4,   188,     4,   142,   142,     4,   142,   135,   142,   197,
     199,     4,   201,     4,     5,    99,   161,    37,   142,     4,
       4,    37,   154,    53,     6,   133,   149,     6,   133,   204,
     204,   204,    37,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    37,    37,    37,    37,    37,    37,    37,   204,
     204,    15,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
     133,     6,   133,   204,   133,   133,     4,   133,     6,   133,
     204,   133,   133,     4,   133,    53,   124,   125,   250,   250,
     134,     4,   120,   123,   124,   125,    54,   204,     4,    54,
      68,    91,   167,   210,     4,    54,   236,   133,   135,   135,
     157,   189,   187,   135,   135,   135,   135,   135,   133,   135,
     185,   135,   185,   133,   201,   135,    37,     4,     5,    99,
     133,   135,   161,   135,     6,     6,   204,   135,   246,   204,
     204,   147,   204,   204,   135,   204,   204,   204,   204,   204,
       4,     4,   204,     4,     4,     4,   204,   204,     4,     4,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
     204,   204,   204,   204,     4,     4,     4,   204,   204,     3,
       4,     4,     4,   252,   134,   134,     4,   122,   134,   248,
     211,   216,   221,   237,     4,    36,    37,   192,    54,   133,
     188,   142,   142,   201,   162,    37,     4,     5,    99,   135,
     202,   202,   133,    54,    36,   133,   135,   135,   133,   133,
     135,   133,   135,   135,   135,   135,   135,   133,   133,   135,
     135,   135,   133,    16,   250,   125,    53,   122,   134,    37,
      40,   204,   224,   225,    16,   204,   226,   225,   204,   239,
     133,     4,   138,   193,   194,    16,   188,   161,   164,    37,
     135,   135,     4,   204,   204,   204,   204,   204,   204,     4,
     204,   134,   253,    16,   251,    64,    65,    66,    67,    68,
     135,   223,    37,    37,   224,    16,    95,   206,    16,    85,
     227,   222,     4,    95,   240,     4,     4,   135,   194,    86,
     190,   135,   161,   163,   135,   135,   135,   135,   135,   135,
     135,   135,    54,   250,   250,   135,   204,    16,    37,    38,
     207,   206,    53,    37,   241,    37,   238,   135,     6,   185,
     135,   161,   134,   253,   135,   204,    37,    96,   208,   208,
     166,   204,   240,   204,   134,   202,    88,   191,   135,    54,
      39,   224,   135,   204,    37,   212,   217,    54,   135,   135,
       6,    37,    16,   135,   204,   129,   130,   131,   209,    53,
     240,   202,   204,   135,    53,   218,   135,   213,   230,   224,
       4,    15,    32,    41,    42,    43,    44,    45,    51,    52,
      87,    89,    93,   128,   132,   134,   136,   169,   170,   173,
     174,   176,   177,   178,   179,   184,     4,    54,    16,    37,
      37,    37,    37,    37,     4,    51,   170,   172,    37,   176,
      54,    37,   183,   231,   219,    51,    52,    93,   132,   169,
      51,    52,   169,   180,   202,   175,   169,   171,    37,   137,
     185,   172,   214,   202,    53,    25,   228,    37,    37,   135,
      37,   135,    37,    37,   135,   135,     4,   173,   135,   169,
     170,   135,   228,   135,   178,     4,    95,   205,   169,   169,
     171,   169,   169,   135,   169,   205,    54,    25,   229,   135,
     135,   135,   135,   135,   229,   232,     4,     6,    16,   181,
     135,   135,   169,   135,   135,   181,   229,   180,     4,   220,
     135,   215,   181,   185,   185,   233,   185
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (0)


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (N)								\
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (0)
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
              (Loc).first_line, (Loc).first_column,	\
              (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr,					\
                  Type, Value);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_stack_print (short int *bottom, short int *top)
#else
static void
yy_stack_print (bottom, top)
    short int *bottom;
    short int *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (/* Nothing. */; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_reduce_print (int yyrule)
#else
static void
yy_reduce_print (yyrule)
    int yyrule;
#endif
{
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu), ",
             yyrule - 1, yylno);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
  YYFPRINTF (stderr, "-> %s\n", yytname[yyr1[yyrule]]);
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (Rule);		\
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      size_t yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

#endif /* YYERROR_VERBOSE */



#if YYDEBUG
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)
#else
static void
yysymprint (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);


# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  switch (yytype)
    {
      default:
        break;
    }
  YYFPRINTF (yyoutput, ")");
}

#endif /* ! YYDEBUG */
/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
        break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM);
# else
int yyparse ();
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM)
# else
int yyparse (YYPARSE_PARAM)
  void *YYPARSE_PARAM;
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int
yyparse (void)
#else
int
yyparse ()
    ;
#endif
#endif
{
  
  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  short int yyssa[YYINITDEPTH];
  short int *yyss = yyssa;
  short int *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK   (yyvsp--, yyssp--)

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* When reducing, the number of symbols on the RHS of the reduced
     rule.  */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short int *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	short int *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a look-ahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to look-ahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;


  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 7:
#line 173 "ldgram.y"
    { ldlex_defsym(); }
    break;

  case 8:
#line 175 "ldgram.y"
    {
		  ldlex_popstate();
		  lang_add_assignment(exp_assop((yyvsp[-1].token),(yyvsp[-2].name),(yyvsp[0].etree)));
		}
    break;

  case 9:
#line 183 "ldgram.y"
    {
		  ldlex_mri_script ();
		  PUSH_ERROR (_("MRI style script"));
		}
    break;

  case 10:
#line 188 "ldgram.y"
    {
		  ldlex_popstate ();
		  mri_draw_tree ();
		  POP_ERROR ();
		}
    break;

  case 15:
#line 203 "ldgram.y"
    {
			einfo(_("%P%F: unrecognised keyword in MRI style script '%s'\n"),(yyvsp[0].name));
			}
    break;

  case 16:
#line 206 "ldgram.y"
    {
			config.map_filename = "-";
			}
    break;

  case 19:
#line 212 "ldgram.y"
    { mri_public((yyvsp[-2].name), (yyvsp[0].etree)); }
    break;

  case 20:
#line 214 "ldgram.y"
    { mri_public((yyvsp[-2].name), (yyvsp[0].etree)); }
    break;

  case 21:
#line 216 "ldgram.y"
    { mri_public((yyvsp[-1].name), (yyvsp[0].etree)); }
    break;

  case 22:
#line 218 "ldgram.y"
    { mri_format((yyvsp[0].name)); }
    break;

  case 23:
#line 220 "ldgram.y"
    { mri_output_section((yyvsp[-2].name), (yyvsp[0].etree));}
    break;

  case 24:
#line 222 "ldgram.y"
    { mri_output_section((yyvsp[-1].name), (yyvsp[0].etree));}
    break;

  case 25:
#line 224 "ldgram.y"
    { mri_output_section((yyvsp[-2].name), (yyvsp[0].etree));}
    break;

  case 26:
#line 226 "ldgram.y"
    { mri_align((yyvsp[-2].name),(yyvsp[0].etree)); }
    break;

  case 27:
#line 228 "ldgram.y"
    { mri_align((yyvsp[-2].name),(yyvsp[0].etree)); }
    break;

  case 28:
#line 230 "ldgram.y"
    { mri_alignmod((yyvsp[-2].name),(yyvsp[0].etree)); }
    break;

  case 29:
#line 232 "ldgram.y"
    { mri_alignmod((yyvsp[-2].name),(yyvsp[0].etree)); }
    break;

  case 32:
#line 236 "ldgram.y"
    { mri_name((yyvsp[0].name)); }
    break;

  case 33:
#line 238 "ldgram.y"
    { mri_alias((yyvsp[-2].name),(yyvsp[0].name),0);}
    break;

  case 34:
#line 240 "ldgram.y"
    { mri_alias ((yyvsp[-2].name), 0, (int) (yyvsp[0].bigint).integer); }
    break;

  case 35:
#line 242 "ldgram.y"
    { mri_base((yyvsp[0].etree)); }
    break;

  case 36:
#line 244 "ldgram.y"
    { mri_truncate ((unsigned int) (yyvsp[0].bigint).integer); }
    break;

  case 39:
#line 248 "ldgram.y"
    { ldlex_script (); ldfile_open_command_file((yyvsp[0].name)); }
    break;

  case 40:
#line 250 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 41:
#line 252 "ldgram.y"
    { lang_add_entry ((yyvsp[0].name), FALSE); }
    break;

  case 43:
#line 257 "ldgram.y"
    { mri_order((yyvsp[0].name)); }
    break;

  case 44:
#line 258 "ldgram.y"
    { mri_order((yyvsp[0].name)); }
    break;

  case 46:
#line 264 "ldgram.y"
    { mri_load((yyvsp[0].name)); }
    break;

  case 47:
#line 265 "ldgram.y"
    { mri_load((yyvsp[0].name)); }
    break;

  case 48:
#line 270 "ldgram.y"
    { mri_only_load((yyvsp[0].name)); }
    break;

  case 49:
#line 272 "ldgram.y"
    { mri_only_load((yyvsp[0].name)); }
    break;

  case 50:
#line 276 "ldgram.y"
    { (yyval.name) = NULL; }
    break;

  case 53:
#line 283 "ldgram.y"
    { ldlang_add_undef ((yyvsp[0].name)); }
    break;

  case 54:
#line 285 "ldgram.y"
    { ldlang_add_undef ((yyvsp[0].name)); }
    break;

  case 55:
#line 287 "ldgram.y"
    { ldlang_add_undef ((yyvsp[0].name)); }
    break;

  case 56:
#line 291 "ldgram.y"
    {
	 ldlex_both();
	}
    break;

  case 57:
#line 295 "ldgram.y"
    {
	ldlex_popstate();
	}
    break;

  case 70:
#line 320 "ldgram.y"
    { lang_add_target((yyvsp[-1].name)); }
    break;

  case 71:
#line 322 "ldgram.y"
    { ldfile_add_library_path ((yyvsp[-1].name), FALSE); }
    break;

  case 72:
#line 324 "ldgram.y"
    { lang_add_output((yyvsp[-1].name), 1); }
    break;

  case 73:
#line 326 "ldgram.y"
    { lang_add_output_format ((yyvsp[-1].name), (char *) NULL,
					    (char *) NULL, 1); }
    break;

  case 74:
#line 329 "ldgram.y"
    { lang_add_output_format ((yyvsp[-5].name), (yyvsp[-3].name), (yyvsp[-1].name), 1); }
    break;

  case 75:
#line 331 "ldgram.y"
    { ldfile_set_output_arch ((yyvsp[-1].name), bfd_arch_unknown); }
    break;

  case 76:
#line 333 "ldgram.y"
    { command_line.force_common_definition = TRUE ; }
    break;

  case 77:
#line 335 "ldgram.y"
    { command_line.inhibit_common_definition = TRUE ; }
    break;

  case 79:
#line 338 "ldgram.y"
    { lang_enter_group (); }
    break;

  case 80:
#line 340 "ldgram.y"
    { lang_leave_group (); }
    break;

  case 81:
#line 342 "ldgram.y"
    { lang_add_map((yyvsp[-1].name)); }
    break;

  case 82:
#line 344 "ldgram.y"
    { ldlex_script (); ldfile_open_command_file((yyvsp[0].name)); }
    break;

  case 83:
#line 346 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 84:
#line 348 "ldgram.y"
    {
		  lang_add_nocrossref ((yyvsp[-1].nocrossref));
		}
    break;

  case 86:
#line 356 "ldgram.y"
    { lang_add_input_file((yyvsp[0].name),lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;

  case 87:
#line 359 "ldgram.y"
    { lang_add_input_file((yyvsp[0].name),lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;

  case 88:
#line 362 "ldgram.y"
    { lang_add_input_file((yyvsp[0].name),lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;

  case 89:
#line 365 "ldgram.y"
    { lang_add_input_file((yyvsp[0].name),lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;

  case 90:
#line 368 "ldgram.y"
    { lang_add_input_file((yyvsp[0].name),lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;

  case 91:
#line 371 "ldgram.y"
    { lang_add_input_file((yyvsp[0].name),lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;

  case 92:
#line 374 "ldgram.y"
    { (yyval.integer) = as_needed; as_needed = TRUE; }
    break;

  case 93:
#line 376 "ldgram.y"
    { as_needed = (yyvsp[-2].integer); }
    break;

  case 94:
#line 378 "ldgram.y"
    { (yyval.integer) = as_needed; as_needed = TRUE; }
    break;

  case 95:
#line 380 "ldgram.y"
    { as_needed = (yyvsp[-2].integer); }
    break;

  case 96:
#line 382 "ldgram.y"
    { (yyval.integer) = as_needed; as_needed = TRUE; }
    break;

  case 97:
#line 384 "ldgram.y"
    { as_needed = (yyvsp[-2].integer); }
    break;

  case 102:
#line 399 "ldgram.y"
    { lang_add_entry ((yyvsp[-1].name), FALSE); }
    break;

  case 104:
#line 401 "ldgram.y"
    {ldlex_expression ();}
    break;

  case 105:
#line 402 "ldgram.y"
    { ldlex_popstate ();
		  lang_add_assignment (exp_assert ((yyvsp[-3].etree), (yyvsp[-1].name))); }
    break;

  case 106:
#line 410 "ldgram.y"
    {
			  (yyval.cname) = (yyvsp[0].name);
			}
    break;

  case 107:
#line 414 "ldgram.y"
    {
			  (yyval.cname) = "*";
			}
    break;

  case 108:
#line 418 "ldgram.y"
    {
			  (yyval.cname) = "?";
			}
    break;

  case 109:
#line 425 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[0].cname);
			  (yyval.wildcard).sorted = none;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 110:
#line 431 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[0].cname);
			  (yyval.wildcard).sorted = none;
			  (yyval.wildcard).exclude_name_list = (yyvsp[-2].name_list);
			}
    break;

  case 111:
#line 437 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[-1].cname);
			  (yyval.wildcard).sorted = by_name;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 112:
#line 443 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[-1].cname);
			  (yyval.wildcard).sorted = by_alignment;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 113:
#line 449 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[-2].cname);
			  (yyval.wildcard).sorted = by_name_alignment;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 114:
#line 455 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[-2].cname);
			  (yyval.wildcard).sorted = by_name;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 115:
#line 461 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[-2].cname);
			  (yyval.wildcard).sorted = by_alignment_name;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 116:
#line 467 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[-2].cname);
			  (yyval.wildcard).sorted = by_alignment;
			  (yyval.wildcard).exclude_name_list = NULL;
			}
    break;

  case 117:
#line 473 "ldgram.y"
    {
			  (yyval.wildcard).name = (yyvsp[-1].cname);
			  (yyval.wildcard).sorted = by_name;
			  (yyval.wildcard).exclude_name_list = (yyvsp[-3].name_list);
			}
    break;

  case 118:
#line 482 "ldgram.y"
    {
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = (yyvsp[0].cname);
			  tmp->next = (yyvsp[-1].name_list);
			  (yyval.name_list) = tmp;
			}
    break;

  case 119:
#line 491 "ldgram.y"
    {
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = (yyvsp[0].cname);
			  tmp->next = NULL;
			  (yyval.name_list) = tmp;
			}
    break;

  case 120:
#line 502 "ldgram.y"
    {
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = (yyvsp[-2].wildcard_list);
			  tmp->spec = (yyvsp[0].wildcard);
			  (yyval.wildcard_list) = tmp;
			}
    break;

  case 121:
#line 511 "ldgram.y"
    {
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = NULL;
			  tmp->spec = (yyvsp[0].wildcard);
			  (yyval.wildcard_list) = tmp;
			}
    break;

  case 122:
#line 522 "ldgram.y"
    {
			  struct wildcard_spec tmp;
			  tmp.name = (yyvsp[0].name);
			  tmp.exclude_name_list = NULL;
			  tmp.sorted = none;
			  lang_add_wild (&tmp, NULL, ldgram_had_keep);
			}
    break;

  case 123:
#line 530 "ldgram.y"
    {
			  lang_add_wild (NULL, (yyvsp[-1].wildcard_list), ldgram_had_keep);
			}
    break;

  case 124:
#line 534 "ldgram.y"
    {
			  lang_add_wild (&(yyvsp[-3].wildcard), (yyvsp[-1].wildcard_list), ldgram_had_keep);
			}
    break;

  case 126:
#line 542 "ldgram.y"
    { ldgram_had_keep = TRUE; }
    break;

  case 127:
#line 544 "ldgram.y"
    { ldgram_had_keep = FALSE; }
    break;

  case 129:
#line 550 "ldgram.y"
    {
 		lang_add_attribute(lang_object_symbols_statement_enum);
	      	}
    break;

  case 131:
#line 555 "ldgram.y"
    {

		  lang_add_attribute(lang_constructors_statement_enum);
		}
    break;

  case 132:
#line 560 "ldgram.y"
    {
		  constructors_sorted = TRUE;
		  lang_add_attribute (lang_constructors_statement_enum);
		}
    break;

  case 134:
#line 566 "ldgram.y"
    {
			  lang_add_data ((int) (yyvsp[-3].integer), (yyvsp[-1].etree));
			}
    break;

  case 135:
#line 571 "ldgram.y"
    {
			  lang_add_fill ((yyvsp[-1].fill));
			}
    break;

  case 140:
#line 588 "ldgram.y"
    { (yyval.integer) = (yyvsp[0].token); }
    break;

  case 141:
#line 590 "ldgram.y"
    { (yyval.integer) = (yyvsp[0].token); }
    break;

  case 142:
#line 592 "ldgram.y"
    { (yyval.integer) = (yyvsp[0].token); }
    break;

  case 143:
#line 594 "ldgram.y"
    { (yyval.integer) = (yyvsp[0].token); }
    break;

  case 144:
#line 596 "ldgram.y"
    { (yyval.integer) = (yyvsp[0].token); }
    break;

  case 145:
#line 601 "ldgram.y"
    {
		  (yyval.fill) = exp_get_fill ((yyvsp[0].etree), 0, "fill value");
		}
    break;

  case 146:
#line 608 "ldgram.y"
    { (yyval.fill) = (yyvsp[0].fill); }
    break;

  case 147:
#line 609 "ldgram.y"
    { (yyval.fill) = (fill_type *) 0; }
    break;

  case 148:
#line 614 "ldgram.y"
    { (yyval.token) = '+'; }
    break;

  case 149:
#line 616 "ldgram.y"
    { (yyval.token) = '-'; }
    break;

  case 150:
#line 618 "ldgram.y"
    { (yyval.token) = '*'; }
    break;

  case 151:
#line 620 "ldgram.y"
    { (yyval.token) = '/'; }
    break;

  case 152:
#line 622 "ldgram.y"
    { (yyval.token) = LSHIFT; }
    break;

  case 153:
#line 624 "ldgram.y"
    { (yyval.token) = RSHIFT; }
    break;

  case 154:
#line 626 "ldgram.y"
    { (yyval.token) = '&'; }
    break;

  case 155:
#line 628 "ldgram.y"
    { (yyval.token) = '|'; }
    break;

  case 158:
#line 638 "ldgram.y"
    {
		  lang_add_assignment (exp_assop ((yyvsp[-1].token), (yyvsp[-2].name), (yyvsp[0].etree)));
		}
    break;

  case 159:
#line 642 "ldgram.y"
    {
		  lang_add_assignment (exp_assop ('=', (yyvsp[-2].name),
						  exp_binop ((yyvsp[-1].token),
							     exp_nameop (NAME,
									 (yyvsp[-2].name)),
							     (yyvsp[0].etree))));
		}
    break;

  case 160:
#line 650 "ldgram.y"
    {
		  lang_add_assignment (exp_provide ((yyvsp[-3].name), (yyvsp[-1].etree), FALSE));
		}
    break;

  case 161:
#line 654 "ldgram.y"
    {
		  lang_add_assignment (exp_provide ((yyvsp[-3].name), (yyvsp[-1].etree), TRUE));
		}
    break;

  case 168:
#line 676 "ldgram.y"
    { region = lang_memory_region_lookup ((yyvsp[0].name), TRUE); }
    break;

  case 169:
#line 679 "ldgram.y"
    {}
    break;

  case 170:
#line 684 "ldgram.y"
    {
		  region->origin = exp_get_vma ((yyvsp[0].etree), 0, "origin");
		  region->current = region->origin;
		}
    break;

  case 171:
#line 692 "ldgram.y"
    {
		  region->length = exp_get_vma ((yyvsp[0].etree), -1, "length");
		}
    break;

  case 172:
#line 699 "ldgram.y"
    { /* dummy action to avoid bison 1.25 error message */ }
    break;

  case 176:
#line 710 "ldgram.y"
    { lang_set_flags (region, (yyvsp[0].name), 0); }
    break;

  case 177:
#line 712 "ldgram.y"
    { lang_set_flags (region, (yyvsp[0].name), 1); }
    break;

  case 178:
#line 717 "ldgram.y"
    { lang_startup((yyvsp[-1].name)); }
    break;

  case 180:
#line 723 "ldgram.y"
    { ldemul_hll((char *)NULL); }
    break;

  case 181:
#line 728 "ldgram.y"
    { ldemul_hll((yyvsp[0].name)); }
    break;

  case 182:
#line 730 "ldgram.y"
    { ldemul_hll((yyvsp[0].name)); }
    break;

  case 184:
#line 738 "ldgram.y"
    { ldemul_syslib((yyvsp[0].name)); }
    break;

  case 186:
#line 744 "ldgram.y"
    { lang_float(TRUE); }
    break;

  case 187:
#line 746 "ldgram.y"
    { lang_float(FALSE); }
    break;

  case 188:
#line 751 "ldgram.y"
    {
		  (yyval.nocrossref) = NULL;
		}
    break;

  case 189:
#line 755 "ldgram.y"
    {
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = (yyvsp[-1].name);
		  n->next = (yyvsp[0].nocrossref);
		  (yyval.nocrossref) = n;
		}
    break;

  case 190:
#line 764 "ldgram.y"
    {
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = (yyvsp[-2].name);
		  n->next = (yyvsp[0].nocrossref);
		  (yyval.nocrossref) = n;
		}
    break;

  case 191:
#line 774 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 192:
#line 776 "ldgram.y"
    { ldlex_popstate (); (yyval.etree)=(yyvsp[0].etree);}
    break;

  case 193:
#line 781 "ldgram.y"
    { (yyval.etree) = exp_unop ('-', (yyvsp[0].etree)); }
    break;

  case 194:
#line 783 "ldgram.y"
    { (yyval.etree) = (yyvsp[-1].etree); }
    break;

  case 195:
#line 785 "ldgram.y"
    { (yyval.etree) = exp_unop ((int) (yyvsp[-3].integer),(yyvsp[-1].etree)); }
    break;

  case 196:
#line 787 "ldgram.y"
    { (yyval.etree) = exp_unop ('!', (yyvsp[0].etree)); }
    break;

  case 197:
#line 789 "ldgram.y"
    { (yyval.etree) = (yyvsp[0].etree); }
    break;

  case 198:
#line 791 "ldgram.y"
    { (yyval.etree) = exp_unop ('~', (yyvsp[0].etree));}
    break;

  case 199:
#line 794 "ldgram.y"
    { (yyval.etree) = exp_binop ('*', (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 200:
#line 796 "ldgram.y"
    { (yyval.etree) = exp_binop ('/', (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 201:
#line 798 "ldgram.y"
    { (yyval.etree) = exp_binop ('%', (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 202:
#line 800 "ldgram.y"
    { (yyval.etree) = exp_binop ('+', (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 203:
#line 802 "ldgram.y"
    { (yyval.etree) = exp_binop ('-' , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 204:
#line 804 "ldgram.y"
    { (yyval.etree) = exp_binop (LSHIFT , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 205:
#line 806 "ldgram.y"
    { (yyval.etree) = exp_binop (RSHIFT , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 206:
#line 808 "ldgram.y"
    { (yyval.etree) = exp_binop (EQ , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 207:
#line 810 "ldgram.y"
    { (yyval.etree) = exp_binop (NE , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 208:
#line 812 "ldgram.y"
    { (yyval.etree) = exp_binop (LE , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 209:
#line 814 "ldgram.y"
    { (yyval.etree) = exp_binop (GE , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 210:
#line 816 "ldgram.y"
    { (yyval.etree) = exp_binop ('<' , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 211:
#line 818 "ldgram.y"
    { (yyval.etree) = exp_binop ('>' , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 212:
#line 820 "ldgram.y"
    { (yyval.etree) = exp_binop ('&' , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 213:
#line 822 "ldgram.y"
    { (yyval.etree) = exp_binop ('^' , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 214:
#line 824 "ldgram.y"
    { (yyval.etree) = exp_binop ('|' , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 215:
#line 826 "ldgram.y"
    { (yyval.etree) = exp_trinop ('?' , (yyvsp[-4].etree), (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 216:
#line 828 "ldgram.y"
    { (yyval.etree) = exp_binop (ANDAND , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 217:
#line 830 "ldgram.y"
    { (yyval.etree) = exp_binop (OROR , (yyvsp[-2].etree), (yyvsp[0].etree)); }
    break;

  case 218:
#line 832 "ldgram.y"
    { (yyval.etree) = exp_nameop (DEFINED, (yyvsp[-1].name)); }
    break;

  case 219:
#line 834 "ldgram.y"
    { (yyval.etree) = exp_bigintop ((yyvsp[0].bigint).integer, (yyvsp[0].bigint).str); }
    break;

  case 220:
#line 836 "ldgram.y"
    { (yyval.etree) = exp_nameop (SIZEOF_HEADERS,0); }
    break;

  case 221:
#line 839 "ldgram.y"
    { (yyval.etree) = exp_nameop (SIZEOF,(yyvsp[-1].name)); }
    break;

  case 222:
#line 841 "ldgram.y"
    { (yyval.etree) = exp_nameop (ADDR,(yyvsp[-1].name)); }
    break;

  case 223:
#line 843 "ldgram.y"
    { (yyval.etree) = exp_nameop (LOADADDR,(yyvsp[-1].name)); }
    break;

  case 224:
#line 845 "ldgram.y"
    { (yyval.etree) = exp_unop (ABSOLUTE, (yyvsp[-1].etree)); }
    break;

  case 225:
#line 847 "ldgram.y"
    { (yyval.etree) = exp_unop (ALIGN_K,(yyvsp[-1].etree)); }
    break;

  case 226:
#line 849 "ldgram.y"
    { (yyval.etree) = exp_binop (ALIGN_K,(yyvsp[-3].etree),(yyvsp[-1].etree)); }
    break;

  case 227:
#line 851 "ldgram.y"
    { (yyval.etree) = exp_binop (DATA_SEGMENT_ALIGN, (yyvsp[-3].etree), (yyvsp[-1].etree)); }
    break;

  case 228:
#line 853 "ldgram.y"
    { (yyval.etree) = exp_binop (DATA_SEGMENT_RELRO_END, (yyvsp[-1].etree), (yyvsp[-3].etree)); }
    break;

  case 229:
#line 855 "ldgram.y"
    { (yyval.etree) = exp_unop (DATA_SEGMENT_END, (yyvsp[-1].etree)); }
    break;

  case 230:
#line 857 "ldgram.y"
    { /* The operands to the expression node are
			     placed in the opposite order from the way
			     in which they appear in the script as
			     that allows us to reuse more code in
			     fold_binary.  */
			  (yyval.etree) = exp_binop (SEGMENT_START,
					  (yyvsp[-1].etree),
					  exp_nameop (NAME, (yyvsp[-3].name))); }
    break;

  case 231:
#line 866 "ldgram.y"
    { (yyval.etree) = exp_unop (ALIGN_K,(yyvsp[-1].etree)); }
    break;

  case 232:
#line 868 "ldgram.y"
    { (yyval.etree) = exp_nameop (NAME,(yyvsp[0].name)); }
    break;

  case 233:
#line 870 "ldgram.y"
    { (yyval.etree) = exp_binop (MAX_K, (yyvsp[-3].etree), (yyvsp[-1].etree) ); }
    break;

  case 234:
#line 872 "ldgram.y"
    { (yyval.etree) = exp_binop (MIN_K, (yyvsp[-3].etree), (yyvsp[-1].etree) ); }
    break;

  case 235:
#line 874 "ldgram.y"
    { (yyval.etree) = exp_assert ((yyvsp[-3].etree), (yyvsp[-1].name)); }
    break;

  case 236:
#line 876 "ldgram.y"
    { (yyval.etree) = exp_nameop (ORIGIN, (yyvsp[-1].name)); }
    break;

  case 237:
#line 878 "ldgram.y"
    { (yyval.etree) = exp_nameop (LENGTH, (yyvsp[-1].name)); }
    break;

  case 238:
#line 883 "ldgram.y"
    { (yyval.name) = (yyvsp[0].name); }
    break;

  case 239:
#line 884 "ldgram.y"
    { (yyval.name) = 0; }
    break;

  case 240:
#line 888 "ldgram.y"
    { (yyval.etree) = (yyvsp[-1].etree); }
    break;

  case 241:
#line 889 "ldgram.y"
    { (yyval.etree) = 0; }
    break;

  case 242:
#line 893 "ldgram.y"
    { (yyval.etree) = (yyvsp[-1].etree); }
    break;

  case 243:
#line 894 "ldgram.y"
    { (yyval.etree) = 0; }
    break;

  case 244:
#line 898 "ldgram.y"
    { (yyval.etree) = (yyvsp[-1].etree); }
    break;

  case 245:
#line 899 "ldgram.y"
    { (yyval.etree) = 0; }
    break;

  case 246:
#line 903 "ldgram.y"
    { (yyval.token) = ONLY_IF_RO; }
    break;

  case 247:
#line 904 "ldgram.y"
    { (yyval.token) = ONLY_IF_RW; }
    break;

  case 248:
#line 905 "ldgram.y"
    { (yyval.token) = SPECIAL; }
    break;

  case 249:
#line 906 "ldgram.y"
    { (yyval.token) = 0; }
    break;

  case 250:
#line 909 "ldgram.y"
    { ldlex_expression(); }
    break;

  case 251:
#line 913 "ldgram.y"
    { ldlex_popstate (); ldlex_script (); }
    break;

  case 252:
#line 916 "ldgram.y"
    {
			  lang_enter_output_section_statement((yyvsp[-8].name), (yyvsp[-6].etree),
							      sectype,
							      (yyvsp[-4].etree), (yyvsp[-3].etree), (yyvsp[-5].etree), (yyvsp[-1].token));
			}
    break;

  case 253:
#line 922 "ldgram.y"
    { ldlex_popstate (); ldlex_expression (); }
    break;

  case 254:
#line 924 "ldgram.y"
    {
		  ldlex_popstate ();
		  lang_leave_output_section_statement ((yyvsp[0].fill), (yyvsp[-3].name), (yyvsp[-1].section_phdr), (yyvsp[-2].name));
		}
    break;

  case 255:
#line 929 "ldgram.y"
    {}
    break;

  case 256:
#line 931 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 257:
#line 933 "ldgram.y"
    { ldlex_popstate (); ldlex_script (); }
    break;

  case 258:
#line 935 "ldgram.y"
    {
			  lang_enter_overlay ((yyvsp[-5].etree), (yyvsp[-2].etree));
			}
    break;

  case 259:
#line 940 "ldgram.y"
    { ldlex_popstate (); ldlex_expression (); }
    break;

  case 260:
#line 942 "ldgram.y"
    {
			  ldlex_popstate ();
			  lang_leave_overlay ((yyvsp[-11].etree), (int) (yyvsp[-12].integer),
					      (yyvsp[0].fill), (yyvsp[-3].name), (yyvsp[-1].section_phdr), (yyvsp[-2].name));
			}
    break;

  case 262:
#line 952 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 263:
#line 954 "ldgram.y"
    {
		  ldlex_popstate ();
		  lang_add_assignment (exp_assop ('=', ".", (yyvsp[0].etree)));
		}
    break;

  case 265:
#line 962 "ldgram.y"
    { sectype = noload_section; }
    break;

  case 266:
#line 963 "ldgram.y"
    { sectype = dsect_section; }
    break;

  case 267:
#line 964 "ldgram.y"
    { sectype = copy_section; }
    break;

  case 268:
#line 965 "ldgram.y"
    { sectype = info_section; }
    break;

  case 269:
#line 966 "ldgram.y"
    { sectype = overlay_section; }
    break;

  case 271:
#line 971 "ldgram.y"
    { sectype = normal_section; }
    break;

  case 272:
#line 972 "ldgram.y"
    { sectype = normal_section; }
    break;

  case 273:
#line 976 "ldgram.y"
    { (yyval.etree) = (yyvsp[-2].etree); }
    break;

  case 274:
#line 977 "ldgram.y"
    { (yyval.etree) = (etree_type *)NULL;  }
    break;

  case 275:
#line 982 "ldgram.y"
    { (yyval.etree) = (yyvsp[-3].etree); }
    break;

  case 276:
#line 984 "ldgram.y"
    { (yyval.etree) = (yyvsp[-7].etree); }
    break;

  case 277:
#line 988 "ldgram.y"
    { (yyval.etree) = (yyvsp[-1].etree); }
    break;

  case 278:
#line 989 "ldgram.y"
    { (yyval.etree) = (etree_type *) NULL;  }
    break;

  case 279:
#line 994 "ldgram.y"
    { (yyval.integer) = 0; }
    break;

  case 280:
#line 996 "ldgram.y"
    { (yyval.integer) = 1; }
    break;

  case 281:
#line 1001 "ldgram.y"
    { (yyval.name) = (yyvsp[0].name); }
    break;

  case 282:
#line 1002 "ldgram.y"
    { (yyval.name) = DEFAULT_MEMORY_REGION; }
    break;

  case 283:
#line 1007 "ldgram.y"
    {
		  (yyval.section_phdr) = NULL;
		}
    break;

  case 284:
#line 1011 "ldgram.y"
    {
		  struct lang_output_section_phdr_list *n;

		  n = ((struct lang_output_section_phdr_list *)
		       xmalloc (sizeof *n));
		  n->name = (yyvsp[0].name);
		  n->used = FALSE;
		  n->next = (yyvsp[-2].section_phdr);
		  (yyval.section_phdr) = n;
		}
    break;

  case 286:
#line 1027 "ldgram.y"
    {
			  ldlex_script ();
			  lang_enter_overlay_section ((yyvsp[0].name));
			}
    break;

  case 287:
#line 1032 "ldgram.y"
    { ldlex_popstate (); ldlex_expression (); }
    break;

  case 288:
#line 1034 "ldgram.y"
    {
			  ldlex_popstate ();
			  lang_leave_overlay_section ((yyvsp[0].fill), (yyvsp[-1].section_phdr));
			}
    break;

  case 293:
#line 1051 "ldgram.y"
    { ldlex_expression (); }
    break;

  case 294:
#line 1052 "ldgram.y"
    { ldlex_popstate (); }
    break;

  case 295:
#line 1054 "ldgram.y"
    {
		  lang_new_phdr ((yyvsp[-5].name), (yyvsp[-3].etree), (yyvsp[-2].phdr).filehdr, (yyvsp[-2].phdr).phdrs, (yyvsp[-2].phdr).at,
				 (yyvsp[-2].phdr).flags);
		}
    break;

  case 296:
#line 1062 "ldgram.y"
    {
		  (yyval.etree) = (yyvsp[0].etree);

		  if ((yyvsp[0].etree)->type.node_class == etree_name
		      && (yyvsp[0].etree)->type.node_code == NAME)
		    {
		      const char *s;
		      unsigned int i;
		      static const char * const phdr_types[] =
			{
			  "PT_NULL", "PT_LOAD", "PT_DYNAMIC",
			  "PT_INTERP", "PT_NOTE", "PT_SHLIB",
			  "PT_PHDR", "PT_TLS"
			};

		      s = (yyvsp[0].etree)->name.name;
		      for (i = 0;
			   i < sizeof phdr_types / sizeof phdr_types[0];
			   i++)
			if (strcmp (s, phdr_types[i]) == 0)
			  {
			    (yyval.etree) = exp_intop (i);
			    break;
			  }
		      if (i == sizeof phdr_types / sizeof phdr_types[0])
			{
			  if (strcmp (s, "PT_GNU_EH_FRAME") == 0)
			    (yyval.etree) = exp_intop (0x6474e550);
			  else if (strcmp (s, "PT_GNU_STACK") == 0)
			    (yyval.etree) = exp_intop (0x6474e551);
			  else
			    {
			      einfo (_("\
%X%P:%S: unknown phdr type `%s' (try integer literal)\n"),
				     s);
			      (yyval.etree) = exp_intop (0);
			    }
			}
		    }
		}
    break;

  case 297:
#line 1106 "ldgram.y"
    {
		  memset (&(yyval.phdr), 0, sizeof (struct phdr_info));
		}
    break;

  case 298:
#line 1110 "ldgram.y"
    {
		  (yyval.phdr) = (yyvsp[0].phdr);
		  if (strcmp ((yyvsp[-2].name), "FILEHDR") == 0 && (yyvsp[-1].etree) == NULL)
		    (yyval.phdr).filehdr = TRUE;
		  else if (strcmp ((yyvsp[-2].name), "PHDRS") == 0 && (yyvsp[-1].etree) == NULL)
		    (yyval.phdr).phdrs = TRUE;
		  else if (strcmp ((yyvsp[-2].name), "FLAGS") == 0 && (yyvsp[-1].etree) != NULL)
		    (yyval.phdr).flags = (yyvsp[-1].etree);
		  else
		    einfo (_("%X%P:%S: PHDRS syntax error at `%s'\n"), (yyvsp[-2].name));
		}
    break;

  case 299:
#line 1122 "ldgram.y"
    {
		  (yyval.phdr) = (yyvsp[0].phdr);
		  (yyval.phdr).at = (yyvsp[-2].etree);
		}
    break;

  case 300:
#line 1130 "ldgram.y"
    {
		  (yyval.etree) = NULL;
		}
    break;

  case 301:
#line 1134 "ldgram.y"
    {
		  (yyval.etree) = (yyvsp[-1].etree);
		}
    break;

  case 302:
#line 1142 "ldgram.y"
    {
		  ldlex_version_file ();
		  PUSH_ERROR (_("VERSION script"));
		}
    break;

  case 303:
#line 1147 "ldgram.y"
    {
		  ldlex_popstate ();
		  POP_ERROR ();
		}
    break;

  case 304:
#line 1156 "ldgram.y"
    {
		  ldlex_version_script ();
		}
    break;

  case 305:
#line 1160 "ldgram.y"
    {
		  ldlex_popstate ();
		}
    break;

  case 308:
#line 1172 "ldgram.y"
    {
		  lang_register_vers_node (NULL, (yyvsp[-2].versnode), NULL);
		}
    break;

  case 309:
#line 1176 "ldgram.y"
    {
		  lang_register_vers_node ((yyvsp[-4].name), (yyvsp[-2].versnode), NULL);
		}
    break;

  case 310:
#line 1180 "ldgram.y"
    {
		  lang_register_vers_node ((yyvsp[-5].name), (yyvsp[-3].versnode), (yyvsp[-1].deflist));
		}
    break;

  case 311:
#line 1187 "ldgram.y"
    {
		  (yyval.deflist) = lang_add_vers_depend (NULL, (yyvsp[0].name));
		}
    break;

  case 312:
#line 1191 "ldgram.y"
    {
		  (yyval.deflist) = lang_add_vers_depend ((yyvsp[-1].deflist), (yyvsp[0].name));
		}
    break;

  case 313:
#line 1198 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node (NULL, NULL);
		}
    break;

  case 314:
#line 1202 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node ((yyvsp[-1].versyms), NULL);
		}
    break;

  case 315:
#line 1206 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node ((yyvsp[-1].versyms), NULL);
		}
    break;

  case 316:
#line 1210 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node (NULL, (yyvsp[-1].versyms));
		}
    break;

  case 317:
#line 1214 "ldgram.y"
    {
		  (yyval.versnode) = lang_new_vers_node ((yyvsp[-5].versyms), (yyvsp[-1].versyms));
		}
    break;

  case 318:
#line 1221 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, (yyvsp[0].name), ldgram_vers_current_lang, FALSE);
		}
    break;

  case 319:
#line 1225 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, (yyvsp[0].name), ldgram_vers_current_lang, TRUE);
		}
    break;

  case 320:
#line 1229 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[-2].versyms), (yyvsp[0].name), ldgram_vers_current_lang, FALSE);
		}
    break;

  case 321:
#line 1233 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[-2].versyms), (yyvsp[0].name), ldgram_vers_current_lang, TRUE);
		}
    break;

  case 322:
#line 1237 "ldgram.y"
    {
			  (yyval.name) = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = (yyvsp[-1].name);
			}
    break;

  case 323:
#line 1242 "ldgram.y"
    {
			  struct bfd_elf_version_expr *pat;
			  for (pat = (yyvsp[-2].versyms); pat->next != NULL; pat = pat->next);
			  pat->next = (yyvsp[-8].versyms);
			  (yyval.versyms) = (yyvsp[-2].versyms);
			  ldgram_vers_current_lang = (yyvsp[-3].name);
			}
    break;

  case 324:
#line 1250 "ldgram.y"
    {
			  (yyval.name) = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = (yyvsp[-1].name);
			}
    break;

  case 325:
#line 1255 "ldgram.y"
    {
			  (yyval.versyms) = (yyvsp[-2].versyms);
			  ldgram_vers_current_lang = (yyvsp[-3].name);
			}
    break;

  case 326:
#line 1260 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, "global", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 327:
#line 1264 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[-2].versyms), "global", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 328:
#line 1268 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, "local", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 329:
#line 1272 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[-2].versyms), "local", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 330:
#line 1276 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern (NULL, "extern", ldgram_vers_current_lang, FALSE);
		}
    break;

  case 331:
#line 1280 "ldgram.y"
    {
		  (yyval.versyms) = lang_new_vers_pattern ((yyvsp[-2].versyms), "extern", ldgram_vers_current_lang, FALSE);
		}
    break;


      default: break;
    }

/* Line 1126 of yacc.c.  */
#line 3882 "ldgram.c"

  yyvsp -= yylen;
  yyssp -= yylen;


  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (YYPACT_NINF < yyn && yyn < YYLAST)
	{
	  int yytype = YYTRANSLATE (yychar);
	  YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
	  YYSIZE_T yysize = yysize0;
	  YYSIZE_T yysize1;
	  int yysize_overflow = 0;
	  char *yymsg = 0;
#	  define YYERROR_VERBOSE_ARGS_MAXIMUM 5
	  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
	  int yyx;

#if 0
	  /* This is so xgettext sees the translatable formats that are
	     constructed on the fly.  */
	  YY_("syntax error, unexpected %s");
	  YY_("syntax error, unexpected %s, expecting %s");
	  YY_("syntax error, unexpected %s, expecting %s or %s");
	  YY_("syntax error, unexpected %s, expecting %s or %s or %s");
	  YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
#endif
	  char *yyfmt;
	  char const *yyf;
	  static char const yyunexpected[] = "syntax error, unexpected %s";
	  static char const yyexpecting[] = ", expecting %s";
	  static char const yyor[] = " or %s";
	  char yyformat[sizeof yyunexpected
			+ sizeof yyexpecting - 1
			+ ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
			   * (sizeof yyor - 1))];
	  char const *yyprefix = yyexpecting;

	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 1;

	  yyarg[0] = yytname[yytype];
	  yyfmt = yystpcpy (yyformat, yyunexpected);

	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      {
		if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
		  {
		    yycount = 1;
		    yysize = yysize0;
		    yyformat[sizeof yyunexpected - 1] = '\0';
		    break;
		  }
		yyarg[yycount++] = yytname[yyx];
		yysize1 = yysize + yytnamerr (0, yytname[yyx]);
		yysize_overflow |= yysize1 < yysize;
		yysize = yysize1;
		yyfmt = yystpcpy (yyfmt, yyprefix);
		yyprefix = yyor;
	      }

	  yyf = YY_(yyformat);
	  yysize1 = yysize + yystrlen (yyf);
	  yysize_overflow |= yysize1 < yysize;
	  yysize = yysize1;

	  if (!yysize_overflow && yysize <= YYSTACK_ALLOC_MAXIMUM)
	    yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg)
	    {
	      /* Avoid sprintf, as that infringes on the user's name space.
		 Don't have undefined behavior even if the translation
		 produced a string with the wrong number of "%s"s.  */
	      char *yyp = yymsg;
	      int yyi = 0;
	      while ((*yyp = *yyf))
		{
		  if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		    {
		      yyp += yytnamerr (yyp, yyarg[yyi++]);
		      yyf += 2;
		    }
		  else
		    {
		      yyp++;
		      yyf++;
		    }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    {
	      yyerror (YY_("syntax error"));
	      goto yyexhaustedlab;
	    }
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror (YY_("syntax error"));
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
        {
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
        }
      else
	{
	  yydestruct ("Error: discarding", yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (0)
     goto yyerrorlab;

yyvsp -= yylen;
  yyssp -= yylen;
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping", yystos[yystate], yyvsp);
      YYPOPSTACK;
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token. */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK;
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}


#line 1290 "ldgram.y"

void
yyerror(arg)
     const char *arg;
{
  if (ldfile_assumed_script)
    einfo (_("%P:%s: file format not recognized; treating as linker script\n"),
	   ldfile_input_filename);
  if (error_index > 0 && error_index < ERROR_NAME_MAX)
     einfo ("%P%F:%S: %s in %s\n", arg, error_names[error_index-1]);
  else
     einfo ("%P%F:%S: %s\n", arg);
}

@


1.1.14.1
log
@Commit generated files for the binutils 2.16 branch.
@
text
@a0 3370
/* A Bison parser, made from ldgram.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	INT	257
# define	NAME	258
# define	LNAME	259
# define	PLUSEQ	260
# define	MINUSEQ	261
# define	MULTEQ	262
# define	DIVEQ	263
# define	LSHIFTEQ	264
# define	RSHIFTEQ	265
# define	ANDEQ	266
# define	OREQ	267
# define	OROR	268
# define	ANDAND	269
# define	EQ	270
# define	NE	271
# define	LE	272
# define	GE	273
# define	LSHIFT	274
# define	RSHIFT	275
# define	UNARY	276
# define	END	277
# define	ALIGN_K	278
# define	BLOCK	279
# define	BIND	280
# define	QUAD	281
# define	SQUAD	282
# define	LONG	283
# define	SHORT	284
# define	BYTE	285
# define	SECTIONS	286
# define	PHDRS	287
# define	DATA_SEGMENT_ALIGN	288
# define	DATA_SEGMENT_RELRO_END	289
# define	DATA_SEGMENT_END	290
# define	SORT_BY_NAME	291
# define	SORT_BY_ALIGNMENT	292
# define	SIZEOF_HEADERS	293
# define	OUTPUT_FORMAT	294
# define	FORCE_COMMON_ALLOCATION	295
# define	OUTPUT_ARCH	296
# define	INHIBIT_COMMON_ALLOCATION	297
# define	SEGMENT_START	298
# define	INCLUDE	299
# define	MEMORY	300
# define	DEFSYMEND	301
# define	NOLOAD	302
# define	DSECT	303
# define	COPY	304
# define	INFO	305
# define	OVERLAY	306
# define	DEFINED	307
# define	TARGET_K	308
# define	SEARCH_DIR	309
# define	MAP	310
# define	ENTRY	311
# define	NEXT	312
# define	SIZEOF	313
# define	ADDR	314
# define	LOADADDR	315
# define	MAX_K	316
# define	MIN_K	317
# define	STARTUP	318
# define	HLL	319
# define	SYSLIB	320
# define	FLOAT	321
# define	NOFLOAT	322
# define	NOCROSSREFS	323
# define	ORIGIN	324
# define	FILL	325
# define	LENGTH	326
# define	CREATE_OBJECT_SYMBOLS	327
# define	INPUT	328
# define	GROUP	329
# define	OUTPUT	330
# define	CONSTRUCTORS	331
# define	ALIGNMOD	332
# define	AT	333
# define	SUBALIGN	334
# define	PROVIDE	335
# define	AS_NEEDED	336
# define	CHIP	337
# define	LIST	338
# define	SECT	339
# define	ABSOLUTE	340
# define	LOAD	341
# define	NEWLINE	342
# define	ENDWORD	343
# define	ORDER	344
# define	NAMEWORD	345
# define	ASSERT_K	346
# define	FORMAT	347
# define	PUBLIC	348
# define	BASE	349
# define	ALIAS	350
# define	TRUNCATE	351
# define	REL	352
# define	INPUT_SCRIPT	353
# define	INPUT_MRI_SCRIPT	354
# define	INPUT_DEFSYM	355
# define	CASE	356
# define	EXTERN	357
# define	START	358
# define	VERS_TAG	359
# define	VERS_IDENTIFIER	360
# define	GLOBAL	361
# define	LOCAL	362
# define	VERSIONK	363
# define	INPUT_VERSION_SCRIPT	364
# define	KEEP	365
# define	ONLY_IF_RO	366
# define	ONLY_IF_RW	367
# define	EXCLUDE_FILE	368

#line 22 "ldgram.y"

/*

 */

#define DONTDECLARE_MALLOC

#include "bfd.h"
#include "sysdep.h"
#include "bfdlink.h"
#include "ld.h"
#include "ldexp.h"
#include "ldver.h"
#include "ldlang.h"
#include "ldfile.h"
#include "ldemul.h"
#include "ldmisc.h"
#include "ldmain.h"
#include "mri.h"
#include "ldctor.h"
#include "ldlex.h"

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

static enum section_type sectype;

lang_memory_region_type *region;

bfd_boolean ldgram_want_filename = TRUE;
FILE *saved_script_handle = NULL;
bfd_boolean force_make_executable = FALSE;

bfd_boolean ldgram_in_script = FALSE;
bfd_boolean ldgram_had_equals = FALSE;
bfd_boolean ldgram_had_keep = FALSE;
char *ldgram_vers_current_lang = NULL;

#define ERROR_NAME_MAX 20
static char *error_names[ERROR_NAME_MAX];
static int error_index;
#define PUSH_ERROR(x) if (error_index < ERROR_NAME_MAX) error_names[error_index] = x; error_index++;
#define POP_ERROR()   error_index--;

#line 67 "ldgram.y"
#ifndef YYSTYPE
typedef union {
  bfd_vma integer;
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      bfd_boolean filehdr;
      bfd_boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif
#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		689
#define	YYFLAG		-32768
#define	YYNTBASE	138

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 368 ? yytranslate[x] : 250)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const short yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   136,     2,     2,     2,    34,    21,     2,
      37,   133,    32,    30,   131,    31,     2,    33,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    16,   132,
      24,    10,    25,    15,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   134,     2,   135,    20,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    53,    19,    54,   137,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    11,    12,    13,    14,    17,    18,
      22,    23,    26,    27,    28,    29,    35,    36,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    14,    15,    20,    21,
      24,    28,    29,    32,    37,    39,    41,    44,    46,    51,
      56,    60,    63,    68,    72,    77,    82,    87,    92,    97,
     100,   103,   106,   111,   116,   119,   122,   125,   128,   129,
     135,   138,   139,   143,   146,   147,   149,   153,   155,   159,
     160,   162,   166,   168,   171,   175,   176,   179,   182,   183,
     185,   187,   189,   191,   193,   195,   197,   199,   201,   203,
     208,   213,   218,   223,   232,   237,   239,   241,   246,   247,
     253,   258,   259,   265,   270,   275,   277,   281,   284,   286,
     290,   293,   294,   300,   301,   309,   310,   317,   322,   325,
     328,   329,   334,   337,   338,   346,   348,   350,   352,   354,
     360,   365,   370,   378,   386,   394,   402,   411,   414,   416,
     420,   422,   424,   428,   433,   435,   436,   442,   445,   447,
     449,   451,   456,   458,   463,   468,   471,   473,   474,   476,
     478,   480,   482,   484,   486,   488,   491,   492,   494,   496,
     498,   500,   502,   504,   506,   508,   510,   512,   516,   520,
     527,   529,   530,   536,   539,   543,   544,   545,   553,   557,
     561,   562,   566,   568,   571,   573,   576,   581,   586,   590,
     594,   596,   601,   605,   606,   608,   610,   611,   614,   618,
     619,   622,   625,   629,   634,   637,   640,   643,   647,   651,
     655,   659,   663,   667,   671,   675,   679,   683,   687,   691,
     695,   699,   703,   707,   713,   717,   721,   726,   728,   730,
     735,   740,   745,   750,   755,   762,   769,   776,   781,   788,
     793,   795,   802,   809,   816,   821,   826,   830,   831,   836,
     837,   842,   843,   845,   847,   848,   849,   850,   851,   852,
     853,   872,   873,   874,   875,   876,   877,   896,   897,   898,
     906,   908,   910,   912,   914,   916,   920,   921,   924,   928,
     931,   938,   949,   952,   954,   955,   957,   960,   961,   962,
     966,   967,   968,   969,   970,   982,   987,   988,   991,   992,
     993,  1000,  1002,  1003,  1007,  1013,  1014,  1018,  1019,  1022,
    1023,  1029,  1031,  1034,  1039,  1045,  1052,  1054,  1057,  1058,
    1061,  1066,  1071,  1080,  1082,  1086,  1087,  1097,  1098,  1106,
    1107
};
static const short yyrhs[] =
{
     115,   152,     0,   116,   142,     0,   126,   238,     0,   117,
     140,     0,     4,     0,     0,   141,     4,    10,   201,     0,
       0,   143,   144,     0,   144,   145,   104,     0,     0,    99,
     201,     0,    99,   201,   131,   201,     0,     4,     0,   100,
       0,   106,   147,     0,   105,     0,   110,     4,    10,   201,
       0,   110,     4,   131,   201,     0,   110,     4,   201,     0,
     109,     4,     0,   101,     4,   131,   201,     0,   101,     4,
     201,     0,   101,     4,    10,   201,     0,    38,     4,    10,
     201,     0,    38,     4,   131,   201,     0,    94,     4,    10,
     201,     0,    94,     4,   131,   201,     0,   102,   149,     0,
     103,   148,     0,   107,     4,     0,   112,     4,   131,     4,
       0,   112,     4,   131,     3,     0,   111,   201,     0,   113,
       3,     0,   118,   150,     0,   119,   151,     0,     0,    61,
     139,   146,   144,    36,     0,   120,     4,     0,     0,   147,
     131,     4,     0,   147,     4,     0,     0,     4,     0,   148,
     131,     4,     0,     4,     0,   149,   131,     4,     0,     0,
       4,     0,   150,   131,     4,     0,     4,     0,   151,     4,
       0,   151,   131,     4,     0,     0,   153,   154,     0,   154,
     155,     0,     0,   183,     0,   162,     0,   230,     0,   192,
       0,   193,     0,   195,     0,   197,     0,   164,     0,   240,
       0,   132,     0,    70,    37,     4,   133,     0,    71,    37,
     139,   133,     0,    92,    37,   139,   133,     0,    56,    37,
       4,   133,     0,    56,    37,     4,   131,     4,   131,     4,
     133,     0,    58,    37,     4,   133,     0,    57,     0,    59,
       0,    90,    37,   158,   133,     0,     0,    91,   156,    37,
     158,   133,     0,    72,    37,   139,   133,     0,     0,    61,
     139,   157,   154,    36,     0,    85,    37,   198,   133,     0,
     119,    37,   151,   133,     0,     4,     0,   158,   131,     4,
       0,   158,     4,     0,     5,     0,   158,   131,     5,     0,
     158,     5,     0,     0,    98,    37,   159,   158,   133,     0,
       0,   158,   131,    98,    37,   160,   158,   133,     0,     0,
     158,    98,    37,   161,   158,   133,     0,    46,    53,   163,
      54,     0,   163,   206,     0,   163,   164,     0,     0,    73,
      37,     4,   133,     0,   181,   180,     0,     0,   108,   165,
      37,   201,   131,     4,   133,     0,     4,     0,    32,     0,
      15,     0,   166,     0,   130,    37,   168,   133,   166,     0,
      51,    37,   166,   133,     0,    52,    37,   166,   133,     0,
      51,    37,    52,    37,   166,   133,   133,     0,    51,    37,
      51,    37,   166,   133,   133,     0,    52,    37,    51,    37,
     166,   133,   133,     0,    52,    37,    52,    37,   166,   133,
     133,     0,    51,    37,   130,    37,   168,   133,   166,   133,
       0,   168,   166,     0,   166,     0,   169,   182,   167,     0,
     167,     0,     4,     0,   134,   169,   135,     0,   167,    37,
     169,   133,     0,   170,     0,     0,   127,    37,   172,   170,
     133,     0,   181,   180,     0,    89,     0,   132,     0,    93,
       0,    51,    37,    93,   133,     0,   171,     0,   176,    37,
     199,   133,     0,    87,    37,   177,   133,     0,   174,   173,
       0,   173,     0,     0,   174,     0,    41,     0,    42,     0,
      43,     0,    44,     0,    45,     0,   199,     0,    10,   177,
       0,     0,     6,     0,     7,     0,     8,     0,     9,     0,
      11,     0,    12,     0,    13,     0,    14,     0,   132,     0,
     131,     0,     4,    10,   199,     0,     4,   179,   199,     0,
      97,    37,     4,    10,   199,   133,     0,   131,     0,     0,
      62,    53,   185,   184,    54,     0,   184,   185,     0,   184,
     131,   185,     0,     0,     0,     4,   186,   189,    16,   187,
     182,   188,     0,    86,    10,   199,     0,    88,    10,   199,
       0,     0,    37,   190,   133,     0,   191,     0,   190,   191,
       0,     4,     0,   136,     4,     0,    80,    37,   139,   133,
       0,    81,    37,   194,   133,     0,    81,    37,   133,     0,
     194,   182,   139,     0,   139,     0,    82,    37,   196,   133,
       0,   196,   182,   139,     0,     0,    83,     0,    84,     0,
       0,     4,   198,     0,     4,   131,   198,     0,     0,   200,
     201,     0,    31,   201,     0,    37,   201,   133,     0,    74,
      37,   201,   133,     0,   136,   201,     0,    30,   201,     0,
     137,   201,     0,   201,    32,   201,     0,   201,    33,   201,
       0,   201,    34,   201,     0,   201,    30,   201,     0,   201,
      31,   201,     0,   201,    28,   201,     0,   201,    29,   201,
       0,   201,    22,   201,     0,   201,    23,   201,     0,   201,
      26,   201,     0,   201,    27,   201,     0,   201,    24,   201,
       0,   201,    25,   201,     0,   201,    21,   201,     0,   201,
      20,   201,     0,   201,    19,   201,     0,   201,    15,   201,
      16,   201,     0,   201,    18,   201,     0,   201,    17,   201,
       0,    69,    37,     4,   133,     0,     3,     0,    55,     0,
      75,    37,     4,   133,     0,    76,    37,     4,   133,     0,
      77,    37,     4,   133,     0,   102,    37,   201,   133,     0,
      38,    37,   201,   133,     0,    38,    37,   201,   131,   201,
     133,     0,    48,    37,   201,   131,   201,   133,     0,    49,
      37,   201,   131,   201,   133,     0,    50,    37,   201,   133,
       0,    60,    37,     4,   131,   201,   133,     0,    39,    37,
     201,   133,     0,     4,     0,    78,    37,   201,   131,   201,
     133,     0,    79,    37,   201,   131,   201,   133,     0,   108,
      37,   201,   131,     4,   133,     0,    86,    37,     4,   133,
       0,    88,    37,     4,   133,     0,    95,    25,     4,     0,
       0,    95,    37,   201,   133,     0,     0,    96,    37,   201,
     133,     0,     0,   128,     0,   129,     0,     0,     0,     0,
       0,     0,     0,     4,   207,   221,   203,   204,   208,   205,
      53,   209,   175,    54,   210,   224,   202,   225,   178,   211,
     182,     0,     0,     0,     0,     0,     0,    68,   212,   222,
     223,   203,   204,   213,    53,   214,   226,    54,   215,   224,
     202,   225,   178,   216,   182,     0,     0,     0,    91,   217,
     221,   218,    53,   163,    54,     0,    64,     0,    65,     0,
      66,     0,    67,     0,    68,     0,    37,   219,   133,     0,
       0,    37,   133,     0,   201,   220,    16,     0,   220,    16,
       0,    40,    37,   201,   133,   220,    16,     0,    40,    37,
     201,   133,    39,    37,   201,   133,   220,    16,     0,   201,
      16,     0,    16,     0,     0,    85,     0,    25,     4,     0,
       0,     0,   225,    16,     4,     0,     0,     0,     0,     0,
     226,     4,   227,    53,   175,    54,   228,   225,   178,   229,
     182,     0,    47,    53,   231,    54,     0,     0,   231,   232,
       0,     0,     0,     4,   233,   235,   236,   234,   132,     0,
     201,     0,     0,     4,   237,   236,     0,    95,    37,   201,
     133,   236,     0,     0,    37,   201,   133,     0,     0,   239,
     242,     0,     0,   241,   125,    53,   242,    54,     0,   243,
       0,   242,   243,     0,    53,   245,    54,   132,     0,   121,
      53,   245,    54,   132,     0,   121,    53,   245,    54,   244,
     132,     0,   121,     0,   244,   121,     0,     0,   246,   132,
       0,   123,    16,   246,   132,     0,   124,    16,   246,   132,
       0,   123,    16,   246,   132,   124,    16,   246,   132,     0,
     122,     0,   246,   132,   122,     0,     0,   246,   132,   119,
       4,    53,   247,   246,   249,    54,     0,     0,   119,     4,
      53,   248,   246,   249,    54,     0,     0,   132,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   163,   165,   166,   167,   171,   174,   174,   184,   184,
     197,   199,   202,   204,   205,   208,   211,   212,   213,   215,
     217,   219,   221,   223,   225,   227,   229,   231,   233,   235,
     236,   237,   239,   241,   243,   245,   247,   248,   249,   249,
     253,   255,   258,   260,   261,   264,   267,   270,   273,   277,
     279,   280,   283,   286,   288,   292,   292,   303,   305,   310,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     323,   325,   327,   330,   332,   334,   336,   338,   339,   339,
     343,   345,   345,   349,   353,   356,   360,   363,   366,   369,
     372,   375,   375,   379,   379,   383,   383,   389,   393,   395,
     396,   399,   402,   403,   403,   410,   415,   419,   425,   432,
     438,   444,   450,   456,   462,   468,   474,   482,   491,   502,
     511,   522,   531,   535,   541,   543,   543,   549,   551,   555,
     556,   561,   566,   567,   572,   578,   580,   583,   585,   588,
     591,   593,   595,   597,   601,   611,   614,   617,   620,   622,
     624,   626,   628,   630,   632,   637,   637,   641,   646,   654,
     661,   662,   665,   669,   671,   672,   676,   676,   683,   691,
     700,   703,   706,   708,   711,   714,   718,   723,   725,   729,
     732,   737,   739,   742,   745,   748,   752,   757,   766,   777,
     777,   782,   785,   787,   789,   791,   793,   796,   798,   800,
     802,   804,   806,   808,   810,   812,   814,   816,   818,   820,
     822,   824,   826,   828,   830,   832,   834,   836,   838,   841,
     843,   845,   847,   849,   851,   853,   855,   857,   859,   868,
     870,   872,   874,   876,   878,   880,   885,   887,   890,   892,
     895,   897,   900,   902,   903,   906,   906,   906,   906,   906,
     906,   926,   926,   926,   926,   926,   926,   944,   944,   944,
     957,   959,   960,   961,   962,   965,   967,   968,   971,   973,
     974,   979,   983,   985,   988,   991,   995,   998,  1001,  1006,
    1019,  1021,  1021,  1021,  1021,  1037,  1041,  1043,  1046,  1046,
    1046,  1056,  1100,  1105,  1117,  1124,  1129,  1137,  1137,  1151,
    1151,  1161,  1163,  1166,  1171,  1175,  1181,  1186,  1192,  1197,
    1201,  1205,  1209,  1215,  1220,  1224,  1224,  1234,  1234,  1246,
    1248
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "INT", "NAME", "LNAME", "PLUSEQ", "MINUSEQ", 
  "MULTEQ", "DIVEQ", "'='", "LSHIFTEQ", "RSHIFTEQ", "ANDEQ", "OREQ", 
  "'?'", "':'", "OROR", "ANDAND", "'|'", "'^'", "'&'", "EQ", "NE", "'<'", 
  "'>'", "LE", "GE", "LSHIFT", "RSHIFT", "'+'", "'-'", "'*'", "'/'", 
  "'%'", "UNARY", "END", "'('", "ALIGN_K", "BLOCK", "BIND", "QUAD", 
  "SQUAD", "LONG", "SHORT", "BYTE", "SECTIONS", "PHDRS", 
  "DATA_SEGMENT_ALIGN", "DATA_SEGMENT_RELRO_END", "DATA_SEGMENT_END", 
  "SORT_BY_NAME", "SORT_BY_ALIGNMENT", "'{'", "'}'", "SIZEOF_HEADERS", 
  "OUTPUT_FORMAT", "FORCE_COMMON_ALLOCATION", "OUTPUT_ARCH", 
  "INHIBIT_COMMON_ALLOCATION", "SEGMENT_START", "INCLUDE", "MEMORY", 
  "DEFSYMEND", "NOLOAD", "DSECT", "COPY", "INFO", "OVERLAY", "DEFINED", 
  "TARGET_K", "SEARCH_DIR", "MAP", "ENTRY", "NEXT", "SIZEOF", "ADDR", 
  "LOADADDR", "MAX_K", "MIN_K", "STARTUP", "HLL", "SYSLIB", "FLOAT", 
  "NOFLOAT", "NOCROSSREFS", "ORIGIN", "FILL", "LENGTH", 
  "CREATE_OBJECT_SYMBOLS", "INPUT", "GROUP", "OUTPUT", "CONSTRUCTORS", 
  "ALIGNMOD", "AT", "SUBALIGN", "PROVIDE", "AS_NEEDED", "CHIP", "LIST", 
  "SECT", "ABSOLUTE", "LOAD", "NEWLINE", "ENDWORD", "ORDER", "NAMEWORD", 
  "ASSERT_K", "FORMAT", "PUBLIC", "BASE", "ALIAS", "TRUNCATE", "REL", 
  "INPUT_SCRIPT", "INPUT_MRI_SCRIPT", "INPUT_DEFSYM", "CASE", "EXTERN", 
  "START", "VERS_TAG", "VERS_IDENTIFIER", "GLOBAL", "LOCAL", "VERSIONK", 
  "INPUT_VERSION_SCRIPT", "KEEP", "ONLY_IF_RO", "ONLY_IF_RW", 
  "EXCLUDE_FILE", "','", "';'", "')'", "'['", "']'", "'!'", "'~'", "file", 
  "filename", "defsym_expr", "@@1", "mri_script_file", "@@2", 
  "mri_script_lines", "mri_script_command", "@@3", "ordernamelist", 
  "mri_load_name_list", "mri_abs_name_list", "casesymlist", 
  "extern_name_list", "script_file", "@@4", "ifile_list", "ifile_p1", "@@5", 
  "@@6", "input_list", "@@7", "@@8", "@@9", "sections", "sec_or_group_p1", 
  "statement_anywhere", "@@10", "wildcard_name", "wildcard_spec", 
  "exclude_name_list", "file_NAME_list", "input_section_spec_no_keep", 
  "input_section_spec", "@@11", "statement", "statement_list", 
  "statement_list_opt", "length", "fill_exp", "fill_opt", "assign_op", 
  "end", "assignment", "opt_comma", "memory", "memory_spec_list", 
  "memory_spec", "@@12", "origin_spec", "length_spec", "attributes_opt", 
  "attributes_list", "attributes_string", "startup", "high_level_library", 
  "high_level_library_NAME_list", "low_level_library", 
  "low_level_library_NAME_list", "floating_point_support", 
  "nocrossref_list", "mustbe_exp", "@@13", "exp", "memspec_at_opt", 
  "opt_at", "opt_subalign", "sect_constraint", "section", "@@14", "@@15", 
  "@@16", "@@17", "@@18", "@@19", "@@20", "@@21", "@@22", "@@23", "@@24", "@@25", 
  "type", "atype", "opt_exp_with_type", "opt_exp_without_type", 
  "opt_nocrossrefs", "memspec_opt", "phdr_opt", "overlay_section", "@@26", 
  "@@27", "@@28", "phdrs", "phdr_list", "phdr", "@@29", "@@30", "phdr_type", 
  "phdr_qualifiers", "phdr_val", "version_script_file", "@@31", "version", 
  "@@32", "vers_nodes", "vers_node", "verdep", "vers_tag", "vers_defns", 
  "@@33", "@@34", "opt_semicolon", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,   138,   138,   138,   138,   139,   141,   140,   143,   142,
     144,   144,   145,   145,   145,   145,   145,   145,   145,   145,
     145,   145,   145,   145,   145,   145,   145,   145,   145,   145,
     145,   145,   145,   145,   145,   145,   145,   145,   146,   145,
     145,   145,   147,   147,   147,   148,   148,   149,   149,   150,
     150,   150,   151,   151,   151,   153,   152,   154,   154,   155,
     155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
     155,   155,   155,   155,   155,   155,   155,   155,   156,   155,
     155,   157,   155,   155,   155,   158,   158,   158,   158,   158,
     158,   159,   158,   160,   158,   161,   158,   162,   163,   163,
     163,   164,   164,   165,   164,   166,   166,   166,   167,   167,
     167,   167,   167,   167,   167,   167,   167,   168,   168,   169,
     169,   170,   170,   170,   171,   172,   171,   173,   173,   173,
     173,   173,   173,   173,   173,   174,   174,   175,   175,   176,
     176,   176,   176,   176,   177,   178,   178,   179,   179,   179,
     179,   179,   179,   179,   179,   180,   180,   181,   181,   181,
     182,   182,   183,   184,   184,   184,   186,   185,   187,   188,
     189,   189,   190,   190,   191,   191,   192,   193,   193,   194,
     194,   195,   196,   196,   197,   197,   198,   198,   198,   200,
     199,   201,   201,   201,   201,   201,   201,   201,   201,   201,
     201,   201,   201,   201,   201,   201,   201,   201,   201,   201,
     201,   201,   201,   201,   201,   201,   201,   201,   201,   201,
     201,   201,   201,   201,   201,   201,   201,   201,   201,   201,
     201,   201,   201,   201,   201,   201,   202,   202,   203,   203,
     204,   204,   205,   205,   205,   207,   208,   209,   210,   211,
     206,   212,   213,   214,   215,   216,   206,   217,   218,   206,
     219,   219,   219,   219,   219,   220,   220,   220,   221,   221,
     221,   221,   222,   222,   223,   223,   224,   224,   225,   225,
     226,   227,   228,   229,   226,   230,   231,   231,   233,   234,
     232,   235,   236,   236,   236,   237,   237,   239,   238,   241,
     240,   242,   242,   243,   243,   243,   244,   244,   245,   245,
     245,   245,   245,   246,   246,   247,   246,   248,   246,   249,
     249
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     2,     2,     2,     2,     1,     0,     4,     0,     2,
       3,     0,     2,     4,     1,     1,     2,     1,     4,     4,
       3,     2,     4,     3,     4,     4,     4,     4,     4,     2,
       2,     2,     4,     4,     2,     2,     2,     2,     0,     5,
       2,     0,     3,     2,     0,     1,     3,     1,     3,     0,
       1,     3,     1,     2,     3,     0,     2,     2,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       4,     4,     4,     8,     4,     1,     1,     4,     0,     5,
       4,     0,     5,     4,     4,     1,     3,     2,     1,     3,
       2,     0,     5,     0,     7,     0,     6,     4,     2,     2,
       0,     4,     2,     0,     7,     1,     1,     1,     1,     5,
       4,     4,     7,     7,     7,     7,     8,     2,     1,     3,
       1,     1,     3,     4,     1,     0,     5,     2,     1,     1,
       1,     4,     1,     4,     4,     2,     1,     0,     1,     1,
       1,     1,     1,     1,     1,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     3,     6,
       1,     0,     5,     2,     3,     0,     0,     7,     3,     3,
       0,     3,     1,     2,     1,     2,     4,     4,     3,     3,
       1,     4,     3,     0,     1,     1,     0,     2,     3,     0,
       2,     2,     3,     4,     2,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     5,     3,     3,     4,     1,     1,     4,
       4,     4,     4,     4,     6,     6,     6,     4,     6,     4,
       1,     6,     6,     6,     4,     4,     3,     0,     4,     0,
       4,     0,     1,     1,     0,     0,     0,     0,     0,     0,
      18,     0,     0,     0,     0,     0,    18,     0,     0,     7,
       1,     1,     1,     1,     1,     3,     0,     2,     3,     2,
       6,    10,     2,     1,     0,     1,     2,     0,     0,     3,
       0,     0,     0,     0,    11,     4,     0,     2,     0,     0,
       6,     1,     0,     3,     5,     0,     3,     0,     2,     0,
       5,     1,     2,     4,     5,     6,     1,     2,     0,     2,
       4,     4,     8,     1,     3,     0,     9,     0,     7,     0,
       1
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,    55,     8,     6,   297,     1,    58,     2,    11,     4,
       0,     3,     0,    56,     9,     0,   308,     0,   298,   301,
       0,     0,     0,     0,    75,     0,    76,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   184,   185,     0,     0,
      78,     0,     0,   103,     0,    68,    57,    60,    66,     0,
      59,    62,    63,    64,    65,    61,    67,     0,    14,     0,
       0,     0,     0,    15,     0,     0,     0,    17,    44,     0,
       0,     0,     0,     0,     0,    49,     0,     0,     0,     0,
       0,   313,     0,     0,     0,     0,   308,   302,   147,   148,
     149,   150,   189,   151,   152,   153,   154,   189,   100,   286,
       0,     0,     5,    81,     0,     0,     0,     0,     0,     0,
       0,   183,   186,     0,     0,     0,     0,     0,     0,   156,
     155,   102,     0,     0,    38,     0,   217,   230,     0,     0,
       0,     0,     0,     0,     0,     0,   218,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    12,     0,    47,    29,    45,    30,    16,    31,    21,
       0,    34,     0,    35,    50,    36,    52,    37,    40,    10,
       7,     0,     0,     0,     0,   309,     0,   157,     0,   158,
       0,     0,     0,     0,    58,   166,   165,     0,     0,     0,
       0,     0,   178,   180,   161,   161,   186,     0,    85,    88,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      11,     0,     0,   195,   191,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   194,   196,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    23,     0,     0,
      43,     0,     0,     0,    20,     0,     0,    53,     0,   317,
       0,     0,   303,     0,   314,     0,   190,   245,    97,   251,
     257,    99,    98,   288,   285,   287,     0,    72,    74,   299,
     170,     0,    69,    70,    80,   101,   176,   160,   177,     0,
     181,     0,   186,   187,    83,    91,    87,    90,     0,     0,
      77,     0,    71,   189,     0,    84,     0,    25,    26,    41,
      27,    28,   192,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   215,   214,   212,   211,   210,   204,   205,   208,   209,
     206,   207,   202,   203,   200,   201,   197,   198,   199,    13,
      24,    22,    48,    46,    42,    18,    19,    33,    32,    51,
      54,     0,   310,   311,     0,   306,   304,     0,   266,     0,
     266,     0,     0,    82,     0,     0,   162,     0,   163,   179,
     182,   188,     0,    95,    86,    89,     0,    79,     0,     0,
     300,    39,     0,   223,   229,     0,     0,   227,     0,   216,
     193,   219,   220,   221,     0,     0,   234,   235,   222,     0,
       0,   319,     0,   315,   307,   305,     0,     0,   266,     0,
     239,   273,     0,   274,   258,   291,   292,     0,   174,     0,
       0,   172,     0,   164,     0,     0,    93,   159,     0,     0,
       0,     0,     0,     0,     0,     0,   213,   320,     0,     0,
       0,   260,   261,   262,   263,   264,   267,     0,     0,     0,
       0,   269,     0,   241,   272,   275,   239,     0,   295,     0,
     289,     0,   175,   171,   173,     0,   161,    92,     0,     0,
     104,   224,   225,   226,   228,   231,   232,   233,   318,     0,
     319,   265,     0,   268,     0,     0,   246,   241,   100,     0,
     292,     0,     0,    73,   189,     0,    96,     0,   312,     0,
     266,     0,     0,   244,   252,     0,     0,   293,     0,   290,
     168,     0,   167,    94,   316,     0,     0,   238,     0,   242,
     243,     0,     0,   259,   296,   292,   189,     0,   270,   240,
     247,   253,   294,   169,     0,   137,   280,   266,   121,   107,
     106,   139,   140,   141,   142,   143,     0,     0,     0,   128,
     130,     0,     0,   129,     0,   108,     0,   124,   132,   136,
     138,     0,     0,     0,     0,     0,     0,     0,   189,   125,
       0,   105,     0,   120,   161,     0,   135,   248,   189,   127,
     281,   254,   271,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   144,     0,   118,     0,     0,   122,     0,   161,
     277,     0,     0,   277,     0,     0,   131,     0,   110,     0,
       0,   111,   134,   105,     0,     0,   117,   119,   123,     0,
     237,   133,   137,   237,     0,     0,     0,     0,     0,   126,
     109,   276,     0,   278,     0,   278,     0,     0,     0,     0,
       0,     0,   146,   282,   146,   113,   112,     0,   114,   115,
     236,   189,     0,   249,   278,   255,   116,   145,   279,   161,
     146,   161,   250,   283,   256,   161,   284,     0,     0,     0
};

static const short yydefgoto[] =
{
     687,   103,     9,    10,     7,     8,    14,    78,   210,   157,
     156,   154,   165,   167,     5,     6,    13,    46,   114,   184,
     201,   392,   489,   445,    47,   180,    48,   117,   575,   576,
     615,   594,   577,   578,   613,   579,   580,   581,   582,   611,
     673,    97,   121,    49,   618,    50,   291,   186,   290,   486,
     532,   385,   440,   441,    51,    52,   194,    53,   195,    54,
     197,   612,   178,   215,   653,   473,   506,   541,   282,   378,
     523,   555,   620,   679,   379,   542,   556,   623,   681,   380,
     477,   467,   429,   430,   433,   476,   640,   662,   584,   622,
     674,   685,    55,   181,   285,   381,   512,   436,   480,   510,
      11,    12,    56,    57,    18,    19,   377,    84,    85,   460,
     371,   458
};

static const short yypact[] =
{
     139,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
      18,-32768,   -35,   759,  1346,    52,   180,    14,   -35,-32768,
     391,    26,    74,    96,-32768,   162,-32768,    85,   149,   196,
     203,   220,   232,   254,   255,   273,-32768,-32768,   291,   292,
  -32768,   293,   295,-32768,   296,-32768,-32768,-32768,-32768,   -78,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,    98,-32768,   242,
      85,   332,   672,-32768,   334,   336,   341,-32768,-32768,   342,
     354,   356,   672,   357,   360,   361,   363,   371,   283,   672,
     372,-32768,   373,   375,   323,   262,   180,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
     403,   404,-32768,-32768,   405,   410,    85,    85,   411,    85,
      13,-32768,   412,    37,   358,    85,   414,   384,   363,-32768,
  -32768,-32768,   374,    25,-32768,    83,-32768,-32768,   672,   672,
     672,   387,   388,   389,   392,   393,-32768,   394,   397,   398,
     399,   406,   407,   413,   415,   418,   419,   422,   424,   672,
     672,  1474,    35,-32768,   311,-32768,   316,    11,-32768,-32768,
     435,  1704,   338,-32768,-32768,   339,-32768,    33,-32768,-32768,
    1704,   423,   -95,   -95,   335,   -16,   417,-32768,   672,-32768,
     258,    42,     3,   344,-32768,-32768,-32768,   345,   347,   348,
     349,   364,-32768,-32768,   133,   167,    36,   365,-32768,-32768,
     438,    24,    37,   366,   477,   672,     7,   -35,   672,   672,
  -32768,   672,   672,-32768,-32768,   940,   672,   672,   672,   672,
     672,   489,   490,   672,   492,   496,   497,   672,   672,   498,
     499,   672,   672,-32768,-32768,   672,   672,   672,   672,   672,
     672,   672,   672,   672,   672,   672,   672,   672,   672,   672,
     672,   672,   672,   672,   672,   672,   672,  1704,   501,   503,
  -32768,   504,   672,   672,  1704,   248,   511,-32768,   512,-32768,
     390,   401,-32768,   515,-32768,   -45,  1704,   391,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   516,-32768,-32768,   824,
     502,    21,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    85,
  -32768,    85,   412,-32768,-32768,-32768,-32768,-32768,   505,   127,
  -32768,    77,-32768,-32768,  1494,-32768,    47,  1704,  1704,  1368,
    1704,  1704,-32768,   253,   960,  1514,  1534,   980,   409,   402,
    1000,   408,   416,   425,  1554,  1589,   426,   427,  1020,  1609,
    1671,  1037,  1153,   770,  1268,   660,   920,   920,   285,   285,
     285,   285,   186,   186,   256,   256,-32768,-32768,-32768,  1704,
    1704,  1704,-32768,-32768,-32768,  1704,  1704,-32768,-32768,-32768,
  -32768,   -95,   113,   -16,   481,-32768,-32768,   117,   514,   593,
     514,   672,   430,-32768,     9,   520,-32768,   405,-32768,-32768,
  -32768,-32768,    37,-32768,-32768,-32768,   509,-32768,   432,   534,
  -32768,-32768,   672,-32768,-32768,   672,   672,-32768,   672,-32768,
  -32768,-32768,-32768,-32768,   672,   672,-32768,-32768,-32768,   543,
     672,   436,   532,-32768,-32768,-32768,   304,   513,  1629,   540,
     462,-32768,  1726,   482,-32768,  1704,    22,   566,-32768,   569,
       8,-32768,   491,-32768,   103,    37,-32768,-32768,   442,  1057,
    1077,  1097,  1117,  1137,  1174,   443,  1704,   -16,   524,   -95,
     -95,-32768,-32768,-32768,-32768,-32768,-32768,   446,   672,   163,
     564,-32768,   544,   486,-32768,-32768,   462,   531,   548,   549,
  -32768,   454,-32768,-32768,-32768,   584,   464,-32768,   111,    37,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   466,
     436,-32768,  1194,-32768,   672,   562,-32768,   486,-32768,   672,
      22,   672,   469,-32768,-32768,   517,-32768,   114,   -16,   550,
     272,  1214,   672,   177,-32768,   320,  1234,-32768,  1254,-32768,
  -32768,   596,-32768,-32768,-32768,   570,   587,-32768,  1291,-32768,
  -32768,   555,   557,-32768,-32768,    22,-32768,   672,-32768,-32768,
  -32768,-32768,-32768,-32768,  1311,   692,-32768,   574,   518,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   575,   576,   577,-32768,
  -32768,   578,   580,-32768,   207,-32768,   581,-32768,-32768,-32768,
     692,   565,   583,   -78,    45,   605,    46,   381,-32768,-32768,
     211,-32768,   588,-32768,   132,   207,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   589,   590,   495,   592,   500,   597,   598,
     506,   507,-32768,    73,-32768,    15,   209,-32768,   207,   194,
     611,   519,   585,   611,   211,   211,-32768,   211,-32768,   211,
     211,-32768,-32768,   521,   522,   211,-32768,-32768,-32768,   633,
     551,-32768,   692,   551,   523,   525,    16,   526,   527,-32768,
  -32768,-32768,   619,-32768,   591,-32768,   528,   530,   211,   533,
     541,   643,    53,-32768,    53,-32768,-32768,   545,-32768,-32768,
  -32768,-32768,   645,-32768,-32768,-32768,-32768,-32768,-32768,   464,
      53,   464,-32768,-32768,-32768,   464,-32768,   657,   664,-32768
};

static const short yypgoto[] =
{
  -32768,   -51,-32768,-32768,-32768,-32768,   455,-32768,-32768,-32768,
  -32768,-32768,-32768,   559,-32768,-32768,   529,-32768,-32768,-32768,
    -192,-32768,-32768,-32768,-32768,   165,  -174,-32768,  -167,  -538,
      70,   104,    67,-32768,-32768,   118,-32768,    58,-32768,    34,
    -620,-32768,   121,  -512,  -193,-32768,-32768,  -259,-32768,-32768,
  -32768,-32768,-32768,   266,-32768,-32768,-32768,-32768,-32768,-32768,
    -173,   -92,-32768,   -58,    65,   236,   208,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,  -394,   337,-32768,-32768,    91,  -622,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -494,-32768,
  -32768,-32768,-32768,-32768,   535,   -15,-32768,   630,  -165,-32768,
  -32768,   218
};


#define	YYLAST		1760


static const short yytable[] =
{
     177,   299,   301,    87,   151,   179,   281,   270,   271,   124,
     311,   267,   438,   438,   161,   260,   527,   102,    16,   591,
     591,   170,    15,   303,    80,   185,   478,    81,   306,   307,
     559,   559,   388,   664,   470,   208,   593,   267,   126,   127,
     196,   198,   199,   583,   675,   255,   283,   560,   560,   600,
     591,   552,   680,   119,   120,   188,   189,   593,   191,   193,
     683,   559,    79,   671,   203,   128,   129,    86,   583,   672,
     213,   214,   130,   131,   132,   386,   375,   633,   560,    98,
     637,   306,   307,   133,   134,   135,    17,   376,   559,   102,
     136,   233,   234,   211,   257,   137,   284,   603,   604,   601,
      16,   400,   264,   273,   138,   560,   274,   306,   307,   139,
     140,   141,   142,   143,   144,   306,   307,   479,   306,   307,
     276,   145,   308,   146,   592,   567,   536,    99,   443,   391,
     583,   394,   395,   100,   286,   200,   287,   147,   268,   605,
     315,   483,   261,   148,   439,   439,   192,   314,   635,   658,
     317,   318,   387,   320,   321,   309,   209,   310,   323,   324,
     325,   326,   327,   585,   268,   330,   256,   302,    17,   334,
     335,   149,   150,   338,   339,   308,   606,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   101,
     444,   308,   104,   572,   365,   366,   421,   574,   309,   308,
     397,   591,   308,   591,   212,   591,   249,   250,   251,   252,
     253,   398,   559,   122,   559,   396,   559,   461,   462,   463,
     464,   465,   273,   105,   309,   274,   487,   422,   424,   560,
     106,   560,   309,   560,   516,   309,   123,   533,   389,   425,
     390,   367,   368,   488,     1,     2,     3,   107,   592,   567,
     603,   604,   277,   297,   297,     4,   298,   617,   235,   108,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   251,   252,
     253,   109,   110,   515,   499,   500,   466,   517,   297,    80,
     300,    87,    81,    82,    83,   539,   540,   126,   127,   469,
     111,   535,   278,   247,   248,   249,   250,   251,   252,   253,
     428,   432,   428,   435,   277,   297,   279,   638,   112,   113,
     115,    32,   116,   118,   128,   129,   125,   572,   152,   606,
     153,   130,   131,   132,   449,   155,   158,   450,   451,   280,
     452,   281,   133,   134,   135,    42,   453,   454,   159,   136,
     160,   162,   456,   163,   137,   164,    43,   166,   461,   462,
     463,   464,   465,   138,   543,   168,   171,   174,   139,   140,
     141,   142,   143,   144,   402,   591,   403,   169,   279,   172,
     145,   173,   146,    32,   175,   202,   559,    88,    89,    90,
      91,    92,    93,    94,    95,    96,   147,   182,   183,   185,
     502,   280,   148,   560,   187,   190,   196,    42,   204,   607,
     610,   205,   530,   614,   216,   217,   218,   207,    43,   219,
     220,   221,   608,   609,   222,   223,   224,   466,   126,   127,
     149,   150,   258,   225,   226,   262,   521,   259,   636,   607,
     227,   526,   228,   528,   553,   229,   230,   644,   645,   231,
     614,   232,   647,   648,   538,   128,   129,   272,   650,   265,
     266,   275,   130,   131,   132,   305,   269,   288,   292,   636,
     293,   294,   295,   133,   134,   135,   682,   313,   684,   554,
     136,   667,   686,   328,   329,   137,   331,   296,   304,   312,
     332,   333,   336,   337,   138,   362,   621,   363,   364,   139,
     140,   141,   142,   143,   144,   369,   370,   126,   127,   374,
     382,   145,   372,   146,    88,    89,    90,    91,    92,    93,
      94,    95,    96,   373,   423,   409,   442,   147,   448,   384,
     408,   411,   393,   148,   128,   129,   446,   455,   459,   412,
     468,   426,   131,   132,   427,  -105,   471,   472,   413,   416,
     417,   437,   133,   134,   135,   447,   263,   475,   457,   136,
     481,   149,   150,   482,   137,   490,   497,   485,   498,   501,
     503,   504,   505,   138,   508,   509,   511,   513,   139,   140,
     141,   142,   143,   144,   514,   297,   126,   127,   518,   522,
     145,   529,   146,   548,   534,   531,   546,   547,   550,   431,
     551,   469,   586,   587,   588,   589,   147,   590,   595,   597,
     598,   602,   148,   128,   129,   616,   624,   625,   626,   627,
     130,   131,   132,   628,   629,   630,   639,   651,   642,   631,
     632,   133,   134,   135,   661,   663,   652,   670,   136,   678,
     149,   150,   641,   137,  -121,   649,   656,   688,   657,   659,
     660,   665,   138,   666,   689,   319,   668,   139,   140,   141,
     142,   143,   144,   525,   669,   126,   127,   206,   676,   145,
     634,   146,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   147,   558,   646,   596,   619,
     654,   148,   128,   129,   599,   677,   484,   559,   655,   130,
     131,   132,   507,   289,   643,   524,   176,   434,   519,     0,
     133,   134,   135,     0,   560,     0,     0,   136,     0,   149,
     150,     0,   137,   561,   562,   563,   564,   565,     0,     0,
       0,   138,   316,   566,   567,     0,   139,   140,   141,   142,
     143,   144,     0,     0,     0,     0,     0,     0,   145,     0,
     146,     0,     0,    20,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   147,     0,     0,     0,     0,   568,
     148,   569,     0,     0,     0,   570,     0,     0,     0,    42,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,    21,    22,     0,   149,   150,
       0,     0,     0,     0,     0,    23,    24,    25,    26,   571,
      27,    28,   572,     0,   573,     0,   574,     0,    20,    29,
      30,    31,    32,     0,     0,     0,     0,     0,     0,    33,
      34,    35,    36,    37,    38,     0,     0,     0,     0,    39,
      40,    41,     0,     0,     0,     0,    42,     0,     0,     0,
     383,     0,     0,     0,     0,     0,     0,    43,     0,     0,
      21,    22,     0,     0,     0,     0,     0,     0,    44,     0,
      23,    24,    25,    26,  -299,    27,    28,     0,     0,     0,
       0,    45,     0,     0,    29,    30,    31,    32,     0,     0,
       0,     0,     0,     0,    33,    34,    35,    36,    37,    38,
       0,     0,     0,     0,    39,    40,    41,     0,     0,     0,
       0,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    44,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   235,    45,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   235,     0,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   235,   322,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   235,   404,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   235,   407,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   235,   410,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   235,   418,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,     0,   235,
     491,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   235,
     492,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   235,
     493,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   235,
     494,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   235,
     495,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,     0,     0,     0,   235,   496,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   235,   520,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,     0,   537,     0,     0,
      58,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   544,     0,     0,
       0,     0,    58,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    59,     0,     0,   545,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   401,     0,    59,    60,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   549,     0,     0,     0,     0,    60,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      61,     0,     0,     0,   557,    62,    63,    64,    65,    66,
     -41,    67,    68,    69,     0,    70,    71,    72,    73,    74,
       0,     0,    61,     0,    75,    76,    77,    62,    63,    64,
      65,    66,     0,    67,    68,    69,     0,    70,    71,    72,
      73,    74,     0,     0,     0,     0,    75,    76,    77,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   235,   254,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   235,   399,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   235,   405,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,     0,   406,   469,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   414,   235,   420,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   235,
     415,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,     0,
     419,   235,   474,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253
};

static const short yycheck[] =
{
      92,   194,   195,    18,    62,    97,   180,   172,   173,    60,
     202,     4,     4,     4,    72,     4,   510,     4,    53,     4,
       4,    79,     4,   196,   119,     4,     4,   122,     4,     5,
      15,    15,   291,   655,   428,    10,   574,     4,     3,     4,
       4,     4,     5,   555,   664,    10,     4,    32,    32,     4,
       4,   545,   674,   131,   132,   106,   107,   595,   109,   110,
     680,    15,    10,    10,   115,    30,    31,    53,   580,    16,
     128,   129,    37,    38,    39,    54,   121,     4,    32,    53,
     618,     4,     5,    48,    49,    50,   121,   132,    15,     4,
      55,   149,   150,    10,   152,    60,    54,    51,    52,    54,
      53,    54,   160,   119,    69,    32,   122,     4,     5,    74,
      75,    76,    77,    78,    79,     4,     5,    95,     4,     5,
     178,    86,    98,    88,    51,    52,   520,    53,   387,   302,
     642,     4,     5,    37,   131,    98,   133,   102,   131,    93,
     133,   133,   131,   108,   136,   136,   133,   205,   133,   133,
     208,   209,   131,   211,   212,   131,   131,   133,   216,   217,
     218,   219,   220,   557,   131,   223,   131,   131,   121,   227,
     228,   136,   137,   231,   232,    98,   130,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,    37,
     392,    98,    53,   130,   262,   263,   371,   134,   131,    98,
     133,     4,    98,     4,   131,     4,    30,    31,    32,    33,
      34,   313,    15,   125,    15,    98,    15,    64,    65,    66,
      67,    68,   119,    37,   131,   122,   133,   124,   121,    32,
      37,    32,   131,    32,   133,   131,     4,   133,   299,   132,
     301,     3,     4,   445,   115,   116,   117,    37,    51,    52,
      51,    52,     4,   131,   131,   126,   133,   135,    15,    37,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    32,    33,
      34,    37,    37,   486,   459,   460,   133,   489,   131,   119,
     133,   316,   122,   123,   124,   128,   129,     3,     4,    37,
      37,    39,    54,    28,    29,    30,    31,    32,    33,    34,
     378,   379,   380,   381,     4,   131,    68,   133,    37,    37,
      37,    73,    37,    37,    30,    31,     4,   130,     4,   130,
       4,    37,    38,    39,   402,     4,     4,   405,   406,    91,
     408,   525,    48,    49,    50,    97,   414,   415,     4,    55,
       4,     4,   420,     3,    60,     4,   108,     4,    64,    65,
      66,    67,    68,    69,    54,     4,     4,    54,    74,    75,
      76,    77,    78,    79,   131,     4,   133,   104,    68,    16,
      86,    16,    88,    73,   132,    37,    15,     6,     7,     8,
       9,    10,    11,    12,    13,    14,   102,     4,     4,     4,
     468,    91,   108,    32,     4,     4,     4,    97,     4,   586,
     587,    37,   514,   590,    37,    37,    37,    53,   108,    37,
      37,    37,    51,    52,    37,    37,    37,   133,     3,     4,
     136,   137,   131,    37,    37,    10,   504,   131,   615,   616,
      37,   509,    37,   511,   546,    37,    37,   624,   625,    37,
     627,    37,   629,   630,   522,    30,    31,   132,   635,   131,
     131,    54,    37,    38,    39,    37,    53,   133,   133,   646,
     133,   133,   133,    48,    49,    50,   679,    10,   681,   547,
      55,   658,   685,     4,     4,    60,     4,   133,   133,   133,
       4,     4,     4,     4,    69,     4,   598,     4,     4,    74,
      75,    76,    77,    78,    79,     4,     4,     3,     4,     4,
       4,    86,   132,    88,     6,     7,     8,     9,    10,    11,
      12,    13,    14,   132,    53,   133,    16,   102,     4,    37,
     131,   133,    37,   108,    30,    31,    37,     4,    16,   133,
      37,    37,    38,    39,    40,    37,    16,    95,   133,   133,
     133,   131,    48,    49,    50,   133,   131,    85,   132,    55,
       4,   136,   137,     4,    60,   133,   133,    86,    54,   133,
      16,    37,    96,    69,    53,    37,    37,   133,    74,    75,
      76,    77,    78,    79,    10,   131,     3,     4,   132,    37,
      86,   132,    88,    16,    54,    88,    10,    37,    53,    16,
      53,    37,    37,    37,    37,    37,   102,    37,    37,    54,
      37,    16,   108,    30,    31,    37,    37,    37,   133,    37,
      37,    38,    39,   133,    37,    37,    25,     4,    53,   133,
     133,    48,    49,    50,    25,    54,    95,     4,    55,     4,
     136,   137,   133,    60,   133,   133,   133,     0,   133,   133,
     133,   133,    69,   133,     0,   210,   133,    74,    75,    76,
      77,    78,    79,   508,   133,     3,     4,   118,   133,    86,
     613,    88,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,   102,     4,   627,   580,   595,
     642,   108,    30,    31,   583,   671,   440,    15,   643,    37,
      38,    39,   476,   184,   623,   507,    86,   380,   500,    -1,
      48,    49,    50,    -1,    32,    -1,    -1,    55,    -1,   136,
     137,    -1,    60,    41,    42,    43,    44,    45,    -1,    -1,
      -1,    69,   207,    51,    52,    -1,    74,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    -1,    -1,    -1,    86,    -1,
      88,    -1,    -1,     4,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,    87,
     108,    89,    -1,    -1,    -1,    93,    -1,    -1,    -1,    97,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    46,    47,    -1,   136,   137,
      -1,    -1,    -1,    -1,    -1,    56,    57,    58,    59,   127,
      61,    62,   130,    -1,   132,    -1,   134,    -1,     4,    70,
      71,    72,    73,    -1,    -1,    -1,    -1,    -1,    -1,    80,
      81,    82,    83,    84,    85,    -1,    -1,    -1,    -1,    90,
      91,    92,    -1,    -1,    -1,    -1,    97,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,
      46,    47,    -1,    -1,    -1,    -1,    -1,    -1,   119,    -1,
      56,    57,    58,    59,   125,    61,    62,    -1,    -1,    -1,
      -1,   132,    -1,    -1,    70,    71,    72,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    81,    82,    83,    84,    85,
      -1,    -1,    -1,    -1,    90,    91,    92,    -1,    -1,    -1,
      -1,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   119,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   132,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,    -1,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,    -1,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,    -1,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,    -1,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    15,   133,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    15,   133,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    15,   133,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    15,   133,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    15,   133,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    -1,    15,
     133,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     133,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     133,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     133,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     133,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    15,   133,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    15,   133,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,   133,    -1,    -1,
       4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,    -1,
      -1,    -1,     4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    38,    -1,    -1,   133,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    38,    61,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      94,    -1,    -1,    -1,   133,    99,   100,   101,   102,   103,
     104,   105,   106,   107,    -1,   109,   110,   111,   112,   113,
      -1,    -1,    94,    -1,   118,   119,   120,    99,   100,   101,
     102,   103,    -1,   105,   106,   107,    -1,   109,   110,   111,
     112,   113,    -1,    -1,    -1,    -1,   118,   119,   120,    15,
      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    15,   131,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   131,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   131,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,   131,    37,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   131,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,
     131,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
     131,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   include <string.h>
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 316 "/usr/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 6:
#line 175 "ldgram.y"
{ ldlex_defsym(); }
    break;
case 7:
#line 177 "ldgram.y"
{
		  ldlex_popstate();
		  lang_add_assignment(exp_assop(yyvsp[-1].token,yyvsp[-2].name,yyvsp[0].etree));
		}
    break;
case 8:
#line 185 "ldgram.y"
{
		  ldlex_mri_script ();
		  PUSH_ERROR (_("MRI style script"));
		}
    break;
case 9:
#line 190 "ldgram.y"
{
		  ldlex_popstate ();
		  mri_draw_tree ();
		  POP_ERROR ();
		}
    break;
case 14:
#line 205 "ldgram.y"
{
			einfo(_("%P%F: unrecognised keyword in MRI style script '%s'\n"),yyvsp[0].name);
			}
    break;
case 15:
#line 208 "ldgram.y"
{
			config.map_filename = "-";
			}
    break;
case 18:
#line 214 "ldgram.y"
{ mri_public(yyvsp[-2].name, yyvsp[0].etree); }
    break;
case 19:
#line 216 "ldgram.y"
{ mri_public(yyvsp[-2].name, yyvsp[0].etree); }
    break;
case 20:
#line 218 "ldgram.y"
{ mri_public(yyvsp[-1].name, yyvsp[0].etree); }
    break;
case 21:
#line 220 "ldgram.y"
{ mri_format(yyvsp[0].name); }
    break;
case 22:
#line 222 "ldgram.y"
{ mri_output_section(yyvsp[-2].name, yyvsp[0].etree);}
    break;
case 23:
#line 224 "ldgram.y"
{ mri_output_section(yyvsp[-1].name, yyvsp[0].etree);}
    break;
case 24:
#line 226 "ldgram.y"
{ mri_output_section(yyvsp[-2].name, yyvsp[0].etree);}
    break;
case 25:
#line 228 "ldgram.y"
{ mri_align(yyvsp[-2].name,yyvsp[0].etree); }
    break;
case 26:
#line 230 "ldgram.y"
{ mri_align(yyvsp[-2].name,yyvsp[0].etree); }
    break;
case 27:
#line 232 "ldgram.y"
{ mri_alignmod(yyvsp[-2].name,yyvsp[0].etree); }
    break;
case 28:
#line 234 "ldgram.y"
{ mri_alignmod(yyvsp[-2].name,yyvsp[0].etree); }
    break;
case 31:
#line 238 "ldgram.y"
{ mri_name(yyvsp[0].name); }
    break;
case 32:
#line 240 "ldgram.y"
{ mri_alias(yyvsp[-2].name,yyvsp[0].name,0);}
    break;
case 33:
#line 242 "ldgram.y"
{ mri_alias (yyvsp[-2].name, 0, (int) yyvsp[0].bigint.integer); }
    break;
case 34:
#line 244 "ldgram.y"
{ mri_base(yyvsp[0].etree); }
    break;
case 35:
#line 246 "ldgram.y"
{ mri_truncate ((unsigned int) yyvsp[0].bigint.integer); }
    break;
case 38:
#line 250 "ldgram.y"
{ ldlex_script (); ldfile_open_command_file(yyvsp[0].name); }
    break;
case 39:
#line 252 "ldgram.y"
{ ldlex_popstate (); }
    break;
case 40:
#line 254 "ldgram.y"
{ lang_add_entry (yyvsp[0].name, FALSE); }
    break;
case 42:
#line 259 "ldgram.y"
{ mri_order(yyvsp[0].name); }
    break;
case 43:
#line 260 "ldgram.y"
{ mri_order(yyvsp[0].name); }
    break;
case 45:
#line 266 "ldgram.y"
{ mri_load(yyvsp[0].name); }
    break;
case 46:
#line 267 "ldgram.y"
{ mri_load(yyvsp[0].name); }
    break;
case 47:
#line 272 "ldgram.y"
{ mri_only_load(yyvsp[0].name); }
    break;
case 48:
#line 274 "ldgram.y"
{ mri_only_load(yyvsp[0].name); }
    break;
case 49:
#line 278 "ldgram.y"
{ yyval.name = NULL; }
    break;
case 52:
#line 285 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); }
    break;
case 53:
#line 287 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); }
    break;
case 54:
#line 289 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); }
    break;
case 55:
#line 293 "ldgram.y"
{
	 ldlex_both();
	}
    break;
case 56:
#line 297 "ldgram.y"
{
	ldlex_popstate();
	}
    break;
case 69:
#line 322 "ldgram.y"
{ lang_add_target(yyvsp[-1].name); }
    break;
case 70:
#line 324 "ldgram.y"
{ ldfile_add_library_path (yyvsp[-1].name, FALSE); }
    break;
case 71:
#line 326 "ldgram.y"
{ lang_add_output(yyvsp[-1].name, 1); }
    break;
case 72:
#line 328 "ldgram.y"
{ lang_add_output_format (yyvsp[-1].name, (char *) NULL,
					    (char *) NULL, 1); }
    break;
case 73:
#line 331 "ldgram.y"
{ lang_add_output_format (yyvsp[-5].name, yyvsp[-3].name, yyvsp[-1].name, 1); }
    break;
case 74:
#line 333 "ldgram.y"
{ ldfile_set_output_arch (yyvsp[-1].name, bfd_arch_unknown); }
    break;
case 75:
#line 335 "ldgram.y"
{ command_line.force_common_definition = TRUE ; }
    break;
case 76:
#line 337 "ldgram.y"
{ command_line.inhibit_common_definition = TRUE ; }
    break;
case 78:
#line 340 "ldgram.y"
{ lang_enter_group (); }
    break;
case 79:
#line 342 "ldgram.y"
{ lang_leave_group (); }
    break;
case 80:
#line 344 "ldgram.y"
{ lang_add_map(yyvsp[-1].name); }
    break;
case 81:
#line 346 "ldgram.y"
{ ldlex_script (); ldfile_open_command_file(yyvsp[0].name); }
    break;
case 82:
#line 348 "ldgram.y"
{ ldlex_popstate (); }
    break;
case 83:
#line 350 "ldgram.y"
{
		  lang_add_nocrossref (yyvsp[-1].nocrossref);
		}
    break;
case 85:
#line 358 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;
case 86:
#line 361 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;
case 87:
#line 364 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;
case 88:
#line 367 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;
case 89:
#line 370 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;
case 90:
#line 373 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;
case 91:
#line 376 "ldgram.y"
{ yyval.integer = as_needed; as_needed = TRUE; }
    break;
case 92:
#line 378 "ldgram.y"
{ as_needed = yyvsp[-2].integer; }
    break;
case 93:
#line 380 "ldgram.y"
{ yyval.integer = as_needed; as_needed = TRUE; }
    break;
case 94:
#line 382 "ldgram.y"
{ as_needed = yyvsp[-2].integer; }
    break;
case 95:
#line 384 "ldgram.y"
{ yyval.integer = as_needed; as_needed = TRUE; }
    break;
case 96:
#line 386 "ldgram.y"
{ as_needed = yyvsp[-2].integer; }
    break;
case 101:
#line 401 "ldgram.y"
{ lang_add_entry (yyvsp[-1].name, FALSE); }
    break;
case 103:
#line 403 "ldgram.y"
{ldlex_expression ();}
    break;
case 104:
#line 404 "ldgram.y"
{ ldlex_popstate ();
		  lang_add_assignment (exp_assert (yyvsp[-3].etree, yyvsp[-1].name)); }
    break;
case 105:
#line 412 "ldgram.y"
{
			  yyval.cname = yyvsp[0].name;
			}
    break;
case 106:
#line 416 "ldgram.y"
{
			  yyval.cname = "*";
			}
    break;
case 107:
#line 420 "ldgram.y"
{
			  yyval.cname = "?";
			}
    break;
case 108:
#line 427 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[0].cname;
			  yyval.wildcard.sorted = none;
			  yyval.wildcard.exclude_name_list = NULL;
			}
    break;
case 109:
#line 433 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[0].cname;
			  yyval.wildcard.sorted = none;
			  yyval.wildcard.exclude_name_list = yyvsp[-2].name_list;
			}
    break;
case 110:
#line 439 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-1].cname;
			  yyval.wildcard.sorted = by_name;
			  yyval.wildcard.exclude_name_list = NULL;
			}
    break;
case 111:
#line 445 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-1].cname;
			  yyval.wildcard.sorted = by_alignment;
			  yyval.wildcard.exclude_name_list = NULL;
			}
    break;
case 112:
#line 451 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-2].cname;
			  yyval.wildcard.sorted = by_name_alignment;
			  yyval.wildcard.exclude_name_list = NULL;
			}
    break;
case 113:
#line 457 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-2].cname;
			  yyval.wildcard.sorted = by_name;
			  yyval.wildcard.exclude_name_list = NULL;
			}
    break;
case 114:
#line 463 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-2].cname;
			  yyval.wildcard.sorted = by_alignment_name;
			  yyval.wildcard.exclude_name_list = NULL;
			}
    break;
case 115:
#line 469 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-2].cname;
			  yyval.wildcard.sorted = by_alignment;
			  yyval.wildcard.exclude_name_list = NULL;
			}
    break;
case 116:
#line 475 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-1].cname;
			  yyval.wildcard.sorted = by_name;
			  yyval.wildcard.exclude_name_list = yyvsp[-3].name_list;
			}
    break;
case 117:
#line 484 "ldgram.y"
{
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = yyvsp[0].cname;
			  tmp->next = yyvsp[-1].name_list;
			  yyval.name_list = tmp;
			}
    break;
case 118:
#line 493 "ldgram.y"
{
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = yyvsp[0].cname;
			  tmp->next = NULL;
			  yyval.name_list = tmp;
			}
    break;
case 119:
#line 504 "ldgram.y"
{
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = yyvsp[-2].wildcard_list;
			  tmp->spec = yyvsp[0].wildcard;
			  yyval.wildcard_list = tmp;
			}
    break;
case 120:
#line 513 "ldgram.y"
{
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = NULL;
			  tmp->spec = yyvsp[0].wildcard;
			  yyval.wildcard_list = tmp;
			}
    break;
case 121:
#line 524 "ldgram.y"
{
			  struct wildcard_spec tmp;
			  tmp.name = yyvsp[0].name;
			  tmp.exclude_name_list = NULL;
			  tmp.sorted = none;
			  lang_add_wild (&tmp, NULL, ldgram_had_keep);
			}
    break;
case 122:
#line 532 "ldgram.y"
{
			  lang_add_wild (NULL, yyvsp[-1].wildcard_list, ldgram_had_keep);
			}
    break;
case 123:
#line 536 "ldgram.y"
{
			  lang_add_wild (&yyvsp[-3].wildcard, yyvsp[-1].wildcard_list, ldgram_had_keep);
			}
    break;
case 125:
#line 544 "ldgram.y"
{ ldgram_had_keep = TRUE; }
    break;
case 126:
#line 546 "ldgram.y"
{ ldgram_had_keep = FALSE; }
    break;
case 128:
#line 552 "ldgram.y"
{
 		lang_add_attribute(lang_object_symbols_statement_enum);
	      	}
    break;
case 130:
#line 557 "ldgram.y"
{

		  lang_add_attribute(lang_constructors_statement_enum);
		}
    break;
case 131:
#line 562 "ldgram.y"
{
		  constructors_sorted = TRUE;
		  lang_add_attribute (lang_constructors_statement_enum);
		}
    break;
case 133:
#line 568 "ldgram.y"
{
			  lang_add_data ((int) yyvsp[-3].integer, yyvsp[-1].etree);
			}
    break;
case 134:
#line 573 "ldgram.y"
{
			  lang_add_fill (yyvsp[-1].fill);
			}
    break;
case 139:
#line 590 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 140:
#line 592 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 141:
#line 594 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 142:
#line 596 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 143:
#line 598 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 144:
#line 603 "ldgram.y"
{
		  yyval.fill = exp_get_fill (yyvsp[0].etree,
				     0,
				     "fill value",
				     lang_first_phase_enum);
		}
    break;
case 145:
#line 613 "ldgram.y"
{ yyval.fill = yyvsp[0].fill; }
    break;
case 146:
#line 614 "ldgram.y"
{ yyval.fill = (fill_type *) 0; }
    break;
case 147:
#line 619 "ldgram.y"
{ yyval.token = '+'; }
    break;
case 148:
#line 621 "ldgram.y"
{ yyval.token = '-'; }
    break;
case 149:
#line 623 "ldgram.y"
{ yyval.token = '*'; }
    break;
case 150:
#line 625 "ldgram.y"
{ yyval.token = '/'; }
    break;
case 151:
#line 627 "ldgram.y"
{ yyval.token = LSHIFT; }
    break;
case 152:
#line 629 "ldgram.y"
{ yyval.token = RSHIFT; }
    break;
case 153:
#line 631 "ldgram.y"
{ yyval.token = '&'; }
    break;
case 154:
#line 633 "ldgram.y"
{ yyval.token = '|'; }
    break;
case 157:
#line 643 "ldgram.y"
{
		  lang_add_assignment (exp_assop (yyvsp[-1].token, yyvsp[-2].name, yyvsp[0].etree));
		}
    break;
case 158:
#line 647 "ldgram.y"
{
		  lang_add_assignment (exp_assop ('=', yyvsp[-2].name,
						  exp_binop (yyvsp[-1].token,
							     exp_nameop (NAME,
									 yyvsp[-2].name),
							     yyvsp[0].etree)));
		}
    break;
case 159:
#line 655 "ldgram.y"
{
		  lang_add_assignment (exp_provide (yyvsp[-3].name, yyvsp[-1].etree));
		}
    break;
case 166:
#line 677 "ldgram.y"
{ region = lang_memory_region_lookup (yyvsp[0].name, TRUE); }
    break;
case 167:
#line 680 "ldgram.y"
{}
    break;
case 168:
#line 685 "ldgram.y"
{ region->current =
		 region->origin =
		 exp_get_vma(yyvsp[0].etree, 0L,"origin", lang_first_phase_enum);
}
    break;
case 169:
#line 693 "ldgram.y"
{ region->length = exp_get_vma(yyvsp[0].etree,
					       ~((bfd_vma)0),
					       "length",
					       lang_first_phase_enum);
		}
    break;
case 170:
#line 702 "ldgram.y"
{ /* dummy action to avoid bison 1.25 error message */ }
    break;
case 174:
#line 713 "ldgram.y"
{ lang_set_flags (region, yyvsp[0].name, 0); }
    break;
case 175:
#line 715 "ldgram.y"
{ lang_set_flags (region, yyvsp[0].name, 1); }
    break;
case 176:
#line 720 "ldgram.y"
{ lang_startup(yyvsp[-1].name); }
    break;
case 178:
#line 726 "ldgram.y"
{ ldemul_hll((char *)NULL); }
    break;
case 179:
#line 731 "ldgram.y"
{ ldemul_hll(yyvsp[0].name); }
    break;
case 180:
#line 733 "ldgram.y"
{ ldemul_hll(yyvsp[0].name); }
    break;
case 182:
#line 741 "ldgram.y"
{ ldemul_syslib(yyvsp[0].name); }
    break;
case 184:
#line 747 "ldgram.y"
{ lang_float(TRUE); }
    break;
case 185:
#line 749 "ldgram.y"
{ lang_float(FALSE); }
    break;
case 186:
#line 754 "ldgram.y"
{
		  yyval.nocrossref = NULL;
		}
    break;
case 187:
#line 758 "ldgram.y"
{
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = yyvsp[-1].name;
		  n->next = yyvsp[0].nocrossref;
		  yyval.nocrossref = n;
		}
    break;
case 188:
#line 767 "ldgram.y"
{
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = yyvsp[-2].name;
		  n->next = yyvsp[0].nocrossref;
		  yyval.nocrossref = n;
		}
    break;
case 189:
#line 777 "ldgram.y"
{ ldlex_expression (); }
    break;
case 190:
#line 779 "ldgram.y"
{ ldlex_popstate (); yyval.etree=yyvsp[0].etree;}
    break;
case 191:
#line 784 "ldgram.y"
{ yyval.etree = exp_unop ('-', yyvsp[0].etree); }
    break;
case 192:
#line 786 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
case 193:
#line 788 "ldgram.y"
{ yyval.etree = exp_unop ((int) yyvsp[-3].integer,yyvsp[-1].etree); }
    break;
case 194:
#line 790 "ldgram.y"
{ yyval.etree = exp_unop ('!', yyvsp[0].etree); }
    break;
case 195:
#line 792 "ldgram.y"
{ yyval.etree = yyvsp[0].etree; }
    break;
case 196:
#line 794 "ldgram.y"
{ yyval.etree = exp_unop ('~', yyvsp[0].etree);}
    break;
case 197:
#line 797 "ldgram.y"
{ yyval.etree = exp_binop ('*', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 198:
#line 799 "ldgram.y"
{ yyval.etree = exp_binop ('/', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 199:
#line 801 "ldgram.y"
{ yyval.etree = exp_binop ('%', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 200:
#line 803 "ldgram.y"
{ yyval.etree = exp_binop ('+', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 201:
#line 805 "ldgram.y"
{ yyval.etree = exp_binop ('-' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 202:
#line 807 "ldgram.y"
{ yyval.etree = exp_binop (LSHIFT , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 203:
#line 809 "ldgram.y"
{ yyval.etree = exp_binop (RSHIFT , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 204:
#line 811 "ldgram.y"
{ yyval.etree = exp_binop (EQ , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 205:
#line 813 "ldgram.y"
{ yyval.etree = exp_binop (NE , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 206:
#line 815 "ldgram.y"
{ yyval.etree = exp_binop (LE , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 207:
#line 817 "ldgram.y"
{ yyval.etree = exp_binop (GE , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 208:
#line 819 "ldgram.y"
{ yyval.etree = exp_binop ('<' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 209:
#line 821 "ldgram.y"
{ yyval.etree = exp_binop ('>' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 210:
#line 823 "ldgram.y"
{ yyval.etree = exp_binop ('&' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 211:
#line 825 "ldgram.y"
{ yyval.etree = exp_binop ('^' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 212:
#line 827 "ldgram.y"
{ yyval.etree = exp_binop ('|' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 213:
#line 829 "ldgram.y"
{ yyval.etree = exp_trinop ('?' , yyvsp[-4].etree, yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 214:
#line 831 "ldgram.y"
{ yyval.etree = exp_binop (ANDAND , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 215:
#line 833 "ldgram.y"
{ yyval.etree = exp_binop (OROR , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 216:
#line 835 "ldgram.y"
{ yyval.etree = exp_nameop (DEFINED, yyvsp[-1].name); }
    break;
case 217:
#line 837 "ldgram.y"
{ yyval.etree = exp_bigintop (yyvsp[0].bigint.integer, yyvsp[0].bigint.str); }
    break;
case 218:
#line 839 "ldgram.y"
{ yyval.etree = exp_nameop (SIZEOF_HEADERS,0); }
    break;
case 219:
#line 842 "ldgram.y"
{ yyval.etree = exp_nameop (SIZEOF,yyvsp[-1].name); }
    break;
case 220:
#line 844 "ldgram.y"
{ yyval.etree = exp_nameop (ADDR,yyvsp[-1].name); }
    break;
case 221:
#line 846 "ldgram.y"
{ yyval.etree = exp_nameop (LOADADDR,yyvsp[-1].name); }
    break;
case 222:
#line 848 "ldgram.y"
{ yyval.etree = exp_unop (ABSOLUTE, yyvsp[-1].etree); }
    break;
case 223:
#line 850 "ldgram.y"
{ yyval.etree = exp_unop (ALIGN_K,yyvsp[-1].etree); }
    break;
case 224:
#line 852 "ldgram.y"
{ yyval.etree = exp_binop (ALIGN_K,yyvsp[-3].etree,yyvsp[-1].etree); }
    break;
case 225:
#line 854 "ldgram.y"
{ yyval.etree = exp_binop (DATA_SEGMENT_ALIGN, yyvsp[-3].etree, yyvsp[-1].etree); }
    break;
case 226:
#line 856 "ldgram.y"
{ yyval.etree = exp_binop (DATA_SEGMENT_RELRO_END, yyvsp[-1].etree, yyvsp[-3].etree); }
    break;
case 227:
#line 858 "ldgram.y"
{ yyval.etree = exp_unop (DATA_SEGMENT_END, yyvsp[-1].etree); }
    break;
case 228:
#line 860 "ldgram.y"
{ /* The operands to the expression node are
			     placed in the opposite order from the way
			     in which they appear in the script as
			     that allows us to reuse more code in
			     fold_binary.  */
			  yyval.etree = exp_binop (SEGMENT_START,
					  yyvsp[-1].etree,
					  exp_nameop (NAME, yyvsp[-3].name)); }
    break;
case 229:
#line 869 "ldgram.y"
{ yyval.etree = exp_unop (ALIGN_K,yyvsp[-1].etree); }
    break;
case 230:
#line 871 "ldgram.y"
{ yyval.etree = exp_nameop (NAME,yyvsp[0].name); }
    break;
case 231:
#line 873 "ldgram.y"
{ yyval.etree = exp_binop (MAX_K, yyvsp[-3].etree, yyvsp[-1].etree ); }
    break;
case 232:
#line 875 "ldgram.y"
{ yyval.etree = exp_binop (MIN_K, yyvsp[-3].etree, yyvsp[-1].etree ); }
    break;
case 233:
#line 877 "ldgram.y"
{ yyval.etree = exp_assert (yyvsp[-3].etree, yyvsp[-1].name); }
    break;
case 234:
#line 879 "ldgram.y"
{ yyval.etree = exp_nameop (ORIGIN, yyvsp[-1].name); }
    break;
case 235:
#line 881 "ldgram.y"
{ yyval.etree = exp_nameop (LENGTH, yyvsp[-1].name); }
    break;
case 236:
#line 886 "ldgram.y"
{ yyval.name = yyvsp[0].name; }
    break;
case 237:
#line 887 "ldgram.y"
{ yyval.name = 0; }
    break;
case 238:
#line 891 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
case 239:
#line 892 "ldgram.y"
{ yyval.etree = 0; }
    break;
case 240:
#line 896 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
case 241:
#line 897 "ldgram.y"
{ yyval.etree = 0; }
    break;
case 242:
#line 901 "ldgram.y"
{ yyval.token = ONLY_IF_RO; }
    break;
case 243:
#line 902 "ldgram.y"
{ yyval.token = ONLY_IF_RW; }
    break;
case 244:
#line 903 "ldgram.y"
{ yyval.token = 0; }
    break;
case 245:
#line 906 "ldgram.y"
{ ldlex_expression(); }
    break;
case 246:
#line 909 "ldgram.y"
{ ldlex_popstate (); ldlex_script (); }
    break;
case 247:
#line 912 "ldgram.y"
{
			  lang_enter_output_section_statement(yyvsp[-7].name, yyvsp[-5].etree,
							      sectype,
							      0, yyvsp[-3].etree, yyvsp[-4].etree, yyvsp[-1].token);
			}
    break;
case 248:
#line 918 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); }
    break;
case 249:
#line 920 "ldgram.y"
{
		  ldlex_popstate ();
		  lang_leave_output_section_statement (yyvsp[0].fill, yyvsp[-3].name, yyvsp[-1].section_phdr, yyvsp[-2].name);
		}
    break;
case 250:
#line 925 "ldgram.y"
{}
    break;
case 251:
#line 927 "ldgram.y"
{ ldlex_expression (); }
    break;
case 252:
#line 929 "ldgram.y"
{ ldlex_popstate (); ldlex_script (); }
    break;
case 253:
#line 931 "ldgram.y"
{
			  lang_enter_overlay (yyvsp[-5].etree, yyvsp[-2].etree);
			}
    break;
case 254:
#line 936 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); }
    break;
case 255:
#line 938 "ldgram.y"
{
			  ldlex_popstate ();
			  lang_leave_overlay (yyvsp[-11].etree, (int) yyvsp[-12].integer,
					      yyvsp[0].fill, yyvsp[-3].name, yyvsp[-1].section_phdr, yyvsp[-2].name);
			}
    break;
case 257:
#line 948 "ldgram.y"
{ ldlex_expression (); }
    break;
case 258:
#line 950 "ldgram.y"
{
		  ldlex_popstate ();
		  lang_add_assignment (exp_assop ('=', ".", yyvsp[0].etree));
		}
    break;
case 260:
#line 958 "ldgram.y"
{ sectype = noload_section; }
    break;
case 261:
#line 959 "ldgram.y"
{ sectype = dsect_section; }
    break;
case 262:
#line 960 "ldgram.y"
{ sectype = copy_section; }
    break;
case 263:
#line 961 "ldgram.y"
{ sectype = info_section; }
    break;
case 264:
#line 962 "ldgram.y"
{ sectype = overlay_section; }
    break;
case 266:
#line 967 "ldgram.y"
{ sectype = normal_section; }
    break;
case 267:
#line 968 "ldgram.y"
{ sectype = normal_section; }
    break;
case 268:
#line 972 "ldgram.y"
{ yyval.etree = yyvsp[-2].etree; }
    break;
case 269:
#line 973 "ldgram.y"
{ yyval.etree = (etree_type *)NULL;  }
    break;
case 270:
#line 978 "ldgram.y"
{ yyval.etree = yyvsp[-3].etree; }
    break;
case 271:
#line 980 "ldgram.y"
{ yyval.etree = yyvsp[-7].etree; }
    break;
case 272:
#line 984 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
case 273:
#line 985 "ldgram.y"
{ yyval.etree = (etree_type *) NULL;  }
    break;
case 274:
#line 990 "ldgram.y"
{ yyval.integer = 0; }
    break;
case 275:
#line 992 "ldgram.y"
{ yyval.integer = 1; }
    break;
case 276:
#line 997 "ldgram.y"
{ yyval.name = yyvsp[0].name; }
    break;
case 277:
#line 998 "ldgram.y"
{ yyval.name = DEFAULT_MEMORY_REGION; }
    break;
case 278:
#line 1003 "ldgram.y"
{
		  yyval.section_phdr = NULL;
		}
    break;
case 279:
#line 1007 "ldgram.y"
{
		  struct lang_output_section_phdr_list *n;

		  n = ((struct lang_output_section_phdr_list *)
		       xmalloc (sizeof *n));
		  n->name = yyvsp[0].name;
		  n->used = FALSE;
		  n->next = yyvsp[-2].section_phdr;
		  yyval.section_phdr = n;
		}
    break;
case 281:
#line 1023 "ldgram.y"
{
			  ldlex_script ();
			  lang_enter_overlay_section (yyvsp[0].name);
			}
    break;
case 282:
#line 1028 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); }
    break;
case 283:
#line 1030 "ldgram.y"
{
			  ldlex_popstate ();
			  lang_leave_overlay_section (yyvsp[0].fill, yyvsp[-1].section_phdr);
			}
    break;
case 288:
#line 1047 "ldgram.y"
{ ldlex_expression (); }
    break;
case 289:
#line 1048 "ldgram.y"
{ ldlex_popstate (); }
    break;
case 290:
#line 1050 "ldgram.y"
{
		  lang_new_phdr (yyvsp[-5].name, yyvsp[-3].etree, yyvsp[-2].phdr.filehdr, yyvsp[-2].phdr.phdrs, yyvsp[-2].phdr.at,
				 yyvsp[-2].phdr.flags);
		}
    break;
case 291:
#line 1058 "ldgram.y"
{
		  yyval.etree = yyvsp[0].etree;

		  if (yyvsp[0].etree->type.node_class == etree_name
		      && yyvsp[0].etree->type.node_code == NAME)
		    {
		      const char *s;
		      unsigned int i;
		      static const char * const phdr_types[] =
			{
			  "PT_NULL", "PT_LOAD", "PT_DYNAMIC",
			  "PT_INTERP", "PT_NOTE", "PT_SHLIB",
			  "PT_PHDR", "PT_TLS"
			};

		      s = yyvsp[0].etree->name.name;
		      for (i = 0;
			   i < sizeof phdr_types / sizeof phdr_types[0];
			   i++)
			if (strcmp (s, phdr_types[i]) == 0)
			  {
			    yyval.etree = exp_intop (i);
			    break;
			  }
		      if (i == sizeof phdr_types / sizeof phdr_types[0])
			{
			  if (strcmp (s, "PT_GNU_EH_FRAME") == 0)
			    yyval.etree = exp_intop (0x6474e550);
			  else if (strcmp (s, "PT_GNU_STACK") == 0)
			    yyval.etree = exp_intop (0x6474e551);
			  else
			    {
			      einfo (_("\
%X%P:%S: unknown phdr type `%s' (try integer literal)\n"),
				     s);
			      yyval.etree = exp_intop (0);
			    }
			}
		    }
		}
    break;
case 292:
#line 1102 "ldgram.y"
{
		  memset (&yyval.phdr, 0, sizeof (struct phdr_info));
		}
    break;
case 293:
#line 1106 "ldgram.y"
{
		  yyval.phdr = yyvsp[0].phdr;
		  if (strcmp (yyvsp[-2].name, "FILEHDR") == 0 && yyvsp[-1].etree == NULL)
		    yyval.phdr.filehdr = TRUE;
		  else if (strcmp (yyvsp[-2].name, "PHDRS") == 0 && yyvsp[-1].etree == NULL)
		    yyval.phdr.phdrs = TRUE;
		  else if (strcmp (yyvsp[-2].name, "FLAGS") == 0 && yyvsp[-1].etree != NULL)
		    yyval.phdr.flags = yyvsp[-1].etree;
		  else
		    einfo (_("%X%P:%S: PHDRS syntax error at `%s'\n"), yyvsp[-2].name);
		}
    break;
case 294:
#line 1118 "ldgram.y"
{
		  yyval.phdr = yyvsp[0].phdr;
		  yyval.phdr.at = yyvsp[-2].etree;
		}
    break;
case 295:
#line 1126 "ldgram.y"
{
		  yyval.etree = NULL;
		}
    break;
case 296:
#line 1130 "ldgram.y"
{
		  yyval.etree = yyvsp[-1].etree;
		}
    break;
case 297:
#line 1138 "ldgram.y"
{
		  ldlex_version_file ();
		  PUSH_ERROR (_("VERSION script"));
		}
    break;
case 298:
#line 1143 "ldgram.y"
{
		  ldlex_popstate ();
		  POP_ERROR ();
		}
    break;
case 299:
#line 1152 "ldgram.y"
{
		  ldlex_version_script ();
		}
    break;
case 300:
#line 1156 "ldgram.y"
{
		  ldlex_popstate ();
		}
    break;
case 303:
#line 1168 "ldgram.y"
{
		  lang_register_vers_node (NULL, yyvsp[-2].versnode, NULL);
		}
    break;
case 304:
#line 1172 "ldgram.y"
{
		  lang_register_vers_node (yyvsp[-4].name, yyvsp[-2].versnode, NULL);
		}
    break;
case 305:
#line 1176 "ldgram.y"
{
		  lang_register_vers_node (yyvsp[-5].name, yyvsp[-3].versnode, yyvsp[-1].deflist);
		}
    break;
case 306:
#line 1183 "ldgram.y"
{
		  yyval.deflist = lang_add_vers_depend (NULL, yyvsp[0].name);
		}
    break;
case 307:
#line 1187 "ldgram.y"
{
		  yyval.deflist = lang_add_vers_depend (yyvsp[-1].deflist, yyvsp[0].name);
		}
    break;
case 308:
#line 1194 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (NULL, NULL);
		}
    break;
case 309:
#line 1198 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-1].versyms, NULL);
		}
    break;
case 310:
#line 1202 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-1].versyms, NULL);
		}
    break;
case 311:
#line 1206 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (NULL, yyvsp[-1].versyms);
		}
    break;
case 312:
#line 1210 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-5].versyms, yyvsp[-1].versyms);
		}
    break;
case 313:
#line 1217 "ldgram.y"
{
		  yyval.versyms = lang_new_vers_pattern (NULL, yyvsp[0].name, ldgram_vers_current_lang);
		}
    break;
case 314:
#line 1221 "ldgram.y"
{
		  yyval.versyms = lang_new_vers_pattern (yyvsp[-2].versyms, yyvsp[0].name, ldgram_vers_current_lang);
		}
    break;
case 315:
#line 1225 "ldgram.y"
{
			  yyval.name = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = yyvsp[-1].name;
			}
    break;
case 316:
#line 1230 "ldgram.y"
{
			  yyval.versyms = yyvsp[-2].versyms;
			  ldgram_vers_current_lang = yyvsp[-3].name;
			}
    break;
case 317:
#line 1235 "ldgram.y"
{
			  yyval.name = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = yyvsp[-1].name;
			}
    break;
case 318:
#line 1240 "ldgram.y"
{
			  yyval.versyms = yyvsp[-2].versyms;
			  ldgram_vers_current_lang = yyvsp[-3].name;
			}
    break;
}

#line 706 "/usr/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 1251 "ldgram.y"

void
yyerror(arg)
     const char *arg;
{
  if (ldfile_assumed_script)
    einfo (_("%P:%s: file format not recognized; treating as linker script\n"),
	   ldfile_input_filename);
  if (error_index > 0 && error_index < ERROR_NAME_MAX)
     einfo ("%P%F:%S: %s in %s\n", arg, error_names[error_index-1]);
  else
     einfo ("%P%F:%S: %s\n", arg);
}
@


1.1.14.1.4.1
log
@
binutils/

2006-03-16  Carlos O'Donell  <carlos@@codesourcery.com>

	* rcparse.c: Remove generated file.
	* rcparse.h: Likewise.
	* nlmheader.c: Likewise.
	* nlmheader.h: Likewise.
	* arparse.c: Likewise.
	* arparse.h: Likewise.
	* sysinfo.c: Likewise.
	* sysinfo.h: Likewise.
	* defparse.c: Likewise.
	* defparse.h: Likewise.
	* rclex.c: Likewise.
	* syslex.c: Likewise.
	* deflex.c: Likewise.
	* arlex: Likewise.

gas/

2006-03-16  Carlos O'Donell  <carlos@@codesourcery.com>

	* itbl-parse.c: Remove generated file.
	* itbl-parse.h: Likewise.
	* m68k-parse.c: Likewise.
	* itbl-lex.c: Likewise.

ld/

2006-03-16  Carlos O'Donell  <carlos@@codesourcery.com>

	* ldgram.c: Remove generated file.
	* ldgram.h: Likewise.
	* ldlex.c: Likewise.
@
text
@@


1.1.12.1
log
@Generated files for the 2.15 branch.
@
text
@a0 3173
/* A Bison parser, made from ldgram.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	INT	257
# define	NAME	258
# define	LNAME	259
# define	PLUSEQ	260
# define	MINUSEQ	261
# define	MULTEQ	262
# define	DIVEQ	263
# define	LSHIFTEQ	264
# define	RSHIFTEQ	265
# define	ANDEQ	266
# define	OREQ	267
# define	OROR	268
# define	ANDAND	269
# define	EQ	270
# define	NE	271
# define	LE	272
# define	GE	273
# define	LSHIFT	274
# define	RSHIFT	275
# define	UNARY	276
# define	END	277
# define	ALIGN_K	278
# define	BLOCK	279
# define	BIND	280
# define	QUAD	281
# define	SQUAD	282
# define	LONG	283
# define	SHORT	284
# define	BYTE	285
# define	SECTIONS	286
# define	PHDRS	287
# define	SORT	288
# define	DATA_SEGMENT_ALIGN	289
# define	DATA_SEGMENT_END	290
# define	SIZEOF_HEADERS	291
# define	OUTPUT_FORMAT	292
# define	FORCE_COMMON_ALLOCATION	293
# define	OUTPUT_ARCH	294
# define	INHIBIT_COMMON_ALLOCATION	295
# define	INCLUDE	296
# define	MEMORY	297
# define	DEFSYMEND	298
# define	NOLOAD	299
# define	DSECT	300
# define	COPY	301
# define	INFO	302
# define	OVERLAY	303
# define	DEFINED	304
# define	TARGET_K	305
# define	SEARCH_DIR	306
# define	MAP	307
# define	ENTRY	308
# define	NEXT	309
# define	SIZEOF	310
# define	ADDR	311
# define	LOADADDR	312
# define	MAX_K	313
# define	MIN_K	314
# define	STARTUP	315
# define	HLL	316
# define	SYSLIB	317
# define	FLOAT	318
# define	NOFLOAT	319
# define	NOCROSSREFS	320
# define	ORIGIN	321
# define	FILL	322
# define	LENGTH	323
# define	CREATE_OBJECT_SYMBOLS	324
# define	INPUT	325
# define	GROUP	326
# define	OUTPUT	327
# define	CONSTRUCTORS	328
# define	ALIGNMOD	329
# define	AT	330
# define	SUBALIGN	331
# define	PROVIDE	332
# define	CHIP	333
# define	LIST	334
# define	SECT	335
# define	ABSOLUTE	336
# define	LOAD	337
# define	NEWLINE	338
# define	ENDWORD	339
# define	ORDER	340
# define	NAMEWORD	341
# define	ASSERT_K	342
# define	FORMAT	343
# define	PUBLIC	344
# define	BASE	345
# define	ALIAS	346
# define	TRUNCATE	347
# define	REL	348
# define	INPUT_SCRIPT	349
# define	INPUT_MRI_SCRIPT	350
# define	INPUT_DEFSYM	351
# define	CASE	352
# define	EXTERN	353
# define	START	354
# define	VERS_TAG	355
# define	VERS_IDENTIFIER	356
# define	GLOBAL	357
# define	LOCAL	358
# define	VERSIONK	359
# define	INPUT_VERSION_SCRIPT	360
# define	KEEP	361
# define	EXCLUDE_FILE	362

#line 22 "ldgram.y"

/*

 */

#define DONTDECLARE_MALLOC

#include "bfd.h"
#include "sysdep.h"
#include "bfdlink.h"
#include "ld.h"
#include "ldexp.h"
#include "ldver.h"
#include "ldlang.h"
#include "ldfile.h"
#include "ldemul.h"
#include "ldmisc.h"
#include "ldmain.h"
#include "mri.h"
#include "ldctor.h"
#include "ldlex.h"

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

static enum section_type sectype;

lang_memory_region_type *region;

bfd_boolean ldgram_want_filename = TRUE;
FILE *saved_script_handle = NULL;
bfd_boolean force_make_executable = FALSE;

bfd_boolean ldgram_in_script = FALSE;
bfd_boolean ldgram_had_equals = FALSE;
bfd_boolean ldgram_had_keep = FALSE;
char *ldgram_vers_current_lang = NULL;

#define ERROR_NAME_MAX 20
static char *error_names[ERROR_NAME_MAX];
static int error_index;
#define PUSH_ERROR(x) if (error_index < ERROR_NAME_MAX) error_names[error_index] = x; error_index++;
#define POP_ERROR()   error_index--;

#line 67 "ldgram.y"
#ifndef YYSTYPE
typedef union {
  bfd_vma integer;
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      bfd_boolean filehdr;
      bfd_boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif
#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		627
#define	YYFLAG		-32768
#define	YYNTBASE	132

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 362 ? yytranslate[x] : 240)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const short yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   130,     2,     2,     2,    34,    21,     2,
      37,   127,    32,    30,   125,    31,     2,    33,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    16,   126,
      24,    10,    25,    15,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   128,     2,   129,    20,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    51,    19,    52,   131,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    11,    12,    13,    14,    17,    18,
      22,    23,    26,    27,    28,    29,    35,    36,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123,   124
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    14,    15,    20,    21,
      24,    28,    29,    32,    37,    39,    41,    44,    46,    51,
      56,    60,    63,    68,    72,    77,    82,    87,    92,    97,
     100,   103,   106,   111,   116,   119,   122,   125,   128,   129,
     135,   138,   139,   143,   146,   147,   149,   153,   155,   159,
     160,   162,   166,   168,   171,   175,   176,   179,   182,   183,
     185,   187,   189,   191,   193,   195,   197,   199,   201,   203,
     208,   213,   218,   223,   232,   237,   239,   241,   246,   247,
     253,   258,   259,   265,   270,   275,   277,   281,   284,   286,
     290,   293,   298,   301,   304,   305,   310,   313,   314,   322,
     324,   326,   328,   330,   336,   341,   350,   353,   355,   359,
     361,   363,   367,   372,   374,   375,   381,   384,   386,   388,
     390,   395,   397,   402,   407,   410,   412,   413,   415,   417,
     419,   421,   423,   425,   427,   430,   431,   433,   435,   437,
     439,   441,   443,   445,   447,   449,   451,   455,   459,   466,
     468,   469,   475,   478,   482,   483,   484,   492,   496,   500,
     501,   505,   507,   510,   512,   515,   520,   525,   529,   533,
     535,   540,   544,   545,   547,   549,   550,   553,   557,   558,
     561,   564,   568,   573,   576,   579,   582,   586,   590,   594,
     598,   602,   606,   610,   614,   618,   622,   626,   630,   634,
     638,   642,   646,   652,   656,   660,   665,   667,   669,   674,
     679,   684,   689,   694,   701,   708,   713,   718,   720,   727,
     734,   741,   745,   746,   751,   752,   757,   758,   759,   760,
     761,   762,   763,   781,   782,   783,   784,   785,   786,   805,
     806,   807,   815,   817,   819,   821,   823,   825,   829,   830,
     833,   837,   840,   847,   858,   861,   863,   864,   866,   869,
     870,   871,   875,   876,   877,   878,   879,   891,   896,   897,
     900,   901,   902,   909,   911,   912,   916,   922,   923,   927,
     928,   931,   932,   938,   940,   943,   948,   954,   961,   963,
     966,   967,   970,   975,   980,   989,   991,   995,   996,  1006,
    1007,  1015,  1016
};
static const short yyrhs[] =
{
     111,   146,     0,   112,   136,     0,   122,   228,     0,   113,
     134,     0,     4,     0,     0,   135,     4,    10,   192,     0,
       0,   137,   138,     0,   138,   139,   100,     0,     0,    95,
     192,     0,    95,   192,   125,   192,     0,     4,     0,    96,
       0,   102,   141,     0,   101,     0,   106,     4,    10,   192,
       0,   106,     4,   125,   192,     0,   106,     4,   192,     0,
     105,     4,     0,    97,     4,   125,   192,     0,    97,     4,
     192,     0,    97,     4,    10,   192,     0,    38,     4,    10,
     192,     0,    38,     4,   125,   192,     0,    91,     4,    10,
     192,     0,    91,     4,   125,   192,     0,    98,   143,     0,
      99,   142,     0,   103,     4,     0,   108,     4,   125,     4,
       0,   108,     4,   125,     3,     0,   107,   192,     0,   109,
       3,     0,   114,   144,     0,   115,   145,     0,     0,    58,
     133,   140,   138,    36,     0,   116,     4,     0,     0,   141,
     125,     4,     0,   141,     4,     0,     0,     4,     0,   142,
     125,     4,     0,     4,     0,   143,   125,     4,     0,     0,
       4,     0,   144,   125,     4,     0,     4,     0,   145,     4,
       0,   145,   125,     4,     0,     0,   147,   148,     0,   148,
     149,     0,     0,   174,     0,   153,     0,   220,     0,   183,
       0,   184,     0,   186,     0,   188,     0,   155,     0,   230,
       0,   126,     0,    67,    37,     4,   127,     0,    68,    37,
     133,   127,     0,    89,    37,   133,   127,     0,    54,    37,
       4,   127,     0,    54,    37,     4,   125,     4,   125,     4,
     127,     0,    56,    37,     4,   127,     0,    55,     0,    57,
       0,    87,    37,   152,   127,     0,     0,    88,   150,    37,
     152,   127,     0,    69,    37,   133,   127,     0,     0,    58,
     133,   151,   148,    36,     0,    82,    37,   189,   127,     0,
     115,    37,   145,   127,     0,     4,     0,   152,   125,     4,
       0,   152,     4,     0,     5,     0,   152,   125,     5,     0,
     152,     5,     0,    46,    51,   154,    52,     0,   154,   196,
       0,   154,   155,     0,     0,    70,    37,     4,   127,     0,
     172,   171,     0,     0,   104,   156,    37,   192,   125,     4,
     127,     0,     4,     0,    32,     0,    15,     0,   157,     0,
     124,    37,   159,   127,   157,     0,    48,    37,   157,   127,
       0,    48,    37,   124,    37,   159,   127,   157,   127,     0,
     159,   157,     0,   157,     0,   160,   173,   158,     0,   158,
       0,     4,     0,   128,   160,   129,     0,   158,    37,   160,
     127,     0,   161,     0,     0,   123,    37,   163,   161,   127,
       0,   172,   171,     0,    86,     0,   126,     0,    90,     0,
      48,    37,    90,   127,     0,   162,     0,   167,    37,   190,
     127,     0,    84,    37,   168,   127,     0,   165,   164,     0,
     164,     0,     0,   165,     0,    41,     0,    42,     0,    43,
       0,    44,     0,    45,     0,   190,     0,    10,   168,     0,
       0,     6,     0,     7,     0,     8,     0,     9,     0,    11,
       0,    12,     0,    13,     0,    14,     0,   126,     0,   125,
       0,     4,    10,   190,     0,     4,   170,   190,     0,    94,
      37,     4,    10,   190,   127,     0,   125,     0,     0,    59,
      51,   176,   175,    52,     0,   175,   176,     0,   175,   125,
     176,     0,     0,     0,     4,   177,   180,    16,   178,   173,
     179,     0,    83,    10,   190,     0,    85,    10,   190,     0,
       0,    37,   181,   127,     0,   182,     0,   181,   182,     0,
       4,     0,   130,     4,     0,    77,    37,   133,   127,     0,
      78,    37,   185,   127,     0,    78,    37,   127,     0,   185,
     173,   133,     0,   133,     0,    79,    37,   187,   127,     0,
     187,   173,   133,     0,     0,    80,     0,    81,     0,     0,
       4,   189,     0,     4,   125,   189,     0,     0,   191,   192,
       0,    31,   192,     0,    37,   192,   127,     0,    71,    37,
     192,   127,     0,   130,   192,     0,    30,   192,     0,   131,
     192,     0,   192,    32,   192,     0,   192,    33,   192,     0,
     192,    34,   192,     0,   192,    30,   192,     0,   192,    31,
     192,     0,   192,    28,   192,     0,   192,    29,   192,     0,
     192,    22,   192,     0,   192,    23,   192,     0,   192,    26,
     192,     0,   192,    27,   192,     0,   192,    24,   192,     0,
     192,    25,   192,     0,   192,    21,   192,     0,   192,    20,
     192,     0,   192,    19,   192,     0,   192,    15,   192,    16,
     192,     0,   192,    18,   192,     0,   192,    17,   192,     0,
      66,    37,     4,   127,     0,     3,     0,    53,     0,    72,
      37,     4,   127,     0,    73,    37,     4,   127,     0,    74,
      37,     4,   127,     0,    98,    37,   192,   127,     0,    38,
      37,   192,   127,     0,    38,    37,   192,   125,   192,   127,
       0,    49,    37,   192,   125,   192,   127,     0,    50,    37,
     192,   127,     0,    39,    37,   192,   127,     0,     4,     0,
      75,    37,   192,   125,   192,   127,     0,    76,    37,   192,
     125,   192,   127,     0,   104,    37,   192,   125,     4,   127,
       0,    92,    25,     4,     0,     0,    92,    37,   192,   127,
       0,     0,    93,    37,   192,   127,     0,     0,     0,     0,
       0,     0,     0,     4,   197,   211,   194,   195,   198,    51,
     199,   166,    52,   200,   214,   193,   215,   169,   201,   173,
       0,     0,     0,     0,     0,     0,    65,   202,   212,   213,
     194,   195,   203,    51,   204,   216,    52,   205,   214,   193,
     215,   169,   206,   173,     0,     0,     0,    88,   207,   211,
     208,    51,   154,    52,     0,    61,     0,    62,     0,    63,
       0,    64,     0,    65,     0,    37,   209,   127,     0,     0,
      37,   127,     0,   192,   210,    16,     0,   210,    16,     0,
      40,    37,   192,   127,   210,    16,     0,    40,    37,   192,
     127,    39,    37,   192,   127,   210,    16,     0,   192,    16,
       0,    16,     0,     0,    82,     0,    25,     4,     0,     0,
       0,   215,    16,     4,     0,     0,     0,     0,     0,   216,
       4,   217,    51,   166,    52,   218,   215,   169,   219,   173,
       0,    47,    51,   221,    52,     0,     0,   221,   222,     0,
       0,     0,     4,   223,   225,   226,   224,   126,     0,   192,
       0,     0,     4,   227,   226,     0,    92,    37,   192,   127,
     226,     0,     0,    37,   192,   127,     0,     0,   229,   232,
       0,     0,   231,   121,    51,   232,    52,     0,   233,     0,
     232,   233,     0,    51,   235,    52,   126,     0,   117,    51,
     235,    52,   126,     0,   117,    51,   235,    52,   234,   126,
       0,   117,     0,   234,   117,     0,     0,   236,   126,     0,
     119,    16,   236,   126,     0,   120,    16,   236,   126,     0,
     119,    16,   236,   126,   120,    16,   236,   126,     0,   118,
       0,   236,   126,   118,     0,     0,   236,   126,   115,     4,
      51,   237,   236,   239,    52,     0,     0,   115,     4,    51,
     238,   236,   239,    52,     0,     0,   126,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   161,   163,   164,   165,   169,   172,   172,   182,   182,
     195,   197,   200,   202,   203,   206,   209,   210,   211,   213,
     215,   217,   219,   221,   223,   225,   227,   229,   231,   233,
     234,   235,   237,   239,   241,   243,   245,   246,   247,   247,
     251,   253,   256,   258,   259,   262,   265,   268,   271,   275,
     277,   278,   281,   284,   286,   290,   290,   301,   303,   308,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     321,   323,   325,   328,   330,   332,   334,   336,   337,   337,
     341,   343,   343,   347,   351,   354,   358,   361,   364,   367,
     370,   375,   379,   381,   382,   385,   388,   389,   389,   396,
     401,   405,   411,   418,   424,   430,   438,   447,   458,   467,
     478,   487,   491,   497,   499,   499,   505,   507,   511,   512,
     517,   522,   523,   528,   534,   536,   539,   541,   544,   547,
     549,   551,   553,   557,   567,   570,   573,   576,   578,   580,
     582,   584,   586,   588,   593,   593,   597,   602,   610,   617,
     618,   621,   625,   627,   628,   632,   632,   639,   647,   656,
     659,   662,   664,   667,   670,   674,   679,   681,   685,   688,
     693,   695,   698,   701,   704,   708,   713,   722,   733,   733,
     738,   741,   743,   745,   747,   749,   752,   754,   756,   758,
     760,   762,   764,   766,   768,   770,   772,   774,   776,   778,
     780,   782,   784,   786,   788,   790,   792,   794,   797,   799,
     801,   803,   805,   807,   809,   811,   813,   815,   817,   819,
     821,   826,   828,   831,   833,   836,   838,   841,   841,   841,
     841,   841,   841,   860,   860,   860,   860,   860,   860,   878,
     878,   878,   891,   893,   894,   895,   896,   899,   901,   902,
     905,   907,   908,   913,   917,   919,   922,   925,   929,   932,
     935,   940,   953,   955,   955,   955,   955,   971,   975,   977,
     980,   980,   980,   990,  1034,  1039,  1051,  1058,  1063,  1071,
    1071,  1085,  1085,  1095,  1097,  1100,  1105,  1109,  1115,  1120,
    1126,  1131,  1135,  1139,  1143,  1149,  1154,  1158,  1158,  1168,
    1168,  1180,  1182
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "INT", "NAME", "LNAME", "PLUSEQ", "MINUSEQ", 
  "MULTEQ", "DIVEQ", "'='", "LSHIFTEQ", "RSHIFTEQ", "ANDEQ", "OREQ", 
  "'?'", "':'", "OROR", "ANDAND", "'|'", "'^'", "'&'", "EQ", "NE", "'<'", 
  "'>'", "LE", "GE", "LSHIFT", "RSHIFT", "'+'", "'-'", "'*'", "'/'", 
  "'%'", "UNARY", "END", "'('", "ALIGN_K", "BLOCK", "BIND", "QUAD", 
  "SQUAD", "LONG", "SHORT", "BYTE", "SECTIONS", "PHDRS", "SORT", 
  "DATA_SEGMENT_ALIGN", "DATA_SEGMENT_END", "'{'", "'}'", 
  "SIZEOF_HEADERS", "OUTPUT_FORMAT", "FORCE_COMMON_ALLOCATION", 
  "OUTPUT_ARCH", "INHIBIT_COMMON_ALLOCATION", "INCLUDE", "MEMORY", 
  "DEFSYMEND", "NOLOAD", "DSECT", "COPY", "INFO", "OVERLAY", "DEFINED", 
  "TARGET_K", "SEARCH_DIR", "MAP", "ENTRY", "NEXT", "SIZEOF", "ADDR", 
  "LOADADDR", "MAX_K", "MIN_K", "STARTUP", "HLL", "SYSLIB", "FLOAT", 
  "NOFLOAT", "NOCROSSREFS", "ORIGIN", "FILL", "LENGTH", 
  "CREATE_OBJECT_SYMBOLS", "INPUT", "GROUP", "OUTPUT", "CONSTRUCTORS", 
  "ALIGNMOD", "AT", "SUBALIGN", "PROVIDE", "CHIP", "LIST", "SECT", 
  "ABSOLUTE", "LOAD", "NEWLINE", "ENDWORD", "ORDER", "NAMEWORD", 
  "ASSERT_K", "FORMAT", "PUBLIC", "BASE", "ALIAS", "TRUNCATE", "REL", 
  "INPUT_SCRIPT", "INPUT_MRI_SCRIPT", "INPUT_DEFSYM", "CASE", "EXTERN", 
  "START", "VERS_TAG", "VERS_IDENTIFIER", "GLOBAL", "LOCAL", "VERSIONK", 
  "INPUT_VERSION_SCRIPT", "KEEP", "EXCLUDE_FILE", "','", "';'", "')'", 
  "'['", "']'", "'!'", "'~'", "file", "filename", "defsym_expr", "@@1", 
  "mri_script_file", "@@2", "mri_script_lines", "mri_script_command", "@@3", 
  "ordernamelist", "mri_load_name_list", "mri_abs_name_list", 
  "casesymlist", "extern_name_list", "script_file", "@@4", "ifile_list", 
  "ifile_p1", "@@5", "@@6", "input_list", "sections", "sec_or_group_p1", 
  "statement_anywhere", "@@7", "wildcard_name", "wildcard_spec", 
  "exclude_name_list", "file_NAME_list", "input_section_spec_no_keep", 
  "input_section_spec", "@@8", "statement", "statement_list", 
  "statement_list_opt", "length", "fill_exp", "fill_opt", "assign_op", 
  "end", "assignment", "opt_comma", "memory", "memory_spec_list", 
  "memory_spec", "@@9", "origin_spec", "length_spec", "attributes_opt", 
  "attributes_list", "attributes_string", "startup", "high_level_library", 
  "high_level_library_NAME_list", "low_level_library", 
  "low_level_library_NAME_list", "floating_point_support", 
  "nocrossref_list", "mustbe_exp", "@@10", "exp", "memspec_at_opt", 
  "opt_at", "opt_subalign", "section", "@@11", "@@12", "@@13", "@@14", "@@15", 
  "@@16", "@@17", "@@18", "@@19", "@@20", "@@21", "@@22", "type", "atype", 
  "opt_exp_with_type", "opt_exp_without_type", "opt_nocrossrefs", 
  "memspec_opt", "phdr_opt", "overlay_section", "@@23", "@@24", "@@25", 
  "phdrs", "phdr_list", "phdr", "@@26", "@@27", "phdr_type", 
  "phdr_qualifiers", "phdr_val", "version_script_file", "@@28", "version", 
  "@@29", "vers_nodes", "vers_node", "verdep", "vers_tag", "vers_defns", 
  "@@30", "@@31", "opt_semicolon", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,   132,   132,   132,   132,   133,   135,   134,   137,   136,
     138,   138,   139,   139,   139,   139,   139,   139,   139,   139,
     139,   139,   139,   139,   139,   139,   139,   139,   139,   139,
     139,   139,   139,   139,   139,   139,   139,   139,   140,   139,
     139,   139,   141,   141,   141,   142,   142,   143,   143,   144,
     144,   144,   145,   145,   145,   147,   146,   148,   148,   149,
     149,   149,   149,   149,   149,   149,   149,   149,   149,   149,
     149,   149,   149,   149,   149,   149,   149,   149,   150,   149,
     149,   151,   149,   149,   149,   152,   152,   152,   152,   152,
     152,   153,   154,   154,   154,   155,   155,   156,   155,   157,
     157,   157,   158,   158,   158,   158,   159,   159,   160,   160,
     161,   161,   161,   162,   163,   162,   164,   164,   164,   164,
     164,   164,   164,   164,   165,   165,   166,   166,   167,   167,
     167,   167,   167,   168,   169,   169,   170,   170,   170,   170,
     170,   170,   170,   170,   171,   171,   172,   172,   172,   173,
     173,   174,   175,   175,   175,   177,   176,   178,   179,   180,
     180,   181,   181,   182,   182,   183,   184,   184,   185,   185,
     186,   187,   187,   188,   188,   189,   189,   189,   191,   190,
     192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
     192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
     192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
     192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
     192,   193,   193,   194,   194,   195,   195,   197,   198,   199,
     200,   201,   196,   202,   203,   204,   205,   206,   196,   207,
     208,   196,   209,   209,   209,   209,   209,   210,   210,   210,
     211,   211,   211,   211,   212,   212,   213,   213,   214,   214,
     215,   215,   216,   217,   218,   219,   216,   220,   221,   221,
     223,   224,   222,   225,   226,   226,   226,   227,   227,   229,
     228,   231,   230,   232,   232,   233,   233,   233,   234,   234,
     235,   235,   235,   235,   235,   236,   236,   237,   236,   238,
     236,   239,   239
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     2,     2,     2,     2,     1,     0,     4,     0,     2,
       3,     0,     2,     4,     1,     1,     2,     1,     4,     4,
       3,     2,     4,     3,     4,     4,     4,     4,     4,     2,
       2,     2,     4,     4,     2,     2,     2,     2,     0,     5,
       2,     0,     3,     2,     0,     1,     3,     1,     3,     0,
       1,     3,     1,     2,     3,     0,     2,     2,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       4,     4,     4,     8,     4,     1,     1,     4,     0,     5,
       4,     0,     5,     4,     4,     1,     3,     2,     1,     3,
       2,     4,     2,     2,     0,     4,     2,     0,     7,     1,
       1,     1,     1,     5,     4,     8,     2,     1,     3,     1,
       1,     3,     4,     1,     0,     5,     2,     1,     1,     1,
       4,     1,     4,     4,     2,     1,     0,     1,     1,     1,
       1,     1,     1,     1,     2,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     3,     6,     1,
       0,     5,     2,     3,     0,     0,     7,     3,     3,     0,
       3,     1,     2,     1,     2,     4,     4,     3,     3,     1,
       4,     3,     0,     1,     1,     0,     2,     3,     0,     2,
       2,     3,     4,     2,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     5,     3,     3,     4,     1,     1,     4,     4,
       4,     4,     4,     6,     6,     4,     4,     1,     6,     6,
       6,     3,     0,     4,     0,     4,     0,     0,     0,     0,
       0,     0,    17,     0,     0,     0,     0,     0,    18,     0,
       0,     7,     1,     1,     1,     1,     1,     3,     0,     2,
       3,     2,     6,    10,     2,     1,     0,     1,     2,     0,
       0,     3,     0,     0,     0,     0,    11,     4,     0,     2,
       0,     0,     6,     1,     0,     3,     5,     0,     3,     0,
       2,     0,     5,     1,     2,     4,     5,     6,     1,     2,
       0,     2,     4,     4,     8,     1,     3,     0,     9,     0,
       7,     0,     1
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,    55,     8,     6,   279,     1,    58,     2,    11,     4,
       0,     3,     0,    56,     9,     0,   290,     0,   280,   283,
       0,     0,     0,     0,    75,     0,    76,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   173,   174,     0,     0,
      78,     0,     0,    97,     0,    68,    57,    60,    66,     0,
      59,    62,    63,    64,    65,    61,    67,     0,    14,     0,
       0,     0,     0,    15,     0,     0,     0,    17,    44,     0,
       0,     0,     0,     0,     0,    49,     0,     0,     0,     0,
       0,   295,     0,     0,     0,     0,   290,   284,   136,   137,
     138,   139,   178,   140,   141,   142,   143,   178,    94,   268,
       0,     0,     5,    81,     0,     0,     0,     0,     0,     0,
       0,   172,   175,     0,     0,     0,     0,     0,     0,   145,
     144,    96,     0,     0,    38,     0,   206,   217,     0,     0,
       0,     0,     0,     0,     0,   207,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    12,     0,    47,
      29,    45,    30,    16,    31,    21,     0,    34,     0,    35,
      50,    36,    52,    37,    40,    10,     7,     0,     0,     0,
       0,   291,     0,   146,     0,   147,     0,     0,     0,     0,
      58,   155,   154,     0,     0,     0,     0,     0,   167,   169,
     150,   150,   175,     0,    85,    88,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    11,     0,     0,   184,   180,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   183,   185,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    23,     0,
       0,    43,     0,     0,     0,    20,     0,     0,    53,     0,
     299,     0,     0,   285,     0,   296,     0,   179,   227,    91,
     233,   239,    93,    92,   270,   267,   269,     0,    72,    74,
     281,   159,     0,    69,    70,    80,    95,   165,   149,   166,
       0,   170,     0,   175,   176,    83,    87,    90,     0,    77,
       0,    71,   178,     0,    84,     0,    25,    26,    41,    27,
      28,   181,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   204,   203,   201,   200,
     199,   193,   194,   197,   198,   195,   196,   191,   192,   189,
     190,   186,   187,   188,    13,    24,    22,    48,    46,    42,
      18,    19,    33,    32,    51,    54,     0,   292,   293,     0,
     288,   286,     0,   248,     0,   248,     0,     0,    82,     0,
       0,   151,     0,   152,   168,   171,   177,    86,    89,    79,
       0,     0,   282,    39,     0,   212,   216,     0,   215,   205,
     182,   208,   209,   210,     0,     0,   211,     0,     0,   301,
       0,   297,   289,   287,     0,     0,   248,     0,   224,   255,
       0,   256,   240,   273,   274,     0,   163,     0,     0,   161,
       0,   153,   148,     0,     0,     0,     0,     0,     0,   202,
     302,     0,     0,     0,   242,   243,   244,   245,   246,   249,
       0,     0,     0,     0,   251,     0,   226,   254,   257,   224,
       0,   277,     0,   271,     0,   164,   160,   162,     0,   150,
      98,   213,   214,   218,   219,   220,   300,     0,   301,   247,
       0,   250,     0,     0,   228,   226,    94,     0,   274,     0,
       0,    73,   178,     0,   294,     0,   248,     0,     0,     0,
     234,     0,     0,   275,     0,   272,   157,     0,   156,   298,
       0,     0,   223,     0,   229,     0,   241,   278,   274,   178,
       0,   252,   225,   126,   235,   276,   158,     0,   110,   101,
     100,   128,   129,   130,   131,   132,     0,     0,   117,   119,
       0,     0,   118,     0,   102,     0,   113,   121,   125,   127,
       0,     0,     0,   262,   248,     0,   178,   114,     0,    99,
       0,   109,   150,     0,   124,   230,   178,   116,     0,     0,
       0,     0,     0,     0,   133,     0,   107,     0,     0,   111,
       0,   150,   259,     0,   263,   236,   253,   120,     0,   104,
     123,    99,     0,     0,   106,   108,   112,     0,   222,   122,
       0,   259,     0,   115,   103,   258,     0,   260,   126,   222,
       0,     0,   135,     0,   260,     0,   221,   178,     0,   231,
     264,   135,   105,   134,   261,   150,   260,   237,   232,   135,
     150,   265,   238,   150,   266,     0,     0,     0
};

static const short yydefgoto[] =
{
     625,   103,     9,    10,     7,     8,    14,    78,   205,   153,
     152,   150,   161,   163,     5,     6,    13,    46,   114,   180,
     196,    47,   176,    48,   117,   534,   535,   567,   552,   536,
     537,   565,   538,   539,   540,   541,   563,   609,    97,   121,
      49,   570,    50,   282,   182,   281,   459,   498,   370,   418,
     419,    51,    52,   190,    53,   191,    54,   193,   564,   174,
     210,   597,   446,   474,   273,   363,   489,   513,   572,   615,
     364,   505,   543,   591,   620,   365,   450,   440,   407,   408,
     411,   449,   588,   602,   558,   590,   616,   623,    55,   177,
     276,   366,   480,   414,   453,   478,    11,    12,    56,    57,
      18,    19,   362,    84,    85,   433,   356,   431
};

static const short yypact[] =
{
     114,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
      48,-32768,   -20,   585,   699,    50,   113,    43,   -20,-32768,
     467,    52,   106,   158,-32768,   162,-32768,   204,   163,   180,
     184,   193,   218,   231,   245,   247,-32768,-32768,   250,   251,
  -32768,   253,   254,-32768,   255,-32768,-32768,-32768,-32768,   145,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   173,-32768,   291,
     204,   293,   520,-32768,   294,   295,   296,-32768,-32768,   302,
     304,   305,   520,   315,   319,   320,   321,   323,   228,   520,
     325,-32768,   314,   316,   279,   209,   113,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
     332,   334,-32768,-32768,   335,   338,   204,   204,   339,   204,
      17,-32768,   340,   271,   308,   204,   342,   313,   321,-32768,
  -32768,-32768,   300,     5,-32768,    23,-32768,-32768,   520,   520,
     520,   317,   324,   327,   328,-32768,   329,   330,   333,   337,
     341,   350,   351,   352,   355,   520,   520,  1180,    33,-32768,
     227,-32768,   232,    16,-32768,-32768,   310,  1398,   233,-32768,
  -32768,   237,-32768,    31,-32768,-32768,  1398,   318,   -71,   -71,
     230,    10,   301,-32768,   520,-32768,    28,    26,    -4,   244,
  -32768,-32768,-32768,   248,   252,   266,   267,   268,-32768,-32768,
       2,    93,    65,   269,-32768,-32768,    22,   271,   282,   362,
     520,    73,   -20,   520,   520,-32768,   520,   520,-32768,-32768,
     847,   520,   520,   520,   520,   373,   520,   406,   408,   409,
     520,   520,   520,   520,-32768,-32768,   520,   520,   520,   520,
     520,   520,   520,   520,   520,   520,   520,   520,   520,   520,
     520,   520,   520,   520,   520,   520,   520,   520,  1398,   411,
     417,-32768,   418,   520,   520,  1398,   275,   419,-32768,   420,
  -32768,   299,   306,-32768,   422,-32768,   -88,  1398,   467,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   426,-32768,-32768,
     666,   394,    62,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
     204,-32768,   204,   340,-32768,-32768,-32768,-32768,   276,-32768,
      69,-32768,-32768,  1200,-32768,     7,  1398,  1398,   725,  1398,
    1398,-32768,   827,   867,  1220,   887,   307,   907,   311,   312,
     343,  1240,  1289,   938,  1309,  1352,   582,  1269,  1415,  1429,
    1442,  1029,  1029,   429,   429,   429,   429,   210,   210,   220,
     220,-32768,-32768,-32768,  1398,  1398,  1398,-32768,-32768,-32768,
    1398,  1398,-32768,-32768,-32768,-32768,   -71,   -39,    10,   386,
  -32768,-32768,   -78,   416,   468,   416,   520,   326,-32768,     4,
     427,-32768,   335,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
     356,   438,-32768,-32768,   520,-32768,-32768,   520,-32768,-32768,
  -32768,-32768,-32768,-32768,   520,   520,-32768,   440,   520,   322,
     434,-32768,-32768,-32768,   185,   415,  1329,   451,   353,-32768,
    1372,   403,-32768,  1398,    19,   464,-32768,   482,     8,-32768,
     410,-32768,-32768,   367,   958,   978,   998,  1018,   368,  1398,
      10,   444,   -71,   -71,-32768,-32768,-32768,-32768,-32768,-32768,
     370,   520,   142,   484,-32768,   465,   423,-32768,-32768,   353,
     450,   466,   471,-32768,   377,-32768,-32768,-32768,   499,   385,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   387,   322,-32768,
    1049,-32768,   520,   474,-32768,   423,-32768,   520,    19,   520,
     389,-32768,-32768,   437,    10,   460,   225,  1069,   520,   475,
  -32768,   303,  1089,-32768,  1109,-32768,-32768,   509,-32768,-32768,
     488,   511,-32768,  1129,-32768,   477,-32768,-32768,    19,-32768,
     520,-32768,-32768,   533,-32768,-32768,-32768,  1160,   392,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   492,   493,-32768,-32768,
     494,   495,-32768,   197,-32768,   496,-32768,-32768,-32768,   533,
     483,   501,   145,-32768,   508,   187,-32768,-32768,    86,-32768,
     512,-32768,   -64,   197,-32768,-32768,-32768,-32768,    36,   536,
     428,   516,   433,   435,-32768,    85,-32768,     9,    87,-32768,
     197,   140,   529,   436,-32768,-32768,-32768,-32768,    86,-32768,
  -32768,   441,   452,    86,-32768,-32768,-32768,   532,   469,-32768,
     505,   529,    13,-32768,-32768,-32768,   539,-32768,   533,   469,
      86,   563,   110,   519,-32768,   453,-32768,-32768,   578,-32768,
  -32768,   110,-32768,-32768,-32768,   385,-32768,-32768,-32768,   110,
     385,-32768,-32768,   385,-32768,   583,   584,-32768
};

static const short yypgoto[] =
{
  -32768,   -53,-32768,-32768,-32768,-32768,   380,-32768,-32768,-32768,
  -32768,-32768,-32768,   470,-32768,-32768,   407,-32768,-32768,-32768,
     393,-32768,   121,  -174,-32768,  -282,  -478,    42,    68,    57,
  -32768,-32768,    89,-32768,    27,-32768,    29,  -569,-32768,    84,
    -488,  -187,-32768,-32768,  -260,-32768,-32768,-32768,-32768,-32768,
     211,-32768,-32768,-32768,-32768,-32768,-32768,  -178,   -92,-32768,
     -61,    34,   181,   159,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -390,   270,
  -32768,-32768,    46,  -570,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,  -459,-32768,-32768,-32768,-32768,-32768,
     443,   -12,-32768,   552,  -159,-32768,-32768,   178
};


#define	YYLAST		1476


static const short yytable[] =
{
     173,   147,   272,   290,   292,   175,    87,   124,   416,   261,
     262,   157,   416,   549,   294,   203,   443,   549,   166,   493,
     251,   102,   373,   451,   519,   542,   296,   297,   519,   360,
     274,    16,   268,   206,   611,   258,   126,   127,   361,   402,
     574,   520,   617,   246,    80,   520,   619,    81,   403,   515,
     621,   542,    15,   184,   185,   551,   187,   189,    16,   382,
      79,   288,   198,   128,   129,   569,   181,   208,   209,   192,
     130,   131,   132,   296,   297,   551,   264,   258,   275,   265,
     269,   400,   133,   134,   224,   225,   135,   248,   575,   581,
     549,   549,   585,   270,    86,   255,   501,    17,    32,   136,
     519,   519,   519,    98,   137,   138,   139,   140,   141,   142,
     542,   452,   421,   267,   371,   376,   271,   520,   520,   520,
     607,   277,    42,   278,    17,   264,   608,   288,   265,   289,
     204,   143,    43,   550,   417,   456,   583,   144,   417,   303,
     600,   252,   306,   307,   188,   309,   310,   298,   207,   299,
     312,   313,   314,   315,   559,   317,   259,    99,   247,   321,
     322,   323,   324,   145,   146,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   372,   126,   127,
     293,   549,   350,   351,   298,   100,   379,   399,   259,   101,
     304,   549,   519,   434,   435,   436,   437,   438,   102,   531,
     380,   561,   519,   533,   104,   128,   129,   105,   288,   520,
     291,   106,   130,   131,   132,     1,     2,     3,    80,   520,
     107,    81,    82,    83,   133,   134,     4,   374,   135,   375,
     240,   241,   242,   243,   244,   550,   434,   435,   436,   437,
     438,   136,   242,   243,   244,   108,   137,   138,   139,   140,
     141,   142,   442,   562,   500,   288,   566,   586,   109,   439,
     119,   120,   483,   467,   468,   194,   195,   560,   352,   353,
     377,   378,   110,   143,   111,   584,   562,   112,   113,   144,
     115,   116,   118,    87,   122,   123,   566,   125,   148,   149,
     151,   594,   406,   410,   406,   413,   154,   268,   155,   156,
     584,   561,   439,   126,   127,   145,   146,   272,   605,   158,
     253,   531,   159,   424,   160,   162,   425,   164,   165,   167,
     168,   170,   169,   426,   427,   171,   178,   429,   179,   181,
     128,   129,   183,   186,   192,   197,   199,   130,   131,   132,
     200,   202,   249,   266,   211,   506,   263,   250,   256,   133,
     134,   212,   257,   135,   213,   214,   215,   216,   270,   260,
     217,   279,   302,    32,   218,   283,   136,   316,   219,   284,
     470,   137,   138,   139,   140,   141,   142,   220,   221,   222,
     496,   271,   223,   285,   286,   287,   295,    42,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    43,   143,   301,
     318,   487,   319,   320,   144,   347,   492,   516,   494,   126,
     127,   348,   349,   354,   355,   357,   359,   503,   618,   -99,
     367,   369,   358,   622,   389,   254,   624,   401,   391,   392,
     145,   146,   423,   420,   428,   445,   128,   129,   430,   517,
     432,   415,   441,   404,   131,   132,   405,   238,   239,   240,
     241,   242,   243,   244,   573,   133,   134,   444,   454,   135,
     393,   126,   127,    88,    89,    90,    91,    92,    93,    94,
      95,    96,   136,   422,   409,   448,   455,   137,   138,   139,
     140,   141,   142,   458,   460,   465,   466,   469,   128,   129,
     471,   476,   472,   477,   481,   130,   131,   132,   479,   482,
     288,   488,   499,   484,   143,   495,   473,   133,   134,   509,
     144,   135,   497,   126,   127,   510,   504,   511,   514,   545,
     546,   547,   548,   553,   136,   555,   595,   518,   556,   137,
     138,   139,   140,   141,   142,   442,   145,   146,   519,   568,
     128,   129,   576,   578,   587,   577,   598,   130,   131,   132,
     579,   596,   580,   589,   601,   520,   143,   606,  -110,   133,
     134,   610,   144,   135,   521,   522,   523,   524,   525,   593,
     612,   526,   614,   626,   627,   308,   136,   280,   201,    20,
     300,   137,   138,   139,   140,   141,   142,   491,   145,   146,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   527,   143,   528,
     592,   571,   582,   529,   144,   603,   557,    42,   554,   457,
     475,    21,    22,   604,   490,   412,   613,   599,   172,    23,
      24,    25,    26,    27,    28,   305,   485,     0,     0,     0,
     145,   146,    29,    30,    31,    32,   530,   531,     0,   532,
       0,   533,    33,    34,    35,    36,    37,    38,     0,     0,
      20,     0,    39,    40,    41,     0,     0,     0,     0,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,     0,   368,    58,     0,     0,  -281,     0,     0,     0,
       0,    45,    21,    22,     0,     0,     0,     0,     0,     0,
      23,    24,    25,    26,    27,    28,     0,     0,     0,    58,
       0,     0,     0,    29,    30,    31,    32,    59,     0,     0,
       0,     0,     0,    33,    34,    35,    36,    37,    38,     0,
       0,     0,     0,    39,    40,    41,     0,    60,     0,     0,
      42,   383,     0,    59,     0,     0,     0,     0,     0,     0,
      43,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    44,     0,    60,     0,     0,     0,     0,     0,     0,
      61,     0,    45,     0,    62,    63,    64,    65,    66,   -41,
      67,    68,    69,     0,    70,    71,    72,    73,    74,     0,
       0,     0,     0,    75,    76,    77,    61,     0,     0,     0,
      62,    63,    64,    65,    66,     0,    67,    68,    69,     0,
      70,    71,    72,    73,    74,     0,     0,     0,     0,    75,
      76,    77,   226,     0,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   226,     0,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   226,     0,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   226,     0,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   226,     0,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   384,   226,   385,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   226,   311,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   226,   386,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   226,   388,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   226,   390,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   226,   396,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   226,   461,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   226,   462,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   226,   463,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   226,   464,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   226,   486,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   226,   502,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   226,   507,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   226,   508,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   226,   512,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   544,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   226,   245,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   226,   381,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   226,   387,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,     0,   394,   442,   226,   398,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   226,   447,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,     0,     0,
       0,     0,     0,   226,   395,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,     0,   397,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244
};

static const short yycheck[] =
{
      92,    62,   176,   190,   191,    97,    18,    60,     4,   168,
     169,    72,     4,     4,   192,    10,   406,     4,    79,   478,
       4,     4,   282,     4,    15,   513,     4,     5,    15,   117,
       4,    51,     4,    10,   604,     4,     3,     4,   126,   117,
       4,    32,   611,    10,   115,    32,   616,   118,   126,   508,
     619,   539,     4,   106,   107,   533,   109,   110,    51,    52,
      10,   125,   115,    30,    31,   129,     4,   128,   129,     4,
      37,    38,    39,     4,     5,   553,   115,     4,    52,   118,
      52,   120,    49,    50,   145,   146,    53,   148,    52,     4,
       4,     4,   570,    65,    51,   156,   486,   117,    70,    66,
      15,    15,    15,    51,    71,    72,    73,    74,    75,    76,
     598,    92,   372,   174,    52,   293,    88,    32,    32,    32,
      10,   125,    94,   127,   117,   115,    16,   125,   118,   127,
     125,    98,   104,    48,   130,   127,   127,   104,   130,   200,
     127,   125,   203,   204,   127,   206,   207,   125,   125,   127,
     211,   212,   213,   214,   544,   216,   125,    51,   125,   220,
     221,   222,   223,   130,   131,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   125,     3,     4,
     125,     4,   253,   254,   125,    37,   127,   356,   125,    37,
     127,     4,    15,    61,    62,    63,    64,    65,     4,   124,
     302,   124,    15,   128,    51,    30,    31,    37,   125,    32,
     127,    37,    37,    38,    39,   111,   112,   113,   115,    32,
      37,   118,   119,   120,    49,    50,   122,   290,    53,   292,
      30,    31,    32,    33,    34,    48,    61,    62,    63,    64,
      65,    66,    32,    33,    34,    37,    71,    72,    73,    74,
      75,    76,    37,   545,    39,   125,   548,   127,    37,   127,
     125,   126,   459,   432,   433,     4,     5,    90,     3,     4,
       4,     5,    37,    98,    37,   567,   568,    37,    37,   104,
      37,    37,    37,   305,   121,     4,   578,     4,     4,     4,
       4,   583,   363,   364,   365,   366,     4,     4,     4,     4,
     592,   124,   127,     3,     4,   130,   131,   491,   600,     4,
      10,   124,     3,   384,     4,     4,   387,     4,   100,     4,
      16,    52,    16,   394,   395,   126,     4,   398,     4,     4,
      30,    31,     4,     4,     4,    37,     4,    37,    38,    39,
      37,    51,   125,    52,    37,    52,   126,   125,   125,    49,
      50,    37,   125,    53,    37,    37,    37,    37,    65,    51,
      37,   127,    10,    70,    37,   127,    66,     4,    37,   127,
     441,    71,    72,    73,    74,    75,    76,    37,    37,    37,
     482,    88,    37,   127,   127,   127,   127,    94,     6,     7,
       8,     9,    10,    11,    12,    13,    14,   104,    98,   127,
       4,   472,     4,     4,   104,     4,   477,   509,   479,     3,
       4,     4,     4,     4,     4,   126,     4,   488,   615,    37,
       4,    37,   126,   620,   127,   125,   623,    51,   127,   127,
     130,   131,     4,    16,     4,    92,    30,    31,   126,   510,
      16,   125,    37,    37,    38,    39,    40,    28,    29,    30,
      31,    32,    33,    34,   556,    49,    50,    16,     4,    53,
     127,     3,     4,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    66,   127,    16,    82,     4,    71,    72,    73,
      74,    75,    76,    83,   127,   127,    52,   127,    30,    31,
      16,    51,    37,    37,   127,    37,    38,    39,    37,    10,
     125,    37,    52,   126,    98,   126,    93,    49,    50,    10,
     104,    53,    85,     3,     4,    37,    51,    16,    51,    37,
      37,    37,    37,    37,    66,    52,     4,     4,    37,    71,
      72,    73,    74,    75,    76,    37,   130,   131,    15,    37,
      30,    31,    16,    37,    25,   127,    51,    37,    38,    39,
     127,    92,   127,   127,    25,    32,    98,     4,   127,    49,
      50,    52,   104,    53,    41,    42,    43,    44,    45,   127,
     127,    48,     4,     0,     0,   205,    66,   180,   118,     4,
     197,    71,    72,    73,    74,    75,    76,   476,   130,   131,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    84,    98,    86,
     578,   553,   565,    90,   104,   598,   542,    94,   539,   418,
     449,    46,    47,   599,   475,   365,   607,   591,    86,    54,
      55,    56,    57,    58,    59,   202,   468,    -1,    -1,    -1,
     130,   131,    67,    68,    69,    70,   123,   124,    -1,   126,
      -1,   128,    77,    78,    79,    80,    81,    82,    -1,    -1,
       4,    -1,    87,    88,    89,    -1,    -1,    -1,    -1,    94,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     115,    -1,    36,     4,    -1,    -1,   121,    -1,    -1,    -1,
      -1,   126,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,
      54,    55,    56,    57,    58,    59,    -1,    -1,    -1,     4,
      -1,    -1,    -1,    67,    68,    69,    70,    38,    -1,    -1,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    82,    -1,
      -1,    -1,    -1,    87,    88,    89,    -1,    58,    -1,    -1,
      94,    36,    -1,    38,    -1,    -1,    -1,    -1,    -1,    -1,
     104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   115,    -1,    58,    -1,    -1,    -1,    -1,    -1,    -1,
      91,    -1,   126,    -1,    95,    96,    97,    98,    99,   100,
     101,   102,   103,    -1,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,   114,   115,   116,    91,    -1,    -1,    -1,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,    -1,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,   114,
     115,   116,    15,    -1,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   125,    15,   127,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    15,   127,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    15,   127,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    15,   127,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    15,   127,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   127,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   127,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   127,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   127,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   127,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    15,   127,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   127,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   127,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   127,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   127,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   125,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   125,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,   125,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,   125,    37,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    15,   125,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,   125,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison-1.35/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison-1.35/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 6:
#line 173 "ldgram.y"
{ ldlex_defsym(); }
    break;
case 7:
#line 175 "ldgram.y"
{
		  ldlex_popstate();
		  lang_add_assignment(exp_assop(yyvsp[-1].token,yyvsp[-2].name,yyvsp[0].etree));
		}
    break;
case 8:
#line 183 "ldgram.y"
{
		  ldlex_mri_script ();
		  PUSH_ERROR (_("MRI style script"));
		}
    break;
case 9:
#line 188 "ldgram.y"
{
		  ldlex_popstate ();
		  mri_draw_tree ();
		  POP_ERROR ();
		}
    break;
case 14:
#line 203 "ldgram.y"
{
			einfo(_("%P%F: unrecognised keyword in MRI style script '%s'\n"),yyvsp[0].name);
			}
    break;
case 15:
#line 206 "ldgram.y"
{
			config.map_filename = "-";
			}
    break;
case 18:
#line 212 "ldgram.y"
{ mri_public(yyvsp[-2].name, yyvsp[0].etree); }
    break;
case 19:
#line 214 "ldgram.y"
{ mri_public(yyvsp[-2].name, yyvsp[0].etree); }
    break;
case 20:
#line 216 "ldgram.y"
{ mri_public(yyvsp[-1].name, yyvsp[0].etree); }
    break;
case 21:
#line 218 "ldgram.y"
{ mri_format(yyvsp[0].name); }
    break;
case 22:
#line 220 "ldgram.y"
{ mri_output_section(yyvsp[-2].name, yyvsp[0].etree);}
    break;
case 23:
#line 222 "ldgram.y"
{ mri_output_section(yyvsp[-1].name, yyvsp[0].etree);}
    break;
case 24:
#line 224 "ldgram.y"
{ mri_output_section(yyvsp[-2].name, yyvsp[0].etree);}
    break;
case 25:
#line 226 "ldgram.y"
{ mri_align(yyvsp[-2].name,yyvsp[0].etree); }
    break;
case 26:
#line 228 "ldgram.y"
{ mri_align(yyvsp[-2].name,yyvsp[0].etree); }
    break;
case 27:
#line 230 "ldgram.y"
{ mri_alignmod(yyvsp[-2].name,yyvsp[0].etree); }
    break;
case 28:
#line 232 "ldgram.y"
{ mri_alignmod(yyvsp[-2].name,yyvsp[0].etree); }
    break;
case 31:
#line 236 "ldgram.y"
{ mri_name(yyvsp[0].name); }
    break;
case 32:
#line 238 "ldgram.y"
{ mri_alias(yyvsp[-2].name,yyvsp[0].name,0);}
    break;
case 33:
#line 240 "ldgram.y"
{ mri_alias (yyvsp[-2].name, 0, (int) yyvsp[0].bigint.integer); }
    break;
case 34:
#line 242 "ldgram.y"
{ mri_base(yyvsp[0].etree); }
    break;
case 35:
#line 244 "ldgram.y"
{ mri_truncate ((unsigned int) yyvsp[0].bigint.integer); }
    break;
case 38:
#line 248 "ldgram.y"
{ ldlex_script (); ldfile_open_command_file(yyvsp[0].name); }
    break;
case 39:
#line 250 "ldgram.y"
{ ldlex_popstate (); }
    break;
case 40:
#line 252 "ldgram.y"
{ lang_add_entry (yyvsp[0].name, FALSE); }
    break;
case 42:
#line 257 "ldgram.y"
{ mri_order(yyvsp[0].name); }
    break;
case 43:
#line 258 "ldgram.y"
{ mri_order(yyvsp[0].name); }
    break;
case 45:
#line 264 "ldgram.y"
{ mri_load(yyvsp[0].name); }
    break;
case 46:
#line 265 "ldgram.y"
{ mri_load(yyvsp[0].name); }
    break;
case 47:
#line 270 "ldgram.y"
{ mri_only_load(yyvsp[0].name); }
    break;
case 48:
#line 272 "ldgram.y"
{ mri_only_load(yyvsp[0].name); }
    break;
case 49:
#line 276 "ldgram.y"
{ yyval.name = NULL; }
    break;
case 52:
#line 283 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); }
    break;
case 53:
#line 285 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); }
    break;
case 54:
#line 287 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); }
    break;
case 55:
#line 291 "ldgram.y"
{
	 ldlex_both();
	}
    break;
case 56:
#line 295 "ldgram.y"
{
	ldlex_popstate();
	}
    break;
case 69:
#line 320 "ldgram.y"
{ lang_add_target(yyvsp[-1].name); }
    break;
case 70:
#line 322 "ldgram.y"
{ ldfile_add_library_path (yyvsp[-1].name, FALSE); }
    break;
case 71:
#line 324 "ldgram.y"
{ lang_add_output(yyvsp[-1].name, 1); }
    break;
case 72:
#line 326 "ldgram.y"
{ lang_add_output_format (yyvsp[-1].name, (char *) NULL,
					    (char *) NULL, 1); }
    break;
case 73:
#line 329 "ldgram.y"
{ lang_add_output_format (yyvsp[-5].name, yyvsp[-3].name, yyvsp[-1].name, 1); }
    break;
case 74:
#line 331 "ldgram.y"
{ ldfile_set_output_arch (yyvsp[-1].name, bfd_arch_unknown); }
    break;
case 75:
#line 333 "ldgram.y"
{ command_line.force_common_definition = TRUE ; }
    break;
case 76:
#line 335 "ldgram.y"
{ command_line.inhibit_common_definition = TRUE ; }
    break;
case 78:
#line 338 "ldgram.y"
{ lang_enter_group (); }
    break;
case 79:
#line 340 "ldgram.y"
{ lang_leave_group (); }
    break;
case 80:
#line 342 "ldgram.y"
{ lang_add_map(yyvsp[-1].name); }
    break;
case 81:
#line 344 "ldgram.y"
{ ldlex_script (); ldfile_open_command_file(yyvsp[0].name); }
    break;
case 82:
#line 346 "ldgram.y"
{ ldlex_popstate (); }
    break;
case 83:
#line 348 "ldgram.y"
{
		  lang_add_nocrossref (yyvsp[-1].nocrossref);
		}
    break;
case 85:
#line 356 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;
case 86:
#line 359 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;
case 87:
#line 362 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;
case 88:
#line 365 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;
case 89:
#line 368 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;
case 90:
#line 371 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;
case 95:
#line 387 "ldgram.y"
{ lang_add_entry (yyvsp[-1].name, FALSE); }
    break;
case 97:
#line 389 "ldgram.y"
{ldlex_expression ();}
    break;
case 98:
#line 390 "ldgram.y"
{ ldlex_popstate ();
		  lang_add_assignment (exp_assert (yyvsp[-3].etree, yyvsp[-1].name)); }
    break;
case 99:
#line 398 "ldgram.y"
{
			  yyval.cname = yyvsp[0].name;
			}
    break;
case 100:
#line 402 "ldgram.y"
{
			  yyval.cname = "*";
			}
    break;
case 101:
#line 406 "ldgram.y"
{
			  yyval.cname = "?";
			}
    break;
case 102:
#line 413 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[0].cname;
			  yyval.wildcard.sorted = FALSE;
			  yyval.wildcard.exclude_name_list = NULL;
			}
    break;
case 103:
#line 419 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[0].cname;
			  yyval.wildcard.sorted = FALSE;
			  yyval.wildcard.exclude_name_list = yyvsp[-2].name_list;
			}
    break;
case 104:
#line 425 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-1].cname;
			  yyval.wildcard.sorted = TRUE;
			  yyval.wildcard.exclude_name_list = NULL;
			}
    break;
case 105:
#line 431 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-1].cname;
			  yyval.wildcard.sorted = TRUE;
			  yyval.wildcard.exclude_name_list = yyvsp[-3].name_list;
			}
    break;
case 106:
#line 440 "ldgram.y"
{
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = yyvsp[0].cname;
			  tmp->next = yyvsp[-1].name_list;
			  yyval.name_list = tmp;
			}
    break;
case 107:
#line 449 "ldgram.y"
{
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = yyvsp[0].cname;
			  tmp->next = NULL;
			  yyval.name_list = tmp;
			}
    break;
case 108:
#line 460 "ldgram.y"
{
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = yyvsp[-2].wildcard_list;
			  tmp->spec = yyvsp[0].wildcard;
			  yyval.wildcard_list = tmp;
			}
    break;
case 109:
#line 469 "ldgram.y"
{
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = NULL;
			  tmp->spec = yyvsp[0].wildcard;
			  yyval.wildcard_list = tmp;
			}
    break;
case 110:
#line 480 "ldgram.y"
{
			  struct wildcard_spec tmp;
			  tmp.name = yyvsp[0].name;
			  tmp.exclude_name_list = NULL;
			  tmp.sorted = FALSE;
			  lang_add_wild (&tmp, NULL, ldgram_had_keep);
			}
    break;
case 111:
#line 488 "ldgram.y"
{
			  lang_add_wild (NULL, yyvsp[-1].wildcard_list, ldgram_had_keep);
			}
    break;
case 112:
#line 492 "ldgram.y"
{
			  lang_add_wild (&yyvsp[-3].wildcard, yyvsp[-1].wildcard_list, ldgram_had_keep);
			}
    break;
case 114:
#line 500 "ldgram.y"
{ ldgram_had_keep = TRUE; }
    break;
case 115:
#line 502 "ldgram.y"
{ ldgram_had_keep = FALSE; }
    break;
case 117:
#line 508 "ldgram.y"
{
 		lang_add_attribute(lang_object_symbols_statement_enum);
	      	}
    break;
case 119:
#line 513 "ldgram.y"
{

		  lang_add_attribute(lang_constructors_statement_enum);
		}
    break;
case 120:
#line 518 "ldgram.y"
{
		  constructors_sorted = TRUE;
		  lang_add_attribute (lang_constructors_statement_enum);
		}
    break;
case 122:
#line 524 "ldgram.y"
{
			  lang_add_data ((int) yyvsp[-3].integer, yyvsp[-1].etree);
			}
    break;
case 123:
#line 529 "ldgram.y"
{
			  lang_add_fill (yyvsp[-1].fill);
			}
    break;
case 128:
#line 546 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 129:
#line 548 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 130:
#line 550 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 131:
#line 552 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 132:
#line 554 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 133:
#line 559 "ldgram.y"
{
		  yyval.fill = exp_get_fill (yyvsp[0].etree,
				     0,
				     "fill value",
				     lang_first_phase_enum);
		}
    break;
case 134:
#line 569 "ldgram.y"
{ yyval.fill = yyvsp[0].fill; }
    break;
case 135:
#line 570 "ldgram.y"
{ yyval.fill = (fill_type *) 0; }
    break;
case 136:
#line 575 "ldgram.y"
{ yyval.token = '+'; }
    break;
case 137:
#line 577 "ldgram.y"
{ yyval.token = '-'; }
    break;
case 138:
#line 579 "ldgram.y"
{ yyval.token = '*'; }
    break;
case 139:
#line 581 "ldgram.y"
{ yyval.token = '/'; }
    break;
case 140:
#line 583 "ldgram.y"
{ yyval.token = LSHIFT; }
    break;
case 141:
#line 585 "ldgram.y"
{ yyval.token = RSHIFT; }
    break;
case 142:
#line 587 "ldgram.y"
{ yyval.token = '&'; }
    break;
case 143:
#line 589 "ldgram.y"
{ yyval.token = '|'; }
    break;
case 146:
#line 599 "ldgram.y"
{
		  lang_add_assignment (exp_assop (yyvsp[-1].token, yyvsp[-2].name, yyvsp[0].etree));
		}
    break;
case 147:
#line 603 "ldgram.y"
{
		  lang_add_assignment (exp_assop ('=', yyvsp[-2].name,
						  exp_binop (yyvsp[-1].token,
							     exp_nameop (NAME,
									 yyvsp[-2].name),
							     yyvsp[0].etree)));
		}
    break;
case 148:
#line 611 "ldgram.y"
{
		  lang_add_assignment (exp_provide (yyvsp[-3].name, yyvsp[-1].etree));
		}
    break;
case 155:
#line 633 "ldgram.y"
{ region = lang_memory_region_lookup (yyvsp[0].name, TRUE); }
    break;
case 156:
#line 636 "ldgram.y"
{}
    break;
case 157:
#line 641 "ldgram.y"
{ region->current =
		 region->origin =
		 exp_get_vma(yyvsp[0].etree, 0L,"origin", lang_first_phase_enum);
}
    break;
case 158:
#line 649 "ldgram.y"
{ region->length = exp_get_vma(yyvsp[0].etree,
					       ~((bfd_vma)0),
					       "length",
					       lang_first_phase_enum);
		}
    break;
case 159:
#line 658 "ldgram.y"
{ /* dummy action to avoid bison 1.25 error message */ }
    break;
case 163:
#line 669 "ldgram.y"
{ lang_set_flags (region, yyvsp[0].name, 0); }
    break;
case 164:
#line 671 "ldgram.y"
{ lang_set_flags (region, yyvsp[0].name, 1); }
    break;
case 165:
#line 676 "ldgram.y"
{ lang_startup(yyvsp[-1].name); }
    break;
case 167:
#line 682 "ldgram.y"
{ ldemul_hll((char *)NULL); }
    break;
case 168:
#line 687 "ldgram.y"
{ ldemul_hll(yyvsp[0].name); }
    break;
case 169:
#line 689 "ldgram.y"
{ ldemul_hll(yyvsp[0].name); }
    break;
case 171:
#line 697 "ldgram.y"
{ ldemul_syslib(yyvsp[0].name); }
    break;
case 173:
#line 703 "ldgram.y"
{ lang_float(TRUE); }
    break;
case 174:
#line 705 "ldgram.y"
{ lang_float(FALSE); }
    break;
case 175:
#line 710 "ldgram.y"
{
		  yyval.nocrossref = NULL;
		}
    break;
case 176:
#line 714 "ldgram.y"
{
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = yyvsp[-1].name;
		  n->next = yyvsp[0].nocrossref;
		  yyval.nocrossref = n;
		}
    break;
case 177:
#line 723 "ldgram.y"
{
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = yyvsp[-2].name;
		  n->next = yyvsp[0].nocrossref;
		  yyval.nocrossref = n;
		}
    break;
case 178:
#line 733 "ldgram.y"
{ ldlex_expression(); }
    break;
case 179:
#line 735 "ldgram.y"
{ ldlex_popstate(); yyval.etree=yyvsp[0].etree;}
    break;
case 180:
#line 740 "ldgram.y"
{ yyval.etree = exp_unop('-', yyvsp[0].etree); }
    break;
case 181:
#line 742 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
case 182:
#line 744 "ldgram.y"
{ yyval.etree = exp_unop((int) yyvsp[-3].integer,yyvsp[-1].etree); }
    break;
case 183:
#line 746 "ldgram.y"
{ yyval.etree = exp_unop('!', yyvsp[0].etree); }
    break;
case 184:
#line 748 "ldgram.y"
{ yyval.etree = yyvsp[0].etree; }
    break;
case 185:
#line 750 "ldgram.y"
{ yyval.etree = exp_unop('~', yyvsp[0].etree);}
    break;
case 186:
#line 753 "ldgram.y"
{ yyval.etree = exp_binop('*', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 187:
#line 755 "ldgram.y"
{ yyval.etree = exp_binop('/', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 188:
#line 757 "ldgram.y"
{ yyval.etree = exp_binop('%', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 189:
#line 759 "ldgram.y"
{ yyval.etree = exp_binop('+', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 190:
#line 761 "ldgram.y"
{ yyval.etree = exp_binop('-' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 191:
#line 763 "ldgram.y"
{ yyval.etree = exp_binop(LSHIFT , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 192:
#line 765 "ldgram.y"
{ yyval.etree = exp_binop(RSHIFT , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 193:
#line 767 "ldgram.y"
{ yyval.etree = exp_binop(EQ , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 194:
#line 769 "ldgram.y"
{ yyval.etree = exp_binop(NE , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 195:
#line 771 "ldgram.y"
{ yyval.etree = exp_binop(LE , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 196:
#line 773 "ldgram.y"
{ yyval.etree = exp_binop(GE , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 197:
#line 775 "ldgram.y"
{ yyval.etree = exp_binop('<' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 198:
#line 777 "ldgram.y"
{ yyval.etree = exp_binop('>' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 199:
#line 779 "ldgram.y"
{ yyval.etree = exp_binop('&' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 200:
#line 781 "ldgram.y"
{ yyval.etree = exp_binop('^' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 201:
#line 783 "ldgram.y"
{ yyval.etree = exp_binop('|' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 202:
#line 785 "ldgram.y"
{ yyval.etree = exp_trinop('?' , yyvsp[-4].etree, yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 203:
#line 787 "ldgram.y"
{ yyval.etree = exp_binop(ANDAND , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 204:
#line 789 "ldgram.y"
{ yyval.etree = exp_binop(OROR , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 205:
#line 791 "ldgram.y"
{ yyval.etree = exp_nameop(DEFINED, yyvsp[-1].name); }
    break;
case 206:
#line 793 "ldgram.y"
{ yyval.etree = exp_bigintop (yyvsp[0].bigint.integer, yyvsp[0].bigint.str); }
    break;
case 207:
#line 795 "ldgram.y"
{ yyval.etree = exp_nameop(SIZEOF_HEADERS,0); }
    break;
case 208:
#line 798 "ldgram.y"
{ yyval.etree = exp_nameop(SIZEOF,yyvsp[-1].name); }
    break;
case 209:
#line 800 "ldgram.y"
{ yyval.etree = exp_nameop(ADDR,yyvsp[-1].name); }
    break;
case 210:
#line 802 "ldgram.y"
{ yyval.etree = exp_nameop(LOADADDR,yyvsp[-1].name); }
    break;
case 211:
#line 804 "ldgram.y"
{ yyval.etree = exp_unop(ABSOLUTE, yyvsp[-1].etree); }
    break;
case 212:
#line 806 "ldgram.y"
{ yyval.etree = exp_unop(ALIGN_K,yyvsp[-1].etree); }
    break;
case 213:
#line 808 "ldgram.y"
{ yyval.etree = exp_binop(ALIGN_K,yyvsp[-3].etree,yyvsp[-1].etree); }
    break;
case 214:
#line 810 "ldgram.y"
{ yyval.etree = exp_binop (DATA_SEGMENT_ALIGN, yyvsp[-3].etree, yyvsp[-1].etree); }
    break;
case 215:
#line 812 "ldgram.y"
{ yyval.etree = exp_unop(DATA_SEGMENT_END, yyvsp[-1].etree); }
    break;
case 216:
#line 814 "ldgram.y"
{ yyval.etree = exp_unop(ALIGN_K,yyvsp[-1].etree); }
    break;
case 217:
#line 816 "ldgram.y"
{ yyval.etree = exp_nameop(NAME,yyvsp[0].name); }
    break;
case 218:
#line 818 "ldgram.y"
{ yyval.etree = exp_binop (MAX_K, yyvsp[-3].etree, yyvsp[-1].etree ); }
    break;
case 219:
#line 820 "ldgram.y"
{ yyval.etree = exp_binop (MIN_K, yyvsp[-3].etree, yyvsp[-1].etree ); }
    break;
case 220:
#line 822 "ldgram.y"
{ yyval.etree = exp_assert (yyvsp[-3].etree, yyvsp[-1].name); }
    break;
case 221:
#line 827 "ldgram.y"
{ yyval.name = yyvsp[0].name; }
    break;
case 222:
#line 828 "ldgram.y"
{ yyval.name = 0; }
    break;
case 223:
#line 832 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
case 224:
#line 833 "ldgram.y"
{ yyval.etree = 0; }
    break;
case 225:
#line 837 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
case 226:
#line 838 "ldgram.y"
{ yyval.etree = 0; }
    break;
case 227:
#line 841 "ldgram.y"
{ ldlex_expression(); }
    break;
case 228:
#line 844 "ldgram.y"
{ ldlex_popstate (); ldlex_script (); }
    break;
case 229:
#line 846 "ldgram.y"
{
			  lang_enter_output_section_statement(yyvsp[-6].name, yyvsp[-4].etree,
							      sectype,
							      0, yyvsp[-2].etree, yyvsp[-3].etree);
			}
    break;
case 230:
#line 852 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); }
    break;
case 231:
#line 854 "ldgram.y"
{
		  ldlex_popstate ();
		  lang_leave_output_section_statement (yyvsp[0].fill, yyvsp[-3].name, yyvsp[-1].section_phdr, yyvsp[-2].name);
		}
    break;
case 232:
#line 859 "ldgram.y"
{}
    break;
case 233:
#line 861 "ldgram.y"
{ ldlex_expression (); }
    break;
case 234:
#line 863 "ldgram.y"
{ ldlex_popstate (); ldlex_script (); }
    break;
case 235:
#line 865 "ldgram.y"
{
			  lang_enter_overlay (yyvsp[-5].etree, yyvsp[-2].etree);
			}
    break;
case 236:
#line 870 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); }
    break;
case 237:
#line 872 "ldgram.y"
{
			  ldlex_popstate ();
			  lang_leave_overlay (yyvsp[-11].etree, (int) yyvsp[-12].integer,
					      yyvsp[0].fill, yyvsp[-3].name, yyvsp[-1].section_phdr, yyvsp[-2].name);
			}
    break;
case 239:
#line 882 "ldgram.y"
{ ldlex_expression (); }
    break;
case 240:
#line 884 "ldgram.y"
{
		  ldlex_popstate ();
		  lang_add_assignment (exp_assop ('=', ".", yyvsp[0].etree));
		}
    break;
case 242:
#line 892 "ldgram.y"
{ sectype = noload_section; }
    break;
case 243:
#line 893 "ldgram.y"
{ sectype = dsect_section; }
    break;
case 244:
#line 894 "ldgram.y"
{ sectype = copy_section; }
    break;
case 245:
#line 895 "ldgram.y"
{ sectype = info_section; }
    break;
case 246:
#line 896 "ldgram.y"
{ sectype = overlay_section; }
    break;
case 248:
#line 901 "ldgram.y"
{ sectype = normal_section; }
    break;
case 249:
#line 902 "ldgram.y"
{ sectype = normal_section; }
    break;
case 250:
#line 906 "ldgram.y"
{ yyval.etree = yyvsp[-2].etree; }
    break;
case 251:
#line 907 "ldgram.y"
{ yyval.etree = (etree_type *)NULL;  }
    break;
case 252:
#line 912 "ldgram.y"
{ yyval.etree = yyvsp[-3].etree; }
    break;
case 253:
#line 914 "ldgram.y"
{ yyval.etree = yyvsp[-7].etree; }
    break;
case 254:
#line 918 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
case 255:
#line 919 "ldgram.y"
{ yyval.etree = (etree_type *) NULL;  }
    break;
case 256:
#line 924 "ldgram.y"
{ yyval.integer = 0; }
    break;
case 257:
#line 926 "ldgram.y"
{ yyval.integer = 1; }
    break;
case 258:
#line 931 "ldgram.y"
{ yyval.name = yyvsp[0].name; }
    break;
case 259:
#line 932 "ldgram.y"
{ yyval.name = DEFAULT_MEMORY_REGION; }
    break;
case 260:
#line 937 "ldgram.y"
{
		  yyval.section_phdr = NULL;
		}
    break;
case 261:
#line 941 "ldgram.y"
{
		  struct lang_output_section_phdr_list *n;

		  n = ((struct lang_output_section_phdr_list *)
		       xmalloc (sizeof *n));
		  n->name = yyvsp[0].name;
		  n->used = FALSE;
		  n->next = yyvsp[-2].section_phdr;
		  yyval.section_phdr = n;
		}
    break;
case 263:
#line 957 "ldgram.y"
{
			  ldlex_script ();
			  lang_enter_overlay_section (yyvsp[0].name);
			}
    break;
case 264:
#line 962 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); }
    break;
case 265:
#line 964 "ldgram.y"
{
			  ldlex_popstate ();
			  lang_leave_overlay_section (yyvsp[0].fill, yyvsp[-1].section_phdr);
			}
    break;
case 270:
#line 981 "ldgram.y"
{ ldlex_expression (); }
    break;
case 271:
#line 982 "ldgram.y"
{ ldlex_popstate (); }
    break;
case 272:
#line 984 "ldgram.y"
{
		  lang_new_phdr (yyvsp[-5].name, yyvsp[-3].etree, yyvsp[-2].phdr.filehdr, yyvsp[-2].phdr.phdrs, yyvsp[-2].phdr.at,
				 yyvsp[-2].phdr.flags);
		}
    break;
case 273:
#line 992 "ldgram.y"
{
		  yyval.etree = yyvsp[0].etree;

		  if (yyvsp[0].etree->type.node_class == etree_name
		      && yyvsp[0].etree->type.node_code == NAME)
		    {
		      const char *s;
		      unsigned int i;
		      static const char * const phdr_types[] =
			{
			  "PT_NULL", "PT_LOAD", "PT_DYNAMIC",
			  "PT_INTERP", "PT_NOTE", "PT_SHLIB",
			  "PT_PHDR", "PT_TLS"
			};

		      s = yyvsp[0].etree->name.name;
		      for (i = 0;
			   i < sizeof phdr_types / sizeof phdr_types[0];
			   i++)
			if (strcmp (s, phdr_types[i]) == 0)
			  {
			    yyval.etree = exp_intop (i);
			    break;
			  }
		      if (i == sizeof phdr_types / sizeof phdr_types[0])
			{
			  if (strcmp (s, "PT_GNU_EH_FRAME") == 0)
			    yyval.etree = exp_intop (0x6474e550);
			  else if (strcmp (s, "PT_GNU_STACK") == 0)
			    yyval.etree = exp_intop (0x6474e551);
			  else
			    {
			      einfo (_("\
%X%P:%S: unknown phdr type `%s' (try integer literal)\n"),
				     s);
			      yyval.etree = exp_intop (0);
			    }
			}
		    }
		}
    break;
case 274:
#line 1036 "ldgram.y"
{
		  memset (&yyval.phdr, 0, sizeof (struct phdr_info));
		}
    break;
case 275:
#line 1040 "ldgram.y"
{
		  yyval.phdr = yyvsp[0].phdr;
		  if (strcmp (yyvsp[-2].name, "FILEHDR") == 0 && yyvsp[-1].etree == NULL)
		    yyval.phdr.filehdr = TRUE;
		  else if (strcmp (yyvsp[-2].name, "PHDRS") == 0 && yyvsp[-1].etree == NULL)
		    yyval.phdr.phdrs = TRUE;
		  else if (strcmp (yyvsp[-2].name, "FLAGS") == 0 && yyvsp[-1].etree != NULL)
		    yyval.phdr.flags = yyvsp[-1].etree;
		  else
		    einfo (_("%X%P:%S: PHDRS syntax error at `%s'\n"), yyvsp[-2].name);
		}
    break;
case 276:
#line 1052 "ldgram.y"
{
		  yyval.phdr = yyvsp[0].phdr;
		  yyval.phdr.at = yyvsp[-2].etree;
		}
    break;
case 277:
#line 1060 "ldgram.y"
{
		  yyval.etree = NULL;
		}
    break;
case 278:
#line 1064 "ldgram.y"
{
		  yyval.etree = yyvsp[-1].etree;
		}
    break;
case 279:
#line 1072 "ldgram.y"
{
		  ldlex_version_file ();
		  PUSH_ERROR (_("VERSION script"));
		}
    break;
case 280:
#line 1077 "ldgram.y"
{
		  ldlex_popstate ();
		  POP_ERROR ();
		}
    break;
case 281:
#line 1086 "ldgram.y"
{
		  ldlex_version_script ();
		}
    break;
case 282:
#line 1090 "ldgram.y"
{
		  ldlex_popstate ();
		}
    break;
case 285:
#line 1102 "ldgram.y"
{
		  lang_register_vers_node (NULL, yyvsp[-2].versnode, NULL);
		}
    break;
case 286:
#line 1106 "ldgram.y"
{
		  lang_register_vers_node (yyvsp[-4].name, yyvsp[-2].versnode, NULL);
		}
    break;
case 287:
#line 1110 "ldgram.y"
{
		  lang_register_vers_node (yyvsp[-5].name, yyvsp[-3].versnode, yyvsp[-1].deflist);
		}
    break;
case 288:
#line 1117 "ldgram.y"
{
		  yyval.deflist = lang_add_vers_depend (NULL, yyvsp[0].name);
		}
    break;
case 289:
#line 1121 "ldgram.y"
{
		  yyval.deflist = lang_add_vers_depend (yyvsp[-1].deflist, yyvsp[0].name);
		}
    break;
case 290:
#line 1128 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (NULL, NULL);
		}
    break;
case 291:
#line 1132 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-1].versyms, NULL);
		}
    break;
case 292:
#line 1136 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-1].versyms, NULL);
		}
    break;
case 293:
#line 1140 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (NULL, yyvsp[-1].versyms);
		}
    break;
case 294:
#line 1144 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-5].versyms, yyvsp[-1].versyms);
		}
    break;
case 295:
#line 1151 "ldgram.y"
{
		  yyval.versyms = lang_new_vers_pattern (NULL, yyvsp[0].name, ldgram_vers_current_lang);
		}
    break;
case 296:
#line 1155 "ldgram.y"
{
		  yyval.versyms = lang_new_vers_pattern (yyvsp[-2].versyms, yyvsp[0].name, ldgram_vers_current_lang);
		}
    break;
case 297:
#line 1159 "ldgram.y"
{
			  yyval.name = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = yyvsp[-1].name;
			}
    break;
case 298:
#line 1164 "ldgram.y"
{
			  yyval.versyms = yyvsp[-2].versyms;
			  ldgram_vers_current_lang = yyvsp[-3].name;
			}
    break;
case 299:
#line 1169 "ldgram.y"
{
			  yyval.name = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = yyvsp[-1].name;
			}
    break;
case 300:
#line 1174 "ldgram.y"
{
			  yyval.versyms = yyvsp[-2].versyms;
			  ldgram_vers_current_lang = yyvsp[-3].name;
			}
    break;
}

#line 705 "/usr/share/bison-1.35/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 1185 "ldgram.y"

void
yyerror(arg)
     const char *arg;
{
  if (ldfile_assumed_script)
    einfo (_("%P:%s: file format not recognized; treating as linker script\n"),
	   ldfile_input_filename);
  if (error_index > 0 && error_index < ERROR_NAME_MAX)
     einfo ("%P%F:%S: %s in %s\n", arg, error_names[error_index-1]);
  else
     einfo ("%P%F:%S: %s\n", arg);
}
@


1.1.10.1
log
@Add generated files on 2.14 branch.
@
text
@a0 3135
/* A Bison parser, made from ldgram.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	INT	257
# define	NAME	258
# define	LNAME	259
# define	PLUSEQ	260
# define	MINUSEQ	261
# define	MULTEQ	262
# define	DIVEQ	263
# define	LSHIFTEQ	264
# define	RSHIFTEQ	265
# define	ANDEQ	266
# define	OREQ	267
# define	OROR	268
# define	ANDAND	269
# define	EQ	270
# define	NE	271
# define	LE	272
# define	GE	273
# define	LSHIFT	274
# define	RSHIFT	275
# define	UNARY	276
# define	END	277
# define	ALIGN_K	278
# define	BLOCK	279
# define	BIND	280
# define	QUAD	281
# define	SQUAD	282
# define	LONG	283
# define	SHORT	284
# define	BYTE	285
# define	SECTIONS	286
# define	PHDRS	287
# define	SORT	288
# define	DATA_SEGMENT_ALIGN	289
# define	DATA_SEGMENT_END	290
# define	SIZEOF_HEADERS	291
# define	OUTPUT_FORMAT	292
# define	FORCE_COMMON_ALLOCATION	293
# define	OUTPUT_ARCH	294
# define	INHIBIT_COMMON_ALLOCATION	295
# define	INCLUDE	296
# define	MEMORY	297
# define	DEFSYMEND	298
# define	NOLOAD	299
# define	DSECT	300
# define	COPY	301
# define	INFO	302
# define	OVERLAY	303
# define	DEFINED	304
# define	TARGET_K	305
# define	SEARCH_DIR	306
# define	MAP	307
# define	ENTRY	308
# define	NEXT	309
# define	SIZEOF	310
# define	ADDR	311
# define	LOADADDR	312
# define	MAX_K	313
# define	MIN_K	314
# define	STARTUP	315
# define	HLL	316
# define	SYSLIB	317
# define	FLOAT	318
# define	NOFLOAT	319
# define	NOCROSSREFS	320
# define	ORIGIN	321
# define	FILL	322
# define	LENGTH	323
# define	CREATE_OBJECT_SYMBOLS	324
# define	INPUT	325
# define	GROUP	326
# define	OUTPUT	327
# define	CONSTRUCTORS	328
# define	ALIGNMOD	329
# define	AT	330
# define	PROVIDE	331
# define	CHIP	332
# define	LIST	333
# define	SECT	334
# define	ABSOLUTE	335
# define	LOAD	336
# define	NEWLINE	337
# define	ENDWORD	338
# define	ORDER	339
# define	NAMEWORD	340
# define	ASSERT_K	341
# define	FORMAT	342
# define	PUBLIC	343
# define	BASE	344
# define	ALIAS	345
# define	TRUNCATE	346
# define	REL	347
# define	INPUT_SCRIPT	348
# define	INPUT_MRI_SCRIPT	349
# define	INPUT_DEFSYM	350
# define	CASE	351
# define	EXTERN	352
# define	START	353
# define	VERS_TAG	354
# define	VERS_IDENTIFIER	355
# define	GLOBAL	356
# define	LOCAL	357
# define	VERSIONK	358
# define	INPUT_VERSION_SCRIPT	359
# define	KEEP	360
# define	EXCLUDE_FILE	361

#line 22 "ldgram.y"

/*

 */

#define DONTDECLARE_MALLOC

#include "bfd.h"
#include "sysdep.h"
#include "bfdlink.h"
#include "ld.h"
#include "ldexp.h"
#include "ldver.h"
#include "ldlang.h"
#include "ldfile.h"
#include "ldemul.h"
#include "ldmisc.h"
#include "ldmain.h"
#include "mri.h"
#include "ldctor.h"
#include "ldlex.h"

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

static enum section_type sectype;

lang_memory_region_type *region;

bfd_boolean ldgram_want_filename = TRUE;
FILE *saved_script_handle = NULL;
bfd_boolean force_make_executable = FALSE;

bfd_boolean ldgram_in_script = FALSE;
bfd_boolean ldgram_had_equals = FALSE;
bfd_boolean ldgram_had_keep = FALSE;
char *ldgram_vers_current_lang = NULL;

#define ERROR_NAME_MAX 20
static char *error_names[ERROR_NAME_MAX];
static int error_index;
#define PUSH_ERROR(x) if (error_index < ERROR_NAME_MAX) error_names[error_index] = x; error_index++;
#define POP_ERROR()   error_index--;

#line 67 "ldgram.y"
#ifndef YYSTYPE
typedef union {
  bfd_vma integer;
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      bfd_boolean filehdr;
      bfd_boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif
#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		611
#define	YYFLAG		-32768
#define	YYNTBASE	131

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 361 ? yytranslate[x] : 237)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const short yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   129,     2,     2,     2,    34,    21,     2,
      37,   126,    32,    30,   124,    31,     2,    33,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    16,   125,
      24,    10,    25,    15,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   127,     2,   128,    20,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    51,    19,    52,   130,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    11,    12,    13,    14,    17,    18,
      22,    23,    26,    27,    28,    29,    35,    36,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    14,    15,    20,    21,
      24,    28,    29,    32,    37,    39,    41,    44,    46,    51,
      56,    60,    63,    68,    72,    77,    82,    87,    92,    97,
     100,   103,   106,   111,   116,   119,   122,   125,   128,   129,
     135,   138,   139,   143,   146,   147,   149,   153,   155,   159,
     160,   162,   166,   168,   171,   175,   176,   179,   182,   183,
     185,   187,   189,   191,   193,   195,   197,   199,   201,   203,
     208,   213,   218,   223,   232,   237,   239,   241,   246,   247,
     253,   258,   259,   265,   270,   275,   277,   281,   284,   286,
     290,   293,   298,   301,   304,   305,   310,   313,   315,   317,
     319,   321,   327,   332,   341,   344,   346,   350,   352,   354,
     358,   363,   365,   366,   372,   375,   377,   379,   381,   386,
     388,   393,   398,   401,   403,   404,   406,   408,   410,   412,
     414,   416,   418,   421,   422,   424,   426,   428,   430,   432,
     434,   436,   438,   440,   442,   446,   450,   457,   459,   460,
     466,   469,   473,   474,   475,   483,   487,   491,   492,   496,
     498,   501,   503,   506,   511,   516,   520,   524,   526,   531,
     535,   536,   538,   540,   541,   544,   548,   549,   552,   555,
     559,   564,   567,   570,   573,   577,   581,   585,   589,   593,
     597,   601,   605,   609,   613,   617,   621,   625,   629,   633,
     637,   643,   647,   651,   656,   658,   660,   665,   670,   675,
     680,   685,   692,   697,   702,   704,   711,   718,   725,   729,
     730,   735,   736,   737,   738,   739,   740,   741,   758,   759,
     760,   761,   762,   763,   781,   782,   783,   791,   793,   795,
     797,   799,   801,   805,   806,   809,   813,   816,   823,   834,
     837,   839,   840,   842,   845,   846,   847,   851,   852,   853,
     854,   855,   867,   872,   873,   876,   877,   878,   885,   887,
     888,   892,   898,   899,   903,   904,   907,   908,   914,   916,
     919,   924,   930,   937,   939,   942,   943,   946,   951,   956,
     965,   967,   971,   972,   982,   983,   991,   992
};
static const short yyrhs[] =
{
     110,   145,     0,   111,   135,     0,   121,   225,     0,   112,
     133,     0,     4,     0,     0,   134,     4,    10,   190,     0,
       0,   136,   137,     0,   137,   138,    99,     0,     0,    94,
     190,     0,    94,   190,   124,   190,     0,     4,     0,    95,
       0,   101,   140,     0,   100,     0,   105,     4,    10,   190,
       0,   105,     4,   124,   190,     0,   105,     4,   190,     0,
     104,     4,     0,    96,     4,   124,   190,     0,    96,     4,
     190,     0,    96,     4,    10,   190,     0,    38,     4,    10,
     190,     0,    38,     4,   124,   190,     0,    91,     4,    10,
     190,     0,    91,     4,   124,   190,     0,    97,   142,     0,
      98,   141,     0,   102,     4,     0,   107,     4,   124,     4,
       0,   107,     4,   124,     3,     0,   106,   190,     0,   108,
       3,     0,   113,   143,     0,   114,   144,     0,     0,    58,
     132,   139,   137,    36,     0,   115,     4,     0,     0,   140,
     124,     4,     0,   140,     4,     0,     0,     4,     0,   141,
     124,     4,     0,     4,     0,   142,   124,     4,     0,     0,
       4,     0,   143,   124,     4,     0,     4,     0,   144,     4,
       0,   144,   124,     4,     0,     0,   146,   147,     0,   147,
     148,     0,     0,   172,     0,   152,     0,   217,     0,   181,
       0,   182,     0,   184,     0,   186,     0,   154,     0,   227,
       0,   125,     0,    67,    37,     4,   126,     0,    68,    37,
     132,   126,     0,    89,    37,   132,   126,     0,    54,    37,
       4,   126,     0,    54,    37,     4,   124,     4,   124,     4,
     126,     0,    56,    37,     4,   126,     0,    55,     0,    57,
       0,    87,    37,   151,   126,     0,     0,    88,   149,    37,
     151,   126,     0,    69,    37,   132,   126,     0,     0,    58,
     132,   150,   147,    36,     0,    82,    37,   187,   126,     0,
     114,    37,   144,   126,     0,     4,     0,   151,   124,     4,
       0,   151,     4,     0,     5,     0,   151,   124,     5,     0,
     151,     5,     0,    46,    51,   153,    52,     0,   153,   193,
       0,   153,   154,     0,     0,    70,    37,     4,   126,     0,
     170,   169,     0,     4,     0,    32,     0,    15,     0,   155,
       0,   123,    37,   157,   126,   155,     0,    48,    37,   155,
     126,     0,    48,    37,   123,    37,   157,   126,   155,   126,
       0,   157,   155,     0,   155,     0,   158,   171,   156,     0,
     156,     0,     4,     0,   127,   158,   128,     0,   156,    37,
     158,   126,     0,   159,     0,     0,   122,    37,   161,   159,
     126,     0,   170,   169,     0,    86,     0,   125,     0,    90,
       0,    48,    37,    90,   126,     0,   160,     0,   165,    37,
     188,   126,     0,    84,    37,   166,   126,     0,   163,   162,
       0,   162,     0,     0,   163,     0,    41,     0,    42,     0,
      43,     0,    44,     0,    45,     0,   188,     0,    10,   166,
       0,     0,     6,     0,     7,     0,     8,     0,     9,     0,
      11,     0,    12,     0,    13,     0,    14,     0,   125,     0,
     124,     0,     4,    10,   188,     0,     4,   168,   188,     0,
      93,    37,     4,    10,   188,   126,     0,   124,     0,     0,
      59,    51,   174,   173,    52,     0,   173,   174,     0,   173,
     124,   174,     0,     0,     0,     4,   175,   178,    16,   176,
     171,   177,     0,    83,    10,   188,     0,    85,    10,   188,
       0,     0,    37,   179,   126,     0,   180,     0,   179,   180,
       0,     4,     0,   129,     4,     0,    77,    37,   132,   126,
       0,    78,    37,   183,   126,     0,    78,    37,   126,     0,
     183,   171,   132,     0,   132,     0,    79,    37,   185,   126,
       0,   185,   171,   132,     0,     0,    80,     0,    81,     0,
       0,     4,   187,     0,     4,   124,   187,     0,     0,   189,
     190,     0,    31,   190,     0,    37,   190,   126,     0,    71,
      37,   190,   126,     0,   129,   190,     0,    30,   190,     0,
     130,   190,     0,   190,    32,   190,     0,   190,    33,   190,
       0,   190,    34,   190,     0,   190,    30,   190,     0,   190,
      31,   190,     0,   190,    28,   190,     0,   190,    29,   190,
       0,   190,    22,   190,     0,   190,    23,   190,     0,   190,
      26,   190,     0,   190,    27,   190,     0,   190,    24,   190,
       0,   190,    25,   190,     0,   190,    21,   190,     0,   190,
      20,   190,     0,   190,    19,   190,     0,   190,    15,   190,
      16,   190,     0,   190,    18,   190,     0,   190,    17,   190,
       0,    66,    37,     4,   126,     0,     3,     0,    53,     0,
      72,    37,     4,   126,     0,    73,    37,     4,   126,     0,
      74,    37,     4,   126,     0,    97,    37,   190,   126,     0,
      38,    37,   190,   126,     0,    49,    37,   190,   124,   190,
     126,     0,    50,    37,   190,   126,     0,    39,    37,   190,
     126,     0,     4,     0,    75,    37,   190,   124,   190,   126,
       0,    76,    37,   190,   124,   190,   126,     0,   103,    37,
     190,   124,     4,   126,     0,    92,    25,     4,     0,     0,
      92,    37,   190,   126,     0,     0,     0,     0,     0,     0,
       0,     4,   194,   208,   192,   195,    51,   196,   164,    52,
     197,   211,   191,   212,   167,   198,   171,     0,     0,     0,
       0,     0,     0,    65,   199,   209,   210,   192,   200,    51,
     201,   213,    52,   202,   211,   191,   212,   167,   203,   171,
       0,     0,     0,    88,   204,   208,   205,    51,   153,    52,
       0,    61,     0,    62,     0,    63,     0,    64,     0,    65,
       0,    37,   206,   126,     0,     0,    37,   126,     0,   190,
     207,    16,     0,   207,    16,     0,    40,    37,   190,   126,
     207,    16,     0,    40,    37,   190,   126,    39,    37,   190,
     126,   207,    16,     0,   190,    16,     0,    16,     0,     0,
      82,     0,    25,     4,     0,     0,     0,   212,    16,     4,
       0,     0,     0,     0,     0,   213,     4,   214,    51,   164,
      52,   215,   212,   167,   216,   171,     0,    47,    51,   218,
      52,     0,     0,   218,   219,     0,     0,     0,     4,   220,
     222,   223,   221,   125,     0,   190,     0,     0,     4,   224,
     223,     0,    92,    37,   190,   126,   223,     0,     0,    37,
     190,   126,     0,     0,   226,   229,     0,     0,   228,   120,
      51,   229,    52,     0,   230,     0,   229,   230,     0,    51,
     232,    52,   125,     0,   116,    51,   232,    52,   125,     0,
     116,    51,   232,    52,   231,   125,     0,   116,     0,   231,
     116,     0,     0,   233,   125,     0,   118,    16,   233,   125,
       0,   119,    16,   233,   125,     0,   118,    16,   233,   125,
     119,    16,   233,   125,     0,   117,     0,   233,   125,   117,
       0,     0,   233,   125,   114,     4,    51,   234,   233,   236,
      52,     0,     0,   114,     4,    51,   235,   233,   236,    52,
       0,     0,   125,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   161,   163,   164,   165,   169,   172,   172,   182,   182,
     195,   197,   200,   202,   203,   206,   209,   210,   211,   213,
     215,   217,   219,   221,   223,   225,   227,   229,   231,   233,
     234,   235,   237,   239,   241,   243,   245,   246,   247,   247,
     251,   253,   256,   258,   259,   262,   265,   268,   271,   275,
     277,   278,   281,   284,   286,   290,   290,   301,   303,   308,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     321,   323,   325,   328,   330,   332,   334,   336,   337,   337,
     341,   343,   343,   347,   351,   354,   358,   361,   364,   367,
     370,   375,   379,   381,   382,   385,   388,   393,   398,   402,
     408,   415,   421,   427,   435,   444,   455,   464,   475,   484,
     488,   494,   496,   496,   502,   504,   508,   509,   514,   519,
     520,   525,   531,   533,   536,   538,   541,   544,   546,   548,
     550,   554,   564,   567,   570,   573,   575,   577,   579,   581,
     583,   585,   590,   590,   594,   599,   607,   614,   615,   618,
     622,   624,   625,   629,   629,   636,   644,   653,   656,   659,
     661,   664,   667,   671,   676,   678,   682,   685,   690,   692,
     695,   698,   701,   705,   710,   719,   730,   730,   735,   738,
     740,   742,   744,   746,   749,   751,   753,   755,   757,   759,
     761,   763,   765,   767,   769,   771,   773,   775,   777,   779,
     781,   783,   785,   787,   789,   791,   794,   796,   798,   800,
     802,   804,   806,   808,   810,   812,   814,   816,   821,   823,
     826,   828,   831,   831,   831,   831,   831,   831,   849,   849,
     849,   849,   849,   849,   867,   867,   867,   880,   882,   883,
     884,   885,   888,   890,   891,   894,   896,   897,   902,   906,
     908,   911,   914,   918,   921,   924,   929,   942,   944,   944,
     944,   944,   960,   964,   966,   969,   969,   969,   979,  1021,
    1026,  1038,  1045,  1050,  1058,  1058,  1072,  1072,  1082,  1084,
    1087,  1092,  1096,  1102,  1107,  1113,  1118,  1122,  1126,  1130,
    1136,  1141,  1145,  1145,  1155,  1155,  1167,  1169
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "INT", "NAME", "LNAME", "PLUSEQ", "MINUSEQ", 
  "MULTEQ", "DIVEQ", "'='", "LSHIFTEQ", "RSHIFTEQ", "ANDEQ", "OREQ", 
  "'?'", "':'", "OROR", "ANDAND", "'|'", "'^'", "'&'", "EQ", "NE", "'<'", 
  "'>'", "LE", "GE", "LSHIFT", "RSHIFT", "'+'", "'-'", "'*'", "'/'", 
  "'%'", "UNARY", "END", "'('", "ALIGN_K", "BLOCK", "BIND", "QUAD", 
  "SQUAD", "LONG", "SHORT", "BYTE", "SECTIONS", "PHDRS", "SORT", 
  "DATA_SEGMENT_ALIGN", "DATA_SEGMENT_END", "'{'", "'}'", 
  "SIZEOF_HEADERS", "OUTPUT_FORMAT", "FORCE_COMMON_ALLOCATION", 
  "OUTPUT_ARCH", "INHIBIT_COMMON_ALLOCATION", "INCLUDE", "MEMORY", 
  "DEFSYMEND", "NOLOAD", "DSECT", "COPY", "INFO", "OVERLAY", "DEFINED", 
  "TARGET_K", "SEARCH_DIR", "MAP", "ENTRY", "NEXT", "SIZEOF", "ADDR", 
  "LOADADDR", "MAX_K", "MIN_K", "STARTUP", "HLL", "SYSLIB", "FLOAT", 
  "NOFLOAT", "NOCROSSREFS", "ORIGIN", "FILL", "LENGTH", 
  "CREATE_OBJECT_SYMBOLS", "INPUT", "GROUP", "OUTPUT", "CONSTRUCTORS", 
  "ALIGNMOD", "AT", "PROVIDE", "CHIP", "LIST", "SECT", "ABSOLUTE", "LOAD", 
  "NEWLINE", "ENDWORD", "ORDER", "NAMEWORD", "ASSERT_K", "FORMAT", 
  "PUBLIC", "BASE", "ALIAS", "TRUNCATE", "REL", "INPUT_SCRIPT", 
  "INPUT_MRI_SCRIPT", "INPUT_DEFSYM", "CASE", "EXTERN", "START", 
  "VERS_TAG", "VERS_IDENTIFIER", "GLOBAL", "LOCAL", "VERSIONK", 
  "INPUT_VERSION_SCRIPT", "KEEP", "EXCLUDE_FILE", "','", "';'", "')'", 
  "'['", "']'", "'!'", "'~'", "file", "filename", "defsym_expr", "@@1", 
  "mri_script_file", "@@2", "mri_script_lines", "mri_script_command", "@@3", 
  "ordernamelist", "mri_load_name_list", "mri_abs_name_list", 
  "casesymlist", "extern_name_list", "script_file", "@@4", "ifile_list", 
  "ifile_p1", "@@5", "@@6", "input_list", "sections", "sec_or_group_p1", 
  "statement_anywhere", "wildcard_name", "wildcard_spec", 
  "exclude_name_list", "file_NAME_list", "input_section_spec_no_keep", 
  "input_section_spec", "@@7", "statement", "statement_list", 
  "statement_list_opt", "length", "fill_exp", "fill_opt", "assign_op", 
  "end", "assignment", "opt_comma", "memory", "memory_spec_list", 
  "memory_spec", "@@8", "origin_spec", "length_spec", "attributes_opt", 
  "attributes_list", "attributes_string", "startup", "high_level_library", 
  "high_level_library_NAME_list", "low_level_library", 
  "low_level_library_NAME_list", "floating_point_support", 
  "nocrossref_list", "mustbe_exp", "@@9", "exp", "memspec_at_opt", 
  "opt_at", "section", "@@10", "@@11", "@@12", "@@13", "@@14", "@@15", "@@16", 
  "@@17", "@@18", "@@19", "@@20", "@@21", "type", "atype", "opt_exp_with_type", 
  "opt_exp_without_type", "opt_nocrossrefs", "memspec_opt", "phdr_opt", 
  "overlay_section", "@@22", "@@23", "@@24", "phdrs", "phdr_list", "phdr", 
  "@@25", "@@26", "phdr_type", "phdr_qualifiers", "phdr_val", 
  "version_script_file", "@@27", "version", "@@28", "vers_nodes", 
  "vers_node", "verdep", "vers_tag", "vers_defns", "@@29", "@@30", 
  "opt_semicolon", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,   131,   131,   131,   131,   132,   134,   133,   136,   135,
     137,   137,   138,   138,   138,   138,   138,   138,   138,   138,
     138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
     138,   138,   138,   138,   138,   138,   138,   138,   139,   138,
     138,   138,   140,   140,   140,   141,   141,   142,   142,   143,
     143,   143,   144,   144,   144,   146,   145,   147,   147,   148,
     148,   148,   148,   148,   148,   148,   148,   148,   148,   148,
     148,   148,   148,   148,   148,   148,   148,   148,   149,   148,
     148,   150,   148,   148,   148,   151,   151,   151,   151,   151,
     151,   152,   153,   153,   153,   154,   154,   155,   155,   155,
     156,   156,   156,   156,   157,   157,   158,   158,   159,   159,
     159,   160,   161,   160,   162,   162,   162,   162,   162,   162,
     162,   162,   163,   163,   164,   164,   165,   165,   165,   165,
     165,   166,   167,   167,   168,   168,   168,   168,   168,   168,
     168,   168,   169,   169,   170,   170,   170,   171,   171,   172,
     173,   173,   173,   175,   174,   176,   177,   178,   178,   179,
     179,   180,   180,   181,   182,   182,   183,   183,   184,   185,
     185,   186,   186,   187,   187,   187,   189,   188,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   190,   191,   191,
     192,   192,   194,   195,   196,   197,   198,   193,   199,   200,
     201,   202,   203,   193,   204,   205,   193,   206,   206,   206,
     206,   206,   207,   207,   207,   208,   208,   208,   208,   209,
     209,   210,   210,   211,   211,   212,   212,   213,   214,   215,
     216,   213,   217,   218,   218,   220,   221,   219,   222,   223,
     223,   223,   224,   224,   226,   225,   228,   227,   229,   229,
     230,   230,   230,   231,   231,   232,   232,   232,   232,   232,
     233,   233,   234,   233,   235,   233,   236,   236
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     2,     2,     2,     2,     1,     0,     4,     0,     2,
       3,     0,     2,     4,     1,     1,     2,     1,     4,     4,
       3,     2,     4,     3,     4,     4,     4,     4,     4,     2,
       2,     2,     4,     4,     2,     2,     2,     2,     0,     5,
       2,     0,     3,     2,     0,     1,     3,     1,     3,     0,
       1,     3,     1,     2,     3,     0,     2,     2,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       4,     4,     4,     8,     4,     1,     1,     4,     0,     5,
       4,     0,     5,     4,     4,     1,     3,     2,     1,     3,
       2,     4,     2,     2,     0,     4,     2,     1,     1,     1,
       1,     5,     4,     8,     2,     1,     3,     1,     1,     3,
       4,     1,     0,     5,     2,     1,     1,     1,     4,     1,
       4,     4,     2,     1,     0,     1,     1,     1,     1,     1,
       1,     1,     2,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     3,     6,     1,     0,     5,
       2,     3,     0,     0,     7,     3,     3,     0,     3,     1,
       2,     1,     2,     4,     4,     3,     3,     1,     4,     3,
       0,     1,     1,     0,     2,     3,     0,     2,     2,     3,
       4,     2,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       5,     3,     3,     4,     1,     1,     4,     4,     4,     4,
       4,     6,     4,     4,     1,     6,     6,     6,     3,     0,
       4,     0,     0,     0,     0,     0,     0,    16,     0,     0,
       0,     0,     0,    17,     0,     0,     7,     1,     1,     1,
       1,     1,     3,     0,     2,     3,     2,     6,    10,     2,
       1,     0,     1,     2,     0,     0,     3,     0,     0,     0,
       0,    11,     4,     0,     2,     0,     0,     6,     1,     0,
       3,     5,     0,     3,     0,     2,     0,     5,     1,     2,
       4,     5,     6,     1,     2,     0,     2,     4,     4,     8,
       1,     3,     0,     9,     0,     7,     0,     1
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,    55,     8,     6,   274,     1,    58,     2,    11,     4,
       0,     3,     0,    56,     9,     0,   285,     0,   275,   278,
       0,     0,     0,     0,    75,     0,    76,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   171,   172,     0,     0,
      78,     0,     0,     0,    68,    57,    60,    66,     0,    59,
      62,    63,    64,    65,    61,    67,     0,    14,     0,     0,
       0,     0,    15,     0,     0,     0,    17,    44,     0,     0,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
     290,     0,     0,     0,     0,   285,   279,   134,   135,   136,
     137,   176,   138,   139,   140,   141,   176,    94,   263,     0,
       0,     5,    81,     0,     0,     0,     0,     0,     0,     0,
     170,   173,     0,     0,     0,     0,     0,   143,   142,    96,
       0,     0,    38,     0,   204,   214,     0,     0,     0,     0,
       0,     0,     0,   205,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    12,     0,    47,    29,    45,
      30,    16,    31,    21,     0,    34,     0,    35,    50,    36,
      52,    37,    40,    10,     7,     0,     0,     0,     0,   286,
       0,   144,     0,   145,     0,     0,     0,     0,    58,   153,
     152,     0,     0,     0,     0,     0,   165,   167,   148,   148,
     173,     0,    85,    88,     0,     0,     0,     0,     0,     0,
       0,     0,    11,     0,     0,   182,   178,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   181,   183,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    23,     0,     0,    43,     0,
       0,     0,    20,     0,     0,    53,     0,   294,     0,     0,
     280,     0,   291,     0,   177,   222,    91,   228,   234,    93,
      92,   265,   262,   264,     0,    72,    74,   276,   157,     0,
      69,    70,    80,    95,   163,   147,   164,     0,   168,     0,
     173,   174,    83,    87,    90,     0,    77,     0,    71,   176,
      84,     0,    25,    26,    41,    27,    28,   179,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   202,   201,   199,   198,   197,   191,   192,   195,
     196,   193,   194,   189,   190,   187,   188,   184,   185,   186,
      13,    24,    22,    48,    46,    42,    18,    19,    33,    32,
      51,    54,     0,   287,   288,     0,   283,   281,     0,   243,
       0,   243,     0,     0,    82,     0,     0,   149,     0,   150,
     166,   169,   175,    86,    89,    79,     0,   277,    39,   210,
     213,     0,   212,   203,   180,   206,   207,   208,     0,     0,
     209,     0,     0,   296,     0,   292,   284,   282,     0,     0,
     243,     0,   221,   250,     0,   251,   235,   268,   269,     0,
     161,     0,     0,   159,     0,   151,   146,     0,     0,     0,
       0,   200,   297,     0,     0,     0,   237,   238,   239,   240,
     241,   244,     0,     0,     0,     0,   246,     0,   223,   249,
     252,   221,     0,   272,     0,   266,     0,   162,   158,   160,
       0,   148,   211,   215,   216,   217,   295,     0,   296,   242,
       0,   245,     0,     0,   229,    94,     0,   269,     0,     0,
      73,   176,     0,   289,     0,   243,     0,   224,     0,     0,
       0,   270,     0,   267,   155,     0,   154,   293,     0,     0,
     220,   124,   230,   236,   273,   269,   176,     0,   247,   108,
      99,    98,   126,   127,   128,   129,   130,     0,     0,   115,
     117,     0,     0,   116,     0,   100,     0,   111,   119,   123,
     125,     0,     0,     0,   257,   271,   156,     0,     0,   176,
     112,     0,    97,     0,   107,   148,     0,   122,   225,   176,
     114,     0,   243,     0,     0,     0,     0,   131,     0,   105,
       0,     0,   109,     0,   148,   254,     0,   258,   231,     0,
     118,     0,   102,   121,    97,     0,     0,   104,   106,   110,
       0,   219,   120,     0,   254,   248,     0,   113,   101,   253,
       0,   255,   124,   219,     0,     0,   133,     0,   255,     0,
     218,   176,     0,   226,   259,   133,   103,   132,   256,   148,
     255,   232,   227,   133,   148,   260,   233,   148,   261,     0,
       0,     0
};

static const short yydefgoto[] =
{
     609,   102,     9,    10,     7,     8,    14,    77,   202,   151,
     150,   148,   159,   161,     5,     6,    13,    45,   113,   178,
     194,    46,   174,    47,   515,   516,   550,   535,   517,   518,
     548,   519,   520,   521,   522,   546,   593,    96,   119,    48,
     553,    49,   279,   180,   278,   451,   486,   366,   412,   413,
      50,    51,   188,    52,   189,    53,   191,   547,   172,   207,
     581,   438,   270,   359,   463,   491,   555,   599,   360,   478,
     524,   574,   604,   361,   442,   432,   401,   402,   405,   441,
     571,   586,   541,   573,   600,   607,    54,   175,   273,   362,
     469,   408,   445,   467,    11,    12,    55,    56,    18,    19,
     358,    83,    84,   425,   352,   423
};

static const short yypact[] =
{
      -4,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
      57,-32768,   -14,   658,   744,    64,    82,    54,   -14,-32768,
     346,    58,    95,    44,-32768,    78,-32768,   129,   154,   173,
     197,   211,   212,   216,   218,   219,-32768,-32768,   223,   225,
  -32768,   227,   238,   240,-32768,-32768,-32768,-32768,   -82,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   156,-32768,   274,   129,
     281,   557,-32768,   283,   284,   286,-32768,-32768,   288,   289,
     290,   557,   291,   293,   294,   299,   300,   207,   557,   303,
  -32768,   292,   296,   245,   185,    82,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   309,
     310,-32768,-32768,   313,   314,   129,   129,   315,   129,    10,
  -32768,   316,    87,   287,   129,   319,   299,-32768,-32768,-32768,
     275,     5,-32768,     7,-32768,-32768,   557,   557,   557,   298,
     302,   304,   307,-32768,   308,   311,   326,   327,   329,   330,
     331,   332,   333,   557,   557,   646,   312,-32768,   201,-32768,
     206,    65,-32768,-32768,   394,  1308,   209,-32768,-32768,   222,
  -32768,    68,-32768,-32768,  1308,   276,   104,   104,   215,   106,
     279,-32768,   557,-32768,    25,    18,   -28,   210,-32768,-32768,
  -32768,   221,   246,   248,   249,   250,-32768,-32768,     6,    98,
      69,   251,-32768,-32768,    21,    87,   253,   361,    61,   -14,
     557,   557,-32768,   557,   557,-32768,-32768,   870,   557,   557,
     557,   557,   377,   557,   378,   385,   386,   557,   557,   557,
     557,-32768,-32768,   557,   557,   557,   557,   557,   557,   557,
     557,   557,   557,   557,   557,   557,   557,   557,   557,   557,
     557,   557,   557,   557,   557,  1308,   387,   388,-32768,   389,
     557,   557,  1308,   194,   390,-32768,   391,-32768,   271,   278,
  -32768,   395,-32768,   -67,  1308,   346,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   396,-32768,-32768,   707,   364,    37,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   129,-32768,   129,
     316,-32768,-32768,-32768,-32768,   239,-32768,    30,-32768,-32768,
  -32768,   -19,  1308,  1308,   769,  1308,  1308,-32768,   890,   910,
    1170,   930,   285,   950,   297,   301,   320,  1200,  1220,   980,
    1240,  1350,  1327,  1258,  1385,  1399,   786,  1410,  1410,   199,
     199,   199,   199,   183,   183,    88,    88,-32768,-32768,-32768,
    1308,  1308,  1308,-32768,-32768,-32768,  1308,  1308,-32768,-32768,
  -32768,-32768,   104,    90,   106,   356,-32768,-32768,   -37,   455,
     506,   455,   557,   295,-32768,     9,   398,-32768,   313,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   335,-32768,-32768,-32768,
  -32768,   557,-32768,-32768,-32768,-32768,-32768,-32768,   557,   557,
  -32768,   406,   557,   305,   400,-32768,-32768,-32768,   208,   375,
    1278,   401,   328,-32768,  1370,   340,-32768,  1308,    24,   422,
  -32768,   424,     8,-32768,   351,-32768,-32768,  1000,  1020,  1040,
     336,  1308,   106,   383,   104,   104,-32768,-32768,-32768,-32768,
  -32768,-32768,   337,   557,    62,   413,-32768,   402,-32768,-32768,
  -32768,   328,   420,   403,   408,-32768,   338,-32768,-32768,-32768,
     428,   348,-32768,-32768,-32768,-32768,-32768,   349,   305,-32768,
    1060,-32768,   557,   425,-32768,-32768,   557,    24,   557,   350,
  -32768,-32768,   392,   106,   421,   203,  1090,-32768,   427,   198,
    1110,-32768,  1130,-32768,-32768,   469,-32768,-32768,   444,   466,
  -32768,   607,-32768,-32768,-32768,    24,-32768,   557,-32768,   443,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   446,   447,-32768,
  -32768,   450,   451,-32768,    32,-32768,   452,-32768,-32768,-32768,
     607,   438,   459,   -82,-32768,-32768,-32768,  1150,    96,-32768,
  -32768,    67,-32768,   461,-32768,   -69,    32,-32768,-32768,-32768,
  -32768,    26,   462,   374,   464,   376,   380,-32768,    12,-32768,
      16,    72,-32768,    32,   128,   478,   381,-32768,-32768,   495,
  -32768,    67,-32768,-32768,   393,   399,    67,-32768,-32768,-32768,
     508,   423,-32768,   463,   478,-32768,    36,-32768,-32768,-32768,
     488,-32768,   607,   423,    67,   512,    29,   465,-32768,   407,
  -32768,-32768,   516,-32768,-32768,    29,-32768,-32768,-32768,   348,
  -32768,-32768,-32768,    29,   348,-32768,-32768,   348,-32768,   532,
     534,-32768
};

static const short yypgoto[] =
{
  -32768,   -52,-32768,-32768,-32768,-32768,   339,-32768,-32768,-32768,
  -32768,-32768,-32768,   419,-32768,-32768,   360,-32768,-32768,-32768,
     344,-32768,    75,  -170,  -325,  -490,   -15,    11,    -6,-32768,
  -32768,    28,-32768,   -33,-32768,   -41,  -502,-32768,    31,  -468,
    -186,-32768,-32768,  -258,-32768,-32768,-32768,-32768,-32768,   139,
  -32768,-32768,-32768,-32768,-32768,-32768,  -171,   -91,-32768,   -60,
     -30,   116,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,  -390,   202,-32768,-32768,
     -10,  -550,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,  -392,-32768,-32768,-32768,-32768,-32768,   363,   -12,
  -32768,   480,  -158,-32768,-32768,   108
};


#define	YYLAST		1444


static const short yytable[] =
{
     171,   145,   287,   289,   269,   173,    86,   122,   258,   259,
     435,   155,   410,   410,   101,   200,   564,   203,   164,   291,
     532,   369,   271,   523,   534,   293,   294,   500,   443,   265,
     557,   500,    16,   377,   293,   294,   532,    16,   595,   591,
     532,   179,   117,   118,   501,   592,   534,   500,   501,   356,
     603,   500,   523,   182,   183,   285,   185,   187,   357,   552,
     533,    15,   196,   568,   501,   255,   205,   206,   501,   248,
     272,   532,   255,   190,    78,   481,   532,   266,   558,   396,
     533,    99,   500,   221,   222,   489,   245,   500,   397,   367,
     267,   192,   193,   601,   252,    32,   274,    17,   275,   501,
     532,   605,    17,   525,   501,    85,     1,     2,     3,    97,
     415,   500,   264,   268,   523,   100,   444,     4,    42,   372,
     239,   240,   241,   426,   427,   428,   429,   430,   501,   201,
     285,   204,   286,   101,   448,   512,   186,   411,   411,   514,
     302,   303,   566,   305,   306,   295,    98,   296,   308,   309,
     310,   311,   559,   313,   295,   512,   375,   317,   318,   319,
     320,   368,   584,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   256,   543,   300,   431,   249,
     346,   347,   256,   290,   393,   544,    79,   348,   349,    80,
      81,    82,   265,   545,   261,   103,   549,   262,   376,   394,
     104,   124,   125,   237,   238,   239,   240,   241,    79,   544,
     261,    80,   285,   262,   288,   567,   545,   235,   236,   237,
     238,   239,   240,   241,   105,   370,   549,   371,   126,   127,
     434,   578,   488,   373,   374,   128,   129,   130,   106,   107,
     493,   567,   285,   108,   569,   109,   110,   131,   132,   589,
     111,   133,   112,   267,   114,   472,   457,   458,    32,   426,
     427,   428,   429,   430,   134,   115,   120,   116,   121,   135,
     136,   137,   138,   139,   140,   123,   268,   146,   147,    86,
     149,    42,   152,   153,   154,   156,   157,   168,   158,   400,
     404,   400,   407,   160,   162,   141,   163,   165,   166,   269,
     169,   142,   167,   176,   177,   124,   125,   179,   181,   184,
     190,   417,   243,   197,   195,   246,   199,   257,   418,   419,
     247,   263,   421,   253,   431,   208,   276,   143,   144,   209,
     260,   210,   126,   127,   211,   212,   254,   280,   213,   128,
     129,   130,    87,    88,    89,    90,    91,    92,    93,    94,
      95,   131,   132,   214,   215,   133,   216,   217,   218,   219,
     220,   299,   281,   460,   282,   283,   284,   292,   134,   298,
     484,   312,   314,   135,   136,   137,   138,   139,   140,   315,
     316,   343,   344,   345,   350,   351,   353,   124,   125,   355,
     363,   365,   476,   354,   250,   526,   480,   395,   482,   141,
     420,   383,   433,   602,   414,   142,   424,   436,   606,   409,
     437,   608,   440,   385,   126,   127,   446,   386,   447,   461,
     422,   128,   129,   130,   450,   456,   244,   527,   471,   462,
     466,   143,   144,   131,   132,   468,   387,   133,   556,    87,
      88,    89,    90,    91,    92,    93,    94,    95,   124,   125,
     134,   416,   455,   459,   470,   135,   136,   137,   138,   139,
     140,   465,   285,   487,   473,   483,   477,   485,   492,   496,
     -97,   497,   498,   528,   529,   126,   127,   530,   531,   536,
     538,   141,   398,   129,   130,   399,   539,   142,   551,   434,
     560,   561,   562,   570,   131,   132,   563,   572,   133,   124,
     125,   575,   579,   585,   582,   580,   590,   594,   251,  -108,
     598,   134,   403,   143,   144,   577,   135,   136,   137,   138,
     139,   140,   610,   596,   611,   198,   126,   127,   277,   297,
     479,   304,   565,   128,   129,   130,   576,   554,   537,   587,
     597,   449,   141,   588,   540,   131,   132,   464,   142,   133,
     124,   125,   301,   406,   583,   170,   474,     0,     0,     0,
       0,     0,   134,     0,     0,     0,     0,   135,   136,   137,
     138,   139,   140,     0,   143,   144,     0,   126,   127,     0,
       0,     0,     0,     0,   128,   129,   130,     0,     0,     0,
       0,     0,     0,   141,     0,     0,   131,   132,     0,   142,
     133,   499,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   500,   134,     0,     0,     0,     0,   135,   136,
     137,   138,   139,   140,     0,   143,   144,     0,     0,   501,
       0,     0,     0,     0,     0,     0,     0,     0,   502,   503,
     504,   505,   506,     0,   141,   507,     0,     0,     0,     0,
     142,   223,    20,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,     0,     0,     0,     0,     0,   143,   144,     0,     0,
       0,   508,     0,   509,     0,     0,     0,   510,     0,     0,
      42,     0,     0,     0,    21,    22,     0,     0,     0,     0,
       0,    20,    23,    24,    25,    26,    27,    28,     0,     0,
       0,     0,     0,     0,     0,    29,    30,    31,    32,   511,
     512,     0,   513,     0,   514,    33,    34,    35,    36,    37,
      38,     0,     0,   364,     0,    39,    40,    41,    57,     0,
       0,    42,     0,    21,    22,     0,     0,     0,     0,     0,
       0,    23,    24,    25,    26,    27,    28,     0,     0,     0,
     242,     0,    43,    57,    29,    30,    31,    32,  -276,     0,
       0,     0,    58,    44,    33,    34,    35,    36,    37,    38,
       0,     0,     0,     0,    39,    40,    41,     0,     0,     0,
      42,     0,    59,     0,     0,   378,     0,    58,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,    43,     0,     0,     0,     0,     0,    59,     0,     0,
       0,     0,    44,     0,     0,    60,     0,     0,    61,    62,
      63,    64,    65,   -41,    66,    67,    68,     0,    69,    70,
      71,    72,    73,     0,     0,     0,     0,    74,    75,    76,
      60,     0,     0,    61,    62,    63,    64,    65,     0,    66,
      67,    68,     0,    69,    70,    71,    72,    73,     0,     0,
       0,     0,    74,    75,    76,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,     0,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   223,   307,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   379,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   380,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   382,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   384,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   223,   390,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   452,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   453,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   454,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   475,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   223,   490,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   494,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   495,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,     0,   542,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   223,   381,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,     0,     0,   434,     0,     0,     0,     0,
       0,     0,     0,   223,   388,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,     0,   389,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,     0,     0,   391,   223,   392,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   223,   439,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241
};

static const short yycheck[] =
{
      91,    61,   188,   189,   174,    96,    18,    59,   166,   167,
     400,    71,     4,     4,     4,    10,     4,    10,    78,   190,
       4,   279,     4,   491,   514,     4,     5,    15,     4,     4,
       4,    15,    51,    52,     4,     5,     4,    51,   588,    10,
       4,     4,   124,   125,    32,    16,   536,    15,    32,   116,
     600,    15,   520,   105,   106,   124,   108,   109,   125,   128,
      48,     4,   114,   553,    32,     4,   126,   127,    32,     4,
      52,     4,     4,     4,    10,   467,     4,    52,    52,   116,
      48,    37,    15,   143,   144,   475,   146,    15,   125,    52,
      65,     4,     5,   595,   154,    70,   124,   116,   126,    32,
       4,   603,   116,   495,    32,    51,   110,   111,   112,    51,
     368,    15,   172,    88,   582,    37,    92,   121,    93,   290,
      32,    33,    34,    61,    62,    63,    64,    65,    32,   124,
     124,   124,   126,     4,   126,   123,   126,   129,   129,   127,
     200,   201,   126,   203,   204,   124,    51,   126,   208,   209,
     210,   211,   542,   213,   124,   123,   126,   217,   218,   219,
     220,   124,   126,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   124,    90,   126,   126,   124,
     250,   251,   124,   124,   352,   123,   114,     3,     4,   117,
     118,   119,     4,   528,   114,    51,   531,   117,   299,   119,
      37,     3,     4,    30,    31,    32,    33,    34,   114,   123,
     114,   117,   124,   117,   126,   550,   551,    28,    29,    30,
      31,    32,    33,    34,    37,   287,   561,   289,    30,    31,
      37,   566,    39,     4,     5,    37,    38,    39,    37,    37,
      52,   576,   124,    37,   126,    37,    37,    49,    50,   584,
      37,    53,    37,    65,    37,   451,   424,   425,    70,    61,
      62,    63,    64,    65,    66,    37,   120,    37,     4,    71,
      72,    73,    74,    75,    76,     4,    88,     4,     4,   301,
       4,    93,     4,     4,     4,     4,     3,    52,     4,   359,
     360,   361,   362,     4,     4,    97,    99,     4,    16,   479,
     125,   103,    16,     4,     4,     3,     4,     4,     4,     4,
       4,   381,    10,     4,    37,   124,    51,    51,   388,   389,
     124,    52,   392,   124,   126,    37,   126,   129,   130,    37,
     125,    37,    30,    31,    37,    37,   124,   126,    37,    37,
      38,    39,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    49,    50,    37,    37,    53,    37,    37,    37,    37,
      37,    10,   126,   433,   126,   126,   126,   126,    66,   126,
     471,     4,     4,    71,    72,    73,    74,    75,    76,     4,
       4,     4,     4,     4,     4,     4,   125,     3,     4,     4,
       4,    37,   462,   125,    10,   496,   466,    51,   468,    97,
       4,   126,    37,   599,    16,   103,    16,    16,   604,   124,
      92,   607,    82,   126,    30,    31,     4,   126,     4,    16,
     125,    37,    38,    39,    83,    52,   124,   497,    10,    37,
      37,   129,   130,    49,    50,    37,   126,    53,   539,     6,
       7,     8,     9,    10,    11,    12,    13,    14,     3,     4,
      66,   126,   126,   126,   126,    71,    72,    73,    74,    75,
      76,    51,   124,    52,   125,   125,    51,    85,    51,    10,
      37,    37,    16,    37,    37,    30,    31,    37,    37,    37,
      52,    97,    37,    38,    39,    40,    37,   103,    37,    37,
     126,    37,   126,    25,    49,    50,   126,   126,    53,     3,
       4,    16,     4,    25,    51,    92,     4,    52,   124,   126,
       4,    66,    16,   129,   130,   126,    71,    72,    73,    74,
      75,    76,     0,   126,     0,   116,    30,    31,   178,   195,
     465,   202,   548,    37,    38,    39,   561,   536,   520,   582,
     591,   412,    97,   583,   523,    49,    50,   441,   103,    53,
       3,     4,   199,   361,   574,    85,   458,    -1,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    75,    76,    -1,   129,   130,    -1,    30,    31,    -1,
      -1,    -1,    -1,    -1,    37,    38,    39,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    -1,    -1,    49,    50,    -1,   103,
      53,     4,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    15,    66,    -1,    -1,    -1,    -1,    71,    72,
      73,    74,    75,    76,    -1,   129,   130,    -1,    -1,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    42,
      43,    44,    45,    -1,    97,    48,    -1,    -1,    -1,    -1,
     103,    15,     4,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,   129,   130,    -1,    -1,
      -1,    84,    -1,    86,    -1,    -1,    -1,    90,    -1,    -1,
      93,    -1,    -1,    -1,    46,    47,    -1,    -1,    -1,    -1,
      -1,     4,    54,    55,    56,    57,    58,    59,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,   122,
     123,    -1,   125,    -1,   127,    77,    78,    79,    80,    81,
      82,    -1,    -1,    36,    -1,    87,    88,    89,     4,    -1,
      -1,    93,    -1,    46,    47,    -1,    -1,    -1,    -1,    -1,
      -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    -1,
     124,    -1,   114,     4,    67,    68,    69,    70,   120,    -1,
      -1,    -1,    38,   125,    77,    78,    79,    80,    81,    82,
      -1,    -1,    -1,    -1,    87,    88,    89,    -1,    -1,    -1,
      93,    -1,    58,    -1,    -1,    36,    -1,    38,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,   114,    -1,    -1,    -1,    -1,    -1,    58,    -1,    -1,
      -1,    -1,   125,    -1,    -1,    91,    -1,    -1,    94,    95,
      96,    97,    98,    99,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,    -1,    -1,    -1,    -1,   113,   114,   115,
      91,    -1,    -1,    94,    95,    96,    97,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,    -1,    -1,
      -1,    -1,   113,   114,   115,    15,    -1,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,    -1,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,    -1,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,    -1,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,    -1,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,   126,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,   126,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    15,   124,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    15,   124,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,   124,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    -1,    -1,   124,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison-1.35/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison-1.35/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 6:
#line 173 "ldgram.y"
{ ldlex_defsym(); }
    break;
case 7:
#line 175 "ldgram.y"
{
		  ldlex_popstate();
		  lang_add_assignment(exp_assop(yyvsp[-1].token,yyvsp[-2].name,yyvsp[0].etree));
		}
    break;
case 8:
#line 183 "ldgram.y"
{
		  ldlex_mri_script ();
		  PUSH_ERROR (_("MRI style script"));
		}
    break;
case 9:
#line 188 "ldgram.y"
{
		  ldlex_popstate ();
		  mri_draw_tree ();
		  POP_ERROR ();
		}
    break;
case 14:
#line 203 "ldgram.y"
{
			einfo(_("%P%F: unrecognised keyword in MRI style script '%s'\n"),yyvsp[0].name);
			}
    break;
case 15:
#line 206 "ldgram.y"
{
			config.map_filename = "-";
			}
    break;
case 18:
#line 212 "ldgram.y"
{ mri_public(yyvsp[-2].name, yyvsp[0].etree); }
    break;
case 19:
#line 214 "ldgram.y"
{ mri_public(yyvsp[-2].name, yyvsp[0].etree); }
    break;
case 20:
#line 216 "ldgram.y"
{ mri_public(yyvsp[-1].name, yyvsp[0].etree); }
    break;
case 21:
#line 218 "ldgram.y"
{ mri_format(yyvsp[0].name); }
    break;
case 22:
#line 220 "ldgram.y"
{ mri_output_section(yyvsp[-2].name, yyvsp[0].etree);}
    break;
case 23:
#line 222 "ldgram.y"
{ mri_output_section(yyvsp[-1].name, yyvsp[0].etree);}
    break;
case 24:
#line 224 "ldgram.y"
{ mri_output_section(yyvsp[-2].name, yyvsp[0].etree);}
    break;
case 25:
#line 226 "ldgram.y"
{ mri_align(yyvsp[-2].name,yyvsp[0].etree); }
    break;
case 26:
#line 228 "ldgram.y"
{ mri_align(yyvsp[-2].name,yyvsp[0].etree); }
    break;
case 27:
#line 230 "ldgram.y"
{ mri_alignmod(yyvsp[-2].name,yyvsp[0].etree); }
    break;
case 28:
#line 232 "ldgram.y"
{ mri_alignmod(yyvsp[-2].name,yyvsp[0].etree); }
    break;
case 31:
#line 236 "ldgram.y"
{ mri_name(yyvsp[0].name); }
    break;
case 32:
#line 238 "ldgram.y"
{ mri_alias(yyvsp[-2].name,yyvsp[0].name,0);}
    break;
case 33:
#line 240 "ldgram.y"
{ mri_alias (yyvsp[-2].name, 0, (int) yyvsp[0].bigint.integer); }
    break;
case 34:
#line 242 "ldgram.y"
{ mri_base(yyvsp[0].etree); }
    break;
case 35:
#line 244 "ldgram.y"
{ mri_truncate ((unsigned int) yyvsp[0].bigint.integer); }
    break;
case 38:
#line 248 "ldgram.y"
{ ldlex_script (); ldfile_open_command_file(yyvsp[0].name); }
    break;
case 39:
#line 250 "ldgram.y"
{ ldlex_popstate (); }
    break;
case 40:
#line 252 "ldgram.y"
{ lang_add_entry (yyvsp[0].name, FALSE); }
    break;
case 42:
#line 257 "ldgram.y"
{ mri_order(yyvsp[0].name); }
    break;
case 43:
#line 258 "ldgram.y"
{ mri_order(yyvsp[0].name); }
    break;
case 45:
#line 264 "ldgram.y"
{ mri_load(yyvsp[0].name); }
    break;
case 46:
#line 265 "ldgram.y"
{ mri_load(yyvsp[0].name); }
    break;
case 47:
#line 270 "ldgram.y"
{ mri_only_load(yyvsp[0].name); }
    break;
case 48:
#line 272 "ldgram.y"
{ mri_only_load(yyvsp[0].name); }
    break;
case 49:
#line 276 "ldgram.y"
{ yyval.name = NULL; }
    break;
case 52:
#line 283 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); }
    break;
case 53:
#line 285 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); }
    break;
case 54:
#line 287 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); }
    break;
case 55:
#line 291 "ldgram.y"
{
	 ldlex_both();
	}
    break;
case 56:
#line 295 "ldgram.y"
{
	ldlex_popstate();
	}
    break;
case 69:
#line 320 "ldgram.y"
{ lang_add_target(yyvsp[-1].name); }
    break;
case 70:
#line 322 "ldgram.y"
{ ldfile_add_library_path (yyvsp[-1].name, FALSE); }
    break;
case 71:
#line 324 "ldgram.y"
{ lang_add_output(yyvsp[-1].name, 1); }
    break;
case 72:
#line 326 "ldgram.y"
{ lang_add_output_format (yyvsp[-1].name, (char *) NULL,
					    (char *) NULL, 1); }
    break;
case 73:
#line 329 "ldgram.y"
{ lang_add_output_format (yyvsp[-5].name, yyvsp[-3].name, yyvsp[-1].name, 1); }
    break;
case 74:
#line 331 "ldgram.y"
{ ldfile_set_output_arch(yyvsp[-1].name); }
    break;
case 75:
#line 333 "ldgram.y"
{ command_line.force_common_definition = TRUE ; }
    break;
case 76:
#line 335 "ldgram.y"
{ command_line.inhibit_common_definition = TRUE ; }
    break;
case 78:
#line 338 "ldgram.y"
{ lang_enter_group (); }
    break;
case 79:
#line 340 "ldgram.y"
{ lang_leave_group (); }
    break;
case 80:
#line 342 "ldgram.y"
{ lang_add_map(yyvsp[-1].name); }
    break;
case 81:
#line 344 "ldgram.y"
{ ldlex_script (); ldfile_open_command_file(yyvsp[0].name); }
    break;
case 82:
#line 346 "ldgram.y"
{ ldlex_popstate (); }
    break;
case 83:
#line 348 "ldgram.y"
{
		  lang_add_nocrossref (yyvsp[-1].nocrossref);
		}
    break;
case 85:
#line 356 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;
case 86:
#line 359 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;
case 87:
#line 362 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;
case 88:
#line 365 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;
case 89:
#line 368 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;
case 90:
#line 371 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;
case 95:
#line 387 "ldgram.y"
{ lang_add_entry (yyvsp[-1].name, FALSE); }
    break;
case 97:
#line 395 "ldgram.y"
{
			  yyval.cname = yyvsp[0].name;
			}
    break;
case 98:
#line 399 "ldgram.y"
{
			  yyval.cname = "*";
			}
    break;
case 99:
#line 403 "ldgram.y"
{
			  yyval.cname = "?";
			}
    break;
case 100:
#line 410 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[0].cname;
			  yyval.wildcard.sorted = FALSE;
			  yyval.wildcard.exclude_name_list = NULL;
			}
    break;
case 101:
#line 416 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[0].cname;
			  yyval.wildcard.sorted = FALSE;
			  yyval.wildcard.exclude_name_list = yyvsp[-2].name_list;
			}
    break;
case 102:
#line 422 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-1].cname;
			  yyval.wildcard.sorted = TRUE;
			  yyval.wildcard.exclude_name_list = NULL;
			}
    break;
case 103:
#line 428 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-1].cname;
			  yyval.wildcard.sorted = TRUE;
			  yyval.wildcard.exclude_name_list = yyvsp[-3].name_list;
			}
    break;
case 104:
#line 437 "ldgram.y"
{
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = yyvsp[0].cname;
			  tmp->next = yyvsp[-1].name_list;
			  yyval.name_list = tmp;
			}
    break;
case 105:
#line 446 "ldgram.y"
{
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = yyvsp[0].cname;
			  tmp->next = NULL;
			  yyval.name_list = tmp;
			}
    break;
case 106:
#line 457 "ldgram.y"
{
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = yyvsp[-2].wildcard_list;
			  tmp->spec = yyvsp[0].wildcard;
			  yyval.wildcard_list = tmp;
			}
    break;
case 107:
#line 466 "ldgram.y"
{
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = NULL;
			  tmp->spec = yyvsp[0].wildcard;
			  yyval.wildcard_list = tmp;
			}
    break;
case 108:
#line 477 "ldgram.y"
{
			  struct wildcard_spec tmp;
			  tmp.name = yyvsp[0].name;
			  tmp.exclude_name_list = NULL;
			  tmp.sorted = FALSE;
			  lang_add_wild (&tmp, NULL, ldgram_had_keep);
			}
    break;
case 109:
#line 485 "ldgram.y"
{
			  lang_add_wild (NULL, yyvsp[-1].wildcard_list, ldgram_had_keep);
			}
    break;
case 110:
#line 489 "ldgram.y"
{
			  lang_add_wild (&yyvsp[-3].wildcard, yyvsp[-1].wildcard_list, ldgram_had_keep);
			}
    break;
case 112:
#line 497 "ldgram.y"
{ ldgram_had_keep = TRUE; }
    break;
case 113:
#line 499 "ldgram.y"
{ ldgram_had_keep = FALSE; }
    break;
case 115:
#line 505 "ldgram.y"
{
 		lang_add_attribute(lang_object_symbols_statement_enum);
	      	}
    break;
case 117:
#line 510 "ldgram.y"
{

		  lang_add_attribute(lang_constructors_statement_enum);
		}
    break;
case 118:
#line 515 "ldgram.y"
{
		  constructors_sorted = TRUE;
		  lang_add_attribute (lang_constructors_statement_enum);
		}
    break;
case 120:
#line 521 "ldgram.y"
{
			  lang_add_data ((int) yyvsp[-3].integer, yyvsp[-1].etree);
			}
    break;
case 121:
#line 526 "ldgram.y"
{
			  lang_add_fill (yyvsp[-1].fill);
			}
    break;
case 126:
#line 543 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 127:
#line 545 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 128:
#line 547 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 129:
#line 549 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 130:
#line 551 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 131:
#line 556 "ldgram.y"
{
		  yyval.fill = exp_get_fill (yyvsp[0].etree,
				     0,
				     "fill value",
				     lang_first_phase_enum);
		}
    break;
case 132:
#line 566 "ldgram.y"
{ yyval.fill = yyvsp[0].fill; }
    break;
case 133:
#line 567 "ldgram.y"
{ yyval.fill = (fill_type *) 0; }
    break;
case 134:
#line 572 "ldgram.y"
{ yyval.token = '+'; }
    break;
case 135:
#line 574 "ldgram.y"
{ yyval.token = '-'; }
    break;
case 136:
#line 576 "ldgram.y"
{ yyval.token = '*'; }
    break;
case 137:
#line 578 "ldgram.y"
{ yyval.token = '/'; }
    break;
case 138:
#line 580 "ldgram.y"
{ yyval.token = LSHIFT; }
    break;
case 139:
#line 582 "ldgram.y"
{ yyval.token = RSHIFT; }
    break;
case 140:
#line 584 "ldgram.y"
{ yyval.token = '&'; }
    break;
case 141:
#line 586 "ldgram.y"
{ yyval.token = '|'; }
    break;
case 144:
#line 596 "ldgram.y"
{
		  lang_add_assignment (exp_assop (yyvsp[-1].token, yyvsp[-2].name, yyvsp[0].etree));
		}
    break;
case 145:
#line 600 "ldgram.y"
{
		  lang_add_assignment (exp_assop ('=', yyvsp[-2].name,
						  exp_binop (yyvsp[-1].token,
							     exp_nameop (NAME,
									 yyvsp[-2].name),
							     yyvsp[0].etree)));
		}
    break;
case 146:
#line 608 "ldgram.y"
{
		  lang_add_assignment (exp_provide (yyvsp[-3].name, yyvsp[-1].etree));
		}
    break;
case 153:
#line 630 "ldgram.y"
{ region = lang_memory_region_lookup(yyvsp[0].name); }
    break;
case 154:
#line 633 "ldgram.y"
{}
    break;
case 155:
#line 638 "ldgram.y"
{ region->current =
		 region->origin =
		 exp_get_vma(yyvsp[0].etree, 0L,"origin", lang_first_phase_enum);
}
    break;
case 156:
#line 646 "ldgram.y"
{ region->length = exp_get_vma(yyvsp[0].etree,
					       ~((bfd_vma)0),
					       "length",
					       lang_first_phase_enum);
		}
    break;
case 157:
#line 655 "ldgram.y"
{ /* dummy action to avoid bison 1.25 error message */ }
    break;
case 161:
#line 666 "ldgram.y"
{ lang_set_flags (region, yyvsp[0].name, 0); }
    break;
case 162:
#line 668 "ldgram.y"
{ lang_set_flags (region, yyvsp[0].name, 1); }
    break;
case 163:
#line 673 "ldgram.y"
{ lang_startup(yyvsp[-1].name); }
    break;
case 165:
#line 679 "ldgram.y"
{ ldemul_hll((char *)NULL); }
    break;
case 166:
#line 684 "ldgram.y"
{ ldemul_hll(yyvsp[0].name); }
    break;
case 167:
#line 686 "ldgram.y"
{ ldemul_hll(yyvsp[0].name); }
    break;
case 169:
#line 694 "ldgram.y"
{ ldemul_syslib(yyvsp[0].name); }
    break;
case 171:
#line 700 "ldgram.y"
{ lang_float(TRUE); }
    break;
case 172:
#line 702 "ldgram.y"
{ lang_float(FALSE); }
    break;
case 173:
#line 707 "ldgram.y"
{
		  yyval.nocrossref = NULL;
		}
    break;
case 174:
#line 711 "ldgram.y"
{
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = yyvsp[-1].name;
		  n->next = yyvsp[0].nocrossref;
		  yyval.nocrossref = n;
		}
    break;
case 175:
#line 720 "ldgram.y"
{
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = yyvsp[-2].name;
		  n->next = yyvsp[0].nocrossref;
		  yyval.nocrossref = n;
		}
    break;
case 176:
#line 730 "ldgram.y"
{ ldlex_expression(); }
    break;
case 177:
#line 732 "ldgram.y"
{ ldlex_popstate(); yyval.etree=yyvsp[0].etree;}
    break;
case 178:
#line 737 "ldgram.y"
{ yyval.etree = exp_unop('-', yyvsp[0].etree); }
    break;
case 179:
#line 739 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
case 180:
#line 741 "ldgram.y"
{ yyval.etree = exp_unop((int) yyvsp[-3].integer,yyvsp[-1].etree); }
    break;
case 181:
#line 743 "ldgram.y"
{ yyval.etree = exp_unop('!', yyvsp[0].etree); }
    break;
case 182:
#line 745 "ldgram.y"
{ yyval.etree = yyvsp[0].etree; }
    break;
case 183:
#line 747 "ldgram.y"
{ yyval.etree = exp_unop('~', yyvsp[0].etree);}
    break;
case 184:
#line 750 "ldgram.y"
{ yyval.etree = exp_binop('*', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 185:
#line 752 "ldgram.y"
{ yyval.etree = exp_binop('/', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 186:
#line 754 "ldgram.y"
{ yyval.etree = exp_binop('%', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 187:
#line 756 "ldgram.y"
{ yyval.etree = exp_binop('+', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 188:
#line 758 "ldgram.y"
{ yyval.etree = exp_binop('-' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 189:
#line 760 "ldgram.y"
{ yyval.etree = exp_binop(LSHIFT , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 190:
#line 762 "ldgram.y"
{ yyval.etree = exp_binop(RSHIFT , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 191:
#line 764 "ldgram.y"
{ yyval.etree = exp_binop(EQ , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 192:
#line 766 "ldgram.y"
{ yyval.etree = exp_binop(NE , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 193:
#line 768 "ldgram.y"
{ yyval.etree = exp_binop(LE , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 194:
#line 770 "ldgram.y"
{ yyval.etree = exp_binop(GE , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 195:
#line 772 "ldgram.y"
{ yyval.etree = exp_binop('<' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 196:
#line 774 "ldgram.y"
{ yyval.etree = exp_binop('>' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 197:
#line 776 "ldgram.y"
{ yyval.etree = exp_binop('&' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 198:
#line 778 "ldgram.y"
{ yyval.etree = exp_binop('^' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 199:
#line 780 "ldgram.y"
{ yyval.etree = exp_binop('|' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 200:
#line 782 "ldgram.y"
{ yyval.etree = exp_trinop('?' , yyvsp[-4].etree, yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 201:
#line 784 "ldgram.y"
{ yyval.etree = exp_binop(ANDAND , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 202:
#line 786 "ldgram.y"
{ yyval.etree = exp_binop(OROR , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 203:
#line 788 "ldgram.y"
{ yyval.etree = exp_nameop(DEFINED, yyvsp[-1].name); }
    break;
case 204:
#line 790 "ldgram.y"
{ yyval.etree = exp_bigintop (yyvsp[0].bigint.integer, yyvsp[0].bigint.str); }
    break;
case 205:
#line 792 "ldgram.y"
{ yyval.etree = exp_nameop(SIZEOF_HEADERS,0); }
    break;
case 206:
#line 795 "ldgram.y"
{ yyval.etree = exp_nameop(SIZEOF,yyvsp[-1].name); }
    break;
case 207:
#line 797 "ldgram.y"
{ yyval.etree = exp_nameop(ADDR,yyvsp[-1].name); }
    break;
case 208:
#line 799 "ldgram.y"
{ yyval.etree = exp_nameop(LOADADDR,yyvsp[-1].name); }
    break;
case 209:
#line 801 "ldgram.y"
{ yyval.etree = exp_unop(ABSOLUTE, yyvsp[-1].etree); }
    break;
case 210:
#line 803 "ldgram.y"
{ yyval.etree = exp_unop(ALIGN_K,yyvsp[-1].etree); }
    break;
case 211:
#line 805 "ldgram.y"
{ yyval.etree = exp_binop (DATA_SEGMENT_ALIGN, yyvsp[-3].etree, yyvsp[-1].etree); }
    break;
case 212:
#line 807 "ldgram.y"
{ yyval.etree = exp_unop(DATA_SEGMENT_END, yyvsp[-1].etree); }
    break;
case 213:
#line 809 "ldgram.y"
{ yyval.etree = exp_unop(ALIGN_K,yyvsp[-1].etree); }
    break;
case 214:
#line 811 "ldgram.y"
{ yyval.etree = exp_nameop(NAME,yyvsp[0].name); }
    break;
case 215:
#line 813 "ldgram.y"
{ yyval.etree = exp_binop (MAX_K, yyvsp[-3].etree, yyvsp[-1].etree ); }
    break;
case 216:
#line 815 "ldgram.y"
{ yyval.etree = exp_binop (MIN_K, yyvsp[-3].etree, yyvsp[-1].etree ); }
    break;
case 217:
#line 817 "ldgram.y"
{ yyval.etree = exp_assert (yyvsp[-3].etree, yyvsp[-1].name); }
    break;
case 218:
#line 822 "ldgram.y"
{ yyval.name = yyvsp[0].name; }
    break;
case 219:
#line 823 "ldgram.y"
{ yyval.name = 0; }
    break;
case 220:
#line 827 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
case 221:
#line 828 "ldgram.y"
{ yyval.etree = 0; }
    break;
case 222:
#line 831 "ldgram.y"
{ ldlex_expression(); }
    break;
case 223:
#line 833 "ldgram.y"
{ ldlex_popstate (); ldlex_script (); }
    break;
case 224:
#line 835 "ldgram.y"
{
			  lang_enter_output_section_statement(yyvsp[-5].name, yyvsp[-3].etree,
							      sectype,
							      0, 0, 0, yyvsp[-2].etree);
			}
    break;
case 225:
#line 841 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); }
    break;
case 226:
#line 843 "ldgram.y"
{
		  ldlex_popstate ();
		  lang_leave_output_section_statement (yyvsp[0].fill, yyvsp[-3].name, yyvsp[-1].section_phdr, yyvsp[-2].name);
		}
    break;
case 227:
#line 848 "ldgram.y"
{}
    break;
case 228:
#line 850 "ldgram.y"
{ ldlex_expression (); }
    break;
case 229:
#line 852 "ldgram.y"
{ ldlex_popstate (); ldlex_script (); }
    break;
case 230:
#line 854 "ldgram.y"
{
			  lang_enter_overlay (yyvsp[-4].etree);
			}
    break;
case 231:
#line 859 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); }
    break;
case 232:
#line 861 "ldgram.y"
{
			  ldlex_popstate ();
			  lang_leave_overlay (yyvsp[-10].etree, (int) yyvsp[-11].integer,
					      yyvsp[0].fill, yyvsp[-3].name, yyvsp[-1].section_phdr, yyvsp[-2].name);
			}
    break;
case 234:
#line 871 "ldgram.y"
{ ldlex_expression (); }
    break;
case 235:
#line 873 "ldgram.y"
{
		  ldlex_popstate ();
		  lang_add_assignment (exp_assop ('=', ".", yyvsp[0].etree));
		}
    break;
case 237:
#line 881 "ldgram.y"
{ sectype = noload_section; }
    break;
case 238:
#line 882 "ldgram.y"
{ sectype = dsect_section; }
    break;
case 239:
#line 883 "ldgram.y"
{ sectype = copy_section; }
    break;
case 240:
#line 884 "ldgram.y"
{ sectype = info_section; }
    break;
case 241:
#line 885 "ldgram.y"
{ sectype = overlay_section; }
    break;
case 243:
#line 890 "ldgram.y"
{ sectype = normal_section; }
    break;
case 244:
#line 891 "ldgram.y"
{ sectype = normal_section; }
    break;
case 245:
#line 895 "ldgram.y"
{ yyval.etree = yyvsp[-2].etree; }
    break;
case 246:
#line 896 "ldgram.y"
{ yyval.etree = (etree_type *)NULL;  }
    break;
case 247:
#line 901 "ldgram.y"
{ yyval.etree = yyvsp[-3].etree; }
    break;
case 248:
#line 903 "ldgram.y"
{ yyval.etree = yyvsp[-7].etree; }
    break;
case 249:
#line 907 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
case 250:
#line 908 "ldgram.y"
{ yyval.etree = (etree_type *) NULL;  }
    break;
case 251:
#line 913 "ldgram.y"
{ yyval.integer = 0; }
    break;
case 252:
#line 915 "ldgram.y"
{ yyval.integer = 1; }
    break;
case 253:
#line 920 "ldgram.y"
{ yyval.name = yyvsp[0].name; }
    break;
case 254:
#line 921 "ldgram.y"
{ yyval.name = "*default*"; }
    break;
case 255:
#line 926 "ldgram.y"
{
		  yyval.section_phdr = NULL;
		}
    break;
case 256:
#line 930 "ldgram.y"
{
		  struct lang_output_section_phdr_list *n;

		  n = ((struct lang_output_section_phdr_list *)
		       xmalloc (sizeof *n));
		  n->name = yyvsp[0].name;
		  n->used = FALSE;
		  n->next = yyvsp[-2].section_phdr;
		  yyval.section_phdr = n;
		}
    break;
case 258:
#line 946 "ldgram.y"
{
			  ldlex_script ();
			  lang_enter_overlay_section (yyvsp[0].name);
			}
    break;
case 259:
#line 951 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); }
    break;
case 260:
#line 953 "ldgram.y"
{
			  ldlex_popstate ();
			  lang_leave_overlay_section (yyvsp[0].fill, yyvsp[-1].section_phdr);
			}
    break;
case 265:
#line 970 "ldgram.y"
{ ldlex_expression (); }
    break;
case 266:
#line 971 "ldgram.y"
{ ldlex_popstate (); }
    break;
case 267:
#line 973 "ldgram.y"
{
		  lang_new_phdr (yyvsp[-5].name, yyvsp[-3].etree, yyvsp[-2].phdr.filehdr, yyvsp[-2].phdr.phdrs, yyvsp[-2].phdr.at,
				 yyvsp[-2].phdr.flags);
		}
    break;
case 268:
#line 981 "ldgram.y"
{
		  yyval.etree = yyvsp[0].etree;

		  if (yyvsp[0].etree->type.node_class == etree_name
		      && yyvsp[0].etree->type.node_code == NAME)
		    {
		      const char *s;
		      unsigned int i;
		      static const char * const phdr_types[] =
			{
			  "PT_NULL", "PT_LOAD", "PT_DYNAMIC",
			  "PT_INTERP", "PT_NOTE", "PT_SHLIB",
			  "PT_PHDR", "PT_TLS"
			};

		      s = yyvsp[0].etree->name.name;
		      for (i = 0;
			   i < sizeof phdr_types / sizeof phdr_types[0];
			   i++)
			if (strcmp (s, phdr_types[i]) == 0)
			  {
			    yyval.etree = exp_intop (i);
			    break;
			  }
		      if (i == sizeof phdr_types / sizeof phdr_types[0])
			{
			  if (strcmp (s, "PT_GNU_EH_FRAME") == 0)
			    yyval.etree = exp_intop (0x6474e550);
			  else
			    {
			      einfo (_("\
%X%P:%S: unknown phdr type `%s' (try integer literal)\n"),
				     s);
			      yyval.etree = exp_intop (0);
			    }
			}
		    }
		}
    break;
case 269:
#line 1023 "ldgram.y"
{
		  memset (&yyval.phdr, 0, sizeof (struct phdr_info));
		}
    break;
case 270:
#line 1027 "ldgram.y"
{
		  yyval.phdr = yyvsp[0].phdr;
		  if (strcmp (yyvsp[-2].name, "FILEHDR") == 0 && yyvsp[-1].etree == NULL)
		    yyval.phdr.filehdr = TRUE;
		  else if (strcmp (yyvsp[-2].name, "PHDRS") == 0 && yyvsp[-1].etree == NULL)
		    yyval.phdr.phdrs = TRUE;
		  else if (strcmp (yyvsp[-2].name, "FLAGS") == 0 && yyvsp[-1].etree != NULL)
		    yyval.phdr.flags = yyvsp[-1].etree;
		  else
		    einfo (_("%X%P:%S: PHDRS syntax error at `%s'\n"), yyvsp[-2].name);
		}
    break;
case 271:
#line 1039 "ldgram.y"
{
		  yyval.phdr = yyvsp[0].phdr;
		  yyval.phdr.at = yyvsp[-2].etree;
		}
    break;
case 272:
#line 1047 "ldgram.y"
{
		  yyval.etree = NULL;
		}
    break;
case 273:
#line 1051 "ldgram.y"
{
		  yyval.etree = yyvsp[-1].etree;
		}
    break;
case 274:
#line 1059 "ldgram.y"
{
		  ldlex_version_file ();
		  PUSH_ERROR (_("VERSION script"));
		}
    break;
case 275:
#line 1064 "ldgram.y"
{
		  ldlex_popstate ();
		  POP_ERROR ();
		}
    break;
case 276:
#line 1073 "ldgram.y"
{
		  ldlex_version_script ();
		}
    break;
case 277:
#line 1077 "ldgram.y"
{
		  ldlex_popstate ();
		}
    break;
case 280:
#line 1089 "ldgram.y"
{
		  lang_register_vers_node (NULL, yyvsp[-2].versnode, NULL);
		}
    break;
case 281:
#line 1093 "ldgram.y"
{
		  lang_register_vers_node (yyvsp[-4].name, yyvsp[-2].versnode, NULL);
		}
    break;
case 282:
#line 1097 "ldgram.y"
{
		  lang_register_vers_node (yyvsp[-5].name, yyvsp[-3].versnode, yyvsp[-1].deflist);
		}
    break;
case 283:
#line 1104 "ldgram.y"
{
		  yyval.deflist = lang_add_vers_depend (NULL, yyvsp[0].name);
		}
    break;
case 284:
#line 1108 "ldgram.y"
{
		  yyval.deflist = lang_add_vers_depend (yyvsp[-1].deflist, yyvsp[0].name);
		}
    break;
case 285:
#line 1115 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (NULL, NULL);
		}
    break;
case 286:
#line 1119 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-1].versyms, NULL);
		}
    break;
case 287:
#line 1123 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-1].versyms, NULL);
		}
    break;
case 288:
#line 1127 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (NULL, yyvsp[-1].versyms);
		}
    break;
case 289:
#line 1131 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-5].versyms, yyvsp[-1].versyms);
		}
    break;
case 290:
#line 1138 "ldgram.y"
{
		  yyval.versyms = lang_new_vers_pattern (NULL, yyvsp[0].name, ldgram_vers_current_lang);
		}
    break;
case 291:
#line 1142 "ldgram.y"
{
		  yyval.versyms = lang_new_vers_pattern (yyvsp[-2].versyms, yyvsp[0].name, ldgram_vers_current_lang);
		}
    break;
case 292:
#line 1146 "ldgram.y"
{
			  yyval.name = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = yyvsp[-1].name;
			}
    break;
case 293:
#line 1151 "ldgram.y"
{
			  yyval.versyms = yyvsp[-2].versyms;
			  ldgram_vers_current_lang = yyvsp[-3].name;
			}
    break;
case 294:
#line 1156 "ldgram.y"
{
			  yyval.name = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = yyvsp[-1].name;
			}
    break;
case 295:
#line 1161 "ldgram.y"
{
			  yyval.versyms = yyvsp[-2].versyms;
			  ldgram_vers_current_lang = yyvsp[-3].name;
			}
    break;
}

#line 705 "/usr/share/bison-1.35/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 1172 "ldgram.y"

void
yyerror(arg)
     const char *arg;
{
  if (ldfile_assumed_script)
    einfo (_("%P:%s: file format not recognized; treating as linker script\n"),
	   ldfile_input_filename);
  if (error_index > 0 && error_index < ERROR_NAME_MAX)
     einfo ("%P%F:%S: %s in %s\n", arg, error_names[error_index-1]);
  else
     einfo ("%P%F:%S: %s\n", arg);
}
@


1.1.8.1
log
@Add generated files.
@
text
@a0 3080
/* A Bison parser, made from ldgram.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	INT	257
# define	NAME	258
# define	LNAME	259
# define	PLUSEQ	260
# define	MINUSEQ	261
# define	MULTEQ	262
# define	DIVEQ	263
# define	LSHIFTEQ	264
# define	RSHIFTEQ	265
# define	ANDEQ	266
# define	OREQ	267
# define	OROR	268
# define	ANDAND	269
# define	EQ	270
# define	NE	271
# define	LE	272
# define	GE	273
# define	LSHIFT	274
# define	RSHIFT	275
# define	UNARY	276
# define	END	277
# define	ALIGN_K	278
# define	BLOCK	279
# define	BIND	280
# define	QUAD	281
# define	SQUAD	282
# define	LONG	283
# define	SHORT	284
# define	BYTE	285
# define	SECTIONS	286
# define	PHDRS	287
# define	SORT	288
# define	DATA_SEGMENT_ALIGN	289
# define	DATA_SEGMENT_END	290
# define	SIZEOF_HEADERS	291
# define	OUTPUT_FORMAT	292
# define	FORCE_COMMON_ALLOCATION	293
# define	OUTPUT_ARCH	294
# define	INHIBIT_COMMON_ALLOCATION	295
# define	INCLUDE	296
# define	MEMORY	297
# define	DEFSYMEND	298
# define	NOLOAD	299
# define	DSECT	300
# define	COPY	301
# define	INFO	302
# define	OVERLAY	303
# define	DEFINED	304
# define	TARGET_K	305
# define	SEARCH_DIR	306
# define	MAP	307
# define	ENTRY	308
# define	NEXT	309
# define	SIZEOF	310
# define	ADDR	311
# define	LOADADDR	312
# define	MAX_K	313
# define	MIN_K	314
# define	STARTUP	315
# define	HLL	316
# define	SYSLIB	317
# define	FLOAT	318
# define	NOFLOAT	319
# define	NOCROSSREFS	320
# define	ORIGIN	321
# define	FILL	322
# define	LENGTH	323
# define	CREATE_OBJECT_SYMBOLS	324
# define	INPUT	325
# define	GROUP	326
# define	OUTPUT	327
# define	CONSTRUCTORS	328
# define	ALIGNMOD	329
# define	AT	330
# define	PROVIDE	331
# define	CHIP	332
# define	LIST	333
# define	SECT	334
# define	ABSOLUTE	335
# define	LOAD	336
# define	NEWLINE	337
# define	ENDWORD	338
# define	ORDER	339
# define	NAMEWORD	340
# define	ASSERT_K	341
# define	FORMAT	342
# define	PUBLIC	343
# define	BASE	344
# define	ALIAS	345
# define	TRUNCATE	346
# define	REL	347
# define	INPUT_SCRIPT	348
# define	INPUT_MRI_SCRIPT	349
# define	INPUT_DEFSYM	350
# define	CASE	351
# define	EXTERN	352
# define	START	353
# define	VERS_TAG	354
# define	VERS_IDENTIFIER	355
# define	GLOBAL	356
# define	LOCAL	357
# define	VERSIONK	358
# define	INPUT_VERSION_SCRIPT	359
# define	KEEP	360
# define	EXCLUDE_FILE	361

#line 22 "ldgram.y"

/*

 */

#define DONTDECLARE_MALLOC

#include "bfd.h"
#include "sysdep.h"
#include "bfdlink.h"
#include "ld.h"    
#include "ldexp.h"
#include "ldver.h"
#include "ldlang.h"
#include "ldfile.h"
#include "ldemul.h"
#include "ldmisc.h"
#include "ldmain.h"
#include "mri.h"
#include "ldctor.h"
#include "ldlex.h"

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

static enum section_type sectype;

lang_memory_region_type *region;

boolean ldgram_want_filename = true;
FILE *  saved_script_handle = NULL;
boolean force_make_executable = false;

boolean ldgram_in_script = false;
boolean ldgram_had_equals = false;
boolean ldgram_had_keep = false;
char *ldgram_vers_current_lang = NULL;

#define ERROR_NAME_MAX 20
static char *error_names[ERROR_NAME_MAX];
static int error_index;
#define PUSH_ERROR(x) if (error_index < ERROR_NAME_MAX) error_names[error_index] = x; error_index++;
#define POP_ERROR()   error_index--;

#line 67 "ldgram.y"
#ifndef YYSTYPE
typedef union {
  bfd_vma integer;
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      boolean filehdr;
      boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif
#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		603
#define	YYFLAG		-32768
#define	YYNTBASE	131

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 361 ? yytranslate[x] : 235)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const short yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   129,     2,     2,     2,    34,    21,     2,
      37,   126,    32,    30,   124,    31,     2,    33,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    16,   125,
      24,    10,    25,    15,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   127,     2,   128,    20,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    51,    19,    52,   130,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    11,    12,    13,    14,    17,    18,
      22,    23,    26,    27,    28,    29,    35,    36,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
     122,   123
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    14,    15,    20,    21,
      24,    28,    29,    32,    37,    39,    41,    44,    46,    51,
      56,    60,    63,    68,    72,    77,    82,    87,    92,    97,
     100,   103,   106,   111,   116,   119,   122,   125,   128,   129,
     135,   138,   139,   143,   146,   147,   149,   153,   155,   159,
     160,   162,   166,   168,   171,   175,   176,   179,   182,   183,
     185,   187,   189,   191,   193,   195,   197,   199,   201,   203,
     208,   213,   218,   223,   232,   237,   239,   241,   246,   247,
     253,   258,   259,   265,   270,   275,   277,   281,   284,   286,
     290,   293,   298,   301,   304,   305,   310,   313,   315,   317,
     319,   321,   327,   332,   341,   344,   346,   350,   352,   354,
     358,   363,   365,   366,   372,   375,   377,   379,   381,   386,
     388,   393,   398,   401,   403,   404,   406,   408,   410,   412,
     414,   416,   418,   421,   422,   424,   426,   428,   430,   432,
     434,   436,   438,   440,   442,   446,   450,   457,   459,   460,
     466,   469,   473,   474,   475,   483,   487,   491,   492,   496,
     498,   501,   503,   506,   511,   516,   520,   524,   526,   531,
     535,   536,   538,   540,   541,   544,   548,   549,   552,   555,
     559,   564,   567,   570,   573,   577,   581,   585,   589,   593,
     597,   601,   605,   609,   613,   617,   621,   625,   629,   633,
     637,   643,   647,   651,   656,   658,   660,   665,   670,   675,
     680,   685,   692,   697,   702,   704,   711,   718,   725,   729,
     730,   735,   736,   737,   738,   739,   740,   741,   758,   759,
     760,   761,   762,   763,   781,   782,   783,   791,   793,   795,
     797,   799,   801,   805,   806,   809,   813,   816,   823,   834,
     837,   839,   840,   842,   845,   846,   847,   851,   852,   853,
     854,   855,   867,   872,   873,   876,   877,   878,   885,   887,
     888,   892,   898,   899,   903,   904,   907,   908,   914,   916,
     919,   924,   930,   937,   939,   942,   943,   946,   951,   956,
     965,   967,   971,   972
};
static const short yyrhs[] =
{
     110,   145,     0,   111,   135,     0,   121,   225,     0,   112,
     133,     0,     4,     0,     0,   134,     4,    10,   190,     0,
       0,   136,   137,     0,   137,   138,    99,     0,     0,    94,
     190,     0,    94,   190,   124,   190,     0,     4,     0,    95,
       0,   101,   140,     0,   100,     0,   105,     4,    10,   190,
       0,   105,     4,   124,   190,     0,   105,     4,   190,     0,
     104,     4,     0,    96,     4,   124,   190,     0,    96,     4,
     190,     0,    96,     4,    10,   190,     0,    38,     4,    10,
     190,     0,    38,     4,   124,   190,     0,    91,     4,    10,
     190,     0,    91,     4,   124,   190,     0,    97,   142,     0,
      98,   141,     0,   102,     4,     0,   107,     4,   124,     4,
       0,   107,     4,   124,     3,     0,   106,   190,     0,   108,
       3,     0,   113,   143,     0,   114,   144,     0,     0,    58,
     132,   139,   137,    36,     0,   115,     4,     0,     0,   140,
     124,     4,     0,   140,     4,     0,     0,     4,     0,   141,
     124,     4,     0,     4,     0,   142,   124,     4,     0,     0,
       4,     0,   143,   124,     4,     0,     4,     0,   144,     4,
       0,   144,   124,     4,     0,     0,   146,   147,     0,   147,
     148,     0,     0,   172,     0,   152,     0,   217,     0,   181,
       0,   182,     0,   184,     0,   186,     0,   154,     0,   227,
       0,   125,     0,    67,    37,     4,   126,     0,    68,    37,
     132,   126,     0,    89,    37,   132,   126,     0,    54,    37,
       4,   126,     0,    54,    37,     4,   124,     4,   124,     4,
     126,     0,    56,    37,     4,   126,     0,    55,     0,    57,
       0,    87,    37,   151,   126,     0,     0,    88,   149,    37,
     151,   126,     0,    69,    37,   132,   126,     0,     0,    58,
     132,   150,   147,    36,     0,    82,    37,   187,   126,     0,
     114,    37,   144,   126,     0,     4,     0,   151,   124,     4,
       0,   151,     4,     0,     5,     0,   151,   124,     5,     0,
     151,     5,     0,    46,    51,   153,    52,     0,   153,   193,
       0,   153,   154,     0,     0,    70,    37,     4,   126,     0,
     170,   169,     0,     4,     0,    32,     0,    15,     0,   155,
       0,   123,    37,   157,   126,   155,     0,    48,    37,   155,
     126,     0,    48,    37,   123,    37,   157,   126,   155,   126,
       0,   157,   155,     0,   155,     0,   158,   171,   156,     0,
     156,     0,     4,     0,   127,   158,   128,     0,   156,    37,
     158,   126,     0,   159,     0,     0,   122,    37,   161,   159,
     126,     0,   170,   169,     0,    86,     0,   125,     0,    90,
       0,    48,    37,    90,   126,     0,   160,     0,   165,    37,
     188,   126,     0,    84,    37,   166,   126,     0,   163,   162,
       0,   162,     0,     0,   163,     0,    41,     0,    42,     0,
      43,     0,    44,     0,    45,     0,   188,     0,    10,   166,
       0,     0,     6,     0,     7,     0,     8,     0,     9,     0,
      11,     0,    12,     0,    13,     0,    14,     0,   125,     0,
     124,     0,     4,    10,   188,     0,     4,   168,   188,     0,
      93,    37,     4,    10,   188,   126,     0,   124,     0,     0,
      59,    51,   174,   173,    52,     0,   173,   174,     0,   173,
     124,   174,     0,     0,     0,     4,   175,   178,    16,   176,
     171,   177,     0,    83,    10,   188,     0,    85,    10,   188,
       0,     0,    37,   179,   126,     0,   180,     0,   179,   180,
       0,     4,     0,   129,     4,     0,    77,    37,   132,   126,
       0,    78,    37,   183,   126,     0,    78,    37,   126,     0,
     183,   171,   132,     0,   132,     0,    79,    37,   185,   126,
       0,   185,   171,   132,     0,     0,    80,     0,    81,     0,
       0,     4,   187,     0,     4,   124,   187,     0,     0,   189,
     190,     0,    31,   190,     0,    37,   190,   126,     0,    71,
      37,   190,   126,     0,   129,   190,     0,    30,   190,     0,
     130,   190,     0,   190,    32,   190,     0,   190,    33,   190,
       0,   190,    34,   190,     0,   190,    30,   190,     0,   190,
      31,   190,     0,   190,    28,   190,     0,   190,    29,   190,
       0,   190,    22,   190,     0,   190,    23,   190,     0,   190,
      26,   190,     0,   190,    27,   190,     0,   190,    24,   190,
       0,   190,    25,   190,     0,   190,    21,   190,     0,   190,
      20,   190,     0,   190,    19,   190,     0,   190,    15,   190,
      16,   190,     0,   190,    18,   190,     0,   190,    17,   190,
       0,    66,    37,     4,   126,     0,     3,     0,    53,     0,
      72,    37,     4,   126,     0,    73,    37,     4,   126,     0,
      74,    37,     4,   126,     0,    97,    37,   190,   126,     0,
      38,    37,   190,   126,     0,    49,    37,   190,   124,   190,
     126,     0,    50,    37,   190,   126,     0,    39,    37,   190,
     126,     0,     4,     0,    75,    37,   190,   124,   190,   126,
       0,    76,    37,   190,   124,   190,   126,     0,   103,    37,
     190,   124,     4,   126,     0,    92,    25,     4,     0,     0,
      92,    37,   190,   126,     0,     0,     0,     0,     0,     0,
       0,     4,   194,   208,   192,   195,    51,   196,   164,    52,
     197,   211,   191,   212,   167,   198,   171,     0,     0,     0,
       0,     0,     0,    65,   199,   209,   210,   192,   200,    51,
     201,   213,    52,   202,   211,   191,   212,   167,   203,   171,
       0,     0,     0,    88,   204,   208,   205,    51,   153,    52,
       0,    61,     0,    62,     0,    63,     0,    64,     0,    65,
       0,    37,   206,   126,     0,     0,    37,   126,     0,   190,
     207,    16,     0,   207,    16,     0,    40,    37,   190,   126,
     207,    16,     0,    40,    37,   190,   126,    39,    37,   190,
     126,   207,    16,     0,   190,    16,     0,    16,     0,     0,
      82,     0,    25,     4,     0,     0,     0,   212,    16,     4,
       0,     0,     0,     0,     0,   213,     4,   214,    51,   164,
      52,   215,   212,   167,   216,   171,     0,    47,    51,   218,
      52,     0,     0,   218,   219,     0,     0,     0,     4,   220,
     222,   223,   221,   125,     0,   190,     0,     0,     4,   224,
     223,     0,    92,    37,   190,   126,   223,     0,     0,    37,
     190,   126,     0,     0,   226,   229,     0,     0,   228,   120,
      51,   229,    52,     0,   230,     0,   229,   230,     0,    51,
     232,    52,   125,     0,   116,    51,   232,    52,   125,     0,
     116,    51,   232,    52,   231,   125,     0,   116,     0,   231,
     116,     0,     0,   233,   125,     0,   118,    16,   233,   125,
       0,   119,    16,   233,   125,     0,   118,    16,   233,   125,
     119,    16,   233,   125,     0,   117,     0,   233,   125,   117,
       0,     0,   114,     4,    51,   234,   233,    52,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   161,   163,   164,   165,   169,   172,   172,   182,   182,
     195,   197,   200,   202,   203,   206,   209,   210,   211,   213,
     215,   217,   219,   221,   223,   225,   227,   229,   231,   233,
     234,   235,   237,   239,   241,   243,   245,   246,   247,   247,
     251,   253,   256,   258,   259,   262,   265,   268,   271,   275,
     277,   278,   281,   284,   286,   290,   290,   301,   303,   308,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     321,   323,   325,   328,   330,   332,   334,   336,   337,   337,
     341,   343,   343,   347,   351,   354,   358,   361,   364,   367,
     370,   375,   379,   381,   382,   385,   388,   393,   398,   402,
     408,   415,   421,   427,   435,   444,   455,   464,   475,   484,
     488,   494,   496,   496,   502,   504,   508,   509,   514,   519,
     520,   525,   531,   533,   536,   538,   541,   544,   546,   548,
     550,   554,   564,   567,   570,   573,   575,   577,   579,   581,
     583,   585,   590,   590,   594,   599,   607,   614,   615,   618,
     622,   624,   625,   629,   629,   636,   644,   653,   656,   659,
     661,   664,   667,   671,   676,   678,   682,   685,   690,   692,
     695,   698,   701,   705,   710,   719,   730,   730,   735,   738,
     740,   742,   744,   746,   749,   751,   753,   755,   757,   759,
     761,   763,   765,   767,   769,   771,   773,   775,   777,   779,
     781,   783,   785,   787,   789,   791,   794,   796,   798,   800,
     802,   804,   806,   808,   810,   812,   814,   816,   821,   823,
     826,   828,   831,   831,   831,   831,   831,   831,   848,   848,
     848,   848,   848,   848,   866,   866,   866,   879,   881,   882,
     883,   884,   887,   889,   890,   893,   895,   896,   901,   905,
     907,   910,   913,   917,   920,   923,   928,   941,   943,   943,
     943,   943,   959,   963,   965,   968,   968,   968,   978,  1008,
    1013,  1025,  1032,  1037,  1045,  1045,  1059,  1059,  1069,  1071,
    1074,  1079,  1083,  1089,  1094,  1100,  1105,  1109,  1113,  1117,
    1123,  1128,  1132,  1132
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "INT", "NAME", "LNAME", "PLUSEQ", "MINUSEQ", 
  "MULTEQ", "DIVEQ", "'='", "LSHIFTEQ", "RSHIFTEQ", "ANDEQ", "OREQ", 
  "'?'", "':'", "OROR", "ANDAND", "'|'", "'^'", "'&'", "EQ", "NE", "'<'", 
  "'>'", "LE", "GE", "LSHIFT", "RSHIFT", "'+'", "'-'", "'*'", "'/'", 
  "'%'", "UNARY", "END", "'('", "ALIGN_K", "BLOCK", "BIND", "QUAD", 
  "SQUAD", "LONG", "SHORT", "BYTE", "SECTIONS", "PHDRS", "SORT", 
  "DATA_SEGMENT_ALIGN", "DATA_SEGMENT_END", "'{'", "'}'", 
  "SIZEOF_HEADERS", "OUTPUT_FORMAT", "FORCE_COMMON_ALLOCATION", 
  "OUTPUT_ARCH", "INHIBIT_COMMON_ALLOCATION", "INCLUDE", "MEMORY", 
  "DEFSYMEND", "NOLOAD", "DSECT", "COPY", "INFO", "OVERLAY", "DEFINED", 
  "TARGET_K", "SEARCH_DIR", "MAP", "ENTRY", "NEXT", "SIZEOF", "ADDR", 
  "LOADADDR", "MAX_K", "MIN_K", "STARTUP", "HLL", "SYSLIB", "FLOAT", 
  "NOFLOAT", "NOCROSSREFS", "ORIGIN", "FILL", "LENGTH", 
  "CREATE_OBJECT_SYMBOLS", "INPUT", "GROUP", "OUTPUT", "CONSTRUCTORS", 
  "ALIGNMOD", "AT", "PROVIDE", "CHIP", "LIST", "SECT", "ABSOLUTE", "LOAD", 
  "NEWLINE", "ENDWORD", "ORDER", "NAMEWORD", "ASSERT_K", "FORMAT", 
  "PUBLIC", "BASE", "ALIAS", "TRUNCATE", "REL", "INPUT_SCRIPT", 
  "INPUT_MRI_SCRIPT", "INPUT_DEFSYM", "CASE", "EXTERN", "START", 
  "VERS_TAG", "VERS_IDENTIFIER", "GLOBAL", "LOCAL", "VERSIONK", 
  "INPUT_VERSION_SCRIPT", "KEEP", "EXCLUDE_FILE", "','", "';'", "')'", 
  "'['", "']'", "'!'", "'~'", "file", "filename", "defsym_expr", "@@1", 
  "mri_script_file", "@@2", "mri_script_lines", "mri_script_command", "@@3", 
  "ordernamelist", "mri_load_name_list", "mri_abs_name_list", 
  "casesymlist", "extern_name_list", "script_file", "@@4", "ifile_list", 
  "ifile_p1", "@@5", "@@6", "input_list", "sections", "sec_or_group_p1", 
  "statement_anywhere", "wildcard_name", "wildcard_spec", 
  "exclude_name_list", "file_NAME_list", "input_section_spec_no_keep", 
  "input_section_spec", "@@7", "statement", "statement_list", 
  "statement_list_opt", "length", "fill_exp", "fill_opt", "assign_op", 
  "end", "assignment", "opt_comma", "memory", "memory_spec_list", 
  "memory_spec", "@@8", "origin_spec", "length_spec", "attributes_opt", 
  "attributes_list", "attributes_string", "startup", "high_level_library", 
  "high_level_library_NAME_list", "low_level_library", 
  "low_level_library_NAME_list", "floating_point_support", 
  "nocrossref_list", "mustbe_exp", "@@9", "exp", "memspec_at_opt", 
  "opt_at", "section", "@@10", "@@11", "@@12", "@@13", "@@14", "@@15", "@@16", 
  "@@17", "@@18", "@@19", "@@20", "@@21", "type", "atype", "opt_exp_with_type", 
  "opt_exp_without_type", "opt_nocrossrefs", "memspec_opt", "phdr_opt", 
  "overlay_section", "@@22", "@@23", "@@24", "phdrs", "phdr_list", "phdr", 
  "@@25", "@@26", "phdr_type", "phdr_qualifiers", "phdr_val", 
  "version_script_file", "@@27", "version", "@@28", "vers_nodes", 
  "vers_node", "verdep", "vers_tag", "vers_defns", "@@29", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,   131,   131,   131,   131,   132,   134,   133,   136,   135,
     137,   137,   138,   138,   138,   138,   138,   138,   138,   138,
     138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
     138,   138,   138,   138,   138,   138,   138,   138,   139,   138,
     138,   138,   140,   140,   140,   141,   141,   142,   142,   143,
     143,   143,   144,   144,   144,   146,   145,   147,   147,   148,
     148,   148,   148,   148,   148,   148,   148,   148,   148,   148,
     148,   148,   148,   148,   148,   148,   148,   148,   149,   148,
     148,   150,   148,   148,   148,   151,   151,   151,   151,   151,
     151,   152,   153,   153,   153,   154,   154,   155,   155,   155,
     156,   156,   156,   156,   157,   157,   158,   158,   159,   159,
     159,   160,   161,   160,   162,   162,   162,   162,   162,   162,
     162,   162,   163,   163,   164,   164,   165,   165,   165,   165,
     165,   166,   167,   167,   168,   168,   168,   168,   168,   168,
     168,   168,   169,   169,   170,   170,   170,   171,   171,   172,
     173,   173,   173,   175,   174,   176,   177,   178,   178,   179,
     179,   180,   180,   181,   182,   182,   183,   183,   184,   185,
     185,   186,   186,   187,   187,   187,   189,   188,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
     190,   190,   190,   190,   190,   190,   190,   190,   191,   191,
     192,   192,   194,   195,   196,   197,   198,   193,   199,   200,
     201,   202,   203,   193,   204,   205,   193,   206,   206,   206,
     206,   206,   207,   207,   207,   208,   208,   208,   208,   209,
     209,   210,   210,   211,   211,   212,   212,   213,   214,   215,
     216,   213,   217,   218,   218,   220,   221,   219,   222,   223,
     223,   223,   224,   224,   226,   225,   228,   227,   229,   229,
     230,   230,   230,   231,   231,   232,   232,   232,   232,   232,
     233,   233,   234,   233
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     2,     2,     2,     2,     1,     0,     4,     0,     2,
       3,     0,     2,     4,     1,     1,     2,     1,     4,     4,
       3,     2,     4,     3,     4,     4,     4,     4,     4,     2,
       2,     2,     4,     4,     2,     2,     2,     2,     0,     5,
       2,     0,     3,     2,     0,     1,     3,     1,     3,     0,
       1,     3,     1,     2,     3,     0,     2,     2,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       4,     4,     4,     8,     4,     1,     1,     4,     0,     5,
       4,     0,     5,     4,     4,     1,     3,     2,     1,     3,
       2,     4,     2,     2,     0,     4,     2,     1,     1,     1,
       1,     5,     4,     8,     2,     1,     3,     1,     1,     3,
       4,     1,     0,     5,     2,     1,     1,     1,     4,     1,
       4,     4,     2,     1,     0,     1,     1,     1,     1,     1,
       1,     1,     2,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     3,     6,     1,     0,     5,
       2,     3,     0,     0,     7,     3,     3,     0,     3,     1,
       2,     1,     2,     4,     4,     3,     3,     1,     4,     3,
       0,     1,     1,     0,     2,     3,     0,     2,     2,     3,
       4,     2,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       5,     3,     3,     4,     1,     1,     4,     4,     4,     4,
       4,     6,     4,     4,     1,     6,     6,     6,     3,     0,
       4,     0,     0,     0,     0,     0,     0,    16,     0,     0,
       0,     0,     0,    17,     0,     0,     7,     1,     1,     1,
       1,     1,     3,     0,     2,     3,     2,     6,    10,     2,
       1,     0,     1,     2,     0,     0,     3,     0,     0,     0,
       0,    11,     4,     0,     2,     0,     0,     6,     1,     0,
       3,     5,     0,     3,     0,     2,     0,     5,     1,     2,
       4,     5,     6,     1,     2,     0,     2,     4,     4,     8,
       1,     3,     0,     6
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,    55,     8,     6,   274,     1,    58,     2,    11,     4,
       0,     3,     0,    56,     9,     0,   285,     0,   275,   278,
       0,     0,     0,     0,    75,     0,    76,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   171,   172,     0,     0,
      78,     0,     0,     0,    68,    57,    60,    66,     0,    59,
      62,    63,    64,    65,    61,    67,     0,    14,     0,     0,
       0,     0,    15,     0,     0,     0,    17,    44,     0,     0,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
     290,     0,     0,     0,     0,   285,   279,   134,   135,   136,
     137,   176,   138,   139,   140,   141,   176,    94,   263,     0,
       0,     5,    81,     0,     0,     0,     0,     0,     0,     0,
     170,   173,     0,     0,     0,     0,     0,   143,   142,    96,
       0,     0,    38,     0,   204,   214,     0,     0,     0,     0,
       0,     0,     0,   205,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    12,     0,    47,    29,    45,
      30,    16,    31,    21,     0,    34,     0,    35,    50,    36,
      52,    37,    40,    10,     7,     0,     0,     0,     0,   286,
       0,   144,     0,   145,     0,     0,     0,     0,    58,   153,
     152,     0,     0,     0,     0,     0,   165,   167,   148,   148,
     173,     0,    85,    88,     0,     0,     0,     0,     0,     0,
       0,     0,    11,     0,     0,   182,   178,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   181,   183,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    23,     0,     0,    43,     0,
       0,     0,    20,     0,     0,    53,     0,   292,     0,     0,
     280,   291,     0,   177,   222,    91,   228,   234,    93,    92,
     265,   262,   264,     0,    72,    74,   276,   157,     0,    69,
      70,    80,    95,   163,   147,   164,     0,   168,     0,   173,
     174,    83,    87,    90,     0,    77,     0,    71,   176,    84,
       0,    25,    26,    41,    27,    28,   179,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   202,   201,   199,   198,   197,   191,   192,   195,   196,
     193,   194,   189,   190,   187,   188,   184,   185,   186,    13,
      24,    22,    48,    46,    42,    18,    19,    33,    32,    51,
      54,     0,   287,   288,   283,   281,     0,   243,     0,   243,
       0,     0,    82,     0,     0,   149,     0,   150,   166,   169,
     175,    86,    89,    79,     0,   277,    39,   210,   213,     0,
     212,   203,   180,   206,   207,   208,     0,     0,   209,     0,
       0,     0,     0,   284,   282,     0,     0,   243,     0,   221,
     250,     0,   251,   235,   268,   269,     0,   161,     0,     0,
     159,     0,   151,   146,     0,     0,     0,     0,   200,   293,
       0,     0,   237,   238,   239,   240,   241,   244,     0,     0,
       0,     0,   246,     0,   223,   249,   252,   221,     0,   272,
       0,   266,     0,   162,   158,   160,     0,   148,   211,   215,
     216,   217,     0,   242,     0,   245,     0,     0,   229,    94,
       0,   269,     0,     0,    73,   176,     0,   289,   243,     0,
     224,     0,     0,     0,   270,     0,   267,   155,     0,   154,
       0,     0,   220,   124,   230,   236,   273,   269,   176,     0,
     247,   108,    99,    98,   126,   127,   128,   129,   130,     0,
       0,   115,   117,     0,     0,   116,     0,   100,     0,   111,
     119,   123,   125,     0,     0,     0,   257,   271,   156,     0,
       0,   176,   112,     0,    97,     0,   107,   148,     0,   122,
     225,   176,   114,     0,   243,     0,     0,     0,     0,   131,
       0,   105,     0,     0,   109,     0,   148,   254,     0,   258,
     231,     0,   118,     0,   102,   121,    97,     0,     0,   104,
     106,   110,     0,   219,   120,     0,   254,   248,     0,   113,
     101,   253,     0,   255,   124,   219,     0,     0,   133,     0,
     255,     0,   218,   176,     0,   226,   259,   133,   103,   132,
     256,   148,   255,   232,   227,   133,   148,   260,   233,   148,
     261,     0,     0,     0
};

static const short yydefgoto[] =
{
     601,   102,     9,    10,     7,     8,    14,    77,   202,   151,
     150,   148,   159,   161,     5,     6,    13,    45,   113,   178,
     194,    46,   174,    47,   507,   508,   542,   527,   509,   510,
     540,   511,   512,   513,   514,   538,   585,    96,   119,    48,
     545,    49,   278,   180,   277,   447,   479,   364,   409,   410,
      50,    51,   188,    52,   189,    53,   191,   539,   172,   207,
     573,   434,   269,   357,   457,   483,   547,   591,   358,   471,
     516,   566,   596,   359,   438,   428,   398,   399,   402,   437,
     563,   578,   533,   565,   592,   599,    54,   175,   272,   360,
     463,   405,   441,   461,    11,    12,    55,    56,    18,    19,
     356,    83,    84,   351
};

static const short yypact[] =
{
     155,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
      40,-32768,   -11,   594,   680,    43,   123,    50,   -11,-32768,
     542,    55,    64,    23,-32768,    36,-32768,   115,   149,   169,
     172,   193,   202,   212,   215,   240,-32768,-32768,   241,   244,
  -32768,   247,   257,   258,-32768,-32768,-32768,-32768,    99,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   173,-32768,   292,   115,
     299,   493,-32768,   301,   302,   303,-32768,-32768,   310,   311,
     316,   493,   317,   319,   321,   327,   329,   236,   493,   332,
  -32768,   322,   324,   285,   216,   123,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   338,
     339,-32768,-32768,   340,   342,   115,   115,   343,   115,    16,
  -32768,   344,   229,   330,   115,   364,   327,-32768,-32768,-32768,
     305,    21,-32768,    80,-32768,-32768,   493,   493,   493,   333,
     334,   335,   336,-32768,   341,   346,   349,   350,   351,   353,
     355,   356,   357,   493,   493,   582,   279,-32768,   251,-32768,
     253,    22,-32768,-32768,   381,  1244,   255,-32768,-32768,   271,
  -32768,    32,-32768,-32768,  1244,   347,    -1,    -1,   274,   263,
     354,-32768,   493,-32768,   198,    18,   -33,   275,-32768,-32768,
  -32768,   278,   281,   288,   289,   290,-32768,-32768,     1,     2,
      71,   291,-32768,-32768,    28,   229,   306,   371,    75,   -11,
     493,   493,-32768,   493,   493,-32768,-32768,   806,   493,   493,
     493,   493,   424,   493,   429,   431,   432,   493,   493,   493,
     493,-32768,-32768,   493,   493,   493,   493,   493,   493,   493,
     493,   493,   493,   493,   493,   493,   493,   493,   493,   493,
     493,   493,   493,   493,   493,  1244,   433,   434,-32768,   435,
     493,   493,  1244,   256,   438,-32768,   439,-32768,   323,   325,
  -32768,-32768,   -86,  1244,   542,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   440,-32768,-32768,   643,   404,    65,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   115,-32768,   115,   344,
  -32768,-32768,-32768,-32768,   270,-32768,    72,-32768,-32768,-32768,
     -17,  1244,  1244,   705,  1244,  1244,-32768,   826,   846,  1106,
     866,   348,   886,   359,   360,   361,  1136,  1156,   916,  1176,
    1286,  1263,  1194,  1321,  1335,   437,   720,   720,   393,   393,
     393,   393,   184,   184,    89,    89,-32768,-32768,-32768,  1244,
    1244,  1244,-32768,-32768,-32768,  1244,  1244,-32768,-32768,-32768,
  -32768,    -1,    91,   263,-32768,-32768,   -79,    58,   442,    58,
     493,   358,-32768,     8,   459,-32768,   340,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   362,-32768,-32768,-32768,-32768,   493,
  -32768,-32768,-32768,-32768,-32768,-32768,   493,   493,-32768,   445,
     493,   -25,   460,-32768,-32768,   182,   414,  1214,   461,   391,
  -32768,  1306,   407,-32768,  1244,    12,   486,-32768,   489,     9,
  -32768,   411,-32768,-32768,   936,   956,   976,   372,  1244,-32768,
     263,    -1,-32768,-32768,-32768,-32768,-32768,-32768,   373,   493,
     164,   484,-32768,   464,-32768,-32768,-32768,   391,   451,   466,
     467,-32768,   380,-32768,-32768,-32768,   497,   385,-32768,-32768,
  -32768,-32768,   387,-32768,   996,-32768,   493,   468,-32768,-32768,
     493,    12,   493,   395,-32768,-32768,   436,   263,   233,  1026,
  -32768,   471,   199,  1046,-32768,  1066,-32768,-32768,   515,-32768,
     490,   510,-32768,   543,-32768,-32768,-32768,    12,-32768,   493,
  -32768,   352,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   491,
     492,-32768,-32768,   496,   498,-32768,    39,-32768,   499,-32768,
  -32768,-32768,   543,   482,   500,    99,-32768,-32768,-32768,  1086,
     190,-32768,-32768,    48,-32768,   501,-32768,   -46,    39,-32768,
  -32768,-32768,-32768,    20,   503,   415,   507,   444,   447,-32768,
      70,-32768,    10,    88,-32768,    39,   147,   532,   448,-32768,
  -32768,   544,-32768,    48,-32768,-32768,   450,   452,    48,-32768,
  -32768,-32768,   557,   470,-32768,   512,   532,-32768,    13,-32768,
  -32768,-32768,   552,-32768,   543,   470,    48,   575,    31,   528,
  -32768,   455,-32768,-32768,   578,-32768,-32768,    31,-32768,-32768,
  -32768,   385,-32768,-32768,-32768,    31,   385,-32768,-32768,   385,
  -32768,   583,   589,-32768
};

static const short yypgoto[] =
{
  -32768,   -50,-32768,-32768,-32768,-32768,   390,-32768,-32768,-32768,
  -32768,-32768,-32768,   477,-32768,-32768,   416,-32768,-32768,-32768,
     400,-32768,   158,  -170,  -219,  -477,    66,    90,    81,-32768,
  -32768,   108,-32768,    51,-32768,    41,  -530,-32768,   111,  -464,
    -186,-32768,-32768,  -257,-32768,-32768,-32768,-32768,-32768,   219,
  -32768,-32768,-32768,-32768,-32768,-32768,  -175,   -91,-32768,   -60,
      56,   195,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,  -387,   276,-32768,-32768,
      68,  -542,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,  -438,-32768,-32768,-32768,-32768,-32768,   443,   -12,
  -32768,   545,  -159,-32768
};


#define	YYLAST		1369


static const short yytable[] =
{
     171,   145,   286,   288,   268,   173,    86,   258,   259,   122,
     431,   155,   407,   407,   524,   290,   439,   524,   164,   515,
     101,   367,   270,   474,   549,   492,   248,   419,   492,   526,
     354,   200,   292,   293,    16,   375,   255,   393,   587,   355,
      16,   583,   493,   524,    15,   493,   394,   584,   515,   517,
     595,   526,   524,    78,   492,   182,   183,   593,   185,   187,
      99,   124,   125,   492,   196,   597,   205,   206,   560,   179,
     271,   493,   550,   100,   556,   190,   292,   293,   284,   255,
     493,   481,   544,   221,   222,   492,   245,   525,   126,   127,
     203,   273,   524,   274,   252,   395,   129,   130,   396,    17,
     420,    85,   493,   492,   440,    17,    97,   131,   132,   412,
     515,   133,   263,    79,   370,    98,    80,   365,   525,   101,
     493,   239,   240,   241,   134,   284,   284,   285,   287,   135,
     136,   137,   138,   139,   140,   444,   558,   408,   408,   576,
     301,   302,   186,   304,   305,   201,   249,   551,   307,   308,
     309,   310,   294,   312,   295,   141,   256,   316,   317,   318,
     319,   142,   504,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   124,   125,   143,   144,   366,
     345,   346,   391,   504,   524,   289,   294,   506,   373,   256,
     103,   299,   264,   264,   204,   492,   104,   374,   261,   105,
     392,   536,   126,   127,   237,   238,   239,   240,   241,   128,
     129,   130,   493,   117,   118,   422,   423,   424,   425,   426,
     106,   131,   132,   192,   193,   133,   368,    79,   369,   107,
      80,    81,    82,   422,   423,   424,   425,   426,   134,   108,
     265,   485,   109,   135,   136,   137,   138,   139,   140,   347,
     348,   466,   452,   266,   266,     1,     2,     3,    32,    32,
     430,   284,   480,   561,   371,   372,     4,   110,   111,   141,
     535,   112,   124,   125,   114,   142,   267,   267,    86,   243,
     427,    42,    42,   120,   115,   116,   121,   397,   401,   397,
     404,   537,   268,   123,   541,   146,   147,   149,   427,   126,
     127,   143,   144,   536,   152,   153,   128,   129,   130,   414,
     154,   156,   157,   559,   537,   158,   415,   416,   131,   132,
     418,   160,   133,   162,   541,   163,   165,   168,   166,   570,
     167,   169,   176,   177,   179,   134,   181,   184,   190,   559,
     135,   136,   137,   138,   139,   140,   199,   581,    87,    88,
      89,    90,    91,    92,    93,    94,    95,   195,   197,   454,
     208,   209,   210,   211,   477,   246,   141,   247,   212,   253,
     261,   298,   142,   213,   124,   125,   214,   215,   216,   -97,
     217,   250,   218,   219,   220,   254,   469,   518,   257,   260,
     473,   275,   475,   244,   279,   594,   262,   280,   143,   144,
     598,   126,   127,   600,   281,   282,   283,   291,   128,   129,
     130,   235,   236,   237,   238,   239,   240,   241,   311,   519,
     131,   132,   297,   313,   133,   314,   315,   342,   343,   344,
     548,   363,   349,   350,   361,   124,   125,   134,   352,   417,
     353,   429,   135,   136,   137,   138,   139,   140,   400,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   126,   127,   381,   411,   421,   432,   141,   128,
     129,   130,   406,   433,   142,   383,   384,   385,   413,   436,
     442,   131,   132,   443,   446,   133,   124,   125,   451,   453,
     455,   456,   459,   460,   462,   251,   464,   465,   134,   284,
     143,   144,   467,   135,   136,   137,   138,   139,   140,   470,
     476,   478,   484,   126,   127,   488,   490,   489,   520,   521,
     128,   129,   130,   522,   530,   523,   528,   531,   543,   141,
     430,   552,   131,   132,   553,   142,   133,   491,    87,    88,
      89,    90,    91,    92,    93,    94,    95,   562,   492,   134,
     567,   571,   572,   574,   135,   136,   137,   138,   139,   140,
     554,   143,   144,   555,   564,   493,  -108,   577,   569,   582,
     586,   588,   590,   602,   494,   495,   496,   497,   498,   603,
     141,   499,   303,   198,   276,   296,   142,   223,    20,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   472,   546,   568,
     529,   557,   143,   144,   589,   579,   532,   500,   445,   501,
     170,   580,   458,   502,   575,   403,    42,     0,     0,     0,
      21,    22,   300,     0,     0,     0,     0,    20,    23,    24,
      25,    26,    27,    28,     0,     0,     0,     0,     0,     0,
       0,    29,    30,    31,    32,   503,   504,     0,   505,     0,
     506,    33,    34,    35,    36,    37,    38,     0,     0,   362,
       0,    39,    40,    41,    57,     0,     0,    42,     0,    21,
      22,     0,     0,     0,     0,     0,     0,    23,    24,    25,
      26,    27,    28,     0,     0,     0,   242,     0,    43,    57,
      29,    30,    31,    32,  -276,     0,     0,     0,    58,    44,
      33,    34,    35,    36,    37,    38,     0,     0,     0,     0,
      39,    40,    41,     0,     0,     0,    42,     0,    59,     0,
       0,   376,     0,    58,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,     0,     0,    43,     0,     0,
       0,     0,     0,    59,     0,     0,     0,     0,    44,     0,
       0,    60,     0,     0,    61,    62,    63,    64,    65,   -41,
      66,    67,    68,     0,    69,    70,    71,    72,    73,     0,
       0,     0,     0,    74,    75,    76,    60,     0,     0,    61,
      62,    63,    64,    65,     0,    66,    67,    68,     0,    69,
      70,    71,    72,    73,     0,     0,     0,     0,    74,    75,
      76,   223,     0,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   223,     0,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   223,     0,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   223,     0,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   223,     0,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   223,   306,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   223,   377,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   223,   378,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   223,   380,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   223,   382,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   223,   388,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   223,   448,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   223,   449,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   223,   450,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   223,   468,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   223,   482,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   223,   486,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   223,   487,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,     0,   534,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   223,
     379,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,     0,
       0,   430,     0,     0,     0,     0,     0,     0,     0,   223,
     386,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,     0,
     387,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,     0,     0,
     389,   223,   390,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   223,   435,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241
};

static const short yycheck[] =
{
      91,    61,   188,   189,   174,    96,    18,   166,   167,    59,
     397,    71,     4,     4,     4,   190,     4,     4,    78,   483,
       4,   278,     4,   461,     4,    15,     4,    52,    15,   506,
     116,    10,     4,     5,    51,    52,     4,   116,   580,   125,
      51,    10,    32,     4,     4,    32,   125,    16,   512,   487,
     592,   528,     4,    10,    15,   105,   106,   587,   108,   109,
      37,     3,     4,    15,   114,   595,   126,   127,   545,     4,
      52,    32,    52,    37,     4,     4,     4,     5,   124,     4,
      32,   468,   128,   143,   144,    15,   146,    48,    30,    31,
      10,   124,     4,   126,   154,    37,    38,    39,    40,   116,
     125,    51,    32,    15,    92,   116,    51,    49,    50,   366,
     574,    53,   172,   114,   289,    51,   117,    52,    48,     4,
      32,    32,    33,    34,    66,   124,   124,   126,   126,    71,
      72,    73,    74,    75,    76,   126,   126,   129,   129,   126,
     200,   201,   126,   203,   204,   124,   124,   534,   208,   209,
     210,   211,   124,   213,   126,    97,   124,   217,   218,   219,
     220,   103,   123,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,     3,     4,   129,   130,   124,
     250,   251,   351,   123,     4,   124,   124,   127,   126,   124,
      51,   126,     4,     4,   124,    15,    37,   298,   117,    37,
     119,   123,    30,    31,    30,    31,    32,    33,    34,    37,
      38,    39,    32,   124,   125,    61,    62,    63,    64,    65,
      37,    49,    50,     4,     5,    53,   286,   114,   288,    37,
     117,   118,   119,    61,    62,    63,    64,    65,    66,    37,
      52,    52,    37,    71,    72,    73,    74,    75,    76,     3,
       4,   447,   421,    65,    65,   110,   111,   112,    70,    70,
      37,   124,    39,   126,     4,     5,   121,    37,    37,    97,
      90,    37,     3,     4,    37,   103,    88,    88,   300,    10,
     126,    93,    93,   120,    37,    37,     4,   357,   358,   359,
     360,   520,   472,     4,   523,     4,     4,     4,   126,    30,
      31,   129,   130,   123,     4,     4,    37,    38,    39,   379,
       4,     4,     3,   542,   543,     4,   386,   387,    49,    50,
     390,     4,    53,     4,   553,    99,     4,    52,    16,   558,
      16,   125,     4,     4,     4,    66,     4,     4,     4,   568,
      71,    72,    73,    74,    75,    76,    51,   576,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    37,     4,   429,
      37,    37,    37,    37,   465,   124,    97,   124,    37,   124,
     117,    10,   103,    37,     3,     4,    37,    37,    37,    37,
      37,    10,    37,    37,    37,   124,   456,   488,    51,   125,
     460,   126,   462,   124,   126,   591,    52,   126,   129,   130,
     596,    30,    31,   599,   126,   126,   126,   126,    37,    38,
      39,    28,    29,    30,    31,    32,    33,    34,     4,   489,
      49,    50,   126,     4,    53,     4,     4,     4,     4,     4,
     531,    37,     4,     4,     4,     3,     4,    66,   125,     4,
     125,    37,    71,    72,    73,    74,    75,    76,    16,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    30,    31,   126,    16,    16,    16,    97,    37,
      38,    39,   124,    92,   103,   126,   126,   126,   126,    82,
       4,    49,    50,     4,    83,    53,     3,     4,   126,   126,
      16,    37,    51,    37,    37,   124,   126,    10,    66,   124,
     129,   130,   125,    71,    72,    73,    74,    75,    76,    51,
     125,    85,    51,    30,    31,    10,    16,    37,    37,    37,
      37,    38,    39,    37,    52,    37,    37,    37,    37,    97,
      37,   126,    49,    50,    37,   103,    53,     4,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    25,    15,    66,
      16,     4,    92,    51,    71,    72,    73,    74,    75,    76,
     126,   129,   130,   126,   126,    32,   126,    25,   126,     4,
      52,   126,     4,     0,    41,    42,    43,    44,    45,     0,
      97,    48,   202,   116,   178,   195,   103,    15,     4,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,   459,   528,   553,
     512,   540,   129,   130,   583,   574,   515,    84,   409,    86,
      85,   575,   437,    90,   566,   359,    93,    -1,    -1,    -1,
      46,    47,   199,    -1,    -1,    -1,    -1,     4,    54,    55,
      56,    57,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    70,   122,   123,    -1,   125,    -1,
     127,    77,    78,    79,    80,    81,    82,    -1,    -1,    36,
      -1,    87,    88,    89,     4,    -1,    -1,    93,    -1,    46,
      47,    -1,    -1,    -1,    -1,    -1,    -1,    54,    55,    56,
      57,    58,    59,    -1,    -1,    -1,   124,    -1,   114,     4,
      67,    68,    69,    70,   120,    -1,    -1,    -1,    38,   125,
      77,    78,    79,    80,    81,    82,    -1,    -1,    -1,    -1,
      87,    88,    89,    -1,    -1,    -1,    93,    -1,    58,    -1,
      -1,    36,    -1,    38,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    -1,    -1,   114,    -1,    -1,
      -1,    -1,    -1,    58,    -1,    -1,    -1,    -1,   125,    -1,
      -1,    91,    -1,    -1,    94,    95,    96,    97,    98,    99,
     100,   101,   102,    -1,   104,   105,   106,   107,   108,    -1,
      -1,    -1,    -1,   113,   114,   115,    91,    -1,    -1,    94,
      95,    96,    97,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,    -1,    -1,    -1,    -1,   113,   114,
     115,    15,    -1,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    15,    -1,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    15,    -1,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    15,    -1,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    15,    -1,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    15,   126,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    15,   126,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    15,   126,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    15,   126,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    15,   126,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    15,   126,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    15,   126,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    15,   126,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    15,   126,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    15,   126,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    15,   126,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    15,   126,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    15,   126,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,   126,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
     124,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,
     124,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
     124,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    -1,    -1,
     124,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 6:
#line 173 "ldgram.y"
{ ldlex_defsym(); }
    break;
case 7:
#line 175 "ldgram.y"
{
		  ldlex_popstate();
		  lang_add_assignment(exp_assop(yyvsp[-1].token,yyvsp[-2].name,yyvsp[0].etree));
		}
    break;
case 8:
#line 183 "ldgram.y"
{
		  ldlex_mri_script ();
		  PUSH_ERROR (_("MRI style script"));
		}
    break;
case 9:
#line 188 "ldgram.y"
{
		  ldlex_popstate ();
		  mri_draw_tree ();
		  POP_ERROR ();
		}
    break;
case 14:
#line 203 "ldgram.y"
{
			einfo(_("%P%F: unrecognised keyword in MRI style script '%s'\n"),yyvsp[0].name);
			}
    break;
case 15:
#line 206 "ldgram.y"
{
			config.map_filename = "-";
			}
    break;
case 18:
#line 212 "ldgram.y"
{ mri_public(yyvsp[-2].name, yyvsp[0].etree); }
    break;
case 19:
#line 214 "ldgram.y"
{ mri_public(yyvsp[-2].name, yyvsp[0].etree); }
    break;
case 20:
#line 216 "ldgram.y"
{ mri_public(yyvsp[-1].name, yyvsp[0].etree); }
    break;
case 21:
#line 218 "ldgram.y"
{ mri_format(yyvsp[0].name); }
    break;
case 22:
#line 220 "ldgram.y"
{ mri_output_section(yyvsp[-2].name, yyvsp[0].etree);}
    break;
case 23:
#line 222 "ldgram.y"
{ mri_output_section(yyvsp[-1].name, yyvsp[0].etree);}
    break;
case 24:
#line 224 "ldgram.y"
{ mri_output_section(yyvsp[-2].name, yyvsp[0].etree);}
    break;
case 25:
#line 226 "ldgram.y"
{ mri_align(yyvsp[-2].name,yyvsp[0].etree); }
    break;
case 26:
#line 228 "ldgram.y"
{ mri_align(yyvsp[-2].name,yyvsp[0].etree); }
    break;
case 27:
#line 230 "ldgram.y"
{ mri_alignmod(yyvsp[-2].name,yyvsp[0].etree); }
    break;
case 28:
#line 232 "ldgram.y"
{ mri_alignmod(yyvsp[-2].name,yyvsp[0].etree); }
    break;
case 31:
#line 236 "ldgram.y"
{ mri_name(yyvsp[0].name); }
    break;
case 32:
#line 238 "ldgram.y"
{ mri_alias(yyvsp[-2].name,yyvsp[0].name,0);}
    break;
case 33:
#line 240 "ldgram.y"
{ mri_alias (yyvsp[-2].name, 0, (int) yyvsp[0].bigint.integer); }
    break;
case 34:
#line 242 "ldgram.y"
{ mri_base(yyvsp[0].etree); }
    break;
case 35:
#line 244 "ldgram.y"
{ mri_truncate ((unsigned int) yyvsp[0].bigint.integer); }
    break;
case 38:
#line 248 "ldgram.y"
{ ldlex_script (); ldfile_open_command_file(yyvsp[0].name); }
    break;
case 39:
#line 250 "ldgram.y"
{ ldlex_popstate (); }
    break;
case 40:
#line 252 "ldgram.y"
{ lang_add_entry (yyvsp[0].name, false); }
    break;
case 42:
#line 257 "ldgram.y"
{ mri_order(yyvsp[0].name); }
    break;
case 43:
#line 258 "ldgram.y"
{ mri_order(yyvsp[0].name); }
    break;
case 45:
#line 264 "ldgram.y"
{ mri_load(yyvsp[0].name); }
    break;
case 46:
#line 265 "ldgram.y"
{ mri_load(yyvsp[0].name); }
    break;
case 47:
#line 270 "ldgram.y"
{ mri_only_load(yyvsp[0].name); }
    break;
case 48:
#line 272 "ldgram.y"
{ mri_only_load(yyvsp[0].name); }
    break;
case 49:
#line 276 "ldgram.y"
{ yyval.name = NULL; }
    break;
case 52:
#line 283 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); }
    break;
case 53:
#line 285 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); }
    break;
case 54:
#line 287 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); }
    break;
case 55:
#line 291 "ldgram.y"
{
	 ldlex_both();
	}
    break;
case 56:
#line 295 "ldgram.y"
{
	ldlex_popstate();
	}
    break;
case 69:
#line 320 "ldgram.y"
{ lang_add_target(yyvsp[-1].name); }
    break;
case 70:
#line 322 "ldgram.y"
{ ldfile_add_library_path (yyvsp[-1].name, false); }
    break;
case 71:
#line 324 "ldgram.y"
{ lang_add_output(yyvsp[-1].name, 1); }
    break;
case 72:
#line 326 "ldgram.y"
{ lang_add_output_format (yyvsp[-1].name, (char *) NULL,
					    (char *) NULL, 1); }
    break;
case 73:
#line 329 "ldgram.y"
{ lang_add_output_format (yyvsp[-5].name, yyvsp[-3].name, yyvsp[-1].name, 1); }
    break;
case 74:
#line 331 "ldgram.y"
{ ldfile_set_output_arch(yyvsp[-1].name); }
    break;
case 75:
#line 333 "ldgram.y"
{ command_line.force_common_definition = true ; }
    break;
case 76:
#line 335 "ldgram.y"
{ command_line.inhibit_common_definition = true ; }
    break;
case 78:
#line 338 "ldgram.y"
{ lang_enter_group (); }
    break;
case 79:
#line 340 "ldgram.y"
{ lang_leave_group (); }
    break;
case 80:
#line 342 "ldgram.y"
{ lang_add_map(yyvsp[-1].name); }
    break;
case 81:
#line 344 "ldgram.y"
{ ldlex_script (); ldfile_open_command_file(yyvsp[0].name); }
    break;
case 82:
#line 346 "ldgram.y"
{ ldlex_popstate (); }
    break;
case 83:
#line 348 "ldgram.y"
{
		  lang_add_nocrossref (yyvsp[-1].nocrossref);
		}
    break;
case 85:
#line 356 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;
case 86:
#line 359 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;
case 87:
#line 362 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;
case 88:
#line 365 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;
case 89:
#line 368 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;
case 90:
#line 371 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;
case 95:
#line 387 "ldgram.y"
{ lang_add_entry (yyvsp[-1].name, false); }
    break;
case 97:
#line 395 "ldgram.y"
{
			  yyval.cname = yyvsp[0].name;
			}
    break;
case 98:
#line 399 "ldgram.y"
{
			  yyval.cname = "*";
			}
    break;
case 99:
#line 403 "ldgram.y"
{
			  yyval.cname = "?";
			}
    break;
case 100:
#line 410 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[0].cname;
			  yyval.wildcard.sorted = false;
			  yyval.wildcard.exclude_name_list = NULL;
			}
    break;
case 101:
#line 416 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[0].cname;
			  yyval.wildcard.sorted = false;
			  yyval.wildcard.exclude_name_list = yyvsp[-2].name_list;
			}
    break;
case 102:
#line 422 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-1].cname;
			  yyval.wildcard.sorted = true;
			  yyval.wildcard.exclude_name_list = NULL;
			}
    break;
case 103:
#line 428 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-1].cname;
			  yyval.wildcard.sorted = true;
			  yyval.wildcard.exclude_name_list = yyvsp[-3].name_list;
			}
    break;
case 104:
#line 437 "ldgram.y"
{
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = yyvsp[0].cname;
			  tmp->next = yyvsp[-1].name_list;
			  yyval.name_list = tmp;	
			}
    break;
case 105:
#line 446 "ldgram.y"
{
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = yyvsp[0].cname;
			  tmp->next = NULL;
			  yyval.name_list = tmp;
			}
    break;
case 106:
#line 457 "ldgram.y"
{
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = yyvsp[-2].wildcard_list;
			  tmp->spec = yyvsp[0].wildcard;
			  yyval.wildcard_list = tmp;
			}
    break;
case 107:
#line 466 "ldgram.y"
{
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = NULL;
			  tmp->spec = yyvsp[0].wildcard;
			  yyval.wildcard_list = tmp;
			}
    break;
case 108:
#line 477 "ldgram.y"
{
			  struct wildcard_spec tmp;
			  tmp.name = yyvsp[0].name;
			  tmp.exclude_name_list = NULL;
			  tmp.sorted = false;
			  lang_add_wild (&tmp, NULL, ldgram_had_keep);
			}
    break;
case 109:
#line 485 "ldgram.y"
{
			  lang_add_wild (NULL, yyvsp[-1].wildcard_list, ldgram_had_keep);
			}
    break;
case 110:
#line 489 "ldgram.y"
{
			  lang_add_wild (&yyvsp[-3].wildcard, yyvsp[-1].wildcard_list, ldgram_had_keep);
			}
    break;
case 112:
#line 497 "ldgram.y"
{ ldgram_had_keep = true; }
    break;
case 113:
#line 499 "ldgram.y"
{ ldgram_had_keep = false; }
    break;
case 115:
#line 505 "ldgram.y"
{
 		lang_add_attribute(lang_object_symbols_statement_enum); 
	      	}
    break;
case 117:
#line 510 "ldgram.y"
{
 		
		  lang_add_attribute(lang_constructors_statement_enum); 
		}
    break;
case 118:
#line 515 "ldgram.y"
{
		  constructors_sorted = true;
		  lang_add_attribute (lang_constructors_statement_enum);
		}
    break;
case 120:
#line 521 "ldgram.y"
{
			  lang_add_data ((int) yyvsp[-3].integer, yyvsp[-1].etree);
			}
    break;
case 121:
#line 526 "ldgram.y"
{
			  lang_add_fill (yyvsp[-1].fill);
			}
    break;
case 126:
#line 543 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 127:
#line 545 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 128:
#line 547 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 129:
#line 549 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 130:
#line 551 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 131:
#line 556 "ldgram.y"
{
		  yyval.fill = exp_get_fill (yyvsp[0].etree,
				     0,
				     "fill value",
				     lang_first_phase_enum);
		}
    break;
case 132:
#line 566 "ldgram.y"
{ yyval.fill = yyvsp[0].fill; }
    break;
case 133:
#line 567 "ldgram.y"
{ yyval.fill = (fill_type *) 0; }
    break;
case 134:
#line 572 "ldgram.y"
{ yyval.token = '+'; }
    break;
case 135:
#line 574 "ldgram.y"
{ yyval.token = '-'; }
    break;
case 136:
#line 576 "ldgram.y"
{ yyval.token = '*'; }
    break;
case 137:
#line 578 "ldgram.y"
{ yyval.token = '/'; }
    break;
case 138:
#line 580 "ldgram.y"
{ yyval.token = LSHIFT; }
    break;
case 139:
#line 582 "ldgram.y"
{ yyval.token = RSHIFT; }
    break;
case 140:
#line 584 "ldgram.y"
{ yyval.token = '&'; }
    break;
case 141:
#line 586 "ldgram.y"
{ yyval.token = '|'; }
    break;
case 144:
#line 596 "ldgram.y"
{
		  lang_add_assignment (exp_assop (yyvsp[-1].token, yyvsp[-2].name, yyvsp[0].etree));
		}
    break;
case 145:
#line 600 "ldgram.y"
{
		  lang_add_assignment (exp_assop ('=', yyvsp[-2].name,
						  exp_binop (yyvsp[-1].token,
							     exp_nameop (NAME,
									 yyvsp[-2].name),
							     yyvsp[0].etree)));
		}
    break;
case 146:
#line 608 "ldgram.y"
{
		  lang_add_assignment (exp_provide (yyvsp[-3].name, yyvsp[-1].etree));
		}
    break;
case 153:
#line 630 "ldgram.y"
{ region = lang_memory_region_lookup(yyvsp[0].name); }
    break;
case 155:
#line 638 "ldgram.y"
{ region->current =
		 region->origin =
		 exp_get_vma(yyvsp[0].etree, 0L,"origin", lang_first_phase_enum);
}
    break;
case 156:
#line 646 "ldgram.y"
{ region->length = exp_get_vma(yyvsp[0].etree,
					       ~((bfd_vma)0),
					       "length",
					       lang_first_phase_enum);
		}
    break;
case 157:
#line 655 "ldgram.y"
{ /* dummy action to avoid bison 1.25 error message */ }
    break;
case 161:
#line 666 "ldgram.y"
{ lang_set_flags (region, yyvsp[0].name, 0); }
    break;
case 162:
#line 668 "ldgram.y"
{ lang_set_flags (region, yyvsp[0].name, 1); }
    break;
case 163:
#line 673 "ldgram.y"
{ lang_startup(yyvsp[-1].name); }
    break;
case 165:
#line 679 "ldgram.y"
{ ldemul_hll((char *)NULL); }
    break;
case 166:
#line 684 "ldgram.y"
{ ldemul_hll(yyvsp[0].name); }
    break;
case 167:
#line 686 "ldgram.y"
{ ldemul_hll(yyvsp[0].name); }
    break;
case 169:
#line 694 "ldgram.y"
{ ldemul_syslib(yyvsp[0].name); }
    break;
case 171:
#line 700 "ldgram.y"
{ lang_float(true); }
    break;
case 172:
#line 702 "ldgram.y"
{ lang_float(false); }
    break;
case 173:
#line 707 "ldgram.y"
{
		  yyval.nocrossref = NULL;
		}
    break;
case 174:
#line 711 "ldgram.y"
{
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = yyvsp[-1].name;
		  n->next = yyvsp[0].nocrossref;
		  yyval.nocrossref = n;
		}
    break;
case 175:
#line 720 "ldgram.y"
{
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = yyvsp[-2].name;
		  n->next = yyvsp[0].nocrossref;
		  yyval.nocrossref = n;
		}
    break;
case 176:
#line 730 "ldgram.y"
{ ldlex_expression(); }
    break;
case 177:
#line 732 "ldgram.y"
{ ldlex_popstate(); yyval.etree=yyvsp[0].etree;}
    break;
case 178:
#line 737 "ldgram.y"
{ yyval.etree = exp_unop('-', yyvsp[0].etree); }
    break;
case 179:
#line 739 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
case 180:
#line 741 "ldgram.y"
{ yyval.etree = exp_unop((int) yyvsp[-3].integer,yyvsp[-1].etree); }
    break;
case 181:
#line 743 "ldgram.y"
{ yyval.etree = exp_unop('!', yyvsp[0].etree); }
    break;
case 182:
#line 745 "ldgram.y"
{ yyval.etree = yyvsp[0].etree; }
    break;
case 183:
#line 747 "ldgram.y"
{ yyval.etree = exp_unop('~', yyvsp[0].etree);}
    break;
case 184:
#line 750 "ldgram.y"
{ yyval.etree = exp_binop('*', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 185:
#line 752 "ldgram.y"
{ yyval.etree = exp_binop('/', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 186:
#line 754 "ldgram.y"
{ yyval.etree = exp_binop('%', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 187:
#line 756 "ldgram.y"
{ yyval.etree = exp_binop('+', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 188:
#line 758 "ldgram.y"
{ yyval.etree = exp_binop('-' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 189:
#line 760 "ldgram.y"
{ yyval.etree = exp_binop(LSHIFT , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 190:
#line 762 "ldgram.y"
{ yyval.etree = exp_binop(RSHIFT , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 191:
#line 764 "ldgram.y"
{ yyval.etree = exp_binop(EQ , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 192:
#line 766 "ldgram.y"
{ yyval.etree = exp_binop(NE , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 193:
#line 768 "ldgram.y"
{ yyval.etree = exp_binop(LE , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 194:
#line 770 "ldgram.y"
{ yyval.etree = exp_binop(GE , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 195:
#line 772 "ldgram.y"
{ yyval.etree = exp_binop('<' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 196:
#line 774 "ldgram.y"
{ yyval.etree = exp_binop('>' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 197:
#line 776 "ldgram.y"
{ yyval.etree = exp_binop('&' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 198:
#line 778 "ldgram.y"
{ yyval.etree = exp_binop('^' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 199:
#line 780 "ldgram.y"
{ yyval.etree = exp_binop('|' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 200:
#line 782 "ldgram.y"
{ yyval.etree = exp_trinop('?' , yyvsp[-4].etree, yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 201:
#line 784 "ldgram.y"
{ yyval.etree = exp_binop(ANDAND , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 202:
#line 786 "ldgram.y"
{ yyval.etree = exp_binop(OROR , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 203:
#line 788 "ldgram.y"
{ yyval.etree = exp_nameop(DEFINED, yyvsp[-1].name); }
    break;
case 204:
#line 790 "ldgram.y"
{ yyval.etree = exp_bigintop (yyvsp[0].bigint.integer, yyvsp[0].bigint.str); }
    break;
case 205:
#line 792 "ldgram.y"
{ yyval.etree = exp_nameop(SIZEOF_HEADERS,0); }
    break;
case 206:
#line 795 "ldgram.y"
{ yyval.etree = exp_nameop(SIZEOF,yyvsp[-1].name); }
    break;
case 207:
#line 797 "ldgram.y"
{ yyval.etree = exp_nameop(ADDR,yyvsp[-1].name); }
    break;
case 208:
#line 799 "ldgram.y"
{ yyval.etree = exp_nameop(LOADADDR,yyvsp[-1].name); }
    break;
case 209:
#line 801 "ldgram.y"
{ yyval.etree = exp_unop(ABSOLUTE, yyvsp[-1].etree); }
    break;
case 210:
#line 803 "ldgram.y"
{ yyval.etree = exp_unop(ALIGN_K,yyvsp[-1].etree); }
    break;
case 211:
#line 805 "ldgram.y"
{ yyval.etree = exp_binop (DATA_SEGMENT_ALIGN, yyvsp[-3].etree, yyvsp[-1].etree); }
    break;
case 212:
#line 807 "ldgram.y"
{ yyval.etree = exp_unop(DATA_SEGMENT_END, yyvsp[-1].etree); }
    break;
case 213:
#line 809 "ldgram.y"
{ yyval.etree = exp_unop(ALIGN_K,yyvsp[-1].etree); }
    break;
case 214:
#line 811 "ldgram.y"
{ yyval.etree = exp_nameop(NAME,yyvsp[0].name); }
    break;
case 215:
#line 813 "ldgram.y"
{ yyval.etree = exp_binop (MAX_K, yyvsp[-3].etree, yyvsp[-1].etree ); }
    break;
case 216:
#line 815 "ldgram.y"
{ yyval.etree = exp_binop (MIN_K, yyvsp[-3].etree, yyvsp[-1].etree ); }
    break;
case 217:
#line 817 "ldgram.y"
{ yyval.etree = exp_assert (yyvsp[-3].etree, yyvsp[-1].name); }
    break;
case 218:
#line 822 "ldgram.y"
{ yyval.name = yyvsp[0].name; }
    break;
case 219:
#line 823 "ldgram.y"
{ yyval.name = 0; }
    break;
case 220:
#line 827 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
case 221:
#line 828 "ldgram.y"
{ yyval.etree = 0; }
    break;
case 222:
#line 831 "ldgram.y"
{ ldlex_expression(); }
    break;
case 223:
#line 833 "ldgram.y"
{ ldlex_popstate (); ldlex_script (); }
    break;
case 224:
#line 835 "ldgram.y"
{
			  lang_enter_output_section_statement(yyvsp[-5].name, yyvsp[-3].etree,
							      sectype,
							      0, 0, 0, yyvsp[-2].etree);
			}
    break;
case 225:
#line 841 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); }
    break;
case 226:
#line 843 "ldgram.y"
{
		  ldlex_popstate ();
		  lang_leave_output_section_statement (yyvsp[0].fill, yyvsp[-3].name, yyvsp[-1].section_phdr, yyvsp[-2].name);
		}
    break;
case 228:
#line 849 "ldgram.y"
{ ldlex_expression (); }
    break;
case 229:
#line 851 "ldgram.y"
{ ldlex_popstate (); ldlex_script (); }
    break;
case 230:
#line 853 "ldgram.y"
{
			  lang_enter_overlay (yyvsp[-4].etree);
			}
    break;
case 231:
#line 858 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); }
    break;
case 232:
#line 860 "ldgram.y"
{
			  ldlex_popstate ();
			  lang_leave_overlay (yyvsp[-10].etree, (int) yyvsp[-11].integer,
					      yyvsp[0].fill, yyvsp[-3].name, yyvsp[-1].section_phdr, yyvsp[-2].name);
			}
    break;
case 234:
#line 870 "ldgram.y"
{ ldlex_expression (); }
    break;
case 235:
#line 872 "ldgram.y"
{
		  ldlex_popstate ();
		  lang_add_assignment (exp_assop ('=', ".", yyvsp[0].etree));
		}
    break;
case 237:
#line 880 "ldgram.y"
{ sectype = noload_section; }
    break;
case 238:
#line 881 "ldgram.y"
{ sectype = dsect_section; }
    break;
case 239:
#line 882 "ldgram.y"
{ sectype = copy_section; }
    break;
case 240:
#line 883 "ldgram.y"
{ sectype = info_section; }
    break;
case 241:
#line 884 "ldgram.y"
{ sectype = overlay_section; }
    break;
case 243:
#line 889 "ldgram.y"
{ sectype = normal_section; }
    break;
case 244:
#line 890 "ldgram.y"
{ sectype = normal_section; }
    break;
case 245:
#line 894 "ldgram.y"
{ yyval.etree = yyvsp[-2].etree; }
    break;
case 246:
#line 895 "ldgram.y"
{ yyval.etree = (etree_type *)NULL;  }
    break;
case 247:
#line 900 "ldgram.y"
{ yyval.etree = yyvsp[-3].etree; }
    break;
case 248:
#line 902 "ldgram.y"
{ yyval.etree = yyvsp[-7].etree; }
    break;
case 249:
#line 906 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
case 250:
#line 907 "ldgram.y"
{ yyval.etree = (etree_type *) NULL;  }
    break;
case 251:
#line 912 "ldgram.y"
{ yyval.integer = 0; }
    break;
case 252:
#line 914 "ldgram.y"
{ yyval.integer = 1; }
    break;
case 253:
#line 919 "ldgram.y"
{ yyval.name = yyvsp[0].name; }
    break;
case 254:
#line 920 "ldgram.y"
{ yyval.name = "*default*"; }
    break;
case 255:
#line 925 "ldgram.y"
{
		  yyval.section_phdr = NULL;
		}
    break;
case 256:
#line 929 "ldgram.y"
{
		  struct lang_output_section_phdr_list *n;

		  n = ((struct lang_output_section_phdr_list *)
		       xmalloc (sizeof *n));
		  n->name = yyvsp[0].name;
		  n->used = false;
		  n->next = yyvsp[-2].section_phdr;
		  yyval.section_phdr = n;
		}
    break;
case 258:
#line 945 "ldgram.y"
{
			  ldlex_script ();
			  lang_enter_overlay_section (yyvsp[0].name);
			}
    break;
case 259:
#line 950 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); }
    break;
case 260:
#line 952 "ldgram.y"
{
			  ldlex_popstate ();
			  lang_leave_overlay_section (yyvsp[0].fill, yyvsp[-1].section_phdr);
			}
    break;
case 265:
#line 969 "ldgram.y"
{ ldlex_expression (); }
    break;
case 266:
#line 970 "ldgram.y"
{ ldlex_popstate (); }
    break;
case 267:
#line 972 "ldgram.y"
{
		  lang_new_phdr (yyvsp[-5].name, yyvsp[-3].etree, yyvsp[-2].phdr.filehdr, yyvsp[-2].phdr.phdrs, yyvsp[-2].phdr.at,
				 yyvsp[-2].phdr.flags);
		}
    break;
case 268:
#line 980 "ldgram.y"
{
		  yyval.etree = yyvsp[0].etree;

		  if (yyvsp[0].etree->type.node_class == etree_name
		      && yyvsp[0].etree->type.node_code == NAME)
		    {
		      const char *s;
		      unsigned int i;
		      static const char * const phdr_types[] =
			{
			  "PT_NULL", "PT_LOAD", "PT_DYNAMIC",
			  "PT_INTERP", "PT_NOTE", "PT_SHLIB",
			  "PT_PHDR"
			};

		      s = yyvsp[0].etree->name.name;
		      for (i = 0;
			   i < sizeof phdr_types / sizeof phdr_types[0];
			   i++)
			if (strcmp (s, phdr_types[i]) == 0)
			  {
			    yyval.etree = exp_intop (i);
			    break;
			  }
		    }
		}
    break;
case 269:
#line 1010 "ldgram.y"
{
		  memset (&yyval.phdr, 0, sizeof (struct phdr_info));
		}
    break;
case 270:
#line 1014 "ldgram.y"
{
		  yyval.phdr = yyvsp[0].phdr;
		  if (strcmp (yyvsp[-2].name, "FILEHDR") == 0 && yyvsp[-1].etree == NULL)
		    yyval.phdr.filehdr = true;
		  else if (strcmp (yyvsp[-2].name, "PHDRS") == 0 && yyvsp[-1].etree == NULL)
		    yyval.phdr.phdrs = true;
		  else if (strcmp (yyvsp[-2].name, "FLAGS") == 0 && yyvsp[-1].etree != NULL)
		    yyval.phdr.flags = yyvsp[-1].etree;
		  else
		    einfo (_("%X%P:%S: PHDRS syntax error at `%s'\n"), yyvsp[-2].name);
		}
    break;
case 271:
#line 1026 "ldgram.y"
{
		  yyval.phdr = yyvsp[0].phdr;
		  yyval.phdr.at = yyvsp[-2].etree;
		}
    break;
case 272:
#line 1034 "ldgram.y"
{
		  yyval.etree = NULL;
		}
    break;
case 273:
#line 1038 "ldgram.y"
{
		  yyval.etree = yyvsp[-1].etree;
		}
    break;
case 274:
#line 1046 "ldgram.y"
{
		  ldlex_version_file ();
		  PUSH_ERROR (_("VERSION script"));
		}
    break;
case 275:
#line 1051 "ldgram.y"
{
		  ldlex_popstate ();
		  POP_ERROR ();
		}
    break;
case 276:
#line 1060 "ldgram.y"
{
		  ldlex_version_script ();
		}
    break;
case 277:
#line 1064 "ldgram.y"
{
		  ldlex_popstate ();
		}
    break;
case 280:
#line 1076 "ldgram.y"
{
		  lang_register_vers_node (NULL, yyvsp[-2].versnode, NULL);
		}
    break;
case 281:
#line 1080 "ldgram.y"
{
		  lang_register_vers_node (yyvsp[-4].name, yyvsp[-2].versnode, NULL);
		}
    break;
case 282:
#line 1084 "ldgram.y"
{
		  lang_register_vers_node (yyvsp[-5].name, yyvsp[-3].versnode, yyvsp[-1].deflist);
		}
    break;
case 283:
#line 1091 "ldgram.y"
{
		  yyval.deflist = lang_add_vers_depend (NULL, yyvsp[0].name);
		}
    break;
case 284:
#line 1095 "ldgram.y"
{
		  yyval.deflist = lang_add_vers_depend (yyvsp[-1].deflist, yyvsp[0].name);
		}
    break;
case 285:
#line 1102 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (NULL, NULL);
		}
    break;
case 286:
#line 1106 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-1].versyms, NULL);
		}
    break;
case 287:
#line 1110 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-1].versyms, NULL);
		}
    break;
case 288:
#line 1114 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (NULL, yyvsp[-1].versyms);
		}
    break;
case 289:
#line 1118 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-5].versyms, yyvsp[-1].versyms);
		}
    break;
case 290:
#line 1125 "ldgram.y"
{
		  yyval.versyms = lang_new_vers_pattern (NULL, yyvsp[0].name, ldgram_vers_current_lang);
		}
    break;
case 291:
#line 1129 "ldgram.y"
{
		  yyval.versyms = lang_new_vers_pattern (yyvsp[-2].versyms, yyvsp[0].name, ldgram_vers_current_lang);
		}
    break;
case 292:
#line 1133 "ldgram.y"
{
			  yyval.name = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = yyvsp[-1].name;
			}
    break;
case 293:
#line 1138 "ldgram.y"
{
			  yyval.versyms = yyvsp[-1].versyms;
			  ldgram_vers_current_lang = yyvsp[-2].name;
			}
    break;
}

#line 705 "/usr/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 1144 "ldgram.y"

void
yyerror(arg) 
     const char *arg;
{ 
  if (ldfile_assumed_script)
    einfo (_("%P:%s: file format not recognized; treating as linker script\n"),
	   ldfile_input_filename);
  if (error_index > 0 && error_index < ERROR_NAME_MAX)
     einfo ("%P%F:%S: %s in %s\n", arg, error_names[error_index-1]);
  else
     einfo ("%P%F:%S: %s\n", arg);
}
@


1.1.8.2
log
@Regenerate generated files.
@
text
@d410 8
a417 8
     826,   828,   831,   831,   831,   831,   831,   831,   849,   849,
     849,   849,   849,   849,   867,   867,   867,   880,   882,   883,
     884,   885,   888,   890,   891,   894,   896,   897,   902,   906,
     908,   911,   914,   918,   921,   924,   929,   942,   944,   944,
     944,   944,   960,   964,   966,   969,   969,   969,   979,  1009,
    1014,  1026,  1033,  1038,  1046,  1046,  1060,  1060,  1070,  1072,
    1075,  1080,  1084,  1090,  1095,  1101,  1106,  1110,  1114,  1118,
    1124,  1129,  1133,  1133
d991 1
a991 1
#line 3 "/usr/share/bison-1.35/bison.simple"
d1304 1
a1304 1
#line 315 "/usr/share/bison-1.35/bison.simple"
a2202 4
case 154:
#line 633 "ldgram.y"
{}
    break;
a2496 4
case 227:
#line 848 "ldgram.y"
{}
    break;
d2498 1
a2498 1
#line 850 "ldgram.y"
d2502 1
a2502 1
#line 852 "ldgram.y"
d2506 1
a2506 1
#line 854 "ldgram.y"
d2512 1
a2512 1
#line 859 "ldgram.y"
d2516 1
a2516 1
#line 861 "ldgram.y"
d2524 1
a2524 1
#line 871 "ldgram.y"
d2528 1
a2528 1
#line 873 "ldgram.y"
d2535 1
a2535 1
#line 881 "ldgram.y"
d2539 1
a2539 1
#line 882 "ldgram.y"
d2543 1
a2543 1
#line 883 "ldgram.y"
d2547 1
a2547 1
#line 884 "ldgram.y"
d2551 1
a2551 1
#line 885 "ldgram.y"
d2555 1
a2555 1
#line 890 "ldgram.y"
d2559 1
a2559 1
#line 891 "ldgram.y"
d2563 1
a2563 1
#line 895 "ldgram.y"
d2567 1
a2567 1
#line 896 "ldgram.y"
d2571 1
a2571 1
#line 901 "ldgram.y"
d2575 1
a2575 1
#line 903 "ldgram.y"
d2579 1
a2579 1
#line 907 "ldgram.y"
d2583 1
a2583 1
#line 908 "ldgram.y"
d2587 1
a2587 1
#line 913 "ldgram.y"
d2591 1
a2591 1
#line 915 "ldgram.y"
d2595 1
a2595 1
#line 920 "ldgram.y"
d2599 1
a2599 1
#line 921 "ldgram.y"
d2603 1
a2603 1
#line 926 "ldgram.y"
d2609 1
a2609 1
#line 930 "ldgram.y"
d2622 1
a2622 1
#line 946 "ldgram.y"
d2629 1
a2629 1
#line 951 "ldgram.y"
d2633 1
a2633 1
#line 953 "ldgram.y"
d2640 1
a2640 1
#line 970 "ldgram.y"
d2644 1
a2644 1
#line 971 "ldgram.y"
d2648 1
a2648 1
#line 973 "ldgram.y"
d2655 1
a2655 1
#line 981 "ldgram.y"
d2684 1
a2684 1
#line 1011 "ldgram.y"
d2690 1
a2690 1
#line 1015 "ldgram.y"
d2704 1
a2704 1
#line 1027 "ldgram.y"
d2711 1
a2711 1
#line 1035 "ldgram.y"
d2717 1
a2717 1
#line 1039 "ldgram.y"
d2723 1
a2723 1
#line 1047 "ldgram.y"
d2730 1
a2730 1
#line 1052 "ldgram.y"
d2737 1
a2737 1
#line 1061 "ldgram.y"
d2743 1
a2743 1
#line 1065 "ldgram.y"
d2749 1
a2749 1
#line 1077 "ldgram.y"
d2755 1
a2755 1
#line 1081 "ldgram.y"
d2761 1
a2761 1
#line 1085 "ldgram.y"
d2767 1
a2767 1
#line 1092 "ldgram.y"
d2773 1
a2773 1
#line 1096 "ldgram.y"
d2779 1
a2779 1
#line 1103 "ldgram.y"
d2785 1
a2785 1
#line 1107 "ldgram.y"
d2791 1
a2791 1
#line 1111 "ldgram.y"
d2797 1
a2797 1
#line 1115 "ldgram.y"
d2803 1
a2803 1
#line 1119 "ldgram.y"
d2809 1
a2809 1
#line 1126 "ldgram.y"
d2815 1
a2815 1
#line 1130 "ldgram.y"
d2821 1
a2821 1
#line 1134 "ldgram.y"
d2828 1
a2828 1
#line 1139 "ldgram.y"
d2836 1
a2836 1
#line 705 "/usr/share/bison-1.35/bison.simple"
d3067 1
a3067 1
#line 1145 "ldgram.y"
@


1.1.6.1
log
@Add generated files on 2.12 release branch.
@
text
@a0 3065
/* A Bison parser, made from ldgram.y
   by GNU bison 1.33.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	INT	257
# define	NAME	258
# define	LNAME	259
# define	PLUSEQ	260
# define	MINUSEQ	261
# define	MULTEQ	262
# define	DIVEQ	263
# define	LSHIFTEQ	264
# define	RSHIFTEQ	265
# define	ANDEQ	266
# define	OREQ	267
# define	OROR	268
# define	ANDAND	269
# define	EQ	270
# define	NE	271
# define	LE	272
# define	GE	273
# define	LSHIFT	274
# define	RSHIFT	275
# define	UNARY	276
# define	END	277
# define	ALIGN_K	278
# define	BLOCK	279
# define	BIND	280
# define	QUAD	281
# define	SQUAD	282
# define	LONG	283
# define	SHORT	284
# define	BYTE	285
# define	SECTIONS	286
# define	PHDRS	287
# define	SORT	288
# define	SIZEOF_HEADERS	289
# define	OUTPUT_FORMAT	290
# define	FORCE_COMMON_ALLOCATION	291
# define	OUTPUT_ARCH	292
# define	INHIBIT_COMMON_ALLOCATION	293
# define	INCLUDE	294
# define	MEMORY	295
# define	DEFSYMEND	296
# define	NOLOAD	297
# define	DSECT	298
# define	COPY	299
# define	INFO	300
# define	OVERLAY	301
# define	DEFINED	302
# define	TARGET_K	303
# define	SEARCH_DIR	304
# define	MAP	305
# define	ENTRY	306
# define	NEXT	307
# define	SIZEOF	308
# define	ADDR	309
# define	LOADADDR	310
# define	MAX_K	311
# define	MIN_K	312
# define	STARTUP	313
# define	HLL	314
# define	SYSLIB	315
# define	FLOAT	316
# define	NOFLOAT	317
# define	NOCROSSREFS	318
# define	ORIGIN	319
# define	FILL	320
# define	LENGTH	321
# define	CREATE_OBJECT_SYMBOLS	322
# define	INPUT	323
# define	GROUP	324
# define	OUTPUT	325
# define	CONSTRUCTORS	326
# define	ALIGNMOD	327
# define	AT	328
# define	PROVIDE	329
# define	CHIP	330
# define	LIST	331
# define	SECT	332
# define	ABSOLUTE	333
# define	LOAD	334
# define	NEWLINE	335
# define	ENDWORD	336
# define	ORDER	337
# define	NAMEWORD	338
# define	ASSERT_K	339
# define	FORMAT	340
# define	PUBLIC	341
# define	BASE	342
# define	ALIAS	343
# define	TRUNCATE	344
# define	REL	345
# define	INPUT_SCRIPT	346
# define	INPUT_MRI_SCRIPT	347
# define	INPUT_DEFSYM	348
# define	CASE	349
# define	EXTERN	350
# define	START	351
# define	VERS_TAG	352
# define	VERS_IDENTIFIER	353
# define	GLOBAL	354
# define	LOCAL	355
# define	VERSIONK	356
# define	INPUT_VERSION_SCRIPT	357
# define	KEEP	358
# define	EXCLUDE_FILE	359

#line 22 "ldgram.y"

/*

 */

#define DONTDECLARE_MALLOC

#include "bfd.h"
#include "sysdep.h"
#include "bfdlink.h"
#include "ld.h"    
#include "ldexp.h"
#include "ldver.h"
#include "ldlang.h"
#include "ldfile.h"
#include "ldemul.h"
#include "ldmisc.h"
#include "ldmain.h"
#include "mri.h"
#include "ldctor.h"
#include "ldlex.h"

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

static enum section_type sectype;

lang_memory_region_type *region;

boolean ldgram_want_filename = true;
FILE *  saved_script_handle = NULL;
boolean force_make_executable = false;

boolean ldgram_in_script = false;
boolean ldgram_had_equals = false;
boolean ldgram_had_keep = false;
char *ldgram_vers_current_lang = NULL;

#define ERROR_NAME_MAX 20
static char *error_names[ERROR_NAME_MAX];
static int error_index;
#define PUSH_ERROR(x) if (error_index < ERROR_NAME_MAX) error_names[error_index] = x; error_index++;
#define POP_ERROR()   error_index--;

#line 67 "ldgram.y"
#ifndef YYSTYPE
typedef union {
  bfd_vma integer;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      boolean filehdr;
      boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
} yystype;
# define YYSTYPE yystype
#endif
#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		592
#define	YYFLAG		-32768
#define	YYNTBASE	129

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 359 ? yytranslate[x] : 232)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const short yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   127,     2,     2,     2,    34,    21,     2,
      37,   124,    32,    30,   122,    31,     2,    33,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    16,   123,
      24,    10,    25,    15,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   125,     2,   126,    20,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    49,    19,    50,   128,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    11,    12,    13,    14,    17,    18,
      22,    23,    26,    27,    28,    29,    35,    36,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   120,   121
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     3,     6,     9,    12,    14,    15,    20,    21,
      24,    28,    29,    32,    37,    39,    41,    44,    46,    51,
      56,    60,    63,    68,    72,    77,    82,    87,    92,    97,
     100,   103,   106,   111,   116,   119,   122,   125,   128,   129,
     135,   138,   139,   143,   146,   147,   149,   153,   155,   159,
     160,   162,   166,   168,   171,   175,   176,   179,   182,   183,
     185,   187,   189,   191,   193,   195,   197,   199,   201,   203,
     208,   213,   218,   223,   232,   237,   239,   241,   246,   247,
     253,   258,   259,   265,   270,   275,   277,   281,   284,   286,
     290,   293,   298,   301,   304,   305,   310,   313,   315,   317,
     319,   321,   327,   332,   341,   344,   346,   350,   352,   354,
     358,   363,   365,   366,   372,   375,   377,   379,   381,   386,
     388,   393,   398,   401,   403,   404,   406,   408,   410,   412,
     414,   416,   419,   420,   422,   424,   426,   428,   430,   432,
     434,   436,   438,   440,   444,   448,   455,   457,   458,   464,
     467,   471,   472,   473,   481,   485,   489,   490,   494,   496,
     499,   501,   504,   509,   514,   518,   522,   524,   529,   533,
     534,   536,   538,   539,   542,   546,   547,   550,   553,   557,
     562,   565,   568,   571,   575,   579,   583,   587,   591,   595,
     599,   603,   607,   611,   615,   619,   623,   627,   631,   635,
     641,   645,   649,   654,   656,   658,   663,   668,   673,   678,
     683,   688,   690,   697,   704,   711,   715,   716,   721,   722,
     723,   724,   725,   726,   727,   744,   745,   746,   747,   748,
     749,   767,   768,   769,   777,   779,   781,   783,   785,   787,
     791,   792,   795,   799,   802,   809,   820,   823,   825,   826,
     828,   831,   832,   833,   837,   838,   839,   840,   841,   853,
     858,   859,   862,   863,   864,   871,   873,   874,   878,   884,
     885,   889,   890,   893,   894,   900,   902,   905,   910,   916,
     923,   925,   928,   929,   932,   937,   942,   951,   953,   957,
     958
};
static const short yyrhs[] =
{
     108,   143,     0,   109,   133,     0,   119,   222,     0,   110,
     131,     0,     4,     0,     0,   132,     4,    10,   187,     0,
       0,   134,   135,     0,   135,   136,    97,     0,     0,    92,
     187,     0,    92,   187,   122,   187,     0,     4,     0,    93,
       0,    99,   138,     0,    98,     0,   103,     4,    10,   187,
       0,   103,     4,   122,   187,     0,   103,     4,   187,     0,
     102,     4,     0,    94,     4,   122,   187,     0,    94,     4,
     187,     0,    94,     4,    10,   187,     0,    38,     4,    10,
     187,     0,    38,     4,   122,   187,     0,    89,     4,    10,
     187,     0,    89,     4,   122,   187,     0,    95,   140,     0,
      96,   139,     0,   100,     4,     0,   105,     4,   122,     4,
       0,   105,     4,   122,     3,     0,   104,   187,     0,   106,
       3,     0,   111,   141,     0,   112,   142,     0,     0,    56,
     130,   137,   135,    36,     0,   113,     4,     0,     0,   138,
     122,     4,     0,   138,     4,     0,     0,     4,     0,   139,
     122,     4,     0,     4,     0,   140,   122,     4,     0,     0,
       4,     0,   141,   122,     4,     0,     4,     0,   142,     4,
       0,   142,   122,     4,     0,     0,   144,   145,     0,   145,
     146,     0,     0,   169,     0,   150,     0,   214,     0,   178,
       0,   179,     0,   181,     0,   183,     0,   152,     0,   224,
       0,   123,     0,    65,    37,     4,   124,     0,    66,    37,
     130,   124,     0,    87,    37,   130,   124,     0,    52,    37,
       4,   124,     0,    52,    37,     4,   122,     4,   122,     4,
     124,     0,    54,    37,     4,   124,     0,    53,     0,    55,
       0,    85,    37,   149,   124,     0,     0,    86,   147,    37,
     149,   124,     0,    67,    37,   130,   124,     0,     0,    56,
     130,   148,   145,    36,     0,    80,    37,   184,   124,     0,
     112,    37,   142,   124,     0,     4,     0,   149,   122,     4,
       0,   149,     4,     0,     5,     0,   149,   122,     5,     0,
     149,     5,     0,    46,    49,   151,    50,     0,   151,   190,
       0,   151,   152,     0,     0,    68,    37,     4,   124,     0,
     167,   166,     0,     4,     0,    32,     0,    15,     0,   153,
       0,   121,    37,   155,   124,   153,     0,    48,    37,   153,
     124,     0,    48,    37,   121,    37,   155,   124,   153,   124,
       0,   155,   153,     0,   153,     0,   156,   168,   154,     0,
     154,     0,     4,     0,   125,   156,   126,     0,   154,    37,
     156,   124,     0,   157,     0,     0,   120,    37,   159,   157,
     124,     0,   167,   166,     0,    84,     0,   123,     0,    88,
       0,    48,    37,    88,   124,     0,   158,     0,   163,    37,
     185,   124,     0,    82,    37,   185,   124,     0,   161,   160,
       0,   160,     0,     0,   161,     0,    41,     0,    42,     0,
      43,     0,    44,     0,    45,     0,    10,   185,     0,     0,
       6,     0,     7,     0,     8,     0,     9,     0,    11,     0,
      12,     0,    13,     0,    14,     0,   123,     0,   122,     0,
       4,    10,   185,     0,     4,   165,   185,     0,    91,    37,
       4,    10,   185,   124,     0,   122,     0,     0,    57,    49,
     171,   170,    50,     0,   170,   171,     0,   170,   122,   171,
       0,     0,     0,     4,   172,   175,    16,   173,   168,   174,
       0,    81,    10,   185,     0,    83,    10,   185,     0,     0,
      37,   176,   124,     0,   177,     0,   176,   177,     0,     4,
       0,   127,     4,     0,    75,    37,   130,   124,     0,    76,
      37,   180,   124,     0,    76,    37,   124,     0,   180,   168,
     130,     0,   130,     0,    77,    37,   182,   124,     0,   182,
     168,   130,     0,     0,    78,     0,    79,     0,     0,     4,
     184,     0,     4,   122,   184,     0,     0,   186,   187,     0,
      31,   187,     0,    37,   187,   124,     0,    69,    37,   187,
     124,     0,   127,   187,     0,    30,   187,     0,   128,   187,
       0,   187,    32,   187,     0,   187,    33,   187,     0,   187,
      34,   187,     0,   187,    30,   187,     0,   187,    31,   187,
       0,   187,    28,   187,     0,   187,    29,   187,     0,   187,
      22,   187,     0,   187,    23,   187,     0,   187,    26,   187,
       0,   187,    27,   187,     0,   187,    24,   187,     0,   187,
      25,   187,     0,   187,    21,   187,     0,   187,    20,   187,
       0,   187,    19,   187,     0,   187,    15,   187,    16,   187,
       0,   187,    18,   187,     0,   187,    17,   187,     0,    64,
      37,     4,   124,     0,     3,     0,    51,     0,    70,    37,
       4,   124,     0,    71,    37,     4,   124,     0,    72,    37,
       4,   124,     0,    95,    37,   187,   124,     0,    38,    37,
     187,   124,     0,    39,    37,   187,   124,     0,     4,     0,
      73,    37,   187,   122,   187,   124,     0,    74,    37,   187,
     122,   187,   124,     0,   101,    37,   187,   122,     4,   124,
       0,    90,    25,     4,     0,     0,    90,    37,   187,   124,
       0,     0,     0,     0,     0,     0,     0,     4,   191,   205,
     189,   192,    49,   193,   162,    50,   194,   208,   188,   209,
     164,   195,   168,     0,     0,     0,     0,     0,     0,    63,
     196,   206,   207,   189,   197,    49,   198,   210,    50,   199,
     208,   188,   209,   164,   200,   168,     0,     0,     0,    86,
     201,   205,   202,    49,   151,    50,     0,    59,     0,    60,
       0,    61,     0,    62,     0,    63,     0,    37,   203,   124,
       0,     0,    37,   124,     0,   187,   204,    16,     0,   204,
      16,     0,    40,    37,   187,   124,   204,    16,     0,    40,
      37,   187,   124,    39,    37,   187,   124,   204,    16,     0,
     187,    16,     0,    16,     0,     0,    80,     0,    25,     4,
       0,     0,     0,   209,    16,     4,     0,     0,     0,     0,
       0,   210,     4,   211,    49,   162,    50,   212,   209,   164,
     213,   168,     0,    47,    49,   215,    50,     0,     0,   215,
     216,     0,     0,     0,     4,   217,   219,   220,   218,   123,
       0,   187,     0,     0,     4,   221,   220,     0,    90,    37,
     187,   124,   220,     0,     0,    37,   187,   124,     0,     0,
     223,   226,     0,     0,   225,   118,    49,   226,    50,     0,
     227,     0,   226,   227,     0,    49,   229,    50,   123,     0,
     114,    49,   229,    50,   123,     0,   114,    49,   229,    50,
     228,   123,     0,   114,     0,   228,   114,     0,     0,   230,
     123,     0,   116,    16,   230,   123,     0,   117,    16,   230,
     123,     0,   116,    16,   230,   123,   117,    16,   230,   123,
       0,   115,     0,   230,   123,   115,     0,     0,   112,     4,
      49,   231,   230,    50,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   155,   157,   158,   159,   163,   166,   166,   175,   175,
     188,   190,   193,   195,   196,   199,   202,   203,   204,   206,
     208,   210,   212,   214,   216,   218,   220,   222,   224,   226,
     227,   228,   230,   232,   234,   236,   238,   239,   240,   240,
     244,   246,   249,   251,   252,   255,   258,   261,   264,   268,
     270,   271,   274,   277,   279,   283,   283,   294,   296,   301,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     314,   316,   318,   321,   323,   325,   327,   329,   330,   330,
     334,   336,   336,   340,   344,   347,   351,   354,   357,   360,
     363,   368,   372,   374,   375,   378,   381,   386,   391,   395,
     401,   408,   414,   420,   428,   437,   448,   457,   468,   477,
     481,   487,   489,   489,   495,   497,   501,   502,   507,   512,
     513,   518,   528,   530,   533,   535,   538,   541,   543,   545,
     547,   551,   559,   564,   567,   569,   571,   573,   575,   577,
     579,   584,   584,   588,   593,   601,   608,   609,   612,   616,
     618,   619,   623,   623,   630,   638,   647,   650,   653,   655,
     658,   661,   665,   670,   672,   676,   679,   684,   686,   689,
     692,   695,   699,   704,   713,   724,   724,   729,   732,   734,
     736,   738,   740,   743,   745,   747,   749,   751,   753,   755,
     757,   759,   761,   763,   765,   767,   769,   771,   773,   775,
     777,   779,   781,   783,   785,   788,   790,   792,   794,   796,
     798,   800,   802,   804,   806,   811,   813,   816,   818,   821,
     821,   821,   821,   821,   821,   838,   838,   838,   838,   838,
     838,   855,   855,   855,   868,   870,   871,   872,   873,   876,
     878,   879,   882,   884,   885,   890,   894,   896,   899,   902,
     906,   909,   912,   917,   930,   932,   932,   932,   932,   948,
     952,   954,   957,   957,   957,   967,   997,  1002,  1014,  1021,
    1026,  1034,  1034,  1048,  1048,  1058,  1060,  1063,  1068,  1072,
    1078,  1083,  1089,  1094,  1098,  1102,  1106,  1112,  1117,  1121,
    1121
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "INT", "NAME", "LNAME", "PLUSEQ", "MINUSEQ", 
  "MULTEQ", "DIVEQ", "'='", "LSHIFTEQ", "RSHIFTEQ", "ANDEQ", "OREQ", 
  "'?'", "':'", "OROR", "ANDAND", "'|'", "'^'", "'&'", "EQ", "NE", "'<'", 
  "'>'", "LE", "GE", "LSHIFT", "RSHIFT", "'+'", "'-'", "'*'", "'/'", 
  "'%'", "UNARY", "END", "'('", "ALIGN_K", "BLOCK", "BIND", "QUAD", 
  "SQUAD", "LONG", "SHORT", "BYTE", "SECTIONS", "PHDRS", "SORT", "'{'", 
  "'}'", "SIZEOF_HEADERS", "OUTPUT_FORMAT", "FORCE_COMMON_ALLOCATION", 
  "OUTPUT_ARCH", "INHIBIT_COMMON_ALLOCATION", "INCLUDE", "MEMORY", 
  "DEFSYMEND", "NOLOAD", "DSECT", "COPY", "INFO", "OVERLAY", "DEFINED", 
  "TARGET_K", "SEARCH_DIR", "MAP", "ENTRY", "NEXT", "SIZEOF", "ADDR", 
  "LOADADDR", "MAX_K", "MIN_K", "STARTUP", "HLL", "SYSLIB", "FLOAT", 
  "NOFLOAT", "NOCROSSREFS", "ORIGIN", "FILL", "LENGTH", 
  "CREATE_OBJECT_SYMBOLS", "INPUT", "GROUP", "OUTPUT", "CONSTRUCTORS", 
  "ALIGNMOD", "AT", "PROVIDE", "CHIP", "LIST", "SECT", "ABSOLUTE", "LOAD", 
  "NEWLINE", "ENDWORD", "ORDER", "NAMEWORD", "ASSERT_K", "FORMAT", 
  "PUBLIC", "BASE", "ALIAS", "TRUNCATE", "REL", "INPUT_SCRIPT", 
  "INPUT_MRI_SCRIPT", "INPUT_DEFSYM", "CASE", "EXTERN", "START", 
  "VERS_TAG", "VERS_IDENTIFIER", "GLOBAL", "LOCAL", "VERSIONK", 
  "INPUT_VERSION_SCRIPT", "KEEP", "EXCLUDE_FILE", "','", "';'", "')'", 
  "'['", "']'", "'!'", "'~'", "file", "filename", "defsym_expr", "@@1", 
  "mri_script_file", "@@2", "mri_script_lines", "mri_script_command", "@@3", 
  "ordernamelist", "mri_load_name_list", "mri_abs_name_list", 
  "casesymlist", "extern_name_list", "script_file", "@@4", "ifile_list", 
  "ifile_p1", "@@5", "@@6", "input_list", "sections", "sec_or_group_p1", 
  "statement_anywhere", "wildcard_name", "wildcard_spec", 
  "exclude_name_list", "file_NAME_list", "input_section_spec_no_keep", 
  "input_section_spec", "@@7", "statement", "statement_list", 
  "statement_list_opt", "length", "fill_opt", "assign_op", "end", 
  "assignment", "opt_comma", "memory", "memory_spec_list", "memory_spec", 
  "@@8", "origin_spec", "length_spec", "attributes_opt", "attributes_list", 
  "attributes_string", "startup", "high_level_library", 
  "high_level_library_NAME_list", "low_level_library", 
  "low_level_library_NAME_list", "floating_point_support", 
  "nocrossref_list", "mustbe_exp", "@@9", "exp", "memspec_at_opt", 
  "opt_at", "section", "@@10", "@@11", "@@12", "@@13", "@@14", "@@15", "@@16", 
  "@@17", "@@18", "@@19", "@@20", "@@21", "type", "atype", "opt_exp_with_type", 
  "opt_exp_without_type", "opt_nocrossrefs", "memspec_opt", "phdr_opt", 
  "overlay_section", "@@22", "@@23", "@@24", "phdrs", "phdr_list", "phdr", 
  "@@25", "@@26", "phdr_type", "phdr_qualifiers", "phdr_val", 
  "version_script_file", "@@27", "version", "@@28", "vers_nodes", 
  "vers_node", "verdep", "vers_tag", "vers_defns", "@@29", NULL
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,   129,   129,   129,   129,   130,   132,   131,   134,   133,
     135,   135,   136,   136,   136,   136,   136,   136,   136,   136,
     136,   136,   136,   136,   136,   136,   136,   136,   136,   136,
     136,   136,   136,   136,   136,   136,   136,   136,   137,   136,
     136,   136,   138,   138,   138,   139,   139,   140,   140,   141,
     141,   141,   142,   142,   142,   144,   143,   145,   145,   146,
     146,   146,   146,   146,   146,   146,   146,   146,   146,   146,
     146,   146,   146,   146,   146,   146,   146,   146,   147,   146,
     146,   148,   146,   146,   146,   149,   149,   149,   149,   149,
     149,   150,   151,   151,   151,   152,   152,   153,   153,   153,
     154,   154,   154,   154,   155,   155,   156,   156,   157,   157,
     157,   158,   159,   158,   160,   160,   160,   160,   160,   160,
     160,   160,   161,   161,   162,   162,   163,   163,   163,   163,
     163,   164,   164,   165,   165,   165,   165,   165,   165,   165,
     165,   166,   166,   167,   167,   167,   168,   168,   169,   170,
     170,   170,   172,   171,   173,   174,   175,   175,   176,   176,
     177,   177,   178,   179,   179,   180,   180,   181,   182,   182,
     183,   183,   184,   184,   184,   186,   185,   187,   187,   187,
     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
     187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
     187,   187,   187,   187,   187,   188,   188,   189,   189,   191,
     192,   193,   194,   195,   190,   196,   197,   198,   199,   200,
     190,   201,   202,   190,   203,   203,   203,   203,   203,   204,
     204,   204,   205,   205,   205,   205,   206,   206,   207,   207,
     208,   208,   209,   209,   210,   211,   212,   213,   210,   214,
     215,   215,   217,   218,   216,   219,   220,   220,   220,   221,
     221,   223,   222,   225,   224,   226,   226,   227,   227,   227,
     228,   228,   229,   229,   229,   229,   229,   230,   230,   231,
     230
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     2,     2,     2,     2,     1,     0,     4,     0,     2,
       3,     0,     2,     4,     1,     1,     2,     1,     4,     4,
       3,     2,     4,     3,     4,     4,     4,     4,     4,     2,
       2,     2,     4,     4,     2,     2,     2,     2,     0,     5,
       2,     0,     3,     2,     0,     1,     3,     1,     3,     0,
       1,     3,     1,     2,     3,     0,     2,     2,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       4,     4,     4,     8,     4,     1,     1,     4,     0,     5,
       4,     0,     5,     4,     4,     1,     3,     2,     1,     3,
       2,     4,     2,     2,     0,     4,     2,     1,     1,     1,
       1,     5,     4,     8,     2,     1,     3,     1,     1,     3,
       4,     1,     0,     5,     2,     1,     1,     1,     4,     1,
       4,     4,     2,     1,     0,     1,     1,     1,     1,     1,
       1,     2,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     3,     6,     1,     0,     5,     2,
       3,     0,     0,     7,     3,     3,     0,     3,     1,     2,
       1,     2,     4,     4,     3,     3,     1,     4,     3,     0,
       1,     1,     0,     2,     3,     0,     2,     2,     3,     4,
       2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       3,     3,     4,     1,     1,     4,     4,     4,     4,     4,
       4,     1,     6,     6,     6,     3,     0,     4,     0,     0,
       0,     0,     0,     0,    16,     0,     0,     0,     0,     0,
      17,     0,     0,     7,     1,     1,     1,     1,     1,     3,
       0,     2,     3,     2,     6,    10,     2,     1,     0,     1,
       2,     0,     0,     3,     0,     0,     0,     0,    11,     4,
       0,     2,     0,     0,     6,     1,     0,     3,     5,     0,
       3,     0,     2,     0,     5,     1,     2,     4,     5,     6,
       1,     2,     0,     2,     4,     4,     8,     1,     3,     0,
       6
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,    55,     8,     6,   271,     1,    58,     2,    11,     4,
       0,     3,     0,    56,     9,     0,   282,     0,   272,   275,
       0,     0,     0,     0,    75,     0,    76,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   170,   171,     0,     0,
      78,     0,     0,     0,    68,    57,    60,    66,     0,    59,
      62,    63,    64,    65,    61,    67,     0,    14,     0,     0,
       0,     0,    15,     0,     0,     0,    17,    44,     0,     0,
       0,     0,     0,     0,    49,     0,     0,     0,     0,     0,
     287,     0,     0,     0,     0,   282,   276,   133,   134,   135,
     136,   175,   137,   138,   139,   140,   175,    94,   260,     0,
       0,     5,    81,     0,     0,     0,     0,     0,     0,     0,
     169,   172,     0,     0,     0,     0,     0,   142,   141,    96,
       0,     0,    38,     0,   203,   211,     0,     0,     0,     0,
       0,   204,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    12,     0,    47,    29,    45,    30,    16,
      31,    21,     0,    34,     0,    35,    50,    36,    52,    37,
      40,    10,     7,     0,     0,     0,     0,   283,     0,   143,
       0,   144,     0,     0,     0,     0,    58,   152,   151,     0,
       0,     0,     0,     0,   164,   166,   147,   147,   172,     0,
      85,    88,     0,     0,     0,     0,     0,     0,     0,     0,
      11,     0,     0,   181,   177,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   180,   182,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    23,     0,     0,    43,     0,     0,     0,    20,     0,
       0,    53,     0,   289,     0,     0,   277,   288,     0,   176,
     219,    91,   225,   231,    93,    92,   262,   259,   261,     0,
      72,    74,   273,   156,     0,    69,    70,    80,    95,   162,
     146,   163,     0,   167,     0,   172,   173,    83,    87,    90,
       0,    77,     0,    71,   175,    84,     0,    25,    26,    41,
      27,    28,   178,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   201,   200,   198,   197,   196,
     190,   191,   194,   195,   192,   193,   188,   189,   186,   187,
     183,   184,   185,    13,    24,    22,    48,    46,    42,    18,
      19,    33,    32,    51,    54,     0,   284,   285,   280,   278,
       0,   240,     0,   240,     0,     0,    82,     0,     0,   148,
       0,   149,   165,   168,   174,    86,    89,    79,     0,   274,
      39,   209,   210,   202,   179,   205,   206,   207,     0,     0,
     208,     0,     0,     0,     0,   281,   279,     0,     0,   240,
       0,   218,   247,     0,   248,   232,   265,   266,     0,   160,
       0,     0,   158,     0,   150,   145,     0,     0,     0,   199,
     290,     0,     0,   234,   235,   236,   237,   238,   241,     0,
       0,     0,     0,   243,     0,   220,   246,   249,   218,     0,
     269,     0,   263,     0,   161,   157,   159,     0,   147,   212,
     213,   214,     0,   239,     0,   242,     0,     0,   226,    94,
       0,   266,     0,     0,    73,   175,     0,   286,   240,     0,
     221,     0,     0,     0,   267,     0,   264,   154,     0,   153,
       0,     0,   217,   124,   227,   233,   270,   266,   175,     0,
     244,   108,    99,    98,   126,   127,   128,   129,   130,     0,
       0,   115,   117,     0,     0,   116,     0,   100,     0,   111,
     119,   123,   125,     0,     0,     0,   254,   268,   155,     0,
       0,   175,   112,     0,    97,     0,   107,   147,     0,   122,
     222,   175,   114,     0,   240,     0,     0,     0,     0,     0,
     105,     0,     0,   109,     0,   147,   251,     0,   255,   228,
       0,   118,     0,   102,   121,    97,     0,     0,   104,   106,
     110,     0,   216,   120,     0,   251,   245,     0,   113,   101,
     250,     0,   252,   124,   216,     0,     0,   132,     0,   252,
       0,   215,   175,     0,   223,   256,   132,   103,   131,   253,
     147,   252,   229,   224,   132,   147,   257,   230,   147,   258,
       0,     0,     0
};

static const short yydefgoto[] =
{
     590,   102,     9,    10,     7,     8,    14,    77,   200,   149,
     148,   146,   157,   159,     5,     6,    13,    45,   113,   176,
     192,    46,   172,    47,   497,   498,   531,   517,   499,   500,
     529,   501,   502,   503,   504,   574,    96,   119,    48,   534,
      49,   274,   178,   273,   438,   469,   358,   401,   402,    50,
      51,   186,    52,   187,    53,   189,   169,   170,   205,   562,
     425,   265,   351,   447,   473,   536,   580,   352,   461,   506,
     555,   585,   353,   429,   419,   390,   391,   394,   428,   552,
     567,   523,   554,   581,   588,    54,   173,   268,   354,   453,
     397,   432,   451,    11,    12,    55,    56,    18,    19,   350,
      83,    84,   345
};

static const short yypact[] =
{
      96,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
      47,-32768,   -25,   561,   618,    53,     7,    21,   -25,-32768,
     340,    57,    66,    83,-32768,   106,-32768,    90,   108,   147,
     153,   175,   188,   207,   210,   221,-32768,-32768,   223,   228,
  -32768,   229,   230,   231,-32768,-32768,-32768,-32768,    74,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   151,-32768,   266,    90,
     268,   482,-32768,   269,   271,   272,-32768,-32768,   273,   274,
     277,   482,   286,   293,   295,   296,   297,   205,   482,   301,
  -32768,   298,   300,   260,   190,     7,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   307,
     308,-32768,-32768,   313,   316,    90,    90,   317,    90,    16,
  -32768,   319,   203,   289,    90,   323,   296,-32768,-32768,-32768,
     279,    36,-32768,    73,-32768,-32768,   482,   482,   482,   292,
     302,-32768,   303,   304,   318,   320,   324,   325,   333,   334,
     335,   482,   482,  1063,   294,-32768,   208,-32768,   212,     9,
  -32768,-32768,   305,  1169,   215,-32768,-32768,   216,-32768,    29,
  -32768,-32768,  1169,   331,     2,     2,   250,   270,   337,-32768,
     482,-32768,    25,    19,   -84,   257,-32768,-32768,-32768,   259,
     264,   267,   275,   281,-32768,-32768,   104,   110,    30,   283,
  -32768,-32768,    26,   203,   284,   374,    70,   -25,   482,   482,
  -32768,   482,   482,-32768,-32768,   739,   482,   482,   389,   482,
     390,   393,   394,   482,   482,   482,   482,-32768,-32768,   482,
     482,   482,   482,   482,   482,   482,   482,   482,   482,   482,
     482,   482,   482,   482,   482,   482,   482,   482,   482,   482,
     482,  1169,   405,   406,-32768,   407,   482,   482,  1169,   233,
     408,-32768,   413,-32768,   311,   312,-32768,-32768,   -73,  1169,
     340,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   414,
  -32768,-32768,   615,   383,    23,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,    90,-32768,    90,   319,-32768,-32768,-32768,-32768,
     258,-32768,    67,-32768,-32768,-32768,   -13,  1169,  1169,   699,
    1169,  1169,-32768,   798,   818,   299,   847,   321,   322,   327,
    1083,  1103,   867,  1123,  1231,   905,  1187,   719,   753,  1204,
    1262,  1262,   255,   255,   255,   255,   189,   189,    95,    95,
  -32768,-32768,-32768,  1169,  1169,  1169,-32768,-32768,-32768,  1169,
    1169,-32768,-32768,-32768,-32768,     2,   118,   270,-32768,-32768,
     -23,   399,   410,   399,   482,   306,-32768,     8,   415,-32768,
     313,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   328,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   482,   482,
  -32768,   420,   482,   -28,   426,-32768,-32768,   179,   416,  1144,
     427,   354,-32768,  1251,   375,-32768,  1169,    17,   450,-32768,
     452,     6,-32768,   376,-32768,-32768,   887,   926,   336,  1169,
  -32768,   270,     2,-32768,-32768,-32768,-32768,-32768,-32768,   338,
     482,   140,   442,-32768,   422,-32768,-32768,-32768,   354,   417,
     428,   430,-32768,   351,-32768,-32768,-32768,   454,   355,-32768,
  -32768,-32768,   364,-32768,   955,-32768,   482,   429,-32768,-32768,
     482,    17,   482,   365,-32768,-32768,   409,   270,   174,   975,
  -32768,   440,    35,   995,-32768,  1015,-32768,-32768,   480,-32768,
     456,   475,-32768,   500,-32768,-32768,-32768,    17,-32768,   482,
  -32768,   560,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   458,
     459,-32768,-32768,   460,   461,-32768,    64,-32768,   462,-32768,
  -32768,-32768,   500,   451,   465,    74,-32768,-32768,-32768,  1036,
      93,-32768,-32768,    45,-32768,   466,-32768,   -64,    64,-32768,
  -32768,-32768,-32768,    40,   469,   384,   470,   385,   386,    11,
  -32768,    10,    72,-32768,    64,   135,   489,   392,-32768,-32768,
     501,-32768,    45,-32768,-32768,   398,   400,    45,-32768,-32768,
  -32768,   514,   433,-32768,   476,   489,-32768,    13,-32768,-32768,
  -32768,   503,-32768,   500,   433,    45,   525,    89,   481,-32768,
     411,-32768,-32768,   526,-32768,-32768,    89,-32768,-32768,-32768,
     355,-32768,-32768,-32768,    89,   355,-32768,-32768,   355,-32768,
     534,   536,-32768
};

static const short yypgoto[] =
{
  -32768,   -53,-32768,-32768,-32768,-32768,   339,-32768,-32768,-32768,
  -32768,-32768,-32768,   424,-32768,-32768,   371,-32768,-32768,-32768,
     356,-32768,   101,  -167,  -286,  -432,    15,    41,    31,-32768,
  -32768,    56,-32768,    -2,-32768,  -519,-32768,    58,  -454,  -184,
  -32768,-32768,  -242,-32768,-32768,-32768,-32768,-32768,   161,-32768,
  -32768,-32768,-32768,-32768,-32768,  -172,   -96,-32768,   -60,     0,
     148,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,  -380,   222,-32768,-32768,    24,
    -534,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,  -397,-32768,-32768,-32768,-32768,-32768,   381,   -14,-32768,
     495,  -157,-32768
};


#define	YYLAST		1296


static const short yytable[] =
{
     171,   143,   282,   284,    86,   264,   122,   254,   255,   422,
     399,   153,   399,   244,   514,   545,   286,   514,   162,   505,
     101,   430,   410,   266,    16,   482,   482,   177,   482,   260,
     288,   289,   361,   251,   188,   576,    16,   369,   269,   260,
     270,   348,   483,   483,   538,   483,   198,   584,   505,   514,
     349,    15,   180,   181,   464,   183,   185,   582,   280,   515,
     482,   194,   533,    78,   516,   586,   203,   204,   514,   267,
      85,   288,   289,   359,   251,   261,   514,   483,   471,   482,
     507,   217,   218,   201,   241,   475,   516,   482,   262,    17,
     539,   385,   248,    32,   101,   411,   483,   514,   262,   572,
     386,    17,   549,    32,   483,   573,    97,   431,   482,   505,
     259,   263,   515,   364,    79,    98,    42,    80,   404,    79,
      99,   263,    80,    81,    82,   483,    42,   235,   236,   237,
     435,   245,   494,   400,   547,   400,   496,   565,   297,   298,
     184,   300,   301,   100,   540,   360,   303,   304,   290,   306,
     291,   252,   285,   310,   311,   312,   313,   103,   199,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   525,   124,   125,   104,   494,   339,   340,   383,   290,
     105,   367,   252,   526,   295,   202,   117,   118,   368,   413,
     414,   415,   416,   417,     1,     2,     3,   190,   191,   126,
     127,   421,   106,   470,   526,     4,   128,   129,   130,   233,
     234,   235,   236,   237,   527,   107,   280,   530,   281,   362,
     131,   363,   280,   257,   283,   384,   341,   342,   413,   414,
     415,   416,   417,   132,   108,   548,   527,   109,   133,   134,
     135,   136,   137,   138,   456,   442,   530,   280,   110,   550,
     111,   559,   365,   366,   418,   112,   114,   115,   116,   120,
     121,   548,   123,   144,   139,   145,   147,   150,   151,   570,
     140,   152,    86,   231,   232,   233,   234,   235,   236,   237,
     154,   389,   393,   389,   396,   264,   155,   124,   125,   156,
     158,   160,   161,   418,   239,   163,   141,   142,   124,   125,
     166,   174,   175,   167,   164,   246,   165,   177,   406,   407,
     179,   182,   409,   188,   126,   127,   193,   195,   197,   206,
     242,   128,   129,   130,   243,   126,   127,   249,   250,   207,
     208,   209,   128,   129,   130,   131,    87,    88,    89,    90,
      91,    92,    93,    94,    95,   210,   131,   211,   132,   467,
     444,   212,   213,   133,   134,   135,   136,   137,   138,   132,
     214,   215,   216,   256,   133,   134,   135,   136,   137,   138,
     253,   271,   508,   275,   294,   257,   459,   258,   276,   139,
     463,   277,   465,   305,   307,   140,   583,   308,   309,   278,
     139,   587,   124,   125,   589,   279,   140,   287,   293,   336,
     337,   338,   343,   124,   125,   528,   240,   344,   355,   509,
     357,   141,   142,   373,   408,   537,   392,   247,   398,   126,
     127,   403,   141,   142,   346,   347,   387,   129,   130,   388,
     126,   127,   412,   423,   424,   375,   376,   128,   129,   130,
     131,   377,   405,   420,   433,   427,   434,   437,   445,   446,
     441,   131,   443,   132,   455,   450,   449,   452,   133,   134,
     135,   136,   137,   138,   132,   454,   578,   280,   460,   133,
     134,   135,   136,   137,   138,   124,   125,   457,   466,   474,
     478,   480,   468,   479,   139,   510,   511,   512,   513,   518,
     140,   520,   521,   532,   481,   139,   421,   542,   541,   543,
     544,   140,   126,   127,   551,   482,   553,   556,   560,   128,
     129,   130,  -108,   561,   558,   563,   141,   142,   566,   571,
     579,   575,   483,   131,   591,   577,   592,   141,   142,   299,
     196,   484,   485,   486,   487,   488,   132,   272,   489,   292,
     462,   133,   134,   135,   136,   137,   138,   557,   519,   535,
     546,   568,   436,   522,   569,    20,    87,    88,    89,    90,
      91,    92,    93,    94,    95,   395,   448,   139,   296,   564,
     168,     0,   490,   140,   491,     0,     0,     0,   492,     0,
       0,    42,     0,     0,     0,     0,     0,   -97,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    21,    22,   141,
     142,     0,     0,    23,    24,    25,    26,    27,    28,    20,
     493,   494,    57,   495,     0,   496,    29,    30,    31,    32,
       0,     0,     0,     0,     0,     0,    33,    34,    35,    36,
      37,    38,     0,     0,     0,     0,    39,    40,    41,     0,
       0,   356,    42,     0,     0,     0,    58,     0,     0,     0,
       0,    21,    22,     0,     0,     0,     0,    23,    24,    25,
      26,    27,    28,    43,    59,     0,     0,     0,     0,  -273,
      29,    30,    31,    32,    44,     0,     0,     0,     0,     0,
      33,    34,    35,    36,    37,    38,     0,     0,     0,     0,
      39,    40,    41,    57,     0,     0,    42,    60,     0,     0,
      61,    62,    63,    64,    65,   -41,    66,    67,    68,     0,
      69,    70,    71,    72,    73,     0,     0,    43,     0,    74,
      75,    76,     0,     0,     0,   370,     0,    58,    44,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   219,    59,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,    60,     0,
       0,    61,    62,    63,    64,    65,     0,    66,    67,    68,
       0,    69,    70,    71,    72,    73,     0,     0,     0,     0,
      74,    75,    76,   219,     0,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   219,     0,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   219,   302,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   219,     0,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   219,     0,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,   371,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
       0,   219,   372,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     219,   374,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     219,   380,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     219,   439,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     219,     0,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     440,   219,     0,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,     0,     0,     0,     0,     0,     0,     0,   219,   458,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   219,   472,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   219,   476,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   219,   477,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,     0,   219,
     524,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,     0,
       0,   421,     0,     0,   219,   238,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,
     234,   235,   236,   237,     0,   378,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,   232,   233,   234,   235,
     236,   237,     0,     0,     0,   379,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,     0,
       0,     0,     0,     0,     0,   381,   219,   382,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   219,   426,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,   233,   234,   235,   236,   237,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237
};

static const short yycheck[] =
{
      96,    61,   186,   187,    18,   172,    59,   164,   165,   389,
       4,    71,     4,     4,     4,     4,   188,     4,    78,   473,
       4,     4,    50,     4,    49,    15,    15,     4,    15,     4,
       4,     5,   274,     4,     4,   569,    49,    50,   122,     4,
     124,   114,    32,    32,     4,    32,    10,   581,   502,     4,
     123,     4,   105,   106,   451,   108,   109,   576,   122,    48,
      15,   114,   126,    10,   496,   584,   126,   127,     4,    50,
      49,     4,     5,    50,     4,    50,     4,    32,   458,    15,
     477,   141,   142,    10,   144,    50,   518,    15,    63,   114,
      50,   114,   152,    68,     4,   123,    32,     4,    63,    10,
     123,   114,   534,    68,    32,    16,    49,    90,    15,   563,
     170,    86,    48,   285,   112,    49,    91,   115,   360,   112,
      37,    86,   115,   116,   117,    32,    91,    32,    33,    34,
     124,   122,   121,   127,   124,   127,   125,   124,   198,   199,
     124,   201,   202,    37,   524,   122,   206,   207,   122,   209,
     124,   122,   122,   213,   214,   215,   216,    49,   122,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,    88,     3,     4,    37,   121,   246,   247,   345,   122,
      37,   124,   122,   121,   124,   122,   122,   123,   294,    59,
      60,    61,    62,    63,   108,   109,   110,     4,     5,    30,
      31,    37,    37,    39,   121,   119,    37,    38,    39,    30,
      31,    32,    33,    34,   510,    37,   122,   513,   124,   282,
      51,   284,   122,   115,   124,   117,     3,     4,    59,    60,
      61,    62,    63,    64,    37,   531,   532,    37,    69,    70,
      71,    72,    73,    74,   438,   412,   542,   122,    37,   124,
      37,   547,     4,     5,   124,    37,    37,    37,    37,   118,
       4,   557,     4,     4,    95,     4,     4,     4,     4,   565,
     101,     4,   296,    28,    29,    30,    31,    32,    33,    34,
       4,   351,   352,   353,   354,   462,     3,     3,     4,     4,
       4,     4,    97,   124,    10,     4,   127,   128,     3,     4,
      50,     4,     4,   123,    16,    10,    16,     4,   378,   379,
       4,     4,   382,     4,    30,    31,    37,     4,    49,    37,
     122,    37,    38,    39,   122,    30,    31,   122,   122,    37,
      37,    37,    37,    38,    39,    51,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    37,    51,    37,    64,   455,
     420,    37,    37,    69,    70,    71,    72,    73,    74,    64,
      37,    37,    37,   123,    69,    70,    71,    72,    73,    74,
      49,   124,   478,   124,    10,   115,   446,    50,   124,    95,
     450,   124,   452,     4,     4,   101,   580,     4,     4,   124,
      95,   585,     3,     4,   588,   124,   101,   124,   124,     4,
       4,     4,     4,     3,     4,   511,   122,     4,     4,   479,
      37,   127,   128,   124,     4,   521,    16,   122,   122,    30,
      31,    16,   127,   128,   123,   123,    37,    38,    39,    40,
      30,    31,    16,    16,    90,   124,   124,    37,    38,    39,
      51,   124,   124,    37,     4,    80,     4,    81,    16,    37,
     124,    51,   124,    64,    10,    37,    49,    37,    69,    70,
      71,    72,    73,    74,    64,   124,   572,   122,    49,    69,
      70,    71,    72,    73,    74,     3,     4,   123,   123,    49,
      10,    16,    83,    37,    95,    37,    37,    37,    37,    37,
     101,    50,    37,    37,     4,    95,    37,    37,   124,   124,
     124,   101,    30,    31,    25,    15,   124,    16,     4,    37,
      38,    39,   124,    90,   124,    49,   127,   128,    25,     4,
       4,    50,    32,    51,     0,   124,     0,   127,   128,   200,
     116,    41,    42,    43,    44,    45,    64,   176,    48,   193,
     449,    69,    70,    71,    72,    73,    74,   542,   502,   518,
     529,   563,   401,   505,   564,     4,     6,     7,     8,     9,
      10,    11,    12,    13,    14,   353,   428,    95,   197,   555,
      85,    -1,    82,   101,    84,    -1,    -1,    -1,    88,    -1,
      -1,    91,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    47,   127,
     128,    -1,    -1,    52,    53,    54,    55,    56,    57,     4,
     120,   121,     4,   123,    -1,   125,    65,    66,    67,    68,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,    78,
      79,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
      -1,    36,    91,    -1,    -1,    -1,    38,    -1,    -1,    -1,
      -1,    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,   112,    56,    -1,    -1,    -1,    -1,   118,
      65,    66,    67,    68,   123,    -1,    -1,    -1,    -1,    -1,
      75,    76,    77,    78,    79,    80,    -1,    -1,    -1,    -1,
      85,    86,    87,     4,    -1,    -1,    91,    89,    -1,    -1,
      92,    93,    94,    95,    96,    97,    98,    99,   100,    -1,
     102,   103,   104,   105,   106,    -1,    -1,   112,    -1,   111,
     112,   113,    -1,    -1,    -1,    36,    -1,    38,   123,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    15,    56,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    89,    -1,
      -1,    92,    93,    94,    95,    96,    -1,    98,    99,   100,
      -1,   102,   103,   104,   105,   106,    -1,    -1,    -1,    -1,
     111,   112,   113,    15,    -1,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    15,    -1,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    15,   124,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,   124,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      -1,    15,   124,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      15,   124,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   124,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,   124,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
     124,    15,    -1,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,   124,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    15,   124,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    15,   124,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    15,   124,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    -1,    15,
     124,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    37,    -1,    -1,    15,   122,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    -1,   122,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    -1,    -1,    -1,   122,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    -1,   122,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#ifdef __cplusplus
# define YYSTD(x) std::x
#else
# define YYSTD(x) x
#endif

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  ifdef __cplusplus
#   include <cstdlib> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T std::size_t
#  else
#   ifdef __STDC__
#    include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#    define YYSIZE_T size_t
#   endif
#  endif
#  define YYSTACK_ALLOC YYSTD (malloc)
#  define YYSTACK_FREE YYSTD (free)
# endif

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Relocate the TYPE STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Type, Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	yymemcpy ((char *) yyptr, (char *) (Stack),			\
		  yysize * (YYSIZE_T) sizeof (Type));			\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (Type) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# ifdef __cplusplus
#  include <cstddef> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T std::size_t
# else
#  ifdef __STDC__
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  ifdef __cplusplus
#   include <cstdio>  /* INFRINGES ON USER NAME SPACE */
#  else
#   include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYFPRINTF YYSTD (fprintf)
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace. [The following comment makes no
   sense to me.  Could someone clarify it?  --akim] Since this is
   uninitialized, it does not stop multiple parsers from coexisting.
   */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#if ! defined (yyoverflow) && ! defined (yymemcpy)
# if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#  define yymemcpy __builtin_memcpy
# else				/* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
#  if defined (__STDC__) || defined (__cplusplus)
yymemcpy (char *yyto, const char *yyfrom, YYSIZE_T yycount)
#  else
yymemcpy (yyto, yyfrom, yycount)
     char *yyto;
     const char *yyfrom;
     YYSIZE_T yycount;
#  endif
{
  register const char *yyf = yyfrom;
  register char *yyt = yyto;
  register YYSIZE_T yyi = yycount;

  while (yyi-- != 0)
    *yyt++ = *yyf++;
}
# endif
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 341 "/usr/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# ifdef __cplusplus
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else /* !__cplusplus */
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif /* !__cplusplus */
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (short, yyss);
	YYSTACK_RELOCATE (YYSTYPE, yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (YYLTYPE, yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 6:
#line 167 "ldgram.y"
{ ldlex_defsym(); }
    break;
case 7:
#line 169 "ldgram.y"
{
		  ldlex_popstate();
		  lang_add_assignment(exp_assop(yyvsp[-1].token,yyvsp[-2].name,yyvsp[0].etree));
		}
    break;
case 8:
#line 176 "ldgram.y"
{
		  ldlex_mri_script ();
		  PUSH_ERROR (_("MRI style script"));
		}
    break;
case 9:
#line 181 "ldgram.y"
{
		  ldlex_popstate ();
		  mri_draw_tree ();
		  POP_ERROR ();
		}
    break;
case 14:
#line 196 "ldgram.y"
{
			einfo(_("%P%F: unrecognised keyword in MRI style script '%s'\n"),yyvsp[0].name);
			}
    break;
case 15:
#line 199 "ldgram.y"
{
			config.map_filename = "-";
			}
    break;
case 18:
#line 205 "ldgram.y"
{ mri_public(yyvsp[-2].name, yyvsp[0].etree); }
    break;
case 19:
#line 207 "ldgram.y"
{ mri_public(yyvsp[-2].name, yyvsp[0].etree); }
    break;
case 20:
#line 209 "ldgram.y"
{ mri_public(yyvsp[-1].name, yyvsp[0].etree); }
    break;
case 21:
#line 211 "ldgram.y"
{ mri_format(yyvsp[0].name); }
    break;
case 22:
#line 213 "ldgram.y"
{ mri_output_section(yyvsp[-2].name, yyvsp[0].etree);}
    break;
case 23:
#line 215 "ldgram.y"
{ mri_output_section(yyvsp[-1].name, yyvsp[0].etree);}
    break;
case 24:
#line 217 "ldgram.y"
{ mri_output_section(yyvsp[-2].name, yyvsp[0].etree);}
    break;
case 25:
#line 219 "ldgram.y"
{ mri_align(yyvsp[-2].name,yyvsp[0].etree); }
    break;
case 26:
#line 221 "ldgram.y"
{ mri_align(yyvsp[-2].name,yyvsp[0].etree); }
    break;
case 27:
#line 223 "ldgram.y"
{ mri_alignmod(yyvsp[-2].name,yyvsp[0].etree); }
    break;
case 28:
#line 225 "ldgram.y"
{ mri_alignmod(yyvsp[-2].name,yyvsp[0].etree); }
    break;
case 31:
#line 229 "ldgram.y"
{ mri_name(yyvsp[0].name); }
    break;
case 32:
#line 231 "ldgram.y"
{ mri_alias(yyvsp[-2].name,yyvsp[0].name,0);}
    break;
case 33:
#line 233 "ldgram.y"
{ mri_alias(yyvsp[-2].name,0,(int) yyvsp[0].integer);}
    break;
case 34:
#line 235 "ldgram.y"
{ mri_base(yyvsp[0].etree); }
    break;
case 35:
#line 237 "ldgram.y"
{  mri_truncate((unsigned int) yyvsp[0].integer); }
    break;
case 38:
#line 241 "ldgram.y"
{ ldlex_script (); ldfile_open_command_file(yyvsp[0].name); }
    break;
case 39:
#line 243 "ldgram.y"
{ ldlex_popstate (); }
    break;
case 40:
#line 245 "ldgram.y"
{ lang_add_entry (yyvsp[0].name, false); }
    break;
case 42:
#line 250 "ldgram.y"
{ mri_order(yyvsp[0].name); }
    break;
case 43:
#line 251 "ldgram.y"
{ mri_order(yyvsp[0].name); }
    break;
case 45:
#line 257 "ldgram.y"
{ mri_load(yyvsp[0].name); }
    break;
case 46:
#line 258 "ldgram.y"
{ mri_load(yyvsp[0].name); }
    break;
case 47:
#line 263 "ldgram.y"
{ mri_only_load(yyvsp[0].name); }
    break;
case 48:
#line 265 "ldgram.y"
{ mri_only_load(yyvsp[0].name); }
    break;
case 49:
#line 269 "ldgram.y"
{ yyval.name = NULL; }
    break;
case 52:
#line 276 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); }
    break;
case 53:
#line 278 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); }
    break;
case 54:
#line 280 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); }
    break;
case 55:
#line 284 "ldgram.y"
{
	 ldlex_both();
	}
    break;
case 56:
#line 288 "ldgram.y"
{
	ldlex_popstate();
	}
    break;
case 69:
#line 313 "ldgram.y"
{ lang_add_target(yyvsp[-1].name); }
    break;
case 70:
#line 315 "ldgram.y"
{ ldfile_add_library_path (yyvsp[-1].name, false); }
    break;
case 71:
#line 317 "ldgram.y"
{ lang_add_output(yyvsp[-1].name, 1); }
    break;
case 72:
#line 319 "ldgram.y"
{ lang_add_output_format (yyvsp[-1].name, (char *) NULL,
					    (char *) NULL, 1); }
    break;
case 73:
#line 322 "ldgram.y"
{ lang_add_output_format (yyvsp[-5].name, yyvsp[-3].name, yyvsp[-1].name, 1); }
    break;
case 74:
#line 324 "ldgram.y"
{ ldfile_set_output_arch(yyvsp[-1].name); }
    break;
case 75:
#line 326 "ldgram.y"
{ command_line.force_common_definition = true ; }
    break;
case 76:
#line 328 "ldgram.y"
{ command_line.inhibit_common_definition = true ; }
    break;
case 78:
#line 331 "ldgram.y"
{ lang_enter_group (); }
    break;
case 79:
#line 333 "ldgram.y"
{ lang_leave_group (); }
    break;
case 80:
#line 335 "ldgram.y"
{ lang_add_map(yyvsp[-1].name); }
    break;
case 81:
#line 337 "ldgram.y"
{ ldlex_script (); ldfile_open_command_file(yyvsp[0].name); }
    break;
case 82:
#line 339 "ldgram.y"
{ ldlex_popstate (); }
    break;
case 83:
#line 341 "ldgram.y"
{
		  lang_add_nocrossref (yyvsp[-1].nocrossref);
		}
    break;
case 85:
#line 349 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;
case 86:
#line 352 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;
case 87:
#line 355 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); }
    break;
case 88:
#line 358 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;
case 89:
#line 361 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;
case 90:
#line 364 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); }
    break;
case 95:
#line 380 "ldgram.y"
{ lang_add_entry (yyvsp[-1].name, false); }
    break;
case 97:
#line 388 "ldgram.y"
{
			  yyval.cname = yyvsp[0].name;
			}
    break;
case 98:
#line 392 "ldgram.y"
{
			  yyval.cname = "*";
			}
    break;
case 99:
#line 396 "ldgram.y"
{
			  yyval.cname = "?";
			}
    break;
case 100:
#line 403 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[0].cname;
			  yyval.wildcard.sorted = false;
			  yyval.wildcard.exclude_name_list = NULL;
			}
    break;
case 101:
#line 409 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[0].cname;
			  yyval.wildcard.sorted = false;
			  yyval.wildcard.exclude_name_list = yyvsp[-2].name_list;
			}
    break;
case 102:
#line 415 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-1].cname;
			  yyval.wildcard.sorted = true;
			  yyval.wildcard.exclude_name_list = NULL;
			}
    break;
case 103:
#line 421 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-1].cname;
			  yyval.wildcard.sorted = true;
			  yyval.wildcard.exclude_name_list = yyvsp[-3].name_list;
			}
    break;
case 104:
#line 430 "ldgram.y"
{
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = yyvsp[0].cname;
			  tmp->next = yyvsp[-1].name_list;
			  yyval.name_list = tmp;	
			}
    break;
case 105:
#line 439 "ldgram.y"
{
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = yyvsp[0].cname;
			  tmp->next = NULL;
			  yyval.name_list = tmp;
			}
    break;
case 106:
#line 450 "ldgram.y"
{
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = yyvsp[-2].wildcard_list;
			  tmp->spec = yyvsp[0].wildcard;
			  yyval.wildcard_list = tmp;
			}
    break;
case 107:
#line 459 "ldgram.y"
{
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = NULL;
			  tmp->spec = yyvsp[0].wildcard;
			  yyval.wildcard_list = tmp;
			}
    break;
case 108:
#line 470 "ldgram.y"
{
			  struct wildcard_spec tmp;
			  tmp.name = yyvsp[0].name;
			  tmp.exclude_name_list = NULL;
			  tmp.sorted = false;
			  lang_add_wild (&tmp, NULL, ldgram_had_keep);
			}
    break;
case 109:
#line 478 "ldgram.y"
{
			  lang_add_wild (NULL, yyvsp[-1].wildcard_list, ldgram_had_keep);
			}
    break;
case 110:
#line 482 "ldgram.y"
{
			  lang_add_wild (&yyvsp[-3].wildcard, yyvsp[-1].wildcard_list, ldgram_had_keep);
			}
    break;
case 112:
#line 490 "ldgram.y"
{ ldgram_had_keep = true; }
    break;
case 113:
#line 492 "ldgram.y"
{ ldgram_had_keep = false; }
    break;
case 115:
#line 498 "ldgram.y"
{
 		lang_add_attribute(lang_object_symbols_statement_enum); 
	      	}
    break;
case 117:
#line 503 "ldgram.y"
{
 		
		  lang_add_attribute(lang_constructors_statement_enum); 
		}
    break;
case 118:
#line 508 "ldgram.y"
{
		  constructors_sorted = true;
		  lang_add_attribute (lang_constructors_statement_enum);
		}
    break;
case 120:
#line 514 "ldgram.y"
{
			lang_add_data((int) yyvsp[-3].integer,yyvsp[-1].etree);
			}
    break;
case 121:
#line 519 "ldgram.y"
{
			  lang_add_fill
			    (exp_get_value_int(yyvsp[-1].etree,
					       0,
					       "fill value",
					       lang_first_phase_enum));
			}
    break;
case 126:
#line 540 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 127:
#line 542 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 128:
#line 544 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 129:
#line 546 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 130:
#line 548 "ldgram.y"
{ yyval.integer = yyvsp[0].token; }
    break;
case 131:
#line 553 "ldgram.y"
{
		  yyval.integer =	 exp_get_value_int(yyvsp[0].etree,
					   0,
					   "fill value",
					   lang_first_phase_enum);
		}
    break;
case 132:
#line 559 "ldgram.y"
{ yyval.integer = 0; }
    break;
case 133:
#line 566 "ldgram.y"
{ yyval.token = '+'; }
    break;
case 134:
#line 568 "ldgram.y"
{ yyval.token = '-'; }
    break;
case 135:
#line 570 "ldgram.y"
{ yyval.token = '*'; }
    break;
case 136:
#line 572 "ldgram.y"
{ yyval.token = '/'; }
    break;
case 137:
#line 574 "ldgram.y"
{ yyval.token = LSHIFT; }
    break;
case 138:
#line 576 "ldgram.y"
{ yyval.token = RSHIFT; }
    break;
case 139:
#line 578 "ldgram.y"
{ yyval.token = '&'; }
    break;
case 140:
#line 580 "ldgram.y"
{ yyval.token = '|'; }
    break;
case 143:
#line 590 "ldgram.y"
{
		  lang_add_assignment (exp_assop (yyvsp[-1].token, yyvsp[-2].name, yyvsp[0].etree));
		}
    break;
case 144:
#line 594 "ldgram.y"
{
		  lang_add_assignment (exp_assop ('=', yyvsp[-2].name,
						  exp_binop (yyvsp[-1].token,
							     exp_nameop (NAME,
									 yyvsp[-2].name),
							     yyvsp[0].etree)));
		}
    break;
case 145:
#line 602 "ldgram.y"
{
		  lang_add_assignment (exp_provide (yyvsp[-3].name, yyvsp[-1].etree));
		}
    break;
case 152:
#line 624 "ldgram.y"
{ region = lang_memory_region_lookup(yyvsp[0].name); }
    break;
case 154:
#line 632 "ldgram.y"
{ region->current =
		 region->origin =
		 exp_get_vma(yyvsp[0].etree, 0L,"origin", lang_first_phase_enum);
}
    break;
case 155:
#line 640 "ldgram.y"
{ region->length = exp_get_vma(yyvsp[0].etree,
					       ~((bfd_vma)0),
					       "length",
					       lang_first_phase_enum);
		}
    break;
case 156:
#line 649 "ldgram.y"
{ /* dummy action to avoid bison 1.25 error message */ }
    break;
case 160:
#line 660 "ldgram.y"
{ lang_set_flags (region, yyvsp[0].name, 0); }
    break;
case 161:
#line 662 "ldgram.y"
{ lang_set_flags (region, yyvsp[0].name, 1); }
    break;
case 162:
#line 667 "ldgram.y"
{ lang_startup(yyvsp[-1].name); }
    break;
case 164:
#line 673 "ldgram.y"
{ ldemul_hll((char *)NULL); }
    break;
case 165:
#line 678 "ldgram.y"
{ ldemul_hll(yyvsp[0].name); }
    break;
case 166:
#line 680 "ldgram.y"
{ ldemul_hll(yyvsp[0].name); }
    break;
case 168:
#line 688 "ldgram.y"
{ ldemul_syslib(yyvsp[0].name); }
    break;
case 170:
#line 694 "ldgram.y"
{ lang_float(true); }
    break;
case 171:
#line 696 "ldgram.y"
{ lang_float(false); }
    break;
case 172:
#line 701 "ldgram.y"
{
		  yyval.nocrossref = NULL;
		}
    break;
case 173:
#line 705 "ldgram.y"
{
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = yyvsp[-1].name;
		  n->next = yyvsp[0].nocrossref;
		  yyval.nocrossref = n;
		}
    break;
case 174:
#line 714 "ldgram.y"
{
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = yyvsp[-2].name;
		  n->next = yyvsp[0].nocrossref;
		  yyval.nocrossref = n;
		}
    break;
case 175:
#line 724 "ldgram.y"
{ ldlex_expression(); }
    break;
case 176:
#line 726 "ldgram.y"
{ ldlex_popstate(); yyval.etree=yyvsp[0].etree;}
    break;
case 177:
#line 731 "ldgram.y"
{ yyval.etree = exp_unop('-', yyvsp[0].etree); }
    break;
case 178:
#line 733 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
case 179:
#line 735 "ldgram.y"
{ yyval.etree = exp_unop((int) yyvsp[-3].integer,yyvsp[-1].etree); }
    break;
case 180:
#line 737 "ldgram.y"
{ yyval.etree = exp_unop('!', yyvsp[0].etree); }
    break;
case 181:
#line 739 "ldgram.y"
{ yyval.etree = yyvsp[0].etree; }
    break;
case 182:
#line 741 "ldgram.y"
{ yyval.etree = exp_unop('~', yyvsp[0].etree);}
    break;
case 183:
#line 744 "ldgram.y"
{ yyval.etree = exp_binop('*', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 184:
#line 746 "ldgram.y"
{ yyval.etree = exp_binop('/', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 185:
#line 748 "ldgram.y"
{ yyval.etree = exp_binop('%', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 186:
#line 750 "ldgram.y"
{ yyval.etree = exp_binop('+', yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 187:
#line 752 "ldgram.y"
{ yyval.etree = exp_binop('-' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 188:
#line 754 "ldgram.y"
{ yyval.etree = exp_binop(LSHIFT , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 189:
#line 756 "ldgram.y"
{ yyval.etree = exp_binop(RSHIFT , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 190:
#line 758 "ldgram.y"
{ yyval.etree = exp_binop(EQ , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 191:
#line 760 "ldgram.y"
{ yyval.etree = exp_binop(NE , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 192:
#line 762 "ldgram.y"
{ yyval.etree = exp_binop(LE , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 193:
#line 764 "ldgram.y"
{ yyval.etree = exp_binop(GE , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 194:
#line 766 "ldgram.y"
{ yyval.etree = exp_binop('<' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 195:
#line 768 "ldgram.y"
{ yyval.etree = exp_binop('>' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 196:
#line 770 "ldgram.y"
{ yyval.etree = exp_binop('&' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 197:
#line 772 "ldgram.y"
{ yyval.etree = exp_binop('^' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 198:
#line 774 "ldgram.y"
{ yyval.etree = exp_binop('|' , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 199:
#line 776 "ldgram.y"
{ yyval.etree = exp_trinop('?' , yyvsp[-4].etree, yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 200:
#line 778 "ldgram.y"
{ yyval.etree = exp_binop(ANDAND , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 201:
#line 780 "ldgram.y"
{ yyval.etree = exp_binop(OROR , yyvsp[-2].etree, yyvsp[0].etree); }
    break;
case 202:
#line 782 "ldgram.y"
{ yyval.etree = exp_nameop(DEFINED, yyvsp[-1].name); }
    break;
case 203:
#line 784 "ldgram.y"
{ yyval.etree = exp_intop(yyvsp[0].integer); }
    break;
case 204:
#line 786 "ldgram.y"
{ yyval.etree = exp_nameop(SIZEOF_HEADERS,0); }
    break;
case 205:
#line 789 "ldgram.y"
{ yyval.etree = exp_nameop(SIZEOF,yyvsp[-1].name); }
    break;
case 206:
#line 791 "ldgram.y"
{ yyval.etree = exp_nameop(ADDR,yyvsp[-1].name); }
    break;
case 207:
#line 793 "ldgram.y"
{ yyval.etree = exp_nameop(LOADADDR,yyvsp[-1].name); }
    break;
case 208:
#line 795 "ldgram.y"
{ yyval.etree = exp_unop(ABSOLUTE, yyvsp[-1].etree); }
    break;
case 209:
#line 797 "ldgram.y"
{ yyval.etree = exp_unop(ALIGN_K,yyvsp[-1].etree); }
    break;
case 210:
#line 799 "ldgram.y"
{ yyval.etree = exp_unop(ALIGN_K,yyvsp[-1].etree); }
    break;
case 211:
#line 801 "ldgram.y"
{ yyval.etree = exp_nameop(NAME,yyvsp[0].name); }
    break;
case 212:
#line 803 "ldgram.y"
{ yyval.etree = exp_binop (MAX_K, yyvsp[-3].etree, yyvsp[-1].etree ); }
    break;
case 213:
#line 805 "ldgram.y"
{ yyval.etree = exp_binop (MIN_K, yyvsp[-3].etree, yyvsp[-1].etree ); }
    break;
case 214:
#line 807 "ldgram.y"
{ yyval.etree = exp_assert (yyvsp[-3].etree, yyvsp[-1].name); }
    break;
case 215:
#line 812 "ldgram.y"
{ yyval.name = yyvsp[0].name; }
    break;
case 216:
#line 813 "ldgram.y"
{ yyval.name = "*default*"; }
    break;
case 217:
#line 817 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
case 218:
#line 818 "ldgram.y"
{ yyval.etree = 0; }
    break;
case 219:
#line 821 "ldgram.y"
{ ldlex_expression(); }
    break;
case 220:
#line 823 "ldgram.y"
{ ldlex_popstate (); ldlex_script (); }
    break;
case 221:
#line 825 "ldgram.y"
{
			  lang_enter_output_section_statement(yyvsp[-5].name, yyvsp[-3].etree,
							      sectype,
							      0, 0, 0, yyvsp[-2].etree);
			}
    break;
case 222:
#line 831 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); }
    break;
case 223:
#line 833 "ldgram.y"
{
		  ldlex_popstate ();
		  lang_leave_output_section_statement (yyvsp[0].integer, yyvsp[-3].name, yyvsp[-1].section_phdr, yyvsp[-2].name);
		}
    break;
case 225:
#line 839 "ldgram.y"
{ ldlex_expression (); }
    break;
case 226:
#line 841 "ldgram.y"
{ ldlex_popstate (); ldlex_script (); }
    break;
case 227:
#line 843 "ldgram.y"
{
			  lang_enter_overlay (yyvsp[-4].etree, yyvsp[-2].etree, (int) yyvsp[-3].integer);
			}
    break;
case 228:
#line 848 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); }
    break;
case 229:
#line 850 "ldgram.y"
{
			  ldlex_popstate ();
			  lang_leave_overlay (yyvsp[0].integer, yyvsp[-3].name, yyvsp[-1].section_phdr, yyvsp[-2].name);
			}
    break;
case 231:
#line 859 "ldgram.y"
{ ldlex_expression (); }
    break;
case 232:
#line 861 "ldgram.y"
{
		  ldlex_popstate ();
		  lang_add_assignment (exp_assop ('=', ".", yyvsp[0].etree));
		}
    break;
case 234:
#line 869 "ldgram.y"
{ sectype = noload_section; }
    break;
case 235:
#line 870 "ldgram.y"
{ sectype = dsect_section; }
    break;
case 236:
#line 871 "ldgram.y"
{ sectype = copy_section; }
    break;
case 237:
#line 872 "ldgram.y"
{ sectype = info_section; }
    break;
case 238:
#line 873 "ldgram.y"
{ sectype = overlay_section; }
    break;
case 240:
#line 878 "ldgram.y"
{ sectype = normal_section; }
    break;
case 241:
#line 879 "ldgram.y"
{ sectype = normal_section; }
    break;
case 242:
#line 883 "ldgram.y"
{ yyval.etree = yyvsp[-2].etree; }
    break;
case 243:
#line 884 "ldgram.y"
{ yyval.etree = (etree_type *)NULL;  }
    break;
case 244:
#line 889 "ldgram.y"
{ yyval.etree = yyvsp[-3].etree; }
    break;
case 245:
#line 891 "ldgram.y"
{ yyval.etree = yyvsp[-7].etree; }
    break;
case 246:
#line 895 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; }
    break;
case 247:
#line 896 "ldgram.y"
{ yyval.etree = (etree_type *) NULL;  }
    break;
case 248:
#line 901 "ldgram.y"
{ yyval.integer = 0; }
    break;
case 249:
#line 903 "ldgram.y"
{ yyval.integer = 1; }
    break;
case 250:
#line 908 "ldgram.y"
{ yyval.name = yyvsp[0].name; }
    break;
case 251:
#line 909 "ldgram.y"
{ yyval.name = "*default*"; }
    break;
case 252:
#line 914 "ldgram.y"
{
		  yyval.section_phdr = NULL;
		}
    break;
case 253:
#line 918 "ldgram.y"
{
		  struct lang_output_section_phdr_list *n;

		  n = ((struct lang_output_section_phdr_list *)
		       xmalloc (sizeof *n));
		  n->name = yyvsp[0].name;
		  n->used = false;
		  n->next = yyvsp[-2].section_phdr;
		  yyval.section_phdr = n;
		}
    break;
case 255:
#line 934 "ldgram.y"
{
			  ldlex_script ();
			  lang_enter_overlay_section (yyvsp[0].name);
			}
    break;
case 256:
#line 939 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); }
    break;
case 257:
#line 941 "ldgram.y"
{
			  ldlex_popstate ();
			  lang_leave_overlay_section (yyvsp[0].integer, yyvsp[-1].section_phdr);
			}
    break;
case 262:
#line 958 "ldgram.y"
{ ldlex_expression (); }
    break;
case 263:
#line 959 "ldgram.y"
{ ldlex_popstate (); }
    break;
case 264:
#line 961 "ldgram.y"
{
		  lang_new_phdr (yyvsp[-5].name, yyvsp[-3].etree, yyvsp[-2].phdr.filehdr, yyvsp[-2].phdr.phdrs, yyvsp[-2].phdr.at,
				 yyvsp[-2].phdr.flags);
		}
    break;
case 265:
#line 969 "ldgram.y"
{
		  yyval.etree = yyvsp[0].etree;

		  if (yyvsp[0].etree->type.node_class == etree_name
		      && yyvsp[0].etree->type.node_code == NAME)
		    {
		      const char *s;
		      unsigned int i;
		      static const char * const phdr_types[] =
			{
			  "PT_NULL", "PT_LOAD", "PT_DYNAMIC",
			  "PT_INTERP", "PT_NOTE", "PT_SHLIB",
			  "PT_PHDR"
			};

		      s = yyvsp[0].etree->name.name;
		      for (i = 0;
			   i < sizeof phdr_types / sizeof phdr_types[0];
			   i++)
			if (strcmp (s, phdr_types[i]) == 0)
			  {
			    yyval.etree = exp_intop (i);
			    break;
			  }
		    }
		}
    break;
case 266:
#line 999 "ldgram.y"
{
		  memset (&yyval.phdr, 0, sizeof (struct phdr_info));
		}
    break;
case 267:
#line 1003 "ldgram.y"
{
		  yyval.phdr = yyvsp[0].phdr;
		  if (strcmp (yyvsp[-2].name, "FILEHDR") == 0 && yyvsp[-1].etree == NULL)
		    yyval.phdr.filehdr = true;
		  else if (strcmp (yyvsp[-2].name, "PHDRS") == 0 && yyvsp[-1].etree == NULL)
		    yyval.phdr.phdrs = true;
		  else if (strcmp (yyvsp[-2].name, "FLAGS") == 0 && yyvsp[-1].etree != NULL)
		    yyval.phdr.flags = yyvsp[-1].etree;
		  else
		    einfo (_("%X%P:%S: PHDRS syntax error at `%s'\n"), yyvsp[-2].name);
		}
    break;
case 268:
#line 1015 "ldgram.y"
{
		  yyval.phdr = yyvsp[0].phdr;
		  yyval.phdr.at = yyvsp[-2].etree;
		}
    break;
case 269:
#line 1023 "ldgram.y"
{
		  yyval.etree = NULL;
		}
    break;
case 270:
#line 1027 "ldgram.y"
{
		  yyval.etree = yyvsp[-1].etree;
		}
    break;
case 271:
#line 1035 "ldgram.y"
{
		  ldlex_version_file ();
		  PUSH_ERROR (_("VERSION script"));
		}
    break;
case 272:
#line 1040 "ldgram.y"
{
		  ldlex_popstate ();
		  POP_ERROR ();
		}
    break;
case 273:
#line 1049 "ldgram.y"
{
		  ldlex_version_script ();
		}
    break;
case 274:
#line 1053 "ldgram.y"
{
		  ldlex_popstate ();
		}
    break;
case 277:
#line 1065 "ldgram.y"
{
		  lang_register_vers_node (NULL, yyvsp[-2].versnode, NULL);
		}
    break;
case 278:
#line 1069 "ldgram.y"
{
		  lang_register_vers_node (yyvsp[-4].name, yyvsp[-2].versnode, NULL);
		}
    break;
case 279:
#line 1073 "ldgram.y"
{
		  lang_register_vers_node (yyvsp[-5].name, yyvsp[-3].versnode, yyvsp[-1].deflist);
		}
    break;
case 280:
#line 1080 "ldgram.y"
{
		  yyval.deflist = lang_add_vers_depend (NULL, yyvsp[0].name);
		}
    break;
case 281:
#line 1084 "ldgram.y"
{
		  yyval.deflist = lang_add_vers_depend (yyvsp[-1].deflist, yyvsp[0].name);
		}
    break;
case 282:
#line 1091 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (NULL, NULL);
		}
    break;
case 283:
#line 1095 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-1].versyms, NULL);
		}
    break;
case 284:
#line 1099 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-1].versyms, NULL);
		}
    break;
case 285:
#line 1103 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (NULL, yyvsp[-1].versyms);
		}
    break;
case 286:
#line 1107 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-5].versyms, yyvsp[-1].versyms);
		}
    break;
case 287:
#line 1114 "ldgram.y"
{
		  yyval.versyms = lang_new_vers_pattern (NULL, yyvsp[0].name, ldgram_vers_current_lang);
		}
    break;
case 288:
#line 1118 "ldgram.y"
{
		  yyval.versyms = lang_new_vers_pattern (yyvsp[-2].versyms, yyvsp[0].name, ldgram_vers_current_lang);
		}
    break;
case 289:
#line 1122 "ldgram.y"
{
			  yyval.name = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = yyvsp[-1].name;
			}
    break;
case 290:
#line 1127 "ldgram.y"
{
			  yyval.versyms = yyvsp[-1].versyms;
			  ldgram_vers_current_lang = yyvsp[-2].name;
			}
    break;
}

#line 727 "/usr/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 1133 "ldgram.y"

void
yyerror(arg) 
     const char *arg;
{ 
  if (ldfile_assumed_script)
    einfo (_("%P:%s: file format not recognized; treating as linker script\n"),
	   ldfile_input_filename);
  if (error_index > 0 && error_index < ERROR_NAME_MAX)
     einfo ("%P%F:%S: %s in %s\n", arg, error_names[error_index-1]);
  else
     einfo ("%P%F:%S: %s\n", arg);
}
@


1.1.4.1
log
@Add generated files to release branch.
@
text
@a0 2809

/*  A Bison parser, made from ldgram.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	INT	257
#define	NAME	258
#define	LNAME	259
#define	PLUSEQ	260
#define	MINUSEQ	261
#define	MULTEQ	262
#define	DIVEQ	263
#define	LSHIFTEQ	264
#define	RSHIFTEQ	265
#define	ANDEQ	266
#define	OREQ	267
#define	OROR	268
#define	ANDAND	269
#define	EQ	270
#define	NE	271
#define	LE	272
#define	GE	273
#define	LSHIFT	274
#define	RSHIFT	275
#define	UNARY	276
#define	END	277
#define	ALIGN_K	278
#define	BLOCK	279
#define	BIND	280
#define	QUAD	281
#define	SQUAD	282
#define	LONG	283
#define	SHORT	284
#define	BYTE	285
#define	SECTIONS	286
#define	PHDRS	287
#define	SORT	288
#define	SIZEOF_HEADERS	289
#define	OUTPUT_FORMAT	290
#define	FORCE_COMMON_ALLOCATION	291
#define	OUTPUT_ARCH	292
#define	INCLUDE	293
#define	MEMORY	294
#define	DEFSYMEND	295
#define	NOLOAD	296
#define	DSECT	297
#define	COPY	298
#define	INFO	299
#define	OVERLAY	300
#define	DEFINED	301
#define	TARGET_K	302
#define	SEARCH_DIR	303
#define	MAP	304
#define	ENTRY	305
#define	NEXT	306
#define	SIZEOF	307
#define	ADDR	308
#define	LOADADDR	309
#define	MAX_K	310
#define	MIN_K	311
#define	STARTUP	312
#define	HLL	313
#define	SYSLIB	314
#define	FLOAT	315
#define	NOFLOAT	316
#define	NOCROSSREFS	317
#define	ORIGIN	318
#define	FILL	319
#define	LENGTH	320
#define	CREATE_OBJECT_SYMBOLS	321
#define	INPUT	322
#define	GROUP	323
#define	OUTPUT	324
#define	CONSTRUCTORS	325
#define	ALIGNMOD	326
#define	AT	327
#define	PROVIDE	328
#define	CHIP	329
#define	LIST	330
#define	SECT	331
#define	ABSOLUTE	332
#define	LOAD	333
#define	NEWLINE	334
#define	ENDWORD	335
#define	ORDER	336
#define	NAMEWORD	337
#define	ASSERT_K	338
#define	FORMAT	339
#define	PUBLIC	340
#define	BASE	341
#define	ALIAS	342
#define	TRUNCATE	343
#define	REL	344
#define	INPUT_SCRIPT	345
#define	INPUT_MRI_SCRIPT	346
#define	INPUT_DEFSYM	347
#define	CASE	348
#define	EXTERN	349
#define	START	350
#define	VERS_TAG	351
#define	VERS_IDENTIFIER	352
#define	GLOBAL	353
#define	LOCAL	354
#define	VERSIONK	355
#define	INPUT_VERSION_SCRIPT	356
#define	KEEP	357
#define	EXCLUDE_FILE	358

#line 22 "ldgram.y"

/*

 */

#define DONTDECLARE_MALLOC

#include "bfd.h"
#include "sysdep.h"
#include "bfdlink.h"
#include "ld.h"    
#include "ldexp.h"
#include "ldver.h"
#include "ldlang.h"
#include "ldfile.h"
#include "ldemul.h"
#include "ldmisc.h"
#include "ldmain.h"
#include "mri.h"
#include "ldctor.h"
#include "ldlex.h"

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

static enum section_type sectype;

lang_memory_region_type *region;

struct wildcard_spec current_file;
boolean ldgram_want_filename = true;
boolean had_script = false;
boolean force_make_executable = false;

boolean ldgram_in_script = false;
boolean ldgram_had_equals = false;
boolean ldgram_had_keep = false;
char *ldgram_vers_current_lang = NULL;

#define ERROR_NAME_MAX 20
static char *error_names[ERROR_NAME_MAX];
static int error_index;
#define PUSH_ERROR(x) if (error_index < ERROR_NAME_MAX) error_names[error_index] = x; error_index++;
#define POP_ERROR()   error_index--;

#line 68 "ldgram.y"
typedef union {
  bfd_vma integer;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      boolean filehdr;
      boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		589
#define	YYFLAG		-32768
#define	YYNTBASE	128

#define YYTRANSLATE(x) ((unsigned)(x) <= 358 ? yytranslate[x] : 233)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   126,     2,     2,     2,    34,    21,     2,    37,
   123,    32,    30,   121,    31,     2,    33,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    16,   122,    24,
    10,    25,    15,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   124,     2,   125,    20,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    49,    19,    50,   127,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    11,    12,    13,    14,    17,    18,    22,
    23,    26,    27,    28,    29,    35,    36,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     6,     9,    12,    14,    15,    20,    21,    24,
    28,    29,    32,    37,    39,    41,    44,    46,    51,    56,
    60,    63,    68,    72,    77,    82,    87,    92,    97,   100,
   103,   106,   111,   116,   119,   122,   125,   128,   129,   135,
   138,   139,   143,   146,   147,   149,   153,   155,   159,   160,
   162,   166,   168,   171,   175,   176,   179,   182,   183,   185,
   187,   189,   191,   193,   195,   197,   199,   201,   203,   208,
   213,   218,   223,   232,   237,   239,   244,   245,   251,   256,
   257,   263,   268,   273,   275,   279,   282,   284,   288,   291,
   296,   299,   302,   303,   308,   311,   313,   315,   317,   319,
   325,   330,   339,   342,   344,   346,   350,   352,   353,   358,
   359,   365,   367,   368,   374,   377,   379,   381,   383,   388,
   390,   395,   400,   403,   405,   406,   408,   410,   412,   414,
   416,   418,   421,   422,   424,   426,   428,   430,   432,   434,
   436,   438,   440,   442,   446,   450,   457,   459,   460,   466,
   469,   473,   474,   475,   483,   487,   491,   492,   496,   498,
   501,   503,   506,   511,   516,   520,   524,   526,   531,   535,
   536,   538,   540,   541,   544,   548,   549,   552,   555,   559,
   564,   567,   570,   573,   577,   581,   585,   589,   593,   597,
   601,   605,   609,   613,   617,   621,   625,   629,   633,   637,
   643,   647,   651,   656,   658,   660,   665,   670,   675,   680,
   685,   690,   692,   699,   706,   713,   717,   718,   723,   724,
   725,   726,   727,   728,   729,   746,   747,   748,   749,   750,
   751,   769,   770,   771,   779,   781,   783,   785,   787,   789,
   793,   794,   797,   801,   804,   811,   822,   825,   827,   828,
   830,   833,   834,   835,   839,   840,   841,   842,   843,   855,
   860,   861,   864,   865,   866,   873,   875,   876,   880,   886,
   887,   891,   892,   895,   896,   902,   904,   907,   913,   920,
   922,   925,   926,   929,   934,   939,   948,   950,   954,   955
};

static const short yyrhs[] = {   107,
   142,     0,   108,   132,     0,   118,   223,     0,   109,   130,
     0,     4,     0,     0,   131,     4,    10,   188,     0,     0,
   133,   134,     0,   134,   135,    96,     0,     0,    91,   188,
     0,    91,   188,   121,   188,     0,     4,     0,    92,     0,
    98,   137,     0,    97,     0,   102,     4,    10,   188,     0,
   102,     4,   121,   188,     0,   102,     4,   188,     0,   101,
     4,     0,    93,     4,   121,   188,     0,    93,     4,   188,
     0,    93,     4,    10,   188,     0,    38,     4,    10,   188,
     0,    38,     4,   121,   188,     0,    88,     4,    10,   188,
     0,    88,     4,   121,   188,     0,    94,   139,     0,    95,
   138,     0,    99,     4,     0,   104,     4,   121,     4,     0,
   104,     4,   121,     3,     0,   103,   188,     0,   105,     3,
     0,   110,   140,     0,   111,   141,     0,     0,    55,   129,
   136,   134,    36,     0,   112,     4,     0,     0,   137,   121,
     4,     0,   137,     4,     0,     0,     4,     0,   138,   121,
     4,     0,     4,     0,   139,   121,     4,     0,     0,     4,
     0,   140,   121,     4,     0,     4,     0,   141,     4,     0,
   141,   121,     4,     0,     0,   143,   144,     0,   144,   145,
     0,     0,   170,     0,   149,     0,   215,     0,   179,     0,
   180,     0,   182,     0,   184,     0,   151,     0,   225,     0,
   122,     0,    64,    37,     4,   123,     0,    65,    37,   129,
   123,     0,    86,    37,   129,   123,     0,    52,    37,     4,
   123,     0,    52,    37,     4,   121,     4,   121,     4,   123,
     0,    54,    37,     4,   123,     0,    53,     0,    84,    37,
   148,   123,     0,     0,    85,   146,    37,   148,   123,     0,
    66,    37,   129,   123,     0,     0,    55,   129,   147,   144,
    36,     0,    79,    37,   185,   123,     0,   111,    37,   141,
   123,     0,     4,     0,   148,   121,     4,     0,   148,     4,
     0,     5,     0,   148,   121,     5,     0,   148,     5,     0,
    46,    49,   150,    50,     0,   150,   191,     0,   150,   151,
     0,     0,    67,    37,     4,   123,     0,   168,   167,     0,
     4,     0,    32,     0,    15,     0,   152,     0,   120,    37,
   154,   123,   152,     0,    48,    37,   152,   123,     0,    48,
    37,   120,    37,   154,   123,   152,   123,     0,   154,   152,
     0,   152,     0,   153,     0,   155,   169,   153,     0,     4,
     0,     0,   124,   157,   155,   125,     0,     0,   153,   158,
    37,   155,   123,     0,   156,     0,     0,   119,    37,   160,
   156,   123,     0,   168,   167,     0,    83,     0,   122,     0,
    87,     0,    48,    37,    87,   123,     0,   159,     0,   164,
    37,   186,   123,     0,    81,    37,   186,   123,     0,   162,
   161,     0,   161,     0,     0,   162,     0,    41,     0,    42,
     0,    43,     0,    44,     0,    45,     0,    10,   186,     0,
     0,     6,     0,     7,     0,     8,     0,     9,     0,    11,
     0,    12,     0,    13,     0,    14,     0,   122,     0,   121,
     0,     4,    10,   186,     0,     4,   166,   186,     0,    90,
    37,     4,    10,   186,   123,     0,   121,     0,     0,    56,
    49,   172,   171,    50,     0,   171,   172,     0,   171,   121,
   172,     0,     0,     0,     4,   173,   176,    16,   174,   169,
   175,     0,    80,    10,   186,     0,    82,    10,   186,     0,
     0,    37,   177,   123,     0,   178,     0,   177,   178,     0,
     4,     0,   126,     4,     0,    74,    37,   129,   123,     0,
    75,    37,   181,   123,     0,    75,    37,   123,     0,   181,
   169,   129,     0,   129,     0,    76,    37,   183,   123,     0,
   183,   169,   129,     0,     0,    77,     0,    78,     0,     0,
     4,   185,     0,     4,   121,   185,     0,     0,   187,   188,
     0,    31,   188,     0,    37,   188,   123,     0,    68,    37,
   188,   123,     0,   126,   188,     0,    30,   188,     0,   127,
   188,     0,   188,    32,   188,     0,   188,    33,   188,     0,
   188,    34,   188,     0,   188,    30,   188,     0,   188,    31,
   188,     0,   188,    28,   188,     0,   188,    29,   188,     0,
   188,    22,   188,     0,   188,    23,   188,     0,   188,    26,
   188,     0,   188,    27,   188,     0,   188,    24,   188,     0,
   188,    25,   188,     0,   188,    21,   188,     0,   188,    20,
   188,     0,   188,    19,   188,     0,   188,    15,   188,    16,
   188,     0,   188,    18,   188,     0,   188,    17,   188,     0,
    63,    37,     4,   123,     0,     3,     0,    51,     0,    69,
    37,     4,   123,     0,    70,    37,     4,   123,     0,    71,
    37,     4,   123,     0,    94,    37,   188,   123,     0,    38,
    37,   188,   123,     0,    39,    37,   188,   123,     0,     4,
     0,    72,    37,   188,   121,   188,   123,     0,    73,    37,
   188,   121,   188,   123,     0,   100,    37,   188,   121,     4,
   123,     0,    89,    25,     4,     0,     0,    89,    37,   188,
   123,     0,     0,     0,     0,     0,     0,     0,     4,   192,
   206,   190,   193,    49,   194,   163,    50,   195,   209,   189,
   210,   165,   196,   169,     0,     0,     0,     0,     0,     0,
    62,   197,   207,   208,   190,   198,    49,   199,   211,    50,
   200,   209,   189,   210,   165,   201,   169,     0,     0,     0,
    85,   202,   206,   203,    49,   150,    50,     0,    58,     0,
    59,     0,    60,     0,    61,     0,    62,     0,    37,   204,
   123,     0,     0,    37,   123,     0,   188,   205,    16,     0,
   205,    16,     0,    40,    37,   188,   123,   205,    16,     0,
    40,    37,   188,   123,    39,    37,   188,   123,   205,    16,
     0,   188,    16,     0,    16,     0,     0,    79,     0,    25,
     4,     0,     0,     0,   210,    16,     4,     0,     0,     0,
     0,     0,   211,     4,   212,    49,   163,    50,   213,   210,
   165,   214,   169,     0,    47,    49,   216,    50,     0,     0,
   216,   217,     0,     0,     0,     4,   218,   220,   221,   219,
   122,     0,   188,     0,     0,     4,   222,   221,     0,    89,
    37,   188,   123,   221,     0,     0,    37,   188,   123,     0,
     0,   224,   227,     0,     0,   226,   117,    49,   227,    50,
     0,   228,     0,   227,   228,     0,   113,    49,   230,    50,
   122,     0,   113,    49,   230,    50,   229,   122,     0,   113,
     0,   229,   113,     0,     0,   231,   122,     0,   115,    16,
   231,   122,     0,   116,    16,   231,   122,     0,   115,    16,
   231,   122,   116,    16,   231,   122,     0,   114,     0,   231,
   122,   114,     0,     0,   111,     4,    49,   232,   231,    50,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   153,   155,   156,   157,   161,   164,   166,   173,   179,   186,
   188,   191,   193,   194,   197,   200,   201,   202,   204,   206,
   208,   210,   212,   214,   216,   218,   220,   222,   224,   225,
   226,   228,   230,   232,   234,   236,   237,   238,   239,   240,
   242,   245,   247,   248,   251,   254,   257,   260,   264,   266,
   267,   270,   273,   275,   279,   284,   290,   292,   297,   299,
   300,   301,   302,   303,   304,   305,   306,   307,   308,   310,
   312,   314,   317,   319,   321,   323,   324,   326,   328,   330,
   331,   332,   336,   339,   343,   346,   349,   352,   355,   360,
   364,   366,   367,   370,   373,   378,   383,   387,   393,   400,
   406,   412,   422,   431,   442,   450,   459,   465,   470,   471,
   478,   481,   483,   485,   489,   491,   495,   496,   501,   506,
   507,   512,   522,   524,   527,   529,   532,   535,   537,   539,
   541,   545,   553,   558,   561,   563,   565,   567,   569,   571,
   573,   578,   578,   582,   587,   595,   602,   603,   606,   610,
   612,   613,   617,   619,   624,   632,   641,   644,   647,   649,
   652,   655,   659,   664,   666,   670,   673,   678,   680,   683,
   686,   689,   693,   698,   707,   718,   720,   723,   726,   728,
   730,   732,   734,   737,   739,   741,   743,   745,   747,   749,
   751,   753,   755,   757,   759,   761,   763,   765,   767,   769,
   771,   773,   775,   777,   779,   782,   784,   786,   788,   790,
   792,   794,   796,   798,   800,   805,   807,   810,   812,   815,
   817,   819,   825,   826,   832,   832,   834,   837,   841,   843,
   849,   849,   855,   859,   862,   864,   865,   866,   867,   870,
   872,   873,   876,   878,   879,   884,   888,   890,   893,   896,
   900,   903,   906,   911,   924,   926,   932,   934,   940,   942,
   946,   948,   951,   953,   955,   961,   991,   996,  1008,  1015,
  1020,  1028,  1034,  1042,  1046,  1052,  1054,  1057,  1062,  1068,
  1073,  1079,  1084,  1088,  1092,  1096,  1102,  1107,  1111,  1116
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","INT","NAME",
"LNAME","PLUSEQ","MINUSEQ","MULTEQ","DIVEQ","'='","LSHIFTEQ","RSHIFTEQ","ANDEQ",
"OREQ","'?'","':'","OROR","ANDAND","'|'","'^'","'&'","EQ","NE","'<'","'>'","LE",
"GE","LSHIFT","RSHIFT","'+'","'-'","'*'","'/'","'%'","UNARY","END","'('","ALIGN_K",
"BLOCK","BIND","QUAD","SQUAD","LONG","SHORT","BYTE","SECTIONS","PHDRS","SORT",
"'{'","'}'","SIZEOF_HEADERS","OUTPUT_FORMAT","FORCE_COMMON_ALLOCATION","OUTPUT_ARCH",
"INCLUDE","MEMORY","DEFSYMEND","NOLOAD","DSECT","COPY","INFO","OVERLAY","DEFINED",
"TARGET_K","SEARCH_DIR","MAP","ENTRY","NEXT","SIZEOF","ADDR","LOADADDR","MAX_K",
"MIN_K","STARTUP","HLL","SYSLIB","FLOAT","NOFLOAT","NOCROSSREFS","ORIGIN","FILL",
"LENGTH","CREATE_OBJECT_SYMBOLS","INPUT","GROUP","OUTPUT","CONSTRUCTORS","ALIGNMOD",
"AT","PROVIDE","CHIP","LIST","SECT","ABSOLUTE","LOAD","NEWLINE","ENDWORD","ORDER",
"NAMEWORD","ASSERT_K","FORMAT","PUBLIC","BASE","ALIAS","TRUNCATE","REL","INPUT_SCRIPT",
"INPUT_MRI_SCRIPT","INPUT_DEFSYM","CASE","EXTERN","START","VERS_TAG","VERS_IDENTIFIER",
"GLOBAL","LOCAL","VERSIONK","INPUT_VERSION_SCRIPT","KEEP","EXCLUDE_FILE","','",
"';'","')'","'['","']'","'!'","'~'","file","filename","defsym_expr","@@1","mri_script_file",
"@@2","mri_script_lines","mri_script_command","@@3","ordernamelist","mri_load_name_list",
"mri_abs_name_list","casesymlist","extern_name_list","script_file","@@4","ifile_list",
"ifile_p1","@@5","@@6","input_list","sections","sec_or_group_p1","statement_anywhere",
"wildcard_name","wildcard_spec","exclude_name_list","file_NAME_list","input_section_spec_no_keep",
"@@7","@@8","input_section_spec","@@9","statement","statement_list","statement_list_opt",
"length","fill_opt","assign_op","end","assignment","opt_comma","memory","memory_spec_list",
"memory_spec","@@10","origin_spec","length_spec","attributes_opt","attributes_list",
"attributes_string","startup","high_level_library","high_level_library_NAME_list",
"low_level_library","low_level_library_NAME_list","floating_point_support","nocrossref_list",
"mustbe_exp","@@11","exp","memspec_at_opt","opt_at","section","@@12","@@13","@@14",
"@@15","@@16","@@17","@@18","@@19","@@20","@@21","@@22","@@23","type","atype","opt_exp_with_type",
"opt_exp_without_type","opt_nocrossrefs","memspec_opt","phdr_opt","overlay_section",
"@@24","@@25","@@26","phdrs","phdr_list","phdr","@@27","@@28","phdr_type","phdr_qualifiers",
"phdr_val","version_script_file","@@29","version","@@30","vers_nodes","vers_node",
"verdep","vers_tag","vers_defns","@@31", NULL
};
#endif

static const short yyr1[] = {     0,
   128,   128,   128,   128,   129,   131,   130,   133,   132,   134,
   134,   135,   135,   135,   135,   135,   135,   135,   135,   135,
   135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
   135,   135,   135,   135,   135,   135,   135,   136,   135,   135,
   135,   137,   137,   137,   138,   138,   139,   139,   140,   140,
   140,   141,   141,   141,   143,   142,   144,   144,   145,   145,
   145,   145,   145,   145,   145,   145,   145,   145,   145,   145,
   145,   145,   145,   145,   145,   145,   146,   145,   145,   147,
   145,   145,   145,   148,   148,   148,   148,   148,   148,   149,
   150,   150,   150,   151,   151,   152,   152,   152,   153,   153,
   153,   153,   154,   154,   155,   155,   156,   157,   156,   158,
   156,   159,   160,   159,   161,   161,   161,   161,   161,   161,
   161,   161,   162,   162,   163,   163,   164,   164,   164,   164,
   164,   165,   165,   166,   166,   166,   166,   166,   166,   166,
   166,   167,   167,   168,   168,   168,   169,   169,   170,   171,
   171,   171,   173,   172,   174,   175,   176,   176,   177,   177,
   178,   178,   179,   180,   180,   181,   181,   182,   183,   183,
   184,   184,   185,   185,   185,   187,   186,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   189,   189,   190,   190,   192,
   193,   194,   195,   196,   191,   197,   198,   199,   200,   201,
   191,   202,   203,   191,   204,   204,   204,   204,   204,   205,
   205,   205,   206,   206,   206,   206,   207,   207,   208,   208,
   209,   209,   210,   210,   211,   212,   213,   214,   211,   215,
   216,   216,   218,   219,   217,   220,   221,   221,   221,   222,
   222,   224,   223,   226,   225,   227,   227,   228,   228,   229,
   229,   230,   230,   230,   230,   230,   231,   231,   232,   231
};

static const short yyr2[] = {     0,
     2,     2,     2,     2,     1,     0,     4,     0,     2,     3,
     0,     2,     4,     1,     1,     2,     1,     4,     4,     3,
     2,     4,     3,     4,     4,     4,     4,     4,     2,     2,
     2,     4,     4,     2,     2,     2,     2,     0,     5,     2,
     0,     3,     2,     0,     1,     3,     1,     3,     0,     1,
     3,     1,     2,     3,     0,     2,     2,     0,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     4,     4,
     4,     4,     8,     4,     1,     4,     0,     5,     4,     0,
     5,     4,     4,     1,     3,     2,     1,     3,     2,     4,
     2,     2,     0,     4,     2,     1,     1,     1,     1,     5,
     4,     8,     2,     1,     1,     3,     1,     0,     4,     0,
     5,     1,     0,     5,     2,     1,     1,     1,     4,     1,
     4,     4,     2,     1,     0,     1,     1,     1,     1,     1,
     1,     2,     0,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     3,     3,     6,     1,     0,     5,     2,
     3,     0,     0,     7,     3,     3,     0,     3,     1,     2,
     1,     2,     4,     4,     3,     3,     1,     4,     3,     0,
     1,     1,     0,     2,     3,     0,     2,     2,     3,     4,
     2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
     3,     3,     4,     1,     1,     4,     4,     4,     4,     4,
     4,     1,     6,     6,     6,     3,     0,     4,     0,     0,
     0,     0,     0,     0,    16,     0,     0,     0,     0,     0,
    17,     0,     0,     7,     1,     1,     1,     1,     1,     3,
     0,     2,     3,     2,     6,    10,     2,     1,     0,     1,
     2,     0,     0,     3,     0,     0,     0,     0,    11,     4,
     0,     2,     0,     0,     6,     1,     0,     3,     5,     0,
     3,     0,     2,     0,     5,     1,     2,     5,     6,     1,
     2,     0,     2,     4,     4,     8,     1,     3,     0,     6
};

static const short yydefact[] = {     0,
    55,     8,     6,   272,     1,    58,     2,    11,     4,     0,
     3,     0,    56,     9,     0,     0,   273,   276,     0,     0,
     0,     0,    75,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   171,   172,     0,     0,    77,     0,     0,
     0,    68,    57,    60,    66,     0,    59,    62,    63,    64,
    65,    61,    67,     0,    14,     0,     0,     0,     0,    15,
     0,     0,     0,    17,    44,     0,     0,     0,     0,     0,
     0,    49,     0,     0,     0,     0,   282,   277,   134,   135,
   136,   137,   176,   138,   139,   140,   141,   176,    93,   261,
     0,     0,     5,    80,     0,     0,     0,     0,     0,     0,
     0,   170,   173,     0,     0,     0,     0,     0,   143,   142,
    95,     0,     0,    38,     0,   204,   212,     0,     0,     0,
     0,     0,   205,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    12,     0,    47,    29,    45,    30,
    16,    31,    21,     0,    34,     0,    35,    50,    36,    52,
    37,    40,    10,     7,     0,   287,     0,     0,     0,     0,
   144,     0,   145,     0,     0,     0,     0,    58,   153,   152,
     0,     0,     0,     0,     0,   165,   167,   148,   148,   173,
     0,    84,    87,     0,     0,     0,     0,     0,     0,     0,
     0,    11,     0,     0,   182,   178,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   181,   183,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    23,     0,     0,    43,     0,     0,     0,    20,
     0,     0,    53,     0,     0,     0,     0,     0,   283,   177,
   220,    90,   226,   232,    92,    91,   263,   260,   262,     0,
    72,    74,   274,   157,     0,    69,    70,    79,    94,   163,
   147,   164,     0,   168,     0,   173,   174,    82,    86,    89,
     0,    76,     0,    71,   176,    83,     0,    25,    26,    41,
    27,    28,   179,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   202,   201,   199,   198,   197,
   191,   192,   195,   196,   193,   194,   189,   190,   187,   188,
   184,   185,   186,    13,    24,    22,    48,    46,    42,    18,
    19,    33,    32,    51,    54,   289,     0,     0,   280,   278,
     0,   288,   241,     0,   241,     0,     0,    81,     0,     0,
   149,     0,   150,   166,   169,   175,    85,    88,    78,     0,
   275,    39,   210,   211,   203,   180,   206,   207,   208,     0,
     0,   209,     0,     0,     0,   284,   285,   281,   279,     0,
     0,   241,     0,   219,   248,     0,   249,   233,   266,   267,
     0,   161,     0,     0,   159,     0,   151,   146,     0,     0,
     0,   200,     0,     0,   235,   236,   237,   238,   239,   242,
     0,     0,     0,     0,   244,     0,   221,   247,   250,   219,
     0,   270,     0,   264,     0,   162,   158,   160,     0,   148,
   213,   214,   215,   290,     0,     0,   240,     0,   243,     0,
     0,   227,    93,     0,   267,     0,     0,    73,   176,     0,
     0,   241,     0,   222,     0,     0,     0,   268,     0,   265,
   155,     0,   154,   286,     0,     0,   218,   125,   228,   234,
   271,   267,   176,     0,   245,   107,    98,    97,   127,   128,
   129,   130,   131,     0,     0,   116,   118,     0,     0,   117,
   108,    99,   110,   112,   120,   124,   126,     0,     0,     0,
   255,   269,   156,     0,     0,   176,   113,     0,     0,     0,
   123,   223,   176,   115,     0,   241,    96,     0,     0,     0,
     0,     0,   104,     0,     0,   105,   148,     0,   252,     0,
   256,   229,     0,   119,     0,   101,   122,    96,     0,     0,
   103,     0,   109,     0,   148,     0,   217,   121,     0,   252,
   246,     0,   114,   100,   106,   111,   251,     0,   253,   125,
   217,     0,     0,   133,     0,   253,     0,   216,   176,     0,
   224,   257,   133,   102,   132,   254,   148,   253,   230,   225,
   133,   148,   258,   231,   148,   259,     0,     0,     0
};

static const short yydefgoto[] = {   587,
    94,     9,    10,     7,     8,    14,    75,   192,   141,   140,
   138,   149,   151,     5,     6,    13,    43,   105,   168,   184,
    44,   164,    45,   492,   493,   524,   527,   494,   509,   510,
   495,   522,   496,   497,   498,   499,   571,    88,   111,    46,
   544,    47,   265,   170,   264,   430,   463,   350,   394,   395,
    48,    49,   178,    50,   179,    51,   181,   161,   162,   197,
   559,   417,   256,   343,   441,   468,   529,   577,   344,   455,
   501,   550,   582,   345,   421,   411,   383,   384,   387,   420,
   547,   564,   515,   549,   578,   585,    52,   165,   259,   346,
   447,   390,   424,   445,    11,    12,    53,    54,    17,    18,
   341,   159,   160,   375
};

static const short yypact[] = {   -66,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    23,
-32768,   -73,   585,   695,    53,    -4,   -73,-32768,  1276,    40,
    63,   115,-32768,   140,   179,   143,   158,   184,   191,   215,
   224,   226,   227,-32768,-32768,   228,   230,-32768,   231,   233,
   234,-32768,-32768,-32768,-32768,    -3,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   156,-32768,   270,   179,   272,   491,-32768,
   273,   274,   275,-32768,-32768,   276,   277,   280,   491,   288,
   290,   293,   296,   297,   198,   491,    85,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   298,   300,-32768,-32768,   301,   302,   179,   179,   303,   179,
    15,-32768,   304,   118,   281,   179,   305,   296,-32768,-32768,
-32768,   261,     6,-32768,     7,-32768,-32768,   491,   491,   491,
   282,   289,-32768,   291,   294,   295,   310,   311,   312,   313,
   314,   316,   491,   491,  1032,   252,-32768,   190,-32768,   196,
    10,-32768,-32768,   326,  1137,   206,-32768,-32768,   212,-32768,
    24,-32768,-32768,  1137,   330,-32768,   319,   339,   264,   236,
-32768,   491,-32768,    31,    29,   -20,   237,-32768,-32768,-32768,
   239,   243,   244,   246,   247,-32768,-32768,    -6,    65,    30,
   248,-32768,-32768,    61,   118,   249,   349,    68,   -73,   491,
   491,-32768,   491,   491,-32768,-32768,   581,   491,   491,   370,
   491,   371,   372,   376,   491,   491,   491,   491,-32768,-32768,
   491,   491,   491,   491,   491,   491,   491,   491,   491,   491,
   491,   491,   491,   491,   491,   491,   491,   491,   491,   491,
   491,   491,  1137,   377,   379,-32768,   380,   491,   491,  1137,
   254,   383,-32768,   386,   342,    -1,    -1,   -55,   278,  1137,
  1276,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   389,
-32768,-32768,   662,   363,     9,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   179,-32768,   179,   304,-32768,-32768,-32768,-32768,
   255,-32768,    64,-32768,-32768,-32768,   -21,  1137,  1137,   720,
  1137,  1137,-32768,   659,   818,   284,   838,   285,   287,   292,
  1052,  1072,   858,  1092,  1199,  1156,  1175,  1234,   738,  1247,
   549,   549,   186,   186,   186,   186,   216,   216,   193,   193,
-32768,-32768,-32768,  1137,  1137,  1137,-32768,-32768,-32768,  1137,
  1137,-32768,-32768,-32768,-32768,-32768,   283,   299,-32768,-32768,
   -39,-32768,   399,   445,   399,   491,   306,-32768,     8,   388,
-32768,   301,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   308,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   491,
   491,-32768,   407,   491,    -1,   122,   278,-32768,-32768,   172,
   375,  1112,   397,   325,-32768,  1219,   338,-32768,  1137,    20,
   415,-32768,   418,     3,-32768,   343,-32768,-32768,   878,   898,
   309,  1137,   -27,   408,-32768,-32768,-32768,-32768,-32768,-32768,
   317,   491,   146,   412,-32768,   396,-32768,-32768,-32768,   325,
   385,   398,   404,-32768,   320,-32768,-32768,-32768,   432,   323,
-32768,-32768,-32768,-32768,   278,    -1,-32768,   925,-32768,   491,
   402,-32768,-32768,   491,    20,   491,   324,-32768,-32768,   374,
   332,   200,   945,-32768,   410,    35,   965,-32768,   985,-32768,
-32768,   435,-32768,   278,   420,   444,-32768,   505,-32768,-32768,
-32768,    20,-32768,   491,-32768,   331,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   426,   427,-32768,-32768,   428,   429,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   505,   423,   440,    -3,
-32768,-32768,-32768,  1005,    92,-32768,-32768,    21,    58,   441,
-32768,-32768,-32768,-32768,    34,   442,-32768,   357,   449,   364,
   365,    22,-32768,    16,   452,-32768,   -34,    58,   466,   378,
-32768,-32768,   481,-32768,    21,-32768,-32768,   381,   382,    21,
-32768,    73,-32768,    58,   130,   494,   411,-32768,   454,   466,
-32768,    67,-32768,-32768,-32768,-32768,-32768,   482,-32768,   505,
   411,    21,   502,    84,   460,-32768,   400,-32768,-32768,   507,
-32768,-32768,    84,-32768,-32768,-32768,   323,-32768,-32768,-32768,
    84,   323,-32768,-32768,   323,-32768,   519,   524,-32768
};

static const short yypgoto[] = {-32768,
   -51,-32768,-32768,-32768,-32768,   335,-32768,-32768,-32768,-32768,
-32768,-32768,   424,-32768,-32768,   366,-32768,-32768,-32768,   346,
-32768,    90,  -160,   -50,  -315,     0,    12,    14,-32768,-32768,
-32768,-32768,    41,-32768,   -19,-32768,  -517,-32768,    43,  -446,
  -176,-32768,-32768,  -244,-32768,-32768,-32768,-32768,-32768,   150,
-32768,-32768,-32768,-32768,-32768,-32768,  -165,   -88,-32768,   -58,
   -10,   132,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -372,   210,-32768,-32768,
    17,  -534,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  -415,-32768,-32768,-32768,-32768,-32768,   367,   -12,
-32768,-32768,  -238,-32768
};


#define	YYLAST		1290


static const short yytable[] = {   163,
   135,   273,   275,   255,    78,   114,   392,   337,   338,   414,
   145,   392,   169,   236,   277,   190,   193,   154,    93,   517,
   353,   500,   434,   422,   517,   538,    15,   243,   361,   458,
   477,   573,   257,   180,   251,   477,   477,   531,   251,    16,
     1,     2,     3,   581,    77,   172,   173,   478,   175,   177,
   500,     4,   478,   478,   186,   579,   502,   339,   351,   195,
   196,   517,    76,   583,   279,   280,   340,   279,   280,   525,
   517,   243,   477,   378,   209,   210,   517,   233,   258,   466,
   252,   477,   379,   532,   470,   240,   271,   477,    89,   478,
   543,    16,   253,   569,   435,   517,   253,    30,   478,   570,
   260,    30,   261,   250,   478,   525,   477,   397,   423,   155,
   356,    90,   156,   500,   271,   254,   272,   109,   110,   254,
    40,   182,   183,   478,    40,   427,   191,   194,   393,   352,
   237,   288,   289,   393,   291,   292,   403,   176,   540,   294,
   295,   489,   297,   533,   244,   491,   301,   302,   303,   304,
   276,    91,   305,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   116,   117,    92,   489,   518,   330,
   331,   281,    93,   282,   281,   271,   359,   274,   244,   562,
   286,    95,   519,   526,    96,   155,   360,   451,   156,   157,
   158,   118,   119,   405,   406,   407,   408,   409,   120,   121,
   122,   519,   526,   223,   224,   225,   226,   227,   228,   229,
    97,   354,   123,   355,   227,   228,   229,    98,   555,   405,
   406,   407,   408,   409,   124,   342,   413,   404,   465,   125,
   126,   127,   128,   129,   130,   225,   226,   227,   228,   229,
   271,    99,   556,   450,   116,   117,   332,   333,   357,   358,
   100,   231,   101,   102,   103,   131,   104,   106,   410,   107,
   108,   132,   112,   113,    78,   115,   136,   137,   139,   142,
   143,   118,   119,   144,   382,   386,   382,   389,   120,   121,
   122,   146,   147,   153,   410,   255,   148,   133,   134,   150,
   152,   166,   123,   167,   169,   171,   174,   180,   187,   189,
   234,   399,   400,   248,   124,   402,   235,   185,   198,   125,
   126,   127,   128,   129,   130,   199,   241,   200,   116,   117,
   201,   202,   242,   245,   246,   238,    79,    80,    81,    82,
    83,    84,    85,    86,    87,   131,   203,   204,   205,   206,
   207,   132,   208,   438,   247,   118,   119,   249,   285,   262,
   461,   266,   120,   121,   122,   267,   268,   -96,   269,   270,
   278,   284,   232,   296,   298,   299,   123,   133,   134,   300,
   327,   453,   328,   329,   503,   457,   334,   459,   124,   335,
   336,   342,   347,   125,   126,   127,   128,   129,   130,   349,
   580,   116,   117,   396,   376,   584,   365,   367,   586,   368,
   401,   412,   415,   416,   369,   504,   419,   521,   425,   131,
   377,   426,   429,   436,   530,   132,   391,   439,   118,   119,
   398,   433,   440,   443,   444,   380,   121,   122,   381,   437,
   446,   449,   448,   271,   473,   460,   239,   116,   117,   123,
   454,   133,   134,   464,   520,   462,   474,   523,   469,   475,
   385,   124,   505,   506,   507,   508,   125,   126,   127,   128,
   129,   130,   512,   541,   118,   119,   513,   528,   413,   534,
   575,   120,   121,   122,   523,   535,   536,   537,   542,   554,
   546,   520,   131,   116,   117,   123,   551,   557,   132,   558,
   548,   541,   560,  -107,   553,   568,   563,   124,   476,   572,
   576,   567,   125,   126,   127,   128,   129,   130,   588,   477,
   118,   119,   574,   589,   133,   134,   290,   120,   121,   122,
   283,   188,   456,   263,   552,   539,   478,   511,   131,   545,
   565,   123,   514,   428,   132,   479,   480,   481,   482,   483,
   566,   442,   484,   124,   388,   287,     0,     0,   125,   126,
   127,   128,   129,   130,     0,     0,   561,     0,     0,     0,
   133,   134,   219,   220,   221,   222,   223,   224,   225,   226,
   227,   228,   229,     0,   131,   485,     0,   486,    19,     0,
   132,   487,     0,     0,    40,   211,     0,   212,   213,   214,
   215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
   225,   226,   227,   228,   229,     0,   133,   134,     0,     0,
     0,     0,     0,   488,   489,     0,   490,     0,   491,     0,
    20,    21,     0,     0,     0,     0,    22,    23,    24,    25,
    26,     0,     0,     0,     0,     0,     0,     0,    27,    28,
    29,    30,     0,     0,     0,     0,     0,     0,    31,    32,
    33,    34,    35,    36,     0,    19,     0,     0,    37,    38,
    39,     0,     0,   211,    40,   212,   213,   214,   215,   216,
   217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
   227,   228,   229,     0,     0,    41,     0,   348,    55,     0,
     0,  -274,     0,   293,     0,     0,    42,    20,    21,     0,
     0,     0,     0,    22,    23,    24,    25,    26,     0,     0,
     0,     0,     0,    55,     0,    27,    28,    29,    30,     0,
     0,     0,    56,     0,     0,    31,    32,    33,    34,    35,
    36,     0,     0,     0,     0,    37,    38,    39,     0,    57,
     0,    40,     0,     0,     0,   362,     0,    56,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,    41,     0,    57,     0,     0,     0,     0,     0,
     0,   363,    58,    42,     0,    59,    60,    61,    62,    63,
   -41,    64,    65,    66,     0,    67,    68,    69,    70,    71,
     0,     0,     0,     0,    72,    73,    74,    58,     0,     0,
    59,    60,    61,    62,    63,     0,    64,    65,    66,     0,
    67,    68,    69,    70,    71,     0,     0,     0,     0,    72,
    73,    74,   211,     0,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,   211,     0,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,   211,     0,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,   211,     0,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,   211,     0,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,     0,     0,     0,     0,     0,     0,     0,   211,
   364,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   211,
   366,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   211,
   372,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   211,
   431,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   211,
   432,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,     0,
     0,     0,     0,     0,     0,     0,   211,   452,   212,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,   211,   467,   212,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,   211,   471,   212,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,   211,   472,   212,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,   211,   516,   212,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,     0,     0,   413,     0,
     0,   211,   230,   212,   213,   214,   215,   216,   217,   218,
   219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
   229,     0,   370,   213,   214,   215,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     0,     0,   371,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,     0,
     0,     0,   373,   211,   374,   212,   213,   214,   215,   216,
   217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
   227,   228,   229,   211,   418,   212,   213,   214,   215,   216,
   217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
   227,   228,   229,   215,   216,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,   217,   218,
   219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
   229,    79,    80,    81,    82,    83,    84,    85,    86,    87
};

static const short yycheck[] = {    88,
    59,   178,   179,   164,    17,    57,     4,   246,   247,   382,
    69,     4,     4,     4,   180,    10,    10,    76,     4,     4,
   265,   468,    50,     4,     4,     4,     4,     4,    50,   445,
    15,   566,     4,     4,     4,    15,    15,     4,     4,   113,
   107,   108,   109,   578,    49,    97,    98,    32,   100,   101,
   497,   118,    32,    32,   106,   573,   472,   113,    50,   118,
   119,     4,    10,   581,     4,     5,   122,     4,     5,    48,
     4,     4,    15,   113,   133,   134,     4,   136,    50,   452,
    50,    15,   122,    50,    50,   144,   121,    15,    49,    32,
   125,   113,    62,    10,   122,     4,    62,    67,    32,    16,
   121,    67,   123,   162,    32,    48,    15,   352,    89,   111,
   276,    49,   114,   560,   121,    85,   123,   121,   122,    85,
    90,     4,     5,    32,    90,   123,   121,   121,   126,   121,
   121,   190,   191,   126,   193,   194,   375,   123,   123,   198,
   199,   120,   201,   516,   121,   124,   205,   206,   207,   208,
   121,    37,   211,   212,   213,   214,   215,   216,   217,   218,
   219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
   229,   230,   231,   232,     3,     4,    37,   120,    87,   238,
   239,   121,     4,   123,   121,   121,   123,   123,   121,   123,
   123,    49,   120,   509,    37,   111,   285,   436,   114,   115,
   116,    30,    31,    58,    59,    60,    61,    62,    37,    38,
    39,   120,   528,    28,    29,    30,    31,    32,    33,    34,
    37,   273,    51,   275,    32,    33,    34,    37,   544,    58,
    59,    60,    61,    62,    63,   114,    37,   116,    39,    68,
    69,    70,    71,    72,    73,    30,    31,    32,    33,    34,
   121,    37,   123,   430,     3,     4,     3,     4,     4,     5,
    37,    10,    37,    37,    37,    94,    37,    37,   123,    37,
    37,   100,   117,     4,   287,     4,     4,     4,     4,     4,
     4,    30,    31,     4,   343,   344,   345,   346,    37,    38,
    39,     4,     3,    96,   123,   456,     4,   126,   127,     4,
     4,     4,    51,     4,     4,     4,     4,     4,     4,    49,
   121,   370,   371,    50,    63,   374,   121,    37,    37,    68,
    69,    70,    71,    72,    73,    37,   121,    37,     3,     4,
    37,    37,   121,     4,    16,    10,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    94,    37,    37,    37,    37,
    37,   100,    37,   412,    16,    30,    31,   122,    10,   123,
   449,   123,    37,    38,    39,   123,   123,    37,   123,   123,
   123,   123,   121,     4,     4,     4,    51,   126,   127,     4,
     4,   440,     4,     4,   473,   444,     4,   446,    63,     4,
    49,   114,     4,    68,    69,    70,    71,    72,    73,    37,
   577,     3,     4,    16,   122,   582,   123,   123,   585,   123,
     4,    37,    16,    89,   123,   474,    79,   506,     4,    94,
   122,     4,    80,    16,   513,   100,   121,    16,    30,    31,
   123,   123,    37,    49,    37,    37,    38,    39,    40,   123,
    37,    10,   123,   121,    10,   122,   121,     3,     4,    51,
    49,   126,   127,   122,   505,    82,    37,   508,    49,    16,
    16,    63,    37,    37,    37,    37,    68,    69,    70,    71,
    72,    73,    50,   524,    30,    31,    37,    37,    37,   123,
   569,    37,    38,    39,   535,    37,   123,   123,    37,   540,
    25,   542,    94,     3,     4,    51,    16,     4,   100,    89,
   123,   552,    49,   123,   123,     4,    25,    63,     4,    50,
     4,   562,    68,    69,    70,    71,    72,    73,     0,    15,
    30,    31,   123,     0,   126,   127,   192,    37,    38,    39,
   185,   108,   443,   168,   535,   522,    32,   497,    94,   528,
   560,    51,   500,   394,   100,    41,    42,    43,    44,    45,
   561,   420,    48,    63,   345,   189,    -1,    -1,    68,    69,
    70,    71,    72,    73,    -1,    -1,   550,    -1,    -1,    -1,
   126,   127,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    -1,    94,    81,    -1,    83,     4,    -1,
   100,    87,    -1,    -1,    90,    15,    -1,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    -1,   126,   127,    -1,    -1,
    -1,    -1,    -1,   119,   120,    -1,   122,    -1,   124,    -1,
    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    64,    65,
    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
    76,    77,    78,    79,    -1,     4,    -1,    -1,    84,    85,
    86,    -1,    -1,    15,    90,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    -1,    -1,   111,    -1,    36,     4,    -1,
    -1,   117,    -1,   123,    -1,    -1,   122,    46,    47,    -1,
    -1,    -1,    -1,    52,    53,    54,    55,    56,    -1,    -1,
    -1,    -1,    -1,     4,    -1,    64,    65,    66,    67,    -1,
    -1,    -1,    38,    -1,    -1,    74,    75,    76,    77,    78,
    79,    -1,    -1,    -1,    -1,    84,    85,    86,    -1,    55,
    -1,    90,    -1,    -1,    -1,    36,    -1,    38,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,   111,    -1,    55,    -1,    -1,    -1,    -1,    -1,
    -1,   123,    88,   122,    -1,    91,    92,    93,    94,    95,
    96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
    -1,    -1,    -1,    -1,   110,   111,   112,    88,    -1,    -1,
    91,    92,    93,    94,    95,    -1,    97,    98,    99,    -1,
   101,   102,   103,   104,   105,    -1,    -1,    -1,    -1,   110,
   111,   112,    15,    -1,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,
   123,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
   123,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
   123,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
   123,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
   123,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    15,   123,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    15,   123,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    15,   123,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    15,   123,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    15,   123,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    -1,    -1,    37,    -1,
    -1,    15,   121,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    -1,   121,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    -1,    -1,   121,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,   121,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,     6,     7,     8,     9,    10,    11,    12,    13,    14
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/misc/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/misc/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 6:
#line 165 "ldgram.y"
{ ldlex_defsym(); ;
    break;}
case 7:
#line 167 "ldgram.y"
{
		  ldlex_popstate();
		  lang_add_assignment(exp_assop(yyvsp[-1].token,yyvsp[-2].name,yyvsp[0].etree));
		;
    break;}
case 8:
#line 174 "ldgram.y"
{
		  ldlex_mri_script ();
		  PUSH_ERROR (_("MRI style script"));
		;
    break;}
case 9:
#line 179 "ldgram.y"
{
		  ldlex_popstate ();
		  mri_draw_tree ();
		  POP_ERROR ();
		;
    break;}
case 14:
#line 194 "ldgram.y"
{
			einfo(_("%P%F: unrecognised keyword in MRI style script '%s'\n"),yyvsp[0].name);
			;
    break;}
case 15:
#line 197 "ldgram.y"
{
			config.map_filename = "-";
			;
    break;}
case 18:
#line 203 "ldgram.y"
{ mri_public(yyvsp[-2].name, yyvsp[0].etree); ;
    break;}
case 19:
#line 205 "ldgram.y"
{ mri_public(yyvsp[-2].name, yyvsp[0].etree); ;
    break;}
case 20:
#line 207 "ldgram.y"
{ mri_public(yyvsp[-1].name, yyvsp[0].etree); ;
    break;}
case 21:
#line 209 "ldgram.y"
{ mri_format(yyvsp[0].name); ;
    break;}
case 22:
#line 211 "ldgram.y"
{ mri_output_section(yyvsp[-2].name, yyvsp[0].etree);;
    break;}
case 23:
#line 213 "ldgram.y"
{ mri_output_section(yyvsp[-1].name, yyvsp[0].etree);;
    break;}
case 24:
#line 215 "ldgram.y"
{ mri_output_section(yyvsp[-2].name, yyvsp[0].etree);;
    break;}
case 25:
#line 217 "ldgram.y"
{ mri_align(yyvsp[-2].name,yyvsp[0].etree); ;
    break;}
case 26:
#line 219 "ldgram.y"
{ mri_align(yyvsp[-2].name,yyvsp[0].etree); ;
    break;}
case 27:
#line 221 "ldgram.y"
{ mri_alignmod(yyvsp[-2].name,yyvsp[0].etree); ;
    break;}
case 28:
#line 223 "ldgram.y"
{ mri_alignmod(yyvsp[-2].name,yyvsp[0].etree); ;
    break;}
case 31:
#line 227 "ldgram.y"
{ mri_name(yyvsp[0].name); ;
    break;}
case 32:
#line 229 "ldgram.y"
{ mri_alias(yyvsp[-2].name,yyvsp[0].name,0);;
    break;}
case 33:
#line 231 "ldgram.y"
{ mri_alias(yyvsp[-2].name,0,(int) yyvsp[0].integer);;
    break;}
case 34:
#line 233 "ldgram.y"
{ mri_base(yyvsp[0].etree); ;
    break;}
case 35:
#line 235 "ldgram.y"
{  mri_truncate((unsigned int) yyvsp[0].integer); ;
    break;}
case 38:
#line 239 "ldgram.y"
{ ldfile_open_command_file (yyvsp[0].name); ;
    break;}
case 40:
#line 241 "ldgram.y"
{ lang_add_entry (yyvsp[0].name, false); ;
    break;}
case 42:
#line 246 "ldgram.y"
{ mri_order(yyvsp[0].name); ;
    break;}
case 43:
#line 247 "ldgram.y"
{ mri_order(yyvsp[0].name); ;
    break;}
case 45:
#line 253 "ldgram.y"
{ mri_load(yyvsp[0].name); ;
    break;}
case 46:
#line 254 "ldgram.y"
{ mri_load(yyvsp[0].name); ;
    break;}
case 47:
#line 259 "ldgram.y"
{ mri_only_load(yyvsp[0].name); ;
    break;}
case 48:
#line 261 "ldgram.y"
{ mri_only_load(yyvsp[0].name); ;
    break;}
case 49:
#line 265 "ldgram.y"
{ yyval.name = NULL; ;
    break;}
case 52:
#line 272 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); ;
    break;}
case 53:
#line 274 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); ;
    break;}
case 54:
#line 276 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); ;
    break;}
case 55:
#line 280 "ldgram.y"
{
	 ldlex_both();
	;
    break;}
case 56:
#line 284 "ldgram.y"
{
	ldlex_popstate();
	;
    break;}
case 69:
#line 309 "ldgram.y"
{ lang_add_target(yyvsp[-1].name); ;
    break;}
case 70:
#line 311 "ldgram.y"
{ ldfile_add_library_path (yyvsp[-1].name, false); ;
    break;}
case 71:
#line 313 "ldgram.y"
{ lang_add_output(yyvsp[-1].name, 1); ;
    break;}
case 72:
#line 315 "ldgram.y"
{ lang_add_output_format (yyvsp[-1].name, (char *) NULL,
					    (char *) NULL, 1); ;
    break;}
case 73:
#line 318 "ldgram.y"
{ lang_add_output_format (yyvsp[-5].name, yyvsp[-3].name, yyvsp[-1].name, 1); ;
    break;}
case 74:
#line 320 "ldgram.y"
{ ldfile_set_output_arch(yyvsp[-1].name); ;
    break;}
case 75:
#line 322 "ldgram.y"
{ command_line.force_common_definition = true ; ;
    break;}
case 77:
#line 325 "ldgram.y"
{ lang_enter_group (); ;
    break;}
case 78:
#line 327 "ldgram.y"
{ lang_leave_group (); ;
    break;}
case 79:
#line 329 "ldgram.y"
{ lang_add_map(yyvsp[-1].name); ;
    break;}
case 80:
#line 331 "ldgram.y"
{ ldfile_open_command_file(yyvsp[0].name); ;
    break;}
case 82:
#line 333 "ldgram.y"
{
		  lang_add_nocrossref (yyvsp[-1].nocrossref);
		;
    break;}
case 84:
#line 341 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); ;
    break;}
case 85:
#line 344 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); ;
    break;}
case 86:
#line 347 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); ;
    break;}
case 87:
#line 350 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); ;
    break;}
case 88:
#line 353 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); ;
    break;}
case 89:
#line 356 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); ;
    break;}
case 94:
#line 372 "ldgram.y"
{ lang_add_entry (yyvsp[-1].name, false); ;
    break;}
case 96:
#line 380 "ldgram.y"
{
			  yyval.cname = yyvsp[0].name;
			;
    break;}
case 97:
#line 384 "ldgram.y"
{
			  yyval.cname = "*";
			;
    break;}
case 98:
#line 388 "ldgram.y"
{
			  yyval.cname = "?";
			;
    break;}
case 99:
#line 395 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[0].cname;
			  yyval.wildcard.sorted = false;
			  yyval.wildcard.exclude_name_list = NULL;
			;
    break;}
case 100:
#line 401 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[0].cname;
			  yyval.wildcard.sorted = false;
			  yyval.wildcard.exclude_name_list = yyvsp[-2].name_list;
			;
    break;}
case 101:
#line 407 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-1].cname;
			  yyval.wildcard.sorted = true;
			  yyval.wildcard.exclude_name_list = NULL;
			;
    break;}
case 102:
#line 413 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-1].cname;
			  yyval.wildcard.sorted = true;
			  yyval.wildcard.exclude_name_list = yyvsp[-3].name_list;
			;
    break;}
case 103:
#line 424 "ldgram.y"
{
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = yyvsp[0].cname;
			  tmp->next = yyvsp[-1].name_list;
			  yyval.name_list = tmp;	
			;
    break;}
case 104:
#line 433 "ldgram.y"
{
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = yyvsp[0].cname;
			  tmp->next = NULL;
			  yyval.name_list = tmp;
			;
    break;}
case 105:
#line 444 "ldgram.y"
{
			  lang_add_wild (yyvsp[0].wildcard.name, yyvsp[0].wildcard.sorted,
					 current_file.name,
					 current_file.sorted,
					 ldgram_had_keep, yyvsp[0].wildcard.exclude_name_list);
			;
    break;}
case 106:
#line 451 "ldgram.y"
{
			  lang_add_wild (yyvsp[0].wildcard.name, yyvsp[0].wildcard.sorted,
					 current_file.name,
					 current_file.sorted,
					 ldgram_had_keep, yyvsp[0].wildcard.exclude_name_list);
			;
    break;}
case 107:
#line 461 "ldgram.y"
{
			  lang_add_wild (NULL, false, yyvsp[0].name, false,
					 ldgram_had_keep, NULL);
			;
    break;}
case 108:
#line 466 "ldgram.y"
{
			  current_file.name = NULL;
			  current_file.sorted = false;
			;
    break;}
case 110:
#line 472 "ldgram.y"
{
			  current_file = yyvsp[0].wildcard;
			  /* '*' matches any file name.  */
			  if (strcmp (current_file.name, "*") == 0)
			    current_file.name = NULL;
			;
    break;}
case 113:
#line 484 "ldgram.y"
{ ldgram_had_keep = true; ;
    break;}
case 114:
#line 486 "ldgram.y"
{ ldgram_had_keep = false; ;
    break;}
case 116:
#line 492 "ldgram.y"
{
 		lang_add_attribute(lang_object_symbols_statement_enum); 
	      	;
    break;}
case 118:
#line 497 "ldgram.y"
{
 		
		  lang_add_attribute(lang_constructors_statement_enum); 
		;
    break;}
case 119:
#line 502 "ldgram.y"
{
		  constructors_sorted = true;
		  lang_add_attribute (lang_constructors_statement_enum);
		;
    break;}
case 121:
#line 508 "ldgram.y"
{
			lang_add_data((int) yyvsp[-3].integer,yyvsp[-1].etree);
			;
    break;}
case 122:
#line 513 "ldgram.y"
{
			  lang_add_fill
			    (exp_get_value_int(yyvsp[-1].etree,
					       0,
					       "fill value",
					       lang_first_phase_enum));
			;
    break;}
case 127:
#line 534 "ldgram.y"
{ yyval.integer = yyvsp[0].token; ;
    break;}
case 128:
#line 536 "ldgram.y"
{ yyval.integer = yyvsp[0].token; ;
    break;}
case 129:
#line 538 "ldgram.y"
{ yyval.integer = yyvsp[0].token; ;
    break;}
case 130:
#line 540 "ldgram.y"
{ yyval.integer = yyvsp[0].token; ;
    break;}
case 131:
#line 542 "ldgram.y"
{ yyval.integer = yyvsp[0].token; ;
    break;}
case 132:
#line 547 "ldgram.y"
{
		  yyval.integer =	 exp_get_value_int(yyvsp[0].etree,
					   0,
					   "fill value",
					   lang_first_phase_enum);
		;
    break;}
case 133:
#line 553 "ldgram.y"
{ yyval.integer = 0; ;
    break;}
case 134:
#line 560 "ldgram.y"
{ yyval.token = '+'; ;
    break;}
case 135:
#line 562 "ldgram.y"
{ yyval.token = '-'; ;
    break;}
case 136:
#line 564 "ldgram.y"
{ yyval.token = '*'; ;
    break;}
case 137:
#line 566 "ldgram.y"
{ yyval.token = '/'; ;
    break;}
case 138:
#line 568 "ldgram.y"
{ yyval.token = LSHIFT; ;
    break;}
case 139:
#line 570 "ldgram.y"
{ yyval.token = RSHIFT; ;
    break;}
case 140:
#line 572 "ldgram.y"
{ yyval.token = '&'; ;
    break;}
case 141:
#line 574 "ldgram.y"
{ yyval.token = '|'; ;
    break;}
case 144:
#line 584 "ldgram.y"
{
		  lang_add_assignment (exp_assop (yyvsp[-1].token, yyvsp[-2].name, yyvsp[0].etree));
		;
    break;}
case 145:
#line 588 "ldgram.y"
{
		  lang_add_assignment (exp_assop ('=', yyvsp[-2].name,
						  exp_binop (yyvsp[-1].token,
							     exp_nameop (NAME,
									 yyvsp[-2].name),
							     yyvsp[0].etree)));
		;
    break;}
case 146:
#line 596 "ldgram.y"
{
		  lang_add_assignment (exp_provide (yyvsp[-3].name, yyvsp[-1].etree));
		;
    break;}
case 153:
#line 618 "ldgram.y"
{ region = lang_memory_region_lookup(yyvsp[0].name); ;
    break;}
case 155:
#line 626 "ldgram.y"
{ region->current =
		 region->origin =
		 exp_get_vma(yyvsp[0].etree, 0L,"origin", lang_first_phase_enum);
;
    break;}
case 156:
#line 634 "ldgram.y"
{ region->length = exp_get_vma(yyvsp[0].etree,
					       ~((bfd_vma)0),
					       "length",
					       lang_first_phase_enum);
		;
    break;}
case 157:
#line 643 "ldgram.y"
{ /* dummy action to avoid bison 1.25 error message */ ;
    break;}
case 161:
#line 654 "ldgram.y"
{ lang_set_flags (region, yyvsp[0].name, 0); ;
    break;}
case 162:
#line 656 "ldgram.y"
{ lang_set_flags (region, yyvsp[0].name, 1); ;
    break;}
case 163:
#line 661 "ldgram.y"
{ lang_startup(yyvsp[-1].name); ;
    break;}
case 165:
#line 667 "ldgram.y"
{ ldemul_hll((char *)NULL); ;
    break;}
case 166:
#line 672 "ldgram.y"
{ ldemul_hll(yyvsp[0].name); ;
    break;}
case 167:
#line 674 "ldgram.y"
{ ldemul_hll(yyvsp[0].name); ;
    break;}
case 169:
#line 682 "ldgram.y"
{ ldemul_syslib(yyvsp[0].name); ;
    break;}
case 171:
#line 688 "ldgram.y"
{ lang_float(true); ;
    break;}
case 172:
#line 690 "ldgram.y"
{ lang_float(false); ;
    break;}
case 173:
#line 695 "ldgram.y"
{
		  yyval.nocrossref = NULL;
		;
    break;}
case 174:
#line 699 "ldgram.y"
{
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = yyvsp[-1].name;
		  n->next = yyvsp[0].nocrossref;
		  yyval.nocrossref = n;
		;
    break;}
case 175:
#line 708 "ldgram.y"
{
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = yyvsp[-2].name;
		  n->next = yyvsp[0].nocrossref;
		  yyval.nocrossref = n;
		;
    break;}
case 176:
#line 718 "ldgram.y"
{ ldlex_expression(); ;
    break;}
case 177:
#line 720 "ldgram.y"
{ ldlex_popstate(); yyval.etree=yyvsp[0].etree;;
    break;}
case 178:
#line 725 "ldgram.y"
{ yyval.etree = exp_unop('-', yyvsp[0].etree); ;
    break;}
case 179:
#line 727 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; ;
    break;}
case 180:
#line 729 "ldgram.y"
{ yyval.etree = exp_unop((int) yyvsp[-3].integer,yyvsp[-1].etree); ;
    break;}
case 181:
#line 731 "ldgram.y"
{ yyval.etree = exp_unop('!', yyvsp[0].etree); ;
    break;}
case 182:
#line 733 "ldgram.y"
{ yyval.etree = yyvsp[0].etree; ;
    break;}
case 183:
#line 735 "ldgram.y"
{ yyval.etree = exp_unop('~', yyvsp[0].etree);;
    break;}
case 184:
#line 738 "ldgram.y"
{ yyval.etree = exp_binop('*', yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 185:
#line 740 "ldgram.y"
{ yyval.etree = exp_binop('/', yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 186:
#line 742 "ldgram.y"
{ yyval.etree = exp_binop('%', yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 187:
#line 744 "ldgram.y"
{ yyval.etree = exp_binop('+', yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 188:
#line 746 "ldgram.y"
{ yyval.etree = exp_binop('-' , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 189:
#line 748 "ldgram.y"
{ yyval.etree = exp_binop(LSHIFT , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 190:
#line 750 "ldgram.y"
{ yyval.etree = exp_binop(RSHIFT , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 191:
#line 752 "ldgram.y"
{ yyval.etree = exp_binop(EQ , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 192:
#line 754 "ldgram.y"
{ yyval.etree = exp_binop(NE , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 193:
#line 756 "ldgram.y"
{ yyval.etree = exp_binop(LE , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 194:
#line 758 "ldgram.y"
{ yyval.etree = exp_binop(GE , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 195:
#line 760 "ldgram.y"
{ yyval.etree = exp_binop('<' , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 196:
#line 762 "ldgram.y"
{ yyval.etree = exp_binop('>' , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 197:
#line 764 "ldgram.y"
{ yyval.etree = exp_binop('&' , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 198:
#line 766 "ldgram.y"
{ yyval.etree = exp_binop('^' , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 199:
#line 768 "ldgram.y"
{ yyval.etree = exp_binop('|' , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 200:
#line 770 "ldgram.y"
{ yyval.etree = exp_trinop('?' , yyvsp[-4].etree, yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 201:
#line 772 "ldgram.y"
{ yyval.etree = exp_binop(ANDAND , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 202:
#line 774 "ldgram.y"
{ yyval.etree = exp_binop(OROR , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 203:
#line 776 "ldgram.y"
{ yyval.etree = exp_nameop(DEFINED, yyvsp[-1].name); ;
    break;}
case 204:
#line 778 "ldgram.y"
{ yyval.etree = exp_intop(yyvsp[0].integer); ;
    break;}
case 205:
#line 780 "ldgram.y"
{ yyval.etree = exp_nameop(SIZEOF_HEADERS,0); ;
    break;}
case 206:
#line 783 "ldgram.y"
{ yyval.etree = exp_nameop(SIZEOF,yyvsp[-1].name); ;
    break;}
case 207:
#line 785 "ldgram.y"
{ yyval.etree = exp_nameop(ADDR,yyvsp[-1].name); ;
    break;}
case 208:
#line 787 "ldgram.y"
{ yyval.etree = exp_nameop(LOADADDR,yyvsp[-1].name); ;
    break;}
case 209:
#line 789 "ldgram.y"
{ yyval.etree = exp_unop(ABSOLUTE, yyvsp[-1].etree); ;
    break;}
case 210:
#line 791 "ldgram.y"
{ yyval.etree = exp_unop(ALIGN_K,yyvsp[-1].etree); ;
    break;}
case 211:
#line 793 "ldgram.y"
{ yyval.etree = exp_unop(ALIGN_K,yyvsp[-1].etree); ;
    break;}
case 212:
#line 795 "ldgram.y"
{ yyval.etree = exp_nameop(NAME,yyvsp[0].name); ;
    break;}
case 213:
#line 797 "ldgram.y"
{ yyval.etree = exp_binop (MAX_K, yyvsp[-3].etree, yyvsp[-1].etree ); ;
    break;}
case 214:
#line 799 "ldgram.y"
{ yyval.etree = exp_binop (MIN_K, yyvsp[-3].etree, yyvsp[-1].etree ); ;
    break;}
case 215:
#line 801 "ldgram.y"
{ yyval.etree = exp_assert (yyvsp[-3].etree, yyvsp[-1].name); ;
    break;}
case 216:
#line 806 "ldgram.y"
{ yyval.name = yyvsp[0].name; ;
    break;}
case 217:
#line 807 "ldgram.y"
{ yyval.name = "*default*"; ;
    break;}
case 218:
#line 811 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; ;
    break;}
case 219:
#line 812 "ldgram.y"
{ yyval.etree = 0; ;
    break;}
case 220:
#line 815 "ldgram.y"
{ ldlex_expression(); ;
    break;}
case 221:
#line 817 "ldgram.y"
{ ldlex_popstate (); ldlex_script (); ;
    break;}
case 222:
#line 819 "ldgram.y"
{
			  lang_enter_output_section_statement(yyvsp[-5].name, yyvsp[-3].etree,
							      sectype,
							      0, 0, 0, yyvsp[-2].etree);
			;
    break;}
case 223:
#line 825 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); ;
    break;}
case 224:
#line 827 "ldgram.y"
{
		  ldlex_popstate ();
		  lang_leave_output_section_statement (yyvsp[0].integer, yyvsp[-3].name, yyvsp[-1].section_phdr, yyvsp[-2].name);
		;
    break;}
case 226:
#line 833 "ldgram.y"
{ ldlex_expression (); ;
    break;}
case 227:
#line 835 "ldgram.y"
{ ldlex_popstate (); ldlex_script (); ;
    break;}
case 228:
#line 837 "ldgram.y"
{
			  lang_enter_overlay (yyvsp[-4].etree, yyvsp[-2].etree, (int) yyvsp[-3].integer);
			;
    break;}
case 229:
#line 842 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); ;
    break;}
case 230:
#line 844 "ldgram.y"
{
			  ldlex_popstate ();
			  lang_leave_overlay (yyvsp[0].integer, yyvsp[-3].name, yyvsp[-1].section_phdr, yyvsp[-2].name);
			;
    break;}
case 232:
#line 853 "ldgram.y"
{ ldlex_expression (); ;
    break;}
case 233:
#line 855 "ldgram.y"
{
		  ldlex_popstate ();
		  lang_add_assignment (exp_assop ('=', ".", yyvsp[0].etree));
		;
    break;}
case 235:
#line 863 "ldgram.y"
{ sectype = noload_section; ;
    break;}
case 236:
#line 864 "ldgram.y"
{ sectype = dsect_section; ;
    break;}
case 237:
#line 865 "ldgram.y"
{ sectype = copy_section; ;
    break;}
case 238:
#line 866 "ldgram.y"
{ sectype = info_section; ;
    break;}
case 239:
#line 867 "ldgram.y"
{ sectype = overlay_section; ;
    break;}
case 241:
#line 872 "ldgram.y"
{ sectype = normal_section; ;
    break;}
case 242:
#line 873 "ldgram.y"
{ sectype = normal_section; ;
    break;}
case 243:
#line 877 "ldgram.y"
{ yyval.etree = yyvsp[-2].etree; ;
    break;}
case 244:
#line 878 "ldgram.y"
{ yyval.etree = (etree_type *)NULL;  ;
    break;}
case 245:
#line 883 "ldgram.y"
{ yyval.etree = yyvsp[-3].etree; ;
    break;}
case 246:
#line 885 "ldgram.y"
{ yyval.etree = yyvsp[-7].etree; ;
    break;}
case 247:
#line 889 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; ;
    break;}
case 248:
#line 890 "ldgram.y"
{ yyval.etree = (etree_type *) NULL;  ;
    break;}
case 249:
#line 895 "ldgram.y"
{ yyval.integer = 0; ;
    break;}
case 250:
#line 897 "ldgram.y"
{ yyval.integer = 1; ;
    break;}
case 251:
#line 902 "ldgram.y"
{ yyval.name = yyvsp[0].name; ;
    break;}
case 252:
#line 903 "ldgram.y"
{ yyval.name = "*default*"; ;
    break;}
case 253:
#line 908 "ldgram.y"
{
		  yyval.section_phdr = NULL;
		;
    break;}
case 254:
#line 912 "ldgram.y"
{
		  struct lang_output_section_phdr_list *n;

		  n = ((struct lang_output_section_phdr_list *)
		       xmalloc (sizeof *n));
		  n->name = yyvsp[0].name;
		  n->used = false;
		  n->next = yyvsp[-2].section_phdr;
		  yyval.section_phdr = n;
		;
    break;}
case 256:
#line 928 "ldgram.y"
{
			  ldlex_script ();
			  lang_enter_overlay_section (yyvsp[0].name);
			;
    break;}
case 257:
#line 933 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); ;
    break;}
case 258:
#line 935 "ldgram.y"
{
			  ldlex_popstate ();
			  lang_leave_overlay_section (yyvsp[0].integer, yyvsp[-1].section_phdr);
			;
    break;}
case 263:
#line 952 "ldgram.y"
{ ldlex_expression (); ;
    break;}
case 264:
#line 953 "ldgram.y"
{ ldlex_popstate (); ;
    break;}
case 265:
#line 955 "ldgram.y"
{
		  lang_new_phdr (yyvsp[-5].name, yyvsp[-3].etree, yyvsp[-2].phdr.filehdr, yyvsp[-2].phdr.phdrs, yyvsp[-2].phdr.at,
				 yyvsp[-2].phdr.flags);
		;
    break;}
case 266:
#line 963 "ldgram.y"
{
		  yyval.etree = yyvsp[0].etree;

		  if (yyvsp[0].etree->type.node_class == etree_name
		      && yyvsp[0].etree->type.node_code == NAME)
		    {
		      const char *s;
		      unsigned int i;
		      static const char * const phdr_types[] =
			{
			  "PT_NULL", "PT_LOAD", "PT_DYNAMIC",
			  "PT_INTERP", "PT_NOTE", "PT_SHLIB",
			  "PT_PHDR"
			};

		      s = yyvsp[0].etree->name.name;
		      for (i = 0;
			   i < sizeof phdr_types / sizeof phdr_types[0];
			   i++)
			if (strcmp (s, phdr_types[i]) == 0)
			  {
			    yyval.etree = exp_intop (i);
			    break;
			  }
		    }
		;
    break;}
case 267:
#line 993 "ldgram.y"
{
		  memset (&yyval.phdr, 0, sizeof (struct phdr_info));
		;
    break;}
case 268:
#line 997 "ldgram.y"
{
		  yyval.phdr = yyvsp[0].phdr;
		  if (strcmp (yyvsp[-2].name, "FILEHDR") == 0 && yyvsp[-1].etree == NULL)
		    yyval.phdr.filehdr = true;
		  else if (strcmp (yyvsp[-2].name, "PHDRS") == 0 && yyvsp[-1].etree == NULL)
		    yyval.phdr.phdrs = true;
		  else if (strcmp (yyvsp[-2].name, "FLAGS") == 0 && yyvsp[-1].etree != NULL)
		    yyval.phdr.flags = yyvsp[-1].etree;
		  else
		    einfo (_("%X%P:%S: PHDRS syntax error at `%s'\n"), yyvsp[-2].name);
		;
    break;}
case 269:
#line 1009 "ldgram.y"
{
		  yyval.phdr = yyvsp[0].phdr;
		  yyval.phdr.at = yyvsp[-2].etree;
		;
    break;}
case 270:
#line 1017 "ldgram.y"
{
		  yyval.etree = NULL;
		;
    break;}
case 271:
#line 1021 "ldgram.y"
{
		  yyval.etree = yyvsp[-1].etree;
		;
    break;}
case 272:
#line 1029 "ldgram.y"
{
		  ldlex_version_file ();
		  PUSH_ERROR (_("VERSION script"));
		;
    break;}
case 273:
#line 1034 "ldgram.y"
{
		  ldlex_popstate ();
		  POP_ERROR ();
		;
    break;}
case 274:
#line 1043 "ldgram.y"
{
		  ldlex_version_script ();
		;
    break;}
case 275:
#line 1047 "ldgram.y"
{
		  ldlex_popstate ();
		;
    break;}
case 278:
#line 1059 "ldgram.y"
{
		  lang_register_vers_node (yyvsp[-4].name, yyvsp[-2].versnode, NULL);
		;
    break;}
case 279:
#line 1063 "ldgram.y"
{
		  lang_register_vers_node (yyvsp[-5].name, yyvsp[-3].versnode, yyvsp[-1].deflist);
		;
    break;}
case 280:
#line 1070 "ldgram.y"
{
		  yyval.deflist = lang_add_vers_depend (NULL, yyvsp[0].name);
		;
    break;}
case 281:
#line 1074 "ldgram.y"
{
		  yyval.deflist = lang_add_vers_depend (yyvsp[-1].deflist, yyvsp[0].name);
		;
    break;}
case 282:
#line 1081 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (NULL, NULL);
		;
    break;}
case 283:
#line 1085 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-1].versyms, NULL);
		;
    break;}
case 284:
#line 1089 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-1].versyms, NULL);
		;
    break;}
case 285:
#line 1093 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (NULL, yyvsp[-1].versyms);
		;
    break;}
case 286:
#line 1097 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-5].versyms, yyvsp[-1].versyms);
		;
    break;}
case 287:
#line 1104 "ldgram.y"
{
		  yyval.versyms = lang_new_vers_regex (NULL, yyvsp[0].name, ldgram_vers_current_lang);
		;
    break;}
case 288:
#line 1108 "ldgram.y"
{
		  yyval.versyms = lang_new_vers_regex (yyvsp[-2].versyms, yyvsp[0].name, ldgram_vers_current_lang);
		;
    break;}
case 289:
#line 1112 "ldgram.y"
{
			  yyval.name = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = yyvsp[-1].name;
			;
    break;}
case 290:
#line 1117 "ldgram.y"
{
			  yyval.versyms = yyvsp[-1].versyms;
			  ldgram_vers_current_lang = yyvsp[-2].name;
			;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/misc/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1123 "ldgram.y"

void
yyerror(arg) 
     const char *arg;
{ 
  if (ldfile_assumed_script)
    einfo (_("%P:%s: file format not recognized; treating as linker script\n"),
	   ldfile_input_filename);
  if (error_index > 0 && error_index < ERROR_NAME_MAX)
     einfo ("%P%F:%S: %s in %s\n", arg, error_names[error_index-1]);
  else
     einfo ("%P%F:%S: %s\n", arg);
}
@


1.1.4.2
log
@update generated files
@
text
@d923 1
a923 1
#line 3 "/usr/share/bison/bison.simple"
d1137 1
a1137 1
#line 217 "/usr/share/bison/bison.simple"
d2576 1
a2576 1
#line 543 "/usr/share/bison/bison.simple"
@


1.1.2.1
log
@Add generated files.
@
text
@a0 2808

/*  A Bison parser, made from ldgram.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	INT	257
#define	NAME	258
#define	LNAME	259
#define	PLUSEQ	260
#define	MINUSEQ	261
#define	MULTEQ	262
#define	DIVEQ	263
#define	LSHIFTEQ	264
#define	RSHIFTEQ	265
#define	ANDEQ	266
#define	OREQ	267
#define	OROR	268
#define	ANDAND	269
#define	EQ	270
#define	NE	271
#define	LE	272
#define	GE	273
#define	LSHIFT	274
#define	RSHIFT	275
#define	UNARY	276
#define	END	277
#define	ALIGN_K	278
#define	BLOCK	279
#define	BIND	280
#define	QUAD	281
#define	SQUAD	282
#define	LONG	283
#define	SHORT	284
#define	BYTE	285
#define	SECTIONS	286
#define	PHDRS	287
#define	SORT	288
#define	SIZEOF_HEADERS	289
#define	OUTPUT_FORMAT	290
#define	FORCE_COMMON_ALLOCATION	291
#define	OUTPUT_ARCH	292
#define	INCLUDE	293
#define	MEMORY	294
#define	DEFSYMEND	295
#define	NOLOAD	296
#define	DSECT	297
#define	COPY	298
#define	INFO	299
#define	OVERLAY	300
#define	DEFINED	301
#define	TARGET_K	302
#define	SEARCH_DIR	303
#define	MAP	304
#define	ENTRY	305
#define	NEXT	306
#define	SIZEOF	307
#define	ADDR	308
#define	LOADADDR	309
#define	MAX_K	310
#define	MIN_K	311
#define	STARTUP	312
#define	HLL	313
#define	SYSLIB	314
#define	FLOAT	315
#define	NOFLOAT	316
#define	NOCROSSREFS	317
#define	ORIGIN	318
#define	FILL	319
#define	LENGTH	320
#define	CREATE_OBJECT_SYMBOLS	321
#define	INPUT	322
#define	GROUP	323
#define	OUTPUT	324
#define	CONSTRUCTORS	325
#define	ALIGNMOD	326
#define	AT	327
#define	PROVIDE	328
#define	CHIP	329
#define	LIST	330
#define	SECT	331
#define	ABSOLUTE	332
#define	LOAD	333
#define	NEWLINE	334
#define	ENDWORD	335
#define	ORDER	336
#define	NAMEWORD	337
#define	ASSERT_K	338
#define	FORMAT	339
#define	PUBLIC	340
#define	BASE	341
#define	ALIAS	342
#define	TRUNCATE	343
#define	REL	344
#define	INPUT_SCRIPT	345
#define	INPUT_MRI_SCRIPT	346
#define	INPUT_DEFSYM	347
#define	CASE	348
#define	EXTERN	349
#define	START	350
#define	VERS_TAG	351
#define	VERS_IDENTIFIER	352
#define	GLOBAL	353
#define	LOCAL	354
#define	VERSIONK	355
#define	INPUT_VERSION_SCRIPT	356
#define	KEEP	357
#define	EXCLUDE_FILE	358

#line 22 "ldgram.y"

/*

 */

#define DONTDECLARE_MALLOC

#include "bfd.h"
#include "sysdep.h"
#include "bfdlink.h"
#include "ld.h"    
#include "ldexp.h"
#include "ldver.h"
#include "ldlang.h"
#include "ldemul.h"
#include "ldfile.h"
#include "ldmisc.h"
#include "ldmain.h"
#include "mri.h"
#include "ldctor.h"
#include "ldlex.h"

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

static enum section_type sectype;

lang_memory_region_type *region;

struct wildcard_spec current_file;
boolean ldgram_want_filename = true;
boolean had_script = false;
boolean force_make_executable = false;

boolean ldgram_in_script = false;
boolean ldgram_had_equals = false;
boolean ldgram_had_keep = false;
char *ldgram_vers_current_lang = NULL;

#define ERROR_NAME_MAX 20
static char *error_names[ERROR_NAME_MAX];
static int error_index;
#define PUSH_ERROR(x) if (error_index < ERROR_NAME_MAX) error_names[error_index] = x; error_index++;
#define POP_ERROR()   error_index--;

#line 68 "ldgram.y"
typedef union {
  bfd_vma integer;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      boolean filehdr;
      boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		589
#define	YYFLAG		-32768
#define	YYNTBASE	128

#define YYTRANSLATE(x) ((unsigned)(x) <= 358 ? yytranslate[x] : 233)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   126,     2,     2,     2,    34,    21,     2,    37,
   123,    32,    30,   121,    31,     2,    33,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    16,   122,    24,
    10,    25,    15,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   124,     2,   125,    20,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    49,    19,    50,   127,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    11,    12,    13,    14,    17,    18,    22,
    23,    26,    27,    28,    29,    35,    36,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     6,     9,    12,    14,    15,    20,    21,    24,
    28,    29,    32,    37,    39,    41,    44,    46,    51,    56,
    60,    63,    68,    72,    77,    82,    87,    92,    97,   100,
   103,   106,   111,   116,   119,   122,   125,   128,   129,   135,
   138,   139,   143,   146,   147,   149,   153,   155,   159,   160,
   162,   166,   168,   171,   175,   176,   179,   182,   183,   185,
   187,   189,   191,   193,   195,   197,   199,   201,   203,   208,
   213,   218,   223,   232,   237,   239,   244,   245,   251,   256,
   257,   263,   268,   273,   275,   279,   282,   284,   288,   291,
   296,   299,   302,   303,   308,   311,   313,   315,   317,   319,
   325,   330,   339,   342,   344,   346,   350,   352,   353,   358,
   359,   365,   367,   368,   374,   377,   379,   381,   383,   388,
   390,   395,   400,   403,   405,   406,   408,   410,   412,   414,
   416,   418,   421,   422,   424,   426,   428,   430,   432,   434,
   436,   438,   440,   442,   446,   450,   457,   459,   460,   466,
   469,   473,   474,   475,   483,   487,   491,   492,   496,   498,
   501,   503,   506,   511,   516,   520,   524,   526,   531,   535,
   536,   538,   540,   541,   544,   548,   549,   552,   555,   559,
   564,   567,   570,   573,   577,   581,   585,   589,   593,   597,
   601,   605,   609,   613,   617,   621,   625,   629,   633,   637,
   643,   647,   651,   656,   658,   660,   665,   670,   675,   680,
   685,   690,   692,   699,   706,   713,   717,   718,   723,   724,
   725,   726,   727,   728,   729,   746,   747,   748,   749,   750,
   751,   769,   770,   771,   779,   781,   783,   785,   787,   789,
   793,   794,   797,   801,   804,   811,   822,   825,   827,   828,
   830,   833,   834,   835,   839,   840,   841,   842,   843,   855,
   860,   861,   864,   865,   866,   873,   875,   876,   880,   886,
   887,   891,   892,   895,   896,   902,   904,   907,   913,   920,
   922,   925,   926,   929,   934,   939,   948,   950,   954,   955
};

static const short yyrhs[] = {   107,
   142,     0,   108,   132,     0,   118,   223,     0,   109,   130,
     0,     4,     0,     0,   131,     4,    10,   188,     0,     0,
   133,   134,     0,   134,   135,    96,     0,     0,    91,   188,
     0,    91,   188,   121,   188,     0,     4,     0,    92,     0,
    98,   137,     0,    97,     0,   102,     4,    10,   188,     0,
   102,     4,   121,   188,     0,   102,     4,   188,     0,   101,
     4,     0,    93,     4,   121,   188,     0,    93,     4,   188,
     0,    93,     4,    10,   188,     0,    38,     4,    10,   188,
     0,    38,     4,   121,   188,     0,    88,     4,    10,   188,
     0,    88,     4,   121,   188,     0,    94,   139,     0,    95,
   138,     0,    99,     4,     0,   104,     4,   121,     4,     0,
   104,     4,   121,     3,     0,   103,   188,     0,   105,     3,
     0,   110,   140,     0,   111,   141,     0,     0,    55,   129,
   136,   134,    36,     0,   112,     4,     0,     0,   137,   121,
     4,     0,   137,     4,     0,     0,     4,     0,   138,   121,
     4,     0,     4,     0,   139,   121,     4,     0,     0,     4,
     0,   140,   121,     4,     0,     4,     0,   141,     4,     0,
   141,   121,     4,     0,     0,   143,   144,     0,   144,   145,
     0,     0,   170,     0,   149,     0,   215,     0,   179,     0,
   180,     0,   182,     0,   184,     0,   151,     0,   225,     0,
   122,     0,    64,    37,     4,   123,     0,    65,    37,   129,
   123,     0,    86,    37,   129,   123,     0,    52,    37,     4,
   123,     0,    52,    37,     4,   121,     4,   121,     4,   123,
     0,    54,    37,     4,   123,     0,    53,     0,    84,    37,
   148,   123,     0,     0,    85,   146,    37,   148,   123,     0,
    66,    37,   129,   123,     0,     0,    55,   129,   147,   144,
    36,     0,    79,    37,   185,   123,     0,   111,    37,   141,
   123,     0,     4,     0,   148,   121,     4,     0,   148,     4,
     0,     5,     0,   148,   121,     5,     0,   148,     5,     0,
    46,    49,   150,    50,     0,   150,   191,     0,   150,   151,
     0,     0,    67,    37,     4,   123,     0,   168,   167,     0,
     4,     0,    32,     0,    15,     0,   152,     0,   120,    37,
   154,   123,   152,     0,    48,    37,   152,   123,     0,    48,
    37,   120,    37,   154,   123,   152,   123,     0,   154,   152,
     0,   152,     0,   153,     0,   155,   169,   153,     0,     4,
     0,     0,   124,   157,   155,   125,     0,     0,   153,   158,
    37,   155,   123,     0,   156,     0,     0,   119,    37,   160,
   156,   123,     0,   168,   167,     0,    83,     0,   122,     0,
    87,     0,    48,    37,    87,   123,     0,   159,     0,   164,
    37,   186,   123,     0,    81,    37,   186,   123,     0,   162,
   161,     0,   161,     0,     0,   162,     0,    41,     0,    42,
     0,    43,     0,    44,     0,    45,     0,    10,   186,     0,
     0,     6,     0,     7,     0,     8,     0,     9,     0,    11,
     0,    12,     0,    13,     0,    14,     0,   122,     0,   121,
     0,     4,    10,   186,     0,     4,   166,   186,     0,    90,
    37,     4,    10,   186,   123,     0,   121,     0,     0,    56,
    49,   172,   171,    50,     0,   171,   172,     0,   171,   121,
   172,     0,     0,     0,     4,   173,   176,    16,   174,   169,
   175,     0,    80,    10,   186,     0,    82,    10,   186,     0,
     0,    37,   177,   123,     0,   178,     0,   177,   178,     0,
     4,     0,   126,     4,     0,    74,    37,   129,   123,     0,
    75,    37,   181,   123,     0,    75,    37,   123,     0,   181,
   169,   129,     0,   129,     0,    76,    37,   183,   123,     0,
   183,   169,   129,     0,     0,    77,     0,    78,     0,     0,
     4,   185,     0,     4,   121,   185,     0,     0,   187,   188,
     0,    31,   188,     0,    37,   188,   123,     0,    68,    37,
   188,   123,     0,   126,   188,     0,    30,   188,     0,   127,
   188,     0,   188,    32,   188,     0,   188,    33,   188,     0,
   188,    34,   188,     0,   188,    30,   188,     0,   188,    31,
   188,     0,   188,    28,   188,     0,   188,    29,   188,     0,
   188,    22,   188,     0,   188,    23,   188,     0,   188,    26,
   188,     0,   188,    27,   188,     0,   188,    24,   188,     0,
   188,    25,   188,     0,   188,    21,   188,     0,   188,    20,
   188,     0,   188,    19,   188,     0,   188,    15,   188,    16,
   188,     0,   188,    18,   188,     0,   188,    17,   188,     0,
    63,    37,     4,   123,     0,     3,     0,    51,     0,    69,
    37,     4,   123,     0,    70,    37,     4,   123,     0,    71,
    37,     4,   123,     0,    94,    37,   188,   123,     0,    38,
    37,   188,   123,     0,    39,    37,   188,   123,     0,     4,
     0,    72,    37,   188,   121,   188,   123,     0,    73,    37,
   188,   121,   188,   123,     0,   100,    37,   188,   121,     4,
   123,     0,    89,    25,     4,     0,     0,    89,    37,   188,
   123,     0,     0,     0,     0,     0,     0,     0,     4,   192,
   206,   190,   193,    49,   194,   163,    50,   195,   209,   189,
   210,   165,   196,   169,     0,     0,     0,     0,     0,     0,
    62,   197,   207,   208,   190,   198,    49,   199,   211,    50,
   200,   209,   189,   210,   165,   201,   169,     0,     0,     0,
    85,   202,   206,   203,    49,   150,    50,     0,    58,     0,
    59,     0,    60,     0,    61,     0,    62,     0,    37,   204,
   123,     0,     0,    37,   123,     0,   188,   205,    16,     0,
   205,    16,     0,    40,    37,   188,   123,   205,    16,     0,
    40,    37,   188,   123,    39,    37,   188,   123,   205,    16,
     0,   188,    16,     0,    16,     0,     0,    79,     0,    25,
     4,     0,     0,     0,   210,    16,     4,     0,     0,     0,
     0,     0,   211,     4,   212,    49,   163,    50,   213,   210,
   165,   214,   169,     0,    47,    49,   216,    50,     0,     0,
   216,   217,     0,     0,     0,     4,   218,   220,   221,   219,
   122,     0,   188,     0,     0,     4,   222,   221,     0,    89,
    37,   188,   123,   221,     0,     0,    37,   188,   123,     0,
     0,   224,   227,     0,     0,   226,   117,    49,   227,    50,
     0,   228,     0,   227,   228,     0,   113,    49,   230,    50,
   122,     0,   113,    49,   230,    50,   229,   122,     0,   113,
     0,   229,   113,     0,     0,   231,   122,     0,   115,    16,
   231,   122,     0,   116,    16,   231,   122,     0,   115,    16,
   231,   122,   116,    16,   231,   122,     0,   114,     0,   231,
   122,   114,     0,     0,   111,     4,    49,   232,   231,    50,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   153,   155,   156,   157,   161,   164,   166,   173,   179,   186,
   188,   191,   193,   194,   197,   200,   201,   202,   204,   206,
   208,   210,   212,   214,   216,   218,   220,   222,   224,   225,
   226,   228,   230,   232,   234,   236,   237,   238,   239,   240,
   242,   245,   247,   248,   251,   254,   257,   260,   264,   266,
   267,   270,   273,   275,   279,   284,   290,   292,   297,   299,
   300,   301,   302,   303,   304,   305,   306,   307,   308,   310,
   312,   314,   317,   319,   321,   323,   324,   326,   328,   330,
   331,   332,   336,   339,   343,   346,   349,   352,   355,   360,
   364,   366,   367,   370,   373,   378,   383,   387,   393,   400,
   406,   412,   422,   431,   442,   450,   459,   465,   470,   471,
   478,   481,   483,   485,   489,   491,   495,   496,   501,   506,
   507,   512,   522,   524,   527,   529,   532,   535,   537,   539,
   541,   545,   553,   558,   561,   563,   565,   567,   569,   571,
   573,   578,   578,   582,   587,   595,   602,   603,   606,   610,
   612,   613,   617,   619,   622,   630,   639,   642,   645,   647,
   650,   653,   657,   662,   664,   668,   671,   676,   678,   681,
   684,   687,   691,   696,   705,   716,   718,   721,   724,   726,
   728,   730,   732,   735,   737,   739,   741,   743,   745,   747,
   749,   751,   753,   755,   757,   759,   761,   763,   765,   767,
   769,   771,   773,   775,   777,   780,   782,   784,   786,   788,
   790,   792,   794,   796,   798,   803,   805,   808,   810,   813,
   815,   817,   823,   824,   830,   830,   832,   835,   839,   841,
   847,   847,   853,   857,   860,   862,   863,   864,   865,   868,
   870,   871,   874,   876,   877,   882,   886,   888,   891,   894,
   898,   901,   904,   909,   922,   924,   930,   932,   938,   940,
   944,   946,   949,   951,   953,   959,   989,   994,  1006,  1013,
  1018,  1026,  1032,  1040,  1044,  1050,  1052,  1055,  1060,  1066,
  1071,  1077,  1082,  1086,  1090,  1094,  1100,  1105,  1109,  1114
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","INT","NAME",
"LNAME","PLUSEQ","MINUSEQ","MULTEQ","DIVEQ","'='","LSHIFTEQ","RSHIFTEQ","ANDEQ",
"OREQ","'?'","':'","OROR","ANDAND","'|'","'^'","'&'","EQ","NE","'<'","'>'","LE",
"GE","LSHIFT","RSHIFT","'+'","'-'","'*'","'/'","'%'","UNARY","END","'('","ALIGN_K",
"BLOCK","BIND","QUAD","SQUAD","LONG","SHORT","BYTE","SECTIONS","PHDRS","SORT",
"'{'","'}'","SIZEOF_HEADERS","OUTPUT_FORMAT","FORCE_COMMON_ALLOCATION","OUTPUT_ARCH",
"INCLUDE","MEMORY","DEFSYMEND","NOLOAD","DSECT","COPY","INFO","OVERLAY","DEFINED",
"TARGET_K","SEARCH_DIR","MAP","ENTRY","NEXT","SIZEOF","ADDR","LOADADDR","MAX_K",
"MIN_K","STARTUP","HLL","SYSLIB","FLOAT","NOFLOAT","NOCROSSREFS","ORIGIN","FILL",
"LENGTH","CREATE_OBJECT_SYMBOLS","INPUT","GROUP","OUTPUT","CONSTRUCTORS","ALIGNMOD",
"AT","PROVIDE","CHIP","LIST","SECT","ABSOLUTE","LOAD","NEWLINE","ENDWORD","ORDER",
"NAMEWORD","ASSERT_K","FORMAT","PUBLIC","BASE","ALIAS","TRUNCATE","REL","INPUT_SCRIPT",
"INPUT_MRI_SCRIPT","INPUT_DEFSYM","CASE","EXTERN","START","VERS_TAG","VERS_IDENTIFIER",
"GLOBAL","LOCAL","VERSIONK","INPUT_VERSION_SCRIPT","KEEP","EXCLUDE_FILE","','",
"';'","')'","'['","']'","'!'","'~'","file","filename","defsym_expr","@@1","mri_script_file",
"@@2","mri_script_lines","mri_script_command","@@3","ordernamelist","mri_load_name_list",
"mri_abs_name_list","casesymlist","extern_name_list","script_file","@@4","ifile_list",
"ifile_p1","@@5","@@6","input_list","sections","sec_or_group_p1","statement_anywhere",
"wildcard_name","wildcard_spec","exclude_name_list","file_NAME_list","input_section_spec_no_keep",
"@@7","@@8","input_section_spec","@@9","statement","statement_list","statement_list_opt",
"length","fill_opt","assign_op","end","assignment","opt_comma","memory","memory_spec_list",
"memory_spec","@@10","origin_spec","length_spec","attributes_opt","attributes_list",
"attributes_string","startup","high_level_library","high_level_library_NAME_list",
"low_level_library","low_level_library_NAME_list","floating_point_support","nocrossref_list",
"mustbe_exp","@@11","exp","memspec_at_opt","opt_at","section","@@12","@@13","@@14",
"@@15","@@16","@@17","@@18","@@19","@@20","@@21","@@22","@@23","type","atype","opt_exp_with_type",
"opt_exp_without_type","opt_nocrossrefs","memspec_opt","phdr_opt","overlay_section",
"@@24","@@25","@@26","phdrs","phdr_list","phdr","@@27","@@28","phdr_type","phdr_qualifiers",
"phdr_val","version_script_file","@@29","version","@@30","vers_nodes","vers_node",
"verdep","vers_tag","vers_defns","@@31", NULL
};
#endif

static const short yyr1[] = {     0,
   128,   128,   128,   128,   129,   131,   130,   133,   132,   134,
   134,   135,   135,   135,   135,   135,   135,   135,   135,   135,
   135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
   135,   135,   135,   135,   135,   135,   135,   136,   135,   135,
   135,   137,   137,   137,   138,   138,   139,   139,   140,   140,
   140,   141,   141,   141,   143,   142,   144,   144,   145,   145,
   145,   145,   145,   145,   145,   145,   145,   145,   145,   145,
   145,   145,   145,   145,   145,   145,   146,   145,   145,   147,
   145,   145,   145,   148,   148,   148,   148,   148,   148,   149,
   150,   150,   150,   151,   151,   152,   152,   152,   153,   153,
   153,   153,   154,   154,   155,   155,   156,   157,   156,   158,
   156,   159,   160,   159,   161,   161,   161,   161,   161,   161,
   161,   161,   162,   162,   163,   163,   164,   164,   164,   164,
   164,   165,   165,   166,   166,   166,   166,   166,   166,   166,
   166,   167,   167,   168,   168,   168,   169,   169,   170,   171,
   171,   171,   173,   172,   174,   175,   176,   176,   177,   177,
   178,   178,   179,   180,   180,   181,   181,   182,   183,   183,
   184,   184,   185,   185,   185,   187,   186,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   189,   189,   190,   190,   192,
   193,   194,   195,   196,   191,   197,   198,   199,   200,   201,
   191,   202,   203,   191,   204,   204,   204,   204,   204,   205,
   205,   205,   206,   206,   206,   206,   207,   207,   208,   208,
   209,   209,   210,   210,   211,   212,   213,   214,   211,   215,
   216,   216,   218,   219,   217,   220,   221,   221,   221,   222,
   222,   224,   223,   226,   225,   227,   227,   228,   228,   229,
   229,   230,   230,   230,   230,   230,   231,   231,   232,   231
};

static const short yyr2[] = {     0,
     2,     2,     2,     2,     1,     0,     4,     0,     2,     3,
     0,     2,     4,     1,     1,     2,     1,     4,     4,     3,
     2,     4,     3,     4,     4,     4,     4,     4,     2,     2,
     2,     4,     4,     2,     2,     2,     2,     0,     5,     2,
     0,     3,     2,     0,     1,     3,     1,     3,     0,     1,
     3,     1,     2,     3,     0,     2,     2,     0,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     4,     4,
     4,     4,     8,     4,     1,     4,     0,     5,     4,     0,
     5,     4,     4,     1,     3,     2,     1,     3,     2,     4,
     2,     2,     0,     4,     2,     1,     1,     1,     1,     5,
     4,     8,     2,     1,     1,     3,     1,     0,     4,     0,
     5,     1,     0,     5,     2,     1,     1,     1,     4,     1,
     4,     4,     2,     1,     0,     1,     1,     1,     1,     1,
     1,     2,     0,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     3,     3,     6,     1,     0,     5,     2,
     3,     0,     0,     7,     3,     3,     0,     3,     1,     2,
     1,     2,     4,     4,     3,     3,     1,     4,     3,     0,
     1,     1,     0,     2,     3,     0,     2,     2,     3,     4,
     2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
     3,     3,     4,     1,     1,     4,     4,     4,     4,     4,
     4,     1,     6,     6,     6,     3,     0,     4,     0,     0,
     0,     0,     0,     0,    16,     0,     0,     0,     0,     0,
    17,     0,     0,     7,     1,     1,     1,     1,     1,     3,
     0,     2,     3,     2,     6,    10,     2,     1,     0,     1,
     2,     0,     0,     3,     0,     0,     0,     0,    11,     4,
     0,     2,     0,     0,     6,     1,     0,     3,     5,     0,
     3,     0,     2,     0,     5,     1,     2,     5,     6,     1,
     2,     0,     2,     4,     4,     8,     1,     3,     0,     6
};

static const short yydefact[] = {     0,
    55,     8,     6,   272,     1,    58,     2,    11,     4,     0,
     3,     0,    56,     9,     0,     0,   273,   276,     0,     0,
     0,     0,    75,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   171,   172,     0,     0,    77,     0,     0,
     0,    68,    57,    60,    66,     0,    59,    62,    63,    64,
    65,    61,    67,     0,    14,     0,     0,     0,     0,    15,
     0,     0,     0,    17,    44,     0,     0,     0,     0,     0,
     0,    49,     0,     0,     0,     0,   282,   277,   134,   135,
   136,   137,   176,   138,   139,   140,   141,   176,    93,   261,
     0,     0,     5,    80,     0,     0,     0,     0,     0,     0,
     0,   170,   173,     0,     0,     0,     0,     0,   143,   142,
    95,     0,     0,    38,     0,   204,   212,     0,     0,     0,
     0,     0,   205,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    12,     0,    47,    29,    45,    30,
    16,    31,    21,     0,    34,     0,    35,    50,    36,    52,
    37,    40,    10,     7,     0,   287,     0,     0,     0,     0,
   144,     0,   145,     0,     0,     0,     0,    58,   153,   152,
     0,     0,     0,     0,     0,   165,   167,   148,   148,   173,
     0,    84,    87,     0,     0,     0,     0,     0,     0,     0,
     0,    11,     0,     0,   182,   178,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   181,   183,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    23,     0,     0,    43,     0,     0,     0,    20,
     0,     0,    53,     0,     0,     0,     0,     0,   283,   177,
   220,    90,   226,   232,    92,    91,   263,   260,   262,     0,
    72,    74,   274,   157,     0,    69,    70,    79,    94,   163,
   147,   164,     0,   168,     0,   173,   174,    82,    86,    89,
     0,    76,     0,    71,   176,    83,     0,    25,    26,    41,
    27,    28,   179,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   202,   201,   199,   198,   197,
   191,   192,   195,   196,   193,   194,   189,   190,   187,   188,
   184,   185,   186,    13,    24,    22,    48,    46,    42,    18,
    19,    33,    32,    51,    54,   289,     0,     0,   280,   278,
     0,   288,   241,     0,   241,     0,     0,    81,     0,     0,
   149,     0,   150,   166,   169,   175,    85,    88,    78,     0,
   275,    39,   210,   211,   203,   180,   206,   207,   208,     0,
     0,   209,     0,     0,     0,   284,   285,   281,   279,     0,
     0,   241,     0,   219,   248,     0,   249,   233,   266,   267,
     0,   161,     0,     0,   159,     0,   151,   146,     0,     0,
     0,   200,     0,     0,   235,   236,   237,   238,   239,   242,
     0,     0,     0,     0,   244,     0,   221,   247,   250,   219,
     0,   270,     0,   264,     0,   162,   158,   160,     0,   148,
   213,   214,   215,   290,     0,     0,   240,     0,   243,     0,
     0,   227,    93,     0,   267,     0,     0,    73,   176,     0,
     0,   241,     0,   222,     0,     0,     0,   268,     0,   265,
   155,     0,   154,   286,     0,     0,   218,   125,   228,   234,
   271,   267,   176,     0,   245,   107,    98,    97,   127,   128,
   129,   130,   131,     0,     0,   116,   118,     0,     0,   117,
   108,    99,   110,   112,   120,   124,   126,     0,     0,     0,
   255,   269,   156,     0,     0,   176,   113,     0,     0,     0,
   123,   223,   176,   115,     0,   241,    96,     0,     0,     0,
     0,     0,   104,     0,     0,   105,   148,     0,   252,     0,
   256,   229,     0,   119,     0,   101,   122,    96,     0,     0,
   103,     0,   109,     0,   148,     0,   217,   121,     0,   252,
   246,     0,   114,   100,   106,   111,   251,     0,   253,   125,
   217,     0,     0,   133,     0,   253,     0,   216,   176,     0,
   224,   257,   133,   102,   132,   254,   148,   253,   230,   225,
   133,   148,   258,   231,   148,   259,     0,     0,     0
};

static const short yydefgoto[] = {   587,
    94,     9,    10,     7,     8,    14,    75,   192,   141,   140,
   138,   149,   151,     5,     6,    13,    43,   105,   168,   184,
    44,   164,    45,   492,   493,   524,   527,   494,   509,   510,
   495,   522,   496,   497,   498,   499,   571,    88,   111,    46,
   544,    47,   265,   170,   264,   430,   463,   350,   394,   395,
    48,    49,   178,    50,   179,    51,   181,   161,   162,   197,
   559,   417,   256,   343,   441,   468,   529,   577,   344,   455,
   501,   550,   582,   345,   421,   411,   383,   384,   387,   420,
   547,   564,   515,   549,   578,   585,    52,   165,   259,   346,
   447,   390,   424,   445,    11,    12,    53,    54,    17,    18,
   341,   159,   160,   375
};

static const short yypact[] = {   -66,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    23,
-32768,   -73,   585,   695,    53,    -4,   -73,-32768,  1276,    40,
    63,   115,-32768,   140,   179,   143,   158,   184,   191,   215,
   224,   226,   227,-32768,-32768,   228,   230,-32768,   231,   233,
   234,-32768,-32768,-32768,-32768,    -3,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   156,-32768,   270,   179,   272,   491,-32768,
   273,   274,   275,-32768,-32768,   276,   277,   280,   491,   288,
   290,   293,   296,   297,   198,   491,    85,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   298,   300,-32768,-32768,   301,   302,   179,   179,   303,   179,
    15,-32768,   304,   118,   281,   179,   305,   296,-32768,-32768,
-32768,   261,     6,-32768,     7,-32768,-32768,   491,   491,   491,
   282,   289,-32768,   291,   294,   295,   310,   311,   312,   313,
   314,   316,   491,   491,  1032,   252,-32768,   190,-32768,   196,
    10,-32768,-32768,   326,  1137,   206,-32768,-32768,   212,-32768,
    24,-32768,-32768,  1137,   330,-32768,   319,   339,   264,   236,
-32768,   491,-32768,    31,    29,   -20,   237,-32768,-32768,-32768,
   239,   243,   244,   246,   247,-32768,-32768,    -6,    65,    30,
   248,-32768,-32768,    61,   118,   249,   349,    68,   -73,   491,
   491,-32768,   491,   491,-32768,-32768,   581,   491,   491,   370,
   491,   371,   372,   376,   491,   491,   491,   491,-32768,-32768,
   491,   491,   491,   491,   491,   491,   491,   491,   491,   491,
   491,   491,   491,   491,   491,   491,   491,   491,   491,   491,
   491,   491,  1137,   377,   379,-32768,   380,   491,   491,  1137,
   254,   383,-32768,   386,   342,    -1,    -1,   -55,   278,  1137,
  1276,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   389,
-32768,-32768,   662,   363,     9,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   179,-32768,   179,   304,-32768,-32768,-32768,-32768,
   255,-32768,    64,-32768,-32768,-32768,   -21,  1137,  1137,   720,
  1137,  1137,-32768,   659,   818,   284,   838,   285,   287,   292,
  1052,  1072,   858,  1092,  1199,  1156,  1175,  1234,   738,  1247,
   549,   549,   186,   186,   186,   186,   216,   216,   193,   193,
-32768,-32768,-32768,  1137,  1137,  1137,-32768,-32768,-32768,  1137,
  1137,-32768,-32768,-32768,-32768,-32768,   283,   299,-32768,-32768,
   -39,-32768,   399,   445,   399,   491,   306,-32768,     8,   388,
-32768,   301,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   308,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   491,
   491,-32768,   407,   491,    -1,   122,   278,-32768,-32768,   172,
   375,  1112,   397,   325,-32768,  1219,   338,-32768,  1137,    20,
   415,-32768,   418,     3,-32768,   343,-32768,-32768,   878,   898,
   309,  1137,   -27,   408,-32768,-32768,-32768,-32768,-32768,-32768,
   317,   491,   146,   412,-32768,   396,-32768,-32768,-32768,   325,
   385,   398,   404,-32768,   320,-32768,-32768,-32768,   432,   323,
-32768,-32768,-32768,-32768,   278,    -1,-32768,   925,-32768,   491,
   402,-32768,-32768,   491,    20,   491,   324,-32768,-32768,   374,
   332,   200,   945,-32768,   410,    35,   965,-32768,   985,-32768,
-32768,   435,-32768,   278,   420,   444,-32768,   505,-32768,-32768,
-32768,    20,-32768,   491,-32768,   331,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   426,   427,-32768,-32768,   428,   429,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   505,   423,   440,    -3,
-32768,-32768,-32768,  1005,    92,-32768,-32768,    21,    58,   441,
-32768,-32768,-32768,-32768,    34,   442,-32768,   357,   449,   364,
   365,    22,-32768,    16,   452,-32768,   -34,    58,   466,   378,
-32768,-32768,   481,-32768,    21,-32768,-32768,   381,   382,    21,
-32768,    73,-32768,    58,   130,   494,   411,-32768,   454,   466,
-32768,    67,-32768,-32768,-32768,-32768,-32768,   482,-32768,   505,
   411,    21,   502,    84,   460,-32768,   400,-32768,-32768,   507,
-32768,-32768,    84,-32768,-32768,-32768,   323,-32768,-32768,-32768,
    84,   323,-32768,-32768,   323,-32768,   519,   524,-32768
};

static const short yypgoto[] = {-32768,
   -51,-32768,-32768,-32768,-32768,   335,-32768,-32768,-32768,-32768,
-32768,-32768,   424,-32768,-32768,   366,-32768,-32768,-32768,   346,
-32768,    90,  -160,   -50,  -315,     0,    12,    14,-32768,-32768,
-32768,-32768,    41,-32768,   -19,-32768,  -517,-32768,    43,  -446,
  -176,-32768,-32768,  -244,-32768,-32768,-32768,-32768,-32768,   150,
-32768,-32768,-32768,-32768,-32768,-32768,  -165,   -88,-32768,   -58,
   -10,   132,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -372,   210,-32768,-32768,
    17,  -534,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  -415,-32768,-32768,-32768,-32768,-32768,   367,   -12,
-32768,-32768,  -238,-32768
};


#define	YYLAST		1290


static const short yytable[] = {   163,
   135,   273,   275,   255,    78,   114,   392,   337,   338,   414,
   145,   392,   169,   236,   277,   190,   193,   154,    93,   517,
   353,   500,   434,   422,   517,   538,    15,   243,   361,   458,
   477,   573,   257,   180,   251,   477,   477,   531,   251,    16,
     1,     2,     3,   581,    77,   172,   173,   478,   175,   177,
   500,     4,   478,   478,   186,   579,   502,   339,   351,   195,
   196,   517,    76,   583,   279,   280,   340,   279,   280,   525,
   517,   243,   477,   378,   209,   210,   517,   233,   258,   466,
   252,   477,   379,   532,   470,   240,   271,   477,    89,   478,
   543,    16,   253,   569,   435,   517,   253,    30,   478,   570,
   260,    30,   261,   250,   478,   525,   477,   397,   423,   155,
   356,    90,   156,   500,   271,   254,   272,   109,   110,   254,
    40,   182,   183,   478,    40,   427,   191,   194,   393,   352,
   237,   288,   289,   393,   291,   292,   403,   176,   540,   294,
   295,   489,   297,   533,   244,   491,   301,   302,   303,   304,
   276,    91,   305,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   116,   117,    92,   489,   518,   330,
   331,   281,    93,   282,   281,   271,   359,   274,   244,   562,
   286,    95,   519,   526,    96,   155,   360,   451,   156,   157,
   158,   118,   119,   405,   406,   407,   408,   409,   120,   121,
   122,   519,   526,   223,   224,   225,   226,   227,   228,   229,
    97,   354,   123,   355,   227,   228,   229,    98,   555,   405,
   406,   407,   408,   409,   124,   342,   413,   404,   465,   125,
   126,   127,   128,   129,   130,   225,   226,   227,   228,   229,
   271,    99,   556,   450,   116,   117,   332,   333,   357,   358,
   100,   231,   101,   102,   103,   131,   104,   106,   410,   107,
   108,   132,   112,   113,    78,   115,   136,   137,   139,   142,
   143,   118,   119,   144,   382,   386,   382,   389,   120,   121,
   122,   146,   147,   153,   410,   255,   148,   133,   134,   150,
   152,   166,   123,   167,   169,   171,   174,   180,   187,   189,
   234,   399,   400,   248,   124,   402,   235,   185,   198,   125,
   126,   127,   128,   129,   130,   199,   241,   200,   116,   117,
   201,   202,   242,   245,   246,   238,    79,    80,    81,    82,
    83,    84,    85,    86,    87,   131,   203,   204,   205,   206,
   207,   132,   208,   438,   247,   118,   119,   249,   285,   262,
   461,   266,   120,   121,   122,   267,   268,   -96,   269,   270,
   278,   284,   232,   296,   298,   299,   123,   133,   134,   300,
   327,   453,   328,   329,   503,   457,   334,   459,   124,   335,
   336,   342,   347,   125,   126,   127,   128,   129,   130,   349,
   580,   116,   117,   396,   376,   584,   365,   367,   586,   368,
   401,   412,   415,   416,   369,   504,   419,   521,   425,   131,
   377,   426,   429,   436,   530,   132,   391,   439,   118,   119,
   398,   433,   440,   443,   444,   380,   121,   122,   381,   437,
   446,   449,   448,   271,   473,   460,   239,   116,   117,   123,
   454,   133,   134,   464,   520,   462,   474,   523,   469,   475,
   385,   124,   505,   506,   507,   508,   125,   126,   127,   128,
   129,   130,   512,   541,   118,   119,   513,   528,   413,   534,
   575,   120,   121,   122,   523,   535,   536,   537,   542,   554,
   546,   520,   131,   116,   117,   123,   551,   557,   132,   558,
   548,   541,   560,  -107,   553,   568,   563,   124,   476,   572,
   576,   567,   125,   126,   127,   128,   129,   130,   588,   477,
   118,   119,   574,   589,   133,   134,   290,   120,   121,   122,
   283,   188,   456,   263,   552,   539,   478,   511,   131,   545,
   565,   123,   514,   428,   132,   479,   480,   481,   482,   483,
   566,   442,   484,   124,   388,   287,     0,     0,   125,   126,
   127,   128,   129,   130,     0,     0,   561,     0,     0,     0,
   133,   134,   219,   220,   221,   222,   223,   224,   225,   226,
   227,   228,   229,     0,   131,   485,     0,   486,    19,     0,
   132,   487,     0,     0,    40,   211,     0,   212,   213,   214,
   215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
   225,   226,   227,   228,   229,     0,   133,   134,     0,     0,
     0,     0,     0,   488,   489,     0,   490,     0,   491,     0,
    20,    21,     0,     0,     0,     0,    22,    23,    24,    25,
    26,     0,     0,     0,     0,     0,     0,     0,    27,    28,
    29,    30,     0,     0,     0,     0,     0,     0,    31,    32,
    33,    34,    35,    36,     0,    19,     0,     0,    37,    38,
    39,     0,     0,   211,    40,   212,   213,   214,   215,   216,
   217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
   227,   228,   229,     0,     0,    41,     0,   348,    55,     0,
     0,  -274,     0,   293,     0,     0,    42,    20,    21,     0,
     0,     0,     0,    22,    23,    24,    25,    26,     0,     0,
     0,     0,     0,    55,     0,    27,    28,    29,    30,     0,
     0,     0,    56,     0,     0,    31,    32,    33,    34,    35,
    36,     0,     0,     0,     0,    37,    38,    39,     0,    57,
     0,    40,     0,     0,     0,   362,     0,    56,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,    41,     0,    57,     0,     0,     0,     0,     0,
     0,   363,    58,    42,     0,    59,    60,    61,    62,    63,
   -41,    64,    65,    66,     0,    67,    68,    69,    70,    71,
     0,     0,     0,     0,    72,    73,    74,    58,     0,     0,
    59,    60,    61,    62,    63,     0,    64,    65,    66,     0,
    67,    68,    69,    70,    71,     0,     0,     0,     0,    72,
    73,    74,   211,     0,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,   211,     0,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,   211,     0,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,   211,     0,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,   211,     0,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
   228,   229,     0,     0,     0,     0,     0,     0,     0,   211,
   364,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   211,
   366,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   211,
   372,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   211,
   431,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,   211,
   432,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,     0,
     0,     0,     0,     0,     0,     0,   211,   452,   212,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,   211,   467,   212,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,   211,   471,   212,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,   211,   472,   212,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,   211,   516,   212,   213,
   214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
   224,   225,   226,   227,   228,   229,     0,     0,   413,     0,
     0,   211,   230,   212,   213,   214,   215,   216,   217,   218,
   219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
   229,     0,   370,   213,   214,   215,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     0,     0,   371,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   223,   224,   225,   226,   227,   228,   229,     0,
     0,     0,   373,   211,   374,   212,   213,   214,   215,   216,
   217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
   227,   228,   229,   211,   418,   212,   213,   214,   215,   216,
   217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
   227,   228,   229,   215,   216,   217,   218,   219,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,   217,   218,
   219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
   229,    79,    80,    81,    82,    83,    84,    85,    86,    87
};

static const short yycheck[] = {    88,
    59,   178,   179,   164,    17,    57,     4,   246,   247,   382,
    69,     4,     4,     4,   180,    10,    10,    76,     4,     4,
   265,   468,    50,     4,     4,     4,     4,     4,    50,   445,
    15,   566,     4,     4,     4,    15,    15,     4,     4,   113,
   107,   108,   109,   578,    49,    97,    98,    32,   100,   101,
   497,   118,    32,    32,   106,   573,   472,   113,    50,   118,
   119,     4,    10,   581,     4,     5,   122,     4,     5,    48,
     4,     4,    15,   113,   133,   134,     4,   136,    50,   452,
    50,    15,   122,    50,    50,   144,   121,    15,    49,    32,
   125,   113,    62,    10,   122,     4,    62,    67,    32,    16,
   121,    67,   123,   162,    32,    48,    15,   352,    89,   111,
   276,    49,   114,   560,   121,    85,   123,   121,   122,    85,
    90,     4,     5,    32,    90,   123,   121,   121,   126,   121,
   121,   190,   191,   126,   193,   194,   375,   123,   123,   198,
   199,   120,   201,   516,   121,   124,   205,   206,   207,   208,
   121,    37,   211,   212,   213,   214,   215,   216,   217,   218,
   219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
   229,   230,   231,   232,     3,     4,    37,   120,    87,   238,
   239,   121,     4,   123,   121,   121,   123,   123,   121,   123,
   123,    49,   120,   509,    37,   111,   285,   436,   114,   115,
   116,    30,    31,    58,    59,    60,    61,    62,    37,    38,
    39,   120,   528,    28,    29,    30,    31,    32,    33,    34,
    37,   273,    51,   275,    32,    33,    34,    37,   544,    58,
    59,    60,    61,    62,    63,   114,    37,   116,    39,    68,
    69,    70,    71,    72,    73,    30,    31,    32,    33,    34,
   121,    37,   123,   430,     3,     4,     3,     4,     4,     5,
    37,    10,    37,    37,    37,    94,    37,    37,   123,    37,
    37,   100,   117,     4,   287,     4,     4,     4,     4,     4,
     4,    30,    31,     4,   343,   344,   345,   346,    37,    38,
    39,     4,     3,    96,   123,   456,     4,   126,   127,     4,
     4,     4,    51,     4,     4,     4,     4,     4,     4,    49,
   121,   370,   371,    50,    63,   374,   121,    37,    37,    68,
    69,    70,    71,    72,    73,    37,   121,    37,     3,     4,
    37,    37,   121,     4,    16,    10,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    94,    37,    37,    37,    37,
    37,   100,    37,   412,    16,    30,    31,   122,    10,   123,
   449,   123,    37,    38,    39,   123,   123,    37,   123,   123,
   123,   123,   121,     4,     4,     4,    51,   126,   127,     4,
     4,   440,     4,     4,   473,   444,     4,   446,    63,     4,
    49,   114,     4,    68,    69,    70,    71,    72,    73,    37,
   577,     3,     4,    16,   122,   582,   123,   123,   585,   123,
     4,    37,    16,    89,   123,   474,    79,   506,     4,    94,
   122,     4,    80,    16,   513,   100,   121,    16,    30,    31,
   123,   123,    37,    49,    37,    37,    38,    39,    40,   123,
    37,    10,   123,   121,    10,   122,   121,     3,     4,    51,
    49,   126,   127,   122,   505,    82,    37,   508,    49,    16,
    16,    63,    37,    37,    37,    37,    68,    69,    70,    71,
    72,    73,    50,   524,    30,    31,    37,    37,    37,   123,
   569,    37,    38,    39,   535,    37,   123,   123,    37,   540,
    25,   542,    94,     3,     4,    51,    16,     4,   100,    89,
   123,   552,    49,   123,   123,     4,    25,    63,     4,    50,
     4,   562,    68,    69,    70,    71,    72,    73,     0,    15,
    30,    31,   123,     0,   126,   127,   192,    37,    38,    39,
   185,   108,   443,   168,   535,   522,    32,   497,    94,   528,
   560,    51,   500,   394,   100,    41,    42,    43,    44,    45,
   561,   420,    48,    63,   345,   189,    -1,    -1,    68,    69,
    70,    71,    72,    73,    -1,    -1,   550,    -1,    -1,    -1,
   126,   127,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    -1,    94,    81,    -1,    83,     4,    -1,
   100,    87,    -1,    -1,    90,    15,    -1,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    -1,   126,   127,    -1,    -1,
    -1,    -1,    -1,   119,   120,    -1,   122,    -1,   124,    -1,
    46,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    64,    65,
    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    74,    75,
    76,    77,    78,    79,    -1,     4,    -1,    -1,    84,    85,
    86,    -1,    -1,    15,    90,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    -1,    -1,   111,    -1,    36,     4,    -1,
    -1,   117,    -1,   123,    -1,    -1,   122,    46,    47,    -1,
    -1,    -1,    -1,    52,    53,    54,    55,    56,    -1,    -1,
    -1,    -1,    -1,     4,    -1,    64,    65,    66,    67,    -1,
    -1,    -1,    38,    -1,    -1,    74,    75,    76,    77,    78,
    79,    -1,    -1,    -1,    -1,    84,    85,    86,    -1,    55,
    -1,    90,    -1,    -1,    -1,    36,    -1,    38,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,   111,    -1,    55,    -1,    -1,    -1,    -1,    -1,
    -1,   123,    88,   122,    -1,    91,    92,    93,    94,    95,
    96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
    -1,    -1,    -1,    -1,   110,   111,   112,    88,    -1,    -1,
    91,    92,    93,    94,    95,    -1,    97,    98,    99,    -1,
   101,   102,   103,   104,   105,    -1,    -1,    -1,    -1,   110,
   111,   112,    15,    -1,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    15,    -1,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,
   123,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
   123,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
   123,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
   123,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    15,
   123,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    15,   123,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    15,   123,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    15,   123,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    15,   123,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    15,   123,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    -1,    -1,    37,    -1,
    -1,    15,   121,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    -1,   121,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    -1,    -1,   121,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    -1,
    -1,    -1,   121,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,     6,     7,     8,     9,    10,    11,    12,    13,    14
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/misc/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/misc/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 6:
#line 165 "ldgram.y"
{ ldlex_defsym(); ;
    break;}
case 7:
#line 167 "ldgram.y"
{
		  ldlex_popstate();
		  lang_add_assignment(exp_assop(yyvsp[-1].token,yyvsp[-2].name,yyvsp[0].etree));
		;
    break;}
case 8:
#line 174 "ldgram.y"
{
		  ldlex_mri_script ();
		  PUSH_ERROR (_("MRI style script"));
		;
    break;}
case 9:
#line 179 "ldgram.y"
{
		  ldlex_popstate ();
		  mri_draw_tree ();
		  POP_ERROR ();
		;
    break;}
case 14:
#line 194 "ldgram.y"
{
			einfo(_("%P%F: unrecognised keyword in MRI style script '%s'\n"),yyvsp[0].name);
			;
    break;}
case 15:
#line 197 "ldgram.y"
{
			config.map_filename = "-";
			;
    break;}
case 18:
#line 203 "ldgram.y"
{ mri_public(yyvsp[-2].name, yyvsp[0].etree); ;
    break;}
case 19:
#line 205 "ldgram.y"
{ mri_public(yyvsp[-2].name, yyvsp[0].etree); ;
    break;}
case 20:
#line 207 "ldgram.y"
{ mri_public(yyvsp[-1].name, yyvsp[0].etree); ;
    break;}
case 21:
#line 209 "ldgram.y"
{ mri_format(yyvsp[0].name); ;
    break;}
case 22:
#line 211 "ldgram.y"
{ mri_output_section(yyvsp[-2].name, yyvsp[0].etree);;
    break;}
case 23:
#line 213 "ldgram.y"
{ mri_output_section(yyvsp[-1].name, yyvsp[0].etree);;
    break;}
case 24:
#line 215 "ldgram.y"
{ mri_output_section(yyvsp[-2].name, yyvsp[0].etree);;
    break;}
case 25:
#line 217 "ldgram.y"
{ mri_align(yyvsp[-2].name,yyvsp[0].etree); ;
    break;}
case 26:
#line 219 "ldgram.y"
{ mri_align(yyvsp[-2].name,yyvsp[0].etree); ;
    break;}
case 27:
#line 221 "ldgram.y"
{ mri_alignmod(yyvsp[-2].name,yyvsp[0].etree); ;
    break;}
case 28:
#line 223 "ldgram.y"
{ mri_alignmod(yyvsp[-2].name,yyvsp[0].etree); ;
    break;}
case 31:
#line 227 "ldgram.y"
{ mri_name(yyvsp[0].name); ;
    break;}
case 32:
#line 229 "ldgram.y"
{ mri_alias(yyvsp[-2].name,yyvsp[0].name,0);;
    break;}
case 33:
#line 231 "ldgram.y"
{ mri_alias(yyvsp[-2].name,0,(int) yyvsp[0].integer);;
    break;}
case 34:
#line 233 "ldgram.y"
{ mri_base(yyvsp[0].etree); ;
    break;}
case 35:
#line 235 "ldgram.y"
{  mri_truncate((unsigned int) yyvsp[0].integer); ;
    break;}
case 38:
#line 239 "ldgram.y"
{ ldfile_open_command_file (yyvsp[0].name); ;
    break;}
case 40:
#line 241 "ldgram.y"
{ lang_add_entry (yyvsp[0].name, false); ;
    break;}
case 42:
#line 246 "ldgram.y"
{ mri_order(yyvsp[0].name); ;
    break;}
case 43:
#line 247 "ldgram.y"
{ mri_order(yyvsp[0].name); ;
    break;}
case 45:
#line 253 "ldgram.y"
{ mri_load(yyvsp[0].name); ;
    break;}
case 46:
#line 254 "ldgram.y"
{ mri_load(yyvsp[0].name); ;
    break;}
case 47:
#line 259 "ldgram.y"
{ mri_only_load(yyvsp[0].name); ;
    break;}
case 48:
#line 261 "ldgram.y"
{ mri_only_load(yyvsp[0].name); ;
    break;}
case 49:
#line 265 "ldgram.y"
{ yyval.name = NULL; ;
    break;}
case 52:
#line 272 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); ;
    break;}
case 53:
#line 274 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); ;
    break;}
case 54:
#line 276 "ldgram.y"
{ ldlang_add_undef (yyvsp[0].name); ;
    break;}
case 55:
#line 280 "ldgram.y"
{
	 ldlex_both();
	;
    break;}
case 56:
#line 284 "ldgram.y"
{
	ldlex_popstate();
	;
    break;}
case 69:
#line 309 "ldgram.y"
{ lang_add_target(yyvsp[-1].name); ;
    break;}
case 70:
#line 311 "ldgram.y"
{ ldfile_add_library_path (yyvsp[-1].name, false); ;
    break;}
case 71:
#line 313 "ldgram.y"
{ lang_add_output(yyvsp[-1].name, 1); ;
    break;}
case 72:
#line 315 "ldgram.y"
{ lang_add_output_format (yyvsp[-1].name, (char *) NULL,
					    (char *) NULL, 1); ;
    break;}
case 73:
#line 318 "ldgram.y"
{ lang_add_output_format (yyvsp[-5].name, yyvsp[-3].name, yyvsp[-1].name, 1); ;
    break;}
case 74:
#line 320 "ldgram.y"
{ ldfile_set_output_arch(yyvsp[-1].name); ;
    break;}
case 75:
#line 322 "ldgram.y"
{ command_line.force_common_definition = true ; ;
    break;}
case 77:
#line 325 "ldgram.y"
{ lang_enter_group (); ;
    break;}
case 78:
#line 327 "ldgram.y"
{ lang_leave_group (); ;
    break;}
case 79:
#line 329 "ldgram.y"
{ lang_add_map(yyvsp[-1].name); ;
    break;}
case 80:
#line 331 "ldgram.y"
{ ldfile_open_command_file(yyvsp[0].name); ;
    break;}
case 82:
#line 333 "ldgram.y"
{
		  lang_add_nocrossref (yyvsp[-1].nocrossref);
		;
    break;}
case 84:
#line 341 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); ;
    break;}
case 85:
#line 344 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); ;
    break;}
case 86:
#line 347 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_search_file_enum,
				 (char *)NULL); ;
    break;}
case 87:
#line 350 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); ;
    break;}
case 88:
#line 353 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); ;
    break;}
case 89:
#line 356 "ldgram.y"
{ lang_add_input_file(yyvsp[0].name,lang_input_file_is_l_enum,
				 (char *)NULL); ;
    break;}
case 94:
#line 372 "ldgram.y"
{ lang_add_entry (yyvsp[-1].name, false); ;
    break;}
case 96:
#line 380 "ldgram.y"
{
			  yyval.cname = yyvsp[0].name;
			;
    break;}
case 97:
#line 384 "ldgram.y"
{
			  yyval.cname = "*";
			;
    break;}
case 98:
#line 388 "ldgram.y"
{
			  yyval.cname = "?";
			;
    break;}
case 99:
#line 395 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[0].cname;
			  yyval.wildcard.sorted = false;
			  yyval.wildcard.exclude_name_list = NULL;
			;
    break;}
case 100:
#line 401 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[0].cname;
			  yyval.wildcard.sorted = false;
			  yyval.wildcard.exclude_name_list = yyvsp[-2].name_list;
			;
    break;}
case 101:
#line 407 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-1].cname;
			  yyval.wildcard.sorted = true;
			  yyval.wildcard.exclude_name_list = NULL;
			;
    break;}
case 102:
#line 413 "ldgram.y"
{
			  yyval.wildcard.name = yyvsp[-1].cname;
			  yyval.wildcard.sorted = true;
			  yyval.wildcard.exclude_name_list = yyvsp[-3].name_list;
			;
    break;}
case 103:
#line 424 "ldgram.y"
{
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = yyvsp[0].cname;
			  tmp->next = yyvsp[-1].name_list;
			  yyval.name_list = tmp;	
			;
    break;}
case 104:
#line 433 "ldgram.y"
{
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = yyvsp[0].cname;
			  tmp->next = NULL;
			  yyval.name_list = tmp;
			;
    break;}
case 105:
#line 444 "ldgram.y"
{
			  lang_add_wild (yyvsp[0].wildcard.name, yyvsp[0].wildcard.sorted,
					 current_file.name,
					 current_file.sorted,
					 ldgram_had_keep, yyvsp[0].wildcard.exclude_name_list);
			;
    break;}
case 106:
#line 451 "ldgram.y"
{
			  lang_add_wild (yyvsp[0].wildcard.name, yyvsp[0].wildcard.sorted,
					 current_file.name,
					 current_file.sorted,
					 ldgram_had_keep, yyvsp[0].wildcard.exclude_name_list);
			;
    break;}
case 107:
#line 461 "ldgram.y"
{
			  lang_add_wild (NULL, false, yyvsp[0].name, false,
					 ldgram_had_keep, NULL);
			;
    break;}
case 108:
#line 466 "ldgram.y"
{
			  current_file.name = NULL;
			  current_file.sorted = false;
			;
    break;}
case 110:
#line 472 "ldgram.y"
{
			  current_file = yyvsp[0].wildcard;
			  /* '*' matches any file name.  */
			  if (strcmp (current_file.name, "*") == 0)
			    current_file.name = NULL;
			;
    break;}
case 113:
#line 484 "ldgram.y"
{ ldgram_had_keep = true; ;
    break;}
case 114:
#line 486 "ldgram.y"
{ ldgram_had_keep = false; ;
    break;}
case 116:
#line 492 "ldgram.y"
{
 		lang_add_attribute(lang_object_symbols_statement_enum); 
	      	;
    break;}
case 118:
#line 497 "ldgram.y"
{
 		
		  lang_add_attribute(lang_constructors_statement_enum); 
		;
    break;}
case 119:
#line 502 "ldgram.y"
{
		  constructors_sorted = true;
		  lang_add_attribute (lang_constructors_statement_enum);
		;
    break;}
case 121:
#line 508 "ldgram.y"
{
			lang_add_data((int) yyvsp[-3].integer,yyvsp[-1].etree);
			;
    break;}
case 122:
#line 513 "ldgram.y"
{
			  lang_add_fill
			    (exp_get_value_int(yyvsp[-1].etree,
					       0,
					       "fill value",
					       lang_first_phase_enum));
			;
    break;}
case 127:
#line 534 "ldgram.y"
{ yyval.integer = yyvsp[0].token; ;
    break;}
case 128:
#line 536 "ldgram.y"
{ yyval.integer = yyvsp[0].token; ;
    break;}
case 129:
#line 538 "ldgram.y"
{ yyval.integer = yyvsp[0].token; ;
    break;}
case 130:
#line 540 "ldgram.y"
{ yyval.integer = yyvsp[0].token; ;
    break;}
case 131:
#line 542 "ldgram.y"
{ yyval.integer = yyvsp[0].token; ;
    break;}
case 132:
#line 547 "ldgram.y"
{
		  yyval.integer =	 exp_get_value_int(yyvsp[0].etree,
					   0,
					   "fill value",
					   lang_first_phase_enum);
		;
    break;}
case 133:
#line 553 "ldgram.y"
{ yyval.integer = 0; ;
    break;}
case 134:
#line 560 "ldgram.y"
{ yyval.token = '+'; ;
    break;}
case 135:
#line 562 "ldgram.y"
{ yyval.token = '-'; ;
    break;}
case 136:
#line 564 "ldgram.y"
{ yyval.token = '*'; ;
    break;}
case 137:
#line 566 "ldgram.y"
{ yyval.token = '/'; ;
    break;}
case 138:
#line 568 "ldgram.y"
{ yyval.token = LSHIFT; ;
    break;}
case 139:
#line 570 "ldgram.y"
{ yyval.token = RSHIFT; ;
    break;}
case 140:
#line 572 "ldgram.y"
{ yyval.token = '&'; ;
    break;}
case 141:
#line 574 "ldgram.y"
{ yyval.token = '|'; ;
    break;}
case 144:
#line 584 "ldgram.y"
{
		  lang_add_assignment (exp_assop (yyvsp[-1].token, yyvsp[-2].name, yyvsp[0].etree));
		;
    break;}
case 145:
#line 588 "ldgram.y"
{
		  lang_add_assignment (exp_assop ('=', yyvsp[-2].name,
						  exp_binop (yyvsp[-1].token,
							     exp_nameop (NAME,
									 yyvsp[-2].name),
							     yyvsp[0].etree)));
		;
    break;}
case 146:
#line 596 "ldgram.y"
{
		  lang_add_assignment (exp_provide (yyvsp[-3].name, yyvsp[-1].etree));
		;
    break;}
case 153:
#line 618 "ldgram.y"
{ region = lang_memory_region_lookup(yyvsp[0].name); ;
    break;}
case 155:
#line 624 "ldgram.y"
{ region->current =
		 region->origin =
		 exp_get_vma(yyvsp[0].etree, 0L,"origin", lang_first_phase_enum);
;
    break;}
case 156:
#line 632 "ldgram.y"
{ region->length = exp_get_vma(yyvsp[0].etree,
					       ~((bfd_vma)0),
					       "length",
					       lang_first_phase_enum);
		;
    break;}
case 157:
#line 641 "ldgram.y"
{ /* dummy action to avoid bison 1.25 error message */ ;
    break;}
case 161:
#line 652 "ldgram.y"
{ lang_set_flags (region, yyvsp[0].name, 0); ;
    break;}
case 162:
#line 654 "ldgram.y"
{ lang_set_flags (region, yyvsp[0].name, 1); ;
    break;}
case 163:
#line 659 "ldgram.y"
{ lang_startup(yyvsp[-1].name); ;
    break;}
case 165:
#line 665 "ldgram.y"
{ ldemul_hll((char *)NULL); ;
    break;}
case 166:
#line 670 "ldgram.y"
{ ldemul_hll(yyvsp[0].name); ;
    break;}
case 167:
#line 672 "ldgram.y"
{ ldemul_hll(yyvsp[0].name); ;
    break;}
case 169:
#line 680 "ldgram.y"
{ ldemul_syslib(yyvsp[0].name); ;
    break;}
case 171:
#line 686 "ldgram.y"
{ lang_float(true); ;
    break;}
case 172:
#line 688 "ldgram.y"
{ lang_float(false); ;
    break;}
case 173:
#line 693 "ldgram.y"
{
		  yyval.nocrossref = NULL;
		;
    break;}
case 174:
#line 697 "ldgram.y"
{
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = yyvsp[-1].name;
		  n->next = yyvsp[0].nocrossref;
		  yyval.nocrossref = n;
		;
    break;}
case 175:
#line 706 "ldgram.y"
{
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = yyvsp[-2].name;
		  n->next = yyvsp[0].nocrossref;
		  yyval.nocrossref = n;
		;
    break;}
case 176:
#line 716 "ldgram.y"
{ ldlex_expression(); ;
    break;}
case 177:
#line 718 "ldgram.y"
{ ldlex_popstate(); yyval.etree=yyvsp[0].etree;;
    break;}
case 178:
#line 723 "ldgram.y"
{ yyval.etree = exp_unop('-', yyvsp[0].etree); ;
    break;}
case 179:
#line 725 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; ;
    break;}
case 180:
#line 727 "ldgram.y"
{ yyval.etree = exp_unop((int) yyvsp[-3].integer,yyvsp[-1].etree); ;
    break;}
case 181:
#line 729 "ldgram.y"
{ yyval.etree = exp_unop('!', yyvsp[0].etree); ;
    break;}
case 182:
#line 731 "ldgram.y"
{ yyval.etree = yyvsp[0].etree; ;
    break;}
case 183:
#line 733 "ldgram.y"
{ yyval.etree = exp_unop('~', yyvsp[0].etree);;
    break;}
case 184:
#line 736 "ldgram.y"
{ yyval.etree = exp_binop('*', yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 185:
#line 738 "ldgram.y"
{ yyval.etree = exp_binop('/', yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 186:
#line 740 "ldgram.y"
{ yyval.etree = exp_binop('%', yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 187:
#line 742 "ldgram.y"
{ yyval.etree = exp_binop('+', yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 188:
#line 744 "ldgram.y"
{ yyval.etree = exp_binop('-' , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 189:
#line 746 "ldgram.y"
{ yyval.etree = exp_binop(LSHIFT , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 190:
#line 748 "ldgram.y"
{ yyval.etree = exp_binop(RSHIFT , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 191:
#line 750 "ldgram.y"
{ yyval.etree = exp_binop(EQ , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 192:
#line 752 "ldgram.y"
{ yyval.etree = exp_binop(NE , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 193:
#line 754 "ldgram.y"
{ yyval.etree = exp_binop(LE , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 194:
#line 756 "ldgram.y"
{ yyval.etree = exp_binop(GE , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 195:
#line 758 "ldgram.y"
{ yyval.etree = exp_binop('<' , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 196:
#line 760 "ldgram.y"
{ yyval.etree = exp_binop('>' , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 197:
#line 762 "ldgram.y"
{ yyval.etree = exp_binop('&' , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 198:
#line 764 "ldgram.y"
{ yyval.etree = exp_binop('^' , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 199:
#line 766 "ldgram.y"
{ yyval.etree = exp_binop('|' , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 200:
#line 768 "ldgram.y"
{ yyval.etree = exp_trinop('?' , yyvsp[-4].etree, yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 201:
#line 770 "ldgram.y"
{ yyval.etree = exp_binop(ANDAND , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 202:
#line 772 "ldgram.y"
{ yyval.etree = exp_binop(OROR , yyvsp[-2].etree, yyvsp[0].etree); ;
    break;}
case 203:
#line 774 "ldgram.y"
{ yyval.etree = exp_nameop(DEFINED, yyvsp[-1].name); ;
    break;}
case 204:
#line 776 "ldgram.y"
{ yyval.etree = exp_intop(yyvsp[0].integer); ;
    break;}
case 205:
#line 778 "ldgram.y"
{ yyval.etree = exp_nameop(SIZEOF_HEADERS,0); ;
    break;}
case 206:
#line 781 "ldgram.y"
{ yyval.etree = exp_nameop(SIZEOF,yyvsp[-1].name); ;
    break;}
case 207:
#line 783 "ldgram.y"
{ yyval.etree = exp_nameop(ADDR,yyvsp[-1].name); ;
    break;}
case 208:
#line 785 "ldgram.y"
{ yyval.etree = exp_nameop(LOADADDR,yyvsp[-1].name); ;
    break;}
case 209:
#line 787 "ldgram.y"
{ yyval.etree = exp_unop(ABSOLUTE, yyvsp[-1].etree); ;
    break;}
case 210:
#line 789 "ldgram.y"
{ yyval.etree = exp_unop(ALIGN_K,yyvsp[-1].etree); ;
    break;}
case 211:
#line 791 "ldgram.y"
{ yyval.etree = exp_unop(ALIGN_K,yyvsp[-1].etree); ;
    break;}
case 212:
#line 793 "ldgram.y"
{ yyval.etree = exp_nameop(NAME,yyvsp[0].name); ;
    break;}
case 213:
#line 795 "ldgram.y"
{ yyval.etree = exp_binop (MAX_K, yyvsp[-3].etree, yyvsp[-1].etree ); ;
    break;}
case 214:
#line 797 "ldgram.y"
{ yyval.etree = exp_binop (MIN_K, yyvsp[-3].etree, yyvsp[-1].etree ); ;
    break;}
case 215:
#line 799 "ldgram.y"
{ yyval.etree = exp_assert (yyvsp[-3].etree, yyvsp[-1].name); ;
    break;}
case 216:
#line 804 "ldgram.y"
{ yyval.name = yyvsp[0].name; ;
    break;}
case 217:
#line 805 "ldgram.y"
{ yyval.name = "*default*"; ;
    break;}
case 218:
#line 809 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; ;
    break;}
case 219:
#line 810 "ldgram.y"
{ yyval.etree = 0; ;
    break;}
case 220:
#line 813 "ldgram.y"
{ ldlex_expression(); ;
    break;}
case 221:
#line 815 "ldgram.y"
{ ldlex_popstate (); ldlex_script (); ;
    break;}
case 222:
#line 817 "ldgram.y"
{
			  lang_enter_output_section_statement(yyvsp[-5].name, yyvsp[-3].etree,
							      sectype,
							      0, 0, 0, yyvsp[-2].etree);
			;
    break;}
case 223:
#line 823 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); ;
    break;}
case 224:
#line 825 "ldgram.y"
{
		  ldlex_popstate ();
		  lang_leave_output_section_statement (yyvsp[0].integer, yyvsp[-3].name, yyvsp[-1].section_phdr, yyvsp[-2].name);
		;
    break;}
case 226:
#line 831 "ldgram.y"
{ ldlex_expression (); ;
    break;}
case 227:
#line 833 "ldgram.y"
{ ldlex_popstate (); ldlex_script (); ;
    break;}
case 228:
#line 835 "ldgram.y"
{
			  lang_enter_overlay (yyvsp[-4].etree, yyvsp[-2].etree, (int) yyvsp[-3].integer);
			;
    break;}
case 229:
#line 840 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); ;
    break;}
case 230:
#line 842 "ldgram.y"
{
			  ldlex_popstate ();
			  lang_leave_overlay (yyvsp[0].integer, yyvsp[-3].name, yyvsp[-1].section_phdr, yyvsp[-2].name);
			;
    break;}
case 232:
#line 851 "ldgram.y"
{ ldlex_expression (); ;
    break;}
case 233:
#line 853 "ldgram.y"
{
		  ldlex_popstate ();
		  lang_add_assignment (exp_assop ('=', ".", yyvsp[0].etree));
		;
    break;}
case 235:
#line 861 "ldgram.y"
{ sectype = noload_section; ;
    break;}
case 236:
#line 862 "ldgram.y"
{ sectype = dsect_section; ;
    break;}
case 237:
#line 863 "ldgram.y"
{ sectype = copy_section; ;
    break;}
case 238:
#line 864 "ldgram.y"
{ sectype = info_section; ;
    break;}
case 239:
#line 865 "ldgram.y"
{ sectype = overlay_section; ;
    break;}
case 241:
#line 870 "ldgram.y"
{ sectype = normal_section; ;
    break;}
case 242:
#line 871 "ldgram.y"
{ sectype = normal_section; ;
    break;}
case 243:
#line 875 "ldgram.y"
{ yyval.etree = yyvsp[-2].etree; ;
    break;}
case 244:
#line 876 "ldgram.y"
{ yyval.etree = (etree_type *)NULL;  ;
    break;}
case 245:
#line 881 "ldgram.y"
{ yyval.etree = yyvsp[-3].etree; ;
    break;}
case 246:
#line 883 "ldgram.y"
{ yyval.etree = yyvsp[-7].etree; ;
    break;}
case 247:
#line 887 "ldgram.y"
{ yyval.etree = yyvsp[-1].etree; ;
    break;}
case 248:
#line 888 "ldgram.y"
{ yyval.etree = (etree_type *) NULL;  ;
    break;}
case 249:
#line 893 "ldgram.y"
{ yyval.integer = 0; ;
    break;}
case 250:
#line 895 "ldgram.y"
{ yyval.integer = 1; ;
    break;}
case 251:
#line 900 "ldgram.y"
{ yyval.name = yyvsp[0].name; ;
    break;}
case 252:
#line 901 "ldgram.y"
{ yyval.name = "*default*"; ;
    break;}
case 253:
#line 906 "ldgram.y"
{
		  yyval.section_phdr = NULL;
		;
    break;}
case 254:
#line 910 "ldgram.y"
{
		  struct lang_output_section_phdr_list *n;

		  n = ((struct lang_output_section_phdr_list *)
		       xmalloc (sizeof *n));
		  n->name = yyvsp[0].name;
		  n->used = false;
		  n->next = yyvsp[-2].section_phdr;
		  yyval.section_phdr = n;
		;
    break;}
case 256:
#line 926 "ldgram.y"
{
			  ldlex_script ();
			  lang_enter_overlay_section (yyvsp[0].name);
			;
    break;}
case 257:
#line 931 "ldgram.y"
{ ldlex_popstate (); ldlex_expression (); ;
    break;}
case 258:
#line 933 "ldgram.y"
{
			  ldlex_popstate ();
			  lang_leave_overlay_section (yyvsp[0].integer, yyvsp[-1].section_phdr);
			;
    break;}
case 263:
#line 950 "ldgram.y"
{ ldlex_expression (); ;
    break;}
case 264:
#line 951 "ldgram.y"
{ ldlex_popstate (); ;
    break;}
case 265:
#line 953 "ldgram.y"
{
		  lang_new_phdr (yyvsp[-5].name, yyvsp[-3].etree, yyvsp[-2].phdr.filehdr, yyvsp[-2].phdr.phdrs, yyvsp[-2].phdr.at,
				 yyvsp[-2].phdr.flags);
		;
    break;}
case 266:
#line 961 "ldgram.y"
{
		  yyval.etree = yyvsp[0].etree;

		  if (yyvsp[0].etree->type.node_class == etree_name
		      && yyvsp[0].etree->type.node_code == NAME)
		    {
		      const char *s;
		      unsigned int i;
		      static const char * const phdr_types[] =
			{
			  "PT_NULL", "PT_LOAD", "PT_DYNAMIC",
			  "PT_INTERP", "PT_NOTE", "PT_SHLIB",
			  "PT_PHDR"
			};

		      s = yyvsp[0].etree->name.name;
		      for (i = 0;
			   i < sizeof phdr_types / sizeof phdr_types[0];
			   i++)
			if (strcmp (s, phdr_types[i]) == 0)
			  {
			    yyval.etree = exp_intop (i);
			    break;
			  }
		    }
		;
    break;}
case 267:
#line 991 "ldgram.y"
{
		  memset (&yyval.phdr, 0, sizeof (struct phdr_info));
		;
    break;}
case 268:
#line 995 "ldgram.y"
{
		  yyval.phdr = yyvsp[0].phdr;
		  if (strcmp (yyvsp[-2].name, "FILEHDR") == 0 && yyvsp[-1].etree == NULL)
		    yyval.phdr.filehdr = true;
		  else if (strcmp (yyvsp[-2].name, "PHDRS") == 0 && yyvsp[-1].etree == NULL)
		    yyval.phdr.phdrs = true;
		  else if (strcmp (yyvsp[-2].name, "FLAGS") == 0 && yyvsp[-1].etree != NULL)
		    yyval.phdr.flags = yyvsp[-1].etree;
		  else
		    einfo (_("%X%P:%S: PHDRS syntax error at `%s'\n"), yyvsp[-2].name);
		;
    break;}
case 269:
#line 1007 "ldgram.y"
{
		  yyval.phdr = yyvsp[0].phdr;
		  yyval.phdr.at = yyvsp[-2].etree;
		;
    break;}
case 270:
#line 1015 "ldgram.y"
{
		  yyval.etree = NULL;
		;
    break;}
case 271:
#line 1019 "ldgram.y"
{
		  yyval.etree = yyvsp[-1].etree;
		;
    break;}
case 272:
#line 1027 "ldgram.y"
{
		  ldlex_version_file ();
		  PUSH_ERROR (_("VERSION script"));
		;
    break;}
case 273:
#line 1032 "ldgram.y"
{
		  ldlex_popstate ();
		  POP_ERROR ();
		;
    break;}
case 274:
#line 1041 "ldgram.y"
{
		  ldlex_version_script ();
		;
    break;}
case 275:
#line 1045 "ldgram.y"
{
		  ldlex_popstate ();
		;
    break;}
case 278:
#line 1057 "ldgram.y"
{
		  lang_register_vers_node (yyvsp[-4].name, yyvsp[-2].versnode, NULL);
		;
    break;}
case 279:
#line 1061 "ldgram.y"
{
		  lang_register_vers_node (yyvsp[-5].name, yyvsp[-3].versnode, yyvsp[-1].deflist);
		;
    break;}
case 280:
#line 1068 "ldgram.y"
{
		  yyval.deflist = lang_add_vers_depend (NULL, yyvsp[0].name);
		;
    break;}
case 281:
#line 1072 "ldgram.y"
{
		  yyval.deflist = lang_add_vers_depend (yyvsp[-1].deflist, yyvsp[0].name);
		;
    break;}
case 282:
#line 1079 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (NULL, NULL);
		;
    break;}
case 283:
#line 1083 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-1].versyms, NULL);
		;
    break;}
case 284:
#line 1087 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-1].versyms, NULL);
		;
    break;}
case 285:
#line 1091 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (NULL, yyvsp[-1].versyms);
		;
    break;}
case 286:
#line 1095 "ldgram.y"
{
		  yyval.versnode = lang_new_vers_node (yyvsp[-5].versyms, yyvsp[-1].versyms);
		;
    break;}
case 287:
#line 1102 "ldgram.y"
{
		  yyval.versyms = lang_new_vers_regex (NULL, yyvsp[0].name, ldgram_vers_current_lang);
		;
    break;}
case 288:
#line 1106 "ldgram.y"
{
		  yyval.versyms = lang_new_vers_regex (yyvsp[-2].versyms, yyvsp[0].name, ldgram_vers_current_lang);
		;
    break;}
case 289:
#line 1110 "ldgram.y"
{
			  yyval.name = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = yyvsp[-1].name;
			;
    break;}
case 290:
#line 1115 "ldgram.y"
{
			  ldgram_vers_current_lang = yyvsp[-2].name;
			;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/misc/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1120 "ldgram.y"

void
yyerror(arg) 
     const char *arg;
{ 
  if (ldfile_assumed_script)
    einfo (_("%P:%s: file format not recognized; treating as linker script\n"),
	   ldfile_input_filename);
  if (error_index > 0 && error_index < ERROR_NAME_MAX)
     einfo ("%P%F:%S: %s in %s\n", arg, error_names[error_index-1]);
  else
     einfo ("%P%F:%S: %s\n", arg);
}
@

