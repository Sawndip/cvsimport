head	1.3;
access;
symbols
	binutils-2_24-branch:1.3.0.10
	binutils-2_24-branchpoint:1.3
	binutils-2_21_1:1.3
	binutils-2_23_2:1.3
	binutils-2_23_1:1.3
	binutils-2_23:1.3
	binutils-2_23-branch:1.3.0.8
	binutils-2_23-branchpoint:1.3
	binutils-2_22_branch:1.3.0.6
	binutils-2_22:1.3
	binutils-2_22-branch:1.3.0.4
	binutils-2_22-branchpoint:1.3
	binutils-2_21:1.3
	binutils-2_21-branch:1.3.0.2
	binutils-2_21-branchpoint:1.3
	binutils-2_20_1:1.2.2.1
	binutils-2_20:1.2.2.1
	binutils-arc-20081103-branch:1.1.1.1.0.36
	binutils-arc-20081103-branchpoint:1.1.1.1
	binutils-2_20-branch:1.2.0.2
	binutils-2_20-branchpoint:1.2
	dje-cgen-play1-branch:1.1.1.1.0.34
	dje-cgen-play1-branchpoint:1.1.1.1
	arc-20081103-branch:1.1.1.1.0.32
	arc-20081103-branchpoint:1.1.1.1
	binutils-2_19_1:1.1.1.1
	binutils-2_19:1.1.1.1
	binutils-2_19-branch:1.1.1.1.0.30
	binutils-2_19-branchpoint:1.1.1.1
	binutils-2_18:1.1.1.1
	binutils-2_18-branch:1.1.1.1.0.28
	binutils-2_18-branchpoint:1.1.1.1
	binutils-csl-coldfire-4_1-32:1.1.1.1
	binutils-csl-sourcerygxx-4_1-32:1.1.1.1
	binutils-csl-innovasic-fido-3_4_4-33:1.1.1.1
	binutils-csl-sourcerygxx-3_4_4-32:1.1.1.1
	binutils-csl-coldfire-4_1-30:1.1.1.1
	binutils-csl-sourcerygxx-4_1-30:1.1.1.1
	binutils-csl-coldfire-4_1-28:1.1.1.1
	binutils-csl-sourcerygxx-4_1-29:1.1.1.1
	binutils-csl-sourcerygxx-4_1-28:1.1.1.1
	binutils-csl-arm-2006q3-27:1.1.1.1
	binutils-csl-sourcerygxx-4_1-27:1.1.1.1
	binutils-csl-arm-2006q3-26:1.1.1.1
	binutils-csl-sourcerygxx-4_1-26:1.1.1.1
	binutils-csl-sourcerygxx-4_1-25:1.1.1.1
	binutils-csl-sourcerygxx-4_1-24:1.1.1.1
	binutils-csl-sourcerygxx-4_1-23:1.1.1.1
	binutils-csl-sourcerygxx-4_1-21:1.1.1.1
	binutils-csl-arm-2006q3-21:1.1.1.1
	binutils-csl-sourcerygxx-4_1-22:1.1.1.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.1.1.1
	binutils-csl-sourcerygxx-4_1-20:1.1.1.1
	binutils-csl-arm-2006q3-19:1.1.1.1
	binutils-csl-sourcerygxx-4_1-19:1.1.1.1
	binutils-csl-sourcerygxx-4_1-18:1.1.1.1
	binutils-csl-renesas-4_1-9:1.1.1.1
	binutils-csl-sourcerygxx-3_4_4-25:1.1.1.1
	binutils-csl-renesas-4_1-8:1.1.1.1
	binutils-csl-renesas-4_1-7:1.1.1.1
	binutils-csl-renesas-4_1-6:1.1.1.1
	binutils-csl-sourcerygxx-4_1-17:1.1.1.1
	binutils-csl-sourcerygxx-4_1-14:1.1.1.1
	binutils-csl-sourcerygxx-4_1-15:1.1.1.1
	binutils-csl-sourcerygxx-4_1-13:1.1.1.1
	binutils-2_17:1.1.1.1
	binutils-csl-sourcerygxx-4_1-12:1.1.1.1
	binutils-csl-sourcerygxx-3_4_4-21:1.1.1.1
	binutils-csl-wrs-linux-3_4_4-24:1.1.1.1
	binutils-csl-wrs-linux-3_4_4-23:1.1.1.1
	binutils-csl-sourcerygxx-4_1-9:1.1.1.1
	binutils-csl-sourcerygxx-4_1-8:1.1.1.1
	binutils-csl-sourcerygxx-4_1-7:1.1.1.1
	binutils-csl-arm-2006q1-6:1.1.1.1
	binutils-csl-sourcerygxx-4_1-6:1.1.1.1
	binutils-csl-wrs-linux-3_4_4-22:1.1.1.1
	binutils-csl-coldfire-4_1-11:1.1.1.1
	binutils-csl-sourcerygxx-3_4_4-19:1.1.1.1
	binutils-csl-coldfire-4_1-10:1.1.1.1
	binutils-csl-sourcerygxx-4_1-5:1.1.1.1
	binutils-csl-sourcerygxx-4_1-4:1.1.1.1
	binutils-csl-wrs-linux-3_4_4-21:1.1.1.1
	binutils-csl-morpho-4_1-4:1.1.1.1
	binutils-csl-sourcerygxx-3_4_4-17:1.1.1.1
	binutils-csl-wrs-linux-3_4_4-20:1.1.1.1
	binutils-2_17-branch:1.1.1.1.0.26
	binutils-2_17-branchpoint:1.1.1.1
	binutils-csl-2_17-branch:1.1.1.1.0.24
	binutils-csl-2_17-branchpoint:1.1.1.1
	binutils-csl-gxxpro-3_4-branch:1.1.1.1.0.22
	binutils-csl-gxxpro-3_4-branchpoint:1.1.1.1
	binutils-2_16_1:1.1.1.1
	binutils-csl-arm-2005q1b:1.1.1.1
	binutils-2_16:1.1.1.1
	binutils-csl-arm-2005q1a:1.1.1.1
	binutils-csl-arm-2005q1-branch:1.1.1.1.0.20
	binutils-csl-arm-2005q1-branchpoint:1.1.1.1
	binutils-2_16-branch:1.1.1.1.0.18
	binutils-2_16-branchpoint:1.1.1.1
	csl-arm-2004-q3d:1.1.1.1
	csl-arm-2004-q3:1.1.1.1
	binutils-2_15:1.1.1.1
	binutils-2_15-branchpoint:1.1.1.1
	csl-arm-2004-q1a:1.1.1.1
	csl-arm-2004-q1:1.1.1.1
	binutils-2_15-branch:1.1.1.1.0.16
	cagney_bfdfile-20040213-branch:1.1.1.1.0.14
	cagney_bfdfile-20040213-branchpoint:1.1.1.1
	cagney_bigcore-20040122-branch:1.1.1.1.0.12
	cagney_bigcore-20040122-branchpoint:1.1.1.1
	csl-arm-2003-q4:1.1.1.1
	binutils-2_14:1.1.1.1
	binutils-2_14-branch:1.1.1.1.0.10
	binutils-2_14-branchpoint:1.1.1.1
	binutils-2_13_2_1:1.1.1.1
	binutils-2_13_2:1.1.1.1
	binutils-2_13_1:1.1.1.1
	binutils-2_13:1.1.1.1
	binutils-2_13-branchpoint:1.1.1.1
	binutils-2_13-branch:1.1.1.1.0.8
	binutils-2_12_1:1.1.1.1
	binutils-2_12:1.1.1.1
	binutils-2_12-branch:1.1.1.1.0.6
	binutils-2_12-branchpoint:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.1
	binutils-2_11_2:1.1.1.1
	binutils-2_11_1:1.1.1.1
	binutils-2_11:1.1.1.1
	x86_64versiong3:1.1.1.1
	binutils-2_11-branch:1.1.1.1.0.4
	binutils-2_10_1:1.1.1.1
	binutils-2_10:1.1.1.1
	binutils-2_10-branch:1.1.1.1.0.2
	binutils-2_10-branchpoint:1.1.1.1
	binutils_latest_snapshot:1.3
	repo-unification-2000-02-06:1.1.1.1
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2009.09.09.11.59.14;	author amodra;	state Exp;
branches;
next	1.2;

1.2
date	2009.09.03.18.04.34;	author davek;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	99.05.03.07.29.08;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.2.2.1
date	2009.09.09.12.00.22;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.08;	author rth;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Only provide ENTRY on final link.
@
text
@# A PE linker script for PowerPC.
# Loosely based on Steve Chamberlain's pe.sc.
# All new mistakes should be credited to Kim Knuttila (krk@@cygnus.com)
#
# These are substituted in as variables in order to get '}' in a shell
# conditional expansion.
INIT='.init : { *(.init) }'
FINI='.fini : { *(.fini) }'
cat <<EOF
OUTPUT_FORMAT(${OUTPUT_FORMAT})
${LIB_SEARCH_DIRS}

/* Much of this layout was determined by delving into .exe files for
   the box generated by other compilers/linkers/etc. This means that
   if a particular feature did not happen to appear in one of the 
   subject files, then it may not be yet supported.
*/

/* It's "mainCRTStartup", not "_mainCRTStartup", and it's located in
   one of the two .lib files (libc.lib and kernel32.lib) that currently
   must be present on the link line. This means that you must use 
   "-u mainCRTStartup" to make sure it gets included in the link.
*/

${RELOCATING+ENTRY (mainCRTStartup)}

SECTIONS
{

  /* text - the usual meaning */
  .text ${RELOCATING+ __image_base__ + __section_alignment__ } : 
	{
	    ${RELOCATING+ *(.init);}
	    *(.text)
	    ${RELOCATING+ *(.text.*)}
	    *(.gcc_except_table)
	    ${CONSTRUCTING+ ___CTOR_LIST__ = .; __CTOR_LIST__ = . ; 
		        LONG (-1); *(.ctors); *(.ctor); LONG (0); }
            ${CONSTRUCTING+ ___DTOR_LIST__ = .; __DTOR_LIST__ = . ; 
			LONG (-1); *(.dtors); *(.dtor);  LONG (0); }
	    ${RELOCATING+ *(.fini);}
	    ${RELOCATING+ etext  =  .};
	}

  /* rdata - Read Only Runtime Data
     CTR sections: All of the CRT (read only C runtime data) sections 
	appear at the start of the .rdata (read only runtime data) 
	section, in the following order. Don't know if it matters or not.
	Not all sections are always present either.
     .rdata: compiler generated read only data
     .xdata: compiler generated exception handling table. (Most docs
	seem to suggest that this section is now deprecated infavor
	of the ydata section)
     .edata: The exported names table.
  */
  .rdata BLOCK(__section_alignment__) :
	{
	    *(.CRT\$XCA);
	    *(.CRT\$XCC);
	    *(.CRT\$XCZ);
	    *(.CRT\$XIA);
	    *(.CRT\$XIC);
	    *(.CRT\$XIZ);
	    *(.CRT\$XLA);
	    *(.CRT\$XLZ);
	    *(.CRT\$XPA);
	    *(.CRT\$XPX);
	    *(.CRT\$XPZ);
	    *(.CRT\$XTA);
	    *(.CRT\$XTZ);
	    *(.rdata);
	    *(.xdata);
	}

  .edata BLOCK(__section_alignment__) :
	{
    	    *(.edata);
	}

  /* data - initialized data
     .ydata: exception handling information.
     .data: the usual meaning.
     .data2: more of the same.
     .bss: For some reason, bss appears to be included in the data
	section, as opposed to being given a section of it's own.
     COMMON:
  */
  .data BLOCK(__section_alignment__) : 
	{
	    __data_start__ = . ; 
	    *(.ydata);
	    *(.data);
	    *(.data2);
	    __bss_start__ = . ;
	    *(.bss) ;
	    *(COMMON);
	    __bss_end__ = . ;
	    ${RELOCATING+ end =  .};
 	    __data_end__ = . ; 
	}

  /* The exception handling table. A sequence of 5 word entries. Section
     address and extent are placed in the DataDirectory.
  */
  .pdata BLOCK(__section_alignment__) :
	{ 					
	    *(.pdata)
 	    ;
	}

  /* The idata section is chock full of magic bits. 
	1. Boundaries around various idata parts are used to initialize
	   some of the fields of the DataDirectory. In particular, the
	   magic for 2, 4 and 5 are known to be used. Some compilers
	   appear to generate magic section symbols for this purpose.
	   Where we can, we catch such symbols and use our own. This of
	   course is something less than a perfect strategy.
	2. The table of contents is placed immediately after idata4.
	   The ".private.toc" sections are generated by the ppc bfd. The
	   .toc variable is generated by gas, and resolved here. It is
	   used to initialized function descriptors (and anyone else who
	   needs the address of the module's toc). The only thing 
	   interesting about it at all? Most ppc instructions using it
	   have a 16bit displacement field. The convention for addressing
	   is to initialize the .toc value to 32K past the start of the
	   actual toc, and subtract 32K from all references, thus using
	   the entire 64K range. Naturally, the reloc code must agree
	   on this number or you get pretty stupid results.
  */
  .idata BLOCK(__section_alignment__) :
	{ 					
	    __idata2_magic__ = .;
	    *(.idata\$2);
	    __idata3_magic__ = .;
	    *(.idata\$3);
	    __idata4_magic__ = .;
	    *(.idata\$4);
	    . = ALIGN(4);
	    .toc = . + 32768;
	    *(.private.toc);
	    __idata5_magic__ = .;
	    *(.idata\$5);
	    __idata6_magic__ = .;
	    *(.idata\$6);
	    __idata7_magic__ = .;
	    *(.idata\$7);
	    ;
	}

  /* reldata -- data that requires relocation
  */
  .reldata BLOCK(__section_alignment__) :
	{ 					
	    *(.reldata)
 	    ;
	}


  /* Resources */
  .rsrc BLOCK(__section_alignment__) :
	{ 					
	    *(.rsrc\$01)
	    *(.rsrc\$02)
	    ;
	}

  .stab BLOCK(__section_alignment__)  ${RELOCATING+(NOLOAD)} : 
  {
    [ .stab ]
  }

  .stabstr BLOCK(__section_alignment__) ${RELOCATING+(NOLOAD)} :
  {
    [ .stabstr ]
  }

  /* The .reloc section is currently generated by the dlltool from Steve 
     Chamberlain in a second pass of linking. Section address and extent
     are placed in the DataDirectory.
  */
  .reloc BLOCK(__section_alignment__) :
	{ 					
	    *(.reloc)
	    ;
	}

  /* We don't do anything useful with codeview debugger support or the
     directive section (yet). Hopefully, we junk them correctly. 
  */
  /DISCARD/ BLOCK(__section_alignment__) : 
	{
    	    *(.debug\$S)
    	    *(.debug\$T)
    	    *(.debug\$F)
    	    *(.drectve)
    	    ;
   	}
}
EOF
@


1.2
log
@ld/ChangeLog:

	* scripttempl/pe.sc (.text): Add "*(.text.*)" in order to catch
	new GCC hot/cold/unlikely partitions.
	* scripttempl/pep.sc: Likewise.
	* scripttempl/epocpe.sc: Likewise.
	* scripttempl/mcorepe.sc: Likewise.
	* scripttempl/ppcpe.sc: Likewise.

ld/testsuite/ChangeLog:

	* ld-pe/longsecn.d: Adjusted to match new .text section merging
	in default PE linker scripts.
	* ld-pe/longsecn-1.d: Likewise.
	* ld-pe/longsecn-2.d: Likewise.
@
text
@d25 1
a25 1
ENTRY(mainCRTStartup)
@


1.2.2.1
log
@Only provide ENTRY on final link.
@
text
@d25 1
a25 1
${RELOCATING+ENTRY (mainCRTStartup)}
@


1.1
log
@Initial revision
@
text
@d35 1
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

