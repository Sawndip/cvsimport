head	1.7;
access;
symbols
	binutils-2_24-branch:1.7.0.10
	binutils-2_24-branchpoint:1.7
	binutils-2_21_1:1.7
	binutils-2_23_2:1.7
	binutils-2_23_1:1.7
	binutils-2_23:1.7
	binutils-2_23-branch:1.7.0.8
	binutils-2_23-branchpoint:1.7
	binutils-2_22_branch:1.7.0.6
	binutils-2_22:1.7
	binutils-2_22-branch:1.7.0.4
	binutils-2_22-branchpoint:1.7
	binutils-2_21:1.7
	binutils-2_21-branch:1.7.0.2
	binutils-2_21-branchpoint:1.7
	binutils-2_20_1:1.6.10.1
	binutils-2_20:1.6.10.1
	binutils-arc-20081103-branch:1.6.0.12
	binutils-arc-20081103-branchpoint:1.6
	binutils-2_20-branch:1.6.0.10
	binutils-2_20-branchpoint:1.6
	dje-cgen-play1-branch:1.6.0.8
	dje-cgen-play1-branchpoint:1.6
	arc-20081103-branch:1.6.0.6
	arc-20081103-branchpoint:1.6
	binutils-2_19_1:1.6
	binutils-2_19:1.6
	binutils-2_19-branch:1.6.0.4
	binutils-2_19-branchpoint:1.6
	binutils-2_18:1.6
	binutils-2_18-branch:1.6.0.2
	binutils-2_18-branchpoint:1.6
	binutils-csl-coldfire-4_1-32:1.5.16.1
	binutils-csl-sourcerygxx-4_1-32:1.5.16.1
	binutils-csl-innovasic-fido-3_4_4-33:1.5.16.1
	binutils-csl-sourcerygxx-3_4_4-32:1.5
	binutils-csl-coldfire-4_1-30:1.5.16.1
	binutils-csl-sourcerygxx-4_1-30:1.5.16.1
	binutils-csl-coldfire-4_1-28:1.5.16.1
	binutils-csl-sourcerygxx-4_1-29:1.5.16.1
	binutils-csl-sourcerygxx-4_1-28:1.5.16.1
	binutils-csl-arm-2006q3-27:1.5.16.1
	binutils-csl-sourcerygxx-4_1-27:1.5.16.1
	binutils-csl-arm-2006q3-26:1.5.16.1
	binutils-csl-sourcerygxx-4_1-26:1.5.16.1
	binutils-csl-sourcerygxx-4_1-25:1.5.16.1
	binutils-csl-sourcerygxx-4_1-24:1.5.16.1
	binutils-csl-sourcerygxx-4_1-23:1.5.16.1
	binutils-csl-sourcerygxx-4_1-21:1.5.16.1
	binutils-csl-arm-2006q3-21:1.5.16.1
	binutils-csl-sourcerygxx-4_1-22:1.5.16.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.5.16.1
	binutils-csl-sourcerygxx-4_1-20:1.5.16.1
	binutils-csl-arm-2006q3-19:1.5.16.1
	binutils-csl-sourcerygxx-4_1-19:1.5.16.1
	binutils-csl-sourcerygxx-4_1-18:1.5.16.1
	binutils-csl-renesas-4_1-9:1.5.16.1
	binutils-csl-sourcerygxx-3_4_4-25:1.5
	binutils-csl-renesas-4_1-8:1.5
	binutils-csl-renesas-4_1-7:1.5
	binutils-csl-renesas-4_1-6:1.5
	binutils-csl-sourcerygxx-4_1-17:1.5
	binutils-csl-sourcerygxx-4_1-14:1.5
	binutils-csl-sourcerygxx-4_1-15:1.5
	binutils-csl-sourcerygxx-4_1-13:1.5
	binutils-2_17:1.5
	binutils-csl-sourcerygxx-4_1-12:1.5
	binutils-csl-sourcerygxx-3_4_4-21:1.5
	binutils-csl-wrs-linux-3_4_4-24:1.5
	binutils-csl-wrs-linux-3_4_4-23:1.5
	binutils-csl-sourcerygxx-4_1-9:1.5
	binutils-csl-sourcerygxx-4_1-8:1.5
	binutils-csl-sourcerygxx-4_1-7:1.5
	binutils-csl-arm-2006q1-6:1.5
	binutils-csl-sourcerygxx-4_1-6:1.5
	binutils-csl-wrs-linux-3_4_4-22:1.5
	binutils-csl-coldfire-4_1-11:1.5
	binutils-csl-sourcerygxx-3_4_4-19:1.5
	binutils-csl-coldfire-4_1-10:1.5
	binutils-csl-sourcerygxx-4_1-5:1.5
	binutils-csl-sourcerygxx-4_1-4:1.5
	binutils-csl-wrs-linux-3_4_4-21:1.5
	binutils-csl-morpho-4_1-4:1.5
	binutils-csl-sourcerygxx-3_4_4-17:1.5
	binutils-csl-wrs-linux-3_4_4-20:1.5
	binutils-2_17-branch:1.5.0.18
	binutils-2_17-branchpoint:1.5
	binutils-csl-2_17-branch:1.5.0.16
	binutils-csl-2_17-branchpoint:1.5
	binutils-csl-gxxpro-3_4-branch:1.5.0.14
	binutils-csl-gxxpro-3_4-branchpoint:1.5
	binutils-2_16_1:1.5
	binutils-csl-arm-2005q1b:1.5
	binutils-2_16:1.5
	binutils-csl-arm-2005q1a:1.5
	binutils-csl-arm-2005q1-branch:1.5.0.12
	binutils-csl-arm-2005q1-branchpoint:1.5
	binutils-2_16-branch:1.5.0.10
	binutils-2_16-branchpoint:1.5
	csl-arm-2004-q3d:1.5
	csl-arm-2004-q3:1.5
	binutils-2_15:1.5
	binutils-2_15-branchpoint:1.5
	csl-arm-2004-q1a:1.5
	csl-arm-2004-q1:1.5
	binutils-2_15-branch:1.5.0.8
	cagney_bfdfile-20040213-branch:1.5.0.6
	cagney_bfdfile-20040213-branchpoint:1.5
	cagney_bigcore-20040122-branch:1.5.0.4
	cagney_bigcore-20040122-branchpoint:1.5
	csl-arm-2003-q4:1.5
	binutils-2_14:1.5
	binutils-2_14-branch:1.5.0.2
	binutils-2_14-branchpoint:1.5
	binutils-2_13_2_1:1.4
	binutils-2_13_2:1.4
	binutils-2_13_1:1.4
	binutils-2_13:1.4
	binutils-2_13-branchpoint:1.4
	binutils-2_13-branch:1.4.0.6
	binutils-2_12_1:1.4
	binutils-2_12:1.4
	binutils-2_12-branch:1.4.0.4
	binutils-2_12-branchpoint:1.4
	cygnus_cvs_20020108_pre:1.4
	binutils-2_11_2:1.4
	binutils-2_11_1:1.4
	binutils-2_11:1.4
	x86_64versiong3:1.4
	binutils-2_11-branch:1.4.0.2
	binutils_latest_snapshot:1.7;
locks; strict;
comment	@# @;


1.7
date	2009.09.09.11.59.14;	author amodra;	state Exp;
branches;
next	1.6;

1.6
date	2006.08.28.01.52.56;	author amodra;	state Exp;
branches
	1.6.10.1;
next	1.5;

1.5
date	2003.04.14.13.03.17;	author amodra;	state Exp;
branches
	1.5.16.1;
next	1.4;

1.4
date	2000.11.30.15.08.44;	author hp;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.18.13.10.12;	author hp;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.29.19.03.56;	author hp;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.20.17.16.06;	author hp;	state Exp;
branches;
next	;

1.6.10.1
date	2009.09.09.12.00.22;	author amodra;	state Exp;
branches;
next	;

1.5.16.1
date	2006.08.29.11.03.30;	author nathan;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Only provide ENTRY on final link.
@
text
@cat <<EOF
OUTPUT_FORMAT("a.out-cris")
OUTPUT_ARCH(cris)
${RELOCATING+ENTRY (__start)}
SECTIONS
{
  .text ${RELOCATING+ ${TEXT_START_ADDR}}:
  {
   CREATE_OBJECT_SYMBOLS;
    ${CONSTRUCTING+ __Stext = .;}
    ${RELOCATING+*(.startup)}
    *(.text)
    ${CONSTRUCTING+__start = DEFINED(__start) ? __start : 
		   DEFINED(_start) ? _start :
		     DEFINED(start) ? start :
		        DEFINED(.startup) ? .startup + 2 : 2;}
    ${RELOCATING+*(.text.*)}
    ${RELOCATING+*(.gnu.linkonce.t*)}
    ${RELOCATING+*(.rodata)}
    ${RELOCATING+*(.rodata.*)}
    ${RELOCATING+*(.gnu.linkonce.r*)}

    /* Do not "provide" init-start and fini-start symbols; they might be
       referred to weakly, so the linker would not override the zero
       default.
       FIXME: It's somewhat unexpected to have code emitted by the linker
       script.  Some other mechanism could probably do better.  */
    ${CONSTRUCTING+ . = ALIGN (2);}
    ${CONSTRUCTING+  ___init__start = .;}
    ${CONSTRUCTING+ PROVIDE (___do_global_ctors = .);}
    ${CONSTRUCTING+ SHORT (0xe1fc); /* push srp */}
    ${CONSTRUCTING+ SHORT (0xbe7e);}
    ${CONSTRUCTING+ *(.init)}
    ${CONSTRUCTING+ SHORT (0x0d3e); /* jump [sp+] */}
    ${CONSTRUCTING+ PROVIDE (__init__end = .);}
    ${CONSTRUCTING+ PROVIDE (___init__end = .);}

    ${CONSTRUCTING+ . = ALIGN (2);}
    ${CONSTRUCTING+  ___fini__start = .;}
    ${CONSTRUCTING+ PROVIDE (___do_global_dtors = .);}
    ${CONSTRUCTING+ SHORT (0xe1fc); /* push srp */}
    ${CONSTRUCTING+ SHORT (0xbe7e);}
    ${CONSTRUCTING+ *(.fini)}
    ${CONSTRUCTING+ SHORT (0x0d3e); /* jump [sp+] */}
    ${CONSTRUCTING+ PROVIDE (__fini__end = .);}
    ${CONSTRUCTING+  ___fini__end = .;}

    /* Cater to linking from ELF.  */
    ${CONSTRUCTING+ PROVIDE(___ctors = .);}
    ${CONSTRUCTING+ ___elf_ctors_dtors_begin = .;}
    ${CONSTRUCTING+ KEEP (*crtbegin.o(.ctors))}
    ${CONSTRUCTING+ KEEP (*crtbegin?.o(.ctors))}
    ${CONSTRUCTING+ KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o) .ctors))}
    ${CONSTRUCTING+ KEEP (*(SORT(.ctors.*)))}
    ${CONSTRUCTING+ KEEP (*(.ctors))}
    ${CONSTRUCTING+ PROVIDE(___ctors_end = .);}

    ${CONSTRUCTING+ PROVIDE(___dtors = .);}
    ${CONSTRUCTING+ KEEP (*crtbegin.o(.dtors))}
    ${CONSTRUCTING+ KEEP (*crtbegin?.o(.dtors))}
    ${CONSTRUCTING+ KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o) .dtors))}
    ${CONSTRUCTING+ KEEP (*(SORT(.dtors.*)))}
    ${CONSTRUCTING+ KEEP (*(.dtors))}
    ${CONSTRUCTING+ PROVIDE(___dtors_end = .);}
    ${CONSTRUCTING+ ___elf_ctors_dtors_end = .;}

    /* We include objects that force alignment of the data segment.
       Unfortunately that sometimes causes a gap between .text and .data,
       which is not detectable since .data does not have a start address
       of itself in the a.out header.  This should only matter for
       testing; for production use, .data is at a "known" location.
       We assume .data does not get an alignment larger than 32 bytes.  */
    ${CONSTRUCTING+. = ALIGN (32);}

    ${CONSTRUCTING+ __Etext = .;}

    /* Deprecated, use __Etext.  */
    ${CONSTRUCTING+ PROVIDE(_etext = .);}
  }

  /* Any dot-relative start-expression (such as "ALIGN(2)", also including
     the "default" .data alignment expression) will use the initial, raw
     size of .text and will be incorrect if the alignment used is less
     than the alignment for .text (which might depend on input and obj
     format).  FIXME: Seems like a bug in ld.  Seems hard to fix.  Seems
     unimportant.  */
  .data :
  {
    ${CONSTRUCTING+ __Sdata = .;}
    *(.data);
    ${RELOCATING+*(.data.*)}
    ${RELOCATING+*(.gnu.linkonce.d*)}
    ${RELOCATING+*(.eh_frame) /* FIXME: Make .text */}
    ${RELOCATING+*(.gcc_except_table)}

    /* See comment at ALIGN before __Etext.  */
    ${CONSTRUCTING+. = ALIGN (32);}

    ${CONSTRUCTING+ __Edata = .;}

    /* Deprecated, use __Edata.  */
    ${CONSTRUCTING+ PROVIDE(_edata = .);}
  }

  .bss :
  {
    /* Deprecated, use __Sbss.  */
    ${CONSTRUCTING+ PROVIDE(_bss_start = .);}

    ${CONSTRUCTING+ __Sbss = .;}
    *(.bss)
    ${RELOCATING+*(.bss.*)}
    *(COMMON)
    ${CONSTRUCTING+ __Ebss = .;}

    /* Deprecated, use __Ebss or __Eall as appropriate.  */
    ${CONSTRUCTING+ PROVIDE(_end = .);}
    ${CONSTRUCTING+ PROVIDE(__end = .);}
  }
  ${CONSTRUCTING+ __Eall = .;}

  /* Unfortunately, stabs are not mappable from ELF to a.out.
     It can probably be fixed with some amount of work.  */
  /DISCARD/ :
  { *(.stab) *(.stab*) *(.debug) *(.debug*) *(.comment) *(.gnu.warning.*) }

  /* For the rsim and xsim simulators.  */
  ${CONSTRUCTING+ PROVIDE(__Endmem = 0x10000000);}

  /* For elinux.  */
  ${CONSTRUCTING+ PROVIDE(__Stacksize = 0);}
}
EOF
@


1.6
log
@	* scripttempl/elf.sc: Ensure that crtbegin and crtend entries will
	not match random object files in a path containing "crtbegin" or
	"crtend" as part of a directory name.
	* scripttempl/armbpabi.sc: Likewise.
	* scripttempl/crisaout.sc: Likewise.
	* scripttempl/elf32crx.sc: Likewise.
	* scripttempl/elf32sh-symbian.sc: Likewise.
	* scripttempl/elf_chaos.sc: Likewise.
	* scripttempl/elfd10v.sc: Likewise.
	* scripttempl/elfd30v.sc: Likewise.
	* scripttempl/elfxtensa.sc: Likewise.
	* scripttempl/iq2000.sc: Likewise.
	* scripttempl/mmo.sc: Likewise.
	* scripttempl/xstormy16.sc: Likewise.
@
text
@d4 1
a4 1
ENTRY(__start)
@


1.6.10.1
log
@Only provide ENTRY on final link.
@
text
@d4 1
a4 1
${RELOCATING+ENTRY (__start)}
@


1.5
log
@	* scripttempl/elf.sc (CTOR): Handle crtbeginS.o, crtendS.o and
	other variants of crtbegin.o, crtend.o.
	(DTOR): Likewise.
	* scripttempl/crisaout.sc (ctors, dtors): Likewise.
	* scripttempl/elf_chaos.sc (CTOR, DTOR): Likewise.
	* scripttempl/elfd10v.sc (CTOR, DTOR): Likewise.
	* scripttempl/elfd30v.sc (CTOR, DTOR): Likewise.
	* scripttempl/elfxtensa.sc (CTOR, DTOR): Likewise.
	* scripttempl/iq2000.sc (CTOR, DTOR): Likewise.
	* scripttempl/mmo.sc (ctors, dtors): Likewise.
	* scripttempl/xstormy16.sc (CTOR, DTOR): Likewise.
@
text
@d51 3
a53 2
    ${CONSTRUCTING+ KEEP (*crtbegin*.o(.ctors))}
    ${CONSTRUCTING+ KEEP (*(EXCLUDE_FILE (*crtend*.o) .ctors))}
d59 3
a61 2
    ${CONSTRUCTING+ KEEP (*crtbegin*.o(.dtors))}
    ${CONSTRUCTING+ KEEP (*(EXCLUDE_FILE (*crtend*.o) .dtors))}
@


1.5.16.1
log
@	ld/
	Backport 2006-08-28  Alan Modra  <amodra@@bigpond.net.au>
	* scripttempl/elf.sc: Ensure that crtbegin and crtend entries will
	not match random object files in a path containing "crtbegin" or
	"crtend" as part of a directory name.
	* scripttempl/armbpabi.sc: Likewise.
	* scripttempl/crisaout.sc: Likewise.
	* scripttempl/elf32crx.sc: Likewise.
	* scripttempl/elf32sh-symbian.sc: Likewise.
	* scripttempl/elf_chaos.sc: Likewise.
	* scripttempl/elfd10v.sc: Likewise.
	* scripttempl/elfd30v.sc: Likewise.
	* scripttempl/elfxtensa.sc: Likewise.
	* scripttempl/iq2000.sc: Likewise.
	* scripttempl/mmo.sc: Likewise.
	* scripttempl/xstormy16.sc: Likewise.
@
text
@d51 2
a52 3
    ${CONSTRUCTING+ KEEP (*crtbegin.o(.ctors))}
    ${CONSTRUCTING+ KEEP (*crtbegin?.o(.ctors))}
    ${CONSTRUCTING+ KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o) .ctors))}
d58 2
a59 3
    ${CONSTRUCTING+ KEEP (*crtbegin.o(.dtors))}
    ${CONSTRUCTING+ KEEP (*crtbegin?.o(.dtors))}
    ${CONSTRUCTING+ KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o) .dtors))}
@


1.4
log
@	* emulparams/crislinux.sh (ENTRY): Change back to _start.
	(TEXT_START_SYMBOLS): Remove conditional setting of __start.

	* scripttempl/crisaout.sc: Change all RELOCATING not related to
	merging non-a.out sections into CONSTRUCTING.
@
text
@d51 2
a52 2
    ${CONSTRUCTING+ KEEP (*crtbegin.o(.ctors))}
    ${CONSTRUCTING+ KEEP (*(EXCLUDE_FILE (*crtend.o) .ctors))}
d58 2
a59 2
    ${CONSTRUCTING+ KEEP (*crtbegin.o(.dtors))}
    ${CONSTRUCTING+ KEEP (*(EXCLUDE_FILE (*crtend.o) .dtors))}
@


1.3
log
@	* scripttempl/crisaout.sc (.text, .data): Pad, with ALIGN (32),
	for consecutive sections.
@
text
@d10 1
a10 1
    ${RELOCATING+ __Stext = .;}
d13 1
a13 1
    ${RELOCATING+__start = DEFINED(__start) ? __start : 
d28 19
a46 19
    ${RELOCATING+. = ALIGN (2);}
    ${RELOCATING+ ___init__start = .;}
    ${RELOCATING+PROVIDE (___do_global_ctors = .);}
    ${RELOCATING+SHORT (0xe1fc); /* push srp */}
    ${RELOCATING+SHORT (0xbe7e);}
    ${RELOCATING+*(.init)}
    ${RELOCATING+SHORT (0x0d3e); /* jump [sp+] */}
    ${RELOCATING+PROVIDE (__init__end = .);}
    ${RELOCATING+PROVIDE (___init__end = .);}

    ${RELOCATING+. = ALIGN (2);}
    ${RELOCATING+ ___fini__start = .;}
    ${RELOCATING+PROVIDE (___do_global_dtors = .);}
    ${RELOCATING+SHORT (0xe1fc); /* push srp */}
    ${RELOCATING+SHORT (0xbe7e);}
    ${RELOCATING+*(.fini)}
    ${RELOCATING+SHORT (0x0d3e); /* jump [sp+] */}
    ${RELOCATING+PROVIDE (__fini__end = .);}
    ${RELOCATING+ ___fini__end = .;}
d71 1
a71 1
    ${RELOCATING+. = ALIGN (32);}
d73 1
a73 1
    ${RELOCATING+ __Etext = .;}
d76 1
a76 1
    ${RELOCATING+ PROVIDE(_etext = .);}
d87 1
a87 1
    ${RELOCATING+ __Sdata = .;}
d95 1
a95 1
    ${RELOCATING+. = ALIGN (32);}
d97 1
a97 1
    ${RELOCATING+ __Edata = .;}
d100 1
a100 1
    ${RELOCATING+ PROVIDE(_edata = .);}
d106 1
a106 1
    ${RELOCATING+ PROVIDE(_bss_start = .);}
d108 1
a108 1
    ${RELOCATING+ __Sbss = .;}
d112 1
a112 1
    ${RELOCATING+ __Ebss = .;}
d115 2
a116 2
    ${RELOCATING+ PROVIDE(_end = .);}
    ${RELOCATING+ PROVIDE(__end = .);}
d118 1
a118 1
  ${RELOCATING+ __Eall = .;}
d126 1
a126 1
  ${RELOCATING+ PROVIDE(__Endmem = 0x10000000);}
d129 1
a129 1
  ${RELOCATING+ PROVIDE(__Stacksize = 0);}
@


1.2
log
@	* scripttempl/crisaout.sc (ENTRY): Now __start.
	(.text): Add default setting for __start.
	Remove CONSTRUCTORS handling.
	(/DISCARD/): Add .gnu.warning.*.
	* emulparams/crislinux.sh (ENTRY): Now __start.
	(TEXT_START_SYMBOLS): New; provide __Stext and __start default.
	* emulparams/criself.sh (OUTPUT_FORMAT): Now elf32-us-cris.
	(ENTRY): Now __start.
	(INITIAL_READONLY_SECTIONS): Add KEEP for .startup.
	(EXECUTABLE_SYMBOLS): Add default setting for __start.
@
text
@d65 8
d93 4
@


1.1
log
@	* Makefile.am (ALL_EMULATIONS): Add ecrisaout.o, ecriself.o,
	ecrislinux.o.
	(ecrisaout.c, ecriself.c, ecrislinux.c): New rules.
	Regenerate dependencies.
	* Makefile.in: Rebuild.
	* configure.tgt (cris-*-*): New target.
	* emulparams/crisaout.sh, emulparams/criself.sh,
	emulparams/crislinux.sh, scripttempl/crisaout.sc: New files.
	* po/POTFILES.in, po/ld.pot: Regenerate.
@
text
@d4 1
a4 1
ENTRY(_start)
d13 4
a47 8
    /* Putting constructors in constant store is sane as long as
       there's no need for dynamic fixups.  */
    /* The constructors and destructors set symbols are unused now that
       collect2 has its wicked way.  */
    ${CONSTRUCTING+ ___aout_ctors_dtors_begin = .;}
    ${CONSTRUCTING+ SORT(CONSTRUCTORS);}
    ${CONSTRUCTING+ ___aout_ctors_dtors_end = .;}

d110 2
a111 1
  /DISCARD/ : { *(.stab) *(.stab*) *(.debug) *(.debug*) *(.comment) }
@

