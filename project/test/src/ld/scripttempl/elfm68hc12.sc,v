head	1.22;
access;
symbols
	binutils-2_24-branch:1.22.0.2
	binutils-2_24-branchpoint:1.22
	binutils-2_21_1:1.18.2.1
	binutils-2_23_2:1.20
	binutils-2_23_1:1.20
	binutils-2_23:1.20
	binutils-2_23-branch:1.20.0.2
	binutils-2_23-branchpoint:1.20
	binutils-2_22_branch:1.19.0.4
	binutils-2_22:1.19
	binutils-2_22-branch:1.19.0.2
	binutils-2_22-branchpoint:1.19
	binutils-2_21:1.18
	binutils-2_21-branch:1.18.0.2
	binutils-2_21-branchpoint:1.18
	binutils-2_20_1:1.15.8.2
	binutils-2_20:1.15.8.2
	binutils-arc-20081103-branch:1.15.0.10
	binutils-arc-20081103-branchpoint:1.15
	binutils-2_20-branch:1.15.0.8
	binutils-2_20-branchpoint:1.15
	dje-cgen-play1-branch:1.15.0.6
	dje-cgen-play1-branchpoint:1.15
	arc-20081103-branch:1.15.0.4
	arc-20081103-branchpoint:1.15
	binutils-2_19_1:1.15
	binutils-2_19:1.15
	binutils-2_19-branch:1.15.0.2
	binutils-2_19-branchpoint:1.15
	binutils-2_18:1.14
	binutils-2_18-branch:1.14.0.12
	binutils-2_18-branchpoint:1.14
	binutils-csl-coldfire-4_1-32:1.14
	binutils-csl-sourcerygxx-4_1-32:1.14
	binutils-csl-innovasic-fido-3_4_4-33:1.14
	binutils-csl-sourcerygxx-3_4_4-32:1.14
	binutils-csl-coldfire-4_1-30:1.14
	binutils-csl-sourcerygxx-4_1-30:1.14
	binutils-csl-coldfire-4_1-28:1.14
	binutils-csl-sourcerygxx-4_1-29:1.14
	binutils-csl-sourcerygxx-4_1-28:1.14
	binutils-csl-arm-2006q3-27:1.14
	binutils-csl-sourcerygxx-4_1-27:1.14
	binutils-csl-arm-2006q3-26:1.14
	binutils-csl-sourcerygxx-4_1-26:1.14
	binutils-csl-sourcerygxx-4_1-25:1.14
	binutils-csl-sourcerygxx-4_1-24:1.14
	binutils-csl-sourcerygxx-4_1-23:1.14
	binutils-csl-sourcerygxx-4_1-21:1.14
	binutils-csl-arm-2006q3-21:1.14
	binutils-csl-sourcerygxx-4_1-22:1.14
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.14
	binutils-csl-sourcerygxx-4_1-20:1.14
	binutils-csl-arm-2006q3-19:1.14
	binutils-csl-sourcerygxx-4_1-19:1.14
	binutils-csl-sourcerygxx-4_1-18:1.14
	binutils-csl-renesas-4_1-9:1.14
	binutils-csl-sourcerygxx-3_4_4-25:1.14
	binutils-csl-renesas-4_1-8:1.14
	binutils-csl-renesas-4_1-7:1.14
	binutils-csl-renesas-4_1-6:1.14
	binutils-csl-sourcerygxx-4_1-17:1.14
	binutils-csl-sourcerygxx-4_1-14:1.14
	binutils-csl-sourcerygxx-4_1-15:1.14
	binutils-csl-sourcerygxx-4_1-13:1.14
	binutils-2_17:1.14
	binutils-csl-sourcerygxx-4_1-12:1.14
	binutils-csl-sourcerygxx-3_4_4-21:1.14
	binutils-csl-wrs-linux-3_4_4-24:1.14
	binutils-csl-wrs-linux-3_4_4-23:1.14
	binutils-csl-sourcerygxx-4_1-9:1.14
	binutils-csl-sourcerygxx-4_1-8:1.14
	binutils-csl-sourcerygxx-4_1-7:1.14
	binutils-csl-arm-2006q1-6:1.14
	binutils-csl-sourcerygxx-4_1-6:1.14
	binutils-csl-wrs-linux-3_4_4-22:1.14
	binutils-csl-coldfire-4_1-11:1.14
	binutils-csl-sourcerygxx-3_4_4-19:1.14
	binutils-csl-coldfire-4_1-10:1.14
	binutils-csl-sourcerygxx-4_1-5:1.14
	binutils-csl-sourcerygxx-4_1-4:1.14
	binutils-csl-wrs-linux-3_4_4-21:1.14
	binutils-csl-morpho-4_1-4:1.14
	binutils-csl-sourcerygxx-3_4_4-17:1.14
	binutils-csl-wrs-linux-3_4_4-20:1.14
	binutils-2_17-branch:1.14.0.10
	binutils-2_17-branchpoint:1.14
	binutils-csl-2_17-branch:1.14.0.8
	binutils-csl-2_17-branchpoint:1.14
	binutils-csl-gxxpro-3_4-branch:1.14.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.14
	binutils-2_16_1:1.14
	binutils-csl-arm-2005q1b:1.14
	binutils-2_16:1.14
	binutils-csl-arm-2005q1a:1.14
	binutils-csl-arm-2005q1-branch:1.14.0.4
	binutils-csl-arm-2005q1-branchpoint:1.14
	binutils-2_16-branch:1.14.0.2
	binutils-2_16-branchpoint:1.14
	csl-arm-2004-q3d:1.14
	csl-arm-2004-q3:1.14
	binutils-2_15:1.13
	binutils-2_15-branchpoint:1.13
	csl-arm-2004-q1a:1.13
	csl-arm-2004-q1:1.13
	binutils-2_15-branch:1.13.0.6
	cagney_bfdfile-20040213-branch:1.13.0.4
	cagney_bfdfile-20040213-branchpoint:1.13
	cagney_bigcore-20040122-branch:1.13.0.2
	cagney_bigcore-20040122-branchpoint:1.13
	csl-arm-2003-q4:1.13
	binutils-2_14:1.10
	binutils-2_14-branch:1.10.0.2
	binutils-2_14-branchpoint:1.10
	binutils-2_13_2_1:1.8.2.1
	binutils-2_13_2:1.8.2.1
	binutils-2_13_1:1.8.2.1
	binutils-2_13:1.8
	binutils-2_13-branchpoint:1.8
	binutils-2_13-branch:1.8.0.2
	binutils-2_12_1:1.7
	binutils-2_12:1.7
	binutils-2_12-branch:1.7.0.2
	binutils-2_12-branchpoint:1.7
	cygnus_cvs_20020108_pre:1.7
	binutils-2_11_2:1.3
	binutils-2_11_1:1.3
	binutils-2_11:1.3
	x86_64versiong3:1.3
	binutils-2_11-branch:1.3.0.2
	binutils_latest_snapshot:1.22;
locks; strict;
comment	@# @;


1.22
date	2013.04.28.14.52.54;	author tschwinge;	state Exp;
branches;
next	1.21;

1.21
date	2013.04.15.08.51.58;	author nickc;	state Exp;
branches;
next	1.20;

1.20
date	2012.06.29.07.58.46;	author nickc;	state Exp;
branches;
next	1.19;

1.19
date	2011.02.10.08.18.58;	author amodra;	state Exp;
branches;
next	1.18;

1.18
date	2010.11.02.13.47.43;	author hjl;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	2009.10.10.04.34.39;	author amodra;	state Exp;
branches;
next	1.16;

1.16
date	2009.09.28.07.08.50;	author amodra;	state Exp;
branches;
next	1.15;

1.15
date	2008.02.18.14.53.44;	author nickc;	state Exp;
branches
	1.15.8.1;
next	1.14;

1.14
date	2004.08.01.20.04.22;	author ciceron;	state Exp;
branches;
next	1.13;

1.13
date	2003.10.27.10.10.57;	author ciceron;	state Exp;
branches;
next	1.12;

1.12
date	2003.07.29.20.17.17;	author ciceron;	state Exp;
branches;
next	1.11;

1.11
date	2003.07.23.19.33.20;	author ciceron;	state Exp;
branches;
next	1.10;

1.10
date	2002.10.13.09.29.35;	author ciceron;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2002.09.30.09.31.31;	author amodra;	state Exp;
branches;
next	1.8;

1.8
date	2002.06.29.10.33.45;	author ciceron;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2001.11.25.17.29.27;	author ciceron;	state Exp;
branches;
next	1.6;

1.6
date	2001.08.17.09.51.08;	author amodra;	state Exp;
branches;
next	1.5;

1.5
date	2001.08.12.20.19.49;	author rth;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.03.20.41.26;	author ciceron;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.02.20.43.22;	author nickc;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2000.08.08.22.04.32;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.19.01.22.43;	author nickc;	state Exp;
branches;
next	;

1.18.2.1
date	2011.02.10.23.44.13;	author amodra;	state Exp;
branches;
next	;

1.15.8.1
date	2009.09.29.03.18.21;	author amodra;	state Exp;
branches;
next	1.15.8.2;

1.15.8.2
date	2009.10.09.05.43.07;	author amodra;	state Exp;
branches;
next	;

1.10.2.1
date	2003.07.23.19.31.52;	author ciceron;	state Exp;
branches;
next	1.10.2.2;

1.10.2.2
date	2003.07.29.20.21.13;	author ciceron;	state Exp;
branches;
next	;

1.8.2.1
date	2002.10.28.18.45.54;	author drow;	state Exp;
branches;
next	;

1.3.2.1
date	2001.09.30.09.39.16;	author ciceron;	state Exp;
branches;
next	;


desc
@@


1.22
log
@ld/
	* scripttempl/armbpabi.sc: Replace "source" usage with ".".
	* scripttempl/avr.sc: Likewise.
	* scripttempl/elf.sc: Likewise.
	* scripttempl/elf32cr16.sc: Likewise.
	* scripttempl/elf32crx.sc: Likewise.
	* scripttempl/elf32msp430.sc: Likewise.
	* scripttempl/elf32msp430_3.sc: Likewise.
	* scripttempl/elf32sh-symbian.sc: Likewise.
	* scripttempl/elf64hppa.sc: Likewise.
	* scripttempl/elf_chaos.sc: Likewise.
	* scripttempl/elfd10v.sc: Likewise.
	* scripttempl/elfd30v.sc: Likewise.
	* scripttempl/elfi370.sc: Likewise.
	* scripttempl/elfm68hc11.sc: Likewise.
	* scripttempl/elfm68hc12.sc: Likewise.
	* scripttempl/elfxgate.sc: Likewise.
	* scripttempl/elfxtensa.sc: Likewise.
	* scripttempl/epiphany_4x4.sc: Likewise.
	* scripttempl/i386beos.sc: Likewise.
	* scripttempl/i386go32.sc: Likewise.
	* scripttempl/ia64vms.sc: Likewise.
	* scripttempl/ip2k.sc: Likewise.
	* scripttempl/iq2000.sc: Likewise.
	* scripttempl/mep.sc: Likewise.
	* scripttempl/mmo.sc: Likewise.
	* scripttempl/v850.sc: Likewise.
	* scripttempl/v850_rh850.sc: Likewise.
	* scripttempl/xstormy16.sc: Likewise.
@
text
@#
# Unusual variables checked by this code:
#	NOP - four byte opcode for no-op (defaults to 0)
#	DATA_ADDR - if end-of-text-plus-one-page isn't right for data start
#	OTHER_READWRITE_SECTIONS - other than .data .bss .ctors .sdata ...
#		(e.g., .PARISC.global)
#	OTHER_SECTIONS - at the end
#	EXECUTABLE_SYMBOLS - symbols that must be defined for an
#		executable (e.g., _DYNAMIC_LINK)
#	TEXT_START_SYMBOLS - symbols that appear at the start of the
#		.text section.
#	DATA_START_SYMBOLS - symbols that appear at the start of the
#		.data section.
#	OTHER_BSS_SYMBOLS - symbols that appear at the start of the
#		.bss section besides __bss_start.
#	EMBEDDED - whether this is for an embedded system. 
#
# When adding sections, do note that the names of some sections are used
# when specifying the start address of the next.
#
test -z "$ENTRY" && ENTRY=_start
test -z "${BIG_OUTPUT_FORMAT}" && BIG_OUTPUT_FORMAT=${OUTPUT_FORMAT}
test -z "${LITTLE_OUTPUT_FORMAT}" && LITTLE_OUTPUT_FORMAT=${OUTPUT_FORMAT}
if [ -z "$MACHINE" ]; then OUTPUT_ARCH=${ARCH}; else OUTPUT_ARCH=${ARCH}:${MACHINE}; fi
test "$LD_FLAG" = "N" && DATA_ADDR=.

CTOR=".ctors ${CONSTRUCTING-0} : 
  {
    ${CONSTRUCTING+ PROVIDE (__CTOR_LIST__ = .); }
    ${CONSTRUCTING+${CTOR_START}}
    KEEP (*(.ctors))

    ${CONSTRUCTING+${CTOR_END}}
    ${CONSTRUCTING+ PROVIDE(__CTOR_END__ = .); }
  } ${RELOCATING+ > ${TEXT_MEMORY}}"

DTOR="  .dtors	${CONSTRUCTING-0} :
  {
    ${CONSTRUCTING+ PROVIDE(__DTOR_LIST__ = .); }
    KEEP (*(.dtors))
    ${CONSTRUCTING+ PROVIDE(__DTOR_END__ = .); }
  } ${RELOCATING+ > ${TEXT_MEMORY}}"


VECTORS="
  /* If the 'vectors_addr' symbol is defined, it indicates the start address
     of interrupt vectors.  This depends on the 68HC11 operating mode:

			Addr
     Single chip	0xffc0
     Extended mode	0xffc0
     Bootstrap		0x00c0
     Test		0xbfc0

     In general, the vectors address is 0xffc0.  This can be overriden 
     with the '-defsym vectors_addr=0xbfc0' ld option.

     Note: for the bootstrap mode, the interrupt vectors are at 0xbfc0 but
     they are redirected to 0x00c0 by the internal PROM.  Application's vectors
     must also consist of jump instructions (see Motorola's manual).  */

  PROVIDE (_vectors_addr = DEFINED (vectors_addr) ? vectors_addr : 0xffc0);
  .vectors DEFINED (vectors_addr) ? vectors_addr : 0xffc0 :
  {
    KEEP (*(.vectors))
  }"

#
# We provide two emulations: a fixed on that defines some memory banks
# and a configurable one that includes a user provided memory definition.
#
case $GENERIC_BOARD in
  yes|1|YES)
	MEMORY_DEF="
/* Get memory banks definition from some user configuration file.
   This file must be located in some linker directory (search path
   with -L<dir>). See fixed memory banks emulation script.  */
INCLUDE memory.x;
"
	;;
  *)
MEMORY_DEF="
/* Fixed definition of the available memory banks.
   See generic emulation script for a user defined configuration.  */
MEMORY
{
  page0 (rwx) : ORIGIN = 0x0, LENGTH = 256
  text  (rx)  : ORIGIN = ${ROM_START_ADDR}, LENGTH = ${ROM_SIZE}
  data        : ORIGIN = ${RAM_START_ADDR}, LENGTH = ${RAM_SIZE}
  eeprom      : ORIGIN = ${EEPROM_START_ADDR}, LENGTH = ${EEPROM_SIZE}
}

/* Setup the stack on the top of the data memory bank.  */
PROVIDE (_stack = ${RAM_START_ADDR} + ${RAM_SIZE} - 1);
"
	;;
esac

STARTUP_CODE="
    /* Startup code.  */
    KEEP (*(.install0))	/* Section should setup the stack pointer.  */
    KEEP (*(.install1))	/* Place holder for applications.  */
    KEEP (*(.install2))	/* Optional installation of data sections in RAM.  */
    KEEP (*(.install3))	/* Place holder for applications.  */
    KEEP (*(.install4))	/* Section that calls the main.  */
"

FINISH_CODE="
    /* Finish code.  */
    KEEP (*(.fini0))	/* Beginning of finish code (_exit symbol).  */
    KEEP (*(.fini1))	/* Place holder for applications.  */
    KEEP (*(.fini2))	/* C++ destructors.  */
    KEEP (*(.fini3))	/* Place holder for applications.  */
    KEEP (*(.fini4))	/* Runtime exit.  */
"

PRE_COMPUTE_DATA_SIZE="
/* SCz: this does not work yet... This is supposed to force the loading
   of _map_data.o (from libgcc.a) when the .data section is not empty.
   By doing so, this should bring the code that copies the .data section
   from ROM to RAM at init time.

  ___pre_comp_data_size = SIZEOF(.data);
  __install_data_sections = ___pre_comp_data_size > 0 ?
		__map_data_sections : 0;
*/
"

INSTALL_RELOC="
  .install0 0 : { *(.install0) }
  .install1 0 : { *(.install1) }
  .install2 0 : { *(.install2) }
  .install3 0 : { *(.install3) }
  .install4 0 : { *(.install4) }
"

FINISH_RELOC="
  .fini0 0 : { *(.fini0) }
  .fini1 0 : { *(.fini1) }
  .fini2 0 : { *(.fini2) }
  .fini3 0 : { *(.fini3) }
  .fini4 0 : { *(.fini4) }
"

BSS_DATA_RELOC="
  .data1 0 : { *(.data1) }

  /* We want the small data sections together, so single-instruction offsets
     can access them all, and initialized data all before uninitialized, so
     we can shorten the on-disk segment size.  */
  .sdata   0 : { *(.sdata) }
  .sbss    0 : { *(.sbss) }
  .scommon 0 : { *(.scommon) }
"

SOFT_REGS_RELOC="
  .softregs 0 : { *(.softregs) }
"

cat <<EOF
${RELOCATING+/* Linker script for 68HC12 executable (PROM).  */}
${RELOCATING-/* Linker script for 68HC12 object file (ld -r).  */}

OUTPUT_FORMAT("${OUTPUT_FORMAT}", "${BIG_OUTPUT_FORMAT}",
	      "${LITTLE_OUTPUT_FORMAT}")
OUTPUT_ARCH(${OUTPUT_ARCH})
${RELOCATING+ENTRY(${ENTRY})}

${RELOCATING+${LIB_SEARCH_DIRS}}
${RELOCATING+${EXECUTABLE_SYMBOLS}}
${RELOCATING+${MEMORY_DEF}}

SECTIONS
{
  .hash        ${RELOCATING-0} : { *(.hash)		}
  .dynsym      ${RELOCATING-0} : { *(.dynsym)		}
  .dynstr      ${RELOCATING-0} : { *(.dynstr)		}
  .gnu.version		${RELOCATING-0} : { *(.gnu.version) }
  .gnu.version_d	${RELOCATING-0} : { *(.gnu.version_d) }
  .gnu.version_r	${RELOCATING-0} : { *(.gnu.version_r) }

  .rel.text    ${RELOCATING-0} :
    {
      *(.rel.text)
      ${RELOCATING+*(.rel.text.*)}
      ${RELOCATING+*(.rel.gnu.linkonce.t.*)}
    }
  .rela.text   ${RELOCATING-0} :
    {
      *(.rela.text)
      ${RELOCATING+*(.rela.text.*)}
      ${RELOCATING+*(.rela.gnu.linkonce.t.*)}
    }
  .rel.data    ${RELOCATING-0} :
    {
      *(.rel.data)
      ${RELOCATING+*(.rel.data.*)}
      ${RELOCATING+*(.rel.gnu.linkonce.d.*)}
    }
  .rela.data   ${RELOCATING-0} :
    {
      *(.rela.data)
      ${RELOCATING+*(.rela.data.*)}
      ${RELOCATING+*(.rela.gnu.linkonce.d.*)}
    }
  .rel.rodata  ${RELOCATING-0} :
    {
      *(.rel.rodata)
      ${RELOCATING+*(.rel.rodata.*)}
      ${RELOCATING+*(.rel.gnu.linkonce.r.*)}
    }
  .rela.rodata ${RELOCATING-0} :
    {
      *(.rela.rodata)
      ${RELOCATING+*(.rela.rodata.*)}
      ${RELOCATING+*(.rela.gnu.linkonce.r.*)}
    }
  .rel.sdata   ${RELOCATING-0} :
    {
      *(.rel.sdata)
      ${RELOCATING+*(.rel.sdata.*)}
      ${RELOCATING+*(.rel.gnu.linkonce.s.*)}
    }
  .rela.sdata   ${RELOCATING-0} :
    {
      *(.rela.sdata)
      ${RELOCATING+*(.rela.sdata.*)}
      ${RELOCATING+*(.rela.gnu.linkonce.s.*)}
    }
  .rel.sbss    ${RELOCATING-0} :
    { 
      *(.rel.sbss)
      ${RELOCATING+*(.rel.sbss.*)}
      ${RELOCATING+*(.rel.gnu.linkonce.sb.*)}
    }
  .rela.sbss   ${RELOCATING-0} :
    {
      *(.rela.sbss)
      ${RELOCATING+*(.rela.sbss.*)}
      ${RELOCATING+*(.rel.gnu.linkonce.sb.*)}
    }
  .rel.bss     ${RELOCATING-0} : 
    { 
      *(.rel.bss)
      ${RELOCATING+*(.rel.bss.*)}
      ${RELOCATING+*(.rel.gnu.linkonce.b.*)}
    }
  .rela.bss    ${RELOCATING-0} : 
    { 
      *(.rela.bss)
      ${RELOCATING+*(.rela.bss.*)}
      ${RELOCATING+*(.rela.gnu.linkonce.b.*)}
    }
  .rel.stext		${RELOCATING-0} : { *(.rel.stest) }
  .rela.stext		${RELOCATING-0} : { *(.rela.stest) }
  .rel.etext		${RELOCATING-0} : { *(.rel.etest) }
  .rela.etext		${RELOCATING-0} : { *(.rela.etest) }
  .rel.sdata		${RELOCATING-0} : { *(.rel.sdata) }
  .rela.sdata		${RELOCATING-0} : { *(.rela.sdata) }
  .rel.edata		${RELOCATING-0} : { *(.rel.edata) }
  .rela.edata		${RELOCATING-0} : { *(.rela.edata) }
  .rel.eit_v		${RELOCATING-0} : { *(.rel.eit_v) }
  .rela.eit_v		${RELOCATING-0} : { *(.rela.eit_v) }
  .rel.ebss		${RELOCATING-0} : { *(.rel.ebss) }
  .rela.ebss		${RELOCATING-0} : { *(.rela.ebss) }
  .rel.srodata		${RELOCATING-0} : { *(.rel.srodata) }
  .rela.srodata		${RELOCATING-0} : { *(.rela.srodata) }
  .rel.erodata		${RELOCATING-0} : { *(.rel.erodata) }
  .rela.erodata		${RELOCATING-0} : { *(.rela.erodata) }
  .rel.got		${RELOCATING-0} : { *(.rel.got) }
  .rela.got		${RELOCATING-0} : { *(.rela.got) }
  .rel.ctors		${RELOCATING-0} : { *(.rel.ctors) }
  .rela.ctors		${RELOCATING-0} : { *(.rela.ctors) }
  .rel.dtors		${RELOCATING-0} : { *(.rel.dtors) }
  .rela.dtors		${RELOCATING-0} : { *(.rela.dtors) }
  .rel.init		${RELOCATING-0} : { *(.rel.init) }
  .rela.init		${RELOCATING-0} : { *(.rela.init) }
  .rel.fini		${RELOCATING-0} : { *(.rel.fini) }
  .rela.fini		${RELOCATING-0} : { *(.rela.fini) }
  .rel.plt		${RELOCATING-0} : { *(.rel.plt) }
  .rela.plt		${RELOCATING-0} : { *(.rela.plt) }

  /* Concatenate .page0 sections.  Put them in the page0 memory bank
     unless we are creating a relocatable file.  */
  .page0 :
  {
    *(.page0)
  } ${RELOCATING+ > page0}

  /* Start of text section.  */
  .stext ${RELOCATING-0} : 
  {
    *(.stext)
  } ${RELOCATING+ > ${TEXT_MEMORY}}

  .init	${RELOCATING-0} :
  {
    *(.init) 
  } ${RELOCATING+=${NOP-0}}

  ${RELOCATING-${INSTALL_RELOC}}
  ${RELOCATING-${FINISH_RELOC}}

  .text ${RELOCATING-0}:
  {
    /* Put startup code at beginning so that _start keeps same address.  */
    ${RELOCATING+${STARTUP_CODE}}

    ${RELOCATING+*(.init)}
    *(.text)
    ${RELOCATING+*(.text.*)}
    /* .gnu.warning sections are handled specially by elf32.em.  */
    *(.gnu.warning)
    ${RELOCATING+*(.gnu.linkonce.t.*)}
    ${RELOCATING+*(.tramp)}
    ${RELOCATING+*(.tramp.*)}

    ${RELOCATING+${FINISH_CODE}}

    ${RELOCATING+_etext = .;}
    ${RELOCATING+PROVIDE (etext = .);}
    ${RELOCATING+. = ALIGN(2);}
  } ${RELOCATING+ > ${TEXT_MEMORY} =0xa7a7a7a7}

  .eh_frame ${RELOCATING-0} :
  {
    KEEP (*(.eh_frame))
  } ${RELOCATING+ > ${TEXT_MEMORY}}

  .gcc_except_table ${RELOCATING-0} :
  {
    *(.gcc_except_table)
  } ${RELOCATING+ > ${TEXT_MEMORY}}

  .rodata  ${RELOCATING-0} :
  {
    *(.rodata)
    ${RELOCATING+*(.rodata.*)}
    ${RELOCATING+*(.gnu.linkonce.r*)}
    ${RELOCATING+. = ALIGN(2);}
  } ${RELOCATING+ > ${TEXT_MEMORY} =0xffffffff}

  .rodata1 ${RELOCATING-0} :
  {
    *(.rodata1)
    ${RELOCATING+. = ALIGN(2);}
  } ${RELOCATING+ > ${TEXT_MEMORY} =0xffffffff}

  /* Constructor and destructor tables are in ROM.  */
  ${RELOCATING+${CTOR}}
  ${RELOCATING+${DTOR}}

  .jcr ${RELOCATING-0} :
  {
    KEEP (*(.jcr))
  } ${RELOCATING+ > ${TEXT_MEMORY}}

  /* Start of the data section image in ROM.  */
  ${RELOCATING+__data_image = .;}
  ${RELOCATING+PROVIDE (__data_image = .);}

  /* All read-only sections that normally go in PROM must be above.
     We construct the DATA image section in PROM at end of all these
     read-only sections.  The data image must be copied at init time.
     Refer to GNU ld, Section 3.6.8.2 Output Section LMA.  */
  .data  ${RELOCATING-0} : ${RELOCATING+AT (__data_image)}
  {
    ${RELOCATING+__data_section_start = .;}
    ${RELOCATING+PROVIDE (__data_section_start = .);}

    ${RELOCATING+${DATA_START_SYMBOLS}}
    ${RELOCATING+*(.sdata)}
    *(.data)
    ${RELOCATING+*(.data.*)}
    ${RELOCATING+*(.data1)}
    ${RELOCATING+*(.gnu.linkonce.d.*)}
    ${CONSTRUCTING+CONSTRUCTORS}

    ${RELOCATING+_edata  =  .;}
    ${RELOCATING+PROVIDE (edata = .);}
    ${RELOCATING+. = ALIGN(2);}
  } ${RELOCATING+ > ${DATA_MEMORY} =0xffffffff}

  ${RELOCATING+__data_section_size = SIZEOF(.data);}
  ${RELOCATING+PROVIDE (__data_section_size = SIZEOF(.data));}
  ${RELOCATING+__data_image_end = __data_image + __data_section_size;}

  ${RELOCATING+${PRE_COMPUTE_DATA_SIZE}}

  /* .install ${RELOCATING-0}:
  {
    . = _data_image_end;
  } ${RELOCATING+ > ${TEXT_MEMORY}} */

  /* Relocation for some bss and data sections.  */
  ${RELOCATING-${BSS_DATA_RELOC}}
  ${RELOCATING-${SOFT_REGS_RELOC}}

  .bss ${RELOCATING-0} :
  {
    ${RELOCATING+__bss_start = .;}
    ${RELOCATING+*(.softregs)}
    ${RELOCATING+*(.sbss)}
    ${RELOCATING+*(.scommon)}

    *(.dynbss)
    *(.bss)
    ${RELOCATING+*(.bss.*)}
    ${RELOCATING+*(.gnu.linkonce.b.*)}
    *(COMMON)
    ${RELOCATING+PROVIDE (_end = .);}
  } ${RELOCATING+ > ${DATA_MEMORY}}
  ${RELOCATING+__bss_size = SIZEOF(.bss);}
  ${RELOCATING+PROVIDE (__bss_size = SIZEOF(.bss));}

  .eeprom ${RELOCATING-0} :
  {
    *(.eeprom)
    *(.eeprom.*)
  } ${RELOCATING+ > ${EEPROM_MEMORY}}

  ${RELOCATING+${VECTORS}}

  /* Stabs debugging sections.  */
  .stab		 0 : { *(.stab) }
  .stabstr	 0 : { *(.stabstr) }
  .stab.excl	 0 : { *(.stab.excl) }
  .stab.exclstr	 0 : { *(.stab.exclstr) }
  .stab.index	 0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }

  .comment	 0 : { *(.comment) }

  /* Treatment of DWARF debug section must be at end of the linker
     script to avoid problems when there are undefined symbols. It's necessary
     to avoid that the DWARF section is relocated before such undefined
     symbols are found.  */
EOF

. $srcdir/scripttempl/DWARF.sc

cat <<EOF
}
EOF
@


1.21
log
@	* scripttempl/armbpabi.sc: Replace DWARF sections with an
	inclusion of DWARF.sc.
	* scripttempl/avr.sc: Likewise.
	* scripttempl/elf.sc: Likewise.
	* scripttempl/elf32cr16.sc: Likewise.
	* scripttempl/elf32crx.sc: Likewise.
	* scripttempl/elf32msp430.sc: Likewise.
	* scripttempl/elf32msp430_3.sc: Likewise.
	* scripttempl/elf32sh-symbian.sc: Likewise.
	* scripttempl/elf64hppa.sc: Likewise.
	* scripttempl/elf_chaos.sc: Likewise.
	* scripttempl/elfd10v.sc: Likewise.
	* scripttempl/elfd30v.sc: Likewise.
	* scripttempl/elfi370.sc: Likewise.
	* scripttempl/elfm68hc11.sc: Likewise.
	* scripttempl/elfm68hc12.sc: Likewise.
	* scripttempl/elfxgate.sc: Likewise.
	* scripttempl/elfxtensa.sc: Likewise.
	* scripttempl/epiphany_4x4.sc: Likewise.
	* scripttempl/i386beos.sc: Likewise.
	* scripttempl/i386go32.sc: Likewise.
	* scripttempl/ia64vms.sc: Likewise.
	* scripttempl/ip2k.sc: Likewise.
	* scripttempl/iq2000.sc: Likewise.
	* scripttempl/mep.sc: Likewise.
	* scripttempl/mmo.sc: Likewise.
	* scripttempl/v850.sc: Likewise.
	* scripttempl/v850_rh850.sc: Likewise.
	* scripttempl/xstormy16.sc: Likewise.
	* scripttempl/DWARF.sc: New.
@
text
@d440 1
a440 1
source $srcdir/scripttempl/DWARF.sc
@


1.20
log
@	* scripttempl/alphavms.sc: Add .debug_macro section.
	* scripttempl/elf.sc: Likewise.
	* scripttempl/elf64hppa.sc: Likewise.
	* scripttempl/elf_chaos.sc: Likewise.
	* scripttempl/elfxtensa.sc: Likewise.
	* scripttempl/ia64vms.sc: Likewise.
	* scripttempl/armbpabi.sc: Add .debug_pubtypes, .debug_ranges and
	.debug_macro sections.
	* scripttempl/avr.sc: Likewise.
	* scripttempl/elf32cr16.sc: Likewise.
	* scripttempl/elf32crx.sc: Likewise.
	* scripttempl/elf32msp430.sc: Likewise.
	* scripttempl/elf32msp430_3.sc: Likewise.
	* scripttempl/elf32sh-symbian.sc: Likewise.
	* scripttempl/elfd30v.sc: Likewise.
	* scripttempl/elfi370.sc: Likewise.
	* scripttempl/elfm68hc11.sc: Likewise.
	* scripttempl/elfm68hc12.sc: Likewise.
	* scripttempl/elfxgate.sc: Likewise.
	* scripttempl/i386beos.sc: Likewise.
	* scripttempl/i386go32.sc: Likewise.
	* scripttempl/ip2k.sc: Likewise.
	* scripttempl/iq2000.sc: Likewise.
	* scripttempl/mep.sc: Likewise.
	* scripttempl/mmo.sc: Likewise.
	* scripttempl/v850.sc: Likewise.
	* scripttempl/xstormy16.sc: Likewise.
@
text
@d434 1
a434 4
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.
     Treatment of DWARF debug section must be at end of the linker
d438 1
d440 1
a440 24
  /* DWARF 1 */
  .debug	 0 : { *(.debug) }
  .line		 0 : { *(.line) }

  /* GNU DWARF 1 extensions */
  .debug_srcinfo 0 : { *(.debug_srcinfo) }
  .debug_sfnames 0 : { *(.debug_sfnames) }

  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }

  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info) *(.gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }

  /* DWARF 3 */
  .debug_pubtypes 0 : { *(.debug_pubtypes) }
  .debug_ranges   0 : { *(.debug_ranges) }
d442 1
a442 2
  /* DWARF Extension.  */
  .debug_macro    0 : { *(.debug_macro) } 
@


1.19
log
@	* scripttempl/armbpabi.sc: Revert 2010-11-02  H.J. Lu.
	* scripttempl/avr.sc: Likewise.
	* scripttempl/elf32cr16.sc: Likewise.
	* scripttempl/elf32crx.sc: Likewise.
	* scripttempl/elf32msp430.sc: Likewise.
	* scripttempl/elf32msp430_3.sc: Likewise.
	* scripttempl/elf32sh-symbian.sc: Likewise.
	* scripttempl/elf64hppa.sc: Likewise.
	* scripttempl/elf_chaos.sc: Likewise.
	* scripttempl/elfd10v.sc: Likewise.
	* scripttempl/elfd30v.sc: Likewise.
	* scripttempl/elfi370.sc: Likewise.
	* scripttempl/elfm68hc11.sc: Likewise.
	* scripttempl/elfm68hc12.sc: Likewise.
	* scripttempl/elfxtensa.sc: Likewise.
	* scripttempl/ip2k.sc: Likewise.
	* scripttempl/iq2000.sc: Likewise.
	* scripttempl/mep.sc: Likewise.
	* scripttempl/mmo.sc: Likewise.
	* scripttempl/v850.sc: Likewise.
	* scripttempl/xstormy16.sc: Likewise.
	* scripttempl/elf.sc: Revert 2010-10-29  H.J. Lu.
@
text
@d462 7
@


1.18
log
@Include compressed DWARF debug sections in ELF linker scripts.

binutils/testsuite/

2010-11-02  H.J. Lu  <hongjiu.lu@@intel.com>

	* binutils-all/libdw2.out: Also accept MIPS_DWARF.

ld/

2010-11-02  H.J. Lu  <hongjiu.lu@@intel.com>

	* scripttempl/armbpabi.sc: Include compressed DWARF debug
	sections.
	* scripttempl/avr.sc: Likewise.
	* scripttempl/elf32cr16.sc: Likewise.
	* scripttempl/elf32crx.sc: Likewise.
	* scripttempl/elf32msp430.sc: Likewise.
	* scripttempl/elf32msp430_3.sc: Likewise.
	* scripttempl/elf32sh-symbian.sc: Likewise.
	* scripttempl/elf64hppa.sc: Likewise.
	* scripttempl/elf_chaos.sc: Likewise.
	* scripttempl/elfd10v.sc: Likewise.
	* scripttempl/elfd30v.sc: Likewise.
	* scripttempl/elfi370.sc: Likewise.
	* scripttempl/elfm68hc11.sc: Likewise.
	* scripttempl/elfm68hc12.sc: Likewise.
	* scripttempl/elfxtensa.sc: Likewise.
	* scripttempl/ip2k.sc: Likewise.
	* scripttempl/iq2000.sc: Likewise.
	* scripttempl/mep.sc: Likewise.
	* scripttempl/mmo.sc: Likewise.
	* scripttempl/v850.sc: Likewise.
	* scripttempl/xstormy16.sc: Likewise.

ld/testsuite/

2010-11-02  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-elf/compress1a.d: Also check MIPS_DWARF.
	* ld-elf/compress1b.d: Likewise.
	* ld-elf/compress1c.d: Likewise.
@
text
@d447 2
a448 2
  .debug_srcinfo 0 : { *(.debug_srcinfo .zdebug_srcinfo) }
  .debug_sfnames 0 : { *(.debug_sfnames .zdebug_sfnames) }
d451 2
a452 2
  .debug_aranges  0 : { *(.debug_aranges .zdebug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames .zdebug_pubnames) }
d455 7
a461 7
  .debug_info     0 : { *(.debug_info${RELOCATING+ .gnu.linkonce.wi.*} .zdebug_info) }
  .debug_abbrev   0 : { *(.debug_abbrev .zdebug_abbrev) }
  .debug_line     0 : { *(.debug_line .zdebug_line) }
  .debug_frame    0 : { *(.debug_frame .zdebug_frame) }
  .debug_str      0 : { *(.debug_str .zdebug_str) }
  .debug_loc      0 : { *(.debug_loc .zdebug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo .zdebug_macinfo) }
@


1.18.2.1
log
@	* scripttempl/armbpabi.sc: Revert 2010-11-02  H.J. Lu.
	* scripttempl/avr.sc: Likewise.
	* scripttempl/elf32cr16.sc: Likewise.
	* scripttempl/elf32crx.sc: Likewise.
	* scripttempl/elf32msp430.sc: Likewise.
	* scripttempl/elf32msp430_3.sc: Likewise.
	* scripttempl/elf32sh-symbian.sc: Likewise.
	* scripttempl/elf64hppa.sc: Likewise.
	* scripttempl/elf_chaos.sc: Likewise.
	* scripttempl/elfd10v.sc: Likewise.
	* scripttempl/elfd30v.sc: Likewise.
	* scripttempl/elfi370.sc: Likewise.
	* scripttempl/elfm68hc11.sc: Likewise.
	* scripttempl/elfm68hc12.sc: Likewise.
	* scripttempl/elfxtensa.sc: Likewise.
	* scripttempl/ip2k.sc: Likewise.
	* scripttempl/iq2000.sc: Likewise.
	* scripttempl/mep.sc: Likewise.
	* scripttempl/mmo.sc: Likewise.
	* scripttempl/v850.sc: Likewise.
	* scripttempl/xstormy16.sc: Likewise.
	* scripttempl/elf.sc: Revert 2010-10-29  H.J. Lu.
@
text
@d447 2
a448 2
  .debug_srcinfo 0 : { *(.debug_srcinfo) }
  .debug_sfnames 0 : { *(.debug_sfnames) }
d451 2
a452 2
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
d455 7
a461 7
  .debug_info     0 : { *(.debug_info) *(.gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
@


1.17
log
@Revert 2009-09-28 changes.
@
text
@d447 2
a448 2
  .debug_srcinfo 0 : { *(.debug_srcinfo) }
  .debug_sfnames 0 : { *(.debug_sfnames) }
d451 2
a452 2
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
d455 7
a461 7
  .debug_info     0 : { *(.debug_info) *(.gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
@


1.16
log
@	* scripttempl/elf32cr16.sc: Emit empty script for ld -r and ld -Ur.
	* scripttempl/elf32cr16c.sc: Likewise.
	* scripttempl/elf32crx.sc: Likewise.
	* scripttempl/tic54xcoff.sc: Likewise.
	* scripttempl/aix.sc: Delete ${RELOCATING-0}.
	* scripttempl/avr.sc: Likewise.
	* scripttempl/elf32msp430.sc: Likewise.
	* scripttempl/elf32msp430_3.sc: Likewise.
	* scripttempl/elf32sh-symbian.sc: Likewise.
	* scripttempl/elf_chaos.sc: Likewise.
	* scripttempl/elfi370.sc: Likewise.
	* scripttempl/nw.sc: Likewise.
	* scripttempl/psos.sc: Likewise.
	* scripttempl/armbpabi.sc: Delete ${RELOCATING-0} and ${CONSTRUCTING-0}.
	* scripttempl/elf.sc: Likewise.
	* scripttempl/elf64hppa.sc: Likewise.
	* scripttempl/elfd10v.sc: Likewise.
	* scripttempl/elfd30v.sc: Likewise.
	* scripttempl/elfm68hc11.sc: Likewise.
	* scripttempl/elfm68hc12.sc: Likewise.
	* scripttempl/elfmicroblaze.sc: Likewise.
	* scripttempl/elfxtensa.sc: Likewise.
	* scripttempl/iq2000.sc: Likewise.
	* scripttempl/mep.sc: Likewise.
	* scripttempl/xstormy16.sc: Likewise.
@
text
@d27 1
a27 1
CTOR=".ctors  : 
d37 1
a37 1
DTOR="  .dtors	 :
d130 5
a134 5
  .install0  : { *(.install0) }
  .install1  : { *(.install1) }
  .install2  : { *(.install2) }
  .install3  : { *(.install3) }
  .install4  : { *(.install4) }
d138 5
a142 5
  .fini0  : { *(.fini0) }
  .fini1  : { *(.fini1) }
  .fini2  : { *(.fini2) }
  .fini3  : { *(.fini3) }
  .fini4  : { *(.fini4) }
d146 1
a146 1
  .data1  : { *(.data1) }
d151 3
a153 3
  .sdata    : { *(.sdata) }
  .sbss     : { *(.sbss) }
  .scommon  : { *(.scommon) }
d157 1
a157 1
  .softregs  : { *(.softregs) }
d175 6
a180 6
  .hash         : { *(.hash)		}
  .dynsym       : { *(.dynsym)		}
  .dynstr       : { *(.dynstr)		}
  .gnu.version		 : { *(.gnu.version) }
  .gnu.version_d	 : { *(.gnu.version_d) }
  .gnu.version_r	 : { *(.gnu.version_r) }
d182 1
a182 1
  .rel.text     :
d188 1
a188 1
  .rela.text    :
d194 1
a194 1
  .rel.data     :
d200 1
a200 1
  .rela.data    :
d206 1
a206 1
  .rel.rodata   :
d212 1
a212 1
  .rela.rodata  :
d218 1
a218 1
  .rel.sdata    :
d224 1
a224 1
  .rela.sdata    :
d230 1
a230 1
  .rel.sbss     :
d236 1
a236 1
  .rela.sbss    :
d242 1
a242 1
  .rel.bss      : 
d248 1
a248 1
  .rela.bss     : 
d254 28
a281 28
  .rel.stext		 : { *(.rel.stest) }
  .rela.stext		 : { *(.rela.stest) }
  .rel.etext		 : { *(.rel.etest) }
  .rela.etext		 : { *(.rela.etest) }
  .rel.sdata		 : { *(.rel.sdata) }
  .rela.sdata		 : { *(.rela.sdata) }
  .rel.edata		 : { *(.rel.edata) }
  .rela.edata		 : { *(.rela.edata) }
  .rel.eit_v		 : { *(.rel.eit_v) }
  .rela.eit_v		 : { *(.rela.eit_v) }
  .rel.ebss		 : { *(.rel.ebss) }
  .rela.ebss		 : { *(.rela.ebss) }
  .rel.srodata		 : { *(.rel.srodata) }
  .rela.srodata		 : { *(.rela.srodata) }
  .rel.erodata		 : { *(.rel.erodata) }
  .rela.erodata		 : { *(.rela.erodata) }
  .rel.got		 : { *(.rel.got) }
  .rela.got		 : { *(.rela.got) }
  .rel.ctors		 : { *(.rel.ctors) }
  .rela.ctors		 : { *(.rela.ctors) }
  .rel.dtors		 : { *(.rel.dtors) }
  .rela.dtors		 : { *(.rela.dtors) }
  .rel.init		 : { *(.rel.init) }
  .rela.init		 : { *(.rela.init) }
  .rel.fini		 : { *(.rel.fini) }
  .rela.fini		 : { *(.rela.fini) }
  .rel.plt		 : { *(.rel.plt) }
  .rela.plt		 : { *(.rela.plt) }
d291 1
a291 1
  .stext  : 
d296 1
a296 1
  .init	 :
d304 1
a304 1
  .text :
d325 1
a325 1
  .eh_frame  :
d330 1
a330 1
  .gcc_except_table  :
d335 1
a335 1
  .rodata   :
d343 1
a343 1
  .rodata1  :
d353 1
a353 1
  .jcr  :
d366 1
a366 1
  .data   : ${RELOCATING+AT (__data_image)}
d390 1
a390 1
  /* .install :
d399 1
a399 1
  .bss  :
d416 1
a416 1
  .eeprom  :
@


1.15
log
@        * scripttempl/armbpabi.sc (ENTRY): Do not define when performing a
        relocatable link.
        * scripttempl/elf32cr16.sc: Likewise.
        * scripttempl/elf32cr16c.sc: Likewise.
        * scripttempl/elf32crx.sc: Likewise.
        * scripttempl/elf32sh-symbian.sc: Likewise.
        * scripttempl/elf_chaos.sc: Likewise.
        * scripttempl/elfd10v.sc: Likewise.
        * scripttempl/elfi370.sc: Likewise.
        * scripttempl/elfm68hc11.sc: Likewise.
        * scripttempl/elfm68hc12.sc: Likewise.
        * scripttempl/ip2k.sc: Likewise.
        * scripttempl/iq2000.sc: Likewise.
        * scripttempl/mep.sc: Likewise.
        * scripttempl/v850.sc: Likewise.
        * scripttempl/xstormy16.sc: Likewise.
@
text
@d27 1
a27 1
CTOR=".ctors ${CONSTRUCTING-0} : 
d37 1
a37 1
DTOR="  .dtors	${CONSTRUCTING-0} :
d130 5
a134 5
  .install0 0 : { *(.install0) }
  .install1 0 : { *(.install1) }
  .install2 0 : { *(.install2) }
  .install3 0 : { *(.install3) }
  .install4 0 : { *(.install4) }
d138 5
a142 5
  .fini0 0 : { *(.fini0) }
  .fini1 0 : { *(.fini1) }
  .fini2 0 : { *(.fini2) }
  .fini3 0 : { *(.fini3) }
  .fini4 0 : { *(.fini4) }
d146 1
a146 1
  .data1 0 : { *(.data1) }
d151 3
a153 3
  .sdata   0 : { *(.sdata) }
  .sbss    0 : { *(.sbss) }
  .scommon 0 : { *(.scommon) }
d157 1
a157 1
  .softregs 0 : { *(.softregs) }
d175 6
a180 6
  .hash        ${RELOCATING-0} : { *(.hash)		}
  .dynsym      ${RELOCATING-0} : { *(.dynsym)		}
  .dynstr      ${RELOCATING-0} : { *(.dynstr)		}
  .gnu.version		${RELOCATING-0} : { *(.gnu.version) }
  .gnu.version_d	${RELOCATING-0} : { *(.gnu.version_d) }
  .gnu.version_r	${RELOCATING-0} : { *(.gnu.version_r) }
d182 1
a182 1
  .rel.text    ${RELOCATING-0} :
d188 1
a188 1
  .rela.text   ${RELOCATING-0} :
d194 1
a194 1
  .rel.data    ${RELOCATING-0} :
d200 1
a200 1
  .rela.data   ${RELOCATING-0} :
d206 1
a206 1
  .rel.rodata  ${RELOCATING-0} :
d212 1
a212 1
  .rela.rodata ${RELOCATING-0} :
d218 1
a218 1
  .rel.sdata   ${RELOCATING-0} :
d224 1
a224 1
  .rela.sdata   ${RELOCATING-0} :
d230 1
a230 1
  .rel.sbss    ${RELOCATING-0} :
d236 1
a236 1
  .rela.sbss   ${RELOCATING-0} :
d242 1
a242 1
  .rel.bss     ${RELOCATING-0} : 
d248 1
a248 1
  .rela.bss    ${RELOCATING-0} : 
d254 28
a281 28
  .rel.stext		${RELOCATING-0} : { *(.rel.stest) }
  .rela.stext		${RELOCATING-0} : { *(.rela.stest) }
  .rel.etext		${RELOCATING-0} : { *(.rel.etest) }
  .rela.etext		${RELOCATING-0} : { *(.rela.etest) }
  .rel.sdata		${RELOCATING-0} : { *(.rel.sdata) }
  .rela.sdata		${RELOCATING-0} : { *(.rela.sdata) }
  .rel.edata		${RELOCATING-0} : { *(.rel.edata) }
  .rela.edata		${RELOCATING-0} : { *(.rela.edata) }
  .rel.eit_v		${RELOCATING-0} : { *(.rel.eit_v) }
  .rela.eit_v		${RELOCATING-0} : { *(.rela.eit_v) }
  .rel.ebss		${RELOCATING-0} : { *(.rel.ebss) }
  .rela.ebss		${RELOCATING-0} : { *(.rela.ebss) }
  .rel.srodata		${RELOCATING-0} : { *(.rel.srodata) }
  .rela.srodata		${RELOCATING-0} : { *(.rela.srodata) }
  .rel.erodata		${RELOCATING-0} : { *(.rel.erodata) }
  .rela.erodata		${RELOCATING-0} : { *(.rela.erodata) }
  .rel.got		${RELOCATING-0} : { *(.rel.got) }
  .rela.got		${RELOCATING-0} : { *(.rela.got) }
  .rel.ctors		${RELOCATING-0} : { *(.rel.ctors) }
  .rela.ctors		${RELOCATING-0} : { *(.rela.ctors) }
  .rel.dtors		${RELOCATING-0} : { *(.rel.dtors) }
  .rela.dtors		${RELOCATING-0} : { *(.rela.dtors) }
  .rel.init		${RELOCATING-0} : { *(.rel.init) }
  .rela.init		${RELOCATING-0} : { *(.rela.init) }
  .rel.fini		${RELOCATING-0} : { *(.rel.fini) }
  .rela.fini		${RELOCATING-0} : { *(.rela.fini) }
  .rel.plt		${RELOCATING-0} : { *(.rel.plt) }
  .rela.plt		${RELOCATING-0} : { *(.rela.plt) }
d291 1
a291 1
  .stext ${RELOCATING-0} : 
d296 1
a296 1
  .init	${RELOCATING-0} :
d304 1
a304 1
  .text ${RELOCATING-0}:
d325 1
a325 1
  .eh_frame ${RELOCATING-0} :
d330 1
a330 1
  .gcc_except_table ${RELOCATING-0} :
d335 1
a335 1
  .rodata  ${RELOCATING-0} :
d343 1
a343 1
  .rodata1 ${RELOCATING-0} :
d353 1
a353 1
  .jcr ${RELOCATING-0} :
d366 1
a366 1
  .data  ${RELOCATING-0} : ${RELOCATING+AT (__data_image)}
d390 1
a390 1
  /* .install ${RELOCATING-0}:
d399 1
a399 1
  .bss ${RELOCATING-0} :
d416 1
a416 1
  .eeprom ${RELOCATING-0} :
@


1.15.8.1
log
@2009-09-29  Alan Modra  <amodra@@bigpond.net.au>

	* ldlang.c (lang_size_sections_1): Allow scripts to specify a
	non-zero vma even when relocatable.

2009-09-28  Alan Modra  <amodra@@bigpond.net.au>

	* scripttempl/elf32cr16.sc: Emit empty script for ld -r and ld -Ur.
	* scripttempl/elf32cr16c.sc: Likewise.
	* scripttempl/elf32crx.sc: Likewise.
	* scripttempl/tic54xcoff.sc: Likewise.
	* scripttempl/aix.sc: Delete ${RELOCATING-0}.
	* scripttempl/avr.sc: Likewise.
	* scripttempl/elf32msp430.sc: Likewise.
	* scripttempl/elf32msp430_3.sc: Likewise.
	* scripttempl/elf32sh-symbian.sc: Likewise.
	* scripttempl/elf_chaos.sc: Likewise.
	* scripttempl/elfi370.sc: Likewise.
	* scripttempl/nw.sc: Likewise.
	* scripttempl/psos.sc: Likewise.
	* scripttempl/armbpabi.sc: Delete ${RELOCATING-0} and ${CONSTRUCTING-0}.
	* scripttempl/elf.sc: Likewise.
	* scripttempl/elf64hppa.sc: Likewise.
	* scripttempl/elfd10v.sc: Likewise.
	* scripttempl/elfd30v.sc: Likewise.
	* scripttempl/elfm68hc11.sc: Likewise.
	* scripttempl/elfm68hc12.sc: Likewise.
	* scripttempl/elfmicroblaze.sc: Likewise.
	* scripttempl/elfxtensa.sc: Likewise.
	* scripttempl/iq2000.sc: Likewise.
	* scripttempl/mep.sc: Likewise.
	* scripttempl/xstormy16.sc: Likewise.

2009-09-27  Christopher Faylor  <me+cygwin@@cgf.cx>

	* ldlang.c (lang_size_sections_1): Always force output vma to zero for
	relocatable sections.
	(lang_size_sections_1): Revert previous COFF-only accommodation for
	relocatable sections.
@
text
@d27 1
a27 1
CTOR=".ctors  : 
d37 1
a37 1
DTOR="  .dtors	 :
d130 5
a134 5
  .install0  : { *(.install0) }
  .install1  : { *(.install1) }
  .install2  : { *(.install2) }
  .install3  : { *(.install3) }
  .install4  : { *(.install4) }
d138 5
a142 5
  .fini0  : { *(.fini0) }
  .fini1  : { *(.fini1) }
  .fini2  : { *(.fini2) }
  .fini3  : { *(.fini3) }
  .fini4  : { *(.fini4) }
d146 1
a146 1
  .data1  : { *(.data1) }
d151 3
a153 3
  .sdata    : { *(.sdata) }
  .sbss     : { *(.sbss) }
  .scommon  : { *(.scommon) }
d157 1
a157 1
  .softregs  : { *(.softregs) }
d175 6
a180 6
  .hash         : { *(.hash)		}
  .dynsym       : { *(.dynsym)		}
  .dynstr       : { *(.dynstr)		}
  .gnu.version		 : { *(.gnu.version) }
  .gnu.version_d	 : { *(.gnu.version_d) }
  .gnu.version_r	 : { *(.gnu.version_r) }
d182 1
a182 1
  .rel.text     :
d188 1
a188 1
  .rela.text    :
d194 1
a194 1
  .rel.data     :
d200 1
a200 1
  .rela.data    :
d206 1
a206 1
  .rel.rodata   :
d212 1
a212 1
  .rela.rodata  :
d218 1
a218 1
  .rel.sdata    :
d224 1
a224 1
  .rela.sdata    :
d230 1
a230 1
  .rel.sbss     :
d236 1
a236 1
  .rela.sbss    :
d242 1
a242 1
  .rel.bss      : 
d248 1
a248 1
  .rela.bss     : 
d254 28
a281 28
  .rel.stext		 : { *(.rel.stest) }
  .rela.stext		 : { *(.rela.stest) }
  .rel.etext		 : { *(.rel.etest) }
  .rela.etext		 : { *(.rela.etest) }
  .rel.sdata		 : { *(.rel.sdata) }
  .rela.sdata		 : { *(.rela.sdata) }
  .rel.edata		 : { *(.rel.edata) }
  .rela.edata		 : { *(.rela.edata) }
  .rel.eit_v		 : { *(.rel.eit_v) }
  .rela.eit_v		 : { *(.rela.eit_v) }
  .rel.ebss		 : { *(.rel.ebss) }
  .rela.ebss		 : { *(.rela.ebss) }
  .rel.srodata		 : { *(.rel.srodata) }
  .rela.srodata		 : { *(.rela.srodata) }
  .rel.erodata		 : { *(.rel.erodata) }
  .rela.erodata		 : { *(.rela.erodata) }
  .rel.got		 : { *(.rel.got) }
  .rela.got		 : { *(.rela.got) }
  .rel.ctors		 : { *(.rel.ctors) }
  .rela.ctors		 : { *(.rela.ctors) }
  .rel.dtors		 : { *(.rel.dtors) }
  .rela.dtors		 : { *(.rela.dtors) }
  .rel.init		 : { *(.rel.init) }
  .rela.init		 : { *(.rela.init) }
  .rel.fini		 : { *(.rel.fini) }
  .rela.fini		 : { *(.rela.fini) }
  .rel.plt		 : { *(.rel.plt) }
  .rela.plt		 : { *(.rela.plt) }
d291 1
a291 1
  .stext  : 
d296 1
a296 1
  .init	 :
d304 1
a304 1
  .text :
d325 1
a325 1
  .eh_frame  :
d330 1
a330 1
  .gcc_except_table  :
d335 1
a335 1
  .rodata   :
d343 1
a343 1
  .rodata1  :
d353 1
a353 1
  .jcr  :
d366 1
a366 1
  .data   : ${RELOCATING+AT (__data_image)}
d390 1
a390 1
  /* .install :
d399 1
a399 1
  .bss  :
d416 1
a416 1
  .eeprom  :
@


1.15.8.2
log
@	PR ld/10749
	* ldlang.c (lang_size_sections_1): Zero section vmas only for COFF.
	* scripttempl/elf32cr16.sc: Revert 2009-09-28 change.
	* scripttempl/elf32cr16c.sc: Likewise.
	* scripttempl/elf32crx.sc: Likewise.
	* scripttempl/tic54xcoff.sc: Likewise.
	* scripttempl/aix.sc: Likewise.
	* scripttempl/avr.sc: Likewise.
	* scripttempl/elf32msp430.sc: Likewise.
	* scripttempl/elf32msp430_3.sc: Likewise.
	* scripttempl/elf32sh-symbian.sc: Likewise.
	* scripttempl/elf_chaos.sc: Likewise.
	* scripttempl/elfi370.sc: Likewise.
	* scripttempl/nw.sc: Likewise.
	* scripttempl/psos.sc: Likewise.
	* scripttempl/armbpabi.sc: Likewise.
	* scripttempl/elf.sc: Likewise.
	* scripttempl/elf64hppa.sc: Likewise.
	* scripttempl/elfd10v.sc: Likewise.
	* scripttempl/elfd30v.sc: Likewise.
	* scripttempl/elfm68hc11.sc: Likewise.
	* scripttempl/elfm68hc12.sc: Likewise.
	* scripttempl/elfmicroblaze.sc: Likewise.
	* scripttempl/elfxtensa.sc: Likewise.
	* scripttempl/iq2000.sc: Likewise.
	* scripttempl/mep.sc: Likewise.
	* scripttempl/xstormy16.sc: Likewise.

2009-10-03  Alan Modra  <amodra@@bigpond.net.au>

	* emultempl/ppc32elf.em (emit_stub_syms): Init to -1.
	(ppc_after_open): Set emit_stubs_syms by default when shared.
	(OPTION_NO_STUBSYMS): Define.
	(PARSE_AND_LIST_LONGOPTS, PARSE_AND_LIST_OPTIONS,
	PARSE_AND_LIST_ARGS_CASES): Handle --no-emit-stub-syms.
	* emultempl/ppc64elf.em (emit_stub_syms): Init to -1.
	(gld${EMULATION_NAME}_finish): Set emit_stubs_syms by default.
	(OPTION_NO_STUBSYMS): Define.
	(PARSE_AND_LIST_LONGOPTS, PARSE_AND_LIST_OPTIONS,
	PARSE_AND_LIST_ARGS_CASES): Handle --no-emit-stub-syms.

2009-09-30  Matthias Klose  <doko@@ubuntu.com>

	PR ld/9863
	* emulparams/armelf_linux.sh (DATA_START_SYMBOLS): Use PROVIDE
	with __data_start.

2009-09-29  Joel Sherrill <joel.sherrill@@oarcorp.com>

	* emulparams/m68kelf.sh (NOP): Use 0x4e71 (nop) rather than 0x4e75
	(rts).

2009-09-29  Alan Modra  <amodra@@bigpond.net.au>

	* ldlang.c (lang_size_sections_1): Allow scripts to specify a
	non-zero vma even when relocatable.

2009-09-28  Alan Modra  <amodra@@bigpond.net.au>

	* scripttempl/elf32cr16.sc: Emit empty script for ld -r and ld -Ur.
	* scripttempl/elf32cr16c.sc: Likewise.
	* scripttempl/elf32crx.sc: Likewise.
	* scripttempl/tic54xcoff.sc: Likewise.
	* scripttempl/aix.sc: Delete ${RELOCATING-0}.
	* scripttempl/avr.sc: Likewise.
	* scripttempl/elf32msp430.sc: Likewise.
	* scripttempl/elf32msp430_3.sc: Likewise.
	* scripttempl/elf32sh-symbian.sc: Likewise.
	* scripttempl/elf_chaos.sc: Likewise.
	* scripttempl/elfi370.sc: Likewise.
	* scripttempl/nw.sc: Likewise.
	* scripttempl/psos.sc: Likewise.
	* scripttempl/armbpabi.sc: Delete ${RELOCATING-0} and ${CONSTRUCTING-0}.
	* scripttempl/elf.sc: Likewise.
	* scripttempl/elf64hppa.sc: Likewise.
	* scripttempl/elfd10v.sc: Likewise.
	* scripttempl/elfd30v.sc: Likewise.
	* scripttempl/elfm68hc11.sc: Likewise.
	* scripttempl/elfm68hc12.sc: Likewise.
	* scripttempl/elfmicroblaze.sc: Likewise.
	* scripttempl/elfxtensa.sc: Likewise.
	* scripttempl/iq2000.sc: Likewise.
	* scripttempl/mep.sc: Likewise.
	* scripttempl/xstormy16.sc: Likewise.
@
text
@d27 1
a27 1
CTOR=".ctors ${CONSTRUCTING-0} : 
d37 1
a37 1
DTOR="  .dtors	${CONSTRUCTING-0} :
d130 5
a134 5
  .install0 0 : { *(.install0) }
  .install1 0 : { *(.install1) }
  .install2 0 : { *(.install2) }
  .install3 0 : { *(.install3) }
  .install4 0 : { *(.install4) }
d138 5
a142 5
  .fini0 0 : { *(.fini0) }
  .fini1 0 : { *(.fini1) }
  .fini2 0 : { *(.fini2) }
  .fini3 0 : { *(.fini3) }
  .fini4 0 : { *(.fini4) }
d146 1
a146 1
  .data1 0 : { *(.data1) }
d151 3
a153 3
  .sdata   0 : { *(.sdata) }
  .sbss    0 : { *(.sbss) }
  .scommon 0 : { *(.scommon) }
d157 1
a157 1
  .softregs 0 : { *(.softregs) }
d175 6
a180 6
  .hash        ${RELOCATING-0} : { *(.hash)		}
  .dynsym      ${RELOCATING-0} : { *(.dynsym)		}
  .dynstr      ${RELOCATING-0} : { *(.dynstr)		}
  .gnu.version		${RELOCATING-0} : { *(.gnu.version) }
  .gnu.version_d	${RELOCATING-0} : { *(.gnu.version_d) }
  .gnu.version_r	${RELOCATING-0} : { *(.gnu.version_r) }
d182 1
a182 1
  .rel.text    ${RELOCATING-0} :
d188 1
a188 1
  .rela.text   ${RELOCATING-0} :
d194 1
a194 1
  .rel.data    ${RELOCATING-0} :
d200 1
a200 1
  .rela.data   ${RELOCATING-0} :
d206 1
a206 1
  .rel.rodata  ${RELOCATING-0} :
d212 1
a212 1
  .rela.rodata ${RELOCATING-0} :
d218 1
a218 1
  .rel.sdata   ${RELOCATING-0} :
d224 1
a224 1
  .rela.sdata   ${RELOCATING-0} :
d230 1
a230 1
  .rel.sbss    ${RELOCATING-0} :
d236 1
a236 1
  .rela.sbss   ${RELOCATING-0} :
d242 1
a242 1
  .rel.bss     ${RELOCATING-0} : 
d248 1
a248 1
  .rela.bss    ${RELOCATING-0} : 
d254 28
a281 28
  .rel.stext		${RELOCATING-0} : { *(.rel.stest) }
  .rela.stext		${RELOCATING-0} : { *(.rela.stest) }
  .rel.etext		${RELOCATING-0} : { *(.rel.etest) }
  .rela.etext		${RELOCATING-0} : { *(.rela.etest) }
  .rel.sdata		${RELOCATING-0} : { *(.rel.sdata) }
  .rela.sdata		${RELOCATING-0} : { *(.rela.sdata) }
  .rel.edata		${RELOCATING-0} : { *(.rel.edata) }
  .rela.edata		${RELOCATING-0} : { *(.rela.edata) }
  .rel.eit_v		${RELOCATING-0} : { *(.rel.eit_v) }
  .rela.eit_v		${RELOCATING-0} : { *(.rela.eit_v) }
  .rel.ebss		${RELOCATING-0} : { *(.rel.ebss) }
  .rela.ebss		${RELOCATING-0} : { *(.rela.ebss) }
  .rel.srodata		${RELOCATING-0} : { *(.rel.srodata) }
  .rela.srodata		${RELOCATING-0} : { *(.rela.srodata) }
  .rel.erodata		${RELOCATING-0} : { *(.rel.erodata) }
  .rela.erodata		${RELOCATING-0} : { *(.rela.erodata) }
  .rel.got		${RELOCATING-0} : { *(.rel.got) }
  .rela.got		${RELOCATING-0} : { *(.rela.got) }
  .rel.ctors		${RELOCATING-0} : { *(.rel.ctors) }
  .rela.ctors		${RELOCATING-0} : { *(.rela.ctors) }
  .rel.dtors		${RELOCATING-0} : { *(.rel.dtors) }
  .rela.dtors		${RELOCATING-0} : { *(.rela.dtors) }
  .rel.init		${RELOCATING-0} : { *(.rel.init) }
  .rela.init		${RELOCATING-0} : { *(.rela.init) }
  .rel.fini		${RELOCATING-0} : { *(.rel.fini) }
  .rela.fini		${RELOCATING-0} : { *(.rela.fini) }
  .rel.plt		${RELOCATING-0} : { *(.rel.plt) }
  .rela.plt		${RELOCATING-0} : { *(.rela.plt) }
d291 1
a291 1
  .stext ${RELOCATING-0} : 
d296 1
a296 1
  .init	${RELOCATING-0} :
d304 1
a304 1
  .text ${RELOCATING-0}:
d325 1
a325 1
  .eh_frame ${RELOCATING-0} :
d330 1
a330 1
  .gcc_except_table ${RELOCATING-0} :
d335 1
a335 1
  .rodata  ${RELOCATING-0} :
d343 1
a343 1
  .rodata1 ${RELOCATING-0} :
d353 1
a353 1
  .jcr ${RELOCATING-0} :
d366 1
a366 1
  .data  ${RELOCATING-0} : ${RELOCATING+AT (__data_image)}
d390 1
a390 1
  /* .install ${RELOCATING-0}:
d399 1
a399 1
  .bss ${RELOCATING-0} :
d416 1
a416 1
  .eeprom ${RELOCATING-0} :
@


1.14
log
@	* scripttempl/elfm68hc12.sc: Align text, rodata and data section
	on power of 2.
@
text
@d167 1
a167 1
ENTRY(${ENTRY})
@


1.13
log
@	* scripttempl/elfm68hc12.sc: Define eeprom memory region.
@
text
@d322 2
a323 2

  } ${RELOCATING+ > ${TEXT_MEMORY}}
d340 2
a341 1
  } ${RELOCATING+ > ${TEXT_MEMORY}}
d346 2
a347 1
  } ${RELOCATING+ > ${TEXT_MEMORY}}
d381 2
a382 1
  } ${RELOCATING+ > ${DATA_MEMORY}}
@


1.12
log
@	* scripttempl/elfm68hc12.sc: Add gcc_except_table.
	* scripttempl/elfm68hc11.sc: Likewise.
@
text
@d90 1
@


1.11
log
@	* scripttempl/elfm68hc11.sc: Keep ctor/dtor sections; Take into
	account .tramp sections;
	* scripttempl/elfm68hc12.sc: Likewise.
@
text
@d329 5
@


1.10
log
@	* scripttempl/elfm68hc11.sc: Use KEEP for .vectors, .installN,
	.finiN section.
	* scripttempl/elfm68hc12.sc: Likewise.
@
text
@d31 1
a31 9
    *(.ctors)
    /* We don't want to include the .ctor section from
       from the crtend.o file until after the sorted ctors.
       The .ctor section from the crtend file contains the
       end of ctors marker and it must be last

    KEEP (*(EXCLUDE_FILE (*crtend.o) .ctors))
    KEEP (*(SORT(.ctors.*)))
    KEEP (*(.ctors)) */
d40 1
a40 6
    *(.dtors)
    /*
    KEEP (*crtbegin.o(.dtors))
    KEEP (*(EXCLUDE_FILE (*crtend.o) .dtors))
    KEEP (*(SORT(.dtors.*)))
    KEEP (*(.dtors)) */
d314 2
@


1.10.2.1
log
@	* scripttempl/elfm68hc11.sc: Keep ctor/dtor sections; Take into
	account .tramp sections;
	* scripttempl/elfm68hc12.sc: Likewise.
@
text
@d31 9
a39 1
    KEEP (*(.ctors))
d48 6
a53 1
    KEEP (*(.dtors))
a326 2
    ${RELOCATING+*(.tramp)}
    ${RELOCATING+*(.tramp.*)}
@


1.10.2.2
log
@	* scripttempl/elfm68hc12.sc: Add gcc_except_table.
	* scripttempl/elfm68hc11.sc: Likewise.
@
text
@a328 5
  .gcc_except_table ${RELOCATING-0} :
  {
    *(.gcc_except_table)
  } ${RELOCATING+ > ${TEXT_MEMORY}}

@


1.9
log
@	* scripttempl/elfd30v.sc: Order reloc sections placing .plt last.
	* scripttempl/elfm68hc11.sc: Likewise.
	* scripttempl/elfm68hc12.sc: Likewise.
@
text
@d78 1
a78 1
    *(.vectors)
d113 5
a117 5
    *(.install0)	/* Section should setup the stack pointer.  */
    *(.install1)	/* Place holder for applications.  */
    *(.install2)	/* Optional installation of data sections in RAM.  */
    *(.install3)	/* Place holder for applications.  */
    *(.install4)	/* Section that calls the main.  */
d122 5
a126 5
    *(.fini0)		/* Beginning of finish code (_exit symbol).  */
    *(.fini1)		/* Place holder for applications.  */
    *(.fini2)		/* C++ destructors.  */
    *(.fini3)		/* Place holder for applications.  */
    *(.fini4)		/* Runtime exit.  */
@


1.8
log
@	* emulparams/m68hc12elfb.sh (EEPROM_MEMORY): Define.
	* emulparams/m68hc11elfb.sh (EEPROM_MEMORY): Define.
	* emulparams/m68hc11elf.sh (EEPROM_SIZE): Define.
	(EEPROM_START_ADDR): Define.
	(EEPROM_MEMORY): Define.
	* emulparams/m68hc12elf.sh: Likewise.
	* scripttempl/elfm68hc11.sc: Handle .eeprom section; handle .softregs
	section to put soft registers in .page0.
	* scripttempl/elfm68hc12.sc: Likewise but put soft registers in bss.
@
text
@d266 1
d268 1
d270 1
d272 1
d274 1
d276 1
d278 1
d280 1
d282 1
d284 1
d286 1
d288 1
d290 1
d292 1
a293 15

  .rel.stext		${RELOCATING-0} : { *(.rel.stest) }
  .rel.etext		${RELOCATING-0} : { *(.rel.etest) }
  .rel.sdata		${RELOCATING-0} : { *(.rel.sdata) }
  .rel.edata		${RELOCATING-0} : { *(.rel.edata) }
  .rel.ebss		${RELOCATING-0} : { *(.rel.ebss) }
  .rel.eit_v		${RELOCATING-0} : { *(.rel.eit_v) }
  .rel.srodata		${RELOCATING-0} : { *(.rel.srodata) }
  .rel.erodata		${RELOCATING-0} : { *(.rel.erodata) }
  .rel.got		${RELOCATING-0} : { *(.rel.got) }
  .rel.ctors		${RELOCATING-0} : { *(.rel.ctors) }
  .rel.dtors		${RELOCATING-0} : { *(.rel.dtors) }
  .rel.init		${RELOCATING-0} : { *(.rel.init) }
  .rel.fini		${RELOCATING-0} : { *(.rel.fini) }
  .rel.plt		${RELOCATING-0} : { *(.rel.plt) }
@


1.8.2.1
log
@Merge from mainline.
@
text
@a265 1
  .rel.stext		${RELOCATING-0} : { *(.rel.stest) }
a266 1
  .rel.etext		${RELOCATING-0} : { *(.rel.etest) }
a267 1
  .rel.sdata		${RELOCATING-0} : { *(.rel.sdata) }
a268 1
  .rel.edata		${RELOCATING-0} : { *(.rel.edata) }
a269 1
  .rel.eit_v		${RELOCATING-0} : { *(.rel.eit_v) }
d271 14
d286 1
a286 1
  .rela.ebss		${RELOCATING-0} : { *(.rela.ebss) }
a287 1
  .rela.srodata		${RELOCATING-0} : { *(.rela.srodata) }
a288 1
  .rela.erodata		${RELOCATING-0} : { *(.rela.erodata) }
a289 1
  .rela.got		${RELOCATING-0} : { *(.rela.got) }
a290 1
  .rela.ctors		${RELOCATING-0} : { *(.rela.ctors) }
a291 1
  .rela.dtors		${RELOCATING-0} : { *(.rela.dtors) }
a292 1
  .rela.init		${RELOCATING-0} : { *(.rela.init) }
a293 1
  .rela.fini		${RELOCATING-0} : { *(.rela.fini) }
a294 1
  .rela.plt		${RELOCATING-0} : { *(.rela.plt) }
@


1.7
log
@	* scripttempl/elfm68hc11.sc (CTOR, DTOR): Put constructor and
	destructor in rom.
	* scripttempl/elfm68hc12.sc (CTOR, DTOR): Likewise.
@
text
@d168 4
d400 1
d405 1
d418 6
@


1.6
log
@	* ld.texinfo: Document that fill values now use the four least
	significant bytes.
	* emulparams/elf32fr30.sh (NOP): Update.
	* emulparams/elf32mcore.sh: Likewise.
	* emulparams/elf64_s390.sh: Likewise.
	* emulparams/elf_i386.sh: Likewise.
	* emulparams/elf_i386_be.sh: Likewise.
	* emulparams/elf_i386_chaos.sh: Likewise.
	* emulparams/elf_i386_ldso.sh: Likewise.
	* emulparams/elf_s390.sh: Likewise.
	* emulparams/elf_x86_64.sh: Likewise.
	* emulparams/i386moss.sh: Likewise.
	* emulparams/i386nw.sh: Likewise.
	* emulparams/m68kelf.sh: Likewise.
	* scripttempl/elf.sc: Update NOP comment.
	* scripttempl/elfi370.sc: Likewise.
	* scripttempl/elfm68hc11.sc: Likewise.
	* scripttempl/elfm68hc12.sc: Likewise.
	* scripttempl/nw.sc: Likewise.
@
text
@d43 1
a43 1
  } ${RELOCATING+ > ${DATA_MEMORY}}"
d55 1
a55 1
  } ${RELOCATING+ > ${DATA_MEMORY}}"
@


1.5
log
@        * scripttempl/elf.sc, scripttempl/elfd30v.sc,
        scripttempl/elfm68hc11.sc, scripttempl/elfm68hc12.sc,
        scripttempl/v850.sc: Keep .jcr data.
@
text
@d3 1
a3 1
#	NOP - two byte opcode for no-op (defaults to 0)
@


1.4
log
@	* scripttempl/elfm68hc12.sc (FINISH_CODE, FINISH_RELOC): New to handle
	.fini[0-4] sections used by _exit
	(CTOR, DTOR): Export ctor/dtor symbols; move them to ROM.
	(*.text,*.data,*.bss): Take into account .text.*, .data.*, .bss.*.
	* scripttempl/elfm68hc11.sc: Likewise.
@
text
@d334 1
a334 1
    *(.eh_frame)
d352 5
@


1.3
log
@Add .gnu.linkonce.wi.* to .debug_info sections.
@
text
@d29 1
a29 1
    ${CONSTRUCTING+ __CTOR_LIST__ = .; }
d42 1
a42 1
    ${CONSTRUCTING+ __CTOR_END__ = .; }
d47 1
a47 1
    ${CONSTRUCTING+ __DTOR_LIST__ = .; }
d54 1
a54 1
    ${CONSTRUCTING+ __DTOR_END__ = .; }
d120 9
d149 8
d190 72
a261 3
  .rela.text		${RELOCATING-0} : { *(.rela.text) *(.rela.gnu.linkonce.t*) }
  .rela.data		${RELOCATING-0} : { *(.rela.data) *(.rela.gnu.linkonce.d*) }
  .rela.rodata		${RELOCATING-0} : { *(.rela.rodata) *(.rela.gnu.linkonce.r*) }
a266 1
  .rela.sbss		${RELOCATING-0} : { *(.rela.sbss) }
a274 1
  .rela.bss		${RELOCATING-0} : { *(.rela.bss) }
a276 2
  .rel.data		${RELOCATING-0} : { *(.rel.data) *(.rel.gnu.linkonce.d*) }
  .rel.rodata		${RELOCATING-0} : { *(.rel.rodata) *(.rel.gnu.linkonce.r*) }
a280 1
  .rel.sbss		${RELOCATING-0} : { *(.rel.sbss) }
a289 1
  .rel.bss		${RELOCATING-0} : { *(.rel.bss) }
d311 1
d320 1
a320 1
    *(.fini)
d323 3
a325 1
    *(.gnu.linkonce.t*)
d340 2
a341 1
    *(.gnu.linkonce.r*)
d349 4
d369 1
d371 1
a371 1
    *(.gnu.linkonce.d*)
d400 2
a406 3

  ${RELOCATING+${CTOR}}
  ${RELOCATING+${DTOR}}
@


1.3.2.1
log
@	* scripttempl/elfm68hc12.sc (FINISH_CODE, FINISH_RELOC): New to handle
	.fini[0-4] sections used by _exit
	(CTOR, DTOR): Export ctor/dtor symbols; move them to ROM.
	(*.text,*.data,*.bss): Take into account .text.*, .data.*, .bss.*.
	* scripttempl/elfm68hc11.sc: Likewise.
@
text
@d29 1
a29 1
    ${CONSTRUCTING+ PROVIDE (__CTOR_LIST__ = .); }
d42 1
a42 1
    ${CONSTRUCTING+ PROVIDE(__CTOR_END__ = .); }
d47 1
a47 1
    ${CONSTRUCTING+ PROVIDE(__DTOR_LIST__ = .); }
d54 1
a54 1
    ${CONSTRUCTING+ PROVIDE(__DTOR_END__ = .); }
a119 9
FINISH_CODE="
    /* Finish code.  */
    *(.fini0)		/* Beginning of finish code (_exit symbol).  */
    *(.fini1)		/* Place holder for applications.  */
    *(.fini2)		/* C++ destructors.  */
    *(.fini3)		/* Place holder for applications.  */
    *(.fini4)		/* Runtime exit.  */
"

a139 8
FINISH_RELOC="
  .fini0 0 : { *(.fini0) }
  .fini1 0 : { *(.fini1) }
  .fini2 0 : { *(.fini2) }
  .fini3 0 : { *(.fini3) }
  .fini4 0 : { *(.fini4) }
"

d173 3
a175 72
  .rel.text    ${RELOCATING-0} :
    {
      *(.rel.text)
      ${RELOCATING+*(.rel.text.*)}
      ${RELOCATING+*(.rel.gnu.linkonce.t.*)}
    }
  .rela.text   ${RELOCATING-0} :
    {
      *(.rela.text)
      ${RELOCATING+*(.rela.text.*)}
      ${RELOCATING+*(.rela.gnu.linkonce.t.*)}
    }
  .rel.data    ${RELOCATING-0} :
    {
      *(.rel.data)
      ${RELOCATING+*(.rel.data.*)}
      ${RELOCATING+*(.rel.gnu.linkonce.d.*)}
    }
  .rela.data   ${RELOCATING-0} :
    {
      *(.rela.data)
      ${RELOCATING+*(.rela.data.*)}
      ${RELOCATING+*(.rela.gnu.linkonce.d.*)}
    }
  .rel.rodata  ${RELOCATING-0} :
    {
      *(.rel.rodata)
      ${RELOCATING+*(.rel.rodata.*)}
      ${RELOCATING+*(.rel.gnu.linkonce.r.*)}
    }
  .rela.rodata ${RELOCATING-0} :
    {
      *(.rela.rodata)
      ${RELOCATING+*(.rela.rodata.*)}
      ${RELOCATING+*(.rela.gnu.linkonce.r.*)}
    }
  .rel.sdata   ${RELOCATING-0} :
    {
      *(.rel.sdata)
      ${RELOCATING+*(.rel.sdata.*)}
      ${RELOCATING+*(.rel.gnu.linkonce.s.*)}
    }
  .rela.sdata   ${RELOCATING-0} :
    {
      *(.rela.sdata)
      ${RELOCATING+*(.rela.sdata.*)}
      ${RELOCATING+*(.rela.gnu.linkonce.s.*)}
    }
  .rel.sbss    ${RELOCATING-0} :
    { 
      *(.rel.sbss)
      ${RELOCATING+*(.rel.sbss.*)}
      ${RELOCATING+*(.rel.gnu.linkonce.sb.*)}
    }
  .rela.sbss   ${RELOCATING-0} :
    {
      *(.rela.sbss)
      ${RELOCATING+*(.rela.sbss.*)}
      ${RELOCATING+*(.rel.gnu.linkonce.sb.*)}
    }
  .rel.bss     ${RELOCATING-0} : 
    { 
      *(.rel.bss)
      ${RELOCATING+*(.rel.bss.*)}
      ${RELOCATING+*(.rel.gnu.linkonce.b.*)}
    }
  .rela.bss    ${RELOCATING-0} : 
    { 
      *(.rela.bss)
      ${RELOCATING+*(.rela.bss.*)}
      ${RELOCATING+*(.rela.gnu.linkonce.b.*)}
    }
d181 1
d190 1
d193 2
d199 1
d209 1
a230 1
  ${RELOCATING-${FINISH_RELOC}}
d239 1
a239 1
    ${RELOCATING+*(.text.*)}
d242 1
a242 3
    ${RELOCATING+*(.gnu.linkonce.t.*)}

    ${RELOCATING+${FINISH_CODE}}
d251 1
a251 1
    KEEP (*(.eh_frame))
d257 1
a257 2
    ${RELOCATING+*(.rodata.*)}
    ${RELOCATING+*(.gnu.linkonce.r*)}
a264 9
  /* Constructor and destructor tables are in ROM.  */
  ${RELOCATING+${CTOR}}
  ${RELOCATING+${DTOR}}

  .jcr ${RELOCATING-0} :
  {
    KEEP (*(.jcr))
  } ${RELOCATING+ > ${TEXT_MEMORY}}

a280 1
    ${RELOCATING+*(.data.*)}
d282 1
a282 1
    ${RELOCATING+*(.gnu.linkonce.d.*)}
a310 2
    ${RELOCATING+*(.bss.*)}
    ${RELOCATING+*(.gnu.linkonce.b.*)}
d316 3
@


1.2
log
@Define __bss_size symbol to indicate the final size of .bss section.
@
text
@d353 1
a353 1
  .debug_info     0 : { *(.debug_info) }
@


1.1
log
@Applied Stephane Carrez <Stephane.Carrez@@worldnet.fr> patches to add support
for m68hc11 and m68hc12 processors.
@
text
@d314 2
@

