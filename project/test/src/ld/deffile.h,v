head	1.15;
access;
symbols
	binutils-2_24-branch:1.15.0.8
	binutils-2_24-branchpoint:1.15
	binutils-2_21_1:1.14
	binutils-2_23_2:1.15
	binutils-2_23_1:1.15
	binutils-2_23:1.15
	binutils-2_23-branch:1.15.0.6
	binutils-2_23-branchpoint:1.15
	binutils-2_22_branch:1.15.0.4
	binutils-2_22:1.15
	binutils-2_22-branch:1.15.0.2
	binutils-2_22-branchpoint:1.15
	binutils-2_21:1.14
	binutils-2_21-branch:1.14.0.2
	binutils-2_21-branchpoint:1.14
	binutils-2_20_1:1.13
	binutils-2_20:1.13
	binutils-arc-20081103-branch:1.11.0.8
	binutils-arc-20081103-branchpoint:1.11
	binutils-2_20-branch:1.13.0.2
	binutils-2_20-branchpoint:1.13
	dje-cgen-play1-branch:1.12.0.2
	dje-cgen-play1-branchpoint:1.12
	arc-20081103-branch:1.11.0.6
	arc-20081103-branchpoint:1.11
	binutils-2_19_1:1.11
	binutils-2_19:1.11
	binutils-2_19-branch:1.11.0.4
	binutils-2_19-branchpoint:1.11
	binutils-2_18:1.11
	binutils-2_18-branch:1.11.0.2
	binutils-2_18-branchpoint:1.11
	binutils-csl-coldfire-4_1-32:1.10
	binutils-csl-sourcerygxx-4_1-32:1.10
	binutils-csl-innovasic-fido-3_4_4-33:1.10
	binutils-csl-sourcerygxx-3_4_4-32:1.8
	binutils-csl-coldfire-4_1-30:1.10
	binutils-csl-sourcerygxx-4_1-30:1.10
	binutils-csl-coldfire-4_1-28:1.10
	binutils-csl-sourcerygxx-4_1-29:1.10
	binutils-csl-sourcerygxx-4_1-28:1.10
	binutils-csl-arm-2006q3-27:1.10
	binutils-csl-sourcerygxx-4_1-27:1.10
	binutils-csl-arm-2006q3-26:1.10
	binutils-csl-sourcerygxx-4_1-26:1.10
	binutils-csl-sourcerygxx-4_1-25:1.10
	binutils-csl-sourcerygxx-4_1-24:1.10
	binutils-csl-sourcerygxx-4_1-23:1.10
	binutils-csl-sourcerygxx-4_1-21:1.10
	binutils-csl-arm-2006q3-21:1.10
	binutils-csl-sourcerygxx-4_1-22:1.10
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.10
	binutils-csl-sourcerygxx-4_1-20:1.10
	binutils-csl-arm-2006q3-19:1.10
	binutils-csl-sourcerygxx-4_1-19:1.10
	binutils-csl-sourcerygxx-4_1-18:1.10
	binutils-csl-renesas-4_1-9:1.10
	binutils-csl-sourcerygxx-3_4_4-25:1.8
	binutils-csl-renesas-4_1-8:1.10
	binutils-csl-renesas-4_1-7:1.10
	binutils-csl-renesas-4_1-6:1.10
	binutils-csl-sourcerygxx-4_1-17:1.10
	binutils-csl-sourcerygxx-4_1-14:1.10
	binutils-csl-sourcerygxx-4_1-15:1.10
	binutils-csl-sourcerygxx-4_1-13:1.10
	binutils-2_17:1.10
	binutils-csl-sourcerygxx-4_1-12:1.10
	binutils-csl-sourcerygxx-3_4_4-21:1.10
	binutils-csl-wrs-linux-3_4_4-24:1.8
	binutils-csl-wrs-linux-3_4_4-23:1.8
	binutils-csl-sourcerygxx-4_1-9:1.10
	binutils-csl-sourcerygxx-4_1-8:1.10
	binutils-csl-sourcerygxx-4_1-7:1.10
	binutils-csl-arm-2006q1-6:1.10
	binutils-csl-sourcerygxx-4_1-6:1.10
	binutils-csl-wrs-linux-3_4_4-22:1.8
	binutils-csl-coldfire-4_1-11:1.10
	binutils-csl-sourcerygxx-3_4_4-19:1.10
	binutils-csl-coldfire-4_1-10:1.10
	binutils-csl-sourcerygxx-4_1-5:1.10
	binutils-csl-sourcerygxx-4_1-4:1.10
	binutils-csl-wrs-linux-3_4_4-21:1.8
	binutils-csl-morpho-4_1-4:1.10
	binutils-csl-sourcerygxx-3_4_4-17:1.10
	binutils-csl-wrs-linux-3_4_4-20:1.8
	binutils-2_17-branch:1.10.0.4
	binutils-2_17-branchpoint:1.10
	binutils-csl-2_17-branch:1.10.0.2
	binutils-csl-2_17-branchpoint:1.10
	binutils-csl-gxxpro-3_4-branch:1.8.0.12
	binutils-csl-gxxpro-3_4-branchpoint:1.8
	binutils-2_16_1:1.8
	binutils-csl-arm-2005q1b:1.8
	binutils-2_16:1.8
	binutils-csl-arm-2005q1a:1.8
	binutils-csl-arm-2005q1-branch:1.8.0.10
	binutils-csl-arm-2005q1-branchpoint:1.8
	binutils-2_16-branch:1.8.0.8
	binutils-2_16-branchpoint:1.8
	csl-arm-2004-q3d:1.8
	csl-arm-2004-q3:1.8
	binutils-2_15:1.8
	binutils-2_15-branchpoint:1.8
	csl-arm-2004-q1a:1.8
	csl-arm-2004-q1:1.8
	binutils-2_15-branch:1.8.0.6
	cagney_bfdfile-20040213-branch:1.8.0.4
	cagney_bfdfile-20040213-branchpoint:1.8
	cagney_bigcore-20040122-branch:1.8.0.2
	cagney_bigcore-20040122-branchpoint:1.8
	csl-arm-2003-q4:1.8
	binutils-2_14:1.7
	binutils-2_14-branch:1.7.0.2
	binutils-2_14-branchpoint:1.7
	binutils-2_13_2_1:1.5
	binutils-2_13_2:1.5
	binutils-2_13_1:1.5
	binutils-2_13:1.5
	binutils-2_13-branchpoint:1.5
	binutils-2_13-branch:1.5.0.4
	binutils-2_12_1:1.5
	binutils-2_12:1.5
	binutils-2_12-branch:1.5.0.2
	binutils-2_12-branchpoint:1.5
	cygnus_cvs_20020108_pre:1.5
	binutils-2_11_2:1.4.2.1
	binutils-2_11_1:1.4.2.1
	binutils-2_11:1.4
	x86_64versiong3:1.4
	binutils-2_11-branch:1.4.0.2
	binutils-2_10_1:1.2
	binutils-2_10:1.2
	binutils-2_10-branch:1.2.0.2
	binutils-2_10-branchpoint:1.2
	binutils_latest_snapshot:1.15
	repo-unification-2000-02-06:1.2
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.15
date	2011.04.13.12.53.36;	author ktietz;	state Exp;
branches;
next	1.14;

1.14
date	2009.10.23.11.40.17;	author ktietz;	state Exp;
branches;
next	1.13;

1.13
date	2009.09.02.07.25.35;	author amodra;	state Exp;
branches;
next	1.12;

1.12
date	2009.05.19.16.08.07;	author davek;	state Exp;
branches;
next	1.11;

1.11
date	2007.07.06.14.09.41;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.31.22.08.14;	author dannysmith;	state Exp;
branches;
next	1.9;

1.9
date	2005.05.12.07.32.02;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.28.05.28.54;	author amodra;	state Exp;
branches;
next	1.7;

1.7
date	2003.01.28.11.39.43;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	2002.12.16.18.02.14;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.13.06.14.27;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.11.00.16.07;	author kazu;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2000.09.29.13.21.40;	author kazu;	state Exp;
branches;
next	1.2;

1.2
date	99.09.12.15.27.47;	author ian;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.29.06;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.4.2.1
date	2001.06.07.03.17.14;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.06;	author rth;	state Exp;
branches;
next	;


desc
@@


1.15
log
@2011-04-13  Kai Tietz  <ktietz@@redhat.com>

	PR binutils/12658
	* deffile.h (def_file_add_export): Add is_dup argument.
	(def_file_add_import): Likewise.
	* deffilep.y (are_names_equal): New helper.
	(cmp_export_elem): New helper.
	(find_export_in_list): Add search routine for exports.
	(def_file_add_export): Check for duplicates.
	(cmp_import_elem): New helper.
	(find_import_in_list): Add search routine for imports.
	(def_file_add_import): Check for duplicates.
	(def_exports): Handle duplicates.
	(def_imports): Likewise.
	* pe-dll.c (process_def_file_and_drectve): Likewise.
	(pe_implied_import_dll): Likewise.
@
text
@/* deffile.h - header for .DEF file parser
   Copyright 1998, 1999, 2000, 2002, 2003, 2005, 2006, 2007, 2009
   Free Software Foundation, Inc.
   Written by DJ Delorie dj@@cygnus.com

   This file is part of the GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   The program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GLD; see the file COPYING.  If not, write to the Free
   Software Foundation, 51 Franklin Street - Fifth Floor, Boston, MA
   02110-1301, USA.  */

#ifndef DEFFILE_H
#define DEFFILE_H

/* DEF storage definitions.  Note that any ordinal may be zero, and
   any pointer may be NULL, if not defined by the DEF file.  */

typedef struct def_file_section {
  char *name;			/* always set */
  char *class;			/* may be NULL */
  char flag_read, flag_write, flag_execute, flag_shared;
} def_file_section;

typedef struct def_file_export {
  char *name;			/* always set */
  char *internal_name;		/* always set, may == name */
  char *its_name;		/* optional export table name refered to. */
  int ordinal;			/* -1 if not specified */
  int hint;
  char flag_private, flag_constant, flag_noname, flag_data, flag_forward;
} def_file_export;

typedef struct def_file_module {
  struct def_file_module *next;
  void *user_data;
  char name[1];			/* extended via malloc */
} def_file_module;

typedef struct def_file_import {
  char *internal_name;		/* always set */
  def_file_module *module;	/* always set */
  char *name;			/* may be NULL; either this or ordinal will be set */
  char *its_name;		/* optional import table name refered to. */
  int ordinal;			/* may be -1 */
  int data;			/* = 1 if data */
} def_file_import;

typedef struct def_file_aligncomm {
  struct def_file_aligncomm *next;	/* Chain pointer.  */
  char *symbol_name;		/* Name of common symbol.  */
  unsigned int alignment;	/* log-2 alignment.        */
} def_file_aligncomm;

typedef struct def_file {
  /* From the NAME or LIBRARY command.  */
  char *name;
  int is_dll;			/* -1 if NAME/LIBRARY not given */
  bfd_vma base_address;		/* (bfd_vma)(-1) if unspecified */

  /* From the DESCRIPTION command.  */
  char *description;

  /* From the STACK/HEAP command, -1 if unspecified.  */
  int stack_reserve, stack_commit;
  int heap_reserve, heap_commit;

  /* From the SECTION/SEGMENT commands.  */
  int num_section_defs;
  def_file_section *section_defs;

  /* From the EXPORTS commands.  */
  int num_exports;
  def_file_export *exports;

  /* Used by imports for module names.  */
  def_file_module *modules;

  /* From the IMPORTS commands.  */
  int num_imports;
  def_file_import *imports;

  /* From the VERSION command, -1 if not specified.  */
  int version_major, version_minor;

  /* Only expected from .drectve sections, not .DEF files.  */
  def_file_aligncomm *aligncomms;

} def_file;

extern def_file *def_file_empty (void);

/* The second arg may be NULL.  If not, this .def is appended to it.  */
extern def_file *def_file_parse (const char *, def_file *);
extern void def_file_free (def_file *);
extern def_file_export *def_file_add_export (def_file *, const char *,
					     const char *, int,
					     const char *, int *);
extern def_file_import *def_file_add_import (def_file *, const char *,
					     const char *, int, const char *,
					     const char *, int *);
extern void def_file_add_directive (def_file *, const char *, int);
extern def_file_module *def_get_module (def_file *, const char *);
#ifdef DEF_FILE_PRINT
extern void def_file_print (FILE *, def_file *);
#endif

#endif /* DEFFILE_H */
@


1.14
log
@2009-10-23  Kai Tietz  <kai.tietz@@onevision.com>

	* deffile.h (def_file_export): New member its_name.
	(def_file_import): Likewise.
	(def_file_add_export): Add argument its_name.
	(def_file_add_import): Likewise.
	* deffilep.y (def_exports): Add argument its_name.
	(def_import): Likewise.
	(EQUAL): Add new token for '=='.
	(opt_equalequal_name): New rule.
	(expline): Add rule opt_equalequal_name.
	(impline): Likewise.
	(def_file_free): Free for exports and imports
	the optional member its_name.
	(def_lex): Add scan of '==' as EQUAL.
	* pe-dll.c (pe_export_sort): Sort for its_name too.
	(process_def_file_and_drectve): Adjust calls to
	def_file_add_export.
	(generate_edata): Take its_name in account.
	(make_one): Likewise.
	(pe_process_import_defs): Likewise.
	(pe_dll_generate_def_file): Add print of new '==' option.
	* ld.texinfo: Extend documentation about .def file syntax.
	* NEWS: Mention new feature.
@
text
@d108 1
a108 1
					     const char *);
d111 1
a111 1
					     const char *);
@


1.13
log
@update copyright dates
@
text
@d38 1
d54 1
d107 2
a108 1
					     const char *, int);
d110 2
a111 1
					     const char *, int, const char *);
@


1.12
log
@==> bfd/ChangeLog <==
2009-05-19  Dave Korn  <dave.korn.cygwin@@gmail.com>

	* cofflink.c (process_embedded_commands):  Ignore "-aligncomm".

==> gas/ChangeLog <==
2009-05-19  Dave Korn  <dave.korn.cygwin@@gmail.com>

	* NEWS:  Mention new feature.
	* config/obj-coff.c (obj_coff_common_parse):  New function.
	(obj_coff_comm):  Likewise.
	(coff_pseudo_table):  Override default ".comm" definition on PE.
	* doc/as.texinfo:  Document new feature.

==> gas/testsuite/ChangeLog <==
2009-05-19  Dave Korn  <dave.korn.cygwin@@gmail.com>

	* gas/pe/:  New directory for PE format-specific tests.
	* gas/pe/aligncomm-a.d:  New test pattern file.
	* gas/pe/aligncomm-a.s:  New test source file.
	* gas/pe/aligncomm-b.d:  New test pattern file.
	* gas/pe/aligncomm-b.s:  New test source file.
	* gas/pe/aligncomm-c.d:  New test pattern file.
	* gas/pe/aligncomm-c.s:  New test source file.
	* gas/pe/aligncomm-d.d:  New test pattern file.
	* gas/pe/aligncomm-d.s:  New test source file.
	* gas/pe/pe.exp:  New test control script.
	* lib/gas-defs.exp (is_pecoff_format):  New function.

==> ld/ChangeLog <==
2009-05-19  Dave Korn  <dave.korn.cygwin@@gmail.com>

	* NEWS:  Mention new feature.
	* deffile.h (def_file_aligncomm):  Add new struct definition.
	(def_file):  Add new def_file_aligncomm member.
	* deffilep.y (%token):  Add new ALIGNCOMM token.
	(command):  Add production rule for ALIGNCOMM.
	(def_file_free):  Free any chained def_file_aligncomm structs.
	(diropts[]):  Add entry for '-aligncomm' .drectve command.
	(def_aligncomm):  New grammar function.
	* ld.texinfo:  Document new feature.
	* pe-dll.c (process_def_file):  Rename from this ...
	(process_def_file_and_drectve):  ... to this, updating all callers,
	and process any aligncomms chained to the def file after scanning
	all .drectve sections.
	(generate_edata):  Updated to match.
	(pe_dll_build_sections):  Likewise.

==> ld/testsuite/ChangeLog <==
2009-05-19  Dave Korn  <dave.korn.cygwin@@gmail.com>

	* ld-pe/aligncomm-1.c:  New test source file.
	* ld-pe/aligncomm-2.c:  Likewise.
	* ld-pe/aligncomm-3.c:  Likewise.
	* ld-pe/aligncomm-4.c:  Likewise.
	* ld-pe/aligncomm.d:  New test pattern file.

	* ld-pe/direct.exp:  Deleted, and content moved into ...
	* ld-pe/pe-run.exp:  ... New common file for all PE run tests.

	* ld-pe/vers-script.exp:  Deleted, and content merged into ...
	* ld-pe/pe-compile.exp:  ... New common file for PE tests needing
	a compiler, adding aligned common tests.

	* ld-pe/pe.exp:  Update header comment.
@
text
@d2 2
a3 1
   Copyright 1998, 1999, 2000, 2002, 2003, 2007 Free Software Foundation, Inc.
@


1.11
log
@Update sources to GPLv3
@
text
@d56 6
d92 4
@


1.10
log
@2006-01-31  Filip Navara  <navaraf@@reactos.com>

	* deffile.h (struct def_file_export): Add field flag_forward.
	* pe-dll.c (process_def_file): Check for forward exports.
	(generate_edata): Generate forward export symbols.
	(fill_edata): Emit them.

	* pe-dll.c (process_def_file): Don't crash on malformed
	fastcall symbol names in .def file.
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000, 2002, 2003 Free Software Foundation, Inc.
d5 1
a5 1
   This file is part of GLD, the Gnu Linker.
d7 1
a7 1
   GLD is free software; you can redistribute it and/or modify
d9 1
a9 1
   the Free Software Foundation; either version 2, or (at your option)
d12 1
a12 1
   GLD is distributed in the hope that it will be useful,
@


1.9
log
@Update FSF addresses
@
text
@d39 1
a39 1
  char flag_private, flag_constant, flag_noname, flag_data;
@


1.8
log
@Convert to C90
@
text
@d19 2
a20 2
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */
@


1.7
log
@Add code to prevent importing a dll multiple times.
@
text
@a24 2
#include "ansidecl.h"

d88 1
a88 1
extern def_file *def_file_empty PARAMS ((void));
d91 8
a98 12
extern def_file * def_file_parse
  PARAMS ((const char *, def_file *));
extern void def_file_free
  PARAMS ((def_file *));
extern def_file_export * def_file_add_export
  PARAMS ((def_file *, const char *, const char *, int));
extern def_file_import * def_file_add_import
  PARAMS ((def_file *, const char *, const char *, int, const char *));
extern void def_file_add_directive
  PARAMS ((def_file *, const char *, int));
extern def_file_module *def_get_module
  PARAMS ((def_file *, const char *));
d100 1
a100 2
extern void def_file_print
  PARAMS ((FILE *, def_file *));
@


1.6
log
@Add support to skip import libraries for performance reasons and instead
use the direct auto-import of dll's
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000, 2002 Free Software Foundation, Inc.
d103 2
@


1.5
log
@Fixtypos in ChangeLogs, fix copyright dates in files
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000 Free Software Foundation, Inc.
d55 1
d59 1
a59 1
  /* from the NAME or LIBRARY command */
d64 1
a64 1
  /* from the DESCRIPTION command */
d67 1
a67 1
  /* from the STACK/HEAP command, -1 if unspecified */
d71 1
a71 1
  /* from the SECTION/SEGMENT commands */
d75 1
a75 1
  /* from the EXPORTS commands */
d79 1
a79 1
  /* used by imports for module names */
d82 1
a82 1
  /* from the IMPORTS commands */
d86 1
a86 1
  /* from the VERSION command, -1 if not specified */
d92 11
a102 21
/* add_to may be NULL.  If not, this .def is appended to it */
extern def_file *def_file_parse PARAMS ((const char *_filename,
					 def_file * _add_to));

extern void def_file_free PARAMS ((def_file * _def));

extern def_file_export *def_file_add_export PARAMS ((def_file * _def,
						     const char *_name,
						 const char *_internal_name,
						     int _ordinal));

extern def_file_import *def_file_add_import PARAMS ((def_file * _def,
						     const char *_name,
						     const char *_from,
						     int _ordinal,
					       const char *_imported_name));

extern void def_file_add_directive PARAMS ((def_file * _def,
					    const char *param,
					    int len));

d104 2
a105 1
extern void def_file_print PARAMS ((FILE * _file, def_file * _def));
@


1.4
log
@2000-10-10  Kazu Hirata  <kazu@@hxi.com>

	* deffile.h: Fix formatting.
	* lexsup.c: Likewise.
	* mri.c: Likewise.
@
text
@d2 1
a2 1
   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.
@


1.4.2.1
log
@Update copyright notices.
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000 Free Software Foundation, Inc.
@


1.3
log
@2000-09-29  Kazu Hirata  <kazu@@hxi.com>

	* deffile.h: Fix formatting.
	* ld.h: Likewise.
	* ldctor.h: Likewise.
	* ldemul.h: Likewise.
	* ldexp.h: Likewise.
	* ldfile.h: Likewise.
	* ldlang.h: Likewise.
	* lexsup.c: Likewise.
	* mri.c: Likewise.
	* pe-dll.c: Likewise.
@
text
@d30 58
a87 69
typedef struct def_file_section
  {
    char *name;			/* always set */
    char *class;		/* may be NULL */
    char flag_read, flag_write, flag_execute, flag_shared;
  }
def_file_section;

typedef struct def_file_export
  {
    char *name;			/* always set */
    char *internal_name;	/* always set, may == name */
    int ordinal;		/* -1 if not specified */
    int hint;
    char flag_private, flag_constant, flag_noname, flag_data;
  }
def_file_export;

typedef struct def_file_module
  {
    struct def_file_module *next;
    void *user_data;
    char name[1]; /* extended via malloc */
  }
def_file_module;

typedef struct def_file_import
  {
    char *internal_name;	/* always set */
    def_file_module *module;	/* always set */
    char *name;			/* may be NULL; either this or ordinal will be set */
    int ordinal;		/* may be -1 */
  }
def_file_import;

typedef struct def_file
  {

    /* from the NAME or LIBRARY command */
    char *name;
    int is_dll;			/* -1 if NAME/LIBRARY not given */
    bfd_vma base_address;	/* (bfd_vma)(-1) if unspecified */

    /* from the DESCRIPTION command */
    char *description;

    /* from the STACK/HEAP command, -1 if unspecified */
    int stack_reserve, stack_commit;
    int heap_reserve, heap_commit;

    /* from the SECTION/SEGMENT commands */
    int num_section_defs;
    def_file_section *section_defs;

    /* from the EXPORTS commands */
    int num_exports;
    def_file_export *exports;

    /* used by imports for module names */
    def_file_module *modules;

    /* from the IMPORTS commands */
    int num_imports;
    def_file_import *imports;

    /* from the VERSION command, -1 if not specified */
    int version_major, version_minor;
  }
def_file;
d113 1
a113 2
extern void def_file_print PARAMS ((FILE * _file,
				    def_file * _def));
@


1.2
log
@	* pe-dll.h: New file.
	* pe-dll.c: Include "pe-dll.h".  Mark unused arguments as needed
	to avoid warnings.
	(edata_sz, reloc_sz): Change from int to size_t.
	(pe_details_type): Change type of imagebase_reloc from int to
	unsigned int.
	(pe_detail_list): Fully initialize last entry.
	(pe_dll_id_target): Change parameter to const.
	(pe_dll_generate_def_file): Likewise.
	(pe_dll_generate_implib): Likewise.
	(pe_implied_import_dll): Likewise.  Change dll_name to const.
	* emultempl/pe.em: Include "pe-dll.h".  Remove declarations now in
	pe-dll.h.
	(init): Fully initialize __dll__ entry.
	(gld_${EMULATION_NAME}_after_open): Remove unused variables
	sequence, elt, and i.
	* deffile.h: Add preprocessor guard.
	* deffilep.y (def_debug): Remove.
	* Makefile.am: Rebuild dependencies.
	(HFILES): Add pe-dll.h.
@
text
@d2 1
a2 1
   Copyright (C) 1998, 1999 Free Software Foundation, Inc.
d28 1
a28 1
   any pointer may be NULL, if not defined by the DEF file. */
@


1.1
log
@Initial revision
@
text
@d22 3
d127 2
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

