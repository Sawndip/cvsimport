head	1.47;
access;
symbols
	binutils-2_24-branch:1.47.0.4
	binutils-2_24-branchpoint:1.47
	binutils-2_21_1:1.42.4.1
	binutils-2_23_2:1.47
	binutils-2_23_1:1.47
	binutils-2_23:1.47
	binutils-2_23-branch:1.47.0.2
	binutils-2_23-branchpoint:1.47
	binutils-2_22_branch:1.45.0.4
	binutils-2_22:1.45
	binutils-2_22-branch:1.45.0.2
	binutils-2_22-branchpoint:1.45
	binutils-2_21:1.42
	binutils-2_21-branch:1.42.0.4
	binutils-2_21-branchpoint:1.42
	binutils-2_20_1:1.42
	binutils-2_20:1.42
	binutils-arc-20081103-branch:1.40.0.8
	binutils-arc-20081103-branchpoint:1.40
	binutils-2_20-branch:1.42.0.2
	binutils-2_20-branchpoint:1.42
	dje-cgen-play1-branch:1.40.0.6
	dje-cgen-play1-branchpoint:1.40
	arc-20081103-branch:1.40.0.4
	arc-20081103-branchpoint:1.40
	binutils-2_19_1:1.40
	binutils-2_19:1.40
	binutils-2_19-branch:1.40.0.2
	binutils-2_19-branchpoint:1.40
	binutils-2_18:1.37
	binutils-2_18-branch:1.37.0.2
	binutils-2_18-branchpoint:1.37
	binutils-csl-coldfire-4_1-32:1.35
	binutils-csl-sourcerygxx-4_1-32:1.35
	binutils-csl-innovasic-fido-3_4_4-33:1.35
	binutils-csl-sourcerygxx-3_4_4-32:1.32.2.1
	binutils-csl-coldfire-4_1-30:1.35
	binutils-csl-sourcerygxx-4_1-30:1.35
	binutils-csl-coldfire-4_1-28:1.35
	binutils-csl-sourcerygxx-4_1-29:1.35
	binutils-csl-sourcerygxx-4_1-28:1.35
	binutils-csl-arm-2006q3-27:1.35
	binutils-csl-sourcerygxx-4_1-27:1.35
	binutils-csl-arm-2006q3-26:1.35
	binutils-csl-sourcerygxx-4_1-26:1.35
	binutils-csl-sourcerygxx-4_1-25:1.35
	binutils-csl-sourcerygxx-4_1-24:1.35
	binutils-csl-sourcerygxx-4_1-23:1.35
	binutils-csl-sourcerygxx-4_1-21:1.35
	binutils-csl-arm-2006q3-21:1.35
	binutils-csl-sourcerygxx-4_1-22:1.35
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.35
	binutils-csl-sourcerygxx-4_1-20:1.35
	binutils-csl-arm-2006q3-19:1.35
	binutils-csl-sourcerygxx-4_1-19:1.35
	binutils-csl-sourcerygxx-4_1-18:1.35
	binutils-csl-renesas-4_1-9:1.35
	binutils-csl-sourcerygxx-3_4_4-25:1.32.2.1
	binutils-csl-renesas-4_1-8:1.35
	binutils-csl-renesas-4_1-7:1.35
	binutils-csl-renesas-4_1-6:1.35
	binutils-csl-sourcerygxx-4_1-17:1.35
	binutils-csl-sourcerygxx-4_1-14:1.35
	binutils-csl-sourcerygxx-4_1-15:1.35
	binutils-csl-sourcerygxx-4_1-13:1.35
	binutils-2_17:1.35
	binutils-csl-sourcerygxx-4_1-12:1.35
	binutils-csl-sourcerygxx-3_4_4-21:1.35
	binutils-csl-wrs-linux-3_4_4-24:1.32
	binutils-csl-wrs-linux-3_4_4-23:1.32
	binutils-csl-sourcerygxx-4_1-9:1.35
	binutils-csl-sourcerygxx-4_1-8:1.35
	binutils-csl-sourcerygxx-4_1-7:1.35
	binutils-csl-arm-2006q1-6:1.35
	binutils-csl-sourcerygxx-4_1-6:1.35
	binutils-csl-wrs-linux-3_4_4-22:1.32
	binutils-csl-coldfire-4_1-11:1.35
	binutils-csl-sourcerygxx-3_4_4-19:1.35
	binutils-csl-coldfire-4_1-10:1.35
	binutils-csl-sourcerygxx-4_1-5:1.35
	binutils-csl-sourcerygxx-4_1-4:1.35
	binutils-csl-wrs-linux-3_4_4-21:1.32
	binutils-csl-morpho-4_1-4:1.35
	binutils-csl-sourcerygxx-3_4_4-17:1.35
	binutils-csl-wrs-linux-3_4_4-20:1.32
	binutils-2_17-branch:1.35.0.4
	binutils-2_17-branchpoint:1.35
	binutils-csl-2_17-branch:1.35.0.2
	binutils-csl-2_17-branchpoint:1.35
	binutils-csl-gxxpro-3_4-branch:1.32.2.1.0.2
	binutils-csl-gxxpro-3_4-branchpoint:1.32.2.1
	binutils-2_16_1:1.32.2.1
	binutils-csl-arm-2005q1b:1.32
	binutils-2_16:1.32
	binutils-csl-arm-2005q1a:1.32
	binutils-csl-arm-2005q1-branch:1.32.0.4
	binutils-csl-arm-2005q1-branchpoint:1.32
	binutils-2_16-branch:1.32.0.2
	binutils-2_16-branchpoint:1.32
	csl-arm-2004-q3d:1.31
	csl-arm-2004-q3:1.31
	binutils-2_15:1.30
	binutils-2_15-branchpoint:1.30
	csl-arm-2004-q1a:1.30
	csl-arm-2004-q1:1.30
	binutils-2_15-branch:1.30.0.6
	cagney_bfdfile-20040213-branch:1.30.0.4
	cagney_bfdfile-20040213-branchpoint:1.30
	cagney_bigcore-20040122-branch:1.30.0.2
	cagney_bigcore-20040122-branchpoint:1.30
	csl-arm-2003-q4:1.28
	binutils-2_14:1.26.2.1
	binutils-2_14-branch:1.26.0.2
	binutils-2_14-branchpoint:1.26
	binutils-2_13_2_1:1.25.2.1
	binutils-2_13_2:1.25.2.1
	binutils-2_13_1:1.25.2.1
	binutils-2_13:1.25
	binutils-2_13-branchpoint:1.25
	binutils-2_13-branch:1.25.0.2
	binutils-2_12_1:1.22.2.1
	binutils-2_12:1.22.2.1
	binutils-2_12-branch:1.22.0.2
	binutils-2_12-branchpoint:1.22
	cygnus_cvs_20020108_pre:1.20
	binutils-2_11_2:1.11.2.5
	binutils-2_11_1:1.11.2.5
	binutils-2_11:1.11.2.3
	x86_64versiong3:1.12
	binutils-2_11-branch:1.11.0.2
	binutils-2_10_1:1.3.2.1
	binutils-2_10:1.3.2.1
	binutils-2_10-branch:1.3.0.2
	binutils-2_10-branchpoint:1.3
	binutils_latest_snapshot:1.47
	repo-unification-2000-02-06:1.3
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.47
date	2012.02.14.01.02.04;	author amodra;	state Exp;
branches;
next	1.46;

1.46
date	2011.10.20.12.34.20;	author amodra;	state Exp;
branches;
next	1.45;

1.45
date	2011.05.13.04.19.18;	author amodra;	state Exp;
branches;
next	1.44;

1.44
date	2011.04.06.17.09.56;	author jsm28;	state Exp;
branches;
next	1.43;

1.43
date	2010.12.04.18.32.52;	author hjl;	state Exp;
branches;
next	1.42;

1.42
date	2009.09.02.07.25.41;	author amodra;	state Exp;
branches
	1.42.4.1;
next	1.41;

1.41
date	2009.07.08.03.09.13;	author amodra;	state Exp;
branches;
next	1.40;

1.40
date	2007.09.30.15.26.43;	author vapier;	state Exp;
branches;
next	1.39;

1.39
date	2007.09.30.13.33.04;	author amodra;	state Exp;
branches;
next	1.38;

1.38
date	2007.08.28.13.21.58;	author jsm28;	state Exp;
branches;
next	1.37;

1.37
date	2007.07.06.14.09.45;	author nickc;	state Exp;
branches;
next	1.36;

1.36
date	2006.07.19.11.49.32;	author ths;	state Exp;
branches;
next	1.35;

1.35
date	2005.05.22.21.02.19;	author rth;	state Exp;
branches;
next	1.34;

1.34
date	2005.05.12.07.32.08;	author nickc;	state Exp;
branches;
next	1.33;

1.33
date	2005.04.13.22.29.36;	author jakub;	state Exp;
branches;
next	1.32;

1.32
date	2004.12.01.21.12.39;	author drow;	state Exp;
branches
	1.32.2.1;
next	1.31;

1.31
date	2004.06.18.15.41.47;	author nickc;	state Exp;
branches;
next	1.30;

1.30
date	2004.01.09.21.19.15;	author hjl;	state Exp;
branches;
next	1.29;

1.29
date	2004.01.02.08.27.08;	author amodra;	state Exp;
branches;
next	1.28;

1.28
date	2003.07.22.14.58.35;	author hjl;	state Exp;
branches;
next	1.27;

1.27
date	2003.05.09.15.35.08;	author sky;	state Exp;
branches;
next	1.26;

1.26
date	2002.08.10.12.48.52;	author amodra;	state Exp;
branches
	1.26.2.1;
next	1.25;

1.25
date	2002.04.19.19.28.03;	author rth;	state Exp;
branches
	1.25.2.1;
next	1.24;

1.24
date	2002.04.11.16.55.27;	author nickc;	state Exp;
branches;
next	1.23;

1.23
date	2002.02.12.11.10.11;	author amodra;	state Exp;
branches;
next	1.22;

1.22
date	2002.02.08.06.49.54;	author aoliva;	state Exp;
branches
	1.22.2.1;
next	1.21;

1.21
date	2002.01.14.15.46.50;	author nickc;	state Exp;
branches;
next	1.20;

1.20
date	2001.08.21.16.04.37;	author nickc;	state Exp;
branches;
next	1.19;

1.19
date	2001.07.27.17.48.27;	author hjl;	state Exp;
branches;
next	1.18;

1.18
date	2001.07.24.11.09.24;	author amodra;	state Exp;
branches;
next	1.17;

1.17
date	2001.07.24.11.07.12;	author amodra;	state Exp;
branches;
next	1.16;

1.16
date	2001.07.12.15.03.27;	author hjl;	state Exp;
branches;
next	1.15;

1.15
date	2001.06.06.21.03.59;	author hjl;	state Exp;
branches;
next	1.14;

1.14
date	2001.04.02.23.33.20;	author obrien;	state Exp;
branches;
next	1.13;

1.13
date	2001.03.13.06.14.28;	author nickc;	state Exp;
branches;
next	1.12;

1.12
date	2001.02.08.18.57.47;	author ciceron;	state Exp;
branches;
next	1.11;

1.11
date	2000.12.09.23.44.17;	author nickc;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2000.10.29.17.21.03;	author hp;	state Exp;
branches;
next	1.9;

1.9
date	2000.10.09.01.35.13;	author hp;	state Exp;
branches;
next	1.8;

1.8
date	2000.09.28.22.57.26;	author hp;	state Exp;
branches;
next	1.7;

1.7
date	2000.09.05.04.07.46;	author amodra;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.10.17.02.16;	author amodra;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.12.12.47.25;	author amodra;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.12.03.44.15;	author amodra;	state Exp;
branches;
next	1.3;

1.3
date	99.11.01.16.29.06;	author nickc;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	99.10.29.15.31.54;	author clm;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.29.09;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.42.4.1
date	2011.02.10.03.41.11;	author amodra;	state Exp;
branches;
next	;

1.32.2.1
date	2005.05.22.21.59.09;	author rth;	state Exp;
branches;
next	;

1.26.2.1
date	2003.05.15.19.15.11;	author drow;	state Exp;
branches;
next	;

1.25.2.1
date	2002.09.23.22.15.28;	author drow;	state Exp;
branches;
next	;

1.22.2.1
date	2002.02.17.23.12.11;	author amodra;	state Exp;
branches;
next	;

1.11.2.1
date	2001.02.08.18.59.26;	author ciceron;	state Exp;
branches;
next	1.11.2.2;

1.11.2.2
date	2001.03.18.16.39.39;	author ciceron;	state Exp;
branches;
next	1.11.2.3;

1.11.2.3
date	2001.04.02.23.31.54;	author obrien;	state Exp;
branches;
next	1.11.2.4;

1.11.2.4
date	2001.06.07.03.17.23;	author amodra;	state Exp;
branches;
next	1.11.2.5;

1.11.2.5
date	2001.06.11.10.05.14;	author amodra;	state Exp;
branches;
next	;

1.3.2.1
date	2000.04.11.23.04.03;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.09;	author rth;	state Exp;
branches;
next	;


desc
@@


1.47
log
@	* ld-elf/linkoncerdiff.d: Don't run for hppa64-hpux.
	* ld-elf/pr11304a.s: Always have whitespace before directives.
	* ld-elf/pr11304b.s: Likewise.
	* ld-selective/selective.exp: Test m68hc1* variant of m6811, m6812.
	* lib/ld-lib.exp: Likewise, and vice versa.
@
text
@# Expect script for LD selective linking tests
#   Copyright 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009,
#   2010, 2011 Free Software Foundation, Inc.
#
# This file is part of the GNU Binutils.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
# MA 02110-1301, USA.
#
# Written by Catherine Moore (clm@@cygnus.com)
# Make sure that constructors are handled correctly.

# Only ELF based ports support selective linking
if { ![is_elf_format] || ![check_gc_sections_available] } {
    return
}

# List contains test-items with three items followed by four lists:
# 1:name 2:test-type (CC or C++; add as needed) 3:filename 4:ld-flags
# 5:must-have-symbols 6:must-not-have-symbols 7:xfail-targets.
#
# If a must(-not)-have symbol is a list, then that list must have two
# items; the symbol name and a value the symbol must (not) have.
#
# Note: ld_nm trims leading `_' from _start
#
# FIXME: Instead of table, read settings from each source-file.
set seltests {
  {selective1 C   1.c  {}       {}    {dropme1 dropme2} {}}
  {selective2 C   2.c  {}       {}    {foo} {}}
  {selective3 C   2.c  {-u foo} {foo} {{foo 0}} {}}
  {selective4 C++ 3.cc {}       {start a A::foo() B::foo()} {A::bar()} {mips*-*}}
  {selective5 C++ 4.cc {}       {start a A::bar()} {A::foo() B::foo()} {mips*-*}}
  {selective6 C++ 5.cc {}       {start a A::bar()}
    {A::foo() B::foo() dropme1() dropme2()} {*-*-*}}
}

set cflags "-w -O -ffunction-sections -fdata-sections"
set cxxflags "-fno-exceptions -fno-rtti"
set ldflags "--gc-sections -Bstatic"

if [istarget mips*-*] {
    # MIPS16 doesn't support PIC code.
    set cflags "-mno-abicalls $cflags"
    # MIPS ELF uses __start by default, we override it.
    set ldflags "-e _start $ldflags"
}

if [istarget sh64*-*-elf] {
    # This is what gcc passes to ld by default, plus switch to the
    # "usual" ELF _start (shelf32 normally uses just `start' for COFF
    # compatibility)
    set ldflags "-e _start -mshelf32 $ldflags"
}

# If we don't have g++ for the target, mark all tests as untested.
if { ![is_remote host] && [which $CXX] == 0 } {
    foreach testitem $seltests {
	untested "[lindex $testitem 0]"
    }
    return
}

foreach testitem $seltests {
    set testname [lindex $testitem 0]
    set testtype [lindex $testitem 1]
    set testfile [lindex $testitem 2]
    set objfile "tmpdir/[file rootname $testfile].o"
    set ldfile "tmpdir/[file rootname $testfile].x"
    set failed 0

    set ldargs [lindex $testitem 3]
    set mustsyms [lindex $testitem 4]
    set mustnotsyms [lindex $testitem 5]
    set xfails [lindex $testitem 6]

    foreach xfail_target $xfails {
	setup_xfail $xfail_target
    }

    # It's either C or C++ at the moment.
    if { $testtype == "C++" } {
	set compiler "$CXX"
	# Starting with 3.4.0, -fvtable-gc is no longer supported and thus
	# the functionality we try to test for cannot be expected to work.
	set version [remote_exec host "$CXX -dumpversion"]
	set version [lindex $version 1]
	if [regexp "^(\[1-9\]\[0-9\]+|\[4-9\]|3.(\[1-9\]\[0-9\]+|\[4-9\]))\\." $version] {
	    set testflags "$cflags $cxxflags"
	    setup_xfail {*-*-*}
	} else {
	    set testflags "$cflags $cxxflags -fvtable-gc"
	}
    } else {
	set testflags "$cflags"
	set compiler "$CC"
    }

    # Note that we do not actually *use* CXX; we just add cxxflags for C++
    # tests.  It might have been a buglet originally; now I think better
    # leave as is.
    if { ![ld_compile "$compiler $testflags" $srcdir/$subdir/$testfile $objfile] } {
	unresolved $testname
	continue
    }

    # V850 targets need libgcc.a
    if [istarget v850*-*-elf] {
	set libgcc [remote_exec host "$compiler -print-libgcc-file-name"]
	set libgcc [lindex $libgcc 1]
	regsub -all "\[\r\n\]" $libgcc "" libgcc
	set objfile "$objfile $libgcc"
    }

    # ARM targets need libgcc.a in THUMB mode so that __call_via_r3 is provided
    if {[istarget arm-*-*]} {
	set libgcc [remote_exec host "$compiler -print-libgcc-file-name"]
	set libgcc [lindex $libgcc 1]
	regsub -all "\[\r\n\]" $libgcc "" libgcc
	set objfile "$objfile $libgcc"
    }

    # HPPA linux targets need libgcc.a for millicode routines ($$dyncall).
    if [istarget hppa*-*-linux*] {
	set libgcc [remote_exec host "$compiler -print-libgcc-file-name"]
	set libgcc [lindex $libgcc 1]
	regsub -all "\[\r\n\]" $libgcc "" libgcc
	set objfile "$objfile $libgcc"
    }

    # m6811/m6812 code has references to soft registers.
    if {[istarget m6811-*-*] || [istarget m6812-*-*] || [istarget m68hc1*-*-*]} {
	set objfile "$objfile --defsym _.frame=0 --defsym _.d1=0"
	set objfile "$objfile --defsym _.d2=0"
    }

    if ![ld_simple_link $ld $ldfile "$ldflags [join $ldargs] $objfile"] {
	fail $testname
	continue
    }

    if ![ld_nm $nm --demangle $ldfile] {
	unresolved $testname
	continue
    }

    # Must make V2 demangled names look like V3
    foreach nm_output_key [array names nm_output] {
	if [regsub \\(void\\) $nm_output_key () new_nm_output_key] {
	    set nm_output($new_nm_output_key) nm_output($nm_output_key)
	}
    }

    # Check each mandated symbol and optionally mandated values.
    foreach mustsym $mustsyms {
	if { [llength [concat $mustsym]] == 1 } {
	    if { ![info exists nm_output($mustsym)] } {
		verbose -log "$testname: missing $mustsym"
		fail $testname
		set failed 1
		break
	    }
	} {
	    set mustsymname [lindex $mustsym 0]
	    set mustsymvalue [lindex $mustsym 1]
	    if { ![info exists nm_output($mustsymname)] } {
		verbose -log "$testname: missing $mustsymname"
		fail $testname
		set failed 1
		break
	    } {
		if { $nm_output($mustsymname) != $mustsymvalue } {
		    verbose -log "$testname: $mustsymname != $mustsymvalue"
		    verbose -log "is instead $nm_output($mustsymname)"
		    fail $testname
		    set failed 1
		    break
		}
	    }
	}
    }

    if { $failed != 0 } {
	continue
    }

    # Check each unwanted symbol, or that symbols do not have specific
    # values.
    foreach mustnotsym $mustnotsyms {
	if { [llength [concat $mustnotsym]] == 1 } {
	    if { [info exists nm_output($mustnotsym)] } {
		verbose -log "$testname: $mustnotsym == $nm_output($mustnotsym)"
		fail $testname
		set failed 1
		break
	    }
	} {
	    set mustnotsymname [lindex $mustnotsym 0]
	    set mustnotsymvalue [lindex $mustnotsym 1]
	    if { [info exists nm_output($mustnotsymname)] \
		    && $nm_output($mustnotsymname) == $mustnotsymvalue} {
		verbose -log "$testname: $mustnotsymname == $mustnotsymvalue"
		fail $testname
		set failed 1
		break
	    }
	}
    }

    if { $failed == 0 } {
	pass $testname
    }
}
@


1.46
log
@	* ld-selective/selective.exp: Use check_gc_sections_available.
	Remove redundant xfails.
	* ld-selective/sel-dump.exp: Likewise.
@
text
@d144 1
a144 1
    if {[istarget m6811-*-*] || [istarget m6812-*-*]} {
@


1.45
log
@	* ld-elf/flags1.d: Don't xfail tic6x.
	* ld-scripts/weak.exp: Correct comments.  Don't xfail sh-pe.  Remove
	redundant xfail.
	* ld-selective/sel-dump.exp: Don't xfail alpha.
	* ld-selective/selective.exp: Run for alpha.
	* ld-undefined/weak-undef.exp: Don't xfail hppa64.
@
text
@d26 1
a26 13
if ![is_elf_format] {
    return
}

# These targets do not support selective linking
if {[istarget "am33*-*-*"] ||
    [istarget "arc-*-*"] || [istarget "d30v-*-*"] ||
    [istarget "dlx-*-*"] || [istarget "hppa*64*-*-*"] ||
    [istarget "i370-*-*"] || [istarget "i860-*-*"] ||
    [istarget "i960-*-*"] || [istarget "ia64-*-*"] ||
    [istarget "m88*-*-*"] || [istarget "mn10200-*-*"] ||
    [istarget "mep-*-*"] || [istarget "or32-*-*"] ||
    [istarget "pj*-*-*"]} {
a91 2
    setup_xfail "arc*-*" "d30v*-*" "dlx*-*" "i370*-*" "i860*-*"
    setup_xfail "i960*-*" "mn10200-*" "or32-*" "pj-*"
@


1.44
log
@bfd:
	* config.bfd (thumb-*-oabi): Don't handle in list of obsolete
	targets.
	(strongarm*, thumb*, xscale*): Remove architectures.
	(strongarm-*-kaos*, thumb-*-coff, thumb-*-elf, thumb-epoc-pe*,
	thumb-*-pe*, strongarm-*-elf, strongarm-*-coff, xscale-*-elf,
	xscale-*-coff): Remove targets.

binutils:
	* configure.in (thumb-*-pe*): Remove.
	* configure: Regenerate.

binutils/testsuite:
	* binutils-all/objcopy.exp (*arm*-*-coff): Change to arm*-*-coff.
	(xscale-*-coff, thumb*-*-coff, thumb*-*-pe): Don't handle.

gas:
	* configure.tgt (strongarm*be, strongarm*b, strongarm*,
	xscale*be|xscale*b, xscale*): Remove architectures.
	(thumb-*-coff, thumb-*-rtems*, thumb-*-elf, thumb-epoc-pe,
	thumb-*-pe, xscale-*-coff, xscale-*-elf): Remove targets.

gas/testsuite:
	* gas/all/gas.exp (*arm*-*-coff): Change to arm*-*-coff.
	(thumb*-*-coff, thumb*-*-pe*): Don;t handle.
	* gas/arm/arm.exp (*arm*-*-*): Change to arm*-*-*.
	(*xscale*-*-*): Don't handle.
	* gas/cfi/cfi.exp (xscale*-*): Don't handle.
	* gas/elf/elf.exp (*arm*-*-*): Change to arm*-*-*.
	(xscale*-*-*): Don't handle.

ld:
	* configure.tgt (thumb-*-linux-* | thumb-*-uclinux*,
	strongarm-*-coff, strongarm-*-elf, strongarm-*-kaos*,
	thumb-*-coff, thumb-*-elf, thumb-epoc-pe, thumb-*-pe,
	xscale-*-coff, xscale-*-elf): Remove targets.

ld/testsuite:
	* ld-selective/selective.exp (xscale-*-*): Don't handle.
	* ld-srec/srec.exp (strongarm*-*-*, xscale*-*-*, thumb-*-*): Don't
	handle.
	(*arm*-*-*): Change to arm*-*-*.
	(strongarm*-*-coff, xscale*-*-coff, thumb-*-coff*, thumb-*-pe*,
	thumb-*-elf*, strongarm*-*-*, thumb-*-*): Remove xfails.
	* ld-undefined/undefined.exp (thumb*-*-pe*, thumb*-*-pe*): Remove
	commented-out xfails.
	(thumb-elf): Remove reference in comment.
	* lib/ld-lib.exp (strongarm*-*-*, xscale*-*-*, thumb-*-*): Don't
	handle.
@
text
@d31 1
a31 1
if {[istarget "alpha*-*-*"] || [istarget "am33*-*-*"] ||
@


1.43
log
@Don't pass -fvtable-gc to GCC 3.4.0 or above.

2010-12-04  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-selective/selective.exp: Don't pass -fvtable-gc to GCC
	3.4.0 or above.
@
text
@d2 2
a3 2
#   Copyright 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2009
#   Free Software Foundation, Inc.
d142 1
a142 1
    if {[istarget arm-*-*] || [istarget xscale-*-*]} {
@


1.42
log
@update copyright dates
@
text
@d63 1
a63 1
set cxxflags "-fvtable-gc -fno-exceptions -fno-rtti"
a108 1
	set testflags "$cflags $cxxflags"
d115 1
d117 2
@


1.42.4.1
log
@apply mainline testsuite fixes and tweaks
@
text
@d63 1
a63 1
set cxxflags "-fno-exceptions -fno-rtti"
d109 1
a115 1
	    set testflags "$cflags $cxxflags"
a116 2
	} else {
	    set testflags "$cflags $cxxflags -fvtable-gc"
@


1.41
log
@	* ld-selective/selective.exp: Remove check that $CC contains the
	string "gcc".  Do -dumpversion for $CXX.
@
text
@d2 1
a2 1
#   Copyright 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2007
@


1.40
log
@2007-09-30  Mike Frysinger  <vapier@@gentoo.org>

	* ld-selective/selective.exp: Set $compiler based on $testtype and
	use that instead of $CC.
@
text
@d111 6
a116 8
	if [string match "*gcc*" [lindex $CC 0]] {
	    # Starting with 3.4.0, -fvtable-gc is no longer supported and thus
	    # the functionality we try to test for cannot be expected to work.
	    set version [remote_exec host "$CC -dumpversion"]
	    set version [lindex $version 1]
	    if [regexp "^(\[1-9\]\[0-9\]+|\[4-9\]|3.(\[1-9\]\[0-9\]+|\[4-9\]))\\." $version] {
		setup_xfail {*-*-*}
	    }
d118 1
a118 1
    } {
@


1.39
log
@bfd/
	* elflink.c (resolve_symbol): Handle symbols in SEC_MERGE
	sections.  Don't test symbol st_shndx.  Don't bother with
	bfd_link_hash_common symbols.  Print longs rather than ints
	in debug messages.
	(eval_symbol): Replace "sym" and "advanced" params with "symp".
	Replace "addr" and "section_offset" params with "dot".  Don't
	cast bfd_vma values to signed, cast them to bfd_signed_vma.
	(bfd_elf_perform_complex_relocation): Delete "output_bfd", "info",
	"local_syms" and "local_sections" params.  Add "relocation".
	Delete code calculating relocation value.
	(evaluate_complex_relocation_symbols): Delete function.  Fold into..
	(elf_link_input_bfd): ..existing code examining relocs.
	* elf-bfd.h (bfd_elf_perform_complex_relocation): Update prototype.
	* elf32-mep.c (mep_elf_check_relocs): Delete function.
	(mep_elf_gc_sweep_hook, mep_elf_gc_mark_hook): Likewise.
	(mep_elf_object_p): Don't set elf_bad_symtab.
	(elf_backend_check_relocs): Don't define.
	(elf_backend_gc_mark_hook, elf_backend_gc_sweep_hook): Likewise.
	(elf_backend_can_gc_sections, USE_RELA): Likwise.
	(mep_elf_relocate_section): Move bfd_elf_perform_complex_relocation
	call after we have calculated reloc value.  Delete local sym
	debug code.  Use RELOC_FOR_GLOBAL_SYMBOL.  Delete addend
	adjusting code..
	(elf_backend_rela_normal): ..instead define this.
ld/testsuite/
	* ld-selective/sel-dump.exp: Add am33, m88k, mep to xfails.
	* ld-selective/selective.exp: Don't run for same target list
	we xfail sel-dump.
@
text
@d110 1
d122 1
d128 1
a128 1
    if { ![ld_compile "$CC $testflags" $srcdir/$subdir/$testfile $objfile] } {
d135 1
a135 1
	set libgcc [remote_exec host "$CC -print-libgcc-file-name"]
d143 1
a143 1
	set libgcc [remote_exec host "$CC -print-libgcc-file-name"]
d151 1
a151 1
	set libgcc [remote_exec host "$CC -print-libgcc-file-name"]
@


1.38
log
@bfd:
2007-08-28  Mark Shinwell  <shinwell@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* elf32-arm.c (elf32_arm_compare_mapping): Compare first on vma,
	then on type.

binutils/testsuite:
2007-08-28  Mark Shinwell  <shinwell@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* binutils-all/ar.exp (long_filenames): Delete temporary files on
	the host.
	* binutils-all/arm/objdump.exp: Only check "which $OBJDUMP" if
	host is local.
	* binutils-all/objcopy.exp: Use ${srecfile} to get the name of the
	srec file to be passed to binutils_run.
	(objcopy_test_readelf): Use remote_exec.
	* binutils-all/readelf.exp (readelf_find_size): Use remote_exec.
	(readelf_test): Likewise.
	(readelf_wi_test): Likewise.
	* lib/utils-lib.exp (run_dump_test): Only check "which $binary" if
	host is local.  Use remote_exec.  Use $tempfile not
	tmpdir/bintest.o.

gas:
2007-08-28  Mark Shinwell  <shinwell@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* as.c (main): Flush stderr before printing listings to ensure
	consistent output order across platforms.

gas/testsuite:
2007-08-28  Mark Shinwell  <shinwell@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* lib/gas-defs.exp (gas_version): Use remote_* functions instead
	of exec.
	(gas_host_run): New.
	(gas_run): Use gas_host_run.
	(gas_start): Likewise.
	(run_dump_test): Likewise.
	(objdump): Use gas_host_run.
	(objdump_start_no_subdir): Likewise.
	* lib/gas-dg.exp (gas-dg-test): Use "remote_file host delete".
	* lib/run: Remove.
	* gas/macros/macros.exp: Download app4b.s to host.
	* gas/i386/i386.exp (gas_64_check): Use gas_host_run.
	(gas_32_check): Likewise.
	* gas/maxq10/maxq10.exp (gas_64_check): Likewise
	(gas_32_check): Likewise.
	* gas/maxq20/maxq20.exp (gas_64_check): Likewise
	(gas_32_check): Likewise.
	* gas/sparc/sparc.exp (gas_64_check): Likewise.
	* gas/cfi/cfi.exp: Likewise.
	* gas/elf/elf.exp (run_list_test): Likewise.  Use temporary file
	for readelf output in place of pipe.
	* gas/all/gas.exp: Download incbin.dat to host.
	(do_comment): Allow \r\r\n.

ld:
2007-08-28  Mark Shinwell  <shinwell@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* ldlang.c (sort_sections_by_lma): Sort by internal id after lma
	for stable sort.

ld/testsuite:
2007-08-28  Mark Shinwell  <shinwell@@codesourcery.com>
            Joseph Myers  <joseph@@codesourcery.com>

	* ld-elfcomm/elfcomm.exp: Use run_host_cmd.  Only check "which
	$CC" if host is local.
	* ld-checks/checks.exp: Use run_host_cmd.
	* ld-elf/exclude.exp: Likewise.
	* ld-elf/elf.exp: Download merge.ld if host is remote.
	* ld-elf/binutils.exp (binutils_test): Use remote_exec.
	* ld-elf/tls_common.exp: Use run_host_cmd.
	* lib/ld-lib.exp (ld_version): Only check "which $ld" if host is
	local.  Use remote_exec.
	(run_host_cmd): New.
	(run_host_cmd_yesno): New.
	(default_ld_relocate): Use run_host_cmd_yesno.
	(default_ld_link): Likewise.
	(default_ld_simple_link): Use run_host_cmd.
	(default_ld_compile): Only check "which $ccprog" if host is local.
	Use remote_file and remote_exec.
	(default_ld_assemble): Only check "which $as" if host is local.
	Use run_host_cmd.
	(default_ld_nm): Use remote_exec, remote_upload and remote_file.
	(run_dump_test): Use remote_exec, remote_upload and remote_file.
	Only check "which $binary" if host is local.
	(run_ld_link_tests): Use remote_exec, remote_upload and
	remote_file.
	* ld-selective/selective.exp: Only check "which $CXX" if host is
	local.  Use remote_exec.
	* ld-scripts/phdrs.exp: Only check "which $objdump" if host is
	local.  Use run_host_cmd.
	* ld-scripts/phdrs2.exp: Likewise.
	* ld-scripts/weak.exp: Likewise.
	* ld-undefined/weak-undef.exp: Likewise.
	* ld-scripts/crossref.exp: Only check "which $CC" if host is local.
	Use run_host_cmd.
	* ld-scripts/map-address.exp: Upload map_address.map if host is
	remote.
	* ld-srec/srec.exp (run_srec_tests): Use run_host_cmd.  Only check
	"which $CC" and "which $CXX" if host is local.
	* ld-undefined/undefined.exp: Only check "which $CC" if host is
	local.  Use remote_file and run_host_cmd.
	* config/default.exp: Use remote_exec to create tmpdir.
@
text
@d30 9
a38 2
# Alpha and IA64 do not support selective linking
if {[istarget "alpha*-*-*"] || [istarget "ia64-*-*"]} {
@


1.37
log
@Update sources to GPLv3
@
text
@d74 1
a74 1
if { [which $CXX] == 0 } {
d106 2
a107 1
	    catch "exec -- $CC -dumpversion" version
d126 3
a128 1
    	catch "exec $CC -print-libgcc-file-name" libgcc
d134 3
a136 1
    	catch "exec $CC -print-libgcc-file-name" libgcc
d142 3
a144 1
    	catch "exec $CC -print-libgcc-file-name" libgcc
@


1.36
log
@	* ld-selective/selective.exp: Fix selective testcases for MIPS.
@
text
@d2 1
a2 1
#   Copyright 1998, 1999, 2000, 2001, 2002, 2003, 2004
d5 3
a7 1
# This file is free software; you can redistribute it and/or modify
d9 1
a9 1
# the Free Software Foundation; either version 2 of the License, or
d19 2
a20 1
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.
@


1.35
log
@        * ld-elfweak/dsow.dsym: Adjust for non-zero ST_OTHER.
        * ld-elfweak/weak.dsym: Likewise.

        * ld-selective/selective.exp: Don't test alpha.
@
text
@d44 2
a45 2
  {selective2 C   2.c  {}       {}    {foo} {mips*-*}}
  {selective3 C   2.c  {-u foo} {foo} {{foo 0}} {mips*-*}}
d56 7
@


1.34
log
@Update FSF addresses
@
text
@d27 2
a28 2
# IA64 does not support selective linking
if {[istarget "ia64-*-*"]} {
d87 1
a87 1
    setup_xfail "alpha*-*" "arc*-*" "d30v*-*" "dlx*-*" "i370*-*" "i860*-*"
@


1.33
log
@2005-04-14  David S. Miller  <davem@@davemloft.net>

bfd/
	Add TLS support for 64-bit Sparc ELF.
	*  elf64-sparc.c (sparc64_elf_dyn_relocs,
	sparc64_elf_link_hash_entry, sparc64_elf_obj_tdata): New structs.
	(GOT_UNKNOWN, GOT_NORMAL, GOT_TLD_GD, GOT_TLD_IE,
	sparc64_elf_hash_entry, sparc64_elf_tdata,
	sparc64_elf_local_got_tls_type): New defines.
	(sparc64_elf_mkobject): New function.
	(sparc64_elf_link_hash_table): Add members for dynamic linker
	sections PLT, RELPLT, DYNBSS, and RELBSS.  Add tls_ldm_got
	uion to track TLS GOT references.  Add sym_sec to cache
	mappings from local sym to section.
	(link_hash_newfunc): New function.
	(sparc64_elf_bfd_link_hash_table_create): Rename to
	sparc64_elf_link_hash_table_create for consistency.
	Pass link_hash_newfunc to _bfd_elf_link_hash_table_init.
	(sparc64_elf_create_dynamic_sections): Initialize new section
	members of sparc64_elf_link_hash_table.  Only init srelbss
	if not-shared.
	(sparc64_elf_copy_indirect_symbol, sparc64_elf_tls_transition):
	New functions.
	(SPARC_NOP): Define.
	(sparc64_elf_build_plt, sparc64_elf_plt_entry_offset,
	sparc64_elf_plt_ptr_offset): Delete.
	(sparc64_plt_entry_build): New function to build PLT entries
	gradually instread of all at once at the end of linking.
	(sparc64_elf_check_relocs): Delete dynobj, sgot, and srelgot
	local vars.  Get them from sparc64_elf_hash_table instead.
	Check early on if r_symndx is in bounds.  Handle TLS transitions.
	Account for TLS GOT references and DF_STATIC_TLS, as needed.
	For TLS relocs, record the tls_type in either
	sparc64_elf_local_got_tls_type or sparc64_elf_hash_entry as
	appropriate.  For R_SPARC_TLS_{GD,LDM}_CALL, emit a reference
	to the __tls_get_addr symbol.  For PLT relocs, track references
	via h->plt.refcount.  When R_SPARC_{PC10,PC22,PC_HH22,PC_HM10,
	PC_LM22} and h not-NULL, set h->non_got_ref.  For global data
	symbol references, count the number of relocations needed for
	that symbol.  For default switch case, don't error, this lets
	the TLS relocs not explicitly handled by this function get
	accepted.
	(sparc64_elf_gc_mark_hook, sparc64_gc_sweep_hook): New functions.
	(sparc64_elf_adjust_dynamic_symbol): Remove dynobj local var, get
	it from sparc64_elf_hash_table.  Store the real PLT offset
	in h->plt.offset, and build PLT entries one at a time.  Also
	get .dynbss section pointer from htab.
	(allocate_dynrelocs, readonly_dynrelocs,
	sparc64_omit_section_dynsym): New functions.
	(sparc64_elf_omit_section_dynsym): Use these new functions as
	helpers.
	(dtpoff_base, tpoff): New functions.
	(sparc64_elf_relocate_section): Kill dynobj, sgot, and splt
	locals, get them from sparc64_elf_hash_table.  Handle TLS
	relocations and refcounting in main relocation loop.
	(sparc64_elf_finish_dynamic_symbol): Use
	sparc64_elf_link_hash_table.  Build PLT entries as we see
	them.  Handle TLS GOT relocations.
	(sparc64_elf_finish_dynamic_sections): Get sgot and dynobj
	from sparc64_elf_hash_table.  Initialize only PLT header
	not all entries since we not build PLT entries one by one.
	(elf_backend_copy_indirect_symbol, bfd_elf64_mkobject,
	elf_backend_gc_mark_hook, elf_backend_gc_sweep_hook,
	elf_backend_can_gc_sections, elf_backend_can_refcount): Define.
ld/testsuite/
	* ld-selective/sel-dump.exp: Do not exclude sparc64-*.
	* ld-selective/selective.exp: Likewise.
	* ld-sparc/sparc.exp: Add {32,64}-bit prefix to test
	names so we know which one is failing.  Run sparc64 TLS
	tests on multi-arch sparc platforms.
	* ld-sparc/tls64.sd, ld-sparc/tlssunbin64.dd,
	ld-sparc/tlssunbin64.rd, ld/testsuite/ld-sparc/tlssunbin64.sd,
	ld-sparc/tlssunbin64.td, ld-sparc/tlssunnopic64.dd,
	ld-sparc/tlssunnopic64.rd, ld-sparc/tlssunnopic64.sd,
	ld-sparc/tlssunpic64.dd, ld-sparc/tlssunpic64.rd,
	ld-sparc/tlssunpic64.sd, ld-sparc/tlssunpic64.td): Update now
	that sparc64 ELF does support TLS.
@
text
@d17 1
a17 1
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
@


1.32
log
@	* ld-selective/selective.exp: Use -print-libgcc-file-name for
	ARM and v850 also.
@
text
@d88 1
a88 1
    setup_xfail "i960*-*" "mn10200-*" "or32-*" "pj-*" "sparc64*-*"
@


1.32.2.1
log
@        * ld-elfweak/dsow.dsym: Adjust for non-zero ST_OTHER.
        * ld-elfweak/weak.dsym: Likewise.

        * ld-selective/selective.exp: Don't test alpha.
@
text
@d27 2
a28 2
# Alpha and IA64 do not support selective linking
if {[istarget "alpha*-*-*"] || [istarget "ia64-*-*"]} {
d87 1
a87 1
    setup_xfail "arc*-*" "d30v*-*" "dlx*-*" "i370*-*" "i860*-*"
@


1.31
log
@* ld-elfvsb/main.c: Ensure visibility_def and visibility_func are
  actually referenced (gcc 3.4 eliminates comparisons of addresses
  of global symbols with NULL).
* ld-selective/selective.exp: Suppress -fvtable-gc tests for gcc
  3.4.0 and above, as this option and its functionality is no longer
  supported, making these tests fail).
@
text
@d2 2
a3 1
#   Copyright 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
a113 1
    # FIXME: This does not work with installed toolchains!
d115 2
a116 1
	set objfile "$objfile -L ../gcc -lgcc"
a119 1
    # FIXME: This does not work with installed toolchains!
d121 2
a122 1
	set objfile "$objfile -L ../gcc -lgcc"
@


1.30
log
@2004-01-09  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-selective/selective.exp: Skip ia64-*-*.
@
text
@d92 8
@


1.29
log
@	* ld-selective/sel-dump.exp: Use is_elf_format, xfail assorted targets.
	* ld-selective/selective.exp: Likewise.
@
text
@d26 5
d87 1
a87 1
    setup_xfail "i960*-*" "ia64*-*" "mn10200-*" "or32-*" "pj-*" "sparc64*-*"
@


1.28
log
@2003-07-22  H.J. Lu <hongjiu.lu@@intel.com>

	* ld-selective/selective.exp: Skip "ia64-*-*".

	* ld-srec/srec.exp: Make xfail on "ia64-*-*".
@
text
@d21 2
a22 28

# AOUT based ports do not support selective linking
if {[istarget "*-*-*aout*"] \
    || [istarget "*-*-*bout*"] \
    || [istarget "vax-*-ultrix*"]} {
    return
}

# COFF based ports do not support selective linking
if {[istarget "*-*-coff"]} {
    return
}
if {[istarget "*-*-pe"]} {
    return
}

# Alpha does not support selective linking
if {[istarget "alpha*-*-*"]} {
    return
}

# IA64 does not support selective linking
if {[istarget "ia64-*-*"]} {
    return
}

# s390 does not support selective linking
if {[istarget "s390*-*-*"]} {
d37 2
a38 2
  {selective1 C   1.c  {}       {}    {dropme1 dropme2} {alpha*-*}}
  {selective2 C   2.c  {}       {}    {foo} {alpha*-* mips*-*}}
d40 2
a41 2
  {selective4 C++ 3.cc {}       {start a A::foo() B::foo()} {A::bar()} {alpha*-*  mips*-*}}
  {selective5 C++ 4.cc {}       {start a A::bar()} {A::foo() B::foo()} {alpha*-*  mips*-*}}
d81 2
@


1.27
log
@	* ld-elfvsb/elf-offset.ld: Add .rel.eh_frame and .rela.eh_frame
	to linker script.
	* ld-elfvsb/elfvsb.exp (visibility_run): Add setup_xfails for s390x.
	* ld-selective/selective.exp: Disable for s390 and s390x.
	* ld-shared/elf-offset.ld: Add .rel.eh_frame and .rela.eh_frame
	to linker script.
	* ld-shared/shared.exp (shared_test): Add setup_xfails for s390x.
	* ld-undefined/undefined.exp (checkund): Remove setup_xfail for s390x.
@
text
@d42 5
@


1.26
log
@	* ld-discard/discard.exp: Don't run on linuxaout or linuxoldld.
	* ld-linkonce/linkonce.exp: Likewise.
	* ld-selective/sel-dump.exp: Likewise.
	* ld-selective/selective.exp: Don't run on aout or bout.
@
text
@d42 5
@


1.26.2.1
log
@	Merge from mainline:

	2003-05-13  H.J. Lu <hongjiu.lu@@intel.com>
	* ld-elfweak/elfweak.exp: Fix typo.

	2003-05-13  Kaz Kojima  <kkojima@@rr.iij4u.or.jp>
	* ld-elfvers/vers.exp: Run on sh[34]*-*-linux*.
	* ld-elfvsb/elfvsb.exp: Likewise.
	* ld-elfweak/elfweak.exp: Likewise.

	2003-05-09  Martin Schwidefsky  <schwidefsky@@de.ibm.com>
	* ld-elfvsb/elf-offset.ld: Add .rel.eh_frame and .rela.eh_frame
	to linker script.
	* ld-elfvsb/elfvsb.exp (visibility_run): Add setup_xfails for s390x.
	* ld-selective/selective.exp: Disable for s390 and s390x.
	* ld-shared/elf-offset.ld: Add .rel.eh_frame and .rela.eh_frame
	to linker script.
	* ld-shared/shared.exp (shared_test): Add setup_xfails for s390x.
	* ld-undefined/undefined.exp (checkund): Remove setup_xfail for s390x.

	2003-05-08  H.J. Lu <hongjiu.lu@@intel.com>
	* ld-elfvers/vers.exp: Add vers27d4 and vers27d5 to test
	versioned reference for hidden symbol.

	* ld-elfvers/vers27d4.dsym: New file.
	* ld-elfvers/vers27d4.ver: Likewise.

	2003-05-07  H.J. Lu <hongjiu.lu@@intel.com>
	* ld-elfvers/vers27d3.c (__start): New.
	(start): New.

	2003-05-07  H.J. Lu <hongjiu.lu@@intel.com>
	* ld-elfvers/vers.exp (build_binary): Support build exeutable.
	(build_binary): Renamed from ...
	(build_vers_lib): This.
	(build_vers_lib_no_pic): Updated.
	(build_vers_lib_pic): Likewise.
	Add vers27d1, vers27d2 and vers27d3 to test versioned
	definition for hidden symbol referenced by a DSO.

	* ld-elfvers/vers27d.dsym: New file.
	* ld-elfvers/vers27d.sym: Likewise.
	* ld-elfvers/vers27d.ver: Likewise.
	* ld-elfvers/vers27d1.c: Likewise.
	* ld-elfvers/vers27d2.c: Likewise.
	* ld-elfvers/vers27d3.c: Likewise.

	2003-05-07  Andreas Schwab  <schwab@@suse.de>
	* ld-elfvsb/elfvsb.exp: Run dump tests even when cross
	compiling.

	2003-05-06  Alexandre Oliva  <aoliva@@redhat.com>
	* config/default.exp (gcc_gas_flags): Force ABI to n32 on
	mips64-linux.
	* ld-elf/merge.d: Xfail on mips64*-linux-gnu*.
	* ld-mips-elf/mips-elf-flags.exp (ldemul): Set to o32-compatible
	on mips-sgi-irix6*, mips64-linux-gnu and mips64el-linux-gnu.
	(good_combination, bad_combination): Use it.
	Add -32 or -mabi=o64 wherever the ABI was formerly implied.

	2003-05-06  H.J. Lu <hjl@@gnu.org>
	* ld-elfvers/vers.exp (objdump_versionstuff): Support comment
	in expected version file.

	* ld-elfvers/vers25b.c: Add a line of comment.
	* ld-elfvers/vers25b.dsym: Likwise.
	* ld-elfvers/vers25b.ver: Likwise.
	* ld-elfvers/vers26b.dsym: Likwise.
	* ld-elfvers/vers26b.ver: Likwise.
	* ld-elfvers/vers27b.dsym: Likwise.
	* ld-elfvers/vers27b.ver: Likwise.
	* ld-elfvers/vers27c.c: Likwise.
	* ld-elfvers/vers27c.dsym: Likwise.
	* ld-elfvers/vers27c.ver: Likwise.
@
text
@a41 5
# s390 does not support selective linking
if {[istarget "s390*-*-*"]} {
    return
}

@


1.25
log
@        * ld-elfvsb/elfvsb.exp: Mirror ia64 non-pic xfails for alpha.
        * ld-shared/shared.exp: Likewise.
        * ld-selective/selective.exp: Disable for alpha.
        * ld-undefined/undefined.exp: Add alpha to dwarf2 xfails.
@
text
@d23 3
a25 1
if {[istarget "vax-*-ultrix*"]} {
@


1.25.2.1
log
@2002-09-23  Daniel Jacobowitz  <drow@@mvista.com>

	Merge from mainline:
	2002-09-19  Jakub Jelinek  <jakub@@redhat.com>
	* ld-i386/i386.exp: New.
	* ld-i386/tlsbin.dd: New test.
	* ld-i386/tlsbinpic.s: New test.
	* ld-i386/tlsbin.rd: New test.
	* ld-i386/tlsbin.s: New test.
	* ld-i386/tlsbin.sd: New test.
	* ld-i386/tlsbin.td: New test.
	* ld-i386/tlslib.s: New test.
	* ld-i386/tlsnopic1.s: New test.
	* ld-i386/tlsnopic2.s: New test.
	* ld-i386/tlsnopic.dd: New test.
	* ld-i386/tlsnopic.rd: New test.
	* ld-i386/tlsnopic.sd: New test.
	* ld-i386/tlspic1.s: New test.
	* ld-i386/tlspic2.s: New test.
	* ld-i386/tlspic.dd: New test.
	* ld-i386/tlspic.rd: New test.
	* ld-i386/tlspic.sd: New test.
	* ld-i386/tlspic.td: New test.

	2002-08-13  H.J. Lu <hjl@@gnu.org>
	* ld-elfvers/vers.exp: Add vers23c and vers23d.

	* ld-elfvers/vers23c.ver: New.
	* ld-elfvers/vers23d.dsym: New.

	2002-08-12  H.J. Lu <hjl@@gnu.org>
	* ld-elfvers/vers.exp: Add vers23.

	* ld-elfvers/vers23.c: New.
	* ld-elfvers/vers23.dsym: New.
	* ld-elfvers/vers23.ver: New.
	* ld-elfvers/vers23a.c: New.
	* ld-elfvers/vers23a.dsym: New.
	* ld-elfvers/vers23a.map: New.
	* ld-elfvers/vers23a.sym: New.
	* ld-elfvers/vers23a.ver: New.
	* ld-elfvers/vers23b.c: New.
	* ld-elfvers/vers23b.dsym: New.
	* ld-elfvers/vers23b.map: New.
	* ld-elfvers/vers23b.ver: New.

	2002-08-10  Alan Modra  <amodra@@bigpond.net.au>
	* ld-discard/discard.exp: Don't run on linuxaout or linuxoldld.
	* ld-linkonce/linkonce.exp: Likewise.
	* ld-selective/sel-dump.exp: Likewise.
	* ld-selective/selective.exp: Don't run on aout or bout.

	2002-08-08  H.J. Lu <hjl@@gnu.org>
	* ld-elfvers/vers.exp: Add vers22.

	* ld-elfvers/vers22.c: New.
	* ld-elfvers/vers22.dsym: New.
	* ld-elfvers/vers22.map: New.
	* ld-elfvers/vers22.ver: New.
	* ld-elfvers/vers22a.c: New.
	* ld-elfvers/vers22a.dsym: New.
	* ld-elfvers/vers22a.sym: New.
	* ld-elfvers/vers22a.ver: New.
	* ld-elfvers/vers22b.c: New.
	* ld-elfvers/vers22b.dsym: New.
	* ld-elfvers/vers22b.ver: New.

	2002-08-08  Stephen Clarke <stephen.clarke@@superh.com>
	* ld-sh/sh64/abi32.xd: Adjust whitespace in elf32 section
	listing.
	* ld-sh/sh64/cmpct1.xd, ld-sh/sh64/mix1.xd, ld-sh/sh64/mix2.xd,
	ld-sh/sh64/rel32.xd, ld-sh/sh64/shdl32.xd: Likewise.

	2002-08-07  H.J. Lu <hjl@@gnu.org>
	* ld-elfvers/vers.exp: Add --no-undefined-version.

	* ld-elfvers/vers1.map: Remove the unused foo1 and foo2.
	* ld-elfvers/vers8.map: Likewise.
	* ld-elfvers/vers18.map: Likewise.

	2002-08-07  Stephen Clarke <stephen.clarke@@superh.com>
	* ld-sh/sh64/abi32.xd: Adjust as type of linker-script-symbols
	is no longer set to object.
	* ld-sh/sh64/abi64.xd, ld-sh/sh64/cmpct1.xd, ld-sh/sh64/crange1.rd,
	ld-sh/sh64/crange2.rd, ld-sh/sh64/crange3-cmpct.rd,
	ld-sh/sh64/crange3-media.rd, ld-sh/sh64/crange3.rd,
	ld-sh/sh64/mix1.xd, ld-sh/sh64/mix2.xd, ld-sh/sh64/shdl32.xd,
	ld-sh/sh64/shdl64.xd: Likewise.

	2002-08-06  H.J. Lu <hjl@@gnu.org>
	* ld-elfvers/vers.exp: Add --no-undefined-version.

	* ld-elfvers/vers1.map: Remove the unused foo1 and foo2.
	* ld-elfvers/vers8.map: Likewise.
	* ld-elfvers/vers18.map: Likewise.

	2002-07-28  John David Anglin  <dave@@hiauly1.hia.nrc.ca>
	* ld-discard/discard.exp, ld-scripts/phdrs.exp, ld-scripts/phdrs2.exp,
	ld-selective/sel-dump.exp: Test hppa*64*-*-hpux* target.
	* ld-elfvers/vers.exp, ld-elfvsb/elfvsb.exp, ld-elfweak/elfweak.exp,
	ld-linkonce/linkonce.exp, ld-shared/shared.exp,
	ld-undefined/weak-undef.exp:  Test hppa*64*-*-hpux* and hppa*-*-linux*
	targets.
	* ld-discard/exit.s, ld-discard/extern.s, ld-discard/start.s,
	ld-discard/static.s: Add whitespace before assembler directives.

	2002-07-15  H.J. Lu <hjl@@gnu.org>
	* ld-elfvers/vers.exp: Add vers21.

	* ld-elfvers/vers21.c: New.
	* ld-elfvers/vers21.dsym: New.
	* ld-elfvers/vers21.map: New.
	* ld-elfvers/vers21.sym: New.
	* ld-elfvers/vers21.ver: New.
@
text
@d23 1
a23 3
if {[istarget "*-*-*aout*"] \
    || [istarget "*-*-*bout*"] \
    || [istarget "vax-*-ultrix*"]} {
@


1.24
log
@Add 'n' in order to prevent "-n" from being taken as an abbreviation for
"--no-pipeline-knowledge".
@
text
@d35 5
@


1.23
log
@	* ld-selective/selective.exp: Link against libgcc on
	hppa*-*-linux* targets.
@
text
@d107 1
d113 1
@


1.22
log
@Contribute sh64-elf.
2002-02-02  Alexandre Oliva  <aoliva@@redhat.com>
* ld-sh/sh64/crange3-cmpct.rd: Adjust offsets.
* ld-sh/sh64/crange3-media.rd: Likewise.
* ld-sh/sh64/crange3.rd: Likewise.
* ld-sh/sh64/crangerel1.rd: Likewise.
* ld-sh/sh64/crangerel2.rd: Likewise.
* ld-sh/sh64/reldl32.rd: Likewise.
* ld-sh/sh64/reldl64.rd: Likewise.
2002-01-28  Alexandre Oliva  <aoliva@@redhat.com>
* ld-sh/sh64/abi32.xd: Formatting changes to match the current
output of objdump.
* ld-sh/sh64/cmpct1.xd: Likewise.
* ld-sh/sh64/crange1.rd: Likewise.
* ld-sh/sh64/crange2.rd: Likewise.
* ld-sh/sh64/crange3-cmpct.rd: Likewise.
* ld-sh/sh64/crange3-media.rd: Likewise.
* ld-sh/sh64/crange3.rd: Likewise.
* ld-sh/sh64/crangerel1.rd: Likewise.
* ld-sh/sh64/crangerel2.rd: Likewise.
* ld-sh/sh64/mix1.xd: Likewise.
* ld-sh/sh64/mix2.xd: Likewise.
* ld-sh/sh64/rel32.xd: Likewise.
* ld-sh/sh64/reldl32.rd: Likewise.
* ld-sh/sh64/reldl64.rd: Likewise.
* ld-sh/sh64/sh64.exp: Likewise.  Reordered cranges and stack
sessions, to match changes in the linker script.
2001-06-14  Alexandre Oliva  <aoliva@@redhat.com>
* ld-sh/sh64/reldl32.rd, ld-sh/sh64/reldl64.rd: Adjust relocation
info to reflect renumbering of relocation types.
2001-03-14  DJ Delorie	<dj@@redhat.com>
* ld-sh/sh64/endian.dbd: New file, endian tests.
* ld-sh/sh64/endian.dld: Ditto.
* ld-sh/sh64/endian.ld:	 Ditto.
* ld-sh/sh64/endian.s:	Ditto.
* ld-sh/sh64/endian.sbd:  Ditto.
* ld-sh/sh64/endian.sld:  Ditto.
* ld-sh/sh64/sh64.exp: Add above tests.	 Add -L option to ld.
2001-03-12  DJ Delorie	<dj@@redhat.com>
* ld-sh/sh64/relax.exp: New file, test disabling relaxing.
* ld-sh/sh64/relax1.s: Ditto.
* ld-sh/sh64/relax2.s: Ditto.
* ld-sh/sh64/relax3.s: Ditto.
* ld-sh/sh64/relax4.s: Ditto.
* ld-sh/sh64/relfail.exp: New file, test for bogus relocs.
* ld-sh/sh64/relfail.s: Ditto.
2001-03-12  DJ Delorie	<dj@@redhat.com>
* ld-sh/sh.exp: This test isn't appropriate for SH64 since it
uses SH32 assembler files.
2001-03-07  DJ Delorie	<dj@@redhat.com>
* ld-selective/selective.exp: Pass "-e _start" for sh64 to
accomodate expected start symbol in test.
2001-03-06  DJ Delorie	<dj@@redhat.com>
* ld-scripts/crossref.exp: Pass -mshelf32 to the linker for sh64,
to match what gcc passes to the linker by default.
* ld-selective/selective.exp: Ditto.
* ld-srec/srec.exp: Ditto, plus XFAIL for sh64.
* ld-undefined/undefined.exp: Add XFAIL for sh64 (it's dwarf2).
2001-03-06  DJ Delorie	<dj@@redhat.com>
* ld-sh/sh64/abi32.xd (stack): Adjust for new default stack layout.
* ld-sh/sh64/abi64.xd (stack): Ditto.
* ld-sh/sh64/cmpct1.xd (stack): Ditto.
* ld-sh/sh64/crange1.rd (stack): Ditto.
* ld-sh/sh64/crange2.rd (stack): Ditto.
* ld-sh/sh64/crange3-cmpct.rd (stack): Ditto.
* ld-sh/sh64/crange3-media.rd (stack): Ditto.
* ld-sh/sh64/crange3.rd (stack): Ditto.
* ld-sh/sh64/mix1.xd (stack): Ditto.
* ld-sh/sh64/mix2.xd (stack): Ditto.
* ld-sh/sh64/shdl32.xd (stack): Ditto.
* ld-sh/sh64/shdl64.xd (stack): Ditto.
2001-01-14  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/mix1.xd: Add SORT_ENTRIES for .cranges section.
* ld-sh/sh64/mix2.xd: Ditto.
2001-01-08  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/abi32.xd: Adjust for bit 0 set on an entry address
being SHmedia.
* ld-sh/sh64/shdl64.xd: Ditto.
* ld-sh/sh64/shdl32.xd: Ditto.
* ld-sh/sh64/mix2.xd: Ditto.
* ld-sh/sh64/crange3-media.rd: Ditto.
* ld-sh/sh64/abi64.xd: Ditto.
2001-01-06  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/crange-2a.s (diversion2): New global symbol.
* ld-sh/sh64/crange1.rd: Adjust to presence of new symbol.
Adjust section type for .cranges; expect sorted contents.
* ld-sh/sh64/crange2.rd: Ditto.
* ld-sh/sh64/crange3.dd, ld-sh/sh64/crange3.rd: Ditto.
* ld-sh/sh64/crangerel1.rd: Adjust to presence of new symbol.
* ld-sh/sh64/crangerel2.rd: Ditto.
* ld-sh/sh64/mix1.xd: Adjust to DEBUGGING being set for .cranges.
* ld-sh/sh64/mix2.xd: Ditto.
* ld-sh/sh64/crange3-cmpct.rd, ld-sh/sh64/crange3-media.rd: New
tests.
* ld-sh/sh64/sh64.exp: Tweak test message.  Run new tests.
2001-01-05  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/shmix-1.s (start2): Add a NOP to provide a valid
target for (unexpanded) PTB.  Add an .align 2 to SHmedia code to
keep properly aligned.
* ld-sh/sh64/mix1.sd, ld-sh/sh64/mix1.xd: Adjust accordingly.
* ld-sh/sh64/mix1-noexp.sd, ld-sh/sh64/mix2-noexp.sd,
ld-sh/sh64/abixx-noexp.sd: New tests for GAS -no-expand and
R_SH_PT_16 relocation.
* ld-sh/sh64/sh64.exp: Run new tests.
2000-12-30  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/crange-2f.s, ld-sh/sh64/crange-2g.s,
ld-sh/sh64/crange-2h.s, ld-sh/sh64/crange-2i.s,
ld-sh/sh64/crange3.dd, ld-sh/sh64/crange3.rd: New tests.
* ld-sh/sh64/sh64.exp: Run new tests.
* ld-sh/sh64/crange1.rd: Correct section flags.
* ld-sh/sh64/crange2.rd: Ditto.
* ld-sh/sh64/crangerel1.rd: Ditto.
2000-12-18  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/crange-1.s, ld-sh/sh64/crange-2a.s,
ld-sh/sh64/crange-2b.s, ld-sh/sh64/crange-2c.s,
ld-sh/sh64/crange-2d.s, ld-sh/sh64/crange-2e.s,
ld-sh/sh64/crange1.rd, ld-sh/sh64/crange2.rd,
ld-sh/sh64/crangerel1.rd, ld-sh/sh64/crangerel2.rd: New tests for
handling .cranges section.
* ld-sh/sh64/sh64.exp: Run new tests.
* ld-sh/sh64/mix1.sd, ld-sh/sh64/mix1.xd, ld-sh/sh64/mix2.sd,
ld-sh/sh64/mix2.xd: Adjust for .cranges section.
2000-12-15  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/abi32.sd, ld-sh/sh64/abi32.xd, ld-sh/sh64/abi64.sd,
ld-sh/sh64/abi64.xd, ld-sh/sh64/cmpct1.xd, ld-sh/sh64/mix1.sd,
ld-sh/sh64/mix1.xd, ld-sh/sh64/mix2.sd, ld-sh/sh64/mix2.xd,
ld-sh/sh64/shdl32.xd, ld-sh/sh64/shdl64.xd: Adjust to .bss and
.data individually 8-byte aligned.
2000-12-09  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/rel-1.s, ld-sh/sh64/rel-2.s, ld-sh/sh64/rel32.xd,
ld-sh/sh64/rel64.xd, ld-sh/sh64/reldl-1.s, ld-sh/sh64/reldl-2.s,
ld-sh/sh64/reldl32.rd, ld-sh/sh64/reldl64.rd: New tests.
* ld-sh/sh64/sh64.exp: Make it possible to use readelf as
inspection tool.  Run new tests.
2000-12-07  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/abi64.sd, ld-sh/sh64/abi32.sd, ld-sh/sh64/mix1.sd,
ld-sh/sh64/mix2.sd: Correct offsets in PT/PTA/PTB expansions.
* ld-sh/sh64/shdl-1.s, ld-sh/sh64/shdl-2.s, ld-sh/sh64/shdl64.sd,
ld-sh/sh64/shdl64.xd, ld-sh/sh64/shdl32.xd: New tests.
* ld-sh/sh64/sh64.exp: Run new tests.
2000-12-01  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/cmpct1.sd, ld-sh/sh64/cmpct1.xd,
ld-sh/sh64/shcmp-1.s: New test.
* ld-sh/sh64/sh64.exp: Add new test to sh64tests.  Reformat.
2000-11-30  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/sh64.exp: Use linker option -mshelf64 for 64-bit ABI
test.
* ld-sh/sh64/abi64.xd: Tweak for 64-bit ELF.
2000-11-29  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/sh64.exp (sh64tests): Use linker option -mshelf32 for
tests.
2000-11-27  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/abi32.sd, ld-sh/sh64/abi64.sd: Correct MOVI
registers.
* ld-sh/sh64/mix1.sd, ld-sh/sh64/mix1.xd, ld-sh/sh64/shmix-1.s:
New test.
* ld-sh/sh64/mix2.sd, ld-sh/sh64/mix2.xd, ld-sh/sh64/shmix-2.s,
ld-sh/sh64/shmix-3.s: New test.
* ld-sh/sh64/sh64.exp: Add new tests to sh64tests.
2000-11-26  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64: New testsuite.
@
text
@d8 1
a8 1
# 
d13 1
a13 1
# 
d110 1
a110 1
    
d115 7
a121 1
    
d145 1
a145 1
    # Check each mandated symbol and optionally mandated values. 
@


1.22.2.1
log
@John David Anglin's 2002-02-12 mainline changes
@
text
@d8 1
a8 1
#
d13 1
a13 1
#
d110 1
a110 1

d115 1
a115 7

    # HPPA linux targets need libgcc.a for millicode routines ($$dyncall).
    if [istarget hppa*-*-linux*] {
    	catch "exec $CC -print-libgcc-file-name" libgcc
	set objfile "$objfile $libgcc"
    }

d139 1
a139 1
    # Check each mandated symbol and optionally mandated values.
@


1.21
log
@For ARM targets, link with libgcc.a.
@
text
@d59 7
@


1.20
log
@Return if target is `vax-*-ultrix*'.
Continue with other tests when there is a compilation error.
@
text
@d2 1
a2 1
#   Copyright 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
d104 5
a191 1

@


1.19
log
@2001-07-27  H.J. Lu  <hjl@@gnu.org>

	* ld-selective/selective.exp: Fix the error in the last change.
@
text
@d22 5
d46 6
a51 6
  {selective1 C 1.c {} {} {dropme1 dropme2} {alpha*-*}}
  {selective2 C 2.c {} {} {foo} {alpha*-* mips*-*}}
  {selective3 C 2.c {-u foo} {foo} {{foo 0}} {mips*-*}}
  {selective4 C++ 3.cc {} {start a A::foo() B::foo()} {A::bar()} {alpha*-*  mips*-*}}
  {selective5 C++ 4.cc {} {start a A::bar()} {A::foo() B::foo()} {alpha*-*  mips*-*}}
  {selective6 C++ 5.cc {} {start a A::bar()}
d96 1
a96 1
	return
@


1.18
log
@	* ld-selective/selective.exp: Support g++ V3 ABI (along side
	the old ABI).  Make comparisons against normalized (to
	V3-style) demangled nm output.
@
text
@d44 2
a45 2
  {selective4 C++ 3.cc {} {start a A::foo() B::foo()} {A::bar()} {mips*-*}}
  {selective5 C++ 4.cc {} {start a A::bar()} {A::foo() B::foo()} {mips*-*}}
@


1.17
log
@	* config/default.exp (ld_nm): Add "nmflags" arg.
	* lib/ld-lib.exp (default_ld_nm): Likewise.
	* ld-empic/empic.exp: Adjust call to ld_nm.
	* ld-scripts/defined.exp: Likewise.
	* ld-scripts/script.exp: Likewise.
	* ld-scripts/sizeof.exp: Likewise.
	* ld-selective/selective.exp: Likewise.
	* ld-sh/sh.exp: Likewise.
@
text
@d44 4
a47 3
  {selective4 C++ 3.cc {} {start foo__1A foo__1B} {bar__1A} {alpha*-* mips*-*}}
  {selective5 C++ 4.cc {} {} {foo__1B foo__1A} {alpha*-* mips*-*}}
  {selective6 C++ 5.cc {} {} {foo__1B foo__1A dropme1__Fv dropme2__Fv} {*-*-*}}
d110 1
a110 1
    if ![ld_nm $nm "" $ldfile] {
d113 7
@


1.16
log
@2001-07-12  H.J. Lu  <hjl@@gnu.org>

	* ld-selective/selective.exp: Mark selective1, selective2,
	selective4 and selective5 xfail on alpha*-*.
@
text
@d109 1
a109 1
    if ![ld_nm $nm $ldfile] {
@


1.15
log
@2001-06-06  H.J. Lu  <hjl@@gnu.org>

	* ld-bootstrap/bootstrap.exp: Rebuild tmpdir/ld2 with tmpdir/ld3
	on Linux/mips.

	* ld-elfvers/vers.exp: Also run on istarget Linux/mips.
	* ld-elfvsb/elfvsb.exp: Likewise.
	* ld-shared/shared.exp: Likewise.

	* ld-selective/selective.exp: Mark selective2, selective3,
	selective4 and selective5 xfail on Linux/mips.

	* ld-shared/main.c: Skip invalid -Bsymbolic tests on Linux/mips.

	* symbolic.dat: Remove invalid -Bsymbolic tests on Linux/mips.

	* ld-srec/srec.exp: Add Linux/mips to xfail.
@
text
@d41 2
a42 2
  {selective1 C 1.c {} {} {dropme1 dropme2} {}}
  {selective2 C 2.c {} {} {foo} {mips*-*}}
d44 2
a45 2
  {selective4 C++ 3.cc {} {start foo__1A foo__1B} {bar__1A} {mips*-*}}
  {selective5 C++ 4.cc {} {} {foo__1B foo__1A} {mips*-*}}
@


1.14
log
@001-04-01  David O'Brien  <obrien@@FreeBSD.org>
	* ld-selective/selective.exp: Use -O with gcc rather than -O2.
	This optimization level is buggy on some platforms, and this test
	is not intended to test compiler optimizations.

Approved by:  Alan Modra <alan@@linuxcare.com.au>
              <Pine.LNX.4.21.0104021510450.487-100000@@front.linuxcare.com.au>
@
text
@d42 4
a45 4
  {selective2 C 2.c {} {} {foo} {}}
  {selective3 C 2.c {-u foo} {foo} {{foo 0}} {}}
  {selective4 C++ 3.cc {} {start foo__1A foo__1B} {bar__1A} {}}
  {selective5 C++ 4.cc {} {} {foo__1B foo__1A} {}}
@


1.13
log
@Fixtypos in ChangeLogs, fix copyright dates in files
@
text
@d49 1
a49 1
set cflags "-w -O2 -ffunction-sections -fdata-sections"
@


1.12
log
@	* ld-srec/srec.exp (run_srec_test): m6811 code has references
	to soft registers, define them with --defsym.
	* ld-selective/selective.exp: Likewise.
@
text
@d2 1
a2 1
#   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation
@


1.11
log
@Fix v850 test failures
@
text
@d2 1
a2 1
#   Copyright (C) 1998, 1999, 2000 Free Software Foundation
d98 6
@


1.11.2.1
log
@	* ld-srec/srec.exp (run_srec_test): m6811 code has references
	to soft registers, define them with --defsym.
	* ld-selective/selective.exp: Likewise.
@
text
@d2 1
a2 1
#   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation
a97 6
    # m6811/m6812 code has references to soft registers.
    if {[istarget m6811-*-*] || [istarget m6812-*-*]} {
	set objfile "$objfile --defsym _.frame=0 --defsym _.d1=0"
	set objfile "$objfile --defsym _.d2=0"
    }

@


1.11.2.2
log
@	* ld-selective/selective.exp: Don't run test for 68hc11 and 68hc12
	because selective linking is not yet implemented.
@
text
@a29 5
# selective linking is not yet implemented for 68hc11/68hc12
if {[istarget "m6811-*-*"] || [istarget "m6812-*-*"]} {
    return
}

@


1.11.2.3
log
@001-04-01  David O'Brien  <obrien@@FreeBSD.org>
	* ld-selective/selective.exp: Use -O with gcc rather than -O2.
	This optimization level is buggy on some platforms, and this test
	is not intended to test compiler optimizations.

Approved by:  Alan Modra <alan@@linuxcare.com.au>
              <Pine.LNX.4.21.0104021510450.487-100000@@front.linuxcare.com.au>
@
text
@d54 1
a54 1
set cflags "-w -O -ffunction-sections -fdata-sections"
@


1.11.2.4
log
@Update copyright notices.
@
text
@d2 1
a2 1
#   Copyright 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
@


1.11.2.5
log
@Merge from mainline.
@
text
@d47 4
a50 4
  {selective2 C 2.c {} {} {foo} {mips*-*}}
  {selective3 C 2.c {-u foo} {foo} {{foo 0}} {mips*-*}}
  {selective4 C++ 3.cc {} {start foo__1A foo__1B} {bar__1A} {mips*-*}}
  {selective5 C++ 4.cc {} {} {foo__1B foo__1A} {mips*-*}}
@


1.10
log
@	* ld-selective/selective.exp <no CXX>: Fix typo for argument to
	"untested".
@
text
@d44 1
a44 1
  {selective4 C++ 3.cc {} {start foo__1A foo__1B} {bar__1A} {v850*-*-elf}}
d93 5
@


1.9
log
@	* ld-selective/selective.exp: Rearrange to be table-driven.
@
text
@d56 1
a56 1
	untested "[lindex $seltests 0]"
@


1.8
log
@	* ld-selective/5.cc: New test.
	* ld-selective/selective.exp: Run it as xfailed.

	* ld-selective/4.cc: Correct spelling of "lose".
@
text
@d2 1
a2 1
#   Copyright (C) 1998, 1999 Free Software Foundation
d30 18
a47 6
set test1 "selective1"
set test2 "selective2"
set test3 "selective3"
set test4 "selective4"
set test5 "selective5"
set test6 "selective6"
d53 1
d55 3
a57 6
    untested $test1
    untested $test2
    untested $test3
    untested $test4
    untested $test5
    untested $test6
d61 12
a72 4
if { ![ld_compile "$CC $cflags" $srcdir/$subdir/1.c tmpdir/1.o]} {
    unresolved $test1
    return
}
d74 2
a75 19
if ![ld_simple_link $ld tmpdir/1.x "$ldflags tmpdir/1.o"] {
    fail $test1
} else {
    if ![ld_nm $nm tmpdir/1.x] {
	unresolved $test1
    } else {
	if {[info exists nm_output(dropme1)]} {
	    send_log "dropme1 == $nm_output(dropme1)\n"
	    verbose "dropme1 == $nm_output(dropme1)"
	    fail $test1
	} else {
	    if {[info exists nm_output(dropme2)]} {
		send_log "dropme2 == $nm_output(dropme2)\n"
		verbose "dropme2 == $nm_output(dropme2)"
		fail $test1
	    } else {
		pass $test1
	    }
	}
a76 1
}
d78 6
a83 4
if { ![ld_compile "$CC $cflags" $srcdir/$subdir/2.c tmpdir/2.o]} {
    unresolved $test2
    return
}
d85 6
a90 13
if ![ld_simple_link $ld tmpdir/2.x "$ldflags tmpdir/2.o"] {
    fail $test2
} else {
    if ![ld_nm $nm tmpdir/2.x] {
	unresolved $test2
    } else {
	if {[info exists nm_output(foo)] } {
            send_log "foo == $nm_output(foo)\n"
            verbose "foo == $nm_output(foo)"
            fail $test2
	} else {
            pass $test2
	}
a91 1
}
d93 4
a96 4
if { ![ld_compile "$CC $cflags" $srcdir/$subdir/2.c tmpdir/2.o]} {
    unresolved $test3
    return
}
d98 3
a100 19
if ![ld_simple_link $ld tmpdir/2.x "$ldflags -u foo tmpdir/2.o"] {
    fail $test3
} else {
    if ![ld_nm $nm tmpdir/2.x] {
	unresolved $test3
    } else {
	if {![info exists nm_output(foo)] } {
	    send_log "bad output from nm\n"
	    verbose "bad output from nm"
	    fail $test3
	} else {
	    if {$nm_output(foo) == 0} {
		send_log "foo == $nm_output(foo)\n"
		verbose "foo == $nm_output(foo)"
		fail $test3
	    } else {
                pass $test3
	    }
	}
a101 1
}
d103 24
a126 38
setup_xfail "v850*-*-elf"

if { ![ld_compile "$CC $cflags $cxxflags" $srcdir/$subdir/3.cc tmpdir/3.o]} {
    unresolved $test4
    return
}

setup_xfail "v850*-*-elf"

if ![ld_simple_link $ld tmpdir/3.x "$ldflags tmpdir/3.o"] {
   fail $test4
} else {
    if ![ld_nm $nm tmpdir/3.x] {
       unresolved $test4
    } else {
	if [info exists nm_output(bar__1A)] {
	    send_log "bar__1A == $nm_output(bar__1A)\n"
	    verbose "bar__1A == $nm_output(bar__1A)"
	    fail $test4
	} else {
#note ld_nm trims leading `_' from _start
	    if ![info exists nm_output(start)] {
		send_log "_start missing\n"
		verbose "_start missing"
		fail $test4
	    } else {
		if ![info exists nm_output(foo__1A)] {
		    send_log "foo__1A missing\n"
		    verbose "foo_1A missing"
		    fail $test4
		} else {
		    if ![info exists nm_output(foo__1B)] {
			send_log "foo__1B missing\n"
			verbose "foo_1B missing"
			fail $test4
		    } else {
			pass $test4
		    }
a130 1
}
d132 3
a134 4
if { ![ld_compile "$CC $cflags $cxxflags" $srcdir/$subdir/4.cc tmpdir/4.o]} {
    unresolved $test5
    return
}
d136 19
a154 17
if ![ld_simple_link $ld tmpdir/4.x "$ldflags tmpdir/4.o"] {
    fail $test5
} else {
    if ![ld_nm $nm tmpdir/4.x] {
	unresolved $test5
    } else {
	if {[info exists nm_output(foo__1B)]} {
            send_log "foo__1B == $nm_output(foo__1B)\n"
            verbose "foo__1B == $nm_output(foo__1B)"
	    fail $test5
	} else {
	    if {[info exists nm_output(foo__1A)]} {
	        send_log "foo__1A == $nm_output(foo__1A)\n"
		verbose "foo__1A == $nm_output(foo__1A)"
		fail $test5
	    } else {
		pass $test5
a157 1
}
d159 2
a160 43
if { ![ld_compile "$CC $cflags $cxxflags" $srcdir/$subdir/5.cc tmpdir/5.o]} {
    unresolved $test6
    return
}

# Exposes a bug, currently.  FIXME: Fix it.
# FIXME: Break out the nesting to a function that takes two lists, one
# with expected present symbols, one with expected absent symbols, and
# iterates over nm output.  Use that function in all tests here.

setup_xfail "*-*-*"

if ![ld_simple_link $ld tmpdir/5.x "$ldflags tmpdir/5.o"] {
    fail $test6
} else {
    if ![ld_nm $nm tmpdir/5.x] {
	unresolved $test6
    } else {
	if {[info exists nm_output(foo__1B)]} {
            send_log "foo__1B == $nm_output(foo__1B)\n"
            verbose "foo__1B == $nm_output(foo__1B)"
	    fail $test6
	} else {
	    if {[info exists nm_output(foo__1A)]} {
	        send_log "foo__1A == $nm_output(foo__1A)\n"
		verbose "foo__1A == $nm_output(foo__1A)"
		fail $test6
	    } else {
		if {[info exists nm_output(dropme1__Fv)]} {
		    send_log "dropme1__Fv == $nm_output(dropme1__Fv)\n"
		    verbose "dropme1__Fv == $nm_output(dropme1__Fv)"
		    fail $test6
		} else {
		    if {[info exists nm_output(dropme2__Fv)]} {
			send_log "dropme2__Fv == $nm_output(dropme2__Fv)\n"
			verbose "dropme2__Fv == $nm_output(dropme2__Fv)"
			fail $test6
		    } else {
			pass $test6
		    }
		}
	    }
	}
@


1.7
log
@Shared lib support for elf32-hppa
@
text
@d35 1
d47 1
d196 47
@


1.6
log
@Even more hppa testsuite patches.
@
text
@a48 2
setup_xfail "hppa*-*-*"

a74 2

setup_xfail "hppa*-*-*"
@


1.5
log
@(test4): Test for presence of foo__1B, not absence
@
text
@d49 2
d77 2
@


1.4
log
@(test4): Delete incorrect foo__1B test.  Reformat file.
@
text
@d89 1
a89 1
            verbose "foo== $nm_output(foo)"
d115 1
a115 1
		verbose "foo== $nm_output(foo)"
d139 3
a141 3
	if {[ info exists nm_output(bar__1A)]} {
	    send_log "bar__1A== $nm_output(_bar__1A)\n"
	    verbose "bar__1A == $nm_output(_bar__1A)"
d144 20
a163 1
	    pass $test4
d185 1
a185 1
	        send_log "foo__1A== $nm_output(foo__1A)\n"
@


1.3
log
@Fixed test to disable these checks if the target is PE based.
@
text
@d24 1
a24 1
  return
d27 1
a27 1
  return
d36 1
a36 1
set cflags "-w -O2 -ffunction-sections -fdata-sections" 
d61 7
a67 2
		send_log "dropme1 == $nm_output(dropme1)\n"
		verbose "dropme1 == $nm_output(dropme1)"
d70 1
a70 7
		if {[info exists nm_output(dropme2)]} {
		    send_log "dropme2 == $nm_output(dropme2)\n"
		    verbose "dropme2 == $nm_output(dropme2)"
		    fail $test1
		} else {
		    pass $test1
		}
d74 1
d93 3
a95 3
	    } 
	 }
     }
d119 3
a121 3
		}
	 }
     }
d139 8
a146 14
       if {[info exists nm_output(foo__1B)]} {
          send_log "foo__1B == $nm_output(foo__1B)\n"
          verbose "foo__1B == $nm_output(foo__1B)"
          fail $test4
       } else {
           if {[ info exists nm_output(bar__1A)]} {
              send_log "bar__1A== $nm_output(_bar__1A)\n"
              verbose "bar__1A == $nm_output(_bar__1A)"
              fail $test4
           } else {
               pass $test4
             }
          }
      }
d160 1
a160 1
	if {[info exists nm_output(foo__1B)]} { 
d165 1
a165 1
          if {[info exists nm_output(foo__1A)]} {
d169 3
a171 3
          } else {
	      pass $test5
             }
@


1.3.2.1
log
@(test4): Delete incorrect foo__1B test.
@
text
@d139 14
a152 8
	if {[ info exists nm_output(bar__1A)]} {
	    send_log "bar__1A== $nm_output(_bar__1A)\n"
	    verbose "bar__1A == $nm_output(_bar__1A)"
	    fail $test4
	} else {
	    pass $test4
	}
    }
@


1.2
log
@Remove test6.
@
text
@d23 4
a26 1
if {[istarget "*-*-coff" "*-*-pe"]} {
@


1.1
log
@Initial revision
@
text
@a31 1
set test6 "selective6"
a42 1
    untested $test6
a174 29
	}
    }
}

setup_xfail "v850*-*-elf"

if { ![ld_compile "$CC $cflags $cxxflags" $srcdir/$subdir/5.cc tmpdir/5.o]} {
    unresolved $test6
    return
}

if ![ld_simple_link $ld tmpdir/5.x "$ldflags tmpdir/5.o"] {
    fail $test6
} else {
    if ![ld_nm $nm tmpdir/5.x] {
	unresolved $test6
    } else {
	if {[info exists nm_output(foo__1B)] } {
            send_log "foo__1B == $nm_output(foo__1B)\n"
            verbose "foo__1B == $nm_output(foo__1B)"
	    fail $test6
	} else {
            if { [info exists nm_output(foo__1A)]} {
		  send_log "foo__1A== $nm_output(foo__1A)\n"
		  verbose "foo__1A == $nm_output(foo__1A)"
		  fail $test6
            } else {
	       pass $test6
	    }
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

