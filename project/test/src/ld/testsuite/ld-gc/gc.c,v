head	1.3;
access;
symbols
	binutils-2_24-branch:1.3.0.18
	binutils-2_24-branchpoint:1.3
	binutils-2_21_1:1.3
	binutils-2_23_2:1.3
	binutils-2_23_1:1.3
	binutils-2_23:1.3
	binutils-2_23-branch:1.3.0.16
	binutils-2_23-branchpoint:1.3
	binutils-2_22_branch:1.3.0.14
	binutils-2_22:1.3
	binutils-2_22-branch:1.3.0.12
	binutils-2_22-branchpoint:1.3
	binutils-2_21:1.3
	binutils-2_21-branch:1.3.0.10
	binutils-2_21-branchpoint:1.3
	binutils-2_20_1:1.3
	binutils-2_20:1.3
	binutils-arc-20081103-branch:1.3.0.8
	binutils-arc-20081103-branchpoint:1.3
	binutils-2_20-branch:1.3.0.6
	binutils-2_20-branchpoint:1.3
	dje-cgen-play1-branch:1.3.0.4
	dje-cgen-play1-branchpoint:1.3
	arc-20081103-branch:1.3.0.2
	arc-20081103-branchpoint:1.3
	binutils-2_19_1:1.2
	binutils-2_19:1.2
	binutils-2_19-branch:1.2.0.2
	binutils-2_19-branchpoint:1.2
	binutils_latest_snapshot:1.3;
locks; strict;
comment	@ * @;


1.3
date	2008.10.29.08.29.02;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2008.01.23.16.05.45;	author schwab;	state Exp;
branches;
next	1.1;

1.1
date	2008.01.11.09.11.18;	author gingold;	state Exp;
branches;
next	;


desc
@@


1.3
log
@        * ld-gc/gc.c (dummy_func): New function - present so that
        underscore prefixed aliases can be created of the used_func and
        main functions.
@
text
@int unused_var = 7;
int used_var = 7;

int
unused_func (int v)
{
  return 3 * unused_var;
}

int
__attribute__((noinline))
used_func (int v)
{
  return 2 * used_var;
}

int
main (void)
{
  return used_func (5);
}

void
dummy_func (void)
{
  /* These are here in case the target prepends an underscore to
     the start of function names.  They are inside a dummy function
     so that they will appear at the end of gcc's assembler output,
     after the definitions of main() and used_func(), rather than
     at the beginning of the file.  */

  __asm__(".ifndef main\n\
.global main\n\
.set main, _main\n\
.endif");

  __asm__(".ifndef used_func\n\
.global used_func\n\
.set used_func, _used_func\n\
.endif");
}
@


1.2
log
@* ld-gc/gc.c: Make sure used_func is not inlined.
@
text
@d22 20
@


1.1
log
@ld:
2008-01-11  Tristan Gingold  <gingold@@adacore.com>
	    Eric Botcazou  <ebotcazou@@adacore.com>

	* ldlang.c (lang_end): Warns if the entry point is not found when
	--gc-sections.
	Emit an error if no root is specified when --gc-sections -r.
	* ld.texinfo (Options): Document that --gc-sections is compatible
	with -r and -q.
	* ldmain.c (main): Do not error out if -r and --gc-sections.
	* scripttempl/elf.sc: Emit ENTRY command only if relocating.

ld/testsuite:
2008-01-11  Tristan Gingold  <gingold@@adacore.com>

	* lib/ld-lib.exp (check_gc_sections_available): Now available on
	VxWorks.
	* ld-gc: New directory for testing --gc-sections.
	* ld-gc/gc.c: New file.
	* ld-gc/gc.exp: New file.
	* ld-gc/noent.s: New file.
	* ld-gc/noent.d: New file.
@
text
@d11 1
@

