head	1.11;
access;
symbols
	binutils-2_24-branch:1.11.0.2
	binutils-2_24-branchpoint:1.11
	binutils-2_21_1:1.10
	binutils-2_23_2:1.10
	binutils-2_23_1:1.10
	binutils-2_23:1.10
	binutils-2_23-branch:1.10.0.30
	binutils-2_23-branchpoint:1.10
	binutils-2_22_branch:1.10.0.28
	binutils-2_22:1.10
	binutils-2_22-branch:1.10.0.26
	binutils-2_22-branchpoint:1.10
	binutils-2_21:1.10
	binutils-2_21-branch:1.10.0.24
	binutils-2_21-branchpoint:1.10
	binutils-2_20_1:1.10
	binutils-2_20:1.10
	binutils-arc-20081103-branch:1.10.0.22
	binutils-arc-20081103-branchpoint:1.10
	binutils-2_20-branch:1.10.0.20
	binutils-2_20-branchpoint:1.10
	dje-cgen-play1-branch:1.10.0.18
	dje-cgen-play1-branchpoint:1.10
	arc-20081103-branch:1.10.0.16
	arc-20081103-branchpoint:1.10
	binutils-2_19_1:1.10
	binutils-2_19:1.10
	binutils-2_19-branch:1.10.0.14
	binutils-2_19-branchpoint:1.10
	binutils-2_18:1.10
	binutils-2_18-branch:1.10.0.12
	binutils-2_18-branchpoint:1.10
	binutils-csl-coldfire-4_1-32:1.10
	binutils-csl-sourcerygxx-4_1-32:1.10
	binutils-csl-innovasic-fido-3_4_4-33:1.10
	binutils-csl-sourcerygxx-3_4_4-32:1.10
	binutils-csl-coldfire-4_1-30:1.10
	binutils-csl-sourcerygxx-4_1-30:1.10
	binutils-csl-coldfire-4_1-28:1.10
	binutils-csl-sourcerygxx-4_1-29:1.10
	binutils-csl-sourcerygxx-4_1-28:1.10
	binutils-csl-arm-2006q3-27:1.10
	binutils-csl-sourcerygxx-4_1-27:1.10
	binutils-csl-arm-2006q3-26:1.10
	binutils-csl-sourcerygxx-4_1-26:1.10
	binutils-csl-sourcerygxx-4_1-25:1.10
	binutils-csl-sourcerygxx-4_1-24:1.10
	binutils-csl-sourcerygxx-4_1-23:1.10
	binutils-csl-sourcerygxx-4_1-21:1.10
	binutils-csl-arm-2006q3-21:1.10
	binutils-csl-sourcerygxx-4_1-22:1.10
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.10
	binutils-csl-sourcerygxx-4_1-20:1.10
	binutils-csl-arm-2006q3-19:1.10
	binutils-csl-sourcerygxx-4_1-19:1.10
	binutils-csl-sourcerygxx-4_1-18:1.10
	binutils-csl-renesas-4_1-9:1.10
	binutils-csl-sourcerygxx-3_4_4-25:1.10
	binutils-csl-renesas-4_1-8:1.10
	binutils-csl-renesas-4_1-7:1.10
	binutils-csl-renesas-4_1-6:1.10
	binutils-csl-sourcerygxx-4_1-17:1.10
	binutils-csl-sourcerygxx-4_1-14:1.10
	binutils-csl-sourcerygxx-4_1-15:1.10
	binutils-csl-sourcerygxx-4_1-13:1.10
	binutils-2_17:1.10
	binutils-csl-sourcerygxx-4_1-12:1.10
	binutils-csl-sourcerygxx-3_4_4-21:1.10
	binutils-csl-wrs-linux-3_4_4-24:1.10
	binutils-csl-wrs-linux-3_4_4-23:1.10
	binutils-csl-sourcerygxx-4_1-9:1.10
	binutils-csl-sourcerygxx-4_1-8:1.10
	binutils-csl-sourcerygxx-4_1-7:1.10
	binutils-csl-arm-2006q1-6:1.10
	binutils-csl-sourcerygxx-4_1-6:1.10
	binutils-csl-wrs-linux-3_4_4-22:1.10
	binutils-csl-coldfire-4_1-11:1.10
	binutils-csl-sourcerygxx-3_4_4-19:1.10
	binutils-csl-coldfire-4_1-10:1.10
	binutils-csl-sourcerygxx-4_1-5:1.10
	binutils-csl-sourcerygxx-4_1-4:1.10
	binutils-csl-wrs-linux-3_4_4-21:1.10
	binutils-csl-morpho-4_1-4:1.10
	binutils-csl-sourcerygxx-3_4_4-17:1.10
	binutils-csl-wrs-linux-3_4_4-20:1.10
	binutils-2_17-branch:1.10.0.10
	binutils-2_17-branchpoint:1.10
	binutils-csl-2_17-branch:1.10.0.8
	binutils-csl-2_17-branchpoint:1.10
	binutils-csl-gxxpro-3_4-branch:1.10.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.10
	binutils-2_16_1:1.10
	binutils-csl-arm-2005q1b:1.10
	binutils-2_16:1.10
	binutils-csl-arm-2005q1a:1.10
	binutils-csl-arm-2005q1-branch:1.10.0.4
	binutils-csl-arm-2005q1-branchpoint:1.10
	binutils-2_16-branch:1.10.0.2
	binutils-2_16-branchpoint:1.10
	csl-arm-2004-q3d:1.10
	csl-arm-2004-q3:1.10
	binutils-2_15:1.9
	binutils-2_15-branchpoint:1.9
	csl-arm-2004-q1a:1.9
	csl-arm-2004-q1:1.9
	binutils-2_15-branch:1.9.0.6
	cagney_bfdfile-20040213-branch:1.9.0.4
	cagney_bfdfile-20040213-branchpoint:1.9
	cagney_bigcore-20040122-branch:1.9.0.2
	cagney_bigcore-20040122-branchpoint:1.9
	csl-arm-2003-q4:1.9
	binutils-2_14:1.6.8.1
	binutils-2_14-branch:1.6.0.8
	binutils-2_14-branchpoint:1.6
	binutils-2_13_2_1:1.6
	binutils-2_13_2:1.6
	binutils-2_13_1:1.6
	binutils-2_13:1.6
	binutils-2_13-branchpoint:1.6
	binutils-2_13-branch:1.6.0.6
	binutils-2_12_1:1.6
	binutils-2_12:1.6
	binutils-2_12-branch:1.6.0.4
	binutils-2_12-branchpoint:1.6
	cygnus_cvs_20020108_pre:1.6
	binutils-2_11_2:1.6
	binutils-2_11_1:1.6
	binutils-2_11:1.6
	x86_64versiong3:1.6
	binutils-2_11-branch:1.6.0.2
	binutils-2_10_1:1.5.2.2
	binutils-2_10-branch:1.5.0.2
	binutils_latest_snapshot:1.11;
locks; strict;
comment	@ * @;


1.11
date	2012.10.25.03.59.37;	author hjl;	state Exp;
branches;
next	1.10;

1.10
date	2004.06.18.15.41.47;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.07.17.30.02;	author danglin;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.05.05.46.53;	author hjl;	state Exp;
branches;
next	1.7;

1.7
date	2003.04.28.03.31.36;	author hjl;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.06.10.07.06;	author amodra;	state Exp;
branches
	1.6.8.1;
next	1.5;

1.5
date	2000.07.16.21.29.32;	author hjl;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2000.07.15.23.57.20;	author hjl;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.05.20.43.18;	author hjl;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.21.21.08.17;	author hjl;	state Exp;
branches;
next	1.1;

1.1
date	2000.05.13.16.54.32;	author hjl;	state Exp;
branches;
next	;

1.6.8.1
date	2003.05.03.16.02.16;	author drow;	state Exp;
branches;
next	;

1.5.2.1
date	2000.10.23.08.00.45;	author pb;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2000.11.06.10.08.03;	author amodra;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Remove address check if HIDDEN_UNDEF_TEST is defined

	* ld-elfvsb/main.c (main_visibility_checkcom): Remove address
	check for visibility_def if HIDDEN_UNDEF_TEST is defined.
	(main_visibility_checkweak): Remove address check for
	visibility_func if HIDDEN_UNDEF_TEST is defined.
@
text
@#ifdef PROTECTED_CHECK
#include <features.h>
#include <stdio.h>

int
main (void)
{
#if defined (__GLIBC__) && (__GLIBC__ > 2 \
			    || (__GLIBC__ == 2 \
				&&  __GLIBC_MINOR__ >= 2))
  puts ("yes");
#else
  puts ("no");
#endif
  return 0;
}
#else
/* This is the main program for the shared library test.  */

#include <stdio.h>

int mainvar = 1;
int overriddenvar = 2;
extern int shlibvar1;

extern int shlib_mainvar ();
extern int shlib_overriddenvar ();
extern int shlib_shlibvar1 ();
extern int shlib_shlibvar2 ();
extern int shlib_shlibcall ();
extern int shlib_maincall ();
extern int shlib_checkfunptr1 ();
extern int shlib_checkfunptr2 ();
extern int (*shlib_getfunptr1 ()) ();
extern int (*shlib_getfunptr2 ()) ();
extern int shlib_check ();
extern int shlib_shlibcall2 ();
extern int visibility_check ();
extern int visibility_checkfunptr ();
extern void *visibility_funptr ();
extern int visibility_checkvar ();
extern int visibility_checkvarptr ();
extern int visibility_varval ();
extern void *visibility_varptr ();
extern int shlib_visibility_checkcom ();
extern int shlib_visibility_checkweak ();

int shlib_visibility_com = 1;

int shlib_visibility_var_weak = 1;

int
shlib_visibility_func_weak ()
{
  return 1;
}

#ifdef HIDDEN_WEAK_TEST
#define WEAK_TEST
#endif

#ifdef PROTECTED_WEAK_TEST
#define WEAK_TEST
#endif

#ifdef PROTECTED_UNDEF_TEST
#define PROTECTED_TEST
#endif

#ifndef WEAK_TEST
extern int visibility ();
extern int visibility_var;
#endif

#if !defined (HIDDEN_TEST) && defined (PROTECTED_TEST)
int
visibility (void)
{
  return 1;
}

static int
main_visibility_check (void)
{
  return ((int (*) (void)) visibility_funptr ()) != visibility;
}

int visibility_var = 1;

static int
main_visibility_checkvar (void)
{
  return visibility_varval () != visibility_var
	 && visibility_varptr () != &visibility_var;
}

#ifndef PROTECTED_UNDEF_TEST
int shared_data = 1;
asm (".protected shared_data");

int
shared_func (void)
{
  return 1;
}

asm (".protected shared_func");

extern int * shared_data_p ();
typedef int (*func) ();
extern func shared_func_p ();
#endif
#else
static int
main_visibility_check (void)
{
#ifdef WEAK_TEST
  return visibility_funptr () == NULL;
#else
  return ((int (*) (void)) visibility_funptr ()) == visibility;
#endif
}

static int
main_visibility_checkvar (void)
{
#ifdef WEAK_TEST
  return visibility_varval () == 0
	 && visibility_varptr () == NULL;
#else
  return visibility_varval () == visibility_var
	 && visibility_varptr () == &visibility_var;
#endif
}
#endif

/* This function is called by the shared library.  */

int
main_called (void)
{
  return 6;
}

/* This function overrides a function in the shared library.  */

int
shlib_overriddencall2 (void)
{
  return 8;
}

#ifdef HIDDEN_NORMAL_TEST
int visibility_com;
asm (".hidden visibility_com");

int
main_visibility_checkcom (void)
{
  return visibility_com == 0;
}

int
main_visibility_checkweak (void)
{
  return 1;
}
#elif defined (HIDDEN_WEAK_TEST)
int
main_visibility_checkcom (void)
{
  return 1;
}

#pragma weak visibility_undef_var_weak
extern int visibility_undef_var_weak;
asm (".hidden visibility_undef_var_weak");

#pragma weak visibility_undef_func_weak
extern int visibility_undef_func_weak ();
asm (".hidden visibility_undef_func_weak");

#pragma weak visibility_var_weak
extern int visibility_var_weak;
asm (".hidden visibility_var_weak");

#pragma weak visibility_func_weak
extern int visibility_func_weak ();
asm (".hidden visibility_func_weak");

int
main_visibility_checkweak ()
{
  return &visibility_undef_var_weak == NULL
	 && &visibility_undef_func_weak == NULL
	 && &visibility_func_weak == NULL
	 && &visibility_var_weak == NULL;
}
#elif defined (HIDDEN_UNDEF_TEST)
extern int visibility_def;
asm (".hidden visibility_def");
extern int visibility_func ();
asm (".hidden visibility_func");

int
main_visibility_checkcom (void)
{
  return visibility_def == 2;
}

int
main_visibility_checkweak (void)
{
  return visibility_func () == 2;
}
#else
int
main_visibility_checkcom (void)
{
  return 1;
}

int
main_visibility_checkweak (void)
{
  return 1;
}
#endif

int
main (void)
{
  int (*p) ();
  int ret = 0;

  printf ("mainvar == %d\n", mainvar);
  printf ("overriddenvar == %d\n", overriddenvar);
  printf ("shlibvar1 == %d\n", shlibvar1);
#ifndef XCOFF_TEST
  printf ("shlib_mainvar () == %d\n", shlib_mainvar ());
  printf ("shlib_overriddenvar () == %d\n", shlib_overriddenvar ());
#endif
  printf ("shlib_shlibvar1 () == %d\n", shlib_shlibvar1 ());
  printf ("shlib_shlibvar2 () == %d\n", shlib_shlibvar2 ());
  printf ("shlib_shlibcall () == %d\n", shlib_shlibcall ());
#ifndef XCOFF_TEST
  printf ("shlib_shlibcall2 () == %d\n", shlib_shlibcall2 ());
  printf ("shlib_maincall () == %d\n", shlib_maincall ());
#endif
  printf ("main_called () == %d\n", main_called ());
  printf ("shlib_checkfunptr1 (shlib_shlibvar1) == %d\n",
	  shlib_checkfunptr1 (shlib_shlibvar1));
#ifndef XCOFF_TEST
  printf ("shlib_checkfunptr2 (main_called) == %d\n",
	  shlib_checkfunptr2 (main_called));
#endif
  p = shlib_getfunptr1 ();
  printf ("shlib_getfunptr1 () ");
  if (p == shlib_shlibvar1)
    printf ("==");
  else
    printf ("!=");
  printf (" shlib_shlibvar1\n");
#ifndef XCOFF_TEST
  p = shlib_getfunptr2 ();
  printf ("shlib_getfunptr2 () ");
  if (p == main_called)
    printf ("==");
  else
    printf ("!=");
  printf (" main_called\n");
#endif
  printf ("shlib_check () == %d\n", shlib_check ());
  printf ("visibility_check () == %d\n", visibility_check ());
  printf ("visibility_checkfunptr () == %d\n",
	  visibility_checkfunptr ());
  printf ("main_visibility_check () == %d\n", main_visibility_check ());
  printf ("visibility_checkvar () == %d\n", visibility_checkvar ());
  printf ("visibility_checkvarptr () == %d\n",
	  visibility_checkvarptr ());
  printf ("main_visibility_checkvar () == %d\n",
	  main_visibility_checkvar ());
  printf ("main_visibility_checkcom () == %d\n",
	  main_visibility_checkcom ());
  printf ("shlib_visibility_checkcom () == %d\n",
	  shlib_visibility_checkcom ());
  printf ("main_visibility_checkweak () == %d\n",
	  main_visibility_checkweak ());
  printf ("shlib_visibility_checkweak () == %d\n",
	  shlib_visibility_checkweak ());

#if !defined (PROTECTED_UNDEF_TEST) && defined (PROTECTED_TEST)
  if (&shared_data != shared_data_p ())
    ret = 1;
  p = shared_func_p ();
  if (shared_func != p)
    ret = 1;
  if (shared_data != *shared_data_p ())
    ret = 1;
  if (shared_func () != (*p) () )
    ret = 1;
#endif

  return ret;
}
#endif
@


1.10
log
@* ld-elfvsb/main.c: Ensure visibility_def and visibility_func are
  actually referenced (gcc 3.4 eliminates comparisons of addresses
  of global symbols with NULL).
* ld-selective/selective.exp: Suppress -fvtable-gc tests for gcc
  3.4.0 and above, as this option and its functionality is no longer
  supported, making these tests fail).
@
text
@d208 1
a208 1
  return & visibility_def != NULL && visibility_def == 2;
d214 1
a214 1
  return & visibility_func != NULL && visibility_func () == 2;
@


1.9
log
@	* configure.host (HOSTING_LIBS): Define for hppa*-*-linux*.
	* ld-elfvsb/elfvsb.exp: xfail non-pic shared library tests for
	non 64-bit hppa*-*-linux* targets.
	* ld-elfvsb/main.c (main_visibility_check): Cast value returned by
	visibility_funptr () to a function pointer.
	* ld-shared/shared.exp: xfail shared (non PIC), shared (non PIC, load
	offset), and shared (PIC main, non PIC so) tests for non 64-bit
	hppa*-*-linux* targets.
@
text
@d77 1
a77 1
visibility ()
d83 1
a83 1
main_visibility_check ()
d91 1
a91 1
main_visibility_checkvar ()
d102 1
a102 1
shared_func ()
d115 1
a115 1
main_visibility_check ()
d125 1
a125 1
main_visibility_checkvar ()
d140 1
a140 1
main_called ()
d148 1
a148 1
shlib_overriddencall2 ()
d158 1
a158 1
main_visibility_checkcom ()
d164 1
a164 1
main_visibility_checkweak ()
d170 1
a170 1
main_visibility_checkcom ()
d206 1
a206 1
main_visibility_checkcom ()
d208 1
a208 1
  return &visibility_def != NULL;
d212 1
a212 1
main_visibility_checkweak ()
d214 1
a214 1
  return &visibility_func != NULL;
d218 1
a218 1
main_visibility_checkcom ()
d224 1
a224 1
main_visibility_checkweak ()
d231 1
a231 1
main ()
@


1.8
log
@bfd/

2003-05-04  H.J. Lu <hjl@@gnu.org>

	* elf32-i386.c (allocate_dynrelocs): Don't allocate dynamic
	relocation entries for weak undefined symbols with non-default
	visibility.
	(elf_i386_relocate_section): Initialize the GOT entries and
	skip R_386_32/R_386_PC32 for weak undefined symbols with
	non-default visibility.

	* elfxx-ia64.c (allocate_fptr): Don't allocate function
	descriptors for weak undefined symbols with non-default
	visibility.
	(allocate_dynrel_entries): Don't allocate relocation entries
	for symbols resolved to 0.
	(set_got_entry): Don't install dynamic relocation for weak
	undefined symbols with non-default visibility.
	(set_pltoff_entry): Likewise.

	* elflink.h (elf_fix_symbol_flags): Hide weak undefined symbols
	with non-default visibility.
	(elf_link_output_extsym): Don't make weak undefined symbols
	with non-default visibility dynamic.

ld/testsuite/

2003-05-04  H.J. Lu <hjl@@gnu.org>

	* ld-elfvsb/main.c: Updated.
	* ld-elfvsb/sh1.c: Likewise.
@
text
@d85 1
a85 1
  return visibility_funptr () != visibility;
d120 1
a120 1
  return visibility_funptr () == visibility;
@


1.7
log
@bfd/

2003-04-27  H.J. Lu <hjl@@gnu.org>

	* elf-bfd.h (ELF_LINK_DYNAMIC_DEF): New.
	(ELF_LINK_DYNAMIC_WEAK): New.

	* elflink.h (elf_merge_symbol): Add one argument to indicate if
	a symbol should be skipped. Ignore definitions in dynamic
	objects for symbols with non-default visibility.
	(elf_add_default_symbol): Adjusted.
	(elf_link_add_object_symbols): Check if a symbol should be
	skipped. Don't merge the visibility field with the one from
	a dynamic object.
	(elf_link_check_versioned_symbol): Use undef_bfd.
	(elf_link_output_extsym): Warn if a forced local symbol is
	referenced from dynamic objects. Make non-weak undefined symbol
	with non-default visibility a fatal error.

ld/testsuite/

2003-04-27  H.J. Lu <hjl@@gnu.org>

	* ld-elfvsb/elfvsb.dat: Updated.
	* ld-elfvsb/elfvsb.exp: Likewise.
	* ld-elfvsb/main.c: Likewise.
	* ld-elfvsb/sh1.c: Likewise.
	* ld-elfvsb/sh2.c: Likewise.
@
text
@d168 31
@


1.6
log
@Fix compilation warnings as otherwise we fail the test.
@
text
@d45 12
d96 17
d153 46
d203 1
d252 22
a273 1
  return 0;
@


1.6.8.1
log
@	Merge from mainline:
	2003-04-28  H.J. Lu <hjl@@gnu.org>
	* ld-elfvers/vers.exp (picflag): Set PIC flag for compiler.
	(build_vers_lib): Support PIC.
	(build_vers_lib_no_pic): New. Change all calls to build_vers_lib
	to build_vers_lib_no_pic.
	(build_vers_lib_pic): New.
	Add tests vers26a, vers26b1, vers26b2 and vers26b3 for versioned
	definition vs. normal definition in different files.

	* ld-elfvers/vers26a.c: New file.
	* ld-elfvers/vers26a.dsym: Likewise.
	* ld-elfvers/vers26a.map: Likewise.
	* ld-elfvers/vers26a.ver: Likewise.
	* ld-elfvers/vers26b.c: Likewise.

	* ld-elfvers/vers26b.dsym: New empty file.
	* ld-elfvers/vers26b.ver: Likewise.

	2003-04-27  H.J. Lu <hjl@@gnu.org>
	* ld-elfvsb/elfvsb.dat: Updated.
	* ld-elfvsb/elfvsb.exp: Likewise.
	* ld-elfvsb/main.c: Likewise.
	* ld-elfvsb/sh1.c: Likewise.
	* ld-elfvsb/sh2.c: Likewise.
@
text
@a44 12
extern int shlib_visibility_checkcom ();
extern int shlib_visibility_checkweak ();

int shlib_visibility_com = 1;

int shlib_visibility_var_weak = 1;

int
shlib_visibility_func_weak ()
{
  return 1;
}
a83 17

#ifndef PROTECTED_UNDEF_TEST
int shared_data = 1;
asm (".protected shared_data");

int
shared_func ()
{
  return 1;
}

asm (".protected shared_func");

extern int * shared_data_p ();
typedef int (*func) ();
extern func shared_func_p ();
#endif
a123 46
#ifdef HIDDEN_NORMAL_TEST
int visibility_com;
asm (".hidden visibility_com");

int
main_visibility_checkcom ()
{
  return visibility_com == 0;
}

int
main_visibility_checkweak ()
{
  return 1;
}
#elif defined (HIDDEN_UNDEF_TEST)
extern int visibility_def;
asm (".hidden visibility_def");
extern int visibility_func ();
asm (".hidden visibility_func");

int
main_visibility_checkcom ()
{
  return &visibility_def != NULL;
}

int
main_visibility_checkweak ()
{
  return &visibility_func != NULL;
}
#else
int
main_visibility_checkcom ()
{
  return 1;
}

int
main_visibility_checkweak ()
{
  return 1;
}
#endif

a127 1
  int ret = 0;
d176 1
a176 22
  printf ("main_visibility_checkcom () == %d\n",
	  main_visibility_checkcom ());
  printf ("shlib_visibility_checkcom () == %d\n",
	  shlib_visibility_checkcom ());
  printf ("main_visibility_checkweak () == %d\n",
	  main_visibility_checkweak ());
  printf ("shlib_visibility_checkweak () == %d\n",
	  shlib_visibility_checkweak ());

#if !defined (PROTECTED_UNDEF_TEST) && defined (PROTECTED_TEST)
  if (&shared_data != shared_data_p ())
    ret = 1;
  p = shared_func_p ();
  if (shared_func != p)
    ret = 1;
  if (shared_data != *shared_data_p ())
    ret = 1;
  if (shared_func () != (*p) () )
    ret = 1;
#endif

  return ret;
@


1.5
log
@2000-07-16  H.J. Lu  (hjl@@gnu.org)

	* ld-elfvsb/elfvsb.exp (support_protected): New variable. Check
	and set to "yes" if the protected visibility is expected to
	pass.
	(visibility_run): Set expected to fail for the "protected"
	and "protected_undef_def" tests only if $support_protected is
	"no".

	* ld-elfvsb/main.c (PROTECTED_CHECK): Check for the protected
	visibility support if defined.
@
text
@d3 1
d6 1
a6 3
main (argc, argv)
  int argc;
  char *argv[];
@


1.5.2.1
log
@Merge from mainline.
@
text
@@


1.5.2.2
log
@Fix compilation warnings as otherwise we fail the test.
@
text
@a2 1
#include <stdio.h>
d5 3
a7 1
main (void)
@


1.4
log
@2000-07-15  H.J. Lu  (hjl@@gnu.org)

	* ld-elfvsb/elfvsb.exp (visibility_run): Set expected failure
	for "protected_undef_def".

	* ld-elfvsb/main.c: Don't define HIDDEN_UNDEF_TEST when
	PROTECTED_WEAK_TEST is defined.
	Don't define PROTECTED_UNDEF_TEST when PROTECTED_WEAK_TEST is
	defined.
	Define PROTECTED_TEST when PROTECTED_UNDEF_TEST is defined.

	* ld-elfvsb/sh1.c (visibility): Mark protected only if
	PROTECTED_TEST, PROTECTED_UNDEF_TEST or PROTECTED_WEAK_TEST
	is defined.
	(visibility_var): Likewise.
@
text
@d1 18
d179 1
@


1.3
log
@2000-06-05  H.J. Lu  (hjl@@gnu.org)

	* lib/ld-lib.exp (default_ld_link): Redirect the linker output
	to link_output and make it global.

	* ld-elfvsb/elfvsb.exp (visibility_test): Add "hidden_undef",
	"hidden_undef_def", "hidden_weak", "protected_undef",
	"protected_undef_def" and "protected_weak".
	(visibility_run): Likewise.
	* ld-elfvsb/main.c: Likewise.
	* ld-elfvsb/sh1.c: Likewise.
	* ld-elfvsb/sh2.c: Likewise.

	* ld-elfvsb/elfvsb.dat: Updated.
@
text
@a29 1
#define HIDDEN_UNDEF_TEST
a33 1
#define PROTECTED_UNDEF_TEST
d35 4
@


1.2
log
@2000-05-21  H.J. Lu  (hjl@@gnu.org)

	* ld-elfvsb/main.c (main_visibility_check): Fix the protected
	visibility test.
@
text
@a20 1
extern int visibility ();
d24 19
d56 9
d69 3
d73 13
d152 5
@


1.1
log
@2000-05-13  H.J. Lu  (hjl@@gnu.org)

	* lib/ld-lib.exp (default_ld_link): Redirect the linker output
	to link_output and make it global.

	* ld-elfvsb/elf-offset.ld: New. ELF visibility fearture
	tests.
	* ld-elfvsb/elfvsb.dat: Likewise.
	* ld-elfvsb/elfvsb.exp: Likewise.
	* ld-elfvsb/main.c: Likewise.
	* ld-elfvsb/sh1.c: Likewise.
	* ld-elfvsb/sh2.c: Likewise.
@
text
@a31 1
#endif
d36 6
d44 1
@

