head	1.8;
access;
symbols
	binutils-2_24-branch:1.8.0.22
	binutils-2_24-branchpoint:1.8
	binutils-2_21_1:1.8
	binutils-2_23_2:1.8
	binutils-2_23_1:1.8
	binutils-2_23:1.8
	binutils-2_23-branch:1.8.0.20
	binutils-2_23-branchpoint:1.8
	binutils-2_22_branch:1.8.0.18
	binutils-2_22:1.8
	binutils-2_22-branch:1.8.0.16
	binutils-2_22-branchpoint:1.8
	binutils-2_21:1.8
	binutils-2_21-branch:1.8.0.14
	binutils-2_21-branchpoint:1.8
	binutils-2_20_1:1.8
	binutils-2_20:1.8
	binutils-arc-20081103-branch:1.8.0.12
	binutils-arc-20081103-branchpoint:1.8
	binutils-2_20-branch:1.8.0.10
	binutils-2_20-branchpoint:1.8
	dje-cgen-play1-branch:1.8.0.8
	dje-cgen-play1-branchpoint:1.8
	arc-20081103-branch:1.8.0.6
	arc-20081103-branchpoint:1.8
	binutils-2_19_1:1.8
	binutils-2_19:1.8
	binutils-2_19-branch:1.8.0.4
	binutils-2_19-branchpoint:1.8
	binutils-2_18:1.8
	binutils-2_18-branch:1.8.0.2
	binutils-2_18-branchpoint:1.8
	binutils-csl-coldfire-4_1-32:1.7
	binutils-csl-sourcerygxx-4_1-32:1.7
	binutils-csl-innovasic-fido-3_4_4-33:1.7
	binutils-csl-sourcerygxx-3_4_4-32:1.7
	binutils-csl-coldfire-4_1-30:1.7
	binutils-csl-sourcerygxx-4_1-30:1.7
	binutils-csl-coldfire-4_1-28:1.7
	binutils-csl-sourcerygxx-4_1-29:1.7
	binutils-csl-sourcerygxx-4_1-28:1.7
	binutils-csl-arm-2006q3-27:1.7
	binutils-csl-sourcerygxx-4_1-27:1.7
	binutils-csl-arm-2006q3-26:1.7
	binutils-csl-sourcerygxx-4_1-26:1.7
	binutils-csl-sourcerygxx-4_1-25:1.7
	binutils-csl-sourcerygxx-4_1-24:1.7
	binutils-csl-sourcerygxx-4_1-23:1.7
	binutils-csl-sourcerygxx-4_1-21:1.7
	binutils-csl-arm-2006q3-21:1.7
	binutils-csl-sourcerygxx-4_1-22:1.7
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.7
	binutils-csl-sourcerygxx-4_1-20:1.7
	binutils-csl-arm-2006q3-19:1.7
	binutils-csl-sourcerygxx-4_1-19:1.7
	binutils-csl-sourcerygxx-4_1-18:1.7
	binutils-csl-renesas-4_1-9:1.7
	binutils-csl-sourcerygxx-3_4_4-25:1.7
	binutils-csl-renesas-4_1-8:1.7
	binutils-csl-renesas-4_1-7:1.7
	binutils-csl-renesas-4_1-6:1.7
	binutils-csl-sourcerygxx-4_1-17:1.7
	binutils-csl-sourcerygxx-4_1-14:1.7
	binutils-csl-sourcerygxx-4_1-15:1.7
	binutils-csl-sourcerygxx-4_1-13:1.7
	binutils-2_17:1.7
	binutils-csl-sourcerygxx-4_1-12:1.7
	binutils-csl-sourcerygxx-3_4_4-21:1.7
	binutils-csl-wrs-linux-3_4_4-24:1.7
	binutils-csl-wrs-linux-3_4_4-23:1.7
	binutils-csl-sourcerygxx-4_1-9:1.7
	binutils-csl-sourcerygxx-4_1-8:1.7
	binutils-csl-sourcerygxx-4_1-7:1.7
	binutils-csl-arm-2006q1-6:1.7
	binutils-csl-sourcerygxx-4_1-6:1.7
	binutils-csl-wrs-linux-3_4_4-22:1.7
	binutils-csl-coldfire-4_1-11:1.7
	binutils-csl-sourcerygxx-3_4_4-19:1.7
	binutils-csl-coldfire-4_1-10:1.7
	binutils-csl-sourcerygxx-4_1-5:1.7
	binutils-csl-sourcerygxx-4_1-4:1.7
	binutils-csl-wrs-linux-3_4_4-21:1.7
	binutils-csl-morpho-4_1-4:1.7
	binutils-csl-sourcerygxx-3_4_4-17:1.7
	binutils-csl-wrs-linux-3_4_4-20:1.7
	binutils-2_17-branch:1.7.0.16
	binutils-2_17-branchpoint:1.7
	binutils-csl-2_17-branch:1.7.0.14
	binutils-csl-2_17-branchpoint:1.7
	binutils-csl-gxxpro-3_4-branch:1.7.0.12
	binutils-csl-gxxpro-3_4-branchpoint:1.7
	binutils-2_16_1:1.7
	binutils-csl-arm-2005q1b:1.7
	binutils-2_16:1.7
	binutils-csl-arm-2005q1a:1.7
	binutils-csl-arm-2005q1-branch:1.7.0.10
	binutils-csl-arm-2005q1-branchpoint:1.7
	binutils-2_16-branch:1.7.0.8
	binutils-2_16-branchpoint:1.7
	csl-arm-2004-q3d:1.7
	csl-arm-2004-q3:1.7
	binutils-2_15:1.7
	binutils-2_15-branchpoint:1.7
	csl-arm-2004-q1a:1.7
	csl-arm-2004-q1:1.7
	binutils-2_15-branch:1.7.0.6
	cagney_bfdfile-20040213-branch:1.7.0.4
	cagney_bfdfile-20040213-branchpoint:1.7
	cagney_bigcore-20040122-branch:1.7.0.2
	cagney_bigcore-20040122-branchpoint:1.7
	csl-arm-2003-q4:1.7
	binutils-2_14:1.5.4.1
	binutils-2_14-branch:1.5.0.4
	binutils-2_14-branchpoint:1.5
	binutils-2_13_2_1:1.5
	binutils-2_13_2:1.5
	binutils-2_13_1:1.5
	binutils-2_13:1.5
	binutils-2_13-branchpoint:1.5
	binutils-2_13-branch:1.5.0.2
	binutils-2_12_1:1.3.6.2
	binutils-2_12:1.3.6.2
	binutils-2_12-branch:1.3.0.6
	binutils-2_12-branchpoint:1.3
	cygnus_cvs_20020108_pre:1.3
	binutils-2_11_2:1.3
	binutils-2_11_1:1.3
	binutils-2_11:1.3
	x86_64versiong3:1.3
	binutils-2_11-branch:1.3.0.4
	binutils-2_10_1:1.3.2.1
	binutils-2_10-branch:1.3.0.2
	binutils_latest_snapshot:1.8;
locks; strict;
comment	@ * @;


1.8
date	2006.12.05.01.29.58;	author amodra;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.05.05.46.53;	author hjl;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.28.03.31.36;	author hjl;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.18.22.42.55;	author drow;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2002.02.18.04.49.17;	author drow;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.15.23.57.20;	author hjl;	state Exp;
branches
	1.3.2.1
	1.3.6.1;
next	1.2;

1.2
date	2000.06.05.20.43.18;	author hjl;	state Exp;
branches;
next	1.1;

1.1
date	2000.05.13.16.54.32;	author hjl;	state Exp;
branches;
next	;

1.5.4.1
date	2003.05.03.16.02.16;	author drow;	state Exp;
branches;
next	;

1.3.2.1
date	2000.10.23.08.00.45;	author pb;	state Exp;
branches;
next	;

1.3.6.1
date	2002.02.18.04.48.38;	author drow;	state Exp;
branches;
next	1.3.6.2;

1.3.6.2
date	2002.02.18.23.25.54;	author drow;	state Exp;
branches;
next	;


desc
@@


1.8
log
@	* ld-elfvsb/sh1.c (overriddenvar, shlib_overriddencall2,
	shared_data): If !SHARED, move to...
	* ld-elfvsb/sh2.c: ... here.
	* ld-elfvsb/elfvsb.exp: Add -DSHARED to compiler options when
	building with $picflag.
@
text
@#ifndef NULL
#define NULL ((void *) 0)
#endif

/* This is part of the shared library ld test.  This file becomes part
   of a shared library.  */

/* This variable is supplied by the main program.  */
#ifndef XCOFF_TEST
extern int mainvar;
#endif

/* This variable is defined in the shared library, and overridden by
   the main program.  */
#ifndef XCOFF_TEST
#ifdef SHARED
/* SHARED is defined if we are compiling with -fpic/-fPIC.  */
int overriddenvar = -1;
#else
/* Without -fpic, newer versions of gcc assume that we are not
   compiling for a shared library, and thus that overriddenvar is
   local.  */
extern int overriddenvar;
#endif
#endif

/* This variable is defined in the shared library.  */
int shlibvar1 = 3;

/* This variable is defined by another object in the shared library.  */
extern int shlibvar2;

/* These functions return the values of the above variables as seen in
   the shared library.  */

#ifndef XCOFF_TEST
int
shlib_mainvar ()
{
  return mainvar;
}
#endif

#ifndef XCOFF_TEST
int
shlib_overriddenvar ()
{
  return overriddenvar;
}
#endif

int
shlib_shlibvar1 ()
{
  return shlibvar1;
}

int
shlib_shlibvar2 ()
{
  return shlibvar2;
}

/* This function calls a function defined by another object in the
   shared library.  */

extern int shlib_shlibcalled ();

int
shlib_shlibcall ()
{
  return shlib_shlibcalled ();
}

#ifndef XCOFF_TEST
/* This function calls a function defined in this object in the shared
   library.  The main program will override the called function.  */

extern int shlib_overriddencall2 ();

int
shlib_shlibcall2 ()
{
  return shlib_overriddencall2 ();
}

#ifdef SHARED
int
shlib_overriddencall2 ()
{
  return 7;
}
#endif
#endif

/* This function calls a function defined by the main program.  */

#ifndef XCOFF_TEST
extern int main_called ();

int
shlib_maincall ()
{
  return main_called ();
}
#endif

/* This function is passed a function pointer to shlib_mainvar.  It
   confirms that the pointer compares equally.  */

int 
shlib_checkfunptr1 (p)
     int (*p) ();
{
  return p == shlib_shlibvar1;
}

/* This function is passed a function pointer to main_called.  It
   confirms that the pointer compares equally.  */

#ifndef XCOFF_TEST
int
shlib_checkfunptr2 (p)
     int (*p) ();
{
  return p == main_called;
}
#endif

/* This function returns a pointer to shlib_mainvar.  */

int
(*shlib_getfunptr1 ()) ()
{
  return shlib_shlibvar1;
}

/* This function returns a pointer to main_called.  */

#ifndef XCOFF_TEST
int
(*shlib_getfunptr2 ()) ()
{
  return main_called;
}
#endif

/* This function makes sure that constant data and local functions
   work.  */

#ifndef __STDC__
#define const
#endif

static int i = 6;
static const char *str = "Hello, world\n";

int
shlib_check ()
{
  const char *s1, *s2;

  if (i != 6)
    return 0;

  /* To isolate the test, don't rely on any external functions, such
     as strcmp.  */
  s1 = "Hello, world\n";
  s2 = str;
  while (*s1 != '\0')
    if (*s1++ != *s2++)
      return 0;
  if (*s2 != '\0')
    return 0;

  if (shlib_shlibvar1 () != 3)
    return 0;

  return 1;
}

#ifdef HIDDEN_WEAK_TEST
#define HIDDEN_UNDEF_TEST
#define WEAK_TEST
#endif

#ifdef PROTECTED_WEAK_TEST
#define PROTECTED_UNDEF_TEST
#define WEAK_TEST
#endif

#if defined (HIDDEN_UNDEF_TEST) || defined (PROTECTED_UNDEF_TEST)
#ifdef WEAK_TEST
#pragma weak visibility
#endif
extern int visibility ();
#else
int
visibility ()
{
  return 2;
}
#endif

#ifdef HIDDEN_NORMAL_TEST
asm (".hidden visibility_normal");

int
visibility_normal ()
{
  return 2;
}
#endif

int
visibility_checkfunptr ()
{
#ifdef WEAK_TEST
  return 1;
#else
#ifdef HIDDEN_NORMAL_TEST
  int (*v) () = visibility_normal;
#else
  int (*v) () = visibility;
#endif
  return (*v) () == 2;
#endif
}

int
visibility_check ()
{
#ifdef WEAK_TEST
  if (&visibility)
    return visibility () == 1;
  else
    return 1;
#else
#ifdef HIDDEN_NORMAL_TEST
  return visibility_normal () == 2;
#else
  return visibility () == 2;
#endif
#endif
}

void *
visibility_funptr ()
{
#ifdef WEAK_TEST
  if (&visibility == NULL)
    return NULL;
  else
#endif
    return visibility;
}

#if defined (HIDDEN_UNDEF_TEST) || defined (PROTECTED_UNDEF_TEST)
#ifdef WEAK_TEST
#pragma weak visibility_var
#endif
extern int visibility_var;
#else
int visibility_var = 2;
#endif

#ifdef HIDDEN_NORMAL_TEST
asm (".hidden visibility_var_normal");

int visibility_var_normal = 2;
#endif

int
visibility_checkvarptr ()
{
#ifdef WEAK_TEST
  if (&visibility_var)
    return visibility_var == 1;
  else
    return 1;
#else
#ifdef HIDDEN_NORMAL_TEST
  int *v = &visibility_var_normal;
#else
  int *v = &visibility_var;
#endif
  return *v == 2;
#endif
}

int
visibility_checkvar ()
{
#ifdef WEAK_TEST
  return 1;
#else
#ifdef HIDDEN_NORMAL_TEST
  return visibility_var_normal == 2;
#else
  return visibility_var == 2;
#endif
#endif
}

void *
visibility_varptr ()
{
#ifdef WEAK_TEST
  if (&visibility_var == NULL)
    return NULL;
  else
#endif
    return &visibility_var;
}

int
visibility_varval ()
{
#ifdef WEAK_TEST
  if (&visibility_var == NULL)
    return 0;
  else
#endif
    return visibility_var;
}

#if defined (HIDDEN_TEST) || defined (HIDDEN_UNDEF_TEST)
asm (".hidden visibility");
asm (".hidden visibility_var");
#else
#if defined (PROTECTED_TEST) || defined (PROTECTED_UNDEF_TEST) || defined (PROTECTED_WEAK_TEST)
asm (".protected visibility");
asm (".protected visibility_var");
#endif
#endif

#ifdef HIDDEN_NORMAL_TEST
int shlib_visibility_com;
asm (".hidden shlib_visibility_com");

int
shlib_visibility_checkcom ()
{
  return shlib_visibility_com == 0;
}

int
shlib_visibility_checkweak ()
{
  return 1;
}
#elif defined (HIDDEN_WEAK_TEST)
#pragma weak shlib_visibility_undef_var_weak
extern int shlib_visibility_undef_var_weak;
asm (".hidden shlib_visibility_undef_var_weak");

#pragma weak shlib_visibility_undef_func_weak
extern int shlib_visibility_undef_func_weak ();
asm (".hidden shlib_visibility_undef_func_weak");

#pragma weak shlib_visibility_var_weak
extern int shlib_visibility_var_weak;
asm (".hidden shlib_visibility_var_weak");

#pragma weak shlib_visibility_func_weak
extern int shlib_visibility_func_weak ();
asm (".hidden shlib_visibility_func_weak");

int
shlib_visibility_checkcom ()
{
  return 1;
}

int
shlib_visibility_checkweak ()
{
  return &shlib_visibility_undef_var_weak == NULL
	 && &shlib_visibility_undef_func_weak == NULL
	 && &shlib_visibility_func_weak == NULL
	 && &shlib_visibility_var_weak == NULL;
}
#else
int
shlib_visibility_checkcom ()
{
  return 1;
}

int
shlib_visibility_checkweak ()
{
  return 1;
}
#endif

#ifdef PROTECTED_TEST
#ifdef SHARED
int shared_data = 100;
#else
extern int shared_data;
#endif
 
int *
shared_data_p ()
{
  return &shared_data;
}
 
int
shared_func ()
{
  return 100;
}
 
void *
shared_func_p ()
{
  return shared_func;
}
#endif
@


1.7
log
@bfd/

2003-05-04  H.J. Lu <hjl@@gnu.org>

	* elf32-i386.c (allocate_dynrelocs): Don't allocate dynamic
	relocation entries for weak undefined symbols with non-default
	visibility.
	(elf_i386_relocate_section): Initialize the GOT entries and
	skip R_386_32/R_386_PC32 for weak undefined symbols with
	non-default visibility.

	* elfxx-ia64.c (allocate_fptr): Don't allocate function
	descriptors for weak undefined symbols with non-default
	visibility.
	(allocate_dynrel_entries): Don't allocate relocation entries
	for symbols resolved to 0.
	(set_got_entry): Don't install dynamic relocation for weak
	undefined symbols with non-default visibility.
	(set_pltoff_entry): Likewise.

	* elflink.h (elf_fix_symbol_flags): Hide weak undefined symbols
	with non-default visibility.
	(elf_link_output_extsym): Don't make weak undefined symbols
	with non-default visibility dynamic.

ld/testsuite/

2003-05-04  H.J. Lu <hjl@@gnu.org>

	* ld-elfvsb/main.c: Updated.
	* ld-elfvsb/sh1.c: Likewise.
@
text
@d16 2
d19 6
d87 1
d94 1
d398 1
d400 3
@


1.6
log
@bfd/

2003-04-27  H.J. Lu <hjl@@gnu.org>

	* elf-bfd.h (ELF_LINK_DYNAMIC_DEF): New.
	(ELF_LINK_DYNAMIC_WEAK): New.

	* elflink.h (elf_merge_symbol): Add one argument to indicate if
	a symbol should be skipped. Ignore definitions in dynamic
	objects for symbols with non-default visibility.
	(elf_add_default_symbol): Adjusted.
	(elf_link_add_object_symbols): Check if a symbol should be
	skipped. Don't merge the visibility field with the one from
	a dynamic object.
	(elf_link_check_versioned_symbol): Use undef_bfd.
	(elf_link_output_extsym): Warn if a forced local symbol is
	referenced from dynamic objects. Make non-weak undefined symbol
	with non-default visibility a fatal error.

ld/testsuite/

2003-04-27  H.J. Lu <hjl@@gnu.org>

	* ld-elfvsb/elfvsb.dat: Updated.
	* ld-elfvsb/elfvsb.exp: Likewise.
	* ld-elfvsb/main.c: Likewise.
	* ld-elfvsb/sh1.c: Likewise.
	* ld-elfvsb/sh2.c: Likewise.
@
text
@d342 31
@


1.5
log
@2002-02-18  Daniel Jacobowitz  <drow@@mvista.com>

        * ld-elfvsb/sh1.c: Fix typo in last change.
@
text
@d326 51
@


1.5.4.1
log
@	Merge from mainline:
	2003-04-28  H.J. Lu <hjl@@gnu.org>
	* ld-elfvers/vers.exp (picflag): Set PIC flag for compiler.
	(build_vers_lib): Support PIC.
	(build_vers_lib_no_pic): New. Change all calls to build_vers_lib
	to build_vers_lib_no_pic.
	(build_vers_lib_pic): New.
	Add tests vers26a, vers26b1, vers26b2 and vers26b3 for versioned
	definition vs. normal definition in different files.

	* ld-elfvers/vers26a.c: New file.
	* ld-elfvers/vers26a.dsym: Likewise.
	* ld-elfvers/vers26a.map: Likewise.
	* ld-elfvers/vers26a.ver: Likewise.
	* ld-elfvers/vers26b.c: Likewise.

	* ld-elfvers/vers26b.dsym: New empty file.
	* ld-elfvers/vers26b.ver: Likewise.

	2003-04-27  H.J. Lu <hjl@@gnu.org>
	* ld-elfvsb/elfvsb.dat: Updated.
	* ld-elfvsb/elfvsb.exp: Likewise.
	* ld-elfvsb/main.c: Likewise.
	* ld-elfvsb/sh1.c: Likewise.
	* ld-elfvsb/sh2.c: Likewise.
@
text
@a325 51

#ifdef HIDDEN_NORMAL_TEST
int shlib_visibility_com;
asm (".hidden shlib_visibility_com");

int
shlib_visibility_checkcom ()
{
  return shlib_visibility_com == 0;
}

int
shlib_visibility_checkweak ()
{
  return 1;
}
#else
int
shlib_visibility_checkcom ()
{
  return 1;
}

int
shlib_visibility_checkweak ()
{
  return 1;
}
#endif

#ifdef PROTECTED_TEST
int shared_data = 100;
 
int *
shared_data_p ()
{
  return &shared_data;
}
 
int
shared_func ()
{
  return 100;
}
 
void *
shared_func_p ()
{
  return shared_func;
}
#endif
@


1.4
log
@2002-02-17  Daniel Jacobowitz  <drow@@mvista.com>

        * ld-elfvsb/sh1.c: Use #pragma weak.
@
text
@d250 1
a250 1
#pragma weak visibility_var;
@


1.3
log
@2000-07-15  H.J. Lu  (hjl@@gnu.org)

	* ld-elfvsb/elfvsb.exp (visibility_run): Set expected failure
	for "protected_undef_def".

	* ld-elfvsb/main.c: Don't define HIDDEN_UNDEF_TEST when
	PROTECTED_WEAK_TEST is defined.
	Don't define PROTECTED_UNDEF_TEST when PROTECTED_WEAK_TEST is
	defined.
	Define PROTECTED_TEST when PROTECTED_UNDEF_TEST is defined.

	* ld-elfvsb/sh1.c (visibility): Mark protected only if
	PROTECTED_TEST, PROTECTED_UNDEF_TEST or PROTECTED_WEAK_TEST
	is defined.
	(visibility_var): Likewise.
@
text
@d183 3
d249 3
a324 5
#endif

#ifdef WEAK_TEST
asm (".weak visibility");
asm (".weak visibility_var");
@


1.3.6.1
log
@2002-02-17  Daniel Jacobowitz  <drow@@mvista.com>

        * ld-elfvsb/sh1.c: Use #pragma weak.
@
text
@a182 3
#ifdef WEAK_TEST
#pragma weak visibility
#endif
a245 3
#ifdef WEAK_TEST
#pragma weak visibility_var;
#endif
d319 5
@


1.3.6.2
log
@2002-02-18  Daniel Jacobowitz  <drow@@mvista.com>

        * ld-elfvsb/sh1.c: Fix typo in last change.
@
text
@d250 1
a250 1
#pragma weak visibility_var
@


1.3.2.1
log
@Merge from mainline.
@
text
@@


1.2
log
@2000-06-05  H.J. Lu  (hjl@@gnu.org)

	* lib/ld-lib.exp (default_ld_link): Redirect the linker output
	to link_output and make it global.

	* ld-elfvsb/elfvsb.exp (visibility_test): Add "hidden_undef",
	"hidden_undef_def", "hidden_weak", "protected_undef",
	"protected_undef_def" and "protected_weak".
	(visibility_run): Likewise.
	* ld-elfvsb/main.c: Likewise.
	* ld-elfvsb/sh1.c: Likewise.
	* ld-elfvsb/sh2.c: Likewise.

	* ld-elfvsb/elfvsb.dat: Updated.
@
text
@d315 1
d318 1
@


1.1
log
@2000-05-13  H.J. Lu  (hjl@@gnu.org)

	* lib/ld-lib.exp (default_ld_link): Redirect the linker output
	to link_output and make it global.

	* ld-elfvsb/elf-offset.ld: New. ELF visibility fearture
	tests.
	* ld-elfvsb/elfvsb.dat: Likewise.
	* ld-elfvsb/elfvsb.exp: Likewise.
	* ld-elfvsb/main.c: Likewise.
	* ld-elfvsb/sh1.c: Likewise.
	* ld-elfvsb/sh2.c: Likewise.
@
text
@d1 4
d172 13
d190 1
d205 3
d214 1
d220 6
d231 1
d237 6
a242 1
  return visibility;
d245 67
a311 1
#ifdef HIDDEN_TEST
d313 1
d316 6
@

