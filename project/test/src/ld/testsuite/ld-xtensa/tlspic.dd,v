head	1.1;
access;
symbols
	binutils-2_24-branch:1.1.0.20
	binutils-2_24-branchpoint:1.1
	binutils-2_21_1:1.1
	binutils-2_23_2:1.1
	binutils-2_23_1:1.1
	binutils-2_23:1.1
	binutils-2_23-branch:1.1.0.18
	binutils-2_23-branchpoint:1.1
	binutils-2_22_branch:1.1.0.16
	binutils-2_22:1.1
	binutils-2_22-branch:1.1.0.14
	binutils-2_22-branchpoint:1.1
	binutils-2_21:1.1
	binutils-2_21-branch:1.1.0.12
	binutils-2_21-branchpoint:1.1
	binutils-2_20_1:1.1
	binutils-2_20:1.1
	binutils-arc-20081103-branch:1.1.0.10
	binutils-arc-20081103-branchpoint:1.1
	binutils-2_20-branch:1.1.0.8
	binutils-2_20-branchpoint:1.1
	dje-cgen-play1-branch:1.1.0.6
	dje-cgen-play1-branchpoint:1.1
	arc-20081103-branch:1.1.0.4
	arc-20081103-branchpoint:1.1
	binutils-2_19_1:1.1
	binutils-2_19:1.1
	binutils-2_19-branch:1.1.0.2
	binutils-2_19-branchpoint:1.1
	binutils_latest_snapshot:1.1;
locks; strict;
comment	@# @;


1.1
date	2008.08.20.23.28.59;	author bwilson;	state Exp;
branches;
next	;


desc
@@


1.1
log
@2008-08-20  Bob Wilson  <bob.wilson@@acm.org>
bfd/
        * elf-bfd.h (elf_object_id): Add XTENSA_ELF_TDATA.
        * elf32-xtensa.c (elf_howto_table): Add TLS relocations.
        (elf_xtensa_reloc_type_lookup): Likewise.
        (TCB_SIZE): Define.
        (elf_xtensa_link_hash_entry): New.
        (GOT_UNKNOWN, GOT_NORMAL, GOT_TLS_GD, GOT_TLS_IE, GOT_TLS_ANY): Define.
        (elf_xtensa_hash_entry): Define.
        (elf_xtensa_obj_tdata): New.
        (elf_xtensa_tdata): Define.
        (elf_xtensa_local_got_tls_type): Define.
        (elf_xtensa_local_tlsfunc_refcounts): Define.
        (is_xtensa_elf): Define.
        (elf_xtensa_mkobject): New.
        (elf_xtensa_link_hash_table): Add tlsbase field.
        (elf_xtensa_link_hash_newfunc): New.
        (elf_xtensa_link_hash_table_create): Use elf_xtensa_link_hash_newfunc.
        Create an entry for "_TLS_MODULE_BASE_" and save it in tlsbase field.
        (elf_xtensa_copy_indirect_symbol): New.
        (elf_xtensa_check_relocs): Rewrite to handle TLS relocations.
        (elf_xtensa_gc_sweep_hook): Likewise.
        (elf_xtensa_allocate_dynrelocs): Optimize away GOT entries for
        TLSDESC_FN relocations when an IE reference is seen.
        (elf_xtensa_allocate_local_got_size): Likewise.
        (elf_xtensa_always_size_sections): New.
        (dtpoff_base, tpoff): New.
        (elf_xtensa_do_reloc): Handle TLS relocations.
        (replace_tls_insn): New.
        (IS_XTENSA_TLS_RELOC): Define.
        (elf_xtensa_relocate_section): Handle TLS relocations.
        (get_indirect_call_dest_reg): New.
        (bfd_elf32_mkobject): Define.
        (elf_backend_always_size_sections): New.
        (elf_backend_copy_indirect_symbol): New.
        * reloc.c (BFD_RELOC_XTENSA_TLSDESC_FN, BFD_RELOC_XTENSA_TLSDESC_ARG)
        (BFD_RELOC_XTENSA_TLS_DTPOFF, BFD_RELOC_XTENSA_TLS_TPOFF)
        (BFD_RELOC_XTENSA_TLS_FUNC, BFD_RELOC_XTENSA_TLS_ARG)
        (BFD_RELOC_XTENSA_TLS_CALL): New.
        * bfd-in2.h: Regenerate.
        * libbfd.h: Regenerate.
gas/
        * config/tc-xtensa.c (O_tlsfunc, O_tlsarg, O_tlscall): Define.
        (O_tpoff, O_dtpoff): Define.
        (suffix_relocs): Add entries for TLS suffixes.
        (xtensa_elf_cons): Check for invalid use of TLS relocations.
        (map_operator_to_reloc): Add is_literal parameter and use it to
        control translating TLS instruction relocations to the corresponding
        literal relocations.
        (xg_valid_literal_expression): Allow TLS operators.
        (xg_build_to_insn): Copy TLS operators from pseudo-instruction
        operands to generated literals.
        (xg_assemble_literal): Handle TLS operators.  Update call to
        map_operator_to_reloc.
        (md_assemble): Handle CALLXn.TLS pseudo-instruction.
        (md_apply_fix): Handle TLS relocations.
        (emit_single_op): Handle TLS operators.
        (convert_frag_immed): Update call to map_operator_to_reloc.
        (vinsn_to_insnbuf): Emit relocations for TLS-related instructions.
        * config/xtensa-istack.h (tinsn_struct): Add tls_reloc field.
        * config/xtensa-relax.c (append_literal_op): Add src_op parameter
        to initialize the op_data field of the BuildOp.
        (build_transition): Use it here to record the source operand
        corresponding to a generated literal.
        * config/xtensa-relax.h (build_op): Comment op_data use for literals.
include/elf/
        * xtensa.h (R_XTENSA_TLSDESC_FN, R_XTENSA_TLSDESC_ARG)
        (R_XTENSA_TLS_DTPOFF, R_XTENSA_TLS_TPOFF, R_XTENSA_TLS_FUNC)
        (R_XTENSA_TLS_ARG, R_XTENSA_TLS_CALL): New.
ld/testsuite/
        * ld-xtensa/tlsbin.dd, ld-xtensa/tlsbin.rd, ld-xtensa/tlsbin.s,
        ld-xtensa/tlsbin.sd, ld-xtensa/tlsbin.td, ld-xtensa/tlslib.s,
        ld-xtensa/tlspic.dd, ld-xtensa/tlspic.rd, ld-xtensa/tlspic.sd,
        ld-xtensa/tlspic.td, ld-xtensa/tlspic1.s, ld-xtensa/tlspic2.s: New.
        * ld-xtensa/xtensa.exp: Run them.
@
text
@#source: tlspic1.s
#source: tlspic2.s
#as:
#ld: -shared -melf32xtensa
#objdump: -drj.text --start-address=0x350
#target: xtensa*-*-linux*

.*: +file format elf32-xtensa-.e

Disassembly of section \.text:

0+350 <_start>:
 [0-9a-f]+:	[0-9a-f]+[ 	]+entry	a1, 32
#  GD
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a8, 2e0 <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a10, 2e4 <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+callx8	a8
#  GD -> IE because variable is referenced through IE too
 [0-9a-f]+:	[0-9a-f]+[ 	]+rur.threadptr	a8
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a10, 2ec <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+add.*	a10, a10, a8
#  GD against local variable
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a8, 2f0 <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a10, 2f4 <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+callx8	a8
#  GD -> IE against local variable referenced through IE too
 [0-9a-f]+:	[0-9a-f]+[ 	]+rur.threadptr	a8
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a10, 2fc <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+add.*	a10, a10, a8
#  GD against hidden and local variable
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a8, 300 <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a10, 304 <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+callx8	a8
#  GD -> IE against hidden and local variable referenced through IE too
 [0-9a-f]+:	[0-9a-f]+[ 	]+rur.threadptr	a8
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a10, 30c <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+add.*	a10, a10, a8
#  GD against hidden but not local variable
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a8, 310 <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a10, 314 <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+callx8	a8
#  GD -> IE against hidden but not local variable referenced through IE too
 [0-9a-f]+:	[0-9a-f]+[ 	]+rur.threadptr	a8
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a10, 31c <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+add.*	a10, a10, a8
#  LD
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a8, 320 <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a10, 324 <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+callx8	a8
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a12, 328 <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+add.*	a12, a12, a10
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a13, 32c <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+add.*	a13, a13, a10
#  LD against hidden and local variables
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a12, 330 <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+add.*	a12, a12, a10
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a13, 334 <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+add.*	a13, a13, a10
#  LD against hidden but not local variables
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a12, 338 <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+add.*	a12, a12, a10
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a13, 33c <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+add.*	a13, a13, a10
#  IE against global var
 [0-9a-f]+:	[0-9a-f]+[ 	]+rur.threadptr	a2
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a3, 340 <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+add.*	a3, a3, a2
#  IE against local var
 [0-9a-f]+:	[0-9a-f]+[ 	]+rur.threadptr	a4
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a5, 344 <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+add.*	a5, a5, a4
#  IE against hidden and local var
 [0-9a-f]+:	[0-9a-f]+[ 	]+rur.threadptr	a6
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a7, 348 <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+add.*	a7, a7, a6
#  IE against hidden but not local var
 [0-9a-f]+:	[0-9a-f]+[ 	]+rur.threadptr	a8
 [0-9a-f]+:	[0-9a-f]+[ 	]+l32r	a9, 34c <.*>
 [0-9a-f]+:	[0-9a-f]+[ 	]+add.*	a9, a9, a8
#
 [0-9a-f]+:	[0-9a-f]+[ 	]+retw.*
@
