head	1.3;
access;
symbols
	binutils-2_24-branch:1.3.0.10
	binutils-2_24-branchpoint:1.3
	binutils-2_21_1:1.3
	binutils-2_23_2:1.3
	binutils-2_23_1:1.3
	binutils-2_23:1.3
	binutils-2_23-branch:1.3.0.8
	binutils-2_23-branchpoint:1.3
	binutils-2_22_branch:1.3.0.6
	binutils-2_22:1.3
	binutils-2_22-branch:1.3.0.4
	binutils-2_22-branchpoint:1.3
	binutils-2_21:1.3
	binutils-2_21-branch:1.3.0.2
	binutils-2_21-branchpoint:1.3
	binutils_latest_snapshot:1.3;
locks; strict;
comment	@# @;


1.3
date	2010.10.06.08.58.59;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.18.02.30.41;	author amodra;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.09.19.22.29;	author hjl;	state Exp;
branches;
next	;


desc
@@


1.3
log
@        * script-sections.cc(class Memory_region): Remove
        current_lma_offset_ field.  Rename current_vma_offset_ to
        current_offset_.  Add last_section_ field.
        (Memory_region::get_current_vma_address): Rename to
        get_current_address.
        (Memory_region::get_current_lma_address): Delete.
        (Memory_region::increment_vma_offset): Rename to
        increment_offset.
        (Memory_region::increment_lma_offset): Delete.
        (Memory_region::attributes_compatible): New method.  Returns
        true if the provided section is compatible with the region.
        (Memory_region::get_last_section): New method.  Returns the last
        section to use the region.
        (Memory_region::set_last_section): New method.  Stores the last
        section to use the region.
        (Script_sections::block_in_region): New method.  Returns true if
        a block of memory is contained within a region.
        (Script_sections::find_memory_region): New method.  Locates a
        memory region to be used to set a VMA or LMA address.
        (Output_section_definition::set_section_addresses): Add code to
        check for addresses set by memory regions.
        (Output_segment::set_section_addresses): Remove memory region
        walking code.
        (Script_sections::create_segment): Add a warning if a header
        segment is created outside of any region.
        * script-sections.h (class Script_sections): Add prototypes for
        find_memory_region and block_in_region methods.
        * testsuite/memory_test.s: Use .long instead of .word.
        * testsuite/memory_test.t: Add some more output sections.
        * testsuite/memory_test.sh: Update expected output.

        * ld.texinfo: Update description of computation of VMA and LMA
        addresses for output sections.

        * ld-scripts/rgn-at5.t: Add some more output sections.
        * ld-scripts/rgn-at5.d: Update expected output.
@
text
@MEMORY
{
  region1        : ORIGIN = 0x1000, LENGTH = 0x1000 ,
  region2 (r)    :    org = 0x2000, len    =    300
  region3 (wx)   :      o = 0x4000, l      =      4
  region4 (!r)   : o = 0x6000 + 60, len    = 0x30 * 0x6
}

SECTIONS
{
  .sec0 : { *(*.sec0) }
  
  .sec1 ORIGIN (region1) : { *(*.sec1) } AT> region2

  fred = ORIGIN (region1) + LENGTH (region1);
  
  .sec2 : { *(*.sec2) } > region3 AT> region4

  .sec3 0x5000 : { *(*.sec3) }

  .sec4 : { *(*.sec4) } AT> region2

  .sec5 : { LONG(0x5555) } > region2

  /DISCARD/ : { *(*) }
}
@


1.2
log
@	* lib/ld-lib.exp (check_gc_sections_available): Fail more targets.
	* ld-discard/discard.exp: Move xfails from here..
	* ld-discard/extern.d: ..to here.
	* ld-discard/start.d: ..and here.
	* ld-discard/static.d: ..and here.
	* ld-elf/binutils.exp: Don't run tbss1 and tbss2 tests on hppa64.
	* ld-elf/empty2.d: Remove xfails.
	* ld-elf/flags1.d: xfail hppa64.
	* ld-elf/group1.d: Add comment.
	* ld-elf/group2.d: xfail cr16 and crx.
	* ld-elf/group3b.d: Correct xfail and add comment.
	* ld-elf/group4.d: xfail cr16 and crx.
	* ld-elf/group5.d: Likewise.
	* ld-elf/group6.d: Likewise.
	* ld-elf/group7.d: Likewise.
	* ld-elf/group8a.d: Add more notarget and xfail entries.  Comment.
	* ld-elf/group8b.d: Likewise.
	* ld-elf/group9a.d: Likewise.
	* ld-elf/group9b.d: Likewise.
	* ld-elf/linkonce2.d: Correct notarget and comment.
	* ld-elf/merge2.d: Remove iq2000 from xfail.
	* ld-elf/multibss1.d: xfail hppa64.
	* ld-elf/nobits-1.d: Likewise.
	* ld-elf/note-1.d: Likewise.
	* ld-elf/note-2.d: Likewise.
	* ld-elf/orphan-region.d: Add xfails.
	* ld-elf/orphan-region.ld: Discard some sections.
	* ld-elf/orphan.d: Add xfails.
	* ld-elf/orphan.ld: Discard some sections.
	* ld-elf/orphan3.d: Replace xfail frv-*-* with frv-*-elf.  Remove
	cr16, crx and d10v.
	* ld-elf/pr349.d: Add xfails.
	* ld-elf/warn2.d: Add xfails.  Tweak symbol section for hppa64.
	* ld-scripts/rgn-at5.t: Discard .reginfo.
@
text
@d13 1
a13 1
  .sec1 ORIGIN (region1) : AT(LENGTH (region2)) { *(*.sec1) }
d15 1
a15 1
  fred = ORIGIN (region1) + LENGTH (region1) ;
d21 5
a25 1
  /DISCARD/ : { *(.reginfo) }
@


1.1
log
@Don't warn zero LMA adjustment.

bfd/

2010-09-09  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/11998
	* elf.c (assign_file_positions_for_load_sections): Don't warn
	zero LMA adjustment.

ld/testsuite/

2010-09-09  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/11998
	* ld-scripts/rgn-at5.d: New.
	* ld-scripts/rgn-at5.s: Likewise.
	* ld-scripts/rgn-at5.t: Likewise.
@
text
@d21 1
a21 8
  /* In theory we could put:

     /DISCARD/ : { *(*) }

     here as we do not need any other sections for this test.
     In practice however doing so breaks GOLD as it relies upon
     being able to create/find various other sections such as
     .dynamic, .dynsym and .gnu.hash.  */
@

