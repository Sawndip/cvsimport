head	1.20;
access;
symbols
	binutils-2_24-branch:1.20.0.2
	binutils-2_24-branchpoint:1.20
	binutils-2_21_1:1.19
	binutils-2_23_2:1.19
	binutils-2_23_1:1.19
	binutils-2_23:1.19
	binutils-2_23-branch:1.19.0.8
	binutils-2_23-branchpoint:1.19
	binutils-2_22_branch:1.19.0.6
	binutils-2_22:1.19
	binutils-2_22-branch:1.19.0.4
	binutils-2_22-branchpoint:1.19
	binutils-2_21:1.19
	binutils-2_21-branch:1.19.0.2
	binutils-2_21-branchpoint:1.19
	binutils-2_20_1:1.16.2.2
	binutils-2_20:1.16.2.2
	binutils-arc-20081103-branch:1.15.0.8
	binutils-arc-20081103-branchpoint:1.15
	binutils-2_20-branch:1.16.0.2
	binutils-2_20-branchpoint:1.16
	dje-cgen-play1-branch:1.15.0.6
	dje-cgen-play1-branchpoint:1.15
	arc-20081103-branch:1.15.0.4
	arc-20081103-branchpoint:1.15
	binutils-2_19_1:1.15
	binutils-2_19:1.15
	binutils-2_19-branch:1.15.0.2
	binutils-2_19-branchpoint:1.15
	binutils-2_18:1.14
	binutils-2_18-branch:1.14.0.2
	binutils-2_18-branchpoint:1.14
	binutils-csl-coldfire-4_1-32:1.8.2.1
	binutils-csl-sourcerygxx-4_1-32:1.8.2.1
	binutils-csl-innovasic-fido-3_4_4-33:1.8.2.1
	binutils-csl-sourcerygxx-3_4_4-32:1.5
	binutils-csl-coldfire-4_1-30:1.8.2.1
	binutils-csl-sourcerygxx-4_1-30:1.8.2.1
	binutils-csl-coldfire-4_1-28:1.8.2.1
	binutils-csl-sourcerygxx-4_1-29:1.8.2.1
	binutils-csl-sourcerygxx-4_1-28:1.8.2.1
	binutils-csl-arm-2006q3-27:1.8.2.1
	binutils-csl-sourcerygxx-4_1-27:1.8.2.1
	binutils-csl-arm-2006q3-26:1.8.2.1
	binutils-csl-sourcerygxx-4_1-26:1.8.2.1
	binutils-csl-sourcerygxx-4_1-25:1.8.2.1
	binutils-csl-sourcerygxx-4_1-24:1.8.2.1
	binutils-csl-sourcerygxx-4_1-23:1.8.2.1
	binutils-csl-sourcerygxx-4_1-21:1.8.2.1
	binutils-csl-arm-2006q3-21:1.8.2.1
	binutils-csl-sourcerygxx-4_1-22:1.8.2.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.8.2.1
	binutils-csl-sourcerygxx-4_1-20:1.8.2.1
	binutils-csl-arm-2006q3-19:1.8.2.1
	binutils-csl-sourcerygxx-4_1-19:1.8.2.1
	binutils-csl-sourcerygxx-4_1-18:1.8.2.1
	binutils-csl-renesas-4_1-9:1.8.2.1
	binutils-csl-sourcerygxx-3_4_4-25:1.5
	binutils-csl-renesas-4_1-8:1.8
	binutils-csl-renesas-4_1-7:1.8
	binutils-csl-renesas-4_1-6:1.8
	binutils-csl-sourcerygxx-4_1-17:1.8
	binutils-csl-sourcerygxx-4_1-14:1.8
	binutils-csl-sourcerygxx-4_1-15:1.8
	binutils-csl-sourcerygxx-4_1-13:1.8
	binutils-2_17:1.8.4.1
	binutils-csl-sourcerygxx-4_1-12:1.8
	binutils-csl-sourcerygxx-3_4_4-21:1.8
	binutils-csl-wrs-linux-3_4_4-24:1.5
	binutils-csl-wrs-linux-3_4_4-23:1.5
	binutils-csl-sourcerygxx-4_1-9:1.8
	binutils-csl-sourcerygxx-4_1-8:1.8
	binutils-csl-sourcerygxx-4_1-7:1.8
	binutils-csl-arm-2006q1-6:1.8
	binutils-csl-sourcerygxx-4_1-6:1.8
	binutils-csl-wrs-linux-3_4_4-22:1.5
	binutils-csl-coldfire-4_1-11:1.8
	binutils-csl-sourcerygxx-3_4_4-19:1.8
	binutils-csl-coldfire-4_1-10:1.8
	binutils-csl-sourcerygxx-4_1-5:1.8
	binutils-csl-sourcerygxx-4_1-4:1.8
	binutils-csl-wrs-linux-3_4_4-21:1.5
	binutils-csl-morpho-4_1-4:1.8
	binutils-csl-sourcerygxx-3_4_4-17:1.8
	binutils-csl-wrs-linux-3_4_4-20:1.5
	binutils-2_17-branch:1.8.0.4
	binutils-2_17-branchpoint:1.8
	binutils-csl-2_17-branch:1.8.0.2
	binutils-csl-2_17-branchpoint:1.8
	binutils-csl-gxxpro-3_4-branch:1.5.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.5
	binutils-2_16_1:1.5
	binutils-csl-arm-2005q1b:1.5
	binutils-2_16:1.5
	binutils-csl-arm-2005q1a:1.5
	binutils-csl-arm-2005q1-branch:1.5.0.4
	binutils-csl-arm-2005q1-branchpoint:1.5
	binutils-2_16-branch:1.5.0.2
	binutils-2_16-branchpoint:1.5
	csl-arm-2004-q3d:1.4
	csl-arm-2004-q3:1.4
	binutils-2_15:1.4
	binutils-2_15-branchpoint:1.4
	csl-arm-2004-q1a:1.4
	csl-arm-2004-q1:1.4
	binutils-2_15-branch:1.4.0.6
	cagney_bfdfile-20040213-branch:1.4.0.4
	cagney_bfdfile-20040213-branchpoint:1.4
	cagney_bigcore-20040122-branch:1.4.0.2
	cagney_bigcore-20040122-branchpoint:1.4
	csl-arm-2003-q4:1.4
	binutils-2_14:1.3
	binutils-2_14-branch:1.3.0.2
	binutils-2_14-branchpoint:1.3
	binutils_latest_snapshot:1.20;
locks; strict;
comment	@# @;


1.20
date	2013.05.02.21.06.15;	author nickc;	state Exp;
branches;
next	1.19;

1.19
date	2010.09.23.12.24.41;	author amodra;	state Exp;
branches;
next	1.18;

1.18
date	2009.09.09.12.13.41;	author amodra;	state Exp;
branches;
next	1.17;

1.17
date	2009.09.05.15.00.09;	author jiez;	state Exp;
branches;
next	1.16;

1.16
date	2009.09.02.07.25.39;	author amodra;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2008.03.12.08.37.09;	author amodra;	state Exp;
branches;
next	1.14;

1.14
date	2007.07.06.14.09.43;	author nickc;	state Exp;
branches;
next	1.13;

1.13
date	2007.02.06.15.26.53;	author nickc;	state Exp;
branches;
next	1.12;

1.12
date	2006.10.25.06.49.21;	author amodra;	state Exp;
branches;
next	1.11;

1.11
date	2006.06.05.12.53.50;	author amodra;	state Exp;
branches;
next	1.10;

1.10
date	2006.06.02.00.31.59;	author amodra;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.10.15.07.24;	author ths;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.15.08.32.02;	author jbeulich;	state Exp;
branches
	1.8.2.1
	1.8.4.1;
next	1.7;

1.7
date	2005.09.30.17.45.54;	author hjl;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.12.07.32.05;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.03.11.52.07;	author amodra;	state Exp;
branches;
next	1.4;

1.4
date	2003.05.29.00.16.46;	author thorpej;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.21.21.37.06;	author amodra;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.21.13.30.31;	author amodra;	state dead;
branches;
next	1.1;

1.1
date	2002.11.11.10.16.57;	author hp;	state Exp;
branches;
next	;

1.16.2.1
date	2009.09.05.15.00.54;	author jiez;	state Exp;
branches;
next	1.16.2.2;

1.16.2.2
date	2009.09.09.12.15.12;	author amodra;	state Exp;
branches;
next	;

1.8.2.1
date	2006.08.22.15.08.44;	author jsm28;	state Exp;
branches;
next	;

1.8.4.1
date	2006.05.10.15.22.31;	author ths;	state Exp;
branches;
next	;


desc
@@


1.20
log
@	* archures.c: Add some more MSP430 machine numbers.
	* config.bfd (msp430): Define targ_selvecs.
	* configure.in: Add bfd_elf32_msp430_ti_vec.
	* cpu-msp430.c: Add some more MSP430 machine numbers.
	* elf32-msp430.c Add support for MSP430X relocations.
	Add support for TI compiler generated relocations.
	Add support for sym_diff relocations.
	Add support for relaxing out of range short branches into long
	branches.
	Add support for MSP430 attribute section.
	* reloc.c: Add MSP430X relocations.
	* targets.c: Add bfd_elf32_msp430_ti_vec.
	* bfd-in2.h: Regenerate.
	* configure: Regenerate.
	* libbfd.h: Regenerate.

	* readelf.c: Add support for MSP430X architecture.

	* readelf.exp: Expect -wi test to fail for the MSP430.

	* config/tc-msp430.c: Add support for the MSP430X architecture.
	Add code to insert a NOP instruction after any instruction that
	might change the interrupt state.
	Add support for the LARGE memory model.
	Add code to initialise the .MSP430.attributes section.
	* config/tc-msp430.h: Add support for the MSP430X architecture.
	* doc/c-msp430.texi: Document the new -mL and -mN command line
	options.
	* NEWS: Mention support for the MSP430X architecture.

	* gas/all/gas.exp: Skip the DIFF1 test for the MSP430.
	Expect the FORWARD test to pass for the MSP430.
	Skip the REDEF tests for the MSP430.
	Expect the 930509A test to fail for the MSP430.
	* gas/all/sleb128-4.d: Skip for the MSP430.
	* gas/elf/elf.exp: Set target_machine to msp430 for the MSP430.
	Skip the EHOPT0 test for the MSP430.
	Skip the REDEF and EQU-RELOC tests for the MSP430.
	* gas/elf/section2.e-msp430: New file.
	* gas/lns/lns-big-delta.d: Remove expectation of 20-bit
	addresses.
	* gas/lns/lns.exp: Use alternate LNS COMMON test for the MSP430.
	* gas/msp430/msp430x.s: New test.
	* gas/msp430/msp430x.d: Expected disassembly.
	* gas/msp430/msp430.exp: Run new test.
	* gas/msp430/opcode.d: Update expected disassembly.

	* msp430.h: Add MSP430X relocs.
	Add some more MSP430 machine numbers.
	Add values used by .MSP430.attributes section.

	* msp430.h: Add patterns for MSP430X instructions.

	* Makefile.am: Add emsp430X.c
	* Makefine.in: Regenerate.
	* configure.tgt (msp430): Add msp430X emulation.
	* ldmain.c (multiple_definition): Only disable relaxation if it
	was enabled by the user.
	* ldmain.h (RELAXATION_ENABLED_BY_USER): New macro.
	* emulparams/msp430all.sh: Add support for MSP430X.
	* emultempl/generic.em: (before_parse): Enable relaxation for the
	MSP430.
	* scripttempl/msp430.sc: Reorganize sections.  Add .rodata
	section.
	* scripttempl/msp430_3.sc: Likewise.
	* NEWS: Mention support for MSP430X.

	* ld-elf/flags1.d: Expect this test to pass on the MSP430.
	* ld-elf/init-fini-arrays.d: Expect this test to fail on the
	MSP430.
	* ld-elf/merge.d: Expect this test to pass on the MSP430.
	* ld-elf/sec64k.exp: Skip these tests for the MSP430.
	* ld-gc/pr13683.d: Expect this test to fail on the MSP430.
	* ld-srec/srec.exp: Expect these tests to fail on the MSP430.
	* ld-undefined/undefined.exp: Expect the UNDEFINED LINE test to
	fail on the MSP430.

	* msp430-dis.c: Add support for MSP430X instructions.
@
text
@# Expect script for tests for >64k sections
#   Copyright 2002, 2003, 2005, 2006, 2007, 2008
#   Free Software Foundation, Inc.
#
# This file is part of the GNU Binutils.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
# MA 02110-1301, USA.
#
# Written by Hans-Peter Nilsson (hp@@axis.com)
#

# Exclude non-ELF targets.

if ![is_elf_format] {
    return
}

# Targets using the generic linker backend don't sort section symbols
# before local symbols, so don't bother testing them.
if { [istarget "arc-*-*"]
     || [istarget "d30v-*-*"]
     || [istarget "dlx-*-*"]
     || [istarget "i960-*-*"]
     || [istarget "msp430*-*-*"]
     || [istarget "or32-*-*"]
     || [istarget "pj*-*-*"]
     || [istarget "m32r-*-*"] } {
    return
}

# Test >64k sections, with and without -r.  First, create the assembly
# files.  Have a relocation to another section and one within the local
# section.

set test1 "64ksec-r"
set test2 "64ksec"

if { ![runtest_file_p $runtests $test1] \
	&& ![runtest_file_p $runtests $test2] } {
    return
}

set sfiles {}
set max_sec 66000
set secs_per_file 1000
for { set i 0 } { $i < $max_sec / $secs_per_file } { incr i } {
    set sfile "$objdir/tmpdir/sec64-$i.s"
    lappend sfiles $sfile
    if [catch { set ofd [open $sfile w] } x] {
	perror "$x"
	unresolved $test1
	unresolved $test2
	return
    }

    if { $i == 0 } {
	puts $ofd " .global start"
	puts $ofd "start:"
	puts $ofd " .global _start"
	puts $ofd "_start:"
	puts $ofd " .global __start"
	puts $ofd "__start:"
	puts $ofd " .global main"
	puts $ofd "main:"
	puts $ofd " .global foo_0"
	puts $ofd "foo_0: .dc.a 0"
    }

    # Make sure the used section is not covered by common linker scripts.
    # They should get separate section entries even without -r.
    puts $ofd " .altmacro"
    puts $ofd " .macro sec secn, secp"
    if {![istarget "frv-*-*linux*"]} then {
	puts $ofd "  .section .foo.\\secn,\"ax\""
    } else {
	puts $ofd "  .section .foo.\\secn,\"aw\""
    }
    puts $ofd "  .global foo_\\secn"
    puts $ofd "foo_\\secn:"
    puts $ofd "  .dc.a foo_\\secp"
    puts $ofd "bar_\\secn:"
    puts $ofd "  .dc.a bar_\\secn"
    puts $ofd " .endm"
    if {![istarget "bfin-*-*"]} then {
	puts $ofd " secn = [expr $i * $secs_per_file]"
    } else {
	puts $ofd " .set secn, [expr $i * $secs_per_file]"
    }
    puts $ofd " .rept $secs_per_file"
    if {![istarget "bfin-*-*"]} then {
	puts $ofd "  secn = secn + 1"
    } else {
	puts $ofd "  .set secn, secn + 1"
    }
    puts $ofd "  sec %(secn), %(secn-1)"
    puts $ofd " .endr"

    close $ofd
}

if [catch { set ofd [open "tmpdir/$test1.d" w] } x] {
    perror "$x"
    unresolved $test1
    unresolved $test2
    return
}

# The ld-r linked file will contain relocation-sections too, so make it
# half the size in order to try and keep the test-time down.

# The m32r target generates both REL and RELA relocs (for historical
# reasons) so the expected number of sections will be much more than
# 68000, which throws this particular test right off.
if { ![istarget "m32r-*-*"] } then {
    foreach sfile [lrange $sfiles 0 [expr [llength $sfiles] / 2]] {
	puts $ofd "#source: $sfile"
    }
    puts $ofd "#ld: -r"
    puts $ofd "#readelf: -W -Ss"
    puts $ofd "There are 680.. section headers.*:"
    puts $ofd "#..."
    puts $ofd "  \\\[ 0\\\] .* 680\[0-9\]\[0-9\]\[ \]+0\[ \]+0"
    puts $ofd "#..."
    puts $ofd "  \\\[ \[0-9\]\\\] \.foo\.1\[ \]+PROGBITS\[ \]+.*"
    puts $ofd "#..."
    puts $ofd "  \\\[65279\\\] (.rel\[a\]?)?\\.foo\\.\[0-9\]+ .*"
    puts $ofd "  \\\[65280\\\] (.rel\[a\]?)?\\.foo\\.\[0-9\]+ .*"
    puts $ofd "#..."
    puts $ofd " 340..: 0+\[ \]+0\[ \]+SECTION\[ \]+LOCAL\[ \]+DEFAULT\[ \]+68... "
    puts $ofd "#..."
    puts $ofd " 340..: 0+(2|4|8)\[ \]+0\[ \]+NOTYPE\[ \]+LOCAL\[ \]+DEFAULT\[ \]+\[2-5\] bar_1$"
    puts $ofd "#..."
    puts $ofd ".* bar_34000$"
    puts $ofd "#..."
    # Global symbols are not in "alphanumeric" order, so we just check
    # that the first and the last are present in any order (assuming no
    # duplicates).
    puts $ofd ".* (\[0-9\] foo_1|68... foo_34000)$"
    puts $ofd "#..."
    puts $ofd ".* (\[0-9\] foo_1|68... foo_34000)$"
    puts $ofd "#pass"
    close $ofd
    run_dump_test "tmpdir/$test1"
}

if [catch { set ofd [open "tmpdir/$test2.d" w] } x] {
    perror "$x"
    unresolved $test2
    return
}

# too big for d10v and msp
# lack of fancy orphan section handling causes overlap on fr30 and iq2000
if { ![istarget "d10v-*-*"]
     && ![istarget "msp*-*-*"]
     && ![istarget "fr30-*-*"] 
     && ![istarget "iq2000-*-*"] } {
    foreach sfile $sfiles { puts $ofd "#source: $sfile" }
    if { [istarget "avr-*-*"] } then {
	puts $ofd "#as: -mmcu=avr6"
	puts $ofd "#ld: -mavr6"
    } elseif { [istarget spu*-*-*] } {
	puts $ofd "#ld: --local-store 0:0"
    } else {
	puts $ofd "#ld:"
    }
    puts $ofd "#readelf: -W -Ss"
    puts $ofd "There are 660.. section headers.*:"
    puts $ofd "#..."
    puts $ofd "  \\\[ 0\\\] .* 660..\[ \]+0\[ \]+0"
    puts $ofd "#..."
    puts $ofd "  \\\[65279\\\] \\.foo\\.\[0-9\]+ .*"
    puts $ofd "  \\\[65280\\\] \\.foo\\.\[0-9\]+ .*"
    puts $ofd "#..."
    puts $ofd " 660..: \[0-9a-f\]+\[ \]+0\[ \]+SECTION\[ \]+LOCAL\[ \]+DEFAULT\[ \]+660.. "
    puts $ofd "#..."
    puts $ofd " 660..: \[0-9a-f\]+\[ \]+0\[ \]+NOTYPE\[ \]+LOCAL\[ \]+DEFAULT\[ \]+\[0-9\] bar_1$"
    puts $ofd "#..."
    puts $ofd ".* bar_66000$"
    puts $ofd "#..."
    # Global symbols are not in "alphanumeric" order, so we just check
    # that the first and the last are present in any order (assuming no
    # duplicates).
    puts $ofd ".* (\[0-9\] foo_1|66... foo_66000)$"
    puts $ofd "#..."
    puts $ofd ".* (\[0-9\] foo_1|66... foo_66000)$"
    puts $ofd "#pass"
    close $ofd
    run_dump_test "tmpdir/$test2"
}

for { set i 1 } { $i < $max_sec / $secs_per_file } { incr i } {
    catch "exec rm -f tmpdir/dump$i.o" status
}
@


1.19
log
@	* ld-elf/elf.exp: Don't run --gc-sections tls var test on v850.
	* ld-elf/group2.d: xfail xstormy.
	* ld-elf/group4.d: Likewise.
	* ld-elf/group5.d: Likewise.
	* ld-elf/group6.d: Likewise.
	* ld-elf/init-fini-arrays.d: xfail cr16 and crx.
	* ld-elf/orphan2.d: xfail xstormy.
	* ld-elf/sec64k.exp: Don't run on targets using generic linker.
	Allow a larger range for ld -r expected bar_1 section.  Don't run
	final link test on a number of targets.  Select avr6 for avr targets.
	* ld-elfcomm/elfcomm.exp: Don't attempt on hpux.
@
text
@d37 1
@


1.18
log
@	* ld-elf/sec64k.exp: For frv-linux use "aw" sections.
	* ld-elf/seg.d: Cater for GNU_STACK segment.
	* ld-elf/symbol1ref.s: Use data section.
	* ld-elf/symbol2ref.s: Likewise.
	* ld-scripts/empty-address-1.d: Don't run on frv-linux.
	* ld-scripts/empty-address-2a.d: Likewise.
	* ld-scripts/empty-address-2b.d: Likewise.
	* ld-scripts/empty-aligned.d: Likewise.
	* ld-elf/extract-symbol-1sym.d: Tolerate extra target supplied syms.
	* ld-scripts/sort_b_a-1.d: Likewise.
	* ld-scripts/sort_b_a.d: Likewise.
	* ld-scripts/sort_b_a_a-1.d: Likewise.
	* ld-scripts/sort_b_a_a-2.d: Likewise.
	* ld-scripts/sort_b_a_a-3.d: Likewise.
	* ld-scripts/sort_b_a_n-1.d: Likewise.
	* ld-scripts/sort_b_a_n-2.d: Likewise.
	* ld-scripts/sort_b_a_n-3.d: Likewise.
	* ld-scripts/sort_b_n-1.d: Likewise.
	* ld-scripts/sort_b_n.d: Likewise.
	* ld-scripts/sort_b_n_a-1.d: Likewise.
	* ld-scripts/sort_b_n_a-2.d: Likewise.
	* ld-scripts/sort_b_n_a-3.d: Likewise.
	* ld-scripts/sort_b_n_n-1.d: Likewise.
	* ld-scripts/sort_b_n_n-2.d: Likewise.
	* ld-scripts/sort_b_n_n-3.d: Likewise.
	* ld-scripts/sort_no-1.d: Likewise.
	* ld-scripts/sort_no-2.d: Likewise.
@
text
@d31 12
d126 1
a126 1
if {![istarget "m32r-*-*"]} then {
d143 1
a143 1
    puts $ofd " 340..: 0+(2|4|8)\[ \]+0\[ \]+NOTYPE\[ \]+LOCAL\[ \]+DEFAULT\[ \]+\[23\] bar_1$"
d163 40
a202 29
foreach sfile $sfiles { puts $ofd "#source: $sfile" }
if { [istarget spu*-*-*] } {
    puts $ofd "#ld: --local-store 0:0"
} else {
    puts $ofd "#ld:"
}
puts $ofd "#readelf: -W -Ss"
puts $ofd "There are 660.. section headers.*:"
puts $ofd "#..."
puts $ofd "  \\\[ 0\\\] .* 660..\[ \]+0\[ \]+0"
puts $ofd "#..."
puts $ofd "  \\\[65279\\\] \\.foo\\.\[0-9\]+ .*"
puts $ofd "  \\\[65280\\\] \\.foo\\.\[0-9\]+ .*"
puts $ofd "#..."
puts $ofd " 660..: \[0-9a-f\]+\[ \]+0\[ \]+SECTION\[ \]+LOCAL\[ \]+DEFAULT\[ \]+660.. "
puts $ofd "#..."
puts $ofd " 660..: \[0-9a-f\]+\[ \]+0\[ \]+NOTYPE\[ \]+LOCAL\[ \]+DEFAULT\[ \]+\[0-9\] bar_1$"
puts $ofd "#..."
puts $ofd ".* bar_66000$"
puts $ofd "#..."
# Global symbols are not in "alphanumeric" order, so we just check
# that the first and the last are present in any order (assuming no
# duplicates).
puts $ofd ".* (\[0-9\] foo_1|66... foo_66000)$"
puts $ofd "#..."
puts $ofd ".* (\[0-9\] foo_1|66... foo_66000)$"
puts $ofd "#pass"
close $ofd
run_dump_test "tmpdir/$test2"
@


1.17
log
@	gas/
	* doc/as.texinfo: Document that Blackfin GAS does not
	accept SYMBOL = VALUE.

	ld/testsuite/
	* ld-elf/sec64k.exp: Use ".set" instead of "=" for bfin-*-*.
@
text
@d73 5
a77 1
    puts $ofd "  .section .foo.\\secn,\"ax\""
@


1.16
log
@update copyright dates
@
text
@d80 5
a84 1
    puts $ofd " secn = [expr $i * $secs_per_file]"
d86 5
a90 1
    puts $ofd "  secn = secn + 1"
@


1.16.2.1
log
@	gas/
	* doc/as.texinfo: Document that Blackfin GAS does not
	accept SYMBOL = VALUE.

	ld/testsuite/
	* ld-elf/sec64k.exp: Use ".set" instead of "=" for bfin-*-*.
@
text
@d80 1
a80 5
    if {![istarget "bfin-*-*"]} then {
	puts $ofd " secn = [expr $i * $secs_per_file]"
    } else {
	puts $ofd " .set secn, [expr $i * $secs_per_file]"
    }
d82 1
a82 5
    if {![istarget "bfin-*-*"]} then {
	puts $ofd "  secn = secn + 1"
    } else {
	puts $ofd "  .set secn, secn + 1"
    }
@


1.16.2.2
log
@	* ld-elf/sec64k.exp: For frv-linux use "aw" sections.
	* ld-elf/seg.d: Cater for GNU_STACK segment.
	* ld-elf/symbol1ref.s: Use data section.
	* ld-elf/symbol2ref.s: Likewise.
	* ld-scripts/empty-address-1.d: Don't run on frv-linux.
	* ld-scripts/empty-address-2a.d: Likewise.
	* ld-scripts/empty-address-2b.d: Likewise.
	* ld-scripts/empty-aligned.d: Likewise.
	* ld-elf/extract-symbol-1sym.d: Tolerate extra target supplied syms.
	* ld-scripts/sort_b_a-1.d: Likewise.
	* ld-scripts/sort_b_a.d: Likewise.
	* ld-scripts/sort_b_a_a-1.d: Likewise.
	* ld-scripts/sort_b_a_a-2.d: Likewise.
	* ld-scripts/sort_b_a_a-3.d: Likewise.
	* ld-scripts/sort_b_a_n-1.d: Likewise.
	* ld-scripts/sort_b_a_n-2.d: Likewise.
	* ld-scripts/sort_b_a_n-3.d: Likewise.
	* ld-scripts/sort_b_n-1.d: Likewise.
	* ld-scripts/sort_b_n.d: Likewise.
	* ld-scripts/sort_b_n_a-1.d: Likewise.
	* ld-scripts/sort_b_n_a-2.d: Likewise.
	* ld-scripts/sort_b_n_a-3.d: Likewise.
	* ld-scripts/sort_b_n_n-1.d: Likewise.
	* ld-scripts/sort_b_n_n-2.d: Likewise.
	* ld-scripts/sort_b_n_n-3.d: Likewise.
	* ld-scripts/sort_no-1.d: Likewise.
	* ld-scripts/sort_no-2.d: Likewise.
@
text
@d73 1
a73 5
    if {![istarget "frv-*-*linux*"]} then {
	puts $ofd "  .section .foo.\\secn,\"ax\""
    } else {
	puts $ofd "  .section .foo.\\secn,\"aw\""
    }
@


1.15
log
@include/elf/
	PR 5900
	* common.h (SHN_BAD): Delete.
	(SHN_LORESERVE .. SHN_HIRESERVE): Move to..
	* external.h: ..here.
	* internal.h (SHN_LORESERVE, SHN_HIRESERVE): Define.
	(SHN_LOPROC, SHN_HIPROC, SHN_LOOS, SHN_HIOS): Define.
	(SHN_ABS, SHN_COMMON, SHN_XINDEX, SHN_BAD): Define.
bfd/
	PR 5900
	* elf-bfd.h: Include elf/internal.h after elf/external.h.
	* elfcode.h (elf_swap_symbol_in): Map reserved shndx range.
	(elf_swap_symbol_out): Adjust SHN_XINDEX test.
	(elf_swap_ehdr_out): Mask SHN_LORESERVE and SHN_XINDEX to values
	seen in external structs.
	(valid_section_index_p): Delete.
	(elf_object_p): Don't increment section numbers over reserved range.
	Simplify test for valid sh_link, sh_info and e_shstrndx fields.
	(elf_write_shdrs_and_ehdr): Mask SHN_LORESERVE and SHN_XINDEX to values
	seen in external structs.  Don't increment section numbers over
	reserved range.
	* elf.c (bfd_elf_sym_name): Remove redundant tests on st_shndx.
	(bfd_section_from_shdr): Likewise.
	(group_signature): Range check before accessing elf_elfsections.
	(_bfd_elf_setup_sections): Likewise.
	(bfd_section_from_shdr): Likewise.
	(bfd_section_from_shdr): Don't increment section number over
	reserved sections.
	(assign_file_positions_for_non_load_sections): Likewise.
	(assign_file_positions_except_relocs): Likewise.
	(_bfd_elf_write_object_contents): Likewise.
	(assign_section_numbers): Likewise.  Adjust for changed SHN_*.
	(prep_headers): Delete unused variable.
	* elflink.c (bfd_elf_link_record_local_dynamic_symbol): Adjust
	for changed SHN_* values.
	(check_dynsym, elf_link_input_bfd): Likewise.
	(bfd_elf_final_link): Likewise.  Don't skip over reserved section
	range.
	(elf_fixup_link_order): Check that sh_link field is valid.
	* elf-hppa.h (elf_hppa_add_symbol_hook): Make "index" unsigned.
	* elf32-arm.c (elf32_arm_gc_mark_extra_sections): Range check before
	accesssing elf_elfsections.
	* elf32-avr.c (elf32_avr_size_stubs): Likewise.
	* elf32-hppa.c (elf32_hppa_size_stubs): Likewise.
	* elf32-m68hc1x.c (elf32_m68hc11_size_stubs): Likewise.
	* elf64-hppa.c (elf64_hppa_check_relocs): Adjust for changed
	SHN_* defines.  Test for SHN_BAD return from
	_bfd_elf_section_from_bfd_section
binutils/
	PR 5900
	* readelf.c (SECTION_HEADER_INDEX, SECTION_HEADER_NUM): Delete.
	Remove use throughout file.
	(SECTION_HEADER): Likewise.
	(dump_relocations): Don't adjust st_shndx for reserved range.
	(process_file_header): Mask SHN_XINDEX to values seen in external
	elf structs.  Simplify valid section index tests.
	(get_32bit_elf_symbols, get_64bit_elf_symbols): Mask SHN_XINDEX.
	Map reserved st_shndx to internal form.
	(process_section_groups): Test that group symbol st_shndx is in
	range, not just non-zero.  Delete reserved range check.
	(get_symbol_index_type): Mask "type" to 16 bits when printing PRC,
	OS or RSV.
gdb/
	PR 5900
	* elfread.c (elf_symtab_read): Make shndx an unsigned int.
	* mipsread.c: Include elf/internal.h.
	(read_alphacoff_dynamic_symtab): Map external reserved sym_shndx
	to internal range.
ld/testsuite/
	PR 5900
	* ld-elf/sec64k.exp: Update.
@
text
@d2 2
a3 1
#   Copyright 2002, 2003, 2006, 2007, 2008 Free Software Foundation, Inc.
@


1.14
log
@Update sources to GPLv3
@
text
@d2 1
a2 1
#   Copyright 2002, 2003, 2006, 2007 Free Software Foundation, Inc.
d109 1
a109 1
    puts $ofd "  \\\[ 0\\\] .* 682\[0-9\]\[0-9\]\[ \]+0\[ \]+0"
d114 1
a114 1
    puts $ofd "  \\\[65536\\\] (.rel\[a\]?)?\\.foo\\.\[0-9\]+ .*"
d147 1
a147 1
puts $ofd "  \\\[ 0\\\] .* 662..\[ \]+0\[ \]+0"
d150 1
a150 1
puts $ofd "  \\\[65536\\\] \\.foo\\.\[0-9\]+ .*"
d152 1
a152 1
puts $ofd " 660..: \[0-9a-f\]+\[ \]+0\[ \]+SECTION\[ \]+LOCAL\[ \]+DEFAULT\[ \]+662.. "
@


1.13
log
@PR ld/3805
* ld-elf/sec64k.exp: Expect the relocatable version of this test to fail for
  the m32r because it creates both .rel and .rela sections.
@
text
@d2 1
a2 1
#   Copyright 2002, 2003, 2006 Free Software Foundation, Inc.
d4 3
a6 1
# This file is free software; you can redistribute it and/or modify
d8 1
a8 1
# the Free Software Foundation; either version 2 of the License, or
d18 2
a19 1
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.
@


1.12
log
@New Cell SPU port.
@
text
@d94 34
a127 2
foreach sfile [lrange $sfiles 0 [expr [llength $sfiles] / 2]] {
    puts $ofd "#source: $sfile"
a128 26
puts $ofd "#ld: -r"
puts $ofd "#readelf: -W -Ss"
puts $ofd "There are 680.. section headers.*:"
puts $ofd "#..."
puts $ofd "  \\\[ 0\\\] .* 682\[0-9\]\[0-9\]\[ \]+0\[ \]+0"
puts $ofd "#..."
puts $ofd "  \\\[ \[0-9\]\\\] \.foo\.1\[ \]+PROGBITS\[ \]+.*"
puts $ofd "#..."
puts $ofd "  \\\[65279\\\] (.rel\[a\]?)?\\.foo\\.\[0-9\]+ .*"
puts $ofd "  \\\[65536\\\] (.rel\[a\]?)?\\.foo\\.\[0-9\]+ .*"
puts $ofd "#..."
puts $ofd " 340..: 0+\[ \]+0\[ \]+SECTION\[ \]+LOCAL\[ \]+DEFAULT\[ \]+68... "
puts $ofd "#..."
puts $ofd " 340..: 0+(2|4|8)\[ \]+0\[ \]+NOTYPE\[ \]+LOCAL\[ \]+DEFAULT\[ \]+\[23\] bar_1$"
puts $ofd "#..."
puts $ofd ".* bar_34000$"
puts $ofd "#..."
# Global symbols are not in "alphanumeric" order, so we just check
# that the first and the last are present in any order (assuming no
# duplicates).
puts $ofd ".* (\[0-9\] foo_1|68... foo_34000)$"
puts $ofd "#..."
puts $ofd ".* (\[0-9\] foo_1|68... foo_34000)$"
puts $ofd "#pass"
close $ofd
run_dump_test "tmpdir/$test1"
@


1.11
log
@	* ld-elf/sec64k.exp: Add "main" symbol.  Use dc.a for addresses.
	Cater for different address sizes.  Match end of line when
	comparing symbols.
	* ld-elf/start.s: Use dc.a for addresses.
@
text
@d130 5
a134 1
puts $ofd "#ld:"
@


1.10
log
@bfd/
	PR ld/2723
	* elflink.c (bfd_elf_final_link): Don't output section symbols
	for special ELF sections.
ld/testsuite/
Update for removal of some section syms.
@
text
@d2 1
a2 1
#   Copyright 2002, 2003 Free Software Foundation, Inc.
d53 2
d56 1
a57 1
	puts $ofd "_start:"
d59 2
d62 1
a62 1
	puts $ofd "foo_0: .long 0"
d72 1
a72 1
    puts $ofd "  .long foo_\\secp"
d74 1
a74 1
    puts $ofd "  .long bar_\\secn"
d110 1
a110 1
puts $ofd " 340..: 0+4\[ \]+0\[ \]+NOTYPE\[ \]+LOCAL\[ \]+DEFAULT\[ \]+\[23\] bar_1"
d112 1
a112 1
puts $ofd ".* bar_34000"
d117 1
a117 1
puts $ofd ".* (\[0-9\] foo_1|68... foo_34000)"
d119 1
a119 1
puts $ofd ".* (\[0-9\] foo_1|68... foo_34000)"
d141 1
a141 1
puts $ofd " 660..: \[0-9a-f\]+\[ \]+0\[ \]+NOTYPE\[ \]+LOCAL\[ \]+DEFAULT\[ \]+\[0-9\] bar_1"
d143 1
a143 1
puts $ofd ".* bar_66000"
d148 1
a148 1
puts $ofd ".* (\[0-9\] foo_1|66... foo_66000)"
d150 1
a150 1
puts $ofd ".* (\[0-9\] foo_1|66... foo_66000)"
@


1.9
log
@	* ld-elf/sec64k.exp: Extend for MIPS ELF.
@
text
@d104 1
a104 1
puts $ofd " 680..: 0+\[ \]+0\[ \]+SECTION\[ \]+LOCAL\[ \]+DEFAULT\[ \]+68... "
d106 1
a106 1
puts $ofd " 680..: 0+4\[ \]+0\[ \]+NOTYPE\[ \]+LOCAL\[ \]+DEFAULT\[ \]+\[23\] bar_1"
d135 1
a135 1
puts $ofd " 660..: 0+\[ \]+0\[ \]+SECTION\[ \]+LOCAL\[ \]+DEFAULT\[ \]+662.. "
@


1.8
log
@binutils/testsuite/
2005-11-15  Jan Beulich  <jbeulich@@novell.com>

	* config/default.exp (link_or_copy): New. Use it for setting
	up assembler and linker for the compiler to use.

ld/testsuite/
2005-11-15  Jan Beulich  <jbeulich@@novell.com>

	* ld-bootstrap/bootstrap.exp: Delete ld-partial.o and ld[123]*
	after test.
	* ld-elf/elf.exp: Delete preinit, init, and fini after test.
	* ld-elf/sec64k.exp: Use macro and repeat in generated source
	files. Delete object files after test.
@
text
@d54 1
d56 1
d106 1
a106 1
puts $ofd " 680..: 0+4\[ \]+0\[ \]+NOTYPE\[ \]+LOCAL\[ \]+DEFAULT\[ \]+2 bar_1"
@


1.8.2.1
log
@Merge changes between binutils-csl-2_17-branchpoint and
binutils-2_17, except for the addition of generated files to CVS.
@
text
@a53 1
	puts $ofd " .global __start"
a54 1
	puts $ofd "__start:"
d104 1
a104 1
puts $ofd " 680..: 0+4\[ \]+0\[ \]+NOTYPE\[ \]+LOCAL\[ \]+DEFAULT\[ \]+\[23\] bar_1"
@


1.8.4.1
log
@	* ld-elf/sec64k.exp: Extend for MIPS ELF.
@
text
@a53 1
	puts $ofd " .global __start"
a54 1
	puts $ofd "__start:"
d104 1
a104 1
puts $ofd " 680..: 0+4\[ \]+0\[ \]+NOTYPE\[ \]+LOCAL\[ \]+DEFAULT\[ \]+\[23\] bar_1"
@


1.7
log
@ld/

2005-09-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* ldlang.c (output_statement_hash_entry): New type.
	(output_statement_table): New variable for hash table.
	(output_statement_newfunc): New function.
	(output_statement_table_init): Likewise.
	(output_statement_table_free): Likewise.
	(lang_init): Call output_statement_table_init.
	(lang_finish): Renamed to ...
	(lang_end): This.
	(lang_process): Updated.
	(lang_finish): New function.
	(lang_output_section_find_1): Use hash table.
	(lang_output_section_statement_lookup_1): Likewise.

	* ldlang.h (lang_finish): New.

	* ldmain.c (main): Call lang_finish.

ld/testsuite/

2005-09-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-elf/sec64k.exp: Enabled for all ELF targets.
@
text
@a41 1
set secn 0
d52 1
a52 1
    if { $secn == 0 } {
d61 14
a74 9
    for { set j 0 } { $j < $secs_per_file } { incr j } {
	incr secn
	puts $ofd " .section .foo.$secn,\"ax\""
	puts $ofd " .global foo_$secn"
	puts $ofd "foo_$secn:"
	puts $ofd " .long foo_[expr $secn - 1]"
	puts $ofd "bar_$secn:"
	puts $ofd " .long bar_$secn"
    }
d148 4
@


1.6
log
@Update FSF addresses
@
text
@a26 6
# Per-port excludes, since this test takes an overwhelmingly long time
# currently.
if { ![istarget cris-*-*] } {
    return
}

@


1.5
log
@update copyright dates
@
text
@d16 1
a16 1
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
@


1.4
log
@* ld-elf/elf.exp: Use if_elf_format.
* ld-elf/sec64k.exp: Likewise.
* ld-elfcomm/elfcomm.exp: Likewise.
* lib/ld-lib.exp (is_elf_format): Match hppa*64*-*-hpux*.
@
text
@d2 1
a2 1
#   Copyright 2002 Free Software Foundation, Inc.
@


1.3
log
@	* ld-elf/elf.exp: Remove sec64k test.
	* ld-elf/sec64k.exp: Reinstate.
@
text
@d23 1
a23 9
if { ![istarget *-*-linux*] \
     && ![istarget *-*-gnu] \
     && ![istarget hppa*64*-*-hpux*] \
     && ![istarget *-*-elf] } {
    return
}

if { [istarget *-*-linux*aout*] \
     || [istarget *-*-linux*oldld*] } {
@


1.2
log
@	* ld-elf/elf.exp: Renamed from sec64k.exp.  Add test_list loop.
	* ld-elf/merge.s: New file.
	* ld-elf/merge.d: New file.
	* ld-elf/merge.ld: New file.
@
text
@@


1.1
log
@	* ld-elf/sec64k.exp: New test.
	* lib/ld-lib.exp (run_dump_test): Don't prepend "$srcdir/$subdir/"
	to a source file starting with "/".
@
text
@@

