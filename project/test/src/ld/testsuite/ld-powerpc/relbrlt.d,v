head	1.9;
access;
symbols
	binutils-2_24-branch:1.9.0.2
	binutils-2_24-branchpoint:1.9
	binutils-2_21_1:1.5
	binutils-2_23_2:1.8
	binutils-2_23_1:1.8
	binutils-2_23:1.8
	binutils-2_23-branch:1.8.0.2
	binutils-2_23-branchpoint:1.8
	binutils-2_22_branch:1.6.2.1.0.2
	binutils-2_22:1.6.2.1
	binutils-2_22-branch:1.6.0.2
	binutils-2_22-branchpoint:1.6
	binutils-2_21:1.5
	binutils-2_21-branch:1.5.0.12
	binutils-2_21-branchpoint:1.5
	binutils-2_20_1:1.5
	binutils-2_20:1.5
	binutils-arc-20081103-branch:1.5.0.10
	binutils-arc-20081103-branchpoint:1.5
	binutils-2_20-branch:1.5.0.8
	binutils-2_20-branchpoint:1.5
	dje-cgen-play1-branch:1.5.0.6
	dje-cgen-play1-branchpoint:1.5
	arc-20081103-branch:1.5.0.4
	arc-20081103-branchpoint:1.5
	binutils-2_19_1:1.5
	binutils-2_19:1.5
	binutils-2_19-branch:1.5.0.2
	binutils-2_19-branchpoint:1.5
	binutils-2_18:1.3.2.1
	binutils-2_18-branch:1.3.0.2
	binutils-2_18-branchpoint:1.3
	binutils_latest_snapshot:1.9;
locks; strict;
comment	@# @;


1.9
date	2013.08.22.07.34.27;	author amodra;	state Exp;
branches;
next	1.8;

1.8
date	2012.06.15.15.13.37;	author amodra;	state Exp;
branches;
next	1.7;

1.7
date	2011.10.10.09.05.41;	author amodra;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.26.01.57.18;	author amodra;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2008.03.01.06.52.52;	author amodra;	state Exp;
branches;
next	1.4;

1.4
date	2007.08.13.00.20.59;	author amodra;	state Exp;
branches;
next	1.3;

1.3
date	2007.02.13.01.53.03;	author amodra;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2007.02.12.12.02.58;	author amodra;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.24.13.29.37;	author amodra;	state Exp;
branches;
next	;

1.6.2.1
date	2011.10.25.02.58.57;	author amodra;	state Exp;
branches;
next	;

1.3.2.1
date	2007.08.15.04.34.01;	author amodra;	state Exp;
branches;
next	;


desc
@@


1.9
log
@	* ld-powerpc/powerpc.exp: Substitute for le in options_regsub(ld).
	Correct ppc64elftests option replacement.
	(supports_ppc64): Match elf64lppc too.
	* ld-powerpc/relbrlt.d: Update for little-endian.
	* ld-powerpc/symtocbase.d: Likewise.
	* ld-powerpc/tls.t: Likewise.
	* ld-powerpc/tlsexetoc.g: Likewise.
	* ld-powerpc/tlsso.d: Likewise.
	* ld-powerpc/tlsso.g: Likewise.
	* ld-powerpc/tlstoc.t: Likewise.
	* ld-powerpc/tlstocso.d: Likewise.
	* ld-powerpc/tlstocso.g: Likewise.
	* ld-powerpc/tlstocso.t: Likewise.
	* ld-powerpc/tocopt.d: Likewise.
	* ld-powerpc/tocopt2.d: Likewise.
	* ld-powerpc/tocopt3.d: Likewise.
	* ld-powerpc/tocopt4.d: Likewise.
	* ld-powerpc/tocopt5.d: Likewise.
@
text
@#source: relbrlt.s
#as: -a64
#ld: -melf64ppc --no-ld-generated-unwind-info --emit-relocs
#objdump: -Dr

.*

Disassembly of section \.text:

0*100000c0 <_start>:
[0-9a-f	 ]*:	(49 bf 00 2d|2d 00 bf 49) 	bl      .*
[0-9a-f	 ]*: R_PPC64_REL24	\.text\+0x37e003c
[0-9a-f	 ]*:	(60 00 00 00|00 00 00 60) 	nop
[0-9a-f	 ]*:	(49 bf 00 19|19 00 bf 49) 	bl      .*
[0-9a-f	 ]*: R_PPC64_REL24	\.text\+0x3bf0020
[0-9a-f	 ]*:	(60 00 00 00|00 00 00 60) 	nop
[0-9a-f	 ]*:	(49 bf 00 21|21 00 bf 49) 	bl      .*
[0-9a-f	 ]*: R_PPC64_REL24	\.text\+0x57e0024
[0-9a-f	 ]*:	(60 00 00 00|00 00 00 60) 	nop
[0-9a-f	 ]*:	00 00 00 00 	\.long 0x0
[0-9a-f	 ]*:	(4b ff ff e4|e4 ff ff 4b) 	b       .* <_start>
	\.\.\.

[0-9a-f	 ]*<.*plt_branch.*>:
[0-9a-f	 ]*:	(e9 62 80 00|00 80 62 e9) 	ld      r11,-32768\(r2\)
[0-9a-f	 ]*: R_PPC64_TOC16_DS	\*ABS\*\+0x157f00e8
[0-9a-f	 ]*:	(7d 69 03 a6|a6 03 69 7d) 	mtctr   r11
[0-9a-f	 ]*:	(4e 80 04 20|20 04 80 4e) 	bctr

[0-9a-f	 ]*<.*long_branch.*>:
[0-9a-f	 ]*:	(49 bf 00 10|10 00 bf 49) 	b       .* <far>
[0-9a-f	 ]*: R_PPC64_REL24	\*ABS\*\+0x137e00fc

[0-9a-f	 ]*<.*plt_branch.*>:
[0-9a-f	 ]*:	(e9 62 80 08|08 80 62 e9) 	ld      r11,-32760\(r2\)
[0-9a-f	 ]*: R_PPC64_TOC16_DS	\*ABS\*\+0x157f00f0
[0-9a-f	 ]*:	(7d 69 03 a6|a6 03 69 7d) 	mtctr   r11
[0-9a-f	 ]*:	(4e 80 04 20|20 04 80 4e) 	bctr
	\.\.\.

0*137e00fc <far>:
[0-9a-f	 ]*:	(4e 80 00 20|20 00 80 4e) 	blr
	\.\.\.

0*13bf00e0 <far2far>:
[0-9a-f	 ]*:	(4e 80 00 20|20 00 80 4e) 	blr
	\.\.\.

0*157e00e4 <huge>:
[0-9a-f	 ]*:	(4e 80 00 20|20 00 80 4e) 	blr

Disassembly of section \.branch_lt:

0*157f00e8 .*:
[0-9a-f	 ]*:	(00 00 00 00|e0 00 bf 13) .*
[0-9a-f	 ]*: R_PPC64_RELATIVE	\*ABS\*\+0x13bf00e0
[0-9a-f	 ]*:	(13 bf 00 e0|00 00 00 00) .*
[0-9a-f	 ]*:	(00 00 00 00|e4 00 7e 15) .*
[0-9a-f	 ]*: R_PPC64_RELATIVE	\*ABS\*\+0x157e00e4
[0-9a-f	 ]*:	(15 7e 00 e4|00 00 00 00) .*
@


1.8
log
@ld/
	* ldlang.h (lang_output_section_statement_type): Add after_end field.
	(lang_abs_symbol_at_beginning_of, lang_abs_symbol_at_end_of): Delete.
	(section_for_dot): Declare.
	* ldlang.c (lang_size_sections_1): Correct comment.
	(current_section): Move earlier.
	(current_assign, prefer_next_section): New static vars.
	(lang_do_assignments_1): Add found_end param.  Detect _end
	assignment to set found_end.  Set os->after_end.  Set above statics.
	(lang_do_assignments): Adjust lang_do_assignments_1 call.  Init
	vars.
	(section_for_dot): New function.
	(lang_set_startof): Don't make an absolute symbol.
	(lang_abs_symbol_at_beginning_of, lang_abs_symbol_at_end_of): Delete.
	* ldexp.c (new_rel_from_abs): Use section_for_dot.
	* emultempl/lnk960.em (symbol_at_beginning_of): New function.
	(symbol_at_end_of): Likewise.
	(lnk960_after_allocation): Use them.
	* scripttempl/elf.sc: Precede OTHER_GOT_SYMBOLS with . = .; and
	likewise before __bss_start.

ld/testsuite/
Update far too many tests.
@
text
@d6 1
a6 1
.*:     file format elf64-powerpc
d11 1
a11 1
[0-9a-f	 ]*:	49 bf 00 2d 	bl      .*
d13 2
a14 2
[0-9a-f	 ]*:	60 00 00 00 	nop
[0-9a-f	 ]*:	49 bf 00 19 	bl      .*
d16 2
a17 2
[0-9a-f	 ]*:	60 00 00 00 	nop
[0-9a-f	 ]*:	49 bf 00 21 	bl      .*
d19 1
a19 1
[0-9a-f	 ]*:	60 00 00 00 	nop
d21 1
a21 1
[0-9a-f	 ]*:	4b ff ff e4 	b       .* <_start>
d25 1
a25 1
[0-9a-f	 ]*:	e9 62 80 00 	ld      r11,-32768\(r2\)
d27 2
a28 2
[0-9a-f	 ]*:	7d 69 03 a6 	mtctr   r11
[0-9a-f	 ]*:	4e 80 04 20 	bctr
d31 1
a31 1
[0-9a-f	 ]*:	49 bf 00 10 	b       .* <far>
d35 1
a35 1
[0-9a-f	 ]*:	e9 62 80 08 	ld      r11,-32760\(r2\)
d37 2
a38 2
[0-9a-f	 ]*:	7d 69 03 a6 	mtctr   r11
[0-9a-f	 ]*:	4e 80 04 20 	bctr
d42 1
a42 1
[0-9a-f	 ]*:	4e 80 00 20 	blr
d46 1
a46 1
[0-9a-f	 ]*:	4e 80 00 20 	blr
d50 1
a50 1
[0-9a-f	 ]*:	4e 80 00 20 	blr
d55 1
a55 1
[0-9a-f	 ]*:	00 00 00 00 .*
d57 2
a58 2
[0-9a-f	 ]*:	13 bf 00 e0 .*
[0-9a-f	 ]*:	00 00 00 00 .*
d60 1
a60 1
[0-9a-f	 ]*:	15 7e 00 e4 .*
@


1.7
log
@ld/
	* emultempl/ppc64elf.em (ppc_add_stub_section): Align to 32 bytes.
ld/testsuite/
	* ld-powerpc/relbrlt.d: Update for stub alignment change.
	* ld-powerpc/tlsexe.g: Likewise.
	* ld-powerpc/tlsexe.r: Likewise.
	* ld-powerpc/tlsexetoc.g: Likewise.
	* ld-powerpc/tlsexetoc.r: Likewise.
	* ld-powerpc/tlsso.g: Likewise.
	* ld-powerpc/tlsso.r: Likewise.
@
text
@d54 1
a54 1
0*157f00e8 <\.branch_lt>:
@


1.6
log
@bfd/
	* elf32-ppc.c: Include dwarf2.h.
	(struct ppc_elf_link_hash_table): Add glink_eh_frame.
	(ppc_elf_create_glink): Create .eh_frame section.
	(glink_eh_frame_cie): New array.
	(ppc_elf_size_dynamic_sections): Size glink_eh_frame.
	(ppc_elf_finish_dynamic_sections): Write glink_eh_frame.
	* elf64-ppc.c: Include dwarg2.h.
	(struct ppc_link_hash_table): Add glink_eh_frame.
	(create_linkage_sections): Create .eh_frame section.
	(ppc64_elf_size_dynamic_sections): Arrange to drop unneeded
	glink_eh_frame.
	(glink_eh_frame_cie): New array.
	(ppc64_elf_size_stubs): Size glink_eh_frame.
	(ppc64_elf_build_stubs): Init glink_eh_frame contents.
	(ppc64_elf_finish_dynamic_sections): Write glink_eh_frame.
ld/
	* emulparams/elf32ppc.sh: Source plt_unwind.sh.
	* emulparams/elf64ppc.sh: Likewise.
	* emultempl/ppc32elf.em (OPTION_NO_TLS_OPT): Adjust.
	(PARSE_AND_LIST_PROLOGUE, PARSE_AND_LIST_LONGOPTS,
	PARSE_AND_LIST_OPTIONS, PARSE_AND_LIST_ARGS_CASES): Append to
	existing values.
	* emultempl/ppc64elf.em (OPTION_STUBGROUP_SIZE): Adjust.
	(PARSE_AND_LIST_PROLOGUE, PARSE_AND_LIST_LONGOPTS,
	PARSE_AND_LIST_OPTIONS, PARSE_AND_LIST_ARGS_CASES): Append to
	existing values.
ld/testsuite/
	* ld-powerpc/powerpc.exp: Use --no-ld-generated-unwind-info
	with some tests.
	* ld-powerpc/relbrlt.d: Likewise.
@
text
@d10 1
a10 1
0*100000b0 <_start>:
d26 1
a26 1
[0-9a-f	 ]*: R_PPC64_TOC16_DS	\*ABS\*\+0x157f00d8
d32 1
a32 1
[0-9a-f	 ]*: R_PPC64_REL24	\*ABS\*\+0x137e00ec
d36 1
a36 1
[0-9a-f	 ]*: R_PPC64_TOC16_DS	\*ABS\*\+0x157f00e0
d41 1
a41 1
0*137e00ec <far>:
d45 1
a45 1
0*13bf00d0 <far2far>:
d49 1
a49 1
0*157e00d4 <huge>:
d54 1
a54 1
0*157f00d8 <\.branch_lt>:
d56 2
a57 2
[0-9a-f	 ]*: R_PPC64_RELATIVE	\*ABS\*\+0x13bf00d0
[0-9a-f	 ]*:	13 bf 00 d0 .*
d59 2
a60 2
[0-9a-f	 ]*: R_PPC64_RELATIVE	\*ABS\*\+0x157e00d4
[0-9a-f	 ]*:	15 7e 00 d4 .*
@


1.6.2.1
log
@ld/
	2011-10-10  Alan Modra  <amodra@@gmail.com>
	* emultempl/ppc64elf.em (ppc_add_stub_section): Align to 32 bytes.
ld/testsuite/
	2011-10-10  Alan Modra  <amodra@@gmail.com>
	* ld-powerpc/relbrlt.d: Update for stub alignment change.
	* ld-powerpc/tlsexe.g: Likewise.
	* ld-powerpc/tlsexe.r: Likewise.
	* ld-powerpc/tlsexetoc.g: Likewise.
	* ld-powerpc/tlsexetoc.r: Likewise.
	* ld-powerpc/tlsso.g: Likewise.
	* ld-powerpc/tlsso.r: Likewise.
@
text
@d10 1
a10 1
0*100000c0 <_start>:
d26 1
a26 1
[0-9a-f	 ]*: R_PPC64_TOC16_DS	\*ABS\*\+0x157f00e8
d32 1
a32 1
[0-9a-f	 ]*: R_PPC64_REL24	\*ABS\*\+0x137e00fc
d36 1
a36 1
[0-9a-f	 ]*: R_PPC64_TOC16_DS	\*ABS\*\+0x157f00f0
d41 1
a41 1
0*137e00fc <far>:
d45 1
a45 1
0*13bf00e0 <far2far>:
d49 1
a49 1
0*157e00e4 <huge>:
d54 1
a54 1
0*157f00e8 <\.branch_lt>:
d56 2
a57 2
[0-9a-f	 ]*: R_PPC64_RELATIVE	\*ABS\*\+0x13bf00e0
[0-9a-f	 ]*:	13 bf 00 e0 .*
d59 2
a60 2
[0-9a-f	 ]*: R_PPC64_RELATIVE	\*ABS\*\+0x157e00e4
[0-9a-f	 ]*:	15 7e 00 e4 .*
@


1.5
log
@bfd/
	* elf64-ppc.c (build_plt_stub): Add relocs on plt call stubs
	if emitrelocations.
	(get_relocs): New function, split out from..
	(ppc_build_one_stub): ..here.  Add relocs on plt_branch stubs if
	emitrelocations.  Remove indx temp.
	(ppc_size_one_stub): Count new stub relocs.
	(ppc64_elf_size_stubs): Count new glink reloc.
	(ppc64_elf_build_stubs): Emit glink reloc if emitrelocations.
	(ppc64_elf_finish_dynamic_sections): Output glink relocs.
	* elf32-ppc.c (ppc_elf_finish_dynamic_sections): Describe non-pic
	glink code.
ld/testsuite/
	* ld-powerpc/relbrlt.d: Update.  Also check .branch_lt section.
@
text
@d3 1
a3 1
#ld: -melf64ppc --emit-relocs
@


1.4
log
@bfd/
	* elf64-ppc.c (ADDI_R12_R12, LD_R11_0R2, LD_R2_0R2): Define.
	Update stub comments.
	(build_plt_stub): Build two variants, one without "addis".
	(ppc_build_one_stub): Build stubs without "addis" if possible.
	(ppc_size_one_stub): Size new stubs.
ld/testsuite/
	* ld-powerpc/relbrlt.s (.text.pad2): Adjust space.
	* ld-powerpc/relbrlt.d: Update.
	* ld-powerpc/tlsexe.d: Update.
	* ld-powerpc/tlsexe.g: Update.
	* ld-powerpc/tlsexe.r: Update.
	* ld-powerpc/tlsexetoc.d: Update.
	* ld-powerpc/tlsexetoc.g: Update.
	* ld-powerpc/tlsexetoc.r: Update.
	* ld-powerpc/tlsso.d: Update.
	* ld-powerpc/tlsso.g: Update.
	* ld-powerpc/tlsso.r: Update.
	* ld-powerpc/tlstocso.d: Update.
	* ld-powerpc/tlstocso.g: Update.
@
text
@d4 1
a4 1
#objdump: -dr
d26 1
d36 1
d45 1
a45 1
[0-9a-f	 ]*<far2far>:
d49 1
a49 1
[0-9a-f	 ]*<huge>:
d51 10
@


1.3
log
@bfd/
	* elf64-ppc.c (create_linkage_sections): Use section ".branch_lt"
	for branch lookup table.
ld/
	* emulparams/elf64ppc.sh (OTHER_READWRITE_SECTIONS): Add ".branch_lt".
	* emultempl/ppc64elf.em (ppc_add_stub_section): Create without
	SEC_RELOC flag set.
ld/testsuite/
	* ld-powerpc/relbrlt.d: Update.
	* ld-powerpc/tlsexe.r: Update.
	* ld-powerpc/tlsexetoc.r: Update.
	* ld-powerpc/tlsso.r: Update.
	* ld-powerpc/tlstocso.r: Update.
@
text
@d11 2
a12 2
[0-9a-f	 ]*:	49 bf 00 31 	bl      .*
[0-9a-f	 ]*: R_PPC64_REL24	\.text\+0x37e0044
d17 1
a17 1
[0-9a-f	 ]*:	49 bf 00 25 	bl      .*
d25 1
a25 2
[0-9a-f	 ]*:	3d 82 00 00 	addis   r12,r2,0
[0-9a-f	 ]*:	e9 6c 80 00 	ld      r11,-32768\(r12\)
d30 2
a31 2
[0-9a-f	 ]*:	49 bf 00 14 	b       .* <far>
[0-9a-f	 ]*: R_PPC64_REL24	\*ABS\*\+0x137e00f4
d34 1
a34 2
[0-9a-f	 ]*:	3d 82 00 00 	addis   r12,r2,0
[0-9a-f	 ]*:	e9 6c 80 08 	ld      r11,-32760\(r12\)
d39 1
a39 1
0*137e00f4 <far>:
@


1.3.2.1
log
@bfd/
	* elf64-ppc.c (ADDI_R12_R12, LD_R11_0R2, LD_R2_0R2): Define.
	Update stub comments.
	(build_plt_stub): Build two variants, one without "addis".
	(ppc_build_one_stub): Build stubs without "addis" if possible.
	(ppc_size_one_stub): Size new stubs.
ld/testsuite/
	* ld-powerpc/relbrlt.s (.text.pad2): Adjust space.
	* ld-powerpc/relbrlt.d: Update.
	* ld-powerpc/tlsexe.d: Update.
	* ld-powerpc/tlsexe.g: Update.
	* ld-powerpc/tlsexe.r: Update.
	* ld-powerpc/tlsexetoc.d: Update.
	* ld-powerpc/tlsexetoc.g: Update.
	* ld-powerpc/tlsexetoc.r: Update.
	* ld-powerpc/tlsso.d: Update.
	* ld-powerpc/tlsso.g: Update.
	* ld-powerpc/tlsso.r: Update.
	* ld-powerpc/tlstocso.d: Update.
	* ld-powerpc/tlstocso.g: Update.
@
text
@d11 2
a12 2
[0-9a-f	 ]*:	49 bf 00 2d 	bl      .*
[0-9a-f	 ]*: R_PPC64_REL24	\.text\+0x37e003c
d17 1
a17 1
[0-9a-f	 ]*:	49 bf 00 21 	bl      .*
d25 2
a26 1
[0-9a-f	 ]*:	e9 62 80 00 	ld      r11,-32768\(r2\)
d31 2
a32 2
[0-9a-f	 ]*:	49 bf 00 10 	b       .* <far>
[0-9a-f	 ]*: R_PPC64_REL24	\*ABS\*\+0x137e00ec
d35 2
a36 1
[0-9a-f	 ]*:	e9 62 80 08 	ld      r11,-32760\(r2\)
d41 1
a41 1
0*137e00ec <far>:
@


1.2
log
@bfd/
	* elf64-ppc.c (create_linkage_sections): Don't create
	.rela.rodata.brlt for --emit-relocs.
	(ppc_build_one_stub): Create relocs for brlt --emit-relocs here.
	(ppc_size_one_stub): Count them.  Simplify test of stub type
	when counting stub relocs.  Set SEC_RELOC too.
	(ppc64_elf_size_stubs): Clear reloc_count and SEC_RELOC.
	(ppc64_elf_finish_dynamic_sections): Output brlt relocs.
ld/testsuite/
	* ld-powerpc/relbrlt.d: Update.
@
text
@d10 12
a21 12
0*10000078 <_start>:
    10000078:	49 bf 00 31 	bl      11bf00a8 .*
			10000078: R_PPC64_REL24	\.text\+0x37e0044
    1000007c:	60 00 00 00 	nop
    10000080:	49 bf 00 19 	bl      11bf0098 .*
			10000080: R_PPC64_REL24	\.text\+0x3bf0020
    10000084:	60 00 00 00 	nop
    10000088:	49 bf 00 25 	bl      11bf00ac .*
			10000088: R_PPC64_REL24	\.text\+0x57e0024
    1000008c:	60 00 00 00 	nop
    10000090:	00 00 00 00 	\.long 0x0
    10000094:	4b ff ff e4 	b       10000078 <_start>
d24 15
a38 15
0*11bf0098 <.*plt_branch.*>:
    11bf0098:	3d 82 05 7e 	addis   r12,r2,1406
    11bf009c:	e9 6c 80 28 	ld      r11,-32728\(r12\)
    11bf00a0:	7d 69 03 a6 	mtctr   r11
    11bf00a4:	4e 80 04 20 	bctr

0*11bf00a8 <.*long_branch.*>:
    11bf00a8:	49 bf 00 14 	b       137e00bc <far>
			11bf00a8: R_PPC64_REL24	\*ABS\*\+0x137e00bc

0*11bf00ac <.*plt_branch.*>:
    11bf00ac:	3d 82 05 7e 	addis   r12,r2,1406
    11bf00b0:	e9 6c 80 30 	ld      r11,-32720\(r12\)
    11bf00b4:	7d 69 03 a6 	mtctr   r11
    11bf00b8:	4e 80 04 20 	bctr
d41 2
a42 2
0*137e00bc <far>:
    137e00bc:	4e 80 00 20 	blr
d45 2
a46 2
0*13bf0098 <far2far>:
    13bf0098:	4e 80 00 20 	blr
d49 2
a50 2
0*157e009c <huge>:
    157e009c:	4e 80 00 20 	blr
@


1.1
log
@	* ld-powerpc/plt1.s: New.
	* ld-powerpc/plt1.d: New.
	* ld-powerpc/relbrlt.s: New.
	* ld-powerpc/relbrlt.d: New.
	* ld-powerpc/powerpc.exp: Run them.
@
text
@d10 12
a21 12
0*100000a8 <_start>:
    100000a8:	49 bf 00 31 	bl      11bf00d8 .*
			100000a8: R_PPC64_REL24	\.text\+0x37e0044
    100000ac:	60 00 00 00 	nop
    100000b0:	49 bf 00 19 	bl      11bf00c8 .*
			100000b0: R_PPC64_REL24	\.text\+0x3bf0020
    100000b4:	60 00 00 00 	nop
    100000b8:	49 bf 00 25 	bl      11bf00dc .*
			100000b8: R_PPC64_REL24	\.text\+0x57e0024
    100000bc:	60 00 00 00 	nop
    100000c0:	00 00 00 00 	\.long 0x0
    100000c4:	4b ff ff e4 	b       100000a8 <_start>
d24 15
a38 15
0*11bf00c8 <.*plt_branch.*>:
    11bf00c8:	3d 82 05 7e 	addis   r12,r2,1406
    11bf00cc:	e9 6c 80 58 	ld      r11,-32680\(r12\)
    11bf00d0:	7d 69 03 a6 	mtctr   r11
    11bf00d4:	4e 80 04 20 	bctr

0*11bf00d8 <.*long_branch.*>:
    11bf00d8:	49 bf 00 14 	b       137e00ec <far>
			11bf00d8: R_PPC64_REL24	\*ABS\*\+0x137e00ec

0*11bf00dc <.*plt_branch.*>:
    11bf00dc:	3d 82 05 7e 	addis   r12,r2,1406
    11bf00e0:	e9 6c 80 60 	ld      r11,-32672\(r12\)
    11bf00e4:	7d 69 03 a6 	mtctr   r11
    11bf00e8:	4e 80 04 20 	bctr
d41 2
a42 2
0*137e00ec <far>:
    137e00ec:	4e 80 00 20 	blr
d45 2
a46 2
0*13bf00c8 <far2far>:
    13bf00c8:	4e 80 00 20 	blr
d49 2
a50 2
0*157e00cc <huge>:
    157e00cc:	4e 80 00 20 	blr
@

