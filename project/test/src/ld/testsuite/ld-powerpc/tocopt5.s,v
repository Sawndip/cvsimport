head	1.1;
access;
symbols
	binutils-2_24-branch:1.1.0.6
	binutils-2_24-branchpoint:1.1
	binutils-2_23_2:1.1
	binutils-2_23_1:1.1
	binutils-2_23:1.1
	binutils-2_23-branch:1.1.0.4
	binutils-2_23-branchpoint:1.1
	binutils-2_22_branch:1.1.2.1.0.2
	binutils-2_22:1.1.2.1
	binutils-2_22-branch:1.1.0.2
	binutils_latest_snapshot:1.1;
locks; strict;
comment	@# @;


1.1
date	2011.09.30.05.11.04;	author amodra;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2011.10.25.02.53.00;	author amodra;	state Exp;
branches;
next	;


desc
@@


1.1
log
@	PR ld/13235
bfd/
	* elf64-ppc.c (struct ppc64_elf_obj_tdata): Add ha_relocs_not_using_r2.
	(ppc64_elf_edit_toc): Check HA relocs.
	(ha_reloc_match): Delete function.
	(ppc64_elf_relocate_section): Remove delayed HA nop optimization.
	Instead do it and low part optimization based on
	ha_relocs_not_using_r2.
ld/testsuite/
	* ld-powerpc/tocopt.d: Update.
	* ld-powerpc/tocopt5.d, * ld-powerpc/tocopt5.s: New test.
	* ld-powerpc/powerpc.exp: Run new test.
@
text
@ .section .toc,"aw"
x4t:
 .quad x4
x5t:
 .quad x5
x6t:
 .quad x6

 .section .sdata,"aw"
x1:
 .byte 1
x2:
 .byte 2
x3:
 .byte 3
x4:
 .byte 4
x5:
 .byte 5
x6:
 .byte 6

 .globl _start
 .text
_start:
# no need for got entry, optimise to nop,addi
# note: ld doesn't yet do got optimisation, so we get nop,ld
 addis 9,2,x1@@got@@ha
 ld 9,x1@@got@@l(9)
# must keep got entry, optimise to nop,addi,ld
 addis 4,2,x2@@got@@ha
 addi 5,4,x2@@got@@l
 ld 6,0(5)

# no need for toc entry, optimise to nop,addi
 addis 9,2,x4t@@toc@@ha
 ld 9,x4t@@toc@@l(9)
# must keep toc entry, optimise to nop,addi,ld
# if we had a reloc tying the ld to x5/x5t then we could throw away
# the toc entry and optimise to nop,nop,addi
 addis 4,2,x5t@@toc@@ha
 addi 5,4,x5t@@toc@@l
 ld 6,0(5)
@


1.1.2.1
log
@missed from previous delta
@
text
@@

