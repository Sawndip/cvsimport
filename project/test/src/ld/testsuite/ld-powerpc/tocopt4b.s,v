head	1.1;
access;
symbols
	binutils-2_24-branch:1.1.0.8
	binutils-2_24-branchpoint:1.1
	binutils-2_23_2:1.1
	binutils-2_23_1:1.1
	binutils-2_23:1.1
	binutils-2_23-branch:1.1.0.6
	binutils-2_23-branchpoint:1.1
	binutils-2_22_branch:1.1.0.4
	binutils-2_22:1.1
	binutils-2_22-branch:1.1.0.2
	binutils-2_22-branchpoint:1.1
	binutils_latest_snapshot:1.1;
locks; strict;
comment	@# @;


1.1
date	2011.08.22.14.28.54;	author amodra;	state Exp;
branches;
next	;


desc
@@


1.1
log
@	* ld-powerpc/tocopt4a.s, * ld-powerpc/tocopt4b.s,
	* ld-powerpc/tocopt4.d: New test.
	* ld-powerpc/powerpc.exp: Run it.
@
text
@ .section .toc,"aw"
 .globl xt
xt:
 .quad x
#
# This testcase will fail with a warning "xt defined on removed toc entry"
# if a large-toc access like the following is added to this file, because
# toc analysis only considers toc accesses from the current object file.
# The small-toc access from tocopt4a.s doesn't cause xt entry to be marked
# !can_optimize.  The testcase only passes because toc analysis considers
# *no* access from the current file as being sufficiently unusual to
# warrant keeping the toc entry.  So, if you use global symbols on toc
# entries, don't mix code models.
#
# .text
# addis 9,2,xt@@toc@@ha
# ld 9,xt@@toc@@l(9)
@
