head	1.2;
access;
symbols
	binutils-2_15:1.1.1.1
	binutils-2_15-branchpoint:1.1.1.1
	csl-arm-2004-q1:1.1.1.1
	binutils-2_15-branch:1.1.1.1.0.16
	cagney_bfdfile-20040213-branch:1.1.1.1.0.14
	cagney_bfdfile-20040213-branchpoint:1.1.1.1
	cagney_bigcore-20040122-branch:1.1.1.1.0.12
	cagney_bigcore-20040122-branchpoint:1.1.1.1
	csl-arm-2003-q4:1.1.1.1
	binutils-2_14:1.1.1.1
	binutils-2_14-branch:1.1.1.1.0.10
	binutils-2_14-branchpoint:1.1.1.1
	binutils-2_13_2_1:1.1.1.1
	binutils-2_13_2:1.1.1.1
	binutils-2_13_1:1.1.1.1
	binutils-2_13:1.1.1.1
	binutils-2_13-branchpoint:1.1.1.1
	binutils-2_13-branch:1.1.1.1.0.8
	binutils-2_12_1:1.1.1.1
	binutils-2_12:1.1.1.1
	binutils-2_12-branch:1.1.1.1.0.6
	binutils-2_12-branchpoint:1.1.1.1
	cygnus_cvs_20020108_pre:1.1.1.1
	binutils-2_11_2:1.1.1.1
	binutils-2_11_1:1.1.1.1
	binutils-2_11:1.1.1.1
	x86_64versiong3:1.1.1.1
	binutils-2_11-branch:1.1.1.1.0.4
	binutils-2_10_1:1.1.1.1
	binutils-2_10:1.1.1.1
	binutils-2_10-branch:1.1.1.1.0.2
	binutils-2_10-branchpoint:1.1.1.1
	binutils_latest_snapshot:1.1.1.1
	repo-unification-2000-02-06:1.1.1.1
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2004.04.21.20.52.31;	author cgd;	state dead;
branches;
next	1.1;

1.1
date	99.05.03.07.29.08;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.05.03.07.29.08;	author rth;	state Exp;
branches;
next	;


desc
@@


1.2
log
@[ bfd/ChangeLog ]
2004-04-21  Chris Demetriou  <cgd@@broadcom.com>

	* coff-mips.c (bfd_mips_ecoff_create_embedded_relocs): Remove.
	* elf32-mips.c (bfd_mips_elf32_create_embedded_relocs): Remove.
	* bfd-in.h (bfd_mips_ecoff_create_embedded_relocs)
	(bfd_mips_elf32_create_embedded_relocs): Remove prototypes
	* bfd-in2.h: Regenerate.

[ ld/ChangeLog ]
2004-04-21  Chris Demetriou  <cgd@@broadcom.com>

	* ld.texinfo: Remove MIPS --embedded-relocs documentation.
	* emulparams/elf32bmip.sh (EXTRA_EM_FILE): Remove definition.
	* emulparams/mipsidt.sh (TEMPLATE_NAME): Use generic.em.
	(EXTRA_EM_FILE): Use mipsecoff.em
	* emulparams/mipsidtl.sh (TEMPLATE_NAME): Use generic.em.
	(EXTRA_EM_FILE): Use mipsecoff.em
	* emultempl/mipsecoff.em: Restructure to be included as an
	extra emulation file.
	(check_sections, gld${EMULATION_NAME}_after_open)
	(gld${EMULATION_NAME}_after_allocation)
	(gld${EMULATION_NAME}_get_script)
	(ld_${EMULATION_NAME}_emulation): Remove
	(gld${EMULATION_NAME}_before_parse): Rename to...
	(mipsecoff_before_parse): This.
	(LDEMUL_BEFORE_PARSE): Define.
	* emultempl/mipself.em: Remove file.
	* scripttempl/mips.sc (.rel.sdata): Do not include in output.
	(__runtime_reloc_start, __runtime_reloc_stop): Stop providing
	these symbols.
	* Makefile.am: Remove dependencies on emultempl/mipself.em.
	* Makefile.in: Regenerate.

[ ld/testsuite/ChangeLog ]
2004-04-21  Chris Demetriou  <cgd@@broadcom.com>

	* ld-empic/run.c: Removed as part of MIPS --embedded-relocs removal.
	* ld-empic/empic.exp: Likewise.
	* ld-empic/relax.t: Likewise.
	* ld-empic/relax1.c: Likewise.
	* ld-empic/relax2.c: Likewise.
	* ld-empic/relax3.c: Likewise.
	* ld-empic/relax4.c: Likewise.
	* ld-empic/runtest1.c: Likewise.
	* ld-empic/runtest2.c: Likewise.
	* ld-empic/runtesti.s: Likewise.
	* ld-mips-elf/empic1-ln.d: Likewise.
	* ld-mips-elf/empic1-lp.d: Likewise.
	* ld-mips-elf/empic1-mn.d: Likewise.
	* ld-mips-elf/empic1-mp.d: Likewise.
	* ld-mips-elf/empic1-ref.s: Likewise.
	* ld-mips-elf/empic1-sn.d: Likewise.
	* ld-mips-elf/empic1-sp.d: Likewise.
	* ld-mips-elf/empic1-space.s: Likewise.
	* ld-mips-elf/empic1-tgt.s: Likewise.
	* ld-mips-elf/empic2-fwd-0.d: Likewise.
	* ld-mips-elf/empic2-fwd-1.d: Likewise.
	* ld-mips-elf/empic2-fwd-tgt.s: Likewise.
	* ld-mips-elf/empic2-ref.s: Likewise.
	* ld-mips-elf/empic2-rev-0.d: Likewise.
	* ld-mips-elf/empic2-rev-1.d: Likewise.
	* ld-mips-elf/empic2-rev-tgt.s: Likewise.
	* ld-mips-elf/empic2-space.s: Likewise.
	* ld-mips-elf/emrelocs-eb.d: Likewise.
	* ld-mips-elf/emrelocs-el.d: Likewise.
	* ld-mips-elf/emrelocs.ld: Likewise.
	* ld-mips-elf/emrelocs1.s: Likewise.
	* ld-mips-elf/emrelocs2.s: Likewise.
	* ld-mips-elf/mips-elf.exp: Don't run now-removed tests.
@
text
@# Assembler initialization code for actual execution test.
	
# This code becomes the start of the execution test program.  It is
# responsible for initializing the static data, invoking the C code,
# and returning the result.  It is called as though it were a C
# function with an argument of the address of the data segment.

# We need to know the value of _ftext and _fdata at link time, but we
# have no way to actually get that at runtime.  This is because when
# this code is compiled with -membedded-pic, the la instruction will
# be turned into an addiu $gp instruction.  We work around this by
# storing the information in words in the .data section.  We then load
# the values of these words *before* doing the runtime relocation.
	.sdata
text_start:
	.word	_ftext
data_start:
	.word	_fdata

	.globl	start
	.text
start:
	# Grab some space on the stack, just as though we were a real
	# function.
	addiu	$sp,$sp,-8
	sw	$31,0($sp)

	# Save the $gp register, and set it up for our data section.
	sw	$gp,4($sp)

	addu	$gp,$4,0x8000		# macro

	# The start of the data segment is in $4.

	# Get the address of start into $5 in a position independent
	# fashion.
	.set	noreorder
	$LF1 = . + 8
	bal	$LF1
	la	$5,start-$LF1		# macro
	.set	reorder
	addu	$5,$5,$31

	# Now get the address of _ftext into $6.
	la	$6,_ftext-start		# macro
	addu	$6,$6,$5

	# Get the value of _ftext used to link into $7.
	lw	$7,text_start		# macro

	# Get the value of _fdata used to link into $8.
	lw	$8,data_start		# macro

	# Get the address of __runtime_reloc_start into $9.
	la	$9,__runtime_reloc_start-start	# macro
	addu	$9,$9,$5

	# Get the address of __runtime_reloc_stop into $10.
	la	$10,__runtime_reloc_stop-start	# macro
	addu	$10,$10,$5

	# The words between $9 and $10 are the runtime initialization
	# instructions.  Step through and relocate them.  First set
	# $11 and $12 to the values to add to text and data sections,
	# respectively.
	subu	$11,$6,$7
	subu	$12,$4,$8

1:	
	bge	$9,$10,3f		# macro
	lw	$13,0($9)
	and	$14,$13,0xfffffffe	# macro
	move	$15,$11
	beq	$13,$14,2f
	move	$15,$12
2:	
	addu	$14,$14,$4
	lw	$24,0($14)
	addu	$24,$24,$15
	sw	$24,0($14)
	addiu	$9,$9,4
	b	1b
3:	

	# Now the statically initialized data has been relocated
	# correctly, and we can call the C code which does the actual
	# testing.
	bal	foo

	# We return the value returned by the C code.
	lw	$31,0($sp)
	lw	$gp,4($sp)
	addu	$sp,$sp,8
	j	$31
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

