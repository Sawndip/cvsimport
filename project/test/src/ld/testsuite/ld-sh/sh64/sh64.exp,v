head	1.12;
access;
symbols
	binutils-2_24-branch:1.12.0.2
	binutils-2_24-branchpoint:1.12
	binutils-2_21_1:1.11
	binutils-2_23_2:1.11
	binutils-2_23_1:1.11
	binutils-2_23:1.11
	binutils-2_23-branch:1.11.0.10
	binutils-2_23-branchpoint:1.11
	binutils-2_22_branch:1.11.0.8
	binutils-2_22:1.11
	binutils-2_22-branch:1.11.0.6
	binutils-2_22-branchpoint:1.11
	binutils-2_21:1.11
	binutils-2_21-branch:1.11.0.4
	binutils-2_21-branchpoint:1.11
	binutils-2_20_1:1.11
	binutils-2_20:1.11
	binutils-arc-20081103-branch:1.10.0.10
	binutils-arc-20081103-branchpoint:1.10
	binutils-2_20-branch:1.11.0.2
	binutils-2_20-branchpoint:1.11
	dje-cgen-play1-branch:1.10.0.8
	dje-cgen-play1-branchpoint:1.10
	arc-20081103-branch:1.10.0.6
	arc-20081103-branchpoint:1.10
	binutils-2_19_1:1.10
	binutils-2_19:1.10
	binutils-2_19-branch:1.10.0.4
	binutils-2_19-branchpoint:1.10
	binutils-2_18:1.10
	binutils-2_18-branch:1.10.0.2
	binutils-2_18-branchpoint:1.10
	binutils-csl-coldfire-4_1-32:1.9
	binutils-csl-sourcerygxx-4_1-32:1.9
	binutils-csl-innovasic-fido-3_4_4-33:1.9
	binutils-csl-sourcerygxx-3_4_4-32:1.7
	binutils-csl-coldfire-4_1-30:1.9
	binutils-csl-sourcerygxx-4_1-30:1.9
	binutils-csl-coldfire-4_1-28:1.9
	binutils-csl-sourcerygxx-4_1-29:1.9
	binutils-csl-sourcerygxx-4_1-28:1.9
	binutils-csl-arm-2006q3-27:1.9
	binutils-csl-sourcerygxx-4_1-27:1.9
	binutils-csl-arm-2006q3-26:1.9
	binutils-csl-sourcerygxx-4_1-26:1.9
	binutils-csl-sourcerygxx-4_1-25:1.9
	binutils-csl-sourcerygxx-4_1-24:1.9
	binutils-csl-sourcerygxx-4_1-23:1.9
	binutils-csl-sourcerygxx-4_1-21:1.9
	binutils-csl-arm-2006q3-21:1.9
	binutils-csl-sourcerygxx-4_1-22:1.9
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.9
	binutils-csl-sourcerygxx-4_1-20:1.9
	binutils-csl-arm-2006q3-19:1.9
	binutils-csl-sourcerygxx-4_1-19:1.9
	binutils-csl-sourcerygxx-4_1-18:1.9
	binutils-csl-renesas-4_1-9:1.9
	binutils-csl-sourcerygxx-3_4_4-25:1.7
	binutils-csl-renesas-4_1-8:1.9
	binutils-csl-renesas-4_1-7:1.9
	binutils-csl-renesas-4_1-6:1.9
	binutils-csl-sourcerygxx-4_1-17:1.9
	binutils-csl-sourcerygxx-4_1-14:1.9
	binutils-csl-sourcerygxx-4_1-15:1.9
	binutils-csl-sourcerygxx-4_1-13:1.9
	binutils-2_17:1.9
	binutils-csl-sourcerygxx-4_1-12:1.9
	binutils-csl-sourcerygxx-3_4_4-21:1.9
	binutils-csl-wrs-linux-3_4_4-24:1.7
	binutils-csl-wrs-linux-3_4_4-23:1.7
	binutils-csl-sourcerygxx-4_1-9:1.9
	binutils-csl-sourcerygxx-4_1-8:1.9
	binutils-csl-sourcerygxx-4_1-7:1.9
	binutils-csl-arm-2006q1-6:1.9
	binutils-csl-sourcerygxx-4_1-6:1.9
	binutils-csl-wrs-linux-3_4_4-22:1.7
	binutils-csl-coldfire-4_1-11:1.9
	binutils-csl-sourcerygxx-3_4_4-19:1.9
	binutils-csl-coldfire-4_1-10:1.9
	binutils-csl-sourcerygxx-4_1-5:1.9
	binutils-csl-sourcerygxx-4_1-4:1.9
	binutils-csl-wrs-linux-3_4_4-21:1.7
	binutils-csl-morpho-4_1-4:1.9
	binutils-csl-sourcerygxx-3_4_4-17:1.9
	binutils-csl-wrs-linux-3_4_4-20:1.7
	binutils-2_17-branch:1.9.0.4
	binutils-2_17-branchpoint:1.9
	binutils-csl-2_17-branch:1.9.0.2
	binutils-csl-2_17-branchpoint:1.9
	binutils-csl-gxxpro-3_4-branch:1.7.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.7
	binutils-2_16_1:1.7
	binutils-csl-arm-2005q1b:1.7
	binutils-2_16:1.7
	binutils-csl-arm-2005q1a:1.7
	binutils-csl-arm-2005q1-branch:1.7.0.4
	binutils-csl-arm-2005q1-branchpoint:1.7
	binutils-2_16-branch:1.7.0.2
	binutils-2_16-branchpoint:1.7
	csl-arm-2004-q3d:1.6
	csl-arm-2004-q3:1.6
	binutils-2_15:1.6
	binutils-2_15-branchpoint:1.6
	csl-arm-2004-q1a:1.6
	csl-arm-2004-q1:1.6
	binutils-2_15-branch:1.6.0.6
	cagney_bfdfile-20040213-branch:1.6.0.4
	cagney_bfdfile-20040213-branchpoint:1.6
	cagney_bigcore-20040122-branch:1.6.0.2
	cagney_bigcore-20040122-branchpoint:1.6
	csl-arm-2003-q4:1.6
	binutils-2_14:1.5
	binutils-2_14-branch:1.5.0.2
	binutils-2_14-branchpoint:1.5
	binutils-2_13_2_1:1.2.2.1
	binutils-2_13_2:1.2.2.1
	binutils-2_13_1:1.2
	binutils-2_13:1.2
	binutils-2_13-branchpoint:1.2
	binutils-2_13-branch:1.2.0.2
	binutils-2_12_1:1.1
	binutils-2_12:1.1
	binutils-2_12-branch:1.1.0.2
	binutils-2_12-branchpoint:1.1
	binutils_latest_snapshot:1.12;
locks; strict;
comment	@# @;


1.12
date	2013.02.19.01.10.03;	author macro;	state Exp;
branches;
next	1.11;

1.11
date	2009.09.02.07.25.42;	author amodra;	state Exp;
branches;
next	1.10;

1.10
date	2007.07.06.14.09.45;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.15.15.39.48;	author amodra;	state Exp;
branches;
next	1.8;

1.8
date	2005.05.12.07.32.08;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.03.11.52.11;	author amodra;	state Exp;
branches;
next	1.6;

1.6
date	2003.10.13.05.09.21;	author kkojima;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.14.18.45.03;	author sclarke;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.27.19.29.17;	author jakub;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.16.18.45.27;	author sclarke;	state Exp;
branches;
next	1.2;

1.2
date	2002.07.02.23.54.39;	author amodra;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2002.02.08.06.49.58;	author aoliva;	state Exp;
branches;
next	;

1.2.2.1
date	2002.11.13.03.03.46;	author amodra;	state Exp;
branches;
next	;


desc
@@


1.12
log
@	* lib/ld-lib.exp (run_ld_link_tests): Add another argument, pass
	its contents to ar_simple_create and ld_simple_link after
	objfiles.
	* ld-aarch64/aarch64-elf.exp: Adjust accordingly.
	* ld-alpha/alpha.exp: Likewise.
	* ld-arm/arm-elf.exp: Likewise.
	* ld-arm/export-class.exp: Likewise.
	* ld-elf/comm-data.exp: Likewise.
	* ld-elf/eh-group.exp: Likewise.
	* ld-elf/elf.exp: Likewise.
	* ld-elf/export-class.exp: Likewise.
	* ld-elfvers/vers.exp: Likewise.
	* ld-frv/tls.exp: Likewise.
	* ld-i386/export-class.exp: Likewise.
	* ld-i386/i386.exp: Likewise.
	* ld-ia64/ia64.exp: Likewise.
	* ld-libs/libs.exp: Likewise.
	* ld-m68k/m68k.exp: Likewise.
	* ld-metag/metag.exp: Likewise.
	* ld-mips-elf/comm-data.exp: Likewise.
	* ld-mips-elf/export-class.exp: Likewise.
	* ld-mips-elf/mips-elf.exp: Likewise.
	* ld-mn10300/mn10300.exp: Likewise.
	* ld-pe/pe-compile.exp: Likewise.
	* ld-pe/pe.exp: Likewise.
	* ld-plugin/plugin.exp: Likewise.
	* ld-powerpc/aix52.exp: Likewise.
	* ld-powerpc/export-class.exp: Likewise.
	* ld-powerpc/powerpc.exp: Likewise.
	* ld-s390/s390.exp: Likewise.
	* ld-sh/sh-vxworks.exp: Likewise.
	* ld-sh/sh64/sh64.exp: Likewise.
	* ld-sparc/sparc.exp: Likewise.
	* ld-tic6x/tic6x.exp: Likewise.
	* ld-tilegx/tilegx.exp: Likewise.
	* ld-tilepro/tilepro.exp: Likewise.
	* ld-undefined/entry.exp: Likewise.
	* ld-vax-elf/vax-elf.exp: Likewise.
	* ld-x86-64/dwarfreloc.exp: Likewise.
	* ld-x86-64/export-class.exp: Likewise.
	* ld-x86-64/x86-64.exp: Likewise.
	* ld-xc16x/xc16x.exp: Likewise.
	* ld-xstormy16/xstormy16.exp: Likewise.
	* ld-xtensa/xtensa.exp: Likewise.
@
text
@# Expect script for ld-sh tests
#   Copyright (C) 2000, 2001, 2002, 2003, 2005, 2007 Free Software Foundation
#
# This file is part of the GNU Binutils.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
# MA 02110-1301, USA.
#

# Test SH linking; all types of relocs.  This tests the assembler and
# tools like objdump as well as the linker.

if ![istarget sh64-*-*] {
    return
}

if [istarget sh64*-*-linux*] {
    return
}

if { [istarget sh64*-*-netbsd*] || [istarget sh5*-*-netbsd*] } then {
	return
}

# List contains test-items with 3 items followed by 2 lists:
# 0:name 1:ld early options 2:ld late options 3:assembler options
# 4:filenames of assembler files 5: action and options. 6: name of output file

# Actions:
# objdump: Apply objdump options on result.  Compare with regex (last arg).
# nm: Apply nm options on result.  Compare with regex (last arg).
# readelf: Apply readelf options on result.  Compare with regex (last arg).

# Note that the contents dump is the same for "inter-file datalabel
# references, 64-bit ABI" as for 32-bit ABI and ELF so we re-use it.

set sh64tests {
    {"SH64 linking, 64-bit ABI" "-mshelf64" ""
     "--abi=64" {sh64-1.s sh64-2.s}
     {{objdump -sr abi64.sd} {objdump -x abi64.xd}} "abi64.bin" }
    {"SH64 linking, 64-bit ABI, -no-expand" "-mshelf64" ""
     "--abi=64 -no-expand" {sh64-1.s sh64-2.s}
     {{objdump -sr abixx-noexp.sd}} "abi64-noexp.bin" }
    {"SH64 linking, 32-bit ABI" "-mshelf32" ""
     "--abi=32" {sh64-1.s sh64-2.s}
     {{objdump -sr abi32.sd} {objdump -x abi32.xd}} "abi32.bin" }
    {"SH64 linking, 32-bit ABI, -no-expand" "-mshelf32" ""
     "--abi=32 -no-expand" {sh64-1.s sh64-2.s}
     {{objdump -sr abixx-noexp.sd}} "abi32-noexp.bin" }
    {"SH64 linking, single multi-ISA object" "-mshelf32" ""
     "--abi=32" {shmix-1.s}
     {{objdump -sr mix1.sd} {objdump -x mix1.xd}} "mix1.bin" }
    {"SH64 linking, single multi-ISA object, -no-expand" "-mshelf32" ""
     "--abi=32 -no-expand" {shmix-1.s}
     {{objdump -sr mix1-noexp.sd}} "mix1-noexp.bin" }
    {"SH64 linking, two different-ISA objects" "-mshelf32" ""
     "--abi=32" {shmix-2.s shmix-3.s}
     {{objdump -sr mix2.sd} {objdump -x mix2.xd}} "mix2.bin" }
    {"SH64 linking, two different-ISA objects, -no-expand" "-mshelf32" ""
     "--abi=32 -no-expand" {shmix-2.s shmix-3.s}
     {{objdump -sr mix2-noexp.sd}} "mix2-noexp.bin" }
    {"SH64 linking, single SHcompact" "-mshelf32" ""
     "--isa=SHcompact" {shcmp-1.s}
     {{objdump -sr cmpct1.sd} {objdump -x cmpct1.xd}} "cmpct1.bin" }
    {"SH64 inter-file datalabel references, 64-bit ABI" "-mshelf64" ""
     "--abi=64" {shdl-1.s shdl-2.s}
     {{objdump -sr shdl64.sd} {objdump -x shdl64.xd}} "shdl64.bin" }
    {"SH64 inter-file datalabel references, 32-bit ABI" "-mshelf32" ""
     "--abi=32" {shdl-1.s shdl-2.s}
     {{objdump -sr shdl64.sd} {objdump -x shdl32.xd}} "shdl32.bin" }
    {"SH64 inter-file datalabel references and gc-sections, 32-bit ABI" "-mshelf32 --gc-sections" ""
     "--abi=32" {dlsection-1.s }
     {{objdump -sr dlsection.sd}} "dlsection32.bin" }
    {"SH64 inter-file datalabel references and gc-sections, 64-bit ABI" "-mshelf64 --gc-sections" ""
     "--abi=64" {dlsection-1.s }
     {{objdump -sr dlsection.sd}} "dlsection64.bin" }
    {"SH64 simple partial linking, 32-bit ABI" "-mshelf32 -r" ""
     "--abi=32" {rel-1.s rel-2.s}
     {{objdump -sx rel32.xd}} "rel32.bin" }
    {"SH64 simple partial linking, 64-bit ABI" "-mshelf64 -r" ""
     "--abi=64" {rel-1.s rel-2.s}
     {{objdump -sx rel64.xd}} "rel64.bin" }
    {"SH64 partial linking with datalabel references, 32-bit ABI" "-mshelf32 -r" ""
     "--abi=32" {reldl-1.s reldl-2.s}
     {{readelf {-s -r -x 1 -x 3} reldl32.rd}} "reldl32.bin" }
    {"SH64 partial linking with datalabel references, 64-bit ABI" "-mshelf64 -r" ""
     "--abi=64" {reldl-1.s reldl-2.s}
     {{readelf {-s -r -x 1 -x 3} reldl64.rd}} "reldl64.bin" }
    {"Handling SH64 assembler-generated .cranges" "-mshelf32" ""
     "--abi=32" {crange-2a.s crange-1.s}
     {{readelf {-S -s -r -x 1 -x 2 -x 4} crange1.rd}} "crange1.bin" }
    {"Handling SH64 assembler-generated .cranges, partial linking" "-mshelf32 -r" ""
     "--abi=32" {crange-2a.s}
     {{readelf {-S -s -r -x 2 -x 6} crangerel1.rd}} "crangerel1.bin" }
    {"Mixing SH64 assembler-generated with linker-generated .cranges" "-mshelf32" ""
     "--abi=32" {crange-2a.s crange-2b.s crange-1.s}
     {{readelf {-S -s -r -x 2 -x 4} crange2.rd}} "crange2.bin" }
    {"Mixing SH64 assembler-generated with linker-generated .cranges, partial linking"
     "-mshelf32 -r" ""
     "--abi=32" {crange-2a.s crange-2c.s crange-2d.s crange-2e.s}
     {{readelf {-S -s -r -x 2 -x 6} crangerel2.rd}} "crangerel2.bin" }
    {"Merge and use of SH64 .cranges, some not originally in order" "-mshelf32" ""
     "--abi=32"
     {crange-2e.s crange-2f.s crange-2g.s crange-2a.s crange-2d.s crange-2i.s
      crange-2h.s crange-1.s}
      {{readelf {-S -s -x 2 -x 4} crange3.rd} {objdump -d crange3.dd}} "crange3.bin" }
    {"Sorted SH64 .cranges, entry at SHcompact code" "-mshelf32 --entry diversion" ""
     "--abi=32"
     {crange-2e.s crange-2f.s crange-2g.s crange-2a.s crange-2d.s crange-2i.s
      crange-2h.s crange-1.s}
      {{readelf {-h -S -s -x 2 -x 4} crange3-cmpct.rd}} "crange3-cmpct.bin" }
    {"Sorted SH64 .cranges, entry at SHmedia code" "-mshelf32 --entry diversion2" ""
     "--abi=32"
     {crange-2e.s crange-2f.s crange-2g.s crange-2a.s crange-2d.s crange-2i.s
      crange-2h.s crange-1.s}
      {{readelf {-h -S -s -x 2 -x 4} crange3-media.rd}} "crange3-media.bin" }
    {"SH64 Big Endianness" "-mshelf64 -Tendian.ld" ""
     "--abi=64" {endian.s}
     {{objdump -s endian.sbd} {objdump -d endian.dbd}} "endianb.bin" }
    {"SH64 Little Endianness" "-mshlelf64 -Tendian.ld" ""
     "--abi=64 --little" {endian.s}
     {{objdump -s endian.sld} {objdump -d endian.dld}} "endinanl.bin" }
}

run_ld_link_tests $sh64tests
@


1.11
log
@update copyright dates
@
text
@d38 2
a39 2
# 0:name 1:ld options 2:assembler options
# 3:filenames of assembler files 4: action and options. 5: name of output file
d50 1
a50 1
    {"SH64 linking, 64-bit ABI" "-mshelf64"
d53 1
a53 1
    {"SH64 linking, 64-bit ABI, -no-expand" "-mshelf64"
d56 1
a56 1
    {"SH64 linking, 32-bit ABI" "-mshelf32"
d59 1
a59 1
    {"SH64 linking, 32-bit ABI, -no-expand" "-mshelf32"
d62 1
a62 1
    {"SH64 linking, single multi-ISA object" "-mshelf32"
d65 1
a65 1
    {"SH64 linking, single multi-ISA object, -no-expand" "-mshelf32"
d68 1
a68 1
    {"SH64 linking, two different-ISA objects" "-mshelf32"
d71 1
a71 1
    {"SH64 linking, two different-ISA objects, -no-expand" "-mshelf32"
d74 1
a74 1
    {"SH64 linking, single SHcompact" "-mshelf32"
d77 1
a77 1
    {"SH64 inter-file datalabel references, 64-bit ABI" "-mshelf64"
d80 1
a80 1
    {"SH64 inter-file datalabel references, 32-bit ABI" "-mshelf32"
d83 1
a83 1
    {"SH64 inter-file datalabel references and gc-sections, 32-bit ABI" "-mshelf32 --gc-sections"
d86 1
a86 1
    {"SH64 inter-file datalabel references and gc-sections, 64-bit ABI" "-mshelf64 --gc-sections"
d89 1
a89 1
    {"SH64 simple partial linking, 32-bit ABI" "-mshelf32 -r"
d92 1
a92 1
    {"SH64 simple partial linking, 64-bit ABI" "-mshelf64 -r"
d95 1
a95 1
    {"SH64 partial linking with datalabel references, 32-bit ABI" "-mshelf32 -r"
d98 1
a98 1
    {"SH64 partial linking with datalabel references, 64-bit ABI" "-mshelf64 -r"
d101 1
a101 1
    {"Handling SH64 assembler-generated .cranges" "-mshelf32"
d104 1
a104 1
    {"Handling SH64 assembler-generated .cranges, partial linking" "-mshelf32 -r"
d107 1
a107 1
    {"Mixing SH64 assembler-generated with linker-generated .cranges" "-mshelf32"
d111 1
a111 1
     "-mshelf32 -r"
d114 1
a114 1
    {"Merge and use of SH64 .cranges, some not originally in order" "-mshelf32"
d119 1
a119 1
    {"Sorted SH64 .cranges, entry at SHcompact code" "-mshelf32 --entry diversion"
d124 1
a124 1
    {"Sorted SH64 .cranges, entry at SHmedia code" "-mshelf32 --entry diversion2"
d129 1
a129 1
    {"SH64 Big Endianness" "-mshelf64 -Tendian.ld"
d132 1
a132 1
    {"SH64 Little Endianness" "-mshlelf64 -Tendian.ld"
@


1.10
log
@Update sources to GPLv3
@
text
@d2 1
a2 1
#   Copyright (C) 2000, 2001, 2002, 2003, 2007 Free Software Foundation
@


1.9
log
@Adjust for dynamic sym changes.
@
text
@d2 1
a2 1
#   Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation
d4 3
a6 1
# This file is free software; you can redistribute it and/or modify
d8 1
a8 1
# the Free Software Foundation; either version 2 of the License, or
d18 2
a19 1
# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.
@


1.8
log
@Update FSF addresses
@
text
@d100 1
a100 1
     {{readelf {-S -s -r -x 1 -x 2 -x 9} crange1.rd}} "crange1.bin" }
d106 1
a106 1
     {{readelf {-S -s -r -x 2 -x 9} crange2.rd}} "crange2.bin" }
d115 1
a115 1
      {{readelf {-S -s -x 2 -x 9} crange3.rd} {objdump -d crange3.dd}} "crange3.bin" }
d120 1
a120 1
      {{readelf {-h -S -s -x 2 -x 9} crange3-cmpct.rd}} "crange3-cmpct.bin" }
d125 1
a125 1
      {{readelf {-h -S -s -x 2 -x 9} crange3-media.rd}} "crange3-media.bin" }
@


1.7
log
@update copyright dates
@
text
@d16 1
a16 1
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
@


1.6
log
@[ld]
	* emulparams/shelf32_nbsd.sh (OTHER_SECTIONS): Redefine.

[ld/testsuite]
	* ld-sh/rd-sh.exp (LDFLAGS): Define appropriately for each
	sh64/sh5 targets.
	* ld-sh/sh.exp: Don't do relaxing test for sh64*-*-* and
	sh5*-*-* targets.
	* ld-sh/sh64/relax.exp (emul32): Set to shelf32_nbsd for netbsd.
	* ld-sh/sh64/relfail.exp: Set parameters for netbsd.
	* ld-sh/sh64/sh64.exp: Skip this for netbsd.  Trim the section
	numbers for crangerel1 and crengerel2 tests.
	* ld-sh/sh64/abi32.sd: Update.
	* ld-sh/sh64/abi32.xd: Likewise.
	* ld-sh/sh64/abi64.sd: Likewise.
	* ld-sh/sh64/abi64.xd: Likewise.
	* ld-sh/sh64/abixx-noexp.sd: Likewise.
	* ld-sh/sh64/cmpct1.sd: Likewise.
	* ld-sh/sh64/cmpct1.xd: Likewise.
	* ld-sh/sh64/crange1.rd: Likewise.
	* ld-sh/sh64/crange2.rd: Likewise.
	* ld-sh/sh64/crange3-cmpct.rd: Likewise.
	* ld-sh/sh64/crange3-media.rd: Likewise.
	* ld-sh/sh64/crange3.rd: Likewise.
	* ld-sh/sh64/crangerel1.rd: Likewise.
	* ld-sh/sh64/crangerel2.rd: Likewise.
	* ld-sh/sh64/dlsection.sd: Likewise.
	* ld-sh/sh64/endian.sbd: Likewise.
	* ld-sh/sh64/endian.sld: Likewise.
	* ld-sh/sh64/gotplt.d: Likewise.
	* ld-sh/sh64/init-cmpct.d: Likewise.
	* ld-sh/sh64/init-media.d: Likewise.
	* ld-sh/sh64/init.s: Align functions.
	* ld-sh/sh64/init64.d: Update.
	* ld-sh/sh64/mix1-noexp.sd: Likewise.
	* ld-sh/sh64/mix1.sd: Likewise.
	* ld-sh/sh64/mix1.xd: Likewise.
	* ld-sh/sh64/mix2-noexp.sd: Likewise.
	* ld-sh/sh64/mix2.sd: Likewise.
	* ld-sh/sh64/mix2.xd:Likewise.
	* ld-sh/sh64/rel32.xd: Likewise.
	* ld-sh/sh64/rel64.xd: Likewise.
	* ld-sh/sh64/reldl32.rd: Likewise.
	* ld-sh/sh64/reldl64.rd: Likewise.
	* ld-sh/sh64/shdl32.xd: Update.
	* ld-sh/sh64/shdl64.sd: Likewise.
	* ld-sh/sh64/shdl64.xd: Likewise.
	* ld-sh/shared-1.d: Add -z nocombreloc to ld option.  Update.
	* ld-sh/sub2l-1.d: Make file format match with elf32-sh.*.
	* ld-sh/weak1.d: Likewise.
@
text
@d2 1
a2 1
#   Copyright (C) 2000, 2001, 2002 Free Software Foundation
@


1.5
log
@ld-sh/ld-r-1.d: Disable for sh64*-*-linux*.
* ld-sh/sh64/sh64.exp: Likewise.
* ld-sh/sh.exp: Disable relaxing tests for sh64*-*-linux*.
* ld-sh/sh64/abi32.sd: Adjust expected output to include
sh64*-*-linux* formats too.
* ld-sh/sh64/relax.exp: Add emul32 variable to hold target
emulation, and set it appropriately for sh*-*-linux*.
* ld-sh/sh64/relfail.exp: Add variables to hold target
emulation, output format, start symbol, and whether target
supports 64-bit ABI.  Set appropriately for sh*-*-linux*.
@
text
@d30 4
d103 1
a103 1
     {{readelf {-S -s -r -x 2 -x 5} crangerel1.rd}} "crangerel1.bin" }
d110 1
a110 1
     {{readelf {-S -s -r -x 2 -x 5} crangerel2.rd}} "crangerel2.bin" }
@


1.4
log
@bfd/
	* reloc.c: Add x86-64 TLS relocs.
	* bfd-in2.h, libbfd.h: Rebuilt.
	* elf64-x86-64.c (x86_64_elf_howto): Fix size fields for 32-bit
	relocs.  Add TLS relocs.
	(x86_64_reloc_map): Add TLS relocs.
	(elf64_x86_64_info_to_howto): Adjust for added TLS relocs.
	(struct elf64_x86_64_link_hash_entry): Add tls_type field.
	(GOT_UNKNOWN, GOT_NORMAL, GOT_TLS_GD, GOT_TLS_IE): Define.
	(elf64_x86_64_hash_entry): Define.
	(struct elf64_x86_64_obj_tdata): New.
	(elf64_x86_64_tdata, elf64_x86_64_local_got_tls_type): Define.
	(struct elf64_x86_64_link_hash_table): Add tls_ld_got.
	(link_hash_newfunc): Initialize tls_type.
	(elf64_x86_64_link_hash_table_create): Initialize tls_ld_got.
	(elf64_x86_64_copy_indirect_symbol): Swap tls_type if necessary.
	(elf64_x86_64_mkobject): New.
	(elf64_x86_64_elf_object_p): Allocate struct elf64_x86_64_obj_tdata.
	(elf64_x86_64_tls_transition): New.
	(elf64_x86_64_check_relocs): Add r_type variable and use it.
	Handle TLS relocs.
	(elf64_x86_64_gc_sweep_hook): Handle TLS relocs.
	(allocate_dynrelocs): Allocate GOT space for TLS relocs.
	(elf64_x86_64_size_dynamic_sections): Likewise.
	(dtpoff_base, tpoff): New.
	(elf64_x86_64_relocate_section): Handle TLS relocs.
	(elf64_x86_64_finish_dynamic_symbol): Only handle non-TLS GOT
	entries.
	(bfd_elf64_mkobject): Define.

	* elf32-i386.c (elf_i386_check_relocs) [R_386_TLS_LE]: Set
	DF_STATIC_TLS if shared.
gas/
	* config/tc-i386.c (tc_i386_fix_adjustable): Add x86-64 TLS relocs.
	Define them if not BFD_ASSEMBLER.
	(lex_got): Handle @@tlsgd, @@dtpoff and @@tpoff in 64-bit mode, add
	@@tlsld.
	(md_apply_fix3): No addend for BFD_RELOC_X86_64_TLSGD,
	BFD_RELOC_X86_64_TLSLD and BFD_RELOC_X86_64_GOTTPOFF.
	(tc_gen_reloc): Handle x86-64 TLS relocs.
include/
	* elf/x86-64.h: Add TLS relocs.
ld/testsuite/
	* lib/ld-lib.exp (run_ld_link_tests): Add.
	* ld-sh/sh64/sh64.exp (run_ld_link_tests, regexp_diff,
	file_contents): Remove.
	(sh64tests): Add 6th field to the tests array.
	* ld-i386/i386.exp (run_ld_link_tests): Remove.
	* ld-x86-64/x86-64.exp: New.
	* ld-x86-64/tlsbin.dd: New test.
	* ld-x86-64/tlsbinpic.s: New test.
	* ld-x86-64/tlsbin.rd: New test.
	* ld-x86-64/tlsbin.s: New test.
	* ld-x86-64/tlsbin.sd: New test.
	* ld-x86-64/tlsbin.td: New test.
	* ld-x86-64/tlslib.s: New test.
	* ld-x86-64/tlspic1.s: New test.
	* ld-x86-64/tlspic2.s: New test.
	* ld-x86-64/tlspic.dd: New test.
	* ld-x86-64/tlspic.rd: New test.
	* ld-x86-64/tlspic.sd: New test.
	* ld-x86-64/tlspic.td: New test.
@
text
@d26 4
@


1.3
log
@	* ld-sh/sh64/sh64.exp: Add dlsection.
	* ld-sh/sh64/dlsection-1.s, ld-sh/sh64/dlsection.sd: New.
@
text
@a25 5
# FIXME: This isn't set by testsuite/config/default.exp; make it.
if ![info exists readelf] then {
    set readelf [findfile $base_dir/../binutils/readelf]
}

d28 1
a28 1
# 3:filenames of assembler files 4: action and options.
d33 1
d41 1
a41 1
     {{objdump -sr abi64.sd} {objdump -x abi64.xd}}}
d44 1
a44 1
     {{objdump -sr abixx-noexp.sd}}}
d47 1
a47 1
     {{objdump -sr abi32.sd} {objdump -x abi32.xd}}}
d50 1
a50 1
     {{objdump -sr abixx-noexp.sd}}}
d53 1
a53 1
     {{objdump -sr mix1.sd} {objdump -x mix1.xd}}}
d56 1
a56 1
     {{objdump -sr mix1-noexp.sd}}}
d59 1
a59 1
     {{objdump -sr mix2.sd} {objdump -x mix2.xd}}}
d62 1
a62 1
     {{objdump -sr mix2-noexp.sd}}}
d65 1
a65 1
     {{objdump -sr cmpct1.sd} {objdump -x cmpct1.xd}}}
d68 1
a68 1
     {{objdump -sr shdl64.sd} {objdump -x shdl64.xd}}}
d71 1
a71 1
     {{objdump -sr shdl64.sd} {objdump -x shdl32.xd}}}
d74 1
a74 1
     {{objdump -sr dlsection.sd}}}
d77 1
a77 1
     {{objdump -sr dlsection.sd}}}
d80 1
a80 1
     {{objdump -sx rel32.xd}}}
d83 1
a83 1
     {{objdump -sx rel64.xd}}}
d86 1
a86 1
     {{readelf {-s -r -x 1 -x 3} reldl32.rd}}}
d89 1
a89 1
     {{readelf {-s -r -x 1 -x 3} reldl64.rd}}}
d92 1
a92 1
     {{readelf {-S -s -r -x 1 -x 2 -x 9} crange1.rd}}}
d95 1
a95 1
     {{readelf {-S -s -r -x 2 -x 5} crangerel1.rd}}}
d98 1
a98 1
     {{readelf {-S -s -r -x 2 -x 9} crange2.rd}}}
d102 1
a102 1
     {{readelf {-S -s -r -x 2 -x 5} crangerel2.rd}}}
d107 1
a107 1
      {{readelf {-S -s -x 2 -x 9} crange3.rd} {objdump -d crange3.dd}}}
d112 1
a112 1
      {{readelf {-h -S -s -x 2 -x 9} crange3-cmpct.rd}}}
d117 1
a117 1
      {{readelf {-h -S -s -x 2 -x 9} crange3-media.rd}}}
d120 1
a120 1
     {{objdump -s endian.sbd} {objdump -d endian.dbd}}}
d123 1
a123 235
     {{objdump -s endian.sld} {objdump -d endian.dld}}}

}

# FIXME: Generalize and move this to ld-lib.exp

proc run_ld_link_tests { ldtests } {
    global ld
    global as
    global nm
    global objdump
    global readelf
    global srcdir
    global subdir
    global env

    set binfile "tmpdir/linked"

    foreach testitem $ldtests {
	set testname [lindex $testitem 0]
	set ld_options [lindex $testitem 1]
	set as_options [lindex $testitem 2]
	set as_files  [lindex $testitem 3]
	set actions [lindex $testitem 4]
	set objfiles {}
	set is_unresolved 0
	set failed 0

#	verbose -log "Testname is $testname"
#	verbose -log "ld_options is $ld_options"
#	verbose -log "as_options is $as_options"
#	verbose -log "as_files is $as_files"
#	verbose -log "actions is $actions"

	# Assemble each file in the test.
	foreach as_file $as_files {
	    set objfile "tmpdir/[file rootname $as_file].o"
	    lappend objfiles $objfile

	    if ![ld_assemble $as "$as_options $srcdir/$subdir/$as_file" $objfile] {
		set is_unresolved 1
		break
	    }
	}

	# Catch assembler errors.
	if { $is_unresolved != 0 } {
	    unresolved $testname
	    continue
	}

	if ![ld_simple_link $ld $binfile "-L$srcdir/$subdir $ld_options $objfiles"] {
	    fail $testname
	} else {
	    set failed 0
	    foreach actionlist $actions {
		set action [lindex $actionlist 0]
		set progopts [lindex $actionlist 1]

		# There are actions where we run regexp_diff on the
		# output, and there are other actions (presumably).
		# Handling of the former look the same.
		set dump_prog ""
		switch -- $action {
		    objdump
		        { set dump_prog $objdump }
		    nm
		        { set dump_prog $nm }
		    readelf
		        { set dump_prog $readelf }
		    default
			{
			    perror "Unrecognized action $action"
			    set is_unresolved 1
			    break
			}
		    }

		if { $dump_prog != "" } {
		    set dumpfile [lindex $actionlist 2]
		    set binary $dump_prog

		    # Ensure consistent sorting of symbols
		    if {[info exists env(LC_ALL)]} {
			set old_lc_all $env(LC_ALL)
		    }
		    set env(LC_ALL) "C"
		    set cmd "$binary $progopts $binfile > dump.out"
		    send_log "$cmd\n"
		    catch "exec $cmd" comp_output
		    if {[info exists old_lc_all]} {
			set env(LC_ALL) $old_lc_all
		    } else {
			unset env(LC_ALL)
		    }
		    set comp_output [prune_warnings $comp_output]

		    if ![string match "" $comp_output] then {
			send_log "$comp_output\n"
			set failed 1
			break
		    }

		    if { [regexp_diff "dump.out" "$srcdir/$subdir/$dumpfile"] } then {
			verbose "output is [file_contents "dump.out"]" 2
			set failed 1
			break
		    }
		}
	    }

	    if { $failed != 0 } {
		fail $testname
	    } else { if { $is_unresolved == 0 } {
		pass $testname
	    } }
	}

	# Catch action errors.
	if { $is_unresolved != 0 } {
	    unresolved $testname
	    continue
	}
    }
}

# FIXME: Move this to ld-lib.exp or higher up.

# regexp_diff, based on simple_diff taken from ld test suite
#	compares two files line-by-line
#	file1 contains strings, file2 contains regexps and #-comments
#	blank lines are ignored in either file
#	returns non-zero if differences exist
#
proc regexp_diff { file_1 file_2 } {

    set eof -1
    set end_1 0
    set end_2 0
    set differences 0
    set diff_pass 0

    if [file exists $file_1] then {
	set file_a [open $file_1 r]
    } else {
	warning "$file_1 doesn't exist"
	return 1
    }

    if [file exists $file_2] then {
	set file_b [open $file_2 r]
    } else {
	fail "$file_2 doesn't exist"
	close $file_a
	return 1
    }

    verbose " Regexp-diff'ing: $file_1 $file_2" 2

    while { 1 } {
	set line_a ""
	set line_b ""
	while { [string length $line_a] == 0 } {
	    if { [gets $file_a line_a] == $eof } {
		set end_1 1
		break
	    }
	}
	while { [string length $line_b] == 0 || [string match "#*" $line_b] } {
	    if [ string match "#pass" $line_b ] {
		set end_2 1
		set diff_pass 1
		break
	    } elseif [ string match "#..." $line_b ] {
		if { [gets $file_b line_b] == $eof } {
		    set end_2 1
		    break
		}
		verbose "looking for \"^$line_b$\"" 3
		while { ![regexp "^$line_b$" "$line_a"] } {
		    verbose "skipping    \"$line_a\"" 3
		    if { [gets $file_a line_a] == $eof } {
			set end_1 1
			break
		    }
		}
		break
	    }
	    if { [gets $file_b line_b] == $eof } {
		set end_2 1
		break
	    }
	}

        if { $diff_pass } {
            break
        } elseif { $end_1 && $end_2 } {
            break
        } elseif { $end_1 } {
            send_log "extra regexps in $file_2 starting with \"^$line_b$\"\nEOF from $file_1\n"
            verbose "extra regexps in $file_2 starting with \"^$line_b$\"\nEOF from $file_1" 3
            set differences 1
            break
        } elseif { $end_2 } {
            send_log "extra lines in $file_1 starting with \"^$line_a$\"\nEOF from $file_2\n"
            verbose "extra lines in $file_1 starting with \"^$line_a$\"\nEOF from $file_2\n" 3
            set differences 1
            break
        } else {
            verbose "regexp \"^$line_b$\"\nline   \"$line_a\"" 3
            if ![regexp "^$line_b$" "$line_a"] {
		send_log "regexp_diff match failure\n"
		send_log "regexp \"^$line_b$\"\nline   \"$line_a\"\n"
		set differences 1
            }
        }
    }

    if { $differences == 0 && !$diff_pass && [eof $file_a] != [eof $file_b] } {
	send_log "$file_1 and $file_2 are different lengths\n"
	verbose "$file_1 and $file_2 are different lengths" 3
	set differences 1
    }

    close $file_a
    close $file_b

    return $differences
}

proc file_contents { filename } {
    set file [open $filename r]
    set contents [read $file]
    close $file
    return $contents
@


1.2
log
@	* lib/ld-lib.exp (default_ld_nm): Run nm with LC_ALL=C to ensure
	consistent sorting.
	(run_dump_test): Likewise for objdump/nm/objcopy/readelf.
	* ld-sh/sh64/sh64.exp (run_ld_link_tests): Likewise.
@
text
@d76 6
@


1.2.2.1
log
@	Merge from mainline:
	2002-11-11  Hans-Peter Nilsson  <hp@@axis.com>
	* lib/ld-lib.exp (run_dump_test): Don't prepend "$srcdir/$subdir/"
	to a source file starting with "/".

	2002-09-27  Jakub Jelinek  <jakub@@redhat.com>
	* lib/ld-lib.exp (run_ld_link_tests): Add.
	* ld-sh/sh64/sh64.exp (run_ld_link_tests, regexp_diff,
	file_contents): Remove.
	(sh64tests): Add 6th field to the tests array.
	* ld-i386/i386.exp (run_ld_link_tests): Remove.
@
text
@d26 5
d33 1
a33 1
# 3:filenames of assembler files 4: action and options. 5: name of output file
a37 1
# readelf: Apply readelf options on result.  Compare with regex (last arg).
d45 1
a45 1
     {{objdump -sr abi64.sd} {objdump -x abi64.xd}} "abi64.bin" }
d48 1
a48 1
     {{objdump -sr abixx-noexp.sd}} "abi64-noexp.bin" }
d51 1
a51 1
     {{objdump -sr abi32.sd} {objdump -x abi32.xd}} "abi32.bin" }
d54 1
a54 1
     {{objdump -sr abixx-noexp.sd}} "abi32-noexp.bin" }
d57 1
a57 1
     {{objdump -sr mix1.sd} {objdump -x mix1.xd}} "mix1.bin" }
d60 1
a60 1
     {{objdump -sr mix1-noexp.sd}} "mix1-noexp.bin" }
d63 1
a63 1
     {{objdump -sr mix2.sd} {objdump -x mix2.xd}} "mix2.bin" }
d66 1
a66 1
     {{objdump -sr mix2-noexp.sd}} "mix2-noexp.bin" }
d69 1
a69 1
     {{objdump -sr cmpct1.sd} {objdump -x cmpct1.xd}} "cmpct1.bin" }
d72 1
a72 1
     {{objdump -sr shdl64.sd} {objdump -x shdl64.xd}} "shdl64.bin" }
d75 1
a75 1
     {{objdump -sr shdl64.sd} {objdump -x shdl32.xd}} "shdl32.bin" }
d78 1
a78 1
     {{objdump -sx rel32.xd}} "rel32.bin" }
d81 1
a81 1
     {{objdump -sx rel64.xd}} "rel64.bin" }
d84 1
a84 1
     {{readelf {-s -r -x 1 -x 3} reldl32.rd}} "reldl32.bin" }
d87 1
a87 1
     {{readelf {-s -r -x 1 -x 3} reldl64.rd}} "reldl64.bin" }
d90 1
a90 1
     {{readelf {-S -s -r -x 1 -x 2 -x 9} crange1.rd}} "crange1.bin" }
d93 1
a93 1
     {{readelf {-S -s -r -x 2 -x 5} crangerel1.rd}} "crangerel1.bin" }
d96 1
a96 1
     {{readelf {-S -s -r -x 2 -x 9} crange2.rd}} "crange2.bin" }
d100 1
a100 1
     {{readelf {-S -s -r -x 2 -x 5} crangerel2.rd}} "crangerel2.bin" }
d105 1
a105 1
      {{readelf {-S -s -x 2 -x 9} crange3.rd} {objdump -d crange3.dd}} "crange3.bin" }
d110 1
a110 1
      {{readelf {-h -S -s -x 2 -x 9} crange3-cmpct.rd}} "crange3-cmpct.bin" }
d115 1
a115 1
      {{readelf {-h -S -s -x 2 -x 9} crange3-media.rd}} "crange3-media.bin" }
d118 1
a118 1
     {{objdump -s endian.sbd} {objdump -d endian.dbd}} "endianb.bin" }
d121 235
a355 1
     {{objdump -s endian.sld} {objdump -d endian.dld}} "endinanl.bin" }
@


1.1
log
@Contribute sh64-elf.
2002-02-02  Alexandre Oliva  <aoliva@@redhat.com>
* ld-sh/sh64/crange3-cmpct.rd: Adjust offsets.
* ld-sh/sh64/crange3-media.rd: Likewise.
* ld-sh/sh64/crange3.rd: Likewise.
* ld-sh/sh64/crangerel1.rd: Likewise.
* ld-sh/sh64/crangerel2.rd: Likewise.
* ld-sh/sh64/reldl32.rd: Likewise.
* ld-sh/sh64/reldl64.rd: Likewise.
2002-01-28  Alexandre Oliva  <aoliva@@redhat.com>
* ld-sh/sh64/abi32.xd: Formatting changes to match the current
output of objdump.
* ld-sh/sh64/cmpct1.xd: Likewise.
* ld-sh/sh64/crange1.rd: Likewise.
* ld-sh/sh64/crange2.rd: Likewise.
* ld-sh/sh64/crange3-cmpct.rd: Likewise.
* ld-sh/sh64/crange3-media.rd: Likewise.
* ld-sh/sh64/crange3.rd: Likewise.
* ld-sh/sh64/crangerel1.rd: Likewise.
* ld-sh/sh64/crangerel2.rd: Likewise.
* ld-sh/sh64/mix1.xd: Likewise.
* ld-sh/sh64/mix2.xd: Likewise.
* ld-sh/sh64/rel32.xd: Likewise.
* ld-sh/sh64/reldl32.rd: Likewise.
* ld-sh/sh64/reldl64.rd: Likewise.
* ld-sh/sh64/sh64.exp: Likewise.  Reordered cranges and stack
sessions, to match changes in the linker script.
2001-06-14  Alexandre Oliva  <aoliva@@redhat.com>
* ld-sh/sh64/reldl32.rd, ld-sh/sh64/reldl64.rd: Adjust relocation
info to reflect renumbering of relocation types.
2001-03-14  DJ Delorie	<dj@@redhat.com>
* ld-sh/sh64/endian.dbd: New file, endian tests.
* ld-sh/sh64/endian.dld: Ditto.
* ld-sh/sh64/endian.ld:	 Ditto.
* ld-sh/sh64/endian.s:	Ditto.
* ld-sh/sh64/endian.sbd:  Ditto.
* ld-sh/sh64/endian.sld:  Ditto.
* ld-sh/sh64/sh64.exp: Add above tests.	 Add -L option to ld.
2001-03-12  DJ Delorie	<dj@@redhat.com>
* ld-sh/sh64/relax.exp: New file, test disabling relaxing.
* ld-sh/sh64/relax1.s: Ditto.
* ld-sh/sh64/relax2.s: Ditto.
* ld-sh/sh64/relax3.s: Ditto.
* ld-sh/sh64/relax4.s: Ditto.
* ld-sh/sh64/relfail.exp: New file, test for bogus relocs.
* ld-sh/sh64/relfail.s: Ditto.
2001-03-12  DJ Delorie	<dj@@redhat.com>
* ld-sh/sh.exp: This test isn't appropriate for SH64 since it
uses SH32 assembler files.
2001-03-07  DJ Delorie	<dj@@redhat.com>
* ld-selective/selective.exp: Pass "-e _start" for sh64 to
accomodate expected start symbol in test.
2001-03-06  DJ Delorie	<dj@@redhat.com>
* ld-scripts/crossref.exp: Pass -mshelf32 to the linker for sh64,
to match what gcc passes to the linker by default.
* ld-selective/selective.exp: Ditto.
* ld-srec/srec.exp: Ditto, plus XFAIL for sh64.
* ld-undefined/undefined.exp: Add XFAIL for sh64 (it's dwarf2).
2001-03-06  DJ Delorie	<dj@@redhat.com>
* ld-sh/sh64/abi32.xd (stack): Adjust for new default stack layout.
* ld-sh/sh64/abi64.xd (stack): Ditto.
* ld-sh/sh64/cmpct1.xd (stack): Ditto.
* ld-sh/sh64/crange1.rd (stack): Ditto.
* ld-sh/sh64/crange2.rd (stack): Ditto.
* ld-sh/sh64/crange3-cmpct.rd (stack): Ditto.
* ld-sh/sh64/crange3-media.rd (stack): Ditto.
* ld-sh/sh64/crange3.rd (stack): Ditto.
* ld-sh/sh64/mix1.xd (stack): Ditto.
* ld-sh/sh64/mix2.xd (stack): Ditto.
* ld-sh/sh64/shdl32.xd (stack): Ditto.
* ld-sh/sh64/shdl64.xd (stack): Ditto.
2001-01-14  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/mix1.xd: Add SORT_ENTRIES for .cranges section.
* ld-sh/sh64/mix2.xd: Ditto.
2001-01-08  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/abi32.xd: Adjust for bit 0 set on an entry address
being SHmedia.
* ld-sh/sh64/shdl64.xd: Ditto.
* ld-sh/sh64/shdl32.xd: Ditto.
* ld-sh/sh64/mix2.xd: Ditto.
* ld-sh/sh64/crange3-media.rd: Ditto.
* ld-sh/sh64/abi64.xd: Ditto.
2001-01-06  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/crange-2a.s (diversion2): New global symbol.
* ld-sh/sh64/crange1.rd: Adjust to presence of new symbol.
Adjust section type for .cranges; expect sorted contents.
* ld-sh/sh64/crange2.rd: Ditto.
* ld-sh/sh64/crange3.dd, ld-sh/sh64/crange3.rd: Ditto.
* ld-sh/sh64/crangerel1.rd: Adjust to presence of new symbol.
* ld-sh/sh64/crangerel2.rd: Ditto.
* ld-sh/sh64/mix1.xd: Adjust to DEBUGGING being set for .cranges.
* ld-sh/sh64/mix2.xd: Ditto.
* ld-sh/sh64/crange3-cmpct.rd, ld-sh/sh64/crange3-media.rd: New
tests.
* ld-sh/sh64/sh64.exp: Tweak test message.  Run new tests.
2001-01-05  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/shmix-1.s (start2): Add a NOP to provide a valid
target for (unexpanded) PTB.  Add an .align 2 to SHmedia code to
keep properly aligned.
* ld-sh/sh64/mix1.sd, ld-sh/sh64/mix1.xd: Adjust accordingly.
* ld-sh/sh64/mix1-noexp.sd, ld-sh/sh64/mix2-noexp.sd,
ld-sh/sh64/abixx-noexp.sd: New tests for GAS -no-expand and
R_SH_PT_16 relocation.
* ld-sh/sh64/sh64.exp: Run new tests.
2000-12-30  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/crange-2f.s, ld-sh/sh64/crange-2g.s,
ld-sh/sh64/crange-2h.s, ld-sh/sh64/crange-2i.s,
ld-sh/sh64/crange3.dd, ld-sh/sh64/crange3.rd: New tests.
* ld-sh/sh64/sh64.exp: Run new tests.
* ld-sh/sh64/crange1.rd: Correct section flags.
* ld-sh/sh64/crange2.rd: Ditto.
* ld-sh/sh64/crangerel1.rd: Ditto.
2000-12-18  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/crange-1.s, ld-sh/sh64/crange-2a.s,
ld-sh/sh64/crange-2b.s, ld-sh/sh64/crange-2c.s,
ld-sh/sh64/crange-2d.s, ld-sh/sh64/crange-2e.s,
ld-sh/sh64/crange1.rd, ld-sh/sh64/crange2.rd,
ld-sh/sh64/crangerel1.rd, ld-sh/sh64/crangerel2.rd: New tests for
handling .cranges section.
* ld-sh/sh64/sh64.exp: Run new tests.
* ld-sh/sh64/mix1.sd, ld-sh/sh64/mix1.xd, ld-sh/sh64/mix2.sd,
ld-sh/sh64/mix2.xd: Adjust for .cranges section.
2000-12-15  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/abi32.sd, ld-sh/sh64/abi32.xd, ld-sh/sh64/abi64.sd,
ld-sh/sh64/abi64.xd, ld-sh/sh64/cmpct1.xd, ld-sh/sh64/mix1.sd,
ld-sh/sh64/mix1.xd, ld-sh/sh64/mix2.sd, ld-sh/sh64/mix2.xd,
ld-sh/sh64/shdl32.xd, ld-sh/sh64/shdl64.xd: Adjust to .bss and
.data individually 8-byte aligned.
2000-12-09  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/rel-1.s, ld-sh/sh64/rel-2.s, ld-sh/sh64/rel32.xd,
ld-sh/sh64/rel64.xd, ld-sh/sh64/reldl-1.s, ld-sh/sh64/reldl-2.s,
ld-sh/sh64/reldl32.rd, ld-sh/sh64/reldl64.rd: New tests.
* ld-sh/sh64/sh64.exp: Make it possible to use readelf as
inspection tool.  Run new tests.
2000-12-07  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/abi64.sd, ld-sh/sh64/abi32.sd, ld-sh/sh64/mix1.sd,
ld-sh/sh64/mix2.sd: Correct offsets in PT/PTA/PTB expansions.
* ld-sh/sh64/shdl-1.s, ld-sh/sh64/shdl-2.s, ld-sh/sh64/shdl64.sd,
ld-sh/sh64/shdl64.xd, ld-sh/sh64/shdl32.xd: New tests.
* ld-sh/sh64/sh64.exp: Run new tests.
2000-12-01  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/cmpct1.sd, ld-sh/sh64/cmpct1.xd,
ld-sh/sh64/shcmp-1.s: New test.
* ld-sh/sh64/sh64.exp: Add new test to sh64tests.  Reformat.
2000-11-30  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/sh64.exp: Use linker option -mshelf64 for 64-bit ABI
test.
* ld-sh/sh64/abi64.xd: Tweak for 64-bit ELF.
2000-11-29  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/sh64.exp (sh64tests): Use linker option -mshelf32 for
tests.
2000-11-27  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64/abi32.sd, ld-sh/sh64/abi64.sd: Correct MOVI
registers.
* ld-sh/sh64/mix1.sd, ld-sh/sh64/mix1.xd, ld-sh/sh64/shmix-1.s:
New test.
* ld-sh/sh64/mix2.sd, ld-sh/sh64/mix2.xd, ld-sh/sh64/shmix-2.s,
ld-sh/sh64/shmix-3.s: New test.
* ld-sh/sh64/sh64.exp: Add new tests to sh64tests.
2000-11-26  Hans-Peter Nilsson	<hpn@@cygnus.com>
* ld-sh/sh64: New testsuite.
@
text
@d8 1
a8 1
# 
d13 1
a13 1
# 
d122 1
a122 1
    
d135 1
d203 13
a215 2
		    send_log "$binary $progopts $binfile > dump.out\n"
		    catch "exec $binary $progopts $binfile > dump.out" comp_output
d315 3
a317 3
        if { $diff_pass } { 
            break 
        } elseif { $end_1 && $end_2 } { 
@

