head	1.11;
access;
symbols
	binutils-2_24-branch:1.11.0.14
	binutils-2_24-branchpoint:1.11
	binutils-2_21_1:1.11
	binutils-2_23_2:1.11
	binutils-2_23_1:1.11
	binutils-2_23:1.11
	binutils-2_23-branch:1.11.0.12
	binutils-2_23-branchpoint:1.11
	binutils-2_22_branch:1.11.0.10
	binutils-2_22:1.11
	binutils-2_22-branch:1.11.0.8
	binutils-2_22-branchpoint:1.11
	binutils-2_21:1.11
	binutils-2_21-branch:1.11.0.6
	binutils-2_21-branchpoint:1.11
	binutils-2_20_1:1.11
	binutils-2_20:1.11
	binutils-arc-20081103-branch:1.8.0.6
	binutils-arc-20081103-branchpoint:1.8
	binutils-2_20-branch:1.11.0.4
	binutils-2_20-branchpoint:1.11
	dje-cgen-play1-branch:1.11.0.2
	dje-cgen-play1-branchpoint:1.11
	arc-20081103-branch:1.8.0.4
	arc-20081103-branchpoint:1.8
	binutils-2_19_1:1.8
	binutils-2_19:1.8
	binutils-2_19-branch:1.8.0.2
	binutils-2_19-branchpoint:1.8
	binutils-2_18:1.3
	binutils-2_18-branch:1.3.0.2
	binutils-2_18-branchpoint:1.3
	binutils_latest_snapshot:1.11;
locks; strict;
comment	@# @;


1.11
date	2009.05.14.15.26.36;	author uweigand;	state Exp;
branches;
next	1.10;

1.10
date	2009.05.14.04.30.03;	author amodra;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.12.00.23.58;	author amodra;	state Exp;
branches;
next	1.8;

1.8
date	2008.06.19.16.15.17;	author amodra;	state Exp;
branches;
next	1.7;

1.7
date	2008.02.07.11.03.06;	author amodra;	state Exp;
branches;
next	1.6;

1.6
date	2008.01.28.05.59.24;	author amodra;	state Exp;
branches;
next	1.5;

1.5
date	2008.01.25.12.03.37;	author amodra;	state Exp;
branches;
next	1.4;

1.4
date	2007.09.25.08.27.39;	author amodra;	state Exp;
branches;
next	1.3;

1.3
date	2007.06.14.08.53.09;	author amodra;	state Exp;
branches;
next	1.2;

1.2
date	2007.03.23.00.48.05;	author amodra;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.25.06.49.21;	author amodra;	state Exp;
branches;
next	;


desc
@@


1.11
log
@bfd/
	* elf32-spu.c (spu_elf_modify_segment_map): Move all PF_OVERLAY
	segments first amongst the program headers.

ld/testsuite/
	* ld-spu/icache.d: Update file offsets.
	* ld-spu/ovl.d: Likewise.
	* ld-spu/ovl1.d: Likewise.
@
text
@#source: ovl.s
#ld: -N -T ovl1.lnk -T ovl.lnk --emit-relocs
#objdump: -D -r

.*elf32-spu

Disassembly of section \.text:

00000100 <_start>:
.*	ai	\$1,\$1,-32
.*	xor	\$0,\$0,\$0
.*	stqd	\$0,0\(\$1\)
.*	stqd	\$0,16\(\$1\)
.*	brsl	\$0,.* <00000000\.ovl_call\.f1_a1>.*
.*SPU_REL16	f1_a1
.*	brsl	\$0,.* <00000000\.ovl_call\.f2_a1>.*
.*SPU_REL16	f2_a1
.*	brsl	\$0,.* <00000000\.ovl_call\.f1_a2>.*
.*SPU_REL16	f1_a2
.*	ila	\$9,.*
.*SPU_ADDR18	f2_a2
.*	bisl	\$0,\$9
.*	ai	\$1,\$1,32	# 20
.*	br	100 <_start>	# 100
.*SPU_REL16	_start

0000012c <f0>:
.*	bi	\$0

#...
[0-9a-f]+ <__ovly_return>:
#...
[0-9a-f]+ <__ovly_load>:
#...
[0-9a-f]+ <_ovly_debug_event>:
#...
00000330 <00000000\.ovl_call\.f1_a1>:
.*	ila	\$78,1
.*	lnop
.*	ila	\$79,1024	# 400
.*	bra?	.* <__ovly_load>.*

00000340 <00000000\.ovl_call\.f2_a1>:
.*	ila	\$78,1
.*	lnop
.*	ila	\$79,1028	# 404
.*	bra?	.* <__ovly_load>.*

00000350 <00000000.ovl_call.f1_a2>:
.*	ila	\$78,2
.*	lnop
.*	ila	\$79,1024	# 400
.*	bra?	.* <__ovly_load>.*

00000360 <00000000\.ovl_call\.f2_a2>:
.*	ila	\$78,2
.*	lnop
.*	ila	\$79,1060	# 424
.*	bra?	.* <__ovly_load>.*

00000370 <00000000\.ovl_call\.f4_a1>:
.*	ila	\$78,1
.*	lnop
.*	ila	\$79,1040	# 410
.*	bra?	.* <__ovly_load>.*

00000380 <00000000.ovl_call.14:8>:
.*	ila	\$78,2
.*	lnop
.*	ila	\$79,1076	# 434
.*	bra?	.* <__ovly_load>.*

#00000330 <00000000\.ovl_call\.f1_a1>:
#.*	bra?sl	\$75,.* <__ovly_load>.*
#.*00 04 04 00.*
#
#00000338 <00000000\.ovl_call\.f2_a1>:
#.*	bra?sl	\$75,.* <__ovly_load>.*
#.*00 04 04 04.*
#
#00000340 <00000000\.ovl_call\.f1_a2>:
#.*	bra?sl	\$75,.* <__ovly_load>.*
#.*00 08 04 00.*
#
#00000348 <00000000\.ovl_call\.f2_a2>:
#.*	bra?sl	\$75,.* <__ovly_load>.*
#.*00 08 04 24.*
#
#00000350 <00000000\.ovl_call\.f4_a1>:
#.*	bra?sl	\$75,.* <__ovly_load>.*
#.*00 04 04 10.*
#
#00000358 <00000000.ovl_call.14:8>:
#.*	bra?sl	\$75,.* <__ovly_load>.*
#.*00 08 04 34.*

Disassembly of section \.ov_a1:

00000400 <f1_a1>:
.*	br	.* <f3_a1>.*
.*SPU_REL16	f3_a1

00000404 <f2_a1>:
.*	ila	\$3,.*
.*SPU_ADDR18	f4_a1
.*	bi	\$0

0000040c <f3_a1>:
.*	bi	\$0

00000410 <f4_a1>:
.*	bi	\$0
	\.\.\.
Disassembly of section \.ov_a2:

00000400 <f1_a2>:
.*	stqd	\$0,16\(\$1\)
.*	stqd	\$1,-32\(\$1\)
.*	ai	\$1,\$1,-32
.*	brsl	\$0,12c <f0>	# 12c
.*SPU_REL16	f0
.*	brsl	\$0,.* <00000000\.ovl_call\.f1_a1>.*
.*SPU_REL16	f1_a1
.*	brsl	\$0,.* <f3_a2>.*
.*SPU_REL16	f3_a2
.*	lqd	\$0,48\(\$1\)	# 30
.*	ai	\$1,\$1,32	# 20
.*	bi	\$0

00000424 <f2_a2>:
.*	ilhu	\$3,.*
.*SPU_ADDR16_HI	f4_a2
.*	iohl	\$3,.*
.*SPU_ADDR16_LO	f4_a2
.*	bi	\$0

00000430 <f3_a2>:
.*	bi	\$0

00000434 <f4_a2>:
.*	br	.* <f3_a2>.*
.*SPU_REL16	f3_a2
	\.\.\.
Disassembly of section .data:

00000440 <_ovly_table-0x10>:
 440:	00 00 00 00 .*
 444:	00 00 00 01 .*
	\.\.\.
00000450 <_ovly_table>:
 450:	00 00 04 00 .*
 454:	00 00 00 20 .*
# 458:	00 00 03 40 .*
 458:	00 00 01 00 .*
 45c:	00 00 00 01 .*
 460:	00 00 04 00 .*
 464:	00 00 00 40 .*
# 468:	00 00 03 60 .*
 468:	00 00 01 20 .*
 46c:	00 00 00 01 .*

00000470 <_ovly_buf_table>:
 470:	00 00 00 00 .*

Disassembly of section \.toe:

00000480 <_EAR_>:
	\.\.\.
Disassembly of section \.note\.spu_name:

.* <\.note\.spu_name>:
.*:	00 00 00 08 .*
.*:	00 00 00 0c .*
.*:	00 00 00 01 .*
.*:	53 50 55 4e .*
.*:	41 4d 45 00 .*
.*:	74 6d 70 64 .*
.*:	69 72 2f 64 .*
.*:	75 6d 70 00 .*
@


1.10
log
@bfd/
	* elf32-spu.c (spu_elf_size_stubs): Split out section placement to..
	(spu_elf_place_overlay_data): ..here.  New function.
	* elf32-spu.h (spu_elf_place_overlay_data): Declare.
ld/
	* emultempl/spuelf.em (spu_before_allocation): Call
	spu_elf_place_overlay_data.
ld/testsuite/
	* ld-spu/icache1.d: Update for changed overlay manager placement.
	* ld-spu/ovl.d: Likewise.
	* ld-spu/ovl2.d: Likewise.
@
text
@d154 1
a154 1
 458:	00 00 03 90 .*
d159 1
a159 1
 468:	00 00 03 b0 .*
@


1.9
log
@bfd/
	* elf32-spu.c (struct spu_link_hash_table): Add init, line_size_log2,
	num_lines_log2.
	(struct got_entry): Add br_addr.
	(struct call_info): Add priority.
	(struct function_info): Add lr_store and sp_adjust.
	(spu_elf_setup): Init line_size_log2 and num_lines_log2.
	(spu_elf_find_overlays): For soft-icache, mark any section within cache
	area as an overlay, and check that no other overlays exist.  Look up
	icache overlay manager entry sym.
	(BRA_STUBS, BRA, BRASL): Define.
	(enum _stub_type): Replace ovl_stub with call_ovl_stub and br*_ovl_stub.
	(needs_ovl_stub): Adjust for soft-icache.  Return priority encoded
	in branch insn.
	(count_stub, build_stub): Support soft-icache.
	(build_spuear_stubs, process_stubs): Adjust build_stub call.
	(spu_elf_size_stubs): Size soft-icache stubs.
	(overlay_index): New function.
	(spu_elf_build_stubs): Make static.  Support soft-icache.
	(spu_elf_check_vma): Don't turn off auto_overlay if soft-icache.
	(find_function_stack_adjust): Save lr store and stack adjust insn
	offsets.
	(maybe_insert_function): Adjust find_function_stack_adjust call.
	(mark_functions_via_relocs): Retrieve priority.
	(remove_cycles): Only warn about pruned arcs when stack_analysis.
	(sort_calls): Sort by priority first.
	(mark_overlay_section): Ignore .ovl.init.
	(sum_stack): Only print when stack_analysis.
	(print_one_overlay_section): New function, extracted from..
	(spu_elf_auto_overlay): ..here.  Support soft-icache overlays.
	(spu_elf_stack_analysis): Only print when htab->stack_analysis.
	(spu_elf_final_link): Call spu_elf_stack_analysis for lrlive
	analysis.  Call spu_elf_build_stubs.
	(spu_elf_relocate_section): For soft-icache encode overlay index
	into addresses.
	(spu_elf_output_symbol_hook): Support soft-icache.
	(spu_elf_modify_program_headers: Likewise.
	* elf32-spu.h (struct spu_elf_params): Add lrlive_analysis.  Rename
	num_regions to num_lines.  Add line_size and max_branch.
	(enum _ovly_flavour): Add ovly_soft_icache.
	(spu_elf_build_stubs): Delete.
gas/
	* config/tc-spu.c (md_pseudo_table): Add "brinfo".
	(brinfo): New var.
	(md_assemble): Poke brinfo into branch instructions.
	(spu_brinfo): New function.
	(md_apply_fix): Don't assume insn fields start off at zero, mask
	them to remove possible brinfo.
ld/
	* emultempl/spuelf.em (params): Init new fields.
	(num_lines_set, line_size_set, icache_mgr, icache_mgr_stream): New vars.
	(spu_place_special_section): Adjust placement for soft-icache.  Pad
	soft-icache section to a fixed size.  Clear addr_tree.
	(spu_elf_load_ovl_mgr): Support soft-icache.  Map overlay manager
	sections a little more intelligently.
	(gld${EMULATION_NAME}_finish): Don't call spu_elf_build_stubs.
	(OPTION_SPU_NUM_LINES): Rename from OPTION_SPU_NUM_REGIONS.
	(OPTION_SPU_SOFT_ICACHE, OPTION_SPU_LINE_SIZE): Define.
	(OPTION_SPU_LRLIVE): Define.
	(PARSE_AND_LIST_LONGOPTS): Add new soft-icache options.
	(PARSE_AND_LIST_OPTIONS): Likewise.
	(PARSE_AND_LIST_ARGS_CASES): Handle them.
	* emultempl/spu_icache.S: Dummy file.
	* emultempl/spu_icache.o_c: Regenerate.
	* Makefile.am (eelf32_spu.c): Depend on spu_icache.o_c.
	(spu_icache.o_c): Add rule to build.
	(CLEANFILES): Zap temp files.
	(EXTRA_DIST): Add spu_icache.o_c.
	* Makefile.in: Regenerate.
ld/testsuite/
	* ld-spu/ovl.d: Allow for absolute branches in stubs.
	* ld-spu/ovl2.d: Likewise.
@
text
@d20 1
a20 2
#.*	ila	\$9,328	# 148
.*	ila	\$9,352	# 160
d30 8
a37 25
#00000130 <00000000\.ovl_call\.f1_a1>:
#.*	bra?sl	\$75,.* <__ovly_load>.*
#.*00 04 04 00.*
#
#00000138 <00000000\.ovl_call\.f2_a1>:
#.*	bra?sl	\$75,.* <__ovly_load>.*
#.*00 04 04 04.*
#
#00000140 <00000000\.ovl_call\.f1_a2>:
#.*	bra?sl	\$75,.* <__ovly_load>.*
#.*00 08 04 00.*
#
#00000148 <00000000\.ovl_call\.f2_a2>:
#.*	bra?sl	\$75,.* <__ovly_load>.*
#.*00 08 04 24.*
#
#00000150 <00000000\.ovl_call\.f4_a1>:
#.*	bra?sl	\$75,.* <__ovly_load>.*
#.*00 04 04 10.*
#
#00000158 <00000000.ovl_call.14:8>:
#.*	bra?sl	\$75,.* <__ovly_load>.*
#.*00 08 04 34.*

00000130 <00000000\.ovl_call\.f1_a1>:
d43 1
a43 1
00000140 <00000000\.ovl_call\.f2_a1>:
d49 1
a49 1
00000150 <00000000.ovl_call.f1_a2>:
d55 1
a55 1
00000160 <00000000\.ovl_call\.f2_a2>:
d61 1
a61 1
00000170 <00000000\.ovl_call\.f4_a1>:
d67 1
a67 1
00000180 <00000000.ovl_call.14:8>:
d73 24
a96 7
#...
[0-9a-f]+ <__ovly_return>:
#...
[0-9a-f]+ <__ovly_load>:
#...
[0-9a-f]+ <_ovly_debug_event>:
#...
d104 1
a104 2
#.*	ila	\$3,336	# 150
.*	ila	\$3,368	# 170
d122 1
a122 1
.*	brsl	\$0,130 <00000000\.ovl_call\.f1_a1>	# 130
d124 1
a124 1
.*	brsl	\$0,430 <f3_a2>	# 430
d131 1
a131 1
.*	ilhu	\$3,0
d133 1
a133 2
#.*	iohl	\$3,344	# 158
.*	iohl	\$3,384	# 180
@


1.8
log
@update
@
text
@d32 1
a32 1
#.*	brsl	\$75,.* <__ovly_load>.*
d36 1
a36 1
#.*	brsl	\$75,.* <__ovly_load>.*
d40 1
a40 1
#.*	brsl	\$75,.* <__ovly_load>.*
d44 1
a44 1
#.*	brsl	\$75,.* <__ovly_load>.*
d48 1
a48 1
#.*	brsl	\$75,.* <__ovly_load>.*
d52 1
a52 1
#.*	brsl	\$75,.* <__ovly_load>.*
d59 1
a59 1
.*	br	.* <__ovly_load>.*
d65 1
a65 1
.*	br	.* <__ovly_load>.*
d71 1
a71 1
.*	br	.* <__ovly_load>.*
d77 1
a77 1
.*	br	.* <__ovly_load>.*
d83 1
a83 1
.*	br	.* <__ovly_load>.*
d89 1
a89 1
.*	br	.* <__ovly_load>.*
@


1.7
log
@	* ld-spu/ovl.d: Update.
	* ld-spu/ovl2.d: Update.
@
text
@d157 1
a157 1
 458:	00 00 03 70 .*
d162 1
a162 1
 468:	00 00 03 90 .*
@


1.6
log
@	Rewrite SPU overlay handling code.  Put overlay calls stubs in the
	overlays where possible.  Use a faster call stub, or optionally at
	compile time, a more compact stub.  Double size of _ovly_buf_table
	so that low bit of _ovly_table.buf can be used as a "present" bit.
	Reserve an extra _ovly_table entry for index zero.
@
text
@d150 2
a152 1
 44c:	00 00 00 01 .*
d158 1
a158 1
 45c:	00 00 00 02 .*
d163 1
a163 1
 46c:	00 00 00 02 .*
d166 1
a166 1
	\.\.\.
@


1.5
log
@ld/
	* ld.texinfo (INSERT): Describe.
	* ldgram.y (ldgram_in_script, ldgram_had_equals): Delete.
	(INSERT_K, AFTER, BEFORE): Add as tokens.
	(ifile_p1): Handle INSERT statements.
	(saved_script_handle, force_make_executable): Move to..
	* ldmain.c: ..here.
	(previous_script_handle): New global var.
	* ldmain.h (saved_script_handle, force_make_executable): Declare.
	(previous_script_handle): Likewise.
	* ldlex.l (INSERT_K, AFTER, BEFORE): Add tokens.
	* lexsup.c (parge_args <-T>): Set previous_script_handle.
	* ldlang.c (lang_for_each_statement_worker): Handle insert statement.
	(map_input_to_output_sections, print_statement): Likewise.
	(lang_size_sections_1, lang_do_assignments_1): Likewise.
	(insert_os_after): New function, extracted from..
	(lang_insert_orphan): ..here.
	(process_insert_statements): New function.
	(lang_process): Call it.
	(lang_add_insert): New function.
	* ldlang.h (lang_insert_statement_enum): New.
	(lang_insert_statement_type): New.
	(lang_statement_union_type): Add insert_statement.
	(lang_add_insert): Declare.
ld/testsuite/
	* ld-spu/ovl.lnk: Delete overlay.
	* ld-spu/ovl1.lnk: New file.
	* ld-spu/ovl2.lnk: New file.
	* ld-spu/ovl.d: Update.
	* ld-spu/ovl2.d: Update.
@
text
@d10 17
a26 16
 100:	1c f8 00 81 	ai	\$1,\$1,-32
 104:	48 20 00 00 	xor	\$0,\$0,\$0
 108:	24 00 00 80 	stqd	\$0,0\(\$1\)
 10c:	24 00 40 80 	stqd	\$0,16\(\$1\)
 110:	33 00 04 00 	brsl	\$0,130 <00000000\.ovl_call\.f1_a1>	# 130
			110: SPU_REL16	f1_a1
 114:	33 00 04 80 	brsl	\$0,138 <00000000\.ovl_call\.f2_a1>	# 138
			114: SPU_REL16	f2_a1
 118:	33 00 07 00 	brsl	\$0,150 <00000000\.ovl_call\.f1_a2>	# 150
			118: SPU_REL16	f1_a2
 11c:	42 00 ac 09 	ila	\$9,344	# 158
			11c: SPU_ADDR18	f2_a2
 120:	35 20 04 80 	bisl	\$0,\$9
 124:	1c 08 00 81 	ai	\$1,\$1,32	# 20
 128:	32 7f fb 00 	br	100 <_start>	# 100
			128: SPU_REL16	_start
d29 25
a53 1
 12c:	35 00 00 00 	bi	\$0
d56 35
a90 32
 130:	42 02 00 4f 	ila	\$79,1024	# 400
 134:	32 00 02 80 	br	148 .*
			134: SPU_REL16	\*ABS\*\+0x148

00000138 <00000000\.ovl_call\.f2_a1>:
 138:	42 02 02 4f 	ila	\$79,1028	# 404
 13c:	32 00 01 80 	br	148 .*
			13c: SPU_REL16	\*ABS\*\+0x148

00000140 <00000000\.ovl_call\.f4_a1>:
 140:	42 02 08 4f 	ila	\$79,1040	# 410
 144:	40 20 00 00 	nop	\$0
 148:	42 00 00 ce 	ila	\$78,1
 14c:	32 00 0a 80 	br	1a0 <__ovly_load>	# 1a0
			14c: SPU_REL16	__ovly_load

00000150 <00000000\.ovl_call\.f1_a2>:
 150:	42 02 00 4f 	ila	\$79,1024	# 400
 154:	32 00 02 80 	br	168 .*
			154: SPU_REL16	\*ABS\*\+0x168

00000158 <00000000\.ovl_call\.f2_a2>:
 158:	42 02 12 4f 	ila	\$79,1060	# 424
 15c:	32 00 01 80 	br	168 .*
			15c: SPU_REL16	\*ABS\*\+0x168

00000160 <00000000\.ovl_call\.14:8>:
 160:	42 02 1a 4f 	ila	\$79,1076	# 434
 164:	40 20 00 00 	nop	\$0
 168:	42 00 01 4e 	ila	\$78,2
 16c:	32 00 06 80 	br	1a0 <__ovly_load>	# 1a0
			16c: SPU_REL16	__ovly_load
d93 1
a93 4
[0-9a-f ]+:	3f e1 00 4e 	shlqbyi	\$78,\$0,4
[0-9a-f ]+:	3f e2 00 4f 	shlqbyi	\$79,\$0,8
[0-9a-f ]+:	25 00 27 ce 	biz	\$78,\$79

d101 2
a102 2
 400:	32 00 01 80 	br	40c <f3_a1>	# 40c
			400: SPU_REL16	f3_a1
d105 4
a108 3
 404:	42 00 a0 03 	ila	\$3,320	# 140
			404: SPU_ADDR18	f4_a1
 408:	35 00 00 00 	bi	\$0
d111 1
a111 1
 40c:	35 00 00 00 	bi	\$0
d114 1
a114 1
 410:	35 00 00 00 	bi	\$0
d119 12
a130 12
 400:	24 00 40 80 	stqd	\$0,16\(\$1\)
 404:	24 ff 80 81 	stqd	\$1,-32\(\$1\)
 408:	1c f8 00 81 	ai	\$1,\$1,-32
 40c:	33 7f a4 00 	brsl	\$0,12c <f0>	# 12c
			40c: SPU_REL16	f0
 410:	33 7f a4 00 	brsl	\$0,130 <00000000\.ovl_call\.f1_a1>	# 130
			410: SPU_REL16	f1_a1
 414:	33 00 03 80 	brsl	\$0,430 <f3_a2>	# 430
			414: SPU_REL16	f3_a2
 418:	34 00 c0 80 	lqd	\$0,48\(\$1\)	# 30
 41c:	1c 08 00 81 	ai	\$1,\$1,32	# 20
 420:	35 00 00 00 	bi	\$0
d133 6
a138 5
 424:	41 00 00 03 	ilhu	\$3,0
			424: SPU_ADDR16_HI	f4_a2
 428:	60 80 b0 03 	iohl	\$3,352	# 160
			428: SPU_ADDR16_LO	f4_a2
 42c:	35 00 00 00 	bi	\$0
d141 1
a141 1
 430:	35 00 00 00 	bi	\$0
d144 2
a145 2
 434:	32 7f ff 80 	br	430 <f3_a2>	# 430
			434: SPU_REL16	f3_a2
d149 2
a150 4
00000440 <_ovly_table>:
 440:	00 00 04 00 .*
 444:	00 00 00 20 .*
 448:	00 00 02 f0 .*
d152 1
d154 12
a165 3
 454:	00 00 00 40 .*
 458:	00 00 03 10 .*
 45c:	00 00 00 01 .*
a166 2
00000460 <_ovly_buf_table>:
 460:	00 00 00 00 .*
d169 1
a169 1
00000470 <_EAR_>:
@


1.4
log
@bfd/
	* elf32-spu.c (struct spu_link_hash_table): Add ovly_load_r_symndx.
	(spu_elf_size_stubs): Count stub relocs.
	(write_one_stub): Emit relocs on overlay call stubs.
ld/testsuite/
	* ld-spu/ovl.d: Adjust for stub relocs.
	* ld-spu/ovl2.d: Likewise.
@
text
@d2 1
a2 1
#ld: -N -T ovl.lnk --emit-relocs
@


1.3
log
@Update.
@
text
@d29 1
d33 2
d38 2
d45 2
d50 2
d55 2
d62 1
@


1.2
log
@	* ld-spu/ovl.s (f4_a2): Tail call.
	* ld-spu/ovl.d: Add --emit-relocs to ld options, -r to objdump.
	Update expected results.
@
text
@d113 1
a113 1
 448:	00 00 02 e0 .*
d117 1
a117 1
 458:	00 00 03 00 .*
@


1.1
log
@New Cell SPU port.
@
text
@d2 2
a3 2
#ld: -N -T ovl.lnk
#objdump: -D
d14 6
a19 3
 110:	33 00 04 00 	brsl	\$0,130 <f0\+0x4>	# 130
 114:	33 00 04 80 	brsl	\$0,138 <f0\+0xc>	# 138
 118:	33 00 07 00 	brsl	\$0,150 <f0\+0x24>	# 150
d21 1
d25 1
d29 1
d31 2
a32 1
 134:	32 00 02 80 	br	148 <f0\+0x1c>	# 148
d34 2
a35 1
 13c:	32 00 01 80 	br	148 <f0\+0x1c>	# 148
d40 1
d42 2
a43 1
 154:	32 00 02 80 	br	168 <f0\+0x3c>	# 168
d45 2
a46 1
 15c:	32 00 01 80 	br	168 <f0\+0x3c>	# 168
d65 1
d69 1
d85 3
a87 1
 410:	33 7f a4 00 	brsl	\$0,130 <f0\+0x4>	# 130
d89 1
d96 1
d98 1
d105 2
a106 1
 434:	35 00 00 00 	bi	\$0
@

