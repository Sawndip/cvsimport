head	1.1;
access;
symbols
	binutils-2_24-branch:1.1.0.10
	binutils-2_24-branchpoint:1.1
	binutils-2_21_1:1.1.2.1
	binutils-2_23_2:1.1
	binutils-2_23_1:1.1
	binutils-2_23:1.1
	binutils-2_23-branch:1.1.0.8
	binutils-2_23-branchpoint:1.1
	binutils-2_22_branch:1.1.0.6
	binutils-2_22:1.1
	binutils-2_22-branch:1.1.0.4
	binutils-2_22-branchpoint:1.1
	binutils-2_21-branch:1.1.0.2
	binutils_latest_snapshot:1.1;
locks; strict;
comment	@ * @;


1.1
date	2010.12.10.06.08.11;	author vapier;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2011.02.10.03.41.08;	author amodra;	state Exp;
branches;
next	;


desc
@@


1.1
log
@ld: elfvers tests: support symbol prefixed targets

The symbol versioning tests mix C-visible symbols and linker-visible
symbols in order to verify .symver behavior.  This works for most
people, but fail for targets that have a symbol prefix.  So add a
helper file with macros that expand gcc's __USER_LABEL_PREFIX__ as
necessary and convert all .symver users over to it.

Now that the tests are usable on prefixed targets, update the tests
to take into account an optional leading underscore.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@/* Add the symbol prefix to the symbol as needed.
   Usage: SYMPFX(foo);  */
#define __SYMPFX(pfx, sym) #pfx sym
#define _SYMPFX(pfx, sym) __SYMPFX(pfx, sym)
#define SYMPFX(sym) _SYMPFX(__USER_LABEL_PREFIX__, #sym)

/* Generate a .symver reference with symbol prefixes.
   Usage: SYMVER(foo, foobar@@ver);  */
#define SYMVER(name, name2) __asm__(".symver " SYMPFX(name) "," SYMPFX(name2))
@


1.1.2.1
log
@apply mainline testsuite fixes and tweaks
@
text
@@

