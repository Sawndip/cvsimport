head	1.3;
access;
symbols
	binutils-2_24-branch:1.3.0.8
	binutils-2_24-branchpoint:1.3
	binutils-2_21_1:1.2.40.1
	binutils-2_23_2:1.3
	binutils-2_23_1:1.3
	binutils-2_23:1.3
	binutils-2_23-branch:1.3.0.6
	binutils-2_23-branchpoint:1.3
	binutils-2_22_branch:1.3.0.4
	binutils-2_22:1.3
	binutils-2_22-branch:1.3.0.2
	binutils-2_22-branchpoint:1.3
	binutils-2_21:1.2
	binutils-2_21-branch:1.2.0.40
	binutils-2_21-branchpoint:1.2
	binutils-2_20_1:1.2
	binutils-2_20:1.2
	binutils-arc-20081103-branch:1.2.0.38
	binutils-arc-20081103-branchpoint:1.2
	binutils-2_20-branch:1.2.0.36
	binutils-2_20-branchpoint:1.2
	dje-cgen-play1-branch:1.2.0.34
	dje-cgen-play1-branchpoint:1.2
	arc-20081103-branch:1.2.0.32
	arc-20081103-branchpoint:1.2
	binutils-2_19_1:1.2
	binutils-2_19:1.2
	binutils-2_19-branch:1.2.0.30
	binutils-2_19-branchpoint:1.2
	binutils-2_18:1.2
	binutils-2_18-branch:1.2.0.28
	binutils-2_18-branchpoint:1.2
	binutils-csl-coldfire-4_1-32:1.2
	binutils-csl-sourcerygxx-4_1-32:1.2
	binutils-csl-innovasic-fido-3_4_4-33:1.2
	binutils-csl-sourcerygxx-3_4_4-32:1.2
	binutils-csl-coldfire-4_1-30:1.2
	binutils-csl-sourcerygxx-4_1-30:1.2
	binutils-csl-coldfire-4_1-28:1.2
	binutils-csl-sourcerygxx-4_1-29:1.2
	binutils-csl-sourcerygxx-4_1-28:1.2
	binutils-csl-arm-2006q3-27:1.2
	binutils-csl-sourcerygxx-4_1-27:1.2
	binutils-csl-arm-2006q3-26:1.2
	binutils-csl-sourcerygxx-4_1-26:1.2
	binutils-csl-sourcerygxx-4_1-25:1.2
	binutils-csl-sourcerygxx-4_1-24:1.2
	binutils-csl-sourcerygxx-4_1-23:1.2
	binutils-csl-sourcerygxx-4_1-21:1.2
	binutils-csl-arm-2006q3-21:1.2
	binutils-csl-sourcerygxx-4_1-22:1.2
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.2
	binutils-csl-sourcerygxx-4_1-20:1.2
	binutils-csl-arm-2006q3-19:1.2
	binutils-csl-sourcerygxx-4_1-19:1.2
	binutils-csl-sourcerygxx-4_1-18:1.2
	binutils-csl-renesas-4_1-9:1.2
	binutils-csl-sourcerygxx-3_4_4-25:1.2
	binutils-csl-renesas-4_1-8:1.2
	binutils-csl-renesas-4_1-7:1.2
	binutils-csl-renesas-4_1-6:1.2
	binutils-csl-sourcerygxx-4_1-17:1.2
	binutils-csl-sourcerygxx-4_1-14:1.2
	binutils-csl-sourcerygxx-4_1-15:1.2
	binutils-csl-sourcerygxx-4_1-13:1.2
	binutils-2_17:1.2
	binutils-csl-sourcerygxx-4_1-12:1.2
	binutils-csl-sourcerygxx-3_4_4-21:1.2
	binutils-csl-wrs-linux-3_4_4-24:1.2
	binutils-csl-wrs-linux-3_4_4-23:1.2
	binutils-csl-sourcerygxx-4_1-9:1.2
	binutils-csl-sourcerygxx-4_1-8:1.2
	binutils-csl-sourcerygxx-4_1-7:1.2
	binutils-csl-arm-2006q1-6:1.2
	binutils-csl-sourcerygxx-4_1-6:1.2
	binutils-csl-wrs-linux-3_4_4-22:1.2
	binutils-csl-coldfire-4_1-11:1.2
	binutils-csl-sourcerygxx-3_4_4-19:1.2
	binutils-csl-coldfire-4_1-10:1.2
	binutils-csl-sourcerygxx-4_1-5:1.2
	binutils-csl-sourcerygxx-4_1-4:1.2
	binutils-csl-wrs-linux-3_4_4-21:1.2
	binutils-csl-morpho-4_1-4:1.2
	binutils-csl-sourcerygxx-3_4_4-17:1.2
	binutils-csl-wrs-linux-3_4_4-20:1.2
	binutils-2_17-branch:1.2.0.26
	binutils-2_17-branchpoint:1.2
	binutils-csl-2_17-branch:1.2.0.24
	binutils-csl-2_17-branchpoint:1.2
	binutils-csl-gxxpro-3_4-branch:1.2.0.22
	binutils-csl-gxxpro-3_4-branchpoint:1.2
	binutils-2_16_1:1.2
	binutils-csl-arm-2005q1b:1.2
	binutils-2_16:1.2
	binutils-csl-arm-2005q1a:1.2
	binutils-csl-arm-2005q1-branch:1.2.0.20
	binutils-csl-arm-2005q1-branchpoint:1.2
	binutils-2_16-branch:1.2.0.18
	binutils-2_16-branchpoint:1.2
	csl-arm-2004-q3d:1.2
	csl-arm-2004-q3:1.2
	binutils-2_15:1.2
	binutils-2_15-branchpoint:1.2
	csl-arm-2004-q1a:1.2
	csl-arm-2004-q1:1.2
	binutils-2_15-branch:1.2.0.16
	cagney_bfdfile-20040213-branch:1.2.0.14
	cagney_bfdfile-20040213-branchpoint:1.2
	cagney_bigcore-20040122-branch:1.2.0.12
	cagney_bigcore-20040122-branchpoint:1.2
	csl-arm-2003-q4:1.2
	binutils-2_14:1.2
	binutils-2_14-branch:1.2.0.10
	binutils-2_14-branchpoint:1.2
	binutils-2_13_2_1:1.2
	binutils-2_13_2:1.2
	binutils-2_13_1:1.2
	binutils-2_13:1.2
	binutils-2_13-branchpoint:1.2
	binutils-2_13-branch:1.2.0.8
	binutils-2_12_1:1.2
	binutils-2_12:1.2
	binutils-2_12-branch:1.2.0.6
	binutils-2_12-branchpoint:1.2
	cygnus_cvs_20020108_pre:1.2
	binutils-2_11_2:1.2
	binutils-2_11_1:1.2
	binutils-2_11:1.2
	x86_64versiong3:1.2
	binutils-2_11-branch:1.2.0.4
	binutils-2_10_1:1.2
	binutils-2_10:1.2
	binutils-2_10-branch:1.2.0.2
	binutils-2_10-branchpoint:1.2
	binutils_latest_snapshot:1.3
	repo-unification-2000-02-06:1.2
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2010.12.10.06.08.11;	author vapier;	state Exp;
branches;
next	1.2;

1.2
date	99.07.22.00.40.34;	author ian;	state Exp;
branches
	1.2.40.1;
next	1.1;

1.1
date	99.05.03.07.29.08;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.2.40.1
date	2011.02.10.03.41.08;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.08;	author rth;	state Exp;
branches;
next	;


desc
@@


1.3
log
@ld: elfvers tests: support symbol prefixed targets

The symbol versioning tests mix C-visible symbols and linker-visible
symbols in order to verify .symver behavior.  This works for most
people, but fail for targets that have a symbol prefix.  So add a
helper file with macros that expand gcc's __USER_LABEL_PREFIX__ as
necessary and convert all .symver users over to it.

Now that the tests are usable on prefixed targets, update the tests
to take into account an optional leading underscore.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@/*
 * Basic test of versioning.  The idea with this is that we define
 * a bunch of definitions of the same symbol, and we can theoretically
 * then link applications against varying sets of these.
 */
#include "vers.h"

const char * show_bar1 = "asdf";
const char * show_bar2 = "asdf";

extern int new2_foo();
extern int bar33();

int
bar()
{
	return 3;
}

/*
 * The 'hide' prefix is something so that we can automatically search the
 * symbol table and verify that none of these symbols were actually exported.
 */
int
hide_original_foo()
{
	return 1+bar();

}

int
hide_old_foo()
{
	return 10+bar();

}

int
hide_old_foo1()
{
	return 100+bar();

}

int
hide_new_foo()
{
	return 1000+bar();

}

SYMVER(hide_original_foo, show_foo@@);
SYMVER(hide_old_foo, show_foo@@VERS_1.1);
SYMVER(hide_old_foo1, show_foo@@VERS_1.2);
SYMVER(hide_new_foo, show_foo@@@@VERS_2.0);



#ifdef DO_TEST10
/* In test 10, we try and define a non-existant version node.  The linker
 * should catch this and complain. */
int
hide_new_bogus_foo()
{
	return 1000+bar();

}
SYMVER(hide_new_bogus_foo, show_foo@@VERS_2.2);
#endif




#ifdef DO_TEST11
/*
 * This test is designed to catch a couple of syntactic errors.  The assembler
 * should complain about both of the directives below.
 */
void
xyzzz()
{
  new2_foo();
  bar33();
}

SYMVER(new2_foo, fooVERS_2.0);
SYMVER(bar33, bar@@@@VERS_2.0);
#endif

#ifdef DO_TEST12
/*
 * This test is designed to catch a couple of syntactic errors.  The assembler
 * should complain about both of the directives below.
 */
void
xyzzz()
{
  new2_foo();
  bar33();
}

SYMVER(bar33, bar@@@@VERS_2.0);
#endif
@


1.2
log
@1999-07-21  H.J. Lu  <hjl@@gnu.org>

	* ld-elfvers/vers1.c: Add missing prototypes and include
	<stdio.h> if necessary.
	* ld-elfvers/vers15.c: Likewise.
	* ld-elfvers/vers19.c: Likewise.
	* ld-elfvers/vers2.c: Likewise.
	* ld-elfvers/vers3.c: Likewise.
	* ld-elfvers/vers4.c: Likewise.
	* ld-elfvers/vers6.c: Likewise.
	* ld-elfvers/vers7.c: Likewise.
	* ld-elfvers/vers9.c: Likewise.
	* ld-shared/main.c: Likewise.
	* ld-srec/sr3.cc (Foo::Foo): Remove arg name.
@
text
@d6 2
d52 4
a55 4
__asm__(".symver hide_original_foo,show_foo@@");
__asm__(".symver hide_old_foo,show_foo@@VERS_1.1");
__asm__(".symver hide_old_foo1,show_foo@@VERS_1.2");
__asm__(".symver hide_new_foo,show_foo@@@@VERS_2.0");
d68 1
a68 1
__asm__(".symver hide_new_bogus_foo,show_foo@@VERS_2.2");
d86 2
a87 2
__asm__(".symver new2_foo,fooVERS_2.0");
__asm__(".symver bar33,bar@@@@VERS_2.0");
d102 1
a102 1
__asm__(".symver bar33,bar@@@@VERS_2.0");
@


1.2.40.1
log
@apply mainline testsuite fixes and tweaks
@
text
@a5 2
#include "vers.h"

d50 4
a53 4
SYMVER(hide_original_foo, show_foo@@);
SYMVER(hide_old_foo, show_foo@@VERS_1.1);
SYMVER(hide_old_foo1, show_foo@@VERS_1.2);
SYMVER(hide_new_foo, show_foo@@@@VERS_2.0);
d66 1
a66 1
SYMVER(hide_new_bogus_foo, show_foo@@VERS_2.2);
d84 2
a85 2
SYMVER(new2_foo, fooVERS_2.0);
SYMVER(bar33, bar@@@@VERS_2.0);
d100 1
a100 1
SYMVER(bar33, bar@@@@VERS_2.0);
@


1.1
log
@Initial revision
@
text
@d9 3
d77 1
a77 1
int
d93 1
a93 1
int
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

