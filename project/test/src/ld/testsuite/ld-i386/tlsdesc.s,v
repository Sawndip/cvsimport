head	1.1;
access;
symbols
	binutils-2_24-branch:1.1.0.26
	binutils-2_24-branchpoint:1.1
	binutils-2_21_1:1.1
	binutils-2_23_2:1.1
	binutils-2_23_1:1.1
	binutils-2_23:1.1
	binutils-2_23-branch:1.1.0.24
	binutils-2_23-branchpoint:1.1
	binutils-2_22_branch:1.1.0.22
	binutils-2_22:1.1
	binutils-2_22-branch:1.1.0.20
	binutils-2_22-branchpoint:1.1
	binutils-2_21:1.1
	binutils-2_21-branch:1.1.0.18
	binutils-2_21-branchpoint:1.1
	binutils-2_20_1:1.1
	binutils-2_20:1.1
	binutils-arc-20081103-branch:1.1.0.16
	binutils-arc-20081103-branchpoint:1.1
	binutils-2_20-branch:1.1.0.14
	binutils-2_20-branchpoint:1.1
	dje-cgen-play1-branch:1.1.0.12
	dje-cgen-play1-branchpoint:1.1
	arc-20081103-branch:1.1.0.10
	arc-20081103-branchpoint:1.1
	binutils-2_19_1:1.1
	binutils-2_19:1.1
	binutils-2_19-branch:1.1.0.8
	binutils-2_19-branchpoint:1.1
	binutils-2_18:1.1
	binutils-2_18-branch:1.1.0.6
	binutils-2_18-branchpoint:1.1
	binutils-csl-coldfire-4_1-32:1.1
	binutils-csl-sourcerygxx-4_1-32:1.1
	binutils-csl-innovasic-fido-3_4_4-33:1.1
	binutils-csl-coldfire-4_1-30:1.1
	binutils-csl-sourcerygxx-4_1-30:1.1
	binutils-csl-coldfire-4_1-28:1.1
	binutils-csl-sourcerygxx-4_1-29:1.1
	binutils-csl-sourcerygxx-4_1-28:1.1
	binutils-csl-arm-2006q3-27:1.1
	binutils-csl-sourcerygxx-4_1-27:1.1
	binutils-csl-arm-2006q3-26:1.1
	binutils-csl-sourcerygxx-4_1-26:1.1
	binutils-csl-sourcerygxx-4_1-25:1.1
	binutils-csl-sourcerygxx-4_1-24:1.1
	binutils-csl-sourcerygxx-4_1-23:1.1
	binutils-csl-sourcerygxx-4_1-21:1.1
	binutils-csl-arm-2006q3-21:1.1
	binutils-csl-sourcerygxx-4_1-22:1.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.1
	binutils-csl-sourcerygxx-4_1-20:1.1
	binutils-csl-arm-2006q3-19:1.1
	binutils-csl-sourcerygxx-4_1-19:1.1
	binutils-csl-sourcerygxx-4_1-18:1.1
	binutils-csl-renesas-4_1-9:1.1
	binutils-csl-renesas-4_1-8:1.1
	binutils-csl-renesas-4_1-7:1.1
	binutils-csl-renesas-4_1-6:1.1
	binutils-csl-sourcerygxx-4_1-17:1.1
	binutils-csl-sourcerygxx-4_1-14:1.1
	binutils-csl-sourcerygxx-4_1-15:1.1
	binutils-csl-sourcerygxx-4_1-13:1.1
	binutils-2_17:1.1
	binutils-csl-sourcerygxx-4_1-12:1.1
	binutils-csl-sourcerygxx-3_4_4-21:1.1
	binutils-csl-sourcerygxx-4_1-9:1.1
	binutils-csl-sourcerygxx-4_1-8:1.1
	binutils-csl-sourcerygxx-4_1-7:1.1
	binutils-csl-arm-2006q1-6:1.1
	binutils-csl-sourcerygxx-4_1-6:1.1
	binutils-csl-coldfire-4_1-11:1.1
	binutils-csl-sourcerygxx-3_4_4-19:1.1
	binutils-csl-coldfire-4_1-10:1.1
	binutils-csl-sourcerygxx-4_1-5:1.1
	binutils-csl-sourcerygxx-4_1-4:1.1
	binutils-csl-morpho-4_1-4:1.1
	binutils-csl-sourcerygxx-3_4_4-17:1.1
	binutils-2_17-branch:1.1.0.4
	binutils-2_17-branchpoint:1.1
	binutils-csl-2_17-branch:1.1.0.2
	binutils-csl-2_17-branchpoint:1.1
	binutils_latest_snapshot:1.1;
locks; strict;
comment	@# @;


1.1
date	2006.01.18.21.07.49;	author aoliva;	state Exp;
branches;
next	;


desc
@@


1.1
log
@include/elf/ChangeLog:
Introduce TLS descriptors for i386 and x86_64.
* common.h (DT_TLSDESC_GOT, DT_TLSDESC_PLT): New.
* i386.h (R_386_TLS_GOTDESC, R_386_TLS_DESC_CALL, R_386_TLS_DESC):
New.
* x86-64.h (R_X86_64_GOTPC32_TLSDESC, R_X86_64_TLSDESC_CALL,
R_X86_64_TLSDESC): New.
bfd/ChangeLog:
Introduce TLS descriptors for i386 and x86_64.
* reloc.c (BFD_RELOC_386_TLS_GOTDESC, BFD_RELOC_386_TLS_DESC,
BFD_RELOC_386_TLS_DESC_CALL, BFD_RELOC_X86_64_GOTPC32_TLSDESC,
BFD_RELOC_X86_64_TLSDESC, BFD_RELOC_X86_64_TLSDESC_CALL): New.
* libbfd.h, bfd-in2.h: Rebuilt.
* elf32-i386.c (elf_howto_table): New relocations.
(R_386_tls): Adjust.
(elf_i386_reloc_type_lookup): Map new relocations.
(GOT_TLS_GDESC, GOT_TLS_GD_BOTH_P): New macros.
(GOT_TLS_GD_P, GOT_TLS_GDESC_P, GOT_TLS_GD_ANY_P): New macros.
(struct elf_i386_link_hash_entry): Add tlsdesc_got field.
(struct elf_i386_obj_tdata): Add local_tlsdesc_gotent field.
(elf_i386_local_tlsdesc_gotent): New macro.
(struct elf_i386_link_hash_table): Add sgotplt_jump_table_size.
(elf_i386_compute_jump_table_size): New macro.
(link_hash_newfunc): Initialize tlsdesc_got.
(elf_i386_link_hash_table_create): Set sgotplt_jump_table_size.
(elf_i386_tls_transition): Handle R_386_TLS_GOTDESC and
R_386_TLS_DESC_CALL.
(elf_i386_check_relocs): Likewise.  Allocate space for
local_tlsdesc_gotent.
(elf_i386_gc_sweep_hook): Handle R_386_TLS_GOTDESC and
R_386_TLS_DESC_CALL.
(allocate_dynrelocs): Count function PLT relocations.  Reserve
space for TLS descriptors and relocations.
(elf_i386_size_dynamic_sections): Reserve space for TLS
descriptors and relocations.  Set up sgotplt_jump_table_size.
Don't zero reloc_count in srelplt.
(elf_i386_always_size_sections): New.  Set up _TLS_MODULE_BASE_.
(elf_i386_relocate_section): Handle R_386_TLS_GOTDESC and
R_386_TLS_DESC_CALL.
(elf_i386_finish_dynamic_symbol): Use GOT_TLS_GD_ANY_P.
(elf_backend_always_size_sections): Define.
* elf64-x86-64.c (x86_64_elf_howto): Add R_X86_64_GOTPC32_TLSDESC,
R_X86_64_TLSDESC, R_X86_64_TLSDESC_CALL.
(R_X86_64_standard): Adjust.
(x86_64_reloc_map): Map new relocs.
(elf64_x86_64_rtype_to_howto): New, split out of...
(elf64_x86_64_info_to_howto): ... this function, and...
(elf64_x86_64_reloc_type_lookup): ... use it to map elf_reloc_val.
(GOT_TLS_GDESC, GOT_TLS_GD_BOTH_P): New macros.
(GOT_TLS_GD_P, GOT_TLS_GDESC_P, GOT_TLS_GD_ANY_P): New macros.
(struct elf64_x86_64_link_hash_entry): Add tlsdesc_got field.
(struct elf64_x86_64_obj_tdata): Add local_tlsdesc_gotent field.
(elf64_x86_64_local_tlsdesc_gotent): New macro.
(struct elf64_x86_64_link_hash_table): Add tlsdesc_plt,
tlsdesc_got and sgotplt_jump_table_size fields.
(elf64_x86_64_compute_jump_table_size): New macro.
(link_hash_newfunc): Initialize tlsdesc_got.
(elf64_x86_64_link_hash_table_create): Initialize new fields.
(elf64_x86_64_tls_transition): Handle R_X86_64_GOTPC32_TLSDESC and
R_X86_64_TLSDESC_CALL.
(elf64_x86_64_check_relocs): Likewise.  Allocate space for
local_tlsdesc_gotent.
(elf64_x86_64_gc_sweep_hook): Handle R_X86_64_GOTPC32_TLSDESC and
R_X86_64_TLSDESC_CALL.
(allocate_dynrelocs): Count function PLT relocations.  Reserve
space for TLS descriptors and relocations.
(elf64_x86_64_size_dynamic_sections): Reserve space for TLS
descriptors and relocations.  Set up sgotplt_jump_table_size,
tlsdesc_plt and tlsdesc_got.  Make room for them.  Don't zero
reloc_count in srelplt.  Add dynamic entries for DT_TLSDESC_PLT
and DT_TLSDESC_GOT.
(elf64_x86_64_always_size_sections): New.  Set up
_TLS_MODULE_BASE_.
(elf64_x86_64_relocate_section): Handle R_386_TLS_GOTDESC and
R_386_TLS_DESC_CALL.
(elf64_x86_64_finish_dynamic_symbol): Use GOT_TLS_GD_ANY_P.
(elf64_x86_64_finish_dynamic_sections): Set DT_TLSDESC_PLT and
DT_TLSDESC_GOT.  Set up TLS descriptor lazy resolver PLT entry.
(elf_backend_always_size_sections): Define.
binutils/ChangeLog:
Introduce TLS descriptors for i386 and x86_64.
* readelf.c (get_dynamic_type): Handle DT_TLSDESC_GOT and
DT_TLSDESC_PLT.
gas/ChangeLog:
Introduce TLS descriptors for i386 and x86_64.
* config/tc-i386.c (tc_i386_fix_adjustable): Handle
BFD_RELOC_386_TLS_GOTDESC, BFD_RELOC_386_TLS_DESC_CALL,
BFD_RELOC_X86_64_GOTPC32_TLSDESC, BFD_RELOC_X86_64_TLSDESC_CALL.
(optimize_disp): Emit fix up for BFD_RELOC_386_TLS_DESC_CALL and
BFD_RELOC_X86_64_TLSDESC_CALL immediately, and clear the
displacement bits.
(build_modrm_byte): Set up zero modrm for TLS desc calls.
(lex_got): Handle @@tlsdesc and @@tlscall.
(md_apply_fix, tc_gen_reloc): Handle the new relocations.
ld/testsuite/ChangeLog:
Introduce TLS descriptors for i386 and x86_64.
* ld-i386/i386.exp: Run on x86_64-*-linux* and amd64-*-linux*.
Add new tests.
* ld-i386/pcrel16.d: Add -melf_i386.
* ld-i386/pcrel8.d: Likewise.
* ld-i386/tlsbindesc.dd: New.
* ld-i386/tlsbindesc.rd: New.
* ld-i386/tlsbindesc.s: New.
* ld-i386/tlsbindesc.sd: New.
* ld-i386/tlsbindesc.td: New.
* ld-i386/tlsdesc.dd: New.
* ld-i386/tlsdesc.rd: New.
* ld-i386/tlsdesc.s: New.
* ld-i386/tlsdesc.sd: New.
* ld-i386/tlsdesc.td: New.
* ld-i386/tlsgdesc.dd: New.
* ld-i386/tlsgdesc.rd: New.
* ld-i386/tlsgdesc.s: New.
* ld-x86-64/x86-64.exp: Run new tests.
* ld-x86-64/tlsbindesc.dd: New.
* ld-x86-64/tlsbindesc.rd: New.
* ld-x86-64/tlsbindesc.s: New.
* ld-x86-64/tlsbindesc.sd: New.
* ld-x86-64/tlsbindesc.td: New.
* ld-x86-64/tlsdesc.dd: New.
* ld-x86-64/tlsdesc.pd: New.
* ld-x86-64/tlsdesc.rd: New.
* ld-x86-64/tlsdesc.s: New.
* ld-x86-64/tlsdesc.sd: New.
* ld-x86-64/tlsdesc.td: New.
* ld-x86-64/tlsgdesc.dd: New.
* ld-x86-64/tlsgdesc.rd: New.
* ld-x86-64/tlsgdesc.s: New.
@
text
@	.section ".tdata", "awT", @@progbits
	.globl sg1, sg2, sg3, sg4, sg5, sg6, sg7, sg8
	.globl sh1, sh2, sh3, sh4, sh5, sh6, sh7, sh8
	.hidden sh1, sh2, sh3, sh4, sh5, sh6, sh7, sh8
sg1:	.long 17
sg2:	.long 18
sg3:	.long 19
sg4:	.long 20
sg5:	.long 21
sg6:	.long 22
sg7:	.long 23
sg8:	.long 24
sl1:	.long 65
sl2:	.long 66
sl3:	.long 67
sl4:	.long 68
sl5:	.long 69
sl6:	.long 70
sl7:	.long 71
sl8:	.long 72
sh1:	.long 257
sh2:	.long 258
sh3:	.long 259
sh4:	.long 260
sh5:	.long 261
sh6:	.long 262
sh7:	.long 263
sh8:	.long 264
	.text
	.globl	fn1
	.type	fn1,@@function
fn1:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%eax
	call	1f
1:	popl	%ebx
	addl	$_GLOBAL_OFFSET_TABLE_+[.-1b], %ebx
	nop;nop;nop;nop

	/* GD */
	leal	sg1@@tlsdesc(%ebx), %eax
	call	*sg1@@tlscall(%eax)
	nop;nop;nop;nop

	/* GD -> IE because variable is referenced through @@gottpoff too */
	leal	sg2@@tlsdesc(%ebx), %eax
	call	*sg2@@tlscall(%eax)
	nop;nop;nop;nop

	/* GD -> IE because variable is referenced through @@gotntpoff too */
	leal	sg3@@tlsdesc(%ebx), %eax
	call	*sg3@@tlscall(%eax)
	nop;nop;nop;nop

	/* GD -> IE because variable is referenced through @@gottpoff and
	   @@gotntpoff too */
	leal	sg4@@tlsdesc(%ebx), %eax
	call	*sg4@@tlscall(%eax)
	nop;nop;nop;nop

	/* GD against local variable */
	leal	sl1@@tlsdesc(%ebx), %eax
	call	*sl1@@tlscall(%eax)
	nop;nop;nop;nop

	/* GD -> IE against local variable referenced through @@gottpoff too */
	leal	sl2@@tlsdesc(%ebx), %eax
	call	*sl2@@tlscall(%eax)
	nop;nop;nop;nop

	/* GD -> IE against local variable referenced through @@gotntpoff
	   too */
	leal	sl3@@tlsdesc(%ebx), %eax
	call	*sl3@@tlscall(%eax)
	nop;nop;nop;nop

	/* GD -> IE against local variable referenced through @@gottpoff and
	   @@gotntpoff too */
	leal	sl4@@tlsdesc(%ebx), %eax
	call	*sl4@@tlscall(%eax)
	nop;nop;nop;nop

	/* GD against hidden and local variable */
	leal	sh1@@tlsdesc(%ebx), %eax
	call	*sh1@@tlscall(%eax)
	nop;nop;nop;nop

	/* GD -> IE against hidden and local variable referenced through
	   @@gottpoff too */
	leal	sh2@@tlsdesc(%ebx), %eax
	call	*sh2@@tlscall(%eax)
	nop;nop;nop;nop

	/* GD -> IE against hidden and local variable referenced through
	   @@gotntpoff too */
	leal	sh3@@tlsdesc(%ebx), %eax
	call	*sh3@@tlscall(%eax)
	nop;nop;nop;nop

	/* GD -> IE against hidden and local variable referenced through
	   @@gottpoff and @@gotntpoff too */
	leal	sh4@@tlsdesc(%ebx), %eax
	call	*sh4@@tlscall(%eax)
	nop;nop;nop;nop

	/* GD against hidden but not local variable */
	leal	sH1@@tlsdesc(%ebx), %eax
	call	*sH1@@tlscall(%eax)
	nop;nop;nop;nop

	/* GD -> IE against hidden but not local variable referenced through
	   @@gottpoff too */
	leal	sH2@@tlsdesc(%ebx), %eax
	call	*sH2@@tlscall(%eax)
	nop;nop;nop;nop

	/* GD -> IE against hidden but not local variable referenced through
	   @@gotntpoff too */
	leal	sH3@@tlsdesc(%ebx), %eax
	call	*sH3@@tlscall(%eax)
	nop;nop;nop;nop

	/* GD -> IE against hidden but not local variable referenced through
	   @@gottpoff and @@gotntpoff too */
	leal	sH4@@tlsdesc(%ebx), %eax
	call	*sH4@@tlscall(%eax)
	nop;nop;nop;nop

	/* LD */
	leal	_TLS_MODULE_BASE_@@tlsdesc(%ebx), %eax
	call	*_TLS_MODULE_BASE_@@tlscall(%eax)
	nop;nop
	leal	sl1@@dtpoff(%eax), %edx
	nop;nop
	leal	2+sl2@@dtpoff(%eax), %ecx
	nop;nop;nop;nop

	/* LD against hidden and local variables */
	leal	sh1@@dtpoff(%eax), %edx
	nop;nop
	leal	sh2@@dtpoff+3(%eax), %ecx
	nop;nop;nop;nop

	/* LD against hidden but not local variables */
	leal	sH1@@dtpoff(%eax), %edx
	nop;nop
	leal	sH2@@dtpoff+1(%eax), %ecx
	nop;nop

	/* @@gottpoff IE against global var  */
	movl	%gs:0, %ecx
	nop;nop
	subl	sg2@@gottpoff(%ebx), %ecx
	nop;nop;nop;nop

	/* @@gottpoff IE against global var  */
	movl	%gs:0, %eax
	nop;nop
	subl	sg4@@gottpoff(%ebx), %eax
	nop;nop;nop;nop

	/* @@gotntpoff IE against global var  */
	movl	%gs:0, %ecx
	nop;nop
	addl	sg3@@gotntpoff(%ebx), %ecx
	nop;nop;nop;nop

	/* @@gotntpoff IE against global var  */
	movl	%gs:0, %eax
	nop;nop
	addl	sg4@@gotntpoff(%ebx), %eax
	nop;nop;nop;nop

	/* @@gottpoff IE against local var  */
	movl	%gs:0, %ecx
	nop;nop
	subl	sl2@@gottpoff(%ebx), %ecx
	nop;nop;nop;nop

	/* @@gottpoff IE against local var  */
	movl	%gs:0, %eax
	nop;nop
	subl	sl4@@gottpoff(%ebx), %eax
	nop;nop;nop;nop

	/* @@gotntpoff IE against local var  */
	movl	%gs:0, %ecx
	nop;nop
	addl	sl3@@gotntpoff(%ebx), %ecx
	nop;nop;nop;nop

	/* @@gotntpoff IE against local var  */
	movl	%gs:0, %eax
	nop;nop
	addl	sl4@@gotntpoff(%ebx), %eax
	nop;nop;nop;nop

	/* @@gottpoff IE against hidden and local var  */
	movl	%gs:0, %ecx
	nop;nop
	subl	sh2@@gottpoff(%ebx), %ecx
	nop;nop;nop;nop

	/* @@gottpoff IE against hidden and local var  */
	movl	%gs:0, %eax
	nop;nop
	subl	sh4@@gottpoff(%ebx), %eax
	nop;nop;nop;nop

	/* @@gotntpoff IE against hidden and local var  */
	movl	%gs:0, %ecx
	nop;nop
	addl	sh3@@gotntpoff(%ebx), %ecx
	nop;nop;nop;nop

	/* @@gotntpoff IE against hidden and local var  */
	movl	%gs:0, %eax
	nop;nop
	addl	sh4@@gotntpoff(%ebx), %eax
	nop;nop;nop;nop

	/* @@gottpoff IE against hidden but not local var  */
	movl	%gs:0, %ecx
	nop;nop
	subl	sH2@@gottpoff(%ebx), %ecx
	nop;nop;nop;nop

	/* @@gottpoff IE against hidden but not local var  */
	movl	%gs:0, %eax
	nop;nop
	subl	sH4@@gottpoff(%ebx), %eax
	nop;nop;nop;nop

	/* @@gotntpoff IE against hidden but not local var  */
	movl	%gs:0, %ecx
	nop;nop
	addl	sH3@@gotntpoff(%ebx), %ecx
	nop;nop;nop;nop

	/* @@gotntpoff IE against hidden but not local var  */
	movl	%gs:0, %eax
	nop;nop
	addl	sH4@@gotntpoff(%ebx), %eax
	nop;nop;nop;nop

	/* Direct access through %gs  */

	/* @@gotntpoff IE against global var  */
	movl	sg5@@gotntpoff(%ebx), %ecx
	nop;nop
	movl	%gs:(%ecx), %edx
	nop;nop;nop;nop

	/* @@gotntpoff IE against local var  */
	movl	sl5@@gotntpoff(%ebx), %eax
	nop;nop
	movl	%gs:(%eax), %edx
	nop;nop;nop;nop

	/* @@gotntpoff IE against hidden and local var  */
	movl	sh5@@gotntpoff(%ebx), %edx
	nop;nop
	movl	%gs:(%edx), %edx
	nop;nop;nop;nop

	/* @@gotntpoff IE against hidden but not local var  */
	movl	sH5@@gotntpoff(%ebx), %ecx
	nop;nop
	movl	%gs:(%ecx), %edx
	nop;nop;nop;nop

	movl    -4(%ebp), %ebx
	leave
	ret
@
