head	1.308;
access;
symbols
	binutils-2_24-branch:1.308.0.2
	binutils-2_24-branchpoint:1.308
	binutils-2_21_1:1.267.2.2
	binutils-2_23_2:1.283.2.2
	binutils-2_23_1:1.283.2.1
	binutils-2_23:1.283.2.1
	binutils-2_23-branch:1.283.0.2
	binutils-2_23-branchpoint:1.283
	binutils-2_22_branch:1.280.0.4
	binutils-2_22:1.280
	binutils-2_22-branch:1.280.0.2
	binutils-2_22-branchpoint:1.280
	binutils-2_21:1.267
	binutils-2_21-branch:1.267.0.2
	binutils-2_21-branchpoint:1.267
	binutils-2_20_1:1.247
	binutils-2_20:1.247
	binutils-arc-20081103-branch:1.221.0.6
	binutils-arc-20081103-branchpoint:1.221
	binutils-2_20-branch:1.247.0.2
	binutils-2_20-branchpoint:1.247
	dje-cgen-play1-branch:1.246.0.2
	dje-cgen-play1-branchpoint:1.246
	arc-20081103-branch:1.221.0.4
	arc-20081103-branchpoint:1.221
	binutils-2_19_1:1.221
	binutils-2_19:1.221
	binutils-2_19-branch:1.221.0.2
	binutils-2_19-branchpoint:1.221
	binutils-2_18:1.201.2.1
	binutils-2_18-branch:1.201.0.2
	binutils-2_18-branchpoint:1.201
	binutils-csl-coldfire-4_1-32:1.157.2.3
	binutils-csl-sourcerygxx-4_1-32:1.157.2.3
	binutils-csl-innovasic-fido-3_4_4-33:1.157.2.3
	binutils-csl-sourcerygxx-3_4_4-32:1.140.2.1.2.1
	binutils-csl-coldfire-4_1-30:1.157.2.2
	binutils-csl-sourcerygxx-4_1-30:1.157.2.2
	binutils-csl-coldfire-4_1-28:1.157.2.2
	binutils-csl-sourcerygxx-4_1-29:1.157.2.3
	binutils-csl-sourcerygxx-4_1-28:1.157.2.2
	binutils-csl-arm-2006q3-27:1.157.2.2
	binutils-csl-sourcerygxx-4_1-27:1.157.2.2
	binutils-csl-arm-2006q3-26:1.157.2.2
	binutils-csl-sourcerygxx-4_1-26:1.157.2.2
	binutils-csl-sourcerygxx-4_1-25:1.157.2.2
	binutils-csl-sourcerygxx-4_1-24:1.157.2.2
	binutils-csl-sourcerygxx-4_1-23:1.157.2.2
	binutils-csl-sourcerygxx-4_1-21:1.157.2.2
	binutils-csl-arm-2006q3-21:1.157.2.2
	binutils-csl-sourcerygxx-4_1-22:1.157.2.2
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.157.2.2
	binutils-csl-sourcerygxx-4_1-20:1.157.2.2
	binutils-csl-arm-2006q3-19:1.157.2.2
	binutils-csl-sourcerygxx-4_1-19:1.157.2.2
	binutils-csl-sourcerygxx-4_1-18:1.157.2.2
	binutils-csl-renesas-4_1-9:1.157.2.2
	binutils-csl-sourcerygxx-3_4_4-25:1.140.2.1.2.1
	binutils-csl-renesas-4_1-8:1.157.2.1
	binutils-csl-renesas-4_1-7:1.157.2.1
	binutils-csl-renesas-4_1-6:1.157.2.1
	binutils-csl-sourcerygxx-4_1-17:1.157.2.1
	binutils-csl-sourcerygxx-4_1-14:1.157.2.1
	binutils-csl-sourcerygxx-4_1-15:1.157.2.1
	binutils-csl-sourcerygxx-4_1-13:1.157.2.1
	binutils-2_17:1.159.2.2
	binutils-csl-sourcerygxx-4_1-12:1.157.2.1
	binutils-csl-sourcerygxx-3_4_4-21:1.157.2.1
	binutils-csl-wrs-linux-3_4_4-24:1.140.4.1
	binutils-csl-wrs-linux-3_4_4-23:1.140.4.1
	binutils-csl-sourcerygxx-4_1-9:1.157.2.1
	binutils-csl-sourcerygxx-4_1-8:1.157.2.1
	binutils-csl-sourcerygxx-4_1-7:1.157.2.1
	binutils-csl-arm-2006q1-6:1.157.2.1
	binutils-csl-sourcerygxx-4_1-6:1.157.2.1
	binutils-csl-wrs-linux-3_4_4-22:1.140.4.1
	binutils-csl-coldfire-4_1-11:1.157.2.1
	binutils-csl-sourcerygxx-3_4_4-19:1.157.2.1
	binutils-csl-coldfire-4_1-10:1.157.2.1
	binutils-csl-sourcerygxx-4_1-5:1.157.2.1
	binutils-csl-sourcerygxx-4_1-4:1.157
	binutils-csl-wrs-linux-3_4_4-21:1.140.4.1
	binutils-csl-morpho-4_1-4:1.157
	binutils-csl-sourcerygxx-3_4_4-17:1.157
	binutils-csl-wrs-linux-3_4_4-20:1.140.4.1
	binutils-2_17-branch:1.159.0.2
	binutils-2_17-branchpoint:1.159
	binutils-csl-2_17-branch:1.157.0.2
	binutils-csl-2_17-branchpoint:1.157
	binutils-csl-gxxpro-3_4-branch:1.140.2.1.0.2
	binutils-csl-gxxpro-3_4-branchpoint:1.140.2.1
	binutils-2_16_1:1.140.2.1
	binutils-csl-arm-2005q1b:1.140
	binutils-2_16:1.140
	binutils-csl-arm-2005q1a:1.140
	binutils-csl-arm-2005q1-branch:1.140.0.4
	binutils-csl-arm-2005q1-branchpoint:1.140
	binutils-2_16-branch:1.140.0.2
	binutils-2_16-branchpoint:1.140
	csl-arm-2004-q3d:1.129
	csl-arm-2004-q3:1.122
	binutils-2_15:1.104.6.3
	binutils-2_15-branchpoint:1.104
	csl-arm-2004-q1a:1.112
	csl-arm-2004-q1:1.108
	binutils-2_15-branch:1.104.0.6
	cagney_bfdfile-20040213-branch:1.104.0.4
	cagney_bfdfile-20040213-branchpoint:1.104
	cagney_bigcore-20040122-branch:1.104.0.2
	cagney_bigcore-20040122-branchpoint:1.104
	csl-arm-2003-q4:1.102
	binutils-2_14:1.93
	binutils-2_14-branch:1.93.0.2
	binutils-2_14-branchpoint:1.93
	binutils-2_13_2_1:1.70.2.4
	binutils-2_13_2:1.70.2.4
	binutils-2_13_1:1.70.2.3
	binutils-2_13:1.70.2.1
	binutils-2_13-branchpoint:1.70
	binutils-2_13-branch:1.70.0.2
	binutils-2_12_1:1.60.2.4
	binutils-2_12:1.60.2.3
	binutils-2_12-branch:1.60.0.2
	binutils-2_12-branchpoint:1.60
	cygnus_cvs_20020108_pre:1.60
	binutils-2_11_2:1.33.2.1
	binutils-2_11_1:1.33.2.1
	binutils-2_11:1.33
	x86_64versiong3:1.33
	binutils-2_11-branch:1.33.0.2
	binutils-2_10_1:1.12.2.1
	binutils-2_10:1.12.2.1
	binutils-2_10-branch:1.12.0.2
	binutils-2_10-branchpoint:1.12
	binutils_latest_snapshot:1.308
	repo-unification-2000-02-06:1.10
	binu_ss_19990721:1.6
	binu_ss_19990602:1.2
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.308
date	2013.08.28.09.17.35;	author nickc;	state Exp;
branches;
next	1.307;

1.307
date	2013.08.22.15.28.42;	author nickc;	state Exp;
branches;
next	1.306;

1.306
date	2013.08.15.07.30.14;	author nickc;	state Exp;
branches;
next	1.305;

1.305
date	2013.07.19.10.39.51;	author nickc;	state Exp;
branches;
next	1.304;

1.304
date	2013.06.25.18.02.34;	author macro;	state Exp;
branches;
next	1.303;

1.303
date	2013.06.22.16.44.15;	author rsandifo;	state Exp;
branches;
next	1.302;

1.302
date	2013.06.12.07.52.38;	author nickc;	state Exp;
branches;
next	1.301;

1.301
date	2013.06.10.11.59.44;	author nickc;	state Exp;
branches;
next	1.300;

1.300
date	2013.06.07.15.11.18;	author nickc;	state Exp;
branches;
next	1.299;

1.299
date	2013.04.30.14.01.03;	author nickc;	state Exp;
branches;
next	1.298;

1.298
date	2013.04.30.12.52.58;	author nickc;	state Exp;
branches;
next	1.297;

1.297
date	2013.03.25.18.09.04;	author ktietz;	state Exp;
branches;
next	1.296;

1.296
date	2013.03.21.16.08.06;	author nickc;	state Exp;
branches;
next	1.295;

1.295
date	2013.03.18.02.47.03;	author amodra;	state Exp;
branches;
next	1.294;

1.294
date	2013.02.26.13.06.51;	author nickc;	state Exp;
branches;
next	1.293;

1.293
date	2013.02.10.23.52.51;	author amodra;	state Exp;
branches;
next	1.292;

1.292
date	2013.01.18.17.43.58;	author vapier;	state Exp;
branches;
next	1.291;

1.291
date	2013.01.14.13.37.09;	author amodra;	state Exp;
branches;
next	1.290;

1.290
date	2013.01.07.12.11.11;	author nickc;	state Exp;
branches;
next	1.289;

1.289
date	2012.12.18.20.42.43;	author roland;	state Exp;
branches;
next	1.288;

1.288
date	2012.11.27.17.04.30;	author nickc;	state Exp;
branches;
next	1.287;

1.287
date	2012.11.20.22.16.04;	author hjl;	state Exp;
branches;
next	1.286;

1.286
date	2012.10.23.09.33.55;	author nathan;	state Exp;
branches;
next	1.285;

1.285
date	2012.09.16.22.21.00;	author amodra;	state Exp;
branches;
next	1.284;

1.284
date	2012.08.06.22.27.52;	author macro;	state Exp;
branches;
next	1.283;

1.283
date	2012.07.10.06.50.55;	author hjl;	state Exp;
branches
	1.283.2.1;
next	1.282;

1.282
date	2012.07.02.16.29.07;	author hjl;	state Exp;
branches;
next	1.281;

1.281
date	2012.01.11.09.28.45;	author amodra;	state Exp;
branches;
next	1.280;

1.280
date	2011.08.22.12.35.10;	author matz;	state Exp;
branches;
next	1.279;

1.279
date	2011.08.09.13.10.44;	author mgretton;	state Exp;
branches;
next	1.278;

1.278
date	2011.07.16.07.58.40;	author roland;	state Exp;
branches;
next	1.277;

1.277
date	2011.07.11.15.03.09;	author clm;	state Exp;
branches;
next	1.276;

1.276
date	2011.06.20.13.18.48;	author jakub;	state Exp;
branches;
next	1.275;

1.275
date	2011.05.09.13.23.25;	author pbrook;	state Exp;
branches;
next	1.274;

1.274
date	2011.03.31.08.58.25;	author bernds;	state Exp;
branches;
next	1.273;

1.273
date	2011.03.04.23.44.01;	author hjl;	state Exp;
branches;
next	1.272;

1.272
date	2011.01.21.13.18.19;	author amodra;	state Exp;
branches;
next	1.271;

1.271
date	2011.01.13.13.34.53;	author amodra;	state Exp;
branches;
next	1.270;

1.270
date	2011.01.13.13.29.55;	author amodra;	state Exp;
branches;
next	1.269;

1.269
date	2010.12.20.13.00.12;	author amodra;	state Exp;
branches;
next	1.268;

1.268
date	2010.12.15.14.56.37;	author hjl;	state Exp;
branches;
next	1.267;

1.267
date	2010.10.28.11.40.26;	author amodra;	state Exp;
branches
	1.267.2.1;
next	1.266;

1.266
date	2010.10.06.08.58.58;	author nickc;	state Exp;
branches;
next	1.265;

1.265
date	2010.10.01.08.15.42;	author amodra;	state Exp;
branches;
next	1.264;

1.264
date	2010.09.16.00.06.12;	author amodra;	state Exp;
branches;
next	1.263;

1.263
date	2010.08.31.10.26.11;	author nickc;	state Exp;
branches;
next	1.262;

1.262
date	2010.08.19.05.51.49;	author amodra;	state Exp;
branches;
next	1.261;

1.261
date	2010.07.20.19.25.42;	author vapier;	state Exp;
branches;
next	1.260;

1.260
date	2010.06.08.10.30.56;	author nickc;	state Exp;
branches;
next	1.259;

1.259
date	2010.04.21.16.32.29;	author aph;	state Exp;
branches;
next	1.258;

1.258
date	2010.04.05.09.04.08;	author ktietz;	state Exp;
branches;
next	1.257;

1.257
date	2010.02.27.23.00.41;	author hjl;	state Exp;
branches;
next	1.256;

1.256
date	2009.12.04.07.28.13;	author jiez;	state Exp;
branches;
next	1.255;

1.255
date	2009.11.26.13.45.25;	author nickc;	state Exp;
branches;
next	1.254;

1.254
date	2009.11.10.16.34.53;	author nickc;	state Exp;
branches;
next	1.253;

1.253
date	2009.11.05.15.35.50;	author nickc;	state Exp;
branches;
next	1.252;

1.252
date	2009.10.23.11.40.17;	author ktietz;	state Exp;
branches;
next	1.251;

1.251
date	2009.10.16.15.15.38;	author nickc;	state Exp;
branches;
next	1.250;

1.250
date	2009.10.08.01.00.27;	author amodra;	state Exp;
branches;
next	1.249;

1.249
date	2009.10.07.07.25.35;	author nathan;	state Exp;
branches;
next	1.248;

1.248
date	2009.09.23.13.54.28;	author amodra;	state Exp;
branches;
next	1.247;

1.247
date	2009.07.06.13.48.51;	author nickc;	state Exp;
branches;
next	1.246;

1.246
date	2009.05.27.13.31.24;	author nathan;	state Exp;
branches;
next	1.245;

1.245
date	2009.05.22.11.58.44;	author jules;	state Exp;
branches;
next	1.244;

1.244
date	2009.05.19.16.08.07;	author davek;	state Exp;
branches;
next	1.243;

1.243
date	2009.05.04.12.09.30;	author davek;	state Exp;
branches;
next	1.242;

1.242
date	2009.04.29.17.24.26;	author cgd;	state Exp;
branches;
next	1.241;

1.241
date	2009.04.09.16.06.48;	author nickc;	state Exp;
branches;
next	1.240;

1.240
date	2009.04.08.16.04.50;	author hjl;	state Exp;
branches;
next	1.239;

1.239
date	2009.04.07.08.07.08;	author nickc;	state Exp;
branches;
next	1.238;

1.238
date	2009.04.06.00.47.09;	author kazu;	state Exp;
branches;
next	1.237;

1.237
date	2009.04.02.14.42.40;	author davek;	state Exp;
branches;
next	1.236;

1.236
date	2009.03.14.03.30.25;	author davek;	state Exp;
branches;
next	1.235;

1.235
date	2009.03.03.18.22.10;	author davek;	state Exp;
branches;
next	1.234;

1.234
date	2009.03.02.17.27.35;	author nickc;	state Exp;
branches;
next	1.233;

1.233
date	2009.02.24.22.43.09;	author drow;	state Exp;
branches;
next	1.232;

1.232
date	2009.02.24.18.06.27;	author sandra;	state Exp;
branches;
next	1.231;

1.231
date	2009.02.18.18.23.07;	author davek;	state Exp;
branches;
next	1.230;

1.230
date	2009.02.04.09.13.22;	author nickc;	state Exp;
branches;
next	1.229;

1.229
date	2009.02.03.17.04.53;	author nickc;	state Exp;
branches;
next	1.228;

1.228
date	2009.01.31.11.44.37;	author amodra;	state Exp;
branches;
next	1.227;

1.227
date	2009.01.26.15.23.39;	author nathan;	state Exp;
branches;
next	1.226;

1.226
date	2009.01.16.14.14.06;	author hjl;	state Exp;
branches;
next	1.225;

1.225
date	2009.01.08.13.28.48;	author ktietz;	state Exp;
branches;
next	1.224;

1.224
date	2009.01.03.18.04.16;	author davek;	state Exp;
branches;
next	1.223;

1.223
date	2008.11.26.01.04.17;	author amodra;	state Exp;
branches;
next	1.222;

1.222
date	2008.11.19.16.22.48;	author nickc;	state Exp;
branches;
next	1.221;

1.221
date	2008.07.18.20.49.12;	author jsm28;	state Exp;
branches;
next	1.220;

1.220
date	2008.07.12.08.54.13;	author jiez;	state Exp;
branches;
next	1.219;

1.219
date	2008.07.11.19.24.39;	author jiez;	state Exp;
branches;
next	1.218;

1.218
date	2008.07.06.13.38.36;	author nathan;	state Exp;
branches;
next	1.217;

1.217
date	2008.06.16.15.10.13;	author hp;	state Exp;
branches;
next	1.216;

1.216
date	2008.06.07.11.35.46;	author amodra;	state Exp;
branches;
next	1.215;

1.215
date	2008.06.04.10.07.22;	author nickc;	state Exp;
branches;
next	1.214;

1.214
date	2008.06.04.09.45.05;	author nickc;	state Exp;
branches;
next	1.213;

1.213
date	2008.05.31.16.35.56;	author nickc;	state Exp;
branches;
next	1.212;

1.212
date	2008.05.28.15.38.36;	author nickc;	state Exp;
branches;
next	1.211;

1.211
date	2008.05.21.12.01.35;	author nickc;	state Exp;
branches;
next	1.210;

1.210
date	2008.05.21.10.59.12;	author nickc;	state Exp;
branches;
next	1.209;

1.209
date	2008.05.21.08.09.38;	author nickc;	state Exp;
branches;
next	1.208;

1.208
date	2008.05.08.17.34.36;	author tromey;	state Exp;
branches;
next	1.207;

1.207
date	2008.02.20.15.17.56;	author pbrook;	state Exp;
branches;
next	1.206;

1.206
date	2008.01.25.12.03.37;	author amodra;	state Exp;
branches;
next	1.205;

1.205
date	2008.01.11.09.11.17;	author gingold;	state Exp;
branches;
next	1.204;

1.204
date	2008.01.10.01.12.56;	author amodra;	state Exp;
branches;
next	1.203;

1.203
date	2007.10.01.09.54.57;	author nickc;	state Exp;
branches;
next	1.202;

1.202
date	2007.08.18.01.36.57;	author amodra;	state Exp;
branches;
next	1.201;

1.201
date	2007.07.25.14.56.22;	author nickc;	state Exp;
branches
	1.201.2.1;
next	1.200;

1.200
date	2007.07.13.10.44.26;	author roland;	state Exp;
branches;
next	1.199;

1.199
date	2007.07.09.21.25.33;	author roland;	state Exp;
branches;
next	1.198;

1.198
date	2007.07.05.11.19.55;	author dannysmith;	state Exp;
branches;
next	1.197;

1.197
date	2007.06.18.12.38.22;	author nathan;	state Exp;
branches;
next	1.196;

1.196
date	2007.05.22.09.16.39;	author nickc;	state Exp;
branches;
next	1.195;

1.195
date	2007.05.11.06.39.05;	author amodra;	state Exp;
branches;
next	1.194;

1.194
date	2007.05.03.09.24.16;	author amodra;	state Exp;
branches;
next	1.193;

1.193
date	2007.04.30.14.06.40;	author amodra;	state Exp;
branches;
next	1.192;

1.192
date	2007.03.29.17.16.05;	author rsandifo;	state Exp;
branches;
next	1.191;

1.191
date	2007.03.28.09.08.52;	author rsandifo;	state Exp;
branches;
next	1.190;

1.190
date	2007.03.24.06.49.02;	author amodra;	state Exp;
branches;
next	1.189;

1.189
date	2007.03.22.21.18.34;	author jsm28;	state Exp;
branches;
next	1.188;

1.188
date	2007.03.20.20.19.07;	author pbrook;	state Exp;
branches;
next	1.187;

1.187
date	2007.03.20.14.24.56;	author shinwell;	state Exp;
branches;
next	1.186;

1.186
date	2007.03.15.14.17.20;	author hjl;	state Exp;
branches;
next	1.185;

1.185
date	2007.03.07.22.50.01;	author jsm28;	state Exp;
branches;
next	1.184;

1.184
date	2007.01.29.16.28.40;	author jules;	state Exp;
branches;
next	1.183;

1.183
date	2007.01.19.15.13.29;	author hjl;	state Exp;
branches;
next	1.182;

1.182
date	2007.01.19.14.51.26;	author hjl;	state Exp;
branches;
next	1.181;

1.181
date	2007.01.16.14.56.31;	author hjl;	state Exp;
branches;
next	1.180;

1.180
date	2006.11.20.20.07.51;	author hjl;	state Exp;
branches;
next	1.179;

1.179
date	2006.10.23.03.09.35;	author amodra;	state Exp;
branches;
next	1.178;

1.178
date	2006.10.19.15.47.34;	author nickc;	state Exp;
branches;
next	1.177;

1.177
date	2006.10.17.13.41.48;	author amodra;	state Exp;
branches;
next	1.176;

1.176
date	2006.09.27.04.18.15;	author hjl;	state Exp;
branches;
next	1.175;

1.175
date	2006.09.25.16.26.57;	author bwilson;	state Exp;
branches;
next	1.174;

1.174
date	2006.09.08.13.43.54;	author hjl;	state Exp;
branches;
next	1.173;

1.173
date	2006.09.07.17.16.34;	author hjl;	state Exp;
branches;
next	1.172;

1.172
date	2006.08.22.07.41.05;	author amodra;	state Exp;
branches;
next	1.171;

1.171
date	2006.08.04.14.53.26;	author nickc;	state Exp;
branches;
next	1.170;

1.170
date	2006.07.24.13.49.50;	author nickc;	state Exp;
branches;
next	1.169;

1.169
date	2006.07.10.21.40.22;	author jakub;	state Exp;
branches;
next	1.168;

1.168
date	2006.07.07.11.18.51;	author nickc;	state Exp;
branches;
next	1.167;

1.167
date	2006.07.06.10.46.46;	author nickc;	state Exp;
branches;
next	1.166;

1.166
date	2006.06.27.08.52.38;	author nickc;	state Exp;
branches;
next	1.165;

1.165
date	2006.06.22.13.43.04;	author nickc;	state Exp;
branches;
next	1.164;

1.164
date	2006.06.14.02.43.57;	author amodra;	state Exp;
branches;
next	1.163;

1.163
date	2006.05.30.16.45.31;	author hjl;	state Exp;
branches;
next	1.162;

1.162
date	2006.05.11.16.11.29;	author carlos;	state Exp;
branches;
next	1.161;

1.161
date	2006.05.05.00.51.37;	author amodra;	state Exp;
branches;
next	1.160;

1.160
date	2006.05.02.14.20.46;	author drow;	state Exp;
branches;
next	1.159;

1.159
date	2006.04.07.14.14.46;	author nickc;	state Exp;
branches
	1.159.2.1;
next	1.158;

1.158
date	2006.04.01.04.51.23;	author dannysmith;	state Exp;
branches;
next	1.157;

1.157
date	2006.03.03.09.31.59;	author rsandifo;	state Exp;
branches
	1.157.2.1;
next	1.156;

1.156
date	2006.02.01.21.28.29;	author dannysmith;	state Exp;
branches;
next	1.155;

1.155
date	2006.01.31.22.13.41;	author dannysmith;	state Exp;
branches;
next	1.154;

1.154
date	2006.01.16.16.07.45;	author nickc;	state Exp;
branches;
next	1.153;

1.153
date	2005.11.17.01.01.03;	author mmitchel;	state Exp;
branches;
next	1.152;

1.152
date	2005.11.16.07.17.20;	author amodra;	state Exp;
branches;
next	1.151;

1.151
date	2005.10.24.23.07.12;	author amodra;	state Exp;
branches;
next	1.150;

1.150
date	2005.10.15.14.57.54;	author hjl;	state Exp;
branches;
next	1.149;

1.149
date	2005.10.13.17.29.57;	author mmitchel;	state Exp;
branches;
next	1.148;

1.148
date	2005.09.28.00.34.21;	author hjl;	state Exp;
branches;
next	1.147;

1.147
date	2005.09.08.16.03.26;	author jakub;	state Exp;
branches;
next	1.146;

1.146
date	2005.08.18.03.50.43;	author amodra;	state Exp;
branches;
next	1.145;

1.145
date	2005.08.05.13.52.12;	author hjl;	state Exp;
branches;
next	1.144;

1.144
date	2005.07.29.13.32.45;	author nickc;	state Exp;
branches;
next	1.143;

1.143
date	2005.06.12.18.38.39;	author drow;	state Exp;
branches;
next	1.142;

1.142
date	2005.05.17.14.35.21;	author nickc;	state Exp;
branches;
next	1.141;

1.141
date	2005.04.15.16.37.47;	author jules;	state Exp;
branches;
next	1.140;

1.140
date	2005.02.01.17.31.01;	author nickc;	state Exp;
branches
	1.140.2.1
	1.140.4.1;
next	1.139;

1.139
date	2005.02.01.01.11.27;	author amodra;	state Exp;
branches;
next	1.138;

1.138
date	2005.01.28.17.24.40;	author jules;	state Exp;
branches;
next	1.137;

1.137
date	2005.01.23.07.43.52;	author amodra;	state Exp;
branches;
next	1.136;

1.136
date	2005.01.23.05.36.37;	author amodra;	state Exp;
branches;
next	1.135;

1.135
date	2005.01.21.12.04.25;	author jakub;	state Exp;
branches;
next	1.134;

1.134
date	2005.01.19.11.42.49;	author rsandifo;	state Exp;
branches;
next	1.133;

1.133
date	2004.11.26.09.42.03;	author nickc;	state Exp;
branches;
next	1.132;

1.132
date	2004.11.19.09.38.04;	author nickc;	state Exp;
branches;
next	1.131;

1.131
date	2004.11.19.09.31.53;	author nickc;	state Exp;
branches;
next	1.130;

1.130
date	2004.11.15.23.21.27;	author pbrook;	state Exp;
branches;
next	1.129;

1.129
date	2004.10.26.18.41.51;	author mmitchel;	state Exp;
branches;
next	1.128;

1.128
date	2004.10.26.13.46.04;	author pbrook;	state Exp;
branches;
next	1.127;

1.127
date	2004.10.16.18.13.53;	author drow;	state Exp;
branches;
next	1.126;

1.126
date	2004.10.08.00.22.13;	author bwilson;	state Exp;
branches;
next	1.125;

1.125
date	2004.10.07.14.45.22;	author nickc;	state Exp;
branches;
next	1.124;

1.124
date	2004.10.04.16.45.50;	author hjl;	state Exp;
branches;
next	1.123;

1.123
date	2004.10.04.13.41.14;	author jakub;	state Exp;
branches;
next	1.122;

1.122
date	2004.09.30.17.03.51;	author pbrook;	state Exp;
branches;
next	1.121;

1.121
date	2004.09.17.12.18.16;	author pbrook;	state Exp;
branches;
next	1.120;

1.120
date	2004.08.02.20.03.41;	author ciceron;	state Exp;
branches;
next	1.119;

1.119
date	2004.07.19.16.40.51;	author hjl;	state Exp;
branches;
next	1.118;

1.118
date	2004.07.03.16.07.51;	author cgf;	state Exp;
branches;
next	1.117;

1.117
date	2004.05.23.09.30.31;	author schwab;	state Exp;
branches;
next	1.116;

1.116
date	2004.05.21.15.38.04;	author nickc;	state Exp;
branches;
next	1.115;

1.115
date	2004.05.19.14.15.55;	author amylaar;	state Exp;
branches;
next	1.114;

1.114
date	2004.05.17.22.48.55;	author bwilson;	state Exp;
branches;
next	1.113;

1.113
date	2004.05.07.15.17.57;	author ford;	state Exp;
branches;
next	1.112;

1.112
date	2004.04.30.11.49.45;	author ebotcazou;	state Exp;
branches;
next	1.111;

1.111
date	2004.04.21.20.52.27;	author cgd;	state Exp;
branches;
next	1.110;

1.110
date	2004.04.21.10.47.13;	author nickc;	state Exp;
branches;
next	1.109;

1.109
date	2004.04.21.06.08.47;	author bje;	state Exp;
branches;
next	1.108;

1.108
date	2004.04.01.11.20.04;	author pbrook;	state Exp;
branches;
next	1.107;

1.107
date	2004.03.18.12.50.20;	author amodra;	state Exp;
branches;
next	1.106;

1.106
date	2004.03.01.17.33.36;	author schwab;	state Exp;
branches;
next	1.105;

1.105
date	2004.02.20.15.31.09;	author nathan;	state Exp;
branches;
next	1.104;

1.104
date	2004.01.20.21.08.16;	author dannysmith;	state Exp;
branches
	1.104.6.1;
next	1.103;

1.103
date	2004.01.13.11.10.53;	author nickc;	state Exp;
branches;
next	1.102;

1.102
date	2003.12.02.15.38.46;	author nickc;	state Exp;
branches;
next	1.101;

1.101
date	2003.11.06.11.58.58;	author nickc;	state Exp;
branches;
next	1.100;

1.100
date	2003.10.25.16.26.30;	author kazu;	state Exp;
branches;
next	1.99;

1.99
date	2003.10.11.09.16.20;	author hp;	state Exp;
branches;
next	1.98;

1.98
date	2003.08.20.08.37.15;	author nickc;	state Exp;
branches;
next	1.97;

1.97
date	2003.08.15.09.42.17;	author nickc;	state Exp;
branches;
next	1.96;

1.96
date	2003.07.27.11.58.28;	author amodra;	state Exp;
branches;
next	1.95;

1.95
date	2003.06.25.06.40.26;	author amodra;	state Exp;
branches;
next	1.94;

1.94
date	2003.05.30.15.50.11;	author jakub;	state Exp;
branches;
next	1.93;

1.93
date	2003.04.15.08.51.54;	author nickc;	state Exp;
branches;
next	1.92;

1.92
date	2003.04.06.09.38.11;	author nickc;	state Exp;
branches;
next	1.91;

1.91
date	2003.04.01.15.50.25;	author nickc;	state Exp;
branches;
next	1.90;

1.90
date	2003.04.01.00.34.04;	author aoliva;	state Exp;
branches;
next	1.89;

1.89
date	2003.03.24.15.43.14;	author nickc;	state Exp;
branches;
next	1.88;

1.88
date	2003.03.03.20.00.35;	author aoliva;	state Exp;
branches;
next	1.87;

1.87
date	2003.02.21.10.27.06;	author nickc;	state Exp;
branches;
next	1.86;

1.86
date	2003.02.18.04.52.21;	author amodra;	state Exp;
branches;
next	1.85;

1.85
date	2003.02.17.18.24.37;	author nickc;	state Exp;
branches;
next	1.84;

1.84
date	2003.01.23.09.30.43;	author nickc;	state Exp;
branches;
next	1.83;

1.83
date	2003.01.14.11.25.58;	author nickc;	state Exp;
branches;
next	1.82;

1.82
date	2003.01.06.16.13.57;	author drow;	state Exp;
branches;
next	1.81;

1.81
date	2002.12.30.19.25.04;	author nickc;	state Exp;
branches;
next	1.80;

1.80
date	2002.12.30.11.44.51;	author nickc;	state Exp;
branches;
next	1.79;

1.79
date	2002.12.19.17.25.02;	author nickc;	state Exp;
branches;
next	1.78;

1.78
date	2002.12.18.16.25.02;	author nickc;	state Exp;
branches;
next	1.77;

1.77
date	2002.12.02.00.40.28;	author hjl;	state Exp;
branches;
next	1.76;

1.76
date	2002.11.27.19.42.10;	author hjl;	state Exp;
branches;
next	1.75;

1.75
date	2002.11.14.18.03.15;	author nickc;	state Exp;
branches;
next	1.74;

1.74
date	2002.10.23.13.24.10;	author nickc;	state Exp;
branches;
next	1.73;

1.73
date	2002.08.13.02.27.11;	author amodra;	state Exp;
branches;
next	1.72;

1.72
date	2002.08.08.03.50.17;	author hjl;	state Exp;
branches;
next	1.71;

1.71
date	2002.07.15.02.23.26;	author hjl;	state Exp;
branches;
next	1.70;

1.70
date	2002.06.20.14.44.10;	author nickc;	state Exp;
branches
	1.70.2.1;
next	1.69;

1.69
date	2002.05.22.18.03.07;	author cgf;	state Exp;
branches;
next	1.68;

1.68
date	2002.05.22.05.08.30;	author hjl;	state Exp;
branches;
next	1.67;

1.67
date	2002.04.08.00.24.02;	author amodra;	state Exp;
branches;
next	1.66;

1.66
date	2002.03.08.04.07.21;	author drow;	state Exp;
branches;
next	1.65;

1.65
date	2002.02.17.22.15.40;	author amodra;	state Exp;
branches;
next	1.64;

1.64
date	2002.02.15.03.34.47;	author amodra;	state Exp;
branches;
next	1.63;

1.63
date	2002.02.14.04.24.32;	author amodra;	state Exp;
branches;
next	1.62;

1.62
date	2002.02.12.14.50.06;	author jakub;	state Exp;
branches;
next	1.61;

1.61
date	2002.02.10.00.40.38;	author cgd;	state Exp;
branches;
next	1.60;

1.60
date	2002.01.07.17.32.42;	author nickc;	state Exp;
branches
	1.60.2.1;
next	1.59;

1.59
date	2001.12.19.09.20.22;	author aj;	state Exp;
branches;
next	1.58;

1.58
date	2001.12.18.12.15.35;	author jakub;	state Exp;
branches;
next	1.57;

1.57
date	2001.11.09.20.30.40;	author ciceron;	state Exp;
branches;
next	1.56;

1.56
date	2001.11.02.01.13.09;	author cgd;	state Exp;
branches;
next	1.55;

1.55
date	2001.10.31.14.19.22;	author nickc;	state Exp;
branches;
next	1.54;

1.54
date	2001.10.30.15.20.10;	author nickc;	state Exp;
branches;
next	1.53;

1.53
date	2001.10.03.15.11.48;	author amodra;	state Exp;
branches;
next	1.52;

1.52
date	2001.09.29.12.57.54;	author amodra;	state Exp;
branches;
next	1.51;

1.51
date	2001.09.24.18.35.08;	author nickc;	state Exp;
branches;
next	1.50;

1.50
date	2001.09.24.16.17.46;	author nickc;	state Exp;
branches;
next	1.49;

1.49
date	2001.09.12.15.58.10;	author cwilson;	state Exp;
branches;
next	1.48;

1.48
date	2001.09.05.16.00.13;	author nickc;	state Exp;
branches;
next	1.47;

1.47
date	2001.08.23.15.14.18;	author jakub;	state Exp;
branches;
next	1.46;

1.46
date	2001.08.17.09.51.06;	author amodra;	state Exp;
branches;
next	1.45;

1.45
date	2001.08.12.07.59.28;	author nickc;	state Exp;
branches;
next	1.44;

1.44
date	2001.08.03.01.11.21;	author amodra;	state Exp;
branches;
next	1.43;

1.43
date	2001.08.02.23.12.02;	author cwilson;	state Exp;
branches;
next	1.42;

1.42
date	2001.07.30.18.12.07;	author nickc;	state Exp;
branches;
next	1.41;

1.41
date	2001.06.20.22.40.13;	author hp;	state Exp;
branches;
next	1.40;

1.40
date	2001.06.19.15.22.39;	author hjl;	state Exp;
branches;
next	1.39;

1.39
date	2001.05.22.14.00.18;	author nickc;	state Exp;
branches;
next	1.38;

1.38
date	2001.04.13.02.22.23;	author jtc;	state Exp;
branches;
next	1.37;

1.37
date	2001.03.26.07.02.58;	author aj;	state Exp;
branches;
next	1.36;

1.36
date	2001.03.25.20.32.31;	author nickc;	state Exp;
branches;
next	1.35;

1.35
date	2001.03.17.21.24.26;	author drepper;	state Exp;
branches;
next	1.34;

1.34
date	2001.03.13.06.14.27;	author nickc;	state Exp;
branches;
next	1.33;

1.33
date	2001.01.14.04.36.34;	author amodra;	state Exp;
branches
	1.33.2.1;
next	1.32;

1.32
date	2001.01.07.15.12.04;	author pb;	state Exp;
branches;
next	1.31;

1.31
date	2000.12.28.19.54.33;	author nickc;	state Exp;
branches;
next	1.30;

1.30
date	2000.12.26.20.55.29;	author nickc;	state Exp;
branches;
next	1.29;

1.29
date	2000.12.12.22.37.20;	author dj;	state Exp;
branches;
next	1.28;

1.28
date	2000.12.12.20.52.59;	author nickc;	state Exp;
branches;
next	1.27;

1.27
date	2000.11.06.20.27.26;	author nickc;	state Exp;
branches;
next	1.26;

1.26
date	2000.11.06.19.24.16;	author nickc;	state Exp;
branches;
next	1.25;

1.25
date	2000.10.17.20.10.20;	author cchavva;	state Exp;
branches;
next	1.24;

1.24
date	2000.09.27.17.30.18;	author amodra;	state Exp;
branches;
next	1.23;

1.23
date	2000.09.05.03.05.19;	author amodra;	state Exp;
branches;
next	1.22;

1.22
date	2000.08.25.20.24.10;	author hjl;	state Exp;
branches;
next	1.21;

1.21
date	2000.08.22.19.34.37;	author hjl;	state Exp;
branches;
next	1.20;

1.20
date	2000.07.20.21.18.23;	author hjl;	state Exp;
branches;
next	1.19;

1.19
date	2000.07.20.18.02.56;	author nickc;	state Exp;
branches;
next	1.18;

1.18
date	2000.07.20.03.25.10;	author hjl;	state Exp;
branches;
next	1.17;

1.17
date	2000.06.20.13.29.06;	author twall;	state Exp;
branches;
next	1.16;

1.16
date	2000.05.22.21.58.40;	author nickc;	state Exp;
branches;
next	1.15;

1.15
date	2000.05.17.19.38.53;	author nickc;	state Exp;
branches;
next	1.14;

1.14
date	2000.04.25.00.27.24;	author nickc;	state Exp;
branches;
next	1.13;

1.13
date	2000.04.11.11.39.38;	author amodra;	state Exp;
branches;
next	1.12;

1.12
date	2000.02.29.03.28.57;	author jimb;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2000.02.16.18.53.31;	author twall;	state Exp;
branches;
next	1.10;

1.10
date	2000.01.07.19.46.04;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	2000.01.07.19.06.46;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	2000.01.05.14.12.23;	author clm;	state Exp;
branches;
next	1.7;

1.7
date	99.09.09.16.12.28;	author schwab;	state Exp;
branches;
next	1.6;

1.6
date	99.06.23.11.09.29;	author mmitchel;	state Exp;
branches;
next	1.5;

1.5
date	99.06.22.11.23.06;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	99.06.21.03.30.27;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	99.06.14.01.40.24;	author schwab;	state Exp;
branches;
next	1.2;

1.2
date	99.05.29.19.43.33;	author ian;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.29.06;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.283.2.1
date	2012.09.04.14.37.59;	author gingold;	state Exp;
branches;
next	1.283.2.2;

1.283.2.2
date	2012.12.18.20.43.44;	author roland;	state Exp;
branches;
next	;

1.267.2.1
date	2011.02.01.12.25.46;	author amodra;	state Exp;
branches;
next	1.267.2.2;

1.267.2.2
date	2011.04.27.07.17.42;	author amodra;	state Exp;
branches;
next	;

1.201.2.1
date	2007.08.18.02.27.32;	author amodra;	state Exp;
branches;
next	;

1.159.2.1
date	2006.05.02.14.19.03;	author drow;	state Exp;
branches;
next	1.159.2.2;

1.159.2.2
date	2006.05.05.01.17.30;	author amodra;	state Exp;
branches;
next	;

1.157.2.1
date	2006.05.11.15.17.42;	author carlos;	state Exp;
branches;
next	1.157.2.2;

1.157.2.2
date	2006.08.22.15.08.43;	author jsm28;	state Exp;
branches;
next	1.157.2.3;

1.157.2.3
date	2006.11.29.16.31.09;	author shinwell;	state Exp;
branches;
next	;

1.140.2.1
date	2005.06.12.18.39.24;	author drow;	state Exp;
branches
	1.140.2.1.2.1;
next	;

1.140.2.1.2.1
date	2005.10.13.22.14.22;	author mmitchel;	state Exp;
branches;
next	;

1.140.4.1
date	2005.05.18.13.57.35;	author jules;	state Exp;
branches;
next	;

1.104.6.1
date	2004.02.20.15.32.12;	author nathan;	state Exp;
branches;
next	1.104.6.2;

1.104.6.2
date	2004.04.08.12.41.53;	author amodra;	state Exp;
branches;
next	1.104.6.3;

1.104.6.3
date	2004.04.09.18.28.15;	author drow;	state Exp;
branches;
next	;

1.70.2.1
date	2002.07.30.18.21.03;	author drow;	state Exp;
branches;
next	1.70.2.2;

1.70.2.2
date	2002.08.13.02.28.18;	author amodra;	state Exp;
branches;
next	1.70.2.3;

1.70.2.3
date	2002.09.23.22.15.57;	author drow;	state Exp;
branches;
next	1.70.2.4;

1.70.2.4
date	2002.12.15.22.31.48;	author drow;	state Exp;
branches;
next	;

1.60.2.1
date	2002.02.10.02.49.09;	author cgd;	state Exp;
branches;
next	1.60.2.2;

1.60.2.2
date	2002.02.14.04.25.54;	author amodra;	state Exp;
branches;
next	1.60.2.3;

1.60.2.3
date	2002.03.08.04.05.17;	author drow;	state Exp;
branches;
next	1.60.2.4;

1.60.2.4
date	2002.04.27.12.51.26;	author amodra;	state Exp;
branches;
next	;

1.33.2.1
date	2001.05.23.03.41.11;	author amodra;	state Exp;
branches;
next	1.33.2.2;

1.33.2.2
date	2001.07.31.08.13.14;	author nickc;	state Exp;
branches;
next	;

1.12.2.1
date	2000.04.19.11.31.12;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.06;	author rth;	state Exp;
branches;
next	;


desc
@@


1.308
log
@	PR ld/15896
	* ld.texinfo: Fix uses of MB abbreviation.
@
text
@\input texinfo
@@setfilename ld.info
@@c Copyright 1991-2013 Free Software Foundation, Inc.
@@syncodeindex ky cp
@@c man begin INCLUDE
@@include configdoc.texi
@@c (configdoc.texi is generated by the Makefile)
@@include bfdver.texi
@@c man end

@@c @@smallbook

@@macro gcctabopt{body}
@@code{\body\}
@@end macro

@@c man begin NAME
@@ifset man
@@c Configure for the generation of man pages
@@set UsesEnvVars
@@set GENERIC
@@set ARM
@@set C6X
@@set H8300
@@set HPPA
@@set I960
@@set M68HC11
@@set M68K
@@set MIPS
@@set MMIX
@@set MSP430
@@set POWERPC
@@set POWERPC64
@@set Renesas
@@set SPU
@@set TICOFF
@@set WIN32
@@set XTENSA
@@end ifset
@@c man end

@@ifnottex
@@dircategory Software development
@@direntry
* Ld: (ld).                       The GNU linker.
@@end direntry
@@end ifnottex

@@copying
This file documents the @@sc{gnu} linker LD
@@ifset VERSION_PACKAGE
@@value{VERSION_PACKAGE}
@@end ifset
version @@value{VERSION}.

Copyright @@copyright{} 1991-2013 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.
@@end copying
@@iftex
@@finalout
@@setchapternewpage odd
@@settitle The GNU linker
@@titlepage
@@title The GNU linker
@@sp 1
@@subtitle @@code{ld}
@@ifset VERSION_PACKAGE
@@subtitle @@value{VERSION_PACKAGE}
@@end ifset
@@subtitle Version @@value{VERSION}
@@author Steve Chamberlain
@@author Ian Lance Taylor
@@page

@@tex
{\parskip=0pt
\hfill Red Hat Inc\par
\hfill nickc\@@credhat.com, doc\@@redhat.com\par
\hfill {\it The GNU linker}\par
\hfill Edited by Jeffrey Osier (jeffrey\@@cygnus.com)\par
}
\global\parindent=0pt % Steve likes it this way.
@@end tex

@@vskip 0pt plus 1filll
@@c man begin COPYRIGHT
Copyright @@copyright{} 1991-2013 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no Front-Cover Texts, and with no
Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.
@@c man end

@@end titlepage
@@end iftex
@@contents
@@c FIXME: Talk about importance of *order* of args, cmds to linker!

@@ifnottex
@@node Top
@@top LD
This file documents the @@sc{gnu} linker ld
@@ifset VERSION_PACKAGE
@@value{VERSION_PACKAGE}
@@end ifset
version @@value{VERSION}.

This document is distributed under the terms of the GNU Free
Documentation License version 1.3.  A copy of the license is included
in the section entitled ``GNU Free Documentation License''.

@@menu
* Overview::                    Overview
* Invocation::                  Invocation
* Scripts::                     Linker Scripts
@@ifset GENERIC
* Machine Dependent::           Machine Dependent Features
@@end ifset
@@ifclear GENERIC
@@ifset H8300
* H8/300::                      ld and the H8/300
@@end ifset
@@ifset Renesas
* Renesas::                     ld and other Renesas micros
@@end ifset
@@ifset I960
* i960::                        ld and the Intel 960 family
@@end ifset
@@ifset ARM
* ARM::				ld and the ARM family
@@end ifset
@@ifset M68HC11
* M68HC11/68HC12::              ld and the Motorola 68HC11 and 68HC12 families
@@end ifset
@@ifset HPPA
* HPPA ELF32::                  ld and HPPA 32-bit ELF
@@end ifset
@@ifset M68K
* M68K::                        ld and Motorola 68K family
@@end ifset
@@ifset MIPS
* MIPS::                        ld and MIPS family
@@end ifset
@@ifset POWERPC
* PowerPC ELF32::               ld and PowerPC 32-bit ELF Support
@@end ifset
@@ifset POWERPC64
* PowerPC64 ELF64::             ld and PowerPC64 64-bit ELF Support
@@end ifset
@@ifset SPU
* SPU ELF::			ld and SPU ELF Support
@@end ifset
@@ifset TICOFF
* TI COFF::                     ld and the TI COFF
@@end ifset
@@ifset WIN32
* Win32::                       ld and WIN32 (cygwin/mingw)
@@end ifset
@@ifset XTENSA
* Xtensa::                      ld and Xtensa Processors
@@end ifset
@@end ifclear
@@ifclear SingleFormat
* BFD::                         BFD
@@end ifclear
@@c Following blank line required for remaining bug in makeinfo conds/menus

* Reporting Bugs::              Reporting Bugs
* MRI::                         MRI Compatible Script Files
* GNU Free Documentation License::  GNU Free Documentation License
* LD Index::                       LD Index
@@end menu
@@end ifnottex

@@node Overview
@@chapter Overview

@@cindex @@sc{gnu} linker
@@cindex what is this?

@@ifset man
@@c man begin SYNOPSIS
ld [@@b{options}] @@var{objfile} @@dots{}
@@c man end

@@c man begin SEEALSO
ar(1), nm(1), objcopy(1), objdump(1), readelf(1) and
the Info entries for @@file{binutils} and
@@file{ld}.
@@c man end
@@end ifset

@@c man begin DESCRIPTION

@@command{ld} combines a number of object and archive files, relocates
their data and ties up symbol references. Usually the last step in
compiling a program is to run @@command{ld}.

@@command{ld} accepts Linker Command Language files written in
a superset of AT&T's Link Editor Command Language syntax,
to provide explicit and total control over the linking process.

@@ifset man
@@c For the man only
This man page does not describe the command language; see the
@@command{ld} entry in @@code{info} for full details on the command
language and on other aspects of the GNU linker.
@@end ifset

@@ifclear SingleFormat
This version of @@command{ld} uses the general purpose BFD libraries
to operate on object files. This allows @@command{ld} to read, combine, and
write object files in many different formats---for example, COFF or
@@code{a.out}.  Different formats may be linked together to produce any
available kind of object file.  @@xref{BFD}, for more information.
@@end ifclear

Aside from its flexibility, the @@sc{gnu} linker is more helpful than other
linkers in providing diagnostic information.  Many linkers abandon
execution immediately upon encountering an error; whenever possible,
@@command{ld} continues executing, allowing you to identify other errors
(or, in some cases, to get an output file in spite of the error).

@@c man end

@@node Invocation
@@chapter Invocation

@@c man begin DESCRIPTION

The @@sc{gnu} linker @@command{ld} is meant to cover a broad range of situations,
and to be as compatible as possible with other linkers.  As a result,
you have many choices to control its behavior.

@@c man end

@@ifset UsesEnvVars
@@menu
* Options::                     Command Line Options
* Environment::                 Environment Variables
@@end menu

@@node Options
@@section Command Line Options
@@end ifset

@@cindex command line
@@cindex options

@@c man begin OPTIONS

The linker supports a plethora of command-line options, but in actual
practice few of them are used in any particular context.
@@cindex standard Unix system
For instance, a frequent use of @@command{ld} is to link standard Unix
object files on a standard, supported Unix system.  On such a system, to
link a file @@code{hello.o}:

@@smallexample
ld -o @@var{output} /lib/crt0.o hello.o -lc
@@end smallexample

This tells @@command{ld} to produce a file called @@var{output} as the
result of linking the file @@code{/lib/crt0.o} with @@code{hello.o} and
the library @@code{libc.a}, which will come from the standard search
directories.  (See the discussion of the @@samp{-l} option below.)

Some of the command-line options to @@command{ld} may be specified at any
point in the command line.  However, options which refer to files, such
as @@samp{-l} or @@samp{-T}, cause the file to be read at the point at
which the option appears in the command line, relative to the object
files and other file options.  Repeating non-file options with a
different argument will either have no further effect, or override prior
occurrences (those further to the left on the command line) of that
option.  Options which may be meaningfully specified more than once are
noted in the descriptions below.

@@cindex object files
Non-option arguments are object files or archives which are to be linked
together.  They may follow, precede, or be mixed in with command-line
options, except that an object file argument may not be placed between
an option and its argument.

Usually the linker is invoked with at least one object file, but you can
specify other forms of binary input files using @@samp{-l}, @@samp{-R},
and the script command language.  If @@emph{no} binary input files at all
are specified, the linker does not produce any output, and issues the
message @@samp{No input files}.

If the linker cannot recognize the format of an object file, it will
assume that it is a linker script.  A script specified in this way
augments the main linker script used for the link (either the default
linker script or the one specified by using @@samp{-T}).  This feature
permits the linker to link against a file which appears to be an object
or an archive, but actually merely defines some symbol values, or uses
@@code{INPUT} or @@code{GROUP} to load other objects.  Specifying a
script in this way merely augments the main linker script, with the
extra commands placed after the main script; use the @@samp{-T} option
to replace the default linker script entirely, but note the effect of
the @@code{INSERT} command.  @@xref{Scripts}.

For options whose names are a single letter,
option arguments must either follow the option letter without intervening
whitespace, or be given as separate arguments immediately following the
option that requires them.

For options whose names are multiple letters, either one dash or two can
precede the option name; for example, @@samp{-trace-symbol} and
@@samp{--trace-symbol} are equivalent.  Note---there is one exception to
this rule.  Multiple letter options that start with a lower case 'o' can
only be preceded by two dashes.  This is to reduce confusion with the
@@samp{-o} option.  So for example @@samp{-omagic} sets the output file
name to @@samp{magic} whereas @@samp{--omagic} sets the NMAGIC flag on the
output.

Arguments to multiple-letter options must either be separated from the
option name by an equals sign, or be given as separate arguments
immediately following the option that requires them.  For example,
@@samp{--trace-symbol foo} and @@samp{--trace-symbol=foo} are equivalent.
Unique abbreviations of the names of multiple-letter options are
accepted.

Note---if the linker is being invoked indirectly, via a compiler driver
(e.g. @@samp{gcc}) then all the linker command line options should be
prefixed by @@samp{-Wl,} (or whatever is appropriate for the particular
compiler driver) like this:

@@smallexample
  gcc -Wl,--start-group foo.o bar.o -Wl,--end-group
@@end smallexample

This is important, because otherwise the compiler driver program may
silently drop the linker options, resulting in a bad link.  Confusion
may also arise when passing options that require values through a
driver, as the use of a space between option and argument acts as
a separator, and causes the driver to pass only the option to the linker
and the argument to the compiler.  In this case, it is simplest to use
the joined forms of both single- and multiple-letter options, such as:

@@smallexample
  gcc foo.o bar.o -Wl,-eENTRY -Wl,-Map=a.map
@@end smallexample

Here is a table of the generic command line switches accepted by the GNU
linker:

@@table @@gcctabopt
@@include at-file.texi

@@kindex -a @@var{keyword}
@@item -a @@var{keyword}
This option is supported for HP/UX compatibility.  The @@var{keyword}
argument must be one of the strings @@samp{archive}, @@samp{shared}, or
@@samp{default}.  @@samp{-aarchive} is functionally equivalent to
@@samp{-Bstatic}, and the other two keywords are functionally equivalent
to @@samp{-Bdynamic}.  This option may be used any number of times.

@@kindex --audit @@var{AUDITLIB}
@@item --audit @@var{AUDITLIB}
Adds @@var{AUDITLIB} to the @@code{DT_AUDIT} entry of the dynamic section.
@@var{AUDITLIB} is not checked for existence, nor will it use the DT_SONAME
specified in the library.  If specified multiple times @@code{DT_AUDIT}
will contain a colon separated list of audit interfaces to use. If the linker
finds an object with an audit entry while searching for shared libraries,
it will add a corresponding @@code{DT_DEPAUDIT} entry in the output file.
This option is only meaningful on ELF platforms supporting the rtld-audit
interface.

@@ifset I960
@@cindex architectures
@@kindex -A @@var{arch}
@@item -A @@var{architecture}
@@kindex --architecture=@@var{arch}
@@itemx --architecture=@@var{architecture}
In the current release of @@command{ld}, this option is useful only for the
Intel 960 family of architectures.  In that @@command{ld} configuration, the
@@var{architecture} argument identifies the particular architecture in
the 960 family, enabling some safeguards and modifying the
archive-library search path.  @@xref{i960,,@@command{ld} and the Intel 960
family}, for details.

Future releases of @@command{ld} may support similar functionality for
other architecture families.
@@end ifset

@@ifclear SingleFormat
@@cindex binary input format
@@kindex -b @@var{format}
@@kindex --format=@@var{format}
@@cindex input format
@@cindex input format
@@item -b @@var{input-format}
@@itemx --format=@@var{input-format}
@@command{ld} may be configured to support more than one kind of object
file.  If your @@command{ld} is configured this way, you can use the
@@samp{-b} option to specify the binary format for input object files
that follow this option on the command line.  Even when @@command{ld} is
configured to support alternative object formats, you don't usually need
to specify this, as @@command{ld} should be configured to expect as a
default input format the most usual format on each machine.
@@var{input-format} is a text string, the name of a particular format
supported by the BFD libraries.  (You can list the available binary
formats with @@samp{objdump -i}.)
@@xref{BFD}.

You may want to use this option if you are linking files with an unusual
binary format.  You can also use @@samp{-b} to switch formats explicitly (when
linking object files of different formats), by including
@@samp{-b @@var{input-format}} before each group of object files in a
particular format.

The default format is taken from the environment variable
@@code{GNUTARGET}.
@@ifset UsesEnvVars
@@xref{Environment}.
@@end ifset
You can also define the input format from a script, using the command
@@code{TARGET};
@@ifclear man
see @@ref{Format Commands}.
@@end ifclear
@@end ifclear

@@kindex -c @@var{MRI-cmdfile}
@@kindex --mri-script=@@var{MRI-cmdfile}
@@cindex compatibility, MRI
@@item -c @@var{MRI-commandfile}
@@itemx --mri-script=@@var{MRI-commandfile}
For compatibility with linkers produced by MRI, @@command{ld} accepts script
files written in an alternate, restricted command language, described in
@@ifclear man
@@ref{MRI,,MRI Compatible Script Files}.
@@end ifclear
@@ifset man
the MRI Compatible Script Files section of GNU ld documentation.
@@end ifset
Introduce MRI script files with
the option @@samp{-c}; use the @@samp{-T} option to run linker
scripts written in the general-purpose @@command{ld} scripting language.
If @@var{MRI-cmdfile} does not exist, @@command{ld} looks for it in the directories
specified by any @@samp{-L} options.

@@cindex common allocation
@@kindex -d
@@kindex -dc
@@kindex -dp
@@item -d
@@itemx -dc
@@itemx -dp
These three options are equivalent; multiple forms are supported for
compatibility with other linkers.  They assign space to common symbols
even if a relocatable output file is specified (with @@samp{-r}).  The
script command @@code{FORCE_COMMON_ALLOCATION} has the same effect.
@@xref{Miscellaneous Commands}.

@@kindex --depaudit @@var{AUDITLIB}
@@kindex -P @@var{AUDITLIB}
@@item --depaudit @@var{AUDITLIB}
@@itemx -P @@var{AUDITLIB}
Adds @@var{AUDITLIB} to the @@code{DT_DEPAUDIT} entry of the dynamic section.
@@var{AUDITLIB} is not checked for existence, nor will it use the DT_SONAME
specified in the library.  If specified multiple times @@code{DT_DEPAUDIT}
will contain a colon separated list of audit interfaces to use.  This
option is only meaningful on ELF platforms supporting the rtld-audit interface.
The -P option is provided for Solaris compatibility.

@@cindex entry point, from command line
@@kindex -e @@var{entry}
@@kindex --entry=@@var{entry}
@@item -e @@var{entry}
@@itemx --entry=@@var{entry}
Use @@var{entry} as the explicit symbol for beginning execution of your
program, rather than the default entry point.  If there is no symbol
named @@var{entry}, the linker will try to parse @@var{entry} as a number,
and use that as the entry address (the number will be interpreted in
base 10; you may use a leading @@samp{0x} for base 16, or a leading
@@samp{0} for base 8).  @@xref{Entry Point}, for a discussion of defaults
and other ways of specifying the entry point.

@@kindex --exclude-libs
@@item --exclude-libs @@var{lib},@@var{lib},...
Specifies a list of archive libraries from which symbols should not be automatically
exported.  The library names may be delimited by commas or colons.  Specifying
@@code{--exclude-libs ALL} excludes symbols in all archive libraries from
automatic export.  This option is available only for the i386 PE targeted
port of the linker and for ELF targeted ports.  For i386 PE, symbols
explicitly listed in a .def file are still exported, regardless of this
option.  For ELF targeted ports, symbols affected by this option will
be treated as hidden.

@@kindex --exclude-modules-for-implib
@@item --exclude-modules-for-implib @@var{module},@@var{module},...
Specifies a list of object files or archive members, from which symbols
should not be automatically exported, but which should be copied wholesale
into the import library being generated during the link.  The module names
may be delimited by commas or colons, and must match exactly the filenames
used by @@command{ld} to open the files; for archive members, this is simply
the member name, but for object files the name listed must include and
match precisely any path used to specify the input file on the linker's
command-line.  This option is available only for the i386 PE targeted port
of the linker.  Symbols explicitly listed in a .def file are still exported,
regardless of this option.

@@cindex dynamic symbol table
@@kindex -E
@@kindex --export-dynamic
@@kindex --no-export-dynamic
@@item -E
@@itemx --export-dynamic
@@itemx --no-export-dynamic
When creating a dynamically linked executable, using the @@option{-E}
option or the @@option{--export-dynamic} option causes the linker to add
all symbols to the dynamic symbol table.  The dynamic symbol table is the
set of symbols which are visible from dynamic objects at run time.

If you do not use either of these options (or use the
@@option{--no-export-dynamic} option to restore the default behavior), the
dynamic symbol table will normally contain only those symbols which are
referenced by some dynamic object mentioned in the link.

If you use @@code{dlopen} to load a dynamic object which needs to refer
back to the symbols defined by the program, rather than some other
dynamic object, then you will probably need to use this option when
linking the program itself.

You can also use the dynamic list to control what symbols should
be added to the dynamic symbol table if the output format supports it.
See the description of @@samp{--dynamic-list}.

Note that this option is specific to ELF targeted ports.  PE targets
support a similar function to export all symbols from a DLL or EXE; see
the description of @@samp{--export-all-symbols} below.

@@ifclear SingleFormat
@@cindex big-endian objects
@@cindex endianness
@@kindex -EB
@@item -EB
Link big-endian objects.  This affects the default output format.

@@cindex little-endian objects
@@kindex -EL
@@item -EL
Link little-endian objects.  This affects the default output format.
@@end ifclear

@@kindex -f @@var{name}
@@kindex --auxiliary=@@var{name}
@@item -f @@var{name}
@@itemx --auxiliary=@@var{name}
When creating an ELF shared object, set the internal DT_AUXILIARY field
to the specified name.  This tells the dynamic linker that the symbol
table of the shared object should be used as an auxiliary filter on the
symbol table of the shared object @@var{name}.

If you later link a program against this filter object, then, when you
run the program, the dynamic linker will see the DT_AUXILIARY field.  If
the dynamic linker resolves any symbols from the filter object, it will
first check whether there is a definition in the shared object
@@var{name}.  If there is one, it will be used instead of the definition
in the filter object.  The shared object @@var{name} need not exist.
Thus the shared object @@var{name} may be used to provide an alternative
implementation of certain functions, perhaps for debugging or for
machine specific performance.

This option may be specified more than once.  The DT_AUXILIARY entries
will be created in the order in which they appear on the command line.

@@kindex -F @@var{name}
@@kindex --filter=@@var{name}
@@item -F @@var{name}
@@itemx --filter=@@var{name}
When creating an ELF shared object, set the internal DT_FILTER field to
the specified name.  This tells the dynamic linker that the symbol table
of the shared object which is being created should be used as a filter
on the symbol table of the shared object @@var{name}.

If you later link a program against this filter object, then, when you
run the program, the dynamic linker will see the DT_FILTER field.  The
dynamic linker will resolve symbols according to the symbol table of the
filter object as usual, but it will actually link to the definitions
found in the shared object @@var{name}.  Thus the filter object can be
used to select a subset of the symbols provided by the object
@@var{name}.

Some older linkers used the @@option{-F} option throughout a compilation
toolchain for specifying object-file format for both input and output
object files.
@@ifclear SingleFormat
The @@sc{gnu} linker uses other mechanisms for this purpose: the
@@option{-b}, @@option{--format}, @@option{--oformat} options, the
@@code{TARGET} command in linker scripts, and the @@code{GNUTARGET}
environment variable.
@@end ifclear
The @@sc{gnu} linker will ignore the @@option{-F} option when not
creating an ELF shared object.

@@cindex finalization function
@@kindex -fini=@@var{name}
@@item -fini=@@var{name}
When creating an ELF executable or shared object, call NAME when the
executable or shared object is unloaded, by setting DT_FINI to the
address of the function.  By default, the linker uses @@code{_fini} as
the function to call.

@@kindex -g
@@item -g
Ignored.  Provided for compatibility with other tools.

@@kindex -G @@var{value}
@@kindex --gpsize=@@var{value}
@@cindex object size
@@item -G @@var{value}
@@itemx --gpsize=@@var{value}
Set the maximum size of objects to be optimized using the GP register to
@@var{size}.  This is only meaningful for object file formats such as
MIPS ELF that support putting large and small objects into different
sections.  This is ignored for other object file formats.

@@cindex runtime library name
@@kindex -h @@var{name}
@@kindex -soname=@@var{name}
@@item -h @@var{name}
@@itemx -soname=@@var{name}
When creating an ELF shared object, set the internal DT_SONAME field to
the specified name.  When an executable is linked with a shared object
which has a DT_SONAME field, then when the executable is run the dynamic
linker will attempt to load the shared object specified by the DT_SONAME
field rather than the using the file name given to the linker.

@@kindex -i
@@cindex incremental link
@@item -i
Perform an incremental link (same as option @@samp{-r}).

@@cindex initialization function
@@kindex -init=@@var{name}
@@item -init=@@var{name}
When creating an ELF executable or shared object, call NAME when the
executable or shared object is loaded, by setting DT_INIT to the address
of the function.  By default, the linker uses @@code{_init} as the
function to call.

@@cindex archive files, from cmd line
@@kindex -l @@var{namespec}
@@kindex --library=@@var{namespec}
@@item -l @@var{namespec}
@@itemx --library=@@var{namespec}
Add the archive or object file specified by @@var{namespec} to the
list of files to link.  This option may be used any number of times.
If @@var{namespec} is of the form @@file{:@@var{filename}}, @@command{ld}
will search the library path for a file called @@var{filename}, otherwise it
will search the library path for a file called @@file{lib@@var{namespec}.a}.

On systems which support shared libraries, @@command{ld} may also search for
files other than @@file{lib@@var{namespec}.a}.  Specifically, on ELF
and SunOS systems, @@command{ld} will search a directory for a library
called @@file{lib@@var{namespec}.so} before searching for one called
@@file{lib@@var{namespec}.a}.  (By convention, a @@code{.so} extension
indicates a shared library.)  Note that this behavior does not apply
to @@file{:@@var{filename}}, which always specifies a file called
@@var{filename}.

The linker will search an archive only once, at the location where it is
specified on the command line.  If the archive defines a symbol which
was undefined in some object which appeared before the archive on the
command line, the linker will include the appropriate file(s) from the
archive.  However, an undefined symbol in an object appearing later on
the command line will not cause the linker to search the archive again.

See the @@option{-(} option for a way to force the linker to search
archives multiple times.

You may list the same archive multiple times on the command line.

@@ifset GENERIC
This type of archive searching is standard for Unix linkers.  However,
if you are using @@command{ld} on AIX, note that it is different from the
behaviour of the AIX linker.
@@end ifset

@@cindex search directory, from cmd line
@@kindex -L @@var{dir}
@@kindex --library-path=@@var{dir}
@@item -L @@var{searchdir}
@@itemx --library-path=@@var{searchdir}
Add path @@var{searchdir} to the list of paths that @@command{ld} will search
for archive libraries and @@command{ld} control scripts.  You may use this
option any number of times.  The directories are searched in the order
in which they are specified on the command line.  Directories specified
on the command line are searched before the default directories.  All
@@option{-L} options apply to all @@option{-l} options, regardless of the
order in which the options appear.  @@option{-L} options do not affect
how @@command{ld} searches for a linker script unless @@option{-T}
option is specified.

If @@var{searchdir} begins with @@code{=}, then the @@code{=} will be replaced
by the @@dfn{sysroot prefix}, a path specified when the linker is configured.

@@ifset UsesEnvVars
The default set of paths searched (without being specified with
@@samp{-L}) depends on which emulation mode @@command{ld} is using, and in
some cases also on how it was configured.  @@xref{Environment}.
@@end ifset

The paths can also be specified in a link script with the
@@code{SEARCH_DIR} command.  Directories specified this way are searched
at the point in which the linker script appears in the command line.

@@cindex emulation
@@kindex -m @@var{emulation}
@@item -m @@var{emulation}
Emulate the @@var{emulation} linker.  You can list the available
emulations with the @@samp{--verbose} or @@samp{-V} options.

If the @@samp{-m} option is not used, the emulation is taken from the
@@code{LDEMULATION} environment variable, if that is defined.

Otherwise, the default emulation depends upon how the linker was
configured.

@@cindex link map
@@kindex -M
@@kindex --print-map
@@item -M
@@itemx --print-map
Print a link map to the standard output.  A link map provides
information about the link, including the following:

@@itemize @@bullet
@@item
Where object files are mapped into memory.
@@item
How common symbols are allocated.
@@item
All archive members included in the link, with a mention of the symbol
which caused the archive member to be brought in.
@@item
The values assigned to symbols.

Note - symbols whose values are computed by an expression which
involves a reference to a previous value of the same symbol may not
have correct result displayed in the link map.  This is because the
linker discards intermediate results and only retains the final value
of an expression.  Under such circumstances the linker will display
the final value enclosed by square brackets.  Thus for example a
linker script containing:

@@smallexample
   foo = 1
   foo = foo * 4
   foo = foo + 8
@@end smallexample

will produce the following output in the link map if the @@option{-M}
option is used:

@@smallexample
   0x00000001                foo = 0x1
   [0x0000000c]                foo = (foo * 0x4)
   [0x0000000c]                foo = (foo + 0x8)
@@end smallexample

See @@ref{Expressions} for more information about expressions in linker
scripts.
@@end itemize

@@kindex -n
@@cindex read-only text
@@cindex NMAGIC
@@kindex --nmagic
@@item -n
@@itemx --nmagic
Turn off page alignment of sections, and disable linking against shared
libraries.  If the output format supports Unix style magic numbers,
mark the output as @@code{NMAGIC}.

@@kindex -N
@@kindex --omagic
@@cindex read/write from cmd line
@@cindex OMAGIC
@@item -N
@@itemx --omagic
Set the text and data sections to be readable and writable.  Also, do
not page-align the data segment, and disable linking against shared
libraries.  If the output format supports Unix style magic numbers,
mark the output as @@code{OMAGIC}. Note: Although a writable text section
is allowed for PE-COFF targets, it does not conform to the format
specification published by Microsoft.

@@kindex --no-omagic
@@cindex OMAGIC
@@item --no-omagic
This option negates most of the effects of the @@option{-N} option.  It
sets the text section to be read-only, and forces the data segment to
be page-aligned.  Note - this option does not enable linking against
shared libraries.  Use @@option{-Bdynamic} for this.

@@kindex -o @@var{output}
@@kindex --output=@@var{output}
@@cindex naming the output file
@@item -o @@var{output}
@@itemx --output=@@var{output}
Use @@var{output} as the name for the program produced by @@command{ld}; if this
option is not specified, the name @@file{a.out} is used by default.  The
script command @@code{OUTPUT} can also specify the output file name.

@@kindex -O @@var{level}
@@cindex generating optimized output
@@item -O @@var{level}
If @@var{level} is a numeric values greater than zero @@command{ld} optimizes
the output.  This might take significantly longer and therefore probably
should only be enabled for the final binary.  At the moment this
option only affects ELF shared library generation.  Future releases of
the linker may make more use of this option.  Also currently there is
no difference in the linker's behaviour for different non-zero values
of this option.  Again this may change with future releases.

@@kindex -q
@@kindex --emit-relocs
@@cindex retain relocations in final executable
@@item -q
@@itemx --emit-relocs
Leave relocation sections and contents in fully linked executables.
Post link analysis and optimization tools may need this information in
order to perform correct modifications of executables.  This results
in larger executables.

This option is currently only supported on ELF platforms.

@@kindex --force-dynamic
@@cindex forcing the creation of dynamic sections
@@item --force-dynamic
Force the output file to have dynamic sections.  This option is specific
to VxWorks targets.

@@cindex partial link
@@cindex relocatable output
@@kindex -r
@@kindex --relocatable
@@item -r
@@itemx --relocatable
Generate relocatable output---i.e., generate an output file that can in
turn serve as input to @@command{ld}.  This is often called @@dfn{partial
linking}.  As a side effect, in environments that support standard Unix
magic numbers, this option also sets the output file's magic number to
@@code{OMAGIC}.
@@c ; see @@option{-N}.
If this option is not specified, an absolute file is produced.  When
linking C++ programs, this option @@emph{will not} resolve references to
constructors; to do that, use @@samp{-Ur}.

When an input file does not have the same format as the output file,
partial linking is only supported if that input file does not contain any
relocations.  Different output formats can have further restrictions; for
example some @@code{a.out}-based formats do not support partial linking
with input files in other formats at all.

This option does the same thing as @@samp{-i}.

@@kindex -R @@var{file}
@@kindex --just-symbols=@@var{file}
@@cindex symbol-only input
@@item -R @@var{filename}
@@itemx --just-symbols=@@var{filename}
Read symbol names and their addresses from @@var{filename}, but do not
relocate it or include it in the output.  This allows your output file
to refer symbolically to absolute locations of memory defined in other
programs.  You may use this option more than once.

For compatibility with other ELF linkers, if the @@option{-R} option is
followed by a directory name, rather than a file name, it is treated as
the @@option{-rpath} option.

@@kindex -s
@@kindex --strip-all
@@cindex strip all symbols
@@item -s
@@itemx --strip-all
Omit all symbol information from the output file.

@@kindex -S
@@kindex --strip-debug
@@cindex strip debugger symbols
@@item -S
@@itemx --strip-debug
Omit debugger symbol information (but not all symbols) from the output file.

@@kindex -t
@@kindex --trace
@@cindex input files, displaying
@@item -t
@@itemx --trace
Print the names of the input files as @@command{ld} processes them.

@@kindex -T @@var{script}
@@kindex --script=@@var{script}
@@cindex script files
@@item -T @@var{scriptfile}
@@itemx --script=@@var{scriptfile}
Use @@var{scriptfile} as the linker script.  This script replaces
@@command{ld}'s default linker script (rather than adding to it), so
@@var{commandfile} must specify everything necessary to describe the
output file.  @@xref{Scripts}.  If @@var{scriptfile} does not exist in
the current directory, @@code{ld} looks for it in the directories
specified by any preceding @@samp{-L} options.  Multiple @@samp{-T}
options accumulate.

@@kindex -dT @@var{script}
@@kindex --default-script=@@var{script}
@@cindex script files
@@item -dT @@var{scriptfile}
@@itemx --default-script=@@var{scriptfile}
Use @@var{scriptfile} as the default linker script.  @@xref{Scripts}.

This option is similar to the @@option{--script} option except that
processing of the script is delayed until after the rest of the
command line has been processed.  This allows options placed after the
@@option{--default-script} option on the command line to affect the
behaviour of the linker script, which can be important when the linker
command line cannot be directly controlled by the user.  (eg because
the command line is being constructed by another tool, such as
@@samp{gcc}).

@@kindex -u @@var{symbol}
@@kindex --undefined=@@var{symbol}
@@cindex undefined symbol
@@item -u @@var{symbol}
@@itemx --undefined=@@var{symbol}
Force @@var{symbol} to be entered in the output file as an undefined
symbol.  Doing this may, for example, trigger linking of additional
modules from standard libraries.  @@samp{-u} may be repeated with
different option arguments to enter additional undefined symbols.  This
option is equivalent to the @@code{EXTERN} linker script command.

@@kindex -Ur
@@cindex constructors
@@item -Ur
For anything other than C++ programs, this option is equivalent to
@@samp{-r}: it generates relocatable output---i.e., an output file that can in
turn serve as input to @@command{ld}.  When linking C++ programs, @@samp{-Ur}
@@emph{does} resolve references to constructors, unlike @@samp{-r}.
It does not work to use @@samp{-Ur} on files that were themselves linked
with @@samp{-Ur}; once the constructor table has been built, it cannot
be added to.  Use @@samp{-Ur} only for the last partial link, and
@@samp{-r} for the others.

@@kindex --unique[=@@var{SECTION}]
@@item --unique[=@@var{SECTION}]
Creates a separate output section for every input section matching
@@var{SECTION}, or if the optional wildcard @@var{SECTION} argument is
missing, for every orphan input section.  An orphan section is one not
specifically mentioned in a linker script.  You may use this option
multiple times on the command line;  It prevents the normal merging of
input sections with the same name, overriding output section assignments
in a linker script.

@@kindex -v
@@kindex -V
@@kindex --version
@@cindex version
@@item -v
@@itemx --version
@@itemx -V
Display the version number for @@command{ld}.  The @@option{-V} option also
lists the supported emulations.

@@kindex -x
@@kindex --discard-all
@@cindex deleting local symbols
@@item -x
@@itemx --discard-all
Delete all local symbols.

@@kindex -X
@@kindex --discard-locals
@@cindex local symbols, deleting
@@item -X
@@itemx --discard-locals
Delete all temporary local symbols.  (These symbols start with
system-specific local label prefixes, typically @@samp{.L} for ELF systems
or @@samp{L} for traditional a.out systems.)

@@kindex -y @@var{symbol}
@@kindex --trace-symbol=@@var{symbol}
@@cindex symbol tracing
@@item -y @@var{symbol}
@@itemx --trace-symbol=@@var{symbol}
Print the name of each linked file in which @@var{symbol} appears.  This
option may be given any number of times.  On many systems it is necessary
to prepend an underscore.

This option is useful when you have an undefined symbol in your link but
don't know where the reference is coming from.

@@kindex -Y @@var{path}
@@item -Y @@var{path}
Add @@var{path} to the default library search path.  This option exists
for Solaris compatibility.

@@kindex -z @@var{keyword}
@@item -z @@var{keyword}
The recognized keywords are:
@@table @@samp

@@item combreloc
Combines multiple reloc sections and sorts them to make dynamic symbol
lookup caching possible.

@@item defs
Disallows undefined symbols in object files.  Undefined symbols in
shared libraries are still allowed.

@@item execstack
Marks the object as requiring executable stack.

@@item global
This option is only meaningful when building a shared object.  It makes
the symbols defined by this shared object available for symbol resolution
of subsequently loaded libraries.

@@item initfirst
This option is only meaningful when building a shared object.
It marks the object so that its runtime initialization will occur
before the runtime initialization of any other objects brought into
the process at the same time.  Similarly the runtime finalization of
the object will occur after the runtime finalization of any other
objects.

@@item interpose
Marks the object that its symbol table interposes before all symbols
but the primary executable.

@@item lazy
When generating an executable or shared library, mark it to tell the
dynamic linker to defer function call resolution to the point when
the function is called (lazy binding), rather than at load time.
Lazy binding is the default.

@@item loadfltr
Marks  the object that its filters be processed immediately at
runtime.

@@item muldefs
Allows multiple definitions.

@@item nocombreloc
Disables multiple reloc sections combining.

@@item nocopyreloc
Disables production of copy relocs.

@@item nodefaultlib
Marks the object that the search for dependencies of this object will
ignore any default library search paths.

@@item nodelete
Marks the object shouldn't be unloaded at runtime.

@@item nodlopen
Marks the object not available to @@code{dlopen}.

@@item nodump
Marks the object can not be dumped by @@code{dldump}.

@@item noexecstack
Marks the object as not requiring executable stack.

@@item norelro
Don't create an ELF @@code{PT_GNU_RELRO} segment header in the object.

@@item now
When generating an executable or shared library, mark it to tell the
dynamic linker to resolve all symbols when the program is started, or
when the shared library is linked to using dlopen, instead of
deferring function call resolution to the point when the function is
first called.

@@item origin
Marks the object may contain $ORIGIN.

@@item relro
Create an ELF @@code{PT_GNU_RELRO} segment header in the object.

@@item max-page-size=@@var{value}
Set the emulation maximum page size to @@var{value}.

@@item common-page-size=@@var{value}
Set the emulation common page size to @@var{value}.

@@item stack-size=@@var{value}
Specify a stack size for in an ELF @@code{PT_GNU_STACK} segment.
Specifying zero will override any default non-zero sized
@@code{PT_GNU_STACK} segment creation.

@@end table

Other keywords are ignored for Solaris compatibility.

@@kindex -(
@@cindex groups of archives
@@item -( @@var{archives} -)
@@itemx --start-group @@var{archives} --end-group
The @@var{archives} should be a list of archive files.  They may be
either explicit file names, or @@samp{-l} options.

The specified archives are searched repeatedly until no new undefined
references are created.  Normally, an archive is searched only once in
the order that it is specified on the command line.  If a symbol in that
archive is needed to resolve an undefined symbol referred to by an
object in an archive that appears later on the command line, the linker
would not be able to resolve that reference.  By grouping the archives,
they all be searched repeatedly until all possible references are
resolved.

Using this option has a significant performance cost.  It is best to use
it only when there are unavoidable circular references between two or
more archives.

@@kindex --accept-unknown-input-arch
@@kindex --no-accept-unknown-input-arch
@@item --accept-unknown-input-arch
@@itemx --no-accept-unknown-input-arch
Tells the linker to accept input files whose architecture cannot be
recognised.  The assumption is that the user knows what they are doing
and deliberately wants to link in these unknown input files.  This was
the default behaviour of the linker, before release 2.14.  The default
behaviour from release 2.14 onwards is to reject such input files, and
so the @@samp{--accept-unknown-input-arch} option has been added to
restore the old behaviour.

@@kindex --as-needed
@@kindex --no-as-needed
@@item --as-needed
@@itemx --no-as-needed
This option affects ELF DT_NEEDED tags for dynamic libraries mentioned
on the command line after the @@option{--as-needed} option.  Normally
the linker will add a DT_NEEDED tag for each dynamic library mentioned
on the command line, regardless of whether the library is actually
needed or not.  @@option{--as-needed} causes a DT_NEEDED tag to only be
emitted for a library that @@emph{at that point in the link} satisfies a
non-weak undefined symbol reference from a regular object file or, if
the library is not found in the DT_NEEDED lists of other libraries, a
non-weak undefined symbol reference from another dynamic library.
Object files or libraries appearing on the command line @@emph{after}
the library in question do not affect whether the library is seen as
needed.  This is similar to the rules for extraction of object files
from archives.  @@option{--no-as-needed} restores the default behaviour.

@@kindex --add-needed
@@kindex --no-add-needed
@@item --add-needed
@@itemx --no-add-needed
These two options have been deprecated because of the similarity of
their names to the @@option{--as-needed} and @@option{--no-as-needed}
options.  They have been replaced by @@option{--copy-dt-needed-entries}
and @@option{--no-copy-dt-needed-entries}.

@@kindex -assert @@var{keyword}
@@item -assert @@var{keyword}
This option is ignored for SunOS compatibility.

@@kindex -Bdynamic
@@kindex -dy
@@kindex -call_shared
@@item -Bdynamic
@@itemx -dy
@@itemx -call_shared
Link against dynamic libraries.  This is only meaningful on platforms
for which shared libraries are supported.  This option is normally the
default on such platforms.  The different variants of this option are
for compatibility with various systems.  You may use this option
multiple times on the command line: it affects library searching for
@@option{-l} options which follow it.

@@kindex -Bgroup
@@item -Bgroup
Set the @@code{DF_1_GROUP} flag in the @@code{DT_FLAGS_1} entry in the dynamic
section.  This causes the runtime linker to handle lookups in this
object and its dependencies to be performed only inside the group.
@@option{--unresolved-symbols=report-all} is implied.  This option is
only meaningful on ELF platforms which support shared libraries.

@@kindex -Bstatic
@@kindex -dn
@@kindex -non_shared
@@kindex -static
@@item -Bstatic
@@itemx -dn
@@itemx -non_shared
@@itemx -static
Do not link against shared libraries.  This is only meaningful on
platforms for which shared libraries are supported.  The different
variants of this option are for compatibility with various systems.  You
may use this option multiple times on the command line: it affects
library searching for @@option{-l} options which follow it.  This
option also implies @@option{--unresolved-symbols=report-all}.  This
option can be used with @@option{-shared}.  Doing so means that a
shared library is being created but that all of the library's external
references must be resolved by pulling in entries from static
libraries.

@@kindex -Bsymbolic
@@item -Bsymbolic
When creating a shared library, bind references to global symbols to the
definition within the shared library, if any.  Normally, it is possible
for a program linked against a shared library to override the definition
within the shared library.  This option is only meaningful on ELF
platforms which support shared libraries.

@@kindex -Bsymbolic-functions
@@item -Bsymbolic-functions
When creating a shared library, bind references to global function
symbols to the definition within the shared library, if any.
This option is only meaningful on ELF platforms which support shared
libraries.

@@kindex --dynamic-list=@@var{dynamic-list-file}
@@item --dynamic-list=@@var{dynamic-list-file}
Specify the name of a dynamic list file to the linker.  This is
typically used when creating shared libraries to specify a list of
global symbols whose references shouldn't be bound to the definition
within the shared library, or creating dynamically linked executables
to specify a list of symbols which should be added to the symbol table
in the executable.  This option is only meaningful on ELF platforms
which support shared libraries.

The format of the dynamic list is the same as the version node without
scope and node name.  See @@ref{VERSION} for more information.

@@kindex --dynamic-list-data
@@item --dynamic-list-data
Include all global data symbols to the dynamic list.

@@kindex --dynamic-list-cpp-new
@@item --dynamic-list-cpp-new
Provide the builtin dynamic list for C++ operator new and delete.  It
is mainly useful for building shared libstdc++.

@@kindex --dynamic-list-cpp-typeinfo
@@item --dynamic-list-cpp-typeinfo
Provide the builtin dynamic list for C++ runtime type identification.

@@kindex --check-sections
@@kindex --no-check-sections
@@item --check-sections
@@itemx --no-check-sections
Asks the linker @@emph{not} to check section addresses after they have
been assigned to see if there are any overlaps.  Normally the linker will
perform this check, and if it finds any overlaps it will produce
suitable error messages.  The linker does know about, and does make
allowances for sections in overlays.  The default behaviour can be
restored by using the command line switch @@option{--check-sections}.
Section overlap is not usually checked for relocatable links.  You can
force checking in that case by using the @@option{--check-sections}
option.

@@kindex --copy-dt-needed-entries
@@kindex --no-copy-dt-needed-entries
@@item --copy-dt-needed-entries
@@itemx --no-copy-dt-needed-entries
This option affects the treatment of dynamic libraries referred to
by DT_NEEDED tags @@emph{inside} ELF dynamic libraries mentioned on the
command line.  Normally the linker won't add a DT_NEEDED tag to the
output binary for each library mentioned in a DT_NEEDED tag in an
input dynamic library.  With @@option{--copy-dt-needed-entries}
specified on the command line however any dynamic libraries that
follow it will have their DT_NEEDED entries added.  The default
behaviour can be restored with @@option{--no-copy-dt-needed-entries}.

This option also has an effect on the resolution of symbols in dynamic
libraries.  With @@option{--copy-dt-needed-entries} dynamic libraries
mentioned on the command line will be recursively searched, following
their DT_NEEDED tags to other libraries, in order to resolve symbols
required by the output binary.  With the default setting however
the searching of dynamic libraries that follow it will stop with the
dynamic library itself.  No DT_NEEDED links will be traversed to resolve
symbols.

@@cindex cross reference table
@@kindex --cref
@@item --cref
Output a cross reference table.  If a linker map file is being
generated, the cross reference table is printed to the map file.
Otherwise, it is printed on the standard output.

The format of the table is intentionally simple, so that it may be
easily processed by a script if necessary.  The symbols are printed out,
sorted by name.  For each symbol, a list of file names is given.  If the
symbol is defined, the first file listed is the location of the
definition.  If the symbol is defined as a common value then any files
where this happens appear next.  Finally any files that reference the
symbol are listed.

@@cindex common allocation
@@kindex --no-define-common
@@item --no-define-common
This option inhibits the assignment of addresses to common symbols.
The script command @@code{INHIBIT_COMMON_ALLOCATION} has the same effect.
@@xref{Miscellaneous Commands}.

The @@samp{--no-define-common} option allows decoupling
the decision to assign addresses to Common symbols from the choice
of the output file type; otherwise a non-Relocatable output type
forces assigning addresses to Common symbols.
Using @@samp{--no-define-common} allows Common symbols that are referenced
from a shared library to be assigned addresses only in the main program.
This eliminates the unused duplicate space in the shared library,
and also prevents any possible confusion over resolving to the wrong
duplicate when there are many dynamic modules with specialized search
paths for runtime symbol resolution.

@@cindex symbols, from command line
@@kindex --defsym=@@var{symbol}=@@var{exp}
@@item --defsym=@@var{symbol}=@@var{expression}
Create a global symbol in the output file, containing the absolute
address given by @@var{expression}.  You may use this option as many
times as necessary to define multiple symbols in the command line.  A
limited form of arithmetic is supported for the @@var{expression} in this
context: you may give a hexadecimal constant or the name of an existing
symbol, or use @@code{+} and @@code{-} to add or subtract hexadecimal
constants or symbols.  If you need more elaborate expressions, consider
using the linker command language from a script (@@pxref{Assignments,,
Assignment: Symbol Definitions}).  @@emph{Note:} there should be no white
space between @@var{symbol}, the equals sign (``@@key{=}''), and
@@var{expression}.

@@cindex demangling, from command line
@@kindex --demangle[=@@var{style}]
@@kindex --no-demangle
@@item --demangle[=@@var{style}]
@@itemx --no-demangle
These options control whether to demangle symbol names in error messages
and other output.  When the linker is told to demangle, it tries to
present symbol names in a readable fashion: it strips leading
underscores if they are used by the object file format, and converts C++
mangled symbol names into user readable names.  Different compilers have
different mangling styles.  The optional demangling style argument can be used
to choose an appropriate demangling style for your compiler.  The linker will
demangle by default unless the environment variable @@samp{COLLECT_NO_DEMANGLE}
is set.  These options may be used to override the default.

@@cindex dynamic linker, from command line
@@kindex -I@@var{file}
@@kindex --dynamic-linker=@@var{file}
@@item -I@@var{file}
@@itemx --dynamic-linker=@@var{file}
Set the name of the dynamic linker.  This is only meaningful when
generating dynamically linked ELF executables.  The default dynamic
linker is normally correct; don't use this unless you know what you are
doing.

@@kindex --fatal-warnings
@@kindex --no-fatal-warnings
@@item --fatal-warnings
@@itemx --no-fatal-warnings
Treat all warnings as errors.  The default behaviour can be restored
with the option @@option{--no-fatal-warnings}.

@@kindex --force-exe-suffix
@@item  --force-exe-suffix
Make sure that an output file has a .exe suffix.

If a successfully built fully linked output file does not have a
@@code{.exe} or @@code{.dll} suffix, this option forces the linker to copy
the output file to one of the same name with a @@code{.exe} suffix. This
option is useful when using unmodified Unix makefiles on a Microsoft
Windows host, since some versions of Windows won't run an image unless
it ends in a @@code{.exe} suffix.

@@kindex --gc-sections
@@kindex --no-gc-sections
@@cindex garbage collection
@@item --gc-sections
@@itemx --no-gc-sections
Enable garbage collection of unused input sections.  It is ignored on
targets that do not support this option.  The default behaviour (of not
performing this garbage collection) can be restored by specifying
@@samp{--no-gc-sections} on the command line.

@@samp{--gc-sections} decides which input sections are used by
examining symbols and relocations.  The section containing the entry
symbol and all sections containing symbols undefined on the
command-line will be kept, as will sections containing symbols
referenced by dynamic objects.  Note that when building shared
libraries, the linker must assume that any visible symbol is
referenced.  Once this initial set of sections has been determined,
the linker recursively marks as used any section referenced by their
relocations.  See @@samp{--entry} and @@samp{--undefined}.

This option can be set when doing a partial link (enabled with option
@@samp{-r}).  In this case the root of symbols kept must be explicitly
specified either by an @@samp{--entry} or @@samp{--undefined} option or by
a @@code{ENTRY} command in the linker script.

@@kindex --print-gc-sections
@@kindex --no-print-gc-sections
@@cindex garbage collection
@@item --print-gc-sections
@@itemx --no-print-gc-sections
List all sections removed by garbage collection.  The listing is
printed on stderr.  This option is only effective if garbage
collection has been enabled via the @@samp{--gc-sections}) option.  The
default behaviour (of not listing the sections that are removed) can
be restored by specifying @@samp{--no-print-gc-sections} on the command
line.

@@kindex --print-output-format
@@cindex output format
@@item --print-output-format
Print the name of the default output format (perhaps influenced by
other command-line options).  This is the string that would appear
in an @@code{OUTPUT_FORMAT} linker script command (@@pxref{File Commands}).

@@cindex help
@@cindex usage
@@kindex --help
@@item --help
Print a summary of the command-line options on the standard output and exit.

@@kindex --target-help
@@item --target-help
Print a summary of all target specific options on the standard output and exit.

@@kindex -Map=@@var{mapfile}
@@item -Map=@@var{mapfile}
Print a link map to the file @@var{mapfile}.  See the description of the
@@option{-M} option, above.

@@cindex memory usage
@@kindex --no-keep-memory
@@item --no-keep-memory
@@command{ld} normally optimizes for speed over memory usage by caching the
symbol tables of input files in memory.  This option tells @@command{ld} to
instead optimize for memory usage, by rereading the symbol tables as
necessary.  This may be required if @@command{ld} runs out of memory space
while linking a large executable.

@@kindex --no-undefined
@@kindex -z defs
@@item --no-undefined
@@itemx -z defs
Report unresolved symbol references from regular object files.  This
is done even if the linker is creating a non-symbolic shared library.
The switch @@option{--[no-]allow-shlib-undefined} controls the
behaviour for reporting unresolved references found in shared
libraries being linked in.

@@kindex --allow-multiple-definition
@@kindex -z muldefs
@@item --allow-multiple-definition
@@itemx -z muldefs
Normally when a symbol is defined multiple times, the linker will
report a fatal error. These options allow multiple definitions and the
first definition will be used.

@@kindex --allow-shlib-undefined
@@kindex --no-allow-shlib-undefined
@@item --allow-shlib-undefined
@@itemx --no-allow-shlib-undefined
Allows or disallows undefined symbols in shared libraries.
This switch is similar to @@option{--no-undefined} except that it
determines the behaviour when the undefined symbols are in a
shared library rather than a regular object file.  It does not affect
how undefined symbols in regular object files are handled.

The default behaviour is to report errors for any undefined symbols
referenced in shared libraries if the linker is being used to create
an executable, but to allow them if the linker is being used to create
a shared library.

The reasons for allowing undefined symbol references in shared
libraries specified at link time are that:

@@itemize @@bullet
@@item
A shared library specified at link time may not be the same as the one
that is available at load time, so the symbol might actually be
resolvable at load time.
@@item
There are some operating systems, eg BeOS and HPPA, where undefined
symbols in shared libraries are normal.

The BeOS kernel for example patches shared libraries at load time to
select whichever function is most appropriate for the current
architecture.  This is used, for example, to dynamically select an
appropriate memset function.
@@end itemize

@@kindex --no-undefined-version
@@item --no-undefined-version
Normally when a symbol has an undefined version, the linker will ignore
it. This option disallows symbols with undefined version and a fatal error
will be issued instead.

@@kindex --default-symver
@@item --default-symver
Create and use a default symbol version (the soname) for unversioned
exported symbols.

@@kindex --default-imported-symver
@@item --default-imported-symver
Create and use a default symbol version (the soname) for unversioned
imported symbols.

@@kindex --no-warn-mismatch
@@item --no-warn-mismatch
Normally @@command{ld} will give an error if you try to link together input
files that are mismatched for some reason, perhaps because they have
been compiled for different processors or for different endiannesses.
This option tells @@command{ld} that it should silently permit such possible
errors.  This option should only be used with care, in cases when you
have taken some special action that ensures that the linker errors are
inappropriate.

@@kindex --no-warn-search-mismatch
@@item --no-warn-search-mismatch
Normally @@command{ld} will give a warning if it finds an incompatible
library during a library search.  This option silences the warning.

@@kindex --no-whole-archive
@@item --no-whole-archive
Turn off the effect of the @@option{--whole-archive} option for subsequent
archive files.

@@cindex output file after errors
@@kindex --noinhibit-exec
@@item --noinhibit-exec
Retain the executable output file whenever it is still usable.
Normally, the linker will not produce an output file if it encounters
errors during the link process; it exits without writing an output file
when it issues any error whatsoever.

@@kindex -nostdlib
@@item -nostdlib
Only search library directories explicitly specified on the
command line.  Library directories specified in linker scripts
(including linker scripts specified on the command line) are ignored.

@@ifclear SingleFormat
@@kindex --oformat=@@var{output-format}
@@item --oformat=@@var{output-format}
@@command{ld} may be configured to support more than one kind of object
file.  If your @@command{ld} is configured this way, you can use the
@@samp{--oformat} option to specify the binary format for the output
object file.  Even when @@command{ld} is configured to support alternative
object formats, you don't usually need to specify this, as @@command{ld}
should be configured to produce as a default output format the most
usual format on each machine.  @@var{output-format} is a text string, the
name of a particular format supported by the BFD libraries.  (You can
list the available binary formats with @@samp{objdump -i}.)  The script
command @@code{OUTPUT_FORMAT} can also specify the output format, but
this option overrides it.  @@xref{BFD}.
@@end ifclear

@@kindex -pie
@@kindex --pic-executable
@@item -pie
@@itemx --pic-executable
@@cindex position independent executables
Create a position independent executable.  This is currently only supported on
ELF platforms.  Position independent executables are similar to shared
libraries in that they are relocated by the dynamic linker to the virtual
address the OS chooses for them (which can vary between invocations).  Like
normal dynamically linked executables they can be executed and symbols
defined in the executable cannot be overridden by shared libraries.

@@kindex -qmagic
@@item -qmagic
This option is ignored for Linux compatibility.

@@kindex -Qy
@@item -Qy
This option is ignored for SVR4 compatibility.

@@kindex --relax
@@cindex synthesizing linker
@@cindex relaxing addressing modes
@@cindex --no-relax
@@item --relax
@@itemx --no-relax
An option with machine dependent effects.
@@ifset GENERIC
This option is only supported on a few targets.
@@end ifset
@@ifset H8300
@@xref{H8/300,,@@command{ld} and the H8/300}.
@@end ifset
@@ifset I960
@@xref{i960,, @@command{ld} and the Intel 960 family}.
@@end ifset
@@ifset XTENSA
@@xref{Xtensa,, @@command{ld} and Xtensa Processors}.
@@end ifset
@@ifset M68HC11
@@xref{M68HC11/68HC12,,@@command{ld} and the 68HC11 and 68HC12}.
@@end ifset
@@ifset POWERPC
@@xref{PowerPC ELF32,,@@command{ld} and PowerPC 32-bit ELF Support}.
@@end ifset

On some platforms the @@samp{--relax} option performs target specific,
global optimizations that become possible when the linker resolves
addressing in the program, such as relaxing address modes,
synthesizing new instructions, selecting shorter version of current
instructions, and combining constant values.

On some platforms these link time global optimizations may make symbolic
debugging of the resulting executable impossible.
@@ifset GENERIC
This is known to be the case for the Matsushita MN10200 and MN10300
family of processors.
@@end ifset

@@ifset GENERIC
On platforms where this is not supported, @@samp{--relax} is accepted,
but ignored.
@@end ifset

On platforms where @@samp{--relax} is accepted the option
@@samp{--no-relax} can be used to disable the feature.

@@cindex retaining specified symbols
@@cindex stripping all but some symbols
@@cindex symbols, retaining selectively
@@kindex --retain-symbols-file=@@var{filename}
@@item --retain-symbols-file=@@var{filename}
Retain @@emph{only} the symbols listed in the file @@var{filename},
discarding all others.  @@var{filename} is simply a flat file, with one
symbol name per line.  This option is especially useful in environments
@@ifset GENERIC
(such as VxWorks)
@@end ifset
where a large global symbol table is accumulated gradually, to conserve
run-time memory.

@@samp{--retain-symbols-file} does @@emph{not} discard undefined symbols,
or symbols needed for relocations.

You may only specify @@samp{--retain-symbols-file} once in the command
line.  It overrides @@samp{-s} and @@samp{-S}.

@@ifset GENERIC
@@item -rpath=@@var{dir}
@@cindex runtime library search path
@@kindex -rpath=@@var{dir}
Add a directory to the runtime library search path.  This is used when
linking an ELF executable with shared objects.  All @@option{-rpath}
arguments are concatenated and passed to the runtime linker, which uses
them to locate shared objects at runtime.  The @@option{-rpath} option is
also used when locating shared objects which are needed by shared
objects explicitly included in the link; see the description of the
@@option{-rpath-link} option.  If @@option{-rpath} is not used when linking an
ELF executable, the contents of the environment variable
@@code{LD_RUN_PATH} will be used if it is defined.

The @@option{-rpath} option may also be used on SunOS.  By default, on
SunOS, the linker will form a runtime search patch out of all the
@@option{-L} options it is given.  If a @@option{-rpath} option is used, the
runtime search path will be formed exclusively using the @@option{-rpath}
options, ignoring the @@option{-L} options.  This can be useful when using
gcc, which adds many @@option{-L} options which may be on NFS mounted
file systems.

For compatibility with other ELF linkers, if the @@option{-R} option is
followed by a directory name, rather than a file name, it is treated as
the @@option{-rpath} option.
@@end ifset

@@ifset GENERIC
@@cindex link-time runtime library search path
@@kindex -rpath-link=@@var{dir}
@@item -rpath-link=@@var{dir}
When using ELF or SunOS, one shared library may require another.  This
happens when an @@code{ld -shared} link includes a shared library as one
of the input files.

When the linker encounters such a dependency when doing a non-shared,
non-relocatable link, it will automatically try to locate the required
shared library and include it in the link, if it is not included
explicitly.  In such a case, the @@option{-rpath-link} option
specifies the first set of directories to search.  The
@@option{-rpath-link} option may specify a sequence of directory names
either by specifying a list of names separated by colons, or by
appearing multiple times.

This option should be used with caution as it overrides the search path
that may have been hard compiled into a shared library. In such a case it
is possible to use unintentionally a different search path than the
runtime linker would do.

The linker uses the following search paths to locate required shared
libraries:
@@enumerate
@@item
Any directories specified by @@option{-rpath-link} options.
@@item
Any directories specified by @@option{-rpath} options.  The difference
between @@option{-rpath} and @@option{-rpath-link} is that directories
specified by @@option{-rpath} options are included in the executable and
used at runtime, whereas the @@option{-rpath-link} option is only effective
at link time. Searching @@option{-rpath} in this way is only supported
by native linkers and cross linkers which have been configured with
the @@option{--with-sysroot} option.
@@item
On an ELF system, for native linkers, if the @@option{-rpath} and
@@option{-rpath-link} options were not used, search the contents of the
environment variable @@code{LD_RUN_PATH}.
@@item
On SunOS, if the @@option{-rpath} option was not used, search any
directories specified using @@option{-L} options.
@@item
For a native linker, search the contents of the environment
variable @@code{LD_LIBRARY_PATH}.
@@item
For a native ELF linker, the directories in @@code{DT_RUNPATH} or
@@code{DT_RPATH} of a shared library are searched for shared
libraries needed by it. The @@code{DT_RPATH} entries are ignored if
@@code{DT_RUNPATH} entries exist.
@@item
The default directories, normally @@file{/lib} and @@file{/usr/lib}.
@@item
For a native linker on an ELF system, if the file @@file{/etc/ld.so.conf}
exists, the list of directories found in that file.
@@end enumerate

If the required shared library is not found, the linker will issue a
warning and continue with the link.
@@end ifset

@@kindex -shared
@@kindex -Bshareable
@@item -shared
@@itemx -Bshareable
@@cindex shared libraries
Create a shared library.  This is currently only supported on ELF, XCOFF
and SunOS platforms.  On SunOS, the linker will automatically create a
shared library if the @@option{-e} option is not used and there are
undefined symbols in the link.

@@kindex --sort-common
@@item --sort-common
@@itemx --sort-common=ascending
@@itemx --sort-common=descending
This option tells @@command{ld} to sort the common symbols by alignment in
ascending or descending order when it places them in the appropriate output
sections.  The symbol alignments considered are sixteen-byte or larger,
eight-byte, four-byte, two-byte, and one-byte. This is to prevent gaps
between symbols due to alignment constraints.  If no sorting order is
specified, then descending order is assumed.

@@kindex --sort-section=name
@@item --sort-section=name
This option will apply @@code{SORT_BY_NAME} to all wildcard section
patterns in the linker script.

@@kindex --sort-section=alignment
@@item --sort-section=alignment
This option will apply @@code{SORT_BY_ALIGNMENT} to all wildcard section
patterns in the linker script.

@@kindex --split-by-file
@@item --split-by-file[=@@var{size}]
Similar to @@option{--split-by-reloc} but creates a new output section for
each input file when @@var{size} is reached.  @@var{size} defaults to a
size of 1 if not given.

@@kindex --split-by-reloc
@@item --split-by-reloc[=@@var{count}]
Tries to creates extra sections in the output file so that no single
output section in the file contains more than @@var{count} relocations.
This is useful when generating huge relocatable files for downloading into
certain real time kernels with the COFF object file format; since COFF
cannot represent more than 65535 relocations in a single section.  Note
that this will fail to work with object file formats which do not
support arbitrary sections.  The linker will not split up individual
input sections for redistribution, so if a single input section contains
more than @@var{count} relocations one output section will contain that
many relocations.  @@var{count} defaults to a value of 32768.

@@kindex --stats
@@item --stats
Compute and display statistics about the operation of the linker, such
as execution time and memory usage.

@@kindex --sysroot=@@var{directory}
@@item --sysroot=@@var{directory}
Use @@var{directory} as the location of the sysroot, overriding the
configure-time default.  This option is only supported by linkers
that were configured using @@option{--with-sysroot}.

@@kindex --traditional-format
@@cindex traditional format
@@item --traditional-format
For some targets, the output of @@command{ld} is different in some ways from
the output of some existing linker.  This switch requests @@command{ld} to
use the traditional format instead.

@@cindex dbx
For example, on SunOS, @@command{ld} combines duplicate entries in the
symbol string table.  This can reduce the size of an output file with
full debugging information by over 30 percent.  Unfortunately, the SunOS
@@code{dbx} program can not read the resulting program (@@code{gdb} has no
trouble).  The @@samp{--traditional-format} switch tells @@command{ld} to not
combine duplicate entries.

@@kindex --section-start=@@var{sectionname}=@@var{org}
@@item --section-start=@@var{sectionname}=@@var{org}
Locate a section in the output file at the absolute
address given by @@var{org}.  You may use this option as many
times as necessary to locate multiple sections in the command
line.
@@var{org} must be a single hexadecimal integer;
for compatibility with other linkers, you may omit the leading
@@samp{0x} usually associated with hexadecimal values.  @@emph{Note:} there
should be no white space between @@var{sectionname}, the equals
sign (``@@key{=}''), and @@var{org}.

@@kindex -Tbss=@@var{org}
@@kindex -Tdata=@@var{org}
@@kindex -Ttext=@@var{org}
@@cindex segment origins, cmd line
@@item -Tbss=@@var{org}
@@itemx -Tdata=@@var{org}
@@itemx -Ttext=@@var{org}
Same as @@option{--section-start}, with @@code{.bss}, @@code{.data} or
@@code{.text} as the @@var{sectionname}.

@@kindex -Ttext-segment=@@var{org}
@@item -Ttext-segment=@@var{org}
@@cindex text segment origin, cmd line
When creating an ELF executable or shared object, it will set the address
of the first byte of the text segment.

@@kindex -Trodata-segment=@@var{org}
@@item -Trodata-segment=@@var{org}
@@cindex rodata segment origin, cmd line
When creating an ELF executable or shared object for a target where
the read-only data is in its own segment separate from the executable
text, it will set the address of the first byte of the read-only data segment.

@@kindex -Tldata-segment=@@var{org}
@@item -Tldata-segment=@@var{org}
@@cindex ldata segment origin, cmd line
When creating an ELF executable or shared object for x86-64 medium memory
model, it will set the address of the first byte of the ldata segment.

@@kindex --unresolved-symbols
@@item --unresolved-symbols=@@var{method}
Determine how to handle unresolved symbols.  There are four possible
values for @@samp{method}:

@@table @@samp
@@item ignore-all
Do not report any unresolved symbols.

@@item report-all
Report all unresolved symbols.  This is the default.

@@item ignore-in-object-files
Report unresolved symbols that are contained in shared libraries, but
ignore them if they come from regular object files.

@@item ignore-in-shared-libs
Report unresolved symbols that come from regular object files, but
ignore them if they come from shared libraries.  This can be useful
when creating a dynamic binary and it is known that all the shared
libraries that it should be referencing are included on the linker's
command line.
@@end table

The behaviour for shared libraries on their own can also be controlled
by the @@option{--[no-]allow-shlib-undefined} option.

Normally the linker will generate an error message for each reported
unresolved symbol but the option @@option{--warn-unresolved-symbols}
can change this to a warning.

@@kindex --verbose[=@@var{NUMBER}]
@@cindex verbose[=@@var{NUMBER}]
@@item --dll-verbose
@@itemx --verbose[=@@var{NUMBER}]
Display the version number for @@command{ld} and list the linker emulations
supported.  Display which input files can and cannot be opened.  Display
the linker script being used by the linker. If the optional @@var{NUMBER}
argument > 1, plugin symbol status will also be displayed.

@@kindex --version-script=@@var{version-scriptfile}
@@cindex version script, symbol versions
@@item --version-script=@@var{version-scriptfile}
Specify the name of a version script to the linker.  This is typically
used when creating shared libraries to specify additional information
about the version hierarchy for the library being created.  This option
is only fully supported on ELF platforms which support shared libraries;
see @@ref{VERSION}.  It is partially supported on PE platforms, which can
use version scripts to filter symbol visibility in auto-export mode: any
symbols marked @@samp{local} in the version script will not be exported.
@@xref{WIN32}.

@@kindex --warn-common
@@cindex warnings, on combining symbols
@@cindex combining symbols, warnings on
@@item --warn-common
Warn when a common symbol is combined with another common symbol or with
a symbol definition.  Unix linkers allow this somewhat sloppy practice,
but linkers on some other operating systems do not.  This option allows
you to find potential problems from combining global symbols.
Unfortunately, some C libraries use this practice, so you may get some
warnings about symbols in the libraries as well as in your programs.

There are three kinds of global symbols, illustrated here by C examples:

@@table @@samp
@@item int i = 1;
A definition, which goes in the initialized data section of the output
file.

@@item extern int i;
An undefined reference, which does not allocate space.
There must be either a definition or a common symbol for the
variable somewhere.

@@item int i;
A common symbol.  If there are only (one or more) common symbols for a
variable, it goes in the uninitialized data area of the output file.
The linker merges multiple common symbols for the same variable into a
single symbol.  If they are of different sizes, it picks the largest
size.  The linker turns a common symbol into a declaration, if there is
a definition of the same variable.
@@end table

The @@samp{--warn-common} option can produce five kinds of warnings.
Each warning consists of a pair of lines: the first describes the symbol
just encountered, and the second describes the previous symbol
encountered with the same name.  One or both of the two symbols will be
a common symbol.

@@enumerate
@@item
Turning a common symbol into a reference, because there is already a
definition for the symbol.
@@smallexample
@@var{file}(@@var{section}): warning: common of `@@var{symbol}'
   overridden by definition
@@var{file}(@@var{section}): warning: defined here
@@end smallexample

@@item
Turning a common symbol into a reference, because a later definition for
the symbol is encountered.  This is the same as the previous case,
except that the symbols are encountered in a different order.
@@smallexample
@@var{file}(@@var{section}): warning: definition of `@@var{symbol}'
   overriding common
@@var{file}(@@var{section}): warning: common is here
@@end smallexample

@@item
Merging a common symbol with a previous same-sized common symbol.
@@smallexample
@@var{file}(@@var{section}): warning: multiple common
   of `@@var{symbol}'
@@var{file}(@@var{section}): warning: previous common is here
@@end smallexample

@@item
Merging a common symbol with a previous larger common symbol.
@@smallexample
@@var{file}(@@var{section}): warning: common of `@@var{symbol}'
   overridden by larger common
@@var{file}(@@var{section}): warning: larger common is here
@@end smallexample

@@item
Merging a common symbol with a previous smaller common symbol.  This is
the same as the previous case, except that the symbols are
encountered in a different order.
@@smallexample
@@var{file}(@@var{section}): warning: common of `@@var{symbol}'
   overriding smaller common
@@var{file}(@@var{section}): warning: smaller common is here
@@end smallexample
@@end enumerate

@@kindex --warn-constructors
@@item --warn-constructors
Warn if any global constructors are used.  This is only useful for a few
object file formats.  For formats like COFF or ELF, the linker can not
detect the use of global constructors.

@@kindex --warn-multiple-gp
@@item --warn-multiple-gp
Warn if multiple global pointer values are required in the output file.
This is only meaningful for certain processors, such as the Alpha.
Specifically, some processors put large-valued constants in a special
section.  A special register (the global pointer) points into the middle
of this section, so that constants can be loaded efficiently via a
base-register relative addressing mode.  Since the offset in
base-register relative mode is fixed and relatively small (e.g., 16
bits), this limits the maximum size of the constant pool.  Thus, in
large programs, it is often necessary to use multiple global pointer
values in order to be able to address all possible constants.  This
option causes a warning to be issued whenever this case occurs.

@@kindex --warn-once
@@cindex warnings, on undefined symbols
@@cindex undefined symbols, warnings on
@@item --warn-once
Only warn once for each undefined symbol, rather than once per module
which refers to it.

@@kindex --warn-section-align
@@cindex warnings, on section alignment
@@cindex section alignment, warnings on
@@item --warn-section-align
Warn if the address of an output section is changed because of
alignment.  Typically, the alignment will be set by an input section.
The address will only be changed if it not explicitly specified; that
is, if the @@code{SECTIONS} command does not specify a start address for
the section (@@pxref{SECTIONS}).

@@kindex --warn-shared-textrel
@@item --warn-shared-textrel
Warn if the linker adds a DT_TEXTREL to a shared object.

@@kindex --warn-alternate-em
@@item --warn-alternate-em
Warn if an object has alternate ELF machine code.

@@kindex --warn-unresolved-symbols
@@item --warn-unresolved-symbols
If the linker is going to report an unresolved symbol (see the option
@@option{--unresolved-symbols}) it will normally generate an error.
This option makes it generate a warning instead.

@@kindex --error-unresolved-symbols
@@item --error-unresolved-symbols
This restores the linker's default behaviour of generating errors when
it is reporting unresolved symbols.

@@kindex --whole-archive
@@cindex including an entire archive
@@item --whole-archive
For each archive mentioned on the command line after the
@@option{--whole-archive} option, include every object file in the archive
in the link, rather than searching the archive for the required object
files.  This is normally used to turn an archive file into a shared
library, forcing every object to be included in the resulting shared
library.  This option may be used more than once.

Two notes when using this option from gcc: First, gcc doesn't know
about this option, so you have to use @@option{-Wl,-whole-archive}.
Second, don't forget to use @@option{-Wl,-no-whole-archive} after your
list of archives, because gcc will add its own list of archives to
your link and you may not want this flag to affect those as well.

@@kindex --wrap=@@var{symbol}
@@item --wrap=@@var{symbol}
Use a wrapper function for @@var{symbol}.  Any undefined reference to
@@var{symbol} will be resolved to @@code{__wrap_@@var{symbol}}.  Any
undefined reference to @@code{__real_@@var{symbol}} will be resolved to
@@var{symbol}.

This can be used to provide a wrapper for a system function.  The
wrapper function should be called @@code{__wrap_@@var{symbol}}.  If it
wishes to call the system function, it should call
@@code{__real_@@var{symbol}}.

Here is a trivial example:

@@smallexample
void *
__wrap_malloc (size_t c)
@@{
  printf ("malloc called with %zu\n", c);
  return __real_malloc (c);
@@}
@@end smallexample

If you link other code with this file using @@option{--wrap malloc}, then
all calls to @@code{malloc} will call the function @@code{__wrap_malloc}
instead.  The call to @@code{__real_malloc} in @@code{__wrap_malloc} will
call the real @@code{malloc} function.

You may wish to provide a @@code{__real_malloc} function as well, so that
links without the @@option{--wrap} option will succeed.  If you do this,
you should not put the definition of @@code{__real_malloc} in the same
file as @@code{__wrap_malloc}; if you do, the assembler may resolve the
call before the linker has a chance to wrap it to @@code{malloc}.

@@kindex --eh-frame-hdr
@@item --eh-frame-hdr
Request creation of @@code{.eh_frame_hdr} section and ELF
@@code{PT_GNU_EH_FRAME} segment header.

@@kindex --ld-generated-unwind-info
@@item --no-ld-generated-unwind-info
Request creation of @@code{.eh_frame} unwind info for linker
generated code sections like PLT.  This option is on by default
if linker generated unwind info is supported.

@@kindex --enable-new-dtags
@@kindex --disable-new-dtags
@@item --enable-new-dtags
@@itemx --disable-new-dtags
This linker can create the new dynamic tags in ELF. But the older ELF
systems may not understand them. If you specify
@@option{--enable-new-dtags}, the new dynamic tags will be created as needed
and older dynamic tags will be omitted.
If you specify @@option{--disable-new-dtags}, no new dynamic tags will be
created. By default, the new dynamic tags are not created. Note that
those options are only available for ELF systems.

@@kindex --hash-size=@@var{number}
@@item --hash-size=@@var{number}
Set the default size of the linker's hash tables to a prime number
close to @@var{number}.  Increasing this value can reduce the length of
time it takes the linker to perform its tasks, at the expense of
increasing the linker's memory requirements.  Similarly reducing this
value can reduce the memory requirements at the expense of speed.

@@kindex --hash-style=@@var{style}
@@item --hash-style=@@var{style}
Set the type of linker's hash table(s).  @@var{style} can be either
@@code{sysv} for classic ELF @@code{.hash} section, @@code{gnu} for
new style GNU @@code{.gnu.hash} section or @@code{both} for both
the classic ELF @@code{.hash} and new style GNU @@code{.gnu.hash}
hash tables.  The default is @@code{sysv}.

@@kindex --reduce-memory-overheads
@@item --reduce-memory-overheads
This option reduces memory requirements at ld runtime, at the expense of
linking speed.  This was introduced to select the old O(n^2) algorithm
for link map file generation, rather than the new O(n) algorithm which uses
about 40% more memory for symbol storage.

Another effect of the switch is to set the default hash table size to
1021, which again saves memory at the cost of lengthening the linker's
run time.  This is not done however if the @@option{--hash-size} switch
has been used.

The @@option{--reduce-memory-overheads} switch may be also be used to
enable other tradeoffs in future versions of the linker.

@@kindex --build-id
@@kindex --build-id=@@var{style}
@@item --build-id
@@itemx --build-id=@@var{style}
Request creation of @@code{.note.gnu.build-id} ELF note section.
The contents of the note are unique bits identifying this linked
file.  @@var{style} can be @@code{uuid} to use 128 random bits,
@@code{sha1} to use a 160-bit @@sc{SHA1} hash on the normative
parts of the output contents, @@code{md5} to use a 128-bit
@@sc{MD5} hash on the normative parts of the output contents, or
@@code{0x@@var{hexstring}} to use a chosen bit string specified as
an even number of hexadecimal digits (@@code{-} and @@code{:}
characters between digit pairs are ignored).  If @@var{style} is
omitted, @@code{sha1} is used.

The @@code{md5} and @@code{sha1} styles produces an identifier
that is always the same in an identical output file, but will be
unique among all nonidentical output files.  It is not intended
to be compared as a checksum for the file's contents.  A linked
file may be changed later by other tools, but the build ID bit
string identifying the original linked file does not change.

Passing @@code{none} for @@var{style} disables the setting from any
@@code{--build-id} options earlier on the command line.
@@end table

@@c man end

@@subsection Options Specific to i386 PE Targets

@@c man begin OPTIONS

The i386 PE linker supports the @@option{-shared} option, which causes
the output to be a dynamically linked library (DLL) instead of a
normal executable.  You should name the output @@code{*.dll} when you
use this option.  In addition, the linker fully supports the standard
@@code{*.def} files, which may be specified on the linker command line
like an object file (in fact, it should precede archives it exports
symbols from, to ensure that they get linked in, just like a normal
object file).

In addition to the options common to all targets, the i386 PE linker
support additional command line options that are specific to the i386
PE target.  Options that take values may be separated from their
values by either a space or an equals sign.

@@table @@gcctabopt

@@kindex --add-stdcall-alias
@@item --add-stdcall-alias
If given, symbols with a stdcall suffix (@@@@@@var{nn}) will be exported
as-is and also with the suffix stripped.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --base-file
@@item --base-file @@var{file}
Use @@var{file} as the name of a file in which to save the base
addresses of all the relocations needed for generating DLLs with
@@file{dlltool}.
[This is an i386 PE specific option]

@@kindex --dll
@@item --dll
Create a DLL instead of a regular executable.  You may also use
@@option{-shared} or specify a @@code{LIBRARY} in a given @@code{.def}
file.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --enable-long-section-names
@@kindex --disable-long-section-names
@@item --enable-long-section-names
@@itemx --disable-long-section-names
The PE variants of the Coff object format add an extension that permits
the use of section names longer than eight characters, the normal limit
for Coff.  By default, these names are only allowed in object files, as
fully-linked executable images do not carry the Coff string table required
to support the longer names.  As a GNU extension, it is possible to
allow their use in executable images as well, or to (probably pointlessly!)
disallow it in object files, by using these two options.  Executable images
generated with these long section names are slightly non-standard, carrying
as they do a string table, and may generate confusing output when examined
with non-GNU PE-aware tools, such as file viewers and dumpers.  However,
GDB relies on the use of PE long section names to find Dwarf-2 debug
information sections in an executable image at runtime, and so if neither
option is specified on the command-line, @@command{ld} will enable long
section names, overriding the default and technically correct behaviour,
when it finds the presence of debug information while linking an executable
image and not stripping symbols.
[This option is valid for all PE targeted ports of the linker]

@@kindex --enable-stdcall-fixup
@@kindex --disable-stdcall-fixup
@@item --enable-stdcall-fixup
@@itemx --disable-stdcall-fixup
If the link finds a symbol that it cannot resolve, it will attempt to
do ``fuzzy linking'' by looking for another defined symbol that differs
only in the format of the symbol name (cdecl vs stdcall) and will
resolve that symbol by linking to the match.  For example, the
undefined symbol @@code{_foo} might be linked to the function
@@code{_foo@@@@12}, or the undefined symbol @@code{_bar@@@@16} might be linked
to the function @@code{_bar}.  When the linker does this, it prints a
warning, since it normally should have failed to link, but sometimes
import libraries generated from third-party dlls may need this feature
to be usable.  If you specify @@option{--enable-stdcall-fixup}, this
feature is fully enabled and warnings are not printed.  If you specify
@@option{--disable-stdcall-fixup}, this feature is disabled and such
mismatches are considered to be errors.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --leading-underscore
@@kindex --no-leading-underscore
@@item --leading-underscore
@@itemx --no-leading-underscore
For most targets default symbol-prefix is an underscore and is defined
in target's description. By this option it is possible to
disable/enable the default underscore symbol-prefix.

@@cindex DLLs, creating
@@kindex --export-all-symbols
@@item --export-all-symbols
If given, all global symbols in the objects used to build a DLL will
be exported by the DLL.  Note that this is the default if there
otherwise wouldn't be any exported symbols.  When symbols are
explicitly exported via DEF files or implicitly exported via function
attributes, the default is to not export anything else unless this
option is given.  Note that the symbols @@code{DllMain@@@@12},
@@code{DllEntryPoint@@@@0}, @@code{DllMainCRTStartup@@@@12}, and
@@code{impure_ptr} will not be automatically
exported.  Also, symbols imported from other DLLs will not be
re-exported, nor will symbols specifying the DLL's internal layout
such as those beginning with @@code{_head_} or ending with
@@code{_iname}.  In addition, no symbols from @@code{libgcc},
@@code{libstd++}, @@code{libmingw32}, or @@code{crtX.o} will be exported.
Symbols whose names begin with @@code{__rtti_} or @@code{__builtin_} will
not be exported, to help with C++ DLLs.  Finally, there is an
extensive list of cygwin-private symbols that are not exported
(obviously, this applies on when building DLLs for cygwin targets).
These cygwin-excludes are: @@code{_cygwin_dll_entry@@@@12},
@@code{_cygwin_crt0_common@@@@8}, @@code{_cygwin_noncygwin_dll_entry@@@@12},
@@code{_fmode}, @@code{_impure_ptr}, @@code{cygwin_attach_dll},
@@code{cygwin_premain0}, @@code{cygwin_premain1}, @@code{cygwin_premain2},
@@code{cygwin_premain3}, and @@code{environ}.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --exclude-symbols
@@item --exclude-symbols @@var{symbol},@@var{symbol},...
Specifies a list of symbols which should not be automatically
exported.  The symbol names may be delimited by commas or colons.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --exclude-all-symbols
@@item --exclude-all-symbols
Specifies no symbols should be automatically exported.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --file-alignment
@@item --file-alignment
Specify the file alignment.  Sections in the file will always begin at
file offsets which are multiples of this number.  This defaults to
512.
[This option is specific to the i386 PE targeted port of the linker]

@@cindex heap size
@@kindex --heap
@@item --heap @@var{reserve}
@@itemx --heap @@var{reserve},@@var{commit}
Specify the number of bytes of memory to reserve (and optionally commit)
to be used as heap for this program.  The default is 1MB reserved, 4K
committed.
[This option is specific to the i386 PE targeted port of the linker]

@@cindex image base
@@kindex --image-base
@@item --image-base @@var{value}
Use @@var{value} as the base address of your program or dll.  This is
the lowest memory location that will be used when your program or dll
is loaded.  To reduce the need to relocate and improve performance of
your dlls, each should have a unique base address and not overlap any
other dlls.  The default is 0x400000 for executables, and 0x10000000
for dlls.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --kill-at
@@item --kill-at
If given, the stdcall suffixes (@@@@@@var{nn}) will be stripped from
symbols before they are exported.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --large-address-aware
@@item --large-address-aware
If given, the appropriate bit in the ``Characteristics'' field of the COFF
header is set to indicate that this executable supports virtual addresses
greater than 2 gigabytes.  This should be used in conjunction with the /3GB
or /USERVA=@@var{value} megabytes switch in the ``[operating systems]''
section of the BOOT.INI.  Otherwise, this bit has no effect.
[This option is specific to PE targeted ports of the linker]

@@kindex --disable-large-address-aware
@@item --disable-large-address-aware
Reverts the effect of a previous @@samp{--large-address-aware} option.
This is useful if @@samp{--large-address-aware} is always set by the compiler
driver (e.g. Cygwin gcc) and the executable does not support virtual
addresses greater than 2 gigabytes.
[This option is specific to PE targeted ports of the linker]

@@kindex --major-image-version
@@item --major-image-version @@var{value}
Sets the major number of the ``image version''.  Defaults to 1.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --major-os-version
@@item --major-os-version @@var{value}
Sets the major number of the ``os version''.  Defaults to 4.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --major-subsystem-version
@@item --major-subsystem-version @@var{value}
Sets the major number of the ``subsystem version''.  Defaults to 4.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --minor-image-version
@@item --minor-image-version @@var{value}
Sets the minor number of the ``image version''.  Defaults to 0.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --minor-os-version
@@item --minor-os-version @@var{value}
Sets the minor number of the ``os version''.  Defaults to 0.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --minor-subsystem-version
@@item --minor-subsystem-version @@var{value}
Sets the minor number of the ``subsystem version''.  Defaults to 0.
[This option is specific to the i386 PE targeted port of the linker]

@@cindex DEF files, creating
@@cindex DLLs, creating
@@kindex --output-def
@@item --output-def @@var{file}
The linker will create the file @@var{file} which will contain a DEF
file corresponding to the DLL the linker is generating.  This DEF file
(which should be called @@code{*.def}) may be used to create an import
library with @@code{dlltool} or may be used as a reference to
automatically or implicitly exported symbols.
[This option is specific to the i386 PE targeted port of the linker]

@@cindex DLLs, creating
@@kindex --out-implib
@@item --out-implib @@var{file}
The linker will create the file @@var{file} which will contain an
import lib corresponding to the DLL the linker is generating. This
import lib (which should be called @@code{*.dll.a} or @@code{*.a}
may be used to link clients against the generated DLL; this behaviour
makes it possible to skip a separate @@code{dlltool} import library
creation step.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --enable-auto-image-base
@@item --enable-auto-image-base
Automatically choose the image base for DLLs, unless one is specified
using the @@code{--image-base} argument.  By using a hash generated
from the dllname to create unique image bases for each DLL, in-memory
collisions and relocations which can delay program execution are
avoided.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --disable-auto-image-base
@@item --disable-auto-image-base
Do not automatically generate a unique image base.  If there is no
user-specified image base (@@code{--image-base}) then use the platform
default.
[This option is specific to the i386 PE targeted port of the linker]

@@cindex DLLs, linking to
@@kindex --dll-search-prefix
@@item --dll-search-prefix @@var{string}
When linking dynamically to a dll without an import library,
search for @@code{<string><basename>.dll} in preference to
@@code{lib<basename>.dll}. This behaviour allows easy distinction
between DLLs built for the various "subplatforms": native, cygwin,
uwin, pw, etc.  For instance, cygwin DLLs typically use
@@code{--dll-search-prefix=cyg}.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --enable-auto-import
@@item --enable-auto-import
Do sophisticated linking of @@code{_symbol} to @@code{__imp__symbol} for
DATA imports from DLLs, and create the necessary thunking symbols when
building the import libraries with those DATA exports. Note: Use of the
'auto-import' extension will cause the text section of the image file
to be made writable. This does not conform to the PE-COFF format
specification published by Microsoft.

Note - use of the 'auto-import' extension will also cause read only
data which would normally be placed into the .rdata section to be
placed into the .data section instead.  This is in order to work
around a problem with consts that is described here:
http://www.cygwin.com/ml/cygwin/2004-09/msg01101.html

Using 'auto-import' generally will 'just work' -- but sometimes you may
see this message:

"variable '<var>' can't be auto-imported. Please read the
documentation for ld's @@code{--enable-auto-import} for details."

This message occurs when some (sub)expression accesses an address
ultimately given by the sum of two constants (Win32 import tables only
allow one).  Instances where this may occur include accesses to member
fields of struct variables imported from a DLL, as well as using a
constant index into an array variable imported from a DLL.  Any
multiword variable (arrays, structs, long long, etc) may trigger
this error condition.  However, regardless of the exact data type
of the offending exported variable, ld will always detect it, issue
the warning, and exit.

There are several ways to address this difficulty, regardless of the
data type of the exported variable:

One way is to use --enable-runtime-pseudo-reloc switch. This leaves the task
of adjusting references in your client code for runtime environment, so
this method works only when runtime environment supports this feature.

A second solution is to force one of the 'constants' to be a variable --
that is, unknown and un-optimizable at compile time.  For arrays,
there are two possibilities: a) make the indexee (the array's address)
a variable, or b) make the 'constant' index a variable.  Thus:

@@example
extern type extern_array[];
extern_array[1] -->
   @@{ volatile type *t=extern_array; t[1] @@}
@@end example

or

@@example
extern type extern_array[];
extern_array[1] -->
   @@{ volatile int t=1; extern_array[t] @@}
@@end example

For structs (and most other multiword data types) the only option
is to make the struct itself (or the long long, or the ...) variable:

@@example
extern struct s extern_struct;
extern_struct.field -->
   @@{ volatile struct s *t=&extern_struct; t->field @@}
@@end example

or

@@example
extern long long extern_ll;
extern_ll -->
  @@{ volatile long long * local_ll=&extern_ll; *local_ll @@}
@@end example

A third method of dealing with this difficulty is to abandon
'auto-import' for the offending symbol and mark it with
@@code{__declspec(dllimport)}.  However, in practice that
requires using compile-time #defines to indicate whether you are
building a DLL, building client code that will link to the DLL, or
merely building/linking to a static library.   In making the choice
between the various methods of resolving the 'direct address with
constant offset' problem, you should consider typical real-world usage:

Original:
@@example
--foo.h
extern int arr[];
--foo.c
#include "foo.h"
void main(int argc, char **argv)@@{
  printf("%d\n",arr[1]);
@@}
@@end example

Solution 1:
@@example
--foo.h
extern int arr[];
--foo.c
#include "foo.h"
void main(int argc, char **argv)@@{
  /* This workaround is for win32 and cygwin; do not "optimize" */
  volatile int *parr = arr;
  printf("%d\n",parr[1]);
@@}
@@end example

Solution 2:
@@example
--foo.h
/* Note: auto-export is assumed (no __declspec(dllexport)) */
#if (defined(_WIN32) || defined(__CYGWIN__)) && \
  !(defined(FOO_BUILD_DLL) || defined(FOO_STATIC))
#define FOO_IMPORT __declspec(dllimport)
#else
#define FOO_IMPORT
#endif
extern FOO_IMPORT int arr[];
--foo.c
#include "foo.h"
void main(int argc, char **argv)@@{
  printf("%d\n",arr[1]);
@@}
@@end example

A fourth way to avoid this problem is to re-code your
library to use a functional interface rather than a data interface
for the offending variables (e.g. set_foo() and get_foo() accessor
functions).
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --disable-auto-import
@@item --disable-auto-import
Do not attempt to do sophisticated linking of @@code{_symbol} to
@@code{__imp__symbol} for DATA imports from DLLs.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --enable-runtime-pseudo-reloc
@@item --enable-runtime-pseudo-reloc
If your code contains expressions described in --enable-auto-import section,
that is, DATA imports from DLL with non-zero offset, this switch will create
a vector of 'runtime pseudo relocations' which can be used by runtime
environment to adjust references to such data in your client code.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --disable-runtime-pseudo-reloc
@@item --disable-runtime-pseudo-reloc
Do not create pseudo relocations for non-zero offset DATA imports from
DLLs.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --enable-extra-pe-debug
@@item --enable-extra-pe-debug
Show additional debug info related to auto-import symbol thunking.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --section-alignment
@@item --section-alignment
Sets the section alignment.  Sections in memory will always begin at
addresses which are a multiple of this number.  Defaults to 0x1000.
[This option is specific to the i386 PE targeted port of the linker]

@@cindex stack size
@@kindex --stack
@@item --stack @@var{reserve}
@@itemx --stack @@var{reserve},@@var{commit}
Specify the number of bytes of memory to reserve (and optionally commit)
to be used as stack for this program.  The default is 2MB reserved, 4K
committed.
[This option is specific to the i386 PE targeted port of the linker]

@@kindex --subsystem
@@item --subsystem @@var{which}
@@itemx --subsystem @@var{which}:@@var{major}
@@itemx --subsystem @@var{which}:@@var{major}.@@var{minor}
Specifies the subsystem under which your program will execute.  The
legal values for @@var{which} are @@code{native}, @@code{windows},
@@code{console}, @@code{posix}, and @@code{xbox}.  You may optionally set
the subsystem version also.  Numeric values are also accepted for
@@var{which}.
[This option is specific to the i386 PE targeted port of the linker]

The following options set flags in the @@code{DllCharacteristics} field
of the PE file header:
[These options are specific to PE targeted ports of the linker]

@@kindex --dynamicbase
@@item --dynamicbase
The image base address may be relocated using address space layout
randomization (ASLR).  This feature was introduced with MS Windows
Vista for i386 PE targets.

@@kindex --forceinteg
@@item --forceinteg
Code integrity checks are enforced.

@@kindex --nxcompat
@@item --nxcompat
The image is compatible with the Data Execution Prevention.
This feature was introduced with MS Windows XP SP2 for i386 PE targets.

@@kindex --no-isolation
@@item --no-isolation
Although the image understands isolation, do not isolate the image.

@@kindex --no-seh
@@item --no-seh
The image does not use SEH. No SE handler may be called from
this image.

@@kindex --no-bind
@@item --no-bind
Do not bind this image.

@@kindex --wdmdriver
@@item --wdmdriver
The driver uses the MS Windows Driver Model.

@@kindex --tsaware
@@item --tsaware
The image is Terminal Server aware.

@@end table

@@c man end

@@ifset C6X
@@subsection Options specific to C6X uClinux targets

@@c man begin OPTIONS

The C6X uClinux target uses a binary format called DSBT to support shared
libraries.  Each shared library in the system needs to have a unique index;
all executables use an index of 0.

@@table @@gcctabopt

@@kindex --dsbt-size
@@item --dsbt-size @@var{size}
This option sets the number of entires in the DSBT of the current executable
or shared library to @@var{size}.  The default is to create a table with 64
entries.

@@kindex --dsbt-index
@@item --dsbt-index @@var{index}
This option sets the DSBT index of the current executable or shared library
to @@var{index}.  The default is 0, which is appropriate for generating
executables.  If a shared library is generated with a DSBT index of 0, the
@@code{R_C6000_DSBT_INDEX} relocs are copied into the output file.

@@kindex --no-merge-exidx-entries
The @@samp{--no-merge-exidx-entries} switch disables the merging of adjacent
exidx entries in frame unwind info.

@@end table

@@c man end
@@end ifset

@@ifset M68HC11
@@subsection Options specific to Motorola 68HC11 and 68HC12 targets

@@c man begin OPTIONS

The 68HC11 and 68HC12 linkers support specific options to control the
memory bank switching mapping and trampoline code generation.

@@table @@gcctabopt

@@kindex --no-trampoline
@@item --no-trampoline
This option disables the generation of trampoline. By default a trampoline
is generated for each far function which is called using a @@code{jsr}
instruction (this happens when a pointer to a far function is taken).

@@kindex --bank-window
@@item --bank-window @@var{name}
This option indicates to the linker the name of the memory region in
the @@samp{MEMORY} specification that describes the memory bank window.
The definition of such region is then used by the linker to compute
paging and addresses within the memory window.

@@end table

@@c man end
@@end ifset

@@ifset M68K
@@subsection Options specific to Motorola 68K target

@@c man begin OPTIONS

The following options are supported to control handling of GOT generation
when linking for 68K targets.

@@table @@gcctabopt

@@kindex --got
@@item --got=@@var{type}
This option tells the linker which GOT generation scheme to use.
@@var{type} should be one of @@samp{single}, @@samp{negative},
@@samp{multigot} or @@samp{target}.  For more information refer to the
Info entry for @@file{ld}.

@@end table

@@c man end
@@end ifset

@@ifset MIPS
@@subsection Options specific to MIPS targets

@@c man begin OPTIONS

The following options are supported to control microMIPS instruction
generation when linking for MIPS targets.

@@table @@gcctabopt

@@kindex --insn32
@@item --insn32
@@kindex --no-insn32
@@itemx --no-insn32
These options control the choice of microMIPS instructions used in code
generated by the linker, such as that in the PLT or lazy binding stubs,
or in relaxation.  If @@samp{--insn32} is used, then the linker only uses
32-bit instruction encodings.  By default or if @@samp{--no-insn32} is
used, all instruction encodings are used, including 16-bit ones where
possible.

@@end table

@@c man end
@@end ifset

@@ifset UsesEnvVars
@@node Environment
@@section Environment Variables

@@c man begin ENVIRONMENT

You can change the behaviour of @@command{ld} with the environment variables
@@ifclear SingleFormat
@@code{GNUTARGET},
@@end ifclear
@@code{LDEMULATION} and @@code{COLLECT_NO_DEMANGLE}.

@@ifclear SingleFormat
@@kindex GNUTARGET
@@cindex default input format
@@code{GNUTARGET} determines the input-file object format if you don't
use @@samp{-b} (or its synonym @@samp{--format}).  Its value should be one
of the BFD names for an input format (@@pxref{BFD}).  If there is no
@@code{GNUTARGET} in the environment, @@command{ld} uses the natural format
of the target. If @@code{GNUTARGET} is set to @@code{default} then BFD
attempts to discover the input format by examining binary input files;
this method often succeeds, but there are potential ambiguities, since
there is no method of ensuring that the magic number used to specify
object-file formats is unique.  However, the configuration procedure for
BFD on each system places the conventional format for that system first
in the search-list, so ambiguities are resolved in favor of convention.
@@end ifclear

@@kindex LDEMULATION
@@cindex default emulation
@@cindex emulation, default
@@code{LDEMULATION} determines the default emulation if you don't use the
@@samp{-m} option.  The emulation can affect various aspects of linker
behaviour, particularly the default linker script.  You can list the
available emulations with the @@samp{--verbose} or @@samp{-V} options.  If
the @@samp{-m} option is not used, and the @@code{LDEMULATION} environment
variable is not defined, the default emulation depends upon how the
linker was configured.

@@kindex COLLECT_NO_DEMANGLE
@@cindex demangling, default
Normally, the linker will default to demangling symbols.  However, if
@@code{COLLECT_NO_DEMANGLE} is set in the environment, then it will
default to not demangling symbols.  This environment variable is used in
a similar fashion by the @@code{gcc} linker wrapper program.  The default
may be overridden by the @@samp{--demangle} and @@samp{--no-demangle}
options.

@@c man end
@@end ifset

@@node Scripts
@@chapter Linker Scripts

@@cindex scripts
@@cindex linker scripts
@@cindex command files
Every link is controlled by a @@dfn{linker script}.  This script is
written in the linker command language.

The main purpose of the linker script is to describe how the sections in
the input files should be mapped into the output file, and to control
the memory layout of the output file.  Most linker scripts do nothing
more than this.  However, when necessary, the linker script can also
direct the linker to perform many other operations, using the commands
described below.

The linker always uses a linker script.  If you do not supply one
yourself, the linker will use a default script that is compiled into the
linker executable.  You can use the @@samp{--verbose} command line option
to display the default linker script.  Certain command line options,
such as @@samp{-r} or @@samp{-N}, will affect the default linker script.

You may supply your own linker script by using the @@samp{-T} command
line option.  When you do this, your linker script will replace the
default linker script.

You may also use linker scripts implicitly by naming them as input files
to the linker, as though they were files to be linked.  @@xref{Implicit
Linker Scripts}.

@@menu
* Basic Script Concepts::	Basic Linker Script Concepts
* Script Format::		Linker Script Format
* Simple Example::		Simple Linker Script Example
* Simple Commands::		Simple Linker Script Commands
* Assignments::			Assigning Values to Symbols
* SECTIONS::			SECTIONS Command
* MEMORY::			MEMORY Command
* PHDRS::			PHDRS Command
* VERSION::			VERSION Command
* Expressions::			Expressions in Linker Scripts
* Implicit Linker Scripts::	Implicit Linker Scripts
@@end menu

@@node Basic Script Concepts
@@section Basic Linker Script Concepts
@@cindex linker script concepts
We need to define some basic concepts and vocabulary in order to
describe the linker script language.

The linker combines input files into a single output file.  The output
file and each input file are in a special data format known as an
@@dfn{object file format}.  Each file is called an @@dfn{object file}.
The output file is often called an @@dfn{executable}, but for our
purposes we will also call it an object file.  Each object file has,
among other things, a list of @@dfn{sections}.  We sometimes refer to a
section in an input file as an @@dfn{input section}; similarly, a section
in the output file is an @@dfn{output section}.

Each section in an object file has a name and a size.  Most sections
also have an associated block of data, known as the @@dfn{section
contents}.  A section may be marked as @@dfn{loadable}, which means that
the contents should be loaded into memory when the output file is run.
A section with no contents may be @@dfn{allocatable}, which means that an
area in memory should be set aside, but nothing in particular should be
loaded there (in some cases this memory must be zeroed out).  A section
which is neither loadable nor allocatable typically contains some sort
of debugging information.

Every loadable or allocatable output section has two addresses.  The
first is the @@dfn{VMA}, or virtual memory address.  This is the address
the section will have when the output file is run.  The second is the
@@dfn{LMA}, or load memory address.  This is the address at which the
section will be loaded.  In most cases the two addresses will be the
same.  An example of when they might be different is when a data section
is loaded into ROM, and then copied into RAM when the program starts up
(this technique is often used to initialize global variables in a ROM
based system).  In this case the ROM address would be the LMA, and the
RAM address would be the VMA.

You can see the sections in an object file by using the @@code{objdump}
program with the @@samp{-h} option.

Every object file also has a list of @@dfn{symbols}, known as the
@@dfn{symbol table}.  A symbol may be defined or undefined.  Each symbol
has a name, and each defined symbol has an address, among other
information.  If you compile a C or C++ program into an object file, you
will get a defined symbol for every defined function and global or
static variable.  Every undefined function or global variable which is
referenced in the input file will become an undefined symbol.

You can see the symbols in an object file by using the @@code{nm}
program, or by using the @@code{objdump} program with the @@samp{-t}
option.

@@node Script Format
@@section Linker Script Format
@@cindex linker script format
Linker scripts are text files.

You write a linker script as a series of commands.  Each command is
either a keyword, possibly followed by arguments, or an assignment to a
symbol.  You may separate commands using semicolons.  Whitespace is
generally ignored.

Strings such as file or format names can normally be entered directly.
If the file name contains a character such as a comma which would
otherwise serve to separate file names, you may put the file name in
double quotes.  There is no way to use a double quote character in a
file name.

You may include comments in linker scripts just as in C, delimited by
@@samp{/*} and @@samp{*/}.  As in C, comments are syntactically equivalent
to whitespace.

@@node Simple Example
@@section Simple Linker Script Example
@@cindex linker script example
@@cindex example of linker script
Many linker scripts are fairly simple.

The simplest possible linker script has just one command:
@@samp{SECTIONS}.  You use the @@samp{SECTIONS} command to describe the
memory layout of the output file.

The @@samp{SECTIONS} command is a powerful command.  Here we will
describe a simple use of it.  Let's assume your program consists only of
code, initialized data, and uninitialized data.  These will be in the
@@samp{.text}, @@samp{.data}, and @@samp{.bss} sections, respectively.
Let's assume further that these are the only sections which appear in
your input files.

For this example, let's say that the code should be loaded at address
0x10000, and that the data should start at address 0x8000000.  Here is a
linker script which will do that:
@@smallexample
SECTIONS
@@{
  . = 0x10000;
  .text : @@{ *(.text) @@}
  . = 0x8000000;
  .data : @@{ *(.data) @@}
  .bss : @@{ *(.bss) @@}
@@}
@@end smallexample

You write the @@samp{SECTIONS} command as the keyword @@samp{SECTIONS},
followed by a series of symbol assignments and output section
descriptions enclosed in curly braces.

The first line inside the @@samp{SECTIONS} command of the above example
sets the value of the special symbol @@samp{.}, which is the location
counter.  If you do not specify the address of an output section in some
other way (other ways are described later), the address is set from the
current value of the location counter.  The location counter is then
incremented by the size of the output section.  At the start of the
@@samp{SECTIONS} command, the location counter has the value @@samp{0}.

The second line defines an output section, @@samp{.text}.  The colon is
required syntax which may be ignored for now.  Within the curly braces
after the output section name, you list the names of the input sections
which should be placed into this output section.  The @@samp{*} is a
wildcard which matches any file name.  The expression @@samp{*(.text)}
means all @@samp{.text} input sections in all input files.

Since the location counter is @@samp{0x10000} when the output section
@@samp{.text} is defined, the linker will set the address of the
@@samp{.text} section in the output file to be @@samp{0x10000}.

The remaining lines define the @@samp{.data} and @@samp{.bss} sections in
the output file.  The linker will place the @@samp{.data} output section
at address @@samp{0x8000000}.  After the linker places the @@samp{.data}
output section, the value of the location counter will be
@@samp{0x8000000} plus the size of the @@samp{.data} output section.  The
effect is that the linker will place the @@samp{.bss} output section
immediately after the @@samp{.data} output section in memory.

The linker will ensure that each output section has the required
alignment, by increasing the location counter if necessary.  In this
example, the specified addresses for the @@samp{.text} and @@samp{.data}
sections will probably satisfy any alignment constraints, but the linker
may have to create a small gap between the @@samp{.data} and @@samp{.bss}
sections.

That's it!  That's a simple and complete linker script.

@@node Simple Commands
@@section Simple Linker Script Commands
@@cindex linker script simple commands
In this section we describe the simple linker script commands.

@@menu
* Entry Point::			Setting the entry point
* File Commands::		Commands dealing with files
@@ifclear SingleFormat
* Format Commands::		Commands dealing with object file formats
@@end ifclear

* REGION_ALIAS::		Assign alias names to memory regions
* Miscellaneous Commands::	Other linker script commands
@@end menu

@@node Entry Point
@@subsection Setting the Entry Point
@@kindex ENTRY(@@var{symbol})
@@cindex start of execution
@@cindex first instruction
@@cindex entry point
The first instruction to execute in a program is called the @@dfn{entry
point}.  You can use the @@code{ENTRY} linker script command to set the
entry point.  The argument is a symbol name:
@@smallexample
ENTRY(@@var{symbol})
@@end smallexample

There are several ways to set the entry point.  The linker will set the
entry point by trying each of the following methods in order, and
stopping when one of them succeeds:
@@itemize @@bullet
@@item
the @@samp{-e} @@var{entry} command-line option;
@@item
the @@code{ENTRY(@@var{symbol})} command in a linker script;
@@item
the value of a target specific symbol, if it is defined;  For many
targets this is @@code{start}, but PE and BeOS based systems for example
check a list of possible entry symbols, matching the first one found.
@@item
the address of the first byte of the @@samp{.text} section, if present;
@@item
The address @@code{0}.
@@end itemize

@@node File Commands
@@subsection Commands Dealing with Files
@@cindex linker script file commands
Several linker script commands deal with files.

@@table @@code
@@item INCLUDE @@var{filename}
@@kindex INCLUDE @@var{filename}
@@cindex including a linker script
Include the linker script @@var{filename} at this point.  The file will
be searched for in the current directory, and in any directory specified
with the @@option{-L} option.  You can nest calls to @@code{INCLUDE} up to
10 levels deep.

You can place @@code{INCLUDE} directives at the top level, in @@code{MEMORY} or
@@code{SECTIONS} commands, or in output section descriptions.

@@item INPUT(@@var{file}, @@var{file}, @@dots{})
@@itemx INPUT(@@var{file} @@var{file} @@dots{})
@@kindex INPUT(@@var{files})
@@cindex input files in linker scripts
@@cindex input object files in linker scripts
@@cindex linker script input object files
The @@code{INPUT} command directs the linker to include the named files
in the link, as though they were named on the command line.

For example, if you always want to include @@file{subr.o} any time you do
a link, but you can't be bothered to put it on every link command line,
then you can put @@samp{INPUT (subr.o)} in your linker script.

In fact, if you like, you can list all of your input files in the linker
script, and then invoke the linker with nothing but a @@samp{-T} option.

In case a @@dfn{sysroot prefix} is configured, and the filename starts
with the @@samp{/} character, and the script being processed was
located inside the @@dfn{sysroot prefix}, the filename will be looked
for in the @@dfn{sysroot prefix}.  Otherwise, the linker will try to
open the file in the current directory.  If it is not found, the
linker will search through the archive library search path.  See the
description of @@samp{-L} in @@ref{Options,,Command Line Options}.

If you use @@samp{INPUT (-l@@var{file})}, @@command{ld} will transform the
name to @@code{lib@@var{file}.a}, as with the command line argument
@@samp{-l}.

When you use the @@code{INPUT} command in an implicit linker script, the
files will be included in the link at the point at which the linker
script file is included.  This can affect archive searching.

@@item GROUP(@@var{file}, @@var{file}, @@dots{})
@@itemx GROUP(@@var{file} @@var{file} @@dots{})
@@kindex GROUP(@@var{files})
@@cindex grouping input files
The @@code{GROUP} command is like @@code{INPUT}, except that the named
files should all be archives, and they are searched repeatedly until no
new undefined references are created.  See the description of @@samp{-(}
in @@ref{Options,,Command Line Options}.

@@item AS_NEEDED(@@var{file}, @@var{file}, @@dots{})
@@itemx AS_NEEDED(@@var{file} @@var{file} @@dots{})
@@kindex AS_NEEDED(@@var{files})
This construct can appear only inside of the @@code{INPUT} or @@code{GROUP}
commands, among other filenames.  The files listed will be handled
as if they appear directly in the @@code{INPUT} or @@code{GROUP} commands,
with the exception of ELF shared libraries, that will be added only
when they are actually needed.  This construct essentially enables
@@option{--as-needed} option for all the files listed inside of it
and restores previous @@option{--as-needed} resp. @@option{--no-as-needed}
setting afterwards.

@@item OUTPUT(@@var{filename})
@@kindex OUTPUT(@@var{filename})
@@cindex output file name in linker script
The @@code{OUTPUT} command names the output file.  Using
@@code{OUTPUT(@@var{filename})} in the linker script is exactly like using
@@samp{-o @@var{filename}} on the command line (@@pxref{Options,,Command
Line Options}).  If both are used, the command line option takes
precedence.

You can use the @@code{OUTPUT} command to define a default name for the
output file other than the usual default of @@file{a.out}.

@@item SEARCH_DIR(@@var{path})
@@kindex SEARCH_DIR(@@var{path})
@@cindex library search path in linker script
@@cindex archive search path in linker script
@@cindex search path in linker script
The @@code{SEARCH_DIR} command adds @@var{path} to the list of paths where
@@command{ld} looks for archive libraries.  Using
@@code{SEARCH_DIR(@@var{path})} is exactly like using @@samp{-L @@var{path}}
on the command line (@@pxref{Options,,Command Line Options}).  If both
are used, then the linker will search both paths.  Paths specified using
the command line option are searched first.

@@item STARTUP(@@var{filename})
@@kindex STARTUP(@@var{filename})
@@cindex first input file
The @@code{STARTUP} command is just like the @@code{INPUT} command, except
that @@var{filename} will become the first input file to be linked, as
though it were specified first on the command line.  This may be useful
when using a system in which the entry point is always the start of the
first file.
@@end table

@@ifclear SingleFormat
@@node Format Commands
@@subsection Commands Dealing with Object File Formats
A couple of linker script commands deal with object file formats.

@@table @@code
@@item OUTPUT_FORMAT(@@var{bfdname})
@@itemx OUTPUT_FORMAT(@@var{default}, @@var{big}, @@var{little})
@@kindex OUTPUT_FORMAT(@@var{bfdname})
@@cindex output file format in linker script
The @@code{OUTPUT_FORMAT} command names the BFD format to use for the
output file (@@pxref{BFD}).  Using @@code{OUTPUT_FORMAT(@@var{bfdname})} is
exactly like using @@samp{--oformat @@var{bfdname}} on the command line
(@@pxref{Options,,Command Line Options}).  If both are used, the command
line option takes precedence.

You can use @@code{OUTPUT_FORMAT} with three arguments to use different
formats based on the @@samp{-EB} and @@samp{-EL} command line options.
This permits the linker script to set the output format based on the
desired endianness.

If neither @@samp{-EB} nor @@samp{-EL} are used, then the output format
will be the first argument, @@var{default}.  If @@samp{-EB} is used, the
output format will be the second argument, @@var{big}.  If @@samp{-EL} is
used, the output format will be the third argument, @@var{little}.

For example, the default linker script for the MIPS ELF target uses this
command:
@@smallexample
OUTPUT_FORMAT(elf32-bigmips, elf32-bigmips, elf32-littlemips)
@@end smallexample
This says that the default format for the output file is
@@samp{elf32-bigmips}, but if the user uses the @@samp{-EL} command line
option, the output file will be created in the @@samp{elf32-littlemips}
format.

@@item TARGET(@@var{bfdname})
@@kindex TARGET(@@var{bfdname})
@@cindex input file format in linker script
The @@code{TARGET} command names the BFD format to use when reading input
files.  It affects subsequent @@code{INPUT} and @@code{GROUP} commands.
This command is like using @@samp{-b @@var{bfdname}} on the command line
(@@pxref{Options,,Command Line Options}).  If the @@code{TARGET} command
is used but @@code{OUTPUT_FORMAT} is not, then the last @@code{TARGET}
command is also used to set the format for the output file.  @@xref{BFD}.
@@end table
@@end ifclear

@@node REGION_ALIAS
@@subsection Assign alias names to memory regions
@@kindex REGION_ALIAS(@@var{alias}, @@var{region})
@@cindex region alias
@@cindex region names

Alias names can be added to existing memory regions created with the
@@ref{MEMORY} command.  Each name corresponds to at most one memory region.

@@smallexample
REGION_ALIAS(@@var{alias}, @@var{region})
@@end smallexample

The @@code{REGION_ALIAS} function creates an alias name @@var{alias} for the
memory region @@var{region}.  This allows a flexible mapping of output sections
to memory regions.  An example follows.

Suppose we have an application for embedded systems which come with various
memory storage devices.  All have a general purpose, volatile memory @@code{RAM}
that allows code execution or data storage.  Some may have a read-only,
non-volatile memory @@code{ROM} that allows code execution and read-only data
access.  The last variant is a read-only, non-volatile memory @@code{ROM2} with
read-only data access and no code execution capability.  We have four output
sections:

@@itemize @@bullet
@@item
@@code{.text} program code;
@@item
@@code{.rodata} read-only data;
@@item
@@code{.data} read-write initialized data;
@@item
@@code{.bss} read-write zero initialized data.
@@end itemize

The goal is to provide a linker command file that contains a system independent
part defining the output sections and a system dependent part mapping the
output sections to the memory regions available on the system.  Our embedded
systems come with three different memory setups @@code{A}, @@code{B} and
@@code{C}:
@@multitable @@columnfractions .25 .25 .25 .25
@@item Section @@tab Variant A @@tab Variant B @@tab Variant C
@@item .text @@tab RAM @@tab ROM @@tab ROM
@@item .rodata @@tab RAM @@tab ROM @@tab ROM2
@@item .data @@tab RAM @@tab RAM/ROM @@tab RAM/ROM2
@@item .bss @@tab RAM @@tab RAM @@tab RAM
@@end multitable
The notation @@code{RAM/ROM} or @@code{RAM/ROM2} means that this section is
loaded into region @@code{ROM} or @@code{ROM2} respectively.  Please note that
the load address of the @@code{.data} section starts in all three variants at
the end of the @@code{.rodata} section.

The base linker script that deals with the output sections follows.  It
includes the system dependent @@code{linkcmds.memory} file that describes the
memory layout:
@@smallexample
INCLUDE linkcmds.memory

SECTIONS
  @@{
    .text :
      @@{
        *(.text)
      @@} > REGION_TEXT
    .rodata :
      @@{
        *(.rodata)
        rodata_end = .;
      @@} > REGION_RODATA
    .data : AT (rodata_end)
      @@{
        data_start = .;
        *(.data)
      @@} > REGION_DATA
    data_size = SIZEOF(.data);
    data_load_start = LOADADDR(.data);
    .bss :
      @@{
        *(.bss)
      @@} > REGION_BSS
  @@}
@@end smallexample

Now we need three different @@code{linkcmds.memory} files to define memory
regions and alias names.  The content of @@code{linkcmds.memory} for the three
variants @@code{A}, @@code{B} and @@code{C}:
@@table @@code
@@item A
Here everything goes into the @@code{RAM}.
@@smallexample
MEMORY
  @@{
    RAM : ORIGIN = 0, LENGTH = 4M
  @@}

REGION_ALIAS("REGION_TEXT", RAM);
REGION_ALIAS("REGION_RODATA", RAM);
REGION_ALIAS("REGION_DATA", RAM);
REGION_ALIAS("REGION_BSS", RAM);
@@end smallexample
@@item B
Program code and read-only data go into the @@code{ROM}.  Read-write data goes
into the @@code{RAM}.  An image of the initialized data is loaded into the
@@code{ROM} and will be copied during system start into the @@code{RAM}.
@@smallexample
MEMORY
  @@{
    ROM : ORIGIN = 0, LENGTH = 3M
    RAM : ORIGIN = 0x10000000, LENGTH = 1M
  @@}

REGION_ALIAS("REGION_TEXT", ROM);
REGION_ALIAS("REGION_RODATA", ROM);
REGION_ALIAS("REGION_DATA", RAM);
REGION_ALIAS("REGION_BSS", RAM);
@@end smallexample
@@item C
Program code goes into the @@code{ROM}.  Read-only data goes into the
@@code{ROM2}.  Read-write data goes into the @@code{RAM}.  An image of the
initialized data is loaded into the @@code{ROM2} and will be copied during
system start into the @@code{RAM}.
@@smallexample
MEMORY
  @@{
    ROM : ORIGIN = 0, LENGTH = 2M
    ROM2 : ORIGIN = 0x10000000, LENGTH = 1M
    RAM : ORIGIN = 0x20000000, LENGTH = 1M
  @@}

REGION_ALIAS("REGION_TEXT", ROM);
REGION_ALIAS("REGION_RODATA", ROM2);
REGION_ALIAS("REGION_DATA", RAM);
REGION_ALIAS("REGION_BSS", RAM);
@@end smallexample
@@end table

It is possible to write a common system initialization routine to copy the
@@code{.data} section from @@code{ROM} or @@code{ROM2} into the @@code{RAM} if
necessary:
@@smallexample
#include <string.h>

extern char data_start [];
extern char data_size [];
extern char data_load_start [];

void copy_data(void)
@@{
  if (data_start != data_load_start)
    @@{
      memcpy(data_start, data_load_start, (size_t) data_size);
    @@}
@@}
@@end smallexample

@@node Miscellaneous Commands
@@subsection Other Linker Script Commands
There are a few other linker scripts commands.

@@table @@code
@@item ASSERT(@@var{exp}, @@var{message})
@@kindex ASSERT
@@cindex assertion in linker script
Ensure that @@var{exp} is non-zero.  If it is zero, then exit the linker
with an error code, and print @@var{message}.

@@item EXTERN(@@var{symbol} @@var{symbol} @@dots{})
@@kindex EXTERN
@@cindex undefined symbol in linker script
Force @@var{symbol} to be entered in the output file as an undefined
symbol.  Doing this may, for example, trigger linking of additional
modules from standard libraries.  You may list several @@var{symbol}s for
each @@code{EXTERN}, and you may use @@code{EXTERN} multiple times.  This
command has the same effect as the @@samp{-u} command-line option.

@@item FORCE_COMMON_ALLOCATION
@@kindex FORCE_COMMON_ALLOCATION
@@cindex common allocation in linker script
This command has the same effect as the @@samp{-d} command-line option:
to make @@command{ld} assign space to common symbols even if a relocatable
output file is specified (@@samp{-r}).

@@item INHIBIT_COMMON_ALLOCATION
@@kindex INHIBIT_COMMON_ALLOCATION
@@cindex common allocation in linker script
This command has the same effect as the @@samp{--no-define-common}
command-line option: to make @@code{ld} omit the assignment of addresses
to common symbols even for a non-relocatable output file.

@@item INSERT [ AFTER | BEFORE ] @@var{output_section}
@@kindex INSERT
@@cindex insert user script into default script
This command is typically used in a script specified by @@samp{-T} to
augment the default @@code{SECTIONS} with, for example, overlays.  It
inserts all prior linker script statements after (or before)
@@var{output_section}, and also causes @@samp{-T} to not override the
default linker script.  The exact insertion point is as for orphan
sections.  @@xref{Location Counter}.  The insertion happens after the
linker has mapped input sections to output sections.  Prior to the
insertion, since @@samp{-T} scripts are parsed before the default
linker script, statements in the @@samp{-T} script occur before the
default linker script statements in the internal linker representation
of the script.  In particular, input section assignments will be made
to @@samp{-T} output sections before those in the default script.  Here
is an example of how a @@samp{-T} script using @@code{INSERT} might look:

@@smallexample
SECTIONS
@@{
  OVERLAY :
  @@{
    .ov1 @@{ ov1*(.text) @@}
    .ov2 @@{ ov2*(.text) @@}
  @@}
@@}
INSERT AFTER .text;
@@end smallexample

@@item NOCROSSREFS(@@var{section} @@var{section} @@dots{})
@@kindex NOCROSSREFS(@@var{sections})
@@cindex cross references
This command may be used to tell @@command{ld} to issue an error about any
references among certain output sections.

In certain types of programs, particularly on embedded systems when
using overlays, when one section is loaded into memory, another section
will not be.  Any direct references between the two sections would be
errors.  For example, it would be an error if code in one section called
a function defined in the other section.

The @@code{NOCROSSREFS} command takes a list of output section names.  If
@@command{ld} detects any cross references between the sections, it reports
an error and returns a non-zero exit status.  Note that the
@@code{NOCROSSREFS} command uses output section names, not input section
names.

@@ifclear SingleFormat
@@item OUTPUT_ARCH(@@var{bfdarch})
@@kindex OUTPUT_ARCH(@@var{bfdarch})
@@cindex machine architecture
@@cindex architecture
Specify a particular output machine architecture.  The argument is one
of the names used by the BFD library (@@pxref{BFD}).  You can see the
architecture of an object file by using the @@code{objdump} program with
the @@samp{-f} option.
@@end ifclear

@@item LD_FEATURE(@@var{string})
@@kindex LD_FEATURE(@@var{string})
This command may be used to modify @@command{ld} behavior.  If
@@var{string} is @@code{"SANE_EXPR"} then absolute symbols and numbers
in a script are simply treated as numbers everywhere.
@@xref{Expression Section}.
@@end table

@@node Assignments
@@section Assigning Values to Symbols
@@cindex assignment in scripts
@@cindex symbol definition, scripts
@@cindex variables, defining
You may assign a value to a symbol in a linker script.  This will define
the symbol and place it into the symbol table with a global scope.

@@menu
* Simple Assignments::		Simple Assignments
* HIDDEN::			HIDDEN
* PROVIDE::			PROVIDE
* PROVIDE_HIDDEN::		PROVIDE_HIDDEN
* Source Code Reference::	How to use a linker script defined symbol in source code
@@end menu

@@node Simple Assignments
@@subsection Simple Assignments

You may assign to a symbol using any of the C assignment operators:

@@table @@code
@@item @@var{symbol} = @@var{expression} ;
@@itemx @@var{symbol} += @@var{expression} ;
@@itemx @@var{symbol} -= @@var{expression} ;
@@itemx @@var{symbol} *= @@var{expression} ;
@@itemx @@var{symbol} /= @@var{expression} ;
@@itemx @@var{symbol} <<= @@var{expression} ;
@@itemx @@var{symbol} >>= @@var{expression} ;
@@itemx @@var{symbol} &= @@var{expression} ;
@@itemx @@var{symbol} |= @@var{expression} ;
@@end table

The first case will define @@var{symbol} to the value of
@@var{expression}.  In the other cases, @@var{symbol} must already be
defined, and the value will be adjusted accordingly.

The special symbol name @@samp{.} indicates the location counter.  You
may only use this within a @@code{SECTIONS} command.  @@xref{Location Counter}.

The semicolon after @@var{expression} is required.

Expressions are defined below; see @@ref{Expressions}.

You may write symbol assignments as commands in their own right, or as
statements within a @@code{SECTIONS} command, or as part of an output
section description in a @@code{SECTIONS} command.

The section of the symbol will be set from the section of the
expression; for more information, see @@ref{Expression Section}.

Here is an example showing the three different places that symbol
assignments may be used:

@@smallexample
floating_point = 0;
SECTIONS
@@{
  .text :
    @@{
      *(.text)
      _etext = .;
    @@}
  _bdata = (. + 3) & ~ 3;
  .data : @@{ *(.data) @@}
@@}
@@end smallexample
@@noindent
In this example, the symbol @@samp{floating_point} will be defined as
zero.  The symbol @@samp{_etext} will be defined as the address following
the last @@samp{.text} input section.  The symbol @@samp{_bdata} will be
defined as the address following the @@samp{.text} output section aligned
upward to a 4 byte boundary.

@@node HIDDEN
@@subsection HIDDEN
@@cindex HIDDEN
For ELF targeted ports, define a symbol that will be hidden and won't be
exported.  The syntax is @@code{HIDDEN(@@var{symbol} = @@var{expression})}.

Here is the example from @@ref{Simple Assignments}, rewritten to use
@@code{HIDDEN}:

@@smallexample
HIDDEN(floating_point = 0);
SECTIONS
@@{
  .text :
    @@{
      *(.text)
      HIDDEN(_etext = .);
    @@}
  HIDDEN(_bdata = (. + 3) & ~ 3);
  .data : @@{ *(.data) @@}
@@}
@@end smallexample
@@noindent
In this case none of the three symbols will be visible outside this module.

@@node PROVIDE
@@subsection PROVIDE
@@cindex PROVIDE
In some cases, it is desirable for a linker script to define a symbol
only if it is referenced and is not defined by any object included in
the link.  For example, traditional linkers defined the symbol
@@samp{etext}.  However, ANSI C requires that the user be able to use
@@samp{etext} as a function name without encountering an error.  The
@@code{PROVIDE} keyword may be used to define a symbol, such as
@@samp{etext}, only if it is referenced but not defined.  The syntax is
@@code{PROVIDE(@@var{symbol} = @@var{expression})}.

Here is an example of using @@code{PROVIDE} to define @@samp{etext}:
@@smallexample
SECTIONS
@@{
  .text :
    @@{
      *(.text)
      _etext = .;
      PROVIDE(etext = .);
    @@}
@@}
@@end smallexample

In this example, if the program defines @@samp{_etext} (with a leading
underscore), the linker will give a multiple definition error.  If, on
the other hand, the program defines @@samp{etext} (with no leading
underscore), the linker will silently use the definition in the program.
If the program references @@samp{etext} but does not define it, the
linker will use the definition in the linker script.

@@node PROVIDE_HIDDEN
@@subsection PROVIDE_HIDDEN
@@cindex PROVIDE_HIDDEN
Similar to @@code{PROVIDE}.  For ELF targeted ports, the symbol will be
hidden and won't be exported.

@@node Source Code Reference
@@subsection Source Code Reference

Accessing a linker script defined variable from source code is not
intuitive.  In particular a linker script symbol is not equivalent to
a variable declaration in a high level language, it is instead a
symbol that does not have a value.

Before going further, it is important to note that compilers often
transform names in the source code into different names when they are
stored in the symbol table.  For example, Fortran compilers commonly
prepend or append an underscore, and C++ performs extensive @@samp{name
mangling}.  Therefore there might be a discrepancy between the name
of a variable as it is used in source code and the name of the same
variable as it is defined in a linker script.  For example in C a
linker script variable might be referred to as:

@@smallexample
  extern int foo;
@@end smallexample

But in the linker script it might be defined as:

@@smallexample
  _foo = 1000;
@@end smallexample

In the remaining examples however it is assumed that no name
transformation has taken place.

When a symbol is declared in a high level language such as C, two
things happen.  The first is that the compiler reserves enough space
in the program's memory to hold the @@emph{value} of the symbol.  The
second is that the compiler creates an entry in the program's symbol
table which holds the symbol's @@emph{address}.  ie the symbol table
contains the address of the block of memory holding the symbol's
value.  So for example the following C declaration, at file scope:

@@smallexample
  int foo = 1000;
@@end smallexample

creates an entry called @@samp{foo} in the symbol table.  This entry
holds the address of an @@samp{int} sized block of memory where the
number 1000 is initially stored.

When a program references a symbol the compiler generates code that
first accesses the symbol table to find the address of the symbol's
memory block and then code to read the value from that memory block.
So:

@@smallexample
  foo = 1;
@@end smallexample

looks up the symbol @@samp{foo} in the symbol table, gets the address
associated with this symbol and then writes the value 1 into that
address.  Whereas:

@@smallexample
  int * a = & foo;
@@end smallexample

looks up the symbol @@samp{foo} in the symbol table, gets its address
and then copies this address into the block of memory associated with
the variable @@samp{a}.

Linker scripts symbol declarations, by contrast, create an entry in
the symbol table but do not assign any memory to them.  Thus they are
an address without a value.  So for example the linker script definition:

@@smallexample
  foo = 1000;
@@end smallexample

creates an entry in the symbol table called @@samp{foo} which holds
the address of memory location 1000, but nothing special is stored at
address 1000.  This means that you cannot access the @@emph{value} of a
linker script defined symbol - it has no value - all you can do is
access the @@emph{address} of a linker script defined symbol.

Hence when you are using a linker script defined symbol in source code
you should always take the address of the symbol, and never attempt to
use its value.  For example suppose you want to copy the contents of a
section of memory called .ROM into a section called .FLASH and the
linker script contains these declarations:

@@smallexample
@@group
  start_of_ROM   = .ROM;
  end_of_ROM     = .ROM + sizeof (.ROM) - 1;
  start_of_FLASH = .FLASH;
@@end group
@@end smallexample

Then the C source code to perform the copy would be:

@@smallexample
@@group
  extern char start_of_ROM, end_of_ROM, start_of_FLASH;

  memcpy (& start_of_FLASH, & start_of_ROM, & end_of_ROM - & start_of_ROM);
@@end group
@@end smallexample

Note the use of the @@samp{&} operators.  These are correct.

@@node SECTIONS
@@section SECTIONS Command
@@kindex SECTIONS
The @@code{SECTIONS} command tells the linker how to map input sections
into output sections, and how to place the output sections in memory.

The format of the @@code{SECTIONS} command is:
@@smallexample
SECTIONS
@@{
  @@var{sections-command}
  @@var{sections-command}
  @@dots{}
@@}
@@end smallexample

Each @@var{sections-command} may of be one of the following:

@@itemize @@bullet
@@item
an @@code{ENTRY} command (@@pxref{Entry Point,,Entry command})
@@item
a symbol assignment (@@pxref{Assignments})
@@item
an output section description
@@item
an overlay description
@@end itemize

The @@code{ENTRY} command and symbol assignments are permitted inside the
@@code{SECTIONS} command for convenience in using the location counter in
those commands.  This can also make the linker script easier to
understand because you can use those commands at meaningful points in
the layout of the output file.

Output section descriptions and overlay descriptions are described
below.

If you do not use a @@code{SECTIONS} command in your linker script, the
linker will place each input section into an identically named output
section in the order that the sections are first encountered in the
input files.  If all input sections are present in the first file, for
example, the order of sections in the output file will match the order
in the first input file.  The first section will be at address zero.

@@menu
* Output Section Description::	Output section description
* Output Section Name::		Output section name
* Output Section Address::	Output section address
* Input Section::		Input section description
* Output Section Data::		Output section data
* Output Section Keywords::	Output section keywords
* Output Section Discarding::	Output section discarding
* Output Section Attributes::	Output section attributes
* Overlay Description::		Overlay description
@@end menu

@@node Output Section Description
@@subsection Output Section Description
The full description of an output section looks like this:
@@smallexample
@@group
@@var{section} [@@var{address}] [(@@var{type})] :
  [AT(@@var{lma})]
  [ALIGN(@@var{section_align}) | ALIGN_WITH_INPUT]
  [SUBALIGN(@@var{subsection_align})]
  [@@var{constraint}]
  @@{
    @@var{output-section-command}
    @@var{output-section-command}
    @@dots{}
  @@} [>@@var{region}] [AT>@@var{lma_region}] [:@@var{phdr} :@@var{phdr} @@dots{}] [=@@var{fillexp}]
@@end group
@@end smallexample

Most output sections do not use most of the optional section attributes.

The whitespace around @@var{section} is required, so that the section
name is unambiguous.  The colon and the curly braces are also required.
The line breaks and other white space are optional.

Each @@var{output-section-command} may be one of the following:

@@itemize @@bullet
@@item
a symbol assignment (@@pxref{Assignments})
@@item
an input section description (@@pxref{Input Section})
@@item
data values to include directly (@@pxref{Output Section Data})
@@item
a special output section keyword (@@pxref{Output Section Keywords})
@@end itemize

@@node Output Section Name
@@subsection Output Section Name
@@cindex name, section
@@cindex section name
The name of the output section is @@var{section}.  @@var{section} must
meet the constraints of your output format.  In formats which only
support a limited number of sections, such as @@code{a.out}, the name
must be one of the names supported by the format (@@code{a.out}, for
example, allows only @@samp{.text}, @@samp{.data} or @@samp{.bss}). If the
output format supports any number of sections, but with numbers and not
names (as is the case for Oasys), the name should be supplied as a
quoted numeric string.  A section name may consist of any sequence of
characters, but a name which contains any unusual characters such as
commas must be quoted.

The output section name @@samp{/DISCARD/} is special; @@ref{Output Section
Discarding}.

@@node Output Section Address
@@subsection Output Section Address
@@cindex address, section
@@cindex section address
The @@var{address} is an expression for the VMA (the virtual memory
address) of the output section.  This address is optional, but if it
is provided then the output address will be set exactly as specified.

If the output address is not specified then one will be chosen for the
section, based on the heuristic below.  This address will be adjusted
to fit the alignment requirement of the output section.  The
alignment requirement is the strictest alignment of any input section
contained within the output section.

The output section address heuristic is as follows:

@@itemize @@bullet
@@item
If an output memory @@var{region} is set for the section then it
is added to this region and its address will be the next free address
in that region.

@@item
If the MEMORY command has been used to create a list of memory
regions then the first region which has attributes compatible with the
section is selected to contain it.  The section's output address will
be the next free address in that region; @@ref{MEMORY}.

@@item
If no memory regions were specified, or none match the section then
the output address will be based on the current value of the location
counter.
@@end itemize

@@noindent
For example:

@@smallexample
.text . : @@{ *(.text) @@}
@@end smallexample

@@noindent
and

@@smallexample
.text : @@{ *(.text) @@}
@@end smallexample

@@noindent
are subtly different.  The first will set the address of the
@@samp{.text} output section to the current value of the location
counter.  The second will set it to the current value of the location
counter aligned to the strictest alignment of any of the @@samp{.text}
input sections.

The @@var{address} may be an arbitrary expression; @@ref{Expressions}.
For example, if you want to align the section on a 0x10 byte boundary,
so that the lowest four bits of the section address are zero, you could
do something like this:
@@smallexample
.text ALIGN(0x10) : @@{ *(.text) @@}
@@end smallexample
@@noindent
This works because @@code{ALIGN} returns the current location counter
aligned upward to the specified value.

Specifying @@var{address} for a section will change the value of the
location counter, provided that the section is non-empty.  (Empty
sections are ignored).

@@node Input Section
@@subsection Input Section Description
@@cindex input sections
@@cindex mapping input sections to output sections
The most common output section command is an input section description.

The input section description is the most basic linker script operation.
You use output sections to tell the linker how to lay out your program
in memory.  You use input section descriptions to tell the linker how to
map the input files into your memory layout.

@@menu
* Input Section Basics::	Input section basics
* Input Section Wildcards::	Input section wildcard patterns
* Input Section Common::	Input section for common symbols
* Input Section Keep::		Input section and garbage collection
* Input Section Example::	Input section example
@@end menu

@@node Input Section Basics
@@subsubsection Input Section Basics
@@cindex input section basics
An input section description consists of a file name optionally followed
by a list of section names in parentheses.

The file name and the section name may be wildcard patterns, which we
describe further below (@@pxref{Input Section Wildcards}).

The most common input section description is to include all input
sections with a particular name in the output section.  For example, to
include all input @@samp{.text} sections, you would write:
@@smallexample
*(.text)
@@end smallexample
@@noindent
Here the @@samp{*} is a wildcard which matches any file name.  To exclude a list
of files from matching the file name wildcard, EXCLUDE_FILE may be used to
match all files except the ones specified in the EXCLUDE_FILE list.  For
example:
@@smallexample
*(EXCLUDE_FILE (*crtend.o *otherfile.o) .ctors)
@@end smallexample
will cause all .ctors sections from all files except @@file{crtend.o} and
@@file{otherfile.o} to be included.

There are two ways to include more than one section:
@@smallexample
*(.text .rdata)
*(.text) *(.rdata)
@@end smallexample
@@noindent
The difference between these is the order in which the @@samp{.text} and
@@samp{.rdata} input sections will appear in the output section.  In the
first example, they will be intermingled, appearing in the same order as
they are found in the linker input.  In the second example, all
@@samp{.text} input sections will appear first, followed by all
@@samp{.rdata} input sections.

You can specify a file name to include sections from a particular file.
You would do this if one or more of your files contain special data that
needs to be at a particular location in memory.  For example:
@@smallexample
data.o(.data)
@@end smallexample

To refine the sections that are included based on the section flags
of an input section, INPUT_SECTION_FLAGS may be used.

Here is a simple example for using Section header flags for ELF sections:

@@smallexample
@@group
SECTIONS @@{
  .text : @@{ INPUT_SECTION_FLAGS (SHF_MERGE & SHF_STRINGS) *(.text) @@}
  .text2 :  @@{ INPUT_SECTION_FLAGS (!SHF_WRITE) *(.text) @@}
@@}
@@end group
@@end smallexample

In this example, the output section @@samp{.text} will be comprised of any
input section matching the name *(.text) whose section header flags
@@code{SHF_MERGE} and @@code{SHF_STRINGS} are set.  The output section
@@samp{.text2} will be comprised of any input section matching the name *(.text)
whose section header flag @@code{SHF_WRITE} is clear.

You can also specify files within archives by writing a pattern
matching the archive, a colon, then the pattern matching the file,
with no whitespace around the colon.

@@table @@samp
@@item archive:file
matches file within archive
@@item archive:
matches the whole archive
@@item :file
matches file but not one in an archive
@@end table

Either one or both of @@samp{archive} and @@samp{file} can contain shell
wildcards.  On DOS based file systems, the linker will assume that a
single letter followed by a colon is a drive specifier, so
@@samp{c:myfile.o} is a simple file specification, not @@samp{myfile.o}
within an archive called @@samp{c}.  @@samp{archive:file} filespecs may
also be used within an @@code{EXCLUDE_FILE} list, but may not appear in
other linker script contexts.  For instance, you cannot extract a file
from an archive by using @@samp{archive:file} in an @@code{INPUT}
command.

If you use a file name without a list of sections, then all sections in
the input file will be included in the output section.  This is not
commonly done, but it may by useful on occasion.  For example:
@@smallexample
data.o
@@end smallexample

When you use a file name which is not an @@samp{archive:file} specifier
and does not contain any wild card
characters, the linker will first see if you also specified the file
name on the linker command line or in an @@code{INPUT} command.  If you
did not, the linker will attempt to open the file as an input file, as
though it appeared on the command line.  Note that this differs from an
@@code{INPUT} command, because the linker will not search for the file in
the archive search path.

@@node Input Section Wildcards
@@subsubsection Input Section Wildcard Patterns
@@cindex input section wildcards
@@cindex wildcard file name patterns
@@cindex file name wildcard patterns
@@cindex section name wildcard patterns
In an input section description, either the file name or the section
name or both may be wildcard patterns.

The file name of @@samp{*} seen in many examples is a simple wildcard
pattern for the file name.

The wildcard patterns are like those used by the Unix shell.

@@table @@samp
@@item *
matches any number of characters
@@item ?
matches any single character
@@item [@@var{chars}]
matches a single instance of any of the @@var{chars}; the @@samp{-}
character may be used to specify a range of characters, as in
@@samp{[a-z]} to match any lower case letter
@@item \
quotes the following character
@@end table

When a file name is matched with a wildcard, the wildcard characters
will not match a @@samp{/} character (used to separate directory names on
Unix).  A pattern consisting of a single @@samp{*} character is an
exception; it will always match any file name, whether it contains a
@@samp{/} or not.  In a section name, the wildcard characters will match
a @@samp{/} character.

File name wildcard patterns only match files which are explicitly
specified on the command line or in an @@code{INPUT} command.  The linker
does not search directories to expand wildcards.

If a file name matches more than one wildcard pattern, or if a file name
appears explicitly and is also matched by a wildcard pattern, the linker
will use the first match in the linker script.  For example, this
sequence of input section descriptions is probably in error, because the
@@file{data.o} rule will not be used:
@@smallexample
.data : @@{ *(.data) @@}
.data1 : @@{ data.o(.data) @@}
@@end smallexample

@@cindex SORT_BY_NAME
Normally, the linker will place files and sections matched by wildcards
in the order in which they are seen during the link.  You can change
this by using the @@code{SORT_BY_NAME} keyword, which appears before a wildcard
pattern in parentheses (e.g., @@code{SORT_BY_NAME(.text*)}).  When the
@@code{SORT_BY_NAME} keyword is used, the linker will sort the files or sections
into ascending order by name before placing them in the output file.

@@cindex SORT_BY_ALIGNMENT
@@code{SORT_BY_ALIGNMENT} is very similar to @@code{SORT_BY_NAME}. The
difference is @@code{SORT_BY_ALIGNMENT} will sort sections into
descending order by alignment before placing them in the output file.
Larger alignments are placed before smaller alignments in order to
reduce the amount of padding necessary.

@@cindex SORT_BY_INIT_PRIORITY
@@code{SORT_BY_INIT_PRIORITY} is very similar to @@code{SORT_BY_NAME}. The
difference is @@code{SORT_BY_INIT_PRIORITY} will sort sections into
ascending order by numerical value of the GCC init_priority attribute
encoded in the section name before placing them in the output file.

@@cindex SORT
@@code{SORT} is an alias for @@code{SORT_BY_NAME}.

When there are nested section sorting commands in linker script, there
can be at most 1 level of nesting for section sorting commands.

@@enumerate
@@item
@@code{SORT_BY_NAME} (@@code{SORT_BY_ALIGNMENT} (wildcard section pattern)).
It will sort the input sections by name first, then by alignment if two
sections have the same name.
@@item
@@code{SORT_BY_ALIGNMENT} (@@code{SORT_BY_NAME} (wildcard section pattern)).
It will sort the input sections by alignment first, then by name if two
sections have the same alignment.
@@item
@@code{SORT_BY_NAME} (@@code{SORT_BY_NAME} (wildcard section pattern)) is
treated the same as @@code{SORT_BY_NAME} (wildcard section pattern).
@@item
@@code{SORT_BY_ALIGNMENT} (@@code{SORT_BY_ALIGNMENT} (wildcard section pattern))
is treated the same as @@code{SORT_BY_ALIGNMENT} (wildcard section pattern).
@@item
All other nested section sorting commands are invalid.
@@end enumerate

When both command line section sorting option and linker script
section sorting command are used, section sorting command always
takes precedence over the command line option.

If the section sorting command in linker script isn't nested, the
command line option will make the section sorting command to be
treated as nested sorting command.

@@enumerate
@@item
@@code{SORT_BY_NAME} (wildcard section pattern ) with
@@option{--sort-sections alignment} is equivalent to
@@code{SORT_BY_NAME} (@@code{SORT_BY_ALIGNMENT} (wildcard section pattern)).
@@item
@@code{SORT_BY_ALIGNMENT} (wildcard section pattern) with
@@option{--sort-section name} is equivalent to
@@code{SORT_BY_ALIGNMENT} (@@code{SORT_BY_NAME} (wildcard section pattern)).
@@end enumerate

If the section sorting command in linker script is nested, the
command line option will be ignored.

@@cindex SORT_NONE
@@code{SORT_NONE} disables section sorting by ignoring the command line
section sorting option.

If you ever get confused about where input sections are going, use the
@@samp{-M} linker option to generate a map file.  The map file shows
precisely how input sections are mapped to output sections.

This example shows how wildcard patterns might be used to partition
files.  This linker script directs the linker to place all @@samp{.text}
sections in @@samp{.text} and all @@samp{.bss} sections in @@samp{.bss}.
The linker will place the @@samp{.data} section from all files beginning
with an upper case character in @@samp{.DATA}; for all other files, the
linker will place the @@samp{.data} section in @@samp{.data}.
@@smallexample
@@group
SECTIONS @@{
  .text : @@{ *(.text) @@}
  .DATA : @@{ [A-Z]*(.data) @@}
  .data : @@{ *(.data) @@}
  .bss : @@{ *(.bss) @@}
@@}
@@end group
@@end smallexample

@@node Input Section Common
@@subsubsection Input Section for Common Symbols
@@cindex common symbol placement
@@cindex uninitialized data placement
A special notation is needed for common symbols, because in many object
file formats common symbols do not have a particular input section.  The
linker treats common symbols as though they are in an input section
named @@samp{COMMON}.

You may use file names with the @@samp{COMMON} section just as with any
other input sections.  You can use this to place common symbols from a
particular input file in one section while common symbols from other
input files are placed in another section.

In most cases, common symbols in input files will be placed in the
@@samp{.bss} section in the output file.  For example:
@@smallexample
.bss @@{ *(.bss) *(COMMON) @@}
@@end smallexample

@@cindex scommon section
@@cindex small common symbols
Some object file formats have more than one type of common symbol.  For
example, the MIPS ELF object file format distinguishes standard common
symbols and small common symbols.  In this case, the linker will use a
different special section name for other types of common symbols.  In
the case of MIPS ELF, the linker uses @@samp{COMMON} for standard common
symbols and @@samp{.scommon} for small common symbols.  This permits you
to map the different types of common symbols into memory at different
locations.

@@cindex [COMMON]
You will sometimes see @@samp{[COMMON]} in old linker scripts.  This
notation is now considered obsolete.  It is equivalent to
@@samp{*(COMMON)}.

@@node Input Section Keep
@@subsubsection Input Section and Garbage Collection
@@cindex KEEP
@@cindex garbage collection
When link-time garbage collection is in use (@@samp{--gc-sections}),
it is often useful to mark sections that should not be eliminated.
This is accomplished by surrounding an input section's wildcard entry
with @@code{KEEP()}, as in @@code{KEEP(*(.init))} or
@@code{KEEP(SORT_BY_NAME(*)(.ctors))}.

@@node Input Section Example
@@subsubsection Input Section Example
The following example is a complete linker script.  It tells the linker
to read all of the sections from file @@file{all.o} and place them at the
start of output section @@samp{outputa} which starts at location
@@samp{0x10000}.  All of section @@samp{.input1} from file @@file{foo.o}
follows immediately, in the same output section.  All of section
@@samp{.input2} from @@file{foo.o} goes into output section
@@samp{outputb}, followed by section @@samp{.input1} from @@file{foo1.o}.
All of the remaining @@samp{.input1} and @@samp{.input2} sections from any
files are written to output section @@samp{outputc}.

@@smallexample
@@group
SECTIONS @@{
  outputa 0x10000 :
    @@{
    all.o
    foo.o (.input1)
    @@}
@@end group
@@group
  outputb :
    @@{
    foo.o (.input2)
    foo1.o (.input1)
    @@}
@@end group
@@group
  outputc :
    @@{
    *(.input1)
    *(.input2)
    @@}
@@}
@@end group
@@end smallexample

@@node Output Section Data
@@subsection Output Section Data
@@cindex data
@@cindex section data
@@cindex output section data
@@kindex BYTE(@@var{expression})
@@kindex SHORT(@@var{expression})
@@kindex LONG(@@var{expression})
@@kindex QUAD(@@var{expression})
@@kindex SQUAD(@@var{expression})
You can include explicit bytes of data in an output section by using
@@code{BYTE}, @@code{SHORT}, @@code{LONG}, @@code{QUAD}, or @@code{SQUAD} as
an output section command.  Each keyword is followed by an expression in
parentheses providing the value to store (@@pxref{Expressions}).  The
value of the expression is stored at the current value of the location
counter.

The @@code{BYTE}, @@code{SHORT}, @@code{LONG}, and @@code{QUAD} commands
store one, two, four, and eight bytes (respectively).  After storing the
bytes, the location counter is incremented by the number of bytes
stored.

For example, this will store the byte 1 followed by the four byte value
of the symbol @@samp{addr}:
@@smallexample
BYTE(1)
LONG(addr)
@@end smallexample

When using a 64 bit host or target, @@code{QUAD} and @@code{SQUAD} are the
same; they both store an 8 byte, or 64 bit, value.  When both host and
target are 32 bits, an expression is computed as 32 bits.  In this case
@@code{QUAD} stores a 32 bit value zero extended to 64 bits, and
@@code{SQUAD} stores a 32 bit value sign extended to 64 bits.

If the object file format of the output file has an explicit endianness,
which is the normal case, the value will be stored in that endianness.
When the object file format does not have an explicit endianness, as is
true of, for example, S-records, the value will be stored in the
endianness of the first input object file.

Note---these commands only work inside a section description and not
between them, so the following will produce an error from the linker:
@@smallexample
SECTIONS @@{@@ .text : @@{@@ *(.text) @@}@@ LONG(1) .data : @@{@@ *(.data) @@}@@ @@}@@
@@end smallexample
whereas this will work:
@@smallexample
SECTIONS @@{@@ .text : @@{@@ *(.text) ; LONG(1) @@}@@ .data : @@{@@ *(.data) @@}@@ @@}@@
@@end smallexample

@@kindex FILL(@@var{expression})
@@cindex holes, filling
@@cindex unspecified memory
You may use the @@code{FILL} command to set the fill pattern for the
current section.  It is followed by an expression in parentheses.  Any
otherwise unspecified regions of memory within the section (for example,
gaps left due to the required alignment of input sections) are filled
with the value of the expression, repeated as
necessary.  A @@code{FILL} statement covers memory locations after the
point at which it occurs in the section definition; by including more
than one @@code{FILL} statement, you can have different fill patterns in
different parts of an output section.

This example shows how to fill unspecified regions of memory with the
value @@samp{0x90}:
@@smallexample
FILL(0x90909090)
@@end smallexample

The @@code{FILL} command is similar to the @@samp{=@@var{fillexp}} output
section attribute, but it only affects the
part of the section following the @@code{FILL} command, rather than the
entire section.  If both are used, the @@code{FILL} command takes
precedence.  @@xref{Output Section Fill}, for details on the fill
expression.

@@node Output Section Keywords
@@subsection Output Section Keywords
There are a couple of keywords which can appear as output section
commands.

@@table @@code
@@kindex CREATE_OBJECT_SYMBOLS
@@cindex input filename symbols
@@cindex filename symbols
@@item CREATE_OBJECT_SYMBOLS
The command tells the linker to create a symbol for each input file.
The name of each symbol will be the name of the corresponding input
file.  The section of each symbol will be the output section in which
the @@code{CREATE_OBJECT_SYMBOLS} command appears.

This is conventional for the a.out object file format.  It is not
normally used for any other object file format.

@@kindex CONSTRUCTORS
@@cindex C++ constructors, arranging in link
@@cindex constructors, arranging in link
@@item CONSTRUCTORS
When linking using the a.out object file format, the linker uses an
unusual set construct to support C++ global constructors and
destructors.  When linking object file formats which do not support
arbitrary sections, such as ECOFF and XCOFF, the linker will
automatically recognize C++ global constructors and destructors by name.
For these object file formats, the @@code{CONSTRUCTORS} command tells the
linker to place constructor information in the output section where the
@@code{CONSTRUCTORS} command appears.  The @@code{CONSTRUCTORS} command is
ignored for other object file formats.

The symbol @@w{@@code{__CTOR_LIST__}} marks the start of the global
constructors, and the symbol @@w{@@code{__CTOR_END__}} marks the end.
Similarly, @@w{@@code{__DTOR_LIST__}} and @@w{@@code{__DTOR_END__}} mark
the start and end of the global destructors.  The
first word in the list is the number of entries, followed by the address
of each constructor or destructor, followed by a zero word.  The
compiler must arrange to actually run the code.  For these object file
formats @@sc{gnu} C++ normally calls constructors from a subroutine
@@code{__main}; a call to @@code{__main} is automatically inserted into
the startup code for @@code{main}.  @@sc{gnu} C++ normally runs
destructors either by using @@code{atexit}, or directly from the function
@@code{exit}.

For object file formats such as @@code{COFF} or @@code{ELF} which support
arbitrary section names, @@sc{gnu} C++ will normally arrange to put the
addresses of global constructors and destructors into the @@code{.ctors}
and @@code{.dtors} sections.  Placing the following sequence into your
linker script will build the sort of table which the @@sc{gnu} C++
runtime code expects to see.

@@smallexample
      __CTOR_LIST__ = .;
      LONG((__CTOR_END__ - __CTOR_LIST__) / 4 - 2)
      *(.ctors)
      LONG(0)
      __CTOR_END__ = .;
      __DTOR_LIST__ = .;
      LONG((__DTOR_END__ - __DTOR_LIST__) / 4 - 2)
      *(.dtors)
      LONG(0)
      __DTOR_END__ = .;
@@end smallexample

If you are using the @@sc{gnu} C++ support for initialization priority,
which provides some control over the order in which global constructors
are run, you must sort the constructors at link time to ensure that they
are executed in the correct order.  When using the @@code{CONSTRUCTORS}
command, use @@samp{SORT_BY_NAME(CONSTRUCTORS)} instead.  When using the
@@code{.ctors} and @@code{.dtors} sections, use @@samp{*(SORT_BY_NAME(.ctors))} and
@@samp{*(SORT_BY_NAME(.dtors))} instead of just @@samp{*(.ctors)} and
@@samp{*(.dtors)}.

Normally the compiler and linker will handle these issues automatically,
and you will not need to concern yourself with them.  However, you may
need to consider this if you are using C++ and writing your own linker
scripts.

@@end table

@@node Output Section Discarding
@@subsection Output Section Discarding
@@cindex discarding sections
@@cindex sections, discarding
@@cindex removing sections
The linker will not create output sections with no contents.  This is
for convenience when referring to input sections that may or may not
be present in any of the input files.  For example:
@@smallexample
.foo : @@{ *(.foo) @@}
@@end smallexample
@@noindent
will only create a @@samp{.foo} section in the output file if there is a
@@samp{.foo} section in at least one input file, and if the input
sections are not all empty.  Other link script directives that allocate
space in an output section will also create the output section.

The linker will ignore address assignments (@@pxref{Output Section Address})
on discarded output sections, except when the linker script defines
symbols in the output section.  In that case the linker will obey
the address assignments, possibly advancing dot even though the
section is discarded.

@@cindex /DISCARD/
The special output section name @@samp{/DISCARD/} may be used to discard
input sections.  Any input sections which are assigned to an output
section named @@samp{/DISCARD/} are not included in the output file.

@@node Output Section Attributes
@@subsection Output Section Attributes
@@cindex output section attributes
We showed above that the full description of an output section looked
like this:

@@smallexample
@@group
@@var{section} [@@var{address}] [(@@var{type})] :
  [AT(@@var{lma})]
  [ALIGN(@@var{section_align})]
  [SUBALIGN(@@var{subsection_align})]
  [@@var{constraint}]
  @@{
    @@var{output-section-command}
    @@var{output-section-command}
    @@dots{}
  @@} [>@@var{region}] [AT>@@var{lma_region}] [:@@var{phdr} :@@var{phdr} @@dots{}] [=@@var{fillexp}]
@@end group
@@end smallexample

We've already described @@var{section}, @@var{address}, and
@@var{output-section-command}.  In this section we will describe the
remaining section attributes.

@@menu
* Output Section Type::		Output section type
* Output Section LMA::		Output section LMA
* Forced Output Alignment::	Forced Output Alignment
* Forced Input Alignment::	Forced Input Alignment
* Output Section Constraint::   Output section constraint
* Output Section Region::	Output section region
* Output Section Phdr::		Output section phdr
* Output Section Fill::		Output section fill
@@end menu

@@node Output Section Type
@@subsubsection Output Section Type
Each output section may have a type.  The type is a keyword in
parentheses.  The following types are defined:

@@table @@code
@@item NOLOAD
The section should be marked as not loadable, so that it will not be
loaded into memory when the program is run.
@@item DSECT
@@itemx COPY
@@itemx INFO
@@itemx OVERLAY
These type names are supported for backward compatibility, and are
rarely used.  They all have the same effect: the section should be
marked as not allocatable, so that no memory is allocated for the
section when the program is run.
@@end table

@@kindex NOLOAD
@@cindex prevent unnecessary loading
@@cindex loading, preventing
The linker normally sets the attributes of an output section based on
the input sections which map into it.  You can override this by using
the section type.  For example, in the script sample below, the
@@samp{ROM} section is addressed at memory location @@samp{0} and does not
need to be loaded when the program is run.
@@smallexample
@@group
SECTIONS @@{
  ROM 0 (NOLOAD) : @@{ @@dots{} @@}
  @@dots{}
@@}
@@end group
@@end smallexample

@@node Output Section LMA
@@subsubsection Output Section LMA
@@kindex AT>@@var{lma_region}
@@kindex AT(@@var{lma})
@@cindex load address
@@cindex section load address
Every section has a virtual address (VMA) and a load address (LMA); see
@@ref{Basic Script Concepts}.  The virtual address is specified by the
@@pxref{Output Section Address} described earlier.  The load address is
specified by the @@code{AT} or @@code{AT>} keywords.  Specifying a load
address is optional.

The @@code{AT} keyword takes an expression as an argument.  This
specifies the exact load address of the section.  The @@code{AT>} keyword
takes the name of a memory region as an argument.  @@xref{MEMORY}.  The
load address of the section is set to the next free address in the
region, aligned to the section's alignment requirements.

If neither @@code{AT} nor @@code{AT>} is specified for an allocatable
section, the linker will use the following heuristic to determine the
load address:

@@itemize @@bullet
@@item
If the section has a specific VMA address, then this is used as
the LMA address as well.

@@item
If the section is not allocatable then its LMA is set to its VMA.

@@item
Otherwise if a memory region can be found that is compatible
with the current section, and this region contains at least one
section, then the LMA is set so the difference between the
VMA and LMA is the same as the difference between the VMA and LMA of
the last section in the located region.

@@item
If no memory regions have been declared then a default region
that covers the entire address space is used in the previous step.

@@item
If no suitable region could be found, or there was no previous
section then the LMA is set equal to the VMA.
@@end itemize

@@cindex ROM initialized data
@@cindex initialized data in ROM
This feature is designed to make it easy to build a ROM image.  For
example, the following linker script creates three output sections: one
called @@samp{.text}, which starts at @@code{0x1000}, one called
@@samp{.mdata}, which is loaded at the end of the @@samp{.text} section
even though its VMA is @@code{0x2000}, and one called @@samp{.bss} to hold
uninitialized data at address @@code{0x3000}.  The symbol @@code{_data} is
defined with the value @@code{0x2000}, which shows that the location
counter holds the VMA value, not the LMA value.

@@smallexample
@@group
SECTIONS
  @@{
  .text 0x1000 : @@{ *(.text) _etext = . ; @@}
  .mdata 0x2000 :
    AT ( ADDR (.text) + SIZEOF (.text) )
    @@{ _data = . ; *(.data); _edata = . ;  @@}
  .bss 0x3000 :
    @@{ _bstart = . ;  *(.bss) *(COMMON) ; _bend = . ;@@}
@@}
@@end group
@@end smallexample

The run-time initialization code for use with a program generated with
this linker script would include something like the following, to copy
the initialized data from the ROM image to its runtime address.  Notice
how this code takes advantage of the symbols defined by the linker
script.

@@smallexample
@@group
extern char _etext, _data, _edata, _bstart, _bend;
char *src = &_etext;
char *dst = &_data;

/* ROM has data at end of text; copy it.  */
while (dst < &_edata)
  *dst++ = *src++;

/* Zero bss.  */
for (dst = &_bstart; dst< &_bend; dst++)
  *dst = 0;
@@end group
@@end smallexample

@@node Forced Output Alignment
@@subsubsection Forced Output Alignment
@@kindex ALIGN(@@var{section_align})
@@cindex forcing output section alignment
@@cindex output section alignment
You can increase an output section's alignment by using ALIGN.  As an
alternative you can force the output section alignment to the maximum alignment
of all its input sections with ALIGN_WITH_INPUT.  The alignment forced by
ALIGN_WITH_INPUT is used even in case the load and virtual memory regions are
different.

@@node Forced Input Alignment
@@subsubsection Forced Input Alignment
@@kindex SUBALIGN(@@var{subsection_align})
@@cindex forcing input section alignment
@@cindex input section alignment
You can force input section alignment within an output section by using
SUBALIGN.  The value specified overrides any alignment given by input
sections, whether larger or smaller.

@@node Output Section Constraint
@@subsubsection Output Section Constraint
@@kindex ONLY_IF_RO
@@kindex ONLY_IF_RW
@@cindex constraints on output sections
You can specify that an output section should only be created if all
of its input sections are read-only or all of its input sections are
read-write by using the keyword @@code{ONLY_IF_RO} and
@@code{ONLY_IF_RW} respectively.

@@node Output Section Region
@@subsubsection Output Section Region
@@kindex >@@var{region}
@@cindex section, assigning to memory region
@@cindex memory regions and sections
You can assign a section to a previously defined region of memory by
using @@samp{>@@var{region}}.  @@xref{MEMORY}.

Here is a simple example:
@@smallexample
@@group
MEMORY @@{ rom : ORIGIN = 0x1000, LENGTH = 0x1000 @@}
SECTIONS @@{ ROM : @@{ *(.text) @@} >rom @@}
@@end group
@@end smallexample

@@node Output Section Phdr
@@subsubsection Output Section Phdr
@@kindex :@@var{phdr}
@@cindex section, assigning to program header
@@cindex program headers and sections
You can assign a section to a previously defined program segment by
using @@samp{:@@var{phdr}}.  @@xref{PHDRS}.  If a section is assigned to
one or more segments, then all subsequent allocated sections will be
assigned to those segments as well, unless they use an explicitly
@@code{:@@var{phdr}} modifier.  You can use @@code{:NONE} to tell the
linker to not put the section in any segment at all.

Here is a simple example:
@@smallexample
@@group
PHDRS @@{ text PT_LOAD ; @@}
SECTIONS @@{ .text : @@{ *(.text) @@} :text @@}
@@end group
@@end smallexample

@@node Output Section Fill
@@subsubsection Output Section Fill
@@kindex =@@var{fillexp}
@@cindex section fill pattern
@@cindex fill pattern, entire section
You can set the fill pattern for an entire section by using
@@samp{=@@var{fillexp}}.  @@var{fillexp} is an expression
(@@pxref{Expressions}).  Any otherwise unspecified regions of memory
within the output section (for example, gaps left due to the required
alignment of input sections) will be filled with the value, repeated as
necessary.  If the fill expression is a simple hex number, ie. a string
of hex digit starting with @@samp{0x} and without a trailing @@samp{k} or @@samp{M}, then
an arbitrarily long sequence of hex digits can be used to specify the
fill pattern;  Leading zeros become part of the pattern too.  For all
other cases, including extra parentheses or a unary @@code{+}, the fill
pattern is the four least significant bytes of the value of the
expression.  In all cases, the number is big-endian.

You can also change the fill value with a @@code{FILL} command in the
output section commands; (@@pxref{Output Section Data}).

Here is a simple example:
@@smallexample
@@group
SECTIONS @@{ .text : @@{ *(.text) @@} =0x90909090 @@}
@@end group
@@end smallexample

@@node Overlay Description
@@subsection Overlay Description
@@kindex OVERLAY
@@cindex overlays
An overlay description provides an easy way to describe sections which
are to be loaded as part of a single memory image but are to be run at
the same memory address.  At run time, some sort of overlay manager will
copy the overlaid sections in and out of the runtime memory address as
required, perhaps by simply manipulating addressing bits.  This approach
can be useful, for example, when a certain region of memory is faster
than another.

Overlays are described using the @@code{OVERLAY} command.  The
@@code{OVERLAY} command is used within a @@code{SECTIONS} command, like an
output section description.  The full syntax of the @@code{OVERLAY}
command is as follows:
@@smallexample
@@group
OVERLAY [@@var{start}] : [NOCROSSREFS] [AT ( @@var{ldaddr} )]
  @@{
    @@var{secname1}
      @@{
        @@var{output-section-command}
        @@var{output-section-command}
        @@dots{}
      @@} [:@@var{phdr}@@dots{}] [=@@var{fill}]
    @@var{secname2}
      @@{
        @@var{output-section-command}
        @@var{output-section-command}
        @@dots{}
      @@} [:@@var{phdr}@@dots{}] [=@@var{fill}]
    @@dots{}
  @@} [>@@var{region}] [:@@var{phdr}@@dots{}] [=@@var{fill}]
@@end group
@@end smallexample

Everything is optional except @@code{OVERLAY} (a keyword), and each
section must have a name (@@var{secname1} and @@var{secname2} above).  The
section definitions within the @@code{OVERLAY} construct are identical to
those within the general @@code{SECTIONS} construct (@@pxref{SECTIONS}),
except that no addresses and no memory regions may be defined for
sections within an @@code{OVERLAY}.

The sections are all defined with the same starting address.  The load
addresses of the sections are arranged such that they are consecutive in
memory starting at the load address used for the @@code{OVERLAY} as a
whole (as with normal section definitions, the load address is optional,
and defaults to the start address; the start address is also optional,
and defaults to the current value of the location counter).

If the @@code{NOCROSSREFS} keyword is used, and there are any
references among the sections, the linker will report an error.  Since
the sections all run at the same address, it normally does not make
sense for one section to refer directly to another.
@@xref{Miscellaneous Commands, NOCROSSREFS}.

For each section within the @@code{OVERLAY}, the linker automatically
provides two symbols.  The symbol @@code{__load_start_@@var{secname}} is
defined as the starting load address of the section.  The symbol
@@code{__load_stop_@@var{secname}} is defined as the final load address of
the section.  Any characters within @@var{secname} which are not legal
within C identifiers are removed.  C (or assembler) code may use these
symbols to move the overlaid sections around as necessary.

At the end of the overlay, the value of the location counter is set to
the start address of the overlay plus the size of the largest section.

Here is an example.  Remember that this would appear inside a
@@code{SECTIONS} construct.
@@smallexample
@@group
  OVERLAY 0x1000 : AT (0x4000)
   @@{
     .text0 @@{ o1/*.o(.text) @@}
     .text1 @@{ o2/*.o(.text) @@}
   @@}
@@end group
@@end smallexample
@@noindent
This will define both @@samp{.text0} and @@samp{.text1} to start at
address 0x1000.  @@samp{.text0} will be loaded at address 0x4000, and
@@samp{.text1} will be loaded immediately after @@samp{.text0}.  The
following symbols will be defined if referenced: @@code{__load_start_text0},
@@code{__load_stop_text0}, @@code{__load_start_text1},
@@code{__load_stop_text1}.

C code to copy overlay @@code{.text1} into the overlay area might look
like the following.

@@smallexample
@@group
  extern char __load_start_text1, __load_stop_text1;
  memcpy ((char *) 0x1000, &__load_start_text1,
          &__load_stop_text1 - &__load_start_text1);
@@end group
@@end smallexample

Note that the @@code{OVERLAY} command is just syntactic sugar, since
everything it does can be done using the more basic commands.  The above
example could have been written identically as follows.

@@smallexample
@@group
  .text0 0x1000 : AT (0x4000) @@{ o1/*.o(.text) @@}
  PROVIDE (__load_start_text0 = LOADADDR (.text0));
  PROVIDE (__load_stop_text0 = LOADADDR (.text0) + SIZEOF (.text0));
  .text1 0x1000 : AT (0x4000 + SIZEOF (.text0)) @@{ o2/*.o(.text) @@}
  PROVIDE (__load_start_text1 = LOADADDR (.text1));
  PROVIDE (__load_stop_text1 = LOADADDR (.text1) + SIZEOF (.text1));
  . = 0x1000 + MAX (SIZEOF (.text0), SIZEOF (.text1));
@@end group
@@end smallexample

@@node MEMORY
@@section MEMORY Command
@@kindex MEMORY
@@cindex memory regions
@@cindex regions of memory
@@cindex allocating memory
@@cindex discontinuous memory
The linker's default configuration permits allocation of all available
memory.  You can override this by using the @@code{MEMORY} command.

The @@code{MEMORY} command describes the location and size of blocks of
memory in the target.  You can use it to describe which memory regions
may be used by the linker, and which memory regions it must avoid.  You
can then assign sections to particular memory regions.  The linker will
set section addresses based on the memory regions, and will warn about
regions that become too full.  The linker will not shuffle sections
around to fit into the available regions.

A linker script may contain at most one use of the @@code{MEMORY}
command.  However, you can define as many blocks of memory within it as
you wish.  The syntax is:
@@smallexample
@@group
MEMORY
  @@{
    @@var{name} [(@@var{attr})] : ORIGIN = @@var{origin}, LENGTH = @@var{len}
    @@dots{}
  @@}
@@end group
@@end smallexample

The @@var{name} is a name used in the linker script to refer to the
region.  The region name has no meaning outside of the linker script.
Region names are stored in a separate name space, and will not conflict
with symbol names, file names, or section names.  Each memory region
must have a distinct name within the @@code{MEMORY} command.  However you can
add later alias names to existing memory regions with the @@ref{REGION_ALIAS}
command.

@@cindex memory region attributes
The @@var{attr} string is an optional list of attributes that specify
whether to use a particular memory region for an input section which is
not explicitly mapped in the linker script.  As described in
@@ref{SECTIONS}, if you do not specify an output section for some input
section, the linker will create an output section with the same name as
the input section.  If you define region attributes, the linker will use
them to select the memory region for the output section that it creates.

The @@var{attr} string must consist only of the following characters:
@@table @@samp
@@item R
Read-only section
@@item W
Read/write section
@@item X
Executable section
@@item A
Allocatable section
@@item I
Initialized section
@@item L
Same as @@samp{I}
@@item !
Invert the sense of any of the attributes that follow
@@end table

If a unmapped section matches any of the listed attributes other than
@@samp{!}, it will be placed in the memory region.  The @@samp{!}
attribute reverses this test, so that an unmapped section will be placed
in the memory region only if it does not match any of the listed
attributes.

@@kindex ORIGIN =
@@kindex o =
@@kindex org =
The @@var{origin} is an numerical expression for the start address of
the memory region.  The expression must evaluate to a constant and it
cannot involve any symbols.  The keyword @@code{ORIGIN} may be
abbreviated to @@code{org} or @@code{o} (but not, for example,
@@code{ORG}).

@@kindex LENGTH =
@@kindex len =
@@kindex l =
The @@var{len} is an expression for the size in bytes of the memory
region.  As with the @@var{origin} expression, the expression must
be numerical only and must evaluate to a constant.  The keyword
@@code{LENGTH} may be abbreviated to @@code{len} or @@code{l}.

In the following example, we specify that there are two memory regions
available for allocation: one starting at @@samp{0} for 256 kilobytes,
and the other starting at @@samp{0x40000000} for four megabytes.  The
linker will place into the @@samp{rom} memory region every section which
is not explicitly mapped into a memory region, and is either read-only
or executable.  The linker will place other sections which are not
explicitly mapped into a memory region into the @@samp{ram} memory
region.

@@smallexample
@@group
MEMORY
  @@{
    rom (rx)  : ORIGIN = 0, LENGTH = 256K
    ram (!rx) : org = 0x40000000, l = 4M
  @@}
@@end group
@@end smallexample

Once you define a memory region, you can direct the linker to place
specific output sections into that memory region by using the
@@samp{>@@var{region}} output section attribute.  For example, if you have
a memory region named @@samp{mem}, you would use @@samp{>mem} in the
output section definition.  @@xref{Output Section Region}.  If no address
was specified for the output section, the linker will set the address to
the next available address within the memory region.  If the combined
output sections directed to a memory region are too large for the
region, the linker will issue an error message.

It is possible to access the origin and length of a memory in an
expression via the @@code{ORIGIN(@@var{memory})} and
@@code{LENGTH(@@var{memory})} functions:

@@smallexample
@@group
  _fstack = ORIGIN(ram) + LENGTH(ram) - 4;
@@end group
@@end smallexample

@@node PHDRS
@@section PHDRS Command
@@kindex PHDRS
@@cindex program headers
@@cindex ELF program headers
@@cindex program segments
@@cindex segments, ELF
The ELF object file format uses @@dfn{program headers}, also knows as
@@dfn{segments}.  The program headers describe how the program should be
loaded into memory.  You can print them out by using the @@code{objdump}
program with the @@samp{-p} option.

When you run an ELF program on a native ELF system, the system loader
reads the program headers in order to figure out how to load the
program.  This will only work if the program headers are set correctly.
This manual does not describe the details of how the system loader
interprets program headers; for more information, see the ELF ABI.

The linker will create reasonable program headers by default.  However,
in some cases, you may need to specify the program headers more
precisely.  You may use the @@code{PHDRS} command for this purpose.  When
the linker sees the @@code{PHDRS} command in the linker script, it will
not create any program headers other than the ones specified.

The linker only pays attention to the @@code{PHDRS} command when
generating an ELF output file.  In other cases, the linker will simply
ignore @@code{PHDRS}.

This is the syntax of the @@code{PHDRS} command.  The words @@code{PHDRS},
@@code{FILEHDR}, @@code{AT}, and @@code{FLAGS} are keywords.

@@smallexample
@@group
PHDRS
@@{
  @@var{name} @@var{type} [ FILEHDR ] [ PHDRS ] [ AT ( @@var{address} ) ]
        [ FLAGS ( @@var{flags} ) ] ;
@@}
@@end group
@@end smallexample

The @@var{name} is used only for reference in the @@code{SECTIONS} command
of the linker script.  It is not put into the output file.  Program
header names are stored in a separate name space, and will not conflict
with symbol names, file names, or section names.  Each program header
must have a distinct name.  The headers are processed in order and it
is usual for them to map to sections in ascending load address order.

Certain program header types describe segments of memory which the
system loader will load from the file.  In the linker script, you
specify the contents of these segments by placing allocatable output
sections in the segments.  You use the @@samp{:@@var{phdr}} output section
attribute to place a section in a particular segment.  @@xref{Output
Section Phdr}.

It is normal to put certain sections in more than one segment.  This
merely implies that one segment of memory contains another.  You may
repeat @@samp{:@@var{phdr}}, using it once for each segment which should
contain the section.

If you place a section in one or more segments using @@samp{:@@var{phdr}},
then the linker will place all subsequent allocatable sections which do
not specify @@samp{:@@var{phdr}} in the same segments.  This is for
convenience, since generally a whole set of contiguous sections will be
placed in a single segment.  You can use @@code{:NONE} to override the
default segment and tell the linker to not put the section in any
segment at all.

@@kindex FILEHDR
@@kindex PHDRS
You may use the @@code{FILEHDR} and @@code{PHDRS} keywords after
the program header type to further describe the contents of the segment.
The @@code{FILEHDR} keyword means that the segment should include the ELF
file header.  The @@code{PHDRS} keyword means that the segment should
include the ELF program headers themselves.  If applied to a loadable
segment (@@code{PT_LOAD}), all prior loadable segments must have one of
these keywords.

The @@var{type} may be one of the following.  The numbers indicate the
value of the keyword.

@@table @@asis
@@item @@code{PT_NULL} (0)
Indicates an unused program header.

@@item @@code{PT_LOAD} (1)
Indicates that this program header describes a segment to be loaded from
the file.

@@item @@code{PT_DYNAMIC} (2)
Indicates a segment where dynamic linking information can be found.

@@item @@code{PT_INTERP} (3)
Indicates a segment where the name of the program interpreter may be
found.

@@item @@code{PT_NOTE} (4)
Indicates a segment holding note information.

@@item @@code{PT_SHLIB} (5)
A reserved program header type, defined but not specified by the ELF
ABI.

@@item @@code{PT_PHDR} (6)
Indicates a segment where the program headers may be found.

@@item @@var{expression}
An expression giving the numeric type of the program header.  This may
be used for types not defined above.
@@end table

You can specify that a segment should be loaded at a particular address
in memory by using an @@code{AT} expression.  This is identical to the
@@code{AT} command used as an output section attribute (@@pxref{Output
Section LMA}).  The @@code{AT} command for a program header overrides the
output section attribute.

The linker will normally set the segment flags based on the sections
which comprise the segment.  You may use the @@code{FLAGS} keyword to
explicitly specify the segment flags.  The value of @@var{flags} must be
an integer.  It is used to set the @@code{p_flags} field of the program
header.

Here is an example of @@code{PHDRS}.  This shows a typical set of program
headers used on a native ELF system.

@@example
@@group
PHDRS
@@{
  headers PT_PHDR PHDRS ;
  interp PT_INTERP ;
  text PT_LOAD FILEHDR PHDRS ;
  data PT_LOAD ;
  dynamic PT_DYNAMIC ;
@@}

SECTIONS
@@{
  . = SIZEOF_HEADERS;
  .interp : @@{ *(.interp) @@} :text :interp
  .text : @@{ *(.text) @@} :text
  .rodata : @@{ *(.rodata) @@} /* defaults to :text */
  @@dots{}
  . = . + 0x1000; /* move to a new page in memory */
  .data : @@{ *(.data) @@} :data
  .dynamic : @@{ *(.dynamic) @@} :data :dynamic
  @@dots{}
@@}
@@end group
@@end example

@@node VERSION
@@section VERSION Command
@@kindex VERSION @@{script text@@}
@@cindex symbol versions
@@cindex version script
@@cindex versions of symbols
The linker supports symbol versions when using ELF.  Symbol versions are
only useful when using shared libraries.  The dynamic linker can use
symbol versions to select a specific version of a function when it runs
a program that may have been linked against an earlier version of the
shared library.

You can include a version script directly in the main linker script, or
you can supply the version script as an implicit linker script.  You can
also use the @@samp{--version-script} linker option.

The syntax of the @@code{VERSION} command is simply
@@smallexample
VERSION @@{ version-script-commands @@}
@@end smallexample

The format of the version script commands is identical to that used by
Sun's linker in Solaris 2.5.  The version script defines a tree of
version nodes.  You specify the node names and interdependencies in the
version script.  You can specify which symbols are bound to which
version nodes, and you can reduce a specified set of symbols to local
scope so that they are not globally visible outside of the shared
library.

The easiest way to demonstrate the version script language is with a few
examples.

@@smallexample
VERS_1.1 @@{
	 global:
		 foo1;
	 local:
		 old*;
		 original*;
		 new*;
@@};

VERS_1.2 @@{
		 foo2;
@@} VERS_1.1;

VERS_2.0 @@{
		 bar1; bar2;
	 extern "C++" @@{
		 ns::*;
		 "f(int, double)";
	 @@};
@@} VERS_1.2;
@@end smallexample

This example version script defines three version nodes.  The first
version node defined is @@samp{VERS_1.1}; it has no other dependencies.
The script binds the symbol @@samp{foo1} to @@samp{VERS_1.1}.  It reduces
a number of symbols to local scope so that they are not visible outside
of the shared library; this is done using wildcard patterns, so that any
symbol whose name begins with @@samp{old}, @@samp{original}, or @@samp{new}
is matched.  The wildcard patterns available are the same as those used
in the shell when matching filenames (also known as ``globbing'').
However, if you specify the symbol name inside double quotes, then the
name is treated as literal, rather than as a glob pattern.

Next, the version script defines node @@samp{VERS_1.2}.  This node
depends upon @@samp{VERS_1.1}.  The script binds the symbol @@samp{foo2}
to the version node @@samp{VERS_1.2}.

Finally, the version script defines node @@samp{VERS_2.0}.  This node
depends upon @@samp{VERS_1.2}.  The scripts binds the symbols @@samp{bar1}
and @@samp{bar2} are bound to the version node @@samp{VERS_2.0}.

When the linker finds a symbol defined in a library which is not
specifically bound to a version node, it will effectively bind it to an
unspecified base version of the library.  You can bind all otherwise
unspecified symbols to a given version node by using @@samp{global: *;}
somewhere in the version script.  Note that it's slightly crazy to use
wildcards in a global spec except on the last version node.  Global
wildcards elsewhere run the risk of accidentally adding symbols to the
set exported for an old version.  That's wrong since older versions
ought to have a fixed set of symbols.

The names of the version nodes have no specific meaning other than what
they might suggest to the person reading them.  The @@samp{2.0} version
could just as well have appeared in between @@samp{1.1} and @@samp{1.2}.
However, this would be a confusing way to write a version script.

Node name can be omitted, provided it is the only version node
in the version script.  Such version script doesn't assign any versions to
symbols, only selects which symbols will be globally visible out and which
won't.

@@smallexample
@@{ global: foo; bar; local: *; @@};
@@end smallexample

When you link an application against a shared library that has versioned
symbols, the application itself knows which version of each symbol it
requires, and it also knows which version nodes it needs from each
shared library it is linked against.  Thus at runtime, the dynamic
loader can make a quick check to make sure that the libraries you have
linked against do in fact supply all of the version nodes that the
application will need to resolve all of the dynamic symbols.  In this
way it is possible for the dynamic linker to know with certainty that
all external symbols that it needs will be resolvable without having to
search for each symbol reference.

The symbol versioning is in effect a much more sophisticated way of
doing minor version checking that SunOS does.  The fundamental problem
that is being addressed here is that typically references to external
functions are bound on an as-needed basis, and are not all bound when
the application starts up.  If a shared library is out of date, a
required interface may be missing; when the application tries to use
that interface, it may suddenly and unexpectedly fail.  With symbol
versioning, the user will get a warning when they start their program if
the libraries being used with the application are too old.

There are several GNU extensions to Sun's versioning approach.  The
first of these is the ability to bind a symbol to a version node in the
source file where the symbol is defined instead of in the versioning
script.  This was done mainly to reduce the burden on the library
maintainer.  You can do this by putting something like:
@@smallexample
__asm__(".symver original_foo,foo@@@@VERS_1.1");
@@end smallexample
@@noindent
in the C source file.  This renames the function @@samp{original_foo} to
be an alias for @@samp{foo} bound to the version node @@samp{VERS_1.1}.
The @@samp{local:} directive can be used to prevent the symbol
@@samp{original_foo} from being exported. A @@samp{.symver} directive
takes precedence over a version script.

The second GNU extension is to allow multiple versions of the same
function to appear in a given shared library.  In this way you can make
an incompatible change to an interface without increasing the major
version number of the shared library, while still allowing applications
linked against the old interface to continue to function.

To do this, you must use multiple @@samp{.symver} directives in the
source file.  Here is an example:

@@smallexample
__asm__(".symver original_foo,foo@@@@");
__asm__(".symver old_foo,foo@@@@VERS_1.1");
__asm__(".symver old_foo1,foo@@@@VERS_1.2");
__asm__(".symver new_foo,foo@@@@@@@@VERS_2.0");
@@end smallexample

In this example, @@samp{foo@@@@} represents the symbol @@samp{foo} bound to the
unspecified base version of the symbol.  The source file that contains this
example would define 4 C functions: @@samp{original_foo}, @@samp{old_foo},
@@samp{old_foo1}, and @@samp{new_foo}.

When you have multiple definitions of a given symbol, there needs to be
some way to specify a default version to which external references to
this symbol will be bound.  You can do this with the
@@samp{foo@@@@@@@@VERS_2.0} type of @@samp{.symver} directive.  You can only
declare one version of a symbol as the default in this manner; otherwise
you would effectively have multiple definitions of the same symbol.

If you wish to bind a reference to a specific version of the symbol
within the shared library, you can use the aliases of convenience
(i.e., @@samp{old_foo}), or you can use the @@samp{.symver} directive to
specifically bind to an external version of the function in question.

You can also specify the language in the version script:

@@smallexample
VERSION extern "lang" @@{ version-script-commands @@}
@@end smallexample

The supported @@samp{lang}s are @@samp{C}, @@samp{C++}, and @@samp{Java}.
The linker will iterate over the list of symbols at the link time and
demangle them according to @@samp{lang} before matching them to the
patterns specified in @@samp{version-script-commands}.  The default
@@samp{lang} is @@samp{C}.

Demangled names may contains spaces and other special characters.  As
described above, you can use a glob pattern to match demangled names,
or you can use a double-quoted string to match the string exactly.  In
the latter case, be aware that minor differences (such as differing
whitespace) between the version script and the demangler output will
cause a mismatch.  As the exact string generated by the demangler
might change in the future, even if the mangled name does not, you
should check that all of your version directives are behaving as you
expect when you upgrade.

@@node Expressions
@@section Expressions in Linker Scripts
@@cindex expressions
@@cindex arithmetic
The syntax for expressions in the linker script language is identical to
that of C expressions.  All expressions are evaluated as integers.  All
expressions are evaluated in the same size, which is 32 bits if both the
host and target are 32 bits, and is otherwise 64 bits.

You can use and set symbol values in expressions.

The linker defines several special purpose builtin functions for use in
expressions.

@@menu
* Constants::			Constants
* Symbolic Constants::          Symbolic constants
* Symbols::			Symbol Names
* Orphan Sections::		Orphan Sections
* Location Counter::		The Location Counter
* Operators::			Operators
* Evaluation::			Evaluation
* Expression Section::		The Section of an Expression
* Builtin Functions::		Builtin Functions
@@end menu

@@node Constants
@@subsection Constants
@@cindex integer notation
@@cindex constants in linker scripts
All constants are integers.

As in C, the linker considers an integer beginning with @@samp{0} to be
octal, and an integer beginning with @@samp{0x} or @@samp{0X} to be
hexadecimal.  Alternatively the linker accepts suffixes of @@samp{h} or
@@samp{H} for hexadecimal, @@samp{o} or @@samp{O} for octal, @@samp{b} or
@@samp{B} for binary and @@samp{d} or @@samp{D} for decimal.  Any integer
value without a prefix or a suffix is considered to be decimal.

@@cindex scaled integers
@@cindex K and M integer suffixes
@@cindex M and K integer suffixes
@@cindex suffixes for integers
@@cindex integer suffixes
In addition, you can use the suffixes @@code{K} and @@code{M} to scale a
constant by
@@c TEXI2ROFF-KILL
@@ifnottex
@@c END TEXI2ROFF-KILL
@@code{1024} or @@code{1024*1024}
@@c TEXI2ROFF-KILL
@@end ifnottex
@@tex
${\rm 1024}$ or ${\rm 1024}^2$
@@end tex
@@c END TEXI2ROFF-KILL
respectively.  For example, the following
all refer to the same quantity:

@@smallexample
_fourk_1 = 4K;
_fourk_2 = 4096;
_fourk_3 = 0x1000;
_fourk_4 = 10000o;
@@end smallexample

Note - the @@code{K} and @@code{M} suffixes cannot be used in
conjunction with the base suffixes mentioned above.

@@node Symbolic Constants
@@subsection Symbolic Constants
@@cindex symbolic constants
@@kindex CONSTANT
It is possible to refer to target specific constants via the use of
the @@code{CONSTANT(@@var{name})} operator, where @@var{name} is one of:

@@table @@code
@@item MAXPAGESIZE
@@kindex MAXPAGESIZE
The target's maximum page size.

@@item COMMONPAGESIZE
@@kindex COMMONPAGESIZE
The target's default page size.
@@end table

So for example:

@@smallexample
  .text ALIGN (CONSTANT (MAXPAGESIZE)) : @@{ *(.text) @@}
@@end smallexample

will create a text section aligned to the largest page boundary
supported by the target.

@@node Symbols
@@subsection Symbol Names
@@cindex symbol names
@@cindex names
@@cindex quoted symbol names
@@kindex "
Unless quoted, symbol names start with a letter, underscore, or period
and may include letters, digits, underscores, periods, and hyphens.
Unquoted symbol names must not conflict with any keywords.  You can
specify a symbol which contains odd characters or has the same name as a
keyword by surrounding the symbol name in double quotes:
@@smallexample
"SECTION" = 9;
"with a space" = "also with a space" + 10;
@@end smallexample

Since symbols can contain many non-alphabetic characters, it is safest
to delimit symbols with spaces.  For example, @@samp{A-B} is one symbol,
whereas @@samp{A - B} is an expression involving subtraction.

@@node Orphan Sections
@@subsection Orphan Sections
@@cindex orphan
Orphan sections are sections present in the input files which
are not explicitly placed into the output file by the linker
script.  The linker will still copy these sections into the
output file, but it has to guess as to where they should be
placed.  The linker uses a simple heuristic to do this.  It
attempts to place orphan sections after non-orphan sections of the
same attribute, such as code vs data, loadable vs non-loadable, etc.
If there is not enough room to do this then it places
at the end of the file.

For ELF targets, the attribute of the section includes section type as
well as section flag.

If an orphaned section's name is representable as a C identifier then
the linker will automatically @@pxref{PROVIDE} two symbols:
__start_SECNAME and __stop_SECNAME, where SECNAME is the name of the
section.  These indicate the start address and end address of the
orphaned section respectively.  Note: most section names are not
representable as C identifiers because they contain a @@samp{.}
character.

@@node Location Counter
@@subsection The Location Counter
@@kindex .
@@cindex dot
@@cindex location counter
@@cindex current output location
The special linker variable @@dfn{dot} @@samp{.} always contains the
current output location counter.  Since the @@code{.} always refers to a
location in an output section, it may only appear in an expression
within a @@code{SECTIONS} command.  The @@code{.} symbol may appear
anywhere that an ordinary symbol is allowed in an expression.

@@cindex holes
Assigning a value to @@code{.} will cause the location counter to be
moved.  This may be used to create holes in the output section.  The
location counter may not be moved backwards inside an output section,
and may not be moved backwards outside of an output section if so
doing creates areas with overlapping LMAs.

@@smallexample
SECTIONS
@@{
  output :
    @@{
      file1(.text)
      . = . + 1000;
      file2(.text)
      . += 1000;
      file3(.text)
    @@} = 0x12345678;
@@}
@@end smallexample
@@noindent
In the previous example, the @@samp{.text} section from @@file{file1} is
located at the beginning of the output section @@samp{output}.  It is
followed by a 1000 byte gap.  Then the @@samp{.text} section from
@@file{file2} appears, also with a 1000 byte gap following before the
@@samp{.text} section from @@file{file3}.  The notation @@samp{= 0x12345678}
specifies what data to write in the gaps (@@pxref{Output Section Fill}).

@@cindex dot inside sections
Note: @@code{.} actually refers to the byte offset from the start of the
current containing object.  Normally this is the @@code{SECTIONS}
statement, whose start address is 0, hence @@code{.} can be used as an
absolute address.  If @@code{.} is used inside a section description
however, it refers to the byte offset from the start of that section,
not an absolute address.  Thus in a script like this:

@@smallexample
SECTIONS
@@{
    . = 0x100
    .text: @@{
      *(.text)
      . = 0x200
    @@}
    . = 0x500
    .data: @@{
      *(.data)
      . += 0x600
    @@}
@@}
@@end smallexample

The @@samp{.text} section will be assigned a starting address of 0x100
and a size of exactly 0x200 bytes, even if there is not enough data in
the @@samp{.text} input sections to fill this area.  (If there is too
much data, an error will be produced because this would be an attempt to
move @@code{.} backwards).  The @@samp{.data} section will start at 0x500
and it will have an extra 0x600 bytes worth of space after the end of
the values from the @@samp{.data} input sections and before the end of
the @@samp{.data} output section itself.

@@cindex dot outside sections
Setting symbols to the value of the location counter outside of an
output section statement can result in unexpected values if the linker
needs to place orphan sections.  For example, given the following:

@@smallexample
SECTIONS
@@{
    start_of_text = . ;
    .text: @@{ *(.text) @@}
    end_of_text = . ;

    start_of_data = . ;
    .data: @@{ *(.data) @@}
    end_of_data = . ;
@@}
@@end smallexample

If the linker needs to place some input section, e.g. @@code{.rodata},
not mentioned in the script, it might choose to place that section
between @@code{.text} and @@code{.data}.  You might think the linker
should place @@code{.rodata} on the blank line in the above script, but
blank lines are of no particular significance to the linker.  As well,
the linker doesn't associate the above symbol names with their
sections.  Instead, it assumes that all assignments or other
statements belong to the previous output section, except for the
special case of an assignment to @@code{.}.  I.e., the linker will
place the orphan @@code{.rodata} section as if the script was written
as follows:

@@smallexample
SECTIONS
@@{
    start_of_text = . ;
    .text: @@{ *(.text) @@}
    end_of_text = . ;

    start_of_data = . ;
    .rodata: @@{ *(.rodata) @@}
    .data: @@{ *(.data) @@}
    end_of_data = . ;
@@}
@@end smallexample

This may or may not be the script author's intention for the value of
@@code{start_of_data}.  One way to influence the orphan section
placement is to assign the location counter to itself, as the linker
assumes that an assignment to @@code{.} is setting the start address of
a following output section and thus should be grouped with that
section.  So you could write:

@@smallexample
SECTIONS
@@{
    start_of_text = . ;
    .text: @@{ *(.text) @@}
    end_of_text = . ;

    . = . ;
    start_of_data = . ;
    .data: @@{ *(.data) @@}
    end_of_data = . ;
@@}
@@end smallexample

Now, the orphan @@code{.rodata} section will be placed between
@@code{end_of_text} and @@code{start_of_data}.

@@need 2000
@@node Operators
@@subsection Operators
@@cindex operators for arithmetic
@@cindex arithmetic operators
@@cindex precedence in expressions
The linker recognizes the standard C set of arithmetic operators, with
the standard bindings and precedence levels:
@@c TEXI2ROFF-KILL
@@ifnottex
@@c END TEXI2ROFF-KILL
@@smallexample
precedence      associativity   Operators                Notes
(highest)
1               left            !  -  ~                  (1)
2               left            *  /  %
3               left            +  -
4               left            >>  <<
5               left            ==  !=  >  <  <=  >=
6               left            &
7               left            |
8               left            &&
9               left            ||
10              right           ? :
11              right           &=  +=  -=  *=  /=       (2)
(lowest)
@@end smallexample
Notes:
(1) Prefix operators
(2) @@xref{Assignments}.
@@c TEXI2ROFF-KILL
@@end ifnottex
@@tex
\vskip \baselineskip
%"lispnarrowing" is the extra indent used generally for smallexample
\hskip\lispnarrowing\vbox{\offinterlineskip
\hrule
\halign
{\vrule#&\strut\hfil\ #\ \hfil&\vrule#&\strut\hfil\ #\ \hfil&\vrule#&\strut\hfil\ {\tt #}\ \hfil&\vrule#\cr
height2pt&\omit&&\omit&&\omit&\cr
&Precedence&&  Associativity  &&{\rm Operators}&\cr
height2pt&\omit&&\omit&&\omit&\cr
\noalign{\hrule}
height2pt&\omit&&\omit&&\omit&\cr
&highest&&&&&\cr
% '176 is tilde, '~' in tt font
&1&&left&&\qquad-          \char'176\      !\qquad\dag&\cr
&2&&left&&*          /        \%&\cr
&3&&left&&+          -&\cr
&4&&left&&>>         <<&\cr
&5&&left&&==         !=       >      <      <=      >=&\cr
&6&&left&&\&&\cr
&7&&left&&|&\cr
&8&&left&&{\&\&}&\cr
&9&&left&&||&\cr
&10&&right&&?        :&\cr
&11&&right&&\qquad\&=      +=       -=     *=     /=\qquad\ddag&\cr
&lowest&&&&&\cr
height2pt&\omit&&\omit&&\omit&\cr}
\hrule}
@@end tex
@@iftex
{
@@obeylines@@parskip=0pt@@parindent=0pt
@@dag@@quad Prefix operators.
@@ddag@@quad @@xref{Assignments}.
}
@@end iftex
@@c END TEXI2ROFF-KILL

@@node Evaluation
@@subsection Evaluation
@@cindex lazy evaluation
@@cindex expression evaluation order
The linker evaluates expressions lazily.  It only computes the value of
an expression when absolutely necessary.

The linker needs some information, such as the value of the start
address of the first section, and the origins and lengths of memory
regions, in order to do any linking at all.  These values are computed
as soon as possible when the linker reads in the linker script.

However, other values (such as symbol values) are not known or needed
until after storage allocation.  Such values are evaluated later, when
other information (such as the sizes of output sections) is available
for use in the symbol assignment expression.

The sizes of sections cannot be known until after allocation, so
assignments dependent upon these are not performed until after
allocation.

Some expressions, such as those depending upon the location counter
@@samp{.}, must be evaluated during section allocation.

If the result of an expression is required, but the value is not
available, then an error results.  For example, a script like the
following
@@smallexample
@@group
SECTIONS
  @@{
    .text 9+this_isnt_constant :
      @@{ *(.text) @@}
  @@}
@@end group
@@end smallexample
@@noindent
will cause the error message @@samp{non constant expression for initial
address}.

@@node Expression Section
@@subsection The Section of an Expression
@@cindex expression sections
@@cindex absolute expressions
@@cindex relative expressions
@@cindex absolute and relocatable symbols
@@cindex relocatable and absolute symbols
@@cindex symbols, relocatable and absolute
Addresses and symbols may be section relative, or absolute.  A section
relative symbol is relocatable.  If you request relocatable output
using the @@samp{-r} option, a further link operation may change the
value of a section relative symbol.  On the other hand, an absolute
symbol will retain the same value throughout any further link
operations.

Some terms in linker expressions are addresses.  This is true of
section relative symbols and for builtin functions that return an
address, such as @@code{ADDR}, @@code{LOADADDR}, @@code{ORIGIN} and
@@code{SEGMENT_START}.  Other terms are simply numbers, or are builtin
functions that return a non-address value, such as @@code{LENGTH}.
One complication is that unless you set @@code{LD_FEATURE ("SANE_EXPR")}
(@@pxref{Miscellaneous Commands}), numbers and absolute symbols are treated
differently depending on their location, for compatibility with older
versions of @@code{ld}.  Expressions appearing outside an output
section definition treat all numbers as absolute addresses.
Expressions appearing inside an output section definition treat
absolute symbols as numbers.  If @@code{LD_FEATURE ("SANE_EXPR")} is
given, then absolute symbols and numbers are simply treated as numbers
everywhere.

In the following simple example,

@@smallexample
@@group
SECTIONS
  @@{
    . = 0x100;
    __executable_start = 0x100;
    .data :
    @@{
      . = 0x10;
      __data_start = 0x10;
      *(.data)
    @@}
    @@dots{}
  @@}
@@end group
@@end smallexample

both @@code{.} and @@code{__executable_start} are set to the absolute
address 0x100 in the first two assignments, then both @@code{.} and
@@code{__data_start} are set to 0x10 relative to the @@code{.data}
section in the second two assignments.

For expressions involving numbers, relative addresses and absolute
addresses, ld follows these rules to evaluate terms:

@@itemize @@bullet
@@item
Unary operations on an absolute address or number, and binary
operations on two absolute addresses or two numbers, or between one
absolute address and a number, apply the operator to the value(s).
@@item
Unary operations on a relative address, and binary operations on two
relative addresses in the same section or between one relative address
and a number, apply the operator to the offset part of the address(es).
@@item
Other binary operations, that is, between two relative addresses not
in the same section, or between a relative address and an absolute
address, first convert any non-absolute term to an absolute address
before applying the operator.
@@end itemize

The result section of each sub-expression is as follows:

@@itemize @@bullet
@@item
An operation involving only numbers results in a number.
@@item
The result of comparisons, @@samp{&&} and @@samp{||} is also a number.
@@item
The result of other binary arithmetic and logical operations on two
relative addresses in the same section or two absolute addresses
(after above conversions) is also a number.
@@item
The result of other operations on relative addresses or one
relative address and a number, is a relative address in the same
section as the relative operand(s).
@@item
The result of other operations on absolute addresses (after above
conversions) is an absolute address.
@@end itemize

You can use the builtin function @@code{ABSOLUTE} to force an expression
to be absolute when it would otherwise be relative.  For example, to
create an absolute symbol set to the address of the end of the output
section @@samp{.data}:
@@smallexample
SECTIONS
  @@{
    .data : @@{ *(.data) _edata = ABSOLUTE(.); @@}
  @@}
@@end smallexample
@@noindent
If @@samp{ABSOLUTE} were not used, @@samp{_edata} would be relative to the
@@samp{.data} section.

Using @@code{LOADADDR} also forces an expression absolute, since this
particular builtin function returns an absolute address.

@@node Builtin Functions
@@subsection Builtin Functions
@@cindex functions in expressions
The linker script language includes a number of builtin functions for
use in linker script expressions.

@@table @@code
@@item ABSOLUTE(@@var{exp})
@@kindex ABSOLUTE(@@var{exp})
@@cindex expression, absolute
Return the absolute (non-relocatable, as opposed to non-negative) value
of the expression @@var{exp}.  Primarily useful to assign an absolute
value to a symbol within a section definition, where symbol values are
normally section relative.  @@xref{Expression Section}.

@@item ADDR(@@var{section})
@@kindex ADDR(@@var{section})
@@cindex section address in expression
Return the address (VMA) of the named @@var{section}.  Your
script must previously have defined the location of that section.  In
the following example, @@code{start_of_output_1}, @@code{symbol_1} and
@@code{symbol_2} are assigned equivalent values, except that
@@code{symbol_1} will be relative to the @@code{.output1} section while
the other two will be absolute:
@@smallexample
@@group
SECTIONS @@{ @@dots{}
  .output1 :
    @@{
    start_of_output_1 = ABSOLUTE(.);
    @@dots{}
    @@}
  .output :
    @@{
    symbol_1 = ADDR(.output1);
    symbol_2 = start_of_output_1;
    @@}
@@dots{} @@}
@@end group
@@end smallexample

@@item ALIGN(@@var{align})
@@itemx ALIGN(@@var{exp},@@var{align})
@@kindex ALIGN(@@var{align})
@@kindex ALIGN(@@var{exp},@@var{align})
@@cindex round up location counter
@@cindex align location counter
@@cindex round up expression
@@cindex align expression
Return the location counter (@@code{.}) or arbitrary expression aligned
to the next @@var{align} boundary.  The single operand @@code{ALIGN}
doesn't change the value of the location counter---it just does
arithmetic on it.  The two operand @@code{ALIGN} allows an arbitrary
expression to be aligned upwards (@@code{ALIGN(@@var{align})} is
equivalent to @@code{ALIGN(., @@var{align})}).

Here is an example which aligns the output @@code{.data} section to the
next @@code{0x2000} byte boundary after the preceding section and sets a
variable within the section to the next @@code{0x8000} boundary after the
input sections:
@@smallexample
@@group
SECTIONS @@{ @@dots{}
  .data ALIGN(0x2000): @@{
    *(.data)
    variable = ALIGN(0x8000);
  @@}
@@dots{} @@}
@@end group
@@end smallexample
@@noindent
The first use of @@code{ALIGN} in this example specifies the location of
a section because it is used as the optional @@var{address} attribute of
a section definition (@@pxref{Output Section Address}).  The second use
of @@code{ALIGN} is used to defines the value of a symbol.

The builtin function @@code{NEXT} is closely related to @@code{ALIGN}.

@@item ALIGNOF(@@var{section})
@@kindex ALIGNOF(@@var{section})
@@cindex section alignment
Return the alignment in bytes of the named @@var{section}, if that section has
been allocated.  If the section has not been allocated when this is
evaluated, the linker will report an error. In the following example,
the alignment of the @@code{.output} section is stored as the first
value in that section.
@@smallexample
@@group
SECTIONS@@{ @@dots{}
  .output @@{
    LONG (ALIGNOF (.output))
    @@dots{}
    @@}
@@dots{} @@}
@@end group
@@end smallexample

@@item BLOCK(@@var{exp})
@@kindex BLOCK(@@var{exp})
This is a synonym for @@code{ALIGN}, for compatibility with older linker
scripts.  It is most often seen when setting the address of an output
section.

@@item DATA_SEGMENT_ALIGN(@@var{maxpagesize}, @@var{commonpagesize})
@@kindex DATA_SEGMENT_ALIGN(@@var{maxpagesize}, @@var{commonpagesize})
This is equivalent to either
@@smallexample
(ALIGN(@@var{maxpagesize}) + (. & (@@var{maxpagesize} - 1)))
@@end smallexample
or
@@smallexample
(ALIGN(@@var{maxpagesize}) + (. & (@@var{maxpagesize} - @@var{commonpagesize})))
@@end smallexample
@@noindent
depending on whether the latter uses fewer @@var{commonpagesize} sized pages
for the data segment (area between the result of this expression and
@@code{DATA_SEGMENT_END}) than the former or not.
If the latter form is used, it means @@var{commonpagesize} bytes of runtime
memory will be saved at the expense of up to @@var{commonpagesize} wasted
bytes in the on-disk file.

This expression can only be used directly in @@code{SECTIONS} commands, not in
any output section descriptions and only once in the linker script.
@@var{commonpagesize} should be less or equal to @@var{maxpagesize} and should
be the system page size the object wants to be optimized for (while still
working on system page sizes up to @@var{maxpagesize}).

@@noindent
Example:
@@smallexample
  . = DATA_SEGMENT_ALIGN(0x10000, 0x2000);
@@end smallexample

@@item DATA_SEGMENT_END(@@var{exp})
@@kindex DATA_SEGMENT_END(@@var{exp})
This defines the end of data segment for @@code{DATA_SEGMENT_ALIGN}
evaluation purposes.

@@smallexample
  . = DATA_SEGMENT_END(.);
@@end smallexample

@@item DATA_SEGMENT_RELRO_END(@@var{offset}, @@var{exp})
@@kindex DATA_SEGMENT_RELRO_END(@@var{offset}, @@var{exp})
This defines the end of the @@code{PT_GNU_RELRO} segment when
@@samp{-z relro} option is used.  Second argument is returned.
When @@samp{-z relro} option is not present, @@code{DATA_SEGMENT_RELRO_END}
does nothing, otherwise @@code{DATA_SEGMENT_ALIGN} is padded so that
@@var{exp} + @@var{offset} is aligned to the most commonly used page
boundary for particular target.  If present in the linker script,
it must always come in between @@code{DATA_SEGMENT_ALIGN} and
@@code{DATA_SEGMENT_END}.

@@smallexample
  . = DATA_SEGMENT_RELRO_END(24, .);
@@end smallexample

@@item DEFINED(@@var{symbol})
@@kindex DEFINED(@@var{symbol})
@@cindex symbol defaults
Return 1 if @@var{symbol} is in the linker global symbol table and is
defined before the statement using DEFINED in the script, otherwise
return 0.  You can use this function to provide
default values for symbols.  For example, the following script fragment
shows how to set a global symbol @@samp{begin} to the first location in
the @@samp{.text} section---but if a symbol called @@samp{begin} already
existed, its value is preserved:

@@smallexample
@@group
SECTIONS @@{ @@dots{}
  .text : @@{
    begin = DEFINED(begin) ? begin : . ;
    @@dots{}
  @@}
  @@dots{}
@@}
@@end group
@@end smallexample

@@item LENGTH(@@var{memory})
@@kindex LENGTH(@@var{memory})
Return the length of the memory region named @@var{memory}.

@@item LOADADDR(@@var{section})
@@kindex LOADADDR(@@var{section})
@@cindex section load address in expression
Return the absolute LMA of the named @@var{section}.  (@@pxref{Output
Section LMA}).

@@item LOG2CEIL(@@var{exp})
@@kindex LOG2CEIL(@@var{exp})
Return the binary logarithm of @@var{exp} rounded towards infinity.
@@code{LOG2CEIL(0)} returns 0.

@@kindex MAX
@@item MAX(@@var{exp1}, @@var{exp2})
Returns the maximum of @@var{exp1} and @@var{exp2}.

@@kindex MIN
@@item MIN(@@var{exp1}, @@var{exp2})
Returns the minimum of @@var{exp1} and @@var{exp2}.

@@item NEXT(@@var{exp})
@@kindex NEXT(@@var{exp})
@@cindex unallocated address, next
Return the next unallocated address that is a multiple of @@var{exp}.
This function is closely related to @@code{ALIGN(@@var{exp})}; unless you
use the @@code{MEMORY} command to define discontinuous memory for the
output file, the two functions are equivalent.

@@item ORIGIN(@@var{memory})
@@kindex ORIGIN(@@var{memory})
Return the origin of the memory region named @@var{memory}.

@@item SEGMENT_START(@@var{segment}, @@var{default})
@@kindex SEGMENT_START(@@var{segment}, @@var{default})
Return the base address of the named @@var{segment}.  If an explicit
value has already been given for this segment (with a command-line
@@samp{-T} option) then that value will be returned otherwise the value
will be @@var{default}.  At present, the @@samp{-T} command-line option
can only be used to set the base address for the ``text'', ``data'', and
``bss'' sections, but you can use @@code{SEGMENT_START} with any segment
name.

@@item SIZEOF(@@var{section})
@@kindex SIZEOF(@@var{section})
@@cindex section size
Return the size in bytes of the named @@var{section}, if that section has
been allocated.  If the section has not been allocated when this is
evaluated, the linker will report an error.  In the following example,
@@code{symbol_1} and @@code{symbol_2} are assigned identical values:
@@smallexample
@@group
SECTIONS@@{ @@dots{}
  .output @@{
    .start = . ;
    @@dots{}
    .end = . ;
    @@}
  symbol_1 = .end - .start ;
  symbol_2 = SIZEOF(.output);
@@dots{} @@}
@@end group
@@end smallexample

@@item SIZEOF_HEADERS
@@itemx sizeof_headers
@@kindex SIZEOF_HEADERS
@@cindex header size
Return the size in bytes of the output file's headers.  This is
information which appears at the start of the output file.  You can use
this number when setting the start address of the first section, if you
choose, to facilitate paging.

@@cindex not enough room for program headers
@@cindex program headers, not enough room
When producing an ELF output file, if the linker script uses the
@@code{SIZEOF_HEADERS} builtin function, the linker must compute the
number of program headers before it has determined all the section
addresses and sizes.  If the linker later discovers that it needs
additional program headers, it will report an error @@samp{not enough
room for program headers}.  To avoid this error, you must avoid using
the @@code{SIZEOF_HEADERS} function, or you must rework your linker
script to avoid forcing the linker to use additional program headers, or
you must define the program headers yourself using the @@code{PHDRS}
command (@@pxref{PHDRS}).
@@end table

@@node Implicit Linker Scripts
@@section Implicit Linker Scripts
@@cindex implicit linker scripts
If you specify a linker input file which the linker can not recognize as
an object file or an archive file, it will try to read the file as a
linker script.  If the file can not be parsed as a linker script, the
linker will report an error.

An implicit linker script will not replace the default linker script.

Typically an implicit linker script would contain only symbol
assignments, or the @@code{INPUT}, @@code{GROUP}, or @@code{VERSION}
commands.

Any input files read because of an implicit linker script will be read
at the position in the command line where the implicit linker script was
read.  This can affect archive searching.

@@ifset GENERIC
@@node Machine Dependent
@@chapter Machine Dependent Features

@@cindex machine dependencies
@@command{ld} has additional features on some platforms; the following
sections describe them.  Machines where @@command{ld} has no additional
functionality are not listed.

@@menu
@@ifset H8300
* H8/300::                      @@command{ld} and the H8/300
@@end ifset
@@ifset I960
* i960::                        @@command{ld} and the Intel 960 family
@@end ifset
@@ifset M68HC11
* M68HC11/68HC12::		@@code{ld} and the Motorola 68HC11 and 68HC12 families
@@end ifset
@@ifset ARM
* ARM::				@@command{ld} and the ARM family
@@end ifset
@@ifset HPPA
* HPPA ELF32::                  @@command{ld} and HPPA 32-bit ELF
@@end ifset
@@ifset M68K
* M68K::			@@command{ld} and the Motorola 68K family
@@end ifset
@@ifset MIPS
* MIPS::			@@command{ld} and the MIPS family
@@end ifset
@@ifset MMIX
* MMIX::			@@command{ld} and MMIX
@@end ifset
@@ifset MSP430
* MSP430::			@@command{ld} and MSP430
@@end ifset
@@ifset POWERPC
* PowerPC ELF32::		@@command{ld} and PowerPC 32-bit ELF Support
@@end ifset
@@ifset POWERPC64
* PowerPC64 ELF64::		@@command{ld} and PowerPC64 64-bit ELF Support
@@end ifset
@@ifset SPU
* SPU ELF::			@@command{ld} and SPU ELF Support
@@end ifset
@@ifset TICOFF
* TI COFF::                     @@command{ld} and TI COFF
@@end ifset
@@ifset WIN32
* WIN32::                       @@command{ld} and WIN32 (cygwin/mingw)
@@end ifset
@@ifset XTENSA
* Xtensa::                      @@command{ld} and Xtensa Processors
@@end ifset
@@end menu
@@end ifset

@@ifset H8300
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node H8/300
@@section @@command{ld} and the H8/300

@@cindex H8/300 support
For the H8/300, @@command{ld} can perform these global optimizations when
you specify the @@samp{--relax} command-line option.

@@table @@emph
@@cindex relaxing on H8/300
@@item relaxing address modes
@@command{ld} finds all @@code{jsr} and @@code{jmp} instructions whose
targets are within eight bits, and turns them into eight-bit
program-counter relative @@code{bsr} and @@code{bra} instructions,
respectively.

@@cindex synthesizing on H8/300
@@item synthesizing instructions
@@c FIXME: specifically mov.b, or any mov instructions really? -> mov.b only, at least on H8, H8H, H8S
@@command{ld} finds all @@code{mov.b} instructions which use the
sixteen-bit absolute address form, but refer to the top
page of memory, and changes them to use the eight-bit address form.
(That is: the linker turns @@samp{mov.b @@code{@@@@}@@var{aa}:16} into
@@samp{mov.b @@code{@@@@}@@var{aa}:8} whenever the address @@var{aa} is in the
top page of memory).

@@command{ld} finds all @@code{mov} instructions which use the register
indirect with 32-bit displacement addressing mode, but use a small
displacement inside 16-bit displacement range, and changes them to use
the 16-bit displacement form.  (That is: the linker turns @@samp{mov.b
@@code{@@@@}@@var{d}:32,ERx} into @@samp{mov.b @@code{@@@@}@@var{d}:16,ERx}
whenever the displacement @@var{d} is in the 16 bit signed integer
range. Only implemented in ELF-format ld).

@@item bit manipulation instructions
@@command{ld} finds all bit manipulation instructions like @@code{band, bclr,
biand, bild, bior, bist, bixor, bld, bnot, bor, bset, bst, btst, bxor}
which use 32 bit and 16 bit absolute address form, but refer to the top
page of memory, and changes them to use the 8 bit address form.
(That is: the linker turns @@samp{bset #xx:3,@@code{@@@@}@@var{aa}:32} into
@@samp{bset #xx:3,@@code{@@@@}@@var{aa}:8} whenever the address @@var{aa} is in
the top page of memory).

@@item system control instructions
@@command{ld} finds all @@code{ldc.w, stc.w} instructions which use the
32 bit absolute address form, but refer to the top page of memory, and
changes them to use 16 bit address form.
(That is: the linker turns @@samp{ldc.w @@code{@@@@}@@var{aa}:32,ccr} into
@@samp{ldc.w @@code{@@@@}@@var{aa}:16,ccr} whenever the address @@var{aa} is in
the top page of memory).
@@end table

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

@@ifclear GENERIC
@@ifset Renesas
@@c This stuff is pointless to say unless you're especially concerned
@@c with Renesas chips; don't enable it for generic case, please.
@@node Renesas
@@chapter @@command{ld} and Other Renesas Chips

@@command{ld} also supports the Renesas (formerly Hitachi) H8/300H,
H8/500, and SH chips.  No special features, commands, or command-line
options are required for these chips.
@@end ifset
@@end ifclear

@@ifset I960
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node i960
@@section @@command{ld} and the Intel 960 Family

@@cindex i960 support

You can use the @@samp{-A@@var{architecture}} command line option to
specify one of the two-letter names identifying members of the 960
family; the option specifies the desired output target, and warns of any
incompatible instructions in the input files.  It also modifies the
linker's search strategy for archive libraries, to support the use of
libraries specific to each particular architecture, by including in the
search loop names suffixed with the string identifying the architecture.

For example, if your @@command{ld} command line included @@w{@@samp{-ACA}} as
well as @@w{@@samp{-ltry}}, the linker would look (in its built-in search
paths, and in any paths you specify with @@samp{-L}) for a library with
the names

@@smallexample
@@group
try
libtry.a
tryca
libtryca.a
@@end group
@@end smallexample

@@noindent
The first two possibilities would be considered in any event; the last
two are due to the use of @@w{@@samp{-ACA}}.

You can meaningfully use @@samp{-A} more than once on a command line, since
the 960 architecture family allows combination of target architectures; each
use will add another pair of name variants to search for when @@w{@@samp{-l}}
specifies a library.

@@cindex @@option{--relax} on i960
@@cindex relaxing on i960
@@command{ld} supports the @@samp{--relax} option for the i960 family.  If
you specify @@samp{--relax}, @@command{ld} finds all @@code{balx} and
@@code{calx} instructions whose targets are within 24 bits, and turns
them into 24-bit program-counter relative @@code{bal} and @@code{cal}
instructions, respectively.  @@command{ld} also turns @@code{cal}
instructions into @@code{bal} instructions when it determines that the
target subroutine is a leaf routine (that is, the target subroutine does
not itself call any subroutines).

@@cindex Cortex-A8 erratum workaround
@@kindex --fix-cortex-a8
@@kindex --no-fix-cortex-a8
The @@samp{--fix-cortex-a8} switch enables a link-time workaround for an erratum in certain Cortex-A8 processors.  The workaround is enabled by default if you are targeting the ARM v7-A architecture profile.  It can be enabled otherwise by specifying @@samp{--fix-cortex-a8}, or disabled unconditionally by specifying @@samp{--no-fix-cortex-a8}.

The erratum only affects Thumb-2 code.  Please contact ARM for further details.

@@kindex --merge-exidx-entries
@@kindex --no-merge-exidx-entries
The @@samp{--no-merge-exidx-entries} switch disables the merging of adjacent exidx entries in debuginfo.

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

@@ifset ARM
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@ifset M68HC11
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node M68HC11/68HC12
@@section @@command{ld} and the Motorola 68HC11 and 68HC12 families

@@cindex M68HC11 and 68HC12 support

@@subsection Linker Relaxation

For the Motorola 68HC11, @@command{ld} can perform these global
optimizations when you specify the @@samp{--relax} command-line option.

@@table @@emph
@@cindex relaxing on M68HC11
@@item relaxing address modes
@@command{ld} finds all @@code{jsr} and @@code{jmp} instructions whose
targets are within eight bits, and turns them into eight-bit
program-counter relative @@code{bsr} and @@code{bra} instructions,
respectively.

@@command{ld} also looks at all 16-bit extended addressing modes and
transforms them in a direct addressing mode when the address is in
page 0 (between 0 and 0x0ff).

@@item relaxing gcc instruction group
When @@command{gcc} is called with @@option{-mrelax}, it can emit group
of instructions that the linker can optimize to use a 68HC11 direct
addressing mode. These instructions consists of @@code{bclr} or
@@code{bset} instructions.

@@end table

@@subsection Trampoline Generation

@@cindex trampoline generation on M68HC11
@@cindex trampoline generation on M68HC12
For 68HC11 and 68HC12, @@command{ld} can generate trampoline code to
call a far function using a normal @@code{jsr} instruction. The linker
will also change the relocation to some far function to use the
trampoline address instead of the function address. This is typically the
case when a pointer to a function is taken. The pointer will in fact
point to the function trampoline.

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

@@node ARM
@@section @@command{ld} and the ARM family

@@cindex ARM interworking support
@@kindex --support-old-code
For the ARM, @@command{ld} will generate code stubs to allow functions calls
between ARM and Thumb code.  These stubs only work with code that has
been compiled and assembled with the @@samp{-mthumb-interwork} command
line option.  If it is necessary to link with old ARM object files or
libraries, which have not been compiled with the -mthumb-interwork
option then the @@samp{--support-old-code} command line switch should be
given to the linker.  This will make it generate larger stub functions
which will work with non-interworking aware ARM code.  Note, however,
the linker does not support generating stubs for function calls to
non-interworking aware Thumb code.

@@cindex thumb entry point
@@cindex entry point, thumb
@@kindex --thumb-entry=@@var{entry}
The @@samp{--thumb-entry} switch is a duplicate of the generic
@@samp{--entry} switch, in that it sets the program's starting address.
But it also sets the bottom bit of the address, so that it can be
branched to using a BX instruction, and the program will start
executing in Thumb mode straight away.

@@cindex PE import table prefixing
@@kindex --use-nul-prefixed-import-tables
The @@samp{--use-nul-prefixed-import-tables} switch is specifying, that
the import tables idata4 and idata5 have to be generated with a zero
element prefix for import libraries. This is the old style to generate
import tables. By default this option is turned off.

@@cindex BE8
@@kindex --be8
The @@samp{--be8} switch instructs @@command{ld} to generate BE8 format
executables.  This option is only valid when linking big-endian objects.
The resulting image will contain big-endian data and little-endian code.

@@cindex TARGET1
@@kindex --target1-rel
@@kindex --target1-abs
The @@samp{R_ARM_TARGET1} relocation is typically used for entries in the
@@samp{.init_array} section.  It is interpreted as either @@samp{R_ARM_REL32}
or @@samp{R_ARM_ABS32}, depending on the target.  The @@samp{--target1-rel}
and @@samp{--target1-abs} switches override the default.

@@cindex TARGET2
@@kindex --target2=@@var{type}
The @@samp{--target2=type} switch overrides the default definition of the
@@samp{R_ARM_TARGET2} relocation.  Valid values for @@samp{type}, their
meanings, and target defaults are as follows:
@@table @@samp
@@item rel
@@samp{R_ARM_REL32} (arm*-*-elf, arm*-*-eabi)
@@item abs
@@samp{R_ARM_ABS32} (arm*-*-symbianelf)
@@item got-rel
@@samp{R_ARM_GOT_PREL} (arm*-*-linux, arm*-*-*bsd)
@@end table

@@cindex FIX_V4BX
@@kindex --fix-v4bx
The @@samp{R_ARM_V4BX} relocation (defined by the ARM AAELF
specification) enables objects compiled for the ARMv4 architecture to be
interworking-safe when linked with other objects compiled for ARMv4t, but
also allows pure ARMv4 binaries to be built from the same ARMv4 objects.

In the latter case, the switch @@option{--fix-v4bx} must be passed to the
linker, which causes v4t @@code{BX rM} instructions to be rewritten as
@@code{MOV PC,rM}, since v4 processors do not have a @@code{BX} instruction.

In the former case, the switch should not be used, and @@samp{R_ARM_V4BX}
relocations are ignored.

@@cindex FIX_V4BX_INTERWORKING
@@kindex --fix-v4bx-interworking
Replace @@code{BX rM} instructions identified by @@samp{R_ARM_V4BX}
relocations with a branch to the following veneer:

@@smallexample
TST rM, #1
MOVEQ PC, rM
BX Rn
@@end smallexample

This allows generation of libraries/applications that work on ARMv4 cores
and are still interworking safe.  Note that the above veneer clobbers the
condition flags, so may cause incorrect program behavior in rare cases.

@@cindex USE_BLX
@@kindex --use-blx
The @@samp{--use-blx} switch enables the linker to use ARM/Thumb
BLX instructions (available on ARMv5t and above) in various
situations. Currently it is used to perform calls via the PLT from Thumb
code using BLX rather than using BX and a mode-switching stub before
each PLT entry. This should lead to such calls executing slightly faster.

This option is enabled implicitly for SymbianOS, so there is no need to
specify it if you are using that target.

@@cindex VFP11_DENORM_FIX
@@kindex --vfp11-denorm-fix
The @@samp{--vfp11-denorm-fix} switch enables a link-time workaround for a
bug in certain VFP11 coprocessor hardware, which sometimes allows
instructions with denorm operands (which must be handled by support code)
to have those operands overwritten by subsequent instructions before
the support code can read the intended values.

The bug may be avoided in scalar mode if you allow at least one
intervening instruction between a VFP11 instruction which uses a register
and another instruction which writes to the same register, or at least two
intervening instructions if vector mode is in use. The bug only affects
full-compliance floating-point mode: you do not need this workaround if
you are using "runfast" mode. Please contact ARM for further details.

If you know you are using buggy VFP11 hardware, you can
enable this workaround by specifying the linker option
@@samp{--vfp-denorm-fix=scalar} if you are using the VFP11 scalar
mode only, or @@samp{--vfp-denorm-fix=vector} if you are using
vector mode (the latter also works for scalar code). The default is
@@samp{--vfp-denorm-fix=none}.

If the workaround is enabled, instructions are scanned for
potentially-troublesome sequences, and a veneer is created for each
such sequence which may trigger the erratum. The veneer consists of the
first instruction of the sequence and a branch back to the subsequent
instruction. The original instruction is then replaced with a branch to
the veneer. The extra cycles required to call and return from the veneer
are sufficient to avoid the erratum in both the scalar and vector cases.

@@cindex ARM1176 erratum workaround
@@kindex --fix-arm1176
@@kindex --no-fix-arm1176
The @@samp{--fix-arm1176} switch enables a link-time workaround for an erratum
in certain ARM1176 processors.  The workaround is enabled by default if you
are targeting ARM v6 (excluding ARM v6T2) or earlier.  It can be disabled
unconditionally by specifying @@samp{--no-fix-arm1176}.

Further information is available in the ``ARM1176JZ-S and ARM1176JZF-S
Programmer Advice Notice'' available on the ARM documentation website at:
http://infocenter.arm.com/.

@@cindex NO_ENUM_SIZE_WARNING
@@kindex --no-enum-size-warning
The @@option{--no-enum-size-warning} switch prevents the linker from
warning when linking object files that specify incompatible EABI
enumeration size attributes.  For example, with this switch enabled,
linking of an object file using 32-bit enumeration values with another
using enumeration values fitted into the smallest possible space will
not be diagnosed.

@@cindex NO_WCHAR_SIZE_WARNING
@@kindex --no-wchar-size-warning
The @@option{--no-wchar-size-warning} switch prevents the linker from
warning when linking object files that specify incompatible EABI
@@code{wchar_t} size attributes.  For example, with this switch enabled,
linking of an object file using 32-bit @@code{wchar_t} values with another
using 16-bit @@code{wchar_t} values will not be diagnosed.

@@cindex PIC_VENEER
@@kindex --pic-veneer
The @@samp{--pic-veneer} switch makes the linker use PIC sequences for
ARM/Thumb interworking veneers, even if the rest of the binary
is not PIC.  This avoids problems on uClinux targets where
@@samp{--emit-relocs} is used to generate relocatable binaries.

@@cindex STUB_GROUP_SIZE
@@kindex --stub-group-size=@@var{N}
The linker will automatically generate and insert small sequences of
code into a linked ARM ELF executable whenever an attempt is made to
perform a function call to a symbol that is too far away.  The
placement of these sequences of instructions - called stubs - is
controlled by the command line option @@option{--stub-group-size=N}.
The placement is important because a poor choice can create a need for
duplicate stubs, increasing the code size.  The linker will try to
group stubs together in order to reduce interruptions to the flow of
code, but it needs guidance as to how big these groups should be and
where they should be placed.

The value of @@samp{N}, the parameter to the
@@option{--stub-group-size=} option controls where the stub groups are
placed.  If it is negative then all stubs are placed after the first
branch that needs them.  If it is positive then the stubs can be
placed either before or after the branches that need them.  If the
value of @@samp{N} is 1 (either +1 or -1) then the linker will choose
exactly where to place groups of stubs, using its built in heuristics.
A value of @@samp{N} greater than 1 (or smaller than -1) tells the
linker that a single group of stubs can service at most @@samp{N} bytes
from the input sections.

The default, if @@option{--stub-group-size=} is not specified, is
@@samp{N = +1}.

Farcalls stubs insertion is fully supported for the ARM-EABI target
only, because it relies on object files properties not present
otherwise.

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

@@ifset HPPA
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node HPPA ELF32
@@section @@command{ld} and HPPA 32-bit ELF Support
@@cindex HPPA multiple sub-space stubs
@@kindex --multi-subspace
When generating a shared library, @@command{ld} will by default generate
import stubs suitable for use with a single sub-space application.
The @@samp{--multi-subspace} switch causes @@command{ld} to generate export
stubs, and different (larger) import stubs suitable for use with
multiple sub-spaces.

@@cindex HPPA stub grouping
@@kindex --stub-group-size=@@var{N}
Long branch stubs and import/export stubs are placed by @@command{ld} in
stub sections located between groups of input sections.
@@samp{--stub-group-size} specifies the maximum size of a group of input
sections handled by one stub section.  Since branch offsets are signed,
a stub section may serve two groups of input sections, one group before
the stub section, and one group after it.  However, when using
conditional branches that require stubs, it may be better (for branch
prediction) that stub sections only serve one group of input sections.
A negative value for @@samp{N} chooses this scheme, ensuring that
branches to stubs always use a negative offset.  Two special values of
@@samp{N} are recognized, @@samp{1} and @@samp{-1}.  These both instruct
@@command{ld} to automatically size input section groups for the branch types
detected, with the same behaviour regarding stub placement as other
positive or negative values of @@samp{N} respectively.

Note that @@samp{--stub-group-size} does not split input sections.  A
single input section larger than the group size specified will of course
create a larger group (of one section).  If input sections are too
large, it may not be possible for a branch to reach its stub.

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

@@ifset M68K
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node M68K
@@section @@command{ld} and the Motorola 68K family

@@cindex Motorola 68K GOT generation
@@kindex --got=@@var{type}
The @@samp{--got=@@var{type}} option lets you choose the GOT generation scheme.
The choices are @@samp{single}, @@samp{negative}, @@samp{multigot} and
@@samp{target}.  When @@samp{target} is selected the linker chooses
the default GOT generation scheme for the current target.
@@samp{single} tells the linker to generate a single GOT with
entries only at non-negative offsets.
@@samp{negative} instructs the linker to generate a single GOT with
entries at both negative and positive offsets.  Not all environments
support such GOTs.
@@samp{multigot} allows the linker to generate several GOTs in the
output file.  All GOT references from a single input object
file access the same GOT, but references from different input object
files might access different GOTs.  Not all environments support such GOTs.

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

@@ifset MIPS
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node MIPS
@@section @@command{ld} and the MIPS family

@@cindex MIPS microMIPS instruction choice selection
@@kindex --insn32
@@kindex --no-insn32
The @@samp{--insn32} and @@samp{--no-insn32} options control the choice of
microMIPS instructions used in code generated by the linker, such as that
in the PLT or lazy binding stubs, or in relaxation.  If @@samp{--insn32} is
used, then the linker only uses 32-bit instruction encodings.  By default
or if @@samp{--no-insn32} is used, all instruction encodings are used,
including 16-bit ones where possible.

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

@@ifset MMIX
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node MMIX
@@section @@code{ld} and MMIX
For MMIX, there is a choice of generating @@code{ELF} object files or
@@code{mmo} object files when linking.  The simulator @@code{mmix}
understands the @@code{mmo} format.  The binutils @@code{objcopy} utility
can translate between the two formats.

There is one special section, the @@samp{.MMIX.reg_contents} section.
Contents in this section is assumed to correspond to that of global
registers, and symbols referring to it are translated to special symbols,
equal to registers.  In a final link, the start address of the
@@samp{.MMIX.reg_contents} section corresponds to the first allocated
global register multiplied by 8.  Register @@code{$255} is not included in
this section; it is always set to the program entry, which is at the
symbol @@code{Main} for @@code{mmo} files.

Global symbols with the prefix @@code{__.MMIX.start.}, for example
@@code{__.MMIX.start..text} and @@code{__.MMIX.start..data} are special.
The default linker script uses these to set the default start address
of a section.

Initial and trailing multiples of zero-valued 32-bit words in a section,
are left out from an mmo file.

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

@@ifset MSP430
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node  MSP430
@@section @@code{ld} and MSP430
For the MSP430 it is possible to select the MPU architecture.  The flag @@samp{-m [mpu type]}
will select an appropriate linker script for selected MPU type.  (To get a list of known MPUs
just pass @@samp{-m help} option to the linker).

@@cindex MSP430 extra sections
The linker will recognize some extra sections which are MSP430 specific:

@@table @@code
@@item @@samp{.vectors}
Defines a portion of ROM where interrupt vectors located.

@@item @@samp{.bootloader}
Defines the bootloader portion of the ROM (if applicable).  Any code
in this section will be uploaded to the MPU.

@@item @@samp{.infomem}
Defines an information memory section (if applicable).  Any code in
this section will be uploaded to the MPU.

@@item @@samp{.infomemnobits}
This is the same as the @@samp{.infomem} section except that any code
in this section will not be uploaded to the MPU.

@@item @@samp{.noinit}
Denotes a portion of RAM located above @@samp{.bss} section.

The last two sections are used by gcc.
@@end table

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

@@ifset POWERPC
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node PowerPC ELF32
@@section @@command{ld} and PowerPC 32-bit ELF Support
@@cindex PowerPC long branches
@@kindex --relax on PowerPC
Branches on PowerPC processors are limited to a signed 26-bit
displacement, which may result in @@command{ld} giving
@@samp{relocation truncated to fit} errors with very large programs.
@@samp{--relax} enables the generation of trampolines that can access
the entire 32-bit address space.  These trampolines are inserted at
section boundaries, so may not themselves be reachable if an input
section exceeds 33M in size.  You may combine @@samp{-r} and
@@samp{--relax} to add trampolines in a partial link.  In that case
both branches to undefined symbols and inter-section branches are also
considered potentially out of range, and trampolines inserted.

@@cindex PowerPC ELF32 options
@@table @@option
@@cindex PowerPC PLT
@@kindex --bss-plt
@@item --bss-plt
Current PowerPC GCC accepts a @@samp{-msecure-plt} option that
generates code capable of using a newer PLT and GOT layout that has
the security advantage of no executable section ever needing to be
writable and no writable section ever being executable.  PowerPC
@@command{ld} will generate this layout, including stubs to access the
PLT, if all input files (including startup and static libraries) were
compiled with @@samp{-msecure-plt}.  @@samp{--bss-plt} forces the old
BSS PLT (and GOT layout) which can give slightly better performance.

@@kindex --secure-plt
@@item --secure-plt
@@command{ld} will use the new PLT and GOT layout if it is linking new
@@samp{-fpic} or @@samp{-fPIC} code, but does not do so automatically
when linking non-PIC code.  This option requests the new PLT and GOT
layout.  A warning will be given if some object file requires the old
style BSS PLT.

@@cindex PowerPC GOT
@@kindex --sdata-got
@@item --sdata-got
The new secure PLT and GOT are placed differently relative to other
sections compared to older BSS PLT and GOT placement.  The location of
@@code{.plt} must change because the new secure PLT is an initialized
section while the old PLT is uninitialized.  The reason for the
@@code{.got} change is more subtle:  The new placement allows
@@code{.got} to be read-only in applications linked with
@@samp{-z relro -z now}.  However, this placement means that
@@code{.sdata} cannot always be used in shared libraries, because the
PowerPC ABI accesses @@code{.sdata} in shared libraries from the GOT
pointer.  @@samp{--sdata-got} forces the old GOT placement.  PowerPC
GCC doesn't use @@code{.sdata} in shared libraries, so this option is
really only useful for other compilers that may do so.

@@cindex PowerPC stub symbols
@@kindex --emit-stub-syms
@@item --emit-stub-syms
This option causes @@command{ld} to label linker stubs with a local
symbol that encodes the stub type and destination.

@@cindex PowerPC TLS optimization
@@kindex --no-tls-optimize
@@item --no-tls-optimize
PowerPC @@command{ld} normally performs some optimization of code
sequences used to access Thread-Local Storage.  Use this option to
disable the optimization.
@@end table

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

@@ifset POWERPC64
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node PowerPC64 ELF64
@@section @@command{ld} and PowerPC64 64-bit ELF Support

@@cindex PowerPC64 ELF64 options
@@table @@option
@@cindex PowerPC64 stub grouping
@@kindex --stub-group-size
@@item --stub-group-size
Long branch stubs, PLT call stubs  and TOC adjusting stubs are placed
by @@command{ld} in stub sections located between groups of input sections.
@@samp{--stub-group-size} specifies the maximum size of a group of input
sections handled by one stub section.  Since branch offsets are signed,
a stub section may serve two groups of input sections, one group before
the stub section, and one group after it.  However, when using
conditional branches that require stubs, it may be better (for branch
prediction) that stub sections only serve one group of input sections.
A negative value for @@samp{N} chooses this scheme, ensuring that
branches to stubs always use a negative offset.  Two special values of
@@samp{N} are recognized, @@samp{1} and @@samp{-1}.  These both instruct
@@command{ld} to automatically size input section groups for the branch types
detected, with the same behaviour regarding stub placement as other
positive or negative values of @@samp{N} respectively.

Note that @@samp{--stub-group-size} does not split input sections.  A
single input section larger than the group size specified will of course
create a larger group (of one section).  If input sections are too
large, it may not be possible for a branch to reach its stub.

@@cindex PowerPC64 stub symbols
@@kindex --emit-stub-syms
@@item --emit-stub-syms
This option causes @@command{ld} to label linker stubs with a local
symbol that encodes the stub type and destination.

@@cindex PowerPC64 dot symbols
@@kindex --dotsyms
@@kindex --no-dotsyms
@@item --dotsyms, --no-dotsyms
These two options control how @@command{ld} interprets version patterns
in a version script.  Older PowerPC64 compilers emitted both a
function descriptor symbol with the same name as the function, and a
code entry symbol with the name prefixed by a dot (@@samp{.}).  To
properly version a function @@samp{foo}, the version script thus needs
to control both @@samp{foo} and @@samp{.foo}.  The option
@@samp{--dotsyms}, on by default, automatically adds the required
dot-prefixed patterns.  Use @@samp{--no-dotsyms} to disable this
feature.

@@cindex PowerPC64 TLS optimization
@@kindex --no-tls-optimize
@@item --no-tls-optimize
PowerPC64 @@command{ld} normally performs some optimization of code
sequences used to access Thread-Local Storage.  Use this option to
disable the optimization.

@@cindex PowerPC64 OPD optimization
@@kindex --no-opd-optimize
@@item --no-opd-optimize
PowerPC64 @@command{ld} normally removes @@code{.opd} section entries
corresponding to deleted link-once functions, or functions removed by
the action of @@samp{--gc-sections} or linker script @@code{/DISCARD/}.
Use this option to disable @@code{.opd} optimization.

@@cindex PowerPC64 OPD spacing
@@kindex --non-overlapping-opd
@@item --non-overlapping-opd
Some PowerPC64 compilers have an option to generate compressed
@@code{.opd} entries spaced 16 bytes apart, overlapping the third word,
the static chain pointer (unused in C) with the first word of the next
entry.  This option expands such entries to the full 24 bytes.

@@cindex PowerPC64 TOC optimization
@@kindex --no-toc-optimize
@@item --no-toc-optimize
PowerPC64 @@command{ld} normally removes unused @@code{.toc} section
entries.  Such entries are detected by examining relocations that
reference the TOC in code sections.  A reloc in a deleted code section
marks a TOC word as unneeded, while a reloc in a kept code section
marks a TOC word as needed.  Since the TOC may reference itself, TOC
relocs are also examined.  TOC words marked as both needed and
unneeded will of course be kept.  TOC words without any referencing
reloc are assumed to be part of a multi-word entry, and are kept or
discarded as per the nearest marked preceding word.  This works
reliably for compiler generated code, but may be incorrect if assembly
code is used to insert TOC entries.  Use this option to disable the
optimization.

@@cindex PowerPC64 multi-TOC
@@kindex --no-multi-toc
@@item --no-multi-toc
If given any toc option besides @@code{-mcmodel=medium} or
@@code{-mcmodel=large}, PowerPC64 GCC generates code for a TOC model
where TOC
entries are accessed with a 16-bit offset from r2.  This limits the
total TOC size to 64K.  PowerPC64 @@command{ld} extends this limit by
grouping code sections such that each group uses less than 64K for its
TOC entries, then inserts r2 adjusting stubs between inter-group
calls.  @@command{ld} does not split apart input sections, so cannot
help if a single input file has a @@code{.toc} section that exceeds
64K, most likely from linking multiple files with @@command{ld -r}.
Use this option to turn off this feature.

@@cindex PowerPC64 TOC sorting
@@kindex --no-toc-sort
@@item --no-toc-sort
By default, @@command{ld} sorts TOC sections so that those whose file
happens to have a section called @@code{.init} or @@code{.fini} are
placed first, followed by TOC sections referenced by code generated
with PowerPC64 gcc's @@code{-mcmodel=small}, and lastly TOC sections
referenced only by code generated with PowerPC64 gcc's
@@code{-mcmodel=medium} or @@code{-mcmodel=large} options.  Doing this
results in better TOC grouping for multi-TOC.  Use this option to turn
off this feature.

@@cindex PowerPC64 PLT stub alignment
@@kindex --plt-align
@@kindex --no-plt-align
@@item --plt-align
@@itemx --no-plt-align
Use these options to control whether individual PLT call stubs are
aligned to a 32-byte boundary, or to the specified power of two
boundary when using @@code{--plt-align=}.  By default PLT call stubs
are packed tightly.

@@cindex PowerPC64 PLT call stub static chain
@@kindex --plt-static-chain
@@kindex --no-plt-static-chain
@@item --plt-static-chain
@@itemx --no-plt-static-chain
Use these options to control whether PLT call stubs load the static
chain pointer (r11).  @@code{ld} defaults to not loading the static
chain since there is never any need to do so on a PLT call.

@@cindex PowerPC64 PLT call stub thread safety
@@kindex --plt-thread-safe
@@kindex --no-plt-thread-safe
@@item --plt-thread-safe
@@itemx --no-thread-safe
With power7's weakly ordered memory model, it is possible when using
lazy binding for ld.so to update a plt entry in one thread and have
another thread see the individual plt entry words update in the wrong
order, despite ld.so carefully writing in the correct order and using
memory write barriers.  To avoid this we need some sort of read
barrier in the call stub, or use LD_BIND_NOW=1.  By default, @@code{ld}
looks for calls to commonly used functions that create threads, and if
seen, adds the necessary barriers.  Use these options to change the
default behaviour.
@@end table

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

@@ifset SPU
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node SPU ELF
@@section @@command{ld} and SPU ELF Support

@@cindex SPU ELF options
@@table @@option

@@cindex SPU plugins
@@kindex --plugin
@@item --plugin
This option marks an executable as a PIC plugin module.

@@cindex SPU overlays
@@kindex --no-overlays
@@item --no-overlays
Normally, @@command{ld} recognizes calls to functions within overlay
regions, and redirects such calls to an overlay manager via a stub.
@@command{ld} also provides a built-in overlay manager.  This option
turns off all this special overlay handling.

@@cindex SPU overlay stub symbols
@@kindex --emit-stub-syms
@@item --emit-stub-syms
This option causes @@command{ld} to label overlay stubs with a local
symbol that encodes the stub type and destination.

@@cindex SPU extra overlay stubs
@@kindex --extra-overlay-stubs
@@item --extra-overlay-stubs
This option causes @@command{ld} to add overlay call stubs on all
function calls out of overlay regions.  Normally stubs are not added
on calls to non-overlay regions.

@@cindex SPU local store size
@@kindex --local-store=lo:hi
@@item --local-store=lo:hi
@@command{ld} usually checks that a final executable for SPU fits in
the address range 0 to 256k.  This option may be used to change the
range.  Disable the check entirely with @@option{--local-store=0:0}.

@@cindex SPU
@@kindex --stack-analysis
@@item --stack-analysis
SPU local store space is limited.  Over-allocation of stack space
unnecessarily limits space available for code and data, while
under-allocation results in runtime failures.  If given this option,
@@command{ld} will provide an estimate of maximum stack usage.
@@command{ld} does this by examining symbols in code sections to
determine the extents of functions, and looking at function prologues
for stack adjusting instructions.  A call-graph is created by looking
for relocations on branch instructions.  The graph is then searched
for the maximum stack usage path.  Note that this analysis does not
find calls made via function pointers, and does not handle recursion
and other cycles in the call graph.  Stack usage may be
under-estimated if your code makes such calls.  Also, stack usage for
dynamic allocation, e.g. alloca, will not be detected.  If a link map
is requested, detailed information about each function's stack usage
and calls will be given.

@@cindex SPU
@@kindex --emit-stack-syms
@@item --emit-stack-syms
This option, if given along with @@option{--stack-analysis} will result
in @@command{ld} emitting stack sizing symbols for each function.
These take the form @@code{__stack_<function_name>} for global
functions, and @@code{__stack_<number>_<function_name>} for static
functions.  @@code{<number>} is the section id in hex.  The value of
such symbols is the stack requirement for the corresponding function.
The symbol size will be zero, type @@code{STT_NOTYPE}, binding
@@code{STB_LOCAL}, and section @@code{SHN_ABS}.
@@end table

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

@@ifset TICOFF
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node TI COFF
@@section @@command{ld}'s Support for Various TI COFF Versions
@@cindex TI COFF versions
@@kindex --format=@@var{version}
The @@samp{--format} switch allows selection of one of the various
TI COFF versions.  The latest of this writing is 2; versions 0 and 1 are
also supported.  The TI COFF versions also vary in header byte-order
format; @@command{ld} will read any version or byte order, but the output
header format depends on the default specified by the specific target.

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

@@ifset WIN32
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node WIN32
@@section @@command{ld} and WIN32 (cygwin/mingw)

This section describes some of the win32 specific @@command{ld} issues.
See @@ref{Options,,Command Line Options} for detailed description of the
command line options mentioned here.

@@table @@emph
@@cindex import libraries
@@item import libraries
The standard Windows linker creates and uses so-called import
libraries, which contains information for linking to dll's.  They are
regular static archives and are handled as any other static
archive.  The cygwin and mingw ports of @@command{ld} have specific
support for creating such libraries provided with the
@@samp{--out-implib} command line option.

@@item   exporting DLL symbols
@@cindex exporting DLL symbols
The cygwin/mingw @@command{ld} has several ways to export symbols for dll's.

@@table @@emph
@@item   using auto-export functionality
@@cindex using auto-export functionality
By default @@command{ld} exports symbols with the auto-export functionality,
which is controlled by the following command line options:

@@itemize
@@item --export-all-symbols   [This is the default]
@@item --exclude-symbols
@@item --exclude-libs
@@item --exclude-modules-for-implib
@@item --version-script
@@end itemize

When auto-export is in operation, @@command{ld} will export all the non-local
(global and common) symbols it finds in a DLL, with the exception of a few
symbols known to belong to the system's runtime and libraries.  As it will
often not be desirable to export all of a DLL's symbols, which may include
private functions that are not part of any public interface, the command-line
options listed above may be used to filter symbols out from the list for
exporting.  The @@samp{--output-def} option can be used in order to see the
final list of exported symbols with all exclusions taken into effect.

If @@samp{--export-all-symbols} is not given explicitly on the
command line, then the default auto-export behavior will be @@emph{disabled}
if either of the following are true:

@@itemize
@@item A DEF file is used.
@@item Any symbol in any object file was marked with the __declspec(dllexport) attribute.
@@end itemize

@@item   using a DEF file
@@cindex using a DEF file
Another way of exporting symbols is using a DEF file.  A DEF file is
an ASCII file containing definitions of symbols which should be
exported when a dll is created.  Usually it is named @@samp{<dll
name>.def} and is added as any other object file to the linker's
command line.  The file's name must end in @@samp{.def} or @@samp{.DEF}.

@@example
gcc -o <output> <objectfiles> <dll name>.def
@@end example

Using a DEF file turns off the normal auto-export behavior, unless the
@@samp{--export-all-symbols} option is also used.

Here is an example of a DEF file for a shared library called @@samp{xyz.dll}:

@@example
LIBRARY "xyz.dll" BASE=0x20000000

EXPORTS
foo
bar
_bar = bar
another_foo = abc.dll.afoo
var1 DATA
doo = foo == foo2
eoo DATA == var1
@@end example

This example defines a DLL with a non-default base address and seven
symbols in the export table. The third exported symbol @@code{_bar} is an
alias for the second. The fourth symbol, @@code{another_foo} is resolved
by "forwarding" to another module and treating it as an alias for
@@code{afoo} exported from the DLL @@samp{abc.dll}. The final symbol
@@code{var1} is declared to be a data object. The @@samp{doo} symbol in
export library is an alias of @@samp{foo}, which gets the string name
in export table @@samp{foo2}. The @@samp{eoo} symbol is an data export
symbol, which gets in export table the name @@samp{var1}.

The optional @@code{LIBRARY <name>} command indicates the @@emph{internal}
name of the output DLL. If @@samp{<name>} does not include a suffix,
the default library suffix, @@samp{.DLL} is appended.

When the .DEF file is used to build an application, rather than a
library, the @@code{NAME <name>} command should be used instead of
@@code{LIBRARY}. If @@samp{<name>} does not include a suffix, the default
executable suffix, @@samp{.EXE} is appended.

With either @@code{LIBRARY <name>} or @@code{NAME <name>} the optional
specification @@code{BASE = <number>} may be used to specify a
non-default base address for the image.

If neither @@code{LIBRARY <name>} nor  @@code{NAME <name>} is specified,
or they specify an empty string, the internal name is the same as the
filename specified on the command line.

The complete specification of an export symbol is:

@@example
EXPORTS
  ( (  ( <name1> [ = <name2> ] )
     | ( <name1> = <module-name> . <external-name>))
  [ @@@@ <integer> ] [NONAME] [DATA] [CONSTANT] [PRIVATE] [== <name3>] ) *
@@end example

Declares @@samp{<name1>} as an exported symbol from the DLL, or declares
@@samp{<name1>} as an exported alias for @@samp{<name2>}; or declares
@@samp{<name1>} as a "forward" alias for the symbol
@@samp{<external-name>} in the DLL @@samp{<module-name>}.
Optionally, the symbol may be exported by the specified ordinal
@@samp{<integer>} alias. The optional @@samp{<name3>} is the to be used
string in import/export table for the symbol.

The optional keywords that follow the declaration indicate:

@@code{NONAME}: Do not put the symbol name in the DLL's export table.  It
will still be exported by its ordinal alias (either the value specified
by the .def specification or, otherwise, the value assigned by the
linker). The symbol name, however, does remain visible in the import
library (if any), unless @@code{PRIVATE} is also specified.

@@code{DATA}: The symbol is a variable or object, rather than a function.
The import lib will export only an indirect reference to @@code{foo} as
the symbol @@code{_imp__foo} (ie, @@code{foo} must be resolved as
@@code{*_imp__foo}).

@@code{CONSTANT}: Like @@code{DATA}, but put the undecorated @@code{foo} as
well as @@code{_imp__foo} into the import library. Both refer to the
read-only import address table's pointer to the variable, not to the
variable itself. This can be dangerous. If the user code fails to add
the @@code{dllimport} attribute and also fails to explicitly add the
extra indirection that the use of the attribute enforces, the
application will behave unexpectedly.

@@code{PRIVATE}: Put the symbol in the DLL's export table, but do not put
it into the static import library used to resolve imports at link time. The
symbol can still be imported using the @@code{LoadLibrary/GetProcAddress}
API at runtime or by by using the GNU ld extension of linking directly to
the DLL without an import library.

See ld/deffilep.y in the binutils sources for the full specification of
other DEF file statements

@@cindex creating a DEF file
While linking a shared dll, @@command{ld} is able to create a DEF file
with the @@samp{--output-def <file>} command line option.

@@item   Using decorations
@@cindex Using decorations
Another way of marking symbols for export is to modify the source code
itself, so that when building the DLL each symbol to be exported is
declared as:

@@example
__declspec(dllexport) int a_variable
__declspec(dllexport) void a_function(int with_args)
@@end example

All such symbols will be exported from the DLL.  If, however,
any of the object files in the DLL contain symbols decorated in
this way, then the normal auto-export behavior is disabled, unless
the @@samp{--export-all-symbols} option is also used.

Note that object files that wish to access these symbols must @@emph{not}
decorate them with dllexport.  Instead, they should use dllimport,
instead:

@@example
__declspec(dllimport) int a_variable
__declspec(dllimport) void a_function(int with_args)
@@end example

This complicates the structure of library header files, because
when included by the library itself the header must declare the
variables and functions as dllexport, but when included by client
code the header must declare them as dllimport.  There are a number
of idioms that are typically used to do this; often client code can
omit the __declspec() declaration completely.  See
@@samp{--enable-auto-import} and @@samp{automatic data imports} for more
information.
@@end table

@@cindex automatic data imports
@@item automatic data imports
The standard Windows dll format supports data imports from dlls only
by adding special decorations (dllimport/dllexport), which let the
compiler produce specific assembler instructions to deal with this
issue.  This increases the effort necessary to port existing Un*x
code to these platforms, especially for large
c++ libraries and applications.  The auto-import feature, which was
initially provided by Paul Sokolovsky, allows one to omit the
decorations to achieve a behavior that conforms to that on POSIX/Un*x
platforms. This feature is enabled with the @@samp{--enable-auto-import}
command-line option, although it is enabled by default on cygwin/mingw.
The @@samp{--enable-auto-import} option itself now serves mainly to
suppress any warnings that are ordinarily emitted when linked objects
trigger the feature's use.

auto-import of variables does not always work flawlessly without
additional assistance.  Sometimes, you will see this message

"variable '<var>' can't be auto-imported. Please read the
documentation for ld's @@code{--enable-auto-import} for details."

The @@samp{--enable-auto-import} documentation explains why this error
occurs, and several methods that can be used to overcome this difficulty.
One of these methods is the @@emph{runtime pseudo-relocs} feature, described
below.

@@cindex runtime pseudo-relocation
For complex variables imported from DLLs (such as structs or classes),
object files typically contain a base address for the variable and an
offset (@@emph{addend}) within the variable--to specify a particular
field or public member, for instance.  Unfortunately, the runtime loader used
in win32 environments is incapable of fixing these references at runtime
without the additional information supplied by dllimport/dllexport decorations.
The standard auto-import feature described above is unable to resolve these
references.

The @@samp{--enable-runtime-pseudo-relocs} switch allows these references to
be resolved without error, while leaving the task of adjusting the references
themselves (with their non-zero addends) to specialized code provided by the
runtime environment.  Recent versions of the cygwin and mingw environments and
compilers provide this runtime support; older versions do not.  However, the
support is only necessary on the developer's platform; the compiled result will
run without error on an older system.

@@samp{--enable-runtime-pseudo-relocs} is not the default; it must be explicitly
enabled as needed.

@@cindex direct linking to a dll
@@item direct linking to a dll
The cygwin/mingw ports of @@command{ld} support the direct linking,
including data symbols, to a dll without the usage of any import
libraries.  This is much faster and uses much less memory than does the
traditional import library method, especially when linking large
libraries or applications.  When @@command{ld} creates an import lib, each
function or variable exported from the dll is stored in its own bfd, even
though a single bfd could contain many exports.  The overhead involved in
storing, loading, and processing so many bfd's is quite large, and explains the
tremendous time, memory, and storage needed to link against particularly
large or complex libraries when using import libs.

Linking directly to a dll uses no extra command-line switches other than
@@samp{-L} and @@samp{-l}, because @@command{ld} already searches for a number
of names to match each library.  All that is needed from the developer's
perspective is an understanding of this search, in order to force ld to
select the dll instead of an import library.


For instance, when ld is called with the argument @@samp{-lxxx} it will attempt
to find, in the first directory of its search path,

@@example
libxxx.dll.a
xxx.dll.a
libxxx.a
xxx.lib
cygxxx.dll (*)
libxxx.dll
xxx.dll
@@end example

before moving on to the next directory in the search path.

(*) Actually, this is not @@samp{cygxxx.dll} but in fact is @@samp{<prefix>xxx.dll},
where @@samp{<prefix>} is set by the @@command{ld} option
@@samp{--dll-search-prefix=<prefix>}. In the case of cygwin, the standard gcc spec
file includes @@samp{--dll-search-prefix=cyg}, so in effect we actually search for
@@samp{cygxxx.dll}.

Other win32-based unix environments, such as mingw or pw32, may use other
@@samp{<prefix>}es, although at present only cygwin makes use of this feature.  It
was originally intended to help avoid name conflicts among dll's built for the
various win32/un*x environments, so that (for example) two versions of a zlib dll
could coexist on the same machine.

The generic cygwin/mingw path layout uses a @@samp{bin} directory for
applications and dll's and a @@samp{lib} directory for the import
libraries (using cygwin nomenclature):

@@example
bin/
	cygxxx.dll
lib/
	libxxx.dll.a   (in case of dll's)
	libxxx.a       (in case of static archive)
@@end example

Linking directly to a dll without using the import library can be
done two ways:

1. Use the dll directly by adding the @@samp{bin} path to the link line
@@example
gcc -Wl,-verbose  -o a.exe -L../bin/ -lxxx
@@end example

However, as the dll's often have version numbers appended to their names
(@@samp{cygncurses-5.dll}) this will often fail, unless one specifies
@@samp{-L../bin -lncurses-5} to include the version.  Import libs are generally
not versioned, and do not have this difficulty.

2. Create a symbolic link from the dll to a file in the @@samp{lib}
directory according to the above mentioned search pattern.  This
should be used to avoid unwanted changes in the tools needed for
making the app/dll.

@@example
ln -s bin/cygxxx.dll lib/[cyg|lib|]xxx.dll[.a]
@@end example

Then you can link without any make environment changes.

@@example
gcc -Wl,-verbose  -o a.exe -L../lib/ -lxxx
@@end example

This technique also avoids the version number problems, because the following is
perfectly legal

@@example
bin/
	cygxxx-5.dll
lib/
	libxxx.dll.a -> ../bin/cygxxx-5.dll
@@end example

Linking directly to a dll without using an import lib will work
even when auto-import features are exercised, and even when
@@samp{--enable-runtime-pseudo-relocs} is used.

Given the improvements in speed and memory usage, one might justifiably
wonder why import libraries are used at all.  There are three reasons:

1. Until recently, the link-directly-to-dll functionality did @@emph{not}
work with auto-imported data.

2. Sometimes it is necessary to include pure static objects within the
import library (which otherwise contains only bfd's for indirection
symbols that point to the exports of a dll).  Again, the import lib
for the cygwin kernel makes use of this ability, and it is not
possible to do this without an import lib.

3. Symbol aliases can only be resolved using an import lib.  This is
critical when linking against OS-supplied dll's (eg, the win32 API)
in which symbols are usually exported as undecorated aliases of their
stdcall-decorated assembly names.

So, import libs are not going away.  But the ability to replace
true import libs with a simple symbolic link to (or a copy of)
a dll, in many cases, is a useful addition to the suite of tools
binutils makes available to the win32 developer.  Given the
massive improvements in memory requirements during linking, storage
requirements, and linking speed, we expect that many developers
will soon begin to use this feature whenever possible.

@@item symbol aliasing
@@table @@emph
@@item adding additional names
Sometimes, it is useful to export symbols with additional names.
A symbol @@samp{foo} will be exported as @@samp{foo}, but it can also be
exported as @@samp{_foo} by using special directives in the DEF file
when creating the dll.  This will affect also the optional created
import library.  Consider the following DEF file:

@@example
LIBRARY "xyz.dll" BASE=0x61000000

EXPORTS
foo
_foo = foo
@@end example

The line @@samp{_foo = foo} maps the symbol @@samp{foo} to @@samp{_foo}.

Another method for creating a symbol alias is to create it in the
source code using the "weak" attribute:

@@example
void foo () @@{ /* Do something.  */; @@}
void _foo () __attribute__ ((weak, alias ("foo")));
@@end example

See the gcc manual for more information about attributes and weak
symbols.

@@item renaming symbols
Sometimes it is useful to rename exports.  For instance, the cygwin
kernel does this regularly.  A symbol @@samp{_foo} can be exported as
@@samp{foo} but not as @@samp{_foo} by using special directives in the
DEF file. (This will also affect the import library, if it is
created).  In the following example:

@@example
LIBRARY "xyz.dll" BASE=0x61000000

EXPORTS
_foo = foo
@@end example

The line @@samp{_foo = foo} maps the exported symbol @@samp{foo} to
@@samp{_foo}.
@@end table

Note: using a DEF file disables the default auto-export behavior,
unless the @@samp{--export-all-symbols} command line option is used.
If, however, you are trying to rename symbols, then you should list
@@emph{all} desired exports in the DEF file, including the symbols
that are not being renamed, and do @@emph{not} use the
@@samp{--export-all-symbols} option.  If you list only the
renamed symbols in the DEF file, and use @@samp{--export-all-symbols}
to handle the other symbols, then the both the new names @@emph{and}
the original names for the renamed symbols will be exported.
In effect, you'd be aliasing those symbols, not renaming them,
which is probably not what you wanted.

@@cindex weak externals
@@item weak externals
The Windows object format, PE, specifies a form of weak symbols called
weak externals.  When a weak symbol is linked and the symbol is not
defined, the weak symbol becomes an alias for some other symbol.  There
are three variants of weak externals:
@@itemize
@@item Definition is searched for in objects and libraries, historically
called lazy externals.
@@item Definition is searched for only in other objects, not in libraries.
This form is not presently implemented.
@@item No search; the symbol is an alias.  This form is not presently
implemented.
@@end itemize
As a GNU extension, weak symbols that do not specify an alternate symbol
are supported.  If the symbol is undefined when linking, the symbol
uses a default value.

@@cindex aligned common symbols
@@item aligned common symbols
As a GNU extension to the PE file format, it is possible to specify the
desired alignment for a common symbol.  This information is conveyed from
the assembler or compiler to the linker by means of GNU-specific commands
carried in the object file's @@samp{.drectve} section, which are recognized
by @@command{ld} and respected when laying out the common symbols.  Native
tools will be able to process object files employing this GNU extension,
but will fail to respect the alignment instructions, and may issue noisy
warnings about unknown linker directives.
@@end table

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

@@ifset XTENSA
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node Xtensa
@@section @@code{ld} and Xtensa Processors

@@cindex Xtensa processors
The default @@command{ld} behavior for Xtensa processors is to interpret
@@code{SECTIONS} commands so that lists of explicitly named sections in a
specification with a wildcard file will be interleaved when necessary to
keep literal pools within the range of PC-relative load offsets.  For
example, with the command:

@@smallexample
SECTIONS
@@{
  .text : @@{
    *(.literal .text)
  @@}
@@}
@@end smallexample

@@noindent
@@command{ld} may interleave some of the @@code{.literal}
and @@code{.text} sections from different object files to ensure that the
literal pools are within the range of PC-relative load offsets.  A valid
interleaving might place the @@code{.literal} sections from an initial
group of files followed by the @@code{.text} sections of that group of
files.  Then, the @@code{.literal} sections from the rest of the files
and the @@code{.text} sections from the rest of the files would follow.

@@cindex @@option{--relax} on Xtensa
@@cindex relaxing on Xtensa
Relaxation is enabled by default for the Xtensa version of @@command{ld} and
provides two important link-time optimizations.  The first optimization
is to combine identical literal values to reduce code size.  A redundant
literal will be removed and all the @@code{L32R} instructions that use it
will be changed to reference an identical literal, as long as the
location of the replacement literal is within the offset range of all
the @@code{L32R} instructions.  The second optimization is to remove
unnecessary overhead from assembler-generated ``longcall'' sequences of
@@code{L32R}/@@code{CALLX@@var{n}} when the target functions are within
range of direct @@code{CALL@@var{n}} instructions.

For each of these cases where an indirect call sequence can be optimized
to a direct call, the linker will change the @@code{CALLX@@var{n}}
instruction to a @@code{CALL@@var{n}} instruction, remove the @@code{L32R}
instruction, and remove the literal referenced by the @@code{L32R}
instruction if it is not used for anything else.  Removing the
@@code{L32R} instruction always reduces code size but can potentially
hurt performance by changing the alignment of subsequent branch targets.
By default, the linker will always preserve alignments, either by
switching some instructions between 24-bit encodings and the equivalent
density instructions or by inserting a no-op in place of the @@code{L32R}
instruction that was removed.  If code size is more important than
performance, the @@option{--size-opt} option can be used to prevent the
linker from widening density instructions or inserting no-ops, except in
a few cases where no-ops are required for correctness.

The following Xtensa-specific command-line options can be used to
control the linker:

@@cindex Xtensa options
@@table @@option
@@item --size-opt
When optimizing indirect calls to direct calls, optimize for code size
more than performance.  With this option, the linker will not insert
no-ops or widen density instructions to preserve branch target
alignment.  There may still be some cases where no-ops are required to
preserve the correctness of the code.
@@end table

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

@@ifclear SingleFormat
@@node BFD
@@chapter BFD

@@cindex back end
@@cindex object file management
@@cindex object formats available
@@kindex objdump -i
The linker accesses object and archive files using the BFD libraries.
These libraries allow the linker to use the same routines to operate on
object files whatever the object file format.  A different object file
format can be supported simply by creating a new BFD back end and adding
it to the library.  To conserve runtime memory, however, the linker and
associated tools are usually configured to support only a subset of the
object file formats available.  You can use @@code{objdump -i}
(@@pxref{objdump,,objdump,binutils.info,The GNU Binary Utilities}) to
list all the formats available for your configuration.

@@cindex BFD requirements
@@cindex requirements for BFD
As with most implementations, BFD is a compromise between
several conflicting requirements. The major factor influencing
BFD design was efficiency: any time used converting between
formats is time which would not have been spent had BFD not
been involved. This is partly offset by abstraction payback; since
BFD simplifies applications and back ends, more time and care
may be spent optimizing algorithms for a greater speed.

One minor artifact of the BFD solution which you should bear in
mind is the potential for information loss.  There are two places where
useful information can be lost using the BFD mechanism: during
conversion and during output. @@xref{BFD information loss}.

@@menu
* BFD outline::                 How it works: an outline of BFD
@@end menu

@@node BFD outline
@@section How It Works: An Outline of BFD
@@cindex opening object files
@@include bfdsumm.texi
@@end ifclear

@@node Reporting Bugs
@@chapter Reporting Bugs
@@cindex bugs in @@command{ld}
@@cindex reporting bugs in @@command{ld}

Your bug reports play an essential role in making @@command{ld} reliable.

Reporting a bug may help you by bringing a solution to your problem, or
it may not.  But in any case the principal function of a bug report is
to help the entire community by making the next version of @@command{ld}
work better.  Bug reports are your contribution to the maintenance of
@@command{ld}.

In order for a bug report to serve its purpose, you must include the
information that enables us to fix the bug.

@@menu
* Bug Criteria::                Have you found a bug?
* Bug Reporting::               How to report bugs
@@end menu

@@node Bug Criteria
@@section Have You Found a Bug?
@@cindex bug criteria

If you are not sure whether you have found a bug, here are some guidelines:

@@itemize @@bullet
@@cindex fatal signal
@@cindex linker crash
@@cindex crash of linker
@@item
If the linker gets a fatal signal, for any input whatever, that is a
@@command{ld} bug.  Reliable linkers never crash.

@@cindex error on valid input
@@item
If @@command{ld} produces an error message for valid input, that is a bug.

@@cindex invalid input
@@item
If @@command{ld} does not produce an error message for invalid input, that
may be a bug.  In the general case, the linker can not verify that
object files are correct.

@@item
If you are an experienced user of linkers, your suggestions for
improvement of @@command{ld} are welcome in any case.
@@end itemize

@@node Bug Reporting
@@section How to Report Bugs
@@cindex bug reports
@@cindex @@command{ld} bugs, reporting

A number of companies and individuals offer support for @@sc{gnu}
products.  If you obtained @@command{ld} from a support organization, we
recommend you contact that organization first.

You can find contact information for many support companies and
individuals in the file @@file{etc/SERVICE} in the @@sc{gnu} Emacs
distribution.

@@ifset BUGURL
Otherwise, send bug reports for @@command{ld} to
@@value{BUGURL}.
@@end ifset

The fundamental principle of reporting bugs usefully is this:
@@strong{report all the facts}.  If you are not sure whether to state a
fact or leave it out, state it!

Often people omit facts because they think they know what causes the
problem and assume that some details do not matter.  Thus, you might
assume that the name of a symbol you use in an example does not
matter.  Well, probably it does not, but one cannot be sure.  Perhaps
the bug is a stray memory reference which happens to fetch from the
location where that name is stored in memory; perhaps, if the name
were different, the contents of that location would fool the linker
into doing the right thing despite the bug.  Play it safe and give a
specific, complete example.  That is the easiest thing for you to do,
and the most helpful.

Keep in mind that the purpose of a bug report is to enable us to fix
the bug if it is new to us.  Therefore, always write your bug reports
on the assumption that the bug has not been reported previously.

Sometimes people give a few sketchy facts and ask, ``Does this ring a
bell?''  This cannot help us fix a bug, so it is basically useless.  We
respond by asking for enough details to enable us to investigate.
You might as well expedite matters by sending them to begin with.

To enable us to fix the bug, you should include all these things:

@@itemize @@bullet
@@item
The version of @@command{ld}.  @@command{ld} announces it if you start it with
the @@samp{--version} argument.

Without this, we will not know whether there is any point in looking for
the bug in the current version of @@command{ld}.

@@item
Any patches you may have applied to the @@command{ld} source, including any
patches made to the @@code{BFD} library.

@@item
The type of machine you are using, and the operating system name and
version number.

@@item
What compiler (and its version) was used to compile @@command{ld}---e.g.
``@@code{gcc-2.7}''.

@@item
The command arguments you gave the linker to link your example and
observe the bug.  To guarantee you will not omit something important,
list them all.  A copy of the Makefile (or the output from make) is
sufficient.

If we were to try to guess the arguments, we would probably guess wrong
and then we might not encounter the bug.

@@item
A complete input file, or set of input files, that will reproduce the
bug.  It is generally most helpful to send the actual object files
provided that they are reasonably small.  Say no more than 10K.  For
bigger files you can either make them available by FTP or HTTP or else
state that you are willing to send the object file(s) to whomever
requests them.  (Note - your email will be going to a mailing list, so
we do not want to clog it up with large attachments).  But small
attachments are best.

If the source files were assembled using @@code{gas} or compiled using
@@code{gcc}, then it may be OK to send the source files rather than the
object files.  In this case, be sure to say exactly what version of
@@code{gas} or @@code{gcc} was used to produce the object files.  Also say
how @@code{gas} or @@code{gcc} were configured.

@@item
A description of what behavior you observe that you believe is
incorrect.  For example, ``It gets a fatal signal.''

Of course, if the bug is that @@command{ld} gets a fatal signal, then we
will certainly notice it.  But if the bug is incorrect output, we might
not notice unless it is glaringly wrong.  You might as well not give us
a chance to make a mistake.

Even if the problem you experience is a fatal signal, you should still
say so explicitly.  Suppose something strange is going on, such as, your
copy of @@command{ld} is out of sync, or you have encountered a bug in the
C library on your system.  (This has happened!)  Your copy might crash
and ours would not.  If you told us to expect a crash, then when ours
fails to crash, we would know that the bug was not happening for us.  If
you had not told us to expect a crash, then we would not be able to draw
any conclusion from our observations.

@@item
If you wish to suggest changes to the @@command{ld} source, send us context
diffs, as generated by @@code{diff} with the @@samp{-u}, @@samp{-c}, or
@@samp{-p} option.  Always send diffs from the old file to the new file.
If you even discuss something in the @@command{ld} source, refer to it by
context, not by line number.

The line numbers in our development sources will not match those in your
sources.  Your line numbers would convey no useful information to us.
@@end itemize

Here are some things that are not necessary:

@@itemize @@bullet
@@item
A description of the envelope of the bug.

Often people who encounter a bug spend a lot of time investigating
which changes to the input file will make the bug go away and which
changes will not affect it.

This is often time consuming and not very useful, because the way we
will find the bug is by running a single example under the debugger
with breakpoints, not by pure deduction from a series of examples.
We recommend that you save your time for something else.

Of course, if you can find a simpler example to report @@emph{instead}
of the original one, that is a convenience for us.  Errors in the
output will be easier to spot, running under the debugger will take
less time, and so on.

However, simplification is not vital; if you do not want to do this,
report the bug anyway and send us the entire test case you used.

@@item
A patch for the bug.

A patch for the bug does help us if it is a good one.  But do not omit
the necessary information, such as the test case, on the assumption that
a patch is all we need.  We might see problems with your patch and decide
to fix the problem another way, or we might not understand it at all.

Sometimes with a program as complicated as @@command{ld} it is very hard to
construct an example that will make the program follow a certain path
through the code.  If you do not send us the example, we will not be
able to construct one, so we will not be able to verify that the bug is
fixed.

And if we cannot understand what bug you are trying to fix, or why your
patch should be an improvement, we will not install it.  A test case will
help us to understand.

@@item
A guess about what the bug is or what it depends on.

Such guesses are usually wrong.  Even we cannot guess right about such
things without first using the debugger to find the facts.
@@end itemize

@@node MRI
@@appendix MRI Compatible Script Files
@@cindex MRI compatibility
To aid users making the transition to @@sc{gnu} @@command{ld} from the MRI
linker, @@command{ld} can use MRI compatible linker scripts as an
alternative to the more general-purpose linker scripting language
described in @@ref{Scripts}.  MRI compatible linker scripts have a much
simpler command set than the scripting language otherwise used with
@@command{ld}.  @@sc{gnu} @@command{ld} supports the most commonly used MRI
linker commands; these commands are described here.

In general, MRI scripts aren't of much use with the @@code{a.out} object
file format, since it only has three sections and MRI scripts lack some
features to make use of them.

You can specify a file containing an MRI-compatible script using the
@@samp{-c} command-line option.

Each command in an MRI-compatible script occupies its own line; each
command line starts with the keyword that identifies the command (though
blank lines are also allowed for punctuation).  If a line of an
MRI-compatible script begins with an unrecognized keyword, @@command{ld}
issues a warning message, but continues processing the script.

Lines beginning with @@samp{*} are comments.

You can write these commands using all upper-case letters, or all
lower case; for example, @@samp{chip} is the same as @@samp{CHIP}.
The following list shows only the upper-case form of each command.

@@table @@code
@@cindex @@code{ABSOLUTE} (MRI)
@@item ABSOLUTE @@var{secname}
@@itemx ABSOLUTE @@var{secname}, @@var{secname}, @@dots{} @@var{secname}
Normally, @@command{ld} includes in the output file all sections from all
the input files.  However, in an MRI-compatible script, you can use the
@@code{ABSOLUTE} command to restrict the sections that will be present in
your output program.  If the @@code{ABSOLUTE} command is used at all in a
script, then only the sections named explicitly in @@code{ABSOLUTE}
commands will appear in the linker output.  You can still use other
input sections (whatever you select on the command line, or using
@@code{LOAD}) to resolve addresses in the output file.

@@cindex @@code{ALIAS} (MRI)
@@item ALIAS @@var{out-secname}, @@var{in-secname}
Use this command to place the data from input section @@var{in-secname}
in a section called @@var{out-secname} in the linker output file.

@@var{in-secname} may be an integer.

@@cindex @@code{ALIGN} (MRI)
@@item ALIGN @@var{secname} = @@var{expression}
Align the section called @@var{secname} to @@var{expression}.  The
@@var{expression} should be a power of two.

@@cindex @@code{BASE} (MRI)
@@item BASE @@var{expression}
Use the value of @@var{expression} as the lowest address (other than
absolute addresses) in the output file.

@@cindex @@code{CHIP} (MRI)
@@item CHIP @@var{expression}
@@itemx CHIP @@var{expression}, @@var{expression}
This command does nothing; it is accepted only for compatibility.

@@cindex @@code{END} (MRI)
@@item END
This command does nothing whatever; it's only accepted for compatibility.

@@cindex @@code{FORMAT} (MRI)
@@item FORMAT @@var{output-format}
Similar to the @@code{OUTPUT_FORMAT} command in the more general linker
language, but restricted to one of these output formats:

@@enumerate
@@item
S-records, if @@var{output-format} is @@samp{S}

@@item
IEEE, if @@var{output-format} is @@samp{IEEE}

@@item
COFF (the @@samp{coff-m68k} variant in BFD), if @@var{output-format} is
@@samp{COFF}
@@end enumerate

@@cindex @@code{LIST} (MRI)
@@item LIST @@var{anything}@@dots{}
Print (to the standard output file) a link map, as produced by the
@@command{ld} command-line option @@samp{-M}.

The keyword @@code{LIST} may be followed by anything on the
same line, with no change in its effect.

@@cindex @@code{LOAD} (MRI)
@@item LOAD @@var{filename}
@@itemx LOAD @@var{filename}, @@var{filename}, @@dots{} @@var{filename}
Include one or more object file @@var{filename} in the link; this has the
same effect as specifying @@var{filename} directly on the @@command{ld}
command line.

@@cindex @@code{NAME} (MRI)
@@item NAME @@var{output-name}
@@var{output-name} is the name for the program produced by @@command{ld}; the
MRI-compatible command @@code{NAME} is equivalent to the command-line
option @@samp{-o} or the general script language command @@code{OUTPUT}.

@@cindex @@code{ORDER} (MRI)
@@item ORDER @@var{secname}, @@var{secname}, @@dots{} @@var{secname}
@@itemx ORDER @@var{secname} @@var{secname} @@var{secname}
Normally, @@command{ld} orders the sections in its output file in the
order in which they first appear in the input files.  In an MRI-compatible
script, you can override this ordering with the @@code{ORDER} command.  The
sections you list with @@code{ORDER} will appear first in your output
file, in the order specified.

@@cindex @@code{PUBLIC} (MRI)
@@item PUBLIC @@var{name}=@@var{expression}
@@itemx PUBLIC @@var{name},@@var{expression}
@@itemx PUBLIC @@var{name} @@var{expression}
Supply a value (@@var{expression}) for external symbol
@@var{name} used in the linker input files.

@@cindex @@code{SECT} (MRI)
@@item SECT @@var{secname}, @@var{expression}
@@itemx SECT @@var{secname}=@@var{expression}
@@itemx SECT @@var{secname} @@var{expression}
You can use any of these three forms of the @@code{SECT} command to
specify the start address (@@var{expression}) for section @@var{secname}.
If you have more than one @@code{SECT} statement for the same
@@var{secname}, only the @@emph{first} sets the start address.
@@end table

@@node GNU Free Documentation License
@@appendix GNU Free Documentation License
@@include fdl.texi

@@node LD Index
@@unnumbered LD Index

@@printindex cp

@@tex
% I think something like @@@@colophon should be in texinfo.  In the
% meantime:
\long\def\colophon{\hbox to0pt{}\vfill
\centerline{The body of this manual is set in}
\centerline{\fontname\tenrm,}
\centerline{with headings in {\bf\fontname\tenbf}}
\centerline{and examples in {\tt\fontname\tentt}.}
\centerline{{\it\fontname\tenit\/} and}
\centerline{{\sl\fontname\tensl\/}}
\centerline{are used for emphasis.}\vfill}
\page\colophon
% Blame: doc@@@@cygnus.com, 28mar91.
@@end tex

@@bye
@


1.307
log
@	* emultempl/pe.em: Add --disable-large-address-aware option.
	* ld.texinfo (--disable-large-address-aware): Add documentation.
@
text
@d2321 1
a2321 1
to be used as heap for this program.  The default is 1Mb reserved, 4K
d2605 1
a2605 1
to be used as stack for this program.  The default is 2Mb reserved, 4K
@


1.306
log
@	* ldexp.c: Add LOG2CEIL() builtin function to linker script language
	* ldgram.y: Likewise
	* ldlex.l: Likewise
	* NEWS: Mention the new feature.
	* ld.texinfo: Document the new feature.

	* ld-scripts/log2.exp: New: Run the new log2 test.
	* ld-scripts/log2.s: Source for the new test.
	* ld-scripts/log2.t: Linker script for new test.
@
text
@d2351 8
@


1.305
log
@	* ldgram.y: Add ALIGN_WITH_INPUT output section attribute.
	* ldlang.c: Likewise.
	* ldlang.h: Likewise.
	* ldlex.l: Likewise.
	* mri.c: Likewise.
	* ld.texinfo: Document new feature.
	* NEWS: Mention new feature.

	* ld-scripts/script.exp: Run align with input test.
	* ld-scripts/align-with-input.t: New file.
	* ld-scripts/rgn-at8.d: Likewise.
	* ld-scripts/rgn-at8.t: Likewise.
@
text
@d5950 5
@


1.304
log
@	bfd/
	* elfxx-mips.h (_bfd_mips_elf_insn32): New prototype.
	* elfxx-mips.c (mips_elf_link_hash_table): Add insn32 member.
	(STUB_MOVE32_MICROMIPS, STUB_JALR32_MICROMIPS): New macros.
	(MICROMIPS_INSN32_FUNCTION_STUB_NORMAL_SIZE): Likewise.
	(MICROMIPS_INSN32_FUNCTION_STUB_BIG_SIZE): Likewise.
	(micromips_insn32_o32_exec_plt0_entry): New variable.
	(micromips_insn32_o32_exec_plt_entry): Likewise.
	(_bfd_mips_elf_adjust_dynamic_symbol): Handle insn32 mode.
	(mips_elf_estimate_stub_size): Likewise.
	(_bfd_mips_elf_size_dynamic_sections): Likewise.
	(_bfd_mips_elf_finish_dynamic_symbol): Likewise.
	(mips_finish_exec_plt): Likewise.
	(_bfd_mips_elf_relax_section): Likewise.
	(_bfd_mips_elf_insn32): New function.
	(_bfd_mips_elf_get_synthetic_symtab): Handle insn32 PLT.

	gas/
	* config/tc-mips.c (mips_set_options): Add insn32 member.
	(mips_opts): Initialize it.
	(NOP_INSN, NOP_INSN_SIZE): Handle insn32 mode.
	(options): Add OPTION_INSN32 and OPTION_NO_INSN32 enum values.
	(md_longopts): Add "minsn32" and "mno-insn32" options.
	(is_size_valid): Handle insn32 mode.
	(md_assemble): Pass instruction string down to macro.
	(brk_fmt): Add second dimension and insn32 mode initializers.
	(mfhl_fmt): Likewise.
	(BRK_FMT, MFHL_FMT): Handle insn32 mode.
	(macro_build) <'c'>: Handle microMIPS 32-bit BREAK encoding.
	(macro_build_jalr, move_register): Handle insn32 mode.
	(macro_build_branch_rs): Likewise.
	(macro): Handle insn32 mode.
	<M_JRADDIUSP>, <M_JRC>, <M_MOVEP>: New cases.
	(mips_ip): Handle insn32 mode.
	(md_parse_option): Handle OPTION_INSN32 and OPTION_NO_INSN32.
	(s_mipsset): Handle "insn32" and "noinsn32" pseudo-ops.
	(mips_handle_align): Handle insn32 mode.
	(md_show_usage): Add -minsn32 and -mno-insn32.

	* doc/as.texinfo (Target MIPS options): Add -minsn32 and
	-mno-insn32 options.
	(-minsn32, -mno-insn32): New options.
	* doc/c-mips.texi (MIPS Opts): Add -minsn32 and -mno-insn32
	options.
	(MIPS assembly options): New node.  Document .set insn32 and
	.set noinsn32.
	(MIPS-Dependent): List the new node.

	gas/testsuite/
	* gas/mips/micromips-insn32.d: New test.
	* gas/mips/micromips-noinsn32.d: Likewise.
	* gas/mips/micromips.l: Rename to...
	* gas/mips/micromips-warn.l: ... this.
	* gas/mips/micromips.d: Update accordingly.
	* gas/mips/micromips-trap.d: Likewise.
	* gas/mips/micromips.l: New list test.
	* gas/mips/micromips.s: Add conditionals.
	* gas/mips/mips.exp: Run the new tests.

	include/opcode/
	* mips.h: Add M_JRADDIUSP, M_JRC and M_MOVEP anonymous enum
	values.

	ld/
	* emultempl/mipself.em (insn32): New variable.
	(mips_create_output_section_statements): Handle insn32 mode.
	(PARSE_AND_LIST_PROLOGUE): New macro.
	(PARSE_AND_LIST_LONGOPTS): Likewise.
	(PARSE_AND_LIST_OPTIONS): Likewise.

	* gen-doc.texi: Set MIPS.
	* ld.texinfo: Likewise.
	(Options specific to MIPS targets): New section.
	(ld and MIPS family): New node.
	(Top, Machine Dependent): List the new node.

	opcodes/
	* micromips-opc.c (micromips_opcodes): Add "jraddiusp", "jrc"
	and "movep" macros.
@
text
@d3765 1
a3765 1
  [ALIGN(@@var{section_align})]
d4588 5
a4592 1
You can increase an output section's alignment by using ALIGN.
@


1.303
log
@	* configure.ac (mips*-*-bsd*, mips*-*-ultrix*, mips*-*-osf*)
	(mips*-*-ecoff*, mips*-*-pe*, mips*-*-irix* [v4 and earlier])
	(mips*-*-lnews*, mips*-*-riscos*): Add gas and ld to noconfigdirs.
	* configure: Regenerate.

gas/
	* NEWS: Note removal of ECOFF support.
	* doc/as.texinfo (--emulation): Update for the removal of MIPS ECOFF.
	* Makefile.am (TARG_ENV_HFILES): Remove config/te-lnews.h.
	(MULTI_CFILES): Remove config/e-mipsecoff.c.
	* Makefile.in: Regenerate.
	* configure.in: Remove MIPS ECOFF references.
	(mips-sony-bsd*, mips-*-bsd*, mips-*-lnews*-ecoff, mips-*-*-ecoff):
	Delete cases.
	(mips-*-irix5*-*, mips*-*-linux*-*, mips*-*-freebsd*)
	(mips*-*-kfreebsd*-gnu, mips-*-*-elf): Fold into...
	(mips-*-*): ...this single case.
	(mipsbecoff, mipslecoff, mipsecoff): Remove emulations.  Expect
	MIPS emulations to be e-mipself*.
	* configure: Regenerate.
	* configure.tgt (mips-sony-bsd*, mips-*-ultrix*, mips-*-osf*)
	(mips-*-ecoff*, mips-*-pe*, mips-*-irix*, ips-*-lnews*, mips-*-riscos*)
	(mips-*-sysv*): Remove coff and ecoff cases.
	* as.c (mipsbecoff, mipslecoff, mipsecoff): Remove.
	* ecoff.c: Remove reference to MIPS ECOFF.
	* config/e-mipsecoff.c, config/te-lnews.h: Delete files.
	* config/tc-mips.c (ECOFF_LITTLE_FORMAT): Delete.
	(RDATA_SECTION_NAME, mips_target_form): Remove COFF and ECOFF cases.
	(mips_hi_fixup): Tweak comment.
	(append_insn): Require a howto.
	(mips_after_parse_args): Remove OBJ_MAYBE_ECOFF code.

gas/testsuite/
	* gas/all/gas.exp: Remove reference to mips-ecoff.
	* gas/mips/branch-misc-1.d, gas/mips/branch-misc-2.d,
	gas/mips/branch-misc-2-64.d, gas/mips/branch-misc-2pic.d,
	gas/mips/branch-misc-2pic-64.d, gas/mips/branch-swap.d: Remove
	skips for mips-*-ecoff.

ld/
	* NEWS: Document the removal of MIPS ECOFF targets.
	* ld.texinfo (--gpsize=@@var{value}): Use MIPS ELF rather than
	MIPS ECOFF as an example of a target that supports small data.
	* ldmain.c (g_switch_value): Likewise.
	* configure.tgt (mips*-*-pe, mips*-dec-ultrix*, mips*-dec-osf*)
	(mips*-sgi-irix* [v4 and earlier], mips*el-*-ecoff*, mips*-*-ecoff*)
	(mips*-*-bsd*, mips*-*-lnews*): Remove cases.
	* Makefile.am (ALL_EMULATION_SOURCES): Remove emipsbig.c, emipsbsd.c,
	emipsidt.c, emipsidtl.c, emipslit.c, emipslnews.c and emipspe.c.
	(emipsbig.c, emipsbsd.c, emipsidt.c, emipsidtl.c, emipslit.c)
	(emipslnews.c, emipspe.c): Delete rules.
	* Makefile.in: Regenerate.
	* emulparams/mipsbig.sh, emulparams/mipsbsd.sh, emulparams/mipsidt.sh,
	emulparams/mipsidtl.sh, emulparams/mipslit.sh, emulparams/mipslnews.sh,
	emulparams/mipspe.sh, emultempl/mipsecoff.em: Delete.
	* emultempl/m68kcoff.em: Update comment to say that MIPS ECOFF support
	has now been removed.
	* emultempl/pe.em: Remove TARGET_IS_mipspe checks.
@
text
@d29 1
d150 3
d2739 26
d6066 3
d6567 23
@


1.302
log
@oops - omitted
@
text
@d622 1
a622 1
MIPS ECOFF which supports putting large and small objects into different
@


1.301
log
@	PR ld/15598
	* ld.texinfo (Source Code Reference): Fix typos.
@
text
@d1296 3
a1298 1
definition.  The remaining files contain references to the symbol.
@


1.300
log
@	* ld.texinfo (SEGMENT_START): Rephrase to indicate that a -T
	option must appear before the SEGMENT_START is encountered in
	order for the default value to be overridden.
@
text
@d3604 1
a3604 1
creates a entry called @@samp{foo} in the symbol table.  This entry
d3625 1
a3625 1
looks up the symbol @@samp{foo} in the symbol table, gets it address
@


1.299
log
@line omitted from previous delta.
@
text
@d5937 4
a5940 4
value has been given for this segment (with a command-line @@samp{-T}
option) that value will be returned; otherwise the value will be
@@var{default}.  At present, the @@samp{-T} command-line option can only
be used to set the base address for the ``text'', ``data'', and
@


1.298
log
@	* ld.texinfo (SORT_BY_ALIGNMENT): Fix and clarify typo - sections
	are sorted by descending order of alignment.
@
text
@d4035 2
@


1.297
log
@        * ld.texinfo (--disable-runtime-pseudo-reloc): Adjust default.
@
text
@d4034 1
a4034 1
ascending order by alignment before placing them in the output file.
d4051 1
a4051 1
It will sort the input sections by name first, then by alignment if 2
d4055 1
a4055 1
It will sort the input sections by alignment first, then by name if 2
@


1.296
log
@	* elf32-h8300 (h8_relax_section): Add new relaxation of mov
	@@(disp:32,ERx) to mov @@(disp:16,ERx).
	(R_H8_DISP32A16): New reloc.
	Comments added and corrected.
	* reloc.c (BFD_RELOC_H8_DISP32A16): New reloc.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.

	* ld.texinfo (H8/300): Add description of relaxation of
	mov @@(disp:32,ERx) to mov @@(disp:16,ERx).

	* ld-h8300/h8300.exp: Add new relax-7 test on ELF.
	* ld-h8300/relax-2.s: Add other direction and .w/.l variants of
	mov insns.
	* ld-h8300/relax-2.d: Update expected disassembly.
	* ld-h8300/relax-7a.s: New: tests for mov @@(disp:32,ERx) -> mov
	@@(disp:16,ERx).
	* ld-h8300/relax-7b.s: New: Likewise.
	* ld-h8300/relax-7.d: New: expected disassembly.

	* config/tc-h8300.c (do_a_fix_imm): Add relaxation of mov
	@@(disp:32,ERx) to mov @@(disp:16,ERx) insns by new reloc
	R_H8_DISP32A16.
	* config/tc-h8300.h: Remove duplicated defines.
@
text
@d2572 1
a2572 1
DLLs.  This is the default.
@


1.295
log
@	PR ld/12549
bfd/
	* elflink.c (elf_link_add_object_symbols): Exclude weak refs when
	considering whether an --as-needed library is needed.
ld/
	* ld.texinfo (--as-needed): Update.
ld/testsuite/
	* ld-elf/pr14862.out: Expect no output.
@
text
@d6081 1
a6081 1
@@c FIXME: specifically mov.b, or any mov instructions really?
d6089 8
@


1.294
log
@	PR ld/15188
	* ld.texinfo: Fix typos.
@
text
@d1146 8
a1153 5
emitted for a library that satisfies an undefined symbol reference
from a regular object file or, if the library is not found in the
DT_NEEDED lists of other libraries linked up to that point, an
undefined symbol reference from another dynamic library.
@@option{--no-as-needed} restores the default behaviour.
@


1.293
log
@	PR ld/15130
	* ld.texinfo (-rpath-link): Typo fix.
@
text
@d3 1
a3 4
@@c Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
@@c 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
@@c 2012, 2013
@@c Free Software Foundation, Inc.
d55 1
a55 3
Copyright @@copyright{} 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2012, 2013
Free Software Foundation, Inc.
d92 1
a92 3
Copyright @@copyright{} 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,
2012, 2013 Free Software Foundation, Inc.
d2842 1
a2842 1
contents}.  A section may be marked as @@dfn{loadable}, which mean that
d4687 5
a4691 5
If the @@code{NOCROSSREFS} keyword is used, and there any references
among the sections, the linker will report an error.  Since the sections
all run at the same address, it normally does not make sense for one
section to refer directly to another.  @@xref{Miscellaneous Commands,
NOCROSSREFS}.
@


1.292
log
@ld: change --enable-new-dtags to only generate new dtags

The "new" dtags options have been around for 14+ years, so there
shouldn't be a need to generate both new & old tags anymore.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d1720 1
a1720 1
For a native linker, the search the contents of the environment
@


1.291
log
@	* ld.texinfo (-Tldata-segment): Describe.
	* ldlex.h (OPTION_TLDATA_SEGMENT): New enum value.
	* lexsup.c (ld_options): Add -Tldata-segment.
	(parse_args): Handle OPTION_TLDATA_SEGMENT.
	* scripttempl/elf.sc: Support LARGE_DATA_ADDR.
@
text
@d2115 2
a2116 1
@@option{--enable-new-dtags}, the dynamic tags will be created as needed.
@


1.290
log
@	* ld.texinfo: Replace @@ with @@@@ when it is part of the text.
	Correct ordering of M68HC11 entry.

	* doc/binutils.texi: Fix ordering of top level nodes.
	Replace erroneous uses of @@itemx with @@item.

	* bfd.texinfo: Replace @@ with @@@@ when it is part of the text.
@
text
@d1849 6
@


1.289
log
@ld/
	* ld.texinfo (Options): Describe -Trodata-segment.
	* ldlex.h (enum option_values): Add OPTION_TRODATA_SEGMENT.
	* lexsup.c (ld_options, parse_args): Handle -Trodata-segment.
	* scripttempl/elf.sc (RODATA_ADDR, SHLIB_RODATA_ADDR): Wrap
	SEGMENT_START("rodata-segment", ...) + SIZEOF_HEADERS around the value.
@
text
@d4 2
a5 1
@@c 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012
d59 2
a60 1
2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2012 Free Software Foundation, Inc.
d98 2
a99 2
1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2012 Free
Software Foundation, Inc.
d147 3
a152 3
@@ifset M68HC11
* M68HC11/68HC12::              ld and the Motorola 68HC11 and 68HC12 families
@@end ifset
d6017 3
a6034 3
@@ifset M68HC11
* M68HC11/68HC12::		@@code{ld} and the Motorola 68HC11 and 68HC12 families
@@end ifset
d7882 1
a7882 1
% I think something like @@colophon should be in texinfo.  In the
d7893 1
a7893 1
% Blame: doc@@cygnus.com, 28mar91.
@


1.288
log
@	PR ld/14776
	* ld.texinfo: Fix spelling mistakes.
@
text
@d375 1
a375 1
it will add a corresponding @@code{DT_DEPAUDIT} entry in the output file.  
d377 1
a377 1
interface.  
d475 1
a475 1
The -P option is provided for Solaris compatibility.  
d1269 1
a1269 1
This option affects the treatment of dynamic libraries referred to 
d1397 1
a1397 1
@@samp{-r}).  In this case the root of symbols kept must be explicitly 
d1840 7
d2224 2
a2225 2
with non-GNU PE-aware tools, such as file viewers and dumpers.  However, 
GDB relies on the use of PE long section names to find Dwarf-2 debug 
d2636 1
a2636 1
 
d3207 1
a3207 1
@@item .text @@tab RAM @@tab ROM @@tab ROM 
d4785 1
a4785 1
command.  
d5306 1
a5306 1
  .text ALIGN (CONSTANT (MAXPAGESIZE)) : @@{ *(.text) @@} 
d6377 3
a6379 3
The @@samp{--fix-arm1176} switch enables a link-time workaround for an erratum 
in certain ARM1176 processors.  The workaround is enabled by default if you 
are targeting ARM v6 (excluding ARM v6T2) or earlier.  It can be disabled 
d6382 1
a6382 1
Further information is available in the ``ARM1176JZ-S and ARM1176JZF-S 
d6974 1
a6974 1
options listed above may be used to filter symbols out from the list for 
@


1.287
log
@Implement ELF linker -z global option

ld/

	* ld.texinfo: Document "-z global".

	* emultempl/elf32.em (gld${EMULATION_NAME}_handle_option): Support
	"-z global".
	(gld${EMULATION_NAME}_list_options): Likewise.

ld/testsuite/

	* ld-elf/global1.d: New file.
@
text
@d58 1
a58 1
2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.
d96 1
a96 1
1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free
d1611 1
a1611 1
instructions, and combinig constant values.
d1897 1
a1897 1
a symbol definition.  Unix linkers allow this somewhat sloppy practise,
d1900 1
a1900 1
Unfortunately, some C libraries use this practise, so you may get some
d2488 1
a2488 1
@@code{__declspec(dllimport)}.  However, in practise that
d4667 1
a4667 1
those within the general @@code{SECTIONS} contruct (@@pxref{SECTIONS}),
d5245 1
a5245 1
@@samp{H} for hexadeciaml, @@samp{o} or @@samp{O} for octal, @@samp{b} or
d5682 1
a5682 1
relative addresses in the same section or two absolute addresess
d6266 1
a6266 1
elememt prefix for import libraries. This is the old style to generate
d6324 1
a6324 1
condition flags, so may cause incorrect progrm behavior in rare cases.
d6372 1
a6372 1
are targetting ARM v6 (excluding ARM v6T2) or earlier.  It can be disabled 
d6376 1
a6376 1
Programmer Advice Notice'' available on the ARM documentaion website at:
d6411 1
a6411 1
duplicate stubs, increasing the code sizw.  The linker will try to
@


1.286
log
@	bfd/
	* bfd-in.h (bfd_elf_stack_segment_size): Declare.
	* bfd-in2.h: Rebuilt.
	* elfxx-target.h (elf_backend_stack_align): New.
	(elfNN_bed): Add it.
	* elf-bfd.h (struct elf_backend_data): Add stack_align field.
	* elf.c (bfd_elf_map_sections_to_segments): Pay attention to
	stack_align and stacksize for PT_GNU_STACK segment.
	(assign_file_positions_for_non_load_sections): Set p_memsz for
	PT_GNU_STACK segment.
	(copy_elf_program_header): Copy PT_GNU_STACK size.
	* elflink.c (bfd_elf_stack_segment_size): New function, taken from
	uclinux backends.
	(bfd_elf_size_dynamic_sections): Determine
	PT_GNU_STACK requirements after calling backend.  Pay attention to
	stacksize.
	* elf32-bfin.c (elf32_bfinfdpic_always_size_sections): Call
	bfd_elf_stack_segment_size.
	(elf32_bfinfdpic_modify_program_headers): Delete.
	(elf32_bfingfdpic_copy_private_bfd_data): Don't copy PT_GNU_STACK
	here.
	(elf_backend_stack_align): Override.
	(elf_backend_modify_program_headers): Don't override.
	* elf32-frv.c (frvfdpic_always_size_sections): Call
	bfd_elf_stack_segment_size.
	(elf32_frvfdpic_modify_program_headers): Delete.
	(elf32_frvfdpic_copy_private_bfd_data): Don't copy PT_GNU_STACK
	here.
	(elf_backend_stack_align): Override.
	(elf_backend_modify_program_headers): Don't override.
	* elf32-lm32.c (lm32_elf_always_size_sections): Leave
	PT_GNU_STACK creation to underlying elf support.  Check
	__stacksize here for backwards compatibility, and set it if
	needed.
	(lm32_elf_modify_segment_map): Delete.
	(lm32_elf_modify_program_headers): Delete.
	(elf_backend_stack_align): Override.
	(elf_backend_modify_segment_map): Don't override.
	(elf_backend_modify_program_headers): Don't override.
	* elf32-sh.c (sh_elf_always_size_sections): Call
	bfd_elf_stack_segment_size.
	(sh_elf_modify_program_headers): Delete.
	(sh_elf_copy_private_data): Don't copy PT_GNU_STACK
	here.
	(elf_backend_stack_align): Override.
	(elf_backend_modify_program_headers): Don't override.
	* elf32-tic6x.c (elf32_tic6x_always_size_sections): Call
	bfd_elf_stack_segment_size.
	(elf32_tic6x_modify_program_headers): Delete.
	(elf32_tic6x_copy_private_data): Delete.
	(elf_backend_stack_align): Override.
	(bfd_elf32_bfd_copy_private_bfd_data): Don't override.
	(elf_backend_modify_program_headers): Don't override.

	include/
	* bfdlink.h (struct bfd_link_info): Add stacksize option.

	ld/
	* ld.texinfo (stack-size): New option.
	* emultempl/elf32.em: Add stack-size option.

	ld/testsuite/
	* ld-elf/binutils.exp: Add -z stack-size=0.
	* ld-elf/elf.exp: Add stack-exec and stack-size tests.
	* ld-elf/orphan-region.d: Add stack-size option. Remove xfail.
	* ld-elf/stack-exec.rd: New.
	* ld-elf/stack-size.rd: New.
	* ld-elf/stack.s: New.
	* ld-scripts/empty-aligned.d: Add stack-size option.
	* ld-sh/fdpic-stack-set.d: New.
	* ld-tic6x/shlib-1.rd: Remove __stacksize symbol.
	* ld-tic6x/shlib-1b.rd: Likewise.
	* ld-tic6x/shlib-1r.rd: Likewise.
	* ld-tic6x/shlib-1rb.rd: Likewise.
	* ld-tic6x/shlib-app-1.rd: Likewise.
	* ld-tic6x/shlib-app-1b.rd: Likewise.
	* ld-tic6x/shlib-app-1r.rd: Likewise.
	* ld-tic6x/shlib-app-1rb.rd: Likewise.
	* ld-tic6x/shlib-noindex.rd: Likewise.
	* ld-tic6x/static-app-1.rd: Likewise.
	* ld-tic6x/static-app-1b.rd: Likewise.
	* ld-tic6x/static-app-1r.rd: Likewise.
	* ld-tic6x/static-app-1rb.rd: Likewise.
@
text
@d1027 5
@


1.285
log
@	* ld.texinfo (Expression Section): Correct description of
	conversions for a binary operation involving an absolute symbol
	and a number.
@
text
@d1096 5
@


1.284
log
@	bfd/
	* elflink.c (bfd_elf_record_link_assignment): Remove --defsym
	symbols special case.

	ld/
	* ldexp.h (etree_union): Add defsym member to the assign member
	structure.
	(exp_assign): Add hidden argument to prototype.
	* ldexp.c (exp_fold_tree_1): Use the defsym member to handle
	--defsym symbols.
	(exp_assop): Add defsym argument, initialize the defsym member
	of the assign structure.
	(exp_assign): Handle hidden symbols.
	(exp_defsym): Update to use the defsym argument to exp_assop.
	(exp_provide): Update to handle the defsym argument to exp_assop.
	* ldlex.l (HIDDEN): New token.
	* ldgram.y (HIDDEN): Likewise.
	(assignment, section): Update calls to exp_assign.
	* ldctor.c (ldctor_build_sets): Likewise.
	* mri.c (mri_format): Likewise.
	* ldlang.c (lang_insert_orphan, lang_leave_overlay): Likewise.
	(open_input_bfds): Remove --defsym symbols special case.
	* emultempl/beos.em (gld_${EMULATION_NAME}_set_symbols): Update
	call to exp_assign.
	* emultempl/pe.em (gld_${EMULATION_NAME}_set_symbols): Likewise.
	* emultempl/pep.em (gld_${EMULATION_NAME}_set_symbols): Likewise.
	* emultempl/spuelf.em (spu_place_special_section): Likewise.
	* emultempl/xtensaelf.em (ld_xtensa_insert_page_offsets):
	Likewise.
	* ld.texinfo (Assigning Values to Symbols): Add HIDDEN.
	(HIDDEN): New subsection.
@
text
@d5649 4
d5657 4
a5660 4
Unary operations on an absolute address, and binary operations on one
or more absolute addresses or on two relative addresses not in the
same section, first convert any non-absolute term to an absolute
address before applying the operator.
@


1.283
log
@Add SORT_NONE and don't sort sort .init/.fini sections

ld/

	PR ld/14156
	* NEWS: Mention SORT_NONE.

	* ld.h (sort_type): Add by_none.

	* ld.texinfo: Document SORT_NONE.

	* ldgram.y: Handle SORT_NONE.

	* ldlang.c (update_wild_statements): Handle by_none.  Don't
	sort .init/.fini sections.

	* ldlex.l: Add SORT_NONE.

ld/testsuite/

	PR ld/14156
	* ld-elf/fini0.s: New file.
	* ld-elf/fini1.s: Likewise.
	* ld-elf/fini2.s: Likewise.
	* ld-elf/fini3.s: Likewise.
	* ld-elf/finin.s: Likewise.
	* ld-elf/foo0.s: Likewise.
	* ld-elf/foo1.s: Likewise.
	* ld-elf/foo2.s: Likewise.
	* ld-elf/foo3.s: Likewise.
	* ld-elf/foon.s: Likewise.
	* ld-elf/init0.s: Likewise.
	* ld-elf/init1.s: Likewise.
	* ld-elf/init2.s: Likewise.
	* ld-elf/init3.s: Likewise.
	* ld-elf/initn.s: Likewise.
	* ld-elf/pr14156a.d: Likewise.
	* ld-elf/pr14156b.d: Likewise.
	* ld-elf/pr14156c.d: Likewise.
	* ld-elf/pr14156c.t: Likewise.
@
text
@d3413 1
d3477 25
@


1.283.2.1
log
@bfd/
2012-08-09  Maciej W. Rozycki  <macro@@codesourcery.com>

	* elfxx-mips.c (LA25_LUI_MICROMIPS_1, LA25_LUI_MICROMIPS_2):
	Remove macros, folding them into...
	(LA25_LUI_MICROMIPS): ... this new macro.
	(LA25_J_MICROMIPS_1, LA25_J_MICROMIPS_2): Likewise into...
	(LA25_J_MICROMIPS): ... this new macro.
	(LA25_ADDIU_MICROMIPS_1, LA25_ADDIU_MICROMIPS_2): Likewise
	into...
	(LA25_ADDIU_MICROMIPS): ... this new macro.
	(bfd_put_micromips_32, bfd_get_micromips_32): New functions.
	(mips_elf_create_la25_stub): Use them.
	(check_br32_dslot, check_br32, check_relocated_bzc): Likewise.
	(_bfd_mips_elf_relax_section): Likewise.

gas/
	* config/tc-mips.c (NO_ISA_COP, COP_INSN): Remove macros.
	(is_opcode_valid): Remove coprocessor instruction exclusions.
	Replace OPCODE_IS_MEMBER with opcode_is_member.
	(is_opcode_valid_16): Replace OPCODE_IS_MEMBER with
	opcode_is_member.
	(macro): Remove coprocessor instruction exclusions.

gas/
	* gas/mips/mips.exp: Set has_newabi for all Linux targets.
	* gas/mips/cfi-n64-1.d: Adjust for targets that do not infer the
	ISA from the ABI.
	* gas/mips/elf-rel-got-n32.d: Likewise.
	* gas/mips/elf-rel-got-n64.d: Likewise.
	* gas/mips/elf-rel-xgot-n32.d: Likewise.
	* gas/mips/elf-rel-xgot-n64.d: Likewise.
	* gas/mips/elf-rel18.d: Likewise.
	* gas/mips/elf-rel28-n32.d: Likewise.
	* gas/mips/elf-rel28-n64.d: Likewise.
	* gas/mips/jal-newabi.d: Likewise.
	* gas/mips/ldstla-n64-shared.d: Likewise.
	* gas/mips/ldstla-n64-sym32.d: Likewise.
	* gas/mips/ldstla-n64.d: Likewise.
	* gas/mips/macro-warn-1-n32.d: Likewise.
	* gas/mips/macro-warn-2-n32.d: Likewise.
	* gas/mips/n32-consec.d: Likewise.

include/
2012-08-13  Richard Sandiford  <rdsandiford@@googlemail.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>

	* mips.h (mips_opcode): Add the exclusions field.
	(OPCODE_IS_MEMBER): Remove macro.
	(cpu_is_member): New inline function.
	(opcode_is_member): Likewise.

ld/
	* emulparams/elf32bmip.sh: Make _gp hidden.
	* emulparams/elf32bmipn32-defs.sh: Likewise.
	* emulparams/elf32mipswindiss.sh: Likewise.
	* scripttempl/mips.sc: Likewise.

ld/
2012-08-28  Maciej W. Rozycki  <macro@@codesourcery.com>

	* ld-elf/export-class.sd: New test.
	* ld-elf/export-class.vd: New test.
	* ld-elf/export-class-def.s: New test source.
	* ld-elf/export-class-dep.s: New test source.
	* ld-elf/export-class-lib.s: New test source.
	* ld-elf/export-class-ref.s: New test source.
	* ld-elf/export-class-lib.ver: New test version script.
	* ld-elf/export-class.exp: New test script.
	* ld-arm/arm-export-class.rd: New test.
	* ld-arm/arm-export-class.xd: New test.
	* ld-arm/export-class.exp: New test script.
	* ld-i386/i386-export-class.rd: New test.
	* ld-i386/i386-export-class.xd: New test.
	* ld-i386/export-class.exp: New test script.
	* ld-mips-elf/mips-32-export-class.rd: New test.
	* ld-mips-elf/mips-32-export-class.xd: New test.
	* ld-mips-elf/mips-64-export-class.rd: New test.
	* ld-mips-elf/mips-64-export-class.xd: New test.
	* ld-mips-elf/export-class.exp: New test script.
	* ld-powerpc/powerpc-32-export-class.rd: New test.
	* ld-powerpc/powerpc-32-export-class.xd: New test.
	* ld-powerpc/powerpc-64-export-class.rd: New test.
	* ld-powerpc/powerpc-64-export-class.xd: New test.
	* ld-powerpc/export-class.exp: New test script.
	* ld-x86-64/x86-64-64-export-class.rd: New test.
	* ld-x86-64/x86-64-x32-export-class.rd: New test.
	* ld-x86-64/export-class.exp: New test script.

opcodes/
2012-08-14  Maciej W. Rozycki  <macro@@codesourcery.com>

	* mips-dis.c (print_insn_args): Add GET_OP and GET_OP_S local
	macros, use local variables for info struct member accesses,
	update the type of the variable used to hold the instruction
	word.
	(print_insn_mips, print_mips16_insn_arg): Likewise.
	(print_insn_mips16): Add GET_OP and GET_OP_S local macros, use
	local variables for info struct member accesses.
	(print_insn_micromips): Add GET_OP_S local macro.
	(_print_insn_mips): Update the type of the variable used to hold
	the instruction word.
@
text
@a3412 1
* HIDDEN::			HIDDEN
a3475 25
@@node HIDDEN
@@subsection HIDDEN
@@cindex HIDDEN
For ELF targeted ports, define a symbol that will be hidden and won't be
exported.  The syntax is @@code{HIDDEN(@@var{symbol} = @@var{expression})}.

Here is the example from @@ref{Simple Assignments}, rewritten to use
@@code{HIDDEN}:

@@smallexample
HIDDEN(floating_point = 0);
SECTIONS
@@{
  .text :
    @@{
      *(.text)
      HIDDEN(_etext = .);
    @@}
  HIDDEN(_bdata = (. + 3) & ~ 3);
  .data : @@{ *(.data) @@}
@@}
@@end smallexample
@@noindent
In this case none of the three symbols will be visible outside this module.

@


1.283.2.2
log
@ld/
	* ld.texinfo (Options): Describe -Trodata-segment.
	* ldlex.h (enum option_values): Add OPTION_TRODATA_SEGMENT.
	* lexsup.c (ld_options, parse_args): Handle -Trodata-segment.
	* scripttempl/elf.sc (RODATA_ADDR, SHLIB_RODATA_ADDR): Wrap
	SEGMENT_START("rodata-segment", ...) + SIZEOF_HEADERS around the value.
@
text
@d375 1
a375 1
it will add a corresponding @@code{DT_DEPAUDIT} entry in the output file.
d377 1
a377 1
interface.
d475 1
a475 1
The -P option is provided for Solaris compatibility.
d1259 1
a1259 1
This option affects the treatment of dynamic libraries referred to
d1387 1
a1387 1
@@samp{-r}).  In this case the root of symbols kept must be explicitly
a1829 7
@@kindex -Trodata-segment=@@var{org}
@@item -Trodata-segment=@@var{org}
@@cindex rodata segment origin, cmd line
When creating an ELF executable or shared object for a target where
the read-only data is in its own segment separate from the executable
text, it will set the address of the first byte of the read-only data segment.

d2207 2
a2208 2
with non-GNU PE-aware tools, such as file viewers and dumpers.  However,
GDB relies on the use of PE long section names to find Dwarf-2 debug
d2619 1
a2619 1

d3190 1
a3190 1
@@item .text @@tab RAM @@tab ROM @@tab ROM
d4768 1
a4768 1
command.
d5289 1
a5289 1
  .text ALIGN (CONSTANT (MAXPAGESIZE)) : @@{ *(.text) @@}
d6356 3
a6358 3
The @@samp{--fix-arm1176} switch enables a link-time workaround for an erratum
in certain ARM1176 processors.  The workaround is enabled by default if you
are targetting ARM v6 (excluding ARM v6T2) or earlier.  It can be disabled
d6361 1
a6361 1
Further information is available in the ``ARM1176JZ-S and ARM1176JZF-S
d6953 1
a6953 1
options listed above may be used to filter symbols out from the list for
@


1.282
log
@Replace __end_SECNAME with __stop_SECNAME

	* ld.texinfo: Replace __end_SECNAME with __stop_SECNAME.
@
text
@d4041 4
@


1.281
log
@bfd/
	* elf64-ppc.c: Define more insns used in plt call stubs.
	(ppc64_elf_brtaken_reloc): Assume isa version 2 or above.
	(ppc64_elf_relocate_section): Likewise.
	(enum ppc_stub_type): Add ppc_stub_plt_call_r2save.
	(struct ppc_link_hash_table): Increase size of stub_count array.
	Add plt_stub_align and plt_thread_safe.
	(ALWAYS_USE_FAKE_DEP, ALWAYS_EMIT_R2SAVE): Define.
	(plt_stub_size, plt_stub_pad): New functions.
	(build_plt_stub): Emit barriers for power7 thread safety.  Don't
	emit needless save of r2.
	(build_tls_get_addr_stub): Adjust params.
	(ppc_build_one_stub): Handle ppc_stub_plt_call_r2save and aligning
	plt stubs.  Adjust build_*plt_stub calls.
	(ppc_size_one_stub): Similarly.
	(ppc64_elf_size_stubs): Accept plt_thread_safe and plt_stub_align
	params.  Choose default for plt_thread_safe based on existence of
	calls to thread creation functions.  Modify plt_call to
	plt_call_r2save when no tocsave reloc found.  Align tail of stub
	sections.
	(ppc64_elf_build_stubs): Align tail of stub sections.  Adjust
	output of stub statistics.
	(ppc64_elf_relocate_section): Handle ppc_stub_plt_call_r2save.
	* elf64-ppc.h (ppc64_elf_size_stubs): Update prototype.
ld/
	* emultempl/ppc64elf.em (PARSE_AND_LIST_PROLOGUE,
	PARSE_AND_LIST_LONGOPTS, PARSE_AND_LIST_OPTIONS,
	PARSE_AND_LIST_ARGS_CASES): Handle --{no-,}plt-thread-safe and
	--{no-,}plt-align.
	(plt_thread_safe, plt_stub_align): New vars.
	(gld${EMULATION_NAME}_after_allocation): Pass them to
	ppc64_elf_size_stubs.  Align stub sections according to plt_stub_align.
	* ld.texinfo: Document new command line options, and an old
	undocumented option.
@
text
@d5303 1
a5303 1
__start_SECNAME and __end_SECNAME, where SECNAME is the name of the
@


1.280
log
@	* ldmain.c (add_DT_NEEDED_for_dynamic): Default to FALSE.
	* ld.texinfo (--copy-dt-needed-entries): Mention new default.
@
text
@d4 1
a4 1
@@c 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011
d6713 3
a6715 1
By default, PowerPC64 GCC generates code for a TOC model where TOC
d6724 46
@


1.279
log
@	* bfd/bfd-in.h (bfd_elf32_arm_set_target_relocs): Update prototype.
	* bfd/bfd-in2.h (bfd_elf32_arm_set_target_relocs): Likewise.
	* bfd/elf32-arm.c (elf32_arm_link_hash_table): New field.
	(elf232_arm_link_hash_table_create): Initialise new field.
	(check_use_blx): Change test depending on fix_arm1176.
	(bfd_elf32_arm_set_target_relocs): Set fix_arm1176 from
	command line options.
	* ld/emultempl/armelf.em (fix_arm1176): New variable.
	(arm_elf_create_output_section_statements): Pass
	fix_arm1176 option to bfd backend.
	(OPTION_FIX_ARM1176): New define.
	(OPTION_NO_FIX_ARM1176): Likewise.
	(PARSE_AND_LIST_LONGOPTS): Add new command line options.
	(PARSE_AND_LIST_OPTIONS): Likewise.
	(PARSE_AND_LIST_ARGS_CASES): Likewise.
	* ld/ld.texinfo: Document new command line options.
	* ld/testsuite/ld-arm/arm-elf.exp (armelftests): Update for new command-line
	options.
	(armeabitests): Update for new command-line options, and add
	new test cases.
	* ld/testsuite/ld-arm/fix-arm1176.s: Add test case.
	* ld/testsuite/ld-arm/fix-arm1176-off.d: Likewise.
	* ld/testsuite/ld-arm/fix-arm1176-on.d: Likewise.
@
text
@d1261 1
a1261 1
command line.  Normally the linker will add a DT_NEEDED tag to the
d1263 1
a1263 1
input dynamic library.  With @@option{--no-copy-dt-needed-entries}
d1265 2
a1266 2
follow it will have their DT_NEEDED entries ignored.  The default
behaviour can be restored with @@option{--copy-dt-needed-entries}.
d1269 6
a1274 7
libraries.  With the default setting dynamic libraries mentioned on
the command line will be recursively searched, following their
DT_NEEDED tags to other libraries, in order to resolve symbols
required by the output binary.  With
@@option{--no-copy-dt-needed-entries} specified however the searching
of dynamic libraries that follow it will stop with the dynamic
library itself.  No DT_NEEDED links will be traversed to resolve
@


1.278
log
@Implement ld --print-output-format.
@
text
@d6324 12
@


1.277
log
@include/ChangeLog
2011-07-11  Catherine Moore  <clm@@codesourcery.com>

	* bfdlink.h (flag_type): New enumeration.
	(flag_info_list): New structure.
	(flag_info): New structure.

bfd/ChangeLog
2011-07-11  Catherine Moore  <clm@@codesourcery.com>

	* aout-adobe.c (aout_32_bfd_lookup_section_flags): New definition.
	* aout-target.h (MY_bfd_lookup_section_flags): New definition.
	* aout-tic30.c (MY_bfd_lookup_section_flags): New definition.
        * bfd-in2.h: Regenerated.
	* bfd.c (bfd_lookup_section_flags): New definition.
	* binary.c (binary_bfd_lookup_section_flags): New definition.
	* bout.c (b_out_bfd_lookup_section_flags): New definition.
	* coff-alpha.c (_bfd_ecoff_bfd_lookup_section_flags): New definition.
	* coff-mips.c (_bfd_ecoff_bfd_lookup_section_flags): New definition.
	* coff-rs6000.c (rs6000coff_vec): Include
	bfd_generic_lookup_section_flags.
	(pmac_xcoff_vec): Likewise.
	* coffcode.h (coff_bfd_lookup_section_flags): New definition.
	* coff64-rs6000.c (rs6000coff64_vec): Include
	bfd_generic_lookup_section_flags.
	(aix5coff64_vec): Likewise.
	* ecoff.c (bfd_debug_section): Initialize flag_info field.
	* elf-bfd.h (elf_backend_lookup_section_flags_hook): Declare.
	(bfd_elf_lookup_section_flags): Declare.
	* elflink.c (bfd_elf_lookup_section_flags): New function.
	* elfxx-target.h (bfd_elfNN_bfd_lookup_section_flags): Define.
	(elf_backend_lookup_section_flags_hook): Define.
	(elf_backend_data): Add elf_backend_lookup_section_flags_hook.
	* i386msdos.c (msdos_bfd_lookup_section_flags): New define.
	* i386os9k.c (os9k_bfd_lookup_section_flags): New define.
	* ieee.c (ieee_bfd_lookup_section_flags): New define.
	* ihex.c (ihex_bfd_lookup_section_flags): New define.
	* libbfd-in.h (_bfd_nolink_bfd_lookup_section_flags): Declare.
	(bfd_generic_lookup_section_flags): Declare.
	* libbfd.h: Regenerated.
	* mach-o-target.c (bfd_mach_o_bfd_lookup_section_flags): New.
	* mmo.c (mmo_bfd_lookup_section_flags): New definition.
	* nlm-target.h (nlm_bfd_lookup_section_flags): New definition.
	* oasys.c (oasys_bfd_lookup_section_flags): New definition.
	* pef.c (bfd_pef_bfd_lookup_section_flags): New definition.
	* plugin.c (bfd_plugin_bfd_lookup_section_flags): New definition.
	* ppcboot.c (ppcboot_bfd_lookup_section_flags): New definition.
	* reloc.c (bfd_generic_lookup_section_flags): New function.
	* som.c (som_bfd_lookup_section_flags): New definition.
	* srec.c (srec_bfd_lookup_section_flags): New definition.
	* targets.c (flag_info): Declare.
	(NAME##_bfd_lookup_section_flags): Add to LINK jump table.
	(_bfd_lookup_section_flags): New.
	* tekhex.c (tekhex_bfd_lookup_section_flags): New definition.
	* versados.c (versados_bfd_lookup_section_flags): New definition.
	* vms-alpha.c (alpha_vms_bfd_lookup_section_flag): New definition.
	* xsym.c (bfd_sym_bfd_lookup_section_flags): New definition.

ld/ChangeLog
2011-07-11  Catherine Moore  <clm@@codesourcery.com>

	* ld.h (section_flag_list): Add field to struct wildcard_spec.
	* ld.texinfo (INPUT_SECTION_FLAGS): Document.
	* ldgram.y (flag_info_list, flag_info): Add to union.
	(INPUT_SECTION_FLAGS): New token.
	(wildcard_spec): Initialize section_flag_list to NULL for
	each alternative.
	(sect_flag_list, sect_flags): New rules.
	(input_section_spec_no_keep): Add alternatives to recognize
	sect_flags.
	* ldlang.c (walk_wild_consider_section): Initialize
	section_flag_info field of the section struct.
	(lang_add_section): Check input section flags.
	(lang_add_wild): Initialize section_flag_list field of
	the statement struct.
	* ldlang.h (lang_input_statement_struct): Add section_flag_list field.
	(lang_wild_statement_struct): Likewise.
	* ldlex.l (INPUT_SECTION_FLAGS): New token.
	* mri.c (mri_draw_tree): Initialize section_flag_list to NULL.
	* NEWS: Announce INPUT_SECTION_FLAGS enhancement.

ld/testsuite/ChangeLog
2011-07-11 Catherine Moore  <clm@@cm00re.com>

	* ld-scripts/section-flags-1.s: New.
	* ld-scripts/section-flags-1.t: New.
	* ld-scripts/section-flags-2.s: New.
	* ld-scripts/section-flags-2.t: New.
	* ld-scripts/section-flags.exp: New.
@
text
@d1404 7
@


1.276
log
@	PR ld/12570
include/
	* bfdlink.h (struct bfd_link_info): Add no_ld_generated_unwind_info
	option.
ld/
	* emultempl/elf32.em (OPTION_LD_GENERATED_UNWIND_INFO,
	OPTION_NO_LD_GENERATED_UNWIND_INFO): Define.
	(gld${EMULATION_NAME}_handle_option): Handle
	--ld-generated-unwind-info and --no-ld-generated-unwind-info.
	* ld.texinfo (--ld-generated-unwind-info,
	--no-ld-generated-unwind-info): Document.
bfd/
	* elf-eh-frame.c (_bfd_elf_parse_eh_frame): Allow no relocations
	at all for linker created .eh_frame sections.
	(_bfd_elf_discard_section_eh_frame): Handle linker created
	.eh_frame sections with no relocations.
	* elf64-x86-64.c: Include dwarf2.h.
	(elf_x86_64_eh_frame_plt): New variable.
	(PLT_CIE_LENGTH, PLT_FDE_LENGTH, PLT_FDE_START_OFFSET,
	PLT_FDE_LEN_OFFSET): Define.
	(struct elf_x86_64_link_hash_table): Add plt_eh_frame field.
	(elf_x86_64_create_dynamic_sections): Create and fill in
	.eh_frame section for .plt section.
	(elf_x86_64_size_dynamic_sections): Write .plt section size
	into .eh_frame FDE covering .plt section.
	(elf_x86_64_finish_dynamic_sections): Write .plt section
	start into .eh_frame FDE covering .plt section.  Call
	_bfd_elf_write_section_eh_frame on htab->plt_eh_frame section.
	(elf_backend_plt_alignment): Define to 4.
	* elf32-i386.c: Include dwarf2.h.
	(elf_i386_eh_frame_plt): New variable.
	(PLT_CIE_LENGTH, PLT_FDE_LENGTH, PLT_FDE_START_OFFSET,
	PLT_FDE_LEN_OFFSET): Define.
	(struct elf_i386_link_hash_table): Add plt_eh_frame field.
	(elf_i386_create_dynamic_sections): Create and fill in
	.eh_frame section for .plt section.
	(elf_i386_size_dynamic_sections): Write .plt section size
	into .eh_frame FDE covering .plt section.
	(elf_i386_finish_dynamic_sections): Write .plt section
	start into .eh_frame FDE covering .plt section.  Call
	_bfd_elf_write_section_eh_frame on htab->plt_eh_frame section.
	(elf_backend_plt_alignment): Define to 4.
ld/testsuite/
	* ld-x86-64/x86-64.exp: Link some testcases with
	--no-ld-generated-unwind-info.
	* ld-x86-64/tlsbin.rd: Add --no-ld-generated-unwind-info to ld
	comment.
	* ld-x86-64/tlsdesc.dd: Likewise.
	* ld-x86-64/tlspic.dd: Likewise.
	* ld-x86-64/tlsdesc.sd: Likewise.
	* ld-x86-64/tlspic.rd: Likewise.
	* ld-x86-64/tlsbindesc.rd: Likewise.
	* ld-x86-64/tlsbindesc.sd: Likewise.
	* ld-x86-64/tlsbin.td: Likewise.
	* ld-x86-64/tlsdesc.pd: Likewise.
	* ld-x86-64/tlsdesc.td: Likewise.
	* ld-x86-64/tlsbindesc.dd: Likewise.
	* ld-x86-64/tlsbin.dd: Likewise.
	* ld-x86-64/tlsgdesc.rd: Likewise.
	* ld-x86-64/tlspic.sd: Likewise.
	* ld-x86-64/tlsbindesc.td: Likewise.
	* ld-x86-64/tlspic.td: Likewise.
	* ld-x86-64/tlsbin.sd: Likewise.
	* ld-x86-64/ilp32-4.d: Likewise.
	* ld-x86-64/tlsgdesc.dd: Add --no-ld-generated-unwind-info to ld
	comment.  Adjust.
	* ld-x86-64/tlsdesc.rd: Likewise.
	* ld-x86-64/tlsgd6.dd: Adjust.
	* ld-x86-64/tlsgd5.dd: Likewise.
	* ld-i386/i386.exp: Link some testcases with
	--no-ld-generated-unwind-info.
	* ld-i386/tlsbin.rd: Add --no-ld-generated-unwind-info to ld
	comment..
	* ld-i386/tlsdesc.dd: Likewise.
	* ld-i386/tlspic.dd: Likewise.
	* ld-i386/tlsdesc.sd: Likewise.
	* ld-i386/tlsgdesc.dd: Likewise.
	* ld-i386/tlsnopic.sd: Likewise.
	* ld-i386/tlspic.rd: Likewise.
	* ld-i386/tlsdesc.rd: Likewise.
	* ld-i386/tlsbindesc.rd: Likewise.
	* ld-i386/tlsbindesc.sd: Likewise.
	* ld-i386/tlsbin.td: Likewise.
	* ld-i386/tlsdesc.td: Likewise.
	* ld-i386/tlsnopic.dd: Likewise.
	* ld-i386/tlsbindesc.dd: Likewise.
	* ld-i386/tlsbin.dd: Likewise.
	* ld-i386/tlsgdesc.rd: Likewise.
	* ld-i386/tlspic.sd: Likewise.
	* ld-i386/tlsnopic.rd: Likewise.
	* ld-i386/tlsbindesc.td: Likewise.
	* ld-i386/tlspic.td: Likewise.
	* ld-i386/tlsbin.sd: Likewise.
@
text
@d3862 20
@


1.275
log
@2011-05-09  Paul Brook  <paul@@codesourcery.com>

	bfd/
	* bfd-in.h (elf32_tic6x_fix_exidx_coverage): Add prototype.
	* bfd-in2.h: Regenerate.
	* elf32-tic6x.c: Include limits.h.
	(tic6x_unwind_edit_type, tic6x_unwind_table_edit,
	_tic6x_elf_section_data): New.
	(elf32_tic6x_section_data): Define.
	(elf32_tic6x_new_section_hook): Allocate target specific data.
	(elf32_tic6x_add_unwind_table_edit): New function.
	(get_tic6x_elf_section_data, elf32_tic6x_adjust_exidx_size,
	elf32_tic6x_insert_cantunwind_after, elf32_tic6x_add_low31,
	elf32_tic6x_copy_exidx_entry): New functions.
	(elf_backend_write_section): Define.

	ld/
	* emultempl/tic6xdsbt.em (merge_exidx_entries): New.
	(compare_output_sec_vma): New function.
	(gld${EMULATION_NAME}_after_allocation): New function.
	(OPTION_NO_MERGE_EXIDX_ENTRIES): Define.
	(PARSE_AND_LIST_OPTIONS): Add --no-merge-exidx-entries.
	(PARSE_AND_LIST_ARGS_CASES): Add OPTION_NO_MERGE_EXIDX_ENTRIES.
	(LDEMUL_AFTER_ALLOCATION): Set.
	* ld.texinfo: Document c6x --no-merge-exidx-entries.

	ld/testsuite/
	* ld-tic6x/discard-unwind.ld: New.
	* ld-tic6x/unwind.ld: New.
	* ld-tic6x/unwind-1.d: New test.
	* ld-tic6x/unwind-1.s: New test.
	* ld-tic6x/unwind-2.d: New test.
	* ld-tic6x/unwind-2.s: New test.
	* ld-tic6x/unwind-3.d: New test.
	* ld-tic6x/unwind-3.s: New test.
	* ld-tic6x/unwind-4.d: New test.
	* ld-tic6x/unwind-4.s: New test.
	* ld-tic6x/unwind-5.d: New test.
	* ld-tic6x/unwind-5.s: New test.
	* ld-tic6x/unwind-6.d: New test.
@
text
@d2072 6
@


1.274
log
@include/elf/
	* tic6x.h (R_C6000_JUMP_SPLOT, R_C6000_EHTYPE,
	R_C6000_PCR_H16, R_C6000_PCR_L16): New relocs.
	(SHN_TIC6X_SCOMMON): Define.

bfd/
	* elf32-tic6x.h (struct elf32_tic6x_params): New.
	(elf32_tic6x_setup): Declare.
	* elf32-tic6x.c: Include <limits.h>.
	(ELF_DYNAMIC_LINKER, DEFAULT_STACK_SIZE, PLT_ENTRY_SIZE): Define.
	(struct elf32_tic6x_link_hash_table, struct elf32_link_hash_entry):
	New structures.
	(elf32_tic6x_link_hash_table, is_tic6x_elf): New macros.
	(tic6x_elf_scom_section, tic6x_elf_scom_symbol,
	tic6x_elf_scom_symbol_ptr): New static variables.
	(elf32_tic6x_howto_table, elf32_tic6x_howto_table_rel,
	elf32_tic6x_reloc_map): Add R_C6000_JUMP_SLOT, R_C6000_EHTYPE,
	R_C6000_PCR_H16 and R_C6000_PCR_L16.
	(elf32_tic6x_link_hash_newfunc, elf32_tic6x_link_hash_table_create,
	elf32_tic6x_link_hash_table_free, elf32_tic6x_setup,
	elf32_tic6x_using_dsbt, elf32_tic6x_install_rela,
	elf32_tic6x_create_dynamic_sections, elf32_tic6x_make_got_dynreloc,
	elf32_tic6x_finish_dynamic_symbol, elf32_tic6x_gc_sweep_hook,
	elf32_tic6x_adjust_dynamic_symbol): New static functions.
	(elf32_tic6x_relocate_section): For R_C6000_PCR_S21, convert branches
	to weak symbols as required by the ABI.
	Handle GOT and DSBT_INDEX relocs, and copy relocs to the output file
	as needed when generating DSBT output.
	(elf32_tic6x_check_relocs, elf32_tic6x_add_symbol_hook,
	elf32_tic6x_symbol_processing, elf32_tic6x_section_from_bfd_section,
	elf32_tic6x_allocate_dynrelocs, elf32_tic6x_size_dynamic_sections,
	elf32_tic6x_always_size_sections, elf32_tic6x_modify_program_headers,
	elf32_tic6x_finish_dynamic_sections, elf32_tic6x_plt_sym_val,
	elf32_tic6x_copy_private_data, elf32_tic6x_link_omit_section_dynsym):
	New static functions.
	(ELF_MAXPAGESIZE): Define to 0x1000.
	(bfd_elf32_bfd_copy_private_bfd_data,
	bfd_elf32_bfd_link_hash_table_create,
	bfd_elf32_bfd_link_hash_table_free, elf_backend_can_refcount,
	elf_backend_want_got_plt, elf_backend_want_dynbss,
	elf_backend_plt_readonly, elf_backend_got_header_size,
	elf_backend_gc_sweep_hook, elf_backend_modify_program_headers,
	elf_backend_create_dynamic_sections, elf_backend_adjust_dynamic_symbol,
	elf_backend_check_relocs, elf_backend_add_symbol_hook,
	elf_backend_symbol_processing, elf_backend_link_output_symbol_hook,
	elf_backend_section_from_bfd_section,
	elf_backend_finish_dynamic_symbol, elf_backend_always_size_sections,
	elf32_tic6x_size_dynamic_sections, elf_backend_finish_dynamic_sections,
	elf_backend_omit_section_dynsym, elf_backend_plt_sym_val): Define.

	* bfd/reloc.c (BFD_RELOC_C6000_JUMP_SLOT, BFD_RELOC_C6000_EHTYPE,
	BFD_RELOC_C6000_PCR_H16, BFD_RELOC_C6000_PCR_S16): Add.
	* bfd/bfd-in2.h: Regenerate.
	* bfd/libbfd.h: Regenerate.
	* config.bfd: Accept tic6x-*-* instead of tic6x-*-elf.

gas/
	* config/tc-tic6x.c (sbss_section, scom_section, scom_symbol): New
	static variables.
	(md_begin): Initialize them.
	(s_tic6x_scomm): New static function.
	(md_pseudo_table): Add "scomm".
	(tc_gen_reloc): Really undo all adjustments made by
	bfd_install_relocation.
	* doc/c-tic6x.texi: Document the .scomm directive.

gas/testsuite/
	* gas/tic6x/scomm-directive-1.s: New test.
	* gas/tic6x/scomm-directive-1.d: New test.
	* gas/tic6x/scomm-directive-2.s: New test.
	* gas/tic6x/scomm-directive-2.d: New test.
	* gas/tic6x/scomm-directive-3.s: New test.
	* gas/tic6x/scomm-directive-3.d: New test.
	* gas/tic6x/scomm-directive-4.s: New test.
	* gas/tic6x/scomm-directive-4.d: New test.
	* gas/tic6x/scomm-directive-5.s: New test.
	* gas/tic6x/scomm-directive-5.d: New test.
	* gas/tic6x/scomm-directive-6.s: New test.
	* gas/tic6x/scomm-directive-6.d: New test.
	* gas/tic6x/scomm-directive-7.s: New test.
	* gas/tic6x/scomm-directive-7.d: New test.
	* gas/tic6x/scomm-directive-8.s: New test.
	* gas/tic6x/scomm-directive-8.d: New test.

ld/
	* emulparams/elf32_tic6x_le.sh (BIG_OUTPUT_FORMAT, EXTRA_EM_FILE,
	GENERATE_SHLIB_SCRIPT): New defines.
	(TEXT_START_ADDR): Define differently depending on target.
	(.got): Redefine to include "*(.dsbt)".
	(SDATA_START_SYMBOLS): Remove, replace with
	(OTHER_GOT_SYMBOLS): New.
	(OTHER_BSS_SECTIONS): Define only for ELF targets.
	* emultempl/tic6xdsbt.em: New file.
	* gen-doc.texi: Set C6X.
	* ld.texinfo: Likewise.
	(Options specific to C6X uClinux targets): New section.

binutils/
	* readelf.c (get_symbol_index_type): Handle SCOM for TIC6X.
	(dump_relocations): Likewise.

binutils/testsuite/
	* lib/binutils-common.exp (is_elf_format): Accept tic6x*-*-uclinux*.

ld/testsuite/
	* ld-scripts/crossref.exp: Add CFLAGS for tic6x*-*-*.
	* ld-elf/sec-to-seg.exp: Remove tic6x from list of targets defining
	pagesize to 1.
	* ld-tic6x/tic6x.exp: Add support for DSBT shared library/executable
	linking tests.
	* ld-tic6x/dsbt.ld: New linker script.
	* ld-tic6x/dsbt-be.ld: New linker script.
	* ld-tic6x/dsbt-overflow.ld: New linker script.
	* ld-tic6x/dsbt-inrange.ld: New linker script.
	* ld-tic6x/shlib-1.s: New test.
	* ld-tic6x/shlib-2.s: New test.
	* ld-tic6x/shlib-app-1r.s: New test.
	* ld-tic6x/shlib-app-1.s: New test.
	* ld-tic6x/shlib-1.sd: New test.
	* ld-tic6x/shlib-1.dd: New test.
	* ld-tic6x/shlib-app-1.rd: New test.
	* ld-tic6x/shlib-app-1rb.rd: New test.
	* ld-tic6x/shlib-app-1.sd: New test.
	* ld-tic6x/static-app-1rb.od: New test.
	* ld-tic6x/shlib-app-1.dd: New test.
	* ld-tic6x/shlib-app-1rb.sd: New test.
	* ld-tic6x/static-app-1b.od: New test.
	* ld-tic6x/static-app-1r.od: New test.
	* ld-tic6x/shlib-1rb.rd: New test.
	* ld-tic6x/shlib-app-1rb.dd: New test.
	* ld-tic6x/shlib-1rb.sd: New test.
	* ld-tic6x/shlib-1rb.dd: New test.
	* ld-tic6x/shlib-app-1b.od: New test.
	* ld-tic6x/tic6x.exp: New test.
	* ld-tic6x/static-app-1rb.rd: New test.
	* ld-tic6x/shlib-app-1r.od: New test.
	* ld-tic6x/static-app-1.od: New test.
	* ld-tic6x/static-app-1b.rd: New test.
	* ld-tic6x/static-app-1r.rd: New test.
	* ld-tic6x/static-app-1rb.sd: New test.
	* ld-tic6x/static-app-1b.sd: New test.
	* ld-tic6x/static-app-1rb.dd: New test.
	* ld-tic6x/static-app-1r.sd: New test.
	* ld-tic6x/static-app-1b.dd: New test.
	* ld-tic6x/shlib-1b.rd: New test.
	* ld-tic6x/static-app-1r.dd: New test.
	* ld-tic6x/shlib-app-1b.rd: New test.
	* ld-tic6x/shlib-1r.rd: New test.
	* ld-tic6x/shlib-app-1r.rd: New test.
	* ld-tic6x/shlib-1b.sd: New test.
	* ld-tic6x/static-app-1.rd: New test.
	* ld-tic6x/shlib-app-1b.sd: New test.
	* ld-tic6x/shlib-1r.sd: New test.
	* ld-tic6x/shlib-1b.dd: New test.
	* ld-tic6x/shlib-app-1r.sd: New test.
	* ld-tic6x/shlib-app-1b.dd: New test.
	* ld-tic6x/shlib-1r.dd: New test.
	* ld-tic6x/static-app-1.sd: New test.
	* ld-tic6x/shlib-app-1r.dd: New test.
	* ld-tic6x/static-app-1.dd: New test.
	* ld-tic6x/shlib-noindex.rd: New test.
	* ld-tic6x/shlib-noindex.dd: New test.
	* ld-tic6x/shlib-noindex.sd: New test.
	* ld-tic6x/got-reloc-local-1.s: New test.
	* ld-tic6x/got-reloc-local-2.s: New test.
	* ld-tic6x/got-reloc-local-r.d: New test.
	* ld-tic6x/got-reloc-global.s: New test.
	* ld-tic6x/got-reloc-global-addend-1.d: New test.
	* ld-tic6x/got-reloc-global-addend-1.s: New test.
	* ld-tic6x/got-reloc-global-addend-2.d: New test.
	* ld-tic6x/got-reloc-inrange.d: New test.
	* ld-tic6x/got-reloc-overflow.d: New test.
	* ld-tic6x/got-reloc-global-addend-2.s: New test.
	* ld-tic6x/dsbt-index-error.d: New test.
	* ld-tic6x/dsbt-index.d: New test.
	* ld-tic6x/dsbt-index.s: New test.
	* ld-tic6x/shlib-app-1.od: New test.
	* ld-tic6x/shlib-app-1rb.od: New test.
	* ld-tic6x/shlib-1.rd: New test.
	* ld-tic6x/weak.d: New test.
	* ld-tic6x/weak-be.d: New test.
	* ld-tic6x/weak.s: New test.
 	* ld-tic6x/weak-data.d: New test.
	* ld-tic6x/common.d: New test.
	* ld-tic6x/common.ld: New test.
	* ld-tic6x/common.s: New test.
@
text
@d2640 4
@


1.273
log
@Report plugin symbols for --verbose=N.

2011-03-04  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld.texinfo: Document --verbose[=NUMBER].

	* lexsup.c (ld_options): Update --verbose.
	(parse_args): Set report_plugin_symbols.

	* plugin.c (report_plugin_symbols): New.
	(get_symbols): Report plugin symbols if report_plugin_symbols
	is TRUE.

	* plugin.h (report_plugin_symbols): New.
@
text
@d25 1
d2616 29
@


1.272
log
@	* ldexp.c (fold_binary): Set result section for arithmetic and
	logical operations to NULL when both operands are in same section.
	* ld.texinfo (Expression Section): Describe this.
@
text
@d1854 2
a1855 2
@@kindex --verbose
@@cindex verbose
d1857 1
a1857 1
@@itemx --verbose
d1860 2
a1861 1
the linker script being used by the linker.
@


1.271
log
@Update copyright dates.
@
text
@d5570 7
a5576 2
The result of other operations on relative addresses (after above
conversions) is a relative address in the same section as the operand(s).
@


1.270
log
@	PR ld/12356
	* ld.texinfo (Miscellaneous Commands): Describe LD_FEATURE.
	(Expression Section): Update.
	* ld.h (ld_config_type): Add sane_expr.
	* ldgram.y (ifile_p1): Add LD_FEATURE.
	* ldlex.l (LD_FEATYRE): New.
	* ldemul.c (after_parse_default): Delete code handling ld_compatibility.
	* ldexp.h (struct ldexp_control): Delete uses_defined.
	* ldexp.c: Remove all uses of uses_defined.
	(fold_name): Test config.sane_expr rather than ld_compatibility.
	(exp_fold_tree_1): Likewise.  Adjust handling of assignments
	during first phase.
	* ldlang.h (ld_compatibility): Delete.
	(lang_ld_feature): Declare.
	* ldlang.c (ld_compatibility): Delete.
	(open_input_bfds): Only handle assignments for --defsym.
	(lang_ld_feature): New function.
@
text
@d4 1
a4 1
@@c 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
@


1.269
log
@	* ld.texinfo (Expression Section): Describe treatment of numbers
	and absolute symbols.
	* ldemul.c (after_open_default): Look up __ld_compatibility.
	* ldexp.c (fold_name): Convert absolute symbols to numbers when
	inside output section definitions, or when __ld_compatibility >= 221.
	(exp_fold_tree_1): Convert numbers to absolute when not in output
	section definition and __ld_compatibility < 221.  Don't always
	convert values outside an output section definition to absolute.
	* ldexp.h (uses_defined): Comment.
	* ldlang.c (ld_compatibility): New variable.
	* ldlang.h (ld_compatibility): Declare.
	* emultempl/aix.em, * emultempl/armcoff.em, * emultempl/beos.em,
	* emultempl/elf32.em, * emultempl/genelf.em, * emultempl/lnk960.em,
	* emultempl/m68kcoff.em, * emultempl/mmo.em, * emultempl/pe.em,
	* emultempl/pep.em, * emultempl/sunos.em, * emultempl/z80.em: Call
	after_open_default from after_open function.
@
text
@d3347 7
d5513 2
a5514 2
One complication is that unless you assign @@code{__ld_compatibility}
a value of 221 or larger, numbers and absolute symbols are treated
d5519 3
a5521 3
absolute symbols as numbers.  If @@code{__ld_compatibility} is assigned
a value larger than 221, then absolute symbols and numbers are simply
treated as numbers everywhere.
@


1.268
log
@Add SORT_BY_INIT_PRIORITY.

bfd/

2010-12-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* elf.c (_bfd_elf_new_section_hook): Special handling for
	.init_array/.fini_array output sections.

ld/

2010-12-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (GENSCRIPTS): Add @@enable_initfini_array@@.

	* NEWS: Mention SORT_BY_INIT_PRIORITY.

	* configure.in: Add AC_CANONICAL_BUILD.
	Add --enable-initfini-array.

	* genscripts.sh (ENABLE_INITFINI_ARRAY): New.

	* ld.h (sort_type): Add by_init_priority.

	* ld.texinfo: Document SORT_BY_INIT_PRIORITY.

	* ldgram.y (SORT_BY_INIT_PRIORITY): New.
	(wildcard_spec): Handle SORT_BY_INIT_PRIORITY.

	* ldlang.c (get_init_priority): New.
	(compare_section): Use get_init_priority for by_init_priority.

	* ldlex.l (SORT_BY_INIT_PRIORITY): New.

	* scripttempl/elf.sc: Support ENABLE_INITFINI_ARRAY.

	* Makefile.in: Regenerated.
	* aclocal.m4: Regenerated.
	* config.in: Likewise.
	* configure: Likewise.

ld/testsuite/

2010-12-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-elf/elf.exp (array_tests): Add init-mixed.
	(array_tests_static): Likewise.
	Also delete tmpdir/init-mixed.

	* ld-elf/init-mixed.c: New.
	* ld-elf/init-mixed.out: Likewise.
@
text
@d5506 9
d5516 1
a5516 10
When the linker evaluates an expression, the result depends on where
the expression is located in a linker script.  Expressions appearing
outside an output section definitions are evaluated with all terms
first being converted to absolute addresses before applying operators,
and evaluate to an absolute address result.  Expressions appearing
inside an output section definition are evaluated with more complex
rules, but the aim is to treat terms as relative addresses and produce
a relative address result.  In particular, an assignment of a number
to a symbol results in a symbol relative to the output section with an
offset given by the number.  So, in the following simple example,
d5540 2
a5541 3
For expressions appearing inside an output section definition
involving numbers, relative addresses and absolute addresses, ld
follows these rules to evaluate terms:
@


1.267
log
@Add directory section for info document.
@
text
@d3914 6
@


1.267.2.1
log
@backport from mainline
@
text
@a3346 7

@@item LD_FEATURE(@@var{string})
@@kindex LD_FEATURE(@@var{string})
This command may be used to modify @@command{ld} behavior.  If
@@var{string} is @@code{"SANE_EXPR"} then absolute symbols and numbers
in a script are simply treated as numbers everywhere.
@@xref{Expression Section}.
a5499 9
One complication is that unless you set @@code{LD_FEATURE ("SANE_EXPR")}
(@@pxref{Miscellaneous Commands}), numbers and absolute symbols are treated
differently depending on their location, for compatibility with older
versions of @@code{ld}.  Expressions appearing outside an output
section definition treat all numbers as absolute addresses.
Expressions appearing inside an output section definition treat
absolute symbols as numbers.  If @@code{LD_FEATURE ("SANE_EXPR")} is
given, then absolute symbols and numbers are simply treated as numbers
everywhere.
d5501 10
a5510 1
In the following simple example,
d5534 3
a5536 2
For expressions involving numbers, relative addresses and absolute
addresses, ld follows these rules to evaluate terms:
d5558 2
a5559 7
The result of other binary arithmetic and logical operations on two
relative addresses in the same section or two absolute addresess
(after above conversions) is also a number.
@@item
The result of other operations on relative addresses or one
relative address and a number, is a relative address in the same
section as the relative operand(s).
@


1.267.2.2
log
@	PR ld/12696
	PR ld/12672
	PR ld/12507
	PR ld/12365
	PR 10549
Backport fixes for these PRs.
@
text
@d1854 2
a1855 2
@@kindex --verbose[=@@var{NUMBER}]
@@cindex verbose[=@@var{NUMBER}]
d1857 1
a1857 1
@@itemx --verbose[=@@var{NUMBER}]
d1860 1
a1860 2
the linker script being used by the linker. If the optional @@var{NUMBER}
argument > 1, plugin symbol status will also be displayed.
@


1.266
log
@        * script-sections.cc(class Memory_region): Remove
        current_lma_offset_ field.  Rename current_vma_offset_ to
        current_offset_.  Add last_section_ field.
        (Memory_region::get_current_vma_address): Rename to
        get_current_address.
        (Memory_region::get_current_lma_address): Delete.
        (Memory_region::increment_vma_offset): Rename to
        increment_offset.
        (Memory_region::increment_lma_offset): Delete.
        (Memory_region::attributes_compatible): New method.  Returns
        true if the provided section is compatible with the region.
        (Memory_region::get_last_section): New method.  Returns the last
        section to use the region.
        (Memory_region::set_last_section): New method.  Stores the last
        section to use the region.
        (Script_sections::block_in_region): New method.  Returns true if
        a block of memory is contained within a region.
        (Script_sections::find_memory_region): New method.  Locates a
        memory region to be used to set a VMA or LMA address.
        (Output_section_definition::set_section_addresses): Add code to
        check for addresses set by memory regions.
        (Output_segment::set_section_addresses): Remove memory region
        walking code.
        (Script_sections::create_segment): Add a warning if a header
        segment is created outside of any region.
        * script-sections.h (class Script_sections): Add prototypes for
        find_memory_region and block_in_region methods.
        * testsuite/memory_test.s: Use .long instead of .word.
        * testsuite/memory_test.t: Add some more output sections.
        * testsuite/memory_test.sh: Update expected output.

        * ld.texinfo: Update description of computation of VMA and LMA
        addresses for output sections.

        * ld-scripts/rgn-at5.t: Add some more output sections.
        * ld-scripts/rgn-at5.d: Update expected output.
@
text
@d42 3
a44 3
@@ifinfo
@@format
START-INFO-DIR-ENTRY
d46 2
a47 3
END-INFO-DIR-ENTRY
@@end format
@@end ifinfo
@


1.265
log
@	PR ld/12066
	* ldexp.c (fold_name): Treat absolute symbols as plain numbers.
	* ld.texinfo (Expression Section): Don't say absolute symbols
	are addresses.
@
text
@d3685 31
a3715 11
address) of the output section.  If you do not provide @@var{address},
the linker will set it based on @@var{region} if present, or otherwise
based on the current value of the location counter.

If you provide @@var{address}, the address of the output section will be
set to precisely that.  If you provide neither @@var{address} nor
@@var{region}, then the address of the output section will be set to the
current value of the location counter aligned to the alignment
requirements of the output section.  The alignment requirement of the
output section is the strictest alignment of any input section contained
within the output section.
a3716 1
For example,
d3720 1
d3723 1
d3727 1
d3732 2
a3733 2
counter aligned to the strictest alignment of a @@samp{.text} input
section.
d4332 10
a4341 11
@@ref{Basic Script Concepts}.  The address expression which may appear in
an output section description sets the VMA (@@pxref{Output Section
Address}).

The expression @@var{lma} that follows the @@code{AT} keyword specifies
the load address of the section.

Alternatively, with @@samp{AT>@@var{lma_region}} expression, you may
specify a memory region for the section's load address. @@xref{MEMORY}.
Note that if the section has not had a VMA assigned to it then the
linker will use the @@var{lma_region} as the VMA region as well.
d4344 26
a4369 6
section, the linker will set the LMA such that the difference between
VMA and LMA for the section is the same as the preceding output
section in the same region.  If there is no preceding output section
or the section is not allocatable, the linker will set the LMA equal
to the VMA.
@@xref{Output Section Region}.
d4408 2
a4409 2
/* ROM has data at end of text; copy it. */
while (dst < &_edata) @@{
a4410 1
@@}
d4412 1
a4412 1
/* Zero bss */
@


1.264
log
@bfd/
	* elf.c (bfd_elf_get_default_section_type): Don't test SEC_NEVER_LOAD.
	* elflink.c (elf_link_input_bfd): Likewise.
ld/
	* ld.texinfo (NOLOAD): Do not erroneously state that contents will
	appear in output file.
	* ldlang.c (lang_add_section): Clear SEC_HAS_CONTENTS on noload
	unless SEC_COFF_SHARED_LIBRARY.
	(map_input_to_output_sections): Don't set SEC_HAS_CONTENTS for noload
	output sections.
	(lang_size_sections_1): Don't test SEC_NEVER_LOAD when deciding
	to update dot in region.  Ditto when setting SEC_ALLOC if dot
	advanced due to assignment.
	* ldwrite.c (build_link_order): Don't test SEC_NEVER_LOAD.
@
text
@d5456 5
a5460 5
Some terms in linker expressions are addresses.  This is true of all
symbols and for builtin functions that return an address, such as
@@code{ADDR}, @@code{LOADADDR}, @@code{ORIGIN} and @@code{SEGMENT_START}.
Other terms are simply numbers, or are builtin functions that return a
non-address value, such as @@code{LENGTH}.
@


1.263
log
@        * ld.texinfo (MEMORY): Clarify the behaviour of the ! character in
        a region's attributes.
@
text
@d4293 1
a4293 2
need to be loaded when the program is run.  The contents of the
@@samp{ROM} section will appear in the linker output file as usual.
@


1.262
log
@binutils/
	* NEWS: Mention change in linker script expression evaluation.
ld/
	* ld.texinfo (Expression Section): Detail expression evaluation.
	(Builtin Functions <ADDR>): Correct.
	(Builtin Functions <LOADADDR>): Don't mention LOADADDR normally
	the same as ADDR.
	(Builtin Functions <SEGMENT_START>): Typo fix.
	* ldexp.c (new_number): New function.
	(make_abs, exp_get_abs_int): Cope with NULL expld.result.section.
	(fold_unary <'~', '!', '-'>): Don't make_abs.
	(fold_binary): Simplify result section logic.  Return NULL section
	for logical ops.
	(fold_binary <SEGMENT_START>): Use new_rel_from_abs to set value to
	a consistent result.
	(fold_name <SIZEOF_HEADERS>): Return new_number, not new_abs.
	(fold_name <DEFINED, SIZEOF, ALIGNOF, LENGTH, CONSTANT>): Likewise.
	(fold_name <NAME>): No need to handle absolute symbols differently
	from relative ones.
	(fold_name <ORIGIN>): Don't return valid result when
	lang_first_phase_enum.  Return new_rel_from_abs, not new_abs.
	(exp_fold_tree_1 <etree_value>): Return new_number, not new_rel.
	(exp_fold_tree_1): Ajust for NULL expld.result.section.  When assigning
	a plain number to dot, assume the value is relative to expld.section.
	Make terms not in an output section, absolute.
	* ldlang.c (print_assignment): Fix style nit.
	(lang_size_sections_1): Cope with NULL expld.result.section.
	(lang_do_assignments_1): Likewise.
ld/testsuite/
	* ld-scripts/memory.t: Remove ORIGIN fudge.
@
text
@d4646 1
a4646 1
Invert the sense of any of the preceding attributes
@


1.261
log
@ld: improve linker script section

The example version script in the manual currently suggests:
	extern "C++" { "int f(int, double)"; }

But a C++ function like that doesn't encode the return type into the
mangled  name, so when the linker demangles things, it ends up with
"f(int, double)"  and so it never matches.

The example also lacks a trailing semicolon after the brace, so the
linker always complains about a syntax error in the file.

While the language section documents the possibilities, it isn't clear
as to which is the default language.  So explicitly state that the C
language is the default.

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d5450 76
a5525 17
When the linker evaluates an expression, the result is either absolute
or relative to some section.  A relative expression is expressed as a
fixed offset from the base of a section.

The position of the expression within the linker script determines
whether it is absolute or relative.  An expression which appears within
an output section definition is relative to the base of the output
section.  An expression which appears elsewhere will be absolute.

A symbol set to a relative expression will be relocatable if you request
relocatable output using the @@samp{-r} option.  That means that a
further link operation may change the value of the symbol.  The symbol's
section will be the section of the relative expression.

A symbol set to an absolute expression will retain the same value
through any further link operation.  The symbol will be absolute, and
will not have any particular associated section.
d5541 3
d5562 1
a5562 1
Return the absolute address (the VMA) of the named @@var{section}.  Your
d5564 4
a5567 2
the following example, @@code{symbol_1} and @@code{symbol_2} are assigned
identical values:
d5731 1
a5731 3
Return the absolute LMA of the named @@var{section}.  This is normally
the same as @@code{ADDR}, but it may be different if the @@code{AT}
attribute is used in the output section definition (@@pxref{Output
d5761 1
a5761 1
``bss'' sections, but you use @@code{SEGMENT_START} with any segment
@


1.260
log
@etc/ChangeLog

        * standards.texi: Relicense under GFDL v1.3.
        * fdl.texi: Replace with v1.3 text.

gas/ChangeLog

        * doc/as.texinfo: Replace abbreviated 20th century year numbers
        with full versions.

gprof/ChangeLog

        * gprof.texi: Replace abbreviated 20th century year numbers with
        full versions.

ld/ChangeLog

        * fdl.texi: Replace with v1.3 text.
        * ld.texinfo: Replace abbreviated 20th century year numbers with
        full versions.
        * ldint.texinfo: Likewise.
        Relicense under GFDL v1.3.  Replace text of v1.1 FDL with an
        include of the fdl.texi file.
@
text
@d4913 2
a4914 2
		 "int f(int, double)";
         @@}
d5039 2
a5040 1
patterns specified in @@samp{version-script-commands}.
@


1.259
log
@2010-04-15  Andrew Haley  <aph@@redhat.com>

	* emultempl/armelf.em (merge_exidx_entries): New variable.
	(OPTION_NO_MERGE_EXIDX_ENTRIES): New definition.
	("no-merge-exidx-entries"): New option.
	* ld.texinfo (merge-exidx-entries): Document this option.

2010-04-15  Andrew Haley  <aph@@redhat.com>

	* bfd-in.h (elf32_arm_fix_exidx_coverage): Add new flag:
	merge_exidx_entries.
	* bfd-in2.h: Likewise.
	* elf32-arm.c (elf32_arm_fix_exidx_coverage): Likewise.  Use it to
	control merging of exidx entries.

2010-04-15  Andrew Haley  <aph@@redhat.com>

	* options.h (merge_exidx_entries): New option.
	* arm.cc (class Arm_exidx_fixup): Add new arg, merge_exidx_entries.
	(class Arm_exidx_fixup::merge_exidx_entries_): New member.
	(Output_section::fix_exidx_coverage): Add new arg, merge_exidx_entries.
	(Target_arm::merge_exidx_entries): New function.
	(process_exidx_entry): Don't merge if merge_exidx_entries_ is false.
	(Arm_output_section::fix_exidx_coverage): Pass merge_exidx_entries
	to Arm_exidx_fixup constructor.
	Add new arg, merge_exidx_entries.
	(Target_arm::fix_exidx_coverage): pass merge_exidx_entries to
	Arm_output_section::fix_exidx_coverage.
@
text
@d57 1
a57 1
Copyright @@copyright{} 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000,
d95 3
a97 2
Copyright @@copyright{} 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001,
2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.
@


1.258
log
@2010-04-05  Kai Tietz  <kai.tietz@@onevision.com>

	* emultempl/pep.em (U): Macro modified.
	(U_SIZE): New helper macro.
	(GET_INIT_SYMBOL_NAME): Likewise.
	(enum options): Add OPTION_NO_LEADING_UNDERSCORE
	and OPTION_LEADING_UNDERSCORE enumerator-values.
	(gld${EMULATION_NAME}_add_options): Add --(no-)leading-underscore
	option.
	(definfo): Add new member is_c_symbol.
	(D): Add to macro underscore mode parameter.
	(init): Add definition for is_c_symbol.
	(gld_${EMULATION_NAME}_list_options): Display new options.
	(set_pep_name): Adjust underscoring dependent fixed
	symbol handling.
	(gld_${EMULATION_NAME}_set_symbols): Likewise.
	(saw_option): Likewise.
	(gld_${EMULATION_NAME}_unrecognized_file): Likewise.
	(set_entry_point): Initial initial_symbol_char dependent to
	target's default and new option flag pep_leading_underscore.
	* emultempl/pe.em (U): Macro modified.
	(U_SIZE): New helper macro.
	(GET_INIT_SYMBOL_NAME): Likewise.
	(OPTION_LEADING_UNDERSCORE): Add new option define.
	(OPTION_NO_LEADING_UNDERSCORE): Likewise.
	(gld${EMULATION_NAME}_add_options): Add --(no-)leading-underscore
	option.
	(definfo): Add new member is_c_symbol.
	(D): Add to macro underscore mode parameter.
	(init): Add definition for is_c_symbol.
	(gld_${EMULATION_NAME}_list_options): Display new options.
	(set_pep_name): Adjust underscoring dependent fixed
	symbol handling.
	(gld_${EMULATION_NAME}_set_symbols): Likewise.
	(saw_option): Likewise.
	(gld_${EMULATION_NAME}_unrecognized_file): Likewise.
	(set_entry_point): Initial initial_symbol_char dependent to
	target's default and new option flag pep_leading_underscore.
	* pe-dll.c (pe_leading_underscore): New flag variable.
	(pe_detail_list): Remove const to allow modify of
	member underscore.
	(pe_dll_id_target): Initialize pe_details' underscore variable
	dependent to target's default and flag pe_leading_underscore.
	* pe-dll.h (pe_leading_underscore): Add extern declaration of
	option flag.
	* pep-dll.c (pe_leading_underscore): Add alias define for
	pep_leading_underscore.
	* pep-dll.h (pep_leading_underscore) Add extern declaration of
	option flag.
	* ld.texinfo: Add documentation for --(no-)leading-underscore
	option.
@
text
@d5942 4
@


1.257
log
@Fix a typo in ld.texinfo.

2010-02-27  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/11330
	* ld.texinfo: Replace explicitely with explicitly.
@
text
@d2221 8
@


1.256
log
@	* ld.texinfo: Make it clear that --nmagic disables linking
	against shared libraries.
@
text
@d1387 1
a1387 1
@@samp{-r}).  In this case the root of symbols kept must be explicitely 
@


1.255
log
@        PR ld/10956
        * ld.h (struct args_type): Rename 'relax' field to
        'disable_target_specific_optimizations' and turn it into a
        tri-state variable.
        (RELAXATION_DISABLED_BY_DEFAULT): New macro.
        (RELAXATION_DISABLED_BY_USER): New macro.
        (RELAXATION_ENABLED): New macro.
        (DISABLE_RELAXATION): New macro.
        (ENABLE_RELAXATION): New macro.
        * lexsup (enum option_values): Add OPTION_NO_RELAX.
        (struct ld_options): Add --no-relax.
        (parse_args): Handle OPTION_NO_RELAX.  Use DISABLE_RELAXATION and
        ENABLE_RELAXATION macros.
        * ldlang.c (lang_relax_sections): Use RELAXATION_ENABLED macro.
        (lang_process): Likewise.
        * ldmain.c (main): Initialise
        disable_target_specific_optimizations field.
        (multiple_definition): Use RELAXATION_ENABLED macro.
        * ld.texinfo: Document new command line option.
        * emultempl/alphaelf.em: Remove --no-relax option.
        (before_allocation): Test RELAXATION_DISABLED_BY_USER macro.
        Use ENABLE_RELAXATION macro.
        * emultempl/avrelf.em: (after_allocation): Test RELAXATION_ENABLED
        macro.
        * emultempl/cr16elf.em: Remove --no-relax option.
        (before_allocation): Test RELAXATION_DISABLED_BY_USER macro.
        Use ENABLE_RELAXATION macro.
        * emultempl/crxelf.em: Remove --no-relax option.
        (before_allocation): Test RELAXATION_DISABLED_BY_USER macro.
        Use ENABLE_RELAXATION macro.
        * emultempl/mmix-elfnmmo.em: (before_allocation): Use
        ENABLE_RELAXATION macro.
        * emultempl/needrelax.em: (before_allocation): Use
        ENABLE_RELAXATION macro.
        * emultempl/ppc32elf.em: (before_allocation): Test
        RELAXATION_DISABLED_BY_DEFAULT macro. Use
        ENABLE_RELAXATION macro.
        * emultempl/sh64elf.em: (before_allocation): Test
        RELAXATION_ENABLED macro. Use DISABLE_RELAXATION macro.
        * emultempl/xtensaelf.em: Remove --no-relax option.
        (before_allocation): Test RELAXATION_ENABLED macro.
        Use ENABLE_RELAXATION macro.
@
text
@d783 3
a785 2
Turn off page alignment of sections, and mark the output as
@@code{NMAGIC} if possible.
@


1.254
log
@        PR ld/10864
        * ld.texinfo (Entry Point): Mention that the default entry symbol
        is not 'start' on some targets.
@
text
@d1566 1
d1568 1
d1589 5
a1593 4
On some platforms, the @@samp{--relax} option performs global
optimizations that become possible when the linker resolves addressing
in the program, such as relaxing address modes and synthesizing new
instructions in the output object file.
d1598 2
a1599 2
This is known to be
the case for the Matsushita MN10200 and MN10300 family of processors.
d1607 3
a7154 6
@@kindex --no-relax
@@item --no-relax
Since the Xtensa version of @@code{ld} enables the @@option{--relax} option
by default, the @@option{--no-relax} option is provided to disable
relaxation.

@


1.253
log
@        * lexsup.c: Rename --add-needed to --copy-dt-needed-entries.
        * ldlang.h (struct lang_input_statement_struct): Rename add_needed
        to add_DT_NEEDED_for_dynamic.  Rename as_needed to
        add_DT_NEEDED_for_regular.
        * ldlang.c: Likewise.
        * ldlang.h: Likewise.
        * ldlang.c: Use the new variable names.
        * ldgram.y: Likewise.
        * emultempl/elf32.em: Likewise.
        * ld.texinfo: Document the renamed option.  Also mention its
        affect on the resolution of dynamic symbols.
        * NEWS: Mention the changed option name.
@
text
@d2924 3
a2926 1
the value of the symbol @@code{start}, if defined;
@


1.252
log
@2009-10-23  Kai Tietz  <kai.tietz@@onevision.com>

	* deffile.h (def_file_export): New member its_name.
	(def_file_import): Likewise.
	(def_file_add_export): Add argument its_name.
	(def_file_add_import): Likewise.
	* deffilep.y (def_exports): Add argument its_name.
	(def_import): Likewise.
	(EQUAL): Add new token for '=='.
	(opt_equalequal_name): New rule.
	(expline): Add rule opt_equalequal_name.
	(impline): Likewise.
	(def_file_free): Free for exports and imports
	the optional member its_name.
	(def_lex): Add scan of '==' as EQUAL.
	* pe-dll.c (pe_export_sort): Sort for its_name too.
	(process_def_file_and_drectve): Adjust calls to
	def_file_add_export.
	(generate_edata): Take its_name in account.
	(make_one): Likewise.
	(pe_process_import_defs): Likewise.
	(pe_dll_generate_def_file): Add print of new '==' option.
	* ld.texinfo: Extend documentation about .def file syntax.
	* NEWS: Mention new feature.
@
text
@d1135 1
a1135 1
on the command line after the @@option{--as-needed} option.  Normally,
d1138 5
a1142 5
needed.  @@option{--as-needed} causes a DT_NEEDED tag to only be emitted
for a library that satisfies a symbol reference from regular objects
which is undefined at the point that the library was linked, or, if
the library is not found in the DT_NEEDED lists of other libraries
linked up to that point, a reference from another dynamic library.
d1149 4
a1152 7
This option affects the treatment of dynamic libraries from ELF
DT_NEEDED tags in dynamic libraries mentioned on the command line after
the @@option{--no-add-needed} option.  Normally, the linker will add
a DT_NEEDED tag for each dynamic library from DT_NEEDED tags.
@@option{--no-add-needed} causes DT_NEEDED tags will never be emitted
for those libraries from DT_NEEDED tags. @@option{--add-needed} restores
the default behaviour.
d1253 23
@


1.251
log
@        * emultempl/pe.em (OPTION_EXCLUDE_ALL_SYMBOLS): New macro.
        (gld${EMULATION_NAME}_add_options): Add new --exclude-all-symbols option
        to exclude all symbols from automatic export.
        (gld_${EMULATION_NAME}_list_options): Describe it.
        (gld${EMULATION_NAME}_handle_option): Handle it.
        * emultempl/pep.em: Likewise to all the above.
        * pe-dll.c (pe_dll_exclude_all_symbols): New variable.
        (process_def_file_and_drectve): Use it.
        * pe-dll.h (pe_dll_exclude_all_symbols): Declare.
        * pep-dll.c (pep_dll_exclude_all_symbols): Define pep_ alias.
        * pep-dll.h (pe_dll_exclude_all_symbols): Declare.
        * NEWS: Mention the new feature.
        * ld.texinfo: Document the new command line switch.
@
text
@d6675 2
d6679 1
a6679 1
This example defines a DLL with a non-default base address and five
d6684 4
a6687 1
@@code{var1} is declared to be a data object.
d6712 1
a6712 1
  [ @@@@ <integer> ] [NONAME] [DATA] [CONSTANT] [PRIVATE] ) *
d6720 2
a6721 1
@@samp{<integer>} alias.
@


1.250
log
@	PR ld/10744
	* ldlang.c (lang_new_phdr): Allow FILEHDR/PHDRS on more than the
	first PT_LOAD header.
	* ld.texinfo: Update.
@
text
@d2227 5
@


1.249
log
@	ld/
	* ldlang.c (lang_new_phdr): Check PHDRS and FILEHDR in loadable
	segments do not appear after a different loadable segment.
	* ld.texinfo (PHDRS): Document order of processing segments.
	Document where PHDRS and FILEHDR may appear.

	ld/testsuite/
	* ld-scripts/phdrs3.d: New.
	* ld-scripts/phdrs3.t: New.
	* ld-scripts/phdrs3.exp: New.
@
text
@d4743 2
a4744 1
segment (@@code{PT_LOAD}), it must be the first loadable segment.
@


1.248
log
@bfd/
	* bfd-in.h (bfd_elf_size_dynamic_sections): Add audit and depaudit
	arguments.
	* elflink.c (bfd_elf_size_dynamic_sections): Generate DT_AUDIT,
	DT_DEPAUDIT from audit/depaudit arguments.
	(elf_finalize_dynstr): Finalize DT_AUDIT and DT_DEPAUDIT strtab entries.
	(elf_link_add_object_symbols): Set dt_audit target data when finding a
	DT_AUDIT.
	* bfd-in2.h: Regenerate.
	* bfd-elf.h: Add dt_audit to elf_obj_tdata, and elf_dt_audit macro.
ld/
	* emultempl/elf32.em (gld${EMULATION_NAME}_add_options): Add --audit,
	--depaudit, and -P options.
	(gld${EULATION_NAME}_handle_options): Ditto.
	(gld${EULATION_NAME}_list_options): Ditto.
	(gld${EMULATION_NAME}_append_to_separated_string): New function for
	handling rpath-like colon separated strings.
	(gld${EMULATION_NAME}_before_allocation): Pass the audit and depaudit
	libs to bfd.  Propagate DT_AUDIT from needed libs to depaudit.
	* ld.texinfo: Document new options.
ld/testsuite/
	* ld-elf/audit.exp: New.
	* ld-elf/audit.rd: New.
	* ld-elf/depaudit.rd: New.
	* ld-elf/depaudit2.rd: New.
@
text
@d4713 2
a4714 1
must have a distinct name.
d4738 1
a4738 1
You may use the @@code{FILEHDR} and @@code{PHDRS} keywords appear after
d4742 2
a4743 1
include the ELF program headers themselves.
@


1.247
log
@        * ld.texinfo: Fix typo.
@
text
@d367 11
d465 11
@


1.246
log
@	bfd/
	* elf32-ppc.c (ppc_elf_relax_section): Work with a partial
	link.
	* bout.c (b_out_bfd_relax_section): Reject relocatable links.
	* elf32-m10300.c (mn10300_elf_relax_section): Likewise.
	* elf32-avr.c (elf32_avr_relax_section): Likewise.
	* elf32-frv.c (elf32_avr_relax_section): Likewise.
	* elf32-xtensa.c (elf_xtensa_relax_section): Likewise.
	* elf64-mmix.c (mmix_elf_relax_section): Likewise.
	* elfxx-ia64.c (elfNN_ia64_relax_section): Likewise.
	* elfxx-sparc.c (_bfd_sparc_elf_relax_section): Likewise.
	* reloc.c (bfd_generic_relax_section): Likewise.
	* reloc16.c (bfd_coff_reloc16_relax_section): Likewise.
	* vms.c (vms_bfd_relax_section): Likewise.

	ld/
	* ldmain.c (main): Don't reject --relax -r.
	* ld.texinfo (PowerPC ELF32): Document behaviour of relaxing
	partial links.

	ld/testsuite/
	* ld-powerpc/vxworks-relax-2.s: New.
	* ld-powerpc/vxworks-relax-2.rd: New.
	* ld-powerpc/powerpc.exp: Add it.
@
text
@d639 1
a639 1
will search the library path for a file called @@var{filename}, otherise it
@


1.245
log
@    ld/
    * emultempl/armelf.em (fix_cortex_a8): New.
    (arm_elf_before_allocation): Call bfd_elf32_arm_set_cortex_a8_fix.
    (arm_elf_create_output_section_statements): Add fix_cortex_a8 to
    bfd_elf32_arm_set_target_relocs.
    (OPTION_FIX_CORTEX_A8, OPTION_NO_FIX_CORTEX_A8): New.
    (PARSE_AND_LIST_LONGOPTS): Add [no-]fix-cortex-a8 options.
    (PARSE_AND_LIST_OPTIONS): Add [no-]fix-cortex-a8 options.
    (PARSE_AND_LIST_ARGS_CASES): Handle OPTION_[NO_]FIX_CORTEX_A8.
    * ld.texinfo (--[no-]fix-cortex-a8): Briefly document new options.

    bfd/
    * elf32-arm.c (THUMB16_BCOND_INSN, THUMB32_INSN, THUMB32_B_INSN):
    New macros.
    (elf32_arm_stub_a8_veneer_b_cond, elf32_arm_stub_a8_veneer_b)
    (elf32_arm_stub_a8_veneer_blx): New stub sequences.
    (elf32_arm_stub_type): Add arm_stub_a8_veneer_b_cond,
    arm_stub_a8_veneer_b and arm_stub_a8_veneer_blx.
    (elf32_arm_stub_hash_entry): Add target_addend, orig_insn fields.
    (a8_erratum_fix, a8_erratum_reloc): New structs.
    (elf32_arm_link_hash_table): Add a8_erratum_fixes,
    num_a8_erratum_fixes, fix_cortex_a8 fields.
    (elf32_arm_link_hash_table_create): Zero fix_cortex_a8.
    (elf32_arm_add_stub): Split into two parts, creating...
    (elf32_arm_create_or_find_stub_sec): New function.
    (elf32_arm_final_link_relocate): Add forward declaration.
    (arm_build_one_stub): Add support for THUMB32_TYPE, Thumb-2
    relocations, multiple relocations per stub.
    (find_stub_size_and_template): New (using parts of
    arm_size_one_stub).
    (arm_size_one_stub): Use find_stub_size_and_template.
    (a8_reloc_compare): New.
    (find_thumb_glue): Add forward declaration.
    (cortex_a8_erratum_scan): New.
    (elf32_arm_size_stubs): Add Cortex-A8 erratum workaround support.
    (bfd_elf32_arm_set_cortex_a8_fix): New.
    (bfd_elf32_arm_set_target_relocs): Add fix_cortex_a8 argument.
    (arm_map_one_stub): Add THUMB32_TYPE support.
    (a8_branch_to_stub_data): New.
    (make_branch_to_a8_stub): New.
    (elf32_arm_write_section): Add Cortex-A8 erratum workaround support.
    * bfd-in.h (bfd_elf32_arm_set_cortex_a8_fix): New.
    (bfd_elf32_arm_set_target_relocs): Add argument for controlling
    Cortex-A8 erratum workaround.
    * bfd-in2.h: Regenerate.

    ld/testsuite/
    * ld-arm/cortex-a8-arm-target.s: New.
    * ld-arm/cortex-a8-thumb-target.s: New.
    * ld-arm/cortex-a8-fix-b-rel.s: New.
    * ld-arm/cortex-a8-fix-b-rel-arm.d: New.
    * ld-arm/cortex-a8-fix-b-rel-thumb.d: New.
    * ld-arm/cortex-a8-fix-b.s: New.
    * ld-arm/cortex-a8-fix-b.d: New.
    * ld-arm/cortex-a8-fix-bl-rel.s: New.
    * ld-arm/cortex-a8-fix-bl-rel-arm.d: New.
    * ld-arm/cortex-a8-fix-bl-rel-thumb.d: New.
    * ld-arm/cortex-a8-fix-bl.s: New.
    * ld-arm/cortex-a8-fix-bl.d: New.
    * ld-arm/cortex-a8-fix-bcc-rel.s: New.
    * ld-arm/cortex-a8-fix-bcc-rel-thumb.d: New.
    * ld-arm/cortex-a8-fix-bcc.s: New.
    * ld-arm/cortex-a8-fix-bcc.d: New.
    * ld-arm/cortex-a8-fix-blx-rel.s: New.
    * ld-arm/cortex-a8-fix-blx-rel-arm.d: New.
    * ld-arm/cortex-a8-fix-blx-rel-thumb.d: New.
    * ld-arm/cortex-a8-fix-blx.s: New.
    * ld-arm/cortex-a8-fix-blx.d: New.
    * ld-arm/arm-elf.exp: Add new tests.
@
text
@d6287 4
a6290 1
section exceeds 33M in size.
@


1.244
log
@==> bfd/ChangeLog <==
2009-05-19  Dave Korn  <dave.korn.cygwin@@gmail.com>

	* cofflink.c (process_embedded_commands):  Ignore "-aligncomm".

==> gas/ChangeLog <==
2009-05-19  Dave Korn  <dave.korn.cygwin@@gmail.com>

	* NEWS:  Mention new feature.
	* config/obj-coff.c (obj_coff_common_parse):  New function.
	(obj_coff_comm):  Likewise.
	(coff_pseudo_table):  Override default ".comm" definition on PE.
	* doc/as.texinfo:  Document new feature.

==> gas/testsuite/ChangeLog <==
2009-05-19  Dave Korn  <dave.korn.cygwin@@gmail.com>

	* gas/pe/:  New directory for PE format-specific tests.
	* gas/pe/aligncomm-a.d:  New test pattern file.
	* gas/pe/aligncomm-a.s:  New test source file.
	* gas/pe/aligncomm-b.d:  New test pattern file.
	* gas/pe/aligncomm-b.s:  New test source file.
	* gas/pe/aligncomm-c.d:  New test pattern file.
	* gas/pe/aligncomm-c.s:  New test source file.
	* gas/pe/aligncomm-d.d:  New test pattern file.
	* gas/pe/aligncomm-d.s:  New test source file.
	* gas/pe/pe.exp:  New test control script.
	* lib/gas-defs.exp (is_pecoff_format):  New function.

==> ld/ChangeLog <==
2009-05-19  Dave Korn  <dave.korn.cygwin@@gmail.com>

	* NEWS:  Mention new feature.
	* deffile.h (def_file_aligncomm):  Add new struct definition.
	(def_file):  Add new def_file_aligncomm member.
	* deffilep.y (%token):  Add new ALIGNCOMM token.
	(command):  Add production rule for ALIGNCOMM.
	(def_file_free):  Free any chained def_file_aligncomm structs.
	(diropts[]):  Add entry for '-aligncomm' .drectve command.
	(def_aligncomm):  New grammar function.
	* ld.texinfo:  Document new feature.
	* pe-dll.c (process_def_file):  Rename from this ...
	(process_def_file_and_drectve):  ... to this, updating all callers,
	and process any aligncomms chained to the def file after scanning
	all .drectve sections.
	(generate_edata):  Updated to match.
	(pe_dll_build_sections):  Likewise.

==> ld/testsuite/ChangeLog <==
2009-05-19  Dave Korn  <dave.korn.cygwin@@gmail.com>

	* ld-pe/aligncomm-1.c:  New test source file.
	* ld-pe/aligncomm-2.c:  Likewise.
	* ld-pe/aligncomm-3.c:  Likewise.
	* ld-pe/aligncomm-4.c:  Likewise.
	* ld-pe/aligncomm.d:  New test pattern file.

	* ld-pe/direct.exp:  Deleted, and content moved into ...
	* ld-pe/pe-run.exp:  ... New common file for all PE run tests.

	* ld-pe/vers-script.exp:  Deleted, and content merged into ...
	* ld-pe/pe-compile.exp:  ... New common file for PE tests needing
	a compiler, adding aligned common tests.

	* ld-pe/pe.exp:  Update header comment.
@
text
@d5868 7
@


1.243
log
@bfd/ChangeLog

	* elflink.c (find_version_for_sym):  Remove from here, ...
	* linker.c (bfd_find_version_for_sym):  ... rename, replace
	here, make public and update all callers.
	* bfd-in2.h:  Regenerate.

ld/ChangeLog

	* NEWS:  Mention new feature.
	* ld.texinfo (--version-script):  Document extent of PE support.
	(WIN32):  Mention --version-script.  Extend auto-export description.
	* pe-dll.c (process_def_file):  Use version script info to filter
	symbols from auto-export.
	* testsuite/ld-pe/vers-script-1.d:  New file.
	* testsuite/ld-pe/vers-script-2.d:  New file.
	* testsuite/ld-pe/vers-script-3.d:  New file.
	* testsuite/ld-pe/vers-script-4.d:  New file.
	* testsuite/ld-pe/vers-script-1.ver:  New file.
	* testsuite/ld-pe/vers-script-2.ver:  New file.
	* testsuite/ld-pe/vers-script-3.ver:  New file.
	* testsuite/ld-pe/vers-script-4.ver:  New file.
	* testsuite/ld-pe/vers-script-dll.c:  New file.
	* testsuite/ld-pe/vers-script.exp:  New test script.
@
text
@d6997 11
@


1.242
log
@[ld/ChangeLog]
2009-04-29  Chris Demetriou  <cgd@@google.com>

        * lexsup.c (option_values): Add OPTION_NO_EXPORT_DYNAMIC.
        (ld_options): Likewise.
        (parse_args): Likewise.
        * ld.texinfo: Document --no-export-dynamic.
        * NEWS: Mention --no-export-dynamic.

[ld/testsuite/ChangeLog]
2009-04-29  Chris Demetriou  <cgd@@google.com>

        * ld-elfvers/vers.exp (vers4b): New test to verify that
        --no-export-dynamic undoes --export-dynamic.
@
text
@d1819 5
a1823 2
is only meaningful on ELF platforms which support shared libraries.
@@xref{VERSION}.
d6588 1
d6591 10
a6600 1
If, however, @@samp{--export-all-symbols} is not given explicitly on the
@


1.241
log
@        PR 9824
        * ld.texinfo (Output Section Constraint): New node.  Documents the
        ONLY_IF_RO and ONLY_IF_RW constraints.
        (Symbolic Constants): New node.  Documents the CONSTANT operator.
@
text
@d494 1
d497 10
a506 7
When creating a dynamically linked executable, add all symbols to the
dynamic symbol table.  The dynamic symbol table is the set of symbols
which are visible from dynamic objects at run time.

If you do not use this option, the dynamic symbol table will normally
contain only those symbols which are referenced by some dynamic object
mentioned in the link.
@


1.240
log
@bfd/

2009-04-08  H.J. Lu  <hongjiu.lu@@intel.com>

	* elflink.c (elf_link_add_object_symbols): Warn alternate ELF
	machine code.

include/

2009-04-08  H.J. Lu  <hongjiu.lu@@intel.com>

	* bfdlink.h (bfd_link_info): Add warn_alternate_em.

ld/

2009-04-08  H.J. Lu  <hongjiu.lu@@intel.com>

	* lexsup.c (option_values): Add OPTION_WARN_ALTERNATE_EM.
	(ld_options): Likewise.
	(parse_args): Likewise.

	* ld.texinfo: Document --warn-alternate-em.

	* NEWS: Mention --warn-alternate-em.
@
text
@d3559 4
a3562 1
  [AT(@@var{lma})] [ALIGN(@@var{section_align})] [SUBALIGN(@@var{subsection_align})]
d4164 1
d4168 4
a4171 1
  [AT(@@var{lma})] [ALIGN(@@var{section_align})] [SUBALIGN(@@var{subsection_align})]
d4179 1
d4189 1
d4323 10
d4992 1
d5045 26
@


1.239
log
@        * ld.texinfo (Output Section Address): Note that specifying an
        address for an output section will only change the location
        counter if the output section is used.
@
text
@d1944 4
@


1.238
log
@	* ld.texinfo (-L): Mention that -L options do not affect how ld
	searches for a linker script unless -T option is specified.
	* ldfile.c (ldfile_find_command_file): Append the path obtained
	from the program name to the search path instead of
	prepending. Add a new parameter "default_only". Restrict the
	search to the default script location if the new parameter is
	true.
	(ldfile_open_command_file_1): New.
	(ldfile_open_command_file): Call ldfile_open_command_file_1.
	(ldfile_open_default_command_file): New.
@
text
@d3646 2
a3647 1
location counter.
@


1.237
log
@ld/ChangeLog

	PR ld/6744
	* ld.texinfo (--export-dynamic):  Mention --export-all-symbols.
	* emultempl/pe.em (gld_${EMULATION_NAME}_after_parse):  Issue
	warning if --export-dynamic was passed on command-line.
	* emultempl/pep.em (gld_${EMULATION_NAME}_after_parse):  Likewise.

ld/testsuite/ChangeLog

	PR ld/6744
	* ld-pe/export_dynamic_warning.d:  New test control file.
	* ld-pe/export_dynamic_warning.s:  New test source file.
	* ld-pe/pe.exp:  Also run export_dynamic_warning dump test.
@
text
@d676 3
a678 1
order in which the options appear.
@


1.236
log
@include/ChangeLog
2009-03-12  Dave Korn  <dave.korn.cygwin@@gmail.com>

	* coff/internal.h (struct internal_extra_pe_aouthdr):  Correct type
	of DllCharacteristics flags field to unsigned.
	* coff/pe.h (IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE,
	IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE,
	IMAGE_DLL_CHARACTERISTICS_NX_COMPAT,
	IMAGE_DLLCHARACTERISTICS_NO_ISOLATION,
	IMAGE_DLLCHARACTERISTICS_NO_SEH,
	IMAGE_DLLCHARACTERISTICS_NO_BIND,
	IMAGE_DLLCHARACTERISTICS_WDM_DRIVER,
	IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE):  New macros to
	define flag bit values for DllCharacteristics field of PEAOUTHDR,
	PEPAOUTHDR.

ld/ChangeLog
2009-03-12  Dave Korn  <dave.korn.cygwin@@gmail.com>
            Danny Smith  <dannysmith@@users.sourceforge.net>

	* emultmpl/pe.em (pe_dll_characteristics): New variable.
	(OPTION_DYNAMIC_BASE, OPTION_FORCE_INTEGRITY, OPTION_NX_COMPAT,
	OPTION_NO_ISOLATION. OPTION_NO_SEH, OPTION_NO_BIND,
	OPTION_WDM_DRIVER, OPTION_TERMINAL_SERVER_AWARE):
	New macros for options to set DllCharacteristics flag bits.
	(gld${EMULATION_NAME}_add_options): Add dynamicbase, forceinteg,
	nxcompat, no-isolation, no-seh, no-bind, wdmdriver, tsaware options.
	(init): Add DllCharacteristics field.
	(gld_${EMULATION_NAME}_list_options): List new options.
	(gld${EMULATION_NAME}_handle_option): Handle new options.
	* emultmpl/pep.em (pe_dll_characteristics): New variable.
	(OPTION_DYNAMIC_BASE, OPTION_FORCE_INTEGRITY, OPTION_NX_COMPAT,
	OPTION_NO_ISOLATION. OPTION_NO_SEH, OPTION_NO_BIND,
	OPTION_WDM_DRIVER, OPTION_TERMINAL_SERVER_AWARE):
	New macros for options to set DllCharacteristics flags.
	(gld${EMULATION_NAME}_add_options): Add dynamicbase, forceinteg,
	nxcompat,no-isolation, no-seh, no-bind, wdmdriver, tsaware options.
	(init): Add DllCharacteristics field.
	(gld_${EMULATION_NAME}_list_options): List new options.
	(gld${EMULATION_NAME}_handle_option): Handle new options.
	* ldtexinfo : Document dynamicbase, forceinteg,	nxcompat,
	no-isolation, no-seh, no-bind, wdmdriver, tsaware options.
@
text
@d513 4
@


1.235
log
@	* emultempl/pe.em (debug_section_p):  New bfd_map_over_sections hook.
	(gld_${EMULATION_NAME}_after_open):  Use it to iterate all sections
	of all input BFDs, looking for debug info.  Enable long section names
	if any found.
	* emultempl/pe.em (debug_section_p):  Likewise.
	(gld_${EMULATION_NAME}_after_open):  Likewise.
	* NEWS:  Retrospectively adjust news announcement.
	* ld.texinfo:  Update documentation to mention new behaviour.
@
text
@d2491 40
@


1.234
log
@        * ldgram.y: Add support for REGION_ALIAS operator.
        * ldlang.c: Likewise.
        * ldlang.h: Likewise.
        * ldlex.l: Likewise.
        * NEWS: Mention the new feature.
        * ld.texinfo: Document the new feature.
        * ld-scripts/regions-alias-1.t: New file.
        * ld-scripts/regions-alias-2.t: New file.
        * ld-scripts/regions-alias-3.t: New file.
        * ld-scripts/regions-alias-4.t: New file.
        * ld-scripts/script.exp: Run region alias tests.
@
text
@d2127 7
a2133 1
with non-GNU PE-aware tools, such as file viewers and dumpers.
@


1.233
log
@2009-02-24  Joseph Myers  <joseph@@codesourcery.com>

	bfd/
	* elf32-arm.c (PREV_SEC): Update comment.
	(group_sections): Rename argument to stubs_always_after_branch.
	Reverse the list and place stubs at the end of input sections.
	Undefine NEXT_SEC.
	(elf32_arm_size_stubs): Update to use stubs_always_after_branch.

	ld/
	* ld.texinfo (ARM): Document changed meaning of --stub-group-size.
	* emultempl/armelf.em (hook_in_stub): Insert after the input section.
	(elf32_arm_add_stub_section): Update comment.
	(PARSE_AND_LIST_OPTIONS): Update help for --stub-group-size.

2009-02-24  Daniel Jacobowitz  <dan@@codesourcery.com>

	ld/testsuite/
	* ld-arm/arm-elf.exp (armeabitests): Update duplicate test names.
	Use normal output files for big-endian.
	* ld-arm/farcall-arm-arm-be.d, ld-arm/farcall-thumb-arm-be.d: Delete.
	* ld-arm/farcall-arm-arm-be8.d, ld-arm/farcall-arm-arm-pic-veneer.d,
	ld-arm/farcall-arm-arm.d, ld-arm/farcall-arm-thumb-blx-pic-veneer.d,
	ld-arm/farcall-arm-thumb-blx.d, ld-arm/farcall-arm-thumb-pic-veneer.d,
	ld-arm/farcall-arm-thumb.d, ld-arm/farcall-group-size2.d,
	ld-arm/farcall-group.d, ld-arm/farcall-mix.d, ld-arm/farcall-mix2.d,
	ld-arm/farcall-thumb-arm-be8.d,
	ld-arm/farcall-thumb-arm-blx-pic-veneer.d,
	ld-arm/farcall-thumb-arm-blx.d, ld-arm/farcall-thumb-arm-short.d,
	ld-arm/farcall-thumb-arm.d,
	ld-arm/farcall-thumb-thumb-blx-pic-veneer.d,
	ld-arm/farcall-thumb-thumb-blx.d, ld-arm/farcall-thumb-thumb-m.d,
	ld-arm/farcall-thumb-thumb.d, ld-arm/thumb2-bl-as-thumb1-bad.d,
	ld-arm/thumb2-bl-bad.d: Update for moved stubs.
@
text
@d2788 1
d2973 156
d4470 3
a4472 1
must have a distinct name.
@


1.232
log
@2009-02-24  Sandra Loosemore  <sandra@@codesourcery.com>

	ld/
	* ld.texinfo (Options): Correct typos in example.  Recommend
	using joined forms of syntax for passing options with arguments
	from a driver.
	(-a): Use consistent syntax for documenting option arguments.
	Clean up indexing and markup.
	(-A/--architecture): Likewise.
	(-f/--auxiliary): Likewise.
	(-F/--filter): Likewise.
	(-fini): Likewise.
	(-G/--gpsize): Likewise.
	(-h/-soname):Likewise.
	(-init): Likewise.
	(-l/--library): Likewise.
	(-L/--library-path): Likewise.
	(-m): Likewise.
	(--defsym): Likewise.
	(-I/--dynamic-linker): Likewise.
	(-Map): Likewise.
	(--oformat): Likewise.
	(--retain-symbols-file): Likewise.
	(-rpath): Likewise.
	(-rpath-link): Likewise.
	(--sort-common): Likewise.
	(--sort-section): Likewise.
	(--split-by-file): Likewise.
	(--split-by-reloc): Likewise.
	(--sysroot): Likewise.
	(--section-start): Likewise.
	(-Tbss, -Tdata, -Ttext): Likewise.
	(-Ttext-segment): Likewise.
	(--version-script): Likewise.
	(--wrap): Likewise.
@
text
@d5829 1
a5829 1
placed.  If it is negative then all stubs are placed before the first
@


1.231
log
@bfd/ChangeLog

	* coff-alpha.c (alpha_ecoff_backend_data):  Initialise fields which
	control long section name handling with ECOFF_NO_LONG_SECTION_NAMES.
	* coff-mips.c (mips_ecoff_backend_data):  Likewise.
	* coff-rs6000.c (bfd_xcoff_backend_data):  Initialise fields which
	control long section name handling with XCOFF_NO_LONG_SECTION_NAMES.
	(bfd_pmac_xcoff_backend_data):  Likewise.
	* coff64-rs6000.c (bfd_xcoff_backend_data):  Likewise.
	(bfd_xcoff_aix5_backend_data):  Likewise.
	(xcoff64_write_object_contents):  Delete unused long_section_names
	local variable.
	* coff-sh.c (bfd_coff_small_swap_table):  Initialise long section
	name members using COFF_DEFAULT_LONG_SECTION_NAMES and make entire
	struct non-const.
	* coffcode.h (documentation):  Update to describe long section names.
	(COFFLONGSECTIONCATHELPER):  New helper macro.
	(BLANKOR1TOODD):  Likewise.
	(COFF_ENABLE_LONG_SECTION_NAMES):  Likewise.
	(COFF_LONG_SECTION_NAMES_SETTER):  Likewise.
	(COFF_DEFAULT_LONG_SECTION_NAMES):  Likewise.
	(bfd_coff_set_long_section_names_allowed):  New function.
	(bfd_coff_set_long_section_names_disallowed):  Likewise.
	(struct bfd_coff_backend_data):  Add new backend hook function
	pointer _bfd_coff_set_long_section_names.
	(bfd_coff_set_long_section_names):  New backend hook.
	(coff_write_object_contents):  Only generate long section names if
	bfd_coff_long_section_names() indicates they are currently enabled.
	(bfd_coff_std_swap_table):  Make non-const, and initialise long
	section name fields using COFF_DEFAULT_LONG_SECTION_NAMES.
	(ticoff0_swap_table):  Likewise to both.
	(ticoff1_swap_table):  Again, likewise to both.
	* coffgen.c (make_a_section_from_file):  Allow long section names
	as inputs even if not currently allowed for outputs.
	* ecoff.c (_bfd_ecoff_no_long_sections):  New function.
	* efi-app-ia32.c (COFF_LONG_SECTION_NAMES):  Define to 0, not blank.
	* efi-app-ia64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-app-x86_64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-bsdrv-ia32.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-bsdrv-ia64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-bsdrv-x86_64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-rtdrv-ia32.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-rtdrv-ia64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-rtdrv-x86_64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-arm.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-i386.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-mcore.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-mips.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-ppc.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-sh.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-x86_64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* libcoff-in.h:  Update copyright year to cause updated copyright
	year in generated libcoff.h, and fix typo.
	* libcoff.h:  Regenerated.
	* libecoff.h (ECOFF_NO_LONG_SECTION_NAMES):  New macro.
	(_bfd_ecoff_no_long_sections):  Add prototype.
	* libxcoff.h (XCOFF_NO_LONG_SECTION_NAMES):  New macro.
	* pe-mips.c (COFF_LONG_SECTION_NAMES):  Define empty if not already
	defined by an including .c file.
	* ticoff.h (ticoff0_swap_table):  Make non-const, and initialise
	long section name fields using COFF_DEFAULT_LONG_SECTION_NAMES.
	(ticoff1_swap_table):  Likewise to both.

ld/ChangeLog

	* ld.texinfo:  Update to mention long section name options.
	* NEWS:  Mention new behaviour and command-line options.
	* pe-dll.c (pe_use_coff_long_section_names):  New global variable.
	(pe_output_file_set_long_section_names):  New function.
	(pe_dll_build_sections):  Call it on output BFDs.
	(pe_exe_build_sections):  Likewise.
	(pe_dll_fill_sections):  Likewise.
	(pe_exe_fill_sections):  Likewise.
	* pe-dll.h (pe_use_coff_long_section_names):  Declare extern.
	(pe_output_file_set_long_section_names):  Add prototype.
	* pep-dll.c (pe_use_coff_long_section_names):  Define pep_ alias.
	(pe_output_file_set_long_section_names):  Likewise.
	* pep-dll.h (pep_use_coff_long_section_names):  Declare extern.
	(pep_output_file_set_long_section_names):  Add prototype.
	* pe.em (OPTION_ENABLE_LONG_SECTION_NAMES):  New getopt value macro.
	(OPTION_DISABLE_LONG_SECTION_NAMES):  Likewise.
	(gld${EMULATION_NAME}_add_options):  Add new options to xtra_long[].
	(gld_${EMULATION_NAME}_list_options):  Describe them.
	(gld${EMULATION_NAME}_handle_option):  Set or clear global
	pe_use_coff_long_section_names flag when options recognised.
	(gld_${EMULATION_NAME}_after_open):  En/disable long section names
	for main output bfd by calling pe_output_file_set_long_section_names.
	* pep.em (enum options):  Extend enum with new getopt option values.
	(gld${EMULATION_NAME}_add_options):  Add new options to xtra_long[].
	(gld_${EMULATION_NAME}_list_options):  Describe them.
	(gld${EMULATION_NAME}_handle_option):  Set or clear global
	pe_use_coff_long_section_names flag when options recognised.
	(gld_${EMULATION_NAME}_after_open):  En/disable long section names
	for main output bfd by calling pep_output_file_set_long_section_names.

ld/testsuite/ChangeLog

	* ld-pe/longsecn-1.d:  New test file.
	* ld-pe/longsecn-2.d:  Likewise.
	* ld-pe/longsecn-3.d:  Likewise.
	* ld-pe/longsecn-4.d:  Likewise.
	* ld-pe/longsecn-5.d:  Likewise.
	* ld-pe/longsecn.d:  Likewise.
	* ld-pe/longsecn.exp:  New test control script.
	* ld-pe/longsecn.s:  New test source file.
@
text
@d338 1
a338 1
  gcc -Wl,--startgroup foo.o bar.o -Wl,--endgroup
d342 10
a351 1
silently drop the linker options, resulting in a bad link.
d359 2
a360 2
@@kindex -a@@var{keyword}
@@item -a@@var{keyword}
d369 2
a370 2
@@kindex -A@@var{arch}
@@item -A@@var{architecture}
d526 4
a529 4
@@kindex -f
@@kindex --auxiliary
@@item -f
@@itemx --auxiliary @@var{name}
d548 2
a549 2
@@kindex -F
@@kindex --filter
d551 1
a551 1
@@itemx --filter @@var{name}
d578 2
a579 2
@@kindex -fini
@@item -fini @@var{name}
d589 2
a590 2
@@kindex -G
@@kindex --gpsize
d592 1
a592 1
@@item -G@@var{value}
d600 1
a600 1
@@kindex -h@@var{name}
d602 1
a602 1
@@item -h@@var{name}
d616 2
a617 2
@@kindex -init
@@item -init @@var{name}
d624 1
a624 1
@@kindex -l@@var{namespec}
d626 1
a626 1
@@item -l@@var{namespec}
d662 1
a662 1
@@kindex -L@@var{dir}
d664 1
a664 1
@@item -L@@var{searchdir}
d689 1
a689 1
@@item -m@@var{emulation}
d1256 2
a1257 2
@@kindex --defsym @@var{symbol}=@@var{exp}
@@item --defsym @@var{symbol}=@@var{expression}
d1287 3
a1289 2
@@kindex --dynamic-linker @@var{file}
@@item --dynamic-linker @@var{file}
d1360 2
a1361 2
@@kindex -Map
@@item -Map @@var{mapfile}
d1476 2
a1477 2
@@kindex --oformat
@@item --oformat @@var{output-format}
d1555 2
a1556 1
@@item --retain-symbols-file @@var{filename}
d1573 1
a1573 1
@@item -rpath @@var{dir}
d1575 1
a1575 1
@@kindex -rpath
d1601 2
a1602 2
@@kindex -rpath-link
@@item -rpath-link @@var{DIR}
a1669 1
@@item --sort-common [= ascending | descending]
d1671 3
d1681 2
a1682 2
@@kindex --sort-section name
@@item --sort-section name
d1686 2
a1687 2
@@kindex --sort-section alignment
@@item --sort-section alignment
d1692 1
a1692 1
@@item --split-by-file [@@var{size}]
d1698 1
a1698 1
@@item --split-by-reloc [@@var{count}]
d1715 1
a1715 1
@@kindex --sysroot
d1736 2
a1737 2
@@kindex --section-start @@var{sectionname}=@@var{org}
@@item --section-start @@var{sectionname}=@@var{org}
d1748 3
a1750 3
@@kindex -Tbss @@var{org}
@@kindex -Tdata @@var{org}
@@kindex -Ttext @@var{org}
d1752 4
a1755 4
@@item -Tbss @@var{org}
@@itemx -Tdata @@var{org}
@@itemx -Ttext @@var{org}
Same as --section-start, with @@code{.bss}, @@code{.data} or
d1758 2
a1759 2
@@kindex -Ttext-segment @@var{org}
@@itemx -Ttext-segment @@var{org}
d1805 1
a1805 1
@@itemx --version-script=@@var{version-scriptfile}
d1965 2
a1966 2
@@kindex --wrap
@@item --wrap @@var{symbol}
@


1.230
log
@        PR 9805
        * ld.texinfo (--allow-shlib-undefined): Correct description of
        default settings and tidy up the rest of the entry.
@
text
@d2101 16
@


1.229
log
@        PR 9797
        * ld.texinfo (Constants): Document the base-encoding suffixes
        supported in linker scripts.
@
text
@d96 1
a96 1
2002, 2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.
d1386 1
a1386 1
Allows (the default) or disallows undefined symbols in shared libraries.
d1392 22
a1413 9
The reason that @@option{--allow-shlib-undefined} is the default is that
the shared library being specified at link time may not be the same as
the one that is available at load time, so the symbols might actually be
resolvable at load time.  Plus there are some systems, (eg BeOS) where
undefined symbols in shared libraries is normal.  (The kernel patches
them at load time to select which function is most appropriate
for the current architecture.  This is used for example to dynamically
select an appropriate memset function).  Apparently it is also normal
for HPPA shared libraries to have undefined symbols.
@


1.228
log
@binutils/
	* NEWS: Mention --as-needed change.
ld/
	* ld.texinfo (--as-needed): Update.
bfd/
	* elflink.c (on_needed_list): New function.
	(elf_link_add_object_symbols): Link in --as-needed libs if they
	satisfy undefined symbols in other libs.
@
text
@d4 2
a5 1
@@c 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.
d58 1
a58 1
2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.
d4732 4
a4735 1
hexadecimal.  The linker considers other integers to be decimal.
d4754 3
a4756 1
respectively. For example, the following all refer to the same quantity:
d4761 1
d4764 3
@


1.227
log
@	* lexsup.c (parse_args): Set check_section_addresses to 1 or 0.
	* ld.h (args_type): Make check_section_addresses a char.
	ldlang.c (lang_process): Don't consider relocatable flag when
	checking for overlap.
	* ldmain.c (main): Default check_section_addresses to -1. Check it
	for relocatable links.
	* ld.texinfo (--check-sections): Update documentation.
@
text
@d1096 5
a1100 3
needed.  @@option{--as-needed} causes DT_NEEDED tags to only be emitted
for libraries that satisfy some symbol reference from regular objects
which is undefined at the point that the library was linked.
@


1.226
log
@ld/

2009-01-16  H.J. Lu  <hongjiu.lu@@intel.com>

	* lexsup.c (option_values): Add OPTION_TTEXT_SEGMENT.
	(ld_options): Add -Ttext-segment.
	(parse_args): Handle OPTION_TTEXT_SEGMENT.

	* ld.texinfo: Document -Ttext-segment.

	* NEWS: Mention -Ttext-segment.

	* scripttempl/elf.sc (TEXT_START_ADDR): Use SEGMENT_START.
	(SHLIB_TEXT_START_ADDR): Likewise.

ld/testsuite/

2009-01-16  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-elf/textaddr1.d: New.
	* ld-elf/textaddr2.d: Likewise.
@
text
@d1208 3
@


1.225
log
@2009-01-08  Kai Tietz  <kai.tietz@@onevision.com>

	* pe.em (OPTION_USE_NUL_PREFIXED_IMPORT_TABLES): New.
	(gld..._add_options): Add new option
	--use-nul-prefixed-import-tables.
	(gld..._handle_option): Likewise.
	* pep.em: Same as for pe.em.
	* ld.texinfo: Add new option documentation for
	--use-nul-prefixed-import-tables.
	* pe-dll.c (pe_use_nul_prefixed_import_tables): New.
	(make_head): Make prefix leading zero prefix element for
	idata$4 and idata$5 dependent to new flag.
	(make_import_fixup_entry): Remove idata4/5 prefix.
	* pe-dll.h (pe_use_nul_prefixed_import_tables): New.
	* pep-dll.c (pe_use_nul_prefixed_import_tables): New.
	* pep-dll.h (pep_use_nul_prefixed_import_tables): New.
	* NEWS: Add new option.
@
text
@d1726 6
@


1.224
log
@	* NEWS:  Mention new feature --exclude-modules-for-implib.
	* ld.texinfo:  Document new --exclude-modules-for-implib option.
	* pe-dll.c (exclude_list_struct):  Change type member from int to
	new enumeration exclude_type.
	(pe_dll_add_excludes):  Accept exclude_type instead of int param.
	(auto_export):  Replace magic constants by exclude_type values and
	handle new choice EXCLUDEFORIMPLIB.
	(pe_dll_generate_implib):  Accept a pointer to the link_info and
	iterate all input BFDs looking for EXCLUDEFORIMPLIB modules; re-open
	fresh BFDs for any found and link into import lib archive chain.
	* pe-dll.h (exclude_type):  Add new enumerated type to replace magic
	constants previously used for exclude_list_struct type member.
	(pe_dll_add_excludes, pe_dll_generate_implib):  Update prototypes.
	* pep-dll.h (exclude_type, pe_dll_add_excludes,
	pe_dll_generate_implib):  Likewise to all the above.
	* emultempl/pe.em (OPTION_EXCLUDE_MODULES_FOR_IMPLIB):  Define new
	getopts long option code for new --exclude-modules-for-implib option.
	(gld${EMULATION_NAME}_add_options):  Add new entry to xtra_long[].
	(gld_${EMULATION_NAME}_list_options):  List usage for it.
	(gld${EMULATION_NAME}_handle_option):  Use exclude_type enumerated
	values when calling pe_dll_add_excludes, and handle EXCLUDEFORIMPLIB.
	(gld_${EMULATION_NAME}_finish):  Pass pointer to link_info when
	calling pe_dll_generate_implib.
	* emultempl/pep.em (options):  Define new enumerated value for getopts
	long option code for new --exclude-modules-for-implib option.
	(gld${EMULATION_NAME}_add_options, gld_${EMULATION_NAME}_list_options,
	gld${EMULATION_NAME}_handle_option, gld_${EMULATION_NAME}_finish):
	Again, likewise to all the above.
@
text
@d5622 7
@


1.223
log
@include/
	PR 7047
	* bfdlink.h (struct bfd_elf_version_expr): Delete "symbol".
	Add "literal".
bfd/
	PR 7047
	* configure.in: Bump version.
	* configure: Regenerate.
	* elflink.c (_bfd_elf_link_assign_sym_version): Continue matching
	against version nodes when a global match is a wildcard.  Similarly
	continue matching on local wildcard matches, rather than only
	continuing for "*".  Have any global wildcard match override a
	local wildcard match.  Correct logic hiding unversioned symbol.
	(bfd_elf_size_dynamic_sections): Update for changes to struct
	bfd_elf_version_expr.
ld/
	PR 7047
	* emultempl/ppc64elf.em (gld${EMULATION_NAME}_new_vers_pattern): Update
	for changes to struct bfd_elf_version_expr.
	* ldlang.c (lang_vers_match, version_expr_head_hash): Likewise.
	(version_expr_head_eq, lang_finalize_version_expr_head): Likewise.
	(lang_register_vers_node): Likewise.
	(lang_new_vers_pattern): Likewise.  Ensure "literal" is set when
	no glob chars found in "pattern".
	(realsymbol): Correct backslash quote logic.
	* ld.texinfo (VERSION): Warn about global wildcards.
@
text
@d460 1
a460 1
exported. The library names may be delimited by commas or colons.  Specifying
d468 13
d6248 1
@


1.222
log
@Change documentation license to FDL v1.3
@
text
@d4564 5
a4568 1
somewhere in the version script.
@


1.221
log
@bfd:
	* bfd-in.h (bfd_elf32_arm_set_target_relocs): Add new parameter.
	* bfd-in2.h: Regenerate.
	* elf32-arm.c (struct elf_arm_obj_tdata): Add field
	no_wchar_size_warning.
	(bfd_elf32_arm_set_target_relocs): Add new parameter
	no_wchar_warn.
	(elf32_arm_merge_eabi_attributes): Give a warning, not an error,
	for conflicting wchar_t attributes.  Do not warn if
	--no-wchar-size-warning.  Make diagnostic text more specific.

ld:
	* ld.texinfo (--no-wchar-size-warning): Document new ARM option.
	* emultempl/armelf.em (no_wchar_size_warning): New.
	(arm_elf_create_output_section_statements): Pass
	no_wchar_size_warning to arm_elf_create_output_section_statements.
	(OPTION_NO_WCHAR_SIZE_WARNING): New.
	(PARSE_AND_LIST_LONGOPTS): Add no-wchar-size-warning.
	(PARSE_AND_LIST_OPTIONS): List --no-wchar-size-warning.
	(PARSE_AND_LIST_ARGS_CASES): Handle --no-wchar-size-warning.

ld/testsuite:
	* ld-arm/attr-merge-wchar-0.s,ld-arm/attr-merge-wchar-2.s,
	ld-arm/attr-merge-wchar-4.s, ld-arm/attr-merge-wchar-00-nowarn.d,
	ld-arm/attr-merge-wchar-00.d, ld-arm/attr-merge-wchar-02-nowarn.d,
	ld-arm/attr-merge-wchar-02.d, ld-arm/attr-merge-wchar-04-nowarn.d,
	ld-arm/attr-merge-wchar-04.d, ld-arm/attr-merge-wchar-20-nowarn.d,
	ld-arm/attr-merge-wchar-20.d, ld-arm/attr-merge-wchar-22-nowarn.d,
	ld-arm/attr-merge-wchar-22.d, ld-arm/attr-merge-wchar-24-nowarn.d,
	ld-arm/attr-merge-wchar-24.d, ld-arm/attr-merge-wchar-40-nowarn.d,
	ld-arm/attr-merge-wchar-40.d, ld-arm/attr-merge-wchar-42-nowarn.d,
	ld-arm/attr-merge-wchar-42.d, ld-arm/attr-merge-wchar-44-nowarn.d,
	ld-arm/attr-merge-wchar-44.d: New.
	* ld-arm/arm-elf.exp: Run new tests.
@
text
@d57 1
a57 1
2001, 2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.
d60 1
a60 1
under the terms of the GNU Free Documentation License, Version 1.1
d95 1
a95 1
2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.
d98 1
a98 1
under the terms of the GNU Free Documentation License, Version 1.1
d120 2
a121 2
Documentation License.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.
d7114 2
@


1.220
log
@Revert my last change since it has not been approved.
@
text
@d5712 8
@


1.219
log
@	bfd/
	* elf.c (_bfd_elf_map_sections_to_segments): Don't put
	executable sections into the same segment with other
	read only sections if --sep-code.
	* elf32-bfin.c (elf32_bfin_code_in_l1): New variable.
	(elf32_bfin_data_in_l1): New variable.
	(elf32_bfin_final_write_processing): New.
	(elf32_bfin_special_sections[]): New.
	(elf_backend_final_write_processing): Define.
	(elf_backend_special_sections): Define.

	binutils/
	* readelf.c (get_machine_flags): Deal with Blackfin specific
	flags.

	include/
	* bfdlink.h (struct bfd_link_info): Add sep_code member
	variable.
	* elf/bfin.h (EF_BFIN_CODE_IN_L1): Define.
	(EF_BFIN_DATA_IN_L1): Define.

	ld/
	* Makefile.am (eelf32bfin.c): Depend on bfin.em.
	(eelf32bfinfd.c): Likewise.
	* Makefile.in: Regenerate.
	* gen-doc.texi: Set Blackfin.
	* ld.texinfo: Document --sep-code and Blackfin specific
	options.
	* ldmain.c (main): Initialize link_info.sep_code.
	* lexsup.c (enum option_values): Add OPTION_SEP_CODE.
	(ld_options[]): Add --sep-code.
	(parse_args): Deal with --sep-code.
	* emulparams/bfin.sh (EXTRA_EM_FILE): Define.
	* emulparams/elf32bfinfd.sh (OTHER_SECTIONS): Define.
	* emultempl/bfin.em: New file.
@
text
@a23 1
@@set Blackfin
a142 3
@@ifset Blackfin
* Blackfin::			ld and the Blackfin family
@@end ifset
a827 5
@@kindex --sep-code
@@cindex input files, displaying
@@itemx --sep-code
Put code in a seperate segment, not along with other read only data.

a5364 3
@@ifset Blackfin
* Blackfin::			@@command{ld} and the Blackfin family
@@end ifset
a5754 24
@@ifset Blackfin
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node Blackfin
@@section @@command{ld} and the Blackfin family

@@cindex Put code in L1 instruction SRAM
@@kindex --code-in-l1
The @@samp{--code-in-l1} option adds a specific flag in the ELF header.
This flag tells loader to put the code segments into Blackfin
L1 instruction SRAM.

@@cindex Put code in L1 data SRAM
@@kindex --data-in-l1
The @@samp{--data-in-l1} option adds a specific flag in the ELF header.
This flag tells loader to put the data segments into Blackfin L1 data SRAM.

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

@


1.218
log
@	* ld.texinfo (File Commands): Document that INCLUDE can be used in
	several different places.
	* ldgram.y (statement, memory_spec, section): Allow INCLUDE.
	(memory, memory_spec_list): Simplify BNF
	(memory_spec_list_opt): New rule.
	* ldlex.l (INCLUDE): Recognize in EXPRESSION.
testsuite/
	* ld-scripts/include-1.d: New.
	* ld-scripts/include-1.t: New.
	* ld-scripts/include-data.t: New.
	* ld-scripts/include-mem.t: New.
	* ld-scripts/include-ram.t: New.
	* ld-scripts/include-sections.t: New.
	* ld-scripts/include-subdata.t: New.
	* ld-scripts/include.exp: New.
	* ld-scripts/include.s: New.
@
text
@d24 1
d144 3
d832 5
d5374 3
d5767 24
@


1.217
log
@	* ld.texinfo (@@node MMIX): For the __.MMIX.start. prefix, only
	mention it as being special for global symbols.
@
text
@d2767 3
@


1.216
log
@	* NEWS: Mention archive:path patterns.
	* ld.texinfo: Likewise.
	* ldlang.c: Formatting throughout.
	(archive_path): Only assume "[A-Za-z]:" is a dos drive.
	(input_statement_is_archive_path): New function, extracted from..
	(walk_wild): ..here.
	(walk_wild_consider_section): Match archive:path here too.
	(init_map_userdata, sort_def_symbol): Convert to ISO C.
	* ldmain.c (main): Set link_info.path_separator.
	* emultempl/spuelf.em (choose_target): Don't set it here.
@
text
@d5844 4
a5847 4
Symbols with the prefix @@code{__.MMIX.start.}, for example
@@code{__.MMIX.start..text} and @@code{__.MMIX.start..data} are special;
there must be only one each, even if they are local.  The default linker
script uses these to set the default start address of a section.
@


1.215
log
@        * ld.texinfo (Orphan Sections): Fix texi typo.
@
text
@d3434 23
d3464 2
a3465 1
When you use a file name which does not contain any wild card
@


1.214
log
@        * lexsup.c (option_values): Add OPTION_NO_WARN_FATAL.
        (ld_options): Add entry for --no-fatal-warnings.
        (parse_args): Handle OPTION_NO_WARN_FATAL.
        * ld.texinfo (Options): Document new command line switch.
@
text
@d4739 1
a4739 1
the linker will automatically @@xref{PROVIDE} two symbols:
@


1.213
log
@            PR ld/6430
            * testsuite/ld-elfcomm/elfcomm.exp (test_sort_common): Test the
            ascending/descending argument to the --sort-common command line
            option.
            * testsuite/ld-elfcomm/sort-common.s: New file.
            * ld.h (enum sort_order): New.
            * ldlang.c (lang_check: Fix comment.
            (lang_common): Sort commons in ascending or descending order.
            (lang_one_common): Likewise.
            * lexsup.c (ld_options): Have --sort-common take an option
            argument.
            (parse_args): Handle argument to --sort-common.
            * ld.texinfo (--sort-common): Document new optional argument.
            * NEWS: Mention new feature.
@
text
@a1265 1

d1267 1
d1269 3
a1271 1
Treat all warnings as errors.
@


1.212
log
@        ld/testsuite/
        * ld-arm/arm-elf.exp: Skip farcalls tests for non-ARM-EABI
        targets.
        * ld-arm/thumb2-bl-as-thumb1-bad-noeabi.d: New file.
        * ld-arm/thumb2-bl-bad-noeabi.d: Likewise.

        ld/
        * ld.texinfo: State that farcalls stubs are supported for ARM-EABI
        only.
@
text
@d1625 1
a1625 1
@@item --sort-common
d1627 6
a1632 5
This option tells @@command{ld} to sort the common symbols by alignment when
it places them in the appropriate output sections.  First come all the
sixteen-byte aligned symbols, then all the eight-byte, then all the
four-byte, then all the two-byte, and then everything else.  This is to
prevent gaps between symbols due to alignment constraints.
@


1.211
log
@        Multi-GOT support for m68k.

        bfd/

        * elf32-m68k.c (struct elf_m68k_link_hash_entry: got_entry_key,
        glist): New fields.
        (struct elf_m68k_got_entry_key, struct elf_m68k_got_entry,
        struct elf_m68k_got, struct elf_m68k_bfd2got_entry,
        struct elf_m68k_multi_got): New data structures.
        (struct elf_m68k_link_hash_table: local_gp_p, use_neg_got_offsets_p,
        allow_multigot_p, multi_got_): New fields.
        (elf_m68k_multi_got): New macro.
        (elf_m68k_link_hash_newfunc): Initialize new fields of
        struct elf_m68k_link_hash_entry.
        (elf_m68k_link_hash_table_create): Initialize new fields of
        struct elf_m68k_link_hash_table.
        (elf_m68k_link_hash_table_free): New static function implementing hook.
        (elf_m68k_init_got, elf_m68k_clear_got, elf_m68k_create_empty_got): New
        static functions for struct elf_m68k_got.
        (elf_m68k_init_got_entry_key, elf_m68k_got_entry_hash,
        elf_m68k_got_entry_eq): New static functions for
        struct elf_m68k_got_entry.
        (ELF_M68K_REL_8O_MAX_N_ENTRIES_IN_GOT,
        ELF_M68K_REL_8O_16O_MAX_N_ENTRIES_IN_GOT): New macros.
        (enum elf_m68k_get_entry_howto): New enum.
        (elf_m68k_get_got_entry, elf_m68k_update_got_entry_type,
        elf_m68k_remove_got_entry_type): New static functions for
        struct elf_m68k_got_entry.
        (elf_m68k_add_entry_to_got): New static function.
        (elf_m68k_bfd2got_entry_hash, elf_m68k_bfd2got_entry_eq,
        elf_m68k_bfd2got_entry_del, elf_m68k_get_bfd2got_entry): New static
        functions for struct elf_m68k_bfd2got_entry.
        (struct elf_m68k_can_merge_gots_arg, elf_m68k_can_merge_gots_1,
        elf_m68k_can_merge_gots): New traversal.
        (struct elf_m68k_merge_gots_arg, elf_m68k_merge_gots_1,
        elf_m68k_merge_gots): Ditto.
        (struct elf_m68k_finalize_got_offsets_arg,
        elf_m68k_finalize_got_offsets_1, elf_m68k_finalize_got_offsets): Ditto.
        (struct elf_m68k_partition_multi_got_arg,
        elf_m68k_partition_multi_got_1, elf_m68k_init_symndx2h_1,
        elf_m68k_partition_multi_got): Ditto.
        (elf_m68k_find_got_entry_ptr, elf_m68k_remove_got_entry): New static
        functions.
        (elf_m68k_copy_indirect_symbol): New static function implementing
        a hook.
        (elf_m68k_check_relocs): Update to add entries to multi-GOT.
        (elf_m68k_gc_sweep_hook): Update to remove entries from multi-GOT.
        (elf_m68k_always_size_sections): Assign BFDs to GOTs.
        (elf_m68k_relocate_section): Update to properly handle GOT relocations.
        (elf_m68k_finish_dynamic_symbol): Update to traverse all GOT entries
        of a global symbol.
        (bfd_elf_m68k_set_target_options): New function.
        (bfd_elf32_bfd_link_hash_table_free): Define hook.
        (bfd_elf32_bfd_final_link): Change expansion to bfd_elf_final_link
        to skip generic calculation of GOT offsets.
        (elf_backend_copy_indirect_symbol): Define hook.

        * bfd-in.h (bfd_elf_m68k_set_target_options): Declare function.
        * bfd-in2.h: Regenerate.

        ld/

        * configure.in (--enable-got): New option.  Handle it.
        * configure: Regenerate.
        * config.in: Regenerate.

        * emultempl/m68kelf.em: (got_handling_target_default): New shell
        variable.
        (GOT_HANDLING_TARGET_DEFAULT): New macro.
        (GOT_HANDLING_DEFAULT): New macro.  Initialize it from configure
        option if one was given.
        (got_handling): New static variable.
        (elf_m68k_create_output_section_statements): New static function
        implementing hook.
        (PARSE_AND_LIST_PROLOGUE): Define shell variable.
        (OPTION_GOT): New macro.
        (PARSE_AND_LIST_LONGOPTS): Define shell variable.  Specify
        --got option.
        (got): New linker option.
        (PARSE_AND_LIST_OPTIONS): Define shell variable.  Print help string
        for --got option.
        (PARSE_AND_LIST_ARGS_CASES): Define shell variable.  Handle --got
        option.

        * ld.texinfo: Document --got=<type> option.
        * gen-doc.texi: Add M68K.
        * NEWS: Mention the new feature.

        ld/testsuite/

        * ld-m68k/got-12.s: New file.
        * ld-m68k/got-13.s: New file.
        * ld-m68k/got-14.s: New file.
        * ld-m68k/got-15.s: New file.
        * ld-m68k/got-34.s: New file.
        * ld-m68k/got-35.s: New file.
        * ld-m68k/got-single-12-ok.d: New dump test.
        * ld-m68k/got-single-13-er.d: New dump test.
        * ld-m68k/got-negative-14-ok.d: New dump test.
        * ld-m68k/got-negative-15-er.d: New dump test.
        * ld-m68k/got-negative-12-13-14-34-ok.d: New dump test.
        * ld-m68k/got-negative-12-13-14-35-er.d: New dump test.
        * ld-m68k/got-multigot-14-ok.d: New dump test.
        * ld-m68k/got-multigot-15-er.d: New dump test.
        * ld-m68k/got-multigot-12-13-14-34-35-ok.d: New dump test.
        * ld-m68k/xgot-15.s: New source.
        * ld-m68k/got-xgot-15-ok.d: New test.
        * ld-m68k/got-xgot-12-13-14-15-34-35-ok.d: New test.
        * ld-m68k/m68k.exp: Run new tests.
@
text
@d5716 4
@


1.210
log
@  PR ld/6430
   * ld.texinfo (--sort-common): Correct documentation to indicate
   that sorting is performed by alignment, not size, biggest
   alignment first.
@
text
@d28 1
d149 3
d2447 22
d5338 3
d5763 29
@


1.209
log
@        * ld.texinfo (ARM): Document --stub-group-size=N option.
        Move description of --pic-veneer option into the ARM section.
        * NEWS: Mention the support for long function calls.
@
text
@d1623 5
a1627 5
This option tells @@command{ld} to sort the common symbols by size when it
places them in the appropriate output sections.  First come all the one
byte symbols, then all the two byte, then all the four byte, and then
everything else.  This is to prevent gaps between symbols due to
alignment constraints.
d4709 8
@


1.208
log
@	* ld.texinfo (PowerPC64 ELF64): Fix typo.
@
text
@a5507 7
@@cindex PIC_VENEER
@@kindex --pic-veneer
The @@samp{--pic-veneer} switch makes the linker use PIC sequences for
ARM/Thumb interworking veneers, even if the rest of the binary
is not PIC.  This avoids problems on uClinux targets where
@@samp{--emit-relocs} is used to generate relocatable binaries.

d5638 1
a5638 1
The @@samp{--no-enum-size-warning} switch prevents the linker from
d5645 34
@


1.207
log
@2008-02-20  Paul Brook  <paul@@codesourcery.com>

	ld/
	* emultempl/armelf.em (OPTION_FIX_V4BX_INTERWORKING): Define.
	(PARSE_AND_LIST_LONGOPTS): Add fix-v4bx-interworking.
	(PARSE_AND_LIST_OPTIONS): Ditto.
	(PARSE_AND_LIST_ARGS_CASES): Handle OPTION_FIX_V4BX_INTERWORKING.
	* emulparams/armelf.sh (OTHER_TEXT_SECTIONS): Add .v4_bx.
	* emulparams/armelf_linux.sh (OTHER_TEXT_SECTIONS): Ditto.
	* emulparams/armnto.sh (OTHER_TEXT_SECTIONS): Ditto.
	* ld.texinfo: Document --fix-v4bx-interworking.

	ld/testsuite/
	* ld-arm/armv4-bx.d: New test.
	* ld-arm/armv4-bx.s: New test.
	* ld-arm/arm.ld: Add .v4bx.
	* ld-arm/arm-elf.exp: Add armv4-bx.

	gas/testsuite/
	* gas/arm/thumb.d: Exclude EABI targets.
	* gas/arm/arch4t.d: Exclude EABI targts.
	* gas/arm/v4bx.d: New test.
	* gas/arm/v4bx.s: New test.
	* gas/arm/thumb-eabi.d: New test.
	* gas/arm/arch4t-eabi.d: New test.

	gas/
	* config/tc-arm.c (fix_v4bx): New variable.
	(do_bx): Generate V4BX relocations.
	(md_assemble): Allow bx on v4 codes when fix_v4bx.
	(md_apply_fix): Handle BFD_RELOC_ARM_V4BX.
	(tc_gen_reloc): Ditto.
	(OPTION_FIX_V4BX): Define.
	(md_longopts): Add fix-v4bx.
	(md_parse_option): Handle OPTION_FIX_V4BX.
	(md_show_usage): Document --fix-v4bx.
	* doc/c-arm.texi: Document --fix-v4bx.

	bfd/
	* reloc.c: Add BFD_RELOC_ARM_V4BX.
	* elf32-arm.c (elf32_arm_reloc_map): Add BFD_RELOC_ARM_V4BX.
	(ARM_BX_GLUE_SECTION_NAME, ARM_BX_GLUE_SECTION_NAME): Define.
	(elf32_arm_link_hash_table): Add bx_glue_size and bx_glue_offset.
	Update comment for fix_v4bx.
	(elf32_arm_link_hash_table_create): Zero bx_glue_size and
	bx_glue_offset.
	(ARM_BX_VENEER_SIZE, armbx1_tst_insn, armbx2_moveq_insn,
	armbx3_bx_insn): New.
	(bfd_elf32_arm_allocate_interworking_sections): Allocate BX veneer
	section.
	(bfd_elf32_arm_add_glue_sections_to_bfd): Ditto.
	(bfd_elf32_arm_process_before_allocation): Record BX veneers.
	(record_arm_bx_glue, elf32_arm_bx_glue): New functions.
	(elf32_arm_final_link_relocate): Handle BX veneers.
	(elf32_arm_output_arch_local_syms): Output mapping symbol for .v4_bx.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
@
text
@d4 1
a4 1
@@c 2001, 2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.
d5913 1
a5913 1
the action of @@samp{--gc-sections} or linker scrip @@code{/DISCARD/}.
@


1.206
log
@ld/
	* ld.texinfo (INSERT): Describe.
	* ldgram.y (ldgram_in_script, ldgram_had_equals): Delete.
	(INSERT_K, AFTER, BEFORE): Add as tokens.
	(ifile_p1): Handle INSERT statements.
	(saved_script_handle, force_make_executable): Move to..
	* ldmain.c: ..here.
	(previous_script_handle): New global var.
	* ldmain.h (saved_script_handle, force_make_executable): Declare.
	(previous_script_handle): Likewise.
	* ldlex.l (INSERT_K, AFTER, BEFORE): Add tokens.
	* lexsup.c (parge_args <-T>): Set previous_script_handle.
	* ldlang.c (lang_for_each_statement_worker): Handle insert statement.
	(map_input_to_output_sections, print_statement): Likewise.
	(lang_size_sections_1, lang_do_assignments_1): Likewise.
	(insert_os_after): New function, extracted from..
	(lang_insert_orphan): ..here.
	(process_insert_statements): New function.
	(lang_process): Call it.
	(lang_add_insert): New function.
	* ldlang.h (lang_insert_statement_enum): New.
	(lang_insert_statement_type): New.
	(lang_statement_union_type): Add insert_statement.
	(lang_add_insert): Declare.
ld/testsuite/
	* ld-spu/ovl.lnk: Delete overlay.
	* ld-spu/ovl1.lnk: New file.
	* ld-spu/ovl2.lnk: New file.
	* ld-spu/ovl.d: Update.
	* ld-spu/ovl2.d: Update.
@
text
@d5587 15
@


1.205
log
@ld:
2008-01-11  Tristan Gingold  <gingold@@adacore.com>
	    Eric Botcazou  <ebotcazou@@adacore.com>

	* ldlang.c (lang_end): Warns if the entry point is not found when
	--gc-sections.
	Emit an error if no root is specified when --gc-sections -r.
	* ld.texinfo (Options): Document that --gc-sections is compatible
	with -r and -q.
	* ldmain.c (main): Do not error out if -r and --gc-sections.
	* scripttempl/elf.sc: Emit ENTRY command only if relocating.

ld/testsuite:
2008-01-11  Tristan Gingold  <gingold@@adacore.com>

	* lib/ld-lib.exp (check_gc_sections_available): Now available on
	VxWorks.
	* ld-gc: New directory for testing --gc-sections.
	* ld-gc/gc.c: New file.
	* ld-gc/gc.exp: New file.
	* ld-gc/noent.s: New file.
	* ld-gc/noent.d: New file.
@
text
@d300 5
a304 4
@@code{INPUT} or @@code{GROUP} to load other objects.  Note that
specifying a script in this way merely augments the main linker script;
use the @@samp{-T} option to replace the default linker script entirely.
@@xref{Scripts}.
d2907 29
@


1.204
log
@	* ld.texinfo (--gc-sections): Describe linker behaviour.
@
text
@d1283 1
a1283 2
targets that do not support this option.  This option is not compatible
with @@samp{-r} or @@samp{--emit-relocs}. The default behaviour (of not
d1297 5
@


1.203
log
@PR linker/4844
* genscript.sh: Add support for generating a .xa script for use with the --auto-import option.
* ld.texinfo: Document the new behaviour of the --auto-import option.
* ldint.texinfo: Document new script generation.
* emulparams/i386pe.sh (GENERATE_AUTO_IMPORT): Define.
* emulparams/i386pe_posix.sh (GENERATE_AUTO_IMPORT): Define.
* emulparams/i386pep.sh (GENERATE_AUTO_IMPORT): Define.
* emultemp/pe.em (..._get_script): Support the use of the auto import script.
* scripttempl/pe.sc: Put the .rdata input sections into the .data output section when creating an auto import script.
* scripttempl/pep.sc: Likewise.
@
text
@d1288 10
@


1.202
log
@	* ld.texinfo (Input Section Basics): Correct EXCLUDE_FILE example.
@
text
@d1571 3
a1573 3
On an ELF system, if the @@option{-rpath} and @@code{rpath-link} options
were not used, search the contents of the environment variable
@@code{LD_RUN_PATH}. It is for the native linker only.
d1578 2
a1579 2
For a native linker, the contents of the environment variable
@@code{LD_LIBRARY_PATH}.
d2223 6
@


1.201
log
@PR 4824
* ld.texinfo (Options): Extend the description of the -O command line option.
@
text
@d3330 1
a3330 1
(*(EXCLUDE_FILE (*crtend.o *otherfile.o) .ctors))
@


1.201.2.1
log
@	* ld.texinfo (Input Section Basics): Correct EXCLUDE_FILE example.
@
text
@d3330 1
a3330 1
*(EXCLUDE_FILE (*crtend.o *otherfile.o) .ctors)
@


1.200
log
@2007-07-13  Roland McGrath  <roland@@redhat.com>

	* emultempl/elf32.em (struct build_id_info): New type.
	(gld${EMULATION_NAME}_id_note_section_size): New function.
	(gld${EMULATION_NAME}_write_build_id_section): New function.
	(gld${EMULATION_NAME}_after_open): Use them.
	(DEFAULT_BUILD_ID_STYLE): Change to "sha1".
	* ld.texinfo (Options): Mention --build-id=sha1.
@
text
@d761 5
a765 1
should only be enabled for the final binary.
@


1.199
log
@2007-07-09  Roland McGrath  <roland@@redhat.com>

	* emultempl/elf32.em (gld${EMULATION_NAME}_add_option): Add --build-id.
	(gld${EMULATION_NAME}_handle_option): Handle --build-id.
	(gld${EMULATION_NAME}_list_options): List --build-id.
	(gld${EMULATION_NAME}_after_open): If --build-id was given,
	synthesize a ".note.gnu.build-id" section and cache it in elf_tdata.
	* ld.texinfo (Options): Describe --build-id.
	* NEWS: Mention --build-id.
@
text
@d1976 14
a1989 12
@@code{md5} to use a 128-bit @@sc{MD5} hash on the normative parts
of the output contents, or @@code{0x@@var{hexstring}} to use a
chosen bit string specified as an even number of hexadecimal
digits (@@code{-} and @@code{:} characters between digit pairs are
ignored).  If @@var{style} is omitted, @@code{md5} is used.

The @@code{md5} style produces an identifier that is always the
same in an identical output file, but will be unique among all
nonidentical output files.  It is not intended to be compared as
a checksum for the file's contents.  A linked file may be
changed later by other tools, but the build ID bit string
identifying the original linked file does not change.
@


1.198
log
@2007-07-05  Danny Smith  <dannysmith@@users.sourceforge.net>

	* ld.texinfo (--heap): Replace 'amount' with 'number of bytes'.
	(--stack): Likewise.

2007-07-03  Matthias Klose  <doko@@ubuntu.com>

	* emultempl/spuelf.em (base_name): Correct backslash quoting.

2007-07-02  Alan Modra  <amodra@@bigpond.net.au>

	* Makefile.in: Regenerate.
	* aclocal.m4: Regenerate.
	* config.in: Regenerate.
	* po/ld.pot: Regenerate.

2007-06-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* aclocal.m4: Regenerated.
	* Makefile.in: Likewise.

2007-06-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* NEWS: Remove a line with '*' only.

2007-06-29  Joseph Myers  <joseph@@codesourcery.com>

	* emulparams/armelf.sh (OTHER_SECTIONS): Remove .ARM.attributes.
	(ATTRS_SECTIONS): Define.
	* scripttempl/elf.sc, scripttempl/elf32sh-symbian.sc,
	scripttempl/elf_chaos.sc, scripttempl/elfi370.sc,
	scripttempl/elfxtensa.sc: Handle ATTRS_SECTIONS.

2006-06-29  M R Swami Reddy  <MR.Swami.Reddy@@nsc.com>

	* scripttemp/elf32cr16.sc: Default linker script.
	* emulparams/elf32cr16.sh: Emulation script.
	* emultempl/cr16elf.em: Emulation script.
	* Makefile.am: Add entry to make cr16 target.
	* Makefile.in: Regenerate.
	* configure.tgt: Specify default and other emulation parameters
	for cr16.
	* ChangeLog: Added CR16 target entry.
	* NEWS: Announce the support for the CR16 new target.

2007-06-27  Alan Modra  <amodra@@bigpond.net.au>

	* pe-dll.c: Rename uses of bfd.next to bfd.archive_next throughout.

2007-06-20  Alan Modra  <amodra@@bigpond.net.au>

	* emulparams/elf32_spu.sh (OTHER_SECTIONS): KEEP .note.spu_name.

2007-06-18  Nathan Sidwell  <nathan@@codesourcery.com>

	* ldlex.l, ldgram.y: Add ALIGNOF.
	* ldexp.c (exp_print_token, foldname): Likewise.
	* ld.texinfo: Likewise.

2007-06-18  Alan Modra  <amodra@@bigpond.net.au>

	* Makefile.am: Add eelf32_spu.o rule.
	* Makefile.in: Regenerate.
	* emultempl/spuelf.em: Revert last change.  Instead use EMBEDSPU
	defined in Makefile for embedspu name.

2007-06-18  Alan Modra  <amodra@@bigpond.net.au>

	* emultempl/spuelf.em (embedded_spu_file): Deduce embedspu program
	name prefix from that of ld.

2007-06-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ACLOCAL_AMFLAGS): Add -I ../config -I ../bfd.

	* acinclude.m4: Removed.

	* Makefile.in: Regenerated.
	* aclocal.m4: Likewise.
	* configure: Likewise.

2007-06-14  Alan Modra  <amodra@@bigpond.net.au>

	* emultempl/spu_ovl.S: Don't trash lr on tail call from one
	overlay to another.
	* emultempl/spu_ovl.o: Regenerate.

2007-06-11  Bob Wilson  <bob.wilson@@acm.org>

	* emulparams/elf32xtensa.sh (OTHER_READONLY_SECTIONS): Add ONLY_IF_RO
	for .xt_except_table.
	(OTHER_RELRO_SECTIONS): New.

2007-06-11  Sterling Augustine  <sterling@@tensilica.com>
	    Bob Wilson  <bob.wilson@@acm.org>

	* emultempl/xtensaelf.em (replace_insn_sec_with_prop_sec): Use renamed
	XTENSA_PROP_NO_TRANSFORM flag instead of XTENSA_PROP_INSN_NO_TRANSFORM.

2007-06-01  Noah Misch  <noah@@cs.caltech.edu>
	    Alan Modra  <amodra@@bigpond.net.au>

	* ldlang.c (ldlang_add_file): Use input_bfds_tail.
	* ldmain.c (main): Init input_bfds_tail.  Sort link_info
	initialization.

2007-05-29  Alan Modra  <amodra@@bigpond.net.au>

	* emultempl/spuelf.em (base_name): New function, split out from..
	(embedded_spu_file) ..here.  Pass -fPIC or -fpie to embedspu
	invocation if we deduce a shared lib or position independent
	executable build by looking at ctrbegin* linker input files.

2007-05-29  Alan Modra  <amodra@@bigpond.net.au>

	* emultempl/spu_ovl.S (__rv_pattern, __cg_pattern): Set symbol
	types and sizes.
	* emultempl/spu_ovl.o: Regenerate.

2007-05-24  Steve Ellcey  <sje@@cup.hp.com>

	* Makefile.in: Regnerate.
	* configure: Regenerate.
	* aclocal.m4: Regenerate.

2007-05-24  Nathan Sidwell  <nathan@@codesourcery.com>

	* ldlex.l: ASSERT is recognized in SCRIPT env.  NAMES cannot
	contain commas in EXP env.
	* ldgram.y (extern_name_list): Push to EXP env, move body to ...
	(extern_name_list_body): ... here.
	(script_file, ifile_list): Reformat.
	(statement): Add ASSERT.

2007-05-22  Nick Clifton  <nickc@@redhat.com>

	* ld.texinfo: Use @@copying around the copyright notice.
	* ldint.texinfo: Likewise.

2007-05-18  Richard Sandiford  <richard@@codesourcery.com>

	* emulparams/elf32ebmipvxworks.sh (OTHER_READONLY_SECTIONS)
	(OTHER_READWRITE_SECTIONS): Define.  Add .rdata sections.

2007-05-16  Richard Sandiford  <richard@@codesourcery.com>

	* configure.in: Allow sysroots to be relocated under $prefix as
	well as $exec_prefix.
	* configure: Regenerate.

2007-05-14  Andreas Schwab  <schwab@@suse.de>

	* emultempl/ppc64elf.em (gld${EMULATION_NAME}_new_vers_pattern):
	Handle null pattern.

2007-05-11  Alan Modra  <amodra@@bigpond.net.au>

	* emultempl/ppc32elf.em (plt_style): New variable.
	(old_plt): Delete.
	(ppc_after_open): Adjust ppc_elf_select_plt_layout call.
	(PARSE_AND_LIST_PROLOGUE): Define OPTION_NEW_PLT, renumber
	OPTION_OLD_PLT, OPTION_OLD_GOT and OPTION_STUBSYMS.
	(PARSE_AND_LIST_LONGOPTS, PARSE_AND_LIST_OPTIONS): Add secure-plt.
	(PARSE_AND_LIST_ARGS_CASES): Handle OPTION_NEW_PLT.
	* ld.texinfo (--secure-plt): Document.

2007-05-08  Alan Modra  <amodra@@bigpond.net.au>

	* ld.h (args_type, ld_config_type): Reorder fields.
	* ldmain.c (main): Don't initialise a bunch of vars we know are
	zero already.

2007-05-05  Anatoly Sokolov <aesok@@post.ru>

	* multempl/avrelf.em (PARSE_AND_LIST_ARGS_CASES): Add new value for
	"--pmem-wrap-around".
	(PARSE_AND_LIST_OPTIONS): Describe new value for "--pmem-wrap-around".

2007-05-03  Bob Wilson  <bob.wilson@@acm.org>

	* scripttempl/elfxtensa.sc: Merge changes from elf.sc.

2007-05-03  Alan Modra  <amodra@@bigpond.net.au>

	* ld.texinfo (--no-warn-search-mismatch): Document.
	* ldfile.c (ldfile_try_open_bfd): Don't warn about skipping
	incompatible libraries if --no-warn-search-mismatch.
	* ld.h (args_type): Add warn_search_mismatch.
	* ldmain.c (main): Init it.
	* lexsup.c (enum option_values): Add OPTION_NO_WARN_SEARCH_MISMATCH.
	(ld_options): Add entry for --no-warn-search-mismatch.
	(parse_args): Handle OPTION_NO_WARN_SEARCH_MISMATCH.

2007-05-03  Alan Modra  <amodra@@bigpond.net.au>

	* scripttempl/elf.sc: Add .debug_pubtypes and .debug_ranges.

2007-05-01  Robert Millan  <rmh@@aybabtu.com>

	* ldlang.c (lang_check): Error on architecture mismatch.

2007-04-30  Alan Modra  <amodra@@bigpond.net.au>

	* ldmain.c (link_callbacks): Init info and minfo fields.
	* ldmisc.c (minfo): Do nothing if no map file.
	* emultempl/spuelf.em (stack_analysis, emit_stack_syms): New vars.
	(spu_after_open): Adjust spu_elf_create_sections call.
	(spu_before_allocation): Likewise for spu_elf_size_stubs.
	(OPTION_SPU_STACK_ANALYSIS, OPTION_SPU_STACK_SYMS): Define.
	(PARSE_AND_LIST_LONGOPTS): Add new entries.
	(PARSE_AND_LIST_OPTIONS, PARSE_AND_LIST_ARGS_CASES): Likewise.
	* gen-doc.texi: Add @@set for SPU and other missing targets.
	* ld.texinfo: Update man page selection to match gen-doc.texi.
	Document SPU features.

2007-04-28  Alan Modra  <amodra@@bigpond.net.au>

	* ldcref.c (struct cref_hash_entry): Make "demangled" const.
	(cref_fill_array): Adjust for changed demangler.
	* ldlang.c (lang_one_common): Likewise.

2007-04-27  Nathan Froyd  <froydnj@@codesourcery.com>

	* emulparams/elf32_sparc.sh: Update comments.
	* emulparams/elf32bmip.sh: Likewise.
	* emulparams/elf32ppc.sh: Likewise.
	* emulparams/vxworks.sh: Likewise.

2007-04-27  Alan Modra  <amodra@@bigpond.net.au>

	Many files: Include sysdep.h first.  Remove duplicate headers.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.

2007-04-24  Alan Modra  <amodra@@bigpond.net.au>

	* Makefile.in: Regenerate.

2007-04-19  Alan Modra  <amodra@@bigpond.net.au>

	* ldcref.c (cref_fill_array): Call bfd_demangle rather than demangle.
	* ldlang.c (lang_one_common): Likewise.
	* ldmisc.c (vfinfo): Likewise.
	(demangle): Delete.
	* ldmisc.h (demangle): Delete.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.

2007-04-18  Alan Modra  <amodra@@bigpond.net.au>

	* ldlang.h (enum section_type): Add overlay_section.
	* ldlang.c (lang_add_section): Handle flags for overlay_section
	as per normal_section.
	(lang_size_sections_1): When setting lma, detect overlays by
	os->sectype rather than by looking for overlapping vmas.
	(lang_enter_overlay_section): Use overlay_section type.
	(lang_leave_overlay): Set first overlay section to normal.

2007-04-14  Steve Ellcey  <sje@@cup.hp.com>

	* Makefile.am: Add ACLOCAL_AMFLAGS.
	* Makefile.in: Regenerate.

2007-04-12  Bob Wilson  <bob.wilson@@acm.org>

	* emulparams/elf32xtensa.sh (OTHER_SECTIONS): KEEP property sections.

2007-04-10  Richard Henderson  <rth@@redhat.com>

	* ldlang.c (relax_sections): Initialize and increment
	link_info.relax_trip.

2007-04-04  Paul Brook  <paul@@codesourcery.com>

	* configure.tgt: Loosen checks for arm uclinux eabi targets.

2007-04-02  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/4090
	* ldexp.h (node_type): Add lineno.
	* ldexp.c: Include "ldlex.h".
	(exp_intop): Set the lineno field from lineno.
	(exp_bigintop): Likewise.
	(exp_relop): Likewise.
	(exp_nameop): Likewise.
	(exp_binop): Set the lineno field from lineno of lhs.
	(exp_trinop): Likewise.
	(exp_unop): Set the lineno field from lineno of child.
	(exp_assop): Set the lineno field from lineno of src.
	(exp_provide): Likewise.
	(exp_assert): Set the lineno field from lineno of exp.
	(exp_get_abs_int): Set lineno from lineno of nonconstant
	expression when report problem.

2007-03-29  Richard Sandiford  <richard@@codesourcery.com>
	    Daniel Jacobowitz  <dan@@codesourcery.com>

	* NEWS: Mention -l:foo.
	* ld.texinfo: Document it.
	* ldlang.c (new_afile): If a lang_input_file_is_l_enum
	entry as a name beginning with a coloh, convert it to a
	lang_input_file_is_search_file_enum entry without the colon.

2007-03-28  Richard Sandiford  <richard@@codesourcery.com>

	* ld.h (ld_config_type): Add rpath_separator.
	* ldmain.c (main): Initialize it.
	* lexsup.c (parse_args): Honor config.rpath_separator.
	* emultempl/elf32.em (gld${EMULATION_NAME}_search_needed): Likewise.
	(gld${EMULATION_NAME}_add_sysroot): Likewise.
	(gld${EMULATION_NAME}_parse_ld_so_conf): Use config.rpath_separator
	rather than ':' when building the path.
	* emultempl/vxworks.em (vxworks_before_parse): New function.
	Override config.rpath_separator.
	(LDEMUL_AFTER_OPEN): Do not change if EXTRA_EM_FILE has been
	set to gld${EMULATION_NAME}_after_open; #define that identifier
	to vxworks_foo instead.
	(LDEMUL_BEFORE_PARSE): Override in the same way as LDEMUL_AFTER_OPEN.

2007-03-28  Richard Sandiford  <richard@@codesourcery.com>
	    Phil Edwards  <phil@@codesourcery.com>

	* ld.texinfo: Put the contents after the title page rather
	than at the end of the document.

2007-03-26  Alan Modra  <amodra@@bigpond.net.au>

	* Makefile.am: Add dependency on ldemul-list.h for powerpc and
	spu target emul files.
	* configure.in: Check for mkstemp and waitpid.
	* Makefile.in: Regenerate.
	* configure: Regenerate.
	* config.in: Regenerate.
	* ldlang.c (input_file_chain): Make global.
	(lang_add_input_file): Don't set lang_has_input_file here.
	* ldlang.h (input_file_chain): Declare.
	* emultempl/ppc32elf.em (ppc_recognized_file): New function.
	(LDEMUL_RECOGNIZED_FILE): Define.
	* emultempl/ppc64elf.em (ppc64_recognized_file): New function.
	(LDEMUL_RECOGNIZED_FILE): Define.
	* emultempl/spuelf.em (struct tflist): New.
	(tmp_file_list): New var.
	(clean_tmp, embedded_spu_file): New functions.

2007-03-24  Alan Modra  <amodra@@bigpond.net.au>

	* ldlang.c (lang_insert_orphan): Provide start/stop loadaddr syms
	rather than defining unconditionally.
	(lang_leave_overlay_section): Likewise.
	* ld.texinfo (Overlay Description): Update description and examples
	for start/stop syms.

2007-03-22  Joseph Myers  <joseph@@codesourcery.com>

	* ld.texinfo: Include VERSION_PACKAGE when reporting version.

2007-03-20  Paul Brook  <paul@@codesourcery.com>

	* emultempl/armelf.em (pic_veneer): New variable.
	(PARSE_AND_LIST_PROLOGUE): Add OPTION_PIC_VENEER.
	(PARSE_AND_LIST_ARGS_CASES): Ditto.
	(PARSE_AND_LIST_LONGOPTS): Add "pic-veneer".
	(PARSE_AND_LIST_OPTIONS): Ditto.
	* ld.texinfo: Document --pic-veneer.

2007-03-18  Mark Shinwell  <shinwell@@codesourcery.com>

	* ld.texinfo: Document --no-enum-size-warning.
	* emultempl/armelf.em (no_enum_size_warning): New.
	(arm_elf_create_output_section_statements): Correct typo
	in comment.  Pass no_enum_size_warning to
	bfd_elf32_arm_set_target_relocs.
	(PARSE_AND_LIST_PROLOGUE): Define OPTION_NO_ENUM_SIZE_WARNING.
	(PARSE_AND_LIST_OPTIONS): Document --no-enum-size-warning.
	(PARSE_AND_LIST_ARGS_CASES): Add OPTION_NO_ENUM_SIZE_WARNING
	case.

2007-03-19  Bernd Schmidt  <bernd.schmidt@@analog.com>

	* configure.tgt (bfin-*-elf, bfin-*-uclinux*): Add targ_extra_libpath.
	(bfin-*-linux-uclibc*): New target.

2007-03-16  Kai Tietz  <Kai.Tietz@@onevision.com>

	* pe-dll.c (make_one): Use pc-relative relocation instead of an
	absolute relocation for x86_64-pc-mingw32 target.

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ld_TEXINFOS): Remove ldver.texi.
	(AM_MAKEINFOFLAGS): Add -I ../../bfd/doc.
	(TEXI2DVI): Likewise.
	(REPORT_BUGS_TO): Removed.
	(INCLUDES): Remove -DREPORT_BUGS_TO.
	(ldver.texi): Likewise.
	(ld.1): Don't depend on ldver.texi.
	(MOSTLYCLEANFILES): Remove ldver.texi.
	* Makefile.in: Regenerated.

	* configure.in (--with-bugurl): Removed.
	* configure: Regenerated.

	* lexsup.c: Include bfdver.h.

	* ld.texinfo: Include bfdver.texi instead of ldver.texi.

2007-03-11  Hans-Peter Nilsson  <hp@@bitrange.com>

	* emultempl/mmixelf.em: Remove incorrect '#line' directive.

2007-03-08  Alan Modra  <amodra@@bigpond.net.au>

	* ldlang.c (lang_size_sections_1): Correct backwards dot move
	test to not trigger on overlays.  Only warn on backwards move
	if non-default lma.

2007-03-07  Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (REPORT_BUGS_TEXI): Define to Texinfo version of
	bug-reporting URL.
	* Makefile.am (ldver.texi): Define BUGURL.
	* ld.texinfo: Use BUGURL.
	* Makefile.in, configure: Regenerate.

2007-03-07  Nick Clifton  <nickc@@redhat.com>

	PR ld/4023
	* emultempl/aix.em (..._before_allocation): Strip sysroot prefix
	from any paths being inserted into the output binary's DT_RPATH.

2007-03-02  Nathan Sidwell  <nathan@@codesourcery.com>

	* emulparams/shelf_uclinux.sh: New. Missed in 2007-02-28 commit.

2007-03-01  Joseph Myers  <joseph@@codesourcery.com>

	* ldver.c (ldversion): Remove word "version" from output.  Update
	copyright date.

2007-02-28  Nathan Sidwell  <nathan@@codesourcery.com>

	* Makefile.am (ALL_EMULATIONS): Add eshelf_uclinux.o
	(eshelf_uclinux.c): New target.
	* Makefile.in: Rebuilt.
	* configure.tgt (sh-*-uclinux* | sh[12]-*-uclinux*): New stanza.
	* emulparams/shelf_uclinux.sh: New.

2007-02-28  Alan Modra  <amodra@@bigpond.net.au>

	* configure.tgt: Fix type last change.
	* configure.tgt (spu-*-elf*): Delete targ_extra_ofiles.

2007-02-27  Alan Modra  <amodra@@bigpond.net.au>

	* Makefile.am (ALL_EMUL_EXTRA_OFILES): Remove spu_inc.o.
	(eelf32_spu.c): Adjust dependencies.
	* Makefile.in: Regenerate.
	* emultempl/spuelf.em (ovl_mgr): New array.  Insert spu_ovl.o
	code using bin2c.
	(_binary_spu_ovl_o_start, _binary_spu_ovl_o_end): Delete.
	(ovl_mgr_stream): Update.
	* emultempl/spu_inc.s: Delete.
	* emultempl/spu_none.s: Delete.

2007-02-26  Alan Modra  <amodra@@bigpond.net.au>

	* emultempl/spuelf.em (_binary_builtin_ovl_mgr_start): Rename
	to _binary_spu_ovl_o_start.
	(_binary_builtin_ovl_mgr_end): Rename to _binary_spu_ovl_o_end.
	(spu_elf_load_ovl_mgr): Fatal error on missing overlay manager.
	* emultempl/spu_inc.s: Rename symbols.
	* emultempl/spu_none.s: New file.
	* emultempl/spu_ovl.S: Update copyright.
	* Makefile.am (spu_inc.o): Try building with ld -r first, then
	gas incbin, then build without overlay manager.
	* Makefile.in: Regenerate.

2007-02-22  Joseph Myers  <joseph@@codesourcery.com>

	* configure.tgt (mips64*el-*-linux-*, mips64*-*-linux-*,
	mips*el-*-linux-*, mips*-*-linux-*): Set
	targ_extra_libpath=$targ_extra_emuls.

2007-02-21  Nick Clifton  <nickc@@redhat.com>

	* ldlang.c (ldlang_override_segment_assignment): New function.
	* ldlang.h (ldlang_override_segment_assignment): Prototype.
	* ldmain.c (link_callbacks): Add
	ldlang_override_segment_assignment.

2007-02-20  Alan Modra  <amodra@@bigpond.net.au>

	* ldexp.c (fold_name <LOADADDR>): Ensure result is always absolute.

2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-bugurl): New option.
	* configure: Regenerate.
	* Makefile.am (REPORT_BUGS_TO): Define.
	(INCLUDES): Define REPORT_BUGS_TO.
	Regenerate dependencies.
	* Makefile.in: Regenerate.
	* ld.h: Remove include of bin-bugs.h.
	* lexsup.c (help): Don't print empty REPORT_BUGS_TO.

2007-02-17  Alan Modra  <amodra@@bigpond.net.au>

	* ldcref.c (check_reloc_refs): Compare section for local syms.

2007-02-13  Alan Modra  <amodra@@bigpond.net.au>

	* emultempl/spu_ovl.S (__ovly_return, __ovly_load): Set sym size.
	(__ovly_load_event): Define.
	(size): Rename to osize.
	* emultempl/spu_ovl.o: Regenerate.

2007-02-13  Alan Modra  <amodra@@bigpond.net.au>

	* emulparams/elf64ppc.sh (OTHER_READWRITE_SECTIONS): Add ".branch_lt".
	* emultempl/ppc64elf.em (ppc_add_stub_section): Create without
	SEC_RELOC flag set.

2007-02-09  H.J. Lu  <hongjiu.lu@@intel.com>

	* configure.in (targ_extra_emuls): Add $targ64_extra_emuls if
	want64 is true.
	(targ_extra_libpath): Add $targ64_extra_libpath if want64 is
	true
	* configure: Regenerated.

	* configure.tgt (targ_extra_libpath): Initialize.
	(targ64_extra_emuls): New. Document. Initialize.
	(targ64_extra_libpath): Likewise.
	(i[3-7]86-*-linux-*): Set targ64_extra_emuls and
	targ64_extra_libpath.
	(powerpc*-*-linux*): Likewise.
	(s390-*-linux*): Likewise.

2007-02-07  Paul Brook  <paul@@codesourcery.com>

	* configure.tgt: Add arm*-*-uclinux-*eabi.

2007-02-06  H.J. Lu  <hongjiu.lu@@intel.com>

	* ldlang.c (lang_size_sections_1): Add a missing `)'.

2007-02-06  Alan Modra  <amodra@@bigpond.net.au>

	PR ld/3966
	* ldlang.c (lang_size_sections_1): Don't warn on backwards dot
	move unless section size is non-zero.

2007-02-05  Dave Brolley  <brolley@@redhat.com>

	* Makefile.am (ALL_EMULATIONS): Add support for Toshiba MeP.
	* configure.tgt: Likewise.
	* scripttempl/mep.sc: New file.
	* emulparams/elf32mep.sh: New file.
	* Makefile.in: Regenerate.

2006-01-29  Julian Brown  <julian@@codesourcery.com>

	* NEWS: Mention --vfp11-denorm-fix option.
	* ld.texinfo: Document above.
	* emulparams/armelf_linux.sh (OTHER_TEXT_SECTIONS): Add
	.vfp11_veneer section.
	* emulparams/armelf.sh (OTHER_TEXT_SECTIONS): Likewise.
	* emultempl/armelf.em (vfp11_denorm_fix): New static variable.
	(arm_elf_before_allocation): Call bfd_elf32_arm_set_vfp11_fix,
	bfd_elf32_arm_init_maps and bfd_elf32_arm_vfp11_erratum_scan.
	(arm_elf_after_allocation): New function. Call
	bfd_elf32_arm_vfp11_fix_veneer_locations for all input statements.
	(arm_elf_create_output_section_statements): Pass vfp11 fix command
	line option to BFD.
	(OPTION_VFP11_DENORM_FIX): New option.
	(PARSE_AND_LIST_LONGOPTS): Handle new option.
	(PARSE_AND_LIST_OPTIONS): Likewise.
	(PARSE_AND_LIST_ARGS_CASES): Likewise.
	(LDEMUL_AFTER_ALLOCATION): Define.

2007-01-24  H.J. Lu  <hongjiu.lu@@intel.com>

	* ldgram.y (SIZEOF_HEADERS): Remove duplicated one.
	(DEFSYMEND): Likewise.
	(NAME): Likewise.
	(LNAME): Likewise.

2007-01-19  Murali Vemulapati  <murali.vemulapati@@gmail.com>

	* pe-dll.c: (make_one) Conditionally include jump stubs.
	* emultempl/pe.em (gld_${EMULATION_NAME}_after_open): Identify
	redundant jump stubs from import libraries and exclude them from
	link.

2007-01-19  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld.h (args_type): Add new symbolic and dynamic_list fields.

	* ld.texinfo: Update -Bsymbolic-functions.

	* ldmain.c (main): Initialize command_line.symbolic to
	symbolic_unset and command_line.dynamic_list to
	dynamic_list_unset.  Check -Bsymbolic, -Bsymbolic-functions and
	--dynamic-list* before setting link_info.symbolic,
	link_info.dynamic and link_info.dynamic_data.

	* lexsup.c (option_values): Add OPTION_SYMBOLIC_FUNCTIONS.
	(ld_options): Use OPTION_SYMBOLIC_FUNCTIONS with
	-Bsymbolic-functions.
	(parse_args): Handle -Bsymbolic-functions.  Don't set
	link_info.dynamic, link_info.dynamic_data and link_info.symbolic
	here.  Set command_line.symbolic for -Bsymbolic.  Set
	command_line.dynamic_list and command_line.symbolic for
	--dynamic-list-data, --dynamic-list-cpp-new,
	--dynamic-list-cpp-typeinfo and --dynamic-list.

2007-01-19  Jakub Jelinek  <jakub@@redhat.com>
	    H.J. Lu  <hongjiu.lu@@intel.com>

	* emultempl/elf32.em (handle_option): Make sure -z max-page-size
	or -z common-page-size argument is a power of 2.  Call
	bfd_emul_set_maxpagesize and bfd_emul_set_commonpagesize.

2007-01-19  H.J. Lu  <hongjiu.lu@@intel.com>

	* ldmain.c (main): Don't call bfd_emul_set_maxpagesize nor
	bfd_emul_set_commonpagesize.

2007-01-19  H.J. Lu  <hongjiu.lu@@intel.com>

	* NEWS: Mention --default-script/-dT.

	* ld.h (args_type): Add a default_script field.

	* ld.texinfo: Document --default-script/-dT.

	* ldmain.c (main): Handle command_line.default_script.

	* lexsup.c (option_values): Add OPTION_DEFAULT_SCRIPT.
	(ld_options): Add entries for --default-script and -dT.
	(parse_args): Handle --default-script/-dT.

2007-01-16  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/3831
	* NEWS: Mention -Bsymbolic-functions, --dynamic-list-data and
	--dynamic-list-cpp-new.

	* ld.texinfo: Document -Bsymbolic-functions, --dynamic-list-data
	and --dynamic-list-cpp-new.

	* ldlang.c (lang_append_dynamic_list_cpp_new): New.
	(lang_process): Change link_info.dynamic to
	link_info.dynamic_list.
	(lang_append_dynamic_list): Likewise.
	* ldmain.c (main): Likewise.  Initialize link_info.dynamic and
	link_info.dynamic_data to FALSE.

	* ldlang.h (lang_append_dynamic_list_cpp_new): New.

	* lexsup.c (option_values): Add OPTION_DYNAMIC_LIST_DATA and
	OPTION_DYNAMIC_LIST_CPP_NEW.
	(ld_options): Add entries for -Bsymbolic-functions,
	--dynamic-list-data and --dynamic-list-cpp-new.  Make
	-Bsymbolic-functions an alias of --dynamic-list-data.
	(parse_args): Change link_info.dynamic to link_info.dynamic_list.
	Set link_info.dynamic to TRUE for --dynamic-list and
	--dynamic-list-cpp-typeinfo.  Handle --dynamic-list-data and
	--dynamic-list-cpp-new.

2007-01-11  Nathan Sidwell  <nathan@@codesourcery.com>

	* emultempl/elf-generic.em (gdl_map_segments): Only allow header
	shrinkage for the first few iterations.

2007-01-08  Kai Tietz	<kai.tietz@@onevision.com>

	* configure.tgt: Renamed target x86_64-*-mingw64 to
	x86_64-*-mingw*.

2007-01-08  Pedro Alves  <pedro_alves@@portugalmail.pt>

	* configure.host: Add i[3-7]86-*-mingw* case.

2007-01-08  Nick Clifton  <nickc@@redhat.com>

	* pep-dll.h (pep_bfd_is_dll): Add prototype.

2007-01-08  Aurelien Jarno  <aurelien@@aurel32.net>

	PR ld/3843
	* configure.tgt (x86_64_[k]freebsd*): Add targ_extra_libpath and
	tdir_elf_i386_fbsd.

2007-01-06  Nathan Sidwell  <nathan@@codesourcery.com>

	* ldexp.c (fold_name): Issue error on undefined sections.

2007-01-02  Alan Modra  <amodra@@bigpond.net.au>

	* pe-dll.c: Include pe-dll.h.
	* pep-dll.c (pe_bfd_is_dll): Define.

For older changes see ChangeLog-2006

Local Variables:
mode: change-log
left-margin: 8
fill-column: 74
version-control: never
End:
@
text
@d1146 1
a1146 1
symbols to the definition within the shared library, if any. 
d1969 22
d2225 3
a2227 3
allow one).  Instances where this may occur include accesses to member 
fields of struct variables imported from a DLL, as well as using a 
constant index into an array variable imported from a DLL.  Any 
d2240 3
a2242 3
A second solution is to force one of the 'constants' to be a variable -- 
that is, unknown and un-optimizable at compile time.  For arrays, 
there are two possibilities: a) make the indexee (the array's address) 
d2247 1
a2247 1
extern_array[1] --> 
d2255 1
a2255 1
extern_array[1] --> 
d2259 1
a2259 1
For structs (and most other multiword data types) the only option 
d2264 1
a2264 1
extern_struct.field --> 
d2277 1
a2277 1
'auto-import' for the offending symbol and mark it with 
d2280 3
a2282 3
building a DLL, building client code that will link to the DLL, or 
merely building/linking to a static library.   In making the choice 
between the various methods of resolving the 'direct address with 
d2327 1
a2327 1
A fourth way to avoid this problem is to re-code your 
d2335 1
a2335 1
Do not attempt to do sophisticated linking of @@code{_symbol} to 
d2344 1
a2344 1
environment to adjust references to such data in your client code. 
d3121 1
a3121 1
  
d3441 1
a3441 1
@@code{SORT_BY_NAME} (@@code{SORT_BY_NAME} (wildcard section pattern)) is 
d4216 1
a4216 1
expression via the @@code{ORIGIN(@@var{memory})} and 
d4221 1
a4221 1
  _fstack = ORIGIN(ram) + LENGTH(ram) - 4;  
d4422 1
a4422 1
	 extern "C++" @@{       
d4425 1
a4425 1
         @@}         
d4543 1
a4543 1
The supported @@samp{lang}s are @@samp{C}, @@samp{C++}, and @@samp{Java}. 
d5309 1
a5309 1
@@command{ld} finds all bit manipulation instructions like @@code{band, bclr, 
d5311 1
a5311 1
which use 32 bit and 16 bit absolute address form, but refer to the top 
d5314 1
a5314 1
@@samp{bset #xx:3,@@code{@@@@}@@var{aa}:8} whenever the address @@var{aa} is in 
d5318 2
a5319 2
@@command{ld} finds all @@code{ldc.w, stc.w} instructions which use the 
32 bit absolute address form, but refer to the top page of memory, and 
d5322 1
a5322 1
@@samp{ldc.w @@code{@@@@}@@var{aa}:16,ccr} whenever the address @@var{aa} is in 
d5447 1
a5447 1
will also change the relocation to some far function to use the 
d5688 1
a5688 1
@@item @@samp{.infomemnobits} 
d5695 1
a5695 1
The last two sections are used by gcc. 
d5932 1
a5932 1
@@cindex SPU 
d5951 1
a5951 1
@@cindex SPU 
d5961 1
a5961 1
@@code{STB_LOCAL}, and section @@code{SHN_ABS}. 
d5997 1
a5997 1
This section describes some of the win32 specific @@command{ld} issues. 
d6002 2
a6003 2
@@cindex import libraries 
@@item import libraries 
d6011 2
a6012 2
@@item   exporting DLL symbols 
@@cindex exporting DLL symbols 
d6027 1
a6027 1
If, however, @@samp{--export-all-symbols} is not given explicitly on the 
d6036 2
a6037 2
@@item   using a DEF file 
@@cindex using a DEF file 
d6062 1
a6062 1
@@end example 
d6078 1
a6078 1
executable suffix, @@samp{.EXE} is appended. 
d6082 1
a6082 1
non-default base address for the image. 
d6095 1
a6095 1
@@end example 
d6130 1
a6130 1
 
d6155 1
a6155 1
decorate them with dllexport.  Instead, they should use dllimport, 
d6163 2
a6164 2
This complicates the structure of library header files, because 
when included by the library itself the header must declare the 
d6167 1
a6167 1
of idioms that are typically used to do this; often client code can 
d6171 1
a6171 1
@@end table 
d6178 1
a6178 1
issue.  This increases the effort necessary to port existing Un*x 
d6181 1
a6181 1
initially provided by Paul Sokolovsky, allows one to omit the 
d6183 1
a6183 1
platforms. This feature is enabled with the @@samp{--enable-auto-import} 
d6189 1
a6189 1
auto-import of variables does not always work flawlessly without 
d6192 1
a6192 1
"variable '<var>' can't be auto-imported. Please read the 
d6195 3
a6197 3
The @@samp{--enable-auto-import} documentation explains why this error 
occurs, and several methods that can be used to overcome this difficulty.  
One of these methods is the @@emph{runtime pseudo-relocs} feature, described 
d6201 5
a6205 5
For complex variables imported from DLLs (such as structs or classes), 
object files typically contain a base address for the variable and an 
offset (@@emph{addend}) within the variable--to specify a particular 
field or public member, for instance.  Unfortunately, the runtime loader used 
in win32 environments is incapable of fixing these references at runtime 
d6207 1
a6207 1
The standard auto-import feature described above is unable to resolve these 
d6210 6
a6215 6
The @@samp{--enable-runtime-pseudo-relocs} switch allows these references to 
be resolved without error, while leaving the task of adjusting the references 
themselves (with their non-zero addends) to specialized code provided by the 
runtime environment.  Recent versions of the cygwin and mingw environments and 
compilers provide this runtime support; older versions do not.  However, the 
support is only necessary on the developer's platform; the compiled result will 
d6218 2
a6219 2
@@samp{--enable-runtime-pseudo-relocs} is not the default; it must be explicitly 
enabled as needed. 
d6227 3
a6229 3
libraries or applications.  When @@command{ld} creates an import lib, each 
function or variable exported from the dll is stored in its own bfd, even 
though a single bfd could contain many exports.  The overhead involved in 
d6231 1
a6231 1
tremendous time, memory, and storage needed to link against particularly 
d6234 1
a6234 1
Linking directly to a dll uses no extra command-line switches other than 
d6236 1
a6236 1
of names to match each library.  All that is needed from the developer's 
d6256 4
a6259 4
(*) Actually, this is not @@samp{cygxxx.dll} but in fact is @@samp{<prefix>xxx.dll}, 
where @@samp{<prefix>} is set by the @@command{ld} option 
@@samp{--dll-search-prefix=<prefix>}. In the case of cygwin, the standard gcc spec 
file includes @@samp{--dll-search-prefix=cyg}, so in effect we actually search for 
d6262 2
a6263 2
Other win32-based unix environments, such as mingw or pw32, may use other 
@@samp{<prefix>}es, although at present only cygwin makes use of this feature.  It 
d6277 1
a6277 1
	libxxx.a       (in case of static archive) 
d6280 2
a6281 2
Linking directly to a dll without using the import library can be 
done two ways: 
d6286 1
a6286 1
@@end example 
d6300 1
a6300 1
@@end example 
d6306 1
a6306 1
@@end example 
d6315 1
a6315 1
	libxxx.dll.a -> ../bin/cygxxx-5.dll 
d6340 3
a6342 3
true import libs with a simple symbolic link to (or a copy of) 
a dll, in many cases, is a useful addition to the suite of tools 
binutils makes available to the win32 developer.  Given the 
d6347 1
a6347 1
@@item symbol aliasing  
d6349 2
a6350 2
@@item adding additional names 
Sometimes, it is useful to export symbols with additional names.  
d6354 1
a6354 1
import library.  Consider the following DEF file: 
d6356 1
a6356 1
@@example 
d6360 1
a6360 1
foo 
d6362 1
a6362 1
@@end example 
d6369 2
a6370 2
@@example 
void foo () @@{ /* Do something.  */; @@} 
d6372 1
a6372 1
@@end example 
d6379 1
a6379 1
kernel does this regularly.  A symbol @@samp{_foo} can be exported as 
d6382 1
a6382 1
created).  In the following example: 
d6384 1
a6384 1
@@example 
d6389 1
a6389 1
@@end example 
d6393 1
a6393 1
@@end table 
d6396 1
a6396 1
unless the @@samp{--export-all-symbols} command line option is used. 
d6398 7
a6404 7
@@emph{all} desired exports in the DEF file, including the symbols 
that are not being renamed, and do @@emph{not} use the 
@@samp{--export-all-symbols} option.  If you list only the 
renamed symbols in the DEF file, and use @@samp{--export-all-symbols} 
to handle the other symbols, then the both the new names @@emph{and} 
the original names for the renamed symbols will be exported.  
In effect, you'd be aliasing those symbols, not renaming them, 
d6640 1
a6640 1
and the most helpful. 
@


1.197
log
@	* ldlex.l, ldgram.y: Add ALIGNOF.
	* ldexp.c (exp_print_token, foldname): Likewise.
	* ld.texinfo: Likewise.

	ld/testsuite/
	* ld-scripts/alignof.s: New.
	* ld-scripts/alignof.t: New
	* ld-scripts/alignof.exp: New.
@
text
@d2076 2
a2077 2
Specify the amount of memory to reserve (and optionally commit) to be
used as heap for this program.  The default is 1Mb reserved, 4K
d2346 2
a2347 2
Specify the amount of memory to reserve (and optionally commit) to be
used as stack for this program.  The default is 2Mb reserved, 4K
@


1.196
log
@Use @@copying around copyright notices
@
text
@d4998 19
@


1.195
log
@bfd/
	* elf32-ppc.h (ppc_elf_select_plt_layout): Update prototype.
	(enum ppc_elf_plt_type): Move from..
	* elf32-ppc.c: ..here.
	(struct ppc_elf_obj_tdata): Add makes_plt_call and has_rel16.
	(struct ppc_elf_link_hash_table): Reorder.  Add old_bfd.  Delete
	can_use_new_plt.  Make is_vxworks a bitfield.
	(ppc_elf_link_hash_table_create): Don't clear is_vxworks (again).
	(ppc_elf_check_relocs): Update setting of reloc flags.  Set old_bfd.
	(ppc_elf_select_plt_layout): Modify parameters.  Use bfd reloc
	flags to better detect object files needing old bss-style plt.
	Allow secure plt to be used without rel16 relocs being detected.
	Warn if secure plt request cannot be allowed.
ld/
	* emultempl/ppc32elf.em (plt_style): New variable.
	(old_plt): Delete.
	(ppc_after_open): Adjust ppc_elf_select_plt_layout call.
	(PARSE_AND_LIST_PROLOGUE): Define OPTION_NEW_PLT, renumber
	OPTION_OLD_PLT, OPTION_OLD_GOT and OPTION_STUBSYMS.
	(PARSE_AND_LIST_LONGOPTS, PARSE_AND_LIST_OPTIONS): Add secure-plt.
	(PARSE_AND_LIST_ARGS_CASES): Handle OPTION_NEW_PLT.
	* ld.texinfo (--secure-plt): Document.
@
text
@d48 1
a48 1
@@ifinfo
d55 1
a55 1
Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000,
a57 2
@@ignore

d64 1
a64 8

Permission is granted to process this file through Tex and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@@end ignore
@@end ifinfo
@


1.194
log
@	* ld.texinfo (--no-warn-search-mismatch): Document.
	* ldfile.c (ldfile_try_open_bfd): Don't warn about skipping
	incompatible libraries if --no-warn-search-mismatch.
	* ld.h (args_type): Add warn_search_mismatch.
	* ldmain.c (main): Init it.
	* lexsup.c (enum option_values): Add OPTION_NO_WARN_SEARCH_MISMATCH.
	(ld_options): Add entry for --no-warn-search-mismatch.
	(parse_args): Handle OPTION_NO_WARN_SEARCH_MISMATCH.
@
text
@d5702 8
@


1.193
log
@bfd/
	* elf32-spu.c (struct spu_link_hash_table): Add stack_analysis
	and emit_stack_syms bitfields.
	(get_sym_h): Read all symbols if stack analysis will be done.
	(spu_elf_create_sections): Add stack_analysis and emit_stack_syms
	params, and stash in hash table.
	(is_hint): Split off from..
	(is_branch): ..here.  Adjust callers.
	(spu_elf_size_stubs): Add stack_analysis param.  Arrange to read
	and keep all syms.
	(write_one_stub): Fix mem leak.
	(find_function_stack_adjust): New function.
	(sort_syms_syms, sort_syms_psecs): New vars.
	(sort_syms): New function.
	(struct call_info, struct function_info): New.
	(struct spu_elf_stack_info): New.
	(alloc_stack_info, maybe_insert_function, func_name): New functions.
	(is_nop, insns_at_end, check_function_ranges): Likewise.
	(find_function, insert_callee, mark_functions_via_relocs): Likewise.
	(pasted_function, interesting_section, discover_functions): Likewise.
	(mark_non_root, call_graph_traverse, build_call_tree): Likewise.
	(sum_stack, spu_elf_stack_analysis, spu_elf_final_link): Likewise.
	(bfd_elf32_bfd_final_link): Define.
	* elf32-spu.h (struct _spu_elf_section_data): Add stack_info field.
	(spu_elf_create_sections, spu_elf_size_stubs): Update prototypes.
include/
	* bfdlink.h (struct bfd_link_info): Add "info" and "minfo".
ld/
	* ldmain.c (link_callbacks): Init info and minfo fields.
	* ldmisc.c (minfo): Do nothing if no map file.
	* emultempl/spuelf.em (stack_analysis, emit_stack_syms): New vars.
	(spu_after_open): Adjust spu_elf_create_sections call.
	(spu_before_allocation): Likewise for spu_elf_size_stubs.
	(OPTION_SPU_STACK_ANALYSIS, OPTION_SPU_STACK_SYMS): Define.
	(PARSE_AND_LIST_LONGOPTS): Add new entries.
	(PARSE_AND_LIST_OPTIONS, PARSE_AND_LIST_ARGS_CASES): Likewise.
	* gen-doc.texi: Add @@set for SPU and other missing targets.
	* ld.texinfo: Update man page selection to match gen-doc.texi.
	Document SPU features.
@
text
@d1393 5
@


1.192
log
@ld/
200x-xx-xx  Richard Sandiford  <richard@@codesourcery.com>
	    Daniel Jacobowitz  <dan@@codesourcery.com>

	* NEWS: Mention -l:foo.
	* ld.texinfo: Document it.
	* ldlang.c (new_afile): If a lang_input_file_is_l_enum
	entry as a name beginning with a coloh, convert it to a
	lang_input_file_is_search_file_enum entry without the colon.

ld/testsuite/
	* ld-libs/lib-1.s, ld-libs/lib-2.s, ld-libs/lib-2.d,
	* ld-libs/libs.exp: New files.
@
text
@a22 1
@@set ARC
d24 1
a24 4
@@set D10V
@@set D30V
@@set H8/300
@@set H8/500
a25 3
@@set I370
@@set I80386
@@set I860
a26 1
@@set M32R
a27 3
@@set M680X0
@@set MCORE
@@set MIPS
a29 2
@@set PDP11
@@set PJ
d32 3
a34 5
@@set SH
@@set SPARC
@@set TIC54X
@@set V850
@@set VAX
d163 3
d5226 3
d5843 81
@


1.191
log
@bfd/
200x-xx-xx  Richard Sandiford  <richard@@codesourcery.com>
	    Phil Edwards  <phil@@codesourcery.com>

	* doc/bfd.texinfo: Put the contents after the title page rather
	than at the end of the document.

binutils/
200x-xx-xx  Richard Sandiford  <richard@@codesourcery.com>
	    Phil Edwards  <phil@@codesourcery.com>

	* doc/binutils.texi: Put the contents after the title page rather
	than at the end of the document.

gas/
200x-xx-xx  Richard Sandiford  <richard@@codesourcery.com>
	    Phil Edwards  <phil@@codesourcery.com>

	* doc/as.texinfo: Put the contents after the title page rather
	than at the end of the document.

gprof/
200x-xx-xx  Richard Sandiford  <richard@@codesourcery.com>
	    Phil Edwards  <phil@@codesourcery.com>

	* gprof.texi: Put the contents after the title page rather
	than at the end of the document.

ld/
200x-xx-xx  Richard Sandiford  <richard@@codesourcery.com>
	    Phil Edwards  <phil@@codesourcery.com>

	* ld.texinfo: Put the contents after the title page rather
	than at the end of the document.
@
text
@d617 9
a625 8
@@kindex -l@@var{archive}
@@kindex --library=@@var{archive}
@@item -l@@var{archive}
@@itemx --library=@@var{archive}
Add archive file @@var{archive} to the list of files to link.  This
option may be used any number of times.  @@command{ld} will search its
path-list for occurrences of @@code{lib@@var{archive}.a} for every
@@var{archive} specified.
d628 7
a634 5
libraries with extensions other than @@code{.a}.  Specifically, on ELF
and SunOS systems, @@command{ld} will search a directory for a library with
an extension of @@code{.so} before searching for one with an extension of
@@code{.a}.  By convention, a @@code{.so} extension indicates a shared
library.
@


1.190
log
@ld/
	* ldlang.c (lang_insert_orphan): Provide start/stop loadaddr syms
	rather than defining unconditionally.
	(lang_leave_overlay_section): Likewise.
	* ld.texinfo (Overlay Description): Update description and examples
	for start/stop syms.
ld/testsuite/
	* ld-elf/overlay.d: -u symbols we want to see in the output.
@
text
@d130 1
a6809 2

@@contents
@


1.189
log
@bfd:
	* Makefile.am (bfdver.h): Only set VERSION_PACKAGE in bfdver.texi
	if nonempty.
	* configure.in (REPORT_BUGS_TO): Do not use "URL:" prefix.
	* Makefile.in, configure, doc/Makefile.in: Regenerate.

binutils:
	* doc/binutils.texi: Include VERSION_PACKAGE when reporting
	version.

gas:
	* doc/as.texinfo: Include VERSION_PACKAGE when reporting version.

gprof:
	* Makefile.am (TEXI2POD): Include $(AM_MAKEINFOFLAGS).
	(AM_MAKEINFOFLAGS, TEXI2DVI): Define with -I ../bfd/doc.
	* Makefile.in: Regenerate.
	* gprof.texi: Include bfdver.texi.  Report both VERSION_PACKAGE
	and VERSION.

ld:
	* ld.texinfo: Include VERSION_PACKAGE when reporting version.
@
text
@d4033 1
a4033 1
defines two symbols.  The symbol @@code{__load_start_@@var{secname}} is
d4058 1
a4058 1
following symbols will be defined: @@code{__load_start_text0},
d4080 2
a4081 2
  __load_start_text0 = LOADADDR (.text0);
  __load_stop_text0 = LOADADDR (.text0) + SIZEOF (.text0);
d4083 2
a4084 2
  __load_start_text1 = LOADADDR (.text1);
  __load_stop_text1 = LOADADDR (.text1) + SIZEOF (.text1);
@


1.188
log
@2007-03-20  Paul Brook  <paul@@codesourcery.com>

	ld/
	* emultempl/armelf.em (pic_veneer): New variable.
	(PARSE_AND_LIST_PROLOGUE): Add OPTION_PIC_VENEER.
	(PARSE_AND_LIST_ARGS_CASES): Ditto.
	(PARSE_AND_LIST_LONGOPTS): Add "pic-veneer".
	(PARSE_AND_LIST_OPTIONS): Ditto.
	* ld.texinfo: Document --pic-veneer.

	ld/testsuite/
	* ld-arm/arm-elf.exp (ld-arm/arm-elf.exp): Add arm-pic-veneer.
	* ld-arm/arm-pic-veneer.d: New test.
	* ld-arm/arm-pic-veneer.s: New test.

	bfd/
	* bfd-in.h (bfd_elf32_arm_set_target_relocs): Update prototype.
	* bfd-in2.h: Regenerate.
	* elf32-arm.c (elf32_arm_link_hash_table): Add pic_veneer.
	(record_arm_to_thumb_glue): Use globals->pic_veneer.
	(elf32_arm_create_thumb_stub): Ditto.
	(bfd_elf32_arm_set_target_relocs): Set globals->pic_veneer.
@
text
@d64 5
a68 1
This file documents the @@sc{gnu} linker LD version @@value{VERSION}.
d96 4
a99 1
@@subtitle @@code{ld} version 2
d135 5
a139 1
This file documents the @@sc{gnu} linker ld version @@value{VERSION}.
@


1.187
log
@	bfd/
	* bfd-in.h (bfd_elf32_arm_set_target_relocs): Add "bfd *"
	argument and extra last argument.
	* bfd-in2.h: Regenerate.
	* elf32-arm.c (elf32_arm_obj_tdata): Add no_enum_size_warning
	member.
	(bfd_elf32_arm_set_target_relocs): Add "bfd *" argument and
	extra last argument.  Set no_enum_size_warning appropriately.
	(elf32_arm_merge_eabi_attributes): Improve enum sizes
	diagnostic, suppressing it when no_enum_size_warning dictates.

	ld/
	* ld.texinfo: Document --no-enum-size-warning.
	* emultempl/armelf.em (no_enum_size_warning): New.
	(arm_elf_create_output_section_statements): Correct typo
	in comment.  Pass no_enum_size_warning to
	bfd_elf32_arm_set_target_relocs.
	(PARSE_AND_LIST_PROLOGUE): Define OPTION_NO_ENUM_SIZE_WARNING.
	(PARSE_AND_LIST_OPTIONS): Document --no-enum-size-warning.
	(PARSE_AND_LIST_ARGS_CASES): Add OPTION_NO_ENUM_SIZE_WARNING
	case.
@
text
@d5409 7
@


1.186
log
@bfd/

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (bfdver.h): Substitute report_bugs_to.  Also
	create doc/bfdver.texi.
	* Makefile.in: Regenerated.

	* configure.in (--with-bugurl): New option.
	* configure: Regenerated.

	* version.h (REPORT_BUGS_TO): New.

binutils/

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (REPORT_BUGS_TO): Removed.
	(INCLUDES): Remove -DREPORT_BUGS_TO.
	* Makefile.in: Regenerated.

	* bucomm.c: Don't include bfdver.h.
	* objdump.c: Likewise.
	* version.c: Likewise.

	* bucomm.h: Include bfdver.h.

	* configure.in (--with-bugurl): Removed.
	* configure: Regenerated.

	* doc/Makefile.am (binutils_TEXINFOS): Removed.
	(AM_MAKEINFOFLAGS): Add -I ../../bfd/doc.
	(TEXI2DVI): Likewise.
	(config.texi): Removed.
	(MOSTLYCLEANFILES): Remove config.texi.
	* doc/Makefile.in: Regenerated.

	* doc/binutils.texi: Include bfdver.texi instead of
	config.texi.

gas/

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (REPORT_BUGS_TO): Removed.
	(INCLUDES): Remove -DREPORT_BUGS_TO.
	* Makefile.in: Regenerated.

	* configure.in (--with-bugurl): Removed.
	* configure: Regenerated.

	* doc/Makefile.am (as_TEXINFOS): Remove gasver.texi.
	(AM_MAKEINFOFLAGS): Add -I ../../bfd/doc.
	(TEXI2DVI): Likewise.
	(gasver.texi): Removed.
	(MOSTLYCLEANFILES): Remove gasver.texi.
	(as.1): Don't depend on gasver.texi.
	* doc/Makefile.in: Regenerated.

	* doc/as.texi: Include bfdver.texi instead of gasver.texi.

gprof/

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (REPORT_BUGS_TO): Removed.
	(INCLUDES): Remove -DREPORT_BUGS_TO.
	* Makefile.in: Regenerated.

	* configure.in (--with-bugurl): Removed.
	* configure: Regenerated.

ld/

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ld_TEXINFOS): Remove ldver.texi.
	(AM_MAKEINFOFLAGS): Add -I ../../bfd/doc.
	(TEXI2DVI): Likewise.
	(REPORT_BUGS_TO): Removed.
	(INCLUDES): Remove -DREPORT_BUGS_TO.
	(ldver.texi): Likewise.
	(ld.1): Don't depend on ldver.texi.
	(MOSTLYCLEANFILES): Remove ldver.texi.
	* Makefile.in: Regenerated.

	* configure.in (--with-bugurl): Removed.
	* configure: Regenerated.

	* lexsup.c: Include bfdver.h.

	* ld.texinfo: Include bfdver.texi instead of ldver.texi.
@
text
@d5522 9
@


1.185
log
@binutils:
	* configure.in (REPORT_BUGS_TEXI): Define to Texinfo version of
	bug-reporting URL.
	* doc/Makefile.am (config.texi): Define BUGURL.
	* doc/binutils.texi: Use BUGURL.  Remove text about large files
	and uuencoding.
	* Makefile.in, configure, doc/Makefile.in: Regenerate.

gas:
	* configure.in (REPORT_BUGS_TEXI): Define to Texinfo version of
	bug-reporting URL.
	* doc/Makefile.am (gasver.texi): Define BUGURL.
	* doc/as.texinfo: Use BUGURL.
	* Makefile.in, configure, doc/Makefile.in: Regenerate.

ld:
	* configure.in (REPORT_BUGS_TEXI): Define to Texinfo version of
	bug-reporting URL.
	* Makefile.am (ldver.texi): Define BUGURL.
	* ld.texinfo: Use BUGURL.
	* Makefile.in, configure: Regenerate.
@
text
@d9 1
a9 1
@@include ldver.texi
@


1.184
log
@	* NEWS: Mention --vfp11-denorm-fix option.
	* ld.texinfo: Document above.
	* emulparams/armelf_linux.sh (OTHER_TEXT_SECTIONS): Add
	.vfp11_veneer section.
	* emulparams/armelf.sh (OTHER_TEXT_SECTIONS): Likewise.
	* emultempl/armelf.em (vfp11_denorm_fix): New static variable.
	(arm_elf_before_allocation): Call bfd_elf32_arm_set_vfp11_fix,
	bfd_elf32_arm_init_maps and bfd_elf32_arm_vfp11_erratum_scan.
	(arm_elf_after_allocation): New function. Call
	bfd_elf32_arm_vfp11_fix_veneer_locations for all input statements.
	(arm_elf_create_output_section_statements): Pass vfp11 fix command
	line option to BFD.
	(OPTION_VFP11_DENORM_FIX): New option.
	(PARSE_AND_LIST_LONGOPTS): Handle new option.
	(PARSE_AND_LIST_OPTIONS): Likewise.
	(PARSE_AND_LIST_ARGS_CASES): Likewise.
	(LDEMUL_AFTER_ALLOCATION): Define.
@
text
@d4 1
a4 1
@@c 2001, 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.
d67 1
a67 1
2001, 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.
d111 1
a111 1
2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.
d6474 1
d6476 2
a6477 1
@@samp{bug-binutils@@@@gnu.org}.
@


1.183
log
@ld/

2007-01-19 H.J. Lu  <hongjiu.lu@@intel.com>

	* ld.h (args_type): Add new symbolic and dynamic_list fields.

	* ld.texinfo: Update -Bsymbolic-functions.

	* ldmain.c (main): Initialize command_line.symbolic to
	symbolic_unset and command_line.dynamic_list to
	dynamic_list_unset.  Check -Bsymbolic, -Bsymbolic-functions and
	--dynamic-list* before setting link_info.symbolic,
	link_info.dynamic and link_info.dynamic_data.

	* lexsup.c (option_values): Add OPTION_SYMBOLIC_FUNCTIONS.
	(ld_options): Use OPTION_SYMBOLIC_FUNCTIONS with
	-Bsymbolic-functions.
	(parse_args): Handle -Bsymbolic-functions.  Don't set
	link_info.dynamic, link_info.dynamic_data and link_info.symbolic
	here.  Set command_line.symbolic for -Bsymbolic.  Set
	command_line.dynamic_list and command_line.symbolic for
	--dynamic-list-data, --dynamic-list-cpp-new,
	--dynamic-list-cpp-typeinfo and --dynamic-list.

ld/testsuite/

2007-01-19 H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-elf/dl6.c: New file.
	* ld-elf/dl6a.out: Likewise.
	* ld-elf/dl6amain.c: Likewise.
	* ld-elf/dl6b.out: Likewise.
	* ld-elf/dl6bmain.c: Likewise.
	* ld-elf/dl6cmain.c: Likewise.
	* ld-elf/dl6dmain.c: Likewise.

	* ld-elf/shared.exp: Add new tests for -Bsymbolic,
	-Bsymbolic-functions, --dynamic-list-data and
	--dynamic-list-cpp-new.
@
text
@d5492 30
@


1.182
log
@ld/

2007-01-19 H.J. Lu  <hongjiu.lu@@intel.com>

	* NEWS: Mention --default-script/-dT.

	* ld.h (args_type): Add a default_script field.

	* ld.texinfo: Document --default-script/-dT.

	* ldmain.c (main): Handle command_line.default_script.

	* lexsup.c (option_values): Add OPTION_DEFAULT_SCRIPT.
	(ld_options): Add entries for --default-script and -dT.
	(parse_args): Handle --default-script/-dT.

ld/testsuite/

2007-01-19 H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-scripts/default-script.exp: New file.
	* ld-scripts/default-script.s: Likewise.
	* ld-scripts/default-script.t: Likewise.
	* ld-scripts/default-script1.d: Likewise.
	* ld-scripts/default-script2.d: Likewise.
	* ld-scripts/default-script3.d: Likewise.
	* ld-scripts/default-script4.d: Likewise.
@
text
@a1152 1
@@option{-Bsymbolic-functions} is an alias for @@option{--dynamic-list-data}.
@


1.181
log
@bfd/

2007-01-16  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/3831
	* elf-bfd.h (bfd_elf_link_mark_dynamic_symbol): Add an
	argument, Elf_Internal_Sym *.

	* elflink.c (bfd_elf_link_mark_dynamic_symbol): Mark a data
	symbol dynamic if info->dynamic_data is TRUE.
	(bfd_elf_record_link_assignment): Updated call to
	bfd_elf_record_link_assignment.
	(_bfd_elf_merge_symbol): Likewise.  Always call
	bfd_elf_link_mark_dynamic_symbol.

include/

2007-01-16  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/3831
	* bfdlink.h (bfd_link_info): Rename dynamic to dynamic_list.
	Add dynamic and dynamic_data.

ld/

2007-01-16  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/3831
	* NEWS: Mention -Bsymbolic-functions, --dynamic-list-data and
	--dynamic-list-cpp-new.

	* ld.texinfo: Document -Bsymbolic-functions, --dynamic-list-data
	and --dynamic-list-cpp-new.

	* ldlang.c (lang_append_dynamic_list_cpp_new): New.
	(lang_process): Change link_info.dynamic to
	link_info.dynamic_list.
	(lang_append_dynamic_list): Likewise.
	* ldmain.c (main): Likewise.  Initialize link_info.dynamic and
	link_info.dynamic_data to FALSE.

	* ldlang.h (lang_append_dynamic_list_cpp_new): New.

	* lexsup.c (option_values): Add OPTION_DYNAMIC_LIST_DATA and
	OPTION_DYNAMIC_LIST_CPP_NEW.
	(ld_options): Add entries for -Bsymbolic-functions,
	--dynamic-list-data and --dynamic-list-cpp-new.  Make
	-Bsymbolic-functions an alias of --dynamic-list-data.
	(parse_args): Change link_info.dynamic to link_info.dynamic_list.
	Set link_info.dynamic to TRUE for --dynamic-list and
	--dynamic-list-cpp-typeinfo.  Handle --dynamic-list-data and
	--dynamic-list-cpp-new.

ld/testsuite/

2007-01-16  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/3831
	* ld-elf/del.cc: New.
	* ld-elf/dl5.cc: Likewise.
	* ld-elf/dl5.out: Likewise.
	* ld-elf/new.cc: Likewise.

	* ld-elf/shared.exp: Add tests for --dynamic-list-data and
	 --dynamic-list-cpp-new.
@
text
@d859 16
@


1.180
log
@2006-11-20  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld.texinfo: Fix a typo.
@
text
@d1133 8
d1154 9
@


1.179
log
@	* ld.texinfo (Output Section Discarding): Fix xref.
@
text
@d4406 1
a4406 1
Node name can be omited, provided it is the only version node
@


1.178
log
@Fix score bugs
@
text
@d3699 1
a3699 1
The linker will ignore address assignments (@@xref{Output Section Address})
d3702 2
a3703 2
the address assignments, possibly advancing dot and/or current lma
even though the section is discarded.
@


1.177
log
@bfd/
	* elf-bfd.h (struct elf_link_hash_table): Reorder.  Add
	text_index_section and data_index_section.
	(struct elf_backend_data): Add elf_backend_init_index_section.
	(_bfd_elf_init_1_index_section): Declare.
	(_bfd_elf_init_2_index_sections): Declare.
	* elfxx-target.h (elf_backend_init_index_section): Define.
	(elfNN_bed): Init new field.
	* elflink.c (_bfd_elf_link_omit_section_dynsym): Keep first tls
	section and text_index_section plus data_index_section.
	(_bfd_elf_link_renumber_dynsyms): Clear dynindx on omitted sections.
	(_bfd_elf_init_1_index_section): New function.
	(_bfd_elf_init_2_index_sections): New function.
	(bfd_elf_size_dynsym_hash_dynstr): Call elf_backend_init_index_section.
	(elf_link_input_bfd): When emitting relocs, use text_index_section
	and data_index_section for removed sections.
	* elf-m10300.c (elf_backend_omit_section_dynsym): Define.
	* elf32-i386.c: Likewise.
	* elf32-m32r.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-xstormy16.c: Likewise.
	* elf32-xtensa.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-hppa.c: Likewise.
	* elf64-mmix.c: Likewise.
	* elf64-sh64.c: Likewise.
	* elfxx-ia64.c: Likewise.
	* elf32-arm.c (elf32_arm_final_link_relocate): Use text_index_section
	and data_index_section sym for relocs against sections with no dynamic
	section sym.
	(elf_backend_init_index_section): Define.
	* elf32-cris.c: Similarly.
	* elf32-hppa.c: Similarly.
	* elf32-i370.c: Similarly.
	* elf32-m68k.c: Similarly.
	* elf32-mips.c: Similarly.
	* elf32-ppc.c: Similarly.
	* elf32-s390.c: Similarly.
	* elf32-sparc.c: Similarly.
	* elf32-vax.c: Similarly.
	* elf64-mips.c: Similarly.
	* elf64-ppc.c: Similarly.
	* elf64-s390.c: Similarly.
	* elf64-sparc.c: Similarly.
	* elf64-x86-64.c: Similarly.
	* elfn32-mips.c: Similarly.
	* elfxx-mips.c: Similarly.
	* elfxx-sparc.c: Similarly.
	* linker.c (fix_syms): Base symbols in removed sections on
	previous section in preference to using absolute section.

ld/
	* ldlang.c (strip_excluded_output_sections): Do strip sections
	that define syms, but don't ignore them.
	* ld.texinfo (Output Section Discarding): Revise.
	* emultempl/armcoff.em (gld${EMULATION_NAME}_finish): Always call
	finish_default.

ld/testsuite/
	Update for section sym changes.
@
text
@d1254 3
a1256 3
with @@samp{-r}. The default behaviour (of not performing this garbage
collection) can be restored by specifying @@samp{--no-gc-sections} on
the command line.
@


1.176
log
@bfd/

2006-09-26  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/3223
	PR ld/3267
	* elf.c (assign_file_positions_for_non_load_sections): Don't
	warn zero size allocated sections.

ld/

2006-09-26  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/3223
	PR ld/3267
	* ld.texinfo: Updated Output Section Discarding.

	* ldlang.h (lang_output_section_statement_type): Add
	section_relative_symbol.
	* ldlang.c (strip_excluded_output_sections): Don't strip a
	section with a symbol relative to it.
	(lang_size_sections_1): Mark if an output section has a symbol
	symbol relative to it.

ld/testsuite/

2006-09-26  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/3223
	PR ld/3267
	* ld-scripts/empty-address-1.d: New file.
	* ld-scripts/empty-address-1.s: Likewise.
	* ld-scripts/empty-address-1.t: Likewise.
	* ld-scripts/empty-address-2.s: Likewise.
	* ld-scripts/empty-address-2a.d: Likewise.
	* ld-scripts/empty-address-2a.t: Likewise.
	* ld-scripts/empty-address-2b.d: Likewise.
	* ld-scripts/empty-address-2b.t: Likewise.
	* ld-scripts/empty-address-3.s: Likewise.
	* ld-scripts/empty-address-3a.d: Likewise.
	* ld-scripts/empty-address-3a.t: Likewise.
	* ld-scripts/empty-address-3b.d: Likewise.
	* ld-scripts/empty-address-3b.t: Likewise.
	* ld-scripts/empty-address-3c.d: Likewise.
	* ld-scripts/empty-address-3c.t: Likewise.
	* ld-scripts/empty-address.exp: Likewise.
@
text
@d3687 3
a3689 3
The linker will not create output section which do not have any
contents.  This is for convenience when referring to input sections that
may or may not be present in any of the input files.  For example:
d3695 9
a3703 7
@@samp{.foo} section in at least one input file.

If you use anything other than an input section description as an output
section command, such as a symbol assignment, then the output section
will always be created, even if there are no matching input sections.
When a section is discarded, its address (@@xref{Output Section Address})
will also be ignored.
@


1.175
log
@        * ld.texinfo (Options): Update description of local symbols for -X.
@
text
@d3691 1
a3691 1
.foo @@{ *(.foo) @@}
d3700 2
@


1.174
log
@2006-09-08  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld.texinfo: Document --dynamic-list-cpp-typeinfo.
@
text
@a911 1
@@cindex L, deleting symbols beginning
d914 3
a916 2
Delete all temporary local symbols.  For most targets, this is all local
symbols whose names begin with @@samp{L}.
@


1.173
log
@bfd/

2006-09-07  H.J. Lu  <hongjiu.lu@@intel.com>

	* elf-bfd.h (elf_link_hash_entry): Add a dynamic field.
	(bfd_elf_link_mark_dynamic_symbol): New.
	(SYMBOLIC_BIND): New.

	* elf32-i386.c (elf_i386_check_relocs): Replace info->symbolic
	with SYMBOLIC_BIND (info, h).
	(elf_i386_relocate_section): Likewise.
	* elf64-x86-64.c (elf64_x86_64_check_relocs): Likewise.
	(elf64_x86_64_relocate_section): Likewise.
	* elfxx-ia64.c (elfNN_ia64_check_relocs): Likewise.

	* elflink.c (bfd_elf_link_mark_dynamic_symbol): New.
	(bfd_elf_record_link_assignment): Call
	bfd_elf_link_mark_dynamic_symbol on new entry.
	(_bfd_elf_merge_symbol): Likewise.
	(_bfd_elf_export_symbol): Return if the symbol isn't exported.
	(_bfd_elf_fix_symbol_flags): Replace info->symbolic with
	SYMBOLIC_BIND (info, h).
	(_bfd_elf_dynamic_symbol_p): Likewise.
	(_bfd_elf_symbol_refs_local_p): Likewise.
	(bfd_elf_size_dynamic_sections): Updated.

include/

2006-09-07  H.J. Lu  <hongjiu.lu@@intel.com>

	* bfdlink.h (bfd_elf_dynamic_list): New.
	(bfd_link_info): Add a dynamic field.

ld/

2006-09-07  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (CXX): Set to g++.
	(CXX_FOR_TARGET): Likewise.
	* Makefile.in: Regenerated.

	* NEWS: Mention --dynamic-list.

	* ld.texinfo: Document --dynamic-list.

	* ldgram.y: Support dynamic list.

	* ldlang.c (lang_process): Call lang_finalize_version_expr_head
	on link_info.dynamic if needed.
	(lang_append_dynamic_list): New.
	(lang_append_dynamic_list_cpp_typeinfo): New.
	* ldlang.h (lang_append_dynamic_list): Likewise.
	* ldlang.h (lang_append_dynamic_list_cpp_typeinfo): Likewise.

	* ldlex.h (input_enum): Add input_dynamic_list.
	* ldlex.l: Handle it.

	* ldmain.c (main): Initialize link_info.dynamic.

	* lexsup.c (option_values): Add OPTION_DYNAMIC_LIST and
	OPTION_DYNAMIC_LIST_CPP_TYPEINFO.
	(ld_options): Add entries for OPTION_DYNAMIC_LIST and
	OPTION_DYNAMIC_LIST_CPP_TYPEINFO.
	(parse_args): Handle OPTION_DYNAMIC_LIST and
	OPTION_DYNAMIC_LIST_CPP_TYPEINFO.

ld/testsuite/

2006-09-07  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-elf/dl1.c: New file.
	* ld-elf/dl1.list: Likewise.
	* ld-elf/dl1.out: Likewise.
	* ld-elf/dl1main.c: Likewise.
	* ld-elf/dl2.c: Likewise.
	* ld-elf/dl2.list: Likewise.
	* ld-elf/dl2a.out: Likewise.
	* ld-elf/dl2b.out: Likewise.
	* ld-elf/dl2main.c: Likewise.
	* ld-elf/dl2xxx.c: Likewise.
	* ld-elf/dl2xxx.list: Likewise.
	* ld-elf/dl3.cc: Likewise.
	* ld-elf/dl3.list: Likewise.
	* ld-elf/dl3a.out: Likewise.
	* ld-elf/dl3b.out: Likewise.
	* ld-elf/dl3header.h: Likewise.
	* ld-elf/dl3main.cc: Likewise.

	* ld-elf/shared.exp: Updated.

	* lib/ld-lib.exp (run_ld_link_exec_tests): Take an optional
	argument for source language. Use CC/CXX for link, depending
	on source language.
	(run_cc_link_tests): Likewise.
@
text
@d1146 4
@


1.172
log
@	* NEWS: Mention LMA default change.
	* ld.texinfo (Output Section LMA): Update default description.
	(Location Counter): Clarify backward movement.
	* ldlang.c (lang_size_sections_1): Leave non-alloc sections with
	default lma equal to vma.  Warn on backward movement of dot.
@
text
@d490 1
a490 1
You can also use the version script to control what symbols should
d492 1
a492 1
See the description of @@samp{--version-script} in @@ref{VERSION}.
d1133 13
@


1.171
log
@* ldmain.c (main): Initialise print_gc_sections field of link_info structure.
* lexsup.c: Add --print-gc-sections and --no-print-gc-sections switches.
* ld.texinfo: Document new switches.
* NEWS: Mention new switches.
* bfdlink.h (struct bfd_link_info): New field: print_gc_sections.
* elflink.c (elf_gc_sweep): If info.print_gc_sections is true, list removed sections to stderr.
@
text
@d3767 2
a3768 4
The linker will normally set the LMA equal to the VMA.  You can change
that by using the @@code{AT} keyword.  The expression @@var{lma} that
follows the @@code{AT} keyword specifies the load address of the
section.
d3774 7
d4594 3
a4596 1
location counter may never be moved backwards.
@


1.170
log
@Fix spelling typos
@
text
@d1233 2
a1234 2
@@item --no-gc-sections
@@itemx --gc-sections
d1241 12
@


1.169
log
@include/
	* bfdlink.h (struct bfd_link_info): Add emit_hash and
	emit_gnu_hash bitfields.
include/elf/
	* common.h (SHT_GNU_HASH, DT_GNU_HASH): Define.
ld/
	* scripttempl/elf.sc: Add .gnu.hash section.
	* emultempl/elf32.em (OPTION_HASH_STYLE): Define.
	(gld${EMULATION_NAME}_add_options): Register --hash-style option.
	(gld${EMULATION_NAME}_handle_option): Handle it.
	(gld${EMULATION_NAME}_list_options): Document it.
	* ldmain.c (main): Initialize emit_hash and emit_gnu_hash.
	* ld.texinfo: Document --hash-style option.
bfd/
	* elf.c (_bfd_elf_print_private_bfd_data): Handle DT_GNU_HASH.
	(bfd_section_from_shdr, elf_fake_sections, assign_section_numbers):
	Handle SHT_GNU_HASH.
	(special_sections_g): Include .gnu.hash section.
	(bfd_elf_gnu_hash): New function.
	* elf-bfd.h (bfd_elf_gnu_hash, _bfd_elf_hash_symbol): New prototypes.
	(struct elf_backend_data): Add elf_hash_symbol method.
	* elflink.c (_bfd_elf_link_create_dynamic_sections): Create .hash
	only if info->emit_hash, create .gnu.hash section if
	info->emit_gnu_hash.
	(struct collect_gnu_hash_codes): New type.
	(elf_collect_gnu_hash_codes, elf_renumber_gnu_hash_syms,
	_bfd_elf_hash_symbol): New functions.
	(compute_bucket_count): Don't compute HASHCODES array, instead add
	that and NSYMS as arguments.  Use bed->s->sizeof_hash_entry
	instead of bed->s->arch_size / 8.  Fix .hash size estimation.
	When not optimizing, use the number of hashed symbols rather than
	dynsymcount.
	(bfd_elf_size_dynamic_sections): Only add DT_HASH if info->emit_hash,
	and ADD DT_GNU_HASH if info->emit_gnu_hash.
	(bfd_elf_size_dynsym_hash_dynstr): Size .hash only if info->emit_hash,
	adjust compute_bucket_count caller.  Create and populate .gnu.hash
	section if info->emit_gnu_hash.
	(elf_link_output_extsym): Only populate .hash section if
	finfo->hash_sec != NULL.
	(bfd_elf_final_link): Adjust assertion.  Handle DT_GNU_HASH.
	* elfxx-target.h (elf_backend_hash_symbol): Define if not yet defined.
	(elfNN_bed): Add elf_backend_hash_symbol.
	* elf64-x86-64.c (elf64_x86_64_hash_symbol): New function.
	(elf_backend_hash_symbol): Define.
	* elf32-i386.c (elf_i386_hash_symbol): New function.
	(elf_backend_hash_symbol): Define.
binutils/
	* readelf.c (get_dynamic_type): Handle DT_GNU_HASH.
	(get_section_type_name): Handle SHT_GNU_HASH.
	(dynamic_info_DT_GNU_HASH): New variable.
	(process_dynamic_section): Handle DT_GNU_HASH.
	(process_symbol_table): Print also DT_GNU_HASH histogram.
ld/testsuite/
	* ld-powerpc/tlsso32.r: Adjust.
	* ld-powerpc/tlsso32.d: Adjust.
	* ld-powerpc/tlsso32.g: Adjust.
	* ld-powerpc/tlsso.r: Adjust.
	* ld-powerpc/tlsso.g: Adjust.
	* ld-powerpc/tlstocso.g: Adjust.
@
text
@d1464 1
a1464 1
filesystems.
d2040 1
a2040 1
If given, the appropriate bit in the ``Charateristics'' field of the COFF
d2042 1
a2042 1
greater than 2 gigabytes.  This should be used in conjuction with the /3GB
d2684 1
a2684 1
@@cindex output file name in linker scripot
d5203 1
a5203 1
@@command{ld} finds all @@code{ldc.w, stc.w} instrcutions which use the 
d5348 1
a5348 1
betweem ARM and Thumb code.  These stubs only work with code that has
d5748 1
a5748 1
See @@ref{Options,,Command Line Options} for detailed decription of the
d5825 2
a5826 2
When the .DEF file is used to build an application. rather than a
library, the @@code{NAME <name>} command shoud be used instead of
d5920 1
a5920 1
imformation.
d5932 1
a5932 1
decorations to archieve a behavior that conforms to that on POSIX/Un*x
d5976 1
a5976 1
traditional import library method, expecially when linking large
d6457 1
a6457 1
copy of @@command{ld} is out of synch, or you have encountered a bug in the
@


1.168
log
@PR ld/2874
* ld.texinfo: Remove "Using LD" from the title since it is redundant.
@
text
@d1886 8
@


1.167
log
@PR ld/2877
* ld.texinfo: Fix spelling mistakes.
@
text
@d88 1
a88 1
@@settitle Using LD, the GNU linker
d90 1
a90 2
@@title Using ld
@@subtitle The GNU linker
d102 1
a102 1
\hfill {\it Using LD, the GNU linker}\par
d127 1
a127 1
@@top Using ld
d219 2
a220 3
@@command{ld} entry in @@code{info}, or the manual
ld: the GNU linker, for full details on the command language and
on other aspects of the GNU linker.
@


1.166
log
@(-rpath-link): Clarify distinction between -rpath and -rpath-link.
@
text
@d325 1
a325 1
only be preceeded by two dashes.  This is to reduce confusion with the
d776 1
a776 1
Leave relocation sections and contents in fully linked exececutables.
@


1.165
log
@* emultempl/pe.em (gld_${EMULATION_NAME}_open_dynamic_archive): Restructure.
  Add native "%s.lib" format to search list
* ld.texinfo (node WIN32): Update documentation on dynamic lib search order.
   Add another reason for using import libs.
@
text
@d219 1
a219 1
This man page does not describe the command language; see the 
d221 2
a222 2
ld: the GNU linker, for full details on the command language and 
on other aspects of the GNU linker. 
d553 1
a553 1
@@option{-b}, @@option{--format}, @@option{--oformat} options, the 
d1024 1
a1024 1
Other keywords are ignored for Solaris compatibility.  
d1125 1
a1125 1
libraries. 
d1275 1
a1275 1
libraries being linked in.  
d1300 1
a1300 1
them at load time to select which function is most appropriate 
d1496 1
a1496 1
libraries.
d1505 3
a1507 1
at link time. It is for the native linker only.
d1801 1
a1801 1
Warn if the linker adds a DT_TEXTREL to a shared object.  
d1975 1
a1975 1
@@code{DllEntryPoint@@@@0}, @@code{DllMainCRTStartup@@@@12}, and 
d1977 4
a1980 4
exported.  Also, symbols imported from other DLLs will not be 
re-exported, nor will symbols specifying the DLL's internal layout 
such as those beginning with @@code{_head_} or ending with 
@@code{_iname}.  In addition, no symbols from @@code{libgcc}, 
d1984 1
a1984 1
extensive list of cygwin-private symbols that are not exported 
d1986 1
a1986 1
These cygwin-excludes are: @@code{_cygwin_dll_entry@@@@12}, 
d1988 1
a1988 1
@@code{_fmode}, @@code{_impure_ptr}, @@code{cygwin_attach_dll}, 
d1990 1
a1990 1
@@code{cygwin_premain3}, and @@code{environ}. 
d2113 1
a2113 1
search for @@code{<string><basename>.dll} in preference to 
d2117 1
a2117 1
@@code{--dll-search-prefix=cyg}. 
d2122 2
a2123 2
Do sophisticated linking of @@code{_symbol} to @@code{__imp__symbol} for 
DATA imports from DLLs, and create the necessary thunking symbols when 
d2132 1
a2132 1
"variable '<var>' can't be auto-imported. Please read the 
d2135 2
a2136 2
This message occurs when some (sub)expression accesses an address 
ultimately given by the sum of two constants (Win32 import tables only 
@


1.164
log
@	* ld.texinfo: Document new -z lazy option.
	* emultempl/elf32.em (gld${EMULATION_NAME}_handle_option): Handle
	new option.
	(gld${EMULATION_NAME}_list_options): Update help text.
@
text
@d4 1
a4 1
@@c 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.
d67 1
a67 1
2001, 2002, 2003, 2004 Free Software Foundation, Inc.
d112 1
a112 1
2002, 2003, 2004 Free Software Foundation, Inc.
d5987 4
a5990 3
libxxx.dll.a 
xxx.dll.a 
libxxx.a 
d5992 2
a5993 2
libxxx.dll 
xxx.dll 
d6065 1
a6065 1
wonder why import libraries are used at all.  There are two reasons:
d6076 5
d6083 1
a6083 1
a dll, in most cases, is a useful addition to the suite of tools 
@


1.163
log
@bfd/

2006-05-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* bfd.c (bfd_emul_get_maxpagesize): New.
	(bfd_elf_set_pagesize): Likewise.
	(bfd_emul_set_maxpagesize): Likewise.
	(bfd_emul_get_commonpagesize): Likewise.
	(bfd_emul_set_commonpagesize): Likewise.
	* bfd-in2.h: Regenerated.

	* elf-bfd.h (elf_backend_data): Add commonpagesize.
	(xvec_get_elf_backend_data): New.
	(get_elf_backend_data): Use xvec_get_elf_backend_data.

	* elf32-arm.c (elf32_arm_vxworks_bed): Remove const.
	* elfxx-target.h (elfNN_bed): Likewise.

	* elf32-arm.c (ELF_COMMONPAGESIZE): Defined.
	* elf32-mips.c (ELF_COMMONPAGESIZE): Likewise.
	* elf32-ppc.c (ELF_COMMONPAGESIZE): Likewise.
	* elf32-sh.c (ELF_COMMONPAGESIZE): Likewise.
	* elf32-sh64.c (ELF_COMMONPAGESIZE): Likewise.
	* elf32-sparc.c (ELF_COMMONPAGESIZE): Likewise.
	* elf64-alpha.c (ELF_COMMONPAGESIZE): Likewise.
	* elf64-ppc.c (ELF_COMMONPAGESIZE): Likewise.
	* elf64-sparc.c (ELF_COMMONPAGESIZE): Likewise.
	* elf64-x86-64.c (ELF_COMMONPAGESIZE): Likewise.
	* elfn32-mips.c (ELF_COMMONPAGESIZE): Likewise.
	* elfxx-ia64.c (ELF_COMMONPAGESIZE): Likewise.

	* elfxx-target.h (ELF_COMMONPAGESIZE): Define if not defined.
	(elfNN_bed): Initialize commonpagesize with ELF_COMMONPAGESIZE.

	* targets.c (bfd_find_target): Support NULL abfd.

ld/

2006-05-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* emulparams/arcelf.sh (MAXPAGESIZE): Changed to
	"CONSTANT (MAXPAGESIZE)".
	* emulparams/armelf_nbsd.sh: Likewise.
	* emulparams/armelf_vxworks.sh: Likewise.
	* emulparams/armnto.sh: Likewise.
	* emulparams/armsymbian.sh: Likewise.
	* emulparams/crislinux.sh: Likewise.
	* emulparams/elf32_i860.sh: Likewise.
	* emulparams/elf32_i960.sh: Likewise.
	* emulparams/elf32am33lin.sh: Likewise.
	* emulparams/elf32bfinfd.sh: Likewise.
	* emulparams/elf32bmipn32-defs.sh: Likewise.
	* emulparams/elf32frvfd.sh: Likewise.
	* emulparams/elf32i370.sh: Likewise.
	* emulparams/elf32lppcnto.sh: Likewise.
	* emulparams/elf32mcore.sh: Likewise.
	* emulparams/elf32openrisc.sh: Likewise.
	* emulparams/elf32ppcnto.sh: Likewise.
	* emulparams/elf32ppcwindiss.sh: Likewise.
	* emulparams/elf32vax.sh: Likewise.
	* emulparams/elf32xc16x.sh: Likewise.
	* emulparams/elf32xc16xl.sh: Likewise.
	* emulparams/elf32xc16xs.sh: Likewise.
	* emulparams/elf64_aix.sh: Likewise.
	* emulparams/elf64hppa.sh: Likewise.
	* emulparams/elf64mmix.sh: Likewise.
	* emulparams/elf_i386_be.sh: Likewise.
	* emulparams/elf_i386_chaos.sh: Likewise.
	* emulparams/elf_i386_ldso.sh: Likewise.
	* emulparams/hppa64linux.sh: Likewise.
	* emulparams/hppalinux.sh: Likewise.
	* emulparams/hppaobsd.sh: Likewise.
	* emulparams/i386lynx.sh: Likewise.
	* emulparams/i386moss.sh: Likewise.
	* emulparams/i386nto.sh: Likewise.
	* emulparams/i386nw.sh: Likewise.
	* emulparams/m32relf_linux.sh: Likewise.
	* emulparams/m68kpsos.sh: Likewise.
	* emulparams/or32elf.sh: Likewise.
	* emulparams/pjelf.sh: Likewise.
	* emulparams/pjlelf.sh: Likewise.
	* emulparams/ppclynx.sh: Likewise.
	* emulparams/ppcnw.sh: Likewise.
	* emulparams/shelf32_nbsd.sh : Likewise.
	* emulparams/shelf_nbsd.sh: Likewise.
	* emulparams/shelf_nto.sh: Likewise.
	* emulparams/shlelf_nto.sh: Likewise.
	* emulparams/xtensa-config.sh: Likewise.

	* emulparams/armelf_linux.sh (MAXPAGESIZE): Changed to
	"CONSTANT (MAXPAGESIZE)".
	(COMMONPAGESIZE): Changed to "CONSTANT (COMMONPAGESIZE)".
	* emulparams/elf32_sparc.sh: Likewise.
	* emulparams/elf32bmip.sh: Likewise.
	* emulparams/elf32ppccommon.sh: Likewise.
	* emulparams/elf64_ia64.sh: Likewise.
	* emulparams/elf64_s390.sh: Likewise.
	* emulparams/elf64_sparc.sh: Likewise.
	* emulparams/elf64alpha.sh: Likewise.
	* emulparams/elf64ppc.sh: Likewise.
	* emulparams/elf_i386.sh: Likewise.
	* emulparams/elf_i386_vxworks.sh: Likewise.
	* emulparams/elf_s390.sh: Likewise.
	* emulparams/elf_x86_64.sh: Likewise.
	* emulparams/shlelf32_linux.sh: Likewise.
	* emulparams/shlelf_linux.sh: Likewise.

	* emulparams/elf32bmipn32.sh (COMMONPAGESIZE): Changed to
	"CONSTANT (COMMONPAGESIZE)".
	* emulparams/elf32btsmipn32.sh: Likewise.

	* emultempl/elf32.em (gld${EMULATION_NAME}_handle_option): Add
	"-z max-page-size=" and "-z common-page-size=".
	(gld${EMULATION_NAME}_list_options): Likewise.

	* ld.h (ld_config_type): Add maxpagesize and commonpagesize.

	* ld.texinfo: Document "-z max-page-size=" and
	"-z common-page-size=".

	* ldexp.c (exp_print_token): Handle CONSTANT.
	(fold_name): Likewise.
	* ldgram.y: Likewise.
	* ldlex.l: Likewise.

	* ldmain.c (main): Initiliaze config.maxpagesize and
	config.commonpagesize. Call bfd_emul_set_maxpagesize if
	config.maxpagesize isn't 0. Call bfd_emul_set_commonpagesize if
	config.commonpagesize config.maxpagesize isn't 0.
ld/testsuite/

2006-05-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-elf/binutils.exp: New file.
	* ld-elf/commonpage1.d: Likewise.
	* ld-elf/maxpage1.d: Likewise.
	* ld-elf/maxpage1.s: Likewise.
@
text
@d965 6
@


1.162
log
@
bfd/doc/

2006-05-11  Carlos O'Donell  <carlos@@codesourcery.com>

	* bfd.texinfo: Rename "Index" to "BFD Index"

gas/

2006-05-11  Carlos O'Donell  <carlos@@codesourcery.com>

	* doc/as.texinfo: Rename "Index" to "AS Index",
	and "ABORT" to "ABORT (COFF)".

ld/

2006-05-11  Carlos O'Donell  <carlos@@codesourcery.com>

	* ld.texinfo: Rename "Index" to "LD Index"
@
text
@d1010 6
@


1.161
log
@	* ld.texinfo: Document PowerPC and PowerPC64 options.
	* gen-doc.texi: Enable.
@
text
@d185 1
a185 1
* Index::                       Index
d6632 2
a6633 2
@@node Index
@@unnumbered Index
@


1.160
log
@binutils/
	* doc/Makefile.am (AM_MAKEINFOFLAGS): New.
	(TEXI2POD): Use AM_MAKEINFOFLAGS.
	(config.texi): Don't set top_srcdir.
	* doc/binutils.texi: Don't use top_srcdir.
	* aclocal.m4, Makefile.in, doc/Makefile.in: Regenerated.
gas/
	* doc/Makefile.am (AM_MAKEINFOFLAGS): New.
	(TEXI2POD): Use AM_MAKEINFOFLAGS.
	(asconfig.texi): Don't set top_srcdir.
	* doc/as.texinfo: Don't use top_srcdir.
	* aclocal.m4, Makefile.in, doc/Makefile.in: Regenerated.
ld/
	* Makefile.am (AM_MAKEINFOFLAGS): Add libiberty.
	(TEXI2POD): Use AM_MAKEINFOFLAGS.
	(configdoc.texi): Don't set top_srcdir.
	* ld.texinfo: Don't use top_srcdir.
	* aclocal.m4, Makefile.in: Regenerated.
@
text
@d43 2
d161 6
d1394 3
d5125 6
d5522 177
@


1.159
log
@Fix typo in documentation of --check-sections.
@
text
@d345 1
a345 1
@@include @@value{top_srcdir}/../libiberty/at-file.texi
@


1.159.2.1
log
@binutils/
	* doc/Makefile.am (AM_MAKEINFOFLAGS): New.
	(TEXI2POD): Use AM_MAKEINFOFLAGS.
	(config.texi): Don't set top_srcdir.
	* doc/binutils.texi: Don't use top_srcdir.
	* aclocal.m4, Makefile.in, doc/Makefile.in: Regenerated.
gas/
	* doc/Makefile.am (AM_MAKEINFOFLAGS): New.
	(TEXI2POD): Use AM_MAKEINFOFLAGS.
	(asconfig.texi): Don't set top_srcdir.
	* doc/as.texinfo: Don't use top_srcdir.
	* aclocal.m4, Makefile.in, doc/Makefile.in: Regenerated.
ld/
	* Makefile.am (AM_MAKEINFOFLAGS): Add libiberty.
	(TEXI2POD): Use AM_MAKEINFOFLAGS.
	(configdoc.texi): Don't set top_srcdir.
	* ld.texinfo: Don't use top_srcdir.
	* aclocal.m4, Makefile.in: Regenerated.
@
text
@d345 1
a345 1
@@include at-file.texi
@


1.159.2.2
log
@	* ld.texinfo: Document PowerPC and PowerPC64 options.
	* gen-doc.texi: Enable.
	* configdoc.texi: Regenerate.
	* ld.info: Regenerate.
@
text
@a42 2
@@set POWERPC
@@set POWERPC64
a158 6
@@ifset POWERPC
* PowerPC ELF32::               ld and PowerPC 32-bit ELF Support
@@end ifset
@@ifset POWERPC64
* PowerPC64 ELF64::             ld and PowerPC64 64-bit ELF Support
@@end ifset
a1385 3
@@ifset POWERPC
@@xref{PowerPC ELF32,,@@command{ld} and PowerPC 32-bit ELF Support}.
@@end ifset
a5113 6
@@ifset POWERPC
* PowerPC ELF32::		@@command{ld} and PowerPC 32-bit ELF Support
@@end ifset
@@ifset POWERPC64
* PowerPC64 ELF64::		@@command{ld} and PowerPC64 64-bit ELF Support
@@end ifset
a5504 177
@@ifset POWERPC
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node PowerPC ELF32
@@section @@command{ld} and PowerPC 32-bit ELF Support
@@cindex PowerPC long branches
@@kindex --relax on PowerPC
Branches on PowerPC processors are limited to a signed 26-bit
displacement, which may result in @@command{ld} giving
@@samp{relocation truncated to fit} errors with very large programs.
@@samp{--relax} enables the generation of trampolines that can access
the entire 32-bit address space.  These trampolines are inserted at
section boundaries, so may not themselves be reachable if an input
section exceeds 33M in size.

@@cindex PowerPC ELF32 options
@@table @@option
@@cindex PowerPC PLT
@@kindex --bss-plt
@@item --bss-plt
Current PowerPC GCC accepts a @@samp{-msecure-plt} option that
generates code capable of using a newer PLT and GOT layout that has
the security advantage of no executable section ever needing to be
writable and no writable section ever being executable.  PowerPC
@@command{ld} will generate this layout, including stubs to access the
PLT, if all input files (including startup and static libraries) were
compiled with @@samp{-msecure-plt}.  @@samp{--bss-plt} forces the old
BSS PLT (and GOT layout) which can give slightly better performance.

@@cindex PowerPC GOT
@@kindex --sdata-got
@@item --sdata-got
The new secure PLT and GOT are placed differently relative to other
sections compared to older BSS PLT and GOT placement.  The location of
@@code{.plt} must change because the new secure PLT is an initialized
section while the old PLT is uninitialized.  The reason for the
@@code{.got} change is more subtle:  The new placement allows
@@code{.got} to be read-only in applications linked with
@@samp{-z relro -z now}.  However, this placement means that
@@code{.sdata} cannot always be used in shared libraries, because the
PowerPC ABI accesses @@code{.sdata} in shared libraries from the GOT
pointer.  @@samp{--sdata-got} forces the old GOT placement.  PowerPC
GCC doesn't use @@code{.sdata} in shared libraries, so this option is
really only useful for other compilers that may do so.

@@cindex PowerPC stub symbols
@@kindex --emit-stub-syms
@@item --emit-stub-syms
This option causes @@command{ld} to label linker stubs with a local
symbol that encodes the stub type and destination.

@@cindex PowerPC TLS optimization
@@kindex --no-tls-optimize
@@item --no-tls-optimize
PowerPC @@command{ld} normally performs some optimization of code
sequences used to access Thread-Local Storage.  Use this option to
disable the optimization.
@@end table

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

@@ifset POWERPC64
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node PowerPC64 ELF64
@@section @@command{ld} and PowerPC64 64-bit ELF Support

@@cindex PowerPC64 ELF64 options
@@table @@option
@@cindex PowerPC64 stub grouping
@@kindex --stub-group-size
@@item --stub-group-size
Long branch stubs, PLT call stubs  and TOC adjusting stubs are placed
by @@command{ld} in stub sections located between groups of input sections.
@@samp{--stub-group-size} specifies the maximum size of a group of input
sections handled by one stub section.  Since branch offsets are signed,
a stub section may serve two groups of input sections, one group before
the stub section, and one group after it.  However, when using
conditional branches that require stubs, it may be better (for branch
prediction) that stub sections only serve one group of input sections.
A negative value for @@samp{N} chooses this scheme, ensuring that
branches to stubs always use a negative offset.  Two special values of
@@samp{N} are recognized, @@samp{1} and @@samp{-1}.  These both instruct
@@command{ld} to automatically size input section groups for the branch types
detected, with the same behaviour regarding stub placement as other
positive or negative values of @@samp{N} respectively.

Note that @@samp{--stub-group-size} does not split input sections.  A
single input section larger than the group size specified will of course
create a larger group (of one section).  If input sections are too
large, it may not be possible for a branch to reach its stub.

@@cindex PowerPC64 stub symbols
@@kindex --emit-stub-syms
@@item --emit-stub-syms
This option causes @@command{ld} to label linker stubs with a local
symbol that encodes the stub type and destination.

@@cindex PowerPC64 dot symbols
@@kindex --dotsyms
@@kindex --no-dotsyms
@@item --dotsyms, --no-dotsyms
These two options control how @@command{ld} interprets version patterns
in a version script.  Older PowerPC64 compilers emitted both a
function descriptor symbol with the same name as the function, and a
code entry symbol with the name prefixed by a dot (@@samp{.}).  To
properly version a function @@samp{foo}, the version script thus needs
to control both @@samp{foo} and @@samp{.foo}.  The option
@@samp{--dotsyms}, on by default, automatically adds the required
dot-prefixed patterns.  Use @@samp{--no-dotsyms} to disable this
feature.

@@cindex PowerPC64 TLS optimization
@@kindex --no-tls-optimize
@@item --no-tls-optimize
PowerPC64 @@command{ld} normally performs some optimization of code
sequences used to access Thread-Local Storage.  Use this option to
disable the optimization.

@@cindex PowerPC64 OPD optimization
@@kindex --no-opd-optimize
@@item --no-opd-optimize
PowerPC64 @@command{ld} normally removes @@code{.opd} section entries
corresponding to deleted link-once functions, or functions removed by
the action of @@samp{--gc-sections} or linker scrip @@code{/DISCARD/}.
Use this option to disable @@code{.opd} optimization.

@@cindex PowerPC64 OPD spacing
@@kindex --non-overlapping-opd
@@item --non-overlapping-opd
Some PowerPC64 compilers have an option to generate compressed
@@code{.opd} entries spaced 16 bytes apart, overlapping the third word,
the static chain pointer (unused in C) with the first word of the next
entry.  This option expands such entries to the full 24 bytes.

@@cindex PowerPC64 TOC optimization
@@kindex --no-toc-optimize
@@item --no-toc-optimize
PowerPC64 @@command{ld} normally removes unused @@code{.toc} section
entries.  Such entries are detected by examining relocations that
reference the TOC in code sections.  A reloc in a deleted code section
marks a TOC word as unneeded, while a reloc in a kept code section
marks a TOC word as needed.  Since the TOC may reference itself, TOC
relocs are also examined.  TOC words marked as both needed and
unneeded will of course be kept.  TOC words without any referencing
reloc are assumed to be part of a multi-word entry, and are kept or
discarded as per the nearest marked preceding word.  This works
reliably for compiler generated code, but may be incorrect if assembly
code is used to insert TOC entries.  Use this option to disable the
optimization.

@@cindex PowerPC64 multi-TOC
@@kindex --no-multi-toc
@@item --no-multi-toc
By default, PowerPC64 GCC generates code for a TOC model where TOC
entries are accessed with a 16-bit offset from r2.  This limits the
total TOC size to 64K.  PowerPC64 @@command{ld} extends this limit by
grouping code sections such that each group uses less than 64K for its
TOC entries, then inserts r2 adjusting stubs between inter-group
calls.  @@command{ld} does not split apart input sections, so cannot
help if a single input file has a @@code{.toc} section that exceeds
64K, most likely from linking multiple files with @@command{ld -r}.
Use this option to turn off this feature.
@@end table

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

@


1.158
log
@	* deffilep.y (def_image_name): If LIBRARY or NAME statement
	specifies an empty string, retain the name specified on command
	line.
	* ld.texinfo: Document above
@
text
@d1120 1
a1120 1
been assigned to see if there any overlaps.  Normally the linker will
@


1.157
log
@ld/
	* emulparams/vxworks.sh (VXWORKS_BASE_EM_FILE): New variable.
	(EXTRA_EM_FILE): Define.
	* emultempl/vxworks.em: New file.
	* ld.texinfo (--force-dynamic): Document.
	* Makefile.am (eelf32ppcvxworks.cm, eelf_i386_vxworks.c): Depend
	on vxworks.em.
	* Makefile.in: Regenerate.

ld/testsuite/
	* ld-i386/vxworks1-static.d, ld-i386/vxworks2.s,
	* ld-i386/vxworks2.sd, ld-i386/vxworks2-static.sd: New tests.
	* ld-i386/i386.exp: Run them.
	* ld-powerpc/vxworks1-static.d, ld-powerpc/vxworks2.s,
	* ld-powerpc/vxworks2.sd, ld-powerpc/vxworks2-static.sd: New tests.
	* ld-powerpc/powerpc.exp: Run them.
@
text
@d5621 2
a5622 1
the internal name is the same as the filename specified on the command line. 
@


1.157.2.1
log
@
2006-05-11  Carlos O'Donell  <carlos@@codesourcery.com>

	* bfd/doc/bfd.texinfo: Rename "Index" to "BFD Index"
	* ld/ld.texinfo: Rename "Index" to "LD Index"
	* gas/doc/as.texinfo: Rename "Index" to "AS Index"
	Rename "ABORT" to "ABORT (COFF)"
@
text
@d177 1
a177 1
* LD Index::                       LD Index
d6437 2
a6438 2
@@node LD Index
@@unnumbered LD Index
@


1.157.2.2
log
@Merge changes between binutils-csl-2_17-branchpoint and
binutils-2_17, except for the addition of generated files to CVS.
@
text
@a42 2
@@set POWERPC
@@set POWERPC64
a158 6
@@ifset POWERPC
* PowerPC ELF32::               ld and PowerPC 32-bit ELF Support
@@end ifset
@@ifset POWERPC64
* PowerPC64 ELF64::             ld and PowerPC64 64-bit ELF Support
@@end ifset
d345 1
a345 1
@@include at-file.texi
d1120 1
a1120 1
been assigned to see if there are any overlaps.  Normally the linker will
a1385 3
@@ifset POWERPC
@@xref{PowerPC ELF32,,@@command{ld} and PowerPC 32-bit ELF Support}.
@@end ifset
a5113 6
@@ifset POWERPC
* PowerPC ELF32::		@@command{ld} and PowerPC 32-bit ELF Support
@@end ifset
@@ifset POWERPC64
* PowerPC64 ELF64::		@@command{ld} and PowerPC64 64-bit ELF Support
@@end ifset
a5504 177
@@ifset POWERPC
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node PowerPC ELF32
@@section @@command{ld} and PowerPC 32-bit ELF Support
@@cindex PowerPC long branches
@@kindex --relax on PowerPC
Branches on PowerPC processors are limited to a signed 26-bit
displacement, which may result in @@command{ld} giving
@@samp{relocation truncated to fit} errors with very large programs.
@@samp{--relax} enables the generation of trampolines that can access
the entire 32-bit address space.  These trampolines are inserted at
section boundaries, so may not themselves be reachable if an input
section exceeds 33M in size.

@@cindex PowerPC ELF32 options
@@table @@option
@@cindex PowerPC PLT
@@kindex --bss-plt
@@item --bss-plt
Current PowerPC GCC accepts a @@samp{-msecure-plt} option that
generates code capable of using a newer PLT and GOT layout that has
the security advantage of no executable section ever needing to be
writable and no writable section ever being executable.  PowerPC
@@command{ld} will generate this layout, including stubs to access the
PLT, if all input files (including startup and static libraries) were
compiled with @@samp{-msecure-plt}.  @@samp{--bss-plt} forces the old
BSS PLT (and GOT layout) which can give slightly better performance.

@@cindex PowerPC GOT
@@kindex --sdata-got
@@item --sdata-got
The new secure PLT and GOT are placed differently relative to other
sections compared to older BSS PLT and GOT placement.  The location of
@@code{.plt} must change because the new secure PLT is an initialized
section while the old PLT is uninitialized.  The reason for the
@@code{.got} change is more subtle:  The new placement allows
@@code{.got} to be read-only in applications linked with
@@samp{-z relro -z now}.  However, this placement means that
@@code{.sdata} cannot always be used in shared libraries, because the
PowerPC ABI accesses @@code{.sdata} in shared libraries from the GOT
pointer.  @@samp{--sdata-got} forces the old GOT placement.  PowerPC
GCC doesn't use @@code{.sdata} in shared libraries, so this option is
really only useful for other compilers that may do so.

@@cindex PowerPC stub symbols
@@kindex --emit-stub-syms
@@item --emit-stub-syms
This option causes @@command{ld} to label linker stubs with a local
symbol that encodes the stub type and destination.

@@cindex PowerPC TLS optimization
@@kindex --no-tls-optimize
@@item --no-tls-optimize
PowerPC @@command{ld} normally performs some optimization of code
sequences used to access Thread-Local Storage.  Use this option to
disable the optimization.
@@end table

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

@@ifset POWERPC64
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node PowerPC64 ELF64
@@section @@command{ld} and PowerPC64 64-bit ELF Support

@@cindex PowerPC64 ELF64 options
@@table @@option
@@cindex PowerPC64 stub grouping
@@kindex --stub-group-size
@@item --stub-group-size
Long branch stubs, PLT call stubs  and TOC adjusting stubs are placed
by @@command{ld} in stub sections located between groups of input sections.
@@samp{--stub-group-size} specifies the maximum size of a group of input
sections handled by one stub section.  Since branch offsets are signed,
a stub section may serve two groups of input sections, one group before
the stub section, and one group after it.  However, when using
conditional branches that require stubs, it may be better (for branch
prediction) that stub sections only serve one group of input sections.
A negative value for @@samp{N} chooses this scheme, ensuring that
branches to stubs always use a negative offset.  Two special values of
@@samp{N} are recognized, @@samp{1} and @@samp{-1}.  These both instruct
@@command{ld} to automatically size input section groups for the branch types
detected, with the same behaviour regarding stub placement as other
positive or negative values of @@samp{N} respectively.

Note that @@samp{--stub-group-size} does not split input sections.  A
single input section larger than the group size specified will of course
create a larger group (of one section).  If input sections are too
large, it may not be possible for a branch to reach its stub.

@@cindex PowerPC64 stub symbols
@@kindex --emit-stub-syms
@@item --emit-stub-syms
This option causes @@command{ld} to label linker stubs with a local
symbol that encodes the stub type and destination.

@@cindex PowerPC64 dot symbols
@@kindex --dotsyms
@@kindex --no-dotsyms
@@item --dotsyms, --no-dotsyms
These two options control how @@command{ld} interprets version patterns
in a version script.  Older PowerPC64 compilers emitted both a
function descriptor symbol with the same name as the function, and a
code entry symbol with the name prefixed by a dot (@@samp{.}).  To
properly version a function @@samp{foo}, the version script thus needs
to control both @@samp{foo} and @@samp{.foo}.  The option
@@samp{--dotsyms}, on by default, automatically adds the required
dot-prefixed patterns.  Use @@samp{--no-dotsyms} to disable this
feature.

@@cindex PowerPC64 TLS optimization
@@kindex --no-tls-optimize
@@item --no-tls-optimize
PowerPC64 @@command{ld} normally performs some optimization of code
sequences used to access Thread-Local Storage.  Use this option to
disable the optimization.

@@cindex PowerPC64 OPD optimization
@@kindex --no-opd-optimize
@@item --no-opd-optimize
PowerPC64 @@command{ld} normally removes @@code{.opd} section entries
corresponding to deleted link-once functions, or functions removed by
the action of @@samp{--gc-sections} or linker scrip @@code{/DISCARD/}.
Use this option to disable @@code{.opd} optimization.

@@cindex PowerPC64 OPD spacing
@@kindex --non-overlapping-opd
@@item --non-overlapping-opd
Some PowerPC64 compilers have an option to generate compressed
@@code{.opd} entries spaced 16 bytes apart, overlapping the third word,
the static chain pointer (unused in C) with the first word of the next
entry.  This option expands such entries to the full 24 bytes.

@@cindex PowerPC64 TOC optimization
@@kindex --no-toc-optimize
@@item --no-toc-optimize
PowerPC64 @@command{ld} normally removes unused @@code{.toc} section
entries.  Such entries are detected by examining relocations that
reference the TOC in code sections.  A reloc in a deleted code section
marks a TOC word as unneeded, while a reloc in a kept code section
marks a TOC word as needed.  Since the TOC may reference itself, TOC
relocs are also examined.  TOC words marked as both needed and
unneeded will of course be kept.  TOC words without any referencing
reloc are assumed to be part of a multi-word entry, and are kept or
discarded as per the nearest marked preceding word.  This works
reliably for compiler generated code, but may be incorrect if assembly
code is used to insert TOC entries.  Use this option to disable the
optimization.

@@cindex PowerPC64 multi-TOC
@@kindex --no-multi-toc
@@item --no-multi-toc
By default, PowerPC64 GCC generates code for a TOC model where TOC
entries are accessed with a 16-bit offset from r2.  This limits the
total TOC size to 64K.  PowerPC64 @@command{ld} extends this limit by
grouping code sections such that each group uses less than 64K for its
TOC entries, then inserts r2 adjusting stubs between inter-group
calls.  @@command{ld} does not split apart input sections, so cannot
help if a single input file has a @@code{.toc} section that exceeds
64K, most likely from linking multiple files with @@command{ld -r}.
Use this option to turn off this feature.
@@end table

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

d5621 1
a5621 2
or they specify an empty string, the internal name is the same as the
filename specified on the command line.
@


1.157.2.3
log
@        Backport from mainline:

        2006-07-29  Richard Sandiford  <richard@@codesourcery.com>

        ld/
        * Makefile.am (eelf32b4300.c): Update dependencies.
        (eelf32bmip.c): Likewise.
        (eelf32bsmip.c): Likewise.
        (eelf32btsmip.c): Likewise.
        (eelf32btsmipn32.c): Likewise.
        (eelf32ltsmip.c): Likewise.
        (eelf32ltsmipn32.c): Likewise.
        (eelf32ebmip.c): Likewise.
        (eelf32ebmipvxworks.c): Likewise.
        (eelf32elmip.c): Likewise.
        (eelf32elmipvxworks.c): Likewise.
        (eelf32bmipn32.c): Likewise.
        (eelf32lmip.c): Likewise.
        (eelf32mipswindiss.c): Likewise.
        (eelf32lsmip.c): Likewise.
        (eelf64bmip.c): Likewise.
        (eelf64btsmip.c): Likewise.
        (eelf64ltsmip.c): Likewise.
        (emipsbig.c): Likewise.  Canonicalize ${GENSCRIPTS} line.
        (emipsbsd.c): Likewise.
        (emipsidt.c): Update dependencies.
        (emipsidtl.c): Likewise.
        (emipslit.c): Likewise.
        (emipslnews.c): Likewise.
        (emipspe.c): Likewise.  Fix ${GENSCRIPTS} invocation.
        * Makefile.in: Regenerate.
        * emulparams/elf32bmip.sh (EXTRA_EM_FILE): Define.
        * emulparams/elf32bmipn32-defs.sh (EXTRA_EM_FILE): Likewise.
        * emultempl/irix.em: Include emultempl/mipself.em.
        * emultempl/mipself.em: New file.

        ld/testsuite/
        * ld-mips-elf/hash1.s, ld-mips-elf/hash1a.d,
        * ld-mips-elf/hash1b.d, ld-mips-elf/hash1c.d: New tests.
        * ld-mips-elf/mips-elf.exp: Run them.

        2006-07-14  Jakub Jelinek  <jakub@@redhat.com>

        * elflink.c (bfd_elf_size_dynsym_hash_dynstr): Fix cinfo.shift2 value.

        2006-07-10  Jakub Jelinek  <jakub@@redhat.com>

        include/
        * bfdlink.h (struct bfd_link_info): Add emit_hash and
        emit_gnu_hash bitfields.

        include/elf/
        * common.h (SHT_GNU_HASH, DT_GNU_HASH): Define.

        ld/
        * scripttempl/elf.sc: Add .gnu.hash section.
        * emultempl/elf32.em (OPTION_HASH_STYLE): Define.
        (gld${EMULATION_NAME}_add_options): Register --hash-style option.
        (gld${EMULATION_NAME}_handle_option): Handle it.
        (gld${EMULATION_NAME}_list_options): Document it.
        * ldmain.c (main): Initialize emit_hash and emit_gnu_hash.
        * ld.texinfo: Document --hash-style option.

        ld/testsuite/
        * ld-powerpc/tlsso32.r: Adjust.
        * ld-powerpc/tlsso32.d: Adjust.
        * ld-powerpc/tlsso32.g: Adjust.
        * ld-powerpc/tlsso.r: Adjust.
        * ld-powerpc/tlsso.g: Adjust.
        * ld-powerpc/tlstocso.g: Adjust.

        bfd/
        * elf.c (_bfd_elf_print_private_bfd_data): Handle DT_GNU_HASH.
        (bfd_section_from_shdr, elf_fake_sections, assign_section_numbers):
        Handle SHT_GNU_HASH.
        (special_sections_g): Include .gnu.hash section.
        (bfd_elf_gnu_hash): New function.
        * elf-bfd.h (bfd_elf_gnu_hash, _bfd_elf_hash_symbol): New prototypes.
        (struct elf_backend_data): Add elf_hash_symbol method.
        * elflink.c (_bfd_elf_link_create_dynamic_sections): Create .hash
        only if info->emit_hash, create .gnu.hash section if
        info->emit_gnu_hash.
        (struct collect_gnu_hash_codes): New type.
        (elf_collect_gnu_hash_codes, elf_renumber_gnu_hash_syms,
        _bfd_elf_hash_symbol): New functions.
        (compute_bucket_count): Don't compute HASHCODES array, instead add
        that and NSYMS as arguments.  Use bed->s->sizeof_hash_entry
        instead of bed->s->arch_size / 8.  Fix .hash size estimation.
        When not optimizing, use the number of hashed symbols rather than
        dynsymcount.
        (bfd_elf_size_dynamic_sections): Only add DT_HASH if info->emit_hash,
        and ADD DT_GNU_HASH if info->emit_gnu_hash.
        (bfd_elf_size_dynsym_hash_dynstr): Size .hash only if info->emit_hash,
        adjust compute_bucket_count caller.  Create and populate .gnu.hash
        section if info->emit_gnu_hash.
        (elf_link_output_extsym): Only populate .hash section if
        finfo->hash_sec != NULL.
        (bfd_elf_final_link): Adjust assertion.  Handle DT_GNU_HASH.
        * elfxx-target.h (elf_backend_hash_symbol): Define if not yet defined.
        (elfNN_bed): Add elf_backend_hash_symbol.
        * elf64-x86-64.c (elf64_x86_64_hash_symbol): New function.
        (elf_backend_hash_symbol): Define.
        * elf32-i386.c (elf_i386_hash_symbol): New function.
        (elf_backend_hash_symbol): Define.

        binutils/
        * readelf.c (get_dynamic_type): Handle DT_GNU_HASH.
        (get_section_type_name): Handle SHT_GNU_HASH.
        (dynamic_info_DT_GNU_HASH): New variable.
        (process_dynamic_section): Handle DT_GNU_HASH.
        (process_symbol_table): Print also DT_GNU_HASH histogram.
@
text
@a1873 8
@@kindex --hash-style=@@var{style}
@@item --hash-style=@@var{style}
Set the type of linker's hash table(s).  @@var{style} can be either
@@code{sysv} for classic ELF @@code{.hash} section, @@code{gnu} for
new style GNU @@code{.gnu.hash} section or @@code{both} for both
the classic ELF @@code{.hash} and new style GNU @@code{.gnu.hash}
hash tables.  The default is @@code{sysv}.

@


1.156
log
@	* deffilep.y (def_image_name): If the image name does not have
	a suffix, append the default.
	* ld.texinfo: Document NAME, LIBRARY usage in PE-COFF .def files.
@
text
@d775 6
@


1.155
log
@	* NEWS: mention support for forward exports in PE-COFF dll's.
	* ld.texinfo: Expand documentation of EXPORT statements in
	PE-COFF .def files.
@
text
@d5601 16
@


1.154
log
@Fix duplicated word typo
@
text
@d5584 1
a5584 1
LIBRARY "xyz.dll" BASE=0x10000000
d5590 2
d5594 52
a5645 3
This example defines a base address and three symbols.  The third
symbol is an alias for the second.  For the complete format
specification see ld/deffilep.y in the binutils sources.
@


1.153
log
@	* doc/binutils.texi: Include config.texi and @@file documentation
	for manual pages.

	* Makefile.am (gprof.info, gprof.1): Depend on config.texi.
	(config.texi): New file.
	* Makefile.in: Regenerated.

	* Makefile.am (configdoc.texi): Set top_srcdir in configdoc.texi..
	* Makefile.in: Regenerated.
	* ld.texinfo: Include configdoc.texi and ldver.texi in man pages.
	Add @@file documentation.
@
text
@d1860 1
a1860 1
linking speed.  This was introduced to to select the old O(n^2) algorithm
@


1.152
log
@	* ld.texinfo (Forced Output Alignment): Specify that this is an
	alignment increase, not an override.
	* ldlang.c (init_os): Set output section alignment here..
	(lang_add_section): ..rather than here.
	(lang_size_sections_1): Consolidate alignment code.  Warn if section
	alignment affects start address when explicit address given.
@
text
@d6 1
d10 1
d345 2
@


1.151
log
@	* ld.texinfo (--reduce-memory-overheads): Fix typo.
@
text
@d3778 1
a3778 3
You can force an output section alignment by using ALIGN.  The value
specified overrides any alignment given by input sections, whether
larger or smaller.
@


1.150
log
@bfd/

2005-10-15  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/1467
	* elf-bfd.h (_bfd_elf_match_sections_by_type): New.
	(_bfd_generic_match_sections_by_type): New. Defined.

	* elf.c (_bfd_elf_match_sections_by_type): New.

	* libbfd-in.h (_bfd_generic_match_sections_by_type): New.

	* bfd-in2.h: Regenerated.
	* libbfd.h: Likewise.

	* libbfd.c (_bfd_generic_match_sections_by_type): New.

	* targets.c (BFD_JUMP_TABLE_LINK): Initialize
	_bfd_match_sections_by_type with
	_bfd_generic_match_sections_by_type.
	(bfd_target): Add _bfd_match_sections_by_type.

ld/

2005-10-15  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/1467
	* emultempl/elf32.em: Include "elf-bfd.h".
	(gld${EMULATION_NAME}_place_orphan): Check section type and
	don't use section name for ELF input sections.

	* ld.texinfo: Document orphan section processing.

	* ldlang.c (lang_output_section_find_by_flags): Match section
	types by calling bfd_match_sections_by_type.
@
text
@d1860 1
a1860 1
Another affect of the switch is to set the default hash table size to
@


1.149
log
@	* ld.texino: Describe double-quoted string syntax for version
	nodes.
	* ldlang.h (lang_new_vers_pattern): Add literal_p parameter.
	* ldgram.y (vers_defns): Allow NAME as well as VERS_IDENTIFIER.
	Adjust calls to lang_new_vers_pattern to pass literal_p argument.
	* ldlang.c (lang_vers_match): Fix indentation.  Do not glob-match
	version nodes without a pattern.
	(lang_new_vers_pattern): Add literal_p parameter.
	(lang_do_version_exports_section): Pass it.

	* ld-elfvers/vers.exp: Add vers31.
	* ld-elfvers/vers31.c: New file.
	* ld-elfvers/vers31.dsym: Likewise.
	* ld-elfvers/vers31.map: Likewise.
	* ld-elfvers/vers31.ver: Likewise.
@
text
@d4445 1
d4507 16
@


1.148
log
@2005-09-27  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld.texinfo (ALIGN): Document it as forcing output section
	alignment.

	* ldgram.y (ALIGN): Support it for forcing output section
	alignment.
@
text
@d4292 4
d4307 2
d4418 10
@


1.147
log
@	* ld.texinfo: Document -z {no,}execstack, -z {no,}relro
	and --eh-frame-hdr options.
@
text
@d3068 1
a3068 1
  [AT(@@var{lma})] [SUBALIGN(@@var{subsection_align})]
d3644 1
a3644 1
  [AT(@@var{lma})] [SUBALIGN(@@var{subsection_align})]
d3659 1
d3773 9
@


1.146
log
@Remove a29k support.
@
text
@d932 3
d973 6
d989 3
d1829 5
@


1.145
log
@bfd/

2005-08-05  H.J. Lu  <hongjiu.lu@@intel.com>

	* bfd.c (bfd_hide_symbol): New.
	* bfd-in2.h: Regenerated.

ld/

2005-08-05  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld.texinfo: Document PROVIDE_HIDDEN.

	* ldexp.c (exp_fold_tree_1): Hide a provided symbol if asked.
	(exp_provide): Add and set hidden.

	* ldexp.h (etree_type): Add hidden to assign.

	* ldgram.y (PROVIDE_HIDDEN): New.
	* ldlex.l (PROVIDE_HIDDEN): Likewise.

	* scripttempl/elf.sc: Use PROVIDE_HIDDEN on array bound
	symbols.
@
text
@a20 1
@@set A29K
@


1.144
log
@* ldmain.c (main): Allow -shared and -static to be used together.
* ld.texinfo (-static): Mention that it is allowed with -shared.
@
text
@d2782 1
d2876 6
@


1.143
log
@	* ld.texinfo (Command Line Options): Add @@item for --hash-size.
@
text
@d1080 5
a1084 1
option also implies @@option{--unresolved-symbols=report-all}.
@


1.142
log
@* ldlang.c (Scan_for_self_assignment): Check an assignment tree to
	see if the same value is being used on the rhs as on the lhs.
	(print_assignment): Call scan_for_self_assignment and if it
	returns true, do no display the result of the computation but
	instead just the final value of the symbol on the lhs.
* ld.texinfo: Document this behaviour and provide an example of
	when it will happen.
@
text
@d1826 1
@


1.141
log
@	* bfd/bfd-in.h (bfd_elf32_arm_set_target_relocs): Update prototype.
	* bfd/bfd-in2.h: Regenerate.
	* bfd/elf32-arm.c (elf32_arm_link_hash_table): New field, 'use_blx'.
	(elf32_arm_link_hash_table_create): Initialise fix_v4bx, use_blx.
	(bfd_elf32_arm_set_target_relocs): Handle use_blx.
	(elf32_arm_final_link_relocate): Use Thumb BLX for R_ARM_THM_PC22
	relocations if requested to.
	(allocate_dynrelocs): Don't count size of omitted Thumb stubs based on
	use_blx rather than symbian_p.
	(elf32_arm_finish_dynamic_symbol): Don't output Thumb PLT stubs if
	use_blx is in effect.
	(elf32_arm_symbian_link_hash_table_create): Enable use_blx by default
	for SymbianOS.
	* ld/ld.texinfo: Document --use-blx.
	* ld/emultempl/armelf.em (use_blx): New variable.
	(arm_elf_create_output_section_statements): Communicate value of
	use_blx to bfd.
	(PARSE_AND_LIST_PROLOGUE): Add OPTION_USE_BLX.
	(PARSE_AND_LIST_OPTIONS): Add --use-blx option.
	(PARSE_AND_LIST_ARGS_CASES): Add OPTION_USE_BLX case.
@
text
@d678 1
a678 1
Where object files and symbols are mapped into memory.
d684 28
@


1.140
log
@Add a description of how to access linker script defined variables from source
code.
@
text
@d5265 11
@


1.140.2.1
log
@	* ld.texinfo (Command Line Options): Add @@item for --hash-size.
@
text
@a1797 1
@@item --hash-size=@@var{number}
@


1.140.2.1.2.1
log
@	Issue #439
	Backport:
	2005-10-13  Mark Mitchell  <mark@@codesourcery.com>
	* ld.texino: Describe double-quoted string syntax for version
	nodes.
	* ldlang.h (lang_new_vers_pattern): Add literal_p parameter.
	* ldgram.y (vers_defns): Allow NAME as well as VERS_IDENTIFIER.
	Adjust calls to lang_new_vers_pattern to pass literal_p argument.
	* ldlang.c (lang_vers_match): Fix indentation.  Do not glob-match
	version nodes without a pattern.
	(lang_new_vers_pattern): Add literal_p parameter.
	(lang_do_version_exports_section): Pass it.
@
text
@a4226 4
	 extern "C++" @@{       
		 ns::*;
		 "int f(int, double)";
         @@}         
a4237 2
However, if you specify the symbol name inside double quotes, then the
name is treated as literal, rather than as a glob pattern.
a4346 10
Demangled names may contains spaces and other special characters.  As
described above, you can use a glob pattern to match demangled names,
or you can use a double-quoted string to match the string exactly.  In
the latter case, be aware that minor differences (such as differing
whitespace) between the version script and the demangler output will
cause a mismatch.  As the exact string generated by the demangler
might change in the future, even if the mangled name does not, you
should check that all of your version directives are behaving as you
expect when you upgrade.

@


1.140.4.1
log
@	* ldlang.c (Scan_for_self_assignment): Check an assignment tree to
	see if the same value is being used on the rhs as on the lhs.
	(print_assignment): Call scan_for_self_assignment and if it
	returns true, do no display the result of the computation but
	instead just the final value of the symbol on the lhs.
	* ld.texinfo: Document this behaviour and provide an example of
	when it will happen.
@
text
@d678 1
a678 1
Where object files are mapped into memory.
a683 28
@@item
The values assigned to symbols.

Note - symbols whose values are computed by an expression which
involves a reference to a previous value of the same symbol may not
have correct result displayed in the link map.  This is because the
linker discards intermediate results and only retains the final value
of an expression.  Under such circumstances the linker will display
the final value enclosed by square brackets.  Thus for example a
linker script containing:

@@smallexample
   foo = 1
   foo = foo * 4
   foo = foo + 8
@@end smallexample

will produce the following output in the link map if the @@option{-M}
option is used:

@@smallexample
   0x00000001                foo = 0x1
   [0x0000000c]                foo = (foo * 0x4)
   [0x0000000c]                foo = (foo + 0x8)
@@end smallexample

See @@ref{Expressions} for more information about expressions in linker
scripts.
@


1.139
log
@include/
	* bfdlink.h (bfd_link_repair_undef_list): Declare.
bfd/
	* elf64-ppc.c (ppc64_elf_check_directives): Move undefs list fixup..
	* linker.c (bfd_link_repair_undef_list): ..to new function, but don't
	remove anything but new and undefweak.
	* elflink.c (_bfd_elf_link_create_dynamic_sections): Override any
	existing _DYNAMIC.
	(_bfd_elf_create_dynamic_sections): Formatting.
	(bfd_elf_record_link_assignment): Call bfd_link_repair_undef_list.
	(_bfd_elf_merge_symbol): Don't handle as-needed syms here.
	(struct elf_smash_data): New.
	(elf_smash_syms): New function.
	(elf_link_add_object_symbols): Call elf_smash_syms.  Don't add
	unneeded dynamic objects to loaded list.
	(elf_link_output_extsym): Don't handle as-needed here.  Strip
	bfd_link_hash_new symbols.
	* elf32-cris.c (elf_cris_discard_excess_program_dynamics): Don't
	delref when dynindx is already -1.
	* elf64-alpha.c (elf64_alpha_output_extsym): Strip bfd_link_hash_new
	symbols.
	* elfxx-mips.c (mips_elf_output_extsym): Likewise.
ld/
	* ld.texinfo: Clarify --as-needed operation.
@
text
@d2744 1
a2744 1
the symbol as a global symbol.
d2749 1
d2842 107
@


1.138
log
@	* bfd/bin-in.h (bfd_elf32_arm_set_target_relocs): Update prototype.
	* bfd/bin-in2.h (bfd_elf32_arm_set_target_relocs): Update prototype.
	* bfd/elf32-arm.c (elf32_arm_link_hash_table): Add fix_v4bx flag.
	(bfd_elf32_arm_set_target_relocs): Add formal parameter fix_v4bx for
	passing flag value from ld. Set flag value in global hash table entry.
	(elf32_arm_final_link_relocate): Add code to implement R_ARM_V4BX
	relocation.
	* ld/emultempl/armelf.em (fix_v4bx): New variable.
	(arm_elf_create_output_section_statements): Communicate fix_v4bx flag
	value to bfd.
	(PARSE_AND_LIST_PROLOGUE): Add option token OPTION_FIX_V4BX.
	(PARSE_AND_LIST_LONGOPTS): Add option --fix-v4bx.
	(PARSE_AND_LIST_OPTIONS): Add option --fix-v4bx.
	(PARSE_AND_LIST_ARGS_CASES): Add option OPTION_FIX_V4BX.
	* ld/NEWS: Mention --fix-v4bx.
	* ld/ld.texinfo: Document --fix-v4bx.
@
text
@d997 3
a999 2
needed. @@option{--as-needed} causes DT_NEEDED tags to only be emitted
for libraries that satisfy some reference from regular objects.
@


1.137
log
@	* ld.texinfo (Output Section Keywords <CONSTRUCTORS>): Correct
	__DTOR_LIST__ description.
@
text
@d5142 14
@


1.136
log
@	* ld.texinfo (Location Counter <dot outside sections>): Document
	effects of orphan section placement, and ". = ." workaround.
	* Makefile.in: Regenerate.
@
text
@d3399 3
a3401 1
constructors, and the symbol @@w{@@code{__DTOR_LIST}} marks the end.  The
@


1.135
log
@	* ldgram.y (AS_NEEDED): New token.
	(input_list): Handle AS_NEEDED ( input_list ).
	* ldlex.l (AS_NEEDED): Add.
	* ld.texinfo: Document AS_NEEDED ().
	* NEWS: Mention AS_NEEDED ().
@
text
@d2772 1
a2772 1
may only use this within a @@code{SECTIONS} command.
d4384 68
@


1.134
log
@	* ldmain.h (ld_sysroot): Change type to a constant string.
	* ldmain.c (ld_sysroot): Likewise.
	(get_relative_sysroot, get_sysroot): New functions, adding command-line
	support for changing the sysroot.
	(main): Call the new functions.
	* lexsup.c (OPTION_SYSROOT): New.
	(ld_options): Add --sysroot.
	(parse_args): Add a dummy handler for it.
	* ld.texinfo (--sysroot): Document.
	* NEWS: Mention the new --sysroot option.
@
text
@d4 1
a4 1
@@c 2001, 2002, 2003, 2004 Free Software Foundation, Inc.
d2579 12
@


1.133
log
@Add support for --subsystem:xbox as well as --subsystem:<number>.
@
text
@d1507 6
@


1.132
log
@PR 518
Update the descriptions of the ORIGIN and LENGTH fields in the MEMORY command,
to explicitly state that symbols cannot be used in their expressions.
@
text
@d2200 3
a2202 2
@@code{console}, and @@code{posix}.  You may optionally set the
subsystem version also.
@


1.131
log
@Add ORIGIN and LENGTH linker script operators.
@
text
@d3846 5
a3850 5
The @@var{origin} is an expression for the start address of the memory
region.  The expression must evaluate to a constant before memory
allocation is performed, which means that you may not use any section
relative symbols.  The keyword @@code{ORIGIN} may be abbreviated to
@@code{org} or @@code{o} (but not, for example, @@code{ORG}).
d3857 2
a3858 2
evaluate to a constant before memory allocation is performed.  The
keyword @@code{LENGTH} may be abbreviated to @@code{len} or @@code{l}.
@


1.130
log
@bfd/
	* elf-bfd.h (_bfd_elf_slurp_version_tables): Update prototype.
	* elf.c (_bfd_elf_print_private_bfd_data): Pass extra argument.
	(_bfd_elf_slurp_version_tables): Add extra argument.  Create extra
	default version definition for unversioned symbols.
	* elfcode.h (elf_slurp_symbol_table): Pass extra argument.
	* elflink.c (elf_link_add_object_symbols): Pass extra argument to
	_bfd_elf_slurp_version_tables.  Set default version for unversioned
	imported symbols.
include/
	* bfdlink.h (bfd_link_info): Add default_imported_symver.
ld/
	* ld.texinfo: Document --default-imported-symver.
	* ldmain.c (main): Set link_info.default_imported_symver.
	* lexsup.c (option_values): Add OPTION_DEFAULT_IMPORTED_SYMVER.
	(ld_options): Add --default-imported-symver.
	(parse_args): Handle OPTION_DEFAULT_IMPORTED_SYMVER.
@
text
@d3889 10
d4674 4
d4702 4
@


1.129
log
@	* Makefile.in (earmsymbian.c): Depend on armbpabi.sc, not elf.sc.
	* ldexp.h (segment_type): New type.
	(segments): New variable.
	* ldexp.c (segments): New variable.
	(exp_print_token): Handle SEGMENT_START.
	(fold_binary): Likewise.
	* ldgram.y (SEGMENT_START): Declare it as a token.
	(exp): Handle SEGMENT_START.
	* ldlang.h (lang_address_statement_type): Add segment field.
	(lang_section_start): Change prototype.
	* ldlang.c (map_input_to_output_sections): Do not process section
	assignments if a corresponding SEGMENT_START has already been
	seen.
	(lang_section_start): Add segment parameter.
	* ldlex.l (SEGMENT_START): Add it.
	* lexsup.c (seg_segment_start): New function.
	(parse_args): Use it for -Tbss, -Tdata, and -Ttext.
	* ld.texinfo (SEGMENT_START): Document it.
	* emulparams/armsymbian.sh (EMBEDDED): Set it.
	* scripttempl/armbpabi.sc: Use SEGMENT_START to control segment
	base addresses.  Do not map relocations.
	* NEWS: Mention SEGMENT_START.
@
text
@d1240 6
a1245 1
symbols.
@


1.128
log
@bfd/
	* elflink.c (elf_finalize_dynstr): Skip shared aux structure.
	(bfd_elf_size_dynamic_sections): Create default version definition.
	(elf_link_output_extsym): Adjust for default symbol version.
include/
	* bfdlink.h (struct bfd_link_info): Add create_default_symver.
ld/
	* ld.texinfo: Document --default-symver.
	* ldmain.c (main): Set link_info.create_default_symver.
	* lexsup.c (enum option_values): Add OPTION_DEFAULT_SYMVER.
	(ld_options): Add default-symver.
	(parse_args): Handle OPTION_DEFAULT_SYMVER.
ld/testsuite/
	* ld-elfvers/vers.exp (build_binary): Add ldargs parameter.
	(build_vers_lib_pic_flags): New function.
	Add vers29 test.
	* ld-elfvers/vers29.c: New file.
	* ld-elfvers/vers29.dsym: New file.
	* ld-elfvers/vers29.ver: New file.
@
text
@d4683 10
@


1.127
log
@bfd/
	* bfd-in2.h: Regenerate.
	* bfd.c (struct bfd): Add no_export.
	* elflink.c (elf_link_add_object_symbols): Handle no_export.
ld/
	* ldlang.c (struct excluded_lib, excluded_libs, add_excluded_libs)
	(check_excluded_libs): New.
	(load_symbols): Call check_excluded_libs.
	* ldlang.h (add_excluded_libs): New prototype.
	* emultempl/elf32.em (OPTION_EXCLUDED_LIBS): Define.
	(gld${EMULATION_NAME}_add_options): Add --exclude-libs.
	(gld${EMULATION_NAME}_handle_option): Handle --exclude-libs.
	* ld.texinfo (Command Line Variables): Document --exclude-libs.
	(Options Specific to i386 PE Targets): Remove --exclude-libs.
ld/testsuite/
	* ld-elf/exclude1.s, ld-elf/exclude2.s, ld-elf/exclude.exp: New.
@
text
@d1237 5
@


1.126
log
@bfd ChangeLog

	* elf32-xtensa.c (elf32xtensa_size_opt): New global variable.
	(xtensa_default_isa): Global variable moved here from xtensa-isa.c.
	(elf32xtensa_no_literal_movement): New global variable.
	(elf_howto_table): Add entries for new relocations.
	(elf_xtensa_reloc_type_lookup): Handle new relocations.
	(property_table_compare): When addresses are equal, compare sizes and
	various property flags.
	(property_table_matches): New.
	(xtensa_read_table_entries): Extend to read new property tables.  Add
	output_addr parameter to indicate that output addresses should be used.
	Use bfd_get_section_limit.
	(elf_xtensa_find_property_entry): New.
	(elf_xtensa_in_literal_pool): Use elf_xtensa_find_property_entry.
	(elf_xtensa_check_relocs): Handle new relocations.
	(elf_xtensa_do_reloc): Use bfd_get_section_limit.  Handle new
	relocations.  Use new xtensa-isa.h functions.
	(build_encoding_error_message): Remove encode_result parameter.  Add
	new target_address parameter used to detect alignment errors.
	(elf_xtensa_relocate_section): Use bfd_get_section_limit.  Clean up
	error handling.  Use new is_operand_relocation function.
	(elf_xtensa_combine_prop_entries, elf_xtensa_merge_private_bfd_data):
	Use underbar macro for error messages.  Formatting.
	(get_const16_opcode): New.
	(get_l32r_opcode): Add a separate flag for initialization.
	(get_relocation_opnd): Operand number is no longer explicit in the
	relocation.  Change to decode the opcode and analyze its operands.
	(get_relocation_slot): New.
	(get_relocation_opcode): Add bfd parameter.  Use bfd_get_section_limit.
	Use new xtensa-isa.h functions to handle multislot instructions.
	(is_l32r_relocation): Add bfd parameter.  Use is_operand_relocation.
	(get_asm_simplify_size, is_alt_relocation, is_operand_relocation,
	insn_decode_len, insn_decode_opcode, check_branch_target_aligned,
	check_loop_aligned, check_branch_target_aligned_address, narrowable,
	widenable, narrow_instruction, widen_instruction, op_single_fmt_table,
	get_single_format, init_op_single_format_table): New.
	(elf_xtensa_do_asm_simplify): Add error_message parameter and use it
	instead of calling _bfd_error_handler.  Use new xtensa-isa.h functions.
	(contract_asm_expansion): Add error_message parameter and pass it to
	elf_xtensa_do_asm_simplify.  Replace use of R_XTENSA_OP0 relocation
	with R_XTENSA_SLOT0_OP.
	(get_expanded_call_opcode): Extend to handle either L32R or CONST16
	instructions.  Use new xtensa-isa.h functions.
	(r_reloc struct): Add new virtual_offset field.
	(r_reloc_init): Add contents and content_length parameters.  Set
	virtual_offset field to zero.  Add contents to target_offset field for
	partial_inplace relocations.
	(r_reloc_is_defined): Check for null.
	(print_r_reloc): New debug function.
	(source_reloc struct): Replace xtensa_operand field with pair of the
	opcode and the operand position.  Add is_abs_literal field.
	(init_source_reloc): Specify operand by opcode/position pair.  Set
	is_abs_literal field.
	(source_reloc_compare): When target_offsets are equal, compare other
	fields to make sorting predictable.
	(literal_value struct): Add is_abs_literal field.
	(value_map_hash_table struct): Add has_last_loc and last_loc fields.
	(init_literal_value): New.
	(is_same_value): Replace with ...
	(literal_value_equal): ... this function.  Add comparisons of
	virtual_offset and is_abs_literal fields.
	(value_map_hash_table_init): Use bfd_zmalloc.  Check for allocation
	failure.  Initialize has_last_loc field.
	(value_map_hash_table_delete): New.
	(hash_literal_value): Rename to ...
	(literal_value_hash): ... this.  Include is_abs_literal flag and
	virtual_offset field in the hash value.
	(get_cached_value): Rename to ...
	(value_map_get_cached_value): ... this.  Update calls to
	literal_value_hash and literal_value_equal.
	(add_value_map): Check for allocation failure.  Update calls to
	value_map_get_cached_value and literal_value_hash.
	(text_action, text_action_list, text_action_t): New types.
	(find_fill_action, compute_removed_action_diff, adjust_fill_action,
	text_action_add, text_action_add_literal, offset_with_removed_text,
	offset_with_removed_text_before_fill, find_insn_action,
	print_action_list, print_removed_literals): New.
	(offset_with_removed_literals): Delete.
	(xtensa_relax_info struct): Add is_relaxable_asm_section, action_list,
	fix_array, fix_array_count, allocated_relocs, relocs_count, and
	allocated_relocs_count fields.
	(init_xtensa_relax_info): Initialize new fields.
	(reloc_bfd_fix struct): Add new translated field.
	(reloc_bfd_fix_init): Add translated parameter and use it to set the
	translated field.
	(fix_compare, cache_fix_array): New.
	(get_bfd_fix): Remove fix_list parameter and get all relax_info for the
	section via get_xtensa_relax_info.  Use cache_fix_array to set up
	sorted fix_array and use bsearch instead of linear search.
	(section_cache_t): New struct.
	(init_section_cache, section_cache_section, clear_section_cache): New.
	(ebb_t, ebb_target_enum, proposed_action, ebb_constraint): New types.
	(init_ebb_constraint, free_ebb_constraint, init_ebb, extend_ebb_bounds,
	extend_ebb_bounds_forward, extend_ebb_bounds_backward,
	insn_block_decodable_len, ebb_propose_action, ebb_add_proposed_action):
	New.
	(retrieve_contents): Use bfd_get_section_limit.
	(elf_xtensa_relax_section): Add relocations_analyzed flag.  Update call
	to compute_removed_literals.  Free value_map_hash_table when no longer
	needed.
	(analyze_relocations): Check is_relaxable_asm_section flag.  Call
	compute_text_actions for all sections.
	(find_relaxable_sections): Mark sections as relaxable if they contain
	ASM_EXPAND relocations that can be optimized.  Adjust r_reloc_init
	call.  Increment relax_info src_count field only for appropriate
	relocation types.  Remove is_literal_section check.
	(collect_source_relocs): Use bfd_get_section_limit.  Adjust calls to
	r_reloc_init and find_associated_l32r_irel.  Check
	is_relaxable_asm_section flag.  Handle L32R instructions with absolute
	literals.  Pass is_abs_literal flag to init_source_reloc.
	(is_resolvable_asm_expansion): Use bfd_get_section_limit.  Check for
	CONST16 instructions.  Adjust calls to r_reloc_init and
	pcrel_reloc_fits.  Handle weak symbols conservatively.
	(find_associated_l32r_irel): Add bfd parameter and pass it to
	is_l32r_relocation.
	(compute_text_actions, compute_ebb_proposed_actions,
	compute_ebb_actions, check_section_ebb_pcrels_fit,
	check_section_ebb_reduces, text_action_add_proposed,
	compute_fill_extra_space): New.
	(remove_literals): Replace with ...
	(compute_removed_literals): ... this function.  Call
	init_section_cache.  Use bfd_get_section_limit.  Sort internal_relocs.
	Call xtensa_read_table_entries to get the property table.  Skip
	relocations other than R_XTENSA_32 and R_XTENSA_PLT.  Use new
	is_removable_literal, remove_dead_literal, and
	identify_literal_placement functions.
	(get_irel_at_offset): Rewrite to use bsearch on sorted relocations
	instead of linear search.
	(is_removable_literal, remove_dead_literal,
	identify_literal_placement): New.
	(relocations_reach): Update check for literal not referenced by any
	PC-relative relocations.  Adjust call to pcrel_reloc_fits.
	(coalesce_shared_literal, move_shared_literal): New.
	(relax_section): Use bfd_get_section_limit.  Call
	translate_section_fixes.  Update calls to r_reloc_init and
	offset_with_removed_text.  Check new is_relaxable_asm_section flag.
	Add call to pin_internal_relocs.  Add special handling for
	R_XTENSA_ASM_SIMPLIFY and R_XTENSA_DIFF* relocs.  Use virtual_offset
	info to calculate new addend_displacement variable.  Replace code for
	deleting literals with more general code to perform the actions
	determined by the action_list for the section.
	(translate_section_fixes, translate_reloc_bfd_fix): New.
	(translate_reloc): Check new is_relaxable_asm_section flag.  Call
	find_removed_literal only if is_operand_relocation.  Update call to
	offset_with_removed_text.  Use new target_offset and removed_bytes
	variables.
	(move_literal): New.
	(relax_property_section):  Use bfd_get_section_limit.  Set new
	is_full_prop_section flag and handle new property tables.  Update calls
	to r_reloc_init and offset_with_removed_text.  Check
	is_relaxable_asm_section flag.  Handle expansion of zero-sized
	unreachable entries, with use of offset_with_removed_text_before_fill.
	For relocatable links, combine entries only for literal tables.
	(relax_section_symbols): Check is_relaxable_asm_section flag.  Update
	calls to offset_with_removed_text.  Translate st_size field for
	function symbols.
	(do_fix_for_relocatable_link): Change to return bfd_boolean to indicate
	failure.  Add contents parameter.  Update call to get_bfd_fix.  Update
	call to r_reloc_init.  Call _bfd_error_handler and return FALSE for
	R_XTENSA_ASM_EXPAND relocs.
	(do_fix_for_final_link): Add input_bfd and contents parameters.  Update
	call to get_bfd_fix.  Include offset from contents for partial_inplace
	relocations.
	(is_reloc_sym_weak): New.
	(pcrel_reloc_fits): Use new xtensa-isa.h functions.
	(prop_sec_len): New.
	(xtensa_is_property_section): Handle new property sections.
	(is_literal_section): Delete.
	(internal_reloc_compare): When r_offset matches, compare r_info and
	r_addend to make sorting predictable.
	(internal_reloc_matches): New.
	(xtensa_get_property_section_name): Handle new property sections.
	(xtensa_get_property_predef_flags): New.
	(xtensa_callback_required_dependence): Use bfd_get_section_limit.
	Update calls to xtensa_isa_init, is_l32r_relocation, and r_reloc_init.
	* xtensa-isa.c (xtensa_default_isa): Moved to elf32-xtensa.c.
	(xtisa_errno, xtisa_error_msg): New variables.
	(xtensa_isa_errno, xtensa_isa_error_msg): New.
	(xtensa_insnbuf_alloc): Add error handling.
	(xtensa_insnbuf_to_chars): Add num_chars parameter.  Update to
	use xtensa_format_decode.  Add error handling.
	(xtensa_insnbuf_from_chars): Add num_chars parameter.  Decode the
	instruction length to find the number of bytes to copy.
	(xtensa_isa_init): Add error handling.  Replace calls to
	xtensa_load_isa and xtensa_extend_isa with code to initialize lookup
	tables in the xtensa_modules structure.
	(xtensa_check_isa_config, xtensa_add_isa, xtensa_load_isa,
	xtensa_extend_isa): Delete.
	(xtensa_isa_free): Change to only free lookup tables.
	(opname_lookup_compare): Replace with ...
	(xtensa_isa_name_compare): ... this function.  Use strcasecmp.
	(xtensa_insn_maxlength): Rename to ...
	(xtensa_isa_maxlength): ... this.
	(xtensa_insn_length): Delete.
	(xtensa_insn_length_from_first_byte): Replace with ...
	(xtensa_isa_length_from_chars): ... this function.
	(xtensa_num_opcodes): Rename to ...
	(xtensa_isa_num_opcodes): ... this.
	(xtensa_isa_num_pipe_stages, xtensa_isa_num_formats,
	xtensa_isa_num_regfiles, xtensa_isa_num_stages,
	xtensa_isa_num_sysregs, xtensa_isa_num_interfaces,
	xtensa_isa_num_funcUnits, xtensa_format_name, xtensa_format_lookup,
	xtensa_format_decode, xtensa_format_encode, xtensa_format_length,
	xtensa_format_num_slots, xtensa_format_slot_nop_opcode,
	xtensa_format_get_slot, xtensa_format_set_slot): New functions.
	(xtensa_opcode_lookup): Add error handling.
	(xtensa_decode_insn): Replace with ...
	(xtensa_opcode_decode): ... this function, with new format and
	slot parameters.  Add error handling.
	(xtensa_encode_insn): Replace with ...
	(xtensa_opcode_encode): ... this function, which does the encoding via
	one of the entries in the "encode_fns" array.  Add error handling.
	(xtensa_opcode_name): Add error handling.
	(xtensa_opcode_is_branch, xtensa_opcode_is_jump, xtensa_opcode_is_loop,
	xtensa_opcode_is_call): New.
	(xtensa_num_operands): Replace with ...
	(xtensa_opcode_num_operands): ... this function.  Add error handling.
	(xtensa_opcode_num_stateOperands,
	xtensa_opcode_num_interfaceOperands, xtensa_opcode_num_funcUnit_uses,
	xtensa_opcode_funcUnit_use, xtensa_operand_name,
	xtensa_operand_is_visible): New.
	(xtensa_get_operand, xtensa_operand_kind): Delete.
	(xtensa_operand_inout): Add error handling and special-case for
	"sout" operands.
	(xtensa_operand_get_field, xtensa_operand_set_field): Rewritten to
	operate on one slot of an instruction.  Added error handling.
	(xtensa_operand_encode): Handle default operands with no encoding
	functions.  Check for success by comparing against decoded value.
	Add error handling.
	(xtensa_operand_decode): Handle default operands.  Return decoded value
	through argument pointer.  Add error handling.
	(xtensa_operand_is_register, xtensa_operand_regfile,
	xtensa_operand_num_regs, xtensa_operand_is_known_reg): New.
	(xtensa_operand_isPCRelative): Rename to ...
	(xtensa_operand_is_PCrelative): ... this.  Add error handling.
	(xtensa_operand_do_reloc, xtensa_operand_undo_reloc): Return value
	through argument pointer.  Add error handling.
	(xtensa_stateOperand_state, xtensa_stateOperand_inout,
	xtensa_interfaceOperand_interface, xtensa_regfile_lookup,
	xtensa_regfile_lookup_shortname, xtensa_regfile_name,
	xtensa_regfile_shortname, xtensa_regfile_view_parent,
	xtensa_regfile_num_bits, xtensa_regfile_num_entries,
	xtensa_state_lookup, xtensa_state_name, xtensa_state_num_bits,
	xtensa_state_is_exported, xtensa_sysreg_lookup,
	xtensa_sysreg_lookup_name, xtensa_sysreg_name, xtensa_sysreg_number,
	xtensa_sysreg_is_user, xtensa_interface_lookup, xtensa_interface_name,
	xtensa_interface_num_bits, xtensa_interface_inout,
	xtensa_interface_has_side_effect, xtensa_funcUnit_lookup,
	xtensa_funcUnit_name, xtensa_funcUnit_num_copies): New.
	* xtensa-modules.c: Rewrite to use new data structures.
	* reloc.c (BFD_RELOC_XTENSA_DIFF8, BFD_RELOC_XTENSA_DIFF16,
	BFD_RELOC_XTENSA_DIFF32, BFD_RELOC_XTENSA_SLOT0_OP,
	BFD_RELOC_XTENSA_SLOT1_OP, BFD_RELOC_XTENSA_SLOT2_OP,
	BFD_RELOC_XTENSA_SLOT3_OP, BFD_RELOC_XTENSA_SLOT4_OP,
	BFD_RELOC_XTENSA_SLOT5_OP, BFD_RELOC_XTENSA_SLOT6_OP,
	BFD_RELOC_XTENSA_SLOT7_OP, BFD_RELOC_XTENSA_SLOT8_OP,
	BFD_RELOC_XTENSA_SLOT9_OP, BFD_RELOC_XTENSA_SLOT10_OP,
	BFD_RELOC_XTENSA_SLOT11_OP, BFD_RELOC_XTENSA_SLOT12_OP,
	BFD_RELOC_XTENSA_SLOT13_OP, BFD_RELOC_XTENSA_SLOT14_OP,
	BFD_RELOC_XTENSA_SLOT0_ALT, BFD_RELOC_XTENSA_SLOT1_ALT,
	BFD_RELOC_XTENSA_SLOT2_ALT, BFD_RELOC_XTENSA_SLOT3_ALT,
	BFD_RELOC_XTENSA_SLOT4_ALT, BFD_RELOC_XTENSA_SLOT5_ALT,
	BFD_RELOC_XTENSA_SLOT6_ALT, BFD_RELOC_XTENSA_SLOT7_ALT,
	BFD_RELOC_XTENSA_SLOT8_ALT, BFD_RELOC_XTENSA_SLOT9_ALT,
	BFD_RELOC_XTENSA_SLOT10_ALT, BFD_RELOC_XTENSA_SLOT11_ALT,
	BFD_RELOC_XTENSA_SLOT12_ALT, BFD_RELOC_XTENSA_SLOT13_ALT,
	BFD_RELOC_XTENSA_SLOT14_ALT): Add new relocations.
	* Makefile.am (xtensa-isa.lo, xtensa-modules.lo): Update dependencies.
	* Makefile.in: Regenerate.
	* bfd-in2.h: Likewise.
	* libbfd.h: Likewise.

gas ChangeLog

	* config/tc-xtensa.c (absolute_literals_supported): New global flag.
	(UNREACHABLE_MAX_WIDTH): Define.
	(XTENSA_FETCH_WIDTH): Delete.
	(cur_vinsn, xtensa_fetch_width, xt_saved_debug_type, past_xtensa_end,
	prefer_const16, prefer_l32r): New global variables.
	(LIT4_SECTION_NAME): Define.
	(lit4_state struct): Add lit4_seg_name and lit4_seg fields.
	(XTENSA_PROP_*, GET_XTENSA_PROP_*, SET_XTENSA_PROP_*): Define.
	(frag_flags struct): New.
	(xtensa_block_info struct): Move from tc-xtensa.h.  Add flags field.
	(subseg_map struct): Add cur_total_freq and cur_target_freq fields.
	(bitfield, bit_is_set, set_bit, clear_bit): Define.
	(MAX_FORMATS): Define.
	(op_placement_info struct, op_placement_table): New.
	(O_pltrel, O_hi16, O_lo16): Define.
	(directiveE enum): Rename directive_generics to directive_transform.
	Delete directive_relax.  Add directive_schedule,
	directive_absolute_literals, and directive_last_directive.
	(directive_info): Rename "generics" to "transform".  Delete "relax".
	Add "schedule" and "absolute-literals".
	(directive_state): Adjust entries to match changes in directive_info.
	(xtensa_relax_statesE, RELAX_IMMED_MAXSTEPS): Move to tc-xtensa.h.
	(xtensa_const16_opcode, xtensa_movi_opcode, xtensa_movi_n_opcode,
	xtensa_l32r_opcode, xtensa_nop_opcode, xtensa_rsr_lcount_opcode): New.
	(xtensa_j_opcode, xtensa_rsr_opcode): Delete.
	(align_only_targets, software_a0_b_retw_interlock,
	software_avoid_b_j_loop_end, maybe_has_b_j_loop_end,
	software_avoid_short_loop, software_avoid_close_loop_end,
	software_avoid_all_short_loops, specific_opcode): Delete.
	(warn_unaligned_branch_targets): New.
	(workaround_a0_b_retw, workaround_b_j_loop_end, workaround_short_loop,
	workaround_close_loop_end, workaround_all_short_loops): Default FALSE.
	(option_[no_]link_relax, option_[no_]transform,
	option_[no_]absolute_literals, option_warn_unaligned_targets,
	option_prefer_l32r, option_prefer_const16, option_target_hardware):
	New enum values.
	(option_[no_]align_only_targets, option_literal_section_name,
	option_text_section_name, option_data_section_name,
	option_bss_section_name, option_eb, option_el): Delete.
	(md_longopts): Add entries for: [no-]transform, [no-]absolute-literals,
	warn-unaligned-targets, prefer-l32r, prefer-const16, [no-]link-relax,
	and target-hardware.  Delete entries for [no-]target-align-only,
	literal-section-name, text-section-name, data-section-name, and
	bss-section-name.
	(md_parse_option): Handle new options and remove old ones.  Accept but
	ignore [no-]density options.  Warn for [no-]generics and [no-]relax
	and treat them as [no-]transform.
	(md_show_usage): Add new options and remove old ones.
	(xtensa_setup_hw_workarounds): New.
	(md_pseudo_table): Change "word" entry to use xtensa_elf_cons.  Add
	"long", "short", "loc" and "frequency" entries.
	(use_generics): Rename to ...
	(use_transform): ... this function.  Add past_xtensa_end check.
	(use_longcalls): Add past_xtensa_end check.
	(code_density_available, can_relax): Delete.
	(do_align_targets): New.
	(get_directive): Accept dashes in directive names.  Warn about
	[no-]generics and [no-]relax directives and treat them as
	[no-]transform.
	(xtensa_begin_directive): Call md_flush_pending_output only for some
	directives.  Check for directives inside instruction bundles.  Warn
	about deprecated ".begin literal" usage.  Warn and ignore [no-]density
	directives.  Handle new directives.  Check generating_literals flag
	for literal_prefix.
	(xtensa_end_directive): Check for directives inside instruction
	bundles.  Warn and ignore [no-]density directives.  Handle new
	directives.  Call xtensa_set_frag_assembly_state.
	(xtensa_loc_directive_seen, xtensa_dwarf2_directive_loc,
	xtensa_dwarf2_emit_insn): New.
	(xtensa_literal_position): Call md_flush_pending_output.  Do not check
	use_literal_section flag.
	(xtensa_literal_pseudo): Call md_flush_pending_output.  Handle absolute
	literals.  Use xtensa_elf_cons to parse the expression.
	(xtensa_literal_prefix): Do not check use_literal_section.  Support
	".lit4" sections for absolute literals.  Change prefix convention to
	replace ".text" (or ".t" in a linkonce section).  No need to call
	subseg_set.
	(xtensa_frequency_pseudo, xtensa_elf_cons, xtensa_elf_suffix): New.
	(expression_end): Handle closing braces and colons.
	(PLT_SUFFIX, plt_suffix): Delete.
	(expression_maybe_register): Use new xtensa-isa.h functions.  Use
	xtensa_elf_suffix instead of checking for plt suffix, and handle O_lo16
	and O_hi16 expressions as well.
	(tokenize_arguments): Handle closing braces and colons.
	(parse_arguments): Use new xtensa-isa.h functions.  Handle "invisible"
	operands and paired register syntax.
	(get_invisible_operands): New.
	(xg_translate_sysreg_op): Handle new Xtensa LX RSR/WSR/XSR syntax.  Use
	new xtensa-isa.h functions.
	(xtensa_translate_old_userreg_ops, xtensa_translate_zero_immed): New.
	(xg_translate_idioms): Check if inside bundle.  Use use_transform.
	Handle new Xtensa LX RSR/WSR/XSR syntax.  Remove code to widen density
	instructions.  Use xtensa_translate_zero_immed.
	(operand_is_immed, operand_is_pcrel_label): Delete.
	(get_relaxable_immed): Use new xtensa-isa.h functions.
	(get_opcode_from_buf): Add slot parameter.  Use new xtensa-isa.h
	functions.
	(xtensa_print_insn_table, print_vliw_insn): New.
	(is_direct_call_opcode): Use new xtensa-isa.h functions.
	(is_call_opcode, is_loop_opcode, is_conditional_branch_opcode,
	is_branch_or_jump_opcode): Delete.
	(is_movi_opcode, decode_reloc, encode_reloc, encode_alt_reloc): New.
	(opnum_to_reloc, reloc_to_opnum): Delete.
	(xtensa_insnbuf_set_operand, xtensa_insnbuf_get_operand): Use new
	xtensa-isa.h functions.  Operate on one slot of an instruction.
	(xtensa_insnbuf_set_immediate_field, is_negatable_branch,
	xg_get_insn_size): Delete.
	(xg_get_build_instr_size): Use xg_get_single_size.
	(xg_is_narrow_insn, xg_is_single_relaxable_insn): Update calls to
	xg_build_widen_table.  Use xg_get_single_size.
	(xg_get_max_narrow_insn_size): Delete.
	(xg_get_max_insn_widen_size, xg_get_max_insn_widen_literal_size,
	xg_is_relaxable_insn): Update calls to xg_build_widen_table.  Use
	xg_get_single_size.
	(xg_build_to_insn): Record the loc field.  Handle OP_OPERAND_HI16U and
	OP_OPERAND_LOW16U.  Check xg_valid_literal_expression.
	(xg_expand_to_stack, xg_expand_narrow): Update calls to
	xg_build_widen_table.  Use xg_get_single_size.
	(xg_immeds_fit): Use new xtensa-isa.h functions.  Update call to
	xg_check_operand.
	(xg_symbolic_immeds_fit): Likewise.  Also handle O_lo16 and O_hi16, and
	treat weak symbols conservatively.
	(xg_check_operand): Use new xtensa-isa.h functions.
	(is_dnrange): Delete.
	(xg_assembly_relax): Inline previous calls to tinsn_copy.
	(xg_finish_frag): Specify separate relax states for the frag and slot0.
	(is_branch_jmp_to_next, xg_add_branch_and_loop_targets): Use new
	xtensa-isa.h functions.
	(xg_instruction_matches_option_term, xg_instruction_matches_or_options,
	xg_instruction_matches_options): New.
	(xg_instruction_matches_rule): Handle O_register expressions.  Call
	xg_instruction_matches_options.
	(transition_rule_cmp): New.
	(xg_instruction_match): Update call to xg_build_simplify_table.
	(xg_build_token_insn): Record loc fields.
	(xg_simplify_insn): Check is_specific_opcode field and
	density_supported flag.
	(xg_expand_assembly_insn): Skip checking code_density_available.  Use
	new xtensa-isa.h functions.  Call use_transform instead of can_relax.
	(xg_assemble_literal): Add error handling for O_big.  Call
	record_alignment.  Handle O_pltrel.
	(xg_valid_literal_expression): New.
	(xg_assemble_literal_space): Add slot parameter.  Remove call to
	set_expr_symbol_offset.  Add call to record_alignment.  Update call to
	xg_finish_frag.
	(xg_emit_insn): Delete.
	(xg_emit_insn_to_buf): Add format parameter.  Update calls to
	xg_add_opcode_fix and xtensa_insnbuf_to_chars.
	(xg_add_opcode_fix): Change opcode parameter to tinsn and add format
	and slot parameters.  Handle new "alternate" relocations for absolute
	literals and CONST16 instructions.  Check for bad uses of O_lo16 and
	O_hi16.  Use new xtensa-isa.h functions.
	(xg_assemble_tokens): Delete.
	(is_register_writer): Use new xtensa-isa.h functions.
	(is_bad_loopend_opcode): Check for xtensa_rsr_lcount_opcode instead of
	old-style RSR from LCOUNT.
	(next_frag_opcode): Delete.
	(next_frag_opcode_is_loop, next_frag_format_size, frag_format_size,
	update_next_frag_state): New.
	(update_next_frag_nop_state): Delete.
	(next_frag_pre_opcode_bytes): Use next_frag_opcode_is_loop.
	(xtensa_mark_literal_pool_location): Check use_literal_section flag and
	the state of the absolute-literals directive.  Add calls to
	record_alignment and xtensa_set_frag_assembly_state.  Call
	xtensa_switch_to_non_abs_literal_fragment instead of
	xtensa_switch_to_literal_fragment.
	(build_nop): New.
	(assemble_nop): Use build_nop.  Update call to xtensa_insnbuf_to_chars.
	(get_expanded_loop_offset): Change check for undefined opcode to an
	assertion.
	(xtensa_set_frag_assembly_state, relaxable_section,
	xtensa_find_unmarked_state_frags, xtensa_find_unaligned_branch_targets,
	xtensa_find_unaligned_loops, xg_apply_tentative_value): New.
	(md_begin): Update call to xtensa_isa_init.  Initialize linkrelax to 1.
	Set lit4_seg_name.  Call xg_init_vinsn.  Initialize new global opcodes.
	Call init_op_placement_info_table and xtensa_set_frag_assembly_state.
	(xtensa_init_fix_data): New.
	(xtensa_frob_label): Reset label symbol to the current frag.  Check
	do_align_targets and generating_literals flag.  Propagate frequency
	info to new alignment frag.  Call xtensa_set_frag_assembly_state.
	(xtensa_unrecognized_line): New.
	(xtensa_flush_pending_output): Check if inside a bundle.  Add a call
	to xtensa_set_frag_assembly_state.
	(error_reset_cur_vinsn): New.
	(md_assemble): Remove check for literal frag.  Remove call to
	istack_init.  Call use_transform instead of use_generics.  Parse
	explicit instruction format specifiers.  Move code for
	a0_b_retw_interlock workaround to xg_assemble_vliw_tokens.  Call
	error_reset_cur_vinsn on errors.  Add call to get_invisible_operands.
	Add dwarf2_where call.  Remote automatic alignment for ENTRY
	instructions.  Move call to xtensa_clear_insn_labels to the end.
	Rearrange to handle bundles.
	(xtensa_cons_fix_new): Delete.
	(xtensa_handle_align): New.
	(xtensa_frag_init): Call xtensa_set_frag_assembly_state.  Remove
	assignment to is_no_density field.
	(md_pcrel_from): Use new xtensa-isa.h functions.  Use decode_reloc
	instead of reloc_to_opnum.  Handle "alternate" relocations.
	(xtensa_force_relocation, xtensa_check_inside_bundle,
	xtensa_elf_section_change_hook): New.
	(xtensa_symbol_new_hook): Delete.
	(xtensa_fix_adjustable): Check for difference of symbols with an
	offset.  Check for external and weak symbols.
	(md_apply_fix3): Remove cases for XTENSA_OP{0,1,2} relocs.
	(md_estimate_size_before_relax): Return expansion for the first slot.
	(tc_gen_reloc): Handle difference of symbols by producing
	XTENSA_DIFF{8,16,32} relocs and by writing the value of the difference
	into the output.  Handle new XTENSA_SLOT*_OP relocs by storing the
	tentative values into the output when linkrelax is set.
	(XTENSA_PROP_SEC_NAME): Define.
	(xtensa_post_relax_hook): Call xtensa_find_unmarked_state_frags.
	Create literal tables only if using literal sections.  Create new
	property tables instead of old instruction tables.  Check for unaligned
	branch targets and loops.
	(finish_vinsn, find_vinsn_conflicts, check_t1_t2_reads_and_writes,
	new_resource_table, clear_resource_table, resize_resource_table,
	resources_available, reserve_resources, release_resources,
	opcode_funcUnit_use_unit, opcode_funcUnit_use_stage,
	resources_conflict, xg_find_narrowest_format, relaxation_requirements,
	bundle_single_op, emit_single_op, xg_assemble_vliw_tokens): New.
	(xtensa_end): Call xtensa_flush_pending_output.  Set past_xtensa_end
	flag.  Update checks for workaround options.  Call
	xtensa_mark_narrow_branches and xtensa_mark_zcl_first_insns.
	(xtensa_cleanup_align_frags): Add special case for branch targets.
	Check for and mark unreachable frags.
	(xtensa_fix_target_frags): Remove use of align_only_targets flag.
	Use RELAX_LOOP_END_BYTES in special case for negatable branch at the
	end of a zero-overhead loop body.
	(frag_can_negate_branch): Handle instructions with multiple slots.
	Use new xtensa-isa.h functions
	(xtensa_mark_narrow_branches, is_narrow_branch_guaranteed_in_range,
	xtensa_mark_zcl_first_insns): New.
	(xtensa_fix_a0_b_retw_frags, xtensa_fix_b_j_loop_end_frags): Error if
	transformations are disabled.
	(next_instrs_are_b_retw): Use new xtensa-isa.h functions.  Handle
	multislot instructions.
	(xtensa_fix_close_loop_end_frags, xtensa_fix_short_loop_frags):
	Likewise.  Also error if transformations are disabled.
	(unrelaxed_frag_max_size): New.
	(unrelaxed_frag_min_insn_count, unrelax_frag_has_b_j): Use new
	xtensa-isa.h functions.
	(xtensa_sanity_check, is_empty_loop, is_local_forward_loop): Use
	xtensa_opcode_is_loop instead of is_loop_opcode.
	(get_text_align_power): Replace as_fatal with assertion.
	(get_text_align_fill_size): Iterate instead of using modulus when
	use_nops is false.
	(get_noop_aligned_address): Assert that this is for a machine-dependent
	RELAX_ALIGN_NEXT_OPCODE frag.  Use next_frag_opcode_is_loop,
	xg_get_single_size, and frag_format_size.
	(get_widen_aligned_address): Rename to ...
	(get_aligned_diff): ... this function.  Add max_diff parameter.
	Remove handling of rs_align/rs_align_code frags.  Use
	next_frag_format_size, get_text_align_power, get_text_align_fill_size,
	next_frag_opcode_is_loop, and xg_get_single_size.  Compute max_diff
	and pass it back to caller.
	(xtensa_relax_frag): Use relax_frag_loop_align.  Add code for new
	RELAX_SLOTS, RELAX_MAYBE_UNREACHABLE, RELAX_MAYBE_DESIRE_ALIGN,
	RELAX_FILL_NOP, and RELAX_UNREACHABLE frag types.  Check relax_seen.
	(relax_frag_text_align): Rename to ...
	(relax_frag_loop_align): ... this function.  Assume loops can only be
	in the first slot of an instruction.
	(relax_frag_add_nop): Use assemble_nop instead of constructing an OR
	instruction.  Remove call to frag_wane.
	(relax_frag_narrow): Rename to ...
	(relax_frag_for_align): ... this function.  Extend to handle
	RELAX_FILL_NOP and RELAX_UNREACHABLE, as well as RELAX_SLOTS with
	RELAX_NARROW for the first slot.
	(find_address_of_next_align_frag, bytes_to_stretch): New.
	(future_alignment_required): Use find_address_of_next_align_frag and
	bytes_to_stretch.  Look ahead to subsequent frags to make smarter
	alignment decisions.
	(relax_frag_immed): Add format, slot, and estimate_only parameters.
	Check if transformations are enabled for b_j_loop_end workaround.
	Use new xtensa-isa.h functions and handle multislot instructions.
	Update call to xg_assembly_relax.
	(md_convert_frag): Handle new RELAX_SLOTS, RELAX_UNREACHABLE,
	RELAX_MAYBE_UNREACHABLE, RELAX_MAYBE_DESIRE_ALIGN, and RELAX_FILL_NOP
	frag types.
	(convert_frag_narrow): Add segP, format and slot parameters.  Call
	convert_frag_immed for branch instructions.  Adjust calls to
	tinsn_from_chars, tinsn_immed_from_frag, and xg_emit_insn_to_buf.  Use
	xg_get_single_size and xg_get_single_format.
	(convert_frag_fill_nop): New.
	(convert_frag_immed): Add format and slot parameters.  Handle multislot
	instructions and use new xtensa-isa.h functions.  Update calls to
	tinsn_immed_from_frag and xg_assembly_relax.  Check if transformations
	enabled for b_j_loop_end workaround.  Use build_nop instead of
	assemble_nop.  Check is_specific_opcode flag.  Check for unreachable
	frags.  Use xg_get_single_size.  Handle O_pltrel.
	(fix_new_exp_in_seg): Remove check for old plt flag.
	(convert_frag_immed_finish_loop): Update calls to tinsn_from_chars and
	xtensa_insnbuf_to_chars.  Call tinsn_immed_from_frag.  Change check
	for loop opcode to an assertion.  Mark all frags up to the end of the
	loop as not transformable.
	(get_last_insn_flags, set_last_insn_flags): Use get_subseg_info.
	(get_subseg_info): New.
	(xtensa_move_literals): Call xtensa_set_frag_assembly_state.  Add null
	check for dest_seg.
	(xtensa_switch_to_literal_fragment): Rewrite to handle absolute
	literals and use xtensa_switch_to_non_abs_literal_fragment otherwise.
	(xtensa_switch_to_non_abs_literal_fragment): New.
	(cache_literal_section): Add is_code parameter and pass it through to
	retrieve_literal_seg.
	(retrieve_literal_seg): Add is_code parameter and use it to set the
	flags on the literal section.  Handle case where head parameter is 0.
	(get_frag_is_no_transform, set_frag_is_specific_opcode,
	set_frag_is_no_transform): New.
	(xtensa_create_property_segments): Add end_property_function parameter
	and pass it through to add_xt_block_frags.  Call bfd_get_section_flags
	and skip SEC_DEBUGGING and !SEC_ALLOC sections.
	(xtensa_create_xproperty_segments, section_has_xproperty): New.
	(add_xt_block_frags): Add end_property_function parameter and call it
	if it is non-zero.  Call xtensa_frag_flags_init.
	(xtensa_frag_flags_is_empty, xtensa_frag_flags_init,
	get_frag_property_flags, frag_flags_to_number,
	xtensa_frag_flags_combinable, xt_block_aligned_size,
	xtensa_xt_block_combine, add_xt_prop_frags,
	init_op_placement_info_table, opcode_fits_format_slot,
	xg_get_single_size, xg_get_single_format): New.
	(istack_push): Inline call to tinsn_copy.
	(tinsn_copy): Delete.
	(tinsn_has_invalid_symbolic_operands): Handle O_hi16 and O_lo16 and
	CONST16 opcodes.  Handle O_big, O_illegal, and O_absent.
	(tinsn_has_complex_operands): Handle O_hi16 and O_lo16.
	(tinsn_to_insnbuf): Use xg_get_single_format and new xtensa-isa.h
	functions.  Handle invisible operands.
	(tinsn_to_slotbuf): New.
	(tinsn_check_arguments): Use new xtensa-isa.h functions.
	(tinsn_from_chars): Add slot parameter.  Rewrite using xg_init_vinsn,
	vinsn_from_chars, and xg_free_vinsn.
	(tinsn_from_insnbuf): New.
	(tinsn_immed_from_frag): Add slot parameter and handle multislot
	instructions.  Handle symbol differences.
	(get_num_stack_text_bytes): Use xg_get_single_size.
	(xg_init_vinsn, xg_clear_vinsn, vinsn_has_specific_opcodes,
	xg_free_vinsn, vinsn_to_insnbuf, vinsn_from_chars, expr_is_register,
	get_expr_register, set_expr_symbol_offset_diff): New.
	* config/tc-xtensa.h (MAX_SLOTS): Define.
	(xtensa_relax_statesE): Move from tc-xtensa.c. Add
	RELAX_CHECK_ALIGN_NEXT_OPCODE, RELAX_MAYBE_DESIRE_ALIGN, RELAX_SLOTS,
	RELAX_FILL_NOP, RELAX_UNREACHABLE, RELAX_MAYBE_UNREACHABLE, and
	RELAX_NONE types.
	(RELAX_IMMED_MAXSTEPS): Move from tc-xtensa.c.
	(xtensa_frag_type struct): Add is_assembly_state_set,
	use_absolute_literals, relax_seen, is_unreachable, is_specific_opcode,
	is_align, is_text_align, alignment, and is_first_loop_insn fields.
	Replace is_generics and is_relax fields by is_no_transform field.
	Delete is_text and is_longcalls fields.  Change text_expansion and
	literal_expansion to arrays of MAX_SLOTS entries.  Add arrays of
	per-slot information: literal_frags, slot_subtypes, slot_symbols,
	slot_sub_symbols, and slot_offsets.  Add fr_prev field.
	(xtensa_fix_data struct): New.
	(xtensa_symfield_type struct): Delete plt field.
	(xtensa_block_info struct): Move definition to tc-xtensa.h.  Add
	forward declaration here.
	(xt_section_type enum): Delete xt_insn_sec.  Add xt_prop_sec.
	(XTENSA_SECTION_RENAME): Undefine.
	(TC_FIX_TYPE, TC_INIT_FIX_DATA, TC_FORCE_RELOCATION, NO_PSEUDO_DOT,
	tc_unrecognized_line, md_do_align, md_elf_section_change_hook,
	HANDLE_ALIGN, TC_LINKRELAX_FIXUP, SUB_SEGMENT_ALIGN): Define.
	(TC_CONS_FIX_NEW, tc_symbol_new_hook): Delete.
	(unit_num_copies_func, opcode_num_units_func,
	opcode_funcUnit_use_unit_func, opcode_funcUnit_use_stage_func): New.
	(resource_table struct): New.
	* config/xtensa-istack.h (MAX_INSN_ARGS): Increase from 6 to 10.
	(TInsn struct): Add keep_wide, loc, fixup, record_fix, subtype,
	literal_space, symbol, sub_symbol, offset, and literal_frag fields.
	(tinsn_copy): Delete prototype.
	(vliw_insn struct): New.
	* config/xtensa-relax.c (insn_pattern_struct): Add options field.
	(widen_spec_list): Add option conditions for density and boolean
	instructions.  Add expansions using CONST16 and conditions for using
	CONST16 vs. L32R.  Use new Xtensa LX RSR/WSR syntax.  Add entries for
	predicted branches.
	(simplify_spec_list): Add option conditions for density instructions.
	Add entry for NOP instruction.
	(append_transition): Add cmp function pointer parameter and use it to
	insert the new entry in order.
	(operand_function_LOW16U, operand_function_HI16U): New.
	(xg_has_userdef_op_fn, xg_apply_userdef_op_fn): Handle
	OP_OPERAND_LOW16U and OP_OPERAND_HI16U.
	(enter_opname, split_string): Use xstrdup instead of strdup.
	(init_insn_pattern): Initialize new options field.
	(clear_req_or_option_list, clear_req_option_list,
	clone_req_or_option_list, clone_req_option_list, parse_option_cond):
	New.
	(parse_insn_pattern): Parse option conditions.
	(transition_applies): New.
	(build_transition): Use new xtensa-isa.h functions.  Fix incorrectly
	swapped last arguments in calls to append_constant_value_condition.
	Call clone_req_option_list.  Add warning about invalid opcode.
	Handle LOW16U and HI16U function names.
	(build_transition_table): Add cmp parameter and use it in calls to
	append_transition.  Use new xtensa-isa.h functions.  Check
	transition_applies before adding entries.
	(xg_build_widen_table, xg_build_simplify_table): Add cmp parameter and
	pass it through to build_transition_table.
	* config/xtensa-relax.h (ReqOrOptionList, ReqOrOption, ReqOptionList,
	ReqOption, transition_cmp_fn): New types.
	(OpType enum): Add OP_OPERAND_LOW16U and OP_OPERAND_HI16U.
	(transition_rule struct): Add options field.
	* doc/as.texinfo (Overview): Update Xtensa options.
	* doc/c-xtensa.texi (Xtensa Options): Delete --[no-]density,
	--[no-]relax, and --[no-]generics options.  Update descriptions of
	--text-section-literals and --[no-]longcalls.  Add
	--[no-]absolute-literals and --[no-]transform.
	(Xtensa Syntax): Add description of syntax for FLIX instructions.
	Remove use of "generic" and "specific" terminology for opcodes.
	(Xtensa Registers): Generalize the syntax description to include
	user-defined register files.
	(Xtensa Automatic Alignment): Update.
	(Xtensa Branch Relaxation): Mention limitation of unconditional jumps.
	(Xtensa Call Relaxation): Linker can now remove most of the overhead.
	(Xtensa Directives): Remove confusing rules about precedence.
	(Density Directive, Relax Directive): Delete.
	(Schedule Directive): New.
	(Generics Directive): Rename to ...
	(Transform Directive): ... this node.
	(Literal Directive): Update for absolute literals.  Missing
	literal_position directive is now an error.
	(Literal Position Directive): Update for absolute literals.
	(Freeregs Directive): Delete.
	(Absolute Literals Directive): New.
	(Frame Directive): Minor editing.
	* Makefile.am (DEPTC_xtensa_elf, DEPOBJ_xtensa_elf, DEP_xtensa_elf):
	Update dependencies.
	* Makefile.in: Regenerate.

gas/testsuite ChangeLog

	* gas/xtensa/all.exp: Adjust expected error message for j_too_far.
	Change entry_align test to expect an error.
	* gas/xtensa/entry_misalign2.s: Use no-transform instead of
	no-generics directives.

include ChangeLog

	* xtensa-config.h (XSHAL_USE_ABSOLUTE_LITERALS,
	XCHAL_HAVE_PREDICTED_BRANCHES, XCHAL_INST_FETCH_WIDTH): New.
	(XCHAL_EXTRA_SA_SIZE, XCHAL_EXTRA_SA_ALIGN): Delete.
	* xtensa-isa-internal.h (ISA_INTERFACE_VERSION): Delete.
	(config_sturct struct): Delete.
	(XTENSA_OPERAND_IS_REGISTER, XTENSA_OPERAND_IS_PCRELATIVE,
	XTENSA_OPERAND_IS_INVISIBLE, XTENSA_OPERAND_IS_UNKNOWN,
	XTENSA_OPCODE_IS_BRANCH, XTENSA_OPCODE_IS_JUMP,
	XTENSA_OPCODE_IS_LOOP, XTENSA_OPCODE_IS_CALL,
	XTENSA_STATE_IS_EXPORTED, XTENSA_INTERFACE_HAS_SIDE_EFFECT): Define.
	(xtensa_format_encode_fn, xtensa_get_slot_fn, xtensa_set_slot_fn): New.
	(xtensa_insn_decode_fn): Rename to ...
	(xtensa_opcode_decode_fn): ... this.
	(xtensa_immed_decode_fn, xtensa_immed_encode_fn, xtensa_do_reloc_fn,
	xtensa_undo_reloc_fn): Update.
	(xtensa_encoding_template_fn): Delete.
	(xtensa_opcode_encode_fn, xtensa_format_decode_fn,
	xtensa_length_decode_fn): New.
	(xtensa_format_internal, xtensa_slot_internal): New types.
	(xtensa_operand_internal): Delete operand_kind, inout, isPCRelative,
	get_field, and set_field fields.  Add name, field_id, regfile,
	num_regs, and flags fields.
	(xtensa_arg_internal): New type.
	(xtensa_iclass_internal): Change operands field to array of
	xtensa_arg_internal.  Add num_stateOperands, stateOperands,
	num_interfaceOperands, and interfaceOperands fields.
	(xtensa_opcode_internal): Delete length, template, and iclass fields.
	Add iclass_id, flags, encode_fns, num_funcUnit_uses, and funcUnit_uses.
	(opname_lookup_entry): Delete.
	(xtensa_regfile_internal, xtensa_interface_internal,
	xtensa_funcUnit_internal, xtensa_state_internal,
	xtensa_sysreg_internal, xtensa_lookup_entry): New.
	(xtensa_isa_internal): Replace opcode_table field with opcodes field.
	Change type of opname_lookup_table.  Delete num_modules,
	module_opcode_base, module_decode_fn, config, and has_density fields.
	Add num_formats, formats, format_decode_fn, length_decode_fn,
	num_slots, slots, num_fields, num_operands, operands, num_iclasses,
	iclasses, num_regfiles, regfiles, num_states, states,
	state_lookup_table, num_sysregs, sysregs, sysreg_lookup_table,
	max_sysreg_num, sysreg_table, num_interfaces, interfaces,
	interface_lookup_table, num_funcUnits, funcUnits and
	funcUnit_lookup_table fields.
	(xtensa_isa_module, xtensa_isa_modules): Delete.
	(xtensa_isa_name_compare): New prototype.
	(xtisa_errno, xtisa_error_msg): New.
	* xtensa-isa.h (XTENSA_ISA_VERSION): Define.
	(xtensa_isa): Change type.
	(xtensa_operand): Delete.
	(xtensa_format, xtensa_regfile, xtensa_state, xtensa_sysreg,
	xtensa_interface, xtensa_funcUnit, xtensa_isa_status,
	xtensa_funcUnit_use): New types.
	(libisa_module_specifier): Delete.
	(xtensa_isa_errno, xtensa_isa_error_msg): New prototypes.
	(xtensa_insnbuf_free, xtensa_insnbuf_to_chars,
	xtensa_insnbuf_from_chars): Update prototypes.
	(xtensa_load_isa, xtensa_extend_isa, xtensa_default_isa,
	xtensa_insn_maxlength, xtensa_num_opcodes, xtensa_decode_insn,
	xtensa_encode_insn, xtensa_insn_length,
	xtensa_insn_length_from_first_byte, xtensa_num_operands,
	xtensa_operand_kind, xtensa_encode_result,
	xtensa_operand_isPCRelative): Delete.
	(xtensa_isa_init, xtensa_operand_inout, xtensa_operand_get_field,
	xtensa_operand_set_field, xtensa_operand_encode,
	xtensa_operand_decode, xtensa_operand_do_reloc,
	xtensa_operand_undo_reloc): Update prototypes.
	(xtensa_isa_maxlength, xtensa_isa_length_from_chars,
	xtensa_isa_num_pipe_stages, xtensa_isa_num_formats,
	xtensa_isa_num_opcodes, xtensa_isa_num_regfiles, xtensa_isa_num_states,
	xtensa_isa_num_sysregs, xtensa_isa_num_interfaces,
	xtensa_isa_num_funcUnits, xtensa_format_name, xtensa_format_lookup,
	xtensa_format_decode, xtensa_format_encode, xtensa_format_length,
	xtensa_format_num_slots, xtensa_format_slot_nop_opcode,
	xtensa_format_get_slot, xtensa_format_set_slot, xtensa_opcode_decode,
	xtensa_opcode_encode, xtensa_opcode_is_branch, xtensa_opcode_is_jump,
	xtensa_opcode_is_loop, xtensa_opcode_is_call,
	xtensa_opcode_num_operands, xtensa_opcode_num_stateOperands,
	xtensa_opcode_num_interfaceOperands, xtensa_opcode_num_funcUnit_uses,
	xtensa_opcode_funcUnit_use, xtensa_operand_name,
	xtensa_operand_is_visible, xtensa_operand_is_register,
	xtensa_operand_regfile, xtensa_operand_num_regs,
	xtensa_operand_is_known_reg, xtensa_operand_is_PCrelative,
	xtensa_stateOperand_state, xtensa_stateOperand_inout,
	xtensa_interfaceOperand_interface, xtensa_regfile_lookup,
	xtensa_regfile_lookup_shortname, xtensa_regfile_name,
	xtensa_regfile_shortname, xtensa_regfile_view_parent,
	xtensa_regfile_num_bits, xtensa_regfile_num_entries,
	xtensa_state_lookup, xtensa_state_name, xtensa_state_num_bits,
	xtensa_state_is_exported, xtensa_sysreg_lookup,
	xtensa_sysreg_lookup_name, xtensa_sysreg_name, xtensa_sysreg_number,
	xtensa_sysreg_is_user, xtensa_interface_lookup, xtensa_interface_name,
	xtensa_interface_num_bits, xtensa_interface_inout,
	xtensa_interface_has_side_effect, xtensa_funcUnit_lookup,
	xtensa_funcUnit_name, xtensa_funcUnit_num_copies): New prototypes.
	* elf/xtensa.h (R_XTENSA_DIFF8, R_XTENSA_DIFF16, R_XTENSA_DIFF32,
	R_XTENSA_SLOT*_OP, R_XTENSA_SLOT*_ALT): New relocations.
	(XTENSA_PROP_SEC_NAME): Define.
	(property_table_entry): Add flags field.
	(XTENSA_PROP_*, GET_XTENSA_PROP_*, SET_XTENSA_PROP_*): Define.

ld ChangeLog

	* ld.texinfo (Xtensa): Describe new linker relaxation to optimize
	assembler-generated longcall sequences.  Describe new --size-opt
	option.
	* emulparams/elf32xtensa.sh (OTHER_SECTIONS): Add .xt.prop section.
	* emultempl/xtensaelf.em (remove_section,
	replace_insn_sec_with_prop_sec, replace_instruction_table_sections,
	elf_xtensa_after_open): New.
	(OPTION_OPT_SIZEOPT, OPTION_LITERAL_MOVEMENT,
	OPTION_NO_LITERAL_MOVEMENT): Define.
	(elf32xtensa_size_opt, elf32xtensa_no_literal_movement): New globals.
	(PARSE_AND_LIST_LONGOPTS): Add size-opt and [no-]literal-movement.
	(PARSE_AND_LIST_OPTIONS): Add --size-opt.
	(PARSE_AND_LIST_ARGS_CASES): Handle OPTION_OPT_SIZEOPT,
	OPTION_LITERAL_MOVEMENT, and OPTION_NO_LITERAL_MOVEMENT.
	(LDEMUL_AFTER_OPEN): Set to elf_xtensa_after_open.
	* scripttempl/elfxtensa.sc: Update with changes from elf.sc.
	* Makefile.am (eelf32xtensa.c): Update dependencies.
	* Makefile.in: Regenerate.

ld/testsuite ChangeLog

	* ld-xtensa/lcall1.s: Use .literal directive.
	* ld-xtensa/lcall2.s: Align function entry.
	* ld-xtensa/coalesce2.s: Likewise.

opcodes ChangeLog

	* xtensa-dis.c (state_names): Delete.
	(fetch_data): Use xtensa_isa_maxlength.
	(print_xtensa_operand): Replace operand parameter with opcode/operand
	pair.  Remove print_sr_name parameter.  Use new xtensa-isa.h functions.
	(print_insn_xtensa): Use new xtensa-isa.h functions.  Handle multislot
	instruction bundles.  Use xmalloc instead of malloc.
@
text
@d452 11
a1897 9
@@kindex --exclude-libs
@@item --exclude-libs @@var{lib},@@var{lib},...
Specifies a list of archive libraries from which symbols should not be automatically
exported. The library names may be delimited by commas or colons.  Specifying
@@code{--exclude-libs ALL} excludes symbols in all archive libraries from
automatic export. Symbols explicitly listed in a .def file are still exported,
regardless of this option. 
[This option is specific to the i386 PE targeted port of the linker]

@


1.125
log
@Add linker option: --warn-shared-textrel to produce warnings when adding a
DT_TEXTREL to a shared object.
@
text
@a5554 1
The non-interleaved order can still be specified as:
d5556 30
a5585 8
@@smallexample
SECTIONS
@@{
  .text : @@{
    *(.literal) *(.text)
  @@}
@@}
@@end smallexample
d5587 2
a5588 2
@@cindex @@code{--relax} on Xtensa
@@cindex relaxing on Xtensa
d5590 12
a5601 14
The Xtensa version of @@command{ld} enables the @@option{--relax} option by
default to attempt to reduce space in the output image by combining
literals with identical values.  It also provides the
@@option{--no-relax} option to disable this optimization.  When enabled,
the relaxation algorithm ensures that a literal will only be merged with
another literal when the new merged literal location is within the
offset range of all of its uses.

The relaxation mechanism will also attempt to optimize
assembler-generated ``longcall'' sequences of
@@code{L32R}/@@code{CALLX@@var{n}} when the target is known to fit into a
@@code{CALL@@var{n}} instruction encoding.  The current optimization
converts the sequence into @@code{NOP}/@@code{CALL@@var{n}} and removes the
literal referenced by the @@code{L32R} instruction.
@


1.124
log
@ld/

2004-10-04  H.J. Lu  <hongjiu.lu@@intel.com>

	* NEWS: Mention SORT_BY_NAME, SORT_BY_ALIGNMENT and
	--sort-section name|alignment.

	* ld.texinfo: Document SORT_BY_NAME, SORT_BY_ALIGNMENT and
	--sort-section name|alignment.

	* ld.h (sort_type): New enum.
	(wildcard_spec): Change the type of `sorted' to sort_type.

	* ldgram.y (SORT): Removed.
	(SORT_BY_NAME): Added.
	(SORT_BY_ALIGNMENT): Added.
	(wildcard_spec): Updated `sorted'. Handle SORT_BY_NAME and
	SORT_BY_ALIGNMENT.
	(input_section_spec_no_keep): Updated `sorted'.
	(statement): Replace SORT with SORT_BY_NAME.

	* ldlang.c (compare_section): New function to compare 2
	sections with different sorting schemes.
	(wild_sort): Updated. Use compare_section.
	(update_wild_statements): New function.
	(lang_process): Call update_wild_statements before
	map_input_to_output_sections.

	* ldlex.l (SORT_BY_NAME): New.
	(SORT_BY_ALIGNMENT): New.
	(SORT): Return SORT_BY_NAME.

	* ldmain.c (sort_section): New. Defined.
	(main): Initialize it to none.

	* lexsup.c (option_values): Add OPTION_SORT_SECTION.
	(ld_options): Add an entry for OPTION_SORT_SECTION.
	(parse_args): Handle OPTION_SORT_SECTION.

	* mri.c (mri_draw_tree): Updated `sorted'.

ld/testsuite/

2004-10-04  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-scripts/sort.exp: New file for section sorting tests.
	* ld-scripts/sort_b_a.d: Likewise
	* ld-scripts/sort_b_a.s: Likewise
	* ld-scripts/sort_b_a.t: Likewise
	* ld-scripts/sort_b_a_a-1.d: Likewise
	* ld-scripts/sort_b_a_a-2.d: Likewise
	* ld-scripts/sort_b_a_a-3.d: Likewise
	* ld-scripts/sort_b_a_a.t: Likewise
	* ld-scripts/sort_b_a_n-1.d: Likewise
	* ld-scripts/sort_b_a_n-2.d: Likewise
	* ld-scripts/sort_b_a_n-3.d: Likewise
	* ld-scripts/sort_b_a_n.t: Likewise
	* ld-scripts/sort_b_n.d: Likewise
	* ld-scripts/sort_b_n.s: Likewise
	* ld-scripts/sort_b_n.t: Likewise
	* ld-scripts/sort_b_n_a-1.d: Likewise
	* ld-scripts/sort_b_n_a-2.d: Likewise
	* ld-scripts/sort_b_n_a-3.d: Likewise
	* ld-scripts/sort_b_n_a.t: Likewise
	* ld-scripts/sort_b_n_n-1.d: Likewise
	* ld-scripts/sort_b_n_n-2.d: Likewise
	* ld-scripts/sort_b_n_n-3.d: Likewise
	* ld-scripts/sort_b_n_n.t: Likewise
	* ld-scripts/sort_n_a-a.s: Likewise
	* ld-scripts/sort_n_a-b.s: Likewise
	* ld-scripts/sort_no-1.d: Likewise
	* ld-scripts/sort_no-2.d: Likewise
	* ld-scripts/sort_no.t: Likewise
@
text
@d1693 4
@


1.123
log
@	* ldgram.y (DATA_SEGMENT_RELRO_END): Add one argument.
	* scripttempl/elf.sc (DATA_SEGMENT_RELRO_END): Add 0 as first
	argument.
	(DATA_SEGMENT_RELRO_GOTPLT_END): Pass $SEPARATE_GOTPLT as first
	and . as second argument.
	(GOTPLT): Move $DATA_SEGMENT_RELRO_GOTPLT_END before the section.
	* ldexp.c (fold_unary): Remove DATA_SEGMENT_RELRO_END handling here.
	(fold_binary): Add it here.  Insert padding to make relro_end
	COMMONPAGESIZE bytes aligned.  For DATA_SEGMENT_ALIGN in
	exp_dataseg_relro_adjust phase just use previously computed
	exp_data_seg.base.
	* ldlang.c (lang_size_sections): Set exp_data_seg.base for
	relro_adjust here.  Call lang_size_sections_1 once more if there
	was too big padding at DATA_SEGMENT_RELRO_END.
	* ld.texinfo (DATA_SEGMENT_RELRO_END): Add documentation.
@
text
@d1452 10
d3089 1
a3089 1
@@cindex SORT
d3092 3
a3094 3
this by using the @@code{SORT} keyword, which appears before a wildcard
pattern in parentheses (e.g., @@code{SORT(.text*)}).  When the
@@code{SORT} keyword is used, the linker will sort the files or sections
d3097 52
d3214 1
a3214 1
@@code{KEEP(SORT(*)(.ctors))}.
d3398 3
a3400 3
command, use @@samp{SORT(CONSTRUCTORS)} instead.  When using the
@@code{.ctors} and @@code{.dtors} sections, use @@samp{*(SORT(.ctors))} and
@@samp{*(SORT(.dtors))} instead of just @@samp{*(.ctors)} and
@


1.122
log
@bfd/
	* elf32-arm.h (bfd_elf32_arm_set_target_relocs): Handle "abs"
	target2 relocation type.
ld/
	* ld.texinfo: Document --target2=abs.
	* emulparms/armsymbian.sh (TARGET2_TYPE): Set.
ld/testsuite/
	* ld-arm/arm-elf.exp: Add test for --target2=abs.
	* ld-arm/arm-target2-abs.d: New file.
@
text
@d4548 15
@


1.121
log
@bfd/
	* bfd-in.h (bfd_elf32_arm_set_target_relocs): Add prototype.
	(bfd_elf32_arm_process_before_allocation): Update prototype.
	* bfd-in2.h: Regenerate.
	* bfd/elf32-arm.h (elf32_arm_link_hash_table): Add target2_reloc.
	(elf32_arm_link_hash_table_create): Set it.
	(bfd_elf32_arm_process_before_allocation): Remove target1_is_rel.
	(bfd_elf32_arm_set_target_relocs): New function.
	(arm_real_reloc_type): New function.
	(elf32_arm_final_link_relocate): Use it.  Handle R_ARM_PREL31 and
	R_ARM_GOT_PREL.  Remove R_ARM_TARGET1.
	(elf32_arm_gc_sweep_hook): Ditto.
	(elf32_arm_check_relocs): Ditto.
	(elf32_arm_relocate_section): Handle R_ARM_GOT_PREL.
	* elfarm-nabi.c (elf32_arm_howto_table): Add R_ARM_PREL31 and
	R_ARM_GOT_TARGET2.
	(elf32_arm_got_prel): New variable.
	(elf32_arm_howto_from_type): New function.
	(elf32_arm_info_to_howto): Use it.
	(elf32_arm_reloc_map): Add BFD_RELOC_ARM_PREL31 and
	BFD_RELOC_ARM_TARGET2.
	* libbfd.h: Regenerate.
	* reloc.c: Add BFD_RELOC_ARM_TARGET2 and BFD_RELOC_ARM_PREL31.
gas/
	* config/tc-arm.c (s_arm_rel31): New funciton.
	(md_pseudo_table): Add .rel31.
	(md_apply_fix3): Handle BFD_RELOC_ARM_TARGET2,
	BFD_RELOC_32_PCREL and BFD_RELOC_ARM_PREL31.
	(tc_gen_reloc): Handle BFD_RELOC_ARM_PREL31 and BFD_RELOC_ARM_TARGET2.
	(arm_fix_adjustable): Return 0 for BFD_RELOC_ARM_TARGET2.
	(arm_parse_reloc): Add (target2).
gas/testsuite/
	* gas/arm/pic.s: Add (target2).
	* gas/arm/pic.d: Ditto.
include/
	* elf/arm.h: Remove R_ARM_STKCHK and R_ARM_THM_STKCHK.
	Add R_ARM_TARGET2, R_ARM_PREL31, R_ARM_GOT_ABS, R_ARM_GOT_PREL,
	R_ARM_GOT_BREL12, R_ARM_GOTOFF12 and R_ARM_GOTRELAX.
ld/
	* ld.texinfo: Rename arm-specific section.  Document --target*
	* emulparams/armelf_fbsd.sh: Set TARGET2_TYPE.
	* emulparams/armelf_linux.sh: Ditto.
	* emulparams/armelf_nbsd.sh: Ditto.
	* emultempl/armelf.em: Set default for TARGET2_TYPE.
	(target2_type): New variable.
	(arm_elf_before_allocation): Don't pass target1_type.
	(arm_elf_create_output_section_statements): New function.
	(PARSE_AND_LIST_PROLOGUE): Add OPTION_TARGET2.
	(PARSE_AND_LIST_LONGOPTS, PARSE_AND_LIST_OPTIONS): Add --target=.
	(PARSE_AND_LIST_ARGS_CASES): Handle OPTION_TARGET2.
	(LDEMUL_CREATE_OUTPUT_SECTION_STATEMENTS): Set.
	* emultempl/armelf_oabi.em (_before_allocation): Remove extra
	argument to bfd_elf32_arm_process_before_allocation.
ld/testsuite/
	* ld-arm/arm-target1-{abs,rel}.d}: New files.
	* ld-arm/arm-target1.s: New file.
	* ld-arm/arm-target2-{,got-}rel.d: New files.
	* ld-arm/arm-target2.s: New file.
	* ld-arm/arm-rel31.d: New files.
	* ld-arm/arm-rel31.s: New files.
	* ld-arm/arm.ld: New file.
	* ld-arm/arm-elf.exp: Add new tests.
@
text
@d4925 3
a4927 1
@@samp{R_ARM_REL32} (arm*-*-symbianelf, arm*-*-elf, arm*-*-eabi)
@


1.120
log
@	* ld.texinfo (Top): Document specific options of 68HC11 and 68HC12.
@
text
@d4880 1
a4880 1
@@section @@command{ld}'s Support for Interworking Between ARM and Thumb Code
d4910 20
@


1.119
log
@bfd/

2004-07-19  H.J. Lu  <hongjiu.lu@@intel.com>

	* bfd-in.h (dynamic_lib_link_class): Add DYN_NO_ADD_NEEDED and
	DYN_NO_NEEDED.
	(bfd_elf_get_dyn_lib_class): New prototype.
	* elf.c (bfd_elf_get_dyn_lib_class): New function.

	* elflink.c (elf_link_add_object_symbols): Check DYN_AS_NEEDED,
	DYN_DT_NEEDED and DYN_NO_NEEDED bits to see if a DT_NEEDED
	entry is needed. Issue an error if a DT_NEEDED entry is needed
	for a file marked DYN_NO_NEEDED.
	(elf_link_check_versioned_symbol): Check the DYN_DT_NEEDED bit
	for DT_NEEDED tags.

	* bfd-in2.h: Regenerated.

ld/

2004-07-19  H.J. Lu  <hongjiu.lu@@intel.com>

	* emultempl/elf32.em (gld${EMULATION_NAME}_load_symbols): Also
	check the add_needed field.
	(dt_needed): New struct.
	(gld${EMULATION_NAME}_try_needed): Change the first argument
	to a pointer to struct dt_needed. Check the DYN_NO_ADD_NEEDED
	bit in the file where the DT_NEEDED entry comes from.
	(gld${EMULATION_NAME}_search_needed): Change the second
	argument to a pointer to struct dt_needed.
	(gld${EMULATION_NAME}_check_ld_so_conf): Updated.
	(gld${EMULATION_NAME}_after_open): Likewise.

	* ld.texinfo: Add --add-needed document.
	* ldlang.c (new_afile): Set p->add_needed.
	* ldlang.h (lang_input_statement_type): Add add_needed field.
	* ldmain.h (add_needed): Declare.
	* ldmain.c (add_needed): New global var.
	* lexsup.c (option_values): Add OPTION_ADD_NEEDED and
	OPTION_NO_ADD_NEEDED.
	(ld_options): Likewise.
	(parse_args): Handle them.
@
text
@d155 3
d1308 3
d2182 28
d4685 3
d4828 51
@


1.118
log
@2004-07-04  Aaron W. LaFramboise <aaron98wiridge9@@aaronwl.com>

* bfd/cofflink.c (_bfd_coff_generic_relocate_section): Resolve PE weak
externals properly.
* src/gas/config/obj-coff.c (obj_coff_weak): New .weak syntax for PE weak
externals.
* binutils/doc/binutils.texi (nm): Clarify weak symbol description.
* gas/config/tc-i386.c (tc_gen_reloc): Use addend for weak symbols in TE_PE.
* gas/doc/as.texinfo (Weak): Document PE weak symbols.
* ld/ld.texinfo (WIN32): Document PE weak symbols.
@
text
@d987 12
@


1.117
log
@* ld.texinfo (Options): Fix typo in last change.
@
text
@d5295 18
@


1.116
log
@Add --hash-size switch to the linker
@
text
@d1753 1
a1753 1
run time.  This is not done however if the *option{--hash-size} switch
@


1.115
log
@	* NEWS: Mention new linker map file generation and the
	--reduce-memory-overheads option.
	* ld.texinfo: Document --reduce-memory-overheads option.
	* ld.h (map_symbol_def): New struct.
	(struct user_section_struct, section_userdata_type): Rename to:
	(struct lean_user_section_struct, lean_section_userdata_type).
	(struct fat_user_section_struct, fat_section_userdata_type): New.
	(SECTION_USERDATA_SIZE): Define.
	(args_type): New member reduce_memory_overheads.
	* ldlang.c (map_obstack): New static variable.
	(init_map_userdata, print_all_symbols, sort_def_symbol): New functions.
	(lang_map): Unless command_line.reduce_memory_overheads is set,
	initialize lists of defined symbols for each section.
	(print_input_section): Unless command_line.reduce_memory_overheads
	is set, use print_all_symbols.
	(init_os): Use lean_section_userdata_type / SECTION_USERDATA_SIZE.
	* ldmain.c (main): Initialize command_line.reduce_memory_overheads.
	* lexsup.c (enum option_values): Add OPTION_REDUCE_MEMORY_OVERHEADS.
	(ld_options): Add entry for --reduce-memory-overheads.
	(parse_args): Handle OPTION_REDUCE_MEMORY_OVERHEADS.
@
text
@d1737 7
d1749 9
a1757 2
about 40% more memory for symbol storage.  It may be also be used for
similar such tradeoffs in the future.
@


1.114
log
@        * ld.texinfo (Output Section Address): Correct subsection name.
@
text
@d1737 8
@


1.113
log
@* emultempl/pe.em (real_flags): New static.
(OPTION_LARGE_ADDRESS_AWARE): New define.
(gld${EMULATION_NAME}_add_options): Add --large-address-aware option.
(gld_${EMULATION_NAME}_list_options): Likewise.
(gld${EMULATION_NAME}_handle_option): Likewise.
(gld_${EMULATION_NAME}_after_open): Pass real_flags to PE private data.
* ld.texinfo: Document it.
* NEWS: Mention it.
@
text
@d2837 1
a2837 1
@@subsection Output Section Description
@


1.112
log
@	* ld.texinfo (--gc-sections): Remove restriction for
	dynamic linking.
@
text
@d1875 9
@


1.111
log
@[ bfd/ChangeLog ]
2004-04-21  Chris Demetriou  <cgd@@broadcom.com>

	* coff-mips.c (bfd_mips_ecoff_create_embedded_relocs): Remove.
	* elf32-mips.c (bfd_mips_elf32_create_embedded_relocs): Remove.
	* bfd-in.h (bfd_mips_ecoff_create_embedded_relocs)
	(bfd_mips_elf32_create_embedded_relocs): Remove prototypes
	* bfd-in2.h: Regenerate.

[ ld/ChangeLog ]
2004-04-21  Chris Demetriou  <cgd@@broadcom.com>

	* ld.texinfo: Remove MIPS --embedded-relocs documentation.
	* emulparams/elf32bmip.sh (EXTRA_EM_FILE): Remove definition.
	* emulparams/mipsidt.sh (TEMPLATE_NAME): Use generic.em.
	(EXTRA_EM_FILE): Use mipsecoff.em
	* emulparams/mipsidtl.sh (TEMPLATE_NAME): Use generic.em.
	(EXTRA_EM_FILE): Use mipsecoff.em
	* emultempl/mipsecoff.em: Restructure to be included as an
	extra emulation file.
	(check_sections, gld${EMULATION_NAME}_after_open)
	(gld${EMULATION_NAME}_after_allocation)
	(gld${EMULATION_NAME}_get_script)
	(ld_${EMULATION_NAME}_emulation): Remove
	(gld${EMULATION_NAME}_before_parse): Rename to...
	(mipsecoff_before_parse): This.
	(LDEMUL_BEFORE_PARSE): Define.
	* emultempl/mipself.em: Remove file.
	* scripttempl/mips.sc (.rel.sdata): Do not include in output.
	(__runtime_reloc_start, __runtime_reloc_stop): Stop providing
	these symbols.
	* Makefile.am: Remove dependencies on emultempl/mipself.em.
	* Makefile.in: Regenerate.

[ ld/testsuite/ChangeLog ]
2004-04-21  Chris Demetriou  <cgd@@broadcom.com>

	* ld-empic/run.c: Removed as part of MIPS --embedded-relocs removal.
	* ld-empic/empic.exp: Likewise.
	* ld-empic/relax.t: Likewise.
	* ld-empic/relax1.c: Likewise.
	* ld-empic/relax2.c: Likewise.
	* ld-empic/relax3.c: Likewise.
	* ld-empic/relax4.c: Likewise.
	* ld-empic/runtest1.c: Likewise.
	* ld-empic/runtest2.c: Likewise.
	* ld-empic/runtesti.s: Likewise.
	* ld-mips-elf/empic1-ln.d: Likewise.
	* ld-mips-elf/empic1-lp.d: Likewise.
	* ld-mips-elf/empic1-mn.d: Likewise.
	* ld-mips-elf/empic1-mp.d: Likewise.
	* ld-mips-elf/empic1-ref.s: Likewise.
	* ld-mips-elf/empic1-sn.d: Likewise.
	* ld-mips-elf/empic1-sp.d: Likewise.
	* ld-mips-elf/empic1-space.s: Likewise.
	* ld-mips-elf/empic1-tgt.s: Likewise.
	* ld-mips-elf/empic2-fwd-0.d: Likewise.
	* ld-mips-elf/empic2-fwd-1.d: Likewise.
	* ld-mips-elf/empic2-fwd-tgt.s: Likewise.
	* ld-mips-elf/empic2-ref.s: Likewise.
	* ld-mips-elf/empic2-rev-0.d: Likewise.
	* ld-mips-elf/empic2-rev-1.d: Likewise.
	* ld-mips-elf/empic2-rev-tgt.s: Likewise.
	* ld-mips-elf/empic2-space.s: Likewise.
	* ld-mips-elf/emrelocs-eb.d: Likewise.
	* ld-mips-elf/emrelocs-el.d: Likewise.
	* ld-mips-elf/emrelocs.ld: Likewise.
	* ld-mips-elf/emrelocs1.s: Likewise.
	* ld-mips-elf/emrelocs2.s: Likewise.
	* ld-mips-elf/mips-elf.exp: Don't run now-removed tests.
@
text
@d1139 3
a1141 3
with @@samp{-r}, nor should it be used with dynamic linking.  The default
behaviour (of not performing this garbage collection) can be restored by
specifying @@samp{--no-gc-sections} on the command line.
@


1.110
log
@Add more documentation about h8300 relaxation.
@
text
@a1115 9
@@cindex MIPS embedded PIC code
@@kindex --embedded-relocs
@@item --embedded-relocs
This option is only meaningful when linking MIPS embedded PIC code,
generated by the -membedded-pic option to the @@sc{gnu} compiler and
assembler.  It causes the linker to create a table which may be used at
runtime to relocate any data which was statically initialized to pointer
values.  See the code in testsuite/ld-empic for details.

@


1.109
log
@	* ld.texinfo (Simple Example): Add missing punctuation.
@
text
@d4658 17
@


1.108
log
@	* bfd/bfd-in.h (bfd_elf32_arm_process_before_allocation): Update.
	* bfd/elf32-arm.h (struct elf32_elf_section_map): New.
	(struct _arm_elf_section_data): New.
	(elf32_arm_section_data): Define.
	(struct elf32_arm_link_hash_table): Add byteswap_code.
	(elf32_arm_link_hash_table_create): Initialize byteswap_code.
	(bfd_elf32_arm_process_before_allocation): Add byteswap_code.
	(elf32_arm_post_process_headers): Set EF_ARM_BE8.
	(elf32_arm_output_symbol_hook, elf32_arm_new_section_hook,
	elf32_arm_compare_mapping, elf32_arm_write_section): New functions.
	(bfd_elf32_new_section_hook, elf_backend_write_section,
	elf_backend_link_output_symbol_hook): Define.
	* ld/emultempl/armelf.em (byteswap_code): Add.
	(arm_elf_before_allocation): Pass extra parameter.
	(PARSE_AND_LIST_PROLOGUE): Add OPTION_BE8.
	(PARSE_AND_LIST_LONGOPTS, PARSE_AND_LIST_OPTIONS): Add be8.
	(PARSE_AND_LIST_ARGS_CASES): Handle OPTION_BE8.
	* ld/emultempl/armelf_oabi.em: Pass extra parameter.
	* ld/ld.texinfo: Document --be8.
@
text
@d2368 1
a2368 1
immediately after the @@samp{.data} output section in memory
@


1.107
log
@bfd/
	* elf-bfd.h (struct elf_obj_tdata): Delete dt_soname field.  Add
	dyn_lib_class field.  Rearrange for better packing.
	(elf_dt_soname): Delete.
	(elf_dyn_lib_class): Define.
	* elf.c (bfd_elf_set_dt_needed_name): Update comment.
	(bfd_elf_set_dt_needed_soname): Delete.
	(bfd_elf_set_dyn_lib_class): New function.
	* elflink.h (add_dt_needed_tag): New function.  Split out from..
	(elf_link_add_object_symbols): ..here.  Rename "name" to "soname".
	Use elf_dyn_lib_class to set dt_needed and add_needed.  Move fallback
	initialization of soname.
	(elf_link_check_versioned_symbol): Test elf_dyn_lib_class instead of
	elf_dt_soname.
	* bfd-in.h (enum dynamic_lib_link_class): New.
	(bfd_elf_set_dt_needed_soname): Delete.
	(bfd_elf_set_dyn_lib_class): Declare.
	* bfd-in2.h: Regenerate.
ld/
	* ld.texinfo: Add --as-needed doco.
	* ldmain.c (as_needed): New global var.
	* ldmain.h (as_needed): Declare.
	* lexsup.c (option_values): Add OPTION_AS_NEEDED and
	OPTION_NO_AS_NEEDED.
	(ld_options): Likewise.
	(parse_args): Handle them.
	* ldlang.h (lang_input_statement_type): Add as_needed field.
	* ldlang.c (new_afile): Set p->as_needed.
	* emultempl/elf32.em (gld${EMULATION_NAME}_load_symbols): New function.
	(gld${EMULATION_NAME}_try_needed): Use bfd_elf_set_dyn_lib_class.
	(ld_${EMULATION_NAME}_emulation): Set LDEMUL_RECOGNIZED_FILE entry.

	* ldlang.c (open_input_bfds): Remove useless cast.
	(lang_do_assignments_1): Likewise.
	(lang_for_each_input_section): Delete.
@
text
@d4765 6
@


1.106
log
@* ld.texinfo (Options): Fix example for --wrap.
@
text
@d975 12
@


1.105
log
@	* ldgram.y (exp): Add two operand ALIGN.
	* ldexp.c (fold_binary): Add ALIGN_K case.
	* ld.texinfo (ALIGN): Document two operand version.
	* ld-scripts/align.{s,t,exp}: New.
@
text
@d1705 1
a1705 1
__wrap_malloc (int c)
d1707 1
a1707 1
  printf ("malloc called with %ld\n", c);
@


1.104
log
@	* pe-dll.c (pe_create_import_fixup): Clear WP_TEXT flag.
	* ld.texinfo (--omagic): Note that writable text section
	does not conform to published PE-COFF specs.
	(--enable-auto-import): Likewise.
@
text
@d4386 4
a4389 2
@@item ALIGN(@@var{exp})
@@kindex ALIGN(@@var{exp})
d4392 13
a4404 7
Return the location counter (@@code{.}) aligned to the next @@var{exp}
boundary.
@@code{ALIGN} doesn't change the value of the location counter---it just
does arithmetic on it.  Here is an example which aligns the output
@@code{.data} section to the next @@code{0x2000} byte boundary after the
preceding section and sets a variable within the section to the next
@@code{0x8000} boundary after the input sections:
@


1.104.6.1
log
@	* ldgram.y (exp): Add two operand ALIGN.
	* ldexp.c (fold_binary): Add ALIGN_K case.
	* ld.texinfo (ALIGN): Document two operand version.
	* ld-scripts/align.{s,t,exp}: New.
@
text
@d4386 2
a4387 4
@@item ALIGN(@@var{align})
@@itemx ALIGN(@@var{exp},@@var{align})
@@kindex ALIGN(@@var{align})
@@kindex ALIGN(@@var{exp},@@var{align})
d4390 7
a4396 13
@@cindex round up expression
@@cindex align expression
Return the location counter (@@code{.}) or arbitrary expression aligned
to the next @@var{align} boundary.  The single operand @@code{ALIGN}
doesn't change the value of the location counter---it just does
arithmetic on it.  The two operand @@code{ALIGN} allows an arbitrary
expression to be aligned upwards (@@code{ALIGN(@@var{align})} is
equivalent to @@code{ALIGN(., @@var{align})}).

Here is an example which aligns the output @@code{.data} section to the
next @@code{0x2000} byte boundary after the preceding section and sets a
variable within the section to the next @@code{0x8000} boundary after the
input sections:
@


1.104.6.2
log
@Merge from mainline
@
text
@a974 12
@@kindex --as-needed
@@kindex --no-as-needed
@@item --as-needed
@@itemx --no-as-needed
This option affects ELF DT_NEEDED tags for dynamic libraries mentioned
on the command line after the @@option{--as-needed} option.  Normally,
the linker will add a DT_NEEDED tag for each dynamic library mentioned
on the command line, regardless of whether the library is actually
needed. @@option{--as-needed} causes DT_NEEDED tags to only be emitted
for libraries that satisfy some reference from regular objects.
@@option{--no-as-needed} restores the default behaviour.

@


1.104.6.3
log
@Merge to 2.15 branch.
@
text
@d1717 1
a1717 1
__wrap_malloc (size_t c)
d1719 1
a1719 1
  printf ("malloc called with %zu\n", c);
@


1.103
log
@* ldlang.c (lang_get_regions): Add extra parameter 'have_vma' which if true will
  prevent the LMA region being used as a replacement for a default VMA region.
  (lang_leave_output_section_statement): Pass extra parameter.
  (lang_leave_overlay): Likewise.
* ld.texinfo (Output Section LMA): Document that the LMA region can be set to
  the VMA region if no VMA has been set.
* ldlang.h (struct lang_output_section_phdr_list): Create a typedef for this
  type.  Minor formatting fixes.
@
text
@d690 3
a692 1
mark the output as @@code{OMAGIC}.
d1955 7
a1961 2
building the import libraries with those DATA exports.  This generally 
will 'just work' -- but sometimes you may see this message:
@


1.102
log
@Update docs to reflect fact the --undefined-symbols==ignore-all is no longer
the default for shared libraries and dynamic executables.
@
text
@d4 1
a4 1
@@c 2001, 2002, 2003 Free Software Foundation, Inc.
d64 1
a64 1
2001, 2002, 2003 Free Software Foundation, Inc.
d109 1
a109 1
2002, 2003 Free Software Foundation, Inc.
d3365 7
a3371 2
section.  Alternatively, with @@samp{AT>@@var{lma_region}} expression,
you may specify a memory region for the section's load address. @@xref{MEMORY}.
@


1.101
log
@Fix 'the the' typo
@
text
@d988 1
a988 2
@@option{-l} options which follow it.  This
option also implies @@option{--unresolved-symbols=ignore-all}.
d1497 1
a1497 2
Do not report any unresolved symbols.  This is the default when
creating shared libraries or dynamic executables.
d1500 1
a1500 2
Report all unresolved symbols.  This is the default when creating
static binaries.
@


1.100
log
@	* ChangeLog-9197: Fix typos.
	* NEWS: Likewise.
	* ld.texinfo: Likewise.
	* ldlang.c: Fix comment typos.
@
text
@d5218 1
a5218 1
the original names for the the renamed symbols will be exported.  
@


1.99
log
@	* ld.texinfo (Builtin Functions) <DEFINED>: Say that only symbols
	defined before the statement using DEFINED yield 1.
	* ldexp.c (fold_name) <case DEFINED>: In lang_first_phase_enum,
	call lang_track_definedness on symbol.  In subsequent phases, use
	lang_symbol_definition_iteration and lang_statement_iteration to
	check whether the symbol was defined before the current statement.
	(exp_fold_tree) <case etree_assign et al>: Call
	lang_update_definedness before updating symbol type when setting
	symbol.
	* ldlang.c (lang_definedness_table): New variable.
	(lang_definedness_newfunc, lang_track_definedness)
	(lang_symbol_definition_iteration, lang_update_definedness): New
	functions.
	(lang_init): Initialize lang_definedness_table and
	lang_statement_iteration.
	(lang_finish): Destroy bfd_hash_table_free.
	(lang_size_sections): Increment lang_statement_iteration.
	(lang_do_assignments_1): New function with former
	lang_do_assignments contents.  Change recursive calls to call this
	function.
	(lang_do_assignments): Evacuate contents.  Increment
	lang_statement_iteration, then just call lang_do_assignments_1.
	* ldlang.h (struct lang_definedness_hash_entry)
	(lang_statement_iteration, lang_track_definedness)
	(lang_symbol_definition_iteration, lang_update_definedness):
	Declare.
@
text
@d887 1
a887 1
shared libaries are still allowed.
@


1.98
log
@Better handking for unresolved symbols
@
text
@d4455 2
a4456 1
defined, otherwise return 0.  You can use this function to provide
@


1.97
log
@Put the keywords for the -z option into a table.
Add more text describing what the -z now option does.
@
text
@d886 2
a887 1
Disallows undefined symbols.
d988 2
a989 1
@@option{-l} options which follow it.
d996 2
a997 2
@@option{--no-undefined} is implied.  This option is only meaningful on ELF
platforms which support shared libraries.
d1011 2
a1012 1
library searching for @@option{-l} options which follow it.
d1031 1
a1031 1
restored by using the command line switch @@samp{--check-sections}.
d1152 1
a1152 1
@@samp{-M} option, above.
d1167 5
a1171 5
Normally when creating a non-symbolic shared library, undefined symbols
are allowed and left to be resolved by the runtime loader.  This option
disallows such undefined symbols if they come from regular object
files.  The switch @@samp{--no-allow-shlib-undefined} controls the
behaviour for shared objects being linked into the shared library.
d1185 9
a1193 10
Allow (the default) or disallow undefined symbols in shared objects.
The setting of this switch overrides @@samp{--no-undefined} where
shared objects are concerned.  Thus if @@samp{--no-undefined} is set
but @@samp{--no-allow-shlib-undefined} is not, the net result will be
that undefined symbols in regular object files will trigger an error,
but undefined symbols in shared objects will be ignored.

The reason that @@samp{--allow-shlib-undefined} is the default is that
the shared object being specified at link time may not be the same one
that is available at load time, so the symbols might actually be
d1195 5
a1199 5
undefined symbols in shared libraries is normal since the kernel
patches them at load time to select which function is most appropriate
for the current architecture. eg. to dynamically select an appropriate
memset function.  Apparently it is also normal for HPPA shared
libraries to have undefined symbols.
d1491 33
d1546 1
a1546 1
a symbol definition.  Unix linkers allow this somewhat sloppy practice,
d1549 1
a1549 1
Unfortunately, some C libraries use this practice, so you may get some
d1663 11
d1920 1
a1920 1
may be used to link clients against the generated DLL; this behavior
d1946 1
a1946 1
@@code{lib<basename>.dll}. This behavior allows easy distinction
d1977 1
a1977 1
this method works only when runtime environtment supports this feature.
d2017 1
a2017 1
@@code{__declspec(dllimport)}.  However, in practice that
d2074 1
a2074 1
Do not attempt to do sophisticalted linking of @@code{_symbol} to 
d2132 1
a2132 1
You can change the behavior of @@command{ld} with the environment variables
@


1.96
log
@	* ld.texinfo: Typo fixes.  Document SUBALIGN.
	* ldgram.y (opt_subalign): Add.
	* ldlex.l (SUBALIGN): Recognize.
	* ldlang.c (overlay_subalign): New var.
	(lang_enter_overlay): Add subalign param.
	(lang_enter_overlay_section): Pass overlay_subalign to
	lang_enter_output_section_statement.
	* ldlang.h (lang_enter_overlay): Update.
@
text
@d878 61
a938 23
The recognized keywords are @@code{initfirst}, @@code{interpose},
@@code{loadfltr}, @@code{nodefaultlib}, @@code{nodelete}, @@code{nodlopen},
@@code{nodump}, @@code{now}, @@code{origin}, @@code{combreloc}, @@code{nocombreloc} 
and @@code{nocopyreloc}.
The other keywords are
ignored for Solaris compatibility. @@code{initfirst} marks the object
to be initialized first at runtime before any other objects.
@@code{interpose} marks the object that its symbol table interposes
before all symbols but the primary executable. @@code{loadfltr} marks
the object that its filtees be processed immediately at runtime.
@@code{nodefaultlib} marks the object that the search for dependencies
of this object will ignore any default library search paths.
@@code{nodelete} marks the object shouldn't be unloaded at runtime.
@@code{nodlopen} marks the object not available to @@code{dlopen}.
@@code{nodump} marks the object can not be dumped by @@code{dldump}.
@@code{now} marks the object with the non-lazy runtime binding.
@@code{origin} marks the object may contain $ORIGIN.
@@code{defs} disallows undefined symbols.
@@code{muldefs} allows multiple definitions.
@@code{combreloc} combines multiple reloc sections and sorts them
to make dynamic symbol lookup caching possible.
@@code{nocombreloc} disables multiple reloc sections combining.
@@code{nocopyreloc} disables production of copy relocs.
@


1.95
log
@Correct spelling of "relocatable".
@
text
@d1220 1
a1220 1
address OS chooses for them (which can varry between invocations), like
d2689 2
a2690 1
@@var{section} [@@var{address}] [(@@var{type})] : [AT(@@var{lma})]
d3211 2
a3212 1
@@var{section} [@@var{address}] [(@@var{type})] : [AT(@@var{lma})]
d3227 1
d3334 9
@


1.94
log
@bfd/
	* elflink.h (elf_link_add_object_symbols): Use !info->executable
	instead of info->shared where appropriate.
	(bfd_elfNN_size_dynamic_sections, elf_link_output_extsym): Likewise.
	* elflink.c (_bfd_elf_create_got_section): Likewise.
	(_bfd_elf_link_create_dynamic_sections): Likewise.
	(_bfd_elf_link_assign_sym_version): Likewise.
	* elf32-i386.c (elf_i386_size_dynamic_sections): Create .interp section
	and DT_DEBUG dynamic tag even for position independent executables.
	* elf32-ppc.c (ppc_elf_size_dynamic_sections): Likewise.
	* elf32-s390.c (elf_s390_size_dynamic_sections: Likewise.
	* elf64-ppc.c (ppc64_elf_size_dynamic_sections: Likewise.
	* elf64-s390.c (elf_s390_size_dynamic_sections: Likewise.
	* elf64-x86-64.c (elf64_x86_64_size_dynamic_sections: Likewise.
	* elfxx-ia64.c (elfNN_ia64_size_dynamic_sections: Likewise.
	* elf32-sparc.c (elf32_sparc_size_dynamic_sections: Likewise.
	* elf64-alpha.c (elf64_alpha_size_dynamic_sections: Likewise.
	* elf64-sparc.c (sparc64_elf_size_dynamic_sections: Likewise.
include/
	* bfdlink.h (struct bfd_link_info): Add pie and executable
	bits.
ld/
	* lexsup.c (OPTION_PIE): Define.
	(ld_options): Add -pie and --pic-executable options.
	(parse_args): Handle OPTION_PIE.
	* ldmain.c (main): Initialize link_info.pie and
	link_info.executable.
	* genscripts.sh: Generate PIE scripts.
	* ld.texinfo: Document -pie and --pic-executable options.
	* emultempl/elf32.em (gld${EMULATION_NAME}_after_open):
	(gld${EMULATION_NAME}_place_orphan): Likewise.
	(gld${EMULATION_NAME}_get_script): Include PIE scripts.
	* scripttempl/elf.sc: In PIE scripts set . the same way as in
	shared scripts.
	* emulparams/elf_i386.sh (GENERATE_PIE_SCRIPT): Set to yes.
	* emulparams/elf64_ia64.sh (GENERATE_PIE_SCRIPT): Likewise.
	* emulparams/elf32ppc.sh (GENERATE_PIE_SCRIPT): Likewise.
	* emulparams/elf64ppc.sh (GENERATE_PIE_SCRIPT): Likewise.
	* emulparams/elf_x86_64.sh (GENERATE_PIE_SCRIPT): Likewise.
	* emulparams/elf_s390.sh (GENERATE_PIE_SCRIPT): Likewise.
	* emulparams/elf32_sparc.sh (GENERATE_PIE_SCRIPT): Likewise.
	* emulparams/elf64_sparc.sh (GENERATE_PIE_SCRIPT): Likewise.
	* emulparams/elf64alpha.sh (GENERATE_PIE_SCRIPT): Likewise.
	* emulparams/elf64_s390.sh (GENERATE_PIE_SCRIPT): Likewise.
	* emulparams/elf_i386.sh (GENERATE_PIE_SCRIPT): Likewise.
@
text
@d731 1
a731 1
@@kindex --relocateable
d733 1
a733 1
@@itemx --relocateable
@


1.93
log
@Replace occurrances of 'Hitachi' with 'Renesas'.
@
text
@d1212 12
@


1.92
log
@Add notes about the target specific nature of i386 PE command line options.
@
text
@d143 2
a144 2
@@ifset Hitachi
* Hitachi::                     ld and other Hitachi micros
d4528 1
a4528 1
@@ifset Hitachi
d4530 7
a4536 7
@@c with Hitachi chips; don't enable it for generic case, please.
@@node Hitachi
@@chapter @@command{ld} and Other Hitachi Chips

@@command{ld} also supports the H8/300H, the H8/500, and the Hitachi SH.  No
special features, commands, or command-line options are required for
these chips.
@


1.91
log
@Add Xtensa port
@
text
@d1667 1
d1674 1
d1681 1
d1700 1
d1727 1
d1733 1
d1742 1
d1749 1
d1758 1
d1769 1
d1775 1
d1780 1
d1785 1
d1790 1
d1795 1
d1800 1
d1805 1
d1816 1
d1827 1
d1836 1
d1843 1
d1854 1
d1974 1
d1980 1
d1988 1
d1994 1
d1999 1
d2005 1
d2014 1
d2024 1
@


1.90
log
@* ld.texinfo (-Tbss, -Tdata, -Ttext): Document in terms of
--section-start.
@
text
@d48 1
d161 3
d1234 3
a1236 1

d4455 3
d5083 66
@


1.89
log
@Rename the all occurances of C54X to TIC54X.
@
text
@d1430 2
a1431 5
Use @@var{org} as the starting address for---respectively---the
@@code{bss}, @@code{data}, or the @@code{text} segment of the output file.
@@var{org} must be a single hexadecimal integer;
for compatibility with other linkers, you may omit the leading
@@samp{0x} usually associated with hexadecimal values.
@


1.88
log
@* ldfile.h (struct search_dirs): Added sysrooted field.
* ldlang.h (struct lang_input_statement_struct): Likewise.
* ldfile.c (ldfile_add_library_path): Mark sysrooted paths.
(ldfile_open_file_search): Look for sysrooted filename starting
with / in ld_sysroot instead of in the current directory.  Clear
sysrooted flag if it's found in the current directory.  Set it
from the search directory's sysrooted flag where it is found
otherwise.
* ldlang.c (ldlang_sysrooted_script): New static variable.
(new_afile): Mark search_file_enums as sysrooted if
ldlang_sysrooted_script.
(load_symbols): Set ldlang_sysrooted_script according to the
script's sysrooted field while processing it.
* ld.texinfo: Document INPUT behavior in sysroot.
@
text
@d44 1
a44 1
@@set C54X
@


1.87
log
@Apply Bob Wilson's linker documenation clean ups.
@
text
@d2308 7
a2314 4
The linker will first try to open the file in the current directory.  If
it is not found, the linker will search through the archive library
search path.  See the description of @@samp{-L} in @@ref{Options,,Command
Line Options}.
@


1.86
log
@	* ld.texinfo: Remove spaces between @@samp and opening brace.
@
text
@d72 1
a72 1
section entitled "GNU Free Documentation License".
d115 1
a115 1
section entitled "GNU Free Documentation License".
d129 1
a129 1
section entitled "GNU Free Documentation License".
d148 6
d289 1
a289 1
If the linker can not recognize the format of an object file, it will
d307 1
a307 1
@@samp{--trace-symbol} are equivalent.  Note - there is one exception to
d321 2
a322 2
Note - if the linker is being invoked indirectly, via a compiler driver
(eg @@samp{gcc}) then all the linker command line options should be
d467 1
d478 1
d521 4
a524 2
object files.  The @@sc{gnu} linker uses other mechanisms for this
purpose: the @@option{-b}, @@option{--format}, @@option{--oformat} options, the
d526 4
a529 2
environment variable.  The @@sc{gnu} linker will ignore the @@option{-F}
option when not creating an ELF shared object.
d1449 1
a1449 1
about the version heirarchy for the library being created.  This option
d1640 1
a1640 1
@@subsection Options specific to i386 PE targets
d1682 1
a1682 1
do "fuzzy linking" by looking for another defined symbol that differs
d1765 1
a1765 1
Sets the major number of the "image version".  Defaults to 1.
d1769 1
a1769 1
Sets the major number of the "os version".  Defaults to 4.
d1773 1
a1773 1
Sets the major number of the "subsystem version".  Defaults to 4.
d1777 1
a1777 1
Sets the minor number of the "image version".  Defaults to 0.
d1781 1
a1781 1
Sets the minor number of the "os version".  Defaults to 0.
d1785 1
a1785 1
Sets the minor number of the "subsystem version".  Defaults to 0.
d2004 4
a2007 1
@@code{GNUTARGET}, @@code{LDEMULATION}, and @@code{COLLECT_NO_DEMANGLE}.
d2009 1
d2023 1
d2250 1
a2250 1
@@subsection Setting the entry point
d2279 1
a2279 1
@@subsection Commands dealing with files
d2366 1
a2366 1
@@subsection Commands dealing with object file formats
d2413 1
a2413 1
@@subsection Other linker script commands
d2580 1
a2580 1
@@section SECTIONS command
d2637 1
a2637 1
@@subsection Output section description
d2670 1
a2670 1
@@subsection Output section name
d2688 1
a2688 1
@@subsection Output section address
d2735 1
a2735 1
@@subsection Input section description
d2754 1
a2754 1
@@subsubsection Input section basics
d2815 1
a2815 1
@@subsubsection Input section wildcard patterns
d2892 1
a2892 1
@@subsubsection Input section for common symbols
d2928 1
a2928 1
@@subsubsection Input section and garbage collection
d2938 1
a2938 1
@@subsubsection Input section example
d2957 2
d2964 2
d2976 1
a2976 1
@@subsection Output section data
d3016 1
a3016 1
Note - these commands only work inside a section description and not
d3053 1
a3053 1
@@subsection Output section keywords
d3132 1
a3132 1
@@subsection Output section discarding
d3156 1
a3156 1
@@subsection Output section attributes
d3183 1
a3183 1
@@subsubsection Output section type
d3220 1
a3220 1
@@subsubsection Output section LMA
d3285 1
a3285 1
@@subsubsection Output section region
d3301 1
a3301 1
@@subsubsection Output section phdr
d3321 1
a3321 1
@@subsubsection Output section fill
d3349 1
a3349 1
@@subsection Overlay description
d3463 1
a3463 1
@@section MEMORY command
d3881 1
a3881 1
(i.e. @@samp{old_foo}), or you can use the @@samp{.symver} directive to
d3937 1
a3937 1
@@ifinfo
d3941 1
a3941 1
@@end ifinfo
d3948 3
a3950 3
  _fourk_1 = 4K;
  _fourk_2 = 4096;
  _fourk_3 = 0x1000;
d3965 2
a3966 2
  "SECTION" = 9;
  "with a space" = "also with a space" + 10;
d4053 1
a4053 1
@@ifinfo
d4075 1
a4075 1
@@end ifinfo
d4425 12
a4436 4
* H8/300::                      @@code{ld} and the H8/300
* i960::                        @@code{ld} and the Intel 960 family
* ARM::				@@code{ld} and the ARM family
* HPPA ELF32::                  @@code{ld} and HPPA 32-bit ELF
d4438 1
a4438 1
* MMIX::			@@code{ld} and MMIX
d4441 1
a4441 1
* MSP430::			@@code{ld} and MSP430
a4451 2
@@c FIXME!  This could use @@raisesections/@@lowersections, but there seems to be a conflict
@@c         between those and node-defaulting.
d4488 242
a5079 206
@@ifclear GENERIC
@@ifset Hitachi
@@c This stuff is pointless to say unless you're especially concerned
@@c with Hitachi chips; don't enable it for generic case, please.
@@node Hitachi
@@chapter @@command{ld} and other Hitachi chips

@@command{ld} also supports the H8/300H, the H8/500, and the Hitachi SH.  No
special features, commands, or command-line options are required for
these chips.
@@end ifset
@@end ifclear

@@ifset I960
@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node i960
@@section @@command{ld} and the Intel 960 family

@@cindex i960 support

You can use the @@samp{-A@@var{architecture}} command line option to
specify one of the two-letter names identifying members of the 960
family; the option specifies the desired output target, and warns of any
incompatible instructions in the input files.  It also modifies the
linker's search strategy for archive libraries, to support the use of
libraries specific to each particular architecture, by including in the
search loop names suffixed with the string identifying the architecture.

For example, if your @@command{ld} command line included @@w{@@samp{-ACA}} as
well as @@w{@@samp{-ltry}}, the linker would look (in its built-in search
paths, and in any paths you specify with @@samp{-L}) for a library with
the names

@@smallexample
@@group
try
libtry.a
tryca
libtryca.a
@@end group
@@end smallexample

@@noindent
The first two possibilities would be considered in any event; the last
two are due to the use of @@w{@@samp{-ACA}}.

You can meaningfully use @@samp{-A} more than once on a command line, since
the 960 architecture family allows combination of target architectures; each
use will add another pair of name variants to search for when @@w{@@samp{-l}}
specifies a library.

@@cindex @@option{--relax} on i960
@@cindex relaxing on i960
@@command{ld} supports the @@samp{--relax} option for the i960 family.  If
you specify @@samp{--relax}, @@command{ld} finds all @@code{balx} and
@@code{calx} instructions whose targets are within 24 bits, and turns
them into 24-bit program-counter relative @@code{bal} and @@code{cal}
instructions, respectively.  @@command{ld} also turns @@code{cal}
instructions into @@code{bal} instructions when it determines that the
target subroutine is a leaf routine (that is, the target subroutine does
not itself call any subroutines).

@@ifclear GENERIC
@@lowersections
@@end ifclear
@@end ifset

@@ifclear GENERIC
@@raisesections
@@end ifclear

@@node ARM
@@section @@command{ld}'s support for interworking between ARM and Thumb code

@@cindex ARM interworking support
@@kindex --support-old-code
For the ARM, @@command{ld} will generate code stubs to allow functions calls
betweem ARM and Thumb code.  These stubs only work with code that has
been compiled and assembled with the @@samp{-mthumb-interwork} command
line option.  If it is necessary to link with old ARM object files or
libraries, which have not been compiled with the -mthumb-interwork
option then the @@samp{--support-old-code} command line switch should be
given to the linker.  This will make it generate larger stub functions
which will work with non-interworking aware ARM code.  Note, however,
the linker does not support generating stubs for function calls to
non-interworking aware Thumb code.

@@cindex thumb entry point
@@cindex entry point, thumb
@@kindex --thumb-entry=@@var{entry}
The @@samp{--thumb-entry} switch is a duplicate of the generic
@@samp{--entry} switch, in that it sets the program's starting address.
But it also sets the bottom bit of the address, so that it can be
branched to using a BX instruction, and the program will start
executing in Thumb mode straight away.

@@node HPPA ELF32
@@section @@command{ld} and HPPA 32-bit ELF support
@@cindex HPPA multiple sub-space stubs
@@kindex --multi-subspace
When generating a shared library, @@command{ld} will by default generate
import stubs suitable for use with a single sub-space application.
The @@samp{--multi-subspace} switch causes @@command{ld} to generate export
stubs, and different (larger) import stubs suitable for use with
multiple sub-spaces.

@@cindex HPPA stub grouping
@@kindex --stub-group-size=@@var{N}
Long branch stubs and import/export stubs are placed by @@command{ld} in
stub sections located between groups of input sections.
@@samp{--stub-group-size} specifies the maximum size of a group of input
sections handled by one stub section.  Since branch offsets are signed,
a stub section may serve two groups of input sections, one group before
the stub section, and one group after it.  However, when using
conditional branches that require stubs, it may be better (for branch
prediction) that stub sections only serve one group of input sections.
A negative value for @@samp{N} chooses this scheme, ensuring that
branches to stubs always use a negative offset.  Two special values of
@@samp{N} are recognized, @@samp{1} and @@samp{-1}.  These both instruct
@@command{ld} to automatically size input section groups for the branch types
detected, with the same behaviour regarding stub placement as other
positive or negative values of @@samp{N} respectively.

Note that @@samp{--stub-group-size} does not split input sections.  A
single input section larger than the group size specified will of course
create a larger group (of one section).  If input sections are too
large, it may not be possible for a branch to reach its stub.

@@ifset MMIX
@@node MMIX
@@section @@code{ld} and MMIX
For MMIX, there is choice of generating @@code{ELF} object files or
@@code{mmo} object files when linking.  The simulator @@code{mmix}
understands the @@code{mmo} format.  The binutils @@code{objcopy} utility
can translate between the two formats.

There is one special section, the @@samp{.MMIX.reg_contents} section.
Contents in this section is assumed to correspond to that of global
registers, and symbols referring to it are translated to special symbols,
equal to registers.  In a final link, the start address of the
@@samp{.MMIX.reg_contents} section corresponds to the first allocated
global register multiplied by 8.  Register @@code{$255} is not included in
this section; it is always set to the program entry, which is at the
symbol @@code{Main} for @@code{mmo} files.

Symbols with the prefix @@code{__.MMIX.start.}, for example
@@code{__.MMIX.start..text} and @@code{__.MMIX.start..data} are special;
there must be only one each, even if they are local.  The default linker
script uses these to set the default start address of a section.

Initial and trailing multiples of zero-valued 32-bit words in a section,
are left out from an mmo file.
@@end ifset

@@ifset MSP430
@@node  MSP430
@@section @@code{ld} and MSP430
For the MSP430 it is possible to select the MPU architecture.  The flag @@samp{-m [mpu type]}
will select an appropriate linker script for selected MPU type.  (To get a list of known MPUs
just pass @@samp{-m help} option to the linker).

@@cindex MSP430 extra sections
The linker will recognize some extra sections which are MSP430 specific:

@@table @@code
@@item @@samp{.vectors}
Defines a portion of ROM where interrupt vectors located.

@@item @@samp{.bootloader}
Defines the bootloader portion of the ROM (if applicable).  Any code
in this section will be uploaded to the MPU.

@@item @@samp{.infomem}
Defines an information memory section (if applicable).  Any code in
this section will be uploaded to the MPU.

@@item @@samp{.infomemnobits} 
This is the same as the @@samp{.infomem} section except that any code
in this section will not be uploaded to the MPU.

@@item @@samp{.noinit}
Denotes a portion of RAM located above @@samp{.bss} section.

The last two sections are used by gcc. 
@@end table
@@end ifset

@@ifset TICOFF
@@node TI COFF
@@section @@command{ld}'s support for various TI COFF versions
@@cindex TI COFF versions
@@kindex --format=@@var{version}
The @@samp{--format} switch allows selection of one of the various
TI COFF versions.  The latest of this writing is 2; versions 0 and 1 are
also supported.  The TI COFF versions also vary in header byte-order
format; @@command{ld} will read any version or byte order, but the output
header format depends on the default specified by the specific target.
@@end ifset

@@ifclear GENERIC
@@lowersections
@@end ifclear

d5118 1
a5118 1
@@section How it works: an outline of BFD
d5145 1
a5145 1
@@section Have you found a bug?
d5174 1
a5174 1
@@section How to report bugs
d5209 3
a5211 3
bell?''  Those bug reports are useless, and we urge everyone to
@@emph{refuse to respond to them} except to chide the sender to report
bugs properly.
d5470 1
a5470 363
@@node GNU Free Documentation License
@@appendix GNU Free Documentation License
@@cindex GNU Free Documentation License

                GNU Free Documentation License

                   Version 1.1, March 2000

 Copyright (C) 2000  Free Software Foundation, Inc.
  59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.


0. PREAMBLE

The purpose of this License is to make a manual, textbook, or other
written document "free" in the sense of freedom: to assure everyone
the effective freedom to copy and redistribute it, with or without
modifying it, either commercially or noncommercially.  Secondarily,
this License preserves for the author and publisher a way to get
credit for their work, while not being considered responsible for
modifications made by others.

This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.


1. APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work that contains a
notice placed by the copyright holder saying it can be distributed
under the terms of this License.  The "Document", below, refers to any
such manual or work.  Any member of the public is a licensee, and is
addressed as "you".

A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall subject
(or to related matters) and contains nothing that could fall directly
within that overall subject.  (For example, if the Document is in part a
textbook of mathematics, a Secondary Section may not explain any
mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.

The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.

A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, whose contents can be viewed and edited directly and
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup has been designed to thwart or discourage
subsequent modification by readers is not Transparent.  A copy that is
not "Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML
or XML using a publicly available DTD, and standard-conforming simple
HTML designed for human modification.  Opaque formats include
PostScript, PDF, proprietary formats that can be read and edited only
by proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the
machine-generated HTML produced by some word processors for output
purposes only.

The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.


2. VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.


3. COPYING IN QUANTITY

If you publish printed copies of the Document numbering more than 100,
and the Document's license notice requires Cover Texts, you must enclose
the copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a publicly-accessible computer-network location containing a complete
Transparent copy of the Document, free of added material, which the
general network-using public has access to download anonymously at no
charge using public-standard network protocols.  If you use the latter
option, you must take reasonably prudent steps, when you begin
distribution of Opaque copies in quantity, to ensure that this
Transparent copy will remain thus accessible at the stated location
until at least one year after the last time you distribute an Opaque
copy (directly or through your agents or retailers) of that edition to
the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.


4. MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct
   from that of the Document, and from those of previous versions
   (which should, if there were any, be listed in the History section
   of the Document).  You may use the same title as a previous version
   if the original publisher of that version gives permission.
B. List on the Title Page, as authors, one or more persons or entities
   responsible for authorship of the modifications in the Modified
   Version, together with at least five of the principal authors of the
   Document (all of its principal authors, if it has less than five).
C. State on the Title page the name of the publisher of the
   Modified Version, as the publisher.
D. Preserve all the copyright notices of the Document.
E. Add an appropriate copyright notice for your modifications
   adjacent to the other copyright notices.
F. Include, immediately after the copyright notices, a license notice
   giving the public permission to use the Modified Version under the
   terms of this License, in the form shown in the Addendum below.
G. Preserve in that license notice the full lists of Invariant Sections
   and required Cover Texts given in the Document's license notice.
H. Include an unaltered copy of this License.
I. Preserve the section entitled "History", and its title, and add to
   it an item stating at least the title, year, new authors, and
   publisher of the Modified Version as given on the Title Page.  If
   there is no section entitled "History" in the Document, create one
   stating the title, year, authors, and publisher of the Document as
   given on its Title Page, then add an item describing the Modified
   Version as stated in the previous sentence.
J. Preserve the network location, if any, given in the Document for
   public access to a Transparent copy of the Document, and likewise
   the network locations given in the Document for previous versions
   it was based on.  These may be placed in the "History" section.
   You may omit a network location for a work that was published at
   least four years before the Document itself, or if the original
   publisher of the version it refers to gives permission.
K. In any section entitled "Acknowledgements" or "Dedications",
   preserve the section's title, and preserve in the section all the
   substance and tone of each of the contributor acknowledgements
   and/or dedications given therein.
L. Preserve all the Invariant Sections of the Document,
   unaltered in their text and in their titles.  Section numbers
   or the equivalent are not considered part of the section titles.
M. Delete any section entitled "Endorsements".  Such a section
   may not be included in the Modified Version.
N. Do not retitle any existing section as "Endorsements"
   or to conflict in title with any Invariant Section.

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties--for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.


5. COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections entitled "History"
in the various original documents, forming one section entitled
"History"; likewise combine any sections entitled "Acknowledgements",
and any sections entitled "Dedications".  You must delete all sections
entitled "Endorsements."


6. COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.

You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.


7. AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, does not as a whole count as a Modified Version
of the Document, provided no compilation copyright is claimed for the
compilation.  Such a compilation is called an "aggregate", and this
License does not apply to the other self-contained works thus compiled
with the Document, on account of their being thus compiled, if they
are not themselves derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one quarter
of the entire aggregate, the Document's Cover Texts may be placed on
covers that surround only the Document within the aggregate.
Otherwise they must appear on covers around the whole aggregate.


8. TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License provided that you also include the
original English version of this License.  In case of a disagreement
between the translation and the original English version of this
License, the original English version will prevail.


9. TERMINATION

You may not copy, modify, sublicense, or distribute the Document except
as expressly provided for under this License.  Any other attempt to
copy, modify, sublicense or distribute the Document is void, and will
automatically terminate your rights under this License.  However,
parties who have received copies, or rights, from you under this
License will not have their licenses terminated so long as such
parties remain in full compliance.


10. FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions
of the GNU Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
http://www.gnu.org/copyleft/.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.


ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

@@smallexample
    Copyright (c)  YEAR  YOUR NAME.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.1
    or any later version published by the Free Software Foundation;
    with the Invariant Sections being LIST THEIR TITLES, with the
    Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".
@@end smallexample

If you have no Invariant Sections, write "with no Invariant Sections"
instead of saying which ones are invariant.  If you have no
Front-Cover Texts, write "no Front-Cover Texts" instead of
"Front-Cover Texts being LIST"; likewise for Back-Cover Texts.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.
@


1.85
log
@Fix the behaviour of --allow-shlib-undefined, so that it does what it claims
to do.  Add an inverse switch.  Update the documentation.
@
text
@d1129 3
a1131 3
The setting of this switch overrides @@samp {--no-undefined} where
shared objects are concerned.  Thus if @@samp {--no-undefined} is set
but @@samp {--no-allow-shlib-undefined} is not, the net result will be
@


1.84
log
@Remove an extra "i" in --dll-search-prefix.
Move a cross-80th-column-margin "an" to the next line.
@
text
@d1111 4
a1114 2
are allowed and left to be resolved by the runtime loader.  These options
disallows such undefined symbols.
d1125 1
d1127 17
a1143 10
Allow undefined symbols in shared objects even  when --no-undefined is
set. The net result will be that undefined symbols in regular objects
will still trigger an error, but undefined symbols in shared objects
will be ignored.  The implementation of no_undefined makes the
assumption that the runtime linker will choke on undefined symbols.
However there is at least one system (BeOS) where undefined symbols in
shared libraries is normal since the kernel patches them at load time to
select which function is most appropriate for the current architecture.
I.E. dynamically select an appropriate memset function.  Apparently it
is also normal for HPPA shared libraries to have undefined symbols.
@


1.83
log
@(node WIN32): Some clarifications and formatting fixups.
@
text
@d1802 1
a1802 1
When linking dynamically to a dll without an import library, i
@


1.82
log
@	* Makefile.am (eelf32iq10.c): Fix tab/whitespace mixup.

	* Makefile.am (ldmain.o): Add @@TARGET_SYSTEM_ROOT_DEFINE@@.
	(GENSCRIPTS): Add @@use_sysroot@@.
	* Makefile.in: Regenerated.
	* configure.host: Move setting of NATIVE_LIB_DIRS to...
	* configure.tgt: ... here.  Use ${target} instead of ${host}
	for NATIVE_LIB_DIRS.
	* configure.in: Add --with-sysroot.
	* configure: Regenerated.
	* genscripts.sh: Accept use_sysroot option.  Set new variables
	NATIVE and USE_LIBPATH.  Prepend "=" to directory names if
	$use_sysroot.  Don't search $tool_lib if $use_sysroot.
	* ldfile.c (ldfile_add_library_path): Handle leading '='.
	* ldmain.c (TARGET_SYSTEM_ROOT): Define if not defined.
	(ld_sysroot): New variable.
	(main): Initialize ld_sysroot.
	* ldmain.h (ld_sysroot): New extern.
	* emultempl/elf32.em: Use NATIVE and USE_LIBPATH instead of
	searching $EMULATION_LIBPATH.
	(gld${EMULATION_NAME}_add_sysroot): New function.
	(gld${EMULATION_NAME}_check_ld_so_conf): Use it.  Honor ld_sysroot.
	(gld${EMULATION_NAME}_after_open): Likewise.  Only search
	environment variables if $NATIVE.
	* ld.texinfo (Options): Mention "=" prefix in the description of -L.
	* NEWS: Mention --with-sysroot.

	* emulparams/elf32bmipn32-defs.sh: Set NATIVE and LIBPATH_SUFFIX
	instead of setting LIB_PATH.
	* emulparams/elf32ppc.sh: Likewise.
	* emulparams/elf64_s390.sh: Likewise.
	* emulparams/elf64_sparc.sh: Likewise.
	* emulparams/elf64ppc.sh: Likewise.
	* emulparams/elf_x86_64.sh: Likewise.

	* emulparams/elf64_aix.sh: Add "=" prefixes to LIB_PATH.
	* emulparams/elf64hppa.sh: Add "=" prefixes to LIB_PATH.
@
text
@d4483 14
a4496 5
@@example
--export-all-symbols   [This is the default]
--exclude-symbols
--exclude-libs
@@end example 
d4504 1
a4504 1
command line.
d4510 3
d4531 34
d4783 11
a4793 2
Note: using a DEF file overrides any other symbol defining except you are 
using the @@samp{--export-all-symbols} command line options. 
@


1.81
log
@Add support for msp430.
@
text
@d4 1
a4 1
@@c 2001, 2002 Free Software Foundation, Inc.
d63 1
a63 1
2001, 2002 Free Software Foundation, Inc.
d107 2
a108 1
Copyright @@copyright{} 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000, 2001 Free Software Foundation, Inc.
d612 3
@


1.80
log
@New win32 topics: 'symbol aliasing' and 'export dll symbols'.
@
text
@d39 1
d4397 3
d4897 33
@


1.79
log
@Clarify and extend the documentation in the Machine Dependent, WIN32 section.
@
text
@d4452 2
d4465 48
d4657 1
a4657 1
Linking directly to a dll without using an import lib will work 
d4662 1
a4662 1
wonder why import libraries are used at all.  There are three reasons:
d4667 5
a4671 11
2. Sometimes, it is useful to rename exports.  For instance, the cygwin
kernel does this regularly: a symbol @@samp{_foo} will be exported as 
@@samp{_foo}, but also as @@samp{foo} by using special directives in the
DEF file when creating the import library.  This ability is not
present without import libs.

3. Also, it's sometimes necessary to include pure static objects 
within the import library (which otherwise contains only bfd's for
indirection symbols that point to the exports of a dll).  Again, 
the import lib for the cygwin kernel makes use of this ability, and
it is not possible to do this without an import lib.
d4680 51
@


1.78
log
@Add win32 machine depending section.
@
text
@d901 5
a905 5
@@kindex --accept-unknown-input-format
@@kindex --no-accept-unknown-input-format
@@item --accept-unknown-input-format
@@itemx --no-accept-unknown-input-format
Tells the linker to accept input files whoes format cannot be
d907 5
a911 5
and deliberately wants to link in these unknown format input files.
This was the default behaviour of the linker, before release 2.14.
The default behaviour from release 2.14 onwards is to reject such
input files, and so the @@samp{--accept-unknown-input-format} option
has been added to restore the old behaviour.
d3978 1
a3978 1
statement, whoes start address is 0, hence @@code{.} can be used as an
d4456 1
a4456 1
The standard Windows linker creates and uses so called import
d4458 2
a4459 2
regular static archives and could be handled as any other static
archive.  The cygwin and mingw ports of @@command{ld} has specific
d4466 1
a4466 1
by adding special decorations (dllimport/dllexport), which lets the
d4468 2
a4469 1
issue.  This increase the needed porting efforts, especially for big
d4471 39
a4509 4
initially provided by Paul Sokolovsky, allows this decoration to be
skipped, archiving a behavior more like @@command{ld} on other
platforms.  This feature is enabled with the @@samp{--enable-auto-import} 
command line option.
d4515 18
a4532 10
libraries.  Using this feature can save a lot of linking time and
memory, especially in case of bigger libraries or applications.  This
is because bigger libraries can have very large import libraries.  (The
author has seen import libraries about 10 MB size).

Linking directly to a dll can done with the standard command line
options @@samp{-L} and @@samp{-l}.  This is because @@command{ld} has
built in support for several dll names, as shown below.  In this list
@@samp{xxx} means the basic library name like "png" for the png
library:
d4538 1
a4538 1
cygxxx.dll 
d4543 14
d4559 1
a4559 1
libraries.
d4569 2
a4570 1
Linking to a dll can be done by two ways: 
d4577 5
d4596 40
@


1.77
log
@2002-12-01  H.J. Lu <hjl@@gnu.org>

	* ld.texinfo: Remove the extra `;' in sample version script.
@
text
@d46 1
d149 3
d901 12
d1808 2
a1809 2
building the DLLs with those DATA exports.  This generally will 'just 
work' -- but sometimes you may see this message:
d4399 3
d4436 96
@


1.76
log
@2002-11-27  H.J. Lu <hjl@@gnu.org>

	* ld.texinfo: Add the missing `;' to sample version scripts.
@
text
@d3746 1
a3746 1
unspecified symbols to a given version node by using @@samp{global: *;};
@


1.75
log
@Add --enable-auto-import extension.
@
text
@d3746 1
a3746 1
unspecified symbols to a given version node by using @@samp{global: *}
d3760 1
a3760 1
@@{ global: foo; bar; local: *; @@}
@


1.74
log
@Add new command line option "--no-omagic" which undoes the effects of -N.
@
text
@d1811 5
a1815 1
One solution is to force one of the 'constants' to be a variable -- 
d1851 1
a1851 1
A second method of dealing with this difficulty is to abandon
d1902 1
a1902 1
A third way to avoid this problem is to re-code your 
d1911 12
@


1.73
log
@	* ld.texinfo (ALIGN): Remove power of 2 restriction.
@
text
@d663 11
a673 2
not page-align the data segment.  If the output format supports Unix
style magic numbers, mark the output as @@code{OMAGIC}.
@


1.72
log
@Check symbols with undefine version.
@
text
@d4161 1
a4161 6
boundary.  @@var{exp} must be an expression whose value is a power of
two.  This is equivalent to
@@smallexample
(. + @@var{exp} - 1) & ~(@@var{exp} - 1)
@@end smallexample

@


1.71
log
@bfd/
2002-07-14  H.J. Lu <hjl@@gnu.org>

	* elflink.h (elf_link_assign_sym_version): Hide the default
	definition if there is a hidden versioned definition.

ld/
2002-07-14  H.J. Lu <hjl@@gnu.org>

	* ld.texinfo: Document a .symver takes precedence over a
	version script.
@
text
@d1105 6
@


1.70
log
@Update bug reporting guidelines
@
text
@d3765 2
a3766 1
@@samp{original_foo} from being exported.
@


1.70.2.1
log
@        Merge from mainline:
        2002-07-14  H.J. Lu <hjl@@gnu.org>
        * ld.texinfo: Document a .symver takes precedence over a
        version script.
@
text
@d3765 1
a3765 2
@@samp{original_foo} from being exported. A @@samp{.symver} directive
takes precedence over a version script.
@


1.70.2.2
log
@	* ld.texinfo (ALIGN): Remove power of 2 restriction.
@
text
@d4155 6
a4160 1
boundary.
@


1.70.2.3
log
@2002-09-23  Daniel Jacobowitz  <drow@@mvista.com>

	Merge from mainline:
	2002-09-22  Mark Elbrecht  <snowball3@@softhome.net>
	* scripttempl/i386go32.sc: Handle bss unique sections.

	2002-09-11  Nick Clifton  <nickc@@redhat.com>
	* po/tr.po: Updated Turkish translation.

	2002-08-28  Alan Modra  <amodra@@bigpond.net.au>
	* emultempl/aix.em (gld${EMULATION_NAME}_parse_args): Replace strtoll,
	strtoul and strtoull with bfd_scan_vma.
	(gld${EMULATION_NAME}_read_file): Likewise.

	2002-08-07  Nick Clifton  <nickc@@redhat.com>
	* emultempl/armelf.em (arm_elf_before_allocation): Only search
	for an interworking bfd if there are input bfds.

	2002-08-06  Alan Modra  <amodra@@bigpond.net.au>
	* emultempl/aix.em (gld*_before_parse): Set default arch.  Reverts
	2002-05-10 change.

	2002-08-06  H.J. Lu <hjl@@gnu.org>
	* ld.texinfo: Document --no-undefined-version.

	* ldlang.c (lang_new_vers_pattern): Set the `symver' and
	`script.' fields to 0.

	* ldmain.c (main): Initialize the allow_undefined_version to
	true.

	* lexsup.c (OPTION_NO_UNDEFINED_VERSION): New.
	(ld_options): Add --no-undefined-version.
	(parse_args): Support OPTION_NO_UNDEFINED_VERSION.

	2002-07-04  Bruno Haible  <bruno@@clisp.org>
	* emulparams/elf_i386_fbsd.sh: Set OUTPUT_FORMAT to
	elf32-i386-freebsd.
	* emulparams/elf64alpha_fbsd.sh: Set OUTPUT_FORMAT to
	elf64-alpha-freebsd.
@
text
@a1104 6
@@kindex --no-undefined-version
@@item --no-undefined-version
Normally when a symbol has an undefined version, the linker will ignore
it. This option disallows symbols with undefined version and a fatal error
will be issued instead.

@


1.70.2.4
log
@Merge fixes from trunk.
@
text
@d3721 1
a3721 1
unspecified symbols to a given version node by using @@samp{global: *;}
d3735 1
a3735 1
@@{ global: foo; bar; local: *; @@};
@


1.69
log
@* pe-dll.c (autofilter_liblist): Add more system libs excluded by default.
(autofilter_objlist): Add crtbegin.o, crtend.o.
* emultempl/pe.em (OPTION_EXCLUDE_LIBS): Add new define.
(longopts): Add new option --exclude-libs.
(gld_${EMULATION_NAME}_list_options): Give quick help about it.
(gld_${EMULATION_NAME}_parse_args): Use it.
* pe-dll.h (pe_dll_add_excludes): Add second param to prototype.
* pe-dll.c (exclude_list_struct): Add field type to distinguish symbols from
whole archives.
(pe_dll_add_excludes): Set excludes->type.
(auto_export): Add new variable libname and set to archive basename if abfd.
Use it when filtering default and user-specified libarary excludes.  Let string
"ALL" mean all libs when filtering user-specified libs.
* ld.texinfo: Document --exclude-libs.
@
text
@d4685 12
a4696 11
assume that the name of a symbol you use in an example does not matter.
Well, probably it does not, but one cannot be sure.  Perhaps the bug is
a stray memory reference which happens to fetch from the location where
that name is stored in memory; perhaps, if the name were different, the
contents of that location would fool the linker into doing the right
thing despite the bug.  Play it safe and give a specific, complete
example.  That is the easiest thing for you to do, and the most helpful.

Keep in mind that the purpose of a bug report is to enable us to fix the bug if
it is new to us.  Therefore, always write your bug reports on the assumption
that the bug has not been reported previously.
d4736 7
a4742 4
bug.  It is generally most helpful to send the actual object files,
uuencoded if necessary to get them through the mail system.  Making them
available for anonymous FTP is not as good, but may be the only
reasonable choice for large object files.
@


1.68
log
@2002-05-21  H.J. Lu  (hjl@@gnu.org)

	* emultempl/elf32.em (gld${EMULATION_NAME}_parse_args): Handle
	"-z muldefs".
	(gld${EMULATION_NAME}_list_options): Add "-z muldefs".

	* ld.texinfo: Updated for --allow-multiple-definition and
	"-z muldefs".

	* ldmain.c (main): Initialize the allow_multiple_definition
	field to false.

	* lexsup.c (OPTION_ALLOW_MULTIPLE_DEFINITION): New.
	(ld_options): Add --allow-multiple-definition.
	(parse_args): Support OPTION_ALLOW_MULTIPLE_DEFINITION.
@
text
@d1668 8
@


1.67
log
@	* ld.texinfo (Format Commands <OUTPUT_FORMAT>): Typo fix.
@
text
@d862 1
d1083 8
@


1.66
log
@2002-03-07  Daniel Jacobowitz  <drow@@mvista.com>

        * ld.texinfo: Wrap @@menu in @@ifnottex, not @@ifinfo.
@
text
@d2280 1
a2280 1
exactly like using @@samp{-oformat @@var{bfdname}} on the command line
@


1.65
log
@	* ld.texinfo (Output Section Fill): Fix amateur texinfo.
	(FILL): Likewise.
@
text
@d119 1
a119 1
@@ifinfo
d159 1
a159 1
@@end ifinfo
@


1.64
log
@	* ld.texinfo (Output Section Fill): Describe fill expressions.
	(FILL): Refer to the above.
@
text
@d2946 1
a2946 1
section attribute (@@pxref{Output Section Fill}), but it only affects the
d2949 1
a2949 1
precedence.  See (@@pxref{Output Section Fill}) for details on the fill
d3231 1
a3231 1
of hex digit starting with "0x" and without a trailing "k" or "M", then
d3234 1
a3234 1
other cases, including extra parentheses or a unary '+', the fill
d3239 1
a3239 1
output section commands; see @@ref{Output Section Data}.
@


1.63
log
@	* ld.texinfo (VERSION scripts):  Symbol names are globbing patterns.
	* ldgram.y (lang_new_vers_regex):  Rename to lang_new_vers_pattern;
	the pattern in question is not a regexp.
	* ldlang.c:  Likewise.
	* ldlang.h:  Likewise.
	* ldlex.l (V_IDENTIFIER):  Allow '[', ']', '-', '!', and '^' also.
@
text
@d2933 1
a2933 1
with the four least significant bytes of the expression, repeated as
d2949 2
a2950 1
precedence.
d3229 8
a3236 2
alignment of input sections) will be filled with the four least
significant bytes of the value, repeated as necessary.
@


1.62
log
@	* ldlex.l (DATA_SEGMENT_ALIGN, DATA_SEGMENT_END): New tokens.
	* ldgram.y (DATA_SEGMENT_ALIGN, DATA_SEGMENT_END): New tokens.
	(exp): Add DATA_SEGMENT_ALIGN (exp, exp) and DATA_SEGMENT_END (exp).
	* ldexp.c (exp_data_seg): New variable.
	(exp_print_token): Handle DATA_SEGMENT_ALIGN and DATA_SEGMENT_END.
	(fold_binary): Handle DATA_SEGMENT_ALIGN.
	(exp_fold_tree): Handle DATA_SEGMENT_END.
	Pass allocation_done when recursing instead of hardcoding
	lang_allocating_phase_enum.
	* ldexp.h (exp_data_seg): New.
	* ldlang.c (lang_size_sections_1): Renamed from lang_size_sections.
	(lang_size_sections): New.
	* ld.texinfo (DATA_SEGMENT_ALIGN, DATA_SEGMENT_END): Document.
	* scripttempl/elf.sc: Use DATA_SEGMENT_ALIGN and DATA_SEGMENT_END
	if COMMONPAGESIZE is defined.
	* emulparams/elf_i386.sh (COMMONPAGESIZE): Set to 4K.
	* emulparams/elf32_sparc.sh (COMMONPAGESIZE): Set to 8K.
	* emulparams/elf64_sparc.sh (COMMONPAGESIZE): Set to 8K.
	* emulparams/elf64alpha.sh (COMMONPAGESIZE): Set to 8K.
	* emulparams/elf64_ia64.sh (COMMONPAGESIZE): Set to 16K for shared
	libraries only.
@
text
@d4 1
a4 1
@@c 2001 Free Software Foundation, Inc.
d61 1
a61 1
2001 Free Software Foundation, Inc.
d3675 4
a3678 1
of the shared library.
@


1.61
log
@2002-02-08  Chris Demetriou  <cgd@@broadcom.com>

        * ld.texinfo (Options): Add back in -nostdlib documentation,
        which had been inadvertently removed.
@
text
@d4162 39
@


1.60
log
@Note that --emit-relocs is currently only implemented for ELF.
@
text
@d1119 6
@


1.60.2.1
log
@apply to branch:

2002-02-09  Chris Demetriou  <cgd@@broadcom.com>

        * ld.texinfo (Options): Add back in -nostdlib documentation,
        which had been inadvertently removed.
@
text
@a1118 6
@@kindex -nostdlib
@@item -nostdlib
Only search library directories explicitly specified on the
command line.  Library directories specified in linker scripts
(including linker scripts specified on the command line) are ignored.

@


1.60.2.2
log
@	* ld.texinfo (VERSION scripts):  Symbol names are globbing patterns.
	* ldgram.y (lang_new_vers_regex):  Rename to lang_new_vers_pattern;
	the pattern in question is not a regexp.
	* ldlang.c:  Likewise.
	* ldlang.h:  Likewise.
	* ldlex.l (V_IDENTIFIER):  Allow '[', ']', '-', '!', and '^' also.
@
text
@d4 1
a4 1
@@c 2001, 2002 Free Software Foundation, Inc.
d61 1
a61 1
2001, 2002 Free Software Foundation, Inc.
d3675 1
a3675 4
of the shared library; this is done using wildcard patterns, so that any
symbol whose name begins with @@samp{old}, @@samp{original}, or @@samp{new}
is matched.  The wildcard patterns available are the same as those used
in the shell when matching filenames (also known as ``globbing'').
@


1.60.2.3
log
@2002-03-07  Daniel Jacobowitz  <drow@@mvista.com>

        * ld.texinfo: Wrap @@menu in @@ifnottex, not @@ifinfo.
@
text
@d119 1
a119 1
@@ifnottex
d159 1
a159 1
@@end ifnottex
@


1.60.2.4
log
@	Merge from mainline
	2002-04-08  Alan Modra  <amodra@@bigpond.net.au>
	* ldlang.c (lang_size_sections): Don't complain about
	SEC_NEVER_LOAD sections having no memory region specified.
	* ld.texinfo (Format Commands <OUTPUT_FORMAT>): Typo fix.

	2002-04-07  matthew green  <mrg@@redhat.com>
	* ld/configure.host (*-*-netbsd*): Add support for NetBSD/ELF.

	2002-02-19  Martin Schwidefsky  <schwidefsky@@de.ibm.com>
	* emulparams/elf64_s390.sh (ARCH): Change to "s390:64-bit".
	* emulparams/elf_s390.sh (ARCH): Change to "s390:31-bit".
@
text
@d2280 1
a2280 1
exactly like using @@samp{--oformat @@var{bfdname}} on the command line
@


1.59
log
@	* ld.texinfo (VERSION): Fix markup.
@
text
@d692 2
@


1.58
log
@	* ldgram.y (vers_node): Support anonymous version tags.
	* ldlang.c (lang_register_vers_node): Ensure anonymous version
	tag is not defined together with non-anonymous versions.
	* ld.texinfo: Document it.

	* elflink.h (size_dynamic_sections): Skip anonymous version tag.
	(elf_link_assign_sym_version): Don't count anonymous version tag.
@
text
@d3695 1
a3695 1
#end smallexample
@


1.57
log
@	* ld.texinfo: Use @@command for commands, @@option for options.
	* Makefile.am (POD2MAN): Use 'GNU Development Tools' for
	the page man title.
	* Makefile.in: Rebuild.
@
text
@d3688 9
@


1.56
log
@2001-11-01  Chris Demetriou  <cgd@@broadcom.com>

        * ld.texinfo (Options): Document new option, -nostdlib.
        * lexsup.c (OPTION_NOSTDLIB): New definition.
        (ld_options): Add entry for "nostdlib".
        (parse_args): Handle OPTIONS_NOSTDLIB.
        * ldfile.c (ldfile_add_library_path): Don't add directories
        to the search path if they weren't specified on the command line
        and -nostdlib was specified.
        * ld.h (ld_config_type): New member only_cmd_line_lib_dirs.
@
text
@d12 4
d169 1
a169 1
ld [ options ] objfile...
d181 1
a181 1
@@code{ld} combines a number of object and archive files, relocates
d183 1
a183 1
compiling a program is to run @@code{ld}.
d185 1
a185 1
@@code{ld} accepts Linker Command Language files written in
d192 1
a192 1
@@code{ld} entry in @@code{info}, or the manual
d198 2
a199 2
This version of @@code{ld} uses the general purpose BFD libraries
to operate on object files. This allows @@code{ld} to read, combine, and
d208 1
a208 1
@@code{ld} continues executing, allowing you to identify other errors
d218 1
a218 1
The @@sc{gnu} linker @@code{ld} is meant to cover a broad range of situations,
d242 1
a242 1
For instance, a frequent use of @@code{ld} is to link standard Unix
d250 1
a250 1
This tells @@code{ld} to produce a file called @@var{output} as the
d255 1
a255 1
Some of the command-line options to @@code{ld} may be specified at any
d324 1
a324 1
@@table @@code
d339 2
a340 2
In the current release of @@code{ld}, this option is useful only for the
Intel 960 family of architectures.  In that @@code{ld} configuration, the
d343 1
a343 1
archive-library search path.  @@xref{i960,,@@code{ld} and the Intel 960
d346 1
a346 1
Future releases of @@code{ld} may support similar functionality for
d358 2
a359 2
@@code{ld} may be configured to support more than one kind of object
file.  If your @@code{ld} is configured this way, you can use the
d361 1
a361 1
that follow this option on the command line.  Even when @@code{ld} is
d363 1
a363 1
to specify this, as @@code{ld} should be configured to expect as a
d393 1
a393 1
For compatibility with linkers produced by MRI, @@code{ld} accepts script
d403 2
a404 2
scripts written in the general-purpose @@code{ld} scripting language.
If @@var{MRI-cmdfile} does not exist, @@code{ld} looks for it in the directories
d505 1
a505 1
Some older linkers used the @@code{-F} option throughout a compilation
d508 1
a508 1
purpose: the @@code{-b}, @@code{--format}, @@code{--oformat} options, the
d510 1
a510 1
environment variable.  The @@sc{gnu} linker will ignore the @@code{-F}
d565 1
a565 1
option may be used any number of times.  @@code{ld} will search its
d569 1
a569 1
On systems which support shared libraries, @@code{ld} may also search for
d571 1
a571 1
and SunOS systems, @@code{ld} will search a directory for a library with
d583 1
a583 1
See the @@code{-(} option for a way to force the linker to search
d590 1
a590 1
if you are using @@code{ld} on AIX, note that it is different from the
d599 2
a600 2
Add path @@var{searchdir} to the list of paths that @@code{ld} will search
for archive libraries and @@code{ld} control scripts.  You may use this
d604 1
a604 1
@@code{-L} options apply to all @@code{-l} options, regardless of the
d609 1
a609 1
@@samp{-L}) depends on which emulation mode @@code{ld} is using, and in
d671 1
a671 1
Use @@var{output} as the name for the program produced by @@code{ld}; if this
d678 1
a678 1
If @@var{level} is a numeric values greater than zero @@code{ld} optimizes
d699 1
a699 1
turn serve as input to @@code{ld}.  This is often called @@dfn{partial
d703 1
a703 1
@@c ; see @@code{-N}.
d726 1
a726 1
For compatibility with other ELF linkers, if the @@code{-R} option is
d728 1
a728 1
the @@code{-rpath} option.
d749 1
a749 1
Print the names of the input files as @@code{ld} processes them.
d757 1
a757 1
@@code{ld}'s default linker script (rather than adding to it), so
d780 1
a780 1
turn serve as input to @@code{ld}.  When linking C++ programs, @@samp{-Ur}
d804 1
a804 1
Display the version number for @@code{ld}.  The @@code{-V} option also
d900 1
a900 1
@@code{-l} options which follow it.
d907 1
a907 1
@@code{--no-undefined} is implied.  This option is only meaningful on ELF
d922 1
a922 1
library searching for @@code{-l} options which follow it.
d1067 2
a1068 2
@@code{ld} normally optimizes for speed over memory usage by caching the
symbol tables of input files in memory.  This option tells @@code{ld} to
d1070 1
a1070 1
necessary.  This may be required if @@code{ld} runs out of memory space
d1096 1
a1096 1
Normally @@code{ld} will give an error if you try to link together input
d1099 1
a1099 1
This option tells @@code{ld} that it should silently permit such possible
d1106 1
a1106 1
Turn off the effect of the @@code{--whole-archive} option for subsequent
a1116 6
@@kindex -nostdlib
@@item -nostdlib
Only search library directories explicitly specified on the
command line.  Library directories specified in linker scripts
(including linker scripts specified on the command line) are ignored.

d1120 2
a1121 2
@@code{ld} may be configured to support more than one kind of object
file.  If your @@code{ld} is configured this way, you can use the
d1123 2
a1124 2
object file.  Even when @@code{ld} is configured to support alternative
object formats, you don't usually need to specify this, as @@code{ld}
d1150 1
a1150 1
@@xref{H8/300,,@@code{ld} and the H8/300}.
d1153 1
a1153 1
@@xref{i960,, @@code{ld} and the Intel 960 family}.
d1198 1
a1198 1
linking an ELF executable with shared objects.  All @@code{-rpath}
d1200 1
a1200 1
them to locate shared objects at runtime.  The @@code{-rpath} option is
d1203 1
a1203 1
@@code{-rpath-link} option.  If @@code{-rpath} is not used when linking an
d1207 1
a1207 1
The @@code{-rpath} option may also be used on SunOS.  By default, on
d1209 4
a1212 4
@@code{-L} options it is given.  If a @@code{-rpath} option is used, the
runtime search path will be formed exclusively using the @@code{-rpath}
options, ignoring the @@code{-L} options.  This can be useful when using
gcc, which adds many @@code{-L} options which may be on NFS mounted
d1215 1
a1215 1
For compatibility with other ELF linkers, if the @@code{-R} option is
d1217 1
a1217 1
the @@code{-rpath} option.
d1231 1
a1231 1
explicitly.  In such a case, the @@code{-rpath-link} option
d1233 1
a1233 1
@@code{-rpath-link} option may specify a sequence of directory names
d1246 1
a1246 1
Any directories specified by @@code{-rpath-link} options.
d1248 4
a1251 4
Any directories specified by @@code{-rpath} options.  The difference
between @@code{-rpath} and @@code{-rpath-link} is that directories
specified by @@code{-rpath} options are included in the executable and
used at runtime, whereas the @@code{-rpath-link} option is only effective
d1254 1
a1254 1
On an ELF system, if the @@code{-rpath} and @@code{rpath-link} options
d1258 2
a1259 2
On SunOS, if the @@code{-rpath} option was not used, search any
directories specified using @@code{-L} options.
d1286 1
a1286 1
shared library if the @@code{-e} option is not used and there are
d1291 1
a1291 1
This option tells @@code{ld} to sort the common symbols by size when it
d1299 1
a1299 1
Similar to @@code{--split-by-reloc} but creates a new output section for
d1324 2
a1325 2
For some targets, the output of @@code{ld} is different in some ways from
the output of some existing linker.  This switch requests @@code{ld} to
d1329 1
a1329 1
For example, on SunOS, @@code{ld} combines duplicate entries in the
d1333 1
a1333 1
trouble).  The @@samp{--traditional-format} switch tells @@code{ld} to not
d1365 1
a1365 1
Display the version number for @@code{ld} and list the linker emulations
d1504 1
a1504 1
@@code{--whole-archive} option, include every object file in the archive
d1511 2
a1512 2
about this option, so you have to use @@code{-Wl,-whole-archive}.
Second, don't forget to use @@code{-Wl,-no-whole-archive} after your
d1539 1
a1539 1
If you link other code with this file using @@code{--wrap malloc}, then
d1545 1
a1545 1
links without the @@code{--wrap} option will succeed.  If you do this,
d1556 2
a1557 2
@@code{--enable-new-dtags}, the dynamic tags will be created as needed.
If you specify @@code{--disable-new-dtags}, no new dynamic tags will be
d1569 1
a1569 1
The i386 PE linker supports the @@code{-shared} option, which causes
d1583 1
a1583 1
@@table @@code
d1599 1
a1599 1
@@code{-shared} or specify a @@code{LIBRARY} in a given @@code{.def}
d1615 1
a1615 1
to be usable.  If you specify @@code{--enable-stdcall-fixup}, this
d1617 1
a1617 1
@@code{--disable-stdcall-fixup}, this feature is disabled and such
d1904 1
a1904 1
You can change the behavior of @@code{ld} with the environment variables
d1912 1
a1912 1
@@code{GNUTARGET} in the environment, @@code{ld} uses the natural format
d2185 1
a2185 1
with the @@code{-L} option.  You can nest calls to @@code{INCLUDE} up to
d2209 1
a2209 1
If you use @@samp{INPUT (-l@@var{file})}, @@code{ld} will transform the
d2244 1
a2244 1
@@code{ld} looks for archive libraries.  Using
d2332 1
a2332 1
to make @@code{ld} assign space to common symbols even if a relocatable
d2345 1
a2345 1
This command may be used to tell @@code{ld} to issue an error about any
d2355 1
a2355 1
@@code{ld} detects any cross references between the sections, it reports
d4258 2
a4259 2
@@code{ld} has additional features on some platforms; the following
sections describe them.  Machines where @@code{ld} has no additional
d4271 1
a4271 1
* TI COFF::                     @@code{ld} and TI COFF
d4284 1
a4284 1
@@section @@code{ld} and the H8/300
d4287 1
a4287 1
For the H8/300, @@code{ld} can perform these global optimizations when
d4293 1
a4293 1
@@code{ld} finds all @@code{jsr} and @@code{jmp} instructions whose
d4301 1
a4301 1
@@code{ld} finds all @@code{mov.b} instructions which use the
d4319 1
a4319 1
@@chapter @@code{ld} and other Hitachi chips
d4321 1
a4321 1
@@code{ld} also supports the H8/300H, the H8/500, and the Hitachi SH.  No
d4333 1
a4333 1
@@section @@code{ld} and the Intel 960 family
d4345 1
a4345 1
For example, if your @@code{ld} command line included @@w{@@samp{-ACA}} as
d4368 1
a4368 1
@@cindex @@code{--relax} on i960
d4370 2
a4371 2
@@code{ld} supports the @@samp{--relax} option for the i960 family.  If
you specify @@samp{--relax}, @@code{ld} finds all @@code{balx} and
d4374 1
a4374 1
instructions, respectively.  @@code{ld} also turns @@code{cal}
d4389 1
a4389 1
@@section @@code{ld}'s support for interworking between ARM and Thumb code
d4393 1
a4393 1
For the ARM, @@code{ld} will generate code stubs to allow functions calls
d4414 1
a4414 1
@@section @@code{ld} and HPPA 32-bit ELF support
d4417 1
a4417 1
When generating a shared library, @@code{ld} will by default generate
d4419 1
a4419 1
The @@samp{--multi-subspace} switch causes @@code{ld} to generate export
d4425 1
a4425 1
Long branch stubs and import/export stubs are placed by @@code{ld} in
d4436 1
a4436 1
@@code{ld} to automatically size input section groups for the branch types
d4473 1
a4473 1
@@section @@code{ld}'s support for various TI COFF versions
d4479 1
a4479 1
format; @@code{ld} will read any version or byte order, but the output
d4532 2
a4533 2
@@cindex bugs in @@code{ld}
@@cindex reporting bugs in @@code{ld}
d4535 1
a4535 1
Your bug reports play an essential role in making @@code{ld} reliable.
d4539 1
a4539 1
to help the entire community by making the next version of @@code{ld}
d4541 1
a4541 1
@@code{ld}.
d4563 1
a4563 1
@@code{ld} bug.  Reliable linkers never crash.
d4567 1
a4567 1
If @@code{ld} produces an error message for valid input, that is a bug.
d4571 1
a4571 1
If @@code{ld} does not produce an error message for invalid input, that
d4577 1
a4577 1
improvement of @@code{ld} are welcome in any case.
d4583 1
a4583 1
@@cindex @@code{ld} bugs, reporting
d4586 1
a4586 1
products.  If you obtained @@code{ld} from a support organization, we
d4593 1
a4593 1
Otherwise, send bug reports for @@code{ld} to
d4623 1
a4623 1
The version of @@code{ld}.  @@code{ld} announces it if you start it with
d4627 1
a4627 1
the bug in the current version of @@code{ld}.
d4630 1
a4630 1
Any patches you may have applied to the @@code{ld} source, including any
d4638 1
a4638 1
What compiler (and its version) was used to compile @@code{ld}---e.g.
d4667 1
a4667 1
Of course, if the bug is that @@code{ld} gets a fatal signal, then we
d4674 1
a4674 1
copy of @@code{ld} is out of synch, or you have encountered a bug in the
d4682 1
a4682 1
If you wish to suggest changes to the @@code{ld} source, send us context
d4685 1
a4685 1
If you even discuss something in the @@code{ld} source, refer to it by
d4723 1
a4723 1
Sometimes with a program as complicated as @@code{ld} it is very hard to
d4743 2
a4744 2
To aid users making the transition to @@sc{gnu} @@code{ld} from the MRI
linker, @@code{ld} can use MRI compatible linker scripts as an
d4748 1
a4748 1
@@code{ld}.  @@sc{gnu} @@code{ld} supports the most commonly used MRI
d4761 1
a4761 1
MRI-compatible script begins with an unrecognized keyword, @@code{ld}
d4774 1
a4774 1
Normally, @@code{ld} includes in the output file all sections from all
d4829 1
a4829 1
@@code{ld} command-line option @@samp{-M}.
d4838 1
a4838 1
same effect as specifying @@var{filename} directly on the @@code{ld}
d4843 1
a4843 1
@@var{output-name} is the name for the program produced by @@code{ld}; the
d4850 1
a4850 1
Normally, @@code{ld} orders the sections in its output file in the
@


1.55
log
@Update documentation about -T augmenting linker scripts
@
text
@d1113 6
@


1.54
log
@Add MMIX support
@
text
@d101 1
a101 1
Copyright @@copyright{} 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000 Free Software Foundation, Inc.
d280 2
a281 4
specifying a script in this way should only be used to augment the main
linker script; if you want to use some command that logically can only
appear once, such as the @@code{SECTIONS} or @@code{MEMORY} command, you
must replace the default linker script using the @@samp{-T} option.
d755 4
a758 6
output file.  You must use this option if you want to use a command
which can only appear once in a linker script, such as the
@@code{SECTIONS} or @@code{MEMORY} command.  @@xref{Scripts}.  If
@@var{scriptfile} does not exist in the current directory, @@code{ld}
looks for it in the directories specified by any preceding @@samp{-L}
options.  Multiple @@samp{-T} options accumulate.
@


1.53
log
@Add support for -z nocopyreloc.
@
text
@d34 1
d4267 3
d4444 26
@


1.52
log
@From John Reiser <jreiser@@BitWagon.com>
	* ldlang.c (lang_common): Conditionally inhibit Common allocation.
	* lexsup.c: Add --no-define-common commandline option.
	* ldgram.y: Add INHIBIT_COMMON_ALLOCATION script command.
	* ldlex.l: Likewise.
	* ld.h: Add command_line.inhibit_common_definition.
	* ldmain.c (main): Initialize.
	* ld.texinfo: Document.
@
text
@d843 3
a845 2
@@code{nodump}, @@code{now}, @@code{origin}, @@code{combreloc} and
@@code{nocombreloc}. The other keywords are
d862 1
@


1.51
log
@oops - frag omitted from previous patch application
@
text
@d953 18
d2331 7
@


1.50
log
@improve documenation about auto-import
@
text
@d1778 8
@


1.49
log
@2001-09-12  Paul Sokolovsky  <Paul.Sokolovsky@@technologist.com>
        * emultempl/pe.em(make_import_fixup): change signature to
        take asection as well as arelec; we need this for proper
        error reporting.  Only call pe_create_import_fixup() if
        there is no attempt to add a constant addend to the reloc;
        otherwise, report error condition.
        * pe-dll.c(pe_walk_relocs_of_symbol): change signature,
        since final argument is a pointer to make_import_fixup().
        Change call to cb() to match make_import_fixup() signature.
        (make_import_fixup_mark): make buffer_len unsigned.
        * pe-dll.h: change signature of pe_walk_relocs_of_symbol.
2001-09-12  Charles Wilson  <cwilson@@ece.gatech.edu>
        * ld.texinfo: add verbose documentation for auto-import
        direct-addressing workaround, to compliment the terse
        error message.
@
text
@d1741 8
a1748 2
constant index into an array variable imported from a DLL.  There are
several ways to address this difficulty.
d1769 2
a1770 1
For structs, the only option is to make the struct itself variable:
@


1.48
log
@Set correct value for default (PE) stack size.
@
text
@d1729 1
a1729 1
Do sophisticalted linking of @@code{_symbol} to @@code{__imp__symbol} for 
d1731 95
a1825 1
building the DLLs with those DATA exports.
@


1.47
log
@	* elf-bfd.h (enum elf_reloc_type_class): New.
	(struct elf_backend_data): Add elf_backend_reloc_type_class.
	(_bfd_elf_reloc_type_class): New.
	* elfxx-target.h (elf_backend_reloc_type_class): Define.
	(elfNN_bed): Add elf_backend_reloc_type_class.
	* elf.c (_bfd_elf_reloc_type_class): New.
	* elf32-i386.c (elf_i386_check_relocs): Set DF_TEXTREL if the reloc
	is against read-only section.
	(elf_i386_size_dynamic_sections): Use DF_TEXTREL flag instead of
	looking up section names for DT_TEXTREL.
	(elf_i386_reloc_type_class): New.
	(elf_backend_reloc_type_class): Define.
	* elf32-sparc.c (elf32_sparc_check_relocs): Set DF_TEXTREL if the
	reloc is against read-only section.
	(elf32_sparc_size_dynamic_sections): Use DF_TEXTREL flag instead of
	looking up section names for DT_TEXTREL.
	(elf32_sparc_reloc_type_class): New.
	(elf_backend_reloc_type_class): Define.
	* elf64-sparc.c (sparc64_elf_check_relocs): Set DF_TEXTREL if the
	reloc is against read-only section.
	(sparc64_elf_size_dynamic_sections): Use DF_TEXTREL flag instead of
	looking up section names for DT_TEXTREL.
	(sparc64_elf_reloc_type_class): New.
	(elf_backend_reloc_type_class): Define.
	* elfxx-ia64.c (struct elfNN_ia64_link_hash_table): Add reltext field.
	(elfNN_ia64_hash_table_create): Clear ia64_info.
	(get_reloc_section): Set DF_TEXTREL if the reloc is against read-only
	section.
	(elfNN_ia64_size_dynamic_sections): Use ia64_info->reltext flag
	instead of looking up section names for DT_TEXTREL.
	(elfNN_ia64_reloc_type_class): New.
	(elf_backend_reloc_type_class): Define.
	* elflink.h (size_dynamic_sections): Add spare DT_NULL tags.
	(struct elf_link_sort_rela): New.
	(elf_link_sort_cmp1, elf_link_sort_cmp2, elf_link_sort_relocs): New.
	(elf_bfd_final_link): Call elf_link_sort_relocs.
	Convert one spare DT_NULL into DT_RELCOUNT resp. DT_RELACOUNT if
	necessary.

	* bfdlink.h (struct bfd_link_info): Add combreloc and
	spare_dynamic_tags fields.

	* emultempl/elf32.em (place_orphan): Place orphan .rel* sections
	into .rel.dyn resp. .rela.dyn if combreloc.
	(get_script): If .x linker script is equal to .xn, only put it
	once into the binary.
	Add .xc and .xsc scripts.
	(parse_args): Handle -z combreloc and -z nocombreloc.
	* scripttempl/elf.sc (.rela.sbss): Fix a typo.
	For .xc and .xsc scripts put all .rel* or .rela* input sections
	but .rel*.plt and PLT-like sections into .rel.dyn resp. .rela.dyn.
	* genscripts.sh (GENERATE_COMBRELOC_SCRIPT): Set if SCRIPT_NAME
	is elf.
	Strip trailing whitespace from script.
	Generate .xc and .xsc scripts if requested.
	* ldmain.c (main): Initialize link_info.combreloc and
	link_info.spare_dynamic_tags.
	* lexsup.c (OPTION_SPARE_DYNAMIC_TAGS): Define.
	(ld_options): Add --spare-dynamic-tags option.
	(parse_args): Likewise.
	* ld.texinfo: Document -z combreloc and -z nocombreloc.
	* ldint.texinfo: Document .xc and .xsc linker scripts.
	* NEWS: Add notes about -z combreloc and SHF_MERGE.
@
text
@d1752 1
a1752 1
used as stack for this program.  The default is 32Mb reserved, 4K
@


1.46
log
@	* ld.texinfo: Document that fill values now use the four least
	significant bytes.
	* emulparams/elf32fr30.sh (NOP): Update.
	* emulparams/elf32mcore.sh: Likewise.
	* emulparams/elf64_s390.sh: Likewise.
	* emulparams/elf_i386.sh: Likewise.
	* emulparams/elf_i386_be.sh: Likewise.
	* emulparams/elf_i386_chaos.sh: Likewise.
	* emulparams/elf_i386_ldso.sh: Likewise.
	* emulparams/elf_s390.sh: Likewise.
	* emulparams/elf_x86_64.sh: Likewise.
	* emulparams/i386moss.sh: Likewise.
	* emulparams/i386nw.sh: Likewise.
	* emulparams/m68kelf.sh: Likewise.
	* scripttempl/elf.sc: Update NOP comment.
	* scripttempl/elfi370.sc: Likewise.
	* scripttempl/elfm68hc11.sc: Likewise.
	* scripttempl/elfm68hc12.sc: Likewise.
	* scripttempl/nw.sc: Likewise.
@
text
@d843 2
a844 1
@@code{nodump}, @@code{now} and @@code{origin}. The other keywords are
d858 3
@


1.45
log
@Make --verbose always display linker script
@
text
@d1268 1
a1268 1
byte symbols, then all the two bytes, then all the four bytes, and then
d2784 1
a2784 1
with the two least significant bytes of the expression, repeated as
d2791 1
a2791 1
value @@samp{0x9090}:
d2793 1
a2793 1
FILL(0x9090)
d3079 1
a3079 1
alignment of input sections) will be filled with the two least
d3088 1
a3088 1
SECTIONS @@{ .text : @@{ *(.text) @@} =0x9090 @@}
d3731 1
a3731 1
    @@} = 0x1234;
d3739 1
a3739 1
@@samp{.text} section from @@file{file3}.  The notation @@samp{= 0x1234}
@


1.44
log
@	* ld.texinfo (Input Section Basics): Clarify ordering of output
	sections.
	* ldlang.c (callback_t): Add wildcard_list param.
	(walk_wild_section): Remove "section" param.  Rewrite for
	lang_wild_statement_type change.  Remove unique_section_p test.
	(walk_wild_file): Remove "section" param.
	(walk_wild): Remove "section" and "file" params.
	(lang_gc_wild): Likewise.
	(wild): Likewise.  Modify for lang_wild_statement_type change.
	(wild_sort): Likewise.  Add "sec" param.
	(gc_section_callback): Likewise.
	(output_section_callback): Likewise.  Do unique_section_p test.
	(map_input_to_output_sections): Modify call to wild.
	(lang_gc_sections_1): Likewise.
	(print_wild_statement): Modify for lang_wild_statement_type
	change.
	(lang_add_wild): Replace filename, filenames_sorted param with
	filespec.  Replace section_name, sections_sorted,
	exclude_filename_list with section_list.
	* ldlang.h (lang_add_wild): Here too.
	(lang_wild_statement_type): Replace section_name, sections_sorted,
	and exclude_filename_list with section_list.
	* ldgram.y (current_file): Delete.
	(%union): Add wildcard_list.
	(file_NAME_list): Set type to wildcard_list.  Build a linked list
	rather than calling lang_add_wild for each entry.
	(input_section_spec_no_keep): Call lang_add_wild here instead.
	* ld.h (struct wildcard_list): Declare.
	* mri.c (mri_draw_tree): Modify to suit new lang_add_wild.
@
text
@d1342 1
a1342 1
the linker script if using a default builtin script.
@


1.43
log
@2001-08-02  Charles Wilson  <cwilson@@ece.gatech.edu>
        * ldmain.c (main): initialize link_info.pei386_auto_import
        * pe-dll.c: new tables for auto-export filtering
        (auto_export): change API, pass abfd for contextual filtering.
        Loop thru tables of excluded symbols instead of comparing
        "by hand".
2001-08-02  Paul Sokolovsky  <paul.sokolovsky@@technologist.com>
        * pe-dll.c: new variable pe_dll_enable_extra_debug. New
        static variable current_sec (static struct sec *). Add
        forward declaration for add_bfd_to_link.
        (process_def_file): Don't export undefined symbols. Do not
        export symbols starting with  "_imp__".  Call auto_export()
        with new API.
        (pe_walk_relocs_of_symbol): New function.
        (generate_reloc): add optional extra debugging
        (pe_dll_generate_def_file): eliminate extraneous initial blank
        line in output
        (make_one): enlarge symtab to make room for __nm__ symbols
        (DATA auto-import support).
        (make_singleton_name_thunk): New function.
        (make_import_fixup_mark): New function.
        (make_import_fixup_entry): New function.
        (pe_create_import_fixup): New function.
        (add_bfd_to_link): Specify that 'name' argument is a CONST
        char *.
        * pe-dll.h: declare new variable pe_dll_extra_pe_debug;
        declare new functions pe_walk_relocs_of_symbol and
        pe_create_import_fixup.
        * emultempl/pe.em: add new options --enable-auto-import,
        --disable-auto-import, and --enable-extra-pe-debug.
        (make_import_fixup): New function.
        (pe_find_data_imports): New function.
        (pr_sym): New function.
        (gld_${EMULATION_NAME}_after_open): Add optional extra pe
        debugging. Call pe_find_data_imports.  Mark .idata as DATA, not
        CODE.
2001-08-02  Charles Wilson  <cwilson@@ece.gatech.edu>
        * ld.texinfo: add additional documentation for
        --export-all-symbols.  Document --out-implib,
        --enable-auto-image-base, --disable-auto-image-base,
        --dll-search-prefix, --enable-auto-import, and
        --disable-auto-import.
        * ldint.texinfo: Add detailed documentation on auto-import
        implementation.
@
text
@d2542 2
a2543 1
first example, they will be intermingled.  In the second example, all
@


1.42
log
@Fix computation in SECTIONS example.
@
text
@d1604 16
a1619 2
@@code{DllEntryPoint@@@@0}, and @@code{impure_ptr} will not be automatically
exported.
d1688 49
@


1.41
log
@	* ld.texinfo (Options, -r): Mention restrictions when using
	different object formats.
@
text
@d2228 1
a2228 1
  _bdata = (. + 3) & ~ 4;
@


1.40
log
@2001-06-19  H.J. Lu  <hjl@@gnu.org>

	* ld.texinfo (-E, --export-dynamic): Mention --version-script.
	(--version-script): Mention the language support.
@
text
@d55 2
a56 1
Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000 Free Software Foundation, Inc.
d704 6
@


1.39
log
@Improve Solaris compatability
@
text
@d447 4
d3543 11
@


1.38
log
@* ld.texinfo: Document --fatal-warnings.
* ld.1: Regenerate.

* ldmisc.c (vfinfo): Set flag to inhibit making executable if
warnings have been turned into errors.
* lexsup.c (OPTION_WARN_FATAL): Define.
(ld_options): Entry for --fatal-warnings.
(parse_args): Handle OPTION_WARN_FATAL.
* ld.h (ld_config_type): Add fatal_warnings field.
@
text
@d969 1
@


1.37
log
@2001-03-26  Andreas Jaeger  <aj@@suse.de>

	* binutils.texi (nm): Fix texi syntax.

2001-03-26  Andreas Jaeger  <aj@@suse.de>

	* ld.texinfo (Overview): Fix syntax in texi code.
@
text
@d985 5
d1341 1
a1341 1
@@kindex --warn-comon
@


1.36
log
@Automate generate on man pages
@
text
@d161 1
a161 1
@@ifsef man
@


1.35
log
@	* emultempl/elf32.em (OPTION_GROUP): New macro.
	Add new option Bgroup to longopts.
	(gld*_parse_args): Handle GROUP_OPTION and recognize -z defs.
	(gld*_list_options): Add -Bgroup and -z defs.
	* ld.1: Document -Bgroup and -z defs.
	* ld.texinfo: Likewise.
@
text
@d12 32
d98 1
d101 7
a107 6
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.1
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, with no Front-Cover Texts, and with no
      Back-Cover Texts.  A copy of the license is included in the
      section entitled "GNU Free Documentation License".
d160 15
d183 8
d205 2
d210 2
d216 2
d230 3
d378 4
a381 1
@@code{TARGET}; see @@ref{Format Commands}.
d391 7
a397 1
@@ref{MRI,,MRI Compatible Script Files}.  Introduce MRI script files with
d1521 2
d1525 2
d1682 2
d1688 2
a1716 1
@@end ifset
d1726 3
@


1.34
log
@Fixtypos in ChangeLogs, fix copyright dates in files
@
text
@d304 1
a304 1
particular format.  
d332 1
a332 1
@@item -d 
d344 1
a344 1
@@item -e @@var{entry} 
d514 1
a514 1
@@item -L@@var{searchdir} 
d571 1
a571 1
@@code{NMAGIC} if possible. 
d577 1
a577 1
@@item -N 
d620 1
a620 1
@@c ; see @@code{-N}. 
d644 1
a644 1
@@item -s 
d651 1
a651 1
@@item -S 
d658 1
a658 1
@@item -t 
d690 1
a690 1
@@item -Ur 
d731 1
a731 1
@@item -X 
d770 1
d809 8
d821 1
a821 1
@@item -Bstatic 
d887 3
a889 3
mangled symbol names into user readable names.  Different compilers have 
different mangling styles.  The optional demangling style argument can be used 
to choose an appropriate demangling style for your compiler.  The linker will 
d957 1
d959 1
d961 1
a961 1
are allowed and left to be resolved by the runtime loader.  This option
d1028 1
a1028 1
An option with machine dependent effects.  
d1863 1
a1863 1
@@item 
d1865 1
a1865 1
@@item 
d1867 1
a1867 1
@@item 
d1869 1
a1869 1
@@item 
d1871 1
a1871 1
@@item 
d2230 1
a2230 1
@@group 
d2521 1
a2521 1
it is often useful to mark sections that should not be eliminated. 
d2558 1
a2558 1
@@end smallexample        
d2745 1
a2745 1
@@group 
d2758 1
a2758 1
@@menu 
d2836 1
a2836 1
  .mdata 0x2000 : 
d3063 1
a3063 1
MEMORY 
d3138 1
a3138 1
MEMORY 
d3342 3
a3344 3
		 old*; 
		 original*; 
		 new*; 
d3626 1
a3626 1
(1) Prefix operators 
d3644 1
a3644 1
&1&&left&&\qquad-          \char'176\      !\qquad\dag&\cr 
d3699 1
a3699 1
    .text 9+this_isnt_constant : 
d3774 1
a3774 1
    @@{ 
d4087 1
a4087 1
@@samp{--entry} switch, in that it sets the program's starting address.  
d4465 1
a4465 1
language, but restricted to one of these output formats: 
d4468 1
a4468 1
@@item 
d4531 1
a4531 1
                
d4536 1
a4536 1
     
a4912 2


@


1.33
log
@Extend "ld --unique" functionality.
@
text
@d3 2
@


1.33.2.1
log
@Merge from mainline.
@
text
@a2 2
@@c Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
@@c 2001 Free Software Foundation, Inc.
d302 1
a302 1
particular format.
d330 1
a330 1
@@item -d
d342 1
a342 1
@@item -e @@var{entry}
d512 1
a512 1
@@item -L@@var{searchdir}
d569 1
a569 1
@@code{NMAGIC} if possible.
d575 1
a575 1
@@item -N
d618 1
a618 1
@@c ; see @@code{-N}.
d642 1
a642 1
@@item -s
d649 1
a649 1
@@item -S
d656 1
a656 1
@@item -t
d688 1
a688 1
@@item -Ur
d729 1
a729 1
@@item -X
a767 1
@@code{defs} disallows undefined symbols.
a805 8
@@kindex -Bgroup
@@item -Bgroup
Set the @@code{DF_1_GROUP} flag in the @@code{DT_FLAGS_1} entry in the dynamic
section.  This causes the runtime linker to handle lookups in this
object and its dependencies to be performed only inside the group.
@@code{--no-undefined} is implied.  This option is only meaningful on ELF
platforms which support shared libraries.

d810 1
a810 1
@@item -Bstatic
d876 3
a878 3
mangled symbol names into user readable names.  Different compilers have
different mangling styles.  The optional demangling style argument can be used
to choose an appropriate demangling style for your compiler.  The linker will
a945 1
@@kindex -z defs
a946 1
@@itemx -z defs
d948 2
a949 2
are allowed and left to be resolved by the runtime loader.  These options
disallow such undefined symbols.
d1015 1
a1015 1
An option with machine dependent effects.
d1850 1
a1850 1
@@item
d1852 1
a1852 1
@@item
d1854 1
a1854 1
@@item
d1856 1
a1856 1
@@item
d1858 1
a1858 1
@@item
d2217 1
a2217 1
@@group
d2508 1
a2508 1
it is often useful to mark sections that should not be eliminated.
d2545 1
a2545 1
@@end smallexample
d2732 1
a2732 1
@@group
d2745 1
a2745 1
@@menu
d2823 1
a2823 1
  .mdata 0x2000 :
d3050 1
a3050 1
MEMORY
d3125 1
a3125 1
MEMORY
d3329 3
a3331 3
		 old*;
		 original*;
		 new*;
d3613 1
a3613 1
(1) Prefix operators
d3631 1
a3631 1
&1&&left&&\qquad-          \char'176\      !\qquad\dag&\cr
d3686 1
a3686 1
    .text 9+this_isnt_constant :
d3761 1
a3761 1
    @@{
d4074 1
a4074 1
@@samp{--entry} switch, in that it sets the program's starting address.
d4452 1
a4452 1
language, but restricted to one of these output formats:
d4455 1
a4455 1
@@item
d4518 1
a4518 1

d4523 1
a4523 1

@


1.33.2.2
log
@Fix typo in example
@
text
@d2126 1
a2126 1
  _bdata = (. + 3) & ~ 3;
@


1.32
log
@2001-01-07  Philip Blundell  <philb@@gnu.org>

	* ld.texinfo (Bug Reporting): Update email address for reports.
@
text
@d698 9
a706 7
@@kindex --unique
@@item --unique
Creates a separate output section for every orphan input section.  This
option prevents the normal merging of orphan input sections with the same
name.  An orphan section is one not specifically mentioned in a linker
script, so this option along with a custom linker script allows any
selection of input sections to be merged while others are kept separate.
@


1.31
log
@Requre that long options starting with 'o' only accept a double dash prefix.
@
text
@d4232 1
a4232 1
@@samp{bug-gnu-utils@@@@gnu.org}.
@


1.30
log
@Add --no-default-excludes option for PE targets
@
text
@d222 14
a235 7
precede the option name; for example, @@samp{-oformat} and
@@samp{--oformat} are equivalent.  Arguments to multiple-letter options
must either be separated from the option name by an equals sign, or be
given as separate arguments immediately following the option that
requires them.  For example, @@samp{--oformat srec} and
@@samp{--oformat=srec} are equivalent.  Unique abbreviations of the names
of multiple-letter options are accepted.
@


1.29
log
@* ld.texinfo: Add notes about --whole-archive and gcc.
@
text
@d222 1
a222 1
precede the option name; for example, @@samp{--oformat} and
@


1.28
log
@Add link option to allow undefiedn symbols in shared libraries
@
text
@d1371 6
@


1.27
log
@Add GNU Free Documentation License
@
text
@d942 13
@


1.26
log
@Add GNU Free Documentation License
@
text
@d23 8
a30 6
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.1
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, with no Front-Cover Texts, and with no
      Back-Cover Texts.  A copy of the license is included in the
      section entitled "GNU Free Documentation License".
a31 1
@@ignore
d64 1
a64 1
Copyright @@copyright{} 1991, 92, 93, 94, 95, 96, 97, 98, 1999 Free Software Foundation, Inc.
d82 4
a4483 1

@


1.25
log
@Added new option --target-help.
@
text
@d23 6
a28 11
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
a49 1
@@author Cygnus Solutions
d54 2
a55 2
\hfill Cygnus Solutions\par
\hfill ian\@@cygnus.com, doc\@@cygnus.com\par
d65 6
a70 8
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.
a71 2
Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
d109 1
d4479 365
@


1.24
log
@.plt stub for lazy linking, --stub-group-size=N ld switch,
import stub fix, extra DIR14F reloc to fix abort in tc_gen_reloc
@
text
@d922 4
@


1.23
log
@--split-by-reloc, --split-by-file extensions.  --unique option.
@
text
@d3907 1
d4050 32
@


1.22
log
@2000-08-24  H.J. Lu  <hjl@@gnu.org>

	* emultempl/elf32.em (gld${EMULATION_NAME}_after_open): Don't
	check -rpath nor LD_RUN_PATH for cross link.
	* ld.texinfo: Document the change.
@
text
@d695 8
d1146 1
a1146 1
@@item --split-by-file
d1148 2
a1149 1
each input file.
d1152 2
a1153 2
@@item --split-by-reloc @@var{count}
Trys to creates extra sections in the output file so that no single
d1155 1
a1155 1
This is useful when generating huge relocatable for downloading into
d1162 1
a1162 1
many relocations.
@


1.21
log
@2000-08-22  H.J. Lu  <hjl@@gnu.org>

	* emultempl/elf32.em (gld${EMULATION_NAME}_after_open): Search
	the DT_RPATH/DT_RUNPATH entries for DT_NEEDED after
	LD_LIBRARY_PATH for native linker. Display the needed DSO if
	trace_file_tries is non-zero.
	(gld${EMULATION_NAME}_try_needed): Report the needed DSO found
	if trace_file_tries is non-zero.

	* ld.texinfo: Document the usage of DT_RPATH/DT_RUNPATH.
	* News: Mention it.
@
text
@d1092 1
a1092 1
at link time.
d1096 1
a1096 1
@@code{LD_RUN_PATH}.
@


1.20
log
@2000-07-20  H.J. Lu  <hjl@@gnu.org>

	* ld.texinfo: Add documentation for --disable-new-dtags and
	--enable-new-dtags.

	* ldmain.c (main): Initialize link_info.new_dtags to false.

	* emultempl/elf32.em (gld_${EMULATION_NAME}_parse_args): Add
	--disable-new-dtags and --enable-new-dtags.
	(gld_${EMULATION_NAME}_list_options): Likewise.
@
text
@d1104 5
@


1.19
log
@Add optional style argument to --demangle switch.
@
text
@d1378 11
@


1.18
log
@2000-07-19  H.J. Lu  <hjl@@gnu.org>

	* emulparams/elf32mcore.sh (PARSE_AND_LIST_ARGS): Removed.
	(PARSE_AND_LIST_PROLOGUE): New.
	(PARSE_AND_LIST_LONGOPTS): Likewise.
	(PARSE_AND_LIST_OPTIONS): Likewise.
	(PARSE_AND_LIST_ARGS_CASES): Likewise.

	* ldmain.c (main): Clear link_info.flags and link_info.flags_1.

	* lexsup.c (ld_options): Comment out 'z'.
	(parse_args): Likewise.

	* emultempl/elf32.em: Include "elf/common.h".
	(gld_${EMULATION_NAME}_parse_args): Defined. Handle some -z
	options.
	(gld_${EMULATION_NAME}_list_options): Likewise.

	* ld.texinfo: Add documentation for the recognized -z options.
@
text
@d855 1
a855 1
@@kindex --demangle
d857 1
a857 1
@@item --demangle
d863 5
a867 3
mangled symbol names into user readable names.  The linker will demangle
by default unless the environment variable @@samp{COLLECT_NO_DEMANGLE} is
set.  These options may be used to override the default.
d1076 5
@


1.17
log
@tic54x/ibmc54xdsp target for ld.
@
text
@d740 15
a754 1
This option is ignored for Solaris compatibility.
@


1.16
log
@Patch from Thomas de Lellis to implement --section-start
@
text
@d108 3
d3861 3
d4003 12
@


1.15
log
@Apply patch from  Richard Gorton <gorton@@scrugs.lkg.dec.com> to implement
--emit-relocs switch to the linker to preserve relocs in an output executable
@
text
@d1146 12
@


1.14
log
@Note that output section data commands can only appear inside output section
descriptions and not between them.
@
text
@d591 10
@


1.13
log
@Remove extraneous paragraph.
@
text
@d2489 10
@


1.12
log
@* ldgram.y (exclude_name_list): Don't require a comma to separate
list entries; the lexer considers commas to be valid part of a
filename, so in something like `foo, bar' the comma is considered
part of the first filename, `foo,'.
* ld.texinfo: Update section on EXCLUDE_FILE lists.
@
text
@a1682 6
The first line in the above example sets the special symbol @@samp{.},
which is the location counter.  If you do not specify the address of an
output section in some other way (other ways are described later), the
address is set from the current value of the location counter.  The
location counter is then incremented by the size of the output section.

@


1.12.2.1
log
@Remove extraneous paragraph.
@
text
@d1683 6
@


1.11
log
@Add LMA memory region functionality.
@
text
@d2258 1
a2258 1
(*(EXCLUDE_FILE (*crtend.o, *otherfile.o) .ctors))
d2260 2
a2261 2
will cause all .ctors sections from all files except crtend.o and otherfile.o
to be included.
@


1.10
log
@Fix description of -n command line switch
@
text
@d2130 1
a2130 1
  @@} [>@@var{region}] [:@@var{phdr} :@@var{phdr} @@dots{}] [=@@var{fillexp}]
d2635 1
a2635 1
  @@} [>@@var{region}] [:@@var{phdr} :@@var{phdr} @@dots{}] [=@@var{fillexp}]
d2689 1
d2700 3
a2702 1
follows the @@code{AT} keyword specifies the load address of the section.
@


1.9
log
@Remind users about -Wl,
@
text
@d233 2
a234 1
prefixed by @@samp{-Wl,}  like this:
d562 2
a563 2
Set the text segment to be read only, and mark the output as
@@code{NMAGIC} if possible.
@


1.8
log
@        * ld.h (wildcard_spec):  Change exclude_name to exclude_name_list.
        (name_list): New.
        * ld.texinfo (EXCLUDE_FILE): Update documentation.
        * ldgram.y (wildcard_spec): Support a list of excluded_files.
        (exclude_name_list): New.
        ldlang.c (walk_wild_section): Support list of excluded files.
        (print_wild_statement): Likewise.
        (lang_add_wild): Likewise.
        * ldlang.h (lang_wild_statement_type): Likewise.
        * scripttempl/elf.sc (OTHER_EXCLUDE_FILES): Support.
@
text
@d231 14
@


1.7
log
@	* ld.texinfo: Fix arguments of @@var to not contain punctuation.
@
text
@d21 1
a21 1
Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 1999 Free Software Foundation, Inc.
d2238 4
a2241 3
Here the @@samp{*} is a wildcard which matches any file name.  To exclude a file
from matching the file name wildcard, EXCLUDE_FILE may be used to match all files
except the one specified by EXCLUDE_FILE.  For example:
d2243 1
a2243 1
(*(EXCLUDE_FILE (*crtend.o) .ctors))
d2245 2
a2246 1
will cause all .ctors sections from all files except crtend.o to be included.
@


1.6
log
@	* ldmain.c (main): Initialize link_info.init_function and
	link_info.fini_function.
	* lexsup.c (OPTION_INIT): New macro.
	(OPTION_FINI): Likewise.
	(ld_options): Add descriptions for them.
	(parse_args): Handle them.
@
text
@d1385 1
a1385 1
@@item --exclude-symbols @@var{symbol,symbol,...}
@


1.5
log
@document behaviour of dot inside sections.
@
text
@d407 8
d444 8
@


1.4
log
@Add new command line switch --thumb-entry.
@
text
@d3413 33
@


1.3
log
@Fix use of @@item vs. @@itemx.
@
text
@d3882 1
a3882 1
@@cindex --support-old-code
d3893 9
@


1.2
log
@	* ld.texinfo (Options): Clarify that options which refer to files
	must be properly ordered.
@
text
@d760 1
a760 1
@@item --no-check-sections
d1121 1
a1121 1
@@item --verbose
@


1.1
log
@Initial revision
@
text
@d182 6
a187 3
The command-line options to @@code{ld} may be specified in any order, and
may be repeated at will.  Repeating most options with a different
argument will either have no further effect, or override prior
d193 4
a196 4
Non-option arguments are objects files which are to be linked together.
They may follow, precede, or be mixed in with command-line options,
except that an object file argument may not be placed between an option
and its argument.
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

