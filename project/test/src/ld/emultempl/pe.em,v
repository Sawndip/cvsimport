head	1.178;
access;
symbols
	binutils-2_24-branch:1.178.0.2
	binutils-2_24-branchpoint:1.178
	binutils-2_21_1:1.162.2.3
	binutils-2_23_2:1.173.2.1
	binutils-2_23_1:1.173.2.1
	binutils-2_23:1.173.2.1
	binutils-2_23-branch:1.173.0.2
	binutils-2_23-branchpoint:1.173
	binutils-2_22_branch:1.171.0.4
	binutils-2_22:1.171
	binutils-2_22-branch:1.171.0.2
	binutils-2_22-branchpoint:1.171
	binutils-2_21:1.162
	binutils-2_21-branch:1.162.0.2
	binutils-2_21-branchpoint:1.162
	binutils-2_20_1:1.150.4.1
	binutils-2_20:1.150.4.1
	binutils-arc-20081103-branch:1.137.0.4
	binutils-arc-20081103-branchpoint:1.137
	binutils-2_20-branch:1.150.0.4
	binutils-2_20-branchpoint:1.150
	dje-cgen-play1-branch:1.150.0.2
	dje-cgen-play1-branchpoint:1.150
	arc-20081103-branch:1.137.0.2
	arc-20081103-branchpoint:1.137
	binutils-2_19_1:1.133.2.1
	binutils-2_19:1.133.2.1
	binutils-2_19-branch:1.133.0.2
	binutils-2_19-branchpoint:1.133
	binutils-2_18:1.126
	binutils-2_18-branch:1.126.0.2
	binutils-2_18-branchpoint:1.126
	binutils-csl-coldfire-4_1-32:1.113
	binutils-csl-sourcerygxx-4_1-32:1.113
	binutils-csl-innovasic-fido-3_4_4-33:1.113
	binutils-csl-sourcerygxx-3_4_4-32:1.103
	binutils-csl-coldfire-4_1-30:1.113
	binutils-csl-sourcerygxx-4_1-30:1.113
	binutils-csl-coldfire-4_1-28:1.113
	binutils-csl-sourcerygxx-4_1-29:1.113
	binutils-csl-sourcerygxx-4_1-28:1.113
	binutils-csl-arm-2006q3-27:1.113
	binutils-csl-sourcerygxx-4_1-27:1.113
	binutils-csl-arm-2006q3-26:1.113
	binutils-csl-sourcerygxx-4_1-26:1.113
	binutils-csl-sourcerygxx-4_1-25:1.113
	binutils-csl-sourcerygxx-4_1-24:1.113
	binutils-csl-sourcerygxx-4_1-23:1.113
	binutils-csl-sourcerygxx-4_1-21:1.113
	binutils-csl-arm-2006q3-21:1.113
	binutils-csl-sourcerygxx-4_1-22:1.113
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.113
	binutils-csl-sourcerygxx-4_1-20:1.113
	binutils-csl-arm-2006q3-19:1.113
	binutils-csl-sourcerygxx-4_1-19:1.113
	binutils-csl-sourcerygxx-4_1-18:1.113
	binutils-csl-renesas-4_1-9:1.113
	binutils-csl-sourcerygxx-3_4_4-25:1.103
	binutils-csl-renesas-4_1-8:1.113
	binutils-csl-renesas-4_1-7:1.113
	binutils-csl-renesas-4_1-6:1.113
	binutils-csl-sourcerygxx-4_1-17:1.113
	binutils-csl-sourcerygxx-4_1-14:1.113
	binutils-csl-sourcerygxx-4_1-15:1.113
	binutils-csl-sourcerygxx-4_1-13:1.113
	binutils-2_17:1.113
	binutils-csl-sourcerygxx-4_1-12:1.113
	binutils-csl-sourcerygxx-3_4_4-21:1.113
	binutils-csl-wrs-linux-3_4_4-24:1.103
	binutils-csl-wrs-linux-3_4_4-23:1.103
	binutils-csl-sourcerygxx-4_1-9:1.113
	binutils-csl-sourcerygxx-4_1-8:1.113
	binutils-csl-sourcerygxx-4_1-7:1.113
	binutils-csl-arm-2006q1-6:1.113
	binutils-csl-sourcerygxx-4_1-6:1.113
	binutils-csl-wrs-linux-3_4_4-22:1.103
	binutils-csl-coldfire-4_1-11:1.113
	binutils-csl-sourcerygxx-3_4_4-19:1.113
	binutils-csl-coldfire-4_1-10:1.113
	binutils-csl-sourcerygxx-4_1-5:1.113
	binutils-csl-sourcerygxx-4_1-4:1.113
	binutils-csl-wrs-linux-3_4_4-21:1.103
	binutils-csl-morpho-4_1-4:1.113
	binutils-csl-sourcerygxx-3_4_4-17:1.113
	binutils-csl-wrs-linux-3_4_4-20:1.103
	binutils-2_17-branch:1.113.0.4
	binutils-2_17-branchpoint:1.113
	binutils-csl-2_17-branch:1.113.0.2
	binutils-csl-2_17-branchpoint:1.113
	binutils-csl-gxxpro-3_4-branch:1.103.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.103
	binutils-2_16_1:1.103
	binutils-csl-arm-2005q1b:1.103
	binutils-2_16:1.103
	binutils-csl-arm-2005q1a:1.103
	binutils-csl-arm-2005q1-branch:1.103.0.4
	binutils-csl-arm-2005q1-branchpoint:1.103
	binutils-2_16-branch:1.103.0.2
	binutils-2_16-branchpoint:1.103
	csl-arm-2004-q3d:1.99
	csl-arm-2004-q3:1.96
	binutils-2_15:1.89
	binutils-2_15-branchpoint:1.89
	csl-arm-2004-q1a:1.89
	csl-arm-2004-q1:1.89
	binutils-2_15-branch:1.89.0.4
	cagney_bfdfile-20040213-branch:1.89.0.2
	cagney_bfdfile-20040213-branchpoint:1.89
	cagney_bigcore-20040122-branch:1.87.0.2
	cagney_bigcore-20040122-branchpoint:1.87
	csl-arm-2003-q4:1.85
	binutils-2_14:1.77
	binutils-2_14-branch:1.77.0.2
	binutils-2_14-branchpoint:1.77
	binutils-2_13_2_1:1.65.2.3
	binutils-2_13_2:1.65.2.3
	binutils-2_13_1:1.65.2.2
	binutils-2_13:1.65.2.1
	binutils-2_13-branchpoint:1.65
	binutils-2_13-branch:1.65.0.2
	binutils-2_12_1:1.58
	binutils-2_12:1.58
	binutils-2_12-branch:1.58.0.2
	binutils-2_12-branchpoint:1.58
	cygnus_cvs_20020108_pre:1.58
	binutils-2_11_2:1.39.2.2
	binutils-2_11_1:1.39.2.2
	binutils-2_11:1.39
	x86_64versiong3:1.39
	binutils-2_11-branch:1.39.0.2
	binutils-2_10_1:1.20
	binutils-2_10:1.20
	binutils-2_10-branch:1.20.0.2
	binutils-2_10-branchpoint:1.20
	binutils_latest_snapshot:1.178
	repo-unification-2000-02-06:1.17
	binu_ss_19990721:1.8
	binu_ss_19990602:1.3
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.178
date	2013.08.22.15.28.42;	author nickc;	state Exp;
branches;
next	1.177;

1.177
date	2013.06.22.16.44.16;	author rsandifo;	state Exp;
branches;
next	1.176;

1.176
date	2013.04.29.08.22.16;	author nickc;	state Exp;
branches;
next	1.175;

1.175
date	2013.01.10.20.08.03;	author hjl;	state Exp;
branches;
next	1.174;

1.174
date	2012.08.06.22.27.52;	author macro;	state Exp;
branches;
next	1.173;

1.173
date	2012.05.14.19.45.28;	author jwlemke;	state Exp;
branches
	1.173.2.1;
next	1.172;

1.172
date	2012.03.05.22.43.40;	author amodra;	state Exp;
branches;
next	1.171;

1.171
date	2011.06.13.00.59.43;	author amodra;	state Exp;
branches;
next	1.170;

1.170
date	2011.04.28.15.29.42;	author amodra;	state Exp;
branches;
next	1.169;

1.169
date	2011.03.10.10.20.26;	author davek;	state Exp;
branches;
next	1.168;

1.168
date	2011.02.28.18.34.52;	author ktietz;	state Exp;
branches;
next	1.167;

1.167
date	2011.01.14.12.37.17;	author amodra;	state Exp;
branches;
next	1.166;

1.166
date	2011.01.13.13.06.22;	author amodra;	state Exp;
branches;
next	1.165;

1.165
date	2010.12.20.13.00.14;	author amodra;	state Exp;
branches;
next	1.164;

1.164
date	2010.12.06.00.07.06;	author hjl;	state Exp;
branches;
next	1.163;

1.163
date	2010.11.15.22.01.17;	author amodra;	state Exp;
branches;
next	1.162;

1.162
date	2010.09.22.08.03.41;	author ktietz;	state Exp;
branches
	1.162.2.1;
next	1.161;

1.161
date	2010.06.20.09.51.16;	author dannysmith;	state Exp;
branches;
next	1.160;

1.160
date	2010.05.25.10.00.25;	author ktietz;	state Exp;
branches;
next	1.159;

1.159
date	2010.05.15.19.50.44;	author ktietz;	state Exp;
branches;
next	1.158;

1.158
date	2010.05.11.17.46.22;	author ktietz;	state Exp;
branches;
next	1.157;

1.157
date	2010.04.05.09.04.09;	author ktietz;	state Exp;
branches;
next	1.156;

1.156
date	2010.01.14.04.56.11;	author dj;	state Exp;
branches;
next	1.155;

1.155
date	2009.11.15.07.52.44;	author ktietz;	state Exp;
branches;
next	1.154;

1.154
date	2009.11.06.15.50.56;	author ktietz;	state Exp;
branches;
next	1.153;

1.153
date	2009.11.04.18.13.05;	author ktietz;	state Exp;
branches;
next	1.152;

1.152
date	2009.10.16.15.15.39;	author nickc;	state Exp;
branches;
next	1.151;

1.151
date	2009.09.13.07.19.18;	author amodra;	state Exp;
branches;
next	1.150;

1.150
date	2009.05.15.14.22.35;	author amodra;	state Exp;
branches
	1.150.4.1;
next	1.149;

1.149
date	2009.05.14.02.21.45;	author amodra;	state Exp;
branches;
next	1.148;

1.148
date	2009.04.02.14.42.41;	author davek;	state Exp;
branches;
next	1.147;

1.147
date	2009.03.14.03.30.26;	author davek;	state Exp;
branches;
next	1.146;

1.146
date	2009.03.03.18.22.11;	author davek;	state Exp;
branches;
next	1.145;

1.145
date	2009.02.27.19.01.56;	author davek;	state Exp;
branches;
next	1.144;

1.144
date	2009.02.18.18.23.07;	author davek;	state Exp;
branches;
next	1.143;

1.143
date	2009.02.16.10.42.12;	author davek;	state Exp;
branches;
next	1.142;

1.142
date	2009.02.16.07.25.52;	author amodra;	state Exp;
branches;
next	1.141;

1.141
date	2009.01.08.13.28.48;	author ktietz;	state Exp;
branches;
next	1.140;

1.140
date	2009.01.05.12.17.43;	author ktietz;	state Exp;
branches;
next	1.139;

1.139
date	2009.01.03.18.04.16;	author davek;	state Exp;
branches;
next	1.138;

1.138
date	2008.11.14.15.13.05;	author ktietz;	state Exp;
branches;
next	1.137;

1.137
date	2008.10.20.12.14.29;	author amodra;	state Exp;
branches;
next	1.136;

1.136
date	2008.10.04.06.08.59;	author amodra;	state Exp;
branches;
next	1.135;

1.135
date	2008.10.03.09.40.49;	author amodra;	state Exp;
branches;
next	1.134;

1.134
date	2008.09.09.09.45.31;	author nickc;	state Exp;
branches;
next	1.133;

1.133
date	2008.08.17.03.12.50;	author amodra;	state Exp;
branches
	1.133.2.1;
next	1.132;

1.132
date	2008.07.30.04.34.57;	author amodra;	state Exp;
branches;
next	1.131;

1.131
date	2008.02.15.03.35.53;	author amodra;	state Exp;
branches;
next	1.130;

1.130
date	2007.11.06.12.28.57;	author ktietz;	state Exp;
branches;
next	1.129;

1.129
date	2007.10.04.13.55.25;	author nickc;	state Exp;
branches;
next	1.128;

1.128
date	2007.10.01.09.54.58;	author nickc;	state Exp;
branches;
next	1.127;

1.127
date	2007.08.17.13.23.08;	author amodra;	state Exp;
branches;
next	1.126;

1.126
date	2007.07.19.19.56.10;	author roland;	state Exp;
branches;
next	1.125;

1.125
date	2007.07.06.14.09.42;	author nickc;	state Exp;
branches;
next	1.124;

1.124
date	2007.04.26.14.46.59;	author amodra;	state Exp;
branches;
next	1.123;

1.123
date	2007.01.19.15.40.55;	author nickc;	state Exp;
branches;
next	1.122;

1.122
date	2006.12.18.22.38.53;	author cgf;	state Exp;
branches;
next	1.121;

1.121
date	2006.10.03.10.06.26;	author nickc;	state Exp;
branches;
next	1.120;

1.120
date	2006.09.16.18.12.16;	author nickc;	state Exp;
branches;
next	1.119;

1.119
date	2006.08.21.08.12.46;	author nickc;	state Exp;
branches;
next	1.118;

1.118
date	2006.06.27.11.45.21;	author nickc;	state Exp;
branches;
next	1.117;

1.117
date	2006.06.22.16.25.36;	author nickc;	state Exp;
branches;
next	1.116;

1.116
date	2006.06.22.13.48.30;	author nickc;	state Exp;
branches;
next	1.115;

1.115
date	2006.06.22.13.43.04;	author nickc;	state Exp;
branches;
next	1.114;

1.114
date	2006.05.11.08.48.58;	author nickc;	state Exp;
branches;
next	1.113;

1.113
date	2005.11.24.06.02.08;	author amodra;	state Exp;
branches;
next	1.112;

1.112
date	2005.11.17.00.10.05;	author amodra;	state Exp;
branches;
next	1.111;

1.111
date	2005.10.05.08.07.51;	author dannysmith;	state Exp;
branches;
next	1.110;

1.110
date	2005.08.04.06.22.13;	author amodra;	state Exp;
branches;
next	1.109;

1.109
date	2005.08.04.01.19.10;	author amodra;	state Exp;
branches;
next	1.108;

1.108
date	2005.07.15.12.19.14;	author amodra;	state Exp;
branches;
next	1.107;

1.107
date	2005.07.10.01.33.13;	author cgf;	state Exp;
branches;
next	1.106;

1.106
date	2005.06.01.04.04.18;	author zack;	state Exp;
branches;
next	1.105;

1.105
date	2005.05.12.07.32.03;	author nickc;	state Exp;
branches;
next	1.104;

1.104
date	2005.05.04.11.00.28;	author amodra;	state Exp;
branches;
next	1.103;

1.103
date	2005.03.03.11.52.04;	author amodra;	state Exp;
branches;
next	1.102;

1.102
date	2005.01.21.04.15.59;	author bje;	state Exp;
branches;
next	1.101;

1.101
date	2004.12.29.05.59.29;	author dannysmith;	state Exp;
branches;
next	1.100;

1.100
date	2004.11.26.09.42.04;	author nickc;	state Exp;
branches;
next	1.99;

1.99
date	2004.10.19.20.07.32;	author dannysmith;	state Exp;
branches;
next	1.98;

1.98
date	2004.10.14.12.54.45;	author amodra;	state Exp;
branches;
next	1.97;

1.97
date	2004.10.12.23.44.57;	author amodra;	state Exp;
branches;
next	1.96;

1.96
date	2004.09.30.17.19.19;	author nickc;	state Exp;
branches;
next	1.95;

1.95
date	2004.09.28.15.00.45;	author cgf;	state Exp;
branches;
next	1.94;

1.94
date	2004.09.17.07.14.33;	author amodra;	state Exp;
branches;
next	1.93;

1.93
date	2004.08.27.07.39.19;	author nickc;	state Exp;
branches;
next	1.92;

1.92
date	2004.07.13.18.56.38;	author nickc;	state Exp;
branches;
next	1.91;

1.91
date	2004.05.19.14.01.14;	author jakub;	state Exp;
branches;
next	1.90;

1.90
date	2004.05.07.15.17.58;	author ford;	state Exp;
branches;
next	1.89;

1.89
date	2004.02.05.11.41.51;	author nickc;	state Exp;
branches;
next	1.88;

1.88
date	2004.02.04.09.13.28;	author nickc;	state Exp;
branches;
next	1.87;

1.87
date	2004.01.03.12.39.07;	author amodra;	state Exp;
branches;
next	1.86;

1.86
date	2004.01.03.11.09.07;	author amodra;	state Exp;
branches;
next	1.85;

1.85
date	2003.12.18.14.56.44;	author nickc;	state Exp;
branches;
next	1.84;

1.84
date	2003.12.02.23.00.00;	author amodra;	state Exp;
branches;
next	1.83;

1.83
date	2003.11.04.23.36.21;	author amodra;	state Exp;
branches;
next	1.82;

1.82
date	2003.10.31.05.32.44;	author cagney;	state Exp;
branches;
next	1.81;

1.81
date	2003.08.07.01.52.36;	author dannysmith;	state Exp;
branches;
next	1.80;

1.80
date	2003.06.27.00.38.25;	author amodra;	state Exp;
branches;
next	1.79;

1.79
date	2003.06.25.06.40.27;	author amodra;	state Exp;
branches;
next	1.78;

1.78
date	2003.05.29.15.05.41;	author nickc;	state Exp;
branches;
next	1.77;

1.77
date	2003.04.02.17.39.24;	author nickc;	state Exp;
branches;
next	1.76;

1.76
date	2003.02.28.01.32.30;	author amodra;	state Exp;
branches;
next	1.75;

1.75
date	2003.01.23.09.30.44;	author nickc;	state Exp;
branches;
next	1.74;

1.74
date	2002.12.17.12.16.38;	author nickc;	state Exp;
branches;
next	1.73;

1.73
date	2002.12.17.11.01.25;	author nickc;	state Exp;
branches;
next	1.72;

1.72
date	2002.12.17.10.03.52;	author nickc;	state Exp;
branches;
next	1.71;

1.71
date	2002.12.16.18.02.16;	author nickc;	state Exp;
branches;
next	1.70;

1.70
date	2002.11.30.08.39.46;	author amodra;	state Exp;
branches;
next	1.69;

1.69
date	2002.11.14.18.03.16;	author nickc;	state Exp;
branches;
next	1.68;

1.68
date	2002.11.06.19.36.20;	author nickc;	state Exp;
branches;
next	1.67;

1.67
date	2002.10.30.03.57.39;	author drow;	state Exp;
branches;
next	1.66;

1.66
date	2002.07.20.13.41.11;	author amodra;	state Exp;
branches;
next	1.65;

1.65
date	2002.07.01.08.07.31;	author amodra;	state Exp;
branches
	1.65.2.1;
next	1.64;

1.64
date	2002.06.07.14.56.00;	author nickc;	state Exp;
branches;
next	1.63;

1.63
date	2002.05.27.08.22.08;	author rsandifo;	state Exp;
branches;
next	1.62;

1.62
date	2002.05.22.18.03.09;	author cgf;	state Exp;
branches;
next	1.61;

1.61
date	2002.05.22.09.02.05;	author amodra;	state Exp;
branches;
next	1.60;

1.60
date	2002.05.22.08.21.27;	author amodra;	state Exp;
branches;
next	1.59;

1.59
date	2002.02.15.02.11.05;	author amodra;	state Exp;
branches;
next	1.58;

1.58
date	2002.01.05.13.14.00;	author amodra;	state Exp;
branches;
next	1.57;

1.57
date	2001.12.17.00.40.53;	author amodra;	state Exp;
branches;
next	1.56;

1.56
date	2001.12.11.18.31.57;	author cgf;	state Exp;
branches;
next	1.55;

1.55
date	2001.12.06.10.22.36;	author nickc;	state Exp;
branches;
next	1.54;

1.54
date	2001.09.24.18.21.24;	author nickc;	state Exp;
branches;
next	1.53;

1.53
date	2001.09.24.15.03.01;	author nickc;	state Exp;
branches;
next	1.52;

1.52
date	2001.09.18.10.10.21;	author amodra;	state Exp;
branches;
next	1.51;

1.51
date	2001.09.12.15.54.37;	author cwilson;	state Exp;
branches;
next	1.50;

1.50
date	2001.08.31.13.30.12;	author aj;	state Exp;
branches;
next	1.49;

1.49
date	2001.08.20.02.14.50;	author amodra;	state Exp;
branches;
next	1.48;

1.48
date	2001.08.20.00.22.41;	author amodra;	state Exp;
branches;
next	1.47;

1.47
date	2001.08.14.02.01.31;	author amodra;	state Exp;
branches;
next	1.46;

1.46
date	2001.08.02.23.03.10;	author cwilson;	state Exp;
branches;
next	1.45;

1.45
date	2001.07.11.08.11.16;	author nickc;	state Exp;
branches;
next	1.44;

1.44
date	2001.06.05.00.48.41;	author dj;	state Exp;
branches;
next	1.43;

1.43
date	2001.05.25.22.48.14;	author hjl;	state Exp;
branches;
next	1.42;

1.42
date	2001.05.25.05.39.22;	author hjl;	state Exp;
branches;
next	1.41;

1.41
date	2001.05.02.21.01.03;	author hjl;	state Exp;
branches;
next	1.40;

1.40
date	2001.03.13.06.14.27;	author nickc;	state Exp;
branches;
next	1.39;

1.39
date	2000.12.26.20.55.30;	author nickc;	state Exp;
branches
	1.39.2.1;
next	1.38;

1.38
date	2000.11.13.10.15.23;	author pb;	state Exp;
branches;
next	1.37;

1.37
date	2000.10.16.19.08.45;	author nickc;	state Exp;
branches;
next	1.36;

1.36
date	2000.10.13.20.41.08;	author nickc;	state Exp;
branches;
next	1.35;

1.35
date	2000.10.13.20.16.03;	author nickc;	state Exp;
branches;
next	1.34;

1.34
date	2000.10.12.19.18.20;	author dj;	state Exp;
branches;
next	1.33;

1.33
date	2000.10.02.14.39.46;	author dj;	state Exp;
branches;
next	1.32;

1.32
date	2000.09.28.20.58.57;	author dj;	state Exp;
branches;
next	1.31;

1.31
date	2000.09.28.20.53.40;	author dj;	state Exp;
branches;
next	1.30;

1.30
date	2000.07.17.18.59.58;	author dj;	state Exp;
branches;
next	1.29;

1.29
date	2000.07.11.03.42.41;	author amodra;	state Exp;
branches;
next	1.28;

1.28
date	2000.07.10.17.20.35;	author hjl;	state Exp;
branches;
next	1.27;

1.27
date	2000.07.07.20.09.28;	author dj;	state Exp;
branches;
next	1.26;

1.26
date	2000.07.07.20.01.35;	author dj;	state Exp;
branches;
next	1.25;

1.25
date	2000.05.16.20.53.26;	author nickc;	state Exp;
branches;
next	1.24;

1.24
date	2000.04.25.05.14.16;	author amodra;	state Exp;
branches;
next	1.23;

1.23
date	2000.04.18.05.53.41;	author amodra;	state Exp;
branches;
next	1.22;

1.22
date	2000.04.14.01.58.29;	author amodra;	state Exp;
branches;
next	1.21;

1.21
date	2000.04.12.02.43.37;	author amodra;	state Exp;
branches;
next	1.20;

1.20
date	2000.03.01.20.54.37;	author nickc;	state Exp;
branches;
next	1.19;

1.19
date	2000.02.24.17.53.11;	author nickc;	state Exp;
branches;
next	1.18;

1.18
date	2000.02.16.18.53.32;	author twall;	state Exp;
branches;
next	1.17;

1.17
date	2000.01.04.23.48.31;	author nickc;	state Exp;
branches;
next	1.16;

1.16
date	2000.01.04.23.44.03;	author nickc;	state Exp;
branches;
next	1.15;

1.15
date	99.09.29.17.44.35;	author dj;	state Exp;
branches;
next	1.14;

1.14
date	99.09.14.22.19.55;	author dj;	state Exp;
branches;
next	1.13;

1.13
date	99.09.13.23.45.47;	author ian;	state Exp;
branches;
next	1.12;

1.12
date	99.09.12.16.59.56;	author ian;	state Exp;
branches;
next	1.11;

1.11
date	99.09.12.15.27.48;	author ian;	state Exp;
branches;
next	1.10;

1.10
date	99.09.12.14.52.33;	author ian;	state Exp;
branches;
next	1.9;

1.9
date	99.08.06.22.46.03;	author ian;	state Exp;
branches;
next	1.8;

1.8
date	99.07.05.07.51.37;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	99.06.21.03.30.31;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	99.06.12.14.00.03;	author ian;	state Exp;
branches;
next	1.5;

1.5
date	99.06.04.07.40.35;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	99.06.02.14.26.01;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	99.05.11.21.06.49;	author dj;	state Exp;
branches;
next	1.2;

1.2
date	99.05.10.18.30.21;	author clm;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.29.07;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.173.2.1
date	2012.09.04.14.38.00;	author gingold;	state Exp;
branches;
next	;

1.162.2.1
date	2011.02.01.12.25.47;	author amodra;	state Exp;
branches;
next	1.162.2.2;

1.162.2.2
date	2011.04.28.15.33.57;	author amodra;	state Exp;
branches;
next	1.162.2.3;

1.162.2.3
date	2011.05.29.04.51.49;	author amodra;	state Exp;
branches;
next	;

1.150.4.1
date	2009.09.13.07.20.06;	author amodra;	state Exp;
branches;
next	;

1.133.2.1
date	2008.09.09.09.49.56;	author nickc;	state Exp;
branches;
next	1.133.2.2;

1.133.2.2
date	2009.03.02.13.32.55;	author amodra;	state Exp;
branches;
next	1.133.2.3;

1.133.2.3
date	2009.03.02.13.34.03;	author amodra;	state Exp;
branches;
next	1.133.2.4;

1.133.2.4
date	2009.03.02.13.56.19;	author amodra;	state Exp;
branches;
next	;

1.65.2.1
date	2002.07.20.13.45.41;	author amodra;	state Exp;
branches;
next	1.65.2.2;

1.65.2.2
date	2002.10.30.03.54.53;	author drow;	state Exp;
branches;
next	1.65.2.3;

1.65.2.3
date	2002.12.20.20.12.10;	author drow;	state Exp;
branches;
next	;

1.39.2.1
date	2001.06.07.03.17.16;	author amodra;	state Exp;
branches;
next	1.39.2.2;

1.39.2.2
date	2001.06.11.10.05.09;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.07;	author rth;	state Exp;
branches;
next	;


desc
@@


1.178
log
@	* emultempl/pe.em: Add --disable-large-address-aware option.
	* ld.texinfo (--disable-large-address-aware): Add documentation.
@
text
@# This shell script emits a C file. -*- C -*-
# It does some substitutions.
if [ -z "$MACHINE" ]; then
  OUTPUT_ARCH=${ARCH}
else
  OUTPUT_ARCH=${ARCH}:${MACHINE}
fi
rm -f e${EMULATION_NAME}.c
(echo;echo;echo;echo;echo)>e${EMULATION_NAME}.c # there, now line numbers match ;-)
fragment <<EOF
/* Copyright 1995-2013 Free Software Foundation, Inc.

   This file is part of the GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */


/* For WINDOWS_NT */
/* The original file generated returned different default scripts depending
   on whether certain switches were set, but these switches pertain to the
   Linux system and that particular version of coff.  In the NT case, we
   only determine if the subsystem is console or windows in order to select
   the correct entry point by default. */

#define TARGET_IS_${EMULATION_NAME}

/* Do this before including bfd.h, so we prototype the right functions.  */

#if defined(TARGET_IS_armpe) \
    || defined(TARGET_IS_arm_epoc_pe) \
    || defined(TARGET_IS_arm_wince_pe)
#define bfd_arm_allocate_interworking_sections \
	bfd_${EMULATION_NAME}_allocate_interworking_sections
#define bfd_arm_get_bfd_for_interworking \
	bfd_${EMULATION_NAME}_get_bfd_for_interworking
#define bfd_arm_process_before_allocation \
	bfd_${EMULATION_NAME}_process_before_allocation
#endif

#include "sysdep.h"
#include "bfd.h"
#include "bfdlink.h"
#include "getopt.h"
#include "libiberty.h"
#include "filenames.h"
#include "ld.h"
#include "ldmain.h"
#include "ldexp.h"
#include "ldlang.h"
#include "ldfile.h"
#include "ldemul.h"
#include <ldgram.h>
#include "ldlex.h"
#include "ldmisc.h"
#include "ldctor.h"
#include "coff/internal.h"

/* FIXME: See bfd/peXXigen.c for why we include an architecture specific
   header in generic PE code.  */
#include "coff/i386.h"
#include "coff/pe.h"

/* FIXME: This is a BFD internal header file, and we should not be
   using it here.  */
#include "../bfd/libcoff.h"

#include "deffile.h"
#include "pe-dll.h"
#include "safe-ctype.h"

/* Permit the emulation parameters to override the default section
   alignment by setting OVERRIDE_SECTION_ALIGNMENT.  FIXME: This makes
   it seem that include/coff/internal.h should not define
   PE_DEF_SECTION_ALIGNMENT.  */
#if PE_DEF_SECTION_ALIGNMENT != ${OVERRIDE_SECTION_ALIGNMENT:-PE_DEF_SECTION_ALIGNMENT}
#undef PE_DEF_SECTION_ALIGNMENT
#define PE_DEF_SECTION_ALIGNMENT ${OVERRIDE_SECTION_ALIGNMENT}
#endif

#if defined(TARGET_IS_i386pe) \
    || defined(TARGET_IS_shpe) \
    || defined(TARGET_IS_armpe) \
    || defined(TARGET_IS_arm_epoc_pe) \
    || defined(TARGET_IS_arm_wince_pe)
#define DLL_SUPPORT
#endif

#if defined(TARGET_IS_i386pe)
#define DEFAULT_PSEUDO_RELOC_VERSION 2
#else
#define DEFAULT_PSEUDO_RELOC_VERSION 1
#endif

#if defined(TARGET_IS_i386pe) || ! defined(DLL_SUPPORT)
#define	PE_DEF_SUBSYSTEM		3
#else
#undef NT_EXE_IMAGE_BASE
#undef PE_DEF_SECTION_ALIGNMENT
#undef PE_DEF_FILE_ALIGNMENT
#define NT_EXE_IMAGE_BASE		0x00010000

#if defined(TARGET_IS_armpe) || defined(TARGET_IS_arm_wince_pe)
#define PE_DEF_SECTION_ALIGNMENT	0x00001000
#define	PE_DEF_SUBSYSTEM		9
#else
#define PE_DEF_SECTION_ALIGNMENT	0x00000400
#define	PE_DEF_SUBSYSTEM		2
#endif
#define PE_DEF_FILE_ALIGNMENT		0x00000200
#endif

static struct internal_extra_pe_aouthdr pe;
static int dll;
static int pe_subsystem = ${SUBSYSTEM};
static flagword real_flags = 0;
static int support_old_code = 0;
static char * thumb_entry_symbol = NULL;
static lang_assignment_statement_type *image_base_statement = 0;
static unsigned short pe_dll_characteristics = 0;

#ifdef DLL_SUPPORT
static int pe_enable_stdcall_fixup = -1; /* 0=disable 1=enable.  */
static char *pe_out_def_filename = NULL;
static char *pe_implib_filename = NULL;
static int pe_enable_auto_image_base = 0;
static char *pe_dll_search_prefix = NULL;
#endif

extern const char *output_filename;

static int is_underscoring (void)
{
  int u = 0;
  if (pe_leading_underscore != -1)
    return pe_leading_underscore;
  if (!bfd_get_target_info ("${OUTPUT_FORMAT}", NULL, NULL, &u, NULL))
    bfd_get_target_info ("${RELOCATEABLE_OUTPUT_FORMAT}", NULL, NULL, &u, NULL);

  if (u == -1)
    abort ();
  pe_leading_underscore = (u != 0 ? 1 : 0);
  return pe_leading_underscore;
}

static void
gld_${EMULATION_NAME}_before_parse (void)
{
  is_underscoring ();
  ldfile_set_output_arch ("${OUTPUT_ARCH}", bfd_arch_`echo ${ARCH} | sed -e 's/:.*//'`);
  output_filename = "${EXECUTABLE_NAME:-a.exe}";
#ifdef DLL_SUPPORT
  input_flags.dynamic = TRUE;
  config.has_shared = 1;
EOF

# Cygwin no longer wants these noisy warnings.  Other PE
# targets might like to consider adding themselves here.
# See also the mail thread starting here for the reason why
# merge_rdata defaults to 0 for cygwin:
#  http://cygwin.com/ml/cygwin-apps/2013-04/msg00187.html
case ${target} in
  *-*-cygwin*)
    default_auto_import=1
    default_merge_rdata=0
    ;;
  i[3-7]86-*-mingw* | x86_64-*-mingw*)
    default_auto_import=1
    default_merge_rdata=0
    ;;
  *)
    default_auto_import=-1
    default_merge_rdata=1
    ;;
esac

fragment <<EOF
  link_info.pei386_auto_import = ${default_auto_import};
  /* Use by default version.  */
  link_info.pei386_runtime_pseudo_reloc = DEFAULT_PSEUDO_RELOC_VERSION;
#endif
}

/* Indicates if RDATA shall be merged into DATA when pseudo-relocation
   version 2 is used and auto-import is enabled.  */
#define MERGE_RDATA_V2 ${default_merge_rdata}

/* PE format extra command line options.  */

/* Used for setting flags in the PE header.  */
#define OPTION_BASE_FILE		(300  + 1)
#define OPTION_DLL			(OPTION_BASE_FILE + 1)
#define OPTION_FILE_ALIGNMENT		(OPTION_DLL + 1)
#define OPTION_IMAGE_BASE		(OPTION_FILE_ALIGNMENT + 1)
#define OPTION_MAJOR_IMAGE_VERSION	(OPTION_IMAGE_BASE + 1)
#define OPTION_MAJOR_OS_VERSION		(OPTION_MAJOR_IMAGE_VERSION + 1)
#define OPTION_MAJOR_SUBSYSTEM_VERSION	(OPTION_MAJOR_OS_VERSION + 1)
#define OPTION_MINOR_IMAGE_VERSION	(OPTION_MAJOR_SUBSYSTEM_VERSION + 1)
#define OPTION_MINOR_OS_VERSION		(OPTION_MINOR_IMAGE_VERSION + 1)
#define OPTION_MINOR_SUBSYSTEM_VERSION	(OPTION_MINOR_OS_VERSION + 1)
#define OPTION_SECTION_ALIGNMENT	(OPTION_MINOR_SUBSYSTEM_VERSION + 1)
#define OPTION_STACK			(OPTION_SECTION_ALIGNMENT + 1)
#define OPTION_SUBSYSTEM		(OPTION_STACK + 1)
#define OPTION_HEAP			(OPTION_SUBSYSTEM + 1)
#define OPTION_SUPPORT_OLD_CODE		(OPTION_HEAP + 1)
#define OPTION_OUT_DEF			(OPTION_SUPPORT_OLD_CODE + 1)
#define OPTION_EXPORT_ALL		(OPTION_OUT_DEF + 1)
#define OPTION_EXCLUDE_SYMBOLS		(OPTION_EXPORT_ALL + 1)
#define OPTION_EXCLUDE_ALL_SYMBOLS	(OPTION_EXCLUDE_SYMBOLS + 1)
#define OPTION_KILL_ATS			(OPTION_EXCLUDE_ALL_SYMBOLS + 1)
#define OPTION_STDCALL_ALIASES		(OPTION_KILL_ATS + 1)
#define OPTION_ENABLE_STDCALL_FIXUP	(OPTION_STDCALL_ALIASES + 1)
#define OPTION_DISABLE_STDCALL_FIXUP	(OPTION_ENABLE_STDCALL_FIXUP + 1)
#define OPTION_IMPLIB_FILENAME		(OPTION_DISABLE_STDCALL_FIXUP + 1)
#define OPTION_THUMB_ENTRY		(OPTION_IMPLIB_FILENAME + 1)
#define OPTION_WARN_DUPLICATE_EXPORTS	(OPTION_THUMB_ENTRY + 1)
#define OPTION_IMP_COMPAT		(OPTION_WARN_DUPLICATE_EXPORTS + 1)
#define OPTION_ENABLE_AUTO_IMAGE_BASE	(OPTION_IMP_COMPAT + 1)
#define OPTION_DISABLE_AUTO_IMAGE_BASE	(OPTION_ENABLE_AUTO_IMAGE_BASE + 1)
#define OPTION_DLL_SEARCH_PREFIX	(OPTION_DISABLE_AUTO_IMAGE_BASE + 1)
#define OPTION_NO_DEFAULT_EXCLUDES	(OPTION_DLL_SEARCH_PREFIX + 1)
#define OPTION_DLL_ENABLE_AUTO_IMPORT	(OPTION_NO_DEFAULT_EXCLUDES + 1)
#define OPTION_DLL_DISABLE_AUTO_IMPORT	(OPTION_DLL_ENABLE_AUTO_IMPORT + 1)
#define OPTION_ENABLE_EXTRA_PE_DEBUG	(OPTION_DLL_DISABLE_AUTO_IMPORT + 1)
#define OPTION_EXCLUDE_LIBS		(OPTION_ENABLE_EXTRA_PE_DEBUG + 1)
#define OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC	\
					(OPTION_EXCLUDE_LIBS + 1)
#define OPTION_DLL_DISABLE_RUNTIME_PSEUDO_RELOC	\
					(OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC + 1)
#define OPTION_LARGE_ADDRESS_AWARE \
					(OPTION_DLL_DISABLE_RUNTIME_PSEUDO_RELOC + 1)
#define OPTION_DISABLE_LARGE_ADDRESS_AWARE \
 					(OPTION_LARGE_ADDRESS_AWARE + 1)
#define OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC_V1	\
					(OPTION_DISABLE_LARGE_ADDRESS_AWARE + 1)
#define OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC_V2	\
					(OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC_V1 + 1)
#define OPTION_EXCLUDE_MODULES_FOR_IMPLIB \
					(OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC_V2 + 1)
#define OPTION_USE_NUL_PREFIXED_IMPORT_TABLES \
					(OPTION_EXCLUDE_MODULES_FOR_IMPLIB + 1)
#define OPTION_NO_LEADING_UNDERSCORE \
					(OPTION_USE_NUL_PREFIXED_IMPORT_TABLES + 1)
#define OPTION_LEADING_UNDERSCORE \
					(OPTION_NO_LEADING_UNDERSCORE + 1)
#define OPTION_ENABLE_LONG_SECTION_NAMES \
					(OPTION_LEADING_UNDERSCORE + 1)
#define OPTION_DISABLE_LONG_SECTION_NAMES \
					(OPTION_ENABLE_LONG_SECTION_NAMES + 1)
/* DLLCharacteristics flags */
#define OPTION_DYNAMIC_BASE		(OPTION_DISABLE_LONG_SECTION_NAMES + 1)
#define OPTION_FORCE_INTEGRITY		(OPTION_DYNAMIC_BASE + 1)
#define OPTION_NX_COMPAT		(OPTION_FORCE_INTEGRITY + 1)
#define OPTION_NO_ISOLATION		(OPTION_NX_COMPAT + 1)
#define OPTION_NO_SEH			(OPTION_NO_ISOLATION + 1)
#define OPTION_NO_BIND			(OPTION_NO_SEH + 1)
#define OPTION_WDM_DRIVER		(OPTION_NO_BIND + 1)
#define OPTION_TERMINAL_SERVER_AWARE	(OPTION_WDM_DRIVER + 1)

static void
gld${EMULATION_NAME}_add_options
  (int ns ATTRIBUTE_UNUSED,
   char **shortopts ATTRIBUTE_UNUSED,
   int nl,
   struct option **longopts,
   int nrl ATTRIBUTE_UNUSED,
   struct option **really_longopts ATTRIBUTE_UNUSED)
{
  static const struct option xtra_long[] =
  {
    /* PE options.  */
    {"base-file", required_argument, NULL, OPTION_BASE_FILE},
    {"dll", no_argument, NULL, OPTION_DLL},
    {"file-alignment", required_argument, NULL, OPTION_FILE_ALIGNMENT},
    {"heap", required_argument, NULL, OPTION_HEAP},
    {"image-base", required_argument, NULL, OPTION_IMAGE_BASE},
    {"major-image-version", required_argument, NULL, OPTION_MAJOR_IMAGE_VERSION},
    {"major-os-version", required_argument, NULL, OPTION_MAJOR_OS_VERSION},
    {"major-subsystem-version", required_argument, NULL, OPTION_MAJOR_SUBSYSTEM_VERSION},
    {"minor-image-version", required_argument, NULL, OPTION_MINOR_IMAGE_VERSION},
    {"minor-os-version", required_argument, NULL, OPTION_MINOR_OS_VERSION},
    {"minor-subsystem-version", required_argument, NULL, OPTION_MINOR_SUBSYSTEM_VERSION},
    {"section-alignment", required_argument, NULL, OPTION_SECTION_ALIGNMENT},
    {"stack", required_argument, NULL, OPTION_STACK},
    {"subsystem", required_argument, NULL, OPTION_SUBSYSTEM},
    {"support-old-code", no_argument, NULL, OPTION_SUPPORT_OLD_CODE},
    {"thumb-entry", required_argument, NULL, OPTION_THUMB_ENTRY},
    {"use-nul-prefixed-import-tables", no_argument, NULL,
     OPTION_USE_NUL_PREFIXED_IMPORT_TABLES},
    {"no-leading-underscore", no_argument, NULL, OPTION_NO_LEADING_UNDERSCORE},
    {"leading-underscore", no_argument, NULL, OPTION_LEADING_UNDERSCORE},
#ifdef DLL_SUPPORT
    /* getopt allows abbreviations, so we do this to stop it
       from treating -o as an abbreviation for this option.  */
    {"output-def", required_argument, NULL, OPTION_OUT_DEF},
    {"output-def", required_argument, NULL, OPTION_OUT_DEF},
    {"export-all-symbols", no_argument, NULL, OPTION_EXPORT_ALL},
    {"exclude-symbols", required_argument, NULL, OPTION_EXCLUDE_SYMBOLS},
    {"exclude-all-symbols", no_argument, NULL, OPTION_EXCLUDE_ALL_SYMBOLS},
    {"exclude-libs", required_argument, NULL, OPTION_EXCLUDE_LIBS},
    {"exclude-modules-for-implib", required_argument, NULL, OPTION_EXCLUDE_MODULES_FOR_IMPLIB},
    {"kill-at", no_argument, NULL, OPTION_KILL_ATS},
    {"add-stdcall-alias", no_argument, NULL, OPTION_STDCALL_ALIASES},
    {"enable-stdcall-fixup", no_argument, NULL, OPTION_ENABLE_STDCALL_FIXUP},
    {"disable-stdcall-fixup", no_argument, NULL, OPTION_DISABLE_STDCALL_FIXUP},
    {"out-implib", required_argument, NULL, OPTION_IMPLIB_FILENAME},
    {"warn-duplicate-exports", no_argument, NULL, OPTION_WARN_DUPLICATE_EXPORTS},
    /* getopt() allows abbreviations, so we do this to stop it from
       treating -c as an abbreviation for these --compat-implib.  */
    {"compat-implib", no_argument, NULL, OPTION_IMP_COMPAT},
    {"compat-implib", no_argument, NULL, OPTION_IMP_COMPAT},
    {"enable-auto-image-base", no_argument, NULL, OPTION_ENABLE_AUTO_IMAGE_BASE},
    {"disable-auto-image-base", no_argument, NULL, OPTION_DISABLE_AUTO_IMAGE_BASE},
    {"dll-search-prefix", required_argument, NULL, OPTION_DLL_SEARCH_PREFIX},
    {"no-default-excludes", no_argument, NULL, OPTION_NO_DEFAULT_EXCLUDES},
    {"enable-auto-import", no_argument, NULL, OPTION_DLL_ENABLE_AUTO_IMPORT},
    {"disable-auto-import", no_argument, NULL, OPTION_DLL_DISABLE_AUTO_IMPORT},
    {"enable-extra-pe-debug", no_argument, NULL, OPTION_ENABLE_EXTRA_PE_DEBUG},
    {"enable-runtime-pseudo-reloc", no_argument, NULL, OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC},
    {"disable-runtime-pseudo-reloc", no_argument, NULL, OPTION_DLL_DISABLE_RUNTIME_PSEUDO_RELOC},
    {"enable-runtime-pseudo-reloc-v1", no_argument, NULL, OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC_V1},
    {"enable-runtime-pseudo-reloc-v2", no_argument, NULL, OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC_V2},
#endif
    {"large-address-aware", no_argument, NULL, OPTION_LARGE_ADDRESS_AWARE},
    {"disable-large-address-aware", no_argument, NULL, OPTION_DISABLE_LARGE_ADDRESS_AWARE},
    {"enable-long-section-names", no_argument, NULL, OPTION_ENABLE_LONG_SECTION_NAMES},
    {"disable-long-section-names", no_argument, NULL, OPTION_DISABLE_LONG_SECTION_NAMES},
    {"dynamicbase",no_argument, NULL, OPTION_DYNAMIC_BASE},
    {"forceinteg", no_argument, NULL, OPTION_FORCE_INTEGRITY},
    {"nxcompat", no_argument, NULL, OPTION_NX_COMPAT},
    {"no-isolation", no_argument, NULL, OPTION_NO_ISOLATION},
    {"no-seh", no_argument, NULL, OPTION_NO_SEH},
    {"no-bind", no_argument, NULL, OPTION_NO_BIND},
    {"wdmdriver", no_argument, NULL, OPTION_WDM_DRIVER},
    {"tsaware", no_argument, NULL, OPTION_TERMINAL_SERVER_AWARE},
    {NULL, no_argument, NULL, 0}
  };

  *longopts
    = xrealloc (*longopts, nl * sizeof (struct option) + sizeof (xtra_long));
  memcpy (*longopts + nl, &xtra_long, sizeof (xtra_long));
}

/* PE/WIN32; added routines to get the subsystem type, heap and/or stack
   parameters which may be input from the command line.  */

typedef struct
{
  void *ptr;
  int size;
  int value;
  char *symbol;
  int inited;
  /* FALSE for an assembly level symbol and TRUE for a C visible symbol.
     C visible symbols can be prefixed by underscore dependent to target's
     settings.  */
  bfd_boolean is_c_symbol;
} definfo;

/* Get symbol name dependent to kind and C visible state of
   underscore.  */
#define GET_INIT_SYMBOL_NAME(IDX) \
  (init[(IDX)].symbol \
  + ((init[(IDX)].is_c_symbol == FALSE || (is_underscoring () != 0)) ? 0 : 1))

/* Decorates the C visible symbol by underscore, if target requires.  */
#define U(CSTR) \
  ((is_underscoring () == 0) ? CSTR : "_" CSTR)

/* Get size of constant string for a possible underscore prefixed
   C visible symbol.  */
#define U_SIZE(CSTR) \
  (sizeof (CSTR) + (is_underscoring () == 0 ? 0 : 1))

#define D(field,symbol,def,usc)  {&pe.field,sizeof(pe.field), def, symbol, 0, usc}

static definfo init[] =
{
  /* imagebase must be first */
#define IMAGEBASEOFF 0
  D(ImageBase,"__image_base__", NT_EXE_IMAGE_BASE, FALSE),
#define DLLOFF 1
  {&dll, sizeof(dll), 0, "__dll__", 0, FALSE},
#define MSIMAGEBASEOFF	2
  D(ImageBase, "___ImageBase", NT_EXE_IMAGE_BASE, TRUE),
  D(SectionAlignment,"__section_alignment__", PE_DEF_SECTION_ALIGNMENT, FALSE),
  D(FileAlignment,"__file_alignment__", PE_DEF_FILE_ALIGNMENT, FALSE),
  D(MajorOperatingSystemVersion,"__major_os_version__", 4, FALSE),
  D(MinorOperatingSystemVersion,"__minor_os_version__", 0, FALSE),
  D(MajorImageVersion,"__major_image_version__", 1, FALSE),
  D(MinorImageVersion,"__minor_image_version__", 0, FALSE),
#if defined(TARGET_IS_armpe)  || defined(TARGET_IS_arm_wince_pe)
  D(MajorSubsystemVersion,"__major_subsystem_version__", 3, FALSE),
#else
  D(MajorSubsystemVersion,"__major_subsystem_version__", 4, FALSE),
#endif
  D(MinorSubsystemVersion,"__minor_subsystem_version__", 0, FALSE),
  D(Subsystem,"__subsystem__", ${SUBSYSTEM}, FALSE),
  D(SizeOfStackReserve,"__size_of_stack_reserve__", 0x200000, FALSE),
  D(SizeOfStackCommit,"__size_of_stack_commit__", 0x1000, FALSE),
  D(SizeOfHeapReserve,"__size_of_heap_reserve__", 0x100000, FALSE),
  D(SizeOfHeapCommit,"__size_of_heap_commit__", 0x1000, FALSE),
  D(LoaderFlags,"__loader_flags__", 0x0, FALSE),
  D(DllCharacteristics, "__dll_characteristics__", 0x0, FALSE),
  { NULL, 0, 0, NULL, 0 , FALSE}
};


static void
gld_${EMULATION_NAME}_list_options (FILE *file)
{
  fprintf (file, _("  --base_file <basefile>             Generate a base file for relocatable DLLs\n"));
  fprintf (file, _("  --dll                              Set image base to the default for DLLs\n"));
  fprintf (file, _("  --file-alignment <size>            Set file alignment\n"));
  fprintf (file, _("  --heap <size>                      Set initial size of the heap\n"));
  fprintf (file, _("  --image-base <address>             Set start address of the executable\n"));
  fprintf (file, _("  --major-image-version <number>     Set version number of the executable\n"));
  fprintf (file, _("  --major-os-version <number>        Set minimum required OS version\n"));
  fprintf (file, _("  --major-subsystem-version <number> Set minimum required OS subsystem version\n"));
  fprintf (file, _("  --minor-image-version <number>     Set revision number of the executable\n"));
  fprintf (file, _("  --minor-os-version <number>        Set minimum required OS revision\n"));
  fprintf (file, _("  --minor-subsystem-version <number> Set minimum required OS subsystem revision\n"));
  fprintf (file, _("  --section-alignment <size>         Set section alignment\n"));
  fprintf (file, _("  --stack <size>                     Set size of the initial stack\n"));
  fprintf (file, _("  --subsystem <name>[:<version>]     Set required OS subsystem [& version]\n"));
  fprintf (file, _("  --support-old-code                 Support interworking with old code\n"));
  fprintf (file, _("  --[no-]leading-underscore          Set explicit symbol underscore prefix mode\n"));
  fprintf (file, _("  --thumb-entry=<symbol>             Set the entry point to be Thumb <symbol>\n"));
#ifdef DLL_SUPPORT
  fprintf (file, _("  --add-stdcall-alias                Export symbols with and without @@nn\n"));
  fprintf (file, _("  --disable-stdcall-fixup            Don't link _sym to _sym@@nn\n"));
  fprintf (file, _("  --enable-stdcall-fixup             Link _sym to _sym@@nn without warnings\n"));
  fprintf (file, _("  --exclude-symbols sym,sym,...      Exclude symbols from automatic export\n"));
  fprintf (file, _("  --exclude-all-symbols              Exclude all symbols from automatic export\n"));
  fprintf (file, _("  --exclude-libs lib,lib,...         Exclude libraries from automatic export\n"));
  fprintf (file, _("  --exclude-modules-for-implib mod,mod,...\n"));
  fprintf (file, _("                                     Exclude objects, archive members from auto\n"));
  fprintf (file, _("                                     export, place into import library instead.\n"));
  fprintf (file, _("  --export-all-symbols               Automatically export all globals to DLL\n"));
  fprintf (file, _("  --kill-at                          Remove @@nn from exported symbols\n"));
  fprintf (file, _("  --out-implib <file>                Generate import library\n"));
  fprintf (file, _("  --output-def <file>                Generate a .DEF file for the built DLL\n"));
  fprintf (file, _("  --warn-duplicate-exports           Warn about duplicate exports.\n"));
  fprintf (file, _("  --compat-implib                    Create backward compatible import libs;\n\
                                       create __imp_<SYMBOL> as well.\n"));
  fprintf (file, _("  --enable-auto-image-base           Automatically choose image base for DLLs\n\
                                       unless user specifies one\n"));
  fprintf (file, _("  --disable-auto-image-base          Do not auto-choose image base. (default)\n"));
  fprintf (file, _("  --dll-search-prefix=<string>       When linking dynamically to a dll without\n\
                                       an importlib, use <string><basename>.dll\n\
                                       in preference to lib<basename>.dll \n"));
  fprintf (file, _("  --enable-auto-import               Do sophisticated linking of _sym to\n\
                                       __imp_sym for DATA references\n"));
  fprintf (file, _("  --disable-auto-import              Do not auto-import DATA items from DLLs\n"));
  fprintf (file, _("  --enable-runtime-pseudo-reloc      Work around auto-import limitations by\n\
                                       adding pseudo-relocations resolved at\n\
                                       runtime.\n"));
  fprintf (file, _("  --disable-runtime-pseudo-reloc     Do not add runtime pseudo-relocations for\n\
                                       auto-imported DATA.\n"));
  fprintf (file, _("  --enable-extra-pe-debug            Enable verbose debug output when building\n\
                                       or linking to DLLs (esp. auto-import)\n"));
#endif
  fprintf (file, _("  --large-address-aware              Executable supports virtual addresses\n\
                                       greater than 2 gigabytes\n"));
  fprintf (file, _("  --disable-large-address-aware      Executable does not support virtual\n\
                                       addresses greater than 2 gigabytes\n"));
  fprintf (file, _("  --enable-long-section-names        Use long COFF section names even in\n\
                                       executable image files\n"));
  fprintf (file, _("  --disable-long-section-names       Never use long COFF section names, even\n\
                                       in object files\n"));
  fprintf (file, _("  --dynamicbase			 Image base address may be relocated using\n\
				       address space layout randomization (ASLR)\n"));
  fprintf (file, _("  --forceinteg		 Code integrity checks are enforced\n"));
  fprintf (file, _("  --nxcompat		 Image is compatible with data execution prevention\n"));
  fprintf (file, _("  --no-isolation		 Image understands isolation but do not isolate the image\n"));
  fprintf (file, _("  --no-seh			 Image does not use SEH. No SE handler may\n\
				       be called in this image\n"));
  fprintf (file, _("  --no-bind			 Do not bind this image\n"));
  fprintf (file, _("  --wdmdriver		 Driver uses the WDM model\n"));
  fprintf (file, _("  --tsaware                  Image is Terminal Server aware\n"));
}


static void
set_pe_name (char *name, long val)
{
  int i;
  is_underscoring ();

  /* Find the name and set it.  */
  for (i = 0; init[i].ptr; i++)
    {
      if (strcmp (name, GET_INIT_SYMBOL_NAME (i)) == 0)
	{
	  init[i].value = val;
	  init[i].inited = 1;
	  if (strcmp (name,"__image_base__") == 0)
	    set_pe_name (U ("__ImageBase"), val);
	  return;
	}
    }
  abort ();
}

static void
set_entry_point (void)
{
  const char *entry;
  const char *initial_symbol_char;
  int i;

  static const struct
    {
      const int value;
      const char *entry;
    }
  v[] =
    {
      { 1, "NtProcessStartup"  },
      { 2, "WinMainCRTStartup" },
      { 3, "mainCRTStartup"    },
      { 7, "__PosixProcessStartup"},
      { 9, "WinMainCRTStartup" },
      {14, "mainCRTStartup"    },
      { 0, NULL          }
    };

  /* Entry point name for arbitrary subsystem numbers.  */
  static const char default_entry[] = "mainCRTStartup";

  if (link_info.shared || dll)
    {
#if defined (TARGET_IS_i386pe)
      entry = "DllMainCRTStartup@@12";
#else
      entry = "DllMainCRTStartup";
#endif
    }
  else
    {

      for (i = 0; v[i].entry; i++)
        if (v[i].value == pe_subsystem)
          break;

      /* If no match, use the default.  */
      if (v[i].entry != NULL)
        entry = v[i].entry;
      else
        entry = default_entry;
    }

  initial_symbol_char = (is_underscoring () != 0 ? "_" : "");

  if (*initial_symbol_char != '\0')
    {
      char *alc_entry;

      /* lang_default_entry expects its argument to be permanently
	 allocated, so we don't free this string.  */
      alc_entry = xmalloc (strlen (initial_symbol_char)
			   + strlen (entry)
			   + 1);
      strcpy (alc_entry, initial_symbol_char);
      strcat (alc_entry, entry);
      entry = alc_entry;
    }

  lang_default_entry (entry);
}

static void
set_pe_subsystem (void)
{
  const char *sver;
  char *end;
  int len;
  int i;
  unsigned long temp_subsystem;
  static const struct
    {
      const char *name;
      const int value;
    }
  v[] =
    {
      { "native",  1},
      { "windows", 2},
      { "console", 3},
      { "posix",   7},
      { "wince",   9},
      { "xbox",   14},
      { NULL, 0 }
    };

  /* Check for the presence of a version number.  */
  sver = strchr (optarg, ':');
  if (sver == NULL)
    len = strlen (optarg);
  else
    {
      len = sver - optarg;
      set_pe_name ("__major_subsystem_version__",
		    strtoul (sver + 1, &end, 0));
      if (*end == '.')
	set_pe_name ("__minor_subsystem_version__",
		      strtoul (end + 1, &end, 0));
      if (*end != '\0')
	einfo (_("%P: warning: bad version number in -subsystem option\n"));
    }

  /* Check for numeric subsystem.  */
  temp_subsystem = strtoul (optarg, & end, 0);
  if ((*end == ':' || *end == '\0') && (temp_subsystem < 65536))
    {
      /* Search list for a numeric match to use its entry point.  */
      for (i = 0; v[i].name; i++)
	if (v[i].value == (int) temp_subsystem)
	  break;

      /* Use this subsystem.  */
      pe_subsystem = (int) temp_subsystem;
    }
  else
    {
      /* Search for subsystem by name.  */
      for (i = 0; v[i].name; i++)
	if (strncmp (optarg, v[i].name, len) == 0
	    && v[i].name[len] == '\0')
	  break;

      if (v[i].name == NULL)
	{
	  einfo (_("%P%F: invalid subsystem type %s\n"), optarg);
	  return;
	}

      pe_subsystem = v[i].value;
    }

  set_pe_name ("__subsystem__", pe_subsystem);

  return;
}


static void
set_pe_value (char *name)
{
  char *end;

  set_pe_name (name,  strtoul (optarg, &end, 0));

  if (end == optarg)
    einfo (_("%P%F: invalid hex number for PE parameter '%s'\n"), optarg);

  optarg = end;
}


static void
set_pe_stack_heap (char *resname, char *comname)
{
  set_pe_value (resname);

  if (*optarg == ',')
    {
      optarg++;
      set_pe_value (comname);
    }
  else if (*optarg)
    einfo (_("%P%F: strange hex info for PE parameter '%s'\n"), optarg);
}


static bfd_boolean
gld${EMULATION_NAME}_handle_option (int optc)
{
  switch (optc)
    {
    default:
      return FALSE;

    case OPTION_BASE_FILE:
      link_info.base_file = fopen (optarg, FOPEN_WB);
      if (link_info.base_file == NULL)
	einfo (_("%F%P: cannot open base file %s\n"), optarg);
      break;

      /* PE options.  */
    case OPTION_HEAP:
      set_pe_stack_heap ("__size_of_heap_reserve__", "__size_of_heap_commit__");
      break;
    case OPTION_STACK:
      set_pe_stack_heap ("__size_of_stack_reserve__", "__size_of_stack_commit__");
      break;
    case OPTION_SUBSYSTEM:
      set_pe_subsystem ();
      break;
    case OPTION_MAJOR_OS_VERSION:
      set_pe_value ("__major_os_version__");
      break;
    case OPTION_MINOR_OS_VERSION:
      set_pe_value ("__minor_os_version__");
      break;
    case OPTION_MAJOR_SUBSYSTEM_VERSION:
      set_pe_value ("__major_subsystem_version__");
      break;
    case OPTION_MINOR_SUBSYSTEM_VERSION:
      set_pe_value ("__minor_subsystem_version__");
      break;
    case OPTION_MAJOR_IMAGE_VERSION:
      set_pe_value ("__major_image_version__");
      break;
    case OPTION_MINOR_IMAGE_VERSION:
      set_pe_value ("__minor_image_version__");
      break;
    case OPTION_FILE_ALIGNMENT:
      set_pe_value ("__file_alignment__");
      break;
    case OPTION_SECTION_ALIGNMENT:
      set_pe_value ("__section_alignment__");
      break;
    case OPTION_DLL:
      set_pe_name ("__dll__", 1);
      break;
    case OPTION_IMAGE_BASE:
      set_pe_value ("__image_base__");
      break;
    case OPTION_SUPPORT_OLD_CODE:
      support_old_code = 1;
      break;
    case OPTION_THUMB_ENTRY:
      thumb_entry_symbol = optarg;
      break;
    case OPTION_USE_NUL_PREFIXED_IMPORT_TABLES:
      pe_use_nul_prefixed_import_tables = TRUE;
      break;
    case OPTION_NO_LEADING_UNDERSCORE:
      pe_leading_underscore = 0;
      break;
    case OPTION_LEADING_UNDERSCORE:
      pe_leading_underscore = 1;
      break;
#ifdef DLL_SUPPORT
    case OPTION_OUT_DEF:
      pe_out_def_filename = xstrdup (optarg);
      break;
    case OPTION_EXPORT_ALL:
      pe_dll_export_everything = 1;
      break;
    case OPTION_EXCLUDE_SYMBOLS:
      pe_dll_add_excludes (optarg, EXCLUDESYMS);
      break;
    case OPTION_EXCLUDE_ALL_SYMBOLS:
      pe_dll_exclude_all_symbols = 1;
      break;
    case OPTION_EXCLUDE_LIBS:
      pe_dll_add_excludes (optarg, EXCLUDELIBS);
      break;
    case OPTION_EXCLUDE_MODULES_FOR_IMPLIB:
      pe_dll_add_excludes (optarg, EXCLUDEFORIMPLIB);
      break;
    case OPTION_KILL_ATS:
      pe_dll_kill_ats = 1;
      break;
    case OPTION_STDCALL_ALIASES:
      pe_dll_stdcall_aliases = 1;
      break;
    case OPTION_ENABLE_STDCALL_FIXUP:
      pe_enable_stdcall_fixup = 1;
      break;
    case OPTION_DISABLE_STDCALL_FIXUP:
      pe_enable_stdcall_fixup = 0;
      break;
    case OPTION_IMPLIB_FILENAME:
      pe_implib_filename = xstrdup (optarg);
      break;
    case OPTION_WARN_DUPLICATE_EXPORTS:
      pe_dll_warn_dup_exports = 1;
      break;
    case OPTION_IMP_COMPAT:
      pe_dll_compat_implib = 1;
      break;
    case OPTION_ENABLE_AUTO_IMAGE_BASE:
      pe_enable_auto_image_base = 1;
      break;
    case OPTION_DISABLE_AUTO_IMAGE_BASE:
      pe_enable_auto_image_base = 0;
      break;
    case OPTION_DLL_SEARCH_PREFIX:
      pe_dll_search_prefix = xstrdup (optarg);
      break;
    case OPTION_NO_DEFAULT_EXCLUDES:
      pe_dll_do_default_excludes = 0;
      break;
    case OPTION_DLL_ENABLE_AUTO_IMPORT:
      link_info.pei386_auto_import = 1;
      break;
    case OPTION_DLL_DISABLE_AUTO_IMPORT:
      link_info.pei386_auto_import = 0;
      break;
    case OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC:
      link_info.pei386_runtime_pseudo_reloc =
	DEFAULT_PSEUDO_RELOC_VERSION;
      break;
    case OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC_V1:
      link_info.pei386_runtime_pseudo_reloc = 1;
      break;
    case OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC_V2:
      link_info.pei386_runtime_pseudo_reloc = 2;
      break;
    case OPTION_DLL_DISABLE_RUNTIME_PSEUDO_RELOC:
      link_info.pei386_runtime_pseudo_reloc = 0;
      break;
    case OPTION_ENABLE_EXTRA_PE_DEBUG:
      pe_dll_extra_pe_debug = 1;
      break;
#endif
    case OPTION_LARGE_ADDRESS_AWARE:
      real_flags |= IMAGE_FILE_LARGE_ADDRESS_AWARE;
      break;
    case OPTION_DISABLE_LARGE_ADDRESS_AWARE:
      real_flags &= ~ IMAGE_FILE_LARGE_ADDRESS_AWARE;
      break;
    case OPTION_ENABLE_LONG_SECTION_NAMES:
      pe_use_coff_long_section_names = 1;
      break;
    case OPTION_DISABLE_LONG_SECTION_NAMES:
      pe_use_coff_long_section_names = 0;
      break;
/*  Get DLLCharacteristics bits  */
    case OPTION_DYNAMIC_BASE:
      pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE;
      break;
    case OPTION_FORCE_INTEGRITY:
      pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY;
      break;
    case OPTION_NX_COMPAT:
      pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;
      break;
    case OPTION_NO_ISOLATION:
      pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_ISOLATION;
      break;
    case OPTION_NO_SEH:
      pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_SEH;
      break;
    case OPTION_NO_BIND:
      pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_BIND;
      break;
    case OPTION_WDM_DRIVER:
      pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_WDM_DRIVER;
      break;
    case OPTION_TERMINAL_SERVER_AWARE:
      pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE;
      break;
    }

  /*  Set DLLCharacteristics bits  */
  set_pe_name ("__dll_characteristics__", pe_dll_characteristics);

  return TRUE;
}


#ifdef DLL_SUPPORT
static unsigned long
strhash (const char *str)
{
  const unsigned char *s;
  unsigned long hash;
  unsigned int c;
  unsigned int len;

  hash = 0;
  len = 0;
  s = (const unsigned char *) str;
  while ((c = *s++) != '\0')
    {
      hash += c + (c << 17);
      hash ^= hash >> 2;
      ++len;
    }
  hash += len + (len << 17);
  hash ^= hash >> 2;

  return hash;
}

/* Use the output file to create a image base for relocatable DLLs.  */

static unsigned long
compute_dll_image_base (const char *ofile)
{
  unsigned long hash = strhash (ofile);
  return 0x61300000 + ((hash << 16) & 0x0FFC0000);
}
#endif

/* Assign values to the special symbols before the linker script is
   read.  */

static void
gld_${EMULATION_NAME}_set_symbols (void)
{
  /* Run through and invent symbols for all the
     names and insert the defaults.  */
  int j;

  is_underscoring ();

  if (!init[IMAGEBASEOFF].inited)
    {
      if (link_info.relocatable)
	init[IMAGEBASEOFF].value = 0;
      else if (init[DLLOFF].value || (link_info.shared && !link_info.pie))
	{
#ifdef DLL_SUPPORT
	  init[IMAGEBASEOFF].value = (pe_enable_auto_image_base
				      ? compute_dll_image_base (output_filename)
				      : NT_DLL_IMAGE_BASE);
#else
	  init[IMAGEBASEOFF].value = NT_DLL_IMAGE_BASE;
#endif
	}
      else
	init[IMAGEBASEOFF].value = NT_EXE_IMAGE_BASE;
      init[MSIMAGEBASEOFF].value = init[IMAGEBASEOFF].value;
    }

  /* Don't do any symbol assignments if this is a relocatable link.  */
  if (link_info.relocatable)
    return;

  /* Glue the assignments into the abs section.  */
  push_stat_ptr (&abs_output_section->children);

  for (j = 0; init[j].ptr; j++)
    {
      long val = init[j].value;
      lang_assignment_statement_type *rv;

      rv = lang_add_assignment (exp_assign (GET_INIT_SYMBOL_NAME (j),
					    exp_intop (val), FALSE));
      if (init[j].size == sizeof (short))
	*(short *) init[j].ptr = val;
      else if (init[j].size == sizeof (int))
	*(int *) init[j].ptr = val;
      else if (init[j].size == sizeof (long))
	*(long *) init[j].ptr = val;
      /* This might be a long long or other special type.  */
      else if (init[j].size == sizeof (bfd_vma))
	*(bfd_vma *) init[j].ptr = val;
      else	abort ();
      if (j == IMAGEBASEOFF)
	image_base_statement = rv;
    }
  /* Restore the pointer.  */
  pop_stat_ptr ();

  if (pe.FileAlignment > pe.SectionAlignment)
    {
      einfo (_("%P: warning, file alignment > section alignment.\n"));
    }
}

/* This is called after the linker script and the command line options
   have been read.  */

static void
gld_${EMULATION_NAME}_after_parse (void)
{
  /* PR ld/6744:  Warn the user if they have used an ELF-only
     option hoping it will work on PE.  */
  if (link_info.export_dynamic)
    einfo (_("%P: warning: --export-dynamic is not supported for PE "
      "targets, did you mean --export-all-symbols?\n"));

  set_entry_point ();

  after_parse_default ();
}

/* pe-dll.c directly accesses pe_data_import_dll,
   so it must be defined outside of #ifdef DLL_SUPPORT.
   Note - this variable is deliberately not initialised.
   This allows it to be treated as a common varaible, and only
   exist in one incarnation in a multiple target enabled linker.  */
char * pe_data_import_dll;

#ifdef DLL_SUPPORT
static struct bfd_link_hash_entry *pe_undef_found_sym;

static bfd_boolean
pe_undef_cdecl_match (struct bfd_link_hash_entry *h, void *inf)
{
  int sl;
  char *string = inf;
  const char *hs = h->root.string;

  sl = strlen (string);
  if (h->type == bfd_link_hash_defined
      && ((*hs == '@@' && *string == '_'
		   && strncmp (hs + 1, string + 1, sl - 1) == 0)
		  || strncmp (hs, string, sl) == 0)
      && h->root.string[sl] == '@@')
    {
      pe_undef_found_sym = h;
      return FALSE;
    }
  return TRUE;
}

static void
pe_fixup_stdcalls (void)
{
  static int gave_warning_message = 0;
  struct bfd_link_hash_entry *undef, *sym;

  if (pe_dll_extra_pe_debug)
    printf ("%s\n", __FUNCTION__);

  for (undef = link_info.hash->undefs; undef; undef=undef->u.undef.next)
    if (undef->type == bfd_link_hash_undefined)
      {
	char* at = strchr (undef->root.string, '@@');
	int lead_at = (*undef->root.string == '@@');
	if (lead_at)
	  at = strchr (undef->root.string + 1, '@@');

	if (at || lead_at)
	  {
	    /* The symbol is a stdcall symbol, so let's look for a
	       cdecl symbol with the same name and resolve to that.  */
	    char *cname = xstrdup (undef->root.string);

	    if (lead_at)
	      *cname = '_';
	    at = strchr (cname, '@@');
	    if (at)
	      *at = 0;
	    sym = bfd_link_hash_lookup (link_info.hash, cname, 0, 0, 1);

	    if (sym && sym->type == bfd_link_hash_defined)
	      {
		undef->type = bfd_link_hash_defined;
		undef->u.def.value = sym->u.def.value;
		undef->u.def.section = sym->u.def.section;

		if (pe_enable_stdcall_fixup == -1)
		  {
		    einfo (_("Warning: resolving %s by linking to %s\n"),
			   undef->root.string, cname);
		    if (! gave_warning_message)
		      {
			gave_warning_message = 1;
			einfo (_("Use --enable-stdcall-fixup to disable these warnings\n"));
			einfo (_("Use --disable-stdcall-fixup to disable these fixups\n"));
		      }
		  }
	      }
	  }
	else
	  {
	    /* The symbol is a cdecl symbol, so we look for stdcall
	       symbols - which means scanning the whole symbol table.  */
	    pe_undef_found_sym = 0;
	    bfd_link_hash_traverse (link_info.hash, pe_undef_cdecl_match,
				    (char *) undef->root.string);
	    sym = pe_undef_found_sym;
	    if (sym)
	      {
		undef->type = bfd_link_hash_defined;
		undef->u.def.value = sym->u.def.value;
		undef->u.def.section = sym->u.def.section;

		if (pe_enable_stdcall_fixup == -1)
		  {
		    einfo (_("Warning: resolving %s by linking to %s\n"),
			   undef->root.string, sym->root.string);
		    if (! gave_warning_message)
		      {
			gave_warning_message = 1;
			einfo (_("Use --enable-stdcall-fixup to disable these warnings\n"));
			einfo (_("Use --disable-stdcall-fixup to disable these fixups\n"));
		      }
		  }
	      }
	  }
      }
}

static int
make_import_fixup (arelent *rel, asection *s)
{
  struct bfd_symbol *sym = *rel->sym_ptr_ptr;
  char addend[4];

  if (pe_dll_extra_pe_debug)
    printf ("arelent: %s@@%#lx: add=%li\n", sym->name,
	    (unsigned long) rel->address, (long) rel->addend);

  if (! bfd_get_section_contents (s->owner, s, addend, rel->address, sizeof (addend)))
    einfo (_("%C: Cannot get section contents - auto-import exception\n"),
	   s->owner, s, rel->address);

  pe_create_import_fixup (rel, s, bfd_get_32 (s->owner, addend));

  return 1;
}

static void
pe_find_data_imports (void)
{
  struct bfd_link_hash_entry *undef, *sym;

  if (link_info.pei386_auto_import == 0)
    return;

  for (undef = link_info.hash->undefs; undef; undef=undef->u.undef.next)
    {
      if (undef->type == bfd_link_hash_undefined)
	{
	  /* C++ symbols are *long*.  */
	  char buf[4096];

	  if (pe_dll_extra_pe_debug)
	    printf ("%s:%s\n", __FUNCTION__, undef->root.string);

	  sprintf (buf, "__imp_%s", undef->root.string);

	  sym = bfd_link_hash_lookup (link_info.hash, buf, 0, 0, 1);

	  if (sym && sym->type == bfd_link_hash_defined)
	    {
	      bfd *b = sym->u.def.section->owner;
	      asymbol **symbols;
	      int nsyms, i;

	      if (link_info.pei386_auto_import == -1)
		{
		  static bfd_boolean warned = FALSE;

		  info_msg (_("Info: resolving %s by linking to %s (auto-import)\n"),
			    undef->root.string, buf);

		  /* PR linker/4844.  */
		  if (! warned)
		    {
		      warned = TRUE;
		      einfo (_("%P: warning: auto-importing has been activated without --enable-auto-import specified on the command line.\n\
This should work unless it involves constant data structures referencing symbols from auto-imported DLLs.\n"));
		    }
		}

	      if (!bfd_generic_link_read_symbols (b))
		{
		  einfo (_("%B%F: could not read symbols: %E\n"), b);
		  return;
		}

	      symbols = bfd_get_outsymbols (b);
	      nsyms = bfd_get_symcount (b);

	      for (i = 0; i < nsyms; i++)
		{
		  if (! CONST_STRNEQ (symbols[i]->name,
				      U ("_head_")))
		    continue;

		  if (pe_dll_extra_pe_debug)
		    printf ("->%s\n", symbols[i]->name);

		  pe_data_import_dll = (char *) (symbols[i]->name
						 + U_SIZE ("_head_") - 1);
		  break;
		}

	      pe_walk_relocs_of_symbol (&link_info, undef->root.string,
					make_import_fixup);

	      /* Let's differentiate it somehow from defined.  */
	      undef->type = bfd_link_hash_defweak;
	      /* We replace original name with __imp_ prefixed, this
		 1) may trash memory 2) leads to duplicate symbol generation.
		 Still, IMHO it's better than having name poluted.  */
	      undef->root.string = sym->root.string;
	      undef->u.def.value = sym->u.def.value;
	      undef->u.def.section = sym->u.def.section;
	    }
	}
    }
}

static bfd_boolean
pr_sym (struct bfd_hash_entry *h, void *inf ATTRIBUTE_UNUSED)
{
  printf ("+%s\n", h->string);

  return TRUE;
}
#endif /* DLL_SUPPORT */

static void
debug_section_p (bfd *abfd ATTRIBUTE_UNUSED, asection *sect, void *obj)
{
  int *found = (int *) obj;
  if (strncmp (".debug_", sect->name, sizeof (".debug_") - 1) == 0)
    *found = 1;
}

static void
gld_${EMULATION_NAME}_after_open (void)
{
  after_open_default ();

#ifdef DLL_SUPPORT
  if (pe_dll_extra_pe_debug)
    {
      bfd *a;
      struct bfd_link_hash_entry *sym;

      printf ("%s()\n", __FUNCTION__);

      for (sym = link_info.hash->undefs; sym; sym=sym->u.undef.next)
	printf ("-%s\n", sym->root.string);
      bfd_hash_traverse (&link_info.hash->table, pr_sym, NULL);

      for (a = link_info.input_bfds; a; a = a->link_next)
	printf ("*%s\n",a->filename);
    }
#endif

  /* Pass the wacky PE command line options into the output bfd.
     FIXME: This should be done via a function, rather than by
     including an internal BFD header.  */

  if (coff_data (link_info.output_bfd) == NULL
      || coff_data (link_info.output_bfd)->pe == 0)
    einfo (_("%F%P: cannot perform PE operations on non PE output file '%B'.\n"),
	   link_info.output_bfd);

  pe_data (link_info.output_bfd)->pe_opthdr = pe;
  pe_data (link_info.output_bfd)->dll = init[DLLOFF].value;
  pe_data (link_info.output_bfd)->real_flags |= real_flags;

  /* At this point we must decide whether to use long section names
     in the output or not.  If the user hasn't explicitly specified
     on the command line, we leave it to the default for the format
     (object files yes, image files no), except if there is debug
     information present; GDB relies on the long section names to
     find it, so enable it in that case.  */
  if (pe_use_coff_long_section_names < 0 && link_info.strip == strip_none)
    {
      /* Iterate over all sections of all input BFDs, checking
         for any that begin 'debug_' and are long names.  */
      LANG_FOR_EACH_INPUT_STATEMENT (is)
	{
	  int found_debug = 0;
	  bfd_map_over_sections (is->the_bfd, debug_section_p, &found_debug);
	  if (found_debug)
	    {
	      pe_use_coff_long_section_names = 1;
	      break;
	    }
	}
    }

  pe_output_file_set_long_section_names (link_info.output_bfd);

#ifdef DLL_SUPPORT
  if (pe_enable_stdcall_fixup) /* -1=warn or 1=disable */
    pe_fixup_stdcalls ();

  pe_process_import_defs (link_info.output_bfd, &link_info);

  pe_find_data_imports ();

  /* As possibly new symbols are added by imports, we rerun
     stdcall/fastcall fixup here.  */
  if (pe_enable_stdcall_fixup) /* -1=warn or 1=disable */
    pe_fixup_stdcalls ();

#if defined (TARGET_IS_i386pe) \
    || defined (TARGET_IS_armpe) \
    || defined (TARGET_IS_arm_epoc_pe) \
    || defined (TARGET_IS_arm_wince_pe)
  if (!link_info.relocatable)
    pe_dll_build_sections (link_info.output_bfd, &link_info);
#else
  if (link_info.shared)
    pe_dll_build_sections (link_info.output_bfd, &link_info);
  else
    pe_exe_build_sections (link_info.output_bfd, &link_info);
#endif
#endif /* DLL_SUPPORT */

#if defined(TARGET_IS_armpe) || defined(TARGET_IS_arm_epoc_pe) || defined(TARGET_IS_arm_wince_pe)
  if (strstr (bfd_get_target (link_info.output_bfd), "arm") == NULL)
    {
      /* The arm backend needs special fields in the output hash structure.
	 These will only be created if the output format is an arm format,
	 hence we do not support linking and changing output formats at the
	 same time.  Use a link followed by objcopy to change output formats.  */
      einfo ("%F%X%P: error: cannot change output format whilst linking ARM binaries\n");
      return;
    }
  {
    /* Find a BFD that can hold the interworking stubs.  */
    LANG_FOR_EACH_INPUT_STATEMENT (is)
      {
	if (bfd_arm_get_bfd_for_interworking (is->the_bfd, & link_info))
	  break;
      }
  }
#endif

  {
    /* This next chunk of code tries to detect the case where you have
       two import libraries for the same DLL (specifically,
       symbolically linking libm.a and libc.a in cygwin to
       libcygwin.a).  In those cases, it's possible for function
       thunks from the second implib to be used but without the
       head/tail objects, causing an improper import table.  We detect
       those cases and rename the "other" import libraries to match
       the one the head/tail come from, so that the linker will sort
       things nicely and produce a valid import table.  */

    LANG_FOR_EACH_INPUT_STATEMENT (is)
      {
	if (is->the_bfd->my_archive)
	  {
	    int idata2 = 0, reloc_count=0, is_imp = 0;
	    asection *sec;

	    /* See if this is an import library thunk.  */
	    for (sec = is->the_bfd->sections; sec; sec = sec->next)
	      {
		if (strcmp (sec->name, ".idata\$2") == 0)
		  idata2 = 1;
		if (CONST_STRNEQ (sec->name, ".idata\$"))
		  is_imp = 1;
		reloc_count += sec->reloc_count;
	      }

	    if (is_imp && !idata2 && reloc_count)
	      {
		/* It is, look for the reference to head and see if it's
		   from our own library.  */
		for (sec = is->the_bfd->sections; sec; sec = sec->next)
		  {
		    int i;
		    long relsize;
		    asymbol **symbols;
		    arelent **relocs;
		    int nrelocs;

		    relsize = bfd_get_reloc_upper_bound (is->the_bfd, sec);
		    if (relsize < 1)
		      break;

		    if (!bfd_generic_link_read_symbols (is->the_bfd))
		      {
			einfo (_("%B%F: could not read symbols: %E\n"),
			       is->the_bfd);
			return;
		      }
		    symbols = bfd_get_outsymbols (is->the_bfd);

		    relocs = xmalloc ((size_t) relsize);
		    nrelocs = bfd_canonicalize_reloc (is->the_bfd, sec,
						      relocs, symbols);
		    if (nrelocs < 0)
		      {
			free (relocs);
			einfo ("%X%P: unable to process relocs: %E\n");
			return;
		      }

		    for (i = 0; i < nrelocs; i++)
		      {
			struct bfd_symbol *s;
			struct bfd_link_hash_entry * blhe;
			char *other_bfd_filename;
			char *n;

			s = (relocs[i]->sym_ptr_ptr)[0];

			if (s->flags & BSF_LOCAL)
			  continue;

			/* Thunk section with reloc to another bfd.  */
			blhe = bfd_link_hash_lookup (link_info.hash,
						     s->name,
						     FALSE, FALSE, TRUE);

			if (blhe == NULL
			    || blhe->type != bfd_link_hash_defined)
			  continue;

			other_bfd_filename
			  = blhe->u.def.section->owner->my_archive
			    ? bfd_get_filename (blhe->u.def.section->owner->my_archive)
			    : bfd_get_filename (blhe->u.def.section->owner);

			if (filename_cmp (bfd_get_filename
					    (is->the_bfd->my_archive),
					  other_bfd_filename) == 0)
			  continue;

			/* Rename this implib to match the other one.  */
			n = xmalloc (strlen (other_bfd_filename) + 1);
			strcpy (n, other_bfd_filename);
			is->the_bfd->my_archive->filename = n;
		      }

		    free (relocs);
		    /* Note - we do not free the symbols,
		       they are now cached in the BFD.  */
		  }
	      }
	  }
      }
  }

  {
    int is_ms_arch = 0;
    bfd *cur_arch = 0;
    lang_input_statement_type *is2;
    lang_input_statement_type *is3;

    /* Careful - this is a shell script.  Watch those dollar signs! */
    /* Microsoft import libraries have every member named the same,
       and not in the right order for us to link them correctly.  We
       must detect these and rename the members so that they'll link
       correctly.  There are three types of objects: the head, the
       thunks, and the sentinel(s).  The head is easy; it's the one
       with idata2.  We assume that the sentinels won't have relocs,
       and the thunks will.  It's easier than checking the symbol
       table for external references.  */
    LANG_FOR_EACH_INPUT_STATEMENT (is)
      {
	if (is->the_bfd->my_archive)
	  {
	    char *pnt;
	    bfd *arch = is->the_bfd->my_archive;

	    if (cur_arch != arch)
	      {
		cur_arch = arch;
		is_ms_arch = 1;

		for (is3 = is;
		     is3 && is3->the_bfd->my_archive == arch;
		     is3 = (lang_input_statement_type *) is3->next)
		  {
		    /* A MS dynamic import library can also contain static
		       members, so look for the first element with a .dll
		       extension, and use that for the remainder of the
		       comparisons.  */
		    pnt = strrchr (is3->the_bfd->filename, '.');
		    if (pnt != NULL && filename_cmp (pnt, ".dll") == 0)
		      break;
		  }

		if (is3 == NULL)
		  is_ms_arch = 0;
		else
		  {
		    /* OK, found one.  Now look to see if the remaining
		       (dynamic import) members use the same name.  */
		    for (is2 = is;
			 is2 && is2->the_bfd->my_archive == arch;
			 is2 = (lang_input_statement_type *) is2->next)
		      {
			/* Skip static members, ie anything with a .obj
			   extension.  */
			pnt = strrchr (is2->the_bfd->filename, '.');
			if (pnt != NULL && filename_cmp (pnt, ".obj") == 0)
			  continue;

			if (filename_cmp (is3->the_bfd->filename,
					  is2->the_bfd->filename))
			  {
			    is_ms_arch = 0;
			    break;
			  }
		      }
		  }
	      }

	    /* This fragment might have come from an .obj file in a Microsoft
	       import, and not an actual import record. If this is the case,
	       then leave the filename alone.  */
	    pnt = strrchr (is->the_bfd->filename, '.');

	    if (is_ms_arch && (filename_cmp (pnt, ".dll") == 0))
	      {
		int idata2 = 0, reloc_count=0;
		asection *sec;
		char *new_name, seq;

		for (sec = is->the_bfd->sections; sec; sec = sec->next)
		  {
		    if (strcmp (sec->name, ".idata\$2") == 0)
		      idata2 = 1;
		    reloc_count += sec->reloc_count;
		  }

		if (idata2) /* .idata2 is the TOC */
		  seq = 'a';
		else if (reloc_count > 0) /* thunks */
		  seq = 'b';
		else /* sentinel */
		  seq = 'c';

		new_name = xmalloc (strlen (is->the_bfd->filename) + 3);
		sprintf (new_name, "%s.%c", is->the_bfd->filename, seq);
		is->the_bfd->filename = new_name;

		new_name = xmalloc (strlen (is->filename) + 3);
		sprintf (new_name, "%s.%c", is->filename, seq);
		is->filename = new_name;
	      }
	  }
      }
  }

  {
    /* The following chunk of code tries to identify jump stubs in
       import libraries which are dead code and eliminates them
       from the final link. For each exported symbol <sym>, there
       is a object file in the import library with a .text section
       and several .idata\$* sections. The .text section contains the
       symbol definition for <sym> which is a jump stub of the form
       jmp *__imp_<sym>. The .idata\$5 contains the symbol definition
       for __imp_<sym> which is the address of the slot for <sym> in
       the import address table. When a symbol is imported explicitly
       using __declspec(dllimport) declaration, the compiler generates
       a reference to __imp_<sym> which directly resolves to the
       symbol in .idata\$5, in which case the jump stub code is not
       needed. The following code tries to identify jump stub sections
       in import libraries which are not referred to by anyone and
       marks them for exclusion from the final link.  */
    LANG_FOR_EACH_INPUT_STATEMENT (is)
      {
	if (is->the_bfd->my_archive)
	  {
	    int is_imp = 0;
	    asection *sec, *stub_sec = NULL;

	    /* See if this is an import library thunk.  */
	    for (sec = is->the_bfd->sections; sec; sec = sec->next)
	      {
		if (strncmp (sec->name, ".idata\$", 7) == 0)
		  is_imp = 1;
		/* The section containing the jmp stub has code
		   and has a reloc.  */
		if ((sec->flags & SEC_CODE) && sec->reloc_count)
		  stub_sec = sec;
	      }

	    if (is_imp && stub_sec)
	      {
		asymbol **symbols;
		long nsyms, src_count;
		struct bfd_link_hash_entry * blhe;

		if (!bfd_generic_link_read_symbols (is->the_bfd))
		  {
		    einfo (_("%B%F: could not read symbols: %E\n"),
			   is->the_bfd);
		    return;
		  }
		symbols = bfd_get_outsymbols (is->the_bfd);
		nsyms = bfd_get_symcount (is->the_bfd);

		for (src_count = 0; src_count < nsyms; src_count++)
		  {
		    if (symbols[src_count]->section->id == stub_sec->id)
		      {
			/* This symbol belongs to the section containing
			   the stub.  */
			blhe = bfd_link_hash_lookup (link_info.hash,
						     symbols[src_count]->name,
						     FALSE, FALSE, TRUE);
			/* If the symbol in the stub section has no other
			   undefined references, exclude the stub section
			   from the final link.  */
			if (blhe != NULL
			    && blhe->type == bfd_link_hash_defined
			    && blhe->u.undef.next == NULL
			    && blhe != link_info.hash->undefs_tail)
			  stub_sec->flags |= SEC_EXCLUDE;
		      }
		  }
	      }
	  }
      }
  }
}

static void
gld_${EMULATION_NAME}_before_allocation (void)
{
#ifdef TARGET_IS_ppcpe
  /* Here we rummage through the found bfds to collect toc information.  */
  {
    LANG_FOR_EACH_INPUT_STATEMENT (is)
      {
	if (!ppc_process_before_allocation (is->the_bfd, &link_info))
	  {
	    /* xgettext:c-format */
	    einfo (_("Errors encountered processing file %s\n"), is->filename);
	  }
      }
  }

  /* We have seen it all. Allocate it, and carry on.  */
  ppc_allocate_toc_section (&link_info);
#endif /* TARGET_IS_ppcpe */

#if defined(TARGET_IS_armpe) || defined(TARGET_IS_arm_epoc_pe) || defined(TARGET_IS_arm_wince_pe)
  /* FIXME: we should be able to set the size of the interworking stub
     section.

     Here we rummage through the found bfds to collect glue
     information.  FIXME: should this be based on a command line
     option?  krk@@cygnus.com.  */
  {
    LANG_FOR_EACH_INPUT_STATEMENT (is)
      {
	if (! bfd_arm_process_before_allocation
	    (is->the_bfd, & link_info, support_old_code))
	  {
	    /* xgettext:c-format */
	    einfo (_("Errors encountered processing file %s for interworking\n"),
		   is->filename);
	  }
      }
  }

  /* We have seen it all. Allocate it, and carry on.  */
  bfd_arm_allocate_interworking_sections (& link_info);
#endif /* TARGET_IS_armpe || TARGET_IS_arm_epoc_pe || TARGET_IS_arm_wince_pe */

  before_allocation_default ();
}

#ifdef DLL_SUPPORT
/* This is called when an input file isn't recognized as a BFD.  We
   check here for .DEF files and pull them in automatically.  */

static int
saw_option (char *option)
{
  int i;

  for (i = 0; init[i].ptr; i++)
    if (strcmp (GET_INIT_SYMBOL_NAME (i), option) == 0)
      return init[i].inited;
  return 0;
}
#endif /* DLL_SUPPORT */

static bfd_boolean
gld_${EMULATION_NAME}_unrecognized_file (lang_input_statement_type *entry ATTRIBUTE_UNUSED)
{
#ifdef DLL_SUPPORT
  const char *ext = entry->filename + strlen (entry->filename) - 4;

  if (filename_cmp (ext, ".def") == 0 || filename_cmp (ext, ".DEF") == 0)
    {
      pe_def_file = def_file_parse (entry->filename, pe_def_file);

      if (pe_def_file)
	{
	  int i, buflen=0, len;
	  char *buf;

	  for (i = 0; i < pe_def_file->num_exports; i++)
	    {
	      len = strlen (pe_def_file->exports[i].internal_name);
	      if (buflen < len + 2)
		buflen = len + 2;
	    }

	  buf = xmalloc (buflen);

	  for (i = 0; i < pe_def_file->num_exports; i++)
	    {
	      struct bfd_link_hash_entry *h;

	      sprintf (buf, "%s%s", U (""),
	               pe_def_file->exports[i].internal_name);

	      h = bfd_link_hash_lookup (link_info.hash, buf, TRUE, TRUE, TRUE);
	      if (h == (struct bfd_link_hash_entry *) NULL)
		einfo (_("%P%F: bfd_link_hash_lookup failed: %E\n"));
	      if (h->type == bfd_link_hash_new)
		{
		  h->type = bfd_link_hash_undefined;
		  h->u.undef.abfd = NULL;
		  bfd_link_add_undef (link_info.hash, h);
		}
	    }
	  free (buf);

	  /* def_file_print (stdout, pe_def_file); */
	  if (pe_def_file->is_dll == 1)
	    link_info.shared = 1;

	  if (pe_def_file->base_address != (bfd_vma)(-1))
	    {
	      pe.ImageBase
		= pe_data (link_info.output_bfd)->pe_opthdr.ImageBase
		= init[IMAGEBASEOFF].value
		= pe_def_file->base_address;
	      init[IMAGEBASEOFF].inited = 1;
	      if (image_base_statement)
		image_base_statement->exp
		  = exp_assign ("__image_base__", exp_intop (pe.ImageBase),
				FALSE);
	    }

	  if (pe_def_file->stack_reserve != -1
	      && ! saw_option ("__size_of_stack_reserve__"))
	    {
	      pe.SizeOfStackReserve = pe_def_file->stack_reserve;
	      if (pe_def_file->stack_commit != -1)
		pe.SizeOfStackCommit = pe_def_file->stack_commit;
	    }
	  if (pe_def_file->heap_reserve != -1
	      && ! saw_option ("__size_of_heap_reserve__"))
	    {
	      pe.SizeOfHeapReserve = pe_def_file->heap_reserve;
	      if (pe_def_file->heap_commit != -1)
		pe.SizeOfHeapCommit = pe_def_file->heap_commit;
	    }
	  return TRUE;
	}
    }
#endif
  return FALSE;
}

static bfd_boolean
gld_${EMULATION_NAME}_recognized_file (lang_input_statement_type *entry ATTRIBUTE_UNUSED)
{
#ifdef DLL_SUPPORT
#ifdef TARGET_IS_i386pe
  pe_dll_id_target ("pei-i386");
#endif
#ifdef TARGET_IS_shpe
  pe_dll_id_target ("pei-shl");
#endif
#ifdef TARGET_IS_armpe
  pe_dll_id_target ("pei-arm-little");
#endif
#ifdef TARGET_IS_arm_epoc_pe
  pe_dll_id_target ("epoc-pei-arm-little");
#endif
#ifdef TARGET_IS_arm_wince_pe
  pe_dll_id_target ("pei-arm-wince-little");
#endif
  if (pe_bfd_is_dll (entry->the_bfd))
    return pe_implied_import_dll (entry->filename);
#endif
  return FALSE;
}

static void
gld_${EMULATION_NAME}_finish (void)
{
#if defined(TARGET_IS_armpe) || defined(TARGET_IS_arm_epoc_pe) || defined(TARGET_IS_arm_wince_pe)
  struct bfd_link_hash_entry * h;

  if (thumb_entry_symbol != NULL)
    {
      h = bfd_link_hash_lookup (link_info.hash, thumb_entry_symbol,
				FALSE, FALSE, TRUE);

      if (h != (struct bfd_link_hash_entry *) NULL
	  && (h->type == bfd_link_hash_defined
	      || h->type == bfd_link_hash_defweak)
	  && h->u.def.section->output_section != NULL)
	{
	  static char buffer[32];
	  bfd_vma val;

	  /* Special procesing is required for a Thumb entry symbol.  The
	     bottom bit of its address must be set.  */
	  val = (h->u.def.value
		 + bfd_get_section_vma (link_info.output_bfd,
					h->u.def.section->output_section)
		 + h->u.def.section->output_offset);

	  val |= 1;

	  /* Now convert this value into a string and store it in entry_symbol
	     where the lang_finish() function will pick it up.  */
	  buffer[0] = '0';
	  buffer[1] = 'x';

	  sprintf_vma (buffer + 2, val);

	  if (entry_symbol.name != NULL && entry_from_cmdline)
	    einfo (_("%P: warning: '--thumb-entry %s' is overriding '-e %s'\n"),
		   thumb_entry_symbol, entry_symbol.name);
	  entry_symbol.name = buffer;
	}
      else
	einfo (_("%P: warning: cannot find thumb start symbol %s\n"), thumb_entry_symbol);
    }
#endif /* defined(TARGET_IS_armpe) || defined(TARGET_IS_arm_epoc_pe) || defined(TARGET_IS_arm_wince_pe) */

  finish_default ();

#ifdef DLL_SUPPORT
  if (link_info.shared
#if !defined(TARGET_IS_shpe)
      || (!link_info.relocatable && pe_def_file->num_exports != 0)
#endif
    )
    {
      pe_dll_fill_sections (link_info.output_bfd, &link_info);
      if (pe_implib_filename)
	pe_dll_generate_implib (pe_def_file, pe_implib_filename, &link_info);
    }
#if defined(TARGET_IS_shpe)
  /* ARM doesn't need relocs.  */
  else
    {
      pe_exe_fill_sections (link_info.output_bfd, &link_info);
    }
#endif

  if (pe_out_def_filename)
    pe_dll_generate_def_file (pe_out_def_filename);
#endif /* DLL_SUPPORT */

  /* I don't know where .idata gets set as code, but it shouldn't be.  */
  {
    asection *asec = bfd_get_section_by_name (link_info.output_bfd, ".idata");

    if (asec)
      {
	asec->flags &= ~SEC_CODE;
	asec->flags |= SEC_DATA;
      }
  }
}


/* Place an orphan section.

   We use this to put sections in a reasonable place in the file, and
   to ensure that they are aligned as required.

   We handle grouped sections here as well.  A section named .foo\$nn
   goes into the output section .foo.  All grouped sections are sorted
   by name.

   Grouped sections for the default sections are handled by the
   default linker script using wildcards, and are sorted by
   sort_sections.  */

static lang_output_section_statement_type *
gld_${EMULATION_NAME}_place_orphan (asection *s,
				    const char *secname,
				    int constraint)
{
  const char *orig_secname = secname;
  char *dollar = NULL;
  lang_output_section_statement_type *os;
  lang_statement_list_type add_child;
  lang_output_section_statement_type *match_by_name = NULL;
  lang_statement_union_type **pl;

  /* Look through the script to see where to place this section.  */
  if (!link_info.relocatable
      && (dollar = strchr (secname, '\$')) != NULL)
    {
      size_t len = dollar - secname;
      char *newname = xmalloc (len + 1);
      memcpy (newname, secname, len);
      newname[len] = '\0';
      secname = newname;
    }

  lang_list_init (&add_child);

  os = NULL;
  if (constraint == 0)
    for (os = lang_output_section_find (secname);
	 os != NULL;
	 os = next_matching_output_section_statement (os, 0))
      {
	/* If we don't match an existing output section, tell
	   lang_insert_orphan to create a new output section.  */
	constraint = SPECIAL;

	if (os->bfd_section != NULL
	    && (os->bfd_section->flags == 0
		|| ((s->flags ^ os->bfd_section->flags)
		    & (SEC_LOAD | SEC_ALLOC)) == 0))
	  {
	    /* We already have an output section statement with this
	       name, and its bfd section has compatible flags.
	       If the section already exists but does not have any flags set,
	       then it has been created by the linker, probably as a result of
	       a --section-start command line switch.  */
	    lang_add_section (&add_child, s, NULL, os);
	    break;
	  }

	/* Save unused output sections in case we can match them
	   against orphans later.  */
	if (os->bfd_section == NULL)
	  match_by_name = os;
      }

  /* If we didn't match an active output section, see if we matched an
     unused one and use that.  */
  if (os == NULL && match_by_name)
    {
      lang_add_section (&match_by_name->children, s, NULL, match_by_name);
      return match_by_name;
    }

  if (os == NULL)
    {
      static struct orphan_save hold[] =
	{
	  { ".text",
	    SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_READONLY | SEC_CODE,
	    0, 0, 0, 0 },
	  { ".idata",
	    SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_READONLY | SEC_DATA,
	    0, 0, 0, 0 },
	  { ".rdata",
	    SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_READONLY | SEC_DATA,
	    0, 0, 0, 0 },
	  { ".data",
	    SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_DATA,
	    0, 0, 0, 0 },
	  { ".bss",
	    SEC_ALLOC,
	    0, 0, 0, 0 }
	};
      enum orphan_save_index
	{
	  orphan_text = 0,
	  orphan_idata,
	  orphan_rodata,
	  orphan_data,
	  orphan_bss
	};
      static int orphan_init_done = 0;
      struct orphan_save *place;
      lang_output_section_statement_type *after;
      etree_type *address;

      if (!orphan_init_done)
	{
	  struct orphan_save *ho;
	  for (ho = hold; ho < hold + sizeof (hold) / sizeof (hold[0]); ++ho)
	    if (ho->name != NULL)
	      {
		ho->os = lang_output_section_find (ho->name);
		if (ho->os != NULL && ho->os->flags == 0)
		  ho->os->flags = ho->flags;
	      }
	  orphan_init_done = 1;
	}

      /* Try to put the new output section in a reasonable place based
	 on the section name and section flags.  */

      place = NULL;
      if ((s->flags & SEC_ALLOC) == 0)
	;
      else if ((s->flags & (SEC_LOAD | SEC_HAS_CONTENTS)) == 0)
	place = &hold[orphan_bss];
      else if ((s->flags & SEC_READONLY) == 0)
	place = &hold[orphan_data];
      else if ((s->flags & SEC_CODE) == 0)
	{
	  place = (!strncmp (secname, ".idata\$", 7) ? &hold[orphan_idata]
						     : &hold[orphan_rodata]);
	}
      else
	place = &hold[orphan_text];

      after = NULL;
      if (place != NULL)
	{
	  if (place->os == NULL)
	    place->os = lang_output_section_find (place->name);
	  after = place->os;
	  if (after == NULL)
	    after = lang_output_section_find_by_flags (s, &place->os, NULL);
	  if (after == NULL)
	    /* *ABS* is always the first output section statement.  */
	    after = (&lang_output_section_statement.head
		     ->output_section_statement);
	}

      /* All sections in an executable must be aligned to a page boundary.
	 In a relocatable link, just preserve the incoming alignment; the
	 address is discarded by lang_insert_orphan in that case, anyway.  */
      address = exp_unop (ALIGN_K, exp_nameop (NAME, "__section_alignment__"));
      os = lang_insert_orphan (s, secname, constraint, after, place, address,
			       &add_child);
      if (link_info.relocatable)
	{
	  os->section_alignment = s->alignment_power;
	  os->bfd_section->alignment_power = s->alignment_power;
	}
    }

  /* If the section name has a '\$', sort it with the other '\$'
     sections.  */
  for (pl = &os->children.head; *pl != NULL; pl = &(*pl)->header.next)
    {
      lang_input_section_type *ls;
      const char *lname;

      if ((*pl)->header.type != lang_input_section_enum)
	continue;

      ls = &(*pl)->input_section;

      lname = bfd_get_section_name (ls->section->owner, ls->section);
      if (strchr (lname, '\$') != NULL
	  && (dollar == NULL || strcmp (orig_secname, lname) < 0))
	break;
    }

  if (add_child.head != NULL)
    {
      *add_child.tail = *pl;
      *pl = add_child.head;
    }

  return os;
}

static bfd_boolean
gld_${EMULATION_NAME}_open_dynamic_archive
  (const char *arch ATTRIBUTE_UNUSED,
   search_dirs_type *search,
   lang_input_statement_type *entry)
{
  static const struct
    {
      const char * format;
      bfd_boolean use_prefix;
    }
  libname_fmt [] =
    {
      /* Preferred explicit import library for dll's.  */
      { "lib%s.dll.a", FALSE },
      /* Alternate explicit import library for dll's.  */
      { "%s.dll.a", FALSE },
      /* "libfoo.a" could be either an import lib or a static lib.
          For backwards compatibility, libfoo.a needs to precede
          libfoo.dll and foo.dll in the search.  */
      { "lib%s.a", FALSE },
      /* The 'native' spelling of an import lib name is "foo.lib".  */
      { "%s.lib", FALSE },
#ifdef DLL_SUPPORT
      /* Try "<prefix>foo.dll" (preferred dll name, if specified).  */
      {	"%s%s.dll", TRUE },
#endif
      /* Try "libfoo.dll" (default preferred dll name).  */
      {	"lib%s.dll", FALSE },
      /* Finally try 'native' dll name "foo.dll".  */
      {  "%s.dll", FALSE },
      /* Note: If adding more formats to this table, make sure to check to
	 see if their length is longer than libname_fmt[0].format, and if
	 so, update the call to xmalloc() below.  */
      { NULL, FALSE }
    };
  static unsigned int format_max_len = 0;
  const char * filename;
  char * full_string;
  char * base_string;
  unsigned int i;


  if (! entry->flags.maybe_archive)
    return FALSE;

  filename = entry->filename;

  if (format_max_len == 0)
    /* We need to allow space in the memory that we are going to allocate
       for the characters in the format string.  Since the format array is
       static we only need to calculate this information once.  In theory
       this value could also be computed statically, but this introduces
       the possibility for a discrepancy and hence a possible memory
       corruption.  The lengths we compute here will be too long because
       they will include any formating characters (%s) in the strings, but
       this will not matter.  */
    for (i = 0; libname_fmt[i].format; i++)
      if (format_max_len < strlen (libname_fmt[i].format))
	format_max_len = strlen (libname_fmt[i].format);

  full_string = xmalloc (strlen (search->name)
			 + strlen (filename)
			 + format_max_len
#ifdef DLL_SUPPORT
			 + (pe_dll_search_prefix
			    ? strlen (pe_dll_search_prefix) : 0)
#endif
			 /* Allow for the terminating NUL and for the path
			    separator character that is inserted between
			    search->name and the start of the format string.  */
			 + 2);

  sprintf (full_string, "%s/", search->name);
  base_string = full_string + strlen (full_string);

  for (i = 0; libname_fmt[i].format; i++)
    {
#ifdef DLL_SUPPORT
      if (libname_fmt[i].use_prefix)
	{
	  if (!pe_dll_search_prefix)
	    continue;
	  sprintf (base_string, libname_fmt[i].format, pe_dll_search_prefix, filename);
	}
      else
#endif
	sprintf (base_string, libname_fmt[i].format, filename);

      if (ldfile_try_open_bfd (full_string, entry))
	break;
    }

  if (!libname_fmt[i].format)
    {
      free (full_string);
      return FALSE;
    }

  entry->filename = full_string;

  return TRUE;
}

static int
gld_${EMULATION_NAME}_find_potential_libraries
  (char *name, lang_input_statement_type *entry)
{
  return ldfile_open_file_search (name, entry, "", ".lib");
}

static char *
gld_${EMULATION_NAME}_get_script (int *isfile)
EOF
# Scripts compiled in.
# sed commands to quote an ld script as a C string.
sc="-f stringify.sed"

fragment <<EOF
{
  *isfile = 0;

  if (link_info.relocatable && config.build_constructors)
    return
EOF
sed $sc ldscripts/${EMULATION_NAME}.xu			>> e${EMULATION_NAME}.c
echo '  ; else if (link_info.relocatable) return'	>> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xr			>> e${EMULATION_NAME}.c
echo '  ; else if (!config.text_read_only) return'	>> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xbn			>> e${EMULATION_NAME}.c
echo '  ; else if (!config.magic_demand_paged) return'	>> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xn			>> e${EMULATION_NAME}.c
if test -n "$GENERATE_AUTO_IMPORT_SCRIPT" ; then
echo '  ; else if (link_info.pei386_auto_import == 1 && (MERGE_RDATA_V2 || link_info.pei386_runtime_pseudo_reloc != 2)) return'	>> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xa			>> e${EMULATION_NAME}.c
fi
echo '  ; else return'					>> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.x			>> e${EMULATION_NAME}.c
echo '; }'						>> e${EMULATION_NAME}.c

fragment <<EOF


struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =
{
  gld_${EMULATION_NAME}_before_parse,
  syslib_default,
  hll_default,
  gld_${EMULATION_NAME}_after_parse,
  gld_${EMULATION_NAME}_after_open,
  after_allocation_default,
  set_output_arch_default,
  ldemul_default_target,
  gld_${EMULATION_NAME}_before_allocation,
  gld_${EMULATION_NAME}_get_script,
  "${EMULATION_NAME}",
  "${OUTPUT_FORMAT}",
  gld_${EMULATION_NAME}_finish,
  NULL, /* Create output section statements.  */
  gld_${EMULATION_NAME}_open_dynamic_archive,
  gld_${EMULATION_NAME}_place_orphan,
  gld_${EMULATION_NAME}_set_symbols,
  NULL, /* parse_args */
  gld${EMULATION_NAME}_add_options,
  gld${EMULATION_NAME}_handle_option,
  gld_${EMULATION_NAME}_unrecognized_file,
  gld_${EMULATION_NAME}_list_options,
  gld_${EMULATION_NAME}_recognized_file,
  gld_${EMULATION_NAME}_find_potential_libraries,
  NULL	/* new_vers_pattern.  */
};
EOF
@


1.177
log
@	* configure.ac (mips*-*-bsd*, mips*-*-ultrix*, mips*-*-osf*)
	(mips*-*-ecoff*, mips*-*-pe*, mips*-*-irix* [v4 and earlier])
	(mips*-*-lnews*, mips*-*-riscos*): Add gas and ld to noconfigdirs.
	* configure: Regenerate.

gas/
	* NEWS: Note removal of ECOFF support.
	* doc/as.texinfo (--emulation): Update for the removal of MIPS ECOFF.
	* Makefile.am (TARG_ENV_HFILES): Remove config/te-lnews.h.
	(MULTI_CFILES): Remove config/e-mipsecoff.c.
	* Makefile.in: Regenerate.
	* configure.in: Remove MIPS ECOFF references.
	(mips-sony-bsd*, mips-*-bsd*, mips-*-lnews*-ecoff, mips-*-*-ecoff):
	Delete cases.
	(mips-*-irix5*-*, mips*-*-linux*-*, mips*-*-freebsd*)
	(mips*-*-kfreebsd*-gnu, mips-*-*-elf): Fold into...
	(mips-*-*): ...this single case.
	(mipsbecoff, mipslecoff, mipsecoff): Remove emulations.  Expect
	MIPS emulations to be e-mipself*.
	* configure: Regenerate.
	* configure.tgt (mips-sony-bsd*, mips-*-ultrix*, mips-*-osf*)
	(mips-*-ecoff*, mips-*-pe*, mips-*-irix*, ips-*-lnews*, mips-*-riscos*)
	(mips-*-sysv*): Remove coff and ecoff cases.
	* as.c (mipsbecoff, mipslecoff, mipsecoff): Remove.
	* ecoff.c: Remove reference to MIPS ECOFF.
	* config/e-mipsecoff.c, config/te-lnews.h: Delete files.
	* config/tc-mips.c (ECOFF_LITTLE_FORMAT): Delete.
	(RDATA_SECTION_NAME, mips_target_form): Remove COFF and ECOFF cases.
	(mips_hi_fixup): Tweak comment.
	(append_insn): Require a howto.
	(mips_after_parse_args): Remove OBJ_MAYBE_ECOFF code.

gas/testsuite/
	* gas/all/gas.exp: Remove reference to mips-ecoff.
	* gas/mips/branch-misc-1.d, gas/mips/branch-misc-2.d,
	gas/mips/branch-misc-2-64.d, gas/mips/branch-misc-2pic.d,
	gas/mips/branch-misc-2pic-64.d, gas/mips/branch-swap.d: Remove
	skips for mips-*-ecoff.

ld/
	* NEWS: Document the removal of MIPS ECOFF targets.
	* ld.texinfo (--gpsize=@@var{value}): Use MIPS ELF rather than
	MIPS ECOFF as an example of a target that supports small data.
	* ldmain.c (g_switch_value): Likewise.
	* configure.tgt (mips*-*-pe, mips*-dec-ultrix*, mips*-dec-osf*)
	(mips*-sgi-irix* [v4 and earlier], mips*el-*-ecoff*, mips*-*-ecoff*)
	(mips*-*-bsd*, mips*-*-lnews*): Remove cases.
	* Makefile.am (ALL_EMULATION_SOURCES): Remove emipsbig.c, emipsbsd.c,
	emipsidt.c, emipsidtl.c, emipslit.c, emipslnews.c and emipspe.c.
	(emipsbig.c, emipsbsd.c, emipsidt.c, emipsidtl.c, emipslit.c)
	(emipslnews.c, emipspe.c): Delete rules.
	* Makefile.in: Regenerate.
	* emulparams/mipsbig.sh, emulparams/mipsbsd.sh, emulparams/mipsidt.sh,
	emulparams/mipsidtl.sh, emulparams/mipslit.sh, emulparams/mipslnews.sh,
	emulparams/mipspe.sh, emultempl/mipsecoff.em: Delete.
	* emultempl/m68kcoff.em: Update comment to say that MIPS ECOFF support
	has now been removed.
	* emultempl/pe.em: Remove TARGET_IS_mipspe checks.
@
text
@d244 2
d247 1
a247 1
					(OPTION_LARGE_ADDRESS_AWARE + 1)
d337 1
d477 2
d835 3
@


1.176
log
@	* emultempl/pe.em [cygwin]: Do not merge rdata with v2
	psuedo-relocs.
@
text
@a94 1
    || defined(TARGET_IS_mipspe) \
a1760 3
#ifdef TARGET_IS_mipspe
  pe_dll_id_target ("pei-mips");
#endif
d1825 1
a1825 1
#if !defined(TARGET_IS_shpe) && !defined(TARGET_IS_mipspe)
d1834 1
a1834 1
#if defined(TARGET_IS_shpe) || defined(TARGET_IS_mipspe)
@


1.175
log
@Remove trailing white spaces in ld

	* deffilep.y: Remove trailing white spaces.
	* elf-hints-local.h: Likewise.
	* ldexp.c: Likewise.
	* ldlang.h: Likewise.
	* ldmisc.c: Likewise.
	* ldwrite.c: Likewise.
	* pe-dll.c: Likewise.
	* emulparams/criself.sh: Likewise.
	* emulparams/crislinux.sh: Likewise.
	* emulparams/elf32_tic6x_le.sh: Likewise.
	* emulparams/elf32bmipn32-defs.sh: Likewise.
	* emulparams/elf32mb_linux.sh: Likewise.
	* emulparams/elf32mep.sh: Likewise.
	* emulparams/elf32microblaze.sh: Likewise.
	* emulparams/elf32ppc.sh: Likewise.
	* emulparams/elf64_s390.sh: Likewise.
	* emulparams/elf64alpha.sh: Likewise.
	* emulparams/elf_s390.sh: Likewise.
	* emulparams/elf_x86_64.sh: Likewise.
	* emulparams/tic80coff.sh: Likewise.
	* emultempl/aix.em: Likewise.
	* emultempl/avrelf.em: Likewise.
	* emultempl/cr16elf.em: Likewise.
	* emultempl/pe.em: Likewise.
	* emultempl/pep.em: Likewise.
	* emultempl/spuelf.em: Likewise.
	* emultempl/tic6xdsbt.em: Likewise.
@
text
@d11 1
a11 3
/* Copyright 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
   2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012
   Free Software Foundation, Inc.
d172 3
d178 1
a178 1
    default_merge_rdata=1
d280 3
a282 2
  static const struct option xtra_long[] = {
    /* PE options */
@


1.174
log
@	bfd/
	* elflink.c (bfd_elf_record_link_assignment): Remove --defsym
	symbols special case.

	ld/
	* ldexp.h (etree_union): Add defsym member to the assign member
	structure.
	(exp_assign): Add hidden argument to prototype.
	* ldexp.c (exp_fold_tree_1): Use the defsym member to handle
	--defsym symbols.
	(exp_assop): Add defsym argument, initialize the defsym member
	of the assign structure.
	(exp_assign): Handle hidden symbols.
	(exp_defsym): Update to use the defsym argument to exp_assop.
	(exp_provide): Update to handle the defsym argument to exp_assop.
	* ldlex.l (HIDDEN): New token.
	* ldgram.y (HIDDEN): Likewise.
	(assignment, section): Update calls to exp_assign.
	* ldctor.c (ldctor_build_sets): Likewise.
	* mri.c (mri_format): Likewise.
	* ldlang.c (lang_insert_orphan, lang_leave_overlay): Likewise.
	(open_input_bfds): Remove --defsym symbols special case.
	* emultempl/beos.em (gld_${EMULATION_NAME}_set_symbols): Update
	call to exp_assign.
	* emultempl/pe.em (gld_${EMULATION_NAME}_set_symbols): Likewise.
	* emultempl/pep.em (gld_${EMULATION_NAME}_set_symbols): Likewise.
	* emultempl/spuelf.em (spu_place_special_section): Likewise.
	* emultempl/xtensaelf.em (ld_xtensa_insert_page_offsets):
	Likewise.
	* ld.texinfo (Assigning Values to Symbols): Add HIDDEN.
	(HIDDEN): New subsection.
@
text
@d264 1
a264 1
#define OPTION_NO_ISOLATION		(OPTION_NX_COMPAT + 1) 
d1207 1
a1207 1
static void 
@


1.173
log
@
Add support for PowerPC VLE.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>

	* NEWS:  Mention PowerPC VLE port.

2012-05-14  James Lemke <jwlemke@@codesourcery.com>
	    Catherine Moore  <clm@@codesourcery.com>

	bfd/
	* bfd.c (bfd_lookup_section_flags): Add section parm.
	* ecoff.c (bfd_debug_section): Remove flag_info initializer.
	* elf-bfd.h (bfd_elf_section_data): Move in section_flag_info.
	(bfd_elf_lookup_section_flags): Add section parm.
	* elf32-ppc.c (is_ppc_vle): New function.
	(ppc_elf_modify_segment_map): New function.
	(elf_backend_modify_segment_map): Define.
	(has_vle_insns): New define.
	* elf32-ppc.h (ppc_elf_modify_segment_map): Declare.
	* elflink.c (bfd_elf_lookup_section_flags): Add return value & parm.
	Move in logic to omit / include a section.
	* libbfd-in.h (bfd_link_info): Add section parm.
	(bfd_generic_lookup_section_flags): Likewise.
	* reloc.c (bfd_generic_lookup_section_flags): Likewise.
	* section.c (bfd_section): Move out section_flag_info.
	(BFD_FAKE_SECTION): Remove flag_info initializer.
	* targets.c (_bfd_lookup_section_flags): Add section parm.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>

	bfd/
	* archures.c (bfd_mach_ppc_vle): New.
	* bfd-in2.h: Regenerated.
	* cpu-powerpc.c (bfd_powerpc_archs): New entry for vle.
	* elf32-ppc.c (split16_format_type): New enumeration.
	(ppc_elf_vle_split16): New function.
	(HOWTO): Add entries for R_PPC_VLE relocations.
	(ppc_elf_reloc_type_lookup): Handle PPC_VLE relocations.
	(ppc_elf_section_flags): New function.
	(ppc_elf_lookup_section_flags): New function.
	(ppc_elf_section_processing): New function.
	(ppc_elf_check_relocs): Handle PPC_VLE relocations.
	(ppc_elf_relocation_section): Likewise.
	(elf_backend_lookup_section_flags_hook): Define.
	(elf_backend_section_flags): Define.
	(elf_backend_section_processing): Define.
	* elf32-ppc.h (ppc_elf_section_processing): Declare.
	* libbfd.h: Regenerated.
	* reloc.c (BFD_RELOC_PPC_VLE_REL8, BFD_RELOC_PPC_VLE_REL15,
	BFD_RELOC_PPC_VLE_REL24, BFD_RELOC_PPC_VLE_LO16A,
	BFD_RELOC_PPC_VLE_LO16D, BFD_RELOC_PPC_VLE_HI16A,
	BFD_RELOC_PPC_VLE_HI16D, BFD_RELOC_PPC_VLE_HA16A,
	BFD_RELOC_PPC_VLE_HA16D, BFD_RELOC_PPC_VLE_SDA21,
	BFD_RELOC_PPC_VLE_SDA21_LO, BFD_RELOC_PPC_VLE_SDAREL_LO16A,
	BFD_RELOC_PPC_VLE_SDAREL_LO16D, BFD_RELOC_PPC_VLE_SDAREL_HI16A,
	BFD_RELOC_PPC_VLE_SDAREL_HI16D, BFD_RELOC_PPC_VLE_SDAREL_HA16A,
	BFD_RELOC_PPC_VLE_SDAREL_HA16D): New bfd relocations.

2012-05-14  James Lemke  <jwlemke@@codesourcery.com>

	gas/
	* config/tc-ppc.c (insn_validate): New func of existing code to call..
	(ppc_setup_opcodes): ..from 2 places here.
	Revise for second (VLE) opcode table.
	Add #ifdef'd code to print opcode tables.

2012-05-14  James Lemke  <jwlemke@@codesourcery.com>

	gas/
	* config/tc-ppc.c (ppc_setup_opcodes): Allow out-of-order
	for the VLE conditional branches.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>
	    Rhonda Wittels  <rhonda@@codesourcery.com>

	gas/
	* config/tc-ppc.c (PPC_VLE_SPLIT16A): New macro.
	(PPC_VLE_SPLIT16D): New macro.
	(PPC_VLE_LO16A): New macro.
	(PPC_VLE_LO16D): New macro.
	(PPC_VLE_HI16A): New macro.
	(PPC_VLE_HI16D): New macro.
	(PPC_VLE_HA16A): New macro.
	(PPC_VLE_HA16D): New macro.
	(PPC_APUINFO_VLE): New definition.
	(md_chars_to_number): New function.
	(md_parse_option): Check for combinations of little
	endian and -mvle.
	(md_show_usage): Document -mvle.
	(ppc_arch): Recognize VLE.
	(ppc_mach): Recognize bfd_mach_ppc_vle.
	(ppc_setup_opcodes): Print the opcode table if
	* config/tc-ppc.h (ppc_frag_check): Declare.
	* doc/c-ppc.texi: Document -mvle.
	* NEWS:  Mention PowerPC VLE port.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>

	gas/
	* config/tc-ppc.h (ppc_dw2_line_min_insn_length): Declare.
	(DWARF2_LINE_MIN_INSN_LENGTH): Redefine.
	* config/tc-ppc.c (ppc_dw2_line_min_insn_length): New.
	* dwarf2dbg.c (scale_addr_delta): Handle values of 1
	for DWARF2_LINE_MIN_INSN_LENGTH.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>
	    Rhonda Wittels  <rhonda@@codesourcery.com>

	gas/testsuite/
	* gas/ppc/ppc.exp: Run new tests.
	* gas/ppc/vle-reloc.d: New test.
	* gas/ppc/vle-reloc.s: New test.
	* gas/ppc/vle-simple-1.d: New test.
	* gas/ppc/vle-simple-1.s: New test.
	* gas/ppc/vle-simple-2.d: New test.
	* gas/ppc/vle-simple-2.s: New test.
	* gas/ppc/vle-simple-3.d: New test.
	* gas/ppc/vle-simple-3.s: New test.
	* gas/ppc/vle-simple-4.d: New test.
	* gas/ppc/vle-simple-4.s: New test.
	* gas/ppc/vle-simple-5.d: New test.
	* gas/ppc/vle-simple-5.s: New test.
	* gas/ppc/vle-simple-6.d: New test.
	* gas/ppc/vle-simple-6.s: New test.
	* gas/ppc/vle.d: New test.
	* gas/ppc/vle.s: New test.

2012-05-14  James Lemke  <jwlemke@@codesourcery.com>
	include/elf/
	* ppc.h (SEC_PPC_VLE): Remove.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>
	    James Lemke  <jwlemke@@codesourcery.com>

	include/elf/
	* ppc.h (R_PPC_VLE_REL8): New reloction.
	(R_PPC_VLE_REL15): Likewise.
	(R_PPC_VLE_REL24): Likewise.
	(R_PPC_VLE_LO16A): Likewise.
	(R_PPC_VLE_LO16D): Likewise.
	(R_PPC_VLE_HI16A): Likewise.
	(R_PPC_VLE_HI16D): Likewise.
	(R_PPC_VLE_HA16A): Likewise.
	(R_PPC_VLE_HA16D): Likewise.
	(R_PPC_VLE_SDA21): Likewise.
	(R_PPC_VLE_SDA21_LO): Likewise.
	(R_PPC_VLE_SDAREL_LO16A): Likewise.
	(R_PPC_VLE_SDAREL_LO16D): Likewise.
	(R_PPC_VLE_SDAREL_HI16A): Likewise.
	(R_PPC_VLE_SDAREL_HI16D): Likewise.
	(R_PPC_VLE_SDAREL_HA16A): Likewise.
	(R_PPC_VLE_SDAREL_HA16D): Likewise.
	(SEC_PPC_VLE): Remove.
	(PF_PPC_VLE): New program header flag.
	(SHF_PPC_VLE): New section header flag.
	(vle_opcodes, vle_num_opcodes): New.
	(VLE_OP): New macro.
	(VLE_OP_TO_SEG): New macro.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>
	    Rhonda Wittels  <rhonda@@codesourcery.com>

	include/opcode/
	* ppc.h (PPC_OPCODE_VLE): New definition.
	(PPC_OP_SA): New macro.
	(PPC_OP_SE_VLE): New macro.
	(PPC_OP): Use a variable shift amount.
	(powerpc_operand): Update comments.
	(PPC_OPSHIFT_INV): New macro.
	(PPC_OPERAND_CR): Replace with...
	(PPC_OPERAND_CR_BIT): ...this and
	(PPC_OPERAND_CR_REG): ...this.

2012-05-14  James Lemke  <jwlemke@@codesourcery.com>

	ld/
	* ldlang.c (walk_wild_consider_section): Don't copy section_flag_list.
	Pass it to callback.
	(walk_wild_section_general): Pass section_flag_list to callback.
	(lang_add_section): Add sflag_list parm.
	Move out logic to keep / omit a section & call bfd_lookup_section_flags.
	(output_section_callback_fast): Add sflag_list parm.
	Add new parm to lang_add_section calls.
	(output_section_callback): Likewise.
	(check_section_callback): Add sflag_list parm.
	(lang_place_orphans): Add new parm to lang_add_section calls.
	(gc_section_callback): Add sflag_list parm.
	(find_relro_section_callback): Likewise.
	* ldlang.h (callback_t): Add flag_info parm.
	(lang_add_section): Add sflag_list parm.
	* emultempl/armelf.em (elf32_arm_add_stub_section):
	Add lang_add_section parm.
	* emultempl/beos.em (gld*_place_orphan): Likewise.
	* emultempl/elf32.em (gld*_place_orphan): Likewise.
	* emultempl/hppaelf.em (hppaelf_add_stub_section): Likewise.
	* emultempl/m68hc1xelf.em (m68hc11elf_add_stub_section): Likewise.
	* emultempl/mipself.em (mips_add_stub_section): Likewise.
	* emultempl/mmo.em (mmo_place_orphan): Likewise.
	* emultempl/pe.em (gld_*_place_orphan): Likewise.
	* emultempl/pep.em (gld_*_place_orphan): Likewise.
	* emultempl/ppc64elf.em (ppc_add_stub_section): Likewise.
	* emultempl/spuelf.em (spu_place_special_section): Likewise.
	* emultempl/vms.em (vms_place_orphan): Likewise.

2012-05-14  James Lemke  <jwlemke@@codesourcery.com>

	ld/testsuite/
	* ld-powerpc/powerpc.exp: Create ppceabitests.
	* ld-powerpc/vle-multiseg.s: New.
	* ld-powerpc/vle-multiseg-1.d: New.
	* ld-powerpc/vle-multiseg-1.ld: New.
	* ld-powerpc/vle-multiseg-2.d: New.
	* ld-powerpc/vle-multiseg-2.ld: New.
	* ld-powerpc/vle-multiseg-3.d: New.
	* ld-powerpc/vle-multiseg-3.ld: New.
	* ld-powerpc/vle-multiseg-4.d: New.
	* ld-powerpc/vle-multiseg-4.ld: New.
	* ld-powerpc/vle-multiseg-5.d: New.
	* ld-powerpc/vle-multiseg-5.ld: New.
	* ld-powerpc/vle-multiseg-6.d: New.
	* ld-powerpc/vle-multiseg-6.ld: New.
	* ld-powerpc/vle-multiseg-6a.s: New.
	* ld-powerpc/vle-multiseg-6b.s: New.
	* ld-powerpc/vle-multiseg-6c.s: New.
	* ld-powerpc/vle-multiseg-6d.s: New.
	* ld-powerpc/powerpc.exp: Run new tests.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>

	ld/
	* NEWS:  Mention PowerPC VLE port.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>

	ld/testsuite/
	* ld-powerpc/apuinfo.rd: Update for VLE.
	* ld-powerpc/vle-reloc-1.d: New.
	* ld-powerpc/vle-reloc-1.s: New.
	* ld-powerpc/vle-reloc-2.d: New.
	* ld-powerpc/vle-reloc-2.s: New.
	* ld-powerpc/vle-reloc-3.d: New.
	* ld-powerpc/vle-reloc-3.s: New.
	* ld-powerpc/vle-reloc-def-1.s: New.
	* ld-powerpc/vle-reloc-def-2.s: New.
	* ld-powerpc/vle-reloc-def-3.s: New.

2012-05-14  James Lemke  <jwlemke@@codesourcery.com>

	opcodes/
	* ppc-dis.c (get_powerpc_dialect): Use is_ppc_vle.
	(PPC_OPCD_SEGS, VLE_OPCD_SEGS): New defines.
	(vle_opcd_indices): New array.
	(lookup_vle): New function.
	(disassemble_init_powerpc): Revise for second (VLE) opcode table.
	(print_insn_powerpc): Likewise.
	* ppc-opc.c: Likewise.

2012-05-14  Catherine Moore  <clm@@codesourcery.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>
	    Rhonda Wittels  <rhonda@@codesourcery.com>
	    Nathan Froyd <froydnj@@codesourcery.com>

	opcodes/
	* ppc-opc.c (insert_arx, extract_arx): New functions.
	(insert_ary, extract_ary): New functions.
	(insert_li20, extract_li20): New functions.
	(insert_rx, extract_rx): New functions.
	(insert_ry, extract_ry): New functions.
	(insert_sci8, extract_sci8): New functions.
	(insert_sci8n, extract_sci8n): New functions.
	(insert_sd4h, extract_sd4h): New functions.
	(insert_sd4w, extract_sd4w): New functions.
	(insert_vlesi, extract_vlesi): New functions.
	(insert_vlensi, extract_vlensi): New functions.
	(insert_vleui, extract_vleui): New functions.
	(insert_vleil, extract_vleil): New functions.
 	(BI_MASK, BB_MASK, BT): Use PPC_OPERAND_CR_BIT.
 	(BI16, BI32, BO32, B8): New.
	(B15, B24, CRD32, CRS): New.
 	(CRD, OBF, BFA, CR, CRFS): Use PPC_OPERAND_CR_REG.
	(DB, IMM20, RD, Rx, ARX, RY, RZ): New.
	(ARY, SCLSCI8, SCLSCI8N, SE_SD, SE_SDH): New.
	(SH6_MASK): Use PPC_OPSHIFT_INV.
	(SI8, UI5, OIMM5, UI7, BO16): New.
	(VLESIMM, VLENSIMM, VLEUIMM, VLEUIMML): New.
	(XT6, XA6, XB6, XB6S, XC6): Use PPC_OPSHIFT_INV.
	(ALLOW8_SPRG): New.
	(insert_sprg, extract_sprg): Check ALLOW8_SPRG.
	(OPVUP, OPVUP_MASK OPVUP): New
	(BD8, BD8_MASK, BD8IO, BD8IO_MASK): New.
	(EBD8IO, EBD8IO1_MASK, EBD8IO2_MASK, EBD8IO3_MASK): New.
	(BD15, BD15_MASK, EBD15, EBD15_MASK, EBD15BI, EBD15BI_MASK): New.
	(BD24,BD24_MASK, C_LK, C_LK_MASK, C, C_MASK): New.
 	(IA16, IA16_MASK, I16A, I16A_MASK, I16L, I16L_MASK): New.
	(IM7, IM7_MASK, LI20, LI20_MASK, SCI8, SCI8_MASK): New.
	(SCI8BF, SCI8BF_MASK, SD4, SD4_MASK): New.
	(SE_IM5, SE_IM5_MASK): New.
	(SE_R, SE_R_MASK, SE_RR, SE_RR_MASK): New.
	(EX, EX_MASK, BO16F, BO16T, BO32F, BO32T): New.
	(BO32DNZ, BO32DZ): New.
	(NO371, PPCSPE, PPCISEL, PPCEFS, MULHW): Include PPC_OPCODE_VLE.
	(PPCVLE): New.
	(powerpc_opcodes): Add new VLE instructions.  Update existing
	instruction to include PPCVLE if supported.
	* ppc-dis.c (ppc_opts): Add vle entry.
	(get_powerpc_dialect): New function.
	(powerpc_init_dialect): VLE support.
	(print_insn_big_powerpc): Call get_powerpc_dialect.
	(print_insn_little_powerpc): Likewise.
	(operand_value_powerpc): Handle negative shift counts.
	(print_insn_powerpc): Handle 2-byte instruction lengths.
@
text
@d947 1
a947 1
					    exp_intop (val)));
d1724 3
a1726 2
		image_base_statement->exp = exp_assign ("__image_base__",
							exp_intop (pe.ImageBase));
@


1.173.2.1
log
@bfd/
2012-08-09  Maciej W. Rozycki  <macro@@codesourcery.com>

	* elfxx-mips.c (LA25_LUI_MICROMIPS_1, LA25_LUI_MICROMIPS_2):
	Remove macros, folding them into...
	(LA25_LUI_MICROMIPS): ... this new macro.
	(LA25_J_MICROMIPS_1, LA25_J_MICROMIPS_2): Likewise into...
	(LA25_J_MICROMIPS): ... this new macro.
	(LA25_ADDIU_MICROMIPS_1, LA25_ADDIU_MICROMIPS_2): Likewise
	into...
	(LA25_ADDIU_MICROMIPS): ... this new macro.
	(bfd_put_micromips_32, bfd_get_micromips_32): New functions.
	(mips_elf_create_la25_stub): Use them.
	(check_br32_dslot, check_br32, check_relocated_bzc): Likewise.
	(_bfd_mips_elf_relax_section): Likewise.

gas/
	* config/tc-mips.c (NO_ISA_COP, COP_INSN): Remove macros.
	(is_opcode_valid): Remove coprocessor instruction exclusions.
	Replace OPCODE_IS_MEMBER with opcode_is_member.
	(is_opcode_valid_16): Replace OPCODE_IS_MEMBER with
	opcode_is_member.
	(macro): Remove coprocessor instruction exclusions.

gas/
	* gas/mips/mips.exp: Set has_newabi for all Linux targets.
	* gas/mips/cfi-n64-1.d: Adjust for targets that do not infer the
	ISA from the ABI.
	* gas/mips/elf-rel-got-n32.d: Likewise.
	* gas/mips/elf-rel-got-n64.d: Likewise.
	* gas/mips/elf-rel-xgot-n32.d: Likewise.
	* gas/mips/elf-rel-xgot-n64.d: Likewise.
	* gas/mips/elf-rel18.d: Likewise.
	* gas/mips/elf-rel28-n32.d: Likewise.
	* gas/mips/elf-rel28-n64.d: Likewise.
	* gas/mips/jal-newabi.d: Likewise.
	* gas/mips/ldstla-n64-shared.d: Likewise.
	* gas/mips/ldstla-n64-sym32.d: Likewise.
	* gas/mips/ldstla-n64.d: Likewise.
	* gas/mips/macro-warn-1-n32.d: Likewise.
	* gas/mips/macro-warn-2-n32.d: Likewise.
	* gas/mips/n32-consec.d: Likewise.

include/
2012-08-13  Richard Sandiford  <rdsandiford@@googlemail.com>
            Maciej W. Rozycki  <macro@@codesourcery.com>

	* mips.h (mips_opcode): Add the exclusions field.
	(OPCODE_IS_MEMBER): Remove macro.
	(cpu_is_member): New inline function.
	(opcode_is_member): Likewise.

ld/
	* emulparams/elf32bmip.sh: Make _gp hidden.
	* emulparams/elf32bmipn32-defs.sh: Likewise.
	* emulparams/elf32mipswindiss.sh: Likewise.
	* scripttempl/mips.sc: Likewise.

ld/
2012-08-28  Maciej W. Rozycki  <macro@@codesourcery.com>

	* ld-elf/export-class.sd: New test.
	* ld-elf/export-class.vd: New test.
	* ld-elf/export-class-def.s: New test source.
	* ld-elf/export-class-dep.s: New test source.
	* ld-elf/export-class-lib.s: New test source.
	* ld-elf/export-class-ref.s: New test source.
	* ld-elf/export-class-lib.ver: New test version script.
	* ld-elf/export-class.exp: New test script.
	* ld-arm/arm-export-class.rd: New test.
	* ld-arm/arm-export-class.xd: New test.
	* ld-arm/export-class.exp: New test script.
	* ld-i386/i386-export-class.rd: New test.
	* ld-i386/i386-export-class.xd: New test.
	* ld-i386/export-class.exp: New test script.
	* ld-mips-elf/mips-32-export-class.rd: New test.
	* ld-mips-elf/mips-32-export-class.xd: New test.
	* ld-mips-elf/mips-64-export-class.rd: New test.
	* ld-mips-elf/mips-64-export-class.xd: New test.
	* ld-mips-elf/export-class.exp: New test script.
	* ld-powerpc/powerpc-32-export-class.rd: New test.
	* ld-powerpc/powerpc-32-export-class.xd: New test.
	* ld-powerpc/powerpc-64-export-class.rd: New test.
	* ld-powerpc/powerpc-64-export-class.xd: New test.
	* ld-powerpc/export-class.exp: New test script.
	* ld-x86-64/x86-64-64-export-class.rd: New test.
	* ld-x86-64/x86-64-x32-export-class.rd: New test.
	* ld-x86-64/export-class.exp: New test script.

opcodes/
2012-08-14  Maciej W. Rozycki  <macro@@codesourcery.com>

	* mips-dis.c (print_insn_args): Add GET_OP and GET_OP_S local
	macros, use local variables for info struct member accesses,
	update the type of the variable used to hold the instruction
	word.
	(print_insn_mips, print_mips16_insn_arg): Likewise.
	(print_insn_mips16): Add GET_OP and GET_OP_S local macros, use
	local variables for info struct member accesses.
	(print_insn_micromips): Add GET_OP_S local macro.
	(_print_insn_mips): Update the type of the variable used to hold
	the instruction word.
@
text
@d947 1
a947 1
					    exp_intop (val), FALSE));
d1724 2
a1725 3
		image_base_statement->exp
		  = exp_assign ("__image_base__", exp_intop (pe.ImageBase),
				FALSE);
@


1.172
log
@	* ldlang.h (struct lang_input_statement_flags): New, extract from..
	(lang_input_statement_type): ..here.  New field "flags".
	(input_flags): Declare.
	(missing_file): Delete.
	* ldmain.h (whole_archive): Delete.
	(add_DT_NEEDED_for_regular, add_DT_NEEDED_for_dynamic): Delete.
	* ld.h (ld_config_type <dynamic_link>): Delete.
	* ldmain.c (whole_archive): Delete.
	(add_DT_NEEDED_for_regular, add_DT_NEEDED_for_dynamic): Delete.
	* ldlang.c (missing_file, ldlang_sysrooted_script): Delete.
	(input_flags): New variable.  Replace all uses of config.dynamic_link,
	missing_file, ldlang_sysrooted_script, whole_archive,
	add_DT_NEEDED_for_regular and add_DT_NEEDED_for_dynamic with fields
	from here.
	* ldfile.c: Likewise.
	* ldgram.y: Likewise.
	* ldmain.c: Likewise.
	* ldwrite.c: Likewise.
	* lexsup.c: Likewise.
	* plugin.c: Likewise.
	* emultempl/aix.em: Likewise.
	* emultempl/armelf.em: Likewise.
	* emultempl/elf32.em: Likewise.
	* emultempl/hppaelf.em: Likewise.
	* emultempl/linux.em: Likewise.
	* emultempl/pe.em: Likewise.
	* emultempl/pep.em: Likewise.
	* emultempl/ppc64elf.em: Likewise.
	* emultempl/scoreelf.em: Likewise.
	* emultempl/spuelf.em: Likewise.
	* emultempl/sunos.em: Likewise.
	* emultempl/vms.em: Likewise.
	* ldlang.c (new_afile): Use memset to init zero fields.
	(load_symbols): Simplify save and restore of flags around command
	file processing.
	* ldfile.c (is_sysrooted_pathname): Tidy.
@
text
@d1918 1
a1918 1
	    lang_add_section (&add_child, s, os);
d1932 1
a1932 1
      lang_add_section (&match_by_name->children, s, match_by_name);
@


1.171
log
@	* ldlang.c (sort_def_symbol, lang_one_common): Don't handle
	warning symbols here.
	* emultempl/pe.em (pr_sym): Remove redundant test.
	* emultempl/pep.em (pr_sym): Likewise.
@
text
@d12 2
a13 1
   2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.
d168 1
a168 1
  config.dynamic_link = TRUE;
d2097 1
a2097 1
  if (! entry->maybe_archive)
@


1.170
log
@	PR ld/12614
	* emultempl/pe.em (_after_open): Correctly check whether symbol is
	in undef list.
@
text
@d1200 1
a1200 2
  if (pe_dll_extra_pe_debug)
    printf ("+%s\n", h->string);
@


1.169
log
@[PATCH] Fix PE-COFF bug in orphan section alignment handling.

ld/ChangeLog:

2011-03-10  Dave Korn  <dave.korn.cygwin@@gmail.com>

	* emultempl/pe.em (gld_${EMULATION_NAME}_place_orphan): Preserve
	alignment of input sections when creating orphan output sections
	during relocatable link.
	* emultempl/pep.em (gld_${EMULATION_NAME}_place_orphan): Likewise.
@
text
@d1593 4
a1596 2
			if (blhe && (blhe->type == bfd_link_hash_defined)
			    && (blhe->u.undef.next == NULL))
@


1.168
log
@2011-02-28  Kai Tietz  <kai.tietz@@onevision.com>

	* emultempl/beos.em (sort_by_file_name): Use filename_(n)cmp.
	* emultempl/elf32.em (gld${EMULATION_NAME}_vercheck):
	Likewise.
	(gld${EMULATION_NAME}_stat_needed): Likewise.
	(gld${EMULATION_NAME}_check_needed): Likewise.
	* emultempl/pe.em (gld_${EMULATION_NAME}_after_open): Likewise.
	(gld_${EMULATION_NAME}_unrecognized_file): Likewise.
	* emultempl/pep.em (gld_${EMULATION_NAME}_after_open): Likewise.
	(gld_${EMULATION_NAME}_unrecognized_file): Likewise.
	* ldfile.c (ldfile_open_file): Likewise.
	* ldlang.c (wild_sort): Likewise.
	(lookup_name): Likewise.
	(check_excluded_libs): Likewise.
	* ldmisc.c (vfinfo): Likewise.
	* pe-dll.c (libnamencmp): Likewise.
	(auto_export): Likewise.
	(pe_dll_generate_implib): Likewise.
	* testplug.c (onclaim_file): Likewise.
@
text
@d2012 3
a2014 1
      /* All sections in an executable must be aligned to a page boundary.  */
d2018 5
@


1.167
log
@	* ldmain.c (main): Flush stdout before and stderr after printing
	message.
	* ldmisc.c (einfo): Similarly.
	* plugin.c (message): Likewise.
	* emultempl/ppc64elf.em: Likewise.
	* emultempl/xtensaelf.em: Likewise.
	* emulparams/elf32mcore.sh: Use einfo rather than printf.
	* emultempl/beos.em: Likewise.
	* emultempl/pe.em: Likewise.
	* emultempl/pep.em: Likewise.
@
text
@d59 1
d1409 3
a1411 2
			if (strcmp (bfd_get_filename (is->the_bfd->my_archive),
				    other_bfd_filename) == 0)
d1465 1
a1465 1
		    if (pnt != NULL && strcmp (pnt, ".dll") == 0)
d1482 1
a1482 1
			if (pnt != NULL && strcmp (pnt, ".obj") == 0)
d1485 2
a1486 2
			if (strcmp (is3->the_bfd->filename,
				    is2->the_bfd->filename))
d1500 1
a1500 1
	    if (is_ms_arch && (strcmp (pnt, ".dll") == 0))
d1673 1
a1673 1
  if (strcmp (ext, ".def") == 0 || strcmp (ext, ".DEF") == 0)
@


1.166
log
@	PR ld/12356
	* ldexp.h (exp_assop): Delete.
	(exp_assign, exp_defsym): Declare.
	* ldexp.c (exp_assop): Make static, handle all assignment variations.
	(exp_assign, exp_defsym): New functions.
	(exp_provide): Use exp_assop.
	* ldgram.y (defsym_expr): Use exp_defsym.
	* ldctor.c, * ldgram.y, * ldlang.c, * mri.c, * emultempl/beos.em,
	* emultempl/pe.em, * emultempl/pep.em, * emultempl/spuelf.em,
	* emultempl/xtensaelf.em: Update exp_assop -> exp_assign.
@
text
@d691 1
a691 6
	{
	  /* xgettext:c-format */
	  fprintf (stderr, _("%s: Can't open base file %s\n"),
		   program_name, optarg);
	  xexit (1);
	}
@


1.165
log
@	* ld.texinfo (Expression Section): Describe treatment of numbers
	and absolute symbols.
	* ldemul.c (after_open_default): Look up __ld_compatibility.
	* ldexp.c (fold_name): Convert absolute symbols to numbers when
	inside output section definitions, or when __ld_compatibility >= 221.
	(exp_fold_tree_1): Convert numbers to absolute when not in output
	section definition and __ld_compatibility < 221.  Don't always
	convert values outside an output section definition to absolute.
	* ldexp.h (uses_defined): Comment.
	* ldlang.c (ld_compatibility): New variable.
	* ldlang.h (ld_compatibility): Declare.
	* emultempl/aix.em, * emultempl/armcoff.em, * emultempl/beos.em,
	* emultempl/elf32.em, * emultempl/genelf.em, * emultempl/lnk960.em,
	* emultempl/m68kcoff.em, * emultempl/mmo.em, * emultempl/pe.em,
	* emultempl/pep.em, * emultempl/sunos.em, * emultempl/z80.em: Call
	after_open_default from after_open function.
@
text
@d12 1
a12 1
   2005, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
d949 2
a950 2
      rv = lang_add_assignment (exp_assop ('=', GET_INIT_SYMBOL_NAME (j),
					   exp_intop (val)));
d1725 2
a1726 2
		image_base_statement->exp = exp_assop ('=', "__image_base__",
						       exp_intop (pe.ImageBase));
@


1.164
log
@Replace is_archive with maybe_archive.

2010-12-05  H.J. Lu  <hongjiu.lu@@intel.com>

	* ldfile.c (ldfile_open_file_search): Check maybe_archive instead
	of is_archive.
	* emultempl/aix.em: Likewise.
	* emultempl/elf32.em: Likewise.
	* emultempl/linux.em: Likewise.
	* emultempl/pe.em: Likewise.
	* emultempl/pep.em: Likewise.
	* emultempl/sunos.em: Likewise.
	* emultempl/vms.em: Likewise.

	* ldlang.c (new_afile): Set maybe_archive instead of is_archive..

	* ldlang.h (lang_input_statement_struct): Replace is_archive
	with maybe_archive.
@
text
@d1222 2
@


1.163
log
@	* emultempl/pe.em (_list_options): Correct typo.
	* emultempl/pep.em (_list_options): Likewise.
@
text
@d2089 1
a2089 1
  if (! entry->is_archive)
@


1.162
log
@2010-09-22  Kai Tietz  <kai.tietz@@onevision.com>

        * emultempl/pe.em (gld_${EMULATION_NAME}_place_orphan): Add
        idata to orphan set.
        * emultempl/pep.em: Likewise.
        * scripttempl/armcoff.sc: Separate idata
        and add __IAT_start__ and __IAT_end__ labels.
        * scripttempl/pe.sc: Likewise.
        * scripttempl/pep.sc: Likewise.
@
text
@d12 1
a12 1
   2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.
d458 1
a458 1
  fprintf (file, _("  --enable-auto-import               Do sophistcated linking of _sym to\n\
@


1.162.2.1
log
@backport from mainline
@
text
@d12 1
a12 1
   2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.
d691 6
a696 1
	einfo (_("%F%P: cannot open base file %s\n"), optarg);
d949 2
a950 2
      rv = lang_add_assignment (exp_assign (GET_INIT_SYMBOL_NAME (j),
					    exp_intop (val)));
a1221 2
  after_open_default ();

d1723 2
a1724 2
		image_base_statement->exp = exp_assign ("__image_base__",
							exp_intop (pe.ImageBase));
d2089 1
a2089 1
  if (! entry->maybe_archive)
@


1.162.2.2
log
@	PR ld/12614
	* emultempl/pe.em (_after_open): Correctly check whether symbol is
	in undef list.
@
text
@d1591 2
a1592 4
			if (blhe != NULL
			    && blhe->type == bfd_link_hash_defined
			    && blhe->u.undef.next == NULL
			    && blhe != link_info.hash->undefs_tail)
@


1.162.2.3
log
@	PR 12365
	PR 12613
	PR 12632
	PR 12739
	PR 12753
	PR 12760
	PR 12763
Apply fix from mainline along with assorted other small fixes.
@
text
@d2012 1
a2012 3
      /* All sections in an executable must be aligned to a page boundary.
	 In a relocatable link, just preserve the incoming alignment; the
	 address is discarded by lang_insert_orphan in that case, anyway.  */
a2015 5
      if (link_info.relocatable)
	{
	  os->section_alignment = s->alignment_power;
	  os->bfd_section->alignment_power = s->alignment_power;
	}
@


1.161
log
@message.txt
@
text
@d1942 3
d1958 1
d1992 4
a1995 1
	place = &hold[orphan_rodata];
@


1.160
log
@2010-05-25  Kai Tietz  <kai.tietz@@onevision.com>

        * emultempl/pe.em (default_merge_rdata): New shell variable.
        (MERGE_RDATA_V2): New macro.
        (gld_${EMULATION_NAME}_get_script): Adjust rule for auto-import
        selected script.
@
text
@d177 1
a177 1
  *-w64-mingw*)
@


1.159
log
@2010-05-15  Kai Tietz  <kai.tietz@@onevision.com>

	* emultempl/pe.em (is_underscoring): New helper function.
	(gld_${EMULATION_NAME}_before_parse): Replace code
	for pe(p)_leading_underscore detection by is_underscoring.
	(U): Likewise.
	(GET_INIT_SYMBOL_NAME): Likewise.
	(U_SIZE): Likewise.
	(set_pe_name):
	(set_entry_point):
	(gld_${EMULATION_NAME}_set_symbols):
	* emultempl/pep.em: Likewise.
	* pe-dll.c (pe_detail_list): Set default
	underscoring for x64 target.
	(pe_dll_id_target): Add initialization of
	pe(p)_leading_underscore.
@
text
@d175 5
d183 1
d194 4
d2172 1
a2172 1
echo '  ; else if (link_info.pei386_auto_import == 1) return'	>> e${EMULATION_NAME}.c
@


1.158
log
@2010-05-11  Kai Tietz  <kai.tietz@@onevision.com>

        * emultempl/pe.em (gld_${EMULATION_NAME}_before_parse):
        Initialize pe(p)_leading_underscore variable.
        (set_pe_name): Likewise.
        * emultempl/pep.em: Likewise.
        Additional change default to non-underscore for
        pep_leading_underscore equal to -1.
@
text
@d145 1
a145 2
static void
gld_${EMULATION_NAME}_before_parse (void)
d147 4
a150 5
  int u;
  /* Now we check target's default for getting proper symbol_char.  */
  u = pe_leading_underscore;
  if (u == -1
      && !bfd_get_target_info ("${OUTPUT_FORMAT}", NULL, NULL, &u, NULL))
d155 3
a157 1
  pe_leading_underscore = u;
d159 4
d360 1
a360 1
  + ((init[(IDX)].is_c_symbol == FALSE || pe_leading_underscore != 0) ? 0 : 1))
d364 1
a364 1
  (pe_leading_underscore == 0 ? CSTR : "_" CSTR)
d369 1
a369 1
  (sizeof (CSTR) + pe_leading_underscore == 0 ? 0 : 1)
d481 2
a482 11
  int i, u;

  /* Now we check target's default for getting proper symbol_char.  */
  u = pe_leading_underscore;
  if (u == -1
      && !bfd_get_target_info ("${OUTPUT_FORMAT}", NULL, NULL, &u, NULL))
    bfd_get_target_info ("${RELOCATEABLE_OUTPUT_FORMAT}", NULL, NULL, &u, NULL);

  if (u == -1)
    abort ();
  pe_leading_underscore = u;
d504 1
a504 1
  int i, u = -1;
d547 1
a547 10
  /* Now we check target's default for getting proper symbol_char.  */
  u = pe_leading_underscore;
  if (u == -1
      && !bfd_get_target_info ("${OUTPUT_FORMAT}", NULL, NULL, &u, NULL))
    bfd_get_target_info ("${RELOCATEABLE_OUTPUT_FORMAT}", NULL, NULL, &u, NULL);

  if (u == -1)
    abort ();
  initial_symbol_char = (u == 1 ? "_" : "");
  pe_leading_underscore = u;
d904 1
a904 6
  int j, u;
  /* Now we check target's default for getting proper symbol_char.  */
  u = pe_leading_underscore;
  if (u == -1
      && !bfd_get_target_info ("${OUTPUT_FORMAT}", NULL, NULL, &u, NULL))
    bfd_get_target_info ("${RELOCATEABLE_OUTPUT_FORMAT}", NULL, NULL, &u, NULL);
d906 1
a906 3
  if (u == -1)
    abort ();
  pe_leading_underscore = u;
@


1.157
log
@2010-04-05  Kai Tietz  <kai.tietz@@onevision.com>

	* emultempl/pep.em (U): Macro modified.
	(U_SIZE): New helper macro.
	(GET_INIT_SYMBOL_NAME): Likewise.
	(enum options): Add OPTION_NO_LEADING_UNDERSCORE
	and OPTION_LEADING_UNDERSCORE enumerator-values.
	(gld${EMULATION_NAME}_add_options): Add --(no-)leading-underscore
	option.
	(definfo): Add new member is_c_symbol.
	(D): Add to macro underscore mode parameter.
	(init): Add definition for is_c_symbol.
	(gld_${EMULATION_NAME}_list_options): Display new options.
	(set_pep_name): Adjust underscoring dependent fixed
	symbol handling.
	(gld_${EMULATION_NAME}_set_symbols): Likewise.
	(saw_option): Likewise.
	(gld_${EMULATION_NAME}_unrecognized_file): Likewise.
	(set_entry_point): Initial initial_symbol_char dependent to
	target's default and new option flag pep_leading_underscore.
	* emultempl/pe.em (U): Macro modified.
	(U_SIZE): New helper macro.
	(GET_INIT_SYMBOL_NAME): Likewise.
	(OPTION_LEADING_UNDERSCORE): Add new option define.
	(OPTION_NO_LEADING_UNDERSCORE): Likewise.
	(gld${EMULATION_NAME}_add_options): Add --(no-)leading-underscore
	option.
	(definfo): Add new member is_c_symbol.
	(D): Add to macro underscore mode parameter.
	(init): Add definition for is_c_symbol.
	(gld_${EMULATION_NAME}_list_options): Display new options.
	(set_pep_name): Adjust underscoring dependent fixed
	symbol handling.
	(gld_${EMULATION_NAME}_set_symbols): Likewise.
	(saw_option): Likewise.
	(gld_${EMULATION_NAME}_unrecognized_file): Likewise.
	(set_entry_point): Initial initial_symbol_char dependent to
	target's default and new option flag pep_leading_underscore.
	* pe-dll.c (pe_leading_underscore): New flag variable.
	(pe_detail_list): Remove const to allow modify of
	member underscore.
	(pe_dll_id_target): Initialize pe_details' underscore variable
	dependent to target's default and flag pe_leading_underscore.
	* pe-dll.h (pe_leading_underscore): Add extern declaration of
	option flag.
	* pep-dll.c (pe_leading_underscore): Add alias define for
	pep_leading_underscore.
	* pep-dll.h (pep_leading_underscore) Add extern declaration of
	option flag.
	* ld.texinfo: Add documentation for --(no-)leading-underscore
	option.
@
text
@d148 11
d477 11
a487 1
  int i;
d554 2
a555 1
  if (u == -1 && !bfd_get_target_info ("${OUTPUT_FORMAT}", NULL, NULL, &u, NULL))
d558 1
a558 5
  if (u == 0)
    initial_symbol_char = "";
  else if (u != -1)
    initial_symbol_char = "_";
  else
d560 1
d918 10
a927 1
  int j;
@


1.156
log
@* emultempl/elf32.em (_place_orphan): If an input section doesn't
match an existing output section, but an unused output section
statement does match, use it.
* emultempl/pe.em (_place_orphan): Likewise.
* emultempl/pep.em (_place_orphan): Likewise.

* ld-elf/orphan4.d: New.
* ld-elf/orphan4.ld: New.
* ld-elf/orphan4.s: New.
@
text
@a125 2
#define U(S) ${INITIAL_SYMBOL_CHAR} S

d225 4
d230 1
a230 1
					(OPTION_USE_NUL_PREFIXED_IMPORT_TABLES + 1)
d272 2
d335 4
d341 16
a356 1
#define D(field,symbol,def)  {&pe.field,sizeof(pe.field), def, symbol,0}
d362 1
a362 1
  D(ImageBase,"__image_base__", NT_EXE_IMAGE_BASE),
d364 1
a364 1
  {&dll, sizeof(dll), 0, "__dll__", 0},
d366 7
a372 7
  D(ImageBase, U ("__ImageBase"), NT_EXE_IMAGE_BASE),
  D(SectionAlignment,"__section_alignment__", PE_DEF_SECTION_ALIGNMENT),
  D(FileAlignment,"__file_alignment__", PE_DEF_FILE_ALIGNMENT),
  D(MajorOperatingSystemVersion,"__major_os_version__", 4),
  D(MinorOperatingSystemVersion,"__minor_os_version__", 0),
  D(MajorImageVersion,"__major_image_version__", 1),
  D(MinorImageVersion,"__minor_image_version__", 0),
d374 1
a374 1
  D(MajorSubsystemVersion,"__major_subsystem_version__", 3),
d376 1
a376 1
  D(MajorSubsystemVersion,"__major_subsystem_version__", 4),
d378 9
a386 9
  D(MinorSubsystemVersion,"__minor_subsystem_version__", 0),
  D(Subsystem,"__subsystem__", ${SUBSYSTEM}),
  D(SizeOfStackReserve,"__size_of_stack_reserve__", 0x200000),
  D(SizeOfStackCommit,"__size_of_stack_commit__", 0x1000),
  D(SizeOfHeapReserve,"__size_of_heap_reserve__", 0x100000),
  D(SizeOfHeapCommit,"__size_of_heap_commit__", 0x1000),
  D(LoaderFlags,"__loader_flags__", 0x0),
  D(DllCharacteristics, "__dll_characteristics__", 0x0), 
  { NULL, 0, 0, NULL, 0 }
d408 1
d459 1
a459 1
  fprintf (file, _("  --tsaware       		 Image is Terminal Server aware\n"));
d471 1
a471 1
      if (strcmp (name, init[i].symbol) == 0)
d488 1
a488 1
  int i;
d531 13
a543 1
  initial_symbol_char = ${INITIAL_SYMBOL_CHAR};
d733 6
d931 2
a932 1
      rv = lang_add_assignment (exp_assop ('=', init[j].symbol,
d1156 2
a1157 1
		  if (! CONST_STRNEQ (symbols[i]->name, U ("_head_")))
d1163 2
a1164 2
		  pe_data_import_dll = (char*) (symbols[i]->name +
						sizeof (U ("_head_")) - 1);
d1645 1
a1645 1
    if (strcmp (init[i].symbol, option) == 0)
d1679 2
a1680 1
	      sprintf (buf, "%s%s", U (""), pe_def_file->exports[i].internal_name);
@


1.155
log
@2009-11-15  Kai Tietz  <kai.tietz@@onevision.com>

	* pe-dll.c (pe_undef_alias_cdecl_match): New function.
	(pe_find_cdecl_alias_match): New function.
	(pe_process_import_defs): Add matching for import symbols
	declared as cdecl for fastcall/stdcall.
	* emultempl/pe.em (pe_undef_cdecl_match): Treat fastcall
	symbols, too.
	(pe_fixup_stdcalls): Likewise.
	(gld_XXX_after_open): Redo scanning for imported
	fastcall/stdcall symbols as cdecl one.
	* emultempl/pep.em (pep_undef_cdecl_match): Treat fastcall
	symbols, too.
	(pep_fixup_stdcalls): Likewise.
	(gld_XXX_after_open): Redo scanning for imported
	fastcall/stdcall symbols as cdecl one.

2009-11-15  Kai Tietz  <kai.tietz@@onevision.com>

	* ld-pe/direct2_client.c: New file.
	* ld-pe/direct2_dll.c: Likewise.
	* ld-pe/direct2_dll.def: Likewise.
	* ld-pe/pe-run2.exp: Likewise.
@
text
@d1819 1
d1858 5
d1865 8
@


1.154
log
@2009-11-06  Kai Tietz  <kai.tietz@@onevision.com>

        * pe.em (DEFAULT_PSEUDO_RELOC_VERSION): New macro.
        (gld_XXX_before_parse): Set pseudo-relocation default
        version to DEFAULT_PSEUDO_RELOC_VERSION.
        (gldXXX_handle_option): Likewise.
@
text
@d945 1
d949 3
a951 1
      && strncmp (h->root.string, string, sl) == 0
d974 2
a975 1
	/* For now, don't try to fixup fastcall symbols.  */
d977 1
a977 1
	if (at && !lead_at)
d981 4
a984 1
	    char *cname = xstrdup (undef->root.string /* + lead_at */);
d986 2
a987 1
	    *at = 0;
d1223 5
@


1.153
log
@2009-11-04  Kai Tietz  <kai.tietz@@onevision.com>

        * emulparams/arm_epoc_pe.sh: Remove ENTRY.
        * emulparams/arm_wince_pe.sh: Likewise.
        * emulparams/i386pe.sh: Likewise.
        * emulparams/i386pe_posix.sh: Likewise.
        * emulparams/mcorepe.sh: Likewise.
        * emulparams/mipspe.sh: Likewise.
        * emulparams/ppcpe.sh: Likewise.
        * emulparams/armpe.sh: Likewise.
        * emulparams/i386pep.sh: Likewise.
        * emulparams/shpe.sh: Likewise.
        Additionally cleaned up double-defined
        variables SUBSYSTEM and INITIAL_SYMBOL_CHAR.
        * emultempl/pe.em: Remove use of ENTRY.
        (pe_subsystem): New local variable.
        (gld_XXX_before_parse): Don't set default
        entry point here.
        (set_entry_point): New function to set entry
        point.
        (set_pe_subsystem): Remove code for entry point.
        (gld_XXX_after_parse): Use set_entry_point here.
        * emultempl/pep.em: Likewise.
@
text
@d102 6
d170 2
a171 1
  link_info.pei386_runtime_pseudo_reloc = 1; /* Use by default version 1.  */
d756 2
a757 1
      link_info.pei386_runtime_pseudo_reloc = 1;
@


1.152
log
@        * emultempl/pe.em (OPTION_EXCLUDE_ALL_SYMBOLS): New macro.
        (gld${EMULATION_NAME}_add_options): Add new --exclude-all-symbols option
        to exclude all symbols from automatic export.
        (gld_${EMULATION_NAME}_list_options): Describe it.
        (gld${EMULATION_NAME}_handle_option): Handle it.
        * emultempl/pep.em: Likewise to all the above.
        * pe-dll.c (pe_dll_exclude_all_symbols): New variable.
        (process_def_file_and_drectve): Use it.
        * pe-dll.h (pe_dll_exclude_all_symbols): Declare.
        * pep-dll.c (pep_dll_exclude_all_symbols): Define pep_ alias.
        * pep-dll.h (pe_dll_exclude_all_symbols): Declare.
        * NEWS: Mention the new feature.
        * ld.texinfo: Document the new command line switch.
@
text
@a2 1
test -z "${ENTRY}" && ENTRY="_mainCRTStartup"
d124 1
a164 10

#if (PE_DEF_SUBSYSTEM == 9) || (PE_DEF_SUBSYSTEM == 2)
#if defined TARGET_IS_mipspe || defined TARGET_IS_armpe || defined TARGET_IS_arm_wince_pe
  lang_default_entry ("WinMainCRTStartup");
#else
  lang_default_entry ("_WinMainCRTStartup");
#endif
#else
  lang_default_entry ("${ENTRY}");
#endif
d452 65
a521 2
  const char *entry;
  const char *initial_symbol_char;
a524 1
  int subsystem;
a529 1
      const char *entry;
d533 7
a539 7
      { "native",  1, "NtProcessStartup" },
      { "windows", 2, "WinMainCRTStartup" },
      { "console", 3, "mainCRTStartup" },
      { "posix",   7, "__PosixProcessStartup"},
      { "wince",   9, "WinMainCRTStartup" },
      { "xbox",   14, "mainCRTStartup" },
      { NULL, 0, NULL }
a540 2
  /* Entry point name for arbitrary subsystem numbers.  */
  static const char default_entry[] = "mainCRTStartup";
d550 1
a550 1
		   strtoul (sver + 1, &end, 0));
d553 1
a553 1
		     strtoul (end + 1, &end, 0));
a566 6
      /* If no match, use the default.  */
      if (v[i].name != NULL)
	entry = v[i].entry;
      else
	entry = default_entry;

d568 1
a568 1
      subsystem = (int) temp_subsystem;
d584 1
a584 2
      entry = v[i].entry;
      subsystem = v[i].value;
d587 1
a587 18
  set_pe_name ("__subsystem__", subsystem);

  initial_symbol_char = ${INITIAL_SYMBOL_CHAR};
  if (*initial_symbol_char != '\0')
    {
      char *alc_entry;

      /* lang_default_entry expects its argument to be permanently
	 allocated, so we don't free this string.  */
      alc_entry = xmalloc (strlen (initial_symbol_char)
			   + strlen (entry)
			   + 1);
      strcpy (alc_entry, initial_symbol_char);
      strcat (alc_entry, entry);
      entry = alc_entry;
    }

  lang_default_entry (entry);
d917 2
@


1.151
log
@     	PR ld/6766
	* lexsup.c (parse_args <-e>): Revert 2009-03-18 change.
	* ldemul.c (after_parse_default): Add entry symbol as undef.
	* emultempl/alphaelf.em (alpha_after_parse): Call after_parse_default.
	* emultempl/cr16elf.em (cr16elf_after_parse): Likewise.
	* emultempl/crxelf.em (crxelf_after_parse): Likewise.
	* emultempl/hppaelf.em (hppaelf_after_parse): Likewise.
	* emultempl/ia64elf.em (gld${EMULATION_NAME}_after_parse): Likewise.
	* emultempl/pe.em (gld_${EMULATION_NAME}_after_parse): Call
	after_parse_default and delete now duplicate code.
	* emultempl/pep.em (gld_${EMULATION_NAME}_after_parse): Likewise.
	* scripttempl/elf32cr16.sc: No need to make entry extern.
	* scripttempl/elf32cr16c.sc: Likewise.
	* scripttempl/elf32crx.sc: Likewise.
	* scripttempl/elf32xc16xs.sc: Only provide ENTRY on final link.
@
text
@d199 2
a200 1
#define OPTION_KILL_ATS			(OPTION_EXCLUDE_SYMBOLS + 1)
d280 1
d394 1
d675 3
@


1.150
log
@ld/
	* ldlang.c (lang_output_section_statement_lookup): Add function
	comment.  Make "name" non-const.  Ensure duplicate entries use
	the same string, allowing simple comparison in hash bucket loop.
	Tweak constraint check.
	(next_matching_output_section_statement): New function.
	* ldlang.h (lang_output_section_statement_lookup): Update.
	(next_matching_output_section_statement): Declare.
	* emultempl/elf32.em (gld${EMULATION_NAME}_place_orphan): Don't
	combine orphan sections when input sections flags differ in
	alloc or load.
	* emultempl/pe.em: Formatting throughout.
	(gld${EMULATION_NAME}_place_orphan): As for elf32.em.
	* emultempl/pep.em: Formatting throughout.
	(gld${EMULATION_NAME}_place_orphan): As for elf32.em.
ld/testsuite/
	* ld-elf/orphan3.d, * ld-elf/orphan3a.s, * ld-elf/orphan3b.s,
	* ld-elf/orphan3c.s, * ld-elf/orphan3d.s, * ld-elf/orphan3e.s,
	* ld-elf/orphan3f.s: New test.
	* ld-pe/orphan.d, * ld-pe/orphana.s, * ld-pe/orphanb.s,
	* ld-pe/orphand.s, * ld-pe/orphane.s: New test.
	* ld-pe/direct.exp: Use is_pecoff_format.
	* ld-pe/longsecn.exp: Delete.
	* ld-pe/pe.exp: Run new test and longsecn tests.
@
text
@a879 16
  /* The Windows libraries are designed for the linker to treat the
     entry point as an undefined symbol.  Otherwise, the .obj that
     defines mainCRTStartup is brought in because it is the first
     encountered in libc.lib and it has other symbols in it which will
     be pulled in by the link process.  To avoid this, we act as
     though the user specified -u with the entry point symbol.

     This function is called after the linker script and command line
     options have been read, so at this point we know the right entry
     point.  This function is called before the input files are
     opened, so registering the symbol as undefined will make a
     difference.  */

  if (! link_info.relocatable && entry_symbol.name != NULL)
    ldlang_add_undef (entry_symbol.name);

d885 2
@


1.150.4.1
log
@     	PR ld/6766
	* lexsup.c (parse_args <-e>): Revert 2009-03-18 change.
	* ldemul.c (after_parse_default): Add entry symbol as undef.
	* emultempl/alphaelf.em (alpha_after_parse): Call after_parse_default.
	* emultempl/cr16elf.em (cr16elf_after_parse): Likewise.
	* emultempl/crxelf.em (crxelf_after_parse): Likewise.
	* emultempl/hppaelf.em (hppaelf_after_parse): Likewise.
	* emultempl/ia64elf.em (gld${EMULATION_NAME}_after_parse): Likewise.
	* emultempl/pe.em (gld_${EMULATION_NAME}_after_parse): Call
	after_parse_default and delete now duplicate code.
	* emultempl/pep.em (gld_${EMULATION_NAME}_after_parse): Likewise.
	* scripttempl/elf32cr16.sc: No need to make entry extern.
	* scripttempl/elf32cr16c.sc: Likewise.
	* scripttempl/elf32crx.sc: Likewise.
	* scripttempl/elf32xc16xs.sc: Only provide ENTRY on final link.
@
text
@d880 16
a900 2

  after_parse_default ();
@


1.149
log
@	* ldlang.c (lang_insert_orphan): Add __start_<section> symbol
	assignment inside output section statement.  Ensure only one
	set of symbols per output section.
	* emultempl/pe.em (gld_${EMULATION_NAME}_place_orphan): Add non-
	dollar sections before dollar sections.  Correct add_child
	list insertion.
	* emultempl/pep.em (gld_${EMULATION_NAME}_place_orphan): Likewise.
@
text
@d245 6
a250 3
  (int ns ATTRIBUTE_UNUSED, char **shortopts ATTRIBUTE_UNUSED, int nl,
    struct option **longopts, int nrl ATTRIBUTE_UNUSED,
    struct option **really_longopts ATTRIBUTE_UNUSED)
d273 2
a274 2
    /* getopt allows abbreviations, so we do this to stop it from treating -o
       as an abbreviation for this option */
d317 2
a318 2
  *longopts = (struct option *)
    xrealloc (*longopts, nl * sizeof (struct option) + sizeof (xtra_long));
d825 1
d827 3
a829 2
	init[IMAGEBASEOFF].value = (pe_enable_auto_image_base) ?
	  compute_dll_image_base (output_filename) : NT_DLL_IMAGE_BASE;
d831 1
a831 1
	init[IMAGEBASEOFF].value = NT_DLL_IMAGE_BASE;
d833 1
d868 1
a868 2
  if (pe.FileAlignment >
      pe.SectionAlignment)
d1274 1
a1274 1
		    relocs = (arelent **) xmalloc ((size_t) relsize);
d1589 1
a1589 1
	  buf = (char *) xmalloc (buflen);
d1724 1
a1724 1
    || (!link_info.relocatable && pe_def_file->num_exports != 0)
d1794 26
a1819 15
  if (constraint == 0
      && (os = lang_output_section_find (secname)) != NULL
      && os->bfd_section != NULL
      && (os->bfd_section->flags == 0
	  || ((s->flags ^ os->bfd_section->flags)
	      & (SEC_LOAD | SEC_ALLOC)) == 0))
    {
      /* We already have an output section statement with this
	 name, and its bfd section has compatible flags.
	 If the section already exists but does not have any flags set,
	 then it has been created by the linker, probably as a result of
	 a --section-start command line switch.  */
      lang_add_section (&add_child, s, os);
    }
  else
d1925 2
a1926 1
  (const char *arch ATTRIBUTE_UNUSED, search_dirs_type *search,
@


1.148
log
@ld/ChangeLog

	PR ld/6744
	* ld.texinfo (--export-dynamic):  Mention --export-all-symbols.
	* emultempl/pe.em (gld_${EMULATION_NAME}_after_parse):  Issue
	warning if --export-dynamic was passed on command-line.
	* emultempl/pep.em (gld_${EMULATION_NAME}_after_parse):  Likewise.

ld/testsuite/ChangeLog

	PR ld/6744
	* ld-pe/export_dynamic_warning.d:  New test control file.
	* ld-pe/export_dynamic_warning.s:  New test source file.
	* ld-pe/pe.exp:  Also run export_dynamic_warning dump test.
@
text
@d1774 1
d1880 6
a1885 2
  {
    lang_statement_union_type **pl = &os->children.head;
d1887 2
a1888 11
    if (dollar != NULL)
      {
	bfd_boolean found_dollar;

	/* The section name has a '\$'.  Sort it with the other '\$'
	   sections.  */
	found_dollar = FALSE;
	for ( ; *pl != NULL; pl = &(*pl)->header.next)
	  {
	    lang_input_section_type *ls;
	    const char *lname;
d1890 1
a1890 2
	    if ((*pl)->header.type != lang_input_section_enum)
	      continue;
d1892 5
a1896 1
	    ls = &(*pl)->input_section;
d1898 5
a1902 21
	    lname = bfd_get_section_name (ls->section->owner, ls->section);
	    if (strchr (lname, '\$') == NULL)
	      {
		if (found_dollar)
		  break;
	      }
	    else
	      {
		found_dollar = TRUE;
		if (strcmp (orig_secname, lname) < 0)
		  break;
	      }
	  }
      }

    if (add_child.head != NULL)
      {
	add_child.head->header.next = *pl;
	*pl = add_child.head;
      }
  }
@


1.147
log
@include/ChangeLog
2009-03-12  Dave Korn  <dave.korn.cygwin@@gmail.com>

	* coff/internal.h (struct internal_extra_pe_aouthdr):  Correct type
	of DllCharacteristics flags field to unsigned.
	* coff/pe.h (IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE,
	IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE,
	IMAGE_DLL_CHARACTERISTICS_NX_COMPAT,
	IMAGE_DLLCHARACTERISTICS_NO_ISOLATION,
	IMAGE_DLLCHARACTERISTICS_NO_SEH,
	IMAGE_DLLCHARACTERISTICS_NO_BIND,
	IMAGE_DLLCHARACTERISTICS_WDM_DRIVER,
	IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE):  New macros to
	define flag bit values for DllCharacteristics field of PEAOUTHDR,
	PEPAOUTHDR.

ld/ChangeLog
2009-03-12  Dave Korn  <dave.korn.cygwin@@gmail.com>
            Danny Smith  <dannysmith@@users.sourceforge.net>

	* emultmpl/pe.em (pe_dll_characteristics): New variable.
	(OPTION_DYNAMIC_BASE, OPTION_FORCE_INTEGRITY, OPTION_NX_COMPAT,
	OPTION_NO_ISOLATION. OPTION_NO_SEH, OPTION_NO_BIND,
	OPTION_WDM_DRIVER, OPTION_TERMINAL_SERVER_AWARE):
	New macros for options to set DllCharacteristics flag bits.
	(gld${EMULATION_NAME}_add_options): Add dynamicbase, forceinteg,
	nxcompat, no-isolation, no-seh, no-bind, wdmdriver, tsaware options.
	(init): Add DllCharacteristics field.
	(gld_${EMULATION_NAME}_list_options): List new options.
	(gld${EMULATION_NAME}_handle_option): Handle new options.
	* emultmpl/pep.em (pe_dll_characteristics): New variable.
	(OPTION_DYNAMIC_BASE, OPTION_FORCE_INTEGRITY, OPTION_NX_COMPAT,
	OPTION_NO_ISOLATION. OPTION_NO_SEH, OPTION_NO_BIND,
	OPTION_WDM_DRIVER, OPTION_TERMINAL_SERVER_AWARE):
	New macros for options to set DllCharacteristics flags.
	(gld${EMULATION_NAME}_add_options): Add dynamicbase, forceinteg,
	nxcompat,no-isolation, no-seh, no-bind, wdmdriver, tsaware options.
	(init): Add DllCharacteristics field.
	(gld_${EMULATION_NAME}_list_options): List new options.
	(gld${EMULATION_NAME}_handle_option): Handle new options.
	* ldtexinfo : Document dynamicbase, forceinteg,	nxcompat,
	no-isolation, no-seh, no-bind, wdmdriver, tsaware options.
@
text
@d890 6
@


1.146
log
@	* emultempl/pe.em (debug_section_p):  New bfd_map_over_sections hook.
	(gld_${EMULATION_NAME}_after_open):  Use it to iterate all sections
	of all input BFDs, looking for debug info.  Enable long section names
	if any found.
	* emultempl/pe.em (debug_section_p):  Likewise.
	(gld_${EMULATION_NAME}_after_open):  Likewise.
	* NEWS:  Retrospectively adjust news announcement.
	* ld.texinfo:  Update documentation to mention new behaviour.
@
text
@d129 1
d233 9
d303 8
d360 1
d423 10
d739 25
d765 4
@


1.145
log
@ld/ChangeLog

	* emultempl/pe.em (gld_${EMULATION_NAME}_before_parse):  Set
	default state of auto-import flag based on $target.

ld/testsuite/ChangeLog

	* ld-pe/pe.exp:  Disable auto-import when linking on Cygwin.
@
text
@d1046 7
d1086 23
@


1.144
log
@bfd/ChangeLog

	* coff-alpha.c (alpha_ecoff_backend_data):  Initialise fields which
	control long section name handling with ECOFF_NO_LONG_SECTION_NAMES.
	* coff-mips.c (mips_ecoff_backend_data):  Likewise.
	* coff-rs6000.c (bfd_xcoff_backend_data):  Initialise fields which
	control long section name handling with XCOFF_NO_LONG_SECTION_NAMES.
	(bfd_pmac_xcoff_backend_data):  Likewise.
	* coff64-rs6000.c (bfd_xcoff_backend_data):  Likewise.
	(bfd_xcoff_aix5_backend_data):  Likewise.
	(xcoff64_write_object_contents):  Delete unused long_section_names
	local variable.
	* coff-sh.c (bfd_coff_small_swap_table):  Initialise long section
	name members using COFF_DEFAULT_LONG_SECTION_NAMES and make entire
	struct non-const.
	* coffcode.h (documentation):  Update to describe long section names.
	(COFFLONGSECTIONCATHELPER):  New helper macro.
	(BLANKOR1TOODD):  Likewise.
	(COFF_ENABLE_LONG_SECTION_NAMES):  Likewise.
	(COFF_LONG_SECTION_NAMES_SETTER):  Likewise.
	(COFF_DEFAULT_LONG_SECTION_NAMES):  Likewise.
	(bfd_coff_set_long_section_names_allowed):  New function.
	(bfd_coff_set_long_section_names_disallowed):  Likewise.
	(struct bfd_coff_backend_data):  Add new backend hook function
	pointer _bfd_coff_set_long_section_names.
	(bfd_coff_set_long_section_names):  New backend hook.
	(coff_write_object_contents):  Only generate long section names if
	bfd_coff_long_section_names() indicates they are currently enabled.
	(bfd_coff_std_swap_table):  Make non-const, and initialise long
	section name fields using COFF_DEFAULT_LONG_SECTION_NAMES.
	(ticoff0_swap_table):  Likewise to both.
	(ticoff1_swap_table):  Again, likewise to both.
	* coffgen.c (make_a_section_from_file):  Allow long section names
	as inputs even if not currently allowed for outputs.
	* ecoff.c (_bfd_ecoff_no_long_sections):  New function.
	* efi-app-ia32.c (COFF_LONG_SECTION_NAMES):  Define to 0, not blank.
	* efi-app-ia64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-app-x86_64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-bsdrv-ia32.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-bsdrv-ia64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-bsdrv-x86_64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-rtdrv-ia32.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-rtdrv-ia64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* efi-rtdrv-x86_64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-arm.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-i386.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-mcore.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-mips.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-ppc.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-sh.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* pei-x86_64.c (COFF_LONG_SECTION_NAMES):  Likewise.
	* libcoff-in.h:  Update copyright year to cause updated copyright
	year in generated libcoff.h, and fix typo.
	* libcoff.h:  Regenerated.
	* libecoff.h (ECOFF_NO_LONG_SECTION_NAMES):  New macro.
	(_bfd_ecoff_no_long_sections):  Add prototype.
	* libxcoff.h (XCOFF_NO_LONG_SECTION_NAMES):  New macro.
	* pe-mips.c (COFF_LONG_SECTION_NAMES):  Define empty if not already
	defined by an including .c file.
	* ticoff.h (ticoff0_swap_table):  Make non-const, and initialise
	long section name fields using COFF_DEFAULT_LONG_SECTION_NAMES.
	(ticoff1_swap_table):  Likewise to both.

ld/ChangeLog

	* ld.texinfo:  Update to mention long section name options.
	* NEWS:  Mention new behaviour and command-line options.
	* pe-dll.c (pe_use_coff_long_section_names):  New global variable.
	(pe_output_file_set_long_section_names):  New function.
	(pe_dll_build_sections):  Call it on output BFDs.
	(pe_exe_build_sections):  Likewise.
	(pe_dll_fill_sections):  Likewise.
	(pe_exe_fill_sections):  Likewise.
	* pe-dll.h (pe_use_coff_long_section_names):  Declare extern.
	(pe_output_file_set_long_section_names):  Add prototype.
	* pep-dll.c (pe_use_coff_long_section_names):  Define pep_ alias.
	(pe_output_file_set_long_section_names):  Likewise.
	* pep-dll.h (pep_use_coff_long_section_names):  Declare extern.
	(pep_output_file_set_long_section_names):  Add prototype.
	* pe.em (OPTION_ENABLE_LONG_SECTION_NAMES):  New getopt value macro.
	(OPTION_DISABLE_LONG_SECTION_NAMES):  Likewise.
	(gld${EMULATION_NAME}_add_options):  Add new options to xtra_long[].
	(gld_${EMULATION_NAME}_list_options):  Describe them.
	(gld${EMULATION_NAME}_handle_option):  Set or clear global
	pe_use_coff_long_section_names flag when options recognised.
	(gld_${EMULATION_NAME}_after_open):  En/disable long section names
	for main output bfd by calling pe_output_file_set_long_section_names.
	* pep.em (enum options):  Extend enum with new getopt option values.
	(gld${EMULATION_NAME}_add_options):  Add new options to xtra_long[].
	(gld_${EMULATION_NAME}_list_options):  Describe them.
	(gld${EMULATION_NAME}_handle_option):  Set or clear global
	pe_use_coff_long_section_names flag when options recognised.
	(gld_${EMULATION_NAME}_after_open):  En/disable long section names
	for main output bfd by calling pep_output_file_set_long_section_names.

ld/testsuite/ChangeLog

	* ld-pe/longsecn-1.d:  New test file.
	* ld-pe/longsecn-2.d:  Likewise.
	* ld-pe/longsecn-3.d:  Likewise.
	* ld-pe/longsecn-4.d:  Likewise.
	* ld-pe/longsecn-5.d:  Likewise.
	* ld-pe/longsecn.d:  Likewise.
	* ld-pe/longsecn.exp:  New test control script.
	* ld-pe/longsecn.s:  New test source file.
@
text
@d148 15
a162 1
  link_info.pei386_auto_import = -1;
@


1.143
log
@	* emultempl/pe.em (gld_${EMULATION_NAME}_after_open):  Don't emit
	inadvertent .reloc sections caused by refactoring accident.
@
text
@d213 5
a217 1
  (OPTION_EXCLUDE_MODULES_FOR_IMPLIB + 1)
d277 2
d386 4
d690 6
d1065 1
@


1.142
log
@	* ldlang.c (push_stat_ptr, pop_stat_ptr): New functions.
	(stat_save, stat_save_ptr): New variables.
	(lang_insert_orphan): Use push_stat_ptr and pop_stat_ptr.
	(load_symbols): Likewise.  Delete dead "bad_load" code.
	(open_input_bfds): Warn on script containing output sections.
	(lang_enter_output_section_statement): Use push_stat_ptr.
	(lang_enter_group): Likewise.
	(lang_leave_output_section_statement): Use pop_stat_ptr.
	(lang_leave_group): Likewise.
	* ldlang.h (push_stat_ptr, pop_stat_ptr): Declare.
	* ldctor.c (ldctor_build_sets): Use push_stat_ptr and pop_stat_ptr.
	* emultempl/beos.em (gld_${EMULATION_NAME}_set_symbols): Likewise.
	* emultempl/pe.em (gld_${EMULATION_NAME}_set_symbols): Likewise.
	* emultempl/pep.em (gld_${EMULATION_NAME}_set_symbols): Likewise.
	* emultempl/spuelf.em (spu_place_special_section): Likewise.
	* emultempl/xtensaelf.em (ld_xtensa_insert_page_offsets): Likewise.
@
text
@a1063 2
  else
    pe_exe_build_sections (link_info.output_bfd, &link_info);
d1067 2
@


1.141
log
@2009-01-08  Kai Tietz  <kai.tietz@@onevision.com>

	* pe.em (OPTION_USE_NUL_PREFIXED_IMPORT_TABLES): New.
	(gld..._add_options): Add new option
	--use-nul-prefixed-import-tables.
	(gld..._handle_option): Likewise.
	* pep.em: Same as for pe.em.
	* ld.texinfo: Add new option documentation for
	--use-nul-prefixed-import-tables.
	* pe-dll.c (pe_use_nul_prefixed_import_tables): New.
	(make_head): Make prefix leading zero prefix element for
	idata$4 and idata$5 dependent to new flag.
	(make_import_fixup_entry): Remove idata4/5 prefix.
	* pe-dll.h (pe_use_nul_prefixed_import_tables): New.
	* pep-dll.c (pe_use_nul_prefixed_import_tables): New.
	* pep-dll.h (pep_use_nul_prefixed_import_tables): New.
	* NEWS: Add new option.
@
text
@d13 1
a13 1
   2005, 2006, 2007, 2008 Free Software Foundation, Inc.
a727 1
  lang_statement_list_type *save;
d750 1
a750 3
  save = stat_ptr;

  stat_ptr = &(abs_output_section->children);
d772 1
a772 1
  stat_ptr = save;
@


1.140
log
@2009-01-05  Kai Tietz  <kai.tietz@@onevision.com>

        * emultempl/pe.em: Prefix dollar characters to be outputed in
        generated C file.
        * emultempl/pep.em: Likewise.
@
text
@d212 2
d239 2
d603 3
@


1.139
log
@	* NEWS:  Mention new feature --exclude-modules-for-implib.
	* ld.texinfo:  Document new --exclude-modules-for-implib option.
	* pe-dll.c (exclude_list_struct):  Change type member from int to
	new enumeration exclude_type.
	(pe_dll_add_excludes):  Accept exclude_type instead of int param.
	(auto_export):  Replace magic constants by exclude_type values and
	handle new choice EXCLUDEFORIMPLIB.
	(pe_dll_generate_implib):  Accept a pointer to the link_info and
	iterate all input BFDs looking for EXCLUDEFORIMPLIB modules; re-open
	fresh BFDs for any found and link into import lib archive chain.
	* pe-dll.h (exclude_type):  Add new enumerated type to replace magic
	constants previously used for exclude_list_struct type member.
	(pe_dll_add_excludes, pe_dll_generate_implib):  Update prototypes.
	* pep-dll.h (exclude_type, pe_dll_add_excludes,
	pe_dll_generate_implib):  Likewise to all the above.
	* emultempl/pe.em (OPTION_EXCLUDE_MODULES_FOR_IMPLIB):  Define new
	getopts long option code for new --exclude-modules-for-implib option.
	(gld${EMULATION_NAME}_add_options):  Add new entry to xtra_long[].
	(gld_${EMULATION_NAME}_list_options):  List usage for it.
	(gld${EMULATION_NAME}_handle_option):  Use exclude_type enumerated
	values when calling pe_dll_add_excludes, and handle EXCLUDEFORIMPLIB.
	(gld_${EMULATION_NAME}_finish):  Pass pointer to link_info when
	calling pe_dll_generate_implib.
	* emultempl/pep.em (options):  Define new enumerated value for getopts
	long option code for new --exclude-modules-for-implib option.
	(gld${EMULATION_NAME}_add_options, gld_${EMULATION_NAME}_list_options,
	gld${EMULATION_NAME}_handle_option, gld_${EMULATION_NAME}_finish):
	Again, likewise to all the above.
@
text
@d1303 1
a1303 1
       and several .idata$* sections. The .text section contains the
d1305 1
a1305 1
       jmp *__imp_<sym>. The .idata$5 contains the symbol definition
d1310 1
a1310 1
       symbol in .idata$5, in which case the jump stub code is not
d1628 1
a1628 1
   We handle grouped sections here as well.  A section named .foo$nn
d1648 1
a1648 1
      && (dollar = strchr (secname, '$')) != NULL)
d1757 1
a1757 1
	/* The section name has a '$'.  Sort it with the other '$'
d1771 1
a1771 1
	    if (strchr (lname, '$') == NULL)
@


1.138
log
@2008-11-14  Kai Tietz  <kai.tietz@@onevision.com>

	* emultempl/pep.em (..._before_parse): initialize
	pei386_runtime_pseudo_reloc by version 2.
	(OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC_V1): New option.
	(OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC_V2): New option.
	(make_import_fixup): Use relocation size to read addend.
	* emultempl/pe.em (..._before_parse): initialize
	pei386_runtime_pseudo_reloc by version 1.
	(OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC_V1): New option.
	(OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC_V2): New option.
	* pe-dll.c (pe-dll.h): Remove useless include.
	(make_runtime_pseudo_reloc): Change addend to use bfd_vma.
	Handle the two variants of pseudo-relocation.
	(pe_create_import_fixup): Change addend to type bfd_vma.
	Modify for the two pseudo_relocation variants.
	(runtime_pseudp_reloc_v2_init): New static variable.
	* pe-dll.h (pe_create_import_fixup): Change addend argument type
	to bfd_vma.
	* pep-dll.h (pep_create_import_fixup): Likewise.
	* NEWS: Add comment.
@
text
@d210 2
d245 1
d347 3
d607 1
a607 1
      pe_dll_add_excludes (optarg, 0);
d610 4
a613 1
      pe_dll_add_excludes (optarg, 1);
d1596 1
a1596 1
	pe_dll_generate_implib (pe_def_file, pe_implib_filename);
@


1.137
log
@	* ldemul.h (ldemul_place_orphan): Update prototype.
	(struct ld_emulation_xfer_struct <place_orphan>): Likewise.
	* ldemul.c (ldemul_place_orphan): Return pointer to output
	section statement.
	* emultempl/beos.em (gld${EMULATION_NAME}_place_orphan): Likewise.
	* emultempl/elf32.em (gld${EMULATION_NAME}_place_orphan): Likewise.
	* emultempl/mmo.em (mmo_place_orphan): Likewise.
	* emultempl/pe.em (gld_${EMULATION_NAME}_place_orphan): Likewise.
	* emultempl/pep.em (gld_${EMULATION_NAME}_place_orphan): Likewise.
@
text
@d149 1
a149 1
  link_info.pei386_runtime_pseudo_reloc = -1;
d206 4
d262 2
d648 6
@


1.136
log
@	* ldemul.c (ldemul_place_orphan): Add "constraint" param.
	* ldemul.h (ldemul_place_orphan): Update prototype.
	(struct ld_emulation_xfer_struct <place_orphan>): Likewise add param.
	* ldlang.c (unique_section_p): Make static.
	(lang_output_section_statement_lookup): Optimise creation of SPECIAL
	sections.
	(lang_insert_orphan): Add "constraint" param.  Pass to
	lang_enter_output_section_statement.
	(init_os): Don't use an existing bfd section for SPECIAL sections.
	(lang_place_orphans): Don't rename unique output sections, instead
	mark their output section statements SPECIAL.
	* ldlang.h (lang_insert_orphan): Update prototype.
	(unique_section_p): Delete.
	* emultempl/beos.em (place_orphan): Add "constraint" param.
	* emultempl/elf32.em (place_orphan): Likewise.  Don't match existing
	output sections if set.
	* emultempl/pe.em (place_orphan): Likewise.
	* emultempl/pep.em (place_orphan): Likewise.
	* emultempl/mmo.em (mmo_place_orphan): Update.
	* emultempl/spuelf.em (spu_place_special_section): Update.
@
text
@d1615 1
a1615 1
static bfd_boolean
d1771 1
a1771 1
  return TRUE;
@


1.135
log
@bfd/
	* elf.c (bfd_elf_set_group_contents): Assign sh_info for ld -r when
	the signature symbol is global.
	* elflink.c (elf_link_input_bfd): Ensure group signature symbol
	is output when ld -r.  Set group sh_info when local.
	* linker.c (default_indirect_link_order): Handle group sections
	specially.
ld/
	* ldemul.c (ldemul_place_orphan): Add "name" param.
	* ldemul.h (ldemul_place_orphan): Update prototype.
	(struct ld_emulation_xfer_struct <place_orphan>): Likewise.
	* ldlang.c (lang_place_orphans): Generate unique section names here..
	* emultempl/elf32.em (place_orphan): ..rather than here.  Don't
	directly use an existing output section statement that has no
	bfd section.
	* emultempl/pe.em (place_orphan): Likewise.
	* emultempl/pep.em (place_orphan): Likewise.
	* emultempl/beos.em (place_orphan): Adjust.
	* emultempl/spuelf.em (spu_place_special_section): Adjust
	place_orphan call.
	* emultempl/genelf.em (gld${EMULATION_NAME}_after_open): New function.
	(LDEMUL_AFTER_OPEN): Define.
@
text
@d1616 3
a1618 1
gld_${EMULATION_NAME}_place_orphan (asection *s, const char *secname)
a1635 2
  os = lang_output_section_find (secname);

d1638 2
a1639 1
  if (os != NULL
d1725 2
a1726 1
      os = lang_insert_orphan (s, secname, after, place, address, &add_child);
@


1.134
log
@* emultempl/pe.em (pe_find_data_imports): Add trailing newline
  to warning message.
  * emultempl/pep.em (pep_find_data_imports): Likewise.
@
text
@d1616 1
a1616 1
gld_${EMULATION_NAME}_place_orphan (asection *s)
d1618 1
a1618 2
  const char *secname;
  const char *orig_secname;
a1622 2
  secname = bfd_get_section_name (s->owner, s);

a1623 1
  orig_secname = secname;
d1627 1
a1627 1
      size_t len = dollar - orig_secname;
d1629 1
a1629 1
      memcpy (newname, orig_secname, len);
d1639 2
a1640 2
      && (os->bfd_section == NULL
	  || os->bfd_section->flags == 0
d1645 1
a1645 1
	 name, and its bfd section, if any, has compatible flags.
a1721 12
      /* Choose a unique name for the section.  This will be needed if the
	 same section name appears in the input file with different
	 loadable or allocatable characteristics.  */
      if (bfd_get_section_by_name (link_info.output_bfd, secname) != NULL)
	{
	  static int count = 1;
	  secname = bfd_get_unique_section_name (link_info.output_bfd,
						 secname, &count);
	  if (secname == NULL)
	    einfo ("%F%P: place_orphan failed: %E\n");
	}

@


1.133
log
@bfd/
	* bfd.c (struct _bfd): Correct outsymbols comment.
	* bfd-in2.h: Regenerate.
	* linker.c (bfd_generic_link_read_symbols): Renamed from..
	(generic_link_read_symbols): ..this, and made global.

include/
	* bfdlink.h (bfd_generic_link_read_symbols): Declare.
ld/
	PR 6478
	* ldcref.c (check_local_sym_xref): Use bfd_generic_link_read_symbols.
	Don't free symbol pointer array.
	(check_refs): Likewise.
	* ldmain.c (warning_callback): Likewise.
	* ldmisc.c (vfinfo): Likewise.
	* pe-dll.c (process_def_file): Likewise.
	(pe_walk_relocs_of_symbol, generate_reloc): Likewise.
	* emultempl/pe.em (pe_find_data_imports): Likewise.
	(gld_${EMULATION_NAME}_after_open): Likewise.
	* emultempl/pep.em (pep_find_data_imports): Likewise.
	(gld_${EMULATION_NAME}_after_open): Likewise.
	* ldlang.h (lang_input_statement_type): Delete asymbols, symbol_count,
	passive_position, closed.
	* ldlang.c (new_afile): Don't set asymbols and symbol_count.
	* ldmain.c (add_archive_element): xcalloc lang_input_statement_type.
@
text
@d939 1
a939 1
This should work unless it involves constant data structures referencing symbols from auto-imported DLLs."));
d1125 1
a1125 1
			einfo ("%X%P: unable to process relocs: %E");
d1383 1
a1383 1
	    einfo (_("Errors encountered processing file %s for interworking"),
@


1.133.2.1
log
@        * emultempl/pe.em (pe_find_data_imports): Add trailing newline
        to warning message.
        * emultempl/pep.em (pep_find_data_imports): Likewise.
@
text
@d939 1
a939 1
This should work unless it involves constant data structures referencing symbols from auto-imported DLLs.\n"));
d1125 1
a1125 1
			einfo ("%X%P: unable to process relocs: %E\n");
d1383 1
a1383 1
	    einfo (_("Errors encountered processing file %s for interworking\n"),
@


1.133.2.2
log
@backport 2008-10-03  Alan Modra  <amodra@@bigpond.net.au>
@
text
@d1616 1
a1616 1
gld_${EMULATION_NAME}_place_orphan (asection *s, const char *secname)
d1618 2
a1619 1
  const char *orig_secname = secname;
d1624 2
d1627 1
d1631 1
a1631 1
      size_t len = dollar - secname;
d1633 1
a1633 1
      memcpy (newname, secname, len);
d1643 2
a1644 2
      && os->bfd_section != NULL
      && (os->bfd_section->flags == 0
d1649 1
a1649 1
	 name, and its bfd section has compatible flags.
d1726 12
@


1.133.2.3
log
@backport 2008-10-04  Alan Modra  <amodra@@bigpond.net.au>
@
text
@d1616 1
a1616 3
gld_${EMULATION_NAME}_place_orphan (asection *s,
				    const char *secname,
				    int constraint)
d1634 2
d1638 1
a1638 2
  if (constraint == 0
      && (os = lang_output_section_find (secname)) != NULL
d1724 1
a1724 2
      os = lang_insert_orphan (s, secname, constraint, after, place, address,
			       &add_child);
@


1.133.2.4
log
@backport 2009-02-16  Alan Modra  <amodra@@bigpond.net.au>
@
text
@d13 1
a13 1
   2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.
d700 1
d723 3
a725 1
  push_stat_ptr (&abs_output_section->children);
d747 1
a747 1
  pop_stat_ptr ();
@


1.132
log
@Silence gcc printf warnings
@
text
@d925 1
a925 1
	      int nsyms, symsize, i;
d943 8
a950 3
	      symsize = bfd_get_symtab_upper_bound (b);
	      symbols = (asymbol **) xmalloc (symsize);
	      nsyms = bfd_canonicalize_symtab (b, symbols);
a1101 1
		    long symsize;
a1106 3
		    symsize = bfd_get_symtab_upper_bound (is->the_bfd);
		    if (symsize < 1)
		      break;
d1111 1
a1111 3
		    symbols = (asymbol **) xmalloc (symsize);
		    symsize = bfd_canonicalize_symtab (is->the_bfd, symbols);
		    if (symsize < 0)
d1113 2
a1114 1
			einfo ("%X%P: unable to process symbols: %E");
d1117 1
a1312 1
		long symsize;
d1314 1
a1314 1
		long src_count;
d1317 8
a1324 3
		symsize = bfd_get_symtab_upper_bound (is->the_bfd);
		symbols = xmalloc (symsize);
		symsize = bfd_canonicalize_symtab (is->the_bfd, symbols);
d1326 1
a1326 1
		for (src_count = 0; src_count < symsize; src_count++)
a1342 1
		free (symbols);
@


1.131
log
@include/
	* bfdlink.h (struct bfd_link_hash_table): Delete creator field.
	(struct bfd_link_info): Add output_bfd.
bfd/
	* elflink.c: Replace all accesses to hash->creator field with
	output_bfd->xvec.
	* cofflink.c: Likewise.
	* coff-h8300.c: Likewise.
	* ecoff.c: Likewise.
	* elf32-m68hc1x.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-ppc.c: Likewise.
	* elf64-sparc.c: Likewise.
	* elfxx-mips.c: Likewise.
	* i386linux.c: Likewise.
	* m68klinux.c: Likewise.
	* sparclinux.c: Likewise.
	* sunos.c: Likewise.
	* xcofflink.c: Likewise.
	* linker.c: Likewise.
	(_bfd_link_hash_table_init): Don't store creator.
ld/
	* ldmain.h (output_bfd): Delete.
	* ldmain.c (output_bfd): Delete.
	Replace all occurrences of output_bfd with link_info.output_bfd.
	* ldcref.c: Likewise.
	* ldctor.c: Likewise.
	* ldemul.c: Likewise.
	* ldexp.c: Likewise.
	* ldfile.c: Likewise.
	* ldlang.c: Likewise.
	* ldmisc.c: Likewise.
	* ldwrite.c: Likewise.
	* pe-dll.c: Likewise.
	* emultempl/aix.em: Likewise.
	* emultempl/alphaelf.em: Likewise.
	* emultempl/armcoff.em: Likewise.
	* emultempl/armelf.em: Likewise.
	* emultempl/avrelf.em: Likewise.
	* emultempl/beos.em: Likewise.
	* emultempl/elf-generic.em: Likewise.
	* emultempl/elf32.em: Likewise.
	* emultempl/gld960.em: Likewise.
	* emultempl/hppaelf.em: Likewise.
	* emultempl/irix.em: Likewise.
	* emultempl/linux.em: Likewise.
	* emultempl/lnk960.em: Likewise.
	* emultempl/m68hc1xelf.em: Likewise.
	* emultempl/mmix-elfnmmo.em: Likewise.
	* emultempl/mmo.em: Likewise.
	* emultempl/pe.em: Likewise.
	* emultempl/pep.em: Likewise.
	* emultempl/ppc32elf.em: Likewise.
	* emultempl/ppc64elf.em: Likewise.
	* emultempl/scoreelf.em: Likewise.
	* emultempl/sh64elf.em: Likewise.
	* emultempl/spuelf.em: Likewise.
	* emultempl/sunos.em: Likewise.
	* emultempl/vanilla.em: Likewise.
	* emultempl/vxworks.em: Likewise.
	* emultempl/xtensaelf.em: Likewise.
	* emultempl/z80.em: Likewise.
	* ldlang.c (open_output): Don't return output, instead write
	link_info_output_bfd directly.
	* emultempl/alphaelf.em: Replace occurrences of link_info.hash->creator
	with link_info.output_bfd->xvec.
	* emultempl/hppaelf.em: Likewise.
	* emultempl/ppc32elf.em: Likewise.
	* emultempl/ppc64elf.em: Likewise.
	* emultempl/spuelf.em: Likewise.
@
text
@d888 1
a888 1
	    (long) rel->address, (long) rel->addend);
@


1.130
log
@Add __ImageBase symbol to pe.em and pep.em.
@
text
@d13 1
a13 1
   2005, 2006, 2007 Free Software Foundation, Inc.
d1011 8
a1018 6
  if (coff_data (output_bfd) == NULL || coff_data (output_bfd)->pe == 0)
    einfo (_("%F%P: cannot perform PE operations on non PE output file '%B'.\n"), output_bfd);

  pe_data (output_bfd)->pe_opthdr = pe;
  pe_data (output_bfd)->dll = init[DLLOFF].value;
  pe_data (output_bfd)->real_flags |= real_flags;
d1024 1
a1024 1
  pe_process_import_defs (output_bfd, & link_info);
d1033 1
a1033 1
    pe_dll_build_sections (output_bfd, &link_info);
d1035 1
a1035 1
    pe_exe_build_sections (output_bfd, &link_info);
d1038 1
a1038 1
    pe_dll_build_sections (output_bfd, &link_info);
d1043 1
a1043 1
  if (strstr (bfd_get_target (output_bfd), "arm") == NULL)
d1456 4
a1459 3
	      pe.ImageBase =
		pe_data (output_bfd)->pe_opthdr.ImageBase =
		init[IMAGEBASEOFF].value = pe_def_file->base_address;
d1462 2
a1463 2
		image_base_statement->exp =
		  exp_assop ('=', "__image_base__", exp_intop (pe.ImageBase));
d1537 1
a1537 1
		 + bfd_get_section_vma (output_bfd,
d1569 1
a1569 1
      pe_dll_fill_sections (output_bfd, &link_info);
d1577 1
a1577 1
      pe_exe_fill_sections (output_bfd, &link_info);
d1587 1
a1587 1
    asection *asec = bfd_get_section_by_name (output_bfd, ".idata");
d1725 1
a1725 1
      if (bfd_get_section_by_name (output_bfd, secname) != NULL)
d1728 2
a1729 1
	  secname = bfd_get_unique_section_name (output_bfd, secname, &count);
@


1.129
log
@PR linker/4844
* emultempl/pep.em (pep_find_data_imports): Issue a warning message if auto importing is triggered without
  --enable-auto-import having been specified on the command line.
* emultempl/pe.em (pe_find_data_imports): Likewise.
@
text
@d289 2
d379 2
d715 1
@


1.128
log
@PR linker/4844
* genscript.sh: Add support for generating a .xa script for use with the --auto-import option.
* ld.texinfo: Document the new behaviour of the --auto-import option.
* ldint.texinfo: Document new script generation.
* emulparams/i386pe.sh (GENERATE_AUTO_IMPORT): Define.
* emulparams/i386pe_posix.sh (GENERATE_AUTO_IMPORT): Define.
* emulparams/i386pep.sh (GENERATE_AUTO_IMPORT): Define.
* emultemp/pe.em (..._get_script): Support the use of the auto import script.
* scripttempl/pe.sc: Put the .rdata input sections into the .data output section when creating an auto import script.
* scripttempl/pep.sc: Likewise.
@
text
@d923 14
a936 2
		info_msg (_("Info: resolving %s by linking to %s (auto-import)\n"),
			  undef->root.string, buf);
@


1.127
log
@	* ldexp.c (exp_get_vma, exp_get_fill): Canonicalise error messages.
	* lexsup.c (ld_options): Don't use tabs in help text.
	* emultempl/armcoff.em (gld${EMULATION_NAME}_finish): Fix typo.
	* emultempl/pe.em (gld${EMULATION_NAME}_finish): Fix typo.
@
text
@d1894 4
@


1.126
log
@2007-07-19  Roland McGrath  <roland@@redhat.com>

	* genscripts.sh (source_em, fragment): New sh functions.
	Truncate e${EMULATION_NAME}.c file before .em script fills it.
	Use source_em in place of . for the .em script.
	* emultempl/generic.em: Use fragment and source_em functions.
	* emultempl/aix.em: Likewise.
	* emultempl/alphaelf.em: Likewise.
	* emultempl/armcoff.em: Likewise.
	* emultempl/armelf.em: Likewise.
	* emultempl/avrelf.em: Likewise.
	* emultempl/beos.em: Likewise.
	* emultempl/cr16elf.em: Likewise.
	* emultempl/crxelf.em: Likewise.
	* emultempl/elf-generic.em: Likewise.
	* emultempl/elf32.em: Likewise.
	* emultempl/genelf.em: Likewise.
	* emultempl/gld960.em: Likewise.
	* emultempl/gld960c.em: Likewise.
	* emultempl/hppaelf.em: Likewise.
	* emultempl/ia64elf.em: Likewise.
	* emultempl/irix.em: Likewise.
	* emultempl/linux.em: Likewise.
	* emultempl/lnk960.em: Likewise.
	* emultempl/m68hc1xelf.em: Likewise.
	* emultempl/m68kcoff.em: Likewise.
	* emultempl/m68kelf.em: Likewise.
	* emultempl/mipsecoff.em: Likewise.
	* emultempl/mipself.em: Likewise.
	* emultempl/mmix-elfnmmo.em: Likewise.
	* emultempl/mmixelf.em: Likewise.
	* emultempl/mmo.em: Likewise.
	* emultempl/needrelax.em: Likewise.
	* emultempl/netbsd.em: Likewise.
	* emultempl/pe.em: Likewise.
	* emultempl/pep.em: Likewise.
	* emultempl/ppc32elf.em: Likewise.
	* emultempl/ppc64elf.em: Likewise.
	* emultempl/scoreelf.em: Likewise.
	* emultempl/sh64elf.em: Likewise.
	* emultempl/spuelf.em: Likewise.
	* emultempl/sunos.em: Likewise.
	* emultempl/ticoff.em: Likewise.
	* emultempl/vanilla.em: Likewise.
	* emultempl/vxworks.em: Likewise.
	* emultempl/xtensaelf.em: Likewise.
	* emultempl/z80.em: Likewise.
@
text
@d1536 1
a1536 1
	einfo (_("%P: warning: connot find thumb start symbol %s\n"), thumb_entry_symbol);
@


1.125
log
@Update sources to GPLv3
@
text
@d11 1
a11 1
cat >>e${EMULATION_NAME}.c <<EOF
d54 1
a54 1
 
d1290 1
a1290 1
   
d1783 1
a1783 1
      /* The 'native' spelling of an import lib name is "foo.lib".  */  	
d1840 1
a1840 1
#ifdef DLL_SUPPORT 
d1880 1
a1880 1
cat >>e${EMULATION_NAME}.c <<EOF
d1898 1
a1898 1
cat >>e${EMULATION_NAME}.c <<EOF
@


1.124
log
@
bfd/
	Many files: Include sysdep.h before bfd.h.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
binutils/
	* bucumm.h: Split off host dependencies to..
	* sysdep.h: ..here.
	Many files: Include sysdep.h.  Remove duplicate headers and reorder.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
ld/
	Many files: Include sysdep.h first.  Remove duplicate headers.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
opcodes/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* ns32k-dis.c: Include sysdep.h first.
@
text
@d12 1
a12 2
/* This file is part of GLD, the Gnu Linker.
   Copyright 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
d15 2
d19 1
a19 1
   the Free Software Foundation; either version 2 of the License, or
d29 3
a31 1
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
@


1.123
log
@* pe-dll.c: (make_one) Conditionally include jump stubs.
* emultempl/pe.em (gld_${EMULATION_NAME}_after_open): Identify
  redundant jump stubs from import libraries and exclude them from link.
@
text
@d52 1
a53 1
#include "sysdep.h"
@


1.122
log
@* pe-dll.c (pe_bfd_is_dll): New function.
* pe-dll.h (pe_bfd_is_dll): Declare.
* emultempl/pe.em (gld_${EMULATION_NAME}_recognized_file): Recognize dlls using
pe_bfd_is_dll instead of using the filename extension.
@
text
@d14 1
a14 1
   2005, 2006 Free Software Foundation, Inc.
d1253 68
@


1.121
log
@* pe-dll.c : Fix typo.
  (autofilter_symbolprefixlist) : Remove __imp_.
  (is_import) : New.
  (auto-export) : Remove  re-import check. Moved to callers.
  (process_def_file) : Check is symbol is an import. Always underscore __imp_.
  Only skip underscore on underscored targets.
  (make_one) : Always underscore __imp_.
  (pe_create_runtime_relocator_reference) : Only underscore _pei386_runtime_relocator on underscored targets.
  (pe_process_import_defs) : Always underscore __imp_.
* pe.em (U) : New macro.
  (set_pe_subsystem) : Remove underscore from _WinMainCRTStartup on wince subsystem case.
  (pe_find_data_imports) : Use U on "_head_".
  (gld_${EMULATION_NAME}_unrecognized_file) : Use U.
@
text
@d1418 2
a1419 13
  if (bfd_get_format (entry->the_bfd) == bfd_object)
    {
      char fbuf[LD_PATHMAX + 1];
      const char *ext;

      if (REALPATH (entry->filename, fbuf) == NULL)
	strncpy (fbuf, entry->filename, sizeof (fbuf));

      ext = fbuf + strlen (fbuf) - 4;

      if (strcmp (ext, ".dll") == 0 || strcmp (ext, ".DLL") == 0)
	return pe_implied_import_dll (fbuf);
    }
@


1.120
log
@* bfd-in.h (STRING_AND_COMMA): New macro.  Takes one constant string as its
  argument and emits the string followed by a comma and then the length of
  the string.
  (CONST_STRNEQ): New macro.  Checks to see if a variable string has a constant
  string as its initial characters.
  (CONST_STRNCPY): New macro.  Copies a constant string to the start of a
  variable string.
* bfd-in2.h: Regenerate.
* <remainign files>: Make use of the new macros.
@
text
@d118 1
d404 1
a404 1
      { "wince",   9, "_WinMainCRTStartup" },
d929 1
a929 1
		  if (! CONST_STRNEQ (symbols[i]->name, "__head_"))
d936 1
a936 1
						sizeof ("__head_") - 1);
d1346 1
a1346 1
	      sprintf (buf, "_%s", pe_def_file->exports[i].internal_name);
@


1.119
log
@bfd
* Makefile.am: Add rules to build pe-arm-wince.lo and pei-arm-wince.lo objects.
* Makefile.in: Regenerate.
* pe-arm-wince.c: New file.
* pei-arm-wince.c: New file.
* pei-arm.c: Remove ARM_WINCE block.
* pe-arm.c: Remove ARM_WINCE block. Rename
bfd_arm_pe_allocate_interworking_sections,
bfd_arm_pe_get_bfd_for_interworking, and
bfd_arm_pe_process_before_allocation to
bfd_armpe_allocate_interworking_sections,
bfd_armpe_get_bfd_for_interworking, and
bfd_armpe_process_before_allocation. Move them before including bfd.h.
* bfd.c: ARM wince bfd format names were renamed. Adjust.
* coff-arm.c [ARM_WINCE]: Adjust so Windows CE doesn't end up with unexpected/conflicting relocs.
* targets.c: The arm-wince-pe target got its own new vector.  Adjust.
* config.bfd: Likewise.
* configure.in: Likewise.
* configure: Regenerate.

binutils
* configure.in: Split arm-pe and arm-wince-pe. Build dlltool with -DDLLTOOL_ARM_WINCE for Windows CE case.
* configure: Regenerate.
* dlltool.c: Add support for arm-wince.

gas
* Makefile.am (TARG_ENV_HFILES): Add te-wince-pe.h.
* Makefile.in: Regenerate.
* config/tc-arm.h [TARGET_FORMAT]: ARM wince bfd names were  renamed. Adjust.

ld
* Makefile.am: Split arm-wince into its own emulation.
* Makefile.in: Regenerate.
* configure.tgt: Set targ_emul to arm_wince_pe for ARM Windows CE targets.
* pe-dll.c : Define PE_ARCH_arm_wince.
  (pe_detail_list): Add PE_ARCH_arm_wince case.
  (make_one): Handle PE_ARCH_arm_epoc and PE_ARCH_arm_wince cases.
* emulparams/arm_wince_pe.sh: New file.
* emultempl/pe.em: Handle new TARGET_IS_arm_wince_pe define.
  Remap bfd_arm_allocate_interworking_sections, bfd_arm_get_bfd_for_interworking and
  bfd_arm_process_before_allocation for arm-pe and arm-wince-pe targets too.
  (gld_${EMULATION_NAME}_recognized_file): Handle arm-wince and arm-epoc bfd format names.
@
text
@d928 1
a928 2
		  if (memcmp (symbols[i]->name, "__head_",
			      sizeof ("__head_") - 1))
d1062 1
a1062 1
		if (strncmp (sec->name, ".idata\$", 7) == 0)
@


1.118
log
@* emultempl/pe.em (gld_$_open_dynamic_archive): Compute maximum length of
  format strings in the libname_fmt[] array, rather than relying upon a
  statically chosen value.  Adjust xmalloc call to use this longest length.
@
text
@d40 10
a49 7
#ifdef TARGET_IS_arm_epoc_pe
#define bfd_arm_pe_allocate_interworking_sections \
	bfd_arm_epoc_pe_allocate_interworking_sections
#define bfd_arm_pe_get_bfd_for_interworking \
	bfd_arm_epoc_pe_get_bfd_for_interworking
#define bfd_arm_pe_process_before_allocation \
	bfd_arm_epoc_pe_process_before_allocation
d51 1
a51 1

d91 6
a96 4
#if defined(TARGET_IS_i386pe)
#define DLL_SUPPORT
#endif
#if defined(TARGET_IS_shpe) || defined(TARGET_IS_mipspe) || defined(TARGET_IS_armpe)
d107 2
a108 1
#ifdef TARGET_IS_armpe
d148 1
a148 1
#if defined TARGET_IS_mipspe || defined TARGET_IS_armpe
d291 1
a291 1
#ifdef TARGET_IS_armpe
d1006 4
a1009 3
#if ! (defined (TARGET_IS_i386pe) || defined (TARGET_IS_armpe))
  if (link_info.shared)
#else
a1010 1
#endif
a1011 3

#ifndef TARGET_IS_i386pe
#ifndef TARGET_IS_armpe
d1014 3
d1018 1
a1018 2
#endif
#endif
d1020 1
a1020 1
#if defined(TARGET_IS_armpe) || defined(TARGET_IS_arm_epoc_pe)
d1034 1
a1034 1
	if (bfd_arm_pe_get_bfd_for_interworking (is->the_bfd, & link_info))
d1275 1
a1275 1
#if defined(TARGET_IS_armpe) || defined(TARGET_IS_arm_epoc_pe)
d1285 1
a1285 1
	if (! bfd_arm_pe_process_before_allocation
d1296 2
a1297 2
  bfd_arm_pe_allocate_interworking_sections (& link_info);
#endif /* TARGET_IS_armpe */
d1412 6
d1438 1
a1438 1
#if defined(TARGET_IS_armpe) || defined(TARGET_IS_arm_epoc_pe)
d1478 1
a1478 1
#endif /* defined(TARGET_IS_armpe) || defined(TARGET_IS_arm_epoc_pe) */
@


1.117
log
@PR ld/2757
* emultempl/pe.em (gld_$_after_open): When reporting non PE format output
  files mention the file name and the fact that it is an output file.
@
text
@d1727 1
d1739 13
d1754 1
a1754 6
			 /* Allow space for the characters in the format
			    string.  Also allow for the path separator that
			    is appended after the search name. We actually
			    allow 1 more byte than is strictly necessary,
			    but this will not hurt.  */
			 + sizeof libname_fmt[0].format
d1759 4
a1762 1
			 + 1);
@


1.116
log
@Correct comment.
@
text
@d986 1
a986 1
    einfo (_("%F%P: PE operations on non PE file.\n"));
@


1.115
log
@* emultempl/pe.em (gld_${EMULATION_NAME}_open_dynamic_archive): Restructure.
  Add native "%s.lib" format to search list
* ld.texinfo (node WIN32): Update documentation on dynamic lib search order.
   Add another reason for using import libs.
@
text
@d1741 4
a1744 2
			    string.  We actually allow 2 more bytes than
			    necessary, but this will not hurt.  */
@


1.114
log
@Apply fixes to allow arm WinCE toolchain to produce working executables.
@
text
@d14 1
a14 1
   2005 Free Software Foundation, Inc.
d1697 30
d1728 4
a1731 1
  char * string;
d1738 6
a1743 3
  string = (char *) xmalloc (strlen (search->name)
			     + strlen (filename)
			     + sizeof "/lib.a.dll"
d1745 2
a1746 1
			     + (pe_dll_search_prefix ? strlen (pe_dll_search_prefix) : 0)
d1748 1
a1748 1
			     + 1);
d1750 2
a1751 2
  /* Try "libfoo.dll.a" first (preferred explicit import library for dll's.  */
  sprintf (string, "%s/lib%s.dll.a", search->name, filename);
d1753 1
a1753 1
  if (! ldfile_try_open_bfd (string, entry))
d1755 2
a1756 3
      /* Try "foo.dll.a" next (alternate explicit import library for dll's.  */
      sprintf (string, "%s/%s.dll.a", search->name, filename);
      if (! ldfile_try_open_bfd (string, entry))
d1758 5
a1762 36
	  /* Try libfoo.a next. Normally, this would be interpreted as a static
	     library, but it *could* be an import library. For backwards compatibility,
	     libfoo.a needs to ==precede== libfoo.dll and foo.dll in the search,
	     or sometimes errors occur when building legacy packages.

	     Putting libfoo.a here means that in a failure case (i.e. the library
	     -lfoo is not found) we will search for libfoo.a twice before
	     giving up -- once here, and once when searching for a "static" lib.
	     for a "static" lib.  */
	  /* Try "libfoo.a" (import lib, or static lib, but must
	     take precedence over dll's).  */
	  sprintf (string, "%s/lib%s.a", search->name, filename);
	  if (! ldfile_try_open_bfd (string, entry))
	    {
#ifdef DLL_SUPPORT
	      if (pe_dll_search_prefix)
		{
		  /* Try "<prefix>foo.dll" (preferred dll name, if specified).  */
		  sprintf (string, "%s/%s%s.dll", search->name, pe_dll_search_prefix, filename);
		  if (! ldfile_try_open_bfd (string, entry))
		    {
		      /* Try "libfoo.dll" (default preferred dll name).  */
		      sprintf (string, "%s/lib%s.dll", search->name, filename);
		      if (! ldfile_try_open_bfd (string, entry))
			{
			  /* Finally, try "foo.dll" (alternate dll name).  */
			  sprintf (string, "%s/%s.dll", search->name, filename);
			  if (! ldfile_try_open_bfd (string, entry))
			    {
			      free (string);
			      return FALSE;
			    }
			}
		    }
		}
	      else /* pe_dll_search_prefix not specified.  */
d1764 10
a1773 16
		{
		  /* Try "libfoo.dll" (preferred dll name).  */
		  sprintf (string, "%s/lib%s.dll", search->name, filename);
		  if (! ldfile_try_open_bfd (string, entry))
		    {
		      /* Finally, try "foo.dll" (alternate dll name).  */
		      sprintf (string, "%s/%s.dll", search->name, filename);
		      if (! ldfile_try_open_bfd (string, entry))
			{
			  free (string);
			  return FALSE;
			}
		    }
		}
	    }
	}
d1776 1
a1776 1
  entry->filename = string;
@


1.113
log
@bfd/
	* elf-bfd.h (_bfd_generic_match_sections_by_type): Don't define.
	* libbfd-in.h (_bfd_generic_match_sections_by_type): Delete.
	* libbfd.c (_bfd_generic_match_sections_by_type): Delete.
	* targets.c (bfd_match_sections_by_type): Don't define.
	(BFD_JUMP_TABLE_LINK): Remove _bfd_generic_match_sections_by_type.
	* coff-rs6000.c (rs6000coff_vec, pmac_xcoff_vec): Likewise.
	* coff64-rs6000.c (rs6000coff64_vec, aix5coff64_vec): Likewise.
	* bfd-in2.h: Regenerate.
	* libbfd.h: Regenerate.
ld/
	* ldlang.c (lang_output_section_find_by_flags): Add match_type param.
	Run two passes, first using match_type, second without.
	* ldlang.h (lang_match_sec_type_func): New typedef.
	(lang_output_section_find_by_flags): Update prototype.
	bfd_match_sections_by_type and lang_output_section_find_by_flags.
	* emultempl/pe.em (place_orphan): Likewise.
@
text
@d286 1
a286 1
  D(MajorSubsystemVersion,"__major_subsystem_version__", 2),
@


1.112
log
@	* ldlang.h (lang_input_section_type): Remove "ifile" field.
	(lang_insert_orphan, lang_add_section): Update prototypes.
	* ldlang.c (lang_insert_orphan): Remove "file" param.
	(lang_add_section): Likewise.  Update all callers.
	(wild_sort): Get an input section's bfd via "section->owner".
	(size_input_section): Access just_syms_flag via bfd usrdata.
	(lang_place_orphans): Update ldemul_place_orphan call.
	* ldemul.h (ldemul_place_orphan): Remove input_statement param.
	(struct ld_emulation_xfer_struct <place_orphan>): Likewise.
	* ldemul.c (ldemul_place_orphan): Likewise.
	* ldwrite.c (build_link_order): Access just_syms_flag via bfd usrdata.
	* emultempl/armelf.em (arm_elf_set_bfd_for_interworking): Likewise.
	* emultempl/beos.em (sort_by_file_name): Access bfd by section->owner.
	(sort_sections): Likewise.
	(place_orphan): Remove "file" param.  Adjust lang_add_section call.
	* emultempl/elf32.em (place_orphan): Remove "file" param.  Adjust
	lang_add_section and lang_insert_orphan calls.
	* emultempl/hppaelf.em (hppaelf_add_stub_section): Adjust
	lang_add_section call.
	(build_section_lists): Access just_syms_flag via bfd usrdata.
	* emultempl/m68hc1xelf.em (m68hc11elf_add_stub_section): Adjust
	lang_add_section call.
	* emultempl/mmo.em (mmo_place_orphan): Remove "file" param.  Adjust
	lang_add_section and lang_insert_orphan calls.
	* emultempl/pe.em (place_orphan): Likewise.  Access bfd via section
	owner.
	* emultempl/ppc64elf.em (ppc_add_stub_section): Adjust
	lang_add_section call.
	(build_toc_list): Access just_syms_flag via bfd usrdata.
	(build_section_lists): Likewise.
	* emultempl/xtensaelf.em (elf_xtensa_place_orphan): Remove "file"
	param.  Adjust place_orphan call.
	(ld_build_required_section_dependence): Access bfd via section owner.
@
text
@d1624 1
a1624 1
	    after = lang_output_section_find_by_flags (s, &place->os);
@


1.111
log
@	* emultempl/pe.em (gld_${EMULATION_NAME}_before_parse):	Set
	default entry symbol to ENTRY here.
	* scripttempl/pe.sc: Not here.
@
text
@d1521 1
a1521 1
gld_${EMULATION_NAME}_place_orphan (lang_input_statement_type *file, asection *s)
d1558 1
a1558 1
      lang_add_section (&add_child, s, os, file);
d1644 1
a1644 2
      os = lang_insert_orphan (file, s, secname, after, place, address,
			       &add_child);
d1667 1
a1667 1
	    lname = bfd_get_section_name (ls->ifile->the_bfd, ls->section);
@


1.110
log
@bfd/
	* elf32-ppc.c (struct elf_linker_section): Replace sym_val field
	with sym.
	(ppc_elf_relocate_section): Adjust for above.
	(create_sdata_sym): New function.
	(ppc_elf_create_linker_section): Call it.
	(ppc_elf_check_relocs): Correct has_sda_refs and non_got_refs.
	Create sdata syms for all SDA relocs.
	(ppc_elf_adjust_dynamic_symbol): Don't special case _SDA_BASE_
	and _SDA2_BASE_.
	(ppc_elf_set_sdata_syms): Delete.
	* elflink.c (bfd_elf_size_dynamic_sections): Don't create DT_INIT
	and DT_FINI tags unless associated section has input.
	(bfd_elf_set_symbol, _bfd_elf_provide_symbol): Delete.
	(_bfd_elf_provide_section_bound_symbols): Delete.
	* bfd-in.h (_bfd_elf_provide_symbol): Delete.
	(_bfd_elf_provide_section_bound_symbols): Delete.
	* bfd-in2.h: Regenerate.
ld/
	* ldemul.c (ldemul_do_assignments, do_assignments_default): Delete.
	* ldemul.h (ldemul_do_assignments, do_assignments_default): Delete.
	(struct ld_emulation_xfer_struct): Remove do_assignments field.
	* ldlang.c (lang_do_assignments): Don't call ldemul_do_assignments.
	* emulparams/elf32ppc.sh (SDATA_START_SYMBOLS): New.
	(SDATA2_START_SYMBOLS, SBSS_START_SYMBOLS, SBSS_END_SYMBOLS): New.
	* emultempl/aix.em (ld_*_emulation): Delete do_assignments init.
	* emultempl/armcoff.em: Likewise.
	* emultempl/beos.em: Likewise.
	* emultempl/generic.em: Likewise.
	* emultempl/gld960.em: Likewise.
	* emultempl/gld960c.em: Likewise.
	* emultempl/linux.em: Likewise.
	* emultempl/lnk960.em: Likewise.
	* emultempl/m68kcoff.em: Likewise.
	* emultempl/pe.em: Likewise.
	* emultempl/sunos.em: Likewise.
	* emultempl/ticoff.em: Likewise.
	* emultempl/vanilla.em: Likewise.
	* emultempl/elf32.em: Likewise.
	(gld*_provide_bound_symbols): Delete.
	(gld*_provide_init_fini_syms): Delete.
	(gld*_before_allocation): Don't call ldemul_do_assignments.
	* emultempl/ppc32elf.em (ppc_do_assignments): Delete.
	(LDEMUL_DO_ASSIGNMENTS): Delete.
	* scripttempl/elf.sc: Provide init/fini syms.  Add SBSS_START_SYMBOLS,
	SBSS_END_SYMBOLS, SDATA2_START_SYMBOLS.
@
text
@d3 1
d147 2
@


1.109
log
@bfd/
	* elflink.c (fix_syms, _bfd_elf_fix_excluded_sec_syms): Move to..
	* linker.c (fix_syms, _bfd_fix_excluded_sec_syms): ..here.
	* bfd-in.h (_bfd_fix_excluded_sec_syms): Rename.
	* bfd-in2.h: Regenerate.
ld/
	* ldemul.c (ldemul_finish): Call ld_emulation->finish unconditionally.
	(finish_default): New function.
	* ldemul.h (finish_default): Declare.
	* emultempl/aix.em (gld*_before_allocation): Call
	before_allocation_default rather than strip_excluded_output_sections.
	(ld_*_emulation): Init finish field to finish_default.
	* emultempl/armcoff.em: Likewise.
	* emultempl/beos.em: Likewise.
	* emultempl/elf32.em: Likewise.
	* emultempl/generic.em: Likewise.
	* emultempl/gld960.em: Likewise.
	* emultempl/gld960c.em: Likewise.
	* emultempl/hppaelf.em: Likewise.
	* emultempl/linux.em: Likewise.
	* emultempl/lnk960.em: Likewise.
	* emultempl/m68kcoff.em: Likewise.
	* emultempl/mmo.em: Likewise.
	* emultempl/pe.em: Likewise.
	* emultempl/ppc64elf.em: Likewise.
	* emultempl/sunos.em: Likewise.
	* emultempl/ticoff.em: Likewise.
	* emultempl/vanilla.em: Likewise.
@
text
@a1825 1
  do_assignments_default,
@


1.108
log
@	* ldemul.c (ldemul_do_assignments): New function.
	(do_assignments_default): New function.
	* ldemul.h (ldemul_do_assignments): Declare.
	(do_assignments_default): Declare.
	(struct ld_emulation_xfer_struct): Add do_assignments.
	* ldlang.c (lang_do_assignments) Call ldemul_do_assignments.
	* emultempl/aix.em (ld_*_emulation): Init do_assignments field.
	* emultempl/armcoff.em: Likewise.
	* emultempl/beos.em: Likewise.
	* emultempl/generic.em: Likewise.
	* emultempl/gld960.em: Likewise.
	* emultempl/gld960c.em: Likewise.
	* emultempl/linux.em: Likewise.
	* emultempl/lnk960.em: Likewise.
	* emultempl/m68kcoff.em: Likewise.
	* emultempl/pe.em: Likewise.
	* emultempl/sunos.em: Likewise.
	* emultempl/ticoff.em: Likewise.
	* emultempl/vanilla.em: Likewise.
	* emultempl/elf32.em: Likewise, to call gld*_provide_init_fini_syms.
	(gld*_find_exp_assignment): Adjust bfd_elf_record_link_assignment call.
@
text
@d1291 1
a1291 2
  if (!link_info.relocatable)
    strip_excluded_output_sections ();
d1466 2
@


1.107
log
@* emultempl/pe.em (gld_${EMULATION_NAME}_before_parse): Enable runtime
relocation by default.
(compute_dll_image_base): Avoid linking into cygwin dll address space.
@
text
@d1825 1
@


1.106
log
@ld:
	* ldlang.c (entry_symbol_default): New file-scope global.
	(lang_finish): Use it, not a hardwired "start".
	(lang_default_entry): Set it.
	* ldlang.h: Declare lang_default_entry.
	* emultempl/beos.em, emultempl/pe.em: Use lang_default_entry,
	not lang_add_entry, to override default entry point symbol.

ld/testsuite:
	* ld-scripts/align.exp: Mark align1 XFAIL on PECOFF targets.
	* ld-scripts/data.exp: Mark data UNSUPPORTED on a.out targets.
	* ld-scripts/provide.exp, ld-scripts/size.exp: Mark all tests
	UNSUPPORTED on a.out targets.  Tidy.
@
text
@d138 1
a138 1
  link_info.pei386_runtime_pseudo_reloc = FALSE;
d670 1
a670 1
  return 0x60000000 | ((hash << 16) & 0x0FFC0000);
@


1.105
log
@Update FSF addresses
@
text
@d142 1
a142 1
  lang_add_entry ("WinMainCRTStartup", FALSE);
d144 1
a144 1
  lang_add_entry ("_WinMainCRTStartup", FALSE);
d460 1
a460 1
      /* lang_add_entry expects its argument to be permanently
d470 1
a470 1
  lang_add_entry (entry, FALSE);
@


1.104
log
@bfd/
	* section.c (struct bfd_section): Replace link_order_head and
	link_order_tail with map_head and map_tail union.
	(STD_SECTION): Update.
	(_bfd_strip_section_from_output): Delete.
	* aoutx.h: Update throughout for above changes.
	* coff-ppc.c: Likewise.
	* cofflink.c: Likewise.
	* ecoff.c: Likewise.
	* elf-eh-frame.c: Likewise.
	* elf-m10300.c: Likewise.
	* elf.c: Likewise.
	* elf32-arm.c: Likewise.
	* elf32-cris.c: Likewise.
	* elf32-hppa.c: Likewise.
	* elf32-i386.c: Likewise.
	* elf32-m32r.c: Likewise.
	* elf32-m68hc1x.c: Likewise.
	* elf32-m68k.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-s390.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-vax.c: Likewise.
	* elf32-xtensa.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-hppa.c: Likewise.
	* elf64-ppc.c: Likewise.
	* elf64-s390.c: Likewise.
	* elf64-sh64.c: Likewise.
	* elf64-x86-64.c: Likewise.
	* elflink.c: Likewise.
	* elfxx-ia64.c: Likewise.
	* elfxx-mips.c: Likewise.
	* elfxx-sparc.c: Likewise.
	* linker.c: Likewise.
	* merge.c: Likewise.
	* pdp11.c: Likewise.
	* xcofflink.c: Likewise.
	* elflink.c (bfd_boolean bfd_elf_size_dynsym_hash_dynstr): Split
	out from bfd_elf_size_dynamic_sections.
	* bfd-in.h (bfd_boolean bfd_elf_size_dynsym_hash_dynstr): Declare.
	* bfd-in2.h: Regenerate.
ld/
	* ldemul.c: Include bfdlink.h.
	(ldemul_before_allocation): Assume before_allocation is non-zero.
	(before_allocation_default): Call strip_excluded_output_sections.
	* ldlang.c (stripped_excluded_sections): New variable.
	(lang_add_section): Build input section list for each output
	section, attached via map_head and map_tail pointers.
	(strip_excluded_output_sections): Make global.  Traverse the
	input section lists to find which output sections can go.  Clear
	link_order pointers and set stripped_excluded_sections.
	(lang_process): Call strip_excluded_output_sections.
	* ldlang.h (strip_excluded_output_sections): Declare.
	* ldwrite.c: Update throuhout for link_order_head -> map_head change.
	* emultempl/aix.em (before_allocation): Call
	strip_excluded_output_sections.
	* emultempl/armcoff.em (before_allocation): Likewise.
	* emultempl/beos.em (before_allocation): Likewise.
	* emultempl/linux.em (before_allocation): Likewise.
	* emultempl/pe.em (before_allocation): Likewise.
	* emultempl/sunos.em (before_allocation): Likewise.
	* emultempl/elf32.em (before_allocation): Likewise.  Call
	bfd_elf_size_dynsym_hash_dynstr too.
	* emultempl/lnk960.em (lnk960_before_allocation): Delete.
	(ld_lnk960): Use before_allocation_default.
@
text
@d27 1
a27 1
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.103
log
@update copyright dates
@
text
@d1290 3
@


1.102
log
@	* ldlang.c (lang_reasonable_defaults): Remove.
	(lang_process): Don't call lang_reasonable_defaults.

	* ldexp.c (exp_assop): Remove #if 0'd code.
	(exp_print_tree): Likewise.
	* ldlang.c (lang_memory_region_lookup): Likewise.
	(open_output): Likewise.
	(lang_do_assignments_1): Likewise.
	(lang_place_orphans): Likewise.
	(lang_enter_output_section_statement): Likewise.
	(lang_reasonable_defaults): Likewise.
	* ldlang.h (struct lang_input_statement_struct): Likewise.
	* mri.c (mri_draw_tree): Likewise.
	(mri_load): Likewise.
	* pe-dll.c (generate_reloc): Likewise.
	(make_import_fixup_entry): Likewise.
	(pe_as16): Likewise.
	* emultempl/beos.em (set_pe_subsystem): Likewise.
	* emultempl/hppaelf.em (hppaelf_after_parse): Likewise.
	* emultempl/pe.em: Likewise.
	* emultempl/xtensaelf.em (xtensa_colocate_literals): Likewise.
@
text
@d12 2
a13 2
   Copyright 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004
   Free Software Foundation, Inc.
@


1.101
log
@	* emultempl/pe.em (set_pe_subsystem): Change second arg to
	lang_add_entry to FALSE.
@
text
@a1364 8
#if 0
	  /* Not sure if these *should* be set.  */
	  if (pe_def_file->version_major != -1)
	    {
	      pe.MajorImageVersion = pe_def_file->version_major;
	      pe.MinorImageVersion = pe_def_file->version_minor;
	    }
#endif
@


1.100
log
@Add support for --subsystem:xbox as well as --subsystem:<number>.
@
text
@d470 1
a470 1
  lang_add_entry (entry, TRUE);
@


1.99
log
@	* emultempl/pe.em (gld_${EMULATION_NAME}_after_open): Simplify
	comparison and replacement of filenames.
@
text
@d375 3
d380 2
d390 1
a390 4
      { "native", 1, "NtProcessStartup" },
#if defined TARGET_IS_mipspe || defined TARGET_IS_armpe
      { "windows", 2, "WinMainCRTStartup" },
#else
a391 1
#endif
d393 4
a396 7
#if 0
      /* The Microsoft linker does not recognize this.  */
      { "os2", 5, "" },
#endif
      { "posix", 7, "__PosixProcessStartup"},
      { "wince", 9, "_WinMainCRTStartup" },
      { 0, 0, 0 }
d398 2
d401 1
a406 2
      char *end;

d417 19
a435 1
  for (i = 0; v[i].name; i++)
d437 7
a443 2
      if (strncmp (optarg, v[i].name, len) == 0
	  && v[i].name[len] == '\0')
d445 3
a447 2
	  const char *initial_symbol_char;
	  const char *entry;
d449 3
a451 8
	  set_pe_name ("__subsystem__", v[i].value);

	  initial_symbol_char = ${INITIAL_SYMBOL_CHAR};
	  if (*initial_symbol_char == '\0')
	    entry = v[i].entry;
	  else
	    {
	      char *alc_entry;
d453 1
a453 9
	      /* lang_add_entry expects its argument to be permanently
		 allocated, so we don't free this string.  */
	      alc_entry = xmalloc (strlen (initial_symbol_char)
				   + strlen (v[i].entry)
				   + 1);
	      strcpy (alc_entry, initial_symbol_char);
	      strcat (alc_entry, v[i].entry);
	      entry = alc_entry;
	    }
d455 4
a458 1
	  lang_add_entry (entry, TRUE);
d460 8
a467 2
	  return;
	}
d470 3
a472 1
  einfo (_("%P%F: invalid subsystem type %s\n"), optarg);
@


1.98
log
@ld/
	PR 63
	* ldlang.h (lang_output_section_statement_type): Make "next" a
	struct lang_output_section_statement_struct *.
	(struct orphan_save): Move from elf32.em.  Add "name" and "flags".
	(lang_output_section_find_by_flags, lang_insert_orphan): Declare.
	* ldlang.c (lang_output_section_find_1): Adjust for changed
	output_section_statement "next".
	(strip_excluded_output_sections): Likewise.
	(lang_record_phdrs): Likewise.
	(lang_output_section_find_by_flags): New function.
	(output_prev_sec_find): Move from pe.em.  Adjust iterator.
	(lang_insert_orphan): New function.  Tail end of elf32.em's
	place_orphan merged with that from pe.em.  Allow bfd_section to
	be placed first.  New heuristic for placing new output section
	statement in existing script, and accompanying split of __start
	symbol alignment into a separate assignment to dot.
	(lang_add_section): Consistently use output->bfd_section rather than
	an alias, section->output_section.
	(map_input_to_output_sections): Rename overly long arg.  Move
	initialization of data_statement output section to here..
	(lang_check_section_addresses): ..from here.
	(print_assignment): Correct printing of etree_assert.
	(print_all_symbols): Don't bomb if userdata is NULL.
	(IGNORE_SECTION): Rearrange.
	* emultempl/elf32.em (output_rel_find): Adjust interator.
	(output_prev_sec_find): Delete.
	(struct orphan_save): Delete.
	(gld${EMULATION_NAME}_place_orphan): Cater for zero bfd_section
	flags without creating a duplicate output section statement.
	Revise code holding history of various orphan section placements.
	Allow orphan sections to place before script specified output
	sections.  Call lang_output_section_find_by_flags when placement
	by name fails.  Use lang_insert_orphan.
	* emultempl/mmo.em (output_prev_sec_find): Delete.
	(struct orphan_save): Delete.
	(mmo_place_orphan): Revise code holding history of orphan placement.
	Allow orphans to place before existing output sections.  Use
	lang_insert_orphan.
	* emultempl/pe.em (output_prev_sec_find): Delete.
	(struct orphan_save): Delete.
	(gld_${EMULATION_NAME}_place_orphan): Revise to suit use of
	lang_insert_orphan.
ld/testsuite/
	* ld-scripts/overlay-size.d: Update for changed orphan section
	placement.
	* ld-mmix/bpo-18.d: Likewise.
@
text
@d1081 1
a1081 1
			bfd *other_bfd;
d1098 4
a1101 2
			other_bfd = blhe->u.def.section->owner;
#define bfd_filename(bfd) ((bfd)->my_archive ? bfd_get_filename ((bfd)->my_archive) : bfd_get_filename (bfd))
d1103 2
a1104 2
			if (strcmp (bfd_filename (is->the_bfd),
				    bfd_filename (other_bfd)) == 0)
d1108 3
a1110 6
			n = xmalloc (strlen (bfd_filename (other_bfd)) + 1);

			strcpy (n, bfd_filename (other_bfd));

			bfd_filename (is->the_bfd) = n;
#undef bfd_filename
@


1.97
log
@	PR 44
	* emultempl/pe.em (struct orphan_save): Add os_tail.
	(place_orphan): Backport assorted fixes from elf32.em.
@
text
@a1487 27
/* Find the last output section before given output statement.
   Used by place_orphan.  */

static asection *
output_prev_sec_find (lang_output_section_statement_type *os)
{
  asection *s = (asection *) NULL;
  lang_statement_union_type *u;
  lang_output_section_statement_type *lookup;

  for (u = lang_output_section_statement.head;
       u != (lang_statement_union_type *) NULL;
       u = lookup->next)
    {
      lookup = &u->output_section_statement;
      if (lookup->constraint == -1)
	continue;
      if (lookup == os)
	return s;

      if (lookup->bfd_section != NULL && lookup->bfd_section->owner != NULL)
	s = lookup->bfd_section;
    }

  return NULL;
}

a1500 8
struct orphan_save
{
  lang_output_section_statement_type *os;
  asection **section;
  lang_statement_union_type **stmt;
  lang_statement_union_type **os_tail;
};

d1505 1
a1505 1
  char *hold_section_name;
a1506 1
  const char *ps = NULL;
d1513 3
a1515 2
  hold_section_name = xstrdup (secname);
  if (!link_info.relocatable)
d1517 5
a1521 3
      dollar = strchr (hold_section_name, '$');
      if (dollar != NULL)
	*dollar = '\0';
d1524 1
a1524 1
  os = lang_output_section_find (hold_section_name);
d1530 1
d1535 4
a1538 1
	 name, and its bfd section, if any, has compatible flags.  */
d1543 23
d1567 1
a1567 9
      static struct orphan_save hold_text;
      static struct orphan_save hold_rdata;
      static struct orphan_save hold_data;
      static struct orphan_save hold_bss;
      static int count = 1;
      char *outsecname;
      lang_statement_list_type *old;
      lang_statement_list_type add;
      lang_statement_union_type **os_tail;
d1569 13
a1581 2
      etree_type *load_base;
      asection *sec;
a1584 2
#define HAVE_SECTION(hold, name) \
(hold.os != NULL || (hold.os = lang_output_section_find (name)) != NULL)
d1589 6
a1594 32
      else if ((s->flags & SEC_HAS_CONTENTS) == 0
	       && HAVE_SECTION (hold_bss, ".bss"))
	place = &hold_bss;
      else if ((s->flags & SEC_READONLY) == 0
	       && HAVE_SECTION (hold_data, ".data"))
	place = &hold_data;
      else if ((s->flags & SEC_CODE) == 0
	       && (s->flags & SEC_READONLY) != 0
	       && HAVE_SECTION (hold_rdata, ".rdata"))
	place = &hold_rdata;
      else if ((s->flags & SEC_CODE) != 0
	       && (s->flags & SEC_READONLY) != 0
	       && HAVE_SECTION (hold_text, ".text"))
	place = &hold_text;

#undef HAVE_SECTION

      /* Choose a unique name for the section.  This will be needed if the
	 same section name appears in the input file with different
	 loadable or allocatable characteristics.  But if the section
	 already exists but does not have any flags set, then it has been
	 created by the linker, probably as a result of a --section-start
	 command line switch.  */
      sec = bfd_get_section_by_name (output_bfd, hold_section_name);
      if (sec != NULL
	  && bfd_get_section_flags (output_bfd, sec) != 0)
	{
	  outsecname = bfd_get_unique_section_name (output_bfd,
						    hold_section_name, &count);
	  if (outsecname == NULL)
	    einfo ("%F%P: place_orphan failed: %E\n");
	}
d1596 1
a1596 4
	outsecname = xstrdup (hold_section_name);

      /* Start building a list of statements for this section.  */
      old = stat_ptr;
d1598 1
a1598 3
      /* If we have found an appropriate place for the output section
	 statements for this orphan, add them to our own private list,
	 inserting them later into the global statement list.  */
d1601 9
a1609 2
	  stat_ptr = &add;
	  lang_list_init (stat_ptr);
d1612 4
a1615 1
      if (config.build_constructors)
d1617 4
a1620 63
	  /* If the name of the section is representable in C, then create
	     symbols to mark the start and the end of the section.  */
	  for (ps = outsecname; *ps != '\0'; ps++)
	    if (! ISALNUM ((unsigned char) *ps) && *ps != '_')
	      break;
	  if (*ps == '\0')
	    {
	      char *symname;
	      etree_type *e_align;

	      symname = (char *) xmalloc (ps - outsecname + sizeof "___start_");
	      sprintf (symname, "___start_%s", outsecname);
	      e_align = exp_unop (ALIGN_K,
				  exp_intop ((bfd_vma) 1 << s->alignment_power));
	      lang_add_assignment (exp_assop ('=', symname, e_align));
	    }
	}

      if (link_info.relocatable || (s->flags & (SEC_LOAD | SEC_ALLOC)) == 0)
	address = exp_intop ((bfd_vma) 0);
      else
	{
	  /* All sections in an executable must be aligned to a page
	     boundary.  */
	  address = exp_unop (ALIGN_K,
			      exp_nameop (NAME, "__section_alignment__"));
	}

      load_base = NULL;
      if (place != NULL && place->os->load_base != NULL)
	{
	  etree_type *lma_from_vma;
	  lma_from_vma = exp_binop ('-', place->os->load_base,
				    exp_nameop (ADDR, place->os->name));
	  load_base = exp_binop ('+', lma_from_vma,
				 exp_nameop (ADDR, secname));
	}

      os_tail = lang_output_section_statement.tail;
      os = lang_enter_output_section_statement (outsecname, address, 0,
						(etree_type *) NULL,
						(etree_type *) NULL,
						load_base, 0);

      lang_add_section (&add_child, s, os, file);

      lang_leave_output_section_statement
	((bfd_vma) 0, "*default*",
	 (struct lang_output_section_phdr_list *) NULL, NULL);

      if (config.build_constructors && *ps == '\0')
	{
	  char *symname;

	  /* lang_leave_ouput_section_statement resets stat_ptr.
	     Put stat_ptr back where we want it.  */
	  if (place != NULL)
	    stat_ptr = &add;

	  symname = (char *) xmalloc (ps - outsecname + sizeof "___stop_");
	  sprintf (symname, "___stop_%s", outsecname);
	  lang_add_assignment (exp_assop ('=', symname,
					  exp_nameop (NAME, ".")));
d1623 4
a1626 94
      stat_ptr = old;

      if (place != NULL && os->bfd_section != NULL)
	{
	  asection *snew, **pps;

	  snew = os->bfd_section;

	  /* Shuffle the bfd section list to make the output file look
	     neater.  This is really only cosmetic.  */
	  if (place->section == NULL)
	    {
	      asection *bfd_section = place->os->bfd_section;

	      /* If the output statement hasn't been used to place
		 any input sections (and thus doesn't have an output
		 bfd_section), look for the closest prior output statement
		 having an output section.  */
	      if (bfd_section == NULL)
		bfd_section = output_prev_sec_find (place->os);

	      if (bfd_section != NULL && bfd_section != snew)
		place->section = &bfd_section->next;
	    }

	  if (place->section != NULL)
	    {
	      /* Unlink the section.  */
	      for (pps = &output_bfd->sections;
		   *pps != snew;
		   pps = &(*pps)->next)
		;
	      bfd_section_list_remove (output_bfd, pps);

	      /* Now tack it on to the "place->os" section list.  */
	      bfd_section_list_insert (output_bfd, place->section, snew);
	    }

	  /* Save the end of this list.  Further ophans of this type will
	     follow the one we've just added.  */
	  place->section = &snew->next;

	  /* The following is non-cosmetic.  We try to put the output
	     statements in some sort of reasonable order here, because
	     they determine the final load addresses of the orphan
	     sections.  In addition, placing output statements in the
	     wrong order may require extra segments.  For instance,
	     given a typical situation of all read-only sections placed
	     in one segment and following that a segment containing all
	     the read-write sections, we wouldn't want to place an orphan
	     read/write section before or amongst the read-only ones.  */
	  if (add.head != NULL)
	    {
	      lang_statement_union_type *newly_added_os;

	      if (place->stmt == NULL)
		{
		  /* Put the new statement list right at the head.  */
		  *add.tail = place->os->header.next;
		  place->os->header.next = add.head;

		  place->os_tail = &place->os->next;
		}
	      else
		{
		  /* Put it after the last orphan statement we added.  */
		  *add.tail = *place->stmt;
		  *place->stmt = add.head;
		}

	      /* Fix the global list pointer if we happened to tack our
		 new list at the tail.  */
	      if (*old->tail == add.head)
		old->tail = add.tail;

	      /* Save the end of this list.  */
	      place->stmt = add.tail;

	      /* Do the same for the list of output section statements.  */
	      newly_added_os = *os_tail;
	      *os_tail = NULL;
	      newly_added_os->output_section_statement.next = *place->os_tail;
	      *place->os_tail = newly_added_os;
	      place->os_tail = &newly_added_os->output_section_statement.next;

	      /* Fixing the global list pointer here is a little different.
		 We added to the list in lang_enter_output_section_statement,
		 trimmed off the new output_section_statment above when
		 assigning *os_tail = NULL, but possibly added it back in
		 the same place when assigning *place->os_tail.  */
	      if (*os_tail == NULL)
		lang_output_section_statement.tail = os_tail;
	    }
	}
d1658 1
a1658 1
		if (strcmp (secname, lname) < 0)
a1670 2
  free (hold_section_name);

@


1.96
log
@emultempl/pe.em (gld_${EMULATION_NAME}_set_symbols): Generate correct base
  address for position independant executables.
pe-dll.c (pe_dll_fill_sections): Don't mark position independant executables
  as DLLs.
@
text
@d871 3
a873 3
        {
          /* C++ symbols are *long*.  */
          char buf[4096];
d878 1
a878 1
          sprintf (buf, "__imp_%s", undef->root.string);
d880 1
a880 1
          sym = bfd_link_hash_lookup (link_info.hash, buf, 0, 0, 1);
d882 2
a883 2
          if (sym && sym->type == bfd_link_hash_defined)
            {
d921 2
a922 2
            }
        }
d949 1
a949 1
        printf ("-%s\n", sym->root.string);
d1154 1
a1154 1
                    /* A MS dynamic import library can also contain static
d1481 2
a1482 2
        asec->flags &= ~SEC_CODE;
        asec->flags |= SEC_DATA;
d1533 1
d1577 1
d1581 1
d1583 2
d1604 2
a1605 1
      else if ((s->flags & SEC_READONLY) != 0
d1611 9
a1619 5
      /* Choose a unique name for the section.  This will be needed if
	 the same section name appears in the input file with
	 different loadable or allocatable characteristics.  */
      outsecname = xstrdup (hold_section_name);
      if (bfd_get_section_by_name (output_bfd, outsecname) != NULL)
d1621 4
a1624 17
	  unsigned int len;
	  char *newname;
	  unsigned int i;

	  len = strlen (outsecname);
	  newname = xmalloc (len + 5);
	  strcpy (newname, outsecname);
	  i = 0;
	  do
	    {
	      sprintf (newname + len, "%d", i);
	      ++i;
	    }
	  while (bfd_get_section_by_name (output_bfd, newname) != NULL);

	  free (outsecname);
	  outsecname = newname;
d1626 2
d1631 9
a1639 2
      stat_ptr = &add;
      lang_list_init (stat_ptr);
d1671 11
d1685 1
a1685 1
						(etree_type *) NULL, 0);
d1694 1
a1694 1
        {
d1761 2
d1768 2
d1785 15
d1865 2
a1866 2
                             + strlen (filename)
                             + sizeof "/lib.a.dll"
d1868 1
a1868 1
                             + (pe_dll_search_prefix ? strlen (pe_dll_search_prefix) : 0)
d1870 1
a1870 1
                             + 1);
d1880 1
a1880 1
        {
d1890 5
a1894 5
          /* Try "libfoo.a" (import lib, or static lib, but must
             take precedence over dll's).  */
          sprintf (string, "%s/lib%s.a", search->name, filename);
          if (! ldfile_try_open_bfd (string, entry))
            {
d1896 21
a1916 21
              if (pe_dll_search_prefix)
                {
                  /* Try "<prefix>foo.dll" (preferred dll name, if specified).  */
                  sprintf (string, "%s/%s%s.dll", search->name, pe_dll_search_prefix, filename);
                  if (! ldfile_try_open_bfd (string, entry))
                    {
                      /* Try "libfoo.dll" (default preferred dll name).  */
                      sprintf (string, "%s/lib%s.dll", search->name, filename);
                      if (! ldfile_try_open_bfd (string, entry))
                        {
                          /* Finally, try "foo.dll" (alternate dll name).  */
                          sprintf (string, "%s/%s.dll", search->name, filename);
                          if (! ldfile_try_open_bfd (string, entry))
                            {
                              free (string);
                              return FALSE;
                            }
                        }
                    }
                }
              else /* pe_dll_search_prefix not specified.  */
d1918 16
a1933 16
                {
                  /* Try "libfoo.dll" (preferred dll name).  */
                  sprintf (string, "%s/lib%s.dll", search->name, filename);
                  if (! ldfile_try_open_bfd (string, entry))
                    {
                      /* Finally, try "foo.dll" (alternate dll name).  */
                      sprintf (string, "%s/%s.dll", search->name, filename);
                      if (! ldfile_try_open_bfd (string, entry))
                        {
                          free (string);
                          return FALSE;
                        }
                    }
                }
            }
        }
d1962 10
a1971 10
sed $sc ldscripts/${EMULATION_NAME}.xu                 >> e${EMULATION_NAME}.c
echo '  ; else if (link_info.relocatable) return'     >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xr                 >> e${EMULATION_NAME}.c
echo '  ; else if (!config.text_read_only) return'     >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xbn                >> e${EMULATION_NAME}.c
echo '  ; else if (!config.magic_demand_paged) return' >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xn                 >> e${EMULATION_NAME}.c
echo '  ; else return'                                 >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.x                  >> e${EMULATION_NAME}.c
echo '; }'                                             >> e${EMULATION_NAME}.c
@


1.95
log
@* emultempl/pe.em (gld_${EMULATION_NAME}_unrecognized_file): Allow
def_file_parse to handle pe_def_file if NULL and prevent crash with invalid
.def files.
@
text
@d668 1
a668 1
      else if (init[DLLOFF].value || link_info.shared)
@


1.94
log
@include/
	* bfdlink.h (struct bfd_link_hash_entry): Move und_next into elements
	of union.
bfd/
	* ecoff.c: Update u.undef.next refs.
	* elf64-ppc.c: Likewise.
	* elflink.c: Likewise.
	* linker.c: Likewise.
	* xcofflink.c: Likewise.
ld/
	* ldexp.c (fold_name): Update u.undef.next refs.
	* emultempl/pe.em: Likewise.
	* emultempl/sunos.em: Likewise.

bfd/
	* elf-bfd.h (struct elf_link_hash_entry): Rearrange.  Add FIXME to
	dynamic_def.  Combine weakdef and elf_hash_value.  Move vtable
	fields to indirect struct.
	* elf-m10300.c: Update u.weakdef refs.
	* elf32-arm.h: Likewise.
	* elf32-cris.c: Likewise.
	* elf32-frv.c: Likewise.
	* elf32-hppa.c: Likewise.
	* elf32-i370.c: Likewise.
	* elf32-i386.c: Likewise.
	* elf32-m32r.c: Likewise.
	* elf32-m68k.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf32-s390.c: Likewise.
	* elf32-sh.c: Likewise.
	* elf32-sparc.c: Likewise.
	* elf32-vax.c: Likewise.
	* elf32-xtensa.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-hppa.c: Likewise.
	* elf64-ppc.c: Likewise.
	* elf64-s390.c: Likewise.
	* elf64-sh64.c: Likewise.
	* elf64-sparc.c: Likewise.
	* elf64-x86-64.c: Likewise.
	* elfxx-ia64.c: Likewise.
	* elfxx-mips.c: Likewise.
	* elflink.c: Likewise.  Also u.elf_hash_value.
	(elf_gc_propagate_vtable_entries_used): Update for h->vtable
	indirection.
	(elf_gc_smash_unused_vtentry_relocs): Likewise.
	(bfd_elf_gc_record_vtinherit): Alloc vtable.
	(bfd_elf_gc_record_vtentry): Likewise.
	* elf.c (_bfd_elf_link_hash_newfunc): Use memset.
@
text
@d1296 1
a1296 4
      if (pe_def_file == 0)
	pe_def_file = def_file_empty ();

      def_file_parse (entry->filename, pe_def_file);
@


1.93
log
@Do not assume that either bfd is an archive
@
text
@d776 1
a776 1
  for (undef = link_info.hash->undefs; undef; undef=undef->und_next)
d868 1
a868 1
  for (undef = link_info.hash->undefs; undef; undef=undef->und_next)
d948 1
a948 1
      for (sym = link_info.hash->undefs; sym; sym=sym->und_next)
d1069 1
a1069 1
							  relocs, symbols);
@


1.92
log
@(make_import_fixup): Use bfd_get_32 to correct for endian-ness of extracted
addend.
@
text
@d1099 1
d1101 2
a1102 2
			if (strcmp (is->the_bfd->my_archive->filename,
				    other_bfd->my_archive->filename) == 0)
d1105 2
a1106 2
			/* Rename this implib to match the other.  */
			n = (char *) xmalloc (strlen (other_bfd->my_archive->filename) + 1);
d1108 1
a1108 1
			strcpy (n, other_bfd->my_archive->filename);
d1110 2
a1111 1
			is->the_bfd->my_archive->filename = n;
@


1.91
log
@	* ldgram.y (sect_constraint): New.
	(ONLY_IF_RO, ONLY_IF_RW): New tokens.
	(section): Add sect_constraint.  Pass additional argument
	to lang_enter_output_section_statement.
	* mri.c (mri_draw_tree): Pass additional argument to
	lang_enter_output_section_statement.
	* emultempl/pe.em (place_orphan): Likewise.
	(output_prev_sec_find): Disregard output section statements with
	constraint == -1.
	* emultempl/mmo.em (output_prev_sec_find): Likewise.
	(mmo_place_orphan): Pass additional argument to
	lang_enter_output_section_statement.
	* emultempl/elf32.em (output_prev_sec_find): Disregard output section
	statements with constraint == -1.
	(place_orphan): Pass additional argument to
	lang_enter_output_section_statement.
	* ldlang.c (lang_enter_overlay_section): Likewise.
	(lang_output_section_find_1): New.
	(lang_output_section_find): Use it.
	(lang_output_section_statement_lookup_1): New.
	(lang_output_section_statement_lookup): Use it.
	(check_section_callback, check_input_sections): New.
	(map_input_to_output_sections): Check if all input sections
	are readonly if ONLY_IF_RO or ONLY_IF_RW was seen.
	(strip_excluded_output_sections): Disregard output section statements
	with constraint == -1.
	(lang_record_phdrs): Likewise.
	(lang_enter_output_section_statement): Add constraint argument.
	Use lang_output_section_statement_lookup_1.
	* ldlang.h (lang_output_section_statement_type): Add constraint
	and all_input_readonly fields.
	(lang_enter_output_section_statement): Adjust prototype.
	* ldlex.l (ONLY_IF_RO, ONLY_IF_RW): New tokens.
	* scripttempl/elf.sc (.eh_frame, .gcc_except_table): Move into text
	segment if all input sections are readonly.
@
text
@d845 1
a845 1
  int addend = 0;
d851 1
a851 1
  if (! bfd_get_section_contents (s->owner, s, &addend, rel->address, sizeof (addend)))
d855 1
a855 1
  pe_create_import_fixup (rel, s, addend);
@


1.90
log
@* emultempl/pe.em (real_flags): New static.
(OPTION_LARGE_ADDRESS_AWARE): New define.
(gld${EMULATION_NAME}_add_options): Add --large-address-aware option.
(gld_${EMULATION_NAME}_list_options): Likewise.
(gld${EMULATION_NAME}_handle_option): Likewise.
(gld_${EMULATION_NAME}_after_open): Pass real_flags to PE private data.
* ld.texinfo: Document it.
* NEWS: Mention it.
@
text
@d1504 2
d1669 1
a1669 1
						(etree_type *) NULL);
@


1.89
log
@Fix typo in previous delta
@
text
@d65 5
d114 1
d191 2
d246 1
d347 2
d611 3
d966 1
@


1.88
log
@Fix thinko checking for dlls in archives.
@
text
@d1143 1
a1143 1
		      continue;
@


1.87
log
@	* ldexp.c (align_n): Make static.
	* ldexp.h (align_n): Delete declaration.
	* ldlang.h (lang_enter_output_section_statement): Remove
	block_value param.
	* ldlang.c (lang_enter_output_section_statement): Likewise.
	(TO_ADDR, TO_SIZE): Define.
	(opb): New var.
	(init_opb): New function.
	(print_input_section): Call init_opb and use TO_ADDR.
	(print_data_statement, print_reloc_statement): Likewise.
	(print_padding_statement): Likewise.
	(size_input_section): Use TO_SIZE and TO_ADDR, and global opb.
	(lang_check_section_addresses): Likewise.
	(lang_size_sections_1): Likewise.
	(lang_do_assignments_1): Likewise.
	(lang_set_startof): Likewise.
	(lang_one_common): Likewise.  Combine power_of_two and opb alignment.
	(lang_process): Call init_opb.
	(lang_abs_symbol_at_end_of): Use TO_ADDR and global opb.
	(lang_enter_overlay_section): Adjust
	lang_enter_output_section_statement call.
	* ldgram.y: Likewise.
	* mri.c (mri_draw_tree): Likewise.
	* emultempl/elf32.em (gld${EMULATION_NAME}_place_orphan): Likewise.
	* emultempl/mmo.em (mmo_place_orphan): Likewise.
	* emultempl/pe.em (gld${EMULATION_NAME}_place_orphan): Likewise.
@
text
@d1142 1
a1142 1
		    if (pnt != NULL && strcmp (pnt, ".dll") != 0)
@


1.86
log
@	* ldfile.c (ldfile_set_output_arch): Add defarch param.
	* ldfile.h (ldfile_set_output_arch): Ditto.
	* emultempl/aix.em (gld${EMULATION_NAME}_before_parse): Use
	ldfile_set_output_arch.
	* emultempl/beos.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* emultempl/elf32.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* emultempl/linux.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* emultempl/mipsecoff.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* emultempl/pe.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* emultempl/sunos.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* ldgram.y: Adjust ldfile_set_output_arch call.
	* emultempl/armcoff.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* emultempl/armelf.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* emultempl/armelf_oabi.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* emultempl/generic.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* emultempl/gld960c.em (gld960_set_output_arch): Ditto.
	* emultempl/m68kcoff.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* emultempl/ticoff.em (gld${EMULATION_NAME}_before_parse): Ditto.
@
text
@a1649 1
						(bfd_vma) 0,
@


1.85
log
@When scanning MS import libraries allow for the possible presence of static
objects.
@
text
@d12 1
a12 1
   Copyright 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
d126 1
a126 9
  const bfd_arch_info_type *arch = bfd_scan_arch ("${OUTPUT_ARCH}");
  if (arch)
    {
      ldfile_output_architecture = arch->arch;
      ldfile_output_machine = arch->mach;
      ldfile_output_machine_name = arch->printable_name;
    }
  else
    ldfile_output_architecture = bfd_arch_${ARCH};
@


1.84
log
@Rename bfd_link_hash_entry field "next" -> "und_next".
@
text
@d1118 1
d1133 1
d1135 1
d1140 4
a1143 3
		for (is2 = is;
		     is2 && is2->the_bfd->my_archive == arch;
		     is2 = (lang_input_statement_type *)is2->next)
d1145 32
a1176 2
		    if (strcmp (is->the_bfd->filename, is2->the_bfd->filename))
		      is_ms_arch = 0;
d1180 6
a1185 1
	    if (is_ms_arch)
@


1.83
log
@	* emultempl/pe.em (gld_${EMULATION_NAME}_after_open): Only do
	pe_dll_extra_pe_debug stuff when DLL_SUPPORT defined.
	(pr_sym): Move inside #ifdef DLL_SUPPORT.
@
text
@d770 1
a770 1
  for (undef = link_info.hash->undefs; undef; undef=undef->next)
d862 1
a862 1
  for (undef = link_info.hash->undefs; undef; undef=undef->next)
d942 1
a942 1
      for (sym = link_info.hash->undefs; sym; sym=sym->next)
@


1.82
log
@Index: sim/frv/ChangeLog
2003-10-30  Andrew Cagney  <cagney@@redhat.com>

	* traps.c: Replace "struct symbol_cache_entry" with "struct
	bfd_symbol".

Index: sim/d10v/ChangeLog
2003-10-30  Andrew Cagney  <cagney@@redhat.com>

	* simops.c: Replace "struct symbol_cache_entry" with "struct
	bfd_symbol".

Index: sim/common/ChangeLog
2003-10-30  Andrew Cagney  <cagney@@redhat.com>

	* sim-trace.c, sim-base.h: Replace "struct symbol_cache_entry"
	with "struct bfd_symbol".

Index: ld/ChangeLog
2003-10-30  Andrew Cagney  <cagney@@redhat.com>

	* emultempl/pe.em, pe-dll.c: Replace "struct symbol_cache_entry"
	with "struct bfd_symbol".

Index: bfd/ChangeLog
2003-10-30  Andrew Cagney  <cagney@@redhat.com>

	* syms.c: Replace "struct symbol_cache_entry" with "struct
	bfd_symbol".
	* vms.h, targets.c, section.c, reloc.c, peicode.h: Ditto.
	* mipsbsd.c, elf.c, linker.c, elf-bfd.h, ecoff.c: Ditto.
	* cpu-z8k.c, cpu-ns32k.c, cpu-h8500.c, bfd.c, bfd-in.h: Ditto.
	* bfd-in2.h: Re-generate.
@
text
@a918 1
#endif /* DLL_SUPPORT */
d928 1
d934 1
d949 1
@


1.81
log
@	* emultempl/pe.em (gld_${EMULATION_NAME}_before_parse):
	Change second (cmdline) arg to lang_add_entry to FALSE.
	(set_pe_subsystem): Change second arg to lang_add_entry to TRUE.
@
text
@d838 1
a838 1
  struct symbol_cache_entry *sym = *rel->sym_ptr_ptr;
d1070 1
a1070 1
			struct symbol_cache_entry *s;
@


1.80
log
@	* emultempl/aix.em: Convert to C90, remove unnecessary prototypes
	and casts.  Replace PTR with void *.  Formatting.
	* emultempl/alphaelf.em: Likewise
	* emultempl/armcoff.em: Likewise
	* emultempl/armelf.em: Likewise
	* emultempl/armelf_oabi.em: Likewise
	* emultempl/beos.em: Likewise
	* emultempl/elf32.em: Likewise
	* emultempl/generic.em: Likewise
	* emultempl/gld960.em: Likewise
	* emultempl/gld960c.em: Likewise
	* emultempl/hppaelf.em: Likewise
	* emultempl/linux.em: Likewise
	* emultempl/lnk960.em: Likewise
	* emultempl/m68hc1xelf.em: Likewise
	* emultempl/m68kcoff.em: Likewise
	* emultempl/m68kelf.em: Likewise
	* emultempl/mipsecoff.em: Likewise
	* emultempl/mipself.em: Likewise
	* emultempl/mmix-elfnmmo.em: Likewise
	* emultempl/mmixelf.em: Likewise
	* emultempl/mmo.em: Likewise
	* emultempl/needrelax.em: Likewise
	* emultempl/netbsd.em: Likewise
	* emultempl/pe.em: Likewise
	* emultempl/sh64elf.em: Likewise
	* emultempl/sunos.em: Likewise
	* emultempl/ticoff.em: Likewise
	* emultempl/vanilla.em: Likewise
	* emultempl/xtensaelf.em: Likewise
	* Makefile.am: Correct dependencies.
	* Makefile.in: Regenerate.
@
text
@d144 1
a144 1
  lang_add_entry ("WinMainCRTStartup", 1);
d146 1
a146 1
  lang_add_entry ("_WinMainCRTStartup", 1);
d442 1
a442 1
	  lang_add_entry (entry, 0);
@


1.79
log
@Correct spelling of "relocatable".
@
text
@a105 38
static void gld_${EMULATION_NAME}_set_symbols PARAMS ((void));
static void gld_${EMULATION_NAME}_after_open PARAMS ((void));
static void gld_${EMULATION_NAME}_before_parse PARAMS ((void));
static void gld_${EMULATION_NAME}_after_parse PARAMS ((void));
static void gld_${EMULATION_NAME}_before_allocation PARAMS ((void));
static asection *output_prev_sec_find
  PARAMS ((lang_output_section_statement_type *));
static bfd_boolean gld_${EMULATION_NAME}_place_orphan
  PARAMS ((lang_input_statement_type *, asection *));
static char *gld_${EMULATION_NAME}_get_script PARAMS ((int *));
static void gld_${EMULATION_NAME}_finish PARAMS ((void));
static bfd_boolean gld_${EMULATION_NAME}_open_dynamic_archive
  PARAMS ((const char *, search_dirs_type *, lang_input_statement_type *));
static void gld${EMULATION_NAME}_add_options
  PARAMS ((int, char **, int, struct option **, int, struct option **));
static bfd_boolean gld${EMULATION_NAME}_handle_option PARAMS ((int));
static void gld_${EMULATION_NAME}_list_options PARAMS ((FILE *));
static void set_pe_name PARAMS ((char *, long));
static void set_pe_subsystem PARAMS ((void));
static void set_pe_value PARAMS ((char *));
static void set_pe_stack_heap PARAMS ((char *, char *));

#ifdef DLL_SUPPORT
static bfd_boolean pe_undef_cdecl_match
  PARAMS ((struct bfd_link_hash_entry *, PTR));
static void pe_fixup_stdcalls PARAMS ((void));
static int make_import_fixup PARAMS ((arelent *, asection *));
static void pe_find_data_imports PARAMS ((void));
#endif

static bfd_boolean pr_sym PARAMS ((struct bfd_hash_entry *, PTR));
static bfd_boolean gld_${EMULATION_NAME}_unrecognized_file
  PARAMS ((lang_input_statement_type *));
static bfd_boolean gld_${EMULATION_NAME}_recognized_file
  PARAMS ((lang_input_statement_type *));
static int gld_${EMULATION_NAME}_find_potential_libraries
  PARAMS ((char *, lang_input_statement_type *));

d124 1
a124 1
gld_${EMULATION_NAME}_before_parse()
d166 2
a167 2
#define OPTION_STACK                    (OPTION_SECTION_ALIGNMENT + 1)
#define OPTION_SUBSYSTEM                (OPTION_STACK + 1)
d195 4
a198 7
gld${EMULATION_NAME}_add_options (ns, shortopts, nl, longopts, nrl, really_longopts)
     int ns ATTRIBUTE_UNUSED;
     char **shortopts ATTRIBUTE_UNUSED;
     int nl;
     struct option **longopts;
     int nrl ATTRIBUTE_UNUSED;
     struct option **really_longopts ATTRIBUTE_UNUSED;
d298 1
a298 2
gld_${EMULATION_NAME}_list_options (file)
     FILE * file;
d350 1
a350 3
set_pe_name (name, val)
     char *name;
     long val;
d369 1
a369 1
set_pe_subsystem ()
d453 1
a453 3
set_pe_value (name)
     char *name;

d467 1
a467 3
set_pe_stack_heap (resname, comname)
     char *resname;
     char *comname;
d482 1
a482 2
gld${EMULATION_NAME}_handle_option (optc)
     int optc;
d490 1
a490 1
      link_info.base_file = (PTR) fopen (optarg, FOPEN_WB);
d651 1
a651 1
gld_${EMULATION_NAME}_set_symbols ()
d715 1
a715 1
gld_${EMULATION_NAME}_after_parse ()
d745 1
a745 3
pe_undef_cdecl_match (h, string)
  struct bfd_link_hash_entry *h;
  PTR string;
d748 1
d750 1
a750 1
  sl = strlen (string); /* Silence compiler warning.  */
d762 1
a762 1
pe_fixup_stdcalls ()
d811 1
a811 1
				    (PTR) undef->root.string);
d836 1
a836 3
make_import_fixup (rel, s)
  arelent *rel;
  asection *s;
d855 1
a855 1
pe_find_data_imports ()
d922 1
a922 3
pr_sym (h, string)
  struct bfd_hash_entry *h;
  PTR string ATTRIBUTE_UNUSED;
d925 1
a925 1
    printf ("+%s\n",h->string);
d932 1
a932 1
gld_${EMULATION_NAME}_after_open ()
d943 1
a943 1
      bfd_hash_traverse (&link_info.hash->table, pr_sym,NULL);
d1178 1
a1178 1
gld_${EMULATION_NAME}_before_allocation ()
d1227 1
a1227 1
saw_option (char * option)
d1239 1
a1239 2
gld_${EMULATION_NAME}_unrecognized_file (entry)
     lang_input_statement_type *entry ATTRIBUTE_UNUSED;
d1328 1
a1328 2
gld_${EMULATION_NAME}_recognized_file (entry)
  lang_input_statement_type *entry ATTRIBUTE_UNUSED;
d1361 1
a1361 1
gld_${EMULATION_NAME}_finish ()
d1445 1
a1445 2
output_prev_sec_find (os)
     lang_output_section_statement_type *os;
d1487 1
a1487 3
gld_${EMULATION_NAME}_place_orphan (file, s)
     lang_input_statement_type *file;
     asection *s;
d1768 3
a1770 4
gld_${EMULATION_NAME}_open_dynamic_archive (arch, search, entry)
     const char * arch ATTRIBUTE_UNUSED;
     search_dirs_type * search;
     lang_input_statement_type * entry;
d1858 2
a1859 3
gld_${EMULATION_NAME}_find_potential_libraries (name, entry)
     char * name;
     lang_input_statement_type * entry;
d1865 1
a1865 2
gld_${EMULATION_NAME}_get_script (isfile)
     int *isfile;
@


1.78
log
@Replace <ctype.h> with "safe-ctype.h"
@
text
@d709 1
a709 1
      if (link_info.relocateable)
d722 2
a723 2
  /* Don't do any symbol assignments if this is a relocateable link.  */
  if (link_info.relocateable)
d779 1
a779 1
  if (! link_info.relocateable && entry_symbol.name != NULL)
d1024 1
a1024 1
  if (!link_info.relocateable)
d1464 1
a1464 1
    || (!link_info.relocateable && pe_def_file->num_exports != 0)
d1559 1
a1559 1
  if (!link_info.relocateable)
d1665 1
a1665 1
      if (link_info.relocateable || (s->flags & (SEC_LOAD | SEC_ALLOC)) == 0)
d1937 1
a1937 1
  if (link_info.relocateable && config.build_constructors)
d1941 1
a1941 1
echo '  ; else if (link_info.relocateable) return'     >> e${EMULATION_NAME}.c
@


1.77
log
@pe-dll.c (pe_detail_list): arm-pe targets use underscores.
(process_def_file): Don't create an export section if there are no exports and
  we're building an exe.
(pe_dll_build_sections): Ditto
(pe_dll_fill_sections): Conditionalize setting abfd->dll true on info->shared

emultempl/pe.em (gld_${EMULATION_NAME}_after_open): If i386pe or armpe, call
  pe_dll_build_section() for both exe's and dll's, not just dll's.  Don't call
  pe_dll_build_section() if link_info.relocateable.
(gld_${EMULATION_NAME}_finish): For all targets except shpe and mipspe, call
  pe_dll_fill_sections() for both exe's and dll's, not just dll's.  Don't call
  pe_dll_fill_sections() if link_info.relocateable.
@
text
@d71 1
a71 2

#include <ctype.h>
d1650 1
a1650 1
	    if (! isalnum ((unsigned char) *ps) && *ps != '_')
@


1.76
log
@	* ldemul.c (ldemul_add_options, ldemul_handle_option): New functions.
	(ldemul_parse_args): Return bfd_boolean.  Formatting.
	* ldemul.h (ldemul_add_options, ldemul_handle_option): Declare.
	(ldemul_parse_args): Adjust.
	(struct ld_emulation_xfer_struct): Add add_options and handle_option.
	Return bfd_boolean from parse_args.
	* lexsup.c (parse_args): Malloc shortopts, longopts and
	really_longopts.  Call ldemul_add_options and ldemul_handle_option.
	* emultempl/aix.em (gld${EMULATION_NAME}_add_options): Split out from
	gld${EMULATION_NAME}_parse_args.
	(gld${EMULATION_NAME}_handle_option): Likewise.
	(ld_${EMULATION_NAME}_emulation): Adjust initializer.
	* emultempl/armcoff.em: As for aix.em, but remove parse_args.
	* emultempl/beos.em: Likewise.
	* emultempl/pe.em: Likewise.
	* emultempl/ticoff.em: Likewise.
	* emultempl/elf32.em: Likewise.  Don't duplicate long options either.
	(gld${EMULATION_NAME}_add_sysroot): Prototype.
	* emultempl/armelf.em (PARSE_AND_LIST_LONGOPTS): Don't duplicate
	options.
	* emultempl/hppaelf.em (PARSE_AND_LIST_LONGOPTS): Likewise.
	* emultempl/ppc32elf.em (PARSE_AND_LIST_LONGOPTS): Likewise.
	* emultempl/ppc64elf.em (PARSE_AND_LIST_LONGOPTS): Likewise.
	* emultempl/armelf_oabi.em (ld_${EMULATION_NAME}_emulation): Adjust
	initializer.
	* emultempl/generic.em: Likewise.
	* emultempl/gld960.em: Likewise.
	* emultempl/gld960c.em: Likewise.
	* emultempl/linux.em: Likewise.
	* emultempl/lnk960.em: Likewise.
	* emultempl/m68kcoff.em: Likewise.
	* emultempl/mipsecoff.em: Likewise.
	* emultempl/sunos.em: Likewise.
	* emultempl/vanilla.em: Likewise.
	* emultempl/netbsd.em (gldnetbsd_before_parse): Prototype.
@
text
@d1022 1
d1024 3
d1463 5
a1467 1
  if (link_info.shared)
@


1.75
log
@Remove an extra "i" in --dll-search-prefix.
Move a cross-80th-column-margin "an" to the next line.
@
text
@a116 1
static int gld_${EMULATION_NAME}_parse_args PARAMS ((int, char **));
d120 3
d233 27
a259 18
static struct option longopts[] = {
  /* PE options */
  {"base-file", required_argument, NULL, OPTION_BASE_FILE},
  {"dll", no_argument, NULL, OPTION_DLL},
  {"file-alignment", required_argument, NULL, OPTION_FILE_ALIGNMENT},
  {"heap", required_argument, NULL, OPTION_HEAP},
  {"image-base", required_argument, NULL, OPTION_IMAGE_BASE},
  {"major-image-version", required_argument, NULL, OPTION_MAJOR_IMAGE_VERSION},
  {"major-os-version", required_argument, NULL, OPTION_MAJOR_OS_VERSION},
  {"major-subsystem-version", required_argument, NULL, OPTION_MAJOR_SUBSYSTEM_VERSION},
  {"minor-image-version", required_argument, NULL, OPTION_MINOR_IMAGE_VERSION},
  {"minor-os-version", required_argument, NULL, OPTION_MINOR_OS_VERSION},
  {"minor-subsystem-version", required_argument, NULL, OPTION_MINOR_SUBSYSTEM_VERSION},
  {"section-alignment", required_argument, NULL, OPTION_SECTION_ALIGNMENT},
  {"stack", required_argument, NULL, OPTION_STACK},
  {"subsystem", required_argument, NULL, OPTION_SUBSYSTEM},
  {"support-old-code", no_argument, NULL, OPTION_SUPPORT_OLD_CODE},
  {"thumb-entry", required_argument, NULL, OPTION_THUMB_ENTRY},
d261 34
a294 30
  /* getopt allows abbreviations, so we do this to stop it from treating -o
     as an abbreviation for this option */
  {"output-def", required_argument, NULL, OPTION_OUT_DEF},
  {"output-def", required_argument, NULL, OPTION_OUT_DEF},
  {"export-all-symbols", no_argument, NULL, OPTION_EXPORT_ALL},
  {"exclude-symbols", required_argument, NULL, OPTION_EXCLUDE_SYMBOLS},
  {"exclude-libs", required_argument, NULL, OPTION_EXCLUDE_LIBS},
  {"kill-at", no_argument, NULL, OPTION_KILL_ATS},
  {"add-stdcall-alias", no_argument, NULL, OPTION_STDCALL_ALIASES},
  {"enable-stdcall-fixup", no_argument, NULL, OPTION_ENABLE_STDCALL_FIXUP},
  {"disable-stdcall-fixup", no_argument, NULL, OPTION_DISABLE_STDCALL_FIXUP},
  {"out-implib", required_argument, NULL, OPTION_IMPLIB_FILENAME},
  {"warn-duplicate-exports", no_argument, NULL, OPTION_WARN_DUPLICATE_EXPORTS},
  /* getopt() allows abbreviations, so we do this to stop it from
     treating -c as an abbreviation for these --compat-implib.  */
  {"compat-implib", no_argument, NULL, OPTION_IMP_COMPAT},
  {"compat-implib", no_argument, NULL, OPTION_IMP_COMPAT},
  {"enable-auto-image-base", no_argument, NULL, OPTION_ENABLE_AUTO_IMAGE_BASE},
  {"disable-auto-image-base", no_argument, NULL, OPTION_DISABLE_AUTO_IMAGE_BASE},
  {"dll-search-prefix", required_argument, NULL, OPTION_DLL_SEARCH_PREFIX},
  {"no-default-excludes", no_argument, NULL, OPTION_NO_DEFAULT_EXCLUDES},
  {"enable-auto-import", no_argument, NULL, OPTION_DLL_ENABLE_AUTO_IMPORT},
  {"disable-auto-import", no_argument, NULL, OPTION_DLL_DISABLE_AUTO_IMPORT},
  {"enable-extra-pe-debug", no_argument, NULL, OPTION_ENABLE_EXTRA_PE_DEBUG},
  {"enable-runtime-pseudo-reloc", no_argument, NULL, OPTION_DLL_ENABLE_RUNTIME_PSEUDO_RELOC},
  {"disable-runtime-pseudo-reloc", no_argument, NULL, OPTION_DLL_DISABLE_RUNTIME_PSEUDO_RELOC},
#endif
  {NULL, no_argument, NULL, 0}
};

d530 4
a533 21
static int
gld_${EMULATION_NAME}_parse_args (argc, argv)
     int argc;
     char **argv;
{
  int longind;
  int optc;
  int prevoptind = optind;
  int prevopterr = opterr;
  int wanterror;
  static int lastoptind = -1;

  if (lastoptind != optind)
    opterr = 0;
  wanterror = opterr;

  lastoptind = optind;

  optc = getopt_long_only (argc, argv, "-", longopts, &longind);
  opterr = prevopterr;

d537 1
a537 4
      if (wanterror)
	xexit (1);
      optind =  prevoptind;
      return 0;
d659 1
a659 1
  return 1;
d1966 3
a1968 1
  gld_${EMULATION_NAME}_parse_args,
@


1.74
log
@Don't search for data import when auto-import is disabled.
@
text
@d12 1
a12 1
   Copyright 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002
d360 2
a361 2
  fprintf (file, _("  --dll-search-prefix=<string>       When linking dynamically to a dll without an\n\
                                       importlib, use <string><basename>.dll \n\
d363 1
a363 1
  fprintf (file, _("  --enable-auto-import               Do sophistcated linking of _sym to \n\
d367 2
a368 1
                                       adding pseudo-relocations resolved at runtime.\n"));
@


1.73
log
@Use LD_PATHMAX+1 to account for trailing '\0'.
@
text
@d135 1
a135 1
static bfd_boolean pr_sym PARAMS ((struct bfd_hash_entry *, PTR string));
d151 1
a151 1
static int pe_enable_stdcall_fixup = -1; /* 0=disable 1=enable */
d191 1
a191 1
/* Used for setting flags in the PE header. */
d282 1
a282 1
   parameters which may be input from the command line */
d323 1
d375 1
d382 2
a383 1
  /* Find the name and set it. */
a480 1

d496 1
a513 1

d554 1
a554 1
      /* PE options */
d691 2
a692 1
/* Use the output file to create a image base for relocatable DLLs. */
d708 1
a708 1
     names and insert the defaults. */
d731 1
a731 1
  /* Glue the assignments into the abs section */
d755 1
a755 1
  /* Restore the pointer. */
d804 2
a805 1
  sl = strlen (string); /* silence compiler warning */
d846 1
d863 1
a863 1
	       symbols - which means scanning the whole symbol table */
d873 1
d916 3
d923 1
a923 1
          /* C++ symbols are *long* */
d935 37
a971 39
             if (link_info.pei386_auto_import == -1)
               info_msg (_("Info: resolving %s by linking to %s (auto-import)\n"),
			 undef->root.string, buf);

	     {
	       bfd *b = sym->u.def.section->owner;
	       asymbol **symbols;
	       int nsyms, symsize, i;

	       symsize = bfd_get_symtab_upper_bound (b);
	       symbols = (asymbol **) xmalloc (symsize);
	       nsyms = bfd_canonicalize_symtab (b, symbols);

	       for (i = 0; i < nsyms; i++)
		 {
		   if (memcmp (symbols[i]->name, "__head_",
			       sizeof ("__head_") - 1))
		     continue;

		   if (pe_dll_extra_pe_debug)
		     printf ("->%s\n", symbols[i]->name);

		   pe_data_import_dll = (char*) (symbols[i]->name +
						 sizeof ("__head_") - 1);
		   break;
		 }
	     }

	     pe_walk_relocs_of_symbol (&link_info, undef->root.string,
				       make_import_fixup);

	     /* Let's differentiate it somehow from defined.  */
	     undef->type = bfd_link_hash_defweak;
	     /* We replace original name with __imp_ prefixed, this
		1) may trash memory 2) leads to duplicate symbol generation.
		Still, IMHO it's better than having name poluted.  */
	     undef->root.string = sym->root.string;
	     undef->u.def.value = sym->u.def.value;
	     undef->u.def.section = sym->u.def.section;
d1066 1
a1066 1
       things nicely and produce a valid import table. */
d1355 1
a1355 1
	  /* Not sure if these *should* be set */
d1864 1
a1864 1
             take precedence over dll's) */
d1871 1
a1871 1
                  /* Try "<prefix>foo.dll" (preferred dll name, if specified) */
d1875 1
a1875 1
                      /* Try "libfoo.dll" (default preferred dll name) */
d1879 1
a1879 1
                          /* Finally, try "foo.dll" (alternate dll name) */
d1965 2
a1966 2
  gld_${EMULATION_NAME}_finish, /* finish */
  NULL, /* create output section statements */
d1975 1
a1975 1
  NULL	/* new_vers_pattern */
@


1.72
log
@Duplicate entry for --compact-implib so that it is not confused with -c.
@
text
@d1395 1
a1395 1
      char fbuf[LD_PATHMAX];
d1399 1
a1399 1
	strncpy (fbuf, entry->filename, LD_PATHMAX);
@


1.71
log
@Add support to skip import libraries for performance reasons and instead
use the direct auto-import of dll's
@
text
@d263 3
@


1.70
log
@s/boolean/bfd_boolean/ s/true/TRUE/ s/false/FALSE/.  Simplify
comparisons of bfd_boolean vars with TRUE/FALSE.  Formatting.
@
text
@d387 1
a387 1
  abort();
d510 1
a510 1
gld_${EMULATION_NAME}_parse_args(argc, argv)
d636 1
a636 1
      pe_dll_search_prefix = xstrdup( optarg );
d736 6
a741 6
      if (init[j].size == sizeof(short))
	*(short *)init[j].ptr = val;
      else if (init[j].size == sizeof(int))
	*(int *)init[j].ptr = val;
      else if (init[j].size == sizeof(long))
	*(long *)init[j].ptr = val;
d743 3
a745 3
      else if (init[j].size == sizeof(bfd_vma))
	*(bfd_vma *)init[j].ptr = val;
      else	abort();
d846 2
a847 2
			einfo(_("Use --enable-stdcall-fixup to disable these warnings\n"));
			einfo(_("Use --disable-stdcall-fixup to disable these fixups\n"));
d872 2
a873 2
			einfo(_("Use --enable-stdcall-fixup to disable these warnings\n"));
			einfo(_("Use --disable-stdcall-fixup to disable these fixups\n"));
d893 1
a893 1
  if (!bfd_get_section_contents(s->owner, s, &addend, rel->address, sizeof(addend)))
d938 2
a939 2
		   if (memcmp(symbols[i]->name, "__head_",
			      sizeof ("__head_") - 1))
d1012 2
a1015 1
  pe_process_import_defs(output_bfd, &link_info);
d1223 1
a1223 1
gld_${EMULATION_NAME}_before_allocation()
d1284 1
a1284 1
gld_${EMULATION_NAME}_unrecognized_file(entry)
d1304 1
a1304 1
	      len = strlen(pe_def_file->exports[i].internal_name);
d1315 1
a1315 1
	      sprintf(buf, "_%s", pe_def_file->exports[i].internal_name);
d1374 1
a1374 1
gld_${EMULATION_NAME}_recognized_file(entry)
d1392 7
a1398 1
      const char *ext = entry->filename + strlen (entry->filename) - 4;
d1401 1
a1401 1
	return pe_implied_import_dll (entry->filename);
d1913 1
a1913 1
gld_${EMULATION_NAME}_get_script(isfile)
@


1.69
log
@Add --enable-auto-import extension.
@
text
@d114 1
a114 1
static boolean gld_${EMULATION_NAME}_place_orphan
d119 1
a119 1
static boolean gld_${EMULATION_NAME}_open_dynamic_archive
d128 1
a128 1
static boolean pe_undef_cdecl_match
d135 2
a136 2
static boolean pr_sym PARAMS ((struct bfd_hash_entry *, PTR string));
static boolean gld_${EMULATION_NAME}_unrecognized_file
d138 1
a138 1
static boolean gld_${EMULATION_NAME}_recognized_file
d174 1
a174 1
  config.dynamic_link = true;
d177 1
a177 1
  link_info.pei386_runtime_pseudo_reloc = false;
d256 1
a256 1
  {"exclude-libs", required_argument, NULL, OPTION_EXCLUDE_LIBS},	
d345 1
a345 1
  fprintf (file, _("  --exclude-libs lib,lib,...         Exclude libraries from automatic export\n"));	
d792 1
a792 1
static boolean
d804 1
a804 1
      return false;
d806 1
a806 1
  return true;
d824 1
a824 1
      
d968 1
a968 1
static boolean
d976 1
a976 1
  return true;
d1127 1
a1127 1
						     false, false, true);
d1282 1
a1282 1
static boolean
d1316 1
a1316 1
	      h = bfd_link_hash_lookup (link_info.hash, buf, true, true, true);
d1365 1
a1365 1
	  return true;
d1369 1
a1369 1
  return false;
d1372 1
a1372 1
static boolean
d1397 1
a1397 1
  return false;
d1408 2
a1409 1
      h = bfd_link_hash_lookup (link_info.hash, thumb_entry_symbol, false, false, true);
d1523 1
a1523 1
static boolean
d1764 1
a1764 1
	boolean found_dollar;
d1768 1
a1768 1
	found_dollar = false;
d1787 1
a1787 1
		found_dollar = true;
d1803 1
a1803 1
  return true;
d1806 1
a1806 1
static boolean
d1816 1
a1816 1
    return false;
d1867 1
a1867 1
                              return false;
d1884 1
a1884 1
                          return false;
d1894 1
a1894 1
  return true;
d1917 1
a1917 1
  if (link_info.relocateable == true && config.build_constructors == true)
d1920 10
a1929 10
sed $sc ldscripts/${EMULATION_NAME}.xu                     >> e${EMULATION_NAME}.c
echo '  ; else if (link_info.relocateable == true) return' >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xr                     >> e${EMULATION_NAME}.c
echo '  ; else if (!config.text_read_only) return'         >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xbn                    >> e${EMULATION_NAME}.c
echo '  ; else if (!config.magic_demand_paged) return'     >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xn                     >> e${EMULATION_NAME}.c
echo '  ; else return'                                     >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.x                      >> e${EMULATION_NAME}.c
echo '; }'                                                 >> e${EMULATION_NAME}.c
@


1.68
log
@Adds support for fastcall symbols as used on Microsoft Windows platforms
(i386)
@
text
@d15 13
a27 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d177 1
d226 4
d271 2
d362 4
d647 6
d897 1
a897 8
  if (addend == 0)
    pe_create_import_fixup (rel);
  else
    {
      einfo (_("%C: variable '%T' can't be auto-imported. Please read the documentation for ld's --enable-auto-import for details.\n"),
	     s->owner, s, rel->address, sym->name);
      einfo ("%X");
    }
@


1.67
log
@	* emultempl/aix.em: Use include <> for generated headers.
	* emultempl/beos.em: Likewise.
	* emultempl/elf32.em: Likewise.
	* emultempl/pe.em: Likewise.
	* ldctor.c: Likewise.
	* ldexp.c: Likewise.
	* ldfile.c: Likewise.
	* ldlang.c: Likewise.
	* ldlex.c: Likewise.
	* ldlex.l: Likewise.
	* ldmain.c: Likewise.
	* ldmisc.c: Likewise.
	* ldwrite.c: Likewise.
	* lexsup.c: Likewise.
	* mri.c: Likewise.
	* pe-dll.c: Likewise.
@
text
@d797 1
a797 1
  char *at;
d799 1
a799 3
    {
      printf ("%s\n", __FUNCTION__);
    }
a802 3
    {
      at = strchr (undef->root.string, '@@');
      if (at)
d804 57
a860 23
	/* The symbol is a stdcall symbol, so let's look for a cdecl
	   symbol with the same name and resolve to that */
	char *cname = xstrdup (undef->root.string);
	at = strchr (cname, '@@');
	*at = 0;
	sym = bfd_link_hash_lookup (link_info.hash, cname, 0, 0, 1);
	if (sym && sym->type == bfd_link_hash_defined)
	{
	  undef->type = bfd_link_hash_defined;
	  undef->u.def.value = sym->u.def.value;
	  undef->u.def.section = sym->u.def.section;
	  if (pe_enable_stdcall_fixup == -1)
	    {
	      einfo (_("Warning: resolving %s by linking to %s\n"),
		     undef->root.string, cname);
	      if (! gave_warning_message)
		{
		  gave_warning_message = 1;
		  einfo(_("Use --enable-stdcall-fixup to disable these warnings\n"));
		  einfo(_("Use --disable-stdcall-fixup to disable these fixups\n"));
		}
	    }
	}
a861 27
      else
      {
	/* The symbol is a cdecl symbol, so we look for stdcall
	   symbols - which means scanning the whole symbol table */
	pe_undef_found_sym = 0;
	bfd_link_hash_traverse (link_info.hash, pe_undef_cdecl_match,
				(PTR) undef->root.string);
	sym = pe_undef_found_sym;
	if (sym)
	{
	  undef->type = bfd_link_hash_defined;
	  undef->u.def.value = sym->u.def.value;
	  undef->u.def.section = sym->u.def.section;
	  if (pe_enable_stdcall_fixup == -1)
	    {
	      einfo (_("Warning: resolving %s by linking to %s\n"),
		     undef->root.string, sym->root.string);
	      if (! gave_warning_message)
		{
		  gave_warning_message = 1;
		  einfo(_("Use --enable-stdcall-fixup to disable these warnings\n"));
		  einfo(_("Use --disable-stdcall-fixup to disable these fixups\n"));
		}
	    }
	}
      }
    }
d870 1
d873 10
d884 3
a886 2
      printf ("arelent: %s@@%#lx: add=%li\n", sym->name,
              (long) rel->address, (long) rel->addend);
a888 18
  {
    int addend = 0;
    if (!bfd_get_section_contents(s->owner, s, &addend, rel->address, sizeof(addend)))
      {
        einfo (_("%C: Cannot get section contents - auto-import exception\n"),
               s->owner, s, rel->address);
      }

    if (addend == 0)
      pe_create_import_fixup (rel);
    else
      {
        einfo (_("%C: variable '%T' can't be auto-imported. Please read the documentation for ld's --enable-auto-import for details.\n"),
               s->owner, s, rel->address, sym->name);
        einfo ("%X");
      }
  }

d896 1
d903 4
a906 4
          if (pe_dll_extra_pe_debug)
            {
              printf ("%s:%s\n", __FUNCTION__, undef->root.string);
            }
d910 1
d915 37
a951 36
                      undef->root.string, buf);
              {
                bfd *b = sym->u.def.section->owner;
                asymbol **symbols;
                int nsyms, symsize, i;

                symsize = bfd_get_symtab_upper_bound (b);
                symbols = (asymbol **) xmalloc (symsize);
                nsyms = bfd_canonicalize_symtab (b, symbols);

                for (i = 0; i < nsyms; i++)
                  {
                    if (memcmp(symbols[i]->name, "__head_",
                             sizeof ("__head_") - 1))
                      continue;
                    if (pe_dll_extra_pe_debug)
                      {
                        printf ("->%s\n", symbols[i]->name);
                      }
                    pe_data_import_dll = (char*) (symbols[i]->name +
                                                  sizeof ("__head_") - 1);
                    break;
                  }
              }

              pe_walk_relocs_of_symbol (&link_info, undef->root.string,
                                        make_import_fixup);

              /* let's differentiate it somehow from defined */
              undef->type = bfd_link_hash_defweak;
              /* we replace original name with __imp_ prefixed, this
                 1) may trash memory 2) leads to duplicate symbol generation.
                 Still, IMHO it's better than having name poluted. */
              undef->root.string = sym->root.string;
              undef->u.def.value = sym->u.def.value;
              undef->u.def.section = sym->u.def.section;
d964 2
a965 3
    {
      printf("+%s\n",h->string);
    }
a972 1

d977 1
d985 1
a985 3
        {
          printf("*%s\n",a->filename);
        }
d1215 1
a1215 1
  /* Here we rummage through the found bfds to collect toc information */
d1227 1
a1227 1
  /* We have seen it all. Allocate it, and carry on */
d1237 1
a1237 1
     option?  krk@@cygnus.com */
d1251 1
a1251 1
  /* We have seen it all. Allocate it, and carry on */
d1258 1
a1258 1
   check here for .DEF files and pull them in automatically. */
d1261 1
a1261 1
saw_option(char *option)
d1264 2
a1265 1
  for (i=0; init[i].ptr; i++)
a1279 5
  {
    if (pe_def_file == 0)
      pe_def_file = def_file_empty ();
    def_file_parse (entry->filename, pe_def_file);
    if (pe_def_file)
d1281 6
a1286 3
      int i, buflen=0, len;
      char *buf;
      for (i=0; i<pe_def_file->num_exports; i++)
d1288 11
a1298 9
	  len = strlen(pe_def_file->exports[i].internal_name);
	  if (buflen < len+2)
	    buflen = len+2;
	}
      buf = (char *) xmalloc (buflen);
      for (i=0; i<pe_def_file->num_exports; i++)
	{
	  struct bfd_link_hash_entry *h;
	  sprintf(buf, "_%s", pe_def_file->exports[i].internal_name);
d1300 1
a1300 4
	  h = bfd_link_hash_lookup (link_info.hash, buf, true, true, true);
	  if (h == (struct bfd_link_hash_entry *) NULL)
	    einfo (_("%P%F: bfd_link_hash_lookup failed: %E\n"));
	  if (h->type == bfd_link_hash_new)
d1302 13
a1314 3
	      h->type = bfd_link_hash_undefined;
	      h->u.undef.abfd = NULL;
	      bfd_link_add_undef (link_info.hash, h);
d1316 1
a1316 2
	}
      free (buf);
d1318 3
a1320 3
      /* def_file_print (stdout, pe_def_file); */
      if (pe_def_file->is_dll == 1)
	link_info.shared = 1;
d1322 10
a1331 10
      if (pe_def_file->base_address != (bfd_vma)(-1))
      {
	pe.ImageBase =
	pe_data (output_bfd)->pe_opthdr.ImageBase =
	init[IMAGEBASEOFF].value = pe_def_file->base_address;
	init[IMAGEBASEOFF].inited = 1;
	if (image_base_statement)
	  image_base_statement->exp =
	    exp_assop ('=', "__image_base__", exp_intop (pe.ImageBase));
      }
d1334 6
a1339 6
      /* Not sure if these *should* be set */
      if (pe_def_file->version_major != -1)
      {
	pe.MajorImageVersion = pe_def_file->version_major;
	pe.MinorImageVersion = pe_def_file->version_minor;
      }
d1341 16
a1356 15
      if (pe_def_file->stack_reserve != -1
	  && ! saw_option ("__size_of_stack_reserve__"))
      {
	pe.SizeOfStackReserve = pe_def_file->stack_reserve;
	if (pe_def_file->stack_commit != -1)
	  pe.SizeOfStackCommit = pe_def_file->stack_commit;
      }
      if (pe_def_file->heap_reserve != -1
	  && ! saw_option ("__size_of_heap_reserve__"))
      {
	pe.SizeOfHeapReserve = pe_def_file->heap_reserve;
	if (pe_def_file->heap_commit != -1)
	  pe.SizeOfHeapCommit = pe_def_file->heap_commit;
      }
      return true;
a1357 1
  }
a1359 1

d1382 1
d1453 1
a1453 1
  /* I don't know where .idata gets set as code, but it shouldn't be */
d1456 1
a1511 1
/*ARGSUSED*/
a1526 1

d1660 2
a1661 2
	  /* lang_leave_ouput_section_statement resets stat_ptr.  Put
	     stat_ptr back where we want it.  */
a1756 1

d1817 1
a1817 1
  /* Try "libfoo.dll.a" first (preferred explicit import library for dll's */
d1822 1
a1822 1
      /* Try "foo.dll.a" next (alternate explicit import library for dll's */
d1826 9
a1834 11
/*
   Try libfoo.a next. Normally, this would be interpreted as a static
   library, but it *could* be an import library. For backwards compatibility,
   libfoo.a needs to ==precede== libfoo.dll and foo.dll in the search,
   or sometimes errors occur when building legacy packages.

   Putting libfoo.a here means that in a failure case (i.e. the library
   -lfoo is not found) we will search for libfoo.a twice before
   giving up -- once here, and once when searching for a "static" lib.
   for a "static" lib.
*/
d1861 1
a1861 1
              else /* pe_dll_search_prefix not specified */
d1864 1
a1864 1
                  /* Try "libfoo.dll" (preferred dll name) */
d1868 1
a1868 1
                      /* Finally, try "foo.dll" (alternate dll name) */
@


1.66
log
@	* emultempl/elf32.em (gld${EMULATION_NAME}_place_orphan): Don't
	bomb on /DISCARD/ input section.
	* emultempl/pe.em (gld_${EMULATION_NAME}_place_orphan): Likewise.
	* emultempl/mmo.em (mmo_place_orphan): Likewise.
@
text
@d59 1
a59 1
#include "ldgram.h"
@


1.65
log
@	* ldlang.h (entry_sym): Make it a struct bfd_sym_chain.
	* ldlang.c (entry_sym): Likewise.
	(ldlang_undef_chain_list_type): Likewise.
	(lang_finish): Adjust references to entry_symbol.
	(lang_add_entry): Likewise.
	(lang_gc_sections): Use link_info.gc_sym_list.
	(lang_process): Set link_info.gc_sym_list.
	* ldlex.l: Include bfdlink.h.
	* ldmain.c (main): Init link_info.gc_sym_list.
	* emultempl/aix.em: Adjust references to entry_symbol.
	* emultempl/armcoff.em: Likewise.
	* emultempl/armelf.em: Likewise.
	* emultempl/pe.em: Likewise.
	* emultempl/ppc64elf.em (ppc_after_open): New function.
	(LDEMUL_AFTER_OPEN): Define.
	* emulparams/elf64ppc.sh: KEEP .opd sections.
@
text
@d1671 1
a1671 1
      if (place != NULL)
@


1.65.2.1
log
@	* emultempl/elf32.em (gld${EMULATION_NAME}_place_orphan): Don't
	bomb on /DISCARD/ input section.
	* emultempl/pe.em (gld_${EMULATION_NAME}_place_orphan): Likewise.
	* emultempl/mmo.em (mmo_place_orphan): Likewise.
@
text
@d1671 1
a1671 1
      if (place != NULL && os->bfd_section != NULL)
@


1.65.2.2
log
@        * emultempl/aix.em: Use include <> for generated headers.
        * emultempl/beos.em: Likewise.
        * emultempl/elf32.em: Likewise.
        * emultempl/pe.em: Likewise.
        * ldctor.c: Likewise.
        * ldexp.c: Likewise.
        * ldfile.c: Likewise.
        * ldlang.c: Likewise.
        * ldlex.c: Likewise.
        * ldlex.l: Likewise.
        * ldmain.c: Likewise.
        * ldmisc.c: Likewise.
        * ldwrite.c: Likewise.
        * lexsup.c: Likewise.
        * mri.c: Likewise.
        * pe-dll.c: Likewise.
@
text
@d59 1
a59 1
#include <ldgram.h>
@


1.65.2.3
log
@	* as.c (std_longopts): Duplicate --keep-locals entry in order to
	prevent it being confused with -k.

	* emultempl/pe.em (longopts): Duplicate entry for --compact-implib
	so that it is not confused with -c.
@
text
@a257 3
  /* getopt() allows abbreviations, so we do this to stop it from
     treating -c as an abbreviation for these --compat-implib.  */
  {"compat-implib", no_argument, NULL, OPTION_IMP_COMPAT},
@


1.64
log
@Enable pei386_auto_import by default.  Only print a info message about auto
imports being resilved if this feature was not requested via a command line
switch.
@
text
@d761 2
a762 2
  if (! link_info.relocateable && entry_symbol != NULL)
    ldlang_add_undef (entry_symbol);
d1421 1
a1421 1
	  if (entry_symbol != NULL && entry_from_cmdline)
d1423 2
a1424 2
		   thumb_entry_symbol, entry_symbol);
	  entry_symbol = buffer;
@


1.63
log
@	* ldlang.c (lang_size_sections_1): Move check for conflicting load
	addresses and regions from here...
	(lang_get_regions): ...to this new function.
	(lang_leave_output_section_statement): Use lang_get_regions.
	(lang_leave_overlay): Likewise.
	* mri.c (mri_draw_tree): Pass null as last argument to
	lang_leave_output_section_statement.
	* emultempl/elf32.em (gld*_place_orphan): Likewise.
	* emultempl/mmo.em (mmo_place_orphan): Likewise.
	* emultempl/pe.em (gld*_place_orphan): Likewise.
@
text
@d176 1
a176 1
/* link_info.pei386_auto_import = true; */
d631 1
a631 1
      link_info.pei386_auto_import = true;
d634 1
a634 1
      link_info.pei386_auto_import = false;
d915 3
a917 2
              einfo (_("Warning: resolving %s by linking to %s (auto-import)\n"),
                     undef->root.string, buf);
@


1.62
log
@* pe-dll.c (autofilter_liblist): Add more system libs excluded by default.
(autofilter_objlist): Add crtbegin.o, crtend.o.
* emultempl/pe.em (OPTION_EXCLUDE_LIBS): Add new define.
(longopts): Add new option --exclude-libs.
(gld_${EMULATION_NAME}_list_options): Give quick help about it.
(gld_${EMULATION_NAME}_parse_args): Use it.
* pe-dll.h (pe_dll_add_excludes): Add second param to prototype.
* pe-dll.c (exclude_list_struct): Add field type to distinguish symbols from
whole archives.
(pe_dll_add_excludes): Set excludes->type.
(auto_export): Add new variable libname and set to archive basename if abfd.
Use it when filtering default and user-specified libarary excludes.  Let string
"ALL" mean all libs when filtering user-specified libs.
* ld.texinfo: Document --exclude-libs.
@
text
@d1651 1
a1651 1
	 (struct lang_output_section_phdr_list *) NULL, "*default*");
@


1.61
log
@	* ldemul.c (ldemul_new_vers_pattern): New function.
	* ldemul.h (ldemul_new_vers_pattern): Declare.
	(struct ld_emulation_xfer_struct): Add new_vers_pattern.
	* ldlang.c (lang_new_vers_pattern): Call ldemul_new_vers_pattern.
	* emultempl/ppc64elf.em (dotsyms): New static var.
	(gld${EMULATION_NAME}_new_vers_pattern): New function.
	(LDEMUL_NEW_VERS_PATTERN): Define.
	(PARSE_AND_LIST_PROLOGUE): Add OPTION_DOTSYMS, OPTION_NO_DOTSYMS.
	(PARSE_AND_LIST_LONGOPTS): Likewise.
	(PARSE_AND_LIST_ARGS_CASES): Handle them.
	* emultempl/aix.em (ld_${EMULATION_NAME}_emulation): Update
	initialiser.
	* emultempl/armcoff.em: Likewise.
	* emultempl/armelf_oabi.em: Likewise.
	* emultempl/beos.em: Likewise.
	* emultempl/elf32.em: Likewise.
	* emultempl/generic.em: Likewise.
	* emultempl/gld960.em: Likewise.
	* emultempl/gld960c.em: Likewise.
	* emultempl/linux.em: Likewise.
	* emultempl/lnk960.em: Likewise.
	* emultempl/m68kcoff.em: Likewise.
	* emultempl/mipsecoff.em: Likewise.
	* emultempl/pe.em: Likewise.
	* emultempl/sunos.em: Likewise.
	* emultempl/ticoff.em: Likewise.
	* emultempl/vanilla.em: Likewise.
@
text
@d224 1
d251 1
d338 1
d592 4
a595 1
      pe_dll_add_excludes (optarg);
@


1.60
log
@	* emultempl/pe.em (set_pe_subsystem): Don't set "cmdline" when
	calling lang_add_entry.
@
text
@d1940 2
a1941 1
  gld_${EMULATION_NAME}_find_potential_libraries
@


1.59
log
@	Support arbitrary length fill patterns.
	* ldexp.h (etree_value_type): Add "str" field.
	(union etree_union): Add "str" to "value" struct.
	(exp_bigintop): Declare.
	(exp_get_fill): Declare.
	* ldexp.c: Include "safe-ctype.h".
	(exp_intop): Set value.str to NULL.
	(exp_bigintop): New function.
	(new_rel): Pass in "str", and set new.str from it.
	(new_rel_from_section): Set new.str to NULL.
	(fold_name): Adjust calls to new_rel.
	(exp_fold_tree): Likewise.
	(exp_get_fill): New function.
	* ldgram.y (struct big_int bigint, fill_type *fill): New.
	(INT): Returns a "bigint".  Adjust all code handling INTs.
	(fill_opt): Returns a "fill".
	(fill_exp): Split out of fill_opt, use for FILL.
	* ldlang.h (struct _fill_type): New.
	(fill_type): Move typedef to ldexp.h.
	(lang_output_section_statement_type): "fill" is now a pointer.
	(lang_fill_statement_type): Likewise.
	(lang_padding_statement_type): Likewise.
	(lang_add_fill): Now takes a "fill_type *" param.
	(lang_leave_output_section_statement): Likewise.
	(lang_do_assignments): Likewise.
	(lang_size_sections): Likewise.
	(lang_leave_overlay_section): Likewise.
	(lang_leave_overlay): Likewise.
	* ldlang.c: Include ldgram.h after ldexp.h.
	(lang_output_section_statement_lookup): Adjust for fill_type change.
	(print_fill_statement): Likewise.
	(print_padding_statement): Likewise.
	(insert_pad): Now takes a "fill_type *" arg.
	(size_input_section): Likewise.
	(lang_size_sections_1): Likewise.
	(lang_size_sections): Likewise.
	(lang_do_assignments): Likewise.
	(lang_add_fill): Likewise.
	(lang_leave_output_section_statement): Likewise.
	(lang_leave_overlay_section): Likewise.
	(lang_leave_overlay): Likewise.
	Adjust all callers of the above function.
	* ldlex.l: Include ldgram.h after ldexp.h.  Allow hex numbers
	starting with "0X" as well as "0x".  Return bigint.str for hex
	numbers starting with "0x" or "0X", zero bigint.str otherwise.
	Always use base 16 for numbers starting with "$".
	* ldmain.c: Include ldgram.h after ldexp.h.
	* ldwrite.c (build_link_order): Use bfd_data_link_order in place
	of bfd_fill_link_order.
	* pe-dll.c: Adjust lang_do_assignments calls.
	* emultempl/elf32.em: Likewise.
	* emultempl/hppaelf.em: Likewise.
	* emultempl/ppc64elf.em: Likewise.
	* emultempl/beos.em: Include ldgram.h after ldexp.h, adjust
	lang_add_assignment call.
	* emultempl/pe.em: Likewise.
@
text
@d451 1
a451 1
	  lang_add_entry (entry, 1);
@


1.58
log
@	* emultempl/elf32.em (gld${EMULATION_NAME}_place_orphan): Make use
	of bfd_section_list_remove and bfd_section_list_insert macros.
	* emultempl/pe.em (gld_${EMULATION_NAME}_place_orphan): Likewise.
	* emultempl/mmo.em (mmo_place_orphan): Likewise.
@
text
@d12 1
a12 1
   Copyright 1995, 1996, 1997, 1998, 1999, 2000, 2001
a54 1
#include "ldgram.h"
d59 1
d711 2
a712 1
      rv = lang_add_assignment (exp_assop ('=' ,init[j].symbol, exp_intop (val)));
@


1.57
log
@hash bfd sections for fast lookup and create.
bfd/ChangeLog
	* bfd.c (struct _bfd): Add section_htab, section_tail.
	* libbfd-in.h (_bfd_delete_bfd): Declare.
	(bfd_section_hash_newfunc): Declare.
	* opncls.c (_bfd_new_bfd): Free memory on failure.  Init
	section_htab and section_tail.
	(_bfd_delete_bfd): New function.
	(bfd_openr): Use it.
	(bfd_fdopenr): Likewise.
	(bfd_openstreamr): Likewise.
	(bfd_openw): Likewise.
	(bfd_close): Likewise.
	(bfd_close_all_done): Likewise.
	(bfd_release): Comment.
	* section.c (struct section_hash_entry): New.
	(bfd_section_hash_newfunc): New function.
	(section_hash_lookup): Define.
	(bfd_section_init): New function, split out from
	bfd_make_section_anyway.
	(bfd_get_section_by_name): Lookup via hash table.
	(bfd_get_unique_section_name): Likewise.
	(bfd_make_section_old_way): Rewrite to use hash table.
	(bfd_make_section_anyway): Likewise.
	(bfd_make_section): Likewise.  Return NULL for attempts to make
	BFD_{ABS,COM,UND,IND}_SECTION_NAME.
	(_bfd_strip_section_from_output): Adjust section_tail if needed.
	* configure.in: Bump bfd version.
	* configure: Regenerate.
	* libbfd.h: Regenerate.
	* bfd-in2.h: Regenerate.

ld/ChangeLog
	* emultempl/elf32.em (gld${EMULATION_NAME}_place_orphan): Adjust
	section_tail when fiddling with section list.
	(gld${EMULATION_NAME}_list_options): Ensure sentences aren't
	broken into separate strings to make translation easier.
	* emultempl/mmo.em (mmo_place_orphan): Adjust section_tail when
	fiddling with section list.
	* emultempl/pe.em (gld_${EMULATION_NAME}_place_orphan): Likewise.
@
text
@d1688 1
a1688 1
	      /*  Unlink the section.  */
d1693 1
a1693 3
	      *pps = snew->next;
	      if (snew->next == NULL)
		snew->owner->section_tail = pps;
d1696 1
a1696 4
	      snew->next = *place->section;
	      *place->section = snew;
	      if (snew->next == NULL)
		snew->owner->section_tail = &snew->next;
@


1.56
log
@* emultempl/pe.em (gld_${EMULATION_NAME}_list_options): Fix typo.
@
text
@d1694 2
d1700 2
@


1.55
log
@Fixes to improve the ability to translate messages in the binutils tools
@
text
@d346 1
a346 1
  fprintf (file, _("  --dll-search-prefix=<string>       When linking dynamically to a dll witout an\n\
@


1.54
log
@oops - omitted from previous delta
@
text
@d341 4
a344 4
  fprintf (file, _("  --compat-implib                    Create backward compatible import libs;\n"));
  fprintf (file, _("                                       create __imp_<SYMBOL> as well.\n"));
  fprintf (file, _("  --enable-auto-image-base           Automatically choose image base for DLLs\n"));
  fprintf (file, _("                                       unless user specifies one\n"));
d346 5
a350 5
  fprintf (file, _("  --dll-search-prefix=<string>       When linking dynamically to a dll witout an\n"));
  fprintf (file, _("                                       importlib, use <string><basename>.dll \n"));
  fprintf (file, _("                                       in preference to lib<basename>.dll \n"));
  fprintf (file, _("  --enable-auto-import               Do sophistcated linking of _sym to \n"));
  fprintf (file, _("                                       __imp_sym for DATA references\n"));
d352 2
a353 2
  fprintf (file, _("  --enable-extra-pe-debug            Enable verbose debug output when building\n"));
  fprintf (file, _("                                       or linking to DLLs (esp. auto-import)\n"));
@


1.53
log
@Define and use pe_get_data_import_dll_name().
@
text
@a155 1
static char *pe_data_import_dll = NULL;
d758 6
a763 17
/* Previously, pe-dll.c directly accessed pe_data_import_dll,
   which was only defined if DLL_SUPPORT.  This cause a build
   failure on certain targets. At least this function will
   exist regardless of whether DLL_SUPPORT is defined or not.
  
   However, it's still a kludge.  pe-dll.c shouldn't directly
   call any functions other than the gld_${EMULATION_NAME}_*.  */

char *
pe_get_data_import_dll_name ()
{
#ifdef DLL_SUPPORT
  return pe_data_import_dll;
#else
  return "unknown";
#endif
}
@


1.52
log
@	* deffilep.y (def_stash_module): Constify "name" param.

	* pe-dll.c: Replace CONST with const throughout.
	(quick_symbol): Constify "n1", "n2", "n3" params.
	(make_singleton_name_thunk): Constify "import" param.  Make
	"buffer_len" a size_t.
	(make_import_fixup_entry): Constify "name", "fixup_name",
	"dll_symname" params.
	(pe_get16): Cast args of bfd_seek.  Replace bfd_read with bfd_bread.
	(pe_get32): Likewise.
	(pe_implied_import_dll): Likewise.

	* emultempl/beos.em (sort_by_file_name): Constify "ra", "rb".
	(sort_by_section_name): Likewise.

	* emultempl/pe.em: Move defines for arm_epoc_pe before bfd.h included.
	(make_import_fixup): Cast printf arg, rel->address to long rather
	than int.
	(gld_${EMULATION_NAME}_after_open): Don't compare NULL against int.
@
text
@d156 1
d759 18
a899 2

char *pe_data_import_dll;
@


1.51
log
@2001-09-12  Paul Sokolovsky  <Paul.Sokolovsky@@technologist.com>
        * emultempl/pe.em(make_import_fixup): change signature to
        take asection as well as arelec; we need this for proper
        error reporting.  Only call pe_create_import_fixup() if
        there is no attempt to add a constant addend to the reloc;
        otherwise, report error condition.
        * pe-dll.c(pe_walk_relocs_of_symbol): change signature,
        since final argument is a pointer to make_import_fixup().
        Change call to cb() to match make_import_fixup() signature.
        (make_import_fixup_mark): make buffer_len unsigned.
        * pe-dll.h: change signature of pe_walk_relocs_of_symbol.
2001-09-12  Charles Wilson  <cwilson@@ece.gatech.edu>
        * ld.texinfo: add verbose documentation for auto-import
        direct-addressing workaround, to compliment the terse
        error message.
@
text
@d36 12
a73 2
#define TARGET_IS_${EMULATION_NAME}

a106 9
#ifdef TARGET_IS_arm_epoc_pe
#define bfd_arm_pe_allocate_interworking_sections \
	bfd_arm_epoc_pe_allocate_interworking_sections
#define bfd_arm_pe_get_bfd_for_interworking \
	bfd_arm_epoc_pe_get_bfd_for_interworking
#define bfd_arm_pe_process_before_allocation \
	bfd_arm_epoc_pe_process_before_allocation
#endif

d857 2
a858 2
      printf ("arelent: %s@@%#x: add=%li\n", sym->name,
              (int) rel->address, rel->addend);
d983 1
a983 1
  if (coff_data (output_bfd) == NULL || coff_data (output_bfd)->pe == NULL)
@


1.50
log
@
	* emultempl/pe.em: Add missing prototypes.
	(gld_${EMULATION_NAME}_after_open): Remove extra args to
	pe_find_data_imports.
	(pr_sym): Add unused attribute.
@
text
@d130 1
a130 1
static int make_import_fixup PARAMS ((arelent *));
d848 1
a848 1
make_import_fixup (rel)
d850 1
a852 3
/*
  bfd *b;
*/
d859 19
a877 1
  pe_create_import_fixup (rel);
@


1.49
log
@	* ldlang.c: When traversing lang_statement_union_type lists,
	consistently use "header.next" rather than "next".
	* mpw-eppcmac.c: Likewise.
	* emultempl/beos.em: Likewise.
	* emultempl/hppaelf.em: Likewise.
	* emultempl/pe.em: Likewise.
	* ldlang.h (union lang_statement_union): Remove "next" field.
@
text
@d3 1
a3 1
if [ -z "$MACHINE" ]; then 
d34 2
a35 2
   the correct entry point by default. */ 
  
d118 1
a118 1
static boolean gld_${EMULATION_NAME}_open_dynamic_archive 
d120 22
d229 1
a229 1
  {"heap", required_argument, NULL, OPTION_HEAP}, 
d382 1
a382 1
  static const struct 
d455 1
a455 1
  
d464 1
a464 1
     
d467 1
a467 1
  
d469 1
a469 1
  
d482 1
a482 1
  
d535 1
a535 1
    case OPTION_HEAP: 
d538 1
a538 1
    case OPTION_STACK: 
d639 1
a639 1
static unsigned long 
d726 1
a726 1
  
d783 1
a783 1
  if (pe_dll_extra_pe_debug) 
d787 1
a787 1
  
d853 1
a853 1
  bfd *b; 
d856 1
a856 1
  if (pe_dll_extra_pe_debug) 
d858 1
a858 1
      printf ("arelent: %s@@%#x: add=%li\n", sym->name, 
d877 1
a877 1
          if (pe_dll_extra_pe_debug) 
d888 1
a888 1
              {  
d892 1
a892 1
     
d899 1
a899 1
                    if (memcmp(symbols[i]->name, "__head_", 
d906 1
a906 1
                    pe_data_import_dll = (char*) (symbols[i]->name + 
d912 1
a912 1
              pe_walk_relocs_of_symbol (&link_info, undef->root.string, 
d932 1
a932 1
  PTR string;
d934 1
a934 1
  if (pe_dll_extra_pe_debug) 
d946 1
a946 1
  if (pe_dll_extra_pe_debug) 
d961 1
a961 1
  
d965 1
a965 1
  
d976 1
a976 1
  pe_find_data_imports (output_bfd, &link_info);
d1027 1
a1027 1
	    
d1037 1
a1037 1
	    
d1050 1
a1050 1
		    
d1057 1
a1057 1
		    
d1059 1
a1059 1
 		    symsize = bfd_canonicalize_symtab (is->the_bfd, symbols);
d1065 1
a1065 1
		    
d1075 1
a1075 1
		    
d1082 1
a1082 1
			
d1084 1
a1084 1
			
d1087 1
a1087 1
			
d1092 1
a1092 1
			    
d1096 1
a1096 1
			
d1098 1
a1098 1
			    
d1102 1
a1102 1
			
d1105 1
a1105 1
			    
d1107 1
a1107 1
			    
d1185 1
a1185 1
static void  
d1327 1
a1327 1
  
d1366 1
a1366 1
      
d1374 1
a1374 1
	  
d1381 1
a1381 1
	  
d1383 1
a1383 1
	  
d1388 1
a1388 1
	  
d1390 1
a1390 1
	  
d1415 1
a1415 1
  
d1593 1
a1593 1
	      
d1601 1
a1601 1
      
d1632 1
a1632 1
	  
d1780 1
a1780 1
                             + strlen (filename) 
d1814 1
a1814 1
                {  
d1834 1
a1834 1
#endif		
d1875 1
a1875 1
{			     
d1895 1
a1895 1
struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation = 
@


1.48
log
@	* pe-dll.c (pe_dll_fill_sections): Correct type of "relax" param
	passed to lang_size_sections.
	(pe_exe_fill_sections): Likewise.
	* emultempl/pe.em (output_prev_sec_find): Copied from elf32.em.
	(gld_${EMULATION_NAME}_place_orphan): Merge from elf32.em.
@
text
@d1706 1
a1706 1
	for ( ; *pl != NULL; pl = &(*pl)->next)
d1733 1
a1733 1
	add_child.head->next = *pl;
@


1.47
log
@(wild_doit): Rename to lang_add_section.
@
text
@d111 2
d1410 26
d1486 3
a1488 2
      && os->bfd_section != NULL
      && ((s->flags ^ os->bfd_section->flags) & (SEC_LOAD | SEC_ALLOC)) == 0)
d1490 2
d1532 1
a1532 1
	 different loadable or allocateable characteristics.  */
d1624 4
a1627 1
	  if (place->os->bfd_section != NULL || place->section != NULL)
d1629 12
a1640 17
	      /* Shuffle the section to make the output file look neater.  */
	      if (place->section == NULL)
		{
#if 0
		  /* Finding the end of the list is a little tricky.  We
		     make a wild stab at it by comparing section flags.  */
		  flagword first_flags = place->os->bfd_section->flags;
		  for (pps = &place->os->bfd_section->next;
		       *pps != NULL && (*pps)->flags == first_flags;
		       pps = &(*pps)->next)
		    ;
		  place->section = pps;
#else
		  /* Put orphans after the first section on the list.  */
		  place->section = &place->os->bfd_section->next;
#endif
		}
d1642 2
d1645 3
a1647 1
	      for (pps = &output_bfd->sections; *pps != snew; pps = &(*pps)->next)
a1654 1
	  place->section = &snew->next;	/* Save the end of this list.  */
d1656 14
a1669 1
	  if (place->stmt == NULL)
d1671 20
a1690 9
	      /* Put the new statement list right at the head.  */
	      *add.tail = place->os->header.next;
	      place->os->header.next = add.head;
	    }
	  else
	    {
	      /* Put it after the last orphan statement we added.  */
	      *add.tail = *place->stmt;
	      *place->stmt = add.head;
a1691 1
	  place->stmt = add.tail;	/* Save the end of this list.  */
@


1.46
log
@2001-08-02  Charles Wilson  <cwilson@@ece.gatech.edu>
        * ldmain.c (main): initialize link_info.pei386_auto_import
        * pe-dll.c: new tables for auto-export filtering
        (auto_export): change API, pass abfd for contextual filtering.
        Loop thru tables of excluded symbols instead of comparing
        "by hand".
2001-08-02  Paul Sokolovsky  <paul.sokolovsky@@technologist.com>
        * pe-dll.c: new variable pe_dll_enable_extra_debug. New
        static variable current_sec (static struct sec *). Add
        forward declaration for add_bfd_to_link.
        (process_def_file): Don't export undefined symbols. Do not
        export symbols starting with  "_imp__".  Call auto_export()
        with new API.
        (pe_walk_relocs_of_symbol): New function.
        (generate_reloc): add optional extra debugging
        (pe_dll_generate_def_file): eliminate extraneous initial blank
        line in output
        (make_one): enlarge symtab to make room for __nm__ symbols
        (DATA auto-import support).
        (make_singleton_name_thunk): New function.
        (make_import_fixup_mark): New function.
        (make_import_fixup_entry): New function.
        (pe_create_import_fixup): New function.
        (add_bfd_to_link): Specify that 'name' argument is a CONST
        char *.
        * pe-dll.h: declare new variable pe_dll_extra_pe_debug;
        declare new functions pe_walk_relocs_of_symbol and
        pe_create_import_fixup.
        * emultempl/pe.em: add new options --enable-auto-import,
        --disable-auto-import, and --enable-extra-pe-debug.
        (make_import_fixup): New function.
        (pe_find_data_imports): New function.
        (pr_sym): New function.
        (gld_${EMULATION_NAME}_after_open): Add optional extra pe
        debugging. Call pe_find_data_imports.  Mark .idata as DATA, not
        CODE.
2001-08-02  Charles Wilson  <cwilson@@ece.gatech.edu>
        * ld.texinfo: add additional documentation for
        --export-all-symbols.  Document --out-implib,
        --enable-auto-image-base, --disable-auto-image-base,
        --dll-search-prefix, --enable-auto-import, and
        --disable-auto-import.
        * ldint.texinfo: Add detailed documentation on auto-import
        implementation.
@
text
@d12 1
a12 1
   Copyright 1995, 1996, 1997, 1998, 1999, 2000
d1461 1
a1461 1
      wild_doit (&add_child, s, os, file);
d1565 1
a1565 1
      wild_doit (&add_child, s, os, file);
@


1.45
log
@Check for the output_bfd not having any coff_data structure allocated to it.
@
text
@d149 1
d151 1
d196 3
d236 3
d324 5
d599 9
d741 2
a742 1
  int sl = strlen (string);
d746 4
a749 4
  {
    pe_undef_found_sym = h;
    return false;
  }
d759 5
d822 81
d905 13
d921 17
d952 2
d1395 10
@


1.44
log
@* emultempl/pe.em (init): Reduce default stack reserve to 0x200000.
@
text
@d803 1
a803 1
  if (!coff_data (output_bfd)->pe)
@


1.43
log
@2001-05-25  H.J. Lu  <hjl@@gnu.org>

	* emultempl/beos.em (gld${EMULATION_NAME}_before_parse): Move
	setting of output_filename after bfd_scan_arch.
	* emultempl/pe.em: Likewise.
@
text
@d270 1
a270 1
  D(SizeOfStackReserve,"__size_of_stack_reserve__", 0x2000000),
@


1.42
log
@2001-05-24  H.J. Lu  <hjl@@gnu.org>

	* emultempl/aix.em (OUTPUT_ARCH): Defined.
	(gld${EMULATION_NAME}_before_parse): Initialize
	ldfile_output_architecture, ldfile_output_machine and
	ldfile_output_machine_name from ${OUTPUT_ARCH} if possible.
	* emultempl/beos.em: Likewise.
	* emultempl/elf32.em: Likewise.
	* emultempl/linux.em: Likewise.
	* emultempl/mipsecoff.em: Likewise.
	* emultempl/pe.em: Likewise.
	* emultempl/sunos.em: Likewise.
@
text
@a137 1
  output_filename = "${EXECUTABLE_NAME:-a.exe}";
d147 1
@


1.41
log
@2001-05-02  H.J. Lu  <hjl@@gnu.org>

	* emultempl/pe.em: Include <ctype.h>.
@
text
@d3 5
d139 9
a147 1
  ldfile_output_architecture = bfd_arch_${ARCH};
@


1.40
log
@Fixtypos in ChangeLogs, fix copyright dates in files
@
text
@d55 2
@


1.39
log
@Add --no-default-excludes option for PE targets
@
text
@d7 2
a8 1
   Copyright 1995, 96, 97, 98, 99, 2000 Free Software Foundation, Inc.
@


1.39.2.1
log
@Update copyright notices.
@
text
@d7 1
a7 2
   Copyright 1995, 1996, 1997, 1998, 1999, 2000
   Free Software Foundation, Inc.
@


1.39.2.2
log
@Merge from mainline.
@
text
@d255 1
a255 1
  D(SizeOfStackReserve,"__size_of_stack_reserve__", 0x200000),
@


1.38
log
@2000-11-09  Philip Blundell  <pb@@futuretv.com>

	* emultempl/pe.em: Define ___start_SECNAME and ___stop_SECNAME
	around orphan sections whose names can be represented in C.
@
text
@d176 2
a177 1
#define OPTION_DLL_SEARCH_PREFIX		(OPTION_DISABLE_AUTO_IMAGE_BASE + 1)
d179 1
a179 2
static struct option longopts[] =
{
d214 1
d566 3
@


1.37
log
@Add tests of return values from bfd function calls
@
text
@d1266 1
d1358 20
d1399 15
@


1.36
log
@Oops - fix mistake in previous delta where unused variable 'nsyms' was
deleted, but along with its (necessary) call to bfd_canonicalize_symtab.
@
text
@d842 2
a843 1
	    /* See if this is an import library thunk */
d852 1
d855 2
a856 2
		/* it is, look for the reference to head and see if it's
		   from our own library */
d860 2
a861 1
		    int symsize;
a862 1
		    int relsize;
d867 6
d874 7
a880 2
 		    bfd_canonicalize_symtab (is->the_bfd, symbols);
		    relsize = bfd_get_reloc_upper_bound (is->the_bfd, sec);
d884 8
a891 1
		    for (i=0; i<nrelocs; i++)
d894 4
d899 25
a923 20
			if (!s->flags & BSF_LOCAL)
			  {
			    /* thunk section with reloc to another bfd... */
			    struct bfd_link_hash_entry *blhe;
			    blhe = bfd_link_hash_lookup (link_info.hash,
							 s->name,
							 false, false, true);
			    if (blhe && blhe->type == bfd_link_hash_defined)
			      {
				bfd *other_bfd = blhe->u.def.section->owner;
				if (strcmp (is->the_bfd->my_archive->filename,
					    other_bfd->my_archive->filename))
				  {
				    /* Rename this implib to match the other */
				    char *n = (char *) xmalloc (strlen (other_bfd->my_archive->filename) + 1);
				    strcpy (n, other_bfd->my_archive->filename);
				    is->the_bfd->my_archive->filename = n;
				  }
			      }
			  }
d927 2
@


1.35
log
@Add #ifdef DLL_SUPPORT around use of pe_dll_search_prefix.
@
text
@d858 12
a869 5
		    int symsize = bfd_get_symtab_upper_bound (is->the_bfd);
		    asymbol **symbols = (asymbol **) xmalloc (symsize);
		    int relsize = bfd_get_reloc_upper_bound (is->the_bfd, sec);
		    arelent **relocs = (arelent **) xmalloc ((size_t) relsize);
		    int nrelocs = bfd_canonicalize_reloc (is->the_bfd, sec,
@


1.34
log
@* emultempl/pe.em (pe_dll_search_prefix): New variable,
(longopts): New --dll-search-prefix option.
(gld_${EMULATION_NAME}_list_options): Document.
(gld_${EMULATION_NAME}_parse_args): Handle.
(gld_${EMULATION_NAME}_open_dynamic_archive): When linking
dynamically, search for a dll named '<prefix><basename>.dll'
in preference to 'lib<basename>.dll' if --dll-search-prefix
is specified.
@
text
@a825 2
    lang_input_statement_type *is2;

a859 2
		    int nsyms = bfd_canonicalize_symtab (is->the_bfd, symbols);

d1460 3
a1462 1
                             + ( pe_dll_search_prefix ? strlen (pe_dll_search_prefix) : 0 )
d1490 2
a1491 2

              if ( pe_dll_search_prefix )
d1512 1
d1526 1
a1526 2
                } /* if (pe_dll_search_prefix) */
					 
@


1.33
log
@* emultempl/pe.em (gld_*_after_open): detect case where there two
import libraries for same dll; rename one to ensure proper link
order.

* pe-dll.c (process_def_file): compare ordinals to -1, not 0; fix
typo
(generate_edata): fix typo
@
text
@d122 1
d176 1
d213 1
d296 3
d563 3
d1464 1
d1491 23
a1513 4
	    {
              /* Try "libfoo.dll" (preferred dll name) */
              sprintf (string, "%s/lib%s.dll", search->name, filename);
              if (! ldfile_try_open_bfd (string, entry))
d1515 2
a1516 2
                  /* Finally, try "foo.dll" (alternate dll name) */
                  sprintf (string, "%s/%s.dll", search->name, filename);
d1519 7
a1525 2
                      free (string);
                      return false;
d1527 2
a1528 1
                }
@


1.32
log
@oops, didn't mean to check in that change yet
@
text
@d817 76
@


1.31
log
@* pe-dll.c (process_def_file): Uninitialized data wasn't
exported with --export-all-symbols switch.

* pe-dll.c (fill_edata): rearrange the data so that ordinals and
noname work properly.
@
text
@a878 21

  {
    LANG_FOR_EACH_INPUT_STATEMENT (is)
      {
	asection *sec;
	char *new_name, seq;


	if (is->the_bfd->my_archive)
	  for (sec = is->the_bfd->sections; sec; sec = sec->next)
	    if (strcmp (sec->name, ".idata\$7") == 0
		&& sec->reloc_count == 0)
	      {
		char *name = xmalloc (sec->_raw_size + 1);
		bfd_get_section_contents (is->the_bfd, sec, name, 0, sec->_raw_size);
		name[sec->_raw_size] = 0;
		printf ("dj: implib \"%s\" for dll \"%s\" %d\n",
			is->the_bfd->my_archive->filename, name, sec->_raw_size);
	      }
      }
  }
@


1.30
log
@* src/ld/emultempl/pe.em (gld_*_open_dynamic_archive): New search
order for dynamic library '-lfoo' on pei386: libfoo.dll.a,
foo.dll.a, libfoo.a, libfoo.dll, foo.dll. This fixes compatibility
errors introduced by the old dynamic lib search order.
@
text
@d879 21
@


1.29
log
@Remove some forward declarations in ldemul.h and ldfile.h, and
re-arrange header include order.
Fix shadowing warnings in ldlang.h
Fix compile errors in mpw-elfmips.c
@
text
@d1390 14
a1403 2
          /* Try "libfoo.dll" (preferred dll name) */
          sprintf (string, "%s/lib%s.dll", search->name, filename);
d1405 3
a1407 3
            {
              /* Finally, try "foo.dll" (alternate dll name) */
              sprintf (string, "%s/%s.dll", search->name, filename);
d1410 7
a1416 2
                  free (string);
                  return false;
@


1.28
log
@2000-07-10  H.J. Lu  <hjl@@gnu.org>

	* emultempl/pe.em (pe_enable_stdcall_fixup): Protect with
	DLL_SUPPORT.
	(strhash): Likewise.
	(compute_dll_image_base): Likewise.
	(pe_undef_found_sym): Likewise.
	(pe_undef_cdecl_match): Likewise.
	(gld_${EMULATION_NAME}_open_dynamic_archive): Mark the
	argument "arch" with ATTRIBUTE_UNUSED.
@
text
@d40 1
a44 1
#include "ldfile.h"
@


1.27
log
@* ld/emultempl/pe.em: institute the following search order for
dynamic libraries on pei386: libfoo.dll.a, foo.dll.a (import
libs), libfoo.dll, foo.dll (link direct to dll).  Fall back to
static lib (libfoo.a) if none of the above are found.
@
text
@d117 1
a118 1
#ifdef DLL_SUPPORT
d563 1
d594 1
d612 1
d615 3
d682 1
a700 1
#ifdef DLL_SUPPORT
d1364 1
a1364 1
     const char * arch;
@


1.26
log
@* ld/emultempl/pe.em (pe_enable_auto_image_base): New variable.
(longopts): New --{enable,disable}-auto-image-base options.
(gld_${EMULATION_NAME}_list_options): Document.
(gld_${EMULATION_NAME}_parse): Handle.
(strhash): New static function.
(compute_dll_image_base): New static function.
(gld_${EMULATION_NAME}_set_symbols): Use.
@
text
@d1372 1
a1372 1
                             + sizeof "/lib.dll"
d1375 2
a1376 2
  /* Try "foo.dll" first.  */
  sprintf (string, "%s/%s.dll", search->name, filename);
d1380 2
a1381 3
      /* Try "libfoo.dll" next.  */
      sprintf (string, "%s/lib%s.dll", search->name, filename);

d1384 12
a1395 2
          free (string);
          return false;
d1398 1
a1398 1
  
@


1.25
log
@Apply patch from Charles Wilson to make PE ports search for dynamic libraries
in foo.dll and libfoo.dll before libfoo.a.
@
text
@d121 1
d173 2
d209 2
d290 3
d551 6
d562 32
d610 2
a611 1
	init[IMAGEBASEOFF].value = NT_DLL_IMAGE_BASE;
@


1.24
log
@place_orphan optimisations
@
text
@d108 2
d119 2
a120 2
static char *pe_out_def_filename = 0;
static char *pe_implib_filename = 0;
d819 1
a819 1
		new_name = xmalloc (strlen(is->filename) + 3);
d873 1
a873 1

d876 1
a876 1
#ifdef DLL_SUPPORT
d886 1
a886 1
#endif
d1052 1
d1061 1
a1061 1
#endif
d1309 39
d1401 1
a1401 1
  NULL, /* open dynamic archive */
@


1.23
log
@Yet another set of fixes for orphan sections.
@
text
@a104 2
static void gld${EMULATION_NAME}_place_section
  PARAMS ((lang_statement_union_type *));
a1074 4
static asection *hold_section;
static char *hold_section_name;
static lang_output_section_statement_type *hold_use;

a1080 7
static struct orphan_save hold_text;
static struct orphan_save hold_rdata;
static struct orphan_save hold_data;
static struct orphan_save hold_bss;

/* Place an orphan section.  We use this to put random SHF_ALLOC
   sections in the right segment.  */
d1089 1
d1091 1
a1097 2
  hold_section = s;

d1106 1
a1106 2
  hold_use = NULL;
  lang_for_each_statement (gld${EMULATION_NAME}_place_section);
d1110 3
a1112 1
  if (hold_use != NULL)
d1114 1
a1114 1
      wild_doit (&add_child, s, hold_use, file);
d1119 4
d1130 3
d1137 1
a1137 1
	       && hold_bss.os != NULL)
d1140 1
a1140 1
	       && hold_data.os != NULL)
d1144 1
a1144 1
	       && hold_rdata.os != NULL)
d1147 1
a1147 1
	       && hold_text.os != NULL)
d1150 2
d1192 5
a1196 5
      lang_enter_output_section_statement (outsecname, address, 0,
					   (bfd_vma) 0,
					   (etree_type *) NULL,
					   (etree_type *) NULL,
					   (etree_type *) NULL);
d1198 1
a1198 2
      hold_use = lang_output_section_statement_lookup (outsecname);
      wild_doit (&add_child, s, hold_use, file);
d1202 1
a1202 2
	 (struct lang_output_section_phdr_list *) NULL,
	"*default*");
d1210 1
a1210 1
	  snew = hold_use->bfd_section;
d1259 1
a1259 1
    lang_statement_union_type **pl = &hold_use->children.head;
a1303 27
}

static void
gld${EMULATION_NAME}_place_section (s)
     lang_statement_union_type *s;
{
  lang_output_section_statement_type *os;

  if (s->header.type != lang_output_section_statement_enum)
    return;

  os = &s->output_section_statement;

  if (strcmp (os->name, hold_section_name) == 0
      && os->bfd_section != NULL
      && ((hold_section->flags & (SEC_LOAD | SEC_ALLOC))
	  == (os->bfd_section->flags & (SEC_LOAD | SEC_ALLOC))))
    hold_use = os;

  if (strcmp (os->name, ".text") == 0)
    hold_text.os = os;
  else if (strcmp (os->name, ".rdata") == 0)
    hold_rdata.os = os;
  else if (strcmp (os->name, ".data") == 0)
    hold_data.os = os;
  else if (strcmp (os->name, ".bss") == 0)
    hold_bss.os = os;
@


1.22
log
@Zero start address of orphan ~(SEC_LOAD | SEC_ALLOC) sections.
@
text
@d1084 1
d1103 1
d1122 7
a1128 1
  if (hold_use == NULL)
a1131 1
      asection *snew, **pps;
d1139 4
a1142 2
      if ((s->flags & SEC_HAS_CONTENTS) == 0
	  && hold_bss.os != NULL)
a1179 23
      /* We don't want to free OUTSECNAME, as it may get attached to
	 the output section statement.  */

      /* Create the section in the output file, and put it in the
	 right place.  This shuffling is to make the output file look
	 neater.  */
      snew = bfd_make_section (output_bfd, outsecname);
      if (snew == NULL)
	einfo ("%P%F: output format %s cannot represent section called %s\n",
	       output_bfd->xvec->name, outsecname);
      if (place != NULL && place->os->bfd_section != NULL)
	{
	  /* Unlink it first.  */
	  for (pps = &output_bfd->sections; *pps != snew; pps = &(*pps)->next)
	    ;
	  *pps = snew->next;
	  snew->next = NULL;
	  /* Now tack it on to the end of the "place->os" section list.  */
	  for (pps = &place->os->bfd_section; *pps; pps = &(*pps)->next)
	    ;
	  *pps = snew;
	}

d1202 1
d1209 2
d1213 35
a1247 1
	  if (! place->stmt)
a1260 2

      stat_ptr = old;
d1263 2
a1264 35
  if (dollar == NULL)
    wild_doit (&hold_use->children, s, hold_use, file);
  else
    {
      lang_statement_union_type **pl;
      boolean found_dollar;
      lang_statement_list_type list;

      /* The section name has a '$'.  Sort it with the other '$'
         sections.  */

      found_dollar = false;
      for (pl = &hold_use->children.head; *pl != NULL; pl = &(*pl)->next)
	{
	  lang_input_section_type *ls;
	  const char *lname;

	  if ((*pl)->header.type != lang_input_section_enum)
	    continue;

	  ls = &(*pl)->input_section;

	  lname = bfd_get_section_name (ls->ifile->the_bfd, ls->section);
	  if (strchr (lname, '$') == NULL)
	    {
	      if (found_dollar)
		break;
	    }
	  else
	    {
	      found_dollar = true;
	      if (strcmp (secname, lname) < 0)
		break;
	    }
	}
d1266 39
a1304 9
      lang_list_init (&list);
      wild_doit (&list, s, hold_use, file);
      if (list.head != NULL)
	{
	  ASSERT (list.head->next == NULL);
	  list.head->next = *pl;
	  *pl = list.head;
	}
    }
@


1.21
log
@Keep output orphan sections in the same order as input.
@
text
@a1102 3
  if ((s->flags & SEC_ALLOC) == 0)
    return false;

d1199 2
a1200 2
      if (link_info.relocateable)
	address = NULL;
@


1.20
log
@Fix building with --enable-targets=all.
@
text
@d1080 10
a1089 4
static lang_output_section_statement_type *hold_text;
static lang_output_section_statement_type *hold_rdata;
static lang_output_section_statement_type *hold_data;
static lang_output_section_statement_type *hold_bss;
d1125 1
a1125 1
      lang_output_section_statement_type *place;
d1136 2
a1137 2
	  && hold_bss != NULL)
	place = hold_bss;
d1139 2
a1140 2
	       && hold_data != NULL)
	place = hold_data;
d1143 2
a1144 2
	       && hold_rdata != NULL)
	place = hold_rdata;
d1146 2
a1147 2
	       && hold_text != NULL)
	place = hold_text;
d1184 1
a1184 1
      if (place != NULL && place->bfd_section != NULL)
d1186 1
d1190 5
a1194 2
	  snew->next = place->bfd_section->next;
	  place->bfd_section->next = snew;
a1224 1
      /* Now stick the new statement list right after PLACE.  */
d1227 13
a1239 2
	  *add.tail = place->header.next;
	  place->header.next = add.head;
d1314 1
a1314 1
    hold_text = os;
d1316 1
a1316 1
    hold_rdata = os;
d1318 1
a1318 1
    hold_data = os;
d1320 1
a1320 1
    hold_bss = os;
@


1.19
log
@Add support for WinCE based toolchains.
@
text
@d117 2
a119 1
static int pe_enable_stdcall_fixup = -1; /* 0=disable 1=enable */
d121 1
d647 1
d712 1
d764 1
a764 1
    int is_ms_arch;
d876 1
a876 1

d886 1
d890 1
a890 1
  lang_input_statement_type *entry;
d975 1
a975 1
  lang_input_statement_type *entry;
d1095 1
a1095 1
  char *dollar;
@


1.18
log
@Add LMA memory region functionality.
@
text
@d68 3
d72 1
d74 14
d130 8
d236 3
d240 1
d321 1
d323 3
d332 1
d730 7
d976 9
d1046 7
d1297 8
d1357 2
a1358 1
  gld_${EMULATION_NAME}_recognized_file
@


1.17
log
@oops - change omitted from previous delta
@
text
@d1149 2
a1150 1
	 (struct lang_output_section_phdr_list *) NULL);
@


1.16
log
@Applied Mumit Kha's patch to tweak dll production code.
@
text
@d250 3
@


1.15
log
@* emultempl/pe.em (gld_${EMULATION_NAME}_place_orphan): Defer
merging sections when not relocating.
@
text
@d7 1
a7 1
   Copyright 1995, 96, 97, 98, 1999 Free Software Foundation, Inc.
d142 2
d176 2
d496 6
@


1.14
log
@1999-09-14  Donn Terry  <donn@@interix.com>

	* emultempl/pe.em (gld_${EMULATION_NAME}_after_open): allow for
	terminating null.
@
text
@d1031 6
a1036 3
  dollar = strchr (hold_section_name, '$');
  if (dollar != NULL)
    *dollar = '\0';
@


1.13
log
@1999-09-13  Donn Terry  <donn@@interix.com>

	* emultempl/pe.em: Remove the output file at the start, in case it
	is not writable.
@
text
@d756 1
a756 1
		new_name = xmalloc (strlen (is->the_bfd->filename) + 2);
d760 1
a760 1
		new_name = xmalloc (strlen(is->filename) + 2);
@


1.12
log
@	* pe.em: Don't include "../bfd/libbfd.h".
	(gld_${EMULATION_NAME}_after_open): Use xmalloc rather than
	bfd_alloc.
@
text
@d3 2
a4 1
(echo;echo;echo;echo)>e${EMULATION_NAME}.c # there, now line numbers match ;-)
@


1.11
log
@	* pe-dll.h: New file.
	* pe-dll.c: Include "pe-dll.h".  Mark unused arguments as needed
	to avoid warnings.
	(edata_sz, reloc_sz): Change from int to size_t.
	(pe_details_type): Change type of imagebase_reloc from int to
	unsigned int.
	(pe_detail_list): Fully initialize last entry.
	(pe_dll_id_target): Change parameter to const.
	(pe_dll_generate_def_file): Likewise.
	(pe_dll_generate_implib): Likewise.
	(pe_implied_import_dll): Likewise.  Change dll_name to const.
	* emultempl/pe.em: Include "pe-dll.h".  Remove declarations now in
	pe-dll.h.
	(init): Fully initialize __dll__ entry.
	(gld_${EMULATION_NAME}_after_open): Remove unused variables
	sequence, elt, and i.
	* deffile.h: Add preprocessor guard.
	* deffilep.y (def_debug): Remove.
	* Makefile.am: Rebuild dependencies.
	(HFILES): Add pe-dll.h.
@
text
@d45 3
d49 1
a49 1
#include "../bfd/libbfd.h"
d755 1
a755 2
		new_name = bfd_alloc (is->the_bfd,
				      strlen (is->the_bfd->filename)+2);
d759 1
a759 1
		new_name = bfd_alloc(is->the_bfd, strlen(is->filename)+2);
@


1.10
log
@1999-09-12  Donn Terry  <donn@@interix.com>

	* emultempl/pe.em (PE_DEF_SECTION_ALIGNMENT): If
	OVERRIDE_SECTION_ALIGNMENT is defined, change to that.
	(gld_${EMULATION_NAME}_before_parse): Use EXECUTABLE_NAME if it is
	defined, rather than a.exe.
	(init): Define __subsystem__ as ${SUBSYSTEM}.
	(set_pe_subsystem): Add ${INITIAL_SYMBOL_CHAR} before entry symbol
	name.
@
text
@d48 1
a92 1
extern def_file *pe_def_file;
a95 3
extern int pe_dll_export_everything;
extern int pe_dll_kill_ats;
extern int pe_dll_stdcall_aliases;
d195 1
a195 1
  {&dll, sizeof(dll), 0, "__dll__"},
a700 1
    static int sequence = 0;
d702 1
a702 1
    bfd *cur_arch = 0, *elt;
d704 1
d713 1
a713 1
       table for external references. */
d734 1
a734 1
		int idata2 = 0, i, reloc_count=0;
d737 1
@


1.9
log
@	* emultempl/ostring.sed: Rename from stringify.sed.
	* emultempl/astring.sed: New file.
	* Makefile.am (stringify.sed): New target.
	(GEN_DEPENDS): Change $(srcdir)/emultempl/stringify.sed to
	stringify.sed.
	* configure.in: Define and substitute STRINGIFY.
	* emultempl/*.em: Use stringify.sed from build directory rather
	than source directory.
	* emultempl/elf32.em: Use stringify.sed rather than inline sed
	script.
	* emultempl/gld960.em, emultempl/gld960c.em: Likewise.
	* emultempl/hppaelf.em, emultempl/linux.em: Likewise.
	* emultempl/lnk960.em, emultempl/sunos.em: Likewise.
	* configure, Makefile.in: Rebuild.
@
text
@d51 9
d107 1
a107 1
  output_filename = "a.exe";
d207 1
a207 1
  D(Subsystem,"__subsystem__", PE_DEF_SUBSYSTEM),
d282 3
a284 3
      { "native", 1, "_NtProcessStartup" },
      { "windows", 2, "_WinMainCRTStartup" },
      { "console", 3, "_mainCRTStartup" },
d289 1
a289 1
      { "posix", 7, "___PosixProcessStartup"},
d315 3
d320 18
a337 1
	  lang_add_entry (v[i].entry, 1);
@


1.8
log
@Abort if input format is ARM and output format is not
@
text
@d1199 1
a1199 1
sc="-f ${srcdir}/emultempl/stringify.sed"
@


1.7
log
@Add new command line switch --thumb-entry.
@
text
@d655 9
@


1.6
log
@	* emultempl/pe.em (gld_${EMULATION_NAME}_after_parse): Don't add
	entry_symbol as an undefined symbol when doing a relocateable
	link.  From <jeffdb@@goodnet.com>.
@
text
@d77 1
d82 1
d131 1
d151 1
d226 1
d435 3
d895 41
@


1.5
log
@Rename epoc-pe interworking function names to avoid a name space clash
@
text
@d6 1
a6 1
   Copyright 1995, 96, 97, 1998 Free Software Foundation, Inc.
d537 1
a537 1
  if (entry_symbol)
@


1.4
log
@Rename ARM interworking functions to avoid a name space collision
@
text
@d57 9
@


1.3
log
@1999-05-10  DJ Delorie  <dj@@cygnus.com>
	* scripttempl/pe.sc: Specify the output arch, which Ian says is
	the Right Thing to do.
	* emultempl/pe.em: various changes to parameterize the
	target-specific information.
	(gld_i386pe_after_open): Detect and fix MS import libraries
	by renaming the member objects (which are all named the same).
	* pe-dll.c: various changes to parameterize the target-specific
	information.
	(generate_reloc): support relocs more generically to allow for
	expansion.
	(pe_exe_build_sections): new; used to add .relocs to .exes
	(pe_exe_fill_sections): ditto
@
text
@d642 1
a642 1
	if (bfd_arm_get_bfd_for_interworking (is->the_bfd, & link_info))
d743 1
a743 1
	if (! bfd_arm_process_before_allocation
d754 1
a754 1
  bfd_arm_allocate_interworking_sections (& link_info);
@


1.2
log
@1999-05-10  Catherine Moore  <clm@@cygnus.com>
	* emulttempl/pe.em (gld_${EMULATION_NAME}_after_open):
	Check for TARGET_IS_arm_epoc_pe.
	(gld_${EMULATION_NAME}_before_allocation): Likewise.
@
text
@d3 2
a4 1
cat >e${EMULATION_NAME}.c <<EOF
d46 1
d51 6
d89 1
a89 1
#ifdef TARGET_IS_i386pe
d139 1
a139 1
#ifdef TARGET_IS_i386pe
d185 1
a185 1
  D(Subsystem,"__subsystem__", 3),
d213 1
a213 1
#ifdef TARGET_IS_i386pe
d421 1
a428 1
#ifdef TARGET_IS_i386pe
a429 1
#endif
d446 1
d628 1
a628 1
#ifdef TARGET_IS_i386pe
d647 64
d776 1
a776 1
#ifdef TARGET_IS_i386pe
d861 1
d863 2
d878 1
a878 1
#ifdef TARGET_IS_i386pe
@


1.1
log
@Initial revision
@
text
@d629 1
a629 1
#ifdef TARGET_IS_armpe
d661 1
a661 1
#ifdef TARGET_IS_armpe
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

