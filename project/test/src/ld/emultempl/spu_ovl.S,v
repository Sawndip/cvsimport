head	1.10;
access;
symbols
	binutils-2_24-branch:1.10.0.20
	binutils-2_24-branchpoint:1.10
	binutils-2_21_1:1.10
	binutils-2_23_2:1.10
	binutils-2_23_1:1.10
	binutils-2_23:1.10
	binutils-2_23-branch:1.10.0.18
	binutils-2_23-branchpoint:1.10
	binutils-2_22_branch:1.10.0.16
	binutils-2_22:1.10
	binutils-2_22-branch:1.10.0.14
	binutils-2_22-branchpoint:1.10
	binutils-2_21:1.10
	binutils-2_21-branch:1.10.0.12
	binutils-2_21-branchpoint:1.10
	binutils-2_20_1:1.10
	binutils-2_20:1.10
	binutils-arc-20081103-branch:1.10.0.10
	binutils-arc-20081103-branchpoint:1.10
	binutils-2_20-branch:1.10.0.8
	binutils-2_20-branchpoint:1.10
	dje-cgen-play1-branch:1.10.0.6
	dje-cgen-play1-branchpoint:1.10
	arc-20081103-branch:1.10.0.4
	arc-20081103-branchpoint:1.10
	binutils-2_19_1:1.10
	binutils-2_19:1.10
	binutils-2_19-branch:1.10.0.2
	binutils-2_19-branchpoint:1.10
	binutils-2_18:1.6
	binutils-2_18-branch:1.6.0.2
	binutils-2_18-branchpoint:1.6
	binutils_latest_snapshot:1.10;
locks; strict;
comment	@# @;


1.10
date	2008.06.16.16.16.31;	author amodra;	state Exp;
branches;
next	1.9;

1.9
date	2008.02.07.01.26.56;	author amodra;	state Exp;
branches;
next	1.8;

1.8
date	2008.01.28.05.59.24;	author amodra;	state Exp;
branches;
next	1.7;

1.7
date	2007.09.26.03.13.55;	author amodra;	state Exp;
branches;
next	1.6;

1.6
date	2007.07.06.14.09.42;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2007.06.14.08.41.41;	author amodra;	state Exp;
branches;
next	1.4;

1.4
date	2007.05.29.12.54.29;	author amodra;	state Exp;
branches;
next	1.3;

1.3
date	2007.02.26.08.58.16;	author amodra;	state Exp;
branches;
next	1.2;

1.2
date	2007.02.13.07.47.22;	author amodra;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.25.06.49.21;	author amodra;	state Exp;
branches;
next	;


desc
@@


1.10
log
@bfd/
	* elf32-spu.c (struct spu_link_hash_table): Add extra_stack_space.
	(spu_elf_check_vma): Add extra_stack_space param, copy to htab.
	(spu_elf_auto_overlay): Use it.
	(RECURSE_UNMARK): Define as 0.
	(unmark_overlay_section): Heed RECURSE_UNMARK.
	* elf32-spu.h (spu_elf_check_vma): Update prototype.
ld/
	* emultempl/spuelf.em (extra_stack_space): New variable.
	(gld${EMULATION_NAME}_finish): Pass it to spu_elf_check_vma.
	(PARSE_AND_LIST_LONGOPTS, PARSE_AND_LIST_OPTIONS,
	PARSE_AND_LIST_ARGS_CASES): Handle --extra-stack-space.
	* emultempl/spu_ovl.S: Mask interrupts during dma and update of
	overlay manager structures.
	* emultempl/spu_ovl.o: Regenerate.
@
text
@/* Overlay manager for SPU.

   Copyright 2006, 2007, 2008 Free Software Foundation, Inc.

   This file is part of the GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

/* MFC DMA defn's.  */
#define MFC_GET_CMD		0x40
#define MFC_MAX_DMA_SIZE	0x4000
#define MFC_TAG_UPDATE_ALL	2
#define MFC_TAG_ID		0

/* Register usage.  */
#define reserved1	$75
#define parm		$75
#define tab1		reserved1
#define tab2		reserved1
#define vma		reserved1
#define oldvma		reserved1
#define newmask		reserved1
#define map		reserved1

#define reserved2	$76
#define off1		reserved2
#define off2		reserved2
#define present1	reserved2
#define present2	reserved2
#define sz		reserved2
#define cmp		reserved2
#define add64		reserved2
#define cgbits		reserved2
#define off3		reserved2
#define off4		reserved2
#define addr4		reserved2
#define off5		reserved2
#define tagstat		reserved2

#define reserved3	$77
#define size1		reserved3
#define size2		reserved3
#define rv3		reserved3
#define ealo		reserved3
#define cmd		reserved3
#define off64		reserved3
#define tab3		reserved3
#define tab4		reserved3
#define tab5		reserved3

#define reserved4	$78
#define ovl		reserved4
#define rv2		reserved4
#define rv5		reserved4
#define cgshuf		reserved4
#define newovl		reserved4
#define irqtmp1		reserved4
#define irqtmp2		reserved4

#define reserved5	$79
#define target		reserved5

#define save1		$74
#define rv4		save1
#define rv7		save1
#define tagid		save1
#define maxsize		save1
#define pbyte		save1
#define pbit		save1

#define save2		$73
#define cur		save2
#define rv6		save2
#define osize		save2
#define zovl		save2
#define oldovl		save2
#define newvma		save2

#define save3		$72
#define rv1		save3
#define ea64		save3
#define buf3		save3
#define genwi		save3
#define newmap		save3
#define oldmask		save3

#define save4		$71
#define irq_stat	save4

	.text
	.align 	4
	.type	__rv_pattern, @@object
	.size	__rv_pattern, 16
__rv_pattern:
	.word	0x00010203, 0x10111213, 0x80808080, 0x80808080

	.type	__cg_pattern, @@object
	.size	__cg_pattern, 16
__cg_pattern:
	.word	0x04050607, 0x80808080, 0x80808080, 0x80808080

	.type	__ovly_current, @@object
	.size	__ovly_current, 16
__ovly_current:
	.space	16

/*
 * __ovly_return - stub for returning from overlay functions.
 *
 * On entry the four slots of $lr are:
 *   __ovly_return, prev ovl index, caller return addr, undefined.
 *
 * Load the previous overlay and jump to the caller return address.
 * Updates __ovly_current.
 */
	.align 	4
	.global	__ovly_return
	.type	__ovly_return, @@function
__ovly_return:
	ila	tab1, _ovly_table - 16				# 0,2	0
	shlqbyi	ovl, $lr, 4					# 1,4	0
#nop
	shlqbyi	target, $lr, 8					# 1,4	1
#nop; lnop
#nop; lnop
	shli	off1, ovl, 4					# 0,4	4
#lnop
#nop
	hbr	ovly_ret9, target				# 1,15	5
#nop; lnop
#nop; lnop
#nop
	lqx	vma, tab1, off1					# 1,6	8
#ifdef OVLY_IRQ_SAVE
	nop
	stqd	save4, -64($sp)					# 1,6	9
#else
#nop; lnop
#endif
#nop; lnop
#nop; lnop
#nop; lnop
#nop; lnop
#nop
	rotqbyi	size1, vma, 4					# 1,4	14
#nop
	stqd	save3, -48($sp)					# 1,6	15
#nop
	stqd	save2, -32($sp)					# 1,6	16
#nop
	stqd	save1, -16($sp)					# 1,6	17
	andi	present1, size1, 1				# 0,2	18
	stqr	ovl, __ovly_current				# 1,6	18
#nop; lnop
#nop
	brz	present1, do_load				# 1,4	20
ovly_ret9:
#nop
	bi	target						# 1,4	21

/*
 * __ovly_load - copy an overlay partion to local store.
 *
 * On entry $75 points to a word consisting of the overlay index in
 * the top 14 bits, and the target address in the bottom 18 bits.
 *
 * Sets up $lr to return via __ovly_return.  If $lr is already set
 * to return via __ovly_return, don't change it.  In that case we
 * have a tail call from one overlay function to another.
 * Updates __ovly_current.
 */
	.align  3
	.global	__ovly_load
	.type	__ovly_load, @@function
__ovly_load:
#if OVL_STUB_SIZE == 8
########
#nop
	lqd	target, 0(parm)					# 1,6	-11
#nop; lnop
#nop; lnop
#nop; lnop
#nop; lnop
#nop; lnop
#nop
	rotqby	target, target, parm				# 1,4	-5
	ila	tab2, _ovly_table - 16				# 0,2	-4
	stqd	save3, -48($sp)					# 1,6	-4
#nop
	stqd	save2, -32($sp)					# 1,6	-3
#nop
	stqd	save1, -16($sp)					# 1,6	-2
	rotmi	ovl, target, -18				# 0,4	-1
	hbr	ovly_load9, target				# 1,15	-1
	ila	rv1, __ovly_return				# 0,2	0
#lnop
#nop; lnop
#nop
	lqr	cur, __ovly_current				# 1,6	2
	shli	off2, ovl, 4					# 0,4	3
	stqr	ovl, __ovly_current				# 1,6	3
	ceq	rv2, $lr, rv1					# 0,2	4
	lqr	rv3, __rv_pattern				# 1,6	4
#nop; lnop
#nop; lnop
#nop
	lqx	vma, tab2, off2					# 1,6	7
########
#else /* OVL_STUB_SIZE == 16 */
########
	ila	tab2, _ovly_table - 16				# 0,2	0
	stqd	save3, -48($sp)					# 1,6	0
	ila	rv1, __ovly_return				# 0,2	1
	stqd	save2, -32($sp)					# 1,6	1
	shli	off2, ovl, 4					# 0,4	2
	lqr	cur, __ovly_current				# 1,6	2
	nop
	stqr	ovl, __ovly_current				# 1,6	3
	ceq	rv2, $lr, rv1					# 0,2	4
	lqr	rv3, __rv_pattern				# 1,6	4
#nop
	hbr	ovly_load9, target				# 1,15	5
#nop
	lqx	vma, tab2, off2					# 1,6	6
#nop
	stqd	save1, -16($sp)					# 1,6	7
########
#endif

#nop; lnop
#nop; lnop
#nop
	shufb	rv4, rv1, cur, rv3				# 1,4	10
#nop
	fsmb	rv5, rv2					# 1,4	11
#nop
	rotqmbyi rv6, $lr, -8					# 1,4	12
#nop
	rotqbyi	size2, vma, 4					# 1,4	13
#nop
	lqd	save3, -48($sp)					# 1,6	14
#nop; lnop
	or	rv7, rv4, rv6					# 0,2	16
	lqd	save2, -32($sp)					# 1,6	16
	andi	present2, size2, 1				# 0,2	17
#ifdef OVLY_IRQ_SAVE
	stqd	save4, -64($sp)					# 1,6	17
#else
	lnop							# 1,0	17
#endif
	selb	$lr, rv7, $lr, rv5				# 0,2	18
	lqd	save1, -16($sp)					# 1,6	18
#nop
	brz	present2, do_load				# 1,4	19
ovly_load9:
#nop
	bi	target						# 1,4	20

/* If we get here, we are about to load a new overlay.
 * "vma" contains the relevant entry from _ovly_table[].
 *	extern struct {
 *		u32 vma;
 *		u32 size;
 *		u32 file_offset;
 *		u32 buf;
 *	} _ovly_table[];
 */
	.align  3
	.global	__ovly_load_event
	.type	__ovly_load_event, @@function
__ovly_load_event:
do_load:
#ifdef OVLY_IRQ_SAVE
	ila	irqtmp1, do_load10				# 0,2	-5
	rotqbyi	sz, vma, 8					# 1,4	-5
#nop
	rdch	irq_stat, $SPU_RdMachStat			# 1,6	-4
#nop
	bid	irqtmp1						# 1,4	-3
do_load10:
	nop
#else
#nop
	rotqbyi	sz, vma, 8					# 1,4	0
#endif
	rotqbyi	osize, vma, 4					# 1,4	1
#nop
	lqa	ea64, _EAR_					# 1,6	2
#nop
	lqr	cgshuf, __cg_pattern				# 1,6	3

/* We could predict the branch at the end of this loop by adding a few
   instructions, and there are plenty of free cycles to do so without
   impacting loop execution time.  However, it doesn't make a great
   deal of sense since we need to wait for the dma to complete anyway.  */
__ovly_xfer_loop:
#nop
	rotqmbyi off64, sz, -4					# 1,4	4
#nop; lnop
#nop; lnop
#nop; lnop
	cg	cgbits, ea64, off64				# 0,2	8
#lnop
#nop; lnop
#nop
	shufb	add64, cgbits, cgbits, cgshuf			# 1,4	10
#nop; lnop
#nop; lnop
#nop; lnop
	addx	add64, ea64, off64				# 0,2	14
#lnop
	ila	maxsize, MFC_MAX_DMA_SIZE			# 0,2	15
	lnop
	ori	ea64, add64, 0					# 0,2	16
	rotqbyi	ealo, add64, 4					# 1,4	16
	cgt	cmp, osize, maxsize				# 0,2	17
	wrch	$MFC_LSA, vma					# 1,6	17
#nop; lnop
	selb	sz, osize, maxsize, cmp				# 0,2	19
	wrch	$MFC_EAH, ea64					# 1,6	19
	ila	tagid, MFC_TAG_ID				# 0,2	20
	wrch	$MFC_EAL, ealo					# 1,6	20
	ila	cmd, MFC_GET_CMD				# 0,2	21
	wrch	$MFC_Size, sz					# 1,6	21
	sf	osize, sz, osize				# 0,2	22
	wrch	$MFC_TagId, tagid				# 1,6	22
	a	vma, vma, sz					# 0,2	23
	wrch	$MFC_Cmd, cmd					# 1,6	23
#nop
	brnz	osize, __ovly_xfer_loop				# 1,4	24

/* Now update our data structions while waiting for DMA to complete.
   Low bit of .size needs to be cleared on the _ovly_table entry
   corresponding to the evicted overlay, and set on the entry for the
   newly loaded overlay.  Note that no overlay may in fact be evicted
   as _ovly_buf_table[] starts with all zeros.  Don't zap .size entry
   for zero index!  Also of course update the _ovly_buf_table entry.  */
#nop
	lqr	newovl, __ovly_current				# 1,6	25
#nop; lnop
#nop; lnop
#nop; lnop
#nop; lnop
#nop; lnop
	shli	off3, newovl, 4					# 0,4	31
#lnop
	ila	tab3, _ovly_table - 16				# 0,2	32
#lnop
#nop
	fsmbi	pbyte, 0x100					# 1,4	33
#nop; lnop
#nop
	lqx	vma, tab3, off3					# 1,6	35
#nop; lnop
	andi	pbit, pbyte, 1					# 0,2	37
	lnop
#nop; lnop
#nop; lnop
#nop; lnop
	or	newvma, vma, pbit				# 0,2	41
	rotqbyi	buf3, vma, 12					# 1,4	41
#nop; lnop
#nop
	stqx	newvma, tab3, off3				# 1,6	43
#nop; lnop
	shli	off4, buf3, 2					# 1,4	45
#lnop
	ila	tab4, _ovly_buf_table - 4			# 0,2	46
#lnop
#nop; lnop
#nop; lnop
#nop
	lqx	map, tab4, off4					# 1,6	49
#nop
	cwx	genwi, tab4, off4				# 1,4	50
	a	addr4, tab4, off4				# 0,2	51
#lnop
#nop; lnop
#nop; lnop
#nop; lnop
#nop
	rotqby	oldovl, map, addr4				# 1,4	55
#nop
	shufb	newmap, newovl, map, genwi			# 0,4	56
#if MFC_TAG_ID < 16
	ila	newmask, 1 << MFC_TAG_ID			# 0,2	57
#else
	ilhu	newmask, 1 << (MFC_TAG_ID - 16)			# 0,2	57
#endif
#lnop
#nop; lnop
#nop; lnop
	stqd	newmap, 0(addr4)				# 1,6	60

/* Save app's tagmask, wait for DMA complete, restore mask.  */
	ila	tagstat, MFC_TAG_UPDATE_ALL			# 0,2	61
	rdch	oldmask, $MFC_RdTagMask				# 1,6	61
#nop
	wrch	$MFC_WrTagMask, newmask				# 1,6	62
#nop
	wrch	$MFC_WrTagUpdate, tagstat			# 1,6	63
#nop
	rdch	tagstat, $MFC_RdTagStat				# 1,6	64
#nop
	sync							# 1,4	65
/* Any hint prior to the sync is lost.  A hint here allows the branch
   to complete 15 cycles after the hint.  With no hint the branch will
   take 18 or 19 cycles.  */
	ila	tab5, _ovly_table - 16				# 0,2	66
	hbr	do_load99, target				# 1,15	66
	shli	off5, oldovl, 4					# 0,4	67
	wrch	$MFC_WrTagMask, oldmask				# 1,6	67
	ceqi	zovl, oldovl, 0					# 0,2	68
#lnop
#nop; lnop
#nop
	fsm	zovl, zovl					# 1,4	70
#nop
	lqx	oldvma, tab5, off5				# 1,6	71
#nop
	lqd	save3, -48($sp)					# 1,6	72
#nop; lnop
	andc	pbit, pbit, zovl				# 0,2	74
	lqd	save2, -32($sp)					# 1,6	74
#ifdef OVLY_IRQ_SAVE
	ila	irqtmp2, do_load90				# 0,2	75
#lnop
	andi	irq_stat, irq_stat, 1				# 0,2	76
#lnop
#else
#nop; lnop
#nop; lnop
#endif
	andc	oldvma, oldvma, pbit				# 0,2	77
	lqd	save1, -16($sp)					# 1,6	77
	nop	       						# 0,0	78
#lnop
#nop
	stqx	oldvma, tab5, off5				# 1,6	79
#nop
#ifdef OVLY_IRQ_SAVE
	binze	irq_stat, irqtmp2				# 1,4	80
do_load90:
#nop
	lqd	save4, -64($sp)					# 1,6	84
#else
#nop; lnop
#endif

	.global	_ovly_debug_event
	.type	_ovly_debug_event, @@function
_ovly_debug_event:
	nop
/* Branch to target address. */
do_load99:
	bi	target						# 1,4	81/85

	.size	__ovly_load, . - __ovly_load
@


1.9
log
@bfd/
	* elf32-spu.c (spu_elf_size_stubs): Revert 2008-01-28 doubling
	of _ovly_buf_table size.
	(spu_elf_build_stubs): Use low bit of .size as "present" bit.
	Adjust initialisations relating to _ovly_buf_table.
ld/
	* emultempl/spu_ovl.S: Use low bit of _ovly_table.size as
	a "present" bit rather than low bit of .buf.  Correct indexing
	into _ovly_buf_table.  Use relative loads and stores to access
	overlay manager local vars.
	* emultempl/spu_ovl.o: Regenerate.
@
text
@d70 2
d76 1
a76 1
#define save1		$72
d92 1
a92 1
#define save3		$74
d100 2
d147 4
d152 1
d180 3
a182 1
 * Sets up $lr to return via __ovly_return.
d259 3
d263 1
d286 10
d298 1
a298 1
#nop
d438 6
d446 1
d449 3
a451 2
#nop; lnop
	nop
d453 7
d461 1
d469 1
a469 1
	bi	target						# 1,4	81
@


1.8
log
@	Rewrite SPU overlay handling code.  Put overlay calls stubs in the
	overlays where possible.  Use a faster call stub, or optionally at
	compile time, a more compact stub.  Double size of _ovly_buf_table
	so that low bit of _ovly_table.buf can be used as a "present" bit.
	Reserve an extra _ovly_table entry for index zero.
@
text
@d3 1
a3 1
   Copyright 2006, 2007 Free Software Foundation, Inc.
d49 1
d54 2
a55 2
#define buf1		reserved3
#define buf2		reserved3
d149 1
a149 1
	rotqbyi	buf1, vma, 12					# 1,4	14
d156 2
a157 2
	andi	present1, buf1, 1				# 0,2	18
	stqd	ovl, (__ovly_current - __ovly_return)($lr)	# 1,6	18
d160 1
a160 1
	brz	present1, __ovly_load_event			# 1,4	20
d201 1
a201 1
	lqd	cur, (__ovly_current - __ovly_return)(rv1)	# 1,6	2
d203 1
a203 1
	stqd	ovl, (__ovly_current - __ovly_return)(rv1)	# 1,6	3
d205 1
a205 1
	lqd	rv3, (__rv_pattern - __ovly_return)(rv1)	# 1,6	4
d218 1
a218 1
	lqa	cur, __ovly_current				# 1,6	2
d220 1
a220 1
	stqa	ovl, __ovly_current				# 1,6	3
d222 1
a222 1
	lqd	rv3, (__rv_pattern - __ovly_return)(rv1)	# 1,6	4
d241 1
a241 1
	rotqbyi	buf2, vma, 12					# 1,4	13
d247 1
a247 1
	andi	present2, buf2, 1				# 0,2	17
d252 1
a252 1
	brz	present2, __ovly_load_event			# 1,4	19
d270 1
d278 1
a278 1
	lqd	cgshuf, (__cg_pattern - __ovly_return)($lr)	# 1,6	3
d321 1
a321 1
   Low bit of .buf needs to be cleared on the _ovly_table entry
d324 1
a324 1
   as _ovly_buf_table[] starts with all zeros.  Don't zap .buf entry
d327 1
a327 1
	lqd	newovl, (__ovly_current - __ovly_return)($lr)	# 1,6	25
d338 1
a338 1
	fsmbi	pbyte, 1					# 1,4	33
d356 1
a356 1
	ila	tab4, _ovly_buf_table				# 0,2	46
d364 2
a365 1
#nop; lnop
d370 2
a371 2
	rotqby	oldovl, map, off4				# 1,4	55
	nop
d381 1
a381 1
	stqx	newmap, tab4, off4				# 1,6	60
@


1.7
log
@	* emultempl/spu_ovl.S: Add debug printf code.
@
text
@d22 1
a22 3
/**
 * MFC DMA defn's.
 */
d28 68
a96 77
/**
 * Temporary register allocations.
 * These are saved/restored here.
 */
#define tab		$75
#define cgbits		$75
#define add64		$75
#define ealo		$75
#define newmask		$75
#define tagstat		$75
#define bchn		$75
#define rv1		$75

#define off		$76
#define off64		$76
#define maxsize		$76
#define oldmask		$76
#define sz		$76
#define lnkr		$76
#define rv2		$76

#define cur		$77
#define cmp		$77
#define buf		$77
#define genwi		$77
#define tagid		$77
#define cmd		$77
#define rv3		$77

#define cgshuf		$78

#define vma		$6

#define map		$7
#define osize		$7
#define cmp2		$7

#define ea64		$8
#define retval		$8

#ifdef OVLY_IRQ_SAVE
#define irqtmp		$8
#define irq_stat	$9
#endif

# Stack quadword minux N
#define	SQWM1	-16*1
#define	SQWM2	-16*2
#define	SQWM3	-16*3
#define	SQWM4	-16*4
#define	SQWM5	-16*5
#define	SQWM6	-16*6
#define	SQWM7	-16*7
#define	SQWM8	-16*8
#define	SQWM9	-16*9
#define	SQWM10	-16*10
#define	SQWM11	-16*11
#define	SQWM12	-16*12
#define	SQWM13	-16*13
#define	SQWM14	-16*14
#define	SQWM15	-16*15
#define	SQWM16	-16*16

	.extern		_ovly_table
	.extern		_ovly_buf_table

#ifdef OVLY_PRINTFS
#define SPE_C99_VPRINTF 37
__entry_event_format:
	.string		"In entry_event_hook segment=0x%08x entry-address=0x%08x\n"
__debug_event_format:
  	.string		"In debug_event_hook link-register=0x%08x %08x %08x %08x\n"
__dma_event_format:
  	.string		"In dma_event_hook vma=0x%08x ea=%08x%08x sz=%08x\n"
__ovly_buf_table_format:
  	.string		"_ovly_buf_table[%08x]=%08x\n"
#endif
d99 3
a101 3
	.align 		4
	.type		__rv_pattern, @@object
	.size		__rv_pattern, 16
d103 4
a106 3
	.word		0x00010203, 0x1c1d1e1f, 0x00010203, 0x10111213
	.type		__cg_pattern, @@object
	.size		__cg_pattern, 16
d108 6
a113 1
	.word		0x04050607, 0x80808080, 0x80808080, 0x80808080
d115 1
a115 1
/**
d118 2
a119 2
 * inputs:
 *	$lr	link register
d121 2
a122 3
 * outputs:
 *	$78	old partition number, to be reloaded
 *	$79	return address in old partion number
d124 3
a126 4
	.global		__ovly_return
	.type		__ovly_return, @@function

	.word		0
d128 35
a162 4
	shlqbyi		$78, $lr, 4
	shlqbyi		$79, $lr, 8
	biz		$78, $79
	.size		__ovly_return, . - __ovly_return
d164 1
a164 1
/**
d167 2
a168 7
 * inputs:
 *	$78	partition number to be loaded.
 *	$79	branch target in new partition.
 *	$lr	link register, containing return addr.
 *
 * outputs:
 *	$lr	new link register, returning through __ovly_return.
d170 2
a171 2
 * Copy a new overlay partition into local store, or return
 * immediately if the partition is already resident.
d173 3
a175 3
	.global		__ovly_load
	.type		__ovly_load, @@function

d177 52
a228 113
/* Save temporary registers to stack. */
	stqd		$6, -16($sp)
	stqd		$7, -32($sp)
	stqd		$8, -48($sp)

#ifdef OVLY_IRQ_SAVE
/* Save irq state, then disable interrupts. */
	stqd		$9, -64($sp)
	ila		irqtmp, __ovly_irq_save
	rdch		irq_stat, $SPU_RdMachStat
	bid		irqtmp
__ovly_irq_save:
#endif

#ifdef OVLY_PRINTFS
//==============================================
// In entry_event_hook segment=0x%08x entry-address=0x%08x
//==============================================
# save registers
	stqd	$10, SQWM5($sp)
	stqd	$11, SQWM6($sp)
	stqd	$12, SQWM7($sp)
# Place input parameters onto the stack to form the
# local storage memory image.
	ila	$10, __entry_event_format
	stqd	$10, SQWM12($sp)
	ai	$10, $sp, SQWM9
	stqd	$10, SQWM11($sp)
	stqd	$sp, SQWM10($sp)
	stqd	$78, SQWM9($sp)
	stqd	$79, SQWM8($sp)
# Construct a message consisting of the 8-bit opcode
# and 24-bit local store pointer to the input
# parameters and place it forllowing the stop and signal
	ila	$10, 0x3ffff		# address mask
	ilhu	$11, SPE_C99_VPRINTF << 8
	ai	$12, $sp, SQWM12	# parameter pointer
	selb	$11, $11, $12, $10	# combine command & address ptr
	brsl	$10, next1a
next1a:
	.type	next1a, @@function
	lqr	$12, message1a
	cwd	$10, message1a-next1a($10)
	shufb	$11, $11, $12, $10	# insert msg into inst word
	stqr	$11, message1a		# store cmd/ptr into msg word
	dsync
# Notify the PPE to perform the assisted call request
# by issing a stop and signal with a signal code
# of 0x2100 (C99 class)
	stop	0x2100
message1a:
	.word	0

# save registers
	stqd	$13, SQWM8($sp)
	stqd	$14, SQWM9($sp)
	stqd	$15, SQWM10($sp)
	stqd	$16, SQWM11($sp)

# initialize loop
	il	$13, 1
	ila	$14, _ovly_buf_table
	ila	$15, _ovly_buf_table_end

loop_start1:
# Place input parameters onto the stack to form the
# local storage memory image.
	ila	$10, __ovly_buf_table_format
	stqd	$10, SQWM16($sp)
	ai	$10, $sp, SQWM13
	stqd	$10, SQWM15($sp)
	stqd	$sp, SQWM14($sp)
	stqd	$13, SQWM13($sp)
	lqd	$16, 0($14)
	rotqby	$16, $16, $14
	stqd	$16, SQWM12($sp)
# Construct a message consisting of the 8-bit opcode
# and 24-bit local store pointer to the input
# parameters and place it forllowing the stop and signal
	ila	$10, 0x3ffff		# address mask
	ilhu	$11, SPE_C99_VPRINTF << 8
	ai	$12, $sp, SQWM16	# parameter pointer
	selb	$11, $11, $12, $10	# combine command & address ptr
	brsl	$10, next1b
next1b:
	.type	next1b, @@function
	lqr	$12, message1b
	cwd	$10, message1b-next1b($10)
	shufb	$11, $11, $12, $10	# insert msg into inst word
	stqr	$11, message1b		# store cmd/ptr into msg word
	dsync
# Notify the PPE to perform the assisted call request
# by issing a stop and signal with a signal code
# of 0x2100 (C99 class)
	stop	0x2100
message1b:
	.word	0

# move to next entry
	ai	$13, $13, 1
	ai	$14, $14, 4
	clgt	$16, $15, $14
	brnz	$16, loop_start1

# restore registers
	lqd	$16, SQWM11($sp)
	lqd	$15, SQWM10($sp)
	lqd	$14, SQWM9($sp)
	lqd	$13, SQWM8($sp)
	lqd	$12, SQWM7($sp)
	lqd	$11, SQWM6($sp)
	lqd	$10, SQWM5($sp)
//==============================================
d231 24
a254 2
/* Set branch hint to overlay target. */
	hbr		__ovly_load_ret, $79
d256 2
a257 35
/* Get caller's overlay index by back chaining through stack frames.
 * Loop until end of stack (back chain all-zeros) or
 * encountered a link register we set here. */
	lqd		bchn, 0($sp)
	ila		retval, __ovly_return

__ovly_backchain_loop:
	lqd		lnkr, 16(bchn)
	lqd		bchn, 0(bchn)
	ceq		cmp, lnkr, retval
	ceqi		cmp2, bchn, 0
	or		cmp, cmp, cmp2
	brz		cmp, __ovly_backchain_loop

/* If we reached the zero back-chain, then lnkr is bogus.  Clear the
 * part of lnkr that we use later (slot 3). */
	rotqbyi		cmp2, cmp2, 4
	andc		lnkr, lnkr, cmp2

/* Set lr = {__ovly_return, prev ovl ndx, caller return adr, callee ovl ndx}. */
	lqd		rv1, (__rv_pattern-__ovly_return+4)(retval)
	shufb		rv2, retval, lnkr, rv1
	shufb		rv3, $lr, $78, rv1
	fsmbi		rv1, 0xff
	selb		rv2, rv2, rv3, rv1
/* If we have a tail call from one overlay function to another overlay,
   then lr is already set up.  Don't change it.  */
	ceq		rv1, $lr, retval
	fsmb		rv1, rv1
	selb		$lr, rv2, $lr, rv1

/* Branch to $79 if non-overlay */
	brz		$78, __ovly_load_restore

/* Load values from _ovly_table[$78].
d265 3
a267 25
	shli		off, $78, 4
	ila		tab, _ovly_table - 16
	lqx		vma, tab, off
	rotqbyi		buf, vma, 12

/* Load values from _ovly_buf_table[buf].
 *	extern struct {
 *		u32 mapped;
 *	} _ovly_buf_table[];
 */
	ila		tab, _ovly_buf_table
	ai		off, buf, -1
	shli		off, off, 2
	lqx		map, tab, off
	rotqby		cur, map, off

/* Branch to $79 now if overlay is already mapped.  */
	ceq		cmp, $78, cur
	brnz		cmp, __ovly_load_restore

/* Marker for profiling code.  If we get here, we are about to load
 * a new overlay.
 */
	.global		__ovly_load_event
	.type		__ovly_load_event, @@function
d269 13
a281 15

/* Set _ovly_buf_table[buf].mapped = $78. */
	cwx		genwi, tab, off
	shufb		map, $78, map, genwi
	stqx		map, tab, off

/* A new partition needs to be loaded. Prepare for DMA loop.
 * _EAR_ is the 64b base EA, filled in at run time by the
 * loader, and indicating the value for SPU executable image start.
 */
	lqd		cgshuf, (__cg_pattern-__ovly_return+4)(retval)
	rotqbyi		osize, vma, 4
	rotqbyi		sz, vma, 8
	lqa		ea64, _EAR_

d283 87
a369 76
/* 64b add to compute next ea64. */
	rotqmbyi	off64, sz, -4
	cg		cgbits, ea64, off64
	shufb		add64, cgbits, cgbits, cgshuf
	addx		add64, ea64, off64
	ori		ea64, add64, 0

/* Setup DMA parameters, then issue DMA request. */
	rotqbyi		ealo, add64, 4
	ila		maxsize, MFC_MAX_DMA_SIZE
	cgt		cmp, osize, maxsize
	selb		sz, osize, maxsize, cmp
	ila		tagid, MFC_TAG_ID
	wrch		$MFC_LSA, vma
	wrch		$MFC_EAH, ea64
	wrch		$MFC_EAL, ealo
	wrch		$MFC_Size, sz
	wrch		$MFC_TagId, tagid
	ila		cmd, MFC_GET_CMD
	wrch		$MFC_Cmd, cmd

#ifdef OVLY_PRINTFS
//==============================================
// In dma_event_hook vma=0x%08x ea=%08x%08x sz=%08x
//==============================================
# save registers
	stqd	$10, SQWM5($sp)
	stqd	$11, SQWM6($sp)
	stqd	$12, SQWM7($sp)
# Place input parameters onto the stack to form the
# local storage memory image.
	ila	$10, __dma_event_format
	stqd	$10, SQWM14($sp)
	ai	$10, $sp, SQWM11
	stqd	$10, SQWM13($sp)
	stqd	$sp, SQWM12($sp)
	stqd	vma, SQWM11($sp)
	stqd	ea64, SQWM10($sp)
	stqd	ealo, SQWM9($sp)
	stqd	sz, SQWM8($sp)
# Construct a message consisting of the 8-bit opcode
# and 24-bit local store pointer to the input
# parameters and place it forllowing the stop and signal
	ila	$10, 0x3ffff		# address mask
	ilhu	$11, SPE_C99_VPRINTF << 8
	ai	$12, $sp, SQWM14	# parameter pointer
	selb	$11, $11, $12, $10	# combine command & address ptr
	brsl	$10, next3a
next3a:
	.type	next3a, @@function
	lqr	$12, message3a
	cwd	$10, message3a-next3a($10)
	shufb	$11, $11, $12, $10	# insert msg into inst word
	stqr	$11, message3a		# store cmd/ptr into msg word
	dsync
# Notify the PPE to perform the assisted call request
# by issing a stop and signal with a signal code
# of 0x2100 (C99 class)
	stop	0x2100
message3a:
	.word	0

# restore registers
	lqd	$12, SQWM7($sp)
	lqd	$11, SQWM6($sp)
	lqd	$10, SQWM5($sp)
//==============================================
#endif

/* Increment vma, decrement size, branch back as needed. */
	a		vma, vma, sz
	sf		osize, sz, osize
	brnz		osize, __ovly_xfer_loop

/* Save app's tagmask, wait for DMA complete, restore mask. */
	rdch		oldmask, $MFC_RdTagMask
d371 1
a371 1
	ilh		newmask, 1 << MFC_TAG_ID
d373 1
a373 113
	ilhu		newmask, 1 << (MFC_TAG_ID - 16)
#endif
	wrch		$MFC_WrTagMask, newmask
	ila		tagstat, MFC_TAG_UPDATE_ALL
	wrch		$MFC_WrTagUpdate, tagstat
	rdch		tagstat, $MFC_RdTagStat
	sync
	wrch		$MFC_WrTagMask, oldmask

#ifdef OVLY_PRINTFS
//==============================================
// In debug_event_hook link-register=0x%08x %08x %08x %08x
//==============================================
# save registers
	stqd	$10, SQWM5($sp)
	stqd	$11, SQWM6($sp)
	stqd	$12, SQWM7($sp)
# Place input parameters onto the stack to form the
# local storage memory image.
	ila	$10, __debug_event_format
	stqd	$10, SQWM14($sp)
	ai	$10, $sp, SQWM11
	stqd	$10, SQWM13($sp)
	stqd	$sp, SQWM12($sp)
	stqd	$lr, SQWM11($sp)
	rotqbyi $10, $lr, 4
	stqd	$10, SQWM10($sp)
	rotqbyi $10, $10, 4
	stqd	$10, SQWM9($sp)
	rotqbyi $10, $10, 4
	stqd	$10, SQWM8($sp)
# Construct a message consisting of the 8-bit opcode
# and 24-bit local store pointer to the input
# parameters and place it forllowing the stop and signal
	ila	$10, 0x3ffff		# address mask
	ilhu	$11, SPE_C99_VPRINTF << 8
	ai	$12, $sp, SQWM14	# parameter pointer
	selb	$11, $11, $12, $10	# combine command & address ptr
	brsl	$10, next2a
next2a:
	.type	next2a, @@function
	lqr	$12, message2a
	cwd	$10, message2a-next2a($10)
	shufb	$11, $11, $12, $10	# insert msg into inst word
	stqr	$11, message2a		# store cmd/ptr into msg word
	dsync
# Notify the PPE to perform the assisted call request
# by issing a stop and signal with a signal code
# of 0x2100 (C99 class)
	stop	0x2100
message2a:
	.word	0

# save registers
	stqd	$13, SQWM8($sp)
	stqd	$14, SQWM9($sp)
	stqd	$15, SQWM10($sp)
	stqd	$16, SQWM11($sp)

# initialize loop
	il	$13, 1
	ila	$14, _ovly_buf_table
	ila	$15, _ovly_buf_table_end

loop_start2:
# Place input parameters onto the stack to form the
# local storage memory image.
	ila	$10, __ovly_buf_table_format
	stqd	$10, SQWM16($sp)
	ai	$10, $sp, SQWM13
	stqd	$10, SQWM15($sp)
	stqd	$sp, SQWM14($sp)
	stqd	$13, SQWM13($sp)
	lqd	$16, 0($14)
	rotqby	$16, $16, $14
	stqd	$16, SQWM12($sp)
# Construct a message consisting of the 8-bit opcode
# and 24-bit local store pointer to the input
# parameters and place it forllowing the stop and signal
	ila	$10, 0x3ffff		# address mask
	ilhu	$11, SPE_C99_VPRINTF << 8
	ai	$12, $sp, SQWM16	# parameter pointer
	selb	$11, $11, $12, $10	# combine command & address ptr
	brsl	$10, next2b
next2b:
	.type	next2b, @@function
	lqr	$12, message2b
	cwd	$10, message2b-next2b($10)
	shufb	$11, $11, $12, $10	# insert msg into inst word
	stqr	$11, message2b		# store cmd/ptr into msg word
	dsync
# Notify the PPE to perform the assisted call request
# by issing a stop and signal with a signal code
# of 0x2100 (C99 class)
	stop	0x2100
message2b:
	.word	0

# move to next entry
	ai	$13, $13, 1
	ai	$14, $14, 4
	clgt	$16, $15, $14
	brnz	$16, loop_start2

# restore registers
	lqd	$16, SQWM11($sp)
	lqd	$15, SQWM10($sp)
	lqd	$14, SQWM9($sp)
	lqd	$13, SQWM8($sp)
	lqd	$12, SQWM7($sp)
	lqd	$11, SQWM6($sp)
	lqd	$10, SQWM5($sp)
//==============================================
d375 43
d419 2
a420 2
	.global		_ovly_debug_event
	.type		_ovly_debug_event, @@function
a421 1
/* GDB inserts debugger trap here.  */
a422 17

__ovly_load_restore:
#ifdef OVLY_IRQ_SAVE
/* Conditionally re-enable interrupts. */
	andi		irq_stat, irq_stat, 1
	ila		irqtmp, __ovly_irq_restore
	binze		irq_stat, irqtmp
__ovly_irq_restore:
	lqd		$9, -64($sp)
#endif

/* Restore saved registers. */
	lqd		$8, -48($sp)
	lqd		$7, -32($sp)
	lqd		$6, -16($sp)

__ovly_load_ret:
d424 2
a425 1
	bi		$79
d427 1
a427 1
	.size		__ovly_load, . - __ovly_load
@


1.6
log
@Update sources to GPLv3
@
text
@d76 18
d97 12
d151 1
a151 1
 * Copy a new overlay partition into local store, or return 
d164 1
a164 1
/* Save irq state, then disable interrupts. */ 
d172 101
d287 1
a287 1
	or		cmp, cmp, cmp2	
d350 1
a350 1
/* A new partition needs to be loaded. Prepare for DMA loop. 
d381 48
d448 106
@


1.5
log
@	* emultempl/spu_ovl.S: Don't trash lr on tail call from one
	overlay to another.
	* emultempl/spu_ovl.o: Regenerate.
@
text
@d5 1
a5 1
   This file is part of GLD, the Gnu Linker.
d7 1
a7 1
   GLD is free software; you can redistribute it and/or modify
d9 2
a10 2
   the Free Software Foundation; either version 2, or (at your option)
   any later version.
d12 1
a12 1
   GLD is distributed in the hope that it will be useful,
d18 3
a20 3
   along with GLD; see the file COPYING.  If not, write to the Free
   Software Foundation, 51 Franklin Street - Fifth Floor, Boston, MA
   02110-1301, USA.  */
@


1.4
log
@	* emultempl/spu_ovl.S (__rv_pattern, __cg_pattern): Set symbol
	types and sizes.
	* emultempl/spu_ovl.o: Regenerate.
@
text
@d169 6
a174 1
	selb		$lr, rv2, rv3, rv1
@


1.3
log
@	* emultempl/spuelf.em (_binary_builtin_ovl_mgr_start): Rename
	to _binary_spu_ovl_o_start.
	(_binary_builtin_ovl_mgr_end): Rename to _binary_spu_ovl_o_end.
	(spu_elf_load_ovl_mgr): Fatal error on missing overlay manager.
	* emultempl/spu_inc.s: Rename symbols.
	* emultempl/spu_none.s: New file.
	* emultempl/spu_ovl.S: Update copyright.
	* Makefile.am (spu_inc.o): Try building with ld -r first, then
	gas incbin, then build without overlay manager.
	* Makefile.in: Regenerate.
@
text
@d81 2
d85 2
@


1.2
log
@	* emultempl/spu_ovl.S (__ovly_return, __ovly_load): Set sym size.
	(__ovly_load_event): Define.
	(size): Rename to osize.
	* emultempl/spu_ovl.o: Regenerate.
@
text
@d3 1
a3 1
   Copyright 2006 Free Software Foundation, Inc.
@


1.1
log
@New Cell SPU port.
@
text
@d65 1
a65 1
#define size		$7
d104 1
d198 7
d215 1
a215 1
	rotqbyi		size, vma, 4
d230 2
a231 2
	cgt		cmp, size, maxsize
	selb		sz, size, maxsize, cmp
d243 2
a244 2
	sf		size, sz, size
	brnz		size, __ovly_xfer_loop
d284 2
@

