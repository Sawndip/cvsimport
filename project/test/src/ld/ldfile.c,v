head	1.68;
access;
symbols
	binutils-2_24-branch:1.68.0.2
	binutils-2_24-branchpoint:1.68
	binutils-2_21_1:1.58.2.2
	binutils-2_23_2:1.67
	binutils-2_23_1:1.67
	binutils-2_23:1.67
	binutils-2_23-branch:1.67.0.2
	binutils-2_23-branchpoint:1.67
	binutils-2_22_branch:1.63.0.4
	binutils-2_22:1.63
	binutils-2_22-branch:1.63.0.2
	binutils-2_22-branchpoint:1.63
	binutils-2_21:1.58
	binutils-2_21-branch:1.58.0.2
	binutils-2_21-branchpoint:1.58
	binutils-2_20_1:1.53
	binutils-2_20:1.53
	binutils-arc-20081103-branch:1.47.0.6
	binutils-arc-20081103-branchpoint:1.47
	binutils-2_20-branch:1.53.0.2
	binutils-2_20-branchpoint:1.53
	dje-cgen-play1-branch:1.52.0.2
	dje-cgen-play1-branchpoint:1.52
	arc-20081103-branch:1.47.0.4
	arc-20081103-branchpoint:1.47
	binutils-2_19_1:1.47
	binutils-2_19:1.47
	binutils-2_19-branch:1.47.0.2
	binutils-2_19-branchpoint:1.47
	binutils-2_18:1.43
	binutils-2_18-branch:1.43.0.2
	binutils-2_18-branchpoint:1.43
	binutils-csl-coldfire-4_1-32:1.40
	binutils-csl-sourcerygxx-4_1-32:1.40
	binutils-csl-innovasic-fido-3_4_4-33:1.40
	binutils-csl-sourcerygxx-3_4_4-32:1.38
	binutils-csl-coldfire-4_1-30:1.40
	binutils-csl-sourcerygxx-4_1-30:1.40
	binutils-csl-coldfire-4_1-28:1.40
	binutils-csl-sourcerygxx-4_1-29:1.40
	binutils-csl-sourcerygxx-4_1-28:1.40
	binutils-csl-arm-2006q3-27:1.40
	binutils-csl-sourcerygxx-4_1-27:1.40
	binutils-csl-arm-2006q3-26:1.40
	binutils-csl-sourcerygxx-4_1-26:1.40
	binutils-csl-sourcerygxx-4_1-25:1.40
	binutils-csl-sourcerygxx-4_1-24:1.40
	binutils-csl-sourcerygxx-4_1-23:1.40
	binutils-csl-sourcerygxx-4_1-21:1.40
	binutils-csl-arm-2006q3-21:1.40
	binutils-csl-sourcerygxx-4_1-22:1.40
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.40
	binutils-csl-sourcerygxx-4_1-20:1.40
	binutils-csl-arm-2006q3-19:1.40
	binutils-csl-sourcerygxx-4_1-19:1.40
	binutils-csl-sourcerygxx-4_1-18:1.40
	binutils-csl-renesas-4_1-9:1.40
	binutils-csl-sourcerygxx-3_4_4-25:1.38
	binutils-csl-renesas-4_1-8:1.40
	binutils-csl-renesas-4_1-7:1.40
	binutils-csl-renesas-4_1-6:1.40
	binutils-csl-sourcerygxx-4_1-17:1.40
	binutils-csl-sourcerygxx-4_1-14:1.40
	binutils-csl-sourcerygxx-4_1-15:1.40
	binutils-csl-sourcerygxx-4_1-13:1.40
	binutils-2_17:1.40
	binutils-csl-sourcerygxx-4_1-12:1.40
	binutils-csl-sourcerygxx-3_4_4-21:1.40
	binutils-csl-wrs-linux-3_4_4-24:1.38
	binutils-csl-wrs-linux-3_4_4-23:1.38
	binutils-csl-sourcerygxx-4_1-9:1.40
	binutils-csl-sourcerygxx-4_1-8:1.40
	binutils-csl-sourcerygxx-4_1-7:1.40
	binutils-csl-arm-2006q1-6:1.40
	binutils-csl-sourcerygxx-4_1-6:1.40
	binutils-csl-wrs-linux-3_4_4-22:1.38
	binutils-csl-coldfire-4_1-11:1.40
	binutils-csl-sourcerygxx-3_4_4-19:1.40
	binutils-csl-coldfire-4_1-10:1.40
	binutils-csl-sourcerygxx-4_1-5:1.40
	binutils-csl-sourcerygxx-4_1-4:1.40
	binutils-csl-wrs-linux-3_4_4-21:1.38
	binutils-csl-morpho-4_1-4:1.40
	binutils-csl-sourcerygxx-3_4_4-17:1.40
	binutils-csl-wrs-linux-3_4_4-20:1.38
	binutils-2_17-branch:1.40.0.4
	binutils-2_17-branchpoint:1.40
	binutils-csl-2_17-branch:1.40.0.2
	binutils-csl-2_17-branchpoint:1.40
	binutils-csl-gxxpro-3_4-branch:1.38.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.38
	binutils-2_16_1:1.38
	binutils-csl-arm-2005q1b:1.38
	binutils-2_16:1.38
	binutils-csl-arm-2005q1a:1.38
	binutils-csl-arm-2005q1-branch:1.38.0.4
	binutils-csl-arm-2005q1-branchpoint:1.38
	binutils-2_16-branch:1.38.0.2
	binutils-2_16-branchpoint:1.38
	csl-arm-2004-q3d:1.36
	csl-arm-2004-q3:1.35
	binutils-2_15:1.34
	binutils-2_15-branchpoint:1.34
	csl-arm-2004-q1a:1.35
	csl-arm-2004-q1:1.35
	binutils-2_15-branch:1.34.0.6
	cagney_bfdfile-20040213-branch:1.34.0.4
	cagney_bfdfile-20040213-branchpoint:1.34
	cagney_bigcore-20040122-branch:1.34.0.2
	cagney_bigcore-20040122-branchpoint:1.34
	csl-arm-2003-q4:1.33
	binutils-2_14:1.30
	binutils-2_14-branch:1.30.0.2
	binutils-2_14-branchpoint:1.30
	binutils-2_13_2_1:1.19.2.2
	binutils-2_13_2:1.19.2.2
	binutils-2_13_1:1.19.2.2
	binutils-2_13:1.19
	binutils-2_13-branchpoint:1.19
	binutils-2_13-branch:1.19.0.2
	binutils-2_12_1:1.14
	binutils-2_12:1.14
	binutils-2_12-branch:1.14.0.2
	binutils-2_12-branchpoint:1.14
	cygnus_cvs_20020108_pre:1.14
	binutils-2_11_2:1.8.2.1
	binutils-2_11_1:1.8.2.1
	binutils-2_11:1.8
	x86_64versiong3:1.9
	binutils-2_11-branch:1.8.0.2
	binutils-2_10_1:1.5
	binutils-2_10:1.5
	binutils-2_10-branch:1.5.0.2
	binutils-2_10-branchpoint:1.5
	binutils_latest_snapshot:1.68
	repo-unification-2000-02-06:1.3
	binu_ss_19990721:1.3
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.68
date	2013.03.06.13.48.46;	author amodra;	state Exp;
branches;
next	1.67;

1.67
date	2012.07.13.13.20.26;	author nickc;	state Exp;
branches;
next	1.66;

1.66
date	2012.03.08.05.29.31;	author amodra;	state Exp;
branches;
next	1.65;

1.65
date	2012.03.05.22.43.40;	author amodra;	state Exp;
branches;
next	1.64;

1.64
date	2012.02.17.14.09.57;	author amodra;	state Exp;
branches;
next	1.63;

1.63
date	2011.04.20.00.22.08;	author amodra;	state Exp;
branches;
next	1.62;

1.62
date	2011.04.17.23.15.13;	author amodra;	state Exp;
branches;
next	1.61;

1.61
date	2011.02.28.18.34.52;	author ktietz;	state Exp;
branches;
next	1.60;

1.60
date	2010.12.06.00.07.05;	author hjl;	state Exp;
branches;
next	1.59;

1.59
date	2010.11.21.20.36.24;	author hjl;	state Exp;
branches;
next	1.58;

1.58
date	2010.11.05.07.20.07;	author davek;	state Exp;
branches
	1.58.2.1;
next	1.57;

1.57
date	2010.10.29.12.10.36;	author hjl;	state Exp;
branches;
next	1.56;

1.56
date	2010.10.28.12.06.27;	author amodra;	state Exp;
branches;
next	1.55;

1.55
date	2010.10.14.01.31.31;	author davek;	state Exp;
branches;
next	1.54;

1.54
date	2010.01.21.10.31.31;	author nickc;	state Exp;
branches;
next	1.53;

1.53
date	2009.08.29.22.11.01;	author nickc;	state Exp;
branches;
next	1.52;

1.52
date	2009.04.14.03.17.21;	author amodra;	state Exp;
branches;
next	1.51;

1.51
date	2009.04.14.02.47.22;	author hjl;	state Exp;
branches;
next	1.50;

1.50
date	2009.04.11.14.06.56;	author hjl;	state Exp;
branches;
next	1.49;

1.49
date	2009.04.06.01.21.09;	author kazu;	state Exp;
branches;
next	1.48;

1.48
date	2009.04.06.00.47.09;	author kazu;	state Exp;
branches;
next	1.47;

1.47
date	2008.08.09.10.15.38;	author amodra;	state Exp;
branches;
next	1.46;

1.46
date	2008.08.08.08.06.16;	author amodra;	state Exp;
branches;
next	1.45;

1.45
date	2008.02.15.03.35.53;	author amodra;	state Exp;
branches;
next	1.44;

1.44
date	2008.02.07.08.41.10;	author amodra;	state Exp;
branches;
next	1.43;

1.43
date	2007.07.06.14.09.41;	author nickc;	state Exp;
branches;
next	1.42;

1.42
date	2007.05.03.09.24.16;	author amodra;	state Exp;
branches;
next	1.41;

1.41
date	2007.04.26.14.46.59;	author amodra;	state Exp;
branches;
next	1.40;

1.40
date	2005.05.12.07.32.02;	author nickc;	state Exp;
branches;
next	1.39;

1.39
date	2005.04.28.23.54.32;	author bje;	state Exp;
branches;
next	1.38;

1.38
date	2005.03.03.11.51.58;	author amodra;	state Exp;
branches;
next	1.37;

1.37
date	2005.02.24.20.11.04;	author bje;	state Exp;
branches;
next	1.36;

1.36
date	2004.10.11.02.40.47;	author amodra;	state Exp;
branches;
next	1.35;

1.35
date	2004.03.30.20.02.03;	author shebs;	state Exp;
branches;
next	1.34;

1.34
date	2004.01.03.11.09.06;	author amodra;	state Exp;
branches;
next	1.33;

1.33
date	2003.11.07.12.19.33;	author nickc;	state Exp;
branches;
next	1.32;

1.32
date	2003.06.28.05.28.54;	author amodra;	state Exp;
branches;
next	1.31;

1.31
date	2003.06.25.06.40.26;	author amodra;	state Exp;
branches;
next	1.30;

1.30
date	2003.04.18.15.33.49;	author hjl;	state Exp;
branches;
next	1.29;

1.29
date	2003.03.31.18.12.52;	author nickc;	state Exp;
branches;
next	1.28;

1.28
date	2003.03.25.10.29.28;	author nickc;	state Exp;
branches;
next	1.27;

1.27
date	2003.03.19.09.56.06;	author schwab;	state Exp;
branches;
next	1.26;

1.26
date	2003.03.03.20.00.35;	author aoliva;	state Exp;
branches;
next	1.25;

1.25
date	2003.01.06.16.13.57;	author drow;	state Exp;
branches;
next	1.24;

1.24
date	2003.01.02.03.53.53;	author kazu;	state Exp;
branches;
next	1.23;

1.23
date	2002.12.23.10.44.59;	author nickc;	state Exp;
branches;
next	1.22;

1.22
date	2002.11.30.08.39.45;	author amodra;	state Exp;
branches;
next	1.21;

1.21
date	2002.10.30.03.57.38;	author drow;	state Exp;
branches;
next	1.20;

1.20
date	2002.10.10.15.59.10;	author jakub;	state Exp;
branches;
next	1.19;

1.19
date	2002.07.02.04.26.39;	author amodra;	state Exp;
branches
	1.19.2.1;
next	1.18;

1.18
date	2002.06.08.07.39.45;	author amodra;	state Exp;
branches;
next	1.17;

1.17
date	2002.05.25.20.39.24;	author kazu;	state Exp;
branches;
next	1.16;

1.16
date	2002.05.10.21.20.13;	author trix;	state Exp;
branches;
next	1.15;

1.15
date	2002.05.03.13.48.55;	author kazu;	state Exp;
branches;
next	1.14;

1.14
date	2001.11.02.01.13.09;	author cgd;	state Exp;
branches;
next	1.13;

1.13
date	2001.09.19.05.33.33;	author hjl;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.12.07.59.28;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	2001.05.02.16.42.55;	author hjl;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.13.06.14.27;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.20.21.07.24;	author hjl;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.09.15.09.17;	author kazu;	state Exp;
branches
	1.8.2.1;
next	1.7;

1.7
date	2000.09.29.11.18.18;	author kazu;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.11.20.17.02;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	2000.03.06.18.08.38;	author ian;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.24.17.53.11;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	99.07.09.22.52.05;	author ian;	state Exp;
branches;
next	1.2;

1.2
date	99.07.08.16.50.53;	author rth;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.29.06;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.58.2.1
date	2011.02.01.12.25.46;	author amodra;	state Exp;
branches;
next	1.58.2.2;

1.58.2.2
date	2011.04.27.07.17.42;	author amodra;	state Exp;
branches;
next	;

1.19.2.1
date	2002.10.28.18.45.52;	author drow;	state Exp;
branches;
next	1.19.2.2;

1.19.2.2
date	2002.10.30.03.54.52;	author drow;	state Exp;
branches;
next	;

1.8.2.1
date	2001.05.23.03.41.11;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.06;	author rth;	state Exp;
branches;
next	;


desc
@@


1.68
log
@	* ldfile.c (ldfile_open_command_file_1): Return after einfo
	to avoid warning.
@
text
@/* Linker file opening and searching.
   Copyright 1991, 1992, 1993, 1994, 1995, 1998, 1999, 2000, 2001, 2002,
   2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011, 2012
   Free Software Foundation, Inc.

   This file is part of the GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#include "sysdep.h"
#include "bfd.h"
#include "bfdlink.h"
#include "safe-ctype.h"
#include "ld.h"
#include "ldmisc.h"
#include "ldexp.h"
#include "ldlang.h"
#include "ldfile.h"
#include "ldmain.h"
#include <ldgram.h>
#include "ldlex.h"
#include "ldemul.h"
#include "libiberty.h"
#include "filenames.h"
#ifdef ENABLE_PLUGINS
#include "plugin-api.h"
#include "plugin.h"
#endif /* ENABLE_PLUGINS */

bfd_boolean  ldfile_assumed_script = FALSE;
const char * ldfile_output_machine_name = "";
unsigned long ldfile_output_machine;
enum bfd_architecture ldfile_output_architecture;
search_dirs_type * search_head;

#ifdef VMS
static char * slash = "";
#else
#if defined (_WIN32) && ! defined (__CYGWIN32__)
static char * slash = "\\";
#else
static char * slash = "/";
#endif
#endif

typedef struct search_arch
{
  char *name;
  struct search_arch *next;
} search_arch_type;

static search_dirs_type **search_tail_ptr = &search_head;
static search_arch_type *search_arch_head;
static search_arch_type **search_arch_tail_ptr = &search_arch_head;

/* Test whether a pathname, after canonicalization, is the same or a
   sub-directory of the sysroot directory.  */

static bfd_boolean
is_sysrooted_pathname (const char *name)
{
  char *realname;
  int len;
  bfd_boolean result;

  if (ld_canon_sysroot == NULL)
    return FALSE;

  realname = lrealpath (name);
  len = strlen (realname);
  result = FALSE;
  if (len > ld_canon_sysroot_len
      && IS_DIR_SEPARATOR (realname[ld_canon_sysroot_len]))
    {
      realname[ld_canon_sysroot_len] = '\0';
      result = FILENAME_CMP (ld_canon_sysroot, realname) == 0;
    }

  free (realname);
  return result;
}

/* Adds NAME to the library search path.
   Makes a copy of NAME using xmalloc().  */

void
ldfile_add_library_path (const char *name, bfd_boolean cmdline)
{
  search_dirs_type *new_dirs;

  if (!cmdline && config.only_cmd_line_lib_dirs)
    return;

  new_dirs = (search_dirs_type *) xmalloc (sizeof (search_dirs_type));
  new_dirs->next = NULL;
  new_dirs->cmdline = cmdline;
  *search_tail_ptr = new_dirs;
  search_tail_ptr = &new_dirs->next;

  /* If a directory is marked as honoring sysroot, prepend the sysroot path
     now.  */
  if (name[0] == '=')
    new_dirs->name = concat (ld_sysroot, name + 1, (const char *) NULL);
  else
    new_dirs->name = xstrdup (name);
}

/* Try to open a BFD for a lang_input_statement.  */

bfd_boolean
ldfile_try_open_bfd (const char *attempt,
		     lang_input_statement_type *entry)
{
  entry->the_bfd = bfd_openr (attempt, entry->target);

  if (verbose)
    {
      if (entry->the_bfd == NULL)
	info_msg (_("attempt to open %s failed\n"), attempt);
      else
	info_msg (_("attempt to open %s succeeded\n"), attempt);
    }

  if (entry->the_bfd == NULL)
    {
      if (bfd_get_error () == bfd_error_invalid_target)
	einfo (_("%F%P: invalid BFD target `%s'\n"), entry->target);
      return FALSE;
    }

  /* Linker needs to decompress sections.  */
  entry->the_bfd->flags |= BFD_DECOMPRESS;

  /* If we are searching for this file, see if the architecture is
     compatible with the output file.  If it isn't, keep searching.
     If we can't open the file as an object file, stop the search
     here.  If we are statically linking, ensure that we don't link
     a dynamic object.

     In the code below, it's OK to exit early if the check fails,
     closing the checked BFD and returning FALSE, but if the BFD
     checks out compatible, do not exit early returning TRUE, or
     the plugins will not get a chance to claim the file.  */

  if (entry->flags.search_dirs || !entry->flags.dynamic)
    {
      bfd *check;

      if (bfd_check_format (entry->the_bfd, bfd_archive))
	check = bfd_openr_next_archived_file (entry->the_bfd, NULL);
      else
	check = entry->the_bfd;

      if (check != NULL)
	{
	  if (! bfd_check_format (check, bfd_object))
	    {
	      if (check == entry->the_bfd
		  && entry->flags.search_dirs
		  && bfd_get_error () == bfd_error_file_not_recognized
		  && ! ldemul_unrecognized_file (entry))
		{
		  int token, skip = 0;
		  char *arg, *arg1, *arg2, *arg3;
		  extern FILE *yyin;

		  /* Try to interpret the file as a linker script.  */
		  ldfile_open_command_file (attempt);

		  ldfile_assumed_script = TRUE;
		  parser_input = input_selected;
		  ldlex_both ();
		  token = INPUT_SCRIPT;
		  while (token != 0)
		    {
		      switch (token)
			{
			case OUTPUT_FORMAT:
			  if ((token = yylex ()) != '(')
			    continue;
			  if ((token = yylex ()) != NAME)
			    continue;
			  arg1 = yylval.name;
			  arg2 = NULL;
			  arg3 = NULL;
			  token = yylex ();
			  if (token == ',')
			    {
			      if ((token = yylex ()) != NAME)
				{
				  free (arg1);
				  continue;
				}
			      arg2 = yylval.name;
			      if ((token = yylex ()) != ','
				  || (token = yylex ()) != NAME)
				{
				  free (arg1);
				  free (arg2);
				  continue;
				}
			      arg3 = yylval.name;
			      token = yylex ();
			    }
			  if (token == ')')
			    {
			      switch (command_line.endian)
				{
				default:
				case ENDIAN_UNSET:
				  arg = arg1; break;
				case ENDIAN_BIG:
				  arg = arg2 ? arg2 : arg1; break;
				case ENDIAN_LITTLE:
				  arg = arg3 ? arg3 : arg1; break;
				}
			      if (strcmp (arg, lang_get_output_target ()) != 0)
				skip = 1;
			    }
			  free (arg1);
			  if (arg2) free (arg2);
			  if (arg3) free (arg3);
			  break;
			case NAME:
			case LNAME:
			case VERS_IDENTIFIER:
			case VERS_TAG:
			  free (yylval.name);
			  break;
			case INT:
			  if (yylval.bigint.str)
			    free (yylval.bigint.str);
			  break;
			}
		      token = yylex ();
		    }
		  ldlex_popstate ();
		  ldfile_assumed_script = FALSE;
		  fclose (yyin);
		  yyin = NULL;
		  if (skip)
		    {
		      if (command_line.warn_search_mismatch)
			einfo (_("%P: skipping incompatible %s "
				 "when searching for %s\n"),
			       attempt, entry->local_sym_name);
		      bfd_close (entry->the_bfd);
		      entry->the_bfd = NULL;
		      return FALSE;
		    }
		}
	      goto success;
	    }

	  if (!entry->flags.dynamic && (entry->the_bfd->flags & DYNAMIC) != 0)
	    {
	      einfo (_("%F%P: attempted static link of dynamic object `%s'\n"),
		     attempt);
	      bfd_close (entry->the_bfd);
	      entry->the_bfd = NULL;
	      return FALSE;
	    }

	  if (entry->flags.search_dirs
	      && !bfd_arch_get_compatible (check, link_info.output_bfd,
					   command_line.accept_unknown_input_arch)
	      /* XCOFF archives can have 32 and 64 bit objects.  */
	      && ! (bfd_get_flavour (check) == bfd_target_xcoff_flavour
		    && bfd_get_flavour (link_info.output_bfd) == bfd_target_xcoff_flavour
		    && bfd_check_format (entry->the_bfd, bfd_archive)))
	    {
	      if (command_line.warn_search_mismatch)
		einfo (_("%P: skipping incompatible %s "
			 "when searching for %s\n"),
		       attempt, entry->local_sym_name);
	      bfd_close (entry->the_bfd);
	      entry->the_bfd = NULL;
	      return FALSE;
	    }
	}
    }
success:
#ifdef ENABLE_PLUGINS
  /* If plugins are active, they get first chance to claim
     any successfully-opened input file.  We skip archives
     here; the plugin wants us to offer it the individual
     members when we enumerate them, not the whole file.  We
     also ignore corefiles, because that's just weird.  It is
     a needed side-effect of calling  bfd_check_format with
     bfd_object that it sets the bfd's arch and mach, which
     will be needed when and if we want to bfd_create a new
     one using this one as a template.  */
  if (bfd_check_format (entry->the_bfd, bfd_object)
      && plugin_active_plugins_p ()
      && !no_more_claiming)
    {
      int fd = open (attempt, O_RDONLY | O_BINARY);
      if (fd >= 0)
	{
	  struct ld_plugin_input_file file;

	  file.name = attempt;
	  file.offset = 0;
	  file.filesize = lseek (fd, 0, SEEK_END);
	  file.fd = fd;
	  plugin_maybe_claim (&file, entry);
	}
    }
#endif /* ENABLE_PLUGINS */

  /* It opened OK, the format checked out, and the plugins have had
     their chance to claim it, so this is success.  */
  return TRUE;
}

/* Search for and open the file specified by ENTRY.  If it is an
   archive, use ARCH, LIB and SUFFIX to modify the file name.  */

bfd_boolean
ldfile_open_file_search (const char *arch,
			 lang_input_statement_type *entry,
			 const char *lib,
			 const char *suffix)
{
  search_dirs_type *search;

  /* If this is not an archive, try to open it in the current
     directory first.  */
  if (! entry->flags.maybe_archive)
    {
      if (entry->flags.sysrooted && IS_ABSOLUTE_PATH (entry->filename))
	{
	  char *name = concat (ld_sysroot, entry->filename,
			       (const char *) NULL);
	  if (ldfile_try_open_bfd (name, entry))
	    {
	      entry->filename = name;
	      return TRUE;
	    }
	  free (name);
	}
      else if (ldfile_try_open_bfd (entry->filename, entry))
	return TRUE;

      if (IS_ABSOLUTE_PATH (entry->filename))
	return FALSE;
    }

  for (search = search_head; search != NULL; search = search->next)
    {
      char *string;

      if (entry->flags.dynamic && ! link_info.relocatable)
	{
	  if (ldemul_open_dynamic_archive (arch, search, entry))
	    return TRUE;
	}

      if (entry->flags.maybe_archive)
	string = concat (search->name, slash, lib, entry->filename,
			 arch, suffix, (const char *) NULL);
      else
	string = concat (search->name, slash, entry->filename,
			 (const char *) 0);

      if (ldfile_try_open_bfd (string, entry))
	{
	  entry->filename = string;
	  return TRUE;
	}

      free (string);
    }

  return FALSE;
}

/* Open the input file specified by ENTRY.
   PR 4437: Do not stop on the first missing file, but
   continue processing other input files in case there
   are more errors to report.  */

void
ldfile_open_file (lang_input_statement_type *entry)
{
  if (entry->the_bfd != NULL)
    return;

  if (! entry->flags.search_dirs)
    {
      if (ldfile_try_open_bfd (entry->filename, entry))
	return;

      if (filename_cmp (entry->filename, entry->local_sym_name) != 0)
	einfo (_("%P: cannot find %s (%s): %E\n"),
	       entry->filename, entry->local_sym_name);
      else
	einfo (_("%P: cannot find %s: %E\n"), entry->local_sym_name);

      entry->flags.missing_file = TRUE;
      input_flags.missing_file = TRUE;
    }
  else
    {
      search_arch_type *arch;
      bfd_boolean found = FALSE;

      /* Try to open <filename><suffix> or lib<filename><suffix>.a */
      for (arch = search_arch_head; arch != NULL; arch = arch->next)
	{
	  found = ldfile_open_file_search (arch->name, entry, "lib", ".a");
	  if (found)
	    break;
#ifdef VMS
	  found = ldfile_open_file_search (arch->name, entry, ":lib", ".a");
	  if (found)
	    break;
#endif
	  found = ldemul_find_potential_libraries (arch->name, entry);
	  if (found)
	    break;
	}

      /* If we have found the file, we don't need to search directories
	 again.  */
      if (found)
	entry->flags.search_dirs = FALSE;
      else
	{
	  if (entry->flags.sysrooted
	       && ld_sysroot
	       && IS_ABSOLUTE_PATH (entry->local_sym_name))
	    einfo (_("%P: cannot find %s inside %s\n"),
		   entry->local_sym_name, ld_sysroot);
	  else
	    einfo (_("%P: cannot find %s\n"), entry->local_sym_name);
	  entry->flags.missing_file = TRUE;
	  input_flags.missing_file = TRUE;
	}
    }
}

/* Try to open NAME.  */

static FILE *
try_open (const char *name, bfd_boolean *sysrooted)
{
  FILE *result;

  result = fopen (name, "r");

  if (result != NULL)
    *sysrooted = is_sysrooted_pathname (name);

  if (verbose)
    {
      if (result == NULL)
	info_msg (_("cannot find script file %s\n"), name);
      else
	info_msg (_("opened script file %s\n"), name);
    }

  return result;
}

/* Return TRUE iff directory DIR contains an "ldscripts" subdirectory.  */

static bfd_boolean
check_for_scripts_dir (char *dir)
{
  char *buf;
  struct stat s;
  bfd_boolean res;

  buf = concat (dir, "/ldscripts", (const char *) NULL);
  res = stat (buf, &s) == 0 && S_ISDIR (s.st_mode);
  free (buf);
  return res;
}

/* Return the default directory for finding script files.
   We look for the "ldscripts" directory in:

   SCRIPTDIR (passed from Makefile)
	     (adjusted according to the current location of the binary)
   the dir where this program is (for using it from the build tree).  */

static char *
find_scripts_dir (void)
{
  char *dir;

  dir = make_relative_prefix (program_name, BINDIR, SCRIPTDIR);
  if (dir)
    {
      if (check_for_scripts_dir (dir))
	return dir;
      free (dir);
    }

  dir = make_relative_prefix (program_name, TOOLBINDIR, SCRIPTDIR);
  if (dir)
    {
      if (check_for_scripts_dir (dir))
	return dir;
      free (dir);
    }

  /* Look for "ldscripts" in the dir where our binary is.  */
  dir = make_relative_prefix (program_name, ".", ".");
  if (dir)
    {
      if (check_for_scripts_dir (dir))
	return dir;
      free (dir);
    }

  return NULL;
}

/* If DEFAULT_ONLY is false, try to open NAME; if that fails, look for
   it in directories specified with -L, then in the default script
   directory.  If DEFAULT_ONLY is true, the search is restricted to
   the default script location.  */

static FILE *
ldfile_find_command_file (const char *name,
			  bfd_boolean default_only,
			  bfd_boolean *sysrooted)
{
  search_dirs_type *search;
  FILE *result = NULL;
  char *path;
  static search_dirs_type *script_search;

  if (!default_only)
    {
      /* First try raw name.  */
      result = try_open (name, sysrooted);
      if (result != NULL)
	return result;
    }

  if (!script_search)
    {
      char *script_dir = find_scripts_dir ();
      if (script_dir)
	{
	  search_dirs_type **save_tail_ptr = search_tail_ptr;
	  search_tail_ptr = &script_search;
	  ldfile_add_library_path (script_dir, TRUE);
	  search_tail_ptr = save_tail_ptr;
	}
    }

  /* Temporarily append script_search to the path list so that the
     paths specified with -L will be searched first.  */
  *search_tail_ptr = script_search;

  /* Try now prefixes.  */
  for (search = default_only ? script_search : search_head;
       search != NULL;
       search = search->next)
    {
      path = concat (search->name, slash, name, (const char *) NULL);
      result = try_open (path, sysrooted);
      free (path);
      if (result)
	break;
    }

  /* Restore the original path list.  */
  *search_tail_ptr = NULL;

  return result;
}

/* Open command file NAME.  */

static void
ldfile_open_command_file_1 (const char *name, bfd_boolean default_only)
{
  FILE *ldlex_input_stack;
  bfd_boolean sysrooted;

  ldlex_input_stack = ldfile_find_command_file (name, default_only, &sysrooted);

  if (ldlex_input_stack == NULL)
    {
      bfd_set_error (bfd_error_system_call);
      einfo (_("%P%F: cannot open linker script file %s: %E\n"), name);
      return;
    }

  lex_push_file (ldlex_input_stack, name, sysrooted);

  lineno = 1;

  saved_script_handle = ldlex_input_stack;
}

/* Open command file NAME in the current directory, -L directories,
   the default script location, in that order.  */

void
ldfile_open_command_file (const char *name)
{
  ldfile_open_command_file_1 (name, FALSE);
}

/* Open command file NAME at the default script location.  */

void
ldfile_open_default_command_file (const char *name)
{
  ldfile_open_command_file_1 (name, TRUE);
}

void
ldfile_add_arch (const char *in_name)
{
  char *name = xstrdup (in_name);
  search_arch_type *new_arch = (search_arch_type *)
      xmalloc (sizeof (search_arch_type));

  ldfile_output_machine_name = in_name;

  new_arch->name = name;
  new_arch->next = NULL;
  while (*name)
    {
      *name = TOLOWER (*name);
      name++;
    }
  *search_arch_tail_ptr = new_arch;
  search_arch_tail_ptr = &new_arch->next;

}

/* Set the output architecture.  */

void
ldfile_set_output_arch (const char *string, enum bfd_architecture defarch)
{
  const bfd_arch_info_type *arch = bfd_scan_arch (string);

  if (arch)
    {
      ldfile_output_architecture = arch->arch;
      ldfile_output_machine = arch->mach;
      ldfile_output_machine_name = arch->printable_name;
    }
  else if (defarch != bfd_arch_unknown)
    ldfile_output_architecture = defarch;
  else
    einfo (_("%P%F: cannot represent machine `%s'\n"), string);
}
@


1.67
log
@	PR ld/14357
	* ldmain.c (trace_file_tries): Rename to 'verbose'.
	* ldfile.c: Likewise.
	* ldlang.c: Likewise.
	* ldmain.h: Likewise.
	* lexsup.c: Likewise.
	* emultempl/elf32.em: Likewise.
	* emultemp/spuelf.em: Likewise.
	* pe-dll.c (pe_dll_generate_implib): Only print creation message
	in verbose mode.
@
text
@d605 1
@


1.66
log
@	PR ld/10340
	* ldfile.c (is_sysrooted_pathname): Remove notsame param.
	(ldfile_add_library_path): Don't set sysrooted flag.
	(ldfile_open_file_search): Likewise, and don't copy them.
	(try_open): Delete exten and code handling such.  Add sysrooted
	param and return whether path is in sysroot.
	(ldfile_find_command_file): Delete extend param.  Add sysrooted
	param.  Rename local var.  Update try_open calls.
	(ldfile_open_command_file_1): Pass sysrooted to lex_push_file.
	* ldfile.h (search_dirs_type): Remove sysrooted field.
	* ldlang.c (new_afile): Always set sysrooted from input_flags.
	(load_symbols): Don't set input_flags.sysrooted.
	* ldlang.h (struct lang_input_statement_flags): Revise sysrooted
	comment.
	* ldlex.h (lex_push_file): Update prototype.
	* ldlex.l (sysrooted_stack): New array.
	(EOF): Pop input_flags.sysrooted.
	(lex_push_file): Add sysrooted param.  Save and set
	input_flags.sysrooted.
@
text
@d129 1
a129 1
  if (trace_file_tries)
d468 1
a468 1
  if (trace_file_tries)
@


1.65
log
@	* ldlang.h (struct lang_input_statement_flags): New, extract from..
	(lang_input_statement_type): ..here.  New field "flags".
	(input_flags): Declare.
	(missing_file): Delete.
	* ldmain.h (whole_archive): Delete.
	(add_DT_NEEDED_for_regular, add_DT_NEEDED_for_dynamic): Delete.
	* ld.h (ld_config_type <dynamic_link>): Delete.
	* ldmain.c (whole_archive): Delete.
	(add_DT_NEEDED_for_regular, add_DT_NEEDED_for_dynamic): Delete.
	* ldlang.c (missing_file, ldlang_sysrooted_script): Delete.
	(input_flags): New variable.  Replace all uses of config.dynamic_link,
	missing_file, ldlang_sysrooted_script, whole_archive,
	add_DT_NEEDED_for_regular and add_DT_NEEDED_for_dynamic with fields
	from here.
	* ldfile.c: Likewise.
	* ldgram.y: Likewise.
	* ldmain.c: Likewise.
	* ldwrite.c: Likewise.
	* lexsup.c: Likewise.
	* plugin.c: Likewise.
	* emultempl/aix.em: Likewise.
	* emultempl/armelf.em: Likewise.
	* emultempl/elf32.em: Likewise.
	* emultempl/hppaelf.em: Likewise.
	* emultempl/linux.em: Likewise.
	* emultempl/pe.em: Likewise.
	* emultempl/pep.em: Likewise.
	* emultempl/ppc64elf.em: Likewise.
	* emultempl/scoreelf.em: Likewise.
	* emultempl/spuelf.em: Likewise.
	* emultempl/sunos.em: Likewise.
	* emultempl/vms.em: Likewise.
	* ldlang.c (new_afile): Use memset to init zero fields.
	(load_symbols): Simplify save and restore of flags around command
	file processing.
	* ldfile.c (is_sysrooted_pathname): Tidy.
@
text
@d73 1
a73 1
is_sysrooted_pathname (const char *name, bfd_boolean notsame)
d85 2
a86 4
  if (len == ld_canon_sysroot_len)
    result = !notsame;
  else if (len > ld_canon_sysroot_len
	   && IS_DIR_SEPARATOR (realname[ld_canon_sysroot_len]))
a87 1
      result = TRUE;
d89 1
a91 3
  if (result)
    result = FILENAME_CMP (ld_canon_sysroot, realname) == 0;

d116 1
a116 4
    {
      new_dirs->name = concat (ld_sysroot, name + 1, (const char *) NULL);
      new_dirs->sysrooted = TRUE;
    }
d118 1
a118 4
    {
      new_dirs->name = xstrdup (name);
      new_dirs->sysrooted = is_sysrooted_pathname (name, FALSE);
    }
d356 1
a356 6
	{
	  entry->flags.sysrooted
	    = (IS_ABSOLUTE_PATH (entry->filename)
	       && is_sysrooted_pathname (entry->filename, TRUE));
	  return TRUE;
	}
d369 1
a369 4
	    {
	      entry->flags.sysrooted = search->sysrooted;
	      return TRUE;
	    }
a381 1
	  entry->flags.sysrooted = search->sysrooted;
d456 1
a456 1
/* Try to open NAME; if that fails, try NAME with EXTEN appended to it.  */
d459 1
a459 1
try_open (const char *name, const char *exten)
d465 3
a475 20
  if (result != NULL)
    return result;

  if (*exten)
    {
      char *buff;

      buff = concat (name, exten, (const char *) NULL);
      result = fopen (buff, "r");

      if (trace_file_tries)
	{
	  if (result == NULL)
	    info_msg (_("cannot find script file %s\n"), buff);
	  else
	    info_msg (_("opened script file %s\n"), buff);
	}
      free (buff);
    }

d536 2
a537 2
   directory, without and with EXTEND appended.  If DEFAULT_ONLY is
   true, the search is restricted to the default script location.  */
d540 3
a542 2
ldfile_find_command_file (const char *name, const char *extend,
			  bfd_boolean default_only)
d546 1
a546 1
  char *buffer;
d552 1
a552 1
      result = try_open (name, "");
d578 3
a580 3
      buffer = concat (search->name, slash, name, (const char *) NULL);
      result = try_open (buffer, extend);
      free (buffer);
d597 3
a599 1
  ldlex_input_stack = ldfile_find_command_file (name, "", default_only);
d607 1
a607 1
  lex_push_file (ldlex_input_stack, name);
@


1.64
log
@	PR ld/13343
	* ld.h (parsing_defsym): Delete.
	* ldexp.c (exp_intop, exp_bigintop, exp_relop): Set type.filename.
	(fold_binary, fold_name, exp_fold_tree_1, exp_get_vma, exp_get_fill,
	exp_get_abs_int): Add tree arg for %S in error messages.  Don't
	fudge lineno.
	(exp_binop, exp_unop, exp_nameop, exp_assop, exp_assert): Copy
	type.filename from sub-tree.
	(exp_trinop): Likewise, and use "cond" rather than "lhs".
	* ldexp.h (node_type): Add filename field to struct.
	* ldfile.c (ldfile_input_filename): Delete.  Remove all refs.
	* ldfile.h (ldfile_input_filename): Delete.
	* ldgram.y (phdr_type, phdr_qualifiers, yyerror): Add NULL arg for
	%S in error messages.
	* ldemul.c (syslib_default, hll_default): Likewise.
	* ldlang.c (lang_memory_region_lookup, lang_memory_region_alias,
	lang_get_regions, lang_new_phdr): Likewise.
	(lang_size_sections_1): Pass addr_tree for %S.
	* ldlex.h (lex_redirect): Update prototype.
	(ldlex_filename): Declare.
	* ldlex.l (<EOF>): Don't set ldfile_input_filename.
	(lex_redirect): Add fake_filename and count params.  Push
	fake_filename to file_name_stack and init lineno from count.
	(ldlex_filename): New function.
	(lex_warn_invalid): Use above.
	* ldmain.c (main): Update lex_redirect call.
	* ldmisc.c (vfinfo <%S>): Take file name and line number from
	etree_type arg, or use current if arg is NULL.
	* lexsup.c (parsing_defsym): Delete.
	(parse_args <OPTION_DEFSYM>): Update lex_redirect call.
@
text
@d75 1
a75 1
  char * realname = ld_canon_sysroot ? lrealpath (name) : NULL;
d79 1
a79 1
  if (! realname)
d82 1
d84 9
d94 2
a95 11
  if (((! notsame && len == ld_canon_sysroot_len)
       || (len >= ld_canon_sysroot_len
	   && IS_DIR_SEPARATOR (realname[ld_canon_sysroot_len])
	   && (realname[ld_canon_sysroot_len] = '\0') == '\0'))
      && FILENAME_CMP (ld_canon_sysroot, realname) == 0)
    result = TRUE;
  else
    result = FALSE;

  if (realname)
    free (realname);
d97 1
d169 1
a169 1
  if (entry->search_dirs_flag || !entry->dynamic)
d183 1
a183 1
		  && entry->search_dirs_flag
d279 1
a279 1
	  if (!entry->dynamic && (entry->the_bfd->flags & DYNAMIC) != 0)
d288 1
a288 1
	  if (entry->search_dirs_flag
d353 1
a353 1
  if (! entry->maybe_archive)
d355 1
a355 1
      if (entry->sysrooted && IS_ABSOLUTE_PATH (entry->filename))
d368 3
a370 2
	  entry->sysrooted = IS_ABSOLUTE_PATH (entry->filename)
	    && is_sysrooted_pathname (entry->filename, TRUE);
d382 1
a382 1
      if (entry->dynamic && ! link_info.relocatable)
d386 1
a386 1
	      entry->sysrooted = search->sysrooted;
d391 1
a391 1
      if (entry->maybe_archive)
d401 1
a401 1
	  entry->sysrooted = search->sysrooted;
d422 1
a422 1
  if (! entry->search_dirs_flag)
d433 2
a434 2
      entry->missing_file = TRUE;
      missing_file = TRUE;
d460 1
a460 1
	entry->search_dirs_flag = FALSE;
d463 1
a463 1
	  if (entry->sysrooted
d470 2
a471 2
	  entry->missing_file = TRUE;
	  missing_file = TRUE;
@


1.63
log
@	PR ld/12365
bfd/
	* elfcode.h (elf_slurp_symbol_table): Put common plugin IR symbols
	in their own common section.
	* elflink.c (elf_link_add_object_symbols): Likewise.
	* linker.c (generic_link_check_archive_element): Don't lose flags
	if common section is pre-existing.
	(_bfd_generic_link_add_one_symbol): Likewise.
ld/
	* ldfile.c (ldfile_try_open_bfd): Move code creating and switching
	to plugin IR BFD..
	* ldmain.c (add_archive_element): ..and similar code here..
	* plugin.c (plugin_maybe_claim): ..to here.  New function.
	(plugin_call_claim_file): Make static.
	(asymbol_from_plugin_symbol): Set ELF st_shndx for common syms.
	(plugin_multiple_common): New function.
	(plugin_call_all_symbols_read): Hook in plugin_multiple_common.
	* plugin.h (plugin_call_claim_file): Don't declare.
	(plugin_maybe_claim): Declare.
@
text
@d3 1
a3 1
   2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011
a42 1
const char * ldfile_input_filename;
a639 1
  ldfile_input_filename = name;
@


1.62
log
@	PR ld/12365
	PR ld/12672
bfd/
	* bfd.c (BFD_PLUGIN): Define.
	(BFD_FLAGS_SAVED, BFD_FLAGS_FOR_BFD_USE_MASK): Add BFD_PLUGIN.
	* bfd-in2.h: Regenerate.
	* elflink.c (elf_link_output_extsym): Strip undefined plugin syms.
	* opncls.c (bfd_make_readable): Don't lose original bfd flags.
ld/
	* ldfile.c (ldfile_try_open_bfd): Don't attempt any plugin action
	when no_more_claiming.
	* ldmain.c (add_archive_element): Likewise.
	(multiple_definition): Remove plugin_multiple_definition call.
	(notice): Remove plugin_notice call.
	* ldlang.c (lang_list_insert_after, void lang_list_remove_tail): Move.
	Delete prototype.
	(plugin_insert): New static var.
	(open_input_bfds): Only rescan libs after plugin insert point.
	(lang_gc_sections): Omit plugin claimed files.
	(lang_process): Set plugin_insert.  Only rescan when plugin adds
	objects.
	* plugin.h (no_more_claiming): Declare.
	(plugin_notice, plugin_multiple_definition): Don't declare.
	* plugin.c: Formatting.
	(orig_notice_all, orig_allow_multiple_defs, orig_callbacks,
	plugin_callbacks): New static vars.
	(no_more_claiming): Make global.
	(plugin_cached_allow_multiple_defs): Delete.
	(plugin_get_ir_dummy_bfd): Set SEC_EXCLUDE on dummy .text section,
	use newer bfd_make_section variant.  Make COMMON section too.
	Error handling.  Correct setting of gp size.
	(asymbol_from_plugin_symbol): Properly cast last arg of concat.
	(message): Likewise for ACONCAT.
	(asymbol_from_plugin_symbol): Use our COMMON section.
	(get_symbols): When report_plugin_symbols, show visibility too.
	(init_non_ironly_hash): Move.  Don't test non_ironly_hash.
	(plugin_load_plugins): Save state of linker callbacks, set up to
	call plugin_notice instead.  Call init_non_ironly_hash here.
	(plugin_call_all_symbols_read): Set plugin_multiple_definition in
	plugin callbacks.
	(plugin_notice): Rewrite.
	(plugin_multiple_definition): Make static, call original callback.
ld/testsuite/
	* ld-plugin/plugin-7.d: Adjust for plugin changes.
	* ld-plugin/plugin-8.d: Likewise.
	* ld-plugin/plugin.exp: Pass --verbose=2 for visibility test, and
	compare ld output to..
	* ld-plugin/plugin-12.d: New.
@
text
@d3 2
a4 1
   2003, 2004, 2005, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
a323 1
	  int claimed = 0;
d329 1
a329 23
	  /* We create a dummy BFD, initially empty, to house
	     whatever symbols the plugin may want to add.  */
	  file.handle = plugin_get_ir_dummy_bfd (attempt, entry->the_bfd);
	  if (plugin_call_claim_file (&file, &claimed))
	    einfo (_("%P%F: %s: plugin reported error claiming file\n"),
		   plugin_error_plugin ());
	  /* fd belongs to us, not the plugin; but we don't need it.  */
	  close (fd);
	  if (claimed)
	    {
	      /* Discard the real file's BFD and substitute the dummy one.  */
	      bfd_close (entry->the_bfd);
	      entry->the_bfd = file.handle;
	      entry->claimed = TRUE;
	      bfd_make_readable (entry->the_bfd);
	    }
	  else
	    {
	      /* If plugin didn't claim the file, we don't need the dummy
		 bfd.  Can't avoid speculatively creating it, alas.  */
	      bfd_close_all_done (file.handle);
	      entry->claimed = FALSE;
	    }
@


1.61
log
@2011-02-28  Kai Tietz  <kai.tietz@@onevision.com>

	* emultempl/beos.em (sort_by_file_name): Use filename_(n)cmp.
	* emultempl/elf32.em (gld${EMULATION_NAME}_vercheck):
	Likewise.
	(gld${EMULATION_NAME}_stat_needed): Likewise.
	(gld${EMULATION_NAME}_check_needed): Likewise.
	* emultempl/pe.em (gld_${EMULATION_NAME}_after_open): Likewise.
	(gld_${EMULATION_NAME}_unrecognized_file): Likewise.
	* emultempl/pep.em (gld_${EMULATION_NAME}_after_open): Likewise.
	(gld_${EMULATION_NAME}_unrecognized_file): Likewise.
	* ldfile.c (ldfile_open_file): Likewise.
	* ldlang.c (wild_sort): Likewise.
	(lookup_name): Likewise.
	(check_excluded_libs): Likewise.
	* ldmisc.c (vfinfo): Likewise.
	* pe-dll.c (libnamencmp): Likewise.
	(auto_export): Likewise.
	(pe_dll_generate_implib): Likewise.
	* testplug.c (onclaim_file): Likewise.
@
text
@d316 2
a317 1
      && plugin_active_plugins_p ())
@


1.60
log
@Replace is_archive with maybe_archive.

2010-12-05  H.J. Lu  <hongjiu.lu@@intel.com>

	* ldfile.c (ldfile_open_file_search): Check maybe_archive instead
	of is_archive.
	* emultempl/aix.em: Likewise.
	* emultempl/elf32.em: Likewise.
	* emultempl/linux.em: Likewise.
	* emultempl/pe.em: Likewise.
	* emultempl/pep.em: Likewise.
	* emultempl/sunos.em: Likewise.
	* emultempl/vms.em: Likewise.

	* ldlang.c (new_afile): Set maybe_archive instead of is_archive..

	* ldlang.h (lang_input_statement_struct): Replace is_archive
	with maybe_archive.
@
text
@d446 1
a446 1
      if (strcmp (entry->filename, entry->local_sym_name) != 0)
@


1.59
log
@Re-indent plugin code.

2010-11-21  H.J. Lu  <hongjiu.lu@@intel.com>

	* ldfile.c: Re-indent plugin code.
	* ldlang.c: Likewise.
	* ldmain.c: Likewise.
	* plugin.c: Likewise.
@
text
@d373 1
a373 1
  if (! entry->is_archive)
d410 1
a410 1
      if (entry->is_archive)
@


1.58
log
@	* plugin.h (plugin_active_plugins_p): New prototype.
	(is_ir_dummy_bfd): Delete prototype.
	* plugin.c: Fix formatting issues.
	(is_ir_dummy_bfd): Make static.
	(plugin_active_plugins_p): New function.
	* ldfile.c (ldfile_try_open_bfd): Use it to save work if no plugins
	are loaded.  Always close file descriptor after claim handler returns.
	* ldmain.c (add_archive_element): Likewise.
@
text
@d316 1
a316 1
	&& plugin_active_plugins_p ())
d333 1
a333 1
	      plugin_error_plugin ());
d347 1
a347 1
	         bfd.  Can't avoid speculatively creating it, alas.  */
@


1.58.2.1
log
@backport from mainline
@
text
@d316 1
a316 1
      && plugin_active_plugins_p ())
d333 1
a333 1
		   plugin_error_plugin ());
d347 1
a347 1
		 bfd.  Can't avoid speculatively creating it, alas.  */
d373 1
a373 1
  if (! entry->maybe_archive)
d410 1
a410 1
      if (entry->maybe_archive)
@


1.58.2.2
log
@	PR ld/12696
	PR ld/12672
	PR ld/12507
	PR ld/12365
	PR 10549
Backport fixes for these PRs.
@
text
@d316 1
a316 2
      && plugin_active_plugins_p ()
      && !no_more_claiming)
d322 1
d328 23
a350 1
	  plugin_maybe_claim (&file, entry);
@


1.57
log
@Add compressed debug section support to binutils and ld.

bfd/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>
	    Cary Coutant  <ccoutant@@google.com>

	* archive.c (bfd_openr_next_archived_file): Copy BFD_COMPRESS
	and BFD_DECOMPRESS.

	* bfd.c (BFD_COMPRESS): New.
	(BFD_DECOMPRESS): Likewise.
	(BFD_FLAGS_SAVED): Likewise.
	(bfd_preserve_save): Replace BFD_IN_MEMORY with BFD_FLAGS_SAVED.

	* compress.c (bfd_uncompress_section_contents): Removed.
	(get_uncompressed_size): New.
	(decompress_contents): Likewise.
	(bfd_compress_section_contents): Likewise.
	(bfd_get_full_section_contents): Likewise.
	(bfd_is_section_compressed): Likewise.
	(bfd_init_section_decompress_status): Likewise.
	(bfd_init_section_compress_status): Likewise.

	* dwarf2.c (dwarf_debug_sections): New.
	(dwarf_debug_section_enum): Likewise.
	(read_section): Remove section_name and compressed_section_name.
	Add dwarf_debug_section_enum.  Try compressed debug section.
	(read_indirect_string): Updated.
	(read_abbrevs): Likewise.
	(decode_line_info): Likewise.
	(read_debug_ranges): Likewise.
	(find_line): Updated.

	* ecoff.c (bfd_debug_section): Add compress_status and
	compressed_size.

	* elf.c (_bfd_elf_make_section_from_shdr): Call
	bfd_is_section_compressed to check if a DWARF debug section is
	compressed.  Call bfd_init_section_compress_status or
	bfd_init_section_decompress_status if needed.

	* elflink.c (elf_link_input_bfd): Replace bfd_get_section_contents
	with bfd_get_full_section_contents.
	* merge.c (_bfd_add_merge_section): Likewise.
	* reloc.c (bfd_generic_get_relocated_section_contents): Likewise.
	* simple.c (bfd_simple_get_relocated_section_contents): Likewise.

	* elfxx-target.h (TARGET_BIG_SYM): Allow BFD_COMPRESS and
	BFD_DECOMPRESS.
	(TARGET_LITTLE_SYM): Likewise.

	* libbfd-in.h (dwarf_debug_section): New.
	(dwarf_debug_sections): Likewise.

	* libbfd.c (_bfd_generic_get_section_contents): Issue an error
	when getting contents on compressed/decompressed section.

	* section.c (COMPRESS_SECTION_NONE): New.
	(COMPRESS_SECTION_DONE): Likewise.
	(DECOMPRESS_SECTION_SIZED): Likewise.
	(BFD_FAKE_SECTION): Add compress_status and compressed_size.
	(bfd_malloc_and_get_section): Replace bfd_get_section_contents
	with bfd_get_full_section_contents.

	* bfd-in2.h: Regenerated.
	* libbfd.h: Likewise.

binutils/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* addr2line.c (process_file): Set BFD_DECOMPRESS.

	* objcopy.c (do_debug_sections): New.
	(OPTION_COMPRESS_DEBUG_SECTIONS): New.
	(OPTION_DECOMPRESS_DEBUG_SECTIONS): Likewise.
	(copy_options): Add OPTION_COMPRESS_DEBUG_SECTIONS and
	OPTION_DECOMPRESS_DEBUG_SECTIONS.
	(copy_usage): Add --compress-debug-sections and
	--decompress-debug-sections.
	(copy_file): Set BFD_COMPRESS or BFD_DECOMPRESS.
	(copy_section): Replace bfd_get_section_contents with
	bfd_get_full_section_contents.
	(copy_main): Handle OPTION_COMPRESS_DEBUG_SECTIONS and
	OPTION_DECOMPRESS_DEBUG_SECTIONS.  Check do_debug_sections to
	rename DWARF debug sections.

	* objdump.c (load_specific_debug_section): Replace
	bfd_get_section_contents with bfd_get_full_section_contents.
	Remove bfd_uncompress_section_contents.
	(dump_section): Replace bfd_get_section_contents with
	bfd_get_full_section_contents.
	(display_file): Set BFD_DECOMPRESS if needed.

	* readelf.c (uncompress_section_contents): Set buffer to NULL
	to indiate decompression failure.
	(load_specific_debug_section): Always call
	uncompress_section_contents.

	* doc/binutils.texi: Document --compress-debug-sections and
	--decompress-debug-sections.

binutils/testsuite/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* binutils-all/compress.exp: New.
	* binutils-all/dw2-1.S: Likewise.
	* binutils-all/dw2-2.S: Likewise.
	* binutils-all/libdw2-compressed.out: Likewise.
	* binutils-all/libdw2.out: Likewise.

gas/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* write.c (compress_debug): Optimize section flags check.

gas/testsuite/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* elf/dwarf2-1.s: Replace .zdebug_abbrev section with
	.debug_abbrev section.
	* elf/dwarf2-2.3: Likewise.

	* elf/dwarf2-1.d: Pass --compress-debug-sections to assembler.
	Updated.
	* elf/dwarf2-2.d: Likewise.

	* gas/i386/i386.exp: Remove xfail on dw2-compress-2 and
	x86-64-dw2-compress-2.

ld/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* ldfile.c (ldfile_try_open_bfd): Set BFD_DECOMPRESS after
	bfd_openr returns.
	* emultempl/elf32.em (gld${EMULATION_NAME}_try_needed): Likewise.

	* scripttempl/elf.sc: Include compressed DWARF debug sections.

ld/testsuite/

2010-10-29  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-elf/compress.exp: New.
	* ld-elf/compress1.s: Likewise.
	* ld-elf/compress1a.d: Likewise.
	* ld-elf/compress1b.d: Likewise.
	* ld-elf/compress1c.d: Likewise.
@
text
@d315 2
a316 1
  if (bfd_check_format (entry->the_bfd, bfd_object))
d334 2
d346 2
a347 2
	      /* If plugin didn't claim the file, we don't need the fd or the
	         dummy bfd.  Can't avoid speculatively creating it, alas.  */
a348 1
	      close (fd);
@


1.56
log
@	* ldfile.c (find_scripts_dir): Don't look in absolute SCRIPTDIR.
@
text
@d153 3
@


1.55
log
@Applied patch series for LD plugin interface (six parts).

[PATCH] Add infrastructure for plugin API; functionality to follow.

    include/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 1/6).
	* plugin-api.h (LDPT_GNU_LD_VERSION): New ld_plugin_tag enum member.

    ld/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 1/6).
	* configure.in: Add AC_CHECKs for file io and dlfcn headers and
	functions and AC_SEARCH for -ldl.
	(enable_plugins): New shell variable set if above tests find dlopen
	functionality.
	(ENABLE_PLUGINS): Add related automake conditional.
	* configure: Regenerate.
	* config.in: Likewise.
	* Makefile.am (PLUGIN_C): Declare plugin C source file, conditional
	on ENABLE_PLUGINS being defined.
	(PLUGIN_H): Likewise for header file.
	(PLUGIN_OBJECT): Likewise for object file.
	(PLUGIN_CFLAGS): Likewise -D flag required to compile plugin support.
	(AM_CPPFLAGS): Use PLUGIN_CFLAGS.
	(CFILES): Use PLUGIN_C.
	(HFILES): Use PLUGIN_H.
	(OFILES): Use PLUGIN_OBJECT.
	(ld_new_SOURCES): Use PLUGIN_C.
	(noinst_LTLIBRARIES)[ENABLE_PLUGINS]: Declare test plugin.
	(libldtestplug_la_SOURCES)[ENABLE_PLUGINS]: Add automake definition
	for test plugin.
	(libldtestplug_la_CFLAGS)[ENABLE_PLUGINS]: Likewise.
	(libldtestplug_la_LDFLAGS)[ENABLE_PLUGINS]: Likewise.
	* Makefile.in: Regenerate.
	* sysdep.h: Include stdarg.h, unistd.h and one of fcntl.h or
	sys/file.h where available.  Include dlfcn.h when ENABLE_PLUGINS.
	(O_RDONLY): Supply default definition likewise to bfd's sysdep.h
	(O_WRONLY): Likewise.
	(O_RDWR): Likewise.
	(O_ACCMODE): Likewise.
	(O_BINARY): Likewise.
	(SEEK_SET): Likewise.
	(SEEK_CUR): Likewise.
	(SEEK_END): Likewise.
	* ldmisc.c (vfinfo): Make non-static.  Add %p format char.
	* ldmisc.h (vfinfo): Declare extern prototype.
	* lexsup.c (enum option_values)[ENABLE_PLUGINS]: Add new entries for
	OPTION_PLUGIN and OPTION_PLUGIN_OPT.
	(ld_options[])[ENABLE_PLUGINS]: Add option data for the above two.
	(parse_args)[ENABLE_PLUGINS]: Handle them, and load all plugins once
	option parsing is complete.
	* ldmain.c (main)[ENABLE_PLUGINS]: Call plugin cleanup hooks just
	after lang_finish.
	* plugin.c: New source file.
	* plugin.h: Likewise new header.
	* testplug.c: New source file.

    ld/testsuite/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 1/6).
	* ld-bootstrap/bootstrap.exp: Skip static tests also if LD plugins
	are enabled.
	* lib/ld-lib.exp (proc regexp_diff): Extend verbose debug output.
	(proc set_file_contents): Write a file with the supplied content.
	(run_ld_link_tests): Add new 'ld' action to test linker output.
	(proc check_plugin_api_available): Return true if linker under test
	supports the plugin API.
	* ld-plugin/func.c: New test source file.
	* ld-plugin/main.c: Likewise.
	* ld-plugin/text.c: Likewise.
	* ld-plugin/plugin-1.d: New dump test output pattern script.
	* ld-plugin/plugin-2.d: Likewise.
	* ld-plugin/plugin-3.d: Likewise.
	* ld-plugin/plugin-4.d: Likewise.
	* ld-plugin/plugin-5.d: Likewise.
	* ld-plugin/plugin.exp: New test control script.
---
[PATCH] Implement claim file and all symbols read hooks and add symbols callback.

  ld/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 2/6).
	* ldfile.c (ldfile_try_open_bfd)[ENABLE_PLUGINS]: Don't return early
	during compat checks if they pass, instead offer any successfully
	opened and accepted file to the plugin claim file hooks chain.  Create
	a dummy bfd to accept symbols added by the plugin, if the plugin
	claims the file.
	* ldlang.c (lang_process)[ENABLE_PLUGINS]: Call plugin all symbols
	read hook chain before ldemul_after_open.
	* ldlang.h (struct lang_input_statement_struct): Add new single-bit
	'claimed' flag.
	* plugin.c (IRONLY_SUFFIX): New macro for dummy bfd file suffix.
	(IRONLY_SUFFIX_LEN): Length of the above string.
	(plugin_get_ir_dummy_bfd): New function to create the dummy bfd used
	to store symbols for ir-only files.
	(is_ir_dummy_bfd): New function to check if a bfd is ir-only.
	(asymbol_from_plugin_symbol): New function converts symbol formats.
	(add_symbols): Call it to convert plugin syms to bfd syms and add
	them to the dummy bfd.
	* plugin.h: Add missing include guards.
	(plugin_get_ir_dummy_bfd): Add prototype.
	(is_ir_dummy_bfd): Likewise.
	* testplug.c (TV_MESSAGE): New helper macro.
	(struct claim_file): New struct.
	(claim_file_t): New typedef.
	(tag_names[]): Make static and const.
	(claimfiles_list): New variable.
	(claimfiles_tail_chain_ptr): Likewise.
	(last_claimfile): Likewise.
	(record_claim_file): Record a file to claim on a singly-linked list.
	(parse_symdefstr): Parse an ASCII representation of a symbol from a
	plugin option into the fields of a struct ld_plugin_symbol.
	(record_claimed_file_symbol):  Use it to parse plugin option for
	adding a symbol.
	(parse_option): Parse claim file and add symbol options.
	(dump_tv_tag): Use TV_MESSAGE.
	(onload): Likewise.
	(onclaim_file): Make static.  Use TV_MESSAGE.  Scan list of files to
	claim and claim this file if required, adding any symbols specified.
	(onall_symbols_read): Make static and use TV_MESSAGE.
	(oncleanup): Likewise.

  ld/testsuite/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 2/6).
	* ld-plugin/plugin-3.d: Enable regexes for new functionality.
	* ld-plugin/plugin-5.d: Likewise.
	* ld-plugin/plugin-6.d: New testcase.
	* ld-plugin/plugin-7.d: Likewise.
	* ld-plugin/plugin.exp: Use 'nm' on compiled test objects to determine
	whether symbols in plugin arguments need an underscore prefix.  Add
	new plugin-6.d and plugin-7.d testcases.
---
[PATCH] Implement get symbols callback.

  ld/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 3/6).
	* ldmain.c (notice)[ENABLE_PLUGINS]: Call plugin_notice.
	* plugin.c (non_ironly_hash): Add new bfd hash table.
	(plugin_load_plugins): Exit early if no plugins to load.  If plugins
	do load successfully, set notice_all flag in link info.
	(get_symbols): Implement.
	(plugin_load_plugins): Exit early if no plugins to load, else after
	loading plugins successfully enable notice_all mode.
	(init_non_ironly_hash): Lazily init non_ironly_hash table.
	(plugin_notice): Record symbols referenced from non-IR files in the
	non_ironly_hash.  Suppress tracing, cref generation and nocrossrefs
	tracking for symbols from dummy IR bfds.
	* plugin.h: Fix formatting.
	(plugin_notice): Add prototype.
	* testplug.c (dumpresolutions): New global var.
	(parse_options): Accept "dumpresolutions".
	(onall_symbols_read): Get syms and dump resolutions if it was given.

  ld/testsuite/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 3/6).
	* ld-plugin/plugin-8.d: New testcase.
	* ld-plugin/plugin.exp: Invoke it.
---
[PATCH] Implement add input file, add input lib and set extra lib path callbacks.

  ld/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 4/6).
	* ldlang.c (lang_process)[ENABLE_PLUGINS]: Move invocation of
	plugin_call_all_symbols_read to before setting of gc_sym_list, and
	open any new input files that may have been added during it.
	* ldmain.c (multiple_definition)[ENABLE_PLUGINS]: Call out to
	plugin_multiple_definition and let it have first say over what to do
	with the clashing definitions.
	* plugin.c (no_more_claiming): New boolean variable.
	(plugin_cached_allow_multiple_defs): Likewise.
	(add_input_file): Implement.
	(add_input_library): Likewise.
	(set_extra_library_path): Likewise.
	(plugin_call_claim_file): Don't do anything when no_more_claiming set.
	(plugin_call_all_symbols_read): Set it.  Disable link info
	"allow_multiple_definition" flag, but cache its value.
	(plugin_multiple_definition): New function.
	* plugin.h (plugin_multiple_definition): Add prototype.
	* testplug.c (addfile_enum_t): New enumerated typedef.
	(add_file_t): New struct typedef.
	(addfiles_list): New variable.
	(addfiles_tail_chain_ptr): Likewise.
	(record_add_file): New function.
	(parse_option): Parse "add:", "lib:" and "dir:" options and call it.
	(onall_symbols_read): Iterate the list of new files, libs and dirs,
	adding them.

  ld/testsuite/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 4/6).
	* ld-plugin/plugin-9.d: New testcase.
	* ld-plugin/plugin.exp: Invoke it.
---
[PATCH] Add ELF symbol visibility support to plugin interface.

  ld/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 5/6).
	* plugin.c (asymbol_from_plugin_symbol): If the bfd is an ELF bfd,
	find the elf symbol data and set the visibility in the st_other field.

  ld/testsuite/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 5/6).
	* ld-plugin/plugin-ignore.d: New dump test control script.
	* ld-plugin/plugin-vis-1.d: Likewise.
	* ld-plugin/plugin.exp: Add list of ELF-only tests and run them if
	testing on an ELF target.
---
[PATCH] Add archive support to plugin interface.

  bfd/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 6/6).
	* aoutx.h (aout_link_check_ar_symbols): Take new "subsbfd" reference
	parameter and pass it when invoking add_archive_element callback.
	(aout_link_check_archive_element): Handle substitute bfd if it
	was set during add_archive_element callback in the above.
	* cofflink.c (coff_link_check_ar_symbols): Take new "subsbfd" reference
	parameter and pass it when invoking add_archive_element callback.
	(coff_link_check_archive_element): Handle substitute bfd if it
	was set during add_archive_element callback in the above.
	* ecoff.c (read_ext_syms_and_strs): New function holds symbol-reading
	code factored-out from ecoff_link_check_archive_element.
	(reread_ext_syms_and_strs): Clear old symbols and call it.
	(ecoff_link_check_archive_element):  Use the above.  Handle substitute
	BFD if one is set by add_archive_element callback.
	(ecoff_link_add_archive_symbols): Likewise allow bfd substitution.
	* elflink.c (elf_link_add_archive_symbols): Likewise.
	* linker.c (generic_link_check_archive_element): Likewise.
	* pdp11.c (aout_link_check_ar_symbols): Take new "subsbfd" reference
	parameter and pass it when invoking add_archive_element callback.
	(aout_link_check_archive_element): Handle substitute bfd if it was
	set during add_archive_element callback in the above.
	* vms-alpha.c (alpha_vms_link_add_archive_symbols): Handle substitute
	BFD if one is set by add_archive_element callback.
	* xcofflink.c (xcoff_link_check_dynamic_ar_symbols): Take new "subsbfd"
	reference parameter and pass it when invoking add_archive_element
	callback.
	(xcoff_link_check_ar_symbols): Likewise.
	(xcoff_link_check_archive_element): Handle bfd substitution if it was
	set by callback in the above.

  include/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 6/6).
	* bfdlink.h (struct_bfd_link_callbacks): Document new argument
	to add_archive_element callback used to return a replacement bfd which
	is to be added to the hash table in place of the original element.

  ld/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 6/6).
	* ldlang.c (load_symbols): Handle bfd subsitution when calling the
	add_archive_element callback.
	* ldmain.c (add_archive_element)[ENABLE_PLUGINS]: Offer the archive
	member to the plugins and if claimed set "subsbfd" output parameter to
	point to the dummy IR-only BFD.

  ld/testsuite/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 6/6).
	* ld-plugin/plugin-10.d: New dump test control script.
	* ld-plugin/plugin-11.d: Likewise.
	* ld-plugin/plugin.exp: Run them.
---
@
text
@a549 1
   SCRIPTDIR (passed from Makefile)
a572 4
  if (check_for_scripts_dir (SCRIPTDIR))
    /* We've been installed normally.  */
    return SCRIPTDIR;

@


1.54
log
@        PR 4437
        * ldfile.c: (ldfile_open_file): Do not stop link upon encountering
        a missing file or library.  Instead mark the entry as missing and
        set the global flag to indicate that missing files were
        encountered.
        * ldlang.c (missing_files): New exported variable.
        (load_symbols): Skip loading if the file is missing.
        (open_input_bfds): Terminate link if any input files were
        missing.
        * ldlang.h (struct lang_input_statement_struct): Add missing_file
        field.
        Add export of missing_file variable.
@
text
@d37 4
d157 6
a162 1
     a dynamic object.  */
d271 1
a271 1
	      return TRUE;
d301 48
d350 2
@


1.53
log
@        Updated sources to avoid using the identifier name "new", which is a
        keyword in c++.

        * bfd/aoutx.h (NAME (aout, make_empty_symbol)): Rename variable
        new to new_symbol.
        * bfd/coffgen.c (coff_make_empty_symbol)
        (coff_bfd_make_debug_symbol): Rename variable new to new_symbol.
        * bfd/cpu-ia64-opc.c (ext_reg, ins_imms_scaled): Rename variable
        new to new_insn.
        * bfd/doc/chew.c (newentry, add_intrinsic): Rename variable new to
        new_d.
        * bfd/ecoff.c (_bfd_ecoff_make_empty_symbol): Rename variable new
        to new_symbol.
        * bfd/elf32-m68k.c (elf_m68k_get_got_entry_type): Rename argument
        new to new_reloc.
        * bfd/hash.c (bfd_hash_lookup): Rename variable new to new_string.
        * bfd/ieee.c (ieee_make_empty_symbol): Rename variable new to
        new_symbol.
        * bfd/linker.c (bfd_new_link_order): Rename variable new to
        new_lo.
        * bfd/mach-o.c (bfd_mach_o_sizeof_headers): Rename variable new to
        symbol.
        * bfd/oasys.c (oasys_make_empty_symbol): Rename variable new to
        new_symbol_type.
        * bfd/pdp11.c (NAME (aout, make_empty_symbol)): Rename variable
        new to new_symbol_type.
        * bfd/plugin.c (bfd_plugin_make_empty_symbol): Rename variable new
        to new_symbol.
        * bfd/rs6000-core.c (CoreHdr, VmInfo): Rename union member new to
        new_dump.
        (read_hdr, rs6000coff_core_p)
        (rs6000coff_core_file_matches_executable_p)
        (rs6000coff_core_file_failing_command)
        (rs6000coff_core_file_failing_signal): Updated function to use new
        union member name.
        * bfd/som.c (som_make_empty_symbol): Rename variable new to
        new_symbol_type.
        * bfd/syms.c (_bfd_generic_make_empty_symbol): Rename variable new
        to new_symbol.
        * bfd/tekhex.c (first_phase, tekhex_make_empty_symbol): Rename
        variable new to new_symbol.
        * binutils/nlmconv.c (main): Rename variable new to new_name.
        * gas/config/tc-arm.c (insert_reg_alias): Rename variable new to
        new_reg.
        * gas/config/tc-dlx.c (parse_operand): Rename variable new to
        new_pos.
        * gas/config/tc-ia64.c (ia64_gen_real_reloc_type): Rename variable
        new to newr.
        * gas/config/tc-mcore.c (parse_exp, parse_imm): Rename variable
        new to new_pointer.
        * gas/config/tc-microblaze.c (parse_exp, parse_imm, check_got):
        Change name from new to new_pointer.
        * gas/config/tc-or32.c (parse_operand): Rename variable new to
        new_pointer.
        * gas/config/tc-pdp11.c (md_assemble): Rename variable new to
        new_pointer.
        * gas/config/tc-pj.c (alias): Change argument new to new_name.
        * gas/config/tc-score.c (s3_build_score_ops_hsh): Rename variable
        new to new_opcode. (s3_build_dependency_insn_hsh) Rename variable
        new to new_i2n. (s3_convert): Rename variables old and new to
        r_old and r_new.
        * gas/config/tc-score7.c (s7_build_score_ops_hsh): Rename variable
        new to new_opcode. (s7_build_dependency_insn_hsh): Rename variable
        new to new_i2d. (s7_b32_relax_to_b16, s7_convert_frag): Rename
        variables old and new to r_old and r_new.
        * gas/config/tc-sh.c (parse_exp): Rename variable new to
        new_pointer.
        * gas/config/tc-sh64.c (shmedia_parse_exp): Rename variable new to
        new_pointer.
        * gas/config/tc-tic4x.c (tic4x_operand_parse): Rename variable new
        to new_pointer.
        * gas/config/tc-z8k.c (parse_exp): Rename variable new to
        new_pointer.
        * gas/listing.c (listing_newline): Rename variable new to new_i.
        * ld/ldexp.c (exp_intop, exp_bigintop, exp_relop, exp_binop)
        (exp_trinop, exp_unop, exp_nameop, exp_assop): Rename variable new
        to new_e.
        * ld/ldfile.c (ldfile_add_library_path): Rename variable new to
        new_dirs. (ldfile_add_arch): Rename variable new to new_arch.
        * ld/ldlang.c (new_statement, lang_final, lang_add_wild)
        (lang_target, lang_add_fill, lang_add_data, lang_add_assignment)
        (lang_add_insert): Rename variable new to new_stmt. (new_afile):
        Added missing cast. (lang_memory_region_lookup): Rename variable
        new to new_region. (init_os): Rename variable new to
        new_userdata. (lang_add_section): Rename variable new to
        new_section. (ldlang_add_undef): Rename variable new to
        new_undef. (realsymbol): Rename variable new to new_name.
        * opcodes/z8kgen.c (internal, gas): Rename variable new to new_op.

        Updated sources to avoid using the identifier name "template",
        which is a keyword in c++.

        * bfd/elf32-arm.c (struct stub_def): Rename member template to
        template_sequence. (arm_build_one_stub,
        find_stub_size_and_template, arm_size_one_stub, arm_map_one_stub):
        Rename variable template to template_sequence.
        * bfd/elfxx-ia64.c (elfNN_ia64_relax_br, elfNN_ia64_relax_brl):
        Rename variable template to template_val.
        * gas/config/tc-arm.c (struct asm_cond, struct asm_psr, struct
        asm_barrier_opt): Change member template to
        template_name. (md_begin): Update code to reflect new member
        names.
        * gas/config/tc-i386.c (struct templates, struct _i386_insn)
        (match_template, cpu_flags_match, match_reg_size, match_mem_size)
        (operand_size_match, md_begin, i386_print_statistics, pi)
        (build_vex_prefix, md_assemble, parse_insn, optimize_imm)
        (optimize_disp): Updated code to use new names. (parse_insn):
        Added casts.
        * gas/config/tc-ia64.c (dot_template, emit_one_bundle): Updated
        code to use new names.
        * gas/config/tc-score.c (struct s3_asm_opcode): Renamed member
        template to template_name. (s3_parse_16_32_inst, s3_parse_48_inst,
        s3_do_macro_ldst_label, s3_build_score_ops_hsh): Update code to
        use new names.
        * gas/config/tc-score7.c (struct s7_asm_opcode): Renamed member
        template to template_name. (s7_parse_16_32_inst,
        s7_do_macro_ldst_label, s7_build_score_ops_hsh): Update code to
        use new names.
        * gas/config/tc-tic30.c (md_begin, struct tic30_insn)
        (md_assemble): Update code to use new names.
        * gas/config/tc-tic54x.c (struct _tic54x_insn, md_begin)
        (optimize_insn, tic54x_parse_insn, next_line_shows_parallel):
        Update code to use new names.
        * include/opcode/tic30.h (template): Rename type template to
        insn_template. Updated code to use new name.
        * include/opcode/tic54x.h (template): Rename type template to
        insn_template.
        * opcodes/cris-dis.c (bytes_to_skip): Update code to use new name.
        * opcodes/i386-dis.c (putop): Update code to use new name.
        * opcodes/i386-gen.c (process_i386_opcodes): Update code to use
        new name.
        * opcodes/i386-opc.h (struct template): Rename struct template to
        insn_template. Update code accordingly.
        * opcodes/i386-tbl.h (i386_optab): Update type to use new name.
        * opcodes/ia64-dis.c (print_insn_ia64): Rename variable template
        to template_val.
        * opcodes/tic30-dis.c (struct instruction, get_tic30_instruction):
        Update code to use new name.
        * opcodes/tic54x-dis.c (has_lkaddr, get_insn_size)
        (print_parallel_instruction, print_insn_tic54x, tic54x_get_insn):
        Update code to use new name.
        * opcodes/tic54x-opc.c (tic54x_unknown_opcode, tic54x_optab):
        Update type to new name.
@
text
@d3 1
a3 1
   2003, 2004, 2005, 2007, 2008, 2009 Free Software Foundation, Inc.
d366 4
a369 1
/* Open the input file specified by ENTRY.  */
d381 1
d383 1
a383 1
	einfo (_("%F%P: %s (%s): No such file: %E\n"),
d386 4
a389 1
	einfo (_("%F%P: %s: No such file: %E\n"), entry->local_sym_name);
d416 3
a418 1
      else if (entry->sysrooted
d421 7
a427 4
	einfo (_("%F%P: cannot find %s inside %s\n"),
	       entry->local_sym_name, ld_sysroot);
      else
	einfo (_("%F%P: cannot find %s\n"), entry->local_sym_name);
@


1.52
log
@	PR ld/10047
	* ldfile.c (find_scripts_dir): Use make_relative_prefix to find
	ldscripts in build tree.  Don't repeat search for ../lib/ldscripts.
@
text
@d101 1
a101 1
  search_dirs_type *new;
d106 5
a110 5
  new = xmalloc (sizeof (search_dirs_type));
  new->next = NULL;
  new->cmdline = cmdline;
  *search_tail_ptr = new;
  search_tail_ptr = &new->next;
d116 2
a117 2
      new->name = concat (ld_sysroot, name + 1, (const char *) NULL);
      new->sysrooted = TRUE;
d121 2
a122 2
      new->name = xstrdup (name);
      new->sysrooted = is_sysrooted_pathname (name, FALSE);
d618 2
a619 1
  search_arch_type *new = xmalloc (sizeof (search_arch_type));
d623 2
a624 2
  new->name = name;
  new->next = NULL;
d630 2
a631 2
  *search_arch_tail_ptr = new;
  search_arch_tail_ptr = &new->next;
@


1.51
log
@2009-04-13  H.J. Lu  <hongjiu.lu@@intel.com>

	* ldfile.c (ldfile_find_command_file): Revert the last change.
@
text
@d3 1
a3 1
   2003, 2004, 2005, 2007, 2008 Free Software Foundation, Inc.
d480 1
a480 3
   the dir where this program is (for using it from the build tree)
   the dir where this program is/../lib
	     (for installing the tool suite elsewhere).  */
d485 1
a485 2
  char *end, *dir;
  size_t dirlen;
d508 7
a514 10
  end = strrchr (program_name, '/');
#ifdef HAVE_DOS_BASED_FILE_SYSTEM
  {
    /* We could have \foo\bar, or /foo\bar.  */
    char *bslash = strrchr (program_name, '\\');

    if (end == NULL || (bslash != NULL && bslash > end))
      end = bslash;
  }
#endif
a515 20
  if (end == NULL)
    /* Don't look for ldscripts in the current directory.  There is
       too much potential for confusion.  */
    return NULL;

  dirlen = end - program_name;
  /* Make a copy of program_name in dir.
     Leave room for later "/../lib".  */
  dir = xmalloc (dirlen + sizeof ("/../lib"));
  strncpy (dir, program_name, dirlen);
  dir[dirlen] = '\0';

  if (check_for_scripts_dir (dir))
    return dir;

  /* Look for "ldscripts" in <the dir where our binary is>/../lib.  */
  strcpy (dir + dirlen, "/../lib");
  if (check_for_scripts_dir (dir))
    return dir;
  free (dir);
@


1.50
log
@2009-04-11  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/10047
	* ldfile.c (ldfile_find_command_file): First try raw name.
@
text
@d545 4
a548 4
/* Try to open NAME; if that fails, look for it in directories specified
   with -L, then in the default script directory, without and with EXTEND
   appended.  If DEFAULT_ONLY is true, the search is restricted to the
   default script location.  */
d559 7
a565 4
  /* First try raw name for uninstalled linker.  */
  result = try_open (name, "");
  if (result != NULL)
    return result;
@


1.49
log
@	* ldfile.c (ldfile_find_command_file): Initialize result.
@
text
@d545 4
a548 4
/* If DEFAULT_ONLY is false, try to open NAME; if that fails, look for
   it in directories specified with -L, then in the default script
   directory, without and with EXTEND appended.  If DEFAULT_ONLY is
   true, the search is restricted to the default script location.  */
d559 4
a562 7
  if (!default_only)
    {
      /* First try raw name.  */
      result = try_open (name, "");
      if (result != NULL)
	return result;
    }
@


1.48
log
@	* ld.texinfo (-L): Mention that -L options do not affect how ld
	searches for a linker script unless -T option is specified.
	* ldfile.c (ldfile_find_command_file): Append the path obtained
	from the program name to the search path instead of
	prepending. Add a new parameter "default_only". Restrict the
	search to the default script location if the new parameter is
	true.
	(ldfile_open_command_file_1): New.
	(ldfile_open_command_file): Call ldfile_open_command_file_1.
	(ldfile_open_default_command_file): New.
@
text
@d555 1
a555 1
  FILE *result;
@


1.47
log
@	PR 6753
	* ldmain.c (check_for_scripts_dir, set_scripts_dir): Delete.
	(main): Don't set_scripts_dir here.
	* ldfile.c (check_for_scripts_dir, find_scripts_dir): New functions,
	largely based on ldmain.c versions.
	(ldfile_find_command_file): Set up search in script dir here without
	affecting library search.
	* Makefile.am (ldmain.o): No need to define SCRIPTDIR.
	(ldfile.o): New rule.
	* Makefile.in: Regenerate.
@
text
@d545 4
a548 3
/* Try to open NAME; if that fails, look for it in the default script
   directory, then in any directories specified with -L, without and
   with EXTEND appended.  */
d551 2
a552 1
ldfile_find_command_file (const char *name, const char *extend)
d559 7
a565 4
  /* First try raw name.  */
  result = try_open (name, "");
  if (result != NULL)
    return result;
a576 4
      if (!script_search)
	script_search = search_head;
      else
	script_search->next = search_head;
d579 4
d584 3
a586 1
  for (search = script_search; search != NULL; search = search->next)
a587 1

d595 3
d601 4
a604 2
void
ldfile_open_command_file (const char *name)
d607 1
a607 1
  ldlex_input_stack = ldfile_find_command_file (name, "");
d623 17
@


1.46
log
@	* ldfile.c (ldfile_open_file_search): Use concat.
	(try_open): Don't use a fixed size pathname buffer.
	(ldfile_find_command_file): Likewise.
	* emultempl/elf32.em (gld${EMULATION_NAME}_open_dynamic_archive): If
	using EXTRA_SHLIB_EXTENSION, don't open twice.
@
text
@d459 89
a547 2
/* Try to open NAME; if that fails, look for it in any directories
   specified with -L, without and with EXTEND appended.  */
d554 2
d559 4
a562 1
  if (result == NULL)
d564 2
a565 2
      /* Try now prefixes.  */
      for (search = search_head; search != NULL; search = search->next)
d567 10
a576 1
	  char *buffer;
d578 9
a586 6
	  buffer = concat (search->name, slash, name, (const char *) NULL);
	  result = try_open (buffer, extend);
	  free (buffer);
	  if (result)
	    break;
	}
@


1.45
log
@include/
	* bfdlink.h (struct bfd_link_hash_table): Delete creator field.
	(struct bfd_link_info): Add output_bfd.
bfd/
	* elflink.c: Replace all accesses to hash->creator field with
	output_bfd->xvec.
	* cofflink.c: Likewise.
	* coff-h8300.c: Likewise.
	* ecoff.c: Likewise.
	* elf32-m68hc1x.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-ppc.c: Likewise.
	* elf64-sparc.c: Likewise.
	* elfxx-mips.c: Likewise.
	* i386linux.c: Likewise.
	* m68klinux.c: Likewise.
	* sparclinux.c: Likewise.
	* sunos.c: Likewise.
	* xcofflink.c: Likewise.
	* linker.c: Likewise.
	(_bfd_link_hash_table_init): Don't store creator.
ld/
	* ldmain.h (output_bfd): Delete.
	* ldmain.c (output_bfd): Delete.
	Replace all occurrences of output_bfd with link_info.output_bfd.
	* ldcref.c: Likewise.
	* ldctor.c: Likewise.
	* ldemul.c: Likewise.
	* ldexp.c: Likewise.
	* ldfile.c: Likewise.
	* ldlang.c: Likewise.
	* ldmisc.c: Likewise.
	* ldwrite.c: Likewise.
	* pe-dll.c: Likewise.
	* emultempl/aix.em: Likewise.
	* emultempl/alphaelf.em: Likewise.
	* emultempl/armcoff.em: Likewise.
	* emultempl/armelf.em: Likewise.
	* emultempl/avrelf.em: Likewise.
	* emultempl/beos.em: Likewise.
	* emultempl/elf-generic.em: Likewise.
	* emultempl/elf32.em: Likewise.
	* emultempl/gld960.em: Likewise.
	* emultempl/hppaelf.em: Likewise.
	* emultempl/irix.em: Likewise.
	* emultempl/linux.em: Likewise.
	* emultempl/lnk960.em: Likewise.
	* emultempl/m68hc1xelf.em: Likewise.
	* emultempl/mmix-elfnmmo.em: Likewise.
	* emultempl/mmo.em: Likewise.
	* emultempl/pe.em: Likewise.
	* emultempl/pep.em: Likewise.
	* emultempl/ppc32elf.em: Likewise.
	* emultempl/ppc64elf.em: Likewise.
	* emultempl/scoreelf.em: Likewise.
	* emultempl/sh64elf.em: Likewise.
	* emultempl/spuelf.em: Likewise.
	* emultempl/sunos.em: Likewise.
	* emultempl/vanilla.em: Likewise.
	* emultempl/vxworks.em: Likewise.
	* emultempl/xtensaelf.em: Likewise.
	* emultempl/z80.em: Likewise.
	* ldlang.c (open_output): Don't return output, instead write
	link_info_output_bfd directly.
	* emultempl/alphaelf.em: Replace occurrences of link_info.hash->creator
	with link_info.output_bfd->xvec.
	* emultempl/hppaelf.em: Likewise.
	* emultempl/ppc32elf.em: Likewise.
	* emultempl/ppc64elf.em: Likewise.
	* emultempl/spuelf.em: Likewise.
@
text
@a345 8
      string = xmalloc (strlen (search->name)
			+ strlen (slash)
			+ strlen (lib)
			+ strlen (entry->filename)
			+ strlen (arch)
			+ strlen (suffix)
			+ 1);

d347 2
a348 2
	sprintf (string, "%s%s%s%s%s%s", search->name, slash,
		 lib, entry->filename, arch, suffix);
d350 2
a351 1
	sprintf (string, "%s%s%s", search->name, slash, entry->filename);
a424 1
  char buff[1000];
d441 3
a443 1
      sprintf (buff, "%s%s", name, exten);
d453 1
a466 1
  char buffer[1000];
d475 1
a475 1
	  sprintf (buffer, "%s%s%s", search->name, slash, name);
d477 1
d479 1
@


1.44
log
@	* ldlang.c (new_afile): Don't pass unadorned NULL to concat.
	* ldfile.c (ldfile_add_library_path): Likewise.
	* emultempl/elf32.em (check_ld_elf_hints, check_ld_so_conf): Likewise.
	* emultempl/lnk960.em (lnk960_before_parse): Likewise.
	* emultempl/spuelf.em (embedded_spu_file): Likewise.
@
text
@d275 1
a275 1
	      && !bfd_arch_get_compatible (check, output_bfd,
d279 1
a279 1
		    && bfd_get_flavour (output_bfd) == bfd_target_xcoff_flavour
@


1.43
log
@Update sources to GPLv3
@
text
@d3 1
a3 1
   2003, 2004, 2005, 2007 Free Software Foundation, Inc.
d116 1
a116 1
      new->name = concat (ld_sysroot, name + 1, NULL);
@


1.42
log
@	* ld.texinfo (--no-warn-search-mismatch): Document.
	* ldfile.c (ldfile_try_open_bfd): Don't warn about skipping
	incompatible libraries if --no-warn-search-mismatch.
	* ld.h (args_type): Add warn_search_mismatch.
	* ldmain.c (main): Init it.
	* lexsup.c (enum option_values): Add OPTION_NO_WARN_SEARCH_MISMATCH.
	(ld_options): Add entry for --no-warn-search-mismatch.
	(parse_args): Handle OPTION_NO_WARN_SEARCH_MISMATCH.
@
text
@d5 1
a5 1
   This file is part of GLD, the Gnu Linker.
d7 1
a7 1
   GLD is free software; you can redistribute it and/or modify
d9 2
a10 2
   the Free Software Foundation; either version 2, or (at your option)
   any later version.
d12 1
a12 1
   GLD is distributed in the hope that it will be useful,
d18 3
a20 5
   along with GLD; see the file COPYING.  If not, write to the Free
   Software Foundation, 51 Franklin Street - Fifth Floor, Boston, MA
   02110-1301, USA.  */

/* ldfile.c:  look after all the file stuff.  */
@


1.41
log
@
bfd/
	Many files: Include sysdep.h before bfd.h.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
binutils/
	* bucumm.h: Split off host dependencies to..
	* sysdep.h: ..here.
	Many files: Include sysdep.h.  Remove duplicate headers and reorder.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
ld/
	Many files: Include sysdep.h first.  Remove duplicate headers.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
opcodes/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* ns32k-dis.c: Include sysdep.h first.
@
text
@d255 4
a258 2
		      einfo (_("%P: skipping incompatible %s when searching for %s\n"),
			     attempt, entry->local_sym_name);
d284 4
a287 2
	      einfo (_("%P: skipping incompatible %s when searching for %s\n"),
		     attempt, entry->local_sym_name);
@


1.40
log
@Update FSF addresses
@
text
@d3 1
a3 1
   2003, 2004, 2005 Free Software Foundation, Inc.
d24 1
a25 1
#include "sysdep.h"
@


1.39
log
@	* ldgram.y (lang_memory_region_type): Make static.
	(ldgram_want_filename): Likewise.
	* ldemul.c (ld_emulation): Make static.
	* ldfile.h (ldfile_find_command_file): Remove extern.
	* ldfile.c (ldfile_find_command_file): Make static.
	* ldlang.h (unique_section_list): Remove extern declaration.
	* ldlang.c (unique_section_list): Make static.
	* mri.h (symbol_truncate): Remove extern declaration.
	* mri.c (symbol_truncate): Make static.
	(order, only_load, address, alias): Likewise.
	(alignment, subalignment): Likewise.
@
text
@d19 2
a20 2
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */
@


1.38
log
@update copyright dates
@
text
@d48 1
a48 1
char * slash = "";
d51 1
a51 1
char * slash = "\\";
d53 1
a53 1
char * slash = "/";
d465 1
a465 1
FILE *
@


1.37
log
@	* ldfile.c: Remove GNU960 conditional code.
	* emultempl/gld960.em: Likewise.
	* emultempl/gld960c.em: Likewise.
	* emultempl/lnk960.em: Likewise.
@
text
@d3 1
a3 1
   2003, 2004 Free Software Foundation, Inc.
@


1.36
log
@	PR 423
	* ldfile.c (ldfile_try_open_bfd): Ensure dynamic objects are
	rejected when linking statically.
@
text
@a509 55
#ifdef GNU960
static char *
gnu960_map_archname (char *name)
{
  struct tabentry { char *cmd_switch; char *arch; };
  static struct tabentry arch_tab[] =
  {
	"",   "",
	"KA", "ka",
	"KB", "kb",
	"KC", "mc",	/* Synonym for MC */
	"MC", "mc",
	"CA", "ca",
	"SA", "ka",	/* Functionally equivalent to KA */
	"SB", "kb",	/* Functionally equivalent to KB */
	NULL, ""
  };
  struct tabentry *tp;

  for (tp = arch_tab; tp->cmd_switch != NULL; tp++)
    {
      if (! strcmp (name,tp->cmd_switch))
	break;
    }

  if (tp->cmd_switch == NULL)
    einfo (_("%P%F: unknown architecture: %s\n"), name);

  return tp->arch;
}

void
ldfile_add_arch (char *name)
{
  search_arch_type *new = xmalloc (sizeof (search_arch_type));

  if (*name != '\0')
    {
      if (ldfile_output_machine_name[0] != '\0')
	{
	  einfo (_("%P%F: target architecture respecified\n"));
	  return;
	}

      ldfile_output_machine_name = name;
    }

  new->next = NULL;
  new->name = gnu960_map_archname (name);
  *search_arch_tail_ptr = new;
  search_arch_tail_ptr = &new->next;
}

#else /* not GNU960 */

a528 1
#endif
@


1.35
log
@        Remove long-obsolete MPW support.
        * mpw-config.in, mpw-make.sed, mac-ld.r: Remove files.
        * Makefile.am (mpw): Remove file-presynthesizing actions.
        * Makefile.in: Likewise.
        * ldfile.c (slash): Remove MPW case.
        * ldlex.l [MPW]: Remove unused definition.
@
text
@d154 2
a155 1
     here.  */
d157 1
a157 1
  if (entry->search_dirs_flag)
d171 1
d265 12
a276 2
	  if ((bfd_arch_get_compatible (check, output_bfd,
					command_line.accept_unknown_input_arch) == NULL)
@


1.34
log
@	* ldfile.c (ldfile_set_output_arch): Add defarch param.
	* ldfile.h (ldfile_set_output_arch): Ditto.
	* emultempl/aix.em (gld${EMULATION_NAME}_before_parse): Use
	ldfile_set_output_arch.
	* emultempl/beos.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* emultempl/elf32.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* emultempl/linux.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* emultempl/mipsecoff.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* emultempl/pe.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* emultempl/sunos.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* ldgram.y: Adjust ldfile_set_output_arch call.
	* emultempl/armcoff.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* emultempl/armelf.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* emultempl/armelf_oabi.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* emultempl/generic.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* emultempl/gld960c.em (gld960_set_output_arch): Ditto.
	* emultempl/m68kcoff.em (gld${EMULATION_NAME}_before_parse): Ditto.
	* emultempl/ticoff.em (gld${EMULATION_NAME}_before_parse): Ditto.
@
text
@a46 1
#ifndef MPW
a55 4
#else /* MPW */
/* The MPW path char is a colon.  */
char * slash = ":";
#endif /* MPW */
@


1.33
log
@Use consistent error messages for missing files.
Detect directories where an ordinary file is expected.
@
text
@d2 2
a3 2
   Copyright 1991, 1992, 1993, 1994, 1995, 1998, 1999, 2000, 2001, 2002, 2003
   Free Software Foundation, Inc.
d84 1
a84 1
  
d249 1
a249 1
		        }
d582 1
a582 1
ldfile_set_output_arch (const char *string)
d592 2
d595 1
a595 3
    {
      einfo (_("%P%F: cannot represent machine `%s'\n"), string);
    }
@


1.32
log
@Convert to C90
@
text
@d377 1
a377 1
	einfo (_("%F%P: cannot open %s for %s: %E\n"),
d380 1
a380 1
	einfo (_("%F%P: cannot open %s: %E\n"), entry->local_sym_name);
@


1.31
log
@Correct spelling of "relocatable".
@
text
@a71 5
static FILE *try_open
  PARAMS ((const char *, const char *));
static bfd_boolean is_sysrooted_pathname
  PARAMS ((const char *, bfd_boolean));

d76 1
a76 3
is_sysrooted_pathname (name, notsame)
     const char *name;
     bfd_boolean notsame;
d106 1
a106 3
ldfile_add_library_path (name, cmdline)
     const char *name;
     bfd_boolean cmdline;
d113 1
a113 1
  new = (search_dirs_type *) xmalloc (sizeof (search_dirs_type));
d136 2
a137 3
ldfile_try_open_bfd (attempt, entry)
     const char *attempt;
     lang_input_statement_type *entry;
d291 4
a294 5
ldfile_open_file_search (arch, entry, lib, suffix)
     const char *arch;
     lang_input_statement_type *entry;
     const char *lib;
     const char *suffix;
d324 1
a324 3
  for (search = search_head;
       search != (search_dirs_type *) NULL;
       search = search->next)
d337 7
a343 7
      string = (char *) xmalloc (strlen (search->name)
				 + strlen (slash)
				 + strlen (lib)
				 + strlen (entry->filename)
				 + strlen (arch)
				 + strlen (suffix)
				 + 1);
d367 1
a367 2
ldfile_open_file (entry)
     lang_input_statement_type *entry;
d388 1
a388 3
      for (arch = search_arch_head;
	   arch != (search_arch_type *) NULL;
	   arch = arch->next)
d420 1
a420 3
try_open (name, exten)
     const char *name;
     const char *exten;
d459 1
a459 3
ldfile_find_command_file (name, extend)
     const char *name;
     const char *extend;
d467 1
a467 1
  if (result == (FILE *) NULL)
d470 1
a470 3
      for (search = search_head;
	   search != (search_dirs_type *) NULL;
	   search = search->next)
d484 1
a484 2
ldfile_open_command_file (name)
     const char *name;
d489 1
a489 1
  if (ldlex_input_stack == (FILE *) NULL)
d505 1
a505 2
gnu960_map_archname (name)
     char *name;
d535 1
a535 2
ldfile_add_arch (name)
     char *name;
d537 1
a537 2
  search_arch_type *new =
    (search_arch_type *) xmalloc ((bfd_size_type) (sizeof (search_arch_type)));
d550 1
a550 1
  new->next = (search_arch_type *) NULL;
d559 1
a559 2
ldfile_add_arch (in_name)
     const char *in_name;
d562 1
a562 2
  search_arch_type *new =
    (search_arch_type *) xmalloc (sizeof (search_arch_type));
d567 1
a567 1
  new->next = (search_arch_type *) NULL;
d582 1
a582 2
ldfile_set_output_arch (string)
     const char *string;
@


1.30
log
@2003-04-18  H.J. Lu <hjl@@gnu.org>

	* ldfile.c (ldfile_add_library_path): Remove the unused
	variable.
@
text
@d341 1
a341 1
      if (entry->dynamic && ! link_info.relocateable)
@


1.29
log
@Fix memory leaks
@
text
@a117 1
  char *newname;
@


1.28
log
@ldmain.c (ld_canon_sysroot, ld_canon_sysroot_len): Define. (main): Initialize them.
ldfile.c: Include pathnames.h. (is_sysrooted_pathname): New. (ldfile_add_library_path): Use it.
  (ldfile_open_file_search): Likewise.  Use IS_ABSOLUTE_PATH.
  Don't search_dirs if given an absolute pathname.
  (ldfile_open_file): Issue error message for sysrooted	absolute pathnames.
@
text
@d109 3
d118 1
a124 1
  new->name = name;
d131 1
a131 1
  if (new->name[0] == '=')
d133 1
a133 1
      new->name = concat (ld_sysroot, &new->name[1], NULL);
d137 4
a140 1
    new->sysrooted = is_sysrooted_pathname (new->name, FALSE);
@


1.27
log
@	* ldfile.c (ldfile_try_open_bfd): Pop lexer start condition after
	eof.
@
text
@d5 1
a5 1
This file is part of GLD, the Gnu Linker.
d7 14
a20 14
GLD is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GLD is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GLD; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.  */
d38 1
d40 3
a42 3
const char *ldfile_input_filename;
bfd_boolean ldfile_assumed_script = FALSE;
const char *ldfile_output_machine_name = "";
d45 1
a45 1
search_dirs_type *search_head;
d49 1
a49 1
char *slash = "";
d52 1
a52 1
char *slash = "\\";
d54 1
a54 1
char *slash = "/";
d59 1
a59 1
char *slash = ":";
d62 2
a63 5
/* LOCAL */

static search_dirs_type **search_tail_ptr = &search_head;

typedef struct search_arch {
d68 1
d72 36
a107 1
static FILE *try_open PARAMS ((const char *name, const char *exten));
d134 1
a134 1
    new->sysrooted = FALSE;
d308 1
a308 1
      if (entry->sysrooted && entry->filename[0] == '/')
d321 2
a322 1
	  entry->sysrooted = FALSE;
d325 3
a355 8
      else if (entry->filename[0] == '/' || entry->filename[0] == '.'
#if defined (__MSDOS__) || defined (_WIN32)
	       || entry->filename[0] == '\\'
	       || (ISALPHA (entry->filename[0])
	           && entry->filename[1] == ':')
#endif
	  )
	strcpy (string, entry->filename);
d418 5
@


1.26
log
@* ldfile.h (struct search_dirs): Added sysrooted field.
* ldlang.h (struct lang_input_statement_struct): Likewise.
* ldfile.c (ldfile_add_library_path): Mark sysrooted paths.
(ldfile_open_file_search): Look for sysrooted filename starting
with / in ld_sysroot instead of in the current directory.  Clear
sysrooted flag if it's found in the current directory.  Set it
from the search directory's sysrooted flag where it is found
otherwise.
* ldlang.c (ldlang_sysrooted_script): New static variable.
(new_afile): Mark search_file_enums as sysrooted if
ldlang_sysrooted_script.
(load_symbols): Set ldlang_sysrooted_script according to the
script's sysrooted field while processing it.
* ld.texinfo: Document INPUT behavior in sysroot.
@
text
@d223 1
@


1.25
log
@	* Makefile.am (eelf32iq10.c): Fix tab/whitespace mixup.

	* Makefile.am (ldmain.o): Add @@TARGET_SYSTEM_ROOT_DEFINE@@.
	(GENSCRIPTS): Add @@use_sysroot@@.
	* Makefile.in: Regenerated.
	* configure.host: Move setting of NATIVE_LIB_DIRS to...
	* configure.tgt: ... here.  Use ${target} instead of ${host}
	for NATIVE_LIB_DIRS.
	* configure.in: Add --with-sysroot.
	* configure: Regenerated.
	* genscripts.sh: Accept use_sysroot option.  Set new variables
	NATIVE and USE_LIBPATH.  Prepend "=" to directory names if
	$use_sysroot.  Don't search $tool_lib if $use_sysroot.
	* ldfile.c (ldfile_add_library_path): Handle leading '='.
	* ldmain.c (TARGET_SYSTEM_ROOT): Define if not defined.
	(ld_sysroot): New variable.
	(main): Initialize ld_sysroot.
	* ldmain.h (ld_sysroot): New extern.
	* emultempl/elf32.em: Use NATIVE and USE_LIBPATH instead of
	searching $EMULATION_LIBPATH.
	(gld${EMULATION_NAME}_add_sysroot): New function.
	(gld${EMULATION_NAME}_check_ld_so_conf): Use it.  Honor ld_sysroot.
	(gld${EMULATION_NAME}_after_open): Likewise.  Only search
	environment variables if $NATIVE.
	* ld.texinfo (Options): Mention "=" prefix in the description of -L.
	* NEWS: Mention --with-sysroot.

	* emulparams/elf32bmipn32-defs.sh: Set NATIVE and LIBPATH_SUFFIX
	instead of setting LIB_PATH.
	* emulparams/elf32ppc.sh: Likewise.
	* emulparams/elf64_s390.sh: Likewise.
	* emulparams/elf64_sparc.sh: Likewise.
	* emulparams/elf64ppc.sh: Likewise.
	* emulparams/elf_x86_64.sh: Likewise.

	* emulparams/elf64_aix.sh: Add "=" prefixes to LIB_PATH.
	* emulparams/elf64hppa.sh: Add "=" prefixes to LIB_PATH.
@
text
@d95 6
a100 1
    new->name = concat (ld_sysroot, &new->name[1], NULL);
d273 16
a288 2
      if (ldfile_try_open_bfd (entry->filename, entry))
	return TRUE;
d300 4
a303 1
	    return TRUE;
d331 1
@


1.24
log
@	* ldfile.c: Fix comment typos.
	* ldlang.c: Likewise.
	* mri.c: Likewise.
	* pe-dll.c: Likewise.
@
text
@d2 1
a2 1
   Copyright 1991, 1992, 1993, 1994, 1995, 1998, 1999, 2000, 2001, 2002
d91 5
@


1.23
log
@Change linker's default behaviour - it will now reject binary files whoes
architecture it does not recognise, unless it has explicitly told to accept
them.
@
text
@d405 1
a405 1
   specified with -L, without and with EXTEND apppended.  */
@


1.22
log
@s/boolean/bfd_boolean/ s/true/TRUE/ s/false/FALSE/.  Simplify
comparisons of bfd_boolean vars with TRUE/FALSE.  Formatting.
@
text
@d228 3
a230 2
	  if ((bfd_arch_get_compatible (check, output_bfd) == NULL)
	      /* XCOFF archives can have 32 and 64 bit objects */
@


1.21
log
@	* emultempl/aix.em: Use include <> for generated headers.
	* emultempl/beos.em: Likewise.
	* emultempl/elf32.em: Likewise.
	* emultempl/pe.em: Likewise.
	* ldctor.c: Likewise.
	* ldexp.c: Likewise.
	* ldfile.c: Likewise.
	* ldlang.c: Likewise.
	* ldlex.c: Likewise.
	* ldlex.l: Likewise.
	* ldmain.c: Likewise.
	* ldmisc.c: Likewise.
	* ldwrite.c: Likewise.
	* lexsup.c: Likewise.
	* mri.c: Likewise.
	* pe-dll.c: Likewise.
@
text
@d40 1
a40 1
boolean ldfile_assumed_script = false;
d78 1
a78 1
     boolean cmdline;
d95 1
a95 1
boolean
d114 1
a114 1
      return false;
d145 2
a146 2
		              
		  ldfile_assumed_script = true;
d213 1
a213 1
		  ldfile_assumed_script = false;
d222 1
a222 1
		      return false;
d225 1
a225 1
	      return true;
d238 1
a238 1
	      return false;
d243 1
a243 1
  return true;
d249 1
a249 1
boolean
d263 1
a263 1
	return true;
d275 1
a275 1
	    return true;
d303 1
a303 1
	  return true;
d309 1
a309 1
  return false;
d334 1
a334 1
      boolean found = false;
d357 1
a357 1
	entry->search_dirs_flag = false;
@


1.20
log
@	* ldfile.c (ldfile_try_open_bfd): When searching skip linker scripts if
	they have OUTPUT_FORMAT not matching actual output format.
	* ldlang.c (lang_get_output_target): New function.
	(open_output): Use it.
	* ldlang.h (lang_get_output_target): New prototype.
@
text
@d34 1
a34 1
#include "ldgram.h"
@


1.19
log
@	* ldfile.c (ldfile_try_open_bfd): Formatting.
@
text
@d134 93
a226 1
	    return true;
@


1.19.2.1
log
@Merge from mainline.
@
text
@d134 1
a134 93
	    {
	      if (check == entry->the_bfd
		  && bfd_get_error () == bfd_error_file_not_recognized
		  && ! ldemul_unrecognized_file (entry))
		{
		  int token, skip = 0;
		  char *arg, *arg1, *arg2, *arg3;
		  extern FILE *yyin;

		  /* Try to interpret the file as a linker script.  */
		  ldfile_open_command_file (attempt);
		              
		  ldfile_assumed_script = true;
		  parser_input = input_selected;
		  ldlex_both ();
		  token = INPUT_SCRIPT;
		  while (token != 0)
		    {
		      switch (token)
			{
			case OUTPUT_FORMAT:
			  if ((token = yylex ()) != '(')
			    continue;
			  if ((token = yylex ()) != NAME)
			    continue;
			  arg1 = yylval.name;
			  arg2 = NULL;
			  arg3 = NULL;
			  token = yylex ();
			  if (token == ',')
			    {
			      if ((token = yylex ()) != NAME)
				{
				  free (arg1);
				  continue;
				}
			      arg2 = yylval.name;
			      if ((token = yylex ()) != ','
				  || (token = yylex ()) != NAME)
				{
				  free (arg1);
				  free (arg2);
				  continue;
				}
			      arg3 = yylval.name;
			      token = yylex ();
			    }
			  if (token == ')')
			    {
			      switch (command_line.endian)
				{
				default:
				case ENDIAN_UNSET:
				  arg = arg1; break;
				case ENDIAN_BIG:
				  arg = arg2 ? arg2 : arg1; break;
				case ENDIAN_LITTLE:
				  arg = arg3 ? arg3 : arg1; break;
				}
			      if (strcmp (arg, lang_get_output_target ()) != 0)
				skip = 1;
			    }
			  free (arg1);
			  if (arg2) free (arg2);
			  if (arg3) free (arg3);
			  break;
			case NAME:
			case LNAME:
			case VERS_IDENTIFIER:
			case VERS_TAG:
			  free (yylval.name);
			  break;
			case INT:
			  if (yylval.bigint.str)
			    free (yylval.bigint.str);
			  break;
		        }
		      token = yylex ();
		    }
		  ldfile_assumed_script = false;
		  fclose (yyin);
		  yyin = NULL;
		  if (skip)
		    {
		      einfo (_("%P: skipping incompatible %s when searching for %s\n"),
			     attempt, entry->local_sym_name);
		      bfd_close (entry->the_bfd);
		      entry->the_bfd = NULL;
		      return false;
		    }
		}
	      return true;
	    }
@


1.19.2.2
log
@        * emultempl/aix.em: Use include <> for generated headers.
        * emultempl/beos.em: Likewise.
        * emultempl/elf32.em: Likewise.
        * emultempl/pe.em: Likewise.
        * ldctor.c: Likewise.
        * ldexp.c: Likewise.
        * ldfile.c: Likewise.
        * ldlang.c: Likewise.
        * ldlex.c: Likewise.
        * ldlex.l: Likewise.
        * ldmain.c: Likewise.
        * ldmisc.c: Likewise.
        * ldwrite.c: Likewise.
        * lexsup.c: Likewise.
        * mri.c: Likewise.
        * pe-dll.c: Likewise.
@
text
@d34 1
a34 1
#include <ldgram.h>
@


1.18
log
@	* ldexp.c: Replace CONST with const.
	* ldfile.c: Likewise.
	* ldfile.h: Likewise.
	* ldlex.l: Likewise.
	* mri.c: Likewise.
	* pe-dll.h: Likewise.
@
text
@d139 1
a139 2
		    && bfd_get_flavour (output_bfd) ==
		    bfd_target_xcoff_flavour
@


1.17
log
@	* ldemul.c: Fix formatting.
	* ldfile.c: Likewise.
	* pe-dll.c: Likewise.
	* pe-dll.h: Likewise.
@
text
@d425 1
a425 1
     CONST char *in_name;
d450 1
a450 1
     CONST char *string;
@


1.16
log
@XCOFF64 fixes. For setting arch/mach and for R_BR relocations.
@
text
@d139 1
a139 1
		    && bfd_get_flavour (output_bfd) == 
@


1.15
log
@	* ld.h: Fix formatting.
	* ldexp.c: Likewise.
	* ldfile.c: Likewise.
	* ldlang.c: Likewise.
	* ldmain.c: Likewise.
	* lexsup.c: Likewise.
	* pe-dll.c: Likewise.
@
text
@d135 7
a141 1
	  if (bfd_arch_get_compatible (check, output_bfd) == NULL)
@


1.14
log
@2001-11-01  Chris Demetriou  <cgd@@broadcom.com>

        * ld.texinfo (Options): Document new option, -nostdlib.
        * lexsup.c (OPTION_NOSTDLIB): New definition.
        (ld_options): Add entry for "nostdlib".
        (parse_args): Handle OPTIONS_NOSTDLIB.
        * ldfile.c (ldfile_add_library_path): Don't add directories
        to the search path if they weren't specified on the command line
        and -nostdlib was specified.
        * ld.h (ld_config_type): New member only_cmd_line_lib_dirs.
@
text
@d2 1
a2 1
   Copyright 1991, 1992, 1993, 1994, 1995, 1998, 1999, 2000, 2001
d355 1
a355 1
  
@


1.13
log
@Locale changes from Bruno Haible  <haible@@clisp.cons.org>.
@
text
@d82 3
@


1.12
log
@Make --verbose always display linker script
@
text
@d27 1
a38 2
#include <ctype.h>

d192 1
a192 1
	       || (isalpha (entry->filename[0])
d428 1
a428 2
      if (isupper ((unsigned char) *name))
	*name = tolower ((unsigned char) *name);
@


1.11
log
@2001-05-02  H.J. Lu  <hjl@@gnu.org>

	* ldfile.c: Include "libiberty.h".
	* ldlex.l: Likewise.

	* ldmisc.c (buystring): Removed.
	* ldmisc.h: Likewise.

	* ldfile.c: Replace buystring with xstrdup.
	* ldlang.c: Likewise.
	* ldlex.l: Likewise.
	* ldmain.c: Likewise.
	* ldmisc.c: Likewise.
	* lexsup.c: Likewise.
	* mpw-eppcmac.c: Likewise.
@
text
@d353 2
a354 1
  had_script = true;
@


1.10
log
@Fixtypos in ChangeLogs, fix copyright dates in files
@
text
@d36 1
d418 1
a418 1
  char *name = buystring (in_name);
@


1.9
log
@2001-02-20  H.J. Lu  <hjl@@gnu.org>

	* ldfile.c (ldfile_open_file): Set entry->search_dirs_flag to
	false if we found the file.
@
text
@d2 1
a2 1
   Copyright (C) 1991, 92, 93, 94, 95, 98, 99, 2000
@


1.8
log
@2000-10-09  Kazu Hirata  <kazu@@hxi.com>

	* ldcref.c: Fix formatting.
	* ldctor.h: Likewise.
	* ldemul.c: Likewise.
	* ldemul.h: Likewise.
	* ldexp.c: Likewise.
	* ldexp.h: Likewise.
	* ldfile.c: Likewise.
	* ldfile.h: Likewise.
	* ld.h: Likewise.
	* ldlang.c: Likewise.
	* ldlang.h: Likewise.
	* ldmain.c: Likewise.
@
text
@d234 1
d241 3
a243 2
	  if (ldfile_open_file_search (arch->name, entry, "lib", ".a"))
	    return;
d245 3
a247 2
	  if (ldfile_open_file_search (arch->name, entry, ":lib", ".a"))
	    return;
d249 3
a251 2
	  if (ldemul_find_potential_libraries (arch->name, entry))
	    return;
d254 6
a259 1
      einfo (_("%F%P: cannot find %s\n"), entry->local_sym_name);
@


1.8.2.1
log
@Merge from mainline.
@
text
@d2 1
a2 1
   Copyright 1991, 1992, 1993, 1994, 1995, 1998, 1999, 2000, 2001
a35 1
#include "libiberty.h"
a233 1
      boolean found = false;
d240 2
a241 3
	  found = ldfile_open_file_search (arch->name, entry, "lib", ".a");
	  if (found)
	    break;
d243 2
a244 3
	  found = ldfile_open_file_search (arch->name, entry, ":lib", ".a");
	  if (found)
	    break;
d246 2
a247 3
	  found = ldemul_find_potential_libraries (arch->name, entry);
	  if (found)
	    break;
d250 1
a250 6
      /* If we have found the file, we don't need to search directories
	 again.  */
      if (found)
	entry->search_dirs_flag = false;
      else
	einfo (_("%F%P: cannot find %s\n"), entry->local_sym_name);
d408 1
a408 1
  char *name = xstrdup (in_name);
@


1.7
log
@2000-09-29  Kazu Hirata  <kazu@@hxi.com>

	* ldcref.c: Fix formatting.
	* ldctor.c: Likewise.
	* ldemul.c: Likewise.
	* ldexp.c: Likewise.
	* ldfile.c: Likewise.
	* ldlang.c: Likewise.
@
text
@d65 1
a65 2
typedef struct search_arch
{
d167 1
a167 1
       search != (search_dirs_type *)NULL;
d306 1
a306 1
  /* First try raw name */
d308 1
a308 1
  if (result == (FILE *)NULL)
d310 1
a310 1
      /* Try now prefixes */
d312 1
a312 1
	   search != (search_dirs_type *)NULL;
d315 1
a315 1
	  sprintf (buffer,"%s%s%s", search->name, slash, name);
d333 1
a333 1
  if (ldlex_input_stack == (FILE *)NULL)
d373 1
a373 1
    einfo (_("%P%F: unknown architecture: %s\n"),name);
d383 1
a383 1
    (search_arch_type *)xmalloc ((bfd_size_type)(sizeof (search_arch_type)));
d396 1
a396 1
  new->next = (search_arch_type*)NULL;
d402 1
a402 1
#else	/* not GNU960 */
d406 1
a406 1
     CONST char * in_name;
d415 1
a415 1
  new->next = (search_arch_type*)NULL;
d428 2
a429 1
/* Set the output architecture */
@


1.6
log
@Fix formatting and add missing new lkine at end of error message
@
text
@d65 1
a65 1
typedef struct search_arch 
d67 1
a67 1
  char *name; 
d73 1
a73 1
 
d169 1
a169 1
       search = search->next) 
d192 2
a193 2
	       || entry->filename[0] == '\\' 
	       || (isalpha (entry->filename[0]) 
d250 1
a250 1
      
d266 1
a266 1
  
d282 1
a282 1
      
d317 1
a317 1
	  
d323 1
a323 1
  
d339 1
a339 1
  
d341 1
a341 1
  
a365 1
  
d375 1
a375 1
  
a385 1

d393 1
a393 1
      
a403 1

@


1.5
log
@	* ldfile.c (ldfile_try_open_bfd): Don't crash if we see an empty
	archive.
@
text
@d22 1
a22 6
/*
 ldfile.c

 look after all the file stuff

 */
d57 1
a57 1
/* The MPW path char is a colon. */
d135 1
a135 1
	      einfo (_("%P: skipping incompatible %s when searching for %s"),
d230 1
a230 1
	einfo(_("%F%P: cannot open %s: %E\n"), entry->local_sym_name);
d250 1
d266 1
d282 1
d308 14
a321 9
  result = try_open(name,"");
  if (result == (FILE *)NULL) {
    /* Try now prefixes */
    for (search = search_head;
	 search != (search_dirs_type *)NULL;
	 search = search->next) {
      sprintf(buffer,"%s%s%s", search->name, slash, name);
      result = try_open(buffer, extend);
      if (result)break;
d323 1
a323 1
  }
d332 1
a332 1
  ldlex_input_stack = ldfile_find_command_file(name, "");
d334 7
a340 5
  if (ldlex_input_stack == (FILE *)NULL) {
    bfd_set_error (bfd_error_system_call);
    einfo(_("%P%F: cannot open linker script file %s: %E\n"),name);
  }
  lex_push_file(ldlex_input_stack, name);
a346 4




d348 3
a350 4
static
char *
gnu960_map_archname( name )
char *name;
d353 2
a354 1
  static struct tabentry arch_tab[] = {
d368 9
a376 9
  for ( tp = arch_tab; tp->cmd_switch != NULL; tp++ ){
    if ( !strcmp(name,tp->cmd_switch) ){
      break;
    }
  }

  if ( tp->cmd_switch == NULL ){
    einfo(_("%P%F: unknown architecture: %s\n"),name);
  }
a379 2


d381 2
a382 2
ldfile_add_arch(name)
char *name;
d385 1
a385 1
    (search_arch_type *)xmalloc((bfd_size_type)(sizeof(search_arch_type)));
d388 9
a396 4
  if (*name != '\0') {
    if (ldfile_output_machine_name[0] != '\0') {
      einfo(_("%P%F: target architecture respecified\n"));
      return;
a397 2
    ldfile_output_machine_name = name;
  }
d400 1
a400 1
  new->name = gnu960_map_archname( name );
a402 1

d412 1
a412 1
  char *name = buystring(in_name);
d437 1
a437 1
  const bfd_arch_info_type *arch = bfd_scan_arch(string);
d439 10
a448 8
  if (arch) {
    ldfile_output_architecture = arch->arch;
    ldfile_output_machine = arch->mach;
    ldfile_output_machine_name = arch->printable_name;
  }
  else {
    einfo(_("%P%F: cannot represent machine `%s'\n"), string);
  }
@


1.4
log
@Add support for WinCE based toolchains.
@
text
@d1 3
a3 1
/* Copyright (C) 1991, 92, 93, 94, 95, 98, 99, 2000 Free Software Foundation, Inc.
d134 1
a134 3
      if (! bfd_check_format (check, bfd_object))
	return true;
      if (bfd_arch_get_compatible (check, output_bfd) == NULL)
d136 10
a145 5
	  einfo (_("%P: skipping incompatible %s when searching for %s"),
		 attempt, entry->local_sym_name);
	  bfd_close (entry->the_bfd);
	  entry->the_bfd = NULL;
	  return false;
@


1.3
log
@	* ldfile.c: Revert patch of 1999-07-08.
	(ldfile_try_open_bfd): If we are searching for the file, skip
	files with an incompatible architecture.
@
text
@d1 1
a1 1
/* Copyright (C) 1991, 92, 93, 94, 95, 98, 1999 Free Software Foundation, Inc.
a76 3
static boolean ldfile_open_file_search
  PARAMS ((const char *arch, lang_input_statement_type *,
	   const char *lib, const char *suffix));
d150 1
a150 1
static boolean
d247 2
@


1.2
log
@Jakub Jelinek  <jj@@ultra.linux.cz>
        * ldfile.c (ldfile_open_file_search): Skip libraries made for
        incompatible architectures in the search path. Let the user know
        about any such skips.
@
text
@d114 1
a114 3
  if (entry->the_bfd != NULL)
    return true;
  else
d120 28
d206 2
a207 29
	  bfd * arfile = NULL;

	  if (bfd_check_format (entry->the_bfd, bfd_archive))
	    {
	      /* We treat an archive as compatible if it empty
	         or has at least one compatible object.  */
	      arfile = bfd_openr_next_archived_file (entry->the_bfd, NULL);

	      if (!arfile)
		arfile = output_bfd;
	      else
		while (arfile
		       && !(bfd_check_format (arfile, bfd_object)
			    && bfd_arch_get_compatible (arfile, output_bfd)))
	          arfile = bfd_openr_next_archived_file (entry->the_bfd, arfile);
	    }
	  else if (bfd_arch_get_compatible (entry->the_bfd, output_bfd))
	    arfile = output_bfd;
	    
	  if (arfile)
	    {
	      entry->filename = string;
	      return true;
	    }

	  info_msg (_("%s is for an incompatible architecture -- skipped\n"),
		    string);
	  bfd_close(entry->the_bfd);
	  entry->the_bfd = NULL;
@


1.1
log
@Initial revision
@
text
@d180 29
a208 2
	  entry->filename = string;
	  return true;
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

