head	1.45;
access;
symbols
	binutils-2_24-branch:1.44.0.2
	binutils-2_24-branchpoint:1.44
	binutils-2_21_1:1.37.2.1
	binutils-2_23_2:1.43
	binutils-2_23_1:1.43
	binutils-2_23:1.43
	binutils-2_23-branch:1.43.0.2
	binutils-2_23-branchpoint:1.43
	binutils-2_22_branch:1.40.0.4
	binutils-2_22:1.40
	binutils-2_22-branch:1.40.0.2
	binutils-2_22-branchpoint:1.40
	binutils-2_21:1.37
	binutils-2_21-branch:1.37.0.2
	binutils-2_21-branchpoint:1.37
	binutils-2_20_1:1.36
	binutils-2_20:1.36
	binutils-arc-20081103-branch:1.36.0.10
	binutils-arc-20081103-branchpoint:1.36
	binutils-2_20-branch:1.36.0.8
	binutils-2_20-branchpoint:1.36
	dje-cgen-play1-branch:1.36.0.6
	dje-cgen-play1-branchpoint:1.36
	arc-20081103-branch:1.36.0.4
	arc-20081103-branchpoint:1.36
	binutils-2_19_1:1.36
	binutils-2_19:1.36
	binutils-2_19-branch:1.36.0.2
	binutils-2_19-branchpoint:1.36
	binutils-2_18:1.34
	binutils-2_18-branch:1.34.0.2
	binutils-2_18-branchpoint:1.34
	binutils-csl-coldfire-4_1-32:1.28.2.1
	binutils-csl-sourcerygxx-4_1-32:1.28.2.1
	binutils-csl-innovasic-fido-3_4_4-33:1.28.2.1
	binutils-csl-sourcerygxx-3_4_4-32:1.24
	binutils-csl-coldfire-4_1-30:1.28.2.1
	binutils-csl-sourcerygxx-4_1-30:1.28.2.1
	binutils-csl-coldfire-4_1-28:1.28.2.1
	binutils-csl-sourcerygxx-4_1-29:1.28.2.1
	binutils-csl-sourcerygxx-4_1-28:1.28.2.1
	binutils-csl-arm-2006q3-27:1.28.2.1
	binutils-csl-sourcerygxx-4_1-27:1.28.2.1
	binutils-csl-arm-2006q3-26:1.28.2.1
	binutils-csl-sourcerygxx-4_1-26:1.28.2.1
	binutils-csl-sourcerygxx-4_1-25:1.28.2.1
	binutils-csl-sourcerygxx-4_1-24:1.28.2.1
	binutils-csl-sourcerygxx-4_1-23:1.28.2.1
	binutils-csl-sourcerygxx-4_1-21:1.28.2.1
	binutils-csl-arm-2006q3-21:1.28.2.1
	binutils-csl-sourcerygxx-4_1-22:1.28.2.1
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.28.2.1
	binutils-csl-sourcerygxx-4_1-20:1.28.2.1
	binutils-csl-arm-2006q3-19:1.28.2.1
	binutils-csl-sourcerygxx-4_1-19:1.28.2.1
	binutils-csl-sourcerygxx-4_1-18:1.28.2.1
	binutils-csl-renesas-4_1-9:1.28.2.1
	binutils-csl-sourcerygxx-3_4_4-25:1.24
	binutils-csl-renesas-4_1-8:1.28.2.1
	binutils-csl-renesas-4_1-7:1.28.2.1
	binutils-csl-renesas-4_1-6:1.28.2.1
	binutils-csl-sourcerygxx-4_1-17:1.28.2.1
	binutils-csl-sourcerygxx-4_1-14:1.28.2.1
	binutils-csl-sourcerygxx-4_1-15:1.28.2.1
	binutils-csl-sourcerygxx-4_1-13:1.28.2.1
	binutils-2_17:1.29
	binutils-csl-sourcerygxx-4_1-12:1.28.2.1
	binutils-csl-sourcerygxx-3_4_4-21:1.28.2.1
	binutils-csl-wrs-linux-3_4_4-24:1.24
	binutils-csl-wrs-linux-3_4_4-23:1.24
	binutils-csl-sourcerygxx-4_1-9:1.28.2.1
	binutils-csl-sourcerygxx-4_1-8:1.28.2.1
	binutils-csl-sourcerygxx-4_1-7:1.28.2.1
	binutils-csl-arm-2006q1-6:1.28.2.1
	binutils-csl-sourcerygxx-4_1-6:1.28.2.1
	binutils-csl-wrs-linux-3_4_4-22:1.24
	binutils-csl-coldfire-4_1-11:1.28.2.1
	binutils-csl-sourcerygxx-3_4_4-19:1.28.2.1
	binutils-csl-coldfire-4_1-10:1.28.2.1
	binutils-csl-sourcerygxx-4_1-5:1.28.2.1
	binutils-csl-sourcerygxx-4_1-4:1.28
	binutils-csl-wrs-linux-3_4_4-21:1.24
	binutils-csl-morpho-4_1-4:1.28
	binutils-csl-sourcerygxx-3_4_4-17:1.28
	binutils-csl-wrs-linux-3_4_4-20:1.24
	binutils-2_17-branch:1.29.0.2
	binutils-2_17-branchpoint:1.29
	binutils-csl-2_17-branch:1.28.0.2
	binutils-csl-2_17-branchpoint:1.28
	binutils-csl-gxxpro-3_4-branch:1.24.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.24
	binutils-2_16_1:1.24
	binutils-csl-arm-2005q1b:1.24
	binutils-2_16:1.24
	binutils-csl-arm-2005q1a:1.24
	binutils-csl-arm-2005q1-branch:1.24.0.4
	binutils-csl-arm-2005q1-branchpoint:1.24
	binutils-2_16-branch:1.24.0.2
	binutils-2_16-branchpoint:1.24
	csl-arm-2004-q3d:1.20
	csl-arm-2004-q3:1.20
	binutils-2_15:1.18
	binutils-2_15-branchpoint:1.18
	csl-arm-2004-q1a:1.18
	csl-arm-2004-q1:1.18
	binutils-2_15-branch:1.18.0.6
	cagney_bfdfile-20040213-branch:1.18.0.4
	cagney_bfdfile-20040213-branchpoint:1.18
	cagney_bigcore-20040122-branch:1.18.0.2
	cagney_bigcore-20040122-branchpoint:1.18
	csl-arm-2003-q4:1.18
	binutils-2_14:1.16
	binutils-2_14-branch:1.16.0.2
	binutils-2_14-branchpoint:1.16
	binutils-2_13_2_1:1.11.2.1
	binutils-2_13_2:1.11.2.1
	binutils-2_13_1:1.11.2.1
	binutils-2_13:1.11
	binutils-2_13-branchpoint:1.11
	binutils-2_13-branch:1.11.0.2
	binutils-2_12_1:1.9
	binutils-2_12:1.9
	binutils-2_12-branch:1.9.0.2
	binutils-2_12-branchpoint:1.9
	cygnus_cvs_20020108_pre:1.8
	binutils-2_11_2:1.4.2.1
	binutils-2_11_1:1.4.2.1
	binutils-2_11:1.4
	x86_64versiong3:1.4
	binutils-2_11-branch:1.4.0.2
	binutils-2_10_1:1.3
	binutils-2_10:1.3
	binutils-2_10-branch:1.3.0.2
	binutils-2_10-branchpoint:1.3
	binutils_latest_snapshot:1.45
	repo-unification-2000-02-06:1.3
	binu_ss_19990721:1.1.1.1
	binu_ss_19990602:1.1.1.1
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@ * @;


1.45
date	2013.10.10.22.50.40;	author roland;	state Exp;
branches;
next	1.44;

1.44
date	2013.01.10.20.08.02;	author hjl;	state Exp;
branches
	1.44.2.1;
next	1.43;

1.43
date	2012.04.03.03.37.26;	author vapier;	state Exp;
branches;
next	1.42;

1.42
date	2012.02.18.11.55.45;	author hp;	state Exp;
branches;
next	1.41;

1.41
date	2012.02.17.14.09.57;	author amodra;	state Exp;
branches;
next	1.40;

1.40
date	2011.05.23.06.13.35;	author amodra;	state Exp;
branches;
next	1.39;

1.39
date	2011.02.28.18.34.52;	author ktietz;	state Exp;
branches;
next	1.38;

1.38
date	2011.01.14.12.37.17;	author amodra;	state Exp;
branches;
next	1.37;

1.37
date	2010.10.14.01.31.31;	author davek;	state Exp;
branches
	1.37.2.1;
next	1.36;

1.36
date	2008.08.17.03.12.50;	author amodra;	state Exp;
branches;
next	1.35;

1.35
date	2008.02.15.03.35.53;	author amodra;	state Exp;
branches;
next	1.34;

1.34
date	2007.07.06.14.09.41;	author nickc;	state Exp;
branches;
next	1.33;

1.33
date	2007.04.30.14.06.40;	author amodra;	state Exp;
branches;
next	1.32;

1.32
date	2007.04.26.14.46.59;	author amodra;	state Exp;
branches;
next	1.31;

1.31
date	2007.04.19.10.55.25;	author amodra;	state Exp;
branches;
next	1.30;

1.30
date	2007.04.19.10.45.59;	author amodra;	state Exp;
branches;
next	1.29;

1.29
date	2006.03.31.11.23.55;	author jakub;	state Exp;
branches;
next	1.28;

1.28
date	2005.11.18.04.12.27;	author amodra;	state Exp;
branches
	1.28.2.1;
next	1.27;

1.27
date	2005.10.05.16.12.17;	author hjl;	state Exp;
branches;
next	1.26;

1.26
date	2005.06.03.09.52.50;	author amodra;	state Exp;
branches;
next	1.25;

1.25
date	2005.05.12.07.32.03;	author nickc;	state Exp;
branches;
next	1.24;

1.24
date	2005.03.03.11.51.59;	author amodra;	state Exp;
branches;
next	1.23;

1.23
date	2005.01.10.15.45.00;	author nickc;	state Exp;
branches;
next	1.22;

1.22
date	2005.01.05.16.03.23;	author nickc;	state Exp;
branches;
next	1.21;

1.21
date	2004.12.16.15.40.36;	author nickc;	state Exp;
branches;
next	1.20;

1.20
date	2004.08.13.03.16.01;	author amodra;	state Exp;
branches;
next	1.19;

1.19
date	2004.07.02.01.39.32;	author hjl;	state Exp;
branches;
next	1.18;

1.18
date	2003.06.28.05.28.54;	author amodra;	state Exp;
branches;
next	1.17;

1.17
date	2003.06.03.18.15.05;	author hjl;	state Exp;
branches;
next	1.16;

1.16
date	2003.04.24.01.43.33;	author hjl;	state Exp;
branches;
next	1.15;

1.15
date	2003.03.31.18.12.52;	author nickc;	state Exp;
branches;
next	1.14;

1.14
date	2002.11.30.08.39.45;	author amodra;	state Exp;
branches;
next	1.13;

1.13
date	2002.10.30.03.57.38;	author drow;	state Exp;
branches;
next	1.12;

1.12
date	2002.09.21.14.14.25;	author amodra;	state Exp;
branches;
next	1.11;

1.11
date	2002.07.02.04.21.57;	author amodra;	state Exp;
branches
	1.11.2.1;
next	1.10;

1.10
date	2002.06.26.13.22.55;	author amodra;	state Exp;
branches;
next	1.9;

1.9
date	2002.01.25.12.22.42;	author amodra;	state Exp;
branches;
next	1.8;

1.8
date	2001.09.26.01.55.44;	author amodra;	state Exp;
branches;
next	1.7;

1.7
date	2001.05.02.16.42.55;	author hjl;	state Exp;
branches;
next	1.6;

1.6
date	2001.04.13.02.22.23;	author jtc;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.13.06.14.27;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.21.20.21.59;	author kazu;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2000.01.26.23.11.48;	author amodra;	state Exp;
branches;
next	1.2;

1.2
date	99.09.12.16.59.49;	author ian;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.29.07;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.44.2.1
date	2013.10.10.22.51.14;	author roland;	state Exp;
branches;
next	;

1.37.2.1
date	2011.02.01.12.25.46;	author amodra;	state Exp;
branches;
next	;

1.28.2.1
date	2006.05.06.17.22.14;	author jsm28;	state Exp;
branches;
next	;

1.11.2.1
date	2002.10.30.03.54.52;	author drow;	state Exp;
branches;
next	;

1.4.2.1
date	2001.05.23.03.41.11;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.07;	author rth;	state Exp;
branches;
next	;


desc
@@


1.45
log
@ld/
	* ldmisc.c (vfinfo): Use Boolean ? "" : ":" in place of ":" + Boolean.
	It silences some compilers' warnings and is much less bizarre to read.
@
text
@/* ldmisc.c
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010, 2011, 2012, 2013
   Free Software Foundation, Inc.
   Written by Steve Chamberlain of Cygnus Support.

   This file is part of the GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

#include "sysdep.h"
#include "bfd.h"
#include "bfdlink.h"
#include "libiberty.h"
#include "filenames.h"
#include "demangle.h"
#include <stdarg.h>
#include "ld.h"
#include "ldmisc.h"
#include "ldexp.h"
#include "ldlang.h"
#include <ldgram.h>
#include "ldlex.h"
#include "ldmain.h"
#include "ldfile.h"
#include "elf-bfd.h"

/*
 %% literal %
 %A section name from a section
 %B filename from a bfd
 %C clever filename:linenumber with function
 %D like %C, but no function name
 %E current bfd error or errno
 %F error is fatal
 %G like %D, but only function name
 %H like %C but in addition emit section+offset
 %I filename from a lang_input_statement_type
 %P print program name
 %R info about a relent
 %S print script file and linenumber from etree_type.
 %T symbol name
 %V hex bfd_vma
 %W hex bfd_vma with 0x with no leading zeros taking up 8 spaces
 %X no object output, fail return
 %d integer, like printf
 %ld long, like printf
 %lu unsigned long, like printf
 %p native (host) void* pointer, like printf
 %s arbitrary string, like printf
 %u integer, like printf
 %v hex bfd_vma, no leading zeros
*/

void
vfinfo (FILE *fp, const char *fmt, va_list arg, bfd_boolean is_warning)
{
  bfd_boolean fatal = FALSE;

  while (*fmt != '\0')
    {
      const char *str = fmt;
      while (*fmt != '%' && *fmt != '\0')
	fmt++;
      if (fmt != str)
	if (fwrite (str, 1, fmt - str, fp))
	  {
	    /* Ignore.  */
	  }

      if (*fmt == '%')
	{
	  fmt++;
	  switch (*fmt++)
	    {
	    case '%':
	      /* literal % */
	      putc ('%', fp);
	      break;

	    case 'X':
	      /* no object output, fail return */
	      config.make_executable = FALSE;
	      break;

	    case 'V':
	      /* hex bfd_vma */
	      {
		bfd_vma value = va_arg (arg, bfd_vma);
		fprintf_vma (fp, value);
	      }
	      break;

	    case 'v':
	      /* hex bfd_vma, no leading zeros */
	      {
		char buf[100];
		char *p = buf;
		bfd_vma value = va_arg (arg, bfd_vma);
		sprintf_vma (p, value);
		while (*p == '0')
		  p++;
		if (!*p)
		  p--;
		fputs (p, fp);
	      }
	      break;

	    case 'W':
	      /* hex bfd_vma with 0x with no leading zeroes taking up
		 8 spaces.  */
	      {
		char buf[100];
		bfd_vma value;
		char *p;
		int len;

		value = va_arg (arg, bfd_vma);
		sprintf_vma (buf, value);
		for (p = buf; *p == '0'; ++p)
		  ;
		if (*p == '\0')
		  --p;
		len = strlen (p);
		while (len < 8)
		  {
		    putc (' ', fp);
		    ++len;
		  }
		fprintf (fp, "0x%s", p);
	      }
	      break;

	    case 'T':
	      /* Symbol name.  */
	      {
		const char *name = va_arg (arg, const char *);

		if (name == NULL || *name == 0)
		  {
		    fprintf (fp, _("no symbol"));
		    break;
		  }
		else if (demangling)
		  {
		    char *demangled;

		    demangled = bfd_demangle (link_info.output_bfd, name,
					      DMGL_ANSI | DMGL_PARAMS);
		    if (demangled != NULL)
		      {
			fprintf (fp, "%s", demangled);
			free (demangled);
			break;
		      }
		  }
		fprintf (fp, "%s", name);
	      }
	      break;

	    case 'A':
	      /* section name from a section */
	      {
		asection *sec = va_arg (arg, asection *);
		bfd *abfd = sec->owner;
		const char *group = NULL;
		struct coff_comdat_info *ci;

		fprintf (fp, "%s", sec->name);
		if (abfd != NULL
		    && bfd_get_flavour (abfd) == bfd_target_elf_flavour
		    && elf_next_in_group (sec) != NULL
		    && (sec->flags & SEC_GROUP) == 0)
		  group = elf_group_name (sec);
		else if (abfd != NULL
			 && bfd_get_flavour (abfd) == bfd_target_coff_flavour
			 && (ci = bfd_coff_get_comdat_section (sec->owner,
							       sec)) != NULL)
		  group = ci->name;
		if (group != NULL)
		  fprintf (fp, "[%s]", group);
	      }
	      break;

	    case 'B':
	      /* filename from a bfd */
	      {
		bfd *abfd = va_arg (arg, bfd *);

		if (abfd == NULL)
		  fprintf (fp, "%s generated", program_name);
		else if (abfd->my_archive)
		  fprintf (fp, "%s(%s)", abfd->my_archive->filename,
			   abfd->filename);
		else
		  fprintf (fp, "%s", abfd->filename);
	      }
	      break;

	    case 'F':
	      /* Error is fatal.  */
	      fatal = TRUE;
	      break;

	    case 'P':
	      /* Print program name.  */
	      fprintf (fp, "%s", program_name);
	      break;

	    case 'E':
	      /* current bfd error or errno */
	      fprintf (fp, "%s", bfd_errmsg (bfd_get_error ()));
	      break;

	    case 'I':
	      /* filename from a lang_input_statement_type */
	      {
		lang_input_statement_type *i;

		i = va_arg (arg, lang_input_statement_type *);
		if (bfd_my_archive (i->the_bfd) != NULL)
		  fprintf (fp, "(%s)",
			   bfd_get_filename (bfd_my_archive (i->the_bfd)));
		fprintf (fp, "%s", i->local_sym_name);
		if (bfd_my_archive (i->the_bfd) == NULL
		    && filename_cmp (i->local_sym_name, i->filename) != 0)
		  fprintf (fp, " (%s)", i->filename);
	      }
	      break;

	    case 'S':
	      /* Print script file and linenumber.  */
	      {
		etree_type node;
		etree_type *tp = va_arg (arg, etree_type *);

		if (tp == NULL)
		  {
		    tp = &node;
		    tp->type.filename = ldlex_filename ();
		    tp->type.lineno = lineno;
		  }
		if (tp->type.filename != NULL)
		  fprintf (fp, "%s:%u", tp->type.filename, tp->type.lineno);
	      }
	      break;

	    case 'R':
	      /* Print all that's interesting about a relent.  */
	      {
		arelent *relent = va_arg (arg, arelent *);

		lfinfo (fp, "%s+0x%v (type %s)",
			(*(relent->sym_ptr_ptr))->name,
			relent->addend,
			relent->howto->name);
	      }
	      break;

	    case 'C':
	    case 'D':
	    case 'G':
	    case 'H':
	      /* Clever filename:linenumber with function name if possible.
		 The arguments are a BFD, a section, and an offset.  */
	      {
		static bfd *last_bfd;
		static char *last_file = NULL;
		static char *last_function = NULL;
		bfd *abfd;
		asection *section;
		bfd_vma offset;
		asymbol **asymbols = NULL;
		const char *filename;
		const char *functionname;
		unsigned int linenumber;
		bfd_boolean discard_last;
		bfd_boolean done;

		abfd = va_arg (arg, bfd *);
		section = va_arg (arg, asection *);
		offset = va_arg (arg, bfd_vma);

		if (abfd != NULL)
		  {
		    if (!bfd_generic_link_read_symbols (abfd))
		      einfo (_("%B%F: could not read symbols: %E\n"), abfd);

		    asymbols = bfd_get_outsymbols (abfd);
		  }

		/* The GNU Coding Standard requires that error messages
		   be of the form:

		     source-file-name:lineno: message

		   We do not always have a line number available so if
		   we cannot find them we print out the section name and
		   offset instead.  */
		discard_last = TRUE;
		if (abfd != NULL
		    && bfd_find_nearest_line (abfd, section, asymbols, offset,
					      &filename, &functionname,
					      &linenumber))
		  {
		    if (functionname != NULL
			&& (fmt[-1] == 'C' || fmt[-1] == 'H'))
		      {
			/* Detect the case where we are printing out a
			   message for the same function as the last
			   call to vinfo ("%C").  In this situation do
			   not print out the ABFD filename or the
			   function name again.  Note - we do still
			   print out the source filename, as this will
			   allow programs that parse the linker's output
			   (eg emacs) to correctly locate multiple
			   errors in the same source file.  */
			if (last_bfd == NULL
			    || last_file == NULL
			    || last_function == NULL
			    || last_bfd != abfd
			    || (filename != NULL
				&& filename_cmp (last_file, filename) != 0)
			    || strcmp (last_function, functionname) != 0)
			  {
			    lfinfo (fp, _("%B: In function `%T':\n"),
				    abfd, functionname);

			    last_bfd = abfd;
			    if (last_file != NULL)
			      free (last_file);
			    last_file = NULL;
			    if (filename)
			      last_file = xstrdup (filename);
			    if (last_function != NULL)
			      free (last_function);
			    last_function = xstrdup (functionname);
			  }
			discard_last = FALSE;
		      }
		    else
		      lfinfo (fp, "%B:", abfd);

		    if (filename != NULL)
		      fprintf (fp, "%s:", filename);

		    done = fmt[-1] != 'H';
		    if (functionname != NULL && fmt[-1] == 'G')
		      lfinfo (fp, "%T", functionname);
		    else if (filename != NULL && linenumber != 0)
		      fprintf (fp, "%u%s", linenumber, done ? "" : ":");
		    else
		      done = FALSE;
		  }
		else
		  {
		    lfinfo (fp, "%B:", abfd);
		    done = FALSE;
		  }
		if (!done)
		  lfinfo (fp, "(%A+0x%v)", section, offset);

		if (discard_last)
		  {
		    last_bfd = NULL;
		    if (last_file != NULL)
		      {
			free (last_file);
			last_file = NULL;
		      }
		    if (last_function != NULL)
		      {
			free (last_function);
			last_function = NULL;
		      }
		  }
	      }
	      break;

	    case 'p':
	      /* native (host) void* pointer, like printf */
	      fprintf (fp, "%p", va_arg (arg, void *));
	      break;

	    case 's':
	      /* arbitrary string, like printf */
	      fprintf (fp, "%s", va_arg (arg, char *));
	      break;

	    case 'd':
	      /* integer, like printf */
	      fprintf (fp, "%d", va_arg (arg, int));
	      break;

	    case 'u':
	      /* unsigned integer, like printf */
	      fprintf (fp, "%u", va_arg (arg, unsigned int));
	      break;

	    case 'l':
	      if (*fmt == 'd')
		{
		  fprintf (fp, "%ld", va_arg (arg, long));
		  ++fmt;
		  break;
		}
	      else if (*fmt == 'u')
		{
		  fprintf (fp, "%lu", va_arg (arg, unsigned long));
		  ++fmt;
		  break;
		}
	      /* Fall thru */

	    default:
	      fprintf (fp, "%%%c", fmt[-1]);
	      break;
	    }
	}
    }

  if (is_warning && config.fatal_warnings)
    config.make_executable = FALSE;

  if (fatal)
    xexit (1);
}

/* Format info message and print on stdout.  */

/* (You would think this should be called just "info", but then you
   would be hosed by LynxOS, which defines that name in its libc.)  */

void
info_msg (const char *fmt, ...)
{
  va_list arg;

  va_start (arg, fmt);
  vfinfo (stdout, fmt, arg, FALSE);
  va_end (arg);
}

/* ('e' for error.) Format info message and print on stderr.  */

void
einfo (const char *fmt, ...)
{
  va_list arg;

  fflush (stdout);
  va_start (arg, fmt);
  vfinfo (stderr, fmt, arg, TRUE);
  va_end (arg);
  fflush (stderr);
}

void
info_assert (const char *file, unsigned int line)
{
  einfo (_("%F%P: internal error %s %d\n"), file, line);
}

/* ('m' for map) Format info message and print on map.  */

void
minfo (const char *fmt, ...)
{
  if (config.map_file != NULL)
    {
      va_list arg;

      va_start (arg, fmt);
      vfinfo (config.map_file, fmt, arg, FALSE);
      va_end (arg);
    }
}

void
lfinfo (FILE *file, const char *fmt, ...)
{
  va_list arg;

  va_start (arg, fmt);
  vfinfo (file, fmt, arg, FALSE);
  va_end (arg);
}

/* Functions to print the link map.  */

void
print_space (void)
{
  fprintf (config.map_file, " ");
}

void
print_nl (void)
{
  fprintf (config.map_file, "\n");
}

/* A more or less friendly abort message.  In ld.h abort is defined to
   call this function.  */

void
ld_abort (const char *file, int line, const char *fn)
{
  if (fn != NULL)
    einfo (_("%P: internal error: aborting at %s line %d in %s\n"),
	   file, line, fn);
  else
    einfo (_("%P: internal error: aborting at %s line %d\n"),
	   file, line);
  einfo (_("%P%F: please report this bug\n"));
  xexit (1);
}
@


1.44
log
@Remove trailing white spaces in ld

	* deffilep.y: Remove trailing white spaces.
	* elf-hints-local.h: Likewise.
	* ldexp.c: Likewise.
	* ldlang.h: Likewise.
	* ldmisc.c: Likewise.
	* ldwrite.c: Likewise.
	* pe-dll.c: Likewise.
	* emulparams/criself.sh: Likewise.
	* emulparams/crislinux.sh: Likewise.
	* emulparams/elf32_tic6x_le.sh: Likewise.
	* emulparams/elf32bmipn32-defs.sh: Likewise.
	* emulparams/elf32mb_linux.sh: Likewise.
	* emulparams/elf32mep.sh: Likewise.
	* emulparams/elf32microblaze.sh: Likewise.
	* emulparams/elf32ppc.sh: Likewise.
	* emulparams/elf64_s390.sh: Likewise.
	* emulparams/elf64alpha.sh: Likewise.
	* emulparams/elf_s390.sh: Likewise.
	* emulparams/elf_x86_64.sh: Likewise.
	* emulparams/tic80coff.sh: Likewise.
	* emultempl/aix.em: Likewise.
	* emultempl/avrelf.em: Likewise.
	* emultempl/cr16elf.em: Likewise.
	* emultempl/pe.em: Likewise.
	* emultempl/pep.em: Likewise.
	* emultempl/spuelf.em: Likewise.
	* emultempl/tic6xdsbt.em: Likewise.
@
text
@d3 1
a3 1
   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010, 2011, 2012
d364 1
a364 1
		      fprintf (fp, "%u%s", linenumber, ":" + done);
@


1.44.2.1
log
@ld/
	* ldmisc.c (vfinfo): Use Boolean ? "" : ":" in place of ":" + Boolean.
	It silences some compilers' warnings and is much less bizarre to read.
@
text
@d3 1
a3 1
   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010, 2011, 2012, 2013
d364 1
a364 1
		      fprintf (fp, "%u%s", linenumber, done ? "" : ":");
@


1.43
log
@ld: optimize vfinfo output slightly

ld atm ends up calling the write() syscall on every char when displaying
an error message.  For example:
$ echo 'main(){foo();}' | strace -f -ewrite gcc -x c -o /dev/null -
...
[pid 13035] write(2, ":", 1)            = 1
[pid 13035] write(2, " ", 1)            = 1
[pid 13035] write(2, "I", 1)            = 1
[pid 13035] write(2, "n", 1)            = 1
[pid 13035] write(2, " ", 1)            = 1
[pid 13035] write(2, "f", 1)            = 1
[pid 13035] write(2, "u", 1)            = 1
[pid 13035] write(2, "n", 1)            = 1
[pid 13035] write(2, "c", 1)            = 1
[pid 13035] write(2, "t", 1)            = 1
[pid 13035] write(2, "i", 1)            = 1
[pid 13035] write(2, "o", 1)            = 1
[pid 13035] write(2, "n", 1)            = 1
[pid 13035] write(2, " ", 1)            = 1
[pid 13035] write(2, "`", 1)            = 1
...

That's just to write ": In function `main':".  A slight optimization in
the vfinfo() func gives a much more reasonable syscall footprint:
...
write(2, ": In function `", 15)         = 15
...

Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d307 1
a307 1
		   
@


1.42
log
@	* ldmisc.c (vfinfo <%S>): Use same type and avoid cast for
	temporary variable node used for NULL argument.
@
text
@d75 1
d77 6
a82 4
	{
	  putc (*fmt, fp);
	  fmt++;
	}
@


1.41
log
@	PR ld/13343
	* ld.h (parsing_defsym): Delete.
	* ldexp.c (exp_intop, exp_bigintop, exp_relop): Set type.filename.
	(fold_binary, fold_name, exp_fold_tree_1, exp_get_vma, exp_get_fill,
	exp_get_abs_int): Add tree arg for %S in error messages.  Don't
	fudge lineno.
	(exp_binop, exp_unop, exp_nameop, exp_assop, exp_assert): Copy
	type.filename from sub-tree.
	(exp_trinop): Likewise, and use "cond" rather than "lhs".
	* ldexp.h (node_type): Add filename field to struct.
	* ldfile.c (ldfile_input_filename): Delete.  Remove all refs.
	* ldfile.h (ldfile_input_filename): Delete.
	* ldgram.y (phdr_type, phdr_qualifiers, yyerror): Add NULL arg for
	%S in error messages.
	* ldemul.c (syslib_default, hll_default): Likewise.
	* ldlang.c (lang_memory_region_lookup, lang_memory_region_alias,
	lang_get_regions, lang_new_phdr): Likewise.
	(lang_size_sections_1): Pass addr_tree for %S.
	* ldlex.h (lex_redirect): Update prototype.
	(ldlex_filename): Declare.
	* ldlex.l (<EOF>): Don't set ldfile_input_filename.
	(lex_redirect): Add fake_filename and count params.  Push
	fake_filename to file_name_stack and init lineno from count.
	(ldlex_filename): New function.
	(lex_warn_invalid): Use above.
	* ldmain.c (main): Update lex_redirect call.
	* ldmisc.c (vfinfo <%S>): Take file name and line number from
	etree_type arg, or use current if arg is NULL.
	* lexsup.c (parsing_defsym): Delete.
	(parse_args <OPTION_DEFSYM>): Update lex_redirect call.
@
text
@d244 1
a244 1
		node_type node;
d249 1
a249 1
		    tp = (etree_type *) &node;
@


1.40
log
@	* ldmisc.c (vfinfo): Add %H.
	* ldmain.c (reloc_overflow): Use %H rather than %C.
	(reloc_dangerous, unattached_reloc): Likewise.
@
text
@d3 1
a3 1
   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010, 2011
d54 1
a54 1
 %S print script file and linenumber
d243 13
a255 6
	      if (parsing_defsym)
		fprintf (fp, "--defsym %s", lex_string);
	      else if (ldfile_input_filename != NULL)
		fprintf (fp, "%s:%u", ldfile_input_filename, lineno);
	      else
		fprintf (fp, _("built in linker script:%u"), lineno);
@


1.39
log
@2011-02-28  Kai Tietz  <kai.tietz@@onevision.com>

	* emultempl/beos.em (sort_by_file_name): Use filename_(n)cmp.
	* emultempl/elf32.em (gld${EMULATION_NAME}_vercheck):
	Likewise.
	(gld${EMULATION_NAME}_stat_needed): Likewise.
	(gld${EMULATION_NAME}_check_needed): Likewise.
	* emultempl/pe.em (gld_${EMULATION_NAME}_after_open): Likewise.
	(gld_${EMULATION_NAME}_unrecognized_file): Likewise.
	* emultempl/pep.em (gld_${EMULATION_NAME}_after_open): Likewise.
	(gld_${EMULATION_NAME}_unrecognized_file): Likewise.
	* ldfile.c (ldfile_open_file): Likewise.
	* ldlang.c (wild_sort): Likewise.
	(lookup_name): Likewise.
	(check_excluded_libs): Likewise.
	* ldmisc.c (vfinfo): Likewise.
	* pe-dll.c (libnamencmp): Likewise.
	(auto_export): Likewise.
	(pe_dll_generate_implib): Likewise.
	* testplug.c (onclaim_file): Likewise.
@
text
@d50 1
d266 1
d281 1
d302 1
a302 1
		   offset instread.  */
d309 2
a310 1
		    if (functionname != NULL && fmt[-1] == 'C')
d350 1
d354 1
a354 1
		      fprintf (fp, "%u", linenumber);
d356 1
a356 1
		      lfinfo (fp, "(%A+0x%v)", section, offset);
d359 6
a364 1
		  lfinfo (fp, "%B:(%A+0x%v)", abfd, section, offset);
@


1.38
log
@	* ldmain.c (main): Flush stdout before and stderr after printing
	message.
	* ldmisc.c (einfo): Similarly.
	* plugin.c (message): Likewise.
	* emultempl/ppc64elf.em: Likewise.
	* emultempl/xtensaelf.em: Likewise.
	* emulparams/elf32mcore.sh: Use einfo rather than printf.
	* emultempl/beos.em: Likewise.
	* emultempl/pe.em: Likewise.
	* emultempl/pep.em: Likewise.
@
text
@d28 1
d235 1
a235 1
		    && strcmp (i->local_sym_name, i->filename) != 0)
d322 1
a322 1
				&& strcmp (last_file, filename) != 0)
@


1.37
log
@Applied patch series for LD plugin interface (six parts).

[PATCH] Add infrastructure for plugin API; functionality to follow.

    include/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 1/6).
	* plugin-api.h (LDPT_GNU_LD_VERSION): New ld_plugin_tag enum member.

    ld/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 1/6).
	* configure.in: Add AC_CHECKs for file io and dlfcn headers and
	functions and AC_SEARCH for -ldl.
	(enable_plugins): New shell variable set if above tests find dlopen
	functionality.
	(ENABLE_PLUGINS): Add related automake conditional.
	* configure: Regenerate.
	* config.in: Likewise.
	* Makefile.am (PLUGIN_C): Declare plugin C source file, conditional
	on ENABLE_PLUGINS being defined.
	(PLUGIN_H): Likewise for header file.
	(PLUGIN_OBJECT): Likewise for object file.
	(PLUGIN_CFLAGS): Likewise -D flag required to compile plugin support.
	(AM_CPPFLAGS): Use PLUGIN_CFLAGS.
	(CFILES): Use PLUGIN_C.
	(HFILES): Use PLUGIN_H.
	(OFILES): Use PLUGIN_OBJECT.
	(ld_new_SOURCES): Use PLUGIN_C.
	(noinst_LTLIBRARIES)[ENABLE_PLUGINS]: Declare test plugin.
	(libldtestplug_la_SOURCES)[ENABLE_PLUGINS]: Add automake definition
	for test plugin.
	(libldtestplug_la_CFLAGS)[ENABLE_PLUGINS]: Likewise.
	(libldtestplug_la_LDFLAGS)[ENABLE_PLUGINS]: Likewise.
	* Makefile.in: Regenerate.
	* sysdep.h: Include stdarg.h, unistd.h and one of fcntl.h or
	sys/file.h where available.  Include dlfcn.h when ENABLE_PLUGINS.
	(O_RDONLY): Supply default definition likewise to bfd's sysdep.h
	(O_WRONLY): Likewise.
	(O_RDWR): Likewise.
	(O_ACCMODE): Likewise.
	(O_BINARY): Likewise.
	(SEEK_SET): Likewise.
	(SEEK_CUR): Likewise.
	(SEEK_END): Likewise.
	* ldmisc.c (vfinfo): Make non-static.  Add %p format char.
	* ldmisc.h (vfinfo): Declare extern prototype.
	* lexsup.c (enum option_values)[ENABLE_PLUGINS]: Add new entries for
	OPTION_PLUGIN and OPTION_PLUGIN_OPT.
	(ld_options[])[ENABLE_PLUGINS]: Add option data for the above two.
	(parse_args)[ENABLE_PLUGINS]: Handle them, and load all plugins once
	option parsing is complete.
	* ldmain.c (main)[ENABLE_PLUGINS]: Call plugin cleanup hooks just
	after lang_finish.
	* plugin.c: New source file.
	* plugin.h: Likewise new header.
	* testplug.c: New source file.

    ld/testsuite/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 1/6).
	* ld-bootstrap/bootstrap.exp: Skip static tests also if LD plugins
	are enabled.
	* lib/ld-lib.exp (proc regexp_diff): Extend verbose debug output.
	(proc set_file_contents): Write a file with the supplied content.
	(run_ld_link_tests): Add new 'ld' action to test linker output.
	(proc check_plugin_api_available): Return true if linker under test
	supports the plugin API.
	* ld-plugin/func.c: New test source file.
	* ld-plugin/main.c: Likewise.
	* ld-plugin/text.c: Likewise.
	* ld-plugin/plugin-1.d: New dump test output pattern script.
	* ld-plugin/plugin-2.d: Likewise.
	* ld-plugin/plugin-3.d: Likewise.
	* ld-plugin/plugin-4.d: Likewise.
	* ld-plugin/plugin-5.d: Likewise.
	* ld-plugin/plugin.exp: New test control script.
---
[PATCH] Implement claim file and all symbols read hooks and add symbols callback.

  ld/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 2/6).
	* ldfile.c (ldfile_try_open_bfd)[ENABLE_PLUGINS]: Don't return early
	during compat checks if they pass, instead offer any successfully
	opened and accepted file to the plugin claim file hooks chain.  Create
	a dummy bfd to accept symbols added by the plugin, if the plugin
	claims the file.
	* ldlang.c (lang_process)[ENABLE_PLUGINS]: Call plugin all symbols
	read hook chain before ldemul_after_open.
	* ldlang.h (struct lang_input_statement_struct): Add new single-bit
	'claimed' flag.
	* plugin.c (IRONLY_SUFFIX): New macro for dummy bfd file suffix.
	(IRONLY_SUFFIX_LEN): Length of the above string.
	(plugin_get_ir_dummy_bfd): New function to create the dummy bfd used
	to store symbols for ir-only files.
	(is_ir_dummy_bfd): New function to check if a bfd is ir-only.
	(asymbol_from_plugin_symbol): New function converts symbol formats.
	(add_symbols): Call it to convert plugin syms to bfd syms and add
	them to the dummy bfd.
	* plugin.h: Add missing include guards.
	(plugin_get_ir_dummy_bfd): Add prototype.
	(is_ir_dummy_bfd): Likewise.
	* testplug.c (TV_MESSAGE): New helper macro.
	(struct claim_file): New struct.
	(claim_file_t): New typedef.
	(tag_names[]): Make static and const.
	(claimfiles_list): New variable.
	(claimfiles_tail_chain_ptr): Likewise.
	(last_claimfile): Likewise.
	(record_claim_file): Record a file to claim on a singly-linked list.
	(parse_symdefstr): Parse an ASCII representation of a symbol from a
	plugin option into the fields of a struct ld_plugin_symbol.
	(record_claimed_file_symbol):  Use it to parse plugin option for
	adding a symbol.
	(parse_option): Parse claim file and add symbol options.
	(dump_tv_tag): Use TV_MESSAGE.
	(onload): Likewise.
	(onclaim_file): Make static.  Use TV_MESSAGE.  Scan list of files to
	claim and claim this file if required, adding any symbols specified.
	(onall_symbols_read): Make static and use TV_MESSAGE.
	(oncleanup): Likewise.

  ld/testsuite/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 2/6).
	* ld-plugin/plugin-3.d: Enable regexes for new functionality.
	* ld-plugin/plugin-5.d: Likewise.
	* ld-plugin/plugin-6.d: New testcase.
	* ld-plugin/plugin-7.d: Likewise.
	* ld-plugin/plugin.exp: Use 'nm' on compiled test objects to determine
	whether symbols in plugin arguments need an underscore prefix.  Add
	new plugin-6.d and plugin-7.d testcases.
---
[PATCH] Implement get symbols callback.

  ld/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 3/6).
	* ldmain.c (notice)[ENABLE_PLUGINS]: Call plugin_notice.
	* plugin.c (non_ironly_hash): Add new bfd hash table.
	(plugin_load_plugins): Exit early if no plugins to load.  If plugins
	do load successfully, set notice_all flag in link info.
	(get_symbols): Implement.
	(plugin_load_plugins): Exit early if no plugins to load, else after
	loading plugins successfully enable notice_all mode.
	(init_non_ironly_hash): Lazily init non_ironly_hash table.
	(plugin_notice): Record symbols referenced from non-IR files in the
	non_ironly_hash.  Suppress tracing, cref generation and nocrossrefs
	tracking for symbols from dummy IR bfds.
	* plugin.h: Fix formatting.
	(plugin_notice): Add prototype.
	* testplug.c (dumpresolutions): New global var.
	(parse_options): Accept "dumpresolutions".
	(onall_symbols_read): Get syms and dump resolutions if it was given.

  ld/testsuite/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 3/6).
	* ld-plugin/plugin-8.d: New testcase.
	* ld-plugin/plugin.exp: Invoke it.
---
[PATCH] Implement add input file, add input lib and set extra lib path callbacks.

  ld/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 4/6).
	* ldlang.c (lang_process)[ENABLE_PLUGINS]: Move invocation of
	plugin_call_all_symbols_read to before setting of gc_sym_list, and
	open any new input files that may have been added during it.
	* ldmain.c (multiple_definition)[ENABLE_PLUGINS]: Call out to
	plugin_multiple_definition and let it have first say over what to do
	with the clashing definitions.
	* plugin.c (no_more_claiming): New boolean variable.
	(plugin_cached_allow_multiple_defs): Likewise.
	(add_input_file): Implement.
	(add_input_library): Likewise.
	(set_extra_library_path): Likewise.
	(plugin_call_claim_file): Don't do anything when no_more_claiming set.
	(plugin_call_all_symbols_read): Set it.  Disable link info
	"allow_multiple_definition" flag, but cache its value.
	(plugin_multiple_definition): New function.
	* plugin.h (plugin_multiple_definition): Add prototype.
	* testplug.c (addfile_enum_t): New enumerated typedef.
	(add_file_t): New struct typedef.
	(addfiles_list): New variable.
	(addfiles_tail_chain_ptr): Likewise.
	(record_add_file): New function.
	(parse_option): Parse "add:", "lib:" and "dir:" options and call it.
	(onall_symbols_read): Iterate the list of new files, libs and dirs,
	adding them.

  ld/testsuite/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 4/6).
	* ld-plugin/plugin-9.d: New testcase.
	* ld-plugin/plugin.exp: Invoke it.
---
[PATCH] Add ELF symbol visibility support to plugin interface.

  ld/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 5/6).
	* plugin.c (asymbol_from_plugin_symbol): If the bfd is an ELF bfd,
	find the elf symbol data and set the visibility in the st_other field.

  ld/testsuite/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 5/6).
	* ld-plugin/plugin-ignore.d: New dump test control script.
	* ld-plugin/plugin-vis-1.d: Likewise.
	* ld-plugin/plugin.exp: Add list of ELF-only tests and run them if
	testing on an ELF target.
---
[PATCH] Add archive support to plugin interface.

  bfd/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 6/6).
	* aoutx.h (aout_link_check_ar_symbols): Take new "subsbfd" reference
	parameter and pass it when invoking add_archive_element callback.
	(aout_link_check_archive_element): Handle substitute bfd if it
	was set during add_archive_element callback in the above.
	* cofflink.c (coff_link_check_ar_symbols): Take new "subsbfd" reference
	parameter and pass it when invoking add_archive_element callback.
	(coff_link_check_archive_element): Handle substitute bfd if it
	was set during add_archive_element callback in the above.
	* ecoff.c (read_ext_syms_and_strs): New function holds symbol-reading
	code factored-out from ecoff_link_check_archive_element.
	(reread_ext_syms_and_strs): Clear old symbols and call it.
	(ecoff_link_check_archive_element):  Use the above.  Handle substitute
	BFD if one is set by add_archive_element callback.
	(ecoff_link_add_archive_symbols): Likewise allow bfd substitution.
	* elflink.c (elf_link_add_archive_symbols): Likewise.
	* linker.c (generic_link_check_archive_element): Likewise.
	* pdp11.c (aout_link_check_ar_symbols): Take new "subsbfd" reference
	parameter and pass it when invoking add_archive_element callback.
	(aout_link_check_archive_element): Handle substitute bfd if it was
	set during add_archive_element callback in the above.
	* vms-alpha.c (alpha_vms_link_add_archive_symbols): Handle substitute
	BFD if one is set by add_archive_element callback.
	* xcofflink.c (xcoff_link_check_dynamic_ar_symbols): Take new "subsbfd"
	reference parameter and pass it when invoking add_archive_element
	callback.
	(xcoff_link_check_ar_symbols): Likewise.
	(xcoff_link_check_archive_element): Handle bfd substitution if it was
	set by callback in the above.

  include/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 6/6).
	* bfdlink.h (struct_bfd_link_callbacks): Document new argument
	to add_archive_element callback used to return a replacement bfd which
	is to be added to the hash table in place of the original element.

  ld/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 6/6).
	* ldlang.c (load_symbols): Handle bfd subsitution when calling the
	add_archive_element callback.
	* ldmain.c (add_archive_element)[ENABLE_PLUGINS]: Offer the archive
	member to the plugins and if claimed set "subsbfd" output parameter to
	point to the dummy IR-only BFD.

  ld/testsuite/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 6/6).
	* ld-plugin/plugin-10.d: New dump test control script.
	* ld-plugin/plugin-11.d: Likewise.
	* ld-plugin/plugin.exp: Run them.
---
@
text
@d3 1
a3 1
   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008
d443 1
d447 1
@


1.37.2.1
log
@backport from mainline
@
text
@d3 1
a3 1
   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010, 2011
a442 1
  fflush (stdout);
a445 1
  fflush (stderr);
@


1.36
log
@bfd/
	* bfd.c (struct _bfd): Correct outsymbols comment.
	* bfd-in2.h: Regenerate.
	* linker.c (bfd_generic_link_read_symbols): Renamed from..
	(generic_link_read_symbols): ..this, and made global.

include/
	* bfdlink.h (bfd_generic_link_read_symbols): Declare.
ld/
	PR 6478
	* ldcref.c (check_local_sym_xref): Use bfd_generic_link_read_symbols.
	Don't free symbol pointer array.
	(check_refs): Likewise.
	* ldmain.c (warning_callback): Likewise.
	* ldmisc.c (vfinfo): Likewise.
	* pe-dll.c (process_def_file): Likewise.
	(pe_walk_relocs_of_symbol, generate_reloc): Likewise.
	* emultempl/pe.em (pe_find_data_imports): Likewise.
	(gld_${EMULATION_NAME}_after_open): Likewise.
	* emultempl/pep.em (pep_find_data_imports): Likewise.
	(gld_${EMULATION_NAME}_after_open): Likewise.
	* ldlang.h (lang_input_statement_type): Delete asymbols, symbol_count,
	passive_position, closed.
	* ldlang.c (new_afile): Don't set asymbols and symbol_count.
	* ldmain.c (add_archive_element): xcalloc lang_input_statement_type.
@
text
@d60 1
d66 1
a66 1
static void
d372 5
@


1.35
log
@include/
	* bfdlink.h (struct bfd_link_hash_table): Delete creator field.
	(struct bfd_link_info): Add output_bfd.
bfd/
	* elflink.c: Replace all accesses to hash->creator field with
	output_bfd->xvec.
	* cofflink.c: Likewise.
	* coff-h8300.c: Likewise.
	* ecoff.c: Likewise.
	* elf32-m68hc1x.c: Likewise.
	* elf32-ppc.c: Likewise.
	* elf64-alpha.c: Likewise.
	* elf64-ppc.c: Likewise.
	* elf64-sparc.c: Likewise.
	* elfxx-mips.c: Likewise.
	* i386linux.c: Likewise.
	* m68klinux.c: Likewise.
	* sparclinux.c: Likewise.
	* sunos.c: Likewise.
	* xcofflink.c: Likewise.
	* linker.c: Likewise.
	(_bfd_link_hash_table_init): Don't store creator.
ld/
	* ldmain.h (output_bfd): Delete.
	* ldmain.c (output_bfd): Delete.
	Replace all occurrences of output_bfd with link_info.output_bfd.
	* ldcref.c: Likewise.
	* ldctor.c: Likewise.
	* ldemul.c: Likewise.
	* ldexp.c: Likewise.
	* ldfile.c: Likewise.
	* ldlang.c: Likewise.
	* ldmisc.c: Likewise.
	* ldwrite.c: Likewise.
	* pe-dll.c: Likewise.
	* emultempl/aix.em: Likewise.
	* emultempl/alphaelf.em: Likewise.
	* emultempl/armcoff.em: Likewise.
	* emultempl/armelf.em: Likewise.
	* emultempl/avrelf.em: Likewise.
	* emultempl/beos.em: Likewise.
	* emultempl/elf-generic.em: Likewise.
	* emultempl/elf32.em: Likewise.
	* emultempl/gld960.em: Likewise.
	* emultempl/hppaelf.em: Likewise.
	* emultempl/irix.em: Likewise.
	* emultempl/linux.em: Likewise.
	* emultempl/lnk960.em: Likewise.
	* emultempl/m68hc1xelf.em: Likewise.
	* emultempl/mmix-elfnmmo.em: Likewise.
	* emultempl/mmo.em: Likewise.
	* emultempl/pe.em: Likewise.
	* emultempl/pep.em: Likewise.
	* emultempl/ppc32elf.em: Likewise.
	* emultempl/ppc64elf.em: Likewise.
	* emultempl/scoreelf.em: Likewise.
	* emultempl/sh64elf.em: Likewise.
	* emultempl/spuelf.em: Likewise.
	* emultempl/sunos.em: Likewise.
	* emultempl/vanilla.em: Likewise.
	* emultempl/vxworks.em: Likewise.
	* emultempl/xtensaelf.em: Likewise.
	* emultempl/z80.em: Likewise.
	* ldlang.c (open_output): Don't return output, instead write
	link_info_output_bfd directly.
	* emultempl/alphaelf.em: Replace occurrences of link_info.hash->creator
	with link_info.output_bfd->xvec.
	* emultempl/hppaelf.em: Likewise.
	* emultempl/ppc32elf.em: Likewise.
	* emultempl/ppc64elf.em: Likewise.
	* emultempl/spuelf.em: Likewise.
@
text
@d272 1
a272 2
		lang_input_statement_type *entry;
		asymbol **asymbols;
d282 1
a282 1
		if (abfd == NULL)
d284 2
a285 13
		    entry = NULL;
		    asymbols = NULL;
		  }
		else
		  {
		    entry = (lang_input_statement_type *) abfd->usrdata;
		    if (entry != (lang_input_statement_type *) NULL
			&& entry->asymbols != (asymbol **) NULL)
		      asymbols = entry->asymbols;
		    else
		      {
			long symsize;
			long sym_count;
d287 1
a287 13
			symsize = bfd_get_symtab_upper_bound (abfd);
			if (symsize < 0)
			  einfo (_("%B%F: could not read symbols\n"), abfd);
			asymbols = xmalloc (symsize);
			sym_count = bfd_canonicalize_symtab (abfd, asymbols);
			if (sym_count < 0)
			  einfo (_("%B%F: could not read symbols\n"), abfd);
			if (entry != (lang_input_statement_type *) NULL)
			  {
			    entry->asymbols = asymbols;
			    entry->symbol_count = sym_count;
			  }
		      }
a353 3
		if (asymbols != NULL && entry == NULL)
		  free (asymbols);

@


1.34
log
@Update sources to GPLv3
@
text
@d3 1
a3 1
   2001, 2002, 2003, 2004, 2005, 2006, 2007
d155 1
a155 1
		    demangled = bfd_demangle (output_bfd, name,
@


1.33
log
@bfd/
	* elf32-spu.c (struct spu_link_hash_table): Add stack_analysis
	and emit_stack_syms bitfields.
	(get_sym_h): Read all symbols if stack analysis will be done.
	(spu_elf_create_sections): Add stack_analysis and emit_stack_syms
	params, and stash in hash table.
	(is_hint): Split off from..
	(is_branch): ..here.  Adjust callers.
	(spu_elf_size_stubs): Add stack_analysis param.  Arrange to read
	and keep all syms.
	(write_one_stub): Fix mem leak.
	(find_function_stack_adjust): New function.
	(sort_syms_syms, sort_syms_psecs): New vars.
	(sort_syms): New function.
	(struct call_info, struct function_info): New.
	(struct spu_elf_stack_info): New.
	(alloc_stack_info, maybe_insert_function, func_name): New functions.
	(is_nop, insns_at_end, check_function_ranges): Likewise.
	(find_function, insert_callee, mark_functions_via_relocs): Likewise.
	(pasted_function, interesting_section, discover_functions): Likewise.
	(mark_non_root, call_graph_traverse, build_call_tree): Likewise.
	(sum_stack, spu_elf_stack_analysis, spu_elf_final_link): Likewise.
	(bfd_elf32_bfd_final_link): Define.
	* elf32-spu.h (struct _spu_elf_section_data): Add stack_info field.
	(spu_elf_create_sections, spu_elf_size_stubs): Update prototypes.
include/
	* bfdlink.h (struct bfd_link_info): Add "info" and "minfo".
ld/
	* ldmain.c (link_callbacks): Init info and minfo fields.
	* ldmisc.c (minfo): Do nothing if no map file.
	* emultempl/spuelf.em (stack_analysis, emit_stack_syms): New vars.
	(spu_after_open): Adjust spu_elf_create_sections call.
	(spu_before_allocation): Likewise for spu_elf_size_stubs.
	(OPTION_SPU_STACK_ANALYSIS, OPTION_SPU_STACK_SYMS): Define.
	(PARSE_AND_LIST_LONGOPTS): Add new entries.
	(PARSE_AND_LIST_OPTIONS, PARSE_AND_LIST_ARGS_CASES): Likewise.
	* gen-doc.texi: Add @@set for SPU and other missing targets.
	* ld.texinfo: Update man page selection to match gen-doc.texi.
	Document SPU features.
@
text
@d7 1
a7 1
   This file is part of GLD, the Gnu Linker.
d9 1
a9 1
   GLD is free software; you can redistribute it and/or modify
d11 2
a12 2
   the Free Software Foundation; either version 2, or (at your option)
   any later version.
d14 1
a14 1
   GLD is distributed in the hope that it will be useful,
d20 3
a22 3
   along with GLD; see the file COPYING.  If not, write to the Free
   Software Foundation, 51 Franklin Street - Fifth Floor, Boston, MA
   02110-1301, USA.  */
@


1.32
log
@
bfd/
	Many files: Include sysdep.h before bfd.h.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
binutils/
	* bucumm.h: Split off host dependencies to..
	* sysdep.h: ..here.
	Many files: Include sysdep.h.  Remove duplicate headers and reorder.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
ld/
	Many files: Include sysdep.h first.  Remove duplicate headers.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
opcodes/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* ns32k-dis.c: Include sysdep.h first.
@
text
@d480 8
a487 5
  va_list arg;

  va_start (arg, fmt);
  vfinfo (config.map_file, fmt, arg, FALSE);
  va_end (arg);
@


1.31
log
@revert hunk that belongs to a future patchset
@
text
@d24 1
a26 1
#include "sysdep.h"
@


1.30
log
@	* ldcref.c (cref_fill_array): Call bfd_demangle rather than demangle.
	* ldlang.c (lang_one_common): Likewise.
	* ldmisc.c (vfinfo): Likewise.
	(demangle): Delete.
	* ldmisc.h (demangle): Delete.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
@
text
@d480 5
a484 8
  if (config.map_file != NULL)
    {
      va_list arg;

      va_start (arg, fmt);
      vfinfo (config.map_file, fmt, arg, FALSE);
      va_end (arg);
    }
@


1.29
log
@	* ldmisc.c (vfinfo): Revert 2005-10-05 changes.  If
	bfd_find_nearest_line succeeded for %C or %D, but filename
	is NULL, print section+offset at the end.
@
text
@d3 1
a3 1
   2001, 2002, 2003, 2004, 2005, 2006
d147 5
a151 4
		  fprintf (fp, _("no symbol"));
		else if (! demangling)
		  fprintf (fp, "%s", name);
		else
d155 8
a162 3
		    demangled = demangle (name);
		    fprintf (fp, "%s", demangled);
		    free (demangled);
d164 1
a441 42
/* Wrapper around cplus_demangle.  Strips leading underscores and
   other such chars that would otherwise confuse the demangler.  */

char *
demangle (const char *name)
{
  char *res;
  const char *p;

  if (output_bfd != NULL
      && bfd_get_symbol_leading_char (output_bfd) == name[0])
    ++name;

  /* This is a hack for better error reporting on XCOFF, PowerPC64-ELF
     or the MS PE format.  These formats have a number of leading '.'s
     on at least some symbols, so we remove all dots to avoid
     confusing the demangler.  */
  p = name;
  while (*p == '.')
    ++p;

  res = cplus_demangle (p, DMGL_ANSI | DMGL_PARAMS);
  if (res)
    {
      size_t dots = p - name;

      /* Now put back any stripped dots.  */
      if (dots != 0)
	{
	  size_t len = strlen (res) + 1;
	  char *add_dots = xmalloc (len + dots);

	  memcpy (add_dots, name, dots);
	  memcpy (add_dots + dots, res, len);
	  free (res);
	  res = add_dots;
	}
      return res;
    }
  return xstrdup (name);
}

d480 3
a482 1
  va_list arg;
d484 4
a487 3
  va_start (arg, fmt);
  vfinfo (config.map_file, fmt, arg, FALSE);
  va_end (arg);
@


1.28
log
@	* ldlang.c (lang_size_sections_1): Revert 2005-11-16 functional
	changes to section alignment.
	* ldmisc.c (vfinfo): Handle %ld and %lu.
@
text
@d3 1
a3 1
   2001, 2002, 2003, 2004, 2005
d340 1
a340 1
			    lfinfo (fp, _("%B: In function `%T'"),
d356 1
a356 1
		      lfinfo (fp, "%B", abfd);
d359 1
a359 1
		      fprintf (fp, ":%s", filename);
d362 5
a366 8
		      lfinfo (fp, ":%T", functionname);
		    else if (filename != NULL)
		      {
			if (linenumber != 0)
			  fprintf (fp, ":%u", linenumber);
			else
			  lfinfo (fp, ":(%A+0x%v)", section, offset);
		      }
@


1.28.2.1
log
@	Backport:
	2006-03-30  Jakub Jelinek  <jakub@@redhat.com>
	* ldmisc.c (vfinfo): Revert 2005-10-05 changes.  If
	bfd_find_nearest_line succeeded for %C or %D, but filename
	is NULL, print section+offset at the end.
@
text
@d3 1
a3 1
   2001, 2002, 2003, 2004, 2005, 2006
d340 1
a340 1
			    lfinfo (fp, _("%B: In function `%T':\n"),
d356 1
a356 1
		      lfinfo (fp, "%B:", abfd);
d359 1
a359 1
		      fprintf (fp, "%s:", filename);
d362 8
a369 5
		      lfinfo (fp, "%T", functionname);
		    else if (filename != NULL && linenumber != 0)
		      fprintf (fp, "%u", linenumber);
		    else
		      lfinfo (fp, "(%A+0x%v)", section, offset);
@


1.27
log
@2005-10-05  H.J. Lu  <hongjiu.lu@@intel.com>

	PR ld/1396
	* ldcref.c (check_refs): Accept bfd_boolean.
	(check_local_sym_xref): Pass FALSE to check_refs.
	(check_nocrossref): Pass TRUE to check_refs.
	(check_refs_info): Add bfd_boolean.
	(check_refs): Add bfd_boolean to check_refs_info.
	(check_reloc_refs): Match relocations with proper symbols.

	* ldmisc.c (vfinfo): Don't add extra ":\n".
@
text
@d58 2
a82 4
	    default:
	      fprintf (fp, "%%%c", fmt[-1]);
	      break;

d408 19
@


1.26
log
@include/
	* bfdlink.h (struct bfd_link_callbacks): Add einfo.
bfd/
	* configure.in: Bump version
	* configure: Regenerate.
	* elflink.c (elf_link_input_bfd): Use einfo linker callback to print
	discarded section sym refs and kill linker output.
	* simple.c (simple_dummy_einfo): New function.
	(bfd_simple_get_relocated_section_contents): Init callbacks.einfo.
ld/
	* ldmain.c (link_callbacks): Add einfo.
	(add_archive_element): Use passed info, not link_info.
	(constructor_callback): Likewise.
	(reloc_overflow): Don't handle null bfd specially.
	(reloc_dangerous, unattached_reloc): Likewise.
	* ldmisc.c (vfinfo <B>): Print "ld generated" for null bfd.
	(vfinfo <C, D, G>): Handle null bfd.  Wrap comments.
@
text
@d342 1
a342 1
			    lfinfo (fp, _("%B: In function `%T':\n"),
d358 1
a358 1
		      lfinfo (fp, "%B:", abfd);
d361 1
a361 1
		      fprintf (fp, "%s:", filename);
d364 1
a364 1
		      lfinfo (fp, "%T", functionname);
d368 1
a368 1
			  fprintf (fp, "%u", linenumber);
d370 1
a370 1
			  lfinfo (fp, "(%A+0x%v)", section, offset);
@


1.25
log
@Update FSF addresses
@
text
@d193 1
a193 1
		  fprintf (fp, "<none>");
d278 5
a282 4
		entry = (lang_input_statement_type *) abfd->usrdata;
		if (entry != (lang_input_statement_type *) NULL
		    && entry->asymbols != (asymbol **) NULL)
		  asymbols = entry->asymbols;
d285 8
a292 2
		    long symsize;
		    long symbol_count;
d294 12
a305 11
		    symsize = bfd_get_symtab_upper_bound (abfd);
		    if (symsize < 0)
		      einfo (_("%B%F: could not read symbols\n"), abfd);
		    asymbols = xmalloc (symsize);
		    symbol_count = bfd_canonicalize_symtab (abfd, asymbols);
		    if (symbol_count < 0)
		      einfo (_("%B%F: could not read symbols\n"), abfd);
		    if (entry != (lang_input_statement_type *) NULL)
		      {
			entry->asymbols = asymbols;
			entry->symbol_count = symbol_count;
d309 2
a310 1
		/* The GNU Coding Standard requires that error messages be of the form:
d314 3
a316 2
		   We do not always have a line number available so if we cannot find
		   them we print out the section name and offset instread.  */
d318 4
a321 3
		if (bfd_find_nearest_line (abfd, section, asymbols, offset,
					   &filename, &functionname,
					   &linenumber))
d325 9
a333 7
			/* Detect the case where we are printing out a message
			   for the same function as the last call to vinfo ("%C").
			   In this situation do not print out the ABFD filename
			   or the function name again.  Note - we do still print
			   out the source filename, as this will allow programs
			   that parse the linker's output (eg emacs) to correctly
			   locate multiple errors in the same source file.  */
@


1.24
log
@update copyright dates
@
text
@d21 2
a22 2
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */
@


1.23
log
@PR binutils/609
* ldmisc.c (vfinfo): Add an extra argument: is_warning.  Use this to determine
whether config.make_executable should be set to FALSE in conjunction with
config.fatal_warnings.
(info_msg, minfo, lfinof): Pass FALSE as the extra argument.
(einfo): Pass TRUE as the extra argument.
@
text
@d3 1
a3 1
   2002, 2003, 2004, 2005
@


1.22
log
@PR binutils/614
* ldmisc.c (vfinfo): Alter output to conform to the GNU Coding Standard's
specification for parsable error messages.
@
text
@d3 1
a3 1
   2002, 2003, 2004
d64 1
a64 1
vfinfo (FILE *fp, const char *fmt, va_list arg)
d401 1
a401 1
  if (config.fatal_warnings)
d461 1
a461 1
  vfinfo (stdout, fmt, arg);
d473 1
a473 1
  vfinfo (stderr, fmt, arg);
d491 1
a491 1
  vfinfo (config.map_file, fmt, arg);
d501 1
a501 1
  vfinfo (file, fmt, arg);
@


1.21
log
@* ldmisc.c (vfinfo): Handle the case where %B is passed a NULL BFD.
@
text
@d301 3
a303 1
		lfinfo (fp, "%B(%A+0x%v)", abfd, section, offset);
d305 2
a311 2
		    bfd_boolean need_colon = TRUE;

d314 7
d329 2
a330 3
			    lfinfo (fp, _(": In function `%T':\n"),
				    functionname);
			    need_colon = FALSE;
d344 2
d348 5
d354 4
a357 3
			if (need_colon)
			  putc (':', fp);
			fputs (filename, fp);
a358 5

		    if (functionname != NULL && fmt[-1] == 'G')
		      lfinfo (fp, ":%T", functionname);
		    else if (filename != NULL && linenumber != 0)
		      fprintf (fp, ":%u", linenumber);
d360 2
@


1.20
log
@bfd/
	* bfd.c (_bfd_default_error_handler): Handle %A and %B.
	(bfd_archive_filename, bfd_get_section_ident): Delete.
	* ecofflink.c (bfd_ecoff_debug_accumulate_other): Don't call
	bfd_archive_filename.
	* elflink.c (elf_link_input_bfd): Don't use callbacks->error_handler
	to warn about symbols in discarded sections.  Use _bfd_error_handler.
	* aout-adobe.c (aout_adobe_callback): See below.
	* aout-cris.c (swap_ext_reloc_in): ..
	* coff-arm.c (find_thumb_glue, find_arm_glue,
	coff_arm_relocate_section, bfd_arm_process_before_allocation,
	coff_arm_merge_private_bfd_data, _bfd_coff_arm_set_private_flags,
	coff_arm_copy_private_bfd_data): ..
	* coff-i860.c (i860_reloc_processing): ..
	* coff-mcore.c (mcore_coff_unsupported_reloc,
	coff_mcore_relocate_section): ..
	* coff-ppc.c (coff_ppc_relocate_section): ..
	* coff-rs6000.c (xcoff_create_csect_from_smclas
	* coff-sh.c (sh_relax_section, sh_relax_delete_bytes,
	sh_swap_insns, sh_relocate_section): ..
	* coff-tic54x.c (tic54x_reloc_processing): ..
	* coff-tic80.c (coff_tic80_relocate_section): ..
	* coff64-rs6000.c (xcoff64_create_csect_from_smclas): ..
	* coffcode.h (styp_to_sec_flags, coff_slurp_line_table,
	coff_slurp_symbol_table, coff_classify_symbol,
	coff_slurp_reloc_table): ..
	* coffgen.c (_bfd_coff_read_string_table): ..
	* cofflink.c (coff_link_add_symbols, _bfd_coff_link_input_bfd,
	_bfd_coff_generic_relocate_section): ..
	* cpu-arm.c (bfd_arm_merge_machines): ..
	* cpu-sh.c (sh_merge_bfd_arch): ..
	* elf-hppa.h (elf_hppa_relocate_section): ..
	* elf.c (bfd_elf_string_from_elf_section, setup_group,
	_bfd_elf_setup_group_pointers, bfd_section_from_shdr,
	assign_section_numbers, _bfd_elf_symbol_from_bfd_symbol,
	copy_private_bfd_data, _bfd_elf_validate_reloc): ..
	* elf32-arm.h (find_thumb_glue, find_arm_glue,
	bfd_elf32_arm_process_before_allocation, elf32_thumb_to_arm_stub,
	elf32_arm_to_thumb_stub, elf32_arm_final_link_relocate,
	elf32_arm_relocate_section, elf32_arm_set_private_flags,
	elf32_arm_copy_private_bfd_data, elf32_arm_merge_private_bfd_data): ..
	* elf32-cris.c (cris_elf_relocate_section, cris_elf_check_relocs,
	cris_elf_merge_private_bfd_data
	* elf32-frv.c (elf32_frv_relocate_section, elf32_frv_check_relocs): ..
	* elf32-gen.c (elf32_generic_link_add_symbols): ..
	* elf32-hppa.c (hppa_add_stub, hppa_build_one_stub,
	elf32_hppa_check_relocs, get_local_syms, final_link_relocate,
	elf32_hppa_relocate_section): ..
	* elf32-i370.c (i370_elf_merge_private_bfd_data,
	i370_elf_check_relocs, i370_elf_relocate_section): ..
	* elf32-i386.c (elf_i386_info_to_howto_rel, elf_i386_check_relocs,
	elf_i386_relocate_section): ..
	* elf32-m32r.c (m32r_elf_relocate_section,
	m32r_elf_merge_private_bfd_data): ..
	* elf32-m68hc1x.c (m68hc12_add_stub,
	_bfd_m68hc11_elf_merge_private_bfd_data): ..
	* elf32-m68k.c (elf_m68k_relocate_section): ..
	* elf32-mcore.c (mcore_elf_unsupported_reloc,
	mcore_elf_relocate_section): ..
	* elf32-ppc.c (ppc_elf_merge_private_bfd_data, bad_shared_reloc,
	ppc_elf_check_relocs, ppc_elf_relocate_section,
	ppc_elf_begin_write_processing): ..
	* elf32-s390.c (elf_s390_check_relocs, invalid_tls_insn,
	elf_s390_relocate_section): ..
	* elf32-sh-symbian.c (sh_symbian_import_as,
	sh_symbian_process_embedded_commands,
	sh_symbian_relocate_section): ..
	* elf32-sh.c (sh_elf_relax_section, sh_elf_relax_delete_bytes,
	sh_elf_swap_insns, sh_elf_relocate_section, sh_elf_check_relocs,
	sh_elf_merge_private_data): ..
	* elf32-sparc.c (elf32_sparc_check_relocs,
	elf32_sparc_relocate_section,
	elf32_sparc_merge_private_bfd_data): ..
	* elf32-v850.c (v850_elf_check_relocs,
	v850_elf_merge_private_bfd_data): ..
	* elf32-xtensa.c (elf_xtensa_check_relocs,
	elf_xtensa_relocate_section, elf_xtensa_merge_private_bfd_data): ..
	* elf64-alpha.c (elf64_alpha_relax_with_lituse,
	elf64_alpha_relax_got_load, elf64_alpha_size_got_sections,
	elf64_alpha_relocate_section_r, elf64_alpha_relocate_section): ..
	* elf64-gen.c (elf64_generic_link_add_symbols): ..
	* elf64-ppc.c (ppc64_elf_merge_private_bfd_data, ppc_add_stub,
	ppc64_elf_check_relocs, ppc64_elf_edit_opd,
	ppc64_elf_relocate_section): ..
	* elf64-s390.c (elf_s390_check_relocs, invalid_tls_insn,
	elf_s390_relocate_section): ..
	* elf64-sh64.c (sh_elf64_relocate_section): ..
	* elf64-sparc.c (sparc64_elf_check_relocs,
	sparc64_elf_add_symbol_hook, sparc64_elf_relocate_section,
	sparc64_elf_merge_private_bfd_data): ..
	* elf64-x86-64.c (elf64_x86_64_check_relocs,
	elf64_x86_64_relocate_section): ..
	* elflink.c (_bfd_elf_add_default_symbol,
	_bfd_elf_link_assign_sym_version, elf_link_read_relocs_from_section,
	_bfd_elf_link_output_relocs, elf_link_add_object_symbols,
	bfd_elf_size_dynamic_sections, elf_link_output_extsym,
	elf_get_linked_section_vma, elf_fixup_link_order,
	bfd_elf_final_link, bfd_elf_gc_record_vtinherit,
	bfd_elf_gc_record_vtinherit, _bfd_elf_section_already_linked): ..
	* elfxx-ia64.c (elfNN_ia64_relax_section,
	elfNN_ia64_relocate_section, elfNN_ia64_merge_private_bfd_data): ..
	* elfxx-mips.c (mips_elf_perform_relocation,
	_bfd_mips_elf_check_relocs,
	_bfd_mips_elf_merge_private_bfd_data): ..
	* ieee.c (ieee_slurp_external_symbols): ..
	* ihex.c (ihex_bad_byte, ihex_scan, ihex_read_section): ..
	* libbfd.c (_bfd_generic_verify_endian_match): ..
	* linker.c (_bfd_generic_link_add_one_symbol,
	_bfd_generic_section_already_linked): ..
	* pdp11.c (translate_to_native_sym_flags): ..
	* pe-mips.c (coff_pe_mips_relocate_section): ..
	* peicode.h (pe_ILF_build_a_bfd): ..
	* srec.c (srec_bad_byte): ..
	* stabs.c (_bfd_link_section_stabs): ..
	* xcofflink.c (xcoff_link_add_symbols, xcoff_link_input_bfd): ..
	Replace all uses of bfd_archive_filename and bfd_get_section_ident
	with corresponding %B and %A in _bfd_error_handler format string.
	Replace occurrences of "fprintf (stderr," with _bfd_error_handler
	calls to use %A and %B.  Fix "against symbol .. from section" and
	similar error messages.  Combine multiple _bfd_error_handler calls
	where they were separated due to bfd_archive_filename deficiencies.
	* bfd-in2.h: Regenerate.
include/
	* bfdlink.h (struct bfd_link_callbacks): Remove "error_handler".
	(LD_DEFINITION_IN_DISCARDED_SECTION): Delete.
ld/
	* ldmain.c (link_callbacks): Remove "error_handler".
	* ldmisc.c: Include elf-bfd.h.
	(vfinfo): Sort comment.  Handle %A.  Use %A instead of
	bfd_get_section_indent.
	(error_handler): Delete.
	* ldmisc.h (error_handler): Delete declaration.
@
text
@d191 4
a194 1
		if (abfd->my_archive)
@


1.19
log
@bfd/

2004-07-01  H.J. Lu  <hongjiu.lu@@intel.com>

	* bfd.c (bfd_get_section_ident): New.

	* elflink.c (elf_link_read_relocs_from_section): Call
	bfd_get_section_ident to identify the section when reporting
	error.
	(_bfd_elf_link_output_relocs): Likewise.
	(elf_link_output_extsym): Likewise.
	(elf_link_input_bfd): Likewise.
	(bfd_elf_gc_record_vtinherit): Likewise.

	* bfd-in2.h: Regenerated.
ld/

2004-07-01  H.J. Lu  <hongjiu.lu@@intel.com>

	* ldmisc.c (vfinfo): Call bfd_get_section_ident to identify
	the section.
@
text
@d2 2
a3 2
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,
   2000, 2002, 2003
d38 1
d42 5
d48 2
d51 1
a52 3
 %E current bfd error or errno
 %I filename from a lang_input_statement_type
 %B filename from a bfd
a53 1
 %X no object output, fail return
a54 1
 %v hex bfd_vma, no leading zeros
d56 2
a57 4
 %C clever filename:linenumber with function
 %D like %C, but no function name
 %G like %D, but only function name
 %R info about a relent
a58 1
 %d integer, like printf
d60 1
d163 24
a269 1
		char *sec_name;
d298 1
a298 5
		sec_name = bfd_get_section_ident (section);
		lfinfo (fp, "%B(%s+0x%v)", abfd,
			sec_name ? sec_name : section->name, offset);
		if (sec_name)
		  free (sec_name);
a517 61

bfd_boolean
error_handler (int id, const char *fmt, ...)
{
  va_list arg;

  va_start (arg, fmt);

  switch (id)
    {
    default:
      break;

    /* We can be called with

	error_handler (-LD_DEFINITION_IN_DISCARDED_SECTION, "", 0);

	to make this error non-fatal and

	error_handler (-LD_DEFINITION_IN_DISCARDED_SECTION, "", 1);

	to make this error fatal.  */
    case -LD_DEFINITION_IN_DISCARDED_SECTION:
    case LD_DEFINITION_IN_DISCARDED_SECTION:
      {
	static struct bfd_hash_table *hash;
	static int fatal = 1;
	const char *name;

	if (id == -LD_DEFINITION_IN_DISCARDED_SECTION)
	  {
	    fatal = va_arg (arg, int);
	    goto out;
	  }

	name = va_arg (arg, const char *);
	/* Only warn once about a particular undefined symbol.  */
	if (hash == NULL)
	  {
	    hash = xmalloc (sizeof (struct bfd_hash_table));
	    if (! bfd_hash_table_init (hash, bfd_hash_newfunc))
	      einfo (_("%F%P: bfd_hash_table_init failed: %E\n"));
	  }

	if (bfd_hash_lookup (hash, name, FALSE, FALSE) != NULL)
	  goto out;

	if (bfd_hash_lookup (hash, name, TRUE, TRUE) == NULL)
	  einfo (_("%F%P: bfd_hash_lookup failed: %E\n"));

	if (fatal)
	  config.make_executable = FALSE;
      }
      break;
    }
  vfinfo (stderr, fmt, arg);

out:
  va_end (arg);
  return TRUE;
}
@


1.18
log
@Convert to C90
@
text
@d244 1
d273 5
a277 1
		lfinfo (fp, "%B(%s+0x%v)", abfd, section->name, offset);
@


1.17
log
@bfd/

2003-06-03  H.J. Lu <hongjiu.lu@@intel.com>

	* elflink.h (elf_link_input_bfd): Call linker error_handler
	for discarded definitions.

include/

2003-06-03  H.J. Lu <hongjiu.lu@@intel.com>

	* bfdlink.h (LD_DEFINITION_IN_DISCARDED_SECTION): New.

ld/

2003-06-03  H.J. Lu <hongjiu.lu@@intel.com>

	* ldmisc.c: Include "bfdlink.h".
	(error_handler): Handle LD_DEFINITION_IN_DISCARDED_SECTION
	and -LD_DEFINITION_IN_DISCARDED_SECTION.

	* Makefile.am: Rebuild dependency.
	* Makefile.in: Regenerated.

ld/testsuite/

2003-06-03  H.J. Lu <hongjiu.lu@@intel.com>

	* ld-discard/extern.d: Updated.
	* ld-discard/start.d: Likewise.
	* ld-discard/static.d: Likewise.
@
text
@a28 2

#ifdef ANSI_PROTOTYPES
a29 4
#else
#include <varargs.h>
#endif

a38 2
static void vfinfo PARAMS ((FILE *, const char *, va_list));

d62 1
a62 4
vfinfo (fp, fmt, arg)
     FILE *fp;
     const char *fmt;
     va_list arg;
d118 1
a118 1
                 8 spaces.  */
d146 1
a146 1
		if (name == (const char *) NULL || *name == 0)
d261 1
a261 1
		    asymbols = (asymbol **) xmalloc (symsize);
d370 1
a370 2
demangle (name)
     const char *name;
d411 1
a411 1
   would hosed by LynxOS, which defines that name in its libc.)  */
d414 1
a414 1
info_msg VPARAMS ((const char *fmt, ...))
d416 1
a416 2
  VA_OPEN (arg, fmt);
  VA_FIXEDARG (arg, const char *, fmt);
d418 1
d420 1
a420 1
  VA_CLOSE (arg);
d426 1
a426 1
einfo VPARAMS ((const char *fmt, ...))
d428 1
a428 2
  VA_OPEN (arg, fmt);
  VA_FIXEDARG (arg, const char *, fmt);
d430 1
d432 1
a432 1
  VA_CLOSE (arg);
d436 1
a436 3
info_assert (file, line)
     const char *file;
     unsigned int line;
d444 1
a444 1
minfo VPARAMS ((const char *fmt, ...))
d446 1
a446 2
  VA_OPEN (arg, fmt);
  VA_FIXEDARG (arg, const char *, fmt);
d448 1
d450 1
a450 1
  VA_CLOSE (arg);
d454 1
a454 1
lfinfo VPARAMS ((FILE *file, const char *fmt, ...))
d456 1
a456 3
  VA_OPEN (arg, fmt);
  VA_FIXEDARG (arg, FILE *, file);
  VA_FIXEDARG (arg, const char *, fmt);
d458 1
d460 1
a460 1
  VA_CLOSE (arg);
d466 1
a466 1
print_space ()
d472 1
a472 1
print_nl ()
d481 1
a481 4
ld_abort (file, line, fn)
     const char *file;
     int line;
     const char *fn;
d494 1
a494 1
error_handler VPARAMS ((int id, const char *fmt, ...))
d496 1
a496 2
  VA_OPEN (arg, fmt);
  VA_FIXEDARG (arg, const char *, fmt);
d506 1
a506 1
    
d508 1
a508 1
	
d531 1
a531 2
	    hash = ((struct bfd_hash_table *)
		    xmalloc (sizeof (struct bfd_hash_table)));
d548 1
d550 1
a550 1
  VA_CLOSE (arg);
@


1.16
log
@include/

	* bfdlink.h (bfd_link_callbacks): Add error_handler.

ld/

	* ldmain.c (link_callbacks): Initialize error_handler.

	* ldmisc.c (error_handler): New function.

	* ldmisc.h (error_handler): New prototype.
@
text
@d25 1
d512 1
a512 1
error_handler VPARAMS ((int id ATTRIBUTE_UNUSED, const char *fmt, ...))
d517 50
d568 1
@


1.15
log
@Fix memory leaks
@
text
@d509 11
@


1.14
log
@s/boolean/bfd_boolean/ s/true/TRUE/ s/false/FALSE/.  Simplify
comparisons of bfd_boolean vars with TRUE/FALSE.  Formatting.
@
text
@d3 1
a3 1
   2000, 2002
d7 1
a7 1
This file is part of GLD, the Gnu Linker.
d9 14
a22 14
GLD is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GLD is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GLD; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.  */
d330 3
@


1.13
log
@	* emultempl/aix.em: Use include <> for generated headers.
	* emultempl/beos.em: Likewise.
	* emultempl/elf32.em: Likewise.
	* emultempl/pe.em: Likewise.
	* ldctor.c: Likewise.
	* ldexp.c: Likewise.
	* ldfile.c: Likewise.
	* ldlang.c: Likewise.
	* ldlex.c: Likewise.
	* ldlex.l: Likewise.
	* ldmain.c: Likewise.
	* ldmisc.c: Likewise.
	* ldwrite.c: Likewise.
	* lexsup.c: Likewise.
	* mri.c: Likewise.
	* pe-dll.c: Likewise.
@
text
@d74 1
a74 1
  boolean fatal = false;
d100 1
a100 1
	      config.make_executable = false;
d185 1
a185 1
	      fatal = true;
d253 1
a253 1
		boolean discard_last;
d284 1
a284 1
		discard_last = true;
d289 1
a289 1
		    boolean need_colon = true;
d303 1
a303 1
			    need_colon = false;
d315 1
a315 1
			discard_last = false;
d367 1
a367 1
    config.make_executable = false;
d369 1
a369 1
  if (fatal == true)
@


1.12
log
@	* ldmisc.c (vfinfo <%C,%D,%G>): Always output bfd, section and offset.
@
text
@d39 1
a39 1
#include "ldgram.h"
@


1.11
log
@	* ldmisc.c (demangle): Move so that it doesn't intrude between
	vfinfo comment and body.  Add comment.
@
text
@d239 2
a240 3
	      /* Clever filename:linenumber with function name if possible,
		 or section name as a last resort.  The arguments are a BFD,
		 a section, and an offset.  */
d282 2
d289 3
a291 9
		    if (functionname != NULL && fmt[-1] == 'G')
		      {
			lfinfo (fp, "%B:", abfd);
			if (filename != NULL
			    && strcmp (filename, bfd_get_filename (abfd)) != 0)
			  fprintf (fp, "%s:", filename);
			lfinfo (fp, "%T", functionname);
		      }
		    else if (functionname != NULL && fmt[-1] == 'C')
a292 3
			if (filename == (char *) NULL)
			  filename = abfd->filename;

d297 2
a298 1
			    || strcmp (last_file, filename) != 0
d301 3
a303 5
			    /* We use abfd->filename in this initial line,
			       in case filename is a .h file or something
			       similarly unhelpful.  */
			    lfinfo (fp, _("%B: In function `%T':\n"),
				    abfd, functionname);
d308 3
a310 1
			    last_file = xstrdup (filename);
a315 5
			if (linenumber != 0)
			  fprintf (fp, "%s:%u", filename, linenumber);
			else
			  lfinfo (fp, "%s(%s+0x%v)", filename, section->name,
				  offset);
d317 2
a318 2
		    else if (filename == NULL
			     || strcmp (filename, abfd->filename) == 0)
d320 3
a322 4
			lfinfo (fp, "%B(%s+0x%v)", abfd, section->name,
				offset);
			if (linenumber != 0)
			  lfinfo (fp, ":%u", linenumber);
d324 5
a328 5
		    else if (linenumber != 0)
		      lfinfo (fp, "%B:%s:%u", abfd, filename, linenumber);
		    else
		      lfinfo (fp, "%B(%s+0x%v):%s", abfd, section->name,
			      offset, filename);
a329 2
		else
		  lfinfo (fp, "%B(%s+0x%v)", abfd, section->name, offset);
@


1.11.2.1
log
@        * emultempl/aix.em: Use include <> for generated headers.
        * emultempl/beos.em: Likewise.
        * emultempl/elf32.em: Likewise.
        * emultempl/pe.em: Likewise.
        * ldctor.c: Likewise.
        * ldexp.c: Likewise.
        * ldfile.c: Likewise.
        * ldlang.c: Likewise.
        * ldlex.c: Likewise.
        * ldlex.l: Likewise.
        * ldmain.c: Likewise.
        * ldmisc.c: Likewise.
        * ldwrite.c: Likewise.
        * lexsup.c: Likewise.
        * mri.c: Likewise.
        * pe-dll.c: Likewise.
@
text
@d39 1
a39 1
#include <ldgram.h>
@


1.10
log
@	* ldmisc.c (demangle): Restore dots stripped from sym name.
@
text
@a67 40
char *
demangle (string)
     const char *string;
{
  char *res;
  const char *p;

  if (output_bfd != NULL
      && bfd_get_symbol_leading_char (output_bfd) == string[0])
    ++string;

  /* This is a hack for better error reporting on XCOFF, PowerPC64-ELF
     or the MS PE format.  These formats have a number of leading '.'s
     on at least some symbols, so we remove all dots to avoid
     confusing the demangler.  */
  p = string;
  while (*p == '.')
    ++p;

  res = cplus_demangle (p, DMGL_ANSI | DMGL_PARAMS);
  if (res)
    {
      size_t dots = p - string;

      /* Now put back any stripped dots.  */
      if (dots != 0)
	{
	  size_t len = strlen (res) + 1;
	  char *add_dots = xmalloc (len + dots);

	  memcpy (add_dots, string, dots);
	  memcpy (add_dots + dots, res, len);
	  free (res);
	  res = add_dots;
	}
      return res;
    }
  return xstrdup (string);
}

d386 43
@


1.9
log
@	* ldmisc.c (demangle): Put back dots when string not demangled.
@
text
@d81 2
a82 1
     on at least some symbols, so we remove all dots.  */
d88 18
a105 1
  return res ? res : xstrdup (string);
@


1.8
log
@	* ldmisc.c (USE_STDARG): Remove.
	(info_msg): Define using VPARAMS, VA_OPEN, VA_FIXEDARG, VA_CLOSE.
	(einfo): Likewise.
	(minfo): Likewise.
	(lfinfo): Likewise.

	* ldmisc.h: Remove #ifdef ANSI_PROTOTYPES and non-ansi
	declarations.  Update copyright.
@
text
@d2 2
a3 1
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000
d73 1
d79 6
a84 5
  /* This is a hack for better error reporting on XCOFF, or the MS PE
     format.  Xcoff has a single '.', while the NT PE for PPC has
     '..'.  So we remove all of them.  */
  while (string[0] == '.')
    ++string;
d86 1
a86 1
  res = cplus_demangle (string, DMGL_ANSI | DMGL_PARAMS);
@


1.7
log
@2001-05-02  H.J. Lu  <hjl@@gnu.org>

	* ldfile.c: Include "libiberty.h".
	* ldlex.l: Likewise.

	* ldmisc.c (buystring): Removed.
	* ldmisc.h: Likewise.

	* ldfile.c: Replace buystring with xstrdup.
	* ldlang.c: Likewise.
	* ldlex.l: Likewise.
	* ldmain.c: Likewise.
	* ldmisc.c: Likewise.
	* lexsup.c: Likewise.
	* mpw-eppcmac.c: Likewise.
@
text
@a29 1
#define USE_STDARG 1
a31 1
#define USE_STDARG 0
d413 1
a413 6
#if USE_STDARG
info_msg (const char *fmt, ...)
#else
info_msg (va_alist)
     va_dcl
#endif
d415 2
a416 10
  va_list arg;

#if ! USE_STDARG
  const char *fmt;

  va_start (arg);
  fmt = va_arg (arg, const char *);
#else
  va_start (arg, fmt);
#endif
d419 1
a419 1
  va_end (arg);
d425 1
a425 6
#if USE_STDARG
einfo (const char *fmt, ...)
#else
einfo (va_alist)
     va_dcl
#endif
d427 2
a428 10
  va_list arg;

#if ! USE_STDARG
  const char *fmt;

  va_start (arg);
  fmt = va_arg (arg, const char *);
#else
  va_start (arg, fmt);
#endif
d431 1
a431 1
  va_end (arg);
d445 1
a445 6
#if USE_STDARG
minfo (const char *fmt, ...)
#else
minfo (va_alist)
     va_dcl
#endif
d447 2
a448 9
  va_list arg;

#if ! USE_STDARG
  const char *fmt;
  va_start (arg);
  fmt = va_arg (arg, const char *);
#else
  va_start (arg, fmt);
#endif
d451 1
a451 1
  va_end (arg);
d455 1
a455 6
#if USE_STDARG
lfinfo (FILE *file, const char *fmt, ...)
#else
lfinfo (va_alist)
     va_dcl
#endif
d457 3
a459 12
  va_list arg;

#if ! USE_STDARG
  FILE *file;
  const char *fmt;

  va_start (arg);
  file = va_arg (arg, FILE *);
  fmt = va_arg (arg, const char *);
#else
  va_start (arg, fmt);
#endif
d462 1
a462 1
  va_end (arg);
@


1.6
log
@* ld.texinfo: Document --fatal-warnings.
* ld.1: Regenerate.

* ldmisc.c (vfinfo): Set flag to inhibit making executable if
warnings have been turned into errors.
* lexsup.c (OPTION_WARN_FATAL): Define.
(ld_options): Entry for --fatal-warnings.
(parse_args): Handle OPTION_WARN_FATAL.
* ld.h (ld_config_type): Add fatal_warnings field.
@
text
@d338 1
a338 1
			    last_file = buystring (filename);
d341 1
a341 1
			    last_function = buystring (functionname);
a467 10
}

char *
buystring (x)
     CONST char *CONST x;
{
  size_t l = strlen (x) + 1;
  char *r = xmalloc (l);
  memcpy (r, x, l);
  return r;
@


1.5
log
@Fixtypos in ChangeLogs, fix copyright dates in files
@
text
@d402 3
@


1.4
log
@2000-09-21  Kazu Hirata  <kazu@@hxi.com>

	* ldmain.c: Fix formatting.
	* ldmisc.c: Likewise.
	* ldver.c: Likewise.
	* ldwrite.c: Likewise.
@
text
@d2 1
a2 1
   Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000
@


1.4.2.1
log
@Merge from mainline.
@
text
@d2 1
a2 1
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000
d338 1
a338 1
			    last_file = xstrdup (filename);
d341 1
a341 1
			    last_function = xstrdup (functionname);
d465 10
@


1.3
log
@Most of these changes are really only cosmetic.  The readelf.c patch
fixes a thinko in get_dynamic_flags.  I found at least one message
string that included a `%' being passed to printf in the format
argument.
@
text
@d79 4
a82 4
  /* This is a hack for better error reporting on XCOFF, or the MS PE   */
  /* format.  Xcoff has a single '.', while the NT PE for PPC has '..'. */
  /* So we remove all of them.                                          */
  while(string[0] == '.')
d99 1
a99 1
      while (*fmt != '%' && *fmt != '\0') 
d105 1
a105 1
      if (*fmt == '%') 
d107 2
a108 2
	  fmt ++;
	  switch (*fmt++) 
d111 1
a111 1
	      fprintf (fp,"%%%c", fmt[-1]);
d194 1
a194 1
	      { 
d205 1
a205 1
	      /* error is fatal */
d210 1
a210 1
	      /* print program name */
d236 1
a236 1
	      /* print script file and linenumber */
d246 1
a246 1
	      /* Print all that's interesting about a relent */
d249 1
a249 1
	
d256 1
a256 1
	
d358 1
a358 1
		    else if (linenumber != 0) 
d383 1
a383 1
		
d402 2
a403 2
  if (fatal == true) 
    xexit(1);
d406 1
a406 1
/* Format info message and print on stdout. */
d434 1
a434 1
/* ('e' for error.) Format info message and print on stderr. */
d459 1
a459 1
void 
d471 3
a473 3
  size_t l = strlen(x)+1;
  char *r = xmalloc(l);
  memcpy(r, x,l);
d477 1
a477 1
/* ('m' for map) Format info message and print on map. */
d528 1
a528 1
void 
d534 1
a534 1
void 
@


1.2
log
@1999-09-12  Donn Terry  <donn@@interix.com>

	* ld.h (ld_abort): Declare.
	(abort): Define.
	* ldmisc.c (ld_abort): Define.
@
text
@d2 1
a2 1
   Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 1999
d216 1
a216 1
	      fprintf (fp, bfd_errmsg (bfd_get_error ()));
@


1.1
log
@Initial revision
@
text
@d539 19
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

