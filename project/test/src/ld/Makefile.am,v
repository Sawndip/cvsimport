head	1.337;
access;
symbols
	binutils-2_24-branch:1.336.0.2
	binutils-2_24-branchpoint:1.336
	binutils-2_21_1:1.293.2.1
	binutils-2_23_2:1.315.2.2
	binutils-2_23_1:1.315.2.1
	binutils-2_23:1.315.2.1
	binutils-2_23-branch:1.315.0.2
	binutils-2_23-branchpoint:1.315
	binutils-2_22_branch:1.305.0.4
	binutils-2_22:1.305
	binutils-2_22-branch:1.305.0.2
	binutils-2_22-branchpoint:1.305
	binutils-2_21:1.293
	binutils-2_21-branch:1.293.0.2
	binutils-2_21-branchpoint:1.293
	binutils-2_20_1:1.274.2.1
	binutils-2_20:1.274
	binutils-arc-20081103-branch:1.254.0.4
	binutils-arc-20081103-branchpoint:1.254
	binutils-2_20-branch:1.274.0.2
	binutils-2_20-branchpoint:1.274
	dje-cgen-play1-branch:1.266.0.2
	dje-cgen-play1-branchpoint:1.266
	arc-20081103-branch:1.254.0.2
	arc-20081103-branchpoint:1.254
	binutils-2_19_1:1.253.2.3
	binutils-2_19:1.253.2.1
	binutils-2_19-branch:1.253.0.2
	binutils-2_19-branchpoint:1.253
	binutils-2_18:1.242
	binutils-2_18-branch:1.242.0.2
	binutils-2_18-branchpoint:1.242
	binutils-csl-coldfire-4_1-32:1.203.2.7
	binutils-csl-sourcerygxx-4_1-32:1.203.2.7
	binutils-csl-innovasic-fido-3_4_4-33:1.203.2.7
	binutils-csl-sourcerygxx-3_4_4-32:1.169
	binutils-csl-coldfire-4_1-30:1.203.2.6
	binutils-csl-sourcerygxx-4_1-30:1.203.2.6
	binutils-csl-coldfire-4_1-28:1.203.2.6
	binutils-csl-sourcerygxx-4_1-29:1.203.2.7
	binutils-csl-sourcerygxx-4_1-28:1.203.2.6
	binutils-csl-arm-2006q3-27:1.203.2.6
	binutils-csl-sourcerygxx-4_1-27:1.203.2.6
	binutils-csl-arm-2006q3-26:1.203.2.6
	binutils-csl-sourcerygxx-4_1-26:1.203.2.6
	binutils-csl-sourcerygxx-4_1-25:1.203.2.6
	binutils-csl-sourcerygxx-4_1-24:1.203.2.5
	binutils-csl-sourcerygxx-4_1-23:1.203.2.5
	binutils-csl-sourcerygxx-4_1-21:1.203.2.5
	binutils-csl-arm-2006q3-21:1.203.2.5
	binutils-csl-sourcerygxx-4_1-22:1.203.2.5
	binutils-csl-palmsource-arm-prelinker-1_0-1:1.203.2.5
	binutils-csl-sourcerygxx-4_1-20:1.203.2.5
	binutils-csl-arm-2006q3-19:1.203.2.5
	binutils-csl-sourcerygxx-4_1-19:1.203.2.5
	binutils-csl-sourcerygxx-4_1-18:1.203.2.4
	binutils-csl-renesas-4_1-9:1.203.2.4
	binutils-csl-sourcerygxx-3_4_4-25:1.169
	binutils-csl-renesas-4_1-8:1.203.2.3
	binutils-csl-renesas-4_1-7:1.203.2.3
	binutils-csl-renesas-4_1-6:1.203.2.3
	binutils-csl-sourcerygxx-4_1-17:1.203.2.3
	binutils-csl-sourcerygxx-4_1-14:1.203.2.1
	binutils-csl-sourcerygxx-4_1-15:1.203.2.1
	binutils-csl-sourcerygxx-4_1-13:1.203.2.1
	binutils-2_17:1.209.2.2
	binutils-csl-sourcerygxx-4_1-12:1.203.2.1
	binutils-csl-sourcerygxx-3_4_4-21:1.203.2.1
	binutils-csl-wrs-linux-3_4_4-24:1.169
	binutils-csl-wrs-linux-3_4_4-23:1.169
	binutils-csl-sourcerygxx-4_1-9:1.203.2.1
	binutils-csl-sourcerygxx-4_1-8:1.203.2.1
	binutils-csl-sourcerygxx-4_1-7:1.203.2.1
	binutils-csl-arm-2006q1-6:1.203.2.1
	binutils-csl-sourcerygxx-4_1-6:1.203.2.1
	binutils-csl-wrs-linux-3_4_4-22:1.169
	binutils-csl-coldfire-4_1-11:1.203.2.1
	binutils-csl-sourcerygxx-3_4_4-19:1.203.2.1
	binutils-csl-coldfire-4_1-10:1.203.2.1
	binutils-csl-sourcerygxx-4_1-5:1.203.2.1
	binutils-csl-sourcerygxx-4_1-4:1.203.2.1
	binutils-csl-wrs-linux-3_4_4-21:1.169
	binutils-csl-morpho-4_1-4:1.203.2.1
	binutils-csl-sourcerygxx-3_4_4-17:1.203.2.1
	binutils-csl-wrs-linux-3_4_4-20:1.169
	binutils-2_17-branch:1.209.0.2
	binutils-2_17-branchpoint:1.209
	binutils-csl-2_17-branch:1.203.0.2
	binutils-csl-2_17-branchpoint:1.203
	binutils-csl-gxxpro-3_4-branch:1.169.0.6
	binutils-csl-gxxpro-3_4-branchpoint:1.169
	binutils-2_16_1:1.169
	binutils-csl-arm-2005q1b:1.169
	binutils-2_16:1.169
	binutils-csl-arm-2005q1a:1.169
	binutils-csl-arm-2005q1-branch:1.169.0.4
	binutils-csl-arm-2005q1-branchpoint:1.169
	binutils-2_16-branch:1.169.0.2
	binutils-2_16-branchpoint:1.169
	csl-arm-2004-q3d:1.163
	csl-arm-2004-q3:1.160
	binutils-2_15:1.149.6.1
	binutils-2_15-branchpoint:1.149
	csl-arm-2004-q1a:1.153
	csl-arm-2004-q1:1.152
	binutils-2_15-branch:1.149.0.6
	cagney_bfdfile-20040213-branch:1.149.0.4
	cagney_bfdfile-20040213-branchpoint:1.149
	cagney_bigcore-20040122-branch:1.149.0.2
	cagney_bigcore-20040122-branchpoint:1.149
	csl-arm-2003-q4:1.148
	binutils-2_14:1.128
	binutils-2_14-branch:1.128.0.2
	binutils-2_14-branchpoint:1.128
	binutils-2_13_2_1:1.105.2.1
	binutils-2_13_2:1.105
	binutils-2_13_1:1.105
	binutils-2_13:1.105
	binutils-2_13-branchpoint:1.105
	binutils-2_13-branch:1.105.0.2
	binutils-2_12_1:1.87.2.3
	binutils-2_12:1.87.2.1
	binutils-2_12-branch:1.87.0.2
	binutils-2_12-branchpoint:1.87
	cygnus_cvs_20020108_pre:1.81
	binutils-2_11_2:1.50.2.3
	binutils-2_11_1:1.50.2.3
	binutils-2_11:1.50.2.2
	x86_64versiong3:1.55
	binutils-2_11-branch:1.50.0.2
	binutils-2_10_1:1.25.2.2
	binutils-2_10:1.25.2.1
	binutils-2_10-branch:1.25.0.2
	binutils-2_10-branchpoint:1.25
	binutils_latest_snapshot:1.337
	repo-unification-2000-02-06:1.19
	binu_ss_19990721:1.9
	binu_ss_19990602:1.6
	binu_ss_19990502:1.1.1.1
	cygnus:1.1.1;
locks; strict;
comment	@# @;


1.337
date	2013.09.20.10.27.11;	author cltang;	state Exp;
branches;
next	1.336;

1.336
date	2013.06.26.10.56.05;	author yufeng;	state Exp;
branches;
next	1.335;

1.335
date	2013.06.26.10.41.42;	author yufeng;	state Exp;
branches;
next	1.334;

1.334
date	2013.06.23.20.08.23;	author rsandifo;	state Exp;
branches;
next	1.333;

1.333
date	2013.06.22.16.44.15;	author rsandifo;	state Exp;
branches;
next	1.332;

1.332
date	2013.05.02.21.06.14;	author nickc;	state Exp;
branches;
next	1.331;

1.331
date	2013.04.25.13.22.52;	author amodra;	state Exp;
branches;
next	1.330;

1.330
date	2013.04.16.14.50.20;	author nickc;	state Exp;
branches;
next	1.329;

1.329
date	2013.04.15.12.04.48;	author nickc;	state Exp;
branches;
next	1.328;

1.328
date	2013.02.20.10.24.10;	author amodra;	state Exp;
branches;
next	1.327;

1.327
date	2013.02.06.23.22.18;	author sandra;	state Exp;
branches;
next	1.326;

1.326
date	2013.01.23.10.31.13;	author amodra;	state Exp;
branches;
next	1.325;

1.325
date	2013.01.19.19.36.31;	author hjl;	state Exp;
branches;
next	1.324;

1.324
date	2013.01.10.09.49.19;	author nickc;	state Exp;
branches;
next	1.323;

1.323
date	2013.01.08.02.02.34;	author amodra;	state Exp;
branches;
next	1.322;

1.322
date	2013.01.04.17.22.51;	author nickc;	state Exp;
branches;
next	1.321;

1.321
date	2012.12.17.16.56.04;	author nickc;	state Exp;
branches;
next	1.320;

1.320
date	2012.12.11.22.23.14;	author roland;	state Exp;
branches;
next	1.319;

1.319
date	2012.11.30.18.28.37;	author amylaar;	state Exp;
branches;
next	1.318;

1.318
date	2012.11.09.17.36.16;	author nickc;	state Exp;
branches;
next	1.317;

1.317
date	2012.11.09.16.25.10;	author eager;	state Exp;
branches;
next	1.316;

1.316
date	2012.08.13.14.52.50;	author nickc;	state Exp;
branches;
next	1.315;

1.315
date	2012.06.02.10.19.24;	author schwab;	state Exp;
branches
	1.315.2.1;
next	1.314;

1.314
date	2012.05.08.12.14.14;	author amodra;	state Exp;
branches;
next	1.313;

1.313
date	2012.05.03.13.12.04;	author nickc;	state Exp;
branches;
next	1.312;

1.312
date	2012.04.12.13.01.09;	author nickc;	state Exp;
branches;
next	1.311;

1.311
date	2012.04.12.07.35.05;	author nickc;	state Exp;
branches;
next	1.310;

1.310
date	2012.04.03.16.01.31;	author roland;	state Exp;
branches;
next	1.309;

1.309
date	2012.02.25.19.51.33;	author walt;	state Exp;
branches;
next	1.308;

1.308
date	2011.11.21.13.22.42;	author amodra;	state Exp;
branches;
next	1.307;

1.307
date	2011.11.02.03.09.07;	author dj;	state Exp;
branches;
next	1.306;

1.306
date	2011.10.25.11.18.11;	author nickc;	state Exp;
branches;
next	1.305;

1.305
date	2011.07.22.20.22.37;	author hjl;	state Exp;
branches;
next	1.304;

1.304
date	2011.07.15.01.45.50;	author amodra;	state Exp;
branches;
next	1.303;

1.303
date	2011.06.13.15.18.49;	author nickc;	state Exp;
branches;
next	1.302;

1.302
date	2011.06.03.10.36.38;	author nickc;	state Exp;
branches;
next	1.301;

1.301
date	2011.05.13.18.15.33;	author bernds;	state Exp;
branches;
next	1.300;

1.300
date	2011.03.22.18.10.46;	author eweddington;	state Exp;
branches;
next	1.299;

1.299
date	2011.01.22.19.25.36;	author hjl;	state Exp;
branches;
next	1.298;

1.298
date	2011.01.14.02.03.42;	author amodra;	state Exp;
branches;
next	1.297;

1.297
date	2010.12.31.11.00.54;	author rsandifo;	state Exp;
branches;
next	1.296;

1.296
date	2010.12.31.00.33.35;	author hjl;	state Exp;
branches;
next	1.295;

1.295
date	2010.12.15.14.56.36;	author hjl;	state Exp;
branches;
next	1.294;

1.294
date	2010.11.15.22.30.47;	author vapier;	state Exp;
branches;
next	1.293;

1.293
date	2010.11.03.03.22.01;	author amodra;	state Exp;
branches
	1.293.2.1;
next	1.292;

1.292
date	2010.10.14.01.31.29;	author davek;	state Exp;
branches;
next	1.291;

1.291
date	2010.10.12.18.39.35;	author ro;	state Exp;
branches;
next	1.290;

1.290
date	2010.10.06.06.01.53;	author rwild;	state Exp;
branches;
next	1.289;

1.289
date	2010.10.06.04.58.34;	author rwild;	state Exp;
branches;
next	1.288;

1.288
date	2010.08.20.21.18.39;	author macro;	state Exp;
branches;
next	1.287;

1.287
date	2010.06.29.04.17.28;	author amodra;	state Exp;
branches;
next	1.286;

1.286
date	2010.05.28.12.21.17;	author nickc;	state Exp;
branches;
next	1.285;

1.285
date	2010.05.25.15.30.55;	author nickc;	state Exp;
branches;
next	1.284;

1.284
date	2010.05.25.14.02.35;	author nickc;	state Exp;
branches;
next	1.283;

1.283
date	2010.04.27.16.05.54;	author hjl;	state Exp;
branches;
next	1.282;

1.282
date	2010.04.27.14.12.30;	author nickc;	state Exp;
branches;
next	1.281;

1.281
date	2010.04.14.09.27.26;	author gingold;	state Exp;
branches;
next	1.280;

1.280
date	2010.03.25.21.12.32;	author jsm28;	state Exp;
branches;
next	1.279;

1.279
date	2010.03.05.19.48.57;	author ro;	state Exp;
branches;
next	1.278;

1.278
date	2010.02.19.02.59.06;	author amodra;	state Exp;
branches;
next	1.277;

1.277
date	2010.02.10.19.48.15;	author rsandifo;	state Exp;
branches;
next	1.276;

1.276
date	2009.10.19.10.32.12;	author nickc;	state Exp;
branches;
next	1.275;

1.275
date	2009.09.29.14.17.16;	author nickc;	state Exp;
branches;
next	1.274;

1.274
date	2009.09.01.20.56.51;	author rwild;	state Exp;
branches
	1.274.2.1;
next	1.273;

1.273
date	2009.08.24.05.57.44;	author rwild;	state Exp;
branches;
next	1.272;

1.272
date	2009.08.24.05.55.55;	author rwild;	state Exp;
branches;
next	1.271;

1.271
date	2009.08.22.19.02.57;	author rwild;	state Exp;
branches;
next	1.270;

1.270
date	2009.08.22.17.59.33;	author rwild;	state Exp;
branches;
next	1.269;

1.269
date	2009.08.22.17.08.11;	author rwild;	state Exp;
branches;
next	1.268;

1.268
date	2009.08.06.17.38.03;	author nickc;	state Exp;
branches;
next	1.267;

1.267
date	2009.07.25.14.58.55;	author hjl;	state Exp;
branches;
next	1.266;

1.266
date	2009.06.04.06.57.56;	author amodra;	state Exp;
branches;
next	1.265;

1.265
date	2009.05.26.03.20.10;	author amodra;	state Exp;
branches;
next	1.264;

1.264
date	2009.05.22.09.33.15;	author amodra;	state Exp;
branches;
next	1.263;

1.263
date	2009.04.16.15.39.45;	author nickc;	state Exp;
branches;
next	1.262;

1.262
date	2009.03.17.05.01.25;	author amodra;	state Exp;
branches;
next	1.261;

1.261
date	2009.03.03.02.41.14;	author amodra;	state Exp;
branches;
next	1.260;

1.260
date	2009.03.02.10.33.07;	author nickc;	state Exp;
branches;
next	1.259;

1.259
date	2009.02.03.15.54.04;	author jsm28;	state Exp;
branches;
next	1.258;

1.258
date	2009.01.12.00.23.57;	author amodra;	state Exp;
branches;
next	1.257;

1.257
date	2008.12.23.19.10.22;	author nickc;	state Exp;
branches;
next	1.256;

1.256
date	2008.12.23.13.52.58;	author gingold;	state Exp;
branches;
next	1.255;

1.255
date	2008.11.14.06.54.40;	author amodra;	state Exp;
branches;
next	1.254;

1.254
date	2008.09.30.07.49.32;	author amodra;	state Exp;
branches
	1.254.4.1;
next	1.253;

1.253
date	2008.08.09.10.15.38;	author amodra;	state Exp;
branches
	1.253.2.1;
next	1.252;

1.252
date	2008.08.09.05.35.13;	author eweddington;	state Exp;
branches;
next	1.251;

1.251
date	2008.08.04.06.55.32;	author amodra;	state Exp;
branches;
next	1.250;

1.250
date	2008.08.03.03.26.02;	author amodra;	state Exp;
branches;
next	1.249;

1.249
date	2008.08.02.16.25.43;	author jkratoch;	state Exp;
branches;
next	1.248;

1.248
date	2008.07.12.08.54.13;	author jiez;	state Exp;
branches;
next	1.247;

1.247
date	2008.07.11.19.24.39;	author jiez;	state Exp;
branches;
next	1.246;

1.246
date	2008.03.25.04.54.03;	author ian;	state Exp;
branches;
next	1.245;

1.245
date	2008.03.13.02.05.22;	author amodra;	state Exp;
branches;
next	1.244;

1.244
date	2007.10.24.04.56.47;	author amodra;	state Exp;
branches;
next	1.243;

1.243
date	2007.08.10.12.36.21;	author hjl;	state Exp;
branches;
next	1.242;

1.242
date	2007.07.13.10.44.28;	author roland;	state Exp;
branches;
next	1.241;

1.241
date	2007.06.29.14.09.33;	author nickc;	state Exp;
branches;
next	1.240;

1.240
date	2007.06.18.10.58.07;	author amodra;	state Exp;
branches;
next	1.239;

1.239
date	2007.06.14.15.31.01;	author hjl;	state Exp;
branches;
next	1.238;

1.238
date	2007.04.26.14.46.59;	author amodra;	state Exp;
branches;
next	1.237;

1.237
date	2007.04.19.10.45.59;	author amodra;	state Exp;
branches;
next	1.236;

1.236
date	2007.04.14.20.44.31;	author sje;	state Exp;
branches;
next	1.235;

1.235
date	2007.03.26.11.10.43;	author amodra;	state Exp;
branches;
next	1.234;

1.234
date	2007.03.15.14.17.19;	author hjl;	state Exp;
branches;
next	1.233;

1.233
date	2007.03.07.22.50.00;	author jsm28;	state Exp;
branches;
next	1.232;

1.232
date	2007.02.28.10.53.19;	author nathan;	state Exp;
branches;
next	1.231;

1.231
date	2007.02.27.08.33.25;	author amodra;	state Exp;
branches;
next	1.230;

1.230
date	2007.02.26.08.58.15;	author amodra;	state Exp;
branches;
next	1.229;

1.229
date	2007.02.17.13.33.57;	author jsm28;	state Exp;
branches;
next	1.228;

1.228
date	2007.02.05.20.16.32;	author brolley;	state Exp;
branches;
next	1.227;

1.227
date	2006.12.12.14.31.48;	author drow;	state Exp;
branches;
next	1.226;

1.226
date	2006.12.11.15.09.44;	author drow;	state Exp;
branches;
next	1.225;

1.225
date	2006.11.28.04.54.06;	author ian;	state Exp;
branches;
next	1.224;

1.224
date	2006.10.25.06.49.21;	author amodra;	state Exp;
branches;
next	1.223;

1.223
date	2006.10.16.21.34.24;	author rsandifo;	state Exp;
branches;
next	1.222;

1.222
date	2006.10.05.01.06.13;	author bwilson;	state Exp;
branches;
next	1.221;

1.221
date	2006.09.20.11.35.08;	author nickc;	state Exp;
branches;
next	1.220;

1.220
date	2006.09.16.23.51.49;	author nickc;	state Exp;
branches;
next	1.219;

1.219
date	2006.09.07.17.16.31;	author hjl;	state Exp;
branches;
next	1.218;

1.218
date	2006.08.21.08.12.46;	author nickc;	state Exp;
branches;
next	1.217;

1.217
date	2006.08.04.13.13.56;	author rsandifo;	state Exp;
branches;
next	1.216;

1.216
date	2006.07.29.08.48.15;	author rsandifo;	state Exp;
branches;
next	1.215;

1.215
date	2006.06.20.16.37.29;	author amodra;	state Exp;
branches;
next	1.214;

1.214
date	2006.06.20.02.22.14;	author amodra;	state Exp;
branches;
next	1.213;

1.213
date	2006.06.02.23.08.12;	author jsm28;	state Exp;
branches;
next	1.212;

1.212
date	2006.05.31.15.14.37;	author drow;	state Exp;
branches;
next	1.211;

1.211
date	2006.05.24.07.36.11;	author nickc;	state Exp;
branches;
next	1.210;

1.210
date	2006.05.02.14.20.46;	author drow;	state Exp;
branches;
next	1.209;

1.209
date	2006.04.11.10.36.26;	author nickc;	state Exp;
branches
	1.209.2.1;
next	1.208;

1.208
date	2006.04.06.21.49.34;	author carlos;	state Exp;
branches;
next	1.207;

1.207
date	2006.04.05.15.40.40;	author amodra;	state Exp;
branches;
next	1.206;

1.206
date	2006.04.05.12.41.57;	author rsandifo;	state Exp;
branches;
next	1.205;

1.205
date	2006.03.26.00.46.13;	author bernds;	state Exp;
branches;
next	1.204;

1.204
date	2006.03.22.09.28.13;	author rsandifo;	state Exp;
branches;
next	1.203;

1.203
date	2006.03.07.08.39.21;	author rsandifo;	state Exp;
branches
	1.203.2.1;
next	1.202;

1.202
date	2006.03.03.09.32.00;	author rsandifo;	state Exp;
branches;
next	1.201;

1.201
date	2006.03.02.08.50.04;	author rsandifo;	state Exp;
branches;
next	1.200;

1.200
date	2006.02.27.16.26.24;	author carlos;	state Exp;
branches;
next	1.199;

1.199
date	2006.02.17.14.36.27;	author nickc;	state Exp;
branches;
next	1.198;

1.198
date	2005.12.27.01.21.01;	author amodra;	state Exp;
branches;
next	1.197;

1.197
date	2005.12.12.11.25.06;	author nathan;	state Exp;
branches;
next	1.196;

1.196
date	2005.11.25.09.21.42;	author jbeulich;	state Exp;
branches;
next	1.195;

1.195
date	2005.11.17.01.01.03;	author mmitchel;	state Exp;
branches;
next	1.194;

1.194
date	2005.10.30.17.40.28;	author hjl;	state Exp;
branches;
next	1.193;

1.193
date	2005.10.25.17.40.11;	author nickc;	state Exp;
branches;
next	1.192;

1.192
date	2005.09.30.18.59.46;	author hjl;	state Exp;
branches;
next	1.191;

1.191
date	2005.09.30.15.23.13;	author clm;	state Exp;
branches;
next	1.190;

1.190
date	2005.08.18.03.50.43;	author amodra;	state Exp;
branches;
next	1.189;

1.189
date	2005.08.08.17.08.03;	author nickc;	state Exp;
branches;
next	1.188;

1.188
date	2005.08.04.04.00.02;	author amodra;	state Exp;
branches;
next	1.187;

1.187
date	2005.07.16.02.03.55;	author amodra;	state Exp;
branches;
next	1.186;

1.186
date	2005.07.14.22.52.17;	author jimb;	state Exp;
branches;
next	1.185;

1.185
date	2005.07.05.13.25.55;	author pbrook;	state Exp;
branches;
next	1.184;

1.184
date	2005.06.30.00.54.03;	author bje;	state Exp;
branches;
next	1.183;

1.183
date	2005.06.29.20.29.59;	author bje;	state Exp;
branches;
next	1.182;

1.182
date	2005.06.07.23.56.50;	author echristo;	state Exp;
branches;
next	1.181;

1.181
date	2005.06.07.21.12.15;	author aldyh;	state Exp;
branches;
next	1.180;

1.180
date	2005.05.21.23.43.59;	author hjl;	state Exp;
branches;
next	1.179;

1.179
date	2005.05.21.22.22.19;	author hjl;	state Exp;
branches;
next	1.178;

1.178
date	2005.05.21.21.31.13;	author hjl;	state Exp;
branches;
next	1.177;

1.177
date	2005.05.19.23.49.51;	author zack;	state Exp;
branches;
next	1.176;

1.176
date	2005.05.17.19.43.52;	author drow;	state Exp;
branches;
next	1.175;

1.175
date	2005.05.17.19.41.28;	author drow;	state Exp;
branches;
next	1.174;

1.174
date	2005.05.15.18.19.44;	author drow;	state Exp;
branches;
next	1.173;

1.173
date	2005.05.05.14.37.24;	author pbrook;	state Exp;
branches;
next	1.172;

1.172
date	2005.04.14.05.26.40;	author amodra;	state Exp;
branches;
next	1.171;

1.171
date	2005.04.12.02.50.28;	author amodra;	state Exp;
branches;
next	1.170;

1.170
date	2005.03.11.19.55.36;	author drow;	state Exp;
branches;
next	1.169;

1.169
date	2005.01.20.19.37.49;	author mmitchel;	state Exp;
branches;
next	1.168;

1.168
date	2005.01.06.16.18.24;	author pbrook;	state Exp;
branches;
next	1.167;

1.167
date	2005.01.04.15.16.25;	author pbrook;	state Exp;
branches;
next	1.166;

1.166
date	2004.11.30.17.20.43;	author nickc;	state Exp;
branches;
next	1.165;

1.165
date	2004.11.19.19.28.39;	author mmitchel;	state Exp;
branches;
next	1.164;

1.164
date	2004.11.08.13.17.26;	author nickc;	state Exp;
branches;
next	1.163;

1.163
date	2004.11.04.15.54.47;	author drow;	state Exp;
branches;
next	1.162;

1.162
date	2004.10.27.15.53.18;	author nickc;	state Exp;
branches;
next	1.161;

1.161
date	2004.10.08.00.22.13;	author bwilson;	state Exp;
branches;
next	1.160;

1.160
date	2004.09.29.16.45.59;	author nickc;	state Exp;
branches;
next	1.159;

1.159
date	2004.09.17.06.15.38;	author amodra;	state Exp;
branches;
next	1.158;

1.158
date	2004.09.03.17.15.43;	author mmitchel;	state Exp;
branches;
next	1.157;

1.157
date	2004.07.26.12.29.02;	author nickc;	state Exp;
branches;
next	1.156;

1.156
date	2004.07.07.17.28.51;	author nickc;	state Exp;
branches;
next	1.155;

1.155
date	2004.07.06.16.58.35;	author nickc;	state Exp;
branches;
next	1.154;

1.154
date	2004.05.17.19.50.16;	author nickc;	state Exp;
branches;
next	1.153;

1.153
date	2004.04.21.20.52.26;	author cgd;	state Exp;
branches;
next	1.152;

1.152
date	2004.04.08.14.52.44;	author rsandifo;	state Exp;
branches;
next	1.151;

1.151
date	2004.03.30.20.02.03;	author shebs;	state Exp;
branches;
next	1.150;

1.150
date	2004.03.30.14.04.22;	author nickc;	state Exp;
branches;
next	1.149;

1.149
date	2004.01.06.19.19.52;	author aoliva;	state Exp;
branches
	1.149.6.1;
next	1.148;

1.148
date	2003.12.19.11.43.59;	author nickc;	state Exp;
branches;
next	1.147;

1.147
date	2003.12.04.12.09.25;	author amodra;	state Exp;
branches;
next	1.146;

1.146
date	2003.12.02.08.14.35;	author amodra;	state Exp;
branches;
next	1.145;

1.145
date	2003.10.30.09.47.14;	author nickc;	state Exp;
branches;
next	1.144;

1.144
date	2003.10.19.16.46.14;	author marekm;	state Exp;
branches;
next	1.143;

1.143
date	2003.10.16.08.46.34;	author amodra;	state Exp;
branches;
next	1.142;

1.142
date	2003.10.13.15.55.51;	author hjl;	state Exp;
branches;
next	1.141;

1.141
date	2003.08.15.17.04.47;	author nickc;	state Exp;
branches;
next	1.140;

1.140
date	2003.08.14.07.04.57;	author amodra;	state Exp;
branches;
next	1.139;

1.139
date	2003.08.08.10.14.51;	author nickc;	state Exp;
branches;
next	1.138;

1.138
date	2003.08.06.02.19.04;	author jle;	state Exp;
branches;
next	1.137;

1.137
date	2003.07.10.04.45.16;	author aoliva;	state Exp;
branches;
next	1.136;

1.136
date	2003.06.28.05.28.54;	author amodra;	state Exp;
branches;
next	1.135;

1.135
date	2003.06.27.00.38.25;	author amodra;	state Exp;
branches;
next	1.134;

1.134
date	2003.06.10.23.29.19;	author devans;	state Exp;
branches;
next	1.133;

1.133
date	2003.06.10.07.09.31;	author rsandifo;	state Exp;
branches;
next	1.132;

1.132
date	2003.06.03.21.43.51;	author msnyder;	state Exp;
branches;
next	1.131;

1.131
date	2003.06.03.18.15.05;	author hjl;	state Exp;
branches;
next	1.130;

1.130
date	2003.05.09.20.05.04;	author drow;	state Exp;
branches;
next	1.129;

1.129
date	2003.05.09.02.28.00;	author amodra;	state Exp;
branches;
next	1.128;

1.128
date	2003.04.24.12.36.07;	author nickc;	state Exp;
branches;
next	1.127;

1.127
date	2003.04.01.15.50.25;	author nickc;	state Exp;
branches;
next	1.126;

1.126
date	2003.03.25.10.29.28;	author nickc;	state Exp;
branches;
next	1.125;

1.125
date	2003.03.04.17.02.40;	author nickc;	state Exp;
branches;
next	1.124;

1.124
date	2003.02.25.10.32.33;	author nickc;	state Exp;
branches;
next	1.123;

1.123
date	2003.02.18.06.05.06;	author amodra;	state Exp;
branches;
next	1.122;

1.122
date	2003.01.21.17.09.46;	author nickc;	state Exp;
branches;
next	1.121;

1.121
date	2003.01.20.22.34.39;	author sveinse;	state Exp;
branches;
next	1.120;

1.120
date	2003.01.06.16.13.56;	author drow;	state Exp;
branches;
next	1.119;

1.119
date	2003.01.04.20.40.28;	author drow;	state Exp;
branches;
next	1.118;

1.118
date	2003.01.04.02.04.43;	author scox;	state Exp;
branches;
next	1.117;

1.117
date	2003.01.02.00.47.44;	author drow;	state Exp;
branches;
next	1.116;

1.116
date	2002.12.30.19.25.04;	author nickc;	state Exp;
branches;
next	1.115;

1.115
date	2002.11.30.08.56.22;	author amodra;	state Exp;
branches;
next	1.114;

1.114
date	2002.10.14.12.09.18;	author amodra;	state Exp;
branches;
next	1.113;

1.113
date	2002.10.09.19.09.59;	author sclarke;	state Exp;
branches;
next	1.112;

1.112
date	2002.08.28.10.38.49;	author nickc;	state Exp;
branches;
next	1.111;

1.111
date	2002.08.23.08.03.32;	author nickc;	state Exp;
branches;
next	1.110;

1.110
date	2002.08.22.17.27.19;	author nickc;	state Exp;
branches;
next	1.109;

1.109
date	2002.08.09.15.38.24;	author nickc;	state Exp;
branches;
next	1.108;

1.108
date	2002.07.30.23.48.29;	author ths;	state Exp;
branches;
next	1.107;

1.107
date	2002.07.30.17.32.27;	author nickc;	state Exp;
branches;
next	1.106;

1.106
date	2002.07.17.14.15.51;	author nickc;	state Exp;
branches;
next	1.105;

1.105
date	2002.07.09.02.42.13;	author amodra;	state Exp;
branches
	1.105.2.1;
next	1.104;

1.104
date	2002.07.02.23.56.53;	author amodra;	state Exp;
branches;
next	1.103;

1.103
date	2002.06.26.01.12.32;	author hjl;	state Exp;
branches;
next	1.102;

1.102
date	2002.06.18.21.17.22;	author brolley;	state Exp;
branches;
next	1.101;

1.101
date	2002.06.04.02.57.42;	author thorpej;	state Exp;
branches;
next	1.100;

1.100
date	2002.05.31.03.02.34;	author amodra;	state Exp;
branches;
next	1.99;

1.99
date	2002.05.30.02.40.00;	author thorpej;	state Exp;
branches;
next	1.98;

1.98
date	2002.05.28.14.08.32;	author nickc;	state Exp;
branches;
next	1.97;

1.97
date	2002.05.27.17.52.55;	author nickc;	state Exp;
branches;
next	1.96;

1.96
date	2002.05.21.15.11.00;	author thorpej;	state Exp;
branches;
next	1.95;

1.95
date	2002.05.17.05.55.14;	author marekm;	state Exp;
branches;
next	1.94;

1.94
date	2002.05.07.17.22.20;	author nickc;	state Exp;
branches;
next	1.93;

1.93
date	2002.04.30.17.48.58;	author mmitchel;	state Exp;
branches;
next	1.92;

1.92
date	2002.04.28.12.05.07;	author amodra;	state Exp;
branches;
next	1.91;

1.91
date	2002.04.04.14.07.57;	author amodra;	state Exp;
branches;
next	1.90;

1.90
date	2002.03.21.09.42.38;	author amodra;	state Exp;
branches;
next	1.89;

1.89
date	2002.03.18.12.46.18;	author nickc;	state Exp;
branches;
next	1.88;

1.88
date	2002.02.20.06.52.34;	author obrien;	state Exp;
branches;
next	1.87;

1.87
date	2002.02.08.06.38.57;	author aoliva;	state Exp;
branches
	1.87.2.1;
next	1.86;

1.86
date	2002.02.02.18.36.04;	author thorpej;	state Exp;
branches;
next	1.85;

1.85
date	2002.01.31.17.33.06;	author nickc;	state Exp;
branches;
next	1.84;

1.84
date	2002.01.26.21.33.06;	author hp;	state Exp;
branches;
next	1.83;

1.83
date	2002.01.16.05.52.33;	author amodra;	state Exp;
branches;
next	1.82;

1.82
date	2002.01.08.04.23.01;	author thorpej;	state Exp;
branches;
next	1.81;

1.81
date	2001.12.20.03.19.43;	author amodra;	state Exp;
branches;
next	1.80;

1.80
date	2001.12.18.13.26.25;	author mrg;	state Exp;
branches;
next	1.79;

1.79
date	2001.12.17.23.54.57;	author rth;	state Exp;
branches;
next	1.78;

1.78
date	2001.12.08.03.45.58;	author geoffk;	state Exp;
branches;
next	1.77;

1.77
date	2001.12.05.21.46.39;	author trix;	state Exp;
branches;
next	1.76;

1.76
date	2001.11.22.09.08.03;	author amodra;	state Exp;
branches;
next	1.75;

1.75
date	2001.11.12.00.20.16;	author amodra;	state Exp;
branches;
next	1.74;

1.74
date	2001.11.09.20.30.40;	author ciceron;	state Exp;
branches;
next	1.73;

1.73
date	2001.10.30.15.20.10;	author nickc;	state Exp;
branches;
next	1.72;

1.72
date	2001.10.02.06.04.23;	author amodra;	state Exp;
branches;
next	1.71;

1.71
date	2001.09.30.22.22.05;	author hp;	state Exp;
branches;
next	1.70;

1.70
date	2001.09.12.23.57.21;	author hjl;	state Exp;
branches;
next	1.69;

1.69
date	2001.08.29.12.51.26;	author amylaar;	state Exp;
branches;
next	1.68;

1.68
date	2001.08.27.10.45.55;	author amodra;	state Exp;
branches;
next	1.67;

1.67
date	2001.08.13.20.40.31;	author rth;	state Exp;
branches;
next	1.66;

1.66
date	2001.07.24.10.08.32;	author amodra;	state Exp;
branches;
next	1.65;

1.65
date	2001.07.14.15.47.17;	author nickc;	state Exp;
branches;
next	1.64;

1.64
date	2001.06.27.08.42.29;	author amodra;	state Exp;
branches;
next	1.63;

1.63
date	2001.06.19.11.57.23;	author nickc;	state Exp;
branches;
next	1.62;

1.62
date	2001.06.18.20.19.52;	author hp;	state Exp;
branches;
next	1.61;

1.61
date	2001.05.24.20.59.21;	author trix;	state Exp;
branches;
next	1.60;

1.60
date	2001.05.22.14.00.18;	author nickc;	state Exp;
branches;
next	1.59;

1.59
date	2001.05.14.16.55.23;	author dj;	state Exp;
branches;
next	1.58;

1.58
date	2001.05.02.18.14.30;	author nickc;	state Exp;
branches;
next	1.57;

1.57
date	2001.04.08.05.13.57;	author hjl;	state Exp;
branches;
next	1.56;

1.56
date	2001.03.25.20.32.30;	author nickc;	state Exp;
branches;
next	1.55;

1.55
date	2001.02.27.06.43.55;	author amodra;	state Exp;
branches;
next	1.54;

1.54
date	2001.02.22.17.24.32;	author twall;	state Exp;
branches;
next	1.53;

1.53
date	2001.02.18.23.33.08;	author nickc;	state Exp;
branches;
next	1.52;

1.52
date	2001.02.10.00.55.50;	author nickc;	state Exp;
branches;
next	1.51;

1.51
date	2001.02.06.08.19.34;	author pb;	state Exp;
branches;
next	1.50;

1.50
date	2001.01.22.13.50.17;	author amodra;	state Exp;
branches
	1.50.2.1;
next	1.49;

1.49
date	2000.11.30.19.30.32;	author nickc;	state Exp;
branches;
next	1.48;

1.48
date	2000.11.05.06.27.15;	author amodra;	state Exp;
branches;
next	1.47;

1.47
date	2000.09.15.18.52.14;	author nickc;	state Exp;
branches;
next	1.46;

1.46
date	2000.09.07.19.52.17;	author hjl;	state Exp;
branches;
next	1.45;

1.45
date	2000.09.07.04.32.05;	author aoliva;	state Exp;
branches;
next	1.44;

1.44
date	2000.09.05.03.21.16;	author amodra;	state Exp;
branches;
next	1.43;

1.43
date	2000.08.10.20.40.39;	author jle;	state Exp;
branches;
next	1.42;

1.42
date	2000.07.21.23.31.52;	author nickc;	state Exp;
branches;
next	1.41;

1.41
date	2000.07.20.17.16.05;	author hp;	state Exp;
branches;
next	1.40;

1.40
date	2000.07.09.08.45.29;	author amodra;	state Exp;
branches;
next	1.39;

1.39
date	2000.07.02.01.15.56;	author ulfc;	state Exp;
branches;
next	1.38;

1.38
date	2000.07.01.19.26.41;	author hjl;	state Exp;
branches;
next	1.37;

1.37
date	2000.07.01.01.41.09;	author amodra;	state Exp;
branches;
next	1.36;

1.36
date	2000.06.22.13.01.43;	author amodra;	state Exp;
branches;
next	1.35;

1.35
date	2000.06.22.03.35.33;	author hjl;	state Exp;
branches;
next	1.34;

1.34
date	2000.06.20.20.41.02;	author hjl;	state Exp;
branches;
next	1.33;

1.33
date	2000.06.20.13.29.06;	author twall;	state Exp;
branches;
next	1.32;

1.32
date	2000.06.19.01.22.43;	author nickc;	state Exp;
branches;
next	1.31;

1.31
date	2000.05.26.14.14.21;	author amodra;	state Exp;
branches;
next	1.30;

1.30
date	2000.04.25.17.21.28;	author law;	state Exp;
branches;
next	1.29;

1.29
date	2000.04.21.20.22.23;	author wilson;	state Exp;
branches;
next	1.28;

1.28
date	2000.04.14.21.18.22;	author geoffk;	state Exp;
branches;
next	1.27;

1.27
date	2000.04.09.12.17.42;	author cagney;	state Exp;
branches;
next	1.26;

1.26
date	2000.04.04.10.53.56;	author amodra;	state Exp;
branches;
next	1.25;

1.25
date	2000.03.27.08.39.13;	author amodra;	state Exp;
branches
	1.25.2.1;
next	1.24;

1.24
date	2000.03.09.16.41.21;	author hjl;	state Exp;
branches;
next	1.23;

1.23
date	2000.02.29.19.52.31;	author hjl;	state Exp;
branches;
next	1.22;

1.22
date	2000.02.26.03.38.18;	author ian;	state Exp;
branches;
next	1.21;

1.21
date	2000.02.24.17.53.11;	author nickc;	state Exp;
branches;
next	1.20;

1.20
date	2000.02.23.13.52.22;	author amodra;	state Exp;
branches;
next	1.19;

1.19
date	99.12.02.11.49.19;	author nickc;	state Exp;
branches;
next	1.18;

1.18
date	99.09.22.08.32.06;	author nickc;	state Exp;
branches;
next	1.17;

1.17
date	99.09.12.15.27.47;	author ian;	state Exp;
branches;
next	1.16;

1.16
date	99.09.04.17.37.36;	author ian;	state Exp;
branches;
next	1.15;

1.15
date	99.09.02.20.35.35;	author law;	state Exp;
branches;
next	1.14;

1.14
date	99.08.24.15.17.22;	author nickc;	state Exp;
branches;
next	1.13;

1.13
date	99.08.08.17.37.50;	author ian;	state Exp;
branches;
next	1.12;

1.12
date	99.08.06.22.46.03;	author ian;	state Exp;
branches;
next	1.11;

1.11
date	99.08.05.16.03.55;	author ian;	state Exp;
branches;
next	1.10;

1.10
date	99.08.03.15.34.39;	author ian;	state Exp;
branches;
next	1.9;

1.9
date	99.07.08.00.22.46;	author mmitchel;	state Exp;
branches;
next	1.8;

1.8
date	99.06.30.21.00.07;	author mmitchel;	state Exp;
branches;
next	1.7;

1.7
date	99.06.18.15.25.40;	author rth;	state Exp;
branches;
next	1.6;

1.6
date	99.05.30.15.55.27;	author rth;	state Exp;
branches;
next	1.5;

1.5
date	99.05.27.21.49.18;	author ian;	state Exp;
branches;
next	1.4;

1.4
date	99.05.19.03.50.49;	author schwab;	state Exp;
branches;
next	1.3;

1.3
date	99.05.07.07.40.00;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	99.05.06.07.20.19;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	99.05.03.07.29.06;	author rth;	state Exp;
branches
	1.1.1.1;
next	;

1.315.2.1
date	2012.08.16.09.21.50;	author nickc;	state Exp;
branches;
next	1.315.2.2;

1.315.2.2
date	2012.12.11.22.24.03;	author roland;	state Exp;
branches;
next	;

1.293.2.1
date	2011.02.01.12.25.44;	author amodra;	state Exp;
branches;
next	;

1.274.2.1
date	2010.02.10.19.53.11;	author rsandifo;	state Exp;
branches;
next	;

1.254.4.1
date	2009.09.10.15.09.42;	author amylaar;	state Exp;
branches;
next	;

1.253.2.1
date	2008.09.09.08.02.19;	author amodra;	state Exp;
branches;
next	1.253.2.2;

1.253.2.2
date	2008.11.14.06.55.50;	author amodra;	state Exp;
branches;
next	1.253.2.3;

1.253.2.3
date	2008.12.23.13.56.10;	author gingold;	state Exp;
branches;
next	;

1.209.2.1
date	2006.05.02.14.19.03;	author drow;	state Exp;
branches;
next	1.209.2.2;

1.209.2.2
date	2006.06.02.23.11.46;	author jsm28;	state Exp;
branches;
next	;

1.203.2.1
date	2006.04.03.15.44.47;	author carlos;	state Exp;
branches;
next	1.203.2.2;

1.203.2.2
date	2006.07.14.13.39.07;	author shinwell;	state Exp;
branches;
next	1.203.2.3;

1.203.2.3
date	2006.07.26.18.46.24;	author nathan;	state Exp;
branches;
next	1.203.2.4;

1.203.2.4
date	2006.08.22.15.08.41;	author jsm28;	state Exp;
branches;
next	1.203.2.5;

1.203.2.5
date	2006.09.11.09.45.50;	author nathan;	state Exp;
branches;
next	1.203.2.6;

1.203.2.6
date	2006.10.16.20.21.25;	author nathan;	state Exp;
branches;
next	1.203.2.7;

1.203.2.7
date	2006.11.29.16.31.09;	author shinwell;	state Exp;
branches;
next	;

1.149.6.1
date	2004.04.08.15.02.12;	author rsandifo;	state Exp;
branches;
next	;

1.105.2.1
date	2003.01.02.00.51.33;	author drow;	state Exp;
branches;
next	;

1.87.2.1
date	2002.02.20.06.56.00;	author obrien;	state Exp;
branches;
next	1.87.2.2;

1.87.2.2
date	2002.04.04.14.53.10;	author amodra;	state Exp;
branches;
next	1.87.2.3;

1.87.2.3
date	2002.05.09.11.54.55;	author amodra;	state Exp;
branches;
next	;

1.50.2.1
date	2001.02.11.12.05.27;	author pb;	state Exp;
branches;
next	1.50.2.2;

1.50.2.2
date	2001.02.12.21.13.15;	author pb;	state Exp;
branches;
next	1.50.2.3;

1.50.2.3
date	2001.06.11.10.05.07;	author amodra;	state Exp;
branches;
next	1.50.2.4;

1.50.2.4
date	2001.06.27.13.07.05;	author amodra;	state Exp;
branches;
next	1.50.2.5;

1.50.2.5
date	2001.08.13.20.47.47;	author rth;	state Exp;
branches;
next	;

1.25.2.1
date	2000.04.05.05.36.43;	author amodra;	state Exp;
branches;
next	1.25.2.2;

1.25.2.2
date	2000.11.05.06.36.59;	author amodra;	state Exp;
branches;
next	;

1.1.1.1
date	99.05.03.07.29.06;	author rth;	state Exp;
branches;
next	;


desc
@@


1.337
log
@2013-09-20  Chung-Lin Tang  <cltang@@codesourcery.com>

	* Makefile.am (enios2elf.c): Change tdir_nios2 to tdir_nios2elf.
	* Makefile.in: Regenerate.
@
text
@## Process this file with automake to generate Makefile.in
#
#   Copyright 2012 Free Software Foundation
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING3.  If not see
# <http://www.gnu.org/licenses/>.
#

AUTOMAKE_OPTIONS = dejagnu no-texinfo.tex no-dist foreign
ACLOCAL_AMFLAGS = -I .. -I ../config -I ../bfd
TEXINFO_TEX = ../texinfo/texinfo.tex

SUBDIRS = po

tooldir = $(exec_prefix)/$(target_alias)

YACC = `if [ -f ../bison/bison ]; then echo ../bison/bison -y -L$(srcdir)/../bison/; else echo @@YACC@@; fi`
YFLAGS = -d
LEX = `if [ -f ../flex/flex ]; then echo ../flex/flex; else echo @@LEX@@; fi`

# Automake 1.10+ disables lex and yacc output file regeneration if
# maintainer mode is disabled.  Avoid this.
am__skiplex =
am__skipyacc =

WARN_CFLAGS = @@WARN_CFLAGS@@
NO_WERROR = @@NO_WERROR@@
AM_CFLAGS = $(WARN_CFLAGS)

# Conditionally enable the plugin interface.
if ENABLE_PLUGINS
PLUGIN_C = plugin.c
PLUGIN_H = plugin.h
PLUGIN_OBJECT = plugin.@@OBJEXT@@
PLUGIN_CFLAGS = -DENABLE_PLUGINS
else
PLUGIN_C =
PLUGIN_H =
PLUGIN_OBJECT =
PLUGIN_CFLAGS =
endif

# We put the scripts in the directory $(scriptdir)/ldscripts.
# We can't put the scripts in $(datadir) because the SEARCH_DIR
# directives need to be different for native and cross linkers.
scriptdir = $(tooldir)/lib

EMUL = @@EMUL@@
EMULATION_OFILES = @@EMULATION_OFILES@@
EMUL_EXTRA_OFILES = @@EMUL_EXTRA_OFILES@@

# Search path to override the default search path for -lfoo libraries.
# If LIB_PATH is empty, the ones in the script (if any) are left alone.
# (The default is usually /lib:/usr/lib:/usr/local/lib, unless building
# a cross-linker, in which case the default is empty.  See genscripts.sh.)
# Otherwise, they are replaced with the ones given in LIB_PATH,
# which may have the form: LIB_PATH=/lib:/usr/local/lib.  This can be set
# when the linker is configured via the --with-lib-path configure switch.
LIB_PATH = @@LIB_PATH@@

BASEDIR = $(srcdir)/..
BFDDIR = $(BASEDIR)/bfd
INCDIR	= $(BASEDIR)/include

# What version of the manual to build
DOCVER = gen

# Options to extract the man page from ld.texinfo
MANCONF = -Dman

TEXI2POD = perl $(BASEDIR)/etc/texi2pod.pl $(AM_MAKEINFOFLAGS)

POD2MAN = pod2man --center="GNU Development Tools" \
	--release="binutils-$(VERSION)" --section=1

#stuff for self hosting (can be overridden in config file).
HOSTING_CRT0 = @@HOSTING_CRT0@@
HOSTING_SCRT0 = @@HOSTING_SCRT0@@
HOSTING_LIBS = @@HOSTING_LIBS@@
HOSTING_EMU = -m $(EMUL)

# Setup the testing framework, if you have one
EXPECT = expect
RUNTEST = runtest
RUNTESTFLAGS =

CC_FOR_TARGET = ` \
  if [ -f $$r/../gcc/xgcc ] ; then \
    if [ -f $$r/../newlib/Makefile ] ; then \
      echo $$r/../gcc/xgcc -B$$r/../gcc/ -idirafter $$r/../newlib/targ-include -idirafter $${srcroot}/../newlib/libc/include -nostdinc; \
    else \
      echo $$r/../gcc/xgcc -B$$r/../gcc/; \
    fi; \
  else \
    if [ "@@host@@" = "@@target@@" ] ; then \
      echo $(CC); \
    else \
      echo gcc | sed '$(transform)'; \
    fi; \
  fi`

CXX_FOR_TARGET = ` \
  if [ -f $$r/../gcc/g++ ] ; then \
    if [ -f $$r/../newlib/Makefile ] ; then \
      echo $$r/../gcc/g++ -B$$r/../gcc/ -idirafter $$r/../newlib/targ-include -idirafter $${srcroot}/../newlib/libc/include -nostdinc; \
    else \
      echo $$r/../gcc/g++ -B$$r/../gcc/; \
    fi; \
  else \
    if [ "@@host@@" = "@@target@@" ] ; then \
      echo $(CXX); \
    else \
      echo g++ | sed '$(transform)'; \
    fi; \
  fi`

transform = s/^ld-new$$/$(installed_linker)/;@@program_transform_name@@
bin_PROGRAMS = ld-new
info_TEXINFOS = ld.texinfo
ld_TEXINFOS = configdoc.texi
noinst_TEXINFOS = ldint.texinfo
man_MANS = ld.1

AM_MAKEINFOFLAGS = -I $(srcdir) -I $(BFDDIR)/doc -I ../bfd/doc \
		   -I $(top_srcdir)/../libiberty
TEXI2DVI = texi2dvi -I $(srcdir) -I $(BFDDIR)/doc -I ../bfd/doc \
		    -I $(top_srcdir)/../libiberty

AM_CPPFLAGS = -I. -I$(srcdir) -I../bfd -I$(BFDDIR) -I$(INCDIR) \
	@@INCINTL@@ $(HDEFINES) $(CFLAGS) $(PLUGIN_CFLAGS) \
	-DLOCALEDIR="\"$(datadir)/locale\""

BFDLIB = ../bfd/libbfd.la
LIBIBERTY = ../libiberty/libiberty.a

ALL_EMULATION_SOURCES = \
	eaix5ppc.c \
	eaix5rs6.c \
	eaixppc.c \
	eaixrs6.c \
	ealpha.c \
	ealphavms.c \
	earcelf.c \
	earm_epoc_pe.c \
	earm_wince_pe.c \
	earmaoutb.c \
	earmaoutl.c \
	earmcoff.c \
	earmelf.c \
	earmelf_fbsd.c \
	earmelf_linux.c \
	earmelf_linux_eabi.c \
	earmelf_nacl.c \
	earmelf_nbsd.c \
	earmelf_vxworks.c \
	earmelfb.c \
	earmelfb_linux.c \
	earmelfb_linux_eabi.c \
	earmelfb_nacl.c \
	earmelfb_nbsd.c \
	earmnbsd.c \
	earmnto.c \
	earmpe.c \
	earmsymbian.c \
	eavr1.c \
	eavr2.c \
	eavr25.c \
	eavr3.c \
	eavr31.c \
	eavr35.c \
	eavr4.c \
	eavr5.c \
	eavr51.c \
	eavr6.c \
	eavrxmega1.c \
	eavrxmega2.c \
	eavrxmega3.c \
	eavrxmega4.c \
	eavrxmega5.c \
	eavrxmega6.c \
	eavrxmega7.c \
	ecoff_i860.c \
	ecoff_sparc.c \
	ecrisaout.c \
	ecriself.c \
	ecrislinux.c \
	ed10velf.c \
	ed30v_e.c \
	ed30v_o.c \
	ed30velf.c \
	edelta68.c \
	eelf32_dlx.c \
	eelf32_i860.c \
	eelf32_i960.c \
	eelf32_sparc.c \
	eelf32_sparc_sol2.c \
	eelf32_sparc_vxworks.c \
	eelf32_spu.c \
	eelf32_tic6x_be.c \
	eelf32_tic6x_le.c \
	eelf32_tic6x_linux_be.c \
	eelf32_tic6x_linux_le.c \
	eelf32_tic6x_elf_be.c \
	eelf32_tic6x_elf_le.c \
	eelf32am33lin.c \
	eelf32bfin.c \
	eelf32bfinfd.c \
	eelf32cr16.c \
	eelf32cr16c.c \
	eelf32crx.c \
	eelf32epiphany.c \
	eelf32epiphany_4x4.c \
	eelf32fr30.c \
	eelf32frv.c \
	eelf32frvfd.c \
	eelf32i370.c \
	eelf32ip2k.c \
	eelf32iq10.c \
	eelf32iq2000.c \
	eelf32lm32.c \
	eelf32lm32fd.c \
	eelf32lppc.c \
	eelf32lppclinux.c \
	eelf32lppcnto.c \
	eelf32lppcsim.c \
	eelf32m32c.c \
	eelf32mb_linux.c \
	eelf32mcore.c \
	eelf32mep.c \
	eelf32metag.c \
	eelf32microblazeel.c \
	eelf32microblaze.c \
	eelf32moxie.c \
	eelf32mt.c \
	eelf32openrisc.c \
	eelf32ppc.c \
	eelf32ppc_fbsd.c \
	eelf32ppclinux.c \
	eelf32ppcnto.c \
	eelf32ppcsim.c \
	eelf32ppcvxworks.c \
	eelf32ppcwindiss.c \
	eelf32rl78.c \
	eelf32rx.c \
	eelf32tilegx.c \
	eelf32tilegx_be.c \
	eelf32tilepro.c \
	eelf32vax.c \
	eelf32xc16x.c \
	eelf32xc16xl.c \
	eelf32xc16xs.c \
	eelf32xstormy16.c \
	eelf32xtensa.c \
	eelf_i386.c \
	eelf_i386_be.c \
	eelf_i386_chaos.c \
	eelf_i386_fbsd.c \
	eelf_i386_ldso.c \
	eelf_i386_nacl.c \
	eelf_i386_sol2.c \
	eelf_i386_vxworks.c \
	eelf_s390.c \
	egld960.c \
	egld960coff.c \
	eh8300.c \
	eh8300elf.c \
	eh8300h.c \
	eh8300helf.c \
	eh8300hn.c \
	eh8300hnelf.c \
	eh8300s.c \
	eh8300self.c \
	eh8300sn.c \
	eh8300snelf.c \
	eh8300sx.c \
	eh8300sxelf.c \
	eh8300sxn.c \
	eh8300sxnelf.c \
	eh8500.c \
	eh8500b.c \
	eh8500c.c \
	eh8500m.c \
	eh8500s.c \
	ehp300bsd.c \
	ehp3hpux.c \
	ehppaelf.c \
	ehppalinux.c \
	ehppanbsd.c \
	ehppaobsd.c \
	ei386aout.c \
	ei386beos.c \
	ei386bsd.c \
	ei386coff.c \
	ei386go32.c \
	ei386linux.c \
	ei386lynx.c \
	ei386mach.c \
	ei386moss.c \
	ei386msdos.c \
	ei386nbsd.c \
	ei386nto.c \
	ei386nw.c \
	ei386pe.c \
	ei386pe_posix.c \
	ei386pep.c \
	elnk960.c \
	em32relf.c \
	em32relf_linux.c \
	em32rlelf.c \
	em32rlelf_linux.c \
	em68hc11elf.c \
	em68hc11elfb.c \
	em68hc12elf.c \
	em68hc12elfb.c \
	em68k4knbsd.c \
	em68kaout.c \
	em68kaux.c \
	em68kcoff.c \
	em68kelf.c \
	em68kelfnbsd.c \
	em68klinux.c \
	em68knbsd.c \
	em68kpsos.c \
	em88kbcs.c \
	emcorepe.c \
	emn10200.c \
	emn10300.c \
	emsp430x110.c \
	emsp430x1101.c \
	emsp430x1111.c \
	emsp430x112.c \
	emsp430x1121.c \
	emsp430x1122.c \
	emsp430x1132.c \
	emsp430x122.c \
	emsp430x1222.c \
	emsp430x123.c \
	emsp430x1232.c \
	emsp430x133.c \
	emsp430x1331.c \
	emsp430x135.c \
	emsp430x1351.c \
	emsp430x147.c \
	emsp430x148.c \
	emsp430x149.c \
	emsp430x155.c \
	emsp430x156.c \
	emsp430x157.c \
	emsp430x1610.c \
	emsp430x1611.c \
	emsp430x1612.c \
	emsp430x167.c \
	emsp430x168.c \
	emsp430x169.c \
	emsp430x2101.c \
	emsp430x2111.c \
	emsp430x2121.c \
	emsp430x2131.c \
	emsp430x311.c \
	emsp430x312.c \
	emsp430x313.c \
	emsp430x314.c \
	emsp430x315.c \
	emsp430x323.c \
	emsp430x325.c \
	emsp430x336.c \
	emsp430x337.c \
	emsp430x412.c \
	emsp430x413.c \
	emsp430x415.c \
	emsp430x417.c \
	emsp430x435.c \
	emsp430x436.c \
	emsp430x437.c \
	emsp430x447.c \
	emsp430x448.c \
	emsp430x449.c \
	emsp430xE423.c \
	emsp430xE425.c \
	emsp430xE427.c \
	emsp430xG437.c \
	emsp430xG438.c \
	emsp430xG439.c \
	emsp430xW423.c \
	emsp430xW425.c \
	emsp430xW427.c \
	emsp430X.c \
	enews.c \
	ens32knbsd.c \
	eor32.c \
	eor32elf.c \
	epc532macha.c \
	epdp11.c \
	epjelf.c \
	epjlelf.c \
	eppclynx.c \
	eppcmacos.c \
	eppcnw.c \
	eppcpe.c \
	eriscix.c \
	escore3_elf.c \
	escore7_elf.c \
	esh.c \
	eshelf.c \
	eshelf32.c \
	eshelf32_linux.c \
	eshelf32_nbsd.c \
	eshelf_fd.c \
	eshelf_linux.c \
	eshelf_nbsd.c \
	eshelf_nto.c \
	eshelf_uclinux.c \
	eshelf_vxworks.c \
	eshl.c \
	eshlelf.c \
	eshlelf32.c \
	eshlelf32_linux.c \
	eshlelf32_nbsd.c \
	eshlelf_fd.c \
	eshlelf_linux.c \
	eshlelf_nbsd.c \
	eshlelf_nto.c \
	eshlelf_vxworks.c \
	eshlsymbian.c \
	eshpe.c \
	esparcaout.c \
	esparclinux.c \
	esparcnbsd.c \
	est2000.c \
	esun3.c \
	esun4.c \
	etic30aout.c \
	etic30coff.c \
	etic3xcoff.c \
	etic3xcoff_onchip.c \
	etic4xcoff.c \
	etic54xcoff.c \
	etic80coff.c \
	ev850.c \
	ev850_rh850.c \
	evanilla.c \
	evax.c \
	evaxnbsd.c \
	evsta.c \
	ew65.c \
	exgateelf.c \
	ez80.c \
	ez8001.c \
	ez8002.c

ALL_EMULATIONS = $(ALL_EMULATION_SOURCES:.c=.@@OBJEXT@@)

ALL_64_EMULATION_SOURCES = \
	eaarch64elf.c \
	eaarch64elf32.c \
	eaarch64elfb.c \
	eaarch64elf32b.c \
	eaarch64linux.c \
	eaarch64linuxb.c \
	eelf32_x86_64.c \
	eelf32_x86_64_nacl.c \
	eelf32b4300.c \
	eelf32bmip.c \
	eelf32bmipn32.c \
	eelf32bsmip.c \
	eelf32btsmip.c \
	eelf32btsmip_fbsd.c \
	eelf32btsmipn32.c \
	eelf32btsmipn32_fbsd.c \
	eelf32ebmip.c \
	eelf32ebmipvxworks.c \
	eelf32elmip.c \
	eelf32elmipvxworks.c \
	eelf32l4300.c \
	eelf32lmip.c \
	eelf32lr5900.c \
	eelf32lr5900n32.c \
	eelf32lsmip.c \
	eelf32ltsmip.c \
	eelf32ltsmip_fbsd.c \
	eelf32ltsmipn32.c \
	eelf32ltsmipn32_fbsd.c \
	eelf32mipswindiss.c \
	eelf64_aix.c \
	eelf64_ia64.c \
	eelf64_ia64_fbsd.c \
	eelf64_ia64_vms.c \
	eelf64_s390.c \
	eelf64_sparc.c \
	eelf64_sparc_fbsd.c \
	eelf64_sparc_sol2.c \
	eelf64alpha.c \
	eelf64alpha_fbsd.c \
	eelf64alpha_nbsd.c \
	eelf64bmip.c \
	eelf64btsmip.c \
	eelf64btsmip_fbsd.c \
	eelf64hppa.c \
	eelf64lppc.c \
	eelf64ltsmip.c \
	eelf64ltsmip_fbsd.c \
	eelf64mmix.c \
	eelf64ppc.c \
	eelf64ppc_fbsd.c \
	eelf64rdos.c \
	eelf64tilegx.c \
	eelf64tilegx_be.c \
	eelf_l1om.c \
	eelf_l1om_fbsd.c \
	eelf_k1om.c \
	eelf_k1om_fbsd.c \
	eelf_x86_64.c \
	eelf_x86_64_fbsd.c \
	eelf_x86_64_nacl.c \
	eelf_x86_64_sol2.c \
	ehppa64linux.c \
	emmo.c \
	eshelf64.c \
	eshelf64_nbsd.c \
	eshlelf64.c \
	eshlelf64_nbsd.c

ALL_64_EMULATIONS = $(ALL_64_EMULATION_SOURCES:.c=.@@OBJEXT@@)

ALL_EMUL_EXTRA_OFILES = \
	deffilep.@@OBJEXT@@ \
	pe-dll.@@OBJEXT@@ \
	pep-dll.@@OBJEXT@@

CFILES = ldctor.c ldemul.c ldexp.c ldfile.c ldlang.c \
	ldmain.c ldmisc.c ldver.c ldwrite.c lexsup.c \
	mri.c ldcref.c pe-dll.c pep-dll.c ldlex-wrapper.c \
	$(PLUGIN_C)

HFILES = ld.h ldctor.h ldemul.h ldexp.h ldfile.h \
	ldlang.h ldlex.h ldmain.h ldmisc.h ldver.h \
	ldwrite.h mri.h deffile.h pe-dll.h pep-dll.h \
	elf-hints-local.h $(PLUGIN_H)

GENERATED_CFILES = ldgram.c ldlex.c deffilep.c
GENERATED_HFILES = ldgram.h ldemul-list.h deffilep.h

# Require an early dependency on the generated headers, as the dependency
# tracking will not cause them to be built beforehand.
BUILT_SOURCES = $(GENERATED_HFILES)

OFILES = ldgram.@@OBJEXT@@ ldlex-wrapper.@@OBJEXT@@ lexsup.@@OBJEXT@@ ldlang.@@OBJEXT@@ \
	mri.@@OBJEXT@@ ldctor.@@OBJEXT@@ ldmain.@@OBJEXT@@ $(PLUGIN_OBJECT) \
	ldwrite.@@OBJEXT@@ ldexp.@@OBJEXT@@  ldemul.@@OBJEXT@@ ldver.@@OBJEXT@@ ldmisc.@@OBJEXT@@ \
	ldfile.@@OBJEXT@@ ldcref.@@OBJEXT@@ ${EMULATION_OFILES} ${EMUL_EXTRA_OFILES}

STAGESTUFF = *.@@OBJEXT@@ ldscripts/* e*.c

# Disable -Werror, if it has been enabled, since old versions of bison/
# yacc will produce working code which contain compile time warnings.
ldgram.@@OBJEXT@@: ldgram.c
if am__fastdepCC
	$(COMPILE) -MT $@@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@@ `test -f ldgram.c || echo $(srcdir)/`ldgram.c $(NO_WERROR)
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
else
if AMDEP
	source='ldgram.c' object='$@@' libtool=no @@AMDEPBACKSLASH@@
	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @@AMDEPBACKSLASH@@
endif
	$(COMPILE) -c `test -f ldgram.c || echo $(srcdir)/`ldgram.c $(NO_WERROR)
endif

ldlex-wrapper.@@OBJEXT@@: ldlex-wrapper.c ldlex.c
if am__fastdepCC
	$(COMPILE) -MT $@@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@@ $(srcdir)/ldlex-wrapper.c $(NO_WERROR)
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
else
if AMDEP
	source='ldlex-wrapper.c' object='$@@' libtool=no @@AMDEPBACKSLASH@@
	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @@AMDEPBACKSLASH@@
endif
	$(COMPILE) -c $(srcdir)/ldlex-wrapper.c $(NO_WERROR)
endif

deffilep.@@OBJEXT@@: deffilep.c
if am__fastdepCC
	$(COMPILE) -MT $@@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@@ `test -f deffilep.c || echo $(srcdir)/`deffilep.c $(NO_WERROR)
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
else
if AMDEP
	source='deffilep.c' object='$@@' libtool=no @@AMDEPBACKSLASH@@
	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @@AMDEPBACKSLASH@@
endif
	$(COMPILE) -c `test -f deffilep.c || echo $(srcdir)/`deffilep.c $(NO_WERROR)
endif

# At the moment this is just a list of those emulation template files
# that contain internationalised strings.
EMULATION_FILES = emultempl/pe.em emultempl/armcoff.em

POTFILES = $(CFILES) $(HFILES) $(EMULATION_FILES)

po/POTFILES.in: @@MAINT@@ Makefile
	for f in $(POTFILES); do echo $$f; done | LC_ALL=C sort > tmp \
	  && mv tmp $(srcdir)/po/POTFILES.in

ldmain.@@OBJEXT@@: ldmain.c config.status
if am__fastdepCC
	$(COMPILE) -MT $@@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@@ \
	  -DDEFAULT_EMULATION='"$(EMUL)"' \
	  -DBINDIR='"$(bindir)"' -DTOOLBINDIR='"$(tooldir)/bin"' \
	  -DTARGET='"@@target@@"' @@TARGET_SYSTEM_ROOT_DEFINE@@ \
	  $(srcdir)/ldmain.c
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
else
if AMDEP
	source='ldmain.c' object='$@@' libtool=no @@AMDEPBACKSLASH@@
	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @@AMDEPBACKSLASH@@
endif
	$(COMPILE) -c -DDEFAULT_EMULATION='"$(EMUL)"' \
	  -DBINDIR='"$(bindir)"' -DTOOLBINDIR='"$(tooldir)/bin"' \
	  -DTARGET='"@@target@@"' @@TARGET_SYSTEM_ROOT_DEFINE@@ \
	  $(srcdir)/ldmain.c
endif

ldfile.@@OBJEXT@@: ldfile.c config.status
if am__fastdepCC
	$(COMPILE) -MT $@@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@@ \
	-DSCRIPTDIR='"$(scriptdir)"' -DBINDIR='"$(bindir)"' -DTOOLBINDIR='"$(tooldir)/bin"' \
	 $(srcdir)/ldfile.c
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
else
if AMDEP
	source='ldfile.c' object='$@@' libtool=no @@AMDEPBACKSLASH@@
	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @@AMDEPBACKSLASH@@
endif
	$(COMPILE) -c -DSCRIPTDIR='"$(scriptdir)"' -DBINDIR='"$(bindir)"' \
	  -DTOOLBINDIR='"$(tooldir)/bin"' \
	  $(srcdir)/ldfile.c
endif

eelf32_spu.@@OBJEXT@@: eelf32_spu.c
if am__fastdepCC
	$(COMPILE) -MT $@@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@@ \
	  -DEMBEDSPU="\"`echo embedspu | sed '$(transform)'`\"" eelf32_spu.c
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
else
if AMDEP
	source='eelf32_spu.c' object='$@@' libtool=no @@AMDEPBACKSLASH@@
	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @@AMDEPBACKSLASH@@
endif
	$(COMPILE) -c -DEMBEDSPU="\"`echo embedspu | sed '$(transform)'`\"" \
	  eelf32_spu.c
endif

ldemul-list.h: Makefile
	(echo "/* This file is automatically generated.  DO NOT EDIT! */";\
	for f in `echo " " ${EMULATION_OFILES} "" \
	 | sed -e 's/ e/ ld/g' -e 's/ ld/ /g' -e 's/[.]o//g'`; do \
	    echo "extern ld_emulation_xfer_type ld_$${f}_emulation;"; \
	done;\
	echo "";\
	echo "#define EMULATION_LIST \\";\
	for f in `echo " " ${EMULATION_OFILES} "" \
	 | sed -e 's/ e/ ld/g' -e 's/ ld/ /g' -e 's/[.]o//g'`; do \
	    echo "  &ld_$${f}_emulation, \\"; \
	done;\
	echo "  0") >ldemul-tmp.h
	mv ldemul-tmp.h ldemul-list.h

stringify.sed: ${srcdir}/emultempl/$(STRINGIFY)
	  cp ${srcdir}/emultempl/$(STRINGIFY) stringify.sed

# These all start with e so 'make clean' can find them.

GENSCRIPTS = LIB_PATH='${LIB_PATH}' $(SHELL) $(srcdir)/genscripts.sh "${srcdir}" "${libdir}" "${prefix}" "${exec_prefix}" @@host@@ @@target@@ @@target_alias@@ "@@EMULATION_LIBPATH@@" "@@NATIVE_LIB_DIRS@@" @@use_sysroot@@ @@enable_initfini_array@@
GEN_DEPENDS = $(srcdir)/genscripts.sh stringify.sed
ELF_DEPS = $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/elf-generic.em $(srcdir)/scripttempl/DWARF.sc
ELF_GEN_DEPS = $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/elf-generic.em $(srcdir)/emultempl/genelf.em $(srcdir)/scripttempl/DWARF.sc

@@TDIRS@@

eaix5ppc.c: $(srcdir)/emulparams/aix5ppc.sh \
  $(srcdir)/emultempl/aix.em $(srcdir)/scripttempl/aix.sc ${GEN_DEPENDS}
	${GENSCRIPTS} aix5ppc "$(tdir_aixppc)"
eaix5rs6.c: $(srcdir)/emulparams/aix5rs6.sh \
  $(srcdir)/emultempl/aix.em $(srcdir)/scripttempl/aix.sc ${GEN_DEPENDS}
	${GENSCRIPTS} aix5rs6 "$(tdir_aixrs6)"
eaixppc.c: $(srcdir)/emulparams/aixppc.sh \
  $(srcdir)/emultempl/aix.em $(srcdir)/scripttempl/aix.sc ${GEN_DEPENDS}
	${GENSCRIPTS} aixppc "$(tdir_aixppc)"
eaixrs6.c: $(srcdir)/emulparams/aixrs6.sh \
  $(srcdir)/emultempl/aix.em $(srcdir)/scripttempl/aix.sc ${GEN_DEPENDS}
	${GENSCRIPTS} aixrs6 "$(tdir_aixrs6)"
ealpha.c: $(srcdir)/emulparams/alpha.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/alpha.sc ${GEN_DEPENDS}
	${GENSCRIPTS} alpha "$(tdir_alpha)"
ealphavms.c: $(srcdir)/emulparams/alphavms.sh \
  $(srcdir)/emultempl/vms.em $(srcdir)/scripttempl/alphavms.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} alphavms "$(tdir_alphavms)"
earcelf.c: $(srcdir)/emulparams/arcelf.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} arcelf "$(tdir_arcelf)"
earm_epoc_pe.c: $(srcdir)/emulparams/arm_epoc_pe.sh \
  $(srcdir)/emultempl/pe.em $(srcdir)/scripttempl/epocpe.sc ${GEN_DEPENDS}
	${GENSCRIPTS} arm_epoc_pe "$(tdir_armpe)"
earm_wince_pe.c: $(srcdir)/emulparams/arm_wince_pe.sh \
  $(srcdir)/emultempl/pe.em $(srcdir)/scripttempl/pe.sc ${GEN_DEPENDS}
	${GENSCRIPTS} arm_wince_pe "$(tdir_armpe)"
earmaoutb.c:	$(srcdir)/emulparams/armaoutb.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/armaout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armaoutb "$(tdir_armaoutb)"
earmaoutl.c:	$(srcdir)/emulparams/armaoutl.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/armaout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armaoutl "$(tdir_armaoutl)"
earmcoff.c:	$(srcdir)/emulparams/armcoff.sh \
  $(srcdir)/emultempl/armcoff.em $(srcdir)/scripttempl/armcoff.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armcoff "$(tdir_armcoff)"
earmelf.c: $(srcdir)/emulparams/armelf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armelf "$(tdir_armelf)"
earmelf_fbsd.c: $(srcdir)/emulparams/armelf_fbsd.sh \
  $(srcdir)/emulparams/armelf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armelf_fbsd "$(tdir_armelf_fbsd)"
earmelf_linux.c: $(srcdir)/emulparams/armelf_linux.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armelf_linux "$(tdir_armelf_linux)"
earmelf_linux_eabi.c: $(srcdir)/emulparams/armelf_linux_eabi.sh \
  $(srcdir)/emulparams/armelf_linux.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armelf_linux_eabi "$(tdir_armelf_linux_abi)"
earmelf_nacl.c: $(srcdir)/emulparams/armelf_nacl.sh \
  $(srcdir)/emulparams/armelf_linux_eabi.sh \
  $(srcdir)/emulparams/armelf_linux.sh \
  $(srcdir)/emulparams/elf_nacl.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armelf_nacl "$(tdir_armelf_nacl)"
earmelf_nbsd.c: $(srcdir)/emulparams/armelf_nbsd.sh \
  $(srcdir)/emulparams/armelf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armelf_nbsd "$(tdir_armelf_nbsd)"
earmelf_vxworks.c: $(srcdir)/emulparams/armelf_vxworks.sh \
  $(srcdir)/emulparams/vxworks.sh $(srcdir)/emulparams/armelf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/vxworks.em \
  $(srcdir)/emultempl/armelf.em $(srcdir)/scripttempl/elf.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} armelf_vxworks "$(tdir_armelf)"
earmelfb.c: $(srcdir)/emulparams/armelfb.sh $(srcdir)/emulparams/armelf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armelfb "$(tdir_armelfb)"
earmelfb_linux.c: $(srcdir)/emulparams/armelfb_linux.sh \
  $(srcdir)/emulparams/armelf_linux.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armelfb_linux "$(tdir_armelfb_linux)"
earmelfb_linux_eabi.c: $(srcdir)/emulparams/armelfb_linux_eabi.sh \
  $(srcdir)/emulparams/armelf_linux_eabi.sh \
  $(srcdir)/emulparams/armelf_linux.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armelfb_linux_eabi "$(tdir_armelfb_linux_abi)"
earmelfb_nacl.c: $(srcdir)/emulparams/armelfb_nacl.sh \
  $(srcdir)/emulparams/armelf_nacl.sh \
  $(srcdir)/emulparams/armelf_linux_eabi.sh \
  $(srcdir)/emulparams/armelf_linux.sh \
  $(srcdir)/emulparams/elf_nacl.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armelfb_nacl "$(tdir_armelfb_nacl)"
earmelfb_nbsd.c: $(srcdir)/emulparams/armelfb_nbsd.sh \
  $(srcdir)/emulparams/armelf_nbsd.sh \
  $(srcdir)/emulparams/armelf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armelfb_nbsd "$(tdir_armelfb_nbsd)"
earmnbsd.c:	$(srcdir)/emulparams/armnbsd.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armnbsd "$(tdir_armnbsd)"
earmnto.c: $(srcdir)/emulparams/armnto.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armnto "$(tdir_armnto)"
earmpe.c: $(srcdir)/emulparams/armpe.sh \
  $(srcdir)/emultempl/pe.em $(srcdir)/scripttempl/pe.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armpe "$(tdir_armpe)"
earmsymbian.c: $(srcdir)/emulparams/armsymbian.sh \
  $(srcdir)/emulparams/armelf.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/armelf.em $(srcdir)/scripttempl/armbpabi.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} armsymbian "$(tdir_armelf)"
eavr1.c: $(srcdir)/emulparams/avr1.sh $(srcdir)/emultempl/avrelf.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avr1 "$(tdir_avr2)"
eavr2.c: $(srcdir)/emulparams/avr2.sh $(srcdir)/emultempl/avrelf.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avr2 "$(tdir_avr2)"
eavr25.c: $(srcdir)/emulparams/avr25.sh $(srcdir)/emultempl/avrelf.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avr25 "$(tdir_avr2)"
eavr3.c: $(srcdir)/emulparams/avr3.sh $(srcdir)/emultempl/avrelf.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avr3 "$(tdir_avr2)"
eavr31.c: $(srcdir)/emulparams/avr31.sh $(srcdir)/emultempl/avrelf.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avr31 "$(tdir_avr2)"
eavr35.c: $(srcdir)/emulparams/avr35.sh $(srcdir)/emultempl/avrelf.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avr35 "$(tdir_avr2)"
eavr4.c: $(srcdir)/emulparams/avr4.sh $(srcdir)/emultempl/avrelf.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avr4 "$(tdir_avr2)"
eavr5.c: $(srcdir)/emulparams/avr5.sh $(srcdir)/emultempl/avrelf.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avr5 "$(tdir_avr2)"
eavr51.c: $(srcdir)/emulparams/avr51.sh $(srcdir)/emultempl/avrelf.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avr51 "$(tdir_avr2)"
eavr6.c: $(srcdir)/emulparams/avr6.sh $(srcdir)/emultempl/avrelf.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avr6 "$(tdir_avr2)"
eavrxmega1.c: $(srcdir)/emulparams/avrxmega1.sh \
  $(srcdir)/emultempl/avrelf.em $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avrxmega1 "$(tdir_avr2)"
eavrxmega2.c: $(srcdir)/emulparams/avrxmega2.sh \
  $(srcdir)/emultempl/avrelf.em $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avrxmega2 "$(tdir_avr2)"
eavrxmega3.c: $(srcdir)/emulparams/avrxmega3.sh \
  $(srcdir)/emultempl/avrelf.em $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avrxmega3 "$(tdir_avr2)"
eavrxmega4.c: $(srcdir)/emulparams/avrxmega4.sh \
  $(srcdir)/emultempl/avrelf.em $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avrxmega4 "$(tdir_avr2)"
eavrxmega5.c: $(srcdir)/emulparams/avrxmega5.sh \
  $(srcdir)/emultempl/avrelf.em $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avrxmega5 "$(tdir_avr2)"
eavrxmega6.c: $(srcdir)/emulparams/avrxmega6.sh \
  $(srcdir)/emultempl/avrelf.em $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avrxmega6 "$(tdir_avr2)"
eavrxmega7.c: $(srcdir)/emulparams/avrxmega7.sh \
  $(srcdir)/emultempl/avrelf.em $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avrxmega7 "$(tdir_avr2)"
ecoff_i860.c: $(srcdir)/emulparams/coff_i860.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/i860coff.sc ${GEN_DEPENDS}
	${GENSCRIPTS} coff_i860 "$(tdir_coff_i860)"
ecoff_sparc.c: $(srcdir)/emulparams/coff_sparc.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/sparccoff.sc ${GEN_DEPENDS}
	${GENSCRIPTS} coff_sparc "$(tdir_coff_sparc)"
ecrisaout.c: $(srcdir)/emulparams/crisaout.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/crisaout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} crisaout "$(tdir_cris)"
ecriself.c: $(srcdir)/emulparams/criself.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} criself "$(tdir_cris)"
ecrislinux.c: $(srcdir)/emulparams/crislinux.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} crislinux "$(tdir_cris)"
ed10velf.c: $(srcdir)/emulparams/d10velf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elfd10v.sc ${GEN_DEPENDS}
	${GENSCRIPTS} d10velf "$(tdir_d10v)"
ed30v_e.c: $(srcdir)/emulparams/d30v_e.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elfd30v.sc ${GEN_DEPENDS}
	${GENSCRIPTS} d30v_e "$(tdir_d30v)"
ed30v_o.c: $(srcdir)/emulparams/d30v_o.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elfd30v.sc ${GEN_DEPENDS}
	${GENSCRIPTS} d30v_o "$(tdir_d30v)"
ed30velf.c: $(srcdir)/emulparams/d30velf.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elfd30v.sc ${GEN_DEPENDS}
	${GENSCRIPTS} d30velf "$(tdir_d30v)"
edelta68.c: $(srcdir)/emulparams/delta68.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/delta68.sc ${GEN_DEPENDS}
	${GENSCRIPTS} delta68 "$(tdir_delta68)"
eelf32_dlx.c: $(srcdir)/emulparams/elf32_dlx.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/dlx.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_dlx "$(tdir_elf32_dlx)"
eelf32_i860.c: $(srcdir)/emulparams/elf32_i860.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_i860 "$(tdir_elf32_i860)"
eelf32_i960.c: $(srcdir)/emulparams/elf32_i960.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_i960 "$(tdir_elf32_i960)"
eelf32_sparc.c: $(srcdir)/emulparams/elf32_sparc.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_sparc "$(tdir_elf32_sparc)"
eelf32_sparc_sol2.c: $(srcdir)/emulparams/elf32_sparc_sol2.sh \
  $(srcdir)/emulparams/elf32_sparc.sh \
  $(srcdir)/emulparams/solaris2.sh \
  $(srcdir)/emultempl/solaris2.em $(ELF_DEPS) \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_sparc_sol2 "$(tdir_elf32_sparc_sol2)"
eelf32_sparc_vxworks.c: $(srcdir)/emulparams/elf32_sparc_vxworks.sh \
  $(srcdir)/emulparams/vxworks.sh $(srcdir)/emulparams/elf32_sparc.sh \
  $(srcdir)/emultempl/vxworks.em $(ELF_DEPS) \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_sparc_vxworks "$(tdir_elf32_sparc_vxworks)"
eelf32_spu.c: $(srcdir)/emulparams/elf32_spu.sh $(srcdir)/emultempl/spuelf.em \
  $(srcdir)/emultempl/spu_ovl.@@OBJEXT@@_c $(srcdir)/emultempl/spu_icache.@@OBJEXT@@_c \
  ldemul-list.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_spu "$(tdir_elf32_spu)"
$(srcdir)/emultempl/spu_ovl.@@OBJEXT@@_c: @@MAINT@@ $(srcdir)/emultempl/spu_ovl.S
	if ../gas/as-new --version \
		| grep 'target.*spu' >/dev/null 2>/dev/null; then \
	  cpp -DOVLY_IRQ_SAVE $(srcdir)/emultempl/spu_ovl.S spu_ovl.s; \
	  ../gas/as-new -o spu_ovl.@@OBJEXT@@ spu_ovl.s; \
	  ../binutils/bin2c <spu_ovl.@@OBJEXT@@ >$@@; \
	fi
$(srcdir)/emultempl/spu_icache.@@OBJEXT@@_c: @@MAINT@@ $(srcdir)/emultempl/spu_icache.S
	if ../gas/as-new --version \
		| grep 'target.*spu' >/dev/null 2>/dev/null; then \
	  cpp -DOVLY_IRQ_SAVE $(srcdir)/emultempl/spu_icache.S spu_icache.s; \
	  ../gas/as-new -o spu_icache.@@OBJEXT@@ spu_icache.s; \
	  ../binutils/bin2c <spu_icache.@@OBJEXT@@ >$@@; \
	fi
eelf32_tic6x_be.c: $(srcdir)/emulparams/elf32_tic6x_be.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc $(srcdir)/emultempl/tic6xdsbt.em \
  ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_tic6x_be "$(tdir_elf32_tic6x_be)"
eelf32_tic6x_elf_be.c: $(srcdir)/emulparams/elf32_tic6x_elf_be.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc  $(srcdir)/emultempl/tic6xdsbt.em \
  ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_tic6x_elf_be "$(tdir_elf32_tic6x_elf_be)"
eelf32_tic6x_elf_le.c: $(srcdir)/emulparams/elf32_tic6x_elf_le.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc  $(srcdir)/emultempl/tic6xdsbt.em \
  ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_tic6x_elf_le "$(tdir_elf32_tic6x_elf_le)"
eelf32_tic6x_le.c: $(srcdir)/emulparams/elf32_tic6x_le.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc $(srcdir)/emultempl/tic6xdsbt.em \
  ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_tic6x_le "$(tdir_elf32_tic6x_le)"
eelf32_tic6x_linux_be.c: $(srcdir)/emulparams/elf32_tic6x_linux_be.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc  $(srcdir)/emultempl/tic6xdsbt.em \
  ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_tic6x_linux_be "$(tdir_elf32_tic6x_linux_be)"
eelf32_tic6x_linux_le.c: $(srcdir)/emulparams/elf32_tic6x_linux_le.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc  $(srcdir)/emultempl/tic6xdsbt.em \
  ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_tic6x_linux_le "$(tdir_elf32_tic6x_linux_le)"
eelf32am33lin.c: $(srcdir)/emulparams/elf32am33lin.sh \
  $(srcdir)/emulparams/elf32am33lin.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32am33lin "$(tdir_elf32am33lin)"
eelf32b4300.c: $(srcdir)/emulparams/elf32b4300.sh \
  $(srcdir)/emulparams/elf32bmip.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32b4300 "$(tdir_elf32b4300)"
eelf32bfin.c: $(srcdir)/emulparams/bfin.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/bfin.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32bfin "$(tdir_elf32bfin)" bfin
eelf32bfinfd.c: $(srcdir)/emulparams/elf32bfinfd.sh \
  $(srcdir)/emulparams/bfin.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/bfin.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32bfinfd "$(tdir_elf32bfinfd)" elf32bfinfd
eelf32bmip.c: $(srcdir)/emulparams/elf32bmip.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32bmip "$(tdir_elf32bmip)"
eelf32bmipn32.c: $(srcdir)/emulparams/elf32bmipn32.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/irix.em $(srcdir)/emultempl/mipself.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32bmipn32 "$(tdir_elf32bmipn32)"
eelf32bsmip.c: $(srcdir)/emulparams/elf32bsmip.sh \
  $(srcdir)/emulparams/elf32bmip.sh $(ELF_DEPS) $(srcdir)/emultempl/irix.em \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32bsmip "$(tdir_elf32bsmip)"
eelf32btsmip.c: $(srcdir)/emulparams/elf32btsmip.sh \
  $(srcdir)/emulparams/elf32bmip.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32btsmip "$(tdir_elf32btsmip)"
eelf32btsmip_fbsd.c: $(srcdir)/emulparams/elf32btsmip_fbsd.sh \
  $(srcdir)/emulparams/elf32bmip.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32btsmip_fbsd "$(tdir_elf32btsmip_fbsd)"
eelf32btsmipn32.c: $(srcdir)/emulparams/elf32btsmipn32.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32btsmipn32 "$(tdir_elf32btsmipn32)"
eelf32btsmipn32_fbsd.c: $(srcdir)/emulparams/elf32btsmipn32_fbsd.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32btsmipn32_fbsd "$(tdir_elf32btsmipn32_fbsd)"
eelf32cr16.c: $(srcdir)/emulparams/elf32cr16.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/cr16elf.em \
  $(srcdir)/scripttempl/elf32cr16.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32cr16 "$(tdir_elf32crx)"
eelf32cr16c.c: $(srcdir)/emulparams/elf32cr16c.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf32cr16c.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32cr16c "$(tdir_elf32cr16c)"
eelf32crx.c: $(srcdir)/emulparams/elf32crx.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/crxelf.em \
  $(srcdir)/scripttempl/elf32crx.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32crx "$(tdir_elf32crx)"
eelf32ebmip.c: $(srcdir)/emulparams/elf32ebmip.sh \
  $(srcdir)/emulparams/elf32bmip.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ebmip "$(tdir_elf32ebmip)"
eelf32ebmipvxworks.c: $(srcdir)/emulparams/elf32ebmipvxworks.sh \
  $(srcdir)/emulparams/elf32bmip.sh $(srcdir)/emulparams/vxworks.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/mipself.em \
  $(srcdir)/emultempl/vxworks.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ebmipvxworks "$(tdir_elf32ebmipvxworks)"
eelf32elmip.c: $(srcdir)/emulparams/elf32elmip.sh \
  $(srcdir)/emulparams/elf32lmip.sh $(srcdir)/emulparams/elf32bmip.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} elf32elmip "$(tdir_elf32elmip)"
eelf32elmipvxworks.c: $(srcdir)/emulparams/elf32elmipvxworks.sh \
  $(srcdir)/emulparams/elf32bmip.sh $(srcdir)/emulparams/vxworks.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/mipself.em \
  $(srcdir)/emultempl/vxworks.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32elmipvxworks "$(tdir_elf32elmipvxworks)"
eelf32lr5900.c: $(srcdir)/emulparams/elf32lr5900.sh \
  $(srcdir)/emulparams/elf32bmip.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} elf32lr5900 "$(tdir_elf32lr5900)"
eelf32lr5900n32.c: $(srcdir)/emulparams/elf32lr5900n32.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} elf32lr5900n32 "$(tdir_elf32lr5900n32)"
eelf32epiphany.c: $(srcdir)/emulparams/elf32epiphany.sh \
  $(ELF_DEPS) ${GEN_DEPENDS}
	${GENSCRIPTS} elf32epiphany "$(tdir_epiphany)"
eelf32epiphany_4x4.c: $(srcdir)/emulparams/elf32epiphany_4x4.sh \
  $(srcdir)/emultempl/elf32.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/epiphany_4x4.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32epiphany_4x4 "$(tdir_epiphany_4x4)"
eelf32fr30.c: $(srcdir)/emulparams/elf32fr30.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32fr30 "$(tdir_fr30)"
eelf32frv.c: $(srcdir)/emulparams/elf32frv.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32frv "$(tdir_frv)"
eelf32frvfd.c: $(srcdir)/emulparams/elf32frvfd.sh \
  $(srcdir)/emulparams/elf32frv.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32frvfd "$(tdir_frv)"
eelf32i370.c: $(srcdir)/emulparams/elf32i370.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elfi370.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32i370 "$(tdir_elf32i370)"
eelf32ip2k.c: $(srcdir)/emulparams/elf32ip2k.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ip2k "$(tdir_ip2k)"
eelf32iq10.c: $(srcdir)/emulparams/elf32iq10.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/iq2000.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32iq10 "$(tdir_iq10)"
eelf32iq2000.c: $(srcdir)/emulparams/elf32iq2000.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/iq2000.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32iq2000 "$(tdir_iq2000)"
eelf32l4300.c: $(srcdir)/emulparams/elf32l4300.sh \
  $(srcdir)/emulparams/elf32b4300.sh $(srcdir)/emulparams/elf32bmip.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} elf32l4300 "$(tdir_elf32l4300)"
eelf32lm32.c: $(srcdir)/emulparams/elf32lm32.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32lm32 "$(tdir_elf32lm32)"
eelf32lm32fd.c: $(srcdir)/emulparams/elf32lm32fd.sh \
  $(srcdir)/emulparams/elf32lm32.sh $(ELF_DEPS) \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32lm32fd "$(tdir_elf32lm32fd)"
eelf32lmip.c: $(srcdir)/emulparams/elf32lmip.sh \
  $(srcdir)/emulparams/elf32bmip.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32lmip "$(tdir_elf32lmip)"
eelf32lppc.c: $(srcdir)/emulparams/elf32lppc.sh \
  $(srcdir)/emulparams/elf32ppccommon.sh \
  $(srcdir)/emulparams/elf32ppc.sh $(srcdir)/emultempl/ppc32elf.em \
  ldemul-list.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32lppc "$(tdir_elf32lppc)"
eelf32lppclinux.c: $(srcdir)/emulparams/elf32lppclinux.sh \
  $(srcdir)/emulparams/elf32lppc.sh $(srcdir)/emulparams/elf32ppc.sh \
  $(srcdir)/emulparams/elf32ppccommon.sh $(srcdir)/emultempl/ppc32elf.em \
  ldemul-list.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32lppclinux "$(tdir_elf32lppclinux)"
eelf32lppcnto.c: $(srcdir)/emulparams/elf32lppcnto.sh \
  $(srcdir)/emulparams/elf32ppc.sh $(srcdir)/emulparams/elf32ppccommon.sh \
  $(srcdir)/emultempl/ppc32elf.em $(ELF_DEPS) \
  ldemul-list.h \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32lppcnto "$(tdir_elf32lppcnto)"
eelf32lppcsim.c: $(srcdir)/emulparams/elf32lppcsim.sh \
  $(srcdir)/emulparams/elf32lppc.sh $(srcdir)/emulparams/elf32ppc.sh \
  $(srcdir)/emulparams/elf32ppccommon.sh $(srcdir)/emultempl/ppc32elf.em \
  ldemul-list.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32lppcsim "$(tdir_elf32lppcsim)"
eelf32lsmip.c: $(srcdir)/emulparams/elf32lsmip.sh \
  $(srcdir)/emulparams/elf32lmip.sh $(srcdir)/emulparams/elf32bmip.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} elf32lsmip "$(tdir_elf32lsmip)"
eelf32ltsmip.c: $(srcdir)/emulparams/elf32ltsmip.sh \
  $(srcdir)/emulparams/elf32btsmip.sh $(srcdir)/emulparams/elf32bmip.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ltsmip "$(tdir_elf32ltsmip)"
eelf32ltsmip_fbsd.c: $(srcdir)/emulparams/elf32ltsmip_fbsd.sh \
  $(srcdir)/emulparams/elf32btsmip.sh $(srcdir)/emulparams/elf32bmip.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ltsmip_fbsd "$(tdir_elf32ltsmip_fbsd)"
eelf32ltsmipn32.c: $(srcdir)/emulparams/elf32ltsmipn32.sh \
  $(srcdir)/emulparams/elf32btsmipn32.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ltsmipn32 "$(tdir_elf32ltsmipn32)"
eelf32ltsmipn32_fbsd.c: $(srcdir)/emulparams/elf32ltsmipn32_fbsd.sh \
  $(srcdir)/emulparams/elf32btsmipn32.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ltsmipn32_fbsd "$(tdir_elf32ltsmipn32_fbsd)"
eelf32m32c.c: $(srcdir)/emulparams/elf32m32c.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32m32c "$(tdir_m32c)"
eelf32mbel_linux.c: $(srcdir)/emulparams/elf32mbel_linux.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32mbel_linux "$(tdir_microblazeel)"
eelf32mb_linux.c: $(srcdir)/emulparams/elf32mb_linux.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32mb_linux "$(tdir_microblaze)"
eelf32mcore.c: $(srcdir)/emulparams/elf32mcore.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32mcore "$(tdir_mcore)"
eelf32mep.c: $(srcdir)/emulparams/elf32mep.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/mep.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32mep "$(tdir_mep)"
eelf32metag.c: $(srcdir)/emulparams/elf32metag.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/metagelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32metag "$(tdir_metag)"
eelf32microblazeel.c: $(srcdir)/emulparams/elf32microblazeel.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elfmicroblaze.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32microblazeel "$(tdir_microblazeel)"
eelf32microblaze.c: $(srcdir)/emulparams/elf32microblaze.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elfmicroblaze.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32microblaze "$(tdir_microblaze)"
eelf32mipswindiss.c: $(srcdir)/emulparams/elf32mipswindiss.sh $(ELF_DEPS) \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32mipswindiss "$(tdir_elf32mipswindiss)"
eelf32moxie.c: $(srcdir)/emulparams/elf32moxie.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32moxie "$(tdir_moxie)"
eelf32mt.c: $(srcdir)/emulparams/elf32mt.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32mt "$(tdir_mt)"
eelf32openrisc.c: $(srcdir)/emulparams/elf32openrisc.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32openrisc "$(tdir_openrisc)"
eelf32ppc.c: $(srcdir)/emulparams/elf32ppc.sh \
  $(srcdir)/emulparams/elf32ppccommon.sh $(srcdir)/emultempl/ppc32elf.em \
  ldemul-list.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ppc "$(tdir_elf32ppc)"
eelf32ppc_fbsd.c: $(srcdir)/emulparams/elf32ppc_fbsd.sh \
  $(srcdir)/emulparams/elf32ppc.sh $(srcdir)/emulparams/elf32ppccommon.sh \
  $(srcdir)/emultempl/ppc32elf.em $(ELF_DEPS) \
  ldemul-list.h \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ppc_fbsd "$(tdir_elf32ppc_fbsd)"
eelf32ppclinux.c: $(srcdir)/emulparams/elf32ppclinux.sh \
  $(srcdir)/emulparams/elf32ppc.sh $(srcdir)/emulparams/elf32ppccommon.sh \
  $(srcdir)/emultempl/ppc32elf.em $(ELF_DEPS) \
  ldemul-list.h \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ppclinux "$(tdir_elf32ppclinux)"
eelf32ppcnto.c: $(srcdir)/emulparams/elf32ppcnto.sh \
  $(srcdir)/emulparams/elf32ppc.sh $(srcdir)/emulparams/elf32ppccommon.sh \
  $(srcdir)/emultempl/ppc32elf.em $(ELF_DEPS) \
  ldemul-list.h \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ppcnto "$(tdir_elf32ppcnto)"
eelf32ppcsim.c: $(srcdir)/emulparams/elf32ppcsim.sh \
  $(srcdir)/emulparams/elf32ppc.sh $(srcdir)/emulparams/elf32ppccommon.sh \
  $(srcdir)/emultempl/ppc32elf.em $(ELF_DEPS) \
  ldemul-list.h \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ppcsim "$(tdir_elf32ppcsim)"
eelf32ppcvxworks.c: $(srcdir)/emulparams/elf32ppcvxworks.sh \
  $(srcdir)/emulparams/elf32ppccommon.sh $(srcdir)/emulparams/vxworks.sh \
  $(srcdir)/emultempl/vxworks.em $(ELF_DEPS) \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ppcvxworks "$(tdir_elf32ppcvxworks)"
eelf32ppcwindiss.c: $(srcdir)/emulparams/elf32ppcwindiss.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ppcwindiss "$(tdir_elf32ppcwindiss)"
eelf32rl78.c: $(srcdir)/emulparams/elf32rl78.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32rl78 "$(tdir_elf32rl78)"
eelf32rx.c: $(srcdir)/emulparams/elf32rx.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32rx "$(tdir_elf32rx)"
eelf32tilegx.c: $(srcdir)/emulparams/elf32tilegx.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32tilegx "$(tdir_tilegx)"
eelf32tilegx_be.c: $(srcdir)/emulparams/elf32tilegx_be.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32tilegx_be "$(tdir_tilegx_be)"
eelf32tilepro.c: $(srcdir)/emulparams/elf32tilepro.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32tilepro "$(tdir_tilepro)"
eelf32vax.c: $(srcdir)/emulparams/elf32vax.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32vax "$(tdir_elf32vax)"
eelf32xc16x.c: $(srcdir)/emulparams/elf32xc16x.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32xc16x "$(tdir_xc16x)"
eelf32xc16xl.c: $(srcdir)/emulparams/elf32xc16xl.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32xc16xl "$(tdir_xc16xl)"
eelf32xc16xs.c: $(srcdir)/emulparams/elf32xc16xs.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32xc16xs "$(tdir_xc16xs)"
eelf32xstormy16.c: $(srcdir)/emulparams/elf32xstormy16.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/xstormy16.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32xstormy16 "$(tdir_xstormy16)"
eelf32xtensa.c: $(srcdir)/emulparams/elf32xtensa.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/xtensaelf.em $(INCDIR)/xtensa-config.h \
  $(BFDDIR)/elf-bfd.h $(BFDDIR)/libbfd.h $(INCDIR)/elf/xtensa.h \
  $(srcdir)/scripttempl/elfxtensa.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32xtensa "$(tdir_elf32xtensa)"
eelf_i386.c: $(srcdir)/emulparams/elf_i386.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_i386 "$(tdir_elf_i386)"
eelf_i386_be.c: $(srcdir)/emulparams/elf_i386_be.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_i386_be "$(tdir_elf_i386_be)"
eelf_i386_chaos.c: $(srcdir)/emulparams/elf_i386_chaos.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf_chaos.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_i386_chaos "$(tdir_elf_i386_chaos)"
eelf_i386_fbsd.c: $(srcdir)/emulparams/elf_i386_fbsd.sh \
  $(srcdir)/emulparams/elf_i386.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_i386_fbsd "$(tdir_elf_i386_fbsd)"
eelf_i386_ldso.c: $(srcdir)/emulparams/elf_i386_ldso.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_i386_ldso "$(tdir_elf_i386_ldso)"
eelf_i386_nacl.c: $(srcdir)/emulparams/elf_i386_nacl.sh \
  $(srcdir)/emulparams/elf_i386.sh \
  $(srcdir)/emulparams/elf_nacl.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_i386_nacl "$(tdir_elf_i386_nacl)"
eelf_i386_sol2.c: $(srcdir)/emulparams/elf_i386_sol2.sh \
  $(srcdir)/emulparams/solaris2.sh \
  $(srcdir)/emultempl/solaris2.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_i386_sol2 "$(tdir_elf_i386_sol2)"
eelf_i386_vxworks.c: $(srcdir)/emulparams/elf_i386_vxworks.sh \
  $(srcdir)/emulparams/vxworks.sh $(srcdir)/emultempl/vxworks.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_i386_vxworks "$(tdir_elf_i386_vxworks)"
eelf_s390.c: $(srcdir)/emulparams/elf_s390.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_s390 "$(tdir_elf_s390)"
egld960.c: $(srcdir)/emulparams/gld960.sh \
  $(srcdir)/emultempl/gld960.em $(srcdir)/scripttempl/i960.sc ${GEN_DEPENDS}
	${GENSCRIPTS} gld960 "$(tdir_gld960)"
egld960coff.c: $(srcdir)/emulparams/gld960coff.sh \
  $(srcdir)/emultempl/gld960c.em $(srcdir)/scripttempl/i960.sc ${GEN_DEPENDS}
	${GENSCRIPTS} gld960coff "$(tdir_gld960coff)"
eh8300.c: $(srcdir)/emulparams/h8300.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/h8300.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300 "$(tdir_h8300)"
eh8300elf.c: $(srcdir)/emulparams/h8300elf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300elf "$(tdir_h8300elf)"
eh8300h.c: $(srcdir)/emulparams/h8300h.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/h8300h.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300h "$(tdir_h8300h)"
eh8300helf.c: $(srcdir)/emulparams/h8300helf.sh \
  $(srcdir)/emulparams/h8300elf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300helf "$(tdir_h8300helf)"
eh8300hn.c: $(srcdir)/emulparams/h8300hn.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/h8300hn.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300hn "$(tdir_h8300hn)"
eh8300hnelf.c: $(srcdir)/emulparams/h8300hnelf.sh \
  $(srcdir)/emulparams/h8300elf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300hnelf "$(tdir_h8300hnelf)"
eh8300s.c: $(srcdir)/emulparams/h8300s.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/h8300s.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300s "$(tdir_h8300s)"
eh8300self.c: $(srcdir)/emulparams/h8300self.sh \
  $(srcdir)/emulparams/h8300elf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300self "$(tdir_h8300self)"
eh8300sn.c: $(srcdir)/emulparams/h8300sn.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/h8300sn.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300sn "$(tdir_h8300sn)"
eh8300snelf.c: $(srcdir)/emulparams/h8300snelf.sh \
  $(srcdir)/emulparams/h8300elf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300snelf "$(tdir_h8300snelf)"
eh8300sx.c: $(srcdir)/emulparams/h8300sx.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/h8300sx.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300sx "$(tdir_h8300sx)"
eh8300sxelf.c: $(srcdir)/emulparams/h8300sxelf.sh \
  $(srcdir)/emulparams/h8300elf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300sxelf "$(tdir_h8300sxelf)"
eh8300sxn.c: $(srcdir)/emulparams/h8300sxn.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/h8300sxn.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300sxn "$(tdir_h8300sxn)"
eh8300sxnelf.c: $(srcdir)/emulparams/h8300sxnelf.sh \
  $(srcdir)/emulparams/h8300elf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300sxnelf "$(tdir_h8300sxnelf)"
eh8500.c: $(srcdir)/emulparams/h8500.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/h8500.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8500 "$(tdir_h8500)"
eh8500b.c: $(srcdir)/emulparams/h8500b.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/h8500b.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8500b "$(tdir_h8500b)"
eh8500c.c: $(srcdir)/emulparams/h8500c.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/h8500c.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8500c "$(tdir_h8500c)"
eh8500m.c: $(srcdir)/emulparams/h8500m.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/h8500m.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8500m "$(tdir_h8500m)"
eh8500s.c: $(srcdir)/emulparams/h8500s.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/h8500s.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8500s "$(tdir_h8500s)"
ehp300bsd.c: $(srcdir)/emulparams/hp300bsd.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} hp300bsd "$(tdir_hp300bsd)"
ehp3hpux.c: $(srcdir)/emulparams/hp3hpux.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} hp3hpux "$(tdir_hp3hpux)"
ehppaelf.c: $(srcdir)/emulparams/hppaelf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/hppaelf.em \
  $(srcdir)/scripttempl/hppaelf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} hppaelf "$(tdir_hppaelf)"
ehppalinux.c: $(srcdir)/emulparams/hppalinux.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/hppaelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} hppalinux "$(tdir_hppalinux)"
ehppanbsd.c: $(srcdir)/emulparams/hppanbsd.sh \
  $(srcdir)/emulparams/hppaelf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/hppaelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} hppanbsd "$(tdir_hppanbsd)"
ehppaobsd.c: $(srcdir)/emulparams/hppaobsd.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/hppaelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} hppaobsd "$(tdir_hppaobsd)"
ei386aout.c: $(srcdir)/emulparams/i386aout.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} i386aout "$(tdir_i386aout)"
ei386beos.c: $(srcdir)/emulparams/i386beos.sh \
  $(srcdir)/emultempl/beos.em $(srcdir)/scripttempl/i386beos.sc ${GEN_DEPENDS}
	${GENSCRIPTS} i386beos "$(tdir_i386beos)"
ei386bsd.c: $(srcdir)/emulparams/i386bsd.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} i386bsd "$(tdir_i386bsd)"
ei386coff.c: $(srcdir)/emulparams/i386coff.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/i386coff.sc ${GEN_DEPENDS}
	${GENSCRIPTS} i386coff "$(tdir_i386coff)"
ei386go32.c: $(srcdir)/emulparams/i386go32.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/i386go32.sc ${GEN_DEPENDS}
	${GENSCRIPTS} i386go32 "$(tdir_i386go32)"
ei386linux.c: $(srcdir)/emulparams/i386linux.sh \
  $(srcdir)/emultempl/linux.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} i386linux "$(tdir_i386linux)"
ei386lynx.c: $(srcdir)/emulparams/i386lynx.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} i386lynx "$(tdir_i386lynx)"
ei386mach.c: $(srcdir)/emulparams/i386mach.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} i386mach "$(tdir_i386mach)"
ei386moss.c: $(srcdir)/emulparams/i386moss.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} i386moss "$(tdir_i386moss)"
ei386msdos.c: $(srcdir)/emulparams/i386msdos.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/i386msdos.sc ${GEN_DEPENDS}
	${GENSCRIPTS} i386msdos "$(tdir_i386msdos)"
ei386nbsd.c:	$(srcdir)/emulparams/i386nbsd.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} i386nbsd "$(tdir_i386nbsd)"
ei386nto.c:	$(srcdir)/emulparams/i386nto.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} i386nto "$(tdir_i386nto)"
ei386nw.c:	$(srcdir)/emulparams/i386nw.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/nw.sc ${GEN_DEPENDS}
	${GENSCRIPTS} i386nw "$(tdir_i386nw)"
ei386pe.c: $(srcdir)/emulparams/i386pe.sh \
  $(srcdir)/emultempl/pe.em $(srcdir)/scripttempl/pe.sc ${GEN_DEPENDS}
	${GENSCRIPTS} i386pe "$(tdir_i386pe)"
ei386pe_posix.c: $(srcdir)/emulparams/i386pe_posix.sh \
  $(srcdir)/emultempl/pe.em $(srcdir)/scripttempl/pe.sc ${GEN_DEPENDS}
	${GENSCRIPTS} i386pe_posix "$(tdir_i386pe_posix)"
ei386pep.c: $(srcdir)/emulparams/i386pep.sh \
  $(srcdir)/emultempl/pep.em $(srcdir)/scripttempl/pep.sc ${GEN_DEPENDS}
	${GENSCRIPTS} i386pep "$(tdir_i386pe)"
elnk960.c: $(srcdir)/emulparams/lnk960.sh \
  $(srcdir)/emultempl/lnk960.em $(srcdir)/scripttempl/i960.sc ${GEN_DEPENDS}
	${GENSCRIPTS} lnk960 "$(tdir_lnk960)"
em32relf.c: $(srcdir)/emulparams/m32relf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m32relf "$(tdir_m32r)"
em32relf_linux.c: $(srcdir)/emulparams/m32relf_linux.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m32relf_linux "$(tdir_m32relf_linux)"
em32rlelf.c: $(srcdir)/emulparams/m32rlelf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m32rlelf "$(tdir_m32rlelf)"
em32rlelf_linux.c: $(srcdir)/emulparams/m32rlelf_linux.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m32rlelf_linux "$(tdir_m32rlelf_linux)"
em68hc11elf.c: $(srcdir)/emulparams/m68hc11elf.sh \
  $(srcdir)/emultempl/m68hc1xelf.em $(ELF_DEPS) \
  $(srcdir)/scripttempl/elfm68hc11.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m68hc11elf "$(tdir_m68hc11)"
em68hc11elfb.c: $(srcdir)/emulparams/m68hc11elfb.sh \
  $(srcdir)/emultempl/m68hc1xelf.em $(ELF_DEPS) \
  $(srcdir)/scripttempl/elfm68hc11.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m68hc11elfb "$(tdir_m68hc11b)"
em68hc12elf.c: $(srcdir)/emulparams/m68hc12elf.sh \
  $(srcdir)/emultempl/m68hc1xelf.em $(ELF_DEPS) \
  $(srcdir)/scripttempl/elfm68hc12.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m68hc12elf "$(tdir_m68hc12)"
em68hc12elfb.c: $(srcdir)/emulparams/m68hc12elfb.sh \
  $(srcdir)/emultempl/m68hc1xelf.em $(ELF_DEPS) \
  $(srcdir)/scripttempl/elfm68hc12.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m68hc12elfb "$(tdir_m68hc12b)"
em68k4knbsd.c:	$(srcdir)/emulparams/m68k4knbsd.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m68k4knbsd "$(tdir_m68k4knbsd)"
em68kaout.c: $(srcdir)/emulparams/m68kaout.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m68kaout "$(tdir_m68kaout)"
em68kaux.c: $(srcdir)/emulparams/m68kaux.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/m68kaux.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m68kaux "$(tdir_m68kaux)"
em68kcoff.c: $(srcdir)/emulparams/m68kcoff.sh \
  $(srcdir)/emultempl/m68kcoff.em $(srcdir)/scripttempl/m68kcoff.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m68kcoff "$(tdir_m68kcoff)"
em68kelf.c: $(srcdir)/emulparams/m68kelf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/m68kelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m68kelf "$(tdir_m68kelf)"
em68kelfnbsd.c: $(srcdir)/emulparams/m68kelfnbsd.sh \
  $(srcdir)/emulparams/m68kelf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/m68kelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m68kelfnbsd "$(tdir_m68kelfnbsd)"
em68klinux.c: $(srcdir)/emulparams/m68klinux.sh \
  $(srcdir)/emultempl/linux.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m68klinux "$(tdir_m68klinux)"
em68knbsd.c:	$(srcdir)/emulparams/m68knbsd.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m68knbsd "$(tdir_m68knbsd)"
em68kpsos.c:	$(srcdir)/emulparams/m68kpsos.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/psos.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m68kpsos "$(tdir_m68kpsos)"
em88kbcs.c: $(srcdir)/emulparams/m88kbcs.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/m88kbcs.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m88kbcs "$(tdir_m88kbcs)"
emcorepe.c: $(srcdir)/emulparams/mcorepe.sh \
  $(srcdir)/emultempl/pe.em $(srcdir)/scripttempl/pe.sc ${GEN_DEPENDS}
	${GENSCRIPTS} mcorepe "$(tdir_mcorepe)"
emn10200.c: $(srcdir)/emulparams/mn10200.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} mn10200 "$(tdir_mn10200)"
emn10300.c: $(srcdir)/emulparams/mn10300.sh \
  $(srcdir)/emulparams/mn10200.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} mn10300 "$(tdir_mn10300)"
emsp430x110.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x110 "$(tdir_msp430x110)" msp430all
emsp430x1101.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1101 "$(tdir_msp430x1101)" msp430all
emsp430x1111.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1111 "$(tdir_msp430x1111)" msp430all
emsp430x112.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x112 "$(tdir_msp430x112)" msp430all
emsp430x1121.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1121 "$(tdir_msp430x1121)" msp430all
emsp430x1122.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1122 "$(tdir_msp430x1122)" msp430all
emsp430x1132.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1132 "$(tdir_msp430x1132)" msp430all
emsp430x122.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x122 "$(tdir_msp430x122)" msp430all
emsp430x1222.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1222 "$(tdir_msp430x1222)" msp430all
emsp430x123.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x123 "$(tdir_msp430x123)" msp430all
emsp430x1232.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1232 "$(tdir_msp430x1232)" msp430all
emsp430x133.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x133 "$(tdir_msp430x133)" msp430all
emsp430x1331.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1331 "$(tdir_msp430x1331)" msp430all
emsp430x135.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x135 "$(tdir_msp430x135)" msp430all
emsp430x1351.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1351 "$(tdir_msp430x1351)" msp430all
emsp430x147.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x147 "$(tdir_msp430x147)" msp430all
emsp430x148.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x148 "$(tdir_msp430x148)" msp430all
emsp430x149.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x149 "$(tdir_msp430x149)" msp430all
emsp430x155.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x155 "$(tdir_msp430x155)" msp430all
emsp430x156.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x156 "$(tdir_msp430x156)" msp430all
emsp430x157.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x157 "$(tdir_msp430x157)" msp430all
emsp430x1610.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1610 "$(tdir_msp430x1610)" msp430all
emsp430x1611.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1611 "$(tdir_msp430x1611)" msp430all
emsp430x1612.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1612 "$(tdir_msp430x1612)" msp430all
emsp430x167.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x167 "$(tdir_msp430x167)" msp430all
emsp430x168.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x168 "$(tdir_msp430x168)" msp430all
emsp430x169.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x169 "$(tdir_msp430x169)" msp430all
emsp430x2101.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x2101 "$(tdir_msp430x2101)" msp430all
emsp430x2111.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x2111 "$(tdir_msp430x2111)" msp430all
emsp430x2121.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x2121 "$(tdir_msp430x2121)" msp430all
emsp430x2131.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x2131 "$(tdir_msp430x2131)" msp430all
emsp430x311.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430_3.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x311 "$(tdir_msp430x311)" msp430all
emsp430x312.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430_3.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x312 "$(tdir_msp430x312)" msp430all
emsp430x313.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430_3.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x313 "$(tdir_msp430x313)" msp430all
emsp430x314.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430_3.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x314 "$(tdir_msp430x314)" msp430all
emsp430x315.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430_3.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x315 "$(tdir_msp430x315)" msp430all
emsp430x323.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430_3.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x323 "$(tdir_msp430x323)" msp430all
emsp430x325.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430_3.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x325 "$(tdir_msp430x325)" msp430all
emsp430x336.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430_3.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x336 "$(tdir_msp430x336)" msp430all
emsp430x337.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430_3.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x337 "$(tdir_msp430x337)" msp430all
emsp430x412.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x412 "$(tdir_msp430x412)" msp430all
emsp430x413.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x413 "$(tdir_msp430x413)" msp430all
emsp430x415.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x415 "$(tdir_msp430x415)" msp430all
emsp430x417.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x417 "$(tdir_msp430x417)" msp430all
emsp430x435.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x435 "$(tdir_msp430x435)" msp430all
emsp430x436.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x436 "$(tdir_msp430x436)" msp430all
emsp430x437.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x437 "$(tdir_msp430x437)" msp430all
emsp430x447.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x447 "$(tdir_msp430x447)" msp430all
emsp430x448.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x448 "$(tdir_msp430x448)" msp430all
emsp430x449.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x449 "$(tdir_msp430x449)" msp430all
emsp430xE423.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430xE423 "$(tdir_msp430xE423)" msp430all
emsp430xE425.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430xE425 "$(tdir_msp430xE425)" msp430all
emsp430xE427.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430xE427 "$(tdir_msp430xE427)" msp430all
emsp430xG437.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430xG437 "$(tdir_msp430xG437)" msp430all
emsp430xG438.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430xG438 "$(tdir_msp430xG438)" msp430all
emsp430xG439.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430xG439 "$(tdir_msp430xG439)" msp430all
emsp430xW423.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430xW423 "$(tdir_msp430xW423)" msp430all
emsp430xW425.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430xW425 "$(tdir_msp430xW425)" msp430all
emsp430xW427.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430xW427 "$(tdir_msp430xW427)" msp430all
emsp430X.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430X "$(tdir_msp430X)" msp430all
enews.c: $(srcdir)/emulparams/news.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} news "$(tdir_news)"
enios2elf.c: $(srcdir)/emulparams/nios2elf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} nios2elf "$(tdir_nios2elf)"
ens32knbsd.c:	$(srcdir)/emulparams/ns32knbsd.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/netbsd.em \
  $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} ns32knbsd "$(tdir_ns32knbsd)"
eaarch64elf.c: $(srcdir)/emulparams/aarch64elf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/aarch64elf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} aarch64elf "$(tdir_aarch64elf)"
eaarch64elf32.c: $(srcdir)/emulparams/aarch64elf32.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/aarch64elf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} aarch64elf32 "$(tdir_aarch64elf32)"
eaarch64elfb.c: $(srcdir)/emulparams/aarch64elfb.sh $(srcdir)/emulparams/aarch64elf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/aarch64elf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} aarch64elfb "$(tdir_aarch64elfb)"
eaarch64elf32b.c: $(srcdir)/emulparams/aarch64elf32b.sh $(srcdir)/emulparams/aarch64elf32.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/aarch64elf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} aarch64elf32b "$(tdir_aarch64elf32b)"
eaarch64linux.c: $(srcdir)/emulparams/aarch64linux.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/aarch64elf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} aarch64linux "$(tdir_aarch64linux)"
eaarch64linuxb.c: $(srcdir)/emulparams/aarch64linuxb.sh $(srcdir)/emulparams/aarch64linux.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/aarch64elf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} aarch64linuxb "$(tdir_aarch64linuxb)"
eor32.c: $(srcdir)/emulparams/or32.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/or32.sc ${GEN_DEPENDS}
	${GENSCRIPTS} or32 "$(tdir_or32)"
eor32elf.c: $(srcdir)/emulparams/or32elf.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} or32elf "$(tdir_or32elf)"
epc532macha.c: $(srcdir)/emulparams/pc532macha.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} pc532macha "$(tdir_pc532macha)"
epdp11.c: $(srcdir)/emulparams/pdp11.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} pdp11 "$(tdir_pdp11)"
epjelf.c: $(srcdir)/emulparams/pjelf.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} pjelf "$(tdir_pjelf)"
epjlelf.c: $(srcdir)/emulparams/pjlelf.sh $(srcdir)/emulparams/pjelf.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} pjlelf "$(tdir_pjlelf)"
eppclynx.c: $(srcdir)/emulparams/ppclynx.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} ppclynx "$(tdir_ppclynx)"
eppcmacos.c:	$(srcdir)/emulparams/ppcmacos.sh \
  $(srcdir)/emultempl/aix.em $(srcdir)/scripttempl/aix.sc ${GEN_DEPENDS}
	${GENSCRIPTS} ppcmacos "$(tdir_ppcmacos)"
eppcnw.c:	$(srcdir)/emulparams/ppcnw.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/nw.sc ${GEN_DEPENDS}
	${GENSCRIPTS} ppcnw "$(tdir_ppcnw)"
eppcpe.c: $(srcdir)/emulparams/ppcpe.sh \
  $(srcdir)/emultempl/pe.em $(srcdir)/scripttempl/ppcpe.sc ${GEN_DEPENDS}
	${GENSCRIPTS} ppcpe "$(tdir_ppcpe)"
eriscix.c: $(srcdir)/emulparams/riscix.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} riscix "$(tdir_riscix)"
escore3_elf.c: $(srcdir)/emulparams/scoreelf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/scoreelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} score3_elf "$(tdir_score3_elf)" scoreelf
escore7_elf.c: $(srcdir)/emulparams/scoreelf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/scoreelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} score7_elf "$(tdir_score7_elf)" scoreelf
esh.c: $(srcdir)/emulparams/sh.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/sh.sc ${GEN_DEPENDS}
	${GENSCRIPTS} sh "$(tdir_sh)"
eshelf.c: $(srcdir)/emulparams/shelf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shelf "$(tdir_shelf)"
eshelf32.c: $(srcdir)/emulparams/shelf32.sh \
  $(BFDDIR)/libbfd.h $(INCDIR)/libiberty.h \
  $(srcdir)/emultempl/sh64elf.em $(INCDIR)/elf/sh.h $(BFDDIR)/elf-bfd.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shelf32 "$(tdir_shelf32)"
eshelf32_linux.c: $(srcdir)/emulparams/shelf32_linux.sh \
  $(srcdir)/emulparams/shelf32.sh \
  $(BFDDIR)/libbfd.h $(INCDIR)/libiberty.h \
  $(srcdir)/emultempl/sh64elf.em $(INCDIR)/elf/sh.h $(BFDDIR)/elf-bfd.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shelf32_linux "$(tdir_shelf32_linux)"
eshelf32_nbsd.c: $(srcdir)/emulparams/shelf32_nbsd.sh \
  $(srcdir)/emulparams/shelf32.sh \
  $(BFDDIR)/libbfd.h $(INCDIR)/libiberty.h \
  $(srcdir)/emultempl/sh64elf.em $(INCDIR)/elf/sh.h $(BFDDIR)/elf-bfd.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shelf32_nbsd "$(tdir_shelf32_nbsd)"
eshelf_fd.c: $(srcdir)/emulparams/shelf_fd.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shelf_fd "$(tdir_shelf_fd)"
eshelf_linux.c: $(srcdir)/emulparams/shelf_linux.sh \
  $(srcdir)/emulparams/shlelf_linux.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shelf_linux "$(tdir_shelf_linux)"
eshelf_nbsd.c: $(srcdir)/emulparams/shelf_nbsd.sh \
  $(srcdir)/emulparams/shelf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shelf_nbsd "$(tdir_shelf_nbsd)"
eshelf_nto.c: $(srcdir)/emulparams/shelf_nto.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shelf_nto "$(tdir_shelf_nto)"
eshelf_uclinux.c: $(srcdir)/emulparams/shelf_uclinux.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shelf_uclinux "$(tdir_shelf_uclinux)"
eshelf_vxworks.c: $(srcdir)/emulparams/shelf_vxworks.sh \
  $(srcdir)/emulparams/vxworks.sh $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc \
  $(srcdir)/emultempl/vxworks.em ${GEN_DEPENDS}
	${GENSCRIPTS} shelf_vxworks "$(tdir_shelf_vxworks)"
eshl.c: $(srcdir)/emulparams/shl.sh \
  $(srcdir)/emulparams/sh.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/sh.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shl "$(tdir_shl)"
eshlelf.c: $(srcdir)/emulparams/shlelf.sh \
  $(srcdir)/emulparams/shelf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf "$(tdir_shlelf)"
eshlelf32.c: $(srcdir)/emulparams/shlelf32.sh \
  $(BFDDIR)/libbfd.h $(INCDIR)/libiberty.h $(srcdir)/emulparams/shelf32.sh \
  $(srcdir)/emultempl/sh64elf.em $(INCDIR)/elf/sh.h $(BFDDIR)/elf-bfd.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf32 "$(tdir_shlelf32)"
eshlelf32_linux.c: $(srcdir)/emulparams/shlelf32_linux.sh \
  $(srcdir)/emulparams/shelf32_linux.sh $(srcdir)/emulparams/shelf32.sh \
  $(BFDDIR)/libbfd.h $(INCDIR)/libiberty.h \
  $(srcdir)/emultempl/sh64elf.em $(INCDIR)/elf/sh.h $(BFDDIR)/elf-bfd.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf32_linux "$(tdir_shlelf32_linux)"
eshlelf32_nbsd.c: $(srcdir)/emulparams/shlelf32_nbsd.sh \
  $(srcdir)/emulparams/shelf32_nbsd.sh $(srcdir)/emulparams/shelf32.sh \
  $(BFDDIR)/libbfd.h $(INCDIR)/libiberty.h \
  $(srcdir)/emultempl/sh64elf.em $(INCDIR)/elf/sh.h $(BFDDIR)/elf-bfd.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf32_nbsd "$(tdir_shlelf32_nbsd)"
eshlelf_fd.c: $(srcdir)/emulparams/shlelf_fd.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf_fd "$(tdir_shlelf_fd)"
eshlelf_linux.c: $(srcdir)/emulparams/shlelf_linux.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf_linux "$(tdir_shlelf_linux)"
eshlelf_nbsd.c: $(srcdir)/emulparams/shlelf_nbsd.sh \
  $(srcdir)/emulparams/shelf_nbsd.sh \
  $(srcdir)/emulparams/shelf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf_nbsd "$(tdir_shlelf_nbsd)"
eshlelf_nto.c: $(srcdir)/emulparams/shlelf_nto.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf_nto "$(tdir_shlelf_nto)"
eshlelf_vxworks.c: $(srcdir)/emulparams/shlelf_vxworks.sh \
  $(srcdir)/emulparams/shelf_vxworks.sh $(srcdir)/emulparams/vxworks.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc $(srcdir)/emultempl/vxworks.em \
  ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf_vxworks "$(tdir_shlelf_vxworks)"
eshlsymbian.c: $(srcdir)/emulparams/shlsymbian.sh \
  $(srcdir)/emulparams/shelf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf32sh-symbian.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlsymbian "$(tdir_shlelf)"
eshpe.c: $(srcdir)/emulparams/shpe.sh \
  $(srcdir)/emultempl/pe.em $(srcdir)/scripttempl/pe.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shpe "$(tdir_shl)"
esparcaout.c: $(srcdir)/emulparams/sparcaout.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} sparcaout "$(tdir_sparcaout)"
esparclinux.c: $(srcdir)/emulparams/sparclinux.sh \
  $(srcdir)/emultempl/linux.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} sparclinux "$(tdir_sparclinux)"
esparcnbsd.c:	$(srcdir)/emulparams/sparcnbsd.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} sparcnbsd "$(tdir_sparcnbsd)"
est2000.c: $(srcdir)/emulparams/st2000.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/st2000.sc ${GEN_DEPENDS}
	${GENSCRIPTS} st2000 "$(tdir_st2000)"
esun3.c: $(srcdir)/emulparams/sun3.sh \
  $(srcdir)/emultempl/sunos.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} sun3 "$(tdir_sun3)"
esun4.c: $(srcdir)/emulparams/sun4.sh \
  $(srcdir)/emultempl/sunos.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} sun4 "$(tdir_sun4)"
etic30aout.c: $(srcdir)/emulparams/tic30aout.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/tic30aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} tic30aout "$(tdir_tic30aout)"
etic30coff.c: $(srcdir)/emulparams/tic30coff.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/tic30coff.sc ${GEN_DEPENDS}
	${GENSCRIPTS} tic30coff "$(tdir_tic30coff)"
etic3xcoff.c: $(srcdir)/emulparams/tic3xcoff.sh \
  $(srcdir)/emultempl/ticoff.em $(srcdir)/scripttempl/tic4xcoff.sc ${GEN_DEPENDS}
	${GENSCRIPTS} tic3xcoff "$(tdir_tic4xcoff)"
etic3xcoff_onchip.c: $(srcdir)/emulparams/tic3xcoff_onchip.sh \
  $(srcdir)/emultempl/ticoff.em $(srcdir)/scripttempl/tic4xcoff.sc ${GEN_DEPENDS}
	${GENSCRIPTS} tic3xcoff_onchip "$(tdir_tic4xcoff)"
etic4xcoff.c: $(srcdir)/emulparams/tic4xcoff.sh \
  $(srcdir)/emultempl/ticoff.em $(srcdir)/scripttempl/tic4xcoff.sc ${GEN_DEPENDS}
	${GENSCRIPTS} tic4xcoff "$(tdir_tic4xcoff)"
etic54xcoff.c: $(srcdir)/emulparams/tic54xcoff.sh \
  $(srcdir)/emultempl/ticoff.em $(srcdir)/scripttempl/tic54xcoff.sc ${GEN_DEPENDS}
	${GENSCRIPTS} tic54xcoff "$(tdir_tic54xcoff)"
etic80coff.c: $(srcdir)/emulparams/tic80coff.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/tic80coff.sc ${GEN_DEPENDS}
	${GENSCRIPTS} tic80coff "$(tdir_tic80coff)"
ev850.c: $(srcdir)/emulparams/v850.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/v850.sc ${GEN_DEPENDS}
	${GENSCRIPTS} v850 "$(tdir_v850)"
ev850_rh850.c: $(srcdir)/emulparams/v850_rh850.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/v850_rh850.sc ${GEN_DEPENDS}
	${GENSCRIPTS} v850_rh850 "$(tdir_v850_rh850)"
evanilla.c: $(srcdir)/emulparams/vanilla.sh \
  $(srcdir)/emultempl/vanilla.em $(srcdir)/scripttempl/vanilla.sc ${GEN_DEPENDS}
	${GENSCRIPTS} vanilla "$(tdir_vanilla)"
evax.c: $(srcdir)/emulparams/vax.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} vax "$(tdir_vax)"
evaxnbsd.c: $(srcdir)/emulparams/vaxnbsd.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} vaxnbsd "$(tdir_vaxnbsd)"
evsta.c: $(srcdir)/emulparams/vsta.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} vsta "$(tdir_vsta)"
ew65.c: $(srcdir)/emulparams/w65.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/w65.sc ${GEN_DEPENDS}
	${GENSCRIPTS} w65 "$(tdir_w65)"
exgateelf.c: $(srcdir)/emulparams/xgateelf.sh \
  $(srcdir)/emultempl/generic.em $(ELF_DEPS) \
  $(srcdir)/scripttempl/elfxgate.sc ${GEN_DEPENDS}
	${GENSCRIPTS} xgateelf "$(tdir_xgate)"
ez80.c: $(srcdir)/emulparams/z80.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/z80.em \
  $(srcdir)/scripttempl/z80.sc ${GEN_DEPENDS}
	${GENSCRIPTS} z80 "$(tdir_z80)"
ez8001.c: $(srcdir)/emulparams/z8001.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/z8000.sc ${GEN_DEPENDS}
	${GENSCRIPTS} z8001 "$(tdir_z8001)"
ez8002.c: $(srcdir)/emulparams/z8002.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/z8000.sc ${GEN_DEPENDS}
	${GENSCRIPTS} z8002 "$(tdir_z8002)"

eelf32_x86_64.c: $(srcdir)/emulparams/elf32_x86_64.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_x86_64 "$(tdir_elf32_x86_64)"
eelf32_x86_64_nacl.c: $(srcdir)/emulparams/elf32_x86_64_nacl.sh \
  $(srcdir)/emulparams/elf32_x86_64.sh \
  $(srcdir)/emulparams/elf_nacl.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_x86_64_nacl "$(tdir_elf32_x86_64_nacl)"
eelf64_aix.c: $(srcdir)/emulparams/elf64_aix.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_aix "$(tdir_elf64_aix)"
eelf64_ia64.c: $(srcdir)/emulparams/elf64_ia64.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/ia64elf.em \
  $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_ia64 "$(tdir_elf64_ia64)"
eelf64_ia64_fbsd.c: $(srcdir)/emulparams/elf64_ia64_fbsd.sh \
  $(srcdir)/emulparams/elf64_ia64.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/ia64elf.em \
  $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_ia64_fbsd "$(tdir_elf64_ia64_fbsd)"
eelf64_ia64_vms.c: $(srcdir)/emulparams/elf64_ia64_vms.sh \
  $(srcdir)/emultempl/vms.em $(srcdir)/emultempl/elf-generic.em \
  $(srcdir)/scripttempl/ia64vms.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_ia64_vms "$(tdir_elf64_ia64_vms)"
eelf64_s390.c: $(srcdir)/emulparams/elf64_s390.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_s390 "$(tdir_elf64_s390)"
eelf64_sparc.c: $(srcdir)/emulparams/elf64_sparc.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_sparc "$(tdir_elf64_sparc)"
eelf64_sparc_fbsd.c: $(srcdir)/emulparams/elf64_sparc_fbsd.sh \
  $(srcdir)/emulparams/elf64_sparc.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_sparc_fbsd "$(tdir_elf64_sparc_fbsd)"
eelf64_sparc_sol2.c: $(srcdir)/emulparams/elf64_sparc_sol2.sh \
  $(srcdir)/emulparams/elf64_sparc.sh \
  $(srcdir)/emulparams/solaris2.sh \
  $(srcdir)/emultempl/solaris2.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_sparc_sol2 "$(tdir_elf64_sparc_sol2)"
eelf64alpha.c: $(srcdir)/emulparams/elf64alpha.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/alphaelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64alpha "$(tdir_elf64alpha)"
eelf64alpha_fbsd.c: $(srcdir)/emulparams/elf64alpha_fbsd.sh \
  $(srcdir)/emulparams/elf64alpha.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/alphaelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64alpha_fbsd "$(tdir_elf64alpha_fbsd)"
eelf64alpha_nbsd.c: $(srcdir)/emulparams/elf64alpha_nbsd.sh \
  $(srcdir)/emulparams/elf64alpha.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/alphaelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64alpha_nbsd "$(tdir_elf64alpha_nbsd)"
eelf64bmip.c: $(srcdir)/emulparams/elf64bmip.sh \
  $(srcdir)/emulparams/elf64bmip-defs.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/irix.em $(srcdir)/emultempl/mipself.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64bmip "$(tdir_elf64bmip)"
eelf64btsmip.c: $(srcdir)/emulparams/elf64btsmip.sh \
  $(srcdir)/emulparams/elf64bmip-defs.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64btsmip "$(tdir_elf64btsmip)"
eelf64btsmip_fbsd.c: $(srcdir)/emulparams/elf64btsmip_fbsd.sh \
  $(srcdir)/emulparams/elf64bmip-defs.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64btsmip_fbsd "$(tdir_elf64btsmip_fbsd)"
eelf64hppa.c: $(srcdir)/emulparams/elf64hppa.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf64hppa.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64hppa "$(tdir_elf64hppa)"
eelf64lppc.c: $(srcdir)/emulparams/elf64lppc.sh \
  $(srcdir)/emulparams/elf64ppc.sh $(srcdir)/emultempl/ppc64elf.em \
  ldemul-list.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64lppc "$(tdir_elf64lppc)"
eelf64ltsmip.c: $(srcdir)/emulparams/elf64ltsmip.sh \
  $(srcdir)/emulparams/elf64btsmip.sh $(srcdir)/emulparams/elf64bmip-defs.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64ltsmip "$(tdir_elf64ltsmip)"
eelf64ltsmip_fbsd.c: $(srcdir)/emulparams/elf64ltsmip_fbsd.sh \
  $(srcdir)/emulparams/elf64btsmip_fbsd.sh $(srcdir)/emulparams/elf64bmip-defs.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64ltsmip_fbsd "$(tdir_elf64ltsmip_fbsd)"
eelf64mmix.c: $(srcdir)/emulparams/elf64mmix.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/mmix-elfnmmo.em \
  $(srcdir)/emultempl/mmixelf.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64mmix "$(tdir_elf64mmix)"
eelf64ppc.c: $(srcdir)/emulparams/elf64ppc.sh $(srcdir)/emultempl/ppc64elf.em \
  ldemul-list.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64ppc "$(tdir_elf64ppc)"
eelf64ppc_fbsd.c: $(srcdir)/emulparams/elf64ppc_fbsd.sh \
  $(srcdir)/emultempl/ppc64elf.em ldemul-list.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64ppc_fbsd "$(tdir_elf64ppc_fbsd)"
eelf64rdos.c: $(srcdir)/emulparams/elf64rdos.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64rdos "$(tdir_elf64rdos)"
eelf64tilegx.c: $(srcdir)/emulparams/elf64tilegx.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64tilegx "$(tdir_tilegx)"
eelf64tilegx_be.c: $(srcdir)/emulparams/elf64tilegx_be.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64tilegx_be "$(tdir_tilegx_be)"
eelf_l1om.c: $(srcdir)/emulparams/elf_l1om.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_l1om "$(tdir_elf_l1om)"
eelf_l1om_fbsd.c: $(srcdir)/emulparams/elf_l1om_fbsd.sh \
  $(srcdir)/emulparams/elf_l1om.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_l1om_fbsd "$(tdir_elf_l1om_fbsd)"
eelf_k1om.c: $(srcdir)/emulparams/elf_k1om.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_k1om "$(tdir_elf_k1om)"
eelf_k1om_fbsd.c: $(srcdir)/emulparams/elf_k1om_fbsd.sh \
  $(srcdir)/emulparams/elf_k1om.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_k1om_fbsd "$(tdir_elf_k1om_fbsd)"
eelf_x86_64.c: $(srcdir)/emulparams/elf_x86_64.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_x86_64 "$(tdir_elf_x86_64)"
eelf_x86_64_fbsd.c: $(srcdir)/emulparams/elf_x86_64_fbsd.sh \
  $(srcdir)/emulparams/elf_x86_64.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_x86_64_fbsd "$(tdir_elf_x86_64_fbsd)"
eelf_x86_64_nacl.c: $(srcdir)/emulparams/elf_x86_64_nacl.sh \
  $(srcdir)/emulparams/elf_x86_64.sh \
  $(srcdir)/emulparams/elf_nacl.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_x86_64_nacl "$(tdir_elf_x86_64_nacl)"
eelf_x86_64_sol2.c: $(srcdir)/emulparams/elf_x86_64_sol2.sh \
  $(srcdir)/emulparams/elf_x86_64.sh \
  $(srcdir)/emulparams/solaris2.sh \
  $(srcdir)/emultempl/solaris2.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_x86_64_sol2 "$(tdir_elf_x86_64_sol2)"
ehppa64linux.c: $(srcdir)/emulparams/hppa64linux.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} hppa64linux "$(tdir_hppa64linux)"
emmo.c: $(srcdir)/emulparams/mmo.sh $(srcdir)/emultempl/mmix-elfnmmo.em \
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/elf-generic.em \
  $(srcdir)/emultempl/mmo.em $(srcdir)/scripttempl/DWARF.sc \
  $(srcdir)/scripttempl/mmo.sc ${GEN_DEPENDS}
	${GENSCRIPTS} mmo "$(tdir_mmo)"
eshelf64.c: $(srcdir)/emulparams/shelf64.sh $(srcdir)/emulparams/shelf32.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shelf64 "$(tdir_shelf64)"
eshelf64_nbsd.c: $(srcdir)/emulparams/shelf64_nbsd.sh \
  $(srcdir)/emulparams/shelf32_nbsd.sh $(srcdir)/emulparams/shelf32.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shelf64_nbsd "$(tdir_shelf64_nbsd)"
eshlelf64.c: $(srcdir)/emulparams/shlelf64.sh \
  $(srcdir)/emulparams/shelf64.sh $(srcdir)/emulparams/shelf32.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf64 "$(tdir_shlelf64)"
eshlelf64_nbsd.c: $(srcdir)/emulparams/shlelf64_nbsd.sh \
  $(srcdir)/emulparams/shelf64_nbsd.sh \
  $(srcdir)/emulparams/shelf32_nbsd.sh $(srcdir)/emulparams/shelf32.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf64_nbsd "$(tdir_shlelf64_nbsd)"

# We need this for automake to use YLWRAP.
EXTRA_ld_new_SOURCES = deffilep.y ldlex.l
# Allow dependency tracking to work for these files, too.
EXTRA_ld_new_SOURCES += pep-dll.c pe-dll.c

ld_new_SOURCES = ldgram.y ldlex-wrapper.c lexsup.c ldlang.c mri.c ldctor.c ldmain.c \
	ldwrite.c ldexp.c ldemul.c ldver.c ldmisc.c ldfile.c ldcref.c $(PLUGIN_C)
ld_new_DEPENDENCIES = $(EMULATION_OFILES) $(EMUL_EXTRA_OFILES) $(BFDLIB) $(LIBIBERTY) $(LIBINTL_DEP)
ld_new_LDADD = $(EMULATION_OFILES) $(EMUL_EXTRA_OFILES) $(BFDLIB) $(LIBIBERTY) $(LIBINTL)

# Dependency tracking for the generated emulation files.
EXTRA_ld_new_SOURCES += $(ALL_EMULATION_SOURCES) $(ALL_64_EMULATION_SOURCES)

# This is the real libbfd.a created by libtool.
TESTBFDLIB = @@TESTBFDLIB@@

check-DEJAGNU: site.exp
	srcroot=`cd $(srcdir) && pwd`; export srcroot; \
	r=`pwd`; export r; \
	LC_ALL=C; export LC_ALL; \
	EXPECT=$(EXPECT); export EXPECT; \
	runtest=$(RUNTEST); \
	if $(SHELL) -c "$$runtest --version" > /dev/null 2>&1; then \
	  $$runtest --tool $(DEJATOOL) --srcdir $${srcroot}/testsuite \
		CC="$(CC_FOR_TARGET)" CFLAGS="$(CFLAGS)" \
		CXX="$(CXX_FOR_TARGET)" CXXFLAGS="$(CXXFLAGS)" \
		CC_FOR_HOST="$(CC)" CFLAGS_FOR_HOST="$(CFLAGS)" \
		OFILES="$(OFILES)" BFDLIB="$(TESTBFDLIB)" \
		LIBIBERTY="$(LIBIBERTY) $(LIBINTL)" LIBS="$(LIBS)" \
		DO_COMPARE="`echo '$(do_compare)' | sed -e 's,\\$$,,g'`" \
		$(RUNTESTFLAGS); \
	else echo "WARNING: could not find \`runtest'" 1>&2; :;\
	fi

# Rules for testing by relinking ld itself.
# A similar test is in the testsuite.  This target is for ease of use
# when porting ld.

ld-partial.@@OBJEXT@@: ld-new$(EXEEXT)
	./ld-new$(EXEEXT) $(HOSTING_EMU) -o ld-partial.@@OBJEXT@@ -r $(OFILES)
ld1$(EXEEXT): ld-partial.@@OBJEXT@@
	./ld-new$(EXEEXT) $(HOSTING_EMU) -o ld1$(EXEEXT) $(HOSTING_CRT0) ld-partial.@@OBJEXT@@ $(TESTBFDLIB) $(LIBIBERTY) $(HOSTING_LIBS) $(LIBS)

ld1-full$(EXEEXT): ld-new
	./ld-new$(EXEEXT) $(HOSTING_EMU) -o ld1-full$(EXEEXT) $(HOSTING_CRT0) $(OFILES) $(TESTBFDLIB) $(LIBIBERTY) $(HOSTING_LIBS) $(LIBS)

ld2$(EXEEXT): ld1$(EXEEXT)
	./ld1$(EXEEXT) $(HOSTING_EMU) -o ld2$(EXEEXT) $(HOSTING_CRT0) $(OFILES) $(TESTBFDLIB) $(LIBIBERTY) $(HOSTING_LIBS) $(LIBS)

ld3$(EXEEXT): ld2$(EXEEXT)
	./ld2$(EXEEXT) $(HOSTING_EMU) -o ld3$(EXEEXT) $(HOSTING_CRT0) $(OFILES) $(TESTBFDLIB) $(LIBIBERTY) $(HOSTING_LIBS) $(LIBS)

bootstrap: ld3$(EXEEXT)
	cmp ld2$(EXEEXT) ld3$(EXEEXT)

.PHONY: bootstrap

# A test program for C++ constructors and destructors.
# This test is now in the testsuite.
#
#cdtest: cdtest-main.@@OBJEXT@@ cdtest-bar.@@OBJEXT@@ cdtest-foo.@@OBJEXT@@ ld.new
#	./ld.new $(HOSTING_EMU) -o cdtest $(HOSTING_CRT0) \
#	  cdtest-main.@@OBJEXT@@ cdtest-bar.@@OBJEXT@@ cdtest-foo.@@OBJEXT@@ $(HOSTING_LIBS)
#
#cdtest.out: cdtest
#	./cdtest > cdtest.tmp
#	mv cdtest.tmp cdtest.out
#
#cdtest-ur.@@OBJEXT@@: cdtest-main.@@OBJEXT@@ cdtest-bar.@@OBJEXT@@ cdtest-foo.@@OBJEXT@@ ld.new
#	./ld.new $(HOSTING_EMU) -o cdtest-ur.@@OBJEXT@@ -Ur cdtest-main.@@OBJEXT@@ \
#	  cdtest-bar.@@OBJEXT@@ cdtest-foo.@@OBJEXT@@
#
#cdtest-ur: cdtest-ur.@@OBJEXT@@
#	./ld.new $(HOSTING_EMU) -o cdtest-ur $(HOSTING_CRT0) cdtest-ur.@@OBJEXT@@ \
#	  $(HOSTING_LIBS)
#
#cdtest-ur.out: cdtest-ur
#	./cdtest-ur > cdtest-ur.tmp
#	mv cdtest-ur.tmp cdtest-ur.out
#
#check-cdtest: cdtest.out cdtest-ur.out $(srcdir)/cdtest.exp
#	diff $(srcdir)/cdtest.exp cdtest.out
#	diff $(srcdir)/cdtest.exp cdtest-ur.out
#
#.PHONY: check-cdtest

# END OF CHECK TARGETS

#
# Build a dummy plugin using libtool.
#
if ENABLE_PLUGINS
noinst_LTLIBRARIES = libldtestplug.la
libldtestplug_la_SOURCES = testplug.c
libldtestplug_la_CFLAGS= -g -O2
libldtestplug_la_LDFLAGS = -no-undefined -rpath /nowhere
endif

# DOCUMENTATION TARGETS
# Manual configuration file; not usually attached to normal configuration,
# because almost all configs use "gen" version of manual.
#  Set DOCVER above to change.
configdoc.texi:	${DOCVER}-doc.texi
	cp ${srcdir}/${DOCVER}-doc.texi ./configdoc.texi
	chmod u+w ./configdoc.texi

# Build the man page from the texinfo file
# The sed command removes the no-adjust Nroff command so that
# the man output looks standard.
ld.1: $(srcdir)/ld.texinfo configdoc.texi
	touch $@@
	-$(TEXI2POD) $(MANCONF) < $(srcdir)/ld.texinfo > ld.pod
	-($(POD2MAN) ld.pod | \
		sed -e '/^.if n .na/d' > $@@.T$$$$ && \
		mv -f $@@.T$$$$ $@@) || \
		(rm -f $@@.T$$$$ && exit 1)
	rm -f ld.pod

MAINTAINERCLEANFILES = configdoc.texi ld.1

# We want to reconfigure if configure.host or configure.tgt changes.  We
# extract version from bfd/configure.in, so we must depend on that also.
CONFIG_STATUS_DEPENDENCIES = $(srcdir)/configure.host $(srcdir)/configure.tgt \
	$(srcdir)/../bfd/configure.in

MOSTLYCLEANFILES = $(STAGESTUFF) ld1$(EXEEXT) ld2$(EXEEXT) ld3$(EXEEXT) \
	ldemul-list.h crtbegin.@@OBJEXT@@ crtend.@@OBJEXT@@ ld.log ld.sum
mostlyclean-local:
	-rm -rf tmpdir
CLEANFILES = dep.sed DEP DEPA DEP1 DEP2 spu_ovl.s spu_ovl.@@OBJEXT@@ spu_icache.s spu_icache.@@OBJEXT@@

.PHONY: install-exec-local install-data-local

install-exec-local: ld-new$(EXEEXT) install-binPROGRAMS
	$(mkinstalldirs) $(DESTDIR)$(tooldir)/bin
	n=`echo $(installed_linker) | sed '$(transform)'`; \
	if test "$(bindir)" != "$(tooldir)/bin"; then \
	  rm -f $(DESTDIR)$(tooldir)/bin/$(installed_linker)$(EXEEXT); \
	  ln $(DESTDIR)$(bindir)/$$n$(EXEEXT) $(DESTDIR)$(tooldir)/bin/$(installed_linker)$(EXEEXT) >/dev/null 2>/dev/null \
	  || $(LIBTOOL) --mode=install $(INSTALL_PROGRAM) ld-new$(EXEEXT) $(DESTDIR)$(tooldir)/bin/$(installed_linker)$(EXEEXT); \
	fi; \
	if test "x$(install_as_default)" = "xyes"; then \
	  ld=`echo ld | sed '$(transform)'`; \
	  rm -f $(DESTDIR)$(bindir)/$$ld$(EXEEXT); \
	  ln $(DESTDIR)$(bindir)/$$n$(EXEEXT) $(DESTDIR)$(bindir)/$$ld$(EXEEXT) >/dev/null 2>/dev/null \
	  || $(LIBTOOL) --mode=install $(INSTALL_PROGRAM) ld-new$(EXEEXT) $(DESTDIR)$(bindir)/$$ld$(EXEEXT); \
	  if test "$(bindir)" != "$(tooldir)/bin"; then \
	    rm -f $(DESTDIR)$(tooldir)/bin/ld$(EXEEXT); \
	    ln $(DESTDIR)$(bindir)/$$n$(EXEEXT) $(DESTDIR)$(tooldir)/bin/ld$(EXEEXT) >/dev/null 2>/dev/null \
	    || $(LIBTOOL) --mode=install $(INSTALL_PROGRAM) ld-new$(EXEEXT) $(DESTDIR)$(tooldir)/bin/ld$(EXEEXT); \
	  fi; \
	fi

install-data-local:
	$(mkinstalldirs) $(DESTDIR)$(scriptdir)/ldscripts
	for f in ldscripts/*; do \
	  $(INSTALL_DATA) $$f $(DESTDIR)$(scriptdir)/$$f ; \
	done

# Stuff that should be included in a distribution.  The diststuff
# target is run by the taz target in ../Makefile.in.
EXTRA_DIST = ldgram.c ldgram.h ldlex.c emultempl/spu_ovl.@@OBJEXT@@_c \
	     emultempl/spu_icache.@@OBJEXT@@_c deffilep.c deffilep.h $(man_MANS)
diststuff: info $(EXTRA_DIST)

# Both info (ld.info) and ld.1 depend on configdoc.texi.
# But info isn't a direct target. Make info-recursive to depend on
# ld.1 to support parallel build.
info-recursive: ld.1

DISTCLEANFILES = tdirs site.exp site.bak stringify.sed
distclean-local:
	rm -rf ldscripts

MAINTAINERCLEANFILES += ld.info

# Automake 1.9 will only build info files in the objdir if they are
# mentioned in DISTCLEANFILES.  It doesn't have to be unconditional,
# though, so we use a bogus condition.
if GENINSRC_NEVER
DISTCLEANFILES += ld.info
endif
@


1.336
log
@[AArch64, ILP32] 6/6 Add big-endian targets

ld/

	* Makefile.am (ALL_64_EMULATION_SOURCES): Add eaarch64elf32b.c.
	(eaarch64elf32b.c): New dependency and rule.
	* Makefile.in: Re-generated.
	* configure.tgt (aarch64-*-elf): Add aarch64elf32b.
	(aarch64_be-*-elf, aarch64_be-*-linux*, aarch64-*-linux*): Likewise.
	* emulparams/aarch64elf32b.sh: New file.
@
text
@d1758 1
a1758 1
	${GENSCRIPTS} nios2elf "$(tdir_nios2)"
@


1.335
log
@[AArch64, ILP32] 2/6 Parametrize elfnn-aarch64.c and add basic support in ld
and gas.

bfd/

	* Makefile.am (BFD64_BACKENDS): Add elf32-aarch64.lo.
	(BUILD_CFILES): Add elf32-aarch64.c.
	(elf32-aarch64.c): New rule for generating from elfnn-aarch64.c.
	* Makefile.in: Re-generated.
	* archures.c (bfd_mach_aarch64_ilp32): New define.
	* bfd-in.h (bfd_elf32_aarch64_init_maps): New declaration.
	(bfd_elf32_aarch64_set_options): Ditto.
	(elf32_aarch64_setup_section_lists): Ditto.
	(elf32_aarch64_next_input_section): Ditto.
	(elf32_aarch64_size_stubs): Ditto.
	(elf32_aarch64_build_stubs): Ditto.
	* bfd-in2.h: Re-generated.
	* config.bfd (aarch64-*-elf): Add bfd_elf32_littleaarch64_vec
	and bfd_elf32_bigaarch64_vec.
	(aarch64-*-linux*): Likewise.
	(aarch64_be-*-elf): Likewise.
	(aarch64_be-*-linux*): Likewise.
	* configure.in (bfd_elf32_bigaarch64_vec)
	(bfd_elf32_littleaarch64_vec): New.
	* configure: Re-generated.
	* cpu-aarch64.c (compatible): Don't allow mixing ilp32 objects with
	lp64 ones.
	(bfd_aarch64_arch_ilp32): New.
	(bfd_aarch64_arch): Link to bfd_aarch64_arch_ilp32.
	* elfnn-aarch64.c (ARCH_SIZE): New define.
	(AARCH64_R, AARCH64_R_STR, LOG_FILE_ALIGN): New defines.
	(GOT_ENTRY_SIZE): Re-define as (ARCH_SIZE / 8).
	(elf64_aarch64_*): Rename to elfNN_aarch64_*.
	(ELF64_R_*): Rename to ELFNN_R_*.
	Plus other paramaterization.
	* targets.c (bfd_elf32_bigaarch64_vec, bfd_elf32_littleaarch64_vec):
	New declarations.
	(_bfd_target_vector): Add bfd_elf32_bigaarch64_vec and
	bfd_elf32_littleaarch64_vec.

gas/

	* config/tc-aarch64.c (ilp32_p): New static variable.
	(elf64_aarch64_target_format): Return the target according to the
	value of 'ilp32_p'.
	(md_begin): Determine 'mach' according to the value of 'ilp32_p'.
	(aarch64_opts): Add support for options '-milp32' and '-mlp64'.
	(aarch64_dwarf2_addr_size): New function.
	* config/tc-aarch64.h (aarch64_dwarf2_addr_size): New declaration.
	(DWARF2_ADDR_SIZE): New define.

ld/

	* Makefile.am (ALL_64_EMULATION_SOURCES): Add eaarch64elf32.c.
	(eaarch64elf32.c): New dependency and rule.
	* Makefile.in: Re-generated.
	* configure.tgt (aarch64-*-elf): Add aarch64elf32.
	(aarch64_be-*-elf, aarch64_be-*-linux*, aarch64-*-linux*): Likewise.
	* emulparams/aarch64elf32.sh: New file.
@
text
@d468 1
d1775 4
@


1.334
log
@bfd/
	* Makefile.am (BFD32_BACKENDS, BFD32_BACKENDS_CFILES): Move MIPS ELF
	files to...
	(BFD64_BACKENDS, BFD64_BACKENDS_CFILES): ...here.
	* Makefile.in: Regenerate.
	* config.bfd: Enclose all MIPS ELF targets in #ifdef BFD64.
	Set want64 to true for them at the end.
	* targets.c (_bfd_target_vector): Protect MIPS ELF targets with
	#ifdef BFD64.

gas/
	* config/tc-mips.c: Assert that offsetT and valueT are at least
	8 bytes in size.
	(GPR_SMIN, GPR_SMAX): New macros.
	(macro, mips_ip): Remove code for 4-byte valueT and offsetT.

ld/
	* Makefile.am (ALL_EMULATION_SOURCES): Move MIPS ELF emulations to...
	(ALL_64_EMULATION_SOURCES): ...here.
	* Makefile.in: Regenerate.
@
text
@d466 1
d1766 4
@


1.333
log
@	* configure.ac (mips*-*-bsd*, mips*-*-ultrix*, mips*-*-osf*)
	(mips*-*-ecoff*, mips*-*-pe*, mips*-*-irix* [v4 and earlier])
	(mips*-*-lnews*, mips*-*-riscos*): Add gas and ld to noconfigdirs.
	* configure: Regenerate.

gas/
	* NEWS: Note removal of ECOFF support.
	* doc/as.texinfo (--emulation): Update for the removal of MIPS ECOFF.
	* Makefile.am (TARG_ENV_HFILES): Remove config/te-lnews.h.
	(MULTI_CFILES): Remove config/e-mipsecoff.c.
	* Makefile.in: Regenerate.
	* configure.in: Remove MIPS ECOFF references.
	(mips-sony-bsd*, mips-*-bsd*, mips-*-lnews*-ecoff, mips-*-*-ecoff):
	Delete cases.
	(mips-*-irix5*-*, mips*-*-linux*-*, mips*-*-freebsd*)
	(mips*-*-kfreebsd*-gnu, mips-*-*-elf): Fold into...
	(mips-*-*): ...this single case.
	(mipsbecoff, mipslecoff, mipsecoff): Remove emulations.  Expect
	MIPS emulations to be e-mipself*.
	* configure: Regenerate.
	* configure.tgt (mips-sony-bsd*, mips-*-ultrix*, mips-*-osf*)
	(mips-*-ecoff*, mips-*-pe*, mips-*-irix*, ips-*-lnews*, mips-*-riscos*)
	(mips-*-sysv*): Remove coff and ecoff cases.
	* as.c (mipsbecoff, mipslecoff, mipsecoff): Remove.
	* ecoff.c: Remove reference to MIPS ECOFF.
	* config/e-mipsecoff.c, config/te-lnews.h: Delete files.
	* config/tc-mips.c (ECOFF_LITTLE_FORMAT): Delete.
	(RDATA_SECTION_NAME, mips_target_form): Remove COFF and ECOFF cases.
	(mips_hi_fixup): Tweak comment.
	(append_insn): Require a howto.
	(mips_after_parse_args): Remove OBJ_MAYBE_ECOFF code.

gas/testsuite/
	* gas/all/gas.exp: Remove reference to mips-ecoff.
	* gas/mips/branch-misc-1.d, gas/mips/branch-misc-2.d,
	gas/mips/branch-misc-2-64.d, gas/mips/branch-misc-2pic.d,
	gas/mips/branch-misc-2pic-64.d, gas/mips/branch-swap.d: Remove
	skips for mips-*-ecoff.

ld/
	* NEWS: Document the removal of MIPS ECOFF targets.
	* ld.texinfo (--gpsize=@@var{value}): Use MIPS ELF rather than
	MIPS ECOFF as an example of a target that supports small data.
	* ldmain.c (g_switch_value): Likewise.
	* configure.tgt (mips*-*-pe, mips*-dec-ultrix*, mips*-dec-osf*)
	(mips*-sgi-irix* [v4 and earlier], mips*el-*-ecoff*, mips*-*-ecoff*)
	(mips*-*-bsd*, mips*-*-lnews*): Remove cases.
	* Makefile.am (ALL_EMULATION_SOURCES): Remove emipsbig.c, emipsbsd.c,
	emipsidt.c, emipsidtl.c, emipslit.c, emipslnews.c and emipspe.c.
	(emipsbig.c, emipsbsd.c, emipsidt.c, emipsidtl.c, emipslit.c)
	(emipslnews.c, emipspe.c): Delete rules.
	* Makefile.in: Regenerate.
	* emulparams/mipsbig.sh, emulparams/mipsbsd.sh, emulparams/mipsidt.sh,
	emulparams/mipsidtl.sh, emulparams/mipslit.sh, emulparams/mipslnews.sh,
	emulparams/mipspe.sh, emultempl/mipsecoff.em: Delete.
	* emultempl/m68kcoff.em: Update comment to say that MIPS ECOFF support
	has now been removed.
	* emultempl/pe.em: Remove TARGET_IS_mipspe checks.
@
text
@a216 1
	eelf32b4300.c \
a218 7
	eelf32bmip.c \
	eelf32bmipn32.c \
	eelf32bsmip.c \
	eelf32btsmip.c \
	eelf32btsmip_fbsd.c \
	eelf32btsmipn32.c \
	eelf32btsmipn32_fbsd.c \
a221 6
	eelf32ebmip.c \
	eelf32ebmipvxworks.c \
	eelf32elmip.c \
	eelf32elmipvxworks.c \
	eelf32lr5900.c \
	eelf32lr5900n32.c \
a230 1
	eelf32l4300.c \
a232 1
	eelf32lmip.c \
a236 5
	eelf32lsmip.c \
	eelf32ltsmip.c \
	eelf32ltsmip_fbsd.c \
	eelf32ltsmipn32.c \
	eelf32ltsmipn32_fbsd.c \
a243 1
	eelf32mipswindiss.c \
d471 22
@


1.332
log
@	* archures.c: Add some more MSP430 machine numbers.
	* config.bfd (msp430): Define targ_selvecs.
	* configure.in: Add bfd_elf32_msp430_ti_vec.
	* cpu-msp430.c: Add some more MSP430 machine numbers.
	* elf32-msp430.c Add support for MSP430X relocations.
	Add support for TI compiler generated relocations.
	Add support for sym_diff relocations.
	Add support for relaxing out of range short branches into long
	branches.
	Add support for MSP430 attribute section.
	* reloc.c: Add MSP430X relocations.
	* targets.c: Add bfd_elf32_msp430_ti_vec.
	* bfd-in2.h: Regenerate.
	* configure: Regenerate.
	* libbfd.h: Regenerate.

	* readelf.c: Add support for MSP430X architecture.

	* readelf.exp: Expect -wi test to fail for the MSP430.

	* config/tc-msp430.c: Add support for the MSP430X architecture.
	Add code to insert a NOP instruction after any instruction that
	might change the interrupt state.
	Add support for the LARGE memory model.
	Add code to initialise the .MSP430.attributes section.
	* config/tc-msp430.h: Add support for the MSP430X architecture.
	* doc/c-msp430.texi: Document the new -mL and -mN command line
	options.
	* NEWS: Mention support for the MSP430X architecture.

	* gas/all/gas.exp: Skip the DIFF1 test for the MSP430.
	Expect the FORWARD test to pass for the MSP430.
	Skip the REDEF tests for the MSP430.
	Expect the 930509A test to fail for the MSP430.
	* gas/all/sleb128-4.d: Skip for the MSP430.
	* gas/elf/elf.exp: Set target_machine to msp430 for the MSP430.
	Skip the EHOPT0 test for the MSP430.
	Skip the REDEF and EQU-RELOC tests for the MSP430.
	* gas/elf/section2.e-msp430: New file.
	* gas/lns/lns-big-delta.d: Remove expectation of 20-bit
	addresses.
	* gas/lns/lns.exp: Use alternate LNS COMMON test for the MSP430.
	* gas/msp430/msp430x.s: New test.
	* gas/msp430/msp430x.d: Expected disassembly.
	* gas/msp430/msp430.exp: Run new test.
	* gas/msp430/opcode.d: Update expected disassembly.

	* msp430.h: Add MSP430X relocs.
	Add some more MSP430 machine numbers.
	Add values used by .MSP430.attributes section.

	* msp430.h: Add patterns for MSP430X instructions.

	* Makefile.am: Add emsp430X.c
	* Makefine.in: Regenerate.
	* configure.tgt (msp430): Add msp430X emulation.
	* ldmain.c (multiple_definition): Only disable relaxation if it
	was enabled by the user.
	* ldmain.h (RELAXATION_ENABLED_BY_USER): New macro.
	* emulparams/msp430all.sh: Add support for MSP430X.
	* emultempl/generic.em: (before_parse): Enable relaxation for the
	MSP430.
	* scripttempl/msp430.sc: Reorganize sections.  Add .rodata
	section.
	* scripttempl/msp430_3.sc: Likewise.
	* NEWS: Mention support for MSP430X.

	* ld-elf/flags1.d: Expect this test to pass on the MSP430.
	* ld-elf/init-fini-arrays.d: Expect this test to fail on the
	MSP430.
	* ld-elf/merge.d: Expect this test to pass on the MSP430.
	* ld-elf/sec64k.exp: Skip these tests for the MSP430.
	* ld-gc/pr13683.d: Expect this test to fail on the MSP430.
	* ld-srec/srec.exp: Expect these tests to fail on the MSP430.
	* ld-undefined/undefined.exp: Expect the UNDEFINED LINE test to
	fail on the MSP430.

	* msp430-dis.c: Add support for MSP430X instructions.
@
text
@a358 7
	emipsbig.c \
	emipsbsd.c \
	emipsidt.c \
	emipsidtl.c \
	emipslit.c \
	emipslnews.c \
	emipspe.c \
a1503 23
emipsbig.c: $(srcdir)/emulparams/mipsbig.sh $(srcdir)/emultempl/generic.em \
  $(srcdir)/scripttempl/mips.sc ${GEN_DEPENDS}
	${GENSCRIPTS} mipsbig "$(tdir_mipsbig)"
emipsbsd.c: $(srcdir)/emulparams/mipsbsd.sh $(srcdir)/emultempl/generic.em \
  $(srcdir)/scripttempl/mipsbsd.sc ${GEN_DEPENDS}
	${GENSCRIPTS} mipsbsd "$(tdir_mipsbsd)"
emipsidt.c: $(srcdir)/emulparams/mipsidt.sh $(srcdir)/emultempl/generic.em \
  $(srcdir)/emultempl/mipsecoff.em $(srcdir)/scripttempl/mips.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} mipsidt "$(tdir_mipsidt)"
emipsidtl.c: $(srcdir)/emulparams/mipsidtl.sh $(srcdir)/emultempl/generic.em \
  $(srcdir)/emultempl/mipsecoff.em $(srcdir)/scripttempl/mips.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} mipsidtl "$(tdir_mipsidtl)"
emipslit.c: $(srcdir)/emulparams/mipslit.sh $(srcdir)/emultempl/generic.em \
  $(srcdir)/scripttempl/mips.sc ${GEN_DEPENDS}
	${GENSCRIPTS} mipslit "$(tdir_mipslit)"
emipslnews.c: $(srcdir)/emulparams/mipslnews.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/mips.sc ${GEN_DEPENDS}
	${GENSCRIPTS} mipslnews "$(tdir_mipslnews)"
emipspe.c: $(srcdir)/emulparams/mipspe.sh $(srcdir)/emultempl/pe.em \
  $(srcdir)/scripttempl/pe.sc ${GEN_DEPENDS}
	${GENSCRIPTS} mipspe "$(tdir_mipspe)"
@


1.331
log
@bfd/
	* config.bfd: Add powerpc64le-linux.
gas/
	* configure.in: Allow little-endian linux.
	* configure: Regenerate.
gold/
	* configure.tgt: Add powerpcle and powerpc64le.
ld/
	* Makefile.am (ALL_EMULATION_SOURCES): Add eelf32lppclinux.c.
	(eelf32lppclinux.c): New rule.
	* Makefile.in: Regenerate.
	* configure.tgt: Merge powerpc-linux and other powerpc-elf targets
	with corresponding little-endian targets.
	* emulparams/elf32lppc.sh: Update comment.
	* emulparams/elf32lppclinux.sh: New.
@
text
@d427 1
d1777 4
@


1.330
log
@	* Makefile.am (emmo.c): Add a dependency upon scripttempl/DWARF.sc.
@
text
@d250 1
d1110 6
@


1.329
log
@	* Makefile.am (ELF_DEPS): Add a dependency upon
	scripttempl/DWARF.sc.
	(ELF_GEN_DEPS): Likewise.
	* Makefile.in: Regenerate.
@
text
@d2156 1
a2156 1
  $(srcdir)/emultempl/mmo.em \
@


1.328
log
@	* Makefile.am: Use $(ELF_DEPS) on a number of eelf*.c rules.
	* Makefile.in: Regenerate.
@
text
@d687 2
a688 2
ELF_DEPS = $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/elf-generic.em
ELF_GEN_DEPS = $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/elf-generic.em $(srcdir)/emultempl/genelf.em
@


1.327
log
@2013-02-06  Sandra Loosemore  <sandra@@codesourcery.com>
            Andrew Jenner <andrew@@codesourcery.com>

	Based on patches from Altera Corporation.

	bfd/
	* Makefile.am (ALL_MACHINES): Add cpu-nios2.lo.
	(ALL_MACHINES_CFILES): Add cpu-nios2.c.
	(BFD_BACKENDS): Add elf32-nios2.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-nios2.c.
	* Makefile.in: Regenerated.
	* configure.in: Add entries for bfd_elf32_bignios2_vec and
	bfd_elf32_littlenios2_vec.
	* configure: Regenerated.
	* config.bfd: Add cases for nios2.
	* archures.c (enum bfd_architecture): Add bfd_arch_nios2.
	(bfd_mach_nios2): Define.
	(bfd_nios2_arch): Declare.
	(bfd_archures_list): Add bfd_nios2_arch.
	* targets.c (bfd_elf32_bignios2_vec): Declare.
	(bfd_elf32_littlenios2_vec): Declare.
	(_bfd_target_vector): Add entries for bfd_elf32_bignios2_vec and
	bfd_elf32_littlenios2_vec.
	* elf-bfd.h (enum elf_target_id): Add NIOS2_ELF_DATA.
	* reloc.c (enum bfd_reloc_code_real): Add Nios II relocations.
	* bfd-in2.h: Regenerated.
	* libbfd.h: Regenerated.
	* cpu-nios2.c: New file.
	* elf32-nios2.c: New file.

	opcodes/
	* Makefile.am (TARGET_LIBOPCODES_CFILES): Add nios2-dis.c and
	nios2-opc.c.
	* Makefile.in: Regenerated.
	* configure.in: Add case for bfd_nios2_arch.
	* configure: Regenerated.
	* disassemble.c (ARCH_nios2): Define.
	(disassembler): Add case for bfd_arch_nios2.
	* nios2-dis.c: New file.
	* nios2-opc.c: New file.

	include/
	* dis-asm.h (print_insn_big_nios2): Declare.
	(print_insn_little_nios2): Declare.

	include/elf
	* nios2.h: New file.

	include/opcode/
	* nios2.h: New file.

	gas/
	* Makefile.am (TARGET_CPU_CFILES): Add config/tc-nios2.c.
	(TARGET_CPU_HFILES): Add config/tc-nios2.h.
	* Makefile.in: Regenerated.
	* configure.tgt: Add case for nios2*-linux*.
	* config/obj-elf.c: Conditionally include elf/nios2.h.
	* config/tc-nios2.c: New file.
	* config/tc-nios2.h: New file.
	* doc/Makefile.am (CPU_DOCS): Add c-nios2.texi.
	* doc/Makefile.in: Regenerated.
	* doc/all.texi: Set NIOSII.
	* doc/as.texinfo (Overview): Add Nios II options.
	(Machine Dependencies): Include c-nios2.texi.
	* doc/c-nios2.texi: New file.
	* NEWS: Note Altera Nios II support.

	gas/testsuite/
	* gas/nios2/add.d: New.
	* gas/nios2/add.s: New.
	* gas/nios2/align_fill.d: New.
	* gas/nios2/align_fill.s: New.
	* gas/nios2/align_text.d: New.
	* gas/nios2/align_text.s: New.
	* gas/nios2/and.d: New.
	* gas/nios2/and.s: New.
	* gas/nios2/branch.d: New.
	* gas/nios2/branch.s: New.
	* gas/nios2/break.d: New.
	* gas/nios2/break.s: New.
	* gas/nios2/bret.d: New.
	* gas/nios2/bret.s: New.
	* gas/nios2/cache.d: New.
	* gas/nios2/cache.s: New.
	* gas/nios2/call26.d: New.
	* gas/nios2/call26.s: New.
	* gas/nios2/call.d: New.
	* gas/nios2/call.s: New.
	* gas/nios2/cmp.d: New.
	* gas/nios2/cmp.s: New.
	* gas/nios2/comments.d: New.
	* gas/nios2/comments.s: New.
	* gas/nios2/complex.d: New.
	* gas/nios2/complex.s: New.
	* gas/nios2/ctl.d: New.
	* gas/nios2/ctl.s: New.
	* gas/nios2/custom.d: New.
	* gas/nios2/custom.s: New.
	* gas/nios2/etbt.d: New.
	* gas/nios2/etbt.s: New.
	* gas/nios2/flushda.d: New.
	* gas/nios2/flushda.s: New.
	* gas/nios2/illegal.l: New.
	* gas/nios2/illegal.s: New.
	* gas/nios2/jmp.d: New.
	* gas/nios2/jmp.s: New.
	* gas/nios2/ldb.d: New.
	* gas/nios2/ldb.s: New.
	* gas/nios2/ldh.d: New.
	* gas/nios2/ldh.s: New.
	* gas/nios2/ldw.d: New.
	* gas/nios2/ldw.s: New.
	* gas/nios2/lineseparator.d: New.
	* gas/nios2/lineseparator.s: New.
	* gas/nios2/mov.d: New.
	* gas/nios2/movia.d: New.
	* gas/nios2/movia.s: New.
	* gas/nios2/movi.d: New.
	* gas/nios2/movi.s: New.
	* gas/nios2/mov.s: New.
	* gas/nios2/mul.d: New.
	* gas/nios2/mul.s: New.
	* gas/nios2/nios2.exp: New.
	* gas/nios2/nor.d: New.
	* gas/nios2/nor.s: New.
	* gas/nios2/or.d: New.
	* gas/nios2/or.s: New.
	* gas/nios2/ret.d: New.
	* gas/nios2/ret.s: New.
	* gas/nios2/rol.d: New.
	* gas/nios2/rol.s: New.
	* gas/nios2/rotate.d: New.
	* gas/nios2/rotate.s: New.
	* gas/nios2/stb.d: New.
	* gas/nios2/stb.s: New.
	* gas/nios2/sth.d: New.
	* gas/nios2/sth.s: New.
	* gas/nios2/stw.d: New.
	* gas/nios2/stw.s: New.
	* gas/nios2/sub.d: New.
	* gas/nios2/sub.s: New.
	* gas/nios2/sync.d: New.
	* gas/nios2/sync.s: New.
	* gas/nios2/trap.d: New.
	* gas/nios2/trap.s: New.
	* gas/nios2/tret.d: New.
	* gas/nios2/tret.s: New.
	* gas/nios2/warn_noat.l: New.
	* gas/nios2/warn_noat.s: New.
	* gas/nios2/warn_nobreak.l: New.
	* gas/nios2/warn_nobreak.s: New.
	* gas/nios2/xor.d: New.
	* gas/nios2/xor.s: New.

	ld/
	* Makefile.am (enios2elf.c): New rule.
	* Makefile.in: Regenerated.
	* configure.tgt: Add case for nios2*-*-*.
	* emulparams/nios2elf.sh: New file.
	* NEWS: Note Altera Nios II support.

	ld/testsuite/
	* ld-nios2/emit-relocs-1a.s: New.
	* ld-nios2/emit-relocs-1b.s: New.
	* ld-nios2/emit-relocs-1.d: New.
	* ld-nios2/emit-relocs-1.ld: New.
	* ld-nios2/gprel.d: New.
	* ld-nios2/gprel.s: New.
	* ld-nios2/hilo16.d: New.
	* ld-nios2/hilo16.s: New.
	* ld-nios2/hilo16_symbol.s: New.
	* ld-nios2/imm5.d: New.
	* ld-nios2/imm5.s: New.
	* ld-nios2/imm5_symbol.s: New.
	* ld-nios2/nios2.exp: New.
	* ld-nios2/pcrel16.d: New.
	* ld-nios2/pcrel16_label.s: New.
	* ld-nios2/pcrel16.s: New.
	* ld-nios2/relax_callr.d: New.
	* ld-nios2/relax_callr.ld: New.
	* ld-nios2/relax_callr.s: New.
	* ld-nios2/relax_cjmp.d: New.
	* ld-nios2/relax_cjmp.s: New.
	* ld-nios2/relax_jmp.ld: New.
	* ld-nios2/relax_section.d: New.
	* ld-nios2/relax_section.s: New.
	* ld-nios2/relax_ujmp.d: New.
	* ld-nios2/relax_ujmp.s: New.
	* ld-nios2/reloc.d: New.
	* ld-nios2/reloc.s: New.
	* ld-nios2/reloc_symbol.s: New.
	* ld-nios2/s16.d: New.
	* ld-nios2/s16.s: New.
	* ld-nios2/s16_symbol.s: New.
	* ld-nios2/u16.d: New.
	* ld-nios2/u16.s: New.
	* ld-nios2/u16_symbol.s: New.
	* ld-elf/indirect.exp: Skip on targets that don't support
	-shared -fPIC.
	* ld-elfcomm/elfcomm.exp: Build with -G0 for nios2.
	* ld-plugin/lto.exp: Skip shared library tests on targets that
	don't support them.  Skip execution tests on non-native targets.

	binutils/
	* readelf.c: Include elf/nios2.h.
	(dump_relocations): Add case for EM_ALTERA_NIOS2.
	(get_nios2_dynamic_type): New.
	(get_dynamic_type): Add case for EM_ALTERA_NIOS2.
	(is_32bit_abs_reloc): Fix EM_ALTERA_NIOS2 case.
	(is_16bit_abs_reloc): Likewise.
	(is_none_reloc): Add EM_ALTERA_NIOS2 and EM_NIOS32 cases.
	* NEWS: Note Altera Nios II support.
	* MAINTAINERS: Add Nios II maintainers.
@
text
@d1019 1
a1019 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/cr16elf.em \
d1023 1
a1023 2
  $(ELF_DEPS) \
  $(srcdir)/scripttempl/elf32cr16c.sc ${GEN_DEPENDS}
d1093 1
a1093 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1151 1
a1151 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1154 1
a1154 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1160 1
a1160 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/mep.sc ${GEN_DEPENDS}
d1163 1
a1163 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/metagelf.em \
d1167 1
a1167 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elfmicroblaze.sc ${GEN_DEPENDS}
d1170 1
a1170 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elfmicroblaze.sc ${GEN_DEPENDS}
d1222 1
a1222 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1225 1
a1225 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1228 1
a1228 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/needrelax.em \
d1232 1
a1232 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/needrelax.em \
d1236 1
a1236 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/needrelax.em \
d1874 1
a1874 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d2029 1
a2029 1
  $(srcdir)/emultempl/vms.em \
d2109 1
a2109 1
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d2112 1
a2112 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/needrelax.em \
d2116 1
a2116 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/needrelax.em \
@


1.326
log
@	* Makefile.am (ALL_64_EMULATION_SOURCES): Add eelf64rdos.c.
	(eelf64rdos.c): New rule.
	* emulparams/elf64rdos.sh: New file.
	* configure.tgt (x86_64-*-rdos*): Use above.
	* Makefile.in: Regenerate.
@
text
@d1773 3
@


1.325
log
@Add HOSTING_SCRT0 for PIE test

ld/

	* Makefile.am (HOSTING_SCRT0): New.

	* configure.host (HOSTING_SCRT0): New.  Used for PIE.

	* configure.in (HOSTING_SCRT0): New AC_SUBST.

	* Makefile.in: Regenerated.
	* configure: Likewise.

ld/testsuite/

	* config/default.exp (get_target_emul): Also set HOSTING_SCRT0.

	* lib/ld-lib.exp (default_ld_link): Use HOSTING_SCRT0 for -pie.
@
text
@d519 1
d2106 3
@


1.324
log
@	* common.h: Fix case of "Meta".
	* metag.h: New file.

	* dis-asm.h (print_insn_metag): New declaration.

	* metag.h: New file.

	* Makefile.am: Add Meta.
	* Makefile.in: Regenerate.
	* configure: Regenerate.
	* configure.in: Add Meta.
	* disassemble.c: Add Meta support.
	* metag-dis.c: New file.

	* Makefile.am: Add Meta.
	* Makefile.in: Regenerate.
	* archures.c (bfd_mach_metag): New.
	* bfd-in2.h: Regenerate.
	* config.bfd: Add Meta.
	* configure: Regenerate.
	* configure.in: Add Meta.
	* cpu-metag.c: New file.
	* elf-bfd.h: Add Meta.
	* elf32-metag.c: New file.
	* elf32-metag.h: New file.
	* libbfd.h: Regenerate.
	* reloc.c: Add Meta relocations.
	* targets.c: Add Meta.

	* Makefile.am: Add Meta.
	* Makefile.in: Regenerate.
	* config/tc-metag.c: New file.
	* config/tc-metag.h: New file.
	* configure.tgt: Add Meta.
	* doc/Makefile.am: Add Meta.
	* doc/Makefile.in: Regenerate.
	* doc/all.texi: Add Meta.
	* doc/as.texiinfo: Document Meta options.
	* doc/c-metag.texi: New file.

	* gas/metag/labelarithmetic.d: New file.
	* gas/metag/labelarithmetic.s: New file.
	* gas/metag/metacore12.d: New file.
	* gas/metag/metacore12.s: New file.
	* gas/metag/metacore21-invalid.l: New file.
	* gas/metag/metacore21-invalid.s: New file.
	* gas/metag/metacore21.d: New file.
	* gas/metag/metacore21.s: New file.
	* gas/metag/metacore21ext.d: New file.
	* gas/metag/metacore21ext.s: New file.
	* gas/metag/metadsp21-invalid.l: New file.
	* gas/metag/metadsp21-invalid.s: New file.
	* gas/metag/metadsp21.d: New file.
	* gas/metag/metadsp21.s: New file.
	* gas/metag/metadsp21ext.d: New file.
	* gas/metag/metadsp21ext.s: New file.
	* gas/metag/metafpu21.d: New file.
	* gas/metag/metafpu21.s: New file.
	* gas/metag/metafpu21ext.d: New file.
	* gas/metag/metafpu21ext.s: New file.
	* gas/metag/metag.exp: New file.
	* gas/metag/tls.d: New file.
	* gas/metag/tls.s: New file.

	* Makefile.am: Add Meta.
	* Makefile.in: Regenerate.
	* configure.tgt: Add Meta.
	* emulparams/elf32metag.sh: New file.
	* emultempl/metagelf.em: New file.

	* ld-elf/merge.d: Mark Meta as xfail.
	* ld-gc/start.d: Skip this test on Meta.
	* ld-gc/personality.d: Skip this test on Meta.
	* ld-metag/external.s: New file.
	* ld-metag/metag.exp: New file.
	* ld-metag/pcrel.d: New file.
	* ld-metag/pcrel.s: New file.
	* ld-metag/shared.d: New file.
	* ld-metag/shared.r: New file.
	* ld-metag/shared.s: New file.
	* ld-metag/stub.d: New file.
	* ld-metag/stub.s: New file.
	* ld-metag/stub_pic_app.d: New file.
	* ld-metag/stub_pic_app.r: New file.
	* ld-metag/stub_pic_app.s: New file.
	* ld-metag/stub_pic_shared.d: New file.
	* ld-metag/stub_pic_shared.s: New file.
	* ld-metag/stub_shared.d: New file.
	* ld-metag/stub_shared.r: New file.
	* ld-metag/stub_shared.s: New file.

	* binutils/readelf.c: (guess_is_rela): Add EM_METAG.
	(dump_relocations): Add EM_METAG.
	(get_machine_name): Correct case for Meta.
	(is_32bit_abs_reloc): Add support for Meta ADDR32 reloc.
	(is_none_reloc): Add support for Meta NONE reloc.
@
text
@d89 1
@


1.323
log
@	* Makefile.am (ALL_EMULATION_SOURCES): Correct eavrxmega entries.
	* Makefile.in: Regenerate.
@
text
@d260 1
d1161 4
@


1.322
log
@	* archures.c: Add support for MIPS r5900
	* bfd-in2.h: Add support for MIPS r5900
	* config.bfd: Add support for Sony Playstation 2
	* cpu-mips.c: Add support for MIPS r5900
	* elfxx-mips.c: Add support for MIPS r5900 (extension of r4000)

	* config/tc-mips.c: Add support for MIPS r5900
	Add M_LQ_AB and M_SQ_AB to support large values for instructions lq and sq.
	* config/tc-mips.c (can_swap_branch_p, get_append_method): Detect some conditional short loops to fix a bug on the r5900 by NOP in the branch delay slot.
	* config/tc-mips.c (M_MUL): Support 3 operands in multu on r5900.
	* config/tc-mips.c (M_TRUNCWS): Support trunc.w.s on r5900 in MIPS ISA I.
	* config/tc-mips.c (s_mipsset): Force 32 bit floating point on r5900.
	* configure.in: Detect CPU type when target string contains r5900 (e.g. mips64r5900el-linux-gnu).

	* config/tc-mips.c (mips_ip): Check parameter range of instructions mfps and mtps on r5900.

	* elf/mips.h: Add MIPS machine variant number for r5900 which is compatible with old Playstation 2 software.
	* opcode/mips.h: Add support for r5900 instructions including lq and sq.

	* configure.tgt: Support ELF files for Sony Playstation 2 (for ps2dev and ps2sdk).
	* emulparams/elf32lr5900n32.sh: Create linker script for Sony Playstation 2 ELF files using MIPS ABI n32.
	* emulparams/elf32lr5900.sh: Create linker script for Sony Playstation 2 ELF files using MIPS ABI o32.
	* Makefile.am: Add linker scripts for Sony Playstation 2 ELF files.

	* opcodes/mips-dis.c: Add names for CP0 registers of r5900.
	* opcodes/mips-opc.c: Add M_SQ_AB and M_LQ_AB to support larger range for instructions sq and lq.

	* opcodes/mips-opc.c: Add support for MIPS r5900 CPU.
	Add support for 128 bit MMI (Multimedia Instructions).
	Add support for EE instructions (Emotion Engine).
	Disable unsupported floating point instructions (64 bit and undefined compare operations).
	Enable instructions of MIPS ISA IV which are supported by r5900.
	Disable 64 bit co processor instructions.
	Disable 64 bit multiplication and division instructions.
	Disable instructions for co-processor 2 and 3, because these are not supported (preparation for later VU0 support (Vector Unit)).
	Disable cvt.w.s because this behaves like trunc.w.s and the correct execution can't be ensured on r5900.
	Add trunc.w.s using the opcode encoding of cvt.w.s on r5900. This will confuse less developers and compilers.
@
text
@d185 7
a191 7
	eavrxmega1.o \
	eavrxmega2.o \
	eavrxmega3.o \
	eavrxmega4.o \
	eavrxmega5.o \
	eavrxmega6.o \
	eavrxmega7.o \
@


1.321
log
@Add copyright notices
@
text
@d233 2
d1046 10
@


1.320
log
@ld/
	* emulparams/elf_nacl.sh (nacl_rodata_addr): New shell function.
	(RODATA_ADDR, SHLIB_RODATA_ADDR): Use it to base the calculation
	on SEGMENT_START("text-segment", ...) rather than ... alone.
	* Makefile.am (earmelf_nacl.c, earmelfb_nacl.c): Add missing
	dependency on $(srcdir)/emulparams/elf_nacl.sh.
	* Makefile.in: Regenerate.
@
text
@d2 17
@


1.319
log
@        * scripttempl/epiphany_4x4.sc, emulparams/elf32epiphany_4x4.sh: Add.
        * emultempl/epiphanyelf_4x4.em: Likewise.
        * configure.tgt: Add elf32epiphany_4x4 support.
        * Makefile.am: Likewise.
        * Makefile.in: Regenerate.
@
text
@d728 1
d762 1
@


1.318
log
@2012-11-09  Nick Clifton  <nickc@@redhat.com>

	* Makefile.am (ALL_MACHINES): Add cpu-v850-rh850.lo.
	(ALL_MACHINES_CFILES): Add cpu-v850-rh850.c.
	* archures.c (bfd_arch_info): Add bfd_v850_rh850_arch.
	* config.bfd: Likewise.
	* configure.in: Add bfd_elf32_v850_rh850_vec.
	* cpu-v850.c: Update printed description.
	* cpu-v850_rh850.c: New file.
	* elf32-v850.c (v850_elf_check_relocs): Add support for RH850 ABI
	relocs.
	(v850_elf_perform_relocation): Likewise.
	(v850_elf_final_link_relocate): Likewise.
	(v850_elf_relocate_section): Likewise.
	(v850_elf_relax_section): Likewise.
	(v800_elf_howto_table): New.
	(v850_elf_object_p): Add support for RH850 ABI values.
	(v850_elf_final_write_processing): Likewise.
	(v850_elf_merge_private_bfd_data): Likewise.
	(v850_elf_print_private_bfd_data): Likewise.
	(v800_elf_reloc_map): New.
	(v800_elf_reloc_type_lookup): New.
	(v800_elf_reloc_name_lookup): New.
	(v800_elf_info_to_howto): New.
	(bfd_elf32_v850_rh850_vec): New.
	(bfd_arch_v850_rh850): New.
	* targets.c (_bfd_targets): Add bfd_elf32_v850_rh850_vec.
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
	* configure: Regenerate.

	* readelf.c (get_machine_flags): Add support for E_FLAG_RX_ABI.
	(guess_is_rela): Add EM_V800.
	(dump_relocations): Likewise.
	(get_machine_name): Update EM_V800.
	(get_machine_flags): Add support for RH850 ABI flags.
	(is_32bit_abs_reloc): Add support for RH850 ABI reloc.

	* config/tc-v850.c (v850_target_arch): New.
	(v850_target_format): New.
	(set_machine): Use v850_target_arch.
	(md_begin): Likewise.
	(md_show_usage): Document new switches.
	(md_parse_option): Add -mgcc-abi, -mrh850-abi, -m8byte-align and
	-m4byte-align.
	* config/tc-v850.c (TARGET_ARCH) Use v850_target_arch.
	(TARGET_FORMAT): Use v850_target_format.
	* doc/c-v850.texi: Document new options.

	* v850.h: Add RH850 ABI values.

	* Makefile.am: (ALL_EMULATION_SOURCES): Add ev850_rh850.c.
	* Makefile.in: Regenerate.
	* configure.tgt (v850*-*-*): Make v850_rh850 the default
	emulation. Add vanilla v850 as an extra emulation.
	* emulparams/v850_rh850.sh: New file.
	* scripttempl/v850_rh850.sc: New file.

	* configure.in: Add bfd_v850_rh850_arch.
	* configure: Regenerate.
	* disassemble.c (disassembler): Likewise.
@
text
@d217 1
d1028 4
@


1.317
log
@Add microblazeel target support to bfd, gas and ld.

binutils/bfd/Changelog

 2012-11-09  Edgar E. Iglesias <edgar.iglesias@@gmail.com>

          * config.bfd: Add microblazeel-*-*
          * configure.in: Likewise.
          * configure: Regenerate.
          * elf32-microblaze.c (microblaze_elf_relocate_section):
            Add endian awareness.
            (microblaze_elf_merge_private_bfd_data): New.
            (microblaze_bfd_write_imm_value_32): New.
            (microblaze_bfd_write_imm_value_64): New.
            (microblaze_elf_relax_section): Add endian awareness.
            (microblaze_elf_add_symbol_hook): Define TARGET_LITTLE_NAME,
            TARGET_LITTLE_SYM and bfd_elf32_bfd_merge_private_bfd_data.
          * targets.c: Add bfd target bfd_elf32_microblazeel_vec.

binutils/gas/Changelog

 2012-11-09  Edgar E. Iglesias <edgar.iglesias@@gmail.com>

          * tc-microblaze.c (md_longopts): Define OPTION_EB and
            OPTION_EL for target.
            (md_parse_option): Likewise.
          * tc-microblaze.h: Set elf32-microblazeel if not
            target_big_endian for TARGET_FORMAT.
          * configure.tgt: Add microblazeel and set endian per target.

binutils/gas/testsuite/Changelog

 2012-11-09  David Holsgrove  <david.holsgrove@@xilinx.com>

          * gas/microblaze/endian.exp: New file - endian
            testcase for microblaze / microblazeel.
          * gas/microblaze/endian.s: Likewise.
          * gas/microblaze/endian_be.d: Likewise.
          * gas/microblaze/endian_le.d: Likewise.
          * gas/microblaze/endian_le_elf.d: Likewise.
          * gas/microblaze/reloc_sym.d: Update to accept targets
            other than elf32-microblaze.
          * gas/microblaze/special_reg.d: Likewise.

binutils/ld/Changelog

 2012-11-09  Edgar E. Iglesias <edgar.iglesias@@gmail.com>

          * Makefile.am: Add eelf32microblazeel.c and eelf32mbel_linux.c.
          * Makefile.in: Regenerated.
          * configure.tgt: Add microblazeel and set endian per target.
          * emulparams/elf32mb_linux.sh: Add OUTPUT_FORMAT.
          * emulparams/elf32microblaze.sh: Likewise.
          * emulparams/elf32mbel_linux.sh: New file.
          * emulparams/elf32microblazeel.sh: Likewise.
@
text
@d456 1
d1928 3
@


1.316
log
@Add support for 64-bit ARM architecture: AArch64
@
text
@d240 1
d1111 3
d1123 3
@


1.315
log
@gprof/
	* Makefile.am (TEXINFO_TEX): Remove $(top_srcdir) prefix.
	* Makefile.in: Regenerate.

ld/
	* Makefile.am (TEXINFO_TEX): Remove $(top_srcdir) prefix.
	* Makefile.in: Regenerate.
@
text
@d468 4
d1726 16
@


1.315.2.1
log
@Add support for 64-bit ARM architecture: aarch64
@
text
@a467 4
	eaarch64elf.c \
	eaarch64elfb.c \
	eaarch64linux.c \
	eaarch64linuxb.c \
a1721 16
eaarch64elf.c: $(srcdir)/emulparams/aarch64elf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/aarch64elf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} aarch64elf "$(tdir_aarch64elf)"
eaarch64elfb.c: $(srcdir)/emulparams/aarch64elfb.sh $(srcdir)/emulparams/aarch64elf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/aarch64elf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} aarch64elfb "$(tdir_aarch64elfb)"
eaarch64linux.c: $(srcdir)/emulparams/aarch64linux.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/aarch64elf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} aarch64linux "$(tdir_aarch64linux)"
eaarch64linuxb.c: $(srcdir)/emulparams/aarch64linuxb.sh $(srcdir)/emulparams/aarch64linux.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/aarch64elf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} aarch64linuxb "$(tdir_aarch64linuxb)"
@


1.315.2.2
log
@ld/
	* emulparams/elf_nacl.sh (nacl_rodata_addr): New shell function.
	(RODATA_ADDR, SHLIB_RODATA_ADDR): Use it to base the calculation
	on SEGMENT_START("text-segment", ...) rather than ... alone.
	* Makefile.am (earmelf_nacl.c, earmelfb_nacl.c): Add missing
	dependency on $(srcdir)/emulparams/elf_nacl.sh.
	* Makefile.in: Regenerate.
@
text
@a724 1
  $(srcdir)/emulparams/elf_nacl.sh \
a757 1
  $(srcdir)/emulparams/elf_nacl.sh \
@


1.314
log
@	* Makefile.am (check_DEJAGNU): Export LC_ALL=C in place of other
	LC and LANG environment vars.
	* Makefile.in: Regenerate.
@
text
@d5 1
a5 1
TEXINFO_TEX = $(top_srcdir)/../texinfo/texinfo.tex
@


1.313
log
@Add support for Motorola XGATE embedded CPU
@
text
@d2116 1
a2116 1
	LC_COLLATE=; LC_ALL=; LANG=; export LC_COLLATE LC_ALL LANG; \
@


1.312
log
@	* elf32-arm.c (elf32_arm_nacl_plt0_entry, elf32_arm_nacl_plt_entry):
	New variables.
	(struct elf32_arm_link_hash_table): New member `nacl_p'.
	(elf32_arm_link_hash_table_create): Initialize it.
	(elf32_arm_nacl_link_hash_table_create): New function.
	(arm_movw_immediate, arm_movt_immediate): New functions.
	(elf32_arm_populate_plt_entry): Test HTAB->nacl_p.
	(elf32_arm_finish_dynamic_sections): Likewise.
	(elf32_arm_output_plt_map_1): Likewise.
	(bfd_elf32_littlearm_nacl_vec, bfd_elf32_bigarm_nacl_vec):
	New backend vector stanza.
	(elf32_arm_nacl_modify_segment_map): New function.
	* config.bfd: Handle arm-*-nacl*, armeb-*-nacl*.
	* targets.c: Support bfd_elf32_{big,little}_nacl_vec.
	* configure.in: Likewise.
	(bfd_elf32_bigarm_nacl_vec): Add elf-nacl.lo here.
	(bfd_elf32_littlearm_nacl_vec): Likewise.
	(bfd_elf32_bigarm_vec, bfd_elf32_littlearm_vec): Likewise.
	(bfd_elf32_bigarm_symbian_vec): Likewise.
	(bfd_elf32_littlearm_symbian_vec): Likewise.
	(bfd_elf32_bigarm_vxworks_vec): Likewise.
	(bfd_elf32_littlearm_vxworks_vec): Likewise.
	* configure: Regenerated.

	* configure.tgt (arm-*-nacl*): Match it.
	* config/te-nacl.h (FPU_DEFAULT, EABI_DEFAULT): Define.
	(LOCAL_LABELS_DOLLAR): Define.
	* config/tc-arm.c (elf32_arm_target_format) [TE_NACL]:
	Use nacl format variants.

	* gas/elf/elf.exp (run_elf_list_test): Treat arm-*-nacl* targets
	as -armeabi.

	* gas/arm/any-idiv.d: Match *-*-nacl* targets too.
	* gas/arm/arch4t.d: Likewise.
	* gas/arm/arch4t-eabi.d: Likewise.
	* gas/arm/attr-any-armv4t.d: Likewise.
	* gas/arm/attr-any-thumbv6.d: Likewise.
	* gas/arm/attr-cpu-directive.d: Likewise.
	* gas/arm/attr-default.d: Likewise.
	* gas/arm/attr-march-all.d: Likewise.
	* gas/arm/attr-march-armv1.d: Likewise.
	* gas/arm/attr-march-armv2a.d: Likewise.
	* gas/arm/attr-march-armv2.d: Likewise.
	* gas/arm/attr-march-armv2s.d: Likewise.
	* gas/arm/attr-march-armv3.d: Likewise.
	* gas/arm/attr-march-armv3m.d: Likewise.
	* gas/arm/attr-march-armv4.d: Likewise.
	* gas/arm/attr-march-armv4t.d: Likewise.
	* gas/arm/attr-march-armv4txm.d: Likewise.
	* gas/arm/attr-march-armv4xm.d: Likewise.
	* gas/arm/attr-march-armv5.d: Likewise.
	* gas/arm/attr-march-armv5t.d: Likewise.
	* gas/arm/attr-march-armv5te.d: Likewise.
	* gas/arm/attr-march-armv5tej.d: Likewise.
	* gas/arm/attr-march-armv5texp.d: Likewise.
	* gas/arm/attr-march-armv5txm.d: Likewise.
	* gas/arm/attr-march-armv6.d: Likewise.
	* gas/arm/attr-march-armv6j.d: Likewise.
	* gas/arm/attr-march-armv6k.d: Likewise.
	* gas/arm/attr-march-armv6k+sec.d: Likewise.
	* gas/arm/attr-march-armv6kt2.d: Likewise.
	* gas/arm/attr-march-armv6-m.d: Likewise.
	* gas/arm/attr-march-armv6-m+os.d: Likewise.
	* gas/arm/attr-march-armv6s-m.d: Likewise.
	* gas/arm/attr-march-armv6t2.d: Likewise.
	* gas/arm/attr-march-armv6z.d: Likewise.
	* gas/arm/attr-march-armv6zk.d: Likewise.
	* gas/arm/attr-march-armv6zkt2.d: Likewise.
	* gas/arm/attr-march-armv6zt2.d: Likewise.
	* gas/arm/attr-march-armv7-a.d: Likewise.
	* gas/arm/attr-march-armv7a.d: Likewise.
	* gas/arm/attr-march-armv7-a+idiv.d: Likewise.
	* gas/arm/attr-march-armv7-a+mp.d: Likewise.
	* gas/arm/attr-march-armv7-a+sec.d: Likewise.
	* gas/arm/attr-march-armv7-a+sec+virt.d: Likewise.
	* gas/arm/attr-march-armv7-a+virt.d: Likewise.
	* gas/arm/attr-march-armv7.d: Likewise.
	* gas/arm/attr-march-armv7em.d: Likewise.
	* gas/arm/attr-march-armv7-m.d: Likewise.
	* gas/arm/attr-march-armv7m.d: Likewise.
	* gas/arm/attr-march-armv7-r.d: Likewise.
	* gas/arm/attr-march-armv7r.d: Likewise.
	* gas/arm/attr-march-armv7-r+mp.d: Likewise.
	* gas/arm/attr-march-iwmmxt2.d: Likewise.
	* gas/arm/attr-march-iwmmxt.d: Likewise.
	* gas/arm/attr-march-xscale.d: Likewise.
	* gas/arm/attr-mcpu.d: Likewise.
	* gas/arm/attr-mfpu-arm1020e.d: Likewise.
	* gas/arm/attr-mfpu-arm1020t.d: Likewise.
	* gas/arm/attr-mfpu-arm1136jf-s.d: Likewise.
	* gas/arm/attr-mfpu-arm1136jfs.d: Likewise.
	* gas/arm/attr-mfpu-arm7500fe.d: Likewise.
	* gas/arm/attr-mfpu-fpa10.d: Likewise.
	* gas/arm/attr-mfpu-fpa11.d: Likewise.
	* gas/arm/attr-mfpu-fpa.d: Likewise.
	* gas/arm/attr-mfpu-fpe2.d: Likewise.
	* gas/arm/attr-mfpu-fpe3.d: Likewise.
	* gas/arm/attr-mfpu-fpe.d: Likewise.
	* gas/arm/attr-mfpu-maverick.d: Likewise.
	* gas/arm/attr-mfpu-neon.d: Likewise.
	* gas/arm/attr-mfpu-neon-fp16.d: Likewise.
	* gas/arm/attr-mfpu-softfpa.d: Likewise.
	* gas/arm/attr-mfpu-softvfp.d: Likewise.
	* gas/arm/attr-mfpu-softvfp+vfp.d: Likewise.
	* gas/arm/attr-mfpu-vfp10.d: Likewise.
	* gas/arm/attr-mfpu-vfp10-r0.d: Likewise.
	* gas/arm/attr-mfpu-vfp3.d: Likewise.
	* gas/arm/attr-mfpu-vfp9.d: Likewise.
	* gas/arm/attr-mfpu-vfp.d: Likewise.
	* gas/arm/attr-mfpu-vfpv2.d: Likewise.
	* gas/arm/attr-mfpu-vfpv3-d16.d: Likewise.
	* gas/arm/attr-mfpu-vfpv3.d: Likewise.
	* gas/arm/attr-mfpu-vfpv4-d16.d: Likewise.
	* gas/arm/attr-mfpu-vfpv4.d: Likewise.
	* gas/arm/attr-mfpu-vfpxd.d: Likewise.
	* gas/arm/attr-names.d: Likewise.
	* gas/arm/attr-order.d: Likewise.
	* gas/arm/attr-override-cpu-directive.d: Likewise.
	* gas/arm/attr-override-mcpu.d: Likewise.
	* gas/arm/got_prel.d: Likewise.
	* gas/arm/mapdir.d: Likewise.
	* gas/arm/mapmisc.d: Likewise.
	* gas/arm/mapsecs.d: Likewise.
	* gas/arm/mapshort-eabi.d: Likewise.
	* gas/arm/mapshort-elf.d: Likewise.
	* gas/arm/mov-highregs-any.d: Likewise.
	* gas/arm/mov-lowregs-any.d: Likewise.
	* gas/arm/pr12198-1.d: Likewise.
	* gas/arm/pr12198-2.d: Likewise.
	* gas/arm/thumb.d: Likewise.
	* gas/arm/thumb-eabi.d: Likewise.
	* gas/arm/thumbrel.d: Likewise.

	* configure.tgt (arm*-*-nacl*, arm*b-*-nacl*): Handle them.
	* emulparams/armelf_nacl.sh: New file.
	* emulparams/armelfb_nacl.sh: New file.
	* Makefile.am (ALL_EMULATION_SOURCES): Add earmelf_nacl.c
	and earmelfb_nacl.c here.
	(earmelf_nacl.c, earmelfb_nacl.c): New targets.
	* Makefile.in: Regenerated.

	* ld-arm/arm-elf.exp (armelftests): Split out into ...
	(armelftests_common, armelftests_nonacl): ... these two.
	(armeabitests): Split out into ...
	(armeabitests_common, armeabitests_nonacl): ... these two.
	Omit _nonacl sets for arm*-*-nacl* targets.

	* ld-arm/farcall-mix.d: Don't match exact addresses, only symbolic ones.
	* ld-arm/farcall-mix2.d: Likewise.
	* ld-arm/farcall-group.d: Likewise.

	* ld-arm/tls-gdesc-got.d: Match variant file formats too.
	Accept some variation in exact addresses.

	* ld-arm/thumb2-b-interwork.d: Match variant file formats too.
	Fix regexps not to care about exact addresses where not relevant.

	* ld-arm/thumb2-bl-undefweak.d: Match any hex strings, not any
	strings of particular exact lengths.
	* ld-arm/thumb2-bl-undefweak1.d: Likewise.

	* ld-arm/arm-app.r: Match variant file formats too.
	* ld-arm/arm-app-abs32.r: Likewise.
	* ld-arm/arm-lib.d: Likewise.
	* ld-arm/arm-lib.r: Likewise.
	* ld-arm/arm-static-app.r: Likewise.
	* ld-arm/armv4-bx.d: Likewise.
	* ld-arm/data-only-map.d: Likewise.
	* ld-arm/group-relocs.d: Likewise.
	* ld-arm/jump19.d: Likewise.
	* ld-arm/reloc-boundaries.d: Likewise.
	* ld-arm/thumb1-bl.d: Likewise.
	* ld-arm/thumb2-bl.d: Likewise.
	* ld-arm/tls-app.d: Likewise.
	* ld-arm/tls-app.r: Likewise.
	* ld-arm/tls-gdierelax.d: Likewise.
	* ld-arm/tls-gdierelax2.d: Likewise.
	* ld-arm/tls-gdlerelax.d: Likewise.
	* ld-arm/tls-lib.d: Likewise.
	* ld-arm/tls-lib.r: Likewise.
	* ld-arm/tls-mixed.r: Likewise.
	* ld-arm/vfp11-fix-none.d: Likewise.
	* ld-arm/vfp11-fix-scalar.d: Likewise.
	* ld-arm/vfp11-fix-vector.d: Likewise.
	* ld-arm/arm-static-app.d: Likewise.
	Fix regexps not to care about exact number of leading spaces.
	* ld-arm/arm-app-abs32.d: Likewise.
	* ld-arm/fix-arm1176-off.d: Likewise.
	* ld-arm/fix-arm1176-on.d: Likewise.

	* ld-arm/arm-elf.exp: Treat nacl targets like eabi targets.
@
text
@d460 1
d1915 4
@


1.311
log
@	* configure.ac (ia64*-*-*vms*): Add support for ld.
	* configure: Regenerate.

	* scripttempl/ia64vms.sc: New file.
	* emultempl/vms.em (_before_parse): Support for ia64.
	(elf64-ia64-vms): New fragment for ia64.
	* emulparams/elf64_ia64_vms.sh: New file.
	* configure.tgt (ia64-*-*vms*): Add.
	* Makefile.am (ALL_64_EMULATION_SOURCES): Add eelf64_ia64_vms.c
	(eelf64_ia64_vms.c): New rule.
	* Makefile.in: Regenerate.

	* elflink.c (elf_link_output_extsym): Add a guard.
	(bfd_elf_final_link): Remove assertion.
	(bfd_elf_final_link): Add a guard.
	* elfnn-ia64.c (INCLUDE_IA64_VMS): Removed.
	(elfNN_vms_section_from_shdr, elfNN_vms_object_p)
	(elfNN_vms_post_process_headers, elfNN_vms_section_processing)
	(elfNN_vms_final_write_processing, elfNN_vms_close_and_cleanup):
	Remove.
	(elfNN-ia64-vms target): Move to ...
	* elf64-ia64-vms.c: New file.
	* configure.in (bfd_elf64_ia64_vms_vec): Add elf64-ia64-vms.lo
	* Makefile.am (BFD64_BACKENDS): Add elf64-ia64-vms.lo.
	(BFD64_BACKENDS_CFILES): Ad elf64-ia64-vms.c.
	* configure: Regenerate.
	* Makefile.in: Regenerate.
@
text
@d146 1
d152 1
d717 6
d749 7
@


1.310
log
@bfd/
2012-04-03  Roland McGrath  <mcgrathr@@google.com>

	* elf-nacl.c: New file.
	* elf-nacl.h: New file.
	* elf32-i386.c (elf_backend_modify_segment_map): Define for
	bfd_elf32_i386_nacl_vec.
	(elf_backend_modify_program_headers): Likewise.
	* elf64-x86-64.c (elf_backend_modify_segment_map): Define for
	bfd_elf64_x86_64_nacl_vec and bfd_elf32_x86_64_nacl_vec.
	(elf_backend_modify_program_headers): Likewise.
	* Makefile.am (BFD32_BACKENDS, BFD64_BACKENDS): Add elf-nacl.lo here.
	(BFD32_BACKENDS_CFILES, BFD64_BACKENDS_CFILES): Add elf-nacl.c here.
	* Makefile.in: Regenerated.
	* configure.in (bfd_elf64_x86_64_nacl_vec): Add elf-nacl.o to tb here.
	(bfd_elf32_x86_64_nacl_vec): Likewise.
	(bfd_elf64_x86_64_vec, bfd_elf32_x86_64_vec): Likewise.
	(bfd_elf64_x86_64_freebsd_vec, bfd_elf64_x86_64_sol2_vec): Likewise.
	(bfd_elf64_l1om_vec, bfd_elf64_l1om_freebsd_vec): Likewise.
	(bfd_elf64_k1om_vec, bfd_elf64_k1om_freebsd_vec): Likewise.
	(bfd_elf32_i386_nacl_vec): Likewise.
	(bfd_elf32_i386_sol2_vec, bfd_elf32_i386_freebsd_vec): Likewise.
	(bfd_elf32_i386_vxworks_vec, bfd_elf32_i386_vec): Likewise.
	* configure: Regenerated.

binutils/testsuite/
2012-04-03  Roland McGrath  <mcgrathr@@google.com>

	* lib/binutils-common.exp (is_elf_format): Consider *-*-nacl* to
	be ELF too.

	* binutils-all/elfedit-4.d: Add "#as: --64" option.

	* binutils-all/i386/i386.exp: Accept nacl targets too.
	* binutils-all/x86-64/x86-64.exp: Likewise.

gas/testsuite/
2012-04-03  Roland McGrath  <mcgrathr@@google.com>

	* gas/i386/k1om.d: Add not-target match for *-*-nacl*.
	* gas/i386/l1om.d: Likewise.

ld/
2012-04-03  Roland McGrath  <mcgrathr@@google.com>

	* configure.tgt (i[3-7]86-*-nacl*, x86_64-*-nacl*): Handle them.
	* emulparams/elf_nacl.sh: New file.
	* emulparams/elf_i386_nacl.sh: New file.
	* emulparams/elf32_x86_64_nacl.sh: New file.
	* emulparams/elf_x86_64_nacl.sh: New file.
	* Makefile.am (ALL_EMULATION_SOURCES): Add eelf_i386_nacl.c here.
	(ALL_64_EMULATION_SOURCES): Add eelf32_x86_64_nacl.c and
	eelf_x86_64_nacl.c here.
	(eelf_i386_nacl.c, eelf32_x86_64_nacl.c, eelf_x86_64_nacl.c):
	New targets.
	* Makefile.in: Regenerated.

	* scripttempl/elf.sc: Handle SEPARATE_CODE cases.

ld/testsuite/
2012-04-03  Roland McGrath  <mcgrathr@@google.com>

	* ld-x86-64/ilp32-4-nacl.d: New file.
	* ld-x86-64/x86-64.exp: Run it.

	* ld-discard/discard.exp: Accept nacl targets too.
	* ld-elf/binutils.exp: Likewise.
	* ld-elf/comm-data.exp: Likewise.
	* ld-elf/elf.exp: Likewise.
	* ld-elf/tls_common.exp: Likewise.
	* ld-elfvers/vers.exp: Likewise.
	* ld-elfvsb/elfvsb.exp: Likewise.
	* ld-elfweak/elfweak.exp: Likewise.
	* ld-gc/gc.exp: Likewise.
	* ld-ifunc/binutils.exp: Likewise.
	* ld-ifunc/ifunc.exp: Likewise.
	* ld-linkonce/linkonce.exp:Likewise.
	* ld-pie/pie.exp: Likewise.
	* ld-shared/shared.exp: Likewise.
	* ld-undefined/weak-undef.exp: Likewise.
	* ld-unique/unique.exp: Likewise.
	* ld-x86-64/dwarfreloc.exp: Likewise.
	* ld-x86-64/line.exp: Likewise.

	* lib/ld-lib.exp (slurp_options): Support global array
	options_regsub to apply substitutions to the contents
	of options lines read from the file.
	* ld-i386/emit-relocs.d: Renamed to ...
	* ld-i386/emit-relocs.rd: ... this.
	* ld-i386/i386.exp: Accept nacl targets too.
	For them, use options_regsub to replace elf_i386 with
	elf_i386_nacl in run_dump_test cases; apply the same
	substitution in $i386tests; replace foo.rd expectations
	files with foo-nacl.rd in $i386tests.
	(i386tests): Change emit-relocs.d to emit-relocs.rd here.
	* ld-i386/emit-relocs-nacl.rd: New file.
	* ld-i386/plt-nacl.pd: New file.
	* ld-i386/plt-pic-nacl.pd: New file.
	* ld-i386/tlsbin-nacl.rd: New file.
	* ld-i386/tlsbindesc-nacl.rd: New file.
	* ld-i386/tlsdesc-nacl.rd: New file.
	* ld-i386/tlsgdesc-nacl.rd: New file.
	* ld-i386/tlsnopic-nacl.rd: New file.
	* ld-i386/tlspic-nacl.rd: New file.
	* ld-x86-64/x86-64.exp: Accept nacl targets too.
	For them, use options_regsub to replace elf_x86_64 with
	elf_x86_64_nacl in run_dump_test cases; apply the same
	substitution in $x86_64tests; replace foo.rd expectations
	files with foo-nacl.rd in $x86_64tests.
	Add explicit -melf_x86_64 to ld options in tests that need it,
	in case the default emulation is x32 (as it is for x86_64-nacl).
	* ld/testsuite/ld-x86-64/plt-nacl.pd: New file.
	* ld/testsuite/ld-x86-64/split-by-file-nacl.rd: New file.
	* ld/testsuite/ld-x86-64/tlsbin-nacl.rd: New file.
	* ld/testsuite/ld-x86-64/tlsbindesc-nacl.rd: New file.
	* ld/testsuite/ld-x86-64/tlsdesc-nacl.pd: New file.
	* ld/testsuite/ld-x86-64/tlsdesc-nacl.rd: New file.
	* ld/testsuite/ld-x86-64/tlsgdesc-nacl.rd: New file.
	* ld/testsuite/ld-x86-64/tlspic-nacl.rd: New file.

	* ld-i386/hidden2.d: Loosen regexps to match any file format variant,
	and not to depend on exact addresses, displacements, etc. where
	they are irrelevant.
	* ld-i386/pcrel16.d: Likewise.
	* ld-i386/pcrel16abs.d: Likewise.
	* ld-i386/pr12718.d: Likewise.
	* ld-i386/pr12921.d: Likewise.
	* ld-i386/reloc.d: Likewise.
	* ld-i386/tlsbin.dd: Likewise.
	* ld-i386/tlsbin.sd: Likewise.
	* ld-i386/tlsbin.td: Likewise.
	* ld-i386/tlsbindesc.dd: Likewise.
	* ld-i386/tlsbindesc.sd: Likewise.
	* ld-i386/tlsbindesc.td: Likewise.
	* ld-i386/tlsdesc.dd: Likewise.
	* ld-i386/tlsdesc.sd: Likewise.
	* ld-i386/tlsdesc.td: Likewise.
	* ld-i386/tlsg.sd: Likewise.
	* ld-i386/tlsgdesc.dd: Likewise.
	* ld-i386/tlsindntpoff.dd: Likewise.
	* ld-i386/tlsnopic.dd: Likewise.
	* ld-i386/tlsnopic.sd: Likewise.
	* ld-i386/tlspic.dd: Likewise.
	* ld-i386/tlspic.sd: Likewise.
	* ld-i386/tlspic.td: Likewise.
	* ld-i386/tlspie2.d: Likewise.
	* ld-x86-64/hidden2.d: Likewise.
	* ld-x86-64/pcrel16.d: Likewise.
	* ld-x86-64/pr12718.d: Likewise.
	* ld-x86-64/pr12921.d: Likewise.
	* ld-x86-64/protected3.d: Likewise.
	* ld-x86-64/tlsbin.dd: Likewise.
	* ld-x86-64/tlsbin.sd: Likewise.
	* ld-x86-64/tlsbin.td: Likewise.
	* ld-x86-64/tlsbindesc.dd: Likewise.
	* ld-x86-64/tlsbindesc.sd: Likewise.
	* ld-x86-64/tlsbindesc.td: Likewise.
	* ld-x86-64/tlsdesc.dd: Likewise.
	* ld-x86-64/tlsdesc.sd: Likewise.
	* ld-x86-64/tlsdesc.td: Likewise.
	* ld-x86-64/tlsg.sd: Likewise.
	* ld-x86-64/tlsgd5.dd: Likewise.
	* ld-x86-64/tlsgd6.dd: Likewise.
	* ld-x86-64/tlsgdesc.dd: Likewise.
	* ld-x86-64/tlspic.dd: Likewise.
	* ld-x86-64/tlspic.sd: Likewise.
	* ld-x86-64/tlspic.td: Likewise.

	* ld-x86-64/ilp32-8.d: Match any file format variant.
	Use a -Ttext and adjust expected results, to handle variant layouts.
	* ld-x86-64/ilp32-9.d: Likewise.

	* ld-i386/alloc.t: Remove superfluous OUTPUT_FORMAT statement.
	* ld-i386/pr12627.t: Likewise.

	* ld-x86-64/abs-l1om.d: Add target: constraint.
	* ld-x86-64/protected2-l1om.d: Likewise.
	* ld-x86-64/protected3-l1om.d: Likewise.
	* ld-x86-64/ilp32-4.d: Likewise.

	* ld-x86-64/plt.s: New file.
	* ld-x86-64/pltlib.s: New file.
	* ld-x86-64/plt.pd: New file.
	* ld-x86-64/x86-64.exp (x86_64tests): Add them.

	* ld-i386/plt.s: New file.
	* ld-i386/pltlib.s: New file.
	* ld-i386/plt.pd: New file.
	* ld-i386/plt-pic.s: New file.
	* ld-i386/plt-pic.pd: New file.
	* ld-i386/i386.exp (i386tests): Add them.
@
text
@d470 1
d1932 4
@


1.309
log
@Add big-endian support for tilegx.

bfd/
	* config.bfd (tilegx-*-*): rename little endian vector; add big
	endian vector.
	(tilegxbe-*-*): New case.
	* configure.in (bfd_elf32_tilegx_vec): Rename...
	(bfd_elf32_tilegx_le_vec): ... to this.
	(bfd_elf32_tilegx_be_vec): New vector.
	(bfd_elf64_tilegx_vec): Rename...
	(bfd_elf64_tilegx_le_vec): ... to this.
	(bfd_elf64_tilegx_be_vec): New vector.
	* configure: Regenerate.
	* elf32-tilegx.c (TARGET_LITTLE_SYM): Rename.
	(TARGET_LITTLE_NAME): Ditto.
	(TARGET_BIG_SYM): Define.
	(TARGET_BIG_NAME): Define.
	* elf64-tilegx.c (TARGET_LITTLE_SYM): Rename.
	(TARGET_LITTLE_NAME): Ditto.
	(TARGET_BIG_SYM): Define.
	(TARGET_BIG_NAME): Define.
	* targets.c (bfd_elf32_tilegx_vec): Rename...
	(bfd_elf32_tilegx_le_vec): ... to this.
	(bfd_elf32_tilegx_be_vec): Declare.
	(bfd_elf64_tilegx_vec): Rename...
	(bfd_elf64_tilegx_le_vec): ... to this.
	(bfd_elf64_tilegx_be_vec): Declare.
	(_bfd_target_vector): Add / rename above vectors.

binutils/testsuite/
	* binutils-all/objdump.exp (cpus_expected): Add tilegx.

gas/
	* tc-tilegx.c (tilegx_target_format): Handle big endian.
	(OPTION_EB): Define.
	(OPTION_EL): Define.
	(md_longopts): Add entries for "EB" and "EL".
	(md_parse_option): Handle OPTION_EB and OPTION_EL.
	(md_show_usage): Add -EB and -EL.
	(md_number_to_chars): New.
	* tc-tilegx.h (TARGET_BYTES_BIG_ENDIAN): Guard definition with
	ifndef.
	(md_number_to_chars): Delete.
	* configure.tgt (tilegx*be): Handle.
	* doc/as.texinfo [TILE-Gx]: Document -EB and -EL.
	* doc/c-tilegx.texi: Ditto.

ld/
	* Makefile.am (ALL_EMULATION_SOURCES): Add eelf32tilegx_be.c.
	(ALL_64_EMULATION_SOURCES): Add eelf64tilegx_be.c.
	(eelf32tilegx_be.c): Add rule to build this file.
	(eelf64tilegx_be.c): Ditto.
	* Makefile.in: Regenerate.
	* configure.tgt (tilegx-*-*): Support big endian.
	(tilegxbe-*-*): New.
	* emulparams/elf32tilegx.sh (OUTPUT_FORMAT): Rename.
	(BIG_OUTPUT_FORMAT): Define.
	(LITTLE_OUTPUT_FORMAT): Define.
	* emulparams/elf32tilegx_be.sh: New.
	* emulparams/elf64tilegx.sh (OUTPUT_FORMAT): Rename.
	(BIG_OUTPUT_FORMAT): Define.
	(LITTLE_OUTPUT_FORMAT): Define.
	* emulparams/elf64tilegx_be.sh: New.

ld/testsuite/
	* ld-tilegx/reloc-be.d: New.
	* ld-tilegx/reloc-le.d: New.
	* ld-tilegx/reloc.d: Delete.
	* ld-tilegx/tilegx.exp: Test big and little endian.
@
text
@d266 1
d466 1
d488 1
a488 1
 	eelf64tilegx_be.c \
d495 1
d1036 2
a1037 2
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS} 
	${GENSCRIPTS} elf32lm32fd "$(tdir_elf32lm32fd)" 
d1208 5
d1740 2
a1741 2
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS} 
	${GENSCRIPTS} score3_elf "$(tdir_score3_elf)" scoreelf 
d1744 1
a1744 1
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS} 
d1912 5
d2036 5
d2160 1
a2160 1
# 
d2185 3
a2187 3
	        sed -e '/^.if n .na/d' > $@@.T$$$$ && \
	        mv -f $@@.T$$$$ $@@) || \
	        (rm -f $@@.T$$$$ && exit 1)
@


1.308
log
@	* Makefile.am (ALL_64_EMULATION_SOURCES): Add powerpc64-*-freebsd
	source.
	(eelf64ppc_fbsd.c): Add rules to build this file.
	* Makefile.in: Regenerate.
	* configure.tgt: Add target definition for powerpc64-*-freebsd*.
	Adjust powerpc-*-freebsd*.
	* emultempl/ppc64elf.em: Add a mechanism to override the default
	value of 0 for plt_static_chain.
	* emulparams/elf32ppc_fbsd.sh (OUTPUT_FORMAT): Override the default.
	* emulparams/elf64ppc_fbsd.sh (OUTPUT_FORMAT): Likewise.
	(DEFAULT_PLT_STATIC_CHAIN): Define to 1.
@
text
@d253 1
d486 1
d1157 4
d1998 4
@


1.307
log
@[.]
	* configure.ac (rl78-*-*) New case.
	* configure: Regenerate.

[bfd]
	* Makefile.am (ALL_MACHINES): Add cpu-rl78.lo.
	(ALL_MACHINES_CFILES): Add cpu-rl78.c.
	(BFD32_BACKENDS): Add elf32-rl78.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-rl78.c.
	(Makefile.in): Regenerate.
	* archures.c (bfd_architecture): Define bfd_arch_rl78.
	(bfd_archures_list): Add bfd_rl78_arch.
	* config.bfd: Add rl78-*-elf.
	* configure.in: Add bfd_elf32_rl78_vec.
	* reloc.c (bfd_reloc_code_type): Add BFD_RELOC_RL78_* relocations.
	* targets.c (bfd_target_vector): Add bfd_elf32_rl78_vec.
	* Makefile.in: Regenerate.
	* bfd-in2.h: Regenerate.
	* configure: Regenerate.
	* libbfd.h: Regenerate.
	* cpu-rl78.c: New file.
	* elf32-rl78.c: New file.

[binutils]
	* readelf.c: Include elf/rl78.h
	(guess_is_rela): Handle EM_RL78.
	(dump_relocations): Likewise.
	(get_machine_name): Likewise.
	(is_32bit_abs_reloc): Likewise.
	* NEWS: Mention addition of RL78 support.
	* MAINTAINERS: Add myself as RL78 port maintainer.

[gas]
	* Makefile.am (TARGET_CPU_CFILES): Add tc-rl78.c.
	(TARGET_CPU_HFILES): Add rc-rl78.h.
	(EXTRA_DIST): Add rl78-parse.c and rl78-parse.y.
	(rl78-parse.c, rl78-parse.h, rl78-parse.o, rl78-defs.h): New rules.
	* Makefile.in: Regenerate.
	* configure.in: Add rl78 case.
	* configure: Regenerate.
	* configure.tgt: Add rl78 case.
	* config/rl78-defs.h: New file.
	* config/rl78-parse.y: New file.
	* config/tc-rl78.c: New file.
	* config/tc-rl78.h: New file.
	* NEWS: Add Renesas RL78.

	* doc/Makefile.am (c-rl78.texi): New.
	* doc/Makefile.in: Likewise.
	* doc/all.texi: Enable it.
	* doc/as.texi: Add it.

[include]
	* dis-asm.h (print_insn_rl78): Declare.

[include/elf]
	* common.h (EM_RL78, EM_78K0R): New.
	* rl78.h: New.

[include/opcode]
	* rl78.h: New file.

[ld]
	* Makefile.am (ALL_EMULATION_SOURCES): Add eelf32rl78.c.
	(+eelf32rl78.c): New rule.
	* Makefile.in: Regenerate.
	* configure.tgt: Add rl78-*-* case.
	* emulparams/elf32rl78.sh: New file.
	* NEWS: Mention addition of Renesas RL78 support.

[opcodes]
	* Makefile.am (TARGET_LIBOPCODES_CFILES): Add rl78-decode.c and
	rl78-dis.c.
	(MAINTAINERCLEANFILES): Add rl78-decode.c.
	(rl78-decode.c): New rule, built from rl78-decode.opc and opc2c.
	* Makefile.in: Regenerate.
	* configure.in: Add bfd_rl78_arch case.
	* configure: Regenerate.
	* disassemble.c: Define ARCH_rl78.
	(disassembler): Add ARCH_rl78 case.
	* rl78-decode.c: New file.
	* rl78-decode.opc: New file.
	* rl78-dis.c: New file.
@
text
@d483 1
d1984 4
@


1.306
log
@bfd:
	* Makefile.am (ALL_MACHINES): Add cpu-epiphany.lo .
	(ALL_MACHINES_CFILES): Add cpu-epiphany.c .
	(BFD32_BACKENDS): Add elf32-epiphany.lo .
	(BFD32_BACKENDS_CFILES): Add elf32-epiphany.c .
	* Makefile.in, bfd-in2.h, configure, libbfd.h: Regenerate.
	* archures.c (bfd_arch_epiphany): Add.
	(bfd_mach_epiphany16, bfd_mach_epiphany32): Define.
	(bfd_epiphany_arch): Declare.
	(bfd_archures_list): Add &bfd_epiphany_arch.
	* config.bfd (epiphany-*-elf): New target case.
	* configure.in (bfd_elf32_epiphany_vec): New target vector case.
	* reloc.c (BFD_RELOC_EPIPHANY_SIMM8): New relocation.
	(BFD_RELOC_EPIPHANY_SIMM24, BFD_RELOC_EPIPHANY_HIGH): Likewise.
	(BFD_RELOC_EPIPHANY_LOW, BFD_RELOC_EPIPHANY_SIMM11): Likewise.
	(BFD_RELOC_EPIPHANY_IMM11, BFD_RELOC_EPIPHANY_IMM8): Likewise.
	* targets.c (bfd_elf32_epiphany_vec): Declare.
	(_bfd_target_vector): Add bfd_elf32_epiphany_vec.
	* po/SRC-POTFILES.in, po/bfd.pot: Regenerate.
	* cpu-epiphany.c, elf32-epiphany.c: New files.
binutils:
	* readelf.c (include "elf/epiphany.h")
	(guess_is_rela, dump_relocation): Handle EM_ADAPTEVA_EPIPHANY.
	(get_machine_name, is_32bit_abs_reloc, is_32bit_pcrel_reloc): Likewise.
	(is_16bit_abs_reloc, is_none_reloc): Likewise.
	* po/binutils.pot: Regenerate.
cpu:
	* cpu/epiphany.cpu, cpu/epiphany.opc: New files.
gas:
	* NEWS: Mention addition of Adapteva Epiphany support.
	* config/tc-epiphany.c, config/tc-epiphany.h: New files.
	* Makefile.am (TARGET_CPU_CFILES): Add config/tc-epiphany.c .
	(TARGET_CPU_HFILES): Add config/tc-epiphany.h .
	* Makefile.in, configure, doc/Makefile.in, po/POTFILES.in: Regenerate.
	* configure.in: Also set using_cgen for epiphany.
	* configure.tgt: Handle epiphany.
	* doc/Makefile.am (CPU_DOCS): Add c-epiphany.texi .
	* doc/all.texi: Set EPIPHANY.
	* doc/as.texinfo: Add EPIPHANY-specific text.
	* doc/c-epiphany.texi: New file.
	* po/gas.pot: Regenerate.
gas/testsuite:
	* gas/epiphany: New directory.
include:
	* dis-asm.h (print_insn_epiphany): Declare.
	* elf/epiphany.h: New file.
	* elf/common.h (EM_ADAPTEVA_EPIPHANY): Define.
ld:
	* NEWS: Mention addition of Adapteva Epiphany support.
	* Makefile.am (ALL_EMULATION_SOURCES): Add eelf32epiphany.c .
	(eelf32epiphany.c): New rule.
	* Makefile.in: Regenerate.
	* configure.tgt: Handle epiphany-*-elf.
	* po/ld.pot: Regenerate.
	* testsuite/ld-srec/srec.exp: xfail epiphany.
	* emulparams/elf32epiphany.sh: New file.
opcodes:
	* Makefile.am (HFILES): Add epiphany-desc.h and epiphany-opc.h .
	(TARGET_LIBOPCODES_CFILES): Add  epiphany-asm.c, epiphany-desc.c,
	epiphany-dis.c, epiphany-ibld.c and epiphany-opc.c .
	(CLEANFILES): Add stamp-epiphany.
	(EPIPHANY_DEPS): Set.  Make CGEN-generated Epiphany files depend on it.
	(stamp-epiphany): New rule.
	* Makefile.in, configure, po/POTFILES.in, po/opcodes.pot: Regenerate.
	* configure.in: Handle bfd_epiphany_arch.
	* disassemble.c (ARCH_epiphany): Define.
	(disassembler): Handle bfd_arch_epiphany.
	* epiphany-asm.c, epiphany-desc.c, epiphany-desc.h: New files.
	* epiphany-dis.c, epiphany-ibld.c, epiphany-opc.c: Likewise.
	* epiphany-opc.h: Likewise.
@
text
@d250 1
d1144 3
@


1.305
log
@Add initial Intel K1OM support.

bfd/

2011-07-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ALL_MACHINES): Add cpu-k1om.lo.
	(ALL_MACHINES_CFILES): Add cpu-k1om.c.
	* Makefile.in: Regenerated.

	* archures.c (bfd_architecture): Add bfd_arch_k1om.
	(bfd_k1om_arch): New.
	(bfd_archures_list): Add &bfd_k1om_arch.
	* bfd-in2.h: Regenerated.

	* config.bfd (targ64_selvecs): Add bfd_elf64_k1om_vec if
	bfd_elf64_x86_64_vec is supported.  Add bfd_elf64_k1om_freebsd_vec
	if bfd_elf64_x86_64_freebsd_vec is supported.
	(targ_selvecs): Likewise.

	* configure.in: Support bfd_elf64_k1om_vec and
	bfd_elf64_k1om_freebsd_vec.
	* configure: Regenerated.

	* cpu-k1om.c: New.

	* elf64-x86-64.c (elf64_k1om_elf_object_p): New.
	(bfd_elf64_k1om_vec): Likewise.
	(bfd_elf64_k1om_freebsd_vec): Likewise.

	* targets.c (bfd_elf64_k1om_vec): New.
	(bfd_elf64_k1om_freebsd_vec): Likewise.
	(_bfd_target_vector): Add bfd_elf64_k1om_vec and
	bfd_elf64_k1om_freebsd_vec.

binutils/

2011-07-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* dwarf.c (init_dwarf_regnames): Handle EM_K1OM.

	* elfedit.c (elf_machine): Support EM_K1OM.
	(elf_class): Likewise.

	* readelf.c (guess_is_rela): Handle EM_K1OM.
	(dump_relocations): Likewise.
	(get_machine_name): Likewise.
	(get_section_type_name): Likewise.
	(get_elf_section_flags): Likewise.
	(process_section_headers): Likewise.
	(get_symbol_index_type): Likewise.
	(is_32bit_abs_reloc): Likewise.
	(is_32bit_pcrel_reloc): Likewise.
	(is_64bit_abs_reloc): Likewise.
	(is_64bit_pcrel_reloc): Likewise.
	(is_none_reloc): Likewise.

	* doc/binutils.texi: Mention K1OM for elfedit.

binutils/testsuite/

2011-07-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* binutils-all/elfedit.exp: Run elfedit-4.

	* binutils-all/elfedit-4.d: New.

gas/

2011-07-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (cpu_arch): Add k1om.
	(i386_align_code): Handle PROCESSOR_K1OM.
	(check_cpu_arch_compatible): Check EM_K1OM.
	(i386_arch): Handle Intel K1OM.
	(i386_mach): Return bfd_mach_k1om for Intel K1OM.
	(i386_target_format): Return ELF_TARGET_K1OM_FORMAT for Intel
	K1OM.

	* config/tc-i386.h (ELF_TARGET_K1OM_FORMAT): New.
	(processor_type): Add PROCESSOR_K1OM.

	* doc/c-i386.texi: Document k1om.

gas/testsuite/

2011-07-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/k1om.d: New.
	* gas/i386/k1om-inval.l: Likewise.
	* gas/i386/k1om-inval.s: Likewise.

	* gas/i386/i386.exp: Run k1om-inval and k1om.

include/elf/

2011-07-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* common.h (EM_K1OM): New.

ld/

2011-07-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ALL_64_EMULATIONS): Add eelf_k1om.o and
	eelf_k1om_fbsd.o
	(eelf_k1om.c): New.
	(eelf_k1om_fbsd.c): Likewise.
	* Makefile.in: Regenerated.

	* configure.tgt (targ64_extra_emuls): Add elf_k1om if elf_x86_64
	is supported.  Add elf_k1om_fbsd if elf_x86_64_fbsd is supported.
	(targ_extra_emuls): Likewise.

	* emulparams/elf_k1om.sh: New.
	* emulparams/elf_k1om_fbsd.sh: Likewise.

ld/testsuite/

2011-07-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-x86-64/abs-k1om.d: New.
	* ld-x86-64/protected2-k1om.d: Likewise.
	* ld-x86-64/protected3-k1om.d: Likewise.

	* ld-x86-64/x86-64.exp: Run abs-k1om, protected2-k1om and
	protected3-k1om.

opcodes/

2011-07-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* configure.in: Handle bfd_k1om_arch.
	* configure: Regenerated.

	* disassemble.c (disassembler): Handle bfd_k1om_arch.

	* i386-dis.c (print_insn): Handle bfd_mach_k1om and
	bfd_mach_k1om_intel_syntax.

	* i386-gen.c (cpu_flag_init): Set CPU_UNKNOWN_FLAGS to
	~(CpuL1OM|CpuK1OM).  Add CPU_K1OM_FLAGS.
	(cpu_flags): Add CpuK1OM.

	* i386-opc.h (CpuK1OM): New.
	(i386_cpu_flags): Add cpuk1om.

	* i386-init.h: Regenerated.
	* i386-tbl.h: Likewise.
@
text
@d214 1
d994 3
@


1.304
log
@	* Makefile.am (e*.c): Sort.
	* Makefile.in: Regenerate.
@
text
@d484 2
d1986 7
@


1.303
log
@    * Makefile.am (ALL_MACHINES): Add cpu-tilegx.lo and cpu-tilepro.lo.
    (ALL_MACHINE_CFILES): Add cpu-tilegx.c and cpu-tilepro.c.
    (BFD32_BACKENDS): Add elf32-tilegx.lo, elf32-tilepro.lo,
    and elfxx-tilegx.lo.
    (BFD32_BACKENDS_CFILES): Add elf32-tilegx.c elf32-tilepro.c, and
    elfxx-tilegx.c.
    (BFD64_BACKENDS): Add elf64-tilegx.lo.
    (BFD64_BACKENDS_CFILES): Add elf64-tilegx.c.
    * Makefile.in: Regenerate.
    * arctures.c (bfd_architecture): Define bfd_arch_tilepro,
    bfd_arch_tilegx, bfd_mach_tilepro, bfd_mach_tilegx.
    (bfd_arch_info): Add bfd_tilegx_arch, bfd_tilepro_arch.
    (bfd_archures_list): Add bfd_tilegx_arch, bfd_tilepro_arch.
    bfd-in2.h: Regenerate.
    * config.bfd: Handle tilegx-*-* and tilepro-*-*.
    * configure.in: Handle bfd_elf32_tilegx_vec, bfd_elf32_tilepro_vec,
    and bfd_elf64_tilegx_vec.
    * configure: Regenerate.
    * elf-bfd.h (enum elf_target_id): Define TILEGX_ELF_DATA and
    TILEPRO_ELF_DATA.
    * libbfd.h: Regenerate.
    * reloc.c: Add BFD_RELOC_TILEPRO_{COPY, GLOB_DAT, JMP_SLOT,
    RELATIVE, BROFF_X1, JOFFLONG_X1, JOFFLONG_X1_PLT, IMM8_X0,
    IMM8_Y0, IMM8_X1, IMM8_Y1, DEST_IMM8_X1, MT_IMM15_X1, MF_IMM15_X1,
    IMM16_X0, IMM16_X1, IMM16_X0_LO, IMM16_X1_LO, IMM16_X0_HI,
    IMM16_X1_HI, IMM16_X0_HA, IMM16_X1_HA, IMM16_X0_PCREL,
    IMM16_X1_PCREL, IMM16_X0_LO_PCREL, IMM16_X1_LO_PCREL,
    IMM16_X0_HI_PCREL, IMM16_X1_HI_PCREL, IMM16_X0_HA_PCREL,
    IMM16_X1_HA_PCREL, IMM16_X0_GOT, IMM16_X1_GOT, IMM16_X0_GOT_LO,
    IMM16_X1_GOT_LO, IMM16_X0_GOT_HI, IMM16_X1_GOT_HI,
    IMM16_X0_GOT_HA, IMM16_X1_GOT_HA, MMSTART_X0, MMEND_X0,
    MMSTART_X1, MMEND_X1, SHAMT_X0, SHAMT_X1, SHAMT_Y0, SHAMT_Y1,
    IMM16_X0_TLS_GD, IMM16_X1_TLS_GD, IMM16_X0_TLS_GD_LO,
    IMM16_X1_TLS_GD_LO, IMM16_X0_TLS_GD_HI, IMM16_X1_TLS_GD_HI,
    IMM16_X0_TLS_GD_HA, IMM16_X1_TLS_GD_HA, IMM16_X0_TLS_IE,
    IMM16_X1_TLS_IE, IMM16_X0_TLS_IE_LO, IMM16_X1_TLS_IE_LO,
    IMM16_X0_TLS_IE_HI, IMM16_X1_TLS_IE_HI, IMM16_X0_TLS_IE_HA,
    IMM16_X1_TLS_IE_HA, TLS_DTPMOD32, TLS_DTPOFF32, TLS_TPOFF32}
    Add BFD_RELOC_TILEGX_{HW0, HW1, HW2, HW3, HW0_LAST, HW1_LAST,
    HW2_LAST, COPY, GLOB_DAT, JMP_SLOT, RELATIVE, BROFF_X1,
    JUMPOFF_X1, JUMPOFF_X1_PLT, IMM8_X0, IMM8_Y0, IMM8_X1, IMM8_Y1,
    DEST_IMM8_X1, MT_IMM14_X1, MF_IMM14_X1, MMSTART_X0, MMEND_X0,
    SHAMT_X0, SHAMT_X1, SHAMT_Y0, SHAMT_Y1, IMM16_X0_HW0,
    IMM16_X1_HW0, IMM16_X0_HW1, IMM16_X1_HW1, IMM16_X0_HW2,
    IMM16_X1_HW2, IMM16_X0_HW3, IMM16_X1_HW3, IMM16_X0_HW0_LAST,
    IMM16_X1_HW0_LAST, IMM16_X0_HW1_LAST, IMM16_X1_HW1_LAST,
    IMM16_X0_HW2_LAST, IMM16_X1_HW2_LAST, IMM16_X0_HW0_PCREL,
    IMM16_X1_HW0_PCREL, IMM16_X0_HW1_PCREL, IMM16_X1_HW1_PCREL,
    IMM16_X0_HW2_PCREL, IMM16_X1_HW2_PCREL, IMM16_X0_HW3_PCREL,
    IMM16_X1_HW3_PCREL, IMM16_X0_HW0_LAST_PCREL,
    IMM16_X1_HW0_LAST_PCREL, IMM16_X0_HW1_LAST_PCREL,
    IMM16_X1_HW1_LAST_PCREL, IMM16_X0_HW2_LAST_PCREL,
    IMM16_X1_HW2_LAST_PCREL, IMM16_X0_HW0_GOT, IMM16_X1_HW0_GOT,
    IMM16_X0_HW1_GOT, IMM16_X1_HW1_GOT, IMM16_X0_HW2_GOT,
    IMM16_X1_HW2_GOT, IMM16_X0_HW3_GOT, IMM16_X1_HW3_GOT,
    IMM16_X0_HW0_LAST_GOT, IMM16_X1_HW0_LAST_GOT,
    IMM16_X0_HW1_LAST_GOT, IMM16_X1_HW1_LAST_GOT,
    IMM16_X0_HW2_LAST_GOT, IMM16_X1_HW2_LAST_GOT, IMM16_X0_HW0_TLS_GD,
    IMM16_X1_HW0_TLS_GD, IMM16_X0_HW1_TLS_GD, IMM16_X1_HW1_TLS_GD,
    IMM16_X0_HW2_TLS_GD, IMM16_X1_HW2_TLS_GD, IMM16_X0_HW3_TLS_GD,
    IMM16_X1_HW3_TLS_GD, IMM16_X0_HW0_LAST_TLS_GD,
    IMM16_X1_HW0_LAST_TLS_GD, IMM16_X0_HW1_LAST_TLS_GD,
    IMM16_X1_HW1_LAST_TLS_GD, IMM16_X0_HW2_LAST_TLS_GD,
    IMM16_X1_HW2_LAST_TLS_GD, IMM16_X0_HW0_TLS_IE,
    IMM16_X1_HW0_TLS_IE, IMM16_X0_HW1_TLS_IE, IMM16_X1_HW1_TLS_IE,
    IMM16_X0_HW2_TLS_IE, IMM16_X1_HW2_TLS_IE, IMM16_X0_HW3_TLS_IE,
    IMM16_X1_HW3_TLS_IE, IMM16_X0_HW0_LAST_TLS_IE,
    IMM16_X1_HW0_LAST_TLS_IE, IMM16_X0_HW1_LAST_TLS_IE,
    IMM16_X1_HW1_LAST_TLS_IE, IMM16_X0_HW2_LAST_TLS_IE,
    IMM16_X1_HW2_LAST_TLS_IE, TLS_DTPMOD64, TLS_DTPOFF64, TLS_TPOFF64,
    TLS_DTPMOD32, TLS_DTPOFF32, TLS_TPOFF32}
    * targets.c (bfd_elf32_tilegx_vec): Declare.
    (bfd_elf32_tilepro_vec): Declare.
    (bfd_elf64_tilegx_vec): Declare.
    (bfd_target_vector): Add bfd_elf32_tilegx_vec, bfd_elf32_tilepro_vec,
    and bfd_elf64_tilegx_vec.
    * cpu-tilegx.c: New file.
    * cpu-tilepro.c: New file.
    * elf32-tilepro.h: New file.
    * elf32-tilepro.c: New file.
    * elf32-tilegx.c: New file.
    * elf32-tilegx.h: New file.
    * elf64-tilegx.c: New file.
    * elf64-tilegx.h: New file.
    * elfxx-tilegx.c: New file.
    * elfxx-tilegx.h: New file.

	* Makefile.am (TARGET_CPU_CFILES): Add config/tc-tilegx.c and
	config/tc-tilepro.c.
	(TARGET_CPU_HFILES): Add config/tc-tilegx.h and
	config/tc-tilepro.h.
	* Makefile.in: Regenerate.
	* configure.tgt (tilepro-*-*): New.
	(tilegx-*-*): Likewise.
	* config/tc-tilegx.c: New file.
	* config/tc-tilegx.h: Likewise.
	* config/tc-tilepro.h: Likewise.
	* config/tc-tilepro.c: Likewise.
	* doc/Makefile.am (CPU_DOCS): Add c-tilegx.texi and
	c-tilepro.texi.
	* doc/Makefile.in: Regenerate.
	* doc/all.texi (TILEGX): Define.
	(TILEPRO): Define.
	* doc/as.texinfo: Add Tile-Gx and TILEPro documentation.  Include
	c-tilegx.texi and c-tilepro.texi.
	* doc/c-tilegx.texi: New.
	* doc/c-tilepro.texi: New.

        * gas/tilepro/t_constants.s: New file.
	* gas/tilepro/t_constants.d: Likewise.
	* gas/tilepro/t_insns.s: Likewise.
	* gas/tilepro/tilepro.exp: Likewise.
	* gas/tilepro/t_insns.d: Likewise.
	* gas/tilegx/tilegx.exp: Likewise.
	* gas/tilegx/t_insns.d: Likewise.
	* gas/tilegx/t_insns.s: Likewise.

	* dis-asm.h (print_insn_tilegx): Declare.
	(print_insn_tilepro): Likewise.

	* tilegx.h: New file.
	* tilepro.h: New file.

	* common.h: Add EM_TILEGX.
	* tilegx.h: New file.
	* tilepro.h: New file.

	* Makefile.am (ALL_EMULATION_SOURCES): Add eelf32tilegx.c and
	eelf32tilepro.c.
	(ALL_64_EMULATION_SOURCES): Add eelf64tilegx.c.
	(eelf32tilegx.c): New target.
	(eelf32tilepro.c): Likewise.
	(eelf64tilegx.c): Likewise.
	* Makefile.in: Regenerate.
	* configure.tgt: Handle tilegx-*-* and tilepro-*-*.
	* emulparams/elf32tilegx.sh: New file.
	* emulparams/elf64tilegx.sh: New file.
	* emulparams/elf32tilepro.sh: New file.

	* ld-elf/eh5.d: Don't run on tile*.
	* ld-srec/srec.exp: xfail on tile*.
	* ld-tilegx/external.s: New file.
	* ld-tilegx/reloc.d: New file.
	* ld-tilegx/reloc.s: New file.
	* ld-tilegx/tilegx.exp: New file.
	* ld-tilepro/external.s: New file.
	* ld-tilepro/reloc.d: New file.
	* ld-tilepro/reloc.s: New file.
	* ld-tilepro/tilepro.exp: New file.

	* Makefile.am (TARGET_LIBOPCODES_CFILES): Add tilegx-dis.c,
	tilegx-opc.c, tilepro-dis.c, and tilepro-opc.c.
	* Makefile.in: Regenerate.
	* configure.in: Handle bfd_tilegx_arch and bfd_tilepro_arch.
	* configure: Regenerate.
	* disassemble.c (disassembler): Add ARCH_tilegx and ARCH_tilepro.
	* po/POTFILES.in: Regenerate.
	* tilegx-dis.c: New file.
	* tilegx-opc.c: New file.
	* tilepro-dis.c: New file.
	* tilepro-opc.c: New file.
@
text
@d895 8
a914 16
eelf32_tic6x_elf_be.c: $(srcdir)/emulparams/elf32_tic6x_elf_be.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc  $(srcdir)/emultempl/tic6xdsbt.em \
  ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_tic6x_elf_be "$(tdir_elf32_tic6x_elf_be)"
eelf32_tic6x_elf_le.c: $(srcdir)/emulparams/elf32_tic6x_elf_le.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc  $(srcdir)/emultempl/tic6xdsbt.em \
  ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_tic6x_elf_le "$(tdir_elf32_tic6x_elf_le)"
eelf32tilegx.c: $(srcdir)/emulparams/elf32tilegx.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32tilegx "$(tdir_tilegx)"
eelf32tilepro.c: $(srcdir)/emulparams/elf32tilepro.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32tilepro "$(tdir_tilepro)"
d1140 8
@


1.302
log
@	* Makefile.am (ALL_EMULATION_SOURCES): Add eelf32am33lin.c
	Add rule to build eelf32am33lin.c
	* Makefile.in: Regenerate.
@
text
@d250 2
d481 1
d915 8
d1973 4
@


1.301
log
@	ld/
	(eelf32_tic6x_linux_be.c, eelf32_tic6x_linux_le.c,
	eelf32_tic6x_elf_be.c, eelf32_tic6x_elf_le.c): New rules.
	* Makefile.am (ALL_EMULATIONS): Add these files.
	(eelf32_tic6x_be.c, eelf32_tic6x_le.c): Depend on tic6xdsbt.em.
	* Makefile.in: Regenerated.
	* emultempl/tic6xdsbt.em (is_tic6x_target): Allow more tic6x target
	vectors.
	* emulparams/elf32_tic6x_elf_be.sh: New file.
	* emulparams/elf32_tic6x_elf_le.sh: New file.
	* emulparams/elf32_tic6x_linux_be.sh: New file.
	* emulparams/elf32_tic6x_linux_le.sh: New file.
	* configure.tgt (tic6x-*-elf, tic6x-*-uclinux): New.
	(tic6x-*-*): Replaced by these.

	ld/testsuite/
	* ld-tic6x/dsbt.ld (OUTPUT_FORMAT): Add.
	* ld-tic6x/tic6x.exp: Add OSABI tests.

	bfd/
	* config.bfd (tic6x-*-elf, tic6x-*-uclinux): New.
	(tic6x-*-*): Replaced by these.
	* elf32-tic6x.c (elf32_tic6x_set_osabi): New static function.
	(elf32_tic6x_check_relocs): Create dynamic sections if -shared.
	(elf_backend_relocs_compatible, elf_backend_post_process_headers):
	Define.
	(elf32_bed, TARGET_LITTLE_SYM, TARGET_LITTLE_NAME, TARGET_BIG_SYM,
	TARGET_BIG_NAME, ELF_OSABI): Redefine twice, and include
	"elf32-target.h" two more times.
	* configure.in: Handle bfd_elf32_tic6x_linux_be_vec,
	bfd_elf32_tic6x_linux_le_vec, bfd_elf32_tic6x_elf_be_vec and
	bfd_elf32_tic6x_elf_le_vec.
	* configure: Regenerate.
@
text
@d196 1
d912 4
@


1.300
log
@/bfd:
2011-03-22  Eric B. Weddington  <eric.weddington@@atmel.com>

	* archures.c: Add AVR XMEGA architecture information.
	* cpu-avr.c (arch_info_struct): Likewise.
	* elf32-avr.c (bfd_elf_avr_final_write_processing): Likewise.
	(elf32_avr_object_p): Likewise.

/gas:
2011-03-22  Eric B. Weddington  <eric.weddington@@atmel.com>

	* config/tc-avr.c (struct avr_opcodes_s): Add opcode field.
	(AVR_INSN): Change definition to match.
	(avr_opcodes): Likewise, change to match.
	(mcu_types): Add XMEGA architecture names and new XMEGA device names.
	(md_show_usage): Add XMEGA architecture names.
	(avr_operand): Add 'E' constraint for DES instruction of XMEGA devices.
	Add support for SPM Z+ instruction.
	* doc/c-avr.texi: Add documentation for XMEGA architectures and
	devices.

/include/opcode:
2011-03-22  Eric B. Weddington  <eric.weddington@@atmel.com>

	* avr.h (AVR_ISA_SPMX,AVR_ISA_DES,AVR_ISA_M256,AVR_ISA_XMEGA):
	New instruction set flags.
	(AVR_INSN): Add new instructions for SPM Z+, DES for XMEGA.

/ld:
2011-03-22  Eric B. Weddington  <eric.weddington@@atmel.com>

	* Makefile.am (ALL_EMULATION_SOURCES): Add AVR XMEGA architectures.
	(eavrxmega?.c): Likewise.
	* configure.tgt (targ_extra_emuls): Likewise.
	* emulparams/avrxmega1.sh: New file.
	* emulparams/avrxmega2.sh: Likewise.
	* emulparams/avrxmega3.sh: Likewise.
	* emulparams/avrxmega4.sh: Likewise.
	* emulparams/avrxmega5.sh: Likewise.
	* emulparams/avrxmega6.sh: Likewise.
	* emulparams/avrxmega7.sh: Likewise.
	* emultempl/avrelf.em (avr_elf_${EMULATION_NAME}_before_allocation):
	Add avrxmega6, avrxmega7 to list of architectures for no stubs.

/opcodes:
2011-03-22  Eric B. Weddington  <eric.weddington@@atmel.com>

	* avr-dis.c (avr_operand): Add opcode_str parameter. Check for
	post-increment to support LPM Z+ instruction. Add support for 'E'
	constraint for DES instruction.
	(print_insn_avr): Adjust calls to avr_operand. Rename variable.
@
text
@d192 4
d888 2
a889 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d892 2
a893 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d895 16
@


1.299
log
@Add AC_PROG_CXX.

2011-01-22  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (CXX): Removed.

	* configure.in: Add AC_PROG_CXX.

	* Makefile.in: Regenerated.
	* configure: Likewise.
@
text
@d166 7
d783 28
@


1.298
log
@	* Makefile.am: Sort emulation rules.
	(eelf32am33lin.c): Delete.
	(ALL_EMULATION_SOURCES): Sort, add missing entries.
	(ALL_64_EMULATION_SOURCES): Likewise.
	* Makefile.in: Regenerate.
@
text
@a94 1
CXX = g++
@


1.297
log
@bfd/
2010-12-23  Robert Millan  <rmh@@gnu.org>

	* config.bfd: Recognize mips-freebsd and mips-kfreebsd-gnu.
	* configure.host: Likewise.
	* configure.in: Support for `bfd_elf32_ntradbigmips_freebsd_vec',
	`bfd_elf32_ntradlittlemips_freebsd_vec',
	`bfd_elf32_tradbigmips_freebsd_vec',
	`bfd_elf32_tradlittlemips_freebsd_vec',
	`bfd_elf64_tradbigmips_freebsd_vec' and
	`bfd_elf64_tradlittlemips_freebsd_vec'.
	* configure: Regenerate.
	* elf32-mips.c: New target for FreeBSD support
	(same as traditional MIPS but overrides ELF_OSABI
	with ELFOSABI_FREEBSD).
	* elf64-mips.c: Likewise.
	* elfn32-mips.c: Likewise.
	* targets.c (_bfd_target_vector): Add
	`bfd_elf32_ntradbigmips_freebsd_vec',
	`bfd_elf32_ntradlittlemips_freebsd_vec',
	`bfd_elf32_tradbigmips_freebsd_vec',
	`bfd_elf32_tradlittlemips_freebsd_vec',
	`bfd_elf64_tradbigmips_freebsd_vec' and
	`bfd_elf64_tradlittlemips_freebsd_vec'.

ld/
2010-12-14  Robert Millan  <rmh@@gnu.org>

	* configure.tgt: Recognize mips-freebsd and mips-kfreebsd-gnu.

	* emulparams/elf32btsmip_fbsd.sh: New file.
	* emulparams/elf32btsmipn32_fbsd.sh: Likewise.
	* emulparams/elf32ltsmip_fbsd.sh: Likewise.
	* emulparams/elf32ltsmipn32_fbsd.sh: Likewise.
	* emulparams/elf64btsmip_fbsd.sh: Likewise.
	* emulparams/elf64ltsmip_fbsd.sh: Likewise.

	* Makefile.am: Add build rules for `eelf32btsmip_fbsd.c',
	`eelf32btsmipn32_fbsd.c', `eelf32ltsmip_fbsd.c',
	`eelf32ltsmipn32_fbsd.c', `eelf64btsmip_fbsd.c' and
	`eelf64ltsmip_fbsd.c'.
	* Makefile.in: Regenerate.

gas/
2010-12-19  Robert Millan  <rmh@@gnu.org>
	    Richard Sandiford  <rdsandiford@@googlemail.com>

	* config/tc-mips.c (ELF_TARGET): New macro.  Generates target
	names accordingly to whether TE_FreeBSD and whether TE_TMIPS
	are defined.
	(mips_target_format): Refactor code using ELF_TARGET().
	(support_64bit_objects): Likewise.

	* configure.in: Recognize mips-freebsd and mips-kfreebsd-gnu.
	* configure.tgt: Likewise.
	* configure: Regenerate.

binutils/testsuite/
	* binutils-all/readelf.exp: Handle MIPS FreeBSD targets.

gas/testsuite/
	* gas/mips/e32el-rel2.d: Accept any file format.
	* gas/mips/elf-rel.d: Likewise.
	* gas/mips/elf-rel2.d: Likewise.
	* gas/mips/elf-rel3.d: Likewise.
	* gas/mips/elfel-rel.d: Likewise.
	* gas/mips/elfel-rel2.d: Likewise.
	* gas/mips/elfel-rel3.d: Likewise.
	* gas/mips/ldstla-32-mips3-shared.d: Likewise.
	* gas/mips/ldstla-32-mips3.d: Likewise.
	* gas/mips/ldstla-32-shared.d: Likewise.
	* gas/mips/ldstla-32.d: Likewise.
	* gas/mips/ldstla-n64-shared.d: Likewise.
	* gas/mips/ldstla-n64.d: Likewise.
	* gas/mips/noat-1.d: Likewise.
	* gas/mips/set-arch.d: Likewise.
	* gas/mips/tls-o32.d: Likewise.

ld/testsuite/
	* ld-mips-elf/mips-elf-flags.exp: Handle FreeBSD targets.
	* ld-mips-elf/mips-elf.exp: Likewise.
	* ld-mips-elf/mips16-call-global.d: Accept any file format.
	* ld-mips-elf/mips16-intermix.d: Likewise.
@
text
@d131 2
a143 1
	earmelfb.c \
d147 3
a151 1
	earmelf_nbsd.c \
d153 1
a153 1
	earmelf_vxworks.c \
a154 1
	earmnbsd.c \
d157 1
a158 1
	eavr1.c \
a168 1
	eelf32_spu.c \
d178 1
a179 1
	eelf32_i860.c \
d183 1
a188 2
	eelf32cr16.c \
	eelf32cr16c.c \
d191 1
a193 1
	eelf32crx.c \
d196 3
a198 4
	eelf32ltsmip.c \
	eelf32ltsmip_fbsd.c \
	eelf32ltsmipn32.c \
	eelf32ltsmipn32_fbsd.c \
d205 1
a205 1
	eelf32moxie.c \
d208 1
d210 1
a210 1
	eelf32iq10.c \
a212 1
	eelf32l4300.c \
d217 5
d223 1
a225 1
	eelf32mb_linux.c \
d228 1
d236 1
a237 1
	eelf32ppcvxworks.c \
d240 3
a242 3
        eelf32xc16x.c \
        eelf32xc16xl.c \
        eelf32xc16xs.c \
d256 1
d258 3
d262 1
a262 2
	eh8300elf.c \
	eh8300hn.c \
d264 1
a265 4
	eh8300helf.c \
	eh8300self.c \
	eh8300hnelf.c \
	eh8300snelf.c \
d298 1
a299 1
	em32relf_linux.c \
d323 2
a325 1
	emsp430x112.c \
d328 1
d333 1
a334 1
	emsp430x1222.c \
d337 1
a338 1
	emsp430x1331.c \
d346 3
a351 3
	emsp430x1610.c \
	emsp430x1611.c \
	emsp430x1612.c \
d369 6
d378 3
a383 9
	emsp430xG437.c \
	emsp430xG438.c \
	emsp430xG439.c \
	emsp430x435.c \
	emsp430x436.c \
	emsp430x437.c \
	emsp430x447.c \
	emsp430x448.c \
	emsp430x449.c \
d392 1
a395 1
	eppclynx.c \
d400 1
a401 1
	eshlelf32.c \
a402 1
	eshlelf32_linux.c \
a403 2
	eshlelf32_nbsd.c \
	eshelf.c \
a404 1
	eshlelf_fd.c \
a405 1
	eshlelf_linux.c \
a406 1
	eshlelf_nbsd.c \
a407 1
	eshlelf_nto.c \
a409 1
	eshlelf_vxworks.c \
d412 8
d435 1
d441 1
a442 2
	eelf32frvfd.c \
	ez80.c \
d448 1
a451 10
	eshelf64.c \
	eshlelf64.c \
	eshelf64_nbsd.c \
	eshlelf64_nbsd.c \
	eelf_x86_64.c \
	eelf32_x86_64.c \
	eelf_x86_64_fbsd.c \
	eelf_x86_64_sol2.c \
	eelf_l1om.c \
	eelf_l1om_fbsd.c \
d462 2
a465 1
	eelf64hppa.c \
d467 7
d475 4
a478 3
	eelf64ppc.c \
	eelf64lppc.c \
	ehppa64linux.c
d657 15
a675 4
earmelfb.c: $(srcdir)/emulparams/armelfb.sh $(srcdir)/emulparams/armelf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armelfb "$(tdir_armelfb)"
d690 15
a715 5
earmelf_nbsd.c: $(srcdir)/emulparams/armelf_nbsd.sh \
  $(srcdir)/emulparams/armelf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armelf_nbsd "$(tdir_armelf_nbsd)"
a721 15
earmelf_vxworks.c: $(srcdir)/emulparams/armelf_vxworks.sh \
  $(srcdir)/emulparams/vxworks.sh $(srcdir)/emulparams/armelf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/vxworks.em \
  $(srcdir)/emultempl/armelf.em $(srcdir)/scripttempl/elf.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} armelf_vxworks "$(tdir_armelf)"
earmaoutb.c:	$(srcdir)/emulparams/armaoutb.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/armaout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armaoutb "$(tdir_armaoutb)"
earmaoutl.c:	$(srcdir)/emulparams/armaoutl.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/armaout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armaoutl "$(tdir_armaoutl)"
earmcoff.c:	$(srcdir)/emulparams/armcoff.sh \
  $(srcdir)/emultempl/armcoff.em $(srcdir)/scripttempl/armcoff.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armcoff "$(tdir_armcoff)"
a728 6
earm_epoc_pe.c: $(srcdir)/emulparams/arm_epoc_pe.sh \
  $(srcdir)/emultempl/pe.em $(srcdir)/scripttempl/epocpe.sc ${GEN_DEPENDS}
	${GENSCRIPTS} arm_epoc_pe "$(tdir_armpe)"
earm_wince_pe.c: $(srcdir)/emulparams/arm_wince_pe.sh \
  $(srcdir)/emultempl/pe.em $(srcdir)/scripttempl/pe.sc ${GEN_DEPENDS}
	${GENSCRIPTS} arm_wince_pe "$(tdir_armpe)"
d737 4
a744 4
eavr1.c: $(srcdir)/emulparams/avr1.sh $(srcdir)/emultempl/avrelf.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avr1 "$(tdir_avr2)"
d795 1
a795 1
ed30velf.c: $(srcdir)/emulparams/d30velf.sh \
d797 1
a797 1
	${GENSCRIPTS} d30velf "$(tdir_d30v)"
d801 1
a801 1
ed30v_e.c: $(srcdir)/emulparams/d30v_e.sh \
d803 1
a803 1
	${GENSCRIPTS} d30v_e "$(tdir_d30v)"
a806 9
eelf32bfin.c: $(srcdir)/emulparams/bfin.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/bfin.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32bfin "$(tdir_elf32bfin)" bfin
eelf32bfinfd.c: $(srcdir)/emulparams/elf32bfinfd.sh \
  $(srcdir)/emulparams/bfin.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/bfin.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32bfinfd "$(tdir_elf32bfinfd)" elf32bfinfd
d810 39
d855 6
a860 2
eelf32xc16x.c: $(srcdir)/emulparams/elf32xc16x.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
d862 4
a865 3
	${GENSCRIPTS} elf32xc16x "$(tdir_xc16x)"
eelf32xc16xl.c: $(srcdir)/emulparams/elf32xc16xl.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
d867 1
a867 105
	${GENSCRIPTS} elf32xc16xl "$(tdir_xc16xl)"
eelf32xc16xs.c: $(srcdir)/emulparams/elf32xc16xs.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32xc16xs "$(tdir_xc16xs)"
eelf32xstormy16.c: $(srcdir)/emulparams/elf32xstormy16.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/xstormy16.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32xstormy16 "$(tdir_xstormy16)"
eelf32am33lin.c: $(srcdir)/emulparams/elf32am33lin.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32am33lin "$(tdir_mn10300)"
eelf32rx.c: $(srcdir)/emulparams/elf32rx.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32rx "$(tdir_elf32rx)"
eelf32vax.c: $(srcdir)/emulparams/elf32vax.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32vax "$(tdir_elf32vax)"
eelf32xtensa.c: $(srcdir)/emulparams/elf32xtensa.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/xtensaelf.em $(INCDIR)/xtensa-config.h \
  $(BFDDIR)/elf-bfd.h $(BFDDIR)/libbfd.h $(INCDIR)/elf/xtensa.h \
  $(srcdir)/scripttempl/elfxtensa.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32xtensa "$(tdir_elf32xtensa)"
eelf32fr30.c: $(srcdir)/emulparams/elf32fr30.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32fr30 "$(tdir_fr30)"
eelf32frv.c: $(srcdir)/emulparams/elf32frv.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32frv "$(tdir_frv)"
eelf32frvfd.c: $(srcdir)/emulparams/elf32frvfd.sh \
  $(srcdir)/emulparams/elf32frv.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32frvfd "$(tdir_frv)"
eelf32moxie.c: $(srcdir)/emulparams/elf32moxie.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32moxie "$(tdir_moxie)"
eelf32mcore.c: $(srcdir)/emulparams/elf32mcore.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32mcore "$(tdir_mcore)"
eelf32mep.c: $(srcdir)/emulparams/elf32mep.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/mep.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32mep "$(tdir_mep)"
em32relf.c: $(srcdir)/emulparams/m32relf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m32relf "$(tdir_m32r)"
em32rlelf.c: $(srcdir)/emulparams/m32rlelf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m32rlelf "$(tdir_m32rlelf)"
em32relf_linux.c: $(srcdir)/emulparams/m32relf_linux.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m32relf_linux "$(tdir_m32relf_linux)"
em32rlelf_linux.c: $(srcdir)/emulparams/m32rlelf_linux.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m32rlelf_linux "$(tdir_m32rlelf_linux)"
eelf32_sparc.c: $(srcdir)/emulparams/elf32_sparc.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_sparc "$(tdir_elf32_sparc)"
eelf32_sparc_sol2.c: $(srcdir)/emulparams/elf32_sparc_sol2.sh \
  $(srcdir)/emulparams/elf32_sparc.sh \
  $(srcdir)/emulparams/solaris2.sh \
  $(srcdir)/emultempl/solaris2.em $(ELF_DEPS) \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_sparc_sol2 "$(tdir_elf32_sparc_sol2)"
eelf32_sparc_vxworks.c: $(srcdir)/emulparams/elf32_sparc_vxworks.sh \
  $(srcdir)/emulparams/vxworks.sh $(srcdir)/emulparams/elf32_sparc.sh \
  $(srcdir)/emultempl/vxworks.em $(ELF_DEPS) \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_sparc_vxworks "$(tdir_elf32_sparc_vxworks)"
eelf32_spu.c: $(srcdir)/emulparams/elf32_spu.sh $(srcdir)/emultempl/spuelf.em \
  $(srcdir)/emultempl/spu_ovl.@@OBJEXT@@_c $(srcdir)/emultempl/spu_icache.@@OBJEXT@@_c \
  ldemul-list.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_spu "$(tdir_elf32_spu)"
$(srcdir)/emultempl/spu_ovl.@@OBJEXT@@_c: @@MAINT@@ $(srcdir)/emultempl/spu_ovl.S
	if ../gas/as-new --version \
		| grep 'target.*spu' >/dev/null 2>/dev/null; then \
	  cpp -DOVLY_IRQ_SAVE $(srcdir)/emultempl/spu_ovl.S spu_ovl.s; \
	  ../gas/as-new -o spu_ovl.@@OBJEXT@@ spu_ovl.s; \
	  ../binutils/bin2c <spu_ovl.@@OBJEXT@@ >$@@; \
	fi
$(srcdir)/emultempl/spu_icache.@@OBJEXT@@_c: @@MAINT@@ $(srcdir)/emultempl/spu_icache.S
	if ../gas/as-new --version \
		| grep 'target.*spu' >/dev/null 2>/dev/null; then \
	  cpp -DOVLY_IRQ_SAVE $(srcdir)/emultempl/spu_icache.S spu_icache.s; \
	  ../gas/as-new -o spu_icache.@@OBJEXT@@ spu_icache.s; \
	  ../binutils/bin2c <spu_icache.@@OBJEXT@@ >$@@; \
	fi
eelf32_i860.c: $(srcdir)/emulparams/elf32_i860.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_i860 "$(tdir_elf32_i860)"
eelf32_i960.c: $(srcdir)/emulparams/elf32_i960.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_i960 "$(tdir_elf32_i960)"
eelf32b4300.c: $(srcdir)/emulparams/elf32b4300.sh \
  $(srcdir)/emulparams/elf32bmip.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32b4300 "$(tdir_elf32b4300)"
eelf32cr16.c: $(srcdir)/emulparams/elf32cr16.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/cr16elf.em \
  $(srcdir)/scripttempl/elf32cr16.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32cr16 "$(tdir_elf32crx)"
eelf32cr16c.c: $(srcdir)/emulparams/elf32cr16c.sh \
  $(ELF_DEPS) \
  $(srcdir)/scripttempl/elf32cr16c.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32cr16c "$(tdir_elf32cr16c)"
d871 5
a887 4
eelf32crx.c: $(srcdir)/emulparams/elf32crx.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/crxelf.em \
  $(srcdir)/scripttempl/elf32crx.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32crx "$(tdir_elf32crx)"
d896 12
a907 20
eelf32ltsmip.c: $(srcdir)/emulparams/elf32ltsmip.sh \
  $(srcdir)/emulparams/elf32btsmip.sh $(srcdir)/emulparams/elf32bmip.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ltsmip "$(tdir_elf32ltsmip)"
eelf32ltsmip_fbsd.c: $(srcdir)/emulparams/elf32ltsmip_fbsd.sh \
  $(srcdir)/emulparams/elf32btsmip.sh $(srcdir)/emulparams/elf32bmip.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ltsmip_fbsd "$(tdir_elf32ltsmip_fbsd)"
eelf32ltsmipn32.c: $(srcdir)/emulparams/elf32ltsmipn32.sh \
  $(srcdir)/emulparams/elf32btsmipn32.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ltsmipn32 "$(tdir_elf32ltsmipn32)"
eelf32ltsmipn32_fbsd.c: $(srcdir)/emulparams/elf32ltsmipn32_fbsd.sh \
  $(srcdir)/emulparams/elf32btsmipn32.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ltsmipn32_fbsd "$(tdir_elf32ltsmipn32_fbsd)"
d927 22
a948 5
eelf32bmipn32.c: $(srcdir)/emulparams/elf32bmipn32.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/irix.em $(srcdir)/emultempl/mipself.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32bmipn32 "$(tdir_elf32bmipn32)"
d954 7
a964 16
eelf32mb_linux.c: $(srcdir)/emulparams/elf32mb_linux.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32mb_linux "$(tdir_microblaze)"
eelf32microblaze.c: $(srcdir)/emulparams/elf32microblaze.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elfmicroblaze.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32microblaze "$(tdir_microblaze)"
eelf32mipswindiss.c: $(srcdir)/emulparams/elf32mipswindiss.sh $(ELF_DEPS) \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32mipswindiss "$(tdir_elf32mipswindiss)"
eelf32m32c.c: $(srcdir)/emulparams/elf32m32c.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32m32c "$(tdir_m32c)"
eelf32mt.c: $(srcdir)/emulparams/elf32mt.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32mt "$(tdir_mt)"
a982 14
eelf32ppcnto.c: $(srcdir)/emulparams/elf32ppcnto.sh \
  $(srcdir)/emulparams/elf32ppc.sh $(srcdir)/emulparams/elf32ppccommon.sh \
  $(srcdir)/emultempl/ppc32elf.em $(ELF_DEPS) \
  ldemul-list.h \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ppcnto "$(tdir_elf32ppcnto)"
eelf32ppcwindiss.c: $(srcdir)/emulparams/elf32ppcwindiss.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ppcwindiss "$(tdir_elf32ppcwindiss)"
eelf32ppcvxworks.c: $(srcdir)/emulparams/elf32ppcvxworks.sh \
  $(srcdir)/emulparams/elf32ppccommon.sh $(srcdir)/emulparams/vxworks.sh \
  $(srcdir)/emultempl/vxworks.em $(ELF_DEPS) \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ppcvxworks "$(tdir_elf32ppcvxworks)"
d988 12
a999 128
eelf32openrisc.c: $(srcdir)/emulparams/elf32openrisc.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32openrisc "$(tdir_openrisc)"
eelf32ppc.c: $(srcdir)/emulparams/elf32ppc.sh \
  $(srcdir)/emulparams/elf32ppccommon.sh $(srcdir)/emultempl/ppc32elf.em \
  ldemul-list.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ppc "$(tdir_elf32ppc)"
eelf32ppc_fbsd.c: $(srcdir)/emulparams/elf32ppc_fbsd.sh \
  $(srcdir)/emulparams/elf32ppc.sh $(srcdir)/emulparams/elf32ppccommon.sh \
  $(srcdir)/emultempl/ppc32elf.em $(ELF_DEPS) \
  ldemul-list.h \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ppc_fbsd "$(tdir_elf32ppc_fbsd)"
eelf32ppcsim.c: $(srcdir)/emulparams/elf32ppcsim.sh \
  $(srcdir)/emulparams/elf32ppc.sh $(srcdir)/emulparams/elf32ppccommon.sh \
  $(srcdir)/emultempl/ppc32elf.em $(ELF_DEPS) \
  ldemul-list.h \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ppcsim "$(tdir_elf32ppcsim)"
eelf32ppclinux.c: $(srcdir)/emulparams/elf32ppclinux.sh \
  $(srcdir)/emulparams/elf32ppc.sh $(srcdir)/emulparams/elf32ppccommon.sh \
  $(srcdir)/emultempl/ppc32elf.em $(ELF_DEPS) \
  ldemul-list.h \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ppclinux "$(tdir_elf32ppclinux)"
eelf64ppc.c: $(srcdir)/emulparams/elf64ppc.sh $(srcdir)/emultempl/ppc64elf.em \
  ldemul-list.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64ppc "$(tdir_elf64ppc)"
eelf64lppc.c: $(srcdir)/emulparams/elf64lppc.sh \
  $(srcdir)/emulparams/elf64ppc.sh $(srcdir)/emultempl/ppc64elf.em \
  ldemul-list.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64lppc "$(tdir_elf64lppc)"
eelf32i370.c: $(srcdir)/emulparams/elf32i370.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elfi370.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32i370 "$(tdir_elf32i370)"
eelf32ip2k.c: $(srcdir)/emulparams/elf32ip2k.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ip2k "$(tdir_ip2k)"
eelf32iq2000.c: $(srcdir)/emulparams/elf32iq2000.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/iq2000.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32iq2000 "$(tdir_iq2000)"
eelf32iq10.c: $(srcdir)/emulparams/elf32iq10.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/iq2000.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32iq10 "$(tdir_iq10)"
eelf32lm32.c: $(srcdir)/emulparams/elf32lm32.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32lm32 "$(tdir_elf32lm32)"
eelf32lm32fd.c: $(srcdir)/emulparams/elf32lm32fd.sh \
  $(srcdir)/emulparams/elf32lm32.sh $(ELF_DEPS) \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS} 
	${GENSCRIPTS} elf32lm32fd "$(tdir_elf32lm32fd)" 
eelf64alpha.c: $(srcdir)/emulparams/elf64alpha.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/alphaelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64alpha "$(tdir_elf64alpha)"
eelf64alpha_fbsd.c: $(srcdir)/emulparams/elf64alpha_fbsd.sh \
  $(srcdir)/emulparams/elf64alpha.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/alphaelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64alpha_fbsd "$(tdir_elf64alpha_fbsd)"
eelf64alpha_nbsd.c: $(srcdir)/emulparams/elf64alpha_nbsd.sh \
  $(srcdir)/emulparams/elf64alpha.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/alphaelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64alpha_nbsd "$(tdir_elf64alpha_nbsd)"
eelf64hppa.c: $(srcdir)/emulparams/elf64hppa.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf64hppa.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64hppa "$(tdir_elf64hppa)"
eelf64_aix.c: $(srcdir)/emulparams/elf64_aix.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_aix "$(tdir_elf64_aix)"
eelf64_ia64.c: $(srcdir)/emulparams/elf64_ia64.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/ia64elf.em \
  $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_ia64 "$(tdir_elf64_ia64)"
eelf64_ia64_fbsd.c: $(srcdir)/emulparams/elf64_ia64_fbsd.sh \
  $(srcdir)/emulparams/elf64_ia64.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/ia64elf.em \
  $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_ia64_fbsd "$(tdir_elf64_ia64_fbsd)"
eelf64_s390.c: $(srcdir)/emulparams/elf64_s390.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_s390 "$(tdir_elf64_s390)"
eelf64_sparc.c: $(srcdir)/emulparams/elf64_sparc.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_sparc "$(tdir_elf64_sparc)"
eelf64_sparc_fbsd.c: $(srcdir)/emulparams/elf64_sparc_fbsd.sh \
  $(srcdir)/emulparams/elf64_sparc.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_sparc_fbsd "$(tdir_elf64_sparc_fbsd)"
eelf64_sparc_sol2.c: $(srcdir)/emulparams/elf64_sparc_sol2.sh \
  $(srcdir)/emulparams/elf64_sparc.sh \
  $(srcdir)/emulparams/solaris2.sh \
  $(srcdir)/emultempl/solaris2.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_sparc_sol2 "$(tdir_elf64_sparc_sol2)"
eelf64bmip.c: $(srcdir)/emulparams/elf64bmip.sh \
  $(srcdir)/emulparams/elf64bmip-defs.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/irix.em $(srcdir)/emultempl/mipself.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64bmip "$(tdir_elf64bmip)"
eelf64mmix.c: $(srcdir)/emulparams/elf64mmix.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/mmix-elfnmmo.em \
  $(srcdir)/emultempl/mmixelf.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64mmix "$(tdir_elf64mmix)"
emmo.c: $(srcdir)/emulparams/mmo.sh $(srcdir)/emultempl/mmix-elfnmmo.em \
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/elf-generic.em \
  $(srcdir)/emultempl/mmo.em \
  $(srcdir)/scripttempl/mmo.sc ${GEN_DEPENDS}
	${GENSCRIPTS} mmo "$(tdir_mmo)"
eelf64btsmip.c: $(srcdir)/emulparams/elf64btsmip.sh \
  $(srcdir)/emulparams/elf64bmip-defs.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64btsmip "$(tdir_elf64btsmip)"
eelf64btsmip_fbsd.c: $(srcdir)/emulparams/elf64btsmip_fbsd.sh \
  $(srcdir)/emulparams/elf64bmip-defs.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64btsmip_fbsd "$(tdir_elf64btsmip_fbsd)"
eelf64ltsmip.c: $(srcdir)/emulparams/elf64ltsmip.sh \
  $(srcdir)/emulparams/elf64btsmip.sh $(srcdir)/emulparams/elf64bmip-defs.sh \
d1002 3
a1004 3
	${GENSCRIPTS} elf64ltsmip "$(tdir_elf64ltsmip)"
eelf64ltsmip_fbsd.c: $(srcdir)/emulparams/elf64ltsmip_fbsd.sh \
  $(srcdir)/emulparams/elf64btsmip_fbsd.sh $(srcdir)/emulparams/elf64bmip-defs.sh \
d1007 9
a1015 2
	${GENSCRIPTS} elf64ltsmip_fbsd "$(tdir_elf64ltsmip_fbsd)"
eelf_i386.c: $(srcdir)/emulparams/elf_i386.sh \
d1017 17
a1033 2
	${GENSCRIPTS} elf_i386 "$(tdir_elf_i386)"
eelf_x86_64.c: $(srcdir)/emulparams/elf_x86_64.sh \
d1035 4
a1038 2
	${GENSCRIPTS} elf_x86_64 "$(tdir_elf_x86_64)"
eelf32_x86_64.c: $(srcdir)/emulparams/elf32_x86_64.sh \
d1040 31
a1070 3
	${GENSCRIPTS} elf32_x86_64 "$(tdir_elf32_x86_64)"
eelf_x86_64_fbsd.c: $(srcdir)/emulparams/elf_x86_64_fbsd.sh \
  $(srcdir)/emulparams/elf_x86_64.sh \
d1072 5
a1076 5
	${GENSCRIPTS} elf_x86_64_fbsd "$(tdir_elf_x86_64_fbsd)"
eelf_x86_64_sol2.c: $(srcdir)/emulparams/elf_x86_64_sol2.sh \
  $(srcdir)/emulparams/elf_x86_64.sh \
  $(srcdir)/emulparams/solaris2.sh \
  $(srcdir)/emultempl/solaris2.em \
d1078 23
a1100 2
	${GENSCRIPTS} elf_x86_64_sol2 "$(tdir_elf_x86_64_sol2)"
eelf_l1om.c: $(srcdir)/emulparams/elf_l1om.sh \
d1102 1
a1102 5
	${GENSCRIPTS} elf_l1om "$(tdir_elf_l1om)"
eelf_l1om_fbsd.c: $(srcdir)/emulparams/elf_l1om_fbsd.sh \
  $(srcdir)/emulparams/elf_l1om.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_l1om_fbsd "$(tdir_elf_l1om_fbsd)"
d1137 3
d1143 4
a1146 3
eh8300s.c: $(srcdir)/emulparams/h8300s.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/h8300s.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300s "$(tdir_h8300s)"
d1150 1
a1150 13
eh8300sn.c: $(srcdir)/emulparams/h8300sn.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/h8300sn.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300sn "$(tdir_h8300sn)"
eh8300sx.c: $(srcdir)/emulparams/h8300sx.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/h8300sx.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300sx "$(tdir_h8300sx)"
eh8300sxn.c: $(srcdir)/emulparams/h8300sxn.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/h8300sxn.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300sxn "$(tdir_h8300sxn)"
eh8300elf.c: $(srcdir)/emulparams/h8300elf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300elf "$(tdir_h8300elf)"
eh8300helf.c: $(srcdir)/emulparams/h8300helf.sh \
d1153 4
a1156 1
	${GENSCRIPTS} h8300helf "$(tdir_h8300helf)"
d1161 3
a1163 4
eh8300hnelf.c: $(srcdir)/emulparams/h8300hnelf.sh \
  $(srcdir)/emulparams/h8300elf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300hnelf "$(tdir_h8300hnelf)"
d1168 3
d1175 3
a1219 3
ehppa64linux.c: $(srcdir)/emulparams/hppa64linux.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} hppa64linux "$(tdir_hppa64linux)"
d1271 12
d1358 3
a1364 3
emn10200.c: $(srcdir)/emulparams/mn10200.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} mn10200 "$(tdir_mn10200)"
a1368 4
emsp430x112.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x112 "$(tdir_msp430x112)" msp430all
d1377 4
d1397 4
a1404 4
emsp430x1222.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1222 "$(tdir_msp430x1222)" msp430all
d1413 4
a1420 4
emsp430x1331.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1331 "$(tdir_msp430x1331)" msp430all
d1449 12
a1472 12
emsp430x1610.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1610 "$(tdir_msp430x1610)" msp430all
emsp430x1611.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1611 "$(tdir_msp430x1611)" msp430all
emsp430x1612.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1612 "$(tdir_msp430x1612)" msp430all
d1540 25
a1564 1
	${GENSCRIPTS} msp430x417 "$(tdir_msp430x417)" msp430all
a1576 12
emsp430xW423.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430xW423 "$(tdir_msp430xW423)" msp430all
emsp430xW425.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430xW425 "$(tdir_msp430xW425)" msp430all
emsp430xW427.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430xW427 "$(tdir_msp430xW427)" msp430all
d1589 1
a1589 1
emsp430x435.c: $(srcdir)/emulparams/msp430all.sh \
d1592 2
a1593 2
	${GENSCRIPTS} msp430x435 "$(tdir_msp430x435)" msp430all
emsp430x436.c: $(srcdir)/emulparams/msp430all.sh \
d1596 2
a1597 2
	${GENSCRIPTS} msp430x436 "$(tdir_msp430x436)" msp430all
emsp430x437.c: $(srcdir)/emulparams/msp430all.sh \
d1600 1
a1600 13
	${GENSCRIPTS} msp430x437 "$(tdir_msp430x437)" msp430all
emsp430x447.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x447 "$(tdir_msp430x447)" msp430all
emsp430x448.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x448 "$(tdir_msp430x448)" msp430all
emsp430x449.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x449 "$(tdir_msp430x449)" msp430all
d1626 3
a1637 3
eppclynx.c: $(srcdir)/emulparams/ppclynx.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} ppclynx "$(tdir_ppclynx)"
a1671 7
eshelf64.c: $(srcdir)/emulparams/shelf64.sh $(srcdir)/emulparams/shelf32.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shelf64 "$(tdir_shelf64)"
eshelf64_nbsd.c: $(srcdir)/emulparams/shelf64_nbsd.sh \
  $(srcdir)/emulparams/shelf32_nbsd.sh $(srcdir)/emulparams/shelf32.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shelf64_nbsd "$(tdir_shelf64_nbsd)"
a1674 3
eshlelf_fd.c: $(srcdir)/emulparams/shlelf_fd.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf_fd "$(tdir_shlelf_fd)"
a1678 3
eshlelf_linux.c: $(srcdir)/emulparams/shlelf_linux.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf_linux "$(tdir_shlelf_linux)"
d1686 3
d1693 4
a1696 16
eshlelf_nbsd.c: $(srcdir)/emulparams/shlelf_nbsd.sh \
  $(srcdir)/emulparams/shelf_nbsd.sh \
  $(srcdir)/emulparams/shelf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf_nbsd "$(tdir_shlelf_nbsd)"
eshlelf_nto.c: $(srcdir)/emulparams/shlelf_nto.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf_nto "$(tdir_shlelf_nto)"
eshlelf_vxworks.c: $(srcdir)/emulparams/shlelf_vxworks.sh \
  $(srcdir)/emulparams/shelf_vxworks.sh $(srcdir)/emulparams/vxworks.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc $(srcdir)/emultempl/vxworks.em \
  ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf_vxworks "$(tdir_shlelf_vxworks)"
eshelf_uclinux.c: $(srcdir)/emulparams/shelf_uclinux.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shelf_uclinux "$(tdir_shelf_uclinux)"
a1700 4
eshlsymbian.c: $(srcdir)/emulparams/shlsymbian.sh \
  $(srcdir)/emulparams/shelf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf32sh-symbian.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlsymbian "$(tdir_shlelf)"
d1718 9
a1726 2
eshlelf64.c: $(srcdir)/emulparams/shlelf64.sh \
  $(srcdir)/emulparams/shelf64.sh $(srcdir)/emulparams/shelf32.sh \
d1728 2
a1729 4
	${GENSCRIPTS} shlelf64 "$(tdir_shlelf64)"
eshlelf64_nbsd.c: $(srcdir)/emulparams/shlelf64_nbsd.sh \
  $(srcdir)/emulparams/shelf64_nbsd.sh \
  $(srcdir)/emulparams/shelf32_nbsd.sh $(srcdir)/emulparams/shelf32.sh \
d1731 10
a1740 5
	${GENSCRIPTS} shlelf64_nbsd "$(tdir_shlelf64_nbsd)"
eshl.c: $(srcdir)/emulparams/shl.sh \
  $(srcdir)/emulparams/sh.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/sh.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shl "$(tdir_shl)"
d1783 3
a1797 3
ev850.c: $(srcdir)/emulparams/v850.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/v850.sc ${GEN_DEPENDS}
	${GENSCRIPTS} v850 "$(tdir_v850)"
d1812 134
@


1.296
log
@Add x86-64 ILP32 support.

bfd/

2010-12-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* archures.c (bfd_mach_x64_32): New.
	(bfd_mach_x64_32_intel_syntax): Likewise.
	* bfd-in2.h: Regenerated.

	* config.bfd (targ64_selvecs): Add bfd_elf32_x86_64_vec for
	i[3-7]86-*-linux-*.
	(targ_selvecs): Add bfd_elf32_x86_64_vec for x86_64-*-linux-*.

	* configure.in: Support bfd_elf32_x86_64_vec.
	* configure: Regenerated.

	* cpu-i386.c (bfd_x64_32_arch_intel_syntax): New.
	(bfd_x64_32_arch): Likewise.

	* elf-bfd.h (elf_append_rela): New prototype.
	(elf_append_rel): Likewise.
	(elf64_r_info): Likewise.
	(elf32_r_info): Likewise.
	(elf64_r_sym): Likewise.
	(elf32_r_sym): Likewise.

	* elf64-x86-64.c (ABI_64_P): New.
	(elf_x86_64_info_to_howto): Replace ELF64_R_TYPE with
	ELF32_R_TYPE.  Replace ELF64_ST_TYPE with ELF_ST_TYPE.
	(elf_x86_64_check_tls_transition):Likewise.
	(elf_x86_64_check_relocs): Likewise.
	(elf_x86_64_gc_mark_hook):Likewise.
	(elf_x86_64_gc_sweep_hook): Likewise.
	(elf_x86_64_relocate_section): Likewise.
	(elf_x86_64_reloc_type_class): Likewise.
	(ELF_DYNAMIC_INTERPRETER): Renamed to ...
	(ELF64_DYNAMIC_INTERPRETER): This.
	(ELF32_DYNAMIC_INTERPRETER): New.
	(elf_x86_64_link_hash_table): Add r_info, r_sym, swap_reloca_out,
	dynamic_interpreter and dynamic_interpreter_size.
	(elf_x86_64_get_local_sym_hash): Replace ELF64_R_SYM with
	htab->r_sym.  Replace ELF64_R_INFO with htab->r_info.
	(elf_x86_64_get_local_sym_hash): Likewise.
	(elf_x86_64_check_tls_transition):Likewise.
	(elf_x86_64_check_relocs): Likewise.
	(elf_x86_64_gc_mark_hook):Likewise.
	(elf_x86_64_gc_sweep_hook): Likewise.
	(elf_x86_64_relocate_section): Likewise.
	(elf_x86_64_finish_dynamic_symbol): Likewise.
	(elf_x86_64_finish_local_dynamic_symbol): Likewise.
	(elf_x86_64_link_hash_table_create): Initialize r_info, r_sym,
	swap_reloca_out, dynamic_interpreter and dynamic_interpreter_size.
	(elf_x86_64_check_relocs): Check ABI_64_P when requesting for
	PIC.
	(elf_x86_64_relocate_section): Likewise.
	(elf64_x86_64_adjust_dynamic_symbol): Replace sizeof
	(Elf64_External_Rela) with bed->s->sizeof_rela.
	(elf64_x86_64_allocate_dynrelocs): Likewise.
	(elf64_x86_64_size_dynamic_sections): Likewise.
	(elf64_x86_64_finish_dynamic_symbol): Likewise.
	(elf64_x86_64_append_rela): Removed.
	(elf32_x86_64_elf_object_p): New.
	Add bfd_elf32_x86_64_vec.

	* elf64-x86-64.c (elf64_x86_64_xxx): Renamed to ...
	(elf_x86_64_xxx): This.

	* elflink.c (bfd_elf_final_link): Check ELF file class on error.
	(elf_append_rela): New.
	(elf_append_rel): Likewise.
	(elf64_r_info): Likewise.
	(elf32_r_info): Likewise.
	(elf64_r_sym): Likewise.
	(elf32_r_sym): Likewise.

	* targets.c (bfd_elf32_x86_64_vec): New.
	(_bfd_target_vector): Add bfd_elf32_x86_64_vec.

gas/

2010-12-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (x86_elf_abi): New.
	(i386_mach): Return bfd_mach_x64_32 for ILP32.
	(OPTION_N32): Likewise.
	(md_longopts): Add "n32" for ELF.
	(md_parse_option): Handle OPTION_N32.
	(md_show_usage): Add --n32.
	(i386_target_format): Update and check x86_elf_abi.

	* config/tc-i386.h (ELF_TARGET_FORMAT32): New.

	* doc/as.texinfo: Document --n32.
	* doc/c-i386.texi: Likewise.

gas/testsuite/

2010-12-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/ilp32/lns/ilp32.exp: New.
	* gas/i386/ilp32/lns/lns-common-1.d: Likewise.
	* gas/i386/ilp32/lns/lns-duplicate.d: Likewise.

	* gas/i386/ilp32/cfi/cfi-common-1.d: New.
	* gas/i386/ilp32/cfi/cfi-common-2.d: Likewise.
	* gas/i386/ilp32/cfi/cfi-common-3.d: Likewise.
	* gas/i386/ilp32/cfi/cfi-common-4.d: Likewise.
	* gas/i386/ilp32/cfi/cfi-common-5.d: Likewise.
	* gas/i386/ilp32/cfi/cfi-common-6.d: Likewise.
	* gas/i386/ilp32/cfi/cfi-common-7.d: Likewise.
	* gas/i386/ilp32/cfi/cfi-x86_64.d: Likewise.
	* gas/i386/ilp32/cfi/ilp32.exp: Likewise.
	* gas/i386/ilp32/elf/ehopt0.d: Likewise.
	* gas/i386/ilp32/elf/equ-reloc.d: Likewise.
	* gas/i386/ilp32/elf/file.d: Likewise.
	* gas/i386/ilp32/elf/group0a.d: Likewise.
	* gas/i386/ilp32/elf/group0b.d: Likewise.
	* gas/i386/ilp32/elf/group1a.d: Likewise.
	* gas/i386/ilp32/elf/group1b.d: Likewise.
	* gas/i386/ilp32/elf/ifunc-1.d: Likewise.
	* gas/i386/ilp32/elf/ilp32.exp: Likewise.
	* gas/i386/ilp32/elf/redef.d: Likewise.
	* gas/i386/ilp32/elf/section0.d: Likewise.
	* gas/i386/ilp32/elf/section1.d: Likewise.
	* gas/i386/ilp32/elf/section3.d: Likewise.
	* gas/i386/ilp32/elf/section4.d: Likewise.
	* gas/i386/ilp32/elf/section6.d: Likewise.
	* gas/i386/ilp32/elf/section7.d: Likewise.
	* gas/i386/ilp32/elf/struct.d: Likewise.
	* gas/i386/ilp32/elf/symtab.d: Likewise.
	* gas/i386/ilp32/elf/symver.d: Likewise.

	* gas/i386/ilp32/ilp32.exp: New.
	* gas/i386/ilp32/immed64.d: Likewise.
	* gas/i386/ilp32/mixed-mode-reloc64.d: Likewise.
	* gas/i386/ilp32/reloc64.d: Likewise.
	* gas/i386/ilp32/rex.d: Likewise.
	* gas/i386/ilp32/rexw.d: Likewise.
	* gas/i386/ilp32/svme64.d: Likewise.
	* gas/i386/ilp32/x86-64-addr32.d: Likewise.
	* gas/i386/ilp32/x86-64-addr32-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-aes.d: Likewise.
	* gas/i386/ilp32/x86-64-aes-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-amdfam10.d: Likewise.
	* gas/i386/ilp32/x86-64-arch-1.d: Likewise.
	* gas/i386/ilp32/x86-64-arch-2.d: Likewise.
	* gas/i386/ilp32/x86-64-avx.d: Likewise.
	* gas/i386/ilp32/x86-64-avx-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-avx-swap.d: Likewise.
	* gas/i386/ilp32/x86-64-avx-swap-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-branch.d: Likewise.
	* gas/i386/ilp32/x86-64-cbw.d: Likewise.
	* gas/i386/ilp32/x86-64-cbw-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-clmul.d: Likewise.
	* gas/i386/ilp32/x86-64-clmul-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-crc32.d: Likewise.
	* gas/i386/ilp32/x86-64-crc32-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-crx.d: Likewise.
	* gas/i386/ilp32/x86-64-crx-suffix.d: Likewise.
	* gas/i386/ilp32/x86-64.d: Likewise.
	* gas/i386/ilp32/x86-64-disp.d: Likewise.
	* gas/i386/ilp32/x86-64-disp-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-drx.d: Likewise.
	* gas/i386/ilp32/x86-64-drx-suffix.d: Likewise.
	* gas/i386/ilp32/x86-64-ept.d: Likewise.
	* gas/i386/ilp32/x86-64-ept-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-fma4.d: Likewise.
	* gas/i386/ilp32/x86-64-fma.d: Likewise.
	* gas/i386/ilp32/x86-64-fma-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-gidt.d: Likewise.
	* gas/i386/ilp32/x86-64-ifunc.d: Likewise.
	* gas/i386/ilp32/x86-64-intel64.d: Likewise.
	* gas/i386/ilp32/x86-64-io.d: Likewise.
	* gas/i386/ilp32/x86-64-io-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-io-suffix.d: Likewise.
	* gas/i386/ilp32/x86-64-localpic.d: Likewise.
	* gas/i386/ilp32/x86-64-mem.d: Likewise.
	* gas/i386/ilp32/x86-64-mem-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-movbe.d: Likewise.
	* gas/i386/ilp32/x86-64-movbe-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-1-core2.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-1.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-1-k8.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-1-nocona.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-1-pentium.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-2.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-3.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-4-core2.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-4.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-4-k8.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-5.d: Likewise.
	* gas/i386/ilp32/x86-64-nops-5-k8.d: Likewise.
	* gas/i386/ilp32/x86-64-nops.d: Likewise.
	* gas/i386/ilp32/x86-64-opcode.d: Likewise.
	* gas/i386/ilp32/x86-64-opcode-inval.d: Likewise.
	* gas/i386/ilp32/x86-64-opcode-inval-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-opts.d: Likewise.
	* gas/i386/ilp32/x86-64-opts-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-pcrel.d: Likewise.
	* gas/i386/ilp32/x86-64-reg.d: Likewise.
	* gas/i386/ilp32/x86-64-reg-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-rep.d: Likewise.
	* gas/i386/ilp32/x86-64-rep-suffix.d: Likewise.
	* gas/i386/ilp32/x86-64-rip.d: Likewise.
	* gas/i386/ilp32/x86-64-rip-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-sib.d: Likewise.
	* gas/i386/ilp32/x86-64-sib-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-simd.d: Likewise.
	* gas/i386/ilp32/x86-64-simd-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-simd-suffix.d: Likewise.
	* gas/i386/ilp32/x86-64-sse2avx.d: Likewise.
	* gas/i386/ilp32/x86-64-sse2avx-opts.d: Likewise.
	* gas/i386/ilp32/x86-64-sse2avx-opts-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-sse3.d: Likewise.
	* gas/i386/ilp32/x86-64-sse4_1.d: Likewise.
	* gas/i386/ilp32/x86-64-sse4_1-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-sse4_2.d: Likewise.
	* gas/i386/ilp32/x86-64-sse4_2-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-sse-check.d: Likewise.
	* gas/i386/ilp32/x86-64-sse-check-none.d: Likewise.
	* gas/i386/ilp32/x86-64-sse-check-warn.d: Likewise.
	* gas/i386/ilp32/x86-64-sse-noavx.d: Likewise.
	* gas/i386/ilp32/x86-64-ssse3.d: Likewise.
	* gas/i386/ilp32/x86-64-stack.d: Likewise.
	* gas/i386/ilp32/x86-64-stack-intel.d: Likewise.
	* gas/i386/ilp32/x86-64-stack-suffix.d: Likewise.
	* gas/i386/ilp32/x86-64-unwind.d: Likewise.
	* gas/i386/ilp32/x86-64-vmx.d: Likewise.
	* gas/i386/ilp32/x86-64-xsave.d: Likewise.
	* gas/i386/ilp32/x86-64-xsave-intel.d: Likewise.

ld/

2010-12-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* emulparams/elf32_x86_64.sh: New.

	* configure.tgt (targ64_extra_emuls): Add elf32_x86_64 for
	i[3-7]86-*-linux-*.
	(targ_extra_libpath): Likewise.
	(targ_extra_emuls): Add elf32_x86_64 for x86_64-*-linux-*.
	(targ_extra_libpath): Likewise.

	* Makefile.am (ALL_64_EMULATION_SOURCES): Add eelf32_x86_64.c.
	(eelf32_x86_64.c): New.
	* Makefile.in: Regenerated.

opcodes/

2010-12-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* i386-dis.c (print_insn): Support bfd_mach_x64_32 and
	bfd_mach_x64_32_intel_syntax.
@
text
@d192 1
d195 1
d197 1
d199 1
d463 1
d465 1
d941 4
d953 4
d962 5
d972 5
d1184 5
d1194 5
@


1.295
log
@Add SORT_BY_INIT_PRIORITY.

bfd/

2010-12-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* elf.c (_bfd_elf_new_section_hook): Special handling for
	.init_array/.fini_array output sections.

ld/

2010-12-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (GENSCRIPTS): Add @@enable_initfini_array@@.

	* NEWS: Mention SORT_BY_INIT_PRIORITY.

	* configure.in: Add AC_CANONICAL_BUILD.
	Add --enable-initfini-array.

	* genscripts.sh (ENABLE_INITFINI_ARRAY): New.

	* ld.h (sort_type): Add by_init_priority.

	* ld.texinfo: Document SORT_BY_INIT_PRIORITY.

	* ldgram.y (SORT_BY_INIT_PRIORITY): New.
	(wildcard_spec): Handle SORT_BY_INIT_PRIORITY.

	* ldlang.c (get_init_priority): New.
	(compare_section): Use get_init_priority for by_init_priority.

	* ldlex.l (SORT_BY_INIT_PRIORITY): New.

	* scripttempl/elf.sc: Support ENABLE_INITFINI_ARRAY.

	* Makefile.in: Regenerated.
	* aclocal.m4: Regenerated.
	* config.in: Likewise.
	* configure: Likewise.

ld/testsuite/

2010-12-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-elf/elf.exp (array_tests): Add init-mixed.
	(array_tests_static): Likewise.
	Also delete tmpdir/init-mixed.

	* ld-elf/init-mixed.c: New.
	* ld-elf/init-mixed.out: Likewise.
@
text
@d445 1
d1171 3
@


1.294
log
@blackfin: add support for L1 code/data flags

Add new linker options for marking programs to load into L1 memory
at runtime.  This needs new EF flag bits, so declare them.

Signed-off-by: Jie Zhang <jie.zhang@@analog.com>
Signed-off-by: Mike Frysinger <vapier@@gentoo.org>
@
text
@d614 1
a614 1
GENSCRIPTS = LIB_PATH='${LIB_PATH}' $(SHELL) $(srcdir)/genscripts.sh "${srcdir}" "${libdir}" "${prefix}" "${exec_prefix}" @@host@@ @@target@@ @@target_alias@@ "@@EMULATION_LIBPATH@@" "@@NATIVE_LIB_DIRS@@" @@use_sysroot@@
@


1.293
log
@	* Makefile.am (eelf64hppa.c): Correct dependencies.
	* Makefile.in: Regenerate.
@
text
@d794 1
a794 1
  $(ELF_DEPS) \
d797 3
a799 2
eelf32bfinfd.c: $(srcdir)/emulparams/elf32bfinfd.sh $(srcdir)/emulparams/bfin.sh \
  $(ELF_DEPS) \
@


1.293.2.1
log
@backport from mainline
@
text
@d95 1
a130 2
	eaix5ppc.c \
	eaix5rs6.c \
d142 1
a145 3
	earmelf_nbsd.c \
	earmelf_vxworks.c \
	earmelfb.c \
d148 1
d150 2
a152 1
	earmnto.c \
d155 1
a156 1
	eavr2.c \
d167 1
d177 1
a178 1
	eelf32_i960.c \
a181 1
	eelf32_spu.c \
d187 2
a190 1
	eelf32bsmip.c \
d192 1
d194 2
a195 3
	eelf32cr16.c \
	eelf32cr16c.c \
	eelf32crx.c \
d202 1
a202 1
	eelf32frvfd.c \
d205 1
a206 2
	eelf32iq2000.c \
	eelf32l4300.c \
d209 1
a213 3
	eelf32lsmip.c \
	eelf32ltsmip.c \
	eelf32ltsmipn32.c \
a214 1
	eelf32mb_linux.c \
d217 1
a219 1
	eelf32moxie.c \
d227 1
a228 1
	eelf32ppcwindiss.c \
d231 3
a233 3
	eelf32xc16x.c \
	eelf32xc16xl.c \
	eelf32xc16xs.c \
d247 2
d250 3
a252 1
	eh8300h.c \
d254 1
a254 1
	eh8300hn.c \
a255 3
	eh8300s.c \
	eh8300self.c \
	eh8300sn.c \
a256 1
	eh8300sx.c \
d289 1
a290 1
	em32rlelf.c \
a313 2
	emn10200.c \
	emn10300.c \
d315 1
a317 1
	emsp430x112.c \
d322 1
a323 1
	emsp430x123.c \
d326 1
a327 1
	emsp430x135.c \
d335 3
a340 3
	emsp430x167.c \
	emsp430x168.c \
	emsp430x169.c \
d358 9
a372 9
	emsp430xE423.c \
	emsp430xE425.c \
	emsp430xE427.c \
	emsp430xG437.c \
	emsp430xG438.c \
	emsp430xG439.c \
	emsp430xW423.c \
	emsp430xW425.c \
	emsp430xW427.c \
a380 1
	eppclynx.c \
d384 1
a388 1
	eshelf.c \
d390 1
d392 1
d394 2
d397 1
d399 1
d401 1
d403 1
d406 1
a408 8
	eshlelf32.c \
	eshlelf32_linux.c \
	eshlelf32_nbsd.c \
	eshlelf_fd.c \
	eshlelf_linux.c \
	eshlelf_nbsd.c \
	eshlelf_nto.c \
	eshlelf_vxworks.c \
a423 1
	ev850.c \
d429 2
a431 1
	ez8001.c \
d440 9
d458 1
a459 2
	eelf64lppc.c \
	eelf64ltsmip.c \
d461 1
d463 2
a464 11
	eelf_l1om.c \
	eelf_l1om_fbsd.c \
	eelf_x86_64.c \
	eelf_x86_64_fbsd.c \
	eelf_x86_64_sol2.c \
	ehppa64linux.c \
	emmo.c \
	eshelf64.c \
	eshelf64_nbsd.c \
	eshlelf64.c \
	eshlelf64_nbsd.c
a642 15
earm_epoc_pe.c: $(srcdir)/emulparams/arm_epoc_pe.sh \
  $(srcdir)/emultempl/pe.em $(srcdir)/scripttempl/epocpe.sc ${GEN_DEPENDS}
	${GENSCRIPTS} arm_epoc_pe "$(tdir_armpe)"
earm_wince_pe.c: $(srcdir)/emulparams/arm_wince_pe.sh \
  $(srcdir)/emultempl/pe.em $(srcdir)/scripttempl/pe.sc ${GEN_DEPENDS}
	${GENSCRIPTS} arm_wince_pe "$(tdir_armpe)"
earmaoutb.c:	$(srcdir)/emulparams/armaoutb.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/armaout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armaoutb "$(tdir_armaoutb)"
earmaoutl.c:	$(srcdir)/emulparams/armaoutl.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/armaout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armaoutl "$(tdir_armaoutl)"
earmcoff.c:	$(srcdir)/emulparams/armcoff.sh \
  $(srcdir)/emultempl/armcoff.em $(srcdir)/scripttempl/armcoff.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armcoff "$(tdir_armcoff)"
d647 4
a664 15
earmelf_nbsd.c: $(srcdir)/emulparams/armelf_nbsd.sh \
  $(srcdir)/emulparams/armelf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armelf_nbsd "$(tdir_armelf_nbsd)"
earmelf_vxworks.c: $(srcdir)/emulparams/armelf_vxworks.sh \
  $(srcdir)/emulparams/vxworks.sh $(srcdir)/emulparams/armelf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/vxworks.em \
  $(srcdir)/emultempl/armelf.em $(srcdir)/scripttempl/elf.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} armelf_vxworks "$(tdir_armelf)"
earmelfb.c: $(srcdir)/emulparams/armelfb.sh $(srcdir)/emulparams/armelf.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armelfb "$(tdir_armelfb)"
d676 5
d687 15
d709 6
d723 4
a730 4
eavr2.c: $(srcdir)/emulparams/avr2.sh $(srcdir)/emultempl/avrelf.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avr2 "$(tdir_avr2)"
d781 1
a781 1
ed30v_e.c: $(srcdir)/emulparams/d30v_e.sh \
d783 1
a783 1
	${GENSCRIPTS} d30v_e "$(tdir_d30v)"
d787 1
a787 1
ed30velf.c: $(srcdir)/emulparams/d30velf.sh \
d789 1
a789 1
	${GENSCRIPTS} d30velf "$(tdir_d30v)"
d793 8
a803 39
eelf32_i860.c: $(srcdir)/emulparams/elf32_i860.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_i860 "$(tdir_elf32_i860)"
eelf32_i960.c: $(srcdir)/emulparams/elf32_i960.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_i960 "$(tdir_elf32_i960)"
eelf32_sparc.c: $(srcdir)/emulparams/elf32_sparc.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_sparc "$(tdir_elf32_sparc)"
eelf32_sparc_sol2.c: $(srcdir)/emulparams/elf32_sparc_sol2.sh \
  $(srcdir)/emulparams/elf32_sparc.sh \
  $(srcdir)/emulparams/solaris2.sh \
  $(srcdir)/emultempl/solaris2.em $(ELF_DEPS) \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_sparc_sol2 "$(tdir_elf32_sparc_sol2)"
eelf32_sparc_vxworks.c: $(srcdir)/emulparams/elf32_sparc_vxworks.sh \
  $(srcdir)/emulparams/vxworks.sh $(srcdir)/emulparams/elf32_sparc.sh \
  $(srcdir)/emultempl/vxworks.em $(ELF_DEPS) \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_sparc_vxworks "$(tdir_elf32_sparc_vxworks)"
eelf32_spu.c: $(srcdir)/emulparams/elf32_spu.sh $(srcdir)/emultempl/spuelf.em \
  $(srcdir)/emultempl/spu_ovl.@@OBJEXT@@_c $(srcdir)/emultempl/spu_icache.@@OBJEXT@@_c \
  ldemul-list.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_spu "$(tdir_elf32_spu)"
$(srcdir)/emultempl/spu_ovl.@@OBJEXT@@_c: @@MAINT@@ $(srcdir)/emultempl/spu_ovl.S
	if ../gas/as-new --version \
		| grep 'target.*spu' >/dev/null 2>/dev/null; then \
	  cpp -DOVLY_IRQ_SAVE $(srcdir)/emultempl/spu_ovl.S spu_ovl.s; \
	  ../gas/as-new -o spu_ovl.@@OBJEXT@@ spu_ovl.s; \
	  ../binutils/bin2c <spu_ovl.@@OBJEXT@@ >$@@; \
	fi
$(srcdir)/emultempl/spu_icache.@@OBJEXT@@_c: @@MAINT@@ $(srcdir)/emultempl/spu_icache.S
	if ../gas/as-new --version \
		| grep 'target.*spu' >/dev/null 2>/dev/null; then \
	  cpp -DOVLY_IRQ_SAVE $(srcdir)/emultempl/spu_icache.S spu_icache.s; \
	  ../gas/as-new -o spu_icache.@@OBJEXT@@ spu_icache.s; \
	  ../binutils/bin2c <spu_icache.@@OBJEXT@@ >$@@; \
	fi
d810 2
a811 6
eelf32b4300.c: $(srcdir)/emulparams/elf32b4300.sh \
  $(srcdir)/emulparams/elf32bmip.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32b4300 "$(tdir_elf32b4300)"
eelf32bfin.c: $(srcdir)/emulparams/bfin.sh \
  $(ELF_DEPS) \
d813 106
a918 2
	${GENSCRIPTS} elf32bfin "$(tdir_elf32bfin)" bfin
eelf32bfinfd.c: $(srcdir)/emulparams/elf32bfinfd.sh $(srcdir)/emulparams/bfin.sh \
d920 2
a921 2
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32bfinfd "$(tdir_elf32bfinfd)" elf32bfinfd
a924 5
eelf32bmipn32.c: $(srcdir)/emulparams/elf32bmipn32.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/irix.em $(srcdir)/emultempl/mipself.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32bmipn32 "$(tdir_elf32bmipn32)"
d933 4
d941 10
a950 12
eelf32cr16.c: $(srcdir)/emulparams/elf32cr16.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/cr16elf.em \
  $(srcdir)/scripttempl/elf32cr16.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32cr16 "$(tdir_elf32crx)"
eelf32cr16c.c: $(srcdir)/emulparams/elf32cr16c.sh \
  $(ELF_DEPS) \
  $(srcdir)/scripttempl/elf32cr16c.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32cr16c "$(tdir_elf32cr16c)"
eelf32crx.c: $(srcdir)/emulparams/elf32crx.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/crxelf.em \
  $(srcdir)/scripttempl/elf32crx.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32crx "$(tdir_elf32crx)"
d970 5
a974 22
eelf32fr30.c: $(srcdir)/emulparams/elf32fr30.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32fr30 "$(tdir_fr30)"
eelf32frv.c: $(srcdir)/emulparams/elf32frv.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32frv "$(tdir_frv)"
eelf32frvfd.c: $(srcdir)/emulparams/elf32frvfd.sh \
  $(srcdir)/emulparams/elf32frv.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32frvfd "$(tdir_frv)"
eelf32i370.c: $(srcdir)/emulparams/elf32i370.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elfi370.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32i370 "$(tdir_elf32i370)"
eelf32ip2k.c: $(srcdir)/emulparams/elf32ip2k.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ip2k "$(tdir_ip2k)"
eelf32iq10.c: $(srcdir)/emulparams/elf32iq10.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/iq2000.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32iq10 "$(tdir_iq10)"
eelf32iq2000.c: $(srcdir)/emulparams/elf32iq2000.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/iq2000.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32iq2000 "$(tdir_iq2000)"
a979 7
eelf32lm32.c: $(srcdir)/emulparams/elf32lm32.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32lm32 "$(tdir_elf32lm32)"
eelf32lm32fd.c: $(srcdir)/emulparams/elf32lm32fd.sh \
  $(srcdir)/emulparams/elf32lm32.sh $(ELF_DEPS) \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS} 
	${GENSCRIPTS} elf32lm32fd "$(tdir_elf32lm32fd)" 
d984 16
d1018 14
a1036 35
eelf32ltsmip.c: $(srcdir)/emulparams/elf32ltsmip.sh \
  $(srcdir)/emulparams/elf32btsmip.sh $(srcdir)/emulparams/elf32bmip.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ltsmip "$(tdir_elf32ltsmip)"
eelf32ltsmipn32.c: $(srcdir)/emulparams/elf32ltsmipn32.sh \
  $(srcdir)/emulparams/elf32btsmipn32.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ltsmipn32 "$(tdir_elf32ltsmipn32)"
eelf32m32c.c: $(srcdir)/emulparams/elf32m32c.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32m32c "$(tdir_m32c)"
eelf32mb_linux.c: $(srcdir)/emulparams/elf32mb_linux.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32mb_linux "$(tdir_microblaze)"
eelf32mcore.c: $(srcdir)/emulparams/elf32mcore.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32mcore "$(tdir_mcore)"
eelf32mep.c: $(srcdir)/emulparams/elf32mep.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/mep.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32mep "$(tdir_mep)"
eelf32microblaze.c: $(srcdir)/emulparams/elf32microblaze.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elfmicroblaze.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32microblaze "$(tdir_microblaze)"
eelf32mipswindiss.c: $(srcdir)/emulparams/elf32mipswindiss.sh $(ELF_DEPS) \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32mipswindiss "$(tdir_elf32mipswindiss)"
eelf32moxie.c: $(srcdir)/emulparams/elf32moxie.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32moxie "$(tdir_moxie)"
eelf32mt.c: $(srcdir)/emulparams/elf32mt.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32mt "$(tdir_mt)"
d1051 6
d1060 38
a1097 1
  ldemul-list.h \
d1099 4
a1102 5
	${GENSCRIPTS} elf32ppclinux "$(tdir_elf32ppclinux)"
eelf32ppcnto.c: $(srcdir)/emulparams/elf32ppcnto.sh \
  $(srcdir)/emulparams/elf32ppc.sh $(srcdir)/emulparams/elf32ppccommon.sh \
  $(srcdir)/emultempl/ppc32elf.em $(ELF_DEPS) \
  ldemul-list.h \
d1104 10
a1113 5
	${GENSCRIPTS} elf32ppcnto "$(tdir_elf32ppcnto)"
eelf32ppcsim.c: $(srcdir)/emulparams/elf32ppcsim.sh \
  $(srcdir)/emulparams/elf32ppc.sh $(srcdir)/emulparams/elf32ppccommon.sh \
  $(srcdir)/emultempl/ppc32elf.em $(ELF_DEPS) \
  ldemul-list.h \
d1115 5
a1119 4
	${GENSCRIPTS} elf32ppcsim "$(tdir_elf32ppcsim)"
eelf32ppcvxworks.c: $(srcdir)/emulparams/elf32ppcvxworks.sh \
  $(srcdir)/emulparams/elf32ppccommon.sh $(srcdir)/emulparams/vxworks.sh \
  $(srcdir)/emultempl/vxworks.em $(ELF_DEPS) \
d1121 9
a1129 2
	${GENSCRIPTS} elf32ppcvxworks "$(tdir_elf32ppcvxworks)"
eelf32ppcwindiss.c: $(srcdir)/emulparams/elf32ppcwindiss.sh \
d1131 5
a1135 5
	${GENSCRIPTS} elf32ppcwindiss "$(tdir_elf32ppcwindiss)"
eelf32rx.c: $(srcdir)/emulparams/elf32rx.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32rx "$(tdir_elf32rx)"
eelf32vax.c: $(srcdir)/emulparams/elf32vax.sh \
d1137 5
a1141 3
	${GENSCRIPTS} elf32vax "$(tdir_elf32vax)"
eelf32xc16x.c: $(srcdir)/emulparams/elf32xc16x.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
d1143 20
a1162 18
	${GENSCRIPTS} elf32xc16x "$(tdir_xc16x)"
eelf32xc16xl.c: $(srcdir)/emulparams/elf32xc16xl.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32xc16xl "$(tdir_xc16xl)"
eelf32xc16xs.c: $(srcdir)/emulparams/elf32xc16xs.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32xc16xs "$(tdir_xc16xs)"
eelf32xstormy16.c: $(srcdir)/emulparams/elf32xstormy16.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/xstormy16.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32xstormy16 "$(tdir_xstormy16)"
eelf32xtensa.c: $(srcdir)/emulparams/elf32xtensa.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/xtensaelf.em $(INCDIR)/xtensa-config.h \
  $(BFDDIR)/elf-bfd.h $(BFDDIR)/libbfd.h $(INCDIR)/elf/xtensa.h \
  $(srcdir)/scripttempl/elfxtensa.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32xtensa "$(tdir_elf32xtensa)"
d1166 20
a1219 3
eh8300elf.c: $(srcdir)/emulparams/h8300elf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300elf "$(tdir_h8300elf)"
d1223 3
a1225 4
eh8300helf.c: $(srcdir)/emulparams/h8300helf.sh \
  $(srcdir)/emulparams/h8300elf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300helf "$(tdir_h8300helf)"
d1229 13
a1241 1
eh8300hnelf.c: $(srcdir)/emulparams/h8300hnelf.sh \
d1244 1
a1244 4
	${GENSCRIPTS} h8300hnelf "$(tdir_h8300hnelf)"
eh8300s.c: $(srcdir)/emulparams/h8300s.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/h8300s.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300s "$(tdir_h8300s)"
d1249 4
a1252 3
eh8300sn.c: $(srcdir)/emulparams/h8300sn.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/h8300sn.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300sn "$(tdir_h8300sn)"
a1256 3
eh8300sx.c: $(srcdir)/emulparams/h8300sx.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/h8300sx.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300sx "$(tdir_h8300sx)"
a1260 3
eh8300sxn.c: $(srcdir)/emulparams/h8300sxn.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/h8300sxn.sc ${GEN_DEPENDS}
	${GENSCRIPTS} h8300sxn "$(tdir_h8300sxn)"
d1303 3
a1356 12
em32relf.c: $(srcdir)/emulparams/m32relf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m32relf "$(tdir_m32r)"
em32relf_linux.c: $(srcdir)/emulparams/m32relf_linux.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m32relf_linux "$(tdir_m32relf_linux)"
em32rlelf.c: $(srcdir)/emulparams/m32rlelf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m32rlelf "$(tdir_m32rlelf)"
em32rlelf_linux.c: $(srcdir)/emulparams/m32rlelf_linux.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m32rlelf_linux "$(tdir_m32rlelf_linux)"
a1431 3
emn10200.c: $(srcdir)/emulparams/mn10200.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} mn10200 "$(tdir_mn10200)"
d1436 3
d1443 4
a1454 4
emsp430x112.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x112 "$(tdir_msp430x112)" msp430all
d1471 4
a1478 4
emsp430x123.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x123 "$(tdir_msp430x123)" msp430all
d1487 4
a1494 4
emsp430x135.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x135 "$(tdir_msp430x135)" msp430all
d1523 12
a1546 12
emsp430x167.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x167 "$(tdir_msp430x167)" msp430all
emsp430x168.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x168 "$(tdir_msp430x168)" msp430all
emsp430x169.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x169 "$(tdir_msp430x169)" msp430all
d1602 2
a1603 26
	${GENSCRIPTS} msp430x412 "$(tdir_msp430x412)" msp430all
emsp430x413.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x413 "$(tdir_msp430x413)" msp430all
emsp430x415.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x415 "$(tdir_msp430x415)" msp430all
emsp430x417.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x417 "$(tdir_msp430x417)" msp430all
emsp430x435.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x435 "$(tdir_msp430x435)" msp430all
emsp430x436.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x436 "$(tdir_msp430x436)" msp430all
emsp430x437.c: $(srcdir)/emulparams/msp430all.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x437 "$(tdir_msp430x437)" msp430all
emsp430x447.c: $(srcdir)/emulparams/msp430all.sh \
d1606 2
a1607 2
	${GENSCRIPTS} msp430x447 "$(tdir_msp430x447)" msp430all
emsp430x448.c: $(srcdir)/emulparams/msp430all.sh \
d1610 2
a1611 2
	${GENSCRIPTS} msp430x448 "$(tdir_msp430x448)" msp430all
emsp430x449.c: $(srcdir)/emulparams/msp430all.sh \
d1614 1
a1614 1
	${GENSCRIPTS} msp430x449 "$(tdir_msp430x449)" msp430all
d1627 12
d1651 13
a1663 1
emsp430xW423.c: $(srcdir)/emulparams/msp430all.sh \
d1666 2
a1667 2
	${GENSCRIPTS} msp430xW423 "$(tdir_msp430xW423)" msp430all
emsp430xW425.c: $(srcdir)/emulparams/msp430all.sh \
d1670 2
a1671 2
	${GENSCRIPTS} msp430xW425 "$(tdir_msp430xW425)" msp430all
emsp430xW427.c: $(srcdir)/emulparams/msp430all.sh \
d1674 1
a1674 1
	${GENSCRIPTS} msp430xW427 "$(tdir_msp430xW427)" msp430all
a1699 3
eppclynx.c: $(srcdir)/emulparams/ppclynx.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} ppclynx "$(tdir_ppclynx)"
d1709 3
d1746 7
d1756 3
d1763 3
a1772 3
eshelf_uclinux.c: $(srcdir)/emulparams/shelf_uclinux.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shelf_uclinux "$(tdir_shelf_uclinux)"
d1777 16
a1792 4
eshl.c: $(srcdir)/emulparams/shl.sh \
  $(srcdir)/emulparams/sh.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/sh.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shl "$(tdir_shl)"
d1797 4
d1818 2
a1819 1
eshlelf_fd.c: $(srcdir)/emulparams/shlelf_fd.sh \
d1821 4
a1824 2
	${GENSCRIPTS} shlelf_fd "$(tdir_shlelf_fd)"
eshlelf_linux.c: $(srcdir)/emulparams/shlelf_linux.sh \
d1826 5
a1830 18
	${GENSCRIPTS} shlelf_linux "$(tdir_shlelf_linux)"
eshlelf_nbsd.c: $(srcdir)/emulparams/shlelf_nbsd.sh \
  $(srcdir)/emulparams/shelf_nbsd.sh \
  $(srcdir)/emulparams/shelf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf_nbsd "$(tdir_shlelf_nbsd)"
eshlelf_nto.c: $(srcdir)/emulparams/shlelf_nto.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf_nto "$(tdir_shlelf_nto)"
eshlelf_vxworks.c: $(srcdir)/emulparams/shlelf_vxworks.sh \
  $(srcdir)/emulparams/shelf_vxworks.sh $(srcdir)/emulparams/vxworks.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc $(srcdir)/emultempl/vxworks.em \
  ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf_vxworks "$(tdir_shlelf_vxworks)"
eshlsymbian.c: $(srcdir)/emulparams/shlsymbian.sh \
  $(srcdir)/emulparams/shelf.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf32sh-symbian.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlsymbian "$(tdir_shlelf)"
a1872 3
ev850.c: $(srcdir)/emulparams/v850.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/v850.sc ${GEN_DEPENDS}
	${GENSCRIPTS} v850 "$(tdir_v850)"
d1885 3
a1901 124
eelf32_x86_64.c: $(srcdir)/emulparams/elf32_x86_64.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_x86_64 "$(tdir_elf32_x86_64)"
eelf64_aix.c: $(srcdir)/emulparams/elf64_aix.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_aix "$(tdir_elf64_aix)"
eelf64_ia64.c: $(srcdir)/emulparams/elf64_ia64.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/ia64elf.em \
  $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_ia64 "$(tdir_elf64_ia64)"
eelf64_ia64_fbsd.c: $(srcdir)/emulparams/elf64_ia64_fbsd.sh \
  $(srcdir)/emulparams/elf64_ia64.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/ia64elf.em \
  $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_ia64_fbsd "$(tdir_elf64_ia64_fbsd)"
eelf64_s390.c: $(srcdir)/emulparams/elf64_s390.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_s390 "$(tdir_elf64_s390)"
eelf64_sparc.c: $(srcdir)/emulparams/elf64_sparc.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_sparc "$(tdir_elf64_sparc)"
eelf64_sparc_fbsd.c: $(srcdir)/emulparams/elf64_sparc_fbsd.sh \
  $(srcdir)/emulparams/elf64_sparc.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_sparc_fbsd "$(tdir_elf64_sparc_fbsd)"
eelf64_sparc_sol2.c: $(srcdir)/emulparams/elf64_sparc_sol2.sh \
  $(srcdir)/emulparams/elf64_sparc.sh \
  $(srcdir)/emulparams/solaris2.sh \
  $(srcdir)/emultempl/solaris2.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_sparc_sol2 "$(tdir_elf64_sparc_sol2)"
eelf64alpha.c: $(srcdir)/emulparams/elf64alpha.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/alphaelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64alpha "$(tdir_elf64alpha)"
eelf64alpha_fbsd.c: $(srcdir)/emulparams/elf64alpha_fbsd.sh \
  $(srcdir)/emulparams/elf64alpha.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/alphaelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64alpha_fbsd "$(tdir_elf64alpha_fbsd)"
eelf64alpha_nbsd.c: $(srcdir)/emulparams/elf64alpha_nbsd.sh \
  $(srcdir)/emulparams/elf64alpha.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/alphaelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64alpha_nbsd "$(tdir_elf64alpha_nbsd)"
eelf64bmip.c: $(srcdir)/emulparams/elf64bmip.sh \
  $(srcdir)/emulparams/elf64bmip-defs.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/irix.em $(srcdir)/emultempl/mipself.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64bmip "$(tdir_elf64bmip)"
eelf64btsmip.c: $(srcdir)/emulparams/elf64btsmip.sh \
  $(srcdir)/emulparams/elf64bmip-defs.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64btsmip "$(tdir_elf64btsmip)"
eelf64hppa.c: $(srcdir)/emulparams/elf64hppa.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf64hppa.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64hppa "$(tdir_elf64hppa)"
eelf64lppc.c: $(srcdir)/emulparams/elf64lppc.sh \
  $(srcdir)/emulparams/elf64ppc.sh $(srcdir)/emultempl/ppc64elf.em \
  ldemul-list.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64lppc "$(tdir_elf64lppc)"
eelf64ltsmip.c: $(srcdir)/emulparams/elf64ltsmip.sh \
  $(srcdir)/emulparams/elf64btsmip.sh $(srcdir)/emulparams/elf64bmip-defs.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64ltsmip "$(tdir_elf64ltsmip)"
eelf64mmix.c: $(srcdir)/emulparams/elf64mmix.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/mmix-elfnmmo.em \
  $(srcdir)/emultempl/mmixelf.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64mmix "$(tdir_elf64mmix)"
eelf64ppc.c: $(srcdir)/emulparams/elf64ppc.sh $(srcdir)/emultempl/ppc64elf.em \
  ldemul-list.h \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64ppc "$(tdir_elf64ppc)"
eelf_l1om.c: $(srcdir)/emulparams/elf_l1om.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_l1om "$(tdir_elf_l1om)"
eelf_l1om_fbsd.c: $(srcdir)/emulparams/elf_l1om_fbsd.sh \
  $(srcdir)/emulparams/elf_l1om.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_l1om_fbsd "$(tdir_elf_l1om_fbsd)"
eelf_x86_64.c: $(srcdir)/emulparams/elf_x86_64.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_x86_64 "$(tdir_elf_x86_64)"
eelf_x86_64_fbsd.c: $(srcdir)/emulparams/elf_x86_64_fbsd.sh \
  $(srcdir)/emulparams/elf_x86_64.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_x86_64_fbsd "$(tdir_elf_x86_64_fbsd)"
eelf_x86_64_sol2.c: $(srcdir)/emulparams/elf_x86_64_sol2.sh \
  $(srcdir)/emulparams/elf_x86_64.sh \
  $(srcdir)/emulparams/solaris2.sh \
  $(srcdir)/emultempl/solaris2.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_x86_64_sol2 "$(tdir_elf_x86_64_sol2)"
ehppa64linux.c: $(srcdir)/emulparams/hppa64linux.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} hppa64linux "$(tdir_hppa64linux)"
emmo.c: $(srcdir)/emulparams/mmo.sh $(srcdir)/emultempl/mmix-elfnmmo.em \
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/elf-generic.em \
  $(srcdir)/emultempl/mmo.em \
  $(srcdir)/scripttempl/mmo.sc ${GEN_DEPENDS}
	${GENSCRIPTS} mmo "$(tdir_mmo)"
eshelf64.c: $(srcdir)/emulparams/shelf64.sh $(srcdir)/emulparams/shelf32.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shelf64 "$(tdir_shelf64)"
eshelf64_nbsd.c: $(srcdir)/emulparams/shelf64_nbsd.sh \
  $(srcdir)/emulparams/shelf32_nbsd.sh $(srcdir)/emulparams/shelf32.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shelf64_nbsd "$(tdir_shelf64_nbsd)"
eshlelf64.c: $(srcdir)/emulparams/shlelf64.sh \
  $(srcdir)/emulparams/shelf64.sh $(srcdir)/emulparams/shelf32.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf64 "$(tdir_shlelf64)"
eshlelf64_nbsd.c: $(srcdir)/emulparams/shlelf64_nbsd.sh \
  $(srcdir)/emulparams/shelf64_nbsd.sh \
  $(srcdir)/emulparams/shelf32_nbsd.sh $(srcdir)/emulparams/shelf32.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shlelf64_nbsd "$(tdir_shlelf64_nbsd)"

@


1.292
log
@Applied patch series for LD plugin interface (six parts).

[PATCH] Add infrastructure for plugin API; functionality to follow.

    include/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 1/6).
	* plugin-api.h (LDPT_GNU_LD_VERSION): New ld_plugin_tag enum member.

    ld/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 1/6).
	* configure.in: Add AC_CHECKs for file io and dlfcn headers and
	functions and AC_SEARCH for -ldl.
	(enable_plugins): New shell variable set if above tests find dlopen
	functionality.
	(ENABLE_PLUGINS): Add related automake conditional.
	* configure: Regenerate.
	* config.in: Likewise.
	* Makefile.am (PLUGIN_C): Declare plugin C source file, conditional
	on ENABLE_PLUGINS being defined.
	(PLUGIN_H): Likewise for header file.
	(PLUGIN_OBJECT): Likewise for object file.
	(PLUGIN_CFLAGS): Likewise -D flag required to compile plugin support.
	(AM_CPPFLAGS): Use PLUGIN_CFLAGS.
	(CFILES): Use PLUGIN_C.
	(HFILES): Use PLUGIN_H.
	(OFILES): Use PLUGIN_OBJECT.
	(ld_new_SOURCES): Use PLUGIN_C.
	(noinst_LTLIBRARIES)[ENABLE_PLUGINS]: Declare test plugin.
	(libldtestplug_la_SOURCES)[ENABLE_PLUGINS]: Add automake definition
	for test plugin.
	(libldtestplug_la_CFLAGS)[ENABLE_PLUGINS]: Likewise.
	(libldtestplug_la_LDFLAGS)[ENABLE_PLUGINS]: Likewise.
	* Makefile.in: Regenerate.
	* sysdep.h: Include stdarg.h, unistd.h and one of fcntl.h or
	sys/file.h where available.  Include dlfcn.h when ENABLE_PLUGINS.
	(O_RDONLY): Supply default definition likewise to bfd's sysdep.h
	(O_WRONLY): Likewise.
	(O_RDWR): Likewise.
	(O_ACCMODE): Likewise.
	(O_BINARY): Likewise.
	(SEEK_SET): Likewise.
	(SEEK_CUR): Likewise.
	(SEEK_END): Likewise.
	* ldmisc.c (vfinfo): Make non-static.  Add %p format char.
	* ldmisc.h (vfinfo): Declare extern prototype.
	* lexsup.c (enum option_values)[ENABLE_PLUGINS]: Add new entries for
	OPTION_PLUGIN and OPTION_PLUGIN_OPT.
	(ld_options[])[ENABLE_PLUGINS]: Add option data for the above two.
	(parse_args)[ENABLE_PLUGINS]: Handle them, and load all plugins once
	option parsing is complete.
	* ldmain.c (main)[ENABLE_PLUGINS]: Call plugin cleanup hooks just
	after lang_finish.
	* plugin.c: New source file.
	* plugin.h: Likewise new header.
	* testplug.c: New source file.

    ld/testsuite/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 1/6).
	* ld-bootstrap/bootstrap.exp: Skip static tests also if LD plugins
	are enabled.
	* lib/ld-lib.exp (proc regexp_diff): Extend verbose debug output.
	(proc set_file_contents): Write a file with the supplied content.
	(run_ld_link_tests): Add new 'ld' action to test linker output.
	(proc check_plugin_api_available): Return true if linker under test
	supports the plugin API.
	* ld-plugin/func.c: New test source file.
	* ld-plugin/main.c: Likewise.
	* ld-plugin/text.c: Likewise.
	* ld-plugin/plugin-1.d: New dump test output pattern script.
	* ld-plugin/plugin-2.d: Likewise.
	* ld-plugin/plugin-3.d: Likewise.
	* ld-plugin/plugin-4.d: Likewise.
	* ld-plugin/plugin-5.d: Likewise.
	* ld-plugin/plugin.exp: New test control script.
---
[PATCH] Implement claim file and all symbols read hooks and add symbols callback.

  ld/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 2/6).
	* ldfile.c (ldfile_try_open_bfd)[ENABLE_PLUGINS]: Don't return early
	during compat checks if they pass, instead offer any successfully
	opened and accepted file to the plugin claim file hooks chain.  Create
	a dummy bfd to accept symbols added by the plugin, if the plugin
	claims the file.
	* ldlang.c (lang_process)[ENABLE_PLUGINS]: Call plugin all symbols
	read hook chain before ldemul_after_open.
	* ldlang.h (struct lang_input_statement_struct): Add new single-bit
	'claimed' flag.
	* plugin.c (IRONLY_SUFFIX): New macro for dummy bfd file suffix.
	(IRONLY_SUFFIX_LEN): Length of the above string.
	(plugin_get_ir_dummy_bfd): New function to create the dummy bfd used
	to store symbols for ir-only files.
	(is_ir_dummy_bfd): New function to check if a bfd is ir-only.
	(asymbol_from_plugin_symbol): New function converts symbol formats.
	(add_symbols): Call it to convert plugin syms to bfd syms and add
	them to the dummy bfd.
	* plugin.h: Add missing include guards.
	(plugin_get_ir_dummy_bfd): Add prototype.
	(is_ir_dummy_bfd): Likewise.
	* testplug.c (TV_MESSAGE): New helper macro.
	(struct claim_file): New struct.
	(claim_file_t): New typedef.
	(tag_names[]): Make static and const.
	(claimfiles_list): New variable.
	(claimfiles_tail_chain_ptr): Likewise.
	(last_claimfile): Likewise.
	(record_claim_file): Record a file to claim on a singly-linked list.
	(parse_symdefstr): Parse an ASCII representation of a symbol from a
	plugin option into the fields of a struct ld_plugin_symbol.
	(record_claimed_file_symbol):  Use it to parse plugin option for
	adding a symbol.
	(parse_option): Parse claim file and add symbol options.
	(dump_tv_tag): Use TV_MESSAGE.
	(onload): Likewise.
	(onclaim_file): Make static.  Use TV_MESSAGE.  Scan list of files to
	claim and claim this file if required, adding any symbols specified.
	(onall_symbols_read): Make static and use TV_MESSAGE.
	(oncleanup): Likewise.

  ld/testsuite/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 2/6).
	* ld-plugin/plugin-3.d: Enable regexes for new functionality.
	* ld-plugin/plugin-5.d: Likewise.
	* ld-plugin/plugin-6.d: New testcase.
	* ld-plugin/plugin-7.d: Likewise.
	* ld-plugin/plugin.exp: Use 'nm' on compiled test objects to determine
	whether symbols in plugin arguments need an underscore prefix.  Add
	new plugin-6.d and plugin-7.d testcases.
---
[PATCH] Implement get symbols callback.

  ld/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 3/6).
	* ldmain.c (notice)[ENABLE_PLUGINS]: Call plugin_notice.
	* plugin.c (non_ironly_hash): Add new bfd hash table.
	(plugin_load_plugins): Exit early if no plugins to load.  If plugins
	do load successfully, set notice_all flag in link info.
	(get_symbols): Implement.
	(plugin_load_plugins): Exit early if no plugins to load, else after
	loading plugins successfully enable notice_all mode.
	(init_non_ironly_hash): Lazily init non_ironly_hash table.
	(plugin_notice): Record symbols referenced from non-IR files in the
	non_ironly_hash.  Suppress tracing, cref generation and nocrossrefs
	tracking for symbols from dummy IR bfds.
	* plugin.h: Fix formatting.
	(plugin_notice): Add prototype.
	* testplug.c (dumpresolutions): New global var.
	(parse_options): Accept "dumpresolutions".
	(onall_symbols_read): Get syms and dump resolutions if it was given.

  ld/testsuite/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 3/6).
	* ld-plugin/plugin-8.d: New testcase.
	* ld-plugin/plugin.exp: Invoke it.
---
[PATCH] Implement add input file, add input lib and set extra lib path callbacks.

  ld/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 4/6).
	* ldlang.c (lang_process)[ENABLE_PLUGINS]: Move invocation of
	plugin_call_all_symbols_read to before setting of gc_sym_list, and
	open any new input files that may have been added during it.
	* ldmain.c (multiple_definition)[ENABLE_PLUGINS]: Call out to
	plugin_multiple_definition and let it have first say over what to do
	with the clashing definitions.
	* plugin.c (no_more_claiming): New boolean variable.
	(plugin_cached_allow_multiple_defs): Likewise.
	(add_input_file): Implement.
	(add_input_library): Likewise.
	(set_extra_library_path): Likewise.
	(plugin_call_claim_file): Don't do anything when no_more_claiming set.
	(plugin_call_all_symbols_read): Set it.  Disable link info
	"allow_multiple_definition" flag, but cache its value.
	(plugin_multiple_definition): New function.
	* plugin.h (plugin_multiple_definition): Add prototype.
	* testplug.c (addfile_enum_t): New enumerated typedef.
	(add_file_t): New struct typedef.
	(addfiles_list): New variable.
	(addfiles_tail_chain_ptr): Likewise.
	(record_add_file): New function.
	(parse_option): Parse "add:", "lib:" and "dir:" options and call it.
	(onall_symbols_read): Iterate the list of new files, libs and dirs,
	adding them.

  ld/testsuite/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 4/6).
	* ld-plugin/plugin-9.d: New testcase.
	* ld-plugin/plugin.exp: Invoke it.
---
[PATCH] Add ELF symbol visibility support to plugin interface.

  ld/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 5/6).
	* plugin.c (asymbol_from_plugin_symbol): If the bfd is an ELF bfd,
	find the elf symbol data and set the visibility in the st_other field.

  ld/testsuite/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 5/6).
	* ld-plugin/plugin-ignore.d: New dump test control script.
	* ld-plugin/plugin-vis-1.d: Likewise.
	* ld-plugin/plugin.exp: Add list of ELF-only tests and run them if
	testing on an ELF target.
---
[PATCH] Add archive support to plugin interface.

  bfd/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 6/6).
	* aoutx.h (aout_link_check_ar_symbols): Take new "subsbfd" reference
	parameter and pass it when invoking add_archive_element callback.
	(aout_link_check_archive_element): Handle substitute bfd if it
	was set during add_archive_element callback in the above.
	* cofflink.c (coff_link_check_ar_symbols): Take new "subsbfd" reference
	parameter and pass it when invoking add_archive_element callback.
	(coff_link_check_archive_element): Handle substitute bfd if it
	was set during add_archive_element callback in the above.
	* ecoff.c (read_ext_syms_and_strs): New function holds symbol-reading
	code factored-out from ecoff_link_check_archive_element.
	(reread_ext_syms_and_strs): Clear old symbols and call it.
	(ecoff_link_check_archive_element):  Use the above.  Handle substitute
	BFD if one is set by add_archive_element callback.
	(ecoff_link_add_archive_symbols): Likewise allow bfd substitution.
	* elflink.c (elf_link_add_archive_symbols): Likewise.
	* linker.c (generic_link_check_archive_element): Likewise.
	* pdp11.c (aout_link_check_ar_symbols): Take new "subsbfd" reference
	parameter and pass it when invoking add_archive_element callback.
	(aout_link_check_archive_element): Handle substitute bfd if it was
	set during add_archive_element callback in the above.
	* vms-alpha.c (alpha_vms_link_add_archive_symbols): Handle substitute
	BFD if one is set by add_archive_element callback.
	* xcofflink.c (xcoff_link_check_dynamic_ar_symbols): Take new "subsbfd"
	reference parameter and pass it when invoking add_archive_element
	callback.
	(xcoff_link_check_ar_symbols): Likewise.
	(xcoff_link_check_archive_element): Handle bfd substitution if it was
	set by callback in the above.

  include/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 6/6).
	* bfdlink.h (struct_bfd_link_callbacks): Document new argument
	to add_archive_element callback used to return a replacement bfd which
	is to be added to the hash table in place of the original element.

  ld/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 6/6).
	* ldlang.c (load_symbols): Handle bfd subsitution when calling the
	add_archive_element callback.
	* ldmain.c (add_archive_element)[ENABLE_PLUGINS]: Offer the archive
	member to the plugins and if claimed set "subsbfd" output parameter to
	point to the dummy IR-only BFD.

  ld/testsuite/ChangeLog:

2010-10-14  Dave Korn  <dave.korn.cygwin@@gmail.com>

	Apply LD plugin patch series (part 6/6).
	* ld-plugin/plugin-10.d: New dump test control script.
	* ld-plugin/plugin-11.d: Likewise.
	* ld-plugin/plugin.exp: Run them.
---
@
text
@d1106 1
a1106 2
  $(srcdir)/emulparams/hppa64linux.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
@


1.291
log
@	* emultempl/solaris2.em (elf_solaris2_before_allocation): Renamed
	basever_syms to global_syms.
	Emit global_syms into .dynamic section for all executables and
	shared objects.
	(elf_solaris2_after_allocation): New function.
	(LDEMUL_AFTER_ALLOCATION): Use it.
	* emulparams/solaris2.sh: New file.
	* emulparams/elf32_sparc_sol2.sh: Use it.
	* emulparams/elf64_sparc_sol2.sh: Likewise.
	* emulparams/elf_i386_sol2.sh: Likewise.
	* emulparams/elf_x86_64_sol2.sh: Likewise.
	* Makefile.am (eelf32_sparc_sol2.c): Depend on
	$(srcdir)/emulparams/solaris2.sh.
	(eelf64_sparc_sol2.c): Likewise.
	(eelf_x86_64_sol2.c): Likewise.
	(eelf_i386_sol2.c): Likewise.
	* Makefile.in: Regenerate.
@
text
@d24 13
d124 1
a124 1
	@@INCINTL@@ $(HDEFINES) $(CFLAGS) \
d475 2
a476 1
	mri.c ldcref.c pe-dll.c pep-dll.c ldlex-wrapper.c
d480 2
a481 1
	ldwrite.h mri.h deffile.h pe-dll.h pep-dll.h elf-hints-local.h
d490 2
a491 1
OFILES = ldgram.@@OBJEXT@@ ldlex-wrapper.@@OBJEXT@@ lexsup.@@OBJEXT@@ ldlang.@@OBJEXT@@ mri.@@OBJEXT@@ ldctor.@@OBJEXT@@ ldmain.@@OBJEXT@@ \
d1909 1
a1909 1
	ldwrite.c ldexp.c ldemul.c ldver.c ldmisc.c ldfile.c ldcref.c
d1991 10
@


1.290
log
@Fix typo in ld dependency commit.

ld/:
	* Makefile.am (ALL_64_EMULATIONS): Fix typo in last commit.
	* Makefile.in: Regenerate.
@
text
@d860 1
d1119 1
d1160 1
d1185 1
@


1.289
log
@Fix dependency tracking in ld.

ld/:
	* Makefile.am (ALL_EMULATIONS): Rewrite in terms of ...
	(ALL_EMULATION_SOURCES): ... this new variable.
	(ALL_64_EMULATIONS): Rewrite in terms of ...
	(ALL_64_EMULATION_SOURCES): ... this new variable.
	(EXTRA_ld_new_SOURCES): Rewrite in terms of the _SOURCES
	variables.
	(eelf32microblaze.c): Fix indentation.
	* Makefile.in: Regenerate.
@
text
@d453 1
a453 1
ALL_64_EMULATIONS = $(ALL_64_EMULATION_SOURCES:.c=@@OBJEXT@@)
@


1.288
log
@	* Makefile.am (eshlelf_fd.c): Correct the name of the tool
	directory.
	* Makefile.in: Regenerate.
@
text
@d117 337
a453 333
ALL_EMULATIONS = \
	eaixppc.@@OBJEXT@@ \
	eaixrs6.@@OBJEXT@@ \
	ealpha.@@OBJEXT@@ \
	ealphavms.@@OBJEXT@@ \
	earcelf.@@OBJEXT@@ \
	earm_epoc_pe.@@OBJEXT@@ \
	earm_wince_pe.@@OBJEXT@@ \
	earmaoutb.@@OBJEXT@@ \
	earmaoutl.@@OBJEXT@@ \
	earmcoff.@@OBJEXT@@ \
	earmelf.@@OBJEXT@@ \
	earmelfb.@@OBJEXT@@ \
	earmelf_fbsd.@@OBJEXT@@ \
	earmelf_linux.@@OBJEXT@@ \
	earmelf_linux_eabi.@@OBJEXT@@ \
	earmelfb_linux.@@OBJEXT@@ \
	earmelfb_linux_eabi.@@OBJEXT@@ \
	earmelf_nbsd.@@OBJEXT@@ \
	earmelfb_nbsd.@@OBJEXT@@ \
	earmelf_vxworks.@@OBJEXT@@ \
	earmnto.@@OBJEXT@@ \
	earmnbsd.@@OBJEXT@@ \
	earmpe.@@OBJEXT@@ \
	earmsymbian.@@OBJEXT@@ \
	eavr2.@@OBJEXT@@ \
	eavr1.@@OBJEXT@@ \
	eavr25.@@OBJEXT@@ \
	eavr3.@@OBJEXT@@ \
	eavr31.@@OBJEXT@@ \
	eavr35.@@OBJEXT@@ \
	eavr4.@@OBJEXT@@ \
	eavr5.@@OBJEXT@@ \
	eavr51.@@OBJEXT@@ \
	eavr6.@@OBJEXT@@ \
	ecoff_i860.@@OBJEXT@@ \
	ecoff_sparc.@@OBJEXT@@ \
	eelf32_spu.@@OBJEXT@@ \
	ecrisaout.@@OBJEXT@@ \
	ecriself.@@OBJEXT@@ \
	ecrislinux.@@OBJEXT@@ \
	ed10velf.@@OBJEXT@@ \
	ed30v_e.@@OBJEXT@@ \
	ed30v_o.@@OBJEXT@@ \
	ed30velf.@@OBJEXT@@ \
	edelta68.@@OBJEXT@@ \
	eelf32_dlx.@@OBJEXT@@ \
	eelf32_i960.@@OBJEXT@@ \
	eelf32_i860.@@OBJEXT@@ \
	eelf32_sparc.@@OBJEXT@@ \
	eelf32_sparc_sol2.@@OBJEXT@@ \
	eelf32_sparc_vxworks.@@OBJEXT@@ \
	eelf32_tic6x_be.@@OBJEXT@@ \
	eelf32_tic6x_le.@@OBJEXT@@ \
	eelf32b4300.@@OBJEXT@@ \
	eelf32bfin.@@OBJEXT@@ \
	eelf32bfinfd.@@OBJEXT@@ \
	eelf32cr16.@@OBJEXT@@ \
	eelf32cr16c.@@OBJEXT@@ \
	eelf32bmip.@@OBJEXT@@ \
	eelf32bmipn32.@@OBJEXT@@ \
	eelf32btsmip.@@OBJEXT@@ \
	eelf32crx.@@OBJEXT@@ \
	eelf32btsmipn32.@@OBJEXT@@ \
	eelf32ltsmip.@@OBJEXT@@ \
	eelf32ltsmipn32.@@OBJEXT@@ \
	eelf32ebmip.@@OBJEXT@@ \
	eelf32ebmipvxworks.@@OBJEXT@@ \
	eelf32elmip.@@OBJEXT@@ \
	eelf32elmipvxworks.@@OBJEXT@@ \
	eelf32fr30.@@OBJEXT@@ \
	eelf32frv.@@OBJEXT@@ \
	eelf32moxie.@@OBJEXT@@ \
	eelf32i370.@@OBJEXT@@ \
	eelf32ip2k.@@OBJEXT@@ \
	eelf32iq2000.@@OBJEXT@@ \
	eelf32iq10.@@OBJEXT@@ \
	eelf32lm32.@@OBJEXT@@ \
	eelf32lm32fd.@@OBJEXT@@ \
	eelf32l4300.@@OBJEXT@@ \
	eelf32lmip.@@OBJEXT@@ \
	eelf32lppc.@@OBJEXT@@ \
	eelf32lppcnto.@@OBJEXT@@ \
	eelf32lppcsim.@@OBJEXT@@ \
	eelf32m32c.@@OBJEXT@@ \
	eelf32mcore.@@OBJEXT@@ \
	eelf32mep.@@OBJEXT@@ \
	eelf32mb_linux.@@OBJEXT@@ \
	eelf32microblaze.@@OBJEXT@@ \
	eelf32mipswindiss.@@OBJEXT@@ \
	eelf32mt.@@OBJEXT@@ \
	eelf32openrisc.@@OBJEXT@@ \
	eelf32ppc.@@OBJEXT@@ \
	eelf32ppc_fbsd.@@OBJEXT@@ \
	eelf32ppclinux.@@OBJEXT@@ \
	eelf32ppcnto.@@OBJEXT@@ \
	eelf32ppcsim.@@OBJEXT@@ \
	eelf32ppcwindiss.@@OBJEXT@@ \
	eelf32ppcvxworks.@@OBJEXT@@ \
	eelf32rx.@@OBJEXT@@ \
	eelf32vax.@@OBJEXT@@ \
        eelf32xc16x.@@OBJEXT@@ \
        eelf32xc16xl.@@OBJEXT@@ \
        eelf32xc16xs.@@OBJEXT@@ \
	eelf32xstormy16.@@OBJEXT@@ \
	eelf32xtensa.@@OBJEXT@@ \
	eelf_i386.@@OBJEXT@@ \
	eelf_i386_be.@@OBJEXT@@ \
	eelf_i386_chaos.@@OBJEXT@@ \
	eelf_i386_fbsd.@@OBJEXT@@ \
	eelf_i386_ldso.@@OBJEXT@@ \
	eelf_i386_sol2.@@OBJEXT@@ \
	eelf_i386_vxworks.@@OBJEXT@@ \
	eelf_s390.@@OBJEXT@@ \
	egld960.@@OBJEXT@@ \
	egld960coff.@@OBJEXT@@ \
	eh8300.@@OBJEXT@@ \
	eh8300h.@@OBJEXT@@ \
	eh8300s.@@OBJEXT@@ \
	eh8300elf.@@OBJEXT@@ \
	eh8300hn.@@OBJEXT@@ \
	eh8300sn.@@OBJEXT@@ \
	eh8300sx.@@OBJEXT@@ \
	eh8300helf.@@OBJEXT@@ \
	eh8300self.@@OBJEXT@@ \
	eh8300hnelf.@@OBJEXT@@ \
	eh8300snelf.@@OBJEXT@@ \
	eh8300sxelf.@@OBJEXT@@ \
	eh8300sxn.@@OBJEXT@@ \
	eh8300sxnelf.@@OBJEXT@@ \
	eh8500.@@OBJEXT@@ \
	eh8500b.@@OBJEXT@@ \
	eh8500c.@@OBJEXT@@ \
	eh8500m.@@OBJEXT@@ \
	eh8500s.@@OBJEXT@@ \
	ehp300bsd.@@OBJEXT@@ \
	ehp3hpux.@@OBJEXT@@ \
	ehppaelf.@@OBJEXT@@ \
	ehppalinux.@@OBJEXT@@ \
	ehppanbsd.@@OBJEXT@@ \
	ehppaobsd.@@OBJEXT@@ \
	ei386aout.@@OBJEXT@@ \
	ei386beos.@@OBJEXT@@ \
	ei386bsd.@@OBJEXT@@ \
	ei386coff.@@OBJEXT@@ \
	ei386go32.@@OBJEXT@@ \
	ei386linux.@@OBJEXT@@ \
	ei386lynx.@@OBJEXT@@ \
	ei386mach.@@OBJEXT@@ \
	ei386moss.@@OBJEXT@@ \
	ei386msdos.@@OBJEXT@@ \
	ei386nbsd.@@OBJEXT@@ \
	ei386nto.@@OBJEXT@@ \
	ei386nw.@@OBJEXT@@ \
	ei386pe.@@OBJEXT@@ \
	ei386pe_posix.@@OBJEXT@@ \
	ei386pep.@@OBJEXT@@ \
	elnk960.@@OBJEXT@@ \
	em32relf.@@OBJEXT@@ \
	em32rlelf.@@OBJEXT@@ \
	em32relf_linux.@@OBJEXT@@ \
	em32rlelf_linux.@@OBJEXT@@ \
	em68hc11elf.@@OBJEXT@@ \
	em68hc11elfb.@@OBJEXT@@ \
	em68hc12elf.@@OBJEXT@@ \
	em68hc12elfb.@@OBJEXT@@ \
	em68k4knbsd.@@OBJEXT@@ \
	em68kaout.@@OBJEXT@@ \
	em68kaux.@@OBJEXT@@ \
	em68kcoff.@@OBJEXT@@ \
	em68kelf.@@OBJEXT@@ \
	em68kelfnbsd.@@OBJEXT@@ \
	em68klinux.@@OBJEXT@@ \
	em68knbsd.@@OBJEXT@@ \
	em68kpsos.@@OBJEXT@@ \
	em88kbcs.@@OBJEXT@@ \
	emcorepe.@@OBJEXT@@ \
	emipsbig.@@OBJEXT@@ \
	emipsbsd.@@OBJEXT@@ \
	emipsidt.@@OBJEXT@@ \
	emipsidtl.@@OBJEXT@@ \
	emipslit.@@OBJEXT@@ \
	emipslnews.@@OBJEXT@@ \
	emipspe.@@OBJEXT@@ \
	emsp430x110.@@OBJEXT@@ \
	emsp430x112.@@OBJEXT@@ \
	emsp430x1101.@@OBJEXT@@ \
	emsp430x1111.@@OBJEXT@@ \
	emsp430x1121.@@OBJEXT@@ \
	emsp430x1122.@@OBJEXT@@ \
	emsp430x1132.@@OBJEXT@@ \
	emsp430x122.@@OBJEXT@@ \
	emsp430x123.@@OBJEXT@@ \
	emsp430x1222.@@OBJEXT@@ \
	emsp430x1232.@@OBJEXT@@ \
	emsp430x133.@@OBJEXT@@ \
	emsp430x135.@@OBJEXT@@ \
	emsp430x1331.@@OBJEXT@@ \
	emsp430x1351.@@OBJEXT@@ \
	emsp430x147.@@OBJEXT@@ \
	emsp430x148.@@OBJEXT@@ \
	emsp430x149.@@OBJEXT@@ \
	emsp430x155.@@OBJEXT@@ \
	emsp430x156.@@OBJEXT@@ \
	emsp430x157.@@OBJEXT@@ \
	emsp430x167.@@OBJEXT@@ \
	emsp430x168.@@OBJEXT@@ \
	emsp430x169.@@OBJEXT@@ \
	emsp430x1610.@@OBJEXT@@ \
	emsp430x1611.@@OBJEXT@@ \
	emsp430x1612.@@OBJEXT@@ \
	emsp430x2101.@@OBJEXT@@ \
	emsp430x2111.@@OBJEXT@@ \
	emsp430x2121.@@OBJEXT@@ \
	emsp430x2131.@@OBJEXT@@ \
	emsp430x311.@@OBJEXT@@ \
	emsp430x312.@@OBJEXT@@ \
	emsp430x313.@@OBJEXT@@ \
	emsp430x314.@@OBJEXT@@ \
	emsp430x315.@@OBJEXT@@ \
	emsp430x323.@@OBJEXT@@ \
	emsp430x325.@@OBJEXT@@ \
	emsp430x336.@@OBJEXT@@ \
	emsp430x337.@@OBJEXT@@ \
	emsp430x412.@@OBJEXT@@ \
	emsp430x413.@@OBJEXT@@ \
	emsp430x415.@@OBJEXT@@ \
	emsp430x417.@@OBJEXT@@ \
	emsp430xE423.@@OBJEXT@@ \
	emsp430xE425.@@OBJEXT@@ \
	emsp430xE427.@@OBJEXT@@ \
	emsp430xW423.@@OBJEXT@@ \
	emsp430xW425.@@OBJEXT@@ \
	emsp430xW427.@@OBJEXT@@ \
	emsp430xG437.@@OBJEXT@@ \
	emsp430xG438.@@OBJEXT@@ \
	emsp430xG439.@@OBJEXT@@ \
	emsp430x435.@@OBJEXT@@ \
	emsp430x436.@@OBJEXT@@ \
	emsp430x437.@@OBJEXT@@ \
	emsp430x447.@@OBJEXT@@ \
	emsp430x448.@@OBJEXT@@ \
	emsp430x449.@@OBJEXT@@ \
	enews.@@OBJEXT@@ \
	ens32knbsd.@@OBJEXT@@ \
	eor32.@@OBJEXT@@ \
	eor32elf.@@OBJEXT@@ \
	epc532macha.@@OBJEXT@@ \
	epdp11.@@OBJEXT@@ \
	epjelf.@@OBJEXT@@ \
	epjlelf.@@OBJEXT@@ \
	eppcmacos.@@OBJEXT@@ \
	eppcnw.@@OBJEXT@@ \
	eppcpe.@@OBJEXT@@ \
	eppclynx.@@OBJEXT@@ \
	eriscix.@@OBJEXT@@ \
	escore3_elf.@@OBJEXT@@ \
	escore7_elf.@@OBJEXT@@ \
	esh.@@OBJEXT@@ \
	eshelf32.@@OBJEXT@@ \
	eshlelf32.@@OBJEXT@@ \
	eshelf32_linux.@@OBJEXT@@ \
	eshlelf32_linux.@@OBJEXT@@ \
	eshelf32_nbsd.@@OBJEXT@@ \
	eshlelf32_nbsd.@@OBJEXT@@ \
	eshelf.@@OBJEXT@@ \
	eshelf_fd.@@OBJEXT@@ \
	eshlelf_fd.@@OBJEXT@@ \
	eshelf_linux.@@OBJEXT@@ \
	eshlelf_linux.@@OBJEXT@@ \
	eshelf_nbsd.@@OBJEXT@@ \
	eshlelf_nbsd.@@OBJEXT@@ \
	eshelf_nto.@@OBJEXT@@ \
	eshlelf_nto.@@OBJEXT@@ \
	eshelf_uclinux.@@OBJEXT@@ \
	eshelf_vxworks.@@OBJEXT@@ \
	eshlelf_vxworks.@@OBJEXT@@ \
	eshl.@@OBJEXT@@ \
	eshlelf.@@OBJEXT@@ \
	eshlsymbian.@@OBJEXT@@ \
	eshpe.@@OBJEXT@@ \
	esparcaout.@@OBJEXT@@ \
	esparclinux.@@OBJEXT@@ \
	esparcnbsd.@@OBJEXT@@ \
	est2000.@@OBJEXT@@ \
	esun3.@@OBJEXT@@ \
	esun4.@@OBJEXT@@ \
	etic30aout.@@OBJEXT@@ \
	etic30coff.@@OBJEXT@@ \
	etic3xcoff.@@OBJEXT@@ \
	etic3xcoff_onchip.@@OBJEXT@@ \
	etic4xcoff.@@OBJEXT@@ \
	etic54xcoff.@@OBJEXT@@ \
	etic80coff.@@OBJEXT@@ \
	evanilla.@@OBJEXT@@ \
	evax.@@OBJEXT@@ \
	evaxnbsd.@@OBJEXT@@ \
	evsta.@@OBJEXT@@ \
	ew65.@@OBJEXT@@ \
	ez8001.@@OBJEXT@@ \
	eelf32frvfd.@@OBJEXT@@ \
	ez80.@@OBJEXT@@ \
	ez8002.@@OBJEXT@@

ALL_64_EMULATIONS = \
	eelf64_aix.@@OBJEXT@@ \
	eelf64_ia64.@@OBJEXT@@ \
	eelf64_ia64_fbsd.@@OBJEXT@@ \
	eshelf64.@@OBJEXT@@ \
	eshlelf64.@@OBJEXT@@ \
	eshelf64_nbsd.@@OBJEXT@@ \
	eshlelf64_nbsd.@@OBJEXT@@ \
	eelf_x86_64.@@OBJEXT@@ \
	eelf_x86_64_fbsd.@@OBJEXT@@ \
	eelf_x86_64_sol2.@@OBJEXT@@ \
	eelf_l1om.@@OBJEXT@@ \
	eelf_l1om_fbsd.@@OBJEXT@@ \
	eelf64_s390.@@OBJEXT@@ \
	eelf64_sparc.@@OBJEXT@@ \
	eelf64_sparc_fbsd.@@OBJEXT@@ \
	eelf64_sparc_sol2.@@OBJEXT@@ \
	eelf64alpha.@@OBJEXT@@ \
	eelf64alpha_fbsd.@@OBJEXT@@ \
	eelf64alpha_nbsd.@@OBJEXT@@ \
	eelf64bmip.@@OBJEXT@@ \
	eelf64btsmip.@@OBJEXT@@ \
	eelf64ltsmip.@@OBJEXT@@ \
	eelf64hppa.@@OBJEXT@@ \
	eelf64mmix.@@OBJEXT@@ \
	emmo.@@OBJEXT@@ \
	eelf64ppc.@@OBJEXT@@ \
	eelf64lppc.@@OBJEXT@@ \
	ehppa64linux.@@OBJEXT@@
d970 1
a970 1
 eelf32microblaze.c: $(srcdir)/emulparams/elf32microblaze.sh \
d1894 1
a1894 1
EXTRA_ld_new_SOURCES += $(ALL_EMULATIONS:.@@OBJEXT@@=.c) $(ALL_64_EMULATIONS:.@@OBJEXT@@=.c)
@


1.287
log
@remove maxq-coff port
@
text
@d1735 1
a1735 1
	${GENSCRIPTS} shlelf_fd "$(tdir_shelf_fd)"
@


1.286
log
@        * Makefile.am (eshlelf_fd.c): Fix typo in rule.
        * Makefile.in: Regenerate.
@
text
@a292 1
	emaxqcoff.@@OBJEXT@@ \
a1382 3
emaxqcoff.c: $(srcdir)/emulparams/maxqcoff.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/maxqcoff.sc ${GEN_DEPENDS}
	${GENSCRIPTS} maxqcoff "$(tdir_maxqcoff)"
@


1.285
log
@Fix typo
@
text
@d1739 1
a1739 1
	${GENSCRIPTS} shelf_fd "$(tdir_shelf_fd)"
@


1.284
log
@        PR ld/11621
        * Makefile.am: Replace all occurences of .o with .@@OBJEXT@@
        * Makefile.in: Regenerate.
@
text
@d1947 1
a1947 1
#cdtest.@@OBJEXT@@ut: cdtest
d1949 1
a1949 1
#	mv cdtest.tmp cdtest.@@OBJEXT@@ut
d1959 1
a1959 1
#cdtest-ur.@@OBJEXT@@ut: cdtest-ur
d1961 1
a1961 1
#	mv cdtest-ur.tmp cdtest-ur.@@OBJEXT@@ut
d1963 3
a1965 3
#check-cdtest: cdtest.@@OBJEXT@@ut cdtest-ur.@@OBJEXT@@ut $(srcdir)/cdtest.exp
#	diff $(srcdir)/cdtest.exp cdtest.@@OBJEXT@@ut
#	diff $(srcdir)/cdtest.exp cdtest-ur.@@OBJEXT@@ut
@


1.283
log
@Properly install gold/ld as default cross linker.

gold/

2010-04-27  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (install-exec-local): Properly install gold as
	default cross linker.
	* Makefile.in: Regenerated.

ld/

2010-04-27  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (install-exec-local): Properly install ld as
	default cross linker.
	* Makefile.in: Regenerated.
@
text
@d118 303
a420 301
	eaixppc.o \
	eaixrs6.o \
	ealpha.o \
	ealphavms.o \
	earcelf.o \
	earm_epoc_pe.o \
	earm_wince_pe.o \
	earmaoutb.o \
	earmaoutl.o \
	earmcoff.o \
	earmelf.o \
	earmelfb.o \
	earmelf_fbsd.o \
	earmelf_linux.o \
	earmelf_linux_eabi.o \
	earmelfb_linux.o \
	earmelfb_linux_eabi.o \
	earmelf_nbsd.o \
	earmelfb_nbsd.o \
	earmelf_vxworks.o \
	earmnto.o \
	earmnbsd.o \
	earmpe.o \
	earmsymbian.o \
	eavr2.o \
	eavr1.o \
	eavr25.o \
	eavr3.o \
	eavr31.o \
	eavr35.o \
	eavr4.o \
	eavr5.o \
	eavr51.o \
	eavr6.o \
	ecoff_i860.o \
	ecoff_sparc.o \
	eelf32_spu.o \
	ecrisaout.o \
	ecriself.o \
	ecrislinux.o \
	ed10velf.o \
	ed30v_e.o \
	ed30v_o.o \
	ed30velf.o \
	edelta68.o \
	eelf32_dlx.o \
	eelf32_i960.o \
	eelf32_i860.o \
	eelf32_sparc.o \
	eelf32_sparc_sol2.o \
	eelf32_sparc_vxworks.o \
	eelf32_tic6x_be.o \
	eelf32_tic6x_le.o \
	eelf32b4300.o \
	eelf32bfin.o \
	eelf32bfinfd.o \
	eelf32cr16.o \
	eelf32cr16c.o \
	eelf32bmip.o \
	eelf32bmipn32.o \
	eelf32btsmip.o \
	eelf32crx.o \
	eelf32btsmipn32.o \
	eelf32ltsmip.o \
	eelf32ltsmipn32.o \
	eelf32ebmip.o \
	eelf32ebmipvxworks.o \
	eelf32elmip.o \
	eelf32elmipvxworks.o \
	eelf32fr30.o \
	eelf32frv.o \
	eelf32moxie.o \
	eelf32i370.o \
	eelf32ip2k.o \
	eelf32iq2000.o \
	eelf32iq10.o \
	eelf32lm32.o \
	eelf32lm32fd.o \
	eelf32l4300.o \
	eelf32lmip.o \
	eelf32lppc.o \
	eelf32lppcnto.o \
	eelf32lppcsim.o \
	eelf32m32c.o \
	eelf32mcore.o \
	eelf32mep.o \
	eelf32mb_linux.o \
	eelf32microblaze.o \
	eelf32mipswindiss.o \
	eelf32mt.o \
	eelf32openrisc.o \
	eelf32ppc.o \
	eelf32ppc_fbsd.o \
	eelf32ppclinux.o \
	eelf32ppcnto.o \
	eelf32ppcsim.o \
	eelf32ppcwindiss.o \
	eelf32ppcvxworks.o \
	eelf32rx.o \
	eelf32vax.o \
        eelf32xc16x.o \
        eelf32xc16xl.o \
        eelf32xc16xs.o \
	eelf32xstormy16.o \
	eelf32xtensa.o \
	eelf_i386.o \
	eelf_i386_be.o \
	eelf_i386_chaos.o \
	eelf_i386_fbsd.o \
	eelf_i386_ldso.o \
	eelf_i386_sol2.o \
	eelf_i386_vxworks.o \
	eelf_s390.o \
	egld960.o \
	egld960coff.o \
	eh8300.o \
	eh8300h.o \
	eh8300s.o \
	eh8300elf.o \
	eh8300hn.o \
	eh8300sn.o \
	eh8300sx.o \
	eh8300helf.o \
	eh8300self.o \
	eh8300hnelf.o \
	eh8300snelf.o \
	eh8300sxelf.o \
	eh8300sxn.o \
	eh8300sxnelf.o \
	eh8500.o \
	eh8500b.o \
	eh8500c.o \
	eh8500m.o \
	eh8500s.o \
	ehp300bsd.o \
	ehp3hpux.o \
	ehppaelf.o \
	ehppalinux.o \
	ehppanbsd.o \
	ehppaobsd.o \
	ei386aout.o \
	ei386beos.o \
	ei386bsd.o \
	ei386coff.o \
	ei386go32.o \
	ei386linux.o \
	ei386lynx.o \
	ei386mach.o \
	ei386moss.o \
	ei386msdos.o \
	ei386nbsd.o \
	ei386nto.o \
	ei386nw.o \
	ei386pe.o \
	ei386pe_posix.o \
	ei386pep.o \
	elnk960.o \
	em32relf.o \
	em32rlelf.o \
	em32relf_linux.o \
	em32rlelf_linux.o \
	em68hc11elf.o \
	em68hc11elfb.o \
	em68hc12elf.o \
	em68hc12elfb.o \
	em68k4knbsd.o \
	em68kaout.o \
	em68kaux.o \
	em68kcoff.o \
	em68kelf.o \
	em68kelfnbsd.o \
	em68klinux.o \
	em68knbsd.o \
	em68kpsos.o \
	em88kbcs.o \
	emaxqcoff.o \
	emcorepe.o \
	emipsbig.o \
	emipsbsd.o \
	emipsidt.o \
	emipsidtl.o \
	emipslit.o \
	emipslnews.o \
	emipspe.o \
	emsp430x110.o \
	emsp430x112.o \
	emsp430x1101.o \
	emsp430x1111.o \
	emsp430x1121.o \
	emsp430x1122.o \
	emsp430x1132.o \
	emsp430x122.o \
	emsp430x123.o \
	emsp430x1222.o \
	emsp430x1232.o \
	emsp430x133.o \
	emsp430x135.o \
	emsp430x1331.o \
	emsp430x1351.o \
	emsp430x147.o \
	emsp430x148.o \
	emsp430x149.o \
	emsp430x155.o \
	emsp430x156.o \
	emsp430x157.o \
	emsp430x167.o \
	emsp430x168.o \
	emsp430x169.o \
	emsp430x1610.o \
	emsp430x1611.o \
	emsp430x1612.o \
	emsp430x2101.o \
	emsp430x2111.o \
	emsp430x2121.o \
	emsp430x2131.o \
	emsp430x311.o \
	emsp430x312.o \
	emsp430x313.o \
	emsp430x314.o \
	emsp430x315.o \
	emsp430x323.o \
	emsp430x325.o \
	emsp430x336.o \
	emsp430x337.o \
	emsp430x412.o \
	emsp430x413.o \
	emsp430x415.o \
	emsp430x417.o \
	emsp430xE423.o \
	emsp430xE425.o \
	emsp430xE427.o \
	emsp430xW423.o \
	emsp430xW425.o \
	emsp430xW427.o \
	emsp430xG437.o \
	emsp430xG438.o \
	emsp430xG439.o \
	emsp430x435.o \
	emsp430x436.o \
	emsp430x437.o \
	emsp430x447.o \
	emsp430x448.o \
	emsp430x449.o \
	enews.o \
	ens32knbsd.o \
	eor32.o \
	eor32elf.o \
	epc532macha.o \
	epdp11.o \
	epjelf.o \
	epjlelf.o \
	eppcmacos.o \
	eppcnw.o \
	eppcpe.o \
	eppclynx.o \
	eriscix.o \
	escore3_elf.o \
	escore7_elf.o \
	esh.o \
	eshelf32.o \
	eshlelf32.o \
	eshelf32_linux.o \
	eshlelf32_linux.o \
	eshelf32_nbsd.o \
	eshlelf32_nbsd.o \
	eshelf.o \
	eshelf_linux.o \
	eshlelf_linux.o \
	eshelf_nbsd.o \
	eshlelf_nbsd.o \
	eshelf_nto.o \
	eshlelf_nto.o \
	eshelf_uclinux.o \
	eshelf_vxworks.o \
	eshlelf_vxworks.o \
	eshl.o \
	eshlelf.o \
	eshlsymbian.o \
	eshpe.o \
	esparcaout.o \
	esparclinux.o \
	esparcnbsd.o \
	est2000.o \
	esun3.o \
	esun4.o \
	etic30aout.o \
	etic30coff.o \
	etic3xcoff.o \
	etic3xcoff_onchip.o \
	etic4xcoff.o \
	etic54xcoff.o \
	etic80coff.o \
	evanilla.o \
	evax.o \
	evaxnbsd.o \
	evsta.o \
	ew65.o \
	ez8001.o \
	eelf32frvfd.o \
	ez80.o \
	ez8002.o
d423 28
a450 28
	eelf64_aix.o \
	eelf64_ia64.o \
	eelf64_ia64_fbsd.o \
	eshelf64.o \
	eshlelf64.o \
	eshelf64_nbsd.o \
	eshlelf64_nbsd.o \
	eelf_x86_64.o \
	eelf_x86_64_fbsd.o \
	eelf_x86_64_sol2.o \
	eelf_l1om.o \
	eelf_l1om_fbsd.o \
	eelf64_s390.o \
	eelf64_sparc.o \
	eelf64_sparc_fbsd.o \
	eelf64_sparc_sol2.o \
	eelf64alpha.o \
	eelf64alpha_fbsd.o \
	eelf64alpha_nbsd.o \
	eelf64bmip.o \
	eelf64btsmip.o \
	eelf64ltsmip.o \
	eelf64hppa.o \
	eelf64mmix.o \
	emmo.o \
	eelf64ppc.o \
	eelf64lppc.o \
	ehppa64linux.o
d453 3
a455 3
	deffilep.o \
	pe-dll.o \
	pep-dll.o
d472 3
a474 3
OFILES = ldgram.o ldlex-wrapper.o lexsup.o ldlang.o mri.o ldctor.o ldmain.o \
	ldwrite.o ldexp.o  ldemul.o ldver.o ldmisc.o \
	ldfile.o ldcref.o ${EMULATION_OFILES} ${EMUL_EXTRA_OFILES}
d476 1
a476 1
STAGESTUFF = *.o ldscripts/* e*.c
d480 1
a480 1
ldgram.o: ldgram.c
d492 1
a492 1
ldlex-wrapper.o: ldlex-wrapper.c ldlex.c
d504 1
a504 1
deffilep.o: deffilep.c
d526 1
a526 1
ldmain.o: ldmain.c config.status
d545 1
a545 1
ldfile.o: ldfile.c config.status
d561 1
a561 1
eelf32_spu.o: eelf32_spu.c
d866 1
a866 1
  $(srcdir)/emultempl/spu_ovl.o_c $(srcdir)/emultempl/spu_icache.o_c \
d870 1
a870 1
$(srcdir)/emultempl/spu_ovl.o_c: @@MAINT@@ $(srcdir)/emultempl/spu_ovl.S
d874 2
a875 2
	  ../gas/as-new -o spu_ovl.o spu_ovl.s; \
	  ../binutils/bin2c <spu_ovl.o >$@@; \
d877 1
a877 1
$(srcdir)/emultempl/spu_icache.o_c: @@MAINT@@ $(srcdir)/emultempl/spu_icache.S
d881 2
a882 2
	  ../gas/as-new -o spu_icache.o spu_icache.s; \
	  ../binutils/bin2c <spu_icache.o >$@@; \
d1734 6
d1894 1
a1894 1
EXTRA_ld_new_SOURCES += $(ALL_EMULATIONS:.o=.c) $(ALL_64_EMULATIONS:.o=.c)
d1921 4
a1924 4
ld-partial.o: ld-new$(EXEEXT)
	./ld-new$(EXEEXT) $(HOSTING_EMU) -o ld-partial.o -r $(OFILES)
ld1$(EXEEXT): ld-partial.o
	./ld-new$(EXEEXT) $(HOSTING_EMU) -o ld1$(EXEEXT) $(HOSTING_CRT0) ld-partial.o $(TESTBFDLIB) $(LIBIBERTY) $(HOSTING_LIBS) $(LIBS)
d1943 1
a1943 1
#cdtest: cdtest-main.o cdtest-bar.o cdtest-foo.o ld.new
d1945 1
a1945 1
#	  cdtest-main.o cdtest-bar.o cdtest-foo.o $(HOSTING_LIBS)
d1947 1
a1947 1
#cdtest.out: cdtest
d1949 1
a1949 1
#	mv cdtest.tmp cdtest.out
d1951 3
a1953 3
#cdtest-ur.o: cdtest-main.o cdtest-bar.o cdtest-foo.o ld.new
#	./ld.new $(HOSTING_EMU) -o cdtest-ur.o -Ur cdtest-main.o \
#	  cdtest-bar.o cdtest-foo.o
d1955 2
a1956 2
#cdtest-ur: cdtest-ur.o
#	./ld.new $(HOSTING_EMU) -o cdtest-ur $(HOSTING_CRT0) cdtest-ur.o \
d1959 1
a1959 1
#cdtest-ur.out: cdtest-ur
d1961 1
a1961 1
#	mv cdtest-ur.tmp cdtest-ur.out
d1963 3
a1965 3
#check-cdtest: cdtest.out cdtest-ur.out $(srcdir)/cdtest.exp
#	diff $(srcdir)/cdtest.exp cdtest.out
#	diff $(srcdir)/cdtest.exp cdtest-ur.out
d1999 1
a1999 1
	ldemul-list.h crtbegin.o crtend.o ld.log ld.sum
d2002 1
a2002 1
CLEANFILES = dep.sed DEP DEPA DEP1 DEP2 spu_ovl.s spu_ovl.o spu_icache.s spu_icache.o
d2034 2
a2035 2
EXTRA_DIST = ldgram.c ldgram.h ldlex.c emultempl/spu_ovl.o_c \
	     emultempl/spu_icache.o_c deffilep.c deffilep.h $(man_MANS)
@


1.282
log
@gold:
        * configure.ac (install_as_default): Define and set to false
        unless --enable-gold or --enable-gold=both/gold has been
        specified.
        * configure: Regenerate.

        * Makefile.am (install-exec-local): Install the executable as
        'ld.gold'.  If install_as_default is true then also install it as
        'ld'.
        * Makefile.in: Regenerated.
ld:
        * configure.in (install_as_default): Define and set to true
        unless --enable-gold=both/gold has been specified.
        * configure: Regenerate.

        * Makefile.am (transform): Use ld.bfd as the default name of
        the linker.
        (install-exec-local): Also install the executable as a binary
        named 'ld' if install_as_default is true.
        * Makefile.in: Regenerate.
@
text
@d2007 4
a2010 3
	  rm -f $(DESTDIR)$(bindir)/ld$(EXEEXT); \
	  ln $(DESTDIR)$(bindir)/$$n$(EXEEXT) $(DESTDIR)$(bindir)/ld$(EXEEXT) >/dev/null 2>/dev/null \
	  || $(LIBTOOL) --mode=install $(INSTALL_PROGRAM) ld-new$(EXEEXT) $(DESTDIR)$(bindir)/ld$(EXEEXT); \
@


1.281
log
@2010-04-14  Tristan Gingold  <gingold@@adacore.com>

	* emulparams/alphavms.sh: New file.
	* emultempl/vms.em: New file.
	* scripttempl/alphavms.sc: New file.
	* configure.tgt (alpha*-*-*vms*): Added.
	* Makefile.am (ALL_EMULATIONS): Add ealphavms.o
	(ealphavms.c): New target.
	* Makefile.in: Regenerate.
@
text
@d98 1
a98 1
transform = s/^ld-new$$/ld/;@@program_transform_name@@
d1998 1
a1998 1
install-exec-local: ld-new$(EXEEXT)
d2000 15
a2014 5
	n=`echo ld | sed '$(transform)'`; \
	if [ "$(bindir)/$$n$(EXEEXT)" != "$(tooldir)/bin/ld$(EXEEXT)" ]; then \
	  rm -f $(DESTDIR)$(tooldir)/bin/ld$(EXEEXT); \
	  ln $(DESTDIR)$(bindir)/$$n$(EXEEXT) $(DESTDIR)$(tooldir)/bin/ld$(EXEEXT) >/dev/null 2>/dev/null \
	  || $(LIBTOOL) --mode=install $(INSTALL_PROGRAM) ld-new$(EXEEXT) $(DESTDIR)$(tooldir)/bin/ld$(EXEEXT); \
@


1.280
log
@bfd:
	* Makefile.am (ALL_MACHINES): Add cpu-tic6x.lo.
	(ALL_MACHINES_CFILES): Add cpu-tic6x.c.
	(BFD32_BACKENDS): Add elf32-tic6x.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-tic6x.c.
	* Makefile.in: Regenerate.
	* archures.c (bfd_arch_tic6x, bfd_tic6x_arch): New.
	(bfd_archures_list): Update.
	* config.bfd (tic6x-*-elf): New.
	* configure.in (bfd_elf32_tic6x_be_vec, bfd_elf32_tic6x_le_vec):
	New.
	* configure: Regenerate.
	* cpu-tic6x.c, elf32-tic6x.c: New.
	* reloc.c (BFD_RELOC_C6000_PCR_S21, BFD_RELOC_C6000_PCR_S12,
	BFD_RELOC_C6000_PCR_S10, BFD_RELOC_C6000_PCR_S7,
	BFD_RELOC_C6000_ABS_S16, BFD_RELOC_C6000_ABS_L16,
	BFD_RELOC_C6000_ABS_H16, BFD_RELOC_C6000_SBR_U15_B,
	BFD_RELOC_C6000_SBR_U15_H, BFD_RELOC_C6000_SBR_U15_W,
	BFD_RELOC_C6000_SBR_S16, BFD_RELOC_C6000_SBR_L16_B,
	BFD_RELOC_C6000_SBR_L16_H, BFD_RELOC_C6000_SBR_L16_W,
	BFD_RELOC_C6000_SBR_H16_B, BFD_RELOC_C6000_SBR_H16_H,
	BFD_RELOC_C6000_SBR_H16_W, BFD_RELOC_C6000_SBR_GOT_U15_W,
	BFD_RELOC_C6000_SBR_GOT_L16_W, BFD_RELOC_C6000_SBR_GOT_H16_W,
	BFD_RELOC_C6000_DSBT_INDEX, BFD_RELOC_C6000_PREL31,
	BFD_RELOC_C6000_COPY, BFD_RELOC_C6000_ALIGN,
	BFD_RELOC_C6000_FPHEAD, BFD_RELOC_C6000_NOCMP): New.
	* targets.c (bfd_elf32_tic6x_be_vec, bfd_elf32_tic6x_le_vec): New.
	(_bfd_target_vector): Update.
	* bfd-in2.h, libbfd.h: Regenerate.

binutils:
	* MAINTAINERS: Add self as TI C6X maintainer.
	* NEWS: Add news entry for TI C6X support.
	* readelf.c: Include elf/tic6x.h.
	(guess_is_rela): Handle EM_TI_C6000.
	(dump_relocations): Likewise.
	(get_tic6x_dynamic_type): New.
	(get_dynamic_type): Call it.
	(get_machine_flags): Handle EF_C6000_REL.
	(get_osabi_name): Handle machine-specific values only for relevant
	machines.  Handle C6X values.
	(get_tic6x_segment_type): New.
	(get_segment_type): Call it.
	(get_tic6x_section_type_name): New.
	(get_section_type_name): Call it.
	(is_32bit_abs_reloc, is_16bit_abs_reloc, is_none_reloc): Handle
	EM_TI_C6000.

gas:
	* Makefile.am (TARGET_CPU_CFILES): Add config/tc-tic6x.c.
	(TARGET_CPU_HFILES): Add config/tc-tic6x.h.
	* Makefile.in: Regenerate.
	* NEWS: Add news entry for TI C6X support.
	* app.c (do_scrub_chars): Handle "||^" for TI C6X.  Handle
	TC_PREDICATE_START_CHAR and TC_PREDICATE_END_CHAR.  Keep spaces in
	operands if TC_KEEP_OPERAND_SPACES.
	* configure.tgt (tic6x-*-*): New.
	* config/tc-ia64.h (TC_PREDICATE_START_CHAR,
	TC_PREDICATE_END_CHAR): Define.
	* config/tc-tic6x.c, config/tc-tic6x.h: New.
	* doc/Makefile.am (CPU_DOCS): Add c-tic6x.texi.
	* doc/Makefile.in: Regenerate.
	* doc/all.texi (TIC6X): Define.
	* doc/as.texinfo: Add TI C6X documentation.  Include c-tic6x.texi.
	* doc/c-tic6x.texi: New.

gas/testsuite:
	* gas/tic6x: New directory and testcases.

include:
	* dis-asm.h (print_insn_tic6x): Declare.

include/elf:
	* common.h (ELFOSABI_C6000_ELFABI, ELFOSABI_C6000_LINUX): Define.
	* tic6x.h: New.

include/opcode:
	* tic6x-control-registers.h, tic6x-insn-formats.h,
	tic6x-opcode-table.h, tic6x.h: New.

ld:
	* Makefile.am (ALL_EMULATIONS): Add eelf32_tic6x_be.o and
	eelf32_tic6x_le.o.
	(eelf32_tic6x_be.c, eelf32_tic6x_le.c): New.
	* NEWS: Add news entry for TI C6X support.
	* configure.tgt (tic6x-*-*): New.
	* emulparams/elf32_tic6x_be.sh, emulparams/elf32_tic6x_le.sh: New.

ld/testsuite:
	* ld-elf/flags1.d, ld-elf/merge.d: XFAIL for tic6x-*-*.
	* ld-elf/sec-to-seg.exp: Set B_test_same_seg to 0 for tic6x-*-*.
	* ld-tic6x: New directory and testcases.

opcodes:
	* Makefile.am (TARGET_LIBOPCODES_CFILES): Add tic6x-dis.c.
	* Makefile.in: Regenerate.
	* configure.in (bfd_tic6x_arch): New.
	* configure: Regenerate.
	* disassemble.c (ARCH_tic6x): Define if ARCH_all.
	(disassembler): Handle TI C6X.
	* tic6x-dis.c: New.
@
text
@d121 1
d615 4
@


1.279
log
@	ld:
	* Makefile.am (ALL_EMULATIONS): Add eelf32_sparc_sol2.o,
	eelf_i386_sol2.o.
	(ALL_64_EMULATIONS): Add eelf_x86_64_sol2.o, eelf64_sparc_sol2.o.
	(eelf32_sparc_sol2.c): New rule.
	(eelf64_sparc_sol2.c): Likewise.
	(eelf_x86_64_sol2.c): Likewise.
	(eelf_i386_sol2.c): Likewise.
	* Makefile.in: Regenerate.
	* configure.tgt (i[3-7]86-*-solaris2*): Change targ_emul to
	elf_i386_sol2.
	Add elf_i386_ldso, elf_x86_64_sol2 to targ_extra_emuls.
	(x86_64-*-solaris2*): Change targ_emul to elf_x86_64_sol2.
	Add elf_x86_64, elf_i386_sol2, elf_i386 to targ_extra_emuls.
	(sparc-*-solaris2.[0-6]*): Change targ_emul to elf32_sparc_sol2.
	Add target_extra_emuls.
	(sparc-*-solaris2*): Change targ_emul to elf32_sparc_sol2.
	Add elf32_sparc, elf64_sparc_sol2 to targ_extra_emuls.
	(sparcv9-*-solaris2*): Change targ_emul to elf64_sparc_sol2.
	Add elf64_sparc, elf32_sparc_sol2 to target_extra_emuls.
	* emulparams/elf32_sparc_sol2.sh: New file.
	* emulparams/elf64_sparc_sol2.sh: New file.
	* emulparams/elf_i386_sol2.sh: New file.
	* emulparams/elf_x86_64_sol2.sh: New file.
	* emultempl/solaris2.em: New file.

	bfd:
	* elflink.c (bfd_elf_size_dynamic_sections): Don't emit base
	version twice.
	Skip it when constructing def.vd_next.

	* elf32-i386.c (TARGET_LITTLE_SYM): Redefine to
	bfd_elf32_i386_sol2_vec.
	(TARGET_LITTLE_NAME): Redefine to elf32-i386-sol2.
	(elf32_bed): Redefine to elf32_i386_sol2_bed.
	(elf_backend_want_plt_sym): Redefine to 1.

	* elf64-x86-64.c (TARGET_LITTLE_SYM): Redefine to
	bfd_elf64_x86_64_sol2_vec.
	(TARGET_LITTLE_NAME): Redefine to elf64-x86-64-sol2.
	(elf64_bed): Redefine to elf64_x86_64_sol2_bed.
	(elf_backend_want_plt_sym): Redefine to 1.

	* config.bfd (i[3-7]86-*-solaris2*): Set targ_defvec to
	bfd_elf32_i386_sol2_vec.
	Replace bfd_elf64_x86_64_vec by bfd_elf64_x86_64_sol2_vec in
	targ64_selvecs.
	(x86_64-*-solaris2*): Set targ_defvec to bfd_elf32_i386_sol2_vec.
	Replace bfd_elf64_x86_64_vec by bfd_elf64_x86_64_sol2_vec in
	targ_selvecs.

	* configure.in: Handle bfd_elf32_i386_sol2_vec,
	bfd_elf64_x86_64_sol2_vec.
	* configure: Regenerate.

	* targets.c (bfd_elf32_i386_sol2_vec): Declare.
	(bfd_elf64_x86_64_sol2_vec): Declare.
	(_bfd_target_vector): Add bfd_elf32_i386_sol2_vec,
	bfd_elf64_x86_64_sol2_vec.
@
text
@d168 2
d778 6
@


1.278
log
@	* Makefile.am (eelf32_i960.c): Depend on ELF_GEN_DEPS, not ELF_DEPS.
	* Makefile.in: Regenerate.
@
text
@d166 1
d202 1
a202 1
 	eelf32microblaze.o \
d225 1
d427 1
d433 1
d840 5
d1098 5
d1138 5
d1163 4
@


1.277
log
@ld/
	* Makefile.am (CFILES): Add ldlex-wrapper.c.
	(OFILES): Replace ldlex.c with ldlex-wrapper.c.
	(ldlex.o): Replace with...
	(ldlex-wrapper.o): ...this new rule.
	(EXTRA_ld_new_SOURCES): Add ldlex.l.
	(ld_new_SOURCES): Replace ldlex.l with ldlex-wrapper.c.
	* Makefile.in: Regenerate.
	* ldlex.l (sysdep.h): Don't include here.
	* ldlex-wrapper.c: New file.
@
text
@d864 1
a864 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
@


1.276
log
@        * Makefile.am: Remove spurious sanitization marker.
        * Makefile.in: Regenerate.
@
text
@d450 1
a450 1
	mri.c ldcref.c pe-dll.c pep-dll.c
d463 1
a463 1
OFILES = ldgram.o ldlex.o lexsup.o ldlang.o mri.o ldctor.o ldmain.o \
d483 1
a483 1
ldlex.o: ldlex.c
d485 1
a485 1
	$(COMPILE) -MT $@@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@@ `test -f ldlex.c || echo $(srcdir)/`ldlex.c $(NO_WERROR)
d489 1
a489 1
	source='ldlex.c' object='$@@' libtool=no @@AMDEPBACKSLASH@@
d492 1
a492 1
	$(COMPILE) -c `test -f ldlex.c || echo $(srcdir)/`ldlex.c $(NO_WERROR)
d1840 1
a1840 1
EXTRA_ld_new_SOURCES = deffilep.y
d1844 1
a1844 1
ld_new_SOURCES = ldgram.y ldlex.l lexsup.c ldlang.c mri.c ldctor.c ldmain.c \
@


1.275
log
@bfd
        * Makefile.am (ALL_MACHINES): Add cpu-rx.lo.
        (ALL_MACHINES_CFILES): Add cpu-rx.c.
        (BFD32_BACKENDS): Add elf32-rx.lo.
        (BFD32_BACKENDS_CFILES): Add elf32-rx.c.
        * archures.c (bfd_architecture): Add bfd_arch_rx and bfd_mach_rx.
        Export bfd_rx_arch.
        (bfd_archures_list): Add bfd_rx_arch.
        * config.bfd: Add entry for rx-*-elf.
        * configure.in: Add entries for bfd_elf32_rx_le_vec and
        bfd_elf32_rx_be_vec.
        * reloc.c: Add RX relocations.
        * targets.c: Add RX target vectors.
        * Makefile.in: Regenerate.
        * bfd-in2.h: Regenerate.
        * configure: Regenerate.
        * libbfd.h: Regenerate.
        * cpu-rx.c: New file.
        * elf32-rx.c: New file.

binutils
        * readelf.c: Add support for RX target.
        * MAINTAINERS: Add DJ and NickC as maintainers for RX.

gas
        * Makefile.am: Add RX target.
        * configure.in: Likewise.
        * configure.tgt: Likewise.
        * read.c (do_repeat_with_expander): New function.
        * read.h: Provide a prototype for do_repeat_with_expander.
        * doc/Makefile.am: Add RX target documentation.
        * doc/all.texi: Likewise.
        * doc/as.texinfo: Likewise.
        * Makefile.in: Regenerate.
        * NEWS: Mention support for RX architecture.
        * configure: Regenerate.
        * doc/Makefile.in: Regenerate.
        * config/rx-defs.h: New file.
        * config/rx-parse.y: New file.
        * config/tc-rx.h: New file.
        * config/tc-rx.c: New file.
        * doc/c-rx.texi: New file.

gas/testsuite
        * gas/rx: New directory.
        * gas/rx/*: New set of test cases.
        * gas/elf/section2.e-rx: New expected output file.
        * gas/all/gas.exp: Add support for RX target.
        * gas/elf/elf.exp: Likewise.
        * gas/lns/lns.exp: Likewise.
        * gas/macros/macros.exp: Likewise.

include
        * dis-asm.h: Add prototype for print_insn_rx.

include/elf
        * rx.h: New file.

include/opcode
        * rx.h: New file.

ld
        * Makefile.am: Add rules to build RX emulation.
        * configure.tgt: Likewise.
        * NEWS: Mention support for RX architecture.
        * Makefile.in: Regenerate.
        * emulparams/elf32rx.sh: New file.
        * emultempl/rxelf.em: New file.

opcodes
        * Makefile.am: Add RX files.
        * configure.in: Add support for RX target.
        * disassemble.c: Likewise.
        * Makefile.in: Regenerate.
        * configure: Regenerate.
        * opc2c.c: New file.
        * rx-decode.c: New file.
        * rx-decode.opc: New file.
        * rx-dis.c: New file.
@
text
@a793 1
	@@true end-sanitize-rx
@


1.274
log
@Fix VPATH search for generated sources in binutils, gas, ld.

binutils/:
	* Makefile.am (arparse.o, arlex.o, sysroff.o, defparse.o)
	(deflex.o, nlmheaders.o, rcparse.o, mcparse.o): Supply correct
	source file name for generated files which may be in $(srcdir).
	* Makefile.in: Regenerate.

gas/:
	* Makefile.am (m68k-parse.o, bfin-lex.o, itbl-lex.o, itbl-parse.o):
	Supply correct source file name for generated files which may be
	in $(srcdir).
	* Makefile.in: Regenerate.

ld/:
	* Makefile.am (ldgram.o, ldlex.o, deffilep.o): Supply correct
	source file name for generated files which may be in $(srcdir).
	* Makefile.in: Regenerate.
@
text
@d212 1
d791 4
@


1.274.2.1
log
@ld/
	* Makefile.am (CFILES): Add ldlex-wrapper.c.
	(OFILES): Replace ldlex.c with ldlex-wrapper.c.
	(ldlex.o): Replace with...
	(ldlex-wrapper.o): ...this new rule.
	(EXTRA_ld_new_SOURCES): Add ldlex.l.
	(ld_new_SOURCES): Replace ldlex.l with ldlex-wrapper.c.
	* Makefile.in: Regenerate.
	* ldlex.l (sysdep.h): Don't include here.
	* ldlex-wrapper.c: New file.
@
text
@d449 1
a449 1
	mri.c ldcref.c pe-dll.c pep-dll.c ldlex-wrapper.c
d462 1
a462 1
OFILES = ldgram.o ldlex-wrapper.o lexsup.o ldlang.o mri.o ldctor.o ldmain.o \
d482 1
a482 1
ldlex-wrapper.o: ldlex-wrapper.c ldlex.c
d484 1
a484 1
	$(COMPILE) -MT $@@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@@ $(srcdir)/ldlex-wrapper.c $(NO_WERROR)
d488 1
a488 1
	source='ldlex-wrapper.c' object='$@@' libtool=no @@AMDEPBACKSLASH@@
d491 1
a491 1
	$(COMPILE) -c $(srcdir)/ldlex-wrapper.c $(NO_WERROR)
d1836 1
a1836 1
EXTRA_ld_new_SOURCES = deffilep.y ldlex.l
d1840 1
a1840 1
ld_new_SOURCES = ldgram.y ldlex-wrapper.c lexsup.c ldlang.c mri.c ldctor.c ldmain.c \
@


1.273
log
@dependency tracking fixes in ld

ld/:
	* Makefile.am (ldmain.o, ldfile.o): Fix typos in non-fastdep
	rules.
	(eelf32_spu.o): Add dependency tracking.
	* Makefile.in: Regenerate.
@
text
@d472 1
a472 1
	$(COMPILE) -MT $@@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@@ ldgram.c $(NO_WERROR)
d479 1
a479 1
	$(COMPILE) -c ldgram.c $(NO_WERROR)
d484 1
a484 1
	$(COMPILE) -MT $@@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@@ ldlex.c $(NO_WERROR)
d491 1
a491 1
	$(COMPILE) -c ldlex.c $(NO_WERROR)
d496 1
a496 1
	$(COMPILE) -MT $@@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@@ deffilep.c $(NO_WERROR)
d503 1
a503 1
	$(COMPILE) -c deffilep.c $(NO_WERROR)
@


1.272
log
@Fix yacc and lex reruns with maintainer-mode off.

gas/:
	* Makefile.am (am__skiplex, am__skipyacc): New.
	* Makefile.in: Regenerate.

ld/:
	* Makefile.am (am__skiplex, am__skipyacc): New.
	* Makefile.in: Regenerate.

binutils/:
	* Makefile.am (am__skiplex, am__skipyacc): New.
	* Makefile.in: Regenerate.

gold/:
	* Makefile.am (am__skiplex, am__skipyacc): New.
	* Makefile.in: Regenerate.
@
text
@d526 1
a526 1
	source='deffilep.c' object='$@@' libtool=no @@AMDEPBACKSLASH@@
d543 1
a543 1
	source='deffilep.c' object='$@@' libtool=no @@AMDEPBACKSLASH@@
d552 9
d563 1
@


1.271
log
@Cleanups in binutils makefiles.

ld/:
	* Makefile.am (bin_PROGRAMS): Renamed from ...
	(noinst_PROGRAMS): ... this.
	(transform): Override, including the renaming of ld-new to ld.
	(install-exec-local): Installation of ld in $(bindir) not needed
	here any more.
	(AM_CPPFLAGS): Renamed from ...
	(INCLUDES): ... this.
	(MAINTAINERCLEANFILES): Add ld.1.
	* Makefile.in: Regenerate.

gold/:
	* Makefile.am (AM_CPPFLAGS): Renamed from ...
	(INCLUDES): ... this.
	* testsuite/Makefile.am (AUTOMAKE_OPTIONS): Add -Wno-portability.
	(AM_CPPFLAGS): Renamed from ...
	(INCLUDE): ... this.
	* Makefile.in, testsuite/Makefile.in: Regenerate.

bfd/:
	* Makefile.am (libbfd_la_LDFLAGS): Initialize early, to allow
	appending.
	[INSTALL_LIBBFD] (bfdlib_LTLIBRARIES, bfdinclude_HEADERS): Set
	only in this condition.
	[!INSTALL_LIBBFD] (noinst_LTLIBRARIES, libbfd_la_LDFLAGS): New,
	to build but not install libbfd.la in this condition.
	(install-bfdlibLTLIBRARIES, uninstall-bfdlibLTLIBRARIES)
	(install_libbfd, install_libbfd): Remove.
	* Makefile.in: Regenerate.

binutils/:
	* Makefile.am (AM_CPPFLAGS): Renamed from ...
	(INCLUDES): ... this.
	(bin2c$(EXEEXT_FOR_BUILD): Adjust rule.
	(installcheck-local): Renamed from ...
	(installcheck): ... this.
	* Makefile.in: Regenerate.

gas/:
	* Makefile.am (YFLAGS): Remove, not needed any more.
	(AM_CPPFLAGS): Renamed from ...
	(INCLUDES): ... this.
	* Makefile.in: Regenerate.

gprof/:
	* Makefile.am (AM_CPPFLAGS): Renamed from ...
	(INCLUDES): ... this.
	* Makefile.in: Regenerate.

opcodes/:
	* Makefile.am (libopcodes_la_LDFLAGS): Initialize early.
	[INSTALL_LIBBFD] (bfdlib_LTLIBRARIES): Set only in this condition.
	[INSTALL_LIBBFD] (bfdinclude_DATA): New.
	[!INSTALL_LIBBFD] (noinst_LTLIBRARIES): New.
	[!INSTALL_LIBBFD] (libopcodes_la_LDFLAGS): Ensure libopcodes.la
	is built shared even if it is not to be installed.
	(install-bfdlibLTLIBRARIES,uninstall-bfdlibLTLIBRARIES)
	(install_libopcodes, uninstall_libopcodes): Remove.
	(AM_CPPFLAGS): Renamed from ...
	(INCLUDES): ... this.
	* Makefile.in: Regenerate.
@
text
@d15 5
@


1.270
log
@dependency tracking in ld

ld/:
	* Makefile.am (AUTOMAKE_OPTIONS): Remove cygnus.  Add
	no-texinfo.tex, no-dist, foreign.
	(TEXINFO_TEX): New variable.
	(install-data-local): Removed, not needed any more.
	(all): Dependencies upon info and ld.1 not needed any more.
	(MKDEP, DEP, DEP1, dep.sed, dep, dep-in, dep-am): Removed.
	(mkdep generated section): Removed.
	(ldgram.o, ldlex.o, deffilep.o, ldmain.o, ldfile.o): Rewrite to
	use automake dependency tracking mechanism.
	(EXTRA_ld_new_SOURCES): Add pep-dll.c, pe-dll.c, and
	$(ALL_EMULATIONS:.o=.c) $(ALL_64_EMULATIONS:.o=.c) so their
	dependencies are tracked too.
	(BUILT_SOURCES): New, list $(GENERATED_HFILES) to ensure they
	are built early.
	* configure.in: Use AM_MAINTAINER_MODE.
	* configure, Makefile.in: Regenerate.
@
text
@d93 2
a94 1
noinst_PROGRAMS = ld-new
d105 1
a105 1
INCLUDES = -I. -I$(srcdir) -I../bfd -I$(BFDDIR) -I$(INCDIR) \
d1928 1
a1928 1
MAINTAINERCLEANFILES = configdoc.texi
d1944 1
a1944 7
	$(mkinstalldirs) $(DESTDIR)$(bindir) $(DESTDIR)$(tooldir)/bin
	@@list='$(noinst_PROGRAMS)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(LIBTOOL)  --mode=install $(INSTALL_PROGRAM) $$p $(bindir)/`echo $$p|sed -e 's/$(EXEEXT)$$//' -e 's/-new//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`"; \
	    $(LIBTOOL)  --mode=install $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/`echo $$p|sed -e 's/$(EXEEXT)$$//' -e 's/-new//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
	  else :; fi; \
	done
@


1.269
log
@Cleanups after the update to Autoconf 2.64, Automake 1.11.

/:
	* README-maintainer-mode: Point directly to upstream locations
	for autoconf, automake, libtool, gettext, instead of copies on
	sources.redhat.com.  Document required versions.
	* configure.ac: Do not substitute datarootdir, htmldir,
	pdfdir, docdir.  Do not process --with-datarootdir,
	--with-htmldir, --with-pdfdir, --with-docdir.
	* configure: Regenerate.

gdb/:
	* CONTRIBUTE: Bump documented Autoconf version.
	* configure.ac: Do not substitute datarootdir, htmldir,
	pdfdir, docdir.  Do not process --with-datarootdir,
	--with-htmldir, --with-pdfdir, --with-docdir.
	* configure: Regenerate.

gdb/doc/:
	* gdbint.texinfo (Releasing GDB): Point to
	README-maintainer-mode file for required autoconf version.
	* configure.ac: Do not substitute datarootdir, htmldir,
	pdfdir, docdir.  Do not process --with-datarootdir,
	--with-htmldir, --with-pdfdir, --with-docdir.
	* configure: Regenerate.

gprof/:
	* Makefile.am (pdf__strip_dir, install-pdf, install-pdf-am)
	(install-pdf-recursive, html__strip_dir, install-html)
	(install-html-am, install-html-recursive): Remove.
	* Makefile.in: Regenerate.

opcodes/:
	* Makefile.am (install-pdf, install-html): Remove.
	* Makefile.in: Regenerate.

gas/:
	* Makefile.am (install-pdf, install-pdf-recursive, install-html)
	(install-html-recursive): Remove.
	* Makefile.in: Regenerate.
	* doc/Makefile.am (pdf__strip_dir, install-pdf, install-pdf-am)
	(html__strip_dir, install-html, install-html-am): Remove.
	* doc/Makefile.in: Regenerate.

ld/:
	* Makefile.am (pdf__strip_dir, install-pdf, install-pdf-am)
	(install-pdf-recursive, html__strip_dir, install-html)
	(install-html-am, install-html-recursive): Remove.
	* Makefile.in: Regenerate.

binutils/:
	* Makefile.am (install-pdf, install-pdf-recursive, install-html)
	(install-html-recursive): Remove.
	* Makefile.in: Regenerate.
	* doc/Makefile.am (pdf__strip_dir, install-pdf, install-pdf-am)
	(html__strip_dir, install-html, install-html-am): Remove.
	* doc/Makefile.in: Regenerate.

bfd/:
	* Makefile.am (datarootdir, docdir, htmldor, pdfdir)
	(install-pdf, install-pdf-recursive, install-html)
	(install-html-recursive): Remove.
	* Makefile.in: Regenerate.

bfd/doc/:
	* Makefile.am (pdf__strip_dir, install-pdf, install-pdf-am)
	(html__strip_dir, install-html, install-html-am): Remove.
	* Makefile.in: Regenerate.
@
text
@d3 1
a3 1
AUTOMAKE_OPTIONS = cygnus dejagnu
d5 1
a39 1
MKDEP = gcc -MM
d452 4
d464 35
a498 6
ldgram.o:
	$(COMPILE) -c $< $(NO_WERROR)
ldlex.o:
	$(COMPILE) -c $< $(NO_WERROR)
deffilep.o:
	$(COMPILE) -c $< $(NO_WERROR)
d511 12
d527 1
d530 12
a541 2
	$(COMPILE) -c -DSCRIPTDIR='"$(scriptdir)"' \
	  -DBINDIR='"$(bindir)"' -DTOOLBINDIR='"$(tooldir)/bin"' \
d543 1
d1821 2
d1829 2
a1830 4
# The generated emulation files mostly have the same dependencies.
$(EMULATION_OFILES): ../bfd/bfd.h sysdep.h config.h $(INCDIR)/bfdlink.h \
  ld.h ldmain.h ldemul.h ldfile.h ldmisc.h ldexp.h ldlang.h \
  ldctor.h ldexp.h ldlang.h ldgram.h
a1962 4
# We want install to imply install-info as per GNU standards, despite the
# cygnus option.
install-data-local: install-info

a1967 1
all: info ld.1
a1985 390

# Targets to rebuild dependencies in this Makefile.
# Have to get rid of DEP1 here so that "$?" later includes all of $(CFILES).
DEP: dep.sed $(CFILES) $(HFILES) $(GENERATED_CFILES) $(GENERATED_HFILES) config.h
	rm -f DEP1
	$(MAKE) MKDEP="$(MKDEP)" DEP1
	echo '# IF YOU PUT ANYTHING HERE IT WILL GO AWAY' >> DEP1
	if grep ' /' DEP1 > /dev/null 2> /dev/null; then \
	  echo 'make DEP failed!'; exit 1; \
	else \
	  mv -f DEP1 $@@; \
	fi

DEP1: $(CFILES) $(GENERATED_CFILES)
	echo '# DO NOT DELETE THIS LINE -- mkdep uses it.' > DEP2
	echo '# DO NOT PUT ANYTHING AFTER THIS LINE, IT WILL GO AWAY.' >> DEP2
	for f in $?; do \
	  $(MKDEP) $(INCLUDES) $(CFLAGS) $$f > DEPA; \
	  sed -n -e '1s/: .*/: \\/p' -e q < DEPA >> DEP2; \
	  sed -e '1s/.*: //' -f dep.sed < DEPA | \
	    LC_ALL=C sort | LC_ALL=C uniq | \
	    sed -e 's/^[AB]/  /' -e '$$s/ \\$$//' >> DEP2; \
	done
	rm -f DEPA
	mv -f DEP2 $@@

dep.sed: dep-in.sed config.status
	sed <$(srcdir)/dep-in.sed >dep.sed	\
		-e 's!@@INCDIR@@!$(INCDIR)!'	\
		-e 's!@@BFDDIR@@!$(BFDDIR)!'	\
		-e 's!@@SRCDIR@@!$(srcdir)!'	\
		-e 's!@@TOPDIR@@!'`echo $(srcdir) | sed -e s,/ld$$,,`'!'

dep: DEP
	sed -e '/^..DO NOT DELETE THIS LINE/,$$d' < Makefile > tmp-Makefile
	cat DEP >> tmp-Makefile
	$(srcdir)/../move-if-change tmp-Makefile Makefile

dep-in: DEP
	sed -e '/^..DO NOT DELETE THIS LINE/,$$d' < $(srcdir)/Makefile.in > tmp-Makefile.in
	cat DEP >> tmp-Makefile.in
	$(srcdir)/../move-if-change tmp-Makefile.in $(srcdir)/Makefile.in

dep-am: DEP
	sed -e '/^..DO NOT DELETE THIS LINE/,$$d' < $(srcdir)/Makefile.am > tmp-Makefile.am
	cat DEP >> tmp-Makefile.am
	$(srcdir)/../move-if-change tmp-Makefile.am $(srcdir)/Makefile.am

.PHONY: dep dep-in dep-am

# What appears below is generated by a hacked mkdep using gcc -MM.

# DO NOT DELETE THIS LINE -- mkdep uses it.
# DO NOT PUT ANYTHING AFTER THIS LINE, IT WILL GO AWAY.
ldctor.o: \
  ldctor.c \
  $(INCDIR)/ansidecl.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/fopen-same.h \
  $(INCDIR)/safe-ctype.h \
  $(INCDIR)/symcat.h \
  ../bfd/bfd.h \
  config.h \
  ld.h \
  ldctor.h \
  ldexp.h \
  ldgram.h \
  ldlang.h \
  ldmain.h \
  ldmisc.h \
  sysdep.h
ldemul.o: \
  ldemul.c \
  $(INCDIR)/ansidecl.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/fopen-same.h \
  $(INCDIR)/symcat.h \
  ../bfd/bfd.h \
  config.h \
  ld.h \
  ldemul-list.h \
  ldemul.h \
  ldexp.h \
  ldfile.h \
  ldlang.h \
  ldmain.h \
  ldmisc.h \
  sysdep.h
ldexp.o: \
  ldexp.c \
  $(INCDIR)/ansidecl.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/fopen-same.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h \
  $(INCDIR)/symcat.h \
  ../bfd/bfd.h \
  config.h \
  ld.h \
  ldexp.h \
  ldgram.h \
  ldlang.h \
  ldlex.h \
  ldmain.h \
  ldmisc.h \
  sysdep.h
ldfile.o: \
  ldfile.c \
  $(INCDIR)/ansidecl.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/fopen-same.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h \
  $(INCDIR)/symcat.h \
  ../bfd/bfd.h \
  config.h \
  ld.h \
  ldemul.h \
  ldexp.h \
  ldfile.h \
  ldgram.h \
  ldlang.h \
  ldlex.h \
  ldmain.h \
  ldmisc.h \
  sysdep.h
ldlang.o: \
  ldlang.c \
  $(INCDIR)/ansidecl.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/demangle.h \
  $(INCDIR)/fnmatch.h \
  $(INCDIR)/fopen-same.h \
  $(INCDIR)/hashtab.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/obstack.h \
  $(INCDIR)/safe-ctype.h \
  $(INCDIR)/symcat.h \
  ../bfd/bfd.h \
  config.h \
  ld.h \
  ldctor.h \
  ldemul.h \
  ldexp.h \
  ldfile.h \
  ldgram.h \
  ldlang.h \
  ldlex.h \
  ldmain.h \
  ldmisc.h \
  sysdep.h
ldmain.o: \
  ldmain.c \
  $(INCDIR)/ansidecl.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h \
  $(INCDIR)/fopen-same.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/progress.h \
  $(INCDIR)/safe-ctype.h \
  $(INCDIR)/symcat.h \
  ../bfd/bfd.h \
  config.h \
  ld.h \
  ldctor.h \
  ldemul.h \
  ldexp.h \
  ldfile.h \
  ldgram.h \
  ldlang.h \
  ldlex.h \
  ldmain.h \
  ldmisc.h \
  ldwrite.h \
  sysdep.h
ldmisc.o: \
  ldmisc.c \
  $(BFDDIR)/elf-bfd.h \
  $(INCDIR)/ansidecl.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/demangle.h \
  $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h \
  $(INCDIR)/fopen-same.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/symcat.h \
  ../bfd/bfd.h \
  config.h \
  ld.h \
  ldexp.h \
  ldfile.h \
  ldgram.h \
  ldlang.h \
  ldlex.h \
  ldmain.h \
  ldmisc.h \
  sysdep.h
ldver.o: \
  ldver.c \
  $(INCDIR)/ansidecl.h \
  $(INCDIR)/fopen-same.h \
  $(INCDIR)/symcat.h \
  ../bfd/bfd.h \
  ../bfd/bfdver.h \
  config.h \
  ld.h \
  ldemul.h \
  ldexp.h \
  ldfile.h \
  ldlang.h \
  ldmain.h \
  ldver.h \
  sysdep.h
ldwrite.o: \
  ldwrite.c \
  $(INCDIR)/ansidecl.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/fopen-same.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h \
  $(INCDIR)/symcat.h \
  ../bfd/bfd.h \
  config.h \
  ld.h \
  ldexp.h \
  ldgram.h \
  ldlang.h \
  ldmain.h \
  ldmisc.h \
  ldwrite.h \
  sysdep.h
lexsup.o: \
  lexsup.c \
  $(INCDIR)/ansidecl.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/demangle.h \
  $(INCDIR)/fopen-same.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h \
  $(INCDIR)/symcat.h \
  ../bfd/bfd.h \
  ../bfd/bfdver.h \
  config.h \
  ld.h \
  ldemul.h \
  ldexp.h \
  ldfile.h \
  ldgram.h \
  ldlang.h \
  ldlex.h \
  ldmain.h \
  ldmisc.h \
  ldver.h \
  sysdep.h
mri.o: \
  mri.c \
  $(INCDIR)/ansidecl.h \
  $(INCDIR)/fopen-same.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/symcat.h \
  ../bfd/bfd.h \
  config.h \
  ld.h \
  ldexp.h \
  ldgram.h \
  ldlang.h \
  ldmisc.h \
  mri.h \
  sysdep.h
ldcref.o: \
  ldcref.c \
  $(INCDIR)/ansidecl.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/demangle.h \
  $(INCDIR)/fopen-same.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/objalloc.h \
  $(INCDIR)/symcat.h \
  ../bfd/bfd.h \
  config.h \
  ld.h \
  ldexp.h \
  ldlang.h \
  ldmain.h \
  ldmisc.h \
  sysdep.h
pe-dll.o: \
  pe-dll.c \
  $(BFDDIR)/libcoff.h \
  $(INCDIR)/ansidecl.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/fopen-same.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h \
  $(INCDIR)/symcat.h \
  ../bfd/bfd.h \
  config.h \
  deffile.h \
  ld.h \
  ldemul.h \
  ldexp.h \
  ldfile.h \
  ldgram.h \
  ldlang.h \
  ldmain.h \
  ldmisc.h \
  ldwrite.h \
  pe-dll.h \
  sysdep.h
pep-dll.o: \
  pep-dll.c \
  $(BFDDIR)/libcoff.h \
  $(INCDIR)/ansidecl.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/coff/internal.h \
  $(INCDIR)/fopen-same.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h \
  $(INCDIR)/symcat.h \
  ../bfd/bfd.h \
  config.h \
  deffile.h \
  ld.h \
  ldemul.h \
  ldexp.h \
  ldfile.h \
  ldgram.h \
  ldlang.h \
  ldmain.h \
  ldmisc.h \
  ldwrite.h \
  pe-dll.c \
  pep-dll.h \
  sysdep.h
ldgram.o: \
  ldgram.c \
  $(INCDIR)/ansidecl.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/fopen-same.h \
  $(INCDIR)/symcat.h \
  ../bfd/bfd.h \
  config.h \
  ld.h \
  ldctor.h \
  ldemul.h \
  ldexp.h \
  ldfile.h \
  ldlang.h \
  ldlex.h \
  ldmain.h \
  ldmisc.h \
  ldver.h \
  mri.h \
  sysdep.h
ldlex.o: \
  ldlex.c \
  $(INCDIR)/ansidecl.h \
  $(INCDIR)/bfdlink.h \
  $(INCDIR)/fopen-same.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h \
  $(INCDIR)/symcat.h \
  ../bfd/bfd.h \
  config.h \
  ld.h \
  ldexp.h \
  ldfile.h \
  ldgram.h \
  ldlang.h \
  ldlex.h \
  ldmain.h \
  ldmisc.h \
  sysdep.h
deffilep.o: \
  deffilep.c \
  $(INCDIR)/ansidecl.h \
  $(INCDIR)/fopen-same.h \
  $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h \
  $(INCDIR)/symcat.h \
  ../bfd/bfd.h \
  config.h \
  deffile.h \
  ld.h \
  ldmisc.h \
  sysdep.h
# IF YOU PUT ANYTHING HERE IT WILL GO AWAY
@


1.268
log
@        Add support for Xilinx MicroBlaze processor.

        * bfd/Makefile.am: Add cpu-microblaze.{lo,c}, elf32-microblaze.{lo,c}.
        * bfd/Makefile.in: Same.
        * bfd/archures.c: Add bfd_arch_microblaze.
        * bfd/bfd-in2.h: Regenerate.
        * bfd/config.bfd: Add microblaze target.
        * bfd/configure: Add bfd_elf32_microblaze_vec target.
        * bfd/configure.in: Same.
        * bfd/cpu-microblaze.c: New.
        * bfd/elf32-microblaze.c: New.
        * bfd/libbfd-in.h: Add prototype _bfd_dwarf2_fixup_section_debug_loc().
        * bfd/libbfd.h: Regenerate.
        * bfd/reloc.c: Add MICROBLAZE relocations.
        * bfd/section.c: Add struct relax_table and relax_count to section.
        * bfd/targets.c: Add bfd_elf32_microblaze_vec.
        * binutils/MAINTAINERS: Add self as maintainer.
        * binutils/readelf.c: Include elf/microblaze.h, add EM_MICROBLAZE &
        EM_MICROBLAZE_OLD to guess_is_rela(), dump_relocations(),
        get_machine_name().
        * config.sub: Add microblaze target.
        * configure: Same.
        * configure.ac: Same.
        * gas/Makefile.am: add microblaze to CPU_TYPES, config/tc-microblaze.c to
        TARGET_CPU_CFILES, config/tc-microblaze.h to TARGET_CPU_HFILES, add
        DEP_microblaze_elf target.
        * gas/Makefile.in: Same.
        * gas/config/tc-microblaze.c: Add MicroBlaze assembler.
        * gas/config/tc-microblaze.h: Add header for tc-microblaze.c.
        * gas/configure: Add microblaze target.
        * gas/configure.in: Same.
        * gas/configure.tgt: Same.
        * gas/doc/Makefile.am: Add c-microblaze.texi to CPU_DOCS.
        * gas/doc/Makefile.in: Same.
        * gas/doc/all.texi: Set MICROBLAZE.
        * gas/doc/as.texinfo: Add MicroBlaze doc links.
        * gas/doc/c-microblaze.texi: New MicroBlaze docs.
        * include/dis-asm.h: Decl print_insn_microblaze().
        * include/elf/common.h: Define EM_MICROBLAZE & EM_MICROBLAZE_OLD.
        * include/elf/microblaze.h: New reloc definitions.
        * ld/Makefile.am: Add eelf32mb_linux.o, eelf32microblaze.o to
        ALL_EMULATIONS, targets.
        * ld/Makefile.in: Same.
        * ld/configure.tgt: Add microblaze*-linux*, microblaze* targets.
        * ld/emulparams/elf32mb_linux.sh: New.
        * ld/emulparams/elf32microblaze.sh. New.
        * ld/scripttempl/elfmicroblaze.sc: New.
        * opcodes/Makefile.am: Add microblaze-opc.h to HFILES, microblaze-dis.c to
        CFILES, microblaze-dis.lo to ALL_MACHINES, targets.
        * opcodes/Makefile.in: Same.
        * opcodes/configure: Add bfd_microblaze_arch target.
        * opcodes/configure.in: Same.
        * opcodes/disassemble.c: Define ARCH_microblaze, return
        print_insn_microblaze().
        * opcodes/microblaze-dis.c: New MicroBlaze disassembler.
        * opcodes/microblaze-opc.h: New MicroBlaze opcode definitions.
        * opcodes/microblaze-opcm.h: New MicroBlaze opcode types.
@
text
@a1882 89
.PHONY: install-pdf install-pdf-am install-pdf-recursive

pdf__strip_dir = `echo $$p | sed -e 's|^.*/||'`;

install-pdf: install-pdf-recursive install-pdf-am
 
install-pdf-am: $(PDFS)
	@@$(NORMAL_INSTALL)
	test -z "$(pdfdir)" || $(mkinstalldirs) "$(DESTDIR)$(pdfdir)"
	@@list='$(PDFS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(pdf__strip_dir) \
	  echo " $(INSTALL_DATA) '$$d$$p' '$(DESTDIR)$(pdfdir)/$$f'"; \
	  $(INSTALL_DATA) "$$d$$p" "$(DESTDIR)$(pdfdir)/$$f"; \
	done

install-pdf-recursive:
	@@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

.PHONY: install-html install-html-am install-html-recursive

html__strip_dir = `echo $$p | sed -e 's|^.*/||'`;

install-html: install-html-recursive  install-html-am

install-html-am: $(HTMLS)
	@@$(NORMAL_INSTALL)
	test -z "$(htmldir)" || $(mkdir_p) "$(DESTDIR)$(htmldir)"
	@@list='$(HTMLS)'; for p in $$list; do \
	  if test -f "$$p" || test -d "$$p"; then d=""; else d="$(srcdir)/"; fi; \
	  f=$(html__strip_dir) \
	  if test -d "$$d$$p"; then \
	    echo " $(mkdir_p) '$(DESTDIR)$(htmldir)/$$f'"; \
	    $(mkdir_p) "$(DESTDIR)$(htmldir)/$$f" || exit 1; \
	    echo " $(INSTALL_DATA) '$$d$$p'/* '$(DESTDIR)$(htmldir)/$$f'"; \
	    $(INSTALL_DATA) "$$d$$p"/* "$(DESTDIR)$(htmldir)/$$f"; \
	  else \
	    echo " $(INSTALL_DATA) '$$d$$p' '$(DESTDIR)$(htmldir)/$$f'"; \
	    $(INSTALL_DATA) "$$d$$p" "$(DESTDIR)$(htmldir)/$$f"; \
	  fi; \
	done

install-html-recursive:
	@@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

@


1.267
log
@bfd/

2009-07-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* archures.c (bfd_architecture): Add bfd_arch_l1om.
	(bfd_l1om_arch): New.
	(bfd_archures_list): Add &bfd_l1om_arch.
	* bfd-in2.h: Regenerated.

	* config.bfd (targ64_selvecs): Add bfd_elf64_l1om_vec if
	bfd_elf64_x86_64_vec is supported.  Add bfd_elf64_l1om_freebsd_vec
	if bfd_elf64_x86_64_freebsd_vec is supported.
	(targ_selvecs): Likewise.

	* configure.in: Support bfd_elf64_l1om_vec and
	bfd_elf64_l1om_freebsd_vec.
	* configure: Regenerated.

	* cpu-l1om.c: New.

	* elf64-x86-64.c (elf64_l1om_elf_object_p): New.
	(bfd_elf64_l1om_vec): Likewise.
	(bfd_elf64_l1om_freebsd_vec): Likewise.

	* Makefile.am (ALL_MACHINES): Add cpu-l1om.lo.
	(ALL_MACHINES_CFILES): Add cpu-l1om.c.
	* Makefile.in: Regenerated.

	* targets.c (bfd_elf64_l1om_vec): New.
	(bfd_elf64_l1om_freebsd_vec): Likewise.
	(_bfd_target_vector): Add bfd_elf64_l1om_vec and
	bfd_elf64_l1om_freebsd_vec.

binutils/

2009-07-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* readelf.c (guess_is_rela): Handle EM_L1OM.
	(dump_relocations): Likewise.
	(get_machine_name): Likewise.
	(get_section_type_name): Likewise.
	(get_elf_section_flags): Likewise.
	(get_symbol_index_type): Likewise.
	(is_32bit_abs_reloc): Likewise.
	(is_32bit_pcrel_reloc): Likewise.
	(is_64bit_abs_reloc): Likewise.
	(is_64bit_pcrel_reloc): Likewise.
	(is_none_reloc): Likewise.

gas/

2009-07-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* config/tc-i386.c (cpu_arch): Add l1om.
	(check_cpu_arch_compatible): New.
	(set_cpu_arch): Use it.
	(i386_arch): New.
	(i386_mach): Return bfd_mach_l1om for Intel L1OM.
	(md_show_usage): Display l1om.
	(i386_target_format): Return ELF_TARGET_L1OM_FORMAT if
	cpu_arch_isa_flags.bitfield.cpul1om is set.

	* config/tc-i386.h (TARGET_ARCH): Use (i386_arch ()).
	(i386_arch): New.
	(ELF_TARGET_L1OM_FORMAT): Likewise.

	* doc/c-i386.texi: Document l1om.

gas/testsuite/

2009-07-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* gas/i386/l1om.d: New.
	* gas/i386/l1om-inval.l: Likewise.
	* gas/i386/l1om-inval.s: Likewise.

	* gas/i386/i386.exp: Run l1om-inval and l1om.

include/elf/

2009-07-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* common.h (EM_L1OM): New.

ld/

2009-07-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* configure.tgt (targ64_extra_emuls): Add elf_l1om if elf_x86_64
	is supported.  Add elf_l1om_fbsd if elf_x86_64_fbsd is supported.
	(targ_extra_emuls): Likewise.

	* Makefile.am (ALL_64_EMULATIONS): Add eelf_l1om.o and
	eelf_l1om_fbsd.o
	(eelf_l1om.c): New.
	(eelf_l1om_fbsd.c): Likewise.
	* Makefile.in: Regenerated.

	* emulparams/elf_l1om.sh: New.
	* emulparams/elf_l1om_fbsd.sh: Likewise.

ld/testsuite/

2009-07-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-x86-64/abs-l1om.d: New.
	* ld-x86-64/protected2-l1om.d: Likewise.
	* ld-x86-64/protected3-l1om.d: Likewise.

	* ld-x86-64/x86-64.exp: Run abs-l1om, protected2-l1om and
	protected3-l1om.

opcodes/

2009-07-25  H.J. Lu  <hongjiu.lu@@intel.com>

	* configure.in: Handle bfd_l1om_arch.
	* disassemble.c (disassembler): Likewise.

	* configure: Regenerated.

	* i386-dis.c (print_insn): Handle bfd_mach_l1om and
	bfd_mach_l1om_intel_syntax.  Use 8 bytes per line for Intel L1OM.

	* i386-gen.c (cpu_flag_init): Set CPU_UNKNOWN_FLAGS to ~CpuL1OM.
	Add CPU_L1OM_FLAGS.
	(cpu_flags): Add CpuL1OM.
	(set_bitfield): Take an argument to set the value field.
	(process_i386_cpu_flag): Support ~CpuXXX and ~(CpuXXX|CpuYYY).
	(process_i386_opcode_modifier): Updated.
	(process_i386_operand_type): Likewise.
	* i386-init.h: Regenerated.
	* i386-tbl.h: Likewise.

	* i386-opc.h (CpuL1OM): New.
	(CpuXsave): Updated.
	(i386_cpu_flags): Add cpul1om.
@
text
@d194 2
d863 6
@


1.266
log
@	* dep-in.sed: Don't use \n in replacement part of s command.
	* Makefile.am (DEP1): LC_ALL for uniq.
	* Makefile.in: Regenerate.
@
text
@d416 2
d1039 7
@


1.265
log
@	* dep-in.sed: Output one filename per line with all lines having
	continuation backslash.  Prefix first line with "A", following
	lines with "B".
	* Makefile.am (DEP): Don't use dep.sed here.
	(DEP1): Run $MKDEP on single files, use dep.sed here on dependencies,
	sort and uniq.
	* Makefile.in: Regenerate.
@
text
@d2025 2
a2026 1
	  sed -e '1s/.*: //' -f dep.sed < DEPA | LC_ALL=C sort | uniq | \
@


1.264
log
@Run "make dep-am" and regenerate
@
text
@d2012 2
a2013 3
	sed -f dep.sed < DEP1 > DEPA
	echo '# IF YOU PUT ANYTHING HERE IT WILL GO AWAY' >> DEPA
	if grep ' /' DEPA > /dev/null 2> /dev/null; then \
d2016 1
a2016 1
	  mv -f DEPA $@@; \
d2022 7
a2028 1
	$(MKDEP) $(INCLUDES) $(CFLAGS) $? >> DEP2
d2059 335
a2393 81
ldctor.o: ldctor.c sysdep.h config.h $(INCDIR)/fopen-same.h \
  ../bfd/bfd.h $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/safe-ctype.h ld.h ldexp.h \
  ldlang.h ldmisc.h ldgram.h ldmain.h ldctor.h
ldemul.o: ldemul.c sysdep.h config.h $(INCDIR)/fopen-same.h \
  ../bfd/bfd.h $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
  $(INCDIR)/bfdlink.h ld.h ldmisc.h ldexp.h ldlang.h \
  ldfile.h ldemul.h ldmain.h ldemul-list.h
ldexp.o: ldexp.c sysdep.h config.h $(INCDIR)/fopen-same.h \
  ../bfd/bfd.h $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
  $(INCDIR)/bfdlink.h ld.h ldmain.h ldmisc.h ldexp.h \
  ldlex.h ldgram.h ldlang.h $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h
ldfile.o: ldfile.c sysdep.h config.h $(INCDIR)/fopen-same.h \
  ../bfd/bfd.h $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/safe-ctype.h ld.h ldmisc.h \
  ldexp.h ldlang.h ldfile.h ldmain.h ldgram.h ldlex.h \
  ldemul.h $(INCDIR)/libiberty.h $(INCDIR)/filenames.h
ldlang.o: ldlang.c sysdep.h config.h $(INCDIR)/fopen-same.h \
  ../bfd/bfd.h $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
  $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h $(INCDIR)/obstack.h \
  $(INCDIR)/bfdlink.h ld.h ldmain.h ldexp.h ldlang.h \
  ldgram.h ldlex.h ldmisc.h ldctor.h ldfile.h ldemul.h \
  $(INCDIR)/fnmatch.h $(INCDIR)/demangle.h $(INCDIR)/hashtab.h
ldmain.o: ldmain.c sysdep.h config.h $(INCDIR)/fopen-same.h \
  ../bfd/bfd.h $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/libiberty.h $(INCDIR)/progress.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/filenames.h ld.h ldmain.h \
  ldmisc.h ldwrite.h ldexp.h ldlang.h ldgram.h ldlex.h \
  ldfile.h ldemul.h ldctor.h
ldmisc.o: ldmisc.c sysdep.h config.h $(INCDIR)/fopen-same.h \
  ../bfd/bfd.h $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h $(INCDIR)/demangle.h \
  ld.h ldmisc.h ldexp.h ldlang.h ldgram.h ldlex.h ldmain.h \
  ldfile.h $(BFDDIR)/elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/internal.h
ldver.o: ldver.c sysdep.h config.h $(INCDIR)/fopen-same.h \
  ../bfd/bfd.h $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
  ../bfd/bfdver.h ld.h ldver.h ldexp.h ldlang.h ldfile.h \
  ldemul.h ldmain.h
ldwrite.o: ldwrite.c sysdep.h config.h $(INCDIR)/fopen-same.h \
  ../bfd/bfd.h $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h \
  ld.h ldexp.h ldlang.h ldwrite.h ldmisc.h ldgram.h ldmain.h
lexsup.o: lexsup.c sysdep.h config.h $(INCDIR)/fopen-same.h \
  ../bfd/bfd.h $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
  ../bfd/bfdver.h $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h ld.h ldmain.h ldmisc.h ldexp.h \
  ldlang.h ldgram.h ldlex.h ldfile.h ldver.h ldemul.h \
  $(INCDIR)/demangle.h
mri.o: mri.c sysdep.h config.h $(INCDIR)/fopen-same.h \
  ../bfd/bfd.h $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
  ld.h ldexp.h ldlang.h ldmisc.h mri.h ldgram.h $(INCDIR)/libiberty.h
ldcref.o: ldcref.c sysdep.h config.h $(INCDIR)/fopen-same.h \
  ../bfd/bfd.h $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h $(INCDIR)/demangle.h \
  $(INCDIR)/objalloc.h ld.h ldmain.h ldmisc.h ldexp.h \
  ldlang.h
pe-dll.o: pe-dll.c sysdep.h config.h $(INCDIR)/fopen-same.h \
  ../bfd/bfd.h $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h \
  ld.h ldexp.h ldlang.h ldwrite.h ldmisc.h ldgram.h ldmain.h \
  ldfile.h ldemul.h $(INCDIR)/coff/internal.h $(BFDDIR)/libcoff.h \
  deffile.h pe-dll.h
pep-dll.o: pep-dll.c pe-dll.c sysdep.h config.h $(INCDIR)/fopen-same.h \
  ../bfd/bfd.h $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h \
  ld.h ldexp.h ldlang.h ldwrite.h ldmisc.h ldgram.h ldmain.h \
  ldfile.h ldemul.h $(INCDIR)/coff/internal.h $(BFDDIR)/libcoff.h \
  deffile.h pep-dll.h
ldgram.o: ldgram.c sysdep.h config.h $(INCDIR)/fopen-same.h \
  ../bfd/bfd.h $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
  $(INCDIR)/bfdlink.h ld.h ldexp.h ldver.h ldlang.h ldfile.h \
  ldemul.h ldmisc.h ldmain.h mri.h ldctor.h ldlex.h
ldlex.o: ldlex.c sysdep.h config.h $(INCDIR)/fopen-same.h \
  ../bfd/bfd.h $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h ld.h ldmisc.h \
  ldexp.h ldlang.h ldgram.h ldfile.h ldlex.h ldmain.h \
  $(INCDIR)/libiberty.h
deffilep.o: deffilep.c sysdep.h config.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h $(INCDIR)/safe-ctype.h \
  ../bfd/bfd.h $(INCDIR)/symcat.h ld.h ldmisc.h deffile.h
@


1.263
log
@Add new binutils target: moxie
@
text
@d945 1
a945 1
  $(ELF_DEPS) $(srcdir)/scripttempl/ip2k.sc ${GEN_DEPENDS}
@


1.262
log
@ld/
	* configure.in: Invoke ACX_PROG_CMP_IGNORE_INITIAL.
	* Makefile.am (check-DEJAGNU): Set DO_COMPARE.
	* aclocal.m4: Regenerate.
	* configure: Regenerate.
	* Makefile.in: Regenerate.
ld/testsuite/
	* ld-bootstrap/bootstrap.exp: Use DO_COMPARE.  Remove unnecessary
	cleanup and log output.
@
text
@d179 1
d731 3
@


1.261
log
@make dep-am and regen
opcodes/
	* Makefile.am (HFILES): Move lm32-desc.h and lm32-opc.h from..
	(CFILES): ..here.
@
text
@d1770 1
@


1.260
log
@Add support for Score7 architecture.
@
text
@d2060 1
a2060 2
  ldlex.h ldgram.h ldlang.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/safe-ctype.h
d2065 1
a2065 2
  ldemul.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/filenames.h
d2068 4
a2071 5
  $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/obstack.h $(INCDIR)/bfdlink.h ld.h ldmain.h \
  ldexp.h ldlang.h ldgram.h ldlex.h ldmisc.h ldctor.h \
  ldfile.h ldemul.h $(INCDIR)/fnmatch.h $(INCDIR)/demangle.h \
  $(INCDIR)/libiberty.h $(INCDIR)/hashtab.h
d2074 4
a2077 4
  $(INCDIR)/safe-ctype.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/progress.h $(INCDIR)/bfdlink.h $(INCDIR)/filenames.h \
  ld.h ldmain.h ldmisc.h ldwrite.h ldexp.h ldlang.h ldgram.h \
  ldlex.h ldfile.h ldemul.h ldctor.h
d2080 4
a2083 5
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/demangle.h $(INCDIR)/libiberty.h ld.h ldmisc.h \
  ldexp.h ldlang.h ldgram.h ldlex.h ldmain.h ldfile.h \
  $(BFDDIR)/elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/internal.h
d2090 2
a2091 3
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/safe-ctype.h ld.h ldexp.h ldlang.h ldwrite.h \
  ldmisc.h ldgram.h ldmain.h
d2094 4
a2097 4
  ../bfd/bfdver.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h ld.h ldmain.h \
  ldmisc.h ldexp.h ldlang.h ldgram.h ldlex.h ldfile.h \
  ldver.h ldemul.h $(INCDIR)/demangle.h $(INCDIR)/libiberty.h
d2100 1
a2100 2
  ld.h ldexp.h ldlang.h ldmisc.h mri.h ldgram.h $(INCDIR)/libiberty.h \
  $(INCDIR)/ansidecl.h
d2103 3
a2105 3
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/demangle.h $(INCDIR)/libiberty.h $(INCDIR)/objalloc.h \
  ld.h ldmain.h ldmisc.h ldexp.h ldlang.h
d2108 4
a2111 4
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/safe-ctype.h ld.h ldexp.h ldlang.h ldwrite.h \
  ldmisc.h ldgram.h ldmain.h ldfile.h ldemul.h $(INCDIR)/coff/internal.h \
  $(BFDDIR)/libcoff.h deffile.h pe-dll.h
d2114 4
a2117 4
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/safe-ctype.h ld.h ldexp.h ldlang.h ldwrite.h \
  ldmisc.h ldgram.h ldmain.h ldfile.h ldemul.h $(INCDIR)/coff/internal.h \
  $(BFDDIR)/libcoff.h deffile.h pe-dll.h pep-dll.h
d2126 1
a2126 1
  $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h
d2129 1
a2129 2
  ../bfd/bfd.h $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
  ld.h ldmisc.h deffile.h
@


1.259
log
@bfd:
2009-02-03  Carlos O'Donell  <carlos@@codesourcery.com>

	* configure.in: AC_SUBST pdfdir.
	* Makefile.am: Add install-pdf, install-pdf-am
	and install-pdf-recursive targets. Define pdfdir.
	* doc/Makefile.am: Define pdf__strip_dir. Add
	install-pdf and install-pdf-am targets.
	* po/Make-in: Add install-pdf target.
	* configure: Regenerate.
	* Makefile.in: Regenerate
	* doc/Makefile.in: Regenerate.

binutils:
2009-02-03  Carlos O'Donell  <carlos@@codesourcery.com>

	* configure.in: AC_SUBST pdfdir.
	* Makefile.am: Add install-pdf, install-pdf-am,
	and install-pdf-recursive targets.
	* doc/Makefile.am: Define pdf__strip_dir. Add
	install-pdf and install-pdf-am targets.
	* po/Make-in: Add install-pdf target.
	* configure: Regenerate.
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Regenerate.

etc:
2009-02-03  Carlos O'Donell  <carlos@@codesourcery.com>

	* configure.in: AC_SUBST pdfdir.
	* configure: Regenerate.

gas:
2009-02-03  Carlos O'Donell  <carlos@@codesourcery.com>

	* configure.in: AC_SUBST pdfdir.
	* Makefile.am: Add install-pdf, install-pdf-am,
	and install-pdf-recursive targets.
	* doc/Makefile.am: Define pdf__strip_dir. Add
	install-pdf and install-pdf-am targets.
	* po/Make-in: Add install-pdf target.
	* configure: Regenerate.
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Regenerate.

gprof:
2009-02-03  Carlos O'Donell  <carlos@@codesourcery.com>

	* configure.in: AC_SUBST pdfdir.
	* Makefile.am: Add install-pdf, install-pdf-am,
	and install-pdf-recursive targets. Define pdf__strip_dir.
	* po/Make-in: Add install-pdf target.
	* configure: Regenerate.
	* Makefile.in: Regenerate.

ld:
2009-02-03  Carlos O'Donell  <carlos@@codesourcery.com>

	* configure.in: AC_SUBST pdfdir.
	* Makefile.am: Add install-pdf, install-pdf-am,
	and install-pdf-recursive targets. Define pdf__strip_dir.
	* po/Make-in: Add install-pdf target.
	* configure: Regenerate.
	* Makefile.in: Regenerate.

opcodes:
2009-02-03  Carlos O'Donell  <carlos@@codesourcery.com>

	* Makefile.am: Add install-pdf target.
	* po/Make-in: Add install-pdf target.
	* Makefile.in: Regenerate.
@
text
@d359 2
a360 1
	escoreelf.o \
d1560 8
a1567 4
escoreelf.c: $(srcdir)/emulparams/scoreelf.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/scoreelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} scoreelf "$(tdir_scoreelf)"
@


1.258
log
@bfd/
	* elf32-spu.c (struct spu_link_hash_table): Add init, line_size_log2,
	num_lines_log2.
	(struct got_entry): Add br_addr.
	(struct call_info): Add priority.
	(struct function_info): Add lr_store and sp_adjust.
	(spu_elf_setup): Init line_size_log2 and num_lines_log2.
	(spu_elf_find_overlays): For soft-icache, mark any section within cache
	area as an overlay, and check that no other overlays exist.  Look up
	icache overlay manager entry sym.
	(BRA_STUBS, BRA, BRASL): Define.
	(enum _stub_type): Replace ovl_stub with call_ovl_stub and br*_ovl_stub.
	(needs_ovl_stub): Adjust for soft-icache.  Return priority encoded
	in branch insn.
	(count_stub, build_stub): Support soft-icache.
	(build_spuear_stubs, process_stubs): Adjust build_stub call.
	(spu_elf_size_stubs): Size soft-icache stubs.
	(overlay_index): New function.
	(spu_elf_build_stubs): Make static.  Support soft-icache.
	(spu_elf_check_vma): Don't turn off auto_overlay if soft-icache.
	(find_function_stack_adjust): Save lr store and stack adjust insn
	offsets.
	(maybe_insert_function): Adjust find_function_stack_adjust call.
	(mark_functions_via_relocs): Retrieve priority.
	(remove_cycles): Only warn about pruned arcs when stack_analysis.
	(sort_calls): Sort by priority first.
	(mark_overlay_section): Ignore .ovl.init.
	(sum_stack): Only print when stack_analysis.
	(print_one_overlay_section): New function, extracted from..
	(spu_elf_auto_overlay): ..here.  Support soft-icache overlays.
	(spu_elf_stack_analysis): Only print when htab->stack_analysis.
	(spu_elf_final_link): Call spu_elf_stack_analysis for lrlive
	analysis.  Call spu_elf_build_stubs.
	(spu_elf_relocate_section): For soft-icache encode overlay index
	into addresses.
	(spu_elf_output_symbol_hook): Support soft-icache.
	(spu_elf_modify_program_headers: Likewise.
	* elf32-spu.h (struct spu_elf_params): Add lrlive_analysis.  Rename
	num_regions to num_lines.  Add line_size and max_branch.
	(enum _ovly_flavour): Add ovly_soft_icache.
	(spu_elf_build_stubs): Delete.
gas/
	* config/tc-spu.c (md_pseudo_table): Add "brinfo".
	(brinfo): New var.
	(md_assemble): Poke brinfo into branch instructions.
	(spu_brinfo): New function.
	(md_apply_fix): Don't assume insn fields start off at zero, mask
	them to remove possible brinfo.
ld/
	* emultempl/spuelf.em (params): Init new fields.
	(num_lines_set, line_size_set, icache_mgr, icache_mgr_stream): New vars.
	(spu_place_special_section): Adjust placement for soft-icache.  Pad
	soft-icache section to a fixed size.  Clear addr_tree.
	(spu_elf_load_ovl_mgr): Support soft-icache.  Map overlay manager
	sections a little more intelligently.
	(gld${EMULATION_NAME}_finish): Don't call spu_elf_build_stubs.
	(OPTION_SPU_NUM_LINES): Rename from OPTION_SPU_NUM_REGIONS.
	(OPTION_SPU_SOFT_ICACHE, OPTION_SPU_LINE_SIZE): Define.
	(OPTION_SPU_LRLIVE): Define.
	(PARSE_AND_LIST_LONGOPTS): Add new soft-icache options.
	(PARSE_AND_LIST_OPTIONS): Likewise.
	(PARSE_AND_LIST_ARGS_CASES): Handle them.
	* emultempl/spu_icache.S: Dummy file.
	* emultempl/spu_icache.o_c: Regenerate.
	* Makefile.am (eelf32_spu.c): Depend on spu_icache.o_c.
	(spu_icache.o_c): Add rule to build.
	(CLEANFILES): Zap temp files.
	(EXTRA_DIST): Add spu_icache.o_c.
	* Makefile.in: Regenerate.
ld/testsuite/
	* ld-spu/ovl.d: Allow for absolute branches in stubs.
	* ld-spu/ovl2.d: Likewise.
@
text
@d1856 41
@


1.257
log
@Add LM32 port.
@
text
@d756 1
a756 1
  $(srcdir)/emultempl/spu_ovl.o_c \
d767 7
d1854 1
a1854 1
CLEANFILES = dep.sed DEP DEPA DEP1 DEP2 spu_ovl.s spu_ovl.o
d1934 1
a1934 1
           deffilep.c deffilep.h $(man_MANS)
@


1.256
log
@2008-12-23  Tristan Gingold  <gingold@@adacore.com>

	* Makefile.am (EXTRA_DIST): Add deffilep.c and deffilep.h
	* Makefile.in: Regenerate.
@
text
@d183 2
d941 7
@


1.255
log
@	* Makefile.am (spu_ovl.o_c): Add missing line continuations.
	* Makefile.in: Regenerate.
@
text
@d1917 2
a1918 1
EXTRA_DIST = ldgram.c ldgram.h ldlex.c emultempl/spu_ovl.o_c $(man_MANS)
@


1.254
log
@run "make dep-am"
@
text
@d761 1
a761 1
	  cpp -DOVLY_IRQ_SAVE $(srcdir)/emultempl/spu_ovl.S spu_ovl.s
d763 1
a763 1
	  ../binutils/bin2c <spu_ovl.o >$@@
@


1.254.4.1
log
@Commit patches for ARCompact support to binutils-arc-20081103-branch .
@
text
@a115 3
	earcelf_prof.o \
	earclinux.o \
	earclinux_prof.o \
d527 1
a527 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elfarc.sc ${GEN_DEPENDS}
a528 10
earcelf_prof.c: $(srcdir)/emulparams/arcelf_prof.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elfarc.sc ${GEN_DEPENDS}
	${GENSCRIPTS} arcelf_prof "$(tdir_arcelf_prof)"
#for linux on arc
earclinux.c: $(srcdir)/emulparams/arclinux.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/arclinux.em $(srcdir)/scripttempl/arclinux.sc ${GEN_DEPENDS}
	${GENSCRIPTS} arclinux "$(tdir_arclinux)"
earclinux_prof.c: $(srcdir)/emulparams/arclinux_prof.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/arclinux.em $(srcdir)/scripttempl/arclinux.sc ${GEN_DEPENDS}
	${GENSCRIPTS} arclinux_prof "$(tdir_arclinux_prof)"
@


1.253
log
@	PR 6753
	* ldmain.c (check_for_scripts_dir, set_scripts_dir): Delete.
	(main): Don't set_scripts_dir here.
	* ldfile.c (check_for_scripts_dir, find_scripts_dir): New functions,
	largely based on ldmain.c versions.
	(ldfile_find_command_file): Set up search in script dir here without
	affecting library search.
	* Makefile.am (ldmain.o): No need to define SCRIPTDIR.
	(ldfile.o): New rule.
	* Makefile.in: Regenerate.
@
text
@d2024 1
a2024 1
  $(INCDIR)/elf/internal.h $(INCDIR)/bfdlink.h
d2054 1
a2054 1
  $(BFDDIR)/libcoff.h $(INCDIR)/bfdlink.h deffile.h pe-dll.h
d2060 1
a2060 2
  $(BFDDIR)/libcoff.h $(INCDIR)/bfdlink.h deffile.h pe-dll.h \
  pep-dll.h
@


1.253.2.1
log
@Regenerate makefile dependencies and .pot files.
@
text
@d2024 1
a2024 1
  $(INCDIR)/elf/internal.h
d2054 1
a2054 1
  $(BFDDIR)/libcoff.h deffile.h pe-dll.h
d2060 2
a2061 1
  $(BFDDIR)/libcoff.h deffile.h pe-dll.h pep-dll.h
@


1.253.2.2
log
@	* Makefile.am (spu_ovl.o_c): Add missing line continuations.
	* Makefile.in: Regenerate.
@
text
@d761 1
a761 1
	  cpp -DOVLY_IRQ_SAVE $(srcdir)/emultempl/spu_ovl.S spu_ovl.s; \
d763 1
a763 1
	  ../binutils/bin2c <spu_ovl.o >$@@; \
@


1.253.2.3
log
@2008-12-23  Tristan Gingold  <gingold@@adacore.com>

	* Makefile.am (EXTRA_DIST): Add deffilep.c and deffilep.h
	* Makefile.in: Regenerate.
@
text
@d1917 1
a1917 2
EXTRA_DIST = ldgram.c ldgram.h ldlex.c emultempl/spu_ovl.o_c \
           deffilep.c deffilep.h $(man_MANS)
@


1.252
log
@Add AVR architectures avr25, avr31, avr35, and avr51 to match GCC.
bfd/
	* archures.c (bfd_mach_avr25, bfd_mach_avr31, bfd_mach_avr35,
	bfd_mach_avr51): New.
	* bfd-in2.h: Regenerate.
	* cpu-avr.c (arch_info_struct): Add avr25, avr31, avr35, and avr51
	architectures. Change comments to match architecture comments in GCC.
	(compatible): Add test for new AVR architectures.
	* elf32-avr.c (bfd_elf_avr_final_write_processing): Recognize
	bfd_mach_avr25, bfd_mach_avr31, bfd_mach_avr35 and bfd_mach_avr51.
	(elf32_avr_object_p): Recognize E_AVR_MACH_AVR25, E_AVR_MACH_AVR31,
	E_AVR_MACH_AVR35 and E_AVR_MACH_AVR51.

gas/
	* config/tc-avr.c (mcu_types): Add avr25, avr31, avr35, and avr51
	architectures. Reorganize list to put mcu types in correct architectures
	and to order list same as in GCC. Use new ISA definitions in
	include/opcode/avr.h.
	* doc/c-avr.texi: Add avr25, avr31, avr35, and avr51 architecture
	descriptions. Reorganize descriptions to put mcu types in correct
	architectures and to order lists same as in GCC.

include/
	* elf/avr.h (E_AVR_MACH_AVR25, E_AVR_MACH_AVR31,
	E_AVR_MACH_AVR35, E_AVR_MACH_AVR51): Define.
	(EF_AVR_MACH): Redefine to 0x7F.
	* opcode/avr.h (AVR_ISA_TINY3, AVR_ISA_ALL, AVR_ISA_USB162): Remove.
	(AVR_ISA_AVR3): Redefine.
	(AVR_ISA_AVR1, AVR_ISA_AVR2, AVR_ISA_AVR31, AVR_ISA_AVR35,
	AVR_ISA_AVR3_ALL, AVR_ISA_AVR4, AVR_ISA_AVR5, AVR_ISA_AVR51,
	AVR_ISA_AVR6): Define.

ld/
	* Makefile.am (ALL_EMULATIONS): Add eavr25.o, eavr31.o, eavr35.o,
	and eavr51.o.
	Add rules for eavr25.c, eavr31.c, eavr35.c, eavr51.c.
	* Makefile.in: Regenerate.
	* configure.tgt (avr-*-*, targ_extra_emuls): Add avr25, avr31, avr35
	and avr51.
	* emulparams/avr25.sh: New file.
	* emulparams/avr31.sh: New file.
	* emulparams/avr35.sh: New file.
	* emulparams/avr51.sh: New file.
@
text
@d471 1
a471 2
	  -DSCRIPTDIR='"$(scriptdir)"' -DBINDIR='"$(bindir)"' \
	  -DTOOLBINDIR='"$(tooldir)/bin"' \
d475 5
@


1.251
log
@Set LC_ALL=C rather than unsetting LC_COLLATE for sort.
@
text
@d137 1
d139 2
d143 1
d613 4
d621 8
d637 4
@


1.250
log
@	* Makefile.am (spu_ovl.o): Merge rule into..
	(spu_ovl.o_c): ..this one.  Only run cpp for spu target.
	* Makefile.in: Regenerate.
@
text
@d462 1
a462 1
	for f in $(POTFILES); do echo $$f; done | LC_COLLATE= sort > tmp \
@


1.249
log
@	Include the spu_ovl ASCII form in the repository files.
	* emultempl/spuelf.em: No longer use `bin2c', use now `spu_ovl.o_c'.
	* Makefile.am (eelf32_spu.c): Depend now on `spu_ovl.o_c'.
	($(srcdir)/emultempl/spu_ovl.o_c): New target.
	($(srcdir)/emultempl/spu_ovl.o): Rename to...
	(spu_ovl.o): ...this one.
	* Makefile.in: Regenerate.
	* emultempl/spu_ovl.o_c: New file.
	* emultempl/spu_ovl.o: File removed.
@
text
@d734 1
a734 4
$(srcdir)/emultempl/spu_ovl.o_c: @@MAINT@@ spu_ovl.o
	../binutils/bin2c <spu_ovl.o >$@@
spu_ovl.o: @@MAINT@@ $(srcdir)/emultempl/spu_ovl.S
	cpp -DOVLY_IRQ_SAVE $(srcdir)/emultempl/spu_ovl.S spu_ovl.s
d737 3
a739 1
	  ../gas/as-new -o $@@ spu_ovl.s; \
@


1.248
log
@Revert my last change since it has not been approved.
@
text
@d730 1
a730 1
  $(srcdir)/emultempl/spu_ovl.o \
d734 3
a736 1
$(srcdir)/emultempl/spu_ovl.o: @@MAINT@@ $(srcdir)/emultempl/spu_ovl.S
d1815 1
a1815 1
CLEANFILES = dep.sed DEP DEPA DEP1 DEP2 spu_ovl.s
d1894 1
a1894 1
EXTRA_DIST = ldgram.c ldgram.h ldlex.c emultempl/spu_ovl.o $(man_MANS)
@


1.247
log
@	bfd/
	* elf.c (_bfd_elf_map_sections_to_segments): Don't put
	executable sections into the same segment with other
	read only sections if --sep-code.
	* elf32-bfin.c (elf32_bfin_code_in_l1): New variable.
	(elf32_bfin_data_in_l1): New variable.
	(elf32_bfin_final_write_processing): New.
	(elf32_bfin_special_sections[]): New.
	(elf_backend_final_write_processing): Define.
	(elf_backend_special_sections): Define.

	binutils/
	* readelf.c (get_machine_flags): Deal with Blackfin specific
	flags.

	include/
	* bfdlink.h (struct bfd_link_info): Add sep_code member
	variable.
	* elf/bfin.h (EF_BFIN_CODE_IN_L1): Define.
	(EF_BFIN_DATA_IN_L1): Define.

	ld/
	* Makefile.am (eelf32bfin.c): Depend on bfin.em.
	(eelf32bfinfd.c): Likewise.
	* Makefile.in: Regenerate.
	* gen-doc.texi: Set Blackfin.
	* ld.texinfo: Document --sep-code and Blackfin specific
	options.
	* ldmain.c (main): Initialize link_info.sep_code.
	* lexsup.c (enum option_values): Add OPTION_SEP_CODE.
	(ld_options[]): Add --sep-code.
	(parse_args): Deal with --sep-code.
	* emulparams/bfin.sh (EXTRA_EM_FILE): Define.
	* emulparams/elf32bfinfd.sh (OTHER_SECTIONS): Define.
	* emultempl/bfin.em: New file.
@
text
@d656 1
a656 1
  $(ELF_DEPS) $(srcdir)/emultempl/bfin.em \
d660 1
a660 1
  $(ELF_DEPS) $(srcdir)/emultempl/bfin.em \
@


1.246
log
@	The sha1 code is now in libiberty.
	* sha1.c: Remove.
	* sha1.h: Remove.
	* Makefile.am (CFILES): Remove sha1.c.
	(HFILES): Remove sha1.h.
	(OFILES): Remove sha1.o.
	(ld_new_SOURCES): Remove sha1.c.
	(sha1.o): Remove target.
	* Makefile.in: Rebuild.
@
text
@d656 1
a656 1
  $(ELF_DEPS) \
d660 1
a660 1
  $(ELF_DEPS) \
@


1.245
log
@bfd/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* po/SRC-POTFILES.in: Regenerate.
bfd/doc/
	* Makefile.in: Regenerate.
binutils/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Regenerate.
	* configure: Regenerate.
gas/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* configure: Regenerate.
gprof/
	* configure: Regenerate.
ld/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* configure: Regenerate.
opcodes/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* configure: Regenerate.
@
text
@d431 1
a431 1
	mri.c ldcref.c pe-dll.c pep-dll.c sha1.c
d435 1
a435 1
	ldwrite.h mri.h deffile.h pe-dll.h pep-dll.h elf-hints-local.h sha1.h
d442 1
a442 1
	ldfile.o ldcref.o sha1.o ${EMULATION_OFILES} ${EMUL_EXTRA_OFILES}
d1699 1
a1699 1
	ldwrite.c ldexp.c ldemul.c ldver.c ldmisc.c ldfile.c ldcref.c sha1.c
a2036 1
sha1.o: sha1.c config.h sha1.h ../bfd/bfd_stdint.h
@


1.244
log
@	* Makefile.am (INCLUDES): Remove -D_GNU_SOURCE.
	* configure.in: Invoke AC_GNU_SOURCE.
	* Makefile.in: Regenerate.
	* config.in: Regenerate.
	* configure: Regenerate.
	* po/POTFILES.in: Regenerate.
@
text
@d1998 2
a1999 2
  $(BFDDIR)/elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h
@


1.243
log
@2007-08-10  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
@
text
@d104 1
a104 1
INCLUDES = -D_GNU_SOURCE -I. -I$(srcdir) -I../bfd -I$(BFDDIR) -I$(INCDIR) \
@


1.242
log
@2007-07-13  Roland McGrath  <roland@@redhat.com>

	* sha1.h: New file (from gnulib).
	* sha1.c: New file (from gnulib).
	* Makefile.am (CFILES, HFILES, OFILES, ld_new_SOURCES): Add them.
	(sha1.o): New target.
	* Makefile.in: Regenerated.
@
text
@d2037 1
a2050 1
sha1.o: sha1.c config.h sha1.h
@


1.241
log
@New port: National Semiconductor's CR16
@
text
@d431 1
a431 1
	mri.c ldcref.c pe-dll.c pep-dll.c
d435 1
a435 1
	ldwrite.h mri.h deffile.h pe-dll.h pep-dll.h elf-hints-local.h
d442 1
a442 1
	ldfile.o ldcref.o ${EMULATION_OFILES} ${EMUL_EXTRA_OFILES}
d447 1
a447 1
# yacc will produce working code which contain compile time warnings. 
d677 1
a677 1
	${GENSCRIPTS} elf32xc16xs "$(tdir_xc16xs)"		
d752 1
a752 1
  $(srcdir)/scripttempl/elf32cr16.sc ${GEN_DEPENDS} 
d771 1
a771 1
  $(srcdir)/scripttempl/elf32crx.sc ${GEN_DEPENDS} 
d1699 1
a1699 1
	ldwrite.c ldexp.c ldemul.c ldver.c ldmisc.c ldfile.c ldcref.c
d2050 1
@


1.240
log
@	* Makefile.am: Add eelf32_spu.o rule.
	* Makefile.in: Regenerate.
	* emultempl/spuelf.em: Revert last change.  Instead use EMBEDSPU
	defined in Makefile for embedspu name.
@
text
@d160 1
d750 4
@


1.239
log
@bfd/

2007-06-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ACLOCAL_AMFLAGS): Add -I . -I ../config.

	* acinclude.m4: Don't include m4 files. Remove libtool
	kludge.

	* Makefile.in: Regenerated.
	* doc/Makefile.in: Likewise.
	* aclocal.m4: Likewise.
	* configure: Likewise.

binutils/

2007-06-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ACLOCAL_AMFLAGS): Add -I ../config -I ../bfd.

	* acinclude.m4: Removed.

	* Makefile.in: Regenerated.
	* aclocal.m4: Likewise.
	* configure: Likewise.

gas/

2007-06-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ACLOCAL_AMFLAGS): Add -I ../config -I ../bfd.

	* acinclude.m4: Don't include m4 files.
	(BFD_BINARY_FOPEN): Removed.
	Remove libtool kludge.

	* Makefile.in: Regenerated.
	* doc/Makefile.in: Likewise.
	* aclocal.m4: Likewise.
	* configure: Likewise.

gprof/

2007-06-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ACLOCAL_AMFLAGS): Add -I ../config -I ../bfd.

	* acinclude.m4: Removed.

	* Makefile.in: Regenerated.
	* aclocal.m4: Likewise.
	* configure: Likewise.

ld/

2007-06-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ACLOCAL_AMFLAGS): Add -I ../config -I ../bfd.

	* acinclude.m4: Removed.

	* Makefile.in: Regenerated.
	* aclocal.m4: Likewise.
	* configure: Likewise.

opcodes/

2007-06-14  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ACLOCAL_AMFLAGS): Add -I ../config -I ../bfd.

	* acinclude.m4: Removed.

	* Makefile.in: Regenerated.
	* doc/Makefile.in: Likewise.
	* aclocal.m4: Likewise.
	* configure: Likewise.
@
text
@d471 4
@


1.238
log
@
bfd/
	Many files: Include sysdep.h before bfd.h.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
binutils/
	* bucumm.h: Split off host dependencies to..
	* sysdep.h: ..here.
	Many files: Include sysdep.h.  Remove duplicate headers and reorder.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
ld/
	Many files: Include sysdep.h first.  Remove duplicate headers.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
opcodes/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* ns32k-dis.c: Include sysdep.h first.
@
text
@d4 1
a4 1
ACLOCAL_AMFLAGS = -I ..
@


1.237
log
@	* ldcref.c (cref_fill_array): Call bfd_demangle rather than demangle.
	* ldlang.c (lang_one_common): Likewise.
	* ldmisc.c (vfinfo): Likewise.
	(demangle): Delete.
	* ldmisc.h (demangle): Delete.
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
@
text
@d1952 2
a1953 2
ldctor.o: ldctor.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
d1956 2
a1957 2
ldemul.o: ldemul.c config.h ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/symcat.h sysdep.h $(INCDIR)/fopen-same.h \
d1960 2
a1961 2
ldexp.o: ldexp.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
d1965 2
a1966 2
ldfile.o: ldfile.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
d1971 2
a1972 2
ldlang.o: ldlang.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
d1978 2
a1979 2
ldmain.o: ldmain.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
d1984 3
a1986 3
ldmisc.o: ldmisc.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/symcat.h $(INCDIR)/bfdlink.h sysdep.h config.h \
  $(INCDIR)/fopen-same.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
d1991 6
a1996 6
ldver.o: ldver.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/symcat.h ../bfd/bfdver.h sysdep.h config.h \
  $(INCDIR)/fopen-same.h ld.h ldver.h ldexp.h ldlang.h \
  ldfile.h ldemul.h ldmain.h
ldwrite.o: ldwrite.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
d2000 9
a2008 9
lexsup.o: lexsup.c config.h ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/symcat.h ../bfd/bfdver.h sysdep.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h ld.h ldmain.h ldmisc.h ldexp.h \
  ldlang.h ldgram.h ldlex.h ldfile.h ldver.h ldemul.h \
  $(INCDIR)/demangle.h $(INCDIR)/libiberty.h
mri.o: mri.c ../bfd/bfd.h $(INCDIR)/ansidecl.h $(INCDIR)/symcat.h \
  sysdep.h config.h $(INCDIR)/fopen-same.h ld.h ldexp.h \
  ldlang.h ldmisc.h mri.h ldgram.h $(INCDIR)/libiberty.h \
d2010 2
a2011 2
ldcref.o: ldcref.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
d2015 2
a2016 2
pe-dll.o: pe-dll.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
d2021 2
a2022 2
pep-dll.o: pep-dll.c pe-dll.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
d2028 2
a2029 2
ldgram.o: ldgram.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
d2032 2
a2033 2
ldlex.o: ldlex.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
d2037 3
a2039 3
deffilep.o: deffilep.c $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/safe-ctype.h ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
@


1.236
log
@	* Makefile.am: Add ACLOCAL_AMFLAGS.
	* Makefile.in: Regenerate.
@
text
@d1963 1
a1963 1
  ldgram.h ldlang.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
d2001 1
a2001 1
  $(INCDIR)/symcat.h sysdep.h $(INCDIR)/fopen-same.h \
d2013 2
a2014 2
  $(INCDIR)/objalloc.h ld.h ldmain.h ldmisc.h ldexp.h \
  ldlang.h
@


1.235
log
@	* Makefile.am: Add dependency on ldemul-list.h for powerpc and
	spu target emul files.
	* configure.in: Check for mkstemp and waitpid.
	* Makefile.in: Regenerate.
	* configure: Regenerate.
	* config.in: Regenerate.
	* ldlang.c (input_file_chain): Make global.
	(lang_add_input_file): Don't set lang_has_input_file here.
	* ldlang.h (input_file_chain): Declare.
	* emultempl/ppc32elf.em (ppc_recognized_file): New function.
	(LDEMUL_RECOGNIZED_FILE): Define.
	* emultempl/ppc64elf.em (ppc64_recognized_file): New function.
	(LDEMUL_RECOGNIZED_FILE): Define.
	* emultempl/spuelf.em (struct tflist): New.
	(tmp_file_list): New var.
@
text
@d4 1
@


1.234
log
@bfd/

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (bfdver.h): Substitute report_bugs_to.  Also
	create doc/bfdver.texi.
	* Makefile.in: Regenerated.

	* configure.in (--with-bugurl): New option.
	* configure: Regenerated.

	* version.h (REPORT_BUGS_TO): New.

binutils/

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (REPORT_BUGS_TO): Removed.
	(INCLUDES): Remove -DREPORT_BUGS_TO.
	* Makefile.in: Regenerated.

	* bucomm.c: Don't include bfdver.h.
	* objdump.c: Likewise.
	* version.c: Likewise.

	* bucomm.h: Include bfdver.h.

	* configure.in (--with-bugurl): Removed.
	* configure: Regenerated.

	* doc/Makefile.am (binutils_TEXINFOS): Removed.
	(AM_MAKEINFOFLAGS): Add -I ../../bfd/doc.
	(TEXI2DVI): Likewise.
	(config.texi): Removed.
	(MOSTLYCLEANFILES): Remove config.texi.
	* doc/Makefile.in: Regenerated.

	* doc/binutils.texi: Include bfdver.texi instead of
	config.texi.

gas/

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (REPORT_BUGS_TO): Removed.
	(INCLUDES): Remove -DREPORT_BUGS_TO.
	* Makefile.in: Regenerated.

	* configure.in (--with-bugurl): Removed.
	* configure: Regenerated.

	* doc/Makefile.am (as_TEXINFOS): Remove gasver.texi.
	(AM_MAKEINFOFLAGS): Add -I ../../bfd/doc.
	(TEXI2DVI): Likewise.
	(gasver.texi): Removed.
	(MOSTLYCLEANFILES): Remove gasver.texi.
	(as.1): Don't depend on gasver.texi.
	* doc/Makefile.in: Regenerated.

	* doc/as.texi: Include bfdver.texi instead of gasver.texi.

gprof/

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (REPORT_BUGS_TO): Removed.
	(INCLUDES): Remove -DREPORT_BUGS_TO.
	* Makefile.in: Regenerated.

	* configure.in (--with-bugurl): Removed.
	* configure: Regenerated.

ld/

2007-03-15  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ld_TEXINFOS): Remove ldver.texi.
	(AM_MAKEINFOFLAGS): Add -I ../../bfd/doc.
	(TEXI2DVI): Likewise.
	(REPORT_BUGS_TO): Removed.
	(INCLUDES): Remove -DREPORT_BUGS_TO.
	(ldver.texi): Likewise.
	(ld.1): Don't depend on ldver.texi.
	(MOSTLYCLEANFILES): Remove ldver.texi.
	* Makefile.in: Regenerated.

	* configure.in (--with-bugurl): Removed.
	* configure: Regenerated.

	* lexsup.c: Include bfdver.h.

	* ld.texinfo: Include bfdver.texi instead of ldver.texi.
@
text
@d725 1
d823 1
d829 1
d835 1
d841 1
d862 1
d868 1
d874 1
d880 1
d884 1
d889 1
@


1.233
log
@binutils:
	* configure.in (REPORT_BUGS_TEXI): Define to Texinfo version of
	bug-reporting URL.
	* doc/Makefile.am (config.texi): Define BUGURL.
	* doc/binutils.texi: Use BUGURL.  Remove text about large files
	and uuencoding.
	* Makefile.in, configure, doc/Makefile.in: Regenerate.

gas:
	* configure.in (REPORT_BUGS_TEXI): Define to Texinfo version of
	bug-reporting URL.
	* doc/Makefile.am (gasver.texi): Define BUGURL.
	* doc/as.texinfo: Use BUGURL.
	* Makefile.in, configure, doc/Makefile.in: Regenerate.

ld:
	* configure.in (REPORT_BUGS_TEXI): Define to Texinfo version of
	bug-reporting URL.
	* Makefile.am (ldver.texi): Define BUGURL.
	* ld.texinfo: Use BUGURL.
	* Makefile.in, configure: Regenerate.
@
text
@d94 1
a94 1
ld_TEXINFOS = configdoc.texi ldver.texi
d98 4
a101 4
AM_MAKEINFOFLAGS = -I $(srcdir) -I $(BFDDIR)/doc -I $(top_srcdir)/../libiberty
TEXI2DVI = texi2dvi -I $(srcdir) -I $(BFDDIR)/doc -I $(top_srcdir)/../libiberty

REPORT_BUGS_TO = "\"@@REPORT_BUGS_TO@@\""
a104 1
	-DREPORT_BUGS_TO=$(REPORT_BUGS_TO) \
a1768 8
ldver.texi: $(srcdir)/../bfd/configure
	rm -f $@@
	eval `grep '^ *VERSION=' $(srcdir)/../bfd/configure`; \
	  echo "@@set VERSION $$VERSION" > $@@
	if [ -n "$(REPORT_BUGS_TEXI)" ]; then \
	  echo "@@set BUGURL $(REPORT_BUGS_TEXI)" >> $@@; \
	fi

d1772 1
a1772 1
ld.1: $(srcdir)/ld.texinfo configdoc.texi ldver.texi
d1781 1
a1781 1
MAINTAINERCLEANFILES = ldver.texi configdoc.texi
d1875 1
a1875 1
# Both info (ld.info) and ld.1 depend on configdoc.texi and ldver.texi.
@


1.232
log
@	bfd/
	* config.bfd (sh-*-uclinux, sh[12]-*-uclinux): New stanza.

	gas/
	* configure.tgt (sh-*-uclinux, sh[12]-*-uclinux): Specify as elf.

	ld/
	* Makefile.am (ALL_EMULATIONS): Add eshelf_uclinux.o
	(eshelf_uclinux.c): New target.
	* Makefile.in: Rebuilt.
	* configure.tgt (sh-*-uclinux* | sh[12]-*-uclinux*): New stanza.
	* emulparams/shelf_uclinux.sh: New.
@
text
@d1774 3
@


1.231
log
@	* Makefile.am (ALL_EMUL_EXTRA_OFILES): Remove spu_inc.o.
	(eelf32_spu.c): Adjust dependencies.
	* Makefile.in: Regenerate.
	* emultempl/spuelf.em (ovl_mgr): New array.  Insert spu_ovl.o
	code using bin2c.
	(_binary_spu_ovl_o_start, _binary_spu_ovl_o_end): Delete.
	(ovl_mgr_stream): Update.
	* emultempl/spu_inc.s: Delete.
	* emultempl/spu_none.s: Delete.
@
text
@d367 1
d1563 3
@


1.230
log
@	* emultempl/spuelf.em (_binary_builtin_ovl_mgr_start): Rename
	to _binary_spu_ovl_o_start.
	(_binary_builtin_ovl_mgr_end): Rename to _binary_spu_ovl_o_end.
	(spu_elf_load_ovl_mgr): Fatal error on missing overlay manager.
	* emultempl/spu_inc.s: Rename symbols.
	* emultempl/spu_none.s: New file.
	* emultempl/spu_ovl.S: Update copyright.
	* Makefile.am (spu_inc.o): Try building with ld -r first, then
	gas incbin, then build without overlay manager.
	* Makefile.in: Regenerate.
@
text
@d425 1
a425 2
	pep-dll.o \
	spu_inc.o
d724 1
a726 8
spu_inc.o: $(srcdir)/emultempl/spu_inc.s $(srcdir)/emultempl/spu_none.s \
  $(srcdir)/emultempl/spu_ovl.o
	cp $(srcdir)/emultempl/spu_ovl.o spu_ovl.o; \
	if ! ld -r -o $@@ -b binary spu_ovl.o; then \
	  if ! $(CC) -c -o $@@ $(srcdir)/emultempl/spu_inc.s; then \
	    $(CC) -c -o $@@ $(srcdir)/emultempl/spu_none.s; \
	  fi \
	fi
@


1.229
log
@top level:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.ac (TOPLEVEL_CONFIGURE_ARGUMENTS): Fix quoting.
	* configure: Regenerate.

bfd:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-pkgversion): New option.
	* configure: Regenerate.
	* Makefile.am (bfdver.h): Substitute for @@bfd_version_package@@.
	* Makefile.in: Regenerate.
	* version.h (BFD_VERSION_STRING): Define using
	@@bfd_version_package@@.

bfd/doc:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* Makefile.in: Regenerate.

binutils:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-bugurl): New option.
	* configure: Regenerate.
	* Makefile.am (REPORT_BUGS_TO): Define.
	(INCLUDES): Define REPORT_BUGS_TO.
	Regenerate dependencies.
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Regenerate.
	* bucomm.h: Remove include of bin-bugs.h.
	* addr2line.c (usage): Don't print empty REPORT_BUGS_TO.
	* ar.c (usage): Pass s to list_supported_targets.  Don't print
	empty REPORT_BUGS_TO.
	* coffdump.c (show_usage): Don't print empty REPORT_BUGS_TO.
	* cxxfilt.c (usage): Print bug url when giving help.
	* dlltool.c (usage): Likewise.
	* dllwrap.c (usage): Likewise.
	* nlmconv.c (show_usage): Don't print empty REPORT_BUGS_TO.
	* nm.c (usage): Likewise.
	* objcopy.c (copy_usage, strip_usage): Likewise.
	* objdump.c (usage): Likewise.
	* readelf.c ((usage): Likewise. Add STREAM argument.  Adjust
	callers.
	* size.c (usage): Don't print empty REPORT_BUGS_TO.
	* srconv.c (show_usage): Likewise.
	* strings.c (usage): Likewise.
	* sysdymp.c (show_usage): Likewise.
	* windres.c (usage): Likewise.

gas:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-bugurl): New option.
	* configure: Regenerate.
	* dep-in.sed: Remove bin-bugs.h.
	* Makefile.am (REPORT_BUGS_TO): Define.
	(INCLUDES): Define REPORT_BUGS_TO.
	(DEP_INCLUDES): Likewise.
	($(OBJS)): No longer depend on bin-bugs.h.
	* Makefile.in: Regenerate.
	* doc/Makefile.in: Regenerate.
	* as.c (show_usage): Don't print empty REPORT_BUGS_TO.
	* as.h: Remove include of bin-bugs.h.

gprof:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-pkgversion, --with-bugurl): New options.
	* configure: Regenerate.
	* Makefile.am (PKGVERSION, REPORT_BUGS_TO): Define.
	(INCLUDES): Define PKGVERSION and REPORT_BUGS_TO.
	Regenerate dependencies.
	* Makefile.in: Regenerate.
	* gprof.c (usage): Don't print empty REPORT_BUGS_TO.
	(main): Include PKGVERSION in version output.
	* gprof.h: Remove include of bin-bugs.h.

include:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* bin-bugs.h: Remove.

ld:
2007-02-17  Mark Mitchell  <mark@@codesourcery.com>
            Nathan Sidwell  <nathan@@codesourcery.com>
            Vladimir Prus  <vladimir@@codesourcery.com
            Joseph Myers  <joseph@@codesourcery.com>

	* configure.in (--with-bugurl): New option.
	* configure: Regenerate.
	* Makefile.am (REPORT_BUGS_TO): Define.
	(INCLUDES): Define REPORT_BUGS_TO.
	Regenerate dependencies.
	* Makefile.in: Regenerate.
	* ld.h: Remove include of bin-bugs.h.
	* lexsup.c (help): Don't print empty REPORT_BUGS_TO.
@
text
@d727 8
a734 2
spu_inc.o: $(srcdir)/emultempl/spu_inc.s $(srcdir)/emultempl/spu_ovl.o
	$(CC) -c -Wa,-I,$(srcdir)/emultempl -o $@@ $<
@


1.228
log
@Support for Toshiba MeP.
@
text
@d101 6
a106 1
INCLUDES = -D_GNU_SOURCE -I. -I$(srcdir) -I../bfd -I$(BFDDIR) -I$(INCDIR) @@INCINTL@@ $(HDEFINES) $(CFLAGS) -DLOCALEDIR="\"$(datadir)/locale\""
d1946 2
a1947 2
  $(INCDIR)/bfdlink.h $(INCDIR)/safe-ctype.h ld.h $(INCDIR)/bin-bugs.h \
  ldexp.h ldlang.h ldmisc.h ldgram.h ldmain.h ldctor.h
d1950 2
a1951 2
  $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h ldmisc.h \
  ldexp.h ldlang.h ldfile.h ldemul.h ldmain.h ldemul-list.h
d1954 2
a1955 2
  $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h ldmain.h \
  ldmisc.h ldexp.h ldgram.h ldlang.h $(INCDIR)/libiberty.h \
d1959 4
a1962 3
  $(INCDIR)/bfdlink.h $(INCDIR)/safe-ctype.h ld.h $(INCDIR)/bin-bugs.h \
  ldmisc.h ldexp.h ldlang.h ldfile.h ldmain.h ldgram.h \
  ldlex.h ldemul.h $(INCDIR)/libiberty.h $(INCDIR)/filenames.h
d1965 2
a1966 2
  $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h $(INCDIR)/obstack.h \
  $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h ldmain.h \
d1969 1
a1969 1
  $(INCDIR)/hashtab.h
d1972 3
a1974 3
  $(INCDIR)/safe-ctype.h $(INCDIR)/libiberty.h $(INCDIR)/progress.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/filenames.h ld.h $(INCDIR)/bin-bugs.h \
  ldmain.h ldmisc.h ldwrite.h ldexp.h ldlang.h ldgram.h \
d1978 5
a1982 4
  $(INCDIR)/fopen-same.h $(INCDIR)/libiberty.h $(INCDIR)/demangle.h \
  ld.h $(INCDIR)/bin-bugs.h ldmisc.h ldexp.h ldlang.h \
  ldgram.h ldlex.h ldmain.h ldfile.h $(BFDDIR)/elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
d1985 2
a1986 2
  $(INCDIR)/fopen-same.h ld.h $(INCDIR)/bin-bugs.h ldver.h \
  ldexp.h ldlang.h ldfile.h ldemul.h ldmain.h
d1989 2
a1990 2
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h \
  ld.h $(INCDIR)/bin-bugs.h ldexp.h ldlang.h ldwrite.h \
d1994 2
a1995 2
  $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h \
  ld.h $(INCDIR)/bin-bugs.h ldmain.h ldmisc.h ldexp.h \
d1997 1
a1997 1
  $(INCDIR)/demangle.h
d1999 3
a2001 2
  sysdep.h config.h $(INCDIR)/fopen-same.h ld.h $(INCDIR)/bin-bugs.h \
  ldexp.h ldlang.h ldmisc.h mri.h ldgram.h $(INCDIR)/libiberty.h
d2004 3
a2006 2
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h ld.h $(INCDIR)/bin-bugs.h \
  ldmain.h ldmisc.h ldexp.h ldlang.h
d2009 2
a2010 2
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h \
  ld.h $(INCDIR)/bin-bugs.h ldexp.h ldlang.h ldwrite.h \
d2012 2
a2013 2
  $(BFDDIR)/libcoff.h deffile.h pe-dll.h
pep-dll.o: pep-dll.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
d2015 2
a2016 2
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h \
  ld.h $(INCDIR)/bin-bugs.h ldexp.h ldlang.h ldwrite.h \
d2018 2
a2019 1
  $(BFDDIR)/libcoff.h deffile.h pep-dll.h
d2022 2
a2023 3
  $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h ldexp.h \
  ldver.h ldlang.h ldfile.h ldemul.h ldmisc.h ldmain.h \
  mri.h ldctor.h ldlex.h
d2026 3
a2028 3
  $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h \
  ldmisc.h ldexp.h ldlang.h ldgram.h ldfile.h ldlex.h \
  ldmain.h $(INCDIR)/libiberty.h
d2030 3
a2032 3
  $(INCDIR)/safe-ctype.h ../bfd/bfd.h $(INCDIR)/symcat.h \
  sysdep.h config.h $(INCDIR)/fopen-same.h ld.h $(INCDIR)/bin-bugs.h \
  ldmisc.h deffile.h
@


1.227
log
@bfd/
	* doc/Makefile.am (bfd_TEXINFOS): Set.
	(bfd.info bfd.dvi bfd.html): Delete rule.
	* doc/Makefile.in: Regenerated.
gas/
	* doc/Makefile.am (as_TEXINFOS): Set.
	(as.info as.dvi as.html): Delete rule.
	* doc/Makefile.in: Regenerated.
gprof/
	* Makefile.am (gprof_TEXINFOS): Set.
	(gprof.info gprof.dvi gprof.html): Delete rule.
	* Makefile.in: Regenerated.
ld/
	* Makefile.am (ld_TEXINFOS): Set.
	(ld.info ld.dvi ld.html): Delete rule.
	* Makefile.in: Regenerated.
@
text
@d180 1
d696 3
@


1.226
log
@bfd/
	* configure.in: Define GENINSRC_NEVER.
	* doc/Makefile.am (bfd.info): Remove srcdir prefix.
	(MAINTAINERCLEANFILES): Add info file.
	(DISTCLEANFILES): Pretend to add info file.
	* po/Make-in (.po.gmo): Put gmo files in objdir.
	* configure, Makefile.in, doc/Makefile.in: Regenerated.
binutils/
	* configure.in: Define GENINSRC_NEVER.
	* doc/Makefile.am (MAINTAINERCLEANFILES): Add info file.
	(DISTCLEANFILES): Pretend to add info file.
	* po/Make-in (.po.gmo): Put gmo files in objdir.
	* configure, Makefile.in, doc/Makefile.in: Regenerated.
gas/
	* configure.in: Define GENINSRC_NEVER.
	* doc/Makefile.am (as.info): Remove srcdir prefix.
	(MAINTAINERCLEANFILES): Add info file.
	(DISTCLEANFILES): Pretend to add info file.
	* po/Make-in (.po.gmo): Put gmo files in objdir.
	* configure, Makefile.in, doc/Makefile.in: Regenerated.
gprof/
	* configure.in: Define GENINSRC_NEVER.
	* doc/Makefile.am (gprof.info): Remove srcdir prefix.
	(MAINTAINERCLEANFILES): Add info file.
	(DISTCLEANFILES): Pretend to add info file.
	* po/Make-in (.po.gmo): Put gmo files in objdir.
	* configure, Makefile.in: Regenerated.
ld/
	* configure.in: Define GENINSRC_NEVER.
	* doc/Makefile.am (ld.info): Remove srcdir prefix.
	(MAINTAINERCLEANFILES): Add info file.
	(DISTCLEANFILES): Pretend to add info file.
	* po/Make-in (.po.gmo): Put gmo files in objdir.
	* configure, Makefile.in: Regenerated.
opcodes/
	* po/Make-in (.po.gmo): Put gmo files in objdir.
@
text
@d94 1
a1763 2
ld.info ld.dvi ld.html: $(srcdir)/ld.texinfo configdoc.texi ldver.texi

@


1.225
log
@	* Makefile.am (EXTRA_DIST): Put spu_ovl.o in the emultempl
	subdirectory.
	* Makefile.in: Regenerate.
@
text
@d1763 1
a1763 1
$(srcdir)/ld.info ld.dvi ld.html: $(srcdir)/ld.texinfo configdoc.texi ldver.texi
d1880 9
@


1.224
log
@New Cell SPU port.
@
text
@d1867 1
a1867 1
EXTRA_DIST = ldgram.c ldgram.h ldlex.c spu_ovl.o $(man_MANS)
@


1.223
log
@ld/
	* Makefile.am (eelf64bmip.c): Depend on emulparams/elf64bmip-defs.sh.
	(eelf64btsmip.c, eelf64ltsmip.c): Likewise.
	* Makefile.in: Regenerate.
	* emulparams/elf32bmipn32-defs.sh (INITIAL_READONLY_SECTIONS): Include
	.reginfo rather than .MIPS.options.
	* emulparams/elf64bmip-defs.sh: New file.
	* emulparams/elf64bmip.sh: Include it.
	(COMMONPAGESIZE): Delete.
	* emulparams/elf64btsmip.sh: As for elf64bmip.sh.

ld/testsuite/
	* ld-mips-elf/branch-misc-1.d: Set the start address to 0x20000000.
	* ld-mips-elf/jalbal.d: Likewise 0x200000a0.
	* ld-mips-elf/jaloverflow-2.d: Likewise 0x20000000.
	* ld-mips-elf/reloc-3-n32.d: Likewise.
	* ld-mips-elf/reloc-3.d: Likewise.
	* ld-mips-elf/textrel-1.d: Don't require a specific file offset for
	.dynamic.
@
text
@d137 1
d418 2
a419 1
	pep-dll.o
d714 11
d1788 1
a1788 1
CLEANFILES = dep.sed DEP DEPA DEP1 DEP2
d1867 1
a1867 1
EXTRA_DIST = ldgram.c ldgram.h ldlex.c $(man_MANS)
@


1.222
log
@        * emulparams/xtensa-config.sh: Delete file.
        * emulparams/elf32xtensa.sh: Set MAXPAGESIZE here instead of including
        xtensa-config.sh.
        * Makefile.am (eelf32xtensa.c): Remove dependency on xtensa-config.sh.
        * Makefile.in: Regenerate.
@
text
@d915 1
d930 1
d935 1
a935 1
  $(srcdir)/emulparams/elf64btsmip.sh \
@


1.221
log
@Add x86_64-mingw64 target
@
text
@d674 1
a674 2
eelf32xtensa.c: $(srcdir)/emulparams/elf32xtensa.sh \
  $(srcdir)/emulparams/xtensa-config.sh $(ELF_DEPS) \
@


1.220
log
@Add support for Score target.
@
text
@d243 1
d416 2
a417 1
	pe-dll.o
d421 1
a421 1
	mri.c ldcref.c pe-dll.c
d425 1
a425 1
	ldwrite.h mri.h deffile.h pe-dll.h elf-hints-local.h
d1108 3
d1978 6
@


1.219
log
@bfd/

2006-09-07  H.J. Lu  <hongjiu.lu@@intel.com>

	* elf-bfd.h (elf_link_hash_entry): Add a dynamic field.
	(bfd_elf_link_mark_dynamic_symbol): New.
	(SYMBOLIC_BIND): New.

	* elf32-i386.c (elf_i386_check_relocs): Replace info->symbolic
	with SYMBOLIC_BIND (info, h).
	(elf_i386_relocate_section): Likewise.
	* elf64-x86-64.c (elf64_x86_64_check_relocs): Likewise.
	(elf64_x86_64_relocate_section): Likewise.
	* elfxx-ia64.c (elfNN_ia64_check_relocs): Likewise.

	* elflink.c (bfd_elf_link_mark_dynamic_symbol): New.
	(bfd_elf_record_link_assignment): Call
	bfd_elf_link_mark_dynamic_symbol on new entry.
	(_bfd_elf_merge_symbol): Likewise.
	(_bfd_elf_export_symbol): Return if the symbol isn't exported.
	(_bfd_elf_fix_symbol_flags): Replace info->symbolic with
	SYMBOLIC_BIND (info, h).
	(_bfd_elf_dynamic_symbol_p): Likewise.
	(_bfd_elf_symbol_refs_local_p): Likewise.
	(bfd_elf_size_dynamic_sections): Updated.

include/

2006-09-07  H.J. Lu  <hongjiu.lu@@intel.com>

	* bfdlink.h (bfd_elf_dynamic_list): New.
	(bfd_link_info): Add a dynamic field.

ld/

2006-09-07  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (CXX): Set to g++.
	(CXX_FOR_TARGET): Likewise.
	* Makefile.in: Regenerated.

	* NEWS: Mention --dynamic-list.

	* ld.texinfo: Document --dynamic-list.

	* ldgram.y: Support dynamic list.

	* ldlang.c (lang_process): Call lang_finalize_version_expr_head
	on link_info.dynamic if needed.
	(lang_append_dynamic_list): New.
	(lang_append_dynamic_list_cpp_typeinfo): New.
	* ldlang.h (lang_append_dynamic_list): Likewise.
	* ldlang.h (lang_append_dynamic_list_cpp_typeinfo): Likewise.

	* ldlex.h (input_enum): Add input_dynamic_list.
	* ldlex.l: Handle it.

	* ldmain.c (main): Initialize link_info.dynamic.

	* lexsup.c (option_values): Add OPTION_DYNAMIC_LIST and
	OPTION_DYNAMIC_LIST_CPP_TYPEINFO.
	(ld_options): Add entries for OPTION_DYNAMIC_LIST and
	OPTION_DYNAMIC_LIST_CPP_TYPEINFO.
	(parse_args): Handle OPTION_DYNAMIC_LIST and
	OPTION_DYNAMIC_LIST_CPP_TYPEINFO.

ld/testsuite/

2006-09-07  H.J. Lu  <hongjiu.lu@@intel.com>

	* ld-elf/dl1.c: New file.
	* ld-elf/dl1.list: Likewise.
	* ld-elf/dl1.out: Likewise.
	* ld-elf/dl1main.c: Likewise.
	* ld-elf/dl2.c: Likewise.
	* ld-elf/dl2.list: Likewise.
	* ld-elf/dl2a.out: Likewise.
	* ld-elf/dl2b.out: Likewise.
	* ld-elf/dl2main.c: Likewise.
	* ld-elf/dl2xxx.c: Likewise.
	* ld-elf/dl2xxx.list: Likewise.
	* ld-elf/dl3.cc: Likewise.
	* ld-elf/dl3.list: Likewise.
	* ld-elf/dl3a.out: Likewise.
	* ld-elf/dl3b.out: Likewise.
	* ld-elf/dl3header.h: Likewise.
	* ld-elf/dl3main.cc: Likewise.

	* ld-elf/shared.exp: Updated.

	* lib/ld-lib.exp (run_ld_link_exec_tests): Take an optional
	argument for source language. Use CC/CXX for link, depending
	on source language.
	(run_cc_link_tests): Likewise.
@
text
@d343 1
d1470 4
@


1.218
log
@bfd
* Makefile.am: Add rules to build pe-arm-wince.lo and pei-arm-wince.lo objects.
* Makefile.in: Regenerate.
* pe-arm-wince.c: New file.
* pei-arm-wince.c: New file.
* pei-arm.c: Remove ARM_WINCE block.
* pe-arm.c: Remove ARM_WINCE block. Rename
bfd_arm_pe_allocate_interworking_sections,
bfd_arm_pe_get_bfd_for_interworking, and
bfd_arm_pe_process_before_allocation to
bfd_armpe_allocate_interworking_sections,
bfd_armpe_get_bfd_for_interworking, and
bfd_armpe_process_before_allocation. Move them before including bfd.h.
* bfd.c: ARM wince bfd format names were renamed. Adjust.
* coff-arm.c [ARM_WINCE]: Adjust so Windows CE doesn't end up with unexpected/conflicting relocs.
* targets.c: The arm-wince-pe target got its own new vector.  Adjust.
* config.bfd: Likewise.
* configure.in: Likewise.
* configure: Regenerate.

binutils
* configure.in: Split arm-pe and arm-wince-pe. Build dlltool with -DDLLTOOL_ARM_WINCE for Windows CE case.
* configure: Regenerate.
* dlltool.c: Add support for arm-wince.

gas
* Makefile.am (TARG_ENV_HFILES): Add te-wince-pe.h.
* Makefile.in: Regenerate.
* config/tc-arm.h [TARGET_FORMAT]: ARM wince bfd names were  renamed. Adjust.

ld
* Makefile.am: Split arm-wince into its own emulation.
* Makefile.in: Regenerate.
* configure.tgt: Set targ_emul to arm_wince_pe for ARM Windows CE targets.
* pe-dll.c : Define PE_ARCH_arm_wince.
  (pe_detail_list): Add PE_ARCH_arm_wince case.
  (make_one): Handle PE_ARCH_arm_epoc and PE_ARCH_arm_wince cases.
* emulparams/arm_wince_pe.sh: New file.
* emultempl/pe.em: Handle new TARGET_IS_arm_wince_pe define.
  Remap bfd_arm_allocate_interworking_sections, bfd_arm_get_bfd_for_interworking and
  bfd_arm_process_before_allocation for arm-pe and arm-wince-pe targets too.
  (gld_${EMULATION_NAME}_recognized_file): Handle arm-wince and arm-epoc bfd format names.
@
text
@d76 1
a76 1
CXX = gcc
d78 1
a78 1
  if [ -f $$r/../gcc/xgcc ] ; then \
d80 1
a80 1
      echo $$r/../gcc/xgcc -B$$r/../gcc/ -idirafter $$r/../newlib/targ-include -idirafter $${srcroot}/../newlib/libc/include -nostdinc; \
d82 1
a82 1
      echo $$r/../gcc/xgcc -B$$r/../gcc/; \
d88 1
a88 1
      echo gcc | sed '$(transform)'; \
@


1.217
log
@bfd/
2006-08-02  Richard Sandiford  <richard@@codesourcery.com>
	    Kazu Hirata  <kazu@@codesourcery.com>
	    Phil Edwards  <phil@@codesourcery.com>
	    Nathan Sidwell  <nathan@@codesourcery.com>

	* config.bfd (sh-*-vxworks): Use bfd_elf32_shvxworks_vec and
	bfd_elf32_shlvxworks_vec.
	* configure.in (bfd_elf32_sh64_vec): Add elf-vxworks.lo.
	(bfd_elf32_sh64l_vec, bfd_elf32_sh64lin_vec): Likewise.
	(bfd_elf32_sh64blin_vec, bfd_elf32_sh64lnbsd_vec): Likewise.
	(bfd_elf32_sh64nbsd_vec, bfd_elf32_sh_vec): Likewise.
	(bfd_elf32_shblin_vec, bfd_elf32_shl_vec): Likewise.
	(bfd_elf32_shl_symbian_vec, bfd_elf32_shlin_vec): Likewise.
	(bfd_elf32_shlnbsd_vec, bfd_elf32_shnbsd_vec): Likewise.
	(bfd_elf32_shlvxworks_vec, bfd_elf32_shvxworks_vec): New stanzas.
	* configure: Regenerate.
	* Makefile.am: Regenerate dependencies.
	* Makefile.in: Regenerate.
	* elf-vxworks.c (elf_vxworks_gott_symbol_p): New function.
	(elf_vxworks_add_symbol_hook): Use it.
	(elf_vxworks_link_output_symbol_hook): Likewise.  Use the hash
	table entry to check for weak undefined symbols and to obtain
	the original bfd.
	(elf_vxworks_emit_relocs): Use target_index instead of this_idx.
	* elf32-sh-relocs.h: New file, split from elf32-sh.c.
	(R_SH_DIR32): Use SH_PARTIAL32 for the partial_inplace field,
	SH_SRC_MASK32 for the src_mask field, and SH_ELF_RELOC for the
	special_function field.
	(R_SH_REL32): Use SH_PARTIAL32 and SH_SRC_MASK32 here too.
	(R_SH_REL32, R_SH_TLS_GD_32, R_SH_TLS_LD_32): Likewise.
	(R_SH_TLS_LDO_32, R_SH_TLS_IE_32, R_SH_TLS_LE_32): Likewise.
	(R_SH_TLS_DTPMOD32, R_SH_TLS_DTPOFF32, R_SH_TLS_TPOFF32): Likewise.
	(R_SH_GOT32, R_SH_PLT32, R_SH_COPY, R_SH_GLOB_DAT): Likewise.
	(R_SH_JMP_SLOT, R_SH_RELATIVE, R_SH_GOTOFF, R_SH_GOTPC): Likewise.
	(SH_PARTIAL32, SH_SRC_MASK32, SH_ELF_RELOC): Undefine at end of file.
	* elf32-sh.c: Include elf32-vxworks.h.
	(MINUS_ONE): Define.
	(sh_elf_howto_table): Include elf32-sh-relocs.h with SH_PARTIAL32
	set to TRUE, SH_SRC_MASK32 set to 0xffffffff, and SH_ELF_RELOC set
	to sh_elf_reloc.
	(sh_vxworks_howto_table): New variable.  Include elf32-sh-relocs.h
	with SH_PARTIAL32 set to FALSE, SH_SRC_MASK32 set to 0, and
	SH_ELF_RELOC set to bfd_elf_generic_reloc.
	(vxworks_object_p, get_howto_table): New functions.
	(sh_elf_reloc_type_lookup): Fix typo.  Use get_howto_table.
	(sh_elf_info_to_howto): Use get_howto_table.
	(sh_elf_relax_section): Honor the partial_inplace field of the
	R_SH_DIR32 howto.
	(sh_elf_relax_delete_bytes): Likewise.
	(elf_sh_plt_info): New structure.
	(PLT_ENTRY_SIZE): Replace both definitions with...
	(ELF_PLT_ENTRY_SIZE): ...this new macro, with separate definitions for
	INCLUDE_SHMEDIA and !INCLUDE_SHMEDIA.
	(elf_sh_plt0_entry_be): Update sizes of both definitions accordingly.
	(elf_sh_plt0_entry_le): Likewise.
	(elf_sh_plt_entry_be, elf_sh_plt_entry_le): Likewise.
	(elf_sh_pic_plt_entry_be, elf_sh_pic_plt_entry_le): Likewise.
	(elf_sh_plts): New structure, with separate definitions for
	INCLUDE_SHMEDIA and !INCLUDE_SHMEDIA.
	(elf_sh_plt0_entry): Delete both definitions.
	(elf_sh_plt_entry, elf_sh_pic_plt_entry): Likewise.
	(elf_sh_sizeof_plt, elf_sh_plt_plt0_offset): Likewise.
	(elf_sh_plt_temp_offset, elf_sh_plt_symbol_offset): Likewise.
	(elf_sh_plt_reloc_offset): Likewise.
	(movi_shori_putval): Delete in favor of...
	(install_plt_field): ...this new function, with separate definitions
	for INCLUDE_SHMEDIA and !INCLUDE_SHMEDIA.
	(get_plt_info): New function, with separate definitions
	for INCLUDE_SHMEDIA and !INCLUDE_SHMEDIA.
	(elf_sh_plt0_linker_offset, elf_sh_plt0_gotid_offset): Delete.
	(VXWORKS_PLT_HEADER_SIZE, VXWORKS_PLT_ENTRY_SIZE): New macros.
	(vxworks_sh_plt0_entry_be, vxworks_sh_plt0_entry_le): New constants.
	(vxworks_sh_plt_entry_be, vxworks_sh_plt_entry_le): Likewise.
	(vxworks_sh_pic_plt_entry_be, vxworks_sh_pic_plt_entry_le): Likewise.
	(get_plt_index, get_plt_offset): New functions.
	(elf_sh_link_hash_table): Add srelplt2, plt_info and vxworks_p fields.
	(sh_elf_link_hash_table_create): Initialize them.
	(sh_elf_create_dynamic_sections): Call
	elf_vxworks_create_dynamic_sections for VxWorks.
	(allocate_dynrelocs): Use htab->plt_info to get the size of PLT
	entries.  Allocate relocation entries in .rela.plt.unloaded if
	generating a VxWorks executable.
	(sh_elf_always_size_sections): New function.
	(sh_elf_size_dynamic_sections): Extend .rela.plt handling to
	.rela.plt.unloaded.
	(sh_elf_relocate_section): Use get_howto_table.  Honor
	partial_inplace when calculating the addend for dynamic
	relocations.  Use get_plt_index.
	(sh_elf_finish_dynamic_symbol): Use get_plt_index, install_plt_field
	and htab->plt_info.  Fill in the bra .plt offset for VxWorks
	executables.  Populate .rela.plt.unloaded.  Do not make
	_GLOBAL_OFFSET_TABLE_ absolute on VxWorks.
	(sh_elf_finish_dynamic_sections): Use install_plt_field and
	htab->plt_info.  Handle cases where there is no special PLT header.
	Populate the first relocation in .rela.plt.unloaded and fix up
	the remaining entries.
	(sh_elf_plt_sym_val): Use get_plt_info.
	(elf_backend_always_size_sections): Define.
	(TARGET_BIG_SYM, TARGET_BIG_NAME): Override for VxWorks.
	(TARGET_LITTLE_SYM, TARGET_BIG_SYM): Likewise.
	(elf32_bed, elf_backend_want_plt_sym): Likewise.
	(elf_symbol_leading_char, elf_backend_want_got_underscore): Likewise.
	(elf_backend_grok_prstatus, elf_backend_grok_psinfo): Likewise.
	(elf_backend_add_symbol_hook): Likewise.
	(elf_backend_link_output_symbol_hook): Likewise.
	(elf_backend_emit_relocs): Likewise.
	(elf_backend_final_write_processing): Likewise.
	(ELF_MAXPAGESIZE, ELF_COMMONPAGESIZE): Likewise.
	* targets.c (bfd_elf32_shlvxworks_vec): Declare.
	(bfd_elf32_shvxworks_vec): Likewise.
	(_bfd_target_vector): Include bfd_elf32_shlvxworks_vec and
	bfd_elf32_shvxworks_vec.

gas/
	* config/tc-sh.c (apply_full_field_fix): New function.
	(md_apply_fix): Use it instead of md_number_to_chars.  Do not fill
	in fx_addnumber for BFD_RELOC_32_PLT_PCREL.
	(tc_gen_reloc): Use fx_addnumber rather than 0 as the default case.
	* config/tc-sh.h (TARGET_FORMAT): Override for TE_VXWORKS.

ld/
2006-08-02  Richard Sandiford  <richard@@codesourcery.com>
	    Kazu Hirata  <kazu@@codesourcery.com>
	    Phil Edwards  <phil@@codesourcery.com>

	* Makefile.am (ALL_EMULATIONS): Add eshelf_vxworks.o and
	eshlelf_vxworks.o.
	(eshelf_vxworks.c, eshlelf_vxworks.c): New rules.
	* Makefile.in: Regenerate.
	* configure.tgt (sh-*-vxworks): Use shelf_vxworks and
	shlelf_vxworks.
	* emulparams/shelf_vxworks.sh: New file.
	* emulparams/shlelf_vxworks.sh: Likewise.
	* emulparams/vxworks.sh (FINI): Prefix _etext with ${SYMPREFIX}.
	(OTHER_END_SYMBOLS): Likewise _ehdr.
	(DATA_END_SYMBOLS): Likewise _edata.
	* emultempl/vxworks.em (vxworks_after_open): Check whether output_bfd
	is indeed an ELF file before dealing with --force-dynamic.

ld/testsuite/
	* ld-sh/rd-sh.exp: Treat vxworks1-static.d specially.
	* ld-sh/sh-vxworks.exp: New file.
	* ld-sh/sh.exp: Extend sh-linux SIZEOF_HEADERS handling to
	sh-*-vxworks.
	* ld-sh/vxworks1-le.dd, ld-sh/vxworks1-lib-le.dd,
	* ld-sh/vxworks1-lib.dd, ld-sh/vxworks1-lib.nd,
	* ld-sh/vxworks1-lib.rd, ld-sh/vxworks1-lib.s,
	* ld-sh/vxworks1-static.d, ld-sh/vxworks1.dd,
	* ld-sh/vxworks1.ld, ld-sh/vxworks1.rd, ld-sh/vxworks1.s,
	* ld-sh/vxworks2-static.sd, ld-sh/vxworks2.s,
	* ld-sh/vxworks2.sd, ld-sh/vxworks3-le.dd,
	* ld-sh/vxworks3-lib-le.dd, ld-sh/vxworks3-lib.dd,
	* ld-sh/vxworks3-lib.s, ld-sh/vxworks3.dd, ld-sh/vxworks3.s,
	* ld-sh/vxworks4.d, ld-sh/vxworks4a.s, ld-sh/vxworks4b.s,
	* ld-sh/reloc1.s, ld-sh/reloc1.d: New tests.
@
text
@d111 1
d573 3
@


1.216
log
@ld/
	* Makefile.am (eelf32b4300.c): Update dependencies.
	(eelf32bmip.c): Likewise.
	(eelf32bsmip.c): Likewise.
	(eelf32btsmip.c): Likewise.
	(eelf32btsmipn32.c): Likewise.
	(eelf32ltsmip.c): Likewise.
	(eelf32ltsmipn32.c): Likewise.
	(eelf32ebmip.c): Likewise.
	(eelf32ebmipvxworks.c): Likewise.
	(eelf32elmip.c): Likewise.
	(eelf32elmipvxworks.c): Likewise.
	(eelf32bmipn32.c): Likewise.
	(eelf32lmip.c): Likewise.
	(eelf32mipswindiss.c): Likewise.
	(eelf32lsmip.c): Likewise.
	(eelf64bmip.c): Likewise.
	(eelf64btsmip.c): Likewise.
	(eelf64ltsmip.c): Likewise.
	(emipsbig.c): Likewise.  Canonicalize ${GENSCRIPTS} line.
	(emipsbsd.c): Likewise.
	(emipsidt.c): Update dependencies.
	(emipsidtl.c): Likewise.
	(emipslit.c): Likewise.
	(emipslnews.c): Likewise.
	(emipspe.c): Likewise.  Fix ${GENSCRIPTS} invocation.
	* Makefile.in: Regenerate.
	* emulparams/elf32bmip.sh (EXTRA_EM_FILE): Define.
	* emulparams/elf32bmipn32-defs.sh (EXTRA_EM_FILE): Likewise.
	* emultempl/irix.em: Include emultempl/mipself.em.
	* emultempl/mipself.em: New file.

ld/testsuite/
	* ld-mips-elf/hash1.s, ld-mips-elf/hash1a.d,
	* ld-mips-elf/hash1b.d, ld-mips-elf/hash1c.d: New tests.
	* ld-mips-elf/mips-elf.exp: Run them.
@
text
@d356 2
d1509 4
d1521 5
@


1.215
log
@	* emultempl/elf-generic.em (gld${EMULATION_NAME}_map_segments): Limit
	loop to ten iterations.  Throw away any previous linker generated
	segment map.
	* ldlang.c (lang_phdr_list): Make global.
	* ldlang.h (lang_phdr_list): Declare.
	* Makefile.am (ELF_GEN_DEPS): Define.  Use in emul deps.
	* Makefile.in: Regenerate.
@
text
@d711 2
a712 2
  $(srcdir)/emulparams/elf32bmip.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d718 2
a719 2
eelf32bmip.c: $(srcdir)/emulparams/elf32bmip.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d722 2
a723 2
  $(srcdir)/emulparams/elf32bmip.sh $(srcdir)/emultempl/irix.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d726 2
a727 2
  $(srcdir)/emulparams/elf32bmip.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d734 2
a735 2
  $(srcdir)/emulparams/elf32bmip.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d739 2
a740 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d743 3
a745 2
  $(srcdir)/emulparams/elf32btsmip.sh $(srcdir)/emulparams/elf32bmip.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d748 2
a749 2
  $(srcdir)/emulparams/elf32bmip.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d752 3
a754 3
  $(srcdir)/emulparams/elf32ebmip.sh $(srcdir)/emulparams/vxworks.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/vxworks.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d758 2
a759 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d762 3
a764 3
  $(srcdir)/emulparams/elf32elmip.sh $(srcdir)/emulparams/vxworks.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/vxworks.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d767 3
a769 2
  $(srcdir)/emultempl/irix.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d773 2
a774 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d777 2
a778 2
  $(srcdir)/emulparams/elf32bmip.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d780 2
a781 2
eelf32mipswindiss.c: $(srcdir)/emulparams/elf32mipswindiss.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d820 2
a821 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d907 3
a909 2
  $(srcdir)/emulparams/elf32bmipn32.sh $(srcdir)/emultempl/irix.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d921 2
a922 2
  $(srcdir)/emulparams/elf32bmipn32.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d925 3
a927 2
  $(srcdir)/emulparams/elf64btsmip.sh $(srcdir)/emulparams/elf32bmipn32.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1157 1
a1157 8
emipsbig.c:  $(srcdir)/emulparams/mipsbig.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/mips.sc ${GEN_DEPENDS}
	${GENSCRIPTS} mipsbig
emipsbsd.c: $(srcdir)/emulparams/mipsbsd.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/mipsbsd.sc ${GEN_DEPENDS}
	${GENSCRIPTS} mipsbsd
emipsidt.c: $(srcdir)/emulparams/mipsidt.sh \
  $(srcdir)/emultempl/mipsecoff.em $(srcdir)/emultempl/generic.em \
d1159 7
d1167 5
a1171 2
emipsidtl.c: $(srcdir)/emulparams/mipsidtl.sh \
  $(srcdir)/emultempl/mipsecoff.em $(srcdir)/emultempl/generic.em \
a1172 3
	${GENSCRIPTS} mipsidtl "$(tdir_mipsidtl)"
emipslit.c:  $(srcdir)/emulparams/mipslit.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/mips.sc ${GEN_DEPENDS}
d1174 1
a1174 1
emipslnews.c:  $(srcdir)/emulparams/mipslnews.sh \
d1176 4
a1179 4
	${GENSCRIPTS} mipslnews
emipspe.c: $(srcdir)/emulparams/mipspe.sh \
  $(srcdir)/emultempl/pe.em $(srcdir)/scripttempl/pe.sc ${GEN_DEPENDS}
	${GENSCRIPTS} mipspe "$(tdir_mips)"
@


1.214
log
@bfd/
	* elf-bfd.h: Formatting.
	(_bfd_elf_map_sections_to_segments): Declare.
	* elf-eh-frame.c (_bfd_elf_discard_section_eh_frame_hdr): Don't
	clear program_header_size.
	* elf.c (get_program_header_size): Move.  Don't use or set saved
	program_header_size here.
	(elf_modify_segment_map): New function.  Split out from..
	(assign_file_positions_for_load_sections): ..here.  Assert
	header size is correct.  Remove dead code.
	(_bfd_elf_map_sections_to_segments): Rename from
	map_sections_to_segments.  Make global.  Use get_program_header_size
	when we need estimate of header size.  Call elf_modify_segment_map.
	Set program_header_size.
	(print_segment_map): Delete.
	(_bfd_elf_sizeof_headers): If segment_map available, get the
	actual size.
	* elf32-arm.c (elf32_arm_symbian_modify_segment_map): Make safe
	for calling more than once.
	* elf32-bfin.c (elf32_bfinfdpic_modify_segment_map): Likewise.
	* elf32-frv.c (elf32_frvfdpic_modify_segment_map): Likewise.
	* elfxx-mips.c (_bfd_mips_elf_modify_segment_map): Likewise.
	* elf32-i370.c (elf_backend_add_symbol_hook): Delete.
	(elf_backend_additional_program_headers): Delete.
	(elf_backend_modify_segment_map): Delete.
	* elf64-hppa.c (elf64_hppa_modify_segment_map): Convert to ISO C.
	* elfxx-ia64.c (elfNN_ia64_modify_segment_map): Likewise.
	* doc/bfdint.texi: Delete SIZEOF_HEADERS difficulties.
ld/
	* Makefile.am (ELF_DEPS): Define.  Use in emul file deps.  Fix
	many ELF emul file deps that incorrectly said they needed elf32.em
	instead of generic.em.  Add genelf.em as required.
	* Makefile.in: Regenerate.
	* ldlang.c (lang_process): Call ldemul_finish before
	lang_check_section_addresses.
	* emulparams/arcelf.sh: Generic elf target needs genelf.
	* emulparams/d30v_e.sh: Likewise.
	* emulparams/d30v_o.sh: Likewise.
	* emulparams/d30velf.sh: Likewise.
	* emulparams/elf32_dlx.sh: Likewise.
	* emulparams/elf32_i860.sh: Likewise.
	* emulparams/elf32fr30.sh: Likewise.
	* emulparams/elf32frv.sh: Likewise.
	* emulparams/elf32iq10.sh: Likewise.
	* emulparams/elf32iq2000.sh: Likewise.
	* emulparams/elf32mt.sh: Likewise.
	* emulparams/mn10200.sh: Likewise.
	* emulparams/or32.sh: Likewise.
	* emulparams/or32elf.sh: Likewise.
	* emulparams/pjelf.sh: Likewise.
	* emulparams/msp430all.sh: Likewise.  Extract common entries.
	* emulparams/pjlelf.sh: Include pjelf.sh.
	* emulparams/elf32frvfd.sh (EXTRA_EM_FILE): Unset.
	* emulparams/mn10300.sh (EXTRA_EM_FILE): Unset.
	* emultempl/elf-generic.em: New file.
	* emultempl/genelf.em: New file.
	* emultempl/elf32.em: Include elf-generic.em.
	(gld${EMULATION_NAME}_layout_sections_again): Delete.
	(gld${EMULATION_NAME}_finish): Call gld${EMULATION_NAME}_map_segments.
	* emultempl/hppaelf.em (hppaelf_layout_sections_again): Likewise.
	(gld${EMULATION_NAME}_finish): Rename from hppaelf_finish.  Call
	gld${EMULATION_NAME}_map_segments.
	(LDEMUL_FINISH): Update.
	* emultempl/mmo.em: Correct comment.  Include elf-bfd.h and
	source elf-generic.em.
	(mmo_finish): Call gld${EMULATION_NAME}_map_segments.
	* emultempl/ppc64elf.em (ppc_layout_sections_again): Likewise.
	(gld${EMULATION_NAME}_finish): Rename from ppc_finish.  Call
	gld${EMULATION_NAME}_map_segments.
	(LDEMUL_FINISH): Update.
ld/testsuite/
	* ld-elf/eh1.d: Update for fewer program headers.
	* ld-elf/eh2.d: Likewise.
	* ld-elf/eh3.d: Likewise.
@
text
@d479 1
d498 2
a499 3
earcelf.c: $(srcdir)/emulparams/arcelf.sh $(srcdir)/emultempl/genelf.em \
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/elf-generic.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d620 2
a621 3
ed30velf.c: $(srcdir)/emulparams/d30velf.sh $(srcdir)/emultempl/genelf.em \
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/elf-generic.em \
  $(srcdir)/scripttempl/elfd30v.sc ${GEN_DEPENDS}
d623 2
a624 3
ed30v_o.c: $(srcdir)/emulparams/d30v_o.sh $(srcdir)/emultempl/genelf.em \
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/elf-generic.em \
  $(srcdir)/scripttempl/elfd30v.sc ${GEN_DEPENDS}
d626 2
a627 3
ed30v_e.c: $(srcdir)/emulparams/d30v_e.sh $(srcdir)/emultempl/genelf.em \
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/elf-generic.em \
  $(srcdir)/scripttempl/elfd30v.sc ${GEN_DEPENDS}
d641 1
a641 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/dlx.sc ${GEN_DEPENDS}
d672 1
a672 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d675 1
a675 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d705 1
a705 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d783 1
a783 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d853 1
a853 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/iq2000.sc ${GEN_DEPENDS}
d856 1
a856 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/iq2000.sc ${GEN_DEPENDS}
d1177 1
a1177 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1180 1
a1180 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1184 1
a1184 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1188 1
a1188 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1192 1
a1192 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1196 1
a1196 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1200 1
a1200 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1204 1
a1204 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1208 1
a1208 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1212 1
a1212 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1216 1
a1216 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1220 1
a1220 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1224 1
a1224 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1228 1
a1228 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1232 1
a1232 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1236 1
a1236 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1240 1
a1240 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1244 1
a1244 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1248 1
a1248 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1252 1
a1252 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1256 1
a1256 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1260 1
a1260 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1264 1
a1264 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1268 1
a1268 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1272 1
a1272 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1276 1
a1276 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1280 1
a1280 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1284 1
a1284 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1288 1
a1288 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1292 1
a1292 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1296 1
a1296 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1300 1
a1300 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1304 1
a1304 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430_3.sc \
d1308 1
a1308 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430_3.sc \
d1312 1
a1312 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430_3.sc \
d1316 1
a1316 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430_3.sc \
d1320 1
a1320 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430_3.sc \
d1324 1
a1324 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430_3.sc \
d1328 1
a1328 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430_3.sc \
d1332 1
a1332 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430_3.sc \
d1336 1
a1336 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430_3.sc \
d1340 1
a1340 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1344 1
a1344 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1348 1
a1348 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1352 1
a1352 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1356 1
a1356 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1360 1
a1360 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1364 1
a1364 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1368 1
a1368 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1372 1
a1372 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1376 1
a1376 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1380 1
a1380 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1384 1
a1384 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1388 1
a1388 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1392 1
a1392 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1396 1
a1396 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1400 1
a1400 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1404 1
a1404 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1408 1
a1408 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1412 1
a1412 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf32msp430.sc \
d1426 1
a1426 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1435 1
a1435 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1438 1
a1438 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/genelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
@


1.213
log
@binutils:
	* doc/Makefile.am (TEXI2DVI): Define.
	* doc/Makefile.in: Regenerate.

gas:
	* doc/Makefile.am (TEXI2DVI): Define.
	* doc/Makefile.in: Regenerate.
	* doc/c-arc.texi: Fix typo.

ld:
	* Makefile.am (TEXI2DVI): Add -I $(top_srcdir)/../libiberty.
	* Makefile.in: Regenerate.
@
text
@d478 1
d497 3
a499 2
earcelf.c: $(srcdir)/emulparams/arcelf.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d502 1
a502 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/armelf.em \
d506 1
a506 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/armelf.em \
d511 1
a511 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/armelf.em \
d515 1
a515 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/armelf.em \
d520 1
a520 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/armelf.em \
d525 1
a525 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/armelf.em \
d531 1
a531 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/armelf.em \
d536 1
a536 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/armelf.em \
d542 1
a542 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/armelf.em \
d547 1
a547 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/vxworks.em \
d564 1
a564 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/armelf.em \
d574 1
a574 1
  $(srcdir)/emulparams/armelf.sh $(srcdir)/emultempl/elf32.em \
d578 2
a579 2
eavr2.c: $(srcdir)/emulparams/avr2.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/avr.sc \
d582 2
a583 2
eavr1.c: $(srcdir)/emulparams/avr1.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/avr.sc \
d586 2
a587 2
eavr3.c: $(srcdir)/emulparams/avr3.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/avr.sc \
d590 2
a591 2
eavr4.c: $(srcdir)/emulparams/avr4.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/avr.sc \
d594 2
a595 2
eavr5.c: $(srcdir)/emulparams/avr5.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/avr.sc \
d598 2
a599 2
eavr6.c: $(srcdir)/emulparams/avr6.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/avr.sc \
d612 1
a612 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d615 1
a615 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d618 1
a618 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elfd10v.sc ${GEN_DEPENDS}
d620 3
a622 2
ed30velf.c: $(srcdir)/emulparams/d30velf.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elfd30v.sc ${GEN_DEPENDS}
d624 3
a626 2
ed30v_o.c: $(srcdir)/emulparams/d30v_o.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elfd30v.sc ${GEN_DEPENDS}
d628 3
a630 2
ed30v_e.c: $(srcdir)/emulparams/d30v_e.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elfd30v.sc ${GEN_DEPENDS}
d636 1
a636 1
  $(srcdir)/emultempl/elf32.em \
d640 1
a640 1
  $(srcdir)/emultempl/elf32.em \
d644 2
a645 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/dlx.sc ${GEN_DEPENDS}
d648 1
a648 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/needrelax.em \
d652 1
a652 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/needrelax.em \
d656 1
a656 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/needrelax.em \
d660 1
a660 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/needrelax.em \
d664 1
a664 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d667 1
a667 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d670 1
a670 1
  $(srcdir)/emulparams/xtensa-config.sh $(srcdir)/emultempl/elf32.em \
d676 2
a677 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d680 2
a681 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d683 4
d688 1
a688 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d691 1
a691 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d694 1
a694 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d697 1
a697 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d700 1
a700 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d703 1
a703 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d707 1
a707 1
  $(srcdir)/emultempl/vxworks.em $(srcdir)/emultempl/elf32.em \
d711 2
a712 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d715 1
a715 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d719 1
a719 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d722 1
a722 1
  $(srcdir)/emultempl/elf32.em \
d726 1
a726 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d730 1
a730 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d734 1
a734 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d737 1
a737 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/crxelf.em \
d742 1
a742 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d746 1
a746 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d750 1
a750 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d754 1
a754 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d758 1
a758 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/vxworks.em \
d763 1
a763 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d767 1
a767 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/vxworks.em \
d772 1
a772 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d776 1
a776 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d780 1
a780 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d783 1
a783 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d785 8
d796 1
a796 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d800 1
a800 1
  $(srcdir)/emultempl/ppc32elf.em $(srcdir)/emultempl/elf32.em \
d806 1
a806 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d810 1
a810 1
  $(srcdir)/emultempl/ppc32elf.em $(srcdir)/emultempl/elf32.em \
d814 1
a814 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d818 1
a818 1
  $(srcdir)/emultempl/vxworks.em $(srcdir)/emultempl/elf32.em \
d823 1
a823 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d826 1
a826 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d830 1
a830 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d834 1
a834 1
  $(srcdir)/emultempl/ppc32elf.em $(srcdir)/emultempl/elf32.em \
d839 1
a839 1
  $(srcdir)/emultempl/ppc32elf.em $(srcdir)/emultempl/elf32.em \
d844 1
a844 1
  $(srcdir)/emultempl/ppc32elf.em $(srcdir)/emultempl/elf32.em \
d848 1
a848 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d852 1
a852 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d855 1
a855 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elfi370.sc ${GEN_DEPENDS}
d858 1
a858 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/ip2k.sc ${GEN_DEPENDS}
d861 2
a862 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/iq2000.sc ${GEN_DEPENDS}
d865 2
a866 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/iq2000.sc ${GEN_DEPENDS}
d869 1
a869 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/alphaelf.em \
d874 1
a874 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/alphaelf.em \
d879 1
a879 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/alphaelf.em \
d884 1
a884 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d887 1
a887 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d890 1
a890 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/ia64elf.em \
d896 1
a896 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/ia64elf.em \
d901 1
a901 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d904 1
a904 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d908 1
a908 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d912 1
a912 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d915 1
a915 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/mmix-elfnmmo.em \
d919 2
a920 1
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/mmo.em \
d925 1
a925 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d929 1
a929 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d932 1
a932 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d935 1
a935 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d939 1
a939 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d942 1
a942 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d945 1
a945 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf_chaos.sc ${GEN_DEPENDS}
d949 1
a949 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d952 1
a952 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d956 1
a956 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d959 1
a959 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d989 1
a989 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d993 1
a993 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d997 1
a997 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1001 1
a1001 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1005 1
a1005 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1009 1
a1009 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1013 1
a1013 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1037 1
a1037 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/hppaelf.em \
d1041 1
a1041 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/hppaelf.em \
d1046 1
a1046 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/hppaelf.em \
d1050 1
a1050 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/hppaelf.em \
d1054 1
a1054 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1075 1
a1075 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1081 1
a1081 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1090 1
a1090 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1093 1
a1093 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/nw.sc ${GEN_DEPENDS}
d1105 1
a1105 1
  $(srcdir)/emultempl/m68hc1xelf.em $(srcdir)/emultempl/elf32.em \
d1109 1
a1109 1
  $(srcdir)/emultempl/m68hc1xelf.em $(srcdir)/emultempl/elf32.em \
d1113 1
a1113 1
  $(srcdir)/emultempl/m68hc1xelf.em $(srcdir)/emultempl/elf32.em \
d1117 1
a1117 1
  $(srcdir)/emultempl/m68hc1xelf.em $(srcdir)/emultempl/elf32.em \
d1133 1
a1133 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/m68kelf.em \
d1138 1
a1138 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/m68kelf.em \
d1148 1
a1148 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/psos.sc ${GEN_DEPENDS}
d1184 1
a1184 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1187 2
a1188 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1191 2
a1192 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1196 2
a1197 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1201 2
a1202 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1206 2
a1207 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1211 2
a1212 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1216 2
a1217 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1221 2
a1222 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1226 2
a1227 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1231 2
a1232 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1236 2
a1237 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1241 2
a1242 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1246 2
a1247 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1251 2
a1252 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1256 2
a1257 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1261 2
a1262 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1266 2
a1267 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1271 2
a1272 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1276 2
a1277 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1281 2
a1282 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1286 2
a1287 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1291 2
a1292 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1296 2
a1297 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1301 2
a1302 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1306 2
a1307 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1311 2
a1312 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1316 2
a1317 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1321 2
a1322 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1326 2
a1327 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1331 2
a1332 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1336 2
a1337 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1341 2
a1342 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1346 2
a1347 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430_3.sc \
d1351 2
a1352 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430_3.sc \
d1356 2
a1357 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430_3.sc \
d1361 2
a1362 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430_3.sc \
d1366 2
a1367 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430_3.sc \
d1371 2
a1372 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430_3.sc \
d1376 2
a1377 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430_3.sc \
d1381 2
a1382 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430_3.sc \
d1386 2
a1387 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430_3.sc \
d1391 2
a1392 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1396 2
a1397 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1401 2
a1402 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1406 2
a1407 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1411 2
a1412 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1416 2
a1417 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1421 2
a1422 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1426 2
a1427 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1431 2
a1432 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1436 2
a1437 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1441 2
a1442 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1446 2
a1447 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1451 2
a1452 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1456 2
a1457 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1461 2
a1462 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1466 2
a1467 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1471 2
a1472 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1476 2
a1477 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1481 2
a1482 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
d1496 2
a1497 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1506 2
a1507 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1509 3
a1511 2
epjlelf.c: $(srcdir)/emulparams/pjlelf.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1517 1
a1517 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/nw.sc ${GEN_DEPENDS}
d1523 1
a1523 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1532 1
a1532 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1537 1
a1537 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1543 1
a1543 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1549 1
a1549 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1552 1
a1552 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1556 1
a1556 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1560 1
a1560 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1563 1
a1563 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1567 1
a1567 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1570 1
a1570 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1575 1
a1575 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1578 1
a1578 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1582 1
a1582 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1586 1
a1586 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf32sh-symbian.sc ${GEN_DEPENDS}
d1591 1
a1591 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1597 1
a1597 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1603 1
a1603 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1607 1
a1607 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1612 1
a1612 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1673 1
a1673 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/v850.sc ${GEN_DEPENDS}
a1687 11
eelf32frvfd.c: $(srcdir)/emulparams/elf32frvfd.sh \
  $(srcdir)/emulparams/elf32frv.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32frvfd "$(tdir_frv)"
eelf32m32c.c: $(srcdir)/emulparams/elf32m32c.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32m32c "$(tdir_m32c)"
eelf32mt.c: $(srcdir)/emulparams/elf32mt.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32mt "$(tdir_mt)"
@


1.212
log
@Configury changes: update src repository (binutils, gdb, and rda) to use
config/gettext-sister.m4 instead of the old gettext.m4.  Regenerate all
affected autotools files.  Include intl in gdb releases again.
@
text
@d98 1
a98 1
TEXI2DVI = texi2dvi -I $(srcdir) -I $(BFDDIR)/doc
@


1.211
log
@Add support for AVR6 family
@
text
@a2 3
## FIXME: work around apparent automake bug.
INTLLIBS = @@INTLLIBS@@

d100 1
a100 1
INCLUDES = -D_GNU_SOURCE -I. -I$(srcdir) -I../bfd -I$(BFDDIR) -I$(INCDIR) -I$(top_srcdir)/../intl -I../intl $(HDEFINES) $(CFLAGS) -DLOCALEDIR="\"$(datadir)/locale\""
d1618 2
a1619 2
ld_new_DEPENDENCIES = $(EMULATION_OFILES) $(EMUL_EXTRA_OFILES) $(BFDLIB) $(LIBIBERTY) $(INTLDEPS)
ld_new_LDADD = $(EMULATION_OFILES) $(EMUL_EXTRA_OFILES) $(BFDLIB) $(LIBIBERTY) $(INTLLIBS)
d1641 1
a1641 1
		LIBIBERTY="$(LIBIBERTY) $(INTLLIBS)" LIBS="$(LIBS)" \
@


1.210
log
@binutils/
	* doc/Makefile.am (AM_MAKEINFOFLAGS): New.
	(TEXI2POD): Use AM_MAKEINFOFLAGS.
	(config.texi): Don't set top_srcdir.
	* doc/binutils.texi: Don't use top_srcdir.
	* aclocal.m4, Makefile.in, doc/Makefile.in: Regenerated.
gas/
	* doc/Makefile.am (AM_MAKEINFOFLAGS): New.
	(TEXI2POD): Use AM_MAKEINFOFLAGS.
	(asconfig.texi): Don't set top_srcdir.
	* doc/as.texinfo: Don't use top_srcdir.
	* aclocal.m4, Makefile.in, doc/Makefile.in: Regenerated.
ld/
	* Makefile.am (AM_MAKEINFOFLAGS): Add libiberty.
	(TEXI2POD): Use AM_MAKEINFOFLAGS.
	(configdoc.texi): Don't set top_srcdir.
	* ld.texinfo: Don't use top_srcdir.
	* aclocal.m4, Makefile.in: Regenerated.
@
text
@d136 1
d599 4
@


1.209
log
@* emultempl/elf32.em: Add support for elf-hints.h on FreeBSD and Dragonfly targets.
* configure.in (AC_CHECK_HEADERS): Add elf-hints.h.
* Makefile.am (HFILES): Add elf-hints-local.h.
* elf-hints-local.h: New file.
* Makefile.in: Regenerate.
* configure: Regenerate.
@
text
@d49 1
a49 1
TEXI2POD = perl $(BASEDIR)/etc/texi2pod.pl
d100 1
a100 1
AM_MAKEINFOFLAGS = -I $(srcdir) -I $(BFDDIR)/doc
a1704 1
	echo "@@set top_srcdir $(top_srcdir)" >> ./configdoc.texi
@


1.209.2.1
log
@binutils/
	* doc/Makefile.am (AM_MAKEINFOFLAGS): New.
	(TEXI2POD): Use AM_MAKEINFOFLAGS.
	(config.texi): Don't set top_srcdir.
	* doc/binutils.texi: Don't use top_srcdir.
	* aclocal.m4, Makefile.in, doc/Makefile.in: Regenerated.
gas/
	* doc/Makefile.am (AM_MAKEINFOFLAGS): New.
	(TEXI2POD): Use AM_MAKEINFOFLAGS.
	(asconfig.texi): Don't set top_srcdir.
	* doc/as.texinfo: Don't use top_srcdir.
	* aclocal.m4, Makefile.in, doc/Makefile.in: Regenerated.
ld/
	* Makefile.am (AM_MAKEINFOFLAGS): Add libiberty.
	(TEXI2POD): Use AM_MAKEINFOFLAGS.
	(configdoc.texi): Don't set top_srcdir.
	* ld.texinfo: Don't use top_srcdir.
	* aclocal.m4, Makefile.in: Regenerated.
@
text
@d49 1
a49 1
TEXI2POD = perl $(BASEDIR)/etc/texi2pod.pl $(AM_MAKEINFOFLAGS)
d100 1
a100 1
AM_MAKEINFOFLAGS = -I $(srcdir) -I $(BFDDIR)/doc -I $(top_srcdir)/../libiberty
d1705 1
@


1.209.2.2
log
@binutils:
	* doc/Makefile.am (TEXI2DVI): Define.
	* doc/Makefile.in: Regenerate.

gas:
	* doc/Makefile.am (TEXI2DVI): Define.
	* doc/Makefile.in: Regenerate.
	* doc/c-arc.texi: Fix typo.

ld:
	* Makefile.am (TEXI2DVI): Add -I $(top_srcdir)/../libiberty.
	* Makefile.in: Regenerate.
@
text
@d101 1
a101 1
TEXI2DVI = texi2dvi -I $(srcdir) -I $(BFDDIR)/doc -I $(top_srcdir)/../libiberty
@


1.208
log
@
2006-04-06  Carlos O'Donell <carlos@@codesourcery.com>

	* Makefile.tpl: Add install-html target.
	* Makefile.def: Add install-html target.
	* Makefile.in: Regenerate.
	* configure.in: Add --with-datarootdir, --with-docdir,
	and --with-htmldir options.
	* configure: Regenerate.

bfd/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* po/Make-in: Add install-html target.
	* Makefile.am: Rename docdir to bfddocdir. Add datarootdir, docdir
	htmldir. Add install-html and install-html-recursive targets.
	* Makefile.in: Regenerate.
	* configure.in: AC_SUBST for datarootdir, docdir and htmldir.
	* configure: Regenerate.

bfd/doc/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* Makefile.am: Add install-html and install-html-am targets.
	Define datarootdir, docdir and htmldir.
	* Makefile.in: Regenerate.

binutils/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* po/Make-in: Add install-html target.
	* Makefile.am: Add install-html and install-html-recursive targets.
	* Makefile.in: Regenerate.
	* configure.in: AC_SUBST datarootdir, docdir and htmldir.
	* configure: Regenerate.
	* doc/Makefile.am: Add install-html and install-html-am targets.
	* doc/Makefile.in: Regenerate.

etc/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* Makefile.in: Add install-html target. Add htmldir,
	docdir and datarootdir.
	* configure.texi: Document install-html target.
	* configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* configure: Regenerate.

gas/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* po/Make-in: Add install-html target.
	* Makefile.am: Add install-html and install-html-recursive targets.
	* Makefile.in: Regenerate.
	* configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* configure: Regenerate.
	* doc/Makefile.am: Add install-html and install-html-am targets.
	* doc/Makefile.in: Regenerate.

gprof/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* po/Make-in: Add install-html target.
	* Makefile.am: Add install-html, install-html-am and
	install-html-recursive targets.
	* Makefile.in: Regenerate.
	* configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* configure: Regenerate.

intl/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* intl/Makefile.in: Add html info and dvi and install-html to .PHONY
	Add install-html target.

ld/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* Makefile.am: Add install-html, install-html-am, and
	install-html-recursive targets.
	* Makefile.in: Regenerate.
	* configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* configure: Regenerate.
	* po/Make-in: Add install-html target.

opcodes/

2006-04-06  Carlos O'Donell  <carlos@@codesourcery.com>

	* Makefile.am: Add install-html target.
	* Makefile.in: Regenerate.
@
text
@d421 1
a421 1
	ldwrite.h mri.h deffile.h pe-dll.h
@


1.207
log
@	* Makefile.am (GENSCRIPTS): Pass prefix.
	* Makefile.in: Regenerate.
	* genscripts.sh: Adjust for extra parameter.
	* emultempl/elf32.em (parse_ld_so_conf): Return true iff file
	exists.
	(check_ld_so_conf): Use ${prefix}/etc/ld.so.conf if it exists.
	* NEWS: Update.
@
text
@d1739 48
@


1.206
log
@bfd/
	* config.bfd (sparc-*-vxworks*): New stanza.
	* configure.in (bfd_elf32_sparc_vxworks_vec): New stanza.
	(bfd_elf32_sparc_vec, bfd_elf64_sparc_vec): Add elf-vxworks.lo.
	* configure: Regenerate.
	* elf32-sparc.c: Include elf-vxworks.h.
	(elf32_sparc_vxworks_link_hash_table_create: New.
	(elf32_sparc_vxworks_final_write_processing): New.
	(TARGET_BIG_SYM): Override for VxWorks.
	(TARGET_BIG_NAME, ELF_MINPAGESIZE): Likewise.
	(bfd_elf32_bfd_link_hash_table_create): Likewise.
	(elf_backend_want_got_plt, elf_backend_plt_readonly): Likewise.
	(elf_backend_got_header_size, elf_backend_add_symbol_hook): Likewise.
	(elf_backend_link_output_symbol_hook): Likewise.
	(elf_backend_emit_relocs): Likewise.
	(elf_backend_final_write_processing, elf32_bed): Likewise.
	* elfxx-sparc.c: Include libiberty.h and elf-vxworks.h.
	(sparc_vxworks_exec_plt0_entry, sparc_vxworks_exec_plt_entry): New.
	(sparc_vxworks_shared_plt0_entry, sparc_vxworks_shared_plt_entry): New.
	(_bfd_sparc_elf_link_hash_table_create): Don't initialize
	build_plt_entry here.
	(create_got_section): Initialize sgotplt for VxWorks.
	(_bfd_sparc_elf_create_dynamic_sections): Initialize build_plt_entry,
	plt_header_size and plt_entry_size, with new VxWorks-specific settings.
	Call elf_vxworks_create_dynamic_sections for VxWorks.
	(allocate_dynrelocs): Use plt_header_size and plt_entry_size.
	Allocate room for .got.plt and .rela.plt.unloaded entries on VxWorks.
	(_bfd_sparc_elf_size_dynamic_sections): Don't allocate a nop in .plt
	for VxWorks.  Check for the .got.plt section.
	(sparc_vxworks_build_plt_entry): New function.
	(_bfd_sparc_elf_finish_dynamic_symbol): Add handling of VxWorks PLTs.
	Don't make _GLOBAL_OFFSET_TABLE_ and _PROCEDURE_LINKAGE_TABLE_
	absolute on VxWorks.
	(sparc32_finish_dyn): Add special handling for DT_RELASZ
	and DT_PLTGOT on VxWorks.
	(sparc_vxworks_finish_exec_plt): New.
	(sparc_vxworks_finish_shared_plt): New.
	(_bfd_sparc_elf_finish_dynamic_sections): Call them.
	Use plt_header_size and plt_entry_size.
	* elfxx-sparc.h (_bfd_sparc_elf_link_hash_table): Add is_vxworks,
	srelplt2, sgotplt, plt_header_size and plt_entry_size fields.
	* Makefile.am (elfxx-sparc.lo): Depend on elf-vxworks.h.
	(elf32-sparc.lo): Likewise.
	* Makefile.in: Regenerate.
	* targets.c (bfd_elf32_sparc_vxworks_vec): Declare.
	(_bfd_target_vector): Add a pointer to it.

gas/
	* config/tc-sparc.c (sparc_target_format): Handle TE_VXWORKS.
	(GOTT_BASE, GOTT_INDEX): New.
	(tc_gen_reloc): Don't alter relocations against GOTT_BASE and
	GOTT_INDEX when generating VxWorks PIC.
	* configure.tgt (sparc*-*-vxworks*): Remove this special case;
	use the generic *-*-vxworks* stanza instead.

gas/testsuite/
	* gas/sparc/vxworks-pic.s, gas/sparc/vxworks-pic.d: New test.
	* gas/sparc/sparc.exp: Run it.  Remove sparc*-*-vxworks* XFAILs.

ld/
	* configure.tgt (sparc*-*-vxworks*): New stanza.
	* emulparams/elf32_sparc_vxworks.sh: New file.
	* Makefile.am (ALL_EMULATIONS): Add eelf32_sparc_vxworks.o.
	(eelf32_sparc_vxworks.c): New rule.
	* Makefile.in: Regenerate.

ld/testsuite/
	* ld-sparc/vxworks1.dd, ld-sparc/vxworks1.ld, ld-sparc/vxworks1-lib.dd,
	* ld-sparc/vxworks1-lib.nd, ld-sparc/vxworks1-lib.rd,
	* ld-sparc/vxworks1-lib.s, ld-sparc/vxworks1.rd, ld-sparc/vxworks1.s,
	* ld-sparc/vxworks1-static.d, ld-sparc/vxworks2.s,
	* ld-sparc/vxworks2.sd, ld-sparc/vxworks2-static.sd: New tests.
	* ld-sparc/sparc.exp: Run them.
@
text
@d478 1
a478 1
GENSCRIPTS = LIB_PATH='${LIB_PATH}' $(SHELL) $(srcdir)/genscripts.sh ${srcdir} ${libdir} "${exec_prefix}" @@host@@ @@target@@ @@target_alias@@ "@@EMULATION_LIBPATH@@" "@@NATIVE_LIB_DIRS@@" @@use_sysroot@@
@


1.205
log
@	* emulparams/elf32bfinfd.sh: New file.
	* emultempl/bfin.em: Delete.
	* emulparams/bfin.sh: Lose reference to bfin.em.
	* Makefile.am (eelf32bfin.c): Likewise.
	(eelf32bfinfd.c): New.
	* Makefile.in: Regenerate.
	* configure.tgt (bfin-*-elf, bfin-*-uclinux): Add elf32bfinfd to
	targ_extra_emuls.
@
text
@d150 1
d691 5
@


1.204
log
@	Richard Sandiford  <richard@@codesourcery.com>
	Daniel Jacobowitz  <dan@@codesourcery.com>
	Phil Edwards  <phil@@codesourcery.com>
	Zack Weinberg  <zack@@codesourcery.com>
	Mark Mitchell  <mark@@codesourcery.com>
	Nathan Sidwell  <nathan@@codesourcery.com>

bfd/
	* bfd-in2.h: Regenerate.
	* config.bfd (mips*-*-vxworks*, mips*el-*-vxworks*): New stanzas.
	* configure.in (bfd_elf32_bigmips_vxworks_vec): New stanza.
	(bfd_elf32_littlemips_vxworks_vec): Likewise.
	(bfd_elf32_bigmips_vec): Add elf-vxworks.lo.
	(bfd_elf32_littlemips_vec): Likewise.
	(bfd_elf32_nbigmips_vec): Likewise.
	(bfd_elf32_nlittlemips_vec): Likewise.
	(bfd_elf32_ntradbigmips_vec): Likewise.
	(bfd_elf32_ntradlittlemips_vec): Likewise.
	(bfd_elf32_tradbigmips_vec): Likewise.
	(bfd_elf32_tradlittlemips_vec): Likewise.
	(bfd_elf64_bigmips_vec): Likewise.
	(bfd_elf64_littlemips_vec): Likewise.
	(bfd_elf64_tradbigmips_vec): Likewise.
	(bfd_elf64_tradlittlemips_vec): Likewise.
	* elf32-mips.c: Include elf-vxworks.h.
	(mips_info_to_howto_rel): Use elf_backend_mips_rtype_to_howto
	instead of calling mips_elf32_rtype_to_howto directly.
	(mips_vxworks_copy_howto_rela): New reloc howto.
	(mips_vxworks_jump_slot_howto_rela): Likewise.
	(mips_vxworks_bfd_reloc_type_lookup): New function.
	(mips_vxworks_rtype_to_howto): Likewise.
	(mips_vxworks_final_write_processing): Likewise.
	(TARGET_LITTLE_SYM, TARGET_LITTLE_NAME): Override for VxWorks.
	(TARGET_BIG_SYM, TARGET_BIG_NAME, elf_bed, ELF_MAXPAGESIZE): Likewise.
	(elf_backend_want_got_plt): Likewise.
	(elf_backend_want_plt_sym): Likewise.
	(elf_backend_got_symbol_offset): Likewise.
	(elf_backend_want_dynbss): Likewise.
	(elf_backend_may_use_rel_p): Likewise.
	(elf_backend_may_use_rela_p): Likewise.
	(elf_backend_default_use_rela_p): Likewise.
	(elf_backend_got_header_size: Likewise.
	(elf_backend_plt_readonly): Likewise.
	(bfd_elf32_bfd_reloc_type_lookup): Likewise.
	(elf_backend_mips_rtype_to_howto): Likewise.
	(elf_backend_adjust_dynamic_symbol): Likewise.
	(elf_backend_finish_dynamic_symbol): Likewise.
	(bfd_elf32_bfd_link_hash_table_create): Likewise.
	(elf_backend_add_symbol_hook): Likewise.
	(elf_backend_link_output_symbol_hook): Likewise.
	(elf_backend_emit_relocs): Likewise.
	(elf_backend_final_write_processing: Likewise.
	(elf_backend_additional_program_headers): Likewise.
	(elf_backend_modify_segment_map): Likewise.
	(elf_backend_symbol_processing): Likewise.
	* elfxx-mips.c: Include elf-vxworks.h.
	(mips_elf_link_hash_entry): Add is_relocation_target and
	is_branch_target fields.
	(mips_elf_link_hash_table): Add is_vxworks, srelbss, sdynbss, srelplt,
	srelplt2, sgotplt, splt, plt_header_size and plt_entry_size fields.
	(MIPS_ELF_RELA_SIZE, MIPS_ELF_REL_DYN_NAME): New macros.
	(MIPS_RESERVED_GOTNO): Take a mips_elf_link_hash_table argument.
	Return 3 for VxWorks.
	(ELF_MIPS_GP_OFFSET): Change the argument from a bfd to a
	mips_elf_link_hash_table.  Return 0 for VxWorks.
	(MIPS_ELF_GOT_MAX_SIZE): Change the argument from a bfd to a
	mips_elf_link_hash_table.  Update the call to ELF_MIPS_GP_OFFSET.
	(mips_vxworks_exec_plt0_entry): New variable.
	(mips_vxworks_exec_plt_entry): Likewise.
	(mips_vxworks_shared_plt0_entry): Likewise.
	(mips_vxworks_shared_plt_entry): Likewise.
	(mips_elf_link_hash_newfunc): Initialize the new hash_entry fields.
	(mips_elf_rel_dyn_section): Change the bfd argument to a
	mips_elf_link_hash_table.  Use MIPS_ELF_REL_DYN_NAME to get
	the name of the section.
	(mips_elf_initialize_tls_slots): Update the call to
	mips_elf_rel_dyn_section.
	(mips_elf_gotplt_index): New function.
	(mips_elf_local_got_index): Add an input_section argument.
	Update the call to mips_elf_create_local_got_entry.
	(mips_elf_got_page): Likewise.
	(mips_elf_got16_entry): Likewise.
	(mips_elf_create_local_got_entry): Add bfd_link_info and input_section
	arguments.  Create dynamic relocations for each entry on VxWorks.
	(mips_elf_merge_gots): Update the use of MIPS_ELF_GOT_MAX_SIZE.
	(mips_elf_multi_got): Update the uses of MIPS_ELF_GOT_MAX_SIZE
	and MIPS_RESERVED_GOTNO.
	(mips_elf_create_got_section): Update the uses of
	MIPS_ELF_GOT_MAX_SIZE.  Create .got.plt on VxWorks.
	(is_gott_symbol): New function.
	(mips_elf_calculate_relocation): Use a dynobj local variable.
	Update the calls to mips_elf_local_got_index, mips_elf_got16_entry and
	mips_elf_got_page_entry.  Set G to the .got.plt entry when calculating
	VxWorks R_MIPS_CALL* relocations.  Calculate and use G for all GOT
	relocations on VxWorks.  Add dynamic relocations for references
	to the VxWorks __GOTT_BASE__ and __GOTT_INDEX__ symbols.  Don't
	create dynamic relocations for R_MIPS_32, R_MIPS_REL32 or R_MIPS_64
	in VxWorks executables.
	(mips_elf_allocate_dynamic_relocations): Add a bfd_link_info argument.
	Use MIPS_ELF_RELA_SIZE to calculate the size of a VxWorks entry.
	Don't allocate a null entry on VxWorks.
	(mips_elf_create_dynamic_relocation): Update the call to
	mips_elf_rel_dyn_section.  Use absolute rather than relative
	relocations for VxWorks, and make them RELA rather than REL.
	(_bfd_mips_elf_create_dynamic_sections): Don't make .dynamic
	read-only on VxWorks.  Update the call to mips_elf_rel_dyn_section.
	Create the .plt, .rela.plt, .dynbss and .rela.bss sections on
	VxWorks.  Likewise create the _PROCEDURE_LINKAGE_TABLE symbol.
	Call elf_vxworks_create_dynamic_sections for VxWorks and
	initialize the plt_header_size and plt_entry_size fields.
	(_bfd_mips_elf_check_relocs): Don't allow GOT relocations to be
	used in VxWorks executables.  Don't allocate dynamic relocations
	for R_MIPS_32, R_MIPS_REL32 or R_MIPS_64 in VxWorks executables.
	Set is_relocation_target for each symbol referenced by a relocation.
	Allocate .rela.dyn entries for relocations against the special
	VxWorks __GOTT_BASE__ and __GOTT_INDEX__ symbols.  Create GOT
	entries for all VxWorks R_MIPS_GOT16 relocations.  Don't allocate
	a global GOT entry for symbols mentioned in VxWorks R_MIPS_CALL*,
	R_MIPS_32, R_MIPS_REL32 or R_MIPS_64 relocations.  Update the calls
	to mips_elf_rel_dyn_section and mips_elf_allocate_dynamic_relocations.
	Set is_branch_target for symbols mentioned in R_MIPS_PC16 or R_MIPS_26
	relocations.  Don't set no_fn_stub on VxWorks.
	(_bfd_mips_elf_adjust_dynamic_symbol): Update the call to
	mips_elf_allocate_dynamic_relocations.
	(_bfd_mips_vxworks_adjust_dynamic_symbol): New function.
	(_bfd_mips_elf_always_size_sections): Do not allocate GOT page
	entries for VxWorks, and do not create multiple GOTs.
	(_bfd_mips_elf_size_dynamic_sections): Use MIPS_ELF_REL_DYN_NAME.
	Handle .got specially for VxWorks.  Update the uses of
	MIPS_RESERVED_GOTNO and mips_elf_allocate_dynamic_relocations.
	Check for sgotplt and splt.  Allocate the .rel(a).dyn contents last,
	once its final size is known.  Set DF_TEXTREL for VxWorks.  Add
	DT_RELA, DT_RELASZ, DT_RELAENT, DT_PLTREL, DT_PLTRELSZ and DT_JMPREL
	tags on VxWorks.  Do not add the MIPS-specific tags for VxWorks.
	(_bfd_mips_vxworks_finish_dynamic_symbol): New function.
	(mips_vxworks_finish_exec_plt): Likewise.
	(mips_vxworks_finish_shared_plt): Likewise.
	(_bfd_mips_elf_finish_dynamic_sections): Remove an unncessary call
	to mips_elf_rel_dyn_section.  Use a VxWorks-specific value of
	DT_PLTGOT.  Handle DT_RELA, DT_RELASZ, DT_RELAENT, DT_PLTREL,
	DT_PLTRELSZ and DT_JMPREL.  Update the uses of MIPS_RESERVED_GOTNO
	and mips_elf_rel_dyn_section.  Use a different GOT header for
	VxWorks.  Don't sort .rela.dyn on VxWorks.  Finish the PLT on VxWorks.
	(_bfd_mips_elf_link_hash_table_create): Initialize the new
	mips_elf_link_hash_table fields.
	(_bfd_mips_vxworks_link_hash_table_create): New function.
	(_bfd_mips_elf_final_link): Set the GP value to _GLOBAL_OFFSET_TABLE_
	on VxWorks.  Update the call to ELF_MIPS_GP_OFFSET.
	* elfxx-mips.h (_bfd_mips_vxworks_adjust_dynamic_symbol): Declare.
	(_bfd_mips_vxworks_finish_dynamic_symbol): Likewise.
	(_bfd_mips_vxworks_link_hash_table_create): Likewise.
	* libbfd.h: Regenerate.
	* Makefile.am (elfxx-mips.lo): Depend on elf-vxworks.h.
	(elf32-mips.lo): Likewise.
	* Makefile.in: Regenerate.
	* reloc.c (BFD_RELOC_MIPS_COPY, BFD_RELOC_MIPS_JUMP_SLOT): Declare.
	* targets.c (bfd_elf32_bigmips_vxworks_vec): Declare.
	(bfd_elf32_littlemips_vxworks_vec): Likewise.
	(_bfd_target_vector): Add entries for them.

gas/
	* config/tc-mips.c (mips_target_format): Handle vxworks targets.
	(md_begin): Complain about -G being used for PIC.  Don't change
	the text, data and bss alignments on VxWorks.
	(reloc_needs_lo_p): Don't return true for R_MIPS_GOT16 when
	generating VxWorks PIC.
	(load_address): Extend SVR4_PIC handling to VXWORKS_PIC.
	(macro): Likewise, but do not treat la $25 specially for
	VxWorks PIC, and do not handle jal.
	(OPTION_MVXWORKS_PIC): New macro.
	(md_longopts): Add -mvxworks-pic.
	(md_parse_option): Don't complain about using PIC and -G together here.
	Handle OPTION_MVXWORKS_PIC.
	(md_estimate_size_before_relax): Always use the first relaxation
	sequence on VxWorks.
	* config/tc-mips.h (VXWORKS_PIC): New.

gas/testsuite/
	* gas/mips/vxworks1.s, gas/mips/vxworks1.d,
	* gas/mips/vxworks1-xgot.d: New tests.
	* gas/mips/mips.exp: Run them.  Do not run other tests on VxWorks.

include/elf/
	* mips.h (R_MIPS_COPY, R_MIPS_JUMP_SLOT): New relocs.

ld/
	* configure.tgt (mips*el-*-vxworks*, mips*-*-vxworks*): Use
	separate VxWorks emulations.
	* emulparams/elf32ebmipvxworks.sh: New file.
	* emulparams/elf32elmipvxworks.sh: New file.
	* Makefile.am (ALL_EMULATIONS): Add eelf32ebmipvxworks.o and
	eelf32elmipvxworks.o.
	(eelf32ebmipvxworks.c, eelf32elmipvxworks.c): New rules.
	* Makefile.in: Regenerate.

ld/testsuite/
	* ld-mips/vxworks1.dd, ld-mips/vxworks1.ld, ld-mips/vxworks1-lib.dd,
	* ld-mips/vxworks1-lib.nd, ld-mips/vxworks1-lib.rd,
	* ld-mips/vxworks1-lib.s, ld-mips/vxworks1.rd, ld-mips/vxworks1.s,
	* ld-mips/vxworks1-static.d, ld-mips/vxworks2.s, ld-mips/vxworks2.sd,
	* ld-mips/vxworks2-static.sd: New tests.
	* ld-mips/mips-elf.exp: Run them.
@
text
@d152 1
d628 1
a628 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/bfin.em \
d631 4
@


1.203
log
@bfd/
	* configure.in (bfd_elf32_bigarm_vec): Include elf-vxworks.lo.
	(bfd_elf32_bigarm_symbian_vec): Likewise.
	(bfd_elf32_bigarm_vxworks_vec): Likewise.
	(bfd_elf32_littlearm_vec): Likewise.
	(bfd_elf32_littlearm_symbian_vec): Likewise.
	(bfd_elf32_littlearm_vxworks_vec): Likewise.
	* configure: Regenerate.
	* elf32-arm.c: Include libiberty.h and elf-vxworks.h.
	(RELOC_SECTION, RELOC_SIZE, SWAP_RELOC_IN, SWAP_RELOC_OUT): New macros.
	(elf32_arm_vxworks_bed): Add forward declaration.
	(elf32_arm_howto_table_1): Fix the masks for R_ASM_ABS12.
	(elf32_arm_vxworks_exec_plt0_entry): New table.
	(elf32_arm_vxworks_exec_plt_entry): Likewise.
	(elf32_arm_vxworks_shared_plt_entry): Likewise.
	(elf32_arm_link_hash_table): Add vxworks_p and srelplt2 fields.
	(reloc_section_p): New function.
	(create_got_section): Use RELOC_SECTION.
	(elf32_arm_create_dynamic_sections): Likewise.  Call
	elf_vxworks_create_dynamic_sections for VxWorks targets.
	Choose between the two possible values of plt_header_size
	and plt_entry_size.
	(elf32_arm_link_hash_table_create): Initialize vxworks_p and srelplt2.
	(elf32_arm_abs12_reloc): New function.
	(elf32_arm_final_link_relocate): Call it.  Allow the creation of
	dynamic R_ARM_ABS12 relocs on VxWorks.  Use reloc_section_p,
	RELOC_SIZE, SWAP_RELOC_OUT and RELOC_SECTION.  Initialize the
	r_addend fields of relocs.  On rela targets, skip any code that
	adjusts in-place addends.  When using _bfd_link_final_relocate
	to perform a final relocation, pass rel->r_addend as the addend
	argument.
	(elf32_arm_merge_private_bfd_data): If one of the bfds is a VxWorks
	object, ignore flags that are not standard on VxWorks.
	(elf32_arm_check_relocs): Allow the creation of dynamic R_ARM_ABS12
	relocs on VxWorks.  Use reloc_section_p.
	(elf32_arm_adjust_dynamic_symbol): Use RELOC_SECTION and RELOC_SIZE.
	(allocate_dynrelocs): Use RELOC_SIZE.  Account for the size of
	.rela.plt.unloaded relocs on VxWorks targets.
	(elf32_arm_size_dynamic_sections): Use RELOC_SIZE.  Check for
	.rela.plt.unloaded as well as .rel(a).plt.  Add DT_RELA* tags
	instead of DT_REL* tags on RELA targets.
	(elf32_arm_finish_dynamic_symbol): Use RELOC_SECTION, RELOC_SIZE
	and SWAP_RELOC_OUT.  Initialize r_addend fields.  Handle VxWorks
	PLT entries.  Do not make _GLOBAL_OFFSET_TABLE_ absolute on VxWorks.
	(elf32_arm_finish_dynamic_sections): Use RELOC_SECTION, RELOC_SIZE
	and SWAP_RELOC_OUT.  Initialize r_addend fields.  Handle DT_RELASZ
	like DT_RELSZ.  Handle the VxWorks form of initial PLT entry.
	Correct the .rela.plt.unreloaded symbol indexes.
	(elf32_arm_output_symbol_hook): Call the VxWorks version of this
	hook on VxWorks targets.
	(elf32_arm_vxworks_link_hash_table_create): Set vxworks_p to true.
	Minor formatting tweak.
	(elf32_arm_vxworks_final_write_processing): New function.
	(elf_backend_add_symbol_hook): Override for VxWorks and reset
	for Symbian.
	(elf_backend_final_write_processing): Likewise.
	(elf_backend_emit_relocs): Likewise.
	(elf_backend_want_plt_sym): Likewise.
	(ELF_MAXPAGESIZE): Likewise.
	(elf_backend_may_use_rel_p): Minor formatting tweak.
	(elf_backend_may_use_rela_p): Likewise.
	(elf_backend_default_use_rela_p): Likewise.
	(elf_backend_rela_normal): Likewise.
	* Makefile.in (elf32-arm.lo): Depend on elf-vxworks.h.

gas/
	* config/tc-arm.c (md_apply_fix): Install a value of zero into a
	BFD_RELOC_ARM_OFFSET_IMM field if we're going to generate a RELA
	R_ARM_ABS12 reloc.
	(tc_gen_reloc): Keep the original fx_offset for RELA pc-relative
	relocs, but adjust by md_pcrel_from_section.  Create R_ARM_ABS12
	relocations for BFD_RELOC_ARM_OFFSET_IMM on RELA targets.

gas/testsuite/
	* gas/arm/abs12.s, gas/arm/abs12.d: New test.
	* gas/arm/pic.d: Skip for *-*-vxworks*...
	* gas/arm/pic_vxworks.d: ...use this version instead.
	* gas/arm/unwind_vxworks.d: Fix expected output.

ld/
	* emulparams/armelf_vxworks.sh: Include vxworks.sh.
	(MAXPAGESIZE): Define.
	* emulparams/vxworks.sh: Undefine.
	* Makefile.am (earmelf_vxworks.c): Depend on vxworks.sh and vxworks.em.
	* Makefile.in: Regenerate.

ld/testsuite/
	* ld-arm/vxworks1.dd, ld-arm/vxworks1.ld, ld-arm/vxworks1-lib.dd,
	* ld-arm/vxworks1-lib.nd, ld-arm/vxworks1-lib.rd,
	* ld-arm/vxworks1-lib.s, ld-arm/vxworks1.rd, ld-arm/vxworks1.s,
	* ld-arm/vxworks1-static.d, ld-arm/vxworks2.s, ld-arm/vxworks2.sd,
	* ld-arm/vxworks2-static.sd: New tests.
	* ld-arm/arm-elf.exp: Run them.
@
text
@d161 1
d163 1
d730 5
d739 5
@


1.203.2.1
log
@
2006-04-03  Carlos O'Donell <carlos@@codesourcery.com>

	* Makefile.tpl: Add install-html target.
	* Makefile.def: Add install-html target.
	* Makefile.in: Regenerate.
	* configure.in: Add --with-datarootdir, --with-docdir,
	and --with-htmldir options.
	* configure: Regenerate.
	* opcodes/Makefile.am: Add install-html target.
	* opcodes/Makefile.in: Regenerate.
	* libiberty/Makefile.in: Add install-html, install-html-am, and
	install-html-recursive targets. Define mkdir_p and
	NORMAL_INSTALL.
	* libiberty/configure.ac: AC_SUBST datarootdir, docdir, htmldir.
	* libiberty/configure: Regenerate.
	* libiberty/testsuite/Makefile.in: Add install-html and html targets.
	* ld/Makefile.am: Add install-html, install-html-am, and
	install-html-recursive targets.
	* ld/Makefile.in: Regenerate.
	* ld/configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* ld/configure: Regenerate.
	* ld/po/Make-in: Add install-html target.
	* intl/Makefile.in: Add html info and dvi and install-html to .PHONY
	Add install-html target.
	* gprof/po/Make-in: Add install-html target.
	* gprof/Makefile.am: Add install-html, install-html-am and
	install-html-recursive targets.
	* gprof/Makefile.in: Regenerate.
	* gprof/configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* gprof/configure: Regenerate.
	* gas/po/Make-in: Add install-html target.
	* gas/Makefile.am: Add install-html and install-html-recursive targets.
	* gas/Makefile.in: Regenerate.
	* gas/configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* gas/configure: Regenerate.
	* gas/doc/Makefile.am: Add install-html and install-html-am targets.
	* gas/doc/Makefile.in: Regenerate.
	* binutils/po/Make-in: Add install-html target.
	* binutils/Makefile.am: Add install-html and install-html-recursive targets.
	* binutils/Makefile.in: Regenerate.
	* binutils/configure.in: AC_SUBST datarootdir, docdir and htmldir.
	* binutils/configure: Regenerate.
	* binutils/doc/Makefile.am: Add install-html and install-html-am targets.
	* binutils/doc/Makefile.in: Regenerate.
	* bfd/po/Make-in: Add install-html target.
	* bfd/Makefile.am: Rename docdir to bfddocdir. Add datarootdir, docdir
	htmldir. Add install-html and install-html-recursive targets.
	* bfd/Makefile.in: Regenerate.
	* bfd/configure.in: AC_SUBST for datarootdir, docdir and htmldir.
	* bfd/configure: Regenerate.
	* bfd/doc/Makefile.am: Add install-html and install-html-am targets.
	Define datarootdir, docdir and htmldir.
	* bfd/doc/Makefile.in: Regenerate.
	* etc/Makefile.in: Add install-html target. Add htmldir,
	docdir and datarootdir.
	* etc/configure.texi: Document install-html target.
	* etc/configure.in: AC_SUBST datarootdir, docdir, htmldir.
	* etc/configure: Regenerate.
@
text
@a1715 48
.PHONY: install-html install-html-am install-html-recursive

html__strip_dir = `echo $$p | sed -e 's|^.*/||'`;

install-html: install-html-recursive  install-html-am

install-html-am: $(HTMLS)
	@@$(NORMAL_INSTALL)
	test -z "$(htmldir)" || $(mkdir_p) "$(DESTDIR)$(htmldir)"
	@@list='$(HTMLS)'; for p in $$list; do \
	  if test -f "$$p" || test -d "$$p"; then d=""; else d="$(srcdir)/"; fi; \
	  f=$(html__strip_dir) \
	  if test -d "$$d$$p"; then \
	    echo " $(mkdir_p) '$(DESTDIR)$(htmldir)/$$f'"; \
	    $(mkdir_p) "$(DESTDIR)$(htmldir)/$$f" || exit 1; \
	    echo " $(INSTALL_DATA) '$$d$$p'/* '$(DESTDIR)$(htmldir)/$$f'"; \
	    $(INSTALL_DATA) "$$d$$p"/* "$(DESTDIR)$(htmldir)/$$f"; \
	  else \
	    echo " $(INSTALL_DATA) '$$d$$p' '$(DESTDIR)$(htmldir)/$$f'"; \
	    $(INSTALL_DATA) "$$d$$p" "$(DESTDIR)$(htmldir)/$$f"; \
	  fi; \
	done

install-html-recursive:
	@@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

@


1.203.2.2
log
@2006-07-14  Nathan Sidwell  <nathan@@codesourcery.com>

	bfd/
	* config.bfd (sh-*-uclinux, sh[12]-*-uclinux): New stanza.

	gas/
	* configure.tgt (sh-*-uclinux, sh[12]-*-uclinux): Specify as elf.

	ld/
	* Makefile.am (ALL_EMULATIONS): Add eshelf_uclinux.o
	(eshelf_uclinux.c): New target.
	* Makefile.in: Rebuilt.
	* configure.tgt (sh-*-uclinux* | sh[12]-*-uclinux*): New stanza.
	* emulparams/shelf_uclinux.sh: New.
@
text
@a353 1
	eshelf_uclinux.o \
a1467 3
eshelf_uclinux.c: $(srcdir)/emulparams/shelf_uclinux.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shelf_uclinux "$(tdir_shelf_uclinux)"
@


1.203.2.3
log
@	bfd/
	* Makefile.am: (VERSUFFIX_s): New. Pass it to compiler
	via -D.
	* Makefile.in: Regenerated.
	* configure: Regenerated.
	* configure.in: Add --with-versuffix option.
	* version.h: Add BFD_VERSION_SUFFIX, use it
	in BFD_VERSION_STRING.

	binutils/
	* Makefile.am: (REPORT_BUGS_TO_s): New. Pass it to compiler
	via -D.
	* Makefile.in: Regenerated.
	* configure: Regenerated.
	* configure.in: Add --with-bugurl option.

	gas/
	* Makefile.am: (REPORT_BUGS_TO_s): New. Pass it to compiler
	via -D.
	* Makefile.in: Regenerated.
	* configure: Regenerated.
	* configure.in: Add --with-bugurl option.

	gprof/
	* Makefile.am: (VERSUFFIX_s, REPORT_BUGS_TO_s): New. Pass
	them to compiler via -D.
	* Makefile.in: Regenerated.
	* configure: Regenerated.
	* configure.in: Add --with-versuffix and --with-bugurl option.
	* gprof.c: Print version suffix.

	ld/
	* Makefile.am: (REPORT_BUGS_TO_s): New. Pass it to compiler
	via -D.
	* Makefile.in: Regenerated.
	* configure: Regenerated.
	* configure.in: Add --with-bugurl option.
@
text
@d103 1
a103 6
REPORT_BUGS_TO_s := "\"@@REPORT_BUGS_TO@@\""

INCLUDES = -D_GNU_SOURCE -I. -I$(srcdir) -I../bfd -I$(BFDDIR) -I$(INCDIR) \
	-I$(top_srcdir)/../intl -I../intl $(HDEFINES) $(CFLAGS) \
	-DREPORT_BUGS_TO=$(REPORT_BUGS_TO_s) \
	-DLOCALEDIR="\"$(datadir)/locale\""
@


1.203.2.4
log
@Merge changes between binutils-csl-2_17-branchpoint and
binutils-2_17, except for the addition of generated files to CVS.
@
text
@d49 1
a49 1
TEXI2POD = perl $(BASEDIR)/etc/texi2pod.pl $(AM_MAKEINFOFLAGS)
d100 2
a101 2
AM_MAKEINFOFLAGS = -I $(srcdir) -I $(BFDDIR)/doc -I $(top_srcdir)/../libiberty
TEXI2DVI = texi2dvi -I $(srcdir) -I $(BFDDIR)/doc -I $(top_srcdir)/../libiberty
a154 1
	eelf32_sparc_vxworks.o \
a156 1
	eelf32bfinfd.o \
a165 1
	eelf32ebmipvxworks.o \
a166 1
	eelf32elmipvxworks.o \
d423 1
a423 1
	ldwrite.h mri.h deffile.h pe-dll.h elf-hints-local.h
d480 1
a480 1
GENSCRIPTS = LIB_PATH='${LIB_PATH}' $(SHELL) $(srcdir)/genscripts.sh "${srcdir}" "${libdir}" "${prefix}" "${exec_prefix}" @@host@@ @@target@@ @@target_alias@@ "@@EMULATION_LIBPATH@@" "@@NATIVE_LIB_DIRS@@" @@use_sysroot@@
d631 1
a631 1
  $(srcdir)/emultempl/elf32.em \
a633 4
eelf32bfinfd.c: $(srcdir)/emulparams/elf32bfinfd.sh $(srcdir)/emulparams/bfin.sh \
  $(srcdir)/emultempl/elf32.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32bfinfd "$(tdir_elf32bfinfd)" elf32bfinfd
a688 5
eelf32_sparc_vxworks.c: $(srcdir)/emulparams/elf32_sparc_vxworks.sh \
  $(srcdir)/emulparams/vxworks.sh $(srcdir)/emulparams/elf32_sparc.sh \
  $(srcdir)/emultempl/vxworks.em $(srcdir)/emultempl/elf32.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32_sparc_vxworks "$(tdir_elf32_sparc_vxworks)"
a733 5
eelf32ebmipvxworks.c: $(srcdir)/emulparams/elf32ebmipvxworks.sh \
  $(srcdir)/emulparams/elf32ebmip.sh $(srcdir)/emulparams/vxworks.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/vxworks.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ebmipvxworks "$(tdir_elf32ebmipvxworks)"
a737 5
eelf32elmipvxworks.c: $(srcdir)/emulparams/elf32elmipvxworks.sh \
  $(srcdir)/emulparams/elf32elmip.sh $(srcdir)/emulparams/vxworks.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/vxworks.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32elmipvxworks "$(tdir_elf32elmipvxworks)"
d1691 1
@


1.203.2.5
log
@	bfd/
	* Makefile.am (VERSUFFIX_s): Remove.
	(bfdver.h): Replace bfd_version_suffix with bfd_version_package.
	* configure.in: Replace --with-versuffix with --with-pkgversion.
	* version.h: Remove BFD_VERSION_SUFFIX. Update BFD_VERSION_STRING.
	* Makefile.in: Rebuilt.
	* configure: Rebuilt.

	binutils/
	* Makefile.am (REPORT_BUGS_TO_s): Replace with ...
	(REPORT_BUGS_TO): ... this.
	(INCLUDES): Update.
	* Makefile.in: Rebuilt.

	gas/
	* Makefile.am (REPORT_BUGS_TO_s): Replace with ...
	(REPORT_BUGS_TO): ... this.
	(INCLUDES, DEP_INCLUDES): Update.
	* Makefile.in: Rebuilt.

	gprof/
	* Makefile.am (REPORT_BUGS_TO_s): Replace with ...
	(REPORT_BUGS_TO): ... this.
	(VERSUFFIX_s): Remove.
	(INCLUDES): Update.
	* configure.in: Replace --with-versuffix with --with-pkgversion.
	* gprof.c (main): Update version printing.
	* Makefile.in: Rebuilt.
	* configure: Rebuilt.

	ld/
	* Makefile.am (REPORT_BUGS_TO_s): Replace with ...
	(REPORT_BUGS_TO): ... this.
	(INCLUDES): Update.
	* Makefile.in: Rebuilt.
@
text
@d103 1
a103 1
REPORT_BUGS_TO = `test -z "@@REPORT_BUGS_TO@@" || echo "-DREPORT_BUGS_TO=\"@@REPORT_BUGS_TO@@\""`
d107 1
a107 1
	$(REPORT_BUGS_TO) \
@


1.203.2.6
log
@	binutils/
	* Makefile.am: Rebuild dependencies.
	(REPORT_BUGS_TO): Always defined.
	(INCLUDES): Adjust.
	* Makefile.in: Rebuilt.
	* configure.in (REPORT_BUGS_TO): Provide default value.
	* configure: Rebuilt.
	* bucomm.h: Remove bin-bugs.h.
	* addr2line.c (usage): Don't print empty REPORT_BUGS_TO.
	* coffdump.c (show_usage): Likewise.
	* cxxfilt.c (usage): Likewise.
	* nlmconv.c (show_usage): Likewise.
	* nm.c (usage): Likewise.
	* objcopy.c (copy_usage, strip_usage): Likewise.
	* objdump.c (usage): Likewise.
	* size.c (usage): Likewise.
	* srconv.c (show_usage): Likewise.
	* string.c (usage): Likewise.
	* sysdymp.c (show_usage): Likewise.
	* windres.c (usage): Likewise.
	* readelf (usage): Likewise. Add STREAM argument.  Adjust callers.

	gas/
	* Makefile.am: Rebuild dependencies.
	(REPORT_BUGS_TO): Always defined.
	(INCLUDES): Adjust.
	* Makefile.in: Rebuilt.
	* configure.in (REPORT_BUGS_TO): Provide default value.
	* configure: Rebuilt.
	* as.c (show_usage): Don't print empty REPORT_BUGS_TO.
	* as.h: Remove bin-bugs.h.

	ld/
	* Makefile.am: Rebuild dependencies.
	(REPORT_BUGS_TO): Always defined.
	(INCLUDES): Adjust.
	* Makefile.in: Rebuilt.
	* configure.in (REPORT_BUGS_TO): Provide default value.
	* configure: Rebuilt.
	* ld.h: Remove bin-bugs.h
	* lexsup.c (help):  Don't print empty REPORT_BUGS_TO.

	gprof/
	* Makefile.am: Rebuild dependencies.
	(REPORT_BUGS_TO): Always defined.
	(PKGVERSION): Define.
	(INCLUDES): Adjust.
	* Makefile.in: Rebuilt.
	* configure.in (REPORT_BUGS_TO): Provide default value.
	* configure: Rebuilt.
	* gprof.c (usage): Don't print empty REPORT_BUGS_TO.
	* gprof.h: Remove bin-bugs.h

	include/
	* bin-bugs.h: Remove.
@
text
@d103 1
a103 1
REPORT_BUGS_TO = "\"@@REPORT_BUGS_TO@@\""
d107 1
a107 1
	-DREPORT_BUGS_TO=$(REPORT_BUGS_TO) \
d1886 1
a1886 1
  $(INCDIR)/bfdlink.h $(INCDIR)/safe-ctype.h ld.h \
d1890 1
a1890 1
  $(INCDIR)/bfdlink.h ld.h ldmisc.h \
d1894 1
a1894 1
  $(INCDIR)/bfdlink.h ld.h ldmain.h \
d1899 1
a1899 1
  $(INCDIR)/bfdlink.h $(INCDIR)/safe-ctype.h ld.h \
d1905 1
a1905 1
  $(INCDIR)/bfdlink.h ld.h ldmain.h \
d1912 1
a1912 1
  $(INCDIR)/bfdlink.h $(INCDIR)/filenames.h ld.h \
d1918 1
a1918 1
  ld.h ldmisc.h ldexp.h ldlang.h \
d1923 1
a1923 1
  $(INCDIR)/fopen-same.h ld.h ldver.h \
d1928 1
a1928 1
  ld.h ldexp.h ldlang.h ldwrite.h \
d1933 1
a1933 1
  ld.h ldmain.h ldmisc.h ldexp.h \
d1937 1
a1937 1
  sysdep.h config.h $(INCDIR)/fopen-same.h ld.h \
d1941 1
a1941 1
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h ld.h \
d1946 1
a1946 1
  ld.h ldexp.h ldlang.h ldwrite.h \
d1951 1
a1951 1
  $(INCDIR)/bfdlink.h ld.h ldexp.h \
d1956 1
a1956 1
  $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h ld.h \
d1961 1
a1961 1
  sysdep.h config.h $(INCDIR)/fopen-same.h ld.h \
@


1.203.2.7
log
@        Backport from mainline:

        2006-07-29  Richard Sandiford  <richard@@codesourcery.com>

        ld/
        * Makefile.am (eelf32b4300.c): Update dependencies.
        (eelf32bmip.c): Likewise.
        (eelf32bsmip.c): Likewise.
        (eelf32btsmip.c): Likewise.
        (eelf32btsmipn32.c): Likewise.
        (eelf32ltsmip.c): Likewise.
        (eelf32ltsmipn32.c): Likewise.
        (eelf32ebmip.c): Likewise.
        (eelf32ebmipvxworks.c): Likewise.
        (eelf32elmip.c): Likewise.
        (eelf32elmipvxworks.c): Likewise.
        (eelf32bmipn32.c): Likewise.
        (eelf32lmip.c): Likewise.
        (eelf32mipswindiss.c): Likewise.
        (eelf32lsmip.c): Likewise.
        (eelf64bmip.c): Likewise.
        (eelf64btsmip.c): Likewise.
        (eelf64ltsmip.c): Likewise.
        (emipsbig.c): Likewise.  Canonicalize ${GENSCRIPTS} line.
        (emipsbsd.c): Likewise.
        (emipsidt.c): Update dependencies.
        (emipsidtl.c): Likewise.
        (emipslit.c): Likewise.
        (emipslnews.c): Likewise.
        (emipspe.c): Likewise.  Fix ${GENSCRIPTS} invocation.
        * Makefile.in: Regenerate.
        * emulparams/elf32bmip.sh (EXTRA_EM_FILE): Define.
        * emulparams/elf32bmipn32-defs.sh (EXTRA_EM_FILE): Likewise.
        * emultempl/irix.em: Include emultempl/mipself.em.
        * emultempl/mipself.em: New file.

        ld/testsuite/
        * ld-mips-elf/hash1.s, ld-mips-elf/hash1a.d,
        * ld-mips-elf/hash1b.d, ld-mips-elf/hash1c.d: New tests.
        * ld-mips-elf/mips-elf.exp: Run them.

        2006-07-14  Jakub Jelinek  <jakub@@redhat.com>

        * elflink.c (bfd_elf_size_dynsym_hash_dynstr): Fix cinfo.shift2 value.

        2006-07-10  Jakub Jelinek  <jakub@@redhat.com>

        include/
        * bfdlink.h (struct bfd_link_info): Add emit_hash and
        emit_gnu_hash bitfields.

        include/elf/
        * common.h (SHT_GNU_HASH, DT_GNU_HASH): Define.

        ld/
        * scripttempl/elf.sc: Add .gnu.hash section.
        * emultempl/elf32.em (OPTION_HASH_STYLE): Define.
        (gld${EMULATION_NAME}_add_options): Register --hash-style option.
        (gld${EMULATION_NAME}_handle_option): Handle it.
        (gld${EMULATION_NAME}_list_options): Document it.
        * ldmain.c (main): Initialize emit_hash and emit_gnu_hash.
        * ld.texinfo: Document --hash-style option.

        ld/testsuite/
        * ld-powerpc/tlsso32.r: Adjust.
        * ld-powerpc/tlsso32.d: Adjust.
        * ld-powerpc/tlsso32.g: Adjust.
        * ld-powerpc/tlsso.r: Adjust.
        * ld-powerpc/tlsso.g: Adjust.
        * ld-powerpc/tlstocso.g: Adjust.

        bfd/
        * elf.c (_bfd_elf_print_private_bfd_data): Handle DT_GNU_HASH.
        (bfd_section_from_shdr, elf_fake_sections, assign_section_numbers):
        Handle SHT_GNU_HASH.
        (special_sections_g): Include .gnu.hash section.
        (bfd_elf_gnu_hash): New function.
        * elf-bfd.h (bfd_elf_gnu_hash, _bfd_elf_hash_symbol): New prototypes.
        (struct elf_backend_data): Add elf_hash_symbol method.
        * elflink.c (_bfd_elf_link_create_dynamic_sections): Create .hash
        only if info->emit_hash, create .gnu.hash section if
        info->emit_gnu_hash.
        (struct collect_gnu_hash_codes): New type.
        (elf_collect_gnu_hash_codes, elf_renumber_gnu_hash_syms,
        _bfd_elf_hash_symbol): New functions.
        (compute_bucket_count): Don't compute HASHCODES array, instead add
        that and NSYMS as arguments.  Use bed->s->sizeof_hash_entry
        instead of bed->s->arch_size / 8.  Fix .hash size estimation.
        When not optimizing, use the number of hashed symbols rather than
        dynsymcount.
        (bfd_elf_size_dynamic_sections): Only add DT_HASH if info->emit_hash,
        and ADD DT_GNU_HASH if info->emit_gnu_hash.
        (bfd_elf_size_dynsym_hash_dynstr): Size .hash only if info->emit_hash,
        adjust compute_bucket_count caller.  Create and populate .gnu.hash
        section if info->emit_gnu_hash.
        (elf_link_output_extsym): Only populate .hash section if
        finfo->hash_sec != NULL.
        (bfd_elf_final_link): Adjust assertion.  Handle DT_GNU_HASH.
        * elfxx-target.h (elf_backend_hash_symbol): Define if not yet defined.
        (elfNN_bed): Add elf_backend_hash_symbol.
        * elf64-x86-64.c (elf64_x86_64_hash_symbol): New function.
        (elf_backend_hash_symbol): Define.
        * elf32-i386.c (elf_i386_hash_symbol): New function.
        (elf_backend_hash_symbol): Define.

        binutils/
        * readelf.c (get_dynamic_type): Handle DT_GNU_HASH.
        (get_section_type_name): Handle SHT_GNU_HASH.
        (dynamic_info_DT_GNU_HASH): New variable.
        (process_dynamic_section): Handle DT_GNU_HASH.
        (process_symbol_table): Print also DT_GNU_HASH histogram.
@
text
@a485 2
ELF_DEPS = $(srcdir)/emultempl/elf32.em
ELF_GEN_DEPS = $(srcdir)/emultempl/generic.em
d505 1
a505 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d508 1
a508 1
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
d512 1
a512 1
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
d517 1
a517 1
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
d521 1
a521 1
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
d526 1
a526 1
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
d531 1
a531 1
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
d537 1
a537 1
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
d542 1
a542 1
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
d548 1
a548 1
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
d553 1
a553 1
  $(ELF_DEPS) $(srcdir)/emultempl/vxworks.em \
d570 1
a570 1
  $(ELF_DEPS) $(srcdir)/emultempl/armelf.em \
d580 1
a580 1
  $(srcdir)/emulparams/armelf.sh $(ELF_DEPS) \
d584 2
a585 2
eavr2.c: $(srcdir)/emulparams/avr2.sh $(srcdir)/emultempl/avrelf.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
d588 2
a589 2
eavr1.c: $(srcdir)/emulparams/avr1.sh $(srcdir)/emultempl/avrelf.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
d592 2
a593 2
eavr3.c: $(srcdir)/emulparams/avr3.sh $(srcdir)/emultempl/avrelf.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
d596 2
a597 2
eavr4.c: $(srcdir)/emulparams/avr4.sh $(srcdir)/emultempl/avrelf.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
d600 2
a601 2
eavr5.c: $(srcdir)/emulparams/avr5.sh $(srcdir)/emultempl/avrelf.em \
  $(ELF_DEPS) $(srcdir)/scripttempl/avr.sc \
d614 1
a614 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d617 1
a617 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d620 1
a620 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elfd10v.sc ${GEN_DEPENDS}
d623 1
a623 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elfd30v.sc ${GEN_DEPENDS}
d626 1
a626 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elfd30v.sc ${GEN_DEPENDS}
d629 1
a629 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elfd30v.sc ${GEN_DEPENDS}
d635 1
a635 1
  $(ELF_DEPS) \
d639 1
a639 1
  $(ELF_DEPS) \
d643 1
a643 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/dlx.sc ${GEN_DEPENDS}
d646 1
a646 1
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
d650 1
a650 1
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
d654 1
a654 1
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
d658 1
a658 1
  $(ELF_DEPS) $(srcdir)/emultempl/needrelax.em \
d662 1
a662 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d665 1
a665 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d668 1
a668 1
  $(srcdir)/emulparams/xtensa-config.sh $(ELF_DEPS) \
d674 1
a674 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d677 1
a677 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d680 1
a680 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d683 1
a683 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d686 1
a686 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d689 1
a689 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d692 1
a692 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d695 1
a695 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d699 1
a699 1
  $(srcdir)/emultempl/vxworks.em $(ELF_DEPS) \
d703 1
a703 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d706 1
a706 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d709 2
a710 2
  $(srcdir)/emulparams/elf32bmip.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d713 1
a713 1
  $(ELF_DEPS) \
d716 2
a717 2
eelf32bmip.c: $(srcdir)/emulparams/elf32bmip.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d720 2
a721 2
  $(srcdir)/emulparams/elf32bmip.sh $(ELF_DEPS) $(srcdir)/emultempl/irix.em \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d724 2
a725 2
  $(srcdir)/emulparams/elf32bmip.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d728 1
a728 1
  $(ELF_DEPS) $(srcdir)/emultempl/crxelf.em \
d732 2
a733 2
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d737 1
a737 2
  $(ELF_DEPS) $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc \
  ${GEN_DEPENDS}
d740 2
a741 3
  $(srcdir)/emulparams/elf32btsmipn32.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d744 2
a745 2
  $(srcdir)/emulparams/elf32bmip.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d748 3
a750 3
  $(srcdir)/emulparams/elf32bmip.sh $(srcdir)/emulparams/vxworks.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/mipself.em \
  $(srcdir)/emultempl/vxworks.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d754 1
a754 2
  $(ELF_DEPS) $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc \
  ${GEN_DEPENDS}
d757 3
a759 3
  $(srcdir)/emulparams/elf32bmip.sh $(srcdir)/emulparams/vxworks.sh \
  $(ELF_DEPS) $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/mipself.em \
  $(srcdir)/emultempl/vxworks.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d762 2
a763 3
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/irix.em $(srcdir)/emultempl/mipself.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d767 1
a767 2
  $(ELF_DEPS) $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc \
  ${GEN_DEPENDS}
d770 2
a771 2
  $(srcdir)/emulparams/elf32bmip.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d773 2
a774 2
eelf32mipswindiss.c: $(srcdir)/emulparams/elf32mipswindiss.sh $(ELF_DEPS) \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d779 1
a779 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d783 1
a783 1
  $(srcdir)/emultempl/ppc32elf.em $(ELF_DEPS) \
d789 1
a789 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d793 1
a793 1
  $(srcdir)/emultempl/ppc32elf.em $(ELF_DEPS) \
d797 1
a797 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d801 1
a801 1
  $(srcdir)/emultempl/vxworks.em $(ELF_DEPS) \
d806 1
a806 2
  $(ELF_DEPS) $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc \
  ${GEN_DEPENDS}
d809 1
a809 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d813 1
a813 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d817 1
a817 1
  $(srcdir)/emultempl/ppc32elf.em $(ELF_DEPS) \
d822 1
a822 1
  $(srcdir)/emultempl/ppc32elf.em $(ELF_DEPS) \
d827 1
a827 1
  $(srcdir)/emultempl/ppc32elf.em $(ELF_DEPS) \
d831 1
a831 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d835 1
a835 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d838 1
a838 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elfi370.sc ${GEN_DEPENDS}
d841 1
a841 1
  $(ELF_DEPS) $(srcdir)/scripttempl/ip2k.sc ${GEN_DEPENDS}
d844 1
a844 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/iq2000.sc ${GEN_DEPENDS}
d847 1
a847 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/iq2000.sc ${GEN_DEPENDS}
d850 1
a850 1
  $(ELF_DEPS) $(srcdir)/emultempl/alphaelf.em \
d855 1
a855 1
  $(ELF_DEPS) $(srcdir)/emultempl/alphaelf.em \
d860 1
a860 1
  $(ELF_DEPS) $(srcdir)/emultempl/alphaelf.em \
d865 1
a865 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d868 1
a868 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d871 1
a871 1
  $(ELF_DEPS) $(srcdir)/emultempl/ia64elf.em \
d877 1
a877 1
  $(ELF_DEPS) $(srcdir)/emultempl/ia64elf.em \
d882 1
a882 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d885 1
a885 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d889 1
a889 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d892 2
a893 3
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/irix.em $(srcdir)/emultempl/mipself.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d896 1
a896 1
  $(ELF_DEPS) $(srcdir)/emultempl/mmix-elfnmmo.em \
d900 1
a900 2
  $(srcdir)/emultempl/generic.em $(srcdir)/emultempl/elf-generic.em \
  $(srcdir)/emultempl/mmo.em \
d904 2
a905 2
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d908 2
a909 3
  $(srcdir)/emulparams/elf64btsmip.sh \
  $(srcdir)/emulparams/elf32bmipn32-defs.sh $(ELF_DEPS) \
  $(srcdir)/emultempl/mipself.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d912 1
a912 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d915 1
a915 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d919 1
a919 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d922 1
a922 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d925 1
a925 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf_chaos.sc ${GEN_DEPENDS}
d929 1
a929 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d932 1
a932 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d936 1
a936 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d939 1
a939 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d969 1
a969 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d973 1
a973 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d977 1
a977 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d981 1
a981 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d985 1
a985 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d989 1
a989 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d993 1
a993 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1017 1
a1017 1
  $(ELF_DEPS) $(srcdir)/emultempl/hppaelf.em \
d1021 1
a1021 1
  $(ELF_DEPS) $(srcdir)/emultempl/hppaelf.em \
d1026 1
a1026 1
  $(ELF_DEPS) $(srcdir)/emultempl/hppaelf.em \
d1030 1
a1030 1
  $(ELF_DEPS) $(srcdir)/emultempl/hppaelf.em \
d1034 1
a1034 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1055 1
a1055 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1061 1
a1061 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1070 1
a1070 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1073 1
a1073 1
  $(ELF_DEPS) $(srcdir)/scripttempl/nw.sc ${GEN_DEPENDS}
d1085 1
a1085 1
  $(srcdir)/emultempl/m68hc1xelf.em $(ELF_DEPS) \
d1089 1
a1089 1
  $(srcdir)/emultempl/m68hc1xelf.em $(ELF_DEPS) \
d1093 1
a1093 1
  $(srcdir)/emultempl/m68hc1xelf.em $(ELF_DEPS) \
d1097 1
a1097 1
  $(srcdir)/emultempl/m68hc1xelf.em $(ELF_DEPS) \
d1113 1
a1113 1
  $(ELF_DEPS) $(srcdir)/emultempl/m68kelf.em \
d1118 1
a1118 1
  $(ELF_DEPS) $(srcdir)/emultempl/m68kelf.em \
d1128 1
a1128 1
  $(ELF_DEPS) $(srcdir)/scripttempl/psos.sc ${GEN_DEPENDS}
d1139 8
a1146 1
emipsbig.c: $(srcdir)/emulparams/mipsbig.sh $(srcdir)/emultempl/generic.em \
a1147 7
	${GENSCRIPTS} mipsbig "$(tdir_mipsbig)"
emipsbsd.c: $(srcdir)/emulparams/mipsbsd.sh $(srcdir)/emultempl/generic.em \
  $(srcdir)/scripttempl/mipsbsd.sc ${GEN_DEPENDS}
	${GENSCRIPTS} mipsbsd "$(tdir_mipsbsd)"
emipsidt.c: $(srcdir)/emulparams/mipsidt.sh $(srcdir)/emultempl/generic.em \
  $(srcdir)/emultempl/mipsecoff.em $(srcdir)/scripttempl/mips.sc \
  ${GEN_DEPENDS}
d1149 3
a1151 3
emipsidtl.c: $(srcdir)/emulparams/mipsidtl.sh $(srcdir)/emultempl/generic.em \
  $(srcdir)/emultempl/mipsecoff.em $(srcdir)/scripttempl/mips.sc \
  ${GEN_DEPENDS}
d1153 2
a1154 2
emipslit.c: $(srcdir)/emulparams/mipslit.sh $(srcdir)/emultempl/generic.em \
  $(srcdir)/scripttempl/mips.sc ${GEN_DEPENDS}
d1156 1
a1156 1
emipslnews.c: $(srcdir)/emulparams/mipslnews.sh \
d1158 4
a1161 4
	${GENSCRIPTS} mipslnews "$(tdir_mipslnews)"
emipspe.c: $(srcdir)/emulparams/mipspe.sh $(srcdir)/emultempl/pe.em \
  $(srcdir)/scripttempl/pe.sc ${GEN_DEPENDS}
	${GENSCRIPTS} mipspe "$(tdir_mipspe)"
d1164 1
a1164 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1167 1
a1167 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1170 1
a1170 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1174 1
a1174 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1178 1
a1178 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1182 1
a1182 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1186 1
a1186 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1190 1
a1190 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1194 1
a1194 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1198 1
a1198 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1202 1
a1202 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1206 1
a1206 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1210 1
a1210 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1214 1
a1214 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1218 1
a1218 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1222 1
a1222 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1226 1
a1226 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1230 1
a1230 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1234 1
a1234 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1238 1
a1238 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1242 1
a1242 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1246 1
a1246 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1250 1
a1250 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1254 1
a1254 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1258 1
a1258 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1262 1
a1262 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1266 1
a1266 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1270 1
a1270 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1274 1
a1274 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1278 1
a1278 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1282 1
a1282 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1286 1
a1286 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1290 1
a1290 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1294 1
a1294 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430_3.sc \
d1298 1
a1298 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430_3.sc \
d1302 1
a1302 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430_3.sc \
d1306 1
a1306 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430_3.sc \
d1310 1
a1310 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430_3.sc \
d1314 1
a1314 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430_3.sc \
d1318 1
a1318 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430_3.sc \
d1322 1
a1322 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430_3.sc \
d1326 1
a1326 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430_3.sc \
d1330 1
a1330 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1334 1
a1334 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1338 1
a1338 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1342 1
a1342 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1346 1
a1346 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1350 1
a1350 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1354 1
a1354 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1358 1
a1358 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1362 1
a1362 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1366 1
a1366 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1370 1
a1370 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1374 1
a1374 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1378 1
a1378 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1382 1
a1382 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1386 1
a1386 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1390 1
a1390 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1394 1
a1394 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1398 1
a1398 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1402 1
a1402 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf32msp430.sc \
d1416 1
a1416 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1425 1
a1425 1
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1427 2
a1428 2
epjlelf.c: $(srcdir)/emulparams/pjlelf.sh $(srcdir)/emulparams/pjelf.sh \
  $(ELF_GEN_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1434 1
a1434 1
  $(ELF_DEPS) $(srcdir)/scripttempl/nw.sc ${GEN_DEPENDS}
d1440 1
a1440 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1449 1
a1449 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1454 1
a1454 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1460 1
a1460 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1466 1
a1466 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1469 1
a1469 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1473 1
a1473 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1477 1
a1477 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1480 1
a1480 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1484 1
a1484 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1487 1
a1487 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1492 1
a1492 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1495 1
a1495 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1497 3
d1502 1
a1502 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
a1503 3
eshelf_uclinux.c: $(srcdir)/emulparams/shelf_uclinux.sh \
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} shelf_uclinux "$(tdir_shelf_uclinux)"
d1506 1
a1506 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf32sh-symbian.sc ${GEN_DEPENDS}
d1511 1
a1511 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1517 1
a1517 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1523 1
a1523 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1527 1
a1527 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1532 1
a1532 1
  $(ELF_DEPS) $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d1593 1
a1593 1
  $(ELF_DEPS) $(srcdir)/scripttempl/v850.sc ${GEN_DEPENDS}
@


1.202
log
@ld/
	* emulparams/vxworks.sh (VXWORKS_BASE_EM_FILE): New variable.
	(EXTRA_EM_FILE): Define.
	* emultempl/vxworks.em: New file.
	* ld.texinfo (--force-dynamic): Document.
	* Makefile.am (eelf32ppcvxworks.cm, eelf_i386_vxworks.c): Depend
	on vxworks.em.
	* Makefile.in: Regenerate.

ld/testsuite/
	* ld-i386/vxworks1-static.d, ld-i386/vxworks2.s,
	* ld-i386/vxworks2.sd, ld-i386/vxworks2-static.sd: New tests.
	* ld-i386/i386.exp: Run them.
	* ld-powerpc/vxworks1-static.d, ld-powerpc/vxworks2.s,
	* ld-powerpc/vxworks2.sd, ld-powerpc/vxworks2-static.sd: New tests.
	* ld-powerpc/powerpc.exp: Run them.
@
text
@d542 2
a543 1
  $(srcdir)/emulparams/armelf.sh $(srcdir)/emultempl/elf32.em \
@


1.201
log
@bfd/
	* elf32-ppc.c (ppc_elf_plt_type): New enumeration.
	(ppc_elf_link_hash_table): Replace old_got and new_got with
	plt_type and can_use_new_plt.
	(ppc_elf_create_dynamic_sections): Add SEC_HAS_CONTENTS,
	SEC_LOAD and SEC_READONLY to the VxWorks .plt flags.
	(ppc_elf_check_relocs): Set can_use_new_plt instead of new_plt.
	Move from plt_type == PLT_UNSET to PLT_OLD instead of setting old_plt.
	(ppc_elf_select_plt_layout): Move from plt_type == PLT_UNSET to
	either plt_type == PLT_OLD or plt_type == PLT_NEW.  Assert that
	this function should not be called for VxWorks targets.
	(ppc_elf_tls_setup): Use plt_type instead of old_got.
	(allocate_got): Likewise.  Rearrange so that max_before_header
	is only used for PLT_OLD and PLT_NEW.
	(allocate_dynrelocs): Use plt_type instead of old_got and is_vxworks.
	(ppc_elf_size_dynamic_sections): Likewise.
	(ppc_elf_relax_section): Likewise.
	(ppc_elf_relocate_section): Likewise.
	(ppc_elf_finish_dynamic_symbol): Likewise.
	(ppc_elf_vxworks_link_hash_table_create): Initialize plt_type.

ld/
	* emulparams/elf32ppccommon.sh: New file, extracted from...
	* emulparams/elf32ppc.sh: ...here.
	* emulparams/elf32ppcvxworks.sh: Include elf32ppccommon.sh
	instead of elf32ppc.sh.
	(BSS_PLT): Remove override.
	* Makefile.am (eelf32lppc.c): Depend on elf32ppccommons.h.
	(eelf32lppcnto.c, eelf32lppcsim.c, eelf32ppcnto.c): Likewise.
	(eelf32ppc.c, eelf32ppc_fbsd.c, eelf32ppcsimm): Likewise.
	(eelf32ppclinux.c): Likewise.
	(eelf32ppcvxworks.c): Likewise.  Add missing vxworks.sh dependency.
	* Makefile.in: Regenerate.

ld/testsuite/
	* ld-powerpc/vxworks1-lib.s, ld-powerpc/vxworks1-lib.dd,
	* ld-powerpc/vxworks1-lib.rd, ld-powerpc/vxworks1.s,
	* ld-powerpc/vxworks1.dd, ld-powerpc/vxworks1.rd,
	* ld-powerpc/vxworks1.ld, ld-powerpc/vxworks1.sd: New test.
	* ld-powerpc/powerpc.exp: Run it.
@
text
@d771 2
a772 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d905 1
a905 1
  $(srcdir)/emulparams/vxworks.sh \
@


1.200
log
@
bfd/doc/
2006-10-14  Carlos O'Donell  <carlos@@codesourcery.com>

       * Makefile.am: Add html target.
       * Makefile.in: Regenerate.

bfd/
2006-10-14  Carlos O'Donell  <carlos@@codesourcery.com>

       * po/Make-in: Add html target.

binutils/
2006-10-14  Carlos O'Donell  <carlos@@codesourcery.com>

       * po/Make-in: Add html target.

gas/
2006-10-14  Carlos O'Donell  <carlos@@codesourcery.com>

       * doc/Makefile.am: Add html target.
       * doc/Makefile.in: Regenerate.
       * po/Make-in: Add html target.

gprof/
2006-10-14  Carlos O'Donell  <carlos@@codesourcery.com>

       * po/Make-in: Add html target.

ld/
2006-10-14  Carlos O'Donell  <carlos@@codesourcery.com>

       * Makefile.am: Add html target.
       * Makefile.in: Regenerate.
       * po/Make-in: Add html target.

opcodes/
2006-10-14  Carlos O'Donell  <carlos@@codesourcery.com>

       * po/Make-in: Add html target.

etc/
2006-10-14  Carlos O'Donell  <carlos@@codesourcery.com>

       * Makefile.in: TEXI2HTML uses makeinfo. Define
       HTMLFILES. Add html targets.
       * configure.texi: Use ifnottex. Add alternative
       image format specifier as jpg.
       * standards.texi: Use ifnottex.

intl/
2006-10-14  Carlos O'Donell  <carlos@@codesourcery.com>

       * intl/Makefile.in: Add html target.
@
text
@d747 1
d752 3
a754 2
  $(srcdir)/emulparams/elf32ppc.sh $(srcdir)/emultempl/ppc32elf.em \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d758 1
a758 1
  $(srcdir)/emultempl/ppc32elf.em \
d762 3
a764 2
  $(srcdir)/emulparams/elf32ppc.sh $(srcdir)/emultempl/ppc32elf.em \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d770 1
d780 2
a781 1
eelf32ppc.c: $(srcdir)/emulparams/elf32ppc.sh $(srcdir)/emultempl/ppc32elf.em \
d785 3
a787 2
  $(srcdir)/emulparams/elf32ppc.sh $(srcdir)/emultempl/ppc32elf.em \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d790 3
a792 2
  $(srcdir)/emulparams/elf32ppc.sh $(srcdir)/emultempl/ppc32elf.em \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d795 3
a797 2
  $(srcdir)/emulparams/elf32ppc.sh $(srcdir)/emultempl/ppc32elf.em \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
@


1.199
log
@Add support for the Infineon XC16X.
@
text
@d1679 1
a1679 2
$(srcdir)/ld.info: $(srcdir)/ld.texinfo configdoc.texi ldver.texi
ld.dvi: $(srcdir)/ld.texinfo configdoc.texi ldver.texi
@


1.198
log
@	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
@
text
@d186 3
d630 12
@


1.197
log
@
	Rename ms1 to mt, part 1
	* config.sub: Replace ms1 arch with mt.  Allow ms1 as alias.
	* configure.in: Replace ms1 arch with mt.
	* configure: Rebuilt.

	* bfd/Makefile.am (ALL_MACHINES, ALL_MACHINES_CFILES,
	BFD32_BACKENDS, BFD32_BACKENDS_CFILES): Replace ms1 with mt.
	(cpu_mt.lo, elf32-mt.lo): Update target and dependency names.
	* bfd/Makefile.in: Rebuilt.
	* bfd/config.bfd: Replace ms1 arch with mt.
	* bfd/configure.in: Replace ms1 files with mt files.
	* bfd/configure: Rebuilt.
	* bfd/elf32-mt.c: Renamed from elf32-ms1.c.  Update include files.
	* bfd/cpu-mt.c: Renamed from cpu-ms1.c.

	* cpu/mt.cpu: Rename from ms1.cpu.
	* cpu/mt.opc: Rename from ms1.opc.

	* binutils/Makefile.am: Replace ms1 files with mt files.
	* binutils/Makefile.in: Rebuilt.
	* binutils/readelf.c (elf/mt.h): Adjust #include.

	* gas/configure.in: Replace ms1 arch with mt arch.
	* gas/configure: Rebuilt.
	* gas/configure.tgt: Replace ms1 arch with mt arch.
	* gas/config/tc-mt.c: Renamed from tc-ms1.c: Update include files.

	* gas/doc/Makefile.am (CPU_DOCS): Replace ms1 files with mt files.
	* gas/doc/Makefile.in: Rebuilt.

	* gas/testsuite/gas/mt: Renamed from ms1 dir.  Update file names as
	needed.
	* gas/testsuite/gas/mt/errors.exp: Replace ms1 arch with mt arch.
	* gas/testsuite/gas/mt/mt.exp: Replace ms1 arch with mt arch.
	* gas/testsuite/gas/mt/relocs.exp: Replace ms1 arch with mt arch.

	* gdb/configure.tgt: Replace ms1 arch with mt arch.
	* gdb/config/mt: Renamed from ms1 dir.  Update file names as needed.
	* gdb/config/mt/mt.mt (TDEPFILES): Replace ms1 file with mt file.

	* include/elf/mt.h: Renamed from ms1.h

	* ld/Makefile.am (ALL_EMULATIONS): Replace ms1 files with mt files.
	(eelf32mt.c): Update target name and dependencies.
	* ld/Makefile.in: Rebuilt.
	* ld/configure.tgt: Replace ms1 arch with mt arch.
	* ld/emulparams/elf32mt.sh: Renamed from elf32ms1.sh. Update
	comment.

	* libgloss/configure.in: Replace ms1 arch with mt arch.
	* libgloss/configure: Rebuilt.
	* libgloss/mt: Renamed from ms1 dir.

	* newlib/configure.host: Replace ms1 arch with mt arch.
	* newlib/libc/machine/mt: Renamed from ms1 dir.

	* opcodes/Makefile.am (CLEANFILES, CGEN_CPUS, MT_DEPS): Replace ms1
	with mt.
	* opcodes/Makefile.in: Rebuilt.
	* opcodes/configure.in: Replace ms1 files with mt files.
	* opcodes/configure: Rebuilt.

	* sid/component/cgen-cpu/mt: Renamed from ms1 dir.  Update file
	names as appropriate.
	* sid/component/cgen-cpu/mt/Makefile.am: Replace ms1 files with mt
	files.
	* sid/component/cgen-cpu/mt/Makefile.in: Rebuilt.
@
text
@d1793 1
a1793 1
  $(INCDIR)/ansidecl.h $(INCDIR)/safe-ctype.h
d1798 1
a1798 2
  ldlex.h ldemul.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/filenames.h
d1801 5
a1805 5
  $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/obstack.h $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h \
  ldmain.h ldexp.h ldlang.h ldgram.h ldlex.h ldmisc.h \
  ldctor.h ldfile.h ldemul.h $(INCDIR)/fnmatch.h $(INCDIR)/demangle.h \
  $(INCDIR)/libiberty.h $(INCDIR)/hashtab.h
d1808 4
a1811 5
  $(INCDIR)/safe-ctype.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/progress.h $(INCDIR)/bfdlink.h $(INCDIR)/filenames.h \
  ld.h $(INCDIR)/bin-bugs.h ldmain.h ldmisc.h ldwrite.h \
  ldexp.h ldlang.h ldgram.h ldlex.h ldfile.h ldemul.h \
  ldctor.h
d1814 4
a1817 5
  $(INCDIR)/fopen-same.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/demangle.h $(INCDIR)/libiberty.h ld.h $(INCDIR)/bin-bugs.h \
  ldmisc.h ldexp.h ldlang.h ldgram.h ldlex.h ldmain.h \
  ldfile.h $(BFDDIR)/elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h
d1824 3
a1826 3
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/safe-ctype.h ld.h $(INCDIR)/bin-bugs.h ldexp.h \
  ldlang.h ldwrite.h ldmisc.h ldgram.h ldmain.h
d1829 4
a1832 4
  $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h ldmain.h \
  ldmisc.h ldexp.h ldlang.h ldgram.h ldlex.h ldfile.h \
  ldver.h ldemul.h $(INCDIR)/demangle.h $(INCDIR)/libiberty.h
d1835 1
a1835 2
  ldexp.h ldlang.h ldmisc.h mri.h ldgram.h $(INCDIR)/libiberty.h \
  $(INCDIR)/ansidecl.h
d1838 2
a1839 3
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
  ld.h $(INCDIR)/bin-bugs.h ldmain.h ldmisc.h ldexp.h \
  ldlang.h
d1842 4
a1845 5
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/safe-ctype.h ld.h $(INCDIR)/bin-bugs.h ldexp.h \
  ldlang.h ldwrite.h ldmisc.h ldgram.h ldmain.h ldfile.h \
  ldemul.h $(INCDIR)/coff/internal.h $(BFDDIR)/libcoff.h \
  $(INCDIR)/bfdlink.h deffile.h pe-dll.h
d1855 1
a1855 1
  ldmain.h $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h
d1857 3
a1859 3
  $(INCDIR)/safe-ctype.h ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
  ld.h $(INCDIR)/bin-bugs.h ldmisc.h deffile.h
@


1.196
log
@ld/
2005-11-25  Jan Beulich  <jbeulich@@novell.com>

	* Makefile.am: Make configdoc.texi writeable before trying
	to write to it.
	* Makefile.in: Refresh.
@
text
@d176 1
a176 1
	eelf32ms1.o \
d1559 1
a1559 1
eelf32ms1.c: $(srcdir)/emulparams/elf32ms1.sh \
d1561 1
a1561 1
	${GENSCRIPTS} elf32ms1 "$(tdir_ms1)"
@


1.195
log
@	* doc/binutils.texi: Include config.texi and @@file documentation
	for manual pages.

	* Makefile.am (gprof.info, gprof.1): Depend on config.texi.
	(config.texi): New file.
	* Makefile.in: Regenerated.

	* Makefile.am (configdoc.texi): Set top_srcdir in configdoc.texi..
	* Makefile.in: Regenerated.
	* ld.texinfo: Include configdoc.texi and ldver.texi in man pages.
	Add @@file documentation.
@
text
@d1656 1
@


1.194
log
@ld/
binutils/
opcodes/

2005-10-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerated.

	* dep-in.sed: Replace " ./" with " ".
@
text
@d1655 2
a1656 3
	ln -s ${srcdir}/${DOCVER}-doc.texi ./configdoc.texi >/dev/null 2>&1 \
	  || ln ${srcdir}/${DOCVER}-doc.texi ./configdoc.texi >/dev/null 2>&1 \
	  || cp ${srcdir}/${DOCVER}-doc.texi ./configdoc.texi
@


1.193
log
@Add support for the Z80 processor family
@
text
@d1782 1
a1782 1
  $(INCDIR)/symcat.h sysdep.h ./config.h $(INCDIR)/fopen-same.h \
d1784 2
a1785 2
  ldexp.h ldlang.h ldmisc.h ./ldgram.h ldmain.h ldctor.h
ldemul.o: ldemul.c ./config.h ../bfd/bfd.h $(INCDIR)/ansidecl.h \
d1788 1
a1788 1
  ldexp.h ldlang.h ldfile.h ldemul.h ldmain.h ./ldemul-list.h
d1790 1
a1790 1
  $(INCDIR)/symcat.h sysdep.h ./config.h $(INCDIR)/fopen-same.h \
d1792 1
a1792 1
  ldmisc.h ldexp.h ./ldgram.h ldlang.h $(INCDIR)/libiberty.h \
d1795 1
a1795 1
  $(INCDIR)/symcat.h sysdep.h ./config.h $(INCDIR)/fopen-same.h \
d1797 1
a1797 1
  ldmisc.h ldexp.h ldlang.h ldfile.h ldmain.h ./ldgram.h \
d1801 1
a1801 1
  $(INCDIR)/symcat.h sysdep.h ./config.h $(INCDIR)/fopen-same.h \
d1804 1
a1804 1
  ldmain.h ldexp.h ldlang.h ./ldgram.h ldlex.h ldmisc.h \
d1808 1
a1808 1
  $(INCDIR)/symcat.h sysdep.h ./config.h $(INCDIR)/fopen-same.h \
d1812 1
a1812 1
  ldexp.h ldlang.h ./ldgram.h ldlex.h ldfile.h ldemul.h \
d1815 1
a1815 1
  $(INCDIR)/symcat.h $(INCDIR)/bfdlink.h sysdep.h ./config.h \
d1818 1
a1818 1
  ldmisc.h ldexp.h ldlang.h ./ldgram.h ldlex.h ldmain.h \
d1822 1
a1822 1
  $(INCDIR)/symcat.h ../bfd/bfdver.h sysdep.h ./config.h \
d1826 1
a1826 1
  $(INCDIR)/symcat.h sysdep.h ./config.h $(INCDIR)/fopen-same.h \
d1829 2
a1830 2
  ldlang.h ldwrite.h ldmisc.h ./ldgram.h ldmain.h
lexsup.o: lexsup.c ./config.h ../bfd/bfd.h $(INCDIR)/ansidecl.h \
d1834 1
a1834 1
  ldmisc.h ldexp.h ldlang.h ./ldgram.h ldlex.h ldfile.h \
d1837 2
a1838 2
  sysdep.h ./config.h $(INCDIR)/fopen-same.h ld.h $(INCDIR)/bin-bugs.h \
  ldexp.h ldlang.h ldmisc.h mri.h ./ldgram.h $(INCDIR)/libiberty.h \
d1841 1
a1841 1
  $(INCDIR)/symcat.h sysdep.h ./config.h $(INCDIR)/fopen-same.h \
d1846 1
a1846 1
  $(INCDIR)/symcat.h sysdep.h ./config.h $(INCDIR)/fopen-same.h \
d1849 1
a1849 1
  ldlang.h ldwrite.h ldmisc.h ./ldgram.h ldmain.h ldfile.h \
d1853 1
a1853 1
  $(INCDIR)/symcat.h sysdep.h ./config.h $(INCDIR)/fopen-same.h \
d1858 1
a1858 1
  $(INCDIR)/symcat.h sysdep.h ./config.h $(INCDIR)/fopen-same.h \
d1860 1
a1860 1
  ldmisc.h ldexp.h ldlang.h ./ldgram.h ldfile.h ldlex.h \
d1864 1
a1864 1
  $(INCDIR)/symcat.h sysdep.h ./config.h $(INCDIR)/fopen-same.h \
@


1.192
log
@2005-09-30  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerated.
	* aclocal.m4: Likewise.
@
text
@d375 1
d1541 4
@


1.191
log
@	* Makefile.am: Bfin support.
	* Makefile.in: Regenerated.
	* aclocal.m4: Regenerated.
	* configure.tgt: Bfin support.
	* emulparams/bfin.sh: New file.
	* emultempl/bfin.em: New file.
@
text
@d1777 1
a1777 1
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
d1779 2
a1780 2
  ldexp.h ldlang.h ldmisc.h ldgram.h ldmain.h ldctor.h
ldemul.o: ldemul.c config.h ../bfd/bfd.h $(INCDIR)/ansidecl.h \
d1783 1
a1783 1
  ldexp.h ldlang.h ldfile.h ldemul.h ldmain.h ldemul-list.h
d1785 1
a1785 1
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
d1787 2
a1788 2
  ldmisc.h ldexp.h ldgram.h ldlang.h $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h
d1790 1
a1790 1
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
d1792 3
a1794 2
  ldmisc.h ldexp.h ldlang.h ldfile.h ldmain.h ldgram.h \
  ldlex.h ldemul.h $(INCDIR)/libiberty.h $(INCDIR)/filenames.h
d1796 6
a1801 6
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h $(INCDIR)/obstack.h \
  $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h ldmain.h \
  ldexp.h ldlang.h ldgram.h ldlex.h ldmisc.h ldctor.h \
  ldfile.h ldemul.h $(INCDIR)/fnmatch.h $(INCDIR)/demangle.h \
  $(INCDIR)/hashtab.h
d1803 6
a1808 5
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/libiberty.h $(INCDIR)/progress.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/filenames.h ld.h $(INCDIR)/bin-bugs.h \
  ldmain.h ldmisc.h ldwrite.h ldexp.h ldlang.h ldgram.h \
  ldlex.h ldfile.h ldemul.h ldctor.h
d1810 6
a1815 5
  $(INCDIR)/symcat.h $(INCDIR)/bfdlink.h sysdep.h config.h \
  $(INCDIR)/fopen-same.h $(INCDIR)/libiberty.h $(INCDIR)/demangle.h \
  ld.h $(INCDIR)/bin-bugs.h ldmisc.h ldexp.h ldlang.h \
  ldgram.h ldlex.h ldmain.h ldfile.h $(BFDDIR)/elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
d1817 1
a1817 1
  $(INCDIR)/symcat.h ../bfd/bfdver.h sysdep.h config.h \
d1821 5
a1825 5
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h \
  ld.h $(INCDIR)/bin-bugs.h ldexp.h ldlang.h ldwrite.h \
  ldmisc.h ldgram.h ldmain.h
lexsup.o: lexsup.c config.h ../bfd/bfd.h $(INCDIR)/ansidecl.h \
d1827 4
a1830 4
  $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h \
  ld.h $(INCDIR)/bin-bugs.h ldmain.h ldmisc.h ldexp.h \
  ldlang.h ldgram.h ldlex.h ldfile.h ldver.h ldemul.h \
  $(INCDIR)/demangle.h
d1832 3
a1834 2
  sysdep.h config.h $(INCDIR)/fopen-same.h ld.h $(INCDIR)/bin-bugs.h \
  ldexp.h ldlang.h ldmisc.h mri.h ldgram.h $(INCDIR)/libiberty.h
d1836 4
a1839 3
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h ld.h $(INCDIR)/bin-bugs.h \
  ldmain.h ldmisc.h ldexp.h ldlang.h
d1841 6
a1846 5
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h \
  ld.h $(INCDIR)/bin-bugs.h ldexp.h ldlang.h ldwrite.h \
  ldmisc.h ldgram.h ldmain.h ldfile.h ldemul.h $(INCDIR)/coff/internal.h \
  $(BFDDIR)/libcoff.h deffile.h pe-dll.h
d1848 1
a1848 1
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
d1853 1
a1853 1
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
d1855 2
a1856 2
  ldmisc.h ldexp.h ldlang.h ldgram.h ldfile.h ldlex.h \
  ldmain.h $(INCDIR)/libiberty.h
d1858 3
a1860 3
  $(INCDIR)/safe-ctype.h ../bfd/bfd.h $(INCDIR)/symcat.h \
  sysdep.h config.h $(INCDIR)/fopen-same.h ld.h $(INCDIR)/bin-bugs.h \
  ldmisc.h deffile.h
@


1.190
log
@Remove a29k support.
@
text
@d151 1
d619 4
@


1.189
log
@Add support for msp430x21xx variants
@
text
@a108 1
	ea29k.o \
a146 1
	eebmon29k.o \
a335 1
	esa29200.o \
a473 3
ea29k.c: $(srcdir)/emulparams/a29k.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/a29k.sc ${GEN_DEPENDS}
	${GENSCRIPTS} a29k "$(tdir_a29k)"
a620 3
eebmon29k.c: $(srcdir)/emulparams/ebmon29k.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/ebmon29k.sc ${GEN_DEPENDS}
	${GENSCRIPTS} ebmon29k "$(tdir_ebmon29k)"
a1384 3
esa29200.c: $(srcdir)/emulparams/sa29200.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/sa29200.sc ${GEN_DEPENDS}
	${GENSCRIPTS} sa29200 "$(tdir_sa29200)"
@


1.188
log
@	* Makefile.am (eelf32m32c.c): Fix dependencies.
	* Makefile.in: Regenerate.
@
text
@d293 4
d1226 16
@


1.187
log
@bfd/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
opcodes/
	* Makefile.am: Run "make dep-am".
	(stamp-m32c): Fix cpu dependencies.
	* Makefile.in: Regenerate.
	* ip2k-dis.c: Regenerate.
binutils/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
gas/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
ld/
	* Makefile.am: Run "make dep-am".
	(emipsidt.c, emipsidtl.c): Depend on generic.em.
	* Makefile.in: Regenerate.
@
text
@d1538 1
@


1.186
log
@ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	* configure.in: Add cases for Renesas m32c.
	* configure: Regenerated.

bfd/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	Add support for m32c-*-elf (Renesas m32c and m16c).
	* Makefile.am (ALL_MACHINES): Add cpu-m32c.lo.
	(ALL_MACHINES_CFILES): Add cpu-m32c.c.
	(BFD32_BACKENDS): Add elf32-m32c.lo.
	(BFD32_BACKENDS_CFILES): Add elf32-m32c.c.
	(cpu-m32c.lo, elf32-m32c.lo): New rules, generated by 'make dep-am'.
	* Makefile.in: Regenerated.
	* archures.c (bfd_arch_m32c, bfd_mach_m16c, bfd_mach_m32c): New
	arch and mach codes.
	(bfd_m32c_arch): New arch info object.
	(bfd_archures_list): List bfd_m32c_arch.
	* bfd-in2.h: Regenerated.
	* config.bfd: Add case for the m32c.
	* configure.in: Add case for the m32c.
	* configure: Regenerated.
	* cpu-m32c.c, elf32-m32c.c: New files.
	* libbfd.h: Regenerated.
	* targets.c (bfd_elf32_m32c_vec): Declare.
	(_bfd_target_vector): List bfd_elf32_m32c_vec.

binutils/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	* readelf.c: #include "elf/m32c.h"
	(guess_is_rela, dump_relocations, get_machine_name): Add cases for
	EM_M32C.
	* Makefile.am (readelf.o): Update dependencies.
	* Makefile.in: Regenerated.

cpu/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	* m32c.cpu, m32c.opc: Machine description for the Renesas M32C.

gas/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	Add support for the Renesas M32C.
	* Makefile.am (CPU_TYPES): List m32c.
	(TARGET_CPU_CFILES): List config/tc-m32c.c.
	(TARGET_CPU_HFILES): List config/tc-m32c.h.
	* configure.in: Add case for m32c.
	* configure.tgt: Add cases for m32c and m32c-*-elf.
	* configure: Regenerated.
	* config/tc-m32c.c, config/tc-m32c.h: New files.
	* doc/Makefile.am (CPU_DOCS): Add c-m32c.texi.
	* doc/Makefile.in: Regenerated.
	* doc/all.texi: Set M32C.
	* doc/as.texinfo: Add text for the M32C-specific options and line
	comment characters, and refer to c-m32c.texi.
	* doc/c-m32c.texi: New file.

include/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	* dis-asm.h (print_insn_m32c): New declaration.

include/elf/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	Add support for Renesas M32C and M16C.
	* common.h (EM_M32C): New machine number.
	* m32c.h: New file.

ld/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	Add support for the Renesas M32C and M16C.
	* Makefile.am (ALL_EMULATIONS): Add eelf32m32c.o.
	(eelf32m32c.c): New target.
	* Makefile.in: Regenerated.
	* configure.tgt: Add case for m32c-*-elf.
	* emulparams/elf32m32c.sh: New file.

opcodes/ChangeLog:
2005-07-14  Jim Blandy  <jimb@@redhat.com>

	Add support for the Renesas M32C and M16C.
	* m32c-asm.c, m32c-desc.c, m32c-dis.c, m32c-ibld.c, m32c-opc.c: New.
	* m32c-desc.h, m32c-opc.h: New.
	* Makefile.am (HFILES): List m32c-desc.h and m32c-opc.h.
	(CFILES): List m32c-asm.c, m32c-desc.c, m32c-dis.c, m32c-ibld.c,
	m32c-opc.c.
	(ALL_MACHINES): List m32c-asm.lo, m32c-desc.lo, m32c-dis.lo,
	m32c-ibld.lo, m32c-opc.lo.
	(CLEANFILES): List stamp-m32c.
	(M32C_DEPS): List stamp-m32c, if CGEN_MAINT.
	(CGEN_CPUS): Add m32c.
	(m32c-asm.c, m32c-desc.c, m32c-dis.c, m32c-ibld.c, m32c-opc.c)
	(m32c-desc.h, m32c-opc.h): Depend on M32C_DEPS.
	(m32c_opc_h): New variable.
	(stamp-m32c, m32c-asm.lo, m32c-desc.lo, m32c-dis.lo, m32c-ibld.lo)
	(m32c-opc.lo): New rules.
	* Makefile.in: Regenerated.
	* configure.in: Add case for bfd_m32c_arch.
	* configure: Regenerated.
	* disassemble.c (ARCH_m32c): New.
	[ARCH_m32c]: #include "m32c-desc.h".
	(disassembler) [ARCH_m32c]: Add case for bfd_arch_m32c.
	(disassemble_init_for_target) [ARCH_m32c]: Same.

	* cgen-ops.h, cgen-types.h: New files.
	* Makefile.am (HFILES): List them.
	* Makefile.in: Regenerated.
@
text
@d1091 2
a1092 1
  $(srcdir)/emultempl/mipsecoff.em $(srcdir)/scripttempl/mips.sc ${GEN_DEPENDS}
d1095 2
a1096 1
  $(srcdir)/emultempl/mipsecoff.em $(srcdir)/scripttempl/mips.sc ${GEN_DEPENDS}
d1768 2
a1769 2
  ld.h $(INCDIR)/bin-bugs.h ldmisc.h ldexp.h ldlang.h \
  ldfile.h ldemul.h ldmain.h ldemul-list.h
@


1.185
log
@2005-05-07  Paul Brook  <paul@@codesourcery.com>

bfd/
	* config.bfd: Add separate case for ppc-vxworks.
	* configure: Regenerate.
	* configure.in: Include elf-vxworks.lo on ppc targets.
	* elf-vxworks.c (elf_vxworks_final_write_processing): Handle
	.rela.plt.unloaded.
	* elf32-ppc.c: Add VxWorks target vec.	Include elf-vxworks.h.
	(PLT_ENTRY_SIZE, PLT_INITIAL_ENTRY_SIZE, PLT_SLOT_SIZE): Remove.
	(VXWORKS_PLT_ENTRY_SIZE, ppc_elf_vxworks_plt_entry,
	ppc_elf_vxworks_pic_plt_entry, VXWORKS_PLT_INITIAL_ENTRY_SIZE,
	ppc_elf_vxworks_plt0_entry, ppc_elf_vxworks_pic_plt0_entry,
	VXWORKS_PLT_NON_JMP_SLOT_RELOCS, VXWORKS_PLTRESOLVE_RELOCS,
	VXWORKS_PLTRESOLVE_RELOCS_SHLIB): New.
	(ppc_elf_link_hash_table): Add srelplt2, sgotplt, hgot, hplt,
	is_vxworks, plt_entry_size, plt_slot_size, plt_initial_entry_size.
	(ppc_elf_link_hash_table_create): Initialize hadtab plt fields.
	(ppc_elf_create_got): Create .got.plt for VxWorks.
	(ppc_elf_create_dynamic_sections): Create unloaded plt relocation
	section for VxWorks.
	(ppc_elf_select_plt_layout): Handle VxWorks plt format.
	(allocate_got): VxWorks does not need a got header.
	(allocate_dynrelocs): Handle VxWorks plt format.
	(ppc_elf_size_dynamic_sections): Save _G_O_T_ and _P_L_T_ symbols for
	VxWorks.  Handle VxWorks plt/got.
	(ppc_elf_finish_dynamic_sections): Fill in VxWorks plt.
	(ppc_elf_vxworks_special_sections): New.
	(ppc_elf_vxworks_link_hash_table_create,
	ppc_elf_vxworks_add_symbol_hook,
	elf_i386_vxworks_link_output_symbol_hook,
	ppc_elf_vxworks_final_write_processing): New functions.
	* targets.c (bfd_elf32_powerpc_vxworks_vec): Declare.
	(_bfd_target_vector): Use it.
gas/
	* config/tc-ppc.c (ppc_target_format): Add VxWorks.
gas/testsuite/
	* gas/ppc/altivec.d: Match all powerpc target vecs.
	* gas/ppc/booke.d: Ditto.
	* gas/ppc/e500.d: Ditto.
ld/
	* Makefile.am (ALL_EMULATIONS): Add eelf32ppcvxworks.o.
	(eelf32ppcvxworks.o): Add dependencies.
	* Makefile.in: Regenerate.
	* configure.tgt: Add entry for powerpc-vxworks.
	* emulparams/elf32-ppc.c: Mention elf32ppcvxworks.sh in comment.
	* emulparams/elf32ppcvxworks.sh: New file.
	* emultempl/ppc32elf.em (bfd_elf32_powerpc_vxworks_vec): Declare.
	(is_ppc_elf32_vec): New function.
	(ppc_after_open, ppc_before_allocation,
	gld${EMULATION_NAME}_after_allocation): Use it.
@
text
@d174 1
d372 1
a372 1
	  eelf32frvfd.o \
d1535 3
@


1.184
log
@	* Makefile.am (check-DEJAGNU): Don't search for expect.
	* Makefile.in: Regenerate.
@
text
@d184 1
d749 3
@


1.183
log
@	* Makefile.am (EXPECT): Set to expect.
	(RUNTEST): Likewise, set to runtest.
	* Makefile.in: Regenerate.
@
text
@a1554 4
	if [ -f $(top_builddir)/../expect/expect ]; then \
	  TCL_LIBRARY=`cd $(top_srcdir)/../tcl/library && pwd`; \
	  export TCL_LIBRARY; \
	fi; \
@


1.182
log
@2005-06-07  Eric Christopher  <echristo@@redhat.com>

        * Makefile.am (eelf32ms1.c): Use tab.
        * Makefile.in: Regenerate.

2005-06-07  Eric Christopher  <echristo@@redhat.com>

        * readelf.c (guess_is_rela): Support ms1.
        (dump_relocations): Ditto.
        (get_machine_name): Ditto.
@
text
@d60 2
a61 8
EXPECT = `if [ -f $$r/../expect/expect ] ; \
	then echo $$r/../expect/expect ; \
	else echo expect ; fi`

RUNTEST = `if [ -f $${srcroot}/../dejagnu/runtest ] ; \
	then echo $${srcroot}/../dejagnu/runtest ; \
	else echo runtest ; fi`

@


1.181
log
@	* configure.tgt: Same.

	* Makefile.am (ALL_EMULATIONS): Depend on eelf32ms1.o.
	(eelf32ms1.c): Add eelf32ms1.c rule.

	* Makefile.in: Regenerate.
@
text
@d1538 1
a1538 1
        ${GENSCRIPTS} elf32ms1 "$(tdir_ms1)"
@


1.180
log
@2005-05-21  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ld.1): Revert the last 2 changes.
	(info-recursive): Depend on ld.1.
	* Makefile.in: Regenerated.
@
text
@d182 1
d1536 3
@


1.179
log
@2005-05-21  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ld.1): Depend on "info" instead of
	"configdoc.texi ldver.texi".
	* Makefile.in: Regenerated.
@
text
@d1647 1
a1647 3
# It depends on "info" instead of "configdoc.texi ldver.texi" to
# support parallel build.
ld.1: $(srcdir)/ld.texinfo info
d1702 5
@


1.178
log
@2005-05-21  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (ld.1): Depend on "info".
	* Makefile.in: Regenerated.
@
text
@d1647 3
a1649 1
ld.1: $(srcdir)/ld.texinfo configdoc.texi ldver.texi
a1703 2
ld.1: info

@


1.177
log
@	* bfd/Makefile.am, binutils/Makefile.am, etc/Makefile.in
	* gas/Makefile.am: Have 'all' depend on 'info'.
	* ld/Makefile.am: Have 'all' depend on 'info' and 'ld.1'.
	* bfd/Makefile.in, binutils/Makefile.in, gas/Makefile.in
	* ld/Makefile.in: Regenerate.
@
text
@d1702 2
@


1.176
log
@binutils/
	* doc/Makefile.am (config.texi): Don't use $<.
	* doc/Makefile.in: Regenerated.
ld/
	* Makefile.am (ldver.texi): Don't use $<.
	* Makefile.in: Regenerated.
gas/
	* doc/Makefile.am (gasver.texi): Don't use $<.
	* doc/Makefile.in: Regenerated.
@
text
@d1700 1
@


1.175
log
@	* Makefile.am (AM_MAKEINFOFLAGS, TEXI2DVI): Explicitly include
	$(srcdir) before $(BFDDIR)/doc.
	* Makefile.in: Regenerated.
@
text
@d1638 2
a1639 1
	eval `grep '^ *VERSION=' $<`; echo "@@set VERSION $$VERSION" > $@@
@


1.174
log
@./
	* ylwrap: Import from Automake 1.9.5.
binutils/
	* acinclude.m4: Remove obsolete code.
	* configure.in: Update AC_PREREQ.
	* doc/Makefile.am (binutils_TEXINFOS): Define.
	(config.texi): Depend on distributed files instead of built
	files.
	(binutils.dvi, binutils.info): Remove unnecessary rules.
	(DISTCLEANFILES): Remove.
	(install-data-local): Renamed from install.
	(info-local): Renamed from info.
	* Makefile.in, aclocal.m4, config.in, configure,
	doc/Makefile.in: Regenerated.
gas/
	* Makefile.am (m68k-parse.c, itbl-parse.c): Update ylwrap
	invocation.
	* Makefile.in: Regenerated.
ld/
	* Makefile.am (AM_MAKEINFOFLAGS): Define.
	(TEXI2DVI): Define.
	(ldver.texi): Depend on distributed files instead of built files.
	(ld.info): Include $(srcdir) in the rule target.  Remove actions.
	(ld.dvi): Remove actions.
	(MAINTAINERCLEANFILES): Add configdoc.texi.
	(CONFIG_STATUS_DEPENDENCIES): Add bfd/configure.in.
	(install-data-local): Renamed from install.
	(Makefile): Remove explicit dependency.
	* acinclude.m4: Remove obsolete code.
	* configure.in: Update AC_PREREQ.  Remove extra $CONFIG_SHELL.
	* Makefile.in, aclocal.m4, config.in, configure: Regenerated.
gdb/
	* Makefile.in (.y.c): Update ylwrap invocation.
@
text
@d106 2
a107 2
AM_MAKEINFOFLAGS = -I $(BFDDIR)/doc
TEXI2DVI = texi2dvi -I $(BFDDIR)/doc
@


1.173
log
@2005-05-05  Paul Brook  <paul@@codesourcery.com>

bfd/
	* config.bfd: Use bfd_elf32_i386_vxworks_vec for i?86-*-vxworks.
	* configure.in: Add bfd_elf32_i386_vxworks_vec. i386 targets need
	elf-vxworks.lo.
	* configure: Regenerate.
	* Makefile.am (BFD32_BACKENDS): Add elf-vxworks.lo.
	(BFD32_BACKENDS_CFILES): Add elf-vxworks.c.
	(elf32-i386.lo): Depend on elf-vxworks.h.
	(elf-vxworks.lo): New rule.
	* Makefile.in: Regenerate.
	* elf-bfd.h (elf_backend_data): Update type of
	elf_backend_emit_relocs.
	(_bfd_elf_link_output_relocs): Update prototype.
	* elflink.c (_bfd_elf_link_output_relocs): Always use
	bed->elf_backend_emit_relocs when outputting relocations.
	* elfxx-target.h (elf_backend_emit_relocs): Default to
	_bfd_elf_link_output_relocs.
	* targets.c (bfd_elf32_i386_vxworks_vec): Declare.
	(_bfd_target_vector): Add bfd_elf32_i386_vxworks_vec.
	* elf32-i386.c: Add elf32-i386-vxworks target BFD.
	(elf_i386_plt0_entry): Remove padding.
	(elf_i386_pic_plt0_entry): Ditto.
	(PLTRESOLVE_RELOCS_SHLIB, PLTRESOLVE_RELOCS): Define.
	(PLT_NON_JUMP_SLOT_RELOCS): Define.
	(elf_i386_link_hash_table): Add srelplt2, hgot, hplt, is_vxworks and
	plt0_pad_byte fields.
	(elf_i386_link_hash_table_create): Zero them.
	(elf_i386_create_dynamic_sections): Create static relocation section.
	(allocate_dynrelocs): Allocate space for static PLT relocations.
	(elf_i386_size_dynamic_sections): Save shortcuts to PLT and GOT
	symbols.  Give PLT symbols function type.  Don't strip PLT sections
	if we have exported symbols from them.
	(elf_i386_finish_dynamic_symbol): Fill in VxWorks PLT static
	relocation section.  Don't mark _GLOBAL_OFFSET_TABLE_ as absolute on
	VxWorks.
	(elf_i386_finish_dynamic_sections): Allow different pad bytes.
	Add relocation for GOT location.  Fill in PLT static relocations.
	(elf_i386_vxworks_link_hash_table_create): New function.
	(elf_i386_vxworks_link_output_symbol_hook): New function.
	* elf-vxworks.h: New file.
gas/
	* config/tc-i386.h (ELF_TARGET_FORMAT): Define for TE_VXWORKS.
gas/testsuite/
	* gas/i386/i386.exp: Don't run divide test on vxworks.
ld/
	* Makefile.am: Add eelf_i386_vxworks.
	* Makefile.in: Regenerate.
	* configure.tgt: Make i?86-*-vxworks use targ_emul=elf_i386_vxworks.
	* emulparams/elf_i386_vxworks.sh: New file.
	* emulparams/vxworks.sh: New file.
	* scripttempl/elf.sc: Add DATA_END_SYMBOLS and ETEXT_NAME.
@
text
@d106 3
d1636 1
a1636 1
ldver.texi: Makefile
d1638 1
a1638 5
	echo '@@set VERSION $(VERSION)' > $@@

ld.info: $(srcdir)/ld.texinfo configdoc.texi ldver.texi
	@@rm -f $@@ $@@-[0-9] $@@-[0-9][0-9]
	$(MAKEINFO) -I $(srcdir) -I $(BFDDIR)/doc $(srcdir)/ld.texinfo
d1640 1
a1641 2
	TEXINPUTS=$(top_srcdir)/../texinfo:$$TEXINPUTS \
	  MAKEINFO="$(MAKEINFO) -I $(srcdir) -I $(BFDDIR)/doc" $(TEXI2DVI) -I $(BFDDIR)/doc $(srcdir)/ld.texinfo
d1655 1
a1655 1
MAINTAINERCLEANFILES = ldver.texi
d1657 4
a1660 2
# We want to reconfigure if configure.host or configure.tgt changes.
CONFIG_STATUS_DEPENDENCIES = $(srcdir)/configure.host $(srcdir)/configure.tgt
d1693 1
a1693 1
install: install-info
a1703 2
Makefile: $(BFDDIR)/configure.in

@


1.172
log
@bfd/
	* Makefile.am (NO_WERROR): Define.
	* warning.m4: New file
	* acinclude.m4: Include warning.m4.
	* configure.in: Invoke AM_BINUTILS_WARNINGS.
	* Makefile.in: Regenerate.
	* configure: Regenerate.
bfd/doc/
	* Makefile.in: Regenerate.
binutils/
	* Makefile.am (NO_WERROR): Define.  Use instead of -Wno-error.
	* configure.in: Include ../bfd/warning.m4 contents.
	* Makefile.in: Regenerate.
	* configure: Regenerate.
	* doc/Makefile.in: Regenerate.
gas/
	* Makefile.am (NO_WERROR): Define.  Use instead of -Wno-error.
	* acinclude.m4: Include ../bfd/warning.m4.
	* configure.in: Invoke AM_BINUTILS_WARNINGS.
	* Makefile.in: Regenerate.
	* configure: Regenerate.
	* doc/Makefile.in: Regenerate.
gprof/
	* Makefile.am (NO_WERROR): Define.
	* acinclude.m4: Include ../bfd/warning.m4.
	* configure.in: Invoke AM_BINUTILS_WARNINGS.
	* Makefile.in: Regenerate.
	* aclocal.m4: Regenerate.
	* configure: Regenerate.
ld/
	* Makefile.am (NO_WERROR): Define.  Use instead of -Wno-error.
	* configure.in: Include ../bfd/warning.m4 contents.
	* Makefile.in: Regenerate.
	* configure: Regenerate.
opcodes/
	* Makefile.am (NO_WERROR): Define.
	* configure.in: Invoke AM_BINUTILS_WARNINGS.
	* Makefile.in: Regenerate.
	* aclocal.m4: Regenerate.
	* configure: Regenerate.
@
text
@d194 1
d876 4
@


1.171
log
@bfd/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* aclocal.m4: Regenerate.
	* libcoff.h: Regenerate.
bfd/doc/
	* Makefile.in: Regenerate.
binutils/
	* Makefile.am: Run "make dep-am".
	(syslex.o, sysinfo.o, arparse.o, arlex.o): Add -Wno-error to command.
	(sysroff.o, defparse.o, deflex.o): Likewise.
	(nlmheader.o, rcparse.o, rclex.o): Likewise.
	* Makefile.in: Regenerate.
	* aclocal.m4: Regenerate.
	* config.in: Regenerate.
	* configure: Regenerate.
gas/
	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
ld/
	* Makefile.am: Run "make dep-am".
	(ldgram.o, ldlex.o, deffilep.o): Add -Wno-error to command.
	* Makefile.in: Regenerate.
	* config.in: Regenerate.
@
text
@d17 1
d424 1
a424 1
	$(COMPILE) -c $< -Wno-error
d426 1
a426 1
	$(COMPILE) -c $< -Wno-error
d428 1
a428 1
	$(COMPILE) -c $< -Wno-error
@


1.170
log
@	* Makefile.am: Remove references to em68klynx.o and esparclynx.o.
	* Makefile.in: Regenerated.
	* emulparams/m68klynx.sh, emulparams/sparclynx.sh: Remove.
@
text
@d420 9
d1751 2
a1752 2
ldemul.o: ldemul.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
d1793 2
a1794 2
lexsup.o: lexsup.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
@


1.169
log
@	* Makefile.am (ALL_EMULATIONS): Add earmelfb_linux_eabi.o.
	(earmelfb_linux_eabi.c): New target.
	* Makefile.in: Regenerated.
	* configure.tgt (arm*b-*-linux-gnueabi): New target.
	* emulparams/armelfb_linux_eabi.sh: New file.
@
text
@a251 1
	em68klynx.o \
a352 1
	esparclynx.o \
a1050 3
em68klynx.c: $(srcdir)/emulparams/m68klynx.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/m68klynx.sc ${GEN_DEPENDS}
	${GENSCRIPTS} m68klynx "$(tdir_m68klynx)"
a1455 3
esparclynx.c: $(srcdir)/emulparams/sparclynx.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/sparclynx.sc ${GEN_DEPENDS}
	${GENSCRIPTS} sparclynx "$(tdir_sparclynx)"
@


1.168
log
@2005-01-06  Paul Brook  <paul@@codesourcery.com>

bfd/
	* config.bfd: Add entry for arm-*-vxworks and arm-*-windiss.
	* configure.in: Add bfd_elf32_{big,little}arm_vxworks_vec.
	* configure: Regenerate.
	* elf32-arm.c: Add VxWorks target bfd.
	(USE_REL): Remove.
	(elf32_arm_link_hash_table): Add use_rel.
	(elf32_arm_link_hash_table_create, elf32_arm_final_link_relocate,
	elf32_arm_relocate_section): Replace USE_REL with runtime check.
	Correct offset calculation for RELA case.
	(elf_backend_may_use_rel_p, elf_backend_may_use_rela_p,
	elf_backend_default_use_rela_p, elf_backend_rela_normal): Define.
	(elf32_arm_vxworks_link_hash_table_create): New function.
	* targets.c (bfd_elf32_bigarm_vxworks_vec): Add declaration.
	(bfd_elf32_littlearm_vxworks_vec): Ditto.
	(_bfd_target_vector): Add bfd_elf32_{big,little}arm_vxworks_vec.
gas/
	* config/tc-arm.c (FPU_DEFAULT): Define for TE_VXWORKS.
	(md_begin): Handle TE_VXWORKS for FP defaults.
	(md_apply_fix3): Correct rela offsets.
	(elf32_arm_target_format): Add VxWorks targets.
ld/
	* Makefie.am: Add earmelf_vxworks.
	* Makefile.in: Regenerate.
	* configure.tgt: Make arm-*-vxworks a separate case.
	* emulparams/armelf_vxworks.sh: New function.
@
text
@d126 1
d512 6
@


1.167
log
@	* Makefile.am: Correct dependency for earmsymbian.c.
	* Makefile.in: Regenerate.
@
text
@d128 1
d522 5
@


1.166
log
@Change LOCALEDIR to $(datadir)/share.
@
text
@d545 1
a545 1
  $(srcdir)/emultempl/armelf.em $(srcdir)/scripttempl/elf.sc \
@


1.165
log
@	* Makefile.am (ALL_EMULATIONS): Add earmelf_linux_eabi.o.
	(earmelf_linux_eabi.c): New target.
	* configure.tgt (arm*-*-linux-gnueabi): Handle it.
	* emulparams/armelf_linux_eabi.sh: New file.
	* Makefile.in: Regenerated.
@
text
@d105 1
a105 1
INCLUDES = -D_GNU_SOURCE -I. -I$(srcdir) -I../bfd -I$(BFDDIR) -I$(INCDIR) -I$(top_srcdir)/../intl -I../intl $(HDEFINES) $(CFLAGS) -DLOCALEDIR="\"$(prefix)/share/locale\""
@


1.164
log
@Add support fpr MAXQ processor
@
text
@d124 1
d500 5
@


1.163
log
@./
	* configure.in (arm-*-oabi*, thumb-*-oabi*): Remove.
	* configure: Regenerated.
bfd/
	* Makefile.am (BFD32_BACKENDS, BFD32_BACKENDS_CFILES): Replace
	elfarm-nabi with elf32-arm.  Remove elfarm-oabi.
	(elf32-arm.lo): Replace elfarm-nabi.lo rule.  Remove elf32-arm.h
	dependency.
	* config.bfd: Move arm-*-oabi* and thumb-*-oabi* from obsolete list
	to a new removed list.  Remove normal configuration stanzas.
	* configure.in: (bfd_elf32_bigarm_vec, bfd_elf32_bigarm_symbian_vec)
	(bfd_elf32_littlearm_symbian_vec, bfd_elf32_littlearm_vec): Replace
	elfarm-nabi.lo with elf32-arm.lo.
	(bfd_elf32_bigarm_oabi_vec, bfd_elf32_littlearm_oabi_vec): Remove.
	* elf32-arm.c: Renamed from elfarm-nabi.c.  Inline elf32-arm.h.
	* elf32-arm.h: Remove.
	* elfarm-oabi.c: Remove.
	* targets.c (_bfd_target_vector): Remove bfd_elf32_bigarm_oabi_vec
	and bfd_elf32_littlearm_oabi_vec.
	* aclocal.m4, Makefile.in, configure, doc/Makefile.in: Regenerated.
gas/
	* configure.in: Remove arm-*-oabi and thumb-*-oabi.
	* config/tc-arm.c (target_oabi): Delete.
	(md_apply_fix3, elf32_arm_target_format): Remove target_oabi checks.
	(arm_opts): Remove moabi.
	* doc/as.texinfo (Overview): Remove documentation of -moabi.
	* doc/c-arm.texi (ARM Options): Likewise.
	* configure: Regenerated.
ld/
	* Makefile.am (ALL_EMULATIONS): Remove earmelf_oabi.o.
	(earmelf_oabi.c): Remove rule.
	* configure.tgt: Remove arm-*-oabi and thumb-*-oabi.
	* emulparams/armelf_oabi.sh, emultempl/armelf_oabi.em: Delete files.
	* Makefile.in: Regenerated.
@
text
@d253 1
d1046 3
@


1.162
log
@emultempl/alphaelf.em (alpha_after_parse): Add extra, NULL, parameter to
  invocation of lang_section_start.
emultempl/aix.em (_handle_option): Likewise.

Makefile.am (eelf64alpha.c, eelf64alpha_fbsd.c,	eelf64alpha_nbsd.c): Add
  dependency upon emultempl/alphaelf.em.
Makefile.in: Regenerate.
@
text
@a126 1
	earmelf_oabi.o \
a488 3
earmelf_oabi.c: $(srcdir)/emulparams/armelf_oabi.sh \
  $(srcdir)/emultempl/armelf_oabi.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armelf_oabi "$(tdir_armelf)"
@


1.161
log
@bfd ChangeLog

	* elf32-xtensa.c (elf32xtensa_size_opt): New global variable.
	(xtensa_default_isa): Global variable moved here from xtensa-isa.c.
	(elf32xtensa_no_literal_movement): New global variable.
	(elf_howto_table): Add entries for new relocations.
	(elf_xtensa_reloc_type_lookup): Handle new relocations.
	(property_table_compare): When addresses are equal, compare sizes and
	various property flags.
	(property_table_matches): New.
	(xtensa_read_table_entries): Extend to read new property tables.  Add
	output_addr parameter to indicate that output addresses should be used.
	Use bfd_get_section_limit.
	(elf_xtensa_find_property_entry): New.
	(elf_xtensa_in_literal_pool): Use elf_xtensa_find_property_entry.
	(elf_xtensa_check_relocs): Handle new relocations.
	(elf_xtensa_do_reloc): Use bfd_get_section_limit.  Handle new
	relocations.  Use new xtensa-isa.h functions.
	(build_encoding_error_message): Remove encode_result parameter.  Add
	new target_address parameter used to detect alignment errors.
	(elf_xtensa_relocate_section): Use bfd_get_section_limit.  Clean up
	error handling.  Use new is_operand_relocation function.
	(elf_xtensa_combine_prop_entries, elf_xtensa_merge_private_bfd_data):
	Use underbar macro for error messages.  Formatting.
	(get_const16_opcode): New.
	(get_l32r_opcode): Add a separate flag for initialization.
	(get_relocation_opnd): Operand number is no longer explicit in the
	relocation.  Change to decode the opcode and analyze its operands.
	(get_relocation_slot): New.
	(get_relocation_opcode): Add bfd parameter.  Use bfd_get_section_limit.
	Use new xtensa-isa.h functions to handle multislot instructions.
	(is_l32r_relocation): Add bfd parameter.  Use is_operand_relocation.
	(get_asm_simplify_size, is_alt_relocation, is_operand_relocation,
	insn_decode_len, insn_decode_opcode, check_branch_target_aligned,
	check_loop_aligned, check_branch_target_aligned_address, narrowable,
	widenable, narrow_instruction, widen_instruction, op_single_fmt_table,
	get_single_format, init_op_single_format_table): New.
	(elf_xtensa_do_asm_simplify): Add error_message parameter and use it
	instead of calling _bfd_error_handler.  Use new xtensa-isa.h functions.
	(contract_asm_expansion): Add error_message parameter and pass it to
	elf_xtensa_do_asm_simplify.  Replace use of R_XTENSA_OP0 relocation
	with R_XTENSA_SLOT0_OP.
	(get_expanded_call_opcode): Extend to handle either L32R or CONST16
	instructions.  Use new xtensa-isa.h functions.
	(r_reloc struct): Add new virtual_offset field.
	(r_reloc_init): Add contents and content_length parameters.  Set
	virtual_offset field to zero.  Add contents to target_offset field for
	partial_inplace relocations.
	(r_reloc_is_defined): Check for null.
	(print_r_reloc): New debug function.
	(source_reloc struct): Replace xtensa_operand field with pair of the
	opcode and the operand position.  Add is_abs_literal field.
	(init_source_reloc): Specify operand by opcode/position pair.  Set
	is_abs_literal field.
	(source_reloc_compare): When target_offsets are equal, compare other
	fields to make sorting predictable.
	(literal_value struct): Add is_abs_literal field.
	(value_map_hash_table struct): Add has_last_loc and last_loc fields.
	(init_literal_value): New.
	(is_same_value): Replace with ...
	(literal_value_equal): ... this function.  Add comparisons of
	virtual_offset and is_abs_literal fields.
	(value_map_hash_table_init): Use bfd_zmalloc.  Check for allocation
	failure.  Initialize has_last_loc field.
	(value_map_hash_table_delete): New.
	(hash_literal_value): Rename to ...
	(literal_value_hash): ... this.  Include is_abs_literal flag and
	virtual_offset field in the hash value.
	(get_cached_value): Rename to ...
	(value_map_get_cached_value): ... this.  Update calls to
	literal_value_hash and literal_value_equal.
	(add_value_map): Check for allocation failure.  Update calls to
	value_map_get_cached_value and literal_value_hash.
	(text_action, text_action_list, text_action_t): New types.
	(find_fill_action, compute_removed_action_diff, adjust_fill_action,
	text_action_add, text_action_add_literal, offset_with_removed_text,
	offset_with_removed_text_before_fill, find_insn_action,
	print_action_list, print_removed_literals): New.
	(offset_with_removed_literals): Delete.
	(xtensa_relax_info struct): Add is_relaxable_asm_section, action_list,
	fix_array, fix_array_count, allocated_relocs, relocs_count, and
	allocated_relocs_count fields.
	(init_xtensa_relax_info): Initialize new fields.
	(reloc_bfd_fix struct): Add new translated field.
	(reloc_bfd_fix_init): Add translated parameter and use it to set the
	translated field.
	(fix_compare, cache_fix_array): New.
	(get_bfd_fix): Remove fix_list parameter and get all relax_info for the
	section via get_xtensa_relax_info.  Use cache_fix_array to set up
	sorted fix_array and use bsearch instead of linear search.
	(section_cache_t): New struct.
	(init_section_cache, section_cache_section, clear_section_cache): New.
	(ebb_t, ebb_target_enum, proposed_action, ebb_constraint): New types.
	(init_ebb_constraint, free_ebb_constraint, init_ebb, extend_ebb_bounds,
	extend_ebb_bounds_forward, extend_ebb_bounds_backward,
	insn_block_decodable_len, ebb_propose_action, ebb_add_proposed_action):
	New.
	(retrieve_contents): Use bfd_get_section_limit.
	(elf_xtensa_relax_section): Add relocations_analyzed flag.  Update call
	to compute_removed_literals.  Free value_map_hash_table when no longer
	needed.
	(analyze_relocations): Check is_relaxable_asm_section flag.  Call
	compute_text_actions for all sections.
	(find_relaxable_sections): Mark sections as relaxable if they contain
	ASM_EXPAND relocations that can be optimized.  Adjust r_reloc_init
	call.  Increment relax_info src_count field only for appropriate
	relocation types.  Remove is_literal_section check.
	(collect_source_relocs): Use bfd_get_section_limit.  Adjust calls to
	r_reloc_init and find_associated_l32r_irel.  Check
	is_relaxable_asm_section flag.  Handle L32R instructions with absolute
	literals.  Pass is_abs_literal flag to init_source_reloc.
	(is_resolvable_asm_expansion): Use bfd_get_section_limit.  Check for
	CONST16 instructions.  Adjust calls to r_reloc_init and
	pcrel_reloc_fits.  Handle weak symbols conservatively.
	(find_associated_l32r_irel): Add bfd parameter and pass it to
	is_l32r_relocation.
	(compute_text_actions, compute_ebb_proposed_actions,
	compute_ebb_actions, check_section_ebb_pcrels_fit,
	check_section_ebb_reduces, text_action_add_proposed,
	compute_fill_extra_space): New.
	(remove_literals): Replace with ...
	(compute_removed_literals): ... this function.  Call
	init_section_cache.  Use bfd_get_section_limit.  Sort internal_relocs.
	Call xtensa_read_table_entries to get the property table.  Skip
	relocations other than R_XTENSA_32 and R_XTENSA_PLT.  Use new
	is_removable_literal, remove_dead_literal, and
	identify_literal_placement functions.
	(get_irel_at_offset): Rewrite to use bsearch on sorted relocations
	instead of linear search.
	(is_removable_literal, remove_dead_literal,
	identify_literal_placement): New.
	(relocations_reach): Update check for literal not referenced by any
	PC-relative relocations.  Adjust call to pcrel_reloc_fits.
	(coalesce_shared_literal, move_shared_literal): New.
	(relax_section): Use bfd_get_section_limit.  Call
	translate_section_fixes.  Update calls to r_reloc_init and
	offset_with_removed_text.  Check new is_relaxable_asm_section flag.
	Add call to pin_internal_relocs.  Add special handling for
	R_XTENSA_ASM_SIMPLIFY and R_XTENSA_DIFF* relocs.  Use virtual_offset
	info to calculate new addend_displacement variable.  Replace code for
	deleting literals with more general code to perform the actions
	determined by the action_list for the section.
	(translate_section_fixes, translate_reloc_bfd_fix): New.
	(translate_reloc): Check new is_relaxable_asm_section flag.  Call
	find_removed_literal only if is_operand_relocation.  Update call to
	offset_with_removed_text.  Use new target_offset and removed_bytes
	variables.
	(move_literal): New.
	(relax_property_section):  Use bfd_get_section_limit.  Set new
	is_full_prop_section flag and handle new property tables.  Update calls
	to r_reloc_init and offset_with_removed_text.  Check
	is_relaxable_asm_section flag.  Handle expansion of zero-sized
	unreachable entries, with use of offset_with_removed_text_before_fill.
	For relocatable links, combine entries only for literal tables.
	(relax_section_symbols): Check is_relaxable_asm_section flag.  Update
	calls to offset_with_removed_text.  Translate st_size field for
	function symbols.
	(do_fix_for_relocatable_link): Change to return bfd_boolean to indicate
	failure.  Add contents parameter.  Update call to get_bfd_fix.  Update
	call to r_reloc_init.  Call _bfd_error_handler and return FALSE for
	R_XTENSA_ASM_EXPAND relocs.
	(do_fix_for_final_link): Add input_bfd and contents parameters.  Update
	call to get_bfd_fix.  Include offset from contents for partial_inplace
	relocations.
	(is_reloc_sym_weak): New.
	(pcrel_reloc_fits): Use new xtensa-isa.h functions.
	(prop_sec_len): New.
	(xtensa_is_property_section): Handle new property sections.
	(is_literal_section): Delete.
	(internal_reloc_compare): When r_offset matches, compare r_info and
	r_addend to make sorting predictable.
	(internal_reloc_matches): New.
	(xtensa_get_property_section_name): Handle new property sections.
	(xtensa_get_property_predef_flags): New.
	(xtensa_callback_required_dependence): Use bfd_get_section_limit.
	Update calls to xtensa_isa_init, is_l32r_relocation, and r_reloc_init.
	* xtensa-isa.c (xtensa_default_isa): Moved to elf32-xtensa.c.
	(xtisa_errno, xtisa_error_msg): New variables.
	(xtensa_isa_errno, xtensa_isa_error_msg): New.
	(xtensa_insnbuf_alloc): Add error handling.
	(xtensa_insnbuf_to_chars): Add num_chars parameter.  Update to
	use xtensa_format_decode.  Add error handling.
	(xtensa_insnbuf_from_chars): Add num_chars parameter.  Decode the
	instruction length to find the number of bytes to copy.
	(xtensa_isa_init): Add error handling.  Replace calls to
	xtensa_load_isa and xtensa_extend_isa with code to initialize lookup
	tables in the xtensa_modules structure.
	(xtensa_check_isa_config, xtensa_add_isa, xtensa_load_isa,
	xtensa_extend_isa): Delete.
	(xtensa_isa_free): Change to only free lookup tables.
	(opname_lookup_compare): Replace with ...
	(xtensa_isa_name_compare): ... this function.  Use strcasecmp.
	(xtensa_insn_maxlength): Rename to ...
	(xtensa_isa_maxlength): ... this.
	(xtensa_insn_length): Delete.
	(xtensa_insn_length_from_first_byte): Replace with ...
	(xtensa_isa_length_from_chars): ... this function.
	(xtensa_num_opcodes): Rename to ...
	(xtensa_isa_num_opcodes): ... this.
	(xtensa_isa_num_pipe_stages, xtensa_isa_num_formats,
	xtensa_isa_num_regfiles, xtensa_isa_num_stages,
	xtensa_isa_num_sysregs, xtensa_isa_num_interfaces,
	xtensa_isa_num_funcUnits, xtensa_format_name, xtensa_format_lookup,
	xtensa_format_decode, xtensa_format_encode, xtensa_format_length,
	xtensa_format_num_slots, xtensa_format_slot_nop_opcode,
	xtensa_format_get_slot, xtensa_format_set_slot): New functions.
	(xtensa_opcode_lookup): Add error handling.
	(xtensa_decode_insn): Replace with ...
	(xtensa_opcode_decode): ... this function, with new format and
	slot parameters.  Add error handling.
	(xtensa_encode_insn): Replace with ...
	(xtensa_opcode_encode): ... this function, which does the encoding via
	one of the entries in the "encode_fns" array.  Add error handling.
	(xtensa_opcode_name): Add error handling.
	(xtensa_opcode_is_branch, xtensa_opcode_is_jump, xtensa_opcode_is_loop,
	xtensa_opcode_is_call): New.
	(xtensa_num_operands): Replace with ...
	(xtensa_opcode_num_operands): ... this function.  Add error handling.
	(xtensa_opcode_num_stateOperands,
	xtensa_opcode_num_interfaceOperands, xtensa_opcode_num_funcUnit_uses,
	xtensa_opcode_funcUnit_use, xtensa_operand_name,
	xtensa_operand_is_visible): New.
	(xtensa_get_operand, xtensa_operand_kind): Delete.
	(xtensa_operand_inout): Add error handling and special-case for
	"sout" operands.
	(xtensa_operand_get_field, xtensa_operand_set_field): Rewritten to
	operate on one slot of an instruction.  Added error handling.
	(xtensa_operand_encode): Handle default operands with no encoding
	functions.  Check for success by comparing against decoded value.
	Add error handling.
	(xtensa_operand_decode): Handle default operands.  Return decoded value
	through argument pointer.  Add error handling.
	(xtensa_operand_is_register, xtensa_operand_regfile,
	xtensa_operand_num_regs, xtensa_operand_is_known_reg): New.
	(xtensa_operand_isPCRelative): Rename to ...
	(xtensa_operand_is_PCrelative): ... this.  Add error handling.
	(xtensa_operand_do_reloc, xtensa_operand_undo_reloc): Return value
	through argument pointer.  Add error handling.
	(xtensa_stateOperand_state, xtensa_stateOperand_inout,
	xtensa_interfaceOperand_interface, xtensa_regfile_lookup,
	xtensa_regfile_lookup_shortname, xtensa_regfile_name,
	xtensa_regfile_shortname, xtensa_regfile_view_parent,
	xtensa_regfile_num_bits, xtensa_regfile_num_entries,
	xtensa_state_lookup, xtensa_state_name, xtensa_state_num_bits,
	xtensa_state_is_exported, xtensa_sysreg_lookup,
	xtensa_sysreg_lookup_name, xtensa_sysreg_name, xtensa_sysreg_number,
	xtensa_sysreg_is_user, xtensa_interface_lookup, xtensa_interface_name,
	xtensa_interface_num_bits, xtensa_interface_inout,
	xtensa_interface_has_side_effect, xtensa_funcUnit_lookup,
	xtensa_funcUnit_name, xtensa_funcUnit_num_copies): New.
	* xtensa-modules.c: Rewrite to use new data structures.
	* reloc.c (BFD_RELOC_XTENSA_DIFF8, BFD_RELOC_XTENSA_DIFF16,
	BFD_RELOC_XTENSA_DIFF32, BFD_RELOC_XTENSA_SLOT0_OP,
	BFD_RELOC_XTENSA_SLOT1_OP, BFD_RELOC_XTENSA_SLOT2_OP,
	BFD_RELOC_XTENSA_SLOT3_OP, BFD_RELOC_XTENSA_SLOT4_OP,
	BFD_RELOC_XTENSA_SLOT5_OP, BFD_RELOC_XTENSA_SLOT6_OP,
	BFD_RELOC_XTENSA_SLOT7_OP, BFD_RELOC_XTENSA_SLOT8_OP,
	BFD_RELOC_XTENSA_SLOT9_OP, BFD_RELOC_XTENSA_SLOT10_OP,
	BFD_RELOC_XTENSA_SLOT11_OP, BFD_RELOC_XTENSA_SLOT12_OP,
	BFD_RELOC_XTENSA_SLOT13_OP, BFD_RELOC_XTENSA_SLOT14_OP,
	BFD_RELOC_XTENSA_SLOT0_ALT, BFD_RELOC_XTENSA_SLOT1_ALT,
	BFD_RELOC_XTENSA_SLOT2_ALT, BFD_RELOC_XTENSA_SLOT3_ALT,
	BFD_RELOC_XTENSA_SLOT4_ALT, BFD_RELOC_XTENSA_SLOT5_ALT,
	BFD_RELOC_XTENSA_SLOT6_ALT, BFD_RELOC_XTENSA_SLOT7_ALT,
	BFD_RELOC_XTENSA_SLOT8_ALT, BFD_RELOC_XTENSA_SLOT9_ALT,
	BFD_RELOC_XTENSA_SLOT10_ALT, BFD_RELOC_XTENSA_SLOT11_ALT,
	BFD_RELOC_XTENSA_SLOT12_ALT, BFD_RELOC_XTENSA_SLOT13_ALT,
	BFD_RELOC_XTENSA_SLOT14_ALT): Add new relocations.
	* Makefile.am (xtensa-isa.lo, xtensa-modules.lo): Update dependencies.
	* Makefile.in: Regenerate.
	* bfd-in2.h: Likewise.
	* libbfd.h: Likewise.

gas ChangeLog

	* config/tc-xtensa.c (absolute_literals_supported): New global flag.
	(UNREACHABLE_MAX_WIDTH): Define.
	(XTENSA_FETCH_WIDTH): Delete.
	(cur_vinsn, xtensa_fetch_width, xt_saved_debug_type, past_xtensa_end,
	prefer_const16, prefer_l32r): New global variables.
	(LIT4_SECTION_NAME): Define.
	(lit4_state struct): Add lit4_seg_name and lit4_seg fields.
	(XTENSA_PROP_*, GET_XTENSA_PROP_*, SET_XTENSA_PROP_*): Define.
	(frag_flags struct): New.
	(xtensa_block_info struct): Move from tc-xtensa.h.  Add flags field.
	(subseg_map struct): Add cur_total_freq and cur_target_freq fields.
	(bitfield, bit_is_set, set_bit, clear_bit): Define.
	(MAX_FORMATS): Define.
	(op_placement_info struct, op_placement_table): New.
	(O_pltrel, O_hi16, O_lo16): Define.
	(directiveE enum): Rename directive_generics to directive_transform.
	Delete directive_relax.  Add directive_schedule,
	directive_absolute_literals, and directive_last_directive.
	(directive_info): Rename "generics" to "transform".  Delete "relax".
	Add "schedule" and "absolute-literals".
	(directive_state): Adjust entries to match changes in directive_info.
	(xtensa_relax_statesE, RELAX_IMMED_MAXSTEPS): Move to tc-xtensa.h.
	(xtensa_const16_opcode, xtensa_movi_opcode, xtensa_movi_n_opcode,
	xtensa_l32r_opcode, xtensa_nop_opcode, xtensa_rsr_lcount_opcode): New.
	(xtensa_j_opcode, xtensa_rsr_opcode): Delete.
	(align_only_targets, software_a0_b_retw_interlock,
	software_avoid_b_j_loop_end, maybe_has_b_j_loop_end,
	software_avoid_short_loop, software_avoid_close_loop_end,
	software_avoid_all_short_loops, specific_opcode): Delete.
	(warn_unaligned_branch_targets): New.
	(workaround_a0_b_retw, workaround_b_j_loop_end, workaround_short_loop,
	workaround_close_loop_end, workaround_all_short_loops): Default FALSE.
	(option_[no_]link_relax, option_[no_]transform,
	option_[no_]absolute_literals, option_warn_unaligned_targets,
	option_prefer_l32r, option_prefer_const16, option_target_hardware):
	New enum values.
	(option_[no_]align_only_targets, option_literal_section_name,
	option_text_section_name, option_data_section_name,
	option_bss_section_name, option_eb, option_el): Delete.
	(md_longopts): Add entries for: [no-]transform, [no-]absolute-literals,
	warn-unaligned-targets, prefer-l32r, prefer-const16, [no-]link-relax,
	and target-hardware.  Delete entries for [no-]target-align-only,
	literal-section-name, text-section-name, data-section-name, and
	bss-section-name.
	(md_parse_option): Handle new options and remove old ones.  Accept but
	ignore [no-]density options.  Warn for [no-]generics and [no-]relax
	and treat them as [no-]transform.
	(md_show_usage): Add new options and remove old ones.
	(xtensa_setup_hw_workarounds): New.
	(md_pseudo_table): Change "word" entry to use xtensa_elf_cons.  Add
	"long", "short", "loc" and "frequency" entries.
	(use_generics): Rename to ...
	(use_transform): ... this function.  Add past_xtensa_end check.
	(use_longcalls): Add past_xtensa_end check.
	(code_density_available, can_relax): Delete.
	(do_align_targets): New.
	(get_directive): Accept dashes in directive names.  Warn about
	[no-]generics and [no-]relax directives and treat them as
	[no-]transform.
	(xtensa_begin_directive): Call md_flush_pending_output only for some
	directives.  Check for directives inside instruction bundles.  Warn
	about deprecated ".begin literal" usage.  Warn and ignore [no-]density
	directives.  Handle new directives.  Check generating_literals flag
	for literal_prefix.
	(xtensa_end_directive): Check for directives inside instruction
	bundles.  Warn and ignore [no-]density directives.  Handle new
	directives.  Call xtensa_set_frag_assembly_state.
	(xtensa_loc_directive_seen, xtensa_dwarf2_directive_loc,
	xtensa_dwarf2_emit_insn): New.
	(xtensa_literal_position): Call md_flush_pending_output.  Do not check
	use_literal_section flag.
	(xtensa_literal_pseudo): Call md_flush_pending_output.  Handle absolute
	literals.  Use xtensa_elf_cons to parse the expression.
	(xtensa_literal_prefix): Do not check use_literal_section.  Support
	".lit4" sections for absolute literals.  Change prefix convention to
	replace ".text" (or ".t" in a linkonce section).  No need to call
	subseg_set.
	(xtensa_frequency_pseudo, xtensa_elf_cons, xtensa_elf_suffix): New.
	(expression_end): Handle closing braces and colons.
	(PLT_SUFFIX, plt_suffix): Delete.
	(expression_maybe_register): Use new xtensa-isa.h functions.  Use
	xtensa_elf_suffix instead of checking for plt suffix, and handle O_lo16
	and O_hi16 expressions as well.
	(tokenize_arguments): Handle closing braces and colons.
	(parse_arguments): Use new xtensa-isa.h functions.  Handle "invisible"
	operands and paired register syntax.
	(get_invisible_operands): New.
	(xg_translate_sysreg_op): Handle new Xtensa LX RSR/WSR/XSR syntax.  Use
	new xtensa-isa.h functions.
	(xtensa_translate_old_userreg_ops, xtensa_translate_zero_immed): New.
	(xg_translate_idioms): Check if inside bundle.  Use use_transform.
	Handle new Xtensa LX RSR/WSR/XSR syntax.  Remove code to widen density
	instructions.  Use xtensa_translate_zero_immed.
	(operand_is_immed, operand_is_pcrel_label): Delete.
	(get_relaxable_immed): Use new xtensa-isa.h functions.
	(get_opcode_from_buf): Add slot parameter.  Use new xtensa-isa.h
	functions.
	(xtensa_print_insn_table, print_vliw_insn): New.
	(is_direct_call_opcode): Use new xtensa-isa.h functions.
	(is_call_opcode, is_loop_opcode, is_conditional_branch_opcode,
	is_branch_or_jump_opcode): Delete.
	(is_movi_opcode, decode_reloc, encode_reloc, encode_alt_reloc): New.
	(opnum_to_reloc, reloc_to_opnum): Delete.
	(xtensa_insnbuf_set_operand, xtensa_insnbuf_get_operand): Use new
	xtensa-isa.h functions.  Operate on one slot of an instruction.
	(xtensa_insnbuf_set_immediate_field, is_negatable_branch,
	xg_get_insn_size): Delete.
	(xg_get_build_instr_size): Use xg_get_single_size.
	(xg_is_narrow_insn, xg_is_single_relaxable_insn): Update calls to
	xg_build_widen_table.  Use xg_get_single_size.
	(xg_get_max_narrow_insn_size): Delete.
	(xg_get_max_insn_widen_size, xg_get_max_insn_widen_literal_size,
	xg_is_relaxable_insn): Update calls to xg_build_widen_table.  Use
	xg_get_single_size.
	(xg_build_to_insn): Record the loc field.  Handle OP_OPERAND_HI16U and
	OP_OPERAND_LOW16U.  Check xg_valid_literal_expression.
	(xg_expand_to_stack, xg_expand_narrow): Update calls to
	xg_build_widen_table.  Use xg_get_single_size.
	(xg_immeds_fit): Use new xtensa-isa.h functions.  Update call to
	xg_check_operand.
	(xg_symbolic_immeds_fit): Likewise.  Also handle O_lo16 and O_hi16, and
	treat weak symbols conservatively.
	(xg_check_operand): Use new xtensa-isa.h functions.
	(is_dnrange): Delete.
	(xg_assembly_relax): Inline previous calls to tinsn_copy.
	(xg_finish_frag): Specify separate relax states for the frag and slot0.
	(is_branch_jmp_to_next, xg_add_branch_and_loop_targets): Use new
	xtensa-isa.h functions.
	(xg_instruction_matches_option_term, xg_instruction_matches_or_options,
	xg_instruction_matches_options): New.
	(xg_instruction_matches_rule): Handle O_register expressions.  Call
	xg_instruction_matches_options.
	(transition_rule_cmp): New.
	(xg_instruction_match): Update call to xg_build_simplify_table.
	(xg_build_token_insn): Record loc fields.
	(xg_simplify_insn): Check is_specific_opcode field and
	density_supported flag.
	(xg_expand_assembly_insn): Skip checking code_density_available.  Use
	new xtensa-isa.h functions.  Call use_transform instead of can_relax.
	(xg_assemble_literal): Add error handling for O_big.  Call
	record_alignment.  Handle O_pltrel.
	(xg_valid_literal_expression): New.
	(xg_assemble_literal_space): Add slot parameter.  Remove call to
	set_expr_symbol_offset.  Add call to record_alignment.  Update call to
	xg_finish_frag.
	(xg_emit_insn): Delete.
	(xg_emit_insn_to_buf): Add format parameter.  Update calls to
	xg_add_opcode_fix and xtensa_insnbuf_to_chars.
	(xg_add_opcode_fix): Change opcode parameter to tinsn and add format
	and slot parameters.  Handle new "alternate" relocations for absolute
	literals and CONST16 instructions.  Check for bad uses of O_lo16 and
	O_hi16.  Use new xtensa-isa.h functions.
	(xg_assemble_tokens): Delete.
	(is_register_writer): Use new xtensa-isa.h functions.
	(is_bad_loopend_opcode): Check for xtensa_rsr_lcount_opcode instead of
	old-style RSR from LCOUNT.
	(next_frag_opcode): Delete.
	(next_frag_opcode_is_loop, next_frag_format_size, frag_format_size,
	update_next_frag_state): New.
	(update_next_frag_nop_state): Delete.
	(next_frag_pre_opcode_bytes): Use next_frag_opcode_is_loop.
	(xtensa_mark_literal_pool_location): Check use_literal_section flag and
	the state of the absolute-literals directive.  Add calls to
	record_alignment and xtensa_set_frag_assembly_state.  Call
	xtensa_switch_to_non_abs_literal_fragment instead of
	xtensa_switch_to_literal_fragment.
	(build_nop): New.
	(assemble_nop): Use build_nop.  Update call to xtensa_insnbuf_to_chars.
	(get_expanded_loop_offset): Change check for undefined opcode to an
	assertion.
	(xtensa_set_frag_assembly_state, relaxable_section,
	xtensa_find_unmarked_state_frags, xtensa_find_unaligned_branch_targets,
	xtensa_find_unaligned_loops, xg_apply_tentative_value): New.
	(md_begin): Update call to xtensa_isa_init.  Initialize linkrelax to 1.
	Set lit4_seg_name.  Call xg_init_vinsn.  Initialize new global opcodes.
	Call init_op_placement_info_table and xtensa_set_frag_assembly_state.
	(xtensa_init_fix_data): New.
	(xtensa_frob_label): Reset label symbol to the current frag.  Check
	do_align_targets and generating_literals flag.  Propagate frequency
	info to new alignment frag.  Call xtensa_set_frag_assembly_state.
	(xtensa_unrecognized_line): New.
	(xtensa_flush_pending_output): Check if inside a bundle.  Add a call
	to xtensa_set_frag_assembly_state.
	(error_reset_cur_vinsn): New.
	(md_assemble): Remove check for literal frag.  Remove call to
	istack_init.  Call use_transform instead of use_generics.  Parse
	explicit instruction format specifiers.  Move code for
	a0_b_retw_interlock workaround to xg_assemble_vliw_tokens.  Call
	error_reset_cur_vinsn on errors.  Add call to get_invisible_operands.
	Add dwarf2_where call.  Remote automatic alignment for ENTRY
	instructions.  Move call to xtensa_clear_insn_labels to the end.
	Rearrange to handle bundles.
	(xtensa_cons_fix_new): Delete.
	(xtensa_handle_align): New.
	(xtensa_frag_init): Call xtensa_set_frag_assembly_state.  Remove
	assignment to is_no_density field.
	(md_pcrel_from): Use new xtensa-isa.h functions.  Use decode_reloc
	instead of reloc_to_opnum.  Handle "alternate" relocations.
	(xtensa_force_relocation, xtensa_check_inside_bundle,
	xtensa_elf_section_change_hook): New.
	(xtensa_symbol_new_hook): Delete.
	(xtensa_fix_adjustable): Check for difference of symbols with an
	offset.  Check for external and weak symbols.
	(md_apply_fix3): Remove cases for XTENSA_OP{0,1,2} relocs.
	(md_estimate_size_before_relax): Return expansion for the first slot.
	(tc_gen_reloc): Handle difference of symbols by producing
	XTENSA_DIFF{8,16,32} relocs and by writing the value of the difference
	into the output.  Handle new XTENSA_SLOT*_OP relocs by storing the
	tentative values into the output when linkrelax is set.
	(XTENSA_PROP_SEC_NAME): Define.
	(xtensa_post_relax_hook): Call xtensa_find_unmarked_state_frags.
	Create literal tables only if using literal sections.  Create new
	property tables instead of old instruction tables.  Check for unaligned
	branch targets and loops.
	(finish_vinsn, find_vinsn_conflicts, check_t1_t2_reads_and_writes,
	new_resource_table, clear_resource_table, resize_resource_table,
	resources_available, reserve_resources, release_resources,
	opcode_funcUnit_use_unit, opcode_funcUnit_use_stage,
	resources_conflict, xg_find_narrowest_format, relaxation_requirements,
	bundle_single_op, emit_single_op, xg_assemble_vliw_tokens): New.
	(xtensa_end): Call xtensa_flush_pending_output.  Set past_xtensa_end
	flag.  Update checks for workaround options.  Call
	xtensa_mark_narrow_branches and xtensa_mark_zcl_first_insns.
	(xtensa_cleanup_align_frags): Add special case for branch targets.
	Check for and mark unreachable frags.
	(xtensa_fix_target_frags): Remove use of align_only_targets flag.
	Use RELAX_LOOP_END_BYTES in special case for negatable branch at the
	end of a zero-overhead loop body.
	(frag_can_negate_branch): Handle instructions with multiple slots.
	Use new xtensa-isa.h functions
	(xtensa_mark_narrow_branches, is_narrow_branch_guaranteed_in_range,
	xtensa_mark_zcl_first_insns): New.
	(xtensa_fix_a0_b_retw_frags, xtensa_fix_b_j_loop_end_frags): Error if
	transformations are disabled.
	(next_instrs_are_b_retw): Use new xtensa-isa.h functions.  Handle
	multislot instructions.
	(xtensa_fix_close_loop_end_frags, xtensa_fix_short_loop_frags):
	Likewise.  Also error if transformations are disabled.
	(unrelaxed_frag_max_size): New.
	(unrelaxed_frag_min_insn_count, unrelax_frag_has_b_j): Use new
	xtensa-isa.h functions.
	(xtensa_sanity_check, is_empty_loop, is_local_forward_loop): Use
	xtensa_opcode_is_loop instead of is_loop_opcode.
	(get_text_align_power): Replace as_fatal with assertion.
	(get_text_align_fill_size): Iterate instead of using modulus when
	use_nops is false.
	(get_noop_aligned_address): Assert that this is for a machine-dependent
	RELAX_ALIGN_NEXT_OPCODE frag.  Use next_frag_opcode_is_loop,
	xg_get_single_size, and frag_format_size.
	(get_widen_aligned_address): Rename to ...
	(get_aligned_diff): ... this function.  Add max_diff parameter.
	Remove handling of rs_align/rs_align_code frags.  Use
	next_frag_format_size, get_text_align_power, get_text_align_fill_size,
	next_frag_opcode_is_loop, and xg_get_single_size.  Compute max_diff
	and pass it back to caller.
	(xtensa_relax_frag): Use relax_frag_loop_align.  Add code for new
	RELAX_SLOTS, RELAX_MAYBE_UNREACHABLE, RELAX_MAYBE_DESIRE_ALIGN,
	RELAX_FILL_NOP, and RELAX_UNREACHABLE frag types.  Check relax_seen.
	(relax_frag_text_align): Rename to ...
	(relax_frag_loop_align): ... this function.  Assume loops can only be
	in the first slot of an instruction.
	(relax_frag_add_nop): Use assemble_nop instead of constructing an OR
	instruction.  Remove call to frag_wane.
	(relax_frag_narrow): Rename to ...
	(relax_frag_for_align): ... this function.  Extend to handle
	RELAX_FILL_NOP and RELAX_UNREACHABLE, as well as RELAX_SLOTS with
	RELAX_NARROW for the first slot.
	(find_address_of_next_align_frag, bytes_to_stretch): New.
	(future_alignment_required): Use find_address_of_next_align_frag and
	bytes_to_stretch.  Look ahead to subsequent frags to make smarter
	alignment decisions.
	(relax_frag_immed): Add format, slot, and estimate_only parameters.
	Check if transformations are enabled for b_j_loop_end workaround.
	Use new xtensa-isa.h functions and handle multislot instructions.
	Update call to xg_assembly_relax.
	(md_convert_frag): Handle new RELAX_SLOTS, RELAX_UNREACHABLE,
	RELAX_MAYBE_UNREACHABLE, RELAX_MAYBE_DESIRE_ALIGN, and RELAX_FILL_NOP
	frag types.
	(convert_frag_narrow): Add segP, format and slot parameters.  Call
	convert_frag_immed for branch instructions.  Adjust calls to
	tinsn_from_chars, tinsn_immed_from_frag, and xg_emit_insn_to_buf.  Use
	xg_get_single_size and xg_get_single_format.
	(convert_frag_fill_nop): New.
	(convert_frag_immed): Add format and slot parameters.  Handle multislot
	instructions and use new xtensa-isa.h functions.  Update calls to
	tinsn_immed_from_frag and xg_assembly_relax.  Check if transformations
	enabled for b_j_loop_end workaround.  Use build_nop instead of
	assemble_nop.  Check is_specific_opcode flag.  Check for unreachable
	frags.  Use xg_get_single_size.  Handle O_pltrel.
	(fix_new_exp_in_seg): Remove check for old plt flag.
	(convert_frag_immed_finish_loop): Update calls to tinsn_from_chars and
	xtensa_insnbuf_to_chars.  Call tinsn_immed_from_frag.  Change check
	for loop opcode to an assertion.  Mark all frags up to the end of the
	loop as not transformable.
	(get_last_insn_flags, set_last_insn_flags): Use get_subseg_info.
	(get_subseg_info): New.
	(xtensa_move_literals): Call xtensa_set_frag_assembly_state.  Add null
	check for dest_seg.
	(xtensa_switch_to_literal_fragment): Rewrite to handle absolute
	literals and use xtensa_switch_to_non_abs_literal_fragment otherwise.
	(xtensa_switch_to_non_abs_literal_fragment): New.
	(cache_literal_section): Add is_code parameter and pass it through to
	retrieve_literal_seg.
	(retrieve_literal_seg): Add is_code parameter and use it to set the
	flags on the literal section.  Handle case where head parameter is 0.
	(get_frag_is_no_transform, set_frag_is_specific_opcode,
	set_frag_is_no_transform): New.
	(xtensa_create_property_segments): Add end_property_function parameter
	and pass it through to add_xt_block_frags.  Call bfd_get_section_flags
	and skip SEC_DEBUGGING and !SEC_ALLOC sections.
	(xtensa_create_xproperty_segments, section_has_xproperty): New.
	(add_xt_block_frags): Add end_property_function parameter and call it
	if it is non-zero.  Call xtensa_frag_flags_init.
	(xtensa_frag_flags_is_empty, xtensa_frag_flags_init,
	get_frag_property_flags, frag_flags_to_number,
	xtensa_frag_flags_combinable, xt_block_aligned_size,
	xtensa_xt_block_combine, add_xt_prop_frags,
	init_op_placement_info_table, opcode_fits_format_slot,
	xg_get_single_size, xg_get_single_format): New.
	(istack_push): Inline call to tinsn_copy.
	(tinsn_copy): Delete.
	(tinsn_has_invalid_symbolic_operands): Handle O_hi16 and O_lo16 and
	CONST16 opcodes.  Handle O_big, O_illegal, and O_absent.
	(tinsn_has_complex_operands): Handle O_hi16 and O_lo16.
	(tinsn_to_insnbuf): Use xg_get_single_format and new xtensa-isa.h
	functions.  Handle invisible operands.
	(tinsn_to_slotbuf): New.
	(tinsn_check_arguments): Use new xtensa-isa.h functions.
	(tinsn_from_chars): Add slot parameter.  Rewrite using xg_init_vinsn,
	vinsn_from_chars, and xg_free_vinsn.
	(tinsn_from_insnbuf): New.
	(tinsn_immed_from_frag): Add slot parameter and handle multislot
	instructions.  Handle symbol differences.
	(get_num_stack_text_bytes): Use xg_get_single_size.
	(xg_init_vinsn, xg_clear_vinsn, vinsn_has_specific_opcodes,
	xg_free_vinsn, vinsn_to_insnbuf, vinsn_from_chars, expr_is_register,
	get_expr_register, set_expr_symbol_offset_diff): New.
	* config/tc-xtensa.h (MAX_SLOTS): Define.
	(xtensa_relax_statesE): Move from tc-xtensa.c. Add
	RELAX_CHECK_ALIGN_NEXT_OPCODE, RELAX_MAYBE_DESIRE_ALIGN, RELAX_SLOTS,
	RELAX_FILL_NOP, RELAX_UNREACHABLE, RELAX_MAYBE_UNREACHABLE, and
	RELAX_NONE types.
	(RELAX_IMMED_MAXSTEPS): Move from tc-xtensa.c.
	(xtensa_frag_type struct): Add is_assembly_state_set,
	use_absolute_literals, relax_seen, is_unreachable, is_specific_opcode,
	is_align, is_text_align, alignment, and is_first_loop_insn fields.
	Replace is_generics and is_relax fields by is_no_transform field.
	Delete is_text and is_longcalls fields.  Change text_expansion and
	literal_expansion to arrays of MAX_SLOTS entries.  Add arrays of
	per-slot information: literal_frags, slot_subtypes, slot_symbols,
	slot_sub_symbols, and slot_offsets.  Add fr_prev field.
	(xtensa_fix_data struct): New.
	(xtensa_symfield_type struct): Delete plt field.
	(xtensa_block_info struct): Move definition to tc-xtensa.h.  Add
	forward declaration here.
	(xt_section_type enum): Delete xt_insn_sec.  Add xt_prop_sec.
	(XTENSA_SECTION_RENAME): Undefine.
	(TC_FIX_TYPE, TC_INIT_FIX_DATA, TC_FORCE_RELOCATION, NO_PSEUDO_DOT,
	tc_unrecognized_line, md_do_align, md_elf_section_change_hook,
	HANDLE_ALIGN, TC_LINKRELAX_FIXUP, SUB_SEGMENT_ALIGN): Define.
	(TC_CONS_FIX_NEW, tc_symbol_new_hook): Delete.
	(unit_num_copies_func, opcode_num_units_func,
	opcode_funcUnit_use_unit_func, opcode_funcUnit_use_stage_func): New.
	(resource_table struct): New.
	* config/xtensa-istack.h (MAX_INSN_ARGS): Increase from 6 to 10.
	(TInsn struct): Add keep_wide, loc, fixup, record_fix, subtype,
	literal_space, symbol, sub_symbol, offset, and literal_frag fields.
	(tinsn_copy): Delete prototype.
	(vliw_insn struct): New.
	* config/xtensa-relax.c (insn_pattern_struct): Add options field.
	(widen_spec_list): Add option conditions for density and boolean
	instructions.  Add expansions using CONST16 and conditions for using
	CONST16 vs. L32R.  Use new Xtensa LX RSR/WSR syntax.  Add entries for
	predicted branches.
	(simplify_spec_list): Add option conditions for density instructions.
	Add entry for NOP instruction.
	(append_transition): Add cmp function pointer parameter and use it to
	insert the new entry in order.
	(operand_function_LOW16U, operand_function_HI16U): New.
	(xg_has_userdef_op_fn, xg_apply_userdef_op_fn): Handle
	OP_OPERAND_LOW16U and OP_OPERAND_HI16U.
	(enter_opname, split_string): Use xstrdup instead of strdup.
	(init_insn_pattern): Initialize new options field.
	(clear_req_or_option_list, clear_req_option_list,
	clone_req_or_option_list, clone_req_option_list, parse_option_cond):
	New.
	(parse_insn_pattern): Parse option conditions.
	(transition_applies): New.
	(build_transition): Use new xtensa-isa.h functions.  Fix incorrectly
	swapped last arguments in calls to append_constant_value_condition.
	Call clone_req_option_list.  Add warning about invalid opcode.
	Handle LOW16U and HI16U function names.
	(build_transition_table): Add cmp parameter and use it in calls to
	append_transition.  Use new xtensa-isa.h functions.  Check
	transition_applies before adding entries.
	(xg_build_widen_table, xg_build_simplify_table): Add cmp parameter and
	pass it through to build_transition_table.
	* config/xtensa-relax.h (ReqOrOptionList, ReqOrOption, ReqOptionList,
	ReqOption, transition_cmp_fn): New types.
	(OpType enum): Add OP_OPERAND_LOW16U and OP_OPERAND_HI16U.
	(transition_rule struct): Add options field.
	* doc/as.texinfo (Overview): Update Xtensa options.
	* doc/c-xtensa.texi (Xtensa Options): Delete --[no-]density,
	--[no-]relax, and --[no-]generics options.  Update descriptions of
	--text-section-literals and --[no-]longcalls.  Add
	--[no-]absolute-literals and --[no-]transform.
	(Xtensa Syntax): Add description of syntax for FLIX instructions.
	Remove use of "generic" and "specific" terminology for opcodes.
	(Xtensa Registers): Generalize the syntax description to include
	user-defined register files.
	(Xtensa Automatic Alignment): Update.
	(Xtensa Branch Relaxation): Mention limitation of unconditional jumps.
	(Xtensa Call Relaxation): Linker can now remove most of the overhead.
	(Xtensa Directives): Remove confusing rules about precedence.
	(Density Directive, Relax Directive): Delete.
	(Schedule Directive): New.
	(Generics Directive): Rename to ...
	(Transform Directive): ... this node.
	(Literal Directive): Update for absolute literals.  Missing
	literal_position directive is now an error.
	(Literal Position Directive): Update for absolute literals.
	(Freeregs Directive): Delete.
	(Absolute Literals Directive): New.
	(Frame Directive): Minor editing.
	* Makefile.am (DEPTC_xtensa_elf, DEPOBJ_xtensa_elf, DEP_xtensa_elf):
	Update dependencies.
	* Makefile.in: Regenerate.

gas/testsuite ChangeLog

	* gas/xtensa/all.exp: Adjust expected error message for j_too_far.
	Change entry_align test to expect an error.
	* gas/xtensa/entry_misalign2.s: Use no-transform instead of
	no-generics directives.

include ChangeLog

	* xtensa-config.h (XSHAL_USE_ABSOLUTE_LITERALS,
	XCHAL_HAVE_PREDICTED_BRANCHES, XCHAL_INST_FETCH_WIDTH): New.
	(XCHAL_EXTRA_SA_SIZE, XCHAL_EXTRA_SA_ALIGN): Delete.
	* xtensa-isa-internal.h (ISA_INTERFACE_VERSION): Delete.
	(config_sturct struct): Delete.
	(XTENSA_OPERAND_IS_REGISTER, XTENSA_OPERAND_IS_PCRELATIVE,
	XTENSA_OPERAND_IS_INVISIBLE, XTENSA_OPERAND_IS_UNKNOWN,
	XTENSA_OPCODE_IS_BRANCH, XTENSA_OPCODE_IS_JUMP,
	XTENSA_OPCODE_IS_LOOP, XTENSA_OPCODE_IS_CALL,
	XTENSA_STATE_IS_EXPORTED, XTENSA_INTERFACE_HAS_SIDE_EFFECT): Define.
	(xtensa_format_encode_fn, xtensa_get_slot_fn, xtensa_set_slot_fn): New.
	(xtensa_insn_decode_fn): Rename to ...
	(xtensa_opcode_decode_fn): ... this.
	(xtensa_immed_decode_fn, xtensa_immed_encode_fn, xtensa_do_reloc_fn,
	xtensa_undo_reloc_fn): Update.
	(xtensa_encoding_template_fn): Delete.
	(xtensa_opcode_encode_fn, xtensa_format_decode_fn,
	xtensa_length_decode_fn): New.
	(xtensa_format_internal, xtensa_slot_internal): New types.
	(xtensa_operand_internal): Delete operand_kind, inout, isPCRelative,
	get_field, and set_field fields.  Add name, field_id, regfile,
	num_regs, and flags fields.
	(xtensa_arg_internal): New type.
	(xtensa_iclass_internal): Change operands field to array of
	xtensa_arg_internal.  Add num_stateOperands, stateOperands,
	num_interfaceOperands, and interfaceOperands fields.
	(xtensa_opcode_internal): Delete length, template, and iclass fields.
	Add iclass_id, flags, encode_fns, num_funcUnit_uses, and funcUnit_uses.
	(opname_lookup_entry): Delete.
	(xtensa_regfile_internal, xtensa_interface_internal,
	xtensa_funcUnit_internal, xtensa_state_internal,
	xtensa_sysreg_internal, xtensa_lookup_entry): New.
	(xtensa_isa_internal): Replace opcode_table field with opcodes field.
	Change type of opname_lookup_table.  Delete num_modules,
	module_opcode_base, module_decode_fn, config, and has_density fields.
	Add num_formats, formats, format_decode_fn, length_decode_fn,
	num_slots, slots, num_fields, num_operands, operands, num_iclasses,
	iclasses, num_regfiles, regfiles, num_states, states,
	state_lookup_table, num_sysregs, sysregs, sysreg_lookup_table,
	max_sysreg_num, sysreg_table, num_interfaces, interfaces,
	interface_lookup_table, num_funcUnits, funcUnits and
	funcUnit_lookup_table fields.
	(xtensa_isa_module, xtensa_isa_modules): Delete.
	(xtensa_isa_name_compare): New prototype.
	(xtisa_errno, xtisa_error_msg): New.
	* xtensa-isa.h (XTENSA_ISA_VERSION): Define.
	(xtensa_isa): Change type.
	(xtensa_operand): Delete.
	(xtensa_format, xtensa_regfile, xtensa_state, xtensa_sysreg,
	xtensa_interface, xtensa_funcUnit, xtensa_isa_status,
	xtensa_funcUnit_use): New types.
	(libisa_module_specifier): Delete.
	(xtensa_isa_errno, xtensa_isa_error_msg): New prototypes.
	(xtensa_insnbuf_free, xtensa_insnbuf_to_chars,
	xtensa_insnbuf_from_chars): Update prototypes.
	(xtensa_load_isa, xtensa_extend_isa, xtensa_default_isa,
	xtensa_insn_maxlength, xtensa_num_opcodes, xtensa_decode_insn,
	xtensa_encode_insn, xtensa_insn_length,
	xtensa_insn_length_from_first_byte, xtensa_num_operands,
	xtensa_operand_kind, xtensa_encode_result,
	xtensa_operand_isPCRelative): Delete.
	(xtensa_isa_init, xtensa_operand_inout, xtensa_operand_get_field,
	xtensa_operand_set_field, xtensa_operand_encode,
	xtensa_operand_decode, xtensa_operand_do_reloc,
	xtensa_operand_undo_reloc): Update prototypes.
	(xtensa_isa_maxlength, xtensa_isa_length_from_chars,
	xtensa_isa_num_pipe_stages, xtensa_isa_num_formats,
	xtensa_isa_num_opcodes, xtensa_isa_num_regfiles, xtensa_isa_num_states,
	xtensa_isa_num_sysregs, xtensa_isa_num_interfaces,
	xtensa_isa_num_funcUnits, xtensa_format_name, xtensa_format_lookup,
	xtensa_format_decode, xtensa_format_encode, xtensa_format_length,
	xtensa_format_num_slots, xtensa_format_slot_nop_opcode,
	xtensa_format_get_slot, xtensa_format_set_slot, xtensa_opcode_decode,
	xtensa_opcode_encode, xtensa_opcode_is_branch, xtensa_opcode_is_jump,
	xtensa_opcode_is_loop, xtensa_opcode_is_call,
	xtensa_opcode_num_operands, xtensa_opcode_num_stateOperands,
	xtensa_opcode_num_interfaceOperands, xtensa_opcode_num_funcUnit_uses,
	xtensa_opcode_funcUnit_use, xtensa_operand_name,
	xtensa_operand_is_visible, xtensa_operand_is_register,
	xtensa_operand_regfile, xtensa_operand_num_regs,
	xtensa_operand_is_known_reg, xtensa_operand_is_PCrelative,
	xtensa_stateOperand_state, xtensa_stateOperand_inout,
	xtensa_interfaceOperand_interface, xtensa_regfile_lookup,
	xtensa_regfile_lookup_shortname, xtensa_regfile_name,
	xtensa_regfile_shortname, xtensa_regfile_view_parent,
	xtensa_regfile_num_bits, xtensa_regfile_num_entries,
	xtensa_state_lookup, xtensa_state_name, xtensa_state_num_bits,
	xtensa_state_is_exported, xtensa_sysreg_lookup,
	xtensa_sysreg_lookup_name, xtensa_sysreg_name, xtensa_sysreg_number,
	xtensa_sysreg_is_user, xtensa_interface_lookup, xtensa_interface_name,
	xtensa_interface_num_bits, xtensa_interface_inout,
	xtensa_interface_has_side_effect, xtensa_funcUnit_lookup,
	xtensa_funcUnit_name, xtensa_funcUnit_num_copies): New prototypes.
	* elf/xtensa.h (R_XTENSA_DIFF8, R_XTENSA_DIFF16, R_XTENSA_DIFF32,
	R_XTENSA_SLOT*_OP, R_XTENSA_SLOT*_ALT): New relocations.
	(XTENSA_PROP_SEC_NAME): Define.
	(property_table_entry): Add flags field.
	(XTENSA_PROP_*, GET_XTENSA_PROP_*, SET_XTENSA_PROP_*): Define.

ld ChangeLog

	* ld.texinfo (Xtensa): Describe new linker relaxation to optimize
	assembler-generated longcall sequences.  Describe new --size-opt
	option.
	* emulparams/elf32xtensa.sh (OTHER_SECTIONS): Add .xt.prop section.
	* emultempl/xtensaelf.em (remove_section,
	replace_insn_sec_with_prop_sec, replace_instruction_table_sections,
	elf_xtensa_after_open): New.
	(OPTION_OPT_SIZEOPT, OPTION_LITERAL_MOVEMENT,
	OPTION_NO_LITERAL_MOVEMENT): Define.
	(elf32xtensa_size_opt, elf32xtensa_no_literal_movement): New globals.
	(PARSE_AND_LIST_LONGOPTS): Add size-opt and [no-]literal-movement.
	(PARSE_AND_LIST_OPTIONS): Add --size-opt.
	(PARSE_AND_LIST_ARGS_CASES): Handle OPTION_OPT_SIZEOPT,
	OPTION_LITERAL_MOVEMENT, and OPTION_NO_LITERAL_MOVEMENT.
	(LDEMUL_AFTER_OPEN): Set to elf_xtensa_after_open.
	* scripttempl/elfxtensa.sc: Update with changes from elf.sc.
	* Makefile.am (eelf32xtensa.c): Update dependencies.
	* Makefile.in: Regenerate.

ld/testsuite ChangeLog

	* ld-xtensa/lcall1.s: Use .literal directive.
	* ld-xtensa/lcall2.s: Align function entry.
	* ld-xtensa/coalesce2.s: Likewise.

opcodes ChangeLog

	* xtensa-dis.c (state_names): Delete.
	(fetch_data): Use xtensa_isa_maxlength.
	(print_xtensa_operand): Replace operand parameter with opcode/operand
	pair.  Remove print_sr_name parameter.  Use new xtensa-isa.h functions.
	(print_insn_xtensa): Use new xtensa-isa.h functions.  Handle multislot
	instruction bundles.  Use xmalloc instead of malloc.
@
text
@d767 2
a768 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d772 2
a773 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d777 2
a778 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
@


1.160
log
@xstormy16.sc: Only perform the assignments to the ROM region when not performing
 a relocatable link.  The ROM region does not start at address 0, but the
 sections will.
Makefile.am: Fix linker script dependency for the generation of	eelf32xstormy16.c.
@
text
@d612 3
a614 2
  $(srcdir)/emulparams/xtensa-config.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/xtensaelf.em \
@


1.159
log
@	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* config.in: Regenerate.
	* configure: Regenerate.
	* aclocal.m4: Regenerate.
	* po/ld.pot: Regenerate.
@
text
@d603 1
a603 1
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
@


1.158
log
@	* config.bfd (arm*-*-symbianelf*): Use OS-specific target vectors.
	* configure.in (bfd_elf32_bigarm_symbian_vec): Add it.
	(bfd_elf32_littlearm_symbian_vec): Likewise.
	* configure: Regenerated.
	* elf-bfd.h (elf_backend_data): Add dynamic_sec_flags.
	* elf32-arm.h (PLT_HEADER_SIZE): Do not define.
	(PLT_ENTRY_SIZE): Likewise.
	(bfd_vma_elf32_arm_symbian_plt_entry): New
	variable.
	(elf32_arm_link_hash_table): Add plt_header_size, plt_entry_size,
	and symbian_p.
	(create_got_section): Don't create sections when generating BPABI
	objects.
	(elf32_arm_create_dynamic_sections): Tidy.
	(elf32_arm_link_hash_table_create): Set plt_header_size,
	plt_entry_size, and symbian_p.
	(elf32_arm_check_relocs): Do not mark .rel.dyn as loadable when
	generating BPABI objects.
	(allocate_dynrelocs): Use htab->plt_header_size, not
	PLT_HEADER_SIZE.  Do not add to .got.plt when
	generating BPABI objects.
	(elf32_arm_finish_dynamic_symbol): Generate Symbian OS PLTs.
	* elfarm-nabi.c: Add SymbianOS target vectors.
	* elflink.c (_bfd_elf_create_got_section): Use dynamic_sec_flags.
	(_bfd_elf_link_create_dynamic_sections): Likewise.
	* elfxx-target.h (ELF_DYNAMIC_SEC_FLAGS): New macro.
	(elfNN_bed): Use it.
	* targets.c (bfd_elf32_bigarm_symbian_vec): New variable.
	(bfd_elf32_littlearm_symbian_vec): Likewise.
	(_bfd_target_vector): Add them.

	* Makefile.am (TARG_ENV_HFILES): Add te-symbian.h.
	* Makefile.in: Regenerated.
	* configure.in: Set em for arm*-*-symbianelf*.
	* configure: Regenerated.
	* config/tc-arm.c (elf32_arm_target_format): Use Symbian target
	vectors when appropriate.
	* config/te-symbian.h: New file.

	* Makefile.am (ALL_EMULATIONS): Add earmsymbian.o.
	(earmsymbian.c): New target.
	* configure.tgt: Use armsymbian emulation for arm*-*-symbianelf*.
	* Makefile.in: Regenerated.
	* aclocal.m4: Likewise.
	* configure: Likewise.
	* emulparams/armsymbian.sh: New file.
@
text
@d1758 2
a1759 1
  ldgram.h ldlex.h ldmain.h ldfile.h
@


1.157
log
@Add new subtargets: msp430x1610, msp430x1611, msp430x1612, msp430x415,
 msp430x417, msp430xG437, msp430xG438, msp430xG439.
@
text
@d131 1
d540 5
@


1.156
log
@Add new port: crx-elf
@
text
@d285 3
d299 2
d307 3
d1166 12
d1222 8
d1254 12
@


1.155
log
@Add support for sh-symbian-elf target
@
text
@d156 1
d651 4
@


1.154
log
@Add PowerPC LynxOS support
@
text
@d337 1
d1344 4
@


1.153
log
@[ bfd/ChangeLog ]
2004-04-21  Chris Demetriou  <cgd@@broadcom.com>

	* coff-mips.c (bfd_mips_ecoff_create_embedded_relocs): Remove.
	* elf32-mips.c (bfd_mips_elf32_create_embedded_relocs): Remove.
	* bfd-in.h (bfd_mips_ecoff_create_embedded_relocs)
	(bfd_mips_elf32_create_embedded_relocs): Remove prototypes
	* bfd-in2.h: Regenerate.

[ ld/ChangeLog ]
2004-04-21  Chris Demetriou  <cgd@@broadcom.com>

	* ld.texinfo: Remove MIPS --embedded-relocs documentation.
	* emulparams/elf32bmip.sh (EXTRA_EM_FILE): Remove definition.
	* emulparams/mipsidt.sh (TEMPLATE_NAME): Use generic.em.
	(EXTRA_EM_FILE): Use mipsecoff.em
	* emulparams/mipsidtl.sh (TEMPLATE_NAME): Use generic.em.
	(EXTRA_EM_FILE): Use mipsecoff.em
	* emultempl/mipsecoff.em: Restructure to be included as an
	extra emulation file.
	(check_sections, gld${EMULATION_NAME}_after_open)
	(gld${EMULATION_NAME}_after_allocation)
	(gld${EMULATION_NAME}_get_script)
	(ld_${EMULATION_NAME}_emulation): Remove
	(gld${EMULATION_NAME}_before_parse): Rename to...
	(mipsecoff_before_parse): This.
	(LDEMUL_BEFORE_PARSE): Define.
	* emultempl/mipself.em: Remove file.
	* scripttempl/mips.sc (.rel.sdata): Do not include in output.
	(__runtime_reloc_start, __runtime_reloc_stop): Stop providing
	these symbols.
	* Makefile.am: Remove dependencies on emultempl/mipself.em.
	* Makefile.in: Regenerate.

[ ld/testsuite/ChangeLog ]
2004-04-21  Chris Demetriou  <cgd@@broadcom.com>

	* ld-empic/run.c: Removed as part of MIPS --embedded-relocs removal.
	* ld-empic/empic.exp: Likewise.
	* ld-empic/relax.t: Likewise.
	* ld-empic/relax1.c: Likewise.
	* ld-empic/relax2.c: Likewise.
	* ld-empic/relax3.c: Likewise.
	* ld-empic/relax4.c: Likewise.
	* ld-empic/runtest1.c: Likewise.
	* ld-empic/runtest2.c: Likewise.
	* ld-empic/runtesti.s: Likewise.
	* ld-mips-elf/empic1-ln.d: Likewise.
	* ld-mips-elf/empic1-lp.d: Likewise.
	* ld-mips-elf/empic1-mn.d: Likewise.
	* ld-mips-elf/empic1-mp.d: Likewise.
	* ld-mips-elf/empic1-ref.s: Likewise.
	* ld-mips-elf/empic1-sn.d: Likewise.
	* ld-mips-elf/empic1-sp.d: Likewise.
	* ld-mips-elf/empic1-space.s: Likewise.
	* ld-mips-elf/empic1-tgt.s: Likewise.
	* ld-mips-elf/empic2-fwd-0.d: Likewise.
	* ld-mips-elf/empic2-fwd-1.d: Likewise.
	* ld-mips-elf/empic2-fwd-tgt.s: Likewise.
	* ld-mips-elf/empic2-ref.s: Likewise.
	* ld-mips-elf/empic2-rev-0.d: Likewise.
	* ld-mips-elf/empic2-rev-1.d: Likewise.
	* ld-mips-elf/empic2-rev-tgt.s: Likewise.
	* ld-mips-elf/empic2-space.s: Likewise.
	* ld-mips-elf/emrelocs-eb.d: Likewise.
	* ld-mips-elf/emrelocs-el.d: Likewise.
	* ld-mips-elf/emrelocs.ld: Likewise.
	* ld-mips-elf/emrelocs1.s: Likewise.
	* ld-mips-elf/emrelocs2.s: Likewise.
	* ld-mips-elf/mips-elf.exp: Don't run now-removed tests.
@
text
@d318 1
d944 1
a944 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/i386lynx.sc ${GEN_DEPENDS}
d1278 3
@


1.152
log
@	* emulparams/elf32bsmip.sh (EXTRA_EM_FILE): Define to irix.
	* emulparams/elf64bmip.sh (EXTRA_EM_FILE): Likewise.
	* emulparams/elf32bmipn32.sh (EXTRA_EM_FILE): Likewise.
	* emultempl/irix.em: New file.
	* Makefile.am (eelf32bsmip.c, eelf32bmipn32.c, eelf64bmip.c): Update
	dependencies.
	* Makefile.in: Regenerate.
@
text
@d630 1
a630 1
  $(srcdir)/emulparams/elf32bmip.sh $(srcdir)/emultempl/mipself.em \
a637 1
  $(srcdir)/emultempl/mipself.em \
d645 1
a645 1
  $(srcdir)/emulparams/elf32bmip.sh $(srcdir)/emultempl/mipself.em \
d649 1
a649 1
  $(srcdir)/emulparams/elf32bmip.sh $(srcdir)/emultempl/mipself.em \
a653 1
  $(srcdir)/emultempl/mipself.em \
a657 1
  $(srcdir)/emultempl/mipself.em \
d661 1
a661 1
  $(srcdir)/emulparams/elf32bmip.sh $(srcdir)/emultempl/mipself.em \
a665 1
  $(srcdir)/emultempl/mipself.em \
a673 1
  $(srcdir)/emultempl/mipself.em \
d677 1
a677 1
  $(srcdir)/emulparams/elf32bmip.sh $(srcdir)/emultempl/mipself.em \
a704 1
  $(srcdir)/emultempl/mipself.em \
@


1.151
log
@        Remove long-obsolete MPW support.
        * mpw-config.in, mpw-make.sed, mac-ld.r: Remove files.
        * Makefile.am (mpw): Remove file-presynthesizing actions.
        * Makefile.in: Likewise.
        * ldfile.c (slash): Remove MPW case.
        * ldlex.l [MPW]: Remove unused definition.
@
text
@d642 1
a642 1
  $(srcdir)/emulparams/elf32bmip.sh $(srcdir)/emultempl/mipself.em \
d673 1
d790 1
a790 1
  $(srcdir)/emulparams/elf32bmipn32.sh \
@


1.150
log
@Add (linker) support for CR16C processor
@
text
@a1663 23
@@MAINT@@.PHONY: mpw
@@MAINT@@mpw: $(srcdir)/mpw-ei386go32.c $(srcdir)/mpw-elfmips.c \
@@MAINT@@	$(srcdir)/mpw-em68kcoff.c $(srcdir)/mpw-eppcmac.c \
@@MAINT@@	$(srcdir)/mpw-esh.c $(srcdir)/mpw-idtmips.c
@@MAINT@@
@@MAINT@@$(srcdir)/mpw-ei386go32.c: ei386go32.c
@@MAINT@@	$(srcdir)/../move-if-change $< $@@
@@MAINT@@
@@MAINT@@$(srcdir)/mpw-elfmips.c: eelf32ebmip.c
@@MAINT@@	$(srcdir)/../move-if-change $< $@@
@@MAINT@@
@@MAINT@@$(srcdir)/mpw-em68kcoff.c: em68kcoff.c
@@MAINT@@	$(srcdir)/../move-if-change $< $@@
@@MAINT@@
@@MAINT@@$(srcdir)/mpw-eppcmac.c: eppcmacos.c
@@MAINT@@	$(srcdir)/../move-if-change $< $@@
@@MAINT@@
@@MAINT@@$(srcdir)/mpw-esh.c: esh.c
@@MAINT@@	$(srcdir)/../move-if-change $< $@@
@@MAINT@@
@@MAINT@@$(srcdir)/mpw-idtmips.c: emipsidt.c
@@MAINT@@	$(srcdir)/../move-if-change $< $@@

@


1.149
log
@2003-11-28  Alexandre Oliva  <aoliva@@redhat.com>
* emulparams/elf32frvfd.sh (EMBEDDED): Clear.
2003-11-05  Alexandre Oliva  <aoliva@@redhat.com>
* emulparams/elf32frvfd.sh (STACK_ADDR): Unset.
(MAXPAGESIZE): Set to 64Kb.
(OTHER_READONLY_SECTIONS): Define __ROFIXUP_LIST__ and
__ROFIXUP_END__.  Don't map .rofixup.got any more.
* emulparams/elf32frv.sh (NOP): Set.
2003-10-31  Alexandre Oliva  <aoliva@@redhat.com>
* configure.tgt: Add frv-*-*linux*.
2003-09-30  Alexandre Oliva  <aoliva@@redhat.com>
* Makefile.am (ALL_EMULATIONS): Added eelf32frvfd.o.
(eelf32frvfd.c): New.
* configure.tgt <frv-*-*>: Added it to targ_extra_emuls.
* emulparams/elf32frv.sh: Reverted previous two patches.
* emulparams/elf32frvfd.sh: New.
* Makefile.in: Rebuilt.
2003-09-18  Alexandre Oliva  <aoliva@@redhat.com>
* emulparams/elf32frv.sh (OTHER_READONLY_SECTIONS): Added
.rofixup.got to .rofixup.
2003-09-15  Alexandre Oliva  <aoliva@@redhat.com>
* emulparams/elf32frv.sh (MAXPAGESIZE): Make it 256KiB, not 256B.
(TEMPLATE_NAME, GENERATE_SHLIB_SCRIPT): Set.
@
text
@d152 1
d633 4
@


1.149.6.1
log
@	* emulparams/elf32bsmip.sh (EXTRA_EM_FILE): Define to irix.
	* emulparams/elf64bmip.sh (EXTRA_EM_FILE): Likewise.
	* emulparams/elf32bmipn32.sh (EXTRA_EM_FILE): Likewise.
	* emultempl/irix.em: New file.
	* Makefile.am (eelf32bsmip.c, eelf32bmipn32.c, eelf64bmip.c): Update
	dependencies.
	* Makefile.in: Regenerate.
@
text
@d637 1
a637 1
  $(srcdir)/emulparams/elf32bmip.sh $(srcdir)/emultempl/irix.em \
a667 1
  $(srcdir)/emultempl/irix.em \
d784 1
a784 1
  $(srcdir)/emulparams/elf32bmipn32.sh $(srcdir)/emultempl/irix.em \
@


1.148
log
@Add support for m32r-linux target, including a RELA ABI and PIC.
@
text
@d356 1
d1438 4
@


1.147
log
@	* ldlang.c (lang_do_assignments): Function return is void.
	* ldlang.h (lang_do_assignments): Ditto.
	* emultempl/netbsd.em (gld${EMULATION_NAME}_before_parse): Declare.
	* Makefile.am (ens32knbsd.c): Depend on netbsd.em.
	* Makefile.in: Regenerate.
@
text
@d233 3
d609 9
@


1.146
log
@make "dep-am"
@
text
@d1234 2
a1235 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
@


1.145
log
@Switch to ELF targeted VxWorks targets
@
text
@d1691 2
a1692 1
  ldfile.h ldemul.h $(INCDIR)/fnmatch.h $(INCDIR)/demangle.h
d1710 3
a1712 2
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h ld.h $(INCDIR)/bin-bugs.h \
  ldexp.h ldlang.h ldwrite.h ldmisc.h ldgram.h ldmain.h
@


1.144
log
@
	* Makefile.am: Remove old (before GCC 3.3) emulations for AVR
	target: avr1200, avr23xx, avr4433, avr44x4, avr85xx, avrmega103,
	avrmega161, avrmega603.  Default to avr2.
	* Makefile.in: Regenerate.
	* configure.tgt: Likewise.
	* emulparams/avr1200.sh: Remove.
	* emulparams/avr23xx.sh: Remove.
	* emulparams/avr4433.sh: Remove.
	* emulparams/avr44x4.sh: Remove.
	* emulparams/avr85xx.sh: Remove.
	* emulparams/avrmega103.sh: Remove.
	* emulparams/avrmega161.sh: Remove.
	* emulparams/avrmega603.sh: Remove.
	* scripttempl/elf32avr.sc: Remove.
@
text
@d172 1
d666 3
@


1.143
log
@	* Makefile.am (GENSCRIPTS_EXTRA, GEN_EXTRA_DEPENDS): Remove.  Use
	GENSCRIPTS and GEN_DEPENDS in place of these.
	* Makefile.in: Regenerate.
	* genscripts_extra.sh: Delete.  Merge extra functionality to..
	* genscripts.sh: ..here.

	* emulparams/gld960.sh (TEXT_START_ADDR, TARGET_PAGE_SIZE): Define.
	* emulparams/gld960coff.sh (TEXT_START_ADDR, TARGET_PAGE_SIZE): Ditto.
	* emulparams/lnk960.sh (TEXT_START_ADDR, TARGET_PAGE_SIZE): Ditto.
	* emulparams/m88kbcs.sh (TEXT_START_ADDR, TARGET_PAGE_SIZE): Ditto.
	* emulparams/vanilla.sh (TEXT_START_ADDR, TARGET_PAGE_SIZE): Ditto.
@
text
@d131 1
a131 8
	eavr1200.o \
	eavr23xx.o \
	eavr4433.o \
	eavr44x4.o \
	eavr85xx.o \
	eavrmega103.o \
	eavrmega161.o \
	eavrmega603.o \
a132 1
	eavr2.o \
d522 2
a523 14
eavr85xx.c: $(srcdir)/emulparams/avr85xx.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avr85xx "$(tdir_avr85xx)"
eavr1200.c: $(srcdir)/emulparams/avr1200.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avr1200 "$(tdir_avr85xx)"
eavr23xx.c: $(srcdir)/emulparams/avr23xx.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avr23xx "$(tdir_avr85xx)"
eavr44x4.c: $(srcdir)/emulparams/avr44x4.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32avr.sc \
d525 1
a525 17
	${GENSCRIPTS} avr44x4 "$(tdir_avr85xx)"
eavr4433.c: $(srcdir)/emulparams/avr4433.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avr4433 "$(tdir_avr85xx)"
eavrmega603.c: $(srcdir)/emulparams/avrmega603.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avrmega603 "$(tdir_avr85xx)"
eavrmega103.c: $(srcdir)/emulparams/avrmega103.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avrmega103 "$(tdir_avr85xx)"
eavrmega161.c: $(srcdir)/emulparams/avrmega161.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avrmega161 "$(tdir_avr85xx)"
d529 1
a529 5
	${GENSCRIPTS} avr1 "$(tdir_avr85xx)"
eavr2.c: $(srcdir)/emulparams/avr2.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/avr.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} avr2 "$(tdir_avr85xx)"
d533 1
a533 1
	${GENSCRIPTS} avr3 "$(tdir_avr85xx)"
d537 1
a537 1
	${GENSCRIPTS} avr4 "$(tdir_avr85xx)"
d541 1
a541 1
	${GENSCRIPTS} avr5 "$(tdir_avr85xx)"
@


1.142
log
@bfd/

2003-10-10  H.J. Lu  <hongjiu.lu@@intel.com>

	* bfd-in.h (bfd_elf32_ia64_after_parse): New prototype.
	(bfd_elf64_ia64_after_parse): Likewise.
	* bfd-in2.h: Regenerated.

	* elfxx-ia64.c (oor_ip): New.
	(oor_branch_size): Likewise.
	(bfd_elfNN_ia64_after_parse): Likewise.
	(elfNN_ia64_relax_section): Use oor_ip if oor_branch_size
	equals sizeof (oor_ip).

ld/

2003-10-10  H.J. Lu  <hongjiu.lu@@intel.com>

	* Makefile.am (eelf64_ia64.c): Also depend on
	$(srcdir)/emultempl/ia64elf.em.
	* Makefile.in: Regenerated.

	* emulparams/elf64_ia64.sh (EXTRA_EM_FILE): Set to ia64elf.

	* emultempl/ia64elf.em: New.
@
text
@a448 6
# FIXME: genscripts_extra.sh is a drop in replacement for genscripts.sh
#  with some added functionality.  The rules below ought to be changed
#  to use genscripts_extra.sh and then genscripts.sh should be made obsolete.
GENSCRIPTS_EXTRA = LIB_PATH='${LIB_PATH}' $(SHELL) $(srcdir)/genscripts_extra.sh ${srcdir} ${libdir} "${exec_prefix}" @@host@@ @@target@@ @@target_alias@@ "@@EMULATION_LIBPATH@@" "@@NATIVE_LIB_DIRS@@" @@use_sysroot@@ 
GEN_EXTRA_DEPENDS = $(srcdir)/genscripts_extra.sh stringify.sed

d1080 2
a1081 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x110 "$(tdir_msp430x110)" msp430all
d1084 2
a1085 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x112 "$(tdir_msp430x112)" msp430all
d1088 2
a1089 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x1101 "$(tdir_msp430x1101)" msp430all
d1092 2
a1093 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x1111 "$(tdir_msp430x1111)" msp430all
d1096 2
a1097 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x1121 "$(tdir_msp430x1121)" msp430all
d1100 2
a1101 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x1122 "$(tdir_msp430x1122)" msp430all
d1104 2
a1105 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x1132 "$(tdir_msp430x1132)" msp430all
d1108 2
a1109 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x122 "$(tdir_msp430x122)" msp430all
d1112 2
a1113 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x123 "$(tdir_msp430x123)" msp430all
d1116 2
a1117 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x1222 "$(tdir_msp430x1222)" msp430all
d1120 2
a1121 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x1232 "$(tdir_msp430x1232)" msp430all
d1124 2
a1125 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x133 "$(tdir_msp430x133)" msp430all
d1128 2
a1129 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x135 "$(tdir_msp430x135)" msp430all
d1132 2
a1133 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x1331 "$(tdir_msp430x1331)" msp430all
d1136 2
a1137 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x1351 "$(tdir_msp430x1351)" msp430all
d1140 2
a1141 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x147 "$(tdir_msp430x147)" msp430all
d1144 2
a1145 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x148 "$(tdir_msp430x148)" msp430all
d1148 2
a1149 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x149 "$(tdir_msp430x149)" msp430all
d1152 2
a1153 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x155 "$(tdir_msp430x155)" msp430all
d1156 2
a1157 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x156 "$(tdir_msp430x156)" msp430all
d1160 2
a1161 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x157 "$(tdir_msp430x157)" msp430all
d1164 2
a1165 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x167 "$(tdir_msp430x167)" msp430all
d1168 2
a1169 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x168 "$(tdir_msp430x168)" msp430all
d1172 2
a1173 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x169 "$(tdir_msp430x169)" msp430all
d1176 2
a1177 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x311 "$(tdir_msp430x311)" msp430all
d1180 2
a1181 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x312 "$(tdir_msp430x312)" msp430all
d1184 2
a1185 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x313 "$(tdir_msp430x313)" msp430all
d1188 2
a1189 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x314 "$(tdir_msp430x314)" msp430all
d1192 2
a1193 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x315 "$(tdir_msp430x315)" msp430all
d1196 2
a1197 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x323 "$(tdir_msp430x323)" msp430all
d1200 2
a1201 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x325 "$(tdir_msp430x325)" msp430all
d1204 2
a1205 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x336 "$(tdir_msp430x336)" msp430all
d1208 2
a1209 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x337 "$(tdir_msp430x337)" msp430all
d1212 2
a1213 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x412 "$(tdir_msp430x412)" msp430all
d1216 2
a1217 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x413 "$(tdir_msp430x413)" msp430all
d1220 2
a1221 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430xE423 "$(tdir_msp430xE423)" msp430all
d1224 2
a1225 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430xE425 "$(tdir_msp430xE425)" msp430all
d1228 2
a1229 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430xE427 "$(tdir_msp430xE427)" msp430all
d1232 2
a1233 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430xW423 "$(tdir_msp430xW423)" msp430all
d1236 2
a1237 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430xW425 "$(tdir_msp430xW425)" msp430all
d1240 2
a1241 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430xW427 "$(tdir_msp430xW427)" msp430all
d1244 2
a1245 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x435 "$(tdir_msp430x435)" msp430all
d1248 2
a1249 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x436 "$(tdir_msp430x436)" msp430all
d1252 2
a1253 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x437 "$(tdir_msp430x437)" msp430all
d1256 2
a1257 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x447 "$(tdir_msp430x447)" msp430all
d1260 2
a1261 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x448 "$(tdir_msp430x448)" msp430all
d1264 2
a1265 2
  ${GEN_EXTRA_DEPENDS}
	${GENSCRIPTS_EXTRA} msp430x449 "$(tdir_msp430x449)" msp430all
@


1.141
log
@* Makefile.am (GENSCRIPTS_EXTRA): New script definition which calls
  genscripts_extra.sh.
  Rearrange all msp430 depends using this script.
* Makefile.in: Regenerate.
* genscripts_extra.sh: New file: Similar to genscripts.sh, except that the
  script to be run to generate the emulations can be passed
  as an optional parameter instead of being computed from the
  emulation name.
* emulparams/msp430all.sh: New file: Combine all msp430 subdevice definitions
  into one file.
* emulparams/msp430x*.sh: Removed.
@
text
@d792 2
a793 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/needrelax.em \
d798 2
a799 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/needrelax.em \
@


1.140
log
@	* dep-in.sed: Remove libintl.h.
	* Makefile.am (POTFILES.in): Unset LC_COLLATE.
	* Makefile.in: Regenerate.
@
text
@d448 7
d1082 1
a1082 41
emsp430x110.c: $(srcdir)/emulparams/msp430x110.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x110 "$(tdir_msp430x110)"
emsp430x112.c: $(srcdir)/emulparams/msp430x112.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x112 "$(tdir_msp430x112)"
emsp430x1101.c: $(srcdir)/emulparams/msp430x1101.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1101 "$(tdir_msp430x1101)"
emsp430x1111.c: $(srcdir)/emulparams/msp430x1111.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1111 "$(tdir_msp430x1111)"
emsp430x1121.c: $(srcdir)/emulparams/msp430x1121.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1121 "$(tdir_msp430x1121)"
emsp430x1122.c: $(srcdir)/emulparams/msp430x1122.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1122 "$(tdir_msp430x1122)"
emsp430x1132.c: $(srcdir)/emulparams/msp430x1132.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1132 "$(tdir_msp430x1132)"
emsp430x122.c: $(srcdir)/emulparams/msp430x122.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x122 "$(tdir_msp430x122)"
emsp430x123.c: $(srcdir)/emulparams/msp430x123.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x123 "$(tdir_msp430x123)"
emsp430x1222.c: $(srcdir)/emulparams/msp430x1222.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1222 "$(tdir_msp430x1222)"
emsp430x1232.c: $(srcdir)/emulparams/msp430x1232.sh \
d1084 95
a1178 55
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1232 "$(tdir_msp430x1232)"
emsp430x133.c: $(srcdir)/emulparams/msp430x133.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x133 "$(tdir_msp430x133)"
emsp430x135.c: $(srcdir)/emulparams/msp430x135.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x135 "$(tdir_msp430x135)"
emsp430x1331.c: $(srcdir)/emulparams/msp430x1331.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1331 "$(tdir_msp430x1331)"
emsp430x1351.c: $(srcdir)/emulparams/msp430x1351.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x1351 "$(tdir_msp430x1351)"
emsp430x147.c: $(srcdir)/emulparams/msp430x147.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x147 "$(tdir_msp430x147)"
emsp430x148.c: $(srcdir)/emulparams/msp430x148.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x148 "$(tdir_msp430x148)"
emsp430x149.c: $(srcdir)/emulparams/msp430x149.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x149 "$(tdir_msp430x149)"
emsp430x155.c: $(srcdir)/emulparams/msp430x155.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x155 "$(tdir_msp430x155)"
emsp430x156.c: $(srcdir)/emulparams/msp430x156.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x156 "$(tdir_msp430x156)"
emsp430x157.c: $(srcdir)/emulparams/msp430x157.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x157 "$(tdir_msp430x157)"
emsp430x167.c: $(srcdir)/emulparams/msp430x167.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x167 "$(tdir_msp430x167)"
emsp430x168.c: $(srcdir)/emulparams/msp430x167.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x168 "$(tdir_msp430x168)"
emsp430x169.c: $(srcdir)/emulparams/msp430x169.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x169 "$(tdir_msp430x169)"
emsp430x311.c: $(srcdir)/emulparams/msp430x311.sh \
d1180 3
a1182 3
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x311 "$(tdir_msp430x311)"
emsp430x312.c: $(srcdir)/emulparams/msp430x312.sh \
d1184 3
a1186 3
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x312 "$(tdir_msp430x312)"
emsp430x313.c: $(srcdir)/emulparams/msp430x313.sh \
d1188 3
a1190 3
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x313 "$(tdir_msp430x313)"
emsp430x314.c: $(srcdir)/emulparams/msp430x314.sh \
d1192 3
a1194 3
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x314 "$(tdir_msp430x314)"
emsp430x315.c: $(srcdir)/emulparams/msp430x315.sh \
d1196 3
a1198 3
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x315 "$(tdir_msp430x315)"
emsp430x323.c: $(srcdir)/emulparams/msp430x323.sh \
d1200 3
a1202 3
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x323 "$(tdir_msp430x323)"
emsp430x325.c: $(srcdir)/emulparams/msp430x325.sh \
d1204 3
a1206 3
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x325 "$(tdir_msp430x325)"
emsp430x336.c: $(srcdir)/emulparams/msp430x336.sh \
d1208 3
a1210 3
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x336 "$(tdir_msp430x336)"
emsp430x337.c: $(srcdir)/emulparams/msp430x337.sh \
d1212 55
a1266 15
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x337 "$(tdir_msp430x337)"
emsp430x412.c: $(srcdir)/emulparams/msp430x412.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x412 "$(tdir_msp430x412)"
emsp430x413.c: $(srcdir)/emulparams/msp430x413.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x413 "$(tdir_msp430x413)"
emsp430xE423.c: $(srcdir)/emulparams/msp430xE423.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430xE423 "$(tdir_msp430xE423)"
emsp430xE425.c: $(srcdir)/emulparams/msp430xE425.sh \
d1268 2
a1269 42
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430xE425 "$(tdir_msp430xE425)"
emsp430xE427.c: $(srcdir)/emulparams/msp430xE427.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430xE427 "$(tdir_msp430xE427)"
emsp430xW423.c: $(srcdir)/emulparams/msp430xW423.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430xW423 "$(tdir_msp430xW423)"
emsp430xW425.c: $(srcdir)/emulparams/msp430xW425.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430xW425 "$(tdir_msp430xW425)"
emsp430xW427.c: $(srcdir)/emulparams/msp430xW427.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430xW427 "$(tdir_msp430xW427)"
emsp430x435.c: $(srcdir)/emulparams/msp430x435.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x435 "$(tdir_msp430x435)"
emsp430x436.c: $(srcdir)/emulparams/msp430x436.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x436 "$(tdir_msp430x436)"
emsp430x437.c: $(srcdir)/emulparams/msp430x437.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x437 "$(tdir_msp430x437)"
emsp430x447.c: $(srcdir)/emulparams/msp430x447.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x447 "$(tdir_msp430x447)"
emsp430x448.c: $(srcdir)/emulparams/msp430x448.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x448 "$(tdir_msp430x448)"
emsp430x449.c: $(srcdir)/emulparams/msp430x449.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x449 "$(tdir_msp430x449)"
@


1.139
log
@Add MSP430 variants
@
text
@d416 1
a416 1
	for file in $(POTFILES); do echo $$file; done | sort > tmp \
@


1.138
log
@2003-08-04  Christian Groessler  <chris@@groessler.org>
            Jason Eckhardt  <jle@@rice.edu>

        * configure.tgt: Recognize new target i860-*-coff.
        * Makefile.am (ALL_EMULATIONS): Add ecoff_i860.o.
        (ecoff_i860.c): New rule.
        * emulparams/coff_i860.sh: New file.
        * scripttempl/i860coff.sc: New file.
        * Makefile.in: Regenerate.
@
text
@d263 2
d270 6
d278 2
d281 6
a286 12
	emsp430x148.o \
	emsp430x147.o \
	emsp430x135.o \
	emsp430x133.o \
	emsp430x110.o \
	emsp430x112.o \
	emsp430x122.o \
	emsp430x1222.o \
	emsp430x123.o \
	emsp430x1232.o \
	emsp430x412.o \
	emsp430x413.o \
d296 8
d306 1
a309 6
	emsp430x169.o \
	emsp430x168.o \
	emsp430x167.o \
	emsp430x155.o \
	emsp430x156.o \
	emsp430x157.o \
d1075 8
d1103 1
a1103 1
emsp430x1331.c: $(srcdir)/emulparams/msp430x1331.sh \
d1106 2
a1107 2
	${GENSCRIPTS} msp430x1331 "$(tdir_msp430x1331)"
emsp430x1351.c: $(srcdir)/emulparams/msp430x1351.sh \
d1110 2
a1111 2
	${GENSCRIPTS} msp430x1351 "$(tdir_msp430x1351)"
emsp430x149.c: $(srcdir)/emulparams/msp430x149.sh \
d1114 2
a1115 2
	${GENSCRIPTS} msp430x149 "$(tdir_msp430x149)"
emsp430x148.c: $(srcdir)/emulparams/msp430x148.sh \
d1118 2
a1119 2
	${GENSCRIPTS} msp430x148 "$(tdir_msp430x148)"
emsp430x449.c: $(srcdir)/emulparams/msp430x449.sh \
d1122 2
a1123 2
	${GENSCRIPTS} msp430x449 "$(tdir_msp430x449)"
emsp430x448.c: $(srcdir)/emulparams/msp430x448.sh \
d1126 2
a1127 2
	${GENSCRIPTS} msp430x448 "$(tdir_msp430x448)"
emsp430x447.c: $(srcdir)/emulparams/msp430x447.sh \
d1130 2
a1131 2
	${GENSCRIPTS} msp430x447 "$(tdir_msp430x447)"
emsp430x412.c: $(srcdir)/emulparams/msp430x412.sh \
d1134 1
a1134 5
	${GENSCRIPTS} msp430x412 "$(tdir_msp430x412)"
emsp430x413.c: $(srcdir)/emulparams/msp430x413.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x413 "$(tdir_msp430x413)"
d1139 1
a1139 1
emsp430x135.c: $(srcdir)/emulparams/msp430x135.sh \
d1142 2
a1143 2
	${GENSCRIPTS} msp430x135 "$(tdir_msp430x135)"
emsp430x133.c: $(srcdir)/emulparams/msp430x133.sh \
d1146 2
a1147 2
	${GENSCRIPTS} msp430x133 "$(tdir_msp430x133)"
emsp430x110.c: $(srcdir)/emulparams/msp430x110.sh \
d1150 2
a1151 2
	${GENSCRIPTS} msp430x110 "$(tdir_msp430x110)"
emsp430x112.c: $(srcdir)/emulparams/msp430x112.sh \
d1154 2
a1155 2
	${GENSCRIPTS} msp430x112 "$(tdir_msp430x112)"
emsp430x122.c: $(srcdir)/emulparams/msp430x122.sh \
d1158 2
a1159 2
	${GENSCRIPTS} msp430x122 "$(tdir_msp430x122)"
emsp430x1222.c: $(srcdir)/emulparams/msp430x1222.sh \
d1162 2
a1163 2
	${GENSCRIPTS} msp430x1222 "$(tdir_msp430x1222)"
emsp430x123.c: $(srcdir)/emulparams/msp430x123.sh \
d1166 2
a1167 2
	${GENSCRIPTS} msp430x123 "$(tdir_msp430x123)"
emsp430x1232.c: $(srcdir)/emulparams/msp430x1232.sh \
d1170 1
a1170 1
	${GENSCRIPTS} msp430x1232 "$(tdir_msp430x1232)"
d1207 32
d1251 1
a1251 1
emsp430x167.c: $(srcdir)/emulparams/msp430x167.sh \
d1254 2
a1255 2
	${GENSCRIPTS} msp430x167 "$(tdir_msp430x167)"
emsp430x168.c: $(srcdir)/emulparams/msp430x167.sh \
d1258 2
a1259 2
	${GENSCRIPTS} msp430x168 "$(tdir_msp430x168)"
emsp430x169.c: $(srcdir)/emulparams/msp430x169.sh \
d1262 1
a1262 13
	${GENSCRIPTS} msp430x169 "$(tdir_msp430x169)"
emsp430x155.c: $(srcdir)/emulparams/msp430x155.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x155 "$(tdir_msp430x155)"
emsp430x156.c: $(srcdir)/emulparams/msp430x156.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x156 "$(tdir_msp430x156)"
emsp430x157.c: $(srcdir)/emulparams/msp430x157.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf32msp430.sc \
  ${GEN_DEPENDS}
	${GENSCRIPTS} msp430x157 "$(tdir_msp430x157)"
@


1.137
log
@2001-08-22  Alexandre Oliva  <aoliva@@redhat.com>
* emulparams/elf32am33lin.sh: Adjust to match kernel parameters.
2001-05-09  Alexandre Oliva  <aoliva@@redhat.com>
* configure.host (am33_2.0-*-linux*): Added.
* configure.tgt (am33_2.0-*-linux*): Likewise.
* emulparams/elf32am33lin.sh: New.
* Makefile.am (eelf32am33lin.c): New rule.
* Makefile.in: Rebuilt.
@
text
@d144 1
d574 3
@


1.136
log
@Convert to C90
@
text
@d610 3
@


1.135
log
@	* emultempl/aix.em: Convert to C90, remove unnecessary prototypes
	and casts.  Replace PTR with void *.  Formatting.
	* emultempl/alphaelf.em: Likewise
	* emultempl/armcoff.em: Likewise
	* emultempl/armelf.em: Likewise
	* emultempl/armelf_oabi.em: Likewise
	* emultempl/beos.em: Likewise
	* emultempl/elf32.em: Likewise
	* emultempl/generic.em: Likewise
	* emultempl/gld960.em: Likewise
	* emultempl/gld960c.em: Likewise
	* emultempl/hppaelf.em: Likewise
	* emultempl/linux.em: Likewise
	* emultempl/lnk960.em: Likewise
	* emultempl/m68hc1xelf.em: Likewise
	* emultempl/m68kcoff.em: Likewise
	* emultempl/m68kelf.em: Likewise
	* emultempl/mipsecoff.em: Likewise
	* emultempl/mipself.em: Likewise
	* emultempl/mmix-elfnmmo.em: Likewise
	* emultempl/mmixelf.em: Likewise
	* emultempl/mmo.em: Likewise
	* emultempl/needrelax.em: Likewise
	* emultempl/netbsd.em: Likewise
	* emultempl/pe.em: Likewise
	* emultempl/sh64elf.em: Likewise
	* emultempl/sunos.em: Likewise
	* emultempl/ticoff.em: Likewise
	* emultempl/vanilla.em: Likewise
	* emultempl/xtensaelf.em: Likewise
	* Makefile.am: Correct dependencies.
	* Makefile.in: Regenerate.
@
text
@d1730 1
a1730 1
ldlex.o: ldlex.c $(INCDIR)/ansidecl.h ../bfd/bfd.h \
@


1.134
log
@	* Makefile.am (ALL_EMULATIONS): Add em32relf.o.
	* Makefile.in: Regenerate.
@
text
@d640 1
a640 1
  $(srcdir)/emulparams/elf32bmip.sh \
d644 1
d648 1
a648 1
  $(srcdir)/emulparams/elf32bmip.sh \
d652 1
a652 1
  $(srcdir)/emulparams/elf32bmip.sh \
d656 1
a656 1
  $(srcdir)/emulparams/elf32bmip.sh \
d661 1
d666 1
d670 1
a670 1
  $(srcdir)/emulparams/elf32bmip.sh \
d675 1
d683 1
d687 1
a687 1
  $(srcdir)/emulparams/elf32bmip.sh \
d712 1
d979 2
a980 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elfm68hc11.sc ${GEN_DEPENDS}
d983 2
a984 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elfm68hc11.sc ${GEN_DEPENDS}
d987 2
a988 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elfm68hc12.sc ${GEN_DEPENDS}
d991 2
a992 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elfm68hc12.sc ${GEN_DEPENDS}
@


1.133
log
@include/elf/
	* h8.h (E_H8_MACH_H8300SXN): New flag.

bfd/
	* archures.c (bfd_mach_h8300sxn): New architecture.
	* bfd-in2.h: Regenerate.
	* cpu-h8300.c (h8300_scan): Check for 'sxn'.
	(h8300sxn_info_struct): New.
	(h8300sx_info_struct): Link to it.
	* elf32-h8300.c (elf32_h8_mach): Add h8300sxn case.
	(elf32_h8_final_write_processing): Likewise.

gas/
	* config/tc-h8300.c (h8300sxnmode): New.
	(md_pseudo_table): Add .h8300sxn entry.  Sync others with FSF version.

ld/
	* configure.tgt (h8300*): Add h8300sxn emulations.
	* Makefile.am (ALL_EMULATIONS): Add eh8300sxn.o and eh8300sxnelf.o.
	(eh8300sxn.c, eh8300sxnelf.c): New rules.
	* Makefile.in: Regenerate.
	* emulparams/h8300sxnelf.sh, emulparams/h8300sxn.sh: New files.
@
text
@d238 1
@


1.132
log
@2003-06-03  Michael Snyder  <msnyder@@redhat.com>
        and Bernd Schmidt   <bernds@@redhat.com>
	and Alexandre Oliva <aoliva@@redhat.com>
	* Makefile.am: Add new emulations for h8300sx.
	* Makefile.in: Regenerate.
	* configure.tgt: Add new emulations.
	* emulparams/h8300sx.sh: New emulation.
	* emulparams/h8300sxelf.sh: Ditto.
	* scripttempl/h8300sx.sc: Ditto.
@
text
@d209 2
d852 3
d878 4
@


1.131
log
@bfd/

2003-06-03  H.J. Lu <hongjiu.lu@@intel.com>

	* elflink.h (elf_link_input_bfd): Call linker error_handler
	for discarded definitions.

include/

2003-06-03  H.J. Lu <hongjiu.lu@@intel.com>

	* bfdlink.h (LD_DEFINITION_IN_DISCARDED_SECTION): New.

ld/

2003-06-03  H.J. Lu <hongjiu.lu@@intel.com>

	* ldmisc.c: Include "bfdlink.h".
	(error_handler): Handle LD_DEFINITION_IN_DISCARDED_SECTION
	and -LD_DEFINITION_IN_DISCARDED_SECTION.

	* Makefile.am: Rebuild dependency.
	* Makefile.in: Regenerated.

ld/testsuite/

2003-06-03  H.J. Lu <hongjiu.lu@@intel.com>

	* ld-discard/extern.d: Updated.
	* ld-discard/start.d: Likewise.
	* ld-discard/static.d: Likewise.
@
text
@d203 1
d208 1
d847 3
d869 4
@


1.130
log
@	* Makefile.am (ALL_EMULATIONS): Add earmelfb.o and earmelfb_linux.o.
	(earmelfb.c, earmelfb_linux.c): New rules.
	* Makefile.in: Regenerated.
	* emulparams/armelfb.sh, emulparams/armelfb_linux.sh: New files.
@
text
@d1665 4
a1668 4
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/libiberty.h $(INCDIR)/demangle.h ld.h $(INCDIR)/bin-bugs.h \
  ldmisc.h ldexp.h ldlang.h ldgram.h ldlex.h ldmain.h \
  ldfile.h
@


1.129
log
@	* Makefile.am (em68hc11elf.c): Correct dependencies.
	(em68hc11elfb.c, em68hc12elf.c, em68hc12elfb.c): Likewise.
	* Makefile.in: Regenerate.
	* emultempl/elf32.em (find_exp_assignment): Adjust for changed
	bfd_elf_record_link_assignment name.
@
text
@d121 1
d124 1
d462 4
d478 5
@


1.128
log
@Add support for h8300hn and h8300sn
@
text
@d943 1
a943 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elfm68hc11.sc ${GEN_DEPENDS}
d946 1
a946 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elfm68hc11.sc ${GEN_DEPENDS}
d949 1
a949 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elfm68hc12.sc ${GEN_DEPENDS}
d952 1
a952 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elfm68hc12.sc ${GEN_DEPENDS}
@


1.127
log
@Add Xtensa port
@
text
@d199 2
d203 2
d828 6
d845 8
@


1.126
log
@ldmain.c (ld_canon_sysroot, ld_canon_sysroot_len): Define. (main): Initialize them.
ldfile.c: Include pathnames.h. (is_sysrooted_pathname): New. (ldfile_add_library_path): Use it.
  (ldfile_open_file_search): Likewise.  Use IS_ABSOLUTE_PATH.
  Don't search_dirs if given an absolute pathname.
  (ldfile_open_file): Issue error message for sysrooted	absolute pathnames.
@
text
@d186 1
d593 5
@


1.125
log
@Add new devices x1122 x1132 emulation.
@
text
@d1616 1
a1616 1
  ldlex.h ldemul.h $(INCDIR)/libiberty.h
@


1.124
log
@(ld_sysroot): Try to set from TOOLBINDIR too.
@
text
@d253 2
d1009 8
@


1.123
log
@	* emultempl/ppc32elf.em: New file.
	* emulparams/elf32ppc.sh (EXTRA_EM_FILE): Define.
	* Makefile.am (eelf32lppc.c): Depend on emultempl/ppc32elf.em.
	(eelf32lppcnto.c): Likewise.
	(eelf32lppcsim.c): Likewise.
	(eelf32ppcnto.c): Likewise.
	(eelf32ppc.c): Likewise.
	(eelf32ppc_fbsd.c): Likewise.
	(eelf32ppcsim.c): Likewise.
	(eelf32ppclinux.c): Likewise.
@
text
@d400 1
@


1.122
log
@Fix generation of tic3xcoff_onchip.c
@
text
@d657 1
a657 1
  $(srcdir)/emulparams/elf32ppc.sh \
d661 1
a661 1
  $(srcdir)/emulparams/elf32ppc.sh \
d666 1
d670 1
a670 1
  $(srcdir)/emulparams/elf32ppc.sh \
d683 1
a683 1
eelf32ppc.c: $(srcdir)/emulparams/elf32ppc.sh \
d687 1
a687 1
  $(srcdir)/emulparams/elf32ppc.sh \
d691 1
a691 1
  $(srcdir)/emulparams/elf32ppc.sh \
d695 1
a695 1
  $(srcdir)/emulparams/elf32ppc.sh \
@


1.121
log
@Updates for fixing tic4x arch tagging of its object files.

	* bfd/coffcode.h (coff_set_flags): Added get/set arch hooks.
	* include/coff/tic4x.h (TICOFF_TARGET_MACHINE_GET): Fixed define bug
	* include/coff/ti.h (TICOFF_TARGET_MACHINE_GET): Added macros
	* ld/Makefile.am: Added etic3xcoff.o and etic4xcoff_onchip.o
	* ld/Makefile.in: Regenerate
	* ld/configure.tgt: Added extra target emulations
	* ld/emulparams/tic3xcoff.sh: Remove old settings
	* ld/emulparams/tic4xcoff.sh: Ditto
	* ld/emulparams/tic3xcoff-onchip.sh: Added new
	* ld/scripttempl/tic4xcoff.sc: Revise and combine both c3x and c4x
	* ld/scripttempl/tic3xcoff.sc: Remove
@
text
@d1309 1
a1309 1
	${GENSCRIPTS} tic3xcoff "$(tdir_tic4xcoff)"
@


1.120
log
@	* Makefile.am (eelf32iq10.c): Fix tab/whitespace mixup.

	* Makefile.am (ldmain.o): Add @@TARGET_SYSTEM_ROOT_DEFINE@@.
	(GENSCRIPTS): Add @@use_sysroot@@.
	* Makefile.in: Regenerated.
	* configure.host: Move setting of NATIVE_LIB_DIRS to...
	* configure.tgt: ... here.  Use ${target} instead of ${host}
	for NATIVE_LIB_DIRS.
	* configure.in: Add --with-sysroot.
	* configure: Regenerated.
	* genscripts.sh: Accept use_sysroot option.  Set new variables
	NATIVE and USE_LIBPATH.  Prepend "=" to directory names if
	$use_sysroot.  Don't search $tool_lib if $use_sysroot.
	* ldfile.c (ldfile_add_library_path): Handle leading '='.
	* ldmain.c (TARGET_SYSTEM_ROOT): Define if not defined.
	(ld_sysroot): New variable.
	(main): Initialize ld_sysroot.
	* ldmain.h (ld_sysroot): New extern.
	* emultempl/elf32.em: Use NATIVE and USE_LIBPATH instead of
	searching $EMULATION_LIBPATH.
	(gld${EMULATION_NAME}_add_sysroot): New function.
	(gld${EMULATION_NAME}_check_ld_so_conf): Use it.  Honor ld_sysroot.
	(gld${EMULATION_NAME}_after_open): Likewise.  Only search
	environment variables if $NATIVE.
	* ld.texinfo (Options): Mention "=" prefix in the description of -L.
	* NEWS: Mention --with-sysroot.

	* emulparams/elf32bmipn32-defs.sh: Set NATIVE and LIBPATH_SUFFIX
	instead of setting LIB_PATH.
	* emulparams/elf32ppc.sh: Likewise.
	* emulparams/elf64_s390.sh: Likewise.
	* emulparams/elf64_sparc.sh: Likewise.
	* emulparams/elf64ppc.sh: Likewise.
	* emulparams/elf_x86_64.sh: Likewise.

	* emulparams/elf64_aix.sh: Add "=" prefixes to LIB_PATH.
	* emulparams/elf64hppa.sh: Add "=" prefixes to LIB_PATH.
@
text
@d327 2
d1304 6
@


1.119
log
@	* Makefile.am (ldmain.o): Pass BINDIR.
	* Makefile.in: Regenerated.
	* ldmain.c (set_scripts_dir): Use make_relative_prefix for the first
	search path.
@
text
@d396 4
a399 1
	$(COMPILE) -c -DDEFAULT_EMULATION='"$(EMUL)"' -DSCRIPTDIR='"$(scriptdir)"' -DBINDIR='"$(bindir)"' -DTARGET='"@@target@@"' $(srcdir)/ldmain.c
d421 1
a421 1
GENSCRIPTS = LIB_PATH='${LIB_PATH}' $(SHELL) $(srcdir)/genscripts.sh ${srcdir} ${libdir} "${exec_prefix}" @@host@@ @@target@@ @@target_alias@@ "@@EMULATION_LIBPATH@@" "@@NATIVE_LIB_DIRS@@"
d713 1
a713 1
        ${GENSCRIPTS} elf32iq10 "$(tdir_iq10)"
@


1.118
log
@	* Makefile.am (ALL_EMULATIONS): Add eelf32iq2000.o.
	(eelf32iq2000.c): New target.
	* Makefile.in: Regenerate.
	* configure.tgt: Handle iq2000-*-elf.
	* emulparams/elf32iq10.sh: New file.
	* emulparams/elf32iq2000.sh: New file.
	* scripttempl/iq2000.sc: New file.
@
text
@d396 1
a396 1
	$(COMPILE) -c -DDEFAULT_EMULATION='"$(EMUL)"' -DSCRIPTDIR='"$(scriptdir)"' -DTARGET='"@@target@@"' $(srcdir)/ldmain.c
@


1.117
log
@	Suggested by Manfred Hollstein <manfred.h@@gmx.net>:
	* Makefile.am (ld.1): Depend on configdoc.texi
	and ldver.texi.
	* Makefile.in: Regenerated.
@
text
@d169 2
d705 6
@


1.116
log
@Add support for msp430.
@
text
@d1440 1
a1440 1
ld.1: $(srcdir)/ld.texinfo
@


1.115
log
@	* Makefile.am (eelf32ppcwindiss.c): Correct dependencies.
	* Makefile.in: Regenerate.
@
text
@d248 38
d980 156
@


1.114
log
@	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
	* ldver.c: #include "bfdver.h".
@
text
@d627 2
a628 1
eelf32ppcwindiss.c: $(srcdir)/emulparams/elf32ppcwindiss.sh ${GEN_DEPENDS}
@


1.113
log
@* Makefile.am: Add eshelf32_linux.o and
eshlelf32_linux.o, new emulations for sh64 Linux.
* Makefile.in: Regenerate.
* configure.tgt: Add sh64eb-*-linux* and sh64-*-linux* emulations.
* emulparams/shelf32_linux.sh: New file.
* emulparams/shlelf32_linux.sh: New file.
@
text
@d1409 3
a1411 3
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
  ld.h $(INCDIR)/bin-bugs.h ldver.h ldexp.h ldlang.h \
  ldfile.h ldemul.h ldmain.h
@


1.112
log
@Add TMS320C4x support
@
text
@d264 2
d991 6
d1041 6
@


1.111
log
@Add --with-lib-patch configure switch.
@
text
@d285 1
d1082 3
@


1.110
log
@Add sh-nto support
@
text
@d33 3
a35 2
# which may have the form: LIB_PATH=/lib:/usr/local/lib
LIB_PATH =
d375 1
a375 1
GENSCRIPTS = $(SHELL) $(srcdir)/genscripts.sh ${srcdir} ${libdir} "${exec_prefix}" @@host@@ @@target@@ @@target_alias@@ "@@EMULATION_LIBPATH@@" "@@NATIVE_LIB_DIRS@@"
@


1.109
log
@Add QNX Neutrino PowerPC support and common up QNX functions
@
text
@d270 2
d1011 3
d1019 3
@


1.108
log
@	* Makefile.am (eelf32btsmipn32.o, eelf32ltsmipn32.o): New emulations
	for n32 ABI support.
	* Makefile.in: Regenerate.
	* configure.tgt (mips64*el-*-linux-gnu*,mips64*-*-linux-gnu*): Add
	n32 ABI emulations for these 64 bit targets.
	* emulparams/elf32bmipn32.sh: Expand comment.
	* emulparams/elf32btsmipn32.sh: New file, for traditional big endian
	n32 ABI.
	* emulparams/elf32ltsmipn32.sh: Likewise for little endian.
@
text
@d171 1
d178 1
d609 4
d617 4
@


1.107
log
@Add arm-*-nto port.
@
text
@d159 1
d161 1
d572 4
d580 4
@


1.106
log
@Add IP2k support to BFD and LD
@
text
@d125 1
d432 4
@


1.105
log
@	* configure.tgt: Add hppaobsd.o.
	* Makefile.am: Add support for alpha-*-openbsd*, hppa-*-openbsd*,
	powerpc-*-openbsd* and sparc64-*-openbsd*.
	* Makefile.in: Regenerate.
	* emulparams/hppaobsd.sh: New file.
@
text
@d164 1
d630 3
@


1.105.2.1
log
@	Suggested by Manfred Hollstein <manfred.h@@gmx.net>:
	* Makefile.am (ld.1): Depend on configdoc.texi
	and ldver.texi.
	* Makefile.in: Regenerated.
@
text
@d1189 1
a1189 1
ld.1: $(srcdir)/ld.texinfo configdoc.texi ldver.texi
@


1.104
log
@	* Makefile.am (check-DEJAGNU): Revert 2002-06-25 change.
	Run "make dep-am".
	* Makefile.in: Regenerate.
@
text
@d201 1
d772 4
@


1.103
log
@2002-06-25  H.J. Lu <hjl@@gnu.org>

	* Makefile.am (check-DEJAGNU): Set LC_ALL=C and export it.
	* Makefile.in: Regenerated.
@
text
@a1093 1
	LC_ALL=C; export LC_ALL; \
d1381 3
a1383 3
  $(INCDIR)/safe-ctype.h ld.h $(INCDIR)/bin-bugs.h ldmisc.h \
  ldexp.h ldlang.h ldgram.h ldfile.h ldlex.h ldmain.h \
  $(INCDIR)/libiberty.h
@


1.102
log
@2002-06-18  Dave Brolley  <brolley@@redhat.com>

	From Catherine Moore, Michael Meissner, Jim Blandy:
	* emulparams/elf32frv.sh: New file.
	* configure.tgt: Support frv-*-*.
	* Makefile.am (ALL_EMULATIONS): Add eelf32frv.o.
	(eelf32frv.c): New target.
@
text
@d1094 1
@


1.101
log
@bfd:
* Makefile.am (BFD32_BACKENDS): Add elf32-sh64-nbsd.lo.
(BFD32_BACKENDS_CFILES): Add elf32-sh64-nbsd.c.
(BFD64_BACKENDS): Add elf64-sh64-nbsd.lo.
(BFD64_BACKENDS_CFILES): Add elf64-sh64-nbsd.c.
(elf32-sh64-nbsd.lo, elf64-sh64-nbsd.lo): New rules.
* Makefile.in: Regenerate.
* config.bfd (sh5le-*-netbsd*, sh5-*-netbsd*, sh64le-*-netbsd*)
(sh64-*-netbsd*): New targets.
* configure.in: Add bfd_elf32_sh64nbsd_vec, bfd_elf32_sh64lnbsd_vec,
bfd_elf64_sh64nbsd_vec, and bfd_elf64_sh64lnbsd_vec.
* configure: Regenerate.
* elf32-sh64-nbsd.c: New file.
* elf64-sh64-nbsd.c: New file.
* targets.c: Add extern decls for bfd_elf32_sh64nbsd_vec,
bfd_elf32_sh64lnbsd_vec, bfd_elf64_sh64nbsd_vec, and
bfd_elf64_sh64lnbsd_vec.

gas:
* configure.in (sh5*): Set cpu_type to sh64 and endian to big.
(sh5le*, sh64le*): Set cpu_type to sh64 and endian to little.
(sh5*-*-netbsd*, sh64*-*-netbsd*): New targets.
* configure: Regenerate.
* config/tc-sh64.c (sh64_target_format): Add support for NetBSD
environment.

ld:
* Makefile.am (ALL_EMULATIONS): Add eshelf32_nbsd.o,
eshlelf32_nbsd.o, eshelf64_nbsd.o, and eshlelf64_nbsd.o.
(eshelf32_nbsd.c, eshelf64_nbsd.c, eshlelf32_nbsd.c)
(eshlelf64_nbsd.c): New rules.
* Makefile.in: Regenerate.
* configure.tgt (sh5le-*-netbsd*, sh5-*-netbsd*, sh64le-*-netbsd*)
(sh64-*-netbsd*): New targets.
* emulparams/shelf32_nbsd.sh: New file.
* emulparams/shelf64_nbsd.sh: New file.
* emulparams/shlelf32_nbsd.sh: New file.
* emulparams/shlelf64_nbsd.sh: New file.

opcodes:
* configure.in: Add "sh5*-*" to list of targets which include
sh64 support.
* configure: Regenerate.
@
text
@d162 1
d530 3
@


1.100
log
@	* Makefile.am (ALL_EMULATIONS): Add ei386nto.o.
	(ei386nto.c): Add rule.
	* Makefile.in: Regenerate.
	* configure.tgt: Add i[3456]86-*-nto-qnx*.
	* emulparams/i386nto.sh: New file.
@
text
@d255 2
d290 2
d947 6
d956 4
d985 6
d995 5
@


1.99
log
@2002-05-29  Matt Thomas  <matt@@3am-software.com>
            Jason Thorpe  <thorpej@@wasabisystems.com>

* Makefile.am (ALL_EMULATIONS): Add eelf32vax.o and evaxnbsd.o.
(eelf32vax.c)
(evaxnbsd.c): New rules.
* Makefile.in: Regenerate.
* configure.tgt (vax-*-netbsdelf*)
(vax-*-netbsdaout*)
(vax-*-netbsd*): New targets.
* emulparams/elf32vax.sh: New file.
* emulparams/vaxnbsd.sh: New file.
@
text
@d211 1
d799 3
@


1.98
log
@Add DLX target
@
text
@d174 1
d275 1
d518 3
d1017 3
@


1.97
log
@Install new elf_chaos.sc script.
@
text
@d149 1
d506 3
@


1.96
log
@bfd:
* config.bfd (armeb-*-netbsdelf*): New target.

ld:
* Makefile.am (ALL_EMULATIONS): Add earmelfb_nbsd.o.
(earmelfb_nbsd.c): New rule.
* Makefile.in: Regenerate.
* configure.tgt (armeb-*-netbsdelf*): New target.
(arm-*-netbsdelf*): Add armelfb_nbsd to targ_extra_emuls.
(arm-*-netbsd*): Likewise.
* emulparams/armelfb_nbsd.sh: New file.
@
text
@d681 1
a681 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
@


1.95
log
@
	* Makefile.am: Add new emulations avr1, avr2, avr3, avr4, avr5.
	* Makefile.in: Regenerate.
	* configure.tgt (avr-*-*): Add avr[1-5] to targ_extra_emuls.
@
text
@d123 1
d402 6
@


1.94
log
@Honour DESTDIR
@
text
@d134 5
d451 20
@


1.93
log
@	* Makefile.am (ALL_EMULATIONS): Add elf32ppcwindiss.o.
	(eelf32ppcwindiss.c): New target.
	* Makefile.in: Regenerated.
	* configure.tgt: Add support for powerpc-*-windiss.
	* emulparams/elf32ppcwindiss.sh: New file.
@
text
@d1130 1
a1130 1
	$(mkinstalldirs) $(bindir) $(tooldir)/bin
d1134 1
a1134 1
	    $(LIBTOOL)  --mode=install $(INSTALL_PROGRAM) $$p $(bindir)/`echo $$p|sed -e 's/$(EXEEXT)$$//' -e 's/-new//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
d1139 3
a1141 3
	  rm -f $(tooldir)/bin/ld$(EXEEXT); \
	  ln $(bindir)/$$n$(EXEEXT) $(tooldir)/bin/ld$(EXEEXT) >/dev/null 2>/dev/null \
	  || $(LIBTOOL) --mode=install $(INSTALL_PROGRAM) ld-new$(EXEEXT) $(tooldir)/bin/ld$(EXEEXT); \
d1145 1
a1145 1
	$(mkinstalldirs) $(scriptdir)/ldscripts
d1147 1
a1147 1
	  $(INSTALL_DATA) $$f $(scriptdir)/$$f ; \
@


1.92
log
@	* Makefile.am (mpw): New maintainer mode rule to make mpw-*.c files.
	* Makefile.in: Regenerate.
	* mpw-elfmips.c: Delete.
	* mpw-eppcmac.c: Delete.
	* mpw-esh.c: Delete.
	* mpw-idtmips.c: Delete.
@
text
@d166 1
d544 2
@


1.91
log
@	* dep-in.sed: Cope with absolute paths.
	* Makefile.am (dep.sed): Subst TOPDIR and BFDDIR.
	Run "make dep-am".
	* Makefile.in: Regenerate.
@
text
@d1205 23
@


1.90
log
@	* Makefile.am: Run "make dep-am".
	* Makefile.in: Regenerate.
@
text
@d1184 3
a1186 1
		-e 's!@@SRCDIR@@!$(srcdir)!'
d1270 1
a1270 1
  ../bfd/libcoff.h deffile.h pe-dll.h
d1276 5
a1280 4
ldlex.o: ldlex.c ../bfd/bfd.h $(INCDIR)/symcat.h sysdep.h \
  config.h $(INCDIR)/fopen-same.h $(INCDIR)/safe-ctype.h \
  ld.h $(INCDIR)/bin-bugs.h ldmisc.h ldexp.h ldlang.h \
  ldgram.h ldfile.h ldlex.h ldmain.h $(INCDIR)/libiberty.h
@


1.89
log
@Add AIX 64 shared library support and emulation layer for binutils
@
text
@d1218 2
a1219 1
  ldmisc.h ldexp.h ldgram.h ldlang.h $(INCDIR)/libiberty.h
d1229 1
a1229 1
  ldgram.h ldexp.h ldlang.h ldlex.h ldmisc.h ldctor.h \
d1235 1
a1235 1
  ldmain.h ldmisc.h ldwrite.h ldgram.h ldexp.h ldlang.h \
d1276 2
a1277 2
  ld.h $(INCDIR)/bin-bugs.h ldgram.h ldmisc.h ldexp.h \
  ldlang.h ldfile.h ldlex.h ldmain.h $(INCDIR)/libiberty.h
@


1.88
log
@2002-02-18  David O'Brien  <obrien@@FreeBSD.org>
	* Makefile.am: Add new files earmelf_fbsd, eelf32ppc_fbsd,
	eelf_i386_fbsd, eelf64_ia64_fbsd, eelf_x86_64_fbsd, eelf64_sparc_fbsd,
	and eelf64alpha_fbsd.

(left this out of last patch)
@
text
@d356 6
@


1.87
log
@Contribute sh64-elf.
2002-01-24  Alexandre Oliva  <aoliva@@redhat.com>
* emulparams/shelf32.sh (STACK_ADDR): Define as formerly defined
in OTHER_RELOCATABLE_SECTIONS.
2002-01-18  Alexandre Oliva  <aoliva@@redhat.com>
* emulparams/shelf32.sh (STACK_ADDR): Define.
(OTHER_RELOCATABLE_SECTIONS): Renamed to...
(OTHER_SECTIONS): this.	 Removed stack settings.
* emulparams/shelf64.sh (OTHER_RELOCATABLE_SECTIONS): Do not set.
(OTHER_SECTIONS): Reset after sourcing shelf32.sh.
2001-03-12  DJ Delorie	<dj@@redhat.com>
* emultempl/sh64elf.em (sh64_elf_$_before_allocation): Disable
relaxing if any shmedia or mixed sections are found.
2001-03-07  DJ Delorie	<dj@@redhat.com>
* emultempl/sh64elf.em (sh64_elf_before_allocation): Pass f to
einfo.	Gracefully decline to output to non-elf formats.
2001-03-06  Hans-Peter Nilsson	<hpn@@redhat.com>
* emulparams/shelf64.sh (OTHER_RELOCATING_SECTIONS) <.stack>:
Default to _end aligned to next multiple of 0x40000, plus 0x40000.
* emulparams/shelf32.sh: Ditto.
2001-01-14  Hans-Peter Nilsson	<hpn@@cygnus.com>
* emulparams/shelf32.sh (OTHER_RELOCATING_SECTIONS): Tweak
comment.
2001-01-10  Ben Elliston  <bje@@redhat.com>
* emulparams/shelf32.sh (OTHER_RELOCATING_SECTIONS): Avoid
non-portable shell constructs. From Hans-Peter Nilsson.
2001-01-09  Hans-Peter Nilsson	<hpn@@cygnus.com>
* emulparams/shelf64.sh (EXTRA_EM_FILE): Define empty.
* Makefile.am (eshelf64.c, eshlelf64.c, eshlelf32.c): Adjust
dependencies to the shell script include chain.
* Makefile.in: Regenerate.
2001-01-06  Hans-Peter Nilsson	<hpn@@cygnus.com>
* emultempl/sh64elf.em: Update and tweak comments.
(sh64_elf_${EMULATION_NAME}_after_allocation): Always allocate and
make a .cranges section SEC_IN_MEMORY.
2000-12-30  Hans-Peter Nilsson	<hpn@@cygnus.com>
* emultempl/sh64elf.em
(sh64_elf_${EMULATION_NAME}_before_allocation): Don't stop when
.cranges section found to be necessary; continue and set stored
section contents flags for sections with non-mixed contents.
Use a struct sh64_section_data container and sh64_elf_section_data
to store contents-type flags.
Remove unused update of "isec".
(sh64_elf_${EMULATION_NAME}_after_allocation): Only process
sections marked SHF_SH5_ISA32_MIXED.  Use sh64_elf_section_data to
access contents-type flags.  Assert that the associated container
is initialized.	 Use that container, not elf_gp_size, to hold size
of linker-generated cranges contents.
2000-12-18  Hans-Peter Nilsson	<hpn@@cygnus.com>
* emultempl/sh64elf.em
(sh64_elf_${EMULATION_NAME}_before_allocation): Exit early if
there's already a .cranges section.  When section flag difference
is found, don't NULL-check cranges a second time.  Tweak comments.
(sh64_elf_${EMULATION_NAME}_after_allocation): Use size after
merging, not max size, as size of ld-generated .cranges contents.
Don't set ELF section flags in output section.	When checking for
needed .cranges descriptors, don't use a variable; compare
incoming ELF section flags directly to SHF_SH5_ISA32_MIXED.  Tweak
comments.
2000-12-18  Hans-Peter Nilsson	<hpn@@cygnus.com>
* emultempl/sh64elf.em: New file.
* Makefile.am (eshelf32.c, eshlelf32.c): Adjust dependencies.
* Makefile.in: Regenerate.
* emulparams/shelf32.sh (OUTPUT_FORMAT): Only set if not set.
(OTHER_RELOCATING_SECTIONS): Ditto.
(EXTRA_EM_FILE): New, set to sh64elf if not set.
* emulparams/shlelf32.sh: Stub out all settings except
OUTPUT_FORMAT.	Source shelf32.sh.
* emulparams/shelf64.sh: Similar, but also keep ELF_SIZE and
OTHER_RELOCATING_SECTIONS.
(OTHER_RELOCATING_SECTIONS): Remove .cranges.
* emulparams/shlelf64.sh: Stub out all settings except
OUTPUT_FORMAT.	Source shelf64.sh.
2000-12-15  Hans-Peter Nilsson	<hpn@@cygnus.com>
* emulparams/shelf64.sh (OTHER_RELOCATING_SECTIONS): Include
.cranges section.
(DATA_START_SYMBOLS): Define, provide ___data.
(OTHER_READONLY_SYMBOLS): Define, provide ___rodata and align to 8
for consecutive .data section.
(OTHER_GOT_SECTIONS): Define, align to 8 for consecutive .bss
section after .data section.
* emulparams/shlelf64.sh: Ditto.
* emulparams/shelf32.sh: Ditto.
(ALIGNMENT): Define to 8.
* emulparams/shelf32.sh: Ditto.
2000-12-12  Hans-Peter Nilsson	<hpn@@cygnus.com>
* configure.tgt (sh64-*-elf*): Assign targ_extra_libpath to get
built-in linker scripts.
2000-11-30  Hans-Peter Nilsson	<hpn@@cygnus.com>
* emulparams/shlelf64.sh: New.
* emulparams/shelf64.sh: New.
* configure.tgt (sh64-*-elf*): Add shelf64 and shlelf64 to
targ_extra_emuls.
* Makefile.am: Add support for shlelf64 and shelf64.
* Makefile.in: Regenerate.
2000-11-29  Hans-Peter Nilsson	<hpn@@cygnus.com>
* configure.tgt (sh64-*-elf*): Add shelf as default.
Add shlelf to targ_extra_emuls.
2000-11-24  Hans-Peter Nilsson	<hpn@@cygnus.com>
* emulparams/shelf32.sh: New file.
* emulparams/shlelf32.sh: New file.
* Makefile.am: Add support for shlelf32 and shelf32.
* configure.tgt: Map sh64-*-elf* to shlelf32 and shelf32.
* Makefile.in: Regenerate.
@
text
@d120 1
d163 1
d170 1
d274 1
d278 1
d281 1
d283 1
d375 5
d547 4
d572 4
d591 5
d602 4
d632 4
d642 4
@


1.87.2.1
log
@Missed this in last commit.
@
text
@a119 1
	earmelf_fbsd.o \
a161 1
	eelf32ppc_fbsd.o \
a167 1
	eelf_i386_fbsd.o \
a270 1
	eelf64_ia64_fbsd.o \
a273 1
	eelf_x86_64_fbsd.o \
a275 1
	eelf64_sparc_fbsd.o \
a276 1
	eelf64alpha_fbsd.o \
a367 5
earmelf_fbsd.c: $(srcdir)/emulparams/armelf_fbsd.sh \
  $(srcdir)/emulparams/armelf.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/armelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armelf_fbsd "$(tdir_armelf_fbsd)"
a534 4
eelf32ppc_fbsd.c: $(srcdir)/emulparams/elf32ppc_fbsd.sh \
  $(srcdir)/emulparams/elf32ppc.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ppc_fbsd "$(tdir_elf32ppc_fbsd)"
a555 4
eelf64alpha_fbsd.c: $(srcdir)/emulparams/elf64alpha_fbsd.sh \
  $(srcdir)/emulparams/elf64alpha.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64alpha_fbsd "$(tdir_elf64alpha_fbsd)"
a570 5
eelf64_ia64_fbsd.c: $(srcdir)/emulparams/elf64_ia64_fbsd.sh \
  $(srcdir)/emulparams/elf64_ia64.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_ia64_fbsd "$(tdir_elf64_ia64_fbsd)"
a576 4
eelf64_sparc_fbsd.c: $(srcdir)/emulparams/elf64_sparc_fbsd.sh \
  $(srcdir)/emulparams/elf64_sparc.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64_sparc_fbsd "$(tdir_elf64_sparc_fbsd)"
a602 4
eelf_x86_64_fbsd.c: $(srcdir)/emulparams/elf_x86_64_fbsd.sh \
  $(srcdir)/emulparams/elf_x86_64.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_x86_64_fbsd "$(tdir_elf_x86_64_fbsd)"
a608 4
eelf_i386_fbsd.c: $(srcdir)/emulparams/elf_i386_fbsd.sh \
  $(srcdir)/emulparams/elf_i386.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf_i386_fbsd "$(tdir_elf_i386_fbsd)"
@


1.87.2.2
log
@Merge from mainline.
@
text
@d1178 1
a1178 3
		-e 's!@@BFDDIR@@!$(BFDDIR)!'	\
		-e 's!@@SRCDIR@@!$(srcdir)!'	\
		-e 's!@@TOPDIR@@!'`echo $(srcdir) | sed -e s,/ld$$,,`'!'
d1261 1
a1261 1
  $(BFDDIR)/libcoff.h deffile.h pe-dll.h
d1267 4
a1270 5
ldlex.o: ldlex.c $(INCDIR)/ansidecl.h ../bfd/bfd.h \
  $(INCDIR)/symcat.h sysdep.h config.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/safe-ctype.h ld.h $(INCDIR)/bin-bugs.h ldgram.h \
  ldmisc.h ldexp.h ldlang.h ldfile.h ldlex.h ldmain.h \
  $(INCDIR)/libiberty.h
@


1.87.2.3
log
@Merge from mainline
@
text
@a1198 23
@@MAINT@@.PHONY: mpw
@@MAINT@@mpw: $(srcdir)/mpw-ei386go32.c $(srcdir)/mpw-elfmips.c \
@@MAINT@@	$(srcdir)/mpw-em68kcoff.c $(srcdir)/mpw-eppcmac.c \
@@MAINT@@	$(srcdir)/mpw-esh.c $(srcdir)/mpw-idtmips.c
@@MAINT@@
@@MAINT@@$(srcdir)/mpw-ei386go32.c: ei386go32.c
@@MAINT@@	$(srcdir)/../move-if-change $< $@@
@@MAINT@@
@@MAINT@@$(srcdir)/mpw-elfmips.c: eelf32ebmip.c
@@MAINT@@	$(srcdir)/../move-if-change $< $@@
@@MAINT@@
@@MAINT@@$(srcdir)/mpw-em68kcoff.c: em68kcoff.c
@@MAINT@@	$(srcdir)/../move-if-change $< $@@
@@MAINT@@
@@MAINT@@$(srcdir)/mpw-eppcmac.c: eppcmacos.c
@@MAINT@@	$(srcdir)/../move-if-change $< $@@
@@MAINT@@
@@MAINT@@$(srcdir)/mpw-esh.c: esh.c
@@MAINT@@	$(srcdir)/../move-if-change $< $@@
@@MAINT@@
@@MAINT@@$(srcdir)/mpw-idtmips.c: emipsidt.c
@@MAINT@@	$(srcdir)/../move-if-change $< $@@

@


1.86
log
@bfd:
* config.bfd (hppa*-*-netbsd*): New target.

gas:
* configure.in (hppa-*-netbsd*): New target.
* configure: Regenerate.
* config/tc-hppa.h: Also define WARN_COMMENTS if TE_NetBSD.

ld:
* Makefile.am (ALL_EMULATIONS): Add ehppanbsd.o.
(ehppanbsd.c): New rule.
* Makefile.in: Regenerate.
* configure.tgt (hppa*-*-netbsd*): New target.
* emulparams/hppalinux.sh: Add comment to check other files
that source this file it is modified, and list which
files that do.
* emulparams/hppanbsd.sh: New file.
@
text
@d240 2
d271 2
d847 8
d875 9
@


1.85
log
@Add support for OpenRISC 32-bit embedded processor
@
text
@d187 1
d666 5
@


1.84
log
@	* Makefile.am (install): Depend on install-info.
	* Makefile.in: Regenerate.
@
text
@d227 2
d798 6
@


1.83
log
@	* Makefile.am (eelf64ppc.c, eelf64lppc.c): Depend on ppc64elf.em.
	* Makefile.in: Regenerate.
	* emulparams/elf64ppc.sh (EXTRA_EM_FILE): Define.
	* emultempl/ppc64elf.em: New file.
@
text
@d1069 4
@


1.82
log
@bfd:
* Makefile.am (BFD32_BACKENDS): Add elf32-sh-nbsd.lo.
(BFD32_BACKENDS_CFILES): Add elf32-sh-nbsd.c.
(elf32-sh-nbsd.lo): New rule.
* Makefile.in: Regenerate.
* config.bfd (sh*le-*-netbsdelf*): New target.
(sh*-*-netbsdelf*): New target.
* configure.in: Include netbsd-core.lo for native sh*-*-netbsd*.
(bfd_elf32_shnbsd_vec): New vector.
(bfd_elf32_shlnbsd_vec): New vector.
* configure: Regenerate.
* elf32-sh-nbsd.c: New file.
* targets.c: Update copyright years.
(_bfd_target_vector): Add bfd_elf32_shlnbsd_vec and
bfd_elf32_shnbsd_vec.

gas:
* configure.in (sh*le): Set cpu_type=sh and endian=little.
(sh*-*-netbsdelf*): New target.
* configure: Regenerate.
* tc-sh.h: Update copyright years.
(TARGET_FORMAT): Add version for TE_NetBSD.

ld:
* Makefile.am (ALL_EMULATIONS): Add eshelf_nbsd.o and eshlelf_nbsd.o.
(eshelf_nbsd.c): New rule.
(eshlelf_nbsd.c): New rule.
* Makefile.in: Regenerate.
* configure.tgt (sh*le-*-netbsdelf*): New target.
(sh*-*-netbsdelf*): New target.
* emulparams/shelf.sh: Document that shelf_nbsd.sh sources this file.
* ld/emulparams/shelf_nbsd.sh: New emulation.
* ld/emulparams/shlelf_nbsd.sh: New emulation.
@
text
@d536 1
a536 1
eelf64ppc.c: $(srcdir)/emulparams/elf64ppc.sh \
d540 1
a540 1
  $(srcdir)/emulparams/elf64ppc.sh \
@


1.81
log
@	* configure.tgt (arm-*-netbsdelf*): Add target.
	(arm-*-netbsd*): Add armelf and armelf_nbsd to targ_extra_emuls.
	* emulparams/armelf_nbsd.sh: Added.
	* Makefile.am: Add rules for earmelf_nbsd.
	* Makefile.in: Regenerate.
@
text
@d240 2
d836 9
@


1.80
log
@* config.bfd (m68*-*-netbsdelf*): New target.
(m68*-*-netbsd): Also include bfd_elf32_m68k_vec.
(m68*-*-netbsdaout*): New alias for m68*-*-netbsd.

* configure.in (m68k-*-netbsdelf*): New target.
(m68k-*-netbsd*): Also include ELF support.
(m68k-*-netbsdaout*): New alias for m68*-*-netbsd*.
* configure: Regenerate.

* Makefile.am (ALL_EMULATIONS): Add m68kelfnbsd.o.
(m68kelfnbsd.c): New rule.
* Makefile.in: Regenerate.
* configure.tgt (m68*-hp-netbsd*): Renamed to ..
(m68*-*-netbsd*4k*): .. this.
(m68*-*-netbsdelf*): New target.
(m68*-*-netbsd*): Also include ELF support.
(m68*-*-netbsdaout*): New alias for m68*-*-netbsd*.
* emulparams/m68kelfnbsd.sh: New emulation.
@
text
@d121 1
d363 5
@


1.79
log
@        * Makefile.am: Add rules for eelf64alpha_nbsd.
        * Makefile.in: Regenerate.
        * configure.tgt (alpha*-*-netbsd*): Set
        targ_emul to elf64alpha_nbsd.
        * emulparams/elf64alpha_nbsd.sh: Added.
@
text
@d210 1
d731 5
@


1.78
log
@Index: bfd/ChangeLog
2001-12-07  Geoffrey Keating  <geoffk@@redhat.com>
	    Richard Henderson  <rth@@redhat.com>
	    Corinna Vinschen  <vinschen@@redhat.com>

	* Makefile.am: Add support for xstormy16.
	* archures.c: Add support for xstormy16.
	* config.bfd: Add support for xstormy16.
	* configure.in: Add support for xstormy16.
	* reloc.c: Add support for xstormy16.
	* targets.c: Add support for xstormy16.
	* cpu-xstormy16.c: New file.
	* elf32-xstormy16.c: New file.
	* Makefile.in: Regenerated.
	* bfd-in2.h: Regenerated.
	* configure: Regenerated.
	* libbfd.h: Regenerated.

Index: binutils/ChangeLog
2001-12-07  Geoffrey Keating  <geoffk@@redhat.com>

	* readelf.c (guess_is_rela): Add support for stormy16.
	(dump_relocations): Likewise.
	(get_machine_name): Likewise.

Index: gas/ChangeLog
2001-12-07  Geoffrey Keating  <geoffk@@redhat.com>
	    Richard Henderson  <rth@@redhat.com>

	* configure.in: Add support for xstormy16.
	* configure: Regenerated.
	* Makefile.am: Add support for xstormy16.
	* Makefile.in: Regenerated.
	* config/tc-xstormy16.c: New file.
	* config/tc-xstormy16.h: New file.

Index: gas/testsuite/ChangeLog
2001-12-07  Geoffrey Keating  <geoffk@@redhat.com>
	    matthew green  <mrg@@redhat.com>

	* gas/xstormy16/allinsn.d: New file.
	* gas/xstormy16/allinsn.exp: New file.
	* gas/xstormy16/allinsn.s: New file.
	* gas/xstormy16/allinsn.sh: New file.
	* gas/xstormy16/gcc.d: New file.
	* gas/xstormy16/gcc.s: New file.
	* gas/xstormy16/gcc.sh: New file.
	* gas/xstormy16/reloc-1.d: New file.
	* gas/xstormy16/reloc-1.s: New file.
	* gas/xstormy16/reloc-2.d: New file.
	* gas/xstormy16/reloc-2.s: New file.

Index: ld/ChangeLog
2001-12-07  Geoffrey Keating  <geoffk@@redhat.com>
	    Richard Henderson  <rth@@redhat.com>

	* Makefile.am: Add support for xstormy16.
	* configure.tgt: Add support for xstormy16.
	* Makefile.in: Regenerate.
	* emulparams/elf32xstormy16.sh: New file.
	* scripttempl/xstormy16.sc: New file.

Index: opcodes/ChangeLog
2001-12-07  Geoffrey Keating  <geoffk@@redhat.com>

	* Makefile.am: Add support for xstormy16.
	* Makefile.in: Regenerate.
	* configure.in: Add support for xstormy16.
	* configure: Regenerate.
	* disassemble.c: Add support for xstormy16.
	* xstormy16-asm.c: New generated file.
	* xstormy16-desc.c: New generated file.
	* xstormy16-desc.h: New generated file.
	* xstormy16-dis.c: New generated file.
	* xstormy16-ibld.c: New generated file.
	* xstormy16-opc.c: New generated file.
	* xstormy16-opc.h: New generated file.

Index: include/ChangeLog
2001-12-07  Geoffrey Keating  <geoffk@@redhat.com>

	* dis-asm.h (print_insn_xstormy16): Declare.

Index: include/elf/ChangeLog
2001-12-07  Geoffrey Keating  <geoffk@@redhat.com>
	    Richard Henderson  <rth@@redhat.com>

	* common.h (EM_XSTORMY16): Define.
	* xstormy16.h: New file.
@
text
@d266 1
d540 4
@


1.77
log
@Remove eaixppc64 from Makefile.am
@
text
@d163 1
d440 4
@


1.76
log
@	* Makefile.am (CONFIG_STATUS_DEPENDENCIES): Define.
	(config.status): Delete rule.
	Add extra dependencies to cover sourced emulparams files.
	* Makefile.in: Regenerate.

	* scripttempl/elf.sc: Order <section>, <section>.* and
	corresponding linkonce sections as seen in input files.
	Formatting fixes.  Zero vma of all sections if not relocating.
	(STACK): Define and insert if STACK_ADDR defined.
	(OTHER_RELOCATING_SECTIONS): Delete.
	(OTHER_END_SYMBOLS): Define.
	(OTHER_READONLY_SECTIONS): Always insert, not just when relocating.
	(OTHER_READWRITE_SECTIONS): Likewise.
	(OTHER_GOT_SECTIONS): Likewise.
	(OTHER_SDATA_SECTIONS): Likewise.
	(OTHER_BSS_SECTIONS): Likewise.
	* scripttempl/elfi370.sc (OTHER_READONLY_SECTIONS): Likewise.
	(OTHER_READWRITE_SECTIONS): Likewise.
	* scripttempl/nw.sc (OTHER_READONLY_SECTIONS): Likewise.
	(OTHER_READWRITE_SECTIONS): Likewise

	* emulparams/armelf.sh (OTHER_RELOCATING_SECTIONS): Delete.
	(STACK_ADDR): Define.
	* emulparams/armelf_oabi.sh: As for armelf.sh.
	* emulparams/elf32mcore.sh: As for armelf.sh.
	* emulparams/h8300elf.sh: As for armelf.sh.
	* emulparams/mn10200.sh: As for armelf.sh.
	* emulparams/shelf.sh: As for armelf.sh.

	* emulparams/elf32fr30.sh (OTHER_RELOCATING_SECTIONS): Delete.
	(OTHER_END_SYMBOLS): Define.
	* emulparams/m32relf.sh: As for elf32fr30.sh.
	* emulparams/h8300helf.sh: As for elf32fr30.sh.
	* emulparams/h8300self.sh: As for elf32fr30.sh.

	* emulparams/criself.sh (OTHER_READONLY_SECTIONS): Protect symbol
	defines with RELOCATING test.
	(OTHER_SDATA_SECTIONS): Likewise.
	(OTHER_RELOCATING_SECTIONS): Delete, replacing with..
	(OTHER_END_SYMBOLS): ..this.
	* emulparams/crislinux.sh: As for criself.sh.

	* emulparams/elf32bmipn32.sh (OTHER_SDATA_SECTIONS): Zero vma
	if not relocating.
	(OTHER_RELOCATING_SECTIONS): Delete, replacing with..
	(OTHER_SECTIONS): ..this.  Zero vma if not relocating.  Order
	normal and linkonce sections as seen in input files.
	* emulparams/elf32bmip.sh (DATA_ADDR): Don't define if EMBEDDED.
	(TEXT_DYNAMIC): Likewise.
	(INITIAL_READONLY_SECTIONS): Zero vma if not relocating.
	(OTHER_SDATA_SECTIONS): Likewise.
	* emulparams/elf32ppc.sh (OTHER_READWRITE_SECTIONS): Likewise.
	* emulparams/shlelf_linux.sh (OTHER_READWRITE_SECTIONS): Likewise.
	* emulparams/elf64alpha.sh (OTHER_READONLY_SECTIONS): Likewise.
	* emulparams/hppalinux.sh (OTHER_READONLY_SECTIONS): Likewise.
	* emulparams/elf64_aix.sh (OTHER_GOT_SECTIONS): Likewise.
	(OTHER_PLT_RELOC_SECTIONS): Likewise.
	(OTHER_READONLY_SECTIONS): Likewise.  Order normal and linkonce
	sections as seen in input files.
	* emulparams/elf64_ia64.sh: As for emulparams/elf64_aix.sh.
	* emulparams/hppa64linux.sh (OTHER_READONLY_SECTIONS): Zero vma
	if not relocating.
	(OTHER_READWRITE_SECTIONS, OTHER_BSS_SECTIONS): Likewise.
	(OTHER_BSS_END_SYMBOLS): Merge from elf64hppa.sh.
	* emulparams/elf64mmix.sh (OTHER_RELOCATING_SECTIONS): Delete.
	(OTHER_SECTIONS): Instead, use this..
	(OTHER_END_SYMBOLS): ..and this.

	* emulparams/elf32b4300.sh: Source elf32bmip.sh, remove duplicates.
	* emulparams/elf32bsmip.sh: Likewise.
	* emulparams/elf32btsmip.sh: Likewise.
	* emulparams/elf32ebmip.sh: Likewise.
	* emulparams/elf32lmip.sh: Likewise.
	* emulparams/elf32elmip.sh: Source elf32lmip.sh, remove duplicates.
	* emulparams/elf32lsmip.sh: Likewise.
	* emulparams/elf32ltsmip.sh: Source elf32btsmip.sh, remove duplicates.
	* emulparams/elf32l4300.sh: Source elf32b4300.sh, remove duplicates.
	* emulparams/elf64bmip.sh: Source elf32bmipn32.sh, remove duplicates.
	* emulparams/elf64btsmip.sh: Likewise.
	* emulparams/elf64ltsmip.sh: Source elf64btsmip.sh, remove duplicates.
	* emulparams/elf32lppc.sh: Source elf32ppc.sh, remove duplicates.
	* emulparams/elf32ppclinux.sh: Likewise.
	* emulparams/elf32ppcsim.sh: Likewise.
	* emulparams/elf32lppcsim.sh: Source elf32lppc.sh, remove duplicates.
	* emulparams/elf64hppa.sh: Source hppa64linux.sh, remove duplicates.
	* emulparams/h8300helf.sh: Source h8300elf.sh, remove duplicates.
	* emulparams/h8300self.sh: Likewise.
	* emulparams/mn10300.sh: Source mn10200.sh, remove duplicates.
	* emulparams/sh.sh: Comment.
	* emulparams/shl.sh: Source sh.sh, remove duplicates.
	* emulparams/shlelf.sh: Source shelf.sh, remove duplicates.
	* emulparams/shelf_linux.sh: Source shlelf_linux.sh, remove duplicates.
@
text
@a272 1
	eaixppc64.o \
a335 3
eaixppc64.c: $(srcdir)/emulparams/aixppc64.sh \
  $(srcdir)/emultempl/aix.em $(srcdir)/scripttempl/aix.sc ${GEN_DEPENDS}
	${GENSCRIPTS} aixppc64 "$(tdir_aixppc64)"
@


1.75
log
@	* Makefile.am (GENSCRIPTS): Quote ${exec_prefix}.
	* Makefile.in: Regenerate.
@
text
@d462 1
d469 1
d473 1
d477 1
d481 1
d485 1
d492 1
d496 1
d500 1
d504 1
d508 1
d518 1
d522 1
d529 1
d539 1
d556 1
d568 1
d572 1
d612 1
d616 1
d764 1
d810 1
d817 1
d821 1
d1009 1
a1009 2
config.status: $(srcdir)/configure $(srcdir)/configure.host $(srcdir)/configure.tgt
	$(SHELL) ./config.status --recheck
@


1.74
log
@	* ld.texinfo: Use @@command for commands, @@option for options.
	* Makefile.am (POD2MAN): Use 'GNU Development Tools' for
	the page man title.
	* Makefile.in: Rebuild.
@
text
@d330 1
a330 1
GENSCRIPTS = $(SHELL) $(srcdir)/genscripts.sh ${srcdir} ${libdir} ${exec_prefix} @@host@@ @@target@@ @@target_alias@@ "@@EMULATION_LIBPATH@@" "@@NATIVE_LIB_DIRS@@"
@


1.73
log
@Add MMIX support
@
text
@d49 2
a50 1
POD2MAN = pod2man --center="GNU" --release="binutils-$(VERSION)" --section=1
@


1.72
log
@	* ldver.h (ld_program_version): Remove declaration.
	* lexsup.c (parse_args): Move printing of copyright message..
	* ldver.c (ldversion): .. to here.
	Use BFD_VERSION_STRING in place of BFD_VERSION.
	(ld_program_version): Remove.
	* Makefile.am (Makefile): Depend on bfd/configure.in
	Run "make dep-am"
	* Makefile.in: Regenerate.
@
text
@d268 2
d542 8
@


1.71
log
@	* Makefile.am: Update dependencies with "make dep-am".
	* Makefile.in: Regenerate.
@
text
@d1015 2
d1063 3
a1065 3
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/safe-ctype.h ld.h $(INCDIR)/bin-bugs.h ldexp.h \
  ldlang.h ldmisc.h ldgram.h ldmain.h ldctor.h
d1067 3
a1069 3
  sysdep.h config.h $(INCDIR)/fopen-same.h ld.h $(INCDIR)/bin-bugs.h \
  ldmisc.h ldexp.h ldlang.h ldfile.h ldemul.h ldmain.h \
  ldemul-list.h
d1071 3
a1073 3
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/bfdlink.h \
  ld.h $(INCDIR)/bin-bugs.h ldmain.h ldmisc.h ldexp.h \
  ldgram.h ldlang.h $(INCDIR)/libiberty.h
d1075 4
a1078 4
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/safe-ctype.h ld.h $(INCDIR)/bin-bugs.h ldmisc.h \
  ldexp.h ldlang.h ldfile.h ldmain.h ldgram.h ldlex.h \
  ldemul.h $(INCDIR)/libiberty.h
d1080 5
a1084 5
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/obstack.h $(INCDIR)/bfdlink.h \
  ld.h $(INCDIR)/bin-bugs.h ldmain.h ldgram.h ldexp.h \
  ldlang.h ldlex.h ldmisc.h ldctor.h ldfile.h ldemul.h \
  $(INCDIR)/fnmatch.h $(INCDIR)/demangle.h
d1086 5
a1090 5
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/safe-ctype.h \
  $(INCDIR)/libiberty.h $(INCDIR)/progress.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h ld.h $(INCDIR)/bin-bugs.h ldmain.h \
  ldmisc.h ldwrite.h ldgram.h ldexp.h ldlang.h ldlex.h \
  ldfile.h ldemul.h ldctor.h
d1092 4
a1095 3
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/libiberty.h \
  $(INCDIR)/demangle.h ld.h $(INCDIR)/bin-bugs.h ldmisc.h \
  ldexp.h ldlang.h ldgram.h ldlex.h ldmain.h ldfile.h
d1097 3
a1099 2
  sysdep.h config.h $(INCDIR)/fopen-same.h ld.h $(INCDIR)/bin-bugs.h \
  ldver.h ldexp.h ldlang.h ldfile.h ldemul.h ldmain.h
d1101 3
a1103 3
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/libiberty.h ld.h $(INCDIR)/bin-bugs.h ldexp.h \
  ldlang.h ldwrite.h ldmisc.h ldgram.h ldmain.h
d1105 7
a1111 6
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/libiberty.h \
  $(INCDIR)/safe-ctype.h $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h \
  ldmain.h ldmisc.h ldexp.h ldlang.h ldgram.h ldlex.h \
  ldfile.h ldver.h ldemul.h $(INCDIR)/demangle.h
mri.o: mri.c ../bfd/bfd.h $(INCDIR)/ansidecl.h sysdep.h \
  config.h $(INCDIR)/fopen-same.h ld.h $(INCDIR)/bin-bugs.h \
d1114 3
a1116 3
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/libiberty.h ld.h $(INCDIR)/bin-bugs.h ldmain.h \
  ldmisc.h ldexp.h ldlang.h
d1118 5
a1122 5
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/libiberty.h $(INCDIR)/safe-ctype.h ld.h $(INCDIR)/bin-bugs.h \
  ldexp.h ldlang.h ldwrite.h ldmisc.h ldgram.h ldmain.h \
  ldfile.h ldemul.h $(INCDIR)/coff/internal.h ../bfd/libcoff.h \
  deffile.h pe-dll.h
d1124 8
a1131 8
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/bfdlink.h \
  ld.h $(INCDIR)/bin-bugs.h ldexp.h ldver.h ldlang.h \
  ldfile.h ldemul.h ldmisc.h ldmain.h mri.h ldctor.h \
  ldlex.h
ldlex.o: ldlex.c ../bfd/bfd.h sysdep.h config.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/safe-ctype.h ld.h $(INCDIR)/bin-bugs.h ldgram.h \
  ldmisc.h ldexp.h ldlang.h ldfile.h ldlex.h ldmain.h \
  $(INCDIR)/libiberty.h
d1133 3
a1135 3
  $(INCDIR)/safe-ctype.h ../bfd/bfd.h sysdep.h config.h \
  $(INCDIR)/fopen-same.h ld.h $(INCDIR)/bin-bugs.h ldmisc.h \
  deffile.h
@


1.70
log
@2001-09-12  H.J. Lu  <hjl@@gnu.org>

	* Makefile.am (ALL_EMULATIONS): Move eelf64ppc.o and
	eelf64lppc.o to ...
	(ALL_64_EMULATIONS): Here.
	* Makefile.in: Regenerated.
@
text
@d1062 2
a1063 2
  ld.h $(INCDIR)/bin-bugs.h ldexp.h ldlang.h ldmisc.h \
  ldgram.h ldmain.h ldctor.h
d1074 3
a1076 2
  ld.h $(INCDIR)/bin-bugs.h ldmisc.h ldexp.h ldlang.h \
  ldfile.h ldmain.h ldgram.h ldlex.h ldemul.h $(INCDIR)/libiberty.h
d1079 4
a1082 3
  $(INCDIR)/obstack.h $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h \
  ldmain.h ldgram.h ldexp.h ldlang.h ldlex.h ldmisc.h \
  ldctor.h ldfile.h ldemul.h $(INCDIR)/fnmatch.h $(INCDIR)/demangle.h
d1084 5
a1088 5
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/libiberty.h \
  $(INCDIR)/progress.h $(INCDIR)/bfdlink.h $(INCDIR)/filenames.h \
  ld.h $(INCDIR)/bin-bugs.h ldmain.h ldmisc.h ldwrite.h \
  ldgram.h ldexp.h ldlang.h ldlex.h ldfile.h ldemul.h \
  ldctor.h
d1102 3
a1104 3
  $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h ldmain.h \
  ldmisc.h ldexp.h ldlang.h ldgram.h ldlex.h ldfile.h \
  ldver.h ldemul.h $(INCDIR)/demangle.h
d1114 3
a1116 3
  $(INCDIR)/libiberty.h ld.h $(INCDIR)/bin-bugs.h ldexp.h \
  ldlang.h ldwrite.h ldmisc.h ldgram.h ldmain.h ldfile.h \
  ldemul.h $(INCDIR)/coff/internal.h ../bfd/libcoff.h \
d1124 3
a1126 2
  ld.h $(INCDIR)/bin-bugs.h ldgram.h ldmisc.h ldexp.h \
  ldlang.h ldfile.h ldlex.h ldmain.h $(INCDIR)/libiberty.h
d1128 3
a1130 2
  ../bfd/bfd.h sysdep.h config.h $(INCDIR)/fopen-same.h \
  ld.h $(INCDIR)/bin-bugs.h ldmisc.h deffile.h
@


1.69
log
@	* Makefile.am (ALL_EMULATIONS): Add eh8300elf.o, eh8300elf.o and
	eh8300self.o .
	(eh8300elf.c, eh8300helf.c, eh8300self.c): New targets.
	* configure.tgt (h8300-*-elf*): New case.
	* emulparams/h8300elf.sh, emulparams/h8300helf.sh: New files.
	* emulparams/h8300self.sh: New file.
	* Makefile.in: Regenerated.
@
text
@a161 2
	eelf64ppc.o \
	eelf64lppc.o \
d268 2
@


1.68
log
@	* Makefile.am (ALL_EMULATIONS): Add eelf64ppc.o and eelf64lppc.o.
	(eelf64ppc.c, eelf64lppc.c): Add make targets.
	Run "make dep-am"
	* Makefile.in: Regenerate.
	* configure.tgt: Add powerpc64 support.  Move pdp11, pjl, pj
	entries to correct alphabetical position.
	* emulparams/elf64ppc.sh: New.
	* emulparams/elf64lppc.sh: New.
@
text
@d174 3
d579 9
@


1.67
log
@        * emultempl/needrelax.em: New file.
        * emulparams/elf64_ia64.sh (EXTRA_EM_FILE): Reference it.
        * Makefile.am (eelf64_ia64.c): Depend on it.
        * Makefile.in: Rebuild.
@
text
@d162 2
d506 6
@


1.66
log
@Update dependencies with "make dep-am".
@
text
@d517 2
a518 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
@


1.65
log
@Fix dependency for em32relf.c
@
text
@d1050 1
a1050 1
  ldgram.h ldlang.h
@


1.64
log
@	* emulparams/hppa64linux.sh: New file.
	* configure.tgt: hppa*64*-*-linux* uses hppa64linux.sh
	* Makefile.am (ALL_64_EMULATIONS): Add ehppa64linux.o
	(ehppa64linux.c): Add rule to make it.
	Run "make dep-am".
	* Makefile.in: Regenerate.
@
text
@d442 1
a442 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
@


1.63
log
@Remove auot generated man pages
@
text
@d265 2
a266 1
	eaixppc64.o
d596 3
d1054 1
a1054 1
  ldfile.h ldmain.h ldgram.h ldlex.h ldemul.h
d1102 1
a1102 1
  ldlang.h ldfile.h ldlex.h ldmain.h
@


1.62
log
@	* Makefile.am (ecriself.c, ed10velf.c, ei386moss.c): Depend on
	$(srcdir)/emultempl/elf32.em, not $(srcdir)/emultempl/generic.em.
	* Makefile.in: Regenerate.
@
text
@d937 2
a938 2
$(srcdir)/ld.1: $(srcdir)/ld.texinfo
	touch $(srcdir)/ld.1
d941 4
a944 3
		sed -e '/^.if n .na/d' > $(srcdir)/ld.1.T$$$$ && \
		mv -f $(srcdir)/ld.1.T$$$$ $(srcdir)/ld.1) || \
		(rm -f $(srcdir)/ld.1.T$$$$ && exit 1)
d983 2
a984 2
LDDISTSTUFF = ldgram.c ldgram.h ldlex.c
diststuff: $(LDDISTSTUFF) info
@


1.61
log
@Support for xcoff64
@
text
@d411 1
a411 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d417 1
a417 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elfd10v.sc ${GEN_DEPENDS}
d620 1
a620 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
@


1.60
log
@Improve Solaris compatability
@
text
@d264 2
a265 1
	eelf64hppa.o
d328 3
@


1.59
log
@* Makefile.am (ld.dvi): Search bfd/doc for texinfo files.
* Makefile.in: Ditto.
@
text
@d165 1
d541 3
@


1.58
log
@Add gas and ld support for openrisc
@
text
@d924 1
a924 1
	  MAKEINFO="$(MAKEINFO) -I $(srcdir) -I $(BFDDIR)/doc" $(TEXI2DVI) $(srcdir)/ld.texinfo
@


1.57
log
@2001-04-05  Steven J. Hill  <sjhill@@cotw.com>

	* Makefile.am (ALL_EMULATIONS): Add eelf32ltsmip.o.
	(ALL_64_EMULATIONS): Add eelf64btsmip.o and eelf64ltsmip.o.
	(eelf32ltsmip.c): New target.
	(eelf64btsmip.c): Likewise.
	(eelf64ltsmip.c): Likewise.
	* Makefile.in: Regenerated.

	* configure.tgt (mips*el-*-linux-gnu): Uses traditional MIPS
	target.
	(mips*-*-linux-gnu*): Likewise.

	* emulparams/elf32ltsmip.sh: New. Traditional little endian
	MIPS taget.
	* emulparams/elf64btsmip.sh: New. Traditional 64bit big endian
	target.
	* emulparams/elf64ltsmip.sh: New. Traditional 64bit little
	endian target.
@
text
@d158 1
d486 3
@


1.56
log
@Automate generate on man pages
@
text
@d148 1
d260 2
d458 3
d518 6
@


1.55
log
@Bump version to 2.11.90, fix missing dependencies in bfd/,
and run "make dep-am".
@
text
@d44 7
d909 11
@


1.54
log
@Add ia64-*-aix* configuration.
@
text
@d1032 3
a1034 3
  $(INCDIR)/getopt.h $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h \
  ldmain.h ldmisc.h ldexp.h ldlang.h ldgram.h ldlex.h \
  ldfile.h ldver.h ldemul.h $(INCDIR)/demangle.h
@


1.53
log
@Add PDP-11 support
@
text
@d245 1
d490 3
@


1.52
log
@Add s390 support
@
text
@d211 1
d687 3
@


1.51
log
@2001-02-06  Philip Blundell  <philb@@gnu.org>

	* Makefile.am: Remove mention of earmelf_linux26.
	* Makefile.in: Regenerate.
@
text
@d156 1
d246 1
d491 3
d512 3
@


1.50
log
@Allow Maciej to select weird --libdir options and still select
tooldir correctly.
@
text
@a112 1
	earmelf_linux26.o \
a333 4
earmelf_linux26.c: $(srcdir)/emulparams/armelf_linux26.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/armelf.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} armelf_linux26 "$(tdir_armelf_linux26)"
@


1.50.2.1
log
@2001-02-11  Philip Blundell  <philb@@gnu.org>

	* Makefile.am: Remove mention of earmelf_linux26.o.
	* Makefile.in: Regenerate.
	* emulparams/armelf_linux.sh (TEXT_START_ADDR): Set to 0x8000.
	* emulparams/armelf_linux26.sh: Delete.
	* configure.tgt: Remove mention of armelf_linux26 emulation.
@
text
@d113 1
@


1.50.2.2
log
@die!  die!
@
text
@d334 4
@


1.50.2.3
log
@Merge from mainline.
@
text
@a140 1
	eelf32ltsmip.o \
a247 2
	eelf64btsmip.o \
	eelf64ltsmip.o \
a443 3
eelf32ltsmip.c: $(srcdir)/emulparams/elf32ltsmip.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32ltsmip "$(tdir_elf32ltsmip)"
a494 6
eelf64btsmip.c: $(srcdir)/emulparams/elf64btsmip.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64btsmip "$(tdir_elf64btsmip)"
eelf64ltsmip.c: $(srcdir)/emulparams/elf64ltsmip.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64ltsmip "$(tdir_elf64ltsmip)"
d885 1
a885 1
	  MAKEINFO="$(MAKEINFO) -I $(srcdir) -I $(BFDDIR)/doc" $(TEXI2DVI) -I $(BFDDIR)/doc $(srcdir)/ld.texinfo
d991 1
a991 1
  ldfile.h ldmain.h ldgram.h ldlex.h ldemul.h $(INCDIR)/libiberty.h
d1016 3
a1018 3
  $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h ldmain.h \
  ldmisc.h ldexp.h ldlang.h ldgram.h ldlex.h ldfile.h \
  ldver.h ldemul.h $(INCDIR)/demangle.h
d1039 1
a1039 1
  ldlang.h ldfile.h ldlex.h ldmain.h $(INCDIR)/libiberty.h
@


1.50.2.4
log
@	* emulparams/hppa64linux.sh: New file.
	* configure.tgt: hppa*64*-*-linux* uses hppa64linux.sh
	* Makefile.am (ALL_64_EMULATIONS): Add ehppa64linux.o
	(ehppa64linux.c): Add rule to make it.
	Run "make dep-am".
	* Makefile.in: Regenerate.
@
text
@d251 1
a251 2
	eelf64hppa.o \
	ehppa64linux.o
a562 3
ehppa64linux.c: $(srcdir)/emulparams/hppa64linux.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} hppa64linux "$(tdir_hppa64linux)"
@


1.50.2.5
log
@        * emultempl/needrelax.em: New file.
        * emulparams/elf64_ia64.sh (EXTRA_EM_FILE): Reference it.
        * Makefile.am (eelf64_ia64.c): Depend on it.
        * Makefile.in: Rebuild.
@
text
@d494 1
a494 2
  $(srcdir)/emultempl/elf32.em $(srcdir)/emultempl/needrelax.em \
  $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
@


1.49
log
@Add support for x86_64-*-linux-gnu* target
@
text
@d305 1
a305 1
GENSCRIPTS = $(SHELL) $(srcdir)/genscripts.sh ${srcdir} ${libdir} @@host@@ @@target@@ @@target_alias@@ "@@EMULATION_LIBPATH@@" "@@NATIVE_LIB_DIRS@@"
@


1.48
log
@* ldlex.l (yy_create_string_buffer): Init all structure fields.

* Makefile.am (DISTCLEANFILES): Add stringify.sed.
Move 2000-11-02 Makefile.in changes to this file.
@
text
@d245 1
d503 3
@


1.47
log
@add support for embedded relocs in m68k ELF port
@
text
@d156 1
d505 3
d928 1
a928 1
DISTCLEANFILES = tdirs site.exp site.bak
@


1.46
log
@2000-09-07  H.J. Lu  <hjl@@gnu.org>

	* Makefile.am (lexsup.o): Also depend on $(INCDIR)/demangle.h.
	* Makefile.in: Rebuild.
@
text
@d618 2
a619 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
@


1.45
log
@* configure.tgt (sh-*-linux*): Added.
* Makefile.am: Added eshelf_linux and eshlelf_linux.
* Makefile.in: Rebuilt.
* emulparams/shelf_linux.sh: New file.
* emulparams/shlelf_linux.sh: New file.
@
text
@d1014 1
a1014 1
  ldfile.h ldver.h ldemul.h
@


1.44
log
@A tidy of ld/ldlang.c, and add missing Makefile dependencies
I should have added with the 2000-07-28 patch.
@
text
@d219 2
d701 6
@


1.43
log
@2000-08-10  Jason Eckhardt  <jle@@cygnus.com>

        * emulparams/elf32_i860.sh: New file.
        * configure.tgt: Recognize new target i860-stardent-{sysv4*|elf*}.
        * Makefile.am (ALL_EMULATIONS): Add eelf32_i860.o.
        (eelf32_i860.c): New rule.
        * Makefile.in: Regenerate.
@
text
@d321 2
a322 1
  $(srcdir)/emultempl/armelf.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d328 2
a329 1
  $(srcdir)/emultempl/armelf.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d332 2
a333 1
  $(srcdir)/emultempl/armelf.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
d539 2
a540 1
  $(srcdir)/emultempl/hppaelf.em $(srcdir)/scripttempl/hppaelf.sc ${GEN_DEPENDS}
d543 2
a544 1
  $(srcdir)/emultempl/hppaelf.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
@


1.42
log
@Applied Michael's Sokolov's patch to implement --embedded-relocs for m68k coff.
@
text
@d136 1
d424 3
@


1.41
log
@	* Makefile.am (ALL_EMULATIONS): Add ecrisaout.o, ecriself.o,
	ecrislinux.o.
	(ecrisaout.c, ecriself.c, ecrislinux.c): New rules.
	Regenerate dependencies.
	* Makefile.in: Rebuild.
	* configure.tgt (cris-*-*): New target.
	* emulparams/crisaout.sh, emulparams/criself.sh,
	emulparams/crislinux.sh, scripttempl/crisaout.sc: New files.
	* po/POTFILES.in, po/ld.pot: Regenerate.
@
text
@d604 1
a604 1
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/m68kcoff.sc ${GEN_DEPENDS}
@


1.40
log
@hppaelf.em: Merge from elf32.em and implement multiple linker stubs.
Makefile.am: Re-enable ehppaelf.o, add ehppalinux.o
configure.tgt: targ_emul=hppalinux for hppa*linux
@
text
@d126 3
d384 9
d961 1
a961 1
  ldemul.h ldmisc.h ldexp.h ldlang.h ldfile.h ldmain.h \
d974 2
a975 2
  ldmain.h ldgram.h ldexp.h ldlang.h ldemul.h ldlex.h \
  ldmisc.h ldctor.h ldfile.h $(INCDIR)/fnmatch.h $(INCDIR)/demangle.h
d980 1
a980 1
  ldgram.h ldexp.h ldlang.h ldemul.h ldlex.h ldfile.h \
d988 1
a988 1
  ldver.h ldemul.h ldmain.h
d995 3
a997 3
  $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h ldmain.h \
  ldmisc.h ldexp.h ldlang.h ldgram.h ldlex.h ldfile.h \
  ldver.h ldemul.h
d1008 3
a1010 3
  ldlang.h ldwrite.h ldmisc.h ldgram.h ldmain.h ldemul.h \
  $(INCDIR)/coff/internal.h ../bfd/libcoff.h deffile.h \
  pe-dll.h
d1014 1
a1014 1
  ldemul.h ldfile.h ldmisc.h ldmain.h mri.h ldctor.h \
@


1.39
log
@2000-07-01  Koundinya K  <kk@@ddeorg.soft.net>

        * configure.tgt: Add traditional mips (mips*-*-sysv4*) target.
        * emulparams/elf32btsmip.sh: New file.
        * Makefile.am: Add traditional mips target.
        * Makefile.in: Rebuild.
@
text
@d107 4
a111 1
	earmelf_oabi.o \
d114 1
a114 3
	earmaoutb.o \
	earmaoutl.o \
	earmcoff.o \
a116 1
	earm_epoc_pe.o \
d119 1
a120 1
	eavr4433.o \
a121 1
	eavrmega603.o \
d124 1
a126 1
	ed30velf.o \
d129 1
d132 1
a133 1
	eelf32_i960.o \
d136 2
d140 1
a140 2
	eelf32bmipn32.o \
	eelf32btsmip.o \
d146 1
d148 1
a149 1
	eelf32ppclinux.o \
a153 2
	eelf32fr30.o \
	eelf32mcore.o \
d164 2
d204 2
a207 2
	ens32knbsd.o \
	epc532macha.o \
d215 1
a216 1
	eshl.o \
a235 4
# The following object file has been removed from ALL_EMULATIONS
# because the BFD support is currently broken.
#	ehppaelf.o 

d240 2
a241 2
	eelf64hppa.o \
	eelf64bmip.o
d244 2
a245 2
	pe-dll.o \
	deffilep.o
d522 3
@


1.38
log
@2000-07-01  H.J. Lu  <hjl@@gnu.org>

	* Makefile.am (EXTRA_ld_new_SOURCES): Set to deffilep.y for
	automake to use YLWRAP.
	* Makefile.in: Rebuild.
@
text
@d139 1
d425 3
@


1.37
log
@Fix 2000-06-22.  grep after running dep.sed
@
text
@d737 3
@


1.36
log
@Ensure /usr/include and the like stay out of dependencies.
@
text
@d856 1
a856 1
CLEANFILES = dep.sed DEP DEP1 DEP2
d895 3
a897 1
	if grep ' /' DEP1 > /dev/null 2> /dev/null; then \
d900 1
a900 2
	  sed -f dep.sed < DEP1 > $@@; \
	  echo '# IF YOU PUT ANYTHING HERE IT WILL GO AWAY' >> $@@; \
@


1.35
log
@2000-06-21  H.J. Lu  <hjl@@gnu.org>

	* Makefile.am: Rebuild dependency.
	* Makefile.in: Rebuild.
@
text
@d895 6
a900 2
	sed -f dep.sed < DEP1 > $@@
	echo '# IF YOU PUT ANYTHING HERE IT WILL GO AWAY' >> $@@
@


1.34
log
@2000-06-20  H.J. Lu  <hjl@@gnu.org>

	* Makefile.am: Rebuild dependency.
	* Makefile.in: Rebuild.
@
text
@d930 2
a931 48
ldctor.o: ldctor.c /usr/include/bfd.h /usr/include/ansidecl.h \
  sysdep.h $(INCDIR)/ansidecl.h config.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h ldexp.h \
  ldlang.h ldmisc.h ldgram.h ldmain.h ldctor.h
ldemul.o: ldemul.c /usr/include/bfd.h /usr/include/ansidecl.h \
  sysdep.h $(INCDIR)/ansidecl.h config.h $(INCDIR)/fopen-same.h \
  ld.h $(INCDIR)/bin-bugs.h ldemul.h ldmisc.h ldexp.h \
  ldlang.h ldfile.h ldmain.h ldemul-list.h
ldexp.o: ldexp.c /usr/include/bfd.h /usr/include/ansidecl.h \
  sysdep.h $(INCDIR)/ansidecl.h config.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h ldmain.h \
  ldmisc.h ldexp.h ldgram.h ldlang.h
ldfile.o: ldfile.c /usr/include/bfd.h /usr/include/ansidecl.h \
  sysdep.h $(INCDIR)/ansidecl.h config.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h ldmisc.h \
  ldexp.h ldlang.h ldfile.h ldmain.h ldgram.h ldlex.h \
  ldemul.h
ldlang.o: ldlang.c /usr/include/bfd.h /usr/include/ansidecl.h \
  sysdep.h $(INCDIR)/ansidecl.h config.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/libiberty.h $(INCDIR)/obstack.h $(INCDIR)/bfdlink.h \
  ld.h $(INCDIR)/bin-bugs.h ldmain.h ldgram.h ldexp.h \
  ldlang.h ldemul.h ldlex.h ldmisc.h ldctor.h ldfile.h \
  $(INCDIR)/fnmatch.h $(INCDIR)/demangle.h
ldmain.o: ldmain.c /usr/include/bfd.h /usr/include/ansidecl.h \
  sysdep.h $(INCDIR)/ansidecl.h config.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/libiberty.h $(INCDIR)/progress.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/filenames.h ld.h $(INCDIR)/bin-bugs.h ldmain.h \
  ldmisc.h ldwrite.h ldgram.h ldexp.h ldlang.h ldemul.h \
  ldlex.h ldfile.h ldctor.h
ldmisc.o: ldmisc.c /usr/include/bfd.h /usr/include/ansidecl.h \
  sysdep.h $(INCDIR)/ansidecl.h config.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/libiberty.h $(INCDIR)/demangle.h ld.h $(INCDIR)/bin-bugs.h \
  ldmisc.h ldexp.h ldlang.h ldgram.h ldlex.h ldmain.h \
  ldfile.h
ldver.o: ldver.c /usr/include/bfd.h /usr/include/ansidecl.h \
  sysdep.h $(INCDIR)/ansidecl.h config.h $(INCDIR)/fopen-same.h \
  ld.h $(INCDIR)/bin-bugs.h ldver.h ldemul.h ldmain.h
ldwrite.o: ldwrite.c /usr/include/bfd.h /usr/include/ansidecl.h \
  sysdep.h $(INCDIR)/ansidecl.h config.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h ld.h $(INCDIR)/bin-bugs.h \
  ldexp.h ldlang.h ldwrite.h ldmisc.h ldgram.h ldmain.h
lexsup.o: lexsup.c /usr/include/bfd.h /usr/include/ansidecl.h \
  sysdep.h $(INCDIR)/ansidecl.h config.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/libiberty.h $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h \
  ldmain.h ldmisc.h ldexp.h ldlang.h ldgram.h ldlex.h \
  ldfile.h ldver.h ldemul.h
mri.o: mri.c /usr/include/bfd.h /usr/include/ansidecl.h \
  sysdep.h $(INCDIR)/ansidecl.h config.h $(INCDIR)/fopen-same.h \
d933 29
a961 17
  mri.h ldgram.h $(INCDIR)/libiberty.h
ldcref.o: ldcref.c /usr/include/bfd.h /usr/include/ansidecl.h \
  sysdep.h $(INCDIR)/ansidecl.h config.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h ld.h $(INCDIR)/bin-bugs.h \
  ldmain.h ldmisc.h ldexp.h ldlang.h
pe-dll.o: pe-dll.c /usr/include/bfd.h /usr/include/ansidecl.h \
  sysdep.h $(INCDIR)/ansidecl.h config.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/libiberty.h ld.h $(INCDIR)/bin-bugs.h \
  ldexp.h ldlang.h ldwrite.h ldmisc.h ldgram.h ldmain.h \
  ldemul.h $(INCDIR)/coff/internal.h ../bfd/libcoff.h \
  deffile.h pe-dll.h
ldgram.o: ldgram.c /usr/include/bfd.h /usr/include/ansidecl.h \
  sysdep.h $(INCDIR)/ansidecl.h config.h $(INCDIR)/fopen-same.h \
  $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h ldexp.h \
  ldver.h ldlang.h ldemul.h ldfile.h ldmisc.h ldmain.h \
  mri.h ldctor.h ldlex.h
ldlex.o: ldlex.c /usr/include/bfd.h /usr/include/ansidecl.h \
d963 31
a993 2
  ldgram.h ldmisc.h ldexp.h ldlang.h ldfile.h ldlex.h \
  ldmain.h
d995 2
a996 3
  /usr/include/bfd.h /usr/include/ansidecl.h sysdep.h \
  config.h $(INCDIR)/fopen-same.h ld.h $(INCDIR)/bin-bugs.h \
  ldmisc.h deffile.h
@


1.33
log
@tic54x/ibmc54xdsp target for ld.
@
text
@d930 48
a977 2
ldctor.o: ldctor.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/bfdlink.h \
d979 17
a995 2
  ldgram.h ldmain.h ldctor.h
ldemul.o: ldemul.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
d997 4
a1000 38
  ldemul.h ldmisc.h ldexp.h ldlang.h ldfile.h ldmain.h \
  ldemul-list.h
ldexp.o: ldexp.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/bfdlink.h \
  ld.h $(INCDIR)/bin-bugs.h ldmain.h ldmisc.h ldexp.h \
  ldgram.h ldlang.h
ldfile.o: ldfile.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/bfdlink.h \
  ld.h $(INCDIR)/bin-bugs.h ldmisc.h ldexp.h ldlang.h \
  ldfile.h ldmain.h ldgram.h ldlex.h ldemul.h
ldlang.o: ldlang.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/libiberty.h \
  $(INCDIR)/obstack.h $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h \
  ldmain.h ldgram.h ldexp.h ldlang.h ldemul.h ldlex.h \
  ldmisc.h ldctor.h ldfile.h $(INCDIR)/fnmatch.h $(INCDIR)/demangle.h
ldmain.o: ldmain.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/libiberty.h \
  $(INCDIR)/progress.h $(INCDIR)/bfdlink.h $(INCDIR)/filenames.h \
  ld.h $(INCDIR)/bin-bugs.h ldmain.h ldmisc.h ldwrite.h \
  ldgram.h ldexp.h ldlang.h ldemul.h ldlex.h ldfile.h \
  ldctor.h
ldmisc.o: ldmisc.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/libiberty.h \
  $(INCDIR)/demangle.h ld.h $(INCDIR)/bin-bugs.h ldmisc.h \
  ldexp.h ldlang.h ldgram.h ldlex.h ldmain.h ldfile.h
ldver.o: ldver.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  sysdep.h config.h $(INCDIR)/fopen-same.h ld.h $(INCDIR)/bin-bugs.h \
  ldver.h ldemul.h ldmain.h
ldwrite.o: ldwrite.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/libiberty.h ld.h $(INCDIR)/bin-bugs.h ldexp.h \
  ldlang.h ldwrite.h ldmisc.h ldgram.h ldmain.h
lexsup.o: lexsup.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/libiberty.h \
  $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h ldmain.h \
  ldmisc.h ldexp.h ldlang.h ldgram.h ldlex.h ldfile.h \
  ldver.h ldemul.h
mri.o: mri.c ../bfd/bfd.h $(INCDIR)/ansidecl.h sysdep.h \
d1002 1
a1002 22
  ldexp.h ldlang.h ldmisc.h mri.h ldgram.h $(INCDIR)/libiberty.h
ldcref.o: ldcref.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/libiberty.h ld.h $(INCDIR)/bin-bugs.h ldmain.h \
  ldmisc.h ldexp.h ldlang.h
pe-dll.o: pe-dll.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/libiberty.h ld.h $(INCDIR)/bin-bugs.h ldexp.h \
  ldlang.h ldwrite.h ldmisc.h ldgram.h ldmain.h ldemul.h \
  $(INCDIR)/coff/internal.h ../bfd/libcoff.h deffile.h \
  pe-dll.h
ldgram.o: ldgram.c ../bfd/bfd.h $(INCDIR)/ansidecl.h \
  sysdep.h config.h $(INCDIR)/fopen-same.h $(INCDIR)/bfdlink.h \
  ld.h $(INCDIR)/bin-bugs.h ldexp.h ldver.h ldlang.h \
  ldemul.h ldfile.h ldmisc.h ldmain.h mri.h ldctor.h \
  ldlex.h
ldlex.o: ldlex.c ../bfd/bfd.h sysdep.h config.h $(INCDIR)/fopen-same.h \
  ld.h $(INCDIR)/bin-bugs.h ldgram.h ldmisc.h ldexp.h \
  ldlang.h ldfile.h ldlex.h ldmain.h
deffilep.o: deffilep.c $(INCDIR)/libiberty.h $(INCDIR)/ansidecl.h \
  ../bfd/bfd.h sysdep.h config.h $(INCDIR)/fopen-same.h \
  ld.h $(INCDIR)/bin-bugs.h ldmisc.h deffile.h
@


1.32
log
@Applied Stephane Carrez <Stephane.Carrez@@worldnet.fr> patches to add support
for m68hc11 and m68hc12 processors.
@
text
@d224 1
d709 3
@


1.31
log
@Update dependencies.
@
text
@d178 4
d564 12
@


1.30
log
@        * Makefile.am: Add PA64 support.  Add missing dependencies for
        PA32 elf support.
        * Makefile.in: Rebuilt.
        * configure.tgt: Add PA64 support (currently disabled).
@
text
@d933 4
a936 3
  $(INCDIR)/progress.h $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h \
  ldmain.h ldmisc.h ldwrite.h ldgram.h ldexp.h ldlang.h \
  ldemul.h ldlex.h ldfile.h ldctor.h
@


1.29
log
@IA-64 ELF support.
@
text
@d228 4
d236 1
d458 3
d512 3
@


1.28
log
@* scripttempl/elfppc.sc: Remove.
* emulparams/elf32ppc.sh: Use elf.sc.
* emulparams/elf32lppc.sh: Use elf.sc.
* emulparams/elf32ppclinux.sh: Use elf.sc.
* emulparams/elf32ppcsim.sh: New file.
* emulparams/elf32lppcsim.sh: New file.
* Makefile.am: Update dependencies.  Add elf32ppcsim ad elf32lppcsim.
(ALL_EMULATIONS): Add elf32ppcsim ad elf32lppcsim.
* Makefile.in: Regenerate.
* configure.tgt (powerpc-*): Add elf32ppcsim and elf32lppcsim.
@
text
@d229 1
d453 3
@


1.27
log
@Remove ``-W -Wall'' from top-level Makefile/configure.
Add ``-W -Wall'' to sub-directories bfd, binutils, gas gprof, ld and
opcodes by the addition of WARN_CFLAGS to Makefile.am and configury to
set it.  Add configure option --enable-build-warnings.
Re-generate all and sundry using auto*-000227.
@
text
@d143 1
d145 1
d429 1
a429 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elfppc.sc ${GEN_DEPENDS}
d431 3
d438 1
a438 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elfppc.sc ${GEN_DEPENDS}
d440 3
d444 1
a444 1
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elfppc.sc ${GEN_DEPENDS}
@


1.26
log
@Use "gcc -MM" for dependencies, and update them.
@
text
@d16 3
@


1.25
log
@ATMEL AVR microcontroller support.
@
text
@d36 1
a36 1
MKDEP = mkdep
d810 1
a810 1
CLEANFILES = dep.sed DEP DEP1
d848 3
a850 2
	$(MAKE) MKDEP=$(MKDEP) DEP1
	sed -f dep.sed <DEP1 >DEP
a851 1
# This rule really wants a mkdep that runs "gcc -MM".
a852 1
	rm -f DEP2
d854 3
a856 2
	$(MKDEP) -f DEP2 $(INCLUDES) $?
	$(srcdir)/../move-if-change DEP2 DEP1
a883 1

d886 2
a887 1
  ld.h ldexp.h ldlang.h ldmisc.h ldgram.h ldmain.h ldctor.h
d889 3
a891 2
  sysdep.h config.h $(INCDIR)/fopen-same.h ld.h ldemul.h \
  ldmisc.h ldexp.h ldlang.h ldfile.h ldmain.h ldemul-list.h
d894 2
a895 1
  ld.h ldmain.h ldmisc.h ldexp.h ldgram.h ldlang.h
d898 2
a899 2
  ld.h ldmisc.h ldexp.h ldlang.h ldfile.h ldmain.h ldgram.h \
  ldlex.h ldemul.h
d902 3
a904 3
  $(INCDIR)/obstack.h $(INCDIR)/bfdlink.h ld.h ldmain.h \
  ldgram.h ldexp.h ldlang.h ldemul.h ldlex.h ldmisc.h \
  ldctor.h ldfile.h $(INCDIR)/fnmatch.h $(INCDIR)/demangle.h
d907 3
a909 3
  $(INCDIR)/progress.h $(INCDIR)/bfdlink.h ld.h ldmain.h \
  ldmisc.h ldwrite.h ldgram.h ldexp.h ldlang.h ldemul.h \
  ldlex.h ldfile.h ldctor.h
d912 2
a913 2
  $(INCDIR)/demangle.h ld.h ldmisc.h ldexp.h ldlang.h \
  ldgram.h ldlex.h ldmain.h ldfile.h
d915 2
a916 2
  sysdep.h config.h $(INCDIR)/fopen-same.h ld.h ldver.h \
  ldemul.h ldmain.h
d919 2
a920 2
  $(INCDIR)/libiberty.h ld.h ldexp.h ldlang.h ldwrite.h \
  ldmisc.h ldgram.h ldmain.h
d923 1
a923 1
  $(INCDIR)/getopt.h $(INCDIR)/bfdlink.h ld.h ldmain.h \
d927 2
a928 2
  config.h $(INCDIR)/fopen-same.h ld.h ldexp.h ldlang.h \
  ldmisc.h mri.h ldgram.h $(INCDIR)/libiberty.h
d931 2
a932 2
  $(INCDIR)/libiberty.h ld.h ldmain.h ldmisc.h ldexp.h \
  ldlang.h
d935 4
a938 3
  $(INCDIR)/libiberty.h ld.h ldexp.h ldlang.h ldwrite.h \
  ldmisc.h ldgram.h ldmain.h ldemul.h $(INCDIR)/coff/internal.h \
  ../bfd/libcoff.h deffile.h pe-dll.h
d941 3
a943 2
  ld.h ldexp.h ldver.h ldlang.h ldemul.h ldfile.h ldmisc.h \
  ldmain.h mri.h ldctor.h ldlex.h
d945 2
a946 2
  ld.h ldgram.h ldmisc.h ldexp.h ldlang.h ldfile.h ldlex.h \
  ldmain.h
d949 1
a949 2
  ld.h ldmisc.h deffile.h

@


1.25.2.1
log
@This is a grab-bag of my stuff from the head branch.
Should have done it separately, I know.
- move bug report address to include file
- objcopy --redefine-sym
- update makefile dependencies (but use automake-000227)
- H.J. Lu's fix to readelf.c
@
text
@d36 1
a36 1
MKDEP = gcc -MM
d810 1
a810 1
CLEANFILES = dep.sed DEP DEP1 DEP2
d848 2
a849 3
	$(MAKE) MKDEP="$(MKDEP)" DEP1
	sed -f dep.sed < DEP1 > $@@
	echo '# IF YOU PUT ANYTHING HERE IT WILL GO AWAY' >> $@@
d851 1
d853 1
d855 2
a856 3
	echo '# DO NOT PUT ANYTHING AFTER THIS LINE, IT WILL GO AWAY.' >> DEP2
	$(MKDEP) $(INCLUDES) $(CFLAGS) $? >> DEP2
	mv -f DEP2 $@@
d884 1
d887 1
a887 2
  ld.h $(INCDIR)/bin-bugs.h ldexp.h ldlang.h ldmisc.h \
  ldgram.h ldmain.h ldctor.h
d889 2
a890 3
  sysdep.h config.h $(INCDIR)/fopen-same.h ld.h $(INCDIR)/bin-bugs.h \
  ldemul.h ldmisc.h ldexp.h ldlang.h ldfile.h ldmain.h \
  ldemul-list.h
d893 1
a893 2
  ld.h $(INCDIR)/bin-bugs.h ldmain.h ldmisc.h ldexp.h \
  ldgram.h ldlang.h
d896 2
a897 2
  ld.h $(INCDIR)/bin-bugs.h ldmisc.h ldexp.h ldlang.h \
  ldfile.h ldmain.h ldgram.h ldlex.h ldemul.h
d900 3
a902 3
  $(INCDIR)/obstack.h $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h \
  ldmain.h ldgram.h ldexp.h ldlang.h ldemul.h ldlex.h \
  ldmisc.h ldctor.h ldfile.h $(INCDIR)/fnmatch.h $(INCDIR)/demangle.h
d905 3
a907 3
  $(INCDIR)/progress.h $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h \
  ldmain.h ldmisc.h ldwrite.h ldgram.h ldexp.h ldlang.h \
  ldemul.h ldlex.h ldfile.h ldctor.h
d910 2
a911 2
  $(INCDIR)/demangle.h ld.h $(INCDIR)/bin-bugs.h ldmisc.h \
  ldexp.h ldlang.h ldgram.h ldlex.h ldmain.h ldfile.h
d913 2
a914 2
  sysdep.h config.h $(INCDIR)/fopen-same.h ld.h $(INCDIR)/bin-bugs.h \
  ldver.h ldemul.h ldmain.h
d917 2
a918 2
  $(INCDIR)/libiberty.h ld.h $(INCDIR)/bin-bugs.h ldexp.h \
  ldlang.h ldwrite.h ldmisc.h ldgram.h ldmain.h
d921 1
a921 1
  $(INCDIR)/bfdlink.h ld.h $(INCDIR)/bin-bugs.h ldmain.h \
d925 2
a926 2
  config.h $(INCDIR)/fopen-same.h ld.h $(INCDIR)/bin-bugs.h \
  ldexp.h ldlang.h ldmisc.h mri.h ldgram.h $(INCDIR)/libiberty.h
d929 2
a930 2
  $(INCDIR)/libiberty.h ld.h $(INCDIR)/bin-bugs.h ldmain.h \
  ldmisc.h ldexp.h ldlang.h
d933 3
a935 4
  $(INCDIR)/libiberty.h ld.h $(INCDIR)/bin-bugs.h ldexp.h \
  ldlang.h ldwrite.h ldmisc.h ldgram.h ldmain.h ldemul.h \
  $(INCDIR)/coff/internal.h ../bfd/libcoff.h deffile.h \
  pe-dll.h
d938 2
a939 3
  ld.h $(INCDIR)/bin-bugs.h ldexp.h ldver.h ldlang.h \
  ldemul.h ldfile.h ldmisc.h ldmain.h mri.h ldctor.h \
  ldlex.h
d941 2
a942 2
  ld.h $(INCDIR)/bin-bugs.h ldgram.h ldmisc.h ldexp.h \
  ldlang.h ldfile.h ldlex.h ldmain.h
d945 2
a946 1
  ld.h $(INCDIR)/bin-bugs.h ldmisc.h deffile.h
@


1.25.2.2
log
@* ldlex.l (yy_create_string_buffer): Init all structure fields.
* ldlex.c: Regenerate.

* Makefile.am (DISTCLEANFILES): Add stringify.sed.
* Makefile.in: Regenerate.
@
text
@d840 1
a840 1
DISTCLEANFILES = tdirs site.exp site.bak stringify.sed
@


1.24
log
@2000-03-09  Andreas Jaeger  <aj@@suse.de>

	* Makefile.am (check-DEJAGNU): Also unset LANG.
	* Makefile.in: Rebuild.
@
text
@d114 8
d331 32
@


1.23
log
@2000-02-29  H.J. Lu  <hjl@@gnu.org>

	* Makefile.am (check-DEJAGNU): Also pass LIBS="$(LIBS)".
	Set LC_COLLATE and LC_ALL to null and export them. It is for
	sort which expects the C locale.
	Add $(LIBS) to all $(HOSTING_LIBS).
	* Makefile.in: Rebuild.
@
text
@d667 1
a667 1
	LC_COLLATE=; LC_ALL=; export LC_COLLATE LC_ALL; \
@


1.22
log
@	* Makefile.am (ALL_EMULATIONS): Remove ehppaelf.o.
	(ALL_64_EMULATIONS): Remove eelf64hppa.o.
	(eelf64hppa.c, ehppaelf.c): Remove targets.
	* Makefile.in: Rebuild.
@
text
@d667 1
d680 1
a680 1
		LIBIBERTY="$(LIBIBERTY) $(INTLLIBS)" \
d692 1
a692 1
	./ld-new$(EXEEXT) $(HOSTING_EMU) -o ld1$(EXEEXT) $(HOSTING_CRT0) ld-partial.o $(TESTBFDLIB) $(LIBIBERTY) $(HOSTING_LIBS)
d695 1
a695 1
	./ld-new$(EXEEXT) $(HOSTING_EMU) -o ld1-full$(EXEEXT) $(HOSTING_CRT0) $(OFILES) $(TESTBFDLIB) $(LIBIBERTY) $(HOSTING_LIBS)
d698 1
a698 1
	./ld1$(EXEEXT) $(HOSTING_EMU) -o ld2$(EXEEXT) $(HOSTING_CRT0) $(OFILES) $(TESTBFDLIB) $(LIBIBERTY) $(HOSTING_LIBS)
d701 1
a701 1
	./ld2$(EXEEXT) $(HOSTING_EMU) -o ld3$(EXEEXT) $(HOSTING_CRT0) $(OFILES) $(TESTBFDLIB) $(LIBIBERTY) $(HOSTING_LIBS)
@


1.21
log
@Add support for WinCE based toolchains.
@
text
@a149 1
	ehppaelf.o \
d218 1
a218 2
	eelf64bmip.o \
	eelf64hppa.o
a400 3
eelf64hppa.c: $(srcdir)/emulparams/elf64hppa.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf64hppa "$(tdir_elf64hppa)"
a448 3
ehppaelf.c: $(srcdir)/emulparams/hppaelf.sh \
  $(srcdir)/emultempl/hppaelf.em $(srcdir)/scripttempl/hppaelf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} hppaelf "$(tdir_hppaelf)"
@


1.20
log
@Add IBM 370 support.
@
text
@d183 1
d198 1
d553 3
d604 3
@


1.19
log
@Add arm-epoc-pe specific linker script
@
text
@d128 1
d395 3
@


1.18
log
@Add earm_epoc_pe.c build target.
@
text
@d317 1
a317 1
  $(srcdir)/emultempl/pe.em $(srcdir)/scripttempl/pe.sc ${GEN_DEPENDS}
@


1.17
log
@	* pe-dll.h: New file.
	* pe-dll.c: Include "pe-dll.h".  Mark unused arguments as needed
	to avoid warnings.
	(edata_sz, reloc_sz): Change from int to size_t.
	(pe_details_type): Change type of imagebase_reloc from int to
	unsigned int.
	(pe_detail_list): Fully initialize last entry.
	(pe_dll_id_target): Change parameter to const.
	(pe_dll_generate_def_file): Likewise.
	(pe_dll_generate_implib): Likewise.
	(pe_implied_import_dll): Likewise.  Change dll_name to const.
	* emultempl/pe.em: Include "pe-dll.h".  Remove declarations now in
	pe-dll.h.
	(init): Fully initialize __dll__ entry.
	(gld_${EMULATION_NAME}_after_open): Remove unused variables
	sequence, elt, and i.
	* deffile.h: Add preprocessor guard.
	* deffilep.y (def_debug): Remove.
	* Makefile.am: Rebuild dependencies.
	(HFILES): Add pe-dll.h.
@
text
@d113 1
d316 3
@


1.16
log
@1999-09-04  Steve Chamberlain  <sac@@pobox.com>

	* configure.tgt (pjl-*-*, pj-*-*): New targets.
	* emulparams/pjelf.sh: New file.
	* emulparams/pjlelf.sh: New file.
	* scripttempl/pj.sc: New file.
	* Makefile.am (ALL_EMULATIONS): Add epjelf.o and epjlelf.o.
	(epjelf.o, epjlelf.o): New targets.
	* Makefile.in: Rebuild.
@
text
@d228 1
a228 1
	ldwrite.h mri.h deffile.h
d886 1
a886 1
  ../bfd/libcoff.h deffile.h
@


1.15
log
@        * emulparams/elf64hppa.sh: New file.
        * configure.tgt (hppa*w-*-*): Use elf64hppa emulation.
        * Makefile.am (ALL_64_EMULATIONS): Add eelf64hppa.o
        (eelf64hppa.c): Add dependencies.
        * Makefile.in: Rebuilt.
@
text
@d182 2
d558 6
@


1.14
log
@Patch from Roland McGrath  <roland@@baalperazim.frob.com>
Add arm-netbsd target.
@
text
@d213 2
a214 1
	eelf64bmip.o
d391 3
@


1.13
log
@	* Makefile.am: Rename .dep* files to DEP*.  Change DEP variable to
	MKDEP.  Rebuild dependencies.
	* Makefile.in: Rebuild.
@
text
@d111 1
d309 3
@


1.12
log
@	* emultempl/ostring.sed: Rename from stringify.sed.
	* emultempl/astring.sed: New file.
	* Makefile.am (stringify.sed): New target.
	(GEN_DEPENDS): Change $(srcdir)/emultempl/stringify.sed to
	stringify.sed.
	* configure.in: Define and substitute STRINGIFY.
	* emultempl/*.em: Use stringify.sed from build directory rather
	than source directory.
	* emultempl/elf32.em: Use stringify.sed rather than inline sed
	script.
	* emultempl/gld960.em, emultempl/gld960c.em: Likewise.
	* emultempl/hppaelf.em, emultempl/linux.em: Likewise.
	* emultempl/lnk960.em, emultempl/sunos.em: Likewise.
	* configure, Makefile.in: Rebuild.
@
text
@d36 1
a36 1
DEP = mkdep
d745 1
a745 1
CLEANFILES = dep.sed .dep .dep1
d780 5
a784 5
# Have to get rid of .dep1 here so that "$?" later includes all of $(CFILES).
.dep: dep.sed $(CFILES) $(HFILES) $(GENERATED_CFILES) $(GENERATED_HFILES) config.h
	rm -f .dep1
	$(MAKE) DEP=$(DEP) .dep1
	sed -f dep.sed <.dep1 >.dep
d787 5
a791 5
.dep1: $(CFILES) $(GENERATED_CFILES)
	rm -f .dep2
	echo '# DO NOT DELETE THIS LINE -- mkdep uses it.' > .dep2
	$(DEP) -f .dep2 $(INCLUDES) $?
	$(srcdir)/../move-if-change .dep2 .dep1
d798 1
a798 1
dep: .dep
d800 1
a800 1
	cat .dep >> tmp-Makefile
d803 1
a803 1
dep-in: .dep
d805 1
a805 1
	cat .dep >> tmp-Makefile.in
d808 1
a808 1
dep-am: .dep
d810 1
a810 1
	cat .dep >> tmp-Makefile.am
d837 1
a837 1
  ldctor.h ldfile.h $(INCDIR)/fnmatch.h
@


1.11
log
@1999-08-05  Donn Terry  <donn@@interix.com>

	* emulparams/i386pe.sh: Define ENTRY, SUBSYSTEM, and
	INITIAL_SYMBOL_CHAQR.
	* emulparams/i386pe_posix.sh: New file.
	* Makefile.am (YACC): If bison is not in the source tree, use
	@@YACC@@ rather than bison -y.
	(LEX): If flex is not in the source tree, use @@LEX@@ rather than
	flex.
	(ALL_EMULATIONS): Add ei386pe_posix.o.
	(ei386pe_posix.c): New target.
	* configure.tgt (i[3456]86-*-interix*): New target.
	* configure.host (i[3456]86-pc-interix*): New host.
	* Makefile.in: Rebuild.
@
text
@d263 3
d269 1
a269 1
GEN_DEPENDS = $(srcdir)/genscripts.sh $(srcdir)/emultempl/stringify.sed
@


1.10
log
@1999-08-03  H.J. Lu  <hjl@@gnu.org>

	* Makefile.am (ALL_EMULATIONS): Remove ego32.o.
	(ego32.c): Remove.
	* Makefile.in: Rebuild.
@
text
@d12 1
a12 1
YACC = `if [ -f ../bison/bison ] ; then echo ../bison/bison -y -L$(srcdir)/../bison/ ; else echo bison -y ; fi`
d14 1
a14 1
LEX = `if [ -f ../flex/flex ] ; then echo ../flex/flex ; else echo flex ; fi`
d161 1
d473 3
@


1.9
log
@	* Makefile.am (ALL_64_EMULATIONS): Add eelf64bmip.
	(eelf64bmip): New target.
	* Makefile.in: Regenerated.
	* configure.tgt (mips-sgi-irix6*): Add 64-bit emulation.
	* emulparams/elf64bmip.sh: New file.
@
text
@a136 1
	ego32.o \
a399 3
ego32.c: $(srcdir)/emulparams/go32.sh \
  $(srcdir)/emultempl/generic.em $(srcdir)/scripttempl/aout.sc ${GEN_DEPENDS}
	${GENSCRIPTS} go32 "$(tdir_go32)"
@


1.8
log
@	* Makefile.am (ALL_EMULATIONS): Add eelf32bmipn32.o.
	(eelf32bmipn32.c): New target.
	* Makefile.in: Regenerated.
	* configure.tgt (mips-sgi-irix6*): Make n32 the default
	emulation.
	* emulparams/elf32bmipn32.sh: New file.
@
text
@d211 2
a212 1
	eelf64alpha.o
d386 3
@


1.7
log
@        * Makefile.am (GENSCRIPTS): Pass EMULATION_LIBPATH, not EMUL.
        * configure.in (all_emuls): Add targ_extra_libpath.
        (all_libpath, EMULATION_LIBPATH): Define.
        * configure.tgt (powerpc-*-linux-gnu*): Define targ_extra_libpath.
        * genscripts.sh (LIB_PATH): Define if emulation in EMULATION_LIBPATH.
@
text
@d125 1
d358 3
@


1.6
log
@Cort Dougan  <cort@@attis.cs.nmt.edu>
        * Makefile.am (ALL_EMULATIONS): Add eelf32ppclinux.o.
        * configure.tgt (powerpc-*-linux-gnu): Use it.
        * emulparams/elf32ppclinux.sh: New file.
@
text
@d263 1
a263 1
GENSCRIPTS = $(SHELL) $(srcdir)/genscripts.sh ${srcdir} ${libdir} @@host@@ @@target@@ @@target_alias@@ ${EMUL} "@@NATIVE_LIB_DIRS@@"
@


1.5
log
@1999-05-28  Martin Dorey  <mdorey@@madge.com>
	* configure.tgt (i960-*-elf*): New target.
	* emulparams/elf32_i960.sh: New file.
	* Makefile.am (ALL_EMULATIONS): Add eelf32_i960.o.
	(eelf32_i960.c): New target.
	* Makefile.in: Rebuild.
@
text
@d129 1
d372 3
@


1.4
log
@	* Makefile.am (ALL_EMULATIONS): Remove earmlinux.o and
	earm26linux.o, add earmelf_linux.o and earmelf_linux26.o.
	* Makefile.in: Regenerated.
@
text
@d120 1
d338 3
@


1.3
log
@REstore mcore support (duh!)
@
text
@d106 2
a107 2
	earmlinux.o \
	earm26linux.o \
@


1.2
log
@Remove traces of mcore.
@
text
@d133 1
d170 1
d328 3
d493 3
@


1.1
log
@Initial revision
@
text
@a132 1
	eelf32mcore.o \
a168 1
	emcorepe.o \
a325 3
eelf32mcore.c: $(srcdir)/emulparams/elf32mcore.sh \
  $(srcdir)/emultempl/elf32.em $(srcdir)/scripttempl/elf.sc ${GEN_DEPENDS}
	${GENSCRIPTS} elf32mcore "$(tdir_mcore)"
a487 3
emcorepe.c: $(srcdir)/emulparams/mcorepe.sh \
  $(srcdir)/emultempl/pe.em $(srcdir)/scripttempl/pe.sc ${GEN_DEPENDS}
	${GENSCRIPTS} mcorepe "$(tdir_mcorepe)"
@


1.1.1.1
log
@19990502 sourceware import
@
text
@@

