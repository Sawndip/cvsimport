head	1.6;
access;
symbols
	cygwin-1_7_17-release:1.5
	cygwin-64bit-branch:1.5.0.2
	cygwin-1_7_16-release:1.5
	cygwin-1_7_15-release:1.5
	cygwin-1_7_14_2-release:1.5
	cygwin-1_7_14-release:1.5
	cygwin-1_7_12-release:1.5
	cygwin-1_7_11-release:1.5
	cygwin-1_7_10-release:1.5;
locks; strict;
comment	@# @;


1.6
date	2012.11.07.16.52.33;	author cgf;	state dead;
branches;
next	1.5;

1.5
date	2012.01.15.20.56.25;	author keithmarshall;	state Exp;
branches;
next	1.4;

1.4
date	2012.01.15.19.11.09;	author keithmarshall;	state Exp;
branches;
next	1.3;

1.3
date	2012.01.15.15.31.10;	author keithmarshall;	state Exp;
branches;
next	1.2;

1.2
date	2012.01.15.15.10.08;	author keithmarshall;	state Exp;
branches;
next	1.1;

1.1
date	2011.12.13.20.46.53;	author keithmarshall;	state Exp;
branches;
next	;


desc
@@


1.6
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@# @@configure_input@@
#
#
# Makefile.comm.in
#
# This file is part of a free library for the Win32 API.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
#
# Establish the default build rule early, to ensure it is not
# hijacked by any other common rule defined herein; note that
# this requires us to specify the real default rule using the
# alternative name, 'all-default'.
#
all: all-default

SHELL = @@SHELL@@

host_alias = @@host@@
build_alias = @@build@@
target_alias = @@target@@
with_cross_host = @@with_cross_host@@

# Identify the tools required to build the package.
# Note that we don't specify associated option flags here,
# since different settings may be required in individual
# makefiles which include this common fragment.
#
CC = @@CC@@
AS = @@AS@@
LD = @@LD@@

CFLAGS = @@CFLAGS@@
ALL_CFLAGS = $(CFLAGS) $(INCLUDES)
EXTRA_INCLUDES = -nostdinc -iwithprefix include @@EXTRA_INCLUDES@@
INCLUDES = -I ${top_srcdir}/include $(EXTRA_INCLUDES)

DLLTOOL = @@DLLTOOL@@
DLLTOOL_FLAGS = --as=$(AS) -k
WINDRES = @@WINDRES@@

RANLIB = @@RANLIB@@
AR = @@AR@@

# In spite of its general unsuitability for use on MS-Windows hosts,
# Cygwin is able to, and likes to support the $(DESTDIR) capability;
# provide a graceful rejection mechanism, for any (non-Cygwin) cases
# where it cannot be used.
#
need-DESTDIR-compatibility = prefix libdir includedir
.PHONY: $(need-DESTDIR-compatibility) fail-DESTDIR-compatibility

$(need-DESTDIR-compatibility):
	@@test -z "$(DESTDIR)" || case "$($@@)" in ?:*) \
	  $(MAKE) --no-print-directory reject="$@@" fail-DESTDIR-compatibility ;; \
	esac

fail-DESTDIR-compatibility:
	$(error DESTDIR is not supported when $(reject) contains Win32 path `$($(reject))'; \
	try `make install $(reject)=$(shell echo '$($(reject))' | sed s,:,:$(DESTDIR),) ...' instead)

# Define the set of generic build rules, which are common to
# the build processes for all subdirectories.
#
%.o: %.c
	$(CC) -c $(ALL_CFLAGS) -o $@@ $<

lib%.a : %.def %.o
	$(DLLTOOL) $(DLLTOOL_FLAGS) --output-lib $@@ --def ${srcdir}/$*.def
	$(AR) r $@@ $*.o
	$(RANLIB) $@@

lib%.a: %.def
	$(DLLTOOL) $(DLLTOOL_FLAGS) --output-lib $@@ --def $<

lib%.a: %.o
	$(AR) rc $@@ $*.o
	$(RANLIB) $@@

# Install headers and libraries in a target specified directory.
#
mkinstalldirs = @@MKDIR_P@@

prefix = @@prefix@@
exec_prefix = @@exec_prefix@@

ifeq ($(target_alias),$(host_alias))
  ifeq ($(build_alias),$(host_alias))
    tooldir = ${exec_prefix}
  else
    tooldir = ${exec_prefix}/$(target_alias)
  endif
else
  tooldir = ${exec_prefix}/$(target_alias)
endif
ifneq (,$(findstring cygwin,$(target_alias)))
  inst_includedir = $(tooldir)/include/w32api
  inst_libdir = $(tooldir)/lib/w32api
else
  ifneq (,$(with_cross_host))
    inst_includedir = $(tooldir)/include/w32api
    inst_libdir = $(tooldir)/lib
  else
    inst_includedir = @@includedir@@
    inst_libdir = @@libdir@@
  endif
endif

INSTALL = @@INSTALL@@
INSTALL_PROGRAM = @@INSTALL_PROGRAM@@
INSTALL_DATA = @@INSTALL_DATA@@

# The "clean" class of rules is common to all subdirs.
#
mostlyclean:
	rm -f *~ *.o *.s

clean:
	rm -f *.o *.a *.s *~

distclean: clean
	rm -f config.cache config.status config.log Makefile

maintainer-clean: distclean

# Rules for rebuilding makefiles in sub-directories:
#
# Each of these should be rebuilt when its own Makefile.in is modified,
# or when ${top_builddir}/config.status is updated.  Rebuilding is achieved
# by running ${top_builddir}/config.status, with ${top_builddir} as CWD; as
# a side effect this also rebuilds all other makefiles in the package tree.
# In particular, it causes ${top_builddir}/Makefile.comm.in to be rebuilt,
# BEFORE any sub-directory specific Makefile is updated.
#
# Since ${top_builddir}/Makefile.comm is also required by each individual
# sub-directory Makefile, and since all sub-directory makefiles are ALWAYS
# updated along with ${top_builddir}/Makefile.comm, we may simply declare
# the dependency...
#
Makefile: ${top_builddir}/Makefile.comm

# ...then by adding Makefile.in as an artificial prerequisite of this,
# together with its own real dependence on ${top_builddir}/config.status
# and ${top_srcdir}/Makefile.comm.in, we can simply rely on the mutually
# effective rebuilding side effects to update both the subdirectory's own
# Makefile, and ${top_builddir}/Makefile.comm, in a single operation.
#
${top_builddir}/Makefile.comm: ${top_builddir}/config.status
${top_builddir}/Makefile.comm: Makefile.in ${top_srcdir}/Makefile.comm.in
	cd ${top_builddir} && $(SHELL) config.status

# ${top_builddir}/config.status must itself be updated, at any time when
# ${top_srcdir}/configure has been modified; this is a distinct operation
# from the rebuilding of makefiles.
#
${top_builddir}/config.status: ${top_srcdir}/configure
	cd ${top_builddir} && $(SHELL) config.status --recheck

# Makefile.comm.in: end of file
@


1.5
log
@More makefile code refactoring; remove redundant INCLUDES references.
@
text
@@


1.4
log
@Add smart identification of auxiliary header file paths.
@
text
@d39 1
@


1.3
log
@More makefile code refactoring; fix top_srcdir references.
@
text
@d38 1
a46 18
# Depending on if we build as part of winsup or mingw we need to
# add additional include paths in order to get the correct headers
# from the C library.
#
BUILDENV = @@BUILDENV@@

ifeq ($(BUILDENV), cygwin)
  # winsup/include
  # winsup/../newlib/libc/include
  # winsup/../newlib/libc/sys/cygwin
  EXTRA_INCLUDES = -I ${top_srcdir}/../include \
    -I ${top_srcdir}/../../newlib/libc/include \
    -I ${top_srcdir}/../../newlib/libc/sys/cygwin
endif
ifeq ($(BUILDENV), mingw)
  EXTRA_INCLUDES = -I ${top_srcdir}/../mingw/include
endif

@


1.2
log
@Update and correct makefile rebuilding rules.
@
text
@d46 18
@


1.1
log
@Factor common code from subdirectory makefiles into Makefile.comm.in
@
text
@d127 33
@

