head	1.9;
access;
symbols
	cygwin-1_7_17-release:1.8
	cygwin-64bit-branch:1.8.0.2
	cygwin-1_7_16-release:1.7
	cygwin-1_7_15-release:1.7
	cygwin-1_7_14_2-release:1.7
	cygwin-1_7_14-release:1.7
	cygwin-1_7_12-release:1.7
	cygwin-1_7_11-release:1.7
	cygwin-1_7_10-release:1.7
	cygwin-1_7_9-release:1.7
	cygwin-1_7_8-release:1.6
	cygwin-1_7_7-release:1.6
	cygwin-1_7_5-release:1.6
	cygwin-1_7_4-release:1.6
	cygwin-1_7_3-release:1.6
	cygwin-1_7_2-release:1.6
	cygwin-1_7_1-release:1.6
	cv-branch-2:1.4.0.2;
locks; strict;
comment	@ * @;


1.9
date	2012.11.07.16.52.40;	author cgf;	state dead;
branches;
next	1.8;

1.8
date	2012.08.01.17.25.34;	author earnie;	state Exp;
branches;
next	1.7;

1.7
date	2011.03.05.20.43.53;	author ironhead;	state Exp;
branches;
next	1.6;

1.6
date	2009.08.30.23.20.52;	author ironhead;	state Exp;
branches;
next	1.5;

1.5
date	2009.06.24.10.30.07;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2009.02.07.04.34.27;	author ironhead;	state Exp;
branches;
next	1.3;

1.3
date	2008.08.20.02.30.05;	author ironhead;	state Exp;
branches;
next	1.2;

1.2
date	2007.07.31.17.55.40;	author ironhead;	state Exp;
branches;
next	1.1;

1.1
date	2007.03.07.23.18.35;	author ironhead;	state Exp;
branches;
next	;


desc
@@


1.9
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@#ifndef _WTSAPI32_H
#define _WTSAPI32_H
#if __GNUC__ >= 3
#pragma GCC system_header
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if (_WIN32_WINNT >= 0x0501)
  // session notification message
#define WM_WTSSESSION_CHANGE		0x02B1

typedef enum _WTS_INFO_CLASS {
  WTSInitialProgram       = 0,
  WTSApplicationName      = 1,
  WTSWorkingDirectory     = 2,
  WTSOEMId                = 3,
  WTSSessionId            = 4,
  WTSUserName             = 5,
  WTSWinStationName       = 6,
  WTSDomainName           = 7,
  WTSConnectState         = 8,
  WTSClientBuildNumber    = 9,
  WTSClientName           = 10,
  WTSClientDirectory      = 11,
  WTSClientProductId      = 12,
  WTSClientHardwareId     = 13,
  WTSClientAddress        = 14,
  WTSClientDisplay        = 15,
  WTSClientProtocolType   = 16,
  WTSIdleTime             = 17,
  WTSLogonTime            = 18,
  WTSIncomingBytes        = 19,
  WTSOutgoingBytes        = 20,
  WTSIncomingFrames       = 21,
  WTSOutgoingFrames       = 22,
  WTSClientInfo           = 23,
  WTSSessionInfo          = 24
} WTS_INFO_CLASS;

typedef enum _WTS_CONNECTSTATE_CLASS {
  WTSActive,
  WTSConnected,
  WTSConnectQuery,
  WTSShadow,
  WTSDisconnected,
  WTSIdle,
  WTSListen,
  WTSReset,
  WTSDown,
  WTSInit 
} WTS_CONNECTSTATE_CLASS;

  // session notification message flags
#define WTS_CONSOLE_CONNECT			0x1
#define WTS_CONSOLE_DISCONNECT		0x2
#define WTS_REMOTE_CONNECT			0x3
#define WTS_REMOTE_DISCONNECT		0x4
#define WTS_SESSION_LOGON			0x5
#define WTS_SESSION_LOGOFF			0x6
#define WTS_SESSION_LOCK			0x7
#define WTS_SESSION_UNLOCK			0x8
#define WTS_SESSION_REMOTE_CONTROL	0x9

  // WTSRegisterSessionNotifiction flags
#define NOTIFY_FOR_THIS_SESSION		0
#define NOTIFY_FOR_ALL_SESSIONS		1

BOOL WINAPI WTSRegisterSessionNotification(HWND hWnd, DWORD dwFlags);
BOOL WINAPI WTSUnRegisterSessionNotification(HWND hWnd);
BOOL WINAPI WTSQueryUserToken(ULONG SessionId, PHANDLE pToken);

#endif /* _WIN32_WINNT >= 0x0501 */

#if (_WIN32_WINNT >= _WIN32_WINNT_WIN2K)

typedef struct _WTS_SESSION_INFOW {
  DWORD SessionId;
  LPWSTR pWinStationName;
  WTS_CONNECTSTATE_CLASS State;
} WTS_SESSION_INFOW, *PWTS_SESSION_INFOW;

typedef struct _WTS_SESSION_INFOA {
  DWORD SessionId;
  LPSTR pWinStationName;
  WTS_CONNECTSTATE_CLASS State;
} WTS_SESSION_INFOA, *PWTS_SESSION_INFOA;

#ifdef UNICODE
#define WTS_SESSION_INFO	WTS_SESSION_INFOW
#define PWTS_SESSION_INFO	PWTS_SESSION_INFOW
#else
#define WTS_SESSION_INFO	WTS_SESSION_INFOA
#define PWTS_SESSION_INFO	PWTS_SESSION_INFOA
#endif

  // WTSWaitSystemEvent local server handle
#define WTS_CURRENT_SERVER_HANDLE 0
#define WTS_CURRENT_SESSION       ((DWORD)-1)

  // WTSWaitSystemEvent flags
#define WTS_EVENT_NONE				0x00000000
#define WTS_EVENT_CREATE			0x00000001
#define WTS_EVENT_DELETE			0x00000002
#define WTS_EVENT_RENAME			0x00000004
#define WTS_EVENT_CONNECT			0x00000008
#define WTS_EVENT_DISCONNECT		0x00000010
#define WTS_EVENT_LOGON				0x00000020
#define WTS_EVENT_LOGOFF			0x00000040
#define WTS_EVENT_STATECHANGE		0x00000080
#define WTS_EVENT_LICENSE			0x00000100
#define WTS_EVENT_ALL				0x7FFFFFFF
#define WTS_EVENT_FLUSH				0x80000000

BOOL WINAPI WTSQuerySessionInformationA(HANDLE hServer, DWORD SessionId, WTS_INFO_CLASS WTSInfoClass,
                                LPSTR *ppBuffer, DWORD *pBytesReturned);
BOOL WINAPI WTSQuerySessionInformationW(HANDLE hServer, DWORD SessionId, WTS_INFO_CLASS WTSInfoClass,
                                LPTSTR *ppBuffer, DWORD *pBytesReturned);
BOOL WINAPI WTSWaitSystemEvent(HANDLE hServer, DWORD EventMask, DWORD* pEventFlags);
BOOL WINAPI WTSDisconnectSession(HANDLE hServer, DWORD SessionId, BOOL bWait);
BOOL WINAPI WTSEnumerateSessionsW(HANDLE hServer, DWORD Reserved, DWORD Version,
				  PWTS_SESSION_INFOW *ppSessionInfo,
				  PDWORD pCount);
BOOL WINAPI WTSEnumerateSessionsA(HANDLE hServer, DWORD Reserved, DWORD Version,
				  PWTS_SESSION_INFOA *ppSessionInfo,
				  PDWORD pCount);
void WINAPI WTSFreeMemory(PVOID pMemory);

#ifdef UNICODE
#define WTSEnumerateSessions WTSEnumerateSessionsW
#define WTSQuerySessionInformation WTSQuerySessionInformationW
#else
#define WTSEnumerateSessions WTSEnumerateSessionsA
#define WTSQuerySessionInformation WTSQuerySessionInformationA
#endif

BOOL WTSSendMessageA(
  HANDLE hServer,
  DWORD SessionId,
  LPSTR pTitle,
  DWORD TitleLength,
  LPSTR pMessage,
  DWORD MessageLength,
  DWORD Style,
  DWORD Timeout,
  DWORD *pResponse,
  BOOL bWait
);

BOOL WTSSendMessageW(
  HANDLE hServer,
  DWORD SessionId,
  LPWSTR pTitle,
  DWORD TitleLength,
  LPWSTR pMessage,
  DWORD MessageLength,
  DWORD Style,
  DWORD Timeout,
  DWORD *pResponse,
  BOOL bWait
);

#ifdef UNICODE
#define WTSSendMessage WTSSendMessageW
#else
#define WTSSendMessage WTSSendMessageA
#endif

BOOL WTSVirtualChannelClose(
  __in  HANDLE hChannelHandle
);

HANDLE WTSVirtualChannelOpen(
  __in  HANDLE hServer,
  __in  DWORD SessionId,
  __in  LPSTR pVirtualName
);

#if _WIN32_WINNT >= _WIN32_WINNT_VISTA
HANDLE WTSVirtualChannelOpenEx(
  __in  DWORD SessionId,
  __in  LPSTR pVirtualName,
  __in  DWORD flags
);
#endif

BOOL WTSVirtualChannelPurgeInput(
  __in  HANDLE hChannelHandle
);

BOOL WTSVirtualChannelPurgeOutput(
  __in  HANDLE hChannelHandle
);

#if _WIN32_WINNT >= _WIN32_WINNT_WINXP
BOOL WTSVirtualChannelQuery(
  __in   HANDLE hChannelHandle,
  __in   WTS_VIRTUAL_CLASS WtsVirtualClass,
  __out  PVOID *ppBuffer,
  __out  DWORD *pBytesReturned
);
#endif

BOOL WTSVirtualChannelRead(
  __in   HANDLE hChannelHandle,
  __in   ULONG TimeOut,
  __out  PCHAR Buffer,
  __in   ULONG BufferSize,
  __out  PULONG pBytesRead
);

BOOL WTSVirtualChannelWrite(
  __in   HANDLE hChannelHandle,
  __in   PCHAR Buffer,
  __in   ULONG Length,
  __out  PULONG pBytesWritten
);

#endif /* _WIN32_WINNT >= 0x0500 */

#ifdef __cplusplus
}
#endif

#endif /* _WTSAPI32_H */
@


1.8
log
@	* include/wtsapi32.h (WTSVirtualChannelClose): Add declaration.
	(WTSVirtualChannelOpen): Ditto.
	(WTSVirtualchannelOpenEx): Ditto.
	(WTSVirtualChannelPurgeInput): Ditto.
	(WTSVirtualChannelPurgeOutput): Ditto.
	(WTSVirtualChannelQuery): Ditto.
	(WTSVirtualChannelRead): Ditto.
	(WTSVirtualChannelWrite): Ditto.
	* lib/wtsapi32.def (WTSVirtualChannelOpenEx@@12): Add import.
@
text
@@


1.7
log
@2011-03-05  Chris Sutcliffe  <ir0nh34d@@users.sourceforge.net>

        * include/wtsapi32.h (WTSSendMessageA, WTSSendMessageW, WTSSendMessage):
        Define.
@
text
@d77 1
a77 1
#if (_WIN32_WINNT >= 0x0500)
d171 50
@


1.6
log
@2009-08-30  Chris Sutcliffe  <ir0nh34d@@users.sourceforge.net>

        * include/wtsapi32.h (WTSQuerySessionInformationA,
        WTSQuerySessionInformationW, WTSQuerySessionInformation, WTSFreeMemory):
        Moved to (_WIN32_WINNT >= 0x0500) guard.
        (thanks to Pierre Ossman)
@
text
@d139 32
@


1.5
log
@	* include/wtsapi32.h (WTSQueryUserToken, WTSEnumerateSessionsW,
	WTSEnumerateSessionsA): Add function prototypes.
	(struct _WTS_SESSION_INFOW, struct _WTS_SESSION_INFOA): Add typedefs.
	(WTS_SESSION_INFO, PWTS_SESSION_INFO, WTSEnumerateSessions): Add
	defines dependent on UNICODE setting.
@
text
@a72 4
BOOL WINAPI WTSQuerySessionInformationA(HANDLE hServer, DWORD SessionId, WTS_INFO_CLASS WTSInfoClass,
                                LPSTR *ppBuffer, DWORD *pBytesReturned);
BOOL WINAPI WTSQuerySessionInformationW(HANDLE hServer, DWORD SessionId, WTS_INFO_CLASS WTSInfoClass,
                                LPTSTR *ppBuffer, DWORD *pBytesReturned);
a73 7
void WINAPI WTSFreeMemory(PVOID pMemory);

#ifdef UNICODE
#define WTSQuerySessionInformation WTSQuerySessionInformationW
#else
#define WTSQuerySessionInformation WTSQuerySessionInformationA
#endif
d117 4
d129 1
d133 1
d136 1
@


1.4
log
@2009-02-06  Linton Miller  <Linton.Miller@@trivininc.com>

        * include/wtsapi32.h (WTS_CURRENT_SESSION): Fix definition.
@
text
@d77 1
d90 20
d130 13
@


1.3
log
@2008-08-19  Chris Sutcliffe  <ir0nh34d@@users.sourceforge.net>

        * include/wtsapi32.h (_WTS_INFO_CLASS, _WTS_CONNECTSTATE_CLASS,
        WTSQuerySessionInformation, WTSFreeMemory): Define.
@
text
@d91 1
a91 1
#define WTS_CURRENT_SESSION       0
@


1.2
log
@2007-07-31  Chris Sutcliffe  <ir0nh34d@@users.sourceforge.net>

        * include/wtsapi32.h (WTS_CURRENT_SESSION, WTSDisconnectSession): Define.
@
text
@d10 1
a10 1
	
d12 1
a12 1
// session notification message
d15 42
a56 1
// session notification message flags
d67 1
a67 1
// WTSRegisterSessionNotifiction flags
d73 12
d89 1
a89 1
// WTSWaitSystemEvent local server handle
d93 1
a93 1
// WTSWaitSystemEvent flags
@


1.1
log
@2007-03-06  Brandon Sneed <brandon@@oqo.com>

        * include/setupapi.h: Added SetupConfigureWmiFromInfSectionA
        Added SetupConfigureWmiFromInfSectionW
        Added SetupConfigureWmiFromInfSection define to unicode and non-unicode sections

        * lib/setupapi.def: Added exports for SetupConfigureWmiFromInfSectionA and W

        * include/winuser.h: Added PBT_APMQUERYSUSPEND
        Added PBT_APMQUERYSTANDBY
        Added PBT_APMQUERYSUSPENDFAILED
        Added PBT_APMQUERYSTANDBYFAILED
        Added PBT_APMSUSPEND
        Added PBT_APMSTANDBY
        Added PBT_APMRESUMECRITICAL
        Added PBT_APMRESUMESUSPEND
        Added PBT_APMRESUMESTANDBY
        Added PBT_APMBATTERYLOW
        Added PBT_APMPOWERSTATUSCHANGE
        Added PBT_APMOEMEVENT
        Added PBT_APMRESUMEAUTOMATIC

        * include/wtsapi32.h: New file

        * include/wingdi.h: Added DM_DISPLAYORIENTATION define for use with DMDO_* defines
@
text
@d37 2
a38 1
#define WTS_CURRENT_SERVER_HANDLE	0
d55 1
@

