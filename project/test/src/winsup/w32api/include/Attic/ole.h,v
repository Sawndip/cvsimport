head	1.4;
access;
symbols
	cygwin-1_7_17-release:1.3
	cygwin-64bit-branch:1.3.0.20
	cygwin-1_7_16-release:1.3
	cygwin-1_7_15-release:1.3
	cygwin-1_7_14_2-release:1.3
	cygwin-1_7_14-release:1.3
	cygwin-1_7_12-release:1.3
	cygwin-1_7_11-release:1.3
	cygwin-1_7_10-release:1.3
	cygwin-1_7_9-release:1.3
	cygwin-1_7_8-release:1.3
	cygwin-1_7_7-release:1.3
	cygwin-1_7_5-release:1.3
	cygwin-1_7_4-release:1.3
	cygwin-1_7_3-release:1.3
	cygwin-1_7_2-release:1.3
	cygwin-1_7_1-release:1.3
	cv-branch-2:1.3.0.18
	cr-0x5f1:1.3.0.16
	cv-branch:1.3.0.14
	cr-0x3b58:1.3.0.12
	cr-0x9e:1.3.0.10
	cr-0x9d:1.3.0.8
	corinna-01:1.3
	cr-0x9c:1.3.0.6
	cr-0x9b:1.3.0.4
	cr-0x99:1.3
	Z-emcb-cygwin_daemon:1.3.0.2
	w32api-2_2:1.3
	mingw-runtime-2_4:1.3
	w32api-1_5:1.3
	cygnus_cvs_20020108_pre:1.2
	Z-cygwin_daemon_merge-new_HEAD:1.2
	Z-cygwin_daemon_merge_HEAD:1.2
	cygwin_daemon:1.2.0.10;
locks; strict;
comment	@ * @;
expand	@o@;


1.4
date	2012.11.07.16.52.35;	author cgf;	state dead;
branches;
next	1.3;

1.3
date	2002.03.09.09.04.09;	author dannysmith;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.30.06.08.58;	author khan;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.4
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@#ifndef _OLE_H
#define _OLE_H
#if __GNUC__ >=3
#pragma GCC system_header
#endif

#ifdef __cplusplus
extern "C" {
#endif
#ifdef STRICT
#define OLE_LPCSTR LPCSTR
#define OLE_CONST const
#else
#define OLE_LPCSTR LPSTR
#define OLE_CONST
#endif
#define LRESULT LONG
#define HGLOBAL HANDLE
#define OT_LINK 1L
#define OT_EMBEDDED 2L
#define OT_STATIC 3L
#define OLEVERB_PRIMARY 0
#define OF_SET 1
#define OF_GET 2
#define OF_HANDLER 4

typedef struct _OLETARGETDEVICE {
	USHORT otdDeviceNameOffset;
	USHORT otdDriverNameOffset;
	USHORT otdPortNameOffset;
	USHORT otdExtDevmodeOffset;
	USHORT otdExtDevmodeSize;
	USHORT otdEnvironmentOffset;
	USHORT otdEnvironmentSize;
	BYTE otdData[1];
} OLETARGETDEVICE;
typedef OLETARGETDEVICE *LPOLETARGETDEVICE;
typedef enum {
OLE_OK,
OLE_WAIT_FOR_RELEASE,
OLE_BUSY,
OLE_ERROR_PROTECT_ONLY,
OLE_ERROR_MEMORY,
OLE_ERROR_STREAM,
OLE_ERROR_STATIC,
OLE_ERROR_BLANK,
OLE_ERROR_DRAW,
OLE_ERROR_METAFILE,
OLE_ERROR_ABORT,
OLE_ERROR_CLIPBOARD,
OLE_ERROR_FORMAT,
OLE_ERROR_OBJECT,
OLE_ERROR_OPTION,
OLE_ERROR_PROTOCOL,
OLE_ERROR_ADDRESS,
OLE_ERROR_NOT_EQUAL,
OLE_ERROR_HANDLE,
OLE_ERROR_GENERIC,
OLE_ERROR_CLASS,
OLE_ERROR_SYNTAX,
OLE_ERROR_DATATYPE,
OLE_ERROR_PALETTE,
OLE_ERROR_NOT_LINK,
OLE_ERROR_NOT_EMPTY,
OLE_ERROR_SIZE,
OLE_ERROR_DRIVE,
OLE_ERROR_NETWORK,
OLE_ERROR_NAME,
OLE_ERROR_TEMPLATE,
OLE_ERROR_NEW,
OLE_ERROR_EDIT,
OLE_ERROR_OPEN,
OLE_ERROR_NOT_OPEN,
OLE_ERROR_LAUNCH,
OLE_ERROR_COMM,
OLE_ERROR_TERMINATE,
OLE_ERROR_COMMAND,
OLE_ERROR_SHOW,
OLE_ERROR_DOVERB,
OLE_ERROR_ADVISE_NATIVE,
OLE_ERROR_ADVISE_PICT,
OLE_ERROR_ADVISE_RENAME,
OLE_ERROR_POKE_NATIVE,
OLE_ERROR_REQUEST_NATIVE,
OLE_ERROR_REQUEST_PICT,
OLE_ERROR_SERVER_BLOCKED,
OLE_ERROR_REGISTRATION,
OLE_ERROR_ALREADY_REGISTERED,
OLE_ERROR_TASK,
OLE_ERROR_OUTOFDATE,
OLE_ERROR_CANT_UPDATE_CLIENT,
OLE_ERROR_UPDATE,
OLE_ERROR_SETDATA_FORMAT,
OLE_ERROR_STATIC_FROM_OTHER_OS,
OLE_ERROR_FILE_VER,
OLE_WARN_DELETE_DATA = 1000
} OLESTATUS;
typedef enum {
	OLE_CHANGED,
	OLE_SAVED,
	OLE_CLOSED,
	OLE_RENAMED,
	OLE_QUERY_PAINT,
	OLE_RELEASE,
	OLE_QUERY_RETRY
} OLE_NOTIFICATION;
typedef enum {
	OLE_NONE,
	OLE_DELETE,
	OLE_LNKPASTE,
	OLE_EMBPASTE,
	OLE_SHOW,
	OLE_RUN,
	OLE_ACTIVATE,
	OLE_UPDATE,
	OLE_CLOSE,
	OLE_RECONNECT,
	OLE_SETUPDATEOPTIONS,
	OLE_SERVERUNLAUNCH,
	OLE_LOADFROMSTREAM,
	OLE_SETDATA,
	OLE_REQUESTDATA,
	OLE_OTHER,
	OLE_CREATE,
	OLE_CREATEFROMTEMPLATE,
	OLE_CREATELINKFROMFILE,
	OLE_COPYFROMLNK,
	OLE_CREATEFROMFILE,
	OLE_CREATEINVISIBLE
} OLE_RELEASE_METHOD;
typedef enum {
	olerender_none,
	olerender_draw,
	olerender_format
	} OLEOPT_RENDER;
typedef WORD OLECLIPFORMAT;
typedef enum {
	oleupdate_always,
	oleupdate_onsave,
#ifdef OLE_INTERNAL
	oleupdate_oncall,
	oleupdate_onclose
#else
	oleupdate_oncall
#endif
} OLEOPT_UPDATE;
typedef HANDLE HOBJECT;
typedef LONG LHSERVER;
typedef LONG LHCLIENTDOC;
typedef LONG LHSERVERDOC;
typedef struct _OLEOBJECT *LPOLEOBJECT;
typedef struct _OLESTREAM *LPOLESTREAM;
typedef struct _OLECLIENT *LPOLECLIENT;
typedef struct _OLEOBJECTVTBL {
	void *(CALLBACK* QueryProtocol)(LPOLEOBJECT,OLE_LPCSTR);
	OLESTATUS (CALLBACK* Release)(LPOLEOBJECT);
	OLESTATUS (CALLBACK* Show)(LPOLEOBJECT,BOOL);
	OLESTATUS (CALLBACK* DoVerb)(LPOLEOBJECT,UINT,BOOL,BOOL);
	OLESTATUS (CALLBACK* GetData)(LPOLEOBJECT,OLECLIPFORMAT,HANDLE*);
	OLESTATUS (CALLBACK* SetData)(LPOLEOBJECT,OLECLIPFORMAT,HANDLE);
	OLESTATUS (CALLBACK* SetTargetDevice)(LPOLEOBJECT,HGLOBAL);
	OLESTATUS (CALLBACK* SetBounds)(LPOLEOBJECT,OLE_CONST RECT*);
	OLECLIPFORMAT (CALLBACK* EnumFormats)(LPOLEOBJECT,OLECLIPFORMAT);
	OLESTATUS (CALLBACK* SetColorScheme)(LPOLEOBJECT,OLE_CONST LOGPALETTE*);
#ifndef SERVERONLY
	OLESTATUS (CALLBACK* Delete)(LPOLEOBJECT);
	OLESTATUS (CALLBACK* SetHostNames)(LPOLEOBJECT,OLE_LPCSTR,OLE_LPCSTR);
	OLESTATUS (CALLBACK* SaveToStream)(LPOLEOBJECT,LPOLESTREAM);
	OLESTATUS (CALLBACK* Clone)(LPOLEOBJECT,LPOLECLIENT,LHCLIENTDOC,OLE_LPCSTR,LPOLEOBJECT*);
	OLESTATUS (CALLBACK* CopyFromLink)(LPOLEOBJECT,LPOLECLIENT,LHCLIENTDOC,OLE_LPCSTR,LPOLEOBJECT*);
	OLESTATUS (CALLBACK* Equal)(LPOLEOBJECT,LPOLEOBJECT);
	OLESTATUS (CALLBACK* CopyToClipboard)(LPOLEOBJECT);
	OLESTATUS (CALLBACK* Draw)(LPOLEOBJECT,HDC,OLE_CONST RECT*,OLE_CONST RECT*,HDC);
	OLESTATUS (CALLBACK* Activate)(LPOLEOBJECT,UINT,BOOL,BOOL,HWND,OLE_CONST RECT*);
	OLESTATUS (CALLBACK* Execute)(LPOLEOBJECT,HGLOBAL,UINT);
	OLESTATUS (CALLBACK* Close)(LPOLEOBJECT);
	OLESTATUS (CALLBACK* Update)(LPOLEOBJECT);
	OLESTATUS (CALLBACK* Reconnect)(LPOLEOBJECT);
	OLESTATUS (CALLBACK* ObjectConvert)(LPOLEOBJECT,OLE_LPCSTR,LPOLECLIENT,LHCLIENTDOC,OLE_LPCSTR,LPOLEOBJECT*);
	OLESTATUS (CALLBACK* GetLinkUpdateOptions)(LPOLEOBJECT,OLEOPT_UPDATE*);
	OLESTATUS (CALLBACK* SetLinkUpdateOptions)(LPOLEOBJECT,OLEOPT_UPDATE);
	OLESTATUS (CALLBACK* Rename)(LPOLEOBJECT,OLE_LPCSTR);
	OLESTATUS (CALLBACK* QueryName)(LPOLEOBJECT,LPSTR,UINT*);
	OLESTATUS (CALLBACK* QueryType)(LPOLEOBJECT,LONG*);
	OLESTATUS (CALLBACK* QueryBounds)(LPOLEOBJECT,RECT*);
	OLESTATUS (CALLBACK* QuerySize)(LPOLEOBJECT,DWORD*);
	OLESTATUS (CALLBACK* QueryOpen)(LPOLEOBJECT);
	OLESTATUS (CALLBACK* QueryOutOfDate)(LPOLEOBJECT);
	OLESTATUS (CALLBACK* QueryReleaseStatus)(LPOLEOBJECT);
	OLESTATUS (CALLBACK* QueryReleaseError)(LPOLEOBJECT);
	OLE_RELEASE_METHOD (CALLBACK* QueryReleaseMethod)(LPOLEOBJECT);
	OLESTATUS (CALLBACK* RequestData)(LPOLEOBJECT,OLECLIPFORMAT);
	OLESTATUS (CALLBACK* ObjectLong)(LPOLEOBJECT,UINT,LONG*);
	OLESTATUS (CALLBACK* ChangeData)(LPOLEOBJECT,HANDLE,LPOLECLIENT,BOOL);
#endif
} OLEOBJECTVTBL;
typedef OLEOBJECTVTBL*LPOLEOBJECTVTBL;
#ifndef OLE_INTERNAL
typedef struct _OLEOBJECT { LPOLEOBJECTVTBL lpvtbl; } OLEOBJECT;
#endif
typedef struct _OLECLIENTVTBL { int (CALLBACK* CallBack)(LPOLECLIENT,OLE_NOTIFICATION,LPOLEOBJECT); } OLECLIENTVTBL;
typedef OLECLIENTVTBL *LPOLECLIENTVTBL;
typedef struct _OLECLIENT { LPOLECLIENTVTBL lpvtbl; } OLECLIENT;
typedef struct _OLESTREAMVTBL {
	DWORD (CALLBACK* Get)(LPOLESTREAM,void*,DWORD);
	DWORD (CALLBACK* Put)(LPOLESTREAM,OLE_CONST void*,DWORD);
} OLESTREAMVTBL;
typedef OLESTREAMVTBL *LPOLESTREAMVTBL;
typedef struct _OLESTREAM { LPOLESTREAMVTBL lpstbl; } OLESTREAM;
typedef enum {
	OLE_SERVER_MULTI,
	OLE_SERVER_SINGLE
} OLE_SERVER_USE;
typedef struct _OLESERVER *LPOLESERVER;
typedef struct _OLESERVERDOC *LPOLESERVERDOC;
typedef struct _OLESERVERVTBL {
	OLESTATUS (CALLBACK* Open)(LPOLESERVER,LHSERVERDOC,OLE_LPCSTR,LPOLESERVERDOC*);
	OLESTATUS (CALLBACK* Create)(LPOLESERVER,LHSERVERDOC,OLE_LPCSTR,OLE_LPCSTR,LPOLESERVERDOC*);
	OLESTATUS (CALLBACK* CreateFromTemplate)(LPOLESERVER,LHSERVERDOC,OLE_LPCSTR,OLE_LPCSTR,OLE_LPCSTR,LPOLESERVERDOC*);
	OLESTATUS (CALLBACK* Edit)(LPOLESERVER,LHSERVERDOC,OLE_LPCSTR,OLE_LPCSTR,LPOLESERVERDOC*);
	OLESTATUS (CALLBACK* Exit)(LPOLESERVER);
	OLESTATUS (CALLBACK* Release)(LPOLESERVER);
	OLESTATUS (CALLBACK* Execute)(LPOLESERVER,HGLOBAL);
} OLESERVERVTBL;
typedef OLESERVERVTBL *LPOLESERVERVTBL;
typedef struct _OLESERVER { LPOLESERVERVTBL lpvtbl; } OLESERVER;
typedef struct _OLESERVERDOCVTBL {
	OLESTATUS (CALLBACK* Save)(LPOLESERVERDOC);
	OLESTATUS (CALLBACK* Close)(LPOLESERVERDOC);
	OLESTATUS (CALLBACK* SetHostNames)(LPOLESERVERDOC,OLE_LPCSTR,OLE_LPCSTR);
	OLESTATUS (CALLBACK* SetDocDimensions)(LPOLESERVERDOC,OLE_CONST RECT*);
	OLESTATUS (CALLBACK* GetObject)(LPOLESERVERDOC,OLE_LPCSTR,LPOLEOBJECT*,LPOLECLIENT);
	OLESTATUS (CALLBACK* Release)(LPOLESERVERDOC);
	OLESTATUS (CALLBACK* SetColorScheme)(LPOLESERVERDOC,OLE_CONST LOGPALETTE*);
	OLESTATUS (CALLBACK* Execute)(LPOLESERVERDOC,HGLOBAL);
} OLESERVERDOCVTBL;
typedef OLESERVERDOCVTBL *LPOLESERVERDOCVTBL;
typedef struct _OLESERVERDOC { LPOLESERVERDOCVTBL lpvtbl; } OLESERVERDOC;
OLESTATUS WINAPI OleDelete(LPOLEOBJECT);
OLESTATUS WINAPI OleRelease(LPOLEOBJECT);
OLESTATUS WINAPI OleSaveToStream(LPOLEOBJECT,LPOLESTREAM);
OLESTATUS WINAPI OleEqual(LPOLEOBJECT,LPOLEOBJECT );
OLESTATUS WINAPI OleCopyToClipboard(LPOLEOBJECT);
OLESTATUS WINAPI OleSetHostNames(LPOLEOBJECT,LPCSTR,LPCSTR);
OLESTATUS WINAPI OleSetTargetDevice(LPOLEOBJECT,HGLOBAL);
OLESTATUS WINAPI OleSetBounds(LPOLEOBJECT,LPCRECT);
OLESTATUS WINAPI OleSetColorScheme(LPOLEOBJECT,const LOGPALETTE*);
OLESTATUS WINAPI OleQueryBounds(LPOLEOBJECT,RECT*);
OLESTATUS WINAPI OleQuerySize(LPOLEOBJECT,DWORD*);
OLESTATUS WINAPI OleDraw(LPOLEOBJECT,HDC,LPCRECT,LPCRECT,HDC);
OLESTATUS WINAPI OleQueryOpen(LPOLEOBJECT);
OLESTATUS WINAPI OleActivate(LPOLEOBJECT,UINT,BOOL,BOOL,HWND,LPCRECT);
OLESTATUS WINAPI OleExecute(LPOLEOBJECT,HGLOBAL,UINT);
OLESTATUS WINAPI OleClose(LPOLEOBJECT);
OLESTATUS WINAPI OleUpdate(LPOLEOBJECT);
OLESTATUS WINAPI OleReconnect(LPOLEOBJECT);
OLESTATUS WINAPI OleGetLinkUpdateOptions(LPOLEOBJECT,OLEOPT_UPDATE*);
OLESTATUS WINAPI OleSetLinkUpdateOptions(LPOLEOBJECT,OLEOPT_UPDATE);
WINAPI void *OleQueryProtocol(LPOLEOBJECT,LPCSTR);
OLESTATUS WINAPI OleQueryReleaseStatus(LPOLEOBJECT);
OLESTATUS WINAPI OleQueryReleaseError(LPOLEOBJECT);
OLE_RELEASE_METHOD WINAPI OleQueryReleaseMethod(LPOLEOBJECT);
OLESTATUS WINAPI OleQueryType(LPOLEOBJECT,LONG*);
DWORD WINAPI OleQueryClientVersion(void);
DWORD WINAPI OleQueryServerVersion(void);
OLECLIPFORMAT WINAPI OleEnumFormats(LPOLEOBJECT,OLECLIPFORMAT);
OLESTATUS WINAPI OleGetData(LPOLEOBJECT,OLECLIPFORMAT,HANDLE*);
OLESTATUS WINAPI OleSetData(LPOLEOBJECT,OLECLIPFORMAT,HANDLE);
OLESTATUS WINAPI OleQueryOutOfDate(LPOLEOBJECT);
OLESTATUS WINAPI OleRequestData(LPOLEOBJECT,OLECLIPFORMAT);
OLESTATUS WINAPI OleQueryLinkFromClip(LPCSTR,OLEOPT_RENDER,OLECLIPFORMAT);
OLESTATUS WINAPI OleQueryCreateFromClip(LPCSTR,OLEOPT_RENDER,OLECLIPFORMAT);
OLESTATUS WINAPI OleCreateFromClip(LPCSTR,LPOLECLIENT,LHCLIENTDOC,LPCSTR,LPOLEOBJECT*,OLEOPT_RENDER,OLECLIPFORMAT);
OLESTATUS WINAPI OleCreateLinkFromClip(LPCSTR,LPOLECLIENT,LHCLIENTDOC,LPCSTR,LPOLEOBJECT*,OLEOPT_RENDER,OLECLIPFORMAT);
OLESTATUS WINAPI OleCreateFromFile(LPCSTR,LPOLECLIENT,LPCSTR,LPCSTR,LHCLIENTDOC,LPCSTR,LPOLEOBJECT*,OLEOPT_RENDER,OLECLIPFORMAT);
OLESTATUS WINAPI OleCreateLinkFromFile(LPCSTR,LPOLECLIENT,LPCSTR,LPCSTR,LPCSTR,LHCLIENTDOC,LPCSTR,LPOLEOBJECT*,OLEOPT_RENDER,OLECLIPFORMAT);
OLESTATUS WINAPI OleLoadFromStream(LPOLESTREAM,LPCSTR,LPOLECLIENT,LHCLIENTDOC,LPCSTR,LPOLEOBJECT*);
OLESTATUS WINAPI OleCreate(LPCSTR,LPOLECLIENT,LPCSTR,LHCLIENTDOC,LPCSTR,LPOLEOBJECT*,OLEOPT_RENDER,OLECLIPFORMAT);
OLESTATUS WINAPI OleCreateInvisible(LPCSTR,LPOLECLIENT,LPCSTR,LHCLIENTDOC,LPCSTR,LPOLEOBJECT*,OLEOPT_RENDER,OLECLIPFORMAT,BOOL);
OLESTATUS WINAPI OleCreateFromTemplate(LPCSTR,LPOLECLIENT,LPCSTR,LHCLIENTDOC,LPCSTR,LPOLEOBJECT*,OLEOPT_RENDER,OLECLIPFORMAT);
OLESTATUS WINAPI OleClone(LPOLEOBJECT,LPOLECLIENT,LHCLIENTDOC,LPCSTR,LPOLEOBJECT*);
OLESTATUS WINAPI OleCopyFromLink(LPOLEOBJECT,LPCSTR,LPOLECLIENT,LHCLIENTDOC,LPCSTR,LPOLEOBJECT*);
OLESTATUS WINAPI OleObjectConvert(LPOLEOBJECT,LPCSTR,LPOLECLIENT,LHCLIENTDOC,LPCSTR,LPOLEOBJECT*);
OLESTATUS WINAPI OleRename(LPOLEOBJECT,LPCSTR);
OLESTATUS WINAPI OleQueryName(LPOLEOBJECT,LPSTR,UINT*);
OLESTATUS WINAPI OleRevokeObject(LPOLECLIENT);
BOOL WINAPI OleIsDcMeta(HDC);
OLESTATUS WINAPI OleRegisterClientDoc(LPCSTR,LPCSTR,LONG,LHCLIENTDOC*);
OLESTATUS WINAPI OleRevokeClientDoc(LHCLIENTDOC);
OLESTATUS WINAPI OleRenameClientDoc(LHCLIENTDOC,LPCSTR);
OLESTATUS WINAPI OleRevertClientDoc(LHCLIENTDOC);
OLESTATUS WINAPI OleSavedClientDoc(LHCLIENTDOC);
OLESTATUS WINAPI OleEnumObjects(LHCLIENTDOC,LPOLEOBJECT*);
OLESTATUS WINAPI OleRegisterServer(LPCSTR,LPOLESERVER,LHSERVER*,HINSTANCE,OLE_SERVER_USE);
OLESTATUS WINAPI OleRevokeServer(LHSERVER);
OLESTATUS WINAPI OleBlockServer(LHSERVER);
OLESTATUS WINAPI OleUnblockServer(LHSERVER,BOOL*);
OLESTATUS WINAPI OleLockServer(LPOLEOBJECT,LHSERVER*);
OLESTATUS WINAPI OleUnlockServer(LHSERVER);
OLESTATUS WINAPI OleRegisterServerDoc(LHSERVER,LPCSTR,LPOLESERVERDOC,LHSERVERDOC*);
OLESTATUS WINAPI OleRevokeServerDoc(LHSERVERDOC);
OLESTATUS WINAPI OleRenameServerDoc(LHSERVERDOC,LPCSTR);
OLESTATUS WINAPI OleRevertServerDoc(LHSERVERDOC);
OLESTATUS WINAPI OleSavedServerDoc(LHSERVERDOC);
#ifdef __cplusplus
}
#endif
#endif
@


1.3
log
@	* include/accctrl.h, aclapi.h, basetsd.h, basetyps.h, cderr.h,
	cguid.h, commctrl.h, commdlg.h, cpl.h, cplext.h, custcntl.h,
	dbt.h, dde.h, ddeml.h, dlgs.h, excpt.h, httpext.h, imagehlp.h,
	imm.h, initguid.h, intshcut.h, ipexport.h, iphlpapi.h,
	ipifcons.h, iprtrmib.h, iptypes.h, isguids.h, largeint.h, lm.h,
	lmaccess.h, lmalert.h, lmapibuf.h, lmat.h, lmaudit.h,
	lmbrowsr.h, lmchdev.h, lmconfig.h, lmcons.h, lmerr.h,
	lmerrlog.h, lmmsg.h, lmremutl.h, lmrepl.h, lmserver.h,
	lmshare.h, lmsname.h, lmstats.h, lmsvc.h, lmuse.h, lmuseflg.h,
	lmwksta.h, lzexpand.h, mapi.h, mciavi.h, mcx.h, mmsystem.h,
	mswsock.h, nb30.h, nddeapi.h, nspapi.h, ntdef.h, ntsecapi.h,
	ntsecpkg.h, oaidl.h, objbase.h, objfwd.h, objidl.h, odbcinst.h,
	ole.h, ole2.h, ole2ver.h, oleauto.h, olectl.h, olectlid.h,
	oledlg.h, oleidl.h, pbt.h, prsht.h, psapi.h, rapi.h, ras.h,
	raserror.h, rassapi.h, regstr.h, richedit.h, richole.h, rpc.h,
	rpcdce.h, rpcdce2.h, rpcdcep.h, rpcndr.h, rpcnsi.h, rpcnsip.h,
	rpcnterr.h, rpcproxy.h, schannel.h, schnlsp.h, scrnsave.h,
	security.h, setupapi.h, shellapi.h, shlguid.h, shlobj.h, sql.h,
	sqlext.h, sqltypes.h, sqlucode.h, sspi.h, subauth.h,
	tlhelp32.h, unknwn.h, userenv.h, w32api.h, winbase.h, wincon.h,
	wincrypt.h, windef.h, windows.h, windowsx.h, winerror.h,
	wingdi.h, wininet.h, winioctl.h, winnetwk.h, winnls.h, winnt.h,
	winperf.h, winreg.h, winresrc.h, winsock.h, winsock2.h,
	winspool.h, winsvc.h, winuser.h, winver.h, ws2tcpip.h,
	wsnetbs.h, wtypes.h, zmouse.h:	Add #pragma GCC system_header
	if __GNUC__ >= 3.
	* include/mapi.h: Change header guard name to _MAPI_H  for
	consistency.
@
text
@@


1.2
log
@2000-03-30  Mumit Khan  <khan@@xraylith.wisc.edu>

	* include/ole.h: Workaround for C++ parser bug.
	* include/rpcdcep.h: Likewise.
	* include/winsock.h: Likewise.
@
text
@d3 4
@


1.1
log
@Initial revision
@
text
@d255 1
a255 1
void *WINAPI OleQueryProtocol(LPOLEOBJECT,LPCSTR);
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
