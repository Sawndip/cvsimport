head	1.10;
access;
symbols
	cygwin-1_7_17-release:1.9
	cygwin-64bit-branch:1.9.0.8
	cygwin-1_7_16-release:1.9
	cygwin-1_7_15-release:1.9
	cygwin-1_7_14_2-release:1.9
	cygwin-1_7_14-release:1.9
	cygwin-1_7_12-release:1.9
	cygwin-1_7_11-release:1.9
	cygwin-1_7_10-release:1.9
	cygwin-1_7_9-release:1.9
	cygwin-1_7_8-release:1.9
	cygwin-1_7_7-release:1.9
	cygwin-1_7_5-release:1.9
	cygwin-1_7_4-release:1.9
	cygwin-1_7_3-release:1.9
	cygwin-1_7_2-release:1.9
	cygwin-1_7_1-release:1.9
	cv-branch-2:1.9.0.6
	cr-0x5f1:1.9.0.4
	cv-branch:1.9.0.2
	cr-0x3b58:1.8.0.2
	cr-0x9e:1.6.0.4
	cr-0x9d:1.6.0.2
	corinna-01:1.5
	cr-0x9c:1.5.0.6
	cr-0x9b:1.5.0.4
	cr-0x99:1.5
	Z-emcb-cygwin_daemon:1.5.0.2
	w32api-2_2:1.4
	mingw-runtime-2_4:1.4;
locks; strict;
comment	@ * @;


1.10
date	2012.11.07.16.52.43;	author cgf;	state dead;
branches;
next	1.9;

1.9
date	2006.06.12.00.55.06;	author dannysmith;	state Exp;
branches;
next	1.8;

1.8
date	2004.03.05.09.01.04;	author dannysmith;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.23.05.53.38;	author dannysmith;	state Exp;
branches;
next	1.6;

1.6
date	2004.01.15.07.19.20;	author dannysmith;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.16.21.49.02;	author dannysmith;	state Exp;
branches;
next	1.4;

1.4
date	2002.12.19.01.34.25;	author dannysmith;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.15.01.08.17;	author dannysmith;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.12.21.34.06;	author dannysmith;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.06.22.18.25;	author earnie;	state Exp;
branches;
next	;


desc
@@


1.10
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@/*
 * video.h
 *
 * Video port and miniport driver interface
 *
 * This file is part of the w32api package.
 *
 * Contributors:
 *   Created by Casper S. Hornstrup <chorns@@users.sourceforge.net>
 *
 * THIS SOFTWARE IS NOT COPYRIGHTED
 *
 * This source code is offered for use in the public domain. You may
 * use, modify or distribute it freely.
 *
 * This code is distributed in the hope that it will be useful but
 * WITHOUT ANY WARRANTY. ALL WARRANTIES, EXPRESS OR IMPLIED ARE HEREBY
 * DISCLAIMED. This includes but is not limited to warranties of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

#ifndef __VIDEO_H
#define __VIDEO_H


#if __GNUC__ >=3
#pragma GCC system_header
#endif

#ifdef __WINDDI_H
#error winddi.h cannot be included with video.h
#else

#ifdef __cplusplus
extern "C" {
#endif

#include "ntddk.h"

#if defined(_VIDEOPORT_)
  #define VPAPI DECLSPEC_EXPORT
#else
  #define VPAPI DECLSPEC_IMPORT
#endif

#include "videoagp.h"
#include "ntddvdeo.h"


typedef LONG VP_STATUS;
typedef VP_STATUS *PVP_STATUS;
typedef struct __DMA_PARAMETERS * PDMA;
typedef struct _VIDEO_PORT_EVENT *PEVENT;
typedef struct _VIDEO_PORT_SPIN_LOCK *PSPIN_LOCK;
typedef struct __VP_DMA_ADAPTER *PVP_DMA_ADAPTER;

#define DISPLAY_ADAPTER_HW_ID             0xFFFFFFFF

#define EVENT_TYPE_MASK                   1
#define SYNCHRONIZATION_EVENT             0
#define NOTIFICATION_EVENT                1

#define INITIAL_EVENT_STATE_MASK          2
#define INITIAL_EVENT_NOT_SIGNALED        0
#define INITIAL_EVENT_SIGNALED            2

typedef enum VIDEO_DEBUG_LEVEL {
  Error = 0,
  Warn,
  Trace,
  Info
} VIDEO_DEBUG_LEVEL, *PVIDEO_DEBUG_LEVEL;

typedef enum {
  VideoPortUnlockAfterDma = 1,
  VideoPortKeepPagesLocked,
  VideoPortDmaInitOnly
} DMA_FLAGS;

typedef enum _HW_DMA_RETURN {
  DmaAsyncReturn,
  DmaSyncReturn
} HW_DMA_RETURN, *PHW_DMA_RETURN;

typedef HW_DMA_RETURN
(*PVIDEO_HW_START_DMA)(
    PVOID  HwDeviceExtension,
    PDMA  pDma);


#ifdef DBG

#define PAGED_CODE() \
  if (VideoPortGetCurrentIrql() > 1 /* APC_LEVEL */) \
  { \
    VideoPortDebugPrint(Error, "Video: Pageable code called at IRQL %d\n", VideoPortGetCurrentIrql() ); \
    ASSERT(FALSE); \
  }

#else

#define PAGED_CODE()

#endif

typedef struct _VIDEO_HARDWARE_CONFIGURATION_DATA {
  INTERFACE_TYPE InterfaceType;
  ULONG BusNumber;
  USHORT Version;
  USHORT Revision;
  USHORT Irql;
  USHORT Vector;
  ULONG ControlBase;
  ULONG ControlSize;
  ULONG CursorBase;
  ULONG CursorSize;
  ULONG FrameBase;
  ULONG FrameSize;
} VIDEO_HARDWARE_CONFIGURATION_DATA, *PVIDEO_HARDWARE_CONFIGURATION_DATA;

#define SIZE_OF_NT4_VIDEO_PORT_CONFIG_INFO       0x42
#define SIZE_OF_NT4_VIDEO_HW_INITIALIZATION_DATA 0x28
#define SIZE_OF_W2K_VIDEO_HW_INITIALIZATION_DATA 0x50

typedef enum _VIDEO_DEVICE_DATA_TYPE {
  VpMachineData = 0,
  VpCmosData,
  VpBusData,
  VpControllerData,
  VpMonitorData
} VIDEO_DEVICE_DATA_TYPE, *PVIDEO_DEVICE_DATA_TYPE;



/* Video miniport driver functions */

typedef struct _VP_SCATTER_GATHER_ELEMENT {
  PHYSICAL_ADDRESS  Address;
  ULONG  Length;
  ULONG_PTR  Reserved;
} VP_SCATTER_GATHER_ELEMENT, *PVP_SCATTER_GATHER_ELEMENT;

typedef struct _VP_SCATTER_GATHER_LIST {
  ULONG  NumberOfElements;
  ULONG_PTR  Reserved;
  VP_SCATTER_GATHER_ELEMENT  Elements[0];
} VP_SCATTER_GATHER_LIST, *PVP_SCATTER_GATHER_LIST;

typedef VOID DDKAPI
(*PEXECUTE_DMA)(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVP_DMA_ADAPTER  VpDmaAdapter,
  /*IN*/ PVP_SCATTER_GATHER_LIST  SGList,
  /*IN*/ PVOID  Context);

typedef PVOID DDKAPI
(*PVIDEO_PORT_GET_PROC_ADDRESS)(
/*IN*/ PVOID  HwDeviceExtension,
/*IN*/ PUCHAR  FunctionName);

typedef struct _VIDEO_PORT_CONFIG_INFO {
  ULONG  Length;
  ULONG  SystemIoBusNumber;
  INTERFACE_TYPE  AdapterInterfaceType;
  ULONG  BusInterruptLevel;
  ULONG  BusInterruptVector;
  KINTERRUPT_MODE  InterruptMode;
  ULONG  NumEmulatorAccessEntries;
  PEMULATOR_ACCESS_ENTRY  EmulatorAccessEntries;
  ULONG_PTR  EmulatorAccessEntriesContext;
  PHYSICAL_ADDRESS  VdmPhysicalVideoMemoryAddress;
  ULONG  VdmPhysicalVideoMemoryLength;
  ULONG  HardwareStateSize;
  ULONG  DmaChannel;
  ULONG  DmaPort;
  UCHAR  DmaShareable;
  UCHAR  InterruptShareable;
  BOOLEAN  Master;
  DMA_WIDTH  DmaWidth;
  DMA_SPEED  DmaSpeed;
  BOOLEAN  bMapBuffers;
  BOOLEAN  NeedPhysicalAddresses;
  BOOLEAN  DemandMode;
  ULONG  MaximumTransferLength;
  ULONG  NumberOfPhysicalBreaks;
  BOOLEAN  ScatterGather;
  ULONG  MaximumScatterGatherChunkSize;
  PVIDEO_PORT_GET_PROC_ADDRESS VideoPortGetProcAddress;
  PWSTR  DriverRegistryPath;
  ULONGLONG  SystemMemorySize;
} VIDEO_PORT_CONFIG_INFO, *PVIDEO_PORT_CONFIG_INFO;

typedef VP_STATUS DDKAPI
(*PVIDEO_HW_FIND_ADAPTER)(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVOID  HwContext,
  /*IN*/ PWSTR  ArgumentString,
  /*IN OUT*/  PVIDEO_PORT_CONFIG_INFO  ConfigInfo,
  /*OUT*/ PUCHAR  Again);

typedef VP_STATUS DDKAPI
(*PVIDEO_HW_POWER_GET)(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ ULONG  HwId,
  /*IN OUT*/  PVIDEO_POWER_MANAGEMENT  VideoPowerControl);

/* PVIDEO_HW_GET_CHILD_DESCRIPTOR return values */
#define VIDEO_ENUM_MORE_DEVICES           ERROR_CONTINUE
#define VIDEO_ENUM_NO_MORE_DEVICES        ERROR_NO_MORE_DEVICES
#define VIDEO_ENUM_INVALID_DEVICE         ERROR_INVALID_NAME

/* PVIDEO_HW_GET_CHILD_DESCRIPTOR.ChildEnumInfo constants */
typedef struct _VIDEO_CHILD_ENUM_INFO {
  ULONG  Size;
  ULONG  ChildDescriptorSize;
  ULONG  ChildIndex;
  ULONG  ACPIHwId;
  PVOID  ChildHwDeviceExtension;
} VIDEO_CHILD_ENUM_INFO, *PVIDEO_CHILD_ENUM_INFO;

/* PVIDEO_HW_GET_CHILD_DESCRIPTOR.VideoChildType constants */
typedef enum _VIDEO_CHILD_TYPE {
  Monitor = 1,
  NonPrimaryChip,
  VideoChip,
  Other
} VIDEO_CHILD_TYPE, *PVIDEO_CHILD_TYPE;

typedef VP_STATUS DDKAPI
(*PVIDEO_HW_GET_CHILD_DESCRIPTOR)(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVIDEO_CHILD_ENUM_INFO  ChildEnumInfo,
  /*OUT*/  PVIDEO_CHILD_TYPE  VideoChildType,
  /*OUT*/  PUCHAR  pChildDescriptor,
  /*OUT*/  PULONG  UId,
  /*OUT*/  PULONG  pUnused);

typedef BOOLEAN DDKAPI
(*PVIDEO_HW_INITIALIZE)(
  /*IN*/ PVOID  HwDeviceExtension);

typedef BOOLEAN DDKAPI
(*PVIDEO_HW_INTERRUPT)(
  /*IN*/ PVOID  HwDeviceExtension);

/* VIDEO_ACCESS_RANGE.RangePassive */
#define VIDEO_RANGE_PASSIVE_DECODE        1
#define VIDEO_RANGE_10_BIT_DECODE         2

#ifndef VIDEO_ACCESS_RANGE_DEFINED /* also in miniport.h */
#define VIDEO_ACCESS_RANGE_DEFINED
typedef struct _VIDEO_ACCESS_RANGE {
  PHYSICAL_ADDRESS  RangeStart;
  ULONG  RangeLength;
  UCHAR  RangeInIoSpace;
  UCHAR  RangeVisible;
  UCHAR  RangeShareable;
  UCHAR  RangePassive;
} VIDEO_ACCESS_RANGE, *PVIDEO_ACCESS_RANGE;
#endif

typedef VOID DDKAPI
(*PVIDEO_HW_LEGACYRESOURCES)(
  /*IN*/ ULONG  VendorId,
  /*IN*/ ULONG  DeviceId,
  /*IN OUT*/  PVIDEO_ACCESS_RANGE  *LegacyResourceList,
  /*IN OUT*/  PULONG  LegacyResourceCount);

typedef VP_STATUS DDKAPI
(*PMINIPORT_QUERY_DEVICE_ROUTINE)(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVOID  Context,
  /*IN*/ VIDEO_DEVICE_DATA_TYPE  DeviceDataType,
  /*IN*/ PVOID  Identifier,
  /*IN*/ ULONG  IdentifierLength,
  /*IN*/ PVOID  ConfigurationData,
  /*IN*/ ULONG  ConfigurationDataLength,
  /*IN OUT*/  PVOID  ComponentInformation,
  /*IN*/ ULONG  ComponentInformationLength);

typedef struct _QUERY_INTERFACE {
  CONST GUID  *InterfaceType;
  USHORT  Size;
  USHORT  Version;
  PINTERFACE  Interface;
  PVOID  InterfaceSpecificData;
} QUERY_INTERFACE, *PQUERY_INTERFACE;

typedef VP_STATUS DDKAPI
(*PVIDEO_HW_QUERY_INTERFACE)(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN OUT*/  PQUERY_INTERFACE  QueryInterface);

typedef VP_STATUS DDKAPI
(*PMINIPORT_GET_REGISTRY_ROUTINE)(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVOID  Context,
  /*IN OUT*/  PWSTR  ValueName,
  /*IN OUT*/  PVOID  ValueData,
  /*IN*/ ULONG  ValueLength);

typedef BOOLEAN DDKAPI
(*PVIDEO_HW_RESET_HW)(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ ULONG  Columns,
  /*IN*/ ULONG  Rows);

typedef VP_STATUS DDKAPI
(*PVIDEO_HW_POWER_SET)(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ ULONG  HwId,
  /*IN*/ PVIDEO_POWER_MANAGEMENT  VideoPowerControl);

typedef struct _STATUS_BLOCK {
   _ANONYMOUS_UNION union {
    VP_STATUS  Status;
    PVOID  Pointer;
  } DUMMYUNIONNAME;
  ULONG_PTR Information;
} STATUS_BLOCK, *PSTATUS_BLOCK;

typedef struct _VIDEO_REQUEST_PACKET {
  ULONG  IoControlCode;
  PSTATUS_BLOCK  StatusBlock;
  PVOID  InputBuffer;
  ULONG  InputBufferLength;
  PVOID  OutputBuffer;
  ULONG  OutputBufferLength;
} VIDEO_REQUEST_PACKET, *PVIDEO_REQUEST_PACKET;

typedef BOOLEAN DDKAPI
(*PVIDEO_HW_START_IO)(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVIDEO_REQUEST_PACKET  RequestPacket);

typedef BOOLEAN DDKAPI
(*PMINIPORT_SYNCHRONIZE_ROUTINE)(
  /*IN*/ PVOID  Context);

typedef VOID DDKAPI
(*PVIDEO_HW_TIMER)(
  /*IN*/ PVOID  HwDeviceExtension);

typedef VOID DDKAPI
(*PMINIPORT_DPC_ROUTINE)(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVOID  Context);

typedef VP_STATUS DDKAPI
(*PDRIVER_IO_PORT_UCHAR)(
  /*IN*/ ULONG_PTR  Context,
  /*IN*/ ULONG  Port,
  /*IN*/ UCHAR  AccessMode,
  /*IN*/ PUCHAR  Data);

typedef VP_STATUS DDKAPI
(*PDRIVER_IO_PORT_UCHAR_STRING)(
  /*IN*/ ULONG_PTR  Context,
  /*IN*/ ULONG  Port,
  /*IN*/ UCHAR  AccessMode,
  /*IN*/ PUCHAR  Data,
  /*IN*/ ULONG  DataLength);

typedef VP_STATUS DDKAPI
(*PDRIVER_IO_PORT_ULONG)(
  /*IN*/ ULONG_PTR  Context,
  /*IN*/ ULONG  Port,
  /*IN*/ UCHAR  AccessMode,
  /*IN*/ PULONG  Data);

typedef VP_STATUS DDKAPI
(*PDRIVER_IO_PORT_ULONG_STRING)(
  /*IN*/ ULONG_PTR  Context,
  /*IN*/ ULONG  Port,
  /*IN*/ UCHAR  AccessMode,
  /*IN*/ PULONG  Data,
  /*IN*/ ULONG  DataLength);

typedef VP_STATUS DDKAPI
(*PDRIVER_IO_PORT_USHORT)(
  /*IN*/ ULONG_PTR  Context,
  /*IN*/ ULONG  Port,
  /*IN*/ UCHAR  AccessMode,
  /*IN*/ PUSHORT  Data);

typedef VP_STATUS DDKAPI
(*PDRIVER_IO_PORT_USHORT_STRING)(
  /*IN*/ ULONG_PTR  Context,
  /*IN*/ ULONG  Port,
  /*IN*/ UCHAR  AccessMode,
  /*IN*/ PUSHORT  Data,
  /*IN*/ ULONG  DataLength);



typedef struct _INT10_BIOS_ARGUMENTS {
  ULONG  Eax;
  ULONG  Ebx;
  ULONG  Ecx;
  ULONG  Edx;
  ULONG  Esi;
  ULONG  Edi;
  ULONG  Ebp;
  USHORT  SegDs;
  USHORT  SegEs;
} INT10_BIOS_ARGUMENTS, *PINT10_BIOS_ARGUMENTS;

typedef struct _VIDEO_CHILD_STATE {
  ULONG  Id;
  ULONG  State;
} VIDEO_CHILD_STATE, *PVIDEO_CHILD_STATE;

typedef struct _VIDEO_CHILD_STATE_CONFIGURATION {
  ULONG  Count;
  VIDEO_CHILD_STATE  ChildStateArray[ANYSIZE_ARRAY];
} VIDEO_CHILD_STATE_CONFIGURATION, *PVIDEO_CHILD_STATE_CONFIGURATION;

typedef struct _VIDEO_HW_INITIALIZATION_DATA {
  ULONG  HwInitDataSize;
  INTERFACE_TYPE  AdapterInterfaceType;
  PVIDEO_HW_FIND_ADAPTER  HwFindAdapter;
  PVIDEO_HW_INITIALIZE  HwInitialize;
  PVIDEO_HW_INTERRUPT  HwInterrupt;
  PVIDEO_HW_START_IO  HwStartIO;
  ULONG  HwDeviceExtensionSize;
  ULONG  StartingDeviceNumber;
  PVIDEO_HW_RESET_HW  HwResetHw;
  PVIDEO_HW_TIMER  HwTimer;
  PVIDEO_HW_START_DMA  HwStartDma;
  PVIDEO_HW_POWER_SET  HwSetPowerState;
  PVIDEO_HW_POWER_GET  HwGetPowerState;
  PVIDEO_HW_GET_CHILD_DESCRIPTOR  HwGetVideoChildDescriptor;
  PVIDEO_HW_QUERY_INTERFACE  HwQueryInterface;
  ULONG  HwChildDeviceExtensionSize;
  PVIDEO_ACCESS_RANGE  HwLegacyResourceList;
  ULONG  HwLegacyResourceCount;
  PVIDEO_HW_LEGACYRESOURCES  HwGetLegacyResources;
  BOOLEAN  AllowEarlyEnumeration;
  ULONG  Reserved;
} VIDEO_HW_INITIALIZATION_DATA, *PVIDEO_HW_INITIALIZATION_DATA;

  /* VIDEO_PORT_AGP_INTERFACE.Version contants */
#define VIDEO_PORT_AGP_INTERFACE_VERSION_1 1

typedef struct _VIDEO_PORT_AGP_INTERFACE {
  SHORT  Size;
  SHORT  Version;
  PVOID  Context;
  PINTERFACE_REFERENCE  InterfaceReference;
  PINTERFACE_DEREFERENCE  InterfaceDereference;
  PAGP_RESERVE_PHYSICAL  AgpReservePhysical;
  PAGP_RELEASE_PHYSICAL  AgpReleasePhysical;
  PAGP_COMMIT_PHYSICAL  AgpCommitPhysical;
  PAGP_FREE_PHYSICAL  AgpFreePhysical;
  PAGP_RESERVE_VIRTUAL  AgpReserveVirtual;
  PAGP_RELEASE_VIRTUAL  AgpReleaseVirtual;
  PAGP_COMMIT_VIRTUAL  AgpCommitVirtual;
  PAGP_FREE_VIRTUAL  AgpFreeVirtual;
  ULONGLONG  AgpAllocationLimit;
} VIDEO_PORT_AGP_INTERFACE, *PVIDEO_PORT_AGP_INTERFACE;

  /* VIDEO_PORT_AGP_INTERFACE_2.Version constants */
#define VIDEO_PORT_AGP_INTERFACE_VERSION_2 2

typedef struct _VIDEO_PORT_AGP_INTERFACE_2 {
  /*IN*/ USHORT  Size;
  /*IN*/ USHORT  Version;
  /*OUT*/ PVOID  Context;
  /*OUT*/ PINTERFACE_REFERENCE  InterfaceReference;
  /*OUT*/ PINTERFACE_DEREFERENCE  InterfaceDereference;
  /*OUT*/ PAGP_RESERVE_PHYSICAL  AgpReservePhysical;
  /*OUT*/ PAGP_RELEASE_PHYSICAL  AgpReleasePhysical;
  /*OUT*/ PAGP_COMMIT_PHYSICAL  AgpCommitPhysical;
  /*OUT*/ PAGP_FREE_PHYSICAL  AgpFreePhysical;
  /*OUT*/ PAGP_RESERVE_VIRTUAL  AgpReserveVirtual;
  /*OUT*/ PAGP_RELEASE_VIRTUAL  AgpReleaseVirtual;
  /*OUT*/ PAGP_COMMIT_VIRTUAL  AgpCommitVirtual;
  /*OUT*/ PAGP_FREE_VIRTUAL  AgpFreeVirtual;
  /*OUT*/ ULONGLONG  AgpAllocationLimit;
  /*OUT*/ PAGP_SET_RATE  AgpSetRate;
} VIDEO_PORT_AGP_INTERFACE_2, *PVIDEO_PORT_AGP_INTERFACE_2;

#define VIDEO_PORT_I2C_INTERFACE_VERSION_1  1

typedef VOID DDKAPI
(*PVIDEO_WRITE_CLOCK_LINE)(
  PVOID HwDeviceExtension,
  UCHAR Data);

typedef VOID DDKAPI
(*PVIDEO_WRITE_DATA_LINE)(
  PVOID HwDeviceExtension,
  UCHAR Data);

typedef BOOLEAN DDKAPI
(*PVIDEO_READ_CLOCK_LINE)(
  PVOID HwDeviceExtension);

typedef BOOLEAN DDKAPI
(*PVIDEO_READ_DATA_LINE)(
  PVOID HwDeviceExtension);

typedef struct _I2C_CALLBACKS
{
  /*IN*/ PVIDEO_WRITE_CLOCK_LINE  WriteClockLine;
  /*IN*/ PVIDEO_WRITE_DATA_LINE  WriteDataLine;
  /*IN*/ PVIDEO_READ_CLOCK_LINE  ReadClockLine;
  /*IN*/ PVIDEO_READ_DATA_LINE  ReadDataLine;
} I2C_CALLBACKS, *PI2C_CALLBACKS;

typedef BOOLEAN DDKAPI
(*PI2C_START)(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PI2C_CALLBACKS  I2CCallbacks);

typedef BOOLEAN DDKAPI
(*PI2C_STOP)(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PI2C_CALLBACKS  I2CCallbacks);

typedef BOOLEAN DDKAPI
(*PI2C_WRITE)(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PI2C_CALLBACKS  I2CCallbacks,
  /*IN*/ PUCHAR  Buffer,
  /*IN*/ ULONG  Length);

typedef BOOLEAN DDKAPI
(*PI2C_READ)(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PI2C_CALLBACKS  I2CCallbacks,
  /*OUT*/ PUCHAR  Buffer,
  /*IN*/ ULONG  Length);

typedef struct _VIDEO_PORT_I2C_INTERFACE {
  USHORT  Size;
  USHORT  Version;
  PVOID  Context;
  PINTERFACE_REFERENCE  InterfaceReference;
  PINTERFACE_DEREFERENCE  InterfaceDereference;
  PI2C_START  I2CStart;
  PI2C_STOP  I2CStop;
  PI2C_WRITE  I2CWrite;
  PI2C_READ  I2CRead;
} VIDEO_PORT_I2C_INTERFACE, *PVIDEO_PORT_I2C_INTERFACE;

  /* VIDEO_PORT_INT10_INTERFACE.Version constants */
#define VIDEO_PORT_INT10_INTERFACE_VERSION_1 1

typedef VP_STATUS DDKAPI
(*PINT10_ALLOCATE_BUFFER)(
  /*IN*/ PVOID  Context,
  /*OUT*/ PUSHORT  Seg,
  /*OUT*/ PUSHORT  Off,
  /*IN OUT*/ PULONG  Length);

typedef VP_STATUS DDKAPI
(*PINT10_CALL_BIOS)(
  /*IN*/ PVOID  Context,
  /*IN OUT*/ PINT10_BIOS_ARGUMENTS  BiosArguments);

typedef VP_STATUS DDKAPI
(*PINT10_FREE_BUFFER)(
  /*IN*/ PVOID  Context,
  /*IN*/ USHORT  Seg,
  /*IN*/ USHORT  Off);

typedef VP_STATUS DDKAPI
(*PINT10_READ_MEMORY)(
  /*IN*/ PVOID  Context,
  /*IN*/ USHORT  Seg,
  /*IN*/ USHORT  Off,
  /*OUT*/ PVOID  Buffer,
  /*IN*/ ULONG  Length);

typedef VP_STATUS DDKAPI
(*PINT10_WRITE_MEMORY)(
  /*IN*/ PVOID  Context,
  /*IN*/ USHORT  Seg,
  /*IN*/ USHORT  Off,
  /*IN*/ PVOID  Buffer,
  /*IN*/ ULONG  Length);

typedef struct _VIDEO_PORT_INT10_INTERFACE {
  /*IN*/ USHORT  Size;
  /*IN*/ USHORT  Version;
  /*OUT*/ PVOID  Context;
  /*OUT*/ PINTERFACE_REFERENCE  InterfaceReference;
  /*OUT*/ PINTERFACE_DEREFERENCE  InterfaceDereference;
  /*OUT*/ PINT10_ALLOCATE_BUFFER  Int10AllocateBuffer;
  /*OUT*/ PINT10_FREE_BUFFER  Int10FreeBuffer;
  /*OUT*/ PINT10_READ_MEMORY  Int10ReadMemory;
  /*OUT*/ PINT10_WRITE_MEMORY  Int10WriteMemory;
  /*OUT*/ PINT10_CALL_BIOS  Int10CallBios;
} VIDEO_PORT_INT10_INTERFACE, *PVIDEO_PORT_INT10_INTERFACE;

  /* Flags for VideoPortGetDeviceBase and VideoPortMapMemory */
#define VIDEO_MEMORY_SPACE_MEMORY         0x00
#define VIDEO_MEMORY_SPACE_IO             0x01
#define VIDEO_MEMORY_SPACE_USER_MODE      0x02
#define VIDEO_MEMORY_SPACE_DENSE          0x04
#define VIDEO_MEMORY_SPACE_P6CACHE        0x08

typedef struct _VIDEO_X86_BIOS_ARGUMENTS {
  ULONG  Eax;
  ULONG  Ebx;
  ULONG  Ecx;
  ULONG  Edx;
  ULONG  Esi;
  ULONG  Edi;
  ULONG  Ebp;
} VIDEO_X86_BIOS_ARGUMENTS, *PVIDEO_X86_BIOS_ARGUMENTS;

typedef struct _VP_DEVICE_DESCRIPTION {
  BOOLEAN  ScatterGather;
  BOOLEAN  Dma32BitAddresses;
  BOOLEAN  Dma64BitAddresses;
  ULONG  MaximumLength;
} VP_DEVICE_DESCRIPTION, *PVP_DEVICE_DESCRIPTION;

typedef struct _VPOSVERSIONINFO {
  /*IN*/ ULONG  Size;
  /*OUT*/ ULONG  MajorVersion;
  /*OUT*/ ULONG  MinorVersion;
  /*OUT*/ ULONG  BuildNumber;
  /*OUT*/ USHORT  ServicePackMajor;
  /*OUT*/ USHORT  ServicePackMinor;
} VPOSVERSIONINFO, *PVPOSVERSIONINFO;



  /* Video port functions for miniports */

VPAPI
VOID
DDKAPI
VideoDebugPrint(
  /*IN*/ ULONG  DebugPrintLevel,
  /*IN*/ PCHAR  DebugMessage,
  /*IN*/ ...);

VPAPI
VOID
DDKAPI
VideoPortAcquireDeviceLock(
  /*IN*/ PVOID  HwDeviceExtension);

VPAPI
VOID
DDKAPI
VideoPortAcquireSpinLock(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PSPIN_LOCK  SpinLock,
  /*OUT*/ PUCHAR  OldIrql);

VPAPI
VOID
DDKAPI
VideoPortAcquireSpinLockAtDpcLevel(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PSPIN_LOCK  SpinLock);

VPAPI
VP_STATUS
DDKAPI
VideoPortAllocateBuffer(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ ULONG  Size,
  /*OUT*/ PVOID  *Buffer);

VPAPI
PVOID
DDKAPI
VideoPortAllocateCommonBuffer(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVP_DMA_ADAPTER  VpDmaAdapter,
  /*IN*/ ULONG  DesiredLength,
  /*OUT*/ PPHYSICAL_ADDRESS  LogicalAddress,
  /*IN*/ BOOLEAN  CacheEnabled,
  PVOID  Reserved);

VPAPI
PVOID
DDKAPI
VideoPortAllocateContiguousMemory(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ ULONG  NumberOfBytes,
  /*IN*/ PHYSICAL_ADDRESS  HighestAcceptableAddress);

  /* VideoPortAllocatePool.PoolType constants */
typedef enum _VP_POOL_TYPE {
  VpNonPagedPool = 0,
  VpPagedPool,
  VpNonPagedPoolCacheAligned = 4,
  VpPagedPoolCacheAligned
} VP_POOL_TYPE, *PVP_POOL_TYPE;

VPAPI
PVOID
DDKAPI
VideoPortAllocatePool(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ VP_POOL_TYPE  PoolType,
  /*IN*/ SIZE_T  NumberOfBytes,
  /*IN*/ ULONG  Tag);

VPAPI
PDMA
DDKAPI
VideoPortAssociateEventsWithDmaHandle(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN OUT*/ PVIDEO_REQUEST_PACKET  pVrp,
  /*IN*/ PVOID  MappedUserEvent,
  /*IN*/ PVOID  DisplayDriverEvent);

  /* VideoPortCheckForDeviceExistence.Flags constants */
#define CDE_USE_SUBSYSTEM_IDS             0x00000001
#define CDE_USE_REVISION                  0x00000002

VPAPI
BOOLEAN
DDKAPI
VideoPortCheckForDeviceExistence(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ USHORT  VendorId,
  /*IN*/ USHORT  DeviceId,
  /*IN*/ UCHAR  RevisionId,
  /*IN*/ USHORT  SubVendorId,
  /*IN*/ USHORT  SubSystemId,
  /*IN*/ ULONG  Flags);

VPAPI
VOID
DDKAPI
VideoPortClearEvent(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PEVENT  pEvent);

VPAPI
ULONG
DDKAPI
VideoPortCompareMemory(
  /*IN*/ PVOID  Source1,
  /*IN*/ PVOID  Source2,
  /*IN*/ ULONG  Length);

VPAPI
VP_STATUS
DDKAPI
VideoPortCompleteDma(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVP_DMA_ADAPTER  VpDmaAdapter,
  /*IN*/ PVP_SCATTER_GATHER_LIST  VpScatterGather,
  /*IN*/ BOOLEAN  WriteToDevice);

VPAPI
VP_STATUS
DDKAPI
VideoPortCreateEvent(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ ULONG  EventFlag,
  /*IN*/ PVOID  Unused,
  /*OUT*/ PEVENT  *ppEvent);

VPAPI
VP_STATUS
DDKAPI
VideoPortCreateSecondaryDisplay(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN OUT*/ PVOID  *SecondaryDeviceExtension,
  /*IN*/ ULONG  ulFlag);

VPAPI
VP_STATUS
DDKAPI
VideoPortCreateSpinLock(
  /*IN*/ PVOID  HwDeviceExtension,
  /*OUT*/ PSPIN_LOCK  *SpinLock);

typedef struct _DDC_CONTROL {
  /*IN*/ ULONG  Size;
  /*IN*/ I2C_CALLBACKS  I2CCallbacks;
  /*IN*/ UCHAR  EdidSegment;
} DDC_CONTROL, *PDDC_CONTROL;

VPAPI
BOOLEAN
DDKAPI
VideoPortDDCMonitorHelper(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVOID  DDCControl,
  /*IN OUT*/ PUCHAR  EdidBuffer,
  /*IN*/ ULONG  EdidBufferSize);

VPAPI
VOID
DDKCDECLAPI
VideoPortDebugPrint(
  /*IN*/ VIDEO_DEBUG_LEVEL  DebugPrintLevel,
  /*IN*/ PCHAR  DebugMessage,
  /*IN*/ ...);

VPAPI
VP_STATUS
DDKAPI
VideoPortDeleteEvent(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PEVENT  pEvent);

VPAPI
VP_STATUS
DDKAPI
VideoPortDeleteSpinLock(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PSPIN_LOCK  SpinLock);

VPAPI
VP_STATUS
DDKAPI
VideoPortDisableInterrupt(
  /*IN*/ PVOID  HwDeviceExtension);

VPAPI
PDMA
DDKAPI
VideoPortDoDma(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PDMA  pDma,
  /*IN*/ DMA_FLAGS  DmaFlags);

VPAPI
VP_STATUS
DDKAPI
VideoPortEnableInterrupt(
  /*IN*/ PVOID  HwDeviceExtension);

VPAPI
VP_STATUS
DDKAPI
VideoPortEnumerateChildren(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVOID  Reserved);

VPAPI
VOID
DDKAPI
VideoPortFreeCommonBuffer(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ ULONG  Length,
  /*IN*/ PVOID  VirtualAddress,
  /*IN*/ PHYSICAL_ADDRESS  LogicalAddress,
  /*IN*/ BOOLEAN  CacheEnabled);

VPAPI
VOID
DDKAPI
VideoPortFreeDeviceBase(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVOID  MappedAddress);

VPAPI
VOID
DDKAPI
VideoPortFreePool(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVOID  Ptr);

VPAPI
VP_STATUS
DDKAPI
VideoPortGetAccessRanges(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ ULONG  NumRequestedResources,
  /*IN*/ PIO_RESOURCE_DESCRIPTOR  RequestedResources  /*OPTIONAL*/,
  /*IN*/ ULONG  NumAccessRanges,
  /*OUT*/ PVIDEO_ACCESS_RANGE  AccessRanges,
  /*IN*/ PVOID  VendorId,
  /*IN*/ PVOID  DeviceId,
  /*OUT*/ PULONG  Slot);

VPAPI
PVOID
DDKAPI
VideoPortGetAssociatedDeviceExtension(
  /*IN*/ PVOID  DeviceObject);

VPAPI
ULONG
DDKAPI
VideoPortGetAssociatedDeviceID(
  /*IN*/ PVOID DeviceObject);

VPAPI
ULONG
DDKAPI
VideoPortGetBusData(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ BUS_DATA_TYPE  BusDataType,
  /*IN*/ ULONG  SlotNumber,
  /*IN OUT*/ PVOID  Buffer,
  /*IN*/ ULONG  Offset,
  /*IN*/ ULONG  Length);

VPAPI
ULONG
DDKAPI
VideoPortGetBytesUsed(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PDMA  pDma);

VPAPI
PVOID
DDKAPI
VideoPortGetCommonBuffer(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ ULONG  DesiredLength,
  /*IN*/ ULONG  Alignment,
  /*OUT*/ PPHYSICAL_ADDRESS  LogicalAddress,
  /*OUT*/ PULONG  pActualLength,
  /*IN*/ BOOLEAN  CacheEnabled);

VPAPI
UCHAR
DDKAPI
VideoPortGetCurrentIrql(
  VOID);

VPAPI
PVOID
DDKAPI
VideoPortGetDeviceBase(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PHYSICAL_ADDRESS  IoAddress,
  /*IN*/ ULONG  NumberOfUchars,
  /*IN*/ UCHAR  InIoSpace);

VPAPI
VP_STATUS
DDKAPI
VideoPortGetDeviceData(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ VIDEO_DEVICE_DATA_TYPE  DeviceDataType,
  /*IN*/ PMINIPORT_QUERY_DEVICE_ROUTINE  CallbackRoutine,
  /*IN*/ PVOID  Context);

VPAPI
PVP_DMA_ADAPTER
DDKAPI
VideoPortGetDmaAdapter(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVP_DEVICE_DESCRIPTION  VpDeviceDescription);

VPAPI
PVOID
DDKAPI
VideoPortGetDmaContext(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PDMA  pDma);

VPAPI
PVOID
DDKAPI
VideoPortGetMdl(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PDMA  pDma);

VPAPI
VP_STATUS
DDKAPI
VideoPortGetRegistryParameters(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PWSTR  ParameterName,
  /*IN*/ UCHAR  IsParameterFileName,
  /*IN*/ PMINIPORT_GET_REGISTRY_ROUTINE  CallbackRoutine,
  /*IN*/ PVOID  Context);

VPAPI
PVOID
DDKAPI
VideoPortGetRomImage(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVOID  Unused1,
  /*IN*/ ULONG  Unused2,
  /*IN*/ ULONG  Length);

VPAPI
VP_STATUS
DDKAPI
VideoPortGetVersion(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN OUT*/ PVPOSVERSIONINFO  pVpOsVersionInfo);

VPAPI
VP_STATUS
DDKAPI
VideoPortGetVgaStatus(
  /*IN*/ PVOID  HwDeviceExtension,
  /*OUT*/ PULONG  VgaStatus);

VPAPI
ULONG
DDKAPI
VideoPortInitialize(
  /*IN*/ PVOID  Argument1,
  /*IN*/ PVOID  Argument2,
  /*IN*/ PVIDEO_HW_INITIALIZATION_DATA  HwInitializationData,
  /*IN*/ PVOID  HwContext);

VPAPI
VP_STATUS
DDKAPI
VideoPortInt10(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVIDEO_X86_BIOS_ARGUMENTS  BiosArguments);

VPAPI
LONG
DDKFASTAPI
VideoPortInterlockedDecrement(
  /*IN*/ PLONG  Addend);

VPAPI
LONG
DDKFASTAPI
VideoPortInterlockedExchange(
  /*IN OUT*/ PLONG  Target,
  /*IN*/ LONG  Value);

VPAPI
LONG
DDKFASTAPI
VideoPortInterlockedIncrement(
  /*IN*/ PLONG  Addend);

typedef enum _VP_LOCK_OPERATION {
  VpReadAccess = 0,
  VpWriteAccess,
  VpModifyAccess
} VP_LOCK_OPERATION;

VPAPI
PVOID
DDKAPI
VideoPortLockBuffer(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVOID  BaseAddress,
  /*IN*/ ULONG  Length,
  /*IN*/ VP_LOCK_OPERATION  Operation);

VPAPI
BOOLEAN
DDKAPI
VideoPortLockPages(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN OUT*/ PVIDEO_REQUEST_PACKET  pVrp,
  /*IN OUT*/ PEVENT  pUEvent,
  /*IN*/ PEVENT  pDisplayEvent,
  /*IN*/ DMA_FLAGS  DmaFlags);

VPAPI
VOID
DDKAPI
VideoPortLogError(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVIDEO_REQUEST_PACKET  Vrp  /*OPTIONAL*/,
  /*IN*/ VP_STATUS  ErrorCode,
  /*IN*/ ULONG  UniqueId);

VPAPI
VP_STATUS
DDKAPI
VideoPortMapBankedMemory(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PHYSICAL_ADDRESS  PhysicalAddress,
  /*IN OUT*/ PULONG  Length,
  PULONG  InIoSpace,
  PVOID  *VirtualAddress,
  ULONG  BankLength,
  UCHAR  ReadWriteBank,
  PBANKED_SECTION_ROUTINE  BankRoutine,
  PVOID  Context);

VPAPI
PDMA
DDKAPI
VideoPortMapDmaMemory(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVIDEO_REQUEST_PACKET  pVrp,
  /*IN*/ PHYSICAL_ADDRESS  BoardAddress,
  /*IN*/ PULONG  Length,
  /*IN*/ PULONG  InIoSpace,
  /*IN*/ PVOID  MappedUserEvent,
  /*IN*/ PVOID  DisplayDriverEvent,
  /*IN OUT*/ PVOID  *VirtualAddress);

VPAPI
VP_STATUS
DDKAPI
VideoPortMapMemory(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PHYSICAL_ADDRESS  PhysicalAddress,
  /*IN OUT*/ PULONG  Length,
  /*IN*/ PULONG  InIoSpace,
  /*IN OUT*/ PVOID  *VirtualAddress);

VPAPI
VOID
DDKAPI
VideoPortMoveMemory(
  /*IN*/ PVOID  Destination,
  /*IN*/ PVOID  Source,
  /*IN*/ ULONG  Length);

VPAPI
VOID
DDKAPI
VideoPortPutDmaAdapter(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVP_DMA_ADAPTER  VpDmaAdapter);

VPAPI
LONGLONG
DDKAPI
VideoPortQueryPerformanceCounter(
  /*IN*/ PVOID  HwDeviceExtension,
  /*OUT*/ PLONGLONG  PerformanceFrequency  /*OPTIONAL*/);

  /* VideoPortQueryServices.ServicesType constants */
typedef enum _VIDEO_PORT_SERVICES {
  VideoPortServicesAGP = 1,
  VideoPortServicesI2C,
  VideoPortServicesHeadless,
  VideoPortServicesInt10
} VIDEO_PORT_SERVICES;

VPAPI
VP_STATUS
DDKAPI
VideoPortQueryServices(
  /*IN*/ PVOID HwDeviceExtension,
  /*IN*/ VIDEO_PORT_SERVICES ServicesType,
  /*IN OUT*/ PINTERFACE Interface);

VPAPI
VOID
DDKAPI
VideoPortQuerySystemTime(
  /*OUT*/ PLARGE_INTEGER  CurrentTime);

VPAPI
BOOLEAN
DDKAPI
VideoPortQueueDpc(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PMINIPORT_DPC_ROUTINE  CallbackRoutine,
  /*IN*/ PVOID  Context);

VPAPI
VOID
DDKAPI
VideoPortReadPortBufferUchar(
  /*IN*/ PUCHAR  Port,
  /*OUT*/ PUCHAR  Buffer,
  /*IN*/ ULONG  Count);

VPAPI
VOID
DDKAPI
VideoPortReadPortBufferUlong(
  /*IN*/ PULONG  Port,
  /*OUT*/ PULONG  Buffer,
  /*IN*/ ULONG  Count);

VPAPI
VOID
DDKAPI
VideoPortReadPortBufferUshort(
  /*IN*/ PUSHORT  Port,
  /*OUT*/ PUSHORT  Buffer,
  /*IN*/ ULONG  Count);

VPAPI
UCHAR
DDKAPI
VideoPortReadPortUchar(
  /*IN*/ PUCHAR  Port);

VPAPI
ULONG
DDKAPI
VideoPortReadPortUlong(
  /*IN*/ PULONG  Port);

VPAPI
USHORT
DDKAPI
VideoPortReadPortUshort(
  /*IN*/ PUSHORT  Port);

VPAPI
VOID
DDKAPI
VideoPortReadRegisterBufferUchar(
  /*IN*/ PUCHAR  Register,
  /*OUT*/ PUCHAR  Buffer,
  /*IN*/ ULONG  Count);

VPAPI
VOID
DDKAPI
VideoPortReadRegisterBufferUlong(
  /*IN*/ PULONG  Register,
  /*OUT*/ PULONG  Buffer,
  /*IN*/ ULONG  Count);

VPAPI
VOID
DDKAPI
VideoPortReadRegisterBufferUshort(
  /*IN*/ PUSHORT  Register,
  /*OUT*/ PUSHORT  Buffer,
  /*IN*/ ULONG  Count);

VPAPI
UCHAR
DDKAPI
VideoPortReadRegisterUchar(
  /*IN*/ PUCHAR  Register);

VPAPI
ULONG
DDKAPI
VideoPortReadRegisterUlong(
  /*IN*/ PULONG  Register);

VPAPI
USHORT
DDKAPI
VideoPortReadRegisterUshort(
  /*IN*/ PUSHORT  Register);

VPAPI
LONG
DDKAPI
VideoPortReadStateEvent(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PEVENT  pEvent);

VPAPI
VOID
DDKAPI
VideoPortReleaseBuffer(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVOID  Buffer);

VPAPI
VOID
DDKAPI
VideoPortReleaseCommonBuffer(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVP_DMA_ADAPTER  VpDmaAdapter,
  /*IN*/ ULONG  Length,
  /*IN*/ PHYSICAL_ADDRESS  LogicalAddress,
  /*IN*/ PVOID  VirtualAddress,
  /*IN*/ BOOLEAN  CacheEnabled);

VPAPI
VOID
DDKAPI
VideoPortReleaseDeviceLock(
  /*IN*/ PVOID  HwDeviceExtension);

VPAPI
VOID
DDKAPI
VideoPortReleaseSpinLock(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PSPIN_LOCK  SpinLock,
  /*IN*/ UCHAR  NewIrql);

VPAPI
VOID
DDKAPI
VideoPortReleaseSpinLockFromDpcLevel(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PSPIN_LOCK  SpinLock);

VPAPI
BOOLEAN
DDKAPI
VideoPortScanRom(
  PVOID  HwDeviceExtension,
  PUCHAR  RomBase,
  ULONG  RomLength,
  PUCHAR  String);

VPAPI
ULONG
DDKAPI
VideoPortSetBusData(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ BUS_DATA_TYPE  BusDataType,
  /*IN*/ ULONG  SlotNumber,
  /*IN*/ PVOID  Buffer,
  /*IN*/ ULONG  Offset,
  /*IN*/ ULONG  Length);

VPAPI
VOID
DDKAPI
VideoPortSetBytesUsed(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN OUT*/ PDMA  pDma,
  /*IN*/ ULONG  BytesUsed);

VPAPI
VOID
DDKAPI
VideoPortSetDmaContext(
  /*IN*/ PVOID  HwDeviceExtension,
  /*OUT*/ PDMA  pDma,
  /*IN*/ PVOID  InstanceContext);

VPAPI
LONG
DDKAPI
VideoPortSetEvent(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PEVENT  pEvent);

VPAPI
VP_STATUS
DDKAPI
VideoPortSetRegistryParameters(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PWSTR  ValueName,
  /*IN*/ PVOID  ValueData,
  /*IN*/ ULONG  ValueLength);

VPAPI
VP_STATUS
DDKAPI
VideoPortSetTrappedEmulatorPorts(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ ULONG  NumAccessRanges,
  /*IN*/ PVIDEO_ACCESS_RANGE  AccessRange);

VPAPI
BOOLEAN
DDKAPI
VideoPortSignalDmaComplete(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVOID  pDmaHandle);

VPAPI
VOID
DDKAPI
VideoPortStallExecution(
  /*IN*/ ULONG  Microseconds);

VPAPI
VP_STATUS
DDKAPI
VideoPortStartDma(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVP_DMA_ADAPTER  VpDmaAdapter,
  /*IN*/ PVOID  Mdl,
  /*IN*/ ULONG  Offset,
  /*IN OUT*/ PULONG  pLength,
  /*IN*/ PEXECUTE_DMA  ExecuteDmaRoutine,
  /*IN*/ PVOID  Context,
  /*IN*/ BOOLEAN  WriteToDevice);

VPAPI
VOID
DDKAPI
VideoPortStartTimer(
  /*IN*/ PVOID  HwDeviceExtension);

VPAPI
VOID
DDKAPI
VideoPortStopTimer(
  /*IN*/ PVOID  HwDeviceExtension);

  /* VideoPortSynchronizeExecution.Priority constants */
typedef enum VIDEO_SYNCHRONIZE_PRIORITY {
  VpLowPriority = 0,
  VpMediumPriority,
  VpHighPriority
} VIDEO_SYNCHRONIZE_PRIORITY, *PVIDEO_SYNCHRONIZE_PRIORITY;

VPAPI
BOOLEAN
DDKAPI
VideoPortSynchronizeExecution(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ VIDEO_SYNCHRONIZE_PRIORITY  Priority,
  /*IN*/ PMINIPORT_SYNCHRONIZE_ROUTINE  SynchronizeRoutine,
  /*IN*/ PVOID  Context);

VPAPI
VOID
DDKAPI
VideoPortUnLockBuffer(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVOID  Mdl);

VPAPI
BOOLEAN
DDKAPI
VideoPortUnlockPages(
  /*IN*/ PVOID  hwDeviceExtension,
  /*IN OUT*/ PDMA  pDma);

VPAPI
BOOLEAN
DDKAPI
VideoPortUnmapDmaMemory(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVOID  VirtualAddress,
  /*IN*/ HANDLE  ProcessHandle,
  /*IN*/ PDMA  BoardMemoryHandle);

VPAPI
VP_STATUS
DDKAPI
VideoPortUnmapMemory(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN OUT*/ PVOID  VirtualAddress,
  /*IN*/ HANDLE  ProcessHandle);

VPAPI
VP_STATUS
DDKAPI
VideoPortVerifyAccessRanges(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ ULONG  NumAccessRanges,
  /*IN*/ PVIDEO_ACCESS_RANGE  AccessRanges);

VPAPI
VP_STATUS
DDKAPI
VideoPortWaitForSingleObject(
  /*IN*/ PVOID  HwDeviceExtension,
  /*IN*/ PVOID  Object,
  /*IN*/ PLARGE_INTEGER  Timeout /*OPTIONAL*/);

VPAPI
VOID
DDKAPI
VideoPortWritePortBufferUchar(
  /*IN*/ PUCHAR  Port,
  /*IN*/ PUCHAR  Buffer,
  /*IN*/ ULONG  Count);

VPAPI
VOID
DDKAPI
VideoPortWritePortBufferUlong(
  /*IN*/ PULONG  Port,
  /*IN*/ PULONG  Buffer,
  /*IN*/ ULONG  Count);

VPAPI
VOID
DDKAPI
VideoPortWritePortBufferUshort(
  /*IN*/ PUSHORT  Port,
  /*IN*/ PUSHORT  Buffer,
  /*IN*/ ULONG  Count);

VPAPI
VOID
DDKAPI
VideoPortWritePortUchar(
  /*IN*/ PUCHAR  Port,
  /*IN*/ UCHAR  Value);

VPAPI
VOID
DDKAPI
VideoPortWritePortUlong(
  /*IN*/ PULONG  Port,
  /*IN*/ ULONG  Value);

VPAPI
VOID
DDKAPI
VideoPortWritePortUshort(
  /*IN*/ PUSHORT  Port,
  /*IN*/ USHORT  Value);

VPAPI
VOID
DDKAPI
VideoPortWriteRegisterBufferUchar(
  /*IN*/ PUCHAR  Register,
  /*IN*/ PUCHAR  Buffer,
  /*IN*/ ULONG  Count);

VPAPI
VOID
DDKAPI
VideoPortWriteRegisterBufferUlong(
  /*IN*/ PULONG  Register,
  /*IN*/ PULONG  Buffer,
  /*IN*/ ULONG  Count);

VPAPI
VOID
DDKAPI
VideoPortWriteRegisterBufferUshort(
  /*IN*/ PUSHORT  Register,
  /*IN*/ PUSHORT  Buffer,
  /*IN*/ ULONG  Count);

VPAPI
VOID
DDKAPI
VideoPortWriteRegisterUchar(
  /*IN*/ PUCHAR  Register,
  /*IN*/ UCHAR  Value);

VPAPI
VOID
DDKAPI
VideoPortWriteRegisterUlong(
  /*IN*/ PULONG  Register,
  /*IN*/ ULONG  Value);

VPAPI
VOID
DDKAPI
VideoPortWriteRegisterUshort(
  /*IN*/ PUSHORT  Register,
  /*IN*/ USHORT  Value);

VPAPI
VOID
DDKAPI
VideoPortZeroDeviceMemory(
  /*IN*/ PVOID  Destination,
  /*IN*/ ULONG  Length);

VPAPI
VOID
DDKAPI
VideoPortZeroMemory(
  /*IN*/ PVOID  Destination,
  /*2IN*/ ULONG  Length);

#ifdef DBG
#define VideoDebugPrint(x) VideoPortDebugPrint x
#else
#define VideoDebugPrint(x)
#endif

#ifdef __cplusplus
}
#endif

#endif /* defined __WINDDI_H */

#endif /* __VIDEO_H */
@


1.9
log
@	[mingw-Bugs-1424461]
	*include/imagehlp.h: Comment out IN, OUT and OPTIONAL,
	throughout.
	*include/rpcdce.h: Don't define IN, OUT or OPTIONAL if
	_NO_W32_PSEUDO_MODIFIERS.
	*include/rpcnsi.h: Comment out IN, OUT and OPTIONAL,
	throughout.
	*include/rpcnsip.h: Likewise.
	*include/windef.h: Don't define IN, OUT or OPTIONAL
	if _NO_W32_PSEUDO_MODIFIERS.
	*include/ddk/batclass.h: Comment out IN, OUT and OPTIONAL,
	throughout.
	*include/ddk/cfgmgr32.h: Likewise.
	*include/ddk/ddkmapi.h: Likewise.
	*include/ddk/hidclass.h: Likewise.
	*include/ddk/hidpi.h: Likewise.
	*include/ddk/kbdmou.h: Likewise.
	*include/ddk/mcd.h: Likewise.
	*include/ddk/miniport.h: Likewise.
	*include/ddk/minitape.h: Likewise.
	*include/ddk/ndis.h: Likewise.
	*include/ddk/ndistapi.h: Likewise.
	*include/ddk/ndiswan.h: Likewise.
	*include/ddk/ntapi.h: Likewise.
	*include/ddk/ntdd8042.h: Likewise.
	*include/ddk/ntddpcm.h: Likewise.
	*include/ddk/ntifs.h: Likewise.
	*include/ddk/ntpoapi.h: Likewise.
	*include/ddk/parallel.h: Likewise.
	*include/ddk/pfhook.h: Likewise.
	*include/ddk/scsiwmi.h: Likewise.
	*include/ddk/smbus.h: Likewise.
	*include/ddk/srb.h: Likewise.
	*include/ddk/storport.h: Likewise.
	*include/ddk/tdikrnl.h: Likewise.
	*include/ddk/upssvc.h: Likewise.
	*include/ddk/usbcamdi.h: Likewise.
	*include/ddk/usbscan.h: Likewise.
	*include/ddk/video.h: Likewise.
	*include/ddk/videoagp.h: Likewise.
	*include/ddk/win2k.h: Likewise.
	*include/ddk/winddi.h: Likewise.
	*include/ddk/winddk.h: Don't define IN, OUT or OPTIONAL
	if _NO_W32_PSEUDO_MODIFIERS.
	Comment out IN, OUT and OPTIONAL, throughout.
	*include/ddk/winnt4.h: Comment out IN, OUT and OPTIONAL,
	throughout.
	*include/ddk/ws2san.h: Likewise.
@
text
@@


1.8
log
@2004-03-05  Filip Navara  <xnavara@@volny.cz>

	* include/ddk/scsi.h: Replace assert with ASSERT.
	* include/ddk/video.h: Ditto.
	* include/ddk/winddk.h: Ditto. Remove the assert macro.
	* include/ddk/tdi.h: Correct packing.
@
text
@d152 4
a155 4
	IN PVOID  HwDeviceExtension,
	IN PVP_DMA_ADAPTER  VpDmaAdapter,
	IN PVP_SCATTER_GATHER_LIST  SGList,
	IN PVOID  Context);
d159 2
a160 2
  IN PVOID  HwDeviceExtension,
  IN PUCHAR  FunctionName);
d196 5
a200 5
	IN PVOID  HwDeviceExtension,
	IN PVOID  HwContext,
	IN PWSTR  ArgumentString,
	IN OUT  PVIDEO_PORT_CONFIG_INFO  ConfigInfo,
	OUT PUCHAR  Again);
d204 3
a206 3
  IN PVOID  HwDeviceExtension,
  IN ULONG  HwId,
  IN OUT  PVIDEO_POWER_MANAGEMENT  VideoPowerControl);
d232 6
a237 6
  IN PVOID  HwDeviceExtension,
  IN PVIDEO_CHILD_ENUM_INFO  ChildEnumInfo,
  OUT  PVIDEO_CHILD_TYPE  VideoChildType,
  OUT  PUCHAR  pChildDescriptor,
  OUT  PULONG  UId,
  OUT  PULONG  pUnused);
d241 1
a241 1
  IN PVOID  HwDeviceExtension);
d245 1
a245 1
  IN PVOID  HwDeviceExtension);
d265 4
a268 4
  IN ULONG  VendorId,
  IN ULONG  DeviceId,
  IN OUT  PVIDEO_ACCESS_RANGE  *LegacyResourceList,
  IN OUT  PULONG  LegacyResourceCount);
d272 9
a280 9
  IN PVOID  HwDeviceExtension,
  IN PVOID  Context,
  IN VIDEO_DEVICE_DATA_TYPE  DeviceDataType,
  IN PVOID  Identifier,
  IN ULONG  IdentifierLength,
  IN PVOID  ConfigurationData,
  IN ULONG  ConfigurationDataLength,
  IN OUT  PVOID  ComponentInformation,
  IN ULONG  ComponentInformationLength);
d292 2
a293 2
  IN PVOID  HwDeviceExtension,
  IN OUT  PQUERY_INTERFACE  QueryInterface);
d297 5
a301 5
  IN PVOID  HwDeviceExtension,
  IN PVOID  Context,
  IN OUT  PWSTR  ValueName,
  IN OUT  PVOID  ValueData,
  IN ULONG  ValueLength);
d305 3
a307 3
  IN PVOID  HwDeviceExtension,
  IN ULONG  Columns,
  IN ULONG  Rows);
d311 3
a313 3
  IN PVOID  HwDeviceExtension,
  IN ULONG  HwId,
  IN PVIDEO_POWER_MANAGEMENT  VideoPowerControl);
d334 2
a335 2
  IN PVOID  HwDeviceExtension,
  IN PVIDEO_REQUEST_PACKET  RequestPacket);
d339 1
a339 1
  IN PVOID  Context);
d343 1
a343 1
  IN PVOID  HwDeviceExtension);
d347 2
a348 2
  IN PVOID  HwDeviceExtension,
  IN PVOID  Context);
d352 4
a355 4
  IN ULONG_PTR  Context,
  IN ULONG  Port,
  IN UCHAR  AccessMode,
  IN PUCHAR  Data);
d359 5
a363 5
  IN ULONG_PTR  Context,
  IN ULONG  Port,
  IN UCHAR  AccessMode,
  IN PUCHAR  Data,
  IN ULONG  DataLength);
d367 4
a370 4
  IN ULONG_PTR  Context,
  IN ULONG  Port,
  IN UCHAR  AccessMode,
  IN PULONG  Data);
d374 5
a378 5
  IN ULONG_PTR  Context,
  IN ULONG  Port,
  IN UCHAR  AccessMode,
  IN PULONG  Data,
  IN ULONG  DataLength);
d382 4
a385 4
  IN ULONG_PTR  Context,
  IN ULONG  Port,
  IN UCHAR  AccessMode,
  IN PUSHORT  Data);
d389 5
a393 5
  IN ULONG_PTR  Context,
  IN ULONG  Port,
  IN UCHAR  AccessMode,
  IN PUSHORT  Data,
  IN ULONG  DataLength);
d443 1
a443 1
/* VIDEO_PORT_AGP_INTERFACE.Version contants */
d463 1
a463 1
/* VIDEO_PORT_AGP_INTERFACE_2.Version constants */
d467 15
a481 15
  IN USHORT  Size;
  IN USHORT  Version;
  OUT PVOID  Context;
  OUT PINTERFACE_REFERENCE  InterfaceReference;
  OUT PINTERFACE_DEREFERENCE  InterfaceDereference;
  OUT PAGP_RESERVE_PHYSICAL  AgpReservePhysical;
  OUT PAGP_RELEASE_PHYSICAL  AgpReleasePhysical;
  OUT PAGP_COMMIT_PHYSICAL  AgpCommitPhysical;
  OUT PAGP_FREE_PHYSICAL  AgpFreePhysical;
  OUT PAGP_RESERVE_VIRTUAL  AgpReserveVirtual;
  OUT PAGP_RELEASE_VIRTUAL  AgpReleaseVirtual;
  OUT PAGP_COMMIT_VIRTUAL  AgpCommitVirtual;
  OUT PAGP_FREE_VIRTUAL  AgpFreeVirtual;
  OUT ULONGLONG  AgpAllocationLimit;
  OUT PAGP_SET_RATE  AgpSetRate;
d506 4
a509 4
  IN PVIDEO_WRITE_CLOCK_LINE  WriteClockLine;
  IN PVIDEO_WRITE_DATA_LINE  WriteDataLine;
  IN PVIDEO_READ_CLOCK_LINE  ReadClockLine;
  IN PVIDEO_READ_DATA_LINE  ReadDataLine;
d514 2
a515 2
  IN PVOID  HwDeviceExtension,
  IN PI2C_CALLBACKS  I2CCallbacks);
d519 2
a520 2
  IN PVOID  HwDeviceExtension,
  IN PI2C_CALLBACKS  I2CCallbacks);
d524 4
a527 4
  IN PVOID  HwDeviceExtension,
  IN PI2C_CALLBACKS  I2CCallbacks,
  IN PUCHAR  Buffer,
  IN ULONG  Length);
d531 4
a534 4
  IN PVOID  HwDeviceExtension,
  IN PI2C_CALLBACKS  I2CCallbacks,
  OUT PUCHAR  Buffer,
  IN ULONG  Length);
d548 1
a548 1
/* VIDEO_PORT_INT10_INTERFACE.Version constants */
d553 4
a556 4
  IN PVOID  Context,
  OUT PUSHORT  Seg,
  OUT PUSHORT  Off,
  IN OUT PULONG  Length);
d560 2
a561 2
  IN PVOID  Context,
  IN OUT PINT10_BIOS_ARGUMENTS  BiosArguments);
d565 3
a567 3
  IN PVOID  Context,
  IN USHORT  Seg,
  IN USHORT  Off);
d571 5
a575 5
  IN PVOID  Context,
  IN USHORT  Seg,
  IN USHORT  Off,
  OUT PVOID  Buffer,
  IN ULONG  Length);
d579 5
a583 5
  IN PVOID  Context,
  IN USHORT  Seg,
  IN USHORT  Off,
  IN PVOID  Buffer,
  IN ULONG  Length);
d586 10
a595 10
  IN USHORT  Size;
  IN USHORT  Version;
  OUT PVOID  Context;
  OUT PINTERFACE_REFERENCE  InterfaceReference;
  OUT PINTERFACE_DEREFERENCE  InterfaceDereference;
  OUT PINT10_ALLOCATE_BUFFER  Int10AllocateBuffer;
  OUT PINT10_FREE_BUFFER  Int10FreeBuffer;
  OUT PINT10_READ_MEMORY  Int10ReadMemory;
  OUT PINT10_WRITE_MEMORY  Int10WriteMemory;
  OUT PINT10_CALL_BIOS  Int10CallBios;
d598 1
a598 1
/* Flags for VideoPortGetDeviceBase and VideoPortMapMemory */
d623 6
a628 6
  IN ULONG  Size;
  OUT ULONG  MajorVersion;
  OUT ULONG  MinorVersion;
  OUT ULONG  BuildNumber;
  OUT USHORT  ServicePackMajor;
  OUT USHORT  ServicePackMinor;
d633 1
a633 1
/* Video port functions for miniports */
d639 3
a641 3
  IN ULONG  DebugPrintLevel,
  IN PCHAR  DebugMessage,
  IN ...);
d647 1
a647 1
  IN PVOID  HwDeviceExtension);
d653 3
a655 3
  IN PVOID  HwDeviceExtension,
  IN PSPIN_LOCK  SpinLock,
  OUT PUCHAR  OldIrql);
d661 2
a662 2
  IN PVOID  HwDeviceExtension,
  IN PSPIN_LOCK  SpinLock);
d668 3
a670 3
  IN PVOID  HwDeviceExtension,
  IN ULONG  Size,
  OUT PVOID  *Buffer);
d676 5
a680 5
  IN PVOID  HwDeviceExtension,
  IN PVP_DMA_ADAPTER  VpDmaAdapter,
  IN ULONG  DesiredLength,
  OUT PPHYSICAL_ADDRESS  LogicalAddress,
  IN BOOLEAN  CacheEnabled,
d687 3
a689 3
  IN PVOID  HwDeviceExtension,
  IN ULONG  NumberOfBytes,
  IN PHYSICAL_ADDRESS  HighestAcceptableAddress);
d691 1
a691 1
/* VideoPortAllocatePool.PoolType constants */
d703 4
a706 4
  IN PVOID  HwDeviceExtension,
  IN VP_POOL_TYPE  PoolType,
  IN SIZE_T  NumberOfBytes,
  IN ULONG  Tag);
d712 4
a715 4
  IN PVOID  HwDeviceExtension,
  IN OUT PVIDEO_REQUEST_PACKET  pVrp,
  IN PVOID  MappedUserEvent,
  IN PVOID  DisplayDriverEvent);
d717 1
a717 1
/* VideoPortCheckForDeviceExistence.Flags constants */
d725 7
a731 7
  IN PVOID  HwDeviceExtension,
  IN USHORT  VendorId,
  IN USHORT  DeviceId,
  IN UCHAR  RevisionId,
  IN USHORT  SubVendorId,
  IN USHORT  SubSystemId,
  IN ULONG  Flags);
d737 2
a738 2
  IN PVOID  HwDeviceExtension,
  IN PEVENT  pEvent);
d744 3
a746 3
  IN PVOID  Source1,
  IN PVOID  Source2,
  IN ULONG  Length);
d752 4
a755 4
  IN PVOID  HwDeviceExtension,
  IN PVP_DMA_ADAPTER  VpDmaAdapter,
  IN PVP_SCATTER_GATHER_LIST  VpScatterGather,
  IN BOOLEAN  WriteToDevice);
d761 4
a764 4
  IN PVOID  HwDeviceExtension,
  IN ULONG  EventFlag,
  IN PVOID  Unused,
  OUT PEVENT  *ppEvent);
d770 3
a772 3
  IN PVOID  HwDeviceExtension,
  IN OUT PVOID  *SecondaryDeviceExtension,
  IN ULONG  ulFlag);
d778 2
a779 2
  IN PVOID  HwDeviceExtension,
  OUT PSPIN_LOCK  *SpinLock);
d782 3
a784 3
  IN ULONG  Size;
  IN I2C_CALLBACKS  I2CCallbacks;
  IN UCHAR  EdidSegment;
d791 4
a794 4
  IN PVOID  HwDeviceExtension,
  IN PVOID  DDCControl,
  IN OUT PUCHAR  EdidBuffer,
  IN ULONG  EdidBufferSize);
d800 3
a802 3
  IN VIDEO_DEBUG_LEVEL  DebugPrintLevel,
  IN PCHAR  DebugMessage,
  IN ...);
d808 2
a809 2
  IN PVOID  HwDeviceExtension,
  IN PEVENT  pEvent);
d815 2
a816 2
  IN PVOID  HwDeviceExtension,
  IN PSPIN_LOCK  SpinLock);
d822 1
a822 1
  IN PVOID  HwDeviceExtension);
d828 3
a830 3
  IN PVOID  HwDeviceExtension,
  IN PDMA  pDma,
  IN DMA_FLAGS  DmaFlags);
d836 1
a836 1
  IN PVOID  HwDeviceExtension);
d842 2
a843 2
  IN PVOID  HwDeviceExtension,
  IN PVOID  Reserved);
d849 5
a853 5
  IN PVOID  HwDeviceExtension,
  IN ULONG  Length,
  IN PVOID  VirtualAddress,
  IN PHYSICAL_ADDRESS  LogicalAddress,
  IN BOOLEAN  CacheEnabled);
d859 2
a860 2
  IN PVOID  HwDeviceExtension,
  IN PVOID  MappedAddress);
d866 2
a867 2
  IN PVOID  HwDeviceExtension,
  IN PVOID  Ptr);
d873 8
a880 8
  IN PVOID  HwDeviceExtension,
  IN ULONG  NumRequestedResources,
  IN PIO_RESOURCE_DESCRIPTOR  RequestedResources  OPTIONAL,
  IN ULONG  NumAccessRanges,
  OUT PVIDEO_ACCESS_RANGE  AccessRanges,
  IN PVOID  VendorId,
  IN PVOID  DeviceId,
  OUT PULONG  Slot);
d886 1
a886 1
  IN PVOID  DeviceObject);
d892 1
a892 1
  IN PVOID DeviceObject);
d898 6
a903 6
  IN PVOID  HwDeviceExtension,
  IN BUS_DATA_TYPE  BusDataType,
  IN ULONG  SlotNumber,
  IN OUT PVOID  Buffer,
  IN ULONG  Offset,
  IN ULONG  Length);
d909 2
a910 2
  IN PVOID  HwDeviceExtension,
  IN PDMA  pDma);
d916 6
a921 6
  IN PVOID  HwDeviceExtension,
  IN ULONG  DesiredLength,
  IN ULONG  Alignment,
  OUT PPHYSICAL_ADDRESS  LogicalAddress,
  OUT PULONG  pActualLength,
  IN BOOLEAN  CacheEnabled);
d933 4
a936 4
  IN PVOID  HwDeviceExtension,
  IN PHYSICAL_ADDRESS  IoAddress,
  IN ULONG  NumberOfUchars,
  IN UCHAR  InIoSpace);
d942 4
a945 4
  IN PVOID  HwDeviceExtension,
  IN VIDEO_DEVICE_DATA_TYPE  DeviceDataType,
  IN PMINIPORT_QUERY_DEVICE_ROUTINE  CallbackRoutine,
  IN PVOID  Context);
d951 2
a952 2
  IN PVOID  HwDeviceExtension,
  IN PVP_DEVICE_DESCRIPTION  VpDeviceDescription);
d958 2
a959 2
  IN PVOID  HwDeviceExtension,
  IN PDMA  pDma);
d965 2
a966 2
  IN PVOID  HwDeviceExtension,
  IN PDMA  pDma);
d972 5
a976 5
  IN PVOID  HwDeviceExtension,
  IN PWSTR  ParameterName,
  IN UCHAR  IsParameterFileName,
  IN PMINIPORT_GET_REGISTRY_ROUTINE  CallbackRoutine,
  IN PVOID  Context);
d982 4
a985 4
  IN PVOID  HwDeviceExtension,
  IN PVOID  Unused1,
  IN ULONG  Unused2,
  IN ULONG  Length);
d991 2
a992 2
  IN PVOID  HwDeviceExtension,
  IN OUT PVPOSVERSIONINFO  pVpOsVersionInfo);
d998 2
a999 2
  IN PVOID  HwDeviceExtension,
  OUT PULONG  VgaStatus);
d1005 4
a1008 4
  IN PVOID  Argument1,
  IN PVOID  Argument2,
  IN PVIDEO_HW_INITIALIZATION_DATA  HwInitializationData,
  IN PVOID  HwContext);
d1014 2
a1015 2
  IN PVOID  HwDeviceExtension,
  IN PVIDEO_X86_BIOS_ARGUMENTS  BiosArguments);
d1021 1
a1021 1
  IN PLONG  Addend);
d1027 2
a1028 2
  IN OUT PLONG  Target,
  IN LONG  Value);
d1034 1
a1034 1
  IN PLONG  Addend);
d1046 4
a1049 4
  IN PVOID  HwDeviceExtension,
  IN PVOID  BaseAddress,
  IN ULONG  Length,
  IN VP_LOCK_OPERATION  Operation);
d1055 5
a1059 5
  IN PVOID  HwDeviceExtension,
  IN OUT PVIDEO_REQUEST_PACKET  pVrp,
  IN OUT PEVENT  pUEvent,
  IN PEVENT  pDisplayEvent,
  IN DMA_FLAGS  DmaFlags);
d1065 4
a1068 4
  IN PVOID  HwDeviceExtension,
  IN PVIDEO_REQUEST_PACKET  Vrp  OPTIONAL,
  IN VP_STATUS  ErrorCode,
  IN ULONG  UniqueId);
d1074 3
a1076 3
  IN PVOID  HwDeviceExtension,
  IN PHYSICAL_ADDRESS  PhysicalAddress,
  IN OUT PULONG  Length,
d1088 8
a1095 8
  IN PVOID  HwDeviceExtension,
  IN PVIDEO_REQUEST_PACKET  pVrp,
  IN PHYSICAL_ADDRESS  BoardAddress,
  IN PULONG  Length,
  IN PULONG  InIoSpace,
  IN PVOID  MappedUserEvent,
  IN PVOID  DisplayDriverEvent,
  IN OUT PVOID  *VirtualAddress);
d1101 5
a1105 5
  IN PVOID  HwDeviceExtension,
  IN PHYSICAL_ADDRESS  PhysicalAddress,
  IN OUT PULONG  Length,
  IN PULONG  InIoSpace,
  IN OUT PVOID  *VirtualAddress);
d1111 3
a1113 3
  IN PVOID  Destination,
  IN PVOID  Source,
  IN ULONG  Length);
d1119 2
a1120 2
  IN PVOID  HwDeviceExtension,
  IN PVP_DMA_ADAPTER  VpDmaAdapter);
d1126 2
a1127 2
  IN PVOID  HwDeviceExtension,
  OUT PLONGLONG  PerformanceFrequency  OPTIONAL);
d1129 1
a1129 1
/* VideoPortQueryServices.ServicesType constants */
d1141 3
a1143 3
  IN PVOID HwDeviceExtension,
  IN VIDEO_PORT_SERVICES ServicesType,
  IN OUT PINTERFACE Interface);
d1149 1
a1149 1
  OUT PLARGE_INTEGER  CurrentTime);
d1155 3
a1157 3
  IN PVOID  HwDeviceExtension,
  IN PMINIPORT_DPC_ROUTINE  CallbackRoutine,
  IN PVOID  Context);
d1163 3
a1165 3
  IN PUCHAR  Port,
  OUT PUCHAR  Buffer,
  IN ULONG  Count);
d1171 3
a1173 3
  IN PULONG  Port,
  OUT PULONG  Buffer,
  IN ULONG  Count);
d1179 3
a1181 3
  IN PUSHORT  Port,
  OUT PUSHORT  Buffer,
  IN ULONG  Count);
d1187 1
a1187 1
  IN PUCHAR  Port);
d1193 1
a1193 1
  IN PULONG  Port);
d1199 1
a1199 1
  IN PUSHORT  Port);
d1205 3
a1207 3
  IN PUCHAR  Register,
  OUT PUCHAR  Buffer,
  IN ULONG  Count);
d1213 3
a1215 3
  IN PULONG  Register,
  OUT PULONG  Buffer,
  IN ULONG  Count);
d1221 3
a1223 3
  IN PUSHORT  Register,
  OUT PUSHORT  Buffer,
  IN ULONG  Count);
d1229 1
a1229 1
  IN PUCHAR  Register);
d1235 1
a1235 1
  IN PULONG  Register);
d1241 1
a1241 1
  IN PUSHORT  Register);
d1247 2
a1248 2
  IN PVOID  HwDeviceExtension,
  IN PEVENT  pEvent);
d1254 2
a1255 2
  IN PVOID  HwDeviceExtension,
  IN PVOID  Buffer);
d1261 6
a1266 6
  IN PVOID  HwDeviceExtension,
  IN PVP_DMA_ADAPTER  VpDmaAdapter,
  IN ULONG  Length,
  IN PHYSICAL_ADDRESS  LogicalAddress,
  IN PVOID  VirtualAddress,
  IN BOOLEAN  CacheEnabled);
d1272 1
a1272 1
  IN PVOID  HwDeviceExtension);
d1278 3
a1280 3
  IN PVOID  HwDeviceExtension,
  IN PSPIN_LOCK  SpinLock,
  IN UCHAR  NewIrql);
d1286 2
a1287 2
  IN PVOID  HwDeviceExtension,
  IN PSPIN_LOCK  SpinLock);
d1302 6
a1307 6
  IN PVOID  HwDeviceExtension,
  IN BUS_DATA_TYPE  BusDataType,
  IN ULONG  SlotNumber,
  IN PVOID  Buffer,
  IN ULONG  Offset,
  IN ULONG  Length);
d1313 3
a1315 3
  IN PVOID  HwDeviceExtension,
  IN OUT PDMA  pDma,
  IN ULONG  BytesUsed);
d1321 3
a1323 3
  IN PVOID  HwDeviceExtension,
  OUT PDMA  pDma,
  IN PVOID  InstanceContext);
d1329 2
a1330 2
  IN PVOID  HwDeviceExtension,
  IN PEVENT  pEvent);
d1336 4
a1339 4
  IN PVOID  HwDeviceExtension,
  IN PWSTR  ValueName,
  IN PVOID  ValueData,
  IN ULONG  ValueLength);
d1345 3
a1347 3
  IN PVOID  HwDeviceExtension,
  IN ULONG  NumAccessRanges,
  IN PVIDEO_ACCESS_RANGE  AccessRange);
d1353 2
a1354 2
  IN PVOID  HwDeviceExtension,
  IN PVOID  pDmaHandle);
d1360 1
a1360 1
  IN ULONG  Microseconds);
d1366 8
a1373 8
  IN PVOID  HwDeviceExtension,
  IN PVP_DMA_ADAPTER  VpDmaAdapter,
  IN PVOID  Mdl,
  IN ULONG  Offset,
  IN OUT PULONG  pLength,
  IN PEXECUTE_DMA  ExecuteDmaRoutine,
  IN PVOID  Context,
  IN BOOLEAN  WriteToDevice);
d1379 1
a1379 1
  IN PVOID  HwDeviceExtension);
d1385 1
a1385 1
  IN PVOID  HwDeviceExtension);
d1387 1
a1387 1
/* VideoPortSynchronizeExecution.Priority constants */
d1398 4
a1401 4
  IN PVOID  HwDeviceExtension,
  IN VIDEO_SYNCHRONIZE_PRIORITY  Priority,
  IN PMINIPORT_SYNCHRONIZE_ROUTINE  SynchronizeRoutine,
  IN PVOID  Context);
d1407 2
a1408 2
  IN PVOID  HwDeviceExtension,
  IN PVOID  Mdl);
d1414 2
a1415 2
  IN PVOID  hwDeviceExtension,
  IN OUT PDMA  pDma);
d1421 4
a1424 4
  IN PVOID  HwDeviceExtension,
  IN PVOID  VirtualAddress,
  IN HANDLE  ProcessHandle,
  IN PDMA  BoardMemoryHandle);
d1430 3
a1432 3
  IN PVOID  HwDeviceExtension,
  IN OUT PVOID  VirtualAddress,
  IN HANDLE  ProcessHandle);
d1438 3
a1440 3
  IN PVOID  HwDeviceExtension,
  IN ULONG  NumAccessRanges,
  IN PVIDEO_ACCESS_RANGE  AccessRanges);
d1446 3
a1448 3
  IN PVOID  HwDeviceExtension,
  IN PVOID  Object,
  IN PLARGE_INTEGER  Timeout  OPTIONAL);
d1454 3
a1456 3
  IN PUCHAR  Port,
  IN PUCHAR  Buffer,
  IN ULONG  Count);
d1462 3
a1464 3
  IN PULONG  Port,
  IN PULONG  Buffer,
  IN ULONG  Count);
d1470 3
a1472 3
  IN PUSHORT  Port,
  IN PUSHORT  Buffer,
  IN ULONG  Count);
d1478 2
a1479 2
  IN PUCHAR  Port,
  IN UCHAR  Value);
d1485 2
a1486 2
  IN PULONG  Port,
  IN ULONG  Value);
d1492 2
a1493 2
  IN PUSHORT  Port,
  IN USHORT  Value);
d1499 3
a1501 3
  IN PUCHAR  Register,
  IN PUCHAR  Buffer,
  IN ULONG  Count);
d1507 3
a1509 3
  IN PULONG  Register,
  IN PULONG  Buffer,
  IN ULONG  Count);
d1515 3
a1517 3
  IN PUSHORT  Register,
  IN PUSHORT  Buffer,
  IN ULONG  Count);
d1523 2
a1524 2
  IN PUCHAR  Register,
  IN UCHAR  Value);
d1530 2
a1531 2
  IN PULONG  Register,
  IN ULONG  Value);
d1537 2
a1538 2
  IN PUSHORT  Register,
  IN USHORT  Value);
d1544 2
a1545 2
  IN PVOID  Destination,
  IN ULONG  Length);
d1551 2
a1552 2
  IN PVOID  Destination,
  IN ULONG  Length);
@


1.7
log
@2004-02-23  Filip Navara  <xnavara@@volny.cz>

	* include/ddk/video.h: Corrected packing.
@
text
@d98 1
a98 1
    assert(FALSE); \
@


1.6
log
@2004-01-15  Filip Navara  <xnavara@@volny.cz>

	* include/ddk/mcd.h: Don't care about value of DBG define.
	* include/ddk/srb.h: Ditto.
	* include/ddk/storport.h: Ditto.
	* include/ddk/video.h: Ditto.
	* include/nspapi.h (SetServiceW, GetAddressByNameA,
	GetAddressByNameW): Correct protoype.
	* include/ntsecapi.h (PCUNICODE_STRING): Define.
@
text
@a38 2
#pragma pack(push,4)

a1558 2

#pragma pack(pop)
@


1.5
log
@	Clean up warnings in ddk.

	* include/ddk/atm.h (_ATM_AAL_OOB_INFO): Add _ANONYMOUS_UNION,
	conditional on  __cplusplus.
	* include/ddk/scsi.h: Add _ANONYMOUS_UNION and _ANONYMOUS_STRUCT
	defines, throughout.
	(_CDB): Add _ANONYMOUS_UNION, conditional on __cplusplus.
	* include/ddk/cfg.h (_PNP_VETO_TYPE): Remove extra comma.
	* include/ddk/cfgmgr32.h: Change C++ comment style to ISO C.
	* include/ddk/ddkmapi.h (_DDLOCKOUT): Add _ANONYMOUS_UNION defines.
	* include/ddk/hidpi.h: Add _ANONYMOUS_UNION and _ANONYMOUS_STRUCT
	defines, throughout.
	* include/ddk/ndis.h: Add _ANONYMOUS_UNION and _ANONYMOUS_STRUCT
	defines, throughout. Remove trailing semicolon from *_S 'structure'
	macro expansion, throughout. Remove trailing semicolon from
	DECLARE_UNKNOWN_STRUCT macro expansion.
	* include/ddk/ndiswan.h (_NDIS_WAN_COMPRESS_INFO): Add
	_ANONYMOUS_UNION.
	* include/ddk/ntapi.h (_PROCESS_DEVICEMAP_INFORMATION,
	_PROCESS_SESSION_INFORMATION): Add _ANONYMOUS_UNION.
	* include/ddk/ntddcdrm.h (CDROM_TOC_CD_TEXT_DATA_BLOCK):
	Add _ANONYMOUS_UNION.
	* include/ddk/ntdddisk.h: Add _ANONYMOUS_UNION, throughout.
	* include/ddk/ntddmou.h:  Add _ANONYMOUS_UNION, throughout.
	* include/ddk/ntifs.h:  Add _ANONYMOUS_UNION, throughout.
	(ZwQueryObject): Change 2nd param to OBJECT_INFORMATION_CLASS, to
	match proto in ntapi.h.
	(ZwSetInformationObject): Likewise.
	* include/ddk/srb.h (SCSI_REQUEST_BLOCK): Add _ANONYMOUS_UNION.
	(SCSI_ADAPTER_CONTROL_TYPE): Add __extension__.
	* include/ddk/tdikrnl.h (TDI20_CLIENT_INTERFACE_INFO): Add
	_ANONYMOUS_UNION and _ANONYMOUS_STRUCT.
	* include/ddk/usb.h (USB): Add _ANONYMOUS_UNION.
	* include/ddk/usbcamdi.h (USBCAMD_CamControlFlags): Remove
	last comma.
	* include/ddk/video.h (STATUS_BLOCK): Add _ANONYMOUS_UNION.
	* include/ddk/winddk.h (DECLARE_INTERNAL_OBJECT): Remove
	trailing semicolon when expanding macro.
	(GENERAL_LOOKASIDE_S): Likewise.
	Add _ANONYMOUS_UNION and _ANONYMOUS_STRUCT, throughout.
	Change inline to __inline, throughout.
	* include/ddk/winnt4.h: Change inline to __inline, throughout.
@
text
@d94 1
a94 1
#if DBG
d1556 1
a1556 1
#if DBG
@


1.4
log
@	* include/ddk/hidusage.h: Remove unneccessary #pragma pack's.
	* include/ddk/miniport.h (EMULATOR_PORT_ACCESS_TYPE): Define
	before using.
	(VIDEO_ACCESS_RANGE): Guard against prior definition.
	* include/ddk/minitape.h (INQUIRYDATA): Guard against prior
	definition.
	* include/ddk/ndis.h (DECLARE_UNKNOWN_PROTOTYPE): Correct macro.
	* include/ddk/ndisguid.h: Remove unneccessary #pragma pack's.
	* include/ddk/scsi.h (INQUIRYDATA): Guard against prior
	definition.
	* include/ddk/scsiwmi.h (GUID): Define if not already done.
	(LPCGUID): Likewise.
	* include/ddk/tdi.h: Close "Listen flags" comment.
	* include/ddk/tdistat.h: Remove unneccessary #pragma pack's.
	* include/ddk/video.h:	Add #pragma pack(push,4) to balance.
	(VIDEO_ACCESS_RANGE): Guard against prior definition.
	* include/ddk/videoagp.h:Add #pragma pack(push,4) to balance.
	* include/ddk/win2k.h: Likewise.
	* include/ddk/winddi.h: Likewise.
	* include/ddk/winddk.h: Likewise.
	* include/ddk/winnt4.h: Likewise.
	* include/ddk/ws2san.h: Likewise.
	* include/ddk/xfilter.h: Remove unbalanced #pragma pack(pop).
	* include/ddk/video.h: Don't process rest of file ifdef
	__WINDDI_H.
	* include/ddk/winddi.h: Don't process rest of file ifdef
	__VIDEO_H.
	* include/ddk/usb.h: Don't process rest of file ifdef
	__USBDI_H.
	* include/ddk/usbdi.h: Don't process rest of file ifdef
	__USB_H.
	* include/ddk/usbcamdi.h: Don't process rest of file if
	!defined(__USB_H) && !defined(__USBDI_H)
@
text
@d318 1
a318 1
  union {
d321 1
a321 1
  };
@


1.3
log
@	* include/ddk/(atm.h, batclass.h, cfg.h, cfgmgr32.h, d4drvif.h,
	d4iface.h, ddkmapi.h, hidclass.h, hidpi.h, hidusage.h, mcd.h,
	miniport.h, minitape.h, mountdev.h, mountmgr.h, ndis.h,
	ndisquid.h, ndistapi.h, ndisvan.h, netevent.h, netpnp.h,
	netdev.h, ntapi.h, ntdd8042.h, ntddbeep.h, ntddcdrm.h,
	ntddcdvd.h, ntddchgr.h, ntdddisk.h, ntddk.h, ntddkbd.h,
	ntddmou.h, ntddndis.h, ntddpar.h, ntddpcm.h, ntddscsi.h,
	ntddser.h, ntddstor.h, ntddtape.h, ntddtdi.h, ntddvdeo.h,
	ntddvol.h, ntifs.h, ntpoapi.h, ntstatus.h, parallel.h, pfhook.h,
	poclass.h, scsi.h, scsiscan.h, scsiwmi.h, smbus.h, srb.h,
	storport.h, tdi.h, tdiinfo.h, tdikrnl.h, tdistat.h, tvout.h,
	upssvc.h, usb.h, usb100.h, usbcamdi.h, usbdi.h, usbioctl.h,
	usbiodef.h, usbscan.h, usbuser.h, video.h, videoagp.h, win2k.h,
	winddi.h, winddk.h, winnt4.h, winxp.h, ws2san.h,
	xfilter.h): Change comment to refer w32api package, not MinGW.
@
text
@a25 3
#ifdef __WINDDI_H
#error winddi.h cannot be included with video.h
#endif
d31 4
d39 2
d253 2
d263 1
d1567 2
@


1.2
log
@	* include/ddk/(atm.h, batclass.h, cfg.h, cfgmgr32.h, d4drvif.h,
	d4iface.h, ddkmapi.h, hidclass.h, hidpi.h, hidusage.h, mcd.h,
	miniport.h, minitape.h, mountdev.h, mountmgr.h, ndis.h,
	ndisquid.h, ndistapi.h, ndisvan.h, netevent.h, netpnp.h,
	netdev.h, ntapi.h, ntdd8042.h, ntddbeep.h, ntddcdrm.h,
	ntddcdvd.h, ntddchgr.h, ntdddisk.h, ntddk.h, ntddkbd.h,
	ntddmou.h, ntddndis.h, ntddpar.h, ntddpcm.h, ntddscsi.h,
	ntddser.h, ntddstor.h, ntddtape.h, ntddtdi.h, ntddvdeo.h,
	ntddvol.h, ntifs.h, ntpoapi.h, ntstatus.h, parallel.h, pfhook.h,
	poclass.h, scsi.h, scsiscan.h, scsiwmi.h, smbus.h, srb.h,
	storport.h, tdi.h, tdiinfo.h, tdikrnl.h, tdistat.h, tvout.h,
	upssvc.h, usb.h, usb100.h, usbcamdi.h, usbdi.h, usbioctl.h,
	usbiodef.h, usbscan.h, usbuser.h, video.h, videoagp.h, win2k.h,
	winddi.h, winddk.h, winnt4.h, winxp.h, ws2san.h,
	xfilter.h): Fix typo in disclaimer comment.
@
text
@d6 1
a6 1
 * This file is part of the MinGW package.
@


1.1
log
@
2002-10-06  Casper Hornstrup  <chorns@@it.dk>

	* include/ddk: New subdir.
	* lib/ddk: Ditto.
	* include/ddk/(atm.h, batclass.h, cfg.h, cfgmgr32.h, d4drvif.h,
	d4iface.h, ddkmapi.h, hidclass.h, hidpi.h, hidusage.h, mcd.h,
	miniport.h, minitape.h, mountdev.h, mountmgr.h, ndis.h,
	ndisquid.h, ndistapi.h, ndisvan.h, netevent.h, netpnp.h,
	netdev.h, ntapi.h, ntdd8042.h, ntddbeep.h, ntddcdrm.h,
	ntddcdvd.h, ntddchgr.h, ntdddisk.h, ntddk.h, ntddkbd.h,
	ntddmou.h, ntddndis.h, ntddpar.h, ntddpcm.h, ntddscsi.h,
	ntddser.h, ntddstor.h, ntddtape.h, ntddtdi.h, ntddvdeo.h,
	ntddvol.h, ntifs.h, ntpoapi.h, ntstatus.h, parallel.h, pfhook.h,
	poclass.h, scsi.h, scsiscan.h, scsiwmi.h, smbus.h, srb.h,
	storport.h, tdi.h, tdiinfo.h, tdikrnl.h, tdistat.h, tvout.h,
	upssvc.h, usb.h, usb100.h, usbcamdi.h, usbdi.h, usbioctl.h,
	usbiodef.h, usbscan.h, usbuser.h, video.h, videoagp.h, win2k.h,
	winddi.h, winddk.h, winnt4.h, winxp.h, ws2san.h,
	xfilter.h): New files.
	* lib/ddk/(Makefile.in, apcups.def, cfgmgr32.def, dxapi.def,
	hal.def, hid.def, hidparse.def, mcd.def, ndis.def, ntoskrnl.def,
	scsiport.def, tdi.def, usbcamd.def, usbcamd2.def, videoprt.def,
	win32k.def): Ditto.
@
text
@d18 1
a18 1
 * DISCLAMED. This includes but is not limited to warranties of
@

