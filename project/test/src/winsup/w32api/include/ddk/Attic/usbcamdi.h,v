head	1.7;
access;
symbols
	cygwin-1_7_17-release:1.6
	cygwin-64bit-branch:1.6.0.8
	cygwin-1_7_16-release:1.6
	cygwin-1_7_15-release:1.6
	cygwin-1_7_14_2-release:1.6
	cygwin-1_7_14-release:1.6
	cygwin-1_7_12-release:1.6
	cygwin-1_7_11-release:1.6
	cygwin-1_7_10-release:1.6
	cygwin-1_7_9-release:1.6
	cygwin-1_7_8-release:1.6
	cygwin-1_7_7-release:1.6
	cygwin-1_7_5-release:1.6
	cygwin-1_7_4-release:1.6
	cygwin-1_7_3-release:1.6
	cygwin-1_7_2-release:1.6
	cygwin-1_7_1-release:1.6
	cv-branch-2:1.6.0.6
	cr-0x5f1:1.6.0.4
	cv-branch:1.6.0.2
	cr-0x3b58:1.5.0.12
	cr-0x9e:1.5.0.10
	cr-0x9d:1.5.0.8
	corinna-01:1.5
	cr-0x9c:1.5.0.6
	cr-0x9b:1.5.0.4
	cr-0x99:1.5
	Z-emcb-cygwin_daemon:1.5.0.2
	w32api-2_2:1.4
	mingw-runtime-2_4:1.4;
locks; strict;
comment	@ * @;


1.7
date	2012.11.07.16.52.41;	author cgf;	state dead;
branches;
next	1.6;

1.6
date	2006.06.12.00.55.06;	author dannysmith;	state Exp;
branches;
next	1.5;

1.5
date	2003.07.16.21.49.02;	author dannysmith;	state Exp;
branches;
next	1.4;

1.4
date	2002.12.19.01.34.25;	author dannysmith;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.15.01.08.17;	author dannysmith;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.12.21.34.06;	author dannysmith;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.06.22.18.25;	author earnie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@/*
 * usbcamdi.h
 *
 * USB Camera driver interface.
 *
 * This file is part of the w32api package.
 *
 * Contributors:
 *   Created by Casper S. Hornstrup <chorns@@users.sourceforge.net>
 *
 * THIS SOFTWARE IS NOT COPYRIGHTED
 *
 * This source code is offered for use in the public domain. You may
 * use, modify or distribute it freely.
 *
 * This code is distributed in the hope that it will be useful but
 * WITHOUT ANY WARRANTY. ALL WARRANTIES, EXPRESS OR IMPLIED ARE HEREBY
 * DISCLAIMED. This includes but is not limited to warranties of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

#ifndef __USBCAMDI_H
#define __USBCAMDI_H

#if __GNUC__ >=3
#pragma GCC system_header
#endif

#if !defined(__USB_H) && !defined(__USBDI_H)
#error include usb.h or usbdi.h before usbcamdi.h
#else

#ifdef __cplusplus
extern "C" {
#endif

#pragma pack(push,4)

#include "ntddk.h"

#if defined(_BATTERYCLASS_)
  #define USBCAMAPI DECLSPEC_EXPORT
#else
  #define USBCAMAPI DECLSPEC_IMPORT
#endif


/* FIXME: Unknown definition */
typedef PVOID PHW_STREAM_REQUEST_BLOCK;

DEFINE_GUID(GUID_USBCAMD_INTERFACE,
  0x2bcb75c0, 0xb27f, 0x11d1, 0xba, 0x41, 0x0, 0xa0, 0xc9, 0xd, 0x2b, 0x5);

#define USBCAMD_PROCESSPACKETEX_DropFrame             0x0002 
#define USBCAMD_PROCESSPACKETEX_NextFrameIsStill      0x0004 
#define USBCAMD_PROCESSPACKETEX_CurrentFrameIsStill   0x0008 

#define USBCAMD_DATA_PIPE                 0x0001
#define USBCAMD_MULTIPLEX_PIPE            0x0002
#define USBCAMD_SYNC_PIPE                 0x0004
#define USBCAMD_DONT_CARE_PIPE            0x0008

#define USBCAMD_VIDEO_STREAM              0x1
#define USBCAMD_STILL_STREAM              0x2
#define USBCAMD_VIDEO_STILL_STREAM        (USBCAMD_VIDEO_STREAM | USBCAMD_STILL_STREAM)

#define USBCAMD_STOP_STREAM               0x00000001
#define USBCAMD_START_STREAM              0x00000000

typedef struct _pipe_config_descriptor {
  CHAR  StreamAssociation;
  UCHAR  PipeConfigFlags;
} USBCAMD_Pipe_Config_Descriptor, *PUSBCAMD_Pipe_Config_Descriptor;

typedef enum {
	USBCAMD_CamControlFlag_NoVideoRawProcessing = 1,
	USBCAMD_CamControlFlag_NoStillRawProcessing = 2,
	USBCAMD_CamControlFlag_AssociatedFormat = 4,
	USBCAMD_CamControlFlag_EnableDeviceEvents = 8
} USBCAMD_CamControlFlags;

typedef NTSTATUS DDKAPI
(*PCAM_ALLOCATE_BW_ROUTINE)(
  PDEVICE_OBJECT  BusDeviceObject,
  PVOID  DeviceContext,
  PULONG  RawFrameLength,
  PVOID  Format);

typedef NTSTATUS DDKAPI
(*PCAM_ALLOCATE_BW_ROUTINE_EX)(
  PDEVICE_OBJECT  BusDeviceObject,
  PVOID  DeviceContext,
  PULONG  RawFrameLength,
  PVOID  Format,
  ULONG  StreamNumber);

typedef NTSTATUS DDKAPI
(*PCAM_CONFIGURE_ROUTINE)(
  PDEVICE_OBJECT  BusDeviceObject,
  PVOID  DeviceContext,
  PUSBD_INTERFACE_INFORMATION  Interface,
  PUSB_CONFIGURATION_DESCRIPTOR  ConfigurationDescriptor,
  PLONG  DataPipeIndex,
  PLONG  SyncPipeIndex);

typedef NTSTATUS DDKAPI
(*PCAM_CONFIGURE_ROUTINE_EX)(
  PDEVICE_OBJECT  BusDeviceObject,
  PVOID  DeviceContext,
  PUSBD_INTERFACE_INFORMATION  Interface,
  PUSB_CONFIGURATION_DESCRIPTOR  ConfigurationDescriptor,
  ULONG  PipeConfigListSize,
  PUSBCAMD_Pipe_Config_Descriptor  PipeConfig,
  PUSB_DEVICE_DESCRIPTOR  DeviceDescriptor);

typedef NTSTATUS DDKAPI
(*PCAM_FREE_BW_ROUTINE)(
  PDEVICE_OBJECT  BusDeviceObject,
  PVOID  DeviceContext);

typedef NTSTATUS DDKAPI
(*PCAM_FREE_BW_ROUTINE_EX)(
  PDEVICE_OBJECT  BusDeviceObject,
  PVOID  DeviceContext,
  ULONG  StreamNumber);

typedef NTSTATUS DDKAPI
(*PCAM_INITIALIZE_ROUTINE)(
  PDEVICE_OBJECT  BusDeviceObject,
  PVOID  DeviceContext);

typedef VOID DDKAPI
(*PCAM_NEW_FRAME_ROUTINE)(
  PVOID  DeviceContext,
  PVOID  FrameContext); 

typedef VOID DDKAPI
(*PCAM_NEW_FRAME_ROUTINE_EX)(
  PVOID  DeviceContext,
  PVOID  FrameContext,
  ULONG  StreamNumber,
  PULONG  FrameLength);

typedef NTSTATUS DDKAPI
(*PCAM_PROCESS_RAW_FRAME_ROUTINE)(
  PDEVICE_OBJECT  BusDeviceObject,
  PVOID  DeviceContext,
  PVOID  FrameContext,
  PVOID  FrameBuffer,
  ULONG  FrameLength,
  PVOID  RawFrameBuffer,
  ULONG  RawFrameLength,
  ULONG  NumberOfPackets,
  PULONG  BytesReturned);

typedef NTSTATUS DDKAPI
(*PCAM_PROCESS_RAW_FRAME_ROUTINE_EX)(
  PDEVICE_OBJECT  BusDeviceObject,
  PVOID  DeviceContext,
  PVOID  FrameContext,
  PVOID  FrameBuffer,
  ULONG  FrameLength,
  PVOID  RawFrameBuffer,
  ULONG  RawFrameLength,
  ULONG  NumberOfPackets,
  PULONG  BytesReturned,
  ULONG  ActualRawFrameLength,
  ULONG  StreamNumber);

typedef ULONG DDKAPI
(*PCAM_PROCESS_PACKET_ROUTINE)(
  PDEVICE_OBJECT  BusDeviceObject,
  PVOID  DeviceContext,
  PVOID  CurrentFrameContext,
  PUSBD_ISO_PACKET_DESCRIPTOR  SyncPacket,
  PVOID  SyncBuffer,
  PUSBD_ISO_PACKET_DESCRIPTOR  DataPacket,
  PVOID  DataBuffer,
  PBOOLEAN  FrameComplete,
  PBOOLEAN  NextFrameIsStill); 

typedef ULONG DDKAPI
(*PCAM_PROCESS_PACKET_ROUTINE_EX)(
  PDEVICE_OBJECT  BusDeviceObject,
  PVOID  DeviceContext,
  PVOID  CurrentFrameContext,
  PUSBD_ISO_PACKET_DESCRIPTOR  SyncPacket,
  PVOID  SyncBuffer,
  PUSBD_ISO_PACKET_DESCRIPTOR  DataPacket,
  PVOID  DataBuffer,
  PBOOLEAN  FrameComplete,
  PULONG  PacketFlag,
  PULONG  ValidDataOffset);

typedef NTSTATUS DDKAPI
(*PCAM_STATE_ROUTINE)(
  PDEVICE_OBJECT  BusDeviceObject,
  PVOID  DeviceContext);

typedef NTSTATUS DDKAPI
(*PCAM_START_CAPTURE_ROUTINE)(
  PDEVICE_OBJECT  BusDeviceObject,
  PVOID  DeviceContext);

typedef NTSTATUS DDKAPI
(*PCAM_START_CAPTURE_ROUTINE_EX)(
  PDEVICE_OBJECT  BusDeviceObject,
  PVOID  DeviceContext,
  ULONG  StreamNumber);

typedef NTSTATUS DDKAPI
(*PCAM_STOP_CAPTURE_ROUTINE)(
  PDEVICE_OBJECT  BusDeviceObject,
  PVOID  DeviceContext);

typedef NTSTATUS DDKAPI
(*PCAM_STOP_CAPTURE_ROUTINE_EX)(
  PDEVICE_OBJECT  BusDeviceObject,
  PVOID  DeviceContext,
  ULONG  StreamNumber);

typedef struct _USBCAMD_DEVICE_DATA {
	ULONG  Sig;
	PCAM_INITIALIZE_ROUTINE  CamInitialize;
	PCAM_INITIALIZE_ROUTINE  CamUnInitialize;
	PCAM_PROCESS_PACKET_ROUTINE  CamProcessUSBPacket;
	PCAM_NEW_FRAME_ROUTINE  CamNewVideoFrame;
	PCAM_PROCESS_RAW_FRAME_ROUTINE  CamProcessRawVideoFrame;
	PCAM_START_CAPTURE_ROUTINE  CamStartCapture;
	PCAM_STOP_CAPTURE_ROUTINE  CamStopCapture;
	PCAM_CONFIGURE_ROUTINE  CamConfigure;
	PCAM_STATE_ROUTINE  CamSaveState;
	PCAM_STATE_ROUTINE  CamRestoreState;
	PCAM_ALLOCATE_BW_ROUTINE  CamAllocateBandwidth;
	PCAM_FREE_BW_ROUTINE  CamFreeBandwidth;
} USBCAMD_DEVICE_DATA, *PUSBCAMD_DEVICE_DATA;

typedef struct _USBCAMD_DEVICE_DATA2 {
	ULONG  Sig;
	PCAM_INITIALIZE_ROUTINE  CamInitialize;
	PCAM_INITIALIZE_ROUTINE  CamUnInitialize;
	PCAM_PROCESS_PACKET_ROUTINE_EX  CamProcessUSBPacketEx;
	PCAM_NEW_FRAME_ROUTINE_EX  CamNewVideoFrameEx;
	PCAM_PROCESS_RAW_FRAME_ROUTINE_EX  CamProcessRawVideoFrameEx;
	PCAM_START_CAPTURE_ROUTINE_EX  CamStartCaptureEx;
	PCAM_STOP_CAPTURE_ROUTINE_EX  CamStopCaptureEx;
	PCAM_CONFIGURE_ROUTINE_EX  CamConfigureEx;
	PCAM_STATE_ROUTINE  CamSaveState;
	PCAM_STATE_ROUTINE  CamRestoreState;
	PCAM_ALLOCATE_BW_ROUTINE_EX  CamAllocateBandwidthEx;
	PCAM_FREE_BW_ROUTINE_EX  CamFreeBandwidthEx;
} USBCAMD_DEVICE_DATA2, *PUSBCAMD_DEVICE_DATA2;

USBCAMAPI
ULONG
DDKAPI
USBCAMD_InitializeNewInterface(
  /*IN*/ PVOID  DeviceContext,
  /*IN*/ PVOID  DeviceData,
  /*IN*/ ULONG  Version,
  /*IN*/ ULONG  CamControlFlag);

typedef VOID DDKAPI
(*PCOMMAND_COMPLETE_FUNCTION)(
  PVOID  DeviceContext,
  PVOID  CommandContext,
  NTSTATUS  NtStatus);

typedef NTSTATUS DDKAPI
(*PFNUSBCAMD_BulkReadWrite)(
  /*IN*/ PVOID  DeviceContext,
  /*IN*/ USHORT  PipeIndex,
  /*IN*/ PVOID  Buffer,
  /*IN*/ ULONG  BufferLength,
  /*IN*/ PCOMMAND_COMPLETE_FUNCTION  CommandComplete,
  /*IN*/ PVOID  CommandContext);

typedef NTSTATUS DDKAPI
(*PFNUSBCAMD_SetIsoPipeState)(
  /*IN*/ PVOID  DeviceContext,
  /*IN*/ ULONG  PipeStateFlags);

typedef NTSTATUS DDKAPI
(*PFNUSBCAMD_CancelBulkReadWrite)(
  /*IN*/ PVOID  DeviceContext,
  /*IN*/ ULONG  PipeIndex);

typedef NTSTATUS DDKAPI
(*PFNUSBCAMD_SetVideoFormat)( 
  /*IN*/ PVOID  DeviceContext,
  /*IN*/ PHW_STREAM_REQUEST_BLOCK  pSrb);

typedef NTSTATUS DDKAPI
(*PFNUSBCAMD_WaitOnDeviceEvent)(
  /*IN*/ PVOID  DeviceContext,
  /*IN*/ ULONG  PipeIndex,
  /*IN*/ PVOID  Buffer,
  /*IN*/ ULONG  BufferLength,
  /*IN*/ PCOMMAND_COMPLETE_FUNCTION  EventComplete,
  /*IN*/ PVOID  EventContext,
  /*IN*/ BOOLEAN  LoopBack);

USBCAMAPI
PVOID
DDKAPI
USBCAMD_AdapterReceivePacket(
  /*IN*/ PHW_STREAM_REQUEST_BLOCK  Srb,
  /*IN*/ PUSBCAMD_DEVICE_DATA  DeviceData,
  /*IN*/ PDEVICE_OBJECT  *DeviceObject,
  /*IN*/ BOOLEAN  NeedsCompletion);

USBCAMAPI
NTSTATUS
DDKAPI
USBCAMD_ControlVendorCommand(
  /*IN*/ PVOID  DeviceContext,
  /*IN*/ UCHAR  Request,
  /*IN*/ USHORT  Value,
  /*IN*/ USHORT  Index,
  /*IN*/ PVOID  Buffer,
  /*IN OUT*/ PULONG  BufferLength,
  /*IN*/ BOOLEAN  GetData,
  /*IN*/ PCOMMAND_COMPLETE_FUNCTION  CommandComplete,
  /*IN*/ PVOID  CommandContext);

typedef VOID DDKAPI
(*PADAPTER_RECEIVE_PACKET_ROUTINE)(
  /*IN*/ PHW_STREAM_REQUEST_BLOCK  Srb);

USBCAMAPI
ULONG
DDKAPI
USBCAMD_DriverEntry(
  PVOID  Context1,
  PVOID  Context2,
  ULONG  DeviceContextSize,
  ULONG  FrameContextSize,
  PADAPTER_RECEIVE_PACKET_ROUTINE  ReceivePacket);

USBCAMAPI
NTSTATUS
DDKAPI
USBCAMD_GetRegistryKeyValue(
  /*IN*/ HANDLE  Handle,
  /*IN*/ PWCHAR  KeyNameString,
  /*IN*/ ULONG  KeyNameStringLength,
  /*IN*/ PVOID  Data,
  /*IN*/ ULONG  DataLength);

USBCAMAPI
NTSTATUS
DDKAPI
USBCAMD_SelectAlternateInterface(
  /*IN*/ PVOID  DeviceContext,
  /*IN OUT*/ PUSBD_INTERFACE_INFORMATION  RequestInterface);

#define USBCAMD_VERSION_200               0x200

typedef struct _USBCAMD_INTERFACE {
  INTERFACE  Interface;
  PFNUSBCAMD_WaitOnDeviceEvent  USBCAMD_WaitOnDeviceEvent;
  PFNUSBCAMD_BulkReadWrite  USBCAMD_BulkReadWrite;
  PFNUSBCAMD_SetVideoFormat  USBCAMD_SetVideoFormat;
  PFNUSBCAMD_SetIsoPipeState  USBCAMD_SetIsoPipeState;
  PFNUSBCAMD_CancelBulkReadWrite  USBCAMD_CancelBulkReadWrite;
} USBCAMD_INTERFACE, *PUSBCAMD_INTERFACE;

typedef VOID DDKAPI
(*PSTREAM_RECEIVE_PACKET)(
  /*IN*/ PVOID  Srb,
  /*IN*/ PVOID  DeviceContext,
  /*IN*/ PBOOLEAN  Completed);

#if defined(DEBUG_LOG)

USBCAMAPI
VOID
DDKAPI
USBCAMD_Debug_LogEntry(
  /*IN*/ CHAR  *Name,
  /*IN*/ ULONG  Info1,
  /*IN*/ ULONG  Info2,
  /*IN*/ ULONG  Info3);

#define ILOGENTRY(sig, info1, info2, info3) \
  USBCAMD_Debug_LogEntry(sig, (ULONG)info1, (ULONG)info2, (ULONG)info3)

#else

#define ILOGENTRY(sig, info1, info2, info3)

#endif /* DEBUG_LOG */

#pragma pack(pop)

#ifdef __cplusplus
}
#endif

#endif /* !defined(__USB_H) && !defined(__USBDI_H) */


#endif /* __USBCAMDI_H */
@


1.6
log
@	[mingw-Bugs-1424461]
	*include/imagehlp.h: Comment out IN, OUT and OPTIONAL,
	throughout.
	*include/rpcdce.h: Don't define IN, OUT or OPTIONAL if
	_NO_W32_PSEUDO_MODIFIERS.
	*include/rpcnsi.h: Comment out IN, OUT and OPTIONAL,
	throughout.
	*include/rpcnsip.h: Likewise.
	*include/windef.h: Don't define IN, OUT or OPTIONAL
	if _NO_W32_PSEUDO_MODIFIERS.
	*include/ddk/batclass.h: Comment out IN, OUT and OPTIONAL,
	throughout.
	*include/ddk/cfgmgr32.h: Likewise.
	*include/ddk/ddkmapi.h: Likewise.
	*include/ddk/hidclass.h: Likewise.
	*include/ddk/hidpi.h: Likewise.
	*include/ddk/kbdmou.h: Likewise.
	*include/ddk/mcd.h: Likewise.
	*include/ddk/miniport.h: Likewise.
	*include/ddk/minitape.h: Likewise.
	*include/ddk/ndis.h: Likewise.
	*include/ddk/ndistapi.h: Likewise.
	*include/ddk/ndiswan.h: Likewise.
	*include/ddk/ntapi.h: Likewise.
	*include/ddk/ntdd8042.h: Likewise.
	*include/ddk/ntddpcm.h: Likewise.
	*include/ddk/ntifs.h: Likewise.
	*include/ddk/ntpoapi.h: Likewise.
	*include/ddk/parallel.h: Likewise.
	*include/ddk/pfhook.h: Likewise.
	*include/ddk/scsiwmi.h: Likewise.
	*include/ddk/smbus.h: Likewise.
	*include/ddk/srb.h: Likewise.
	*include/ddk/storport.h: Likewise.
	*include/ddk/tdikrnl.h: Likewise.
	*include/ddk/upssvc.h: Likewise.
	*include/ddk/usbcamdi.h: Likewise.
	*include/ddk/usbscan.h: Likewise.
	*include/ddk/video.h: Likewise.
	*include/ddk/videoagp.h: Likewise.
	*include/ddk/win2k.h: Likewise.
	*include/ddk/winddi.h: Likewise.
	*include/ddk/winddk.h: Don't define IN, OUT or OPTIONAL
	if _NO_W32_PSEUDO_MODIFIERS.
	Comment out IN, OUT and OPTIONAL, throughout.
	*include/ddk/winnt4.h: Comment out IN, OUT and OPTIONAL,
	throughout.
	*include/ddk/ws2san.h: Likewise.
@
text
@@


1.5
log
@	Clean up warnings in ddk.

	* include/ddk/atm.h (_ATM_AAL_OOB_INFO): Add _ANONYMOUS_UNION,
	conditional on  __cplusplus.
	* include/ddk/scsi.h: Add _ANONYMOUS_UNION and _ANONYMOUS_STRUCT
	defines, throughout.
	(_CDB): Add _ANONYMOUS_UNION, conditional on __cplusplus.
	* include/ddk/cfg.h (_PNP_VETO_TYPE): Remove extra comma.
	* include/ddk/cfgmgr32.h: Change C++ comment style to ISO C.
	* include/ddk/ddkmapi.h (_DDLOCKOUT): Add _ANONYMOUS_UNION defines.
	* include/ddk/hidpi.h: Add _ANONYMOUS_UNION and _ANONYMOUS_STRUCT
	defines, throughout.
	* include/ddk/ndis.h: Add _ANONYMOUS_UNION and _ANONYMOUS_STRUCT
	defines, throughout. Remove trailing semicolon from *_S 'structure'
	macro expansion, throughout. Remove trailing semicolon from
	DECLARE_UNKNOWN_STRUCT macro expansion.
	* include/ddk/ndiswan.h (_NDIS_WAN_COMPRESS_INFO): Add
	_ANONYMOUS_UNION.
	* include/ddk/ntapi.h (_PROCESS_DEVICEMAP_INFORMATION,
	_PROCESS_SESSION_INFORMATION): Add _ANONYMOUS_UNION.
	* include/ddk/ntddcdrm.h (CDROM_TOC_CD_TEXT_DATA_BLOCK):
	Add _ANONYMOUS_UNION.
	* include/ddk/ntdddisk.h: Add _ANONYMOUS_UNION, throughout.
	* include/ddk/ntddmou.h:  Add _ANONYMOUS_UNION, throughout.
	* include/ddk/ntifs.h:  Add _ANONYMOUS_UNION, throughout.
	(ZwQueryObject): Change 2nd param to OBJECT_INFORMATION_CLASS, to
	match proto in ntapi.h.
	(ZwSetInformationObject): Likewise.
	* include/ddk/srb.h (SCSI_REQUEST_BLOCK): Add _ANONYMOUS_UNION.
	(SCSI_ADAPTER_CONTROL_TYPE): Add __extension__.
	* include/ddk/tdikrnl.h (TDI20_CLIENT_INTERFACE_INFO): Add
	_ANONYMOUS_UNION and _ANONYMOUS_STRUCT.
	* include/ddk/usb.h (USB): Add _ANONYMOUS_UNION.
	* include/ddk/usbcamdi.h (USBCAMD_CamControlFlags): Remove
	last comma.
	* include/ddk/video.h (STATUS_BLOCK): Add _ANONYMOUS_UNION.
	* include/ddk/winddk.h (DECLARE_INTERNAL_OBJECT): Remove
	trailing semicolon when expanding macro.
	(GENERAL_LOOKASIDE_S): Likewise.
	Add _ANONYMOUS_UNION and _ANONYMOUS_STRUCT, throughout.
	Change inline to __inline, throughout.
	* include/ddk/winnt4.h: Change inline to __inline, throughout.
@
text
@d259 4
a262 4
  IN PVOID  DeviceContext,
  IN PVOID  DeviceData,
  IN ULONG  Version,
  IN ULONG  CamControlFlag);
d272 6
a277 6
  IN PVOID  DeviceContext,
  IN USHORT  PipeIndex,
  IN PVOID  Buffer,
  IN ULONG  BufferLength,
  IN PCOMMAND_COMPLETE_FUNCTION  CommandComplete,
  IN PVOID  CommandContext);
d281 2
a282 2
  IN PVOID  DeviceContext,
  IN ULONG  PipeStateFlags);
d286 2
a287 2
  IN PVOID  DeviceContext,
  IN ULONG  PipeIndex);
d291 2
a292 2
  IN PVOID  DeviceContext,
  IN PHW_STREAM_REQUEST_BLOCK  pSrb);
d296 7
a302 7
  IN PVOID  DeviceContext,
  IN ULONG  PipeIndex,
  IN PVOID  Buffer,
  IN ULONG  BufferLength,
  IN PCOMMAND_COMPLETE_FUNCTION  EventComplete,
  IN PVOID  EventContext,
  IN BOOLEAN  LoopBack);
d308 4
a311 4
  IN PHW_STREAM_REQUEST_BLOCK  Srb,
  IN PUSBCAMD_DEVICE_DATA  DeviceData,
  IN PDEVICE_OBJECT  *DeviceObject,
  IN BOOLEAN  NeedsCompletion);
d317 9
a325 9
  IN PVOID  DeviceContext,
  IN UCHAR  Request,
  IN USHORT  Value,
  IN USHORT  Index,
  IN PVOID  Buffer,
  IN OUT PULONG  BufferLength,
  IN BOOLEAN  GetData,
  IN PCOMMAND_COMPLETE_FUNCTION  CommandComplete,
  IN PVOID  CommandContext);
d329 1
a329 1
  IN PHW_STREAM_REQUEST_BLOCK  Srb);
d345 5
a349 5
  IN HANDLE  Handle,
  IN PWCHAR  KeyNameString,
  IN ULONG  KeyNameStringLength,
  IN PVOID  Data,
  IN ULONG  DataLength);
d355 2
a356 2
  IN PVOID  DeviceContext,
  IN OUT PUSBD_INTERFACE_INFORMATION  RequestInterface);
d371 3
a373 3
  IN PVOID  Srb,
  IN PVOID  DeviceContext,
  IN PBOOLEAN  Completed);
d381 4
a384 4
	IN CHAR  *Name,
	IN ULONG  Info1,
	IN ULONG  Info2,
	IN ULONG  Info3);
@


1.4
log
@	* include/ddk/hidusage.h: Remove unneccessary #pragma pack's.
	* include/ddk/miniport.h (EMULATOR_PORT_ACCESS_TYPE): Define
	before using.
	(VIDEO_ACCESS_RANGE): Guard against prior definition.
	* include/ddk/minitape.h (INQUIRYDATA): Guard against prior
	definition.
	* include/ddk/ndis.h (DECLARE_UNKNOWN_PROTOTYPE): Correct macro.
	* include/ddk/ndisguid.h: Remove unneccessary #pragma pack's.
	* include/ddk/scsi.h (INQUIRYDATA): Guard against prior
	definition.
	* include/ddk/scsiwmi.h (GUID): Define if not already done.
	(LPCGUID): Likewise.
	* include/ddk/tdi.h: Close "Listen flags" comment.
	* include/ddk/tdistat.h: Remove unneccessary #pragma pack's.
	* include/ddk/video.h:	Add #pragma pack(push,4) to balance.
	(VIDEO_ACCESS_RANGE): Guard against prior definition.
	* include/ddk/videoagp.h:Add #pragma pack(push,4) to balance.
	* include/ddk/win2k.h: Likewise.
	* include/ddk/winddi.h: Likewise.
	* include/ddk/winddk.h: Likewise.
	* include/ddk/winnt4.h: Likewise.
	* include/ddk/ws2san.h: Likewise.
	* include/ddk/xfilter.h: Remove unbalanced #pragma pack(pop).
	* include/ddk/video.h: Don't process rest of file ifdef
	__WINDDI_H.
	* include/ddk/winddi.h: Don't process rest of file ifdef
	__VIDEO_H.
	* include/ddk/usb.h: Don't process rest of file ifdef
	__USBDI_H.
	* include/ddk/usbdi.h: Don't process rest of file ifdef
	__USB_H.
	* include/ddk/usbcamdi.h: Don't process rest of file if
	!defined(__USB_H) && !defined(__USBDI_H)
@
text
@d80 1
a80 1
	USBCAMD_CamControlFlag_EnableDeviceEvents = 8,
@


1.3
log
@	* include/ddk/(atm.h, batclass.h, cfg.h, cfgmgr32.h, d4drvif.h,
	d4iface.h, ddkmapi.h, hidclass.h, hidpi.h, hidusage.h, mcd.h,
	miniport.h, minitape.h, mountdev.h, mountmgr.h, ndis.h,
	ndisquid.h, ndistapi.h, ndisvan.h, netevent.h, netpnp.h,
	netdev.h, ntapi.h, ntdd8042.h, ntddbeep.h, ntddcdrm.h,
	ntddcdvd.h, ntddchgr.h, ntdddisk.h, ntddk.h, ntddkbd.h,
	ntddmou.h, ntddndis.h, ntddpar.h, ntddpcm.h, ntddscsi.h,
	ntddser.h, ntddstor.h, ntddtape.h, ntddtdi.h, ntddvdeo.h,
	ntddvol.h, ntifs.h, ntpoapi.h, ntstatus.h, parallel.h, pfhook.h,
	poclass.h, scsi.h, scsiscan.h, scsiwmi.h, smbus.h, srb.h,
	storport.h, tdi.h, tdiinfo.h, tdikrnl.h, tdistat.h, tvout.h,
	upssvc.h, usb.h, usb100.h, usbcamdi.h, usbdi.h, usbioctl.h,
	usbiodef.h, usbscan.h, usbuser.h, video.h, videoagp.h, win2k.h,
	winddi.h, winddk.h, winnt4.h, winxp.h, ws2san.h,
	xfilter.h): Change comment to refer w32api package, not MinGW.
@
text
@d30 4
a39 4
#if !defined(__USB_H) && !defined(__USBDI_H)
#error include usb.h or usbdi.h before usbcamdi.h
#endif

d400 3
@


1.2
log
@	* include/ddk/(atm.h, batclass.h, cfg.h, cfgmgr32.h, d4drvif.h,
	d4iface.h, ddkmapi.h, hidclass.h, hidpi.h, hidusage.h, mcd.h,
	miniport.h, minitape.h, mountdev.h, mountmgr.h, ndis.h,
	ndisquid.h, ndistapi.h, ndisvan.h, netevent.h, netpnp.h,
	netdev.h, ntapi.h, ntdd8042.h, ntddbeep.h, ntddcdrm.h,
	ntddcdvd.h, ntddchgr.h, ntdddisk.h, ntddk.h, ntddkbd.h,
	ntddmou.h, ntddndis.h, ntddpar.h, ntddpcm.h, ntddscsi.h,
	ntddser.h, ntddstor.h, ntddtape.h, ntddtdi.h, ntddvdeo.h,
	ntddvol.h, ntifs.h, ntpoapi.h, ntstatus.h, parallel.h, pfhook.h,
	poclass.h, scsi.h, scsiscan.h, scsiwmi.h, smbus.h, srb.h,
	storport.h, tdi.h, tdiinfo.h, tdikrnl.h, tdistat.h, tvout.h,
	upssvc.h, usb.h, usb100.h, usbcamdi.h, usbdi.h, usbioctl.h,
	usbiodef.h, usbscan.h, usbuser.h, video.h, videoagp.h, win2k.h,
	winddi.h, winddk.h, winnt4.h, winxp.h, ws2san.h,
	xfilter.h): Fix typo in disclaimer comment.
@
text
@d6 1
a6 1
 * This file is part of the MinGW package.
@


1.1
log
@
2002-10-06  Casper Hornstrup  <chorns@@it.dk>

	* include/ddk: New subdir.
	* lib/ddk: Ditto.
	* include/ddk/(atm.h, batclass.h, cfg.h, cfgmgr32.h, d4drvif.h,
	d4iface.h, ddkmapi.h, hidclass.h, hidpi.h, hidusage.h, mcd.h,
	miniport.h, minitape.h, mountdev.h, mountmgr.h, ndis.h,
	ndisquid.h, ndistapi.h, ndisvan.h, netevent.h, netpnp.h,
	netdev.h, ntapi.h, ntdd8042.h, ntddbeep.h, ntddcdrm.h,
	ntddcdvd.h, ntddchgr.h, ntdddisk.h, ntddk.h, ntddkbd.h,
	ntddmou.h, ntddndis.h, ntddpar.h, ntddpcm.h, ntddscsi.h,
	ntddser.h, ntddstor.h, ntddtape.h, ntddtdi.h, ntddvdeo.h,
	ntddvol.h, ntifs.h, ntpoapi.h, ntstatus.h, parallel.h, pfhook.h,
	poclass.h, scsi.h, scsiscan.h, scsiwmi.h, smbus.h, srb.h,
	storport.h, tdi.h, tdiinfo.h, tdikrnl.h, tdistat.h, tvout.h,
	upssvc.h, usb.h, usb100.h, usbcamdi.h, usbdi.h, usbioctl.h,
	usbiodef.h, usbscan.h, usbuser.h, video.h, videoagp.h, win2k.h,
	winddi.h, winddk.h, winnt4.h, winxp.h, ws2san.h,
	xfilter.h): New files.
	* lib/ddk/(Makefile.in, apcups.def, cfgmgr32.def, dxapi.def,
	hal.def, hid.def, hidparse.def, mcd.def, ndis.def, ntoskrnl.def,
	scsiport.def, tdi.def, usbcamd.def, usbcamd2.def, videoprt.def,
	win32k.def): Ditto.
@
text
@d18 1
a18 1
 * DISCLAMED. This includes but is not limited to warranties of
@

