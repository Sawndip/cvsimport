head	1.7;
access;
symbols
	cygwin-1_7_17-release:1.6
	cygwin-64bit-branch:1.6.0.8
	cygwin-1_7_16-release:1.6
	cygwin-1_7_15-release:1.6
	cygwin-1_7_14_2-release:1.6
	cygwin-1_7_14-release:1.6
	cygwin-1_7_12-release:1.6
	cygwin-1_7_11-release:1.6
	cygwin-1_7_10-release:1.6
	cygwin-1_7_9-release:1.6
	cygwin-1_7_8-release:1.6
	cygwin-1_7_7-release:1.6
	cygwin-1_7_5-release:1.6
	cygwin-1_7_4-release:1.6
	cygwin-1_7_3-release:1.6
	cygwin-1_7_2-release:1.6
	cygwin-1_7_1-release:1.6
	cv-branch-2:1.6.0.6
	cr-0x5f1:1.6.0.4
	cv-branch:1.6.0.2
	cr-0x3b58:1.5.0.2
	cr-0x9e:1.4.0.10
	cr-0x9d:1.4.0.8
	corinna-01:1.4
	cr-0x9c:1.4.0.6
	cr-0x9b:1.4.0.4
	cr-0x99:1.4
	Z-emcb-cygwin_daemon:1.4.0.2
	w32api-2_2:1.3
	mingw-runtime-2_4:1.3;
locks; strict;
comment	@ * @;


1.7
date	2012.11.07.16.52.41;	author cgf;	state dead;
branches;
next	1.6;

1.6
date	2006.06.12.00.55.06;	author dannysmith;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.28.08.46.54;	author dannysmith;	state Exp;
branches;
next	1.4;

1.4
date	2003.07.16.21.49.02;	author dannysmith;	state Exp;
branches;
next	1.3;

1.3
date	2002.11.15.01.08.16;	author dannysmith;	state Exp;
branches;
next	1.2;

1.2
date	2002.11.12.21.34.06;	author dannysmith;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.06.22.18.25;	author earnie;	state Exp;
branches;
next	;


desc
@@


1.7
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@/*
 * tdikrnl.h
 *
 * TDI kernel mode definitions
 *
 * This file is part of the w32api package.
 *
 * Contributors:
 *   Created by Casper S. Hornstrup <chorns@@users.sourceforge.net>
 *
 * THIS SOFTWARE IS NOT COPYRIGHTED
 *
 * This source code is offered for use in the public domain. You may
 * use, modify or distribute it freely.
 *
 * This code is distributed in the hope that it will be useful but
 * WITHOUT ANY WARRANTY. ALL WARRANTIES, EXPRESS OR IMPLIED ARE HEREBY
 * DISCLAIMED. This includes but is not limited to warranties of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

#ifndef __TDIKRNL_H
#define __TDIKRNL_H

#if __GNUC__ >=3
#pragma GCC system_header
#endif

#ifdef __cplusplus
extern "C" {
#endif

#include "ntddk.h"
#include "tdi.h"

#if defined(_TDI_)
  #define TDIKRNLAPI DECLSPEC_EXPORT
#else
  #define TDIKRNLAPI DECLSPEC_IMPORT
#endif


typedef struct _TDI_REQUEST_KERNEL {
  ULONG  RequestFlags;
  PTDI_CONNECTION_INFORMATION  RequestConnectionInformation;
  PTDI_CONNECTION_INFORMATION  ReturnConnectionInformation;
  PVOID  RequestSpecific;
} TDI_REQUEST_KERNEL, *PTDI_REQUEST_KERNEL;

/* Request codes */
#define TDI_ASSOCIATE_ADDRESS             0x01
#define TDI_DISASSOCIATE_ADDRESS          0x02
#define TDI_CONNECT                       0x03
#define TDI_LISTEN                        0x04
#define TDI_ACCEPT                        0x05
#define TDI_DISCONNECT                    0x06
#define TDI_SEND                          0x07
#define TDI_RECEIVE                       0x08
#define TDI_SEND_DATAGRAM                 0x09
#define TDI_RECEIVE_DATAGRAM              0x0A
#define TDI_SET_EVENT_HANDLER             0x0B
#define TDI_QUERY_INFORMATION             0x0C
#define TDI_SET_INFORMATION               0x0D
#define TDI_ACTION                        0x0E

#define TDI_DIRECT_SEND                   0x27
#define TDI_DIRECT_SEND_DATAGRAM          0x29

#define TDI_TRANSPORT_ADDRESS_FILE        1
#define TDI_CONNECTION_FILE               2
#define TDI_CONTROL_CHANNEL_FILE          3

/* Internal TDI IOCTLS */
#define IOCTL_TDI_QUERY_DIRECT_SEND_HANDLER   _TDI_CONTROL_CODE(0x80, METHOD_NEITHER)
#define IOCTL_TDI_QUERY_DIRECT_SENDDG_HANDLER _TDI_CONTROL_CODE(0x81, METHOD_NEITHER)

/* TdiAssociateAddress */
typedef struct _TDI_REQUEST_KERNEL_ASSOCIATE {
  HANDLE  AddressHandle;
} TDI_REQUEST_KERNEL_ASSOCIATE, *PTDI_REQUEST_KERNEL_ASSOCIATE;

/* TdiDisassociateAddress */
typedef TDI_REQUEST_KERNEL TDI_REQUEST_KERNEL_DISASSOCIATE,
  *PTDI_REQUEST_KERNEL_DISASSOCIATE;

/* TdiAccept */
typedef struct _TDI_REQUEST_KERNEL_ACCEPT {
  PTDI_CONNECTION_INFORMATION  RequestConnectionInformation;
  PTDI_CONNECTION_INFORMATION  ReturnConnectionInformation;
} TDI_REQUEST_KERNEL_ACCEPT, *PTDI_REQUEST_KERNEL_ACCEPT;

/* TdiConnect */
typedef TDI_REQUEST_KERNEL TDI_REQUEST_KERNEL_CONNECT,
  *PTDI_REQUEST_KERNEL_CONNECT;

/* TdiDisconnect */
typedef TDI_REQUEST_KERNEL TDI_REQUEST_KERNEL_DISCONNECT,
  *PTDI_REQUEST_KERNEL_DISCONNECT;

/* TdiListen */
typedef TDI_REQUEST_KERNEL TDI_REQUEST_KERNEL_LISTEN,
  *PTDI_REQUEST_KERNEL_LISTEN;

/* TdiReceive */
typedef struct _TDI_REQUEST_KERNEL_RECEIVE {
  ULONG  ReceiveLength;
  ULONG  ReceiveFlags;
} TDI_REQUEST_KERNEL_RECEIVE, *PTDI_REQUEST_KERNEL_RECEIVE;

/* TdiReceiveDatagram */
typedef struct _TDI_REQUEST_KERNEL_RECEIVEDG {
  ULONG  ReceiveLength;
  PTDI_CONNECTION_INFORMATION  ReceiveDatagramInformation;
  PTDI_CONNECTION_INFORMATION  ReturnDatagramInformation;
  ULONG  ReceiveFlags;
} TDI_REQUEST_KERNEL_RECEIVEDG, *PTDI_REQUEST_KERNEL_RECEIVEDG;

/* TdiSend */
typedef struct _TDI_REQUEST_KERNEL_SEND {
  ULONG  SendLength;
  ULONG  SendFlags;
} TDI_REQUEST_KERNEL_SEND, *PTDI_REQUEST_KERNEL_SEND;

/* TdiSendDatagram */
typedef struct _TDI_REQUEST_KERNEL_SENDDG {
  ULONG  SendLength;
  PTDI_CONNECTION_INFORMATION  SendDatagramInformation;
} TDI_REQUEST_KERNEL_SENDDG, *PTDI_REQUEST_KERNEL_SENDDG;

/* TdiSetEventHandler */
typedef struct _TDI_REQUEST_KERNEL_SET_EVENT {
  LONG  EventType;
  PVOID  EventHandler;
  PVOID  EventContext;
} TDI_REQUEST_KERNEL_SET_EVENT, *PTDI_REQUEST_KERNEL_SET_EVENT;

/* TdiQueryInformation */
typedef struct _TDI_REQUEST_KERNEL_QUERY_INFO {
  LONG  QueryType;
  PTDI_CONNECTION_INFORMATION  RequestConnectionInformation;
} TDI_REQUEST_KERNEL_QUERY_INFORMATION, *PTDI_REQUEST_KERNEL_QUERY_INFORMATION;

/* TdiSetInformation */
typedef struct _TDI_REQUEST_KERNEL_SET_INFO {
  LONG  SetType;
  PTDI_CONNECTION_INFORMATION  RequestConnectionInformation;
} TDI_REQUEST_KERNEL_SET_INFORMATION, *PTDI_REQUEST_KERNEL_SET_INFORMATION;


/* Event types */
#define TDI_EVENT_CONNECT                   0
#define TDI_EVENT_DISCONNECT                1
#define TDI_EVENT_ERROR                     2
#define TDI_EVENT_RECEIVE                   3
#define TDI_EVENT_RECEIVE_DATAGRAM          4
#define TDI_EVENT_RECEIVE_EXPEDITED         5
#define TDI_EVENT_SEND_POSSIBLE             6
#define TDI_EVENT_CHAINED_RECEIVE           7
#define TDI_EVENT_CHAINED_RECEIVE_DATAGRAM  8
#define TDI_EVENT_CHAINED_RECEIVE_EXPEDITED 9
#define TDI_EVENT_ERROR_EX                  10

typedef NTSTATUS DDKAPI
(*PTDI_IND_CONNECT)(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ LONG  RemoteAddressLength,
  /*IN*/ PVOID  RemoteAddress,
  /*IN*/ LONG  UserDataLength,
  /*IN*/ PVOID  UserData,
  /*IN*/ LONG  OptionsLength,
  /*IN*/ PVOID  Options,
  /*OUT*/ CONNECTION_CONTEXT  *ConnectionContext,
  /*OUT*/ PIRP  *AcceptIrp);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiDefaultConnectHandler(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ LONG  RemoteAddressLength,
  /*IN*/ PVOID  RemoteAddress,
  /*IN*/ LONG  UserDataLength,
  /*IN*/ PVOID  UserData,
  /*IN*/ LONG  OptionsLength,
  /*IN*/ PVOID  Options,
  /*OUT*/ CONNECTION_CONTEXT *ConnectionContext,
  /*OUT*/ PIRP  *AcceptIrp);

typedef NTSTATUS DDKAPI
(*PTDI_IND_DISCONNECT)(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ CONNECTION_CONTEXT  ConnectionContext,
  /*IN*/ LONG  DisconnectDataLength,
  /*IN*/ PVOID  DisconnectData,
  /*IN*/ LONG  DisconnectInformationLength,
  /*IN*/ PVOID  DisconnectInformation,
  /*IN*/ ULONG  DisconnectFlags);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiDefaultDisconnectHandler(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ CONNECTION_CONTEXT  ConnectionContext,
  /*IN*/ LONG  DisconnectDataLength,
  /*IN*/ PVOID  DisconnectData,
  /*IN*/ LONG  DisconnectInformationLength,
  /*IN*/ PVOID  DisconnectInformation,
  /*IN*/ ULONG  DisconnectFlags);

typedef NTSTATUS DDKAPI
(*PTDI_IND_ERROR)(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ NTSTATUS  Status);

typedef NTSTATUS DDKAPI
(*PTDI_IND_ERROR_EX)(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ NTSTATUS  Status,
  /*IN*/ PVOID  Buffer);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiDefaultErrorHandler(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ NTSTATUS  Status);

typedef NTSTATUS DDKAPI
(*PTDI_IND_RECEIVE)(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ CONNECTION_CONTEXT  ConnectionContext,
  /*IN*/ ULONG  ReceiveFlags,
  /*IN*/ ULONG  BytesIndicated,
  /*IN*/ ULONG  BytesAvailable,
  /*OUT*/ ULONG  *BytesTaken,
  /*IN*/ PVOID  Tsdu,
  /*OUT*/ PIRP  *IoRequestPacket);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiDefaultReceiveHandler(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ CONNECTION_CONTEXT  ConnectionContext,
  /*IN*/ ULONG  ReceiveFlags,
  /*IN*/ ULONG  BytesIndicated,
  /*IN*/ ULONG  BytesAvailable,
  /*OUT*/ ULONG  *BytesTaken,
  /*IN*/ PVOID  Tsdu,
  /*OUT*/ PIRP  *IoRequestPacket);

typedef NTSTATUS DDKAPI
(*PTDI_IND_RECEIVE_DATAGRAM)(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ LONG  SourceAddressLength,
  /*IN*/ PVOID  SourceAddress,
  /*IN*/ LONG  OptionsLength,
  /*IN*/ PVOID  Options,
  /*IN*/ ULONG  ReceiveDatagramFlags,
  /*IN*/ ULONG  BytesIndicated,
  /*IN*/ ULONG  BytesAvailable,
  /*OUT*/ ULONG  *BytesTaken,
  /*IN*/ PVOID  Tsdu,
  /*OUT*/ PIRP  *IoRequestPacket);

TDIKRNLAPI
NTSTATUS DDKAPI
TdiDefaultRcvDatagramHandler(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ LONG  SourceAddressLength,
  /*IN*/ PVOID  SourceAddress,
  /*IN*/ LONG  OptionsLength,
  /*IN*/ PVOID  Options,
  /*IN*/ ULONG  ReceiveDatagramFlags,
  /*IN*/ ULONG  BytesIndicated,
  /*IN*/ ULONG  BytesAvailable,
  /*OUT*/ ULONG  *BytesTaken,
  /*IN*/ PVOID  Tsdu,
  /*OUT*/ PIRP  *IoRequestPacket);

typedef NTSTATUS DDKAPI
(*PTDI_IND_RECEIVE_EXPEDITED)(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ CONNECTION_CONTEXT  ConnectionContext,
  /*IN*/ ULONG  ReceiveFlags,
  /*IN*/ ULONG  BytesIndicated,
  /*IN*/ ULONG  BytesAvailable,
  /*OUT*/ ULONG  *BytesTaken,
  /*IN*/ PVOID  Tsdu,
  /*OUT*/ PIRP  *IoRequestPacket);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiDefaultRcvExpeditedHandler(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ CONNECTION_CONTEXT  ConnectionContext,
  /*IN*/ ULONG  ReceiveFlags,
  /*IN*/ ULONG  BytesIndicated,
  /*IN*/ ULONG  BytesAvailable,
  /*OUT*/ ULONG  *BytesTaken,
  /*IN*/ PVOID  Tsdu,
  /*OUT*/ PIRP  *IoRequestPacket);

typedef NTSTATUS DDKAPI
(*PTDI_IND_CHAINED_RECEIVE)(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ CONNECTION_CONTEXT  ConnectionContext,
  /*IN*/ ULONG  ReceiveFlags,
  /*IN*/ ULONG  ReceiveLength,
  /*IN*/ ULONG  StartingOffset,
  /*IN*/ PMDL  Tsdu,
  /*IN*/ PVOID  TsduDescriptor);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiDefaultChainedReceiveHandler(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ CONNECTION_CONTEXT  ConnectionContext,
  /*IN*/ ULONG  ReceiveFlags,
  /*IN*/ ULONG  ReceiveLength,
  /*IN*/ ULONG  StartingOffset,
  /*IN*/ PMDL  Tsdu,
  /*IN*/ PVOID  TsduDescriptor);

typedef NTSTATUS DDKAPI
(*PTDI_IND_CHAINED_RECEIVE_DATAGRAM)(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ LONG  SourceAddressLength,
  /*IN*/ PVOID  SourceAddress,
  /*IN*/ LONG  OptionsLength,
  /*IN*/ PVOID  Options,
  /*IN*/ ULONG  ReceiveDatagramFlags,
  /*IN*/ ULONG  ReceiveDatagramLength,
  /*IN*/ ULONG  StartingOffset,
  /*IN*/ PMDL  Tsdu,
  /*IN*/ PVOID  TsduDescriptor);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiDefaultChainedRcvDatagramHandler(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ LONG  SourceAddressLength,
  /*IN*/ PVOID  SourceAddress,
  /*IN*/ LONG  OptionsLength,
  /*IN*/ PVOID  Options,
  /*IN*/ ULONG  ReceiveDatagramFlags,
  /*IN*/ ULONG  ReceiveDatagramLength,
  /*IN*/ ULONG  StartingOffset,
  /*IN*/ PMDL  Tsdu,
  /*IN*/ PVOID  TsduDescriptor);

typedef NTSTATUS DDKAPI
(*PTDI_IND_CHAINED_RECEIVE_EXPEDITED)(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ CONNECTION_CONTEXT  ConnectionContext,
  /*IN*/ ULONG  ReceiveFlags,
  /*IN*/ ULONG  ReceiveLength,
  /*IN*/ ULONG  StartingOffset,
  /*IN*/ PMDL  Tsdu,
  /*IN*/ PVOID  TsduDescriptor);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiDefaultChainedRcvExpeditedHandler(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ CONNECTION_CONTEXT  ConnectionContext,
  /*IN*/ ULONG  ReceiveFlags,
  /*IN*/ ULONG  ReceiveLength,
  /*IN*/ ULONG  StartingOffset,
  /*IN*/ PMDL  Tsdu,
  /*IN*/ PVOID  TsduDescriptor);

typedef NTSTATUS DDKAPI
(*PTDI_IND_SEND_POSSIBLE)(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ PVOID  ConnectionContext,
  /*IN*/ ULONG  BytesAvailable);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiDefaultSendPossibleHandler(
  /*IN*/ PVOID  TdiEventContext,
  /*IN*/ PVOID  ConnectionContext,
  /*IN*/ ULONG  BytesAvailable);



  /* Macros and functions to build IRPs */

#define TdiBuildBaseIrp(                                                  \
  bIrp, bDevObj, bFileObj, bCompRoutine, bContxt, bIrpSp, bMinor)         \
{                                                                         \
  bIrpSp->MajorFunction = IRP_MJ_INTERNAL_DEVICE_CONTROL;                 \
  bIrpSp->MinorFunction = (bMinor);                                       \
  bIrpSp->DeviceObject  = (bDevObj);                                      \
  bIrpSp->FileObject    = (bFileObj);                                     \
  if (bCompRoutine)                                                       \
    IoSetCompletionRoutine(bIrp, bCompRoutine, bContxt, TRUE, TRUE, TRUE) \
  else                                                                    \
    IoSetCompletionRoutine(bIrp, NULL, NULL, FALSE, FALSE, FALSE);        \
}

  /*
 * VOID
 * TdiBuildAccept(
 * IN PIRP  Irp,
 * IN PDEVICE_OBJECT  DevObj,
 * IN PFILE_OBJECT  FileObj,
 * IN PVOID  CompRoutine,
 * IN PVOID  Contxt,
 * IN PTDI_CONNECTION_INFORMATION  RequestConnectionInfo,
 * OUT PTDI_CONNECTION_INFORMATION  ReturnConnectionInfo);
 */
#define TdiBuildAccept(                                             \
  Irp, DevObj, FileObj, CompRoutine, Contxt,                        \
  RequestConnectionInfo, ReturnConnectionInfo)                      \
{                                                                   \
  PTDI_REQUEST_KERNEL_ACCEPT _Request;                              \
  PIO_STACK_LOCATION _IrpSp;                                        \
                                                                    \
  _IrpSp = IoGetNextIrpStackLocation(Irp);                          \
                                                                    \
  TdiBuildBaseIrp(Irp, DevObj, FileObj, CompRoutine,                \
                  Contxt, _IrpSp, TDI_ACCEPT);                      \
                                                                    \
  _Request = (PTDI_REQUEST_KERNEL_ACCEPT)&_IrpSp->Parameters;       \
  _Request->RequestConnectionInformation = (RequestConnectionInfo); \
  _Request->ReturnConnectionInformation  = (ReturnConnectionInfo);  \
}

  /*
 * VOID
 * TdiBuildAction(
 * IN PIRP  Irp,
 * IN PDEVICE_OBJECT  DevObj,
 * IN PFILE_OBJECT  FileObj,
 * IN PVOID  CompRoutine,
 * IN PVOID  Contxt,
 * IN PMDL  MdlAddr);
 */
#define TdiBuildAction(                               \
  Irp, DevObj, FileObj, CompRoutine, Contxt, MdlAddr) \
{                                                     \
  PIO_STACK_LOCATION _IrpSp;                          \
                                                      \
  _IrpSp = IoGetNextIrpStackLocation(Irp);            \
                                                      \
  TdiBuildBaseIrp(Irp, DevObj, FileObj, CompRoutine,  \
                  Contxt, _IrpSp, TDI_ACTION);        \
                                                      \
  (Irp)->MdlAddress = (MdlAddr);                      \
}

  /*
 * VOID
 * TdiBuildAssociateAddress(
 * IN PIRP  Irp,
 * IN PDEVICE_OBJECT  DevObj,
 * IN PFILE_OBJECT  FileObj,
 * IN PVOID  CompRoutine,
 * IN PVOID  Contxt,
 * IN HANDLE  AddrHandle);
 */
#define TdiBuildAssociateAddress(                                \
  Irp, DevObj, FileObj, CompRoutine, Contxt, AddrHandle)         \
{                                                                \
  PTDI_REQUEST_KERNEL_ASSOCIATE _Request;                        \
  PIO_STACK_LOCATION _IrpSp;                                     \
                                                                 \
  _IrpSp = IoGetNextIrpStackLocation(Irp);                       \
                                                                 \
  TdiBuildBaseIrp(Irp, DevObj, FileObj, CompRoutine,             \
                  Contxt, _IrpSp, TDI_ASSOCIATE_ADDRESS);        \
                                                                 \
  _Request = (PTDI_REQUEST_KERNEL_ASSOCIATE)&_IrpSp->Parameters; \
  _Request->AddressHandle = (HANDLE)(AddrHandle);                \
}

  /*
 * VOID
 * TdiBuildConnect(
 * IN PIRP  Irp,
 * IN PDEVICE_OBJECT  DevObj,
 * IN PFILE_OBJECT  FileObj,
 * IN PVOID  CompRoutine,
 * IN PVOID  Contxt,
 * IN PLARGE_INTEGER  Time,
 * IN PTDI_CONNECTION_INFORMATION  RequestConnectionInfo,
 * OUT PTDI_CONNECTION_INFORMATION  ReturnConnectionInfo); 
 */
#define TdiBuildConnect(                                            \
  Irp, DevObj, FileObj, CompRoutine, Contxt,                        \
  Time, RequestConnectionInfo, ReturnConnectionInfo)                \
{                                                                   \
  PTDI_REQUEST_KERNEL _Request;                                     \
  PIO_STACK_LOCATION _IrpSp;                                        \
                                                                    \
  _IrpSp = IoGetNextIrpStackLocation(Irp);                          \
                                                                    \
  TdiBuildBaseIrp(Irp, DevObj, FileObj, CompRoutine,                \
                  Contxt, _IrpSp, TDI_CONNECT);                     \
                                                                    \
  _Request = (PTDI_REQUEST_KERNEL)&_IrpSp->Parameters;              \
  _Request->RequestConnectionInformation = (RequestConnectionInfo); \
  _Request->ReturnConnectionInformation  = (ReturnConnectionInfo);  \
  _Request->RequestSpecific              = (PVOID)(Time);           \
}

  /*
 * VOID
 * TdiBuildDisassociateAddress(
 * IN PIRP  Irp,
 * IN PDEVICE_OBJECT  DevObj,
 * IN PFILE_OBJECT  FileObj,
 * IN PVOID  CompRoutine,
 * IN PVOID  Contxt);
 */
#define TdiBuildDisassociateAddress(                                \
  Irp, DevObj, FileObj, CompRoutine, Contxt)                        \
{                                                                   \
  PIO_STACK_LOCATION _IrpSp;                                        \
                                                                    \
  _IrpSp = IoGetNextIrpStackLocation(Irp);                          \
                                                                    \
  TdiBuildBaseIrp(Irp, DevObj, FileObj, CompRoutine,                \
                  Contxt, _IrpSp, TDI_DISASSOCIATE_ADDRESS);        \
}

  /*
 * VOID
 * TdiBuildDisconnect(
 * IN PIRP  Irp,
 * IN PDEVICE_OBJECT  DevObj,
 * IN PFILE_OBJECT  FileObj,
 * IN PVOID  CompRoutine,
 * IN PVOID  Contxt,
 * IN PLARGE_INTEGER  Time,
 * IN PULONG  Flags,
 * IN PTDI_CONNECTION_INFORMATION  RequestConnectionInfo,
 * OUT PTDI_CONNECTION_INFORMATION  ReturnConnectionInfo); 
 */
#define TdiBuildDisconnect(                                         \
  Irp, DevObj, FileObj, CompRoutine, Contxt, Time,                  \
  Flags, RequestConnectionInfo, ReturnConnectionInfo)               \
{                                                                   \
  PTDI_REQUEST_KERNEL _Request;                                     \
  PIO_STACK_LOCATION _IrpSp;                                        \
                                                                    \
  _IrpSp = IoGetNextIrpStackLocation(Irp);                          \
                                                                    \
  TdiBuildBaseIrp(Irp, DevObj, FileObj, CompRoutine,                \
                  Contxt, _IrpSp, TDI_DISCONNECT);                  \
                                                                    \
  _Request = (PTDI_REQUEST_KERNEL)&_IrpSp->Parameters;              \
  _Request->RequestConnectionInformation = (RequestConnectionInfo); \
  _Request->ReturnConnectionInformation  = (ReturnConnectionInfo);  \
  _Request->RequestSpecific = (PVOID)(Time);                        \
  _Request->RequestFlags    = (Flags);                              \
}

  /*
 * PIRP
 * TdiBuildInternalDeviceControlIrp(
 * IN CCHAR IrpSubFunction,
 * IN PDEVICE_OBJECT DeviceObject,
 * IN PFILE_OBJECT FileObject,
 * IN PKEVENT Event,
 * IN PIO_STATUS_BLOCK IoStatusBlock);
 */
#define TdiBuildInternalDeviceControlIrp( \
  IrpSubFunction, DeviceObject,           \
  FileObject, Event, IoStatusBlock)       \
  IoBuildDeviceIoControlRequest(          \
		0x00000003, DeviceObject,             \
		NULL, 0, NULL, 0,                     \
		TRUE, Event, IoStatusBlock)

  /*
 * VOID
 * TdiBuildListen(
 * IN PIRP  Irp,
 * IN PDEVICE_OBJECT  DevObj,
 * IN PFILE_OBJECT  FileObj,
 * IN PVOID  CompRoutine,
 * IN PVOID  Contxt,
 * IN ULONG  Flags,
 * IN PTDI_CONNECTION_INFORMATION  RequestConnectionInfo,
 * OUT PTDI_CONNECTION_INFORMATION  ReturnConnectionInfo); 
 */
#define TdiBuildListen(                                             \
  Irp, DevObj, FileObj, CompRoutine, Contxt,                        \
  Flags, RequestConnectionInfo, ReturnConnectionInfo)               \
{                                                                   \
  PTDI_REQUEST_KERNEL _Request;                                     \
  PIO_STACK_LOCATION _IrpSp;                                        \
                                                                    \
  _IrpSp = IoGetNextIrpStackLocation(Irp);                          \
                                                                    \
  TdiBuildBaseIrp(Irp, DevObj, FileObj, CompRoutine,                \
                  Contxt, _IrpSp, TDI_LISTEN);                      \
                                                                    \
  _Request = (PTDI_REQUEST_KERNEL)&_IrpSp->Parameters;              \
  _Request->RequestConnectionInformation = (RequestConnectionInfo); \
  _Request->ReturnConnectionInformation  = (ReturnConnectionInfo);  \
  _Request->RequestFlags = (Flags);                                 \
}

TDIKRNLAPI
VOID
DDKAPI
TdiBuildNetbiosAddress(
  /*IN*/ PUCHAR  NetbiosName,
  /*IN*/ BOOLEAN  IsGroupName,
  /*IN OUT*/ PTA_NETBIOS_ADDRESS  NetworkName);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiBuildNetbiosAddressEa(
  /*IN*/ PUCHAR  Buffer,
  /*IN*/ BOOLEAN  IsGroupName,
  /*IN*/ PUCHAR  NetbiosName);

  /*
 * VOID
 * TdiBuildQueryInformation(
 * IN PIRP  Irp,
 * IN PDEVICE_OBJECT  DevObj,
 * IN PFILE_OBJECT  FileObj,
 * IN PVOID  CompRoutine,
 * IN PVOID  Contxt,
 * IN UINT  QType,
 * IN PMDL  MdlAddr);
 */
#define TdiBuildQueryInformation(                                        \
  Irp, DevObj, FileObj, CompRoutine, Contxt, QType, MdlAddr)             \
{                                                                        \
  PTDI_REQUEST_KERNEL_QUERY_INFORMATION _Request;                        \
  PIO_STACK_LOCATION _IrpSp;                                             \
                                                                         \
  _IrpSp = IoGetNextIrpStackLocation(Irp);                               \
                                                                         \
  TdiBuildBaseIrp(Irp, DevObj, FileObj, CompRoutine,                     \
                  Contxt, _IrpSp, TDI_QUERY_INFORMATION);                \
                                                                         \
  _Request = (PTDI_REQUEST_KERNEL_QUERY_INFORMATION)&_IrpSp->Parameters; \
  _Request->RequestConnectionInformation = NULL;                         \
  _Request->QueryType = (ULONG)(QType);                                  \
  (Irp)->MdlAddress   = (MdlAddr);                                       \
}

  /*
 * VOID
 * TdiBuildReceive(
 * IN PIRP  Irp,
 * IN PDEVICE_OBJECT  DevObj,
 * IN PFILE_OBJECT  FileObj,
 * IN PVOID  CompRoutine,
 * IN PVOID  Contxt,
 * IN PMDL  MdlAddr,
 * IN ULONG  InFlags, 
 * IN ULONG  ReceiveLen); 
 */
#define TdiBuildReceive(                                       \
  Irp, DevObj, FileObj, CompRoutine, Contxt,                   \
  MdlAddr, InFlags, ReceiveLen)                                \
{                                                              \
  PTDI_REQUEST_KERNEL_RECEIVE _Request;                        \
  PIO_STACK_LOCATION _IrpSp;                                   \
                                                               \
  _IrpSp = IoGetNextIrpStackLocation(Irp);                     \
                                                               \
  TdiBuildBaseIrp(Irp, DevObj, FileObj, CompRoutine,           \
                  Contxt, _IrpSp, TDI_RECEIVE);                \
                                                               \
  _Request = (PTDI_REQUEST_KERNEL_RECEIVE)&_IrpSp->Parameters; \
  _Request->ReceiveFlags  = (InFlags);                         \
  _Request->ReceiveLength = (ReceiveLen);                      \
  (Irp)->MdlAddress       = (MdlAddr);                         \
}

  /*
 * VOID
 * TdiBuildReceiveDatagram(
 * IN PIRP  Irp,
 * IN PDEVICE_OBJECT  DevObj,
 * IN PFILE_OBJECT  FileObj,
 * IN PVOID  CompRoutine,
 * IN PVOID  Contxt,
 * IN PMDL  MdlAddr,
 * IN ULONG  ReceiveLen,
 * IN PTDI_CONNECTION_INFORMATION  ReceiveDatagramInfo,
 * OUT PTDI_CONNECTION_INFORMATION  ReturnInfo,
 *   ULONG InFlags); 
 */
#define TdiBuildReceiveDatagram(                                 \
  Irp, DevObj, FileObj, CompRoutine, Contxt, MdlAddr,            \
  ReceiveLen, ReceiveDatagramInfo, ReturnInfo, InFlags)          \
{                                                                \
  PTDI_REQUEST_KERNEL_RECEIVEDG _Request;                        \
  PIO_STACK_LOCATION _IrpSp;                                     \
                                                                 \
  _IrpSp = IoGetNextIrpStackLocation(Irp);                       \
                                                                 \
  TdiBuildBaseIrp(Irp, DevObj, FileObj, CompRoutine,             \
                  Contxt, _IrpSp, TDI_RECEIVE_DATAGRAM);         \
                                                                 \
  _Request = (PTDI_REQUEST_KERNEL_RECEIVEDG)&_IrpSp->Parameters; \
  _Request->ReceiveDatagramInformation = (ReceiveDatagramInfo);  \
  _Request->ReturnDatagramInformation  = (ReturnInfo);           \
  _Request->ReceiveLength = (ReceiveLen);                        \
  _Request->ReceiveFlags  = (InFlags);                           \
  (Irp)->MdlAddress       = (MdlAddr);                           \
}

  /*
 * VOID
 * TdiBuildSend(
 * IN PIRP  Irp,
 * IN PDEVICE_OBJECT  DevObj,
 * IN PFILE_OBJECT  FileObj,
 * IN PVOID  CompRoutine,
 * IN PVOID  Contxt,
 * IN PMDL  MdlAddr,
 * IN ULONG  InFlags,
 * IN ULONG  SendLen);
 */
#define TdiBuildSend(                                       \
  Irp, DevObj, FileObj, CompRoutine, Contxt,                \
  MdlAddr, InFlags, SendLen)                                \
{                                                           \
  PTDI_REQUEST_KERNEL_SEND _Request;                        \
  PIO_STACK_LOCATION _IrpSp;                                \
                                                            \
  _IrpSp = IoGetNextIrpStackLocation(Irp);                  \
                                                            \
  TdiBuildBaseIrp(Irp, DevObj, FileObj, CompRoutine,        \
                  Contxt, _IrpSp, TDI_SEND);                \
                                                            \
  _Request = (PTDI_REQUEST_KERNEL_SEND)&_IrpSp->Parameters; \
  _Request->SendFlags  = (InFlags);                         \
  _Request->SendLength = (SendLen);                         \
  (Irp)->MdlAddress    = (MdlAddr);                         \
}

  /*
 * VOID
 * TdiBuildSendDatagram(
 * IN PIRP  Irp,
 * IN PDEVICE_OBJECT  DevObj,
 * IN PFILE_OBJECT  FileObj,
 * IN PVOID  CompRoutine,
 * IN PVOID  Contxt,
 * IN PMDL  MdlAddr,
 * IN ULONG  SendLen,
 * IN PTDI_CONNECTION_INFORMATION  SendDatagramInfo); 
 */
#define TdiBuildSendDatagram(                                 \
  Irp, DevObj, FileObj, CompRoutine, Contxt,                  \
  MdlAddr, SendLen, SendDatagramInfo)                         \
{                                                             \
  PTDI_REQUEST_KERNEL_SENDDG _Request;                        \
  PIO_STACK_LOCATION _IrpSp;                                  \
                                                              \
  _IrpSp = IoGetNextIrpStackLocation(Irp);                    \
                                                              \
  TdiBuildBaseIrp(Irp, DevObj, FileObj, CompRoutine,          \
                  Contxt, _IrpSp, TDI_SEND_DATAGRAM);         \
                                                              \
  _Request = (PTDI_REQUEST_KERNEL_SENDDG)&_IrpSp->Parameters; \
  _Request->SendDatagramInformation = (SendDatagramInfo);     \
  _Request->SendLength = (SendLen);                           \
  (Irp)->MdlAddress    = (MdlAddr);                           \
}

  /*
 * VOID
 * TdiBuildSetEventHandler(
 * IN PIRP  Irp,
 * IN PDEVICE_OBJECT  DevObj,
 * IN PFILE_OBJECT  FileObj,
 * IN PVOID  CompRoutine,
 * IN PVOID  Contxt,
 * IN INT  InEventType,
 * IN PVOID  InEventHandler,
 * IN PVOID  InEventContext);
 */
#define TdiBuildSetEventHandler(                                 \
  Irp, DevObj, FileObj, CompRoutine, Contxt,                     \
  InEventType, InEventHandler, InEventContext)                   \
{                                                                \
  PTDI_REQUEST_KERNEL_SET_EVENT _Request;                        \
  PIO_STACK_LOCATION _IrpSp;                                     \
                                                                 \
  _IrpSp = IoGetNextIrpStackLocation(Irp);                       \
                                                                 \
  TdiBuildBaseIrp(Irp, DevObj, FileObj, CompRoutine,             \
                  Contxt, _IrpSp, TDI_SET_EVENT_HANDLER);        \
                                                                 \
  _Request = (PTDI_REQUEST_KERNEL_SET_EVENT)&_IrpSp->Parameters; \
  _Request->EventType    = (InEventType);                        \
  _Request->EventHandler = (PVOID)(InEventHandler);              \
  _Request->EventContext = (PVOID)(InEventContext);              \
}

  /*
 * VOID
 * TdiBuildSetInformation(
 * IN PIRP  Irp,
 * IN PDEVICE_OBJECT  DevObj,
 * IN PFILE_OBJECT  FileObj,
 * IN PVOID  CompRoutine,
 * IN PVOID  Contxt,
 * IN UINT  SType,
 * IN PMDL  MdlAddr);
 */
#define TdiBuildSetInformation(                                        \
  Irp, DevObj, FileObj, CompRoutine, Contxt, SType, MdlAddr)           \
{                                                                      \
  PTDI_REQUEST_KERNEL_SET_INFORMATION _Request;                        \
  PIO_STACK_LOCATION _IrpSp;                                           \
                                                                       \
  _IrpSp = IoGetNextIrpStackLocation(Irp);                             \
                                                                       \
  TdiBuildBaseIrp(Irp, DevObj, FileObj, CompRoutine,                   \
                  Contxt, _IrpSp, TDI_SET_INFORMATION);                \
                                                                       \
  _Request = (PTDI_REQUEST_KERNEL_SET_INFORMATION)&_IrpSp->Parameters; \
  _Request->RequestConnectionInformation = NULL;                       \
  _Request->SetType = (ULONG)(SType);                                  \
  (Irp)->MdlAddress = (MdlAddr);                                       \
}

  /* TDI20_CLIENT_INTERFACE_INFO.TdiVersion constants */
#define TDI_CURRENT_MAJOR_VERSION         2
#define TDI_CURRENT_MINOR_VERSION         0

#define TDI_CURRENT_VERSION ((TDI_CURRENT_MINOR_VERSION) << 8 \
  | (TDI_CURRENT_MAJOR_VERSION))

#define TDI_VERSION_ONE                   0x0001

typedef enum _TDI_PNP_OPCODE {
  TDI_PNP_OP_MIN,
  TDI_PNP_OP_ADD,
  TDI_PNP_OP_DEL,
  TDI_PNP_OP_UPDATE,
  TDI_PNP_OP_PROVIDERREADY,
  TDI_PNP_OP_NETREADY,
  TDI_PNP_OP_ADD_IGNORE_BINDING,
  TDI_PNP_OP_DELETE_IGNORE_BINDING,
  TDI_PNP_OP_MAX
} TDI_PNP_OPCODE;

  /* TDI_PNP_CONTEXT.ContextType */
#define TDI_PNP_CONTEXT_TYPE_IF_NAME            0x1
#define TDI_PNP_CONTEXT_TYPE_IF_ADDR            0x2
#define TDI_PNP_CONTEXT_TYPE_PDO                0x3
#define TDI_PNP_CONTEXT_TYPE_FIRST_OR_LAST_IF   0x4

typedef struct _TDI_PNP_CONTEXT {
  USHORT  ContextSize;
  USHORT  ContextType;
  UCHAR  ContextData[1];
} TDI_PNP_CONTEXT, *PTDI_PNP_CONTEXT;

typedef VOID DDKAPI
(*TDI_ADD_ADDRESS_HANDLER)(
  /*IN*/ PTA_ADDRESS  Address);

typedef VOID DDKAPI
(*TDI_ADD_ADDRESS_HANDLER_V2)(
  /*IN*/ PTA_ADDRESS  Address,
  /*IN*/ PUNICODE_STRING  DeviceName,
  /*IN*/ PTDI_PNP_CONTEXT  Context);

typedef VOID DDKAPI
(*TDI_BINDING_HANDLER)(
  /*IN*/ TDI_PNP_OPCODE  PnPOpcode,
  /*IN*/ PUNICODE_STRING  DeviceName,
  /*IN*/ PWSTR  MultiSZBindList);

typedef VOID DDKAPI
(*TDI_BIND_HANDLER)(
  /*IN*/ PUNICODE_STRING  DeviceName);

typedef VOID DDKAPI
(*TDI_DEL_ADDRESS_HANDLER)(
  /*IN*/ PTA_ADDRESS  Address);

typedef VOID DDKAPI
(*TDI_DEL_ADDRESS_HANDLER_V2)(
  /*IN*/ PTA_ADDRESS  Address,
  /*IN*/ PUNICODE_STRING  DeviceName,
  /*IN*/ PTDI_PNP_CONTEXT  Context);

typedef NTSTATUS DDKAPI
(*TDI_PNP_POWER_HANDLER)(
  /*IN*/ PUNICODE_STRING  DeviceName,
  /*IN*/ PNET_PNP_EVENT  PowerEvent,
  /*IN*/ PTDI_PNP_CONTEXT  Context1,
  /*IN*/ PTDI_PNP_CONTEXT  Context2);

typedef VOID DDKAPI
(*TDI_UNBIND_HANDLER)(
  /*IN*/ PUNICODE_STRING  DeviceName);

typedef VOID DDKAPI
(*ProviderPnPPowerComplete)(
  /*IN*/ PNET_PNP_EVENT  NetEvent,
  /*IN*/ NTSTATUS  ProviderStatus);

typedef struct _TDI20_CLIENT_INTERFACE_INFO {
  _ANONYMOUS_UNION union {
    _ANONYMOUS_STRUCT struct {
      UCHAR  MajorTdiVersion;
      UCHAR  MinorTdiVersion;
    } DUMMYSTRUCTNAME;
    USHORT TdiVersion;
  } DUMMYUNIONNAME;
  USHORT  Unused;
  PUNICODE_STRING  ClientName;
  TDI_PNP_POWER_HANDLER  PnPPowerHandler;
  _ANONYMOUS_UNION union {
    TDI_BINDING_HANDLER  BindingHandler;
    _ANONYMOUS_STRUCT struct {
      TDI_BIND_HANDLER  BindHandler;
      TDI_UNBIND_HANDLER  UnBindHandler;
    } DUMMYSTRUCTNAME;
  }DUMMYUNIONNAME2;
  _ANONYMOUS_UNION union {
    _ANONYMOUS_STRUCT struct {
      TDI_ADD_ADDRESS_HANDLER_V2  AddAddressHandlerV2;
      TDI_DEL_ADDRESS_HANDLER_V2  DelAddressHandlerV2;
    } DUMMYSTRUCTNAME;
    _ANONYMOUS_STRUCT struct {
      TDI_ADD_ADDRESS_HANDLER  AddAddressHandler;
      TDI_DEL_ADDRESS_HANDLER  DelAddressHandler;
    } DUMMYSTRUCTNAME2;
  } DUMMYUNIONNAME3;
} TDI20_CLIENT_INTERFACE_INFO, *PTDI20_CLIENT_INTERFACE_INFO;

typedef TDI20_CLIENT_INTERFACE_INFO TDI_CLIENT_INTERFACE_INFO;
typedef TDI_CLIENT_INTERFACE_INFO *PTDI_CLIENT_INTERFACE_INFO;


  /* TDI functions */

  /*
 * VOID
 * TdiCompleteRequest(
 * IN PIRP Irp,
 * IN NTSTATUS Status);
 */
#define TdiCompleteRequest(Irp, Status)           \
{                                                 \
  (Irp)->IoStatus.Status = (Status);              \
  IoCompleteRequest((Irp), IO_NETWORK_INCREMENT); \
}

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiCopyBufferToMdl(
  /*IN*/ PVOID  SourceBuffer,
  /*IN*/ ULONG  SourceOffset,
  /*IN*/ ULONG  SourceBytesToCopy,
  /*IN*/ PMDL  DestinationMdlChain,
  /*IN*/ ULONG  DestinationOffset,
  /*IN*/ PULONG  BytesCopied);

  /*
 * VOID
 * TdiCopyLookaheadData(
 * IN PVOID  Destination,
 * IN PVOID  Source,
 * IN ULONG  Length,
 * IN ULONG  ReceiveFlags);
 */
#define TdiCopyLookaheadData(Destination, Source, Length, ReceiveFlags) \
  RtlCopyMemory(Destination, Source, Length)

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiCopyMdlChainToMdlChain (
  /*IN*/ PMDL  SourceMdlChain,
  /*IN*/ ULONG  SourceOffset,
  /*IN*/ PMDL  DestinationMdlChain,
  /*IN*/ ULONG  DestinationOffset,
  /*OUT*/ PULONG  BytesCopied);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiCopyMdlToBuffer(
  /*IN*/ PMDL  SourceMdlChain,
  /*IN*/ ULONG  SourceOffset,
  /*IN*/ PVOID  DestinationBuffer,
  /*IN*/ ULONG  DestinationOffset,
  /*IN*/ ULONG  DestinationBufferSize,
  /*OUT*/ PULONG  BytesCopied);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiDeregisterAddressChangeHandler(
  /*IN*/ HANDLE  BindingHandle);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiDeregisterDeviceObject(
  /*IN*/ HANDLE  DevRegistrationHandle);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiDeregisterNetAddress(
  /*IN*/ HANDLE  AddrRegistrationHandle);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiDeregisterPnPHandlers(
  /*IN*/ HANDLE  BindingHandle);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiDeregisterProvider(
  /*IN*/ HANDLE  ProviderHandle);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiEnumerateAddresses(
  /*IN*/ HANDLE  BindingHandle);

TDIKRNLAPI
VOID
DDKAPI
TdiInitialize(
  VOID);

TDIKRNLAPI
VOID
DDKAPI
TdiMapBuffer(
  /*IN*/ PMDL  MdlChain);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiMapUserRequest(
  /*IN*/ PDEVICE_OBJECT  DeviceObject,
  /*IN*/ PIRP  Irp,
  /*IN*/ PIO_STACK_LOCATION  IrpSp);

TDIKRNLAPI
BOOLEAN
DDKAPI
TdiMatchPdoWithChainedReceiveContext(
  /*IN*/ PVOID TsduDescriptor,
  /*IN*/ PVOID PDO);

TDIKRNLAPI
VOID
DDKAPI
TdiPnPPowerComplete(
  /*IN*/ HANDLE  BindingHandle,
  /*IN*/ PNET_PNP_EVENT  PowerEvent,
  /*IN*/ NTSTATUS  Status);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiPnPPowerRequest(
  /*IN*/ PUNICODE_STRING  DeviceName,
  /*IN*/ PNET_PNP_EVENT  PowerEvent,
  /*IN*/ PTDI_PNP_CONTEXT  Context1,
  /*IN*/ PTDI_PNP_CONTEXT  Context2,
  /*IN*/ ProviderPnPPowerComplete  ProtocolCompletionHandler);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiProviderReady(
  /*IN*/ HANDLE  ProviderHandle);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiRegisterAddressChangeHandler(
  /*IN*/ TDI_ADD_ADDRESS_HANDLER  AddHandler,
  /*IN*/ TDI_DEL_ADDRESS_HANDLER  DeleteHandler,
  /*OUT*/ HANDLE  *BindingHandle);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiRegisterDeviceObject(
  /*IN*/ PUNICODE_STRING  DeviceName,
  /*OUT*/ HANDLE  *DevRegistrationHandle);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiRegisterNetAddress(
  /*IN*/ PTA_ADDRESS  Address,
  /*IN*/ PUNICODE_STRING  DeviceName,
  /*IN*/ PTDI_PNP_CONTEXT  Context,
  /*OUT*/ HANDLE  *AddrRegistrationHandle);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiRegisterNotificationHandler(
  /*IN*/ TDI_BIND_HANDLER  BindHandler,
  /*IN*/ TDI_UNBIND_HANDLER  UnbindHandler,
  /*OUT*/ HANDLE  *BindingHandle);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiRegisterPnPHandlers(
  /*IN*/ PTDI_CLIENT_INTERFACE_INFO  ClientInterfaceInfo,
  /*IN*/ ULONG  InterfaceInfoSize,
  /*OUT*/ HANDLE  *BindingHandle);

TDIKRNLAPI
NTSTATUS
DDKAPI
TdiRegisterProvider(
  /*IN*/ PUNICODE_STRING  ProviderName,
  /*OUT*/ HANDLE  *ProviderHandle);

TDIKRNLAPI
VOID
DDKAPI
TdiReturnChainedReceives(
  /*IN*/ PVOID  *TsduDescriptors,
  /*IN*/ ULONG   NumberOfTsdus);

TDIKRNLAPI
VOID
DDKAPI
TdiUnmapBuffer(
  /*IN*/ PMDL  MdlChain);

#ifdef __cplusplus
}
#endif

#endif /* __TDIKRNL_H */
@


1.6
log
@	[mingw-Bugs-1424461]
	*include/imagehlp.h: Comment out IN, OUT and OPTIONAL,
	throughout.
	*include/rpcdce.h: Don't define IN, OUT or OPTIONAL if
	_NO_W32_PSEUDO_MODIFIERS.
	*include/rpcnsi.h: Comment out IN, OUT and OPTIONAL,
	throughout.
	*include/rpcnsip.h: Likewise.
	*include/windef.h: Don't define IN, OUT or OPTIONAL
	if _NO_W32_PSEUDO_MODIFIERS.
	*include/ddk/batclass.h: Comment out IN, OUT and OPTIONAL,
	throughout.
	*include/ddk/cfgmgr32.h: Likewise.
	*include/ddk/ddkmapi.h: Likewise.
	*include/ddk/hidclass.h: Likewise.
	*include/ddk/hidpi.h: Likewise.
	*include/ddk/kbdmou.h: Likewise.
	*include/ddk/mcd.h: Likewise.
	*include/ddk/miniport.h: Likewise.
	*include/ddk/minitape.h: Likewise.
	*include/ddk/ndis.h: Likewise.
	*include/ddk/ndistapi.h: Likewise.
	*include/ddk/ndiswan.h: Likewise.
	*include/ddk/ntapi.h: Likewise.
	*include/ddk/ntdd8042.h: Likewise.
	*include/ddk/ntddpcm.h: Likewise.
	*include/ddk/ntifs.h: Likewise.
	*include/ddk/ntpoapi.h: Likewise.
	*include/ddk/parallel.h: Likewise.
	*include/ddk/pfhook.h: Likewise.
	*include/ddk/scsiwmi.h: Likewise.
	*include/ddk/smbus.h: Likewise.
	*include/ddk/srb.h: Likewise.
	*include/ddk/storport.h: Likewise.
	*include/ddk/tdikrnl.h: Likewise.
	*include/ddk/upssvc.h: Likewise.
	*include/ddk/usbcamdi.h: Likewise.
	*include/ddk/usbscan.h: Likewise.
	*include/ddk/video.h: Likewise.
	*include/ddk/videoagp.h: Likewise.
	*include/ddk/win2k.h: Likewise.
	*include/ddk/winddi.h: Likewise.
	*include/ddk/winddk.h: Don't define IN, OUT or OPTIONAL
	if _NO_W32_PSEUDO_MODIFIERS.
	Comment out IN, OUT and OPTIONAL, throughout.
	*include/ddk/winnt4.h: Comment out IN, OUT and OPTIONAL,
	throughout.
	*include/ddk/ws2san.h: Likewise.
@
text
@@


1.5
log
@2004-09-29  Filip Navara  <xnavara@@volny.cz>

	* include/ddk/(atm.h, batclass.h, cfg.h, cfgmgr32.h, d4drvif.h,
	d4iface.h, ddkmapi.h, hidclass.h, hidpi.h, mcd.h, miniport.h,
	mountdev.h, mountmgr.h, ndis.h, ndistapi.h, ndiswan.h, netpnp.h,
	newdev.h, ntapi.h, ntdd8042.h, ntddbeep.h, ntddcdrm.h, ntddcdvd.h,
	ntddchgr.h, ntdddisk.h, ntddkbd.h, ntddmou.h, ntddpar.h, ntddpcm.h,
	ntddscsi.h, ntddser.h, ntddstor.h, ntddtape.h, ntddtdi.h,
	ntddvdeo.h, ntddvol.h, ntpoapi.h, parallel.h, pfhook.h, poclass.h,
	scsi.h, scsiscan.h, smbus.h, srb.h, storport.h, tdiinfo.h,
	tdikrnl.h, tvout.h, upssvc.h, usb.h, usb100.h, usbdi.h, usbioctl.h,
	usbiodef.h, usbscan.h, usbuser.h, videoagp.h, winddi.h, winddk.h,
	winnt4.h, ws2san.h): Fixed packing.
	* include/ddk/atm.h (ATM_TRAFFIC_DESCRIPTOR_IE): Fixed declaration.
	* include/ddk/hidclass.h (HID_INTERFACE_HIDPARSE,
	HID_INTERFACE_NOTIFY_PNP): Likewise.
	* include/ddk/ndis.h (NDIS_DMA_BLOCK, CO_FLOW_PARAMETERS): Likewise.
	(NdisQueryPacketLength): Added macro. Thanks to Art Yerkes
	<ayerkes@@speakeasy.net>.
	* include/ddk/usb100.h (USB_CONFIGURATION_DESCRIPTOR): Fixed
	declaration.
	* include/ddk/winddi.h (PATHDATA, GLYPHPOS): Likewise.
	* include/ddk/winddk.h (PDRIVER_CONTROL, PDRIVER_LIST_CONTROL,
	PDRIVER_ADD_DEVICE, PIO_COMPLETION_ROUTINE, PDRIVER_CANCEL,
	PKDEFERRED_ROUTINE, PDRIVER_DISPATCH, PIO_DPC_ROUTINE,
	PMM_DLL_INITIALIZE, PMM_DLL_UNLOAD, PDRIVER_ENTRY,
	PDRIVER_INITIALIZE, PKSERVICE_ROUTINE, PIO_TIMER_ROUTINE,
	PDRIVER_REINITIALIZE, PDRIVER_STARTIO, PKSYNCHRONIZE_ROUTINE,
	PDRIVER_UNLOAD, DRIVER_OBJECT): Fixed callback declarations.
	(struct FILE_BASIC_INFORMATION): Renamed to _FILE_BASIC_INFORMATION.
	(SYNCH_LEVEL): Added definition.
	(KPCR, KPCR_TIB): Fixed declaration.
	(Interlocked[Push/Pop]EntrySList): Declare only if winbase.h isn't
	included and _WIN32_WINNT >= 0x0501.
	(RtlEqualLuid): Fixed macro definition.
	(KfLowerIrql, KfRaiseIrql): Declare and use instead of KeLowerIrql and
	KeRaiseIrql on i386 architectures.
@
text
@d166 9
a174 9
  IN PVOID  TdiEventContext,
  IN LONG  RemoteAddressLength,
  IN PVOID  RemoteAddress,
  IN LONG  UserDataLength,
  IN PVOID  UserData,
  IN LONG  OptionsLength,
  IN PVOID  Options,
  OUT CONNECTION_CONTEXT  *ConnectionContext,
  OUT PIRP  *AcceptIrp);
d180 9
a188 9
  IN PVOID  TdiEventContext,
  IN LONG  RemoteAddressLength,
  IN PVOID  RemoteAddress,
  IN LONG  UserDataLength,
  IN PVOID  UserData,
  IN LONG  OptionsLength,
  IN PVOID  Options,
  OUT CONNECTION_CONTEXT *ConnectionContext,
  OUT PIRP  *AcceptIrp);
d192 7
a198 7
  IN PVOID  TdiEventContext,
  IN CONNECTION_CONTEXT  ConnectionContext,
  IN LONG  DisconnectDataLength,
  IN PVOID  DisconnectData,
  IN LONG  DisconnectInformationLength,
  IN PVOID  DisconnectInformation,
  IN ULONG  DisconnectFlags);
d204 7
a210 7
  IN PVOID  TdiEventContext,
  IN CONNECTION_CONTEXT  ConnectionContext,
  IN LONG  DisconnectDataLength,
  IN PVOID  DisconnectData,
  IN LONG  DisconnectInformationLength,
  IN PVOID  DisconnectInformation,
  IN ULONG  DisconnectFlags);
d214 2
a215 2
  IN PVOID  TdiEventContext,
  IN NTSTATUS  Status);
d219 3
a221 3
  IN PVOID  TdiEventContext,
  IN NTSTATUS  Status,
  IN PVOID  Buffer);
d227 2
a228 2
  IN PVOID  TdiEventContext,
  IN NTSTATUS  Status);
d232 8
a239 8
  IN PVOID  TdiEventContext,
  IN CONNECTION_CONTEXT  ConnectionContext,
  IN ULONG  ReceiveFlags,
  IN ULONG  BytesIndicated,
  IN ULONG  BytesAvailable,
  OUT ULONG  *BytesTaken,
  IN PVOID  Tsdu,
  OUT PIRP  *IoRequestPacket);
d245 8
a252 8
  IN PVOID  TdiEventContext,
  IN CONNECTION_CONTEXT  ConnectionContext,
  IN ULONG  ReceiveFlags,
  IN ULONG  BytesIndicated,
  IN ULONG  BytesAvailable,
  OUT ULONG  *BytesTaken,
  IN PVOID  Tsdu,
  OUT PIRP  *IoRequestPacket);
d256 11
a266 11
  IN PVOID  TdiEventContext,
  IN LONG  SourceAddressLength,
  IN PVOID  SourceAddress,
  IN LONG  OptionsLength,
  IN PVOID  Options,
  IN ULONG  ReceiveDatagramFlags,
  IN ULONG  BytesIndicated,
  IN ULONG  BytesAvailable,
  OUT ULONG  *BytesTaken,
  IN PVOID  Tsdu,
  OUT PIRP  *IoRequestPacket);
d271 11
a281 11
  IN PVOID  TdiEventContext,
  IN LONG  SourceAddressLength,
  IN PVOID  SourceAddress,
  IN LONG  OptionsLength,
  IN PVOID  Options,
  IN ULONG  ReceiveDatagramFlags,
  IN ULONG  BytesIndicated,
  IN ULONG  BytesAvailable,
  OUT ULONG  *BytesTaken,
  IN PVOID  Tsdu,
  OUT PIRP  *IoRequestPacket);
d285 8
a292 8
  IN PVOID  TdiEventContext,
  IN CONNECTION_CONTEXT  ConnectionContext,
  IN ULONG  ReceiveFlags,
  IN ULONG  BytesIndicated,
  IN ULONG  BytesAvailable,
  OUT ULONG  *BytesTaken,
  IN PVOID  Tsdu,
  OUT PIRP  *IoRequestPacket);
d298 8
a305 8
  IN PVOID  TdiEventContext,
  IN CONNECTION_CONTEXT  ConnectionContext,
  IN ULONG  ReceiveFlags,
  IN ULONG  BytesIndicated,
  IN ULONG  BytesAvailable,
  OUT ULONG  *BytesTaken,
  IN PVOID  Tsdu,
  OUT PIRP  *IoRequestPacket);
d309 7
a315 7
  IN PVOID  TdiEventContext,
  IN CONNECTION_CONTEXT  ConnectionContext,
  IN ULONG  ReceiveFlags,
  IN ULONG  ReceiveLength,
  IN ULONG  StartingOffset,
  IN PMDL  Tsdu,
  IN PVOID  TsduDescriptor);
d321 7
a327 7
  IN PVOID  TdiEventContext,
  IN CONNECTION_CONTEXT  ConnectionContext,
  IN ULONG  ReceiveFlags,
  IN ULONG  ReceiveLength,
  IN ULONG  StartingOffset,
  IN PMDL  Tsdu,
  IN PVOID  TsduDescriptor);
d331 10
a340 10
  IN PVOID  TdiEventContext,
  IN LONG  SourceAddressLength,
  IN PVOID  SourceAddress,
  IN LONG  OptionsLength,
  IN PVOID  Options,
  IN ULONG  ReceiveDatagramFlags,
  IN ULONG  ReceiveDatagramLength,
  IN ULONG  StartingOffset,
  IN PMDL  Tsdu,
  IN PVOID  TsduDescriptor);
d346 10
a355 10
  IN PVOID  TdiEventContext,
  IN LONG  SourceAddressLength,
  IN PVOID  SourceAddress,
  IN LONG  OptionsLength,
  IN PVOID  Options,
  IN ULONG  ReceiveDatagramFlags,
  IN ULONG  ReceiveDatagramLength,
  IN ULONG  StartingOffset,
  IN PMDL  Tsdu,
  IN PVOID  TsduDescriptor);
d359 7
a365 7
  IN PVOID  TdiEventContext,
  IN CONNECTION_CONTEXT  ConnectionContext,
  IN ULONG  ReceiveFlags,
  IN ULONG  ReceiveLength,
  IN ULONG  StartingOffset,
  IN PMDL  Tsdu,
  IN PVOID  TsduDescriptor);
d371 7
a377 7
  IN PVOID  TdiEventContext,
  IN CONNECTION_CONTEXT  ConnectionContext,
  IN ULONG  ReceiveFlags,
  IN ULONG  ReceiveLength,
  IN ULONG  StartingOffset,
  IN PMDL  Tsdu,
  IN PVOID  TsduDescriptor);
d381 3
a383 3
  IN PVOID  TdiEventContext,
  IN PVOID  ConnectionContext,
  IN ULONG  BytesAvailable);
d389 3
a391 3
  IN PVOID  TdiEventContext,
  IN PVOID  ConnectionContext,
  IN ULONG  BytesAvailable);
d395 1
a395 1
/* Macros and functions to build IRPs */
d410 1
a410 1
/*
d413 7
a419 7
 *   IN PIRP  Irp,
 *   IN PDEVICE_OBJECT  DevObj,
 *   IN PFILE_OBJECT  FileObj,
 *   IN PVOID  CompRoutine,
 *   IN PVOID  Contxt,
 *   IN PTDI_CONNECTION_INFORMATION  RequestConnectionInfo,
 *   OUT PTDI_CONNECTION_INFORMATION  ReturnConnectionInfo);
d438 1
a438 1
/*
d441 6
a446 6
 *   IN PIRP  Irp,
 *   IN PDEVICE_OBJECT  DevObj,
 *   IN PFILE_OBJECT  FileObj,
 *   IN PVOID  CompRoutine,
 *   IN PVOID  Contxt,
 *   IN PMDL  MdlAddr);
d461 1
a461 1
/*
d464 6
a469 6
 *   IN PIRP  Irp,
 *   IN PDEVICE_OBJECT  DevObj,
 *   IN PFILE_OBJECT  FileObj,
 *   IN PVOID  CompRoutine,
 *   IN PVOID  Contxt,
 *   IN HANDLE  AddrHandle);
d486 1
a486 1
/*
d489 8
a496 8
 *   IN PIRP  Irp,
 *   IN PDEVICE_OBJECT  DevObj,
 *   IN PFILE_OBJECT  FileObj,
 *   IN PVOID  CompRoutine,
 *   IN PVOID  Contxt,
 *   IN PLARGE_INTEGER  Time,
 *   IN PTDI_CONNECTION_INFORMATION  RequestConnectionInfo,
 *   OUT PTDI_CONNECTION_INFORMATION  ReturnConnectionInfo); 
d516 1
a516 1
/*
d519 5
a523 5
 *   IN PIRP  Irp,
 *   IN PDEVICE_OBJECT  DevObj,
 *   IN PFILE_OBJECT  FileObj,
 *   IN PVOID  CompRoutine,
 *   IN PVOID  Contxt);
d536 1
a536 1
/*
d539 9
a547 9
 *   IN PIRP  Irp,
 *   IN PDEVICE_OBJECT  DevObj,
 *   IN PFILE_OBJECT  FileObj,
 *   IN PVOID  CompRoutine,
 *   IN PVOID  Contxt,
 *   IN PLARGE_INTEGER  Time,
 *   IN PULONG  Flags,
 *   IN PTDI_CONNECTION_INFORMATION  RequestConnectionInfo,
 *   OUT PTDI_CONNECTION_INFORMATION  ReturnConnectionInfo); 
d568 1
a568 1
/*
d571 5
a575 5
 *   IN CCHAR IrpSubFunction,
 *   IN PDEVICE_OBJECT DeviceObject,
 *   IN PFILE_OBJECT FileObject,
 *   IN PKEVENT Event,
 *   IN PIO_STATUS_BLOCK IoStatusBlock);
d585 1
a585 1
/*
d588 8
a595 8
 *   IN PIRP  Irp,
 *   IN PDEVICE_OBJECT  DevObj,
 *   IN PFILE_OBJECT  FileObj,
 *   IN PVOID  CompRoutine,
 *   IN PVOID  Contxt,
 *   IN ULONG  Flags,
 *   IN PTDI_CONNECTION_INFORMATION  RequestConnectionInfo,
 *   OUT PTDI_CONNECTION_INFORMATION  ReturnConnectionInfo); 
d619 3
a621 3
	IN PUCHAR  NetbiosName,
	IN BOOLEAN  IsGroupName,
	IN OUT PTA_NETBIOS_ADDRESS  NetworkName);
d627 3
a629 3
  IN PUCHAR  Buffer,
  IN BOOLEAN  IsGroupName,
  IN PUCHAR  NetbiosName);
d631 1
a631 1
/*
d634 7
a640 7
 *   IN PIRP  Irp,
 *   IN PDEVICE_OBJECT  DevObj,
 *   IN PFILE_OBJECT  FileObj,
 *   IN PVOID  CompRoutine,
 *   IN PVOID  Contxt,
 *   IN UINT  QType,
 *   IN PMDL  MdlAddr);
d659 1
a659 1
/*
d662 8
a669 8
 *   IN PIRP  Irp,
 *   IN PDEVICE_OBJECT  DevObj,
 *   IN PFILE_OBJECT  FileObj,
 *   IN PVOID  CompRoutine,
 *   IN PVOID  Contxt,
 *   IN PMDL  MdlAddr,
 *   IN ULONG  InFlags, 
 *   IN ULONG  ReceiveLen); 
d689 1
a689 1
/*
d692 9
a700 9
 *   IN PIRP  Irp,
 *   IN PDEVICE_OBJECT  DevObj,
 *   IN PFILE_OBJECT  FileObj,
 *   IN PVOID  CompRoutine,
 *   IN PVOID  Contxt,
 *   IN PMDL  MdlAddr,
 *   IN ULONG  ReceiveLen,
 *   IN PTDI_CONNECTION_INFORMATION  ReceiveDatagramInfo,
 *   OUT PTDI_CONNECTION_INFORMATION  ReturnInfo,
d723 1
a723 1
/*
d726 8
a733 8
 *   IN PIRP  Irp,
 *   IN PDEVICE_OBJECT  DevObj,
 *   IN PFILE_OBJECT  FileObj,
 *   IN PVOID  CompRoutine,
 *   IN PVOID  Contxt,
 *   IN PMDL  MdlAddr,
 *   IN ULONG  InFlags,
 *   IN ULONG  SendLen);
d753 1
a753 1
/*
d756 8
a763 8
 *   IN PIRP  Irp,
 *   IN PDEVICE_OBJECT  DevObj,
 *   IN PFILE_OBJECT  FileObj,
 *   IN PVOID  CompRoutine,
 *   IN PVOID  Contxt,
 *   IN PMDL  MdlAddr,
 *   IN ULONG  SendLen,
 *   IN PTDI_CONNECTION_INFORMATION  SendDatagramInfo); 
d783 1
a783 1
/*
d786 8
a793 8
 *   IN PIRP  Irp,
 *   IN PDEVICE_OBJECT  DevObj,
 *   IN PFILE_OBJECT  FileObj,
 *   IN PVOID  CompRoutine,
 *   IN PVOID  Contxt,
 *   IN INT  InEventType,
 *   IN PVOID  InEventHandler,
 *   IN PVOID  InEventContext);
d813 1
a813 1
/*
d816 7
a822 7
 *   IN PIRP  Irp,
 *   IN PDEVICE_OBJECT  DevObj,
 *   IN PFILE_OBJECT  FileObj,
 *   IN PVOID  CompRoutine,
 *   IN PVOID  Contxt,
 *   IN UINT  SType,
 *   IN PMDL  MdlAddr);
d841 1
a841 1
/* TDI20_CLIENT_INTERFACE_INFO.TdiVersion constants */
d862 1
a862 1
/* TDI_PNP_CONTEXT.ContextType */
d876 1
a876 1
  IN PTA_ADDRESS  Address);
d880 3
a882 3
  IN PTA_ADDRESS  Address,
  IN PUNICODE_STRING  DeviceName,
  IN PTDI_PNP_CONTEXT  Context);
d886 3
a888 3
  IN TDI_PNP_OPCODE  PnPOpcode,
  IN PUNICODE_STRING  DeviceName,
  IN PWSTR  MultiSZBindList);
d892 1
a892 1
  IN PUNICODE_STRING  DeviceName);
d896 1
a896 1
  IN PTA_ADDRESS  Address);
d900 3
a902 3
  IN PTA_ADDRESS  Address,
  IN PUNICODE_STRING  DeviceName,
  IN PTDI_PNP_CONTEXT  Context);
d906 4
a909 4
  IN PUNICODE_STRING  DeviceName,
  IN PNET_PNP_EVENT  PowerEvent,
  IN PTDI_PNP_CONTEXT  Context1,
  IN PTDI_PNP_CONTEXT  Context2);
d913 1
a913 1
  IN PUNICODE_STRING  DeviceName);
d917 2
a918 2
  IN PNET_PNP_EVENT  NetEvent,
  IN NTSTATUS  ProviderStatus);
d954 1
a954 1
/* TDI functions */
d956 1
a956 1
/*
d959 2
a960 2
 *   IN PIRP Irp,
 *   IN NTSTATUS Status);
d972 6
a977 6
  IN PVOID  SourceBuffer,
  IN ULONG  SourceOffset,
  IN ULONG  SourceBytesToCopy,
  IN PMDL  DestinationMdlChain,
  IN ULONG  DestinationOffset,
  IN PULONG  BytesCopied);
d979 1
a979 1
/*
d982 4
a985 4
 *   IN PVOID  Destination,
 *   IN PVOID  Source,
 *   IN ULONG  Length,
 *   IN ULONG  ReceiveFlags);
d994 5
a998 5
  IN PMDL  SourceMdlChain,
  IN ULONG  SourceOffset,
  IN PMDL  DestinationMdlChain,
  IN ULONG  DestinationOffset,
  OUT PULONG  BytesCopied);
d1004 6
a1009 6
  IN PMDL  SourceMdlChain,
  IN ULONG  SourceOffset,
  IN PVOID  DestinationBuffer,
  IN ULONG  DestinationOffset,
  IN ULONG  DestinationBufferSize,
  OUT PULONG  BytesCopied);
d1015 1
a1015 1
  IN HANDLE  BindingHandle);
d1021 1
a1021 1
  IN HANDLE  DevRegistrationHandle);
d1027 1
a1027 1
  IN HANDLE  AddrRegistrationHandle);
d1033 1
a1033 1
  IN HANDLE  BindingHandle);
d1039 1
a1039 1
  IN HANDLE  ProviderHandle);
d1045 1
a1045 1
  IN HANDLE  BindingHandle);
d1057 1
a1057 1
  IN PMDL  MdlChain);
d1063 3
a1065 3
  IN PDEVICE_OBJECT  DeviceObject,
  IN PIRP  Irp,
  IN PIO_STACK_LOCATION  IrpSp);
d1071 2
a1072 2
  IN PVOID TsduDescriptor,
  IN PVOID PDO);
d1078 3
a1080 3
  IN HANDLE  BindingHandle,
  IN PNET_PNP_EVENT  PowerEvent,
  IN NTSTATUS  Status);
d1086 5
a1090 5
  IN PUNICODE_STRING  DeviceName,
  IN PNET_PNP_EVENT  PowerEvent,
  IN PTDI_PNP_CONTEXT  Context1,
  IN PTDI_PNP_CONTEXT  Context2,
  IN ProviderPnPPowerComplete  ProtocolCompletionHandler);
d1096 1
a1096 1
  IN HANDLE  ProviderHandle);
d1102 3
a1104 3
  IN TDI_ADD_ADDRESS_HANDLER  AddHandler,
  IN TDI_DEL_ADDRESS_HANDLER  DeleteHandler,
  OUT HANDLE  *BindingHandle);
d1110 2
a1111 2
  IN PUNICODE_STRING  DeviceName,
  OUT HANDLE  *DevRegistrationHandle);
d1117 4
a1120 4
  IN PTA_ADDRESS  Address,
  IN PUNICODE_STRING  DeviceName,
  IN PTDI_PNP_CONTEXT  Context,
  OUT HANDLE  *AddrRegistrationHandle);
d1126 3
a1128 3
  IN TDI_BIND_HANDLER  BindHandler,
  IN TDI_UNBIND_HANDLER  UnbindHandler,
  OUT HANDLE  *BindingHandle);
d1134 3
a1136 3
  IN PTDI_CLIENT_INTERFACE_INFO  ClientInterfaceInfo,
  IN ULONG  InterfaceInfoSize,
  OUT HANDLE  *BindingHandle);
d1142 2
a1143 2
  IN PUNICODE_STRING  ProviderName,
  OUT HANDLE  *ProviderHandle);
d1149 2
a1150 2
  IN PVOID  *TsduDescriptors,
  IN ULONG   NumberOfTsdus);
d1156 1
a1156 1
  IN PMDL  MdlChain);
@


1.4
log
@	Clean up warnings in ddk.

	* include/ddk/atm.h (_ATM_AAL_OOB_INFO): Add _ANONYMOUS_UNION,
	conditional on  __cplusplus.
	* include/ddk/scsi.h: Add _ANONYMOUS_UNION and _ANONYMOUS_STRUCT
	defines, throughout.
	(_CDB): Add _ANONYMOUS_UNION, conditional on __cplusplus.
	* include/ddk/cfg.h (_PNP_VETO_TYPE): Remove extra comma.
	* include/ddk/cfgmgr32.h: Change C++ comment style to ISO C.
	* include/ddk/ddkmapi.h (_DDLOCKOUT): Add _ANONYMOUS_UNION defines.
	* include/ddk/hidpi.h: Add _ANONYMOUS_UNION and _ANONYMOUS_STRUCT
	defines, throughout.
	* include/ddk/ndis.h: Add _ANONYMOUS_UNION and _ANONYMOUS_STRUCT
	defines, throughout. Remove trailing semicolon from *_S 'structure'
	macro expansion, throughout. Remove trailing semicolon from
	DECLARE_UNKNOWN_STRUCT macro expansion.
	* include/ddk/ndiswan.h (_NDIS_WAN_COMPRESS_INFO): Add
	_ANONYMOUS_UNION.
	* include/ddk/ntapi.h (_PROCESS_DEVICEMAP_INFORMATION,
	_PROCESS_SESSION_INFORMATION): Add _ANONYMOUS_UNION.
	* include/ddk/ntddcdrm.h (CDROM_TOC_CD_TEXT_DATA_BLOCK):
	Add _ANONYMOUS_UNION.
	* include/ddk/ntdddisk.h: Add _ANONYMOUS_UNION, throughout.
	* include/ddk/ntddmou.h:  Add _ANONYMOUS_UNION, throughout.
	* include/ddk/ntifs.h:  Add _ANONYMOUS_UNION, throughout.
	(ZwQueryObject): Change 2nd param to OBJECT_INFORMATION_CLASS, to
	match proto in ntapi.h.
	(ZwSetInformationObject): Likewise.
	* include/ddk/srb.h (SCSI_REQUEST_BLOCK): Add _ANONYMOUS_UNION.
	(SCSI_ADAPTER_CONTROL_TYPE): Add __extension__.
	* include/ddk/tdikrnl.h (TDI20_CLIENT_INTERFACE_INFO): Add
	_ANONYMOUS_UNION and _ANONYMOUS_STRUCT.
	* include/ddk/usb.h (USB): Add _ANONYMOUS_UNION.
	* include/ddk/usbcamdi.h (USBCAMD_CamControlFlags): Remove
	last comma.
	* include/ddk/video.h (STATUS_BLOCK): Add _ANONYMOUS_UNION.
	* include/ddk/winddk.h (DECLARE_INTERNAL_OBJECT): Remove
	trailing semicolon when expanding macro.
	(GENERAL_LOOKASIDE_S): Likewise.
	Add _ANONYMOUS_UNION and _ANONYMOUS_STRUCT, throughout.
	Change inline to __inline, throughout.
	* include/ddk/winnt4.h: Change inline to __inline, throughout.
@
text
@a33 2
#pragma pack(push,4)

a1157 2
#pragma pack(pop)

@


1.3
log
@	* include/ddk/(atm.h, batclass.h, cfg.h, cfgmgr32.h, d4drvif.h,
	d4iface.h, ddkmapi.h, hidclass.h, hidpi.h, hidusage.h, mcd.h,
	miniport.h, minitape.h, mountdev.h, mountmgr.h, ndis.h,
	ndisquid.h, ndistapi.h, ndisvan.h, netevent.h, netpnp.h,
	netdev.h, ntapi.h, ntdd8042.h, ntddbeep.h, ntddcdrm.h,
	ntddcdvd.h, ntddchgr.h, ntdddisk.h, ntddk.h, ntddkbd.h,
	ntddmou.h, ntddndis.h, ntddpar.h, ntddpcm.h, ntddscsi.h,
	ntddser.h, ntddstor.h, ntddtape.h, ntddtdi.h, ntddvdeo.h,
	ntddvol.h, ntifs.h, ntpoapi.h, ntstatus.h, parallel.h, pfhook.h,
	poclass.h, scsi.h, scsiscan.h, scsiwmi.h, smbus.h, srb.h,
	storport.h, tdi.h, tdiinfo.h, tdikrnl.h, tdistat.h, tvout.h,
	upssvc.h, usb.h, usb100.h, usbcamdi.h, usbdi.h, usbioctl.h,
	usbiodef.h, usbscan.h, usbuser.h, video.h, videoagp.h, win2k.h,
	winddi.h, winddk.h, winnt4.h, winxp.h, ws2san.h,
	xfilter.h): Change comment to refer w32api package, not MinGW.
@
text
@d861 1
a861 1
  TDI_PNP_OP_MAX,
d923 2
a924 2
  union {
    struct {
d927 1
a927 1
    };
d929 1
a929 1
  };
d933 1
a933 1
  union {
d935 1
a935 1
    struct {
d938 4
a941 4
    };
  };
  union {
    struct {
d944 2
a945 2
    };
    struct {
d948 2
a949 2
    };
  };
@


1.2
log
@	* include/ddk/(atm.h, batclass.h, cfg.h, cfgmgr32.h, d4drvif.h,
	d4iface.h, ddkmapi.h, hidclass.h, hidpi.h, hidusage.h, mcd.h,
	miniport.h, minitape.h, mountdev.h, mountmgr.h, ndis.h,
	ndisquid.h, ndistapi.h, ndisvan.h, netevent.h, netpnp.h,
	netdev.h, ntapi.h, ntdd8042.h, ntddbeep.h, ntddcdrm.h,
	ntddcdvd.h, ntddchgr.h, ntdddisk.h, ntddk.h, ntddkbd.h,
	ntddmou.h, ntddndis.h, ntddpar.h, ntddpcm.h, ntddscsi.h,
	ntddser.h, ntddstor.h, ntddtape.h, ntddtdi.h, ntddvdeo.h,
	ntddvol.h, ntifs.h, ntpoapi.h, ntstatus.h, parallel.h, pfhook.h,
	poclass.h, scsi.h, scsiscan.h, scsiwmi.h, smbus.h, srb.h,
	storport.h, tdi.h, tdiinfo.h, tdikrnl.h, tdistat.h, tvout.h,
	upssvc.h, usb.h, usb100.h, usbcamdi.h, usbdi.h, usbioctl.h,
	usbiodef.h, usbscan.h, usbuser.h, video.h, videoagp.h, win2k.h,
	winddi.h, winddk.h, winnt4.h, winxp.h, ws2san.h,
	xfilter.h): Fix typo in disclaimer comment.
@
text
@d6 1
a6 1
 * This file is part of the MinGW package.
@


1.1
log
@
2002-10-06  Casper Hornstrup  <chorns@@it.dk>

	* include/ddk: New subdir.
	* lib/ddk: Ditto.
	* include/ddk/(atm.h, batclass.h, cfg.h, cfgmgr32.h, d4drvif.h,
	d4iface.h, ddkmapi.h, hidclass.h, hidpi.h, hidusage.h, mcd.h,
	miniport.h, minitape.h, mountdev.h, mountmgr.h, ndis.h,
	ndisquid.h, ndistapi.h, ndisvan.h, netevent.h, netpnp.h,
	netdev.h, ntapi.h, ntdd8042.h, ntddbeep.h, ntddcdrm.h,
	ntddcdvd.h, ntddchgr.h, ntdddisk.h, ntddk.h, ntddkbd.h,
	ntddmou.h, ntddndis.h, ntddpar.h, ntddpcm.h, ntddscsi.h,
	ntddser.h, ntddstor.h, ntddtape.h, ntddtdi.h, ntddvdeo.h,
	ntddvol.h, ntifs.h, ntpoapi.h, ntstatus.h, parallel.h, pfhook.h,
	poclass.h, scsi.h, scsiscan.h, scsiwmi.h, smbus.h, srb.h,
	storport.h, tdi.h, tdiinfo.h, tdikrnl.h, tdistat.h, tvout.h,
	upssvc.h, usb.h, usb100.h, usbcamdi.h, usbdi.h, usbioctl.h,
	usbiodef.h, usbscan.h, usbuser.h, video.h, videoagp.h, win2k.h,
	winddi.h, winddk.h, winnt4.h, winxp.h, ws2san.h,
	xfilter.h): New files.
	* lib/ddk/(Makefile.in, apcups.def, cfgmgr32.def, dxapi.def,
	hal.def, hid.def, hidparse.def, mcd.def, ndis.def, ntoskrnl.def,
	scsiport.def, tdi.def, usbcamd.def, usbcamd2.def, videoprt.def,
	win32k.def): Ditto.
@
text
@d18 1
a18 1
 * DISCLAMED. This includes but is not limited to warranties of
@

