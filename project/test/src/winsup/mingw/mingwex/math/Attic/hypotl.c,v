head	1.3;
access;
symbols
	cygwin-1_7_17-release:1.2
	cygwin-64bit-branch:1.2.0.22
	cygwin-1_7_16-release:1.2
	cygwin-1_7_15-release:1.2
	cygwin-1_7_14_2-release:1.2
	cygwin-1_7_14-release:1.2
	cygwin-1_7_12-release:1.2
	cygwin-1_7_11-release:1.2
	cygwin-1_7_10-release:1.2
	cygwin-1_7_9-release:1.2
	cygwin-1_7_8-release:1.2
	cygwin-1_7_7-release:1.2
	cygwin-1_7_5-release:1.2
	cygwin-1_7_4-release:1.2
	cygwin-1_7_3-release:1.2
	cygwin-1_7_2-release:1.2
	cygwin-1_7_1-release:1.2
	cv-branch-2:1.2.0.20
	cr-0x5f1:1.2.0.18
	cv-branch:1.2.0.16
	cr-0x3b58:1.2.0.14
	cr-0x9e:1.2.0.12
	cr-0x9d:1.2.0.10
	corinna-01:1.2
	cr-0x9c:1.2.0.8
	cr-0x9b:1.2.0.6
	cr-0x99:1.2
	Z-emcb-cygwin_daemon:1.2.0.4
	w32api-2_2:1.2
	mingw-runtime-2_4:1.2
	mingw-std-ns-branch:1.2.0.2;
locks; strict;
comment	@ * @;


1.3
date	2012.11.07.16.52.23;	author cgf;	state dead;
branches;
next	1.2;

1.2
date	2002.09.02.03.00.37;	author dannysmith;	state Exp;
branches;
next	1.1;

1.1
date	2002.07.29.03.00.09;	author dannysmith;	state Exp;
branches;
next	;


desc
@@


1.3
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@#include <math.h>
#include <float.h>
#include <errno.h>

/*
This implementation is based largely on Cephes library
function cabsl (cmplxl.c), which bears the following notice:

Cephes Math Library Release 2.1:  January, 1989
Copyright 1984, 1987, 1989 by Stephen L. Moshier
Direct inquiries to 30 Frost Street, Cambridge, MA 02140
*/

/*
   Modified for use in libmingwex.a
   02 Sept 2002  Danny Smith  <dannysmith@@users.sourceforege.net>
   Calls to ldexpl replaced by logbl and calls to frexpl replaced
   by scalbnl to avoid duplicated range checks.
*/

extern long double __INFL;
#define PRECL 32

long double
hypotl (long double x, long double y)
{
  int exx;
  int eyy;
  int  scale;
  long double xx =fabsl(x);
  long double yy =fabsl(y);
  if (!isfinite(xx) || !isfinite(yy))
    return  xx + yy; /* Return INF or NAN. */

  if (xx == 0.0L)
     return yy;
  if (yy == 0.0L)
     return xx;

  /* Get exponents */
  exx =  logbl (xx);
  eyy =  logbl (yy);

  /* Check if large differences in scale */
  scale = exx - eyy;
  if ( scale > PRECL)
     return xx;
  if ( scale < -PRECL)
     return yy;

  /* Exponent of approximate geometric mean (x 2) */
  scale = (exx + eyy) >> 1;

  /*  Rescale: Geometric mean is now about 2 */  
  x = scalbnl(xx, -scale);
  y = scalbnl(yy, -scale);

  xx = sqrtl(x * x  + y * y);

  /* Check for overflow and underflow */
  exx = logbl(xx);   
  exx += scale;
    if (exx > LDBL_MAX_EXP)
    {
      errno = ERANGE; 
      return __INFL;
    }
  if (exx < LDBL_MIN_EXP)
    return 0.0L;

  /* Undo scaling */
  return (scalbnl (xx, scale));
}
@


1.2
log
@	* mingwex/math/hypotl.c: Replace with version based on cephes
	library.
@
text
@@


1.1
log
@Add incomplet long double math support to libmingwex.a
@
text
@d2 2
d5 15
a19 12
typedef union
{
  long double value;
  struct
  {
    unsigned mantissa[2];
    unsigned sign_exponent : 16;
    unsigned empty : 16;
  } parts;
} ieee_long_double_shape_type;


d21 2
a22 18
/* Get int from the exponent of a long double.  */
static __inline__ void
get_ld_exp (unsigned exp,long double d)
{
  ieee_long_double_shape_type u;
  u.value = d;
  exp = u.parts.sign_exponent;
}

/* Set exponent of a long double from an int.  */
static __inline__ void
set_ld_exp (long double d,unsigned exp)
{
  ieee_long_double_shape_type u;
  u.value = d;
  u.parts.sign_exponent = exp;
  d = u.value;
}
d27 3
a29 3
  unsigned exx = 0U;
  unsigned eyy = 0U;
  unsigned  scale;
d35 38
a72 12
  /* Scale to avoid overflow.*/
  get_ld_exp (exx, xx);
  get_ld_exp (eyy, yy);	
  scale = (exx > eyy ? exx : eyy);
  if (scale == 0)
    return 0.0L;		
  set_ld_exp (xx, exx - scale);
  set_ld_exp (yy, eyy - scale);	
  xx = sqrtl(xx * xx  + yy * yy);
  get_ld_exp (exx,xx);
  set_ld_exp (xx, exx + scale);
  return xx;
@

