head	1.3;
access;
symbols
	cr-0x5f1:1.2.0.6
	cv-branch:1.2.0.4
	cr-0x3b58:1.2.0.2
	cr-0x9e:1.1.0.12
	cr-0x9d:1.1.0.10
	corinna-01:1.1
	cr-0x9c:1.1.0.8
	cr-0x9b:1.1.0.6
	cr-0x99:1.1
	Z-emcb-cygwin_daemon:1.1.0.4
	w32api-2_2:1.1
	mingw-runtime-2_4:1.1
	mingw-std-ns-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2008.06.03.18.42.21;	author keithmarshall;	state dead;
branches;
next	1.2;

1.2
date	2004.03.29.08.22.19;	author dannysmith;	state Exp;
branches;
next	1.1;

1.1
date	2002.07.29.03.00.10;	author dannysmith;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Avoid precision errors in round(), lround() and llround() functions.
@
text
@#include <math.h>

double
round (double x)
{
  /* Add +/- 0.5 then then round towards zero.  */
  return trunc ( x + (x >= 0.0 ?  0.5 : -0.5));
}
@


1.2
log
@	* mingwex/math/round.c: Rewrite.
	* mingwex/math/roundf.c: Rewrite.
	* mingwex/math/roundl.c: Rewrite.
@
text
@@


1.1
log
@Add incomplet long double math support to libmingwex.a
@
text
@d1 1
a1 1
#include <fenv.h>
d4 4
a7 25
round (double x) {
  double retval;
  unsigned short saved_cw, _cw;
  __asm__ (
	"fnstcw %0;"
  	: "=m" (saved_cw)
	); /* save  control word  */
  _cw = ~(FE_TONEAREST | FE_DOWNWARD | FE_UPWARD | FE_TOWARDZERO)
     	  | (x > 0.0 ? FE_UPWARD : FE_DOWNWARD); /* round away from zero */
  __asm__ (
	"fldcw %0;"
	:
	: "m" (_cw)
	);  /* load the rounding control */
  __asm__ (
	"frndint;"
	: "=t" (retval)
	: "0" (x)
	); /* do the rounding */
  __asm__ (
	"fldcw %0;"
	:
	: "m" (saved_cw)
	); /* restore control word */
  return retval;
@

