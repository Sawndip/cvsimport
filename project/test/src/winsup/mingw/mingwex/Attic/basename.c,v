head	1.3;
access;
symbols
	cygwin-1_7_17-release:1.2
	cygwin-64bit-branch:1.2.0.4
	cygwin-1_7_16-release:1.2
	cygwin-1_7_15-release:1.2
	cygwin-1_7_14_2-release:1.2
	cygwin-1_7_14-release:1.2
	cygwin-1_7_12-release:1.2
	cygwin-1_7_11-release:1.2
	cygwin-1_7_10-release:1.2
	cygwin-1_7_9-release:1.2
	cygwin-1_7_8-release:1.2
	cygwin-1_7_7-release:1.2
	cygwin-1_7_5-release:1.2
	cygwin-1_7_4-release:1.2
	cygwin-1_7_3-release:1.2
	cygwin-1_7_2-release:1.2
	cygwin-1_7_1-release:1.2
	cv-branch-2:1.2.0.2;
locks; strict;
comment	@ * @;


1.3
date	2012.11.07.16.52.18;	author cgf;	state dead;
branches;
next	1.2;

1.2
date	2007.03.08.23.15.58;	author keithmarshall;	state Exp;
branches;
next	1.1;

1.1
date	2006.12.31.18.03.33;	author keithmarshall;	state Exp;
branches;
next	;


desc
@@


1.3
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@/* basename.c
 *
 * $Id: basename.c,v 1.2 2007/03/08 23:15:58 keithmarshall Exp $
 *
 * Provides an implementation of the "basename" function, conforming
 * to SUSv3, with extensions to accommodate Win32 drive designators,
 * and suitable for use on native Microsoft(R) Win32 platforms.
 *
 * Written by Keith Marshall <keithmarshall@@users.sourceforge.net>
 *
 * This is free software.  You may redistribute and/or modify it as you
 * see fit, without restriction of copyright.
 *
 * This software is provided "as is", in the hope that it may be useful,
 * but WITHOUT WARRANTY OF ANY KIND, not even any implied warranty of
 * MERCHANTABILITY, nor of FITNESS FOR ANY PARTICULAR PURPOSE.  At no
 * time will the author accept any form of liability for any damages,
 * however caused, resulting from the use of this software.
 *
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <libgen.h>
#include <locale.h>

#ifndef __cdecl  /* If compiling on any non-Win32 platform ... */
#define __cdecl  /* this may not be defined.                   */
#endif

__cdecl char *basename( char *path )
{
  size_t len;
  static char *retfail = NULL;

  /* to handle path names for files in multibyte character locales,
   * we need to set up LC_CTYPE to match the host file system locale
   */

  char *locale = setlocale( LC_CTYPE, NULL );
  if( locale != NULL ) locale = strdup( locale );
  setlocale( LC_CTYPE, "" );

  if( path && *path )
  {
    /* allocate sufficient local storage space,
     * in which to create a wide character reference copy of path
     */

    wchar_t refcopy[1 + (len = mbstowcs( NULL, path, 0 ))];

    /* create the wide character reference copy of path,
     * and step over the drive designator, if present ...
     */

    wchar_t *refpath = refcopy;
    if( ((len = mbstowcs( refpath, path, len )) > 1) && (refpath[1] == L':') )
    {
      /* FIXME: maybe should confirm *refpath is a valid drive designator */

      refpath += 2;
    }

    /* ensure that our wide character reference path is NUL terminated */

    refcopy[ len ] = L'\0';

    /* check again, just to ensure we still have a non-empty path name ... */

    if( *refpath )
    {
      /* and, when we do, process it in the wide character domain ...
       * scanning from left to right, to the char after the final dir separator
       */

      wchar_t *refname;
      for( refname = refpath ; *refpath ; ++refpath )
      {
	if( (*refpath == L'/') || (*refpath == L'\\') )
	{
	  /* we found a dir separator ...
	   * step over it, and any others which immediately follow it
	   */

	  while( (*refpath == L'/') || (*refpath == L'\\') )
	    ++refpath;

	  /* if we didn't reach the end of the path string ... */

	  if( *refpath )

	    /* then we have a new candidate for the base name */

	    refname = refpath;

	  /* otherwise ...
	   * strip off any trailing dir separators which we found
	   */

	  else while(  (refpath > refname)
	  &&          ((*--refpath == L'/') || (*refpath == L'\\'))   )
	    *refpath = L'\0';
	}
      }

      /* in the wide character domain ...
       * refname now points at the resolved base name ...
       */

      if( *refname )
      {
	/* if it's not empty,
	 * then we transform the full normalised path back into
	 * the multibyte character domain, and skip over the dirname,
	 * to return the resolved basename.
	 */
	
	if( (len = wcstombs( path, refcopy, len )) != (size_t)(-1) )
	  path[ len ] = '\0';
	*refname = L'\0';
	if( (len = wcstombs( NULL, refcopy, 0 )) != (size_t)(-1) )
	  path += len;
      }

      else
      {
	/* the basename is empty, so return the default value of "/",
	 * transforming from wide char to multibyte char domain, and
	 * returning it in our own buffer.
	 */

	retfail = realloc( retfail, len = 1 + wcstombs( NULL, L"/", 0 ));
	wcstombs( path = retfail, L"/", len );
      }

      /* restore the caller's locale, clean up, and return the result */

      setlocale( LC_CTYPE, locale );
      free( locale );
      return( path );
    }

    /* or we had an empty residual path name, after the drive designator,
     * in which case we simply fall through ...
     */
  }

  /* and, if we get to here ...
   * the path name is either NULL, or it decomposes to an empty string;
   * in either case, we return the default value of "." in our own buffer,
   * reloading it with the correct value, transformed from the wide char
   * to the multibyte char domain, just in case the caller trashed it
   * after a previous call.
   */

  retfail = realloc( retfail, len = 1 + wcstombs( NULL, L".", 0 ));
  wcstombs( retfail, L".", len );

  /* restore the caller's locale, clean up, and return the result */

  setlocale( LC_CTYPE, locale );
  free( locale );
  return( retfail );
}

/* $RCSfile: basename.c,v $$Revision: 1.2 $: end of file */
@


1.2
log
@Make basename and dirname functions work with path names
containing multibyte character strings.
@
text
@d3 1
a3 1
 * $Id: basename.c,v 1.1 2006/12/31 18:03:33 keithmarshall Exp $
d167 1
a167 1
/* $RCSfile$$Revision$: end of file */
@


1.1
log
@* include/libgen.h: New file; required by...
* mingwex/basename.c, mingwex/dirname.c: New files.
* mingwex/Makefile.in (DISTFILES): Add them...
(POSIX_OBJS): ...with corresponding basename.o, dirname.o
(Dependencies): Typo; s/Dependancies/Dependencies/
@
text
@d3 1
a3 1
 * $Id$
d23 1
d26 1
d34 10
a43 2
  char *retname;
  static char retfail[] = ".";
d47 8
a54 2
    /* step over the drive designator, if present ...
     * (FIXME: maybe should confirm *path is a valid drive designator).
d57 11
a67 2
    if( path[1] == ':' )
      path += 2;
d71 1
a71 1
    if( *path )
d73 2
a74 2
      /* and, when we do ...
       * scan from left to right, to the char after the final dir separator
d77 2
a78 1
      for( retname = path ; *path ; ++path )
d80 1
a80 1
	if( (*path == '/') || (*path == '\\') )
d86 2
a87 2
	  while( (*path == '/') || (*path == '\\') )
	    ++path;
d91 1
a91 1
	  if( *path )
d95 1
a95 1
	    retname = path;
d101 3
a103 2
	  else while( (path > retname) && ((*--path == '/') || (*path == '\\')) )
	    *path = '\0';
d107 2
a108 4
      /* retname now points at the resolved base name ...
       * if it's not empty, then we return it as it is, otherwise ...
       * we must have had only dir separators in the original path name,
       * so we return "/".
d111 31
a141 1
      return *retname ? retname : strcpy( retfail, "/" );
d151 4
a154 2
   * in either case, we return the default value of "." in our static buffer,
   * (but strcpy it, just in case the caller trashed it after a previous call).
d157 8
a164 1
  return strcpy( retfail, "." );
d167 1
a167 1
/* $RCSfile$: end of file */
@

