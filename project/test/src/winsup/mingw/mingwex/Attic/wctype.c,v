head	1.2;
access;
symbols
	cygwin-1_7_17-release:1.1
	cygwin-64bit-branch:1.1.0.10
	cygwin-1_7_16-release:1.1
	cygwin-1_7_15-release:1.1
	cygwin-1_7_14_2-release:1.1
	cygwin-1_7_14-release:1.1
	cygwin-1_7_12-release:1.1
	cygwin-1_7_11-release:1.1
	cygwin-1_7_10-release:1.1
	cygwin-1_7_9-release:1.1
	cygwin-1_7_8-release:1.1
	cygwin-1_7_7-release:1.1
	cygwin-1_7_5-release:1.1
	cygwin-1_7_4-release:1.1
	cygwin-1_7_3-release:1.1
	cygwin-1_7_2-release:1.1
	cygwin-1_7_1-release:1.1
	cv-branch-2:1.1.0.8
	cr-0x5f1:1.1.0.6
	cv-branch:1.1.0.4
	cr-0x3b58:1.1.0.2;
locks; strict;
comment	@ * @;


1.2
date	2012.11.07.16.52.19;	author cgf;	state dead;
branches;
next	1.1;

1.1
date	2005.02.25.01.43.43;	author dannysmith;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@/*
  wctype.c
  7.25.2.2.2 The wctype function

  Contributed by: Danny Smith  <dannysmith@@usesr.sourcefoge.net>
		  2005-02-24
   
  This source code is placed in the PUBLIC DOMAIN. It is modified
  from the Q8 package created by Doug Gwyn <gwyn@@arl.mil>  

  The wctype function constructs a value with type wctype_t that
  describes a class of wide characters identified by the string
  argument property.

  In particular, we map the property strings so that:

  iswctype(wc, wctype("alnum")) == iswalnum(wc) 
  iswctype(wc, wctype("alpha")) == iswalpha(wc)
  iswctype(wc, wctype("cntrl")) == iswcntrl(wc)
  iswctype(wc, wctype("digit")) == iswdigit(wc)
  iswctype(wc, wctype("graph")) == iswgraph(wc)
  iswctype(wc, wctype("lower")) == iswlower(wc)
  iswctype(wc, wctype("print")) == iswprint(wc)
  iswctype(wc, wctype("punct")) == iswpunct(wc)
  iswctype(wc, wctype("space")) == iswspace(wc)
  iswctype(wc, wctype("upper")) == iswupper(wc)
  iswctype(wc, wctype("xdigit")) == iswxdigit(wc)

*/

#include	<string.h>
#include	<wctype.h>

/* Using the bit-OR'd ctype character classification flags as return
   values achieves compatibility with MS iswctype().  */
static const struct {
  const char *name;
  wctype_t flags;} cmap[] = {
    {"alnum", _ALPHA|_DIGIT},
    {"alpha", _ALPHA},
    {"cntrl", _CONTROL},
    {"digit", _DIGIT},
    {"graph", _PUNCT|_ALPHA|_DIGIT},
    {"lower", _LOWER},
    {"print", _BLANK|_PUNCT|_ALPHA|_DIGIT},
    {"punct", _PUNCT},
    {"space", _SPACE},
    {"upper", _UPPER},
    {"xdigit", _HEX}
  };

#define NCMAP	(sizeof cmap / sizeof cmap[0])
wctype_t wctype (const char *property)
{
  int i;
  for (i = 0; i < NCMAP; ++i)
    if (strcmp (property, cmap[i].name) == 0)
      return cmap[i].flags;
  return 0;
}
@


1.1
log
@	* mingwex/wctype.c: New file.
	* mingwex/wctrans.c: New file.
	* mingwex/Makefile.in (DISTFILES): Add wctype.c, wctrans.c.
	* mingwex/Makefile.in (Q8_OBJS): Add wctype.o, wctrans.o.
@
text
@@

