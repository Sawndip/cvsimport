head	1.3;
access;
symbols
	cygwin-1_7_17-release:1.2
	cygwin-64bit-branch:1.2.0.2
	cygwin-1_7_16-release:1.1
	cygwin-1_7_15-release:1.1
	cygwin-1_7_14_2-release:1.1
	cygwin-1_7_14-release:1.1
	cygwin-1_7_12-release:1.1
	cygwin-1_7_11-release:1.1
	cygwin-1_7_10-release:1.1
	cygwin-1_7_9-release:1.1
	cygwin-1_7_8-release:1.1
	cygwin-1_7_7-release:1.1
	cygwin-1_7_5-release:1.1
	cygwin-1_7_4-release:1.1
	cygwin-1_7_3-release:1.1
	cygwin-1_7_2-release:1.1
	cygwin-1_7_1-release:1.1
	cv-branch-2:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2012.11.07.16.52.19;	author cgf;	state dead;
branches;
next	1.2;

1.2
date	2012.08.03.20.06.27;	author earnie;	state Exp;
branches;
next	1.1;

1.1
date	2007.06.22.10.09.20;	author dannysmith;	state Exp;
branches;
next	;


desc
@@


1.3
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@/*	$NetBSD: tsearch.c,v 1.4 1999/09/20 04:39:43 lukem Exp $	*/

/*
 * Tree search generalized from Knuth (6.2.2) Algorithm T just like
 * the AT&T man page says.
 *
 * The node_t structure is for internal use only, lint doesn't grok it.
 *
 * Written by reading the System V Interface Definition, not the code.
 *
 * Totally public domain.
 */

#include <assert.h>
#define _SEARCH_PRIVATE
#include <search.h>
#include <stdlib.h>


/* find or insert datum into search tree */
void *
tsearch(const void * __restrict__ vkey,		/* key to be located */
	void ** __restrict__ vrootp,		/* address of tree root */
	int (*compar) (const void *, const void *))
{
	node_t *q, **n;
	node_t **rootp = (node_t **)vrootp;

	if (rootp == NULL)
		return NULL;

	n = rootp;
	while (*n != NULL) {			/* Knuth's T1: */
		int r;

		if ((r = (*compar)(vkey, ((*n)->key))) == 0)	/* T2: */
			return *n;		/* we found it! */

		n = (r < 0) ?
		    &(*rootp)->llink :		/* T3: follow left branch */
		    &(*rootp)->rlink;		/* T4: follow right branch */
		if (*n == NULL)
			break;
		rootp = n;
	}

	q = malloc(sizeof(node_t));		/* T5: key not found */
	if (!q)
		return q;
	*n = q;					/* make new node */
	/* LINTED const castaway ok */
	q->key = (void *)vkey;			/* initialize new node */
	q->llink = q->rlink = NULL;
	return q;
}
@


1.2
log
@	* include/_mingw.h (threadlocalinfostruct, threadmbinfostruct,
	*pthreadlocinfo, *pthreadmbcinfo, _locale_tstruct, *_locale_t): Declare.
@
text
@@


1.1
log
@	Add POSIX binary tree search API.

	* mingwex/tfind.c: New file.
	* mingwex/tdelete.c: New file.
	* mingwex/tsearch.c: New file.
	* mingwex/twalk.c: New file.
	* mingwex/Makefile.in (DISTFILES): Add tsearch.c twalk.c tdelete.c tfind.c.
	* mingwex/Makefile.in (POSIX_OBJS): Add tsearch.o twalk.o tdelete.o tfind.o.
	* include/search.h (tfind): Declare.
	(tdelete): Declare.
	(tsearch): Declare.
	(twalk): Declare.
	(ENTRY): Define.
	(ACTION): Define.
	(VISIT): Define.
	(node_t): Define, on condition of _SEARCH_PRIVATE.
@
text
@d26 1
a26 1
	node_t *q;
d32 2
a33 1
	while (*rootp != NULL) {	/* Knuth's T1: */
d36 2
a37 2
		if ((r = (*compar)(vkey, (*rootp)->key)) == 0)	/* T2: */
			return *rootp;		/* we found it! */
d39 1
a39 1
		rootp = (r < 0) ?
d42 3
d48 6
a53 6
	if (q != 0) {				/* make new node */
		*rootp = q;			/* link new node to old */
		/* LINTED const castaway ok */
		q->key = (void *)vkey;		/* initialize new node */
		q->llink = q->rlink = NULL;
	}
@

