head	1.4;
access;
symbols
	cygwin-1_7_17-release:1.3
	cygwin-64bit-branch:1.3.0.20
	cygwin-1_7_16-release:1.3
	cygwin-1_7_15-release:1.3
	cygwin-1_7_14_2-release:1.3
	cygwin-1_7_14-release:1.3
	cygwin-1_7_12-release:1.3
	cygwin-1_7_11-release:1.3
	cygwin-1_7_10-release:1.3
	cygwin-1_7_9-release:1.3
	cygwin-1_7_8-release:1.3
	cygwin-1_7_7-release:1.3
	cygwin-1_7_5-release:1.3
	cygwin-1_7_4-release:1.3
	cygwin-1_7_3-release:1.3
	cygwin-1_7_2-release:1.3
	cygwin-1_7_1-release:1.3
	cv-branch-2:1.3.0.18
	cr-0x5f1:1.3.0.16
	cv-branch:1.3.0.14
	cr-0x3b58:1.3.0.12
	cr-0x9e:1.3.0.10
	cr-0x9d:1.3.0.8
	corinna-01:1.3
	cr-0x9c:1.3.0.6
	cr-0x9b:1.3.0.4
	cr-0x99:1.3
	Z-emcb-cygwin_daemon:1.3.0.2
	w32api-2_2:1.2
	mingw-runtime-2_4:1.2
	mingw-std-ns-branch:1.2.0.6
	mingw-runtime-2_0:1.2
	mingwex:1.1.0.2;
locks; strict;
comment	@ * @;


1.4
date	2012.11.07.16.52.19;	author cgf;	state dead;
branches;
next	1.3;

1.3
date	2003.03.17.01.03.43;	author dannysmith;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.13.10.20.45;	author dannysmith;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	2002.03.22.22.43.18;	author dannysmith;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2002.03.22.22.43.18;	author dannysmith;	state Exp;
branches;
next	;

1.2.6.1
date	2003.03.31.22.32.19;	author dannysmith;	state Exp;
branches;
next	;


desc
@@


1.4
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@/*
    This source code was extracted from the Q8 package created and
    placed in the PUBLIC DOMAIN by Doug Gwyn <gwyn@@arl.mil>
    last edit:	1999/11/05	gwyn@@arl.mil

	Implements subclause 7.8.2 of ISO/IEC 9899:1999 (E).

	This particular implementation requires the matching <inttypes.h>.
	It also assumes that character codes for A..Z and a..z are in
	contiguous ascending order; this is true for ASCII but not EBCDIC.
*/
#include <stdlib.h>
#include <errno.h>
#include <ctype.h>
#include <inttypes.h>

/* Helper macros */

/* convert digit character to number, in any base */
#define ToNumber(c)	(isdigit(c) ? (c) - '0' : \
			 isupper(c) ? (c) - 'A' + 10 : \
			 islower(c) ? (c) - 'a' + 10 : \
			 -1		/* "invalid" flag */ \
			)
/* validate converted digit character for specific base */
#define valid(n, b)	((n) >= 0 && (n) < (b))

intmax_t
strtoimax(nptr, endptr, base)
	register const char * __restrict__	nptr;
	char ** __restrict__			endptr;
	register int				base;
	{
	register uintmax_t	accum;	/* accumulates converted value */
	register int		n;	/* numeral from digit character */
	int			minus;	/* set iff minus sign seen */
	int			toobig;	/* set iff value overflows */

	if ( endptr != NULL )
		*endptr = (char *)nptr;	/* in case no conversion's performed */

	if ( base < 0 || base == 1 || base > 36 )
		{
		errno = EDOM;
		return 0;		/* unspecified behavior */
		}

	/* skip initial, possibly empty sequence of white-space characters */

	while ( isspace(*nptr) )
		++nptr;

	/* process subject sequence: */

	/* optional sign */
	if ( (minus = *nptr == '-') || *nptr == '+' )
		++nptr;

	if ( base == 0 ) {
		if ( *nptr == '0' ) {
			if ( nptr[1] == 'X' || nptr[1] == 'x' )
				base = 16;
			else
				base = 8;
		}
		else
				base = 10;
	}
	/* optional "0x" or "0X" for base 16 */

	if ( base == 16 && *nptr == '0' && (nptr[1] == 'X' || nptr[1] == 'x') )
		nptr += 2;		/* skip past this prefix */

	/* check whether there is at least one valid digit */

	n = ToNumber(*nptr);
	++nptr;

	if ( !valid(n, base) )
		return 0;		/* subject seq. not of expected form */

	accum = n;

	for ( toobig = 0; n = ToNumber(*nptr), valid(n, base); ++nptr )
		if ( accum > (uintmax_t)(INTMAX_MAX / base + 2) ) /* major wrap-around */
			toobig = 1;	/* but keep scanning */
		else
			accum = base * accum + n;

	if ( endptr != NULL )
		*endptr = (char *)nptr;	/* points to first not-valid-digit */

	if ( minus )
		{
		if ( accum > (uintmax_t)INTMAX_MAX + 1 )
			toobig = 1;
		}
	else
	if ( accum > (uintmax_t)INTMAX_MAX )
		toobig = 1;

	if ( toobig )
		{
		errno = ERANGE;
		return minus ? INTMAX_MIN : INTMAX_MAX;
		}
	else
		return (intmax_t)(minus ? -accum : accum);
	}

long long __attribute__ ((alias ("strtoimax")))
strtoll (const char* __restrict__ nptr, char ** __restrict__ endptr, int base);
@


1.3
log
@	Get rid of some warnings
	* mingwex/dirent.c (_topendir): Eliminate signed/unsigned warning.
	* mingwex/strtoimax.c (strtoimax): Likewise.
	* mingwex/wcstoimax.c (wcstoimax): Likewise.
	* mingwex/wtoll.c (wtoll): Remove unnecessary ';'
	* mingwex/fesentenv.c: Include float.h.
	* mingwex/math/powl.c: Eliminate type punning/strict aliasing 
	warning.
	* mingwex/math/tanhl.c: Eliminate signed/unsigned warning in
	constants.
	* mingwex/math/tgammal.c: Likewise.
@
text
@@


1.2
log
@	* include/_mingw.h: Increment version to 2.0.
	* Makefile.in: Ditto.
	Merge in mingwex branch.
@
text
@d85 1
a85 1
		if ( accum > INTMAX_MAX / base + 2 )	/* major wrap-around */
@


1.2.6.1
log
@	Merge from mingw trunk (changes since 2003-01-27).
@
text
@d85 1
a85 1
		if ( accum > (uintmax_t)(INTMAX_MAX / base + 2) ) /* major wrap-around */
@


1.1
log
@file strtoimax.c was initially added on branch mingwex.
@
text
@d1 112
@


1.1.2.1
log
@	* configure.in: Add mingwex as SUBDIRS and configdirs.
	* configure: Regenerate.
	* Makefile.in (MINGW_OBJS): Remove dirent.o.
	(SRC_DIST_FILES): Remove dirent.c.
	* dirent.c: Remove.
	* include/stdlib.h (_Exit): Add static inline
	function.
	(struct lldiv_t): Define.
	(lldiv): Add prototype.
	(llabs): Add extern inline function.
	(strtoll,strtoull): Add prototypes.
	(wcstol, wcstoul, wcstod): Group together.
	(strtof, wcstof): Add extern inline definitions.
	(atoll,lltoa,ulltoa, wtoll, lltow ulltow): Add prototypes
	and extern inline definitions.
	* include/wchar.h (fwide, wcstoll,wcstoull, wmemchr
	wmemcmp, wmemcpy, wmemmove, wmemset. mbsinit): Add
	prototypes.
	(wcstol, wcstoul,wcstod): Copy prototypes from stdlib.h.
	(wcstof): Add extern inline definition.
	* include/math.h (nan, nanf): Add prototypes.
	(NAN, INFINITE): Define constants.
	(fpclassify, isnan ,signbit): Add macros and supporting float
	and double functions.
	(isfinite, isinf, isnormal): Add macros.
	(isgreater, isless, isgreaterequal, islessequal,islessgreater):
	Add macros.
	(rint, rintf, round, roundf, trunc. truncf, fmax, fmaxf,
	fmin, fminf, fma, fmaf, log2, log2f): Add prototypes.
	(copysign, logb, nextafter, scalb): Add prototypes and
	inline stubs for underscored versions in msvcrt.dll.
	* include/inttypes.h: New file.
	* include/fenv.h: New file

	Add new mingwex subdir and files.
	* mingwex: New directory.
	* mingwex/Makefile.in: New file.
	* mingwex/configure.in: New file.
	* mingwex/configure: Generate.
	* mingwex/dirent.c: Moved here from parent dir.
	* mingwex/atoll.c: New file.
	* mingwex/feclearexcept.c: New file.
	* mingwex/fegetenv.c: New file.
	* mingwex/fegetexceptflag.c: New file.
	* mingwex/fegetround.c: New file.
	* mingwex/feholdexcept.c: New file.
	* mingwex/feraiseexcept.c: New file.
	* mingwex/fesetenv.c: New file.
	* mingwex/fesetexceptflag.c: New file.
	* mingwex/fesetround.o: New file.
	* mingwex/fetestexcept.c: New file.
	* mingwex/feupdateenv.c: New file.
	* mingwex/fma.S: New file.
	* mingwex/fmaf.S: New file.
	* mingwex/fmax.c: New file.
	* mingwex/fmaxf.c: New file.
	* mingwex/fmin.c: New file.
	* mingwex/fminf.c: New file.
	* mingwex/fp_consts.c: New file.
	* mingwex/fpclassify.c: New file.
	* mingwex/fucom.c: New file.
	* mingwex/fwide.c: New file.
	* mingwex/imaxabs.c: New file.
	* mingwex/imaxdiv.c: New file.
	* mingwex/isnan.c: New file.
	* mingwex/isnanf.c: New file.
	* mingwex/lltoa.c: New file.
	* mingwex/lltow.c: New file.
	* mingwex/log2.c: New file.
	* mingwex/log2f.c: New file.
	* mingwex/math_stubs.c: New file.
	* mingwex/mbsinit.c: New file.
	* mingwex/rint.c: New file.
	* mingwex/round.c: New file.
	* mingwex/signbit.c: New file.
	* mingwex/sitest.c: New file.
	* mingwex/strtof.c: New file.
	* mingwex/strtoimax.c: New file.
	* mingwex/strtoumax.c: New file.
	* mingwex/testwmem.c: New file.
	* mingwex/trunc.c: New file.
	* mingwex/ulltoa.c: New file.
	* mingwex/ulltow.c: New file.
	* mingwex/wcstof.c: New file.
	* mingwex/wcstoimax.c: New file.
	* mingwex/wcstoumax.c: New file.
	* mingwex/wmemchr.c: New file.
	* mingwex/wmemcmp.c: New file.
	* mingwex/wmemcpy.c: New file.
	* mingwex/wmemmove.c: New file.
	* mingwex/wmemset.c: New file.
	* mingwex/wtoll.c: New file.
@
text
@a0 112
/*
    This source code was extracted from the Q8 package created and
    placed in the PUBLIC DOMAIN by Doug Gwyn <gwyn@@arl.mil>
    last edit:	1999/11/05	gwyn@@arl.mil

	Implements subclause 7.8.2 of ISO/IEC 9899:1999 (E).

	This particular implementation requires the matching <inttypes.h>.
	It also assumes that character codes for A..Z and a..z are in
	contiguous ascending order; this is true for ASCII but not EBCDIC.
*/
#include <stdlib.h>
#include <errno.h>
#include <ctype.h>
#include <inttypes.h>

/* Helper macros */

/* convert digit character to number, in any base */
#define ToNumber(c)	(isdigit(c) ? (c) - '0' : \
			 isupper(c) ? (c) - 'A' + 10 : \
			 islower(c) ? (c) - 'a' + 10 : \
			 -1		/* "invalid" flag */ \
			)
/* validate converted digit character for specific base */
#define valid(n, b)	((n) >= 0 && (n) < (b))

intmax_t
strtoimax(nptr, endptr, base)
	register const char * __restrict__	nptr;
	char ** __restrict__			endptr;
	register int				base;
	{
	register uintmax_t	accum;	/* accumulates converted value */
	register int		n;	/* numeral from digit character */
	int			minus;	/* set iff minus sign seen */
	int			toobig;	/* set iff value overflows */

	if ( endptr != NULL )
		*endptr = (char *)nptr;	/* in case no conversion's performed */

	if ( base < 0 || base == 1 || base > 36 )
		{
		errno = EDOM;
		return 0;		/* unspecified behavior */
		}

	/* skip initial, possibly empty sequence of white-space characters */

	while ( isspace(*nptr) )
		++nptr;

	/* process subject sequence: */

	/* optional sign */
	if ( (minus = *nptr == '-') || *nptr == '+' )
		++nptr;

	if ( base == 0 ) {
		if ( *nptr == '0' ) {
			if ( nptr[1] == 'X' || nptr[1] == 'x' )
				base = 16;
			else
				base = 8;
		}
		else
				base = 10;
	}
	/* optional "0x" or "0X" for base 16 */

	if ( base == 16 && *nptr == '0' && (nptr[1] == 'X' || nptr[1] == 'x') )
		nptr += 2;		/* skip past this prefix */

	/* check whether there is at least one valid digit */

	n = ToNumber(*nptr);
	++nptr;

	if ( !valid(n, base) )
		return 0;		/* subject seq. not of expected form */

	accum = n;

	for ( toobig = 0; n = ToNumber(*nptr), valid(n, base); ++nptr )
		if ( accum > INTMAX_MAX / base + 2 )	/* major wrap-around */
			toobig = 1;	/* but keep scanning */
		else
			accum = base * accum + n;

	if ( endptr != NULL )
		*endptr = (char *)nptr;	/* points to first not-valid-digit */

	if ( minus )
		{
		if ( accum > (uintmax_t)INTMAX_MAX + 1 )
			toobig = 1;
		}
	else
	if ( accum > (uintmax_t)INTMAX_MAX )
		toobig = 1;

	if ( toobig )
		{
		errno = ERANGE;
		return minus ? INTMAX_MIN : INTMAX_MAX;
		}
	else
		return (intmax_t)(minus ? -accum : accum);
	}

long long __attribute__ ((alias ("strtoimax")))
strtoll (const char* __restrict__ nptr, char ** __restrict__ endptr, int base);
@

