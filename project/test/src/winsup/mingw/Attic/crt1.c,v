head	1.15;
access;
symbols
	cygwin-1_7_17-release:1.14
	cygwin-64bit-branch:1.14.0.2
	cygwin-1_7_16-release:1.14
	cygwin-1_7_15-release:1.14
	cygwin-1_7_14_2-release:1.14
	cygwin-1_7_14-release:1.14
	cygwin-1_7_12-release:1.14
	cygwin-1_7_11-release:1.14
	cygwin-1_7_10-release:1.14
	cygwin-1_7_9-release:1.14
	cygwin-1_7_8-release:1.14
	cygwin-1_7_7-release:1.14
	cygwin-1_7_5-release:1.14
	cygwin-1_7_4-release:1.14
	cygwin-1_7_3-release:1.14
	cygwin-1_7_2-release:1.14
	cygwin-1_7_1-release:1.13
	cv-branch-2:1.12.0.2
	cr-0x5f1:1.11.0.4
	cv-branch:1.11.0.2
	cr-0x3b58:1.10.0.2
	cr-0x9e:1.6.0.10
	cr-0x9d:1.6.0.8
	corinna-01:1.6
	cr-0x9c:1.6.0.6
	cr-0x9b:1.6.0.4
	cr-0x99:1.6
	Z-emcb-cygwin_daemon:1.6.0.2
	w32api-2_2:1.6
	mingw-runtime-2_4:1.6
	mingw-std-ns-branch:1.2.0.6
	mingw-runtime-2_0:1.2
	mingwex:1.1.1.1.0.40
	cygnus_cvs_20020108_pre:1.1.1.1
	Z-cygwin_daemon_merge-new_HEAD:1.1.1.1
	Z-cygwin_daemon_merge_HEAD:1.1.1.1
	cygwin_daemon:1.1.1.1.0.10;
locks; strict;
comment	@ * @;
expand	@o@;


1.15
date	2012.11.07.16.52.13;	author cgf;	state dead;
branches;
next	1.14;

1.14
date	2010.01.25.22.58.03;	author ironhead;	state Exp;
branches;
next	1.13;

1.13
date	2009.07.18.15.05.20;	author ironhead;	state Exp;
branches;
next	1.12;

1.12
date	2007.06.11.08.38.16;	author dannysmith;	state Exp;
branches;
next	1.11;

1.11
date	2006.07.03.10.32.58;	author dannysmith;	state Exp;
branches;
next	1.10;

1.10
date	2005.05.19.22.44.13;	author dannysmith;	state Exp;
branches;
next	1.9;

1.9
date	2004.08.24.08.49.33;	author dannysmith;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.20.22.49.31;	author earnie;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.01.10.04.04;	author dannysmith;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.01.10.00.39;	author dannysmith;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.20.04.30.28;	author dannysmith;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.19.20.26.26;	author dannysmith;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.03.00.49.20;	author dannysmith;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.13.10.20.41;	author dannysmith;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1.40.1;
next	;

1.1.1.1.40.1
date	2002.04.16.09.02.22;	author dannysmith;	state Exp;
branches;
next	1.1.1.1.40.2;

1.1.1.1.40.2
date	2002.04.17.02.34.22;	author dannysmith;	state Exp;
branches;
next	1.1.1.1.40.3;

1.1.1.1.40.3
date	2002.04.25.22.06.14;	author dannysmith;	state Exp;
branches;
next	;

1.2.6.1
date	2002.10.03.23.42.00;	author dannysmith;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2002.11.19.08.47.43;	author dannysmith;	state Exp;
branches;
next	1.2.6.3;

1.2.6.3
date	2003.01.26.22.37.50;	author dannysmith;	state Exp;
branches;
next	;


desc
@@


1.15
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@/*
 * crt1.c
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is a part of the mingw-runtime package.
 * No warranty is given; refer to the file DISCLAIMER within the package.
 *
 * Source code for the startup proceedures used by all programs. This code
 * is compiled to make crt1.o, which should be located in the library path.
 *
 */

/* Hide the declaration of _fmode with dllimport attribute in stdlib.h to
   avoid problems with older GCC. */
#define __IN_MINGW_RUNTIME 
#include <stdlib.h>
#include <stdio.h>
#include <io.h>
#include <process.h>
#include <float.h>
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#include <signal.h>

/* NOTE: The code for initializing the _argv, _argc, and environ variables
 *       has been moved to a separate .c file which is included in both
 *       crt1.c and dllcrt1.c. This means changes in the code don't have to
 *       be manually synchronized, but it does lead to this not-generally-
 *       a-good-idea use of include. */
#include "init.c"
#include "cpu_features.h"

extern void __main ();
extern void _pei386_runtime_relocator (void);

extern int main (int, char **, char **);

/* TLS initialization hook.  */
extern const PIMAGE_TLS_CALLBACK __dyn_tls_init_callback;

/*
 * Must have the correct app type for MSVCRT. 
 */

#ifdef __MSVCRT__
#define __UNKNOWN_APP    0
#define __CONSOLE_APP    1
#define __GUI_APP        2
__MINGW_IMPORT void __set_app_type(int);
#endif /* __MSVCRT__ */

/*  Global _fmode for this .exe, not the one in msvcrt.dll,
    The default is set in txtmode.o in libmingw32.a */
/* Override the dllimport'd declarations in stdlib.h */
#undef _fmode 
extern int _fmode; 
#ifdef __MSVCRT__
extern int* __p__fmode(void); /* To access the dll _fmode */
#endif

/*
 * Setup the default file handles to have the _CRT_fmode mode, as well as
 * any new files created by the user.
 */
extern int _CRT_fmode;

static void
_mingw32_init_fmode (void)
{
  /* Don't set the std file mode if the user hasn't set any value for it. */
  if (_CRT_fmode)
    {
      _fmode = _CRT_fmode;

      /*
       * This overrides the default file mode settings for stdin,
       * stdout and stderr. At first I thought you would have to
       * test with isatty, but it seems that the DOS console at
       * least is smart enough to handle _O_BINARY stdout and
       * still display correctly.
       */
      if (stdin)
	{
	  _setmode (_fileno (stdin), _CRT_fmode);
	}
      if (stdout)
	{
	  _setmode (_fileno (stdout), _CRT_fmode);
	}
      if (stderr)
	{
	  _setmode (_fileno (stderr), _CRT_fmode);
	}
    }

    /*  Now sync  the dll _fmode to the  one for this .exe.  */
#ifdef __MSVCRT__
    *__p__fmode() = _fmode;	
#else
    *_imp___fmode_dll = _fmode;
#endif
}

/* This function will be called when a trap occurs. Thanks to Jacob
   Navia for his contribution. */
static CALLBACK long
_gnu_exception_handler (EXCEPTION_POINTERS * exception_data)
{
  void (*old_handler) (int);
  long action = EXCEPTION_CONTINUE_SEARCH;
  int reset_fpu = 0;

  switch (exception_data->ExceptionRecord->ExceptionCode)
    {
    case EXCEPTION_ACCESS_VIOLATION:
      /* test if the user has set SIGSEGV */
      old_handler = signal (SIGSEGV, SIG_DFL);
      if (old_handler == SIG_IGN)
	{
	  /* this is undefined if the signal was raised by anything other
	     than raise ().  */
	  signal (SIGSEGV, SIG_IGN);
	  action = EXCEPTION_CONTINUE_EXECUTION;
	}
      else if (old_handler != SIG_DFL)
	{
	  /* This means 'old' is a user defined function. Call it */
	  (*old_handler) (SIGSEGV);
	  action = EXCEPTION_CONTINUE_EXECUTION;
	}
      break;

    case EXCEPTION_ILLEGAL_INSTRUCTION:
    case EXCEPTION_PRIV_INSTRUCTION:
      /* test if the user has set SIGILL */
      old_handler = signal (SIGILL, SIG_DFL);
      if (old_handler == SIG_IGN)
	{
	  /* this is undefined if the signal was raised by anything other
	     than raise ().  */
	  signal (SIGILL, SIG_IGN);
	  action = EXCEPTION_CONTINUE_EXECUTION;
	}
      else if (old_handler != SIG_DFL)
	{
	  /* This means 'old' is a user defined function. Call it */
	  (*old_handler) (SIGILL);
	  action = EXCEPTION_CONTINUE_EXECUTION;
	}
      break;

    case EXCEPTION_FLT_INVALID_OPERATION:
    case EXCEPTION_FLT_DIVIDE_BY_ZERO:
    case EXCEPTION_FLT_DENORMAL_OPERAND:
    case EXCEPTION_FLT_OVERFLOW:
    case EXCEPTION_FLT_UNDERFLOW:
    case EXCEPTION_FLT_INEXACT_RESULT:
      reset_fpu = 1;
      /* fall through. */

    case EXCEPTION_INT_DIVIDE_BY_ZERO:
      /* test if the user has set SIGFPE */
      old_handler = signal (SIGFPE, SIG_DFL);
      if (old_handler == SIG_IGN)
	{
	  signal (SIGFPE, SIG_IGN);
	  if (reset_fpu)
	    _fpreset ();
	  action = EXCEPTION_CONTINUE_EXECUTION;
	}
      else if (old_handler != SIG_DFL)
	{
	  /* This means 'old' is a user defined function. Call it */
	  (*old_handler) (SIGFPE);
	  action = EXCEPTION_CONTINUE_EXECUTION;
	}
      break;

    default:
      break;
    }
  return action;
}

/*
 * The function mainCRTStartup is the entry point for all console programs.
 */
static void  __MINGW_ATTRIB_NORETURN
__mingw_CRTStartup (void)
{
  int nRet;

  /* Initialize TLS callback.  */
  if (__dyn_tls_init_callback != NULL)
    __dyn_tls_init_callback (NULL, DLL_THREAD_ATTACH, NULL);

  /*
   * Set up the top-level exception handler so that signal handling
   * works as expected. The mapping between ANSI/POSIX signals and
   * Win32 SE is not 1-to-1, so caveat emptore.
   * 
   */
  SetUnhandledExceptionFilter (_gnu_exception_handler);

  /*
   * Initialize floating point unit.
   */
  __cpu_features_init ();	/* Do we have SSE, etc.*/
  _fpreset ();			/* Supplied by the runtime library. */

  /*
   * Set up __argc, __argv and _environ.
   */
  _mingw32_init_mainargs ();

  /*
   * Sets the default file mode.
   * If _CRT_fmode is set, also set mode for stdin, stdout
   * and stderr, as well
   * NOTE: DLLs don't do this because that would be rude!
   */
  _mingw32_init_fmode ();
  
   /* Adust references to dllimported data that have non-zero offsets.  */
  _pei386_runtime_relocator ();

  /* Align the stack to 16 bytes for the sake of SSE ops in main
     or in functions inlined into main.  */
  asm  __volatile__  ("andl $-16, %%esp" : : : "%esp");

   /* From libgcc.a, __main calls global class constructors via
      __do_global_ctors, This in turn  registers  __do_global_dtors
      as the first entry of the app's atexit table.  We do this
      explicitly at app startup rather than rely on gcc to generate
      the call in main's  prologue, since main may be imported from a dll
      which has its own __do_global_ctors.  */
    __main ();

  /*
   * Call the main function. If the user does not supply one
   * the one in the 'libmingw32.a' library will be linked in, and
   * that one calls WinMain. See main.c in the 'lib' dir
   * for more details.
   */
  nRet = main (_argc, _argv, environ);

  /*
   * Perform exit processing for the C library. This means
   * flushing output and calling 'atexit' registered functions.
   */
  _cexit ();

  ExitProcess (nRet);
}

/*
 * The function mainCRTStartup is the entry point for all console programs.
 */
void
mainCRTStartup (void)
{
#ifdef __MSVCRT__
  __set_app_type (__CONSOLE_APP);
#endif
  __mingw_CRTStartup ();
}

/*
 * For now the GUI startup function is the same as the console one.
 * This simply gets rid of the annoying warning about not being able
 * to find WinMainCRTStartup when linking GUI applications.
 */
void
WinMainCRTStartup (void)
{
#ifdef __MSVCRT__
  __set_app_type (__GUI_APP);
#endif
  __mingw_CRTStartup ();
}

/*
 *  We force use of library version of atexit, which is only
 *  visible in import lib as _imp__atexit
 */
extern int (*_imp__atexit)(void (*)(void));
int atexit (void (* pfn )(void) )
{
  return ( (*_imp__atexit)(pfn));
}

/* Likewise for non-ANSI _onexit */
extern _onexit_t (*_imp___onexit)(_onexit_t);
_onexit_t
_onexit (_onexit_t pfn )
{
  return (*_imp___onexit)(pfn);
}
@


1.14
log
@2010-01-25  Kai Tietz  <kai.tietz@@onevision.com>

        Implement TLS Callback.

        * tlsmcrt.c: New file.
        * tlsmthread.c: Ditto.
        * tlssup.c: Ditto.
        * tlsthrd.c: Ditto.
        * Makefile.in: Include new files.
        * crt1.c: Implement TLS Callback.
        * dllcrt1.c: Ditto.
        * mthr_stub.c: Remove.
@
text
@@


1.13
log
@2009-07-18  Gregory McGarry  <gregorymcgarry@@users.sourceforge.net>

        * cpu_features.c: replace gcc-specific construct with portable alternative
        and match the code a few lines above.
        * crt1.c: remove gcc-specific noreturn attribute with mingw alternative
@
text
@d37 3
d192 4
@


1.12
log
@	* crt1.c (__mingw_CRTStartup): Add explicit call to libgcc's __main.
@
text
@d184 1
a184 1
static void  __attribute__((noreturn))
@


1.11
log
@ 	Support SSE float environment in fenv.h functions.

	* cpu_features.c: New file.
	* cpu_features.h: New file.
	* crt1.c: Include "cpu_features.h".
	(__mingw_CRTStartup): Call cpu_features_init().
	* Makefile.in (MING_OBJS): Add cpu_features.c.
	(SRCDIST_FILES): Add cpu_features.c, cpu_features.h.
	* include/fenv,h ( fenv_t;): Append  __mxcsr field.
	(__MXCSR_EXCEPT_FLAG_SHIFT): New define.
	(__MXCSR_EXCEPT_MASK_SHIFT): New define.
	(__MXCSR_ROUND_FLAG_SHIFT): New define.
	* mingwex/feclearexcept.c: Include "cpu_features.h".
	Handle SSE environment.
	* mingwex/fegetenv.c: Likewise.
	* mingwex/feholdexcept.c: Likewise.
	* mingwex/fesetenv.c: Likewise.
	* mingwex/fesetexceptflag.c: Likewise.
	* mingwex/fesetround.c: Likewise.
	* mingwex/fetestexcept.c: Likewise.
	* mingwex/feupdateenv.c: Likewise.
	* mingwex/fegetround.c: Add comment.
@
text
@d32 1
d223 8
@


1.10
log
@	* crt1.c (_gnu_exception_handler): Handle illegal instruction
	OS exception as a signal if user has defined a SIGILL handler.
@
text
@d30 1
d199 1
@


1.9
log
@	* crt1.c: (__mingw_CRTStartup): Change return to void.  Add
	noreturn attribute. Align stack to 16 bytes before passing args
	to main.
	(mainCRTStartup): Change return to void.
	(WinMainCRTStartup): Likewise.
@
text
@d127 19
@


1.8
log
@
	* CONTRIBUTORS: New file.
	* DISCLAIMER: Ditto.
	* CRT_noglob.c: Reword copyright and disclaimer.  Move Contributors
	section CONTRIBUTORS file.  Remove RCS tags.
	* CRTFmode.c: Ditto.
	* CRTglob.c: Ditto.
	* CRTinit.c: Ditto.
	* crt1.c: Ditto.
	* crtdll.dev: Ditto.
	* dllcrt1.c: Ditto.
	* dllmain.c: Ditto.
	* gccmain.c: Ditto.
	* init.c: Ditto.
	* isascii.c: Ditto.
	* iscsym.c: Ditto.
	* iscsymf.c: Ditto.
	* jamfile: Ditto.
	* main.c: Ditto.
	* msvcrt.def.in: Ditto.
	* strcasecmp.c: Ditto.
	* toascii.c: Ditto.
	* wcscmpi.c: Ditto.
	* include/assert.h: Ditto.
	* include/conio.h: Ditto.
	* include/ctype.h: Ditto.
	* include/direct.h: Ditto.
	* include/dirent.h: Ditto.
	* include/dos.h: Ditto.
	* include/errno.h: Ditto.
	* include/excpt.h: Ditto.
	* include/fcntl.h: Ditto.
	* include/float.h: Ditto.
	* include/io.h: Ditto.
	* include/locale.h: Ditto.
	* include/malloc.h: Ditto.
	* include/math.h: Ditto.
	* include/process.h: Ditto.
	* include/setjmp.h: Ditto.
	* include/share.h: Ditto.
	* include/signal.h: Ditto.
	* include/stdio.h: Ditto.
	* include/stdlib.h: Ditto.
	* include/string.h: Ditto.
	* include/tchar.h: Ditto.
	* include/time.h: Ditto.
	* include/wchar.h: Ditto.
	* include/sys/locking.h: Ditto.
	* include/sys/param.h: Ditto.
	* include/sys/stat.h: Ditto.
	* include/sys/timeb.h: Ditto.
	* include/sys/types.h: Ditto.
	* include/sys/utime.h: Ditto.
	* mingwex/dirent.c: Ditto.
@
text
@d12 2
a13 4
/* Hide the declaration of _fmode with dllimport attribute in stdlib.h.
   This is not necessary with Mumit Khan's patches to gcc's winnt.c,
   but those patches are still unofficial.  */

a30 1

d62 1
a62 1
_mingw32_init_fmode ()
a95 1

d163 2
a164 2
static int
__mingw_CRTStartup ()
a192 1

d197 4
a215 2

  return 0;
d221 2
a222 2
int
mainCRTStartup ()
a227 1
  return 0;
d235 2
a236 2
int
WinMainCRTStartup ()
a241 1
return 0;
@


1.7
log
@	* crt1.c (_mingw32_init_fmode): Set *_imp___fmode_dll to
	_fmode if not __MSVCRT__.
@
text
@d3 3
a8 20
 *
 * This code is part of the Mingw32 package.
 *
 * Contributors:
 *  Created by Colin Peters <colin@@bird.fu.is.saga-u.ac.jp>
 *  Maintained by Mumit Khan <khan@@xraylith.wisc.EDU>
 *
 *  THIS SOFTWARE IS NOT COPYRIGHTED
 *
 *  This source code is offered for use in the public domain. You may
 *  use, modify or distribute it freely.
 *
 *  This code is distributed in the hope that it will be useful but
 *  WITHOUT ANY WARRANTY. ALL WARRENTIES, EXPRESS OR IMPLIED ARE HEREBY
 *  DISCLAMED. This includes but is not limited to warrenties of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * $Revision: 1.4 $
 * $Author: cgf $
 * $Date: 2000/02/05 04:04:40 $
@


1.6
log
@2003-01-01  Danny Smith  <dannysmith@@users.sourceforge.net>

	* pseudo-reloc.c (do_pseudo_reloc): Make static.
	* pseudo-reloc-list.c: New file.
	* crt1.c (_pei386_runtime_relocator): Declare.
	(__mingw_CRTStartup): Call it.
	* dllcrt1.c (_pei386_runtime_relocator): Declare.
	(DllMainCRTStartup): Call it.
	* Makefile.in: Add pseudo-reloc.o pseude-reloc-list.o to
	libmingw32.a.

2003-01-01  Egor Duda  <deo@@logos-m.ru>

	* pseudo-reloc.c: New file.
@
text
@d71 1
d73 1
d111 1
d113 3
@


1.5
log
@2002-10-19  Danny Smith  <dannysmith@@users.sourceforge.net>

	* crt1.c: Define new macro __IN_MINGW_RUNTIME before including
	stdlib.h. Comment on reason.
	Define WIN32_MEAN_AND_LEAN before including windows.h
	* include/stdlib.h (_fmode): Protect declaration as dllimported
	variable with __IN_MINGW_RUNTIME.

2002-10-19  Igor Pechtchanski  <pechtcha@@cs.nyu.edu>

	* crt1.c: Include stdlib.h.
@
text
@d50 3
d208 4
@


1.4
log
@	* Makefile.in (CRT0S): Add txtmode.o binmode.o.
	(MINGW_OBJS): Add txtmode.o.
	(SRCDIST_FILES): Add txtmode.c binmode.c.
	crt1.c: Don't include fcntrl.h, stdlib.h.
	(_fmode): Declare, without dllimport attribute.
	(__p__fmode): Declare access function for dll's _fmode.
	(_mingw32_init_fmode): Sync dll _fmode with staticly linked
	_fmode for app.
	* txtmode.c: New file.
	* binmode.c: New file.
	* samples/fmode/test2.c: New file.
	* samples/fmode/jamfile: Add test2.exe target.
@
text
@d29 6
d39 1
d65 3
a67 2
#undef _fmode
extern int _fmode;  
d79 1
a79 1
  /* Don't set the file mode if the user hasn't set any value for it. */
d250 1
@


1.3
log
@	* include/fcntl.h (_fmode): Remove declarations and
	compatibility defines.
	(_setmode, setmode): Remove prototypes.
	* include/stdlib (_fmode): Add declarations and
	compatibility defines.  Change type to int.
	* include/io.h (_setmode, setmode): Add prototypes.
	* samples/fmode/all.c: Adjust includes.
	* samples/fmode/test.c: Likewise.
	* crt1.c (_CRT_fmode): Declare as int.
	* CRTfmode.c (_CRT_fmode): Likewise.

	* include/stdlib: Remove comment about MB_CUR_MAX.
@
text
@a28 1
#include <stdlib.h>
a30 1
#include <fcntl.h>
d56 6
d96 4
d191 3
a193 2
   * Sets the default file mode for stdin, stdout and stderr, as well
   * as files later opened by the user, to _CRT_fmode.
@


1.2
log
@	* include/_mingw.h: Increment version to 2.0.
	* Makefile.in: Ditto.
	Merge in mingwex branch.
@
text
@d62 1
a62 1
extern unsigned int _CRT_fmode;
@


1.2.6.1
log
@Merge from mingw mainline.
@
text
@d62 1
a62 1
extern int _CRT_fmode;
@


1.2.6.2
log
@	Merge from mingw trunk (changes since 2002-10-04).
@
text
@a28 5
/* Hide the declaration of _fmode with dllimport attribute in stdlib.h.
   This is not necessary with Mumit Khan's patches to gcc's winnt.c,
   but those patches are still unofficial.  */

#define __IN_MINGW_RUNTIME 
d32 1
a34 1
#define WIN32_LEAN_AND_MEAN
a57 7
/*  Global _fmode for this .exe, not the one in msvcrt.dll,
    The default is set in txtmode.o in libmingw32.a */
/* Override the dllimport'd declarations in stdlib.h */
#undef _fmode 
extern int _fmode; 
extern int* __p__fmode(void); /* To access the dll _fmode */

d67 1
a67 1
  /* Don't set the std file mode if the user hasn't set any value for it. */
a91 4

    /*  Now sync  the dll _fmode to the  one for this .exe.  */
    *__p__fmode() = _fmode;	

d183 2
a184 3
   * Sets the default file mode.
   * If _CRT_fmode is set, also set mode for stdin, stdout
   * and stderr, as well
a232 1
return 0;
@


1.2.6.3
log
@	Merge from mingw trunk (changes since 2002-12-10).
@
text
@a49 3

extern void _pei386_runtime_relocator (void);

a204 4

  
   /* Adust references to dllimported data that have non-zero offsets.  */
  _pei386_runtime_relocator ();
@


1.1
log
@Initial revision
@
text
@d235 17
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@


1.1.1.1.40.1
log
@	* CRT_fp8.c: New file.
	* CRT_fp10.c: New file.
	* crt1.c (__CRT_PC) Declare.
	(__CRT_fesetenv): New static function, using _CRT_PC.
	(__mingw_CRTStartup):Use __CRT_fesetenv instead of _fpreset.
	(_gnu_exception_handler): Likewise.
	* Makefile.in (CRT0S): Add CRT_fp10.o.
	(MINGW_OBJS): Add  CRT_fp8.o.
	(SRCDIST_FILES): Add CRT_fp8.c, CRT_fp10.c.
	Add CRT_fp8.o, CRT_fp10.o dependancies.
	* include/float.h (_fpreset): Expand comment.
	* include/fenv.h (FE_PC64_ENV): New define for Intel x87
	(extended precison) environmemt.
	(FE_PC53_ENV): New define for MSVCRT default environmemt.
	(FE_DFL_ENV): Define as FE_PC53_ENV.
	* mingwex/fesetenv.c: Use FE_PC53_ENV, FE_PC64_ENV to determine
	precision control for default environment.

	* include/math.h: Fix long comment line.
	* profile/configure.in (CRT0S): Set to both gcrt1.o and gcrt2.o
	for mingw.
	* profile/configure: Regenerate.
@
text
@a63 15
/*
 * If the user links in CRT_fp10.o or a different object
 * defining __CRT_PC this will override default FP precison set
 * in CRT_fp8.o in libmingw.a.
 */
extern unsigned int __CRT_PC;
static inline void
__CRT_fesetenv (void)
{
  if (__CRT_PC == 8)
    _fpreset();
  else
    __asm__ volatile ("fninit");
}

d139 1
a139 1
	    __CRT_fesetenv();
d175 1
a175 1
  __CRT_fesetenv();
d234 1
@


1.1.1.1.40.2
log
@
	* crt1.c: Revert changes of 2002-04-16. Use _fpreset again.
	* msvcrt.def (_fpreset): Mark as DATA so that only
	_imp___fpreset is exported.
	* msvcrt20.def (_fpreset): Likewise.
	* msvcrt40.def (_fpreset): Likewise.
	* crtdll.def (_fpreset): Likewise.
	* CRT_fp10.c (_fpreset): Overide library _fpreset with one
	that calls fninit.
	(fpreset): Add oldname alias.
	(__CRT_PC): Delete definition. _fpreset does it now.
	*  CRT_fp8.c (_fpreset): Force use of library _imp___fpreset.
	(fpreset): Add oldname alias.
	(__CRT_PC): Delete definition.
	* moldname.def.in: Comment out fpreset.
	* moldname-msvcrt.def: Regenerate.
	* moldname-crtdll.def: Regenerate.
	* include/fenv.h (FE_DFL_ENV): Define as (fenv_t*)0.
	* mingwex/fesetenv.c (FE_DFL_ENV): Use it to set environment
	with the _fpreset determined by startup CRT_fp object.
@
text
@d64 15
d154 1
a154 1
	    _fpreset ();
d190 1
a190 1
  _fpreset ();			/* Supplied by the runtime library. */
a248 1

@


1.1.1.1.40.3
log
@	Add atexit support for dlls.
	* crt1.c (atexit): Force thunk to _imp__atexit.
	(_onexit): Force thunk to _imp___onexit.
	* dllcrt1.c (DllMainCRTStartup): Initialise private atexit
	table on DLL_PROCESS_ATTACH, clean it up on DLL_PROCESS_DETACH.
	(__dll_exit): New function to run atexit-registered functions
	 and flush output buffers on DLL_PROCESS_DETACH or failed
	DLL_PROCESS_ATTACH.
	(atexit): Force use of private atexit table via _dllonexit,
	(_onexit): New function. Force use of private atexit table via
	_dllonexit,
	* mscvrt.def (atexit, _onexit): Add DATA keyword so that only
	_imp_<_symbol> is visible in import lib.
	* mscvrt20.def: Likewise.
	* mscvrt40.def: Likewise.
	* crtdll.def: Likewise.
@
text
@a234 17
/*
 *  We force use of library version of atexit, which is only
 *  visible in import lib as _imp__atexit
 */
extern int (*_imp__atexit)(void (*)(void));
int atexit (void (* pfn )(void) )
{
  return ( (*_imp__atexit)(pfn));
}

/* Likewise for non-ANSI _onexit */
extern _onexit_t (*_imp___onexit)(_onexit_t);
_onexit_t
_onexit (_onexit_t pfn )
{
  return (*_imp___onexit)(pfn);
}
@


