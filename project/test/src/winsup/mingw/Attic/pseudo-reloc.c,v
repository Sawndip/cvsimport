head	1.6;
access;
symbols
	cygwin-1_7_17-release:1.5
	cygwin-64bit-branch:1.5.0.2
	cygwin-1_7_16-release:1.5
	cygwin-1_7_15-release:1.5
	cygwin-1_7_14_2-release:1.5
	cygwin-1_7_14-release:1.5
	cygwin-1_7_12-release:1.5
	cygwin-1_7_11-release:1.5
	cygwin-1_7_10-release:1.5
	cygwin-1_7_9-release:1.5
	cygwin-1_7_8-release:1.5
	cygwin-1_7_7-release:1.5
	cygwin-1_7_5-release:1.5
	cygwin-1_7_4-release:1.5
	cygwin-1_7_3-release:1.5
	cygwin-1_7_2-release:1.5
	cygwin-1_7_1-release:1.5
	cv-branch-2:1.2.0.2
	cr-0x5f1:1.1.0.18
	cv-branch:1.1.0.16
	cr-0x3b58:1.1.0.14
	cr-0x9e:1.1.0.12
	cr-0x9d:1.1.0.10
	corinna-01:1.1
	cr-0x9c:1.1.0.8
	cr-0x9b:1.1.0.6
	cr-0x99:1.1
	Z-emcb-cygwin_daemon:1.1.0.4
	w32api-2_2:1.1
	mingw-runtime-2_4:1.1
	mingw-std-ns-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.6
date	2012.11.07.16.52.13;	author cgf;	state dead;
branches;
next	1.5;

1.5
date	2009.11.02.12.16.21;	author cwilson;	state Exp;
branches;
next	1.4;

1.4
date	2009.10.26.13.47.13;	author cwilson;	state Exp;
branches;
next	1.3;

1.3
date	2009.10.23.22.19.42;	author cwilson;	state Exp;
branches;
next	1.2;

1.2
date	2009.03.05.14.48.38;	author ironhead;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.01.10.00.39;	author dannysmith;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.01.26.22.37.50;	author dannysmith;	state Exp;
branches;
next	;


desc
@@


1.6
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@/* pseudo-reloc.c

   Contributed by Egor Duda  <deo@@logos-m.ru>
   Modified by addition of runtime_pseudo_reloc version 2
   by Kai Tietz  <kai.tietz@@onevision.com>
	
   THIS SOFTWARE IS NOT COPYRIGHTED

   This source code is offered for use in the public domain. You may
   use, modify or distribute it freely.

   This code is distributed in the hope that it will be useful but
   WITHOUT ANY WARRANTY. ALL WARRENTIES, EXPRESS OR IMPLIED ARE HEREBY
   DISCLAMED. This includes but is not limited to warrenties of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*/

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <memory.h>

#if defined(__CYGWIN__)
#include <wchar.h>
#include <ntdef.h>
#include <sys/cygwin.h>
/* copied from winsup.h */
# define NO_COPY __attribute__((nocommon)) __attribute__((section(".data_cygwin_nocopy")))
/* custom status code: */
#define STATUS_ILLEGAL_DLL_PSEUDO_RELOCATION ((NTSTATUS) 0xe0000269)
#define SHORT_MSG_BUF_SZ 128
#else
# define NO_COPY
#endif

#ifdef __GNUC__
#define ATTRIBUTE_NORETURN __attribute__ ((noreturn))
#else
#define ATTRIBUTE_NORETURN
#endif

#ifndef __MINGW_LSYMBOL
#define __MINGW_LSYMBOL(sym) sym
#endif

extern char __RUNTIME_PSEUDO_RELOC_LIST__;
extern char __RUNTIME_PSEUDO_RELOC_LIST_END__;
extern char __MINGW_LSYMBOL(_image_base__);

void _pei386_runtime_relocator (void);

/* v1 relocation is basically:
 *   *(base + .target) += .addend
 * where (base + .target) is always assumed to point
 * to a DWORD (4 bytes).
 */
typedef struct {
  DWORD addend;
  DWORD target;
} runtime_pseudo_reloc_item_v1;

/* v2 relocation is more complex. In effect, it is
 *    *(base + .target) += *(base + .sym) - (base + .sym)
 * with care taken in both reading, sign extension, and writing
 * because .flags may indicate that (base + .target) may point
 * to a BYTE, WORD, DWORD, or QWORD (w64).
 */
typedef struct {
  DWORD sym;
  DWORD target;
  DWORD flags;
} runtime_pseudo_reloc_item_v2;

typedef struct {
  DWORD magic1;
  DWORD magic2;
  DWORD version;
} runtime_pseudo_reloc_v2;

static void ATTRIBUTE_NORETURN
__report_error (const char *msg, ...)
{
#ifdef __CYGWIN__
  /* This function is used to print short error messages
   * to stderr, which may occur during DLL initialization
   * while fixing up 'pseudo' relocations. This early, we
   * may not be able to use cygwin stdio functions, so we
   * use the win32 WriteFile api. This should work with both
   * normal win32 console IO handles, redirected ones, and
   * cygwin ptys.
   */
  char buf[SHORT_MSG_BUF_SZ];
  wchar_t module[MAX_PATH];
  char * posix_module = NULL;
  static const char   UNKNOWN_MODULE[] = "<unknown module>: ";
  static const size_t UNKNOWN_MODULE_LEN = sizeof (UNKNOWN_MODULE) - 1;
  static const char   CYGWIN_FAILURE_MSG[] = "Cygwin runtime failure: ";
  static const size_t CYGWIN_FAILURE_MSG_LEN = sizeof (CYGWIN_FAILURE_MSG) - 1;
  DWORD len;
  DWORD done;
  va_list args;
  HANDLE errh = GetStdHandle (STD_ERROR_HANDLE);
  ssize_t modulelen = GetModuleFileNameW (NULL, module, sizeof (module));

  if (errh == INVALID_HANDLE_VALUE)
    cygwin_internal (CW_EXIT_PROCESS,
                     STATUS_ILLEGAL_DLL_PSEUDO_RELOCATION,
                     1);

  if (modulelen > 0)
    posix_module = cygwin_create_path (CCP_WIN_W_TO_POSIX, module);

  va_start (args, msg);
  len = (DWORD) vsnprintf (buf, SHORT_MSG_BUF_SZ, msg, args);
  va_end (args);
  buf[SHORT_MSG_BUF_SZ-1] = '\0'; /* paranoia */

  if (posix_module)
    {
      WriteFile (errh, (PCVOID)CYGWIN_FAILURE_MSG,
                 CYGWIN_FAILURE_MSG_LEN, &done, NULL);
      WriteFile (errh, (PCVOID)posix_module,
                 strlen(posix_module), &done, NULL);
      WriteFile (errh, (PCVOID)": ", 2, &done, NULL);
      WriteFile (errh, (PCVOID)buf, len, &done, NULL);
      free (posix_module);
    }
  else
    {
      WriteFile (errh, (PCVOID)CYGWIN_FAILURE_MSG,
                 CYGWIN_FAILURE_MSG_LEN, &done, NULL);
      WriteFile (errh, (PCVOID)UNKNOWN_MODULE,
                 UNKNOWN_MODULE_LEN, &done, NULL);
      WriteFile (errh, (PCVOID)buf, len, &done, NULL);
    }
  WriteFile (errh, (PCVOID)"\n", 1, &done, NULL);

  cygwin_internal (CW_EXIT_PROCESS,
                   STATUS_ILLEGAL_DLL_PSEUDO_RELOCATION,
                   1);
  /* not reached, but silences noreturn warning */
  abort ();
#else
  va_list argp;
  va_start (argp, msg);
# ifdef __MINGW64_VERSION_MAJOR
  fprintf (stderr, "Mingw-w64 runtime failure:\n");
# else
  fprintf (stderr, "Mingw runtime failure:\n");
# endif
  vfprintf (stderr, msg, argp);
  va_end (argp);
  abort ();
#endif
}

/* This function temporarily marks the page containing addr
 * writable, before copying len bytes from *src to *addr, and
 * then restores the original protection settings to the page.
 *
 * Using this function eliminates the requirement with older
 * pseudo-reloc implementations, that sections containing
 * pseudo-relocs (such as .text and .rdata) be permanently
 * marked writable. This older behavior sabotaged any memory
 * savings achieved by shared libraries on win32 -- and was
 * slower, too.  However, on cygwin as of binutils 2.20 the
 * .text section is still marked writable, and the .rdata section
 * is folded into the (writable) .data when --enable-auto-import.
 */
static void
__write_memory (void *addr, const void *src, size_t len)
{
  MEMORY_BASIC_INFORMATION b;
  DWORD oldprot;

  if (!len)
    return;

  if (!VirtualQuery (addr, &b, sizeof(b)))
    {
      __report_error ("  VirtualQuery failed for %d bytes at address %p",
		      (int) sizeof(b), addr);
    }

  /* Temporarily allow write access to read-only protected memory.  */
  if (b.Protect != PAGE_EXECUTE_READWRITE && b.Protect != PAGE_READWRITE)
    VirtualProtect (b.BaseAddress, b.RegionSize, PAGE_EXECUTE_READWRITE,
		  &oldprot);
  /* write the data. */
  memcpy (addr, src, len);
  /* Restore original protection. */
  if (b.Protect != PAGE_EXECUTE_READWRITE && b.Protect != PAGE_READWRITE)
    VirtualProtect (b.BaseAddress, b.RegionSize, oldprot, &oldprot);
}

#define RP_VERSION_V1 0
#define RP_VERSION_V2 1

static void
do_pseudo_reloc (void * start, void * end, void * base)
{
  ptrdiff_t addr_imp, reldata;
  ptrdiff_t reloc_target = (ptrdiff_t) ((char *)end - (char*)start);
  runtime_pseudo_reloc_v2 *v2_hdr = (runtime_pseudo_reloc_v2 *) start;
  runtime_pseudo_reloc_item_v2 *r;

  /* A valid relocation list will contain at least one entry, and
   * one v1 data structure (the smallest one) requires two DWORDs.
   * So, if the relocation list is smaller than 8 bytes, bail.
   */
  if (reloc_target < 8)
    return;

  /* Check if this is the old pseudo relocation version.  */
  /* There are two kinds of v1 relocation lists:
   *   1) With a (v2-style) version header. In this case, the
   *      first entry in the list is a 3-DWORD structure, with
   *      value:
   *         { 0, 0, RP_VERSION_V1 }
   *      In this case, we skip to the next entry in the list,
   *      knowing that all elements after the head item can
   *      be cast to runtime_pseudo_reloc_item_v1.
   *   2) Without a (v2-style) version header. In this case, the
   *      first element in the list IS an actual v1 relocation
   *      record, which is two DWORDs.  Because there will never
   *      be a case where a v1 relocation record has both
   *      addend == 0 and target == 0, this case will not be
   *      confused with the prior one.
   * All current binutils, when generating a v1 relocation list,
   * use the second (e.g. original) form -- that is, without the
   * v2-style version header.
   */
  if (reloc_target >= 12
      && v2_hdr->magic1 == 0 && v2_hdr->magic2 == 0
      && v2_hdr->version == RP_VERSION_V1)
    {
      /* We have a list header item indicating that the rest
       * of the list contains v1 entries.  Move the pointer to
       * the first true v1 relocation record.  By definition,
       * that v1 element will not have both addend == 0 and
       * target == 0 (and thus, when interpreted as a
       * runtime_pseudo_reloc_v2, it will not have both
       * magic1 == 0 and magic2 == 0).
       */
      v2_hdr++;
    }

  if (v2_hdr->magic1 != 0 || v2_hdr->magic2 != 0)
    {
      /*************************
       * Handle v1 relocations *
       *************************/
      runtime_pseudo_reloc_item_v1 * o;
      for (o = (runtime_pseudo_reloc_item_v1 *) v2_hdr;
	   o < (runtime_pseudo_reloc_item_v1 *)end;
           o++)
	{
	  DWORD newval;
	  reloc_target = (ptrdiff_t) base + o->target;
	  newval = (*((DWORD*) reloc_target)) + o->addend;
	  __write_memory ((void *) reloc_target, &newval, sizeof(DWORD));
	}
      return;
    }

  /* If we got this far, then we have relocations of version 2 or newer */

  /* Check if this is a known version.  */
  if (v2_hdr->version != RP_VERSION_V2)
    {
      __report_error ("  Unknown pseudo relocation protocol version %d.\n",
		      (int) v2_hdr->version);
      return;
    }

  /*************************
   * Handle v2 relocations *
   *************************/

  /* Walk over header. */
  r = (runtime_pseudo_reloc_item_v2 *) &v2_hdr[1];

  for (; r < (runtime_pseudo_reloc_item_v2 *) end; r++)
    {
      /* location where new address will be written */
      reloc_target = (ptrdiff_t) base + r->target;

      /* get sym pointer. It points either to the iat entry
       * of the referenced element, or to the stub function.
       */
      addr_imp = (ptrdiff_t) base + r->sym;
      addr_imp = *((ptrdiff_t *) addr_imp);

      /* read existing relocation value from image, casting to the
       * bitsize indicated by the 8 LSBs of flags. If the value is
       * negative, manually sign-extend to ptrdiff_t width. Raise an
       * error if the bitsize indicated by the 8 LSBs of flags is not
       * supported.
       */
      switch ((r->flags & 0xff))
        {
          case 8:
	    reldata = (ptrdiff_t) (*((unsigned char *)reloc_target));
	    if ((reldata & 0x80) != 0)
	      reldata |= ~((ptrdiff_t) 0xff);
	    break;
	  case 16:
	    reldata = (ptrdiff_t) (*((unsigned short *)reloc_target));
	    if ((reldata & 0x8000) != 0)
	      reldata |= ~((ptrdiff_t) 0xffff);
	    break;
	  case 32:
	    reldata = (ptrdiff_t) (*((unsigned int *)reloc_target));
#ifdef _WIN64
	    if ((reldata & 0x80000000) != 0)
	      reldata |= ~((ptrdiff_t) 0xffffffff);
#endif
	    break;
#ifdef _WIN64
	  case 64:
	    reldata = (ptrdiff_t) (*((unsigned long long *)reloc_target));
	    break;
#endif
	  default:
	    reldata=0;
	    __report_error ("  Unknown pseudo relocation bit size %d.\n",
		    (int) (r->flags & 0xff));
	    break;
        }

      /* Adjust the relocation value */
      reldata -= ((ptrdiff_t) base + r->sym);
      reldata += addr_imp;

      /* Write the new relocation value back to *reloc_target */
      switch ((r->flags & 0xff))
	{
         case 8:
           __write_memory ((void *) reloc_target, &reldata, 1);
	   break;
	 case 16:
           __write_memory ((void *) reloc_target, &reldata, 2);
	   break;
	 case 32:
           __write_memory ((void *) reloc_target, &reldata, 4);
	   break;
#ifdef _WIN64
	 case 64:
           __write_memory ((void *) reloc_target, &reldata, 8);
	   break;
#endif
	}
     }
}

void
_pei386_runtime_relocator (void)
{
  static NO_COPY int was_init = 0;
  if (was_init)
    return;
  ++was_init;
  do_pseudo_reloc (&__RUNTIME_PSEUDO_RELOC_LIST__,
		   &__RUNTIME_PSEUDO_RELOC_LIST_END__,
		   &__MINGW_LSYMBOL(_image_base__));
}
@


1.5
log
@Final sync of pseudo-reloc.c with mingw64 and cygwin
@
text
@@


1.4
log
@Sync pseudo-reloc.c with mingw64
@
text
@d96 2
a97 1
  static const char * UNKNOWN_MODULE = "<unknown module>: ";
d134 1
a134 1
                 sizeof(UNKNOWN_MODULE), &done, NULL);
@


1.3
log
@Sync pseudo-reloc.c with cygwin/lib/
@
text
@d21 2
a22 2
#include <string.h>
#include <assert.h>
a26 1
#include <stdarg.h>
d32 1
d37 10
d49 3
a51 1
extern char _image_base__;
d81 2
a82 12
#if defined(__CYGWIN__)
#define SHORT_MSG_BUF_SZ 128
/* This function is used to print short error messages
 * to stderr, which may occur during DLL initialization
 * while fixing up 'pseudo' relocations. This early, we
 * may not be able to use cygwin stdio functions, so we
 * use the win32 WriteFile api. This should work with both
 * normal win32 console IO handles, redirected ones, and
 * cygwin ptys.
 */
static BOOL
__print_reloc_error (const char *fmt, ...)
d84 9
a95 1
  BOOL rVal = FALSE;
d97 2
d106 3
a108 1
    return FALSE;
d113 2
a114 2
  va_start (args, fmt);
  len = (DWORD) vsnprintf (buf, SHORT_MSG_BUF_SZ, fmt, args);
d120 6
a125 4
      rVal = WriteFile (errh, (PCVOID)posix_module,
                        strlen(posix_module), &done, NULL) &&
             WriteFile (errh, (PCVOID)": ", 2, &done, NULL) &&
             WriteFile (errh, (PCVOID)buf, len, &done, NULL);
d130 5
a134 3
      rVal = WriteFile (errh, (PCVOID)UNKNOWN_MODULE,
                        sizeof(UNKNOWN_MODULE), &done, NULL) &&
             WriteFile (errh, (PCVOID)buf, len, &done, NULL);
d136 19
a154 1
  return rVal;
a155 1
#endif /* __CYGWIN__ */
d171 1
a171 1
__write_memory (void *addr,const void *src,size_t len)
a174 1
  SIZE_T memsz;
d179 1
a179 5
  memsz = VirtualQuery (addr, &b, sizeof(b));

#if defined(__CYGWIN__)
  /* CYGWIN: If error, print error message and die. */
  if (memsz == 0)
d181 2
a182 6
      __print_reloc_error (
        "error while loading shared libraries: bad address specified 0x%08x.\n",
        addr);
      cygwin_internal (CW_EXIT_PROCESS,
                       STATUS_ILLEGAL_DLL_PSEUDO_RELOCATION,
                       1);
a183 4
#else
  /* MINGW: If error, die. assert() may print error message when !NDEBUG */
  assert (memsz);
#endif
d271 2
a272 16
#if defined(__CYGWIN__)
      /* CYGWIN: Print error message and die, even when !DEBUGGING */
      __print_reloc_error (
        "error while loading shared libraries: invalid pseudo_reloc version %d.\n",
        (int) v2_hdr->version);
      cygwin_internal (CW_EXIT_PROCESS,
                       STATUS_ILLEGAL_DLL_PSEUDO_RELOCATION,
                       1);
#else
# if defined(DEBUG)
      /* MINGW: Don't die; just return to caller. If DEBUG, print error message. */
      fprintf (stderr, "internal mingw runtime error:"
	       "psuedo_reloc version %d is unknown to this runtime.\n",
	       (int) v2_hdr->version);
# endif
#endif
d326 1
a326 13
#if defined(__CYGWIN__)
            /* Print error message and die, even when !DEBUGGING */
            __print_reloc_error (
              "error while loading shared libraries: unknown pseudo_reloc bit size %d.\n",
              (int) (r->flags & 0xff));
            cygwin_internal (CW_EXIT_PROCESS,
                             STATUS_ILLEGAL_DLL_PSEUDO_RELOCATION,
                             1);
#else
# ifdef DEBUG
            /* MINGW: If error, don't die; just print message if DEBUG */
	    fprintf(stderr, "internal mingw runtime error: "
		    "unknown pseudo_reloc bit size %d\n",
a327 2
# endif
#endif
d337 1
a337 1
        {
d352 1
a352 1
        }
d354 1
a354 1
 }
d357 1
a357 1
_pei386_runtime_relocator ()
d365 1
a365 1
		   &_image_base__);
@


1.2
log
@2009-03-05  Kai Tietz  <kai.tietz@@onevision.com>

        * pseudo-reloc.c: Rewrite to enable pseudo_reloc version 2.
@
text
@d23 23
a45 5
 
 extern char __RUNTIME_PSEUDO_RELOC_LIST__;
 extern char __RUNTIME_PSEUDO_RELOC_LIST_END__;
 extern char _image_base__;
 
d51 6
d69 66
d140 2
d144 19
a162 1
  assert (VirtualQuery (addr, &b, sizeof(b)));
d167 1
d169 1
d176 1
a176 1
 
d185 4
d191 20
a210 1
  /* Check if this is old version pseudo relocation version.  */
d214 12
a225 1
    v2_hdr++;
d228 3
d244 2
d249 11
a259 1
#ifdef DEBUG
d263 1
d268 5
a272 1
  /* Walk over header.  */
d277 1
d279 4
d286 6
d318 12
a329 2
#ifdef DEBUG
    	    fprintf(stderr, "internal mingw runtime error: "
d332 1
d336 2
d340 2
d361 1
a361 1
 
d363 1
a363 1
 _pei386_runtime_relocator ()
d365 1
a365 1
  static int was_init = 0;
@


1.1
log
@2003-01-01  Danny Smith  <dannysmith@@users.sourceforge.net>

	* pseudo-reloc.c (do_pseudo_reloc): Make static.
	* pseudo-reloc-list.c: New file.
	* crt1.c (_pei386_runtime_relocator): Declare.
	(__mingw_CRTStartup): Call it.
	* dllcrt1.c (_pei386_runtime_relocator): Declare.
	(DllMainCRTStartup): Call it.
	* Makefile.in: Add pseudo-reloc.o pseude-reloc-list.o to
	libmingw32.a.

2003-01-01  Egor Duda  <deo@@logos-m.ru>

	* pseudo-reloc.c: New file.
@
text
@d3 4
a6 1
   Written by Egor Duda <deo@@logos-m.ru>
d19 25
d45 16
a60 10
extern char __RUNTIME_PSEUDO_RELOC_LIST__;
extern char __RUNTIME_PSEUDO_RELOC_LIST_END__;
extern char _image_base__;

typedef struct
  {
    DWORD addend;
    DWORD target;
  }
runtime_pseudo_reloc;
d62 3
d66 1
a66 1
do_pseudo_reloc (void* start, void* end, void* base)
d68 13
a80 3
  DWORD reloc_target;
  runtime_pseudo_reloc* r;
  for (r = (runtime_pseudo_reloc*) start; r < (runtime_pseudo_reloc*) end; r++)
d82 11
a92 2
      reloc_target = (DWORD) base + r->target;
      *((DWORD*) reloc_target) += r->addend;
a93 1
}
d95 75
d171 1
a171 1
_pei386_runtime_relocator ()
d173 4
@


1.1.2.1
log
@	Merge from mingw trunk (changes since 2002-12-10).
@
text
@@

