head	1.3;
access;
symbols
	cygwin-1_7_17-release:1.2
	cygwin-64bit-branch:1.2.0.22
	cygwin-1_7_16-release:1.2
	cygwin-1_7_15-release:1.2
	cygwin-1_7_14_2-release:1.2
	cygwin-1_7_14-release:1.2
	cygwin-1_7_12-release:1.2
	cygwin-1_7_11-release:1.2
	cygwin-1_7_10-release:1.2
	cygwin-1_7_9-release:1.2
	cygwin-1_7_8-release:1.2
	cygwin-1_7_7-release:1.2
	cygwin-1_7_5-release:1.2
	cygwin-1_7_4-release:1.2
	cygwin-1_7_3-release:1.2
	cygwin-1_7_2-release:1.2
	cygwin-1_7_1-release:1.2
	cv-branch-2:1.2.0.20
	cr-0x5f1:1.2.0.18
	cv-branch:1.2.0.16
	cr-0x3b58:1.2.0.14
	cr-0x9e:1.2.0.12
	cr-0x9d:1.2.0.10
	corinna-01:1.2
	cr-0x9c:1.2.0.8
	cr-0x9b:1.2.0.4
	cr-0x99:1.2
	Z-emcb-cygwin_daemon:1.2.0.2
	w32api-2_2:1.2
	mingw-runtime-2_4:1.2
	mingw-std-ns-branch:1.2.0.6
	mingw-runtime-2_0:1.2
	mingwex:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2012.11.07.16.52.26;	author cgf;	state dead;
branches;
next	1.2;

1.2
date	2002.06.13.10.20.48;	author dannysmith;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.23.01.59.06;	author dannysmith;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2002.04.23.01.59.06;	author dannysmith;	state Exp;
branches;
next	;


desc
@@


1.3
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@/*
 * A test which demonstrates the use of _wopendir and related
 * wide	char functions declared in dirent.h. 
 *
 * TODO: Make this _UNICODE neutral using tchar.h mappings.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <dirent.h>

int
main (int argc, char* argv[])
{
	int 		i;
	struct _wdirent*	de;
	_WDIR*		dir;
	long		lPos;

	if (argc == 2)
	{
		size_t len = strlen(argv[1]) + 1;
	        wchar_t* wpath = (wchar_t*) malloc(len *sizeof(wchar_t));
		mbstowcs(wpath, argv[1], len); 
		wprintf (L"Opening directory \"%s\"\n", wpath);
		dir = _wopendir(wpath);
		free (wpath);
	}
	else
	{
		wprintf (L"Opening \".\"\n");
		dir = _wopendir(L".");
	}

	if (!dir)
	{
		wprintf (L"Directory open failed!\n");
		if (errno)
		{
			wprintf (L"Error : %S\n", strerror(errno));
		}
		return 1;
	}

	i = 0;
	lPos = -1;

	while ((de = _wreaddir (dir)))
	{
		i++;
		wprintf (L"%d : \"%s\" (tell %ld)\n", i, de->d_name,
			_wtelldir(dir));

		if (i == 3)
		{
			wprintf (L"We will seek here later.\n");
			lPos = _wtelldir (dir);
		}
	}

	printf ("Rewind directory.\n");
	_wrewinddir (dir);

	if ((de = _wreaddir (dir)))
	{
		wprintf (L"First entry : \"%s\"\n", de->d_name);
	}
	else
	{
		wprintf (L"Empty directory.\n");
	}

	if (lPos != -1)
	{
		wprintf (L"Seeking to fourth entry.\n");
		_wseekdir (dir, lPos);

		if ((de = _wreaddir (dir)))
		{
			wprintf (L"Fourth entry : \"%s\"\n", de->d_name);
		}
		else
		{
			wprintf (L"No fourth entry.\n");
		}
	}
	else
	{
		wprintf (L"Seek position is past end of directory.\n");
	}

	wprintf (L"Closing directory.\n");
	_wclosedir (dir);
return 0;
}

@


1.2
log
@	* include/_mingw.h: Increment version to 2.0.
	* Makefile.in: Ditto.
	Merge in mingwex branch.
@
text
@@


1.1
log
@file wtest.c was initially added on branch mingwex.
@
text
@d1 98
@


1.1.2.1
log
@	Make wide char versions of opendir and friends.
	* include/dirent.h (_wdirent, _WDIR): Define wide versions of
	struct dirent, DIR.
	(_wopendir,_wreaddir,_wclosedir,_wrewinddir,_wtelldir,
	_wseekdir): Add prototypes for wide versions of corresponding
	standard functions.
	* include/tchar.h; Add _UNICODE mappings for dirent.h
	structures and functions.
	* mingwex/dirent.c: Make _UNICODE neutral.
	* mingwex/wdirent.c: New file to define _UNICODE before
	including dirent.c.
	* mingwex/Makefile.in (DISTFILES): Add wdirent.c/
	(POSIX_OBJS): Add wdirent.o.
	(wdirent.o): Specify dependency on dirent.c as well as
	wdirent.c.
	* samples/dirent/wtest.c: New file, wide version of test.c.
@
text
@a0 98
/*
 * A test which demonstrates the use of _wopendir and related
 * wide	char functions declared in dirent.h. 
 *
 * TODO: Make this _UNICODE neutral using tchar.h mappings.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <dirent.h>

int
main (int argc, char* argv[])
{
	int 		i;
	struct _wdirent*	de;
	_WDIR*		dir;
	long		lPos;

	if (argc == 2)
	{
		size_t len = strlen(argv[1]) + 1;
	        wchar_t* wpath = (wchar_t*) malloc(len *sizeof(wchar_t));
		mbstowcs(wpath, argv[1], len); 
		wprintf (L"Opening directory \"%s\"\n", wpath);
		dir = _wopendir(wpath);
		free (wpath);
	}
	else
	{
		wprintf (L"Opening \".\"\n");
		dir = _wopendir(L".");
	}

	if (!dir)
	{
		wprintf (L"Directory open failed!\n");
		if (errno)
		{
			wprintf (L"Error : %S\n", strerror(errno));
		}
		return 1;
	}

	i = 0;
	lPos = -1;

	while ((de = _wreaddir (dir)))
	{
		i++;
		wprintf (L"%d : \"%s\" (tell %ld)\n", i, de->d_name,
			_wtelldir(dir));

		if (i == 3)
		{
			wprintf (L"We will seek here later.\n");
			lPos = _wtelldir (dir);
		}
	}

	printf ("Rewind directory.\n");
	_wrewinddir (dir);

	if ((de = _wreaddir (dir)))
	{
		wprintf (L"First entry : \"%s\"\n", de->d_name);
	}
	else
	{
		wprintf (L"Empty directory.\n");
	}

	if (lPos != -1)
	{
		wprintf (L"Seeking to fourth entry.\n");
		_wseekdir (dir, lPos);

		if ((de = _wreaddir (dir)))
		{
			wprintf (L"Fourth entry : \"%s\"\n", de->d_name);
		}
		else
		{
			wprintf (L"No fourth entry.\n");
		}
	}
	else
	{
		wprintf (L"Seek position is past end of directory.\n");
	}

	wprintf (L"Closing directory.\n");
	_wclosedir (dir);
return 0;
}

@

