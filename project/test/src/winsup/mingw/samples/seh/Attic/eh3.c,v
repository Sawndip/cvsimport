head	1.3;
access;
symbols
	cygwin-1_7_17-release:1.2
	cygwin-64bit-branch:1.2.0.22
	cygwin-1_7_16-release:1.2
	cygwin-1_7_15-release:1.2
	cygwin-1_7_14_2-release:1.2
	cygwin-1_7_14-release:1.2
	cygwin-1_7_12-release:1.2
	cygwin-1_7_11-release:1.2
	cygwin-1_7_10-release:1.2
	cygwin-1_7_9-release:1.2
	cygwin-1_7_8-release:1.2
	cygwin-1_7_7-release:1.2
	cygwin-1_7_5-release:1.2
	cygwin-1_7_4-release:1.2
	cygwin-1_7_3-release:1.2
	cygwin-1_7_2-release:1.2
	cygwin-1_7_1-release:1.2
	cv-branch-2:1.2.0.20
	cr-0x5f1:1.2.0.18
	cv-branch:1.2.0.16
	cr-0x3b58:1.2.0.14
	cr-0x9e:1.2.0.12
	cr-0x9d:1.2.0.10
	corinna-01:1.2
	cr-0x9c:1.2.0.8
	cr-0x9b:1.2.0.4
	cr-0x99:1.2
	Z-emcb-cygwin_daemon:1.2.0.2
	w32api-2_2:1.2
	mingw-runtime-2_4:1.2
	mingw-std-ns-branch:1.2.0.6
	mingw-runtime-2_0:1.2
	mingwex:1.1.1.1.0.40
	cygnus_cvs_20020108_pre:1.1.1.1
	Z-cygwin_daemon_merge-new_HEAD:1.1.1.1
	Z-cygwin_daemon_merge_HEAD:1.1.1.1
	cygwin_daemon:1.1.1.1.0.10;
locks; strict;
comment	@ * @;
expand	@o@;


1.3
date	2012.11.07.16.52.30;	author cgf;	state dead;
branches;
next	1.2;

1.2
date	2002.05.28.13.13.36;	author earnie;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.3
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@int
__except_handler3(
	struct _EXCEPTION_RECORD*	pExceptionRecord,
	struct EXCEPTION_REGISTRATION*	pRegistrationFrame,
	struct _CONTEXT*		pContextRecord,
	void*				pDispatcherContext
	)
{
	LONG	filterFuncRet;
	LONG trylevel;
	EXCEPTION_POINTERS exceptPtrs;
	PSCOPETABLE pScopeTable;


	CLD // Clear the direction flag (make no assumptions!)

	// if neither the EXCEPTION_UNWINDING nor EXCEPTION_EXIT_UNWIND bit
	// is set... This is true the first time through the handler (the
	// non-unwinding case)

	if ( ! (pExceptionRecord->ExceptionFlags
		 & (EXCEPTION_UNWINDING | EXCEPTION_EXIT_UNWIND)
               ) )
	{
		// Build the EXCEPTION_POINTERS structure on the stack
		exceptPtrs.ExceptionRecord = pExceptionRecord;
		exceptPtrs.ContextRecord = pContextRecord;

		// Put the pointer to the EXCEPTION_POINTERS 4 bytes below the
		// establisher frame. See ASM code for GetExceptionInformation
		*(PDWORD)((PBYTE)pRegistrationFrame - 4) = &exceptPtrs;

		// Get initial "trylevel" value
		trylevel = pRegistrationFrame->trylevel 

		// Get a pointer to the scopetable array
		scopeTable = pRegistrationFrame->scopetable;

search_for_handler: 
		if ( pRegistrationFrame->trylevel != TRYLEVEL_NONE )
		{
			if ( pRegistrationFrame->scopetable[trylevel].lpfnFilter )
			{

				PUSH EBP // Save this frame EBP

			// !!!Very Important!!! Switch to original EBP. This is
			// what allows all locals in the frame to have the same
			// value as before the exception occurred.

				EBP = &pRegistrationFrame->_ebp

				// Call the filter function
				filterFuncRet = scopetable[trylevel].lpfnFilter();

				POP EBP // Restore handler frame EBP

				if ( filterFuncRet != EXCEPTION_CONTINUE_SEARCH )
				{
					if ( filterFuncRet < 0 ) // EXCEPTION_CONTINUE_EXECUTION
						return ExceptionContinueExecution;

					// If we get here, EXCEPTION_EXECUTE_HANDLER was specified
					scopetable == pRegistrationFrame->scopetable

			// Does the actual OS cleanup of registration frames
					// Causes this function to recurse
					__global_unwind2( pRegistrationFrame );


		// Once we get here, everything is all cleaned up, except
		// for the last frame, where we'll continue execution
					EBP = &pRegistrationFrame->_ebp

					__local_unwind2( pRegistrationFrame, trylevel );

		// NLG == "non-local-goto" (setjmp/longjmp stuff)
					__NLG_Notify( 1 ); // EAX == scopetable->lpfnHandler

		// Set the current trylevel to whatever SCOPETABLE entry
		// was being used when a handler was found
					pRegistrationFrame->trylevel = scopetable->previousTryLevel;

		// Call the _except {} block. Never returns.
					pRegistrationFrame->scopetable[trylevel].lpfnHandler();
				}
			}

			scopeTable = pRegistrationFrame->scopetable;
			trylevel = scopeTable->previousTryLevel

			goto search_for_handler;
		}
		else // trylevel == TRYLEVEL_NONE
		{
			retvalue == DISPOSITION_CONTINUE_SEARCH;
		}
	}
	else // EXCEPTION_UNWINDING or EXCEPTION_EXIT_UNWIND flags are set
	{
		PUSH EBP // Save EBP

		EBP = pRegistrationFrame->_ebp // Set EBP for __local_unwind2

		__local_unwind2( pRegistrationFrame, TRYLEVEL_NONE )

		POP EBP // Restore EBP

		retvalue == DISPOSITION_CONTINUE_SEARCH;
	}
}

@


1.2
log
@Merging MinGW changes
@
text
@@


1.1
log
@Initial revision
@
text
@d1 112
a112 112
int
__except_handler3(
	struct _EXCEPTION_RECORD*	pExceptionRecord,
	struct EXCEPTION_REGISTRATION*	pRegistrationFrame,
	struct _CONTEXT*		pContextRecord,
	void*				pDispatcherContext
	)
{
	LONG	filterFuncRet;
	LONG trylevel;
	EXCEPTION_POINTERS exceptPtrs;
	PSCOPETABLE pScopeTable;


	CLD // Clear the direction flag (make no assumptions!)

	// if neither the EXCEPTION_UNWINDING nor EXCEPTION_EXIT_UNWIND bit
	// is set... This is true the first time through the handler (the
	// non-unwinding case)

	if ( ! (pExceptionRecord->ExceptionFlags
		 & (EXCEPTION_UNWINDING | EXCEPTION_EXIT_UNWIND)
               ) )
	{
		// Build the EXCEPTION_POINTERS structure on the stack
		exceptPtrs.ExceptionRecord = pExceptionRecord;
		exceptPtrs.ContextRecord = pContextRecord;

		// Put the pointer to the EXCEPTION_POINTERS 4 bytes below the
		// establisher frame. See ASM code for GetExceptionInformation
		*(PDWORD)((PBYTE)pRegistrationFrame - 4) = &exceptPtrs;

		// Get initial "trylevel" value
		trylevel = pRegistrationFrame->trylevel 

		// Get a pointer to the scopetable array
		scopeTable = pRegistrationFrame->scopetable;

search_for_handler: 
		if ( pRegistrationFrame->trylevel != TRYLEVEL_NONE )
		{
			if ( pRegistrationFrame->scopetable[trylevel].lpfnFilter )
			{

				PUSH EBP // Save this frame EBP

			// !!!Very Important!!! Switch to original EBP. This is
			// what allows all locals in the frame to have the same
			// value as before the exception occurred.

				EBP = &pRegistrationFrame->_ebp

				// Call the filter function
				filterFuncRet = scopetable[trylevel].lpfnFilter();

				POP EBP // Restore handler frame EBP

				if ( filterFuncRet != EXCEPTION_CONTINUE_SEARCH )
				{
					if ( filterFuncRet < 0 ) // EXCEPTION_CONTINUE_EXECUTION
						return ExceptionContinueExecution;

					// If we get here, EXCEPTION_EXECUTE_HANDLER was specified
					scopetable == pRegistrationFrame->scopetable

			// Does the actual OS cleanup of registration frames
					// Causes this function to recurse
					__global_unwind2( pRegistrationFrame );


		// Once we get here, everything is all cleaned up, except
		// for the last frame, where we'll continue execution
					EBP = &pRegistrationFrame->_ebp

					__local_unwind2( pRegistrationFrame, trylevel );

		// NLG == "non-local-goto" (setjmp/longjmp stuff)
					__NLG_Notify( 1 ); // EAX == scopetable->lpfnHandler

		// Set the current trylevel to whatever SCOPETABLE entry
		// was being used when a handler was found
					pRegistrationFrame->trylevel = scopetable->previousTryLevel;

		// Call the _except {} block. Never returns.
					pRegistrationFrame->scopetable[trylevel].lpfnHandler();
				}
			}

			scopeTable = pRegistrationFrame->scopetable;
			trylevel = scopeTable->previousTryLevel

			goto search_for_handler;
		}
		else // trylevel == TRYLEVEL_NONE
		{
			retvalue == DISPOSITION_CONTINUE_SEARCH;
		}
	}
	else // EXCEPTION_UNWINDING or EXCEPTION_EXIT_UNWIND flags are set
	{
		PUSH EBP // Save EBP

		EBP = pRegistrationFrame->_ebp // Set EBP for __local_unwind2

		__local_unwind2( pRegistrationFrame, TRYLEVEL_NONE )

		POP EBP // Restore EBP

		retvalue == DISPOSITION_CONTINUE_SEARCH;
	}
}

@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
