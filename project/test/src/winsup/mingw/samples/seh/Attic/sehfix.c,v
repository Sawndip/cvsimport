head	1.3;
access;
symbols
	cygwin-1_7_17-release:1.2
	cygwin-64bit-branch:1.2.0.22
	cygwin-1_7_16-release:1.2
	cygwin-1_7_15-release:1.2
	cygwin-1_7_14_2-release:1.2
	cygwin-1_7_14-release:1.2
	cygwin-1_7_12-release:1.2
	cygwin-1_7_11-release:1.2
	cygwin-1_7_10-release:1.2
	cygwin-1_7_9-release:1.2
	cygwin-1_7_8-release:1.2
	cygwin-1_7_7-release:1.2
	cygwin-1_7_5-release:1.2
	cygwin-1_7_4-release:1.2
	cygwin-1_7_3-release:1.2
	cygwin-1_7_2-release:1.2
	cygwin-1_7_1-release:1.2
	cv-branch-2:1.2.0.20
	cr-0x5f1:1.2.0.18
	cv-branch:1.2.0.16
	cr-0x3b58:1.2.0.14
	cr-0x9e:1.2.0.12
	cr-0x9d:1.2.0.10
	corinna-01:1.2
	cr-0x9c:1.2.0.8
	cr-0x9b:1.2.0.4
	cr-0x99:1.2
	Z-emcb-cygwin_daemon:1.2.0.2
	w32api-2_2:1.2
	mingw-runtime-2_4:1.2
	mingw-std-ns-branch:1.2.0.6
	mingw-runtime-2_0:1.2
	mingwex:1.1.1.1.0.40
	cygnus_cvs_20020108_pre:1.1.1.1
	Z-cygwin_daemon_merge-new_HEAD:1.1.1.1
	Z-cygwin_daemon_merge_HEAD:1.1.1.1
	cygwin_daemon:1.1.1.1.0.10;
locks; strict;
comment	@ * @;
expand	@o@;


1.3
date	2012.11.07.16.52.30;	author cgf;	state dead;
branches;
next	1.2;

1.2
date	2002.05.28.13.13.37;	author earnie;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.3
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@/*
 * sehfix.c
 *
 * A test program involving an exception handler that fixes the exception
 * causing condition.
 *
 * In this code we install an exception handler my_handler and then a piece
 * of inline assembly attempts to write at the address marked in eax, after
 * setting eax to 10. This should produce an exception. The handler then
 * changes the eax register of the exception context to be the address of
 * a static variable and restarts the code. This should allow everything
 * to continue.
 */

#include <windows.h>
#include <excpt.h>

#include "exutil.h"

int	x;

EXCEPTION_DISPOSITION
my_handler (
	struct _EXCEPTION_RECORD* pExceptionRec,
	void* pEstablisherFrame,
	struct _CONTEXT* pContextRecord,
	void* pDispatcherContext
	)
{
	printf ("In my exception handler!\n");
	DumpExceptionRecord (pExceptionRec);
	pContextRecord->Eax = (DWORD) &x;
	return ExceptionContinueExecution;
}

main ()
{
	x = 2;

	printf ("x = %d\n", x);

	WalkExceptionHandlers();

	__try1(my_handler)

	WalkExceptionHandlers();

	/* This assembly code should produce an exception. */
	__asm__("movl $10,%%eax;movl $1,(%%eax);" : : : "%eax");

	__except1

	WalkExceptionHandlers();

	printf ("x = %d\n", x);

	printf ("Finished!\n");
}


@


1.2
log
@Merging MinGW changes
@
text
@@


1.1
log
@Initial revision
@
text
@d1 60
a60 60
/*
 * sehfix.c
 *
 * A test program involving an exception handler that fixes the exception
 * causing condition.
 *
 * In this code we install an exception handler my_handler and then a piece
 * of inline assembly attempts to write at the address marked in eax, after
 * setting eax to 10. This should produce an exception. The handler then
 * changes the eax register of the exception context to be the address of
 * a static variable and restarts the code. This should allow everything
 * to continue.
 */

#include <windows.h>
#include <excpt.h>

#include "exutil.h"

int	x;

EXCEPTION_DISPOSITION
my_handler (
	struct _EXCEPTION_RECORD* pExceptionRec,
	void* pEstablisherFrame,
	struct _CONTEXT* pContextRecord,
	void* pDispatcherContext
	)
{
	printf ("In my exception handler!\n");
	DumpExceptionRecord (pExceptionRec);
	pContextRecord->Eax = (DWORD) &x;
	return ExceptionContinueExecution;
}

main ()
{
	x = 2;

	printf ("x = %d\n", x);

	WalkExceptionHandlers();

	__try1(my_handler)

	WalkExceptionHandlers();

	/* This assembly code should produce an exception. */
	__asm__("movl $10,%%eax;movl $1,(%%eax);" : : : "%eax");

	__except1

	WalkExceptionHandlers();

	printf ("x = %d\n", x);

	printf ("Finished!\n");
}


@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
