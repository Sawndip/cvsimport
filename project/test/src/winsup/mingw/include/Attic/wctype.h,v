head	1.14;
access;
symbols
	cygwin-1_7_17-release:1.13
	cygwin-64bit-branch:1.13.0.4
	cygwin-1_7_16-release:1.13
	cygwin-1_7_15-release:1.13
	cygwin-1_7_14_2-release:1.13
	cygwin-1_7_14-release:1.13
	cygwin-1_7_12-release:1.13
	cygwin-1_7_11-release:1.13
	cygwin-1_7_10-release:1.13
	cygwin-1_7_9-release:1.13
	cygwin-1_7_8-release:1.13
	cygwin-1_7_7-release:1.13
	cygwin-1_7_5-release:1.13
	cygwin-1_7_4-release:1.13
	cygwin-1_7_3-release:1.13
	cygwin-1_7_2-release:1.13
	cygwin-1_7_1-release:1.13
	cv-branch-2:1.13.0.2
	cr-0x5f1:1.9.0.6
	cv-branch:1.9.0.4
	cr-0x3b58:1.9.0.2
	cr-0x9e:1.6.0.4
	cr-0x9d:1.6.0.2
	corinna-01:1.6
	cr-0x9c:1.5.0.6
	cr-0x9b:1.5.0.4
	cr-0x99:1.5
	Z-emcb-cygwin_daemon:1.5.0.2
	w32api-2_2:1.4
	mingw-runtime-2_4:1.4
	mingw-std-ns-branch:1.3.0.6
	mingw-runtime-2_0:1.3
	mingwex:1.2.0.10
	cygnus_cvs_20020108_pre:1.2
	Z-cygwin_daemon_merge-new_HEAD:1.1.1.1
	Z-cygwin_daemon_merge_HEAD:1.1.1.1
	cygwin_daemon:1.1.1.1.0.10;
locks; strict;
comment	@ * @;
expand	@o@;


1.14
date	2012.11.07.16.52.17;	author cgf;	state dead;
branches;
next	1.13;

1.13
date	2007.06.28.07.13.04;	author dannysmith;	state Exp;
branches;
next	1.12;

1.12
date	2007.06.23.07.54.58;	author dannysmith;	state Exp;
branches;
next	1.11;

1.11
date	2006.08.25.09.10.05;	author dannysmith;	state Exp;
branches;
next	1.10;

1.10
date	2006.08.03.07.44.30;	author dannysmith;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.10.10.10.31;	author dannysmith;	state Exp;
branches;
next	1.8;

1.8
date	2005.02.25.08.15.46;	author dannysmith;	state Exp;
branches;
next	1.7;

1.7
date	2005.02.25.01.48.38;	author dannysmith;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.24.00.41.01;	author dannysmith;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.10.21.13.34;	author dannysmith;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.07.21.05.13;	author dannysmith;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.13.10.20.43;	author dannysmith;	state Exp;
branches
	1.3.6.1;
next	1.2;

1.2
date	2001.12.05.15.01.05;	author earnie;	state Exp;
branches
	1.2.10.1;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;

1.2.10.1
date	2002.04.26.01.32.09;	author dannysmith;	state Exp;
branches;
next	1.2.10.2;

1.2.10.2
date	2002.05.21.01.49.09;	author dannysmith;	state Exp;
branches;
next	;

1.3.6.1
date	2002.09.20.04.15.13;	author dannysmith;	state Exp;
branches;
next	1.3.6.2;

1.3.6.2
date	2002.10.02.04.38.37;	author dannysmith;	state Exp;
branches;
next	1.3.6.3;

1.3.6.3
date	2002.10.03.20.43.38;	author dannysmith;	state Exp;
branches;
next	1.3.6.4;

1.3.6.4
date	2002.10.11.03.13.32;	author dannysmith;	state Exp;
branches;
next	1.3.6.5;

1.3.6.5
date	2003.01.26.22.37.50;	author dannysmith;	state Exp;
branches;
next	1.3.6.6;

1.3.6.6
date	2003.03.31.22.32.19;	author dannysmith;	state Exp;
branches;
next	;


desc
@@


1.14
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@/* 
 * wctype.h
 *
 * Functions for testing wide character types and converting characters.
 *
 * This file is part of the Mingw32 package.
 *
 * Contributors:
 *  Created by Mumit Khan <khan@@xraylith.wisc.edu>
 *
 *  THIS SOFTWARE IS NOT COPYRIGHTED
 *
 *  This source code is offered for use in the public domain. You may
 *  use, modify or distribute it freely.
 *
 *  This code is distributed in the hope that it will be useful but
 *  WITHOUT ANY WARRANTY. ALL WARRANTIES, EXPRESS OR IMPLIED ARE HEREBY
 *  DISCLAIMED. This includes but is not limited to warranties of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

#ifndef _WCTYPE_H_
#define _WCTYPE_H_

/* All the headers include this file. */
#include <_mingw.h>

#define	__need_wchar_t
#define	__need_wint_t
#ifndef RC_INVOKED
#include <stddef.h>
#endif	/* Not RC_INVOKED */

/*
 * The following flags are used to tell iswctype and _isctype what character
 * types you are looking for.
 */
#define	_UPPER		0x0001
#define	_LOWER		0x0002
#define	_DIGIT		0x0004
#define	_SPACE		0x0008
#define	_PUNCT		0x0010
#define	_CONTROL	0x0020
#define	_BLANK		0x0040
#define	_HEX		0x0080
#define	_LEADBYTE	0x8000

#define	_ALPHA		0x0103

#ifndef RC_INVOKED

#ifdef __cplusplus
extern "C" {
#endif

#ifndef WEOF
#define	WEOF	(wchar_t)(0xFFFF)
#endif

#ifndef _WCTYPE_T_DEFINED
typedef wchar_t wctype_t;
#define _WCTYPE_T_DEFINED
#endif

/* Wide character equivalents - also in ctype.h */
_CRTIMP int __cdecl __MINGW_NOTHROW	iswalnum(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW	iswalpha(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW	iswascii(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW	iswcntrl(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW	iswctype(wint_t, wctype_t);
_CRTIMP int __cdecl __MINGW_NOTHROW	is_wctype(wint_t, wctype_t);	/* Obsolete! */
_CRTIMP int __cdecl __MINGW_NOTHROW	iswdigit(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW	iswgraph(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW	iswlower(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW	iswprint(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW	iswpunct(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW	iswspace(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW	iswupper(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW	iswxdigit(wint_t);

#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) \
     || !defined __STRICT_ANSI__ || defined __cplusplus
int __cdecl __MINGW_NOTHROW iswblank (wint_t);
#endif

/* Older MS docs uses wchar_t for arg and return type, while newer
   online MS docs say arg is wint_t and return is int.
   ISO C uses wint_t for both.  */
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	towlower (wint_t);
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	towupper (wint_t);

_CRTIMP int __cdecl __MINGW_NOTHROW	isleadbyte (int);

/* Also in ctype.h */

#ifdef __DECLSPEC_SUPPORTED
# if __MSVCRT_VERSION__ <= 0x0700
  __MINGW_IMPORT unsigned short _ctype[];
# endif 
# ifdef __MSVCRT__
  __MINGW_IMPORT unsigned short* _pctype;
# else	/* CRTDLL */
  __MINGW_IMPORT unsigned short* _pctype_dll;
# define  _pctype _pctype_dll
# endif

#else		/* ! __DECLSPEC_SUPPORTED */
# if __MSVCRT_VERSION__ <= 0x0700
  extern unsigned short** _imp___ctype;
# define _ctype (*_imp___ctype)
# endif
# ifdef __MSVCRT__
  extern unsigned short** _imp___pctype;
# define _pctype (*_imp___pctype)
# else	/* CRTDLL */
  extern unsigned short** _imp___pctype_dll;
# define _pctype (*_imp___pctype_dll)
# endif	/* CRTDLL */
#endif		/*  __DECLSPEC_SUPPORTED */


#if !(defined (__NO_INLINE__) || defined(__NO_CTYPE_INLINES) \
      || defined(__WCTYPE_INLINES_DEFINED))
#define __WCTYPE_INLINES_DEFINED
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswalnum(wint_t wc) {return (iswctype(wc,_ALPHA|_DIGIT));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswalpha(wint_t wc) {return (iswctype(wc,_ALPHA));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswascii(wint_t wc) {return ((wc & ~0x7F) ==0);}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswcntrl(wint_t wc) {return (iswctype(wc,_CONTROL));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswdigit(wint_t wc) {return (iswctype(wc,_DIGIT));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswgraph(wint_t wc) {return (iswctype(wc,_PUNCT|_ALPHA|_DIGIT));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswlower(wint_t wc) {return (iswctype(wc,_LOWER));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswprint(wint_t wc) {return (iswctype(wc,_BLANK|_PUNCT|_ALPHA|_DIGIT));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswpunct(wint_t wc) {return (iswctype(wc,_PUNCT));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswspace(wint_t wc) {return (iswctype(wc,_SPACE));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswupper(wint_t wc) {return (iswctype(wc,_UPPER));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswxdigit(wint_t wc) {return (iswctype(wc,_HEX));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW isleadbyte(int c) {return (_pctype[(unsigned char)(c)] & _LEADBYTE);}

#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) \
     || !defined __STRICT_ANSI__ || defined __cplusplus
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswblank (wint_t wc)
  {return (iswctype(wc, _BLANK) || wc == L'\t');}
#endif

#endif /* !(defined(__NO_CTYPE_INLINES) || defined(__WCTYPE_INLINES_DEFINED)) */

typedef wchar_t wctrans_t;

/* These are resolved by libmingwex.a.  Note, that they are also exported
   by the MS C++ runtime lib (msvcp60.dll).  The msvcp60.dll implementations
   of wctrans and towctrans are not C99 compliant in that wctrans("tolower")
   returns 0, while std specifies that a non-zero value should be returned
   for a valid string descriptor.  If you want the MS behaviour (and you have
   msvcp60.dll in your path) add -lmsvcp60 to your command line.  */ 	

wint_t __cdecl __MINGW_NOTHROW		towctrans(wint_t, wctrans_t);
wctrans_t __cdecl __MINGW_NOTHROW	wctrans(const char*);
wctype_t __cdecl __MINGW_NOTHROW	wctype(const char*);

#ifdef __cplusplus
}
#endif

#endif	/* Not RC_INVOKED */

#endif	/* Not _WCTYPE_H_ */

@


1.13
log
@	* msvcrt.def.in: Update comment.
	Exclude _ctype stub if using msvcr71.dll or newer.
	* include/ctype.h: Don't declare _ctype if using msvcr71.dll or newer.
	* include/wctype.h: Likewise.
@
text
@@


1.12
log
@*include/wctpe.h: Likewise.
*include/wdirent.h: Likewise.
Changelog: Whitespace
Further: http://www.lib.virginia.edu/cgi-bin/imgload.cgi/53
@
text
@d98 3
a100 1
__MINGW_IMPORT unsigned short _ctype[];
d109 4
a112 2
extern unsigned short** _imp___ctype;
#define _ctype (*_imp___ctype)
@


1.11
log
@	* include/ctype.h: Expose iswblank if __cplusplus.
	* include/wctype.h: Expose iswblank if __cplusplus.
@
text
@d67 14
a80 14
_CRTIMP int __cdecl	iswalnum(wint_t);
_CRTIMP int __cdecl	iswalpha(wint_t);
_CRTIMP int __cdecl	iswascii(wint_t);
_CRTIMP int __cdecl	iswcntrl(wint_t);
_CRTIMP int __cdecl	iswctype(wint_t, wctype_t);
_CRTIMP int __cdecl	is_wctype(wint_t, wctype_t);	/* Obsolete! */
_CRTIMP int __cdecl	iswdigit(wint_t);
_CRTIMP int __cdecl	iswgraph(wint_t);
_CRTIMP int __cdecl	iswlower(wint_t);
_CRTIMP int __cdecl	iswprint(wint_t);
_CRTIMP int __cdecl	iswpunct(wint_t);
_CRTIMP int __cdecl	iswspace(wint_t);
_CRTIMP int __cdecl	iswupper(wint_t);
_CRTIMP int __cdecl	iswxdigit(wint_t);
d84 1
a84 1
int __cdecl iswblank (wint_t);
d90 2
a91 2
_CRTIMP wint_t __cdecl	towlower (wint_t);
_CRTIMP wint_t __cdecl	towupper (wint_t);
d93 1
a93 1
_CRTIMP int __cdecl	isleadbyte (int);
d122 13
a134 13
__CRT_INLINE int __cdecl iswalnum(wint_t wc) {return (iswctype(wc,_ALPHA|_DIGIT));}
__CRT_INLINE int __cdecl iswalpha(wint_t wc) {return (iswctype(wc,_ALPHA));}
__CRT_INLINE int __cdecl iswascii(wint_t wc) {return ((wc & ~0x7F) ==0);}
__CRT_INLINE int __cdecl iswcntrl(wint_t wc) {return (iswctype(wc,_CONTROL));}
__CRT_INLINE int __cdecl iswdigit(wint_t wc) {return (iswctype(wc,_DIGIT));}
__CRT_INLINE int __cdecl iswgraph(wint_t wc) {return (iswctype(wc,_PUNCT|_ALPHA|_DIGIT));}
__CRT_INLINE int __cdecl iswlower(wint_t wc) {return (iswctype(wc,_LOWER));}
__CRT_INLINE int __cdecl iswprint(wint_t wc) {return (iswctype(wc,_BLANK|_PUNCT|_ALPHA|_DIGIT));}
__CRT_INLINE int __cdecl iswpunct(wint_t wc) {return (iswctype(wc,_PUNCT));}
__CRT_INLINE int __cdecl iswspace(wint_t wc) {return (iswctype(wc,_SPACE));}
__CRT_INLINE int __cdecl iswupper(wint_t wc) {return (iswctype(wc,_UPPER));}
__CRT_INLINE int __cdecl iswxdigit(wint_t wc) {return (iswctype(wc,_HEX));}
__CRT_INLINE int __cdecl isleadbyte(int c) {return (_pctype[(unsigned char)(c)] & _LEADBYTE);}
d138 1
a138 1
__CRT_INLINE int __cdecl iswblank (wint_t wc)
d153 3
a155 3
wint_t __cdecl		towctrans(wint_t, wctrans_t);
wctrans_t __cdecl	wctrans(const char*);
wctype_t __cdecl	wctype(const char*);
@


1.10
log
@	* include/ctype.h (_BLANK): Expand comment.
	(isblank): Add prototype and inline definition.
	(iswblank): Add prototype and inline definition.
	* include/wctype.h (iswblank): Add prototype and inline definition.
	* mingwex/isblank.c: New file.
	* mingwex/iswblank.c: New file.
	* mingwex/Makefile.in: Add isblank, iswblank to libmingwex.a
@
text
@d83 1
a83 1
     || !defined __STRICT_ANSI__
d137 1
a137 1
     || !defined __STRICT_ANSI__
@


1.9
log
@	* include/wctype.h (towupper, towlower): Change arg and return value
	types to wint_t.
	* include/ctype.h (towupper, towlower): Likewise.
@
text
@d82 5
d135 7
a143 1

@


1.8
log
@	* include/wctype.h  (wctrans) Remove _CRTIMP.
	(towctrans): Likewise.
	(wctype): Likewise,
@
text
@d82 5
a86 2
_CRTIMP wchar_t __cdecl	towlower(wchar_t);
_CRTIMP wchar_t __cdecl	towupper(wchar_t);
@


1.7
log
@	* include/wctype.h:  Add comment on wctrans, towctrans, wctype.
@
text
@d139 3
a141 3
_CRTIMP wint_t __cdecl		towctrans(wint_t, wctrans_t);
_CRTIMP wctrans_t __cdecl	wctrans(const char*);
_CRTIMP wctype_t __cdecl	wctype(const char*);
@


1.6
log
@	* include/_mingw.h (__CRT_INLINE): Define.
	* include/ctype.h: Replace 'extern inline' with __CRT_INLINE,
	throughout
	* include/inttypes.h: Likewise.
	* include/math.h: Likewise.
	* include/stdio.h: Likewise.
	* include/stdlib.h: Likewise.
	* include/string.h: Likewise.
	* include/wchar.h: Likewise.
	* include/wctype.h: Likewise.
@
text
@d131 8
@


1.5
log
@	* include/_mingw.h (_CRTIMP): Define for __GNUC__ if
	__declspec(dllimport)  supported.
	(__cdecl): Define if not already defined.
	(__stdcall): Likewise.
	* include/dirent.h: Qualify fuctions with __cdecl.
	* include/fenv.h: Likewise.
	* include/inttypes.h: Likewise.
	* include/assert.h: Qualify fuctions with __cdecl. Qualify
	CRT dll imports with _CRTIMP.
	* include/conio.h: Likewise.
	* include/ctype.h: Likewise.
	* include/direct.h: Likewise.
	* include/dos.h: Likewise.
	* include/errno.h: Likewise.
	* include/float.h: Likewise.
	* include/io.h: Likewise.
	* include/locale.h: Likewise.
	* include/malloc.h: Likewise.
	* include/math.h: Likewise.
	* include/mbctype.h: Likewise.
	* include/mbstring.h: Likewise.
	* include/process.h: Likewise.
	* include/setjmp.h: Likewise.
	* include/signal.h: Likewise.
	* include/stdio.h: Likewise.
	* include/stdlib.h: Likewise.
	* include/string.h: Likewise.
	* include/time.h: Likewise.
	* include/wchar.h: Likewise.
	* include/wctype.h: Likewise.
	* include/sys/stat.h: Likewise.
	* include/sys/timeb.h: Likewise.
	* include/sys/utime.h: Likewise.

	* include/ctype.h: Guard ctype inlines with __NO_INLINE__.
	* include/wctype.h: Guard wctype inlines with __NO_INLINE__.

	* include/stdio.h (__VALIST): Guard against prior definition.
@
text
@d114 13
a126 13
extern __inline__ int __cdecl iswalnum(wint_t wc) {return (iswctype(wc,_ALPHA|_DIGIT));}
extern __inline__ int __cdecl iswalpha(wint_t wc) {return (iswctype(wc,_ALPHA));}
extern __inline__ int __cdecl iswascii(wint_t wc) {return ((wc & ~0x7F) ==0);}
extern __inline__ int __cdecl iswcntrl(wint_t wc) {return (iswctype(wc,_CONTROL));}
extern __inline__ int __cdecl iswdigit(wint_t wc) {return (iswctype(wc,_DIGIT));}
extern __inline__ int __cdecl iswgraph(wint_t wc) {return (iswctype(wc,_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int __cdecl iswlower(wint_t wc) {return (iswctype(wc,_LOWER));}
extern __inline__ int __cdecl iswprint(wint_t wc) {return (iswctype(wc,_BLANK|_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int __cdecl iswpunct(wint_t wc) {return (iswctype(wc,_PUNCT));}
extern __inline__ int __cdecl iswspace(wint_t wc) {return (iswctype(wc,_SPACE));}
extern __inline__ int __cdecl iswupper(wint_t wc) {return (iswctype(wc,_UPPER));}
extern __inline__ int __cdecl iswxdigit(wint_t wc) {return (iswctype(wc,_HEX));}
extern __inline__ int __cdecl isleadbyte(int c) {return (_pctype[(unsigned char)(c)] & _LEADBYTE);}
@


1.4
log
@	* include/ctype.h (__isascii): Don't cast arg to unsigned.
	(iswascii): Likewise.  Correct mask.
	* include/wctype.h (iswascii): Don't cast arg to unsigned.
	Correct mask
@
text
@d67 14
a80 14
int	iswalnum(wint_t);
int	iswalpha(wint_t);
int	iswascii(wint_t);
int	iswcntrl(wint_t);
int	iswctype(wint_t, wctype_t);
int	is_wctype(wint_t, wctype_t);	/* Obsolete! */
int	iswdigit(wint_t);
int	iswgraph(wint_t);
int	iswlower(wint_t);
int	iswprint(wint_t);
int	iswpunct(wint_t);
int	iswspace(wint_t);
int	iswupper(wint_t);
int	iswxdigit(wint_t);
d82 2
a83 2
wchar_t	towlower(wchar_t);
wchar_t	towupper(wchar_t);
d85 1
a85 1
int	isleadbyte (int);
d111 2
a112 1
#if !(defined(__NO_CTYPE_INLINES) || defined(__WCTYPE_INLINES_DEFINED))
d114 13
a126 13
extern __inline__ int iswalnum(wint_t wc) {return (iswctype(wc,_ALPHA|_DIGIT));}
extern __inline__ int iswalpha(wint_t wc) {return (iswctype(wc,_ALPHA));}
extern __inline__ int iswascii(wint_t wc) {return ((wc & ~0x7F) ==0);}
extern __inline__ int iswcntrl(wint_t wc) {return (iswctype(wc,_CONTROL));}
extern __inline__ int iswdigit(wint_t wc) {return (iswctype(wc,_DIGIT));}
extern __inline__ int iswgraph(wint_t wc) {return (iswctype(wc,_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int iswlower(wint_t wc) {return (iswctype(wc,_LOWER));}
extern __inline__ int iswprint(wint_t wc) {return (iswctype(wc,_BLANK|_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int iswpunct(wint_t wc) {return (iswctype(wc,_PUNCT));}
extern __inline__ int iswspace(wint_t wc) {return (iswctype(wc,_SPACE));}
extern __inline__ int iswupper(wint_t wc) {return (iswctype(wc,_UPPER));}
extern __inline__ int iswxdigit(wint_t wc) {return (iswctype(wc,_HEX));}
extern __inline__ int isleadbyte(int c) {return (_pctype[(unsigned char)(c)] & _LEADBYTE);}
d131 3
a133 3
wint_t 		towctrans(wint_t, wctrans_t);
wctrans_t	wctrans(const char*);
wctype_t	wctype(const char*);
@


1.3
log
@	* include/_mingw.h: Increment version to 2.0.
	* Makefile.in: Ditto.
	Merge in mingwex branch.
@
text
@d115 1
a115 1
extern __inline__ int iswascii(wint_t wc) {return (((unsigned)wc & 0x7F) ==0);}
@


1.3.6.1
log
@	* include/_mingw.h (__BEGIN_CSTD_NAMESPACE,__END_CSTD_NAMESPACE
	__BEGIN_CGLOBAL_NAMESPACE, __END_CGLOBAL_NAMESPACE, __CSTD,
	__CGLOBAL): Add defines for for ISO C++ c-header compatability.

	* include/ctype.h: Use C++ c-header compatability defines.
	* include/wctype.h: Likewise.
@
text
@d53 3
a55 1
__BEGIN_CSTD_NAMESPACE
d134 3
a136 1
__END_CSTD_NAMESPACE
@


1.3.6.2
log
@	* include/cytpe.h: Prefix identifiers used as args of inlines
	with '__', throughout.
	* include/inttypes.h: Likewise.
	* include/math.h: Likewise.
	* include/stdio.h: Likewise.
	* include/stdlib.h: Likewise.
	* include/wchar.h: Likewise.
	* include/wctype.h: Likewise.
@
text
@d111 13
a123 14
extern __inline__ int iswalnum(wint_t__wc) {return (iswctype(__wc,_ALPHA|_DIGIT));}
extern __inline__ int iswalpha(wint_t__wc) {return (iswctype(__wc,_ALPHA));}
extern __inline__ int iswascii(wint_t__wc) {return (((unsigned)wc & 0x7F) ==0);}
extern __inline__ int iswcntrl(wint_t__wc) {return (iswctype(__wc,_CONTROL));}
extern __inline__ int iswdigit(wint_t__wc) {return (iswctype(__wc,_DIGIT));}
extern __inline__ int iswgraph(wint_t__wc) {return (iswctype(__wc,_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int iswlower(wint_t__wc) {return (iswctype(__wc,_LOWER));}
extern __inline__ int iswprint(wint_t__wc) {return (iswctype(__wc,_BLANK|_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int iswpunct(wint_t__wc) {return (iswctype(__wc,_PUNCT));}
extern __inline__ int iswspace(wint_t__wc) {return (iswctype(__wc,_SPACE));}
extern __inline__ int iswupper(wint_t__wc) {return (iswctype(__wc,_UPPER));}
extern __inline__ int iswxdigit(wint_t__wc) {return (iswctype(__wc,_HEX));}
extern __inline__ int isleadbyte(int __c)
  {return (_pctype[(unsigned char)(__c)] & _LEADBYTE);}
@


1.3.6.3
log
@	* include/math.h (__signbit); Remove errant '__' added in last
	patch.
 	* include/wctype.h: Add missing space before __wc, throughout.
	(is_wctype): Move into non-ANSI space.
@
text
@d70 1
d108 1
d111 12
a122 12
extern __inline__ int iswalnum(wint_t __wc) {return (iswctype(__wc,_ALPHA|_DIGIT));}
extern __inline__ int iswalpha(wint_t __wc) {return (iswctype(__wc,_ALPHA));}
extern __inline__ int iswascii(wint_t __wc) {return (((unsigned)__wc & 0x7F) ==0);}
extern __inline__ int iswcntrl(wint_t __wc) {return (iswctype(__wc,_CONTROL));}
extern __inline__ int iswdigit(wint_t __wc) {return (iswctype(__wc,_DIGIT));}
extern __inline__ int iswgraph(wint_t __wc) {return (iswctype(__wc,_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int iswlower(wint_t __wc) {return (iswctype(__wc,_LOWER));}
extern __inline__ int iswprint(wint_t __wc) {return (iswctype(__wc,_BLANK|_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int iswpunct(wint_t __wc) {return (iswctype(__wc,_PUNCT));}
extern __inline__ int iswspace(wint_t __wc) {return (iswctype(__wc,_SPACE));}
extern __inline__ int iswupper(wint_t __wc) {return (iswctype(__wc,_UPPER));}
extern __inline__ int iswxdigit(wint_t __wc) {return (iswctype(__wc,_HEX));}
d127 1
a133 6

#ifndef __STRICT_ANSI__
__BEGIN_CGLOBAL_NAMESPACE
int	is_wctype(wint_t, __CSTD wctype_t);	/* Obsolete! */
__END_CGLOBAL_NAMESPACE
#endif /* __STRICT_ANSI__ */
@


1.3.6.4
log
@	* include/ctype: Qualify wint_t with __CSTD
	when in global namespace.
	* include/wctype:Likewise.
	* include/stdio.h: Qualify wint_t and size_t with __CSTD
	when in global namespace.
	* include/stdlib.h: Qualify size_t with __CSTD
	when in global namespace.
	* include/string.h: Likewise.
	* include/time.h: Likewise.
	* include/sys/types.h: Inject time_t into global namespace.
@
text
@d134 1
a134 1
int	is_wctype(__CSTD wint_t, __CSTD wctype_t);	/* Obsolete! */
@


1.3.6.5
log
@	Merge from mingw trunk (changes since 2002-12-10).
@
text
@d111 1
a111 1
extern __inline__ int iswascii(wint_t __wc) {return ((__wc & ~0x7F) == 0);}
@


1.3.6.6
log
@	Merge from mingw trunk (changes since 2003-01-27).
@
text
@d65 13
a77 13
_CRTIMP int __cdecl iswalnum(wint_t);
_CRTIMP int __cdecl iswalpha(wint_t);
_CRTIMP int __cdecl iswascii(wint_t);
_CRTIMP int __cdecl iswcntrl(wint_t);
_CRTIMP int __cdecl iswctype(wint_t, wctype_t);
_CRTIMP int __cdecl iswdigit(wint_t);
_CRTIMP int __cdecl iswgraph(wint_t);
_CRTIMP int __cdecl iswlower(wint_t);
_CRTIMP int __cdecl iswprint(wint_t);
_CRTIMP int __cdecl iswpunct(wint_t);
_CRTIMP int __cdecl iswspace(wint_t);
_CRTIMP int __cdecl iswupper(wint_t);
_CRTIMP int __cdecl iswxdigit(wint_t);
d79 2
a80 2
_CRTIMP wchar_t __cdecl towlower(wchar_t);
_CRTIMP wchar_t	__cdecl towupper(wchar_t);
d82 1
a82 1
_CRTIMP int __cdecl isleadbyte (int);
d107 1
a107 2
#if !(defined (__NO_INLINE__) || defined(__NO_CTYPE_INLINES) \
      || defined(__WCTYPE_INLINES_DEFINED))
d109 13
a121 13
extern __inline__ int __cdecl iswalnum(wint_t __wc) {return (iswctype(__wc,_ALPHA|_DIGIT));}
extern __inline__ int __cdecl iswalpha(wint_t __wc) {return (iswctype(__wc,_ALPHA));}
extern __inline__ int __cdecl iswascii(wint_t __wc) {return ((__wc & ~0x7F) == 0);}
extern __inline__ int __cdecl iswcntrl(wint_t __wc) {return (iswctype(__wc,_CONTROL));}
extern __inline__ int __cdecl iswdigit(wint_t __wc) {return (iswctype(__wc,_DIGIT));}
extern __inline__ int __cdecl iswgraph(wint_t __wc) {return (iswctype(__wc,_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int __cdecl iswlower(wint_t __wc) {return (iswctype(__wc,_LOWER));}
extern __inline__ int __cdecl iswprint(wint_t __wc) {return (iswctype(__wc,_BLANK|_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int __cdecl iswpunct(wint_t __wc) {return (iswctype(__wc,_PUNCT));}
extern __inline__ int __cdecl iswspace(wint_t __wc) {return (iswctype(__wc,_SPACE));}
extern __inline__ int __cdecl iswupper(wint_t __wc) {return (iswctype(__wc,_UPPER));}
extern __inline__ int __cdecl iswxdigit(wint_t __wc) {return (iswctype(__wc,_HEX));}
extern __inline__ int __cdecl isleadbyte(int __c)
d126 3
a128 3
_CRTIMP wint_t __cdecl towctrans(wint_t, wctrans_t);
_CRTIMP wctrans_t __cdecl wctrans(const char*);
_CRTIMP wctype_t __cdecl wctype(const char*);
d134 1
a134 1
_CRTIMP int __cdecl is_wctype(__CSTD wint_t, __CSTD wctype_t);	/* Obsolete! */
@


1.2
log
@Merge MinGW CVS differences
@
text
@d89 1
d91 19
a109 6
#ifdef __MSVCRT__
__MINGW_IMPORT unsigned short* _pctype;
#else
__MINGW_IMPORT unsigned short* _pctype_dll;
#define  _pctype _pctype_dll
#endif
d113 13
a125 13
extern inline int iswalnum(wint_t wc) {return (iswctype(wc,_ALPHA|_DIGIT));}
extern inline int iswalpha(wint_t wc) {return (iswctype(wc,_ALPHA));}
extern inline int iswascii(wint_t wc) {return (((unsigned)wc & 0x7F) ==0);}
extern inline int iswcntrl(wint_t wc) {return (iswctype(wc,_CONTROL));}
extern inline int iswdigit(wint_t wc) {return (iswctype(wc,_DIGIT));}
extern inline int iswgraph(wint_t wc) {return (iswctype(wc,_PUNCT|_ALPHA|_DIGIT));}
extern inline int iswlower(wint_t wc) {return (iswctype(wc,_LOWER));}
extern inline int iswprint(wint_t wc) {return (iswctype(wc,_BLANK|_PUNCT|_ALPHA|_DIGIT));}
extern inline int iswpunct(wint_t wc) {return (iswctype(wc,_PUNCT));}
extern inline int iswspace(wint_t wc) {return (iswctype(wc,_SPACE));}
extern inline int iswupper(wint_t wc) {return (iswctype(wc,_UPPER));}
extern inline int iswxdigit(wint_t wc) {return (iswctype(wc,_HEX));}
extern inline int isleadbyte(int c) {return (_pctype[(unsigned char)(c)] & _LEADBYTE);}
@


1.2.10.1
log
@	* include/dos.h: Change  prefix "__imp_"  to "_imp__" for
	__GNUC__ without __DECLSPEC_SUPPORTED.
	* include/fnctl.h: Likewise.
	* include/math.h: Likewise.
	* include/stdio.h: Likewise.
	* include/stdlib.h: Likewise.
	* include/time.h: Likewise.
	* include/wctype.h: Likewise.
	* include/ctype.h: Likewise.
@
text
@a88 1
#ifdef __DECLSPEC_SUPPORTED
d90 6
a95 19
# ifdef __MSVCRT__
  __MINGW_IMPORT unsigned short* _pctype;
# else	/* CRTDLL */
  __MINGW_IMPORT unsigned short* _pctype_dll;
# define  _pctype _pctype_dll
# endif

#else		/* ! __DECLSPEC_SUPPORTED */
extern unsigned short** _imp___ctype;
#define _ctype (*_imp___ctype)
# ifdef __MSVCRT__
  extern unsigned short** _imp___pctype;
# define _pctype (*_imp___pctype)
# else	/* CRTDLL */
  extern unsigned short** _imp___pctype_dll;
# define _pctype (*_imp___pctype_dll)
# endif	/* CRTDLL */
#endif		/*  __DECLSPEC_SUPPORTED */

@


1.2.10.2
log
@	* include/wctype.h: Replace 'inline' with '__inline__'.
	* include/inttypes.h: Likewise.
@
text
@d113 13
a125 13
extern __inline__ int iswalnum(wint_t wc) {return (iswctype(wc,_ALPHA|_DIGIT));}
extern __inline__ int iswalpha(wint_t wc) {return (iswctype(wc,_ALPHA));}
extern __inline__ int iswascii(wint_t wc) {return (((unsigned)wc & 0x7F) ==0);}
extern __inline__ int iswcntrl(wint_t wc) {return (iswctype(wc,_CONTROL));}
extern __inline__ int iswdigit(wint_t wc) {return (iswctype(wc,_DIGIT));}
extern __inline__ int iswgraph(wint_t wc) {return (iswctype(wc,_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int iswlower(wint_t wc) {return (iswctype(wc,_LOWER));}
extern __inline__ int iswprint(wint_t wc) {return (iswctype(wc,_BLANK|_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int iswpunct(wint_t wc) {return (iswctype(wc,_PUNCT));}
extern __inline__ int iswspace(wint_t wc) {return (iswctype(wc,_SPACE));}
extern __inline__ int iswupper(wint_t wc) {return (iswctype(wc,_UPPER));}
extern __inline__ int iswxdigit(wint_t wc) {return (iswctype(wc,_HEX));}
extern __inline__ int isleadbyte(int c) {return (_pctype[(unsigned char)(c)] & _LEADBYTE);}
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
 *  DISCLAMED. This includes but is not limited to warranties of
d66 1
a66 1
/* Wide character equivalents */
d86 28
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
