head	1.11;
access;
symbols
	cygwin-1_7_17-release:1.10
	cygwin-64bit-branch:1.10.0.2
	cygwin-1_7_16-release:1.9
	cygwin-1_7_15-release:1.9
	cygwin-1_7_14_2-release:1.9
	cygwin-1_7_14-release:1.9
	cygwin-1_7_12-release:1.9
	cygwin-1_7_11-release:1.9
	cygwin-1_7_10-release:1.9
	cygwin-1_7_9-release:1.9
	cygwin-1_7_8-release:1.9
	cygwin-1_7_7-release:1.9
	cygwin-1_7_5-release:1.9
	cygwin-1_7_4-release:1.9
	cygwin-1_7_3-release:1.9
	cygwin-1_7_2-release:1.9
	cygwin-1_7_1-release:1.9
	cv-branch-2:1.9.0.2
	cr-0x5f1:1.6.0.6
	cv-branch:1.6.0.4
	cr-0x3b58:1.6.0.2
	cr-0x9e:1.5.0.4
	cr-0x9d:1.5.0.2
	corinna-01:1.4
	cr-0x9c:1.4.0.6
	cr-0x9b:1.4.0.4
	cr-0x99:1.4
	Z-emcb-cygwin_daemon:1.4.0.2
	w32api-2_2:1.4
	mingw-runtime-2_4:1.4
	mingw-std-ns-branch:1.3.0.6
	mingw-runtime-2_0:1.3
	mingwex:1.2.0.10
	cygnus_cvs_20020108_pre:1.2
	Z-cygwin_daemon_merge-new_HEAD:1.1
	Z-cygwin_daemon_merge_HEAD:1.1
	cygwin_daemon:1.1.0.8;
locks; strict;
comment	@ * @;


1.11
date	2012.11.07.16.52.17;	author cgf;	state dead;
branches;
next	1.10;

1.10
date	2012.07.30.14.22.28;	author earnie;	state Exp;
branches;
next	1.9;

1.9
date	2009.04.11.12.41.09;	author ironhead;	state Exp;
branches;
next	1.8;

1.8
date	2007.05.08.03.19.28;	author dannysmith;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.07.23.42.27;	author dannysmith;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.04.09.29.09;	author dannysmith;	state Exp;
branches;
next	1.5;

1.5
date	2004.01.17.07.41.54;	author dannysmith;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.11.02.21.56;	author dannysmith;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.13.10.20.43;	author dannysmith;	state Exp;
branches
	1.3.6.1;
next	1.2;

1.2
date	2001.12.05.15.01.05;	author earnie;	state Exp;
branches
	1.2.10.1;
next	1.1;

1.1
date	2001.01.26.18.52.31;	author earnie;	state Exp;
branches;
next	;

1.2.10.1
date	2002.03.30.03.00.42;	author dannysmith;	state Exp;
branches;
next	1.2.10.2;

1.2.10.2
date	2002.05.21.02.18.46;	author dannysmith;	state Exp;
branches;
next	;

1.3.6.1
date	2002.11.19.08.47.47;	author dannysmith;	state Exp;
branches;
next	;


desc
@@


1.11
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@/* ISO C9x  7.18  Integer types <stdint.h>
 * Based on ISO/IEC SC22/WG14 9899 Committee draft (SC22 N2794)
 *
 *  THIS SOFTWARE IS NOT COPYRIGHTED
 *
 *  Contributor: Danny Smith <danny_r_smith_2001@@yahoo.co.nz>
 *
 *  This source code is offered for use in the public domain. You may
 *  use, modify or distribute it freely.
 *
 *  This code is distributed in the hope that it will be useful but
 *  WITHOUT ANY WARRANTY. ALL WARRANTIES, EXPRESS OR IMPLIED ARE HEREBY
 *  DISCLAIMED. This includes but is not limited to warranties of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *  Date: 2000-12-02
 */


#ifndef _STDINT_H
#define _STDINT_H
#include <_mingw.h>
#define __need_wint_t
#define __need_wchar_t
#include <stddef.h>

/* 7.18.1.1  Exact-width integer types */
typedef signed char int8_t;
typedef unsigned char   uint8_t;
typedef short  int16_t;
typedef unsigned short  uint16_t;
typedef int  int32_t;
typedef unsigned   uint32_t;
typedef long long  int64_t;
typedef unsigned long long   uint64_t;

/* 7.18.1.2  Minimum-width integer types */
typedef signed char int_least8_t;
typedef unsigned char   uint_least8_t;
typedef short  int_least16_t;
typedef unsigned short  uint_least16_t;
typedef int  int_least32_t;
typedef unsigned   uint_least32_t;
typedef long long  int_least64_t;
typedef unsigned long long   uint_least64_t;

/*  7.18.1.3  Fastest minimum-width integer types 
 *  Not actually guaranteed to be fastest for all purposes
 *  Here we use the exact-width types for 8 and 16-bit ints. 
 */
typedef signed char int_fast8_t;
typedef unsigned char uint_fast8_t;
typedef short  int_fast16_t;
typedef unsigned short  uint_fast16_t;
typedef int  int_fast32_t;
typedef unsigned  int  uint_fast32_t;
typedef long long  int_fast64_t;
typedef unsigned long long   uint_fast64_t;

/* 7.18.1.4  Integer types capable of holding object pointers */

#ifndef _INTPTR_T_DEFINED
#define _INTPTR_T_DEFINED
#ifdef _WIN64
  typedef __int64 intptr_t;
#else
  typedef int intptr_t;
#endif
#endif

#ifndef _UINTPTR_T_DEFINED
#define _UINTPTR_T_DEFINED
#ifdef _WIN64
  typedef unsigned __int64 uintptr_t;
#else
  typedef unsigned int uintptr_t;
#endif
#endif

/* 7.18.1.5  Greatest-width integer types */
typedef long long  intmax_t;
typedef unsigned long long uintmax_t;

/* 7.18.2  Limits of specified-width integer types */
#if !defined ( __cplusplus) || defined (__STDC_LIMIT_MACROS)

/* 7.18.2.1  Limits of exact-width integer types */
#define INT8_MIN (-128) 
#define INT16_MIN (-32768)
#define INT32_MIN (-2147483647 - 1)
#define INT64_MIN  (-9223372036854775807LL - 1)

#define INT8_MAX 127
#define INT16_MAX 32767
#define INT32_MAX 2147483647
#define INT64_MAX 9223372036854775807LL

#define UINT8_MAX 0xff /* 255U */
#define UINT16_MAX 0xffff /* 65535U */
#define UINT32_MAX 0xffffffff  /* 4294967295U */
#define UINT64_MAX 0xffffffffffffffffULL /* 18446744073709551615ULL */

/* 7.18.2.2  Limits of minimum-width integer types */
#define INT_LEAST8_MIN INT8_MIN
#define INT_LEAST16_MIN INT16_MIN
#define INT_LEAST32_MIN INT32_MIN
#define INT_LEAST64_MIN INT64_MIN

#define INT_LEAST8_MAX INT8_MAX
#define INT_LEAST16_MAX INT16_MAX
#define INT_LEAST32_MAX INT32_MAX
#define INT_LEAST64_MAX INT64_MAX

#define UINT_LEAST8_MAX UINT8_MAX
#define UINT_LEAST16_MAX UINT16_MAX
#define UINT_LEAST32_MAX UINT32_MAX
#define UINT_LEAST64_MAX UINT64_MAX

/* 7.18.2.3  Limits of fastest minimum-width integer types */
#define INT_FAST8_MIN INT8_MIN
#define INT_FAST16_MIN INT16_MIN
#define INT_FAST32_MIN INT32_MIN
#define INT_FAST64_MIN INT64_MIN

#define INT_FAST8_MAX INT8_MAX
#define INT_FAST16_MAX INT16_MAX
#define INT_FAST32_MAX INT32_MAX
#define INT_FAST64_MAX INT64_MAX

#define UINT_FAST8_MAX UINT8_MAX
#define UINT_FAST16_MAX UINT16_MAX
#define UINT_FAST32_MAX UINT32_MAX
#define UINT_FAST64_MAX UINT64_MAX

/* 7.18.2.4  Limits of integer types capable of holding
    object pointers */
#ifdef _WIN64
#define INTPTR_MIN INT64_MIN
#define INTPTR_MAX INT64_MAX
#define UINTPTR_MAX UINT64_MAX
#else
#define INTPTR_MIN INT32_MIN
#define INTPTR_MAX INT32_MAX
#define UINTPTR_MAX UINT32_MAX
#endif

/* 7.18.2.5  Limits of greatest-width integer types */
#define INTMAX_MIN INT64_MIN
#define INTMAX_MAX INT64_MAX
#define UINTMAX_MAX UINT64_MAX

/* 7.18.3  Limits of other integer types */
#define PTRDIFF_MIN INTPTR_MIN
#define PTRDIFF_MAX INTPTR_MAX

#define SIG_ATOMIC_MIN INTPTR_MIN
#define SIG_ATOMIC_MAX INTPTR_MAX

#define SIZE_MAX UINTPTR_MAX

#ifndef WCHAR_MIN  /* also in wchar.h */ 
#define WCHAR_MIN 0
#define WCHAR_MAX 0xffff /* UINT16_MAX */
#endif

/*
 * wint_t is unsigned short for compatibility with MS runtime
 */
#define WINT_MIN 0
#define WINT_MAX 0xffff /* UINT16_MAX */

#endif /* !defined ( __cplusplus) || defined __STDC_LIMIT_MACROS */


/* 7.18.4  Macros for integer constants */
#if !defined ( __cplusplus) || defined (__STDC_CONSTANT_MACROS)

/* 7.18.4.1  Macros for minimum-width integer constants

    Accoding to Douglas Gwyn <gwyn@@arl.mil>:
	"This spec was changed in ISO/IEC 9899:1999 TC1; in ISO/IEC
	9899:1999 as initially published, the expansion was required
	to be an integer constant of precisely matching type, which
	is impossible to accomplish for the shorter types on most
	platforms, because C99 provides no standard way to designate
	an integer constant with width less than that of type int.
	TC1 changed this to require just an integer constant
	*expression* with *promoted* type."
*/

#define INT8_C(val) val
#define UINT8_C(val) val
#define INT16_C(val) val
#define UINT16_C(val) val

#define INT32_C(val) val
#define UINT32_C(val) val##U
#define INT64_C(val) val##LL
#define UINT64_C(val) val##ULL

/* 7.18.4.2  Macros for greatest-width integer constants */
#define INTMAX_C(val)  INT64_C(val)
#define UINTMAX_C(val) UINT64_C(val)

#endif  /* !defined ( __cplusplus) || defined __STDC_CONSTANT_MACROS */

#endif
@


1.10
log
@* include/stdint.h: Include _mingw.h for the definition of __int64 when _WIN64 is defined.
@
text
@@


1.9
log
@2009-04-11 Danny Smith <dannsymith@@users.sourceforge.net>

        * include/stdint.h (int_fast8_t): Specify as signed char.
        (INT8_C, UINT8_C, INT16_C, UINT16_C): Simplify: just allow promotion to int.
        (INT32_C, UINT32_C): Remove 'L' type specifier on constant.
@
text
@d22 1
@


1.8
log
@	* include/stdint.h (intptr_t): Fix typo.
	Thanks to Charles Wilson for report.
@
text
@d50 1
a50 1
typedef char int_fast8_t;
d190 4
a193 4
#define INT8_C(val) ((int8_t) + (val))
#define UINT8_C(val) ((uint8_t) + (val##U))
#define INT16_C(val) ((int16_t) + (val))
#define UINT16_C(val) ((uint16_t) + (val##U))
d195 2
a196 2
#define INT32_C(val) val##L
#define UINT32_C(val) val##UL
@


1.7
log
@	* include/stdint.h (intptr_t): Protect with _INTPTR_T_DEFINED.
	 Condition on _WIN64.
	(uintptr_t): Protect with _UINTPTR_T_DEFINED.  Condition on _WIN64.
	(INTPTR_MIN, INTPTR_MAX, UINTPTR_MAX): Condition on _WIN64.
	(PTRDIFF_MIN): Define as INTPTR_MIN.
	(PTRDIFF_MAX): Define as INTPTR_MAX.
	(SIG_ATOMIC_MIN): Define as INTPTR_MIN.
	(SIG_ATOMIC_MAX): Define as INTPTR_MAX.
@
text
@d64 1
a64 1
  typedef __int64 uintptr_t;
d66 1
a66 1
  typedef int uintptr_t;
@


1.6
log
@	* include/wchar.h (WCHAR_MAX): Define as 0xffff, so preprocessor
	#if (WCHAR_MAX <= WCHAR_MIN) is false.
	* include/stdint.h (WCHAR_MAX): Likwise.
	(WINT_MAX): Likewise.
@
text
@d60 18
a77 2
typedef int intptr_t;
typedef unsigned uintptr_t;
d81 1
a81 1
typedef unsigned long long   uintmax_t;
d135 6
a140 1
    object pointers */ 
d144 1
d152 2
a153 2
#define PTRDIFF_MIN INT32_MIN
#define PTRDIFF_MAX INT32_MAX
d155 2
a156 2
#define SIG_ATOMIC_MIN INT32_MIN
#define SIG_ATOMIC_MAX INT32_MAX
d158 1
a158 1
#define SIZE_MAX UINT32_MAX
@


1.5
log
@	* include/stdint.h  Fix __STDC_CONSTANT_MACROS for 8 and 16 bit
	types. (Thanks to John Maddock for report.)
@
text
@d140 1
a140 1
#define WCHAR_MAX ((wchar_t)-1) /* UINT16_MAX */
d147 1
a147 1
#define WINT_MAX ((wint_t)-1) /* UINT16_MAX */
@


1.4
log
@	* include/stdint.h (INT64_C, UINT64_C ): Append suffix to let
	macros work with C89.
	(INTMAX_C, UINTMAX_C): Likewise.
@
text
@d166 1
d168 4
a171 2
	The trick used here is from Clive D W Feather.
*/
d173 2
a174 5
#define INT8_C(val) (INT_LEAST8_MAX-INT_LEAST8_MAX+(val))
#define INT16_C(val) (INT_LEAST16_MAX-INT_LEAST16_MAX+(val))
#define INT32_C(val) (INT_LEAST32_MAX-INT_LEAST32_MAX+(val))
/*  The 'trick' doesn't work in C89 for long long because, without
    suffix, (val) will be evaluated as int, not intmax_t */ 
a175 4

#define UINT8_C(val) (UINT_LEAST8_MAX-UINT_LEAST8_MAX+(val))
#define UINT16_C(val) (UINT_LEAST16_MAX-UINT_LEAST16_MAX+(val))
#define UINT32_C(val) (UINT_LEAST32_MAX-UINT_LEAST32_MAX+(val))
d179 2
a180 2
#define INTMAX_C(val) val##LL
#define UINTMAX_C(val) val##ULL
@


1.3
log
@	* include/_mingw.h: Increment version to 2.0.
	* Makefile.in: Ditto.
	Merge in mingwex branch.
@
text
@d173 3
a175 1
#define INT64_C(val) (INT_LEAST64_MAX-INT_LEAST64_MAX+(val))
d180 1
a180 1
#define UINT64_C(val) (UINT_LEAST64_MAX-UINT_LEAST64_MAX+(val))
d183 2
a184 2
#define INTMAX_C(val) (INTMAX_MAX-INTMAX_MAX+(val))
#define UINTMAX_C(val) (UINTMAX_MAX-UINTMAX_MAX+(val))
@


1.3.6.1
log
@	Merge from mingw trunk (changes since 2002-10-04).
@
text
@d173 1
a173 3
/*  The 'trick' doesn't work in C89 for long long because, without
    suffix, (val) will be evaluated as int, not intmax_t */ 
#define INT64_C(val) val##LL
d178 1
a178 1
#define UINT64_C(val) val##ULL
d181 2
a182 2
#define INTMAX_C(val) val##LL
#define UINTMAX_C(val) val##ULL
@


1.2
log
@Merge MinGW CVS differences
@
text
@d22 3
d144 1
a144 2
 * wint_t is unsigned int in __MINGW32__,
 * but unsigned short in MS runtime
d147 1
a147 1
#define WINT_MAX UINT32_MAX
d186 1
a186 1
#endif@


1.2.10.1
log
@	* include/stdint.h: Add missing newline at eof.
	* include/stdio.h (_snwprintf): Correct spelling.
	(_vsnwprintf): Likewise.
	(snprintf): Add prototype.
	(vsnprintf): Add prototype and inline definition.
	(snwprintf): Add prototype.
	(vsnwprintf): Add prototype and inline definition.
	* include/wchar.h (_snwprintf): Correct spelling.
	(_vsnwprintf): Likewise.
	(snwprintf): Add prototype.
	(vsnwprintf): Add prototype and inline definition.
	* mingwex/Makefile.in: Add snprintf.o, snwprintf.o
	to libmingwex.a.
	* mingwex/snprintf.c: New file.
	* mingwex/snwprintf.c: New file.
@
text
@d184 1
a184 1
#endif
@


1.2.10.2
log
@	* include/stdint.h: Include stddef.h to get
	wchar_t and wint_t.
	(WINT_MAX): Define to ((wint_t)-1).
@
text
@a21 3
#define __need_wint_t
#define __need_wchar_t
#include <stddef.h>
d141 2
a142 1
 * wint_t is unsigned short for compatibility with MS runtime
d145 1
a145 1
#define WINT_MAX ((wint_t)-1) /* UINT16_MAX */
@


1.1
log
@
	* include/stdint.h: New file.
@
text
@d13 1
a13 1
 *  DISCLAMED. This includes but is not limited to warranties of
@

