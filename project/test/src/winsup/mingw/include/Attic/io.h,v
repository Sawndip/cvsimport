head	1.26;
access;
symbols
	cygwin-1_7_17-release:1.25
	cygwin-64bit-branch:1.25.0.2
	cygwin-1_7_16-release:1.25
	cygwin-1_7_15-release:1.25
	cygwin-1_7_14_2-release:1.25
	cygwin-1_7_14-release:1.25
	cygwin-1_7_12-release:1.25
	cygwin-1_7_11-release:1.25
	cygwin-1_7_10-release:1.25
	cygwin-1_7_9-release:1.24
	cygwin-1_7_8-release:1.24
	cygwin-1_7_7-release:1.24
	cygwin-1_7_5-release:1.23
	cygwin-1_7_4-release:1.23
	cygwin-1_7_3-release:1.23
	cygwin-1_7_2-release:1.23
	cygwin-1_7_1-release:1.22
	cv-branch-2:1.21.0.2
	cr-0x5f1:1.13.0.6
	cv-branch:1.13.0.4
	cr-0x3b58:1.13.0.2
	cr-0x9e:1.8.0.4
	cr-0x9d:1.8.0.2
	corinna-01:1.8
	cr-0x9c:1.7.0.6
	cr-0x9b:1.7.0.4
	cr-0x99:1.7
	Z-emcb-cygwin_daemon:1.7.0.2
	w32api-2_2:1.6
	mingw-runtime-2_4:1.6
	mingw-std-ns-branch:1.5.0.6
	mingw-runtime-2_0:1.4
	mingwex:1.4.0.10
	cygnus_cvs_20020108_pre:1.4
	Z-cygwin_daemon_merge-new_HEAD:1.2
	Z-cygwin_daemon_merge_HEAD:1.2
	cygwin_daemon:1.2.0.8;
locks; strict;
comment	@ * @;
expand	@o@;


1.26
date	2012.11.07.16.52.16;	author cgf;	state dead;
branches;
next	1.25;

1.25
date	2011.12.01.00.24.35;	author ironhead;	state Exp;
branches;
next	1.24;

1.24
date	2010.07.23.02.16.28;	author ironhead;	state Exp;
branches;
next	1.23;

1.23
date	2010.02.17.02.41.06;	author ironhead;	state Exp;
branches;
next	1.22;

1.22
date	2009.11.14.00.54.58;	author ironhead;	state Exp;
branches;
next	1.21;

1.21
date	2007.10.03.18.55.56;	author ironhead;	state Exp;
branches;
next	1.20;

1.20
date	2007.06.23.07.34.15;	author dannysmith;	state Exp;
branches;
next	1.19;

1.19
date	2007.06.14.03.05.08;	author dannysmith;	state Exp;
branches;
next	1.18;

1.18
date	2007.06.13.07.43.58;	author dannysmith;	state Exp;
branches;
next	1.17;

1.17
date	2007.03.05.08.25.32;	author dannysmith;	state Exp;
branches;
next	1.16;

1.16
date	2007.02.08.08.15.32;	author dannysmith;	state Exp;
branches;
next	1.15;

1.15
date	2007.01.24.08.27.12;	author dannysmith;	state Exp;
branches;
next	1.14;

1.14
date	2007.01.19.03.21.09;	author dannysmith;	state Exp;
branches;
next	1.13;

1.13
date	2004.06.30.04.51.17;	author dannysmith;	state Exp;
branches;
next	1.12;

1.12
date	2004.04.20.22.49.32;	author earnie;	state Exp;
branches;
next	1.11;

1.11
date	2004.03.30.21.49.12;	author dannysmith;	state Exp;
branches;
next	1.10;

1.10
date	2004.03.26.11.30.23;	author dannysmith;	state Exp;
branches;
next	1.9;

1.9
date	2004.03.11.09.41.08;	author dannysmith;	state Exp;
branches;
next	1.8;

1.8
date	2003.09.24.08.26.23;	author dannysmith;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.10.21.13.34;	author dannysmith;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.03.00.49.20;	author dannysmith;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.18.04.13.18;	author dannysmith;	state Exp;
branches
	1.5.6.1;
next	1.4;

1.4
date	2001.12.05.15.01.05;	author earnie;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.01.19.51.48;	author earnie;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.21.02.50.03;	author earnie;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;

1.5.6.1
date	2002.09.24.08.02.21;	author dannysmith;	state Exp;
branches;
next	1.5.6.2;

1.5.6.2
date	2002.09.25.01.08.26;	author dannysmith;	state Exp;
branches;
next	1.5.6.3;

1.5.6.3
date	2002.09.25.23.50.30;	author dannysmith;	state Exp;
branches;
next	1.5.6.4;

1.5.6.4
date	2002.09.28.01.18.16;	author dannysmith;	state Exp;
branches;
next	1.5.6.5;

1.5.6.5
date	2002.10.03.23.42.00;	author dannysmith;	state Exp;
branches;
next	1.5.6.6;

1.5.6.6
date	2003.03.31.22.32.19;	author dannysmith;	state Exp;
branches;
next	;


desc
@@


1.26
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@/*
 * io.h
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is a part of the mingw-runtime package.
 * No warranty is given; refer to the file DISCLAIMER within the package.
 *
 * System level I/O functions and types.
 *
 */
#ifndef	_IO_H_
#define	_IO_H_

/* All the headers include this file. */
#include <_mingw.h>

/* MSVC's io.h contains the stuff from dir.h, so I will too.
 * NOTE: This also defines off_t, the file offset type, through
 *       an inclusion of sys/types.h */

#include <sys/types.h>	/* To get time_t.  */

/*
 * Attributes of files as returned by _findfirst et al.
 */
#define	_A_NORMAL	0x00000000
#define	_A_RDONLY	0x00000001
#define	_A_HIDDEN	0x00000002
#define	_A_SYSTEM	0x00000004
#define	_A_VOLID	0x00000008
#define	_A_SUBDIR	0x00000010
#define	_A_ARCH		0x00000020


#ifndef RC_INVOKED

#ifndef _INTPTR_T_DEFINED
#define _INTPTR_T_DEFINED
#ifdef _WIN64
  typedef __int64 intptr_t;
#else
  typedef int intptr_t;
#endif
#endif

#ifndef	_FSIZE_T_DEFINED
typedef	unsigned long	_fsize_t;
#define _FSIZE_T_DEFINED
#endif

/*
 * The maximum length of a file name. You should use GetVolumeInformation
 * instead of this constant. But hey, this works.
 * Also defined in stdio.h.
 */
#ifndef FILENAME_MAX
#define	FILENAME_MAX	(260)
#endif

/*
 * The following structure is filled in by _findfirst or _findnext when
 * they succeed in finding a match.
 */
struct _finddata_t
{
	unsigned	attrib;		/* Attributes, see constants above. */
	time_t		time_create;
	time_t		time_access;	/* always midnight local time */
	time_t		time_write;
	_fsize_t	size;
	char		name[FILENAME_MAX];	/* may include spaces. */
};

struct _finddatai64_t {
    unsigned    attrib;
    time_t      time_create;
    time_t      time_access;
    time_t      time_write;
    __int64     size;
    char        name[FILENAME_MAX];
};

#if __MSVCRT_VERSION__ >= 0x0601
struct __finddata64_t {
        unsigned    attrib;
        __time64_t  time_create;
        __time64_t  time_access;
        __time64_t  time_write;
/* 8 bytes are returned so it can't be _fsize_t */
        __int64    size;
         char       name[FILENAME_MAX];
};
#endif

#if __MSVCRT_VERSION__ >= 0x0800
struct _finddata32_t {
	unsigned	attrib;
	__time32_t	time_create;
	__time32_t	time_access;
	__time32_t	time_write;
	__int32		size;
	char		name[FILENAME_MAX];
};

struct _finddata32i64_t {
	unsigned	attrib;
	__time32_t	time_create;
	__time32_t	time_access;
	__time32_t	time_write;
	__int64		size;
	char		name[FILENAME_MAX];
};

struct _finddata64i32_t {
	unsigned	attrib;
	__time64_t	time_create;
	__time64_t	time_access;
	__time64_t	time_write;
	__int32		size;
	char		name[FILENAME_MAX];
};
#endif /* __MSVCRT_VERSION__ >= 0x0800 */


#ifndef _WFINDDATA_T_DEFINED
struct _wfinddata_t {
    	unsigned	attrib;
    	time_t		time_create;	/* -1 for FAT file systems */
    	time_t		time_access;	/* -1 for FAT file systems */
    	time_t		time_write;
    	_fsize_t	size;
    	wchar_t		name[FILENAME_MAX];	/* may include spaces. */
};

struct _wfinddatai64_t {
    unsigned    attrib;
    time_t      time_create;
    time_t      time_access;
    time_t      time_write;
    __int64     size;
    wchar_t     name[FILENAME_MAX];
};

#if __MSVCRT_VERSION__ >= 0x0601
struct __wfinddata64_t {
        unsigned    attrib;
        __time64_t  time_create;
        __time64_t  time_access;
        __time64_t  time_write;
/* 8 bytes are returned so it can't be _fsize_t */
        __int64    size;
        wchar_t     name[FILENAME_MAX];
};
#endif

#if __MSVCRT_VERSION__ >= 0x0800
struct __wfinddata32_t {
	unsigned	attrib;
	__time32_t	time_create;
	__time32_t	time_access;
	__time32_t	time_write;
	__int32		size;
	wchar_t		name[FILENAME_MAX];
};

struct _wfinddata32i64_t {
	unsigned	attrib;
	__time32_t	time_create;
	__time32_t	time_access;
	__time32_t	time_write;
	__int64		size;
	wchar_t		name[FILENAME_MAX];
};

struct _wfinddata64i32_t {
	unsigned	attrib;
	__time64_t	time_create;
	__time64_t	time_access;
	__time64_t	time_write;
	__int32		size;
	wchar_t		name[FILENAME_MAX];
};
#endif /* __MSVCRT_VERSION__ >= 0x0800 */


#define _WFINDDATA_T_DEFINED
#endif

#ifdef	__cplusplus
extern "C" {
#endif

/*
 * Functions for searching for files. _findfirst returns -1 if no match
 * is found. Otherwise it returns a handle to be used in _findnext and
 * _findclose calls. _findnext also returns -1 if no match could be found,
 * and 0 if a match was found. Call _findclose when you are finished.
 */
#if __MSVCRT_VERSION__ >= 0x0800
/*
intptr_t _findfirst      (const char *filespec,struct _finddata_t      *fileinfo);
intptr_t _findfirst32    (const char *filespec,struct _finddata32_t    *fileinfo);
intptr_t _findfirst64    (const char *filespec,struct __finddata64_t   *fileinfo);
intptr_t _findfirsti64   (const char *filespec,struct _finddatai64_t   *fileinfo);
intptr_t _findfirst32i64 (const char *filespec,struct _finddata32i64_t *fileinfo);
intptr_t _findfirst64i32 (const char *filespec,struct _finddata64i32_t *fileinfo);

intptr_t _wfindfirst     (const wchar_t *filespec,struct _wfinddata_t *fileinfo);
intptr_t _wfindfirst32   (const wchar_t *filespec,struct __wfinddata32_t *fileinfo);
intptr_t _wfindfirst64   (const wchar_t *filespec, struct __wfinddata64_t   *fileinfo);
intptr_t _wfindfirsti64  (const wchar_t *filespec, struct _wfinddatai64_t   *fileinfo);
intptr_t _wfindfirst32i64(const wchar_t *filespec, struct _wfinddata32i64_t *fileinfo);
intptr_t _wfindfirst64i32(const wchar_t *filespec, struct _wfinddata64i32_t *fileinfo);

Time Type and File Length Type Variations of _findfirst:
Functions		_USE_32BIT_TIME_T defined?	Time type	File length type
_findfirst,		Not defined			64-bit		32-bit
_wfindfirst
_findfirst,		Defined				32-bit		32-bit
_wfindfirst

_findfirst32,		Not affected by the macro	32-bit		32-bit
_wfindfirst32		definition

_findfirst64,		Not affected by the macro	64-bit		64-bit
_wfindfirst64		definition

_findfirsti64,		Not defined			64-bit		64-bit
_wfindfirsti64
_findfirsti64,		Defined				32-bit		64-bit
_wfindfirsti64

_findfirst32i64,	Not affected by the macro	32-bit		64-bit
_wfindfirst32i64	definition

_findfirst64i32,	Not affected by the macro	64-bit		32-bit
_wfindfirst64i32	definition
*/
#endif
#if __MSVCRT_VERSION__ < 0x0800
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _findfirst (const char*, struct _finddata_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW _findnext (intptr_t, struct _finddata_t*);
#endif /* __MSVCRT_VERSION__ < 0x0800 */
_CRTIMP int __cdecl __MINGW_NOTHROW _findclose (intptr_t);
#if __MSVCRT_VERSION__ >= 0x0800
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _findfirst32 (const char*, struct _finddata32_t*);
_CRTIMP int  __cdecl __MINGW_NOTHROW	_findnext32 (intptr_t, struct _finddata32_t*);
#endif /* __MSVCRT_VERSION__ >= 0x0800 */

_CRTIMP int __cdecl __MINGW_NOTHROW _chdir (const char*);
_CRTIMP char* __cdecl __MINGW_NOTHROW _getcwd (char*, int);
_CRTIMP int __cdecl __MINGW_NOTHROW _mkdir (const char*);
_CRTIMP char* __cdecl __MINGW_NOTHROW _mktemp (char*);
_CRTIMP int __cdecl __MINGW_NOTHROW _rmdir (const char*);
_CRTIMP int __cdecl __MINGW_NOTHROW _chmod (const char*, int);
#ifdef __MSVCRT__
_CRTIMP __int64 __cdecl __MINGW_NOTHROW _filelengthi64(int);
#if __MSVCRT_VERSION__ < 0x0800
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _findfirsti64(const char*, struct _finddatai64_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW _findnexti64(intptr_t, struct _finddatai64_t*);
#else
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _findfirst32i64 (const char*, struct _finddata32i64_t*);
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _findfirst64i32 (const char*, struct _finddata64i32_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_findnext32i64 (intptr_t, struct _finddata32i64_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_findnext64i32 (intptr_t, struct _finddata64i32_t*);
#endif /* __MSVCRT_VERSION__ < 0x0800 */
_CRTIMP __int64 __cdecl __MINGW_NOTHROW _lseeki64(int, __int64, int);
_CRTIMP __int64 __cdecl __MINGW_NOTHROW _telli64(int);
/* These require newer versions of msvcrt.dll (6.1 or higher). */ 
#if __MSVCRT_VERSION__ >= 0x0601
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _findfirst64(const char*, struct __finddata64_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW _findnext64(intptr_t, struct __finddata64_t*);
#endif /* __MSVCRT_VERSION__ >= 0x0601 */
#if __MSVCRT_VERSION__ >= 0x0800
#ifndef _USE_32BIT_TIME_T
_CRTALIAS intptr_t __cdecl __MINGW_NOTHROW _findfirst (const char* _v1, struct _finddata_t* _v2)	{ return(_findfirst64i32 (_v1,(struct _finddata64i32_t*)_v2)); }
_CRTALIAS int __cdecl __MINGW_NOTHROW	_findnext (intptr_t _v1, struct _finddata_t* _v2)		{ return(_findnext64i32  (_v1,(struct _finddata64i32_t*)_v2)); }
_CRTALIAS intptr_t __cdecl __MINGW_NOTHROW _findfirsti64 (const char* _v1, struct _finddatai64_t* _v2)	{ return(_findfirst64 (_v1,(struct __finddata64_t*)_v2)); }
_CRTALIAS int  __cdecl __MINGW_NOTHROW	_findnexti64 (intptr_t _v1, struct _finddatai64_t* _v2)		{ return(_findnext64  (_v1,(struct __finddata64_t*)_v2)); }
#else
_CRTALIAS intptr_t __cdecl __MINGW_NOTHROW _findfirst (const char* _v1, struct _finddata_t* _v2)	{ return(_findfirst32 (_v1,(struct _finddata32_t*)_v2)); }
_CRTALIAS int __cdecl __MINGW_NOTHROW	_findnext (intptr_t _v1, struct _finddata_t* _v2)		{ return(_findnext32  (_v1,(struct _finddata32_t*)_v2)); }
_CRTALIAS intptr_t __cdecl __MINGW_NOTHROW _findfirsti64 (const char* _v1, struct _finddatai64_t* _v2)	{ return(_findfirst32i64 (_v1,(struct _finddata32i64_t*)_v2)); }
_CRTALIAS int __cdecl __MINGW_NOTHROW	_findnexti64 (intptr_t _v1, struct _finddatai64_t* _v2)		{ return(_findnext32i64  (_v1,(struct _finddata32i64_t*)_v2)); }
#endif /* !_USE_32BIT_TIME_T */
#endif /* __MSVCRT_VERSION__ >= 0x0800 */
#ifndef __NO_MINGW_LFS
__CRT_INLINE off64_t lseek64 (int, off64_t, int);
__CRT_INLINE off64_t lseek64 (int fd, off64_t offset, int whence)
{
  return _lseeki64(fd, (__int64) offset, whence);
}
#endif

#endif /* __MSVCRT__ */

#ifndef _NO_OLDNAMES

#ifndef _UWIN
_CRTIMP int __cdecl __MINGW_NOTHROW chdir (const char*);
_CRTIMP char* __cdecl __MINGW_NOTHROW getcwd (char*, int);
_CRTIMP int __cdecl __MINGW_NOTHROW mkdir (const char*);
_CRTIMP char* __cdecl __MINGW_NOTHROW mktemp (char*);
_CRTIMP int __cdecl __MINGW_NOTHROW rmdir (const char*);
_CRTIMP int __cdecl __MINGW_NOTHROW chmod (const char*, int);
#endif /* _UWIN */

#endif /* Not _NO_OLDNAMES */

#ifdef	__cplusplus
}
#endif

#endif	/* Not RC_INVOKED */

/* TODO: Maximum number of open handles has not been tested, I just set
 * it the same as FOPEN_MAX. */
#define	HANDLE_MAX	FOPEN_MAX

/* Some defines for _access nAccessMode (MS doesn't define them, but
 * it doesn't seem to hurt to add them). */
#define	F_OK	0	/* Check for file existence */
/* Well maybe it does hurt.  On newer versions of MSVCRT, an access mode
   of 1 causes invalid parameter error. */   
#define	X_OK	1	/* MS access() doesn't check for execute permission. */
#define	W_OK	2	/* Check for write permission */
#define	R_OK	4	/* Check for read permission */

#ifndef RC_INVOKED

#ifdef	__cplusplus
extern "C" {
#endif

_CRTIMP int __cdecl __MINGW_NOTHROW _access (const char*, int);
_CRTIMP int __cdecl __MINGW_NOTHROW _chsize (int, long);
_CRTIMP int __cdecl __MINGW_NOTHROW _close (int);
_CRTIMP int __cdecl __MINGW_NOTHROW _commit(int);

/* NOTE: The only significant bit in unPermissions appears to be bit 7 (0x80),
 *       the "owner write permission" bit (on FAT). */
_CRTIMP int __cdecl __MINGW_NOTHROW _creat (const char*, int);

_CRTIMP int __cdecl __MINGW_NOTHROW _dup (int);
_CRTIMP int __cdecl __MINGW_NOTHROW _dup2 (int, int);
_CRTIMP long __cdecl __MINGW_NOTHROW _filelength (int);
_CRTIMP long __cdecl __MINGW_NOTHROW _get_osfhandle (int);
_CRTIMP int __cdecl __MINGW_NOTHROW _isatty (int);

/* In a very odd turn of events this function is excluded from those
 * files which define _STREAM_COMPAT. This is required in order to
 * build GNU libio because of a conflict with _eof in streambuf.h
 * line 107. Actually I might just be able to change the name of
 * the enum member in streambuf.h... we'll see. TODO */
#ifndef	_STREAM_COMPAT
_CRTIMP int __cdecl __MINGW_NOTHROW _eof (int);
#endif

/* LK_... locking commands defined in sys/locking.h. */
_CRTIMP int __cdecl __MINGW_NOTHROW _locking (int, int, long);

_CRTIMP long __cdecl __MINGW_NOTHROW _lseek (int, long, int);

/* Optional third argument is unsigned unPermissions. */
_CRTIMP int __cdecl __MINGW_NOTHROW _open (const char*, int, ...);

_CRTIMP int __cdecl __MINGW_NOTHROW _open_osfhandle (intptr_t, int);
_CRTIMP int __cdecl __MINGW_NOTHROW _pipe (int *, unsigned int, int);
_CRTIMP int __cdecl __MINGW_NOTHROW _read (int, void*, unsigned int);
_CRTIMP int __cdecl __MINGW_NOTHROW _setmode (int, int);
/* MS puts remove & rename (but not wide versions) in io.h as well
   as in stdio.h. */
_CRTIMP int __cdecl __MINGW_NOTHROW	remove (const char*);
_CRTIMP int __cdecl __MINGW_NOTHROW	rename (const char*, const char*);

/* SH_... flags for nShFlags defined in share.h
 * Optional fourth argument is unsigned unPermissions */
_CRTIMP int __cdecl __MINGW_NOTHROW _sopen (const char*, int, int, ...);

_CRTIMP long __cdecl __MINGW_NOTHROW _tell (int);
/* Should umask be in sys/stat.h and/or sys/types.h instead? */
_CRTIMP int __cdecl __MINGW_NOTHROW _umask (int);
_CRTIMP int __cdecl __MINGW_NOTHROW _unlink (const char*);
_CRTIMP int __cdecl __MINGW_NOTHROW _write (int, const void*, unsigned int);

/* Wide character versions. Also declared in wchar.h. */
/* Not in crtdll.dll */
#if !defined (_WIO_DEFINED)
#if defined (__MSVCRT__)
_CRTIMP int __cdecl __MINGW_NOTHROW _waccess(const wchar_t*, int);
_CRTIMP int __cdecl __MINGW_NOTHROW _wchmod(const wchar_t*, int);
_CRTIMP int __cdecl __MINGW_NOTHROW _wcreat(const wchar_t*, int);
#if __MSVCRT_VERSION__ < 0x0800
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wfindfirst(const wchar_t*, struct _wfinddata_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW _wfindnext(intptr_t, struct _wfinddata_t *);
#else
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wfindfirst32 (const wchar_t*, struct __wfinddata32_t*);
_CRTIMP int  __cdecl __MINGW_NOTHROW	_wfindnext32 (intptr_t, struct __wfinddata32_t*);
#endif /* __MSVCRT_VERSION__ < 0x0800 */
_CRTIMP int __cdecl __MINGW_NOTHROW _wunlink(const wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW _wopen(const wchar_t*, int, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW _wsopen(const wchar_t*, int, int, ...);
_CRTIMP wchar_t * __cdecl __MINGW_NOTHROW _wmktemp(wchar_t*);
#if __MSVCRT_VERSION__ < 0x0800
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wfindfirsti64(const wchar_t*, struct _wfinddatai64_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW _wfindnexti64(intptr_t, struct _wfinddatai64_t*);
#else
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wfindfirst32i64 (const wchar_t*, struct _wfinddata32i64_t*);
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wfindfirst64i32 (const wchar_t*, struct _wfinddata64i32_t*);
_CRTIMP int  __cdecl __MINGW_NOTHROW	_wfindnext32i64 (intptr_t, struct _wfinddata32i64_t*);
_CRTIMP int  __cdecl __MINGW_NOTHROW	_wfindnext64i32 (intptr_t, struct _wfinddata64i32_t*);
#endif /* __MSVCRT_VERSION__ < 0x0800 */
#if __MSVCRT_VERSION__ >= 0x0601
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wfindfirst64(const wchar_t*, struct __wfinddata64_t*); 
_CRTIMP int __cdecl __MINGW_NOTHROW _wfindnext64(intptr_t, struct __wfinddata64_t*);
#endif
#if __MSVCRT_VERSION__ >= 0x0800
#ifndef _USE_32BIT_TIME_T
_CRTALIAS intptr_t __cdecl __MINGW_NOTHROW _wfindfirst (const wchar_t* _v1, struct _wfinddata_t* _v2)	 { return(_wfindfirst64i32 (_v1,(struct _wfinddata64i32_t*)_v2)); }
_CRTALIAS int  __cdecl __MINGW_NOTHROW	_wfindnext (intptr_t _v1, struct _wfinddata_t* _v2)		 { return(_wfindnext64i32  (_v1,(struct _wfinddata64i32_t*)_v2)); }
_CRTALIAS intptr_t __cdecl __MINGW_NOTHROW _wfindfirsti64 (const wchar_t* _v1, struct _wfinddatai64_t* _v2) { return(_wfindfirst64 (_v1,(struct __wfinddata64_t*)_v2)); }
_CRTALIAS int  __cdecl __MINGW_NOTHROW	_wfindnexti64 (intptr_t _v1, struct _wfinddatai64_t* _v2)	 { return(_wfindnext64  (_v1,(struct __wfinddata64_t*)_v2)); }
#else
_CRTALIAS intptr_t __cdecl __MINGW_NOTHROW _wfindfirst (const wchar_t* _v1, struct _wfinddata_t* _v2)	 { return(_wfindfirst32 (_v1,(struct __wfinddata32_t*)_v2)); }
_CRTALIAS int  __cdecl __MINGW_NOTHROW	_wfindnext (intptr_t _v1, struct _wfinddata_t* _v2)		 { return(_wfindnext32  (_v1,(struct __wfinddata32_t*)_v2)); }
_CRTALIAS intptr_t __cdecl __MINGW_NOTHROW _wfindfirsti64 (const wchar_t* _v1, struct _wfinddatai64_t* _v2) { return(_wfindfirst32i64 (_v1,(struct _wfinddata32i64_t*)_v2)); }
_CRTALIAS int  __cdecl __MINGW_NOTHROW	_wfindnexti64 (intptr_t _v1, struct _wfinddatai64_t* _v2)	 { return(_wfindnext32i64  (_v1,(struct _wfinddata32i64_t*)_v2)); }
#endif /* !_USE_32BIT_TIME_T */
#endif /* __MSVCRT_VERSION__ >= 0x0800 */
#endif /* defined (__MSVCRT__) */
#define _WIO_DEFINED
#endif /* _WIO_DEFINED */

#ifndef	_NO_OLDNAMES
/*
 * Non-underscored versions of non-ANSI functions to improve portability.
 * These functions live in libmoldname.a.
 */

#ifndef _UWIN
_CRTIMP int __cdecl __MINGW_NOTHROW access (const char*, int);
_CRTIMP int __cdecl __MINGW_NOTHROW chsize (int, long );
_CRTIMP int __cdecl __MINGW_NOTHROW close (int);
_CRTIMP int __cdecl __MINGW_NOTHROW creat (const char*, int);
_CRTIMP int __cdecl __MINGW_NOTHROW dup (int);
_CRTIMP int __cdecl __MINGW_NOTHROW dup2 (int, int);
_CRTIMP int __cdecl __MINGW_NOTHROW eof (int);
_CRTIMP long __cdecl __MINGW_NOTHROW filelength (int);
_CRTIMP int __cdecl __MINGW_NOTHROW isatty (int);
_CRTIMP long __cdecl __MINGW_NOTHROW lseek (int, long, int);
_CRTIMP int __cdecl __MINGW_NOTHROW open (const char*, int, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW read (int, void*, unsigned int);
_CRTIMP int __cdecl __MINGW_NOTHROW setmode (int, int);
_CRTIMP int __cdecl __MINGW_NOTHROW sopen (const char*, int, int, ...);
_CRTIMP long __cdecl __MINGW_NOTHROW tell (int);
_CRTIMP int __cdecl __MINGW_NOTHROW umask (int);
_CRTIMP int __cdecl __MINGW_NOTHROW unlink (const char*);
_CRTIMP int __cdecl __MINGW_NOTHROW write (int, const void*, unsigned int);
#endif /* _UWIN */

#ifdef __USE_MINGW_ACCESS
/*  Old versions of MSVCRT access() just ignored X_OK, while the version
    shipped with Vista, returns an error code.  This will restore the
    old behaviour  */
static inline int __mingw_access (const char* __fname, int __mode)
  { return  _access (__fname, __mode & ~X_OK); }
#define access(__f,__m)  __mingw_access (__f, __m)
#endif

/* Wide character versions. Also declared in wchar.h. */
/* Where do these live? Not in libmoldname.a nor in libmsvcrt.a */
#if 0
int 		waccess(const wchar_t *, int);
int 		wchmod(const wchar_t *, int);
int 		wcreat(const wchar_t *, int);
intptr_t	wfindfirst(wchar_t *, struct _wfinddata_t *);
int 		wfindnext(intptr_t, struct _wfinddata_t *);
int 		wunlink(const wchar_t *);
int 		wrename(const wchar_t *, const wchar_t *);
int 		wopen(const wchar_t *, int, ...);
int 		wsopen(const wchar_t *, int, int, ...);
wchar_t * 	wmktemp(wchar_t *);
#endif

#endif	/* Not _NO_OLDNAMES */

#ifdef	__cplusplus
}
#endif

#endif	/* Not RC_INVOKED */

#endif	/* _IO_H_ not defined */
@


1.25
log
@2011-11-30  Ozkan Sezer  <sezero@@users.sourceforge.net>

        * include/io.h (_wfindfirst, _wfindnext, _wfindfirst32, _wfindnext32,
        _wfindfirsti64, _wfindnexti64, _wfindfirst32i64, _wfindfirst64i32,
        _wfindnext32i64, _wfindnext64i32, _wfindnext64): Update to use intptr_t.
@
text
@@


1.24
log
@2010-07-22  Ozkan Sezer  <sezero@@users.sourceforge.net>

        * include/io.h (_findfirst, _findnext, _findclose, _findfirst32,
        _findnext32, _findfirsti64, _findnexti64, _findfirst32i64, _findfirst64i32,
        _findnext32i64, _findnext64i32, _findnext64, _findfirst, _findnext,
        _findfirsti64, _findnexti64, _findfirst, _findnext, _findfirsti64,
        _findnexti64): Correct definition.
@
text
@a197 1
/*  FIXME: Should these all use intptr_t, as per recent MSDN docs?  */
d393 2
a394 2
_CRTIMP long __cdecl __MINGW_NOTHROW _wfindfirst(const wchar_t*, struct _wfinddata_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW _wfindnext(long, struct _wfinddata_t *);
d396 2
a397 2
_CRTIMP long __cdecl __MINGW_NOTHROW	_wfindfirst32 (const wchar_t*, struct __wfinddata32_t*);
_CRTIMP int  __cdecl __MINGW_NOTHROW	_wfindnext32 (long, struct __wfinddata32_t*);
d404 2
a405 2
_CRTIMP long __cdecl __MINGW_NOTHROW _wfindfirsti64(const wchar_t*, struct _wfinddatai64_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW _wfindnexti64(long, struct _wfinddatai64_t*);
d407 4
a410 4
_CRTIMP long __cdecl __MINGW_NOTHROW	_wfindfirst32i64 (const wchar_t*, struct _wfinddata32i64_t*);
_CRTIMP long __cdecl __MINGW_NOTHROW	_wfindfirst64i32 (const wchar_t*, struct _wfinddata64i32_t*);
_CRTIMP int  __cdecl __MINGW_NOTHROW	_wfindnext32i64 (long, struct _wfinddata32i64_t*);
_CRTIMP int  __cdecl __MINGW_NOTHROW	_wfindnext64i32 (long, struct _wfinddata64i32_t*);
d414 1
a414 1
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wfindnext64(intptr_t, struct __wfinddata64_t*);
d418 4
a421 4
_CRTALIAS long __cdecl __MINGW_NOTHROW	_wfindfirst (const wchar_t* _v1, struct _wfinddata_t* _v2)	 { return(_wfindfirst64i32 (_v1,(struct _wfinddata64i32_t*)_v2)); }
_CRTALIAS int  __cdecl __MINGW_NOTHROW	_wfindnext (long _v1, struct _wfinddata_t* _v2)			 { return(_wfindnext64i32  (_v1,(struct _wfinddata64i32_t*)_v2)); }
_CRTALIAS long __cdecl __MINGW_NOTHROW	_wfindfirsti64 (const wchar_t* _v1, struct _wfinddatai64_t* _v2) { return(_wfindfirst64 (_v1,(struct __wfinddata64_t*)_v2)); }
_CRTALIAS int  __cdecl __MINGW_NOTHROW	_wfindnexti64 (long _v1, struct _wfinddatai64_t* _v2)		 { return(_wfindnext64  (_v1,(struct __wfinddata64_t*)_v2)); }
d423 4
a426 4
_CRTALIAS long __cdecl __MINGW_NOTHROW	_wfindfirst (const wchar_t* _v1, struct _wfinddata_t* _v2)	 { return(_wfindfirst32 (_v1,(struct __wfinddata32_t*)_v2)); }
_CRTALIAS int  __cdecl __MINGW_NOTHROW	_wfindnext (long _v1, struct _wfinddata_t* _v2)			 { return(_wfindnext32  (_v1,(struct __wfinddata32_t*)_v2)); }
_CRTALIAS long __cdecl __MINGW_NOTHROW	_wfindfirsti64 (const wchar_t* _v1, struct _wfinddatai64_t* _v2) { return(_wfindfirst32i64 (_v1,(struct _wfinddata32i64_t*)_v2)); }
_CRTALIAS int  __cdecl __MINGW_NOTHROW	_wfindnexti64 (long _v1, struct _wfinddatai64_t* _v2)		 { return(_wfindnext32i64  (_v1,(struct _wfinddata32i64_t*)_v2)); }
d475 2
a476 2
long 		wfindfirst(wchar_t *, struct _wfinddata_t *);
int 		wfindnext(long, struct _wfinddata_t *);
@


1.23
log
@2010-02-14  Roumen Petrov  <rumen@@users.sourceforge.net>

        Issue [2134161]: time64 functions and types for msvcrt >= 8.0
        (initial implementation)

        * new type: __time32_t

        * new structures: _finddata32_t, _finddata32i64_t, _finddata64i32_t,
        __stat32, _stat32i64, _stat64i32, __timeb32, __utimbuf32,
        __wfinddata32_t, _wfinddata32i64_t, _wfinddata64i32_t

        * new functions: _ctime32, _difftime32, _difftime64, _findfirst32
        _findfirst32i64, _findfirst64i32, _findnext32, _findnext32i64,
        _findnext64i32, _fstat32, _fstat32i64, _fstat64i32, _ftime32,
        _futime32, _gmtime32, _localtime32, _mkgmtime32, _mkgmtime64,
        _mktime32, _stat32, _stat32i64, _stat64i32, _time32, _utime32,
        _wctime32, _wfindfirst32, _wfindfirst32i64, _wfindfirst64i32,
        _wfindnext32, _wfindnext32i64, _wfindnext64i32, _wstat32,
        _wstat32i64, _wstat64i32,_wutime32

        * new define _USE_32BIT_TIME_T set 32 or 64 aliases for: time_t,
        ctime, difftime, _findfirst, _findfirsti64, _findnext, _findnexti64,
        _fstat, _fstati64, _ftime, _futime, gmtime, localtime, mktime,
        _stat, _stati64, time, _utime, _wctime, _wfindfirst, _wfindfirsti64,
        _wfindnext, _wfindnexti64, _wstat, _wstati64, _wutime
@
text
@d241 2
a242 2
_CRTIMP long __cdecl __MINGW_NOTHROW _findfirst (const char*, struct _finddata_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW _findnext (long, struct _finddata_t*);
d244 1
a244 1
_CRTIMP int __cdecl __MINGW_NOTHROW _findclose (long);
d246 2
a247 2
_CRTIMP long __cdecl __MINGW_NOTHROW	_findfirst32 (const char*, struct _finddata32_t*);
_CRTIMP int  __cdecl __MINGW_NOTHROW	_findnext32 (long, struct _finddata32_t*);
d259 2
a260 2
_CRTIMP long __cdecl __MINGW_NOTHROW _findfirsti64(const char*, struct _finddatai64_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW _findnexti64(long, struct _finddatai64_t*);
d262 4
a265 4
_CRTIMP long __cdecl __MINGW_NOTHROW	_findfirst32i64 (const char*, struct _finddata32i64_t*);
_CRTIMP long __cdecl __MINGW_NOTHROW	_findfirst64i32 (const char*, struct _finddata64i32_t*);
_CRTIMP int  __cdecl __MINGW_NOTHROW	_findnext32i64 (long, struct _finddata32i64_t*);
_CRTIMP int  __cdecl __MINGW_NOTHROW	_findnext64i32 (long, struct _finddata64i32_t*);
d272 1
a272 1
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _findnext64(intptr_t, struct __finddata64_t*); 
d276 4
a279 4
_CRTALIAS long __cdecl __MINGW_NOTHROW	_findfirst (const char* _v1, struct _finddata_t* _v2)	    { return(_findfirst64i32 (_v1,(struct _finddata64i32_t*)_v2)); }
_CRTALIAS int  __cdecl __MINGW_NOTHROW	_findnext (long _v1, struct _finddata_t* _v2)		    { return(_findnext64i32  (_v1,(struct _finddata64i32_t*)_v2)); }
_CRTALIAS long __cdecl __MINGW_NOTHROW	_findfirsti64 (const char* _v1, struct _finddatai64_t* _v2) { return(_findfirst64 (_v1,(struct __finddata64_t*)_v2)); }
_CRTALIAS int  __cdecl __MINGW_NOTHROW	_findnexti64 (long _v1, struct _finddatai64_t* _v2)	    { return(_findnext64  (_v1,(struct __finddata64_t*)_v2)); }
d281 4
a284 4
_CRTALIAS long __cdecl __MINGW_NOTHROW	_findfirst (const char* _v1, struct _finddata_t* _v2)	    { return(_findfirst32 (_v1,(struct _finddata32_t*)_v2)); }
_CRTALIAS int  __cdecl __MINGW_NOTHROW	_findnext (long _v1, struct _finddata_t* _v2)		    { return(_findnext32  (_v1,(struct _finddata32_t*)_v2)); }
_CRTALIAS long __cdecl __MINGW_NOTHROW	_findfirsti64 (const char* _v1, struct _finddatai64_t* _v2) { return(_findfirst32i64 (_v1,(struct _finddata32i64_t*)_v2)); }
_CRTALIAS int  __cdecl __MINGW_NOTHROW	_findnexti64 (long _v1, struct _finddatai64_t* _v2)	    { return(_findnext32i64  (_v1,(struct _finddata32i64_t*)_v2)); }
@


1.22
log
@2009-11-13  Chris Sutcliffe  <ir0nh34d@@users.sourceforge.net>

        * include/io.h (_open_osfhandle): Correct definition.

        Thanks to Alexander Shaduri for the information.
@
text
@d94 30
d155 30
d199 42
d243 1
d245 4
a255 1

d258 1
d261 6
d274 13
d393 1
d396 4
d404 1
d407 6
d417 13
@


1.21
log
@2007-10-03  Bernd Becker <hugin@@users.sourceforge.net>

        * include/io.h (__finddata64_t, __wfinddata64_t): changed member 'size'
        from '_fsize_t' to '__int64' to be consistent with the other ...64
        structures and the value set there is 8 bytes not 4.  Add guard for both
        as the are only used by functions available from 6.1 on.

        * include/malloc.h (_HEAP_MAXREQ): Define.
        (_aligned_offset_recalloc): Define.
        (_aligned_recalloc()): Define.

        * include/math.h: fixed a typo in a comment.
        (atanhf): Fixed declaration.

        * include/wchar.h (__wfinddata64_t): changed member 'size' from '_fsize_t'
        to '__int64' to be consistent with the other ...64 structures and the value
        set there is 8 bytes not 4.  Added guard as this function is only used by
        functions available from 6.1 on.

        * include/sys/stat.h: some members of 'stat' were declared with types with
        a prefixed underscore, while the ones without the underscore should have
        been used.  Added guard to '__stat64' as it is only used by functions
        available from 6.1 on.  Added the wide character versions of the
        exec()/spawn() family for completion
        (_stati64): changed the type of the 'st_mode' member from 'unsigned int' to
        '_mode_t'

        * include/sys/timeb.h (timeb, _timb): changed the type of the 'time' member
        from 'long' to 'time_t'
        (__timeb64): moved declaration of structure directly before the declaration
        of the function '_ftime64()', so it is guarded as well

        * include/sys/utime.h (__utimbuf64): moved declaration of structure directly
        before the declaration of the functions using it, so it is guarded as well
@
text
@d241 1
a241 1
_CRTIMP int __cdecl __MINGW_NOTHROW _open_osfhandle (long, int);
@


1.20
log
@	*include/assert.h:  Qualify all  functions with __MINGW_NOTHROW.
	*include/conio.h:  Likewise.
	*include/ctype.h:  Likewise.
	*include/direct.h:  Likewise.
	*include/dos.h:  Likewise.
	*include/errno.h:  Likewise.
	*include/fenv.h:  Likewise.
	*include/float.h:  Likewise.
	*include/inttypes.h:  Likewise.
	*include/io.h:  Likewise.
	*include/libgen.h:  Likewise.
	*include/locale.h:  Likewise.
	*include/malloc.h:  Likewise.
	*include/mbctype.h:  Likewise.
	*include/mbstring.h:  Likewise.
	*include/process.h:  Likewise.
	*include/search.h:  Likewise.
	*include/setjmp.h:  Likewise.
	*include/signal.h:  Likewise.
	*include/stdio.h:  Likewise.
	*include/stdlib.h:  Likewise.
	*include/string.h:  Likewise.
	*include/time.h:  Likewise.
	*include/wchar.h:  Likewise.
	*include/sys/stat.h:  Likewise.
	*include/sys/time.h:  Likewise.
	*include/sys/timeb.h:  Likewise.
	*include/sys/utime.h:  Likewise.
@
text
@d1 1
a1 1
/* 
d53 1
a53 1
 * Also defined in stdio.h. 
d82 1
d85 2
a86 2
        __time64_t  time_create;    
        __time64_t  time_access;    
d88 2
a89 1
        _fsize_t    size;
d92 1
d113 1
d116 1
a116 1
        __time64_t  time_create;    
d119 2
a120 1
        _fsize_t    size;
d123 1
a160 1

d163 1
a163 1
__CRT_INLINE off64_t lseek64 (int fd, off64_t offset, int whence) 
@


1.19
log
@	* include/io.h (lseek64) : Add prototype.
@
text
@d133 10
a142 10
_CRTIMP long __cdecl _findfirst (const char*, struct _finddata_t*);
_CRTIMP int __cdecl _findnext (long, struct _finddata_t*);
_CRTIMP int __cdecl _findclose (long);

_CRTIMP int __cdecl _chdir (const char*);
_CRTIMP char* __cdecl _getcwd (char*, int);
_CRTIMP int __cdecl _mkdir (const char*);
_CRTIMP char* __cdecl _mktemp (char*);
_CRTIMP int __cdecl _rmdir (const char*);
_CRTIMP int __cdecl _chmod (const char*, int);
d145 5
a149 5
_CRTIMP __int64 __cdecl _filelengthi64(int);
_CRTIMP long __cdecl _findfirsti64(const char*, struct _finddatai64_t*);
_CRTIMP int __cdecl _findnexti64(long, struct _finddatai64_t*);
_CRTIMP __int64 __cdecl _lseeki64(int, __int64, int);
_CRTIMP __int64 __cdecl _telli64(int);
d152 2
a153 2
_CRTIMP intptr_t __cdecl _findfirst64(const char*, struct __finddata64_t*);
_CRTIMP intptr_t __cdecl _findnext64(intptr_t, struct __finddata64_t*); 
d169 6
a174 6
_CRTIMP int __cdecl chdir (const char*);
_CRTIMP char* __cdecl getcwd (char*, int);
_CRTIMP int __cdecl mkdir (const char*);
_CRTIMP char* __cdecl mktemp (char*);
_CRTIMP int __cdecl rmdir (const char*);
_CRTIMP int __cdecl chmod (const char*, int);
d204 4
a207 4
_CRTIMP int __cdecl _access (const char*, int);
_CRTIMP int __cdecl _chsize (int, long);
_CRTIMP int __cdecl _close (int);
_CRTIMP int __cdecl _commit(int);
d211 1
a211 1
_CRTIMP int __cdecl _creat (const char*, int);
d213 5
a217 5
_CRTIMP int __cdecl _dup (int);
_CRTIMP int __cdecl _dup2 (int, int);
_CRTIMP long __cdecl _filelength (int);
_CRTIMP long __cdecl _get_osfhandle (int);
_CRTIMP int __cdecl _isatty (int);
d225 1
a225 1
_CRTIMP int __cdecl _eof (int);
d229 1
a229 1
_CRTIMP int __cdecl _locking (int, int, long);
d231 1
a231 1
_CRTIMP long __cdecl _lseek (int, long, int);
d234 1
a234 1
_CRTIMP int __cdecl _open (const char*, int, ...);
d236 4
a239 4
_CRTIMP int __cdecl _open_osfhandle (long, int);
_CRTIMP int __cdecl _pipe (int *, unsigned int, int);
_CRTIMP int __cdecl _read (int, void*, unsigned int);
_CRTIMP int __cdecl _setmode (int, int);
d242 2
a243 2
_CRTIMP int __cdecl	remove (const char*);
_CRTIMP int __cdecl	rename (const char*, const char*);
d247 1
a247 1
_CRTIMP int __cdecl _sopen (const char*, int, int, ...);
d249 1
a249 1
_CRTIMP long __cdecl _tell (int);
d251 3
a253 3
_CRTIMP int __cdecl _umask (int);
_CRTIMP int __cdecl _unlink (const char*);
_CRTIMP int __cdecl _write (int, const void*, unsigned int);
d259 11
a269 11
_CRTIMP int __cdecl _waccess(const wchar_t*, int);
_CRTIMP int __cdecl _wchmod(const wchar_t*, int);
_CRTIMP int __cdecl _wcreat(const wchar_t*, int);
_CRTIMP long __cdecl _wfindfirst(const wchar_t*, struct _wfinddata_t*);
_CRTIMP int __cdecl _wfindnext(long, struct _wfinddata_t *);
_CRTIMP int __cdecl _wunlink(const wchar_t*);
_CRTIMP int __cdecl _wopen(const wchar_t*, int, ...);
_CRTIMP int __cdecl _wsopen(const wchar_t*, int, int, ...);
_CRTIMP wchar_t * __cdecl _wmktemp(wchar_t*);
_CRTIMP long __cdecl _wfindfirsti64(const wchar_t*, struct _wfinddatai64_t*);
_CRTIMP int __cdecl _wfindnexti64(long, struct _wfinddatai64_t*);
d271 2
a272 2
_CRTIMP intptr_t __cdecl _wfindfirst64(const wchar_t*, struct __wfinddata64_t*); 
_CRTIMP intptr_t __cdecl _wfindnext64(intptr_t, struct __wfinddata64_t*);
d285 18
a302 18
_CRTIMP int __cdecl access (const char*, int);
_CRTIMP int __cdecl chsize (int, long );
_CRTIMP int __cdecl close (int);
_CRTIMP int __cdecl creat (const char*, int);
_CRTIMP int __cdecl dup (int);
_CRTIMP int __cdecl dup2 (int, int);
_CRTIMP int __cdecl eof (int);
_CRTIMP long __cdecl filelength (int);
_CRTIMP int __cdecl isatty (int);
_CRTIMP long __cdecl lseek (int, long, int);
_CRTIMP int __cdecl open (const char*, int, ...);
_CRTIMP int __cdecl read (int, void*, unsigned int);
_CRTIMP int __cdecl setmode (int, int);
_CRTIMP int __cdecl sopen (const char*, int, int, ...);
_CRTIMP long __cdecl tell (int);
_CRTIMP int __cdecl umask (int);
_CRTIMP int __cdecl unlink (const char*);
_CRTIMP int __cdecl write (int, const void*, unsigned int);
@


1.18
log
@	* include/stdlib.h: Don't include stdint.h.  Conditionally define intptr_t.
	* include/io.h: Likewise.
@
text
@d157 1
@


1.17
log
@	* include/io.h (__mingw_access): New static inline wrapper to restore
	pre-Vista 'access (fname, X_OK)'  behaviour.
	(__USE_MINGW_ACCESS): Use to map access() to __mingw_access().
@
text
@a20 1
#include <stdint.h>  /* For intptr_t.  */
d36 9
@


1.16
log
@	* include/io.h (X_OK):  Revert 2007-01-24 change, but leave comment.
@
text
@d296 9
@


1.15
log
@	* include/io.h (X_OK):  Define to F_OK.
@
text
@d185 1
a185 1
#define	X_OK	F_OK	/* MS access() doesn't check for execute permission. */
@


1.14
log
@	* include/stdio.h (SEEK_SET, SEEK_CUR, SEEK_END): Define
	unconditionally.  Change comment.
	* include/unistd.h (SEEK_SET, SEEK_CUR, SEEK_END): Define
	here too.
	* include/io.h (rename): Declare.
	(remove): Declare.
@
text
@d183 3
a185 1
#define	X_OK	1	/* Check for execute permission. */
@


1.13
log
@2004-06-30  Kees Zeelenberg  <kzlg@@users.sourceforge.net>
            Danny Smith  <dannysmith@@users.sourceforge.net>

	* include/stdio.h (fopen64): Add inline function.
	(fseeko64): Add prototype.
	(ftello64): Add inline function.
	* include/io.h (lseek64): Add inline function.
	* include/sys/types (off64_t): Add typedef.
	(fpos64_t): Add typedef.
        * mingwex/fopen64.c: New file.
        * mingwex/fseeko64.c: New file.
        * mingwex/ftello64.c: New file.
        * mingwex/lseek64.c: New file.
	* mingwex/Makefile.in (STDIO_DISTFILES): Add fopen64.c,
	fseeko.64.c, ftello64.c, lseek64.c.
	(STDIO_OBJS): Add fopen64.o, fseeko.64.o, ftello64.o, lseek64.o.

2004-06-30  Danny Smith  <dannysmith@@users.sourceforge.net>

	* include/stdio.h (__mingw_fseeko64): Add prototype.
	* mingwex/mingw-fseek.c (__mingw_fseeko64): Add definition.
	(__mingw_fwrite): Handle huge files.
@
text
@d229 4
@


1.12
log
@
	* CONTRIBUTORS: New file.
	* DISCLAIMER: Ditto.
	* CRT_noglob.c: Reword copyright and disclaimer.  Move Contributors
	section CONTRIBUTORS file.  Remove RCS tags.
	* CRTFmode.c: Ditto.
	* CRTglob.c: Ditto.
	* CRTinit.c: Ditto.
	* crt1.c: Ditto.
	* crtdll.dev: Ditto.
	* dllcrt1.c: Ditto.
	* dllmain.c: Ditto.
	* gccmain.c: Ditto.
	* init.c: Ditto.
	* isascii.c: Ditto.
	* iscsym.c: Ditto.
	* iscsymf.c: Ditto.
	* jamfile: Ditto.
	* main.c: Ditto.
	* msvcrt.def.in: Ditto.
	* strcasecmp.c: Ditto.
	* toascii.c: Ditto.
	* wcscmpi.c: Ditto.
	* include/assert.h: Ditto.
	* include/conio.h: Ditto.
	* include/ctype.h: Ditto.
	* include/direct.h: Ditto.
	* include/dirent.h: Ditto.
	* include/dos.h: Ditto.
	* include/errno.h: Ditto.
	* include/excpt.h: Ditto.
	* include/fcntl.h: Ditto.
	* include/float.h: Ditto.
	* include/io.h: Ditto.
	* include/locale.h: Ditto.
	* include/malloc.h: Ditto.
	* include/math.h: Ditto.
	* include/process.h: Ditto.
	* include/setjmp.h: Ditto.
	* include/share.h: Ditto.
	* include/signal.h: Ditto.
	* include/stdio.h: Ditto.
	* include/stdlib.h: Ditto.
	* include/string.h: Ditto.
	* include/tchar.h: Ditto.
	* include/time.h: Ditto.
	* include/wchar.h: Ditto.
	* include/sys/locking.h: Ditto.
	* include/sys/param.h: Ditto.
	* include/sys/stat.h: Ditto.
	* include/sys/timeb.h: Ditto.
	* include/sys/types.h: Ditto.
	* include/sys/utime.h: Ditto.
	* mingwex/dirent.c: Ditto.
@
text
@d147 8
@


1.11
log
@2004-03-30  Danny Smith  <dannysmith@@users.sourceforge.net>

	* include/io.h: (_findfirst): Correct prototype.

2004-03-30  Hans Leidekker  <hans@@it.vu.nl>

	* include/io.h: (_findnext, _findclose): Correct prototype.
@
text
@d3 3
a7 19
 *
 * This file is part of the Mingw32 package.
 *
 * Contributors:
 *  Created by Colin Peters <colin@@bird.fu.is.saga-u.ac.jp>
 *
 *  THIS SOFTWARE IS NOT COPYRIGHTED
 *
 *  This source code is offered for use in the public domain. You may
 *  use, modify or distribute it freely.
 *
 *  This code is distributed in the hope that it will be useful but
 *  WITHOUT ANY WARRANTY. ALL WARRANTIES, EXPRESS OR IMPLIED ARE HEREBY
 *  DISCLAIMED. This includes but is not limited to warranties of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * $Revision: 1.4 $
 * $Author: cgf $
 * $Date: 2000/02/05 04:04:54 $
@


1.10
log
@	Add prototypes for new msvcrt.dll versions

	* include/_mingw.h (__MSVCRT_VERSION__): Define default as 0x0600.

	* include/time.h (__time64_t): Add typedef.
	(_mktime64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.
	(_ctime64): Likewise.
	(_wctime64): Likewise.
	(_gmtime64): Likewise.
	(_localtime64): Likewise.
	(wcsftime): Move into _WTIME_DEFINED block.
	Regroup non-ANSI prototypes.

	* include/io.h: Include <stdint.h>.
	(__finddata64_t): Add struct definition.
	(__wfinddata64_t): Likewise.
	(_findfirst64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.
	(_findnext64): Likewise.
	(_wfindfirst64): Likewise.
	(_wfindnext64): Likewise.

	* include/sys/timeb.h (__timeb64): Add struct definition.
	(_ftime64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.

	* include/sys/utime.h (__utimbuf64): Add struct definition.
	(_utime64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.
	(_futime64): Likewise.
	(_wutime64): Likewise.

	* include/sys/stat.h (__stat64):  Add struct definition.
	(_fstat64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.
	(_stat64): Likewise.
	(_wstat64): Likwise.

	* include/sys/types.h (__time64_t):  Add typedef.

	* include/wchar.h (__wfinddata64_t): Add structure definition.
	(__stat64): Likewise.
	(_wctime64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.
	(_wfindfirst64): Likewise.
	(_wfindnext64): Likewise.
	(_wutime64): Likewise.
	(_wstat64): Likwise.

	* include/malloc.h (_aligned_free): Add prototype for
	__MSVCRT_VERSION__ >= 0x0700.
	(_aligned_malloc): Likewise.
	(_aligned_offset_malloc): Likewise.
	(_aligned_offset_realloc): Likewise.
	(_aligned_realloc): Likewise.

	* include/string.h (_wcserror): Add prototype for
	__MSVCRT_VERSION__ >= 0x0700.
	(__wcserror): Likewise.

	* include/math.h (_set_SSE2_enable): Add prototype for
	__MSVCRT_VERSION__ >= 0x0701.
@
text
@d141 3
a143 3
_CRTIMP int __cdecl _findfirst (const char*, struct _finddata_t*);
_CRTIMP int __cdecl _findnext (int, struct _finddata_t*);
_CRTIMP int __cdecl _findclose (int);
@


1.9
log
@	* include/conio.h: Remove __STRICT_ANSI__ guard from non-ANSI header.
	* include/direct.h:  Ditto.
	* include/dirent.h:  Ditto.
	* include/dos.h:  Ditto.
	* include/excpt.h:  Ditto.
	* inlude/fcntl,h
	* include/io.h:  Ditto.
	* inlude/mem.h:  Ditto.
	* include/memory.h:  Ditto.
	* include/process.h:  Ditto.
	* inlude/search.h:  Ditto.
	* include/share.h:  Ditto.
	* include/unistd.h:  Ditto.
	* include/sys/fcntl.h:  Ditto.
	* include/file.h:  Ditto.
	* include/sys/locking.h:  Ditto.
	* include/sys/param.h:  Ditto.
	* include/sys/stat,h
	* include/sys/time.h:  Ditto.
	* include/sys/timeb.h:  Ditto.
	* include/sys/types.h:  Ditto.
	* include/sys/unistd.h:  Ditto.
	* include/sys/utime.h:  Ditto.
@
text
@d36 2
a37 1
#include <sys/types.h>	/* To get time_t. */
d90 8
d108 1
d118 9
d140 1
a151 1

d158 5
a164 1

a187 1

d263 4
@


1.8
log
@	* include/io.h (_fileno): Remove prototype.
	(fileno): Likewise.
	(FILENAME_MAX): Define, if needed.
	Don't include <stdio.h>.
	* include/stdio.h (FILENAME_MAX): Protect against
	prior definition.
	(_fileno): Define macro implementation.
	(fileno): Likewise.
@
text
@a25 3

#ifndef	__STRICT_ANSI__

a34 1
#ifndef __STRICT_ANSI__
a160 2
#endif	/* Not __STRICT_ANSI__ */

a295 3

#endif	/* Not strict ANSI */

@


1.7
log
@	* include/_mingw.h (_CRTIMP): Define for __GNUC__ if
	__declspec(dllimport)  supported.
	(__cdecl): Define if not already defined.
	(__stdcall): Likewise.
	* include/dirent.h: Qualify fuctions with __cdecl.
	* include/fenv.h: Likewise.
	* include/inttypes.h: Likewise.
	* include/assert.h: Qualify fuctions with __cdecl. Qualify
	CRT dll imports with _CRTIMP.
	* include/conio.h: Likewise.
	* include/ctype.h: Likewise.
	* include/direct.h: Likewise.
	* include/dos.h: Likewise.
	* include/errno.h: Likewise.
	* include/float.h: Likewise.
	* include/io.h: Likewise.
	* include/locale.h: Likewise.
	* include/malloc.h: Likewise.
	* include/math.h: Likewise.
	* include/mbctype.h: Likewise.
	* include/mbstring.h: Likewise.
	* include/process.h: Likewise.
	* include/setjmp.h: Likewise.
	* include/signal.h: Likewise.
	* include/stdio.h: Likewise.
	* include/stdlib.h: Likewise.
	* include/string.h: Likewise.
	* include/time.h: Likewise.
	* include/wchar.h: Likewise.
	* include/wctype.h: Likewise.
	* include/sys/stat.h: Likewise.
	* include/sys/timeb.h: Likewise.
	* include/sys/utime.h: Likewise.

	* include/ctype.h: Guard ctype inlines with __NO_INLINE__.
	* include/wctype.h: Guard wctype inlines with __NO_INLINE__.

	* include/stdio.h (__VALIST): Guard against prior definition.
@
text
@a34 3
/* We need the definition of FILE anyway... */
#include <stdio.h>

d62 9
a196 1
_CRTIMP int __cdecl _fileno (FILE*);
a265 1
_CRTIMP int __cdecl fileno (FILE*);
@


1.6
log
@	* include/fcntl.h (_fmode): Remove declarations and
	compatibility defines.
	(_setmode, setmode): Remove prototypes.
	* include/stdlib (_fmode): Add declarations and
	compatibility defines.  Change type to int.
	* include/io.h (_setmode, setmode): Add prototypes.
	* samples/fmode/all.c: Adjust includes.
	* samples/fmode/test.c: Likewise.
	* crt1.c (_CRT_fmode): Declare as int.
	* CRTfmode.c (_CRT_fmode): Likewise.

	* include/stdlib: Remove comment about MB_CUR_MAX.
@
text
@d119 10
a128 10
int	_findfirst (const char*, struct _finddata_t*);
int	_findnext (int, struct _finddata_t*);
int	_findclose (int);

int	_chdir (const char*);
char*	_getcwd (char*, int);
int	_mkdir (const char*);
char*	_mktemp (char*);
int	_rmdir (const char*);
int _chmod (const char*, int);
d132 5
a136 5
__int64  _filelengthi64(int);
long _findfirsti64(const char*, struct _finddatai64_t*);
int _findnexti64(long, struct _finddatai64_t*);
__int64  _lseeki64(int, __int64, int);
__int64  _telli64(int);
d143 6
a148 6
int	chdir (const char*);
char*	getcwd (char*, int);
int	mkdir (const char*);
char*	mktemp (char*);
int	rmdir (const char*);
int chmod (const char*, int);
d179 4
a182 4
int		_access (const char*, int);
int		_chsize (int, long);
int		_close (int);
int		_commit(int);
d186 1
a186 1
int		_creat (const char*, int);
d188 6
a193 6
int		_dup (int);
int		_dup2 (int, int);
long		_filelength (int);
int		_fileno (FILE*);
long		_get_osfhandle (int);
int		_isatty (int);
d201 1
a201 1
int		_eof (int);
d205 1
a205 1
int		_locking (int, int, long);
d207 1
a207 1
long		_lseek (int, long, int);
d210 1
a210 1
int		_open (const char*, int, ...);
d212 4
a215 4
int		_open_osfhandle (long, int);
int		_pipe (int *, unsigned int, int);
int		_read (int, void*, unsigned int);
int		_setmode (int, int);
d219 1
a219 1
int		_sopen (const char*, int, int, ...);
d221 1
a221 1
long		_tell (int);
d223 3
a225 3
int		_umask (int);
int		_unlink (const char*);
int		_write (int, const void*, unsigned int);
d231 11
a241 11
int 		_waccess(const wchar_t*, int);
int 		_wchmod(const wchar_t*, int);
int 		_wcreat(const wchar_t*, int);
long 		_wfindfirst(const wchar_t*, struct _wfinddata_t*);
int 		_wfindnext(long, struct _wfinddata_t *);
int 		_wunlink(const wchar_t*);
int 		_wopen(const wchar_t*, int, ...);
int 		_wsopen(const wchar_t*, int, int, ...);
wchar_t * 	_wmktemp(wchar_t*);
long  _wfindfirsti64(const wchar_t*, struct _wfinddatai64_t*);
int  _wfindnexti64(long, struct _wfinddatai64_t*);
d253 19
a271 19
int		access (const char*, int);
int		chsize (int, long );
int		close (int);
int		creat (const char*, int);
int		dup (int);
int		dup2 (int, int);
int		eof (int);
long		filelength (int);
int		fileno (FILE*);
int		isatty (int);
long		lseek (int, long, int);
int		open (const char*, int, ...);
int		read (int, void*, unsigned int);
int		setmode (int, int);
int		sopen (const char*, int, int, ...);
long		tell (int);
int		umask (int);
int		unlink (const char*);
int		write (int, const void*, unsigned int);
@


1.5
log
@2002-06-18  Casper S. Hornstrup  <chorns@@users.sourceforge.net>

	* include/_mingw.h (__MINGW_IMPORT): Check for prior definition before
	defining.
	* include/excpt.h (): Include windef.h not windows.h.
	* include/fcntl.h (_O_SHORT_LIVED): Add define.
	(_chmod): Add prototype.
        (_creat): Correct prototype.
	(SH_DENY*): Rename defines to _SH_DENY*.
	(SH_DENY*): Add Non-ANSI names for _SH_DENY*.
	include/stdio.h (_IOMYBUF, _IOEOF, _IOERR, _IOSTRG,
	_IOAPPEND): Add defines.
	(_wfindfirst): Correct prototype.
	(_wfdopen): Add prototype.
	* include/stdlib.h (_rotl, _rotr, _lrotl, _lrotr): Add
	prototypes.
	* include/string.h (_mbschr, _mbstok, _mbsncat): Remove
	 prototypes.
	(_wcsdup): Correct prototype.
	* include/mbstring.h: Remove comments about _mbschr, _mbstok,
	 _mbsncat being in string.h.
	* include/wchar.h (_wfindfirst): Correct prototype.
	* include/tchar.h (_tfdopen): Add _UNICODE mappings.
@
text
@d215 1
d266 1
@


1.5.6.1
log
@	* include/io.h: Move wide char prototypes together.
	* include/string.h: Untangle wide char protototypes.
	Use C++ c-header compatability defines.
	*include/wchar.h: Copy wide char string prototypes from
	string.h.
	Resync with io.h.
	* include/signal.h: Use C++ c-header compatability defines.
	* include/stdio.h: Add guard for __HAVE_STD_CXX.
@
text
@d41 1
d159 1
d226 19
a270 1
#endif	/* Not _NO_OLDNAMES */
a272 16
/* Not in crtdll.dll */
#if !defined (_WIO_DEFINED)
#if defined (__MSVCRT__)
int 		_waccess(const wchar_t*, int);
int 		_wchmod(const wchar_t*, int);
int 		_wcreat(const wchar_t*, int);
long 		_wfindfirst(const wchar_t*, struct _wfinddata_t*);
int 		_wfindnext(long, struct _wfinddata_t *);
int 		_wunlink(const wchar_t*);
int 		_wopen(const wchar_t*, int, ...);
int 		_wsopen(const wchar_t*, int, int, ...);
wchar_t * 	_wmktemp(wchar_t*);
long  _wfindfirsti64(const wchar_t*, struct _wfinddatai64_t*);
int  _wfindnexti64(long, struct _wfinddatai64_t*);

#ifndef __NO_OLDNAMES
a285 2
#endif
#endif /* defined (__MSVCRT__) */
d287 1
a287 2
#define _WIO_DEFINED
#endif /* _WIO_DEFINED */
@


1.5.6.2
log
@	* include/stdio.h (tempnam): Move out of __CSTD namespace.
	(FILE): Declare in __CSTD.
	(fpos_t): Likewise.
	(FILE): Qualify with __CSTD when used in non-std functions,
	throughout.
	* include/io.h (fileno): Remove prototype.
@
text
@d189 1
d239 1
@


1.5.6.3
log
@	* include/settjmp.h: Use C++ c-header compatibility defines.
	* include/time.h: Don't include non-ISO sys/types.h.
	(struct tm): Define in __CSTD, if not already done.
	(_wasctime): Qualify tm with __CSTD.
	(_wctime): Qualify time_t with __CSTD.
	* include/wchar.h (ctype.h): Don't #include.
	(stdio.h): Don't #include.
	(time.h): Don't #include.
	(wctype.h): Include in C, but not in C++ in ANSI mode.
	(time_t): Define in __CSTD, if not already done. Qualify
	with __CSTD throughout.
	(struct tm): Likewise.
	(FILENAME_MAX): Replace with numeric constant throughout.
	Whitespace.
	* include/io.h (stdio.h): Don't #include.
	(time_t): Define in __CSTD, if not already done. Qualify
	with __CSTD throughout.
	(FILENAME_MAX): Replace with numeric constant throughout.
	Consolidate RC_INVOKED. __cplusplus blocks.
 	* include/dir.h: Add header guard.
	* include/sys/time.h: Add header guard.
	* include/sys/types.h (time_t): Define in __CSTD.
	* include/sys/utime.h (_utimbuf, utimbuf): Qualify
	time_t with __CSTD.

	Correct spelling of compatibility in ChangeLog.
@
text
@d34 10
a54 12
/* TODO: Maximum number of open handles has not been tested, I just set
 * it the same as FOPEN_MAX. */
#define	HANDLE_MAX	20


/* Some defines for _access nAccessMode (MS doesn't define them, but
 * it doesn't seem to hurt to add them). */
#define	F_OK	0	/* Check for file existence */
#define	X_OK	1	/* Check for execute permission. */
#define	W_OK	2	/* Check for write permission */
#define	R_OK	4	/* Check for read permission */

a57 9
#ifndef _TIME_T_DEFINED
__BEGIN_CSTD_NAMESPACE
typedef long time_t;
__END_CSTD_NAMESPACE
#define _TIME_T_DEFINED
#endif

__BEGIN_CGLOBAL_NAMESPACE

d70 3
a72 3
	__CSTD time_t	time_create;
	__CSTD time_t	time_access;	/* always midnight local time */
	__CSTD time_t	time_write;
d74 1
a74 1
	char		name[260];	/* may include spaces. */
d78 6
a83 6
    unsigned		attrib;
    __CSTD time_t	time_create;
    __CSTD time_t	time_access;
    __CSTD time_t	time_write;
    __int64		size;
    char        name[260];
d86 1
d90 3
a92 3
    	__CSTD time_t	time_create;	/* -1 for FAT file systems */
    	__CSTD time_t	time_access;	/* -1 for FAT file systems */
    	__CSTD time_t	time_write;
d94 1
a94 1
    	wchar_t		name[260];	/* may include spaces. */
d97 6
a102 6
    unsigned		attrib;
    __CSTD time_t	time_create;
    __CSTD time_t	time_access;
    __CSTD time_t	time_write;
    __int64		size;
    wchar_t		name[260];
d108 4
d129 1
d138 1
d152 25
d286 3
a288 1
__END_CGLOBAL_NAMESPACE
@


1.5.6.4
log
@	* include/io.h: #include stddef.h with __need_wchat_t.
	* include/wchar.h (__VA_LIST): Define as __builtin_va_list
	or char*.
@
text
@a33 5
#define __need_wchar_t
#ifndef RC_INVOKED
#include <stddef.h>
#endif /* Not RC_INVOKED */

@


1.5.6.5
log
@Merge from mingw mainline.
@
text
@a195 1
int		_setmode (int, int);
a225 1
int		setmode (int, int);
@


1.5.6.6
log
@	Merge from mingw trunk (changes since 2003-01-27).
@
text
@d129 10
a138 10
_CRTIMP int __cdecl _findfirst (const char*, struct _finddata_t*);
_CRTIMP int __cdecl _findnext (int, struct _finddata_t*);
_CRTIMP int __cdecl _findclose (int);

_CRTIMP int __cdecl _chdir (const char*);
_CRTIMP char* __cdecl _getcwd (char*, int);
_CRTIMP int __cdecl _mkdir (const char*);
_CRTIMP char* __cdecl _mktemp (char*);
_CRTIMP int __cdecl _rmdir (const char*);
_CRTIMP int __cdecl _chmod (const char*, int);
d141 5
a145 5
_CRTIMP __int64 __cdecl _filelengthi64(int);
_CRTIMP long __cdecl _findfirsti64(const char*, struct _finddatai64_t*);
_CRTIMP int __cdecl _findnexti64(long, struct _finddatai64_t*);
_CRTIMP __int64 __cdecl _lseeki64(int, __int64, int);
_CRTIMP __int64 __cdecl _telli64(int);
d151 6
a156 6
_CRTIMP int __cdecl chdir (const char*);
_CRTIMP char* __cdecl getcwd (char*, int);
_CRTIMP int __cdecl mkdir (const char*);
_CRTIMP char* __cdecl mktemp (char*);
_CRTIMP int __cdecl rmdir (const char*);
_CRTIMP int __cdecl chmod (const char*, int);
d161 4
a164 4
_CRTIMP int __cdecl 	_access (const char*, int);
_CRTIMP int __cdecl 	_chsize (int, long);
_CRTIMP int __cdecl 	_close (int);
_CRTIMP int __cdecl 	_commit(int);
d168 1
a168 1
_CRTIMP int __cdecl 	_creat (const char*, int);
d170 5
a174 5
_CRTIMP int __cdecl 	_dup (int);
_CRTIMP int __cdecl 	_dup2 (int, int);
_CRTIMP long _cdecl 	_filelength (int);
_CRTIMP long _cdecl 	_get_osfhandle (int);
_CRTIMP int __cdecl 	_isatty (int);
d182 1
a182 1
_CRTIMP int __cdecl 	_eof (int);
d186 1
a186 1
_CRTIMP int __cdecl 	_locking (int, int, long);
d188 1
a188 1
_CRTIMP long _cdecl 	_lseek (int, long, int);
d191 1
a191 1
_CRTIMP int __cdecl 	_open (const char*, int, ...);
d193 4
a196 4
_CRTIMP int __cdecl 	_open_osfhandle (long, int);
_CRTIMP int __cdecl 	_pipe (int *, unsigned int, int);
_CRTIMP int __cdecl 	_read (int, void*, unsigned int);
_CRTIMP int __cdecl 	_setmode (int, int);
d200 1
a200 1
_CRTIMP int __cdecl 	_sopen (const char*, int, int, ...);
d202 1
a202 1
_CRTIMP long _cdecl 	_tell (int);
d204 3
a206 3
_CRTIMP int __cdecl 	_umask (int);
_CRTIMP int __cdecl 	_unlink (const char*);
_CRTIMP int __cdecl 	_write (int, const void*, unsigned int);
d215 18
a232 18
_CRTIMP int __cdecl 	access (const char*, int);
_CRTIMP int __cdecl 	chsize (int, long );
_CRTIMP int __cdecl 	close (int);
_CRTIMP int __cdecl 	creat (const char*, int);
_CRTIMP int __cdecl 	dup (int);
_CRTIMP int __cdecl 	dup2 (int, int);
_CRTIMP int __cdecl 	eof (int);
_CRTIMP long _cdecl 	filelength (int);
_CRTIMP int __cdecl 	isatty (int);
_CRTIMP long _cdecl 	lseek (int, long, int);
_CRTIMP int __cdecl 	open (const char*, int, ...);
_CRTIMP int __cdecl 	read (int, void*, unsigned int);
_CRTIMP int __cdecl 	setmode (int, int);
_CRTIMP int __cdecl 	sopen (const char*, int, int, ...);
_CRTIMP long _cdecl 	tell (int);
_CRTIMP int __cdecl 	umask (int);
_CRTIMP int __cdecl 	unlink (const char*);
_CRTIMP int __cdecl 	write (int, const void*, unsigned int);
d240 11
a250 11
_CRTIMP int __cdecl	_waccess(const wchar_t*, int);
_CRTIMP int __cdecl 	_wchmod(const wchar_t*, int);
_CRTIMP int __cdecl	_wcreat(const wchar_t*, int);
_CRTIMP long _cdecl	_wfindfirst(const wchar_t*, struct _wfinddata_t*);
_CRTIMP int __cdecl 	_wfindnext(long, struct _wfinddata_t *);
_CRTIMP int __cdecl	_wunlink(const wchar_t*);
_CRTIMP int __cdecl	_wopen(const wchar_t*, int, ...);
_CRTIMP int __cdecl	_wsopen(const wchar_t*, int, int, ...);
_CRTIMP wchar_t * __cdecl _wmktemp(wchar_t*);
_CRTIMP long __cdecl _wfindfirsti64(const wchar_t*, struct _wfinddatai64_t*);
_CRTIMP int __cdecl _wfindnexti64(long, struct _wfinddatai64_t*);
@


1.4
log
@Merge MinGW CVS differences
@
text
@d128 1
d148 1
d186 1
a186 1
int		_creat (const char*, unsigned);
d233 1
a233 1
long 		_wfindfirst(wchar_t*, struct _wfinddata_t*);
@


1.3
log
@
2001-10-30  Danny Smith  <dannysmith@@users.sourceforge.net>

	* include/io.h (_commit): Add declaration.
	Thanks to: "stefan" <stefan@@lkcc.org>

2001-10-30  Danny Smith  <dannysmith@@users.sourceforge.net>

	* include/sys/stat.h: Make S_IS* macros safer.

2001-10-27  Danny Smith  <dannysmith@@users.sourceforge.net>

	* include/stdlib.h (EXIT_FAILURE): Change value to 1.

2001-10-12  Danny Smith  <dannysmith@@users.sourceforge.net>

	* include/stdlib.h (__p__environ, __p__wenviron): Use
	__STDC__ prototypes.
@
text
@d18 1
a18 1
 *  DISCLAMED. This includes but is not limited to warranties of
@


1.2
log
@
	* include/direct.h: add guard around MSVCRT-only prototytpes
	* include/io.h: add __int64 struct definitions and function prototypes;
		 add guard for MSVCRT-only prototypes
	* include/limits.h: add ISO C9x macros LLONG_MIN, LLONG_MAX, ULLONG_MAX
	* include/stdio.h: add wchar function prototypes (__MSVCRT__);
		 put wchar functions together to make sync with wchar.h easier
	* include/stdlib.h: add wide char functions (__MSVCRT__)
	* include/string.h: add string collation functions ( __MSVCRT__)
	* include/sys/stat.h: add __int64 struct and function ( __MSVCRT__)
	* include/tchar.h: add macros and macro function definitions
	* include/wchar.h: add wide char function prototypes ( __MSVCRT__ );
		enclose more functions in __MSVCRT__ guard;
		some oldname wide char function prototypes #if (0)'d
	* profile/gmon.h: add guard around BSD-ish typedefs
@
text
@d129 1
d180 1
@


1.1
log
@Initial revision
@
text
@d78 10
d97 9
d129 8
d223 7
a229 4
int 		_waccess(const wchar_t *, int);
int 		_wchmod(const wchar_t *, int);
int 		_wcreat(const wchar_t *, int);
long 		_wfindfirst(wchar_t *, struct _wfinddata_t *);
d231 9
a239 6
int 		_wunlink(const wchar_t *);
int 		_wrename(const wchar_t *, const wchar_t *);
int 		_wopen(const wchar_t *, int, ...);
int 		_wsopen(const wchar_t *, int, int, ...);
wchar_t * 	_wmktemp(wchar_t *);

d269 2
d281 1
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
