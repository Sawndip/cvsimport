head	1.7;
access;
symbols
	cygwin-1_7_17-release:1.6
	cygwin-64bit-branch:1.6.0.4
	cygwin-1_7_16-release:1.6
	cygwin-1_7_15-release:1.6
	cygwin-1_7_14_2-release:1.6
	cygwin-1_7_14-release:1.6
	cygwin-1_7_12-release:1.6
	cygwin-1_7_11-release:1.6
	cygwin-1_7_10-release:1.6
	cygwin-1_7_9-release:1.6
	cygwin-1_7_8-release:1.6
	cygwin-1_7_7-release:1.6
	cygwin-1_7_5-release:1.6
	cygwin-1_7_4-release:1.6
	cygwin-1_7_3-release:1.6
	cygwin-1_7_2-release:1.6
	cygwin-1_7_1-release:1.6
	cv-branch-2:1.6.0.2
	cr-0x5f1:1.5.0.6
	cv-branch:1.5.0.4
	cr-0x3b58:1.5.0.2
	cr-0x9e:1.1.0.4
	cr-0x9d:1.1.0.2
	corinna-01:1.1;
locks; strict;
comment	@ * @;


1.7
date	2012.11.07.16.52.16;	author cgf;	state dead;
branches;
next	1.6;

1.6
date	2008.03.04.02.42.44;	author ironhead;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.10.05.03.55;	author dannysmith;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.25.23.56.18;	author dannysmith;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.07.07.58.01;	author dannysmith;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.15.20.20.22;	author dannysmith;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.21.09.43.22;	author dannysmith;	state Exp;
branches;
next	;


desc
@@


1.7
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@/*
 * complex.h
 *
 * This file is part of the Mingw32 package.
 *
 * Contributors:
 *  Created by Danny Smith <dannysmith@@users.sourceforge.net>
 *
 *  THIS SOFTWARE IS NOT COPYRIGHTED
 *
 *  This source code is offered for use in the public domain. You may
 *  use, modify or distribute it freely.
 *
 *  This code is distributed in the hope that it will be useful but
 *  WITHOUT ANY WARRANTY. ALL WARRANTIES, EXPRESS OR IMPLIED ARE HEREBY
 *  DISCLAIMED. This includes but is not limited to warranties of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

#ifndef _COMPLEX_H_
#define _COMPLEX_H_

/* All the headers include this file. */
#include <_mingw.h>

/* These macros are specified by C99 standard */

#ifndef __cplusplus
#define complex _Complex
#endif

#define _Complex_I  (0.0F +  1.0iF)

/* GCC doesn't support _Imaginary type yet, so we don't
   define _Imaginary_I */

#define I _Complex_I

#ifdef __cplusplus
extern "C" {
#endif 

#ifndef RC_INVOKED

double __MINGW_ATTRIB_CONST creal (double _Complex);
double __MINGW_ATTRIB_CONST cimag (double _Complex);
double __MINGW_ATTRIB_CONST carg (double _Complex);
double __MINGW_ATTRIB_CONST cabs (double _Complex);
double _Complex __MINGW_ATTRIB_CONST conj (double _Complex);
double _Complex  cacos (double _Complex);
double _Complex  casin (double _Complex);
double _Complex  catan (double _Complex);
double _Complex  ccos (double _Complex);
double _Complex  csin (double _Complex);
double _Complex  ctan (double _Complex);
double _Complex  cacosh (double _Complex);
double _Complex  casinh (double _Complex);
double _Complex  catanh (double _Complex);
double _Complex  ccosh (double _Complex);
double _Complex  csinh (double _Complex);
double _Complex  ctanh (double _Complex);
double _Complex  cexp (double _Complex);
double _Complex  clog (double _Complex);
double _Complex  cpow (double _Complex, double _Complex);
double _Complex  csqrt (double _Complex);
double _Complex __MINGW_ATTRIB_CONST cproj (double _Complex);

float __MINGW_ATTRIB_CONST crealf (float _Complex);
float __MINGW_ATTRIB_CONST cimagf (float _Complex);
float __MINGW_ATTRIB_CONST cargf (float _Complex);
float __MINGW_ATTRIB_CONST cabsf (float _Complex);
float _Complex __MINGW_ATTRIB_CONST conjf (float _Complex);
float _Complex  cacosf (float _Complex);
float _Complex  casinf (float _Complex);
float _Complex  catanf (float _Complex);
float _Complex  ccosf (float _Complex);
float _Complex  csinf (float _Complex);
float _Complex  ctanf (float _Complex);
float _Complex  cacoshf (float _Complex);
float _Complex  casinhf (float _Complex);
float _Complex  catanhf (float _Complex);
float _Complex  ccoshf (float _Complex);
float _Complex  csinhf (float _Complex);
float _Complex  ctanhf (float _Complex);
float _Complex  cexpf (float _Complex);
float _Complex  clogf (float _Complex);
float _Complex  cpowf (float _Complex, float _Complex);
float _Complex  csqrtf (float _Complex);
float _Complex __MINGW_ATTRIB_CONST cprojf (float _Complex);

long double __MINGW_ATTRIB_CONST creall (long double _Complex);
long double __MINGW_ATTRIB_CONST cimagl (long double _Complex);
long double __MINGW_ATTRIB_CONST cargl (long double _Complex);
long double __MINGW_ATTRIB_CONST cabsl (long double _Complex);
long double _Complex __MINGW_ATTRIB_CONST conjl (long double _Complex);
long double _Complex  cacosl (long double _Complex);
long double _Complex  casinl (long double _Complex);
long double _Complex  catanl (long double _Complex);
long double _Complex  ccosl (long double _Complex);
long double _Complex  csinl (long double _Complex);
long double _Complex  ctanl (long double _Complex);
long double _Complex  cacoshl (long double _Complex);
long double _Complex  casinhl (long double _Complex);
long double _Complex  catanhl (long double _Complex);
long double _Complex  ccoshl (long double _Complex);
long double _Complex  csinhl (long double _Complex);
long double _Complex  ctanhl (long double _Complex);
long double _Complex  cexpl (long double _Complex);
long double _Complex  clogl (long double _Complex);
long double _Complex  cpowl (long double _Complex, long double _Complex);
long double _Complex  csqrtl (long double _Complex);
long double _Complex __MINGW_ATTRIB_CONST cprojl (long double _Complex);

#ifdef __GNUC__

/* double */
__CRT_INLINE double __MINGW_ATTRIB_CONST creal (double _Complex _Z)
{
  return __real__ _Z;
}

__CRT_INLINE double __MINGW_ATTRIB_CONST cimag (double _Complex _Z)
{
  return __imag__ _Z;
}

__CRT_INLINE double _Complex __MINGW_ATTRIB_CONST conj (double _Complex _Z)
{
  return __extension__ ~_Z;
}

__CRT_INLINE  double __MINGW_ATTRIB_CONST carg (double _Complex _Z)
{
  double res;
  __asm__  ("fpatan;"
	   : "=t" (res) : "0" (__real__ _Z), "u" (__imag__ _Z) : "st(1)");
  return res;
}


/* float */
__CRT_INLINE float __MINGW_ATTRIB_CONST crealf (float _Complex _Z)
{
  return __real__ _Z;
}

__CRT_INLINE float __MINGW_ATTRIB_CONST cimagf (float _Complex _Z)
{
  return __imag__ _Z;
}

__CRT_INLINE float _Complex __MINGW_ATTRIB_CONST conjf (float _Complex _Z)
{
  return __extension__ ~_Z;
}

__CRT_INLINE  float __MINGW_ATTRIB_CONST cargf (float _Complex _Z)
{
  float res;
  __asm__  ("fpatan;"
	   : "=t" (res) : "0" (__real__ _Z), "u" (__imag__ _Z) : "st(1)");
  return res;
}

/* long double */
__CRT_INLINE long double __MINGW_ATTRIB_CONST creall (long double _Complex _Z)
{
  return __real__ _Z;
}

__CRT_INLINE long double __MINGW_ATTRIB_CONST cimagl (long double _Complex _Z)
{
  return __imag__ _Z;
}

__CRT_INLINE long double _Complex __MINGW_ATTRIB_CONST conjl (long double _Complex _Z)
{
  return __extension__ ~_Z;
}

__CRT_INLINE  long double __MINGW_ATTRIB_CONST cargl (long double _Complex _Z)
{
  long double res;
  __asm__  ("fpatan;"
	   : "=t" (res) : "0" (__real__ _Z), "u" (__imag__ _Z) : "st(1)");
  return res;
}

#endif /* __GNUC__ */


#endif /* RC_INVOKED */

#ifdef __cplusplus
}
#endif 


#endif /* _COMPLEX_H */
@


1.6
log
@2008-02-28  Joseph Myers  <joseph@@codesourcery.com>

        * include/complex.h: Don't condition contents on C99 or not
        __STRICT_ANSI__.
@
text
@@


1.5
log
@	* mingwex/complex/(cabsl.c cacosl.c cacoshl.c cargl.c casinl.c
	casinhl.c catanl.c catanhl.c ccosl.c ccoshl.c cexpl.c cimagl.c
	clogl.c cpowl.c cprojl.c creall.c csinl.c csinhl.c csqrtl.c
	ctanl.c ctanhl.c): New files.
	* mingwex/Makefile.in (COMPLEX_DISTFILES): Adjust.
	(COMPLEX_OBJS): Adjust.
	* include/complex.h (cabsl, cacosl, cacoshl, cargl, casinf.
	casinhl, catanl, catanhl, ccosl, ccoshl, cexpl, cimagl, clogl,
	cpowl, cprojl, creall, csinl, csinhl, csqrtl, ctanl, ctanhl):
	Declare.
@
text
@a26 3
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) \
     || !defined __STRICT_ANSI__ 

a198 2
#endif /* __STDC_VERSION__ >= 199901L */

@


1.4
log
@	* mingwex/complex/(cabsf.c cacosf.c cacoshf.c cargf.c casinf.c
	casinhf.c catanf.c catanhf.c ccosf.c ccoshf.c cexpf.c cimagf.c
	clogf.c cpowf.c cprojf.c crealf.c csinf.c csinhf.c csqrtf.c
	ctanf.c ctanhf.c): New files.
	* mingwex/Makefile.in (COMPLEX_DISTFILES): Adjust.
	(COMPLEX_OBJS(: Adjust.
	* include/complex.h (cabsf, cacosf, cacoshf, cargf, casinf.
	casinhf, catanf, catanhf, ccosf, ccoshf, cexpf, cimagf, clogf,
	cpowf, cprojf, crealf, csinf, csinhf, csqrtf, ctanf, ctanhf):
	Declare.
@
text
@a48 1
/* TODO: long double versions */ 
d95 23
d120 1
d145 1
d168 25
@


1.3
log
@	* include/complex.h:  Remove __attribute__ ((const)) from
	transcendantal and trig functions.  Replace __attribute__ ((const))
	with __MINGW_ATTRIB_CONST on other declarations.
@
text
@d49 1
a49 1
/* TODO: float and long double versions */ 
d73 23
d120 24
@


1.2
log
@2004-07-15  "dgun"  <dgun@@umpire.com>

	* include/complex.h (conj): Correct typo in prototype.
@
text
@d50 22
a71 22
double __attribute__ ((const)) creal (double _Complex);
double __attribute__ ((const)) cimag (double _Complex);
double __attribute__ ((const)) carg (double _Complex);
double __attribute__ ((const)) cabs (double _Complex);
double _Complex __attribute__ ((const)) conj (double _Complex);
double _Complex __attribute__ ((const)) cacos (double _Complex);
double _Complex __attribute__ ((const)) casin (double _Complex);
double _Complex __attribute__ ((const)) catan (double _Complex);
double _Complex __attribute__ ((const)) ccos (double _Complex);
double _Complex __attribute__ ((const)) csin (double _Complex);
double _Complex __attribute__ ((const)) ctan (double _Complex);
double _Complex __attribute__ ((const)) cacosh (double _Complex);
double _Complex __attribute__ ((const)) casinh (double _Complex);
double _Complex __attribute__ ((const)) catanh (double _Complex);
double _Complex __attribute__ ((const)) ccosh (double _Complex);
double _Complex __attribute__ ((const)) csinh (double _Complex);
double _Complex __attribute__ ((const)) ctanh (double _Complex);
double _Complex __attribute__ ((const)) cexp (double _Complex);
double _Complex __attribute__ ((const)) clog (double _Complex);
double _Complex __attribute__ ((const)) cpow (double _Complex, double _Complex);
double _Complex __attribute__ ((const)) csqrt (double _Complex);
double _Complex __attribute__ ((const)) cproj (double _Complex);
d75 1
a75 1
__CRT_INLINE double __attribute__ ((const)) creal (double _Complex _Z)
d80 1
a80 1
__CRT_INLINE double __attribute__ ((const)) cimag (double _Complex _Z)
d85 1
a85 1
__CRT_INLINE double _Complex __attribute__ ((const)) conj (double _Complex _Z)
d90 1
a90 1
__CRT_INLINE  double __attribute__ ((const)) carg (double _Complex _Z)
@


1.1
log
@	Add ISO C99 complex support for doubles.

	* include/complex.h: New file.
	* mingwex/complex: New directory.
	* mingwex/complex/cabs.c: New file.
	* mingwex/complex/cacos.c: New file.
	* mingwex/complex/cacosh.c: New file.
	* mingwex/complex/casin.c: New file.
	* mingwex/complex/casinh.c: New file.
	* mingwex/complex/catan.c: New file.
	* mingwex/complex/catanh.c: New file.
	* mingwex/complex/ccos.c: New file.
	* mingwex/complex/ccosh.c: New file.
	* mingwex/complex/cexp.c: New file.
	* mingwex/complex/cimag.c: New file.
	* mingwex/complex/clog.c: New file.
	* mingwex/complex/cpow.c: New file.
	* mingwex/complex/cproj.c: New file.
	* mingwex/complex/creal.c: New file.
	* mingwex/complex/csin.c: New file.
	* mingwex/complex/csinh.c: New file.
	* mingwex/complex/csqrt.c: New file.
	* mingwex/complex/ctan.c: New file.
	* mingwex/complex/ctanh.c: New file.
	* mingwex/Makefile.in (COMPLEX_DISTFILES): New list of
	files.
	(dist): Use it.
	(COMPLEX_OBJS): New list of objects.
	(LIB_OBJS): Include it in the library.
@
text
@d54 1
a54 1
double _Complex __attribute__ ((const)) cconj (double _Complex);
@

