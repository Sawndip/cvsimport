head	1.38;
access;
symbols
	cygwin-1_7_17-release:1.37
	cygwin-64bit-branch:1.37.0.2
	cygwin-1_7_16-release:1.36
	cygwin-1_7_15-release:1.36
	cygwin-1_7_14_2-release:1.36
	cygwin-1_7_14-release:1.36
	cygwin-1_7_12-release:1.36
	cygwin-1_7_11-release:1.36
	cygwin-1_7_10-release:1.36
	cygwin-1_7_9-release:1.35
	cygwin-1_7_8-release:1.35
	cygwin-1_7_7-release:1.35
	cygwin-1_7_5-release:1.35
	cygwin-1_7_4-release:1.35
	cygwin-1_7_3-release:1.35
	cygwin-1_7_2-release:1.35
	cygwin-1_7_1-release:1.34
	cv-branch-2:1.32.0.2
	cr-0x5f1:1.23.0.6
	cv-branch:1.23.0.4
	cr-0x3b58:1.23.0.2
	cr-0x9e:1.14.0.4
	cr-0x9d:1.14.0.2
	corinna-01:1.14
	cr-0x9c:1.13.0.6
	cr-0x9b:1.13.0.4
	cr-0x99:1.13
	Z-emcb-cygwin_daemon:1.13.0.2
	w32api-2_2:1.11
	mingw-runtime-2_4:1.11
	mingw-std-ns-branch:1.10.0.6
	mingw-runtime-2_0:1.9
	mingwex:1.6.0.10
	cygnus_cvs_20020108_pre:1.6
	Z-cygwin_daemon_merge-new_HEAD:1.5
	Z-cygwin_daemon_merge_HEAD:1.5
	cygwin_daemon:1.5.0.4;
locks; strict;
comment	@ * @;
expand	@o@;


1.38
date	2012.11.07.16.52.17;	author cgf;	state dead;
branches;
next	1.37;

1.37
date	2012.08.03.16.06.45;	author earnie;	state Exp;
branches;
next	1.36;

1.36
date	2011.05.23.00.03.22;	author ironhead;	state Exp;
branches;
next	1.35;

1.35
date	2010.02.17.02.41.06;	author ironhead;	state Exp;
branches;
next	1.34;

1.34
date	2009.08.08.13.26.11;	author ironhead;	state Exp;
branches;
next	1.33;

1.33
date	2009.07.18.15.19.03;	author ironhead;	state Exp;
branches;
next	1.32;

1.32
date	2008.07.04.03.55.50;	author dannysmith;	state Exp;
branches;
next	1.31;

1.31
date	2008.06.14.09.13.38;	author dannysmith;	state Exp;
branches;
next	1.30;

1.30
date	2008.04.26.00.24.19;	author ironhead;	state Exp;
branches;
next	1.29;

1.29
date	2008.04.26.00.16.37;	author ironhead;	state Exp;
branches;
next	1.28;

1.28
date	2008.03.21.12.45.27;	author ironhead;	state Exp;
branches;
next	1.27;

1.27
date	2007.10.03.18.55.56;	author ironhead;	state Exp;
branches;
next	1.26;

1.26
date	2007.07.12.09.38.17;	author dannysmith;	state Exp;
branches;
next	1.25;

1.25
date	2007.06.23.07.34.16;	author dannysmith;	state Exp;
branches;
next	1.24;

1.24
date	2006.08.31.23.48.56;	author dannysmith;	state Exp;
branches;
next	1.23;

1.23
date	2005.05.04.09.29.09;	author dannysmith;	state Exp;
branches;
next	1.22;

1.22
date	2005.04.24.11.29.02;	author dannysmith;	state Exp;
branches;
next	1.21;

1.21
date	2005.02.07.20.18.07;	author dannysmith;	state Exp;
branches;
next	1.20;

1.20
date	2005.01.17.05.03.17;	author dannysmith;	state Exp;
branches;
next	1.19;

1.19
date	2004.12.20.00.03.06;	author dannysmith;	state Exp;
branches;
next	1.18;

1.18
date	2004.08.07.07.51.14;	author dannysmith;	state Exp;
branches;
next	1.17;

1.17
date	2004.04.20.22.49.32;	author earnie;	state Exp;
branches;
next	1.16;

1.16
date	2004.03.26.11.30.23;	author dannysmith;	state Exp;
branches;
next	1.15;

1.15
date	2004.02.21.07.21.36;	author dannysmith;	state Exp;
branches;
next	1.14;

1.14
date	2003.09.24.00.41.01;	author dannysmith;	state Exp;
branches;
next	1.13;

1.13
date	2003.03.02.07.00.48;	author dannysmith;	state Exp;
branches;
next	1.12;

1.12
date	2003.02.10.21.13.34;	author dannysmith;	state Exp;
branches;
next	1.11;

1.11
date	2002.11.26.00.11.06;	author dannysmith;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.18.04.13.18;	author dannysmith;	state Exp;
branches
	1.10.6.1;
next	1.9;

1.9
date	2002.06.13.10.20.43;	author dannysmith;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.30.01.38.27;	author dannysmith;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.26.22.23.25;	author dannysmith;	state Exp;
branches;
next	1.6;

1.6
date	2001.12.05.15.01.05;	author earnie;	state Exp;
branches
	1.6.10.1;
next	1.5;

1.5
date	2001.06.11.18.13.15;	author earnie;	state Exp;
branches;
next	1.4;

1.4
date	2001.01.28.18.06.17;	author earnie;	state Exp;
branches;
next	1.3;

1.3
date	2001.01.18.15.40.50;	author earnie;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.21.02.50.03;	author earnie;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;

1.6.10.1
date	2002.03.22.22.35.38;	author dannysmith;	state Exp;
branches;
next	1.6.10.2;

1.6.10.2
date	2002.03.26.22.42.57;	author dannysmith;	state Exp;
branches;
next	1.6.10.3;

1.6.10.3
date	2002.03.30.03.00.42;	author dannysmith;	state Exp;
branches;
next	1.6.10.4;

1.6.10.4
date	2002.05.07.05.03.06;	author dannysmith;	state Exp;
branches;
next	;

1.10.6.1
date	2002.09.20.01.14.20;	author dannysmith;	state Exp;
branches;
next	1.10.6.2;

1.10.6.2
date	2002.09.21.02.55.32;	author dannysmith;	state Exp;
branches;
next	1.10.6.3;

1.10.6.3
date	2002.09.24.08.02.21;	author dannysmith;	state Exp;
branches;
next	1.10.6.4;

1.10.6.4
date	2002.09.25.23.50.30;	author dannysmith;	state Exp;
branches;
next	1.10.6.5;

1.10.6.5
date	2002.09.26.21.55.05;	author dannysmith;	state Exp;
branches;
next	1.10.6.6;

1.10.6.6
date	2002.09.28.01.18.16;	author dannysmith;	state Exp;
branches;
next	1.10.6.7;

1.10.6.7
date	2002.09.29.21.51.05;	author dannysmith;	state Exp;
branches;
next	1.10.6.8;

1.10.6.8
date	2002.10.02.04.38.37;	author dannysmith;	state Exp;
branches;
next	1.10.6.9;

1.10.6.9
date	2002.10.16.22.33.36;	author dannysmith;	state Exp;
branches;
next	1.10.6.10;

1.10.6.10
date	2002.12.10.10.48.19;	author dannysmith;	state Exp;
branches;
next	1.10.6.11;

1.10.6.11
date	2003.03.31.22.32.19;	author dannysmith;	state Exp;
branches;
next	1.10.6.12;

1.10.6.12
date	2003.04.07.01.22.47;	author dannysmith;	state Exp;
branches;
next	;


desc
@@


1.38
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@/*
 * wchar.h
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is a part of the mingw-runtime package.
 * No warranty is given; refer to the file DISCLAIMER within the package.
 *
 * Defines of all functions for supporting wide characters. Actually it
 * just includes all those headers, which is not a good thing to do from a
 * processing time point of view, but it does mean that everything will be
 * in sync.
 *
 */

#ifndef	_WCHAR_H_
#define	_WCHAR_H_

/* All the headers include this file. */
#include <_mingw.h>

#ifndef RC_INVOKED

#define __need_size_t
#define __need_wint_t
#define __need_wchar_t
#define __need_NULL
#include <stddef.h>

#ifndef __VALIST
#if defined __GNUC__ && __GNUC__ >= 3
#define __need___va_list
#include <stdarg.h>
#define __VALIST __builtin_va_list
#else
#define __VALIST char*
#endif
#endif

#endif /* Not RC_INVOKED */

/*
 * MSDN says that isw* char classifications are in wchar.h and wctype.h.
 * Although the wctype names are ANSI, their exposure in this header is
 * not.
 */
#include <wctype.h>

#ifndef	__STRICT_ANSI__
/* This is necessary to support the the non-ANSI wchar declarations
   here. */
#include <sys/types.h>
#endif /* __STRICT_ANSI__ */

#define WCHAR_MIN	0
#define WCHAR_MAX	0xffff

#ifndef WEOF
#define	WEOF	(wchar_t)(0xFFFF)
#endif

#ifndef RC_INVOKED

#ifdef __cplusplus
extern "C" {
#endif

#ifndef _FILE_DEFINED  /* Also in stdio.h */
#define	_FILE_DEFINED
typedef struct _iobuf
{
	char*	_ptr;
	int	_cnt;
	char*	_base;
	int	_flag;
	int	_file;
	int	_charbuf;
	int	_bufsiz;
	char*	_tmpfname;
} FILE;
#endif	/* Not _FILE_DEFINED */

#ifndef _TIME_T_DEFINED  /* Also in time.h */
typedef long time_t;
#define _TIME_T_DEFINED
#endif

#ifndef _TM_DEFINED /* Also in time.h */
struct tm {
        int tm_sec;     /* seconds after the minute - [0,59] */
        int tm_min;     /* minutes after the hour - [0,59] */
        int tm_hour;    /* hours since midnight - [0,23] */
        int tm_mday;    /* day of the month - [1,31] */
        int tm_mon;     /* months since January - [0,11] */
        int tm_year;    /* years since 1900 */
        int tm_wday;    /* days since Sunday - [0,6] */
        int tm_yday;    /* days since January 1 - [0,365] */
        int tm_isdst;   /* daylight savings time flag */
        };
#define _TM_DEFINED
#endif

#ifndef _WSTDIO_DEFINED
/*  Also in stdio.h - keep in sync */
_CRTIMP int __cdecl __MINGW_NOTHROW	fwprintf (FILE*, const wchar_t*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW	wprintf (const wchar_t*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW	_snwprintf (wchar_t*, size_t, const wchar_t*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW	vfwprintf (FILE*, const wchar_t*, __VALIST);
_CRTIMP int __cdecl __MINGW_NOTHROW	vwprintf (const wchar_t*, __VALIST);
_CRTIMP int __cdecl __MINGW_NOTHROW	_vsnwprintf (wchar_t*, size_t, const wchar_t*, __VALIST);
_CRTIMP int __cdecl __MINGW_NOTHROW	fwscanf (FILE*, const wchar_t*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW	wscanf (const wchar_t*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW	swscanf (const wchar_t*, const wchar_t*, ...);
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	fgetwc (FILE*);
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	fputwc (wchar_t, FILE*);
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	ungetwc (wchar_t, FILE*);

/* These differ from the ISO C prototypes, which have a maxlen parameter like snprintf.  */
#ifndef __STRICT_ANSI__
_CRTIMP int __cdecl __MINGW_NOTHROW	swprintf (wchar_t*, const wchar_t*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW	vswprintf (wchar_t*, const wchar_t*, __VALIST);
#endif

#ifdef __MSVCRT__
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW fgetws (wchar_t*, int, FILE*);
_CRTIMP int __cdecl __MINGW_NOTHROW	fputws (const wchar_t*, FILE*);
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	getwc (FILE*);
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	getwchar (void);
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	putwc (wint_t, FILE*);
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	putwchar (wint_t);
#ifndef __STRICT_ANSI__
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _getws (wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_putws (const wchar_t*);
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	_wfdopen(int, const wchar_t *);
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	_wfopen (const wchar_t*, const wchar_t*);
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	_wfreopen (const wchar_t*, const wchar_t*, FILE*);
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	_wfsopen (const wchar_t*, const wchar_t*, int);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _wtmpnam (wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _wtempnam (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wrename (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wremove (const wchar_t*);
_CRTIMP void __cdecl __MINGW_NOTHROW	_wperror (const wchar_t*);
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	_wpopen (const wchar_t*, const wchar_t*);
#endif  /* __STRICT_ANSI__ */
#endif	/* __MSVCRT__ */

#ifndef __NO_ISOCEXT  /* externs in libmingwex.a */
int __cdecl __MINGW_NOTHROW snwprintf (wchar_t*, size_t, const wchar_t*, ...);
int __cdecl __MINGW_NOTHROW vsnwprintf (wchar_t*, size_t, const wchar_t*, __VALIST);
#ifndef __NO_INLINE__
__CRT_INLINE int __cdecl __MINGW_NOTHROW
vsnwprintf (wchar_t* s, size_t n, const wchar_t* format, __VALIST arg)
  { return _vsnwprintf ( s, n, format, arg);}
#endif
int __cdecl __MINGW_NOTHROW vwscanf (const wchar_t * __restrict__, __VALIST);
int __cdecl __MINGW_NOTHROW vfwscanf (FILE * __restrict__,
		       const wchar_t * __restrict__, __VALIST);
int __cdecl __MINGW_NOTHROW vswscanf (const wchar_t * __restrict__,
		       const wchar_t * __restrict__, __VALIST);
#endif

#define _WSTDIO_DEFINED
#endif /* _WSTDIO_DEFINED */

#ifndef _WSTDLIB_DEFINED /* also declared in stdlib.h */
_CRTIMP long __cdecl __MINGW_NOTHROW 	wcstol (const wchar_t*, wchar_t**, int);
_CRTIMP unsigned long __cdecl __MINGW_NOTHROW wcstoul (const wchar_t*, wchar_t**, int);
_CRTIMP double __cdecl __MINGW_NOTHROW	wcstod (const wchar_t*, wchar_t**);
#if !defined __NO_ISOCEXT /* in libmingwex.a */
float __cdecl __MINGW_NOTHROW wcstof (const wchar_t * __restrict__, wchar_t ** __restrict__);
long double __cdecl __MINGW_NOTHROW wcstold (const wchar_t * __restrict__, wchar_t ** __restrict__);
#endif /* __NO_ISOCEXT */
#ifdef __MSVCRT__ 
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _wgetenv(const wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wputenv(const wchar_t*);
_CRTIMP void __cdecl __MINGW_NOTHROW	_wsearchenv(const wchar_t*, const wchar_t*, wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wsystem(const wchar_t*);
_CRTIMP void __cdecl __MINGW_NOTHROW	_wmakepath(wchar_t*, const wchar_t*, const wchar_t*, const wchar_t*, const wchar_t*);
_CRTIMP void __cdecl __MINGW_NOTHROW	_wsplitpath (const wchar_t*, wchar_t*, wchar_t*, wchar_t*, wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _wfullpath (wchar_t*, const wchar_t*, size_t);
#endif
_CRTIMP __int64 __cdecl _wcstoi64(const wchar_t *, wchar_t **, int);
_CRTIMP __int64 __cdecl _wcstoi64_l(const wchar_t *, wchar_t **, int, _locale_t);
_CRTIMP unsigned __int64 __cdecl _wcstoui64(const wchar_t *, wchar_t **, int);
_CRTIMP unsigned __int64 __cdecl _wcstoui64_l(const wchar_t *, wchar_t **, int, _locale_t);
#define  _WSTDLIB_DEFINED
#endif /* _WSTDLIB_DEFINED */

#ifndef _WTIME_DEFINED
#ifndef __STRICT_ANSI__
#ifdef __MSVCRT__
/* wide function prototypes, also declared in time.h */
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW	_wasctime (const struct tm*);
#if __MSVCRT_VERSION__ < 0x0800
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW	_wctime (const time_t*);
#endif
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW	_wstrdate (wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW	_wstrtime (wchar_t*);
#if __MSVCRT_VERSION__ >= 0x601
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW	_wctime64 (const __time64_t*);
#endif
#if __MSVCRT_VERSION__ >= 0x0800
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW	_wctime32 (const __time32_t*);
#ifndef _USE_32BIT_TIME_T
_CRTALIAS wchar_t* __cdecl __MINGW_NOTHROW	_wctime (const time_t* _v)	{ return(_wctime64 (_v)); }
#else
_CRTALIAS wchar_t* __cdecl __MINGW_NOTHROW	_wctime (const time_t* _v)	{ return(_wctime32 (_v)); }
#endif
#endif

#endif /* __MSVCRT__ */
#endif /* __STRICT_ANSI__ */
_CRTIMP size_t __cdecl __MINGW_NOTHROW	wcsftime (wchar_t*, size_t, const wchar_t*, const struct tm*);
#define _WTIME_DEFINED
#endif /* _WTIME_DEFINED */


#ifndef _WSTRING_DEFINED
/*
 * Unicode versions of the standard string calls.
 * Also in string.h.
 */
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcscat (wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcschr (const wchar_t*, wchar_t);
_CRTIMP int __cdecl __MINGW_NOTHROW	wcscmp (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	wcscoll (const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcscpy (wchar_t*, const wchar_t*);
_CRTIMP size_t __cdecl __MINGW_NOTHROW	wcscspn (const wchar_t*, const wchar_t*);
/* Note:  _wcserror requires __MSVCRT_VERSION__ >= 0x0700.  */
_CRTIMP size_t __cdecl __MINGW_NOTHROW	wcslen (const wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcsncat (wchar_t*, const wchar_t*, size_t);
_CRTIMP int __cdecl __MINGW_NOTHROW	wcsncmp(const wchar_t*, const wchar_t*, size_t);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcsncpy(wchar_t*, const wchar_t*, size_t);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcspbrk(const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcsrchr(const wchar_t*, wchar_t);
_CRTIMP size_t __cdecl __MINGW_NOTHROW	wcsspn(const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcsstr(const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcstok(wchar_t*, const wchar_t*);
_CRTIMP size_t __cdecl __MINGW_NOTHROW	wcsxfrm(wchar_t*, const wchar_t*, size_t);

#ifndef	__STRICT_ANSI__
/*
 * Unicode versions of non-ANSI functions provided by CRTDLL.
 */

/* NOTE: _wcscmpi not provided by CRTDLL, this define is for portability */
#define		_wcscmpi	_wcsicmp

_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _wcsdup (const wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wcsicmp (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wcsicoll (const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _wcslwr (wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wcsnicmp (const wchar_t*, const wchar_t*, size_t);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _wcsnset (wchar_t*, wchar_t, size_t);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _wcsrev (wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _wcsset (wchar_t*, wchar_t);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _wcsupr (wchar_t*);

#ifdef __MSVCRT__
_CRTIMP int __cdecl __MINGW_NOTHROW  _wcsncoll(const wchar_t*, const wchar_t*, size_t);
_CRTIMP int   __cdecl __MINGW_NOTHROW _wcsnicoll(const wchar_t*, const wchar_t*, size_t);
#if __MSVCRT_VERSION__ >= 0x0700
_CRTIMP  wchar_t* __cdecl __MINGW_NOTHROW _wcserror(int);
_CRTIMP  wchar_t* __cdecl __MINGW_NOTHROW __wcserror(const wchar_t*);
#endif
#endif

#ifndef	_NO_OLDNAMES
/* NOTE: There is no _wcscmpi, but this is for compatibility. */
int __cdecl __MINGW_NOTHROW wcscmpi (const wchar_t *, const wchar_t *);
#ifndef __NO_INLINE__
__CRT_INLINE int __cdecl __MINGW_NOTHROW
wcscmpi (const wchar_t * __ws1, const wchar_t * __ws2)
  {return _wcsicmp (__ws1, __ws2);}
#endif
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcsdup (const wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	wcsicmp (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	wcsicoll (const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcslwr (wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	wcsnicmp (const wchar_t*, const wchar_t*, size_t);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcsnset (wchar_t*, wchar_t, size_t);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcsrev (wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcsset (wchar_t*, wchar_t);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcsupr (wchar_t*);
#endif	/* Not _NO_OLDNAMES */

#endif	/* Not strict ANSI */

#define _WSTRING_DEFINED
#endif  /* _WSTRING_DEFINED */

/* These are resolved by -lmingwex. Alternatively, they can be resolved by
   adding -lmsvcp60 to your command line, which will give you the VC++
   versions of these functions. If you want the latter and don't have
   msvcp60.dll in your windows system directory, you can easily obtain
   it with a search from your favorite search engine.  */
#ifndef __STRICT_ANSI__
typedef wchar_t _Wint_t;
#endif

typedef int mbstate_t;

wint_t __cdecl __MINGW_NOTHROW btowc(int);
size_t __cdecl __MINGW_NOTHROW mbrlen(const char * __restrict__, size_t,
		      mbstate_t * __restrict__);
size_t __cdecl __MINGW_NOTHROW mbrtowc(wchar_t * __restrict__, const char * __restrict__,
		       size_t, mbstate_t * __restrict__);
size_t __cdecl __MINGW_NOTHROW mbsrtowcs(wchar_t * __restrict__, const char ** __restrict__,
			 size_t, mbstate_t * __restrict__);
size_t __cdecl __MINGW_NOTHROW wcrtomb(char * __restrict__, wchar_t,
		       mbstate_t * __restrict__);
size_t __cdecl __MINGW_NOTHROW wcsrtombs(char * __restrict__, const wchar_t ** __restrict__,
			 size_t, mbstate_t * __restrict__);
int __cdecl __MINGW_NOTHROW wctob(wint_t);

#ifndef __NO_ISOCEXT /* these need static lib libmingwex.a */
int __cdecl __MINGW_NOTHROW fwide(FILE*, int);
int __cdecl __MINGW_NOTHROW mbsinit(const mbstate_t*);
#ifndef __NO_INLINE__
__CRT_INLINE int __cdecl __MINGW_NOTHROW fwide(FILE* __UNUSED_PARAM(stream),
					       int mode)
  {return mode;} /* Nothing to do  */
__CRT_INLINE int __cdecl __MINGW_NOTHROW mbsinit(const mbstate_t* __UNUSED_PARAM(ps))
  {return 1;}
#endif
wchar_t* __cdecl __MINGW_NOTHROW wmemset(wchar_t *, wchar_t, size_t);
wchar_t* __cdecl __MINGW_NOTHROW wmemchr(const wchar_t*, wchar_t, size_t);
int wmemcmp(const wchar_t*, const wchar_t *, size_t);
wchar_t* __cdecl __MINGW_NOTHROW wmemcpy(wchar_t* __restrict__,
		         const wchar_t* __restrict__,
			 size_t);
wchar_t* __cdecl __MINGW_NOTHROW wmemmove(wchar_t* s1, const wchar_t *, size_t);
long long __cdecl __MINGW_NOTHROW wcstoll(const wchar_t * __restrict__,
			  wchar_t** __restrict__, int);
unsigned long long __cdecl __MINGW_NOTHROW wcstoull(const wchar_t * __restrict__,
			    wchar_t ** __restrict__, int);
#endif /* __NO_ISOCEXT */

#ifndef	__STRICT_ANSI__
/* non-ANSI wide char functions from io.h, direct.h, sys/stat.h and locale.h.  */

#ifndef	_FSIZE_T_DEFINED
typedef	unsigned long	_fsize_t;
#define _FSIZE_T_DEFINED
#endif

#ifndef _WFINDDATA_T_DEFINED
struct _wfinddata_t {
	unsigned	attrib;
	time_t		time_create;	/* -1 for FAT file systems */
	time_t		time_access;	/* -1 for FAT file systems */
	time_t		time_write;
	_fsize_t	size;
	wchar_t		name[260];	/* may include spaces. */
};
struct _wfinddatai64_t {
	unsigned    attrib;
	time_t      time_create;
	time_t      time_access;
	time_t      time_write;
	__int64     size;
	wchar_t     name[260];
};
#if __MSVCRT_VERSION__ >= 0x0601
struct __wfinddata64_t {
        unsigned    attrib;
        __time64_t  time_create;
        __time64_t  time_access;
        __time64_t  time_write;
/* 8 bytes are returned so it can't be _fsize_t */
        __int64    size;
        wchar_t     name[260];
};
#endif
#if __MSVCRT_VERSION__ >= 0x0800
#include <stdio.h>
struct __wfinddata32_t {
	unsigned	attrib;
	__time32_t	time_create;
	__time32_t	time_access;
	__time32_t	time_write;
	__int32		size;
	wchar_t		name[FILENAME_MAX];
};

struct _wfinddata32i64_t {
	unsigned	attrib;
	__time32_t	time_create;
	__time32_t	time_access;
	__time32_t	time_write;
	__int64		size;
	wchar_t		name[FILENAME_MAX];
};

struct _wfinddata64i32_t {
	unsigned	attrib;
	__time64_t	time_create;
	__time64_t	time_access;
	__time64_t	time_write;
	__int32		size;
	wchar_t		name[FILENAME_MAX];
};
#endif /* __MSVCRT_VERSION__ >= 0x0800 */
#define _WFINDDATA_T_DEFINED
#endif

/* Wide character versions. Also defined in io.h. */
/* CHECK: I believe these only exist in MSVCRT, and not in CRTDLL. Also
   applies to other wide character versions? */
#if !defined (_WIO_DEFINED)
#if defined (__MSVCRT__)
#include <stdint.h>  /* For intptr_t.  */
_CRTIMP int __cdecl __MINGW_NOTHROW	_waccess (const wchar_t*, int);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wchmod (const wchar_t*, int);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wcreat (const wchar_t*, int);
#if __MSVCRT_VERSION__ < 0x0800
_CRTIMP long __cdecl __MINGW_NOTHROW	_wfindfirst (const wchar_t*, struct _wfinddata_t *);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wfindnext (long, struct _wfinddata_t *);
#endif
_CRTIMP int __cdecl __MINGW_NOTHROW	_wunlink (const wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wopen (const wchar_t*, int, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wsopen (const wchar_t*, int, int, ...);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _wmktemp (wchar_t*);
#if __MSVCRT_VERSION__ < 0x0800
_CRTIMP long __cdecl __MINGW_NOTHROW	_wfindfirsti64 (const wchar_t*, struct _wfinddatai64_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW 	_wfindnexti64 (long, struct _wfinddatai64_t*);
#else
_CRTIMP long __cdecl __MINGW_NOTHROW	_wfindfirst32i64 (const wchar_t*, struct _wfinddata32i64_t*);
_CRTIMP long __cdecl __MINGW_NOTHROW	_wfindfirst64i32 (const wchar_t*, struct _wfinddata64i32_t*);
_CRTIMP int  __cdecl __MINGW_NOTHROW	_wfindnext32i64 (long, struct _wfinddata32i64_t*);
_CRTIMP int  __cdecl __MINGW_NOTHROW	_wfindnext64i32 (long, struct _wfinddata64i32_t*);
#endif /* __MSVCRT_VERSION__ < 0x0800 */
#if __MSVCRT_VERSION__ >= 0x0601
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wfindfirst64(const wchar_t*, struct __wfinddata64_t*); 
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wfindnext64(intptr_t, struct __wfinddata64_t*);
#endif /* __MSVCRT_VERSION__ >= 0x0601 */
#if __MSVCRT_VERSION__ >= 0x0800
_CRTIMP long __cdecl __MINGW_NOTHROW	_wfindfirst32 (const wchar_t*, struct __wfinddata32_t*);
_CRTIMP int  __cdecl __MINGW_NOTHROW	_wfindnext32 (long, struct __wfinddata32_t*);
#ifndef _USE_32BIT_TIME_T
_CRTALIAS long __cdecl __MINGW_NOTHROW	_wfindfirst (const wchar_t* _v1, struct _wfinddata_t* _v2)	 { return(_wfindfirst64i32 (_v1,(struct _wfinddata64i32_t*)_v2)); }
_CRTALIAS int  __cdecl __MINGW_NOTHROW	_wfindnext (long _v1, struct _wfinddata_t* _v2)			 { return(_wfindnext64i32  (_v1,(struct _wfinddata64i32_t*)_v2)); }
_CRTALIAS long __cdecl __MINGW_NOTHROW	_wfindfirsti64 (const wchar_t* _v1, struct _wfinddatai64_t* _v2) { return(_wfindfirst64 (_v1,(struct __wfinddata64_t*)_v2)); }
_CRTALIAS int  __cdecl __MINGW_NOTHROW	_wfindnexti64 (long _v1, struct _wfinddatai64_t* _v2)		 { return(_wfindnext64  (_v1,(struct __wfinddata64_t*)_v2)); }
#else
_CRTALIAS long __cdecl __MINGW_NOTHROW	_wfindfirst (const wchar_t* _v1, struct _wfinddata_t* _v2)	 { return(_wfindfirst32 (_v1,(struct __wfinddata32_t*)_v2)); }
_CRTALIAS int  __cdecl __MINGW_NOTHROW	_wfindnext (long _v1, struct _wfinddata_t* _v2)			 { return(_wfindnext32  (_v1,(struct __wfinddata32_t*)_v2)); }
_CRTALIAS long __cdecl __MINGW_NOTHROW	_wfindfirsti64 (const wchar_t* _v1, struct _wfinddatai64_t* _v2) { return(_wfindfirst32i64 (_v1,(struct _wfinddata32i64_t*)_v2)); }
_CRTALIAS int  __cdecl __MINGW_NOTHROW	_wfindnexti64 (long _v1, struct _wfinddatai64_t* _v2)		 { return(_wfindnext32i64  (_v1,(struct _wfinddata32i64_t*)_v2)); }
#endif /* !_USE_32BIT_TIME_T*/
#endif /* __MSVCRT_VERSION__ >= 0x0800 */

#endif /* defined (__MSVCRT__) */
#define _WIO_DEFINED
#endif /* _WIO_DEFINED */

#ifndef _WDIRECT_DEFINED
/* Also in direct.h */
#ifdef __MSVCRT__
_CRTIMP int __cdecl __MINGW_NOTHROW	  _wchdir (const wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW  _wgetcwd (wchar_t*, int);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW  _wgetdcwd (int, wchar_t*, int);
_CRTIMP int __cdecl __MINGW_NOTHROW	  _wmkdir (const wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	  _wrmdir (const wchar_t*);
#endif	/* __MSVCRT__ */
#define _WDIRECT_DEFINED
#endif /* _WDIRECT_DEFINED */

#ifndef _STAT_DEFINED
/*
 * The structure manipulated and returned by stat and fstat.
 *
 * NOTE: If called on a directory the values in the time fields are not only
 * invalid, they will cause localtime et. al. to return NULL. And calling
 * asctime with a NULL pointer causes an Invalid Page Fault. So watch it!
 */
struct _stat
{
	_dev_t	st_dev;		/* Equivalent to drive number 0=A 1=B ... */
	_ino_t	st_ino;		/* Always zero ? */
	_mode_t	st_mode;	/* See above constants */
	short	st_nlink;	/* Number of links. */
	short	st_uid;		/* User: Maybe significant on NT ? */
	short	st_gid;		/* Group: Ditto */
	_dev_t	st_rdev;	/* Seems useless (not even filled in) */
	_off_t	st_size;	/* File size in bytes */
	time_t	st_atime;	/* Accessed date (always 00:00 hrs local
				 * on FAT) */
	time_t	st_mtime;	/* Modified time */
	time_t	st_ctime;	/* Creation time */
};

#ifndef	_NO_OLDNAMES
/* NOTE: Must be the same as _stat above. */
struct stat
{
	dev_t	st_dev;		/* Equivalent to drive number 0=A 1=B ... */
	ino_t	st_ino;		/* Always zero ? */
	mode_t	st_mode;	/* See above constants */
	short	st_nlink;	/* Number of links. */
	short	st_uid;		/* User: Maybe significant on NT ? */
	short	st_gid;		/* Group: Ditto */
	dev_t	st_rdev;	/* Seems useless (not even filled in) */
	off_t	st_size;	/* File size in bytes */
	time_t	st_atime;	/* Accessed date (always 00:00 hrs local
				 * on FAT) */
	time_t	st_mtime;	/* Modified time */
	time_t	st_ctime;	/* Creation time */
};
#endif /* _NO_OLDNAMES */

#if defined (__MSVCRT__)
struct _stati64 {
    _dev_t st_dev;
    _ino_t st_ino;
    unsigned short st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __int64 st_size;
    time_t st_atime;
    time_t st_mtime;
    time_t st_ctime;
};

#if __MSVCRT_VERSION__ >= 0x0601
struct __stat64
{
    _dev_t st_dev;
    _ino_t st_ino;
    _mode_t st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __int64 st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
};
#endif  /* __MSVCRT_VERSION__ >= 0x0601*/

#if __MSVCRT_VERSION__ >= 0x0800
struct __stat32
{
	_dev_t		st_dev;
	_ino_t		st_ino;
	_mode_t		st_mode;
	short		st_nlink;
	short		st_uid;
	short		st_gid;
	_dev_t		st_rdev;
	__int32		st_size;
	__time32_t	st_atime;
	__time32_t	st_mtime;
	__time32_t	st_ctime;
};
struct _stat32i64 {
	_dev_t		st_dev;
	_ino_t		st_ino;
	_mode_t		st_mode;
	short		st_nlink;
	short		st_uid;
	short		st_gid;
	_dev_t		st_rdev;
	__int64		st_size;
	__time32_t	st_atime;
	__time32_t	st_mtime;
	__time32_t	st_ctime;
};
struct _stat64i32 {
	_dev_t		st_dev;
	_ino_t		st_ino;
	_mode_t		st_mode;
	short		st_nlink;
	short		st_uid;
	short		st_gid;
	_dev_t		st_rdev;
	__int32		st_size;
	__time64_t	st_atime;
	__time64_t	st_mtime;
	__time64_t	st_ctime;
};
#endif /* __MSVCRT_VERSION__ >= 0x0800 */

#endif  /* __MSVCRT__ */
#define _STAT_DEFINED
#endif /* _STAT_DEFINED */

#if !defined ( _WSTAT_DEFINED)
/* also declared in sys/stat.h */
#if defined __MSVCRT__
#if __MSVCRT_VERSION__ < 0x0800
_CRTIMP int __cdecl __MINGW_NOTHROW	_wstat (const wchar_t*, struct _stat*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wstati64 (const wchar_t*, struct _stati64*);
#endif /* __MSVCRT_VERSION__ < 0x0800 */
#if __MSVCRT_VERSION__ >= 0x0601
_CRTIMP int __cdecl __MINGW_NOTHROW _wstat64 (const wchar_t*, struct __stat64*);
#endif /* __MSVCRT_VERSION__ >= 0x0601 */
#if __MSVCRT_VERSION__ >= 0x0800
_CRTIMP int __cdecl __MINGW_NOTHROW	_wstat32 (const wchar_t*, struct __stat32*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wstat32i64 (const wchar_t*, struct _stat32i64*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wstat64i32 (const wchar_t*, struct _stat64i32*);
#ifndef _USE_32BIT_TIME_T
_CRTALIAS int __cdecl __MINGW_NOTHROW	_wstat (const wchar_t* _v1, struct _stat* _v2)	     { return(_wstat64i32 (_v1,(struct _stat64i32*)_v2)); }
_CRTALIAS int __cdecl __MINGW_NOTHROW	_wstati64 (const wchar_t* _v1, struct _stati64* _v2) { return(_wstat64 (_v1,(struct __stat64*)_v2)); }
#else
_CRTALIAS int __cdecl __MINGW_NOTHROW	_wstat (const wchar_t* _v1, struct _stat* _v2)	     { return(_wstat32 (_v1,(struct __stat32*)_v2)); }
_CRTALIAS int __cdecl __MINGW_NOTHROW	_wstati64 (const wchar_t* _v1, struct _stati64* _v2) { return(_wstat32i64 (_v1,(struct _stat32i64*)_v2)); }
#endif /* !_USE_32BIT_TIME_T */
#endif /* __MSVCRT_VERSION__ >= 0x0800 */
#endif  /* __MSVCRT__ */
#define _WSTAT_DEFINED
#endif /* ! _WSTAT_DEFIND  */

#ifndef _WLOCALE_DEFINED  /* also declared in locale.h */
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _wsetlocale (int, const wchar_t*);
#define _WLOCALE_DEFINED
#endif

#ifndef _WPROCESS_DEFINED  /* also declared in process.h */
#include <stdint.h>  /* For intptr_t.  */
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wexecl	(const wchar_t*, const wchar_t*, ...);
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wexecle	(const wchar_t*, const wchar_t*, ...);
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wexeclp	(const wchar_t*, const wchar_t*, ...);
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wexeclpe	(const wchar_t*, const wchar_t*, ...);
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wexecv	(const wchar_t*, const wchar_t* const*);
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wexecve	(const wchar_t*, const wchar_t* const*, const wchar_t* const*);
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wexecvp	(const wchar_t*, const wchar_t* const*);
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wexecvpe	(const wchar_t*, const wchar_t* const*, const wchar_t* const*);

_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wspawnl	(int, const wchar_t*, const wchar_t*, ...);
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wspawnle	(int, const wchar_t*, const wchar_t*, ...);
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wspawnlp	(int, const wchar_t*, const wchar_t*, ...);
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wspawnlpe	(int, const wchar_t*, const wchar_t*, ...);
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wspawnv	(int, const wchar_t*, const wchar_t* const*);
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wspawnve	(int, const wchar_t*, const wchar_t* const*, const wchar_t* const*);
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wspawnvp	(int, const wchar_t*, const wchar_t* const*);
_CRTIMP intptr_t __cdecl __MINGW_NOTHROW _wspawnvpe	(int, const wchar_t*, const wchar_t* const*, const wchar_t* const*);

#define _WPROCESS_DEFINED
#endif
#endif /* not __STRICT_ANSI__ */

#ifdef __cplusplus
}	/* end of extern "C" */
#endif

#endif /* Not RC_INVOKED */

#endif /* not _WCHAR_H_ */

@


1.37
log
@	* include/wchar.h (_wcstrtoi64): Declare.
	(_wcstrtoi64_l): Ditto.
	(_wcstrtoui64): Ditto.
	(_wcstrtoui64_l): Ditto.
@
text
@@


1.36
log
@2011-05-22  Chris Sutcliffe  <ir0nh34d@@users.sourceforge.net>

        * include/wchar.h: Include stdio.h to grab definition of FILENAME_MAX.

        Thanks to Jim Bell for the report and Greg Chicares for the fix.
@
text
@d180 4
@


1.35
log
@2010-02-14  Roumen Petrov  <rumen@@users.sourceforge.net>

        Issue [2134161]: time64 functions and types for msvcrt >= 8.0
        (initial implementation)

        * new type: __time32_t

        * new structures: _finddata32_t, _finddata32i64_t, _finddata64i32_t,
        __stat32, _stat32i64, _stat64i32, __timeb32, __utimbuf32,
        __wfinddata32_t, _wfinddata32i64_t, _wfinddata64i32_t

        * new functions: _ctime32, _difftime32, _difftime64, _findfirst32
        _findfirst32i64, _findfirst64i32, _findnext32, _findnext32i64,
        _findnext64i32, _fstat32, _fstat32i64, _fstat64i32, _ftime32,
        _futime32, _gmtime32, _localtime32, _mkgmtime32, _mkgmtime64,
        _mktime32, _stat32, _stat32i64, _stat64i32, _time32, _utime32,
        _wctime32, _wfindfirst32, _wfindfirst32i64, _wfindfirst64i32,
        _wfindnext32, _wfindnext32i64, _wfindnext64i32, _wstat32,
        _wstat32i64, _wstat64i32,_wutime32

        * new define _USE_32BIT_TIME_T set 32 or 64 aliases for: time_t,
        ctime, difftime, _findfirst, _findfirsti64, _findnext, _findnexti64,
        _fstat, _fstati64, _ftime, _futime, gmtime, localtime, mktime,
        _stat, _stati64, time, _utime, _wctime, _wfindfirst, _wfindfirsti64,
        _wfindnext, _wfindnexti64, _wstat, _wstati64, _wutime
@
text
@d370 1
@


1.34
log
@2009-08-08  Danny Smith  <dannysmith@@users.sourceforge.net>

        * include/math.h (__fpclassifyl, __isnan, __isnanf, isnanl, __signbit,
        __signbitf, __signbitl, sinhf, tanhf, expf, frexpf, ldexpf, hypotf, powf,
        __fp_unordered_compare): Add prototypes.
        * include/stdio.h (vsnwprintf): Add prototype.
        * include/wchar.h (vsnwprintf): Add prototype.
        * include/unistd.h (ftruncate): Move prototype out of __NO_INLINE__ guard.
@
text
@d188 1
d190 1
d196 9
d369 28
d409 1
d412 1
d417 1
d420 6
d430 16
d535 45
a579 1
#endif  /* __MSVCRT_VERSION__ */
d587 1
d590 1
d594 12
@


1.33
log
@2009-07-18  Gregory McGarry  <gregorymcgarry@@users.sourceforge.net>

        * include/inttypes.h include/math.h include/stdio.h include/stdlib.h
        include/string.h include/unistd.h include/wchar.h: Add __NO_INLINE__ guard
        to all inline functions.
@
text
@d146 2
a147 1
int __cdecl __MINGW_NOTHROW snwprintf (wchar_t* s, size_t n, const wchar_t*  format, ...);
d253 1
@


1.32
log
@        * include/stdio.h (swprintf, vswprintf): Guard with  #ifndef __STRICT_ANSI__
        * include/wchar.h (swprintf, vswprintf): Likewise.
@
text
@d147 1
d151 1
d252 1
d256 1
@


1.31
log
@Committed as obvious.

	[mingw-Bugs-1801641]
	* include/wchar.h (_wfdopen): Const-ify second arg.
	* include/stdio.h (_wfdopen): Likewise.
	Thanks to <tdragon at users dot sourceforge net>
@
text
@a104 1
_CRTIMP int __cdecl __MINGW_NOTHROW	swprintf (wchar_t*, const wchar_t*, ...);
a107 1
_CRTIMP int __cdecl __MINGW_NOTHROW	vswprintf (wchar_t*, const wchar_t*, __VALIST);
d116 6
@


1.30
log
@2008-04-25  Danny Smith  <dannysmith@@users.sourceforge.net>

        * include/process.h: Include stdint.h for intptr_t definition.
        (_execl, _execle, _execlp, _execlpe, _execv, _execve, _execvp, _execvpe,
        _spawnl, _spawnle, _spawnlp, _spawnlpe, _spawnv, _spawnve, _spawnvp,
        _spawnvpe): Return intptr_t.
        (execl, execle, execlp, execlpe, execv, execve, execvp, execvpe, spawnl,
        spawnle, spawnlp, spawnlpe, spawnv, spawnve, spawnvp, spawnvpe): Return
        intptr_t.

        [!_WPROCESS_DEFINED]: Include stdint.h for intptr_t definition.
        (_wexecl, _wexecle, _wexeclp, _wexeclpe, _wexecv, _wexecve, _wexecvp,
        _wexecvpe, _wspawnl, _wspawnle, _wspawnlp, _wspawnlpe, _wspawnv, _wspawnve,
        _wspawnvp, _wspawnvpe): Return intptr_t.
@
text
@d128 1
a128 1
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	_wfdopen(int, wchar_t *);
@


1.29
log
@2008-04-25  Danny Smith  <dannysmith@@users.sourceforge.net>

        * include/wchar.h (fwide): Return success code rather than failure in inline
        definition.
        * mingwex/fwide.c (fwide): ANSI-fy. Get rid of Q8 comments.  Return success
        code rather than failure.
@
text
@a482 2
#endif /* not __STRICT_ANSI__ */

d484 18
a501 17
_CRTIMP int __cdecl __MINGW_NOTHROW _wexecl	(const wchar_t*, const wchar_t*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW _wexecle	(const wchar_t*, const wchar_t*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW _wexeclp	(const wchar_t*, const wchar_t*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW _wexeclpe	(const wchar_t*, const wchar_t*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW _wexecv	(const wchar_t*, const wchar_t* const*);
_CRTIMP int __cdecl __MINGW_NOTHROW _wexecve	(const wchar_t*, const wchar_t* const*, const wchar_t* const*);
_CRTIMP int __cdecl __MINGW_NOTHROW _wexecvp	(const wchar_t*, const wchar_t* const*);
_CRTIMP int __cdecl __MINGW_NOTHROW _wexecvpe	(const wchar_t*, const wchar_t* const*, const wchar_t* const*);

_CRTIMP int __cdecl __MINGW_NOTHROW _wspawnl	(int, const wchar_t*, const wchar_t*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW _wspawnle	(int, const wchar_t*, const wchar_t*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW _wspawnlp	(int, const wchar_t*, const wchar_t*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW _wspawnlpe	(int, const wchar_t*, const wchar_t*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW _wspawnv	(int, const wchar_t*, const wchar_t* const*);
_CRTIMP int __cdecl __MINGW_NOTHROW _wspawnve	(int, const wchar_t*, const wchar_t* const*, const wchar_t* const*);
_CRTIMP int __cdecl __MINGW_NOTHROW _wspawnvp	(int, const wchar_t*, const wchar_t* const*);
_CRTIMP int __cdecl __MINGW_NOTHROW _wspawnvpe	(int, const wchar_t*, const wchar_t* const*, const wchar_t* const*);
d505 1
@


1.28
log
@2008-01-19 Danny Smith <dannysmithusers.sourceforge.net

        * inclue/wchar.h (fwide): Add prototype and guard inline definition.
        (mbsinit): Likewise.
@
text
@d294 2
a295 2
			       int __UNUSED_PARAM(mode))
  {return -1;} /* limited to byte orientation */
@


1.27
log
@2007-10-03  Bernd Becker <hugin@@users.sourceforge.net>

        * include/io.h (__finddata64_t, __wfinddata64_t): changed member 'size'
        from '_fsize_t' to '__int64' to be consistent with the other ...64
        structures and the value set there is 8 bytes not 4.  Add guard for both
        as the are only used by functions available from 6.1 on.

        * include/malloc.h (_HEAP_MAXREQ): Define.
        (_aligned_offset_recalloc): Define.
        (_aligned_recalloc()): Define.

        * include/math.h: fixed a typo in a comment.
        (atanhf): Fixed declaration.

        * include/wchar.h (__wfinddata64_t): changed member 'size' from '_fsize_t'
        to '__int64' to be consistent with the other ...64 structures and the value
        set there is 8 bytes not 4.  Added guard as this function is only used by
        functions available from 6.1 on.

        * include/sys/stat.h: some members of 'stat' were declared with types with
        a prefixed underscore, while the ones without the underscore should have
        been used.  Added guard to '__stat64' as it is only used by functions
        available from 6.1 on.  Added the wide character versions of the
        exec()/spawn() family for completion
        (_stati64): changed the type of the 'st_mode' member from 'unsigned int' to
        '_mode_t'

        * include/sys/timeb.h (timeb, _timb): changed the type of the 'time' member
        from 'long' to 'time_t'
        (__timeb64): moved declaration of structure directly before the declaration
        of the function '_ftime64()', so it is guarded as well

        * include/sys/utime.h (__utimbuf64): moved declaration of structure directly
        before the declaration of the functions using it, so it is guarded as well
@
text
@d290 3
d298 1
@


1.26
log
@	* incude/wchar.h (_wsystem) Declare.
	(_wputenv) Declare.
	(_wgetenv): Declare.
	(_wsearchenv): Declare.
	(_wmakepath): Declare.
	(_wsplitpath): Declare.
	(_wfullpath): Declare.
	* incude/stdlib.h (_wsystem) Declare.
	(_wputenv, _wgetenv, _wsearchenv, _wmakepath, _wsplitpath, _wfullpath):
	Move into _WSTDLIB_DEFINED guard.
	* include/tchar.h (_tsystem): New UNICODE mapping define.
@
text
@d62 1
a62 1
#ifdef __cplusplus 
d118 1
a118 1
#ifdef __MSVCRT__ 
d155 1
d191 1
a191 1
#endif /* _WTIME_DEFINED */ 
d292 1
a292 1
  {return -1;} /* limited to byte orientation */ 
d333 1
d336 1
a336 1
        __time64_t  time_create;    
d339 2
a340 1
        _fsize_t    size;
d343 1
d374 1
a374 1
#ifdef __MSVCRT__ 
d412 3
a414 3
	_dev_t	st_dev;		/* Equivalent to drive number 0=A 1=B ... */
	_ino_t	st_ino;		/* Always zero ? */
	_mode_t	st_mode;	/* See above constants */
d418 2
a419 2
	_dev_t	st_rdev;	/* Seems useless (not even filled in) */
	_off_t	st_size;	/* File size in bytes */
d440 1
a440 1
    };
d442 1
d457 1
d481 22
@


1.25
log
@	*include/assert.h:  Qualify all  functions with __MINGW_NOTHROW.
	*include/conio.h:  Likewise.
	*include/ctype.h:  Likewise.
	*include/direct.h:  Likewise.
	*include/dos.h:  Likewise.
	*include/errno.h:  Likewise.
	*include/fenv.h:  Likewise.
	*include/float.h:  Likewise.
	*include/inttypes.h:  Likewise.
	*include/io.h:  Likewise.
	*include/libgen.h:  Likewise.
	*include/locale.h:  Likewise.
	*include/malloc.h:  Likewise.
	*include/mbctype.h:  Likewise.
	*include/mbstring.h:  Likewise.
	*include/process.h:  Likewise.
	*include/search.h:  Likewise.
	*include/setjmp.h:  Likewise.
	*include/signal.h:  Likewise.
	*include/stdio.h:  Likewise.
	*include/stdlib.h:  Likewise.
	*include/string.h:  Likewise.
	*include/time.h:  Likewise.
	*include/wchar.h:  Likewise.
	*include/sys/stat.h:  Likewise.
	*include/sys/time.h:  Likewise.
	*include/sys/timeb.h:  Likewise.
	*include/sys/utime.h:  Likewise.
@
text
@a154 1

d156 3
a158 3
_CRTIMP long __cdecl __MINGW_NOTHROW 		wcstol (const wchar_t*, wchar_t**, int);
_CRTIMP unsigned long __cdecl __MINGW_NOTHROW	wcstoul (const wchar_t*, wchar_t**, int);
_CRTIMP double __cdecl __MINGW_NOTHROW		wcstod (const wchar_t*, wchar_t**);
d163 9
@


1.24
log
@	Import David Gay's gdtoa library.

	* mingwex/gdtoa: New directory.
	* mingwex/gdtoa/(arithchk.c, dmisc.c, dtoa.c, g__fmt.c, g_dfmt.c,
	g_ffmt.c, g_xfmt.c, gd_arith.h, gd_qnan.h, gdtoa.c, gdtoa.h,
	gdtoaimp.h, gethex.c, gmisc.c, hd_init.c, hexnan.c, misc.c, qnan.c,
	README, smisc.c, strtodg.c, strtodnrp.c, strtof.c, strtopx.c, sum.c,
	ulp.c): New files.
	* mingwex/(strtof.c, strtold.c, ldtoa.c): Remove files.
	* mingwex/math/(cephes-emath.c, cephes-emath.h): Remove files.
	* mingwex/mb_wc_common.h (get_cp_from_locale); Rename to get_codepage().
        * mingwex/(btowc.c, wctob.c, mbrtowc.c, wcrtomb.c): Adjust call to get_codepage().
	* mingwex/wcstold.c: Avoid using strtold internals.
	* mingwex/wcstof.c: Rewrite.
	* mingwex/Makefile.in (GDTOA_DISTFILES): Add to distribution.
	(GDTOA_OBJS): Add to library.
	(DISTFILES): Remove strtof.c strtold.c ldtoa.c cephes-emath.c cephes-emath.h.
	(STDLIB_OBJS): Remove.
	(STDLIB_STUB_OBJS): Remove strtof.o wcstof,o.
	(Q8_OBJS): Add wcstof.o wcstold.o.
	* include/stdlib.h (strtof): Remove inline definition.
	(wcstof): Likewise.
	* include/wchar.h (wcstof): Remove inline definition.
@
text
@d103 14
a116 14
_CRTIMP int __cdecl	fwprintf (FILE*, const wchar_t*, ...);
_CRTIMP int __cdecl	wprintf (const wchar_t*, ...);
_CRTIMP int __cdecl	swprintf (wchar_t*, const wchar_t*, ...);
_CRTIMP int __cdecl	_snwprintf (wchar_t*, size_t, const wchar_t*, ...);
_CRTIMP int __cdecl	vfwprintf (FILE*, const wchar_t*, __VALIST);
_CRTIMP int __cdecl	vwprintf (const wchar_t*, __VALIST);
_CRTIMP int __cdecl	vswprintf (wchar_t*, const wchar_t*, __VALIST);
_CRTIMP int __cdecl	_vsnwprintf (wchar_t*, size_t, const wchar_t*, __VALIST);
_CRTIMP int __cdecl	fwscanf (FILE*, const wchar_t*, ...);
_CRTIMP int __cdecl	wscanf (const wchar_t*, ...);
_CRTIMP int __cdecl	swscanf (const wchar_t*, const wchar_t*, ...);
_CRTIMP wint_t __cdecl	fgetwc (FILE*);
_CRTIMP wint_t __cdecl	fputwc (wchar_t, FILE*);
_CRTIMP wint_t __cdecl	ungetwc (wchar_t, FILE*);
d119 6
a124 6
_CRTIMP wchar_t* __cdecl fgetws (wchar_t*, int, FILE*);
_CRTIMP int __cdecl	fputws (const wchar_t*, FILE*);
_CRTIMP wint_t __cdecl	getwc (FILE*);
_CRTIMP wint_t __cdecl	getwchar (void);
_CRTIMP wint_t __cdecl	putwc (wint_t, FILE*);
_CRTIMP wint_t __cdecl	putwchar (wint_t);
d126 12
a137 12
_CRTIMP wchar_t* __cdecl _getws (wchar_t*);
_CRTIMP int __cdecl	_putws (const wchar_t*);
_CRTIMP FILE* __cdecl	_wfdopen(int, wchar_t *);
_CRTIMP FILE* __cdecl	_wfopen (const wchar_t*, const wchar_t*);
_CRTIMP FILE* __cdecl	_wfreopen (const wchar_t*, const wchar_t*, FILE*);
_CRTIMP FILE* __cdecl	_wfsopen (const wchar_t*, const wchar_t*, int);
_CRTIMP wchar_t* __cdecl _wtmpnam (wchar_t*);
_CRTIMP wchar_t* __cdecl _wtempnam (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl	_wrename (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl	_wremove (const wchar_t*);
_CRTIMP void __cdecl	_wperror (const wchar_t*);
_CRTIMP FILE* __cdecl	_wpopen (const wchar_t*, const wchar_t*);
d142 2
a143 2
int __cdecl snwprintf (wchar_t* s, size_t n, const wchar_t*  format, ...);
__CRT_INLINE int __cdecl
d146 2
a147 2
int __cdecl vwscanf (const wchar_t * __restrict__, __VALIST);
int __cdecl vfwscanf (FILE * __restrict__,
d149 1
a149 1
int __cdecl vswscanf (const wchar_t * __restrict__,
d157 3
a159 3
_CRTIMP long __cdecl 		wcstol (const wchar_t*, wchar_t**, int);
_CRTIMP unsigned long __cdecl	wcstoul (const wchar_t*, wchar_t**, int);
_CRTIMP double __cdecl		wcstod (const wchar_t*, wchar_t**);
d161 2
a162 2
float __cdecl wcstof (const wchar_t * __restrict__, wchar_t ** __restrict__);
long double __cdecl wcstold (const wchar_t * __restrict__, wchar_t ** __restrict__);
d171 4
a174 4
_CRTIMP wchar_t* __cdecl	_wasctime (const struct tm*);
_CRTIMP wchar_t* __cdecl	_wctime (const time_t*);
_CRTIMP wchar_t* __cdecl	_wstrdate (wchar_t*);
_CRTIMP wchar_t* __cdecl	_wstrtime (wchar_t*);
d176 1
a176 1
_CRTIMP wchar_t* __cdecl	_wctime64 (const __time64_t*);
d180 1
a180 1
_CRTIMP size_t __cdecl	wcsftime (wchar_t*, size_t, const wchar_t*, const struct tm*);
d190 6
a195 6
_CRTIMP wchar_t* __cdecl wcscat (wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcschr (const wchar_t*, wchar_t);
_CRTIMP int __cdecl	wcscmp (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl	wcscoll (const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcscpy (wchar_t*, const wchar_t*);
_CRTIMP size_t __cdecl	wcscspn (const wchar_t*, const wchar_t*);
d197 10
a206 10
_CRTIMP size_t __cdecl	wcslen (const wchar_t*);
_CRTIMP wchar_t* __cdecl wcsncat (wchar_t*, const wchar_t*, size_t);
_CRTIMP int __cdecl	wcsncmp(const wchar_t*, const wchar_t*, size_t);
_CRTIMP wchar_t* __cdecl wcsncpy(wchar_t*, const wchar_t*, size_t);
_CRTIMP wchar_t* __cdecl wcspbrk(const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcsrchr(const wchar_t*, wchar_t);
_CRTIMP size_t __cdecl	wcsspn(const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcsstr(const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcstok(wchar_t*, const wchar_t*);
_CRTIMP size_t __cdecl	wcsxfrm(wchar_t*, const wchar_t*, size_t);
d216 9
a224 9
_CRTIMP wchar_t* __cdecl _wcsdup (const wchar_t*);
_CRTIMP int __cdecl	_wcsicmp (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl	_wcsicoll (const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl _wcslwr (wchar_t*);
_CRTIMP int __cdecl	_wcsnicmp (const wchar_t*, const wchar_t*, size_t);
_CRTIMP wchar_t* __cdecl _wcsnset (wchar_t*, wchar_t, size_t);
_CRTIMP wchar_t* __cdecl _wcsrev (wchar_t*);
_CRTIMP wchar_t* __cdecl _wcsset (wchar_t*, wchar_t);
_CRTIMP wchar_t* __cdecl _wcsupr (wchar_t*);
d227 2
a228 2
_CRTIMP int __cdecl  _wcsncoll(const wchar_t*, const wchar_t*, size_t);
_CRTIMP int   __cdecl _wcsnicoll(const wchar_t*, const wchar_t*, size_t);
d230 2
a231 2
_CRTIMP  wchar_t* __cdecl _wcserror(int);
_CRTIMP  wchar_t* __cdecl __wcserror(const wchar_t*);
d237 1
a237 1
__CRT_INLINE int __cdecl
d240 9
a248 9
_CRTIMP wchar_t* __cdecl wcsdup (const wchar_t*);
_CRTIMP int __cdecl	wcsicmp (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl	wcsicoll (const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcslwr (wchar_t*);
_CRTIMP int __cdecl	wcsnicmp (const wchar_t*, const wchar_t*, size_t);
_CRTIMP wchar_t* __cdecl wcsnset (wchar_t*, wchar_t, size_t);
_CRTIMP wchar_t* __cdecl wcsrev (wchar_t*);
_CRTIMP wchar_t* __cdecl wcsset (wchar_t*, wchar_t);
_CRTIMP wchar_t* __cdecl wcsupr (wchar_t*);
d267 2
a268 2
wint_t __cdecl btowc(int);
size_t __cdecl mbrlen(const char * __restrict__, size_t,
d270 1
a270 1
size_t __cdecl mbrtowc(wchar_t * __restrict__, const char * __restrict__,
d272 1
a272 1
size_t __cdecl mbsrtowcs(wchar_t * __restrict__, const char ** __restrict__,
d274 1
a274 1
size_t __cdecl wcrtomb(char * __restrict__, wchar_t,
d276 1
a276 1
size_t __cdecl wcsrtombs(char * __restrict__, const wchar_t ** __restrict__,
d278 1
a278 1
int __cdecl wctob(wint_t);
d281 1
a281 1
__CRT_INLINE int __cdecl fwide(FILE* __UNUSED_PARAM(stream),
d284 1
a284 1
__CRT_INLINE int __cdecl mbsinit(const mbstate_t* __UNUSED_PARAM(ps))
d286 2
a287 2
wchar_t* __cdecl wmemset(wchar_t *, wchar_t, size_t);
wchar_t* __cdecl wmemchr(const wchar_t*, wchar_t, size_t);
d289 1
a289 1
wchar_t* __cdecl wmemcpy(wchar_t* __restrict__,
d292 2
a293 2
wchar_t* __cdecl wmemmove(wchar_t* s1, const wchar_t *, size_t);
long long __cdecl wcstoll(const wchar_t * __restrict__,
d295 1
a295 1
unsigned long long __cdecl wcstoull(const wchar_t * __restrict__,
d341 11
a351 11
_CRTIMP int __cdecl	_waccess (const wchar_t*, int);
_CRTIMP int __cdecl	_wchmod (const wchar_t*, int);
_CRTIMP int __cdecl	_wcreat (const wchar_t*, int);
_CRTIMP long __cdecl	_wfindfirst (const wchar_t*, struct _wfinddata_t *);
_CRTIMP int __cdecl	_wfindnext (long, struct _wfinddata_t *);
_CRTIMP int __cdecl	_wunlink (const wchar_t*);
_CRTIMP int __cdecl	_wopen (const wchar_t*, int, ...);
_CRTIMP int __cdecl	_wsopen (const wchar_t*, int, int, ...);
_CRTIMP wchar_t* __cdecl _wmktemp (wchar_t*);
_CRTIMP long __cdecl	_wfindfirsti64 (const wchar_t*, struct _wfinddatai64_t*);
_CRTIMP int __cdecl 	_wfindnexti64 (long, struct _wfinddatai64_t*);
d353 2
a354 2
_CRTIMP intptr_t __cdecl _wfindfirst64(const wchar_t*, struct __wfinddata64_t*); 
_CRTIMP intptr_t __cdecl _wfindnext64(intptr_t, struct __wfinddata64_t*);
d363 5
a367 5
_CRTIMP int __cdecl	  _wchdir (const wchar_t*);
_CRTIMP wchar_t* __cdecl  _wgetcwd (wchar_t*, int);
_CRTIMP wchar_t* __cdecl  _wgetdcwd (int, wchar_t*, int);
_CRTIMP int __cdecl	  _wmkdir (const wchar_t*);
_CRTIMP int __cdecl	  _wrmdir (const wchar_t*);
d451 2
a452 2
_CRTIMP int __cdecl	_wstat (const wchar_t*, struct _stat*);
_CRTIMP int __cdecl	_wstati64 (const wchar_t*, struct _stati64*);
d454 1
a454 1
_CRTIMP int __cdecl _wstat64 (const wchar_t*, struct __stat64*);
d461 1
a461 1
_CRTIMP wchar_t* __cdecl _wsetlocale (int, const wchar_t*);
@


1.23
log
@	* include/wchar.h (WCHAR_MAX): Define as 0xffff, so preprocessor
	#if (WCHAR_MAX <= WCHAR_MIN) is false.
	* include/stdint.h (WCHAR_MAX): Likwise.
	(WINT_MAX): Likewise.
@
text
@d160 2
a161 3
#if !defined __NO_ISOCEXT /* extern stub in static libmingwex.a */
__CRT_INLINE float __cdecl wcstof( const wchar_t *nptr, wchar_t **endptr)
{  return (wcstod(nptr, endptr)); }
@


1.22
log
@	* mingwex/mbrtowc.c: New file.
	* mingwex/wcrtomb.c: New file.
	* mingwex/btowc.c: New file.
	* mingwex/wctob.c: New file.
	* mingwex/mb_wc_common.h: New file.
	* mingwex/Makefile.in (DISTFILES): Add new files.
	(Q8_OBJS): Add new objects.
	* include/wchar.h: Adjust comment about mbrtowc() and related
	funcions. Add __restrict__ to pointer params in prototypes.
	(wmemset. wmemchr, wmemcpy, wmemmove, wcstoll, wcstoull): Remove
	arg names from protototypes.
@
text
@d54 1
a54 1
#define WCHAR_MAX	((wchar_t)-1)
@


1.21
log
@2005-02-07  Danny Smith  <dannysmith@@users.sourceforge.net>

	* include/sys/stat.h (struct stat): Guard with _NO_OLDNAMES.
	* include/wchar.h (struct stat): Likwwise.
	Bug reported to Debian by Anand Kumria  <wildfire@@progsoc.org>

	* include/sys/stat.h: Remove empty __STRICT_ANSI__ guard.
@
text
@d257 5
a261 3
/* These are resolved by -lmsvcp60 */
/* If you don't have msvcp60.dll in your windows system directory, you can
   easily obtain it with a search from your favorite search engine. */
d269 10
a278 6
size_t __cdecl mbrlen(const char *, size_t, mbstate_t *);
size_t __cdecl mbrtowc(wchar_t *, const char *, size_t, mbstate_t *);
size_t __cdecl mbsrtowcs(wchar_t *, const char **, size_t, mbstate_t *);

size_t __cdecl wcrtomb(char *, wchar_t, mbstate_t *);
size_t __cdecl wcsrtombs(char *, const wchar_t **, size_t, mbstate_t *);
d282 2
a283 1
__CRT_INLINE int __cdecl fwide(FILE* __UNUSED_PARAM(stream), int __UNUSED_PARAM(mode))
d287 11
a297 10
wchar_t* __cdecl wmemset(wchar_t* s, wchar_t c, size_t n);
wchar_t* __cdecl wmemchr(const wchar_t* s, wchar_t c, size_t n);
int wmemcmp(const wchar_t* s1, const wchar_t * s2, size_t n);
wchar_t* __cdecl wmemcpy(wchar_t* __restrict__ s1, const wchar_t* __restrict__ s2,
		 size_t n);
wchar_t* __cdecl wmemmove(wchar_t* s1, const wchar_t* s2, size_t n);
long long __cdecl wcstoll(const wchar_t* __restrict__ nptr,
		  wchar_t** __restrict__ endptr, int base);
unsigned long long __cdecl wcstoull(const wchar_t* __restrict__ nptr,
			    wchar_t ** __restrict__ endptr, int base);
@


1.20
log
@	* include/sys/stat.h (struct __stat64): Change st_size type to
	 __int64.
	* include/wchar.h (struct __stat64): Change st_size type to __int64.
@
text
@d389 2
d406 1
@


1.19
log
@	* include/wchar.h (wcsdup): Correct prototype.
	* include/string.h (wcsdup): Correct prototype.
@
text
@d429 1
a429 1
    _off_t st_size;
@


1.18
log
@	* include/wchar.h:  Reorganize, avoid including other headers.
@
text
@d241 1
a241 1
_CRTIMP wchar_t* __cdecl wcsdup (wchar_t*);
@


1.17
log
@
	* CONTRIBUTORS: New file.
	* DISCLAIMER: Ditto.
	* CRT_noglob.c: Reword copyright and disclaimer.  Move Contributors
	section CONTRIBUTORS file.  Remove RCS tags.
	* CRTFmode.c: Ditto.
	* CRTglob.c: Ditto.
	* CRTinit.c: Ditto.
	* crt1.c: Ditto.
	* crtdll.dev: Ditto.
	* dllcrt1.c: Ditto.
	* dllmain.c: Ditto.
	* gccmain.c: Ditto.
	* init.c: Ditto.
	* isascii.c: Ditto.
	* iscsym.c: Ditto.
	* iscsymf.c: Ditto.
	* jamfile: Ditto.
	* main.c: Ditto.
	* msvcrt.def.in: Ditto.
	* strcasecmp.c: Ditto.
	* toascii.c: Ditto.
	* wcscmpi.c: Ditto.
	* include/assert.h: Ditto.
	* include/conio.h: Ditto.
	* include/ctype.h: Ditto.
	* include/direct.h: Ditto.
	* include/dirent.h: Ditto.
	* include/dos.h: Ditto.
	* include/errno.h: Ditto.
	* include/excpt.h: Ditto.
	* include/fcntl.h: Ditto.
	* include/float.h: Ditto.
	* include/io.h: Ditto.
	* include/locale.h: Ditto.
	* include/malloc.h: Ditto.
	* include/math.h: Ditto.
	* include/process.h: Ditto.
	* include/setjmp.h: Ditto.
	* include/share.h: Ditto.
	* include/signal.h: Ditto.
	* include/stdio.h: Ditto.
	* include/stdlib.h: Ditto.
	* include/string.h: Ditto.
	* include/tchar.h: Ditto.
	* include/time.h: Ditto.
	* include/wchar.h: Ditto.
	* include/sys/locking.h: Ditto.
	* include/sys/param.h: Ditto.
	* include/sys/stat.h: Ditto.
	* include/sys/timeb.h: Ditto.
	* include/sys/types.h: Ditto.
	* include/sys/utime.h: Ditto.
	* mingwex/dirent.c: Ditto.
@
text
@d20 1
a20 7
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/types.h>
#include <stdint.h>
d25 1
a25 1
#ifndef RC_INVOKED
d27 11
d40 13
d56 4
d66 226
d293 1
d307 1
a307 1
	wchar_t		name[FILENAME_MAX];	/* may include spaces. */
d315 1
a315 1
	wchar_t     name[FILENAME_MAX];
d323 1
a323 1
        wchar_t     name[FILENAME_MAX];
d333 2
a334 1
_CRTIMP int __cdecl	 _waccess (const wchar_t*, int);
d348 1
a348 1
#endif
a352 53
#ifndef _WSTDIO_DEFINED
/* also in stdio.h - keep in sync */
_CRTIMP int __cdecl	fwprintf (FILE*, const wchar_t*, ...);
_CRTIMP int __cdecl	wprintf (const wchar_t*, ...);
_CRTIMP int __cdecl	swprintf (wchar_t*, const wchar_t*, ...);
_CRTIMP int __cdecl	_snwprintf (wchar_t*, size_t, const wchar_t*, ...);
_CRTIMP int __cdecl	vfwprintf (FILE*, const wchar_t*, __VA_LIST);
_CRTIMP int __cdecl	vwprintf (const wchar_t*, __VA_LIST);
_CRTIMP int __cdecl	vswprintf (wchar_t*, const wchar_t*, __VA_LIST);
_CRTIMP int __cdecl	_vsnwprintf (wchar_t*, size_t, const wchar_t*, __VA_LIST);
_CRTIMP int __cdecl	fwscanf (FILE*, const wchar_t*, ...);
_CRTIMP int __cdecl	wscanf (const wchar_t*, ...);
_CRTIMP int __cdecl	swscanf (const wchar_t*, const wchar_t*, ...);
_CRTIMP wint_t __cdecl	fgetwc (FILE*);
_CRTIMP wint_t __cdecl	fputwc (wchar_t, FILE*);
_CRTIMP wint_t __cdecl	ungetwc (wchar_t, FILE*);

#ifndef __NO_ISOCEXT  /* externs in libmingwex.a */
int __cdecl snwprintf (wchar_t* s, size_t n, const wchar_t*  format, ...);
__CRT_INLINE int __cdecl
vsnwprintf (wchar_t* s, size_t n, const wchar_t* format, __VALIST arg)
  { return _vsnwprintf ( s, n, format, arg);}
int __cdecl vwscanf (const wchar_t * __restrict__, __VALIST);
int __cdecl vfwscanf (FILE * __restrict__,
		       const wchar_t * __restrict__, __VALIST);
int __cdecl vswscanf (const wchar_t * __restrict__,
		       const wchar_t * __restrict__, __VALIST);
#endif

#ifdef __MSVCRT__ 
_CRTIMP wchar_t* __cdecl fgetws (wchar_t*, int, FILE*);
_CRTIMP int __cdecl	fputws (const wchar_t*, FILE*);
_CRTIMP wint_t __cdecl	getwc (FILE*);
_CRTIMP wint_t __cdecl  getwchar (void);
_CRTIMP wchar_t* __cdecl _getws (wchar_t*);
_CRTIMP wint_t __cdecl	putwc (wint_t, FILE*);
_CRTIMP int __cdecl	_putws (const wchar_t*);
_CRTIMP wint_t __cdecl	putwchar (wint_t);
_CRTIMP FILE* __cdecl	_wfdopen(int, wchar_t *);
_CRTIMP FILE* __cdecl	_wfopen (const wchar_t*, const wchar_t*);
_CRTIMP FILE* __cdecl	_wfreopen (const wchar_t*, const wchar_t*, FILE*);
_CRTIMP FILE* __cdecl   _wfsopen (const wchar_t*, const wchar_t*, int);
_CRTIMP wchar_t* __cdecl _wtmpnam (wchar_t*);
_CRTIMP wchar_t* __cdecl _wtempnam (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl	_wrename (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl	_wremove (const wchar_t*)

_CRTIMP FILE* __cdecl	_wpopen (const wchar_t*, const wchar_t*)
_CRTIMP void __cdecl	_wperror (const wchar_t*);
#endif	/* __MSVCRT__ */
#define _WSTDIO_DEFINED
#endif /* _WSTDIO_DEFINED */

d404 1
a449 15
#ifndef _WTIME_DEFINED
#ifdef __MSVCRT__
/* wide function prototypes, also declared in time.h */
_CRTIMP wchar_t* __cdecl	_wasctime (const struct tm*);
_CRTIMP wchar_t* __cdecl	_wctime (const time_t*);
_CRTIMP wchar_t* __cdecl	_wstrdate (wchar_t*);
_CRTIMP wchar_t* __cdecl	_wstrtime (wchar_t*);
#if __MSVCRT_VERSION__ >= 0x601
_CRTIMP wchar_t* __cdecl	_wctime64 (const __time64_t*);
#endif
#endif /* __MSVCRT__ */
_CRTIMP size_t __cdecl		wcsftime (wchar_t*, size_t, const wchar_t*, const struct tm*);
#define _WTIME_DEFINED
#endif /* _WTIME_DEFINED */ 

a454 32
#ifndef _WSTDLIB_DEFINED /* also declared in stdlib.h */
_CRTIMP long __cdecl 		wcstol (const wchar_t*, wchar_t**, int);
_CRTIMP unsigned long __cdecl	wcstoul (const wchar_t*, wchar_t**, int);
_CRTIMP double __cdecl		wcstod (const wchar_t*, wchar_t**);
#if !defined __NO_ISOCEXT /* extern stub in static libmingwex.a */
__CRT_INLINE float __cdecl wcstof( const wchar_t *nptr, wchar_t **endptr)
{  return (wcstod(nptr, endptr)); }
long double __cdecl wcstold (const wchar_t * __restrict__, wchar_t ** __restrict__);
#endif /* __NO_ISOCEXT */
#define  _WSTDLIB_DEFINED
#endif


#ifndef	_NO_OLDNAMES

/* Wide character versions. Also declared in io.h. */
/* CHECK: Are these in the oldnames???  NO! */
#if (0)
int 		waccess (const wchar_t *, int);
int 		wchmod (const wchar_t *, int);
int 		wcreat (const wchar_t *, int);
long 		wfindfirst (wchar_t *, struct _wfinddata_t *);
int 		wfindnext (long, struct _wfinddata_t *);
int 		wunlink (const wchar_t *);
int 		wrename (const wchar_t *, const wchar_t *);
int 		wremove (const wchar_t *);
int 		wopen (const wchar_t *, int, ...);
int 		wsopen (const wchar_t *, int, int, ...);
wchar_t* 	wmktemp (wchar_t *);
#endif
#endif /* _NO_OLDNAMES */

a456 32
/* These are resolved by -lmsvcp60 */
/* If you don't have msvcp60.dll in your windows system directory, you can
   easily obtain it with a search from your favorite search engine. */
typedef int mbstate_t;
typedef wchar_t _Wint_t;

wint_t __cdecl btowc(int);
size_t __cdecl mbrlen(const char *, size_t, mbstate_t *);
size_t __cdecl mbrtowc(wchar_t *, const char *, size_t, mbstate_t *);
size_t __cdecl mbsrtowcs(wchar_t *, const char **, size_t, mbstate_t *);

size_t __cdecl wcrtomb(char *, wchar_t, mbstate_t *);
size_t __cdecl wcsrtombs(char *, const wchar_t **, size_t, mbstate_t *);
int __cdecl wctob(wint_t);

#ifndef __NO_ISOCEXT /* these need static lib libmingwex.a */
__CRT_INLINE int __cdecl fwide(FILE* __UNUSED_PARAM(stream), int __UNUSED_PARAM(mode))
  {return -1;} /* limited to byte orientation */ 
__CRT_INLINE int __cdecl mbsinit(const mbstate_t* __UNUSED_PARAM(ps))
  {return 1;}
wchar_t* __cdecl wmemset(wchar_t* s, wchar_t c, size_t n);
wchar_t* __cdecl wmemchr(const wchar_t* s, wchar_t c, size_t n);
int wmemcmp(const wchar_t* s1, const wchar_t * s2, size_t n);
wchar_t* __cdecl wmemcpy(wchar_t* __restrict__ s1, const wchar_t* __restrict__ s2,
		 size_t n);
wchar_t* __cdecl wmemmove(wchar_t* s1, const wchar_t* s2, size_t n);
long long __cdecl wcstoll(const wchar_t* __restrict__ nptr,
		  wchar_t** __restrict__ endptr, int base);
unsigned long long __cdecl wcstoull(const wchar_t* __restrict__ nptr,
			    wchar_t ** __restrict__ endptr, int base);
#endif /* __NO_ISOCEXT */

@


1.16
log
@	Add prototypes for new msvcrt.dll versions

	* include/_mingw.h (__MSVCRT_VERSION__): Define default as 0x0600.

	* include/time.h (__time64_t): Add typedef.
	(_mktime64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.
	(_ctime64): Likewise.
	(_wctime64): Likewise.
	(_gmtime64): Likewise.
	(_localtime64): Likewise.
	(wcsftime): Move into _WTIME_DEFINED block.
	Regroup non-ANSI prototypes.

	* include/io.h: Include <stdint.h>.
	(__finddata64_t): Add struct definition.
	(__wfinddata64_t): Likewise.
	(_findfirst64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.
	(_findnext64): Likewise.
	(_wfindfirst64): Likewise.
	(_wfindnext64): Likewise.

	* include/sys/timeb.h (__timeb64): Add struct definition.
	(_ftime64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.

	* include/sys/utime.h (__utimbuf64): Add struct definition.
	(_utime64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.
	(_futime64): Likewise.
	(_wutime64): Likewise.

	* include/sys/stat.h (__stat64):  Add struct definition.
	(_fstat64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.
	(_stat64): Likewise.
	(_wstat64): Likwise.

	* include/sys/types.h (__time64_t):  Add typedef.

	* include/wchar.h (__wfinddata64_t): Add structure definition.
	(__stat64): Likewise.
	(_wctime64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.
	(_wfindfirst64): Likewise.
	(_wfindnext64): Likewise.
	(_wutime64): Likewise.
	(_wstat64): Likwise.

	* include/malloc.h (_aligned_free): Add prototype for
	__MSVCRT_VERSION__ >= 0x0700.
	(_aligned_malloc): Likewise.
	(_aligned_offset_malloc): Likewise.
	(_aligned_offset_realloc): Likewise.
	(_aligned_realloc): Likewise.

	* include/string.h (_wcserror): Add prototype for
	__MSVCRT_VERSION__ >= 0x0700.
	(__wcserror): Likewise.

	* include/math.h (_set_SSE2_enable): Add prototype for
	__MSVCRT_VERSION__ >= 0x0701.
@
text
@d3 3
a10 16
 *
 * This file is part of the Mingw32 package.
 *
 *  THIS SOFTWARE IS NOT COPYRIGHTED
 *
 *  This source code is offered for use in the public domain. You may
 *  use, modify or distribute it freely.
 *
 *  This code is distributed in the hope that it will be useful but
 *  WITHOUT ANY WARRANTY. ALL WARRANTIES, EXPRESS OR IMPLIED ARE HEREBY
 *  DISCLAIMED. This includes but is not limited to warranties of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * $Revision: 1.4 $
 * $Author: dannysmith $
 * $Date: 2001/11/29 04:26:33 $
@


1.15
log
@	* include/_mingw.h (__UNUSED_PARAM): Define macro.
	* include/wchar.h (fwide): Use it.
	(mbsinit): Ditto.
@
text
@d39 1
d66 6
a71 6
    	unsigned	attrib;
    	time_t		time_create;	/* -1 for FAT file systems */
    	time_t		time_access;	/* -1 for FAT file systems */
    	time_t		time_write;
    	_fsize_t	size;
    	wchar_t		name[FILENAME_MAX];	/* may include spaces. */
d74 14
a87 6
    unsigned    attrib;
    time_t      time_create;
    time_t      time_access;
    time_t      time_write;
    __int64     size;
    wchar_t     name[FILENAME_MAX];
d108 4
d234 15
d258 3
d272 3
a349 1

@


1.14
log
@	* include/_mingw.h (__CRT_INLINE): Define.
	* include/ctype.h: Replace 'extern inline' with __CRT_INLINE,
	throughout
	* include/inttypes.h: Likewise.
	* include/math.h: Likewise.
	* include/stdio.h: Likewise.
	* include/stdlib.h: Likewise.
	* include/string.h: Likewise.
	* include/wchar.h: Likewise.
	* include/wctype.h: Likewise.
@
text
@d301 4
a304 2
__CRT_INLINE int __cdecl fwide(FILE* stream, int mode) {return -1;} /* limited to byte orientation */ 
__CRT_INLINE int __cdecl mbsinit(const mbstate_t* ps) {return 1;}
@


1.13
log
@2003-03-02  Danny Smith  <dannysmith@@users.sourceforge.net>

	* include/stdio.h (vscanf): Add prototype.
	(vfscanf): Ditto.
	(vsscanf): Ditto.
	(vwscanf): Ditto.
	(vfwscanf): Ditto.
	(vswscanf): Ditto.
	* include/wchar.h (vwscanf): Add prototype.
	(vfwscanf): Ditto.
	(vswscanf): Ditto.
	* mingwex/snprintf.c: Move to mingwex/stdio.
 	* mingwex/vsnprintf.c: Ditto.
	* mingwex/snwprintf.c: Ditto.
	* mingwex/vsnwprintf.c: Ditto.
	* mingwex/Makefile.in (VPATH): Add $(srcdir)/stdio
	(STDIO_DISTFILES): Add.
	(DISTFILES): Adjust.
	(STDIO_STUB_OBJS): Rename to STDIO_OBJS and add v*scanf objects.
	(LIB_OBJS): Adjust.
	(dist): Adjust.

2003-03-02  Aaron W  LaFramboise   <AWLaFramboise@@aol.com>

	* mingwex/stdio: New directory
	* mingwex/stdio/vfscanf.c: New file.
	* mingwex/stdio/vfwscanf.c:  New file.
	* mingwex/stdio/vscanf.c:  New file.
	* mingwex/stdio/vsscanf.c:  New file.
	* mingwex/stdio/vswscanf.c:  New file.
	* mingwex/stdio/vwscanf.c:  New file.
@
text
@d122 1
a122 1
extern __inline__ int __cdecl
d256 1
a256 1
extern __inline__ float __cdecl wcstof( const wchar_t *nptr, wchar_t **endptr)
d301 2
a302 2
extern __inline__ int __cdecl fwide(FILE* stream, int mode) {return -1;} /* limited to byte orientation */ 
extern __inline__ int __cdecl mbsinit(const mbstate_t* ps) {return 1;}
@


1.12
log
@	* include/_mingw.h (_CRTIMP): Define for __GNUC__ if
	__declspec(dllimport)  supported.
	(__cdecl): Define if not already defined.
	(__stdcall): Likewise.
	* include/dirent.h: Qualify fuctions with __cdecl.
	* include/fenv.h: Likewise.
	* include/inttypes.h: Likewise.
	* include/assert.h: Qualify fuctions with __cdecl. Qualify
	CRT dll imports with _CRTIMP.
	* include/conio.h: Likewise.
	* include/ctype.h: Likewise.
	* include/direct.h: Likewise.
	* include/dos.h: Likewise.
	* include/errno.h: Likewise.
	* include/float.h: Likewise.
	* include/io.h: Likewise.
	* include/locale.h: Likewise.
	* include/malloc.h: Likewise.
	* include/math.h: Likewise.
	* include/mbctype.h: Likewise.
	* include/mbstring.h: Likewise.
	* include/process.h: Likewise.
	* include/setjmp.h: Likewise.
	* include/signal.h: Likewise.
	* include/stdio.h: Likewise.
	* include/stdlib.h: Likewise.
	* include/string.h: Likewise.
	* include/time.h: Likewise.
	* include/wchar.h: Likewise.
	* include/wctype.h: Likewise.
	* include/sys/stat.h: Likewise.
	* include/sys/timeb.h: Likewise.
	* include/sys/utime.h: Likewise.

	* include/ctype.h: Guard ctype inlines with __NO_INLINE__.
	* include/wctype.h: Guard wctype inlines with __NO_INLINE__.

	* include/stdio.h (__VALIST): Guard against prior definition.
@
text
@d121 9
a129 4
int __cdecl snwprintf(wchar_t* s, size_t n, const wchar_t*  format, ...);
extern __inline__ int __cdecl vsnwprintf (wchar_t* s, size_t n, const wchar_t* format,
			   __VA_LIST arg)
  { return _vsnwprintf ( s, n, format, arg); }
@


1.11
log
@Add strtold and wcstold to libmingwex.a

	* mingwex/strtold.c: New file.
	* mingwex/wcstold.c: New file.
	* mingwex/ldtoa.c: New file.
	* mingwex/math/cephes_emath.h: New file.
	* mingwex/math/cephes_emath.c: New file.
	* mingwex/Makefile.in (DISTFILES): Add new files.
	(MATH_DISTFILES): Ditto.
	(STDLIB_OBJS): New. Define as strtold.c wcstold.c.
	(MATH_OBJS): Add cephes_emath.o.
	(LIB_OBJS): Add $(STDLIB_OBJS).
	* include/stdlib.h (strtold, wcstold): Add prototypes.
	* include/wchar.h (wcstold): Add prototype.

Add missing ChangeLog entry for 2002-11-09.
@
text
@d88 11
a98 11
int	 _waccess (const wchar_t*, int);
int	_wchmod (const wchar_t*, int);
int	_wcreat (const wchar_t*, int);
long	_wfindfirst (const wchar_t*, struct _wfinddata_t *);
int	_wfindnext (long, struct _wfinddata_t *);
int	_wunlink (const wchar_t*);
int	_wopen (const wchar_t*, int, ...);
int	_wsopen (const wchar_t*, int, int, ...);
wchar_t* _wmktemp (wchar_t*);
long	_wfindfirsti64 (const wchar_t*, struct _wfinddatai64_t*);
int 	_wfindnexti64 (long, struct _wfinddatai64_t*);
d105 14
a118 14
int	fwprintf (FILE*, const wchar_t*, ...);
int	wprintf (const wchar_t*, ...);
int	swprintf (wchar_t*, const wchar_t*, ...);
int	_snwprintf (wchar_t*, size_t, const wchar_t*, ...);
int	vfwprintf (FILE*, const wchar_t*, va_list);
int	vwprintf (const wchar_t*, va_list);
int	vswprintf (wchar_t*, const wchar_t*, va_list);
int	_vsnwprintf (wchar_t*, size_t, const wchar_t*, va_list);
int	fwscanf (FILE*, const wchar_t*, ...);
int	wscanf (const wchar_t*, ...);
int	swscanf (const wchar_t*, const wchar_t*, ...);
wint_t	fgetwc (FILE*);
wint_t	fputwc (wchar_t, FILE*);
wint_t	ungetwc (wchar_t, FILE*);
d121 3
a123 3
int snwprintf(wchar_t* s, size_t n, const wchar_t*  format, ...);
extern __inline__ int vsnwprintf (wchar_t* s, size_t n, const wchar_t* format,
			   va_list arg)
d128 16
a143 16
wchar_t* fgetws (wchar_t*, int, FILE*);
int	fputws (const wchar_t*, FILE*);
wint_t	getwc (FILE*);
wint_t  getwchar (void);
wchar_t* _getws (wchar_t*);
wint_t	putwc (wint_t, FILE*);
int	_putws (const wchar_t*);
wint_t	putwchar (wint_t);
FILE*	_wfdopen(int, wchar_t *);
FILE*	_wfopen (const wchar_t*, const wchar_t*);
FILE*	_wfreopen (const wchar_t*, const wchar_t*, FILE*);
FILE*   _wfsopen (const wchar_t*, const wchar_t*, int);
wchar_t* _wtmpnam (wchar_t*);
wchar_t* _wtempnam (const wchar_t*, const wchar_t*);
int 	_wrename (const wchar_t*, const wchar_t*);
int	_wremove (const wchar_t*)
d145 2
a146 2
FILE*	  _wpopen (const wchar_t*, const wchar_t*)
void	  _wperror (const wchar_t*);
d154 5
a158 5
int	  _wchdir (const wchar_t*);
wchar_t*  _wgetcwd (wchar_t*, int);
wchar_t*  _wgetdcwd (int, wchar_t*, int);
int	  _wmkdir (const wchar_t*);
int	  _wrmdir (const wchar_t*);
d223 2
a224 2
int	_wstat (const wchar_t*, struct _stat*);
int	_wstati64 (const wchar_t*, struct _stati64*);
d232 4
a235 4
wchar_t*	_wasctime (const struct tm*);
wchar_t*	_wctime (const time_t*);
wchar_t*	_wstrdate (wchar_t*);
wchar_t*	_wstrtime (wchar_t*);
d237 1
a237 1
size_t		wcsftime (wchar_t*, size_t, const wchar_t*, const struct tm*);
d242 1
a242 1
wchar_t* _wsetlocale (int, const wchar_t*);
d247 3
a249 3
long	wcstol	(const wchar_t*, wchar_t**, int);
unsigned long	wcstoul (const wchar_t*, wchar_t**, int);
double	wcstod	(const wchar_t*, wchar_t**);
d251 1
a251 1
extern __inline__ float wcstof( const wchar_t *nptr, wchar_t **endptr)
d253 1
a253 1
long double wcstold (const wchar_t * __restrict__, wchar_t ** __restrict__);
d264 11
a274 11
int		waccess (const wchar_t *, int);
int		wchmod (const wchar_t *, int);
int		wcreat (const wchar_t *, int);
long		wfindfirst (wchar_t *, struct _wfinddata_t *);
int		wfindnext (long, struct _wfinddata_t *);
int		wunlink (const wchar_t *);
int		wrename (const wchar_t *, const wchar_t *);
int		wremove (const wchar_t *);
int		wopen (const wchar_t *, int, ...);
int		wsopen (const wchar_t *, int, int, ...);
wchar_t*	wmktemp (wchar_t *);
d286 8
a293 8
wint_t  btowc(int);
size_t  mbrlen(const char *, size_t, mbstate_t *);
size_t  mbrtowc(wchar_t *, const char *, size_t, mbstate_t *);
size_t  mbsrtowcs(wchar_t *, const char **, size_t, mbstate_t *);

size_t  wcrtomb(char *, wchar_t, mbstate_t *);
size_t  wcsrtombs(char *, const wchar_t **, size_t, mbstate_t *);
int  	wctob(wint_t);
d296 4
a299 4
extern __inline__ int fwide(FILE* stream, int mode) {return -1;} /* limited to byte orientation */ 
extern __inline__ int mbsinit(const mbstate_t* ps) {return 1;}
wchar_t* wmemset(wchar_t* s, wchar_t c, size_t n);
wchar_t* wmemchr(const wchar_t* s, wchar_t c, size_t n);
d301 1
a301 1
wchar_t* wmemcpy(wchar_t* __restrict__ s1, const wchar_t* __restrict__ s2,
d303 2
a304 2
wchar_t* wmemmove(wchar_t* s1, const wchar_t* s2, size_t n);
long long wcstoll(const wchar_t* __restrict__ nptr,
d306 1
a306 1
unsigned long long wcstoull(const wchar_t* __restrict__ nptr,
a307 1

@


1.10
log
@2002-06-18  Casper S. Hornstrup  <chorns@@users.sourceforge.net>

	* include/_mingw.h (__MINGW_IMPORT): Check for prior definition before
	defining.
	* include/excpt.h (): Include windef.h not windows.h.
	* include/fcntl.h (_O_SHORT_LIVED): Add define.
	(_chmod): Add prototype.
        (_creat): Correct prototype.
	(SH_DENY*): Rename defines to _SH_DENY*.
	(SH_DENY*): Add Non-ANSI names for _SH_DENY*.
	include/stdio.h (_IOMYBUF, _IOEOF, _IOERR, _IOSTRG,
	_IOAPPEND): Add defines.
	(_wfindfirst): Correct prototype.
	(_wfdopen): Add prototype.
	* include/stdlib.h (_rotl, _rotr, _lrotl, _lrotr): Add
	prototypes.
	* include/string.h (_mbschr, _mbstok, _mbsncat): Remove
	 prototypes.
	(_wcsdup): Correct prototype.
	* include/mbstring.h: Remove comments about _mbschr, _mbstok,
	 _mbsncat being in string.h.
	* include/wchar.h (_wfindfirst): Correct prototype.
	* include/tchar.h (_tfdopen): Add _UNICODE mappings.
@
text
@d253 1
@


1.10.6.1
log
@	* include/wchar.h: Don't #include sys/types.h, stdlib.h,
	string.h.
	Guard only non-ANSI names with #ifndef __STRICT_ANSI__,
	* include/stdio.h: Add __STRICT_ANSI__ guard for underscored
	wide char functions and oldnames.
	(__mingw_fseek, __mingw_fwrite): Move into !__STRICT_ANSI__
	block.
@
text
@d34 5
a38 2
#include <stdio.h> /* for FILE, FILENAME_MAX */
#include <time.h> /* for struct tm */
a42 1
#define __need_NULL
a101 1
#endif /* __STRICT_ANSI__ */
d132 1
d134 1
a135 4

#ifndef __STRICT_ANSI__
wchar_t* _getws (wchar_t*);
int	_putws (const wchar_t*);
d144 1
a146 1
#endif /* __STRICT_ANSI__ */
a150 1
#ifndef __STRICT_ANSI__
d202 1
a202 1
#if defined (__MSVCRT__) 
a216 1

a228 2
#endif /*  __STRICT_ANSI__ */

a230 1
#ifndef __STRICT_ANSI__
a236 1
#endif /* __STRICT_ANSI__ */
a240 1
#ifndef __STRICT_ANSI__
a244 1
#endif /* __STRICT_ANSI__ */
d257 1
a257 1
#ifndef __STRICT_ANSI__
d276 1
d309 1
@


1.10.6.2
log
@	* include/stdio.h: Reorder ANSI vs non-ANSI declarations
	Use C++ c-header compatability defines.
	* include/wchar.h: Likewise.
	* include/time.h: Use C++ c-header compatability defines.

	* include/tchar.h: ANSI-fy comment.
@
text
@d50 3
a52 1
__BEGIN_CGLOBAL_NAMESPACE
a101 2
__END_CGLOBAL_NAMESPACE

d103 1
a103 2
__BEGIN_CSTD_NAMESPACE
/*  also in stdio.h - keep in sync */
d107 5
a111 3
int	vfwprintf (FILE*, const wchar_t*, __VALIST);
int	vwprintf (const wchar_t*, __VALIST);
int	vswprintf (wchar_t*, const wchar_t*, __VALIST);
d118 8
d130 1
a130 1
wint_t	getwchar (void);
a132 1
#endif
a133 4
__END_CSTD_NAMESPACE
__BEGIN_CGLOBAL_NAMESPACE

#ifdef __MSVCRT__ 
d140 1
a140 1
FILE*	_wfsopen (const wchar_t*, const wchar_t*, int);
d143 5
a147 5
int	_wrename (const wchar_t*, const wchar_t*);
int	_wremove (const wchar_t*);
void	_wperror (const wchar_t*);
FILE*	_wpopen (const wchar_t*, const wchar_t*);
#endif	/* Not __STRICT_ANSI__ */
a148 11

/* C99 names, but non-standard behaviour */
int	_snwprintf (wchar_t*, size_t, const wchar_t*, ...);
int	_vsnwprintf (wchar_t*, size_t, const wchar_t*, __VALIST);
#ifndef __NO_ISOCEXT  /* externs in libmingwex.a */
int snwprintf(wchar_t* s, size_t n, const wchar_t*  format, ...);
extern __inline__ int
vsnwprintf (wchar_t* s, size_t n, const wchar_t* format, __VALIST arg)
  { return _vsnwprintf ( s, n, format, arg);}
#endif
__END_CGLOBAL_NAMESPACE
a151 3

__BEGIN_CGLOBAL_NAMESPACE

a152 4
/*
 * wide char functions from direct.h, sys/stat.h and
 * locale.h
 */
d232 1
a232 7
#ifndef _WLOCALE_DEFINED  /* also declared in locale.h */
wchar_t* _wsetlocale (int, const wchar_t*);
#define _WLOCALE_DEFINED
#endif
#endif /* __STRICT_ANSI__ */

__END_CGLOBAL_NAMESPACE
a234 1
__BEGIN_CGLOBAL_NAMESPACE
a243 2
__END_CGLOBAL_NAMESPACE
__BEGIN_CSTD_NAMESPACE
a244 1
__END_CSTD_NAMESPACE
d248 7
a255 1
__BEGIN_CSTD_NAMESPACE
a262 1
__END_CSTD_NAMESPACE
a265 1
__BEGIN_CGLOBAL_NAMESPACE
a286 3
__END_CGLOBAL_NAMESPACE
__BEGIN_CSTD_NAMESPACE

d318 3
a320 1
__END_CSTD_NAMESPACE
@


1.10.6.3
log
@	* include/io.h: Move wide char prototypes together.
	* include/string.h: Untangle wide char protototypes.
	Use C++ c-header compatability defines.
	*include/wchar.h: Copy wide char string prototypes from
	string.h.
	Resync with io.h.
	* include/signal.h: Use C++ c-header compatability defines.
	* include/stdio.h: Add guard for __HAVE_STD_CXX.
@
text
@d50 52
a155 1

a158 24
#ifndef _WSTRING_DEFINED
/*
 * Unicode versions of the standard calls.
 * Also in stdio.h, since MSDN puts them in both headers well */ 
 */
__BEGIN_CSTD_NAMESPACE
wchar_t* wcscat (wchar_t*, const wchar_t*);
wchar_t* wcschr (const wchar_t*, wchar_t);
int	wcscmp (const wchar_t*, const wchar_t*);
int	wcscoll (const wchar_t*, const wchar_t*);
wchar_t* wcscpy (wchar_t*, const wchar_t*);
size_t	wcscspn (const wchar_t*, const wchar_t*);
/* Note: No wcserror in CRTDLL. */
size_t	wcslen (const wchar_t*);
wchar_t* wcsncat (wchar_t*, const wchar_t*, size_t);
int	wcsncmp(const wchar_t*, const wchar_t*, size_t);
wchar_t* wcsncpy(wchar_t*, const wchar_t*, size_t);
wchar_t* wcspbrk(const wchar_t*, const wchar_t*);
wchar_t* wcsrchr(const wchar_t*, wchar_t);
size_t	wcsspn(const wchar_t*, const wchar_t*);
wchar_t* wcsstr(const wchar_t*, const wchar_t*);
wchar_t* wcstok(wchar_t*, const wchar_t*);
size_t	wcsxfrm(wchar_t*, const wchar_t*, size_t);
__END_CSTD_NAMESPACE
a159 1
#ifndef __STRICT_ANSI__
a160 42
/*
 * Unicode versions of non-ANSI functions provided by CRTDLL.
 */

/* NOTE: _wcscmpi not provided by CRTDLL, this define is for portability */
#define		_wcscmpi	_wcsicmp

wchar_t* _wcsdup (const wchar_t*);
int	_wcsicmp (const wchar_t*, const wchar_t*);
int	_wcsicoll (const wchar_t*, const wchar_t*);
wchar_t* _wcslwr (wchar_t*);
int	_wcsnicmp (const wchar_t*, const wchar_t*, size_t);
wchar_t* _wcsnset (wchar_t*, wchar_t, size_t);
wchar_t* _wcsrev (wchar_t*);
wchar_t* _wcsset (wchar_t*, wchar_t);
wchar_t* _wcsupr (wchar_t*);

#ifdef __MSVCRT__
int  _wcsncoll(const wchar_t*, const wchar_t*, size_t);
int  _wcsnicoll(const wchar_t*, const wchar_t*, size_t);
#endif

#ifndef __NO_OLDNAMES
/* NOTE: There is no _wcscmpi, but this is for compatibility. */
int	wcscmpi	(const wchar_t*, const wchar_t*);
wchar_t* wcsdup (wchar_t*);
int	wcsicmp (const wchar_t*, const wchar_t*);
int	wcsicoll (const wchar_t*, const wchar_t*);
wchar_t* wcslwr (wchar_t*);
int	wcsnicmp (const wchar_t*, const wchar_t*, size_t);
wchar_t* wcsnset (wchar_t*, wchar_t, size_t);
wchar_t* wcsrev (wchar_t*);
wchar_t* wcsset (wchar_t*, wchar_t);
wchar_t* wcsupr (wchar_t*);
#endif	/* Not _NO_OLDNAMES */

__END_CGLOBAL_NAMESPACE
#endif	/* Not strict ANSI */

#define _WSTRING_DEFINED
#endif  /* _WSTRING_DEFINED */

a162 1
__BEGIN_CGLOBAL_NAMESPACE
d164 2
a165 2
 * non_ANSI wide char functions from io.h, direct.h, sys/stat.h
 * and locale.h
a166 60
#ifndef	_FSIZE_T_DEFINED
typedef	unsigned long	_fsize_t;
#define _FSIZE_T_DEFINED
#endif

#ifndef _WFINDDATA_T_DEFINED
struct _wfinddata_t {
    	unsigned	attrib;
    	time_t		time_create;	/* -1 for FAT file systems */
    	time_t		time_access;	/* -1 for FAT file systems */
    	time_t		time_write;
    	_fsize_t	size;
    	wchar_t		name[FILENAME_MAX];	/* may include spaces. */
};
struct _wfinddatai64_t {
    unsigned    attrib;
    time_t      time_create;
    time_t      time_access;
    time_t      time_write;
    __int64     size;
    wchar_t     name[FILENAME_MAX];
};
#define _WFINDDATA_T_DEFINED
#endif

#if !defined (_WIO_DEFINED)
/* Wide character versions from io.h  */
#if defined (__MSVCRT__)
int 		_waccess(const wchar_t*, int);
int 		_wchmod(const wchar_t*, int);
int 		_wcreat(const wchar_t*, int);
long 		_wfindfirst(const wchar_t*, struct _wfinddata_t*);
int 		_wfindnext(long, struct _wfinddata_t *);
int 		_wunlink(const wchar_t*);
int 		_wopen(const wchar_t*, int, ...);
int 		_wsopen(const wchar_t*, int, int, ...);
wchar_t * 	_wmktemp(wchar_t*);
long  _wfindfirsti64(const wchar_t*, struct _wfinddatai64_t*);
int  _wfindnexti64(long, struct _wfinddatai64_t*);

#ifndef __NO_OLDNAMES
/* Where do these live? Not in libmoldname.a nor in libmsvcrt.a */
#if 0
int 		waccess(const wchar_t *, int);
int 		wchmod(const wchar_t *, int);
int 		wcreat(const wchar_t *, int);
long 		wfindfirst(wchar_t *, struct _wfinddata_t *);
int 		wfindnext(long, struct _wfinddata_t *);
int 		wunlink(const wchar_t *);
int 		wrename(const wchar_t *, const wchar_t *);
int 		wopen(const wchar_t *, int, ...);
int 		wsopen(const wchar_t *, int, int, ...);
wchar_t * 	wmktemp(wchar_t *);
#endif
#endif
#endif /* defined (__MSVCRT__) */

#define _WIO_DEFINED
#endif /* _WIO_DEFINED */

a249 1
__END_CGLOBAL_NAMESPACE
d252 1
d285 23
@


1.10.6.4
log
@	* include/settjmp.h: Use C++ c-header compatibility defines.
	* include/time.h: Don't include non-ISO sys/types.h.
	(struct tm): Define in __CSTD, if not already done.
	(_wasctime): Qualify tm with __CSTD.
	(_wctime): Qualify time_t with __CSTD.
	* include/wchar.h (ctype.h): Don't #include.
	(stdio.h): Don't #include.
	(time.h): Don't #include.
	(wctype.h): Include in C, but not in C++ in ANSI mode.
	(time_t): Define in __CSTD, if not already done. Qualify
	with __CSTD throughout.
	(struct tm): Likewise.
	(FILENAME_MAX): Replace with numeric constant throughout.
	Whitespace.
	* include/io.h (stdio.h): Don't #include.
	(time_t): Define in __CSTD, if not already done. Qualify
	with __CSTD throughout.
	(FILENAME_MAX): Replace with numeric constant throughout.
	Consolidate RC_INVOKED. __cplusplus blocks.
 	* include/dir.h: Add header guard.
	* include/sys/time.h: Add header guard.
	* include/sys/types.h (time_t): Define in __CSTD.
	* include/sys/utime.h (_utimbuf, utimbuf): Qualify
	time_t with __CSTD.

	Correct spelling of compatibility in ChangeLog.
@
text
@d33 4
a44 11
/*
 * FIXME: 
 * MSDN says that isw* char classifications are in wchar.h.
 * ISO C says they are wctype.h and ISO C++ expects them there as well.
 * Including wctype.h here in C++ will cause the std symbols to be in
 * global namespace as well as in std.  That is rude. 
 */
#if !(defined  __STRICT_ANSI__ && defined __cplusplus)
#include <wctype.h>
#endif

a49 37
__BEGIN_CSTD_NAMESPACE
#ifndef _FILE_DEFINED
#define	_FILE_DEFINED
typedef struct _iobuf
{
	char*	_ptr;
	int	_cnt;
	char*	_base;
	int	_flag;
	int	_file;
	int	_charbuf;
	int	_bufsiz;
	char*	_tmpfname;
} FILE;
#endif	/* Not _FILE_DEFINED */

#ifndef _TIME_T_DEFINED
typedef long time_t;
#define _TIME_T_DEFINED
#endif

#ifndef _TM_DEFINED
struct tm {
        int tm_sec;     /* seconds after the minute - [0,59] */
        int tm_min;     /* minutes after the hour - [0,59] */
        int tm_hour;    /* hours since midnight - [0,23] */
        int tm_mday;    /* day of the month - [1,31] */
        int tm_mon;     /* months since January - [0,11] */
        int tm_year;    /* years since 1900 */
        int tm_wday;    /* days since Sunday - [0,6] */
        int tm_yday;    /* days since January 1 - [0,365] */
        int tm_isdst;   /* daylight savings time flag */
        };
#define _TM_DEFINED
#endif
__END_CSTD_NAMESPACE

d177 1
d192 3
a194 3
    	__CSTD time_t	time_create;	/* -1 for FAT file systems */
    	__CSTD time_t	time_access;	/* -1 for FAT file systems */
    	__CSTD time_t	time_write;
d196 1
a196 1
    	wchar_t		name[260];	/* may include spaces. */
d199 6
a204 6
    unsigned		attrib;
    __CSTD time_t	time_create;
    __CSTD time_t	time_access;
    __CSTD time_t	time_write;
    __int64		size;
    wchar_t		name[260];
d274 4
a277 4
	__CSTD time_t	st_atime;	/* Accessed date (always 00:00 hrs local
					 * on FAT) */
	__CSTD time_t	st_mtime;	/* Modified time */
	__CSTD time_t	st_ctime;	/* Creation time */
d290 4
a293 4
	__CSTD time_t	 st_atime;	/* Accessed date (always 00:00 hrs local
					 * on FAT) */
	__CSTD time_t	st_mtime;	/* Modified time */
	__CSTD time_t	st_ctime;	/* Creation time */
d305 3
a307 3
    __CSTD time_t st_atime;
    __CSTD time_t st_mtime;
    __CSTD time_t st_ctime;
d330 1
d336 2
a337 2
wchar_t*	_wasctime (const struct __CSTD tm*);
wchar_t*	_wctime (const __CSTD time_t*);
@


1.10.6.5
log
@	* include/wchar: #include sys/types.h in non-ANSI mode.
	Protect _Wint_t typedef with __STRICT_ANSI__.  Remove from std
	namespace.
	Fix comment about string functions.

	Correct spelling of setjmp.h in ChangeLog.
@
text
@d155 1
a155 1
 * Also in string.h, since MSDN puts them in both headers.
a221 1
#include <sys/types.h>
a403 4
#ifndef __STRICT_ANSI__
typedef wchar_t _Wint_t; /* Used only by MSVC C++ headers?  */
#endif

a405 2
typedef int mbstate_t;

d409 2
@


1.10.6.6
log
@	* include/io.h: #include stddef.h with __need_wchat_t.
	* include/wchar.h (__VA_LIST): Define as __builtin_va_list
	or char*.
@
text
@a94 9

#ifndef __VALIST
#if defined __GNUC__ && __GNUC__ > = 3
#define __VALIST __builtin_va_list
#else
#define __VALIST char*
#endif
#endif

@


1.10.6.7
log
@	* include/wchar.h (__VALIST): Correct typo in __GNUC__ guard.
	(FILE): Qualify with __CSTD when in global namespace.
@
text
@d97 1
a97 1
#if defined __GNUC__ && __GNUC__ >= 3
d134 4
a137 4
__CSTD FILE*	_wfdopen(int, wchar_t *);
__CSTD FILE*	_wfopen (const wchar_t*, const wchar_t*);
__CSTD FILE*	_wfreopen (const wchar_t*, const wchar_t*, __CSTD FILE*);
__CSTD FILE*	_wfsopen (const wchar_t*, const wchar_t*, int);
d143 1
a143 1
__CSTD FILE*	_wpopen (const wchar_t*, const wchar_t*);
@


1.10.6.8
log
@	* include/cytpe.h: Prefix identifiers used as args of inlines
	with '__', throughout.
	* include/inttypes.h: Likewise.
	* include/math.h: Likewise.
	* include/stdio.h: Likewise.
	* include/stdlib.h: Likewise.
	* include/wchar.h: Likewise.
	* include/wctype.h: Likewise.
@
text
@d153 2
a154 3
vsnwprintf (wchar_t* __s, size_t __n, const wchar_t* __format,
	    __VALIST __arg)
  { return _vsnwprintf ( __s, __n, __format, __arg);}
d407 2
a408 2
extern __inline__ float wcstof( const wchar_t *__nptr, wchar_t **__endptr)
{  return (wcstod(__nptr, __endptr)); }
d436 2
a437 4
extern __inline__ int fwide(FILE* __stream, int __mode)
  {return -1;} /* limited to byte orientation */ 
extern __inline__ int mbsinit(const mbstate_t* __ps)
  {return 1;}
@


1.10.6.9
log
@	* include/stdio.h: Qualify another size_t with __CSTD.
	* include/stdlib.h: Likewise.
	* include/wchar.h: Qualify size_t with __CSTD,
	when in global namespace.
@
text
@d148 2
a149 2
int	_snwprintf (wchar_t*, __CSTD size_t, const wchar_t*, ...);
int	_vsnwprintf (wchar_t*, __CSTD size_t, const wchar_t*, __VALIST);
d151 1
a151 1
int snwprintf(wchar_t* s, __CSTD size_t n, const wchar_t*  format, ...);
d153 1
a153 1
vsnwprintf (wchar_t* __s, __CSTD size_t __n, const wchar_t* __format,
d200 2
a201 2
int	_wcsnicmp (const wchar_t*, const wchar_t*, __CSTD size_t);
wchar_t* _wcsnset (wchar_t*, wchar_t, __CSTD size_t);
d207 2
a208 2
int  _wcsncoll(const wchar_t*, const wchar_t*, __CSTD size_t);
int  _wcsnicoll(const wchar_t*, const wchar_t*, __CSTD size_t);
d218 2
a219 2
int	wcsnicmp (const wchar_t*, const wchar_t*, __CSTD size_t);
wchar_t* wcsnset (wchar_t*, wchar_t, __CSTD size_t);
@


1.10.6.10
log
@	Merge from mingw trunk (changes since 2002-11-19).
@
text
@a409 1
long double wcstold (const wchar_t * __restrict__, wchar_t ** __restrict__);
@


1.10.6.11
log
@	Merge from mingw trunk (changes since 2003-01-27).
@
text
@d106 12
a117 12
_CRTIMP int __cdecl fwprintf (FILE*, const wchar_t*, ...);
_CRTIMP int __cdecl wprintf (const wchar_t*, ...);
_CRTIMP int __cdecl swprintf (wchar_t*, const wchar_t*, ...);
_CRTIMP int __cdecl vfwprintf (FILE*, const wchar_t*, __VALIST);
_CRTIMP int __cdecl vwprintf (const wchar_t*, __VALIST);
_CRTIMP int __cdecl vswprintf (wchar_t*, const wchar_t*, __VALIST);
_CRTIMP int __cdecl fwscanf (FILE*, const wchar_t*, ...);
_CRTIMP int __cdecl wscanf (const wchar_t*, ...);
_CRTIMP int __cdecl swscanf (const wchar_t*, const wchar_t*, ...);
_CRTIMP wint_t __cdecl fgetwc (FILE*);
_CRTIMP wint_t __cdecl fputwc (wchar_t, FILE*);
_CRTIMP wint_t __cdecl ungetwc (wchar_t, FILE*);
d119 6
a124 6
_CRTIMP wchar_t* __cdecl fgetws (wchar_t*, int, FILE*);
_CRTIMP int __cdecl fputws (const wchar_t*, FILE*);
_CRTIMP wint_t __cdecl getwc (FILE*);
_CRTIMP wint_t __cdecl getwchar (void);
_CRTIMP wint_t __cdecl putwc (wint_t, FILE*);
_CRTIMP wint_t __cdecl putwchar (wint_t);
d132 12
a143 12
_CRTIMP wchar_t* __cdecl _getws (wchar_t*);
_CRTIMP int __cdecl _putws (const wchar_t*);
_CRTIMP __CSTD FILE* _wfdopen(int, wchar_t *);
_CRTIMP __CSTD FILE* _wfopen (const wchar_t*, const wchar_t*);
_CRTIMP __CSTD FILE* _wfreopen (const wchar_t*, const wchar_t*, __CSTD FILE*);
_CRTIMP __CSTD FILE* _wfsopen (const wchar_t*, const wchar_t*, int);
_CRTIMP wchar_t* __cdecl _wtmpnam (wchar_t*);
_CRTIMP wchar_t* __cdecl _wtempnam (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl _wrename (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl _wremove (const wchar_t*);
_CRTIMP void __cdecl _wperror (const wchar_t*);
_CRTIMP __CSTD FILE* __cdecl _wpopen (const wchar_t*, const wchar_t*);
d148 2
a149 2
int __cdecl _snwprintf (wchar_t*, __CSTD size_t, const wchar_t*, ...);
int __cdecl _vsnwprintf (wchar_t*, __CSTD size_t, const wchar_t*, __VALIST);
d151 2
a152 2
int __cdecl snwprintf(wchar_t* s, __CSTD size_t n, const wchar_t*  format, ...);
extern __inline__ int __cdecl
a155 5
int __cdecl vwscanf (const wchar_t * __restrict__, __VALIST);
int __cdecl vfwscanf (__CSTD FILE * __restrict__,
		       const wchar_t * __restrict__, __VALIST);
int __cdecl vswscanf (const wchar_t * __restrict__,
		       const wchar_t * __restrict__, __VALIST);
d168 6
a173 6
_CRTIMP wchar_t* __cdecl wcscat (wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcschr (const wchar_t*, wchar_t);
_CRTIMP int __cdecl wcscmp (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl wcscoll (const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcscpy (wchar_t*, const wchar_t*);
_CRTIMP size_t __cdeclwcscspn (const wchar_t*, const wchar_t*);
d175 10
a184 10
_CRTIMP size_t __cdecl wcslen (const wchar_t*);
_CRTIMP wchar_t* __cdecl wcsncat (wchar_t*, const wchar_t*, size_t);
_CRTIMP int __cdecl wcsncmp(const wchar_t*, const wchar_t*, size_t);
_CRTIMP wchar_t* __cdecl wcsncpy(wchar_t*, const wchar_t*, size_t);
_CRTIMP wchar_t* __cdecl wcspbrk(const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcsrchr(const wchar_t*, wchar_t);
_CRTIMP size_t __cdeclwcsspn(const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcsstr(const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcstok(wchar_t*, const wchar_t*);
_CRTIMP size_t __cdecl wcsxfrm(wchar_t*, const wchar_t*, size_t);
d194 1
a194 1
#define  _wcscmpi _wcsicmp
d196 9
a204 9
_CRTIMP  wchar_t* __cdecl _wcsdup (const wchar_t*);
_CRTIMP int __cdecl _wcsicmp (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl _wcsicoll (const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl _wcslwr (wchar_t*);
_CRTIMP int __cdecl _wcsnicmp (const wchar_t*, const wchar_t*, __CSTD size_t);
_CRTIMP wchar_t* __cdecl _wcsnset (wchar_t*, wchar_t, __CSTD size_t);
_CRTIMP wchar_t* __cdecl _wcsrev (wchar_t*);
_CRTIMP wchar_t* __cdecl _wcsset (wchar_t*, wchar_t);
_CRTIMP wchar_t* __cdecl _wcsupr (wchar_t*);
d207 2
a208 2
_CRTIMP int  _wcsncoll(const wchar_t*, const wchar_t*, __CSTD size_t);
_CRTIMP int  _wcsnicoll(const wchar_t*, const wchar_t*, __CSTD size_t);
d213 10
a222 10
_CRTIMP int __cdecl wcscmpi (const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcsdup (wchar_t*);
_CRTIMP int __cdecl wcsicmp (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl wcsicoll (const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcslwr (wchar_t*);
_CRTIMP int __cdecl wcsnicmp (const wchar_t*, const wchar_t*, __CSTD size_t);
_CRTIMP wchar_t* __cdecl wcsnset (wchar_t*, wchar_t, __CSTD size_t);
_CRTIMP wchar_t* __cdecl wcsrev (wchar_t*);
_CRTIMP wchar_t* __cdecl wcsset (wchar_t*, wchar_t);
_CRTIMP wchar_t* __cdecl wcsupr (wchar_t*);
d266 11
a276 11
_CRTIMP int __cdecl _waccess(const wchar_t*, int);
_CRTIMP int __cdecl _wchmod(const wchar_t*, int);
_CRTIMP int __cdecl _wcreat(const wchar_t*, int);
_CRTIMP long __cdecl _wfindfirst(const wchar_t*, struct _wfinddata_t*);
_CRTIMP int __cdecl _wfindnext(long, struct _wfinddata_t *);
_CRTIMP int __cdecl _wunlink(const wchar_t*);
_CRTIMP int __cdecl _wopen(const wchar_t*, int, ...);
_CRTIMP int __cdecl _wsopen(const wchar_t*, int, int, ...);
_CRTIMP wchar_t * __cdecl _wmktemp(wchar_t*);
_CRTIMP long __cdecl _wfindfirsti64(const wchar_t*, struct _wfinddatai64_t*);
_CRTIMP int __cdecl _wfindnexti64(long, struct _wfinddatai64_t*);
d301 5
a305 5
_CRTIMP int __cdecl	  _wchdir (const wchar_t*);
_CRTIMP wchar_t* __cdecl  _wgetcwd (wchar_t*, int);
_CRTIMP wchar_t* __cdecl  _wgetdcwd (int, wchar_t*, int);
_CRTIMP int __cdecl	  _wmkdir (const wchar_t*);
_CRTIMP int __cdecl   _wrmdir (const wchar_t*);
d371 2
a372 2
_CRTIMP int __cdecl _wstat (const wchar_t*, struct _stat*);
_CRTIMP int __cdecl _wstati64 (const wchar_t*, struct _stati64*);
d378 1
a378 1
_CRTIMP wchar_t* __cdecl _wsetlocale (int, const wchar_t*);
d389 4
a392 4
_CRTIMP wchar_t* __cdecl _wasctime (const struct __CSTD tm*);
_CRTIMP wchar_t* __cdecl _wctime (const __CSTD time_t*);
_CRTIMP wchar_t* __cdecl _wstrdate (wchar_t*);
_CRTIMP wchar_t* __cdecl _wstrtime (wchar_t*);
d397 1
a397 1
_CRTIMP size_t __cdecl wcsftime (wchar_t*, size_t, const wchar_t*, const struct tm*);
d404 3
a406 3
_CRTIMP long __cdecl wcstol (const wchar_t*, wchar_t**, int);
_CRTIMP unsigned long __cdecl wcstoul (const wchar_t*, wchar_t**, int);
_CRTIMP double __cdecl	wcstod (const wchar_t*, wchar_t**);
d408 3
a410 3
extern __inline__ float __cdecl wcstof( const wchar_t *__nptr, wchar_t **__endptr)
	{  return (wcstod(__nptr, __endptr)); }
long double __cdecl wcstold (const wchar_t * __restrict__, wchar_t ** __restrict__);
d428 8
a435 8
wint_t __cdecl btowc(int);
size_t __cdecl mbrlen(const char *, size_t, mbstate_t *);
size_t __cdecl mbrtowc(wchar_t *, const char *, size_t, mbstate_t *);
size_t __cdecl mbsrtowcs(wchar_t *, const char **, size_t, mbstate_t *);

size_t __cdecl wcrtomb(char *, wchar_t, mbstate_t *);
size_t __cdecl wcsrtombs(char *, const wchar_t **, size_t, mbstate_t *);
int __cdecl wctob(wint_t);
d442 10
a451 10
wchar_t* __cdecl wmemset(wchar_t* s, wchar_t c, size_t n);
wchar_t* __cdecl wmemchr(const wchar_t* s, wchar_t c, size_t n);
int __cdecl wmemcmp(const wchar_t* s1, const wchar_t * s2, size_t n);
wchar_t* __cdecl wmemcpy(wchar_t* __restrict__ s1, const wchar_t* __restrict__ s2,
			 size_t n);
wchar_t* __cdecl wmemmove(wchar_t* s1, const wchar_t* s2, size_t n);
long long __cdecl wcstoll(const wchar_t* __restrict__ nptr,
			  wchar_t** __restrict__ endptr, int base);
unsigned long long __cdecl wcstoull(const wchar_t* __restrict__ nptr,
				    wchar_t ** __restrict__ endptr, int base);
@


1.10.6.12
log
@	* include/_mingw.h: Don't include <bits/c++config.h>.
	(__MINGW_USE_NAMESPACES): Define as _GLIBCPP_USE_NAMESPACES.
	* include/ctype.h: Whitespace changes.
	* include/locale.h: Remove duplicate inclusion of <stddef.h>.
	* include/stdlib.h: (strtof, strtold): Move out of std namespace.
	(wcstof, wcstold): Likewise.
	* include/time.h (strftime): Remove duplicate declaration.
	(_wasctime): Qualify tm with __CSTD.
	* include/wchar.h (wcstof, wcstold): Move out of std namespace.
	(wcstoll, wcstoull): Likewise.
	* include/sys/types.h (__MINGW_USE_NAMESPACES): Use instead of
	__USE_STD_CXX.
@
text
@d151 1
a151 1
int __cdecl snwprintf (wchar_t* s, __CSTD size_t n, const wchar_t*  format, ...);
a411 1
__END_CSTD_NAMESPACE
a412 1
__BEGIN_CGLOBAL_NAMESPACE
d414 1
a414 1
	{  return __CSTD wcstod(__nptr, __endptr); }
a415 1
__END_CGLOBAL_NAMESPACE
d417 1
d426 1
a440 1
__END_CSTD_NAMESPACE
a442 1
__BEGIN_CSTD_NAMESPACE
a452 2
__END_CSTD_NAMESPACE
__BEGIN_CGLOBAL_NAMESPACE
d457 1
a457 1
__END_CGLOBAL_NAMESPACE
d459 2
@


1.9
log
@	* include/_mingw.h: Increment version to 2.0.
	* Makefile.in: Ditto.
	Merge in mingwex branch.
@
text
@d91 1
a91 1
long	_wfindfirst (wchar_t*, struct _wfinddata_t *);
d136 1
a136 1

@


1.8
log
@	* include/stdio.h (_snwprintf): Correct spelling.
	(_vsnwprintf): Likewise.
	* include/wchar.h (_snwprintf): Correct spelling.
	(_vsnwprintf): Likewise.
@
text
@d120 7
d246 11
d293 17
@


1.7
log
@	* moldname.def.in (__MSVCRT__): Replace with !(__CRTDLL).
	(wpopen): Add if !(__CRTDLL).
	* Makefile.in (moldname-msvcrt.def rule): Use -C, not -c to
	preserve comments.
	(moldname-crtdll.def rule): Likewise.
	* moldname-msvcrt.def: Regenerate.
	* moldname-crtdll.def: Regenerate.
	* include/stdio.h (wpopen):Use prototype, not a define.
	(_swnprintf): Add prototype.
	(_vswnprintf): Likewise.
	Tidy up whitespace.
	* include/wchar.h (_swnprintf): Add prototype.
	(_vswnprintf): Likewise.
	Tidy up whitespace.
@
text
@d108 1
a108 1
int	_swnprintf (wchar_t*, size_t, const wchar_t*, ...);
d112 1
a112 1
int	_vswnprintf (wchar_t*, size_t, const wchar_t*, va_list);
@


1.6
log
@Merge MinGW CVS differences
@
text
@d88 11
a98 11
int 		_waccess(const wchar_t*, int);
int 		_wchmod(const wchar_t*, int);
int 		_wcreat(const wchar_t*, int);
long 		_wfindfirst(wchar_t*, struct _wfinddata_t *);
int 		_wfindnext(long, struct _wfinddata_t *);
int 		_wunlink(const wchar_t*);
int 		_wopen(const wchar_t*, int, ...);
int 		_wsopen(const wchar_t*, int, int, ...);
wchar_t * 	_wmktemp(wchar_t*);
long  _wfindfirsti64(const wchar_t*, struct _wfinddatai64_t*);
int  _wfindnexti64(long, struct _wfinddatai64_t*);
d108 1
d112 1
d121 8
a128 8
wchar_t*    fgetws (wchar_t*, int, FILE*);
int         fputws (const wchar_t*, FILE*);
wint_t		getwc (FILE*);
wint_t	    getwchar (void);
wchar_t*    _getws (wchar_t*);
wint_t	    putwc (wint_t, FILE*);
int         _putws (const wchar_t*);
wint_t	    putwchar (wint_t);
d132 5
a136 5
FILE*   _wfsopen(const wchar_t*, const wchar_t*, int);
wchar_t*	_wtmpnam (wchar_t*);
wchar_t*	_wtempnam (const wchar_t*, const wchar_t*);
int 	_wrename(const wchar_t*, const wchar_t*);
int 	_wremove (const wchar_t*)
d138 2
a139 2
FILE*  _wpopen(const wchar_t*, const wchar_t*)
void  _wperror(const wchar_t*);
d147 5
a151 5
int _wchdir(const wchar_t*);
wchar_t* _wgetcwd(wchar_t*, int);
wchar_t* _wgetdcwd(int, wchar_t*, int);
int _wmkdir(const wchar_t*);
int _wrmdir(const wchar_t*);
d216 1
a216 1
int	_wstat(const wchar_t*, struct _stat*);
d225 4
a228 4
wchar_t *	_wasctime(const struct tm*);
wchar_t *	_wctime(const time_t*);
wchar_t*	_wstrdate(wchar_t*);
wchar_t*	_wstrtime(wchar_t*);
d230 1
a230 1
size_t		wcsftime(wchar_t*, size_t, const wchar_t*, const struct tm*);
d235 1
a235 1
wchar_t* _wsetlocale(int, const wchar_t*);
d245 11
a255 11
int 		waccess(const wchar_t *, int);
int 		wchmod(const wchar_t *, int);
int 		wcreat(const wchar_t *, int);
long 		wfindfirst(wchar_t *, struct _wfinddata_t *);
int 		wfindnext(long, struct _wfinddata_t *);
int 		wunlink(const wchar_t *);
int 		wrename(const wchar_t *, const wchar_t *);
int 		wremove (const wchar_t *);
int 		wopen(const wchar_t *, int, ...);
int 		wsopen(const wchar_t *, int, int, ...);
wchar_t * 	wmktemp(wchar_t *);
@


1.6.10.1
log
@Added fenv.h inttypes.h
@
text
@a236 11
#ifndef _WSTDLIB_DEFINED /* also declared in stdlib.h */
long	wcstol	(const wchar_t*, wchar_t**, int);
unsigned long	wcstoul (const wchar_t*, wchar_t**, int);
double	wcstod	(const wchar_t*, wchar_t**);
#if !defined __NO_ISOCEXT /* extern stub in static libmingwex.a */
extern __inline__ float wcstof( const wchar_t *nptr, wchar_t **endptr)
{  return (wcstod(nptr, endptr)); }
#endif /* __NO_ISOCEXT */
#define  _WSTDLIB_DEFINED
#endif

a272 17

#ifndef __NO_ISOCEXT /* these need static lib libmingwex.a */
extern inline int fwide(FILE* stream, int mode) {return -1;} /* limited to byte orientation */ 
extern inline int mbsinit(const mbstate_t* ps) {return 1;}
wchar_t* wmemset(wchar_t* s, wchar_t c, size_t n);
wchar_t* wmemchr(const wchar_t* s, wchar_t c, size_t n);
int wmemcmp(const wchar_t* s1, const wchar_t * s2, size_t n);
wchar_t* wmemcpy(wchar_t* __restrict__ s1, const wchar_t* __restrict__ s2,
		 size_t n);
wchar_t* wmemmove(wchar_t* s1, const wchar_t* s2, size_t n);
long long wcstoll(const wchar_t* __restrict__ nptr,
		  wchar_t** __restrict__ endptr, int base);
unsigned long long wcstoull(const wchar_t* __restrict__ nptr,
			    wchar_t ** __restrict__ endptr, int base);

#endif /* __NO_ISOCEXT */

@


1.6.10.2
log
@	* moldname.def.in (__MSVCRT__): Replace with !(__CRTDLL).
	(wpopen): Add if !(__CRTDLL).
	* Makefile.in (moldname-msvcrt.def rule): Use -C, not -c to
	preserve comments.
	(moldname-crtdll.def rule): Likewise.
	* moldname-msvcrt.def: Regenerate.
	* moldname-crtdll.def: Regenerate.
	* include/stdio.h (wpopen):Use prototype, not a define.
	(_swnprintf): Add prototype.
	(_vswnprintf): Likewise.
	Tidy up whitespace.
	* include/wchar.h (_swnprintf): Add prototype.
	(_vswnprintf): Likewise.
	Tidy up whitespace.
@
text
@d88 11
a98 11
int	 _waccess (const wchar_t*, int);
int	_wchmod (const wchar_t*, int);
int	_wcreat (const wchar_t*, int);
long	_wfindfirst (wchar_t*, struct _wfinddata_t *);
int	_wfindnext (long, struct _wfinddata_t *);
int	_wunlink (const wchar_t*);
int	_wopen (const wchar_t*, int, ...);
int	_wsopen (const wchar_t*, int, int, ...);
wchar_t* _wmktemp (wchar_t*);
long	_wfindfirsti64 (const wchar_t*, struct _wfinddatai64_t*);
int 	_wfindnexti64 (long, struct _wfinddatai64_t*);
a107 1
int	_swnprintf (wchar_t*, size_t, const wchar_t*, ...);
a110 1
int	_vswnprintf (wchar_t*, size_t, const wchar_t*, va_list);
d119 8
a126 8
wchar_t* fgetws (wchar_t*, int, FILE*);
int	fputws (const wchar_t*, FILE*);
wint_t	getwc (FILE*);
wint_t  getwchar (void);
wchar_t* _getws (wchar_t*);
wint_t	putwc (wint_t, FILE*);
int	_putws (const wchar_t*);
wint_t	putwchar (wint_t);
d130 5
a134 5
FILE*   _wfsopen (const wchar_t*, const wchar_t*, int);
wchar_t* _wtmpnam (wchar_t*);
wchar_t* _wtempnam (const wchar_t*, const wchar_t*);
int 	_wrename (const wchar_t*, const wchar_t*);
int	_wremove (const wchar_t*)
d136 2
a137 2
FILE*	  _wpopen (const wchar_t*, const wchar_t*)
void	  _wperror (const wchar_t*);
d145 5
a149 5
int	  _wchdir (const wchar_t*);
wchar_t*  _wgetcwd (wchar_t*, int);
wchar_t*  _wgetdcwd (int, wchar_t*, int);
int	  _wmkdir (const wchar_t*);
int	  _wrmdir (const wchar_t*);
d214 1
a214 1
int	_wstat (const wchar_t*, struct _stat*);
d223 4
a226 4
wchar_t*	_wasctime (const struct tm*);
wchar_t*	_wctime (const time_t*);
wchar_t*	_wstrdate (wchar_t*);
wchar_t*	_wstrtime (wchar_t*);
d228 1
a228 1
size_t		wcsftime (wchar_t*, size_t, const wchar_t*, const struct tm*);
d233 1
a233 1
wchar_t* _wsetlocale (int, const wchar_t*);
d254 11
a264 11
int		waccess (const wchar_t *, int);
int		wchmod (const wchar_t *, int);
int		wcreat (const wchar_t *, int);
long		wfindfirst (wchar_t *, struct _wfinddata_t *);
int		wfindnext (long, struct _wfinddata_t *);
int		wunlink (const wchar_t *);
int		wrename (const wchar_t *, const wchar_t *);
int		wremove (const wchar_t *);
int		wopen (const wchar_t *, int, ...);
int		wsopen (const wchar_t *, int, int, ...);
wchar_t*	wmktemp (wchar_t *);
@


1.6.10.3
log
@	* include/stdint.h: Add missing newline at eof.
	* include/stdio.h (_snwprintf): Correct spelling.
	(_vsnwprintf): Likewise.
	(snprintf): Add prototype.
	(vsnprintf): Add prototype and inline definition.
	(snwprintf): Add prototype.
	(vsnwprintf): Add prototype and inline definition.
	* include/wchar.h (_snwprintf): Correct spelling.
	(_vsnwprintf): Likewise.
	(snwprintf): Add prototype.
	(vsnwprintf): Add prototype and inline definition.
	* mingwex/Makefile.in: Add snprintf.o, snwprintf.o
	to libmingwex.a.
	* mingwex/snprintf.c: New file.
	* mingwex/snwprintf.c: New file.
@
text
@d108 1
a108 1
int	_snwprintf (wchar_t*, size_t, const wchar_t*, ...);
d112 1
a112 1
int	_vsnwprintf (wchar_t*, size_t, const wchar_t*, va_list);
a118 7

#ifndef __NO_ISOCEXT  /* externs in libmingwex.a */
int snwprintf(wchar_t* s, size_t n, const wchar_t*  format, ...);
extern inline int vsnwprintf (wchar_t* s, size_t n, const wchar_t* format,
			   va_list arg)
  { return _vsnwprintf ( s, n, format, arg); }
#endif
@


1.6.10.4
log
@	* include/stdio.h (vsnprintf): Change inline to __inline__;
	(vsnwprintf): Likewise.
 	* include/wchar.h (vsnwprintf): Likewise.
	(wcstof): Likewise.
	(fwide): Likewise.
	(mbsinit): Likewise.
@
text
@d122 1
a122 1
extern __inline__ int vsnwprintf (wchar_t* s, size_t n, const wchar_t* format,
d295 2
a296 2
extern __inline__ int fwide(FILE* stream, int mode) {return -1;} /* limited to byte orientation */ 
extern __inline__ int mbsinit(const mbstate_t* ps) {return 1;}
@


1.5
log
@
	* include/stdio.h (swscanf): Make first arugument const.
	* include/wchar.h (swscanf): Ditto.
	* include/tchar.h (_tfopen): New _UNICODE define.
	(_tgetenv): Ditto.
	(_tsetlocale): Ditto.
@
text
@d18 1
a18 1
 *  DISCLAMED. This includes but is not limited to warranties of
d21 3
a23 3
 * $Revision: 1.5 $
 * $Author: cgf $
 * $Date: 2000/02/05 04:04:59 $
@


1.4
log
@
	* include/wchar.h: The 2001.01.18 Change was incorrect.  The functions
	are actually C functions.  These functions are resolved via the
	-lmsvcp60 library and comments were placed in the header.
@
text
@d113 1
a113 1
int	swscanf (wchar_t*, const wchar_t*, ...);
@


1.3
log
@
	* include/wchar.h: Protect prototypes only declared in the C++ STL
	from being declared unless __cplusplus is defined.
@
text
@d259 3
a261 2
#ifdef __cplusplus
/* These are only defined in C++ STL runtime dll.  */
a272 1
#endif def __cplusplus
@


1.2
log
@
	* include/direct.h: add guard around MSVCRT-only prototytpes
	* include/io.h: add __int64 struct definitions and function prototypes;
		 add guard for MSVCRT-only prototypes
	* include/limits.h: add ISO C9x macros LLONG_MIN, LLONG_MAX, ULLONG_MAX
	* include/stdio.h: add wchar function prototypes (__MSVCRT__);
		 put wchar functions together to make sync with wchar.h easier
	* include/stdlib.h: add wide char functions (__MSVCRT__)
	* include/string.h: add string collation functions ( __MSVCRT__)
	* include/sys/stat.h: add __int64 struct and function ( __MSVCRT__)
	* include/tchar.h: add macros and macro function definitions
	* include/wchar.h: add wide char function prototypes ( __MSVCRT__ );
		enclose more functions in __MSVCRT__ guard;
		some oldname wide char function prototypes #if (0)'d
	* profile/gmon.h: add guard around BSD-ish typedefs
@
text
@d259 2
d271 2
a272 1
int  wctob(wint_t);
@


1.1
log
@Initial revision
@
text
@d72 8
d86 6
a91 4
int 		_waccess(const wchar_t *, int);
int 		_wchmod(const wchar_t *, int);
int 		_wcreat(const wchar_t *, int);
long 		_wfindfirst(wchar_t *, struct _wfinddata_t *);
d93 48
a140 6
int 		_wunlink(const wchar_t *);
int 		_wrename(const wchar_t *, const wchar_t *);
int 		_wremove (const wchar_t *);
int 		_wopen(const wchar_t *, int, ...);
int 		_wsopen(const wchar_t *, int, int, ...);
wchar_t * 	_wmktemp(wchar_t *);
a142 1

d144 1
a144 1

d150 1
a150 1

d152 1
a152 1
#endif
d193 15
a207 1

d211 1
a211 2
#ifndef _WSTAT_DEFINED

d213 4
a216 3

int	_wstat(const wchar_t *, struct _stat *);

d218 1
a218 1
#endif /* _WSTAT_DEFINED */
a221 1

a222 1

a226 1

a227 1

a228 1

d232 5
d240 3
a242 2
/* Wide character versions. Also declared in wchar.h. */
/* CHECK: Are these in the olnames??? */
d254 1
a254 1

d271 2
a272 2
#ifdef __cplusplus 
}
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
