head	1.17;
access;
symbols
	cygwin-1_7_17-release:1.16
	cygwin-64bit-branch:1.16.0.4
	cygwin-1_7_16-release:1.16
	cygwin-1_7_15-release:1.16
	cygwin-1_7_14_2-release:1.16
	cygwin-1_7_14-release:1.16
	cygwin-1_7_12-release:1.16
	cygwin-1_7_11-release:1.16
	cygwin-1_7_10-release:1.16
	cygwin-1_7_9-release:1.16
	cygwin-1_7_8-release:1.16
	cygwin-1_7_7-release:1.16
	cygwin-1_7_5-release:1.16
	cygwin-1_7_4-release:1.16
	cygwin-1_7_3-release:1.16
	cygwin-1_7_2-release:1.16
	cygwin-1_7_1-release:1.16
	cv-branch-2:1.16.0.2
	cr-0x5f1:1.9.0.6
	cv-branch:1.9.0.4
	cr-0x3b58:1.9.0.2
	cr-0x9e:1.7.0.4
	cr-0x9d:1.7.0.2
	corinna-01:1.7
	cr-0x9c:1.6.0.6
	cr-0x9b:1.6.0.4
	cr-0x99:1.6
	Z-emcb-cygwin_daemon:1.6.0.2
	w32api-2_2:1.5
	mingw-runtime-2_4:1.5
	mingw-std-ns-branch:1.3.0.6
	mingw-runtime-2_0:1.3
	mingwex:1.2.0.10
	cygnus_cvs_20020108_pre:1.2
	Z-cygwin_daemon_merge-new_HEAD:1.1.1.1
	Z-cygwin_daemon_merge_HEAD:1.1.1.1
	cygwin_daemon:1.1.1.1.0.10;
locks; strict;
comment	@ * @;
expand	@o@;


1.17
date	2012.11.07.16.52.16;	author cgf;	state dead;
branches;
next	1.16;

1.16
date	2008.07.07.07.58.33;	author dannysmith;	state Exp;
branches;
next	1.15;

1.15
date	2007.06.28.07.13.04;	author dannysmith;	state Exp;
branches;
next	1.14;

1.14
date	2007.06.23.07.34.15;	author dannysmith;	state Exp;
branches;
next	1.13;

1.13
date	2006.08.27.12.14.58;	author ironhead;	state Exp;
branches;
next	1.12;

1.12
date	2006.08.25.09.10.05;	author dannysmith;	state Exp;
branches;
next	1.11;

1.11
date	2006.08.03.21.05.05;	author dannysmith;	state Exp;
branches;
next	1.10;

1.10
date	2006.08.03.07.44.30;	author dannysmith;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.10.10.10.32;	author dannysmith;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.20.22.49.32;	author earnie;	state Exp;
branches;
next	1.7;

1.7
date	2003.09.24.00.41.01;	author dannysmith;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.10.21.13.34;	author dannysmith;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.07.21.05.13;	author dannysmith;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.03.00.51.25;	author dannysmith;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.13.10.20.43;	author dannysmith;	state Exp;
branches
	1.3.6.1;
next	1.2;

1.2
date	2001.12.05.15.01.05;	author earnie;	state Exp;
branches
	1.2.10.1;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;

1.2.10.1
date	2002.04.26.01.32.09;	author dannysmith;	state Exp;
branches;
next	;

1.3.6.1
date	2002.09.20.04.15.13;	author dannysmith;	state Exp;
branches;
next	1.3.6.2;

1.3.6.2
date	2002.09.30.02.27.17;	author dannysmith;	state Exp;
branches;
next	1.3.6.3;

1.3.6.3
date	2002.10.02.04.38.36;	author dannysmith;	state Exp;
branches;
next	1.3.6.4;

1.3.6.4
date	2002.10.03.23.42.00;	author dannysmith;	state Exp;
branches;
next	1.3.6.5;

1.3.6.5
date	2002.10.11.03.13.32;	author dannysmith;	state Exp;
branches;
next	1.3.6.6;

1.3.6.6
date	2003.01.26.22.37.50;	author dannysmith;	state Exp;
branches;
next	1.3.6.7;

1.3.6.7
date	2003.03.31.22.32.19;	author dannysmith;	state Exp;
branches;
next	1.3.6.8;

1.3.6.8
date	2003.04.07.01.22.47;	author dannysmith;	state Exp;
branches;
next	;


desc
@@


1.17
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@/* 
 * ctype.h
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is a part of the mingw-runtime package.
 * No warranty is given; refer to the file DISCLAIMER within the package.
 *
 * Functions for testing character types and converting characters.
 *
 */

#ifndef _CTYPE_H_
#define _CTYPE_H_

/* All the headers include this file. */
#include <_mingw.h>

#define	__need_wchar_t
#define	__need_wint_t
#ifndef RC_INVOKED
#include <stddef.h>
#endif	/* Not RC_INVOKED */


/*
 * The following flags are used to tell iswctype and _isctype what character
 * types you are looking for.
 */
#define	_UPPER		0x0001
#define	_LOWER		0x0002
#define	_DIGIT		0x0004
#define	_SPACE		0x0008 /* HT  LF  VT  FF  CR  SP */
#define	_PUNCT		0x0010
#define	_CONTROL	0x0020
/* _BLANK is set for SP and non-ASCII horizontal space chars (eg,
   "no-break space", 0xA0, in CP1250) but not for HT.  */
#define	_BLANK		0x0040
#define	_HEX		0x0080
#define	_LEADBYTE	0x8000

#define	_ALPHA		0x0103

#ifndef RC_INVOKED

#ifdef __cplusplus
extern "C" {
#endif

_CRTIMP int __cdecl __MINGW_NOTHROW isalnum(int);
_CRTIMP int __cdecl __MINGW_NOTHROW isalpha(int);
_CRTIMP int __cdecl __MINGW_NOTHROW iscntrl(int);
_CRTIMP int __cdecl __MINGW_NOTHROW isdigit(int);
_CRTIMP int __cdecl __MINGW_NOTHROW isgraph(int);
_CRTIMP int __cdecl __MINGW_NOTHROW islower(int);
_CRTIMP int __cdecl __MINGW_NOTHROW isprint(int);
_CRTIMP int __cdecl __MINGW_NOTHROW ispunct(int);
_CRTIMP int __cdecl __MINGW_NOTHROW isspace(int);
_CRTIMP int __cdecl __MINGW_NOTHROW isupper(int);
_CRTIMP int __cdecl __MINGW_NOTHROW isxdigit(int);

#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) \
     || !defined __STRICT_ANSI__
int __cdecl __MINGW_NOTHROW isblank (int);
#endif

#ifndef __STRICT_ANSI__
_CRTIMP int __cdecl __MINGW_NOTHROW _isctype (int, int);
#endif

/* These are the ANSI versions, with correct checking of argument */
_CRTIMP int __cdecl __MINGW_NOTHROW tolower(int);
_CRTIMP int __cdecl __MINGW_NOTHROW toupper(int);

/*
 * NOTE: The above are not old name type wrappers, but functions exported
 * explicitly by MSVCRT/CRTDLL. However, underscored versions are also
 * exported.
 */
#ifndef	__STRICT_ANSI__
/*
 *  These are the cheap non-std versions: The return values are undefined
 *  if the argument is not ASCII char or is not of appropriate case
 */ 
_CRTIMP int __cdecl __MINGW_NOTHROW _tolower(int);
_CRTIMP int __cdecl __MINGW_NOTHROW _toupper(int);
#endif

/* Also defined in stdlib.h */
#ifndef MB_CUR_MAX
#ifdef __DECLSPEC_SUPPORTED
# ifdef __MSVCRT__
#  define MB_CUR_MAX __mb_cur_max
   __MINGW_IMPORT int __mb_cur_max;
# else	/* not __MSVCRT */
#  define MB_CUR_MAX __mb_cur_max_dll
   __MINGW_IMPORT int __mb_cur_max_dll;
# endif	/* not __MSVCRT */

#else		/* ! __DECLSPEC_SUPPORTED */
# ifdef __MSVCRT__
   extern int* _imp____mb_cur_max;
#  define MB_CUR_MAX (*_imp____mb_cur_max)
# else		/* not __MSVCRT */
   extern int*  _imp____mb_cur_max_dll;
#  define MB_CUR_MAX (*_imp____mb_cur_max_dll)
# endif 	/* not __MSVCRT */
#endif  	/*  __DECLSPEC_SUPPORTED */
#endif  /* MB_CUR_MAX */


#ifdef __DECLSPEC_SUPPORTED
# if __MSVCRT_VERSION__ <= 0x0700
  __MINGW_IMPORT unsigned short _ctype[];
# endif
# ifdef __MSVCRT__
  __MINGW_IMPORT unsigned short* _pctype;
# else /* CRTDLL */
  __MINGW_IMPORT unsigned short* _pctype_dll;
# define  _pctype _pctype_dll
# endif 

#else		/*  __DECLSPEC_SUPPORTED */
# if __MSVCRT_VERSION__ <= 0x0700
  extern unsigned short** _imp___ctype;
# define _ctype (*_imp___ctype)
# endif
# ifdef __MSVCRT__
  extern unsigned short** _imp___pctype;
# define _pctype (*_imp___pctype)
# else /* CRTDLL */
  extern unsigned short** _imp___pctype_dll;
# define _pctype (*_imp___pctype_dll)
# endif /* CRTDLL */
#endif		/*  __DECLSPEC_SUPPORTED */

/*
 * Use inlines here rather than macros, because macros will upset 
 * C++ usage (eg, ::isalnum), and so usually get undefined
 *
 * According to standard for SB chars, these function are defined only
 * for input values representable by unsigned char or EOF.
 * Thus, there is no range test.
 * This reproduces behaviour of MSVCRT.dll lib implemention for SB chars.
 *
 * If no MB char support is needed, these can be simplified even
 * more by command line define -DMB_CUR_MAX=1.  The compiler will then
 * optimise away the constant condition.			
 */

#if !(defined (__NO_INLINE__)  || defined (__NO_CTYPE_INLINES) \
	|| defined (__STRICT_ANSI__))

/* use  simple lookup if SB locale, else  _isctype()  */
#define __ISCTYPE(c, mask)  (MB_CUR_MAX == 1 ? (_pctype[c] & mask) : _isctype(c, mask))
__CRT_INLINE int __cdecl __MINGW_NOTHROW isalnum(int c) {return __ISCTYPE(c, (_ALPHA|_DIGIT));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW isalpha(int c) {return __ISCTYPE(c, _ALPHA);}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iscntrl(int c) {return __ISCTYPE(c, _CONTROL);}
__CRT_INLINE int __cdecl __MINGW_NOTHROW isdigit(int c) {return __ISCTYPE(c, _DIGIT);}
__CRT_INLINE int __cdecl __MINGW_NOTHROW isgraph(int c) {return __ISCTYPE(c, (_PUNCT|_ALPHA|_DIGIT));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW islower(int c) {return __ISCTYPE(c, _LOWER);}
__CRT_INLINE int __cdecl __MINGW_NOTHROW isprint(int c) {return __ISCTYPE(c, (_BLANK|_PUNCT|_ALPHA|_DIGIT));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW ispunct(int c) {return __ISCTYPE(c, _PUNCT);}
__CRT_INLINE int __cdecl __MINGW_NOTHROW isspace(int c) {return __ISCTYPE(c, _SPACE);}
__CRT_INLINE int __cdecl __MINGW_NOTHROW isupper(int c) {return __ISCTYPE(c, _UPPER);}
__CRT_INLINE int __cdecl __MINGW_NOTHROW isxdigit(int c) {return __ISCTYPE(c, _HEX);}

#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) \
     || !defined __STRICT_ANSI__
__CRT_INLINE int __cdecl __MINGW_NOTHROW isblank (int c)
  {return (__ISCTYPE(c, _BLANK) || c == '\t');}
#endif

/* these reproduce behaviour of lib underscored versions  */
__CRT_INLINE int __cdecl __MINGW_NOTHROW _tolower(int c) {return ( c -'A'+'a');}
__CRT_INLINE int __cdecl __MINGW_NOTHROW _toupper(int c) {return ( c -'a'+'A');}

/* TODO? Is it worth inlining ANSI tolower, toupper? Probably only
   if we only want C-locale. */

#endif /* _NO_CTYPE_INLINES */

/* Wide character equivalents */

#ifndef WEOF
#define	WEOF	(wchar_t)(0xFFFF)
#endif

#ifndef _WCTYPE_T_DEFINED
typedef wchar_t wctype_t;
#define _WCTYPE_T_DEFINED
#endif

_CRTIMP int __cdecl __MINGW_NOTHROW iswalnum(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW iswalpha(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW iswascii(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW iswcntrl(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW iswctype(wint_t, wctype_t);
_CRTIMP int __cdecl __MINGW_NOTHROW is_wctype(wint_t, wctype_t);	/* Obsolete! */
_CRTIMP int __cdecl __MINGW_NOTHROW iswdigit(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW iswgraph(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW iswlower(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW iswprint(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW iswpunct(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW iswspace(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW iswupper(wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW iswxdigit(wint_t);

#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) \
     || !defined __STRICT_ANSI__ || defined __cplusplus
int __cdecl __MINGW_NOTHROW iswblank (wint_t);
#endif

/* Older MS docs uses wchar_t for arg and return type, while newer
   online MS docs say arg is wint_t and return is int.
   ISO C uses wint_t for both.  */
_CRTIMP wint_t __cdecl __MINGW_NOTHROW towlower (wint_t);
_CRTIMP wint_t __cdecl __MINGW_NOTHROW towupper (wint_t);

_CRTIMP int __cdecl __MINGW_NOTHROW isleadbyte (int);

/* Also in wctype.h */
#if ! (defined (__NO_INLINE__) || defined(__NO_CTYPE_INLINES) \
       || defined(__WCTYPE_INLINES_DEFINED))
#define __WCTYPE_INLINES_DEFINED
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswalnum(wint_t wc) {return (iswctype(wc,_ALPHA|_DIGIT));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswalpha(wint_t wc) {return (iswctype(wc,_ALPHA));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswascii(wint_t wc) {return ((wc & ~0x7F) ==0);}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswcntrl(wint_t wc) {return (iswctype(wc,_CONTROL));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswdigit(wint_t wc) {return (iswctype(wc,_DIGIT));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswgraph(wint_t wc) {return (iswctype(wc,_PUNCT|_ALPHA|_DIGIT));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswlower(wint_t wc) {return (iswctype(wc,_LOWER));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswprint(wint_t wc) {return (iswctype(wc,_BLANK|_PUNCT|_ALPHA|_DIGIT));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswpunct(wint_t wc) {return (iswctype(wc,_PUNCT));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswspace(wint_t wc) {return (iswctype(wc,_SPACE));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswupper(wint_t wc) {return (iswctype(wc,_UPPER));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswxdigit(wint_t wc) {return (iswctype(wc,_HEX));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW isleadbyte(int c) {return (_pctype[(unsigned char)(c)] & _LEADBYTE);}
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) \
     || !defined __STRICT_ANSI__ || defined __cplusplus
__CRT_INLINE int __cdecl __MINGW_NOTHROW iswblank (wint_t wc)
  {return (iswctype(wc,_BLANK) || wc == L'\t');}
#endif

#endif /* !(defined(__NO_CTYPE_INLINES) || defined(__WCTYPE_INLINES_DEFINED)) */

#ifndef	__STRICT_ANSI__
int __cdecl __MINGW_NOTHROW __isascii (int);
int __cdecl __MINGW_NOTHROW __toascii (int);
int __cdecl __MINGW_NOTHROW __iscsymf (int);		/* Valid first character in C symbol */
int __cdecl __MINGW_NOTHROW __iscsym (int);		/* Valid character in C symbol (after first) */

#if !(defined (__NO_INLINE__) || defined (__NO_CTYPE_INLINES))
__CRT_INLINE int __cdecl __MINGW_NOTHROW __isascii(int c) {return ((c & ~0x7F) == 0);} 
__CRT_INLINE int __cdecl __MINGW_NOTHROW __toascii(int c) {return (c & 0x7F);}
__CRT_INLINE int __cdecl __MINGW_NOTHROW __iscsymf(int c) {return (isalpha(c) || (c == '_'));}
__CRT_INLINE int __cdecl __MINGW_NOTHROW __iscsym(int c)  {return  (isalnum(c) || (c == '_'));}
#endif /* __NO_CTYPE_INLINES */

#ifndef	_NO_OLDNAMES
/* Not _CRTIMP */ 
int __cdecl __MINGW_NOTHROW isascii (int);
int __cdecl __MINGW_NOTHROW toascii (int);
int __cdecl __MINGW_NOTHROW iscsymf (int);
int __cdecl __MINGW_NOTHROW iscsym (int);
#endif	/* Not _NO_OLDNAMES */

#endif	/* Not __STRICT_ANSI__ */

#ifdef __cplusplus
}
#endif

#endif	/* Not RC_INVOKED */

#endif	/* Not _CTYPE_H_ */

@


1.16
log
@2008-07-06  Gregory McGarry   <gregorymcgarry@@users.sourceforge.net>

        * include/ctype.h (_imp____mb_cur_max): Correct spelling.
	(_imp____mb_cur_max_dll): Likewise.
@
text
@@


1.15
log
@	* msvcrt.def.in: Update comment.
	Exclude _ctype stub if using msvcr71.dll or newer.
	* include/ctype.h: Don't declare _ctype if using msvcr71.dll or newer.
	* include/wctype.h: Likewise.
@
text
@d36 1
a36 1
#define	_BLANK		0x0040 
d100 1
a100 1
   extern int* _imp____mbcur_max;
d103 1
a103 1
   extern int*  _imp____mbcur_max_dll;
@


1.14
log
@	*include/assert.h:  Qualify all  functions with __MINGW_NOTHROW.
	*include/conio.h:  Likewise.
	*include/ctype.h:  Likewise.
	*include/direct.h:  Likewise.
	*include/dos.h:  Likewise.
	*include/errno.h:  Likewise.
	*include/fenv.h:  Likewise.
	*include/float.h:  Likewise.
	*include/inttypes.h:  Likewise.
	*include/io.h:  Likewise.
	*include/libgen.h:  Likewise.
	*include/locale.h:  Likewise.
	*include/malloc.h:  Likewise.
	*include/mbctype.h:  Likewise.
	*include/mbstring.h:  Likewise.
	*include/process.h:  Likewise.
	*include/search.h:  Likewise.
	*include/setjmp.h:  Likewise.
	*include/signal.h:  Likewise.
	*include/stdio.h:  Likewise.
	*include/stdlib.h:  Likewise.
	*include/string.h:  Likewise.
	*include/time.h:  Likewise.
	*include/wchar.h:  Likewise.
	*include/sys/stat.h:  Likewise.
	*include/sys/time.h:  Likewise.
	*include/sys/timeb.h:  Likewise.
	*include/sys/utime.h:  Likewise.
@
text
@d111 3
a113 1
__MINGW_IMPORT unsigned short _ctype[];
d122 4
a125 2
extern unsigned short** _imp___ctype;
#define _ctype (*_imp___ctype)
@


1.13
log
@2006-08-27  Chris Sutcliffe  <ir0nh34d@@users.sourceforge.net>

    * include/ctype.h: Fix typo.
@
text
@d48 11
a58 11
_CRTIMP int __cdecl isalnum(int);
_CRTIMP int __cdecl isalpha(int);
_CRTIMP int __cdecl iscntrl(int);
_CRTIMP int __cdecl isdigit(int);
_CRTIMP int __cdecl isgraph(int);
_CRTIMP int __cdecl islower(int);
_CRTIMP int __cdecl isprint(int);
_CRTIMP int __cdecl ispunct(int);
_CRTIMP int __cdecl isspace(int);
_CRTIMP int __cdecl isupper(int);
_CRTIMP int __cdecl isxdigit(int);
d62 1
a62 1
int __cdecl isblank (int);
d66 1
a66 1
_CRTIMP int __cdecl _isctype (int, int);
d70 2
a71 2
_CRTIMP int __cdecl tolower(int);
_CRTIMP int __cdecl toupper(int);
d83 2
a84 2
_CRTIMP int __cdecl _tolower(int);
_CRTIMP int __cdecl _toupper(int);
d145 1
a145 1
#if ! (defined (__NO_INLINE__)  || defined (__NO_CTYPE_INLINES) \
d150 11
a160 11
__CRT_INLINE int __cdecl isalnum(int c) {return __ISCTYPE(c, (_ALPHA|_DIGIT));}
__CRT_INLINE int __cdecl isalpha(int c) {return __ISCTYPE(c, _ALPHA);}
__CRT_INLINE int __cdecl iscntrl(int c) {return __ISCTYPE(c, _CONTROL);}
__CRT_INLINE int __cdecl isdigit(int c) {return __ISCTYPE(c, _DIGIT);}
__CRT_INLINE int __cdecl isgraph(int c) {return __ISCTYPE(c, (_PUNCT|_ALPHA|_DIGIT));}
__CRT_INLINE int __cdecl islower(int c) {return __ISCTYPE(c, _LOWER);}
__CRT_INLINE int __cdecl isprint(int c) {return __ISCTYPE(c, (_BLANK|_PUNCT|_ALPHA|_DIGIT));}
__CRT_INLINE int __cdecl ispunct(int c) {return __ISCTYPE(c, _PUNCT);}
__CRT_INLINE int __cdecl isspace(int c) {return __ISCTYPE(c, _SPACE);}
__CRT_INLINE int __cdecl isupper(int c) {return __ISCTYPE(c, _UPPER);}
__CRT_INLINE int __cdecl isxdigit(int c) {return __ISCTYPE(c, _HEX);}
d164 1
a164 1
__CRT_INLINE int __cdecl isblank (int c)
d169 2
a170 2
__CRT_INLINE int __cdecl _tolower(int c) {return ( c -'A'+'a');}
__CRT_INLINE int __cdecl _toupper(int c) {return ( c -'a'+'A');}
d188 14
a201 14
_CRTIMP int __cdecl iswalnum(wint_t);
_CRTIMP int __cdecl iswalpha(wint_t);
_CRTIMP int __cdecl iswascii(wint_t);
_CRTIMP int __cdecl iswcntrl(wint_t);
_CRTIMP int __cdecl iswctype(wint_t, wctype_t);
_CRTIMP int __cdecl is_wctype(wint_t, wctype_t);	/* Obsolete! */
_CRTIMP int __cdecl iswdigit(wint_t);
_CRTIMP int __cdecl iswgraph(wint_t);
_CRTIMP int __cdecl iswlower(wint_t);
_CRTIMP int __cdecl iswprint(wint_t);
_CRTIMP int __cdecl iswpunct(wint_t);
_CRTIMP int __cdecl iswspace(wint_t);
_CRTIMP int __cdecl iswupper(wint_t);
_CRTIMP int __cdecl iswxdigit(wint_t);
d205 1
a205 1
int __cdecl iswblank (wint_t);
d211 2
a212 2
_CRTIMP wint_t __cdecl towlower (wint_t);
_CRTIMP wint_t __cdecl towupper (wint_t);
d214 1
a214 1
_CRTIMP int __cdecl isleadbyte (int);
d220 13
a232 13
__CRT_INLINE int __cdecl iswalnum(wint_t wc) {return (iswctype(wc,_ALPHA|_DIGIT));}
__CRT_INLINE int __cdecl iswalpha(wint_t wc) {return (iswctype(wc,_ALPHA));}
__CRT_INLINE int __cdecl iswascii(wint_t wc) {return ((wc & ~0x7F) ==0);}
__CRT_INLINE int __cdecl iswcntrl(wint_t wc) {return (iswctype(wc,_CONTROL));}
__CRT_INLINE int __cdecl iswdigit(wint_t wc) {return (iswctype(wc,_DIGIT));}
__CRT_INLINE int __cdecl iswgraph(wint_t wc) {return (iswctype(wc,_PUNCT|_ALPHA|_DIGIT));}
__CRT_INLINE int __cdecl iswlower(wint_t wc) {return (iswctype(wc,_LOWER));}
__CRT_INLINE int __cdecl iswprint(wint_t wc) {return (iswctype(wc,_BLANK|_PUNCT|_ALPHA|_DIGIT));}
__CRT_INLINE int __cdecl iswpunct(wint_t wc) {return (iswctype(wc,_PUNCT));}
__CRT_INLINE int __cdecl iswspace(wint_t wc) {return (iswctype(wc,_SPACE));}
__CRT_INLINE int __cdecl iswupper(wint_t wc) {return (iswctype(wc,_UPPER));}
__CRT_INLINE int __cdecl iswxdigit(wint_t wc) {return (iswctype(wc,_HEX));}
__CRT_INLINE int __cdecl isleadbyte(int c) {return (_pctype[(unsigned char)(c)] & _LEADBYTE);}
d235 1
a235 1
__CRT_INLINE int __cdecl iswblank (wint_t wc)
d242 4
a245 4
int __cdecl __isascii (int);
int __cdecl __toascii (int);
int __cdecl __iscsymf (int);		/* Valid first character in C symbol */
int __cdecl __iscsym (int);		/* Valid character in C symbol (after first) */
d248 4
a251 4
__CRT_INLINE int __cdecl __isascii(int c) {return ((c & ~0x7F) == 0);} 
__CRT_INLINE int __cdecl __toascii(int c) {return (c & 0x7F);}
__CRT_INLINE int __cdecl __iscsymf(int c) {return (isalpha(c) || (c == '_'));}
__CRT_INLINE int __cdecl __iscsym(int c)  {return  (isalnum(c) || (c == '_'));}
d256 4
a259 4
int __cdecl isascii (int);
int __cdecl toascii (int);
int __cdecl iscsymf (int);
int __cdecl iscsym (int);
@


1.12
log
@	* include/ctype.h: Expose iswblank if __cplusplus.
	* include/wctype.h: Expose iswblank if __cplusplus.
@
text
@d234 1
a234 1
     || !defined __STRICT_ANSI__ || __defined __cplusplus
@


1.11
log
@
	* include/ctype.h: Remove stray ')'.
@
text
@d204 1
a204 1
     || !defined __STRICT_ANSI__
a207 1

d234 1
a234 1
     || !defined __STRICT_ANSI__
@


1.10
log
@	* include/ctype.h (_BLANK): Expand comment.
	(isblank): Add prototype and inline definition.
	(iswblank): Add prototype and inline definition.
	* include/wctype.h (iswblank): Add prototype and inline definition.
	* mingwex/isblank.c: New file.
	* mingwex/iswblank.c: New file.
	* mingwex/Makefile.in: Add isblank, iswblank to libmingwex.a
@
text
@d147 1
a147 1
)
@


1.9
log
@	* include/wctype.h (towupper, towlower): Change arg and return value
	types to wint_t.
	* include/ctype.h (towupper, towlower): Likewise.
@
text
@d34 3
a36 1
#define	_BLANK		0x0040 /* this is SP only, not SP and HT as in C99  */
d60 5
a144 1

d146 2
a147 1
      || defined (__STRICT_ANSI__ ))
d162 6
d203 6
d234 6
@


1.8
log
@
	* CONTRIBUTORS: New file.
	* DISCLAIMER: Ditto.
	* CRT_noglob.c: Reword copyright and disclaimer.  Move Contributors
	section CONTRIBUTORS file.  Remove RCS tags.
	* CRTFmode.c: Ditto.
	* CRTglob.c: Ditto.
	* CRTinit.c: Ditto.
	* crt1.c: Ditto.
	* crtdll.dev: Ditto.
	* dllcrt1.c: Ditto.
	* dllmain.c: Ditto.
	* gccmain.c: Ditto.
	* init.c: Ditto.
	* isascii.c: Ditto.
	* iscsym.c: Ditto.
	* iscsymf.c: Ditto.
	* jamfile: Ditto.
	* main.c: Ditto.
	* msvcrt.def.in: Ditto.
	* strcasecmp.c: Ditto.
	* toascii.c: Ditto.
	* wcscmpi.c: Ditto.
	* include/assert.h: Ditto.
	* include/conio.h: Ditto.
	* include/ctype.h: Ditto.
	* include/direct.h: Ditto.
	* include/dirent.h: Ditto.
	* include/dos.h: Ditto.
	* include/errno.h: Ditto.
	* include/excpt.h: Ditto.
	* include/fcntl.h: Ditto.
	* include/float.h: Ditto.
	* include/io.h: Ditto.
	* include/locale.h: Ditto.
	* include/malloc.h: Ditto.
	* include/math.h: Ditto.
	* include/process.h: Ditto.
	* include/setjmp.h: Ditto.
	* include/share.h: Ditto.
	* include/signal.h: Ditto.
	* include/stdio.h: Ditto.
	* include/stdlib.h: Ditto.
	* include/string.h: Ditto.
	* include/tchar.h: Ditto.
	* include/time.h: Ditto.
	* include/wchar.h: Ditto.
	* include/sys/locking.h: Ditto.
	* include/sys/param.h: Ditto.
	* include/sys/stat.h: Ditto.
	* include/sys/timeb.h: Ditto.
	* include/sys/types.h: Ditto.
	* include/sys/utime.h: Ditto.
	* mingwex/dirent.c: Ditto.
@
text
@d190 5
a194 2
_CRTIMP wchar_t __cdecl towlower(wchar_t);
_CRTIMP wchar_t __cdecl towupper(wchar_t);
@


1.7
log
@	* include/_mingw.h (__CRT_INLINE): Define.
	* include/ctype.h: Replace 'extern inline' with __CRT_INLINE,
	throughout
	* include/inttypes.h: Likewise.
	* include/math.h: Likewise.
	* include/stdio.h: Likewise.
	* include/stdlib.h: Likewise.
	* include/string.h: Likewise.
	* include/wchar.h: Likewise.
	* include/wctype.h: Likewise.
@
text
@d3 3
a7 19
 *
 * This file is part of the Mingw32 package.
 *
 * Contributors:
 *  Created by Colin Peters <colin@@bird.fu.is.saga-u.ac.jp>
 *
 *  THIS SOFTWARE IS NOT COPYRIGHTED
 *
 *  This source code is offered for use in the public domain. You may
 *  use, modify or distribute it freely.
 *
 *  This code is distributed in the hope that it will be useful but
 *  WITHOUT ANY WARRANTY. ALL WARRANTIES, EXPRESS OR IMPLIED ARE HEREBY
 *  DISCLAIMED. This includes but is not limited to warranties of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * $Revision: 1.4 $
 * $Author: dannysmith $
 * $Date: 2001/11/29 04:26:33 $
@


1.6
log
@	* include/_mingw.h (_CRTIMP): Define for __GNUC__ if
	__declspec(dllimport)  supported.
	(__cdecl): Define if not already defined.
	(__stdcall): Likewise.
	* include/dirent.h: Qualify fuctions with __cdecl.
	* include/fenv.h: Likewise.
	* include/inttypes.h: Likewise.
	* include/assert.h: Qualify fuctions with __cdecl. Qualify
	CRT dll imports with _CRTIMP.
	* include/conio.h: Likewise.
	* include/ctype.h: Likewise.
	* include/direct.h: Likewise.
	* include/dos.h: Likewise.
	* include/errno.h: Likewise.
	* include/float.h: Likewise.
	* include/io.h: Likewise.
	* include/locale.h: Likewise.
	* include/malloc.h: Likewise.
	* include/math.h: Likewise.
	* include/mbctype.h: Likewise.
	* include/mbstring.h: Likewise.
	* include/process.h: Likewise.
	* include/setjmp.h: Likewise.
	* include/signal.h: Likewise.
	* include/stdio.h: Likewise.
	* include/stdlib.h: Likewise.
	* include/string.h: Likewise.
	* include/time.h: Likewise.
	* include/wchar.h: Likewise.
	* include/wctype.h: Likewise.
	* include/sys/stat.h: Likewise.
	* include/sys/timeb.h: Likewise.
	* include/sys/utime.h: Likewise.

	* include/ctype.h: Guard ctype inlines with __NO_INLINE__.
	* include/wctype.h: Guard wctype inlines with __NO_INLINE__.

	* include/stdio.h (__VALIST): Guard against prior definition.
@
text
@d159 11
a169 11
extern __inline__ int __cdecl isalnum(int c) {return __ISCTYPE(c, (_ALPHA|_DIGIT));}
extern __inline__ int __cdecl isalpha(int c) {return __ISCTYPE(c, _ALPHA);}
extern __inline__ int __cdecl iscntrl(int c) {return __ISCTYPE(c, _CONTROL);}
extern __inline__ int __cdecl isdigit(int c) {return __ISCTYPE(c, _DIGIT);}
extern __inline__ int __cdecl isgraph(int c) {return __ISCTYPE(c, (_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int __cdecl islower(int c) {return __ISCTYPE(c, _LOWER);}
extern __inline__ int __cdecl isprint(int c) {return __ISCTYPE(c, (_BLANK|_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int __cdecl ispunct(int c) {return __ISCTYPE(c, _PUNCT);}
extern __inline__ int __cdecl isspace(int c) {return __ISCTYPE(c, _SPACE);}
extern __inline__ int __cdecl isupper(int c) {return __ISCTYPE(c, _UPPER);}
extern __inline__ int __cdecl isxdigit(int c) {return __ISCTYPE(c, _HEX);}
d172 2
a173 2
extern __inline__ int __cdecl _tolower(int c) {return ( c -'A'+'a');}
extern __inline__ int __cdecl _toupper(int c) {return ( c -'a'+'A');}
d215 13
a227 13
extern __inline__ int __cdecl iswalnum(wint_t wc) {return (iswctype(wc,_ALPHA|_DIGIT));}
extern __inline__ int __cdecl iswalpha(wint_t wc) {return (iswctype(wc,_ALPHA));}
extern __inline__ int __cdecl iswascii(wint_t wc) {return ((wc & ~0x7F) ==0);}
extern __inline__ int __cdecl iswcntrl(wint_t wc) {return (iswctype(wc,_CONTROL));}
extern __inline__ int __cdecl iswdigit(wint_t wc) {return (iswctype(wc,_DIGIT));}
extern __inline__ int __cdecl iswgraph(wint_t wc) {return (iswctype(wc,_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int __cdecl iswlower(wint_t wc) {return (iswctype(wc,_LOWER));}
extern __inline__ int __cdecl iswprint(wint_t wc) {return (iswctype(wc,_BLANK|_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int __cdecl iswpunct(wint_t wc) {return (iswctype(wc,_PUNCT));}
extern __inline__ int __cdecl iswspace(wint_t wc) {return (iswctype(wc,_SPACE));}
extern __inline__ int __cdecl iswupper(wint_t wc) {return (iswctype(wc,_UPPER));}
extern __inline__ int __cdecl iswxdigit(wint_t wc) {return (iswctype(wc,_HEX));}
extern __inline__ int __cdecl isleadbyte(int c) {return (_pctype[(unsigned char)(c)] & _LEADBYTE);}
d237 4
a240 4
extern __inline__ int __cdecl __isascii(int c) {return ((c & ~0x7F) == 0);} 
extern __inline__ int __cdecl __toascii(int c) {return (c & 0x7F);}
extern __inline__ int __cdecl __iscsymf(int c) {return (isalpha(c) || (c == '_'));}
extern __inline__ int __cdecl __iscsym(int c)  {return  (isalnum(c) || (c == '_'));}
@


1.5
log
@	* include/ctype.h (__isascii): Don't cast arg to unsigned.
	(iswascii): Likewise.  Correct mask.
	* include/wctype.h (iswascii): Don't cast arg to unsigned.
	Correct mask
@
text
@d62 11
a72 11
int	isalnum(int);
int	isalpha(int);
int	iscntrl(int);
int	isdigit(int);
int	isgraph(int);
int	islower(int);
int	isprint(int);
int	ispunct(int);
int	isspace(int);
int	isupper(int);
int	isxdigit(int);
d75 1
a75 1
int	_isctype (int, int);
d79 2
a80 2
int	tolower(int);
int	toupper(int);
d92 2
a93 2
int	_tolower(int);
int	_toupper(int);
d155 2
a156 1
#if ! (defined (__NO_CTYPE_INLINES) || defined (__STRICT_ANSI__ ))
d159 11
a169 11
extern __inline__ int isalnum(int c) {return __ISCTYPE(c, (_ALPHA|_DIGIT));}
extern __inline__ int isalpha(int c) {return __ISCTYPE(c, _ALPHA);}
extern __inline__ int iscntrl(int c) {return __ISCTYPE(c, _CONTROL);}
extern __inline__ int isdigit(int c) {return __ISCTYPE(c, _DIGIT);}
extern __inline__ int isgraph(int c) {return __ISCTYPE(c, (_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int islower(int c) {return __ISCTYPE(c, _LOWER);}
extern __inline__ int isprint(int c) {return __ISCTYPE(c, (_BLANK|_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int ispunct(int c) {return __ISCTYPE(c, _PUNCT);}
extern __inline__ int isspace(int c) {return __ISCTYPE(c, _SPACE);}
extern __inline__ int isupper(int c) {return __ISCTYPE(c, _UPPER);}
extern __inline__ int isxdigit(int c) {return __ISCTYPE(c, _HEX);}
d172 2
a173 2
extern __inline__ int _tolower(int c) {return ( c -'A'+'a');}
extern __inline__ int _toupper(int c) {return ( c -'a'+'A');}
d191 14
a204 14
int	iswalnum(wint_t);
int	iswalpha(wint_t);
int	iswascii(wint_t);
int	iswcntrl(wint_t);
int	iswctype(wint_t, wctype_t);
int	is_wctype(wint_t, wctype_t);	/* Obsolete! */
int	iswdigit(wint_t);
int	iswgraph(wint_t);
int	iswlower(wint_t);
int	iswprint(wint_t);
int	iswpunct(wint_t);
int	iswspace(wint_t);
int	iswupper(wint_t);
int	iswxdigit(wint_t);
d206 2
a207 2
wchar_t	towlower(wchar_t);
wchar_t	towupper(wchar_t);
d209 1
a209 1
int	isleadbyte (int);
d212 2
a213 1
#if ! (defined(__NO_CTYPE_INLINES) || defined(__WCTYPE_INLINES_DEFINED))
d215 13
a227 13
extern __inline__ int iswalnum(wint_t wc) {return (iswctype(wc,_ALPHA|_DIGIT));}
extern __inline__ int iswalpha(wint_t wc) {return (iswctype(wc,_ALPHA));}
extern __inline__ int iswascii(wint_t wc) {return ((wc & ~0x7F) ==0);}
extern __inline__ int iswcntrl(wint_t wc) {return (iswctype(wc,_CONTROL));}
extern __inline__ int iswdigit(wint_t wc) {return (iswctype(wc,_DIGIT));}
extern __inline__ int iswgraph(wint_t wc) {return (iswctype(wc,_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int iswlower(wint_t wc) {return (iswctype(wc,_LOWER));}
extern __inline__ int iswprint(wint_t wc) {return (iswctype(wc,_BLANK|_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int iswpunct(wint_t wc) {return (iswctype(wc,_PUNCT));}
extern __inline__ int iswspace(wint_t wc) {return (iswctype(wc,_SPACE));}
extern __inline__ int iswupper(wint_t wc) {return (iswctype(wc,_UPPER));}
extern __inline__ int iswxdigit(wint_t wc) {return (iswctype(wc,_HEX));}
extern __inline__ int isleadbyte(int c) {return (_pctype[(unsigned char)(c)] & _LEADBYTE);}
d231 10
a240 10
int	__isascii (int);
int	__toascii (int);
int	__iscsymf (int);	/* Valid first character in C symbol */
int	__iscsym (int);		/* Valid character in C symbol (after first) */

#ifndef __NO_CTYPE_INLINES
extern __inline__ int __isascii(int c) {return ((c & ~0x7F) == 0);} 
extern __inline__ int __toascii(int c) {return (c & 0x7F);}
extern __inline__ int __iscsymf(int c) {return (isalpha(c) || (c == '_'));}
extern __inline__ int __iscsym(int c)  {return  (isalnum(c) || (c == '_'));}
d244 5
a248 4
int	isascii (int);
int	toascii (int);
int	iscsymf (int);
int	iscsym (int);
@


1.4
log
@	* include/cytpe.h (_imp____mbcur_max): Add missing ';'.
	(_imp____mbcur_max_dll): Likewise.
@
text
@d215 1
a215 1
extern __inline__ int iswascii(wint_t wc) {return (((unsigned)wc & 0x7F) ==0);}
d235 1
a235 1
extern __inline__ int __isascii(int c) {return (((unsigned)c & ~0x7F) == 0);} 
@


1.3
log
@	* include/_mingw.h: Increment version to 2.0.
	* Makefile.in: Ditto.
	Merge in mingwex branch.
@
text
@d109 1
a109 1
   extern int* _imp____mbcur_max
d112 1
a112 1
   extern int*  _imp____mbcur_max_dll
@


1.3.6.1
log
@	* include/_mingw.h (__BEGIN_CSTD_NAMESPACE,__END_CSTD_NAMESPACE
	__BEGIN_CGLOBAL_NAMESPACE, __END_CGLOBAL_NAMESPACE, __CSTD,
	__CGLOBAL): Add defines for for ISO C++ c-header compatability.

	* include/ctype.h: Use C++ c-header compatability defines.
	* include/wctype.h: Likewise.
@
text
@d58 3
a60 1
__BEGIN_CSTD_NAMESPACE
d74 3
a86 4

__END_CSTD_NAMESPACE
__BEGIN_CGLOBAL_NAMESPACE

a93 2

int	_isctype (int, int);
a95 3
__END_CGLOBAL_NAMESPACE
__BEGIN_CSTD_NAMESPACE

d157 1
a157 1
#define __ISCTYPE(c, mask)  (MB_CUR_MAX == 1 ? (_pctype[c] & mask) : __CGLOBAL _isctype(c, mask))
a227 3
__END_CSTD_NAMESPACE
__BEGIN_CGLOBAL_NAMESPACE

d237 2
a238 2
extern __inline__ int __iscsymf(int c) {return (__CSTD isalpha(c) || (c == '_'));}
extern __inline__ int __iscsym(int c)  {return  (__CSTD isalnum(c) || (c == '_'));}
d250 3
a252 1
__END_CGLOBAL_NAMESPACE
@


1.3.6.2
log
@	* include/ctype.h (_tolower): Move inlined definition out of
	std namespace.
	(_tolower): Likewise.
	(is_wctype): Move into non-ANSI, block. Qualify wctype_t with
	 __CSTD.
@
text
@a93 6
#if !defined (__NO_CTYPE_INLINES)
/* these reproduce behaviour of lib underscored versions  */
extern __inline__ int _tolower(int c) {return ( c -'A'+'a');}
extern __inline__ int _toupper(int c) {return ( c -'a'+'A');}
#endif

d158 1
d174 4
d183 1
a183 2
/* Wide character equivalents
   Also in wctype.h */
d199 1
d214 1
d231 1
d233 1
a233 1

a235 2
__BEGIN_CGLOBAL_NAMESPACE

d255 1
a255 1
int	is_wctype(wint_t, __CSTD wctype_t);	/* Obsolete! */
a257 1
#endif	/* Not __STRICT_ANSI__ */
@


1.3.6.3
log
@	* include/cytpe.h: Prefix identifiers used as args of inlines
	with '__', throughout.
	* include/inttypes.h: Likewise.
	* include/math.h: Likewise.
	* include/stdio.h: Likewise.
	* include/stdlib.h: Likewise.
	* include/wchar.h: Likewise.
	* include/wctype.h: Likewise.
@
text
@d96 2
a97 2
extern __inline__ int _tolower(int __c) {return ( __c -'A'+'a');}
extern __inline__ int _toupper(int __c) {return ( __c -'a'+'A');}
d101 1
a101 2

#endif /* __STRICT_ANSI__ */
d166 12
a177 13
#define __ISCTYPE(__c, __mask) \
  (MB_CUR_MAX == 1 ? (_pctype[__c] & __mask) : __CGLOBAL _isctype(__c, __mask))
extern __inline__ int isalnum(int __c) {return __ISCTYPE(__c, (_ALPHA|_DIGIT));}
extern __inline__ int isalpha(int __c) {return __ISCTYPE(__c, _ALPHA);}
extern __inline__ int iscntrl(int __c) {return __ISCTYPE(__c, _CONTROL);}
extern __inline__ int isdigit(int __c) {return __ISCTYPE(__c, _DIGIT);}
extern __inline__ int isgraph(int __c) {return __ISCTYPE(__c, (_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int islower(int __c) {return __ISCTYPE(__c, _LOWER);}
extern __inline__ int isprint(int __c) {return __ISCTYPE(__c, (_BLANK|_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int ispunct(int __c) {return __ISCTYPE(__c, _PUNCT);}
extern __inline__ int isspace(int __c) {return __ISCTYPE(__c, _SPACE);}
extern __inline__ int isupper(int __c) {return __ISCTYPE(__c, _UPPER);}
extern __inline__ int isxdigit(int __c) {return __ISCTYPE(__c, _HEX);}
d217 13
a229 14
extern __inline__ int iswalnum(wint_t __wc) {return (iswctype(__wc,_ALPHA|_DIGIT));}
extern __inline__ int iswalpha(wint_t __wc) {return (iswctype(__wc,_ALPHA));}
extern __inline__ int iswascii(wint_t __wc) {return (((unsigned)__wc & 0x7F) ==0);}
extern __inline__ int iswcntrl(wint_t __wc) {return (iswctype(__wc,_CONTROL));}
extern __inline__ int iswdigit(wint_t __wc) {return (iswctype(__wc,_DIGIT));}
extern __inline__ int iswgraph(wint_t __wc) {return (iswctype(__wc,_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int iswlower(wint_t __wc) {return (iswctype(__wc,_LOWER));}
extern __inline__ int iswprint(wint_t __wc) {return (iswctype(__wc,_BLANK|_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int iswpunct(wint_t __wc) {return (iswctype(__wc,_PUNCT));}
extern __inline__ int iswspace(wint_t __wc) {return (iswctype(__wc,_SPACE));}
extern __inline__ int iswupper(wint_t __wc) {return (iswctype(__wc,_UPPER));}
extern __inline__ int iswxdigit(wint_t __wc) {return (iswctype(__wc,_HEX));}
extern __inline__ int isleadbyte(int __c)
  {return (_pctype[(unsigned char)(__c)] & _LEADBYTE);}
d243 4
a246 5
extern __inline__ int __isascii(int __c)
  {return (((unsigned)__c & ~0x7F) == 0);} 
extern __inline__ int __toascii(int __c) {return  (__c & 0x7F);}
extern __inline__ int __iscsymf(int __c) {return (__CSTD isalpha(__c) || (__c == '_'));}
extern __inline__ int __iscsym(int __c)  {return  (__CSTD isalnum(__c) || (__c == '_'));}
@


1.3.6.4
log
@Merge from mingw mainline.
@
text
@d120 1
a120 1
   extern int* _imp____mbcur_max;
d123 1
a123 1
   extern int*  _imp____mbcur_max_dll;
@


1.3.6.5
log
@	* include/ctype: Qualify wint_t with __CSTD
	when in global namespace.
	* include/wctype:Likewise.
	* include/stdio.h: Qualify wint_t and size_t with __CSTD
	when in global namespace.
	* include/stdlib.h: Qualify size_t with __CSTD
	when in global namespace.
	* include/string.h: Likewise.
	* include/time.h: Likewise.
	* include/sys/types.h: Inject time_t into global namespace.
@
text
@d260 1
a260 1
int	is_wctype(__CSTD wint_t, __CSTD wctype_t);	/* Obsolete! */
@


1.3.6.6
log
@	Merge from mingw trunk (changes since 2002-12-10).
@
text
@d221 1
a221 1
extern __inline__ int iswascii(wint_t __wc) {return ((__wc & ~0x7F) == 0);}
d246 2
a247 1
extern __inline__ int __isascii(int __c) {return ((__c & ~0x7F) == 0);} 
@


1.3.6.7
log
@	Merge from mingw trunk (changes since 2003-01-27).
@
text
@d60 11
a70 11
_CRTIMP int __cdecl isalnum(int);
_CRTIMP int __cdecl isalpha(int);
_CRTIMP int __cdecl iscntrl(int);
_CRTIMP int __cdecl isdigit(int);
_CRTIMP int __cdecl isgraph(int);
_CRTIMP int __cdecl islower(int);
_CRTIMP int __cdecl isprint(int);
_CRTIMP int __cdecl ispunct(int);
_CRTIMP int __cdecl isspace(int);
_CRTIMP int __cdecl isupper(int);
_CRTIMP int __cdecl isxdigit(int);
d74 2
a75 2
_CRTIMP int __cdecl tolower(int);
_CRTIMP int __cdecl toupper(int);
d91 2
a92 2
_CRTIMP int __cdecl _tolower(int);
_CRTIMP int __cdecl _toupper(int);
d96 2
a97 2
extern __inline__ int __cdecl _tolower(int __c) {return ( __c -'A'+'a');}
extern __inline__ int __cdecl _toupper(int __c) {return ( __c -'a'+'A');}
d100 1
a100 1
_CRTIMP int __cdecl _isctype (int, int);
d165 1
a165 2
#if ! (defined (__NO_INLINE__)  || defined (__NO_CTYPE_INLINES) \
      || defined (__STRICT_ANSI__ ))
d169 11
a179 11
extern __inline__ int __cdecl isalnum(int __c) {return __ISCTYPE(__c, (_ALPHA|_DIGIT));}
extern __inline__ int __cdecl isalpha(int __c) {return __ISCTYPE(__c, _ALPHA);}
extern __inline__ int __cdecl iscntrl(int __c) {return __ISCTYPE(__c, _CONTROL);}
extern __inline__ int __cdecl isdigit(int __c) {return __ISCTYPE(__c, _DIGIT);}
extern __inline__ int __cdecl isgraph(int __c) {return __ISCTYPE(__c, (_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int __cdecl islower(int __c) {return __ISCTYPE(__c, _LOWER);}
extern __inline__ int __cdecl isprint(int __c) {return __ISCTYPE(__c, (_BLANK|_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int __cdecl ispunct(int __c) {return __ISCTYPE(__c, _PUNCT);}
extern __inline__ int __cdecl isspace(int __c) {return __ISCTYPE(__c, _SPACE);}
extern __inline__ int __cdecl isupper(int __c) {return __ISCTYPE(__c, _UPPER);}
extern __inline__ int __cdecl isxdigit(int __c) {return __ISCTYPE(__c, _HEX);}
d198 13
a210 13
_CRTIMP int __cdecl iswalnum(wint_t);
_CRTIMP int __cdecl iswalpha(wint_t);
_CRTIMP int __cdecl iswascii(wint_t);
_CRTIMP int __cdecl iswcntrl(wint_t);
_CRTIMP int __cdecl iswctype(wint_t, wctype_t);
_CRTIMP int __cdecl iswdigit(wint_t);
_CRTIMP int __cdecl iswgraph(wint_t);
_CRTIMP int __cdecl iswlower(wint_t);
_CRTIMP int __cdecl iswprint(wint_t);
_CRTIMP int __cdecl iswpunct(wint_t);
_CRTIMP int __cdecl iswspace(wint_t);
_CRTIMP int __cdecl iswupper(wint_t);
_CRTIMP int __cdecl iswxdigit(wint_t);
d212 2
a213 2
_CRTIMP wchar_t	__cdecl towlower(wchar_t);
_CRTIMP wchar_t	__cdecl towupper(wchar_t);
d215 1
a215 1
_CRTIMP int __cdecl isleadbyte (int);
d219 13
a231 13
extern __inline__ int __cdecl iswalnum(wint_t __wc) {return (iswctype(__wc,_ALPHA|_DIGIT));}
extern __inline__ int __cdecl iswalpha(wint_t __wc) {return (iswctype(__wc,_ALPHA));}
extern __inline__ int __cdecl iswascii(wint_t __wc) {return ((__wc & ~0x7F) == 0);}
extern __inline__ int __cdecl iswcntrl(wint_t __wc) {return (iswctype(__wc,_CONTROL));}
extern __inline__ int __cdecl iswdigit(wint_t __wc) {return (iswctype(__wc,_DIGIT));}
extern __inline__ int __cdecl iswgraph(wint_t __wc) {return (iswctype(__wc,_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int __cdecl iswlower(wint_t __wc) {return (iswctype(__wc,_LOWER));}
extern __inline__ int __cdecl iswprint(wint_t __wc) {return (iswctype(__wc,_BLANK|_PUNCT|_ALPHA|_DIGIT));}
extern __inline__ int __cdecl iswpunct(wint_t __wc) {return (iswctype(__wc,_PUNCT));}
extern __inline__ int __cdecl iswspace(wint_t __wc) {return (iswctype(__wc,_SPACE));}
extern __inline__ int __cdecl iswupper(wint_t __wc) {return (iswctype(__wc,_UPPER));}
extern __inline__ int __cdecl iswxdigit(wint_t __wc) {return (iswctype(__wc,_HEX));}
extern __inline__ int __cdecl isleadbyte(int __c)
d240 4
a243 4
_CRTIMP int __cdecl __isascii (int);
_CRTIMP int __cdecl __toascii (int);
_CRTIMP int __cdecl __iscsymf (int);	/* Valid first character in C symbol */
_CRTIMP int __cdecl __iscsym (int);		/* Valid character in C symbol (after first) */
d246 4
a249 4
extern __inline__ int __cdecl __isascii(int __c) {return ((__c & ~0x7F) == 0);} 
extern __inline__ int __cdecl __toascii(int __c) {return  (__c & 0x7F);}
extern __inline__ int __cdecl __iscsymf(int __c) {return (__CSTD isalpha(__c) || (__c == '_'));}
extern __inline__ int __cdecl __iscsym(int __c)  {return  (__CSTD isalnum(__c) || (__c == '_'));}
d253 4
a256 4
_CRTIMP int __cdecl isascii (int);
_CRTIMP int __cdecl toascii (int);
_CRTIMP int __cdecl iscsymf (int);
_CRTIMP int __cdecl iscsym (int);
d259 1
a259 1
_CRTIMP int __cdecl is_wctype(__CSTD wint_t, __CSTD wctype_t);	/* Obsolete! */
@


1.3.6.8
log
@	* include/_mingw.h: Don't include <bits/c++config.h>.
	(__MINGW_USE_NAMESPACES): Define as _GLIBCPP_USE_NAMESPACES.
	* include/ctype.h: Whitespace changes.
	* include/locale.h: Remove duplicate inclusion of <stddef.h>.
	* include/stdlib.h: (strtof, strtold): Move out of std namespace.
	(wcstof, wcstold): Likewise.
	* include/time.h (strftime): Remove duplicate declaration.
	(_wasctime): Qualify tm with __CSTD.
	* include/wchar.h (wcstof, wcstold): Move out of std namespace.
	(wcstoll, wcstoull): Likewise.
	* include/sys/types.h (__MINGW_USE_NAMESPACES): Use instead of
	__USE_STD_CXX.
@
text
@d139 1
a139 1
#else	/*  __DECLSPEC_SUPPORTED */
d165 2
a166 2
#if !(defined (__NO_INLINE__)  || defined (__NO_CTYPE_INLINES) \
      || defined (__STRICT_ANSI__))
d184 1
d218 1
a218 1
#if !(defined(__NO_CTYPE_INLINES) || defined(__WCTYPE_INLINES_DEFINED))
d244 1
a244 1
_CRTIMP int __cdecl __iscsym (int);	/* Valid character in C symbol (after first) */
@


1.2
log
@Merge MinGW CVS differences
@
text
@d98 1
d102 1
a102 1
# else /* not __MSVCRT */
d105 11
a115 1
# endif /* not __MSVCRT */
d118 2
d121 18
a138 6
#ifdef __MSVCRT__
__MINGW_IMPORT unsigned short* _pctype;
#else /* CRTDLL */
__MINGW_IMPORT unsigned short* _pctype_dll;
#define  _pctype _pctype_dll
#endif
@


1.2.10.1
log
@	* include/dos.h: Change  prefix "__imp_"  to "_imp__" for
	__GNUC__ without __DECLSPEC_SUPPORTED.
	* include/fnctl.h: Likewise.
	* include/math.h: Likewise.
	* include/stdio.h: Likewise.
	* include/stdlib.h: Likewise.
	* include/time.h: Likewise.
	* include/wctype.h: Likewise.
	* include/ctype.h: Likewise.
@
text
@a97 1
#ifdef __DECLSPEC_SUPPORTED
d101 1
a101 1
# else	/* not __MSVCRT */
d104 1
a104 11
# endif	/* not __MSVCRT */

#else		/* ! __DECLSPEC_SUPPORTED */
# ifdef __MSVCRT__
   extern int* _imp____mbcur_max
#  define MB_CUR_MAX (*_imp____mb_cur_max)
# else		/* not __MSVCRT */
   extern int*  _imp____mbcur_max_dll
#  define MB_CUR_MAX (*_imp____mb_cur_max_dll)
# endif 	/* not __MSVCRT */
#endif  	/*  __DECLSPEC_SUPPORTED */
a106 2

#ifdef __DECLSPEC_SUPPORTED
d108 6
a113 18
# ifdef __MSVCRT__
  __MINGW_IMPORT unsigned short* _pctype;
# else /* CRTDLL */
  __MINGW_IMPORT unsigned short* _pctype_dll;
# define  _pctype _pctype_dll
# endif 

#else		/*  __DECLSPEC_SUPPORTED */
extern unsigned short** _imp___ctype;
#define _ctype (*_imp___ctype)
# ifdef __MSVCRT__
  extern unsigned short** _imp___pctype;
# define _pctype (*_imp___pctype)
# else /* CRTDLL */
  extern unsigned short** _imp___pctype_dll;
# define _pctype (*_imp___pctype_dll)
# endif /* CRTDLL */
#endif		/*  __DECLSPEC_SUPPORTED */
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
 *  DISCLAMED. This includes but is not limited to warranties of
d21 3
a23 3
 * $Revision: 1.6 $
 * $Author: cgf $
 * $Date: 2000/02/05 04:04:51 $
d47 1
a47 1
#define	_SPACE		0x0008
d50 1
a50 1
#define	_BLANK		0x0040
d74 1
a74 1
#ifndef	__STRICT_ANSI__
d78 1
d84 2
a85 1
 * explicitly by CRTDLL. However, underscored versions are also exported.
d88 4
a95 4
#ifndef WEOF
#define	WEOF	(wchar_t)(0xFFFF)
#endif

d107 53
a164 1
/* Wide character equivalents */
d185 18
d208 7
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
