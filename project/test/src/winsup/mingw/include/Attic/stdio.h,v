head	1.46;
access;
symbols
	cygwin-1_7_17-release:1.45
	cygwin-64bit-branch:1.45.0.2
	cygwin-1_7_16-release:1.43
	cygwin-1_7_15-release:1.43
	cygwin-1_7_14_2-release:1.43
	cygwin-1_7_14-release:1.43
	cygwin-1_7_12-release:1.43
	cygwin-1_7_11-release:1.43
	cygwin-1_7_10-release:1.43
	cygwin-1_7_9-release:1.42
	cygwin-1_7_8-release:1.42
	cygwin-1_7_7-release:1.42
	cygwin-1_7_5-release:1.42
	cygwin-1_7_4-release:1.42
	cygwin-1_7_3-release:1.42
	cygwin-1_7_2-release:1.42
	cygwin-1_7_1-release:1.41
	cv-branch-2:1.38.0.2
	cr-0x5f1:1.26.0.6
	cv-branch:1.26.0.4
	cr-0x3b58:1.26.0.2
	cr-0x9e:1.20.0.4
	cr-0x9d:1.20.0.2
	corinna-01:1.19
	cr-0x9c:1.15.0.6
	cr-0x9b:1.15.0.4
	cr-0x99:1.15
	Z-emcb-cygwin_daemon:1.15.0.2
	w32api-2_2:1.13
	mingw-runtime-2_4:1.13
	mingw-std-ns-branch:1.12.0.2
	mingw-runtime-2_0:1.9
	mingwex:1.6.0.10
	cygnus_cvs_20020108_pre:1.6
	Z-cygwin_daemon_merge-new_HEAD:1.5
	Z-cygwin_daemon_merge_HEAD:1.5
	cygwin_daemon:1.5.0.4;
locks; strict;
comment	@ * @;
expand	@o@;


1.46
date	2012.11.07.16.52.17;	author cgf;	state dead;
branches;
next	1.45;

1.45
date	2012.08.03.17.59.05;	author earnie;	state Exp;
branches;
next	1.44;

1.44
date	2012.08.03.16.18.27;	author earnie;	state Exp;
branches;
next	1.43;

1.43
date	2011.12.01.00.13.52;	author ironhead;	state Exp;
branches;
next	1.42;

1.42
date	2010.03.07.03.08.35;	author ironhead;	state Exp;
branches;
next	1.41;

1.41
date	2009.09.01.20.41.55;	author keithmarshall;	state Exp;
branches;
next	1.40;

1.40
date	2009.08.08.13.26.11;	author ironhead;	state Exp;
branches;
next	1.39;

1.39
date	2009.07.18.15.19.03;	author ironhead;	state Exp;
branches;
next	1.38;

1.38
date	2008.09.19.21.32.42;	author keithmarshall;	state Exp;
branches;
next	1.37;

1.37
date	2008.08.30.17.27.18;	author keithmarshall;	state Exp;
branches;
next	1.36;

1.36
date	2008.07.04.03.55.50;	author dannysmith;	state Exp;
branches;
next	1.35;

1.35
date	2008.07.01.22.57.24;	author keithmarshall;	state Exp;
branches;
next	1.34;

1.34
date	2008.06.14.09.13.38;	author dannysmith;	state Exp;
branches;
next	1.33;

1.33
date	2007.08.25.13.49.37;	author keithmarshall;	state Exp;
branches;
next	1.32;

1.32
date	2007.06.23.07.34.16;	author dannysmith;	state Exp;
branches;
next	1.31;

1.31
date	2007.06.18.09.50.01;	author dannysmith;	state Exp;
branches;
next	1.30;

1.30
date	2007.02.27.07.40.12;	author dannysmith;	state Exp;
branches;
next	1.29;

1.29
date	2007.01.27.09.50.11;	author dannysmith;	state Exp;
branches;
next	1.28;

1.28
date	2007.01.26.08.20.54;	author dannysmith;	state Exp;
branches;
next	1.27;

1.27
date	2007.01.19.03.21.09;	author dannysmith;	state Exp;
branches;
next	1.26;

1.26
date	2005.03.24.05.58.23;	author dannysmith;	state Exp;
branches;
next	1.25;

1.25
date	2005.01.06.11.10.58;	author dannysmith;	state Exp;
branches;
next	1.24;

1.24
date	2004.06.30.04.51.17;	author dannysmith;	state Exp;
branches;
next	1.23;

1.23
date	2004.04.20.22.49.32;	author earnie;	state Exp;
branches;
next	1.22;

1.22
date	2004.03.25.20.30.19;	author dannysmith;	state Exp;
branches;
next	1.21;

1.21
date	2004.02.02.09.18.39;	author dannysmith;	state Exp;
branches;
next	1.20;

1.20
date	2003.12.13.21.22.34;	author dannysmith;	state Exp;
branches;
next	1.19;

1.19
date	2003.10.17.21.43.31;	author dannysmith;	state Exp;
branches;
next	1.18;

1.18
date	2003.10.03.10.16.53;	author dannysmith;	state Exp;
branches;
next	1.17;

1.17
date	2003.09.24.08.26.23;	author dannysmith;	state Exp;
branches;
next	1.16;

1.16
date	2003.09.24.00.41.01;	author dannysmith;	state Exp;
branches;
next	1.15;

1.15
date	2003.03.02.07.00.48;	author dannysmith;	state Exp;
branches;
next	1.14;

1.14
date	2003.02.10.21.13.34;	author dannysmith;	state Exp;
branches;
next	1.13;

1.13
date	2002.10.30.01.07.54;	author dannysmith;	state Exp;
branches;
next	1.12;

1.12
date	2002.09.16.09.44.06;	author dannysmith;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2002.08.03.23.03.37;	author dannysmith;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.18.04.13.18;	author dannysmith;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.13.10.20.43;	author dannysmith;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.30.01.38.27;	author dannysmith;	state Exp;
branches;
next	1.7;

1.7
date	2002.03.26.22.23.24;	author dannysmith;	state Exp;
branches;
next	1.6;

1.6
date	2001.12.05.15.01.05;	author earnie;	state Exp;
branches
	1.6.10.1;
next	1.5;

1.5
date	2001.08.29.13.43.59;	author earnie;	state Exp;
branches;
next	1.4;

1.4
date	2001.08.05.12.52.43;	author earnie;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.11.18.13.15;	author earnie;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.21.02.50.03;	author earnie;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;

1.6.10.1
date	2002.03.26.22.42.57;	author dannysmith;	state Exp;
branches;
next	1.6.10.2;

1.6.10.2
date	2002.03.30.03.00.42;	author dannysmith;	state Exp;
branches;
next	1.6.10.3;

1.6.10.3
date	2002.04.10.01.11.28;	author dannysmith;	state Exp;
branches;
next	1.6.10.4;

1.6.10.4
date	2002.04.17.05.37.05;	author dannysmith;	state Exp;
branches;
next	1.6.10.5;

1.6.10.5
date	2002.04.26.01.32.09;	author dannysmith;	state Exp;
branches;
next	1.6.10.6;

1.6.10.6
date	2002.05.07.05.03.06;	author dannysmith;	state Exp;
branches;
next	;

1.12.2.1
date	2002.09.20.01.14.20;	author dannysmith;	state Exp;
branches;
next	1.12.2.2;

1.12.2.2
date	2002.09.21.02.55.32;	author dannysmith;	state Exp;
branches;
next	1.12.2.3;

1.12.2.3
date	2002.09.24.08.02.21;	author dannysmith;	state Exp;
branches;
next	1.12.2.4;

1.12.2.4
date	2002.09.25.01.08.26;	author dannysmith;	state Exp;
branches;
next	1.12.2.5;

1.12.2.5
date	2002.09.27.09.32.20;	author dannysmith;	state Exp;
branches;
next	1.12.2.6;

1.12.2.6
date	2002.10.02.04.38.37;	author dannysmith;	state Exp;
branches;
next	1.12.2.7;

1.12.2.7
date	2002.10.11.03.13.32;	author dannysmith;	state Exp;
branches;
next	1.12.2.8;

1.12.2.8
date	2002.10.16.22.33.36;	author dannysmith;	state Exp;
branches;
next	1.12.2.9;

1.12.2.9
date	2002.11.19.08.47.47;	author dannysmith;	state Exp;
branches;
next	1.12.2.10;

1.12.2.10
date	2003.03.31.22.32.19;	author dannysmith;	state Exp;
branches;
next	;


desc
@@


1.46
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@/*
 * stdio.h
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is a part of the mingw-runtime package.
 * No warranty is given; refer to the file DISCLAIMER within the package.
 *
 * Definitions of types and prototypes of functions for standard input and
 * output.
 *
 * NOTE: The file manipulation functions provided by Microsoft seem to
 * work with either slash (/) or backslash (\) as the directory separator.
 *
 */

#ifndef _STDIO_H_
#define	_STDIO_H_

/* All the headers include this file. */
#include <_mingw.h>

#ifndef RC_INVOKED
#define __need_size_t
#define __need_NULL
#define __need_wchar_t
#define	__need_wint_t
#include <stddef.h>
#define __need___va_list
#include <stdarg.h>
#endif	/* Not RC_INVOKED */


/* Flags for the iobuf structure  */
#define	_IOREAD	1 /* currently reading */
#define	_IOWRT	2 /* currently writing */
#define	_IORW	0x0080 /* opened as "r+w" */


/*
 * The three standard file pointers provided by the run time library.
 * NOTE: These will go to the bit-bucket silently in GUI applications!
 */
#define	STDIN_FILENO	0
#define	STDOUT_FILENO	1
#define	STDERR_FILENO	2

/* Returned by various functions on end of file condition or error. */
#define	EOF	(-1)

/*
 * The maximum length of a file name. You should use GetVolumeInformation
 * instead of this constant. But hey, this works.
 * Also defined in io.h.
 */
#ifndef FILENAME_MAX
#define	FILENAME_MAX	(260)
#endif

/*
 * The maximum number of files that may be open at once. I have set this to
 * a conservative number. The actual value may be higher.
 */
#define FOPEN_MAX	(20)

/* After creating this many names, tmpnam and tmpfile return NULL */
#define TMP_MAX	32767
/*
 * Tmpnam, tmpfile and, sometimes, _tempnam try to create
 * temp files in the root directory of the current drive
 * (not in pwd, as suggested by some older MS doc's).
 * Redefining these macros does not effect the CRT functions.
 */
#define _P_tmpdir   "\\"
#ifndef __STRICT_ANSI__
#define P_tmpdir _P_tmpdir
#endif
#define _wP_tmpdir  L"\\"

/*
 * The maximum size of name (including NUL) that will be put in the user
 * supplied buffer caName for tmpnam.
 * Inferred from the size of the static buffer returned by tmpnam
 * when passed a NULL argument. May actually be smaller.
 */
#define L_tmpnam (16)

#define _IOFBF    0x0000  /* full buffered */
#define _IOLBF    0x0040  /* line buffered */
#define _IONBF    0x0004  /* not buffered */

#define _IOMYBUF  0x0008  /* stdio malloc()'d buffer */
#define _IOEOF    0x0010  /* EOF reached on read */
#define _IOERR    0x0020  /* I/O error from system */
#define _IOSTRG   0x0040  /* Strange or no file descriptor */
#ifdef _POSIX_SOURCE
# define _IOAPPEND 0x0200
#endif
/*
 * The buffer size as used by setbuf such that it is equivalent to
 * (void) setvbuf(fileSetBuffer, caBuffer, _IOFBF, BUFSIZ).
 */
#define	BUFSIZ	512

/* Constants for nOrigin indicating the position relative to which fseek
 * sets the file position.  Defined unconditionally since ISO and POSIX
 * say they are defined here.  */
#define SEEK_SET 0
#define SEEK_CUR 1
#define SEEK_END 2

#ifndef	RC_INVOKED

#ifndef __VALIST
#ifdef __GNUC__
#define __VALIST __gnuc_va_list
#else
#define __VALIST char*
#endif
#endif /* defined __VALIST  */

/*
 * The structure underlying the FILE type.
 *
 * Some believe that nobody in their right mind should make use of the
 * internals of this structure. Provided by Pedro A. Aranda Gutiirrez
 * <paag@@tid.es>.
 */
#ifndef _FILE_DEFINED
#define	_FILE_DEFINED
typedef struct _iobuf
{
	char*	_ptr;
	int	_cnt;
	char*	_base;
	int	_flag;
	int	_file;
	int	_charbuf;
	int	_bufsiz;
	char*	_tmpfname;
} FILE;
#endif	/* Not _FILE_DEFINED */


/*
 * The standard file handles
 */
#ifndef __DECLSPEC_SUPPORTED

extern FILE (*_imp___iob)[];	/* A pointer to an array of FILE */

#define _iob	(*_imp___iob)	/* An array of FILE */

#else /* __DECLSPEC_SUPPORTED */

__MINGW_IMPORT FILE _iob[];	/* An array of FILE imported from DLL. */

#endif /* __DECLSPEC_SUPPORTED */

#define stdin	(&_iob[STDIN_FILENO])
#define stdout	(&_iob[STDOUT_FILENO])
#define stderr	(&_iob[STDERR_FILENO])

#ifdef __cplusplus
extern "C" {
#endif

/*
 * File Operations
 */
_CRTIMP FILE* __cdecl __MINGW_NOTHROW fopen (const char*, const char*);
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	freopen (const char*, const char*, FILE*);
_CRTIMP int __cdecl __MINGW_NOTHROW	fflush (FILE*);
_CRTIMP int __cdecl __MINGW_NOTHROW	fclose (FILE*);
/* MS puts remove & rename (but not wide versions) in io.h  also */
_CRTIMP int __cdecl __MINGW_NOTHROW	remove (const char*);
_CRTIMP int __cdecl __MINGW_NOTHROW	rename (const char*, const char*);
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	tmpfile (void);
_CRTIMP char* __cdecl __MINGW_NOTHROW	tmpnam (char*);

#ifndef __STRICT_ANSI__
_CRTIMP char* __cdecl __MINGW_NOTHROW	_tempnam (const char*, const char*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_rmtmp(void);
_CRTIMP int __cdecl __MINGW_NOTHROW	_unlink (const char*);

#ifndef	NO_OLDNAMES
_CRTIMP char* __cdecl __MINGW_NOTHROW	tempnam (const char*, const char*);
_CRTIMP int __cdecl __MINGW_NOTHROW	rmtmp(void);
_CRTIMP int __cdecl __MINGW_NOTHROW	unlink (const char*);
#endif
#endif /* __STRICT_ANSI__ */

_CRTIMP int __cdecl __MINGW_NOTHROW	setvbuf (FILE*, char*, int, size_t);

_CRTIMP void __cdecl __MINGW_NOTHROW	setbuf (FILE*, char*);

/*
 * Formatted Output
 *
 * MSVCRT implementations are not ANSI C99 conformant...
 * we offer these conforming alternatives from libmingwex.a
 */
#undef  __mingw_stdio_redirect__
#define __mingw_stdio_redirect__(F) __cdecl __MINGW_NOTHROW __mingw_##F

extern int __mingw_stdio_redirect__(fprintf)(FILE*, const char*, ...);
extern int __mingw_stdio_redirect__(printf)(const char*, ...);
extern int __mingw_stdio_redirect__(sprintf)(char*, const char*, ...);
extern int __mingw_stdio_redirect__(snprintf)(char*, size_t, const char*, ...);
extern int __mingw_stdio_redirect__(vfprintf)(FILE*, const char*, __VALIST);
extern int __mingw_stdio_redirect__(vprintf)(const char*, __VALIST);
extern int __mingw_stdio_redirect__(vsprintf)(char*, const char*, __VALIST);
extern int __mingw_stdio_redirect__(vsnprintf)(char*, size_t, const char*, __VALIST);

#if __USE_MINGW_ANSI_STDIO
/*
 * User has expressed a preference for C99 conformance...
 */
# undef __mingw_stdio_redirect__
# ifdef __cplusplus
/*
 * For C++ we use inline implementations, to avoid interference
 * with namespace qualification, which may result from using #defines.
 */
#  define __mingw_stdio_redirect__  inline __cdecl __MINGW_NOTHROW

# elif defined __GNUC__
/*
 * FIXME: Is there any GCC version prerequisite here?
 *
 * We also prefer inline implementations for C, when we can be confident
 * that the GNU specific __inline__ mechanism is supported.
 */
#  define __mingw_stdio_redirect__  static __inline__ __cdecl __MINGW_NOTHROW

# else
/*
 * Can't use inlines; fall back on module local static stubs.
 */
#  define __mingw_stdio_redirect__  static __cdecl __MINGW_NOTHROW
# endif

__mingw_stdio_redirect__
int fprintf (FILE *__stream, const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

__mingw_stdio_redirect__
int printf (const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vprintf( __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

__mingw_stdio_redirect__
int sprintf (char *__stream, const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

__mingw_stdio_redirect__
int vfprintf (FILE *__stream, const char *__format, __VALIST __local_argv)
{
  return __mingw_vfprintf( __stream, __format, __local_argv );
}

__mingw_stdio_redirect__
int vprintf (const char *__format, __VALIST __local_argv)
{
  return __mingw_vprintf( __format, __local_argv );
}

__mingw_stdio_redirect__
int vsprintf (char *__stream, const char *__format, __VALIST __local_argv)
{
  return __mingw_vsprintf( __stream, __format, __local_argv );
}

#else
/*
 * Default configuration: simply direct all calls to MSVCRT...
 */
_CRTIMP int __cdecl __MINGW_NOTHROW fprintf (FILE*, const char*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW printf (const char*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW sprintf (char*, const char*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW vfprintf (FILE*, const char*, __VALIST);
_CRTIMP int __cdecl __MINGW_NOTHROW vprintf (const char*, __VALIST);
_CRTIMP int __cdecl __MINGW_NOTHROW vsprintf (char*, const char*, __VALIST);

#endif
/*
 * Regardless of user preference, always offer these alternative
 * entry points, for direct access to the MSVCRT implementations.
 */
#undef  __mingw_stdio_redirect__
#define __mingw_stdio_redirect__(F) __cdecl __MINGW_NOTHROW __msvcrt_##F

_CRTIMP int __mingw_stdio_redirect__(fprintf)(FILE*, const char*, ...);
_CRTIMP int __mingw_stdio_redirect__(printf)(const char*, ...);
_CRTIMP int __mingw_stdio_redirect__(sprintf)(char*, const char*, ...);
_CRTIMP int __mingw_stdio_redirect__(vfprintf)(FILE*, const char*, __VALIST);
_CRTIMP int __mingw_stdio_redirect__(vprintf)(const char*, __VALIST);
_CRTIMP int __mingw_stdio_redirect__(vsprintf)(char*, const char*, __VALIST);

#undef  __mingw_stdio_redirect__

/* The following pair ALWAYS refer to the MSVCRT implementations...
 */
_CRTIMP int __cdecl __MINGW_NOTHROW _snprintf (char*, size_t, const char*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW _vsnprintf (char*, size_t, const char*, __VALIST);
_CRTIMP int __cdecl __MINGW_NOTHROW _vscprintf (const char*, __VALIST);

#ifndef __NO_ISOCEXT  /* externs in libmingwex.a */
/*
 * Microsoft does not provide implementations for the following,
 * which are required by C99.  Note in particular that the corresponding
 * Microsoft implementations of _snprintf() and _vsnprintf() are *not*
 * compatible with C99, but the following are; if you want the MSVCRT
 * behaviour, you *must* use the Microsoft uglified names.
 */
int __cdecl __MINGW_NOTHROW snprintf (char *, size_t, const char *, ...);
int __cdecl __MINGW_NOTHROW vsnprintf (char *, size_t, const char *, __VALIST);

int __cdecl __MINGW_NOTHROW vscanf (const char * __restrict__, __VALIST);
int __cdecl __MINGW_NOTHROW vfscanf (FILE * __restrict__, const char * __restrict__,
		     __VALIST);
int __cdecl __MINGW_NOTHROW vsscanf (const char * __restrict__,
		     const char * __restrict__, __VALIST);

#endif  /* !__NO_ISOCEXT */

/*
 * Formatted Input
 */

_CRTIMP int __cdecl __MINGW_NOTHROW	fscanf (FILE*, const char*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW	scanf (const char*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW	sscanf (const char*, const char*, ...);
/*
 * Character Input and Output Functions
 */

_CRTIMP int __cdecl __MINGW_NOTHROW	fgetc (FILE*);
_CRTIMP char* __cdecl __MINGW_NOTHROW	fgets (char*, int, FILE*);
_CRTIMP int __cdecl __MINGW_NOTHROW	fputc (int, FILE*);
_CRTIMP int __cdecl __MINGW_NOTHROW	fputs (const char*, FILE*);
_CRTIMP char* __cdecl __MINGW_NOTHROW	gets (char*);
_CRTIMP int __cdecl __MINGW_NOTHROW	puts (const char*);
_CRTIMP int __cdecl __MINGW_NOTHROW	ungetc (int, FILE*);

/* Traditionally, getc and putc are defined as macros. but the
   standard doesn't say that they must be macros.
   We use inline functions here to allow the fast versions
   to be used in C++ with namespace qualification, eg., ::getc.

   _filbuf and _flsbuf  are not thread-safe. */
_CRTIMP int __cdecl __MINGW_NOTHROW	_filbuf (FILE*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_flsbuf (int, FILE*);

#if !defined _MT

__CRT_INLINE int __cdecl __MINGW_NOTHROW getc (FILE*);
__CRT_INLINE int __cdecl __MINGW_NOTHROW getc (FILE* __F)
{
  return (--__F->_cnt >= 0)
    ?  (int) (unsigned char) *__F->_ptr++
    : _filbuf (__F);
}

__CRT_INLINE int __cdecl __MINGW_NOTHROW putc (int, FILE*);
__CRT_INLINE int __cdecl __MINGW_NOTHROW putc (int __c, FILE* __F)
{
  return (--__F->_cnt >= 0)
    ?  (int) (unsigned char) (*__F->_ptr++ = (char)__c)
    :  _flsbuf (__c, __F);
}

__CRT_INLINE int __cdecl __MINGW_NOTHROW getchar (void);
__CRT_INLINE int __cdecl __MINGW_NOTHROW getchar (void)
{
  return (--stdin->_cnt >= 0)
    ?  (int) (unsigned char) *stdin->_ptr++
    : _filbuf (stdin);
}

__CRT_INLINE int __cdecl __MINGW_NOTHROW putchar(int);
__CRT_INLINE int __cdecl __MINGW_NOTHROW putchar(int __c)
{
  return (--stdout->_cnt >= 0)
    ?  (int) (unsigned char) (*stdout->_ptr++ = (char)__c)
    :  _flsbuf (__c, stdout);}

#else  /* Use library functions.  */

_CRTIMP int __cdecl __MINGW_NOTHROW	getc (FILE*);
_CRTIMP int __cdecl __MINGW_NOTHROW	putc (int, FILE*);
_CRTIMP int __cdecl __MINGW_NOTHROW	getchar (void);
_CRTIMP int __cdecl __MINGW_NOTHROW	putchar (int);

#endif

/*
 * Direct Input and Output Functions
 */

_CRTIMP size_t __cdecl __MINGW_NOTHROW	fread (void*, size_t, size_t, FILE*);
_CRTIMP size_t __cdecl __MINGW_NOTHROW	fwrite (const void*, size_t, size_t, FILE*);

/*
 * File Positioning Functions
 */

_CRTIMP int __cdecl __MINGW_NOTHROW	fseek (FILE*, long, int);
_CRTIMP long __cdecl __MINGW_NOTHROW	ftell (FILE*);
_CRTIMP void __cdecl __MINGW_NOTHROW	rewind (FILE*);

#if __MSVCRT_VERSION__ >= 0x800
_CRTIMP int __cdecl __MINGW_NOTHROW	_fseek_nolock (FILE*, long, int);
_CRTIMP long __cdecl __MINGW_NOTHROW	_ftell_nolock (FILE*);

_CRTIMP int __cdecl __MINGW_NOTHROW	_fseeki64 (FILE*, __int64, int);
_CRTIMP __int64 __cdecl __MINGW_NOTHROW	_ftelli64 (FILE*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_fseeki64_nolock (FILE*, __int64, int);
_CRTIMP __int64 __cdecl __MINGW_NOTHROW	_ftelli64_nolock (FILE*);
#endif

#ifdef __USE_MINGW_FSEEK  /* These are in libmingwex.a */
/*
 * Workaround for limitations on win9x where a file contents are
 * not zero'd out if you seek past the end and then write.
 */

int __cdecl __MINGW_NOTHROW __mingw_fseek (FILE *, long, int);
size_t __cdecl __MINGW_NOTHROW __mingw_fwrite (const void*, size_t, size_t, FILE*);
#define fseek(fp, offset, whence)  __mingw_fseek(fp, offset, whence)
#define fwrite(buffer, size, count, fp)  __mingw_fwrite(buffer, size, count, fp)
#endif /* __USE_MINGW_FSEEK */

/*
 * An opaque data type used for storing file positions... The contents of
 * this type are unknown, but we (the compiler) need to know the size
 * because the programmer using fgetpos and fsetpos will be setting aside
 * storage for fpos_t structres. Actually I tested using a byte array and
 * it is fairly evident that the fpos_t type is a long (in CRTDLL.DLL).
 * Perhaps an unsigned long? TODO? It's definitely a 64-bit number in
 * MSVCRT however, and for now `long long' will do.
 */
#ifdef __MSVCRT__
typedef long long fpos_t;
#else
typedef long	fpos_t;
#endif

_CRTIMP int __cdecl __MINGW_NOTHROW	fgetpos	(FILE*, fpos_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	fsetpos (FILE*, const fpos_t*);

/*
 * Error Functions
 */

_CRTIMP int __cdecl __MINGW_NOTHROW	feof (FILE*);
_CRTIMP int __cdecl __MINGW_NOTHROW	ferror (FILE*);

#ifdef __cplusplus
inline int __cdecl __MINGW_NOTHROW feof (FILE* __F)
  { return __F->_flag & _IOEOF; }
inline int __cdecl __MINGW_NOTHROW ferror (FILE* __F)
  { return __F->_flag & _IOERR; }
#else
#define feof(__F)     ((__F)->_flag & _IOEOF)
#define ferror(__F)   ((__F)->_flag & _IOERR)
#endif

_CRTIMP void __cdecl __MINGW_NOTHROW	clearerr (FILE*);
_CRTIMP void __cdecl __MINGW_NOTHROW	perror (const char*);


#ifndef __STRICT_ANSI__
/*
 * Pipes
 */
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	_popen (const char*, const char*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_pclose (FILE*);

#ifndef NO_OLDNAMES
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	popen (const char*, const char*);
_CRTIMP int __cdecl __MINGW_NOTHROW	pclose (FILE*);
#endif

/*
 * Other Non ANSI functions
 */
_CRTIMP int __cdecl __MINGW_NOTHROW	_flushall (void);
_CRTIMP int __cdecl __MINGW_NOTHROW	_fgetchar (void);
_CRTIMP int __cdecl __MINGW_NOTHROW	_fputchar (int);
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	_fdopen (int, const char*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_fileno (FILE*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_fcloseall (void);
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	_fsopen (const char*, const char*, int);
#ifdef __MSVCRT__
_CRTIMP int __cdecl __MINGW_NOTHROW	_getmaxstdio (void);
_CRTIMP int __cdecl __MINGW_NOTHROW	_setmaxstdio (int);
#endif

#if __MSVCRT_VERSION__ >= 0x800
_CRTIMP unsigned int __cdecl __MINGW_NOTHROW _get_output_format (void);
_CRTIMP unsigned int __cdecl __MINGW_NOTHROW _set_output_format (unsigned int);

#define _TWO_DIGIT_EXPONENT  1

_CRTIMP int __cdecl __MINGW_NOTHROW _get_printf_count_output (void);
_CRTIMP int __cdecl __MINGW_NOTHROW _set_printf_count_output (int);
#endif

#ifndef _NO_OLDNAMES
_CRTIMP int __cdecl __MINGW_NOTHROW	fgetchar (void);
_CRTIMP int __cdecl __MINGW_NOTHROW	fputchar (int);
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	fdopen (int, const char*);
_CRTIMP int __cdecl __MINGW_NOTHROW	fileno (FILE*);
#endif	/* Not _NO_OLDNAMES */

#define _fileno(__F) ((__F)->_file)
#ifndef _NO_OLDNAMES
#define fileno(__F) ((__F)->_file)
#endif

#if defined (__MSVCRT__) && !defined (__NO_MINGW_LFS)
#include <sys/types.h>
__CRT_INLINE FILE* __cdecl __MINGW_NOTHROW fopen64 (const char*, const char*);
__CRT_INLINE FILE* __cdecl __MINGW_NOTHROW fopen64 (const char* filename, const char* mode)
{
  return fopen (filename, mode); 
}

int __cdecl __MINGW_NOTHROW fseeko64 (FILE*, off64_t, int);

#ifdef __USE_MINGW_FSEEK
int __cdecl __MINGW_NOTHROW __mingw_fseeko64 (FILE *, off64_t, int);
#define fseeko64(fp, offset, whence)  __mingw_fseeko64(fp, offset, whence)
#endif

__CRT_INLINE off64_t __cdecl __MINGW_NOTHROW ftello64 (FILE *);
__CRT_INLINE off64_t __cdecl __MINGW_NOTHROW ftello64 (FILE * stream)
{
  fpos_t pos;
  if (fgetpos(stream, &pos))
    return  -1LL;
  else
   return ((off64_t) pos);
}
#endif /* __NO_MINGW_LFS */

#endif	/* Not __STRICT_ANSI__ */

/* Wide  versions */

#ifndef _WSTDIO_DEFINED
/*  also in wchar.h - keep in sync */
_CRTIMP int __cdecl __MINGW_NOTHROW	fwprintf (FILE*, const wchar_t*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW	wprintf (const wchar_t*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW	_snwprintf (wchar_t*, size_t, const wchar_t*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW	vfwprintf (FILE*, const wchar_t*, __VALIST);
_CRTIMP int __cdecl __MINGW_NOTHROW	vwprintf (const wchar_t*, __VALIST);
_CRTIMP int __cdecl __MINGW_NOTHROW	_vsnwprintf (wchar_t*, size_t, const wchar_t*, __VALIST);
_CRTIMP int __cdecl __MINGW_NOTHROW	_vscwprintf (const wchar_t*, __VALIST);
_CRTIMP int __cdecl __MINGW_NOTHROW	fwscanf (FILE*, const wchar_t*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW	wscanf (const wchar_t*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW	swscanf (const wchar_t*, const wchar_t*, ...);
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	fgetwc (FILE*);
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	fputwc (wchar_t, FILE*);
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	ungetwc (wchar_t, FILE*);

/* These differ from the ISO C prototypes, which have a maxlen parameter (like snprintf).  */
#ifndef __STRICT_ANSI__
_CRTIMP int __cdecl __MINGW_NOTHROW	swprintf (wchar_t*, const wchar_t*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW	vswprintf (wchar_t*, const wchar_t*, __VALIST);
#endif

#ifdef __MSVCRT__ 
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW fgetws (wchar_t*, int, FILE*);
_CRTIMP int __cdecl __MINGW_NOTHROW	fputws (const wchar_t*, FILE*);
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	getwc (FILE*);
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	getwchar (void);
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	putwc (wint_t, FILE*);
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	putwchar (wint_t);
#ifndef __STRICT_ANSI__
_CRTIMP void __cdecl __MINGW_NOTHROW _lock_file(FILE*);
_CRTIMP void __cdecl __MINGW_NOTHROW _unlock_file(FILE*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _getws (wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_putws (const wchar_t*);
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	_wfdopen(int, const wchar_t *);
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	_wfopen (const wchar_t*, const wchar_t*);
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	_wfreopen (const wchar_t*, const wchar_t*, FILE*);
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	_wfsopen (const wchar_t*, const wchar_t*, int);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _wtmpnam (wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _wtempnam (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wrename (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wremove (const wchar_t*);
_CRTIMP void __cdecl __MINGW_NOTHROW	_wperror (const wchar_t*);
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	_wpopen (const wchar_t*, const wchar_t*);
#endif  /* __STRICT_ANSI__ */
#endif	/* __MSVCRT__ */

#ifndef __NO_ISOCEXT  /* externs in libmingwex.a */
int __cdecl __MINGW_NOTHROW snwprintf (wchar_t* s, size_t n, const wchar_t*  format, ...);
int __cdecl __MINGW_NOTHROW vsnwprintf (wchar_t* s, size_t n, const wchar_t* format, __VALIST arg);
#ifndef __NO_INLINE__
__CRT_INLINE int __cdecl __MINGW_NOTHROW
vsnwprintf (wchar_t* s, size_t n, const wchar_t* format, __VALIST arg)
  { return _vsnwprintf ( s, n, format, arg);}
#endif
int __cdecl __MINGW_NOTHROW vwscanf (const wchar_t * __restrict__, __VALIST);
int __cdecl __MINGW_NOTHROW vfwscanf (FILE * __restrict__,
		       const wchar_t * __restrict__, __VALIST);
int __cdecl __MINGW_NOTHROW vswscanf (const wchar_t * __restrict__,
		       const wchar_t * __restrict__, __VALIST);
#endif

#define _WSTDIO_DEFINED
#endif /* _WSTDIO_DEFINED */

#ifndef __STRICT_ANSI__
#ifdef __MSVCRT__
#ifndef NO_OLDNAMES
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	wpopen (const wchar_t*, const wchar_t*);
#endif /* not NO_OLDNAMES */
#endif /* MSVCRT runtime */

/*
 * Other Non ANSI wide functions
 */
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	_fgetwchar (void);
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	_fputwchar (wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW	_getw (FILE*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_putw (int, FILE*);

#ifndef _NO_OLDNAMES
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	fgetwchar (void);
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	fputwchar (wint_t);
_CRTIMP int __cdecl __MINGW_NOTHROW	getw (FILE*);
_CRTIMP int __cdecl __MINGW_NOTHROW	putw (int, FILE*);
#endif	/* Not _NO_OLDNAMES */

#endif /* __STRICT_ANSI */

#ifdef __cplusplus
}
#endif

#endif	/* Not RC_INVOKED */

#endif /* _STDIO_H_ */
@


1.45
log
@	* include/stdio.h (_lock_file, _unlock_file): Declare.
@
text
@@


1.44
log
@	* include/stdio.h (_getws, _putws): Guard with #ifndef __STRICT_ANSI__.
	(_wfdopen, _wfopen, _wfreopen, _wfsopen, _wtmpnam, _wtempnam): Ditto.
	(_wrename, _wremove, _wperror, _wpopen): Ditto.
@
text
@d597 2
d611 1
a611 1
#endif  /* __STRING_ANSI__ */
@


1.43
log
@2011-11-30  Earnie Boyd  <earnie@@users.sourceforge.net>

        * include/stdio.h (getc, putc, getchar, putchar, fopen64, ftello64): Add
        function definitions to fix warnings when building GCC.
@
text
@d594 3
a597 1
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	putwc (wint_t, FILE*);
a598 1
_CRTIMP wint_t __cdecl __MINGW_NOTHROW	putwchar (wint_t);
d609 1
@


1.42
log
@2010-03-02  Daniel Atallah <datallah@@users.sourceforge.net>

        * include/stdio.h: (_vscprintf, _vscwprintf)
        * include/tchar.h: (_vsctprintf)
@
text
@d372 1
d380 1
d388 1
d396 1
d539 1
d552 1
@


1.41
log
@Avoid multiple link time definitions of _printf() for C++
@
text
@d321 1
d569 1
@


1.40
log
@2009-08-08  Danny Smith  <dannysmith@@users.sourceforge.net>

        * include/math.h (__fpclassifyl, __isnan, __isnanf, isnanl, __signbit,
        __signbitf, __signbitl, sinhf, tanhf, expf, frexpf, ldexpf, hypotf, powf,
        __fp_unordered_compare): Add prototypes.
        * include/stdio.h (vsnwprintf): Add prototype.
        * include/wchar.h (vsnwprintf): Add prototype.
        * include/unistd.h (ftruncate): Move prototype out of __NO_INLINE__ guard.
@
text
@d223 1
a223 1
#  define __mingw_stdio_redirect__  static inline __cdecl __MINGW_NOTHROW
@


1.39
log
@2009-07-18  Gregory McGarry  <gregorymcgarry@@users.sourceforge.net>

        * include/inttypes.h include/math.h include/stdio.h include/stdlib.h
        include/string.h include/unistd.h include/wchar.h: Add __NO_INLINE__ guard
        to all inline functions.
@
text
@d604 1
@


1.38
log
@Fix MinGW-Bug [2117379].
@
text
@d604 1
d608 1
@


1.37
log
@Implement conditional replacement for printf() family functions.
@
text
@d245 3
a247 3
  __builtin_va_list __argv; __builtin_va_start( __argv, __format );
  __retval = __mingw_vfprintf( __stream, __format, __argv );
  __builtin_va_end( __argv );
d255 3
a257 3
  __builtin_va_list __argv; __builtin_va_start( __argv, __format );
  __retval = __mingw_vprintf( __format, __argv );
  __builtin_va_end( __argv );
d265 3
a267 3
  __builtin_va_list __argv; __builtin_va_start( __argv, __format );
  __retval = __mingw_vsprintf( __stream, __format, __argv );
  __builtin_va_end( __argv );
d272 1
a272 1
int vfprintf (FILE *__stream, const char *__format, __VALIST __argv)
d274 1
a274 1
  return __mingw_vfprintf( __stream, __format, __argv );
d278 1
a278 1
int vprintf (const char *__format, __VALIST __argv)
d280 1
a280 1
  return __mingw_vprintf( __format, __argv );
d284 1
a284 1
int vsprintf (char *__stream, const char *__format, __VALIST __argv)
d286 1
a286 1
  return __mingw_vsprintf( __stream, __format, __argv );
@


1.36
log
@        * include/stdio.h (swprintf, vswprintf): Guard with  #ifndef __STRICT_ANSI__
        * include/wchar.h (swprintf, vswprintf): Likewise.
@
text
@d197 3
d201 2
d204 117
a320 8
_CRTIMP int __cdecl __MINGW_NOTHROW	fprintf (FILE*, const char*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW	printf (const char*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW	sprintf (char*, const char*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW	_snprintf (char*, size_t, const char*, ...);
_CRTIMP int __cdecl __MINGW_NOTHROW	vfprintf (FILE*, const char*, __VALIST);
_CRTIMP int __cdecl __MINGW_NOTHROW	vprintf (const char*, __VALIST);
_CRTIMP int __cdecl __MINGW_NOTHROW	vsprintf (char*, const char*, __VALIST);
_CRTIMP int __cdecl __MINGW_NOTHROW	_vsnprintf (char*, size_t, const char*, __VALIST);
d330 1
a330 1
int __cdecl __MINGW_NOTHROW snprintf(char *, size_t, const char *, ...);
@


1.35
log
@Add _get_output_format(), _set_output_format() for MSVCRT >= MSVCR80
@
text
@a449 1
_CRTIMP int __cdecl __MINGW_NOTHROW	swprintf (wchar_t*, const wchar_t*, ...);
a452 1
_CRTIMP int __cdecl __MINGW_NOTHROW	vswprintf (wchar_t*, const wchar_t*, __VALIST);
d461 6
@


1.34
log
@Committed as obvious.

	[mingw-Bugs-1801641]
	* include/wchar.h (_wfdopen): Const-ify second arg.
	* include/stdio.h (_wfdopen): Likewise.
	Thanks to <tdragon at users dot sourceforge net>
@
text
@d389 2
a390 2
_CRTIMP int __cdecl __MINGW_NOTHROW	_fcloseall(void);
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	_fsopen(const char*, const char*, int);
d392 2
a393 2
_CRTIMP int __cdecl __MINGW_NOTHROW	_getmaxstdio(void);
_CRTIMP int __cdecl __MINGW_NOTHROW	_setmaxstdio(int);
d397 7
a403 2
_CRTIMP int __cdecl __MINGW_NOTHROW _set_printf_count_output(int);
_CRTIMP int __cdecl __MINGW_NOTHROW _get_printf_count_output(void);
@


1.33
log
@Make snprintf() and vsnprintf() conform to C99.
@
text
@d467 1
a467 1
_CRTIMP FILE* __cdecl __MINGW_NOTHROW	_wfdopen(int, wchar_t *);
@


1.32
log
@	*include/assert.h:  Qualify all  functions with __MINGW_NOTHROW.
	*include/conio.h:  Likewise.
	*include/ctype.h:  Likewise.
	*include/direct.h:  Likewise.
	*include/dos.h:  Likewise.
	*include/errno.h:  Likewise.
	*include/fenv.h:  Likewise.
	*include/float.h:  Likewise.
	*include/inttypes.h:  Likewise.
	*include/io.h:  Likewise.
	*include/libgen.h:  Likewise.
	*include/locale.h:  Likewise.
	*include/malloc.h:  Likewise.
	*include/mbctype.h:  Likewise.
	*include/mbstring.h:  Likewise.
	*include/process.h:  Likewise.
	*include/search.h:  Likewise.
	*include/setjmp.h:  Likewise.
	*include/signal.h:  Likewise.
	*include/stdio.h:  Likewise.
	*include/stdlib.h:  Likewise.
	*include/string.h:  Likewise.
	*include/time.h:  Likewise.
	*include/wchar.h:  Likewise.
	*include/sys/stat.h:  Likewise.
	*include/sys/time.h:  Likewise.
	*include/sys/timeb.h:  Likewise.
	*include/sys/utime.h:  Likewise.
@
text
@d209 7
d224 2
a225 1
#endif
@


1.31
log
@	* include/stdio.h (vsnprintf): Remove inline definition.
	Add prototype.
@
text
@d169 4
a172 4
_CRTIMP FILE* __cdecl fopen (const char*, const char*);
_CRTIMP FILE* __cdecl	freopen (const char*, const char*, FILE*);
_CRTIMP int __cdecl	fflush (FILE*);
_CRTIMP int __cdecl	fclose (FILE*);
d174 4
a177 4
_CRTIMP int __cdecl	remove (const char*);
_CRTIMP int __cdecl	rename (const char*, const char*);
_CRTIMP FILE* __cdecl	tmpfile (void);
_CRTIMP char* __cdecl	tmpnam (char*);
d180 3
a182 3
_CRTIMP char* __cdecl	_tempnam (const char*, const char*);
_CRTIMP int __cdecl	_rmtmp(void);
_CRTIMP int __cdecl	_unlink (const char*);
d185 3
a187 3
_CRTIMP char* __cdecl	tempnam (const char*, const char*);
_CRTIMP int __cdecl	rmtmp(void);
_CRTIMP int __cdecl	unlink (const char*);
d191 1
a191 1
_CRTIMP int __cdecl	setvbuf (FILE*, char*, int, size_t);
d193 1
a193 1
_CRTIMP void __cdecl	setbuf (FILE*, char*);
d199 8
a206 8
_CRTIMP int __cdecl	fprintf (FILE*, const char*, ...);
_CRTIMP int __cdecl	printf (const char*, ...);
_CRTIMP int __cdecl	sprintf (char*, const char*, ...);
_CRTIMP int __cdecl	_snprintf (char*, size_t, const char*, ...);
_CRTIMP int __cdecl	vfprintf (FILE*, const char*, __VALIST);
_CRTIMP int __cdecl	vprintf (const char*, __VALIST);
_CRTIMP int __cdecl	vsprintf (char*, const char*, __VALIST);
_CRTIMP int __cdecl	_vsnprintf (char*, size_t, const char*, __VALIST);
d209 2
a210 2
int __cdecl snprintf(char *, size_t, const char *, ...);
int __cdecl vsnprintf (char *, size_t, const char *, __VALIST);
d212 2
a213 2
int __cdecl vscanf (const char * __restrict__, __VALIST);
int __cdecl vfscanf (FILE * __restrict__, const char * __restrict__,
d215 1
a215 1
int __cdecl vsscanf (const char * __restrict__,
d223 3
a225 3
_CRTIMP int __cdecl	fscanf (FILE*, const char*, ...);
_CRTIMP int __cdecl	scanf (const char*, ...);
_CRTIMP int __cdecl	sscanf (const char*, const char*, ...);
d230 7
a236 7
_CRTIMP int __cdecl	fgetc (FILE*);
_CRTIMP char* __cdecl	fgets (char*, int, FILE*);
_CRTIMP int __cdecl	fputc (int, FILE*);
_CRTIMP int __cdecl	fputs (const char*, FILE*);
_CRTIMP char* __cdecl	gets (char*);
_CRTIMP int __cdecl	puts (const char*);
_CRTIMP int __cdecl	ungetc (int, FILE*);
d244 2
a245 2
_CRTIMP int __cdecl	_filbuf (FILE*);
_CRTIMP int __cdecl	_flsbuf (int, FILE*);
d249 1
a249 1
__CRT_INLINE int __cdecl getc (FILE* __F)
d256 1
a256 1
__CRT_INLINE int __cdecl putc (int __c, FILE* __F)
d263 1
a263 1
__CRT_INLINE int __cdecl getchar (void)
d270 1
a270 1
__CRT_INLINE int __cdecl putchar(int __c)
d278 4
a281 4
_CRTIMP int __cdecl	getc (FILE*);
_CRTIMP int __cdecl	putc (int, FILE*);
_CRTIMP int __cdecl	getchar (void);
_CRTIMP int __cdecl	putchar (int);
d289 2
a290 2
_CRTIMP size_t __cdecl	fread (void*, size_t, size_t, FILE*);
_CRTIMP size_t __cdecl	fwrite (const void*, size_t, size_t, FILE*);
d296 3
a298 3
_CRTIMP int __cdecl	fseek (FILE*, long, int);
_CRTIMP long __cdecl	ftell (FILE*);
_CRTIMP void __cdecl	rewind (FILE*);
d301 2
a302 2
_CRTIMP int __cdecl	_fseek_nolock (FILE*, long, int);
_CRTIMP long __cdecl	_ftell_nolock (FILE*);
d304 4
a307 4
_CRTIMP int __cdecl	_fseeki64 (FILE*, __int64, int);
_CRTIMP __int64 __cdecl	_ftelli64 (FILE*);
_CRTIMP int __cdecl	_fseeki64_nolock (FILE*, __int64, int);
_CRTIMP __int64 __cdecl	_ftelli64_nolock (FILE*);
d316 2
a317 2
int __cdecl __mingw_fseek (FILE *, long, int);
size_t __cdecl __mingw_fwrite (const void*, size_t, size_t, FILE*);
d337 2
a338 2
_CRTIMP int __cdecl	fgetpos	(FILE*, fpos_t*);
_CRTIMP int __cdecl	fsetpos (FILE*, const fpos_t*);
d344 2
a345 2
_CRTIMP int __cdecl	feof (FILE*);
_CRTIMP int __cdecl	ferror (FILE*);
d348 1
a348 1
inline int __cdecl feof (FILE* __F)
d350 1
a350 1
inline int __cdecl ferror (FILE* __F)
d357 2
a358 2
_CRTIMP void __cdecl	clearerr (FILE*);
_CRTIMP void __cdecl	perror (const char*);
d365 2
a366 2
_CRTIMP FILE* __cdecl	_popen (const char*, const char*);
_CRTIMP int __cdecl	_pclose (FILE*);
d369 2
a370 2
_CRTIMP FILE* __cdecl	popen (const char*, const char*);
_CRTIMP int __cdecl	pclose (FILE*);
d376 7
a382 7
_CRTIMP int __cdecl	_flushall (void);
_CRTIMP int __cdecl	_fgetchar (void);
_CRTIMP int __cdecl	_fputchar (int);
_CRTIMP FILE* __cdecl	_fdopen (int, const char*);
_CRTIMP int __cdecl	_fileno (FILE*);
_CRTIMP int __cdecl	_fcloseall(void);
_CRTIMP FILE* __cdecl	_fsopen(const char*, const char*, int);
d384 2
a385 2
_CRTIMP int __cdecl	_getmaxstdio(void);
_CRTIMP int __cdecl	_setmaxstdio(int);
d389 2
a390 2
_CRTIMP int __cdecl _set_printf_count_output(int);
_CRTIMP int __cdecl _get_printf_count_output(void);
d394 4
a397 4
_CRTIMP int __cdecl	fgetchar (void);
_CRTIMP int __cdecl	fputchar (int);
_CRTIMP FILE* __cdecl	fdopen (int, const char*);
_CRTIMP int __cdecl	fileno (FILE*);
d407 1
a407 1
__CRT_INLINE FILE* __cdecl fopen64 (const char* filename, const char* mode)
d412 1
a412 1
int __cdecl fseeko64 (FILE*, off64_t, int);
d415 1
a415 1
int __cdecl __mingw_fseeko64 (FILE *, off64_t, int);
d419 1
a419 1
__CRT_INLINE off64_t __cdecl ftello64 (FILE * stream)
d435 14
a448 14
_CRTIMP int __cdecl	fwprintf (FILE*, const wchar_t*, ...);
_CRTIMP int __cdecl	wprintf (const wchar_t*, ...);
_CRTIMP int __cdecl	swprintf (wchar_t*, const wchar_t*, ...);
_CRTIMP int __cdecl	_snwprintf (wchar_t*, size_t, const wchar_t*, ...);
_CRTIMP int __cdecl	vfwprintf (FILE*, const wchar_t*, __VALIST);
_CRTIMP int __cdecl	vwprintf (const wchar_t*, __VALIST);
_CRTIMP int __cdecl	vswprintf (wchar_t*, const wchar_t*, __VALIST);
_CRTIMP int __cdecl	_vsnwprintf (wchar_t*, size_t, const wchar_t*, __VALIST);
_CRTIMP int __cdecl	fwscanf (FILE*, const wchar_t*, ...);
_CRTIMP int __cdecl	wscanf (const wchar_t*, ...);
_CRTIMP int __cdecl	swscanf (const wchar_t*, const wchar_t*, ...);
_CRTIMP wint_t __cdecl	fgetwc (FILE*);
_CRTIMP wint_t __cdecl	fputwc (wchar_t, FILE*);
_CRTIMP wint_t __cdecl	ungetwc (wchar_t, FILE*);
d451 18
a468 18
_CRTIMP wchar_t* __cdecl fgetws (wchar_t*, int, FILE*);
_CRTIMP int __cdecl	fputws (const wchar_t*, FILE*);
_CRTIMP wint_t __cdecl	getwc (FILE*);
_CRTIMP wint_t __cdecl	getwchar (void);
_CRTIMP wchar_t* __cdecl _getws (wchar_t*);
_CRTIMP wint_t __cdecl	putwc (wint_t, FILE*);
_CRTIMP int __cdecl	_putws (const wchar_t*);
_CRTIMP wint_t __cdecl	putwchar (wint_t);
_CRTIMP FILE* __cdecl	_wfdopen(int, wchar_t *);
_CRTIMP FILE* __cdecl	_wfopen (const wchar_t*, const wchar_t*);
_CRTIMP FILE* __cdecl	_wfreopen (const wchar_t*, const wchar_t*, FILE*);
_CRTIMP FILE* __cdecl	_wfsopen (const wchar_t*, const wchar_t*, int);
_CRTIMP wchar_t* __cdecl _wtmpnam (wchar_t*);
_CRTIMP wchar_t* __cdecl _wtempnam (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl	_wrename (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl	_wremove (const wchar_t*);
_CRTIMP void __cdecl	_wperror (const wchar_t*);
_CRTIMP FILE* __cdecl	_wpopen (const wchar_t*, const wchar_t*);
d472 2
a473 2
int __cdecl snwprintf (wchar_t* s, size_t n, const wchar_t*  format, ...);
__CRT_INLINE int __cdecl
d476 2
a477 2
int __cdecl vwscanf (const wchar_t * __restrict__, __VALIST);
int __cdecl vfwscanf (FILE * __restrict__,
d479 1
a479 1
int __cdecl vswscanf (const wchar_t * __restrict__,
d489 1
a489 1
_CRTIMP FILE* __cdecl	wpopen (const wchar_t*, const wchar_t*);
d496 4
a499 4
_CRTIMP wint_t __cdecl	_fgetwchar (void);
_CRTIMP wint_t __cdecl	_fputwchar (wint_t);
_CRTIMP int __cdecl	_getw (FILE*);
_CRTIMP int __cdecl	_putw (int, FILE*);
d502 4
a505 4
_CRTIMP wint_t __cdecl	fgetwchar (void);
_CRTIMP wint_t __cdecl	fputwchar (wint_t);
_CRTIMP int __cdecl	getw (FILE*);
_CRTIMP int __cdecl	putw (int, FILE*);
@


1.30
log
@2007-02-27  Thorsten Dahlheimer  <tdahlheim@@gmx.net>

	* include/stdio.h (_unlink, unlink): Add prototypes.
@
text
@d209 3
a211 4
int __cdecl snprintf(char* s, size_t n, const char*  format, ...);
__CRT_INLINE int __cdecl
vsnprintf (char* s, size_t n, const char* format, __VALIST arg)
  { return _vsnprintf ( s, n, format, arg); }
@


1.29
log
@	Expose some msvcr80.dll functions.
	* include/stdio.h (_fseek_nolock. _ftell_nolock, _fseeki64,
	_ftelli64, _fseeki64_nolock, _ftelli64_nolock) Add prototypes
	* msvcrt.def.in (_fseek_nolock. _ftell_nolock, _fseeki64,
	_ftelli64, _fseeki64_nolock, _ftelli64_nolock) Add stubs.
@
text
@d181 2
a182 1
_CRTIMP int  __cdecl    _rmtmp(void);
d186 2
a187 1
_CRTIMP int __cdecl     rmtmp(void);
@


1.28
log
@	Expose some msvcr80.dll functions.
	* include/stdlib.h (_set_abort_behavior): Add prototype.
	(_WRITE_ABORT_MSG, _CALL_REPORTFAULT): Add defines for
	_set_abort_behavior mask argument.
	(_invalid_parameter_handler): Add typedef.
	(_set_invalid_parameter_handler): Add prototype.
	* include/stdio.h (_get_printf_count_output): Add prototype.
	(_set_printf_count_output): Add prototype.
	* msvcrt.def.in (_get_printf_count_output, _set_printf_count_output,
	_set_abort_behavior, _set_invalid_parameter_handler): Add stubs.
@
text
@d299 10
@


1.27
log
@	* include/stdio.h (SEEK_SET, SEEK_CUR, SEEK_END): Define
	unconditionally.  Change comment.
	* include/unistd.h (SEEK_SET, SEEK_CUR, SEEK_END): Define
	here too.
	* include/io.h (rename): Declare.
	(remove): Declare.
@
text
@d377 5
@


1.26
log
@	* include/stdio.h (__mingw_fwrite): Change return value to
	size_t.
	* mingwex/mingw-fseek.c (__mingw_fwrite): Likewise.
@
text
@d104 5
a108 14
 * sets the file position. Enclosed in ifdefs because io.h could also
 * define them. (Though not anymore since io.h includes this file now.) */
#ifndef	SEEK_SET
#define SEEK_SET	(0)
#endif

#ifndef	SEEK_CUR
#define	SEEK_CUR	(1)
#endif

#ifndef	SEEK_END
#define SEEK_END	(2)
#endif

@


1.25
log
@	* include/stdio.h (P_tmpdir): Add define.
@
text
@d315 1
a315 1
int __cdecl __mingw_fwrite (const void*, size_t, size_t, FILE*);
@


1.24
log
@2004-06-30  Kees Zeelenberg  <kzlg@@users.sourceforge.net>
            Danny Smith  <dannysmith@@users.sourceforge.net>

	* include/stdio.h (fopen64): Add inline function.
	(fseeko64): Add prototype.
	(ftello64): Add inline function.
	* include/io.h (lseek64): Add inline function.
	* include/sys/types (off64_t): Add typedef.
	(fpos64_t): Add typedef.
        * mingwex/fopen64.c: New file.
        * mingwex/fseeko64.c: New file.
        * mingwex/ftello64.c: New file.
        * mingwex/lseek64.c: New file.
	* mingwex/Makefile.in (STDIO_DISTFILES): Add fopen64.c,
	fseeko.64.c, ftello64.c, lseek64.c.
	(STDIO_OBJS): Add fopen64.o, fseeko.64.o, ftello64.o, lseek64.o.

2004-06-30  Danny Smith  <dannysmith@@users.sourceforge.net>

	* include/stdio.h (__mingw_fseeko64): Add prototype.
	* mingwex/mingw-fseek.c (__mingw_fseeko64): Add definition.
	(__mingw_fwrite): Handle huge files.
@
text
@d73 3
@


1.23
log
@
	* CONTRIBUTORS: New file.
	* DISCLAIMER: Ditto.
	* CRT_noglob.c: Reword copyright and disclaimer.  Move Contributors
	section CONTRIBUTORS file.  Remove RCS tags.
	* CRTFmode.c: Ditto.
	* CRTglob.c: Ditto.
	* CRTinit.c: Ditto.
	* crt1.c: Ditto.
	* crtdll.dev: Ditto.
	* dllcrt1.c: Ditto.
	* dllmain.c: Ditto.
	* gccmain.c: Ditto.
	* init.c: Ditto.
	* isascii.c: Ditto.
	* iscsym.c: Ditto.
	* iscsymf.c: Ditto.
	* jamfile: Ditto.
	* main.c: Ditto.
	* msvcrt.def.in: Ditto.
	* strcasecmp.c: Ditto.
	* toascii.c: Ditto.
	* wcscmpi.c: Ditto.
	* include/assert.h: Ditto.
	* include/conio.h: Ditto.
	* include/ctype.h: Ditto.
	* include/direct.h: Ditto.
	* include/dirent.h: Ditto.
	* include/dos.h: Ditto.
	* include/errno.h: Ditto.
	* include/excpt.h: Ditto.
	* include/fcntl.h: Ditto.
	* include/float.h: Ditto.
	* include/io.h: Ditto.
	* include/locale.h: Ditto.
	* include/malloc.h: Ditto.
	* include/math.h: Ditto.
	* include/process.h: Ditto.
	* include/setjmp.h: Ditto.
	* include/share.h: Ditto.
	* include/signal.h: Ditto.
	* include/stdio.h: Ditto.
	* include/stdlib.h: Ditto.
	* include/string.h: Ditto.
	* include/tchar.h: Ditto.
	* include/time.h: Ditto.
	* include/wchar.h: Ditto.
	* include/sys/locking.h: Ditto.
	* include/sys/param.h: Ditto.
	* include/sys/stat.h: Ditto.
	* include/sys/timeb.h: Ditto.
	* include/sys/types.h: Ditto.
	* include/sys/utime.h: Ditto.
	* mingwex/dirent.c: Ditto.
@
text
@d395 24
@


1.22
log
@	* include/stdio.h (_fsopen): Add prototype.
	* include/tchar.h (_tfsopen): Add defines.
	Thanks to "Gerik" <gerikr at users dot sourceforge dot net>
@
text
@d3 3
a11 19
 *
 * This file is part of the Mingw32 package.
 *
 * Contributors:
 *  Created by Colin Peters <colin@@bird.fu.is.saga-u.ac.jp>
 *
 *  THIS SOFTWARE IS NOT COPYRIGHTED
 *
 *  This source code is offered for use in the public domain. You may
 *  use, modify or distribute it freely.
 *
 *  This code is distributed in the hope that it will be useful but
 *  WITHOUT ANY WARRANTY. ALL WARRANTIES, EXPRESS OR IMPLIED ARE HEREBY
 *  DISCLAIMED. This includes but is not limited to warranties of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * $Revision: 1.6 $
 * $Author: cgf $
 * $Date: 2000/02/05 04:04:57 $
@


1.21
log
@	* include/stdio.h (feof): Add inlined definition.
	(ferror): Ditto.
@
text
@d393 1
@


1.20
log
@	* include/stdio.h:(_fileno): Define macro version after both
	fileno and _fileno functions declared.

	* include/stdio.h (_rmtmp, rmtmp): Add prototypes.
	* moldnames.def.in (rmtmp) Add stub.
@
text
@a354 1
_CRTIMP void __cdecl	clearerr (FILE*);
d357 12
@


1.19
log
@	* include/stdio.h (_filbuf): Add prototype.
	(_flsbuf): Add prototype.
	(getc): Add inline version.
	(putc): Likewise.
	(getchar): Likewise.
	(putchar): Likewise.
@
text
@d200 2
d203 1
d207 1
d209 1
a386 2
#define _fileno(__F) ((__F)->_file)

d392 1
d394 2
d397 1
a397 2

#endif	/* Not _NO_OLDNAMES */
@


1.18
log
@	* include/stdio.h (_filbuf): Add prototype.
	(_flsbuf): Add prototype.
	(getc): Add inline version.
	(putc): Likewise.
	(getchar): Likewise.
	(putchar): Likewise.
@
text
@d268 1
a268 1
    ?  (int) *__F->_ptr++
d275 1
a275 1
    ?  (int)(*__F->_ptr++ = (char)__c)
d282 1
a282 1
    ?  (int) *stdin->_ptr++
d289 1
a289 1
    ?  (int)(*stdout->_ptr++ = (char)__c)
@


1.17
log
@	* include/io.h (_fileno): Remove prototype.
	(fileno): Likewise.
	(FILENAME_MAX): Define, if needed.
	Don't include <stdio.h>.
	* include/stdio.h (FILENAME_MAX): Protect against
	prior definition.
	(_fileno): Define macro implementation.
	(fileno): Likewise.
@
text
@d145 1
a145 1
 * I still believe that nobody in their right mind should make use of the
d250 44
d295 1
a296 2
_CRTIMP char* __cdecl	gets (char*);
_CRTIMP int __cdecl	putc (int, FILE*);
d298 2
a299 2
_CRTIMP int __cdecl	puts (const char*);
_CRTIMP int __cdecl	ungetc (int, FILE*);
@


1.16
log
@	* include/_mingw.h (__CRT_INLINE): Define.
	* include/ctype.h: Replace 'extern inline' with __CRT_INLINE,
	throughout
	* include/inttypes.h: Likewise.
	* include/math.h: Likewise.
	* include/stdio.h: Likewise.
	* include/stdlib.h: Likewise.
	* include/string.h: Likewise.
	* include/wchar.h: Likewise.
	* include/wctype.h: Likewise.
@
text
@d68 1
a68 3
 *
 * NOTE: This is used in the structure _finddata_t (see io.h) so changing it
 *       is probably not a good idea.
d70 1
d72 1
d339 2
d346 3
@


1.15
log
@2003-03-02  Danny Smith  <dannysmith@@users.sourceforge.net>

	* include/stdio.h (vscanf): Add prototype.
	(vfscanf): Ditto.
	(vsscanf): Ditto.
	(vwscanf): Ditto.
	(vfwscanf): Ditto.
	(vswscanf): Ditto.
	* include/wchar.h (vwscanf): Add prototype.
	(vfwscanf): Ditto.
	(vswscanf): Ditto.
	* mingwex/snprintf.c: Move to mingwex/stdio.
 	* mingwex/vsnprintf.c: Ditto.
	* mingwex/snwprintf.c: Ditto.
	* mingwex/vsnwprintf.c: Ditto.
	* mingwex/Makefile.in (VPATH): Add $(srcdir)/stdio
	(STDIO_DISTFILES): Add.
	(DISTFILES): Adjust.
	(STDIO_STUB_OBJS): Rename to STDIO_OBJS and add v*scanf objects.
	(LIB_OBJS): Adjust.
	(dist): Adjust.

2003-03-02  Aaron W  LaFramboise   <AWLaFramboise@@aol.com>

	* mingwex/stdio: New directory
	* mingwex/stdio/vfscanf.c: New file.
	* mingwex/stdio/vfwscanf.c:  New file.
	* mingwex/stdio/vscanf.c:  New file.
	* mingwex/stdio/vsscanf.c:  New file.
	* mingwex/stdio/vswscanf.c:  New file.
	* mingwex/stdio/vwscanf.c:  New file.
@
text
@d225 1
a225 1
extern __inline__ int __cdecl
d390 1
a390 1
extern __inline__ int __cdecl
@


1.14
log
@	* include/_mingw.h (_CRTIMP): Define for __GNUC__ if
	__declspec(dllimport)  supported.
	(__cdecl): Define if not already defined.
	(__stdcall): Likewise.
	* include/dirent.h: Qualify fuctions with __cdecl.
	* include/fenv.h: Likewise.
	* include/inttypes.h: Likewise.
	* include/assert.h: Qualify fuctions with __cdecl. Qualify
	CRT dll imports with _CRTIMP.
	* include/conio.h: Likewise.
	* include/ctype.h: Likewise.
	* include/direct.h: Likewise.
	* include/dos.h: Likewise.
	* include/errno.h: Likewise.
	* include/float.h: Likewise.
	* include/io.h: Likewise.
	* include/locale.h: Likewise.
	* include/malloc.h: Likewise.
	* include/math.h: Likewise.
	* include/mbctype.h: Likewise.
	* include/mbstring.h: Likewise.
	* include/process.h: Likewise.
	* include/setjmp.h: Likewise.
	* include/signal.h: Likewise.
	* include/stdio.h: Likewise.
	* include/stdlib.h: Likewise.
	* include/string.h: Likewise.
	* include/time.h: Likewise.
	* include/wchar.h: Likewise.
	* include/wctype.h: Likewise.
	* include/sys/stat.h: Likewise.
	* include/sys/timeb.h: Likewise.
	* include/sys/utime.h: Likewise.

	* include/ctype.h: Guard ctype inlines with __NO_INLINE__.
	* include/wctype.h: Guard wctype inlines with __NO_INLINE__.

	* include/stdio.h (__VALIST): Guard against prior definition.
@
text
@d225 2
a226 2
extern __inline__ int __cdecl vsnprintf (char* s, size_t n, const char* format,
			   __VALIST arg)
d228 5
d366 1
d389 1
a389 1
int __cdecl snwprintf(wchar_t* s, size_t n, const wchar_t*  format, ...);
d393 5
@


1.13
log
@2002-10-30  Guido Serassio  <serassio@@libero.it>

         * include/stdio.h (_getnaxstdio): Add prototype.
         (_setmaxstdio): Likewise.
@
text
@d134 1
d140 1
d191 4
a194 4
FILE*	fopen (const char*, const char*);
FILE*	freopen (const char*, const char*, FILE*);
int	fflush (FILE*);
int	fclose (FILE*);
d196 5
a200 5
int	remove (const char*);
int	rename (const char*, const char*);
FILE*	tmpfile (void);
char*	tmpnam (char*);
char*	_tempnam (const char*, const char*);
d203 1
a203 1
char*	tempnam (const char*, const char*);
d206 1
a206 1
int	setvbuf (FILE*, char*, int, size_t);
d208 1
a208 1
void	setbuf (FILE*, char*);
d214 8
a221 8
int	fprintf (FILE*, const char*, ...);
int	printf (const char*, ...);
int	sprintf (char*, const char*, ...);
int	_snprintf (char*, size_t, const char*, ...);
int	vfprintf (FILE*, const char*, __VALIST);
int	vprintf (const char*, __VALIST);
int	vsprintf (char*, const char*, __VALIST);
int	_vsnprintf (char*, size_t, const char*, __VALIST);
d224 2
a225 2
int snprintf(char* s, size_t n, const char*  format, ...);
extern __inline__ int vsnprintf (char* s, size_t n, const char* format,
d234 3
a236 3
int	fscanf (FILE*, const char*, ...);
int	scanf (const char*, ...);
int	sscanf (const char*, const char*, ...);
d241 11
a251 11
int	fgetc (FILE*);
char*	fgets (char*, int, FILE*);
int	fputc (int, FILE*);
int	fputs (const char*, FILE*);
int	getc (FILE*);
int	getchar (void);
char*	gets (char*);
int	putc (int, FILE*);
int	putchar (int);
int	puts (const char*);
int	ungetc (int, FILE*);
d257 2
a258 2
size_t	fread (void*, size_t, size_t, FILE*);
size_t	fwrite (const void*, size_t, size_t, FILE*);
d264 3
a266 3
int	fseek (FILE*, long, int);
long	ftell (FILE*);
void	rewind (FILE*);
d274 2
a275 2
int __mingw_fseek (FILE *, long, int);
int __mingw_fwrite (const void*, size_t, size_t, FILE*);
d295 2
a296 2
int	fgetpos	(FILE*, fpos_t*);
int	fsetpos (FILE*, const fpos_t*);
d302 4
a305 4
void	clearerr (FILE*);
int	feof (FILE*);
int	ferror (FILE*);
void	perror (const char*);
d312 2
a313 2
FILE*	_popen (const char*, const char*);
int	_pclose (FILE*);
d316 2
a317 2
FILE*	popen (const char*, const char*);
int	pclose (FILE*);
d323 6
a328 6
int	_flushall (void);
int	_fgetchar (void);
int	_fputchar (int);
FILE*	_fdopen (int, const char*);
int	_fileno (FILE*);
int	_fcloseall(void);
d330 2
a331 2
int	_getmaxstdio(void);
int	_setmaxstdio(int);
d335 4
a338 4
int	fgetchar (void);
int	fputchar (int);
FILE*	fdopen (int, const char*);
int	fileno (FILE*);
d347 14
a360 14
int	fwprintf (FILE*, const wchar_t*, ...);
int	wprintf (const wchar_t*, ...);
int	swprintf (wchar_t*, const wchar_t*, ...);
int	_snwprintf (wchar_t*, size_t, const wchar_t*, ...);
int	vfwprintf (FILE*, const wchar_t*, __VALIST);
int	vwprintf (const wchar_t*, __VALIST);
int	vswprintf (wchar_t*, const wchar_t*, __VALIST);
int	_vsnwprintf (wchar_t*, size_t, const wchar_t*, __VALIST);
int	fwscanf (FILE*, const wchar_t*, ...);
int	wscanf (const wchar_t*, ...);
int	swscanf (const wchar_t*, const wchar_t*, ...);
wint_t	fgetwc (FILE*);
wint_t	fputwc (wchar_t, FILE*);
wint_t	ungetwc (wchar_t, FILE*);
d362 18
a379 18
wchar_t* fgetws (wchar_t*, int, FILE*);
int	fputws (const wchar_t*, FILE*);
wint_t	getwc (FILE*);
wint_t	getwchar (void);
wchar_t* _getws (wchar_t*);
wint_t	putwc (wint_t, FILE*);
int	_putws (const wchar_t*);
wint_t	putwchar (wint_t);
FILE*	_wfdopen(int, wchar_t *);
FILE*	_wfopen (const wchar_t*, const wchar_t*);
FILE*	_wfreopen (const wchar_t*, const wchar_t*, FILE*);
FILE*	_wfsopen (const wchar_t*, const wchar_t*, int);
wchar_t* _wtmpnam (wchar_t*);
wchar_t* _wtempnam (const wchar_t*, const wchar_t*);
int	_wrename (const wchar_t*, const wchar_t*);
int	_wremove (const wchar_t*);
void	_wperror (const wchar_t*);
FILE*	_wpopen (const wchar_t*, const wchar_t*);
d383 2
a384 2
int snwprintf(wchar_t* s, size_t n, const wchar_t*  format, ...);
extern __inline__ int
d395 1
a395 1
FILE*	wpopen (const wchar_t*, const wchar_t*);
d402 4
a405 4
wint_t	_fgetwchar (void);
wint_t	_fputwchar (wint_t);
int	_getw (FILE*);
int	_putw (int, FILE*);
d408 4
a411 4
wint_t	fgetwchar (void);
wint_t	fputwchar (wint_t);
int	getw (FILE*);
int	putw (int, FILE*);
@


1.12
log
@2002-09-16  Ranjit Matthew  <rmathew@@hotmail.com>

	* include/stdio.h: Correct comment about directory separator.
@
text
@d326 5
a330 1
int 	_fcloseall(void);
@


1.12.2.1
log
@	* include/wchar.h: Don't #include sys/types.h, stdlib.h,
	string.h.
	Guard only non-ANSI names with #ifndef __STRICT_ANSI__,
	* include/stdio.h: Add __STRICT_ANSI__ guard for underscored
	wide char functions and oldnames.
	(__mingw_fseek, __mingw_fwrite): Move into !__STRICT_ANSI__
	block.
@
text
@d266 12
d360 1
d362 1
a363 4

#ifndef __STRICT_ANSI__
wchar_t* _getws (wchar_t*);
int	_putws (const wchar_t*);
a373 1
#endif	/* Not __STRICT_ANSI__ */
a406 11

#ifdef __USE_MINGW_FSEEK  /* These are in libmingwex.a */
/*
 * Workaround for limitations on win9x where a file contents are
 * not zero'd out if you seek past the end and then write.
 */
int __mingw_fseek (FILE *, long, int);
int __mingw_fwrite (const void*, size_t, size_t, FILE*);
#define fseek(fp, offset, whence)  __mingw_fseek(fp, offset, whence)
#define fwrite(buffer, size, count, fp)  __mingw_fwrite(buffer, size, count, fp)
#endif /* __USE_MINGW_FSEEK */
@


1.12.2.2
log
@	* include/stdio.h: Reorder ANSI vs non-ANSI declarations
	Use C++ c-header compatability defines.
	* include/wchar.h: Likewise.
	* include/time.h: Use C++ c-header compatability defines.

	* include/tchar.h: ANSI-fy comment.
@
text
@a160 14
/*
 * An opaque data type used for storing file positions... The contents of
 * this type are unknown, but we (the compiler) need to know the size
 * because the programmer using fgetpos and fsetpos will be setting aside
 * storage for fpos_t structres. Actually I tested using a byte array and
 * it is fairly evident that the fpos_t type is a long (in CRTDLL.DLL).
 * Perhaps an unsigned long? TODO? It's definitely a 64-bit number in
 * MSVCRT however, and for now `long long' will do.
 */
#ifdef __MSVCRT__
typedef long long fpos_t;
#else
typedef long	fpos_t;
#endif
a161 7
#if defined __cplusplus
namespace std
{
  using  ::FILE;
  using  ::fpos_t;
}
#endif
d182 3
a184 1
__BEGIN_CSTD_NAMESPACE
d215 1
a218 5

__END_CSTD_NAMESPACE
__BEGIN_CGLOBAL_NAMESPACE

int	_snprintf (char*, size_t, const char*, ...);
a227 3
__END_CGLOBAL_NAMESPACE
__BEGIN_CSTD_NAMESPACE

d266 15
a292 2
__END_CSTD_NAMESPACE
__BEGIN_CGLOBAL_NAMESPACE
a324 2
__END_CGLOBAL_NAMESPACE

a327 1
__BEGIN_CSTD_NAMESPACE
d332 1
d336 1
a349 4
#endif

__END_CSTD_NAMESPACE
__BEGIN_CGLOBAL_NAMESPACE
a350 1
#ifdef __MSVCRT__ 
a366 3
/* C99 names, but non-standard behaviour */
int	_snwprintf (wchar_t*, size_t, const wchar_t*, ...);
int	_vsnwprintf (wchar_t*, size_t, const wchar_t*, __VALIST);
a373 2
__END_CGLOBAL_NAMESPACE

a376 2
__BEGIN_CGLOBAL_NAMESPACE

d412 3
a414 1
__END_CGLOBAL_NAMESPACE
@


1.12.2.3
log
@	* include/io.h: Move wide char prototypes together.
	* include/string.h: Untangle wide char protototypes.
	Use C++ c-header compatability defines.
	*include/wchar.h: Copy wide char string prototypes from
	string.h.
	Resync with io.h.
	* include/signal.h: Use C++ c-header compatability defines.
	* include/stdio.h: Add guard for __HAVE_STD_CXX.
@
text
@d176 1
a176 1
#if defined (__cplusplus)  && __HAVE_STD_CXX
@


1.12.2.4
log
@	* include/stdio.h (tempnam): Move out of __CSTD namespace.
	(FILE): Declare in __CSTD.
	(fpos_t): Likewise.
	(FILE): Qualify with __CSTD when used in non-std functions,
	throughout.
	* include/io.h (fileno): Remove prototype.
@
text
@a146 1
__BEGIN_CSTD_NAMESPACE
d175 8
a182 1
__END_CSTD_NAMESPACE
d189 1
a189 1
extern __CSTD FILE (*_imp___iob)[];	/* A pointer to an array of FILE */
d195 1
a195 1
__MINGW_IMPORT __CSTD FILE _iob[];	/* An array of FILE imported from DLL. */
d217 5
a307 5

char*	_tempnam (const char*, const char*);
#ifndef	NO_OLDNAMES
char*	tempnam (const char*, const char*);
#endif
d311 2
a312 2
__CSTD FILE* _popen (const char*, const char*);
int	_pclose (__CSTD FILE*);
d315 2
a316 2
__CSTD FILE* popen (const char*, const char*);
int	pclose (__CSTD FILE*);
d325 2
a326 2
__CSTD FILE*	_fdopen (int, const char*);
int	_fileno (__CSTD FILE*);
d332 2
a333 2
__CSTD FILE*	fdopen (int, const char*);
int	fileno (__CSTD FILE*);
d373 4
a376 4
__CSTD FILE* _wfdopen(int, wchar_t *);
__CSTD FILE* _wfopen (const wchar_t*, const wchar_t*);
__CSTD FILE* _wfreopen (const wchar_t*, const wchar_t*, __CSTD FILE*);
__CSTD FILE* _wfsopen (const wchar_t*, const wchar_t*, int);
d382 1
a382 1
__CSTD FILE* _wpopen (const wchar_t*, const wchar_t*);
d406 1
a406 1
__CSTD FILE*	wpopen (const wchar_t*, const wchar_t*);
d415 2
a416 2
int	_getw (__CSTD FILE*);
int	_putw (int, __CSTD FILE*);
d421 2
a422 2
int	getw (__CSTD FILE*);
int	putw (int, __CSTD FILE*);
d430 2
a431 2
int __mingw_fseek (__CSTD FILE *, long, int);
int __mingw_fwrite (const void*, size_t, size_t, __CSTD FILE*);
@


1.12.2.5
log
@	* include/stdio.h: Don't include stdarg.h.
	(__VA_LIST): Define as __builtin_va_list or char* instead.
	* include/stdarg.h: #include _mingw.h.
	In C++, #include_next<stdarg.g> in namespace __ginclude.
	Push va_list into std:: if whole file is needed, else
	push __gnuc_va_list into global.
@
text
@d43 2
d134 2
a135 3
#ifndef __VALIST
#if defined __GNUC__ && __GNUC__ >= 3
#define __VALIST __builtin_va_list
d139 1
a139 1
#endif
@


1.12.2.6
log
@	* include/cytpe.h: Prefix identifiers used as args of inlines
	with '__', throughout.
	* include/inttypes.h: Likewise.
	* include/math.h: Likewise.
	* include/stdio.h: Likewise.
	* include/stdlib.h: Likewise.
	* include/wchar.h: Likewise.
	* include/wctype.h: Likewise.
@
text
@d234 3
a236 3
extern __inline__ int
vsnprintf (char* __s, size_t __n, const char* __format, __VALIST __arg)
  { return _vsnprintf ( __s, __n, __format, __arg); }
d385 2
a386 3
vsnwprintf (wchar_t* __s, size_t __n, const wchar_t* __format,
	    __VALIST __arg)
  { return _vsnwprintf ( __s, __n, __format, __arg);}
@


1.12.2.7
log
@	* include/ctype: Qualify wint_t with __CSTD
	when in global namespace.
	* include/wctype:Likewise.
	* include/stdio.h: Qualify wint_t and size_t with __CSTD
	when in global namespace.
	* include/stdlib.h: Qualify size_t with __CSTD
	when in global namespace.
	* include/string.h: Likewise.
	* include/time.h: Likewise.
	* include/sys/types.h: Inject time_t into global namespace.
@
text
@d45 1
d229 2
a230 2
int	_snprintf (char*, __CSTD size_t, const char*, ...);
int	_vsnprintf (char*, __CSTD size_t, const char*, __VALIST);
d233 1
a233 1
int snprintf(char* s, __CSTD size_t, const char*, ...);
d235 1
a235 1
vsnprintf (char* __s, __CSTD size_t __n, const char* __format, __VALIST __arg)
a337 1

d380 1
a380 1
int	_snwprintf (wchar_t*, __CSTD size_t, const wchar_t*, ...);
d383 1
a383 1
int snwprintf(wchar_t* s, __CSTD size_t n, const wchar_t*  format, ...);
d385 1
a385 1
vsnwprintf (wchar_t* __s, __CSTD size_t __n, const wchar_t* __format,
d407 2
a408 2
__CSTD wint_t	_fgetwchar (void);
__CSTD wint_t	_fputwchar (__CSTD wint_t);
d413 2
a414 2
__CSTD wint_t	fgetwchar (void);
__CSTD wint_t	fputwchar (__CSTD wint_t);
d425 1
a425 1
int __mingw_fwrite (const void*, __CSTD size_t, __CSTD size_t, __CSTD FILE*);
@


1.12.2.8
log
@	* include/stdio.h: Qualify another size_t with __CSTD.
	* include/stdlib.h: Likewise.
	* include/wchar.h: Qualify size_t with __CSTD,
	when in global namespace.
@
text
@d381 1
a381 1
int	_vsnwprintf (wchar_t*, __CSTD size_t, const wchar_t*, __VALIST);
@


1.12.2.9
log
@	Merge from mingw trunk (changes since 2002-10-04).
@
text
@d319 1
a319 5
int	_fcloseall(void);
#ifdef __MSVCRT__
int	_getmaxstdio(void);
int	_setmaxstdio(int);
#endif
@


1.12.2.10
log
@	Merge from mingw trunk (changes since 2003-01-27).
@
text
@d200 4
a203 4
_CRTIMP FILE* __cdecl fopen (const char*, const char*);
_CRTIMP FILE* __cdecl freopen (const char*, const char*, FILE*);
_CRTIMP int __cdecl fflush (FILE*);
_CRTIMP int __cdecl fclose (FILE*);
d205 4
a208 4
_CRTIMP int __cdecl remove (const char*);
_CRTIMP int __cdecl rename (const char*, const char*);
_CRTIMP FILE* __cdecl tmpfile (void);
_CRTIMP char* __cdecl tmpnam (char*);
d210 1
a210 1
_CRTIMP int __cdecl setvbuf (FILE*, char*, int, size_t);
d212 1
a212 1
_CRTIMP void __cdecl setbuf (FILE*, char*);
d218 6
a223 6
_CRTIMP int __cdecl fprintf (FILE*, const char*, ...);
_CRTIMP int __cdecl printf (const char*, ...);
_CRTIMP int __cdecl sprintf (char*, const char*, ...);
_CRTIMP int __cdecl vfprintf (FILE*, const char*, __VALIST);
_CRTIMP int __cdecl vprintf (const char*, __VALIST);
_CRTIMP int __cdecl vsprintf (char*, const char*, __VALIST);
d228 2
a229 2
_CRTIMP int __cdecl _snprintf (char*, __CSTD size_t, const char*, ...);
_CRTIMP int __cdecl _vsnprintf (char*, __CSTD size_t, const char*, __VALIST);
a235 5
int __cdecl vscanf (const char * __restrict__, __VALIST);
int __cdecl vfscanf (__CSTD FILE * __restrict__, const char * __restrict__,
		     __VALIST);
int __cdecl vsscanf (const char * __restrict__,
		     const char * __restrict__, __VALIST);
d245 3
a247 3
_CRTIMP int __cdecl fscanf (FILE*, const char*, ...);
_CRTIMP int __cdecl scanf (const char*, ...);
_CRTIMP int __cdecl sscanf (const char*, const char*, ...);
d252 11
a262 11
_CRTIMP int __cdecl fgetc (FILE*);
_CRTIMP char* __cdecl fgets (char*, int, FILE*);
_CRTIMP int __cdecl fputc (int, FILE*);
_CRTIMP int __cdecl fputs (const char*, FILE*);
_CRTIMP int __cdecl getc (FILE*);
_CRTIMP int __cdecl getchar (void);
_CRTIMP char* __cdecl gets (char*);
_CRTIMP int __cdecl putc (int, FILE*);
_CRTIMP int __cdecl putchar (int);
_CRTIMP int __cdecl puts (const char*);
_CRTIMP int __cdecl ungetc (int, FILE*);
d268 2
a269 2
_CRTIMP size_t __cdecl fread (void*, size_t, size_t, FILE*);
_CRTIMP size_t __cdecl fwrite (const void*, size_t, size_t, FILE*);
d275 3
a277 3
_CRTIMP int __cdecl fseek (FILE*, long, int);
_CRTIMP long __cdecl ftell (FILE*);
_CRTIMP void __cdecl rewind (FILE*);
d279 2
a280 2
_CRTIMP int __cdecl fgetpos	(FILE*, fpos_t*);
_CRTIMP int __cdecl fsetpos (FILE*, const fpos_t*);
d286 4
a289 4
_CRTIMP void __cdecl clearerr (FILE*);
_CRTIMP int __cdecl feof (FILE*);
_CRTIMP int __cdecl ferror (FILE*);
_CRTIMP void __cdecl perror (const char*);
d296 1
a296 1
_CRTIMP char* __cdecl _tempnam (const char*, const char*);
d298 1
a298 1
_CRTIMP char* __cdecl tempnam (const char*, const char*);
d303 2
a304 2
_CRTIMP __CSTD FILE* __cdecl  _popen (const char*, const char*);
_CRTIMP int __cdecl _pclose (__CSTD FILE*);
d307 2
a308 2
_CRTIMP __CSTD FILE* __cdecl  popen (const char*, const char*);
_CRTIMP int __cdecl pclose (__CSTD FILE*);
d314 6
a319 6
_CRTIMP int __cdecl _flushall (void);
_CRTIMP int __cdecl _fgetchar (void);
_CRTIMP int __cdecl _fputchar (int);
_CRTIMP __CSTD FILE* __cdecl 	_fdopen (int, const char*);
_CRTIMP int __cdecl _fileno (__CSTD FILE*);
_CRTIMP int __cdecl _fcloseall(void);
d321 2
a322 2
_CRTIMP int __cdecl _getmaxstdio(void);
_CRTIMP int __cdecl _setmaxstdio(int);
d326 4
a329 4
_CRTIMP int __cdecl fgetchar (void);
_CRTIMP int __cdecl fputchar (int);
_CRTIMP __CSTD FILE* __cdecl 	fdopen (int, const char*);
_CRTIMP int __cdecl fileno (__CSTD FILE*);
d342 12
a353 12
_CRTIMP int __cdecl fwprintf (FILE*, const wchar_t*, ...);
_CRTIMP int __cdecl wprintf (const wchar_t*, ...);
_CRTIMP int __cdecl swprintf (wchar_t*, const wchar_t*, ...);
_CRTIMP int __cdecl vfwprintf (FILE*, const wchar_t*, __VALIST);
_CRTIMP int __cdecl vwprintf (const wchar_t*, __VALIST);
_CRTIMP int __cdecl vswprintf (wchar_t*, const wchar_t*, __VALIST);
_CRTIMP int __cdecl fwscanf (FILE*, const wchar_t*, ...);
_CRTIMP int __cdecl wscanf (const wchar_t*, ...);
_CRTIMP int __cdecl swscanf (const wchar_t*, const wchar_t*, ...);
_CRTIMP wint_t __cdecl fgetwc (FILE*);
_CRTIMP wint_t __cdecl fputwc (wchar_t, FILE*);
_CRTIMP wint_t __cdecl ungetwc (wchar_t, FILE*);
d355 6
a360 6
_CRTIMP wchar_t* __cdecl fgetws (wchar_t*, int, FILE*);
_CRTIMP int __cdecl fputws (const wchar_t*, FILE*);
_CRTIMP wint_t __cdecl getwc (FILE*);
_CRTIMP wint_t __cdecl getwchar (void);
_CRTIMP wint_t __cdecl putwc (wint_t, FILE*);
_CRTIMP wint_t __cdecl putwchar (wint_t);
d368 12
a379 12
_CRTIMP wchar_t* __cdecl _getws (wchar_t*);
_CRTIMP int __cdecl _putws (const wchar_t*);
_CRTIMP __CSTD FILE* __cdecl __cdecl _wfdopen(int, wchar_t *);
_CRTIMP __CSTD FILE* __cdecl _wfopen (const wchar_t*, const wchar_t*);
_CRTIMP __CSTD FILE* __cdecl _wfreopen (const wchar_t*, const wchar_t*, __CSTD FILE*);
_CRTIMP __CSTD FILE* __cdecl _wfsopen (const wchar_t*, const wchar_t*, int);
_CRTIMP wchar_t* __cdecl _wtmpnam (wchar_t*);
_CRTIMP wchar_t* __cdecl _wtempnam (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl _wrename (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl _wremove (const wchar_t*);
_CRTIMP void __cdecl _wperror (const wchar_t*);
_CRTIMP __CSTD FILE* __cdecl _wpopen (const wchar_t*, const wchar_t*);
d384 2
a385 2
_CRTIMP int __cdecl _snwprintf (wchar_t*, __CSTD size_t, const wchar_t*, ...);
_CRTIMP int __cdecl _vsnwprintf (wchar_t*, __CSTD size_t, const wchar_t*, __VALIST);
d387 2
a388 2
int __cdecl snwprintf (wchar_t* s, __CSTD size_t n, const wchar_t*  format, ...);
extern __inline__ int __cdecl
a391 6

int __cdecl vwscanf (const wchar_t * __restrict__, __VALIST);
int __cdecl vfwscanf (__CSTD FILE * __restrict__,
		       const wchar_t * __restrict__, __VALIST);
int __cdecl vswscanf (const wchar_t * __restrict__,
		       const wchar_t * __restrict__, __VALIST);
d404 1
a404 1
_CRTIMP __CSTD FILE* __cdecl 	wpopen (const wchar_t*, const wchar_t*);
d411 4
a414 4
_CRTIMP __CSTD wint_t __cdecl _fgetwchar (void);
_CRTIMP __CSTD wint_t __cdecl _fputwchar (__CSTD wint_t);
_CRTIMP int __cdecl _getw (__CSTD FILE*);
_CRTIMP int __cdecl _putw (int, __CSTD FILE*);
d417 4
a420 4
_CRTIMP __CSTD wint_t __cdecl fgetwchar (void);
_CRTIMP __CSTD wint_t __cdecl fputwchar (__CSTD wint_t);
_CRTIMP int __cdecl getw (__CSTD FILE*);
_CRTIMP int __cdecl putw (int, __CSTD FILE*);
d428 2
a429 2
int __cdecl __mingw_fseek (__CSTD FILE *, long, int);
int __cdecl __mingw_fwrite (const void*, __CSTD size_t, __CSTD size_t, __CSTD FILE*);
@


1.11
log
@* include/stdio.h (_fcloseall): Add prototype.
@
text
@d8 1
a8 1
 * work with either slash (/) or backslash (\) as the path separator.
@


1.10
log
@2002-06-18  Casper S. Hornstrup  <chorns@@users.sourceforge.net>

	* include/_mingw.h (__MINGW_IMPORT): Check for prior definition before
	defining.
	* include/excpt.h (): Include windef.h not windows.h.
	* include/fcntl.h (_O_SHORT_LIVED): Add define.
	(_chmod): Add prototype.
        (_creat): Correct prototype.
	(SH_DENY*): Rename defines to _SH_DENY*.
	(SH_DENY*): Add Non-ANSI names for _SH_DENY*.
	include/stdio.h (_IOMYBUF, _IOEOF, _IOERR, _IOSTRG,
	_IOAPPEND): Add defines.
	(_wfindfirst): Correct prototype.
	(_wfdopen): Add prototype.
	* include/stdlib.h (_rotl, _rotr, _lrotl, _lrotr): Add
	prototypes.
	* include/string.h (_mbschr, _mbstok, _mbsncat): Remove
	 prototypes.
	(_wcsdup): Correct prototype.
	* include/mbstring.h: Remove comments about _mbschr, _mbstok,
	 _mbsncat being in string.h.
	* include/wchar.h (_wfindfirst): Correct prototype.
	* include/tchar.h (_tfdopen): Add _UNICODE mappings.
@
text
@d326 1
@


1.9
log
@	* include/_mingw.h: Increment version to 2.0.
	* Makefile.in: Ditto.
	Merge in mingwex branch.
@
text
@d49 2
a50 2
#define	_IOREAD	1
#define	_IOWRT	2
d99 11
a109 4
#define _IOFBF		0x0000
#define _IOLBF		0x0040
#define _IONBF		0x0004

d363 1
@


1.8
log
@	* include/stdio.h (_snwprintf): Correct spelling.
	(_vsnwprintf): Likewise.
	* include/wchar.h (_snwprintf): Correct spelling.
	(_vsnwprintf): Likewise.
@
text
@d37 1
a41 1
#ifndef RC_INVOKED
d43 2
d127 2
a128 9
/*
 * I used to include stdarg.h at this point, in order to allow for the
 * functions later on in the file which use va_list. That conflicts with
 * using stdio.h and varargs.h in the same file, so I do the typedef myself.
 */
#ifndef	_VA_LIST
#define _VA_LIST
#if defined __GNUC__ && __GNUC__ >= 3
typedef __builtin_va_list va_list;
d130 1
a130 2
typedef char* va_list;
#endif
d132 1
d161 1
a161 1
extern FILE (*__imp__iob)[];	/* A pointer to an array of FILE */
d163 1
a163 1
#define _iob	(*__imp__iob)	/* An array of FILE */
d209 11
a219 5
int	vfprintf (FILE*, const char*, va_list);
int	vprintf (const char*, va_list);
int	vsprintf (char*, const char*, va_list);
int	_vsnprintf (char*, size_t, const char*, va_list);

d259 12
d337 4
a340 4
int	vfwprintf (FILE*, const wchar_t*, va_list);
int	vwprintf (const wchar_t*, va_list);
int	vswprintf (wchar_t*, const wchar_t*, va_list);
int	_vsnwprintf (wchar_t*, size_t, const wchar_t*, va_list);
d366 8
@


1.7
log
@	* moldname.def.in (__MSVCRT__): Replace with !(__CRTDLL).
	(wpopen): Add if !(__CRTDLL).
	* Makefile.in (moldname-msvcrt.def rule): Use -C, not -c to
	preserve comments.
	(moldname-crtdll.def rule): Likewise.
	* moldname-msvcrt.def: Regenerate.
	* moldname-crtdll.def: Regenerate.
	* include/stdio.h (wpopen):Use prototype, not a define.
	(_swnprintf): Add prototype.
	(_vswnprintf): Likewise.
	Tidy up whitespace.
	* include/wchar.h (_swnprintf): Add prototype.
	(_vswnprintf): Likewise.
	Tidy up whitespace.
@
text
@d323 1
a323 1
int	_swnprintf (wchar_t*, size_t, const wchar_t*, ...);
d327 1
a327 1
int	_vswnprintf (wchar_t*, size_t, const wchar_t*, va_list);
@


1.6
log
@Merge MinGW CVS differences
@
text
@d213 1
a213 1
int     _snprintf (char*, size_t, const char*, ...);
d217 1
a217 1
int     _vsnprintf (char*, size_t, const char*, va_list);
d254 3
a256 3
int	fseek	(FILE*, long, int);
long	ftell	(FILE*);
void	rewind	(FILE*);
d301 1
a301 1
int  _flushall(void);
d323 1
d327 1
d335 8
a342 8
wchar_t*    fgetws (wchar_t*, int, FILE*);
int         fputws (const wchar_t*, FILE*);
wint_t		getwc (FILE*);
wint_t	    getwchar (void);
wchar_t*    _getws (wchar_t*);
wint_t	    putwc (wint_t, FILE*);
int         _putws (const wchar_t*);
wint_t	    putwchar (wint_t);
d345 7
a351 7
FILE*   _wfsopen(const wchar_t*, const wchar_t*, int);
wchar_t*	_wtmpnam (wchar_t*);
wchar_t*	_wtempnam (const wchar_t*, const wchar_t*);
int 	_wrename(const wchar_t*, const wchar_t*);
int 	_wremove (const wchar_t*);
void  _wperror(const wchar_t*);
FILE*  _wpopen(const wchar_t*, const wchar_t*);
a358 1
#if 0
a359 9
#else /* Always true */
/*
 * The above prototypeing is not possible unless the wpopen export is added
 * to moldnames, which can't be done unless we make separate moldnames.def
 * files for every supported runtime. For the time being we use a define
 * instead. Pedro's modified dlltool should take care of this I think.
 */
#define wpopen _wpopen
#endif	/* Always true */
d366 2
a367 2
wint_t	_fgetwchar(void);
wint_t	_fputwchar(wint_t);
d372 2
a373 2
wint_t	fgetwchar(void);
wint_t	fputwchar(wint_t);
@


1.6.10.1
log
@	* moldname.def.in (__MSVCRT__): Replace with !(__CRTDLL).
	(wpopen): Add if !(__CRTDLL).
	* Makefile.in (moldname-msvcrt.def rule): Use -C, not -c to
	preserve comments.
	(moldname-crtdll.def rule): Likewise.
	* moldname-msvcrt.def: Regenerate.
	* moldname-crtdll.def: Regenerate.
	* include/stdio.h (wpopen):Use prototype, not a define.
	(_swnprintf): Add prototype.
	(_vswnprintf): Likewise.
	Tidy up whitespace.
	* include/wchar.h (_swnprintf): Add prototype.
	(_vswnprintf): Likewise.
	Tidy up whitespace.
@
text
@d213 1
a213 1
int	_snprintf (char*, size_t, const char*, ...);
d217 2
a218 1
int	_vsnprintf (char*, size_t, const char*, va_list);
d254 3
a256 3
int	fseek (FILE*, long, int);
long	ftell (FILE*);
void	rewind (FILE*);
d301 1
a301 1
int	_flushall (void);
a322 1
int	_swnprintf (wchar_t*, size_t, const wchar_t*, ...);
a325 1
int	_vswnprintf (wchar_t*, size_t, const wchar_t*, va_list);
d333 8
a340 8
wchar_t* fgetws (wchar_t*, int, FILE*);
int	fputws (const wchar_t*, FILE*);
wint_t	getwc (FILE*);
wint_t	getwchar (void);
wchar_t* _getws (wchar_t*);
wint_t	putwc (wint_t, FILE*);
int	_putws (const wchar_t*);
wint_t	putwchar (wint_t);
d343 7
a349 7
FILE*	_wfsopen (const wchar_t*, const wchar_t*, int);
wchar_t* _wtmpnam (wchar_t*);
wchar_t* _wtempnam (const wchar_t*, const wchar_t*);
int	_wrename (const wchar_t*, const wchar_t*);
int	_wremove (const wchar_t*);
void	_wperror (const wchar_t*);
FILE*	_wpopen (const wchar_t*, const wchar_t*);
d357 1
d359 9
d374 2
a375 2
wint_t	_fgetwchar (void);
wint_t	_fputwchar (wint_t);
d380 2
a381 2
wint_t	fgetwchar (void);
wint_t	fputwchar (wint_t);
@


1.6.10.2
log
@	* include/stdint.h: Add missing newline at eof.
	* include/stdio.h (_snwprintf): Correct spelling.
	(_vsnwprintf): Likewise.
	(snprintf): Add prototype.
	(vsnprintf): Add prototype and inline definition.
	(snwprintf): Add prototype.
	(vsnwprintf): Add prototype and inline definition.
	* include/wchar.h (_snwprintf): Correct spelling.
	(_vsnwprintf): Likewise.
	(snwprintf): Add prototype.
	(vsnwprintf): Add prototype and inline definition.
	* mingwex/Makefile.in: Add snprintf.o, snwprintf.o
	to libmingwex.a.
	* mingwex/snprintf.c: New file.
	* mingwex/snwprintf.c: New file.
@
text
@a218 7
#ifndef __NO_ISOCEXT  /* externs in libmingwex.a */
int snprintf(char* s, size_t n, const char*  format, ...);
extern inline int vsnprintf (char* s, size_t n, const char* format,
			   va_list arg)
  { return _vsnprintf ( s, n, format, arg); }
#endif

d322 1
a322 1
int	_snwprintf (wchar_t*, size_t, const wchar_t*, ...);
d326 1
a326 1
int	_vsnwprintf (wchar_t*, size_t, const wchar_t*, va_list);
a351 8

#ifndef __NO_ISOCEXT  /* externs in libmingwex.a */
int snwprintf(wchar_t* s, size_t n, const wchar_t*  format, ...);
extern inline int vsnwprintf (wchar_t* s, size_t n, const wchar_t* format,
			   va_list arg)
  { return _vsnwprintf ( s, n, format, arg); }
#endif

@


1.6.10.3
log
@	* mingwex/mingw-fseek.c: New file, based on Mumit Khan
	mingw-local patch to binutils.
	Sun Nov  7 04:27:07 1999  Mumit Khan  <khan@@xraylith.wisc.edu>
	(__mingw_fseek): New function to work around Win9x f/lseek bug.
	(__mingw_fwrite): Likewise.
	(__mingw_is_win9x): New helper function.
	* include/stdio.h (__USE_MINGW_FSEEK): New define, guarding...
	(__mingw_fseek): New prototype and define to replace fseek.
	(__mingw_fseek): New prototype and define to replace fwrite.
	* mingwex/Makefile.in: Add mingw-fseek.o to libmingwex.a.

	* moldname-crtdll.def: Remove CR from end of line.
	* moldname-msvcrt.def: Ditto.
@
text
@a263 13
#ifdef __USE_MINGW_FSEEK  /* These are in libmingwex.a */
/*
 * Workaround for limitations on win9x where a file contents are
 * not zero'd out if you seek past the end and then write.
 */

int __mingw_fseek (FILE *, long, int);
int __mingw_fwrite (const void*, size_t, size_t, FILE*);
#define fseek(fp, offset, whence)  __mingw_fseek(fp, offset, whence)
#define fwrite(buffer, size, count, fp)  __mingw_fwrite(buffer, size, count, fp)
#endif /* __USE_MINGW_FSEEK */


@


1.6.10.4
log
@	* Makefile.in (INCLUDES): Add "-iwithprefixbefore include" to
	ensure gcc include dir is searched despite -nostdinc.
	* profile/Makefile.in (INCLUDES): Likewise.
	* mingwex/Makefile.in (INCLUDES): Likewise.
	* include/stdarg.h: Replace with stub that just guards the
	real gcc system header with #ifndef RCINVOKED
	* include/varargs.h: Likewise.
	* include/stddef.h: Likewise.
	* include/stdio.h: Include stdarg.h after defining
	 __need___va_list.
	(__VALIST): Define as __gnuc_va_list if __GNUC__, else char*.
	Replace va_list with __VALIST throughout.
@
text
@a36 1
#ifndef RC_INVOKED
d41 1
a42 2
#define __need___va_list
#include <stdarg.h>
d125 9
a133 2
#ifdef __GNUC__
#define __VALIST __gnuc_va_list
d135 2
a136 1
#define __VALIST char*
a137 1

d214 4
a217 4
int	vfprintf (FILE*, const char*, __VALIST);
int	vprintf (const char*, __VALIST);
int	vsprintf (char*, const char*, __VALIST);
int	_vsnprintf (char*, size_t, const char*, __VALIST);
d222 1
a222 1
			   __VALIST arg)
d343 4
a346 4
int	vfwprintf (FILE*, const wchar_t*, __VALIST);
int	vwprintf (const wchar_t*, __VALIST);
int	vswprintf (wchar_t*, const wchar_t*, __VALIST);
int	_vsnwprintf (wchar_t*, size_t, const wchar_t*, __VALIST);
d375 3
a377 3
extern inline int
vsnwprintf (wchar_t* s, size_t n, const wchar_t* format, __VALIST arg)
  { return _vsnwprintf ( s, n, format, arg);}
@


1.6.10.5
log
@	* include/dos.h: Change  prefix "__imp_"  to "_imp__" for
	__GNUC__ without __DECLSPEC_SUPPORTED.
	* include/fnctl.h: Likewise.
	* include/math.h: Likewise.
	* include/stdio.h: Likewise.
	* include/stdlib.h: Likewise.
	* include/time.h: Likewise.
	* include/wctype.h: Likewise.
	* include/ctype.h: Likewise.
@
text
@d161 1
a161 1
extern FILE (*_imp___iob)[];	/* A pointer to an array of FILE */
d163 1
a163 1
#define _iob	(*_imp___iob)	/* An array of FILE */
@


1.6.10.6
log
@	* include/stdio.h (vsnprintf): Change inline to __inline__;
	(vsnwprintf): Likewise.
 	* include/wchar.h (vsnwprintf): Likewise.
	(wcstof): Likewise.
	(fwide): Likewise.
	(mbsinit): Likewise.
@
text
@d216 1
a216 1
extern __inline__ int vsnprintf (char* s, size_t n, const char* format,
d370 1
a370 1
extern __inline__ int
@


1.5
log
@
	* include/stdarg.h (va_list): Typedef as __builtin_va_list if
	__GNUC__ >= 3.
	* include/varargs.h (va_list): Ditto.
	* include/stdio.h (va_list): Ditto.
@
text
@d22 1
a22 1
 *  DISCLAMED. This includes but is not limited to warranties of
@


1.4
log
@
	* include/stdlib.h (_wpgmptr): Don't declare ifndef __MSVCRT__.
	* include/stdio.h (_IORW): Change constant to 0x0080.
	(TMP_MAX): Add new define.
	(_P_tmpdir): Ditto.
	(_wP_tmpdir): Ditto.
	(L_tmpnam): Change constant to 16.
	* include/malloc.h: Fix non-ANSI comment after #endif.
	* profile/Makefile.in (mkinstalldirs): Correct relative path.
@
text
@d130 1
a130 1
#ifndef _VA_LIST
d132 5
a136 1
typedef	char* va_list;
a137 1

@


1.3
log
@
	* include/stdio.h (swscanf): Make first arugument const.
	* include/wchar.h (swscanf): Ditto.
	* include/tchar.h (_tfopen): New _UNICODE define.
	(_tgetenv): Ditto.
	(_tsetlocale): Ditto.
@
text
@d46 1
a46 1
/* Some flags for the iobuf structure provided by <paag@@tid.es> */
d49 2
a50 1
#define	_IORW	4
d78 11
d92 2
a93 3
 * NOTE: This has not been determined by experiment, but based on the
 * maximum file name length above it is probably reasonable. I could be
 * wrong...
d95 1
a95 1
#define	L_tmpnam	(260)
@


1.2
log
@
	* include/direct.h: add guard around MSVCRT-only prototytpes
	* include/io.h: add __int64 struct definitions and function prototypes;
		 add guard for MSVCRT-only prototypes
	* include/limits.h: add ISO C9x macros LLONG_MIN, LLONG_MAX, ULLONG_MAX
	* include/stdio.h: add wchar function prototypes (__MSVCRT__);
		 put wchar functions together to make sync with wchar.h easier
	* include/stdlib.h: add wide char functions (__MSVCRT__)
	* include/string.h: add string collation functions ( __MSVCRT__)
	* include/sys/stat.h: add __int64 struct and function ( __MSVCRT__)
	* include/tchar.h: add macros and macro function definitions
	* include/wchar.h: add wide char function prototypes ( __MSVCRT__ );
		enclose more functions in __MSVCRT__ guard;
		some oldname wide char function prototypes #if (0)'d
	* profile/gmon.h: add guard around BSD-ish typedefs
@
text
@d314 1
a314 1
int	swscanf (wchar_t*, const wchar_t*, ...);
@


1.1
log
@Initial revision
@
text
@d86 3
a88 8
/*
 * The three possible buffering mode (nMode) values for setvbuf.
 * NOTE: _IOFBF works, but _IOLBF seems to work like unbuffered...
 * maybe I'm testing it wrong?
 */
#define	_IOFBF	0	/* fully buffered */
#define	_IOLBF	1	/* line buffered */
#define	_IONBF	2	/* unbuffered */
a172 1

d177 1
a204 7
/* Wide character versions */
int	fwprintf (FILE*, const wchar_t*, ...);
int	wprintf (const wchar_t*, ...);
int	swprintf (wchar_t*, const wchar_t*, ...);
int	vfwprintf (FILE*, const wchar_t*, va_list);
int	vwprintf (const wchar_t*, va_list);
int	vswprintf (wchar_t*, const wchar_t*, va_list);
a212 6

/* Wide character versions */
int	fwscanf (FILE*, const wchar_t*, ...);
int	wscanf (const wchar_t*, ...);
int	swscanf (wchar_t*, const wchar_t*, ...);

a228 17
/* Wide character versions */
wint_t	fgetwc (FILE*);
wint_t	fputwc (wchar_t, FILE*);
wint_t	ungetwc (wchar_t, FILE*);


#ifdef __MSVCRT__ 
wchar_t*	fgetws (wchar_t*, int, FILE*);
int		fputws (const wchar_t*, FILE*);
wint_t		getwc (FILE*);
wint_t		getwchar (void);
wchar_t*	_getws (wchar_t*);
wint_t		putwc (wint_t, FILE*);
int		_putws (const wchar_t*);
wint_t		putwchar (wint_t);
#endif	/* __MSVCRT__ */

a235 1

a272 1

d284 57
a340 2
/* The wide character version, only available in MSVCRT DLL versions, not
 * CRTDLL. */
a341 2
FILE*	_wpopen (const wchar_t*, const wchar_t*);

a353 1

d358 1
a358 1
 * Other Non ANSI functions
a359 3
int	_fgetchar (void);
int	_fputchar (int);
FILE*	_fdopen (int, const char*);
a361 1
int	_fileno (FILE*);
a365 3
int	fgetchar (void);
int	fputchar (int);
FILE*	fdopen (int, const char*);
a367 1
int	fileno (FILE*);
d372 1
a372 1
#endif	/* Not __STRICT_ANSI__ */
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
