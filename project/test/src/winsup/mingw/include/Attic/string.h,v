head	1.21;
access;
symbols
	cygwin-1_7_17-release:1.20
	cygwin-64bit-branch:1.20.0.2
	cygwin-1_7_16-release:1.20
	cygwin-1_7_15-release:1.20
	cygwin-1_7_14_2-release:1.20
	cygwin-1_7_14-release:1.20
	cygwin-1_7_12-release:1.20
	cygwin-1_7_11-release:1.20
	cygwin-1_7_10-release:1.20
	cygwin-1_7_9-release:1.20
	cygwin-1_7_8-release:1.20
	cygwin-1_7_7-release:1.20
	cygwin-1_7_5-release:1.20
	cygwin-1_7_4-release:1.20
	cygwin-1_7_3-release:1.20
	cygwin-1_7_2-release:1.20
	cygwin-1_7_1-release:1.20
	cv-branch-2:1.19.0.2
	cr-0x5f1:1.16.0.6
	cv-branch:1.16.0.4
	cr-0x3b58:1.16.0.2
	cr-0x9e:1.9.0.4
	cr-0x9d:1.9.0.2
	corinna-01:1.9
	cr-0x9c:1.8.0.6
	cr-0x9b:1.8.0.4
	cr-0x99:1.8
	Z-emcb-cygwin_daemon:1.8.0.2
	w32api-2_2:1.7
	mingw-runtime-2_4:1.7
	mingw-std-ns-branch:1.6.0.2
	mingw-runtime-2_0:1.4
	mingwex:1.4.0.10
	cygnus_cvs_20020108_pre:1.4
	Z-cygwin_daemon_merge-new_HEAD:1.3
	Z-cygwin_daemon_merge_HEAD:1.3
	cygwin_daemon:1.3.0.8;
locks; strict;
comment	@ * @;
expand	@o@;


1.21
date	2012.11.07.16.52.17;	author cgf;	state dead;
branches;
next	1.20;

1.20
date	2009.07.18.15.19.03;	author ironhead;	state Exp;
branches;
next	1.19;

1.19
date	2007.06.23.07.34.16;	author dannysmith;	state Exp;
branches;
next	1.18;

1.18
date	2007.06.17.00.37.00;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2007.06.14.03.01.33;	author dannysmith;	state Exp;
branches;
next	1.16;

1.16
date	2004.12.20.00.03.06;	author dannysmith;	state Exp;
branches;
next	1.15;

1.15
date	2004.08.06.21.49.54;	author dannysmith;	state Exp;
branches;
next	1.14;

1.14
date	2004.07.30.08.19.58;	author dannysmith;	state Exp;
branches;
next	1.13;

1.13
date	2004.07.26.09.13.42;	author dannysmith;	state Exp;
branches;
next	1.12;

1.12
date	2004.07.26.04.12.11;	author dannysmith;	state Exp;
branches;
next	1.11;

1.11
date	2004.04.20.22.49.32;	author earnie;	state Exp;
branches;
next	1.10;

1.10
date	2004.03.26.11.30.23;	author dannysmith;	state Exp;
branches;
next	1.9;

1.9
date	2003.09.24.00.41.01;	author dannysmith;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.10.21.13.34;	author dannysmith;	state Exp;
branches;
next	1.7;

1.7
date	2002.10.11.01.41.31;	author dannysmith;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.19.05.35.30;	author dannysmith;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2002.06.18.04.13.18;	author dannysmith;	state Exp;
branches;
next	1.4;

1.4
date	2001.12.05.15.01.05;	author earnie;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.21.02.50.03;	author earnie;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.10.23.00.27;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;

1.6.2.1
date	2002.09.24.08.02.21;	author dannysmith;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2002.10.11.03.13.32;	author dannysmith;	state Exp;
branches;
next	1.6.2.3;

1.6.2.3
date	2002.11.19.08.47.47;	author dannysmith;	state Exp;
branches;
next	1.6.2.4;

1.6.2.4
date	2003.03.31.22.32.19;	author dannysmith;	state Exp;
branches;
next	;


desc
@@


1.21
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@/*
 * string.h
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is a part of the mingw-runtime package.
 * No warranty is given; refer to the file DISCLAIMER within the package.
 *
 * Definitions for memory and string functions.
 *
 */

#ifndef _STRING_H_
#define	_STRING_H_

/* All the headers include this file. */
#include <_mingw.h>

/*
 * Define size_t, wchar_t and NULL
 */
#define __need_size_t
#define __need_wchar_t
#define	__need_NULL
#ifndef RC_INVOKED
#include <stddef.h>
#endif	/* Not RC_INVOKED */

#ifndef RC_INVOKED

#ifdef __cplusplus
extern "C" {
#endif

/*
 * Prototypes of the ANSI Standard C library string functions.
 */
_CRTIMP void* __cdecl __MINGW_NOTHROW	memchr (const void*, int, size_t) __MINGW_ATTRIB_PURE;
_CRTIMP int __cdecl __MINGW_NOTHROW 	memcmp (const void*, const void*, size_t) __MINGW_ATTRIB_PURE;
_CRTIMP void* __cdecl __MINGW_NOTHROW 	memcpy (void*, const void*, size_t);
_CRTIMP void* __cdecl __MINGW_NOTHROW	memmove (void*, const void*, size_t);
_CRTIMP void* __cdecl __MINGW_NOTHROW	memset (void*, int, size_t);
_CRTIMP char* __cdecl __MINGW_NOTHROW	strcat (char*, const char*);
_CRTIMP char* __cdecl __MINGW_NOTHROW	strchr (const char*, int)  __MINGW_ATTRIB_PURE;
_CRTIMP int __cdecl __MINGW_NOTHROW	strcmp (const char*, const char*)  __MINGW_ATTRIB_PURE;
_CRTIMP int __cdecl __MINGW_NOTHROW	strcoll (const char*, const char*);	/* Compare using locale */
_CRTIMP char* __cdecl __MINGW_NOTHROW	strcpy (char*, const char*);
_CRTIMP size_t __cdecl __MINGW_NOTHROW	strcspn (const char*, const char*)  __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl __MINGW_NOTHROW	strerror (int); /* NOTE: NOT an old name wrapper. */

_CRTIMP size_t __cdecl __MINGW_NOTHROW	strlen (const char*)  __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl __MINGW_NOTHROW	strncat (char*, const char*, size_t);
_CRTIMP int __cdecl __MINGW_NOTHROW	strncmp (const char*, const char*, size_t)  __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl __MINGW_NOTHROW	strncpy (char*, const char*, size_t);
_CRTIMP char* __cdecl __MINGW_NOTHROW	strpbrk (const char*, const char*)  __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl __MINGW_NOTHROW	strrchr (const char*, int)  __MINGW_ATTRIB_PURE;
_CRTIMP size_t __cdecl __MINGW_NOTHROW	strspn (const char*, const char*)  __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl __MINGW_NOTHROW	strstr (const char*, const char*)  __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl __MINGW_NOTHROW	strtok (char*, const char*);
_CRTIMP size_t __cdecl __MINGW_NOTHROW	strxfrm (char*, const char*, size_t);

#ifndef __STRICT_ANSI__
/*
 * Extra non-ANSI functions provided by the CRTDLL library
 */
_CRTIMP char* __cdecl __MINGW_NOTHROW	_strerror (const char *);
_CRTIMP void* __cdecl __MINGW_NOTHROW	_memccpy (void*, const void*, int, size_t);
_CRTIMP int __cdecl __MINGW_NOTHROW 	_memicmp (const void*, const void*, size_t);
_CRTIMP char* __cdecl __MINGW_NOTHROW 	_strdup (const char*) __MINGW_ATTRIB_MALLOC;
_CRTIMP int __cdecl __MINGW_NOTHROW	_strcmpi (const char*, const char*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_stricmp (const char*, const char*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_stricoll (const char*, const char*);
_CRTIMP char* __cdecl __MINGW_NOTHROW	_strlwr (char*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_strnicmp (const char*, const char*, size_t);
_CRTIMP char* __cdecl __MINGW_NOTHROW	_strnset (char*, int, size_t);
_CRTIMP char* __cdecl __MINGW_NOTHROW	_strrev (char*);
_CRTIMP char* __cdecl __MINGW_NOTHROW	_strset (char*, int);
_CRTIMP char* __cdecl __MINGW_NOTHROW	_strupr (char*);
_CRTIMP void __cdecl __MINGW_NOTHROW	_swab (const char*, char*, size_t);

#ifdef __MSVCRT__
_CRTIMP int __cdecl __MINGW_NOTHROW  _strncoll(const char*, const char*, size_t);
_CRTIMP int __cdecl __MINGW_NOTHROW  _strnicoll(const char*, const char*, size_t);
#endif

#ifndef	_NO_OLDNAMES
/*
 * Non-underscored versions of non-ANSI functions. They live in liboldnames.a
 * and provide a little extra portability. Also a few extra UNIX-isms like
 * strcasecmp.
 */
_CRTIMP void* __cdecl __MINGW_NOTHROW	memccpy (void*, const void*, int, size_t);
_CRTIMP int __cdecl __MINGW_NOTHROW	memicmp (const void*, const void*, size_t);
_CRTIMP char* __cdecl __MINGW_NOTHROW	strdup (const char*) __MINGW_ATTRIB_MALLOC;
_CRTIMP int __cdecl __MINGW_NOTHROW	strcmpi (const char*, const char*);
_CRTIMP int __cdecl __MINGW_NOTHROW	stricmp (const char*, const char*);
int __cdecl __MINGW_NOTHROW strcasecmp (const char*, const char *);
#ifndef __NO_INLINE__
__CRT_INLINE int __cdecl __MINGW_NOTHROW
strcasecmp (const char * __sz1, const char * __sz2)
  {return _stricmp (__sz1, __sz2);}
#endif
_CRTIMP int __cdecl __MINGW_NOTHROW	stricoll (const char*, const char*);
_CRTIMP char* __cdecl __MINGW_NOTHROW	strlwr (char*);
_CRTIMP int __cdecl __MINGW_NOTHROW	strnicmp (const char*, const char*, size_t);
int  __cdecl __MINGW_NOTHROW strncasecmp (const char *, const char *, size_t);
#ifndef __NO_INLINE__
__CRT_INLINE int __cdecl __MINGW_NOTHROW
strncasecmp (const char * __sz1, const char * __sz2, size_t __sizeMaxCompare)
  {return _strnicmp (__sz1, __sz2, __sizeMaxCompare);}
#endif
_CRTIMP char* __cdecl __MINGW_NOTHROW	strnset (char*, int, size_t);
_CRTIMP char* __cdecl __MINGW_NOTHROW	strrev (char*);
_CRTIMP char* __cdecl __MINGW_NOTHROW	strset (char*, int);
_CRTIMP char* __cdecl __MINGW_NOTHROW	strupr (char*);
#ifndef _UWIN
_CRTIMP void __cdecl __MINGW_NOTHROW	swab (const char*, char*, size_t);
#endif /* _UWIN */
#endif /* _NO_OLDNAMES */

#endif	/* Not __STRICT_ANSI__ */

#ifndef _WSTRING_DEFINED
/*
 * Unicode versions of the standard calls.
 * Also in wchar.h, where they belong according to ISO standard.
 */
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcscat (wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcschr (const wchar_t*, wchar_t);
_CRTIMP int __cdecl __MINGW_NOTHROW	wcscmp (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	wcscoll (const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcscpy (wchar_t*, const wchar_t*);
_CRTIMP size_t __cdecl __MINGW_NOTHROW	wcscspn (const wchar_t*, const wchar_t*);
/* Note:  _wcserror requires __MSVCRT_VERSION__ >= 0x0700.  */
_CRTIMP size_t __cdecl __MINGW_NOTHROW	wcslen (const wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcsncat (wchar_t*, const wchar_t*, size_t);
_CRTIMP int __cdecl __MINGW_NOTHROW	wcsncmp(const wchar_t*, const wchar_t*, size_t);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcsncpy(wchar_t*, const wchar_t*, size_t);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcspbrk(const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcsrchr(const wchar_t*, wchar_t);
_CRTIMP size_t __cdecl __MINGW_NOTHROW	wcsspn(const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcsstr(const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcstok(wchar_t*, const wchar_t*);
_CRTIMP size_t __cdecl __MINGW_NOTHROW	wcsxfrm(wchar_t*, const wchar_t*, size_t);

#ifndef	__STRICT_ANSI__
/*
 * Unicode versions of non-ANSI string functions provided by CRTDLL.
 */

/* NOTE: _wcscmpi not provided by CRTDLL, this define is for portability */
#define		_wcscmpi	_wcsicmp

_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _wcsdup (const wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wcsicmp (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wcsicoll (const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _wcslwr (wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wcsnicmp (const wchar_t*, const wchar_t*, size_t);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _wcsnset (wchar_t*, wchar_t, size_t);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _wcsrev (wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _wcsset (wchar_t*, wchar_t);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW _wcsupr (wchar_t*);

#ifdef __MSVCRT__
_CRTIMP int __cdecl __MINGW_NOTHROW  _wcsncoll(const wchar_t*, const wchar_t*, size_t);
_CRTIMP int   __cdecl __MINGW_NOTHROW _wcsnicoll(const wchar_t*, const wchar_t*, size_t);
#if __MSVCRT_VERSION__ >= 0x0700
_CRTIMP  wchar_t* __cdecl __MINGW_NOTHROW _wcserror(int);
_CRTIMP  wchar_t* __cdecl __MINGW_NOTHROW __wcserror(const wchar_t*);
#endif
#endif

#ifndef	_NO_OLDNAMES
/* NOTE: There is no _wcscmpi, but this is for compatibility. */
int __cdecl __MINGW_NOTHROW wcscmpi (const wchar_t * __ws1, const wchar_t * __ws2);
#ifndef __NO_INLINE__
__CRT_INLINE int __cdecl __MINGW_NOTHROW
wcscmpi (const wchar_t * __ws1, const wchar_t * __ws2)
  {return _wcsicmp (__ws1, __ws2);}
#endif
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcsdup (const wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	wcsicmp (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	wcsicoll (const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcslwr (wchar_t*);
_CRTIMP int __cdecl __MINGW_NOTHROW	wcsnicmp (const wchar_t*, const wchar_t*, size_t);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcsnset (wchar_t*, wchar_t, size_t);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcsrev (wchar_t*);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcsset (wchar_t*, wchar_t);
_CRTIMP wchar_t* __cdecl __MINGW_NOTHROW wcsupr (wchar_t*);
#endif	/* Not _NO_OLDNAMES */

#endif	/* Not strict ANSI */

#define _WSTRING_DEFINED
#endif  /* _WSTRING_DEFINED */

#ifdef __cplusplus
}
#endif

#endif	/* Not RC_INVOKED */

#endif	/* Not _STRING_H_ */
@


1.20
log
@2009-07-18  Gregory McGarry  <gregorymcgarry@@users.sourceforge.net>

        * include/inttypes.h include/math.h include/stdio.h include/stdlib.h
        include/string.h include/unistd.h include/wchar.h: Add __NO_INLINE__ guard
        to all inline functions.
@
text
@@


1.19
log
@	*include/assert.h:  Qualify all  functions with __MINGW_NOTHROW.
	*include/conio.h:  Likewise.
	*include/ctype.h:  Likewise.
	*include/direct.h:  Likewise.
	*include/dos.h:  Likewise.
	*include/errno.h:  Likewise.
	*include/fenv.h:  Likewise.
	*include/float.h:  Likewise.
	*include/inttypes.h:  Likewise.
	*include/io.h:  Likewise.
	*include/libgen.h:  Likewise.
	*include/locale.h:  Likewise.
	*include/malloc.h:  Likewise.
	*include/mbctype.h:  Likewise.
	*include/mbstring.h:  Likewise.
	*include/process.h:  Likewise.
	*include/search.h:  Likewise.
	*include/setjmp.h:  Likewise.
	*include/signal.h:  Likewise.
	*include/stdio.h:  Likewise.
	*include/stdlib.h:  Likewise.
	*include/string.h:  Likewise.
	*include/time.h:  Likewise.
	*include/wchar.h:  Likewise.
	*include/sys/stat.h:  Likewise.
	*include/sys/time.h:  Likewise.
	*include/sys/timeb.h:  Likewise.
	*include/sys/utime.h:  Likewise.
@
text
@d95 2
a96 1
__CRT_INLINE int __cdecl __MINGW_NOTHROW strcasecmp (const char*, const char *);
d100 1
d104 2
a105 1
__CRT_INLINE int  __cdecl __MINGW_NOTHROW strncasecmp (const char *, const char *, size_t);
d109 1
d174 1
d178 1
@


1.18
log
@* include/string.h (strcasecmp): Fix typo in declaration prototype.
@
text
@d36 23
a58 23
_CRTIMP void* __cdecl	memchr (const void*, int, size_t) __MINGW_ATTRIB_PURE;
_CRTIMP int __cdecl 	memcmp (const void*, const void*, size_t) __MINGW_ATTRIB_PURE;
_CRTIMP void* __cdecl 	memcpy (void*, const void*, size_t);
_CRTIMP void* __cdecl	memmove (void*, const void*, size_t);
_CRTIMP void* __cdecl	memset (void*, int, size_t);
_CRTIMP char* __cdecl	strcat (char*, const char*);
_CRTIMP char* __cdecl	strchr (const char*, int)  __MINGW_ATTRIB_PURE;
_CRTIMP int __cdecl	strcmp (const char*, const char*)  __MINGW_ATTRIB_PURE;
_CRTIMP int __cdecl	strcoll (const char*, const char*);	/* Compare using locale */
_CRTIMP char* __cdecl	strcpy (char*, const char*);
_CRTIMP size_t __cdecl	strcspn (const char*, const char*)  __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl	strerror (int); /* NOTE: NOT an old name wrapper. */

_CRTIMP size_t __cdecl	strlen (const char*)  __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl	strncat (char*, const char*, size_t);
_CRTIMP int __cdecl	strncmp (const char*, const char*, size_t)  __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl	strncpy (char*, const char*, size_t);
_CRTIMP char* __cdecl	strpbrk (const char*, const char*)  __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl	strrchr (const char*, int)  __MINGW_ATTRIB_PURE;
_CRTIMP size_t __cdecl	strspn (const char*, const char*)  __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl	strstr (const char*, const char*)  __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl	strtok (char*, const char*);
_CRTIMP size_t __cdecl	strxfrm (char*, const char*, size_t);
d64 14
a77 14
_CRTIMP char* __cdecl	_strerror (const char *);
_CRTIMP void* __cdecl	_memccpy (void*, const void*, int, size_t);
_CRTIMP int __cdecl 	_memicmp (const void*, const void*, size_t);
_CRTIMP char* __cdecl 	_strdup (const char*) __MINGW_ATTRIB_MALLOC;
_CRTIMP int __cdecl	_strcmpi (const char*, const char*);
_CRTIMP int __cdecl	_stricmp (const char*, const char*);
_CRTIMP int __cdecl	_stricoll (const char*, const char*);
_CRTIMP char* __cdecl	_strlwr (char*);
_CRTIMP int __cdecl	_strnicmp (const char*, const char*, size_t);
_CRTIMP char* __cdecl	_strnset (char*, int, size_t);
_CRTIMP char* __cdecl	_strrev (char*);
_CRTIMP char* __cdecl	_strset (char*, int);
_CRTIMP char* __cdecl	_strupr (char*);
_CRTIMP void __cdecl	_swab (const char*, char*, size_t);
d80 2
a81 2
_CRTIMP int __cdecl  _strncoll(const char*, const char*, size_t);
_CRTIMP int __cdecl  _strnicoll(const char*, const char*, size_t);
d90 7
a96 7
_CRTIMP void* __cdecl	memccpy (void*, const void*, int, size_t);
_CRTIMP int __cdecl	memicmp (const void*, const void*, size_t);
_CRTIMP char* __cdecl	strdup (const char*) __MINGW_ATTRIB_MALLOC;
_CRTIMP int __cdecl	strcmpi (const char*, const char*);
_CRTIMP int __cdecl	stricmp (const char*, const char*);
__CRT_INLINE int __cdecl strcasecmp (const char*, const char *);
__CRT_INLINE int __cdecl
d99 5
a103 5
_CRTIMP int __cdecl	stricoll (const char*, const char*);
_CRTIMP char* __cdecl	strlwr (char*);
_CRTIMP int __cdecl	strnicmp (const char*, const char*, size_t);
__CRT_INLINE int  __cdecl strncasecmp (const char *, const char *, size_t);
__CRT_INLINE int __cdecl
d106 4
a109 4
_CRTIMP char* __cdecl	strnset (char*, int, size_t);
_CRTIMP char* __cdecl	strrev (char*);
_CRTIMP char* __cdecl	strset (char*, int);
_CRTIMP char* __cdecl	strupr (char*);
d111 1
a111 1
_CRTIMP void __cdecl	swab (const char*, char*, size_t);
d122 6
a127 6
_CRTIMP wchar_t* __cdecl wcscat (wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcschr (const wchar_t*, wchar_t);
_CRTIMP int __cdecl	wcscmp (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl	wcscoll (const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcscpy (wchar_t*, const wchar_t*);
_CRTIMP size_t __cdecl	wcscspn (const wchar_t*, const wchar_t*);
d129 10
a138 10
_CRTIMP size_t __cdecl	wcslen (const wchar_t*);
_CRTIMP wchar_t* __cdecl wcsncat (wchar_t*, const wchar_t*, size_t);
_CRTIMP int __cdecl	wcsncmp(const wchar_t*, const wchar_t*, size_t);
_CRTIMP wchar_t* __cdecl wcsncpy(wchar_t*, const wchar_t*, size_t);
_CRTIMP wchar_t* __cdecl wcspbrk(const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcsrchr(const wchar_t*, wchar_t);
_CRTIMP size_t __cdecl	wcsspn(const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcsstr(const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcstok(wchar_t*, const wchar_t*);
_CRTIMP size_t __cdecl	wcsxfrm(wchar_t*, const wchar_t*, size_t);
d148 9
a156 9
_CRTIMP wchar_t* __cdecl _wcsdup (const wchar_t*);
_CRTIMP int __cdecl	_wcsicmp (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl	_wcsicoll (const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl _wcslwr (wchar_t*);
_CRTIMP int __cdecl	_wcsnicmp (const wchar_t*, const wchar_t*, size_t);
_CRTIMP wchar_t* __cdecl _wcsnset (wchar_t*, wchar_t, size_t);
_CRTIMP wchar_t* __cdecl _wcsrev (wchar_t*);
_CRTIMP wchar_t* __cdecl _wcsset (wchar_t*, wchar_t);
_CRTIMP wchar_t* __cdecl _wcsupr (wchar_t*);
d159 2
a160 2
_CRTIMP int __cdecl  _wcsncoll(const wchar_t*, const wchar_t*, size_t);
_CRTIMP int   __cdecl _wcsnicoll(const wchar_t*, const wchar_t*, size_t);
d162 2
a163 2
_CRTIMP  wchar_t* __cdecl _wcserror(int);
_CRTIMP  wchar_t* __cdecl __wcserror(const wchar_t*);
d169 2
a170 2
int __cdecl wcscmpi (const wchar_t * __ws1, const wchar_t * __ws2);
__CRT_INLINE int __cdecl
d173 9
a181 9
_CRTIMP wchar_t* __cdecl wcsdup (const wchar_t*);
_CRTIMP int __cdecl	wcsicmp (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl	wcsicoll (const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcslwr (wchar_t*);
_CRTIMP int __cdecl	wcsnicmp (const wchar_t*, const wchar_t*, size_t);
_CRTIMP wchar_t* __cdecl wcsnset (wchar_t*, wchar_t, size_t);
_CRTIMP wchar_t* __cdecl wcsrev (wchar_t*);
_CRTIMP wchar_t* __cdecl wcsset (wchar_t*, wchar_t);
_CRTIMP wchar_t* __cdecl wcsupr (wchar_t*);
@


1.17
log
@	* include/string.h (strcasecmp): Add prototype.
	(strncasecmp): Add prototype.
@
text
@d102 1
a102 1
__CRT_INLINE int  __cdecl strncasecmp (const char *. const char *, size_t);
@


1.16
log
@	* include/wchar.h (wcsdup): Correct prototype.
	* include/string.h (wcsdup): Correct prototype.
@
text
@d95 1
d102 1
@


1.15
log
@	* include/string.h (memchr, memcmp, strchr, strcmp, strcspn)
	(strlen, strncmp, strpbrk, strrchr, strspn, strstr): Add pure
        attribute.
@
text
@d167 1
d171 1
a171 1
_CRTIMP wchar_t* __cdecl wcsdup (wchar_t*);
@


1.14
log
@	* include/string.h: Revert 2004-07-26 additions of
	__ATTRIBUTE_PURE.
@
text
@d36 2
a37 2
_CRTIMP void* __cdecl	memchr (const void*, int, size_t);
_CRTIMP int __cdecl 	memcmp (const void*, const void*, size_t);
d42 2
a43 2
_CRTIMP char* __cdecl	strchr (const char*, int);
_CRTIMP int __cdecl	strcmp (const char*, const char*);
d46 1
a46 1
_CRTIMP size_t __cdecl	strcspn (const char*, const char*);
d49 1
a49 1
_CRTIMP size_t __cdecl	strlen (const char*);
d51 1
a51 1
_CRTIMP int __cdecl	strncmp (const char*, const char*, size_t);
d53 4
a56 4
_CRTIMP char* __cdecl	strpbrk (const char*, const char*);
_CRTIMP char* __cdecl	strrchr (const char*, int);
_CRTIMP size_t __cdecl	strspn (const char*, const char*);
_CRTIMP char* __cdecl	strstr (const char*, const char*);
@


1.13
log
@	* include/_mingw.h: Use only two underscores to uglify
	__MINGW_ATTRIB_* macros.
	* include/stdlib.h: Adjust __MINGW_ATTRIB_* tokens.
	* includ/setjmp.h: Likewise.

	* include/sting.h: Add __MINGW_ATTRIB_PURE to locale-independent
	string functions.
	(_strdup, strdup): Add __MINGW_ATTRIB_MALLOC.
@
text
@d36 8
a43 8
_CRTIMP void* __cdecl	memchr (const void*, int, size_t) __MINGW_ATTRIB_PURE;
_CRTIMP int __cdecl 	memcmp (const void*, const void*, size_t) __MINGW_ATTRIB_PURE;
_CRTIMP void* __cdecl 	memcpy (void*, const void*, size_t) __MINGW_ATTRIB_PURE;
_CRTIMP void* __cdecl	memmove (void*, const void*, size_t) __MINGW_ATTRIB_PURE;
_CRTIMP void* __cdecl	memset (void*, int, size_t) __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl	strcat (char*, const char*) __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl	strchr (const char*, int) __MINGW_ATTRIB_PURE;
_CRTIMP int __cdecl	strcmp (const char*, const char*) __MINGW_ATTRIB_PURE;
d45 2
a46 2
_CRTIMP char* __cdecl	strcpy (char*, const char*) __MINGW_ATTRIB_PURE;
_CRTIMP size_t __cdecl	strcspn (const char*, const char*) __MINGW_ATTRIB_PURE;
d49 8
a56 8
_CRTIMP size_t __cdecl	strlen (const char*) __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl	strncat (char*, const char*, size_t) __MINGW_ATTRIB_PURE;
_CRTIMP int __cdecl	strncmp (const char*, const char*, size_t) __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl	strncpy (char*, const char*, size_t) __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl	strpbrk (const char*, const char*) __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl	strrchr (const char*, int) __MINGW_ATTRIB_PURE;
_CRTIMP size_t __cdecl	strspn (const char*, const char*) __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl	strstr (const char*, const char*) __MINGW_ATTRIB_PURE;
d65 1
a65 1
_CRTIMP void* __cdecl	_memccpy (void*, const void*, int, size_t) __MINGW_ATTRIB_PURE;
d73 3
a75 3
_CRTIMP char* __cdecl	_strnset (char*, int, size_t) __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl	_strrev (char*) __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl	_strset (char*, int) __MINGW_ATTRIB_PURE;
d77 1
a77 1
_CRTIMP void __cdecl	_swab (const char*, char*, size_t) __MINGW_ATTRIB_PURE;
d90 1
a90 1
_CRTIMP void* __cdecl	memccpy (void*, const void*, int, size_t) __MINGW_ATTRIB_PURE;
d104 3
a106 3
_CRTIMP char* __cdecl	strnset (char*, int, size_t) __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl	strrev (char*) __MINGW_ATTRIB_PURE;
_CRTIMP char* __cdecl	strset (char*, int) __MINGW_ATTRIB_PURE;
d109 1
a109 1
_CRTIMP void __cdecl	swab (const char*, char*, size_t) __MINGW_ATTRIB_PURE;
@


1.12
log
@	* include/string.h: Group wide string functions together,
	and protect with _WSTRING_DEFINED.
@
text
@d36 8
a43 8
_CRTIMP void* __cdecl	memchr (const void*, int, size_t);
_CRTIMP int __cdecl 	memcmp (const void*, const void*, size_t);
_CRTIMP void* __cdecl 	memcpy (void*, const void*, size_t);
_CRTIMP void* __cdecl	memmove (void*, const void*, size_t);
_CRTIMP void* __cdecl	memset (void*, int, size_t);
_CRTIMP char* __cdecl	strcat (char*, const char*);
_CRTIMP char* __cdecl	strchr (const char*, int);
_CRTIMP int __cdecl	strcmp (const char*, const char*);
d45 2
a46 2
_CRTIMP char* __cdecl	strcpy (char*, const char*);
_CRTIMP size_t __cdecl	strcspn (const char*, const char*);
d49 8
a56 8
_CRTIMP size_t __cdecl	strlen (const char*);
_CRTIMP char* __cdecl	strncat (char*, const char*, size_t);
_CRTIMP int __cdecl	strncmp (const char*, const char*, size_t);
_CRTIMP char* __cdecl	strncpy (char*, const char*, size_t);
_CRTIMP char* __cdecl	strpbrk (const char*, const char*);
_CRTIMP char* __cdecl	strrchr (const char*, int);
_CRTIMP size_t __cdecl	strspn (const char*, const char*);
_CRTIMP char* __cdecl	strstr (const char*, const char*);
d65 1
a65 1
_CRTIMP void* __cdecl	_memccpy (void*, const void*, int, size_t);
d67 1
a67 1
_CRTIMP char* __cdecl 	_strdup (const char*);
d73 3
a75 3
_CRTIMP char* __cdecl	_strnset (char*, int, size_t);
_CRTIMP char* __cdecl	_strrev (char*);
_CRTIMP char* __cdecl	_strset (char*, int);
d77 1
a77 1
_CRTIMP void __cdecl	_swab (const char*, char*, size_t);
d90 1
a90 1
_CRTIMP void* __cdecl	memccpy (void*, const void*, int, size_t);
d92 1
a92 1
_CRTIMP char* __cdecl	strdup (const char*);
d104 3
a106 3
_CRTIMP char* __cdecl	strnset (char*, int, size_t);
_CRTIMP char* __cdecl	strrev (char*);
_CRTIMP char* __cdecl	strset (char*, int);
d109 1
a109 1
_CRTIMP void __cdecl	swab (const char*, char*, size_t);
@


1.11
log
@
	* CONTRIBUTORS: New file.
	* DISCLAIMER: Ditto.
	* CRT_noglob.c: Reword copyright and disclaimer.  Move Contributors
	section CONTRIBUTORS file.  Remove RCS tags.
	* CRTFmode.c: Ditto.
	* CRTglob.c: Ditto.
	* CRTinit.c: Ditto.
	* crt1.c: Ditto.
	* crtdll.dev: Ditto.
	* dllcrt1.c: Ditto.
	* dllmain.c: Ditto.
	* gccmain.c: Ditto.
	* init.c: Ditto.
	* isascii.c: Ditto.
	* iscsym.c: Ditto.
	* iscsymf.c: Ditto.
	* jamfile: Ditto.
	* main.c: Ditto.
	* msvcrt.def.in: Ditto.
	* strcasecmp.c: Ditto.
	* toascii.c: Ditto.
	* wcscmpi.c: Ditto.
	* include/assert.h: Ditto.
	* include/conio.h: Ditto.
	* include/ctype.h: Ditto.
	* include/direct.h: Ditto.
	* include/dirent.h: Ditto.
	* include/dos.h: Ditto.
	* include/errno.h: Ditto.
	* include/excpt.h: Ditto.
	* include/fcntl.h: Ditto.
	* include/float.h: Ditto.
	* include/io.h: Ditto.
	* include/locale.h: Ditto.
	* include/malloc.h: Ditto.
	* include/math.h: Ditto.
	* include/process.h: Ditto.
	* include/setjmp.h: Ditto.
	* include/share.h: Ditto.
	* include/signal.h: Ditto.
	* include/stdio.h: Ditto.
	* include/stdlib.h: Ditto.
	* include/string.h: Ditto.
	* include/tchar.h: Ditto.
	* include/time.h: Ditto.
	* include/wchar.h: Ditto.
	* include/sys/locking.h: Ditto.
	* include/sys/param.h: Ditto.
	* include/sys/stat.h: Ditto.
	* include/sys/timeb.h: Ditto.
	* include/sys/types.h: Ditto.
	* include/sys/utime.h: Ditto.
	* mingwex/dirent.c: Ditto.
@
text
@d84 29
d115 1
d118 1
d126 1
a126 1
/* Note: No wcserror in CRTDLL. */
d140 1
a140 1
 * Unicode versions of non-ANSI functions provided by CRTDLL.
a164 5

#endif	/* Not __STRICT_ANSI__ */


#ifndef	__STRICT_ANSI__
a165 29

/*
 * Non-underscored versions of non-ANSI functions. They live in liboldnames.a
 * and provide a little extra portability. Also a few extra UNIX-isms like
 * strcasecmp.
 */

_CRTIMP void* __cdecl	memccpy (void*, const void*, int, size_t);
_CRTIMP int __cdecl	memicmp (const void*, const void*, size_t);
_CRTIMP char* __cdecl	strdup (const char*);
_CRTIMP int __cdecl	strcmpi (const char*, const char*);
_CRTIMP int __cdecl	stricmp (const char*, const char*);
__CRT_INLINE int __cdecl
strcasecmp (const char * __sz1, const char * __sz2)
  {return _stricmp (__sz1, __sz2);}
_CRTIMP int __cdecl	stricoll (const char*, const char*);
_CRTIMP char* __cdecl	strlwr (char*);
_CRTIMP int __cdecl	strnicmp (const char*, const char*, size_t);
__CRT_INLINE int __cdecl
strncasecmp (const char * __sz1, const char * __sz2, size_t __sizeMaxCompare)
  {return _strnicmp (__sz1, __sz2, __sizeMaxCompare);}
_CRTIMP char* __cdecl	strnset (char*, int, size_t);
_CRTIMP char* __cdecl	strrev (char*);
_CRTIMP char* __cdecl	strset (char*, int);
_CRTIMP char* __cdecl	strupr (char*);
#ifndef _UWIN
_CRTIMP void __cdecl	swab (const char*, char*, size_t);
#endif /* _UWIN */

d179 1
a180 1
#endif	/* Not _NO_OLDNAMES */
d183 2
a192 1

@


1.10
log
@	Add prototypes for new msvcrt.dll versions

	* include/_mingw.h (__MSVCRT_VERSION__): Define default as 0x0600.

	* include/time.h (__time64_t): Add typedef.
	(_mktime64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.
	(_ctime64): Likewise.
	(_wctime64): Likewise.
	(_gmtime64): Likewise.
	(_localtime64): Likewise.
	(wcsftime): Move into _WTIME_DEFINED block.
	Regroup non-ANSI prototypes.

	* include/io.h: Include <stdint.h>.
	(__finddata64_t): Add struct definition.
	(__wfinddata64_t): Likewise.
	(_findfirst64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.
	(_findnext64): Likewise.
	(_wfindfirst64): Likewise.
	(_wfindnext64): Likewise.

	* include/sys/timeb.h (__timeb64): Add struct definition.
	(_ftime64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.

	* include/sys/utime.h (__utimbuf64): Add struct definition.
	(_utime64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.
	(_futime64): Likewise.
	(_wutime64): Likewise.

	* include/sys/stat.h (__stat64):  Add struct definition.
	(_fstat64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.
	(_stat64): Likewise.
	(_wstat64): Likwise.

	* include/sys/types.h (__time64_t):  Add typedef.

	* include/wchar.h (__wfinddata64_t): Add structure definition.
	(__stat64): Likewise.
	(_wctime64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.
	(_wfindfirst64): Likewise.
	(_wfindnext64): Likewise.
	(_wutime64): Likewise.
	(_wstat64): Likwise.

	* include/malloc.h (_aligned_free): Add prototype for
	__MSVCRT_VERSION__ >= 0x0700.
	(_aligned_malloc): Likewise.
	(_aligned_offset_malloc): Likewise.
	(_aligned_offset_realloc): Likewise.
	(_aligned_realloc): Likewise.

	* include/string.h (_wcserror): Add prototype for
	__MSVCRT_VERSION__ >= 0x0700.
	(__wcserror): Likewise.

	* include/math.h (_set_SSE2_enable): Add prototype for
	__MSVCRT_VERSION__ >= 0x0701.
@
text
@d3 3
a7 19
 *
 * This file is part of the Mingw32 package.
 *
 * Contributors:
 *  Created by Colin Peters <colin@@bird.fu.is.saga-u.ac.jp>
 *
 *  THIS SOFTWARE IS NOT COPYRIGHTED
 *
 *  This source code is offered for use in the public domain. You may
 *  use, modify or distribute it freely.
 *
 *  This code is distributed in the hope that it will be useful but
 *  WITHOUT ANY WARRANTY. ALL WARRANTIES, EXPRESS OR IMPLIED ARE HEREBY
 *  DISCLAIMED. This includes but is not limited to warranties of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * $Revision: 1.3 $
 * $Author: dannysmith $
 * $Date: 2001/11/29 04:26:33 $
@


1.9
log
@	* include/_mingw.h (__CRT_INLINE): Define.
	* include/ctype.h: Replace 'extern inline' with __CRT_INLINE,
	throughout
	* include/inttypes.h: Likewise.
	* include/math.h: Likewise.
	* include/stdio.h: Likewise.
	* include/stdlib.h: Likewise.
	* include/string.h: Likewise.
	* include/wchar.h: Likewise.
	* include/wctype.h: Likewise.
@
text
@d143 5
a147 1
_CRTIMP int __cdecl  _wcsnicoll(const wchar_t*, const wchar_t*, size_t);
@


1.8
log
@	* include/_mingw.h (_CRTIMP): Define for __GNUC__ if
	__declspec(dllimport)  supported.
	(__cdecl): Define if not already defined.
	(__stdcall): Likewise.
	* include/dirent.h: Qualify fuctions with __cdecl.
	* include/fenv.h: Likewise.
	* include/inttypes.h: Likewise.
	* include/assert.h: Qualify fuctions with __cdecl. Qualify
	CRT dll imports with _CRTIMP.
	* include/conio.h: Likewise.
	* include/ctype.h: Likewise.
	* include/direct.h: Likewise.
	* include/dos.h: Likewise.
	* include/errno.h: Likewise.
	* include/float.h: Likewise.
	* include/io.h: Likewise.
	* include/locale.h: Likewise.
	* include/malloc.h: Likewise.
	* include/math.h: Likewise.
	* include/mbctype.h: Likewise.
	* include/mbstring.h: Likewise.
	* include/process.h: Likewise.
	* include/setjmp.h: Likewise.
	* include/signal.h: Likewise.
	* include/stdio.h: Likewise.
	* include/stdlib.h: Likewise.
	* include/string.h: Likewise.
	* include/time.h: Likewise.
	* include/wchar.h: Likewise.
	* include/wctype.h: Likewise.
	* include/sys/stat.h: Likewise.
	* include/sys/timeb.h: Likewise.
	* include/sys/utime.h: Likewise.

	* include/ctype.h: Guard ctype inlines with __NO_INLINE__.
	* include/wctype.h: Guard wctype inlines with __NO_INLINE__.

	* include/stdio.h (__VALIST): Guard against prior definition.
@
text
@d164 1
a164 1
extern __inline__ int __cdecl
d170 1
a170 1
extern __inline__ int __cdecl
d182 1
a182 1
extern __inline__ int __cdecl
@


1.7
log
@	* include/string.h (strcasecmp): Make extern __inline__.
	(strncasecmp): Likewise.
	(wcscmpi): Likewise.
@
text
@d52 23
a74 23
void*	memchr (const void*, int, size_t);
int 	memcmp (const void*, const void*, size_t);
void* 	memcpy (void*, const void*, size_t);
void*	memmove (void*, const void*, size_t);
void*	memset (void*, int, size_t);
char*	strcat (char*, const char*);
char*	strchr (const char*, int);
int	strcmp (const char*, const char*);
int	strcoll (const char*, const char*);	/* Compare using locale */
char*	strcpy (char*, const char*);
size_t	strcspn (const char*, const char*);
char*	strerror (int); /* NOTE: NOT an old name wrapper. */

size_t	strlen (const char*);
char*	strncat (char*, const char*, size_t);
int	strncmp (const char*, const char*, size_t);
char*	strncpy (char*, const char*, size_t);
char*	strpbrk (const char*, const char*);
char*	strrchr (const char*, int);
size_t	strspn (const char*, const char*);
char*	strstr (const char*, const char*);
char*	strtok (char*, const char*);
size_t	strxfrm (char*, const char*, size_t);
d80 14
a93 14
char*	_strerror (const char *);
void*	_memccpy (void*, const void*, int, size_t);
int 	_memicmp (const void*, const void*, size_t);
char* 	_strdup (const char*);
int	_strcmpi (const char*, const char*);
int	_stricmp (const char*, const char*);
int	_stricoll (const char*, const char*);
char*	_strlwr (char*);
int	_strnicmp (const char*, const char*, size_t);
char*	_strnset (char*, int, size_t);
char*	_strrev (char*);
char*	_strset (char*, int);
char*	_strupr (char*);
void	_swab (const char*, char*, size_t);
d96 2
a97 2
int  _strncoll(const char*, const char*, size_t);
int  _strnicoll(const char*, const char*, size_t);
d105 6
a110 6
wchar_t* wcscat (wchar_t*, const wchar_t*);
wchar_t* wcschr (const wchar_t*, wchar_t);
int	wcscmp (const wchar_t*, const wchar_t*);
int	wcscoll (const wchar_t*, const wchar_t*);
wchar_t* wcscpy (wchar_t*, const wchar_t*);
size_t	wcscspn (const wchar_t*, const wchar_t*);
d112 10
a121 10
size_t	wcslen (const wchar_t*);
wchar_t* wcsncat (wchar_t*, const wchar_t*, size_t);
int	wcsncmp(const wchar_t*, const wchar_t*, size_t);
wchar_t* wcsncpy(wchar_t*, const wchar_t*, size_t);
wchar_t* wcspbrk(const wchar_t*, const wchar_t*);
wchar_t* wcsrchr(const wchar_t*, wchar_t);
size_t	wcsspn(const wchar_t*, const wchar_t*);
wchar_t* wcsstr(const wchar_t*, const wchar_t*);
wchar_t* wcstok(wchar_t*, const wchar_t*);
size_t	wcsxfrm(wchar_t*, const wchar_t*, size_t);
d131 9
a139 9
wchar_t* _wcsdup (const wchar_t*);
int	_wcsicmp (const wchar_t*, const wchar_t*);
int	_wcsicoll (const wchar_t*, const wchar_t*);
wchar_t* _wcslwr (wchar_t*);
int	_wcsnicmp (const wchar_t*, const wchar_t*, size_t);
wchar_t* _wcsnset (wchar_t*, wchar_t, size_t);
wchar_t* _wcsrev (wchar_t*);
wchar_t* _wcsset (wchar_t*, wchar_t);
wchar_t* _wcsupr (wchar_t*);
d142 2
a143 2
int  _wcsncoll(const wchar_t*, const wchar_t*, size_t);
int  _wcsnicoll(const wchar_t*, const wchar_t*, size_t);
d159 6
a164 6
void*	memccpy (void*, const void*, int, size_t);
int	memicmp (const void*, const void*, size_t);
char*	strdup (const char*);
int	strcmpi (const char*, const char*);
int	stricmp (const char*, const char*);
extern __inline__ int
d167 4
a170 4
int	stricoll (const char*, const char*);
char*	strlwr (char*);
int	strnicmp (const char*, const char*, size_t);
extern __inline__ int
d173 4
a176 4
char*	strnset (char*, int, size_t);
char*	strrev (char*);
char*	strset (char*, int);
char*	strupr (char*);
d178 1
a178 1
void	swab (const char*, char*, size_t);
d182 1
a182 1
extern __inline__ int
d185 9
a193 9
wchar_t* wcsdup (wchar_t*);
int	wcsicmp (const wchar_t*, const wchar_t*);
int	wcsicoll (const wchar_t*, const wchar_t*);
wchar_t* wcslwr (wchar_t*);
int	wcsnicmp (const wchar_t*, const wchar_t*, size_t);
wchar_t* wcsnset (wchar_t*, wchar_t, size_t);
wchar_t* wcsrev (wchar_t*);
wchar_t* wcsset (wchar_t*, wchar_t);
wchar_t* wcsupr (wchar_t*);
@


1.6
log
@	* include/string.h (_strerror): Move into #ifndef
	__STRICT_ANSI__ block.
@
text
@d164 3
a166 1
int	strcasecmp (const char*, const char*);
d170 3
a172 1
int	strncasecmp (const char*, const char*, size_t);
d182 3
a184 1
int	wcscmpi	(const wchar_t*, const wchar_t*);
@


1.6.2.1
log
@	* include/io.h: Move wide char prototypes together.
	* include/string.h: Untangle wide char protototypes.
	Use C++ c-header compatability defines.
	*include/wchar.h: Copy wide char string prototypes from
	string.h.
	Resync with io.h.
	* include/signal.h: Use C++ c-header compatability defines.
	* include/stdio.h: Add guard for __HAVE_STD_CXX.
@
text
@d45 4
a48 1
__BEGIN_CSTD_NAMESPACE
a74 1
__END_CSTD_NAMESPACE
a76 1
__BEGIN_CGLOBAL_NAMESPACE
d100 1
a100 29
#ifndef	_NO_OLDNAMES

/*
 * Non-underscored versions of non-ANSI functions. They live in liboldnames.a
 * and provide a little extra portability. Also a few extra UNIX-isms like
 * strcasecmp.
 */

void*	memccpy (void*, const void*, int, size_t);
int	memicmp (const void*, const void*, size_t);
char*	strdup (const char*);
int	strcmpi (const char*, const char*);
int	stricmp (const char*, const char*);
int	strcasecmp (const char*, const char*);
int	stricoll (const char*, const char*);
char*	strlwr (char*);
int	strnicmp (const char*, const char*, size_t);
int	strncasecmp (const char*, const char*, size_t);
char*	strnset (char*, int, size_t);
char*	strrev (char*);
char*	strset (char*, int);
char*	strupr (char*);
#ifndef _UWIN
void	swab (const char*, char*, size_t);
#endif /* _UWIN */

#endif	/* Not _NO_OLDNAMES */

__END_CGLOBAL_NAMESPACE
a101 4
#endif	/* Not strict ANSI */


#ifndef _WSTRING_DEFINED
a103 1
 * Also in wchar.h, where they really belong.
a104 1
__BEGIN_CSTD_NAMESPACE
a121 1
__END_CSTD_NAMESPACE
d123 1
a123 2
#ifndef __STRICT_ANSI__
__BEGIN_CGLOBAL_NAMESPACE
d146 31
a176 1
#ifndef __NO_OLDNAMES
d188 1
d190 1
a191 1
__END_CGLOBAL_NAMESPACE
d193 3
a195 3
#endif	/* Not strict ANSI */
#define _WSTRING_DEFINED
#endif  /* _WSTRING_DEFINED */
@


1.6.2.2
log
@	* include/ctype: Qualify wint_t with __CSTD
	when in global namespace.
	* include/wctype:Likewise.
	* include/stdio.h: Qualify wint_t and size_t with __CSTD
	when in global namespace.
	* include/stdlib.h: Qualify size_t with __CSTD
	when in global namespace.
	* include/string.h: Likewise.
	* include/time.h: Likewise.
	* include/sys/types.h: Inject time_t into global namespace.
@
text
@d80 2
a81 2
void*	_memccpy (void*, const void*, int, __CSTD size_t);
int 	_memicmp (const void*, const void*, __CSTD size_t);
d87 2
a88 2
int	_strnicmp (const char*, const char*, __CSTD size_t);
char*	_strnset (char*, int, __CSTD size_t);
d92 1
a92 1
void	_swab (const char*, char*, __CSTD size_t);
d95 2
a96 2
int  _strncoll(const char*, const char*, __CSTD size_t);
int  _strnicoll(const char*, const char*, __CSTD size_t);
d107 2
a108 2
void*	memccpy (void*, const void*, int, __CSTD size_t);
int	memicmp (const void*, const void*, __CSTD size_t);
d115 3
a117 3
int	strnicmp (const char*, const char*, __CSTD size_t);
int	strncasecmp (const char*, const char*, __CSTD size_t);
char*	strnset (char*, int, __CSTD size_t);
d122 1
a122 1
void	swab (const char*, char*, __CSTD size_t);
d170 2
a171 2
int	_wcsnicmp (const wchar_t*, const wchar_t*, __CSTD size_t);
wchar_t* _wcsnset (wchar_t*, wchar_t, __CSTD size_t);
d177 2
a178 2
int  _wcsncoll(const wchar_t*, const wchar_t*, __CSTD size_t);
int  _wcsnicoll(const wchar_t*, const wchar_t*, __CSTD size_t);
d188 2
a189 2
int	wcsnicmp (const wchar_t*, const wchar_t*, __CSTD size_t);
wchar_t* wcsnset (wchar_t*, wchar_t, __CSTD size_t);
@


1.6.2.3
log
@	Merge from mingw trunk (changes since 2002-10-04).
@
text
@d112 1
a112 3
extern __inline__ int
strcasecmp (const char * __sz1, const char * __sz2)
  {return _stricmp (__sz1, __sz2);}
d116 1
a116 5
extern __inline__ int
strncasecmp (const char*, const char*, __CSTD size_t);
extern __inline__ int
strncasecmp (const char * __sz1, const char * __sz2, __CSTD size_t __sizeMaxCompare)
  {return _strnicmp (__sz1, __sz2, __sizeMaxCompare);}
d170 1
a170 3
extern __inline__ int
wcscmpi (const wchar_t * __ws1, const wchar_t * __ws2)
  {return _wcsicmp (__ws1, __ws2);}
@


1.6.2.4
log
@	Merge from mingw trunk (changes since 2003-01-27).
@
text
@d49 23
a71 23
_CRTIMP void* __cdecl	memchr (const void*, int, size_t);
_CRTIMP int __cdecl 	memcmp (const void*, const void*, size_t);
_CRTIMP void* __cdecl 	memcpy (void*, const void*, size_t);
_CRTIMP void* __cdecl	memmove (void*, const void*, size_t);
_CRTIMP void* __cdecl	memset (void*, int, size_t);
_CRTIMP char* __cdecl	strcat (char*, const char*);
_CRTIMP char* __cdecl	strchr (const char*, int);
_CRTIMP int __cdecl	strcmp (const char*, const char*);
_CRTIMP int __cdecl	strcoll (const char*, const char*);	/* Compare using locale */
_CRTIMP char* __cdecl	strcpy (char*, const char*);
_CRTIMP size_t __cdecl	strcspn (const char*, const char*);
_CRTIMP char* __cdecl	strerror (int); /* NOTE: NOT an old name wrapper. */

_CRTIMP size_t __cdecl	strlen (const char*);
_CRTIMP char* __cdecl	strncat (char*, const char*, size_t);
_CRTIMP int __cdecl	strncmp (const char*, const char*, size_t);
_CRTIMP char* __cdecl	strncpy (char*, const char*, size_t);
_CRTIMP char* __cdecl	strpbrk (const char*, const char*);
_CRTIMP char* __cdecl	strrchr (const char*, int);
_CRTIMP size_t __cdecl	strspn (const char*, const char*);
_CRTIMP char* __cdecl	strstr (const char*, const char*);
_CRTIMP char* __cdecl	strtok (char*, const char*);
_CRTIMP size_t __cdecl	strxfrm (char*, const char*, size_t);
d79 14
a92 14
_CRTIMP char* __cdecl	_strerror (const char *);
_CRTIMP void* __cdecl	_memccpy (void*, const void*, int, __CSTD size_t);
_CRTIMP int __cdecl 	_memicmp (const void*, const void*, __CSTD size_t);
_CRTIMP char* __cdecl 	_strdup (const char*);
_CRTIMP int __cdecl	_strcmpi (const char*, const char*);
_CRTIMP int __cdecl	_stricmp (const char*, const char*);
_CRTIMP int __cdecl	_stricoll (const char*, const char*);
_CRTIMP char* __cdecl	_strlwr (char*);
_CRTIMP int __cdecl	_strnicmp (const char*, const char*, __CSTD size_t);
_CRTIMP char* __cdecl	_strnset (char*, int, __CSTD size_t);
_CRTIMP char* __cdecl	_strrev (char*);
_CRTIMP char* __cdecl	_strset (char*, int);
_CRTIMP char* __cdecl	_strupr (char*);
_CRTIMP void __cdecl	_swab (const char*, char*, __CSTD size_t);
d95 2
a96 2
_CRTIMP int __cdecl  _strncoll(const char*, const char*, __CSTD size_t);
_CRTIMP int __cdecl  _strnicoll(const char*, const char*, __CSTD size_t);
d107 6
a112 6
_CRTIMP void* __cdecl memccpy (void*, const void*, int, __CSTD size_t);
_CRTIMP int __cdecl	memicmp (const void*, const void*, __CSTD size_t);
_CRTIMP char* __cdecl	strdup (const char*);
_CRTIMP int __cdecl	strcmpi (const char*, const char*);
_CRTIMP int __cdecl	stricmp (const char*, const char*);
extern __inline__ int  __cdecl
d115 4
a118 4
_CRTIMP int __cdecl	stricoll (const char*, const char*);
_CRTIMP char* __cdecl	strlwr (char*);
_CRTIMP int __cdecl	strnicmp (const char*, const char*, __CSTD size_t);
extern __inline__ int __cdecl
d120 1
a120 1
extern __inline__ int  __cdecl
d123 4
a126 4
_CRTIMP char* __cdecl	strnset (char*, int, __CSTD size_t);
_CRTIMP char* __cdecl	strrev (char*);
_CRTIMP char* __cdecl	strset (char*, int);
_CRTIMP char* __cdecl	strupr (char*);
d128 1
a128 1
_CRTIMP void __cdecl swab (const char*, char*, __CSTD size_t);
d144 6
a149 6
_CRTIMP wchar_t* __cdecl wcscat (wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcschr (const wchar_t*, wchar_t);
_CRTIMP int __cdecl	wcscmp (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl	wcscoll (const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcscpy (wchar_t*, const wchar_t*);
_CRTIMP size_t __cdecl	wcscspn (const wchar_t*, const wchar_t*);
d151 10
a160 10
_CRTIMP size_t __cdecl	wcslen (const wchar_t*);
_CRTIMP wchar_t* __cdecl wcsncat (wchar_t*, const wchar_t*, size_t);
_CRTIMP int __cdecl	wcsncmp(const wchar_t*, const wchar_t*, size_t);
_CRTIMP wchar_t* __cdecl wcsncpy(wchar_t*, const wchar_t*, size_t);
_CRTIMP wchar_t* __cdecl wcspbrk(const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcsrchr(const wchar_t*, wchar_t);
_CRTIMP size_t __cdecl	wcsspn(const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcsstr(const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcstok(wchar_t*, const wchar_t*);
_CRTIMP size_t __cdecl	wcsxfrm(wchar_t*, const wchar_t*, size_t);
d172 5
a176 5
_CRTIMP wchar_t* __cdecl _wcsdup (const wchar_t*);
_CRTIMP int __cdecl	_wcsicmp (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl	_wcsicoll (const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl _wcslwr (wchar_t*);
extern __inline__ int __cdecl
d179 4
a182 4
_CRTIMP wchar_t* __cdecl _wcsnset (wchar_t*, wchar_t, __CSTD size_t);
_CRTIMP wchar_t* __cdecl _wcsrev (wchar_t*);
_CRTIMP wchar_t* __cdecl _wcsset (wchar_t*, wchar_t);
_CRTIMP wchar_t* __cdecl _wcsupr (wchar_t*);
d185 2
a186 2
_CRTIMP int __cdecl  _wcsncoll(const wchar_t*, const wchar_t*, __CSTD size_t);
_CRTIMP int __cdecl  _wcsnicoll(const wchar_t*, const wchar_t*, __CSTD size_t);
d191 10
a200 10
_CRTIMP int __cdecl	wcscmpi	(const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcsdup (wchar_t*);
_CRTIMP int __cdecl	wcsicmp (const wchar_t*, const wchar_t*);
_CRTIMP int __cdecl	wcsicoll (const wchar_t*, const wchar_t*);
_CRTIMP wchar_t* __cdecl wcslwr (wchar_t*);
_CRTIMP int __cdecl	wcsnicmp (const wchar_t*, const wchar_t*, __CSTD size_t);
_CRTIMP wchar_t* __cdecl wcsnset (wchar_t*, wchar_t, __CSTD size_t);
_CRTIMP wchar_t* __cdecl wcsrev (wchar_t*);
_CRTIMP wchar_t* __cdecl wcsset (wchar_t*, wchar_t);
_CRTIMP wchar_t* __cdecl wcsupr (wchar_t*);
@


1.5
log
@2002-06-18  Casper S. Hornstrup  <chorns@@users.sourceforge.net>

	* include/_mingw.h (__MINGW_IMPORT): Check for prior definition before
	defining.
	* include/excpt.h (): Include windef.h not windows.h.
	* include/fcntl.h (_O_SHORT_LIVED): Add define.
	(_chmod): Add prototype.
        (_creat): Correct prototype.
	(SH_DENY*): Rename defines to _SH_DENY*.
	(SH_DENY*): Add Non-ANSI names for _SH_DENY*.
	include/stdio.h (_IOMYBUF, _IOEOF, _IOERR, _IOSTRG,
	_IOAPPEND): Add defines.
	(_wfindfirst): Correct prototype.
	(_wfdopen): Add prototype.
	* include/stdlib.h (_rotl, _rotr, _lrotl, _lrotr): Add
	prototypes.
	* include/string.h (_mbschr, _mbstok, _mbsncat): Remove
	 prototypes.
	(_wcsdup): Correct prototype.
	* include/mbstring.h: Remove comments about _mbschr, _mbstok,
	 _mbsncat being in string.h.
	* include/wchar.h (_wfindfirst): Correct prototype.
	* include/tchar.h (_tfdopen): Add _UNICODE mappings.
@
text
@d64 1
a64 1
char*	_strerror (const char *);
d80 1
@


1.4
log
@Merge MinGW CVS differences
@
text
@a93 7
/*
 * Multi-byte character functions
 */
unsigned char*	_mbschr (unsigned char*, unsigned char*);
unsigned char*	_mbsncat (unsigned char*, const unsigned char*, size_t);
unsigned char*	_mbstok (unsigned char*, unsigned char*);

d130 1
a130 1
wchar_t* _wcsdup (wchar_t*);
@


1.3
log
@
	* include/direct.h: add guard around MSVCRT-only prototytpes
	* include/io.h: add __int64 struct definitions and function prototypes;
		 add guard for MSVCRT-only prototypes
	* include/limits.h: add ISO C9x macros LLONG_MIN, LLONG_MAX, ULLONG_MAX
	* include/stdio.h: add wchar function prototypes (__MSVCRT__);
		 put wchar functions together to make sync with wchar.h easier
	* include/stdlib.h: add wide char functions (__MSVCRT__)
	* include/string.h: add string collation functions ( __MSVCRT__)
	* include/sys/stat.h: add __int64 struct and function ( __MSVCRT__)
	* include/tchar.h: add macros and macro function definitions
	* include/wchar.h: add wide char function prototypes ( __MSVCRT__ );
		enclose more functions in __MSVCRT__ guard;
		some oldname wide char function prototypes #if (0)'d
	* profile/gmon.h: add guard around BSD-ish typedefs
@
text
@d18 1
a18 1
 *  DISCLAMED. This includes but is not limited to warranties of
d21 3
a23 3
 * $Revision: 1.6 $
 * $Author: cgf $
 * $Date: 2000/02/05 04:04:57 $
@


1.2
log
@* include/string.h: Use proper prototype for _strerror.
@
text
@d101 5
a107 1

a128 1

d146 6
@


1.1
log
@Initial revision
@
text
@d64 1
a64 1
char*	_strerror (int);
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
