head	1.19;
access;
symbols
	cygwin-1_7_17-release:1.18
	cygwin-64bit-branch:1.18.0.2
	cygwin-1_7_16-release:1.18
	cygwin-1_7_15-release:1.18
	cygwin-1_7_14_2-release:1.18
	cygwin-1_7_14-release:1.18
	cygwin-1_7_12-release:1.18
	cygwin-1_7_11-release:1.18
	cygwin-1_7_10-release:1.18
	cygwin-1_7_9-release:1.18
	cygwin-1_7_8-release:1.18
	cygwin-1_7_7-release:1.18
	cygwin-1_7_5-release:1.18
	cygwin-1_7_4-release:1.18
	cygwin-1_7_3-release:1.18
	cygwin-1_7_2-release:1.18
	cygwin-1_7_1-release:1.17
	cv-branch-2:1.17.0.2
	cr-0x5f1:1.15.0.6
	cv-branch:1.15.0.4
	cr-0x3b58:1.15.0.2
	cr-0x9e:1.5.0.10
	cr-0x9d:1.5.0.8
	corinna-01:1.5
	cr-0x9c:1.5.0.6
	cr-0x9b:1.5.0.4
	cr-0x99:1.5
	Z-emcb-cygwin_daemon:1.5.0.2
	w32api-2_2:1.4
	mingw-runtime-2_4:1.4
	mingw-std-ns-branch:1.4.0.16
	mingw-runtime-2_0:1.4
	mingwex:1.4.0.10
	cygnus_cvs_20020108_pre:1.4
	Z-cygwin_daemon_merge-new_HEAD:1.2
	Z-cygwin_daemon_merge_HEAD:1.2
	cygwin_daemon:1.2.0.8;
locks; strict;
comment	@ * @;
expand	@o@;


1.19
date	2012.11.07.16.52.17;	author cgf;	state dead;
branches;
next	1.18;

1.18
date	2010.02.17.02.41.06;	author ironhead;	state Exp;
branches;
next	1.17;

1.17
date	2007.10.03.18.55.56;	author ironhead;	state Exp;
branches;
next	1.16;

1.16
date	2007.06.23.07.34.16;	author dannysmith;	state Exp;
branches;
next	1.15;

1.15
date	2005.02.07.20.18.08;	author dannysmith;	state Exp;
branches;
next	1.14;

1.14
date	2005.01.17.05.03.17;	author dannysmith;	state Exp;
branches;
next	1.13;

1.13
date	2005.01.13.12.40.36;	author earnie;	state Exp;
branches;
next	1.12;

1.12
date	2005.01.11.13.34.42;	author earnie;	state Exp;
branches;
next	1.11;

1.11
date	2004.10.14.07.44.11;	author dannysmith;	state Exp;
branches;
next	1.10;

1.10
date	2004.09.09.02.05.22;	author earnie;	state Exp;
branches;
next	1.9;

1.9
date	2004.09.08.18.24.13;	author earnie;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.20.22.49.32;	author earnie;	state Exp;
branches;
next	1.7;

1.7
date	2004.03.26.11.30.24;	author dannysmith;	state Exp;
branches;
next	1.6;

1.6
date	2004.03.11.09.41.08;	author dannysmith;	state Exp;
branches;
next	1.5;

1.5
date	2003.02.10.21.13.34;	author dannysmith;	state Exp;
branches;
next	1.4;

1.4
date	2001.12.05.15.01.06;	author earnie;	state Exp;
branches
	1.4.16.1;
next	1.3;

1.3
date	2001.11.01.19.51.50;	author earnie;	state Exp;
branches;
next	1.2;

1.2
date	2000.11.21.02.50.03;	author earnie;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;

1.4.16.1
date	2002.09.25.23.50.30;	author dannysmith;	state Exp;
branches;
next	1.4.16.2;

1.4.16.2
date	2003.03.31.22.32.19;	author dannysmith;	state Exp;
branches;
next	;


desc
@@


1.19
log
@* mingw: Delete obsolete directory.
* w32api: Ditto.
@
text
@/*
 * stat.h
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is a part of the mingw-runtime package.
 * No warranty is given; refer to the file DISCLAIMER within the package.
 *
 * Symbolic constants for opening and creating files, also stat, fstat and
 * chmod functions.
 *
 */

#ifndef _STAT_H_
#define _STAT_H_

/* All the headers include this file. */
#include <_mingw.h>

#define __need_size_t
#define __need_wchar_t
#ifndef RC_INVOKED
#include <stddef.h>
#endif /* Not RC_INVOKED */

#include <sys/types.h>

/*
 * Constants for the stat st_mode member.
 */
#define	_S_IFIFO	0x1000	/* FIFO */
#define	_S_IFCHR	0x2000	/* Character */
#define	_S_IFBLK	0x3000	/* Block: Is this ever set under w32? */
#define	_S_IFDIR	0x4000	/* Directory */
#define	_S_IFREG	0x8000	/* Regular */

#define	_S_IFMT		0xF000	/* File type mask */

#define	_S_IEXEC	0x0040
#define	_S_IWRITE	0x0080
#define	_S_IREAD	0x0100

#define	_S_IRWXU	(_S_IREAD | _S_IWRITE | _S_IEXEC)
#define	_S_IXUSR	_S_IEXEC
#define	_S_IWUSR	_S_IWRITE
#define	_S_IRUSR	_S_IREAD

#define	_S_ISDIR(m)	(((m) & _S_IFMT) == _S_IFDIR)
#define	_S_ISFIFO(m)	(((m) & _S_IFMT) == _S_IFIFO)
#define	_S_ISCHR(m)	(((m) & _S_IFMT) == _S_IFCHR)
#define	_S_ISBLK(m)	(((m) & _S_IFMT) == _S_IFBLK)
#define	_S_ISREG(m)	(((m) & _S_IFMT) == _S_IFREG)

#ifndef _NO_OLDNAMES

#define	S_IFIFO		_S_IFIFO
#define	S_IFCHR		_S_IFCHR
#define	S_IFBLK		_S_IFBLK
#define	S_IFDIR		_S_IFDIR
#define	S_IFREG		_S_IFREG
#define	S_IFMT		_S_IFMT
#define	S_IEXEC		_S_IEXEC
#define	S_IWRITE	_S_IWRITE
#define	S_IREAD		_S_IREAD
#define	S_IRWXU		_S_IRWXU
#define	S_IXUSR		_S_IXUSR
#define	S_IWUSR		_S_IWUSR
#define	S_IRUSR		_S_IRUSR

#define	S_ISDIR(m)	(((m) & S_IFMT) == S_IFDIR)
#define	S_ISFIFO(m)	(((m) & S_IFMT) == S_IFIFO)
#define	S_ISCHR(m)	(((m) & S_IFMT) == S_IFCHR)
#define	S_ISBLK(m)	(((m) & S_IFMT) == S_IFBLK)
#define	S_ISREG(m)	(((m) & S_IFMT) == S_IFREG)

#endif	/* Not _NO_OLDNAMES */

#ifndef RC_INVOKED

#ifndef _STAT_DEFINED
/*
 * The structure manipulated and returned by stat and fstat.
 *
 * NOTE: If called on a directory the values in the time fields are not only
 * invalid, they will cause localtime et. al. to return NULL. And calling
 * asctime with a NULL pointer causes an Invalid Page Fault. So watch it!
 */
struct _stat
{
	_dev_t	st_dev;		/* Equivalent to drive number 0=A 1=B ... */
	_ino_t	st_ino;		/* Always zero ? */
	_mode_t	st_mode;	/* See above constants */
	short	st_nlink;	/* Number of links. */
	short	st_uid;		/* User: Maybe significant on NT ? */
	short	st_gid;		/* Group: Ditto */
	_dev_t	st_rdev;	/* Seems useless (not even filled in) */
	_off_t	st_size;	/* File size in bytes */
	time_t	st_atime;	/* Accessed date (always 00:00 hrs local
				 * on FAT) */
	time_t	st_mtime;	/* Modified time */
	time_t	st_ctime;	/* Creation time */
};

#ifndef	_NO_OLDNAMES
/* NOTE: Must be the same as _stat above. */
struct stat
{
	dev_t	st_dev;		/* Equivalent to drive number 0=A 1=B ... */
	ino_t	st_ino;		/* Always zero ? */
	mode_t	st_mode;	/* See above constants */
	short	st_nlink;	/* Number of links. */
	short	st_uid;		/* User: Maybe significant on NT ? */
	short	st_gid;		/* Group: Ditto */
	dev_t	st_rdev;	/* Seems useless (not even filled in) */
	off_t	st_size;	/* File size in bytes */
	time_t	st_atime;	/* Accessed date (always 00:00 hrs local
				 * on FAT) */
	time_t	st_mtime;	/* Modified time */
	time_t	st_ctime;	/* Creation time */
};
#endif /* _NO_OLDNAMES */

#if defined (__MSVCRT__)
struct _stati64 {
    _dev_t st_dev;
    _ino_t st_ino;
    _mode_t st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __int64 st_size;
    time_t st_atime;
    time_t st_mtime;
    time_t st_ctime;
};
#if __MSVCRT_VERSION__ >= 0x0601
struct __stat64
{
    _dev_t st_dev;
    _ino_t st_ino;
    _mode_t st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __int64 st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
};
#endif /* __MSVCRT_VERSION__ >= 0x0601 */
#if __MSVCRT_VERSION__ >= 0x0800
struct __stat32
{
	_dev_t		st_dev;
	_ino_t		st_ino;
	_mode_t		st_mode;
	short		st_nlink;
	short		st_uid;
	short		st_gid;
	_dev_t		st_rdev;
	__int32		st_size;
	__time32_t	st_atime;
	__time32_t	st_mtime;
	__time32_t	st_ctime;
};
struct _stat32i64 {
	_dev_t		st_dev;
	_ino_t		st_ino;
	_mode_t		st_mode;
	short		st_nlink;
	short		st_uid;
	short		st_gid;
	_dev_t		st_rdev;
	__int64		st_size;
	__time32_t	st_atime;
	__time32_t	st_mtime;
	__time32_t	st_ctime;
};
struct _stat64i32 {
	_dev_t		st_dev;
	_ino_t		st_ino;
	_mode_t		st_mode;
	short		st_nlink;
	short		st_uid;
	short		st_gid;
	_dev_t		st_rdev;
	__int32		st_size;
	__time64_t	st_atime;
	__time64_t	st_mtime;
	__time64_t	st_ctime;
};
#endif /* __MSVCRT_VERSION__ >= 0x0800 */
#endif /* __MSVCRT__ */
#define _STAT_DEFINED
#endif /* _STAT_DEFINED */

#ifdef	__cplusplus
extern "C" {
#endif

#if __MSVCRT_VERSION__ < 0x0800
_CRTIMP int __cdecl __MINGW_NOTHROW	_fstat (int, struct _stat*);
#endif
_CRTIMP int __cdecl __MINGW_NOTHROW	_chmod (const char*, int);
#if __MSVCRT_VERSION__ < 0x0800
_CRTIMP int __cdecl __MINGW_NOTHROW	_stat (const char*, struct _stat*);
#endif

#ifndef	_NO_OLDNAMES
/* FIXME for __MSVCRT_VERSION__ >= 0x0800 */
/* These functions live in liboldnames.a. */
_CRTIMP int __cdecl __MINGW_NOTHROW	fstat (int, struct stat*);
_CRTIMP int __cdecl __MINGW_NOTHROW	chmod (const char*, int);
_CRTIMP int __cdecl __MINGW_NOTHROW	stat (const char*, struct stat*);

#endif	/* Not _NO_OLDNAMES */

#if defined (__MSVCRT__)
#if __MSVCRT_VERSION__ < 0x0800
_CRTIMP int __cdecl __MINGW_NOTHROW  _fstati64(int, struct _stati64 *);
_CRTIMP int __cdecl __MINGW_NOTHROW  _stati64(const char *, struct _stati64 *);
#endif
/* These require newer versions of msvcrt.dll (6.10 or higher).  */ 
#if __MSVCRT_VERSION__ >= 0x0601
_CRTIMP int __cdecl __MINGW_NOTHROW _fstat64 (int, struct __stat64*);
_CRTIMP int __cdecl __MINGW_NOTHROW _stat64 (const char*, struct __stat64*);
#endif /* __MSVCRT_VERSION__ >= 0x0601 */
#if __MSVCRT_VERSION__ >= 0x0800
_CRTIMP int __cdecl __MINGW_NOTHROW	_fstat32 (int, struct __stat32*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_stat32 (const char*, struct __stat32*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_fstat32i64 (int, struct _stat32i64*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_fstat64i32 (int, struct _stat64i32*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_stat32i64 (const char*, struct _stat32i64*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_stat64i32 (const char*, struct _stat64i32*);
#ifndef _USE_32BIT_TIME_T
_CRTALIAS int __cdecl __MINGW_NOTHROW	_fstat (int _v1, struct _stat* _v2)		 { return(_fstat64i32 (_v1,(struct _stat64i32*)_v2)); }
_CRTALIAS int __cdecl __MINGW_NOTHROW	_stat (const char* _v1, struct _stat* _v2)	 { return(_stat64i32  (_v1,(struct _stat64i32*)_v2)); }
_CRTALIAS int __cdecl __MINGW_NOTHROW	_fstati64 (int _v1, struct _stati64* _v2)	 { return(_fstat64 (_v1,(struct __stat64*)_v2)); }
_CRTALIAS int __cdecl __MINGW_NOTHROW	_stati64 (const char* _v1, struct _stati64* _v2) { return(_stat64  (_v1,(struct __stat64*)_v2)); }
#else
_CRTALIAS int __cdecl __MINGW_NOTHROW	_fstat (int _v1, struct _stat* _v2)		 { return(_fstat32 (_v1,(struct __stat32*)_v2)); }
_CRTALIAS int __cdecl __MINGW_NOTHROW	_stat (const char* _v1, struct _stat* _v2)	 { return(_stat32  (_v1,(struct __stat32*)_v2)); }
_CRTALIAS int __cdecl __MINGW_NOTHROW	_fstati64 (int _v1, struct _stati64* _v2)	 { return(_fstat32i64 (_v1,(struct _stat32i64*)_v2)); }
_CRTALIAS int __cdecl __MINGW_NOTHROW	_stati64 (const char* _v1, struct _stati64* _v2) { return(_stat32i64  (_v1,(struct _stat32i64*)_v2)); }
#endif /* !_USE_32BIT_TIME_T */
#endif /* __MSVCRT_VERSION__ >= 0x0800 */


#if !defined ( _WSTAT_DEFINED) /* also declared in wchar.h */
#if __MSVCRT_VERSION__ < 0x0800
_CRTIMP int __cdecl __MINGW_NOTHROW	_wstat(const wchar_t*, struct _stat*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wstati64 (const wchar_t*, struct _stati64*);
#endif
#if __MSVCRT_VERSION__ >= 0x0601
_CRTIMP int __cdecl __MINGW_NOTHROW _wstat64 (const wchar_t*, struct __stat64*);
#endif /* __MSVCRT_VERSION__ >= 0x0601 */
#if __MSVCRT_VERSION__ >= 0x0800
_CRTIMP int __cdecl __MINGW_NOTHROW	_wstat32 (const wchar_t*, struct __stat32*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wstat32i64 (const wchar_t*, struct _stat32i64*);
_CRTIMP int __cdecl __MINGW_NOTHROW	_wstat64i32 (const wchar_t*, struct _stat64i32*);
#ifndef _USE_32BIT_TIME_T
_CRTALIAS int __cdecl __MINGW_NOTHROW	_wstat (const wchar_t* _v1, struct _stat* _v2)	     { return(_wstat64i32 (_v1,(struct _stat64i32*)_v2)); }
_CRTALIAS int __cdecl __MINGW_NOTHROW	_wstati64 (const wchar_t* _v1, struct _stati64* _v2) { return(_wstat64 (_v1,(struct __stat64*)_v2)); }
#else
_CRTALIAS int __cdecl __MINGW_NOTHROW	_wstat (const wchar_t* _v1, struct _stat* _v2)	     { return(_wstat32 (_v1,(struct __stat32*)_v2)); }
_CRTALIAS int __cdecl __MINGW_NOTHROW	_wstati64 (const wchar_t* _v1, struct _stati64* _v2) { return(_wstat32i64 (_v1,(struct _stat32i64*)_v2)); }
#endif /* !_USE_32BIT_TIME_T */
#endif /* __MSVCRT_VERSION__ >= 0x0800 */
#define _WSTAT_DEFINED
#endif /* _WSTAT_DEFIND */
#endif /* __MSVCRT__ */

#ifdef	__cplusplus
}
#endif

#endif	/* Not RC_INVOKED */

#endif	/* Not _STAT_H_ */
@


1.18
log
@2010-02-14  Roumen Petrov  <rumen@@users.sourceforge.net>

        Issue [2134161]: time64 functions and types for msvcrt >= 8.0
        (initial implementation)

        * new type: __time32_t

        * new structures: _finddata32_t, _finddata32i64_t, _finddata64i32_t,
        __stat32, _stat32i64, _stat64i32, __timeb32, __utimbuf32,
        __wfinddata32_t, _wfinddata32i64_t, _wfinddata64i32_t

        * new functions: _ctime32, _difftime32, _difftime64, _findfirst32
        _findfirst32i64, _findfirst64i32, _findnext32, _findnext32i64,
        _findnext64i32, _fstat32, _fstat32i64, _fstat64i32, _ftime32,
        _futime32, _gmtime32, _localtime32, _mkgmtime32, _mkgmtime64,
        _mktime32, _stat32, _stat32i64, _stat64i32, _time32, _utime32,
        _wctime32, _wfindfirst32, _wfindfirst32i64, _wfindfirst64i32,
        _wfindnext32, _wfindnext32i64, _wfindnext64i32, _wstat32,
        _wstat32i64, _wstat64i32,_wutime32

        * new define _USE_32BIT_TIME_T set 32 or 64 aliases for: time_t,
        ctime, difftime, _findfirst, _findfirsti64, _findnext, _findnexti64,
        _fstat, _fstati64, _ftime, _futime, gmtime, localtime, mktime,
        _stat, _stati64, time, _utime, _wctime, _wfindfirst, _wfindfirsti64,
        _wfindnext, _wfindnexti64, _wstat, _wstati64, _wutime
@
text
@@


1.17
log
@2007-10-03  Bernd Becker <hugin@@users.sourceforge.net>

        * include/io.h (__finddata64_t, __wfinddata64_t): changed member 'size'
        from '_fsize_t' to '__int64' to be consistent with the other ...64
        structures and the value set there is 8 bytes not 4.  Add guard for both
        as the are only used by functions available from 6.1 on.

        * include/malloc.h (_HEAP_MAXREQ): Define.
        (_aligned_offset_recalloc): Define.
        (_aligned_recalloc()): Define.

        * include/math.h: fixed a typo in a comment.
        (atanhf): Fixed declaration.

        * include/wchar.h (__wfinddata64_t): changed member 'size' from '_fsize_t'
        to '__int64' to be consistent with the other ...64 structures and the value
        set there is 8 bytes not 4.  Added guard as this function is only used by
        functions available from 6.1 on.

        * include/sys/stat.h: some members of 'stat' were declared with types with
        a prefixed underscore, while the ones without the underscore should have
        been used.  Added guard to '__stat64' as it is only used by functions
        available from 6.1 on.  Added the wide character versions of the
        exec()/spawn() family for completion
        (_stati64): changed the type of the 'st_mode' member from 'unsigned int' to
        '_mode_t'

        * include/sys/timeb.h (timeb, _timb): changed the type of the 'time' member
        from 'long' to 'time_t'
        (__timeb64): moved declaration of structure directly before the declaration
        of the function '_ftime64()', so it is guarded as well

        * include/sys/utime.h (__utimbuf64): moved declaration of structure directly
        before the declaration of the functions using it, so it is guarded as well
@
text
@d150 43
a192 1
#endif /* __MSVCRT_VERSION__ */
d201 1
d203 1
d205 1
d207 1
d210 1
a210 1

d219 1
d222 1
d228 21
d250 1
d253 1
d257 12
@


1.16
log
@	*include/assert.h:  Qualify all  functions with __MINGW_NOTHROW.
	*include/conio.h:  Likewise.
	*include/ctype.h:  Likewise.
	*include/direct.h:  Likewise.
	*include/dos.h:  Likewise.
	*include/errno.h:  Likewise.
	*include/fenv.h:  Likewise.
	*include/float.h:  Likewise.
	*include/inttypes.h:  Likewise.
	*include/io.h:  Likewise.
	*include/libgen.h:  Likewise.
	*include/locale.h:  Likewise.
	*include/malloc.h:  Likewise.
	*include/mbctype.h:  Likewise.
	*include/mbstring.h:  Likewise.
	*include/process.h:  Likewise.
	*include/search.h:  Likewise.
	*include/setjmp.h:  Likewise.
	*include/signal.h:  Likewise.
	*include/stdio.h:  Likewise.
	*include/stdlib.h:  Likewise.
	*include/string.h:  Likewise.
	*include/time.h:  Likewise.
	*include/wchar.h:  Likewise.
	*include/sys/stat.h:  Likewise.
	*include/sys/time.h:  Likewise.
	*include/sys/timeb.h:  Likewise.
	*include/sys/utime.h:  Likewise.
@
text
@d106 3
a108 3
	_dev_t	st_dev;		/* Equivalent to drive number 0=A 1=B ... */
	_ino_t	st_ino;		/* Always zero ? */
	_mode_t	st_mode;	/* See above constants */
d112 2
a113 2
	_dev_t	st_rdev;	/* Seems useless (not even filled in) */
	_off_t	st_size;	/* File size in bytes */
d125 1
a125 1
    unsigned short st_mode;
d135 1
a135 1

d150 1
@


1.15
log
@2005-02-07  Danny Smith  <dannysmith@@users.sourceforge.net>

	* include/sys/stat.h (struct stat): Guard with _NO_OLDNAMES.
	* include/wchar.h (struct stat): Likwwise.
	Bug reported to Debian by Anand Kumria  <wildfire@@progsoc.org>

	* include/sys/stat.h: Remove empty __STRICT_ANSI__ guard.
@
text
@d158 3
a160 3
_CRTIMP int __cdecl	_fstat (int, struct _stat*);
_CRTIMP int __cdecl	_chmod (const char*, int);
_CRTIMP int __cdecl	_stat (const char*, struct _stat*);
d165 3
a167 3
_CRTIMP int __cdecl	fstat (int, struct stat*);
_CRTIMP int __cdecl	chmod (const char*, int);
_CRTIMP int __cdecl	stat (const char*, struct stat*);
d172 2
a173 2
_CRTIMP int __cdecl  _fstati64(int, struct _stati64 *);
_CRTIMP int __cdecl  _stati64(const char *, struct _stati64 *);
d176 2
a177 2
_CRTIMP int __cdecl _fstat64 (int, struct __stat64*);
_CRTIMP int __cdecl _stat64 (const char*, struct __stat64*);
d180 2
a181 2
_CRTIMP int __cdecl	_wstat(const wchar_t*, struct _stat*);
_CRTIMP int __cdecl	_wstati64 (const wchar_t*, struct _stati64*);
d183 1
a183 1
_CRTIMP int __cdecl _wstat64 (const wchar_t*, struct __stat64*);
@


1.14
log
@	* include/sys/stat.h (struct __stat64): Change st_size type to
	 __int64.
	* include/wchar.h (struct __stat64): Change st_size type to __int64.
@
text
@a28 2
#ifndef __STRICT_ANSI__
#endif
d102 2
d119 1
@


1.13
log
@
	* include/sys/stat.h (_S_IFLNK, S_IFLNK, _S_ISLNK, S_ISLNK, _lstat,
	lstat): Remove.
	* include/errno.h (ELOOP): Ditto.
@
text
@d144 1
a144 1
    _off_t st_size;
@


1.12
log
@
	* include/sys/stat.h (_S_IFLNK, S_IFLNK, _S_ISLNK, S_ISLNK, _lstat,
	lstat): Conditionalize defines for __STRICT_ANSI__.
@
text
@a29 1
#define _S_IFLNK	0xF000  /* Pretend */
a52 3
#ifndef __STRICT_ANSI__
# define _S_ISLNK(m)	(((m) & _S_IFMT) == _S_IFLNK) /* Should always be zero.*/
#endif
a55 3
#ifndef __STRICT_ANSI__
#define S_IFLNK		_S_IFLNK
#endif
a74 3
#ifndef __STRICT_ANSI__
#define S_ISLNK(m)	(((m) & S_IFMT) == S_IFLNK) /* Should always be zero.*/
#endif
a159 9
/*
 * FIXME: Should we use something MinGW specific such as __NO_POSIX_EMULATION__
 * instead of __STRICT_ANSI__?  I.E.: Do other things break because of -ansi
 * being specified to the compiler?  Of particular interest is the ACE/TAO
 * project which the lstat define broke the build of.
 */
#ifndef __STRICT_ANSI__
#define _lstat _stat
#endif
a166 3
#ifndef __STRICT_ANSI__
#define lstat stat
#endif
@


1.11
log
@	* include/sys/stat.h: Make S_ISLNK comment comply with ISO C90.
@
text
@d29 1
d31 1
d54 3
a56 1
#define _S_ISLNK(m)	(((m) & _S_IFMT) == _S_IFLNK) /* Should always be zero.*/
d60 1
d62 1
d82 1
d84 1
d170 7
d178 1
d186 1
d188 1
@


1.10
log
@
	* include/sys/stat.h (_S_IFLNK): Add definition.
	(S_IFLNK) Ditto.
	(_lstat) Ditto.
	(lstat) Ditto.
	(_S_ISLNK) Recode.
	(S_ISLNK) Ditto.
@
text
@d52 1
a52 1
#define _S_ISLNK(m)	(((m) & _S_IFMT) == _S_IFLNK) // Should always be zero.
d76 1
a76 1
#define S_ISLNK(m)	(((m) & S_IFMT) == S_IFLNK) // Should always be zero.
@


1.9
log
@
	* include/sys/stat.h (_S_ISLNK): Add definition.
	(S_ISLNG): Ditto.
@
text
@d29 1
d52 1
a52 1
#define _S_ISLNK(m)	(false)
d56 1
d76 1
a76 1
#define S_ISLNK(m)	(false)
d162 1
d170 1
@


1.8
log
@
	* CONTRIBUTORS: New file.
	* DISCLAIMER: Ditto.
	* CRT_noglob.c: Reword copyright and disclaimer.  Move Contributors
	section CONTRIBUTORS file.  Remove RCS tags.
	* CRTFmode.c: Ditto.
	* CRTglob.c: Ditto.
	* CRTinit.c: Ditto.
	* crt1.c: Ditto.
	* crtdll.dev: Ditto.
	* dllcrt1.c: Ditto.
	* dllmain.c: Ditto.
	* gccmain.c: Ditto.
	* init.c: Ditto.
	* isascii.c: Ditto.
	* iscsym.c: Ditto.
	* iscsymf.c: Ditto.
	* jamfile: Ditto.
	* main.c: Ditto.
	* msvcrt.def.in: Ditto.
	* strcasecmp.c: Ditto.
	* toascii.c: Ditto.
	* wcscmpi.c: Ditto.
	* include/assert.h: Ditto.
	* include/conio.h: Ditto.
	* include/ctype.h: Ditto.
	* include/direct.h: Ditto.
	* include/dirent.h: Ditto.
	* include/dos.h: Ditto.
	* include/errno.h: Ditto.
	* include/excpt.h: Ditto.
	* include/fcntl.h: Ditto.
	* include/float.h: Ditto.
	* include/io.h: Ditto.
	* include/locale.h: Ditto.
	* include/malloc.h: Ditto.
	* include/math.h: Ditto.
	* include/process.h: Ditto.
	* include/setjmp.h: Ditto.
	* include/share.h: Ditto.
	* include/signal.h: Ditto.
	* include/stdio.h: Ditto.
	* include/stdlib.h: Ditto.
	* include/string.h: Ditto.
	* include/tchar.h: Ditto.
	* include/time.h: Ditto.
	* include/wchar.h: Ditto.
	* include/sys/locking.h: Ditto.
	* include/sys/param.h: Ditto.
	* include/sys/stat.h: Ditto.
	* include/sys/timeb.h: Ditto.
	* include/sys/types.h: Ditto.
	* include/sys/utime.h: Ditto.
	* mingwex/dirent.c: Ditto.
@
text
@d51 1
d74 1
@


1.7
log
@	Add prototypes for new msvcrt.dll versions

	* include/_mingw.h (__MSVCRT_VERSION__): Define default as 0x0600.

	* include/time.h (__time64_t): Add typedef.
	(_mktime64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.
	(_ctime64): Likewise.
	(_wctime64): Likewise.
	(_gmtime64): Likewise.
	(_localtime64): Likewise.
	(wcsftime): Move into _WTIME_DEFINED block.
	Regroup non-ANSI prototypes.

	* include/io.h: Include <stdint.h>.
	(__finddata64_t): Add struct definition.
	(__wfinddata64_t): Likewise.
	(_findfirst64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.
	(_findnext64): Likewise.
	(_wfindfirst64): Likewise.
	(_wfindnext64): Likewise.

	* include/sys/timeb.h (__timeb64): Add struct definition.
	(_ftime64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.

	* include/sys/utime.h (__utimbuf64): Add struct definition.
	(_utime64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.
	(_futime64): Likewise.
	(_wutime64): Likewise.

	* include/sys/stat.h (__stat64):  Add struct definition.
	(_fstat64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.
	(_stat64): Likewise.
	(_wstat64): Likwise.

	* include/sys/types.h (__time64_t):  Add typedef.

	* include/wchar.h (__wfinddata64_t): Add structure definition.
	(__stat64): Likewise.
	(_wctime64): Add prototype for __MSVCRT_VERSION__ >= 0x0601.
	(_wfindfirst64): Likewise.
	(_wfindnext64): Likewise.
	(_wutime64): Likewise.
	(_wstat64): Likwise.

	* include/malloc.h (_aligned_free): Add prototype for
	__MSVCRT_VERSION__ >= 0x0700.
	(_aligned_malloc): Likewise.
	(_aligned_offset_malloc): Likewise.
	(_aligned_offset_realloc): Likewise.
	(_aligned_realloc): Likewise.

	* include/string.h (_wcserror): Add prototype for
	__MSVCRT_VERSION__ >= 0x0700.
	(__wcserror): Likewise.

	* include/math.h (_set_SSE2_enable): Add prototype for
	__MSVCRT_VERSION__ >= 0x0701.
@
text
@d3 3
a8 19
 *
 * This file is part of the Mingw32 package.
 *
 * Contributors:
 *  Created by Colin Peters <colin@@bird.fu.is.saga-u.ac.jp>
 *
 *  THIS SOFTWARE IS NOT COPYRIGHTED
 *
 *  This source code is offered for use in the public domain. You may
 *  use, modify or distribute it freely.
 *
 *  This code is distributed in the hope that it will be useful but
 *  WITHOUT ANY WARRANTY. ALL WARRANTIES, EXPRESS OR IMPLIED ARE HEREBY
 *  DISCLAIMED. This includes but is not limited to warranties of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * $Revision: 1.4 $
 * $Author: dannysmith $
 * $Date: 2001/11/29 04:26:33 $
@


1.6
log
@	* include/conio.h: Remove __STRICT_ANSI__ guard from non-ANSI header.
	* include/direct.h:  Ditto.
	* include/dirent.h:  Ditto.
	* include/dos.h:  Ditto.
	* include/excpt.h:  Ditto.
	* inlude/fcntl,h
	* include/io.h:  Ditto.
	* inlude/mem.h:  Ditto.
	* include/memory.h:  Ditto.
	* include/process.h:  Ditto.
	* inlude/search.h:  Ditto.
	* include/share.h:  Ditto.
	* include/unistd.h:  Ditto.
	* include/sys/fcntl.h:  Ditto.
	* include/file.h:  Ditto.
	* include/sys/locking.h:  Ditto.
	* include/sys/param.h:  Ditto.
	* include/sys/stat,h
	* include/sys/time.h:  Ditto.
	* include/sys/timeb.h:  Ditto.
	* include/sys/types.h:  Ditto.
	* include/sys/unistd.h:  Ditto.
	* include/sys/utime.h:  Ditto.
@
text
@d133 1
d148 15
d175 9
d187 5
d195 3
a200 10

#ifndef	_NO_OLDNAMES

/* These functions live in liboldnames.a. */
_CRTIMP int __cdecl	fstat (int, struct stat*);
_CRTIMP int __cdecl	chmod (const char*, int);
_CRTIMP int __cdecl	stat (const char*, struct stat*);

#endif	/* Not _NO_OLDNAMES */

@


1.5
log
@	* include/_mingw.h (_CRTIMP): Define for __GNUC__ if
	__declspec(dllimport)  supported.
	(__cdecl): Define if not already defined.
	(__stdcall): Likewise.
	* include/dirent.h: Qualify fuctions with __cdecl.
	* include/fenv.h: Likewise.
	* include/inttypes.h: Likewise.
	* include/assert.h: Qualify fuctions with __cdecl. Qualify
	CRT dll imports with _CRTIMP.
	* include/conio.h: Likewise.
	* include/ctype.h: Likewise.
	* include/direct.h: Likewise.
	* include/dos.h: Likewise.
	* include/errno.h: Likewise.
	* include/float.h: Likewise.
	* include/io.h: Likewise.
	* include/locale.h: Likewise.
	* include/malloc.h: Likewise.
	* include/math.h: Likewise.
	* include/mbctype.h: Likewise.
	* include/mbstring.h: Likewise.
	* include/process.h: Likewise.
	* include/setjmp.h: Likewise.
	* include/signal.h: Likewise.
	* include/stdio.h: Likewise.
	* include/stdlib.h: Likewise.
	* include/string.h: Likewise.
	* include/time.h: Likewise.
	* include/wchar.h: Likewise.
	* include/wctype.h: Likewise.
	* include/sys/stat.h: Likewise.
	* include/sys/timeb.h: Likewise.
	* include/sys/utime.h: Likewise.

	* include/ctype.h: Guard ctype inlines with __NO_INLINE__.
	* include/wctype.h: Guard wctype inlines with __NO_INLINE__.

	* include/stdio.h (__VALIST): Guard against prior definition.
@
text
@a27 2
#ifndef __STRICT_ANSI__

a185 3

#endif	/* Not __STRICT_ANSI__ */

@


1.4
log
@Merge MinGW CVS differences
@
text
@d157 3
a159 3
int	_fstat (int, struct _stat*);
int	_chmod (const char*, int);
int	_stat (const char*, struct _stat*);
d162 2
a163 2
int  _fstati64(int, struct _stati64 *);
int  _stati64(const char *, struct _stati64 *);
d165 2
a166 2
int	_wstat(const wchar_t*, struct _stat*);
int	_wstati64 (const wchar_t*, struct _stati64*);
d174 3
a176 3
int	fstat (int, struct stat*);
int	chmod (const char*, int);
int	stat (const char*, struct stat*);
@


1.4.16.1
log
@	* include/settjmp.h: Use C++ c-header compatibility defines.
	* include/time.h: Don't include non-ISO sys/types.h.
	(struct tm): Define in __CSTD, if not already done.
	(_wasctime): Qualify tm with __CSTD.
	(_wctime): Qualify time_t with __CSTD.
	* include/wchar.h (ctype.h): Don't #include.
	(stdio.h): Don't #include.
	(time.h): Don't #include.
	(wctype.h): Include in C, but not in C++ in ANSI mode.
	(time_t): Define in __CSTD, if not already done. Qualify
	with __CSTD throughout.
	(struct tm): Likewise.
	(FILENAME_MAX): Replace with numeric constant throughout.
	Whitespace.
	* include/io.h (stdio.h): Don't #include.
	(time_t): Define in __CSTD, if not already done. Qualify
	with __CSTD throughout.
	(FILENAME_MAX): Replace with numeric constant throughout.
	Consolidate RC_INVOKED. __cplusplus blocks.
 	* include/dir.h: Add header guard.
	* include/sys/time.h: Add header guard.
	* include/sys/types.h (time_t): Define in __CSTD.
	* include/sys/utime.h (_utimbuf, utimbuf): Qualify
	time_t with __CSTD.

	Correct spelling of compatibility in ChangeLog.
@
text
@d114 4
a117 4
	__CSTD time_t	st_atime;	/* Accessed date (always 00:00 hrs local
					 * on FAT) */
	__CSTD time_t	st_mtime;	/* Modified time */
	__CSTD time_t	st_ctime;	/* Creation time */
d130 4
a133 4
	__CSTD time_t	st_atime;	/* Accessed date (always 00:00 hrs local
					 * on FAT) */
	__CSTD time_t	st_mtime;	/* Modified time */
	__CSTD time_t	st_ctime;	/* Creation time */
d145 3
a147 3
    __CSTD time_t st_atime;
    __CSTD time_t st_mtime;
    __CSTD time_t st_ctime;
@


1.4.16.2
log
@	Merge from mingw trunk (changes since 2003-01-27).
@
text
@d157 3
a159 3
_CRTIMP int __cdecl	_fstat (int, struct _stat*);
_CRTIMP int __cdecl	_chmod (const char*, int);
_CRTIMP int __cdecl	_stat (const char*, struct _stat*);
d162 2
a163 2
_CRTIMP int __cdecl  _fstati64(int, struct _stati64 *);
_CRTIMP int __cdecl  _stati64(const char *, struct _stati64 *);
d165 2
a166 2
_CRTIMP int __cdecl	_wstat(const wchar_t*, struct _stat*);
_CRTIMP int __cdecl	_wstati64 (const wchar_t*, struct _stati64*);
d174 3
a176 3
_CRTIMP int __cdecl	fstat (int, struct stat*);
_CRTIMP int __cdecl	chmod (const char*, int);
_CRTIMP int __cdecl	stat (const char*, struct stat*);
@


1.3
log
@
2001-10-30  Danny Smith  <dannysmith@@users.sourceforge.net>

	* include/io.h (_commit): Add declaration.
	Thanks to: "stefan" <stefan@@lkcc.org>

2001-10-30  Danny Smith  <dannysmith@@users.sourceforge.net>

	* include/sys/stat.h: Make S_IS* macros safer.

2001-10-27  Danny Smith  <dannysmith@@users.sourceforge.net>

	* include/stdlib.h (EXIT_FAILURE): Change value to 1.

2001-10-12  Danny Smith  <dannysmith@@users.sourceforge.net>

	* include/stdlib.h (__p__environ, __p__wenviron): Use
	__STDC__ prototypes.
@
text
@d19 1
a19 1
 *  DISCLAMED. This includes but is not limited to warranties of
d22 3
a24 3
 * $Revision: 1.5 $
 * $Author: cgf $
 * $Date: 2000/02/05 04:05:01 $
@


1.2
log
@
	* include/direct.h: add guard around MSVCRT-only prototytpes
	* include/io.h: add __int64 struct definitions and function prototypes;
		 add guard for MSVCRT-only prototypes
	* include/limits.h: add ISO C9x macros LLONG_MIN, LLONG_MAX, ULLONG_MAX
	* include/stdio.h: add wchar function prototypes (__MSVCRT__);
		 put wchar functions together to make sync with wchar.h easier
	* include/stdlib.h: add wide char functions (__MSVCRT__)
	* include/string.h: add string collation functions ( __MSVCRT__)
	* include/sys/stat.h: add __int64 struct and function ( __MSVCRT__)
	* include/tchar.h: add macros and macro function definitions
	* include/wchar.h: add wide char function prototypes ( __MSVCRT__ );
		enclose more functions in __MSVCRT__ guard;
		some oldname wide char function prototypes #if (0)'d
	* profile/gmon.h: add guard around BSD-ish typedefs
@
text
@d49 1
a49 1
#define	_S_IFBLK	0x3000	/* Block */
d64 5
a68 5
#define	_S_ISDIR(m)	((m) & _S_IFDIR)
#define	_S_ISFIFO(m)	((m) & _S_IFIFO)
#define	_S_ISCHR(m)	((m) & _S_IFCHR)
#define	_S_ISBLK(m)	((m) & _S_IFBLK)
#define	_S_ISREG(m)	((m) & _S_IFREG)
d86 5
a90 5
#define	S_ISDIR(m)	((m) & S_IFDIR)
#define	S_ISFIFO(m)	((m) & S_IFIFO)
#define	S_ISCHR(m)	((m) & S_IFCHR)
#define	S_ISBLK(m)	((m) & S_IFBLK)
#define	S_ISREG(m)	((m) & S_IFREG)
@


1.1
log
@Initial revision
@
text
@d135 15
a149 1

d161 4
a164 4
#ifndef _WSTAT_DEFINED

/* also declared in wchar.h */

d166 1
a166 1

d169 1
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
