head	1.7;
access;
symbols
	cygwin-64bit-postmerge:1.6
	cygwin-64bit-premerge-branch:1.6.0.6
	cygwin-64bit-premerge:1.6
	cygwin-1_7_18-release:1.6
	cygwin-1_7_17-release:1.6
	cygwin-64bit-branch:1.6.0.4
	cygwin-1_7_16-release:1.6
	cygwin-1_7_15-release:1.6
	cygwin-1_7_14_2-release:1.6
	cygwin-1_7_14-release:1.6
	cygwin-1_7_12-release:1.6
	cygwin-1_7_11-release:1.6
	cygwin-1_7_10-release:1.6
	cygwin-1_7_9-release:1.6
	cygwin-1_7_8-release:1.6
	cygwin-1_7_7-release:1.6
	cygwin-1_7_5-release:1.6
	cygwin-1_7_4-release:1.6
	cygwin-1_7_3-release:1.6
	cygwin-1_7_2-release:1.6
	cygwin-1_7_1-release:1.6
	cv-branch-2:1.6.0.2
	cr-0x5f1:1.4.0.6
	cv-branch:1.4.0.4
	cr-0x3b58:1.4.0.2
	cr-0x9e:1.3.0.10
	cr-0x9d:1.3.0.8
	corinna-01:1.3
	cr-0x9c:1.3.0.6
	cr-0x9b:1.3.0.4
	cr-0x99:1.3
	Z-emcb-cygwin_daemon:1.3.0.2
	w32api-2_2:1.2
	mingw-runtime-2_4:1.2
	cygnus_cvs_20020108_pre:1.2
	Z-cygwin_daemon_merge-new_HEAD:1.1.1.1
	Z-cygwin_daemon_merge_HEAD:1.1.1.1
	cygwin_daemon:1.1.1.1.0.10;
locks; strict;
comment	@# @;
expand	@o@;


1.7
date	2013.05.01.23.30.22;	author tangent;	state dead;
branches;
next	1.6;

1.6
date	2008.12.15.09.37.50;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2008.07.17.11.49.45;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.24.08.08.13;	author joshuadfranklin;	state Exp;
branches;
next	1.3;

1.3
date	2003.04.26.14.10.59;	author joshuadfranklin;	state Exp;
branches;
next	1.2;

1.2
date	2001.12.04.04.20.30;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Modernized user guide, API reference, and FAQ generation.  Overall
effect is to move away from DocBook SGML and DJ Delorie's doctool and
toward pure DocBook XSL.  (There remains just one use of doctool, and
we have plans for replacing it, too.)  See ChangeLog for details.
@
text
@<sect1 id="gcc"><title>Using GCC with Cygwin</title>

<sect2 id="gcc-cons"><title>Console Mode Applications</title>

<para>Use gcc to compile, just like under UNIX.
Refer to the GCC User's Guide for information on standard usage and
options.  Here's a simple example:</para>

<example id="gcc-hello-world">
<title>Building Hello World with GCC</title>
<screen>
<prompt>bash$</prompt> <userinput>gcc hello.c -o hello.exe</userinput>
<prompt>bash$</prompt> <userinput>hello.exe</userinput>
Hello, World

<prompt>bash$</prompt>
</screen>
</example>

</sect2>

<sect2 id="gcc-gui"><title>GUI Mode Applications</title>

<para>Cygwin allows you to build programs with full access to the
standard Windows 32-bit API, including the GUI functions as defined in
any Microsoft or off-the-shelf publication.  However, the process of
building those applications is slightly different, as you'll be using
the GNU tools instead of the Microsoft tools.</para>

<para>For the most part, your sources won't need to change at all.
However, you should remove all __export attributes from functions
and replace them like this:</para>

<screen>
int foo (int) __attribute__ ((__dllexport__));

int
foo (int i)
</screen>

<para>The Makefile is similar to any other UNIX-like Makefile,
and like any other Cygwin makefile.  The only difference is that you use
<command>gcc -mwindows</command> to link your program into a GUI
application instead of a command-line application.  Here's an example:</para>

<screen>
<![CDATA[
myapp.exe : myapp.o myapp.res
	gcc -mwindows myapp.o myapp.res -o $@@

myapp.res : myapp.rc resource.h
	windres $< -O coff -o $@@
]]>
</screen>

<para>Note the use of <filename>windres</filename> to compile the
Windows resources into a COFF-format <filename>.res</filename> file.
That will include all the bitmaps, icons, and other resources you
need, into one handy object file.  Normally, if you omitted the "-O
coff" it would create a Windows <filename>.res</filename> format file,
but we can only link COFF objects.  So, we tell
<filename>windres</filename> to produce a COFF object, but for
compatibility with the many examples that assume your linker can
handle Windows resource files directly, we maintain the
<filename>.res</filename> naming convention.  For more information on
<filename>windres</filename>, consult the Binutils manual.  </para>

<para>
The following is a simple GUI-mode "Hello, World!" program to help
get you started:
<screen>
/*-------------------------------------------------*/
/* hellogui.c - gui hello world                    */
/* build: gcc -mwindows hellogui.c -o hellogui.exe */
/*-------------------------------------------------*/
#include &lt;windows.h&gt;

char glpszText[1024];

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);

int APIENTRY WinMain(HINSTANCE hInstance, 
		HINSTANCE hPrevInstance,
		LPSTR lpCmdLine,
		int nCmdShow)
{
	sprintf(glpszText, 
		"Hello World\nGetCommandLine(): [%s]\n"
		"WinMain lpCmdLine: [%s]\n",
		lpCmdLine, GetCommandLine() );

	WNDCLASSEX wcex; 
 
	wcex.cbSize = sizeof(wcex);
	wcex.style = CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc = WndProc;
	wcex.cbClsExtra = 0;
	wcex.cbWndExtra = 0;
	wcex.hInstance = hInstance;
	wcex.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wcex.hCursor = LoadCursor(NULL, IDC_ARROW);
	wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW+1);
	wcex.lpszMenuName = NULL;
	wcex.lpszClassName = "HELLO";
	wcex.hIconSm = NULL;

	if (!RegisterClassEx(&amp;wcex))
		return FALSE; 

	HWND hWnd;
	hWnd = CreateWindow("HELLO", "Hello", WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, NULL, NULL, hInstance, NULL);

	if (!hWnd)
		return FALSE;

	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);

	MSG msg;
	while (GetMessage(&amp;msg, NULL, 0, 0)) 
	{
		TranslateMessage(&amp;msg);
		DispatchMessage(&amp;msg);
	}

	return msg.wParam;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	PAINTSTRUCT ps;
	HDC hdc;
	
	switch (message) 
	{
		case WM_PAINT:
			hdc = BeginPaint(hWnd, &amp;ps);
			RECT rt;
			GetClientRect(hWnd, &amp;rt);
			DrawText(hdc, glpszText, strlen(glpszText), &amp;rt, DT_TOP | DT_LEFT);
			EndPaint(hWnd, &amp;ps);
			break;
		case WM_DESTROY:
			PostQuitMessage(0);
			break;
		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
	}
	return 0;
}
</screen>
</para>

</sect2>
</sect1>
@


1.6
log
@	* gcc.sgml: Use 'bash$' as Cygwin prompt throughout.
	* gdb.sgml: Ditto.
	* pathnames.sgml: Ditto.  Fix the @@ expansion example.
@
text
@@


1.5
log
@	* Revamp documentation for Cygwin 1.7, part 1.
@
text
@d12 2
a13 2
<prompt>C:\&gt;</prompt> <userinput>gcc hello.c -o hello.exe</userinput>
<prompt>C:\&gt;</prompt> <userinput>hello.exe</userinput>
d16 1
a16 1
<prompt>C:\&gt;</prompt>
@


1.4
log
@
2004-01-24  Joshua Daniel Franklin  <joshuadfranklin@@yahoo.com>
	* cygwinenv.sgml: Cleanup minor markup problems.
	* dll.sgml: Cleanup minor markup problems.
	* effectively.sgml: Cleanup minor markup problems.
	* gcc.sgml: Cleanup minor markup problems.
	* ntsec.sgml: Cleanup minor markup problems.
	* pathnames.sgml: Cleanup minor markup problems.
	* setup-net.sgml: Cleanup minor markup problems.
	* textbinary.sgml: Cleanup minor markup problems.
	* windres.sgml: Cleanup minor markup problems.
@
text
@d9 1
a9 1
<example>
@


1.3
log
@* gcc.sgml: Remove outdated "WinMainCRTStartup" references. Add a hellogui.c example
@
text
@d47 1
d53 1
@


1.2
log
@Cleanup copyrights and Cygnus'isms throughout.
* setup.sgml: Nuke ancient instructions.
@
text
@a40 11
<para>For most cases, you can just remove the __export and leave it at
that.  For convenience sake, you might want to include the following
code snippet when compiling GUI programs.  If you don't, you will want
to add "-e _mainCRTStartup" to your link line in your Makefile.</para>

<screen>
#ifdef __CYGWIN__
WinMainCRTStartup() { mainCRTStartup(); }
#endif
</screen>

d65 87
@


1.1
log
@Initial revision
@
text
@d12 2
a13 2
<prompt>C:\cygnus\&gt;</prompt> <userinput>gcc hello.c -o hello.exe</userinput>
<prompt>C:\cygnus\&gt;</prompt> <userinput>hello.exe</userinput>
d16 1
a16 1
<prompt>C:\cygnus\&gt;</prompt>
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
