head	1.16;
access;
symbols
	cygwin-64bit-postmerge:1.15
	cygwin-64bit-premerge-branch:1.15.0.4
	cygwin-64bit-premerge:1.15
	cygwin-1_7_18-release:1.15
	cygwin-1_7_17-release:1.15
	cygwin-64bit-branch:1.15.0.2
	cygwin-1_7_16-release:1.15
	cygwin-1_7_15-release:1.15
	cygwin-1_7_14_2-release:1.15
	cygwin-1_7_14-release:1.15
	cygwin-1_7_12-release:1.15
	cygwin-1_7_11-release:1.15
	cygwin-1_7_10-release:1.15
	cygwin-1_7_9-release:1.15
	cygwin-1_7_8-release:1.15
	cygwin-1_7_7-release:1.15
	cygwin-1_7_5-release:1.13
	cygwin-1_7_4-release:1.13
	cygwin-1_7_3-release:1.13
	cygwin-1_7_2-release:1.11
	cygwin-1_7_1-release:1.11
	cv-branch-2:1.11.0.2
	cr-0x5f1:1.9.0.6
	cv-branch:1.9.0.4
	cr-0x3b58:1.9.0.2
	cr-0x9e:1.2.0.10
	cr-0x9d:1.2.0.8
	corinna-01:1.2
	cr-0x9c:1.2.0.6
	cr-0x9b:1.2.0.4
	cr-0x99:1.2
	Z-emcb-cygwin_daemon:1.2.0.2
	w32api-2_2:1.2
	mingw-runtime-2_4:1.2
	cygnus_cvs_20020108_pre:1.2
	Z-cygwin_daemon_merge-new_HEAD:1.1.1.1
	Z-cygwin_daemon_merge_HEAD:1.1.1.1
	cygwin_daemon:1.1.1.1.0.10;
locks; strict;
comment	@# @;
expand	@o@;


1.16
date	2013.05.01.23.30.24;	author tangent;	state dead;
branches;
next	1.15;

1.15
date	2010.08.30.13.19.39;	author corinna;	state Exp;
branches;
next	1.14;

1.14
date	2010.07.19.18.25.41;	author ericb;	state Exp;
branches;
next	1.13;

1.13
date	2010.03.27.17.10.23;	author corinna;	state Exp;
branches;
next	1.12;

1.12
date	2010.03.27.05.26.51;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2009.03.18.11.05.45;	author corinna;	state Exp;
branches;
next	1.10;

1.10
date	2008.07.17.11.49.45;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.17.18.23.39;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2005.05.08.19.43.35;	author joshuadfranklin;	state Exp;
branches;
next	1.7;

1.7
date	2005.03.06.02.46.54;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.24.21.58.38;	author joshuadfranklin;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.02.08.14.49;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2004.02.20.07.26.16;	author joshuadfranklin;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.24.08.08.13;	author joshuadfranklin;	state Exp;
branches;
next	1.2;

1.2
date	2001.12.04.04.20.31;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Modernized user guide, API reference, and FAQ generation.  Overall
effect is to move away from DocBook SGML and DJ Delorie's doctool and
toward pure DocBook XSL.  (There remains just one use of doctool, and
we have plans for replacing it, too.)  See ChangeLog for details.
@
text
@<sect1 id="using-textbinary"><title>Text and Binary modes</title>

<sect2 id="textbin-issue"> <title>The Issue</title>

<para>On a UNIX system, when an application reads from a file it gets
exactly what's in the file on disk and the converse is true for writing.
The situation is different in the DOS/Windows world where a file can
be opened in one of two modes, binary or text.  In the binary mode the
system behaves exactly as in UNIX.  However on writing in text mode, a
NL (\n, ^J) is transformed into the sequence CR (\r, ^M) NL.
</para>

<para>This can wreak havoc with the seek/fseek calls since the number
of bytes actually in the file may differ from that seen by the
application.</para>

<para>The mode can be specified explicitly as explained in the Programming
section below.  In an ideal DOS/Windows world, all programs using lines as
records (such as <command>bash</command>, <command>make</command>,
<command>sed</command> ...) would open files (and change the mode of their
standard input and output) as text.  All other programs (such as
<command>cat</command>, <command>cmp</command>, <command>tr</command> ...)
would use binary mode.  In practice with Cygwin, programs that deal
explicitly with object files specify binary mode (this is the case of
<command>od</command>, which is helpful to diagnose CR problems).  Most
other programs (such as <command>sed</command>, <command>cmp</command>,
<command>tr</command>) use the default mode.</para>

</sect2>

<sect2 id="textbin-default"><title>The default Cygwin behavior</title>

<para>The Cygwin system gives us some flexibility in deciding how files 
are to be opened when the mode is not specified explicitly. 
The rules are evolving, this section gives the design goals.</para>

<orderedlist numeration="loweralpha">
<listitem>
<para>If the filename is specified as a POSIX path and it appears to
reside on a file system that is mounted (i.e.  if its pathname starts
with a directory displayed by <command>mount</command>), then the
default is specified by the mount flag.  If the file is a symbolic link,
the mode of the target file system applies.</para>
</listitem>

<listitem>
<para>If the file is specified via a MS-DOS pathname (i.e., it contains a
backslash or a colon), the default is binary.
</para>
</listitem>

<listitem>
<para>Pipes, sockets and non-file devices are opened in binary mode.
For pipes opened through the pipe() system call you can use the setmode()
function (see <xref linkend="textbin-devel"></xref> to switch to textmode.
For pipes opened through popen(), you can simply specify text or binary
mode just like in calls to fopen().</para>
</listitem>

<listitem>
<para>Sockets and other non-file devices are always opened in binary mode.
</para>
</listitem>

<listitem>
<para> When redirecting, the Cygwin shells uses rules (a-d).
Non-Cygwin shells always pipe and redirect with binary mode. With
non-Cygwin shells the commands <command> cat filename | program </command>
and <command> program &lt; filename </command> are not equivalent when
<filename>filename</filename> is on a text-mounted partition. </para>
<para>The programs <command>u2d</command> and <command>d2u</command> can
be used to add or remove CR's from a file.  <command>u2d</command> add's CR's before a NL.
<command>d2u</command> removes CR's.  Use the --help option to these commands
for more information.
</para>
</listitem>
</orderedlist>
</sect2>

<sect2 id="textbin-question"><title>Binary or text?</title>

<para>UNIX programs that have been written for maximum portability
will know the difference between text and binary files and act
appropriately under Cygwin.  Most programs included in the official
Cygwin distributions should work well in the default mode. </para>

<para>Binmode is the best choice usually since it's faster and
easier to handle, unless you want to exchange files with native Win32
applications.  It makes most sense to keep the Cygwin distribution
and your Cygwin home directory in binmode and generate text files in
binmode (with UNIX LF lineendings).  Most Windows applications can
handle binmode files just fine.  A notable exception is the mini-editor
<command>Notepad</command>, which handles UNIX lineendings incorrectly
and only produces output files with DOS CRLF lineendings.</para>

<para>You can convert files between CRLF and LF lineendings by using
certain tools in the Cygwin distribution like <command>d2u</command> and
<command>u2d</command> from the cygutils package.  You can also specify
a directory in the mount table to be mounted in textmode so you can use
that directory for exchange purposes.</para>

<para>As application programmer you can decide on a file by file base,
or you can specify default open modes depending on the purpose for which
the application open files.  See the next section for a description of
your choices.</para>

</sect2>

<sect2 id="textbin-devel"><title>Programming</title>

<para>In the <function>open()</function> function call, binary mode can be
specified with the flag <literal>O_BINARY</literal> and text mode with
<literal>O_TEXT</literal>. These symbols are defined in
<filename>fcntl.h</filename>.</para>

<para>The <function>mkstemp()</function> and <function>mkstemps()</function>
calls force binary mode.  Use <function>mkostemp()</function> or
<function>mkostemps()</function> with the same flags
as <function>open()</function> for more control on temporary files.</para>

<para>In the <function>fopen()</function> and <function>popen()</function>
function calls, binary mode can be specified by adding a <literal>b</literal>
to the mode string. Text mode is specified by adding a <literal>t</literal>
to the mode string.</para>

<para>The mode of a file can be changed by the call
<function>setmode(fd,mode)</function> where <literal>fd</literal> is a file
descriptor (an integer) and <literal>mode</literal> is
<literal>O_BINARY</literal> or <literal>O_TEXT</literal>. The function
returns <literal>O_BINARY</literal> or <literal>O_TEXT</literal> depending
on the mode before the call, and <literal>EOF</literal> on error.</para>

<para>There's also a convenient way to set the default open modes used
in an application by just linking against various object files provided
by Cygwin.  For instance, if you want to make sure that all files are
always opened in binary mode by an application, regardless of the mode
of the underlying mount point, just add the file
<filename>/lib/binmode.o</filename> to the link stage of the application
in your project, like this:</para>

<screen>
  $ gcc my_tiny_app.c /lib/binmode.o -o my_tiny_app
</screen>

<para>Starting with Cygwin 1.7.7, you can use the even simpler:</para>

<screen>
  $ gcc my_tiny_app.c -lbinmode -o my_tiny_app
</screen>

<para>This adds code which sets the default open mode for all files
opened by <command>my_tiny_app</command> to binary for reading and
writing.</para>

<para>Cygwin provides the following libraries and object files to set the
default open mode just by linking an application against them:</para>

<itemizedlist mark="bullet">

<listitem>
<screen>
/lib/libautomode.a      -  Open files for reading in textmode,
/lib/automode.o            open files for writing in binary mode
</screen>
</listitem>

<listitem>
<screen>
/lib/libbinmode.a       -  Open files for reading and writing in binary mode
/lib/binmode.o
</screen>
</listitem>

<listitem>
<screen>
/lib/libtextmode.a      -  Open files for reading and writing in textmode
/lib/textmode.o
</screen>
</listitem>

<listitem>
<screen>
/lib/libtextreadmode.a  -  Open files for reading in textmode,
/lib/textreadmode.o        keep default behaviour for writing.
</screen>
</listitem>

</itemizedlist>

</sect2>

</sect1>
@


1.15
log
@	* new-features.sgml (ov-new1.7.7): Document change to binmode/textmode
	link libs.
	* textbinary.sgml (textbin-devel): Ditto.
@
text
@@


1.14
log
@Document mkostemp and mkostemps.

* textbinary.sgml (textbin-devel): Document temp file behavior.
(textbin-issue): Use sed rather than cat as an example of a
default-mode application.
* new-features.sgml (ov-new1.7.6): Document mkostemp[s].
@
text
@d145 6
d155 2
a156 2
<para>Cygwin provides the following object files to set the default open mode
just by linking an application against them:</para>
d162 2
a163 2
/lib/automode.o      -  Open files for reading in textmode
                        Open files for writing in binary mode
d169 2
a170 1
/lib/binmode.o       -  Open files for reading and writing in binary mode
d176 2
a177 1
/lib/textmode.o      -  Open files for reading and writing in textmode
d183 2
a184 2
/lib/textreadmode.o  -  Open files for reading in textmode
                        Keep default behaviour for writing.
@


1.13
log
@	* textbinary.sgml: Add missing </para>.
@
text
@d26 1
a26 1
other programs (such as <command>cat</command>, <command>cmp</command>,
d116 5
@


1.12
log
@* textbinary.sgml: Remove tr example and just mention u2d and d2u instead.
@
text
@d75 1
@


1.11
log
@	* overview2.sgml: Remove reference to CYGWIN=binmode.
	* textbinary.sgml: Ditto.  Rephrase certain paragraphs to match
	Cygwin 1.7 behaviour.  Add popen(3) and pipe(2) behaviour.  Make
	quite clear that binmode is preferred.  Add *mode.o files to
	description for developers.
@
text
@d71 4
a78 35
<sect2 id="textbin-example"><title>Example</title>
<para>To illustrate the various rules, we provide scripts to delete CRs
from files by using the <command>tr</command> program, which can only write
to standard output. 
The script</para>
<screen>
<![CDATA[
#!/bin/sh
# Remove \r from the file given as argument
tr -d '\r' < "$1" > "$1".nocr
]]>
</screen>
<para> will not work on a text mounted systems because the \r will be 
reintroduced on writing. However scripts such as </para>
<screen>
<![CDATA[
#!/bin/sh
# Remove \r from the file given as argument
tr -d '\r' | gzip | gunzip > "$1".nocr
]]>
</screen>
<para>and the .bat file</para>
<screen>
<![CDATA[
REM Remove \r from the file given as argument
@@echo off
tr -d \r < %1 > %1.nocr
]]>
</screen>
<para> work fine. In the first case we rely on <command>gunzip</command> to
set its output to binary mode, possibly overriding the mode used by the shell.
In the second case we rely on the DOS shell to redirect in binary mode.
</para>
</sect2>

@


1.10
log
@	* Revamp documentation for Cygwin 1.7, part 1.
@
text
@d36 1
d45 1
d51 1
d53 5
a57 4
<para>Pipes and non-file devices are opened in binary mode,
except if the <envar>CYGWIN</envar> environment variable contains
<literal>nobinmode</literal>.  Sockets are always opened in binary
mode.</para>
d61 6
a66 3
<para> When redirecting, the Cygwin shells uses rules (a-e). For
these shells the relevant value of <envar>CYGWIN</envar> is that at the time
the shell was launched and not that at the time the program is executed.
d104 2
a105 3
<para> work fine. In the first case (assuming the pipes are binary)
we rely on <command>gunzip</command> to set its output to binary mode,
possibly overriding the mode used by the shell.
d114 2
a115 22
appropriately under Cygwin.  For those programs, the text mode default
is a good choice.  Programs included in official Cygwin distributions
should work well in the default mode. </para>

<para>Text mode makes it much easier to mix files between Cygwin and
Windows programs, since Windows programs will usually use the CRLF
format.  Unfortunately you may still have some problems with text
mode.  First, some of the utilities included with Cygwin do not yet
specify binary mode when they should.
Second, you will introduce CRs in text
files you write, which can cause problems when moving them back to a
UNIX system. </para>

<para>If you are mounting a remote file system from a UNIX machine,
or moving files back and forth to a UNIX machine, you may want to
access the files in binary mode. The text files found there will normally
be in UNIX NL format, and you would want any files put there by Cygwin
programs to be stored in a format understood by UNIX.
Be sure to remove CRs from all Makefiles and
shell scripts and make sure that you only edit the files with
DOS/Windows editors that can cope with and preserve NL terminated lines.
</para>
d117 19
a135 5
<para>Note that you can decide this on a disk by disk basis (for
example, mounting local disks in text mode and network disks in binary
mode).  You can also partition a disk, for example by mounting
<filename>c:</filename> in text mode, and <filename>c:\home</filename>
in binary mode.</para>
d146 4
a149 3
<para>In the <function>fopen()</function> function call, binary mode can be
specified by adding a <literal>b</literal> to the mode string. Text mode is specified
by adding a <literal>t</literal> to the mode string.</para>
d158 49
@


1.9
log
@* textbinary.sgml: Correct incorrect information about ability to specify text
mode in fopen().
@
text
@d3 1
a3 1
<sect2> <title>The Issue</title>
d31 1
a31 1
<sect2><title>The default Cygwin behavior</title>
d52 2
a53 16
<literal>nobinmode</literal>.</para>
<warning><title>Warning!</title><para>In b20.1 of 12/98, a file will be opened
in binary mode if any of the following conditions hold:</para> 
<orderedlist numeration="arabic" spacing="compact">
<listitem><para>binary mode is specified in the open call</para>
</listitem>
<listitem><para>the filename is a MS-DOS filename</para>
</listitem>
<listitem><para>the file resides on a binary mounted partition</para>
</listitem>
<listitem><para><envar>CYGWIN</envar> contains <literal>binmode</literal></para>
</listitem>
<listitem><para>the file is not a disk file</para>
</listitem>
</orderedlist>
</warning>
d68 1
a68 1
<sect2><title>Example</title>
d104 1
a104 1
<sect2><title>Binary or text?</title>
d139 1
a139 1
<sect2><title>Programming</title>
@


1.8
log
@* how-programming.texinfo: Replace MAKE_MODE entry with FAQ about execvp errors and cygexec.
@
text
@d161 2
a162 2
specified by adding a <literal>b</literal> to the mode string. There is no
direct way to specify text mode.</para>
@


1.7
log
@* pathnames.sgml: Clarify binmode/textmode behavior slightly.
* textbinary.sgml: Ditto.
@
text
@d58 1
a58 1
<listitem><para>the filename is a MS-DOS filename
@


1.6
log
@	* .sgml: Cleanup markup for XML validity.
@
text
@d38 5
a42 5
<para>If the file appears to reside on a file system that is mounted
(i.e. if its pathname starts with a directory displayed by
<command>mount</command>), then the default is specified by the mount
flag. If the file is a symbolic link, the mode of the target file system
applies.</para>
d45 2
a46 2
<para>If the file appears to reside on a file system that is not mounted
(as can happen when the path contains a drive letter), the default is binary.
d58 4
a63 2
<listitem><para>the file resides in a binary mounted partition</para>
</listitem>
d71 1
a71 5
<para>When a Cygwin program is launched by a shell, its standard input,
output and error are in binary mode if the <envar>CYGWIN</envar> variable
contains <literal>tty</literal>, else in text mode, except if they are piped
or redirected.</para>
<para> When redirecting, the Cygwin shells uses rules (a-c). For
@


1.5
log
@	* textbinary.sgml: Change default mode for non-mounted paths to binary.
@
text
@d36 1
a36 1
<OrderedList Numeration="Loweralpha">
d51 1
a51 1
except if the <EnVar>CYGWIN</EnVar> environment variable contains
d53 1
a53 1
<warning><Title>Warning!</Title><para>In b20.1 of 12/98, a file will be opened
d55 1
a55 1
<OrderedList Numeration="arabic" Spacing="Compact">
d64 1
a64 1
</OrderedList>
d81 1
a81 1
</OrderedList>
@


1.4
log
@2004-02-19  Joshua Daniel Franklin  <joshuadfranklin@@yahoo.com>

	* cygwinenv.sgml: Remove incorrect ^Z information. Add
	some tags to server option description.
	* textbinary.sgml: Remove incorrect ^Z information.
@
text
@d46 1
a46 1
(as can happen when the path contains a drive letter), the default is text.
@


1.3
log
@
2004-01-24  Joshua Daniel Franklin  <joshuadfranklin@@yahoo.com>
	* cygwinenv.sgml: Cleanup minor markup problems.
	* dll.sgml: Cleanup minor markup problems.
	* effectively.sgml: Cleanup minor markup problems.
	* gcc.sgml: Cleanup minor markup problems.
	* ntsec.sgml: Cleanup minor markup problems.
	* pathnames.sgml: Cleanup minor markup problems.
	* setup-net.sgml: Cleanup minor markup problems.
	* textbinary.sgml: Cleanup minor markup problems.
	* windres.sgml: Cleanup minor markup problems.
@
text
@d9 3
a11 14
system behaves exactly as in UNIX.  However in text mode there are
major differences:</para>
<OrderedList Numeration="Loweralpha" Spacing="Compact">
<listitem>
<para>
On writing in text mode, a NL (\n, ^J) is transformed into the 
sequence CR (\r, ^M) NL.</para>
</listitem>
<listitem>
<para>
On reading in text mode, a CR followed by an NL is deleted and a ^Z
character signals the end of file.</para>
</listitem>
</OrderedList>
d132 2
a133 3
specify binary mode when they should, e.g. <command>cat</command> will
not work with binary files (input will stop at ^Z, CRs will be
introduced in the output). Second, you will introduce CRs in text
@


1.2
log
@Cleanup copyrights and Cygnus'isms throughout.
* setup.sgml: Nuke ancient instructions.
@
text
@d89 1
a89 1
and <command> program &lt filename </command> are not equivalent when
d101 1
d105 1
d110 1
d114 1
d118 1
d122 1
@


1.1
log
@Initial revision
@
text
@d130 1
a130 1
is a good choice.  Programs included in official Cygnus distributions
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
