head	1.5;
access;
symbols
	cygwin-64bit-postmerge:1.4
	cygwin-64bit-premerge-branch:1.4.0.4
	cygwin-64bit-premerge:1.4
	cygwin-1_7_18-release:1.4
	cygwin-1_7_17-release:1.4
	cygwin-64bit-branch:1.4.0.2
	cygwin-1_7_16-release:1.4
	cygwin-1_7_15-release:1.4
	cygwin-1_7_14_2-release:1.4
	cygwin-1_7_14-release:1.4
	cygwin-1_7_12-release:1.4
	cygwin-1_7_11-release:1.4
	cygwin-1_7_10-release:1.4
	cygwin-1_7_9-release:1.4
	cygwin-1_7_8-release:1.4
	cygwin-1_7_7-release:1.4
	cygwin-1_7_5-release:1.4
	cygwin-1_7_4-release:1.3
	cygwin-1_7_3-release:1.3
	cygwin-1_7_2-release:1.3
	cygwin-1_7_1-release:1.3
	cv-branch-2:1.3.0.8
	cr-0x5f1:1.3.0.6
	cv-branch:1.3.0.4
	cr-0x3b58:1.3.0.2
	cr-0x9e:1.1.0.4
	cr-0x9d:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2013.05.01.23.30.21;	author tangent;	state dead;
branches;
next	1.4;

1.4
date	2010.04.11.22.15.59;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2005.08.06.05.14.41;	author joshuadfranklin;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.27.19.03.56;	author joshuadfranklin;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.11.08.32.09;	author joshuadfranklin;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Modernized user guide, API reference, and FAQ generation.  Overall
effect is to move away from DocBook SGML and DJ Delorie's doctool and
toward pure DocBook XSL.  (There remains just one use of doctool, and
we have plans for replacing it, too.)  See ChangeLog for details.
@
text
@<?xml version='1.0'?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:fo="http://www.w3.org/1999/XSL/Format"
                version='1.0'>

<xsl:param name="chunker.output.doctype-public" 
  select="'-//W3C//DTD HTML 4.01 Transitional//EN'" />
<xsl:param name="html.stylesheet" select="'docbook.css'"/>
<xsl:param name="use.id.as.filename" select="1" />
<xsl:param name="root.filename" select="@@id" />

</xsl:stylesheet>
@


1.4
log
@* cygwin.dsl: Remove comments.
@
text
@@


1.3
log
@Update to switch FAQ from texinfo to DocBook.
@
text
@a5 1
<!-- See /usr/share/docbook-xsl/params/ -->
a11 2
<!-- TODO: make URLs and paths wrap with PDF output -->

a12 1

@


1.2
log
@Update Makefile to use xmlto
@
text
@d7 2
d11 1
@


1.1
log
@2004-01-11  Joshua Daniel Franklin <joshuadfranklin@@yahoo.com>

        * Makefile.in: Add new target for single-file User's Guide, use new
        cygwin.dsl for output.
        * cygwin.dsl: New file, DSSSL stylesheet for custom Cygwin output.
        * cygwin-api.in.sgml: Update to DocBook SGML 4.2 DTD.
        * cygwin-ug-net.in.sgml: Update to DocBook SGML 4.2 DTD.
        * cygwin-ug.in.sgml: Update to DocBook SGML 4.2 DTD.
        * cygwinenv.sgml: Correct some tags. Add description of default values
        to ntsec, export, and error_start items.
        * dll.sgml: Add explanation of cyg prefix for DLLs.
        * effectively.sgml: Use systemitem tag for names of Cygwin packages.
        * how-programming.texinfo: Add example to FAQ entry.
        * pathnames.sgml: Add discussion of /proc filesystem.
	* setup-net.sgml: Correct some typos and grammar.
@
text
@d1 8
a8 16
<!DOCTYPE style-sheet PUBLIC
          "-//James Clark//DTD DSSSL Style Sheet//EN" [
<!ENTITY % html "IGNORE">
<![%html;[
<!ENTITY % print "IGNORE">
<!ENTITY docbook.dsl PUBLIC
         "-//Norman Walsh//DOCUMENT DocBook HTML Stylesheet//EN"
	 CDATA dsssl>
]]>
<!ENTITY % print "INCLUDE">
<![%print;[
<!ENTITY docbook.dsl PUBLIC
         "-//Norman Walsh//DOCUMENT DocBook Print Stylesheet//EN"
	 CDATA dsssl>
]]>
]>
d10 1
a10 1
<style-sheet>
d12 1
a12 3
<!--      PRINT       -->
<style-specification id="print" use="docbook">
<style-specification-body> 
a13 126
;; The following are 
;; <!-- Cygnus customizations by Mark Galassi -->
;; ====================
;; customize the print stylesheet
;; ====================

;; make funcsynopsis look pretty
(define %funcsynopsis-decoration%
  ;; Decorate elements of a FuncSynopsis?
  #t)

;; use graphics in admonitions, and have their path be "."
;; NO: we are not yet ready to use gifs in TeX and so forth
(define %admon-graphics-path%
  "./")
(define %admon-graphics%
  #f)

;; this is necessary because right now jadetex does not understand
;; symbolic entities, whereas things work well with numeric entities.
(declare-characteristic preserve-sdata?
          "UNREGISTERED::James Clark//Characteristic::preserve-sdata?"
          #f)
(define %two-side% #t)

(define %section-autolabel% 
  ;; Are sections enumerated?
  #t)
;; (define %title-font-family% 
;;   ;; The font family used in titles
;;   "Ariel")
(define %visual-acuity%
  ;; General measure of document text size
  ;; "presbyopic"
  ;; "large-type"
  "presbyopic")

(define %generate-part-toc% #t)


;;; The following customizations are from Tim Waugh's selfdocbook
;;; http://cyberelk.net/tim/docbook/
;;; 
;;; TeX backend can go to PS (where EPS is needed)
;;; or to PDF (where PNG is needed).  So, just
;;; omit the file extension altogether and let
;;; tex/pdfjadetex sort it out on its own.
(define (graphic-file filename)
 (let ((ext (file-extension filename)))
  (if (or (equal? 'backend 'tex) ;; Leave off the extension for TeX
          (not filename)
          (not %graphic-default-extension%)
          (member ext %graphic-extensions%))
      filename
      (string-append filename "." %graphic-default-extension%))))

;;; Full justification.
(define %default-quadding%
 'justify)

;;; To make URLs line wrap we use the TeX 'url' package.
;;; See also: jadetex.cfg
;; First we need to declare the 'formatting-instruction' flow class.
(declare-flow-object-class formatting-instruction
"UNREGISTERED::James Clark//Flow Object Class::formatting-instruction")
;; Then redefine ulink to use it.
(element ulink
  (make sequence
    (if (node-list-empty? (children (current-node)))
	; ulink url="...", /ulink
	(make formatting-instruction
	  data: (string-append "\\url{"
			       (attribute-string (normalize "url"))
			       "}"))
	(if (equal? (attribute-string (normalize "url"))
		    (data-of (current-node)))
	; ulink url="http://...", http://..., /ulink
	    (make formatting-instruction data:
		  (string-append "\\url{"
				 (attribute-string (normalize "url"))
				 "}"))
	; ulink url="http://...", some text, /ulink
	    (make sequence
	      ($charseq$)
	      (literal " (")
	      (make formatting-instruction data:
		    (string-append "\\url{"
				   (attribute-string (normalize "url"))
				   "}"))
	      (literal ")"))))))
;;; And redefine filename to use it too.
(element filename
  (make formatting-instruction
    data: (string-append "\\path{" (data-of (current-node)) "}")))

</style-specification-body>
</style-specification>

<!--      HTML       -->
<style-specification id="html" use="docbook">
<style-specification-body> 

;; If true (non-zero), elements of the FuncSynopsis will be decorated 
;; (e.g. bold or italic).
(define %funcsynopsis-decoration% #t)

;; If true, a Table of Contents will be generated for each 'Article'.
(define %generate-article-toc% #t)

;; If true, a Table of Contents will be generated for each Part.
(define %generate-part-toc% #t)

;; The name of the stylesheet to place in the HTML LINK TAG, 
;; or #f to suppress the stylesheet LINK.
(define %stylesheet% "docbook.css")

(define %use-id-as-filename% #t)

(define %html-ext% ".html")

</style-specification-body>
</style-specification>

<external-specification id="docbook" document="docbook.dsl">

</style-sheet>
@

