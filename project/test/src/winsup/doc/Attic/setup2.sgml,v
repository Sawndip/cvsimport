head	1.52;
access;
symbols
	cygwin-64bit-postmerge:1.51
	cygwin-64bit-premerge-branch:1.51.0.4
	cygwin-64bit-premerge:1.51
	cygwin-1_7_18-release:1.51
	cygwin-1_7_17-release:1.51
	cygwin-64bit-branch:1.51.0.2
	cygwin-1_7_16-release:1.51
	cygwin-1_7_15-release:1.51
	cygwin-1_7_14_2-release:1.51
	cygwin-1_7_14-release:1.51
	cygwin-1_7_12-release:1.51
	cygwin-1_7_11-release:1.51
	cygwin-1_7_10-release:1.51
	cygwin-1_7_9-release:1.46
	cygwin-1_7_8-release:1.46
	cygwin-1_7_7-release:1.44
	cygwin-1_7_5-release:1.43
	cygwin-1_7_4-release:1.43
	cygwin-1_7_3-release:1.43
	cygwin-1_7_2-release:1.42
	cygwin-1_7_1-release:1.31
	cv-branch-2:1.21.0.2
	cr-0x5f1:1.8.0.6
	cv-branch:1.8.0.4
	cr-0x3b58:1.8.0.2
	cr-0x9e:1.6.0.10
	cr-0x9d:1.6.0.8
	corinna-01:1.6
	cr-0x9c:1.6.0.6
	cr-0x9b:1.6.0.4
	cr-0x99:1.6
	Z-emcb-cygwin_daemon:1.6.0.2
	w32api-2_2:1.6
	mingw-runtime-2_4:1.6
	cygnus_cvs_20020108_pre:1.5
	Z-cygwin_daemon_merge-new_HEAD:1.4
	Z-cygwin_daemon_merge_HEAD:1.4
	cygwin_daemon:1.4.0.8;
locks; strict;
comment	@# @;
expand	@o@;


1.52
date	2013.05.01.23.30.24;	author tangent;	state dead;
branches;
next	1.51;

1.51
date	2012.02.04.20.19.48;	author corinna;	state Exp;
branches;
next	1.50;

1.50
date	2012.02.04.11.40.44;	author corinna;	state Exp;
branches;
next	1.49;

1.49
date	2011.11.18.11.39.31;	author corinna;	state Exp;
branches;
next	1.48;

1.48
date	2011.08.12.13.51.21;	author corinna;	state Exp;
branches;
next	1.47;

1.47
date	2011.05.10.08.56.04;	author corinna;	state Exp;
branches;
next	1.46;

1.46
date	2010.11.18.11.05.46;	author corinna;	state Exp;
branches;
next	1.45;

1.45
date	2010.09.18.11.29.06;	author corinna;	state Exp;
branches;
next	1.44;

1.44
date	2010.08.13.11.52.13;	author corinna;	state Exp;
branches;
next	1.43;

1.43
date	2010.03.27.21.13.04;	author corinna;	state Exp;
branches;
next	1.42;

1.42
date	2010.03.05.15.44.03;	author corinna;	state Exp;
branches;
next	1.41;

1.41
date	2010.02.17.15.02.17;	author corinna;	state Exp;
branches;
next	1.40;

1.40
date	2010.02.10.12.34.54;	author corinna;	state Exp;
branches;
next	1.39;

1.39
date	2010.02.07.13.42.49;	author corinna;	state Exp;
branches;
next	1.38;

1.38
date	2010.02.06.21.41.05;	author corinna;	state Exp;
branches;
next	1.37;

1.37
date	2010.02.06.18.33.40;	author corinna;	state Exp;
branches;
next	1.36;

1.36
date	2010.02.05.21.38.31;	author corinna;	state Exp;
branches;
next	1.35;

1.35
date	2010.01.23.16.44.00;	author corinna;	state Exp;
branches;
next	1.34;

1.34
date	2010.01.23.15.03.06;	author corinna;	state Exp;
branches;
next	1.33;

1.33
date	2010.01.22.22.32.42;	author corinna;	state Exp;
branches;
next	1.32;

1.32
date	2010.01.17.14.55.57;	author corinna;	state Exp;
branches;
next	1.31;

1.31
date	2009.12.02.09.36.54;	author corinna;	state Exp;
branches;
next	1.30;

1.30
date	2009.10.28.10.09.54;	author corinna;	state Exp;
branches;
next	1.29;

1.29
date	2009.10.02.12.35.52;	author corinna;	state Exp;
branches;
next	1.28;

1.28
date	2009.09.30.09.45.01;	author corinna;	state Exp;
branches;
next	1.27;

1.27
date	2009.09.25.16.42.36;	author corinna;	state Exp;
branches;
next	1.26;

1.26
date	2009.09.25.12.27.46;	author ericb;	state Exp;
branches;
next	1.25;

1.25
date	2009.08.22.15.01.00;	author cgf;	state Exp;
branches;
next	1.24;

1.24
date	2009.08.22.08.44.04;	author corinna;	state Exp;
branches;
next	1.23;

1.23
date	2009.07.20.08.32.39;	author corinna;	state Exp;
branches;
next	1.22;

1.22
date	2009.06.19.09.33.45;	author corinna;	state Exp;
branches;
next	1.21;

1.21
date	2009.05.27.02.30.42;	author cgf;	state Exp;
branches;
next	1.20;

1.20
date	2009.05.15.12.16.01;	author corinna;	state Exp;
branches;
next	1.19;

1.19
date	2009.05.13.15.11.39;	author corinna;	state Exp;
branches;
next	1.18;

1.18
date	2009.04.07.13.04.43;	author corinna;	state Exp;
branches;
next	1.17;

1.17
date	2009.04.06.10.30.02;	author corinna;	state Exp;
branches;
next	1.16;

1.16
date	2009.04.06.10.25.28;	author corinna;	state Exp;
branches;
next	1.15;

1.15
date	2009.04.03.11.51.31;	author corinna;	state Exp;
branches;
next	1.14;

1.14
date	2009.03.31.11.17.08;	author corinna;	state Exp;
branches;
next	1.13;

1.13
date	2009.03.26.12.25.11;	author corinna;	state Exp;
branches;
next	1.12;

1.12
date	2009.03.26.10.31.08;	author corinna;	state Exp;
branches;
next	1.11;

1.11
date	2009.03.25.10.37.06;	author corinna;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.22.16.55.30;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2008.07.17.11.49.45;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2004.12.24.21.58.38;	author joshuadfranklin;	state Exp;
branches;
next	1.7;

1.7
date	2004.01.20.17.20.34;	author joshuadfranklin;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.06.02.52.14;	author joshuadfranklin;	state Exp;
branches;
next	1.5;

1.5
date	2001.12.04.04.20.31;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2001.02.08.04.12.48;	author dj;	state Exp;
branches;
next	1.3;

1.3
date	2000.11.19.04.53.46;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.19.00.55.19;	author dj;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.52
log
@Modernized user guide, API reference, and FAQ generation.  Overall
effect is to move away from DocBook SGML and DJ Delorie's doctool and
toward pure DocBook XSL.  (There remains just one use of doctool, and
we have plans for replacing it, too.)  See ChangeLog for details.
@
text
@<sect1 id="setup-env"><title>Environment Variables</title>

<sect2 id="setup-env-ov"><title>Overview</title>

<para>
All Windows environment variables are imported when Cygwin starts.
Apart from that, you may wish to specify settings of several important
environment variables that affect Cygwin's operation.</para>

<para>
The <envar>CYGWIN</envar> variable is used to configure a few global
settings for the Cygwin runtime system.  Typically you can leave
<envar>CYGWIN</envar> unset, but if you want to set one ore more
options, you can set it using a syntax like this, depending on the shell
in which you're setting it.  Here is an example in CMD syntax:</para>

<screen>
<prompt>C:\&gt;</prompt> <userinput>set CYGWIN=error_start:C:\cygwin\bin\gdb.exe glob</userinput>
</screen>

<para>
This is, of course, just an example.  For the recognized settings of the
<envar>CYGWIN</envar> environment variable, see
<xref linkend="using-cygwinenv"></xref>.
</para>

<para>
Locale support is controlled by the <envar>LANG</envar> and
<envar>LC_xxx</envar> environment variables.  Since Cygwin 1.7.2, all of
them are honored and have a meaning.  For a more detailed description see
<xref linkend="setup-locale"></xref>.
</para>

<para>
The <envar>PATH</envar> environment variable is used by Cygwin
applications as a list of directories to search for executable files
to run.  This environment variable is converted from Windows format
(e.g. <filename>C:\Windows\system32;C:\Windows</filename>) to UNIX format
(e.g., <filename>/cygdrive/c/Windows/system32:/cygdrive/c/Windows</filename>)
when a Cygwin process first starts.
Set it so that it contains at least the <filename>x:\cygwin\bin</filename>
directory where "<filename>x:\cygwin</filename> is the "root" of your
cygwin installation if you wish to use cygwin tools outside of bash.
This is usually done by the batch file you're starting your shell with.
</para>

<para> 
The <envar>HOME</envar> environment variable is used by many programs to
determine the location of your home directory and we recommend that it be
defined.  This environment variable is also converted from Windows format
when a Cygwin process first starts.  It's usually set in the shell
profile scripts in the /etc directory.
</para>

<para>
The <envar>TERM</envar> environment variable specifies your terminal
type.  It is automatically set to <literal>cygwin</literal> if you have
not set it to something else.
</para>

<para>The <envar>LD_LIBRARY_PATH</envar> environment variable is used by
the Cygwin function <function>dlopen ()</function> as a list of
directories to search for .dll files to load.  This environment variable
is converted from Windows format to UNIX format when a Cygwin process
first starts.  Most Cygwin applications do not make use of the
<function>dlopen ()</function> call and do not need this variable.
</para>

<para>
In addition to <envar>PATH</envar>, <envar>HOME</envar>,
and <envar>LD_LIBRARY_PATH</envar>, there are three other environment
variables which, if they exist in the Windows environment, are
converted to UNIX format: <envar>TMPDIR</envar>, <envar>TMP</envar>,
and <envar>TEMP</envar>.  The first is not set by default in the
Windows environment but the other two are, and they point to the
default Windows temporary directory.  If set, these variables will be
used by some Cygwin applications, possibly with unexpected results.
You may therefore want to unset them by adding the following two lines
to your <filename>~/.bashrc</filename> file:

<screen>
unset TMP
unset TEMP
</screen>

This is done in the default <filename>~/.bashrc</filename> file.
Alternatively, you could set <envar>TMP</envar>
and <envar>TEMP</envar> to point to <filename>/tmp</filename> or to
any other temporary directory of your choice.  For example:

<screen>
export TMP=/tmp
export TEMP=/tmp
</screen>
</para>

</sect2>

<sect2 id="setup-env-win32"><title>Restricted Win32 environment</title>

<para>There is a restriction when calling Win32 API functions which
require a fully set up application environment.  Cygwin maintains its own
environment in POSIX style.  The Win32 environment is usually stripped
to a bare minimum and not at all kept in sync with the Cygwin POSIX
environment.</para>

<para>If you need the full Win32 environment set up in a Cygwin process,
you have to call</para>

<screen>
#include &lt;sys/cygwin.h&gt;

cygwin_internal (CW_SYNC_WINENV);
</screen>

<para>to synchronize the Win32 environment with the Cygwin environment.
Note that this only synchronizes the Win32 environment once with the
Cygwin environment.  Later changes using the <function>setenv</function>
or <function>putenv</function> calls are not reflected in the Win32
environment.  In these cases, you have to call the aforementioned
<function>cygwin_internal</function> call again.</para>

</sect2>

</sect1>

<sect1 id="setup-maxmem"><title>Changing Cygwin's Maximum Memory</title>

<para>
Cygwin's heap is extensible.  However, it does start out at a fixed size
and attempts to extend it may run into memory which has been previously
allocated by Windows.  In some cases, this problem can be solved by
changing a field in the file header which is utilized by Cygwin since
version 1.7.10 to keep the initial size of the application heap.  If the
field contains 0, which is the default, the application heap defaults to
a size of 384 Megabyte.  If the field is set to any other value between 4 and
2048, Cygwin tries to reserve as much Megabytes for the application heap.
The field used for this is the "LoaderFlags" field in the NT-specific
PE header structure (<literal>(IMAGE_NT_HEADER)->OptionalHeader.LoaderFlags</literal>).</para>

<para>
This value can be changed for any executable by using a more recent version
of the <command>peflags</command> tool from the <literal>rebase</literal>
Cygwin package.  Example:

<screen>
$ peflags --cygwin-heap foo.exe
foo.exe: initial Cygwin heap size: 0 (0x0) MB
$ peflags --cygwin-heap=500 foo.exe
foo.exe: initial Cygwin heap size: 500 (0x1f4) MB
</screen>
</para>

<para>
Heap memory can be allocated up to the size of the biggest available free
block in the processes virtual memory (VM).  By default, the VM per process
is 2 GB for 32 processes.  To get more VM for a process, the executable
must have the "large address aware" flag set in the file header.  You can
use the aforementioned <command>peflags</command> tool to set this flag.
On 64 bit systems this results in a 4 GB VM for a process started from that
executable.  On 32 bit systems you also have to prepare the system to allow
up to 3 GB per process.  See the Microsoft article
<ulink url="http://msdn.microsoft.com/en-us/library/bb613473%28VS.85%29.aspx">4-Gigabyte Tuning</ulink>
for more information.
</para>

<note>
<para>
Older Cygwin releases only supported a global registry setting to
change the initial heap size for all Cygwin processes.  This setting is
not used anymore.  However, if you're running an older Cygwin release
than 1.7.10, you can add the <literal>DWORD</literal> value
<literal>heap_chunk_in_mb</literal> and set it to the desired memory limit
in decimal MB.  You have to stop all Cygwin processes for this setting to
have any effect.  It is preferred to do this in Cygwin using the
<command>regtool</command> program included in the Cygwin package.
(see <xref linkend="regtool"></xref>) This example sets the memory limit
to 1024 MB for all Cygwin processes (use HKCU instead of HKLM if you
want to set this only for the current user):

<screen>
$ regtool -i set /HKLM/Software/Cygwin/heap_chunk_in_mb 1024
$ regtool -v list /HKLM/Software/Cygwin
</screen>
</para>
</note>

</sect1>

<sect1 id="setup-locale"><title>Internationalization</title>

<sect2 id="setup-locale-ov"><title>Overview</title>

<para>
Internationalization support is controlled by the <envar>LANG</envar> and
<envar>LC_xxx</envar> environment variables.  You can set all of them
but Cygwin itself only honors the variables <envar>LC_ALL</envar>,
<envar>LC_CTYPE</envar>, and <envar>LANG</envar>, in this order, according
to the POSIX standard.  The content of these variables should follow the
POSIX standard for a locale specifier.  The correct form of a locale
specifier is</para>

<screen>
  language[[_TERRITORY][.charset][@@modifier]]
</screen>

<para>"language" is a lowercase two character string per ISO 639-1, or,
if there is no ISO 639-1 code for the language (for instance, "Lower Sorbian"),
a three character string per ISO 639-3.</para>

<para>"TERRITORY" is an uppercase two character string per ISO 3166, charset is
one of a list of supported character sets.  The modifier doesn't matter
here (though some are recognized, see below).  If you're interested in the
exact description, you can find it in the online publication of the POSIX
manual pages on the homepage of the
<ulink url="http://www.opengroup.org/">Open Group</ulink>.</para>

<para>Typical locale specifiers are</para>

<screen>
  "de_CH"	   language = German, territory = Switzerland, default charset
  "fr_FR.UTF-8"    language = french, territory = France, charset = UTF-8
  "ko_KR.eucKR"    language = korean, territory = South Korea, charset = eucKR
  "syr_SY"         language = Syriac, territory = Syria, default charset
</screen>

<para>
If the locale specifier does not follow the above form, Cygwin checks
if the locale is one of the locale aliases defined in the file
<filename>/usr/share/locale/locale.alias</filename>.  If so, and if
the replacement localename is supported by the underlying Windows,
the locale is accepted, too.  So, given the default content of the
<filename>/usr/share/locale/locale.alias</filename> file, the below
examples would be valid locale specifiers as well.
</para>

<screen>
  "catalan"        defined as "ca_ES.ISO-8859-1" in locale.alias
  "japanese"       defined as "ja_JP.eucJP"      in locale.alias
  "turkish"        defined as "tr_TR.ISO-8859-9" in locale.alias
</screen>

<para>The file <filename>/usr/share/locale/locale.alias</filename> is
provided by the gettext package under Cygwin.</para>

<para>
At application startup, the application's locale is set to the default
"C" or "POSIX" locale.  Under Cygwin 1.7.2 and later, this locale defaults
to the ASCII character set on the application level.  If you want to stick
to the "C" locale and only change to another charset, you can define this
by setting one of the locale environment variables to "C.charset".  For
instance</para>

<screen>
  "C.ISO-8859-1"
</screen>

<note><para>The default locale in the absence of the aforementioned locale
environment variables is "C.UTF-8".</para></note>

<para>Windows uses the UTF-16 charset exclusively to store the names
of any object used by the Operating System.  This is especially important
with filenames.  Cygwin uses the setting of the locale environment variables
<envar>LC_ALL</envar>, <envar>LC_CTYPE</envar>, and <envar>LANG</envar>, to
determine how to convert Windows filenames from their UTF-16 representation
to the singlebyte or multibyte character set used by Cygwin.</para>

<para>
The setting of the locale environment variables at process startup
is effective for Cygwin's internal conversions to and from the Windows UTF-16
object names for the entire lifetime of the current process.  Changing
the environment variables to another value changes the way filenames are
converted in subsequently started child processes, but not within the same
process.</para>

<para>
However, even if one of the locale environment variables is set to
some other value than "C", this does <emphasis>only</emphasis> affect
how Cygwin itself converts filenames.  As the POSIX standard requires,
it's the application's responsibility to activate that locale for its
own purposes, typically by using the call</para>

<screen>
  setlocale (LC_ALL, "");
</screen>

<para>early in the application code.  Again, so that this doesn't get
lost:  If the application calls setlocale as above, and there is none
of the important locale variables set in the environment, the locale
is set to the default locale, which is "C.UTF-8".</para>

<para>But what about applications which are not locale-aware?  Per POSIX,
they are running in the "C" or "POSIX" locale, which implies the ASCII
charset.  The Cygwin DLL itself, however, will nevertheless use the locale
set in the environment (or the "C.UTF-8" default locale) for converting
filenames etc.</para>

<para>When the locale in the environment specifies an ASCII charset,
for example "C" or "en_US.ASCII", Cygwin will still use UTF-8
under the hood to translate filenames.  This allows for easier
interoperability with applications running in the default "C.UTF-8" locale.
</para>

<para>
Starting with Cygwin 1.7.2, the language and territory are used to
fetch locale-dependent information from Windows.  If the language and
territory are not known to Windows, the <function>setlocale</function>
function fails.</para>

<para>The following modifiers are recognized.  Any other modifier is simply
ignored for now.</para>

<itemizedlist mark="bullet">

<listitem><para>
For locales which use the Euro (EUR) as currency, the modifier "@@euro"
can be added to enforce usage of the ISO-8859-15 character set, which
includes a character for the "Euro" currency sign.
</para></listitem>

<listitem><para>
The default script used for all Serbian language locales (sr_BA, sr_ME, sr_RS,
and the deprecated sr_CS and sr_SP) is cyrillic.  With the "@@latin" modifier
it gets switched to the latin script with the respective collation behaviour.
</para></listitem>

<listitem><para>
The default charset of the "be_BY" locale (Belarusian/Belarus) is CP1251.
With the "@@latin" modifier it's UTF-8.
</para></listitem>

<listitem><para>
The default charset of the "tt_RU" locale (Tatar/Russia) is ISO-8859-5.
With the "@@iqtelif" modifier it's UTF-8.
</para></listitem>

<listitem><para>
The default charset of the "uz_UZ" locale (Uzbek/Uzbekistan) is ISO-8859-1.
With the "@@cyrillic" modifier it's UTF-8.
</para></listitem>

<listitem><para>
There's a class of characters in the Unicode character set, called the
"CJK Ambiguous Width" characters.  For these characters, the width
returned by the wcwidth/wcswidth functions is usually 1.  This can be a
problem with East-Asian languages, which historically use character sets
where these characters have a width of 2.  Therefore, wcwidth/wcswidth
return 2 as the width of these characters when an East-Asian charset such
as GBK or SJIS is selected, or when UTF-8 is selected and the language is
specified as "zh" (Chinese), "ja" (Japanese), or "ko" (Korean).  This is
not correct in all circumstances, hence the locale modifier "@@cjknarrow"
can be used to force wcwidth/wcswidth to return 1 for the ambiguous width
characters.
</para></listitem>

</itemizedlist>

</sect2>

<sect2 id="setup-locale-how"><title>How to set the locale</title>

<itemizedlist mark="bullet">

<listitem><para>
Assume that you've set one of the aforementioned environment variables to some
valid POSIX locale value, other than "C" and "POSIX".  Assume further that
you're living in Japan.  You might want to use the language code "ja" and the
territory "JP", thus setting, say, <envar>LANG</envar> to "ja_JP".  You didn't
set a character set, so what will Cygwin use now?  Starting with Cygwin 1.7.2,
the default character set is determined by the default Windows ANSI codepage
for this language and territory.  Cygwin uses a character set which is the
typical Unix-equivalent to the Windows ANSI codepage.  For instance:</para>

<screen>
  "en_US"		ISO-8859-1
  "el_GR"		ISO-8859-7
  "pl_PL"		ISO-8859-2
  "pl_PL@@euro"		ISO-8859-15
  "ja_JP"		EUCJP
  "ko_KR"		EUCKR
  "te_IN"		UTF-8
</screen>
</listitem>

<listitem><para>
You don't want to use the default character set?  In that case you have to
specify the charset explicitly.  For instance, assume you're from Japan and
don't want to use the japanese default charset EUC-JP, but the Windows
default charset SJIS.  What you can do, for instance, is to set the
<envar>LANG</envar> variable in the <command>mintty</command> Cygwin Terminal
in the "Text" section of its "Options" dialog.  If you're starting your
Cygwin session via a batch file or a shortcut to a batch file, you can also
just set LANG there:</para>

<screen>
  @@echo off

  C:
  chdir C:\cygwin\bin
  set LANG=ja_JP.SJIS
  bash --login -i
</screen>

<note><para>For a list of locales supported by your Windows machine, use the new
<command>locale -a</command> command, which is part of the Cygwin package.
For a description see <xref linkend="locale"></xref></para></note>

<note><para>For a list of supported character sets, see
<xref linkend="setup-locale-charsetlist"></xref>
</para></note>
</listitem>

<listitem><para>
Last, but not least, most singlebyte or doublebyte charsets have a big
disadvantage.  Windows filesystems use the Unicode character set in the
UTF-16 encoding to store filename information.  Not all characters
from the Unicode character set are available in a singlebyte or doublebyte
charset.  While Cygwin has a workaround to access files with unusual
characters (see <xref linkend="pathnames-unusual"></xref>), a better
workaround is to use always the UTF-8 character set.</para>

<para><emphasis>UTF-8 is the only multibyte character set which can represent
every Unicode character.</emphasis></para>

<screen>
  set LANG=es_MX.UTF-8
</screen>

<para>For a description of the Unicode standard, see the homepage of the
<ulink url="http://www.unicode.org/">Unicode Consortium</ulink>.
</para></listitem>

</itemizedlist>

</sect2>

<sect2 id="setup-locale-console"><title>The Windows Console character set</title>

<para>Sometimes the Windows console is used to run Cygwin applications.
While terminal emulations like the Cygwin Terminal <command>mintty</command>
or <command>xterm</command> have a distinct way to set the character set
used for in- and output, the Windows console hasn't such a way, since it's
not an application in its own right.</para>

<para>This problem is solved in Cygwin as follows.  When a Cygwin
process is started in a Windows console (either explicitly from cmd.exe,
or implicitly by, for instance, running the
<filename>C:\cygwin\Cygwin.bat</filename> batch file), the Console character
set is determined by the setting of the aforementioned
internationalization environment variables, the same way as described in
<xref linkend="setup-locale-how"></xref>.  </para>

<para>What is that good for?  Why not switch the console character set with
the applications requirements?  After all, the application knows if it uses
localization or not.  However, what if a non-localized application calls
a remote application which itself is localized?  This can happen with
<command>ssh</command> or <command>rlogin</command>.  Both commands don't
have and don't need localization and they never call
<function>setlocale</function>.  Setting one of the internationalization
environment variable to the same charset as the remote machine before
starting <command>ssh</command> or <command>rlogin</command> fixes that
problem.</para>

</sect2>

<sect2 id="setup-locale-problems"><title>Potential Problems when using Locales</title>

<para>
You can set the above internationalization variables not only when
starting the first Cygwin process, but also in your Cygwin shell on the
fly, even switch to yet another character set, and yet another.  In bash
for instance:</para>

<screen>
  <prompt>bash$</prompt> export LC_CTYPE="nl_BE.UTF-8"
</screen>

<para>However, here's a problem.  At the start of the first Cygwin process
in a session, the Windows environment is converted from UTF-16 to UTF-8.
The environment is another of the system objects stored in UTF-16 in
Windows.</para>

<para>As long as the environment only contains ASCII characters, this is
no problem at all.  But if it contains native characters, and you're planning
to use, say, GBK, the environment will result in invalid characters in
the GBK charset.  This would be especially a problem in variables like
<envar>PATH</envar>.  To circumvent the worst problems, Cygwin converts
the <envar>PATH</envar> environment variable to the charset set in the
environment, if it's different from the UTF-8 charset.</para>

<note><para>Per POSIX, the name of an environment variable should only
consist of valid ASCII characters, and only of uppercase letters, digits, and
the underscore for maximum portability.</para></note>

<para>Symbolic links, too, may pose a problem when switching charsets on
the fly.  A symbolic link contains the filename of the target file the
symlink points to.  When a symlink had been created with older versions
of Cygwin, the current ANSI or OEM character set had been used to store
the target filename, dependent on the old <envar>CYGWIN</envar>
environment variable setting <envar>codepage</envar> (see <xref
linkend="cygwinenv-removed-options"></xref>.  If the target filename
contains non-ASCII characters and you use another character set than
your default ANSI/OEM charset, the target filename of the symlink is now
potentially an invalid character sequence in the new character set.
This behaviour is not different from the behaviour in other Operating
Systems.  So, if you suddenly can't access a symlink anymore which
worked all these years before, maybe it's because you switched to
another character set.  This doesn't occur with symlinks created with
Cygwin 1.7 or later.  </para>

<para>Another problem you might encounter is that older versions of
Windows did not install all charsets by default.  If you are running
Windows XP or older, you can open the "Regional and Language Options"
portion of the Control Panel, select the "Advanced" tab, and select
entries from the "Code page conversion tables" list.  The following
entries are useful to cygwin: 932/SJIS, 936/GBK, 949/EUC-KR, 950/Big5,
20932/EUC-JP.</para>

</sect2>

<sect2 id="setup-locale-charsetlist"><title>List of supported character sets</title>

<para>Last but not least, here's the list of currently supported character
sets.  The left-hand expression is the name of the charset, as you would use
it in the internationalization environment variables as outlined above.
Note that charset specifiers are case-insensitive.  <literal>EUCJP</literal>
is equivalent to <literal>eucJP</literal> or <literal>eUcJp</literal>.
Writing the charset in the exact case as given in the list below is a
good convention, though.
</para>

<para>The right-hand side is the number of the equivalent Windows
codepage as well as the Windows name of the codepage.  They are only
noted here for reference.  Don't try to use the bare codepage number or
the Windows name of the codepage as charset in locale specifiers, unless
they happen to be identical with the left-hand side.  Especially in case
of the "CPxxx" style charsets, always use them with the trailing "CP".</para>

<para>This works:</para>

<screen>
  set LC_ALL=en_US.CP437
</screen>

<para>This does <emphasis>not</emphasis> work:</para>

<screen>
  set LC_ALL=en_US.437
</screen>

<para>You can find a full list of Windows codepages on the Microsoft MSDN page
<ulink url="http://msdn.microsoft.com/en-us/library/dd317756(VS.85).aspx">Code Page Identifiers</ulink>.</para>

<screen>
    Charset               Codepage
    -------------------   -------------------------------------------
    ASCII                 20127 (US_ASCII)

    CP437                   437 (OEM United States)
    CP720                   720 (DOS Arabic)
    CP737                   737 (OEM Greek)
    CP775                   775 (OEM Baltic)
    CP850                   850 (OEM Latin 1, Western European)
    CP852                   852 (OEM Latin 2, Central European)
    CP855                   855 (OEM Cyrillic)
    CP857                   857 (OEM Turkish)
    CP858                   858 (OEM Latin 1 + Euro Symbol)
    CP862                   862 (OEM Hebrew)
    CP866                   866 (OEM Russian)
    CP874                   874 (ANSI/OEM Thai)
    CP932		    932 (Shift_JIS, not exactly identical to SJIS)
    CP1125                 1125 (OEM Ukraine)
    CP1250                 1250 (ANSI Central European)
    CP1251                 1251 (ANSI Cyrillic)
    CP1252                 1252 (ANSI Latin 1, Western European)
    CP1253                 1253 (ANSI Greek)
    CP1254                 1254 (ANSI Turkish)
    CP1255                 1255 (ANSI Hebrew)
    CP1256                 1256 (ANSI Arabic)
    CP1257                 1257 (ANSI Baltic)
    CP1258                 1258 (ANSI/OEM Vietnamese)

    ISO-8859-1            28591 (ISO-8859-1)
    ISO-8859-2            28592 (ISO-8859-2)
    ISO-8859-3            28593 (ISO-8859-3)
    ISO-8859-4            28594 (ISO-8859-4)
    ISO-8859-5            28595 (ISO-8859-5)
    ISO-8859-6            28596 (ISO-8859-6)
    ISO-8859-7            28597 (ISO-8859-7)
    ISO-8859-8            28598 (ISO-8859-8)
    ISO-8859-9            28599 (ISO-8859-9)
    ISO-8859-10             -   (not available)
    ISO-8859-11             -   (not available)
    ISO-8859-13           28603 (ISO-8859-13)
    ISO-8859-14             -   (not available)
    ISO-8859-15           28605 (ISO-8859-15)
    ISO-8859-16             -   (not available)

    Big5                    950 (ANSI/OEM Traditional Chinese)
    EUCCN or euc-CN         936 (ANSI/OEM Simplified Chinese)
    EUCJP or euc-JP       20932 (EUC Japanese)
    EUCKR or euc-KR         949 (EUC Korean)
    GB2312                  936 (ANSI/OEM Simplified Chinese)
    GBK                     936 (ANSI/OEM Simplified Chinese)
    GEORGIAN-PS             -   (not available)
    KOI8-R                20866 (KOI8-R Russian Cyrillic)
    KOI8-U                21866 (KOI8-U Ukrainian Cyrillic)
    PT154                   -   (not available)
    SJIS                    -   (not available, almost, but not exactly CP932)
    TIS620 or TIS-620       874 (ANSI/OEM Thai)

    UTF-8 or utf8         65001 (UTF-8)
</screen>

</sect2>

</sect1>

<sect1 id="setup-files"><title>Customizing bash</title>

<para>
To set up bash so that cut and paste work properly, click on the
"Properties" button of the window, then on the "Misc" tab.  Make sure
that "QuickEdit mode" and "Insert mode" are checked.  These settings
will be remembered next time you run bash from that shortcut. Similarly
you can set the working directory inside the "Program" tab. The entry
"%HOME%" is valid, but requires that you set <envar>HOME</envar> in
the Windows environment.
</para>

<para>
Your home directory should contain three initialization files
that control the behavior of bash.  They are
<filename>.profile</filename>, <filename>.bashrc</filename> and
<filename>.inputrc</filename>.  The Cygwin base installation creates
stub files when you start bash for the first time.</para>

<para>
<filename>.profile</filename> (other names are also valid, see the bash man
page) contains bash commands.  It is executed when bash is started as login
shell, e.g. from the command <command>bash --login</command>.
This is a useful place to define and
export environment variables and bash functions that will be used by bash
and the programs invoked by bash.  It is a good place to redefine
<envar>PATH</envar> if needed.  We recommend adding a ":." to the end of
<envar>PATH</envar> to also search the current working directory (contrary
to DOS, the local directory is not searched by default).  Also to avoid
delays you should either <command>unset</command> <envar>MAILCHECK</envar> 
or define <envar>MAILPATH</envar> to point to your existing mail inbox.
</para>

<para>
<filename>.bashrc</filename> is similar to
<filename>.profile</filename> but is executed each time an interactive
bash shell is launched.  It serves to define elements that are not
inherited through the environment, such as aliases. If you do not use
login shells, you may want to put the contents of
<filename>.profile</filename> as discussed above in this file
instead.
</para>

<para>
<screen>
shopt -s nocaseglob
</screen>
will allow bash to glob filenames in a case-insensitive manner.
Note that <filename>.bashrc</filename> is not called automatically for login 
shells. You can source it from <filename>.profile</filename>.
</para>

<para>
<filename>.inputrc</filename> controls how programs using the readline
library (including <command>bash</command>) behave.  It is loaded
automatically.  For full details see the <literal>Function and Variable
Index</literal> section of the GNU <systemitem>readline</systemitem> manual.
Consider the following settings:
<screen>
# Ignore case while completing
set completion-ignore-case on
# Make Bash 8bit clean
set meta-flag on
set convert-meta off
set output-meta on
</screen>
The first command makes filename completion case insensitive, which can
be convenient in a Windows environment.  The next three commands allow
<command>bash</command> to display 8-bit characters, useful for
languages with accented characters.  Note that tools that do not use
<systemitem>readline</systemitem> for display, such as
<command>less</command> and <command>ls</command>, require additional
settings, which could be put in your <filename>.bashrc</filename>:
<screen>
alias less='/bin/less -r'
alias ls='/bin/ls -F --color=tty --show-control-chars'
</screen>
</para>

</sect1>

@


1.51
log
@	* setup2.sgml: Fix more typos.
	* setup-net.sgml: Ditto.
@
text
@@


1.50
log
@	* faq-using.xml: Fix typos.
	* ntsec.sgml: Ditto.
	* pathnames.sgml: Ditto.
	* setup2.sgml: Ditto.
	* setup-net.sgml: Ditto.
	(setup-dir): Drop paragraph on Unix/DOS file mode.
@
text
@d493 1
a493 1
the underscore for maximum portabilty.</para></note>
@


1.49
log
@	* faq-using.xml (faq.using.converting-paths): Remove reference to
	cygwin.bat.
	(faq.using.emacs): Drop "CYGWIN=tty" setting.
	* pathnames.sgml (pathnames-posixdevices): Align list of device names
	with changes in 1.7.10.
	* setup2.sgml (setup-env-ov): Drop text which assumes that Cygwin
	processes are started in console window.  Align wording to lessened
	relevance of $CYGWIN.  Don't use dropped CYGWIN setting in example.
	(setup-locale-how): Put using console and Cygwin.bat file into
	perspective.
	(setup-locale-problems): Ditto.
@
text
@d420 1
a420 1
workaround is to use always the UTF-8 character set.i</para>
d493 1
a493 1
the underscore for maximum portablilty.</para></note>
@


1.48
log
@	* new-features.sgml (ov-new1.7.10): Document large address awareness
	of heap and new way to set the default heap size per executable.
	* setup2.sgml (setup-maxmem): Revamp to explain new method of
	allocating more heap on a per-executable basis.  Drop outdated stuff.
	Keep shortened description of heap_chunk_in_mb as note.
@
text
@d6 3
a8 11
You may wish to specify settings of several important environment
variables that affect Cygwin's operation.  Some of these settings need
to be in effect prior to launching the initial Cygwin session (before
starting your bash shell, for instance).  They should therefore be set
in the Windows environment; all Windows environment variables are
imported when Cygwin starts.  Such settings can be
placed in a .bat file.  An initial file is named Cygwin.bat and is created
in the Cygwin root directory that you specified during setup.  Note that
the "Cygwin" option of the Start Menu points to Cygwin.bat.  Edit
Cygwin.bat to your liking or create your own .bat files to start
Cygwin processes.</para>
d11 5
a15 5
The <envar>CYGWIN</envar> variable is used to configure many global
settings for the Cygwin runtime system.  Initially you can leave
<envar>CYGWIN</envar> unset or set it to a value indicating several
global Cygwin settings, using a syntax like this in the DOS shell,
before launching bash:</para>
d18 1
a18 1
<prompt>C:\&gt;</prompt> <userinput>set CYGWIN=notitle glob</userinput>
d22 1
a22 1
This is, of course, just an example.  For all possible settings of the
d390 4
a393 3
<envar>LANG</envar> variable in the <filename>C:\cygwin\Cygwin.bat</filename>
file which is the batch file to start a Cygwin session from the "Cygwin"
desktop shortcut.</para>
d439 3
a441 3
<para>Most of the time the Windows console is used to run Cygwin applications.
While terminal emulations like <command>xterm</command> or
<command>mintty</command> have a distinct way to set the character set
d447 5
a451 5
or implicitly by, for instance, clicking on the Cygwin desktop icon, or
running the Cygwin.bat file), the Console character set is determined by the
setting of the aforementioned internationalization environment variables,
the same way as described in <xref linkend="setup-locale-how"></xref>.
</para>
d469 4
a472 4
You can set the above internationalization variables not only in
<filename>Cygwin.bat</filename> or in the Windows environment, but also
in your Cygwin shell on the fly, even switch to yet another character
set, and yet another.  In bash for instance:</para>
@


1.47
log
@	* setup2.sgml (setup-env-ov): Make sure everybody knows that the
	CYGWIN settings are just an example.
@
text
@d141 7
a147 4
adding an entry in the either the <literal>HKEY_LOCAL_MACHINE</literal>
(to change the limit for all users) or
<literal>HKEY_CURRENT_USER</literal> (for just the current user) section
of the registry.  </para>
d150 3
a152 9
Add the <literal>DWORD</literal> value <literal>heap_chunk_in_mb</literal> 
and set it to the desired memory limit in decimal MB. It is preferred to do 
this in Cygwin using the <command>regtool</command> program included in the 
Cygwin package.
(For more information about <command>regtool</command> or the other Cygwin 
utilities, see <xref linkend="using-utils"></xref> or use the
<literal>--help</literal> option of each util.)  You should always be careful 
when using <command>regtool</command> since damaging your system registry can 
result in an unusable system.  This example sets memory limit to 1024 MB:
d155 4
a158 2
regtool -i set /HKLM/Software/Cygwin/heap_chunk_in_mb 1024
regtool -v list /HKLM/Software/Cygwin
d163 10
a172 5
Exit all running Cygwin processes and restart them. Memory can be allocated up 
to the size of the system swap space minus any the size of any running 
processes. The system swap should be at least as large as the physically 
installed RAM and can be modified under the System category of the 
Control Panel.  
d175 1
d177 11
a187 2
Here is a small program written by DJ Delorie that tests the 
memory allocation limit on your system:
d190 2
a191 15
main()
{
  unsigned int bit=0x40000000, sum=0;
  char *x;
  
  while (bit > 4096) 
  {
    x = malloc(bit);
    if (x)
    sum += bit;
    bit >>= 1;
  }
  printf("%08x bytes (%.1fMb)\n", sum, sum/1024.0/1024.0);
  return 0;
}
a192 7

You can compile this program using:
<screen>
gcc max_memory.c -o max_memory.exe
</screen>

Run the program and it will output the maximum amount of allocatable memory.
d194 1
@


1.46
log
@	* setup2.sgml (setup-locale-ov): Document CJK ambiguous width change
	for non-Unicode charsets.
	* new-features.sgml (ov-new1.7.8): Mention CJK ambiguous width change.
	Drop redundant NT4 pre-SP4 support entry.
@
text
@d21 3
a23 3
<envar>CYGWIN</envar> unset or set it to <literal>tty</literal> (e.g.
to support job control with ^Z etc...) using a syntax like this in the
DOS shell, before launching bash.</para>
d26 1
a26 1
<prompt>C:\&gt;</prompt> <userinput>set CYGWIN=tty notitle glob</userinput>
d30 3
a32 2
For all possible settings of the <envar>CYGWIN</envar> environment variable,
see <xref linkend="using-cygwinenv"></xref>.
@


1.45
log
@	* setup2.sgml (setup-locale-how): Fix typo.
@
text
@d356 10
a365 11
"CJK Ambiguous Width Character set".  For these characters the width
returned by the wcwidth/wcswidth function is usually 1.  This is often a
problem in East-Asian languages, which historically use character sets
in which these characters have a width of 2.  By default, the
wcwidth/wcswidth functions return 1 as the width of these characters,
except if the language is specifed as "ja" (Japanese), "ko" (Korean), or
"zh" (Chinese).  In these languages wcwidth and wcswidth return 2 for
these characters.  This is not correct in all circumstances, so the user
of one of these languages can specify the modifier "@@cjknarrow", which
modifies the behaviour of wcwidth/wcswidth to return 1 for the ambiguous
width characters.
@


1.44
log
@	* faq-programming.xml (faq.programming.win32-api): Remove simplicity.
	Add note and xrefs to User's Guide chapters explaining restrictions
	using the Win32 API.
	* new-features.sgml (ov-new1.7.6): Add note about Win CWD.
	* overview2.sgml (ov-hi-intro): Add note and xrefs about Win32 API
	restrictions.  Tone down flexibility.
	* pathnames.sgml (pathnames-intro): Add xref to pathnames-win32-api
	section.
	(pathnames-win32-api): New section describing Win32 CWD restriction.
	* setup2.sgml (setup-env-ov): New sub-section.
	(setup-env-win32): Ditto, describing Win32 environment restriction.
@
text
@d417 1
a417 1
><command>locale -a</command> command, which is part of the Cygwin package.
@


1.43
log
@	* setup2.sgml (setup-locale-charsetlist): Add EUC-CN and GB2312.
@
text
@d3 2
d104 28
@


1.42
log
@	* setup2.sgml (setup-env): Add cross reference to using-cygwinenv.
	Change description for locale environment variables to comply with
	changes in 1.7.2.
@
text
@d582 1
d585 1
@


1.41
log
@	* new-features.sgml (ov-new1.7.2): Accommodate name change of getlocale
	to locale.
	* setup2.sgml (setup-locale-how): Ditto.
@
text
@d28 5
d34 3
a36 5
<envar>LC_xxx</envar> environment variables.  You can set all of them
but Cygwin itself only honors the variables <envar>LC_ALL</envar>,
<envar>LC_CTYPE</envar>, and <envar>LANG</envar>, in this order, according
to the POSIX standard.  The first one found rules.  For a more detailed
description see <xref linkend="setup-locale"></xref>.
@


1.40
log
@	* new-features.sgml (ov-new1.7.2): Add LC_MESSAGES support.
	* setup2.sgml (setup-locale-ov): Change "@@euro" modifier description.
	(setup-locale-missing): Remove.
@
text
@d384 2
a385 2
><command>getlocale -a</command> command, which is part of the Cygwin package.
For a description see <xref linkend="getlocale"></xref></para></note>
@


1.39
log
@	* new-features.sgml (ov-new1.7.2): Add support for locales from
	/usr/share/locale/locale.alias.
	* setup2.sgml (setup-locale-ov): Ditto.
@
text
@d294 4
a297 4
<listitem><para>For languages which default to the ISO-8859-1 character
set, the modifier "@@euro" can be added to enforce usage of the ISO-8859-15
character set, which includes a character for the "Euro" currency sign.
Beware, that also works for non-european locales.
a499 18
<sect2 id="setup-locale-missing"><title>What does not work?</title>

<para>
The environment variable and locale setting <envar>LC_MESSAGES</envar>
is ignored right now.  There's no known WIndows function to fetch the
regular expressions to recognize user input with the meaning of "yes"
or "no" from some Windows function.  Therefore,
<function>nl_langinfo(YESEXPR)</function> and
<function>nl_langinfo(NOEXPR)</function> always return a string
suitable only for the English language.</para>

<para>If somebody knows a simple solution to this problem, feel free
to notify us on the 
<ulink url="mailto:cygwin@@cygin.com">Cygwin mailing list</ulink>.
</para>

</sect2>
 
@


1.38
log
@	* setup2.sgml (setup-locale-ov): Align description of working modifiers
	to latest changes.
@
text
@d207 19
@


1.37
log
@	* new-features.sgml (ov-new1.7.2): Add support for new charsets.
	Change text for modifier support.
	(setup-locale-charsetlist): Add new GEORGIAN-PS and PT154 charsets
	to list of supported charsets.  Reorder list for non-ISO, non-CP
	charsets alphabetically.
@
text
@d275 16
a290 4
<listitem><para>For languages which default to one of the ISO-8859 character
sets, the modifier "@@euro" can be added to enforce usage of the ISO-8859-15
character set, which includes a character for the "Euro" currency sign .</para>
</listitem>
d293 2
a294 2
The default charset of the "uz_UZ" locale is ISO-8859-1.  With the "@@cyrillic"
modifier it's UTF-8.
d298 2
a299 2
The default charset of the "tt_RU" locale is ISO-8859-5.  With the "@@iqtelif"
modifier it's UTF-8.
d302 3
a304 2
<listitem><para>There's a class of characters in the Unicode character set,
called the "CJK Ambiguous Width Character set".  For these characters the width
d306 10
a315 9
problem in East-Asian languages, which historically use character sets in
which these characters have a width of 2.  By default, the wcwidth/wcswidth
functions return 1 as the width of these characters, except if the language is
specifed as "ja" (Japanese), "ko" (Korean), or "zh" (Chinese).  In these
languages wcwidth and wcswidth return 2 for these characters.  This is not
correct in all circumstances, so the user of one of these languages can specify
the modifier "@@cjknarrow", which modifies the behaviour of wcwidth/wcswidth to
return 1 for the ambiguous width characters.</para>
</listitem>
@


1.36
log
@	* setup2.sgml (setup-locale-ov): Add description for "uz_UZ@@cyrillic"
	and "tt_RU@@iqtelif" modifiers.  Slightly rephrase locale specifier
	description in terms of the modifier string.
@
text
@a562 4
    KOI8-R                20866 (KOI8-R Russian Cyrillic)
    KOI8-U                21866 (KOI8-U Ukrainian Cyrillic)
    SJIS                      - (not available, almost, but not exactly CP932)
    GBK                     936 (ANSI/OEM Simplified Chinese)
d566 6
@


1.35
log
@	* setup2.sgml (setup-locale-charsetlist): Add CP932.  Change description
	for SJIS.
@
text
@d191 2
a192 2
one of a list of supported character sets, and the modifier doesn't matter
here (though it might for some applications).  If you're interested in the
d270 2
a271 1
<para>The modifier is used for two cases.</para>
d280 10
@


1.34
log
@	* setup2.sgml (setup-locale-charsetlist): Add ASCII and TIS-620.  Add
	various aliases and case differences.
@
text
@d524 1
d554 1
a554 1
    SJIS                    932 (ANSI/OEM Japanese)
@


1.33
log
@	* new-features.sgml (ov-new1.7.2): Add chapter for news in 1.7.2.
	* setup2.sgml (setup-locale-ov): Describe how valid locales are
	determined by Windows locale support.  Change description for modifiers
	in locale environment variables.
	(setup-locale-how): Describe new charset behaviour.  Mention new
	getlocale tool to fetch valid locale information from Windows.
	(setup-locale-missing): Drop now implemented LC_foo options.
	Explain missing LC_MESSAGES in more detail.
@
text
@d509 2
d556 3
a558 2
    eucJP                 20932 (EUC Japanese)
    eucKR                   949 (EUC Korean)
d560 1
a560 1
    UTF-8 or UTF8         65001 (UTF-8)
@


1.32
log
@	* setup2.sgml (setup-locale): Mention three character codes per
	ISO 639-3.

	* setup2.sgml (setup-locale): Adapt description to the C using ASCII
	change in 1.7.2.
@
text
@d258 1
a258 1
<para>When the locale set in the environment specifies an ASCII charset,
d265 4
a268 8
Right now the language and territory, as well as the modifier, are not
important to Cygwin, except to fix a single problem.  There's a class of
characters in the Unicode character set, called the "CJK Ambiguous Width
Character set".  For these characters the width returned by the
wcwidth/wcswidth function is usually 1.  This is often a problem in
East-Asian languages, which historically use character sets in which
these characters have a width of 2.  Kind of explains why they are
called "ambiguous"...</para>
d270 8
a277 8
<para>
The problem has been fixed like this.  wcwidth/wcswidth usually
return 1 as the width of these characters.  However, if the language is
specifed as "ja" (Japanese), "ko" (Korean), or "zh" (Chinese), wcwidth
returns 2 for these characters.  Unfortunately this isn't correct in
all circumstances, so the user can specify the modifier "@@cjknarrow",
which modifies the behaviour of wcwidth/wcswidth to return 1 for the
ambiguous width characters to return 1 even in those languages.</para>
d279 12
a290 2
<para>
Other than that, the only important part so far is the character set.
d292 1
a292 1
How does that work?</para>
d305 4
a308 3
set a character set, so what will Cygwin use now?  Easy!  It will use the
default Windows ANSI codepage of your system, if it's supported by Cygwin.
Hopefully Cygwin supports all relevant default ANSI codepages...</para>
d310 9
a318 3
<note><para>For a list of supported character sets, see
<xref linkend="setup-locale-charsetlist"></xref>
</para></note>
d322 7
a328 7
You don't want to use the default Windows codepage as character set?
In that case you have to specify the charset explicitly.  For instance,
assume you're from Italy and don't want to use the Italian default Windows
ANSI codepage 1252, but the more portable ISO-8859-15 character set.
What you can do, for instance, is to set the <envar>LANG</envar> variable
in the <filename>C:\cygwin\Cygwin.bat</filename> file which is the batch file
to start a Cygwin session from the "Cygwin" desktop shortcut.</para>
d335 1
a335 1
  set LANG=it_IT.ISO-8859-15
d338 8
d459 11
a469 9
Except for <envar>LC_ALL</envar>, <envar>LC_CTYPE</envar>,
and <envar>LANG</envar>, all other LC_xxx environment variables,
<envar>LC_COLLATE</envar>, <envar>LC_MESSAGES</envar>,
<envar>LC_MONETARY</envar>, <envar>LC_NUMERIC</envar>,
and <envar>LC_TIME</envar>, are ignored right now.  This means, while Cygwin
supports different character sets, it does <emphasis>not</emphasis> support
real localization so far.  There's no support for locale-specific monetary
symbols, for a decimalpoint other than '.', no support for native time
formats, and no support for native language sorting orders.
a471 3
<para>Cygwin's internationalization support is work in progress and we would
be glad for coding help in this area.</para>

@


1.31
log
@	* setup2.sgml (setup-env): Clarify that Windows environment gets
	copied over.  Add paragraph about TMP, TEMP, and TMPDIR.
@
text
@d186 5
a190 2
<para>"language" is a lowercase two character string per ISO 639-1,
"TERRITORY" is an uppercase two character string per ISO 3166, charset is
d203 1
d208 5
a212 4
"C" or "POSIX" locale.  Under Cygwin, this locale defaults to the UTF-8
character set.  If you want to stick to the "C" locale and only change to
another charset, you can define this by setting one of the locale environment
variables to "C.charset".  For instance</para>
d218 2
a219 2
<para>The default locale in the absence of the aforementioned locale
environment variables is "C.UTF-8".</para>
d240 2
a241 2
it's the applications responsibility to activate that locale for its
own purpose, typically by using the call</para>
d252 12
a294 5
The default locale is the "C" or "POSIX" locale.  Under Cygwin this locale
defaults to the UTF-8 character set.</para>
</listitem>

<listitem><para>
@


1.30
log
@	* new-features.sgml (ov-new1.7-posix): Mention UTF-8 as "C" default
	and the default locale "C.UTF-8".
	* setup2.sgml (setup-locale-ov): Ditto.
@
text
@d7 3
a9 1
starting your bash shell, for instance), and are, consequentially, best
d71 28
@


1.29
log
@	* setup2.sgml (setup-locale-ov): Fix typo in C+charset example.
	Rephrase how the locale environment variables are evaluated.
@
text
@d183 3
d212 4
a215 1
<para>early in the application code.</para>
@


1.28
log
@	* new-features.sgml (ov-new1.7-file): Ctrl-X, not Ctrl-N.
	* pathnames.sgml (pathnames-unusual): Ditto.
	* setup2.sgml (setup-locale-ov): Change description according to
	latest changes.
	(setup-locale-how): Rewrite.
	(setup-locale-console): Enable section again.  Change to reflect
	recent changes.
	(setup-locale-problems): Change to reflect recent changes.
@
text
@d180 1
a180 1
  "C.ISO-9959-1"
d188 6
a193 1
to the singlebyte or multibyte character set used by Cygwin.  Setting
d195 2
a196 1
converted in subsequently stated programs.</para>
@


1.27
log
@	* setup2.sgml (setup-locale-problems): Fix charset names of codepages
	936 and 949.
@
text
@d173 31
a203 5
And let's not forget the default locale called "C" or "POSIX"
which basically only supports plain ASCII code.  If the aforementioned
environment variables are not set, or set to "C" or "POSIX", you get the
default ASCII-only behaviour.
</para>
d216 1
a216 1
The problem has been fixed for now like this.  wcwidth/wcswidth usually
d226 1
d236 3
a238 13
The default locale is the "C" or "POSIX" locale.  In this locale, basically
only ASCII characters are supported.  Even if one of the aforementioned
environment variables are set to something else, it's the application's
responsibility to call the function <function>setlocale</function>,
typically like this</para>

<screen>
  setlocale (LC_ALL, "");
</screen>

<para>to switch to another locale according to the settings of the
internationalization environment variables.
</para></listitem>
d242 6
a247 9
valid POSIX locale value, other than "C" and "POSIX", and assume that you
call an application which calls <function>setlocale</function> as above.</para>

<para>Assume further that you're living in Japan.  You might want to use
the language code "ja" and the territory "JP", thus setting, say,
<envar>LANG</envar> to "ja_JP".  You didn't set a character set, so
what will Cygwin use now?  Easy!  It will use the default Windows ANSI
codepage of your system, if it's supported by Cygwin.  Hopefully Cygwin
supports all relevant default ANSI codepages...</para>
d257 4
a260 4
assume you're from Italy and don't want to use the default Windows codepage
1252, but the more portable ISO-8859-15 character set.  What you can do is
to set the <envar>LANG</envar> variable in the
<filename>C:\cygwin\Cygwin.bat</filename> file which is the batch file
d274 3
a276 2
Most singlebyte or doublebyte charsets have a disadvantage.  Windows
filesystems use the Unicode character set in the UTF-16 encoding to store filename information.  Not all characters
d280 4
a283 3
workaround is to use always the UTF-8 character set.  UTF-8 is the only
multibyte character set which can represent <emphasis>every</emphasis>
Unicode character.</para>
a296 1
<!-- TODO: This is not correct anymore.
d305 1
a305 1
<para>This problem is solved in Cygwin as follows.  When the first Cygwin
d313 10
a322 18
<para>However, in contrast to the application's character set, which is
determined by the <function>setlocale</function> call, the console
character set stays fixed for all subsequent Cygwin processes started
from this first Cygwin process in the console.  So, for instance, if
<envar>LANG</envar> was set to "en_US.UTF-8" when the first Cygwin process
started, the console is a UTF-8 terminal for the entire Cygwin process
tree started from this first Cygwin process.</para>

<para>You're asking "What is that good for?  Why not switch the console
character set with the applications requirements?  After all, the
application knows if it uses localization or not."  That's true, but
what if the non-localized application calls a remote application which
itself is localized?  This can happen with <command>ssh</command> or
<command>rlogin</command>.  Both commands don't have and don't need
localization and they never call <function>setlocale</function>.  This
would have the unfortunate effect, that the console would run with the
ASCII character set alone.  Native characters printed from the remote
application would not show up correctly on your local console.</para>
a324 1
-->
d339 3
a341 10
in a session, the Windows environment has to be converted from UTF-16 to
some singlebyte or multibyte charset.  If the internationalization environment
variable hasn't been set <emphasis>before</emphasis> starting this process,
Cygwin has to make an educated guess which charset to use to convert
the environment itself.  The only reproducible way to do that in the absence
of <envar>LC_ALL</envar>, <envar>LC_CTYPE</envar>, or <envar>LANG</envar>,
is to use the "C" locale.  The default conversion in the "C" locale
used by Cygwin internally is UTF-8.  So, in the absence of any
internationalization environment variable, the environment will be converted
to UTF-8.</para>
d347 3
a349 1
<envar>PATH</envar>.</para>
@


1.26
log
@* setup2.sgml (setup-locale-problems): Document how to install
non-default charsets.
@
text
@d375 1
a375 1
entries are useful to cygwin: 932/SJIS, 936/EUC-KR, 949/GBK, 950/Big5,
@


1.25
log
@* cygwin/strfuncs.cc (__set_charset_from_codepage): Add codepages 20866
(KOI8-R) and 21866 (KOI8-U).

* doc/setup2.sgml (setup-locale-charsetlist): Add KOI8-R and KOI8-U to list of
supported charsets.
@
text
@d370 8
@


1.24
log
@	* setup2.sgml (setup-locale-charsetlist): Add description of
	case-insensitivity of charsets.  Fix a typo.  Add "UTF8" to the list.
@
text
@d466 2
@


1.23
log
@	* setup2.sgml (setup-locale-charsetlist): Fix ISO88-59-13 and -15
	codepage numbers.
@
text
@d390 1
a390 1

d396 4
d407 1
a407 1
oif the "CPxxx" style charsets, always use them with the trailing "CP".</para>
d472 1
a472 1
    UTF-8                 65001 (UTF-8)
@


1.22
log
@	* new-features.sgml (ov-new1.7-misc): Add new link libs.
	* setup2.sgml (setup-locale-ov): Explain locale-specific wcwidth
	feature.
@
text
@d457 1
a457 1
    ISO-8859-13           28563 (ISO-8859-13)
d459 1
a459 1
    ISO-8859-15           28565 (ISO-8859-15)
@


1.21
log
@Change explicitely to explicitly throughout.
@
text
@d180 21
a200 4
Right now the language and territory content is not evaluated by Cygwin any
further.  The only important part so far is the character set.  How does that
work?
</para>
@


1.20
log
@	* setup2.sgml (setup-locale-console): Disable section for now.
@
text
@d225 1
a225 1
In that case you have to specify the charset explicitely.  For instance,
d274 1
a274 1
process is started in a Windows console (either explicitely from cmd.exe,
@


1.19
log
@	* pathnames.sgml (pathnames-unusual): Talk about using UTF-8 in C
	locale.
	* setup2.sgml (setup-locale-problems): Ditto.
@
text
@d264 1
d301 1
@


1.18
log
@	* setup2.sgml (setup-locale-console): New section to explain
	console character set setting.
	* faq: Throughout, change references to User's Guide to references
	to 1.7 User's Guide temporarily.
	* faq-setup.html (faq.using.unicode): Rephrase slightly.
	(faq.using.weirdchars): New FAQ entry for console charset problems.
@
text
@d320 4
a323 1
is to use the current Windows ANSI codepage.</para>
d326 3
a328 3
no problem.  But if it contains native characters, and you're planning
to use, say, UTF-8, the environment will result in invalid characters in
the UTF-8 charset.  This would be especially a problem in variables like
@


1.17
log
@	* new-features.sgml (ov-new1.7-posix): Remove JIS from supported
	charsets.
	* setup2.sgml (setup-locale-charsetlist): Ditto.
@
text
@d264 37
@


1.16
log
@	* setup2.sgml (setup-locale-problems): Change title to be more clear
	when referencing this section.
@
text
@d406 2
a407 3
    JIS                   50220 (ISO2022 Japanese w/o halfwidth Katakana)
    eucJP                 51932 (EUC Japanese)
    eucKR                 51949 (EUC Korean)
@


1.15
log
@	* Various syntactical and semantical fixes throughout.
@
text
@d264 1
a264 1
<sect2 id="setup-locale-problems"><title>Potential Problems</title>
@


1.14
log
@	* setup2.sgml (setup-locale-problems): Fix an incomplete sentence.
@
text
@d4 9
a12 6
Before starting bash, you may set some environment variables.  A .bat
file is provided where the most important ones are set before bash in
launched.  This is the safest way to launch bash initially.  The .bat
file is installed in the root directory that you specified during setup
and pointed to in the Start Menu under the "Cygwin" option.  You can
edit it this file your liking.</para>
d88 1
a88 1
utilities, see <xref linkend="using-utils"></xref> or use each the
d207 2
a208 2
Assuming you set one of the aforementioned environment variables to some
valid POSIX locale value, other than "C" and "POSIX", and assuming you
d211 1
a211 1
<para>Assuming further you're living in Japan.  So you might want to use
d295 13
a307 13
<para>And here's another problem when switching charsets on the fly.
Symbolic links.  A symbolic link contains the filename of the target
file the symlink points to.  When a symlink had been created with older
versions of Cygwin, the current ANSI or OEM character set had been used
to store the target filename, dependent on the old <envar>CYGWIN</envar>
environment variable setting <envar>codepage</envar>
(see <xref linkend="cygwinenv-removed-options"></xref>.  If the target
filename contains non-ASCII characters and you use another
character set than your default ANSI/OEM charset, the target filename of
the symlink is now potentially an invalid character sequence in the new
character set.  This behaviour is not different from the behaviour in other
Operating Systems.  So, if you suddenly can't access a symlink anymore
which worked all these years before, maybe it's because you switched to
d309 1
a309 2
Cygwin 1.7 or later.
</para>
d327 2
a328 2
<para>However, internationalization is work in progress and we would be glad
for coding help in this area.</para>
d420 1
a420 1
To set bash up so that cut and paste work properly, click on the
@


1.13
log
@	* cygwinenv.sgml: Add text to explain new UTF-16 symlinks.
	* faq-api.xml: Add FAQ entry "Why do some of my old symlinks don't
	work anymore?"
	* new-features.sgml: Fix symlink text.  Add new UTF-16 symlinks.
	* overview2.sgml: Add text about new UTF-16 symlinks and potential
	problems with old symlinks.
	* pathnames.sgml: Fix typo.
	* setup2.sgml: Extend text about problems with symlinks.
@
text
@d283 4
a286 3
no problem.  But if it does, and you're planning to use, say, UTF-8,
the environment will result in invalid characters in the UTF-8 charset.
This would be especially a problem in variables like <envar>PATH</envar>.</para>
@


1.12
log
@	* new-features.sgml: Replace GB2312 with GBK.
	* setup2.sgml: Ditto.
@
text
@d293 13
a305 8
file the symlink points to.  When a symlink is created, the current
character set is used to store the target filename.  If the target
filename contains non-ASCII characters and you switch to another
character set, the target filename of the symlink is now potentially
an invalid character sequence in the new character set.  This behaviour
is not different from the behaviour in other Operating Systems.  So,
if you suddenly can't access a symlink anymore, maybe it's because you
switched to another character set?
@


1.11
log
@	* new-features.sgml: Add missing GB2312 and eucKR character sets.
	* pathnames.sgml: Change "DOS devices" title to "Invalid filenames"
	and rephrase that section.
	Add section "Filenames with unusual (foreign) characters".
	Fix an emphasis.
	* setup-net.sgml: Integrate setup-locale section.
	* setup2.sgml: Add locale variables to section "Environment Variables".
	Add section "Internationalization".
@
text
@d396 1
a396 1
    GB2312                  936 (ANSI/OEM Simplified Chinese, GBK)
@


1.10
log
@* setup2.sgml: Clarify heap allocation.
@
text
@d16 1
a16 1
DOS shell, before launching bash.  </para>
d23 9
d136 273
@


1.9
log
@	* Revamp documentation for Cygwin 1.7, part 1.
@
text
@d62 7
a68 8
By default no Cygwin program can allocate more than 384 MB of memory 
(program+data).  You should not need to change this default in most 
circumstances.  However, if you need to use more real or virtual memory in 
your machine you may add an entry in the either the 
<literal>HKEY_LOCAL_MACHINE</literal> (to change the limit for all users) or 
<literal>HKEY_CURRENT_USER</literal> (for just the current user) section of 
the registry. 
</para>
@


1.8
log
@	* .sgml: Cleanup markup for XML validity.
@
text
@d26 3
a28 3
(e.g. <filename>C:\WinNT\system32;C:\WinNT</filename>) to UNIX format
(e.g., <filename>/WinNT/system32:/WinNT</filename>) when a Cygwin
process first starts.
d32 1
d39 2
a40 2
when a Cygwin process first starts.  Set it to point to your home directory
before launching bash. 
d83 2
a84 2
regtool -i set /HKLM/Software/Cygnus\ Solutions/Cygwin/heap_chunk_in_mb 1024
regtool -v list /HKLM/Software/Cygnus\ Solutions/Cygwin
d125 1
d133 5
a137 4
that "Quick Edit" is checked and "Fast Pasting" isn't.  These settings
will be remembered next time you run bash from that
shortcut. Similarly you can set the working directory inside the
"Program" tab. The entry "%HOME%" is valid.
d144 2
a145 3
<filename>.inputrc</filename>.  These initialization files will only
be read if <envar>HOME</envar> is defined before starting bash.
</para>
@


1.7
log
@2004-01-20  Joshua Daniel Franklin <joshuadfranklin@@yahoo.com>

	* Makefile.in: Remove unused cygwin-ug and cygwin-api-int
	targets from default build.
	* how-using.texinfo: Add information about 8-bit character
	display to FAQ.
	* setup2.sgml: Add information about 8-bit character display
	to "Setting up Cygwin".
@
text
@d76 1
a76 1
utilities, see <Xref Linkend="using-utils"> or use each the
@


1.6
log
@ * setup-net.sgml: Add "setup-maxmem" section
@
text
@d148 2
a149 2
shell, e.g. from the command <command>bash --login</command> (the provided
.bat file does not set the switch).  This is a useful place to define and
d180 3
a182 5
library (including bash) behave.  It is loaded automatically.  The
full details are in the <filename>readline.info</filename>. 
Due to a bug in the current readline version, 
<filename>.inputrc</filename> cannot contain \r,
even on text mounted systems.
d185 2
a190 2
# Ignore case while completing
set completion-ignore-case on
d192 11
a202 4
The first three commands allow bash to display 8-bit characters,
useful for languages with accented characters.  The last line makes
filename completion case insensitive, which can be convenient in a
Windows environment.
@


1.5
log
@Cleanup copyrights and Cygnus'isms throughout.
* setup.sgml: Nuke ancient instructions.
@
text
@d58 68
@


1.4
log
@* setup2.sgml: Add docs about domain accounts.
@
text
@a0 148
<sect1 id="setup-dir"><title>Directory Structure</title>

<para>
Cygwin knows how to emulate a standard UNIX directory structure, to
some extent.  This is done through the use of mount tables that map
Win32 paths to POSIX ones.  The mount table may be set up and modified
with the <command>mount</command> command. This section explains how
to properly organize the structure. </para>

<para> When you set up the system you should decide where you want the
root to be mapped.  Possible choices are the root of your Windows
system, such as
<filename>c:</filename> or a directory such as
<filename>c:\progra~1\root</filename>.
</para>

<para>
Execute the following commands inside bash as it is difficult to
change the position of the root from the Windows command prompt.
Changing the mount points may invalidate <EnVar>PATH</EnVar>, if this
happens simply exit and relaunch bash.  Create the directory if
needed, then <command>umount /</command> the current root and 
<command>mount</command> it in its new place.  You also have to decide if
you want to use text or binary mode.  
</para>

<para>
Next, create the traditional main UNIX directories, with
the following command (in some shells it is necessary to issue
separate <command>mkdir</command> commands, each with a single
argument).
</para>

<screen>
<prompt>/$</prompt> <userinput>mkdir /tmp /bin /etc /var /usr</userinput>
</screen>

<para>
Next we will initialize the content of these directories.
</para>

<para>
You should make sure that you always have a valid
<filename>/tmp</filename> directory.  If you want to avoid creating a
real <filename>/tmp</filename>, you can use the
<command>mount</command> utility to point <filename>/tmp</filename> to
another directory, such as <filename>c:\tmp</filename>, or create a
symbolic link <filename>/tmp</filename> to point to such a directory.
</para>

<para>
The <filename>/bin</filename> directory should contain the shell
<filename>sh.exe</filename>.  You have three choices.  The first is to
copy this program from the Cygnus <filename>bin</filename> directory.
The second is to use <command>mount</command> to mount the Cygnus
<filename>bin</filename> directory to <filename>/bin</filename> (the
advantage of this approach is that your <envar>PATH</envar> will be
shorter inside bash).  The third is to make <filename>/bin</filename> a
symbolic link to the Cygnus <filename>bin</filename> directory.
</para>

<para>
Note that Cygwin comes with two shells: <command>bash.exe</command> and
<command>sh.exe</command>, which is based on <command>ash</command>.  The
system is faster when <command>ash</command> is used as the 
non-interactive shell. 
The only functionality supported in <command>ash</command> is that 
of the traditional <command>sh</command>.  
In case of trouble with <command>ash</command> make
<command>sh.exe</command> point to <command>bash.exe</command>.
</para>

<para>
We now turn to <filename>/etc</filename>.  You may want to copy in it
the <filename>termcap</filename> file from the Cygnus
<filename>etc</filename> directory, although the defaults built into
the programs suffice for the normal console.  You may also use
<command>mount</command> or create as symbolic link to the Cygnus
<filename>etc</filename>, just as for <filename>/bin</filename>
above.
</para>

<para> Under Windows NT, if you want to create 
<filename>/etc/passwd</filename> and <filename>/etc/group</filename> 
(i.e. so that <command>whoami</command> works and 
<command>ls -l</command> replaces the UID with a name) based on the accounts local to the machine, just do this:
</para>

<screen>
<prompt>/$</prompt> <userinput>cd /etc</userinput>
<prompt>/etc$</prompt> <userinput>mkpasswd -l > /etc/passwd</userinput>
<prompt>/etc$</prompt> <userinput>mkgroup -l > /etc/group</userinput>
</screen>

<para>If you are logging in based on an NT network domain, and want to
also create entries in <filename>/etc/passwd</filename> and
<filename>/etc/group</filename> based on all the accounts in the
domain, then after creating local entries do this:
</para>

<screen>
<prompt>/$</prompt> <userinput>cd /etc</userinput>
<prompt>/etc$</prompt> <userinput>mkpasswd -d >> /etc/passwd</userinput>
<prompt>/etc$</prompt> <userinput>mkgroup -d >> /etc/group</userinput>
</screen>

<para>Alternatively, to add only your account to the passwd file,
assuming your NT name is "my_ntusername", instead of the above
<command>mkpasswd</command> you should do:
</para>
 
<screen>
<prompt>/$</prompt> <userinput>cd /etc</userinput>
<prompt>/etc$</prompt> <userinput>mkpasswd -d | grep my_ntusername >> /etc/passwd</userinput>
</screen>


<para> Future changes to your NT registry or network domain will NOT be reflected in
<filename>/etc/passwd</filename> or <filename>/etc/group </filename> after
this so you may want to regenerate these files periodically.  Under Windows
9x, you can create and edit these files with a text editor.  </para>

<para>
The <command>who</command> command requires the
<filename>/var/run/utmp</filename> to exist.
Create it if you wish.
The system also logs information in <filename>/var/log/wtmp</filename>,
if it exists.
</para>

<para>
The <filename>/usr</filename> directory is not used by the Cygwin
system but it is a standard place to install optional packages.
</para>

<para>
You may also want to mount directories such as <filename>/a</filename>
and <filename>/d</filename> to refer to your local and network drives.
</para>

<para>
You do not need to create <filename>/dev</filename> in order to set up
mounts for devices such as <filename>/dev/null</filename> as these
are already automatically simulated inside the Cygwin library.
</para>

</sect1>

d4 2
a5 3
Before starting bash, you must set some environment variables, some of
which can also be set or modified inside bash.  Cygnus provides you
with a .bat file where the most important ones are set before bash in
d7 3
a9 4
file is installed by default in
<filename>\cygnus\cygwin-b20/cygnus.bat</filename> and pointed to in
the Start Menu.  You can edit it to your liking.
</para>
d12 5
a16 6
The <envar>CYGWIN</envar> variable is used to configure many global 
settings for the Cygwin
runtime system.  Initially you can leave <envar>CYGWIN</envar> unset
or set it to <literal>tty</literal> (e.g. to support job control with ^Z 
etc...) using a syntax like this in the DOS shell, before launching bash.
</para>
d19 1
a19 1
<prompt>C:\Cygnus\&gt;</prompt> <userinput>set CYGWIN=tty notitle glob</userinput>
d29 3
a31 4
Set it so that it contains at least the Cygnus
<filename>bin</filename> directory
<filename>C:\cygnus\cygwin-b20\H-i586-cygwin32\bin</filename> before
launching bash.
a42 16
<command>make</command> uses an environment variable
<envar>MAKE_MODE</envar> to decide if it uses
<filename>command.com</filename> or <filename>/bin/sh</filename> to
run command lines.  If you are getting strange errors from
<command>make</command> about "/c not found", set
<envar>MAKE_MODE</envar> to <literal>UNIX</literal> at the command
prompt or in bash.
</para>

<screen>
<prompt>C:\Cygnus\&gt;</prompt> <userinput>set MAKE_MODE=UNIX</userinput>

<prompt>/Cygnus$</prompt> <userinput>export MAKE_MODE=UNIX</userinput>
</screen>

<para>
d44 2
a45 1
type.  You can set it to <literal>cygwin</literal>.
d48 5
a52 6
<para>The <envar>LD_LIBRARY_PATH</envar> environment variable is
used by the Cygwin function <function>dlopen ()</function> as a list
of directories to search for .dll files to load.  This environment
variable is converted from Windows format to UNIX format
when a Cygwin process first starts.
Most Cygwin applications do not make use of the
@


1.3
log
@* cygwinenv.sgml: Remove CYGWIN=strace option.  Update CYGWIN options.
* how-programming.texinfo: Remove stuff about CYGWIN=strace.
* setup2.sgml: Remove CYGWIN=strace example.
@
text
@d86 1
a86 2
<command>ls -l</command> replaces the UID with a name) just
do this:
d95 24
a118 1
<para> Future changes to your NT registry will NOT be reflected in
@


1.2
log
@clean up SGML for latest version of jade/docbook
@
text
@d148 1
a148 1
<prompt>C:\Cygnus\&gt;</prompt> <userinput>set CYGWIN=tty notitle strace=0x1</userinput>
@


1.1
log
@Initial revision
@
text
@d272 1
a272 1
<para>The first three commands allow bash to display 8-bit characters,
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
