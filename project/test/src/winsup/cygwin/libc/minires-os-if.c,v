head	1.17;
access;
symbols
	cygwin-1_7_35-release:1.17
	cygwin-1_7_34-release:1.17
	cygwin-1_7_33-release:1.15
	cygwin-1_7_32-release:1.15
	cygwin-1_7_31-release:1.15
	cygwin-1_7_30-release:1.15
	cygwin-1_7_29-release:1.15
	cygwin-1_7_29-release-branchpoint:1.15.0.2
	cygwin-pre-user-db:1.15
	cygwin-1_7_28-release:1.15
	cygwin-1_7_27-release:1.15
	cygwin-1_7_26-release:1.15
	cygwin-1_7_25-release:1.15
	cygwin-1_7_24-release:1.15
	cygwin-1_7_23-release:1.15
	cygwin-1_7_22-release:1.15
	cygwin-1_7_21-release:1.15
	cygwin-1_7_20-release:1.15
	cygwin-1_7_19-release:1.15
	cygwin-64bit-postmerge:1.15
	cygwin-64bit-premerge-branch:1.14.0.4
	cygwin-64bit-premerge:1.14
	cygwin-1_7_18-release:1.14
	post-ptmalloc3:1.14
	pre-ptmalloc3:1.14
	cygwin-1_7_17-release:1.14
	cygwin-64bit-branch:1.14.0.2
	cygwin-1_7_16-release:1.14
	cygwin-1_7_15-release:1.11
	cygwin-1_7_14_2-release:1.11
	cygwin-1_7_14-release:1.11
	cygwin-1_7_12-release:1.11
	cygwin-1_7_11-release:1.11
	cygwin-1_7_10-release:1.11
	signal-rewrite:1.11.0.2
	pre-notty:1.11
	cygwin-1_7_9-release:1.8
	cv-post-1_7_9:1.8.0.6
	cygwin-1_7_8-release:1.8
	cygwin-1_7_7-release:1.8
	cygwin-1_7_5-release:1.8
	cygwin-1_7_4-release:1.8
	cygwin-1_7_3-release:1.8
	cygwin-1_7_2-release:1.8
	fifo_doover3:1.8.0.4
	cygwin-1_7_1-release:1.8
	prefifo:1.8
	cv-branch-2:1.8.0.2
	pre-ripout-set_console_state_for_spawn:1.6
	EOL_registry_mounts:1.6
	preoverlapped:1.5
	drop_9x_support_start:1.3;
locks; strict;
comment	@ * @;


1.17
date	2015.01.13.08.52.26;	author corinna;	state Exp;
branches;
next	1.16;

1.16
date	2015.01.12.16.38.02;	author corinna;	state Exp;
branches;
next	1.15;

1.15
date	2013.04.23.09.44.35;	author corinna;	state Exp;
branches;
next	1.14;

1.14
date	2012.07.12.11.27.28;	author corinna;	state Exp;
branches
	1.14.2.1;
next	1.13;

1.13
date	2012.07.06.13.56.37;	author corinna;	state Exp;
branches;
next	1.12;

1.12
date	2012.07.06.13.53.23;	author corinna;	state Exp;
branches;
next	1.11;

1.11
date	2011.05.06.18.43.37;	author corinna;	state Exp;
branches;
next	1.10;

1.10
date	2011.05.01.14.56.46;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2011.04.19.10.02.06;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2009.01.03.05.12.22;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.11.04.34.24;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2008.02.15.17.53.11;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2007.02.26.12.39.25;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2007.02.26.12.22.41;	author corinna;	state Exp;
branches;
next	1.3;

1.3
date	2007.02.09.10.09.21;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2006.12.15.09.50.32;	author corinna;	state Exp;
branches;
next	1.1;

1.1
date	2006.12.11.19.59.06;	author corinna;	state Exp;
branches;
next	;

1.14.2.1
date	2013.04.08.11.19.07;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.17
log
@copyright fix
@
text
@/* minires-os-if.c.  Stub synchronous resolver for Cygwin.

   Copyright 2006, 2007, 2008, 2009, 2011, 2012, 2015 Red Hat, Inc.

   Written by Pierre A. Humblet <Pierre.Humblet@@ieee.org>

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#define  __INSIDE_CYGWIN_NET__
#define USE_SYS_TYPES_FD_SET
#include <winsup.h>
#include <ws2tcpip.h>
#include <iphlpapi.h>
#include <windns.h>
#include "ntdll.h"
#undef h_errno
#include "minires.h"

#ifdef __CYGWIN__
/***********************************************************************
 *
 Windows interface code

***********************************************************************/

/* Conflict between Windows definitions and others */
#undef ERROR
#undef NOERROR
#undef DELETE

/***********************************************************************
 * write_record: Translates a Windows DNS record into a compressed record
 ***********************************************************************/

#define PUTDOMAIN(d,p)\
 {int res = dn_comp(d, p, EndPtr - p, dnptrs, lastdnptr); p += res < 0 ? (int) strlen(d) : res; }

static u_char * write_record(unsigned char * ptr, PDNS_RECORD rr, unsigned char * EndPtr,
			   unsigned char ** dnptrs, unsigned char ** lastdnptr, int debug)
{
  u_char * rd_length_ptr;

  PUTDOMAIN(rr->pName, ptr);

  if (ptr + 4 > EndPtr)
    ptr += 4;
  else {
    PUTSHORT(rr->wType, ptr);
    PUTSHORT(ns_c_in, ptr);
  }
  if ((rr->Flags.DW & 0x3) == DnsSectionQuestion)
    return ptr;

  if (ptr + 4 > EndPtr)
    ptr += 4;
  else {
    PUTLONG(rr->dwTtl, ptr);
  }
  rd_length_ptr = ptr;
  ptr += 2; /* Placeholder for RDLENGTH */

  /* The default case uses an undocumented feature of the Windows
     resolver for types greater than 16.
     The DNS_RECORD Data contains the record in wire format. */

  switch(rr->wType) {
  case DNS_TYPE_A:
  {
    u_char * aptr = (u_char *) & rr->Data.A.IpAddress;
    if (ptr + 4 <= EndPtr) {
      ptr[0] = aptr[0];
      ptr[1] = aptr[1];
      ptr[2] = aptr[2];
      ptr[3] = aptr[3];
    }
    ptr += 4;
    break;
  }
  case DNS_TYPE_NS:
  case DNS_TYPE_MD:
  case DNS_TYPE_MF:
  case DNS_TYPE_CNAME:
  case DNS_TYPE_MB:
  case DNS_TYPE_MG:
  case DNS_TYPE_MR:
  case DNS_TYPE_PTR:
    PUTDOMAIN(rr->Data.PTR.pNameHost, ptr);
    break;
  case DNS_TYPE_SOA:
    PUTDOMAIN(rr->Data.SOA.pNamePrimaryServer, ptr);
    PUTDOMAIN(rr->Data.SOA.pNameAdministrator, ptr);
    if (ptr + 20 > EndPtr)
      ptr += 20;
    else {
      PUTLONG(rr->Data.SOA.dwSerialNo, ptr);
      PUTLONG(rr->Data.SOA.dwRefresh, ptr);
      PUTLONG(rr->Data.SOA.dwRetry, ptr);
      PUTLONG(rr->Data.SOA.dwExpire, ptr);
      PUTLONG(rr->Data.SOA.dwDefaultTtl, ptr);
    }
    break;
  case DNS_TYPE_NULL:
    if (ptr +  rr->Data.Null.dwByteCount <= EndPtr)
      memcpy(ptr, rr->Data.Null.Data, rr->Data.Null.dwByteCount);
    ptr += rr->Data.Null.dwByteCount;
    if (rr->Data.Null.dwByteCount == rr->wDataLength - sizeof(DNS_NULL_DATA) + 1)
      DPRINTF(debug, "Null byte count has an unexpected value\n");
    break;
  case DNS_TYPE_WKS:
    if (ptr + rr->wDataLength - sizeof(DNS_WKS_DATA) + 1 + 5 > EndPtr)
      ptr += rr->wDataLength - sizeof(DNS_WKS_DATA) + 1 + 5;
    else {
      PUTLONG(rr->Data.WKS.IpAddress, ptr);
      *ptr++ = rr->Data.WKS.chProtocol;
      memcpy(ptr, rr->Data.WKS.BitMask, rr->wDataLength - sizeof(DNS_WKS_DATA) + 1);
      ptr += rr->wDataLength - sizeof(DNS_WKS_DATA) + 1;
    }
    break;
  case DNS_TYPE_MINFO:
  case DNS_TYPE_RP:
    PUTDOMAIN(rr->Data.MINFO.pNameMailbox, ptr);
    PUTDOMAIN(rr->Data.MINFO.pNameErrorsMailbox, ptr);
    break;
  case DNS_TYPE_MX:
  case DNS_TYPE_AFSDB:
  case DNS_TYPE_RT:
    if (ptr + 2 > EndPtr)
      ptr += 2;
    else
      PUTSHORT(rr->Data.MX.wPreference, ptr);
    PUTDOMAIN(rr->Data.MX.pNameExchange, ptr);
    break;
  case DNS_TYPE_HINFO:
  case DNS_TYPE_ISDN:
  case DNS_TYPE_TEXT:
  case DNS_TYPE_X25:
  {
    unsigned int i, len;
    for (i = 0; i < rr->Data.TXT.dwStringCount; i++) {
      len = strlen(rr->Data.TXT.pStringArray[i]) & 0xFF;
      if (ptr + len + 1 > EndPtr)
	ptr += len + 1;
      else {
	*ptr++ = len;
	memcpy(ptr, rr->Data.TXT.pStringArray[i], len);
	ptr += len;
      }
    }
    break;
  }
  case DNS_TYPE_SRV:
    if (ptr + 6 > EndPtr)
      ptr += 6;
    else {
      PUTSHORT(rr->Data.SRV.wPriority, ptr);
      PUTSHORT(rr->Data.SRV.wWeight, ptr);
      PUTSHORT(rr->Data.SRV.wPort, ptr);
    }
    PUTDOMAIN(rr->Data.SRV.pNameTarget, ptr);
    break;
  default:
  {
    unsigned int len = rr->wDataLength;
    DPRINTF(debug, "No structure for wType %d\n", rr->wType);
    if (ptr + len <= EndPtr)
      memcpy(ptr, (char *) &rr->Data, len);
    ptr += len;
    break;
  }
  }
  if (rd_length_ptr + 2 <= EndPtr)
    PUTSHORT(ptr - rd_length_ptr - 2, rd_length_ptr);
  return ptr;
}

/***********************************************************************
 *
 cygwin_query: implements res_nquery by calling DnsQuery

 ***********************************************************************/
static int cygwin_query(res_state statp, const char * DomName, int Class, int Type,
			unsigned char * AnsPtr, int AnsLength)
{
  DNS_STATUS res;
  PDNS_RECORD pQueryResultsSet, rr;
  DWORD section;
  int len, counts[4] = {0, 0, 0, 0}, debug = statp->options & RES_DEBUG;
  unsigned char * dnptrs[256], * ptr;

  dnptrs[0] = AnsPtr;
  dnptrs[1] = NULL;

  if (Class != ns_c_in) {
    errno = ENOSYS;
    statp->res_h_errno = NETDB_INTERNAL;
    return -1;
  }

  res = DnsQuery_A(DomName, Type, DNS_QUERY_TREAT_AS_FQDN,
		   NULL, &pQueryResultsSet, NULL);
#if 0
#define NETDB_INTERNAL -1 /* see errno */
#define HOST_NOT_FOUND  1 /* Authoritative Answer Host not found */
#define TRY_AGAIN       2 /* Non-Authoritive Host not found, or SERVERFAIL */
#define NO_RECOVERY     3 /* Non recoverable errors, FORMERR, REFUSED, NOTIMP */
#define NO_DATA		4 /* Valid name, no data record of requested type */
#endif

  DPRINTF(debug, "DnsQuery: %lu (Windows)\n", res);
  if (res) {
    switch (res) {
    case ERROR_INVALID_NAME:
      errno = EINVAL;
      statp->res_h_errno = NETDB_INTERNAL;;
      break;
    case ERROR_TIMEOUT:
      statp->res_h_errno = TRY_AGAIN;
      break;
    case DNS_ERROR_RCODE_NAME_ERROR:
      statp->res_h_errno = HOST_NOT_FOUND;
      break;
    case DNS_ERROR_RCODE_SERVER_FAILURE:
      statp->res_h_errno = TRY_AGAIN;
      break;
    case DNS_ERROR_NO_DNS_SERVERS:
    case DNS_ERROR_RCODE_FORMAT_ERROR:
    case DNS_ERROR_RCODE_NOT_IMPLEMENTED:
    case DNS_ERROR_RCODE_REFUSED:
      statp->res_h_errno = NO_RECOVERY;
      break;
    case DNS_INFO_NO_RECORDS:      /* May be returned even if the host doesn't exist */
      statp->res_h_errno = NO_DATA;
      break;
    default:
      DPRINTF(debug, "Unknown code %lu for %s %d\n", res, DomName, Type);
      statp->res_h_errno = NO_RECOVERY;
      break;
    }
    len = -1;
    goto done;
  }

  ptr = AnsPtr + HFIXEDSZ; /* Skip header */

  rr = pQueryResultsSet;
  section = 0;
  while (rr) {
    /* Some Windows versions return questions when providing locally generated
       answers, for example for "localhost" or for the computer name. */
    if (((rr->Flags.DW & 0x3) == DnsSectionQuestion) &&
       (rr->wDataLength > 0)) {
      DPRINTF(debug, "Changing record below from question to answer\n");
      rr->Flags.DW ^= DnsSectionQuestion ^ DnsSectionAnswer;
    }
    if (!counts[0] && (rr->Flags.DW & 0x3)) {
      /* No question. Adopt the first name as the name in the question */
      if ((len = dn_comp(rr->pName, ptr, AnsLength - 4,
			 dnptrs, &dnptrs[DIM(dnptrs) - 1])) < 0) {
	ptr = NULL;
	break;
      }
      ptr += len;
      PUTSHORT(Type, ptr);
      PUTSHORT(ns_c_in, ptr);
      counts[0] = 1;
    }

    DPRINTF(debug, "%s Section %d Type %u Windows Record Length %u\n",
	    rr->pName, rr->Flags.DW & 0x3, rr->wType, rr->wDataLength);

    /* Check the records are in correct section order */
    if ((rr->Flags.DW & 0x3) < section) {
      DPRINTF(debug, "Unexpected section order %s %d\n", DomName, Type);
      continue;
    }
    section =  rr->Flags.DW & 0x3;

    ptr = write_record(ptr, rr, AnsPtr + AnsLength, dnptrs,
		       &dnptrs[DIM(dnptrs) - 1], debug);

    counts[section]++;
    rr = rr->pNext;
  }

  DnsRecordListFree(pQueryResultsSet, DnsFreeRecordList);

  len = ptr - AnsPtr;
done:
  ptr = AnsPtr;
  PUTSHORT(0, ptr); /* Id */
  PUTSHORT((QR << 8) + RA + RD, ptr);
  for (section = 0; section < DIM(counts); section++) {
    PUTSHORT(counts[section], ptr);
  }
  return len;
}

/***********************************************************************
 *
 get_registry_items: returns dns items from the registry

 in: Unicode representation of registry value "value".
 what: 0 addresses ; 1 search list

***********************************************************************/
static void get_registry_dns_items(PUNICODE_STRING in, res_state statp,
				   int what)
{
  int debug = statp->options & RES_DEBUG;

  if (in->Length) {
    char list[in->Length];
    size_t size = wcstombs (list, in->Buffer, in->Length);
    if (what == 0) { /* Get the addresses */
      char *ap, *srch;
      size_t numAddresses = 0;
      for (ap = list; ap < list + size && *ap; ap = srch) {
	/* The separation character can be 0, ' ', or ','. */
	for (srch = ap; *srch && (isdigit((unsigned) *srch) || *srch == '.' );
	     srch++);
	*srch++ = 0;
	if (numAddresses < DIM(statp->nsaddr_list)) {
	  DPRINTF(debug, "server \"%s\"\n", ap);
	  statp->nsaddr_list[numAddresses].sin_addr.s_addr = cygwin_inet_addr((char *) ap);
	  if ( statp->nsaddr_list[numAddresses].sin_addr.s_addr != 0 )
	    numAddresses++;
	}
	else
	  DPRINTF(debug, "no space for server \"%s\"\n", ap);
      }
      statp->nscount = numAddresses;
    }
    else /* Parse the search line */
      minires_get_search(list, statp);
  }
  return;
}

/***********************************************************************
 *
 get_registry_dns:

 Read the registry to get dns server addresses in Network Byte Order,
    and set statp->nscount (for NT <= 4.0)
 Read the registry SearchList

***********************************************************************/

static void get_registry_dns(res_state statp)
{
  NTSTATUS status;
  const PCWSTR keyName = L"Tcpip\\Parameters";

  DPRINTF(statp->options & RES_DEBUG, "key %s\n", keyName);
  status = RtlCheckRegistryKey (RTL_REGISTRY_SERVICES, keyName);
  if (!NT_SUCCESS (status))
    {
      DPRINTF (statp->options & RES_DEBUG, "RtlCheckRegistryKey: status %p\n",
	       status);
      return;
    }

  UNICODE_STRING uns = { 0, 0, NULL };
  UNICODE_STRING udns = { 0, 0, NULL };
  UNICODE_STRING usl = { 0, 0, NULL };
  RTL_QUERY_REGISTRY_TABLE tab[4] = {
    { NULL, RTL_QUERY_REGISTRY_DIRECT | RTL_QUERY_REGISTRY_NOEXPAND,
      L"NameServer", &uns, REG_NONE, NULL, 0 },
    { NULL, RTL_QUERY_REGISTRY_DIRECT | RTL_QUERY_REGISTRY_NOEXPAND,
      L"DhcpNameServer", &udns, REG_NONE, NULL, 0 },
    { NULL, RTL_QUERY_REGISTRY_DIRECT | RTL_QUERY_REGISTRY_NOEXPAND,
      L"SearchList", &usl, REG_NONE, NULL, 0 },
  };

  status = RtlQueryRegistryValues (RTL_REGISTRY_SERVICES, keyName, tab,
				   NULL, NULL);
  if (!NT_SUCCESS (status))
    {
      DPRINTF (statp->options & RES_DEBUG,
	       "RtlQueryRegistryValues: status %p\n", status);
      return;
    }

  if (statp->nscount == 0)
    get_registry_dns_items(&uns, statp, 0);
  if (statp->nscount == 0)
    get_registry_dns_items(&udns, statp, 0);
  if (statp->dnsrch[0] == NULL)
    get_registry_dns_items(&usl, statp, 1);

  if (uns.Buffer)
    RtlFreeUnicodeString (&uns);
  if (udns.Buffer)
    RtlFreeUnicodeString (&udns);
  if (usl.Buffer)
    RtlFreeUnicodeString (&usl);

  return;
}

/***********************************************************************
 *
 get_dns_info: Get the search list or the domain name
	       and the dns server addresses in Network Byte Order
	       Set statp->os_query if DnsQuery is available.

***********************************************************************/
void get_dns_info(res_state statp)
{
#if MAX_HOSTNAME_LEN > MAXHOSTNAMELEN
#define MAX_HOSTNAME_SIZE (MAX_HOSTNAME_LEN + 1)
#else
#define MAX_HOSTNAME_SIZE (MAXHOSTNAMELEN + 1)
#endif
#if MAX_HOSTNAME_SIZE > 256 /* sizeof(defdname) */
#error stap->defdname too short
#endif

  int res, debug = statp->options & RES_DEBUG;

  ULONG ulOutBufLen = 0;
  DWORD dwRetVal;
  IP_ADDR_STRING * pIPAddr;
  FIXED_INFO * pFixedInfo;
  size_t numAddresses = 0;

  if (statp->use_os)
  {
    DPRINTF(debug, "using dnsapi.dll\n");
    statp->os_query = (typeof(statp->os_query)) cygwin_query;
    /* We just need the search list. Avoid loading iphlpapi. */
    statp->nscount = -1;
  }

  if (statp->nscount != 0)
    goto use_registry;

  /* First call to get the buffer length we need */
  dwRetVal = GetNetworkParams((FIXED_INFO *) 0, &ulOutBufLen);
  if (dwRetVal != ERROR_BUFFER_OVERFLOW) {
    DPRINTF(debug, "GetNetworkParams: error %lu (Windows)\n", dwRetVal);
    goto use_registry;
  }
  if ((pFixedInfo = (FIXED_INFO *) alloca(ulOutBufLen)) == 0) {
    DPRINTF(debug, "alloca: %s\n", strerror(errno));
    goto use_registry;
  }
  if ((dwRetVal = GetNetworkParams(pFixedInfo, & ulOutBufLen))) {
    DPRINTF(debug, "GetNetworkParams: error %lu (Windows)\n", dwRetVal);
    goto use_registry;
  }

  DPRINTF(debug, "GetNetworkParams: OK\n");
  /* Record server addresses, up to array size */
  for (pIPAddr = &(pFixedInfo->DnsServerList), numAddresses = 0;
       pIPAddr;
       pIPAddr = pIPAddr->Next) {
    if (numAddresses < DIM(statp->nsaddr_list)) {
	DPRINTF(debug, "server \"%s\"\n", pIPAddr->IpAddress.String);
      statp->nsaddr_list[numAddresses].sin_addr.s_addr = cygwin_inet_addr(pIPAddr->IpAddress.String);
      if (statp->nsaddr_list[numAddresses].sin_addr.s_addr != 0) {
	numAddresses++;
	statp->nscount++;
      }
    }
    else
      DPRINTF(debug, "no space for server \"%s\"\n", pIPAddr->IpAddress.String);
  }

 use_registry:
  get_registry_dns(statp);

  if (!statp->dnsrch[0]) {
    statp->defdname[sizeof(statp->defdname) - 1] = 0;
    if (!(res = getdomainname(statp->defdname, sizeof(statp->defdname)))) {
      if (statp->defdname[0] && !statp->defdname[sizeof(statp->defdname) - 1])
	statp->dnsrch[0] = statp->defdname;
    }
    DPRINTF(debug, "getdomainname \"%s\"\n",
	    (res)? strerror(errno) : statp->defdname);
  }
}

#else
/***********************************************************************
 *
 Default interface code

***********************************************************************/

void get_dns_info(res_state statp)
{
  return;
}

#endif



#if 0
#define DNS_ERROR_RCODE_FORMAT_ERROR 9001L
#define DNS_ERROR_RCODE_SERVER_FAILURE 9002L
#define DNS_ERROR_RCODE_NAME_ERROR 9003L
#define DNS_ERROR_RCODE_NOT_IMPLEMENTED 9004L
#define DNS_ERROR_RCODE_REFUSED 9005L
#define DNS_ERROR_RCODE_YXDOMAIN 9006L
#define DNS_ERROR_RCODE_YXRRSET 9007L
#define DNS_ERROR_RCODE_NXRRSET 9008L
#define DNS_ERROR_RCODE_NOTAUTH 9009L
#define DNS_ERROR_RCODE_NOTZONE 9010L
#define DNS_ERROR_RCODE_BADSIG 9016L
#define DNS_ERROR_RCODE_BADKEY 9017L
#define DNS_ERROR_RCODE_BADTIME 9018L
#define DNS_INFO_NO_RECORDS 9501L
#define DNS_ERROR_BAD_PACKET 9502L
#define DNS_ERROR_NO_PACKET 9503L
#define DNS_ERROR_RCODE 9504L
#define DNS_ERROR_UNSECURE_PACKET 9505L
#define DNS_ERROR_INVALID_TYPE 9551L
#define DNS_ERROR_INVALID_IP_ADDRESS 9552L
#define DNS_ERROR_INVALID_PROPERTY 9553L
#define DNS_ERROR_TRY_AGAIN_LATER 9554L
#define DNS_ERROR_NOT_UNIQUE 9555L
#define DNS_ERROR_NON_RFC_NAME 9556L
#define DNS_STATUS_FQDN 9557L
#define DNS_STATUS_DOTTED_NAME 9558L
#define DNS_STATUS_SINGLE_PART_NAME 9559L
#define DNS_ERROR_INVALID_NAME_CHAR 9560L
#define DNS_ERROR_NUMERIC_NAME 9561L
#define DNS_ERROR_NOT_LALOWED_ON_ROOT_SERVER 9562L
#define DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION 9563L
#define DNS_ERROR_CANNOT_FIND_ROOT_HINTS 9564L
#define DNS_ERROR_INCONSISTENT_ROOT_HINTS 9565L
#define DNS_ERROR_ZONE_DOES_NOT_EXIST 9601L
#define DNS_ERROR_NO_ZONE_INFO 9602L
#define DNS_ERROR_INVALID_ZONE_OPERATION 9603L
#define DNS_ERROR_ZONE_CONFIGURATION_ERROR 9604L
#define DNS_ERROR_ZONE_HAS_NO_SOA_RECORD 9605L
#define DNS_ERROR_ZONE_HAS_NO_NS_RECORDS 9606L
#define DNS_ERROR_ZONE_LOCKED 9607L
#define DNS_ERROR_ZONE_CREATION_FAILED 9608L
#define DNS_ERROR_ZONE_ALREADY_EXISTS 9609L
#define DNS_ERROR_AUTOZONE_ALREADY_EXISTS 9610L
#define DNS_ERROR_INVALID_ZONE_TYPE 9611L
#define DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP 9612L
#define DNS_ERROR_ZONE_NOT_SECONDARY 9613L
#define DNS_ERROR_NEED_SECONDARY_ADDRESSES 9614L
#define DNS_ERROR_WINS_INIT_FAILED 9615L
#define DNS_ERROR_NEED_WINS_SERVERS 9616L
#define DNS_ERROR_NBSTAT_INIT_FAILED 9617L
#define DNS_ERROR_SOA_DELETE_INVALID 9618L
#define DNS_ERROR_FORWARDER_ALREADY_EXISTS 9619L
#define DNS_ERROR_ZONE_REQUIRES_MASTER_IP 9620L
#define DNS_ERROR_ZONE_IS_SHUTDOWN 9621L
#define DNS_ERROR_PRIMARY_REQUIRES_DATAFILE 9651L
#define DNS_ERROR_INVALID_DATAFILE_NAME 9652L
#define DNS_ERROR_DATAFILE_OPEN_FAILURE 9653L
#define DNS_ERROR_FILE_WRITEBACK_FAILED 9654L
#define DNS_ERROR_DATAFILE_PARSING 9655L
#define DNS_ERROR_RECORD_DOES_NOT_EXIST 9701L
#define DNS_ERROR_RECORD_FORMAT 9702L
#define DNS_ERROR_NODE_CREATION_FAILED 9703L
#define DNS_ERROR_UNKNOWN_RECORD_TYPE 9704L
#define DNS_ERROR_RECORD_TIMED_OUT 9705L
#define DNS_ERROR_NAME_NOT_IN_ZONE 9706L
#define DNS_ERROR_CNAME_LOOP 9707L
#define DNS_ERROR_NODE_IS_CNAME 9708L
#define DNS_ERROR_CNAME_COLLISION 9709L
#define DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT 9710L
#define DNS_ERROR_RECORD_ALREADY_EXISTS 9711L
#define DNS_ERROR_SECONDARY_DATA 9712L
#define DNS_ERROR_NO_CREATE_CACHE_DATA 9713L
#define DNS_ERROR_NAME_DOES_NOT_EXIST 9714L
#define DNS_WARNING_PTR_CREATE_FAILED 9715L
#define DNS_WARNING_DOMAIN_UNDELETED 9716L
#define DNS_ERROR_DS_UNAVAILABLE 9717L
#define DNS_ERROR_DS_ZONE_ALREADY_EXISTS 9718L
#define DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE 9719L
#define DNS_INFO_AXFR_COMPLETE 9751L
#define DNS_ERROR_AXFR 9752L
#define DNS_INFO_ADDED_LOCAL_WINS 9753L
#define DNS_STATUS_CONTINUE_NEEDED 9801L
#define DNS_ERROR_NO_TCPIP 9851L
#define DNS_ERROR_NO_DNS_SERVERS 9852L
#define DNS_ERROR_DP_DOES_NOT_EXIST 9901L
#define DNS_ERROR_DP_ALREADY_EXISTS 9902L
#define DNS_ERROR_DP_NOT_ENLISTED 9903L
#define DNS_ERROR_DP_ALREADY_ENLISTED 9904L
#define DNS_ERROR_DP_NOT_AVAILABLE 9905L
#endif
@


1.16
log
@	* minires-os-if.c (cygwin_query): Change questions into answers.
@
text
@d3 1
a3 1
   Copyright 2006, 2007, 2008, 2009, 2011, 2012 Red Hat, Inc.
@


1.15
log
@	* Merge in cygwin-64bit-branch.
@
text
@d252 7
@


1.14
log
@	* winlean.h: Make sure certain Windows macros are undefined again.
	Add comment to explain why.
	* winsup.h: Include winlean.h from C sources as well.
	* libc/minires-os-if.c: Drop including ntdef.h.

	Fix previous ChangeLog entry.
@
text
@d40 1
a40 1
 {int res = dn_comp(d, p, EndPtr - p, dnptrs, lastdnptr); p += res < 0 ? strlen(d) : res; }
d190 2
a191 1
  int section, len, counts[4] = {0, 0, 0, 0}, debug = statp->options & RES_DEBUG;
d313 1
a313 1
      int numAddresses = 0;
d422 1
a422 1
  int numAddresses = 0;
@


1.14.2.1
log
@	* Throughout fix -Wextra warnings.  Ignore regex files and gmon.c.
@
text
@d40 1
a40 1
 {int res = dn_comp(d, p, EndPtr - p, dnptrs, lastdnptr); p += res < 0 ? (int) strlen(d) : res; }
d190 1
a190 2
  DWORD section;
  int len, counts[4] = {0, 0, 0, 0}, debug = statp->options & RES_DEBUG;
d312 1
a312 1
      size_t numAddresses = 0;
d421 1
a421 1
  size_t numAddresses = 0;
@


1.13
log
@	* fhandler_procnet.cc: Fix copyright.
	* syslog.cc: Ditto.
	* libc/minires-os-if.c: Ditto.
	* libc/minires.h: Ditto.
@
text
@a18 1
#include <ntdef.h>
@


1.12
log
@Add files missing in previous checkin
@
text
@d3 1
a3 1
   Copyright 2006, 2007, 2008, 2009, 2011 Red Hat, Inc.
@


1.11
log
@	* libc/minires-os-if.c (get_dns_info): Drop printing uninitialized
	value of dwRetVal in debug output.
@
text
@d13 9
a35 7
#include <windows.h>
#include <iphlpapi.h>
#include <windns.h>
#include <ntdef.h>
#include "ntdll.h"
#include <wchar.h>

@


1.10
log
@	* libc/minires-os-if.c (get_dns_info): Remove unnecessary test for
	existence of DnsQuery_A.
@
text
@d424 1
a424 1
    DPRINTF(debug, "using dnsapi.dll %d\n", dwRetVal);
@


1.9
log
@	* Makefile.in (DLL_IMPORTS): Drop advapi32.dll.
	* autoload.cc: Enable autoloading advapi32 functions.
	* environ.cc (regopt): Use wide char arguments in reg_key functions.
	* fhandler_console.cc (beep): Ditto.  Use WCHAR throughout.
	* registry.cc (reg_key): Rewrite reg_key class to use native NT registry
	functions.  Use WCHAR string parameters throughout.  Use PCWSTR rather
	than const WCHAR.  Drop multibyte char functionality.  Drop unused
	methods.
	(get_registry_hive_path): Use RtlQueryRegistryValues to fetch path from
	registry.
	(load_registry_hive): Drop useless check for user hive being available.
	Load hive using NtLoadKey.
	* registry.h: Accommodate above changes.
	* sched.cc (sched_rr_get_interval): Use wide char arguments in reg_key
	functions.
	* shared.cc (init_installation_root): Ditto.
	(shared_info::init_obcaseinsensitive): Use RtlQueryRegistryValues to
	fetch obcaseinsensitive value.
	(shared_info::heap_slop_size): Use wide char arguments in reg_key
	functions.
	(shared_info::heap_chunk_size): Ditto.
	* syscalls.cc (gethostid): Ditto.
	* winsup.h (__WIDE): Define.
	(_WIDE): Define.
	* libc/minires-os-if.c (get_registry_dns_items): Don't fetch values
	from registry.  Just extract them from given UNICODE_STRING parameter.
	(get_registry_dns): Fetch all registry values at once using
	RtlQueryRegistryValues.
@
text
@d422 1
a422 2
  if (statp->use_os
      && ((dwRetVal = DnsQuery_A(NULL, 0, 0, NULL, NULL, NULL)) != ERROR_PROC_NOT_FOUND))
@


1.8
log
@Remove unneeded header files from source files throughout.  Update copyrights
where appropriate.
* globals.cc: New file for generic global variables.
* mkglobals_h: New file to generate globals.h.
* mkstatic: New Script used to build a (currently non-working) static
libcygwin_s.a.
* Makefile.in: Add unused rule to build a non-working libcygwin_s.a.
(DLL_OFILES): Add globals.o.  Make all objects rely on globals.h.
(globals.h): New target.  Generate globals.h.
* cygtls.h: Honor new CYGTLS_HANDLE define to control when the HANDLE operator
is allowed in _cygtls.
* dcrt0.cc: Move most globals to globals.cc.
* init.cc: Ditto.
* environ.cc (strip_title_path): Remove now-unneeded extern.
* fhandler_serial.cc (fhandler_serial::open): Ditto.
* pinfo.cc: Ditto.
(commune_process): Ditto.
* shared.cc: Ditto.
* glob.cc: Ditto.
* strace.cc: Ditto.
* exceptions.cc: Define CYGTLS_HANDLE before including winsup.h.
* path.cc (stat_suffixes): Move here.
* security.h: Add forward class path_conv declaration.
* smallprint.cc (__small_vsprintf): Make a true c++ function.
(__small_sprintf): Ditto.
(small_printf): Ditto.
(console_printf): Ditto.
(__small_vswprintf): Ditto.
(__small_swprintf): Ditto.
* spawn.cc (spawn_guts): Remove _stdcall decoration in favor of regparm.
(hExeced): Move to globals.cc
* strfuncs.cc (current_codepage): Ditto.
(active_codepage): Ditto.
* sync.cc (lock_process::locker): Move here from dcrt0.cc.
* syscalls.cc (stat_suffixes): Move to path.cc.
* tty.cc (tty::create_master): Uncapitalize fatal warning for consistency.
* winsup.h: Include globals.h to declare most of the grab bag list of globals
which were previously defined here.
* mount.h: Move USER_* defines back to shared_info.h.
* speclib: Force temporary directory cleanup.
@
text
@d3 1
a3 1
   Copyright 2006, 2007, 2008, 2009 Red Hat, Inc.
d30 3
d297 1
a297 2
 kHey: Handle to registry key
 KeyValue: key value to read
d301 2
a302 2
static void get_registry_dns_items(HKEY hKey, LPCTSTR KeyValue,
				   res_state statp, int what)
a303 3
  DWORD size = 0;
  LONG res;
  LPBYTE list;
d306 5
a310 13
  res = RegQueryValueEx( hKey, KeyValue, NULL, NULL, NULL, &size);
  DPRINTF(debug, "value %s, error %lu (Windows), size %lu\n",
	  KeyValue, res, size);
  if ((res == ERROR_SUCCESS) && (size > 1)) {
    if (!(list = (LPBYTE) alloca(size))) {
      DPRINTF(debug, "alloca: %s\n", strerror(errno));
    }
    else if ((res = RegQueryValueEx( hKey, KeyValue, NULL, NULL, list,
				     &size )) != ERROR_SUCCESS) {
      DPRINTF(debug, "RegQueryValueEx: error %lu (Windows)\n", res);
    }
    else if (what == 0) { /* Get the addresses */
      BYTE *ap, *srch;
d314 2
a315 1
	for (srch = ap; *srch && (isdigit(*srch) || *srch == '.' ); srch++);
d329 1
a329 1
      minires_get_search((char *) list, statp);
d346 2
a347 3
  HKEY hKey;
  DWORD  res;
  const char *keyName = "SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters";
d350 28
a377 5
  if ((res = RegOpenKeyEx( HKEY_LOCAL_MACHINE, keyName, 0,
			   KEY_QUERY_VALUE | KEY_READ, &hKey)) != ERROR_SUCCESS) {
    DPRINTF(statp->options & RES_DEBUG, "RegOpenKeyEx: error %lu (Windows)\n", res);
    return;
  }
d380 1
a380 1
    get_registry_dns_items(hKey, "NameServer", statp, 0);
d382 1
a382 1
    get_registry_dns_items(hKey, "DhcpNameServer", statp, 0);
d384 1
a384 1
    get_registry_dns_items(hKey, "SearchList", statp, 1);
d386 6
a391 1
  RegCloseKey(hKey);
@


1.7
log
@* cygheap.cc (creturn): Reorganize to avoid a new compiler warning/error.
* dtable.cc (handle_to_fn): Ditto.
* fhandler_console.cc (fhandler_console::read): Ditto.
(fhandler_console::scroll_screen): Ditto.
(dev_console::set_color): Ditto.
* fhandler_dsp.cc (fhandler_dev_dsp::write): Ditto.
(fhandler_dev_dsp::read): Ditto.
* fhandler_tape.cc (mtinfo_drive::get_status): Ditto.
* hookapi.cc (find_first_notloaded_dll): Ditto.
* mmap.cc (msync): Ditto.
* pipe.cc (pipesync::pipesync): Ditto.
* sec_acl.cc (getace): Ditto.
* sec_auth.cc (create_token): Ditto.
(lsaauth): Ditto.
* select.cc (peek_pipe): Ditto.
* spawn.cc (av::fixup): Ditto.
* syscalls.cc (popen): Ditto.
* tty.cc (tty::init_session): Ditto.
* uinfo.cc (pwdgrp::load): Ditto.
* fhandler.cc (fhandler_base::setup_overlapped): Ditto.
(fhandler_base::wait_overlapped): Rename second use of res variable to wres or
errors are not returned correctly.
* dcrt0.cc: Remove obsolete variable.
* dll_init.cc (release_upto): Fix typo involving incorrect use of '|'.
* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Avoid a compiler
warning regarding coercing type-punned variables.
(fhandler_base::fstat_by_name): Ditto.  fhandler_fifo.cc
(fhandler_fifo::open_nonserver): Fix = vs.  == typo.
(fhandler_fifo::wait): Add all conditions to switch statement to avoid a
compiler warning.
* fhandler_process.cc: Avoid unneeded initialization of variables to zero.
(fhandler_socket::listen): Add braces around initializer.
* flock.cc (inode_t::get_all_locks_list): Reorganize to avoid a compiler
warning.  Fix problem with EWOULDBLOCK error return.
* path.cc (GUID_shortcut): Use braces around struct initializer.
(cygwin_conv_path): Reorganize to avoid a compiler warning.
* random.cc (dummy): Mark variable as volatile to avoid a "used uninitialized"
warning.
* libc/getopt.c: Mark some variables as dllexport although gcc doesn't seem to
do the right thing with them.
* libc/minires-os-if.c (get_registry_dns_items): Coerce some function arguments
to avoid a compiler warning.
@
text
@d3 1
a3 1
   Copyright 2006, 2007 Red Hat, Inc.
a29 1
#include <sys/cygwin.h>
@


1.6
log
@Perform whitespace cleanup throughout.
* dcrt0.cc (signal_shift_subtract): Eliminate ancient backwards compatibility.
(check_sanity_and_sync): Ditto.
* winsup.h (SIGTOMASK): Ditto.  Just use constant in signal calculation.
* include/cygwin/version: Remove backwards signal mask compatibility define.
* path.cc (symlink_info::check_sysfile): Cosmetic change.
* registry.cc (get_registry_hive_path): Remove unneeded variable.
* exceptions.cc (handle_sigsuspend): Eliminate thread signal mask and use
either main sigmask or current thread sigmask.
(set_process_mask): Ditto.
(sighold): Ditto.
(sigrelse): Ditto.
(sigset): Ditto.
(set_process_mask_delta): Ditto.
(_cygtls::call_signal_handler): Ditto.
* fhandler_process.cc (format_process_status): Ditto.
* fhandler_termios.cc (fhandler_termios::bg_check): Ditto.
* pinfo.h (class pinfo): Ditto.
* select.cc (pselect): Ditto.
* signal.cc (sigprocmask): Ditto.
(abort): Ditto.
(sigpause): Ditto.
(sigsend): Ditto.
(wait_sig): Ditto.
* thread.h (pthread::parent_tls): New member.
* thread.cc (pthread::pthread): Record parent_tls here.
(pthread::thread_init_wrapper): Initialize sigmask from parent thread.
@
text
@d328 1
a328 1
	  statp->nsaddr_list[numAddresses].sin_addr.s_addr = cygwin_inet_addr(ap);
d338 1
a338 1
      minires_get_search(list, statp);
@


1.5
log
@	* fhandler_registry.cc (registry_listing): Drop name of HKEY_DYN_DATA.
	(registry_keys): Drop HKEY_DYN_DATA.
	* net.cc: Fix comment.
	* syslog.cc: Ditto.
@
text
@d33 1
a33 3
 *
 write_record: Translates a Windows DNS record into a compressed record

d64 1
a64 1
     resolver for types greater than 16. 
d182 1
a182 1
static int cygwin_query(res_state statp, const char * DomName, int Class, int Type, 
d192 1
a192 1
  
d206 1
a206 1
#define NO_DATA         4 /* Valid name, no data record of requested type */
d260 2
a261 2
    
    DPRINTF(debug, "%s Section %d Type %u Windows Record Length %u\n", 
d271 1
a271 1
    ptr = write_record(ptr, rr, AnsPtr + AnsLength, dnptrs, 
d294 1
a294 1
 
d300 1
a300 1
static void get_registry_dns_items(HKEY hKey, LPCTSTR KeyValue, 
d307 1
a307 1
  
d309 1
a309 1
  DPRINTF(debug, "value %s, error %lu (Windows), size %lu\n", 
d311 1
a311 1
  if ((res == ERROR_SUCCESS) && (size > 1)) { 
d323 1
a323 1
        /* The separation character can be 0, ' ', or ','. */
d332 1
a332 1
	else 
d338 1
a338 1
      minires_get_search(list, statp); 
d345 1
a345 1
 get_registry_dns: 
d350 1
a350 1
 
d355 1
a355 1
  HKEY hKey;     
d358 1
a358 1
  
d360 1
a360 1
  if ((res = RegOpenKeyEx( HKEY_LOCAL_MACHINE, keyName, 0, 
d368 1
a368 1
  if (statp->nscount == 0) 
d381 1
a381 1
               and the dns server addresses in Network Byte Order
d383 1
a383 1
 
d444 1
a444 1
    else 
@


1.4
log
@	* fhandler_disk_file.cc (fhandler_disk_file::fchmod): Drop comment.
	* mmap.cc (gen_access): Remove.
	(mmap_record::gen_access): Remove.
	(mmap64): Don't mention 9x any longer.
	* syscalls.cc (statvfs): Drop status code consideration for 9x.
	* libc/minires-os-if.c (get_registry_dns_items): Don't mention 9x any
	longer.
	(get_registry_dns): Drop getting registry key on 9x.  Drop is9x
	variable.
@
text
@d3 1
a3 1
   Copyright 2006 Red Hat, Inc.
@


1.3
log
@	* libc/minires-os-if.c (write_record): Handle DNS_TYPE_SRV and
	some obsolete types.
@
text
@d350 1
a350 2
    and set statp->nscount
    (for Win9x and NT <= 4.0, but not Win95 with DHCP)
d359 1
a359 3
  const char *keyName[] = {"SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters",
			   "System\\CurrentControlSet\\Services\\VxD\\MSTCP"};
  int is9x = !!(GetVersion() & 0x80000000);
d361 2
a362 2
  DPRINTF(statp->options & RES_DEBUG, "key %s\n", keyName[is9x]);
  if ((res = RegOpenKeyEx( HKEY_LOCAL_MACHINE, keyName[is9x], 0, 
d370 1
a370 1
  if (statp->nscount == 0 && !is9x) 
@


1.2
log
@	* libc/minires-os-if.c (cygwin_query): Remove ERROR_PROC_NOT_FOUND case.
	(get_dns_info): Verify DnsQuery exists. Use autoloaded GetNetworkParams.
@
text
@d123 1
d128 2
d137 3
a139 1
  case DNS_TYPE_TEXT: 
d154 10
@


1.1
log
@	* Makefile.in (DLL_OFILES): Add minires-os-if.o and minires.o.
	(SUBLIBS): Add libresolv.a.
	Add rule for libresolv.a.
	* autoload.cc: Fix return code handling for IP Helper API in case
	of being unable to load iphlpapi.dll.
	(DnsQuery_A): Define.
	(DnsRecordListFree): Define.
	* cygwin.din: Export resolver functions.
	* include/resolv.h: New header.
	* include/arpa/nameser.h: New header.
	* include/arpa/nameser_compat.h: New header.
	* include/cygwin/version.h: Bump API minor number.
	* libc/minires-os-if.c: New file.
	* libc/minires.c: New file.
	* libc/minires.h: New file.
@
text
@a198 4
    case ERROR_PROC_NOT_FOUND:
      errno = ENOSYS;
      statp->res_h_errno = NO_RECOVERY;
      break;
a391 3
  HINSTANCE kerneldll;
  typedef DWORD WINAPI (*GNPType)(PFIXED_INFO, PULONG);
  GNPType PGetNetworkParams;
d394 4
a397 2
  if (statp->use_os) {
    DPRINTF(debug, "using dnsapi.dll\n");
a405 9
  if (!(kerneldll = LoadLibrary("IPHLPAPI.DLL"))) {
    DPRINTF(debug, "LoadLibrary: error %lu (Windows)\n", GetLastError());
    goto use_registry;
  }
  if (!(PGetNetworkParams = (GNPType) GetProcAddress(kerneldll, 
						     "GetNetworkParams"))) {
    DPRINTF(debug, "GetProcAddress: error %lu (Windows)\n", GetLastError());
    goto use_registry;
  }
d407 1
a407 1
  dwRetVal = PGetNetworkParams((FIXED_INFO *) 0, &ulOutBufLen);
d416 1
a416 1
  if ((dwRetVal = PGetNetworkParams((FIXED_INFO *) pFixedInfo, & ulOutBufLen))) {
@

