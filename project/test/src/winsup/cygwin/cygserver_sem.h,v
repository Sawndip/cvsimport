head	1.5;
access;
symbols
	cygwin-1_7_35-release:1.5
	cygwin-1_7_34-release:1.5
	cygwin-1_7_33-release:1.5
	cygwin-1_7_32-release:1.5
	cygwin-1_7_31-release:1.5
	cygwin-1_7_30-release:1.5
	cygwin-1_7_29-release:1.5
	cygwin-1_7_29-release-branchpoint:1.5.0.4
	cygwin-pre-user-db:1.5
	cygwin-1_7_28-release:1.5
	cygwin-1_7_27-release:1.5
	cygwin-1_7_26-release:1.5
	cygwin-1_7_25-release:1.5
	cygwin-1_7_24-release:1.5
	cygwin-1_7_23-release:1.5
	cygwin-1_7_22-release:1.5
	cygwin-1_7_21-release:1.5
	cygwin-1_7_20-release:1.5
	cygwin-1_7_19-release:1.5
	cygwin-64bit-postmerge:1.5
	cygwin-64bit-premerge-branch:1.5.0.2
	cygwin-64bit-premerge:1.5
	cygwin-1_7_18-release:1.5
	post-ptmalloc3:1.4.10.1
	pre-ptmalloc3:1.4.10.1
	cygwin-1_7_17-release:1.4
	cygwin-64bit-branch:1.4.0.10
	cygwin-1_7_16-release:1.4
	cygwin-1_7_15-release:1.4
	cygwin-1_7_14_2-release:1.4
	cygwin-1_7_14-release:1.4
	cygwin-1_7_12-release:1.4
	cygwin-1_7_11-release:1.4
	cygwin-1_7_10-release:1.4
	signal-rewrite:1.4.0.8
	pre-notty:1.4
	cygwin-1_7_9-release:1.4
	cv-post-1_7_9:1.4.0.6
	cygwin-1_7_8-release:1.4
	cygwin-1_7_7-release:1.4
	cygwin-1_7_5-release:1.4
	cygwin-1_7_4-release:1.4
	cygwin-1_7_3-release:1.4
	cygwin-1_7_2-release:1.4
	fifo_doover3:1.4.0.4
	cygwin-1_7_1-release:1.4
	prefifo:1.4
	cv-branch-2:1.4.0.2
	pre-ripout-set_console_state_for_spawn:1.3
	EOL_registry_mounts:1.3
	preoverlapped:1.3
	drop_9x_support_start:1.3
	cr-0x5f1:1.3.0.8
	cv-branch:1.3.0.6
	pre-ptymaster-archetype:1.3
	cr-0x3b58:1.3.0.4
	cr-0x5ef:1.3.0.2
	after-mmap-privanon-noreserve:1.3
	after-mmap-revamp:1.3
	before-mmap-revamp:1.3
	cgf-more-exit-sync:1.3
	post_wait_sig_exit:1.3
	pre_wait_sig_exit:1.3
	reparent-point:1.2
	noreparent:1.2.0.2
	cr-0x5e6:1.1.0.8
	cr-0x9e:1.1.0.6
	cr-0x9d:1.1.0.4
	cgf-deleteme:1.1.0.2
	pre-sigrewrite:1.1;
locks; strict;
comment	@ * @;


1.5
date	2013.01.21.04.38.27;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.26.10.18.10;	author corinna;	state Exp;
branches
	1.4.10.1;
next	1.3;

1.3
date	2005.07.05.03.16.43;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.28.19.50.05;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2003.11.19.18.50.20;	author corinna;	state Exp;
branches;
next	;

1.4.10.1
date	2013.01.21.13.52.04;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Throughout, update copyrights to reflect dates which correspond to main-branch
checkins.  Regularize copyright format.
@
text
@/* cygserver_sem.h: Single unix specification IPC interface for Cygwin.

   Copyright 2003, 2004, 2005, 2008 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#ifndef __CYGSERVER_SEM_H__
#define __CYGSERVER_SEM_H__

#include <sys/types.h>
#include <sys/sysproto.h>
#ifndef _KERNEL
#define _KERNEL 1
#endif
#include <cygwin/sem.h>

#include "cygserver.h"
#include "cygserver_ipc.h"

#ifndef __INSIDE_CYGWIN__
class transport_layer_base;
class process_cache;
#endif

class client_request_sem : public client_request
{
  friend class client_request;

public:
  enum semop_t
    {
      SEMOP_semctl,
      SEMOP_semget,
      SEMOP_semop
    };

private:
  union
  {
    struct
    {
      semop_t semop;
      proc ipcblk;
      union
      {
	struct semctl_args ctlargs;
	struct semget_args getargs;
	struct semop_args  opargs;
      };
    } in;

    union {
      int ret;
    } out;
  } _parameters;

#ifndef __INSIDE_CYGWIN__
  client_request_sem ();
  virtual void serve (transport_layer_base *, process_cache *);
#endif

public:

#ifdef __INSIDE_CYGWIN__
  client_request_sem (int, int, int, union semun *);	// semctl
  client_request_sem (key_t, int, int);			// semget
  client_request_sem (int, struct sembuf *, size_t);	// semop
#endif

  int retval () const { return msglen () ? _parameters.out.ret : -1; }
};

#ifndef __INSIDE_CYGWIN__
int seminit ();
int semunload ();
void semexit_myhook(void *arg, struct proc *p);

int semctl (struct thread *, struct semctl_args *);
int semget (struct thread *, struct semget_args *);
int semop (struct thread *, struct semop_args *);
#endif

#endif /* __CYGSERVER_SEM_H__ */
@


1.4
log
@	* Makefile.in (DLL_OFILES): Add setlsapwd.o.
	* cygserver.h (CYGWIN_SERVER_VERSION_API): Bump.
	(request_code_t): Define CYGSERVER_REQUEST_SETPWD request type.
	* cygserver_msg.h (client_request_msg::retval): Use default value of -1
	for retval if msglen is 0.
	* cygserver_sem.h (client_request_sem::retval): Ditto.
	* cygserver_shm.h (client_request_shm::retval): Ditto.
	* cygserver_setpwd.h: New file.
	* external.cc (cygwin_internal): Implement new CW_SET_PRIV_KEY type.
	* sec_auth.cc (open_local_policy): Make externally available.
	Get ACCESS_MASK as argument.
	(create_token): Accommodate change to open_local_policy.
	(lsaauth): Ditto.
	(lsaprivkeyauth): New function fetching token by retrieving
	password stored in Cygwin or Interix LSA private data area and
	calling LogonUser with it.
	* security.h (lsaprivkeyauth): Declare.
	(open_local_policy): Declare.
	* setlsapwd.cc: New file implementing setting LSA private data password
	using LsaStorePrivateData or by calling cygserver if available.
	* syscalls.cc (seteuid32): Add workaround to get the original token
	when switching back to the original privileged user, even if
	setgroups group list is still active.  Add long comment to explain why.
	Call lsaprivkeyauth first, only if that fails call lsaauth or
	create_token.
	* include/cygwin/version.h: Bump API minor number.
	* include/sys/cygwin.h (cygwin_getinfo_types): Add CW_SET_PRIV_KEY.
@
text
@d3 1
a3 1
   Copyright 2003, 2008 Red Hat, Inc.
@


1.4.10.1
log
@Pull in changes from HEAD
@
text
@d3 1
a3 1
   Copyright 2003, 2004, 2005, 2008 Red Hat, Inc.
@


1.3
log
@Change foo (void) to foo () for all c++ functions throughout.  Remove all
fhandler_*::dump functions throughout.
* fhandler.h (fhandler_dev_mem::close): Remove pass-through function in favor
of virtual method.
(handler_dev_raw::close): Ditto.
(fhandler_dev_clipboard::fixup_after_exec): New method.
* fhandler_dev_mem.cc (fhandler_dev_mem::close): Eliminate pass through
* fhandler_dev_raw.cc (fhandler_dev_raw::close): Ditto.
* fhandler_clipboard.cc (fhandler_dev_clipboard::close): Don't go to extra
effort when execing.
(fhandler_dev_clipboard::fixup_after_exec): New function.
* fhandler_console.cc (fhandler_console::close): Don't do "extra stuff" when we
know we're execing.
* fhandler_disk_file.cc (fhandler_disk_file::close): Ditto.
* fhandler_dsp.cc (fhandler_dev_dsp::close): Ditto.
* fhandler_fifo.cc (fhandler_fifo.cc::close): Ditto.  function in favor of base
function.
* fhandler_random.cc (fhandler_dev_random::close): Ditto.
* fhandler_registry.cc (fhandler_registry::close): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::close): Ditto.
* fhandler_virtual.cc (fhandler_virtual::close): Ditto.
* pinfo.cc (proc_waiter): Remove unneeded hExeced declaration.
* sigproc.cc: Ditto.
* winsup.h (hExeced): Define here.
* fhandler_virtual.cc (fhandler_virtual::fixup_after_exec): Just call close()
to reinitialize things to known state.
@
text
@d3 1
a3 1
   Copyright 2003 Red Hat, Inc.
d74 1
a74 1
  int retval () const { return _parameters.out.ret; }
@


1.2
log
@* path.cc (chdir): Always use the normalized_path as posix_cwd, except if it
starts with a drive.

Also perform whitespace cleanup.
@
text
@d74 1
a74 1
  int retval (void) const { return _parameters.out.ret; }
d78 2
a79 2
int seminit (void);
int semunload (void);
@


1.1
log
@	* cygserver.h (client_request::request_code_t): Add
	CYGSERVER_REQUEST_MSG and CYGSERVER_REQUEST_SEM.
	(admininstrator_group_sid): Add extern declaration.
	* cygserver_ipc.h: Rewrite.
	* cygserver_msg.h: New file.
	* cygserver_sem.h: New file.
	* cygserver_shm.h: More or less rewrite.
	* cygwin.din: Add msgctl, msgget, msgrcv, msgsnd, semctl, semget and
	semop.
	* msg.cc: Rewrite.
	* safe_memory.h: Remove.
	* sem.cc: Rewrite.
	* shm.cc: Rewrite.
	* include/cygwin/ipc.h: Use appropriate guard.
	(struct ipc_perm): Add seq.
	(IPCID_TO_IX): New define from BSD.
	(IPCID_TO_SEQ): Ditto.
	(IXSEQ_TO_IPCID): Ditto.
	(IPC_R): Ditto.
	(IPC_W): Ditto.
	(IPC_M): Ditto.
	* include/cygwin/msg.h: Use appropriate guard. #ifdef _KERNEL all stuff
	not explicitely defined by SUSv3. Use signed types in structs to match
	types used in BSD.
	(msgqnum_t): Define unsigned.
	(msglen_t): Ditto.
	(struct msqid_ds): Add msg_first and msg_last.
	(struct msginfo): Remove msgpool. Add msgssz and msgseg.
	* include/cygwin/sem.h: Use appropriate guard. #ifdef _KERNEL all stuff
	not explicitely defined by SUSv3. Use signed types in structs to match
	types used in BSD.
	(SEM_UNDO): Define appropriately.
	(struct semid_ds): Add sem_base.
	(struct seminfo): Add semmap and semusz.
	(SEM_A): New define from BSD.
	(SEM_R): Ditto.
	(SEM_ALLOC): Ditto.
	(union semun): Define.
	* include/cygwin/shm.h: Use appropriate guard. #ifdef _KERNEL all stuff
	not explicitely defined by SUSv3. Use signed types in structs to match
	types used in BSD.
	(SHMLBA): Define using cygwin_internal(CW_GET_SHMLBA) call.
	(struct shmid_ds): Add shm_internal.
	(struct shm_info): Rename shm_ids to used_ids as in BSD.  Add define
	for shm_ids.
	* include/cygwin/sysproto.h: New file.
	* include/cygwin/version.h: Bump API minor number.
	* include/sys/ipc.h: New file.
	* include/sys/msg.h: New file.
	* include/sys/queue.h: New file from BSD.
	* include/sys/sem.h: New file.
	* include/sys/shm.h: New file.
	* include/sys/sysproto.h: New file.
@
text
@d50 1
a50 1
        struct semctl_args ctlargs;
@

