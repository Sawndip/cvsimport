head	1.37;
access;
symbols
	cygwin-1_7_35-release:1.37
	cygwin-1_7_34-release:1.37
	cygwin-1_7_33-release:1.36.2.1
	cygwin-1_7_32-release:1.36
	cygwin-1_7_31-release:1.36
	cygwin-1_7_30-release:1.36
	cygwin-1_7_29-release:1.36
	cygwin-1_7_29-release-branchpoint:1.36.0.2
	cygwin-pre-user-db:1.36
	cygwin-1_7_28-release:1.36
	cygwin-1_7_27-release:1.36
	cygwin-1_7_26-release:1.36
	cygwin-1_7_25-release:1.34
	cygwin-1_7_24-release:1.34
	cygwin-1_7_23-release:1.34
	cygwin-1_7_22-release:1.34
	cygwin-1_7_21-release:1.34
	cygwin-1_7_20-release:1.34
	cygwin-1_7_19-release:1.34
	cygwin-64bit-postmerge:1.34
	cygwin-64bit-premerge-branch:1.33.0.2
	cygwin-64bit-premerge:1.33
	cygwin-1_7_18-release:1.33
	post-ptmalloc3:1.32.2.5
	pre-ptmalloc3:1.32.2.5
	cygwin-1_7_17-release:1.32
	cygwin-64bit-branch:1.32.0.2
	cygwin-1_7_16-release:1.32
	cygwin-1_7_15-release:1.32
	cygwin-1_7_14_2-release:1.32
	cygwin-1_7_14-release:1.32
	cygwin-1_7_12-release:1.32
	cygwin-1_7_11-release:1.32
	cygwin-1_7_10-release:1.32
	signal-rewrite:1.31.0.2
	pre-notty:1.31
	cygwin-1_7_9-release:1.30
	cv-post-1_7_9:1.30.0.2
	cygwin-1_7_8-release:1.30
	cygwin-1_7_7-release:1.27
	cygwin-1_7_5-release:1.25
	cygwin-1_7_4-release:1.25
	cygwin-1_7_3-release:1.25
	cygwin-1_7_2-release:1.25
	fifo_doover3:1.25.0.2
	cygwin-1_7_1-release:1.25
	prefifo:1.25
	cv-branch-2:1.23.0.2
	pre-ripout-set_console_state_for_spawn:1.21
	EOL_registry_mounts:1.20
	preoverlapped:1.18
	drop_9x_support_start:1.18
	cr-0x5f1:1.18.0.4
	cv-branch:1.18.0.2
	pre-ptymaster-archetype:1.18
	cr-0x3b58:1.15.0.4
	cr-0x5ef:1.15.0.2
	after-mmap-privanon-noreserve:1.15
	after-mmap-revamp:1.15
	before-mmap-revamp:1.15
	cgf-more-exit-sync:1.14
	post_wait_sig_exit:1.14
	pre_wait_sig_exit:1.14;
locks; strict;
comment	@// @;


1.37
date	2014.08.19.08.41.40;	author corinna;	state Exp;
branches;
next	1.36;

1.36
date	2013.11.24.12.13.34;	author corinna;	state Exp;
branches
	1.36.2.1;
next	1.35;

1.35
date	2013.10.31.14.26.42;	author corinna;	state Exp;
branches;
next	1.34;

1.34
date	2013.04.23.09.44.32;	author corinna;	state Exp;
branches;
next	1.33;

1.33
date	2013.01.21.04.34.51;	author cgf;	state Exp;
branches;
next	1.32;

1.32
date	2011.12.03.21.43.25;	author cgf;	state Exp;
branches
	1.32.2.1;
next	1.31;

1.31
date	2011.04.04.12.23.35;	author corinna;	state Exp;
branches;
next	1.30;

1.30
date	2010.09.06.09.47.01;	author corinna;	state Exp;
branches;
next	1.29;

1.29
date	2010.09.01.18.24.10;	author cgf;	state Exp;
branches;
next	1.28;

1.28
date	2010.09.01.10.30.52;	author corinna;	state Exp;
branches;
next	1.27;

1.27
date	2010.07.05.16.59.56;	author corinna;	state Exp;
branches;
next	1.26;

1.26
date	2010.06.01.13.14.37;	author corinna;	state Exp;
branches;
next	1.25;

1.25
date	2009.07.15.18.18.03;	author corinna;	state Exp;
branches;
next	1.24;

1.24
date	2009.07.15.14.31.51;	author corinna;	state Exp;
branches;
next	1.23;

1.23
date	2008.11.26.17.21.03;	author cgf;	state Exp;
branches;
next	1.22;

1.22
date	2008.07.19.12.26.09;	author corinna;	state Exp;
branches;
next	1.21;

1.21
date	2008.04.07.18.45.57;	author cgf;	state Exp;
branches;
next	1.20;

1.20
date	2008.03.31.18.03.25;	author corinna;	state Exp;
branches;
next	1.19;

1.19
date	2007.07.26.17.30.54;	author corinna;	state Exp;
branches;
next	1.18;

1.18
date	2006.04.14.14.20.58;	author corinna;	state Exp;
branches;
next	1.17;

1.17
date	2006.02.28.12.20.11;	author corinna;	state Exp;
branches;
next	1.16;

1.16
date	2006.02.27.17.46.29;	author corinna;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.17.23.27.00;	author cgf;	state Exp;
branches;
next	1.14;

1.14
date	2005.08.20.06.19.54;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2005.08.12.02.39.12;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2005.07.06.20.05.00;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2005.06.07.18.41.31;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2005.05.18.10.32.37;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2005.05.18.10.23.40;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2005.05.17.20.34.15;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2005.05.14.21.12.10;	author corinna;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.13.20.29.31;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.13.20.20.02;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.13.13.23.38;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2005.05.13.03.21.39;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2005.05.09.02.39.34;	author phumblet;	state Exp;
branches;
next	1.1;

1.1
date	2005.05.06.04.06.17;	author cgf;	state Exp;
branches;
next	;

1.36.2.1
date	2014.11.13.12.53.00;	author corinna;	state Exp;
branches;
next	;

1.32.2.1
date	2012.08.13.20.04.33;	author corinna;	state Exp;
branches;
next	1.32.2.2;

1.32.2.2
date	2012.11.16.13.48.24;	author corinna;	state Exp;
branches;
next	1.32.2.3;

1.32.2.3
date	2012.11.22.12.05.08;	author corinna;	state Exp;
branches;
next	1.32.2.4;

1.32.2.4
date	2012.12.10.11.45.47;	author corinna;	state Exp;
branches;
next	1.32.2.5;

1.32.2.5
date	2013.01.21.13.52.05;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.37
log
@	* autoload.cc: Replace WNet[...]A with WNet[...]W imports.
	* dcrt0.cc (initial_env): Drop strlwr calls.  Call strcasestr instead.
	* fhandler_netdrive.cc: Throughout, convert to calling WNet UNICODE
	functions.  Use tmp_pathbuf rather than alloca.  Replace call to
	strlwr with call to RtlDowncaseUnicodeString.
@
text
@/* fhandler_netdrive.cc: fhandler for // and //MACHINE handling

   Copyright 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014
   Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include "winsup.h"
#include <stdlib.h>
#include "cygerrno.h"
#include "security.h"
#include "path.h"
#include "fhandler.h"
#include "dtable.h"
#include "cygheap.h"
#include "cygthread.h"
#include "tls_pbuf.h"

#include <dirent.h>

enum
  {
    GET_RESOURCE_OPENENUM = 1,
    GET_RESOURCE_OPENENUMTOP = 2,
    GET_RESOURCE_ENUM = 3
  };

struct netdriveinf
  {
    int what;
    int ret;
    PVOID in;
    PVOID out;
    DWORD outsize;
    HANDLE sem;
  };

struct net_hdls
  {
    HANDLE net;
    HANDLE dom;
  };

static DWORD WINAPI
thread_netdrive (void *arg)
{
  netdriveinf *ndi = (netdriveinf *) arg;
  WCHAR provider[256], *dummy = NULL;
  LPNETRESOURCEW nro;
  DWORD cnt, size;
  struct net_hdls *nh;
  tmp_pathbuf tp;

  ReleaseSemaphore (ndi->sem, 1, NULL);
  switch (ndi->what)
    {
    case GET_RESOURCE_OPENENUMTOP:
      nro = (LPNETRESOURCEW) tp.c_get ();
      nh = (struct net_hdls *) ndi->out;
      ndi->ret = WNetGetProviderNameW (WNNC_NET_LANMAN, provider,
				       (size = 256, &size));
      if (ndi->ret != NO_ERROR)
	break;
      memset (nro, 0, sizeof *nro);
      nro->dwScope = RESOURCE_GLOBALNET;
      nro->dwType = RESOURCETYPE_ANY;
      nro->dwDisplayType = RESOURCEDISPLAYTYPE_GROUP;
      nro->dwUsage = RESOURCEUSAGE_RESERVED | RESOURCEUSAGE_CONTAINER;
      nro->lpRemoteName = provider;
      nro->lpProvider = provider;
      ndi->ret = WNetOpenEnumW (RESOURCE_GLOBALNET, RESOURCETYPE_DISK,
				RESOURCEUSAGE_ALL, nro, &nh->net);
      if (ndi->ret != NO_ERROR)
	break;
      while ((ndi->ret = WNetEnumResourceW (nh->net, (cnt = 1, &cnt), nro,
					    (size = NT_MAX_PATH, &size)))
	     == NO_ERROR)
	{
	  ndi->ret = WNetOpenEnumW (RESOURCE_GLOBALNET, RESOURCETYPE_DISK,
				    RESOURCEUSAGE_ALL, nro, &nh->dom);
	  if (ndi->ret == NO_ERROR)
	    break;
	}
      break;
    case GET_RESOURCE_OPENENUM:
      nro = (LPNETRESOURCEW) tp.c_get ();
      nh = (struct net_hdls *) ndi->out;
      ndi->ret = WNetGetProviderNameW (WNNC_NET_LANMAN, provider,
				      (size = 256, &size));
      if (ndi->ret != NO_ERROR)
	break;
      ((LPNETRESOURCEW) ndi->in)->lpProvider = provider;
      ndi->ret = WNetGetResourceInformationW ((LPNETRESOURCEW) ndi->in, nro,
					      (size = NT_MAX_PATH, &size),
					      &dummy);
      if (ndi->ret != NO_ERROR)
	break;
      ndi->ret = WNetOpenEnumW (RESOURCE_GLOBALNET, RESOURCETYPE_DISK,
				RESOURCEUSAGE_ALL, nro, &nh->dom);
      break;
    case GET_RESOURCE_ENUM:
      nh = (struct net_hdls *) ndi->in;
      if (!nh->dom)
	{
	  ndi->ret = ERROR_NO_MORE_ITEMS;
	  break;
	}
      nro = (LPNETRESOURCEW) tp.c_get ();
      while ((ndi->ret = WNetEnumResourceW (nh->dom, (cnt = 1, &cnt),
					    (LPNETRESOURCEW) ndi->out,
					    &ndi->outsize)) != NO_ERROR
	     && nh->net)
	{
	  WNetCloseEnum (nh->dom);
	  nh->dom = NULL;
	  while ((ndi->ret = WNetEnumResourceW (nh->net, (cnt = 1, &cnt), nro,
						(size = NT_MAX_PATH, &size)))
		 == NO_ERROR)
	    {
	      ndi->ret = WNetOpenEnumW (RESOURCE_GLOBALNET, RESOURCETYPE_DISK,
					RESOURCEUSAGE_ALL, nro, &nh->dom);
	      if (ndi->ret == NO_ERROR)
		break;
	    }
	  if (ndi->ret != NO_ERROR)
	    break;
	}
      break;
    }
  ReleaseSemaphore (ndi->sem, 1, NULL);
  return 0;
}

static DWORD
create_thread_and_wait (int what, PVOID in, PVOID out, DWORD outsize,
			const char *name)
{
  netdriveinf ndi = { what, 0, in, out, outsize,
		      CreateSemaphore (&sec_none_nih, 0, 2, NULL) };
  cygthread *thr = new cygthread (thread_netdrive, &ndi, name);
  if (thr->detach (ndi.sem))
    ndi.ret = ERROR_OPERATION_ABORTED;
  CloseHandle (ndi.sem);
  return ndi.ret;
}

/* Returns 0 if path doesn't exist, >0 if path is a directory,
   -1 if path is a file, -2 if it's a symlink.  */
virtual_ftype_t
fhandler_netdrive::exists ()
{
  char *to;
  const char *from;
  size_t len = strlen (get_name ());
  if (len == 2)
    return virt_rootdir;

  char namebuf[len + 1];
  tmp_pathbuf tp;
  PWCHAR name = tp.w_get ();

  for (to = namebuf, from = get_name (); *from; to++, from++)
    *to = (*from == '/') ? '\\' : *from;
  *to = '\0';

  struct net_hdls nh =  { NULL, NULL };
  NETRESOURCEW nr = {0};
  nr.dwType = RESOURCETYPE_DISK;
  sys_mbstowcs (name, NT_MAX_PATH, namebuf);
  nr.lpRemoteName = name;
  DWORD ret = create_thread_and_wait (GET_RESOURCE_OPENENUM,
				      &nr, &nh, 0, "WNetOpenEnum");
  if (nh.dom)
    WNetCloseEnum (nh.dom);
  return ret != NO_ERROR ? virt_none : virt_directory;
}

fhandler_netdrive::fhandler_netdrive ():
  fhandler_virtual ()
{
}

int __reg2
fhandler_netdrive::fstat (struct stat *buf)
{
  const char *path = get_name ();
  debug_printf ("fstat (%s)", path);

  fhandler_base::fstat (buf);

  buf->st_mode = S_IFDIR | STD_RBITS | STD_XBITS;
  buf->st_ino = get_ino ();

  return 0;
}

int
fhandler_netdrive::readdir (DIR *dir, dirent *de)
{
  NETRESOURCEW *nro;
  DWORD ret;
  int res;
  tmp_pathbuf tp;

  if (!dir->__d_position)
    {
      size_t len = strlen (get_name ());
      PWCHAR name = NULL;
      NETRESOURCEW nr = { 0 };
      struct net_hdls *nh;

      if (len != 2)	/* // */
	{
	  const char *from;
	  char *to;
	  char *namebuf = (char *) alloca (len + 1);
	  for (to = namebuf, from = get_name (); *from; to++, from++)
	    *to = (*from == '/') ? '\\' : *from;
	  *to = '\0';
	  name = tp.w_get ();
	  sys_mbstowcs (name, NT_MAX_PATH, namebuf);
	}
      nr.lpRemoteName = name;
      nr.dwType = RESOURCETYPE_DISK;
      nh = (struct net_hdls *) ccalloc (HEAP_FHANDLER, 1, sizeof *nh);
      ret = create_thread_and_wait (len == 2 ? GET_RESOURCE_OPENENUMTOP
					     : GET_RESOURCE_OPENENUM,
				    &nr, nh, 0, "WNetOpenEnum");
      if (ret != NO_ERROR)
	{
	  dir->__handle = INVALID_HANDLE_VALUE;
	  res = geterrno_from_win_error (ret);
	  goto out;
	}
      dir->__handle = (HANDLE) nh;
    }
  nro = (LPNETRESOURCEW) tp.c_get ();
  ret = create_thread_and_wait (GET_RESOURCE_ENUM, dir->__handle, nro,
				NT_MAX_PATH, "WnetEnumResource");
  if (ret != NO_ERROR)
    res = geterrno_from_win_error (ret);
  else
    {
      dir->__d_position++;
      PWCHAR bs = wcsrchr (nro->lpRemoteName, L'\\');
      bs = bs ? bs + 1 : nro->lpRemoteName;
      if (strlen (get_name ()) == 2)
	{
	  UNICODE_STRING ss, ds;
	  
	  tp.u_get (&ds);
	  RtlInitUnicodeString (&ss, bs);
	  RtlDowncaseUnicodeString (&ds, &ss, FALSE);
	  sys_wcstombs (de->d_name, sizeof de->d_name,
			ds.Buffer, ds.Length / sizeof (WCHAR));
	  de->d_ino = hash_path_name (get_ino (), de->d_name);
	}
      else
	{
	  sys_wcstombs (de->d_name, sizeof de->d_name, bs);
	  char *rpath = tp.c_get ();
	  sys_wcstombs (rpath, NT_MAX_PATH, nro->lpRemoteName);
	  de->d_ino = readdir_get_ino (rpath, false);
	  /* We can't trust remote inode numbers of only 32 bit.  That means,
	     remote NT4 NTFS, as well as shares of Samba version < 3.0. */
	  if (de->d_ino <= UINT32_MAX)
	    de->d_ino = hash_path_name (0, rpath);
	}
      de->d_type = DT_DIR;

      res = 0;
    }
out:
  syscall_printf ("%d = readdir(%p, %p)", res, dir, de);
  return res;
}

void
fhandler_netdrive::seekdir (DIR *dir, long pos)
{
  rewinddir (dir);
  if (pos < 0)
    return;
  while (dir->__d_position < pos)
    if (readdir (dir, dir->__d_dirent))
      break;
}

void
fhandler_netdrive::rewinddir (DIR *dir)
{
  if (dir->__handle != INVALID_HANDLE_VALUE)
    {
      struct net_hdls *nh = (struct net_hdls *) dir->__handle;
      if (nh->dom)
	WNetCloseEnum (nh->dom);
      if (nh->net)
	WNetCloseEnum (nh->net);
      cfree (nh);
    }
  dir->__handle = INVALID_HANDLE_VALUE;
  return fhandler_virtual::rewinddir (dir);
}

int
fhandler_netdrive::closedir (DIR *dir)
{
  rewinddir (dir);
  return fhandler_virtual::closedir (dir);
}

int
fhandler_netdrive::open (int flags, mode_t mode)
{
  if ((flags & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL))
    {
      set_errno (EEXIST);
      return 0;
    }
  if (flags & O_WRONLY)
    {
      set_errno (EISDIR);
      return 0;
    }
  /* Open a fake handle to \\Device\\Null */
  return open_null (flags);
}

int
fhandler_netdrive::close ()
{
  /* Skip fhandler_virtual::close, which is a no-op. */
  return fhandler_base::close ();
}
@


1.36
log
@	Throughout, drop unnecessary explicit includes of windows header files
	included by default.
	* winlean.h: Add long comment to explain why we have to define certain
	symbols.
	(_NORMALIZE_): Define.
	(_WINNLS_): Drop definition and subsequent undef.
	(_WINNETWK_): Ditto.
	(_WINSVC_): Ditto.

2013-11-23  Eric Blake  <eblake@@redhat.com>
@
text
@d3 2
a4 1
   Copyright 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013 Red Hat, Inc.
d21 1
d52 2
a53 2
  char provider[256], *dummy = NULL;
  LPNETRESOURCE nro;
d56 1
d62 1
a62 1
      nro = (LPNETRESOURCE) alloca (size = 4096);
d64 2
a65 2
      ndi->ret = WNetGetProviderName (WNNC_NET_LANMAN, provider,
				      (size = 256, &size));
d75 2
a76 2
      ndi->ret = WNetOpenEnum (RESOURCE_GLOBALNET, RESOURCETYPE_DISK,
			       RESOURCEUSAGE_ALL, nro, &nh->net);
d79 3
a81 2
      while ((ndi->ret = WNetEnumResource (nh->net, (cnt = 1, &cnt), nro,
				(size = 4096, &size))) == NO_ERROR)
d83 2
a84 2
	  ndi->ret = WNetOpenEnum (RESOURCE_GLOBALNET, RESOURCETYPE_DISK,
				   RESOURCEUSAGE_ALL, nro, &nh->dom);
d90 1
a90 1
      nro = (LPNETRESOURCE) alloca (size = 4096);
d92 1
a92 1
      ndi->ret = WNetGetProviderName (WNNC_NET_LANMAN, provider,
d96 4
a99 3
      ((LPNETRESOURCE) ndi->in)->lpProvider = provider;
      ndi->ret = WNetGetResourceInformation ((LPNETRESOURCE) ndi->in,
					     nro, &size, &dummy);
d102 2
a103 2
      ndi->ret = WNetOpenEnum (RESOURCE_GLOBALNET, RESOURCETYPE_DISK,
			       RESOURCEUSAGE_ALL, nro, &nh->dom);
d112 4
a115 3
      while ((ndi->ret = WNetEnumResource (nh->dom, (cnt = 1, &cnt),
					   (LPNETRESOURCE) ndi->out,
					   &ndi->outsize)) != NO_ERROR
d120 3
a122 3
	  nro = (LPNETRESOURCE) alloca (size = 4096);
	  while ((ndi->ret = WNetEnumResource (nh->net, (cnt = 1, &cnt), nro,
					     (size = 4096, &size))) == NO_ERROR)
d124 2
a125 2
	      ndi->ret = WNetOpenEnum (RESOURCE_GLOBALNET, RESOURCETYPE_DISK,
				       RESOURCEUSAGE_ALL, nro, &nh->dom);
d161 1
d163 3
d171 1
a171 1
  NETRESOURCE nr = {0};
d173 2
a174 1
  nr.lpRemoteName = namebuf;
d204 1
a204 1
  NETRESOURCE *nro;
d207 1
d212 2
a213 2
      char *namebuf = NULL;
      NETRESOURCE nr = { 0 };
d220 1
a220 1
	  namebuf = (char *) alloca (len + 1);
d224 2
d227 1
a227 2

      nr.lpRemoteName = namebuf;
d241 3
a243 3
  ret = create_thread_and_wait (GET_RESOURCE_ENUM, dir->__handle,
				nro = (LPNETRESOURCE) alloca (16384),
				16384, "WnetEnumResource");
d249 2
a250 2
      char *bs = strrchr (nro->lpRemoteName, '\\');
      strcpy (de->d_name, bs ? bs + 1 : nro->lpRemoteName);
d253 7
a259 1
	  strlwr (de->d_name);
d264 4
a267 1
	  de->d_ino = readdir_get_ino (nro->lpRemoteName, false);
d271 1
a271 1
	    de->d_ino = hash_path_name (0, nro->lpRemoteName);
@


1.36.2.1
log
@2014-11-07  Corinna Vinschen  <corinna@@vinschen.de>

	* dcrt0.cc (cygwin__cxa_atexit): Fetch correct DSO handle value
	by searching dll list.  Explain why.

2014-11-06  Corinna Vinschen  <corinna@@vinschen.de>

	* dcrt0.cc (cygwin_atexit): Change preceeding comment to reflect
	API version numbers.
	* external.cc (cygwin_internal): disable setting cxx_malloc on 64 bit.
	Add CW_FIXED_ATEXIT case.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
	* include/sys/cygwin.h (cygwin_getinfo_types): Add CW_FIXED_ATEXIT.
	* lib/atexit.c (atexit): Test running Cygwin version by checking
	return value of cygwin_internal (CW_FIXED_ATEXIT).

2014-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* lib/atexit.c (atexit): Check for being linked into the executable.
	If so, call __cxa_atexit with NULL DSO handle.  Explain why.
	* lib/dso_handle.c: New file providing fallback __dso_handle.

2014-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (NEW_FUNCTIONS): Add atexit to be not exported.
	* lib/atexit.c (atexit): New, statically linkable version of atexit.
	* dcrt0.cc (cygwin_atexit): Add comment to mark this function as old
	entry point.  Indiscriminately check for DSO of function pointer for
	all functions, if checking for DSO of return address fails on x86_64.
	Change comment accordingly.

2014-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (NEW_FUNCTIONS): Define target-independent.  Add target
	dependent stuff afterwards.  Globally define timezone and all xdr
	symbols as non-exported from libcygwin.a.

2014-11-03  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc: Fix formatting.

2014-10-29  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc (init_cygheap::init_installation_root): Create content of
	installation_dir as non-prefixed path, if possible.

2014-10-29  Corinna Vinschen  <corinna@@vinschen.de>

	* common.din (__cxa_atexit): Define as cygwin__cxa_atexit.
	* dcrt0.cc (cygwin__cxa_atexit): New function.  Explain what we do.

2014-10-28  Corinna Vinschen  <corinna@@vinschen.de>

	* globals.cc (dos_file_warning): Set to false by default.
	* path.cc (warn_msdos): Make static.  Drop test for dos_file_warning.
	(path_conv::check): Check for dos_file_warning here to avoid a function
	call in the default case.

2014-10-27  Corinna Vinschen  <corinna@@vinschen.de>

	* dcrt0.cc (cygwin_atexit): Add workaround for broken atexit calls
	in __gcc_register_frame of DLLs built with gcc-4.8.3-3.

2014-10-27  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc (init_cygheap::init_installation_root): Set
	installation_dir_len.
	* cygheap.h (struct init_cygheap): Add installation_dir_len member.
	* environ.cc (win_env::add_cache): Use stpcpy for speed.
	(posify_maybe): Use tmp_pathbuf buffer instead of stack.
	(raise_envblock): New function to resize Windows environment block.
	(build_env): Fix indentation.  Call raise_envblock function.  Check if
	$PATH exists and is non-empty.  If not, add PATH variable with Cygwin
	installation directory as content to Windows environment.  Explain why.

2014-10-24  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_proc.cc (format_proc_cygdrive): Fix symlink path if cygdrive
	is "/".

2014-10-24  Corinna Vinschen  <corinna@@vinschen.de>

	* gendef (sigdelayed): 64 bit only: Fix seh_pushreg statements in
	prologue.

2014-10-22  Yaakov Selkowitz  <yselkowi@@redhat.com>

	* common.din (stime): Export.
	* times.cc (stime): New function.
	* include/cygwin/time.h (stime): Declare.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.

2014-10-20  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_serial.cc: Revert debug code accidentally checked in on
	2014-08-18.

2014-10-20  Corinna Vinschen  <corinna@@vinschen.de>

	* path.cc (symlink_info::check): Set error from status code if opening
	the parent directory failed, but keep special case for root dirs.

2014-10-17  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc (init_cygheap::init_installation_root): Just memmove
	contents of installation_root instead of calling GetModuleFileNameW
	again.  Copy installation_root to installation_dir before stripping of
	"bin" dir.  Explain what we do.
	* cygheap.h (struct init_cygheap): Add installation_dir member.

2014-10-17  Corinna Vinschen  <corinna@@vinschen.de>

	* cygtls.h (__try): Define __l_endtry as block-local label in 32 bit
	case as well.

2014-10-17  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (DLL_OFILES): Add quotactl.o.
	* common.din (quotactl): Export.
	* ntdll.h: Define FILE_FS_CONTROL_INFORMATION::FileSystemControlFlags
	flag values.
	(struct _FILE_FS_CONTROL_INFORMATION): Define.
	(struct _FILE_GET_QUOTA_INFORMATION): Define.
	(typedef struct _FILE_QUOTA_INFORMATION): Define.
	(NtQueryObject): Use PVOID rather than VOID*.
	(NtQueryVolumeInformationFile): Ditto.
	(NtQueryQuotaInformationFile): Declare.
	(NtSetQuotaInformationFile): Declare.
	(NtSetVolumeInformationFile): Declare.
	* quotactl.cc: New file implementing quotactl().
	* include/sys/mount.h (BLOCK_SIZE): Define.
	(BLOCK_SIZE_BITS): Define.
	* include/sys/quota.h: New header.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.

2014-10-16  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (DLL_OFILES): Rearrange with one file per line.

2014-10-16  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_proc.cc (format_proc_partitions): Extend output to print
	the windows mount points the device is mounted on.

2014-10-13  Corinna Vinschen  <corinna@@vinschen.de>

	* net.cc (cygwin_setsockopt): Drop redundant test for AF_LOCAL and
	SOCK_STREAM in SO_PEERCRED case, as in the original patch.

2014-10-12  Corinna Vinschen  <corinna@@vinschen.de>

	* dlfcn.cc (gfpod_helper): Only check for POSIX dir separator, same as
	in get_full_path_of_dll.

2014-10-12  Corinna Vinschen  <corinna@@vinschen.de>

	* dlfcn.cc (set_dl_error): Drop useless __stdcall.
	(check_path_access): Ditto.  Drop FE_CWD from call to find_exec.
	(gfpod_helper): Call path_conv::check for all paths containing a dir
	separator to more closely follow the Linux search algorithm.
	(get_full_path_of_dll): Drop useless __stdcall.
	(dlopen): Simplify RTLD_NOLOAD case by calling GetModuleHandleEx
	instead of GetModuleHandle/LoadLibrary.

2014-10-11  Christian Franke  <franke@@computer.org>

	Add setsockopt(sd, SOL_SOCKET, SO_PEERCRED, NULL, 0) to disable
	initial handshake on AF_LOCAL sockets.
	* fhandler.h (class fhandler_socket): Add no_getpeereid status flag.
	(fhandler_socket::af_local_set_no_getpeereid): New prototype.
	* fhandler_socket.cc (fhandler_socket::af_local_connect): Skip handshake
	if no_getpeereid is set.  Add debug output.
	(fhandler_socket::af_local_accept): Likewise.
	(fhandler_socket::af_local_set_no_getpeereid): New function.
	(fhandler_socket::af_local_copy): Copy no_getpeereid.
	(fhandler_socket::getpeereid): Fail if no_getpeereid is set.
	* net.cc (cygwin_setsockopt): Add SO_PEERCRED for AF_LOCAL/SOCK_STREAM
	sockets.  Add comment to explain why we need it.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.

2014-10-10  Corinna Vinschen  <corinna@@vinschen.de>

	* dlfcn.cc (dlopen): Disable old 32 bit code on 64 bit.
	* dcrt0.cc (check_sanity_and_sync): Ditto.
	* dll_init.cc (dll_dllcrt0_1): Fix typo in comment.

2014-10-08  Corinna Vinschen  <corinna@@vinschen.de>

	* common.din (ffsl): Export.
	(ffsll): Export.
	* syscalls.cc (ffs): Implement using GCC intrinsic.
	(ffsl): Ditto.
	(ffsll): Ditto.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.

2014-10-08  Christian Franke  <franke@@computer.org>

	* syscalls.cc (ffs): Fix crash of ffs (0x80000000) on 64 bit.

2014-10-08  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_process.cc (format_process_statm): Fix output of dirty
	pages.  Add linefeed.

2014-09-05  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_proc.cc (proc_tab): Add entry for cygdrive symlink.
	(format_proc_cygdrive): New function to implement /proc/cygdrive.

2014-09-05  Corinna Vinschen  <corinna@@vinschen.de>

	* exception.h (class exception): Remove unnecessary #ifdef.

2014-09-05  Corinna Vinschen  <corinna@@vinschen.de>

	* winlean.h (DNLEN): Raise to 31.  Explain why.

2014-08-28  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_disk_file.cc (fhandler_disk_file::fstatvfs): Try the
	FileFsSizeInformation information class on filesystems choking on
	FileFsFullSizeInformation (I see you Netapp!)

2014-08-27  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.h (fhandler_pty_slave::fch_open_handles): Add bool parameter
	to declaration.
	* fhandler_tty.cc (fhandler_pty_slave::fch_open_handles): Add bool
	parameter "chown".  Only request WRITE_OWNER access when opening pty
	synchronization objects if "chown" is set.
	(fhandler_pty_slave::fchmod): Call fch_open_handles with new bool
	parameter set to false.
	(fhandler_pty_slave::fchown): Call fch_open_handles with new bool
	parameter set to true.
	* kernel32.cc (CreateFileMappingW): Fix default standard rights for
	file mappings from READ_CONTROL to STANDARD_RIGHTS_REQUIRED to allow
	changing the DACL (fixes "access denied" error in pinfo::set_acl).

	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Change debug
	output to print mode bits in octal.
	* security.cc (alloc_sd): Ditto.
	(set_file_attribute): Ditto.

2014-08-27  Corinna Vinschen  <corinna@@vinschen.de>

	* ntea.cc (read_ea): Change left-over return to __leave.  Fix
	condition to close handle.  Call NtClose rather than CloseHandle.
	(write_ea): Fix condition to close handle.  Call NtClose rather than
	CloseHandle.
	* security.cc (get_file_sd): Call pc.init_reopen_attr if a valid
	incoming handle was given, pc.get_object_attr otherwise.
	(set_file_sd): Ditto.

2014-08-26  Corinna Vinschen  <corinna@@vinschen.de>

	* path.h (path_conv::init_reopen_attr): Change from void to returning
	POBJECT_ATTRIBUTES.  Take OBJECT_ATTRIBUTES reference as argument, not
	pointer.
	* fhandler_disk_file.cc: Throughout accommodate above change.
	* syscalls.cc: Ditto.
	* ntea.cc (read_ea): Don't set hdl to NULL if it's already NULL.  Set
	attr with pc.init_reopen_attr before trying to reopen file.
	(write_ea): Ditto.
	* security.cc (get_file_sd): Use pc.init_reopen_attr rather than
	pc.get_object_attr when trying to reopen file.
	(set_file_sd): Ditto.

2014-08-25  Corinna Vinschen  <corinna@@vinschen.de>

	* cygtls.cc (san::leave/x86_64): Implement.
	* cygtls.h (class tls_pathbuf): Move counter variables into a union.
	Add 64 bit element _counters covering both counter variables to
	optimize save and restore operations.
	(class san/x86_64): Only store single 64 bit value.
	(san::san/x86_64): Implement.
	(san::leave/x86_64): Only declare here, as returns_twice function.
	Explain why.
	(class san/i686): Change type of _c_cnt and _w_cnt to uint32_t.
	(__try/x86_64): Move definition of __sebastian after the first memory
	barrier.  Drop __sebastian.setup call.

2014-08-25  Corinna Vinschen  <corinna@@vinschen.de>

	* cygtls.cc (_cygtls::remove): Revert previous patch.
	*  cygtls.h (struct _local_storage): Move pathbufs back here.
	(class san/x86_64): Revert class.  Save and restore pathbufs counters
	only.
	(class san/i686): Revert saving and restoring pathbufs counters.
	(__try/x86_64): Add a san variable and call it's setup method.
	(__except/x86_64): Call san::leave to restore pathbufs counters.
	* gendef (_sigbe): Revert previous change.
	* thread.cc (verifyable_object_state): Remove gcc 4.7 workaround in
	forward declaration as well.
	* tls_pbuf.cc (tls_pbuf): Revert previous change.
	* tls_pbuf.h (class tmp_pathbuf): Accommodate reverting pathbufs to
	locals structure.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Regenerate.

2014-08-21  Corinna Vinschen  <corinna@@vinschen.de>

	* Throughout, use __try/__except/__endtry blocks, rather than myfault
	handler.
	* cygtls.cc (_cygtls::remove): Accommodate the fact that pathbufs
	has been moved from _local_storage to _cygtls.
	* cygtls.h (class tls_pathbuf): Add comment to hint to gendef usage
	of counters.  Change type of counters to uint32_t for clarity.
	Remove _cygtls as friend class.
	(struct _local_storage): Move pathbufs from here...
	(struct _cygtls): ...to here, allowing to access it from _sigbe.
	(class san): Only define on 32 bit.  Remove errno, _c_cnt and _w_cnt
	members.
	(san::setup): Drop parameter.  Don't initialize removed members.
	(san::leave): Don't set removed members.
	(class myfault): Only define on 32 bit.
	(myfault::faulted): Only keep implementation not taking any parameter.
	Drop argument in call to sebastian.setup.
	(__try/__leave/__except/__endtry): Implement to support real SEH.  For
	now stick to SJLJ on 32 bit.
	* dcrt0.cc (dll_crt0_0): Drop 64 bit call to
	exception::install_myfault_handler.
	* exception.h (exception_handler): Define with EXCEPTION_DISPOSITION
	as return type.
	(PDISPATCHER_CONTEXT): Define as void * on 32 bit.  Define as pointer
	to _DISPATCHER_CONTEXT on 64 bit.
	(class exception): Define separately for 32 and 64 bit.
	(exception::myfault): Add handler for myfault SEH handling on 64 bit.
	(exception::exception): Fix mangled method name to account for change
	in type of last parameter.
	(exception::install_myfault_handler): Remove.
	* exceptions.cc (exception::myfault_handle): Remove.
	(exception::myfault): New SEH handler for 64 bit.
	* gendef (_sigbe): Set tls_pathbuf counters to 0 explicitely when
	returning to the caller.
	* ntdll.h: Move a comment to a better place.
	(struct _SCOPE_TABLE): Define on 64 bit.
	* thread.cc (verifyable_object_isvalid): Remove gcc 4.7 workaround.
	* tls_pbuf.cc (tls_pbuf): Fix to accommodate new place of pathbufs.
	(tls_pathbuf::destroy): Change type of loop variables to uint32_t.
	* tls_pbuf.h (class tmp_pathbuf): Change type of buffer counters to
	uint32_t.  Accommodate new place of pathbufs.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Regenerate.

2014-08-21  Corinna Vinschen  <corinna@@vinschen.de>

	* miscfuncs.cc (__import_address): Cover the first dereference to imp
	under the fault handler.

2014-08-21  Corinna Vinschen  <corinna@@vinschen.de>

	* net.cc (if_freenameindex): Don't catch a SEGV from free to fail
	loudly on double free.

2014-08-21  Corinna Vinschen  <corinna@@vinschen.de>

	* dir.cc (rmdir): Don't skip deleting fh in the ENOTEMPTY case.

2014-08-20  Corinna Vinschen  <corinna@@vinschen.de>

	* tls_pbuf.h (tmp_pathbuf::tmp_pathbuf): Convert to inline method.
	(tmp_pathbuf::~tmp_pathbuf): Ditto.
	* tls_pbuf.cc (tmp_pathbuf::tmp_pathbuf): Remove here.
	(tmp_pathbuf::~tmp_pathbuf): Ditto.

2014-08-19  Corinna Vinschen  <corinna@@vinschen.de>

	* dir.cc (dirfd): Per POSIX, return EINVAL on invalid directory stream.
	(telldir): Per POSIX, return -1 and set errno to EBADF, rather than
	just returning 0, on invalid directory stream.
	* signal.cc (sigwaitinfo): Return -1, not EFAULT, when SEGV was catched.

2014-08-19  Corinna Vinschen  <corinna@@vinschen.de>

	* autoload.cc: Replace WNet[...]A with WNet[...]W imports.
	* dcrt0.cc (initial_env): Drop strlwr calls.  Call strcasestr instead.
	* fhandler_netdrive.cc: Throughout, convert to calling WNet UNICODE
	functions.  Use tmp_pathbuf rather than alloca.  Replace call to
	strlwr with call to RtlDowncaseUnicodeString.

2014-08-19  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.h (fhandler_serial::is_tty): Reinstantiate.

2014-08-18  Corinna Vinschen  <corinna@@vinschen.de>

	* miscfuncs.cc (strlwr): Rename from cygwin_strlwr.  Drop __stdcall
	decoration.
	(strupr): Rename from cygwin_strupr.  Drop __stdcall decoration.
	* string.h (strlwr): Remove override macro.  Simply declare.
	(strupr): Ditto.

2014-08-18  Corinna Vinschen  <corinna@@vinschen.de>

	* dtable.cc (dtable::init_std_file_from_handle): Mention that console
	handles are kernel objects since Windows 8.
	* fhandler.h (enum conn_state): Add "listener" state.
	(class fhandler_socket): Drop listener status flag.
	(fhandler_socket::lseek): Return -1 and errno ESPIPE.
	(fhandler_serial::lseek): Ditto.
	(fhandler_serial::is_tty): Remove.
	* fhandler_socket.cc (fhandler_socket::listen): Set connect_state to
	listener.  Add comment.
	(fhandler_socket::accept4): Explicitely check if the socket is listening
	and fail with EINVAL, if not.  Explain why we have to do that.
	(fhandler_socket::getpeereid): Drop now redundant test.

2014-08-15  Corinna Vinschen  <corinna@@vinschen.de>

	* winsup.h (_GNU_SOURCE): Define.  Explain why.

2014-08-14  Corinna Vinschen  <corinna@@vinschen.de>

	* dlmalloc.c: Remove unused file.
	* dlmalloc.h: Ditto.
	* malloc.cc: Update to Doug Lea's malloc version 2.8.6.

2014-08-13  Corinna Vinschen  <corinna@@vinschen.de>

	* include/cygwin/version.h (CYGWIN_VERSION_DLL_MINOR): Bump to 33.
	(CYGWIN_VERSION_API_MINOR): Bump to reflect intermediate 1.7.32 release.

2014-07-21  Corinna Vinschen  <corinna@@vinschen.de>

	* include/cygwin/version.h (CYGWIN_VERSION_DLL_MINOR): Bump to 32.

2014-05-06  Corinna Vinschen  <corinna@@vinschen.de>

	* winlean.h (PIPE_REJECT_REMOTE_CLIENTS): Drop temporary definition
	since Mingw64 catched up.
	(DNLEN): Redefine as 16.  Explain why.

2014-03-06  Corinna Vinschen  <corinna@@vinschen.de>

	* setlsapwd.cc (setlsapwd): Use RtlSecureZeroMemory to delete password
	from memory.

2014-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): Document atexit.

2014-10-28  Corinna Vinschen  <corinna@@vinschen.de>

	* cygwinenv.xml: Change default setting of dosfilewarning.
	* new-features.xml (ov-new1.7.33): Document aforementioned change.

2014-10-27  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): Document empty $PATH handling.

2014-10-22  Corinna Vinschen  <corinna@@vinschen.de>

	* posix.xml (std-gnu): Add ffsl, ffsll, quotactl.
	(std-notes): Add restrictions of quotactl.

2014-10-22  Yaakov Selkowitz  <yselkowi@@redhat.com>

	* new-features.xml (ov-new1.7.33): Document stime.
	* posix.xml (std-deprec): Add stime.

2014-10-22  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): s/Linux/glibc.

2014-10-22  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): Update to current state.

2014-08-13  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): Add new section.
	(ov-new1.7.32): Reflect intermediate 1.7.32 release.

2014-10-21  Corinna Vinschen  <corinna@@vinschen.de>

	* cygcheck.cc (CYGLSA64_DLL): Remove unused macro.
	(dump_sysinfo): If COMSPEC isn't set in the MSVCRT environment, set it.
	Explain why.
@
text
@d3 1
a3 2
   Copyright 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014
   Red Hat, Inc.
a19 1
#include "tls_pbuf.h"
d50 2
a51 2
  WCHAR provider[256], *dummy = NULL;
  LPNETRESOURCEW nro;
a53 1
  tmp_pathbuf tp;
d59 1
a59 1
      nro = (LPNETRESOURCEW) tp.c_get ();
d61 2
a62 2
      ndi->ret = WNetGetProviderNameW (WNNC_NET_LANMAN, provider,
				       (size = 256, &size));
d72 2
a73 2
      ndi->ret = WNetOpenEnumW (RESOURCE_GLOBALNET, RESOURCETYPE_DISK,
				RESOURCEUSAGE_ALL, nro, &nh->net);
d76 2
a77 3
      while ((ndi->ret = WNetEnumResourceW (nh->net, (cnt = 1, &cnt), nro,
					    (size = NT_MAX_PATH, &size)))
	     == NO_ERROR)
d79 2
a80 2
	  ndi->ret = WNetOpenEnumW (RESOURCE_GLOBALNET, RESOURCETYPE_DISK,
				    RESOURCEUSAGE_ALL, nro, &nh->dom);
d86 1
a86 1
      nro = (LPNETRESOURCEW) tp.c_get ();
d88 1
a88 1
      ndi->ret = WNetGetProviderNameW (WNNC_NET_LANMAN, provider,
d92 3
a94 4
      ((LPNETRESOURCEW) ndi->in)->lpProvider = provider;
      ndi->ret = WNetGetResourceInformationW ((LPNETRESOURCEW) ndi->in, nro,
					      (size = NT_MAX_PATH, &size),
					      &dummy);
d97 2
a98 2
      ndi->ret = WNetOpenEnumW (RESOURCE_GLOBALNET, RESOURCETYPE_DISK,
				RESOURCEUSAGE_ALL, nro, &nh->dom);
d107 3
a109 4
      nro = (LPNETRESOURCEW) tp.c_get ();
      while ((ndi->ret = WNetEnumResourceW (nh->dom, (cnt = 1, &cnt),
					    (LPNETRESOURCEW) ndi->out,
					    &ndi->outsize)) != NO_ERROR
d114 3
a116 3
	  while ((ndi->ret = WNetEnumResourceW (nh->net, (cnt = 1, &cnt), nro,
						(size = NT_MAX_PATH, &size)))
		 == NO_ERROR)
d118 2
a119 2
	      ndi->ret = WNetOpenEnumW (RESOURCE_GLOBALNET, RESOURCETYPE_DISK,
					RESOURCEUSAGE_ALL, nro, &nh->dom);
a154 1

a155 3
  tmp_pathbuf tp;
  PWCHAR name = tp.w_get ();

d161 1
a161 1
  NETRESOURCEW nr = {0};
d163 1
a163 2
  sys_mbstowcs (name, NT_MAX_PATH, namebuf);
  nr.lpRemoteName = name;
d193 1
a193 1
  NETRESOURCEW *nro;
a195 1
  tmp_pathbuf tp;
d200 2
a201 2
      PWCHAR name = NULL;
      NETRESOURCEW nr = { 0 };
d208 1
a208 1
	  char *namebuf = (char *) alloca (len + 1);
a211 2
	  name = tp.w_get ();
	  sys_mbstowcs (name, NT_MAX_PATH, namebuf);
d213 2
a214 1
      nr.lpRemoteName = name;
d228 3
a230 3
  nro = (LPNETRESOURCEW) tp.c_get ();
  ret = create_thread_and_wait (GET_RESOURCE_ENUM, dir->__handle, nro,
				NT_MAX_PATH, "WnetEnumResource");
d236 2
a237 2
      PWCHAR bs = wcsrchr (nro->lpRemoteName, L'\\');
      bs = bs ? bs + 1 : nro->lpRemoteName;
d240 1
a240 7
	  UNICODE_STRING ss, ds;
	  
	  tp.u_get (&ds);
	  RtlInitUnicodeString (&ss, bs);
	  RtlDowncaseUnicodeString (&ds, &ss, FALSE);
	  sys_wcstombs (de->d_name, sizeof de->d_name,
			ds.Buffer, ds.Length / sizeof (WCHAR));
d245 1
a245 4
	  sys_wcstombs (de->d_name, sizeof de->d_name, bs);
	  char *rpath = tp.c_get ();
	  sys_wcstombs (rpath, NT_MAX_PATH, nro->lpRemoteName);
	  de->d_ino = readdir_get_ino (rpath, false);
d249 1
a249 1
	    de->d_ino = hash_path_name (0, rpath);
@


1.35
log
@	* devices.in (dev_cygdrive_storage): Revert mapping to \Device\Null.
	(dev_storage): Ditto for /dev.
	* devices.cc: Regenerate.
	* fhandler.cc (fhandler_base::open_null): New method to open a fake
	\Device\Null handler.
	(fhandler_base::open): Fix formatting.  Change O_ACCMODE test to a
	switch statement.  Simplify a test which still tested for a now unused
	create_disposition.
	* fhandler.h (fhandler_base::open_null): Declare.
	(fhandler_netdrive::close): Declare.
	* fhandler_dev.cc (fhandler_dev::open): Open fake \Device\Null handle
	by just calling new open_null method.
	* fhandler_disk_file.cc (fhandler_cygdrive::open): Ditto.
	* fhandler_netdrive.cc (fhandler_netdrive::open): Call open_null
	rather than setting nohandle.
	(fhandler_netdrive::close): New method.
	* fhandler_registry.cc (fetch_hkey): Fix token in RegOpenUserClassesRoot
	call.  Create valid key for HKEY_CURRENT_CONFIG by mapping to real key
	HKEY_LOCAL_MACHINE\System\CurrentControlSet\Hardware Profiles\Current.
	(fhandler_registry::open): Set nohandle only when using pseudo registry
	handle.
	* fhandler_virtual.cc (fhandler_virtual::opendir): Call open rather
	than just setting nohandle here.
	* fhandler_virtual::fstatvfs): Set ST_RDONLY fs flag.
	* globals.cc (ro_u_null): New readonly UNICODE_STRING for \Device\Null.
	* path.h (path_conv::set_path): Revert previous change caring for
	wide_path.
@
text
@a19 1
#include <winnetwk.h>
@


1.34
log
@	* Merge in cygwin-64bit-branch.
@
text
@a297 6
  int res = fhandler_virtual::open (flags, mode);
  if (!res)
    goto out;

  nohandle (true);

d301 1
a301 2
      res = 0;
      goto out;
d303 1
a303 1
  else if (flags & O_WRONLY)
d306 1
a306 2
      res = 0;
      goto out;
d308 3
d312 5
a316 6
  res = 1;
  set_flags ((flags & ~O_TEXT) | O_BINARY | O_DIROPEN);
  set_open_status ();
out:
  syscall_printf ("%d = fhandler_netdrive::open(%y, 0%o)", res, flags, mode);
  return res;
a317 1

@


1.33
log
@Throughout, change __attribute__ ((regparm (N))) to just __regN.  Throughout,
(mainly in fhandler*) start fixing gcc 4.7.2 mismatch between regparm
definitions and declarations.
* gendef: Define some functions to take @@ declaration to accommodate _regN
defines which use __stdcall.
* gentls_offsets: Define __regN macros as empty.
* autoload.cc (wsock_init): Remove unneeded regparm attribute.
* winsup.h (__reg1): Define.
(__reg2): Define.
(__reg3): Define.
* advapi32.cc (DuplicateTokenEx): Coerce some initializers to avoid warnings
from gcc 4.7.2.
* exceptions.cc (status_info): Declare struct to use NTSTATUS.
(cygwin_exception::dump_exception): Coerce e->ExceptionCode to NTSTATUS.
* fhandler_clipboard.cc (cygnativeformat): Redefine as UINT to avoid gcc 4.7.2
warnings.
(fhandler_dev_clipboard::read): Ditto.
@
text
@d3 1
a3 1
   Copyright 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2013 Red Hat, Inc.
d178 1
a178 1
fhandler_netdrive::fstat (struct __stat64 *buf)
d249 1
a249 1
	  if (de->d_ino <= UINT_MAX)
d321 1
a321 1
  syscall_printf ("%d = fhandler_netdrive::open(%p, %d)", res, flags, mode);
@


1.32
log
@Throughout, remove extra space after function name from debugging output.
Throughout, change syscalls to report on return values using new %R format
option.
* smallprint.cc (__small_vsprintf): Add parsing for %R to report on return
values and possible errno from syscalls.
* errno.cc (errmap): Add PRIVILEGE_NOT_HELD.
* fhandler_tty.cc (fhandler_pty_master::setup): When creating a thread use
shorter name to reduce debuggging output.
* select.cc (start_thread_pipe): Ditto.
(start_thread_serial): Ditto.
(start_thread_socket): Ditto.
(start_thread_mailslot): Ditto.
* sigproc.cc (talktome): Ditto.
@
text
@d3 1
a3 1
   Copyright 2005, 2006, 2007, 2008, 2009, 2010, 2011 Red Hat, Inc.
d177 1
a177 1
int
@


1.32.2.1
log
@	* include/cygwin/stat.h (struct __stat64): Drop entirely in favor of
	struct stat.  Accommodate throughout Cygwin.
	* include/cygwin/types.h: Throughout, drop current, internal types
	used since Cygwin 1.5 with the base type they have been used for.
	Throughout, define types based on bitsize-specific types where
	appropriate.  Accommodate throughout Cygwin.
	* include/sys/cygwin.h: Drop __uid32_t and __gid32_t in favor of
	uid_t and gid_t.  Define uid/gid types based on bitsize-specific types.
	(struct external_pinfo): Accommodate above change.
	* cygtls.h (struct _local_storage): Drop unused members grp and
	namearray,
	* tlsoffsets.h: Regenerate.
	* devices.h (_dev_t): Drop definition.  Use dev_t throughout instead.
	* devices.cc: Regenerate.

	Probably temporary patch to drop unneeded functionality on x86_64:
	* fcntl.cc (_fcntl): Alias to fcntl64 on x86_64.
	* glob.cc (CYGWIN_gl_stat): Simplify on x86_64.
	* grp.cc (grp32togrp16): Don't define on x86_64.
	(getgrgid): Alias to getgrgid32 on x86_64.
	(getgrnam): Alias to getgrnam32 on x86_64.
	(getgrent): Alias to getgrent32 on x86_64.
	(getgroups): Alias to getgroups32 on x86_64.
	(initgroups): Alias to initgroups32 on x86_64.
	(setgroups): Alias to setgroups32 on x86_64.
	* mmap.cc (mmap): Alias to mmap64 on x86_64.
	* passwd.cc (getpwuid): Alias to getpwuid32 on x86_64.
	(getpwuid_r): Alias to getpwuid_r32 on x86_64.
	(getpwduid): Don't define on x86_64.
	* syscalls.cc (lseek): Alias to lseek64 on x86_64.
	(_lseek): Alias to lseek64 on x86_64.
	(chown): Alias to chown32 on x86_64.
	(lchown): Alias to lchown32 on x86_64.
	(fchown): Alias to fchown32 on x86_64.
	(stat64_to_stat32): Don't define on x86_64.
	(fstat): Alias to fstat64 on x86_64.
	(_fstat_r): Alias to _fstat64_r on x86_64.
	(stat): Alias to stat64 on x86_64.
	(_stat_r): Alias to _stat64_r on x86_64.
	(lstat): Alias to lstat64 on x86_64.
	(ftruncate): Alias to ftruncate64 on x86_64.
	(truncate): Alias to truncate64 on x86_64.
	(seteuid): Alias to seteuid32 on x86_64.
	(setuid): Alias to setuid32 on x86_64.
	(setreuid): Alias to setreuid32 on x86_64.
	(setegid): Alias to setegid32 on x86_64.
	(setgid): Alias to setgid32 on x86_64.
	(setregid): Alias to setregid32 on x86_64.
	* uinfo.cc (getuid): Alias to getuid32 on x86_64.
	(getgid): Alias to getgid32 on x86_64.
	(geteuid): Alias to geteuid32 on x86_64.
	(getegid): Alias to getegid32 on x86_64.
	* winsup.h (ILLEGAL_UID16): Don't define on x86_64.
	(ILLEGAL_GID16): Ditto.
	(uid16touid32): Don't declare on x86_64.
	(gid16togid32): Don't declare on x86_64.
@
text
@d178 1
a178 1
fhandler_netdrive::fstat (struct stat *buf)
@


1.32.2.2
log
@	* fhandler_netdrive.cc: Use UINT32_MAX rather than UINT_MAX to make
	absolutely clear that we mean the 32 bit maximum.
	* fhandler_socket.cc: Ditto.
	* pinfo.cc: Ditto with INT32_MAX.
	* select.cc (fd_mask): Drop gratuitious definition.
	(sizeof_fd_set): Cast to size_t.
	* shared.cc (pround): Cast to ptrdiff_t.
	* strace.cc (strace::activate): Fix format string.
	(strace::write_childpid): Take pid_t as parameter.
	* include/sys/strace.h (strace::write_childpid): Change declaration
	accordingly.
	* sync.cc (muto::init): Cast in call to InterlockedExchangePointer to
	make compiler happy.
	* sync.h (class muto): De-const name.
	* syslog.cc (try_connect_syslogd): Take size_t as third argument.
	(vsyslog): Convert len to size_t.
	* thread.cc: Use {U}INT32_MAX rather than {U}LONG_MAX.  Througout change
	types used in Windows calls to matching Windows types.
	(pthread::cancel): Fix access to instruction pointer for x86_64.
	(pthread_attr_getstack): Cast to ptrdiff_t for pointer arithmetic.
	* thread.h: Throughout convert 'long' types to uint32_t or LONG.
@
text
@d249 1
a249 1
	  if (de->d_ino <= UINT32_MAX)
@


1.32.2.3
log
@Fix copyrights.
@
text
@d3 1
a3 1
   Copyright 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012 Red Hat, Inc.
@


1.32.2.4
log
@	* Throughout, fix format string of debug printf and api_fatal calls
	to work in 32 and 64 bit environment, as well as to honor signedness.
	Use %y instead of 0x%x.
	* fhandler.h (class fhandler_dev_mem): Change type of mem_size from
	DWORD to SIZE_T.
	* fhandler_mem.cc: Throughout, cast mem_size in comparisons to make
	GCC happy.
	* fhandler_process.cc (format_process_maps): Change type of ret_len
	to SIZE_T.
	(get_mem_values): Ditto for n and length.
	* mmap.cc (MapView): Ditto for commitsize and viewsize.
	(class mmap_record): Ditto for len.  Use SIZE_T througout for memory
	size in method args and return types.
	* ntdll.h (NtLockVirtualMemory): Fix type of memory size parameters
	to SIZE_T.
	(NtMapViewOfSection): Ditto.
	(NtQueryVirtualMemory): Ditto.
	(NtUnlockVirtualMemory): Ditto.
	(RtlFreeHeap): Change type of first parameter to HANDLE.
	* shm.cc (shmat): Change type of viewsize to SIZE_T.
	* timer.cc (timer_thread): Change type of sleep_ms to LONG.
	(ualarm): Drop casts to unsigned int in timer value computation.
@
text
@d321 1
a321 1
  syscall_printf ("%d = fhandler_netdrive::open(%y, 0%o)", res, flags, mode);
@


1.32.2.5
log
@Pull in changes from HEAD
@
text
@d3 1
a3 1
   Copyright 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013 Red Hat, Inc.
d177 1
a177 1
int __reg2
@


1.31
log
@	Drop NT4 support.
	* autoload.cc (DnsQuery_A): Fatal if not available.
	(DnsRecordListFree): Ditto.
	(DsGetDcNameW): Ditto.
	(NetGetAnyDCName): Remove.
	(NetGetDCName): Remove.
	(EnumProcessModules): Fatal if not available.
	(GetModuleFileNameExW): Ditto.
	(GetModuleInformation): Ditto.
	(GetProcessMemoryInfo): Ditto.
	(QueryWorkingSet): Ditto.
	(LsaRegisterLogonProcess): Ditto.
	* fenv.cc (_feinitialise): Drop supports_sse condition.
	* fhandler_disk_file.cc (path_conv::isgood_inode): Fix comment.
	(fhandler_base::fstat_by_name): Drop has_fileid_dirinfo condition.
	(fhandler_disk_file::opendir): Ditto.
	* fhandler_netdrive.cc (fhandler_netdrive::readdir): Fix comment.
	* fhandler_proc.cc (format_proc_partitions): Drop NT4-only code.
	* fhandler_process.cc (get_process_state): Ditto.
	* kernel32.cc (GetWindowsDirectoryW): Remove.
	(GetWindowsDirectoryA): Remove.
	* miscfuncs.cc (nice_to_winprio): Drop NT4-only code.
	* mount.cc (fs_info::update): Fix comments.
	* net.cc (get_2k_ifs): Drop NT4-only code.
	* sec_auth.cc (get_logon_server): Ditto.
	(lsaauth): Drop NT4-specific error handling.
	* security.cc (alloc_sd): Set SE_DACL_PROTECTED unconditionally.
	* select.cc (select_stuff::wait): Always use MWMO_INPUTAVAILABLE.
	(peek_windows): Drop NT4-only condition in call to PeekMessage.
	* syscalls.cc (gethostid): Remove NT4-only workaround.
	* wincap.cc: Througout, drop has_dacl_protect,
	has_broken_if_oper_status, has_process_io_counters,
	has_terminal_services, has_extended_priority_class, has_guid_volumes,
	has_fileid_dirinfo, has_mwmo_inputavailable and supports_sse from
	wincaps.
	(wincap_nt4sp4): Remove.
	(wincap_minimal): Set to wincap_2000.
	(wincapc::init): Rely on availability of OSVERSIONINFOEX structure.
	Treat error from GetVersionEx as fatal.  Treat NT4 as fatal.
	* wincap.h (struct wincaps): Drop has_dacl_protect,
	has_broken_if_oper_status, has_process_io_counters,
	has_terminal_services, has_extended_priority_class, has_guid_volumes,
	has_fileid_dirinfo, has_mwmo_inputavailable and supports_sse flags
	and methods.
	* winlean.h (GetWindowsDirectoryW) Define as GetSystemWindowsDirectoryW.
	(GetWindowsDirectoryA): Define as GetSystemWindowsDirectoryA.
@
text
@d257 1
a257 1
  syscall_printf ("%d = readdir (%p, %p)", res, dir, de);
d321 1
a321 1
  syscall_printf ("%d = fhandler_netdrive::open (%p, %d)", res, flags, mode);
@


1.30
log
@	* Makefile.in (DLL_OFILES): Add fhandler_procsys.o.
	* devices.h (enum fh_devices): Add FH_PROCSYS.
	* devices.in (dev_procsys_storage): New device.
	* devices.cc: Regenerate.
	* dtable.cc (build_fh_pc): Add code to allocate fhandler_procsys.
	* fhandler.h (proc_len): Convert to size_t.
	(procsys): Declare.
	(procsys_len): Declare.
	(enum virtual_ftype_t): Move here from fhandler_virtual.h.
	Add members supported by fhandler_procsys.
	(fhandler_virtual::exists): Return virtual_ftype_t.  Change
	in all derived classes.
	(class fhandler_procsys): New class.
	(fhandler_union): Add fhandler_procnet and fhandler_procsys members.
	* fhandler_disk_file.cc (__DIR_mounts::check_missing_mount): Use
	ro_u_proc.
	(fhandler_base::fstat_by_handle): Don't copy attributes if file is an
	NT device.
	(fhandler_base::fstat_by_name): Ditto.
	* fhandler_netdrive.cc (fhandler_netdrive::exists): Return
	virtual_ftype_t.
	* fhandler_proc.cc (proc_tab): Sort alphabetically.  Use _VN macro
	to store length.
	(proc_len): Change to size_t.
	(proc_tab_cmp): New static function.
	(virt_tab_search): New function to search entry in virt_tab_t
	arrays.  Use throughout in /proc and sibling classes instead of
	loop.
	(fhandler_proc::exists): Return virtual_ftype_t.
	* fhandler_process.cc (process_tab): Sort alphabetically.  Use _VN
	macro to store length.
	(fhandler_process::exists): Return virtual_ftype_t.
	(fhandler_process::open): Simplify code.
	* fhandler_procnet.cc (procnet_tab): Sort alphabetically.  Use _VN
	macro to store length.
	(fhandler_procnet::exists): Return virtual_ftype_t.
	(fhandler_procnet::open): Simplify.
	* fhandler_procsys.cc: New file.
	* fhandler_registry.cc (fhandler_registry::exists): Return
	virtual_ftype_t.
	* fhandler_virtual.cc (fhandler_virtual::exists): Ditto.
	* fhandler_virtual.h (enum virtual_ftype_t): Move to fhandler.h.
	(virt_tab_t): Add name_len member.
	(_VN): New macro.
	(virt_tab_search): Declare.
	* mount.cc (mount_info::conv_to_win32_path): Fix comment.  Backslashify
	isprocsys_dev paths.
	* ntdll.h (STATUS_OBJECT_TYPE_MISMATCH): Define
	(STATUS_INSTANCE_NOT_AVAILABLE): Define.
	(STATUS_PIPE_NOT_AVAILABLE): Define.
	(STATUS_INVALID_PIPE_STATE): Define.
	(STATUS_PIPE_BUSY): Define.
	(SYMBOLIC_LINK_QUERY): Define.
	(NtOpenSymbolicLinkObject): Declare.
	(NtQuerySymbolicLinkObject): Declare.
	* path.cc (path_conv::check): Accommodate fact that exists method
	returns virtual_ftype_t now.  Add cases for new virtual_ftype_t
	types.
	(cygwin_conv_path): Add GLOBALROOT prefix to native device paths.
	Make sure to strip \\?\ prefix only for actual filesystem-based
	paths, not for all paths.
	* path.h (isproc_dev): Add FH_PROCSYS.
	(isprocsys_dev): Define.
@
text
@d3 1
a3 1
   Copyright 2005, 2006, 2007, 2008, 2009, 2010 Red Hat, Inc.
a247 1
	     all remote inode numbers when running under NT4, as well as
@


1.29
log
@* cygthread.cc (cygthread::create): Fix incorrect use of name rather than
__name.
* cygthread.h (cygthread::cygthread): Create versions which eliminate 'n'
parameter.
* dcrt0.cc (dll_crt0_1): Remove check for threadfunc_ix.  Remove obsolete
comments.  Set process_state to active here.
* fhandler_netdrive.cc (create_thread_and_wait): Use shortened cygthread
constructor.
* timer.cc (timer_tracker::settime): Ditto.
* window.cc (HWND): Ditto.
* fhandler_tty.cc: Use shortened cygthread constructor, where appropriate,
throughout.
* select.cc: Ditto.
* fork.cc (frok::child): Remove wait_for_sigthread.
(fork): Reformat if for slightly better clarity.
* init.cc (dll_finished_loading): New variable.
(dll_entry): Use dll_finished_loading to determine when we should call
merge_threadfunc.
* sigproc.cc (no_signals_available): Simplify by using my_readsig.
(wait_sig_inited): Delete.
(wait_sig): Define as void function.
(pending_signals): Accommodate change to wait_sig definition.
(wait_for_sigthread): Delete definition.
(sigproc_init): Initialize signal pipe here, before wait_sig thread is created.
Use void form of cygthread creation.
(init_sig_pipe): Delete.
(wait_sig): Return void rather than DWORD.  Assume previous initialization of
signal pipe.  Set my_sendsig to NULL when exiting.
* sigproc.h (wait_for_sigthread): Delete declaration.
@
text
@d148 1
a148 1
int
d155 1
a155 1
    return 1;
d169 1
a169 1
  return ret != NO_ERROR ? 0 : 1;
@


1.28
log
@	* fhandler_netdrive.cc (fhandler_netdrive::readdir): Set d_type.
	(fhandler_netdrive::seekdir): Fix test for readdir return value.
	* fhandler_registry.cc (fhandler_registry::seekdir): Ditto.
@
text
@d139 1
a139 1
  cygthread *thr = new cygthread (thread_netdrive, 0, &ndi, name);
@


1.27
log
@	Align seekdir and telldir API to POSIX definition.
	* Makefile.in (NEW_FUNCTIONS): Remove seekdir and telldir mappings.
	* dir.cc (telldir): Move functionality from telldir64 here.  Use
	long, rather than _off_t.
	(telldir64): Just call telldir.  Only keep for backward compatibility.
	(seekdir): Move functionality from seekdir64 here.  Use long, rather
	than _off_t.
	(seekdir64): Just call seekdir.  Only keep for backward compatibility.
	* fhandler.h: Throughout, change prototypes of seekdir and telldir
	methods to use long, rather than _off64_t.
	* fhandler_disk_file.cc: Change aforementioned methods accordingly.
	* fhandler_netdrive.cc: Ditto.
	* fhandler_registry.cc: Ditto.
	* fhandler_virtual.cc: Ditto.
	* include/sys/dirent.h (struct __DIR): Change __d_position from
	_off_t to long to reflect API change.
	(telldir): Change prototype to use long, rather than off_t.
	(seekdir): Ditto.
@
text
@d253 1
d269 1
a269 1
    if (!readdir (dir, dir->__d_dirent))
@


1.26
log
@	* fhandler_netdrive.cc (fhandler_netdrive::exists): Always free WNet
	resource if created.
@
text
@d262 1
a262 1
fhandler_netdrive::seekdir (DIR *dir, _off64_t pos)
@


1.25
log
@	* fhandler_netdrive.cc (GET_RESOURCE_INFO): Remove.
	(thread_netdrive): Drop GET_RESOURCE_INFO case.
	(fhandler_netdrive::exists): Use GET_RESOURCE_OPENENUM info class
	to check for existance.
@
text
@d3 1
a3 1
   Copyright 2005, 2006, 2007, 2008 Red Hat, Inc.
d167 3
a169 9
  if (ret != NO_ERROR)
    {
      if (nh.dom)
	WNetCloseEnum (nh.dom);
      if (nh.net)
	WNetCloseEnum (nh.net);
      return 0;
    }
  return 1;
@


1.24
log
@	* fhandler_netdrive.cc (fhandler_netdrive::readdir): Remove useless
	alloca.
@
text
@a25 1
    GET_RESOURCE_INFO = 0,
a58 5
    case GET_RESOURCE_INFO:
      nro = (LPNETRESOURCE) alloca (size = 4096);
      ndi->ret = WNetGetResourceInformation ((LPNETRESOURCE) ndi->in,
					     nro, &size, &dummy);
      break;
d161 1
a162 1
  nr.dwScope = RESOURCE_GLOBALNET;
a163 1
  nr.lpLocalName = NULL;
d165 10
a174 4
  DWORD ret = create_thread_and_wait (GET_RESOURCE_INFO, &nr, NULL, 0,
				      "WNetGetResourceInformation");
  if (ret != ERROR_MORE_DATA && ret != NO_ERROR)
    return 0;
@


1.23
log
@Remove unneeded whitespace.
* fhandler_fifo.cc (fhandler_fifo::open): Rework to cause errno to be set to
ENXIO when opening a fifo write/nonblocking.
* environ.cc (ucreqenv): Rename to ucenv.  Move code from old ucenv here and
conditionalize it on create_upcaseenv.
(ucenv): Delete.
(environ_init): Fix compiler warning by moving create_upcaseenv test to ucenv.
Don't bother checking for child_proc_info when calling ucenv since it is
assumed to be NULL at the point where the function is called.
* path.cc (symlink_worker): Turn off MS-DOS path warnings when dealing with
devices since the device handler passes in a translated MS-DOS path.
* sec_auth.cc (lsaprivkeyauth): Avoid variable initialization which causes a
compiler error.
* fhandler_netdrive.cc: Update copyright.
@
text
@a223 1
      nro = (NETRESOURCE *) alloca (4096);
@


1.22
log
@	* autoload.cc (WNetGetProviderNameA): Define.
	(WNetGetResourceParentA): Remove.
	* fhandler_netdrive.cc (struct net_hdls): New structure to keep
	WNet handles.  Stored in dir->__handle throughout.
	(thread_netdrive): Rewrite to enumerate all servers in all accessible
	domains and workgroups.
	(fhandler_netdrive::readdir): Simplify toplevel code.  Lowercase all
	server names in toplevel.
	(fhandler_netdrive::rewinddir): Close all WNet handles and free
	net_hdls structure.
@
text
@d3 1
a3 1
   Copyright 2005 Red Hat, Inc.
d110 1
a110 1
        {
@


1.21
log
@Remove unneeded header files from source files throughout.
@
text
@d17 2
d42 6
d52 4
a55 4
  LPTSTR dummy = NULL;
  LPNETRESOURCE nro, nro2;
  DWORD size;
  HANDLE enumhdl;
d65 27
a92 1
    case GET_RESOURCE_OPENENUMTOP:
d94 6
d104 14
a117 1
      if (ndi->what == GET_RESOURCE_OPENENUMTOP)
d119 2
a120 1
	  nro2 = nro;
d122 8
a129 1
	  ndi->ret = WNetGetResourceParent (nro2, nro, &size);
a132 8
      ndi->ret = WNetOpenEnum (RESOURCE_GLOBALNET, RESOURCETYPE_DISK, 0, nro,
			       &enumhdl);
      if (ndi->ret == NO_ERROR)
	*(HANDLE *) ndi->out = enumhdl;
      break;
    case GET_RESOURCE_ENUM:
      ndi->ret = WNetEnumResource ((HANDLE) ndi->in, (size = 1, &size),
				   (LPNETRESOURCE) ndi->out, &ndi->outsize);
a200 1
  DWORD size;
d208 1
a208 1
      char *namebuf;
d210 1
d212 1
a212 12
      if (len == 2)	/* // */
	{
	  namebuf = (char *) alloca (MAX_COMPUTERNAME_LENGTH + 3);
	  strcpy (namebuf, "\\\\");
	  size = MAX_COMPUTERNAME_LENGTH + 1;
	  if (!GetComputerName (namebuf + 2, &size))
	    {
	      res = geterrno_from_win_error ();
	      goto out;
	    }
	}
      else
d225 1
d228 1
a228 1
				    &nr, &dir->__handle, 0, "WNetOpenEnum");
d235 1
d248 4
a251 1
	de->d_ino = hash_path_name (get_ino (), de->d_name);
d284 8
a291 1
    WNetCloseEnum (dir->__handle);
@


1.20
log
@	* smallprint.cc (__small_vswprintf): Fix uninitialized usage of `w'.

	Revamp advisory file locking to avoid cross reference pointers as well
	as to allow BSD flock semantics.  More agressively delete unused nodes
	and sync objects.
	* fhandler.h (fhandler_base::ino): Rename from namehash.  Fix comment.
	(fhandler_base::node): Remove.
	(fhandler_base::unique_id): Add.
	(fhandler_base::del_my_locks): New method.
	(get_ino): Rename from get_namehash.  Change usage throughout Cygwin.
	(get_unique_id): New method.
	* fhandler.cc (fhandler_base::close): Call own del_my_locks method.
	Fix comment.
	(fhandler_base::fhandler_base): Accommodate new and changed members.
	(fhandler_base::fixup_after_fork): Call del_my_locks.
	(fhandler_base::fixup_after_exec): Ditto for files with close-on-exec
	flag set.
	* fhandler_disk_file.cc (get_ino_by_handle): Rename from
	readdir_get_ino_by_handle.  Accommodate throughout.
	(fhandler_base::open_fs): Fill ino with inode number if FS has good
	inodes.  Allocate a LUID and store in unique_id to recognize file
	descriptors referencing the same file object.
	* flock.cc: Drop flock TODO comments.  Use explicit types __dev32_t
	and __ino64_t instead of dev_t and ino_t.
	(LOCK_OBJ_NAME_LEN): Change to reflect longer lf_id length.
	(get_obj_handle_count): New method.
	(lockf_t::lf_id): Change type to long long.
	(inode_t::get_lock_obj_handle_count): Drop in favor of static function
	get_obj_handle_count.
	(inode_t::del_locks): Remove.
	(inode_t::get): Add create_if_missing flag argument.
	(inode_t::del_my_locks): Reimplement to handle POSIX and BSD flock
	locks.  Return if node can be deleted or not.
	(inode_t::~inode_t): Ditto.  Close handles to i_dir and i_mtx.
	(fixup_lockf_after_fork): Remove.
	(fhandler_base::del_my_locks): New method.
	(fixup_lockf_after_exec): Check if node can be deleted.
	(inode_t::get): Only create node if create_if_missing is set.  Lock
	the returned node here before unlocking the node list.
	(inode_t::get_all_locks_list): Accommodate new lf_id length.
	(inode_t::create_lock_obj): Ditto.
	(lockf_t::open_lock_obj): Ditto.  Change return type to bool.  De-const.
	Set lf_obj instead of returning a handle.
	(lockf_t::del_lock_obj): Call SetEvent only if new incoming parameters
	allow it.  Explain how it's supposed to work.
	(fhandler_disk_file::lock): Only fetch file length in SEEK_END case.
	Use NtQueryInformationFile(FileStandardInformation) instead of
	calling fstat_by_handle.  Always unlock node before returning.
	Use fhandler's unique id to create lf_id for BSD flock locks.
	Rely on node lock from inode_t::get.  Call del_lock_obj on removed
	locks here to allow explicit unlocking.  Delete node if no lock exists
	on the file anymore.
	(lf_setlock): Get file handle as additional parameter.  Handle the fact
	that lf_getblock now always opens the attached event object.  Reactivate
	erroneously applied patch which deactivates setting thread priority.
	Additionally handle blocking on BSD flock locks.
	(lf_clearlock): Get file handle as additional parameter.
	(lf_getlock): Close event handle opened by lf_getblock.
	(lf_getblock): Open potentially blocking event object here and check
	its signal state if it's a BSD flock lock.
	(lf_wakelock): Get file handle as additional parameter.
	* fork.cc (frok::child): Drop call to fixup_lockf_after_fork.
	* ntdll.h (struct _EVENT_BASIC_INFORMATION): Define.
	(enum _EVENT_INFORMATION_CLASS): Define.
	(NtQueryEvent): Declare.

	* fhandler.h (fhandler_base::fs_flags): Remove.
	(fhandler_base::set_fs_flags): Remove.
	(fhandler_base::get_fs_flags): Remove.
	* fhandler.cc (fhandler_base::write): Check for sparse file using
	pc.fs_flags().
	* fhandler_disk_file.cc (fhandler_disk_file::ftruncate): Ditto.

	The return of the volume serial number in fs_info.
	* fhandler.h (get_dev): New method.
	* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Drop call to
	NtQueryVolumeInformationFile(FileFsVolumeInformation).  Just use
	get_dev() method.
	* fhandler_fifo.cc (fhandler_fifo::open) Use device ID and inode number
	to generate fifo name.
	* path.h (fs_info::sernum): New member.
	(fs_info::serial_number): New method.
	(path_conv::fs_serial_number): New method.
	* path.cc (fs_info::update): Fetch volume serial number and store in
	sernum.
@
text
@a11 1
#include <unistd.h>
a12 1
#include <sys/cygwin.h>
a16 3
#include "dtable.h"
#include "cygheap.h"
#include "sigproc.h"
a17 1
#include <assert.h>
@


1.19
log
@	* dir.cc (readdir_worker): Drop dir parameter from call to
	readdir_get_ino.
	* fhandler.h (fhandler_disk_file::readdir_helper): Switch file name
	parameter to PUNICODE_STRING.
	* fhandler_disk_file.cc: Drop including ntdef.h.
	(class __DIR_mounts): Store mount points in UNICODE.  Additionally
	store cygdrive prefix in unicode here.  Change methods accordingly.
	(__DIR_mounts::eval_ino): Call new stat_worker instead of lstat64.
	(__DIR_mounts::~__DIR_mounts): New destructor to free UNICODE buffers.
	(path_conv::ndisk_links): Rewrite using native NT functions.
	(fhandler_base::fstat_by_handle): Use NAME_MAX instead of CYG_MAX_PATH.
	Always set pfvi->VolumeSerialNumber to non-0.  Remove last resort
	code.
	(fhandler_base::fstat_by_name): Rewrite using native NT functions.
	(fhandler_base::fstat_fs): Always call fstat_by_name if fstat_by_handle
	fails.
	(fhandler_base::fstat_helper): Rely on dwVolumeSerialNumber.
	(fhandler_disk_file::facl): Call fstat_by_name if fstat_by_handle fails.
	(DIR_BUF_SIZE): Define using NAME_MAX instead of CYG_MAX_PATH.
	(__DIR_cache): Remove __name.
	(d_dirname): Remove.
	(fhandler_disk_file::opendir): Drop pathname length check.
	Remove outdated comment.  Use get_name method instead of accessing
	pc.normalized_path directly.
	(readdir_get_ino): Drop unused dir parameter.  Accomodate throughout.
	Allocate fname dynamically.  Call new stat_worker instead of lstat64.
	Call NtOpenFile instead of CreateFile.  Call NtClose instead of
	CloseHandle.
	(fhandler_disk_file::readdir_helper): Use native NT functions.
	Check for volume mount points and use correct inode number.
	(fhandler_disk_file::readdir): Simplify slightly.
	Use get_name instead of pc.normalized_path.
	(fhandler_disk_file::rewinddir): Use RtlInitUnicodeString.
	(fhandler_cygdrive::fstat): Ignore floppy drives.  Set st_nlink
	correctly.
	(fhandler_cygdrive::readdir): Ignore floppy drives.
	* fhandler_netdrive.cc (fhandler_netdrive::readdir): Accommodate
	change to readdir_get_ino.
	* fhandler_proc.cc (PROC_DIR_COUNT): Define.
	(fhandler_proc::fstat): Evaluate correct link count for /proc.
	* ntdll.h (struct _FILE_DIRECTORY_INFORMATION): Define.
	(NtFsControlFile): Declare.
	(RtlAppendUnicodeToString): Declare.
	(RtlAppendUnicodeStringToString): Declare.
	(RtlCompareUnicodeString): Declare.
	(RtlCopyUnicodeString): Declare.
	(RtlCreateUnicodeStringFromAsciiz): Declare.
	(RtlEqualUnicodeString): Declare.
	(RtlFreeUnicodeString): Declare.
	(RtlInitEmptyUnicodeString): Declare.
	(RtlSecondsSince1970ToTime): Declare.
	(RtlInitEmptyUnicodeString): Define as inline function.
	(RtlInitCountedUnicodeString): Define as inline function.
	* path.cc (path_conv::check): New method with PUNICODE_STRING as path,
	preliminary implementation.
	(mount_info::get_mounts_here): Change to create UNICODE_STRINGs.
	Also copy cygpath prefix into UNICODE_STRING.
	(is_floppy): Drop 9x consideration.
	* path.h: Drop including ntdef.h.
	(path_conv::check): Add declaration.
	(path_conv::path_conv): Add constructor for UNICODE_STRING paths.
	* shared_info.h (mount_info::get_mounts_here): Change declaration.
	* syscalls.cc: Drop forward declaration of stat_worker.
	(stat_worke): Take path_conv as parameter.  Drop nofollow flag.
	(stat64): Create matching path_conv and call stat_worker with it.
	(lstat64): Ditto.
	* winsup.h: Include ntdef.h.
	(stat_worker): Declare.
	(readdir_get_ino): Change declaration.
@
text
@d146 1
a146 1
  buf->st_ino = get_namehash ();
d210 1
a210 1
	de->d_ino = hash_path_name (get_namehash (), de->d_name);
@


1.18
log
@	* fhandler_disk_file.cc (path_conv::hasgood_inode): Make inline.
	Drop remote fs handling entirely since unreliable inode numbers
	are now recognized differently.
	(path_conv::is_samba): Make inline.
	(fhandler_disk_file::opendir): Reformat comment.
	(fhandler_base::fstat_helper): Special case remote file systems
	returning (unreliable) 32 bit inode numbers.
	(fhandler_base::readdir): Ditto.
	* fhandler_netdrive.cc (fhandler_netdrive::readdir): Ditto.
@
text
@d213 1
a213 1
	  de->d_ino = readdir_get_ino (dir, nro->lpRemoteName, false);
@


1.17
log
@	* dir.cc (readdir_worker): Use slash as path separator when evaluating
	namehash for paths below /proc.
	* fhandler_netdrive.cc (fhandler_netdrive::readdir): Use expensive
	inode number evaluation on share names.
@
text
@d212 8
a219 1
        de->d_ino = readdir_get_ino (dir, nro->lpRemoteName, false);
@


1.16
log
@	* fhandler_netdrive.cc (fhandler_netdrive::fstat): Create unambiguous
	inode number.
	(fhandler_netdrive::readdir): Ditto.
@
text
@d209 4
a212 1
      de->d_ino = hash_path_name (get_namehash (), de->d_name);
@


1.15
log
@Change process_lock to lock_process throughout.  Change all calls to new
cygthread to handle extra argument, throughout.
* cygthread.h (cygthread::callproc): Declare new method.
(cygthread::cygthread): Add optional length argument to allow copying arguments
to executing thread.
* cygthread.cc (cygthread::callproc): Define new method.
(cygthread::stub): Use callfunc to invoke thread func to allow potentially
allocating stack memory which will be returned.
(cygthread::simplestub): Ditto.
(cygthread::cygthread): Accept arglen argument.  Reset ev here prior to
activating thread.  Wait for ev after activating thread if we're copying
contents to the thread.  Wait until the end before setting h, to allow thread
synchronization.
(cygthread::release): Don't reset ev here.  Rely on that happening the next
time the thread is activated.
* pinfo.h (commune_process): Rename declaration from _pinfo::commune_process.
* pinfo.cc (commune_process): Ditto for definition.  Modify slightly to allow
running as a separate cygthread.
* sigproc.cc (child_info::sync): Always wait for both subproc_ready and any
hProcess if we have a cygwin parent.
(talktome): Change argument to be a pointer to siginfo_t.  Contiguously
allocate whole siginfo_t structure + any needed extra for eventual passing to
commune_process thread.
(wait_sig): Accommodate change in talktome argument.
* pipe.cc (fhandler_pipe::fixup_after_exec): Remove debugging.
@
text
@d146 1
d209 2
@


1.14
log
@* cygerrno.h (geterrno_from_win_error): Change declaration to default to using
GetLastError and EACCESS.
* cygwin.din: Export readdir_r.
* include/cygwin/version.h: Bump API version number to 138.
* syscalls.cc (readdir_worker): New function, renamed from old readdir()
function.
(readdir): Use readdir_worker.
(readdir_r): New function.
* fhandler.h (fhandler_base::readdir): Accommodate second argument indicating
dirent buffer.
(fhandler_disk_file::readdir): Ditto.
(fhandler_cygdrive::readdir): Ditto.
(fhandler_proc::readdir): Ditto.
(fhandler_netdrive::readdir): Ditto.
(fhandler_registry::readdir): Ditto.
(fhandler_process::readdir): Ditto.
* fhandler.cc (fhandler_base::readdir): Ditto.
* fhandler_disk_file.cc (fhandler_disk_file::readdir): Ditto.
* fhandler_cygdrive.cc (fhandler_cygdrive::readdir): Ditto.
* fhandler_proc.cc (fhandler_proc::readdir): Ditto.
* fhandler_netdrive.cc (fhandler_netdrive::readdir): Ditto.
* fhandler_registry.cc (fhandler_registry::readdir): Ditto.
* fhandler_process.cc (fhandler_process::readdir): Ditto.
@
text
@d98 1
a98 1
  cygthread *thr = new cygthread (thread_netdrive, (LPVOID) &ndi, name);
@


1.13
log
@white space
@
text
@d150 2
a151 2
struct dirent *
fhandler_netdrive::readdir (DIR *dir)
d156 1
d171 2
a172 2
	      __seterrno ();
	      return NULL;
a192 1
	  __seterrno_from_win_error (ret);
d194 2
a195 1
	  return NULL;
d202 2
d205 4
a208 3
      if (ret != ERROR_NO_MORE_ITEMS)
	__seterrno_from_win_error (ret);
      return NULL;
d210 3
a212 4
  dir->__d_position++;
  char *bs = strrchr (nro->lpRemoteName, '\\');
  strcpy (dir->__d_dirent->d_name, bs ? bs + 1 : nro->lpRemoteName);
  return dir->__d_dirent;
d222 1
a222 1
    if (!readdir (dir))
@


1.12
log
@Eliminate (void) cast on standalone function calls throughout.
@
text
@d69 1
a69 1
        break;
d71 1
a71 1
        {
d81 1
a81 1
        *(HANDLE *) ndi->out = enumhdl;
d164 1
a164 1
        {
d175 1
a175 1
        {
d198 1
a198 1
  				nro = (LPNETRESOURCE) alloca (16384),
@


1.11
log
@* cygthread.cc (cygthread::detach): Make error message a little more detailed.
* fhandler.cc (fhandler_base::raw_read): Ditto for debug message.
* dcrt0.cc (do_exit): Add some more synchronization tests.
* fhandler_fifo.cc (fhandler_fifo::dup): Don't duplicate a nonexistent handle.
Use derived return value rather than always retuning 0.
* fhandler_netdrive.cc (fhandler_netdrive::exists): Wnet -> WNet.
* winsup.h (exit_states): Add a couple of new exit states.
@
text
@d143 1
a143 1
  (void) fhandler_base::fstat (buf);
@


1.10
log
@	* fhandler_netdrive.cc (fhandler_netdrive::telldir): Remove since it's
	equivalent to fhandler_virtual::telldir now anyway.
	* fhandler.h (class fhandler_netdrive): Remove telldir.
@
text
@d126 1
a126 1
				      "WnetGetResourceInformation");
@


1.9
log
@	* fhandler_netdrive.cc (fhandler_netdrive::telldir): Implement.
	(fhandler_netdrive::seekdir): Implement.
	(fhandler_netdrive::closedir): Call rewinddir to have only one point
	of calling WNetCloseEnum.
@
text
@a211 6
_off64_t
fhandler_netdrive::telldir (DIR *dir)
{
  return dir->__d_position;
}

@


1.8
log
@	* fhandler.h (class fhandler_netdrive): Add method rewinddir.
	* fhandler_netdrive.cc (struct netdriveinf): New structure to
	store thread arguments.
	(thread_netdrive): Thread handling all potentially blocking
	WNet... calls.
	(create_thread_and_wait): Start and wait for above thread.
	(fhandler_netdrive::exists): Change to call create_thread_and_wait
	instead of calling WNet... function.
	(fhandler_netdrive::readdir): Ditto.  Fix error handling.
	(fhandler_netdrive::rewinddir): New method.
@
text
@d215 1
a215 1
  return -1;
d219 1
a219 1
fhandler_netdrive::seekdir (DIR *, _off64_t)
d221 6
d241 1
a241 3
  if (dir->__handle != INVALID_HANDLE_VALUE)
    WNetCloseEnum (dir->__handle);
  dir->__handle = INVALID_HANDLE_VALUE;
@


1.7
log
@	* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Check
	return code from GetFileSize and set file size to 0 if necessary.
	* fhandler_netdrive.cc (fhandler_netdrive::fstat): Set permissions
	to read/execute for all.
@
text
@d21 2
d28 77
d125 3
a127 5
  LPTSTR sys = NULL;
  char buf[8192];
  DWORD n = sizeof (buf);
  DWORD rc = WNetGetResourceInformation (&nr, &buf, &n, &sys);
  if (rc != ERROR_MORE_DATA && rc != NO_ERROR)
d160 2
a161 2
      char *namebuf, *dummy;
      NETRESOURCE nr = { 0 }, *nro2;
d186 4
a189 3
      size = 4096;
      nro = (NETRESOURCE *) alloca (size);
      ret = WNetGetResourceInformation (&nr, nro, &size, &dummy);
d192 1
a192 21
	  __seterrno ();
	  return NULL;
	}

      if (len == 2)
        {
	  nro2 = nro;
	  size = 4096;
	  nro = (NETRESOURCE *) alloca (size);
	  ret = WNetGetResourceParent (nro2, nro, &size);
	  if (ret != NO_ERROR)
	    {
	      __seterrno ();
	      return NULL;
	    }
	}
      ret = WNetOpenEnum(RESOURCE_GLOBALNET, RESOURCETYPE_DISK, 0,
      			 nro, &dir->__handle);
      if (ret != NO_ERROR)
	{
	  __seterrno ();
d197 3
a199 4
  DWORD cnt = 1;
  size = 16384;	/* As documented in MSDN. */
  nro = (NETRESOURCE *) alloca (size);
  ret = WNetEnumResource (dir->__handle, &cnt, nro, &size);
d203 1
a203 1
	__seterrno ();
d223 9
@


1.6
log
@	* fhandler.h (fhandler_netdrive::readdir): Remove useless comment.
@
text
@d68 1
a68 1
  buf->st_mode = S_IFDIR | S_IXUSR | S_IXGRP | S_IXOTH;
@


1.5
log
@	* autoload.cc (WNetGetResourceParentA): Import.
	(WNetOpenEnumA): Import.
	(WNetEnumResourceA): Import.
	(WNetCloseEnum): Import.
	* fhandler.h (fhandler_netdrive::telldir): Add declaration.
	(fhandler_netdrive::seekdir): Ditto.
	(fhandler_netdrive::closedir): Ditto.
	* fhandler_netdrive.cc: Drop explicit including windows.h.  Include
	winnetwk.h instead of shlwapi.h.  Include dirent.h.
	(fhandler_netdrive::readdir): Implement.
	(fhandler_netdrive::telldir): New method.
	(fhandler_netdrive::seekdir): New method.
	(fhandler_netdrive::closedir): Ditto.
@
text
@a138 1
  /* FIXME: dot and dot_dot handling */
@


1.4
log
@* fhandler_netdrive.cc (fhandler_netdrive::exists): Assert that "//" exists.
@
text
@a10 1
#include <windows.h>
d22 3
a24 1
#include <shlwapi.h>
d74 95
a168 1
fhandler_netdrive::readdir (DIR * dir)
d170 4
a173 1
  return NULL;
@


1.3
log
@* cygtls.cc (_cygtls::remove): Eliminate compiler warning.
* dir.cc (mkdir): Check path for writability.
(rmdir): Ditto.  Remove check for special directories.
* path.cc (path_conv::check): Set PATH_RO for virtual devices.  Set error if
read-only and asked for writability.
* path.h (pathconv_arg): Add PC_WRITABLE.
(path_types): Add PATH_RO.
(path_conv::isro): Add (currently unused) check for read-only filesystem.
Return "ENOSHARE" when we know a share doesn't exist.
* include/sys/mount.h: Add MOUNT_RO flag.
* autoload.cc (WNetGetResourceInformationA): Import.
* fhandler_netdrive.cc (fhandler_netdrive::exists): Detect actual existence of
remote system rather than always assuming that it exists.
@
text
@d32 4
a35 1
  char namebuf[strlen (get_name ()) + 1];
@


1.2
log
@2005-05-09  Pierre Humblet <pierre.humblet@@ieee.org>

        * fhandler.h (class fhandler_netdrive): New class.
        * fhandler_netdrive.cc (fhandler_netdrive::fhandler_netdrive): New constructor.
        (fhandler_netdrive::exists): New method.
        (fhandler_netdrive::fstat): Ditto.
        (fhandler_netdrive::readdir): Ditto.
        (fhandler_netdrive::open): Ditto.
        * dtable.cc (build_fh_pc): Handle case FH_NETDRIVE.
        * path.cc (isvirtual_dev): Add FH_NETDRIVE.
        (mount_info::conv_to_win32_path): Detect netdrive device and bypass mount
        search for network paths.
@
text
@d11 1
d23 1
d30 18
@


1.1
log
@* Makefile.in (DLL_O_FILES): Add fhandler_netdrive.o.
* fhandler_netdrive.cc: Placeholder file for future development.
* devices.h (FH_NETDRIVE): Define new virtual device type.
(netdrive_dev): Define.
* devices.in (dev_netdrive_storage): Define.
* devices.cc: Regenerate.
@
text
@d1 1
a1 1
/* fhandler_netdrive.cc: fhandler for //XXX/x handling
d11 74
@

