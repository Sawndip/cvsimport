head	1.3;
access;
symbols
	cygwin-1_7_35-release:1.3
	cygwin-1_7_34-release:1.3
	cygwin-1_7_33-release:1.3
	cygwin-1_7_32-release:1.3
	cygwin-1_7_31-release:1.3
	cygwin-1_7_30-release:1.3
	cygwin-1_7_29-release:1.3
	cygwin-1_7_29-release-branchpoint:1.3.0.40
	cygwin-pre-user-db:1.3
	cygwin-1_7_28-release:1.3
	cygwin-1_7_27-release:1.3
	cygwin-1_7_26-release:1.3
	cygwin-1_7_25-release:1.3
	cygwin-1_7_24-release:1.3
	cygwin-1_7_23-release:1.3
	cygwin-1_7_22-release:1.3
	cygwin-1_7_21-release:1.3
	cygwin-1_7_20-release:1.3
	cygwin-1_7_19-release:1.3
	cygwin-64bit-postmerge:1.3
	cygwin-64bit-premerge-branch:1.3.0.38
	cygwin-64bit-premerge:1.3
	cygwin-1_7_18-release:1.3
	post-ptmalloc3:1.3
	pre-ptmalloc3:1.3
	cygwin-1_7_17-release:1.3
	cygwin-64bit-branch:1.3.0.36
	cygwin-1_7_16-release:1.3
	cygwin-1_7_15-release:1.3
	cygwin-1_7_14_2-release:1.3
	cygwin-1_7_14-release:1.3
	cygwin-1_7_12-release:1.3
	cygwin-1_7_11-release:1.3
	cygwin-1_7_10-release:1.3
	signal-rewrite:1.3.0.34
	pre-notty:1.3
	cygwin-1_7_9-release:1.3
	cv-post-1_7_9:1.3.0.32
	cygwin-1_7_8-release:1.3
	cygwin-1_7_7-release:1.3
	cygwin-1_7_5-release:1.3
	cygwin-1_7_4-release:1.3
	cygwin-1_7_3-release:1.3
	cygwin-1_7_2-release:1.3
	fifo_doover3:1.3.0.30
	cygwin-1_7_1-release:1.3
	prefifo:1.3
	cv-branch-2:1.3.0.28
	pre-ripout-set_console_state_for_spawn:1.3
	EOL_registry_mounts:1.3
	preoverlapped:1.3
	drop_9x_support_start:1.3
	cr-0x5f1:1.3.0.26
	cv-branch:1.3.0.24
	pre-ptymaster-archetype:1.3
	cr-0x3b58:1.3.0.22
	cr-0x5ef:1.3.0.18
	after-mmap-privanon-noreserve:1.3
	after-mmap-revamp:1.3
	before-mmap-revamp:1.3
	cgf-more-exit-sync:1.3
	post_wait_sig_exit:1.3
	pre_wait_sig_exit:1.3
	reparent-point:1.3
	noreparent:1.3.0.16
	cr-0x5e6:1.3.0.14
	cr-0x9e:1.3.0.12
	cr-0x9d:1.3.0.10
	cgf-deleteme:1.3.0.8
	pre-sigrewrite:1.3
	corinna-01:1.3
	cr-0x9c:1.3.0.6
	cr-0x9b:1.3.0.4
	cr-0x99:1.3
	Z-emcb-cygwin_daemon:1.3.0.2
	w32api-2_2:1.3
	mingw-runtime-2_4:1.3
	pre-cgf-merge:1.3
	cgf-dev-branch:1.3.0.20
	predaemon:1.2
	cygwin_daemon_merge_HEAD:1.2
	pregp02r1:1.2.0.12
	cygnus_cvs_20020108_pre:1.2
	Z-cygwin_daemon_merge_HEAD:1.3
	cygwin_daemon:1.2.0.4
	Z-cygwin_daemon_merge-new_HEAD:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2002.05.04.04.30.57;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2001.12.10.03.35.54;	author cgf;	state Exp;
branches
	1.2.4.1;
next	1.1;

1.1
date	2001.10.02.12.27.03;	author rbcollins;	state Exp;
branches;
next	;

1.2.4.1
date	2002.01.04.03.56.08;	author rbcollins;	state Exp;
branches;
next	1.2.4.2;

1.2.4.2
date	2002.06.13.14.34.06;	author rbcollins;	state Exp;
branches;
next	;


desc
@@


1.3
log
@.
@
text
@Copyright 2001 Red Hat Inc., Robert Collins

fhandlers are the core mechanism by which cygwin provides a file descripter (fd)
interface to things such as a random number generated, winsock sockets, raw disk
devices, the clipboard, the console and so on. Under unix access to all such
devices is via a combination of IOCTL's and open/close/read/write calls. Some
special functions do exist - such as bind () and listen () for sockets, but
these consistently operate on fd's. Under Win32 there are disparate interfaces
that have little in common with each other. See for example Direct Sound and
the Clipboard.

The fhandler class provides all open,read,write,close, ioctl and fork()/exec()
functionality for the fd interface. The base class operates on win32 backed
files. The various derived classes utilise win32 primitives to provide their
specific functionality.

When a file is opened - not necesarily via open() a fd is assigned to it. The fd
includes a pointer to the actual fhandler that operates this specific file. All
file-oriented system calls then operate off this basic structure.

For example, lets examine lseek ().

extern "C" off_t
_lseek (int fd, off_t pos, int dir)
{
  off_t res;
  sigframe thisframe (mainthread);

  if (dir != SEEK_SET && dir != SEEK_CUR && dir != SEEK_END)
    {
      set_errno (EINVAL);
      res = -1;
    }
  else if (cygheap->fdtab.not_open (fd))
    {
      set_errno (EBADF);
      res = -1;
    }
  else
    {
      res = cygheap->fdtab[fd]->lseek (pos, dir);
    }
  syscall_printf ("%d = lseek (%d, %d, %d)", res, fd, pos, dir);

  return res;
}

The sigframe thisframe (mainthread); is signal related - see
"how_signals_work.txt".

The if, else if, else tests (in order)
* the validity of the dir parameter,
* is the fd being passed actually open? (cannot seek on a closed fd)
* call the lseek virtual function in the associated fhandler.

So as you can see, there is no code that attempts to understand the nature of
the fhandler.

fhandlers that make cross-function-call use of win32 objects that are not
inheritable cross-process need to implement fixup-after-fork and recreate those
objects. HANDLES can be inherited, but memory mapped regions (for example)
cannot.

For an example step-by-step to create a new fhandler, see
../doc/fhandler-tut.txt

Note: In most case, it is safe to assume that using new/delete (or
malloc/free) in an fhandler is dangerous and to be avoided.  The reason
for this is that memory allocated to fhandlers is copied between execed
processes in the cygwin heap.  Memory allocated in new/delete is only
copied to forked processes.  So use cmalloc/cfree.

Obviously it is possible to use new/delete in some situations but if you're
seeing strange core dumps with usages like cat < /my/newfhandler then the
above may well be the culprit.
@


1.2
log
@whitespace cleanup
@
text
@d66 10
@


1.2.4.1
log
@Merged changes from HEAD
@
text
@@


1.2.4.2
log
@Merged changes from HEAD
@
text
@a65 10

Note: In most case, it is safe to assume that using new/delete (or
malloc/free) in an fhandler is dangerous and to be avoided.  The reason
for this is that memory allocated to fhandlers is copied between execed
processes in the cygwin heap.  Memory allocated in new/delete is only
copied to forked processes.  So use cmalloc/cfree.

Obviously it is possible to use new/delete in some situations but if you're
seeing strange core dumps with usages like cat < /my/newfhandler then the
above may well be the culprit.
@


1.1
log
@Tue Oct  2 22:25:23 2001  Robert Collins <rbtcollins@@hotmail.com>

        * how-fhandlers-work.txt: New file.
@
text
@d21 1
a21 1
For example, lets example lseek ().
d54 1
a54 1
* call the lseek virtual function in the associated fhandler. 
d64 1
a64 1
For an example step-by-step to create a new fhandler, see 
@

