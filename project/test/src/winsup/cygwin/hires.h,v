head	1.23;
access;
symbols
	cygwin-1_7_35-release:1.23
	cygwin-1_7_34-release:1.23
	cygwin-1_7_33-release:1.23
	cygwin-1_7_32-release:1.23
	cygwin-1_7_31-release:1.23
	cygwin-1_7_30-release:1.23
	cygwin-1_7_29-release:1.23
	cygwin-1_7_29-release-branchpoint:1.23.0.2
	cygwin-pre-user-db:1.23
	cygwin-1_7_28-release:1.23
	cygwin-1_7_27-release:1.23
	cygwin-1_7_26-release:1.23
	cygwin-1_7_25-release:1.23
	cygwin-1_7_24-release:1.23
	cygwin-1_7_23-release:1.23
	cygwin-1_7_22-release:1.23
	cygwin-1_7_21-release:1.23
	cygwin-1_7_20-release:1.22
	cygwin-1_7_19-release:1.22
	cygwin-64bit-postmerge:1.22
	cygwin-64bit-premerge-branch:1.22.0.2
	cygwin-64bit-premerge:1.22
	cygwin-1_7_18-release:1.22
	post-ptmalloc3:1.21
	pre-ptmalloc3:1.21
	cygwin-1_7_17-release:1.21
	cygwin-64bit-branch:1.21.0.2
	cygwin-1_7_16-release:1.21
	cygwin-1_7_15-release:1.21
	cygwin-1_7_14_2-release:1.21
	cygwin-1_7_14-release:1.21
	cygwin-1_7_12-release:1.21
	cygwin-1_7_11-release:1.20
	cygwin-1_7_10-release:1.20
	signal-rewrite:1.20.0.2
	pre-notty:1.19
	cygwin-1_7_9-release:1.16
	cv-post-1_7_9:1.16.0.2
	cygwin-1_7_8-release:1.16
	cygwin-1_7_7-release:1.16
	cygwin-1_7_5-release:1.14
	cygwin-1_7_4-release:1.14
	cygwin-1_7_3-release:1.14
	cygwin-1_7_2-release:1.14
	fifo_doover3:1.14.0.2
	cygwin-1_7_1-release:1.14
	prefifo:1.13
	cv-branch-2:1.13.0.10
	pre-ripout-set_console_state_for_spawn:1.13
	EOL_registry_mounts:1.13
	preoverlapped:1.13
	drop_9x_support_start:1.13
	cr-0x5f1:1.13.0.8
	cv-branch:1.13.0.6
	pre-ptymaster-archetype:1.13
	cr-0x3b58:1.13.0.4
	cr-0x5ef:1.13.0.2
	after-mmap-privanon-noreserve:1.12
	after-mmap-revamp:1.12
	before-mmap-revamp:1.12
	cgf-more-exit-sync:1.10
	post_wait_sig_exit:1.10
	pre_wait_sig_exit:1.10
	reparent-point:1.7
	noreparent:1.7.0.10
	cr-0x5e6:1.7.0.8
	cr-0x9e:1.7.0.6
	cr-0x9d:1.7.0.4
	cgf-deleteme:1.7.0.2
	pre-sigrewrite:1.6
	corinna-01:1.6
	cr-0x9c:1.6.0.4
	cr-0x9b:1.6.0.2
	cr-0x99:1.4
	Z-emcb-cygwin_daemon:1.4.0.2
	w32api-2_2:1.4
	mingw-runtime-2_4:1.4
	pre-cgf-merge:1.6
	cgf-dev-branch:1.4.0.16
	predaemon:1.2
	Z-cygwin_daemon_merge_HEAD:1.3
	cygwin_daemon_merge_HEAD:1.2
	cygwin_daemon:1.2.0.6
	Z-cygwin_daemon_merge-new_HEAD:1.3
	pregp02r1:1.2.0.2;
locks; strict;
comment	@ * @;


1.23
date	2013.06.14.09.09.41;	author corinna;	state Exp;
branches;
next	1.22;

1.22
date	2013.04.11.19.49.58;	author corinna;	state Exp;
branches;
next	1.21;

1.21
date	2012.03.26.09.05.50;	author corinna;	state Exp;
branches
	1.21.2.1;
next	1.20;

1.20
date	2011.08.03.16.40.47;	author yselkowitz;	state Exp;
branches;
next	1.19;

1.19
date	2011.05.17.17.08.09;	author yselkowitz;	state Exp;
branches;
next	1.18;

1.18
date	2011.03.30.21.54.09;	author corinna;	state Exp;
branches;
next	1.17;

1.17
date	2011.03.29.10.21.29;	author corinna;	state Exp;
branches;
next	1.16;

1.16
date	2010.08.09.16.47.46;	author yselkowitz;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2010.05.26.14.48.17;	author cgf;	state Exp;
branches;
next	1.14;

1.14
date	2009.10.13.02.26.33;	author ericb;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.07.22.28.49;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2005.11.11.16.42.15;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.04.20.45.56;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2005.05.18.17.23.17;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.28.00.09.08;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.27.23.33.29;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.23.16.26.30;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.07.05.18.01;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.06.02.14.06;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.30.02.51.21;	author cgf;	state Exp;
branches
	1.4.16.1;
next	1.3;

1.3
date	2002.06.07.03.44.33;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.15.17.06.40;	author cgf;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	2002.02.15.07.05.05;	author cgf;	state Exp;
branches;
next	;

1.21.2.1
date	2013.04.11.19.50.04;	author corinna;	state Exp;
branches;
next	;

1.16.2.1
date	2011.03.11.10.21.55;	author corinna;	state Exp;
branches;
next	;

1.4.16.1
date	2003.09.10.16.23.39;	author cgf;	state Exp;
branches;
next	;

1.2.6.1
date	2002.02.28.12.53.25;	author rbcollins;	state Exp;
branches;
next	1.2.6.2;

1.2.6.2
date	2002.06.13.14.34.06;	author rbcollins;	state Exp;
branches;
next	;


desc
@@


1.23
log
@	Streamline time/times functionality.  Remove last remains of former
	Windows 9x compatibility.
	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Drop now unneeded
	casts in calls to_timestruc_t.
	(fhandler_base::utimens_fs): Ditto for timespec_to_filetime.
	* fhandler_proc.cc (format_proc_stat): Ditto for to_time_t.
	* hires.h (class hires_ms): Remove unused member initime_ns.
	Remove declarations for timeGetTime_ns and prime.
	(hires_ms::uptime): Remove.
	* posix_ipc.cc (ipc_cond_timedwait): Ditto for timespec_to_filetime.
	* fhandler_registry.cc (fhandler_registry::fstat): Add cast.
	* resource.cc (fill_rusage): Call NtQueryInformationProcess rather than
	GetProcessTimes to deal with LARGE_INTEGER rather than FILETIME.
	* times.cc: Simplify time handling.  Throughout, use LARGE_INTEGER
	rather than FILETIME to simplify computations.  Throughout use
	{u}int64_t rather than {unsigned} long long.  Drop unneeded casts since
	NSPERSEC is 64 bit anyway.
	(systime_ns): Remove.
	(times): Call NtQuerySystemInformation to fetch boot time.  Call
	NtQueryInformationProcess rather than GetProcessTimes to deal with
	LARGE_INTEGER rather than FILETIME.  Call GetSystemTimeAsFileTime.
	(totimeval): Use constant 1000000 as in other functions.
	(time_t_to_filetime): Remove.
	(to_time_t): Change return type to time_t.
	(time_as_timestruc_t): Rename filetime to systime.
	(time): Ditto. Add cast.
	(hires_ns::nsecs): Fix return type cast.
	(hires_ms::timeGetTime_ns): Remove.
	(hires_ns::prime): Remove.
	(hires_ms::nsecs): Drop call to prime.  Call GetSystemTimeAsFileTime
	directly.  Subtract FACTOR here since it's the only function needing
	to do so.
	(minperiod): Cosmetically change to ULONG.
	(hires_ns::resolution): Fix return type cast.
	(hires_ms::resolution): Simplify, rely on NtQueryTimerResolution.
	* winsup.h: Align time related prototypes to above changes.
@
text
@/* hires.h: Definitions for hires clock calculations

   Copyright 2002, 2003, 2004, 2005, 2009, 2010, 2011, 2012, 2013 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#ifndef __HIRES_H__
#define __HIRES_H__

#include <mmsystem.h>

/* Conversions for per-process and per-thread clocks */
#define PID_TO_CLOCKID(pid) (pid * 8 + CLOCK_PROCESS_CPUTIME_ID)
#define CLOCKID_TO_PID(cid) ((cid - CLOCK_PROCESS_CPUTIME_ID) / 8)
#define CLOCKID_IS_PROCESS(cid) ((cid % 8) == CLOCK_PROCESS_CPUTIME_ID)
#define THREADID_TO_CLOCKID(tid) (tid * 8 + CLOCK_THREAD_CPUTIME_ID)
#define CLOCKID_TO_THREADID(cid) ((cid - CLOCK_THREAD_CPUTIME_ID) / 8)
#define CLOCKID_IS_THREAD(cid) ((cid % 8) == CLOCK_THREAD_CPUTIME_ID)

/* Largest delay in ms for sleep and alarm calls.
   Allow actual delay to exceed requested delay by 10 s.
   Express as multiple of 1000 (i.e. seconds) + max resolution
   The tv_sec argument in timeval structures cannot exceed
   HIRES_DELAY_MAX / 1000 - 1, so that adding fractional part
   and rounding won't exceed HIRES_DELAY_MAX */
#define HIRES_DELAY_MAX ((((UINT_MAX - 10000) / 1000) * 1000) + 10)

/* 100ns difference between Windows and UNIX timebase. */
#define FACTOR (0x19db1ded53e8000LL)
/* # of 100ns intervals per second. */
#define NSPERSEC 10000000LL

class hires_base
{
 protected:
  int inited;
 public:
  void reset() {inited = false;}
};

class hires_ns : public hires_base
{
  LARGE_INTEGER primed_pc;
  double freq;
  void prime ();
 public:
  LONGLONG nsecs (bool monotonic = false);
  LONGLONG usecs () {return nsecs () / 1000LL;}
  LONGLONG resolution();
};

class hires_ms : public hires_base
{
 public:
  LONGLONG nsecs ();
  LONGLONG usecs () {return nsecs () / 10LL;}
  LONGLONG msecs () {return nsecs () / 10000LL;}
  UINT resolution ();
};

extern hires_ms gtod;
#endif /*__HIRES_H__*/
@


1.22
log
@	* hires.h (hires_ns::nsecs): Declare with bool parameter.
	* times.cc (hires_ns::nsecs): Take bool parameter.  If set to true,
	don't use prime value (== return system wide absolute value).
@
text
@d3 1
a3 1
   Copyright 2002, 2003, 2004, 2005, 2009, 2010, 2011, 2012 Red Hat, Inc.
a57 3
  LONGLONG initime_ns;
  LONGLONG timeGetTime_ns ();
  void prime ();
a62 1
  LONGLONG uptime () {return (nsecs () - initime_ns) / 10000LL;}
@


1.21
log
@	* hires.h (hires_ms::dmsecs): Drop unused method.
	* times.cc (JITTER): Remove.
	(gtod): Revert to process-local variable.
	(hires_ms::nsecs): Just return system time to disallow discrepancy with
	the OS.
	(hires_ms::resolution): Return coarsest timer value from OS.  Add
	comment to explain why.
	(clock_setres): Ditto.
@
text
@d51 1
a51 1
  LONGLONG nsecs ();
@


1.21.2.1
log
@Pull inchange from HEAD
@
text
@d51 1
a51 1
  LONGLONG nsecs (bool monotonic = false);
@


1.20
log
@* cygtls.h (struct _local_storage): Add cw_timer member.
* cygtls.cc (_cygtls::init_thread): Initialize locals.cw_timer.
(_cygtls::fixup_after_fork): Ditto.
* tlsoffsets.h: Regenerate.
* ntdll.h (enum _TIMER_INFORMATION_CLASS): Define.
(struct _TIMER_BASIC_INFORMATION): Define.
(NtQueryTimer): Declare function.
* thread.h (cancelable_wait): Change timeout argument to
PLARGE_INTEGER and provide NULL default.
(fast_mutex::lock): Adjust accordingly.
(pthread_cond::wait): Change timeout argument to PLARGE_INTEGER
and default to NULL.
* thread.cc (cancelable_wait): Change timeout argument to
PLARGE_INTEGER.  Initialize _cygtls.locals.cw_timer if needed.
Use NT waitable timers for handling timeout.  Return remaining time
to timeout argument if timeout was relative.
(pthread_cond::wait): Change timeout argument to PLARGE_INTEGER.
Adjust to change in cancelable_wait.
(pthread_mutex::lock): Adjust to change in cancelable_wait.
(pthread_spinlock::lock): Ditto.
(pthread::join): Ditto.
(__pthread_cond_dowait): Change waitlength argument to PLARGE_INTEGER.
Adjust to changes in cancelable_wait and pthread_cond::wait.
(pthread_cond_timedwait): Adjust to change in __pthread_cond_dowait.
(pthread_cond_wait): Ditto.
(semaphore::_timedwait): Adjust to change in cancelable_wait.
(semaphore::_wait): Ditto.
* exceptions.cc (handle_sigsuspend): Ditto.
* signal.cc (nanosleep): Ditto.
* wait.cc (wait4): Ditto. Fix copyright dates.
* times.cc (FACTOR, NSPERSEC): Move from here...
* hires.h (FACTOR, NSPERSEC): ...to here.
@
text
@d3 1
a3 1
   Copyright 2002, 2003, 2004, 2005, 2009, 2010, 2011 Red Hat, Inc.
a64 1
  UINT dmsecs () { return timeGetTime_ns () / 10000LL; }
@


1.19
log
@* cygwin.din (clock_getcpuclockid): Export.
(pthread_getcpuclockid): Export.
* hires.h (PID_TO_CLOCKID): New macro.
(CLOCKID_TO_PID): New macro.
(CLOCKID_IS_PROCESS): New macro.
(THREADID_TO_CLOCKID): New macro.
(CLOCKID_TO_THREADID): New macro.
(CLOCKID_IS_THREAD): New macro.
* ntdll.h (enum _THREAD_INFORMATION_CLASS): Add ThreadTimes.
* posix.sgml (std-notimpl): Add clock_getcpuclockid and
pthread_getcpuclockid from here...
(std-susv4): ... to here.
(std-notes): Remove limitations of clock_getres and clock_gettime.
Note limitation of timer_create to CLOCK_REALTIME.
* sysconf.cc (sca): Set _SC_CPUTIME to _POSIX_CPUTIME, and
_SC_THREAD_CPUTIME to _POSIX_THREAD_CPUTIME.
* thread.cc (pthread_getcpuclockid): New function.
* timer.cc (timer_create): Set errno to ENOTSUP for CPU-time clocks.
* times.cc (clock_gettime): Handle CLOCK_PROCESS_CPUTIME_ID and
CLOCK_THREAD_CPUTIME_ID.
(clock_getres): Ditto.
(clock_settime): Set errno to EPERM for CPU-time clocks.
(clock_getcpuclockid): New function.
* include/pthread.h (pthread_getcpuclockid): Declare.
* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
@
text
@d32 5
@


1.18
log
@	* hires.h: Fix copyright.
	* times.cc: Ditto.
	localtime, gmtime).
	(FACTOR): Add comment.
	(NSPERSEC): Ditto.
	(JITTER): New definition.  Comment.
	(systime_ns): Avoid gratuitous copying of the value returned by
	GetSystemTimeAsFileTime.
	(corelocaltime, localtime, gmtime): Remove very old, unused code block.
	(cygwin_tzset): Remove.
	(hires_ms::timeGetTime_ns): Add missing semicolon in comment.
	(hires_ms::nsecs): Redefine check for difference between internal
	timer value and system time.
@
text
@d16 8
@


1.17
log
@	* autoload.cc (winmm): Remove time functions.  Don't treat
	unloadable wave functions as fatal.
	* hires.h (hires_ms::timeGetTime_ns): New private method.
	(hires_ms::dmsecs): Call timeGetTime_ns here.
	* ntdll.h (struct _KSYSTEM_TIME): Define.
	(KUSER_SHARED_DATA): Redefine to allow access to InterruptTime.
	(SharedUserData): Define here.
	(NtQueryTimerResolution): Declare.
	(NtSetTimerResolution): Declare.
	* path.cc (SharedUserData): Move to ntdll.h.
	* times.cc (hires_ms::timeGetTime_ns): New private method.
	Use throughout instead of timeGetTime.  Document entire functionality
	of timeGetTime in case we need it.
	(hires_ms::resolution): Try a call to NtQueryTimerResolution
	to fetch current period.  Fall back to heuristic if that fails.
	Cast to DWORD in assignments to minperiod.
	(clock_setres): Align period to possible values per a call to
	NtQueryTimerResolution.  Explain why.  Replace calls to timeBeginPeriod
	and timeEndPeriod with underlying call to NtSetTimerResolution.  Use
	status code from NtSetTimerResolution to compute errno.
	Convert period to ULONGLONG and store 100ns value to simplify code.
@
text
@d3 1
a3 1
   Copyright 2002, 2003, 2004, 2005, 2009, 2010 Red Hat, Inc.
@


1.16
log
@Implement POSIX.1-2004 Monotonic Clock.
* hires.h: Change hires_us to hires_ns, with nanosecond resolution.
(hires_ns::primed_ft): Remove.
(hires_ns::nsecs): New prototype.
(hires_ns::usecs): Rewrite in terms of nsecs.
(hires_ns::resolution): New prototype.
* times.cc: Change hires_us to hires_ns.
(ntod): Declare.
(systime): Remove.
(hires_ns::prime): Increase resolution to nanoseconds.
(hires_ns::nsecs): Rename usecs to nsecs to reflect increased resolution.
Remove justdelta argument.
(hires_ns::resolution): New function.
(clock_gettime): Accept CLOCK_MONOTONIC.
Use EINVAL instead of ENOSYS per POSIX.1-2004.
(clock_getres): Ditto.
(clock_setres): Use EINVAL instead of ENOSYS to conform with other
implementations.
* strace.cc (strace::microseconds): Adjust for hires_ns.
* sysconf.cc (sca): Set _SC_MONOTONIC_CLOCK to _POSIX_MONOTONIC_CLOCK.
* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
@
text
@d46 1
d52 1
a52 1
  UINT dmsecs () { return timeGetTime (); }
@


1.16.2.1
log
@	* autoload.cc (winmm): Rremove time functions.  Don't treat
	unloadable wave functions as fatal.
	* hires.h (hires_ms::timeGetTime_ns): New private method.
	(hires_ms::dmsecs): Call timeGetTime_ns here.
	* ntdll.h (struct _KSYSTEM_TIME): Define.
	(KUSER_SHARED_DATA): Redefine to allow access to InterruptTime.
	(SharedUserData): Define here.
	(NtQueryTimerResolution): Declare.
	(NtSetTimerResolution): Declare.
	* path.cc (SharedUserData): Move to ntdll.h.
	* times.cc (hires_ms::timeGetTime_ns): New private method.
	Use throughout instead of timeGetTime.
	(hires_ms::resolution): Try a call to NtQueryTimerResolution
	to fetch current period.  Fall back to heuristic if that fails.
	(clock_setres): Align period to possible values per a call to
	NtQueryTimerResolution.  Explain why.  Replace calls to
	timeBeginPeriod and timeEndPeriod with underlying call to
	NtSetTimerResolution.
@
text
@a45 1
  LONGLONG timeGetTime_ns ();
d51 1
a51 1
  UINT dmsecs () { return timeGetTime_ns () / 10000LL; }
@


1.15
log
@* hires.h (hires_base::reset): New function.
(hires_us): Specify that hires_base is a public import.
(hires_ms): Ditto.
* times.cc (gtod): Move earlier in file.
(settimeofday): Reset gtod so that base will be subsequently recalculated.
@
text
@d32 1
a32 1
class hires_us : public hires_base
a33 1
  LARGE_INTEGER primed_ft;
d38 3
a40 1
  LONGLONG usecs (bool justdelta);
@


1.14
log
@Improve clock_gettime and utimensat resolution.

* hires.h (hires_ms): Change initime_us to initime_ns, with 10x
more resolution.
(hires_ms::nsecs): New prototype.
(hires_ms::usecs, hires_ms::msecs, hires_ms::uptime): Adjust.
* times.cc (systime_ns): New helper function.
(hires_ms::prime): Use it for more resolution.
(hires_ms::usecs): Change to...
(hires_ms::nsecs): ...with more resolution.
(clock_gettime): Use more resolution.
(systime): Rewrite in terms of systime_ns.
(timespec_to_filetime): Rewrite math to reflect true operation.
* fhandler_disk_file.cc (utimens_fs): Use higher resolution.
@
text
@d3 1
a3 1
   Copyright 2002, 2003, 2004, 2005, 2009 Red Hat, Inc.
d28 2
d32 1
a32 1
class hires_us : hires_base
d42 1
a42 1
class hires_ms : hires_base
@


1.13
log
@* hires.h (hires_ms::initime_ms): Delete.
(hires_ms::initime_us): Just define as LONGLONG.
(hires_ms::uptime): New function.
* select.cc (select_stuff::wait): Use gtod for timing to attempt to avoid
windows 32 bit wraparound.
* times.cc (systime): New function.
(times): Replace GetTickCount with gtod.uptime.
(hires_us::prime): Use systime() to calculate system time rather than calling
GetSystemTimeAsFileTime directly.
(hires_ms::prime): Ditto.  Eliminate initime_ms.
(hires_ms::usecs): Try harder to detect wraparound.
* fhandler_proc.cc (format_proc_partitions): Set drive_size to zero to avoid a
compiler warning.
@
text
@d3 1
a3 1
   Copyright 2002, 2003, 2004, 2005 Red Hat, Inc.
d42 1
a42 1
  LONGLONG initime_us;
d45 3
a47 2
  LONGLONG usecs ();
  LONGLONG msecs () {return usecs () / 1000LL;}
d50 1
a50 1
  LONGLONG uptime () {return (usecs () - initime_us) / 1000LL;}
@


1.12
log
@* cygheap.h (init_cygheap::_gtod): Remove.
* cygwin.din: Export clock_getres and clock_setres.
* hires.h (hires_ms::minperiod): Delete declaration.
(hires_ms::began_period): Ditto.
(hires_ms::prime): Make void.
(hires_ms::resolution): Just define here.
(hires_ms::usecs): Remove unneeded argument.
(gtod): Redeclare as a variable.
* timer.cc (timer_thread): Eliminate argument to gtod.usecs().
(timer_tracker::gettime): Ditto.
(timer_tracker::settime): Ditto.
* times.cc (gettimeofday): Ditto.
(hires_ms::began_period): Delete declaration.
(hires_us::prime): Remove debugging.
(hires_ms::prime): Make void.  Eliminate period stuff.
(hires_ms::usecs): Eliminate argument to gtod.usecs().
(hires_ms::resolution): New function.
(clock_getres): Ditto.
(clock_setres): Ditto.
* version.h: Bump API version to 143.
* include/cygwin/time.h: New file.
@
text
@d42 1
a42 2
  DWORD initime_ms;
  LARGE_INTEGER initime_us;
d46 1
d49 1
@


1.11
log
@* cygheap.h (init_cygheap::_gtod): New hires_ms element.
* hires.h (hires_ms::minperiod): Remove static designation.
(hires::began_period): New field.
* signal.cc: Include headers required for cygheap.h now that gtod lives in the
cygheap.
* timer.c: Ditto.
* times.cc (gtod): Delete variable.
(gtod::minperiod): Ditto.
(gtod::began_period): Define.
(hires_ms::prime): Add more debugging output.  Call timeBeginPeriod only when
!began_period.
@
text
@d44 1
a44 3
  UINT minperiod;
  static bool began_period;
  UINT prime ();
d46 1
a46 1
  LONGLONG usecs (bool justdelta);
d48 1
a48 2
  UINT resolution () { return minperiod ?: prime (); }

d51 1
a51 1
#define gtod cygheap->_gtod
@


1.10
log
@	* mmap.cc (mmap64): Avoid compiler warning.
	* ntea.cc (NTReadEA): Ditto.
	* hires.h (hires_base): Remove useless usecs function.
@
text
@d44 2
a45 1
  static UINT minperiod;
d54 1
a54 1
extern hires_ms gtod;
@


1.9
log
@update copyright
@
text
@a27 2
 public:
  virtual LONGLONG usecs (bool justdelta) {return 0LL;}
@


1.8
log
@* times.cc (hires_ms::usecs): Compare the difference.
* hires.h: Add parentheses to HIRES_DELAY_MAX.
@
text
@d3 1
a3 1
   Copyright 2002 Red Hat, Inc.
@


1.7
log
@* exceptions.cc (set_signal_mask): Redefine to not pass by address.  Report
calculated mask in debugging output.
* sigproc.h (set_signal_mask): Reflect above change in declaration.
* path.cc (mount_item::build_win32): Take path apart before feeding it to
fnmunge.  Throughout, change use of _reent_winsup()-> to _my_tls.locals.
instead.  Throughout, remove obsolete MT_SAFE/_CYG_THREAD_FAILSAFE
considerations.  Througout, add cygtls.h include.
* Makefile.in (DLL_OFILES): Add cygtls.o.  Add some more objects to the
-fomit-frame-pointer list.
* acconfig.h: Remove obsolete settings.
* config.h.in: Ditto.
* bsdlib.cc: Add cygtls.h include.
* configure.in: Remove --enable-extra-threadsafe-checking.
* configure: Regenerate.
* cygtls.h (_local_storage): New struct renamed from _winsup_t (sic).
(_threadinfo:local_clib): Add new field.
(_threadinfo::locals): Ditto.
(_threadinfo::init_thread): Accept second _reent * argument.
(_threadinfo::call): Define as regparm.
(CYGTLS_PADSIZE): Remove unnecessary slop.
(_getreent): Define as a macro.
* thread.h: Remove _CYG_THREAD_FAILSAFE and MT_SAFE stuff.
(_winsup_t): Move to cygtls.h.
(ResourceLocks::ResourceLocks): Eliminate empty constructor.
(MTinterface::reents): Eliminate.
(MTinterface::thread_self_key): Eliminate.
(MTinterface::MTinterface): Eliminate.
* dcrt0.cc: Include stdio.h for _impure_ptr initialization.
(do_global_ctors): Remove run_ctors_p (sic) considerations.  Don't call atexit
here.
(__main): Initialize destructors for user here.
(dll_crt0_1): Accept a dummy argument.  Don't call init_thread here.  Don't set
_impure_ptr here.  Call do_global_ctors after more things have been
initialized.
(_dll_crt0): Define zeros buffer as max of needed size of CYGTLS_PADSIZE so
that it can be used for two purposes while minimizing stack usage.  Initialize
_impure_ptr specifically, for speed.  Call dll_crt0_1 with buffer argument.
(cygwin_dll_init): Call dll_crt0_1 with dummy argument.
* dtable.cc (dtable::find_unused_handle): Remove call to AssertResourceOwner.
* exceptions.cc: Move _threadinfo stuff to new file.
* cygtls.cc: New file.
* gentls_offsets: Accommodate increasing complexity of cygtls.h.
* hires.h (hires_base::~hires_base): Remove.
* init.cc (dll_entry): Remove setting of reents.
* thread.cc: Remove syslog.h include.
(__getreent): Simplify to use _my_tls.
(_reent_winsup): Delete.
(AssertResourceOwner): Delete.
(MTinterface::Init): Remove setting of _clib and _winsup, with all that
entails.
(MTinterface::fixup_after_fork): Ditto.
(pthread::thread_init_wrapper): Ditto.  Also remove call to
set_tls_self_pointer.
(pthread::set_tls_self_pointer): Eliminate.
(pthread::get_tls_self_pointer): Just return _my_tls.tid;
(__reent_t::init_clib): Eliminate.
* tlsoffsets.h: Regenerate.
@
text
@d22 1
a22 1
#define HIRES_DELAY_MAX (((UINT_MAX - 10000) / 1000) * 1000) + 10
@


1.6
log
@* signal.cc (nanosleep): Improve test for valid values.  Round delay up to
resolution.  Fix test for negative remainder.  Use timeGetTime through gtod.
(sleep): Round up return value.  Christopher Faylor <cgf@@redhat.com>
* hires.h (HIRES_DELAY_MAX): Define.
(hires_ms::minperiod): Declare static.
(hires_ms::resolution): New.
(hires_ms::dmsecs): New.
(hires_ms::prime): Return UINT.
(gtod): Declare.
* times.cc (hires_ms::prime): Always calculate minperiod and set it to 1 in
case of failure.  Return minperiod.
(hires_ms::resolution): Define.
(hires_ms::~hires_ms): Delete.
(hires_ms::usecs): Check minperiod to prime.
(gtod) Define as global.
@
text
@a29 1
  virtual ~hires_base () {}
@


1.5
log
@* hires.h (hires_ms::~hires_ms): Delete declaration.
* times.cc (hires_ms::~hires_ms): Delete definition..
@
text
@d16 8
a27 1
  virtual void prime () {}
d47 2
a48 2
  UINT minperiod;
  void prime ();
d51 3
d55 2
@


1.4
log
@* environ.cc (environ_init): Avoid a compiler warning.
* path.cc (path_conv::check): Ditto.
* path.h (path_conv::operator int): Ditto.
* regex/engine.c: Ditto throughout.
* regex/regcomp.c: Ditto throughout.
* regex/regexec.c: Ditto throughout.
@
text
@a43 1
  ~hires_ms ();
@


1.4.16.1
log
@merge from trunk
@
text
@a15 8
/* Largest delay in ms for sleep and alarm calls.
   Allow actual delay to exceed requested delay by 10 s.
   Express as multiple of 1000 (i.e. seconds) + max resolution
   The tv_sec argument in timeval structures cannot exceed
   HIRES_DELAY_MAX / 1000 - 1, so that adding fractional part
   and rounding won't exceed HIRES_DELAY_MAX */
#define HIRES_DELAY_MAX (((UINT_MAX - 10000) / 1000) * 1000) + 10

d20 1
d40 2
a41 2
  static UINT minperiod;
  UINT prime ();
d44 1
a44 3
  UINT dmsecs () { return timeGetTime (); }
  UINT resolution () { return minperiod ?: prime (); }

a45 2

extern hires_ms gtod;
@


1.3
log
@* autoload.cc (timeGetDevCaps): Define new autoload function.
(timeGetTime): Ditto.
(timeBeginPeriod): Ditto.
(timeEndPeriod): Ditto.
* hires.h (hires_base): New class.  Renamed from hires.
(hires_us): New class.
(hires_ms): New class.
* strace.cc (strace::microseconds): Use hires_us class.
* times.cc (gettimeofday): Use hires-ms class.
(hires_us::prime): Renamed from hires::prime.
(hires_us::usecs): Renamed from hires:usecs.
(hires_ms::prime): New method.
(hires_ms::usecs): New method.
(hires_ms::~hires_ms): New destructor.
@
text
@a45 1
  
@


1.2
log
@* hires.h (hires::usecs): Rename from utime.  Accept an argument.
* strace.cc (strace::microseconds): Use hires class for calculating times.
* sync.h (new_muto): Use NO_COPY explicitly in declaration.
* times.cc (gettimeofday): Reflect change in usecs argument.
(hires::usecs): Ditto.  Changed name from utime.
* winsup.h (NO_COPY): Add nocommon attribute to force setting aside space for
variable.
* regcomp.c (REQUIRE): Add a void cast to bypass a warning.
@
text
@d14 3
a16 1
class hires
d18 1
d20 8
d31 11
a41 1
  void prime () __attribute__ ((regparm (1)));
d43 2
a44 1
  LONGLONG usecs (bool justdelta) __attribute__ ((regparm (2)));
d46 1
@


1.2.6.1
log
@Merged changes from HEAD
@
text
@@


1.2.6.2
log
@Merged changes from HEAD
@
text
@d14 1
a14 3
#include <mmsystem.h>

class hires_base
a15 1
 protected:
a16 8
  virtual void prime () {}
 public:
  virtual LONGLONG usecs (bool justdelta) {return 0LL;}
  virtual ~hires_base () {}
};

class hires_us : hires_base
{
d20 1
a20 11
  void prime ();
 public:
  LONGLONG usecs (bool justdelta);
};

class hires_ms : hires_base
{
  DWORD initime_ms;
  LARGE_INTEGER initime_us;
  UINT minperiod;
  void prime ();
d22 1
a22 2
  LONGLONG usecs (bool justdelta);
  ~hires_ms ();
a23 1
  
@


1.1
log
@* hires.h: New file.
* times.cc (gettimeofday): Use hires class for calculating current time.
(hires::prime): New method.
(hires::utime): Ditto.
@
text
@d20 1
a20 1
  void prime ();
d22 1
a22 1
  LONGLONG utime ();
@

