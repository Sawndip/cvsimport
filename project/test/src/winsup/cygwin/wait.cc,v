head	1.45;
access;
symbols
	cygwin-1_7_35-release:1.45
	cygwin-1_7_34-release:1.45
	cygwin-1_7_33-release:1.45
	cygwin-1_7_32-release:1.45
	cygwin-1_7_31-release:1.45
	cygwin-1_7_30-release:1.45
	cygwin-1_7_29-release:1.45
	cygwin-1_7_29-release-branchpoint:1.45.0.2
	cygwin-pre-user-db:1.45
	cygwin-1_7_28-release:1.45
	cygwin-1_7_27-release:1.45
	cygwin-1_7_26-release:1.45
	cygwin-1_7_25-release:1.45
	cygwin-1_7_24-release:1.45
	cygwin-1_7_23-release:1.45
	cygwin-1_7_22-release:1.45
	cygwin-1_7_21-release:1.45
	cygwin-1_7_20-release:1.45
	cygwin-1_7_19-release:1.45
	cygwin-64bit-postmerge:1.45
	cygwin-64bit-premerge-branch:1.44.0.2
	cygwin-64bit-premerge:1.44
	cygwin-1_7_18-release:1.44
	post-ptmalloc3:1.42.2.4
	pre-ptmalloc3:1.42.2.4
	cygwin-1_7_17-release:1.43
	cygwin-64bit-branch:1.42.0.2
	cygwin-1_7_16-release:1.41
	cygwin-1_7_15-release:1.39
	cygwin-1_7_14_2-release:1.39
	cygwin-1_7_14-release:1.39
	cygwin-1_7_12-release:1.39
	cygwin-1_7_11-release:1.39
	cygwin-1_7_10-release:1.39
	signal-rewrite:1.38.0.2
	pre-notty:1.37
	cygwin-1_7_9-release:1.37
	cv-post-1_7_9:1.37.0.4
	cygwin-1_7_8-release:1.37
	cygwin-1_7_7-release:1.37
	cygwin-1_7_5-release:1.37
	cygwin-1_7_4-release:1.37
	cygwin-1_7_3-release:1.37
	cygwin-1_7_2-release:1.37
	fifo_doover3:1.37.0.2
	cygwin-1_7_1-release:1.37
	prefifo:1.37
	cv-branch-2:1.35.0.2
	pre-ripout-set_console_state_for_spawn:1.35
	EOL_registry_mounts:1.34
	preoverlapped:1.34
	drop_9x_support_start:1.34
	cr-0x5f1:1.34.0.8
	cv-branch:1.34.0.6
	pre-ptymaster-archetype:1.34
	cr-0x3b58:1.34.0.4
	cr-0x5ef:1.34.0.2
	after-mmap-privanon-noreserve:1.34
	after-mmap-revamp:1.34
	before-mmap-revamp:1.34
	cgf-more-exit-sync:1.34
	post_wait_sig_exit:1.34
	pre_wait_sig_exit:1.34
	reparent-point:1.32
	noreparent:1.32.0.2
	cr-0x5e6:1.31.0.2
	cr-0x9e:1.26.0.6
	cr-0x9d:1.26.0.4
	cgf-deleteme:1.26.0.2
	pre-sigrewrite:1.23
	corinna-01:1.23
	cr-0x9c:1.23.0.6
	cr-0x9b:1.23.0.4
	cr-0x99:1.23
	Z-emcb-cygwin_daemon:1.23.0.2
	w32api-2_2:1.20
	mingw-runtime-2_4:1.20
	pre-cgf-merge:1.23
	cgf-dev-branch:1.20.0.2
	predaemon:1.14
	cygwin_daemon_merge_HEAD:1.14
	pregp02r1:1.14.0.34
	cygnus_cvs_20020108_pre:1.14
	Z-cygwin_daemon_merge-new_HEAD:1.16
	Z-cygwin_daemon_merge_HEAD:1.16
	cygwin_daemon:1.14.0.4;
locks; strict;
comment	@// @;
expand	@o@;


1.45
date	2013.04.23.09.44.34;	author corinna;	state Exp;
branches;
next	1.44;

1.44
date	2013.01.21.04.38.29;	author cgf;	state Exp;
branches;
next	1.43;

1.43
date	2012.08.15.19.07.42;	author cgf;	state Exp;
branches;
next	1.42;

1.42
date	2012.07.21.22.58.20;	author cgf;	state Exp;
branches
	1.42.2.1;
next	1.41;

1.41
date	2012.06.19.00.52.59;	author cgf;	state Exp;
branches;
next	1.40;

1.40
date	2012.06.17.20.50.24;	author cgf;	state Exp;
branches;
next	1.39;

1.39
date	2011.12.17.07.01.21;	author cgf;	state Exp;
branches;
next	1.38;

1.38
date	2011.08.03.16.40.48;	author yselkowitz;	state Exp;
branches;
next	1.37;

1.37
date	2009.07.18.20.25.07;	author cgf;	state Exp;
branches;
next	1.36;

1.36
date	2009.06.14.05.38.55;	author cgf;	state Exp;
branches;
next	1.35;

1.35
date	2008.04.07.18.45.59;	author cgf;	state Exp;
branches;
next	1.34;

1.34
date	2005.06.09.05.11.51;	author cgf;	state Exp;
branches;
next	1.33;

1.33
date	2004.11.26.04.15.09;	author cgf;	state Exp;
branches;
next	1.32;

1.32
date	2004.09.03.01.53.12;	author cgf;	state Exp;
branches
	1.32.2.1;
next	1.31;

1.31
date	2004.03.12.22.03.33;	author cgf;	state Exp;
branches;
next	1.30;

1.30
date	2004.03.12.03.09.28;	author cgf;	state Exp;
branches;
next	1.29;

1.29
date	2004.03.04.05.31.14;	author cgf;	state Exp;
branches;
next	1.28;

1.28
date	2004.02.12.03.01.58;	author cgf;	state Exp;
branches;
next	1.27;

1.27
date	2004.02.09.04.04.24;	author cgf;	state Exp;
branches;
next	1.26;

1.26
date	2003.12.17.22.47.32;	author cgf;	state Exp;
branches;
next	1.25;

1.25
date	2003.12.08.00.21.17;	author cgf;	state Exp;
branches;
next	1.24;

1.24
date	2003.11.28.20.55.58;	author cgf;	state Exp;
branches;
next	1.23;

1.23
date	2003.08.19.04.10.42;	author cgf;	state Exp;
branches;
next	1.22;

1.22
date	2003.06.16.03.24.12;	author cgf;	state Exp;
branches;
next	1.21;

1.21
date	2003.03.09.20.10.25;	author cgf;	state Exp;
branches;
next	1.20;

1.20
date	2003.01.15.10.21.23;	author corinna;	state Exp;
branches
	1.20.2.1;
next	1.19;

1.19
date	2003.01.14.20.13.09;	author tpfaff;	state Exp;
branches;
next	1.18;

1.18
date	2002.11.23.20.24.08;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2002.10.21.01.00.57;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2002.06.05.04.01.43;	author cgf;	state Exp;
branches;
next	1.15;

1.15
date	2002.05.25.02.22.50;	author cgf;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.24.22.26.53;	author cgf;	state Exp;
branches
	1.14.4.1;
next	1.13;

1.13
date	2001.04.01.00.06.17;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2001.03.18.21.11.25;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.18.03.34.05;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2001.01.17.14.57.09;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.16.02.29.47;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2000.11.15.06.27.48;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.12.04.38.29;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.22.05.10.20;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.22.03.58.47;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.02.16.28.18;	author dj;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.29.16.24.42;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.24.02.49.44;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.42.2.1
date	2012.08.16.09.41.45;	author corinna;	state Exp;
branches;
next	1.42.2.2;

1.42.2.2
date	2012.11.16.15.07.50;	author corinna;	state Exp;
branches;
next	1.42.2.3;

1.42.2.3
date	2012.12.10.11.45.51;	author corinna;	state Exp;
branches;
next	1.42.2.4;

1.42.2.4
date	2013.01.21.13.52.11;	author corinna;	state Exp;
branches;
next	;

1.32.2.1
date	2004.11.18.00.48.41;	author cgf;	state Exp;
branches;
next	;

1.20.2.1
date	2003.03.09.20.53.45;	author cgf;	state Exp;
branches;
next	1.20.2.2;

1.20.2.2
date	2003.07.06.05.10.43;	author cgf;	state Exp;
branches;
next	1.20.2.3;

1.20.2.3
date	2003.08.27.20.19.55;	author cgf;	state Exp;
branches;
next	;

1.14.4.1
date	2002.06.13.14.34.14;	author rbcollins;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.45
log
@	* Merge in cygwin-64bit-branch.
@
text
@/* wait.cc: Posix wait routines.

   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2008,
   2009, 2011, 2012 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include "winsup.h"
#include <sys/wait.h>
#include "sigproc.h"
#include "thread.h"
#include "cygtls.h"
#include "cygwait.h"

/* This is called _wait and not wait because the real wait is defined
   in libc/syscalls/syswait.c.  It calls us.  */

extern "C" pid_t
wait (int *status)
{
  return wait4 (-1, status, 0, NULL);
}

extern "C" pid_t
waitpid (pid_t intpid, int *status, int options)
{
  return wait4 (intpid, status, options, NULL);
}

extern "C" pid_t
wait3 (int *status, int options, struct rusage *r)
{
  return wait4 (-1, status, options, r);
}

/* Wait for any child to complete.
 * Note: this is not thread safe.  Use of wait in multiple threads will
 * not work correctly.
 */

extern "C" pid_t
wait4 (int intpid, int *status, int options, struct rusage *r)
{
  int res;
  HANDLE waitfor;
  waitq *w = &_my_tls.wq;

  pthread_testcancel ();

  while (1)
    {
      sig_dispatch_pending ();
      if (options & ~(WNOHANG | WUNTRACED | WCONTINUED))
	{
	  set_errno (EINVAL);
	  res = -1;
	  break;
	}

      if (r)
	memset (r, 0, sizeof (*r));

      w->pid = intpid;
      w->options = options;
      w->rusage = r;
      sigproc_printf ("calling proc_subproc, pid %d, options %d",
		      w->pid, w->options);
      if (!proc_subproc (PROC_WAIT, (uintptr_t) w))
	{
	  set_errno (ENOSYS);
	  paranoid_printf ("proc_subproc returned 0");
	  res = -1;
	  break;
	}

      if ((waitfor = w->ev) == NULL)
	goto nochildren;

      res = cygwait (waitfor, cw_infinite, cw_cancel | cw_cancel_self);

      sigproc_printf ("%d = cygwait (...)", res);

      if (w->ev == NULL)
	{
	nochildren:
	  /* found no children */
	  set_errno (ECHILD);
	  res = -1;
	  break;
	}

      if (w->status == -1)
	{
	  if (_my_tls.call_signal_handler ())
	    continue;
	  set_sig_errno (EINTR);
	  res = -1;
	}
      else if (res != WAIT_OBJECT_0)
	{
	  set_errno (EINVAL);
	  res = -1;
	}
      else if ((res = w->pid) != 0 && status)
	*status = w->status;
      break;
    }

  syscall_printf ("%R = wait4(%d, %y, %d, %p)", res, intpid, w->status, options, r);
  w->status = -1;
  return res;
}
@


1.44
log
@Throughout, update copyrights to reflect dates which correspond to main-branch
checkins.  Regularize copyright format.
@
text
@d72 1
a72 1
      if (!proc_subproc (PROC_WAIT, (DWORD) w))
d113 1
a113 1
  syscall_printf ("%R = wait4(%d, %p, %d, %p)", res, intpid, w->status, options, r);
@


1.43
log
@Rename cancelable_wait -> cygwait throughout.
* DevNotes: Add entry cgf-000015.
* cygwait.h (cygwait): Don't allow an optional PLARGE_INTERGER argument.
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
   2005, 2009, 2011, 2012 Red Hat, Inc.
@


1.42
log
@* DevNotes: Add entry cgf-000013.
* cygserver_ipc.h (ipc_set_proc_info): Use _cygtls::ipc_set_proc_info to set
per-thread signal arrived value.
* cygthread.cc (cygthread::detach): Use per-thread signal_arrived via
set_thread_waiting.
* fork.cc (_cygtls::fixup_after_fork): Clear signal_arrived.
(_cygtls::remove): Close any signal_arrived handle when thread exists.
(_cygtls::find_tls): Remove unneeded function.
* cygtls.h: Update copyright.
(class _cygtls): Reorganize to help avoid rebuilding newlib when structure
changes.
(_cygtls::event): Delete.
(_cygtls::threadkill): Ditto.
(_cygtls::signal_waiting): Declare new bool.
(_cygtls::find_tls): Delete declaration.
(_cygtls::set_threadkill): Ditto.
(_cygtls::reset_threadkill): Ditto.
(_cygtls::set_signal_arrived): Declare new function.
(class set_thread_waiting): Declare new class.
* cygwait.cc (cw_nowait_storage): Define.
(cygwait): Set per-thread signal_arrived via set_thread_waiting.  Don't
special-case _main_tls.
* cygwait.h (cw_nowait): Define.
(cw_infinite): Ditto.
(cygwait): Redefine pathological wait-only case.
* dcrt0.cc (dll_crt0_0): Remove call to now-defunct events_init().
(dll_crt0_1): Remove call to now-defunct create_signal_arrived().
* exceptions.cc: Reflect set_signal_mask() argument reordering throughout.
Remove signal mask synchronization throughout.
(events_init): Delete definition.
(mask_sync): Delete now-unneeded mask synchronization.
(set_signal_mask): Reverse order of arguments to "standard" to, from layout.
Rename "newmask" argument to "setmask".  Remove debugging.
(sig_handle_tty_stop): Use cancelable_wait rather than WFMO.
(_cygtls::interrupt_setup): Don't treat "threadkill" events specially.
Conditionally set signal_arrived depending on whether the thread has created it
or not.
(sigpacket::process): Reorganize to reflect thread-specific sending of signals
which is more in line with the way it was actually supposed to work.
* fhandler_socket.cc (get_inet_addr): Use cancelable_wait rather than
IsEventSignalled to avoid potential race.
(fhandler_socket::wait_for_events): Set signal_arrived event using
set_thread_waiting().
(fhandler_socket::close): Use cygwait for the case of just waiting 10 ms for a
signal.
* fhandler_tape.cc (fhandler_dev_tape::_lock): Use cancelable_wait rather than
WFMO.  Redo switch/case tests accordingly.
* fhandler_termios.cc (fhandler_termios::bg_check): Use cygwait for case of
just waiting 0 ms for a potential signal.
* fhandler_tty.cc (fhandler_pty_master::process_slave_output): Use
cancelable_wait rather than WFSO.
* fhandler_windows.cc (fhandler_windows::read): Set per-thread signal_arrived
via set_thread_waiting().
* flock.cc (lf_setlock): Ditto.
* select.cc (pselect): Ditto.  Set per-thread signal_arrived using
set_thread_waiting().
* gendef: Don't special case handling of _cygtls::sig for threads.
* gentls_offsets: Use #pragma once in tlsoffsets.h.
* ntdll.h: Use #pragma once.
* poll.cc: Reflect set_signal_mask() argument reordering.
* posix_ipc.cc (ipc_mutex_lock): Use cancelable_wait rather than WFMO.
(ipc_cond_timedwait): Set perl-thread signal arrived using
set_thread_waiting().
* security.h: Use #pragma once.
* signal.cc (abort): Reflect set_signal_mask() argument reordering.
(clock_nanosleep): Ditto.  Change call to cancelable_wait to properly specify
handling of cancel and interrupt.
(sigwaitinfo): Remove handling of per-thread event in favor of per-thread
signal_arrived.  Use cancelable_wait rather than WFSO.
* sigproc.cc (signal_arrived): Delete definition.
(create_signal_arrived): Ditto.
* sigproc.h (signal_arrived): Delete declaration.
(set_signal_mask): Avoid defining as a "C" function.  Don't conditionally
declare.
(create_signal_arrived): Delete declaration.
* syscalls.cc (rename): Use cygwait() rather than WFSO.
* thread.h (fast_mutex::lock): Use cw_infinite rather than LARGE_NULL.
* wait.cc (wait4): Ditto.
* thread.cc (pthread_mutex::lock): Ditto.
(pthread::join): Ditto.
(semaphore::_wait): Ditto.
(pthread_kill): Remove set_threadkill() accommodation.
* tlsoffsets.h: Regenerate.
@
text
@d83 1
a83 1
      res = cancelable_wait (waitfor, cw_infinite, cw_cancel | cw_cancel_self);
d85 1
a85 1
      sigproc_printf ("%d = cancelable_wait (...)", res);
@


1.42.2.1
log
@Pull in changes from HEAD
@
text
@d83 1
a83 1
      res = cygwait (waitfor, cw_infinite, cw_cancel | cw_cancel_self);
d85 1
a85 1
      sigproc_printf ("%d = cygwait (...)", res);
@


1.42.2.2
log
@	* cygmalloc.h (dlmalloc): Change unsigned in declaration to size_t.
	(dlrealloc): Ditto.
	* wait.cc (wait4): Cast second parameter in proc_subproc call to
	uintptr_t.
@
text
@d72 1
a72 1
      if (!proc_subproc (PROC_WAIT, (uintptr_t) w))
@


1.42.2.3
log
@	* Throughout, fix format string of debug printf and api_fatal calls
	to work in 32 and 64 bit environment, as well as to honor signedness.
	Use %y instead of 0x%x.
	* fhandler.h (class fhandler_dev_mem): Change type of mem_size from
	DWORD to SIZE_T.
	* fhandler_mem.cc: Throughout, cast mem_size in comparisons to make
	GCC happy.
	* fhandler_process.cc (format_process_maps): Change type of ret_len
	to SIZE_T.
	(get_mem_values): Ditto for n and length.
	* mmap.cc (MapView): Ditto for commitsize and viewsize.
	(class mmap_record): Ditto for len.  Use SIZE_T througout for memory
	size in method args and return types.
	* ntdll.h (NtLockVirtualMemory): Fix type of memory size parameters
	to SIZE_T.
	(NtMapViewOfSection): Ditto.
	(NtQueryVirtualMemory): Ditto.
	(NtUnlockVirtualMemory): Ditto.
	(RtlFreeHeap): Change type of first parameter to HANDLE.
	* shm.cc (shmat): Change type of viewsize to SIZE_T.
	* timer.cc (timer_thread): Change type of sleep_ms to LONG.
	(ualarm): Drop casts to unsigned int in timer value computation.
@
text
@d113 1
a113 1
  syscall_printf ("%R = wait4(%d, %y, %d, %p)", res, intpid, w->status, options, r);
@


1.42.2.4
log
@Pull in changes from HEAD
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2008,
   2009, 2011, 2012 Red Hat, Inc.
@


1.41
log
@* cygwait.h (LARGE_NULL): Define.
(cancelable_wait): Define variant which accepts DWORD time argument.
(cygwait): Use cancelable_wait with DWORD argument.
(cygwait): Use cancelable_wait with DWORD argument and cw_sig_eintr for
timeout-only case.
* exceptions.cc (handle_sigsuspend): Use LARGE_NULL as second argument to
distinguish between cancelable_wait variants.
* thread.cc (pthread_mutex::lock): Ditto.
(pthread::join): Ditto.
(semaphore::_timedwait): Ditto.
* thread.h (fast_mutex::lock): Ditto.
* wait.cc (wait4): Ditto.
@
text
@d83 1
a83 1
      res = cancelable_wait (waitfor, LARGE_NULL, cw_cancel | cw_cancel_self);
@


1.40
log
@Add '#include "cygwait.h"' throughout, where appropriate.
* DevNotes: Add entry cgf-000012.
* Makefile.in (DLL_OFILES): Add cygwait.o.
* sigproc.h: Remove cygwait definitions.
* cygwait.h: New file.  Define/declare Cygwin waitfor functions.
* cygwait.cc: Ditto.
* exceptions.cc: Include cygwait.h.
(handle_sigsuspend): Accommodate change in cancelable_wait arguments.
(sigpacket::process): Display thread tls in debugging output.
* fhandler.cc (fhandler_base_overlapped::wait_overlapped): Use symbolic names
for signal and cancel return.
* fhandler_console.cc (fhandler_console::read): Ditto.
(fhandler_dev_dsp::Audio_out::waitforspace): Ditto.
fhandler_dev_dsp::Audio_in::waitfordata): Ditto.
* fhandler_fifo.cc (fhandler_fifo::wait): Ditto.
* fhandler_serial.cc (fhandler_serial::raw_read): Ditto.
* fhandler_tty.cc (fhandler_pty_slave::read): Ditto.
* select.cc (cygwin_select): Ditto.
* wait.cc (wait4): Ditto.
* thread.cc (cancelable_wait): Move definition to cygwait.h.
(pthread_cond::wait): Accommodate change in cancelable_wait arguments.
(pthread_mutex::lock): Ditto.
(pthread_spinlock::lock): Ditto.
(pthread::join): Ditto.
(pthread::thread_init_wrapper): Display tls in debugging output.
(semaphore::_timedwait): Ditto.
* thread.h (cw_sig_wait): Move to cygwait.h.
(cw_cancel_action): Delete.
(cancelable_wait): Move declaration to cygwait.h.
@
text
@d83 1
a83 1
      res = cancelable_wait (waitfor, NULL, cw_cancel | cw_cancel_self);
@


1.39
log
@* exceptions.cc (set_signal_mask): Remove useless debugging output.
* fhandler.cc (fhandler_base::write): Ditto.
(fhandler_base_overlapped::close): Cancel any ongoing I/O before closing.
* syscalls.cc (write): Default to always reporting all writes in strace output
via syscall_printf.
* wait.cc (wait4): Fix debugging output.  Use standard syscall leaver output.
@
text
@d4 1
a4 1
   2005, 2009, 2011 Red Hat, Inc.
d17 1
d83 1
a83 1
      res = cancelable_wait (waitfor);
@


1.38
log
@* cygtls.h (struct _local_storage): Add cw_timer member.
* cygtls.cc (_cygtls::init_thread): Initialize locals.cw_timer.
(_cygtls::fixup_after_fork): Ditto.
* tlsoffsets.h: Regenerate.
* ntdll.h (enum _TIMER_INFORMATION_CLASS): Define.
(struct _TIMER_BASIC_INFORMATION): Define.
(NtQueryTimer): Declare function.
* thread.h (cancelable_wait): Change timeout argument to
PLARGE_INTEGER and provide NULL default.
(fast_mutex::lock): Adjust accordingly.
(pthread_cond::wait): Change timeout argument to PLARGE_INTEGER
and default to NULL.
* thread.cc (cancelable_wait): Change timeout argument to
PLARGE_INTEGER.  Initialize _cygtls.locals.cw_timer if needed.
Use NT waitable timers for handling timeout.  Return remaining time
to timeout argument if timeout was relative.
(pthread_cond::wait): Change timeout argument to PLARGE_INTEGER.
Adjust to change in cancelable_wait.
(pthread_mutex::lock): Adjust to change in cancelable_wait.
(pthread_spinlock::lock): Ditto.
(pthread::join): Ditto.
(__pthread_cond_dowait): Change waitlength argument to PLARGE_INTEGER.
Adjust to changes in cancelable_wait and pthread_cond::wait.
(pthread_cond_timedwait): Adjust to change in __pthread_cond_dowait.
(pthread_cond_wait): Ditto.
(semaphore::_timedwait): Adjust to change in cancelable_wait.
(semaphore::_wait): Ditto.
* exceptions.cc (handle_sigsuspend): Ditto.
* signal.cc (nanosleep): Ditto.
* wait.cc (wait4): Ditto. Fix copyright dates.
* times.cc (FACTOR, NSPERSEC): Move from here...
* hires.h (FACTOR, NSPERSEC): ...to here.
@
text
@d84 1
a84 1
      sigproc_printf ("%d = WaitForSingleObject (...)", res);
d112 1
a112 2
  sigproc_printf ("intpid %d, status %p, w->status %d, options %d, res %d",
		  intpid, status, w->status, options, res);
a113 2
  if (res < 0)
    sigproc_printf ("*** errno %d", get_errno ());
@


1.37
log
@* exceptions.cc (sig_handle_tty_stop): Set stopsig to SIGCONT when continuing.
(stopped_or_terminated): Honor WCONTINUED.
* wait.cc (wait4): Ditto.
* include/cygwin/wait.h (WCONTINUED): Define.
(__W_CONTINUED): Ditto.
(WIFCONTINUED): Ditto.
@
text
@d3 2
a4 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Red Hat, Inc.
d82 1
a82 1
      res = cancelable_wait (waitfor, INFINITE);
@


1.36
log
@* fhandler.cc (fhandler_base::wait_overlapped): Honor nonblocking flag for
writes.  Don't reset event handle when we see a ERROR_IO_PENDING.
* sigproc.cc (stopped_or_terminated): Use bool constants for consistency.
* wait.cc (wait4): Remove nonsensical comment.
@
text
@d55 1
a55 1
      if (options & ~(WNOHANG | WUNTRACED))
@


1.35
log
@Remove unneeded header files from source files throughout.
@
text
@a102 2
	  /* We shouldn't set errno to any random value if we can help it.
	     See the Posix manual for a list of valid values for `errno'.  */
@


1.34
log
@Change pthread::cancelable_wait to just cancelable_wait, throughout.
* thread.h (cw_sig_wait): New enum.
(fast_mutex::lock): Use cancelable_wait with resumable signal.
(cancelable_wait): Change fourth argument to cw_sig_wait enum.
* thread.cc (cancelable_wait): Ditto.  Loop on signal detection if fourth
argument == cw_sig_resume.
@
text
@a12 2
#include <stdlib.h>
#include "cygerrno.h"
@


1.33
log
@* child_info.h (child_info_spawn::hexec_proc): Eliminate.
* dcrt0.cc (dll_crt0_0): Remove hexec_proc stuff.
* fork.cc (fork_child): Remove call to pinfo_fixup_after_fork.
* pinfo.cc (set_myself): Close and zero pid_handle if set.
(pinfo_fixup_after_fork): Delete.
(proc_waiter): Don't close vchild.hProcess here.  Do that when we are remove
the vchild from procs.  Save hProcess as pid_handle only on first reparent
operation.
(pinfo::wait): Don't set pid_handle here.
(pinfo::alert_parent): Always try to send signal.  If unsuccessful then close
and zero wr_proc_pipe.
* pinfo.h (pinfo::pinfo): Make sure that appropriate parts of the class are
zeroed on construction.
(pinfo::alert_parent): Take char argument.
(pinfo_fixup_after_fork): Delete declaration.
(hexec_proc): Ditto.
* sigproc.cc (remove_proc): Close pid_handle and hProcess if appropriate.
* spawn.cc (spawn_guts): Set cygheap->pid_handle on first exec.
* cygheap.h (init_cygheap::pid_handle): New element.
* pinfo.cc (set_myself): Clear previously existing cygheap->pid_handle when a
new process has been started.
(pinfo::wait): Make sure that a handle to the newly forked/spawned process is
kept around so that the pid will not be reused.
* pinfo.h (_pinfo::pid_handle): Move.
(pinfo::pid_handle): to here.
* spawn.cc (spawn_guts): Create a pid_handle in cygheap prior to spawning to
ensure that the pid does not get reused during the lifetime of the "cygwin
pid".
* pinfo.h (pinfo::alert_parent): New function.
* exceptions.cc (sig_handle_tty_stop): Use alert_parent to send "signals" to
parent.
* fork.cc (fork_parent): Don't close pi.hProcess.  Let the waiter thread do
that.
* pinfo.cc (proc_waiter): Detect case where process exits without setting the
exit code and use value from GetExitCodeProcess.  Reluctantly implement
__SIGREPARENT.
(pinfo::alert_parent): Define.
* sigproc.h (__SIGREPARENT): New enum.
* spawn.cc (spawn_guts): Send reparent signal to parent on exec.  Always create
process in suspended state to avoid races.  Remove cygthread.h in favor of
cygtls.h throughout since cygtls now includes cygthread.h.  Eliminate
ppid_handle usage throughout.
* child_info.h: Regenerate magic number
(child_info): Remove pppid_handle.
* cygthread.h (cygthread::release): New method.  Frees thread without waiting.
* cygthread.cc (cygthread::stub): Set _ctinfo in _mytls to point to information
for executing thread.  Don't call SetEvent if thread is no longer in use.
(cygthread::simplestub): Ditto.
* cygtls.h (_cygtls::_ctinfo): New element contains pointer to information
about executing cygthread, if any.
* dcrt0.cc: Remove last vestiges of per_thread stuff.
(dll_crt0_0): Ditto.  Remove accommodation for ppid_handle.
(do_exit): Remove obsolete reparenting test.
(_exit): Exit with a more SUSv3-like exit value.
* dtable.cc (dtable::stdio_init): Check for myself->cygstarted rather than
myself->ppid_handle to see if we were started by a cygwin process.
* exceptions.cc (open_stackdumpfile): Ditto.
(handle_exceptions): Ditto.
(ctrl_c_handler): Ditto.
(sig_handle_tty_stop): Ditto.  Let parent send signal to itself on STOP.
(sigpacket::process): Comment out vfork test.
(signal_exit): Use more SUSv3-like exit value on signal.
* external.cc (fillout_pinfo): Don't set hProcess.
* fork.cc: Remove VFORK cruft.
(per_thread::set): Delete.
(fork_child): Remove perthread stuff.
(fork_parent): Remove obsolete subproc_init.  Accommodate new method for
tracking subprocesses.
* pinfo.cc (set_myself): Accommodate new pinfo/_pinfo layout.  Set some things
here that used to be set in wait_sig.
(_pinfo::exit): Set exitcode here.  Close process pipe.
(_pinfo::commune_send): Accommodeate new pinfo/_pinfo layout.
(proc_waiter): New function.  Waits, in a thread for subprocess to go away.
(pinfo::wait): New function.  Initialization for proc_waiter.
* pinfo.h (_pinfo::exitcode): New element.
(_pinfo::cygstarted): Ditto.
(_pinfo::wr_proc_pipe): Ditto.
(_pinfo::ppid_handle): Delete.
(_pinfo::hProcess): Delete.
(_pinfo::lock): Delete.
(pinfo::hProcess): New element.
(pinfo::lock): Ditto.
(pinfo::wait): Declare new function.
(pinfo::preserve): Define new function.
* sigproc.cc: Remove old stuff from wait_subproc thread based method.
(zombies): Remove.
(procs): New.
(my_parent_is_alive): Just check that the parent pid exists.
(mychild): Just use pinfo methods to determine if child is mine.
(proc_subproc): Revamp PROC_ADDCHILD to use pinfo::wait.  Remove
PROC_CHILDTERMINATED logic.  Use different method to remove processes from list
when SIGCHLD == SIG_IGN.
(proc_terminate): Gut.
(subproc_init): Delete.
(init_child_info): Remove setting of pppid_handle.
(checkstate): Revamp to only scan procs array.
(remove_proc): Rename from remove_zombie.  Don't close hProcess or pid_handle.
Don't release memory if it's myself.
(stopped_or_terminated): Change logic to handle new consolidated proc/zombie
array.
(wait_subproc): Delete.
* sigproc.h: Remove obsolete EXIT_* defines.
(subproc_init): Remove declaration.
* spawn.cc (spawn_guts): Remove reparenting stuff.  Use standard wait logic to
wait for child if started from a non-cygwin process.
* tlsoffsets.h: Regenerate.
* tty.cc (tty_init): Check for myself->cygstarted rather than
myself->ppid_handle to see if we were started by a cygwin process.
* include/sys/signal.h (external_pinfo::exitcode): Replace hProcess.
* include/sys/wait.h (WCOREDUMP): Define.
* fhandler_tty.cc (fhandler_tty_slave::read): Add debugging output for timeout
case.
* signal.cc (abort): Flag that we are exiting with the ABORT signal.
@
text
@d83 1
a83 1
      res = pthread::cancelable_wait (waitfor, INFINITE);
@


1.32
log
@Regularize most strace_prints throughout so that %E is always preceded by a
comma and elminate most uses of "foo = %s" to "foo %s".
@
text
@a15 1
#include "perthread.h"
@


1.32.2.1
log
@checkpoint
@
text
@d16 1
@


1.31
log
@* wait.cc (wait4): Initialize pointer on entry.  Avoid calling
call_signal_handler twice since that guarantees exiting with errno set to
EINTR.
@
text
@d120 1
a120 1
    sigproc_printf ("*** errno = %d", get_errno ());
@


1.30
log
@* cygtls.h (waitq): Declare structure here.
(_cygtls::wq): Declare.
* cygtls.cc (_cygtls::fixup_after_fork): Clear wq.thread_ev to avoid using an
invalid event handle in forked process.
* dcrt0.cc (waitq_storage): Delete.
(threadstuff): Remove waitq_storage.
* perthread.h (per_thread_waitq): Delete.
(waitq_storage): Delete declaration.
* sigproc.cc (sigproc_init): Remove perthread waitq consideration.
* sigproc.h (waitq): Delete declaration.
* wait.cc (wait4): Use _my_tls waitq structure rather than per_thread.
* cygtls.h (_cygtls::newmask): Delete member.
(_cygtls::deltamask): New member.
* gendef (_sigdelayed): Replace the call to set_process_mask by a call to
set_process_mask_delta.
* exceptions.cc (handle_sigsuspend): Do not filter tempmask.  Or
SIG_NONMASKABLE in deltamask as a flag.
(_cygtls::interrupt_setup): Set deltamask only.
(set_process_mask_delta): New function.
(_cygtls::call_signal_handler): Replace the first call to set_process_mask by a
call to set_process_mask_delta.
* tlsoffsets.h: Regenerate.
@
text
@d51 1
a51 1
  waitq *w;
a57 1
      bool sawsig = false;
d61 2
a62 1
	  return -1;
a67 2
      w = &_my_tls.wq;

d78 1
a78 1
	  goto done;
d94 1
a94 1
	  goto done;
d99 2
a101 2
	  _my_tls.call_signal_handler ();
	  sawsig = true;
d113 1
a113 4

    done:
      if (!sawsig || !_my_tls.call_signal_handler ())
	break;
@


1.29
log
@* gendef (sigreturn): Call stabilize_sig_stack to ensure that there are no
pending signals.  Restore edx later.
(sigdelayed): Save edx earlier.
* malloc_wrapper.cc (malloc_init): Add some more debugging output.
@
text
@d50 1
a51 1
  HANDLE waitfor;
d68 1
a68 2
      if ((w = (waitq *) waitq_storage.get ()) == NULL)
	w = (waitq *) waitq_storage.create ();
@


1.28
log
@Rename _threadinfo to _cygtls, throughout.
* cygtls.h (_cygtls::call_signal_handler): Rename from call_signal_handler_now.
(_cygtls::push): Make second argument mandatory.
(_cygtls::fixup_after_fork): Declare new function.
(_cygtls::lock): Ditto.
* cygtls.cc (_cygtls::fixup_after_fork): Define new function.
* dcrt0.cc (cygwin_finished_initializing): Define as bool.
(alloc_stack): Use _tlstop rather than arbitrary variable in probably vain
attempt to avoid strange fork problem on CTRL-C.
(dll_crt0_0): Remove obsolete winpids::init call.
* dll_init.cc (dll_dllcrt0): Detect forkee condition as equivalent to
initializing.
* winsup.h (cygwin_finished_initializing): Declare as bool.
* exceptions.cc (handle_exceptions): Rely on cygwin_finished_initializing to
determine how to handle exception during process startup.
(_cygtls::call_signal_handler): Rename from call_signal_handler_now.
(_cygtls::interrupt_now): Fill in second argument to push.
(signal_fixup_after_fork): Eliminate.
(setup_handler): Initialize locked to avoid potential inappropriate unlock.
Resume thread if it has acquired the stack lock.
(ctrl_c_handler): Just exit if ctrl-c is hit before cygiwn has finished
initializing.
* fork.cc (sync_with_child): Don't call abort since it can cause exit
deadlocks.
(sync_with_child): Change debugging output slightly.
(fork_child): Set cygwin_finished_initializing here.  Call _cygtls fork fixup
and explicitly call sigproc_init.
(fork_parent): Release malloc lock on fork failure.
(vfork): Call signal handler via _my_tls.
* sigproc.cc (sig_send): Ditto.
* syscalls.cc (readv): Ditto.
* termios.cc (tcsetattr): Ditto.
* wait.cc (wait4): Ditto.
* signal.cc (nanosleep): Ditto.
(abort): Ditto.
(kill_pgrp): Avoid killing self if exiting.
* sync.cc (muto::acquire): Remove (temporarily?) ill-advised exiting_thread
check.
* gendef (_sigfe): Be more agressive in protecting stack pointer from other
access by signal thread.
(_cygtls::locked): Define new function.
(_sigbe): Ditto.
(_cygtls::pop): Protect edx.
(_cygtls::lock): Use guaranteed method to set eax to 1.
(longjmp): Aggressively protect signal stack.
* miscfuncs.cc (low_priority_sleep): Reduce "sleep time" for secs == 0.
* pinfo.cc (winpids::set): Counterintuitively use malloc's lock to protect
simultaneous access to the pids list since there are pathological conditions
which can cause malloc to call winpid.
(winpids::init): Eliminate.
* pinfo.h (winpids::cs): Eliminate declaration.
* pinfo.h (winpids::init): Eliminate definition.
@
text
@d75 1
a75 1
		     w->pid, w->options);
@


1.27
log
@* debug.h (console_printf): Define for non-debugging condition.
* cygtls.h (_threadinfo::lock): Remove wait argument.
(_threadinfo::interrupt_setup): Remove retaddr argument.
* exceptions.cc (_threadinfo::interrupt_setup): Ditto.
(_threadinfo::interrupt_now): Accommodate change to interrupt_setup argument.
(setup_handler): Ditto.  Always lock sig stack prior to determining interrupt
method.
* gendef (_sigfe): Correct thinko regarding cmpxchg.
(_sigbe): Ditto.
(_threadinfo::lock): Ditto.
(_threadinfo::pop): Eliminate left-over stack unlock.
* sigproc.cc (proc_subproc): Chnage debugging output to printed warning.
@
text
@d18 1
d103 1
a103 1
	  call_signal_handler_now ();
d118 1
a118 1
      if (!sawsig || !call_signal_handler_now ())
@


1.26
log
@* pinfo.h (pinfo::operator ==): Add a way to check for _pinfo types.
* sigproc.cc (proc_subproc): Ensure that zombie is removed when SIGCHLD ==
SIG_IGN but still allow wait()ing threads to wake up.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Red Hat, Inc.
@


1.25
log
@* spawn.cc (spawn_guts): Change type back to 'int' after erroneous change
below.
@
text
@d101 1
a102 1
	  set_sig_errno (EINTR);
@


1.24
log
@Eliminate use of sigframe and sigthread throughout.
* Makefile.in (DLL_OFILES): Add sigfe.o.  Remove reliance on cygwin.def from
cygwin0.dll dependency since dependence on sigfe.o implies that.  Generate def
file on the fly using 'gendef'.
* configure.in: Don't auto-generate cygwin.def.
* configure: Regenerate.
* cygwin.din: Add SIGFE stuff where appropriate.
* dcrt0.cc (dll_crt0_1): Initialize cygwin tls early in process startup.  Set
_main_tls to address of the main thread's cygwin tls.
* debug.h: Remove now unneeded WFSO and WFMO declarations.
* exceptions.cc (_last_thread): Define.
(set_thread_state_for_signals): New function.
(reset_thread_exception_for_signals): Ditto.
(init_thread_for_signals): Ditto.
(delete_thread_for_signals): Ditto.
(capture_thread_for_signals): Ditto.
(handle_exceptions): Set return address explicitly for exceptions prior to
calling sig_send.
(interrupt_on_return): Eliminate.
(setup_handler): Add preliminary implementation for dealing with
thread-specific signals by querying _main_tls.
(signal_exit): Use cygthread::main_thread_id instead of mainthread.id.
(call_signal_handler_now): For now, just handle the main thread.
* fork.cc (vfork): Save and restore main _my_tls.
* gendef: New file.  Generates def file and sigfe.s file.
* gentls_offsets: New file.  Generates offsets for perl to use in sigfe.s.
* how-signals-work.txt: Mention that info is obsolete.
* init.cc (dll_entry): Initialize cygwin tls storage here.
* miscfuncs.cc (low_priority_sleep): Make a C function for easier calling from
asm.
* perthread.h (vfork_save::tls): New element.
* signal.cc (nanosleep): Replace previous use of
sigframe.call_signal_handler_now with straight call to call_signal_handler_now.
(abort): Ditto.
* syscalls.cc (readv): Ditto.
* termios.cc (tcsetattr): Ditto.
* wait.cc (wait4): Ditto.
* sigproc.cc (sig_dispatch_pending): Ditto.
(sig_send): Ditto.
* sigproc.h: Declare call_signal_handler_now.
* thread.cc (pthread::thread_init_wrapper): Initialize cygwin tls.  Remove
obsolete and unworking signal stuff.
* thread.h (verifyable_object::sigs): Eliminate.
(verifyable_object::sigmask): Eliminate.
(verifyable_object::sigtodo): Eliminate.
(verifyable_object::exit): Make attribute noreturn.
(verifyable_object::thread_init_wrapper): Ditto.
(pthread_null::exit): Ditto.
* winbase.h (__stackbase): Always define.
* winsup.h (low_priority_sleep): Declare as a "C" function.
* include/cygwin/version.h: Bump API version to reflect sigwait export.
* include/sys/queue.h: Protect SLIST_ENTRY from previous declaration.
* signal.cc (sigwait): Implement.
* select.cc (fhandler_base::ready_for_read): Add debugging output.
* devices.h: Define more device pointers via their storage.
* devices.in: Don't parse things like /dev/inet/tcp, as they really have no
meaning.
* devices.cc: Regenerate.
* gendevices: Set proper protection for output file.
* cygtls.h: New file.
* gendef: New file.
* gentls_offsets: New file.
* tlsoffsets.h: New file.  Autogenerated.
* config/i386/longjmp.c: Remove.  File subsumed by gendef output.
* config/i386/makefrag: Remove obsolete file.
* fhandler.cc: Remove spurious access_worker declaration.
* spawn.cc (spawnve): Make debugging output more accurate.
* cygwin-gperf: Remove.
* devices.cc: Remove.
@
text
@a50 1
  bool sawsig;
d57 1
a57 1
      sawsig = 0;
d75 1
a75 1
      if (!proc_subproc (PROC_WAIT, (DWORD)w))
d103 1
a103 1
	  sawsig = 1;
@


1.23
log
@Throughout, eliminate argument to sig_dispatch_pending.
* exceptions.cc (setup_handler): Move non-interruptible condition handling
(back) to wait_sig (as suggested by Pierre Humblet).
(set_process_mask): Don't worry about calling sig_dispatch_pending from
sigthread since it is detected in the function anyway.
(sig_handle): Eliminate thisproc arg.  Don't call sig_dispatch_pending on
SIGCONT since that should happen automatically.
* sigproc.cc (sig_dispatch_pending): Eliminate justwake argument.  Just return
when called from sigthread.
(wait_sig): Change some variables to bool.  Change inner while to an if.  Move
uninterruptible signal handling here.
(sigproc_terminate): Don't call sig_dispatch_pending.  Just increment semaphore
on exit.
* speclib: Use slightly different (but still flawed) method for determining
symbols to extract from libraries.
@
text
@a57 1
      sigframe thisframe (mainthread);
d102 1
d118 1
a118 1
      if (!sawsig || !thisframe.call_signal_handler ())
@


1.22
log
@Throughout, remove "include <errno.h>" from files which already include
cygerrno.h.
* include/cygwin/config.h (__DYNAMIC_REENT__): Define.
* include/cygwin/version.h: Bump API minor version.
* cygwin.din: Export __getreent
* cygerrno.h: Include errno.h.  Fix places where _impure_ptr is used directly
to store the errno value.
* debug.cc (__set_errno): Ditto.
* errno.cc: Remove _RRENT_ONLY define to get errno.cc compiled.
* signal.cc: Rename _reent_clib to _REENT throughout.
* thread.h (reent_clib): Remove prototype.
* thread.cc (reent_clib): Rename reent_clib to __getreent.  Return _impure_ptr
until MTinterface is initialized.
(reent_winsup): Fix a possible SEGV when _r == NULL.  Return NULL instead.
* MTinterface::fixup_after_fork: Switch reent back to _impure_ptr to keep
signal handling running when fork is called from a thread other than the
mainthread.
@
text
@d57 1
a57 1
      sig_dispatch_pending (0);
@


1.21
log
@Do some minor reformatting of 'extern "C"' use throughout.
* autoload.cc (GetSystemTimes): Define new autoload function.
* fhandler_proc.cc (proc_listing): Add cpuinfo and partitions entries.
(fhandler_proc::fill_filebuf): Add PROC_CPUINFO and PROC_PARTITIONS cases.
(format_proc_uptime): Use GetSystemTimes if available.
(read_value): New macro.
(print): New macro.
(cpuid): New function.
(can_set_flag): New function.
(format_proc_cpuinfo): New function.
(format_proc_partitions): New function.
@
text
@a13 1
#include <errno.h>
@


1.20
log
@	* autoload.cc: Fix copyright date.
	* fhandler_dsp.cc: Ditto.
	* mmap.cc: Ditto.
	* net.cc: Ditto.
	* ntdll.h: Ditto.
	* signal.cc: Ditto.
	* syscalls.cc: Ditto.
	* uname.cc: Ditto.
	* wait.cc: Ditto.
@
text
@d23 1
a23 2
extern "C"
pid_t
d29 1
a29 1
pid_t
d35 1
a35 1
pid_t
d46 1
a46 1
pid_t
@


1.20.2.1
log
@merge from trunk
@
text
@d23 2
a24 1
extern "C" pid_t
d30 1
a30 1
extern "C" pid_t
d36 1
a36 1
extern "C" pid_t
d47 1
a47 1
extern "C" pid_t
@


1.20.2.2
log
@merge from trunk
@
text
@d14 1
@


1.20.2.3
log
@merge from trunk
@
text
@d57 1
a57 1
      sig_dispatch_pending ();
@


1.19
log
@Apply wait_cancel patch
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
@


1.18
log
@* wait.cc (wait4): Force pending signal delivery before waiting for process
completion.
@
text
@d18 1
d55 2
d90 1
a90 1
      res = WaitForSingleObject (waitfor, INFINITE);
@


1.17
log
@Change _function() to function() throughout.
* cygwin.din: Remove last vestiges (?) of newlib wrappers.
* cygthread.cc (cygthread::detach): Always wait for event or suffer an
apparently inavoidable race.
* dcrt0.cc (dll_crt0_1): Allocate threads after stack has been relocated.
* debub.cc (lock_debug): Don't acquire lock on exit.
* fork.cc (fork_child): Recreate mmaps before doing anything else since Windows
has a habit of using blocks of memory in the child that could previously have
been occupied by shared memory in the parent.
* mmap.cc (fhandler_disk_file::fixup_mmap_after_fork): Issue error here and
provide some details about what went wrong.
(fixup_mmaps_after_fork): Remove error message.
* shared.cc (open_shared): Move warning message so that more detail is
possible.
* sigproc.cc (sigproc_init): Initialize sync_proc_subproc to avoid a race.
(sigproc_terminate): Specifically wait for process thread to terminate.
@
text
@d56 1
@


1.16
log
@* dtable.cc (handle_to_fn): Attempt to handle "raw" accesses to remote shares.
* path.cc (mount_info::conv_to_win32_path): Set flags to binary when mount
entry is not found.
(mount_info::set_flags_from_win32_path): Ditto.
@
text
@d24 1
a24 1
_wait (int *status)
@


1.15
log
@Remove unneeded sync.h, where appropriate, throughout.  Remove unneeded heap.h,
where appropriate, throughout.  Remove unneeded exceptions.h, where
appropriate, throughout.  Remove unneeded perprocess.h, where appropriate,
throughout.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001 Red Hat, Inc.
@


1.14
log
@forced commit
@
text
@a15 1
#include "sync.h"
@


1.14.4.1
log
@Merged changes from HEAD
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
d16 1
@


1.13
log
@* sigproc.h (class sigframe): Implement 'unregister()' method.
(sigframe::~sigframe): Use unregister method.
(sigframe::call_signal_handler): Declare new method.
* exceptions.cc (sigframe::call_signal_handler): New method.  Unregisters
current sigframe before calling signal handler.
(setup_handler): Clear waiting threads prior to arming signal_arrived.
* syscalls.cc (_read): Change goto to loop.  Recalculate sigframe inside of
loop so that constructor is called when appropriate.
* wait.cc (wait4): Ditto.
* signal.cc: Change "sig" to "signal" in debugging messages throughout.
* sigproc.cc: Ditto.
@
text
@@


1.12
log
@Fix spacing, copyrights.
@
text
@a52 1
  sigframe thisframe (mainthread);
d55 1
a55 3
beg:
  sawsig = 0;
  if (options & ~(WNOHANG | WUNTRACED))
d57 62
a118 2
      set_errno (EINVAL);
      return -1;
a120 54
  if (r)
    memset (r, 0, sizeof (*r));

  if ((w = (waitq *) waitq_storage.get ()) == NULL)
    w = (waitq *) waitq_storage.create ();

  w->pid = intpid;
  w->options = options;
  w->rusage = r;
  sigproc_printf ("calling proc_subproc, pid %d, options %d",
		 w->pid, w->options);
  if (!proc_subproc (PROC_WAIT, (DWORD)w))
    {
      set_errno (ENOSYS);
      paranoid_printf ("proc_subproc returned 0");
      res = -1;
      goto done;
    }

  if ((waitfor = w->ev) == NULL)
    goto nochildren;

  res = WaitForSingleObject (waitfor, INFINITE);

  sigproc_printf ("%d = WaitForSingleObject (...)", res);

  if (w->ev == NULL)
    {
    nochildren:
      /* found no children */
      set_errno (ECHILD);
      res = -1;
      goto done;
    }

  if (w->status == -1)
    {
      set_sig_errno (EINTR);
      sawsig = 1;
      res = -1;
    }
  else if (res != WAIT_OBJECT_0)
    {
      /* We shouldn't set errno to any random value if we can help it.
	 See the Posix manual for a list of valid values for `errno'.  */
      set_errno (EINVAL);
      res = -1;
    }
  else if ((res = w->pid) != 0 && status)
    *status = w->status;

done:
  if (sawsig && call_signal_handler ())
    goto beg;
@


1.11
log
@Update copyrights.
@
text
@d73 1
a73 1
  sigproc_printf("calling proc_subproc, pid %d, options %d",
d75 1
a75 1
  if (!proc_subproc(PROC_WAIT, (DWORD)w))
d122 1
a122 1
    sigproc_printf("*** errno = %d", get_errno());
@


1.10
log
@* autoload.cc (LoadDLLinitfunc): Remove debugging statement.
* exceptions.cc (sig_handle_tty_stop): Move setting of PID_STOPPED to earlier
in interrupt.
((interrupt_setup): i.e., here.
(sig_handle): Don't queue multiple SIGSTOPS.
* fhandler.h (bg_check_types): Enumerate return value of bg_check for clarity.
* signal.cc (kill_pgrp): Minor cleanup.
* fhandler_termios.cc (fhandler_termios::bg_check): Use enumerated type for
function return.  Don't raise signal if a signal is already queued.
* fhandler_console.cc (fhandler_console::read): Use enumerated return type for
bg_check.
* select.cc: Ditto, throughout.
* read.cc: Ditto, throughout.
* termios.cc: Ditto, throughout.
(_read): YA interrupt detect simplification.
* wait.cc (wait4): Ditto.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000 Cygnus Solutions.
@


1.9
log
@* wait.cc (wait4): Rename variable for consistency.  Allow restartable signal
behavior.
@
text
@d54 1
d57 2
a58 1
 if (options & ~(WNOHANG | WUNTRACED))
d102 1
d116 1
a116 1
  if (res < 0 && get_errno () == EINTR && call_signal_handler ())
@


1.8
log
@Throughout use myself->ppid_handle rather than parent_alive.
* child_info.h (child_info): Eliminate parent_alive.
* dcrt0.cc (dll_crt0_1): Call fork_init for debugging pid creation.
* fork.cc (fork_child): Reflect change to fixup_mmaps_after_fork arguments.
(slow_pid_reuse): New function to grab last 'n' pids to prevent pid reuse.
(fork_parent): Move last_fork_proc into slow_pid_reuse.  Handle fork_pids
debugging.  Eliminate unnecessary call to set_child_mmap_ptr.
(fork_init): New debugging function.
* mmap.cc (fixup_mmaps_after_fork): Renamed from recreate_mmaps_after_fork.
Rely on copied data after a fork.
(set_child_mmap_ptr): Eliminate.
* pinfo.h (_pinfo): Eliminate parent_alive, mmap_ptr and reflect above changes.
* spawn.cc (spawn_guts): Eliminate vestiges of "old way" of sending new hProc
to parent process.
@
text
@d50 1
a50 1
  int rc;
d55 1
d75 1
a75 1
      set_errno(ENOSYS);
d77 1
a77 1
      rc = -1;
d84 1
a84 1
  rc = WaitForSingleObject (waitfor, INFINITE);
d86 1
a86 1
  sigproc_printf ("%d = WaitForSingleObject (...)", rc);
d93 1
a93 1
      rc = -1;
d100 1
a100 1
      rc = -1;
d102 1
a102 1
  else if (rc != WAIT_OBJECT_0)
d107 1
a107 1
      rc = -1;
d109 1
a109 1
  else if ((rc = w->pid) != 0 && status)
d113 4
a116 2
  sigproc_printf ("intpid %d, status %p, w->status %d, options %d, rc %d",
		  intpid, status, w->status, options, rc);
d118 1
a118 1
  if (rc < 0)
d120 1
a120 1
  return rc;
@


1.7
log
@* errno.cc (seterrno_from_win_error): Fix debugging output.
* fhandler.cc (fhandler_base::fstat): Move to inline method in fhandler.h.
(fhandler_base::set_io_handle): Ditto.
* fhandler.h (fhandler_base): Make some methods inline.
* fhandler_console.cc (fhandler_console::write_normal): Make buffer larger.
* sigproc.h (sigframe::sigframe): Actually use set ebp parameter correctly.
* spawn.cc (spawn_guts): Set dwProcessId when exec'ing.  Just exit immediately
after reparenting.
* syscalls.cc: Sprinkle sigframe stuff throughout.
* wait.cc (wait4): Set signal frame here.
* dcrt0.cc (__api_fatal): Don't rely on small_printf to display errors.  Always
display problems to the console, if possible.
@
text
@a54 1
sigproc_printf ("here");
@


1.6
log
@* winsup.h: Eliminate inclusion of most of the cygwin .h files.  Use .h files
only in sources which require them.
* Makefile.in: Generate dependencies with -MD option.
@
text
@d53 1
@


1.5
log
@* cygerrno.h: New file.  Use this throughout whenever errno manipulation is
required.
* errno.cc: Use DWORD to hold Windows errors.
(geterrno_from_win_error): New function.
(seterrno_from_win_error): Use geterrno_from_win_error to convert supplied
windows error (suggested by Corinna Vinschen).
* path.cc (symlink_info): Add error element.
* path.cc (path_conv::check): Remove errno setting.  Use new symlink_info errno
element to set path_conv error, where appropriate.
(symlink_info::check): Set error element rather than attempting to manipulate
errno.  Add more checks for trailing / and /..  even though they are currently
useless.  Avoid setting EINVAL.
* path.cc (normalize_posix_path): Correct check for trailing /.
@
text
@d16 3
@


1.4
log
@* winsup.h: take out protections of environ, errno, allow C use
* *.cc: put winsup.h before other headers (for __INSIDE_CYGWIN__);
use cur_environ() instead of just environ
* times.cc: remove import protections
* glob.c: add winsup.h
* localtime.c: ditto
* smallprint.c: ditto
* Makefile.in: don't __INSIDE_CYGWIN__ as it messes up profiling.
@
text
@d15 1
@


1.3
log
@* include/cygwin/version.h: Bump DLL minor version number to 5 due to all of
the changes below.  Redefine process structure to avoid a fixed size table.
Redefine pinfo/_pinfo classes.  Use these throughout.
* dcrt0.cc (dll_crt0_1): Accomodate set_myself argument change.
(__api_fatal): Accomodate _pinfo::record_death argument change.
* exceptions.cc (really_exit): Ditto.
(sig_handle_tty_stop): Use pinfo constructor to access process info.
(events_init): Don't create pinfo_mutex since it is no longer required.
* external.cc (fillout_pinfo): Use winpids class to iterate over all system
pids.
(cygwin_internal): lock_pinfo_for_update and unlock_pinfo are now noops.
* fhandler_termios.cc (fhandler_termios::set_ctty): Use pinfo constructor to
access process info.
* fork.cc (fork): Reorganize to initialize child info after the child has
started since that is when we know the child's winpid, which is necessary to
allocate the pinfo shared memory.
* mmap.cc (recreate_mmaps_after_fork): Change arg type to _pinfo.
* pinfo.cc: Rename pinfo methods to _pinfo throughout.  Eliminate pinfo_list
stuff.
(set_myself): Accept a pid argument now.  Call pinfo initializer to initialize
myself.  Detect when this is an "execed" process and create an "indirect" pid
block.
(pinfo_init): Accomodate set_myself arg change.
(procinfo): Remove.
(pinfo::lock_pinfo): Remove.
(pinfo::unlock_pinfo): Remove.
(pinfo::init): New method.  Allocates shared memory space for process pinfo
structure.
(pinfo::record_death): Don't call locking functions.
(cygwin_winpid_to_pid): Simplify by using new pinfo constructor.
(EnumProcessesW95): New function for iterating over processes on Windows 95.
(winpids::winpids): New constructor for winpids class.  Sets up a list of
process ids.
(enum_init): Initialize w95/wnt pid enumerators.
* shared.cc (shared-info::initialize): Remove pid initialization.
* shared.h: Move pinfo stuff into pinfo.h.
(class shared_info): Remove pinfo_list element.
* signal.cc (kill_worker): Use pinfo constructor to access process info.
(kill_pgrp): Ditto.  Use winpids methods to access list of processes.
* sigproc.cc: Throughout, modify to use _pinfo where appropriate.
(proc_exists (pid_t)): New function.  Determines if a process exists based on
the pid.
(proc_exists (_pinfo *p): Use new proc_exists function above.
(proc_subproc): Copy pinfo stuff around rather than _pinfo pointers.  Try to be
careful about releasing shared memory when we don't need it anymore.  Remove
pinfo locks.
(remove_zombies): Remove pinfo memory when zombie is going away.
* sigproc.h: Reflect _pinfo/pinfo changes in sigproc.cc.
* spawn.cc (spawn_guts): Eliminate pinfo *child argument.  Reorganize to only
initialize child pinfo after process has been started and we know the windows
pid.
(_spawnve): Reflect spawn_guts changes.
* syscalls.cc (setpgid): Use pinfo constructor to access process info.
(getpgid): Ditto.
(internal_getlogin): Use _pinfo.
* winsup.h: Eliminate pinfo_mutex.  Eliminate spawn_guts declaration since it
is static now.  Reflect set_myself argument change.
* include/sys/cygwin.h: Add some PID_* enums to accomodate new pinfo stuff.
* include/cygwin/version.h: Update minor version for cygdrive changes below.
@
text
@d11 1
a14 1
#include "winsup.h"
@


1.2
log
@* exceptions.cc (interruptible): Change method for determining if something is
interruptible.
(call_handler): Avoid suspending a thread if it owns a mutex.  Only set
signal_arrived if the thread was actually interrupted.
(events_init): Initialize module information needed by interruptible().
(sigdelayed): Don't call sig_dispatch_pending since it could screw up
* init.cc (dll_entry): Record module handle of main for use by interruptible().
(proc_subproc): Reorganize handling of terminated child so that the bulk of the
processing comes from the signal thread.
(wait_sig): Force processing of waiting threads if SIGCHLD is not processed.
* sync.cc (muto::release): Set tid == 0 after lock is released or signal
processor will be confused.
@
text
@d50 1
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999 Cygnus Solutions.
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
