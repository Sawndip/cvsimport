head	1.37;
access;
symbols
	cygwin-1_7_35-release:1.37
	cygwin-1_7_34-release:1.37
	cygwin-1_7_33-release:1.37
	cygwin-1_7_32-release:1.37
	cygwin-1_7_31-release:1.37
	cygwin-1_7_30-release:1.37
	cygwin-1_7_29-release:1.37
	cygwin-1_7_29-release-branchpoint:1.37.0.2
	cygwin-pre-user-db:1.37
	cygwin-1_7_28-release:1.37
	cygwin-1_7_27-release:1.37
	cygwin-1_7_26-release:1.37
	cygwin-1_7_25-release:1.36
	cygwin-1_7_24-release:1.36
	cygwin-1_7_23-release:1.36
	cygwin-1_7_22-release:1.36
	cygwin-1_7_21-release:1.36
	cygwin-1_7_20-release:1.36
	cygwin-1_7_19-release:1.36
	cygwin-64bit-postmerge:1.36
	cygwin-64bit-premerge-branch:1.36.0.2
	cygwin-64bit-premerge:1.36
	cygwin-1_7_18-release:1.36
	post-ptmalloc3:1.34.4.2
	pre-ptmalloc3:1.34.4.2
	cygwin-1_7_17-release:1.34
	cygwin-64bit-branch:1.34.0.4
	cygwin-1_7_16-release:1.34
	cygwin-1_7_15-release:1.34
	cygwin-1_7_14_2-release:1.34
	cygwin-1_7_14-release:1.34
	cygwin-1_7_12-release:1.34
	cygwin-1_7_11-release:1.34
	cygwin-1_7_10-release:1.34
	signal-rewrite:1.34.0.2
	pre-notty:1.34
	cygwin-1_7_9-release:1.33
	cv-post-1_7_9:1.33.0.2
	cygwin-1_7_8-release:1.33
	cygwin-1_7_7-release:1.33
	cygwin-1_7_5-release:1.33
	cygwin-1_7_4-release:1.33
	cygwin-1_7_3-release:1.33
	cygwin-1_7_2-release:1.33
	fifo_doover3:1.32.0.4
	cygwin-1_7_1-release:1.32
	prefifo:1.32
	cv-branch-2:1.32.0.2
	pre-ripout-set_console_state_for_spawn:1.31
	EOL_registry_mounts:1.30
	preoverlapped:1.30
	drop_9x_support_start:1.30
	cr-0x5f1:1.29.0.8
	cv-branch:1.29.0.6
	pre-ptymaster-archetype:1.29
	cr-0x3b58:1.29.0.4
	cr-0x5ef:1.29.0.2
	after-mmap-privanon-noreserve:1.29
	after-mmap-revamp:1.29
	before-mmap-revamp:1.29
	cgf-more-exit-sync:1.29
	post_wait_sig_exit:1.28
	pre_wait_sig_exit:1.28
	reparent-point:1.25
	noreparent:1.25.0.10
	cr-0x5e6:1.25.0.8
	cr-0x9e:1.25.0.6
	cr-0x9d:1.25.0.4
	cgf-deleteme:1.25.0.2
	pre-sigrewrite:1.25
	corinna-01:1.24
	cr-0x9c:1.23.0.6
	cr-0x9b:1.23.0.4
	cr-0x99:1.23
	Z-emcb-cygwin_daemon:1.23.0.2
	w32api-2_2:1.20
	mingw-runtime-2_4:1.20
	pre-cgf-merge:1.23
	cgf-dev-branch:1.20.0.2
	predaemon:1.11
	cygwin_daemon_merge_HEAD:1.11
	pregp02r1:1.11.0.30
	cygnus_cvs_20020108_pre:1.11
	Z-cygwin_daemon_merge-new_HEAD:1.17
	Z-cygwin_daemon_merge_HEAD:1.17
	cygwin_daemon:1.10.0.4;
locks; strict;
comment	@// @;
expand	@o@;


1.37
date	2013.09.25.14.44.45;	author cgf;	state Exp;
branches;
next	1.36;

1.36
date	2013.01.21.04.38.28;	author cgf;	state Exp;
branches;
next	1.35;

1.35
date	2013.01.16.19.20.59;	author cgf;	state Exp;
branches;
next	1.34;

1.34
date	2011.03.29.10.32.40;	author corinna;	state Exp;
branches
	1.34.4.1;
next	1.33;

1.33
date	2010.02.12.20.07.13;	author cgf;	state Exp;
branches
	1.33.2.1;
next	1.32;

1.32
date	2008.10.07.23.28.30;	author cgf;	state Exp;
branches;
next	1.31;

1.31
date	2008.04.07.18.45.57;	author cgf;	state Exp;
branches;
next	1.30;

1.30
date	2007.02.20.15.48.04;	author corinna;	state Exp;
branches;
next	1.29;

1.29
date	2005.09.27.20.34.19;	author corinna;	state Exp;
branches;
next	1.28;

1.28
date	2005.07.05.03.16.45;	author cgf;	state Exp;
branches;
next	1.27;

1.27
date	2005.07.03.02.40.29;	author cgf;	state Exp;
branches;
next	1.26;

1.26
date	2005.04.03.08.45.20;	author corinna;	state Exp;
branches;
next	1.25;

1.25
date	2003.11.14.23.40.05;	author rbcollins;	state Exp;
branches;
next	1.24;

1.24
date	2003.10.27.11.48.29;	author corinna;	state Exp;
branches;
next	1.23;

1.23
date	2003.03.27.19.52.20;	author tpfaff;	state Exp;
branches;
next	1.22;

1.22
date	2003.03.18.20.12.05;	author tpfaff;	state Exp;
branches;
next	1.21;

1.21
date	2003.03.18.20.01.06;	author tpfaff;	state Exp;
branches;
next	1.20;

1.20
date	2003.01.10.12.32.47;	author corinna;	state Exp;
branches
	1.20.2.1;
next	1.19;

1.19
date	2003.01.09.20.40.44;	author tpfaff;	state Exp;
branches;
next	1.18;

1.18
date	2002.09.29.23.47.45;	author rbcollins;	state Exp;
branches;
next	1.17;

1.17
date	2002.09.22.03.38.57;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2002.09.21.03.59.58;	author rbcollins;	state Exp;
branches;
next	1.15;

1.15
date	2002.09.16.16.09.54;	author cgf;	state Exp;
branches;
next	1.14;

1.14
date	2002.09.16.10.53.29;	author rbcollins;	state Exp;
branches;
next	1.13;

1.13
date	2002.07.04.14.17.29;	author rbcollins;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.10.01.10.44;	author rbcollins;	state Exp;
branches;
next	1.11;

1.11
date	2001.09.29.09.01.01;	author rbcollins;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.24.22.26.52;	author cgf;	state Exp;
branches
	1.10.4.1;
next	1.9;

1.9
date	2001.04.13.15.28.20;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2001.04.12.04.04.53;	author rbcollins;	state Exp;
branches;
next	1.7;

1.7
date	2001.04.09.00.44.25;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2001.03.21.02.17.57;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2001.03.18.21.11.25;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.17.01.14.57;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.04.17.52.42;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.22.05.10.20;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.34.4.1
date	2013.01.17.17.17.10;	author corinna;	state Exp;
branches;
next	1.34.4.2;

1.34.4.2
date	2013.01.21.13.52.10;	author corinna;	state Exp;
branches;
next	;

1.33.2.1
date	2011.03.11.11.37.49;	author corinna;	state Exp;
branches;
next	;

1.20.2.1
date	2003.03.19.19.59.55;	author cgf;	state Exp;
branches;
next	1.20.2.2;

1.20.2.2
date	2003.04.03.01.32.33;	author cgf;	state Exp;
branches;
next	;

1.10.4.1
date	2001.09.29.09.35.31;	author rbcollins;	state Exp;
branches;
next	1.10.4.2;

1.10.4.2
date	2002.06.13.14.34.09;	author rbcollins;	state Exp;
branches;
next	1.10.4.3;

1.10.4.3
date	2002.07.04.20.09.47;	author scottc;	state Exp;
branches;
next	1.10.4.4;

1.10.4.4
date	2002.09.16.17.24.16;	author scottc;	state Exp;
branches;
next	1.10.4.5;

1.10.4.5
date	2002.09.21.08.13.47;	author scottc;	state Exp;
branches;
next	1.10.4.6;

1.10.4.6
date	2002.09.22.10.01.28;	author scottc;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.37
log
@* thread.cc (semaphore::_getvalue): Set *sval as appropriate.  Set errno and
return -1 on error.
@
text
@/* pthread.cc: posix pthread interface for Cygwin

   Copyright 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2007, 2008, 2010, 2011,
   2013 Red Hat, Inc.

   Originally written by Marco Fuykschot <marco@@ddi.nl>

   This file is part of Cygwin.

   This software is a copyrighted work licensed under the terms of the
   Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
   details. */

#include "winsup.h"
#include "thread.h"

extern "C"
{
/*  ThreadCreation */
int
pthread_create (pthread_t *thread, const pthread_attr_t *attr,
		void *(*start_routine) (void *), void *arg)
{
  return pthread::create (thread, attr, start_routine, arg);
}

int
pthread_once (pthread_once_t * once_control, void (*init_routine) (void))
{
  return pthread::once (once_control, init_routine);
}

int
pthread_atfork (void (*prepare)(void), void (*parent)(void), void (*child)(void))
{
  return pthread::atfork (prepare, parent, child);
}

/* Thread Exit */
void
pthread_exit (void *value_ptr)
{
  pthread::self ()->exit (value_ptr);
  __builtin_unreachable ();	/* FIXME: don't know why this is necessary */
}

int
pthread_join (pthread_t thread, void **return_val)
{
  return pthread::join (&thread, (void **) return_val);
}

int
pthread_detach (pthread_t thread)
{
  return pthread::detach (&thread);
}


/* This isn't a posix call... should we keep it? */
int
pthread_suspend (pthread_t thread)
{
  return pthread::suspend (&thread);
}

/* same */
int
pthread_continue (pthread_t thread)
{
  return pthread::resume (&thread);
}

unsigned long
pthread_getsequence_np (pthread_t * thread)
{
  if (!pthread::is_good_object (thread))
    return EINVAL;
  return (*thread)->getsequence_np ();
}

/*  ID */

pthread_t pthread_self ()
{
  return pthread::self ();
}

/* Mutexes  */
int
pthread_mutex_init (pthread_mutex_t * mutex, const pthread_mutexattr_t * attr)
{
  return pthread_mutex::init (mutex, attr, NULL);
}

/* Spinlocks */
int
pthread_spin_init (pthread_spinlock_t *spinlock, int pshared)
{
  return pthread_spinlock::init (spinlock, pshared);
}


/* Synchronisation */
int
pthread_cond_init (pthread_cond_t * cond, const pthread_condattr_t * attr)
{
  return pthread_cond::init (cond, attr);
}

/* RW Locks */
int
pthread_rwlock_init (pthread_rwlock_t *rwlock, const pthread_rwlockattr_t *attr)
{
  return pthread_rwlock::init (rwlock, attr);
}

/* Cancelability */

int
pthread_cancel (pthread_t thread)
{
  return pthread::cancel (thread);
}

int
pthread_setcancelstate (int state, int *oldstate)
{
  return pthread::self ()->setcancelstate (state, oldstate);
}

int
pthread_setcanceltype (int type, int *oldtype)
{
  return pthread::self ()->setcanceltype (type, oldtype);
}

void
pthread_testcancel ()
{
  pthread::self ()->testcancel ();
}

void
_pthread_cleanup_push (__pthread_cleanup_handler *handler)
{
  pthread::self ()->push_cleanup_handler (handler);
}

void
_pthread_cleanup_pop (int execute)
{
  pthread::self ()->pop_cleanup_handler (execute);
}

/* Semaphores */
int
sem_init (sem_t * sem, int pshared, unsigned int value)
{
  return semaphore::init (sem, pshared, value);
}

int
sem_destroy (sem_t * sem)
{
  return semaphore::destroy (sem);
}

int
sem_wait (sem_t * sem)
{
  return semaphore::wait (sem);
}

int
sem_trywait (sem_t * sem)
{
  return semaphore::trywait (sem);
}

int
sem_timedwait (sem_t * sem, const struct timespec *abstime)
{
  return semaphore::timedwait (sem, abstime);
}

int
sem_post (sem_t *sem)
{
  return semaphore::post (sem);
}

int
sem_getvalue (sem_t * sem, int *sval)
{
  return semaphore::getvalue (sem, sval);
}

}
@


1.36
log
@Throughout, update copyrights to reflect dates which correspond to main-branch
checkins.  Regularize copyright format.
@
text
@d188 1
a188 1
sem_post (sem_t * sem)
@


1.35
log
@* pthread.cc (pthread_exit): Add kludge to accommodate noreturn attribute.
@
text
@d3 2
a4 1
   Copyright 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2007, 2011 Red Hat, Inc.
@


1.34
log
@	* cygwin.din (pthread_spin_destroy): Export.
	(pthread_spin_init): Export.
	(pthread_spin_lock): Export.
	(pthread_spin_trylock): Export.
	(pthread_spin_unlock): Export.
	* posix.sgml (std-susv4): Add pthread_spin_destroy, pthread_spin_init,
	pthread_spin_lock, pthread_spin_trylock, pthread_spin_unlock.
	(std-notimpl): Remove pthread_spin_[...].
	* pthread.cc (pthread_spin_init): New function.
	* thread.cc (pthread_spinlock::is_good_object): New function.
	(pthread_mutex::pthread_mutex): Rearrange initializers to accommodate
	protected data in pthread_mutex.
	(pthread_spinlock::pthread_spinlock): New constructor.
	(pthread_spinlock::lock): New method.
	(pthread_spinlock::unlock): New method.
	(pthread_spinlock::init): New method.
	(pthread_spin_lock): New function.
	(pthread_spin_trylock): New function.
	(pthread_spin_unlock): New function.
	(pthread_spin_destroy): New function.
	* thread.h (PTHREAD_SPINLOCK_MAGIC): Define.
	(class pthread_mutex): Change access level of members shared with
	derived classes to protected.
	(pthread_mutex::set_shared): New protected method.
	(class pthread_spinlock): New class, derived class of pthread_mutex.
	* include/pthread.h (pthread_spin_destroy): Declare.
	(pthread_spin_init): Declare.
	(pthread_spin_lock): Declare.
	(pthread_spin_trylock): Declare.
	(pthread_spin_unlock): Declare.
	* include/cygwin/types.h (pthread_spinlock_t): New typedef.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
@
text
@d42 2
a43 1
  return pthread::self ()->exit (value_ptr);
@


1.34.4.1
log
@Pull in changes from HEAD
@
text
@d42 1
a42 2
  pthread::self ()->exit (value_ptr);
  __builtin_unreachable ();	/* FIXME: don't know why this is necessary */
@


1.34.4.2
log
@Pull in changes from HEAD
@
text
@d3 1
a3 2
   Copyright 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2007, 2008, 2010, 2011,
   2013 Red Hat, Inc.
@


1.33
log
@* pthread.cc (pthread_mutex_init): Explicitly fill out third arg to
pthread_mutex::init.
* thread.cc: Remov some obsolete comments.
(verifyable_object_isvalid): Reflect change to use thread_magic_t for magic
numbers.
(pthread_mutex::pthread_mutex): Set magic number to invalid initially until
we've verified that everything is valid.
(pthread_mutex::unlock): Fix a comment.
(verifyable_object::verifyable_object): Delete here.
(~verifyable_object::~verifyable_object): Ditto.
(pthread_mutex::init): Don't run is_good_initializer for non-static objects.
* thread.h (thread_magic_t): New typedef.
(verifyable_object::verifyable_object): Use thread_magic_t;
(verifyable_object::magic): Ditto.
(pthread_mutex::is_good_initializer_or_bad_object): Remove unneeded variable
names.
(pthread_mutex::can_be_unlocked): Ditto.
(pthread_mutex::init): Ditto.  Remove default for third argument.
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2007 Red Hat, Inc.
d94 8
@


1.33.2.1
log
@	* cygwin.din (pthread_spin_destroy): Export.
	(pthread_spin_init): Export.
	(pthread_spin_lock): Export.
	(pthread_spin_trylock): Export.
	(pthread_spin_unlock): Export.
	* posix.sgml (std-susv4): Add pthread_spin_destroy, pthread_spin_init,
	pthread_spin_lock, pthread_spin_trylock, pthread_spin_unlock.
	(std-notimpl): Remove pthread_spin_[...].
	* pthread.cc (pthread_spin_init): New function.
	* thread.cc (pthread_spinlock::is_good_object): New function.
	(pthread_mutex::pthread_mutex): Rearrange initializers to accommodate
	protected data in pthread_mutex.
	(pthread_spinlock::pthread_spinlock): New constructor.
	(pthread_spinlock::lock): New method.
	(pthread_spinlock::unlock): New method.
	(pthread_spinlock::init): New method.
	(pthread_spin_lock): New function.
	(pthread_spin_trylock): New function.
	(pthread_spin_unlock): New function.
	(pthread_spin_destroy): New function.
	* thread.h (PTHREAD_SPINLOCK_MAGIC): Define.
	(class pthread_mutex): Change access level of members shared with
	derived classes to protected.
	(pthread_mutex::set_shared): New protected method.
	(class pthread_spinlock): New class, derived class of pthread_mutex.
	* include/pthread.h (pthread_spin_destroy): Declare.
	(pthread_spin_init): Declare.
	(pthread_spin_lock): Declare.
	(pthread_spin_trylock): Declare.
	(pthread_spin_unlock): Declare.
	* include/cygwin/types.h (pthread_spinlock_t): New typedef.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2007, 2011 Red Hat, Inc.
a93 8
/* Spinlocks */
int
pthread_spin_init (pthread_spinlock_t *spinlock, int pshared)
{
  return pthread_spinlock::init (spinlock, pshared);
}


@


1.32
log
@* pthread.cc (pthread_create): Very minor formatting change.
* timer.cc (timer_thread): Ensure that any created thread defaults to detached
state.
@
text
@d91 1
a91 1
  return pthread_mutex::init (mutex, attr);
@


1.31
log
@Remove unneeded header files from source files throughout.
@
text
@d20 1
a20 1
pthread_create (pthread_t * thread, const pthread_attr_t * attr,
@


1.30
log
@	* cygwin.din (sem_unlink): Export.
	* posix_ipc.cc: Include thread.h and semaphore.h.  Remove TODO
	comment.
	(ipc_names): Add max_len member.  Set to maximum length of the path
	before tacking on the prefix path.  Set prefix path for named semaphors
	to /dev/shm, as on Linux.
	(enum ipc_type_t): Change sem to semaphore to avoid name conflicts.
	(check_path): Detect empty paths.  Use ipc_names's max_len member.
	Use __small_sprintf to create full object path name.  Special case
	semaphores.
	(ipc_cond_init): Drop superfluous strcpy.
	(class ipc_flock): New class to simplify file locking in subsequent
	code.
	(struct mq_hdr): Raise size of mqh_uname to allow adding a unique
	LUID to the name.
	(mq_open): Fix formatting.  Create unique synchronization object names
	using AllocateLocallyUniqueId.
	(struct sem_finfo): New structure defining named semaphore file content.
	(sem_open): Move here.  Rework implementation to allow kernel
	persistent implementation of POSIX named semaphores.
	(_sem_close): Implement sem_close.
	(sem_close): Move here.  Just call _sem_close with do_close parameter
	set to true.
	(sem_unlink): New function.
	* pthread.cc (mangle_sem_name): Remove.
	(sem_open): Move to posix_ipc.cc.
	(sem_close): Ditto.
	* syscalls.cc (close_all_files): Call semaphore::terminate here.
	* thread.cc: Fix formatting.  Rearrange semaphore functions so that
	they are close together.
	(semaphore::semaphore): Rework to play nicely with new named semaphore
	implementation.
	(semaphore::_terminate): Call _sem_close if semaphore is a named
	semaphore.
	(semaphore::destroy): Don't destroy named semaphores.  Return EINVAL
	instead.
	(semaphore::close): Only destroy named semaphores.  Return EINVAL
	otherwise.
	(semaphore::open): Rework to play nicely with new named semaphore
	implementation.  Loop through existing semaphores to be able to
	return same sem_t pointer as a former call on the same named semaphore.
	(semaphore::getinternal): New function called from _sem_close.
	* thread.h (class List): Make mx and head public.
	(class semaphore): Fix formatting.  Align method declarations with
	implementation in thread.cc.  Add members used for named semaphores.
	(semaphore::terminate): New static method.
	* include/semaphore.h: Redefine SEM_FAILED.  Fix formatting.
	(sem_unlink): Add declaration.
	* include/cygwin/version.h: Bump API minor number.
@
text
@a14 8
#include "cygerrno.h"
#include "path.h"
#include "fhandler.h"
#include "dtable.h"
#include "cygheap.h"
#include <stdarg.h>
#include <sys/fcntl.h>
#include "cygtls.h"
@


1.29
log
@	* pthread.cc (mangle_sem_name): Use cygheap->shared_prefix instead
	of fiddling with wincap.has_terminal_services manually.
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001, 2002, 2003 Red Hat, Inc.
a166 54
/* Mangle semaphore name to follow windows naming rules.  Prepend "Global\"
   if running on terminal service aware machine.  Substitute invalid backslash
   by forward slash characters, hoping not to collide. */
static bool
mangle_sem_name (char *mangled, const char *name)
{
  myfault efault;
  if (efault.faulted (EFAULT))
    return false;
  if (!*name)
    {
      set_errno (ENOENT);
      return false;
    }
  size_t len = strlen (cygheap->shared_prefix);
  if (strlen (name) >= CYG_MAX_PATH - len)
    {
      set_errno (EINVAL);
      return false;
    }
  strcpy (mangled, cygheap->shared_prefix);
  char *d = mangled + len;
  const char *s = name;
  while (*s)
    *d++ = (*s == '\\') ? '/' : *s++;
  *d = '\0';
  return true;
}

sem_t *
sem_open (const char *name, int oflag, ...)
{
  mode_t mode = 0;
  unsigned int value = 0;
  if (oflag & O_CREAT)
    {
      va_list ap;
      va_start (ap, oflag);
      mode = va_arg (ap, mode_t);
      value = va_arg (ap, unsigned int);
      va_end (ap);
    }
  char mangled_name[CYG_MAX_PATH];
  if (!mangle_sem_name (mangled_name, name))
    return NULL;
  return semaphore::open (mangled_name, oflag, mode, value);
}

int
sem_close (sem_t * sem)
{
  return semaphore::destroy (sem);
}

@


1.28
log
@Change foo (void) to foo () for all c++ functions throughout.  Remove all
fhandler_*::dump functions throughout.
* fhandler.h (fhandler_dev_mem::close): Remove pass-through function in favor
of virtual method.
(handler_dev_raw::close): Ditto.
(fhandler_dev_clipboard::fixup_after_exec): New method.
* fhandler_dev_mem.cc (fhandler_dev_mem::close): Eliminate pass through
* fhandler_dev_raw.cc (fhandler_dev_raw::close): Ditto.
* fhandler_clipboard.cc (fhandler_dev_clipboard::close): Don't go to extra
effort when execing.
(fhandler_dev_clipboard::fixup_after_exec): New function.
* fhandler_console.cc (fhandler_console::close): Don't do "extra stuff" when we
know we're execing.
* fhandler_disk_file.cc (fhandler_disk_file::close): Ditto.
* fhandler_dsp.cc (fhandler_dev_dsp::close): Ditto.
* fhandler_fifo.cc (fhandler_fifo.cc::close): Ditto.  function in favor of base
function.
* fhandler_random.cc (fhandler_dev_random::close): Ditto.
* fhandler_registry.cc (fhandler_registry::close): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::close): Ditto.
* fhandler_virtual.cc (fhandler_virtual::close): Ditto.
* pinfo.cc (proc_waiter): Remove unneeded hExeced declaration.
* sigproc.cc: Ditto.
* winsup.h (hExeced): Define here.
* fhandler_virtual.cc (fhandler_virtual::fixup_after_exec): Just call close()
to reinitialize things to known state.
@
text
@d16 4
d181 2
a182 3
  int len = strlen (name);
  if (len >= CYG_MAX_PATH
      || (wincap.has_terminal_services () && len >= CYG_MAX_PATH - 7))
d187 2
a188 2
  strcpy (mangled, wincap.has_terminal_services () ? "Global\\" : "");
  char *d = mangled + strlen (mangled);
@


1.27
log
@Replace valid memory checks with new myfault class "exception handling", almost
everywhere.  Leave some thread.cc stuff alone for now.
* cygtls.h: Kludge some definitions to avoid including a problematic windows
header.
(_cygtls::_myfault): New entry.
(_cygtls::_myfault_errno): Ditto.
(_cygtls::fault_guarded): New function.
(_cygtls::setup_fault): Ditto.
(_cygtls::return_from_fault): Ditto.
(_cygtls::clear_fault): Ditto.
(myfault): New class.
* exceptions.cc (handle_exceptions): Handle case of guarded fault in system
routine.
* gendef: Add another entry point for setjmp that the compiler doesn't know
about and won't complain about.
* gentls_offsets: Just include windows.h rather than kludging a HANDLE def.
* miscfuncs.cc (check_null_str): Delete.
(check_null_empty_str): Ditto.
(check_null_empty_str_errno): Ditto.
(check_null_str_errno): Ditto.
(__check_null_invalid_struct): Ditto.
(__check_null_invalid_struct_errno): Ditto.
(__check_invalid_read_ptr): Ditto.
(__check_invalid_read_ptr_errno): Ditto.
(dummytest): New function.
(check_iovec_for_read): Delete.
(chec_iovec): Rename from check_iovec_for_write.  Take a read/write parameter.
* tlsoffsets.h: Regenerate.
* winsup.h: Remove check_* declarations.
(check_iovec_for_read): Delete declaration.  Turn into a define instead.
(check_iovec_for_write): Ditto.
(check_iovec): New declaration.
* thread.h: Use ifdef guard name consistent with other header files.
@
text
@d133 1
a133 1
pthread_testcancel (void)
@


1.26
log
@	Unify usage of CYG_MAX_PATH throughout.  Change buffers from
	size CYG_MAX_PATH + 1 to CYG_MAX_PATH.  Change length tests
	accordingly.
@
text
@d18 1
d169 2
a170 1
  if (check_null_empty_str_errno (name))
d172 5
@


1.25
log
@2003-11-11  Robert Collins <rbtcollins@@hotmail.com>
	    Ron Parker <rdparker@@butlermfg.com>

	* bsdlib.cc: Update throughout to use CYG_MAX_PATH rather than MAX_PATH.
	* cygheap.h: Ditto.
	* dcrt0.cc: Ditto.
	* delqueue.cc: Ditto.
	* dlfcn.cc: Ditto.
	* dll_init.cc: Ditto.
	* dll_init.h: Ditto.
	* dtable.cc: Ditto.
	* environ.cc: Ditto.
	* environ.h: Ditto.
	* exceptions.cc: Ditto.
	* external.cc: Ditto.
	* fhandler_disk_file.cc: Ditto.
	* fhandler_proc.cc: Ditto.
	* fhandler_process.cc: Ditto.
	* fhandler_raw.cc: Ditto.
	* fhandler_registry.cc: Ditto.
	* fhandler_socket.cc: Ditto.
	* fhandler_virtual.cc: Ditto.
	* miscfuncs.cc: Ditto.
	* mmap.cc: Ditto.
	* netdb.cc: Ditto.
	* path.cc: Ditto.
	* path.h: Ditto.
	* pinfo.cc: Ditto.
	* pinfo.h: Ditto.
	* pthread.cc: Ditto.
	* registry.cc: Ditto.
	* shared.cc: Ditto.
	* shared_info.h: Ditto.
	* smallprint.c: Ditto.
	* spawn.cc: Ditto.
	* strace.cc: Ditto.
	* syscalls.cc: Ditto.
	* thread.h: Ditto.
	* uinfo.cc: Ditto.
	* winsup.h: Ditto.
	* include/limits.h: Ditto.
	* include/cygwin/config.h: Ditto.
	* include/sys/param.h: Ditto.
@
text
@d171 2
a172 2
  if (len > CYG_MAX_PATH
      || (wincap.has_terminal_services () && len > CYG_MAX_PATH - 7))
d199 1
a199 1
  char mangled_name[CYG_MAX_PATH + 1];
@


1.24
log
@	* cygwin.din: Add sem_close, sem_getvalue, sem_open and sem_timedwait.
	* pthread.cc (+mangle_sem_name): New function.
	(sem_open): Ditto.
	(sem_close: Ditto.
	(sem_timedwait): Ditto.
	(sem_getvalue): Ditto.
	* thread.cc (semaphore::semaphore): Rearrange member initialization.
	Use appropriate security attribute for process shared semaphores.
	(semaphore::semaphore): New constructor for named semaphores.
	(semaphore::~semaphore): Care for semaphore name.
	(semaphore::_post): Accomodate failing ReleaseSemaphore. Use value
	returned by ReleaseSemaphore vor currentvalue.
	(semaphore::_getvalue): New method.
	(semaphore::_timedwait): Ditto.
	(semaphore::_fixup_after_fork): Rearrange. Don't fail for process
	shared semaphores.
	(semaphore::open): New method.
	(semaphore::timedwait): Ditto.
	(semaphore::post): Fix return value.  Set errno appropriately.
	(semaphore::getvalue): New method.
	* thread.h (class semaphore): Add prototypes for open, getvalue,
	timedwait, _getvalue, _timedwait.  Add prototypes for new constructor.
	Add name member.
	* include/semaphore.h: Add prototypes for sem_open, sem_close,
	sem_timedwait and sem_getvalue.
	include/cygwin/version.h: Bump API minor number.
@
text
@d171 2
a172 2
  if (len > MAX_PATH
      || (wincap.has_terminal_services () && len > MAX_PATH - 7))
d199 1
a199 1
  char mangled_name[MAX_PATH + 1];
@


1.23
log
@
* thread.h: Change class names, methods, members and local vars
according to the GNU coding style.
* thread.cc: Ditto.
* dcrt0.cc (dll_crt0_1): Rename pthread::initMainThread call to
pthread::init_mainthread.
* pthread.cc (pthead_getsequence_np): Rename pthread::isGoodObject
call to pthread::is_good_object.
@
text
@d15 3
a17 1
#include "errno.h"
d162 49
d224 6
d233 6
@


1.22
log
@
* pthread.cc (pthread_attr_init): Remove
(pthread_attr_destroy): Ditto.
(pthread_attr_setdetachstate): Ditto.
(pthread_attr_getdetachstate): Ditto.
(pthread_attr_setstacksize): Ditto.
(pthread_attr_getstacksize): Ditto.
(pthread_attr_setinheritsched): Ditto.
(pthread_attr_getinheritsched): Ditto.
(pthread_attr_setschedparam): Ditto.
(pthread_attr_getschedparam): Ditto.
(pthread_attr_setschedpolicy): Ditto.
(pthread_attr_getschedpolicy): Ditto.
(pthread_attr_setscope): Ditto.
(pthread_attr_getscope): Ditto.
(pthread_attr_setstackaddr): Ditto.
(pthread_attr_getstackaddr): Ditto.
(pthread_key_create): Ditto.
(pthread_key_delete): Ditto.
(pthread_setspecific): Ditto.
(pthread_getspecific): Ditto.
(pthread_kill): Ditto.
(pthread_sigmask): Ditto.
(pthread_equal): Ditto.
(pthread_mutex_lock): Ditto.
(pthread_mutex_trylock): Ditto.
(pthread_mutex_unlock): Ditto.
(pthread_mutex_destroy): Ditto.
(pthread_mutex_setprioceiling): Ditto.
(pthread_mutex_getprioceiling): Ditto.
(pthread_mutexattr_destroy): Ditto.
(pthread_mutexattr_getprioceiling): Ditto.
(pthread_mutexattr_getprotocol): Ditto.
(pthread_mutexattr_getpshared): Ditto.
(pthread_mutexattr_gettype): Ditto.
(pthread_mutexattr_init): Ditto.
(pthread_mutexattr_setprioceiling): Ditto.
(pthread_mutexattr_setprotocol): Ditto.
(pthread_mutexattr_setpshared): Ditto.
(pthread_mutexattr_settype): Ditto.
(pthread_cond_destroy): Ditto.
(pthread_cond_signal): Ditto.
(pthread_cond_broadcast): Ditto.
(pthread_condattr_init): Ditto.
(pthread_condattr_destroy): Ditto.
(pthread_condattr_getpshared): Ditto.
(pthread_condattr_setpshared): Ditto.
(pthread_rwlock_destroy): Ditto.
(pthread_rwlock_rdlock): Ditto.
(pthread_rwlock_tryrdlock): Ditto.
(pthread_rwlock_wrlock): Ditto.
(pthread_rwlock_trywrlock): Ditto.
(pthread_rwlock_unlock): Ditto.
(pthread_rwlockattr_init): Ditto.
(pthread_rwlockattr_getpshared): Ditto.
(pthread_rwlockattr_setpshared): Ditto.
(pthread_rwlockattr_destroy): Ditto.
(pthread_getconcurrency): Ditto.
(pthread_setconcurrency): Ditto.
(pthread_getschedparam): Ditto.
(pthread_setschedparam): Ditto.

* thread.h (__pthread_attr_init): Remove prototype.
(__pthread_attr_destroy): Ditto.
(__pthread_attr_setdetachstate): Ditto.
(__pthread_attr_getdetachstate): Ditto.
(__pthread_attr_setstacksize): Ditto.
(__pthread_attr_getstacksize): Ditto.
(__pthread_attr_setinheritsched): Ditto.
(__pthread_attr_getinheritsched): Ditto.
(__pthread_attr_setschedparam): Ditto.
(__pthread_attr_getschedparam): Ditto.
(__pthread_attr_setschedpolicy): Ditto.
(__pthread_attr_getschedpolicy): Ditto.
(__pthread_attr_setscope): Ditto.
(__pthread_attr_getscope): Ditto.
(__pthread_attr_setstackaddr): Ditto.
(__pthread_attr_getstackaddr): Ditto.
(__pthread_key_create): Ditto.
(__pthread_key_delete): Ditto.
(__pthread_setspecific): Ditto.
(__pthread_getspecific): Ditto.
(__pthread_kill): Ditto.
(__pthread_sigmask): Ditto.
(__pthread_equal): Ditto.
(__pthread_mutex_lock): Ditto.
(__pthread_mutex_trylock): Ditto.
(__pthread_mutex_unlock): Ditto.
(__pthread_mutex_destroy): Ditto.
(__pthread_mutex_setprioceiling): Ditto.
(__pthread_mutex_getprioceiling): Ditto.
(__pthread_mutexattr_destroy): Ditto.
(__pthread_mutexattr_getprioceiling): Ditto.
(__pthread_mutexattr_getprotocol): Ditto.
(__pthread_mutexattr_getpshared): Ditto.
(__pthread_mutexattr_gettype): Ditto.
(__pthread_mutexattr_init): Ditto.
(__pthread_mutexattr_setprioceiling): Ditto.
(__pthread_mutexattr_setprotocol): Ditto.
(__pthread_mutexattr_setpshared): Ditto.
(__pthread_mutexattr_settype): Ditto.
(__pthread_cond_destroy): Ditto.
(__pthread_cond_signal): Ditto.
(__pthread_cond_broadcast): Ditto.
(__pthread_condattr_init): Ditto.
(__pthread_condattr_destroy): Ditto.
(__pthread_condattr_getpshared): Ditto.
(__pthread_condattr_setpshared): Ditto.
(__pthread_rwlock_destroy): Ditto.
(__pthread_rwlock_rdlock): Ditto.
(__pthread_rwlock_tryrdlock): Ditto.
(__pthread_rwlock_wrlock): Ditto.
(__pthread_rwlock_trywrlock): Ditto.
(__pthread_rwlock_unlock): Ditto.
(__pthread_rwlockattr_init): Ditto.
(__pthread_rwlockattr_getpshared): Ditto.
(__pthread_rwlockattr_setpshared): Ditto.
(__pthread_rwlockattr_destroy): Ditto.
(__pthread_getconcurrency): Ditto.
(__pthread_setconcurrency): Ditto.
(__pthread_getschedparam): Ditto.
(__pthread_setschedparam): Ditto.

* thread.cc: Rename __pthread_equal to pthread_equal throughout.
Change pthread_self parameter appropriate.
(__pthread_attr_init): Remove __ prefix. Change to extern "C".
(__pthread_attr_destroy): Ditto.
(__pthread_attr_setdetachstate): Ditto.
(__pthread_attr_getdetachstate): Ditto.
(__pthread_attr_setstacksize): Ditto.
(__pthread_attr_getstacksize): Ditto.
(__pthread_attr_setinheritsched): Ditto.
(__pthread_attr_getinheritsched): Ditto.
(__pthread_attr_setschedparam): Ditto.
(__pthread_attr_getschedparam): Ditto.
(__pthread_attr_setschedpolicy): Ditto.
(__pthread_attr_getschedpolicy): Ditto.
(__pthread_attr_setscope): Ditto.
(__pthread_attr_getscope): Ditto.
(__pthread_attr_setstackaddr): Ditto.
(__pthread_attr_getstackaddr): Ditto.
(__pthread_key_create): Ditto.
(__pthread_key_delete): Ditto.
(__pthread_setspecific): Ditto.
(__pthread_getspecific): Ditto.
(__pthread_kill): Ditto.
(__pthread_sigmask): Ditto.
(__pthread_equal): Ditto.
(__pthread_mutex_lock): Ditto.
(__pthread_mutex_trylock): Ditto.
(__pthread_mutex_unlock): Ditto.
(__pthread_mutex_destroy): Ditto.
(__pthread_mutex_setprioceiling): Ditto.
(__pthread_mutex_getprioceiling): Ditto.
(__pthread_mutexattr_destroy): Ditto.
(__pthread_mutexattr_getprioceiling): Ditto.
(__pthread_mutexattr_getprotocol): Ditto.
(__pthread_mutexattr_getpshared): Ditto.
(__pthread_mutexattr_gettype): Ditto.
(__pthread_mutexattr_init): Ditto.
(__pthread_mutexattr_setprioceiling): Ditto.
(__pthread_mutexattr_setprotocol): Ditto.
(__pthread_mutexattr_setpshared): Ditto.
(__pthread_mutexattr_settype): Ditto.
(__pthread_cond_destroy): Ditto.
(__pthread_cond_signal): Ditto.
(__pthread_cond_broadcast): Ditto.
(__pthread_condattr_init): Ditto.
(__pthread_condattr_destroy): Ditto.
(__pthread_condattr_getpshared): Ditto.
(__pthread_condattr_setpshared): Ditto.
(__pthread_rwlock_destroy): Ditto.
(__pthread_rwlock_rdlock): Ditto.
(__pthread_rwlock_tryrdlock): Ditto.
(__pthread_rwlock_wrlock): Ditto.
(__pthread_rwlock_trywrlock): Ditto.
(__pthread_rwlock_unlock): Ditto.
(__pthread_rwlockattr_init): Ditto.
(__pthread_rwlockattr_getpshared): Ditto.
(__pthread_rwlockattr_setpshared): Ditto.
(__pthread_rwlockattr_destroy): Ditto.
(__pthread_getconcurrency): Ditto.
(__pthread_setconcurrency): Ditto.
(__pthread_getschedparam): Ditto.
(__pthread_setschedparam): Ditto.
@
text
@d76 1
a76 1
  if (!pthread::isGoodObject (thread))
@


1.21
log
@
* cygwin.din: Add pthread_rwlock_destroy, pthread_rwlock_init,
pthread_rwlock_rdlock, pthread_rwlock_tryrdlock,
pthread_rwlock_wrlock, pthread_rwlock_trywrlock,
pthread_rwlock_unlock, pthread_rwlockattr_init,
pthread_rwlockattr_getpshared, pthread_rwlockattr_setpshared,
and pthread_rwlockattr_destroy.
* include/cygwin/version.h: Bump API minor number.
* include/pthread.h (PTHREAD_RWLOCK_INITIALIZER): Define a
reasonable value.
Add prototypes for pthread_rwlock_destroy, pthread_rwlock_init,
pthread_rwlock_rdlock, pthread_rwlock_tryrdlock,
pthread_rwlock_wrlock, pthread_rwlock_trywrlock,
pthread_rwlock_unlock, pthread_rwlockattr_init,
pthread_rwlockattr_getpshared, pthread_rwlockattr_setpshared,
and pthread_rwlockattr_destroy.
* thread.h (PTHREAD_ONCE_MAGIC): Remove superflous semicolon.
(PTHREAD_RWLOCK_MAGIC): New define.
(PTHREAD_RWLOCKATTR_MAGIC): Ditto.
(pthread_rwlockattr): New class.
(pthread_rwlock): Ditto.
(MTinterface::rwlocks): New member.
(MTinterface::MTinterface): Initialize rwlocks.
Add prototypes for __pthread_rwlock_destroy,
__pthread_rwlock_wrlock, __pthread_rwlock_trywrlock,
__pthread_rwlock_unlock, __pthread_rwlockattr_init,
__pthread_rwlockattr_getpshared, __pthread_rwlockattr_setpshared,
and __pthread_rwlockattr_destroy.
* thread.cc (MTinterface::Init): Initialize rwlock internal mutex.
(MTinterface::fixup_after_fork): Fixup rwlocks after fork.
(pthread_rwlockattr::isGoodObject): Implement.
(pthread_rwlockattr::pthread_rwlockattr): Ditto.
(pthread_rwlockattr::~pthread_rwlockattr): Ditto.
(pthread_rwlock::initMutex): Ditto.
(pthread_rwlock::pthread_rwlock): Ditto.
(pthread_rwlock::~pthread_rwlock): Ditto.
(pthread_rwlock::RdLock): Ditto.
(pthread_rwlock::TryRdLock): Ditto.
(pthread_rwlock::WrLock): Ditto.
(pthread_rwlock::TryWrLock): Ditto.
(pthread_rwlock::UnLock): Ditto.
(pthread_rwlock::addReader): Ditto.
(pthread_rwlock::removeReader): Ditto.
(pthread_rwlock::lookupReader): Ditto.
(pthread_rwlock::RdLockCleanup): Ditto.
(pthread_rwlock::WrLockCleanup): Ditto.
(pthread_rwlock::fixup_after_fork): Ditto.
(pthread_rwlock::isGoodObject): Ditto.
(pthread_rwlock::isGoodInitializer): Ditto.
(pthread_rwlock::isGoodInitializerOrObject): Ditto.
(pthread_rwlock::isGoodInitializerOrBadObject): Ditto.
(__pthread_rwlock_destroy): Ditto.
(pthread_rwlock::init): Ditto.
(__pthread_rwlock_rdlock): Ditto.
(__pthread_rwlock_tryrdlock): Ditto.
(__pthread_rwlock_wrlock): Ditto.
(__pthread_rwlock_trywrlock): Ditto.
@
text
@a38 101
int
pthread_attr_init (pthread_attr_t * attr)
{
  return __pthread_attr_init (attr);
}

int
pthread_attr_destroy (pthread_attr_t * attr)
{
  return __pthread_attr_destroy (attr);
}

int
pthread_attr_setdetachstate (pthread_attr_t * attr, int detachstate)
{
  return __pthread_attr_setdetachstate (attr, detachstate);
}

int
pthread_attr_getdetachstate (const pthread_attr_t * attr, int *detachstate)
{
  return __pthread_attr_getdetachstate (attr, detachstate);
}


int
pthread_attr_setstacksize (pthread_attr_t * attr, size_t size)
{
  return __pthread_attr_setstacksize (attr, size);
}

int
pthread_attr_getstacksize (const pthread_attr_t * attr, size_t * size)
{
  return __pthread_attr_getstacksize (attr, size);
}

int
pthread_attr_setinheritsched (pthread_attr_t * attr, int inheritsched)
{
  return __pthread_attr_setinheritsched (attr, inheritsched);
}

int
pthread_attr_getinheritsched (const pthread_attr_t * attr, int *inheritsched)
{
  return __pthread_attr_getinheritsched (attr, inheritsched);
}

int
pthread_attr_setschedparam (pthread_attr_t * attr,
			    const struct sched_param *param)
{
  return __pthread_attr_setschedparam (attr, param);
}

int
pthread_attr_getschedparam (const pthread_attr_t * attr,
			    struct sched_param *param)
{
  return __pthread_attr_getschedparam (attr, param);
}

int
pthread_attr_setschedpolicy (pthread_attr_t * attr, int policy)
{
  return __pthread_attr_setschedpolicy (attr, policy);
}

int
pthread_attr_getschedpolicy (const pthread_attr_t * attr, int *policy)
{
  return __pthread_attr_getschedpolicy (attr, policy);
}

int
pthread_attr_setscope (pthread_attr_t * attr, int contentionscope)
{
  return __pthread_attr_setscope (attr, contentionscope);
}

int
pthread_attr_getscope (const pthread_attr_t * attr, int *contentionscope)
{
  return __pthread_attr_getscope (attr, contentionscope);
}

#ifdef _POSIX_THREAD_ATTR_STACKADDR
int
pthread_attr_setstackaddr (pthread_attr_t * attr, void *stackaddr)
{
  return __pthread_attr_setstackaddr (attr, stackaddr);
}

int
pthread_attr_getstackaddr (const pthread_attr_t * attr, void **stackaddr)
{
  return __pthread_attr_getstackaddr (attr, stackaddr);
}
#endif

a80 38
/* Thread SpecificData */
int
pthread_key_create (pthread_key_t * key, void (*destructor) (void *))
{
  return __pthread_key_create (key, destructor);
}

int
pthread_key_delete (pthread_key_t key)
{
  return __pthread_key_delete (key);
}

int
pthread_setspecific (pthread_key_t key, const void *value)
{
  return __pthread_setspecific (key, value);
}

void *
pthread_getspecific (pthread_key_t key)
{
  return (void *) __pthread_getspecific (key);
}

/* Thread signal */
int
pthread_kill (pthread_t thread, int sig)
{
  return __pthread_kill (thread, sig);
}

int
pthread_sigmask (int operation, const sigset_t * set, sigset_t * old_set)
{
  return __pthread_sigmask (operation, set, old_set);
}

a87 6
int
pthread_equal (pthread_t t1, pthread_t t2)
{
  return __pthread_equal (&t1, &t2);
}

a94 101
int
pthread_mutex_lock (pthread_mutex_t * mutex)
{
  return __pthread_mutex_lock (mutex);
}

int
pthread_mutex_trylock (pthread_mutex_t * mutex)
{
  return __pthread_mutex_trylock (mutex);
}

int
pthread_mutex_unlock (pthread_mutex_t * mutex)
{
  return __pthread_mutex_unlock (mutex);
}

int
pthread_mutex_destroy (pthread_mutex_t * mutex)
{
  return __pthread_mutex_destroy (mutex);
}

int
pthread_mutex_setprioceiling (pthread_mutex_t * mutex,
			      int prioceiling, int *old_ceiling)
{
  return __pthread_mutex_setprioceiling (mutex, prioceiling, old_ceiling);
}

int
pthread_mutex_getprioceiling (const pthread_mutex_t * mutex, int *prioceiling)
{
  return __pthread_mutex_getprioceiling (mutex, prioceiling);
}



int
pthread_mutexattr_destroy (pthread_mutexattr_t * attr)
{
  return __pthread_mutexattr_destroy (attr);
}

int
pthread_mutexattr_getprioceiling (const pthread_mutexattr_t * attr,
				  int *prioceiling)
{
  return __pthread_mutexattr_getprioceiling (attr, prioceiling);
}

int
pthread_mutexattr_getprotocol (const pthread_mutexattr_t * attr,
			       int *protocol)
{
  return __pthread_mutexattr_getprotocol (attr, protocol);
}

int
pthread_mutexattr_getpshared (const pthread_mutexattr_t * attr, int *pshared)
{
  return __pthread_mutexattr_getpshared (attr, pshared);
}

int
pthread_mutexattr_gettype (const pthread_mutexattr_t * attr, int *type)
{
  return __pthread_mutexattr_gettype (attr, type);
}

int
pthread_mutexattr_init (pthread_mutexattr_t * attr)
{
  return __pthread_mutexattr_init (attr);
}

int
pthread_mutexattr_setprioceiling (pthread_mutexattr_t * attr, int prioceiling)
{
  return __pthread_mutexattr_setprioceiling (attr, prioceiling);
}

int
pthread_mutexattr_setprotocol (pthread_mutexattr_t * attr, int protocol)
{
  return __pthread_mutexattr_setprotocol (attr, protocol);
}

int
pthread_mutexattr_setpshared (pthread_mutexattr_t * attr, int pshared)
{
  return __pthread_mutexattr_setpshared (attr, pshared);
}

int
pthread_mutexattr_settype (pthread_mutexattr_t * attr, int type)
{
  return __pthread_mutexattr_settype (attr, type);
}

a95 7

int
pthread_cond_destroy (pthread_cond_t * cond)
{
  return __pthread_cond_destroy (cond);
}

a101 36
int
pthread_cond_signal (pthread_cond_t * cond)
{
  return __pthread_cond_signal (cond);
}

int
pthread_cond_broadcast (pthread_cond_t * cond)
{
  return __pthread_cond_broadcast (cond);
}

int
pthread_condattr_init (pthread_condattr_t * condattr)
{
  return __pthread_condattr_init (condattr);
}

int
pthread_condattr_destroy (pthread_condattr_t * condattr)
{
  return __pthread_condattr_destroy (condattr);
}

int
pthread_condattr_getpshared (const pthread_condattr_t * attr, int *pshared)
{
  return __pthread_condattr_getpshared (attr, pshared);
}

int
pthread_condattr_setpshared (pthread_condattr_t * attr, int pshared)
{
  return __pthread_condattr_setpshared (attr, pshared);
}

a103 6
pthread_rwlock_destroy (pthread_rwlock_t *rwlock)
{
  return __pthread_rwlock_destroy (rwlock);
}

int
a107 87

int
pthread_rwlock_rdlock (pthread_rwlock_t *rwlock)
{
  return __pthread_rwlock_rdlock (rwlock);
}

int
pthread_rwlock_tryrdlock (pthread_rwlock_t *rwlock)
{
  return __pthread_rwlock_tryrdlock (rwlock);
}

int
pthread_rwlock_wrlock (pthread_rwlock_t *rwlock)
{
  return __pthread_rwlock_wrlock (rwlock);
}

int
pthread_rwlock_trywrlock (pthread_rwlock_t *rwlock)
{
  return __pthread_rwlock_trywrlock (rwlock);
}

int
pthread_rwlock_unlock (pthread_rwlock_t *rwlock)
{
  return __pthread_rwlock_unlock (rwlock);
}

int
pthread_rwlockattr_init (pthread_rwlockattr_t *rwlockattr)
{
  return __pthread_rwlockattr_init (rwlockattr);
}

int
pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *attr,
                               int *pshared)
{
  return __pthread_rwlockattr_getpshared (attr, pshared);
}

int
pthread_rwlockattr_setpshared (pthread_rwlockattr_t *attr, int pshared)
{
  return __pthread_rwlockattr_setpshared (attr, pshared);
}

int
pthread_rwlockattr_destroy (pthread_rwlockattr_t *rwlockattr)
{
  return __pthread_rwlockattr_destroy (rwlockattr);
}

/* Scheduling */

int
pthread_getconcurrency (void)
{
  return __pthread_getconcurrency ();
}

int
pthread_setconcurrency (int new_level)
{
  return __pthread_setconcurrency (new_level);
}




int
pthread_getschedparam (pthread_t thread, int *policy,
		       struct sched_param *param)
{
  return __pthread_getschedparam (thread, policy, param);
}

int
pthread_setschedparam (pthread_t thread, int policy,
		       const struct sched_param *param)
{
  return __pthread_setschedparam (thread, policy, param);
}

@


1.20
log
@	Split ChangeLog, create ChangeLog-2002.
	Fix copyright dates.
@
text
@d391 68
@


1.20.2.1
log
@merge from trunk
@
text
@d39 101
d182 38
d227 6
d240 101
d342 7
a354 1
/* RW Locks */
d356 25
a380 1
pthread_rwlock_init (pthread_rwlock_t *rwlock, const pthread_rwlockattr_t *attr)
d382 1
a382 1
  return pthread_rwlock::init (rwlock, attr);
d384 38
@


1.20.2.2
log
@merge from trunk
@
text
@d76 1
a76 1
  if (!pthread::is_good_object (thread))
@


1.19
log
@Applied cond_init patch
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
@


1.18
log
@2002-09-30  Robert Collins <rbtcollins@@hotmail.com>

        * pthread.cc (pthread_mutex_init): Use new pthread_mutex::init.
        * thread.cc: Change __pthread_mutex_init to pthread_mutex::init
        throughout.
        (MTinterface::Init): Initialise pthread_mutex support.
        (pthread_mutex::mutexInitializationLock): Instantiate.
        (pthread_mutex::initMutex): New method.
        (__pthread_cond_dowait): Don't dereference untrusted pointers.
        Use the new pthread_mutex::init method.
        (__pthread_condattr_init): Don't dereference untrusted pointers.
        (__pthread_mutex_init): Rename to pthread_mutex::init.
        Lock and release mutexInitializationLock to prevent races on
        mutex initialisation.
        * thread.h (pthread_mutex::initMutex): New method, initialise
        pthread_mutex supporting state on process initialisation.
        (pthread_mutex::init): Initialise a single mutex.
        (pthread_mutex::mutexInitializationLock): A win32 mutex for
        syncronising pthread mutex initialisation.
        (__pthread_mutex_init): Remove this.
@
text
@d352 1
a352 1
  return __pthread_cond_init (cond, attr);
@


1.17
log
@* fhandler.cc (fhandler_base::dup): Don't set handle on failure.  Caller has
already taken care of that.
* fhandler_console.cc (fhandler_console::open): Initialize handles to NULL.
(fhandler_console::close): Ditto.  GNUify non-GNU formatted functions calls
throughout.
@
text
@d237 1
a237 1
  return __pthread_mutex_init (mutex, attr);
@


1.16
log
@2002-09-21  Robert Collins <rbtcollins@@hotmail.com>

        * pthread.cc: Use class::call for converted pthread and semaphore
        calls.
        * thread.cc: Convert various __pthread_call and __sem_call to
        pthread::call and sem::call throughout.
        * pthread.h (__pthread_cancel): Convert to pthread::cancel.
        (__pthread_join): Convert to pthread::join.
        (__pthread_detach): Convert to pthread::detach.
        (__pthread_create): Convert to pthread::create.
        (__pthread_once): Convert to pthread::once.
        (__pthread_atfork): Convert to pthread::atfork.
        (__pthread_suspend): Convert to pthread::suspend.
        (__pthread_continue): Convert to pthread::resume.
        (__sem_init): Convert to semaphore::init.
        (__sem_destroy): Convert to semaphore::destroy.
        (__sem_wait): Convert to semaphore::wait.
        (__sem_trywait): Convert to semaphore::trywait.
        (__sem_post): Convert to semaphore::post.
@
text
@d34 1
a34 1
pthread_atfork(void (*prepare)(void), void (*parent)(void), void (*child)(void))
d36 1
a36 1
  return pthread::atfork(prepare, parent, child);
d144 1
a144 1
  return pthread::self()->exit (value_ptr);
d179 1
a179 1
  return (*thread)->getsequence_np();
d224 1
a224 1
  return pthread::self();
d434 1
a434 1
  return pthread::self()->setcancelstate (state, oldstate);
d440 1
a440 1
  return pthread::self()->setcanceltype (type, oldtype);
d446 1
a446 1
  pthread::self()->testcancel ();
d452 1
a452 1
  pthread::self()->push_cleanup_handler (handler);
d458 1
a458 1
  pthread::self()->pop_cleanup_handler (execute);
@


1.15
log
@* init.cc: Cleanup slightly and remove obsolete code.
@
text
@d24 1
a24 1
  return __pthread_create (thread, attr, start_routine, arg);
d30 1
a30 1
  return __pthread_once (once_control, init_routine);
d36 1
a36 1
  return __pthread_atfork(prepare, parent, child);
d150 1
a150 1
  return __pthread_join (&thread, (void **) return_val);
d156 1
a156 1
  return __pthread_detach (&thread);
d164 1
a164 1
  return __pthread_suspend (&thread);
d171 1
a171 1
  return __pthread_continue (&thread);
d428 1
a428 1
  return __pthread_cancel (thread);
d465 1
a465 1
  return __sem_init (sem, pshared, value);
d471 1
a471 1
  return __sem_destroy (sem);
d477 1
a477 1
  return __sem_wait (sem);
d483 1
a483 1
  return __sem_trywait (sem);
d489 1
a489 1
  return __sem_post (sem);
@


1.14
log
@2002-09-11  Robert Collins  <rbtcollins@@hotmail.com>

        * init.cc (dll_entry): On thread detach, if the thread hasn't
        exit()ed, do so.
        * pthread.cc (pthread_getsequence_np): Remove the
        __pthread_getsequence_np wrapper. This requires errno.h.
        * thread.cc (pthread::self): Instantiate a new pthread object
        when called and none exists. return a NULL object if instantiation
        fails.
        (pthread::precreate): Factor out common code.
        (pthread::postcreate): Ditto.
        (pthread::create): Ditto.
        (pthread::exit): Remove the TLS value when we exit to prevent
        double exits.
        (MTinterface::Init): Bugfix - don't mark the TLS index as created
        if one was not allocated.
        Apply Extract Method to move pthread specific initialisation into
        pthread.
        (pthread::initMainThread): Extracted method from MTinterface::Init.
        (pthread::setTlsSelfPointer): Extracted method from various pthread
        calls, to make reading those functions easier.
        (pthread::setThreadIdtoCurrent): Ditto.
        (pthread::cancel_self): Bring into the .cc file, it's only used
        within the class.
        (pthread::getThreadId): Ditto.
        (pthread::thread_init_wrapper): Apply Extract Method to the TLS
        setting logic.
        (pthread::isGoodObject): Extracted method from various pthread
        wrapper calls, for clarity of reading.
        (pthread::getsequence_np): Converted from __pthread_getsquence_np.
        (__pthread_create): Apply Extract Method to the object validation.
        (__pthread_cancel): Ditto.
        (__pthread_join): Ditto.
        (__pthread_detach): Ditto.
        (__pthread_suspend): Ditto.
        (__pthread_continue): Ditto.
        (__pthread_getschedparam): Ditto.
        (__pthread_getsequence_np): Remove.
        (__pthread_setschedparam): Apply Extract Method to the object
        validation.
        (pthreadNull::getNullpthread): New method, return the pthreadNull
        object.
        (pthreadNull::pthreadNull): Private constructor to prevent accidental
        use.
        (pthreadNull::~pthreadNull): Prevent compile warnings.
        (pthreadNull::create): Override pthread behaviour.
        (pthreadNull::exit): Ditto.
        (pthreadNull::cancel): Ditto.
        (pthreadNull::testcancel): Ditto.
        (pthreadNull::setcancelstate): Ditto.
        (pthreadNull::setcanceltype): Ditto.
        (pthreadNull::push_cleanup_handler): Ditto.
        (pthreadNull::pop_cleanup_handler): Ditto.
        (pthreadNull::getsequence_np): Ditto.
        (pthreadNull::_instance): Ditto.
        * thread.h (pthread): Declare pre- and post-create.
        Move GetThreadId to private scope and rename to getThreadId.
        Move setThreadIdtoCurrent to private scope.
        Make create virtual.
        Make ~pthread virtual.
        Declare initMainThread.
        Declare isGoodObject.
        Make exit virtual.
        Make cancel virtual.
        Make testcancel virtual.
        Make setcancelstate virtual.
        Make setcanceltype virtual.
        Make push_cleanup_handler virtual.
        Make pop_cleanup_handler virtual.
        Declare getsequence_np.
        Declare setTlsSelfPointer.
        (pthreadNull): New null object class for pthread.
        (__pthread_getsequence_np): Remove.
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001 Red Hat, Inc.
@


1.13
log
@2002-06-25  Thomas Pfaff  <tpfaff@@gmx.net>

        * include/pthread.h (PTHREAD_CANCELED): Defined a reasonable
        value.
	* pthread.cc (pthread_exit): Call method instead of function.
	(pthread_setcancelstate): Ditto.
	(pthread_setcanceltype): Ditto.
	(pthread_testcancel): Ditto.
	* thread.h (pthread::cancel_event): New member.
        (__pthread_cancel_self): New prototype.
	(pthread::exit): New Method.
	(pthread::cancel): Ditto.
	(pthread::testcancel): Ditto.
	(pthread::cancel_self): Ditto.
	(pthread::static_cancel_self): Ditto.
	(pthread::setcancelstate): Ditto.
	(pthread::setcanceltype): Ditto.
	(__pthread_cancel): Give c++ linkage.
	(__pthread_exit): Remove.
	(__pthread_setcancelstate): Ditto.
	(__pthread_setcanceltype): Ditto.
	(__pthread_testcancel): Ditto.
	 * thread.cc (pthread::pthread): Inititialize cancel_event.
	(pthread::~pthread): Close cancel_event if needed.
	(pthread::create): Create cancel_event.
	(pthread::exit): New method. Replacement for __pthread_exit.
	(pthread::cancel): New method.
	(pthread::testcancel): Ditto.
	(pthread::static_cancel_self); New static method.
	(pthread::setcancelstate): New method. Replacement for
	__pthread_setcancelstate.
	(pthread::setcanceltype): New method. Replacement for
	__pthread_setcanceltype.
	(pthread::pop_cleanup_handler): Added lock for async cancel safe
	cancellation.
	(pthread::thread_init_wrapper): Change __pthread_exit to
	thread->exit().
	(__pthread_cancel): Call method thread->cancel().
	(__pthread_exit): Remove.
	(__pthread_setcancelstate): Ditto.
	(__pthread_setcanceltype): Ditto.
	(__pthread_testcancel): Ditto.
@
text
@d15 1
d177 3
a179 1
  return __pthread_getsequence_np (thread);
@


1.12
log
@2002-06-10  Robert Collins  <rbtcollins@@hotmail.com>

        * cygwin.din: Add _pthread_cleanup_push and _pthread_cleanup_pop.
        * pthread.cc: Change __pthread_self to pthread::self() thruoghout.
        (_pthread_cleanup_push): New function.
        (_pthread_cleanup_pop): Ditto.
        * thread.cc: Thanks to Thomas Pfaff for the pthread cleanup_push,_pop
        patch, this work is derived from that.
        Change __pthread_self to pthread::self() thruoghout.
        (__pthread_self): Rename to pthread::self.
        (pthread::self): New method.
        (pthread::pthread): Initialize new member.
        (pthread::push_cleanup_handler): New method.
        (pthread::pop_cleanup_handler): New method.
        (pthread::pop_all_cleanup_handlers): New method.
        (__pthread_exit): Pop all cleanup handlers.
        * thread.h (pthread::push_cleanup_handler): Declare.
        (pthread::pop_cleanup_handler): Ditto.
        (pthread::pop_all_cleanup_handlers): Ditto.
        (pthread::self): New static method.
        (__pthread_exit): Give C++ linkage.
        (__pthread_join): Ditto.
        (__pthread_detach): Ditto.
        (__pthread_self): Remove.

2002-04-24  Thomas Pfaff  <tpfaff@@gmx.net>

        * include/pthread.h (__pthread_cleanup_handler): New structure
        (pthread_cleanup_push): Rewritten .
        (pthread_cleanup_pop): Ditto.
        (_pthread_cleanup_push): New prototype.
        (_pthread_cleanup_pop) Ditto.

2002-04-24  Thomas Pfaff  <tpfaff@@gmx.net>

        * thread.cc (thread_init_wrapper): Check if thread is already joined.
        (__pthread_join): Set joiner first.
        (__pthread_detach): Ditto.
@
text
@d143 1
a143 1
  return __pthread_exit (value_ptr);
d431 1
a431 1
  return __pthread_setcancelstate (state, oldstate);
d437 1
a437 1
  return __pthread_setcanceltype (type, oldtype);
d443 1
a443 1
  __pthread_testcancel ();
d449 1
a449 1
  pthread::self()->push_cleanup_handler(handler);
@


1.11
log
@Sat Sep 29 18:26:00 2001  Robert Collins <rbtcollins@@hotmail.com>

        * pthread.cc (pthread_cond_timedwait): Deleted - exported from thread.cc.
        (pthread_cond_wait): Deleted - exported from thread.cc.
        * thread.cc (pthread_cond::BroadCast): Update to use the new syntax for
        verifyable_object_isvalid ().
        (pthread_cond::Signal): Ditto. Also attempt to fix the lost signal race
        with pthread_cond::TimedWait().
        (check_valid_pointer): Change definiton to void const *.
        (verifyable_object_isvalid): Add new parameter to allow identification of
        static initializers, and return a enum rather than magic numbers.
        (__pthread_create): Ditto.
        (__pthread_cleanup): Ditto.
        (__pthread_attr_init): Ditto.
        (__pthread_attr_getinheritsched): Ditto.
        (__pthread_attr_getschedparam): Ditto.
        (__pthread_attr_getschedpolicy): Ditto.
        (__pthread_attr_getscope): Ditto.
        (__pthread_attr_setdetachstate): Ditto.
        (__pthread_attr_getdetachstate): Ditto.
        (__pthread_attr_setinheritsched): Ditto.
        (__pthread_attr_setschedparam): Ditto.
        (__pthread_attr_setschedpolicy): Ditto.
        (__pthread_attr_setscope): Ditto.
        (__pthread_attr_setstacksize): Ditto.
        (__pthread_attr_getstacksize): Ditto.
        (__pthread_attr_destroy): Ditto.
        (__pthread_join): Ditto.
        (__pthread_detach): Ditto.
        (__pthread_suspend): Ditto.
        (__pthread_continue): Ditto.
        (__pthread_getschedparam): Ditto.
        (__pthread_getsequence_np): Ditto.
        (__pthread_key_create): Ditto.
        (__pthread_key_delete): Ditto.
        (__pthread_setschedparam): Ditto.
        (__pthread_setspecific): Ditto.
        (__pthread_getspecific): Ditto.
        (__pthread_cond_destroy): Ditto.
        (__pthread_cond_init): Ditto.
        (__pthread_cond_broadcast): Ditto.
        (__pthread_cond_signal): Ditto.
        (__pthread_condattr_init): Ditto.
        (__pthread_condattr_getpshared): Ditto.
        (__pthread_condattr_setpshared): Ditto.
        (__pthread_condattr_destroy): Ditto.
        (__pthread_kill): Ditto.
        (__pthread_mutex_init): Ditto.
        (__pthread_mutex_getprioceiling): Ditto.
        (__pthread_mutex_lock): Ditto.
        (__pthread_mutex_trylock): Ditto.
        (__pthread_mutex_unlock): Ditto.
        (__pthread_mutex_destroy): Ditto.
        (__pthread_mutex_setprioceiling): Ditto.
        (__pthread_mutexattr_getprotocol): Ditto.
        (__pthread_mutexattr_getpshared): Ditto.
        (__pthread_mutexattr_gettype): Ditto.
        (__pthread_mutexattr_init): Ditto.
        (__pthread_mutexattr_destroy): Ditto.
        (__pthread_mutexattr_setprotocol): Ditto.
        (__pthread_mutexattr_setprioceiling): Ditto.
        (__pthread_mutexattr_getprioceiling): Ditto.
        (__pthread_mutexattr_setpshared): Ditto.
        (__pthread_mutexattr_settype): Ditto.
        (__sem_init): Ditto.
        (__sem_destroy): Ditto.
        (__sem_wait): Ditto.
        (__sem_trywait): Ditto.
        (__sem_post): Ditto.
        (__pthread_cond_dowait): New function, contains core logic from
        __pthread_cond_wait and __pthread_cond_timedwait. Decrement (*cond)->waiting
        before reentering the cond access mutex to allow detection of lost signals.
        (__pthread_cond_timedwait): Rename to pthread_cond_timedwait, and call
        __pthread_cond_dowait after calculating the wait length.
        (__pthread_cond_wait): Rename to pthread_cond_wait, and call
        __pthread_cond_dowait.
        * thread.h: New enum for use with verifyable_object_isvalid.
        Remove the extern exporting of __pthread_cond_timedwait and __pthread_cond_wait.
@
text
@d221 1
a221 1
  return __pthread_self ();
a427 2


d444 12
@


1.10
log
@forced commit
@
text
@a364 14
pthread_cond_timedwait (pthread_cond_t * cond,
			pthread_mutex_t * mutex,
			const struct timespec *abstime)
{
  return __pthread_cond_timedwait (cond, mutex, abstime);
}

int
pthread_cond_wait (pthread_cond_t * cond, pthread_mutex_t * mutex)
{
  return __pthread_cond_wait (cond, mutex);
}

int
@


1.10.4.1
log
@Merged changes from HEAD
@
text
@d365 14
@


1.10.4.2
log
@Merged changes from HEAD
@
text
@d221 1
a221 1
  return pthread::self();
d428 2
a445 12
}

void
_pthread_cleanup_push (__pthread_cleanup_handler *handler)
{
  pthread::self()->push_cleanup_handler(handler);
}

void
_pthread_cleanup_pop (int execute)
{
  pthread::self()->pop_cleanup_handler (execute);
@


1.10.4.3
log
@Merged changes from HEAD
@
text
@d143 1
a143 1
  return pthread::self()->exit (value_ptr);
d431 1
a431 1
  return pthread::self()->setcancelstate (state, oldstate);
d437 1
a437 1
  return pthread::self()->setcanceltype (type, oldtype);
d443 1
a443 1
  pthread::self()->testcancel ();
d449 1
a449 1
  pthread::self()->push_cleanup_handler (handler);
@


1.10.4.4
log
@Merged changes from HEAD
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
a14 1
#include "errno.h"
d176 1
a176 3
  if (!pthread::isGoodObject (thread))
    return EINVAL;
  return (*thread)->getsequence_np();
@


1.10.4.5
log
@Merged changes from HEAD
@
text
@d24 1
a24 1
  return pthread::create (thread, attr, start_routine, arg);
d30 1
a30 1
  return pthread::once (once_control, init_routine);
d36 1
a36 1
  return pthread::atfork(prepare, parent, child);
d150 1
a150 1
  return pthread::join (&thread, (void **) return_val);
d156 1
a156 1
  return pthread::detach (&thread);
d164 1
a164 1
  return pthread::suspend (&thread);
d171 1
a171 1
  return pthread::resume (&thread);
d428 1
a428 1
  return pthread::cancel (thread);
d465 1
a465 1
  return semaphore::init (sem, pshared, value);
d471 1
a471 1
  return semaphore::destroy (sem);
d477 1
a477 1
  return semaphore::wait (sem);
d483 1
a483 1
  return semaphore::trywait (sem);
d489 1
a489 1
  return semaphore::post (sem);
@


1.10.4.6
log
@Merged changes from HEAD
@
text
@d34 1
a34 1
pthread_atfork (void (*prepare)(void), void (*parent)(void), void (*child)(void))
d36 1
a36 1
  return pthread::atfork (prepare, parent, child);
d144 1
a144 1
  return pthread::self ()->exit (value_ptr);
d179 1
a179 1
  return (*thread)->getsequence_np ();
d224 1
a224 1
  return pthread::self ();
d434 1
a434 1
  return pthread::self ()->setcancelstate (state, oldstate);
d440 1
a440 1
  return pthread::self ()->setcanceltype (type, oldtype);
d446 1
a446 1
  pthread::self ()->testcancel ();
d452 1
a452 1
  pthread::self ()->push_cleanup_handler (handler);
d458 1
a458 1
  pthread::self ()->pop_cleanup_handler (execute);
@


1.9
log
@* fork.cc (fork_child): Call the __pthread_atforkchild function.
(fork_parent): Call the __pthread_atforkparent function.
* cygwin.din: Export pthread_atfork.
* thread.h (callback): New class.
(MTinterface): Use it.
* thread.cc (__pthread_atforkprepare): New function.
(__pthread_atforkparent): New function.
(__pthread_atforkchild): New function.
(__pthread_atfork): New function.
* pthread.cc (pthread_atfork): New function.
@
text
@@


1.8
log
@	* configure.in: Remove PTH_ALLOW.
	* cygwin.din: Remove @@PTH_ALLOW@@ prefixes to pthread functions.
	Add new pthread exports.
	* pthread.cc: New wrapper functions for the above new exports.
	* sched.cc (valid_sched_parameters): New function.
	(sched_setparam): Use it.
	(sched_set_thread_priority): New function. Used by pthread_sched*.
	* thread.cc (pthread_key_destructor::InsertAfter): New function.
	(pthread_key_destructor::UnlinkNext): New function.
	(pthread_key_destructor::Next): New function.
	(pthread_key_destructor_list::Insert): New function.
	(pthread_key_destructor_list::Remove): New function.
	(pthread_key_destructor_list::Pop): New function.
	(pthread_key_destructor::pthread_key_destructor): New function.
	(pthread_key_destructor_list::IterateNull): New function.
	(MTinterface::Init): Initialise new member.
	(pthread::pthread): Initialise new members.
	(pthread::create): Copy new attributes. Set the new thread priority.
	(pthread_attr::pthread_attr): Initialise new members.
	(pthread_key::pthread_key): Setup destructor function.
	(pthread_key::~pthread_key): Remove destructor function.
	(pthread_mutexattr::pthread_mutexattr): New function.
	(pthread_mutexattr::~pthread_mutexattr): New function.
	(__pthread_once): New function.
	(__pthread_cleanup): New function.
	(__pthread_cancel): New function.
	(__pthread_setcancelstate): New function.
	(__pthread_setcanceltype): New function.
	(__pthread_testcancel): New function.
	(__pthread_attr_getinheritsched): New function.
	(__pthread_attr_getschedparam): New function.
	(__pthread_attr_getschedpolicy): New function.
	(__pthread_attr_getscope): New function.
	(__pthread_attr_setinheritsched): New function.
	(__pthread_attr_setschedparam): New function.
	(__pthread_attr_setschedpolicy): New function.
	(__pthread_attr_setscope): New function.
	(__pthread_exit): Call any key destructors on thread exit.
	(__pthread_join): Use the embedded attr values.
	(__pthread_detach): Use the embedded attr values.
	(__pthread_getconcurrency): New function.
	(__pthread_getschedparam): New function.
	(__pthread_key_create): Pass the destructor on object creation.
	(__pthread_key_delete): Correct incorrect prototype.
	(__pthread_setconcurrency): New function.
	(__pthread_setschedparam): New function.
	(__pthread_cond_timedwait): Support static mutex initialisers.
	(__pthread_cond_wait): Ditto.
	(__pthread_mutex_getprioceiling): New function.
	(__pthread_mutex_lock): Support static mutex initialisers.
	(__pthread_mutex_trylock): Ditto.
	(__pthread_mutex_unlock): Ditto.
	(__pthread_mutex_destroy): Ditto.
	(__pthread_mutex_setprioceiling): New function.
	(__pthread_mutexattr_getprotocol): New function.
	(__pthread_mutexattr_getpshared): New function.
	(__pthread_mutexattr_gettype): New function.
	(__pthread_mutexattr_init): New function.
	(__pthread_mutexattr_destroy): New function.
	(__pthread_mutexattr_setprotocol): New function.
	(__pthread_mutexattr_setprioceiling): New function.
	(__pthread_mutexattr_getprioceiling): New function.
	(__pthread_mutexattr_setpshared): New function.
	(__pthread_mutexattr_settype): New function.
	Remove stubs for non MT_SAFE compilation.
	* thread.h: Remove duplicate #defines.
	Add prototypes for new functions in thread.cc.
	(pthread_key_destructor): New class.
	(pthread_key_destructor_list): New class.
	(pthread_attr): Add new members.
	(pthread): Remove members that are duplicated in the pthread_attr class.
	(pthread_mutex_attr): Add new members.
	(pthread_once): New class.
	* include/pthread.h: Add prototypes for new functions exported from cygwin1.dll.
	Remove typedefs.
	* include/sched.h: Add prototypes for new functions in sched.cc.
	* include/cygwin/types.h: Add typedefs from pthread.h
@
text
@d33 6
@


1.7
log
@* Makefile.in: Put -lgcc last in list of libraries, since stdc++ library needs
it.
* cygwin.din: Remove obsolete "__empty" export.
* exceptions.cc (call_signal_handler_now): Force inclusion of function even
when -finline-functions is specified.
* sigproc.h: Remove obsolete call_signal_handler declaration.
* fhandler_console.cc (cp_get_internal): New function.
(cp_convert): New function.
(con_to_str): New function.
(str_to_con): New function.
(fhandler_console::read): Replace OemToCharBuff with con_to_str.
(fhandler_console::write_normal): Replace CharToOemBuff with str_to_con.
@
text
@d20 2
a21 2
  pthread_create (pthread_t * thread, const pthread_attr_t * attr,
		  void *(*start_routine) (void *), void *arg)
d26 8
a33 1
int pthread_attr_init (pthread_attr_t * attr)
d38 2
a39 1
int pthread_attr_destroy (pthread_attr_t * attr)
d44 2
a45 1
int pthread_attr_setdetachstate (pthread_attr_t * attr, int detachstate)
d51 1
a51 2
  pthread_attr_getdetachstate (const pthread_attr_t * attr,
			       int *detachstate)
d57 2
a58 1
int pthread_attr_setstacksize (pthread_attr_t * attr, size_t size)
d63 2
a64 1
int pthread_attr_getstacksize (pthread_attr_t * attr, size_t * size)
d69 56
d126 6
a131 4
/*
 pthread_attr_setstackaddr(...){};
 pthread_attr_getstackaddr(...){};
*/
d134 2
a135 1
void pthread_exit (void *value_ptr)
d140 2
a141 1
int pthread_join (pthread_t thread, void **return_val)
d146 2
a147 1
int pthread_detach (pthread_t thread)
d152 4
a155 1
int pthread_suspend (pthread_t thread)
d160 3
a162 1
int pthread_continue (pthread_t thread)
d167 2
a168 1
unsigned long pthread_getsequence_np (pthread_t * thread)
d174 2
a175 1
int pthread_key_create (pthread_key_t * key, void (*destructor) (void *))
d180 2
a181 1
int pthread_key_delete (pthread_key_t * key)
d186 2
a187 1
int pthread_setspecific (pthread_key_t key, const void *value)
d192 2
a193 1
void *pthread_getspecific (pthread_key_t key)
d199 2
a200 1
int pthread_kill (pthread_t * thread, int sig)
d206 1
a206 1
  pthread_sigmask (int operation, const sigset_t * set, sigset_t * old_set)
d218 2
a219 1
int pthread_equal (pthread_t t1, pthread_t t2)
d226 1
a226 2
  pthread_mutex_init (pthread_mutex_t * mutex,
		      const pthread_mutexattr_t * attr)
d231 2
a232 1
int pthread_mutex_lock (pthread_mutex_t * mutex)
d237 2
a238 1
int pthread_mutex_trylock (pthread_mutex_t * mutex)
d243 2
a244 1
int pthread_mutex_unlock (pthread_mutex_t * mutex)
d249 2
a250 1
int pthread_mutex_destroy (pthread_mutex_t * mutex)
d255 77
d334 2
a335 1
int pthread_cond_destroy (pthread_cond_t * cond)
d341 1
a341 1
  pthread_cond_init (pthread_cond_t * cond, const pthread_condattr_t * attr)
d346 2
a347 1
int pthread_cond_signal (pthread_cond_t * cond)
d352 2
a353 1
int pthread_cond_broadcast (pthread_cond_t * cond)
d359 3
a361 3
  pthread_cond_timedwait (pthread_cond_t * cond,
			  pthread_mutex_t * mutex,
			  const struct timespec *abstime)
d366 2
a367 1
int pthread_cond_wait (pthread_cond_t * cond, pthread_mutex_t * mutex)
d372 2
a373 1
int pthread_condattr_init (pthread_condattr_t * condattr)
d378 2
a379 1
int pthread_condattr_destroy (pthread_condattr_t * condattr)
d385 1
a385 2
  pthread_condattr_getpshared (const pthread_condattr_t * attr,
			       int *pshared)
d390 2
a391 1
int pthread_condattr_setpshared (pthread_condattr_t * attr, int pshared)
d396 60
d457 2
a458 1
int sem_init (sem_t * sem, int pshared, unsigned int value)
d463 2
a464 1
int sem_destroy (sem_t * sem)
d469 2
a470 1
int sem_wait (sem_t * sem)
d475 2
a476 1
int sem_trywait (sem_t * sem)
d481 2
a482 1
int sem_post (sem_t * sem)
d486 1
@


1.6
log
@* sched.cc: New file.  Implement sched*.
* include/sched.h: New file.  User land includes for sched*.
* Makefile.in: Add sched.o
* cygwin.din: Add exports for sched*.
@
text
@d19 39
a57 39
  int
    pthread_create (pthread_t * thread, const pthread_attr_t * attr,
		    void *(*start_routine) (void *), void *arg)
  {
    return __pthread_create (thread, attr, start_routine, arg);
  }

  int pthread_attr_init (pthread_attr_t * attr)
  {
    return __pthread_attr_init (attr);
  }

  int pthread_attr_destroy (pthread_attr_t * attr)
  {
    return __pthread_attr_destroy (attr);
  }

  int pthread_attr_setdetachstate (pthread_attr_t * attr, int detachstate)
  {
    return __pthread_attr_setdetachstate (attr, detachstate);
  }

  int
    pthread_attr_getdetachstate (const pthread_attr_t * attr,
				 int *detachstate)
  {
    return __pthread_attr_getdetachstate (attr, detachstate);
  }


  int pthread_attr_setstacksize (pthread_attr_t * attr, size_t size)
  {
    return __pthread_attr_setstacksize (attr, size);
  }

  int pthread_attr_getstacksize (pthread_attr_t * attr, size_t * size)
  {
    return __pthread_attr_getstacksize (attr, size);
  }
d61 3
a63 3
   pthread_attr_setstackaddr(...){};
   pthread_attr_getstackaddr(...){};
 */
d66 29
a94 29
  void pthread_exit (void *value_ptr)
  {
    return __pthread_exit (value_ptr);
  }

  int pthread_join (pthread_t thread, void **return_val)
  {
    return __pthread_join (&thread, (void **) return_val);
  }

  int pthread_detach (pthread_t thread)
  {
    return __pthread_detach (&thread);
  }

  int pthread_suspend (pthread_t thread)
  {
    return __pthread_suspend (&thread);
  }

  int pthread_continue (pthread_t thread)
  {
    return __pthread_continue (&thread);
  }

  unsigned long pthread_getsequence_np (pthread_t * thread)
  {
    return __pthread_getsequence_np (thread);
  }
d97 19
a115 19
  int pthread_key_create (pthread_key_t * key, void (*destructor) (void *))
  {
    return __pthread_key_create (key, destructor);
  }

  int pthread_key_delete (pthread_key_t * key)
  {
    return __pthread_key_delete (key);
  }

  int pthread_setspecific (pthread_key_t key, const void *value)
  {
    return __pthread_setspecific (key, value);
  }

  void *pthread_getspecific (pthread_key_t key)
  {
    return (void *) __pthread_getspecific (key);
  }
d118 10
a127 10
  int pthread_kill (pthread_t * thread, int sig)
  {
    return __pthread_kill (thread, sig);
  }

  int
    pthread_sigmask (int operation, const sigset_t * set, sigset_t * old_set)
  {
    return __pthread_sigmask (operation, set, old_set);
  }
d131 9
a139 9
  pthread_t pthread_self ()
  {
    return __pthread_self ();
  }

  int pthread_equal (pthread_t t1, pthread_t t2)
  {
    return __pthread_equal (&t1, &t2);
  }
d142 26
a167 26
  int
    pthread_mutex_init (pthread_mutex_t * mutex,
			const pthread_mutexattr_t * attr)
  {
    return __pthread_mutex_init (mutex, attr);
  }

  int pthread_mutex_lock (pthread_mutex_t * mutex)
  {
    return __pthread_mutex_lock (mutex);
  }

  int pthread_mutex_trylock (pthread_mutex_t * mutex)
  {
    return __pthread_mutex_trylock (mutex);
  }

  int pthread_mutex_unlock (pthread_mutex_t * mutex)
  {
    return __pthread_mutex_unlock (mutex);
  }

  int pthread_mutex_destroy (pthread_mutex_t * mutex)
  {
    return __pthread_mutex_destroy (mutex);
  }
d171 55
a225 55
  int pthread_cond_destroy (pthread_cond_t * cond)
  {
    return __pthread_cond_destroy (cond);
  }

  int
    pthread_cond_init (pthread_cond_t * cond, const pthread_condattr_t * attr)
  {
    return __pthread_cond_init (cond, attr);
  }

  int pthread_cond_signal (pthread_cond_t * cond)
  {
    return __pthread_cond_signal (cond);
  }

  int pthread_cond_broadcast (pthread_cond_t * cond)
  {
    return __pthread_cond_broadcast (cond);
  }

  int
    pthread_cond_timedwait (pthread_cond_t * cond,
			    pthread_mutex_t * mutex,
			    const struct timespec *abstime)
  {
    return __pthread_cond_timedwait (cond, mutex, abstime);
  }

  int pthread_cond_wait (pthread_cond_t * cond, pthread_mutex_t * mutex)
  {
    return __pthread_cond_wait (cond, mutex);
  }

  int pthread_condattr_init (pthread_condattr_t * condattr)
  {
    return __pthread_condattr_init (condattr);
  }

  int pthread_condattr_destroy (pthread_condattr_t * condattr)
  {
    return __pthread_condattr_destroy (condattr);
  }

  int
    pthread_condattr_getpshared (const pthread_condattr_t * attr,
				 int *pshared)
  {
    return __pthread_condattr_getpshared (attr, pshared);
  }

  int pthread_condattr_setpshared (pthread_condattr_t * attr, int pshared)
  {
    return __pthread_condattr_setpshared (attr, pshared);
  }
d228 24
a251 24
  int sem_init (sem_t * sem, int pshared, unsigned int value)
  {
    return __sem_init (sem, pshared, value);
  }

  int sem_destroy (sem_t * sem)
  {
    return __sem_destroy (sem);
  }

  int sem_wait (sem_t * sem)
  {
    return __sem_wait (sem);
  }

  int sem_trywait (sem_t * sem)
  {
    return __sem_trywait (sem);
  }

  int sem_post (sem_t * sem)
  {
    return __sem_post (sem);
  }
@


1.5
log
@Fix spacing, copyrights.
@
text
@d16 2
a17 1
extern "C" {
d19 39
a57 29
int
pthread_create (pthread_t * thread, const pthread_attr_t * attr, void *(*start_routine) (void *), void *arg)
{
  return __pthread_create (thread, attr, start_routine, arg);
}

int
pthread_attr_init (pthread_attr_t * attr)
{
  return __pthread_attr_init (attr);
}

int
pthread_attr_destroy (pthread_attr_t * attr)
{
  return __pthread_attr_destroy (attr);
}

int
pthread_attr_setstacksize (pthread_attr_t * attr, size_t size)
{
  return __pthread_attr_setstacksize (attr, size);
}

int
pthread_attr_getstacksize (pthread_attr_t * attr, size_t * size)
{
  return __pthread_attr_getstacksize (attr, size);
}
d66 29
a94 35
int
pthread_exit (void * value_ptr)
{
  return __pthread_exit (value_ptr);
}

int
pthread_join (pthread_t thread, void **return_val)
{
  return __pthread_join (&thread, (void **)return_val);
}

int
pthread_detach (pthread_t thread)
{
  return __pthread_detach (&thread);
}

int
pthread_suspend (pthread_t thread)
{
   return __pthread_suspend (&thread);
}

int
pthread_continue (pthread_t thread)
{
   return __pthread_continue (&thread);
}

unsigned long
pthread_getsequence_np (pthread_t * thread)
{
  return __pthread_getsequence_np (thread);
}
d97 19
a115 23
int
pthread_key_create (pthread_key_t * key)
{
  return __pthread_key_create (key);
}

int
pthread_key_delete (pthread_key_t * key)
{
  return __pthread_key_delete (key);
}

int
pthread_setspecific (pthread_key_t * key, const void *value)
{
  return __pthread_setspecific (key, value);
}

void *
pthread_getspecific (pthread_key_t * key)
{
  return (void *) __pthread_getspecific (key);
}
d118 10
a127 11
int
pthread_kill (pthread_t * thread, int sig)
{
  return __pthread_kill (thread, sig);
}

int
pthread_sigmask (int operation, const sigset_t * set, sigset_t * old_set)
{
  return __pthread_sigmask (operation, set, old_set);
}
d131 9
a139 11
pthread_t
pthread_self ()
{
  return __pthread_self ();
}

int
pthread_equal (pthread_t t1, pthread_t t2)
{
  return __pthread_equal (&t1, &t2);
}
d142 26
a167 29
int
pthread_mutex_init (pthread_mutex_t * mutex, const pthread_mutexattr_t * attr)
{
  return __pthread_mutex_init (mutex, attr);
}

int
pthread_mutex_lock (pthread_mutex_t * mutex)
{
  return __pthread_mutex_lock (mutex);
}

int
pthread_mutex_trylock (pthread_mutex_t * mutex)
{
  return __pthread_mutex_trylock (mutex);
}

int
pthread_mutex_unlock (pthread_mutex_t * mutex)
{
  return __pthread_mutex_unlock (mutex);
}

int
pthread_mutex_destroy (pthread_mutex_t * mutex)
{
  return __pthread_mutex_destroy (mutex);
}
d171 55
a225 60
int
pthread_cond_destroy (pthread_cond_t *cond)
{
  return  __pthread_cond_destroy (cond);
}

int
pthread_cond_init (pthread_cond_t *cond, const pthread_condattr_t *attr)
{
  return __pthread_cond_init (cond, attr);
}

int
pthread_cond_signal (pthread_cond_t *cond)
{
  return __pthread_cond_signal (cond);
}

int
pthread_cond_broadcast (pthread_cond_t *cond)
{
  return __pthread_cond_broadcast (cond);
}

int
pthread_cond_timedwait (pthread_cond_t *cond,
	 pthread_mutex_t *mutex, const struct timespec *abstime)
{
  return __pthread_cond_timedwait (cond, mutex, abstime);
}

int
pthread_cond_wait (pthread_cond_t *cond, pthread_mutex_t *mutex)
{
  return __pthread_cond_wait (cond, mutex);
}

int
pthread_condattr_init (pthread_condattr_t *condattr)
{
  return __pthread_condattr_init (condattr);
}

int
pthread_condattr_destroy (pthread_condattr_t *condattr)
{
  return __pthread_condattr_destroy (condattr);
}

int
pthread_condattr_getpshared (const pthread_condattr_t *attr, int *pshared)
{
  return __pthread_condattr_getpshared (attr, pshared);
}

int
pthread_condattr_setpshared (pthread_condattr_t *attr, int pshared)
{
  return __pthread_condattr_setpshared (attr, pshared);
}
d228 24
a251 29
int
sem_init (sem_t * sem, int pshared, unsigned int value)
{
  return __sem_init (sem, pshared, value);
}

int
sem_destroy (sem_t * sem)
{
  return __sem_destroy (sem);
}

int
sem_wait (sem_t * sem)
{
  return __sem_wait (sem);
}

int
sem_trywait (sem_t * sem)
{
  return __sem_trywait (sem);
}

int
sem_post (sem_t * sem)
{
  return __sem_post (sem);
}
@


1.4
log
@* cygwin.din: Export the new functions.
* pthread.cc (pthread_cond_*): Add wrapper functions that call __pthread_cond*
functions.
* thread.cc (__pthread_cond_*): Implement the pthread_cond* functions.
* thread.h: Add new class entries and prototypes for __pthread_cond* functions.
* include/pthread.h: user land header prototypes for pthread_cond* functions
and related defines.
@
text
@d3 1
a3 1
   Copyright 1998 Cygnus Solutions.
d5 1
a5 1
   Written by Marco Fuykschot <marco@@ddi.nl>
d62 1
a62 1
pthread_join(pthread_t thread, void **return_val)
d64 1
a64 1
  return __pthread_join(&thread, (void **)return_val);
d68 1
a68 1
pthread_detach(pthread_t thread)
d70 1
a70 1
  return __pthread_detach(&thread);
d74 1
a74 1
pthread_suspend(pthread_t thread)
d76 1
a76 1
   return __pthread_suspend(&thread);
d80 1
a80 1
pthread_continue(pthread_t thread)
d82 1
a82 1
   return __pthread_continue(&thread);
d177 1
a177 1
pthread_cond_destroy(pthread_cond_t *cond)
d183 1
a183 1
pthread_cond_init(pthread_cond_t *cond, const pthread_condattr_t *attr)
d189 1
a189 1
pthread_cond_signal(pthread_cond_t *cond)
d194 2
a195 1
int pthread_cond_broadcast(pthread_cond_t *cond)
d201 1
a201 1
pthread_cond_timedwait(pthread_cond_t *cond,
d208 1
a208 1
pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex)
d214 1
a214 1
pthread_condattr_init(pthread_condattr_t *condattr)
d220 1
a220 1
pthread_condattr_destroy(pthread_condattr_t *condattr)
d231 2
a232 1
int pthread_condattr_setpshared (pthread_condattr_t *attr, int pshared)
@


1.3
log
@* path.cc (readlink): Check if buffer length is positive.  Truncate output to
buffer length.  Don't terminate buffer with '\0'.
@
text
@d174 61
@


1.2
log
@* winsup.h: Eliminate inclusion of most of the cygwin .h files.  Use .h files
only in sources which require them.
* Makefile.in: Generate dependencies with -MD option.
@
text
@d140 1
a140 1
  return __pthread_equal ( &t1, &t2);
@


1.1
log
@Initial revision
@
text
@d14 1
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
