head	1.12;
access;
symbols
	cygwin-1_7_35-release:1.12
	cygwin-1_7_34-release:1.12
	cygwin-1_7_33-release:1.11.4.1
	cygwin-1_7_32-release:1.11.4.1
	cygwin-1_7_31-release:1.11.4.1
	cygwin-1_7_30-release:1.11
	cygwin-1_7_29-release:1.11
	cygwin-1_7_29-release-branchpoint:1.11.0.4
	cygwin-pre-user-db:1.11
	cygwin-1_7_28-release:1.11
	cygwin-1_7_27-release:1.11
	cygwin-1_7_26-release:1.11
	cygwin-1_7_25-release:1.11
	cygwin-1_7_24-release:1.11
	cygwin-1_7_23-release:1.11
	cygwin-1_7_22-release:1.11
	cygwin-1_7_21-release:1.11
	cygwin-1_7_20-release:1.11
	cygwin-1_7_19-release:1.11
	cygwin-64bit-postmerge:1.11
	cygwin-64bit-premerge-branch:1.11.0.2
	cygwin-64bit-premerge:1.11
	cygwin-1_7_18-release:1.11
	post-ptmalloc3:1.10.18.1
	pre-ptmalloc3:1.10.18.1
	cygwin-1_7_17-release:1.10
	cygwin-64bit-branch:1.10.0.18
	cygwin-1_7_16-release:1.10
	cygwin-1_7_15-release:1.10
	cygwin-1_7_14_2-release:1.10
	cygwin-1_7_14-release:1.10
	cygwin-1_7_12-release:1.10
	cygwin-1_7_11-release:1.10
	cygwin-1_7_10-release:1.10
	signal-rewrite:1.10.0.16
	pre-notty:1.10
	cygwin-1_7_9-release:1.10
	cv-post-1_7_9:1.10.0.14
	cygwin-1_7_8-release:1.10
	cygwin-1_7_7-release:1.10
	cygwin-1_7_5-release:1.10
	cygwin-1_7_4-release:1.10
	cygwin-1_7_3-release:1.10
	cygwin-1_7_2-release:1.10
	fifo_doover3:1.10.0.12
	cygwin-1_7_1-release:1.10
	prefifo:1.10
	cv-branch-2:1.10.0.10
	pre-ripout-set_console_state_for_spawn:1.10
	EOL_registry_mounts:1.10
	preoverlapped:1.10
	drop_9x_support_start:1.10
	cr-0x5f1:1.10.0.8
	cv-branch:1.10.0.6
	pre-ptymaster-archetype:1.10
	cr-0x3b58:1.10.0.4
	cr-0x5ef:1.10.0.2
	after-mmap-privanon-noreserve:1.10
	after-mmap-revamp:1.10
	before-mmap-revamp:1.10
	cgf-more-exit-sync:1.10
	post_wait_sig_exit:1.10
	pre_wait_sig_exit:1.10
	reparent-point:1.9
	noreparent:1.9.0.16
	cr-0x5e6:1.9.0.14
	cr-0x9e:1.9.0.12
	cr-0x9d:1.9.0.10
	cgf-deleteme:1.9.0.8
	pre-sigrewrite:1.9
	corinna-01:1.9
	cr-0x9c:1.9.0.6
	cr-0x9b:1.9.0.4
	cr-0x99:1.9
	Z-emcb-cygwin_daemon:1.9.0.2
	w32api-2_2:1.8
	mingw-runtime-2_4:1.8
	pre-cgf-merge:1.9
	cgf-dev-branch:1.8.0.54
	predaemon:1.8
	cygwin_daemon_merge_HEAD:1.8
	pregp02r1:1.8.0.32
	cygnus_cvs_20020108_pre:1.8
	Z-cygwin_daemon_merge-new_HEAD:1.8
	Z-cygwin_daemon_merge_HEAD:1.8
	cygwin_daemon:1.8.0.2;
locks; strict;
comment	@// @;
expand	@o@;


1.12
date	2014.05.20.10.21.34;	author corinna;	state Exp;
branches;
next	1.11;

1.11
date	2013.01.21.04.38.28;	author cgf;	state Exp;
branches
	1.11.4.1;
next	1.10;

1.10
date	2005.03.01.11.51.29;	author corinna;	state Exp;
branches
	1.10.18.1;
next	1.9;

1.9
date	2003.06.16.03.24.11;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2001.09.19.15.54.12;	author cgf;	state Exp;
branches
	1.8.54.1;
next	1.7;

1.7
date	2001.09.11.20.01.00;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.24.22.26.52;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.03.04.16.35;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.22.03.58.47;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.02.16.28.18;	author dj;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.29.16.24.39;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.11.4.1
date	2014.07.16.09.54.56;	author corinna;	state Exp;
branches;
next	;

1.10.18.1
date	2013.01.21.13.52.10;	author corinna;	state Exp;
branches;
next	;

1.8.54.1
date	2003.07.06.05.10.43;	author cgf;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.12
log
@	* scandir.cc (scandir): Assume namelist is always valid, per POSIX.
	(CID 60021).
	* sec_auth.cc (cygwin_logon_user): Securely erase password copy.
	(lsaprivkeyauth): Avoid trying to dereference data if no key is stored
	in the registry (CID 60122).  Securely erase passwords after usage.
@
text
@/* scandir.cc

   Copyright 1998, 1999, 2000, 2001, 2003, 2005, 2014 Red Hat, Inc.

   Written by Corinna Vinschen <corinna.vinschen@@cityweb.de>

   This file is part of Cygwin.

   This software is a copyrighted work licensed under the terms of the
   Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
   details. */

#include "winsup.h"
#include <dirent.h>
#include <stdlib.h>
#include "cygerrno.h"

extern "C" int
alphasort (const struct dirent **a, const struct dirent **b)
{
  return strcoll ((*a)->d_name, (*b)->d_name);
}

extern "C" int
scandir (const char *dir,
	 struct dirent ***namelist,
	 int (*select) (const struct dirent *),
	 int (*compar) (const struct dirent **, const struct dirent **))
{
  DIR *dirp;
  struct dirent *ent, *etmp, **nl = NULL, **ntmp;
  int count = 0;
  int allocated = 0;
  int err = 0;

  if (!(dirp = opendir (dir)))
    return -1;

  if (!compar)
    compar = alphasort;

  while ((ent = readdir (dirp)))
    {
      if (!select || select (ent))
	{
	  if (count == allocated)
	    {

	      if (allocated == 0)
		allocated = 10;
	      else
		allocated *= 2;

	      ntmp = (struct dirent **) realloc (nl, allocated * sizeof *nl);
	      if (!ntmp)
		{
		  err = ENOMEM;
		  break;
		}
	      nl = ntmp;
	  }

	  if (!(etmp = (struct dirent *) malloc (sizeof *ent)))
	    {
	      err = ENOMEM;
	      break;
	    }
	  *etmp = *ent;
	  nl[count++] = etmp;
	}
    }

  if (err != 0)
    {
      closedir (dirp);
      if (nl)
	{
	  while (count > 0)
	    free (nl[--count]);
	  free (nl);
	}
      /* Ignore errors from closedir() and what not else. */
      set_errno (err);
      return -1;
    }

  closedir (dirp);

  qsort (nl, count, sizeof *nl, (int (*)(const void *, const void *)) compar);
  *namelist = nl;
  return count;
}
@


1.11
log
@Throughout, update copyrights to reflect dates which correspond to main-branch
checkins.  Regularize copyright format.
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001, 2003, 2005 Red Hat, Inc.
d90 1
a90 2
  if (namelist)
    *namelist = nl;
@


1.11.4.1
log
@Add more missing patches
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001, 2003, 2005, 2014 Red Hat, Inc.
d90 2
a91 1
  *namelist = nl;
@


1.10
log
@	* fhandler_clipboard.cc (fhandler_dev_clipboard::write): Never set
	errno to 0.
	(fhandler_dev_clipboard::read): Ditto.
	* fhandler_windows.cc (fhandler_windows::read): Ditto.
	* scandir.cc (scandir): Ditto.
	* syscalls.cc (_fstat64_r): Ditto.
	(_fstat_r): Ditto.
	(_stat64_r): Ditto.
	(_stat_r): Ditto.

	* mmap.cc (mmap64): Fix /dev/zero mapping.
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001 Red Hat, Inc.
@


1.10.18.1
log
@Pull in changes from HEAD
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001, 2003, 2005 Red Hat, Inc.
@


1.9
log
@Throughout, remove "include <errno.h>" from files which already include
cygerrno.h.
* include/cygwin/config.h (__DYNAMIC_REENT__): Define.
* include/cygwin/version.h: Bump API minor version.
* cygwin.din: Export __getreent
* cygerrno.h: Include errno.h.  Fix places where _impure_ptr is used directly
to store the errno value.
* debug.cc (__set_errno): Ditto.
* errno.cc: Remove _RRENT_ONLY define to get errno.cc compiled.
* signal.cc: Rename _reent_clib to _REENT throughout.
* thread.h (reent_clib): Remove prototype.
* thread.cc (reent_clib): Rename reent_clib to __getreent.  Return _impure_ptr
until MTinterface is initialized.
(reent_winsup): Fix a possible SEGV when _r == NULL.  Return NULL instead.
* MTinterface::fixup_after_fork: Switch reent back to _impure_ptr to keep
signal handling running when fork is called from a thread other than the
mainthread.
@
text
@d34 1
a38 2
  int prior_errno = get_errno ();
  set_errno (0);
a45 4

	  /* Ignore error from readdir/select. See POSIX specs. */
	  set_errno (0);

d57 1
a57 1
		  set_errno (ENOMEM);
d65 1
a65 1
	      set_errno (ENOMEM);
d73 1
a73 1
  if ((prior_errno = get_errno ()) != 0)
d83 1
a83 1
      set_errno (prior_errno);
a87 1
  set_errno (prior_errno);
@


1.8
log
@* lib/getopt.c: Use __progname==__argv[0] when not compiling for cygwin.
* scandir.cc (scandir): Use correct default when compar == NULL.
@
text
@a15 1
#include <errno.h>
@


1.8.54.1
log
@merge from trunk
@
text
@d16 1
@


1.7
log
@Update copyrights.
@
text
@d19 7
a25 2
extern "C"
int
d41 2
a100 8

extern "C"
int
alphasort (const struct dirent **a, const struct dirent **b)
{
  return strcoll ((*a)->d_name, (*b)->d_name);
}

@


1.6
log
@forced commit
@
text
@d3 1
a3 1
   Copyright 1998 Cygnus Solutions.
@


1.5
log
@* Makefile.in: Add cygheap.o.
* child_info.h: Add specific exec class.
* cygheap.h: New file.  Contains declarations for cygwin heap.
* cygheap.cc: New file.  Implements cygwin heap functions.
* dcrt0.cc (quoted): Simplify due to new method for passing arguments between
cygwin programs.
(alloc_stack_hard_way): Attempt to handle overlapped stack.
(dll_crt0_1): Move child_info processing here.  Accomodate new method for
passing arguments between cygwin programs.  Initialize cygwin heap.  Establish
__argc and __argv variables.
(_dll_crt0): Move most of child_info processing to dll_crt0_1.
(cygwin_dll_init): Remove duplication.
* dtable.cc (dtable::extend): Allocate dtable using cygwin heap.
(dtable::build_fhandler): Ditto for fhandler type being constructed.
(dtable::dup_worker): Free new fhandler from cygwin heap on error.
(dtable::select_*): Don't assume that this == fdtab.
(dtable::linearize_fd_array): Delete.
(dtable::delinearize_fd_array): Delete.
(dtable::fixup_after_exec): New file.
(dtable::vfork_child_dup): Use cygwin heap.
(dtable::vfork_parent_restore): Ditto.
* dtable.h: Remove obsolete methods.  Add new method.
* environ.cc (posify): Eliminate already_posix parameter and logic.
(envsize): New function.
(_addenv): Use envsize.
(environ_init): Accept an argument pointing to an existing environment list.
If supplied, allocate space for this in the the program's heap.
* fhandler.cc (fhandler_base::operator =): Move here from fhandler.h.  Use
cygwin heap to allocate filenames.
(fhandler_base::set_name): Allocate/free names from cygwin heap.
(fhandler_base::linearize): Delete.
(fhandler_base::de_linearize): Delete.
(fhandler_base::operator delete): Free from cygwin heap.
(fhandler_base::~fhandler_base): Ditto.
* fhandler.h: Accomodate elimination of *linearize and other changes above.
* fhandler_console.cc (fhandler_console::fixup_after_exec): Rename from
de_linearize.
* heap.h: New file.
* fhandler_tty.cc (fhandler_tty_slave::fhandler_tty_slave): Use cygwin heap for
name.  fhandler_tty::fixup_after_exec): Rename from de_linearize.
* fork.cc (fork): Call cygheap_fixup_in_child.
* heap.cc: Use declarations in heap.h.
* malloc.cc: Sprinkle assertions throughout to catch attempts to free/realloc
something from the cygwin heap.
* path.cc: Throughout, eliminate use of per-thread cache for cwd.  Use cwd_*
functions rather than cwd_* variables to access cwd_win32 and cwd_posix.
(cwd_win32): New function.
(cwd_posix): New function.
(cwd_hash): New function.
(cwd_fixup_after_exec): New function.
* path.h: Accomodate path.cc changes.
* pinfo.cc (pinfo_init): Accept a pointer to an environment table.  Pass this
to environ_init.  Eliminate old 'title' tests.
* pinfo.h: Accomodate above change in argument.
* spawn.cc (struct av): New method for building argv list.
(av::unshift): New method.
(spawn_guts): Allocate everything that the child process needs in the cygwin
heap and pass a pointer to this to the child.  Build argv list using new
method.  Eliminate delinearize stuff.
* thread.h: Eliminate _cwd_win32 and _cwd_posix buffers.
* winsup.h: Eliminate obsolete functions.  Add envsize() declaration.
@
text
@@


1.4
log
@* cygerrno.h: New file.  Use this throughout whenever errno manipulation is
required.
* errno.cc: Use DWORD to hold Windows errors.
(geterrno_from_win_error): New function.
(seterrno_from_win_error): Use geterrno_from_win_error to convert supplied
windows error (suggested by Corinna Vinschen).
* path.cc (symlink_info): Add error element.
* path.cc (path_conv::check): Remove errno setting.  Use new symlink_info errno
element to set path_conv error, where appropriate.
(symlink_info::check): Set error element rather than attempting to manipulate
errno.  Add more checks for trailing / and /..  even though they are currently
useless.  Avoid setting EINVAL.
* path.cc (normalize_posix_path): Correct check for trailing /.
@
text
@d76 5
a80 5
        {
          while (count > 0)
            free (nl[--count]);
          free (nl);
        }
@


1.3
log
@* winsup.h: take out protections of environ, errno, allow C use
* *.cc: put winsup.h before other headers (for __INSIDE_CYGWIN__);
use cur_environ() instead of just environ
* times.cc: remove import protections
* glob.c: add winsup.h
* localtime.c: ditto
* smallprint.c: ditto
* Makefile.in: don't __INSIDE_CYGWIN__ as it messes up profiling.
@
text
@d17 1
@


1.2
log
@* include/cygwin/version.h: Bump DLL minor version number to 5 due to all of
the changes below.  Redefine process structure to avoid a fixed size table.
Redefine pinfo/_pinfo classes.  Use these throughout.
* dcrt0.cc (dll_crt0_1): Accomodate set_myself argument change.
(__api_fatal): Accomodate _pinfo::record_death argument change.
* exceptions.cc (really_exit): Ditto.
(sig_handle_tty_stop): Use pinfo constructor to access process info.
(events_init): Don't create pinfo_mutex since it is no longer required.
* external.cc (fillout_pinfo): Use winpids class to iterate over all system
pids.
(cygwin_internal): lock_pinfo_for_update and unlock_pinfo are now noops.
* fhandler_termios.cc (fhandler_termios::set_ctty): Use pinfo constructor to
access process info.
* fork.cc (fork): Reorganize to initialize child info after the child has
started since that is when we know the child's winpid, which is necessary to
allocate the pinfo shared memory.
* mmap.cc (recreate_mmaps_after_fork): Change arg type to _pinfo.
* pinfo.cc: Rename pinfo methods to _pinfo throughout.  Eliminate pinfo_list
stuff.
(set_myself): Accept a pid argument now.  Call pinfo initializer to initialize
myself.  Detect when this is an "execed" process and create an "indirect" pid
block.
(pinfo_init): Accomodate set_myself arg change.
(procinfo): Remove.
(pinfo::lock_pinfo): Remove.
(pinfo::unlock_pinfo): Remove.
(pinfo::init): New method.  Allocates shared memory space for process pinfo
structure.
(pinfo::record_death): Don't call locking functions.
(cygwin_winpid_to_pid): Simplify by using new pinfo constructor.
(EnumProcessesW95): New function for iterating over processes on Windows 95.
(winpids::winpids): New constructor for winpids class.  Sets up a list of
process ids.
(enum_init): Initialize w95/wnt pid enumerators.
* shared.cc (shared-info::initialize): Remove pid initialization.
* shared.h: Move pinfo stuff into pinfo.h.
(class shared_info): Remove pinfo_list element.
* signal.cc (kill_worker): Use pinfo constructor to access process info.
(kill_pgrp): Ditto.  Use winpids methods to access list of processes.
* sigproc.cc: Throughout, modify to use _pinfo where appropriate.
(proc_exists (pid_t)): New function.  Determines if a process exists based on
the pid.
(proc_exists (_pinfo *p): Use new proc_exists function above.
(proc_subproc): Copy pinfo stuff around rather than _pinfo pointers.  Try to be
careful about releasing shared memory when we don't need it anymore.  Remove
pinfo locks.
(remove_zombies): Remove pinfo memory when zombie is going away.
* sigproc.h: Reflect _pinfo/pinfo changes in sigproc.cc.
* spawn.cc (spawn_guts): Eliminate pinfo *child argument.  Reorganize to only
initialize child pinfo after process has been started and we know the windows
pid.
(_spawnve): Reflect spawn_guts changes.
* syscalls.cc (setpgid): Use pinfo constructor to access process info.
(getpgid): Ditto.
(internal_getlogin): Use _pinfo.
* winsup.h: Eliminate pinfo_mutex.  Eliminate spawn_guts declaration since it
is static now.  Reflect set_myself argument change.
* include/sys/cygwin.h: Add some PID_* enums to accomodate new pinfo stuff.
* include/cygwin/version.h: Update minor version for cygdrive changes below.
@
text
@d13 1
a16 1
#include "winsup.h"
@


1.1
log
@Initial revision
@
text
@a14 1
#include <string.h>
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
