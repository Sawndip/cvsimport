head	1.5;
access;
symbols
	cygwin-1_7_35-release:1.5
	cygwin-1_7_34-release:1.5
	cygwin-1_7_33-release:1.3.2.2
	cygwin-1_7_32-release:1.3.2.2
	cygwin-1_7_31-release:1.3.2.2
	cygwin-1_7_30-release:1.3.2.2
	cygwin-1_7_29-release:1.3.2.1
	cygwin-1_7_29-release-branchpoint:1.3.0.2
	cygwin-pre-user-db:1.3
	cygwin-1_7_28-release:1.3
	cygwin-1_7_27-release:1.3
	cygwin-1_7_26-release:1.3
	cygwin-1_7_25-release:1.3
	cygwin-1_7_24-release:1.3
	cygwin-1_7_23-release:1.3
	cygwin-1_7_22-release:1.3
	cygwin-1_7_21-release:1.3
	cygwin-1_7_20-release:1.2
	cygwin-1_7_19-release:1.2
	cygwin-64bit-postmerge:1.2
	post-ptmalloc3:1.1.2.10
	pre-ptmalloc3:1.1.2.10
	cygwin-64bit-branch:1.1.0.2;
locks; strict;
comment	@# @;


1.5
date	2014.04.08.14.13.59;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2014.02.11.06.27.57;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2013.07.10.12.15.32;	author corinna;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2013.04.23.09.44.31;	author corinna;	state Exp;
branches;
next	1.1;

1.1
date	2012.12.03.13.33.03;	author corinna;	state dead;
branches
	1.1.2.1;
next	;

1.3.2.1
date	2014.02.21.21.34.16;	author cgf;	state Exp;
branches;
next	1.3.2.2;

1.3.2.2
date	2014.05.19.11.47.53;	author corinna;	state Exp;
branches;
next	;

1.1.2.1
date	2012.12.03.13.33.03;	author corinna;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2012.12.13.12.55.12;	author corinna;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2012.12.14.09.04.56;	author corinna;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2013.01.17.17.25.14;	author corinna;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2013.01.22.17.40.52;	author corinna;	state Exp;
branches;
next	1.1.2.6;

1.1.2.6
date	2013.01.25.17.07.42;	author corinna;	state Exp;
branches;
next	1.1.2.7;

1.1.2.7
date	2013.01.29.13.02.20;	author corinna;	state Exp;
branches;
next	1.1.2.8;

1.1.2.8
date	2013.02.09.20.37.59;	author corinna;	state Exp;
branches;
next	1.1.2.9;

1.1.2.9
date	2013.02.15.13.36.36;	author corinna;	state Exp;
branches;
next	1.1.2.10;

1.1.2.10
date	2013.02.17.14.17.38;	author corinna;	state Exp;
branches;
next	1.1.2.11;

1.1.2.11
date	2013.03.18.12.05.51;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.5
log
@	* cygwin.sc.in: (Temporarily?) workaround serious ld bug which
	truncates symbols in certain computations to 32 bit.  See
	https://sourceware.org/bugzilla/show_bug.cgi?id=16821
@
text
@#ifdef __x86_64__
OUTPUT_FORMAT(pei-x86-64)
SEARCH_DIR("/usr/x86_64-pc-cygwin/lib/w32api"); SEARCH_DIR("=/usr/lib/w32api");
#else
#undef i386
OUTPUT_FORMAT(pei-i386)
SEARCH_DIR("/usr/i686-pc-cygwin/lib/w32api"); SEARCH_DIR("=/usr/lib/w32api");
#endif
#define __CONCAT1(a,b)	a##b
#define __CONCAT(a,b) __CONCAT1(a,b)
#define _SYM(x)	__CONCAT(__USER_LABEL_PREFIX__, x)
SECTIONS
{
  .text  __image_base__ + __section_alignment__  :
  {
     *(.init)
    *(.text)
    *(.text.*)
    *(SORT(.text$*))
    *(.glue_7t)
    *(.glue_7)
#ifdef __x86_64__
    . = ALIGN(8);
     ___CTOR_LIST__ = .; __CTOR_LIST__ = .;
			LONG (-1); LONG (-1); *(SORT(.ctors.*)); *(.ctors); *(.ctor); LONG (0); LONG (0);
     ___DTOR_LIST__ = .; __DTOR_LIST__ = .;
			LONG (-1); LONG (-1); *(SORT(.dtors.*)); *(.dtors); *(.dtor);  LONG (0); LONG (0);
#else
     ___CTOR_LIST__ = .; __CTOR_LIST__ = .;
			LONG (-1); *(SORT(.ctors.*)); *(.ctors); *(.ctor); LONG (0);
     ___DTOR_LIST__ = .; __DTOR_LIST__ = .;
			LONG (-1); *(SORT(.dtors.*)); *(.dtors); *(.dtor);  LONG (0);
#endif
     *(.fini)
    /* ??? Why is .gcc_exc here?  */
     *(.gcc_exc)
     etext = .;
    *(.gcc_except_table)
  }
  .autoload_text ALIGN(__section_alignment__) :
  {
    *(.*_autoload_text);
  }
  /* The Cygwin DLL uses a section to avoid copying certain data
     on fork.  This used to be named ".data$nocopy".  The linker used
     to include this between __data_start__ and __data_end__, but that
     breaks building the cygwin dll.  Instead, we name the section
     ".data_cygwin_nocopy" and explicitly include it after __data_end__. */
  .data ALIGN(__section_alignment__) :
  {
    __data_start__ = .;
    *(.data)
    *(.data2)
    *(SORT(.data$*))
    __data_end__ = .;
    *(.data_cygwin_nocopy)
  }
  .rdata ALIGN(__section_alignment__) :
  {
    *(.rdata)
    *(SORT(.rdata$*))
    *(.rdata_cygwin_nocopy)
    ___RUNTIME_PSEUDO_RELOC_LIST__ = .;
    __RUNTIME_PSEUDO_RELOC_LIST__ = .;
    *(.rdata_runtime_pseudo_reloc)
    ___RUNTIME_PSEUDO_RELOC_LIST_END__ = .;
    __RUNTIME_PSEUDO_RELOC_LIST_END__ = .;
  }
  .eh_frame ALIGN(__section_alignment__) :
  {
    *(.eh_frame*)
  }
  .pdata ALIGN(__section_alignment__) :
  {
    *(.pdata*)
  }
#ifdef __x86_64__
  .xdata ALIGN(__section_alignment__) :
  {
    *(.xdata*)
  }
#endif
  .bss ALIGN(__section_alignment__) :
  {
    __bss_start__ = .;
    *(.bss)
    *(COMMON)
    __bss_end__ = .;
  }
  .edata ALIGN(__section_alignment__) :
  {
    *(.edata)
  }
  .reloc BLOCK(__section_alignment__) :
  {
    *(.reloc)
  }
  .cygwin_dll_common ALIGN(__section_alignment__):
  {
    *(.cygwin_dll_common)
  }
  .idata ALIGN(__section_alignment__) :
  {
    /* This cannot currently be handled with grouped sections.
	See pe.em:sort_sections.  */
    SORT(*)(.idata$2)
    SORT(*)(.idata$3)
    /* These zeroes mark the end of the import list.  */
    LONG (0); LONG (0); LONG (0); LONG (0); LONG (0);
    SORT(*)(.idata$4)
    SORT(*)(.idata$5)
    SORT(*)(.idata$6)
    SORT(*)(.idata$7)
    . = ALIGN(16);
  }
  .gnu_debuglink_overlay ALIGN(__section_alignment__) (NOLOAD):
  {
    BYTE(0)	/* c */
    BYTE(0)	/* y */
    BYTE(0)	/* g */
    BYTE(0)	/* w */
    BYTE(0)	/* i */
    BYTE(0)	/* n */
    BYTE(0)	/* 1 */
    BYTE(0)	/* . */
    BYTE(0)	/* d */
    BYTE(0)	/* b */
    BYTE(0)	/* g */
    BYTE(0)	/* \0 */
    LONG(0)	/* checksum */
  }
  .rsrc BLOCK(__section_alignment__) :
  {
    *(.rsrc)
    *(SORT(.rsrc$*))
    _SYM (_cygheap_start) = .;
  }
  .cygheap ALIGN(__section_alignment__) :
  {
#ifdef __x86_64__
    . = . + (3072 * 1024);
#else
    . = . + (2048 * 1024);
#endif
    . = ALIGN(0x10000);
    _SYM (_cygheap_end) = .;
  }
  /DISCARD/ :
  {
    *(.debug$S)
    *(.debug$T)
    *(.debug$F)
    *(.drectve)
  }
  .stab ALIGN(__section_alignment__) (NOLOAD) :
  {
    *(.stab)
  }
  .stabstr ALIGN(__section_alignment__) (NOLOAD) :
  {
    *(.stabstr)
  }
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_aranges) }
  .debug_pubnames ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_pubnames) }
  .debug_pubtypes ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_pubtypes) }
  /* DWARF 2 */
  .debug_info     ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_info) }
  .debug_abbrev   ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_abbrev) }
  .debug_line     ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_line) }
  .debug_frame    ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_frame) }
  .debug_str      ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_str) }
  .debug_loc      ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_loc) }
  .debug_macinfo  ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_macinfo) }
  /* SGI/MIPS DWARF 2 extensions. */
  .debug_weaknames ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_weaknames) }
  .debug_funcnames ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_funcnames) }
  .debug_typenames ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_typenames) }
  .debug_varnames  ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_varnames) }
  .debug_macro    ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_macro) }
  /* DWARF 3. */
  .debug_ranges   ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_ranges) }
  /* DWARF 4. */
  .debug_types	  ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_types .gnu.linkonce.wt.*) }
}
@


1.4
log
@* winsup.h (Interlocked*): Use intrinsic versions of Interlocked functions.
* cygwin.sc.in: More closely emulate default pe/i386 linker script.
@
text
@d63 2
a64 1
    __rt_psrelocs_start = .;
d66 2
a67 2
    __rt_psrelocs_end = .;

a68 5
  __rt_psrelocs_size = __rt_psrelocs_end - __rt_psrelocs_start;
  ___RUNTIME_PSEUDO_RELOC_LIST_END__ = .;
  __RUNTIME_PSEUDO_RELOC_LIST_END__ = .;
  ___RUNTIME_PSEUDO_RELOC_LIST__ = . - __rt_psrelocs_size;
  __RUNTIME_PSEUDO_RELOC_LIST__ = . - __rt_psrelocs_size;
d136 1
a136 1
    _SYM (_cygheap_start) = ABSOLUTE(.);
d146 1
a146 1
    _SYM (_cygheap_end) = ABSOLUTE(.);
@


1.3
log
@	* cygwin.sc.in (.text.*): Fold into .text on all platforms.
	(.eh_frame): Add section.
	* environ.cc (my_findenv): Drop __stdcall attribute.
	(getearly): Ditto.
	(findenv_func): Drop cast.
@
text
@a61 1
    *(.eh_frame)
d63 10
a72 1
  }
a97 5
  .rsrc BLOCK(__section_alignment__) :
  {
    *(.rsrc)
    *(SORT(.rsrc$*))
  }
d106 14
d136 1
a136 1
  .idata ALIGN(__section_alignment__) :
d138 2
a139 11
    /* This cannot currently be handled with grouped sections.
	See pe.em:sort_sections.  */
    SORT(*)(.idata$2)
    SORT(*)(.idata$3)
    /* These zeroes mark the end of the import list.  */
    LONG (0); LONG (0); LONG (0); LONG (0); LONG (0);
    SORT(*)(.idata$4)
    SORT(*)(.idata$5)
    SORT(*)(.idata$6)
    SORT(*)(.idata$7)
    . = ALIGN(16);
@


1.3.2.1
log
@* cygwin.sc.in: More closely emulate default pe/i386 linker script.
@
text
@d62 1
d64 1
a64 10
    __rt_psrelocs_start = .;
    *(.rdata_runtime_pseudo_reloc)
    __rt_psrelocs_end = .;

  }
  __rt_psrelocs_size = __rt_psrelocs_end - __rt_psrelocs_start;
  ___RUNTIME_PSEUDO_RELOC_LIST_END__ = .;
  __RUNTIME_PSEUDO_RELOC_LIST_END__ = .;
  ___RUNTIME_PSEUDO_RELOC_LIST__ = . - __rt_psrelocs_size;
  __RUNTIME_PSEUDO_RELOC_LIST__ = . - __rt_psrelocs_size;
d90 5
a102 14
  .idata ALIGN(__section_alignment__) :
  {
    /* This cannot currently be handled with grouped sections.
	See pe.em:sort_sections.  */
    SORT(*)(.idata$2)
    SORT(*)(.idata$3)
    /* These zeroes mark the end of the import list.  */
    LONG (0); LONG (0); LONG (0); LONG (0); LONG (0);
    SORT(*)(.idata$4)
    SORT(*)(.idata$5)
    SORT(*)(.idata$6)
    SORT(*)(.idata$7)
    . = ALIGN(16);
  }
d119 1
a119 1
  .rsrc BLOCK(__section_alignment__) :
d121 11
a131 2
    *(.rsrc)
    *(SORT(.rsrc$*))
@


1.3.2.2
log
@2014-05-19  Corinna Vinschen  <corinna@@vinschen.de>

	* exceptions.cc (try_to_debug): Fix size of dbg_cmd (CID 59929).

2014-05-18  David Stacey  <drstacey@@tiscali.co.uk>

	* syscalls.cc (getusershell): Fix buffer overrun (Coverity ID 59932).

2014-05-13  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_socket.cc (fhandler_socket::ioctl): Handle the different
	ideas of u_long between Winsock and Cygwin applications on x86_64.
	Add long comment.

2014-05-09  Christopher Faylor  <me.cygwin2014@@cgf.cx>

	* signal.cc (sigprocmask): Fix strace output to include "how".

	* fhandler_console.cc (dev_console::save_restore): Only save current
	dwEnd line rather than the one after that.

2014-05-05  Corinna Vinschen  <corinna@@vinschen.de>

	* net.cc (cygwin_getsockopt): Rearrange code slightly and handle
	TCP_NODELAY just like SO_KEEPALIVE and SO_DONTROUTE.

2014-05-03  Christopher Faylor  <me.cygwin2014@@cgf.cx>

	* spawn.cc (av::setup): Eat trailing whitespace on #! script.

2014-05-02  Christopher Faylor  <me.cygwin2014@@cgf.cx>

	* fhandler_dsp.cc (ioctl): Use _ioctl for recursive call.

2014-04-26  Christopher Faylor  <me.cygwin2014@@cgf.cx>

	* DevNotes: Add entry cgf-000026.
	* fhandler.h (fhandler_console::save_top): Save top of screen
	coordinates.
	* fhandler_console.cc (dev::save_restore): Record top of screen
	coordinates.  Clear entire buffer when restoring saved buffer and try
	to position the cursor on the save relative place on the screen.

2014-04-25  Corinna Vinschen  <corinna@@vinschen.de>

	* syscalls.cc (NT_TRANSACTIONAL_ERROR): Cover all status codes up to
	STATUS_TRANSACTION_NOT_ENLISTED.

2014-04-24  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_socket.cc: On x86_64, define u_long as __ms_u_long before
	including the windows headers.  Explain why.
	(get_inet_addr): Convert ANY address to LOOPBACK address.  Explain why.
	(fhandler_socket::evaluate_events): Forcibly set SO_ERROR socket option
	in case a connection attempt failed.  Explain why.
	(fhandler_socket::ioctl): Drop x86_64 re-definition of u_long here.
	* fhandler_procnet.cc: On x86_64, define u_long as __ms_u_long before
	including the windows headers.  Explain why.
	* net.cc: Ditto.

2014-04-23  Corinna Vinschen  <corinna@@vinschen.de>

	* miscfuncs.cc (check_iovec): Allow 0 as valid iovcnt value.

2014-04-18  Corinna Vinschen  <corinna@@vinschen.de>

	* winf.cc (linebuf::fromargv): Temporarily revert patch from 2014-01-24.

2014-04-16  Corinna Vinschen  <corinna@@vinschen.de>

	* net.cc (cygwin_setsockopt): Ignore IPV6_TCLASS the same way as IP_TOS.

2014-04-08  Corinna Vinschen  <corinna@@vinschen.de>

	* cygwin.sc.in: (Temporarily?) workaround serious ld bug which
	truncates symbols in certain computations to 32 bit.  See
	https://sourceware.org/bugzilla/show_bug.cgi?id=16821

2014-04-09  Corinna Vinschen  <corinna@@vinschen.de>

	* exceptions.cc (exception::myfault_handle): Only handle the minimum
	amount of exceptions the myfault handler was designed for.
@
text
@d63 1
a63 2
    ___RUNTIME_PSEUDO_RELOC_LIST__ = .;
    __RUNTIME_PSEUDO_RELOC_LIST__ = .;
d65 2
a66 2
    ___RUNTIME_PSEUDO_RELOC_LIST_END__ = .;
    __RUNTIME_PSEUDO_RELOC_LIST_END__ = .;
d68 5
d140 1
a140 1
    _SYM (_cygheap_start) = .;
d150 1
a150 1
    _SYM (_cygheap_end) = .;
@


1.2
log
@	* Merge in cygwin-64bit-branch.
@
text
@a17 1
#ifdef __x86_64__
a18 1
#endif
d65 4
@


1.1
log
@file cygwin.sc.in was initially added on branch cygwin-64bit-branch.
@
text
@d1 179
@


1.1.2.1
log
@	* Makefile.in: Add rule to build cygwin.sc dynamically using the
	target compiler.
	* cygwin.sc.in: Rename from cygwin.sc.  Make OUTPUT_FORMAT and
	SEARCH_DIR dependent on target CPU.  Add extra alignment and .xdata
	section on x86_64.  Keep up with latest dwarf debug section changes.
@
text
@a0 163
#ifdef __x86_64__
OUTPUT_FORMAT(pei-x86_64)
SEARCH_DIR("/usr/lib64"); SEARCH_DIR("=/usr/lib64/w32api");
#else
#undef i386
OUTPUT_FORMAT(pei-i386)
SEARCH_DIR("/usr/i686-pc-cygwin/lib/w32api"); SEARCH_DIR("=/usr/lib/w32api");
#endif
SECTIONS
{
  .text  __image_base__ + __section_alignment__  :
  {
     *(.init)
    *(.text)
    *(SORT(.text$*))
    *(.glue_7t)
    *(.glue_7)
#ifdef __x86_64__
    . = ALIGN(8);
#endif
     ___CTOR_LIST__ = .; __CTOR_LIST__ = .;
			LONG (-1); *(SORT(.ctors.*)); *(.ctors); *(.ctor); LONG (0);
     ___DTOR_LIST__ = .; __DTOR_LIST__ = .;
			LONG (-1); *(SORT(.dtors.*)); *(.dtors); *(.dtor);  LONG (0);
     *(.fini)
    /* ??? Why is .gcc_exc here?  */
     *(.gcc_exc)
     etext = .;
    *(.gcc_except_table)
  }
  .autoload_text ALIGN(__section_alignment__) :
  {
    *(.*_autoload_text);
  }
  /* The Cygwin DLL uses a section to avoid copying certain data
     on fork.  This used to be named ".data".  The linker used
     to include this between __data_start__ and __data_end__, but that
     breaks building the cygwin dll.  Instead, we name the section
     ".data_cygwin_nocopy" and explicitly include it after __data_end__. */
  .data ALIGN(__section_alignment__) :
  {
    __data_start__ = .;
    *(.data)
    *(.data2)
    *(SORT(.data$*))
    __data_end__ = .;
    *(.data_cygwin_nocopy)
  }
  .rdata ALIGN(__section_alignment__) :
  {
    *(.rdata)
    *(SORT(.rdata$*))
    *(.eh_frame)
  }
  .pdata ALIGN(__section_alignment__) :
  {
    *(.pdata)
  }
#ifdef __x86_64__
  .xdata ALIGN(__section_alignment__) :
  {
    *(.xdata)
  }
#endif
  .bss ALIGN(__section_alignment__) :
  {
    __bss_start__ = .;
    *(.bss)
    *(COMMON)
    __bss_end__ = .;
  }
  .edata ALIGN(__section_alignment__) :
  {
    *(.edata)
  }
  .rsrc BLOCK(__section_alignment__) :
  {
    *(.rsrc)
    *(SORT(.rsrc$*))
  }
  .reloc BLOCK(__section_alignment__) :
  {
    *(.reloc)
  }
  .cygwin_dll_common ALIGN(__section_alignment__):
  {
    *(.cygwin_dll_common)
  }
  .gnu_debuglink_overlay ALIGN(__section_alignment__) (NOLOAD):
  {
    BYTE(0)	/* c */
    BYTE(0)	/* y */
    BYTE(0)	/* g */
    BYTE(0)	/* w */
    BYTE(0)	/* i */
    BYTE(0)	/* n */
    BYTE(0)	/* 1 */
    BYTE(0)	/* . */
    BYTE(0)	/* d */
    BYTE(0)	/* b */
    BYTE(0)	/* g */
    BYTE(0)	/* \0 */
    LONG(0)	/* checksum */
  }
  .idata ALIGN(__section_alignment__) :
  {
    /* This cannot currently be handled with grouped sections.
	See pe.em:sort_sections.  */
    SORT(*)(.idata$2)
    SORT(*)(.idata$3)
    /* These zeroes mark the end of the import list.  */
    LONG (0); LONG (0); LONG (0); LONG (0); LONG (0);
    SORT(*)(.idata$4)
    SORT(*)(.idata$5)
    SORT(*)(.idata$6)
    SORT(*)(.idata$7)
    . = ALIGN(16);
    __cygheap_start = ABSOLUTE(.);
  }
  .cygheap ALIGN(__section_alignment__) :
  {
    . = . + (2048 * 1024);
    . = ALIGN(0x10000);
    __cygheap_end = ABSOLUTE(.);
  }
  /DISCARD/ :
  {
    *(.debug$S)
    *(.debug$T)
    *(.debug$F)
    *(.drectve)
  }
  .stab ALIGN(__section_alignment__) (NOLOAD) :
  {
    *(.stab)
  }
  .stabstr ALIGN(__section_alignment__) (NOLOAD) :
  {
    *(.stabstr)
  }
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_aranges) }
  .debug_pubnames ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_pubnames) }
  .debug_pubtypes ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_pubtypes) }
  /* DWARF 2 */
  .debug_info     ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_info) }
  .debug_abbrev   ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_abbrev) }
  .debug_line     ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_line) }
  .debug_frame    ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_frame) }
  .debug_str      ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_str) }
  .debug_loc      ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_loc) }
  .debug_macinfo  ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_macinfo) }
  /* SGI/MIPS DWARF 2 extensions. */
  .debug_weaknames ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_weaknames) }
  .debug_funcnames ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_funcnames) }
  .debug_typenames ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_typenames) }
  .debug_varnames  ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_varnames) }
  .debug_macro    ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_macro) }
  /* DWARF 3. */
  .debug_ranges   ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_ranges) }
  /* DWARF 4. */
  .debug_types	  ALIGN(__section_alignment__) (NOLOAD) : { *(.debug_types .gnu.linkonce.wt.*) }
}
@


1.1.2.2
log
@	* cygwin.sc.in (OUTPUT_FORMAT): Fix typo in 64 bit code.
	* spawn.cc (av::fixup): Drop '!!' to keep argument to set_cygexec a
	void *.
@
text
@d2 1
a2 1
OUTPUT_FORMAT(pei-x86-64)
@


1.1.2.3
log
@	* cygwin.sc.in (.gnu_debuglink_overlay): Accommodate longer dbg file
	name on 64 bit.
@
text
@a93 4
#ifdef __x86_64__
    BYTE(0)	/* 6 */
    BYTE(0)	/* 4 */
#endif
@


1.1.2.4
log
@	* child_info.h (spawn_info): Define asm symbol without leading
	underscore for x86_64.
	(fork_info): Ditto.
	* cygwin.sc.in (__CONCAT1): Define.
	(__CONCAT): Define.
	(_SYM): Define.
	(_data_start__): Define using _SYM macro to accommodate multiple
	platforms.
	(_data_end__): Ditto.
	(_bss_start__): Ditto.
	(_bss_end__): Ditto.
	(_cygheap_start): Ditto.
	(_cygheap_end): Ditto.
@
text
@a8 3
#define __CONCAT1(a,b)	a##b
#define __CONCAT(a,b) __CONCAT1(a,b)
#define _SYM(x)	__CONCAT(__USER_LABEL_PREFIX__, x)
d42 1
a42 1
    _SYM (_data_start__) = .;
d46 1
a46 1
    _SYM (_data_end__) = .;
d67 1
a67 1
    _SYM (_bss_start__) = .;
d70 1
a70 1
    _SYM (_bss_end__) = .;
d122 1
a122 1
    _SYM (_cygheap_start) = ABSOLUTE(.);
d128 1
a128 1
    _SYM (_cygheap_end) = ABSOLUTE(.);
@


1.1.2.5
log
@	* Makefile.in (speclib): Exclude main symbol.
	(NEW_FUNCTIONS): Set to empty for x86_64.
	($(DEF_FILE)): Call gendef with target_alias as additional parameter.
	* configure.ac (DLL_ENTRY): Drop leading underscore for x86_64.
	* configure: Regenerate.
	* cygwin.sc.in: Drop _SYM usage for __data_start__, __data_end__,
	__bss_start__, and __bss_end__.
	* cygwin64.din: Remove all fast-call math function entry points.
	(_alloca): Define as __alloca.
	(_dll_crt0): Drop 32 bit stdcall specifier.
	(dll_entry): Ditto.
	(dll_noncygwin_dllcrt0): Remove.
	(getpwduid): Remove.
	(lacl): Remove.
	* dcrt0.cc (dll_data_start): Define for x86_64.
	(dll_data_end): Ditto.
	(dll_bss_start): Ditto.
	(dll_bss_end): Ditto.
	* gendef: Handle new target argument.  Handle 64 bit target.
	Add preliminiary empty function definitions for 64 bit to allow linking.
	* winsup.h: Define linker data and bss section symbols with
	additional underscore for x86_64.
	* lib/_cygwin_crt0_common.cc (__image_base__): Define for 64 bit and
	map to _image_base__ via macro.
	(_cygwin_crt0_common): Fix setting data and bss section borders on
	x86_64.
@
text
@d45 1
a45 1
    __data_start__ = .;
d49 1
a49 1
    __data_end__ = .;
d70 1
a70 1
    __bss_start__ = .;
d73 1
a73 1
    __bss_end__ = .;
@


1.1.2.6
log
@	* cygwin.sc.in: Accommodate extra .text, .pdata, and .xdata section on 64 bit.
	* cygwin64.din: Set BASE to 0x200040000 to start shared sections at 0x200000000.
	* gendef: Second cut 64 bit assembler functionality, still untested.
@
text
@a17 3
#ifdef __x86_64__
    *(.text.*)
#endif
d60 1
a60 1
    *(.pdata*)
d65 1
a65 1
    *(.xdata*)
@


1.1.2.7
log
@	* cygwin.sc.in: Fix ctors and dtors filler and zero-terminator for
	64 bit.
@
text
@d26 1
a26 5
     ___CTOR_LIST__ = .; __CTOR_LIST__ = .;
			LONG (-1); LONG (-1); *(SORT(.ctors.*)); *(.ctors); *(.ctor); LONG (0); LONG (0);
     ___DTOR_LIST__ = .; __DTOR_LIST__ = .;
			LONG (-1); LONG (-1); *(SORT(.dtors.*)); *(.dtors); *(.dtor);  LONG (0); LONG (0);
#else
a30 1
#endif
@


1.1.2.8
log
@	* cygwin.sc.in (.rdata): Add .rdata_cygwin_nocopy subsection.
	(.cygheap): Raise size to 3 Megs on x86_64.
	* dcrt0.cc (dll_crt0_0): Drop call to init_global_security.
	* dtable.cc (std_consts): Drop NO_COPY.
	* errno.cc (errmap): Drop NO_COPY, constify instead.
	(_sys_errlist): Drop NO_COPY.
	* fhandler_clipboard.cc (CYGWIN_NATIVE): Ditto.
	* fhandler_console.cc (keytable): Drop NO_COPY, constify instead.
	* grp.cc (null_ptr): Make NO_COPY_RO.
	* heap.cc (eval_start_address): Fix comment.
	* localtime.cc (wildabbr): Make NO_COPY_RO.
	(gmt): Ditto.
	* miscfuncs.cc (case_folded_lower): Drop NO_COPY.
	(case_folded_upper): Ditto.
	(isalpha_array): Ditto.
	(nice_to_winprio): Ditto for priority.
	(class thread_allocator): New class to allocate thread stack on x86_64.
	(thr_alloc): Define global NO_COPY instant of thread_allocator.
	(CygwinCreateThread): Call thr_alloc.alloc on x86_64 to reserve stack.
	* net.cc (errmap): Drop NO_COPY, constify instead.
	(host_errmap): Ditto.
	* netdb.cc (SPACE): Drop NO_COPY.
	* sec_helper.cc (null_sdp): Static NO_COPY_RO definition of null SD.
	(sec_none): Define NO_COPY_RO, define content statically.
	(sec_none_nih): Ditto.
	(sec_all): Ditto.
	(sec_all_nih): Ditto.
	(get_null_sd): Remove.
	(init_global_security): Remove.
	* security.cc (file_mapping): Define NO_COPY_RO.
	(check_registry_access): Ditto for reg_mapping.
	* spawn.cc (exe_suffixes): Drop NO_COPY, constify instead.
	(dll_suffixes): Drop unused, disabled definition and comment.
	* strsig.cc (sys_sigabbrev): Drop NO_COPY_INIT.
	(sys_siglist): Ditto.
	* syscalls.cc (def_shells): Drop NO_COPY.
	* winsup.h (NO_COPY_RO): Define to place variable in
	.rdata_cygwin_nocopy section.
	(init_global_security): Drop declaration.
@
text
@a64 1
    *(.rdata_cygwin_nocopy)
a136 3
#ifdef __x86_64__
    . = . + (3072 * 1024);
#else
a137 1
#endif
@


1.1.2.9
log
@	* Makefile.in (toollibdir): Remove.  Revert to using tooldir instead.
	* configure.ac (DLL_NAME): Set to cygwin1.dll in x86_64 case, too.
	* configure: Regenerate.
	* cygwin.sc.in (SEARCH_DIR): Align to 32 bit search dir, use lib, rather
	than lib64.
	* cygwin64.din (LIBRARY): Set name to cygwin1.dll.
	* fhandler_process.cc (struct heap_info): Drop win_heap_info class
	and revert code to former heap_info implementation.
	(format_process_maps): Define heaps back to heap_info
	* hookapi.cc (hook_or_detect_cygwin): Add shortcut so the code does
	not search executable for being a Cygwin executable, if the architecture
	is not matching the current Cygwin.  Always use for "cygwin1.dll".
	* pinfo.cc (commune_process): Drop PICOM_HEAP_INFO code.
	(_pinfo::commune_request): Ditto.
	(_pinfo::win_heap_info): Remove.
	* pinfo.h (enum picom): Remove PICOM_HEAP_INFO.
@
text
@d3 1
a3 1
SEARCH_DIR("/usr/x86_64-pc-cygwin/lib/w32api"); SEARCH_DIR("=/usr/lib/w32api");
@


1.1.2.10
log
@	* cygwin.sc.in (.gnu_debuglink_overlay): Drop "64" in dbg file name.
@
text
@d106 4
@


1.1.2.11
log
@	* cygwin.sc.in: Fix comment.
	* dcrt0.cc (child_info_fork::handle_fork): Revert patch from 2013-03-15.
@
text
@d47 1
a47 1
     on fork.  This used to be named ".data$nocopy".  The linker used
@


