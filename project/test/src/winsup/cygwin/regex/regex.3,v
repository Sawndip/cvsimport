head	1.2;
access;
symbols
	cygwin-1_7_35-release:1.2
	cygwin-1_7_34-release:1.2
	cygwin-1_7_33-release:1.2
	cygwin-1_7_32-release:1.2
	cygwin-1_7_31-release:1.2
	cygwin-1_7_30-release:1.2
	cygwin-1_7_29-release:1.2
	cygwin-1_7_29-release-branchpoint:1.2.0.10
	cygwin-pre-user-db:1.2
	cygwin-1_7_28-release:1.2
	cygwin-1_7_27-release:1.2
	cygwin-1_7_26-release:1.2
	cygwin-1_7_25-release:1.2
	cygwin-1_7_24-release:1.2
	cygwin-1_7_23-release:1.2
	cygwin-1_7_22-release:1.2
	cygwin-1_7_21-release:1.2
	cygwin-1_7_20-release:1.2
	cygwin-1_7_19-release:1.2
	cygwin-64bit-postmerge:1.2
	cygwin-64bit-premerge-branch:1.2.0.8
	cygwin-64bit-premerge:1.2
	cygwin-1_7_18-release:1.2
	post-ptmalloc3:1.2
	pre-ptmalloc3:1.2
	cygwin-1_7_17-release:1.2
	cygwin-64bit-branch:1.2.0.6
	cygwin-1_7_16-release:1.2
	cygwin-1_7_15-release:1.2
	cygwin-1_7_14_2-release:1.2
	cygwin-1_7_14-release:1.2
	cygwin-1_7_12-release:1.2
	cygwin-1_7_11-release:1.2
	cygwin-1_7_10-release:1.2
	signal-rewrite:1.2.0.4
	pre-notty:1.2
	cygwin-1_7_9-release:1.2
	cv-post-1_7_9:1.2.0.2
	cygwin-1_7_8-release:1.2
	cygwin-1_7_7-release:1.2
	cygwin-1_7_5-release:1.2
	cygwin-1_7_4-release:1.2
	cygwin-1_7_3-release:1.2
	cygwin-1_7_2-release:1.2
	fifo_doover3:1.1.0.34
	cygwin-1_7_1-release:1.1
	prefifo:1.1
	cv-branch-2:1.1.0.30
	pre-ripout-set_console_state_for_spawn:1.1
	EOL_registry_mounts:1.1
	preoverlapped:1.1
	drop_9x_support_start:1.1
	cr-0x5f1:1.1.0.28
	cv-branch:1.1.0.26
	pre-ptymaster-archetype:1.1
	cr-0x3b58:1.1.0.24
	cr-0x5ef:1.1.0.22
	after-mmap-privanon-noreserve:1.1
	after-mmap-revamp:1.1
	before-mmap-revamp:1.1
	cgf-more-exit-sync:1.1
	post_wait_sig_exit:1.1
	pre_wait_sig_exit:1.1
	reparent-point:1.1
	noreparent:1.1.0.20
	cr-0x5e6:1.1.0.18
	cr-0x9e:1.1.0.16
	cr-0x9d:1.1.0.14
	cgf-deleteme:1.1.0.12
	pre-sigrewrite:1.1
	corinna-01:1.1
	cr-0x9c:1.1.0.8
	cr-0x9b:1.1.0.6
	cr-0x99:1.1
	Z-emcb-cygwin_daemon:1.1.0.4
	w32api-2_2:1.1
	mingw-runtime-2_4:1.1
	pre-cgf-merge:1.1
	cgf-dev-branch:1.1.0.32
	predaemon:1.1
	cygwin_daemon_merge_HEAD:1.1
	pregp02r1:1.1.0.10
	cygnus_cvs_20020108_pre:1.1
	Z-cygwin_daemon_merge_HEAD:1.1
	cygwin_daemon:1.1.0.2
	Z-cygwin_daemon_merge-new_HEAD:1.1;
locks; strict;
comment	@.\" @;


1.2
date	2010.02.04.12.35.49;	author corinna;	state Exp;
branches;
next	1.1;

1.1
date	2001.12.20.02.55.09;	author cgf;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2002.01.04.03.56.16;	author rbcollins;	state Exp;
branches;
next	;


desc
@@


1.2
log
@	Replace regex files with multibyte-aware version from FreeBSD.
	* Makefile.in (install-headers): Remove extra command to install
	regex.h.
	(uninstall-headers): Remove extra command to uninstall regex.h.
	* nlsfuncs.cc (collate_lcid): Make externally available to allow
	access to collation internals from regex functions.
	(collate_charset): Ditto.
	* wchar.h: Add __cplusplus guards to make C-clean.
	* include/regex.h: New file, replacing regex/regex.h.  Remove UCB
	advertising clause.
	* regex/COPYRIGHT: Accommodate BSD license.  Remove UCB advertising
	clause.
	* regex/cclass.h: Remove.
	* regex/cname.h: New file from FreeBSD.
	* regex/engine.c: Ditto.
	(NONCHAR): Tweak for Cygwin.
	* regex/engine.ih: Remove.
	* regex/mkh: Remove.
	* regex/regcomp.c: New file from FreeBSD.  Tweak slightly for Cygwin.
	Import required collate internals from nlsfunc.cc.
	(p_ere_exp): Add GNU-specific \< and \> handling for word boundaries.
	(p_simp_re): Ditto.
	(__collate_range_cmp): Define.
	(p_b_term): Use Cygwin-specific collate internals.
	(findmust): Ditto.
	* regex/regcomp.ih: Remove.
	* regex/regerror.c: New file from FreeBSD.  Fix a few compiler warnings.
	* regex/regerror.ih: Remove.
	* regex/regex.7: New file from FreeBSD.  Remove UCB advertising clause.
	* regex/regex.h: Remove.  Replaced by include/regex.h.
	* regex/regexec.c: New file from FreeBSD.  Fix a few compiler warnings.
	* regex/regfree.c: New file from FreeBSD.
	* regex/tests: Remove.
	* regex/utils.h: New file from FreeBSD.
@
text
@.\" Copyright (c) 1992, 1993, 1994 Henry Spencer.
.\" Copyright (c) 1992, 1993, 1994
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" Henry Spencer.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	@@(#)regex.3	8.4 (Berkeley) 3/20/94
.\" $FreeBSD: src/lib/libc/regex/regex.3,v 1.21 2007/01/09 00:28:04 imp Exp $
.\"
.Dd August 17, 2005
.Dt REGEX 3
.Os
.Sh NAME
.Nm regcomp ,
.Nm regexec ,
.Nm regerror ,
.Nm regfree
.Nd regular-expression library
.Sh LIBRARY
.Lb libc
.Sh SYNOPSIS
.In regex.h
.Ft int
.Fo regcomp
.Fa "regex_t * restrict preg" "const char * restrict pattern" "int cflags"
.Fc
.Ft int
.Fo regexec
.Fa "const regex_t * restrict preg" "const char * restrict string"
.Fa "size_t nmatch" "regmatch_t pmatch[restrict]" "int eflags"
.Fc
.Ft size_t
.Fo regerror
.Fa "int errcode" "const regex_t * restrict preg"
.Fa "char * restrict errbuf" "size_t errbuf_size"
.Fc
.Ft void
.Fn regfree "regex_t *preg"
.Sh DESCRIPTION
These routines implement
.St -p1003.2
regular expressions
.Pq Do RE Dc Ns s ;
see
.Xr re_format 7 .
The
.Fn regcomp
function
compiles an RE written as a string into an internal form,
.Fn regexec
matches that internal form against a string and reports results,
.Fn regerror
transforms error codes from either into human-readable messages,
and
.Fn regfree
frees any dynamically-allocated storage used by the internal form
of an RE.
.Pp
The header
.In regex.h
declares two structure types,
.Ft regex_t
and
.Ft regmatch_t ,
the former for compiled internal forms and the latter for match reporting.
It also declares the four functions,
a type
.Ft regoff_t ,
and a number of constants with names starting with
.Dq Dv REG_ .
.Pp
The
.Fn regcomp
function
compiles the regular expression contained in the
.Fa pattern
string,
subject to the flags in
.Fa cflags ,
and places the results in the
.Ft regex_t
structure pointed to by
.Fa preg .
The
.Fa cflags
argument
is the bitwise OR of zero or more of the following flags:
.Bl -tag -width REG_EXTENDED
.It Dv REG_EXTENDED
Compile modern
.Pq Dq extended
REs,
rather than the obsolete
.Pq Dq basic
REs that
are the default.
.It Dv REG_BASIC
This is a synonym for 0,
provided as a counterpart to
.Dv REG_EXTENDED
to improve readability.
.It Dv REG_NOSPEC
Compile with recognition of all special characters turned off.
All characters are thus considered ordinary,
so the
.Dq RE
is a literal string.
This is an extension,
compatible with but not specified by
.St -p1003.2 ,
and should be used with
caution in software intended to be portable to other systems.
.Dv REG_EXTENDED
and
.Dv REG_NOSPEC
may not be used
in the same call to
.Fn regcomp .
.It Dv REG_ICASE
Compile for matching that ignores upper/lower case distinctions.
See
.Xr re_format 7 .
.It Dv REG_NOSUB
Compile for matching that need only report success or failure,
not what was matched.
.It Dv REG_NEWLINE
Compile for newline-sensitive matching.
By default, newline is a completely ordinary character with no special
meaning in either REs or strings.
With this flag,
.Ql [^
bracket expressions and
.Ql .\&
never match newline,
a
.Ql ^\&
anchor matches the null string after any newline in the string
in addition to its normal function,
and the
.Ql $\&
anchor matches the null string before any newline in the
string in addition to its normal function.
.It Dv REG_PEND
The regular expression ends,
not at the first NUL,
but just before the character pointed to by the
.Va re_endp
member of the structure pointed to by
.Fa preg .
The
.Va re_endp
member is of type
.Ft "const char *" .
This flag permits inclusion of NULs in the RE;
they are considered ordinary characters.
This is an extension,
compatible with but not specified by
.St -p1003.2 ,
and should be used with
caution in software intended to be portable to other systems.
.El
.Pp
When successful,
.Fn regcomp
returns 0 and fills in the structure pointed to by
.Fa preg .
One member of that structure
(other than
.Va re_endp )
is publicized:
.Va re_nsub ,
of type
.Ft size_t ,
contains the number of parenthesized subexpressions within the RE
(except that the value of this member is undefined if the
.Dv REG_NOSUB
flag was used).
If
.Fn regcomp
fails, it returns a non-zero error code;
see
.Sx DIAGNOSTICS .
.Pp
The
.Fn regexec
function
matches the compiled RE pointed to by
.Fa preg
against the
.Fa string ,
subject to the flags in
.Fa eflags ,
and reports results using
.Fa nmatch ,
.Fa pmatch ,
and the returned value.
The RE must have been compiled by a previous invocation of
.Fn regcomp .
The compiled form is not altered during execution of
.Fn regexec ,
so a single compiled RE can be used simultaneously by multiple threads.
.Pp
By default,
the NUL-terminated string pointed to by
.Fa string
is considered to be the text of an entire line, minus any terminating
newline.
The
.Fa eflags
argument is the bitwise OR of zero or more of the following flags:
.Bl -tag -width REG_STARTEND
.It Dv REG_NOTBOL
The first character of
the string
is not the beginning of a line, so the
.Ql ^\&
anchor should not match before it.
This does not affect the behavior of newlines under
.Dv REG_NEWLINE .
.It Dv REG_NOTEOL
The NUL terminating
the string
does not end a line, so the
.Ql $\&
anchor should not match before it.
This does not affect the behavior of newlines under
.Dv REG_NEWLINE .
.It Dv REG_STARTEND
The string is considered to start at
.Fa string
+
.Fa pmatch Ns [0]. Ns Va rm_so
and to have a terminating NUL located at
.Fa string
+
.Fa pmatch Ns [0]. Ns Va rm_eo
(there need not actually be a NUL at that location),
regardless of the value of
.Fa nmatch .
See below for the definition of
.Fa pmatch
and
.Fa nmatch .
This is an extension,
compatible with but not specified by
.St -p1003.2 ,
and should be used with
caution in software intended to be portable to other systems.
Note that a non-zero
.Va rm_so
does not imply
.Dv REG_NOTBOL ;
.Dv REG_STARTEND
affects only the location of the string,
not how it is matched.
.El
.Pp
See
.Xr re_format 7
for a discussion of what is matched in situations where an RE or a
portion thereof could match any of several substrings of
.Fa string .
.Pp
Normally,
.Fn regexec
returns 0 for success and the non-zero code
.Dv REG_NOMATCH
for failure.
Other non-zero error codes may be returned in exceptional situations;
see
.Sx DIAGNOSTICS .
.Pp
If
.Dv REG_NOSUB
was specified in the compilation of the RE,
or if
.Fa nmatch
is 0,
.Fn regexec
ignores the
.Fa pmatch
argument (but see below for the case where
.Dv REG_STARTEND
is specified).
Otherwise,
.Fa pmatch
points to an array of
.Fa nmatch
structures of type
.Ft regmatch_t .
Such a structure has at least the members
.Va rm_so
and
.Va rm_eo ,
both of type
.Ft regoff_t
(a signed arithmetic type at least as large as an
.Ft off_t
and a
.Ft ssize_t ) ,
containing respectively the offset of the first character of a substring
and the offset of the first character after the end of the substring.
Offsets are measured from the beginning of the
.Fa string
argument given to
.Fn regexec .
An empty substring is denoted by equal offsets,
both indicating the character following the empty substring.
.Pp
The 0th member of the
.Fa pmatch
array is filled in to indicate what substring of
.Fa string
was matched by the entire RE.
Remaining members report what substring was matched by parenthesized
subexpressions within the RE;
member
.Va i
reports subexpression
.Va i ,
with subexpressions counted (starting at 1) by the order of their opening
parentheses in the RE, left to right.
Unused entries in the array (corresponding either to subexpressions that
did not participate in the match at all, or to subexpressions that do not
exist in the RE (that is,
.Va i
>
.Fa preg Ns -> Ns Va re_nsub ) )
have both
.Va rm_so
and
.Va rm_eo
set to -1.
If a subexpression participated in the match several times,
the reported substring is the last one it matched.
(Note, as an example in particular, that when the RE
.Ql "(b*)+"
matches
.Ql bbb ,
the parenthesized subexpression matches each of the three
.So Li b Sc Ns s
and then
an infinite number of empty strings following the last
.Ql b ,
so the reported substring is one of the empties.)
.Pp
If
.Dv REG_STARTEND
is specified,
.Fa pmatch
must point to at least one
.Ft regmatch_t
(even if
.Fa nmatch
is 0 or
.Dv REG_NOSUB
was specified),
to hold the input offsets for
.Dv REG_STARTEND .
Use for output is still entirely controlled by
.Fa nmatch ;
if
.Fa nmatch
is 0 or
.Dv REG_NOSUB
was specified,
the value of
.Fa pmatch Ns [0]
will not be changed by a successful
.Fn regexec .
.Pp
The
.Fn regerror
function
maps a non-zero
.Fa errcode
from either
.Fn regcomp
or
.Fn regexec
to a human-readable, printable message.
If
.Fa preg
is
.No non\- Ns Dv NULL ,
the error code should have arisen from use of
the
.Ft regex_t
pointed to by
.Fa preg ,
and if the error code came from
.Fn regcomp ,
it should have been the result from the most recent
.Fn regcomp
using that
.Ft regex_t .
The
.Fn ( regerror
may be able to supply a more detailed message using information
from the
.Ft regex_t . )
The
.Fn regerror
function
places the NUL-terminated message into the buffer pointed to by
.Fa errbuf ,
limiting the length (including the NUL) to at most
.Fa errbuf_size
bytes.
If the whole message will not fit,
as much of it as will fit before the terminating NUL is supplied.
In any case,
the returned value is the size of buffer needed to hold the whole
message (including terminating NUL).
If
.Fa errbuf_size
is 0,
.Fa errbuf
is ignored but the return value is still correct.
.Pp
If the
.Fa errcode
given to
.Fn regerror
is first ORed with
.Dv REG_ITOA ,
the
.Dq message
that results is the printable name of the error code,
e.g.\&
.Dq Dv REG_NOMATCH ,
rather than an explanation thereof.
If
.Fa errcode
is
.Dv REG_ATOI ,
then
.Fa preg
shall be
.No non\- Ns Dv NULL
and the
.Va re_endp
member of the structure it points to
must point to the printable name of an error code;
in this case, the result in
.Fa errbuf
is the decimal digits of
the numeric value of the error code
(0 if the name is not recognized).
.Dv REG_ITOA
and
.Dv REG_ATOI
are intended primarily as debugging facilities;
they are extensions,
compatible with but not specified by
.St -p1003.2 ,
and should be used with
caution in software intended to be portable to other systems.
Be warned also that they are considered experimental and changes are possible.
.Pp
The
.Fn regfree
function
frees any dynamically-allocated storage associated with the compiled RE
pointed to by
.Fa preg .
The remaining
.Ft regex_t
is no longer a valid compiled RE
and the effect of supplying it to
.Fn regexec
or
.Fn regerror
is undefined.
.Pp
None of these functions references global variables except for tables
of constants;
all are safe for use from multiple threads if the arguments are safe.
.Sh IMPLEMENTATION CHOICES
There are a number of decisions that
.St -p1003.2
leaves up to the implementor,
either by explicitly saying
.Dq undefined
or by virtue of them being
forbidden by the RE grammar.
This implementation treats them as follows.
.Pp
See
.Xr re_format 7
for a discussion of the definition of case-independent matching.
.Pp
There is no particular limit on the length of REs,
except insofar as memory is limited.
Memory usage is approximately linear in RE size, and largely insensitive
to RE complexity, except for bounded repetitions.
See
.Sx BUGS
for one short RE using them
that will run almost any system out of memory.
.Pp
A backslashed character other than one specifically given a magic meaning
by
.St -p1003.2
(such magic meanings occur only in obsolete
.Bq Dq basic
REs)
is taken as an ordinary character.
.Pp
Any unmatched
.Ql [\&
is a
.Dv REG_EBRACK
error.
.Pp
Equivalence classes cannot begin or end bracket-expression ranges.
The endpoint of one range cannot begin another.
.Pp
.Dv RE_DUP_MAX ,
the limit on repetition counts in bounded repetitions, is 255.
.Pp
A repetition operator
.Ql ( ?\& ,
.Ql *\& ,
.Ql +\& ,
or bounds)
cannot follow another
repetition operator.
A repetition operator cannot begin an expression or subexpression
or follow
.Ql ^\&
or
.Ql |\& .
.Pp
.Ql |\&
cannot appear first or last in a (sub)expression or after another
.Ql |\& ,
i.e., an operand of
.Ql |\&
cannot be an empty subexpression.
An empty parenthesized subexpression,
.Ql "()" ,
is legal and matches an
empty (sub)string.
An empty string is not a legal RE.
.Pp
A
.Ql {\&
followed by a digit is considered the beginning of bounds for a
bounded repetition, which must then follow the syntax for bounds.
A
.Ql {\&
.Em not
followed by a digit is considered an ordinary character.
.Pp
.Ql ^\&
and
.Ql $\&
beginning and ending subexpressions in obsolete
.Pq Dq basic
REs are anchors, not ordinary characters.
.Sh DIAGNOSTICS
Non-zero error codes from
.Fn regcomp
and
.Fn regexec
include the following:
.Pp
.Bl -tag -width REG_ECOLLATE -compact
.It Dv REG_NOMATCH
The
.Fn regexec
function
failed to match
.It Dv REG_BADPAT
invalid regular expression
.It Dv REG_ECOLLATE
invalid collating element
.It Dv REG_ECTYPE
invalid character class
.It Dv REG_EESCAPE
.Ql \e
applied to unescapable character
.It Dv REG_ESUBREG
invalid backreference number
.It Dv REG_EBRACK
brackets
.Ql "[ ]"
not balanced
.It Dv REG_EPAREN
parentheses
.Ql "( )"
not balanced
.It Dv REG_EBRACE
braces
.Ql "{ }"
not balanced
.It Dv REG_BADBR
invalid repetition count(s) in
.Ql "{ }"
.It Dv REG_ERANGE
invalid character range in
.Ql "[ ]"
.It Dv REG_ESPACE
ran out of memory
.It Dv REG_BADRPT
.Ql ?\& ,
.Ql *\& ,
or
.Ql +\&
operand invalid
.It Dv REG_EMPTY
empty (sub)expression
.It Dv REG_ASSERT
cannot happen - you found a bug
.It Dv REG_INVARG
invalid argument, e.g.\& negative-length string
.It Dv REG_ILLSEQ
illegal byte sequence (bad multibyte character)
.El
.Sh SEE ALSO
.Xr grep 1 ,
.Xr re_format 7
.Pp
.St -p1003.2 ,
sections 2.8 (Regular Expression Notation)
and
B.5 (C Binding for Regular Expression Matching).
.Sh HISTORY
Originally written by
.An Henry Spencer .
Altered for inclusion in the
.Bx 4.4
distribution.
.Sh BUGS
This is an alpha release with known defects.
Please report problems.
.Pp
The back-reference code is subtle and doubts linger about its correctness
in complex cases.
.Pp
The
.Fn regexec
function
performance is poor.
This will improve with later releases.
The
.Fa nmatch
argument
exceeding 0 is expensive;
.Fa nmatch
exceeding 1 is worse.
The
.Fn regexec
function
is largely insensitive to RE complexity
.Em except
that back
references are massively expensive.
RE length does matter; in particular, there is a strong speed bonus
for keeping RE length under about 30 characters,
with most special characters counting roughly double.
.Pp
The
.Fn regcomp
function
implements bounded repetitions by macro expansion,
which is costly in time and space if counts are large
or bounded repetitions are nested.
An RE like, say,
.Ql "((((a{1,100}){1,100}){1,100}){1,100}){1,100}"
will (eventually) run almost any existing machine out of swap space.
.Pp
There are suspected problems with response to obscure error conditions.
Notably,
certain kinds of internal overflow,
produced only by truly enormous REs or by multiply nested bounded repetitions,
are probably not handled well.
.Pp
Due to a mistake in
.St -p1003.2 ,
things like
.Ql "a)b"
are legal REs because
.Ql )\&
is
a special character only in the presence of a previous unmatched
.Ql (\& .
This cannot be fixed until the spec is fixed.
.Pp
The standard's definition of back references is vague.
For example, does
.Ql "a\e(\e(b\e)*\e2\e)*d"
match
.Ql "abbbd" ?
Until the standard is clarified,
behavior in such cases should not be relied on.
.Pp
The implementation of word-boundary matching is a bit of a kludge,
and bugs may lurk in combinations of word-boundary matching and anchoring.
.Pp
Word-boundary matching does not work properly in multibyte locales.
@


1.1
log
@* Makefile.in (VPATH): Add regex directory.
(NM): new variable.
(OBSOLETE_FUNCTIONS): Ditto.
(NEW_FUNCTIONS): Ditto.
(install-headers): Install regex.h.
(install-man): New target.
(install): Use new target.
(DLL_OFILES): Add v8_reg* stuff.
(new-cygwin1.dll): Eliminate stamp-cygwin-lib creation.
(libcygwin.a): Remove obsolete functions from import lib.  Add new functions.
* configure.in: Detect 'nm' tool.
* configure: Regenerate.
* cygwin.din: Export posix_reg* functions.  Eliminate export of v8 reg*
functions.  This is now handled in object files themselves.
* regex/*: New files.
* regexp/v8_*.c: New files, renamed from non v8_ equivalents.
@
text
@d1 68
a68 28
.TH REGEX 3 "25 Sept 1997"
.BY "Henry Spencer"
.de ZR
.\" one other place knows this name:  the SEE ALSO section
.IR regex (7) \\$1
..
.SH NAME
regcomp, regexec, regerror, regfree \- regular-expression library
.SH SYNOPSIS
.ft B
.\".na
#include <sys/types.h>
.br
#include <regex.h>
.HP 10
int regcomp(regex_t\ *preg, const\ char\ *pattern, int\ cflags);
.HP
int\ regexec(const\ regex_t\ *preg, const\ char\ *string,
size_t\ nmatch, regmatch_t\ pmatch[], int\ eflags);
.HP
size_t\ regerror(int\ errcode, const\ regex_t\ *preg,
char\ *errbuf, size_t\ errbuf_size);
.HP
void\ regfree(regex_t\ *preg);
.\".ad
.ft
.SH DESCRIPTION
These routines implement POSIX 1003.2 regular expressions (``RE''s);
d70 4
a73 2
.ZR .
.I Regcomp
d75 1
a75 1
.I regexec
d77 1
a77 1
.I regerror
d80 1
a80 1
.I regfree
d83 1
a83 1
.PP
d85 1
a85 1
.I <regex.h>
d87 1
a87 1
.I regex_t
d89 1
a89 1
.IR regmatch_t ,
d93 7
a99 4
.IR regoff_t ,
and a number of constants with names starting with ``REG_''.
.PP
.I Regcomp
d101 1
a101 1
.I pattern
d104 1
a104 1
.IR cflags ,
d106 1
a106 1
.I regex_t
d108 4
a111 2
.IR preg .
.I Cflags
d113 8
a120 3
.IP REG_EXTENDED \w'REG_EXTENDED'u+2n
Compile modern (``extended'') REs,
rather than the obsolete (``basic'') REs that
d122 1
a122 1
.IP REG_BASIC
d124 4
a127 6
provided as a counterpart to REG_EXTENDED to improve readability.
This is an extension,
compatible with but not specified by POSIX 1003.2,
and should be used with
caution in software intended to be portable to other systems.
.IP REG_NOSPEC
d130 3
a132 1
so the ``RE'' is a literal string.
d134 2
a135 1
compatible with but not specified by POSIX 1003.2,
d138 4
a141 1
REG_EXTENDED and REG_NOSPEC may not be used
d143 2
a144 2
.IR regcomp .
.IP REG_ICASE
d147 2
a148 2
.ZR .
.IP REG_NOSUB
d151 1
a151 1
.IP REG_NEWLINE
d156 7
a162 2
`[^' bracket expressions and `.' never match newline,
a `^' anchor matches the null string after any newline in the string
d164 3
a166 1
and the `$' anchor matches the null string before any newline in the
d168 1
a168 1
.IP REG_PEND
d172 1
a172 1
.I re_endp
d174 1
a174 1
.IR preg .
d176 1
a176 1
.I re_endp
d178 1
a178 1
.IR const\ char\ * .
d182 2
a183 1
compatible with but not specified by POSIX 1003.2,
d186 2
a187 1
.PP
d189 1
a189 1
.I regcomp
d191 1
a191 1
.IR preg .
d194 1
a194 1
.IR re_endp )
d196 1
a196 1
.IR re_nsub ,
d198 1
a198 1
.IR size_t ,
d201 2
a202 1
REG_NOSUB flag was used).
d204 1
a204 1
.I regcomp
d206 6
a211 3
see DIAGNOSTICS.
.PP
.I Regexec
d213 1
a213 1
.I preg
d215 1
a215 1
.IR string ,
d217 1
a217 1
.IR eflags ,
d219 2
a220 2
.IR nmatch ,
.IR pmatch ,
d223 1
a223 1
.IR regcomp .
d225 1
a225 1
.IR regexec ,
d227 1
a227 1
.PP
d230 3
a232 6
.I string
is considered to be the text of an entire line,
with the NUL indicating the end of the line.
(That is,
any other end-of-line marker is considered to have been removed
and replaced by the NUL.)
d234 1
a234 1
.I eflags
d236 2
a237 1
.IP REG_NOTBOL \w'REG_STARTEND'u+2n
d240 6
a245 3
is not the beginning of a line, so the `^' anchor should not match before it.
This does not affect the behavior of newlines under REG_NEWLINE.
.IP REG_NOTEOL
d248 6
a253 3
does not end a line, so the `$' anchor should not match before it.
This does not affect the behavior of newlines under REG_NEWLINE.
.IP REG_STARTEND
d255 3
a257 1
\fIstring\fR\ + \fIpmatch\fR[0].\fIrm_so\fR
d259 3
a261 1
\fIstring\fR\ + \fIpmatch\fR[0].\fIrm_eo\fR
d264 1
a264 1
.IR nmatch .
d266 1
a266 1
.IR pmatch
d268 1
a268 1
.IR nmatch .
d270 2
a271 1
compatible with but not specified by POSIX 1003.2,
d274 6
a279 2
Note that a non-zero \fIrm_so\fR does not imply REG_NOTBOL;
REG_STARTEND affects only the location of the string,
d281 2
a282 1
.PP
d284 1
a284 1
.ZR
d287 2
a288 2
.IR string .
.PP
d290 4
a293 2
.I regexec
returns 0 for success and the non-zero code REG_NOMATCH for failure.
d295 6
a300 3
see DIAGNOSTICS.
.PP
If REG_NOSUB was specified in the compilation of the RE,
d302 1
a302 1
.I nmatch
d304 1
a304 1
.I regexec
d306 4
a309 2
.I pmatch
argument (but see below for the case where REG_STARTEND is specified).
d311 1
a311 1
.I pmatch
d313 1
a313 1
.I nmatch
d315 1
a315 1
.IR regmatch_t .
d317 1
a317 1
.I rm_so
d319 1
a319 1
.IR rm_eo ,
d321 1
a321 1
.I regoff_t
d323 1
a323 1
.I off_t
d325 1
a325 1
.IR ssize_t ),
d329 1
a329 1
.I string
d331 1
a331 1
.IR regexec .
d334 1
a334 1
.PP
d336 1
a336 1
.I pmatch
d338 1
a338 1
.I string
d343 1
a343 1
.I i
d345 1
a345 1
.IR i ,
d348 1
a348 1
Unused entries in the array\(emcorresponding either to subexpressions that
d350 6
a355 2
exist in the RE (that is, \fIi\fR\ > \fIpreg\fR\->\fIre_nsub\fR)\(emhave both
.I rm_so
d357 2
a358 2
.I rm_eo
set to \-1.
d361 9
a369 3
(Note, as an example in particular, that when the RE `(b*)+' matches `bbb',
the parenthesized subexpression matches the three `b's and then
an infinite number of empty strings following the last `b',
d371 5
a375 3
.PP
If REG_STARTEND is specified,
.I pmatch
d377 1
a377 1
.I regmatch_t
d379 6
a384 3
.I nmatch
is 0 or REG_NOSUB was specified),
to hold the input offsets for REG_STARTEND.
d386 1
a386 1
.IR nmatch ;
d388 4
a391 2
.I nmatch
is 0 or REG_NOSUB was specified,
d393 1
a393 1
.IR pmatch [0]
d395 5
a399 3
.IR regexec .
.PP
.I Regerror
d401 1
a401 1
.I errcode
d403 1
a403 1
.I regcomp
d405 1
a405 1
.I regexec
d408 3
a410 2
.I preg
is non-NULL,
d413 1
a413 1
.I regex_t
d415 1
a415 1
.IR preg ,
d417 1
a417 1
.IR regcomp ,
d419 1
a419 1
.I regcomp
d421 3
a423 2
.IR regex_t .
.RI ( Regerror
d426 4
a429 2
.IR regex_t .)
.I Regerror
d431 1
a431 1
.IR errbuf ,
d433 1
a433 1
.I errbuf_size
d435 1
a435 1
If the whole message won't fit,
d441 1
a441 1
.I errbuf_size
d443 1
a443 1
.I errbuf
d445 1
a445 1
.PP
d447 1
a447 1
.I errcode
d449 8
a456 4
.I regerror
is first ORed with REG_ITOA,
the ``message'' that results is the printable name of the error code,
e.g. ``REG_NOMATCH'',
d459 3
a461 2
.I errcode
is REG_ATOI,
d463 5
a467 3
.I preg
shall be non-NULL and the
.I re_endp
d471 1
a471 1
.I errbuf
d475 4
a478 1
REG_ITOA and REG_ATOI are intended primarily as debugging facilities;
d480 2
a481 1
compatible with but not specified by POSIX 1003.2,
d485 4
a488 2
.PP
.I Regfree
d491 1
a491 1
.IR preg .
d493 1
a493 1
.I regex_t
d496 1
a496 1
.I regexec
d498 1
a498 1
.I regerror
d500 1
a500 1
.PP
d504 7
a510 3
.SH IMPLEMENTATION CHOICES
There are a number of decisions that 1003.2 leaves up to the implementor,
either by explicitly saying ``undefined'' or by virtue of them being
d513 1
a513 1
.PP
d515 1
a515 1
.ZR
d517 1
a517 1
.PP
d522 3
a524 1
See BUGS for one short RE using them
d526 1
a526 1
.PP
d528 5
a532 1
by 1003.2 (such magic meanings occur only in obsolete [``basic''] REs)
d534 7
a540 3
.PP
Any unmatched [ is a REG_EBRACK error.
.PP
d543 10
a552 4
.PP
RE_DUP_MAX, the limit on repetition counts in bounded repetitions, is 255.
.PP
A repetition operator (?, *, +, or bounds) cannot follow another
d555 14
a568 5
or follow `^' or `|'.
.PP
`|' cannot appear first or last in a (sub)expression or after another `|',
i.e. an operand of `|' cannot be an empty subexpression.
An empty parenthesized subexpression, `()', is legal and matches an
d571 4
a574 2
.PP
A `{' followed by a digit is considered the beginning of bounds for a
d576 10
a585 3
A `{' \fInot\fR followed by a digit is considered an ordinary character.
.PP
`^' and `$' beginning and ending subexpressions in obsolete (``basic'')
d587 1
a587 7
.SH SEE ALSO
grep(1), regex(7)
.PP
POSIX 1003.2, sections 2.8 (Regular Expression Notation)
and
B.5 (C Binding for Regular Expression Matching).
.SH DIAGNOSTICS
d589 1
a589 1
.I regcomp
d591 1
a591 1
.I regexec
d593 68
a660 24
.PP
.nf
.ta \w'REG_ECOLLATE'u+3n
REG_NOMATCH	regexec() failed to match
REG_BADPAT	invalid regular expression
REG_ECOLLATE	invalid collating element
REG_ECTYPE	invalid character class
REG_EESCAPE	\e applied to unescapable character
REG_ESUBREG	invalid backreference number
REG_EBRACK	brackets [ ] not balanced
REG_EPAREN	parentheses ( ) not balanced
REG_EBRACE	braces { } not balanced
REG_BADBR	invalid repetition count(s) in { }
REG_ERANGE	invalid character range in [ ]
REG_ESPACE	ran out of memory
REG_BADRPT	?, *, or + operand invalid
REG_EMPTY	empty (sub)expression
REG_ASSERT	``can't happen''\(emyou found a bug
REG_INVARG	invalid argument, e.g. negative-length string
.fi
.SH HISTORY
Written by Henry Spencer,
henry@@zoo.toronto.edu.
.SH BUGS
d663 1
a663 6
.PP
There is one known functionality bug.
The implementation of internationalization is incomplete:
the locale is always assumed to be the default one of 1003.2,
and only the collating elements etc. of that locale are available.
.PP
d666 4
a669 2
.PP
.I Regexec
d672 3
a674 1
.I Nmatch
d676 1
a676 1
.I nmatch
d678 6
a683 2
.I Regexec
is largely insensitive to RE complexity \fIexcept\fR that back
d688 4
a691 2
.PP
.I Regcomp
d696 1
a696 1
`((((a{1,100}){1,100}){1,100}){1,100}){1,100}'
d698 1
a698 1
.PP
d704 12
a715 5
.PP
Due to a mistake in 1003.2, things like `a)b' are legal REs because `)' is
a special character only in the presence of a previous unmatched `('.
This can't be fixed until the spec is fixed.
.PP
d718 3
a720 1
`a\e(\e(b\e)*\e2\e)*d' match `abbbd'?
d723 1
a723 1
.PP
d726 2
@


1.1.2.1
log
@Merged changes from HEAD
@
text
@@

