head	1.44;
access;
symbols
	cygwin-1_7_35-release:1.44
	cygwin-1_7_34-release:1.44
	cygwin-1_7_33-release:1.44
	cygwin-1_7_32-release:1.44
	cygwin-1_7_31-release:1.44
	cygwin-1_7_30-release:1.44
	cygwin-1_7_29-release:1.44
	cygwin-1_7_29-release-branchpoint:1.44.0.2
	cygwin-pre-user-db:1.44
	cygwin-1_7_28-release:1.44
	cygwin-1_7_27-release:1.44
	cygwin-1_7_26-release:1.44
	cygwin-1_7_25-release:1.44
	cygwin-1_7_24-release:1.44
	cygwin-1_7_23-release:1.44
	cygwin-1_7_22-release:1.44
	cygwin-1_7_21-release:1.44
	cygwin-1_7_20-release:1.44
	cygwin-1_7_19-release:1.44
	cygwin-64bit-postmerge:1.44
	cygwin-64bit-premerge-branch:1.43.0.2
	cygwin-64bit-premerge:1.43
	cygwin-1_7_18-release:1.43
	post-ptmalloc3:1.41.2.3
	pre-ptmalloc3:1.41.2.3
	cygwin-1_7_17-release:1.41
	cygwin-64bit-branch:1.41.0.2
	cygwin-1_7_16-release:1.41
	cygwin-1_7_15-release:1.41
	cygwin-1_7_14_2-release:1.41
	cygwin-1_7_14-release:1.41
	cygwin-1_7_12-release:1.41
	cygwin-1_7_11-release:1.40
	cygwin-1_7_10-release:1.40
	signal-rewrite:1.38.0.2
	pre-notty:1.38
	cygwin-1_7_9-release:1.37
	cv-post-1_7_9:1.37.0.2
	cygwin-1_7_8-release:1.37
	cygwin-1_7_7-release:1.35
	cygwin-1_7_5-release:1.35
	cygwin-1_7_4-release:1.35
	cygwin-1_7_3-release:1.35
	cygwin-1_7_2-release:1.35
	fifo_doover3:1.35.0.2
	cygwin-1_7_1-release:1.35
	prefifo:1.34
	cv-branch-2:1.34.0.2
	pre-ripout-set_console_state_for_spawn:1.33
	EOL_registry_mounts:1.32
	preoverlapped:1.31
	drop_9x_support_start:1.31
	cr-0x5f1:1.30.0.8
	cv-branch:1.30.0.6
	pre-ptymaster-archetype:1.30
	cr-0x3b58:1.30.0.4
	cr-0x5ef:1.30.0.2
	after-mmap-privanon-noreserve:1.30
	after-mmap-revamp:1.30
	before-mmap-revamp:1.30
	cgf-more-exit-sync:1.30
	post_wait_sig_exit:1.30
	pre_wait_sig_exit:1.30
	reparent-point:1.27
	noreparent:1.27.0.4
	cr-0x5e6:1.27.0.2
	cr-0x9e:1.26.0.6
	cr-0x9d:1.26.0.4
	cgf-deleteme:1.26.0.2
	pre-sigrewrite:1.25
	corinna-01:1.25
	cr-0x9c:1.23.4.1.0.2
	cr-0x9b:1.23.0.4
	cr-0x99:1.23
	Z-emcb-cygwin_daemon:1.23.0.2
	w32api-2_2:1.21
	mingw-runtime-2_4:1.21
	pre-cgf-merge:1.24
	cgf-dev-branch:1.20.0.16
	predaemon:1.17
	cygwin_daemon_merge_HEAD:1.17
	pregp02r1:1.17.0.22
	cygnus_cvs_20020108_pre:1.17
	Z-cygwin_daemon_merge-new_HEAD:1.20
	Z-cygwin_daemon_merge_HEAD:1.20
	cygwin_daemon:1.14.0.4;
locks; strict;
comment	@// @;
expand	@o@;


1.44
date	2013.04.23.09.44.34;	author corinna;	state Exp;
branches;
next	1.43;

1.43
date	2013.01.21.04.38.28;	author cgf;	state Exp;
branches;
next	1.42;

1.42
date	2012.11.21.20.13.05;	author yselkowitz;	state Exp;
branches;
next	1.41;

1.41
date	2012.02.28.14.03.02;	author ericb;	state Exp;
branches
	1.41.2.1;
next	1.40;

1.40
date	2011.12.03.21.43.27;	author cgf;	state Exp;
branches;
next	1.39;

1.39
date	2011.10.11.23.20.38;	author cgf;	state Exp;
branches;
next	1.38;

1.38
date	2011.04.30.16.34.48;	author corinna;	state Exp;
branches;
next	1.37;

1.37
date	2011.02.15.15.56.02;	author corinna;	state Exp;
branches;
next	1.36;

1.36
date	2011.01.11.10.09.22;	author corinna;	state Exp;
branches;
next	1.35;

1.35
date	2009.08.02.21.38.40;	author cgf;	state Exp;
branches;
next	1.34;

1.34
date	2008.09.12.22.32.07;	author cgf;	state Exp;
branches;
next	1.33;

1.33
date	2008.04.07.18.45.59;	author cgf;	state Exp;
branches;
next	1.32;

1.32
date	2007.09.26.08.57.35;	author corinna;	state Exp;
branches;
next	1.31;

1.31
date	2006.12.06.19.44.07;	author corinna;	state Exp;
branches;
next	1.30;

1.30
date	2005.09.09.03.00.34;	author cgf;	state Exp;
branches
	1.30.8.1;
next	1.29;

1.29
date	2005.09.09.02.53.40;	author cgf;	state Exp;
branches;
next	1.28;

1.28
date	2005.07.06.20.05.03;	author cgf;	state Exp;
branches;
next	1.27;

1.27
date	2004.02.12.03.01.58;	author cgf;	state Exp;
branches;
next	1.26;

1.26
date	2003.11.28.20.55.58;	author cgf;	state Exp;
branches;
next	1.25;

1.25
date	2003.09.25.00.37.17;	author cgf;	state Exp;
branches;
next	1.24;

1.24
date	2003.09.18.18.54.48;	author corinna;	state Exp;
branches;
next	1.23;

1.23
date	2003.06.16.03.24.12;	author cgf;	state Exp;
branches
	1.23.4.1;
next	1.22;

1.22
date	2003.04.16.03.03.44;	author cgf;	state Exp;
branches;
next	1.21;

1.21
date	2003.02.01.04.48.03;	author cgf;	state Exp;
branches;
next	1.20;

1.20
date	2002.09.22.03.38.57;	author cgf;	state Exp;
branches
	1.20.16.1;
next	1.19;

1.19
date	2002.07.29.03.18.41;	author cgf;	state Exp;
branches;
next	1.18;

1.18
date	2002.06.05.04.01.43;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2001.11.15.03.25.52;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2001.10.15.23.39.33;	author cgf;	state Exp;
branches;
next	1.15;

1.15
date	2001.10.01.04.10.07;	author cgf;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.23.02.27.01;	author cgf;	state Exp;
branches
	1.14.4.1;
next	1.13;

1.13
date	2001.07.26.19.22.24;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2001.06.24.22.26.53;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2001.04.18.21.10.14;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2001.01.17.14.57.09;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2000.09.08.02.56.55;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2000.09.07.16.23.51;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2000.09.04.17.52.42;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.22.05.10.20;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.22.03.58.47;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.12.05.35.42;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.12.04.48.44;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.02.16.28.18;	author dj;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.41.2.1
date	2012.11.22.11.05.50;	author corinna;	state Exp;
branches;
next	1.41.2.2;

1.41.2.2
date	2012.12.10.11.45.51;	author corinna;	state Exp;
branches;
next	1.41.2.3;

1.41.2.3
date	2013.01.21.13.52.11;	author corinna;	state Exp;
branches;
next	;

1.30.8.1
date	2007.11.12.15.30.20;	author corinna;	state Exp;
branches;
next	;

1.23.4.1
date	2003.09.19.03.55.54;	author cgf;	state Exp;
branches;
next	;

1.20.16.1
date	2003.02.01.04.48.22;	author cgf;	state Exp;
branches;
next	1.20.16.2;

1.20.16.2
date	2003.02.14.03.03.29;	author cgf;	state Exp;
branches;
next	1.20.16.3;

1.20.16.3
date	2003.05.10.17.20.54;	author cgf;	state Exp;
branches;
next	1.20.16.4;

1.20.16.4
date	2003.07.06.05.10.43;	author cgf;	state Exp;
branches;
next	;

1.14.4.1
date	2001.10.02.12.09.56;	author rbcollins;	state Exp;
branches;
next	1.14.4.2;

1.14.4.2
date	2002.01.04.03.56.11;	author rbcollins;	state Exp;
branches;
next	1.14.4.3;

1.14.4.3
date	2002.06.13.14.34.13;	author rbcollins;	state Exp;
branches;
next	1.14.4.4;

1.14.4.4
date	2002.07.29.10.54.14;	author scottc;	state Exp;
branches;
next	1.14.4.5;

1.14.4.5
date	2002.09.22.10.01.29;	author scottc;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.44
log
@	* Merge in cygwin-64bit-branch.
@
text
@/* termios.cc: termios for WIN32.

   Copyright 1996, 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
   2008, 2009, 2010, 2011, 2012 Red Hat, Inc.

   Written by Doug Evans and Steve Chamberlain of Cygnus Support
   dje@@cygnus.com, sac@@cygnus.com

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include "winsup.h"
#include "cygwin/version.h"
#include <stdlib.h>
#include "cygerrno.h"
#include "security.h"
#include "path.h"
#include "fhandler.h"
#include "dtable.h"
#include "cygheap.h"
#include "perprocess.h"
#include "cygtls.h"

/* tcsendbreak: POSIX 7.2.2.1 */
extern "C" int
tcsendbreak (int fd, int duration)
{
  int res = -1;

  cygheap_fdget cfd (fd);
  if (cfd < 0)
    goto out;

  if (!cfd->is_tty ())
    set_errno (ENOTTY);
  else if ((res = cfd->bg_check (-SIGTTOU)) > bg_eof)
    res = cfd->tcsendbreak (duration);

out:
  syscall_printf ("%R = tcsendbreak(%d, %d)", res, fd, duration);
  return res;
}

/* tcdrain: POSIX 7.2.2.1 */
extern "C" int
tcdrain (int fd)
{
  pthread_testcancel ();

  int res = -1;

  termios_printf ("tcdrain");

  cygheap_fdget cfd (fd);
  if (cfd < 0)
    goto out;

  if (!cfd->is_tty ())
    set_errno (ENOTTY);
  else if ((res = cfd->bg_check (-SIGTTOU)) > bg_eof)
    res = cfd->tcdrain ();

out:
  syscall_printf ("%R = tcdrain(%d)", res, fd);
  return res;
}

/* tcflush: POSIX 7.2.2.1 */
extern "C" int
tcflush (int fd, int queue)
{
  int res = -1;

  cygheap_fdget cfd (fd);
  if (cfd < 0)
    goto out;

  if (!cfd->is_tty ())
    set_errno (ENOTTY);
  else if (queue != TCIFLUSH && queue != TCOFLUSH && queue != TCIOFLUSH)
      set_errno (EINVAL);
  else if ((res = cfd->bg_check (-SIGTTOU)) > bg_eof)
    res = cfd->tcflush (queue);

out:
  termios_printf ("%R = tcflush(%d, %d)", res, fd, queue);
  return res;
}

/* tcflow: POSIX 7.2.2.1 */
extern "C" int
tcflow (int fd, int action)
{
  int res = -1;

  cygheap_fdget cfd (fd);
  if (cfd < 0)
    goto out;

  if (!cfd->is_tty ())
    set_errno (ENOTTY);
  else if ((res = cfd->bg_check (-SIGTTOU)) > bg_eof)
    res = cfd->tcflow (action);

out:
  syscall_printf ("%R = tcflow(%d, %d)", res, fd, action);
  return res;
}

/* tcsetattr: POSIX96 7.2.1.1 */
extern "C" int
tcsetattr (int fd, int a, const struct termios *t)
{
  int res;
  t = __tonew_termios (t);
  int e = get_errno ();

  while (1)
    {
      res = -1;
      cygheap_fdget cfd (fd);
      if (cfd < 0)
	{
	  e = get_errno ();
	  break;
	}

      if (!cfd->is_tty ())
	{
	  e = ENOTTY;
	  break;
	}

      res = cfd->bg_check (-SIGTTOU);

      switch (res)
	{
	case bg_eof:
	  e = get_errno ();
	  break;
	case bg_ok:
	  if (cfd.isopen ())
	    res = cfd->tcsetattr (a, t);
	  e = get_errno ();
	  break;
	case bg_signalled:
	  if (_my_tls.call_signal_handler ())
	    continue;
	  res = -1;
	  /* fall through intentionally */
	default:
	  e = get_errno ();
	  break;
	}
      break;
    }

  set_errno (e);
  termios_printf ("iflag %y, oflag %y, cflag %y, lflag %y, VMIN %d, VTIME %d",
	t->c_iflag, t->c_oflag, t->c_cflag, t->c_lflag, t->c_cc[VMIN],
	t->c_cc[VTIME]);
  termios_printf ("%R = tcsetattr(%d, %d, %p)", res, fd, a, t);
  return res;
}

/* tcgetattr: POSIX 7.2.1.1 */
extern "C" int
tcgetattr (int fd, struct termios *in_t)
{
  int res = -1;
  struct termios *t = __makenew_termios (in_t);

  cygheap_fdget cfd (fd);
  if (cfd < 0)
    /* saw an error */;
  else if (!cfd->is_tty ())
    set_errno (ENOTTY);
  else if ((res = cfd->tcgetattr (t)) == 0)
    __toapp_termios (in_t, t);

  if (res)
    termios_printf ("%R = tcgetattr(%d, %p)", res, fd, in_t);
  else
    termios_printf ("iflag %y, oflag %y, cflag %y, lflag %y, VMIN %d, VTIME %d",
	  t->c_iflag, t->c_oflag, t->c_cflag, t->c_lflag, t->c_cc[VMIN],
	  t->c_cc[VTIME]);

  return res;
}

/* tcgetpgrp: POSIX 7.2.3.1 */
extern "C" int
tcgetpgrp (int fd)
{
  int res;

  cygheap_fdget cfd (fd);
  if (cfd < 0)
    res = -1;
  else
    res = cfd->tcgetpgrp ();

  termios_printf ("%R = tcgetpgrp(%d)", res, fd);
  return res;
}

extern "C" pid_t
tcgetsid (int fd)
{
  int res;

  cygheap_fdget cfd (fd);
  if (cfd < 0)
    res = -1;
  else
    res = cfd->tcgetsid ();

  termios_printf ("%R = tcgetsid(%d)", res, fd);
  return res;
}

/* tcsetpgrp: POSIX 7.2.4.1 */
extern "C" int
tcsetpgrp (int fd, pid_t pgid)
{
  int res = -1;

  cygheap_fdget cfd (fd);
  if (cfd < 0)
    /* saw an error */;
  else if (!cfd->is_tty ())
    set_errno (ENOTTY);
  else
    res = cfd->tcsetpgrp (pgid);

  termios_printf ("%R = tcsetpgrp(%d, %d)", res, fd, pgid);
  return res;
}

/* NIST PCTS requires not macro-only implementation */
#undef cfgetospeed
#undef cfgetispeed
#undef cfsetospeed
#undef cfsetispeed

/* cfgetospeed: POSIX96 7.1.3.1 */
extern "C" speed_t
cfgetospeed (const struct termios *tp)
{
  return __tonew_termios (tp)->c_ospeed;
}

/* cfgetispeed: POSIX96 7.1.3.1 */
extern "C" speed_t
cfgetispeed (const struct termios *tp)
{
  return __tonew_termios (tp)->c_ispeed;
}

static inline int
setspeed (speed_t &set_speed, speed_t from_speed)
{
  int res;
  switch (from_speed)
    {
    case B0:
    case B50:
    case B75:
    case B110:
    case B134:
    case B150:
    case B200:
    case B300:
    case B600:
    case B1200:
    case B1800:
    case B2400:
    case B4800:
    case B9600:
    case B19200:
    case B38400:
    case B57600:
    case B115200:
    case B128000:
    case B230400:
    case B256000:
    case B460800:
    case B500000:
    case B576000:
    case B921600:
    case B1000000:
    case B1152000:
    case B1500000:
    case B2000000:
    case B2500000:
    case B3000000:
      set_speed = from_speed;
      res = 0;
      break;
    default:
      set_errno (EINVAL);
      res = -1;
      break;
    }
  return res;
}

/* cfsetospeed: POSIX96 7.1.3.1 */
extern "C" int
cfsetospeed (struct termios *in_tp, speed_t speed)
{
  struct termios *tp = __tonew_termios (in_tp);
  int res = setspeed (tp->c_ospeed, speed);
  __toapp_termios (in_tp, tp);
  return res;
}

/* cfsetispeed: POSIX96 7.1.3.1 */
extern "C" int
cfsetispeed (struct termios *in_tp, speed_t speed)
{
  struct termios *tp = __tonew_termios (in_tp);
  int res = setspeed (tp->c_ispeed, speed);
  __toapp_termios (in_tp, tp);
  return res;
}

/* cfsetspeed: 4.4BSD */
extern "C" int
cfsetspeed (struct termios *in_tp, speed_t speed)
{
  struct termios *tp = __tonew_termios (in_tp);
  int res;
  /* errors come only from unsupported baud rates, so setspeed() would return
     identical results in both calls */
  if ((res = setspeed (tp->c_ospeed, speed)) == 0)
    setspeed (tp->c_ispeed, speed);
  __toapp_termios (in_tp, tp);
  return res;
}

extern "C" void
cfmakeraw(struct termios *tp)
{
  tp->c_iflag &= ~(IGNBRK | BRKINT | PARMRK | ISTRIP
		 | INLCR | IGNCR | ICRNL | IXON);
  tp->c_oflag &= ~OPOST;
  tp->c_lflag &= ~(ECHO | ECHONL | ICANON | ISIG | IEXTEN);
  tp->c_cflag &= ~(CSIZE | PARENB);
  tp->c_cflag |= CS8;
}
@


1.43
log
@Throughout, update copyrights to reflect dates which correspond to main-branch
checkins.  Regularize copyright format.
@
text
@d162 1
a162 1
  termios_printf ("iflag %p, oflag %p, cflag %p, lflag %p, VMIN %d, VTIME %d",
d165 1
a165 1
  termios_printf ("%R = tcsetattr(%d, %d, %x)", res, fd, a, t);
d187 1
a187 1
    termios_printf ("iflag %x, oflag %x, cflag %x, lflag %x, VMIN %d, VTIME %d",
@


1.42
log
@* termios.cc (cfsetspeed): New function.
* cygwin.din (cfsetspeed): Export.
* posix.sgml (std-bsd): Add cfsetspeed.
* include/sys/termios.h (cfsetspeed): Declare.
* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2007, 2008, 2009, 2010, 2011, 2012 Red Hat, Inc.
@


1.41
log
@tcgetsid: fix return type

* include/sys/termios.h (tcgetsid): Fix return type.
* termios.cc (tcgetsid): Likewise.
* fhandler_termios.cc (fhandler_termios::tcgetsid): Likewise.
* fhandler.h (fhandler_base): Likewise.
* fhandler.cc (fhandler_base::tcgetsid): Likewise.
@
text
@d331 14
@


1.41.2.1
log
@Pull in changes from HEAD
@
text
@a330 14
/* cfsetspeed: 4.4BSD */
extern "C" int
cfsetspeed (struct termios *in_tp, speed_t speed)
{
  struct termios *tp = __tonew_termios (in_tp);
  int res;
  /* errors come only from unsupported baud rates, so setspeed() would return
     identical results in both calls */
  if ((res = setspeed (tp->c_ospeed, speed)) == 0)
    setspeed (tp->c_ispeed, speed);
  __toapp_termios (in_tp, tp);
  return res;
}

@


1.41.2.2
log
@	* Throughout, fix format string of debug printf and api_fatal calls
	to work in 32 and 64 bit environment, as well as to honor signedness.
	Use %y instead of 0x%x.
	* fhandler.h (class fhandler_dev_mem): Change type of mem_size from
	DWORD to SIZE_T.
	* fhandler_mem.cc: Throughout, cast mem_size in comparisons to make
	GCC happy.
	* fhandler_process.cc (format_process_maps): Change type of ret_len
	to SIZE_T.
	(get_mem_values): Ditto for n and length.
	* mmap.cc (MapView): Ditto for commitsize and viewsize.
	(class mmap_record): Ditto for len.  Use SIZE_T througout for memory
	size in method args and return types.
	* ntdll.h (NtLockVirtualMemory): Fix type of memory size parameters
	to SIZE_T.
	(NtMapViewOfSection): Ditto.
	(NtQueryVirtualMemory): Ditto.
	(NtUnlockVirtualMemory): Ditto.
	(RtlFreeHeap): Change type of first parameter to HANDLE.
	* shm.cc (shmat): Change type of viewsize to SIZE_T.
	* timer.cc (timer_thread): Change type of sleep_ms to LONG.
	(ualarm): Drop casts to unsigned int in timer value computation.
@
text
@d162 1
a162 1
  termios_printf ("iflag %y, oflag %y, cflag %y, lflag %y, VMIN %d, VTIME %d",
d165 1
a165 1
  termios_printf ("%R = tcsetattr(%d, %d, %p)", res, fd, a, t);
d187 1
a187 1
    termios_printf ("iflag %y, oflag %y, cflag %y, lflag %y, VMIN %d, VTIME %d",
@


1.41.2.3
log
@Pull in changes from HEAD
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
   2008, 2009, 2010, 2011, 2012 Red Hat, Inc.
@


1.40
log
@Throughout, remove extra space after function name from debugging output.
Throughout, change syscalls to report on return values using new %R format
option.
* smallprint.cc (__small_vsprintf): Add parsing for %R to report on return
values and possible errno from syscalls.
* errno.cc (errmap): Add PRIVILEGE_NOT_HELD.
* fhandler_tty.cc (fhandler_pty_master::setup): When creating a thread use
shorter name to reduce debuggging output.
* select.cc (start_thread_pipe): Ditto.
(start_thread_serial): Ditto.
(start_thread_socket): Ditto.
(start_thread_mailslot): Ditto.
* sigproc.cc (talktome): Ditto.
@
text
@d4 1
a4 1
   2007, 2008, 2009, 2010, 2011 Red Hat, Inc.
d210 1
a210 1
extern "C" int
@


1.39
log
@* cygwin.din: Remove some _tc* exports.  Add tcgetsid().
* dtable.cc (fh_alloc): Revert ill-advised setting of major/minor.  Use new
is_dev_tty to remember that this device was opened as /dev/tty.
* fhandler.cc (fhandler_base::fstat): Remove leftover debugging statement.
(fhandler_base::tcgetsid): New function.
* fhandler.h ((fhandler_base::tcgetsid): Declare new function.
(fhandler_base::is_dev_tty): Ditto.
(fhandler_termios::opened_as_dev_tty): Declare new field.
(fhandler_termios::is_dev_tty): Declare new function.
(fhandler_termios::tcgetsid): Ditto.
(fhandler_pty_common::use_archetype): Move here from subclass.
(fhandler_pty_slave::use_archetype): Move up.
(fhandler_pty_master::use_archetype): Ditto.
* fhandler_console.cc (fhandler_console::ioctl): Rename second argument from
`buf' to `arg' for consistency.  Call ioctl_termios for common fhandler_termios
ioctl handling.
* fhandler_tty.cc (fhandler_pty_slave::ioctl): Call ioctl_termios for common
fhandler_termios ioctl handling.
(fhandler_pty_master::ioctl): Ditto.
* fhandler_termios.cc (fhandler_termios::tcgetsid): Implement new function.
(fhandler_termios::ioctl_termios): Ditto.  Implements TIOCSCTTY handling.
* syscalls.cc (stat_worker): Set /dev/tty device info when appropriate.
* termios.cc (tcgetpgrp): Avoid extraneous "isatty" check.
(tcgetsid): Implement new function.
* include/cygwin/version.h: Bump CYGWIN_VERSION_API_MINOR to 253.
* include/sys/termios.h (TIOCSCTTY): Define.
@
text
@d43 1
a43 1
  syscall_printf ("%d = tcsendbreak (%d, %d)", res, fd, duration);
d67 1
a67 1
  syscall_printf ("%d = tcdrain (%d)", res, fd);
d89 1
a89 1
  termios_printf ("%d = tcflush (%d, %d)", res, fd, queue);
d109 1
a109 1
  syscall_printf ("%d = tcflow (%d, %d)", res, fd, action);
d165 1
a165 1
  termios_printf ("%d = tcsetattr (%d, %d, %x)", res, fd, a, t);
d185 1
a185 1
    termios_printf ("%d = tcgetattr (%d, %p)", res, fd, in_t);
d206 1
a206 1
  termios_printf ("%d = tcgetpgrp (%d)", res, fd);
d221 1
a221 1
  termios_printf ("%d = tcgetsid (%d)", res, fd);
d239 1
a239 1
  termios_printf ("%d = tcsetpgrp (%d, %d)", res, fd, pgid);
@


1.38
log
@	* fcntl.cc (fcntl64): Call pthread_testcancel.
	* fhandler_socket.cc (fhandler_socket::connect): Ditto.
	(fhandler_socket::accept4): Ditto.
	(fhandler_socket::recvfrom): Ditto.
	(fhandler_socket::recvmsg): Ditto.
	(fhandler_socket::sendto): Ditto.
	(fhandler_socket::sendmsg): Ditto.
	* flock.cc (lf_setlock): Allow to cancel thread running blocking
	file lock.  Try to make code more readable.
	(lockf): Call pthread_testcancel.
	* mmap.cc (msync): Ditto.
	* posix_ipc.cc (ipc_cond_timedwait): Call pthread::static_cancel_self
	rather than pthread_testcancel.
	* select.cc (cygwin_select): Call pthread_testcancel.
	* syscalls.cc (pread): Ditto.
	(pwrite): Ditto.
	(readv): Ditto.
	(writev): Ditto.
	(open): Ditto.
	(close): Ditto.
	(fsync): Ditto.
	* termios.cc (tcdrain): Ditto.
	* thread.cc: Align list of cancellation points with above changes.
	Mark not-implemented functions, too.
	(cancelable_wait): Don't set unused object indices to WAIT_FAILED
	since that could result in wrong behaviour.  Set them to the invalid
	value WAIT_TIMEOUT + 1 instead.
@
text
@d198 1
a198 1
  int res = -1;
d202 1
a202 3
    /* saw an error */;
  else if (!cfd->is_tty ())
    set_errno (ENOTTY);
d210 15
@


1.37
log
@	* Throughout fix copyright dates.
@
text
@d51 2
@


1.36
log
@	* termios.cc (cfgetospeed, cfgetispeed): Constify argument per POSIX.
	* include/sys/termios.h (cfgetospeed, cfgetispeed): Declare functions.
	Move macros after declarations and make conditional on !__cplusplus.
@
text
@d3 2
a4 1
   Copyright 1996, 1997, 1998, 2000, 2001, 2002 Red Hat, Inc.
@


1.35
log
@* sigproc.cc (stopped_or_terminated): Don't return a match when stopsig ==
SIGCONT and not WCONTINUED.
* termios.cc (tcsetpgrp): Improve debugging output.
@
text
@d235 1
a235 1
cfgetospeed (struct termios *tp)
d242 1
a242 1
cfgetispeed (struct termios *tp)
@


1.34
log
@* Makefile.in: Add -c option which is now removed from COMPILE_C*.
* cygwin.din (cfmakeraw): Export.
* termios.cc (cfmakeraw): Implement.
* include/sys/termios.h (cfmakeraw): Declare.
* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
@
text
@d223 1
a223 1
  termios_printf ("%d = tcsetpgrp (%d, %x)", res, fd, pgid);
@


1.33
log
@Remove unneeded header files from source files throughout.
@
text
@d314 11
@


1.32
log
@	* termios.cc (setspeed): Support new baud rates introduced 2007-02-05.
@
text
@a15 1
#include <signal.h>
a23 1
#include "sigproc.h"
a24 1
#include <sys/termios.h>
@


1.31
log
@	* termios.cc: Change include order to accomodate change to sys/ioctl.h.
@
text
@d277 10
@


1.30
log
@* fhandler_serial.cc (fhandler_serial::tcgetattr): Just zero c_cflag here
rather than clearing CBAUD after the fact.
@
text
@d15 1
a23 1
#include "cygwin/version.h"
@


1.30.8.1
log
@2007-11-08  Christopher Faylor  <me+cygwin@@cgf.cx>

	* dllfixdbg: Eliminate extra objcopy step.

2007-11-07  Pedro Alves  <pedro_alves@@portugalmail.pt>

	* dllfixdbg: Pass --only-keep-debug to objcopy, instead of
	selecting the sections manually.

2007-11-06  Corinna Vinschen  <corinna@@vinschen.de>

	* thread.cc (pthread_key_create): Drop check for incoming valid object.

2007-11-06  Corinna Vinschen  <corinna@@vinschen.de>

	* shm.cc: Include sync.h
	(struct shm_shmid_list): Add ref_count member.
	(struct shm_attached_list): Remove hdl and size members.  Add a parent
	member pointing to referenced shm_shmid_list entry.
	(shm_guard): New muto.
	(SLIST_LOCK): Define.
	(SLIST_UNLOCK): Define.
	(fixup_shms_after_fork): Use hdl and size members of parent
	shm_shmid_list entry.
	(shmat): Access sequential bookkeeping lists in a thread safe way.
	Accommodate change in list element layout.  Align comments.
	(shmctl): Ditto.
	(shmdt): Ditto.
	(shmget): Ditto.

2007-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* shm.cc (shmctl): On IPC_RMID don't unmap views and don't close handle
	if the map is still referenced to emulate Linux and BSD behaviour.

2007-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* shm.cc (shmctl): On IPC_RMID also unmap all views on shared mem
	as well as connected shm_attached_list entry.

2007-10-30  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Don't remove
	write bits for directories with R/O attribute.
	(fhandler_base::fhaccess): Don't shortcircuit R/O attribute with W_OK
	scenarios for directories.

2007-09-26  Corinna Vinschen  <corinna@@vinschen.de>

	* termios.cc (setspeed): Support new baud rates introduced 2007-02-05.

2007-09-18  Corinna Vinschen  <corinna@@vinschen.de>

	* mmap.cc (fh_disk_file): Delete as global static variable and...
	(mmap64): ...define as local pointer to make mmap thread-safe.
	Accommodate throughout.  Only initialize fh_disk_file after file could
	be opened with GENERIC_EXECUTE access.

2007-09-06  Brian Dessent  <brian@@dessent.net>

	* include/sys/stdio.h (_flockfile): Don't try to lock a FILE
	that has the __SSTR flag set.
	(_ftrylockfile): Likewise.
	(_funlockfile): Likewise.

2007-08-24  Corinna Vinschen  <corinna@@vinschen.de>

	* syscalls.cc (open): Don't follow symlinks if O_EXCL is given.

2007-08-09  Ernie Coskrey  <Ernie.Coskrey@@steeleye.com>

	* gendef (sigbe): Reset "incyg" while the stack lock is active to avoid
	a potential race.

2007-08-01  Corinna Vinschen  <corinna@@vinschen.de>

	* localtime.cc (tzsetwall): Don't set TZ.

2007-07-17  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.cc (fhandler_base::fhaccess): Add check for R/O file system.

2007-07-14  Christopher Faylor  <me+cygwin@@cgf.cx>

	* init.cc (in_dllentry): Delete.
	(dll_entry): Remove assignment to deleted variable.
	* winsup.h (in_dllentry): Delete declaration.
	* exceptions.cc (inside_kernel): Use another method to see if we are in
	dll_entry phase.

2007-07-14  Christopher Faylor  <me+cygwin@@cgf.cx>

	* init.cc (in_dllentry): Make NO_COPY to avoid spurious false positives.

2007-07-09  Christopher Faylor  <me+cygwin@@cgf.cx>

	* dlfcn.cc (dlclose): Don't close handle returned from
	GetModuleHandle(NULL).

2007-07-06  Corinna Vinschen  <corinna@@vinschen.de>

	* times.cc (gettimeofday): Align definition to POSIX.

2007-07-04  Corinna Vinschen  <corinna@@vinschen.de>

	* times.cc: Define __timezonefunc__ before including time.h to protect
	definition of timezone function.

2007-07-04  Corinna Vinschen  <corinna@@vinschen.de>

	* include/cygwin/time.h: Switch to timezone variable by default.  Add
	comment.

2007-06-27  Corinna Vinschen  <corinna@@vinschen.de>

	* shared_info.h (SHARED_INFO_CB): Accommodate change to shared_info.
	(CURR_SHARED_MAGIC): Ditto.
	(class shared_info): Add heap_slop_inited member.
	* shared.cc (shared_info::heap_slop_size): Use heap_slop_inited to
	track initializing heap_slop since 0 is a valid value for heap_slop.
	Drop useless < 0 consideration.

2007-06-12  Christopher Faylor  <me+cygwin@@cgf.cx>

	* signal.cc (usleep): Use useconds_t for the type as per POSIX.

2007-06-12  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.cc (fhandler_base::fstat): Set pipe permission bits more
	correctly.

2007-05-29  Corinna Vinschen  <corinna@@vinschen.de>

	* dtable.cc (dtable::set_file_pointers_for_exec): Call SetFilePointer
	correctly for 64 bit file access.  Comment out functionality.
	* fhandler.cc (fhandler_base::open): Don't set append_mode.
	(fhandler_base::write): Check for O_APPEND instead of append_mode.
	Call SetFilePointer correctly for 64 bit file access.  Handle
	errors from SetFilePointer.
	* fhandler.h (class fhandler_base): Drop append_mode status flag.
	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Handle
	seeking correctly for 64 bit file access.

2007-05-21  Christian Franke <franke@@computer.org>

	* fhandler_floppy.cc (fhandler_dev_floppy::lseek): Don't invalidate
	devbuf if new position is within buffered range.

2007-05-21  Eric Blake  <ebb9@@byu.net>

	* include/search.h (hsearch_r): Provide declaration.

2007-05-21  Christian Franke <franke@@computer.org>
	     Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_floppy.cc (fhandler_dev_floppy::lseek): Set buf size to
	sector size.  Simplify non-sector aligned case.  Handle errors from
	raw_read.

2007-05-15  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_socket.cc (adjust_socket_file_mode): New inline function.
	(fhandler_socket::fchmod): Squeeze mode through adjust_socket_file_mode
	before using it.
	(fhandler_socket::bind): Ditto.

2007-04-18  Brian Dessent  <brian@@dessent.net>

	* cygwin.sc: Remove duplicated .debug_macinfo section.
	* dllfixdbg: Also copy DWARF-2 sections into .dbg file.

2007-04-06  Eric Blake  <ebb9@@byu.net>

	* include/stdint.h (WINT_MIN): Fix sign.

2007-04-04  Eric Blake  <ebb9@@byu.net>

	* include/stdint.h (WINT_MIN, WINT_MAX): Fix definition.

2007-03-28  Christopher Faylor  <me@@cgf.cx>

	* spawn.cc (spawn_guts): Start pure-windows processes in a suspended
	state to avoid potential DuplicateHandle problems.

2007-03-07  Christopher Faylor  <me@@cgf.cx>

	* signal.cc (handle_sigprocmask): Remove extraneous
	sig_dispatch_pending.

2007-02-26  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.cc (fhandler_base::fstat): Set all file times to arbitrary
	fixed value.

2007-02-20  Christopher Faylor  <me@@cgf.cx>

	* exceptions.cc (_cygtls::signal_exit): Only call myself.exit when when
	exit_state indicates that we've visited do_exit.
	* sync.h (lock_process::lock_process): Use renamed exit_state -
	ES_PROCESS_LOCKED.
	* winsup.h: Rename ES_MUTO_SET to ES_PROCESS_LOCKED.

2007-02-20  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_socket.cc (fhandler_socket::bind): Remove printing wrong
	errno in debug output.

2007-02-05  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_serial.cc (fhandler_serial::tcsetattr): Add support for
	baud rates up to 3000000 baud.  Add missing 128K and 256K cases.
	(fhandler_serial::tcgetattr): Ditto.
	* include/sys/termios.h: Add baud rate definitions from B460800 up to
	B3000000.

2007-01-04  Brian Ford  <Brian.Ford@@FlightSafety.com>
	     Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.h (PREFERRED_IO_BLKSIZE): Define as 64K.
	* fhandler.cc (fhandler_base::fstat): Set st_blksize to
	PREFERRED_IO_BLKSIZE.
	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Ditto.
	* fhandler_mailslot.cc (fhandler_mailslot::fstat): Ditto.
	* fhandler_raw.cc (fhandler_dev_raw::fstat): Ditto.

2006-11-08  Corinna Vinschen  <corinna@@vinschen.de>

	* security.cc (get_token_group_sidlist): Always add the local
	group to the token.

2006-07-14  Corinna Vinschen  <corinna@@vinschen.de>

	* security.cc (get_token_group_sidlist): Always add the interactive
	group to the token.  Create logon_id group SID by copying it from
	incoming group list.
@
text
@a276 10
    case B460800:
    case B500000:
    case B576000:
    case B921600:
    case B1000000:
    case B1152000:
    case B1500000:
    case B2000000:
    case B2500000:
    case B3000000:
@


1.29
log
@* fhandler_serial.cc (fhandler_serial::ioctl): Always return 0 for window size.
* termios.cc (tcgetattr): Clear out baud part of c_cflag since it is always
ignored.
@
text
@d182 1
a182 4
    {
      t->c_cflag &= ~CBAUD;
      __toapp_termios (in_t, t);
    }
@


1.28
log
@Eliminate (void) cast on standalone function calls throughout.
@
text
@d182 4
a185 1
    __toapp_termios (in_t, t);
@


1.27
log
@Rename _threadinfo to _cygtls, throughout.
* cygtls.h (_cygtls::call_signal_handler): Rename from call_signal_handler_now.
(_cygtls::push): Make second argument mandatory.
(_cygtls::fixup_after_fork): Declare new function.
(_cygtls::lock): Ditto.
* cygtls.cc (_cygtls::fixup_after_fork): Define new function.
* dcrt0.cc (cygwin_finished_initializing): Define as bool.
(alloc_stack): Use _tlstop rather than arbitrary variable in probably vain
attempt to avoid strange fork problem on CTRL-C.
(dll_crt0_0): Remove obsolete winpids::init call.
* dll_init.cc (dll_dllcrt0): Detect forkee condition as equivalent to
initializing.
* winsup.h (cygwin_finished_initializing): Declare as bool.
* exceptions.cc (handle_exceptions): Rely on cygwin_finished_initializing to
determine how to handle exception during process startup.
(_cygtls::call_signal_handler): Rename from call_signal_handler_now.
(_cygtls::interrupt_now): Fill in second argument to push.
(signal_fixup_after_fork): Eliminate.
(setup_handler): Initialize locked to avoid potential inappropriate unlock.
Resume thread if it has acquired the stack lock.
(ctrl_c_handler): Just exit if ctrl-c is hit before cygiwn has finished
initializing.
* fork.cc (sync_with_child): Don't call abort since it can cause exit
deadlocks.
(sync_with_child): Change debugging output slightly.
(fork_child): Set cygwin_finished_initializing here.  Call _cygtls fork fixup
and explicitly call sigproc_init.
(fork_parent): Release malloc lock on fork failure.
(vfork): Call signal handler via _my_tls.
* sigproc.cc (sig_send): Ditto.
* syscalls.cc (readv): Ditto.
* termios.cc (tcsetattr): Ditto.
* wait.cc (wait4): Ditto.
* signal.cc (nanosleep): Ditto.
(abort): Ditto.
(kill_pgrp): Avoid killing self if exiting.
* sync.cc (muto::acquire): Remove (temporarily?) ill-advised exiting_thread
check.
* gendef (_sigfe): Be more agressive in protecting stack pointer from other
access by signal thread.
(_cygtls::locked): Define new function.
(_sigbe): Ditto.
(_cygtls::pop): Protect edx.
(_cygtls::lock): Use guaranteed method to set eax to 1.
(longjmp): Aggressively protect signal stack.
* miscfuncs.cc (low_priority_sleep): Reduce "sleep time" for secs == 0.
* pinfo.cc (winpids::set): Counterintuitively use malloc's lock to protect
simultaneous access to the pids list since there are pathological conditions
which can cause malloc to call winpid.
(winpids::init): Eliminate.
* pinfo.h (winpids::cs): Eliminate declaration.
* pinfo.h (winpids::init): Eliminate definition.
@
text
@d182 1
a182 1
    (void) __toapp_termios (in_t, t);
d294 1
a294 1
  (void) __toapp_termios (in_tp, tp);
d304 1
a304 1
  (void) __toapp_termios (in_tp, tp);
@


1.26
log
@Eliminate use of sigframe and sigthread throughout.
* Makefile.in (DLL_OFILES): Add sigfe.o.  Remove reliance on cygwin.def from
cygwin0.dll dependency since dependence on sigfe.o implies that.  Generate def
file on the fly using 'gendef'.
* configure.in: Don't auto-generate cygwin.def.
* configure: Regenerate.
* cygwin.din: Add SIGFE stuff where appropriate.
* dcrt0.cc (dll_crt0_1): Initialize cygwin tls early in process startup.  Set
_main_tls to address of the main thread's cygwin tls.
* debug.h: Remove now unneeded WFSO and WFMO declarations.
* exceptions.cc (_last_thread): Define.
(set_thread_state_for_signals): New function.
(reset_thread_exception_for_signals): Ditto.
(init_thread_for_signals): Ditto.
(delete_thread_for_signals): Ditto.
(capture_thread_for_signals): Ditto.
(handle_exceptions): Set return address explicitly for exceptions prior to
calling sig_send.
(interrupt_on_return): Eliminate.
(setup_handler): Add preliminary implementation for dealing with
thread-specific signals by querying _main_tls.
(signal_exit): Use cygthread::main_thread_id instead of mainthread.id.
(call_signal_handler_now): For now, just handle the main thread.
* fork.cc (vfork): Save and restore main _my_tls.
* gendef: New file.  Generates def file and sigfe.s file.
* gentls_offsets: New file.  Generates offsets for perl to use in sigfe.s.
* how-signals-work.txt: Mention that info is obsolete.
* init.cc (dll_entry): Initialize cygwin tls storage here.
* miscfuncs.cc (low_priority_sleep): Make a C function for easier calling from
asm.
* perthread.h (vfork_save::tls): New element.
* signal.cc (nanosleep): Replace previous use of
sigframe.call_signal_handler_now with straight call to call_signal_handler_now.
(abort): Ditto.
* syscalls.cc (readv): Ditto.
* termios.cc (tcsetattr): Ditto.
* wait.cc (wait4): Ditto.
* sigproc.cc (sig_dispatch_pending): Ditto.
(sig_send): Ditto.
* sigproc.h: Declare call_signal_handler_now.
* thread.cc (pthread::thread_init_wrapper): Initialize cygwin tls.  Remove
obsolete and unworking signal stuff.
* thread.h (verifyable_object::sigs): Eliminate.
(verifyable_object::sigmask): Eliminate.
(verifyable_object::sigtodo): Eliminate.
(verifyable_object::exit): Make attribute noreturn.
(verifyable_object::thread_init_wrapper): Ditto.
(pthread_null::exit): Ditto.
* winbase.h (__stackbase): Always define.
* winsup.h (low_priority_sleep): Declare as a "C" function.
* include/cygwin/version.h: Bump API version to reflect sigwait export.
* include/sys/queue.h: Protect SLIST_ENTRY from previous declaration.
* signal.cc (sigwait): Implement.
* select.cc (fhandler_base::ready_for_read): Add debugging output.
* devices.h: Define more device pointers via their storage.
* devices.in: Don't parse things like /dev/inet/tcp, as they really have no
meaning.
* devices.cc: Regenerate.
* gendevices: Set proper protection for output file.
* cygtls.h: New file.
* gendef: New file.
* gentls_offsets: New file.
* tlsoffsets.h: New file.  Autogenerated.
* config/i386/longjmp.c: Remove.  File subsumed by gendef output.
* config/i386/makefrag: Remove obsolete file.
* fhandler.cc: Remove spurious access_worker declaration.
* spawn.cc (spawnve): Make debugging output more accurate.
* cygwin-gperf: Remove.
* devices.cc: Remove.
@
text
@d26 1
d150 1
a150 1
	  if (call_signal_handler_now ())
@


1.25
log
@* devices.cc: New file.
* devices.gperf: New file.
* devices.shilka: New file.
* cygwin-gperf: New file.
* cygwin-shilka: New file.
* fhandler_fifo.cc: New file.
* fhandler_nodevice.cc : New file.  Reorganize headers so that path.h precedes
fhandler.h throughout.  Remove device argument and unit arguments from fhandler
constructors throughout.  Remove pc arguments to fhandler functions and use
internal pc element instead, throughout.  Use dev element in pc throughout.
Use major/minor elements rather than units and device numbers previously in
fhandler class.  Use correct methods for fhandler file names rather than
directly accessing file name variables, throughout.
* Makefile.in (DLL_OFILES): Add devices.o, fhandler_fifo.o
* dcrt0.cc (dll_crt0_1): Call device::init.
* devices.h: Renumber devices based on more Linux-like major/minor numbers.
Add more devices.  Declare standard device storage.
(device): Declare struct.
* dir.cc (opendir): Use new 'build_fh_name' to construct a fhandler_* type.
* dtable.cc (dtable::get_debugger_info): Ditto.
(cygwin_attach_handle_to_fd): Ditto.
(dtable::release): Remove special FH_SOCKET case in favor of generic
"need_fixup_before" test.
(dtable::init_std_file_from_handle): Use either build_fh_dev or build_fh_name
to build standard fhandler.
(dtable::build_fh_name): Renamed from dtable::build_fhandler_from_name.  Move
out of dtable class.  Don't accept a path_conv argument.  Just build it here
and pass it to:
(build_fh_pc): Renamed from dtable::build_fhandler.  Move out of dtable class.
Use intrinsic device type in path_conv to create new fhandler.
(build_fh_dev): Renamed from dtable::build_fhandler.  Move out of dtable class.
Simplify arguments to just take new 'device' type and a name.  Just return
pointer to fhandler rather than trying to insert into dtable.
(dtable::dup_worker): Accommodate above build_fh name changes.
(dtable::find_fifo): New (currently broken) function.
(handle_to_fn): Use strechr for efficiency.
* dtable.h: Reflect above build_fh name changes and argument differences.
(fhandler_base *&operator []): Return self rather than copy of self.
* fhandler.cc (fhandler_base::operator =): Use pc element to set normalized
path.
(fhandler_base::set_name): Ditto.
(fhandler_base::raw_read): Use method to access name.
(fhandler_base::write): Correctly use get_output_handle rather than get_handle.
(handler_base::device_access_denied): New function.
(fhandler_base::open): Eliminate pc argument and use pc element of
fhandler_base throughout.
(fhandler_base::fstat): Detect if device is based in filesystem and use
fstat_fs to calculate stat, if so.
(fhandler_base::fhandler_base): Eliminate handling of file names and, instead,
just free appropriate component from pc.
(fhandler_base::opendir): Remove path_conv parameter.
* fhandler.h: Remove all device flags.
(fhandler_base::pc): New element.
(fhandler_base::set_name): Change argument to path_conv.
(fhandler_base::error): New function.
(fhandler_base::exists): New function.
(fhandler_base::pc_binmode): New function.
(fhandler_base::dev): New function.
(fhandler_base::open_fs): New function.
(fhandler_base::fstat_fs): New function.
(fhandler_base::fstat_by_name): New function.
(fhandler_base::fstat_by_handle): New function.
(fhandler_base::isfifo): New function.
(fhandler_base::is_slow): New function.
(fhandler_base::is_auto_device): New function.
(fhandler_base::is_fs_special): New function.
(fhandler_base::device_access_denied): New function.
(fhandler_base::operator DWORD&): New operator.
(fhandler_base::get_name): Return normalized path from pc.
(fhandler_base::get_win32_name): Return windows path from pc.
(fhandler_base::isdevice): Renamed from is_device.
(fhandler_base::get_native_name): Return device format.
(fhandler_fifo): New class.
(fhandler_nodevice): New class.
(select_stuff::device_specific): Remove array.
(select_stuff::device_specific_pipe): New class element.
(select_stuff::device_specific_socket): New class element.
(select_stuff::device_specific_serial): New class element.
(select_stuff::select_stuff): Initialize new elements.
* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Move to base class
from fhandler_disk_file.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_disk_file::open): Move most functionality into
fhandler_base::open_fs.
(fhandler_base::open_fs): New function.
(fhandler_disk_file::close): Move most functionality into
fhandler_base::close_fs.
(fhandler_base::close_fs): New function.
* fhandler_mem.cc (fhandler_dev_mem::open): Use device name in debugging
output.
* fhandler_socket.cc (fhandler_socket::set_connect_secret): Copy standard
urandom device into appropriate place.
(fhandler_socket::accept): Reflect change in fdsock return value.
* fhandler_tty.cc: See "throughouts" above.
* net.cc: Accommodate fdsock change throughout.
(fdsock): Return success or failure, accept fd argument and device argument.
* path.cc (symlink_info::major): New element.
(symlink_info::minor): New element.
(symlink_info::parse_device): Declare new function.
(fs_info::update): Accommodate changes in path_conv class.
(path_conv::fillin): Ditto.
(path_conv::return_and_clear_normalized_path): Eliminate.
(path_conv::set_normalized_path): New function.
(path_conv::path_conv): Set info in dev element.  Use path_conv methods Check
for FH_FS rather than FH_BAD to indicate when to fill in filesystem stuff.
where appropriate rather than direct access.  Use set_normalized_path to set
normalized path.
(windows_device_names): Eliminate.
(get_dev): Ditto.
(get_raw_device_number): Ditto.
(get_device_number): Ditto.
(win32_device_name): Call new device name parser to do most of the heavy
lifting.
(mount_info::conv_to_win32_path): Fill in dev field as appropriate.
(symlink_worker): Handle new device files.
(symlink_info::check): Ditto.
(symlink_info::parse_device): Define new function.
* path.h (executable_states): Move here from fhandler.h.
(fs_info): Rename variables to *_storage and create methods for accessing same.
(path_conv): Add dev element, remove devn and unit and adjust inline methods to
accommodate.
(set_normalized_path): Declare new function.
* pinfo.cc (_pinfo::commune_recv): Add broken support for handling fifos.
(_pinfo::commune_send): Ditto.
* pipe.cc (fhandler_pipe::close): check for existence of handle before closing
it.
(handler_pipe::create): Rename from make_pipe.  Change arguments to accept
fhandler_pipe array.  Accommodate fifos.
(pipe): Rework to deal with fhandler_pipe::create changes.
(_pipe): Ditto.
* select.cc: Use individual device_specific types throughout rather than
indexing with obsolete device number.
(set_bits): Use is_socket call rather than checking device number.
* shared_info.h (CURR_MOUNT_MAGIC): Update.
(conv_to_win32_path): Reflect addition of device argument.
* syscalls.cc (mknod_worker): New function.
(open): Use build_fh_name to build fhandler.
(chown_worker): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(chmod_device): New function.
(chmod): Detect if this is an 'auto' device rather than an on-filesystem device
and handle appropriately.  Use chmod_device to set mode of in-filesystem
devices.
(stat_worker): Eliminate path_conv argument.  Call build_fh_name to construct
fhandler.  Use fh->error() rather than pc->error to detect errors in fhandler
construction.
(access_worker): New function pulled from access.  Accommodate in-filesystem
devices.
(access): Use access_worker.
(fpathconf): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(mknod_worker): New function.
(mknod32): New function.
(chroot): Free normalized path -- assuming it was actually cmalloced.
* tty.cc (create_tty_master): Tweak for new device class.
(tty::common_init): Ditto.
* winsup.h (stat_worker): Remove.
(symlink_worker): Declare.
* exceptions.cc (set_process_mask): Just call sig_dispatch_pending and don't
worry about pending_signals since sig_dispatch_pending should always do the
right thing now.
(sig_handle): Reorganize SIGCONT handling to more closely conform to SUSv3.
* pinfo.h: Move __SIG enum to sigproc.h.
(PICOM_FIFO): New enum element.
(_pinfo): Remove 'thread2signal' stuff throughout class.
(_pinfo::commune_send): Make varargs.
(_pinfo::sigtodo): Eliminate.
(_pinfo::thread2signal): Ditto.
* signal.cc (kill_worker): Eliminate call to setthread2signal.
* sigproc.cc (local_sigtodo): Eliminate.
(getlocal_sigtodo): Ditto.
(sigelem): New class.
(pending_signals): New class.
(sigqueue): New variable, start of sigqueue linked list.
(sigcatch_nonmain): Eliminate.
(sigcatch_main): Eliminate.
(sigcatch_nosync): Eliminate.
(sigcomplete_nonmain): Eliminate.
(pending_signals): Eliminate.
(sig_clear): Call signal thread to clear pending signals, unless already in
signal thread.
(sigpending): Call signal thread to get pending signals.
(sig_dispatch_pending): Eliminate use of pending_signals and just check
sigqueue.
(sigproc_terminate): Eliminate all of the obsolete semaphore stuff.  Close
signal pipe handle.
(sig_send): Eliminate all of the obsolete semaphore stuff and use pipe to send
signals.
(getevent): Eliminate.
(pending_signals::add): New function.
(pending_signals::del): New function.
(pending_signals::next): New function.
(wait_sig): Eliminate all of the obsolete semaphore stuff.  Use pipe to
communicate and maintain a linked list of signals.
* sigproc.h: Move __SIG defines here.  Add __SIGPENDING.
(sig_dispatch_pending): Remove "C" specifier.
(sig_handle): Accept a mask argument.
* thread.cc: Remove signal handling considerations throughout.
@
text
@a121 2
      sigframe thisframe (mainthread);

d149 1
a149 1
	  if (thisframe.call_signal_handler ())
@


1.24
log
@	* fhandler_tty.cc (fhandler_pty_master::process_slave_output):
	Handle buf == NULL as flushing the buffer.
	(fhandler_tty_slave::read): Handle ptr == NULL as flushing the buffer.
	(fhandler_tty_slave::tcflush): Implement input queue flushing by
	calling read with NULL buffer.
	(fhandler_pty_master::tcflush): Ditto, calling process_slave_output.
	* termios.cc (tcflush): Check for legal `queue' value.  Return
	EINVAL otherwise.
@
text
@d19 1
a20 1
#include "path.h"
@


1.23
log
@Throughout, remove "include <errno.h>" from files which already include
cygerrno.h.
* include/cygwin/config.h (__DYNAMIC_REENT__): Define.
* include/cygwin/version.h: Bump API minor version.
* cygwin.din: Export __getreent
* cygerrno.h: Include errno.h.  Fix places where _impure_ptr is used directly
to store the errno value.
* debug.cc (__set_errno): Ditto.
* errno.cc: Remove _RRENT_ONLY define to get errno.cc compiled.
* signal.cc: Rename _reent_clib to _REENT throughout.
* thread.h (reent_clib): Remove prototype.
* thread.cc (reent_clib): Rename reent_clib to __getreent.  Return _impure_ptr
until MTinterface is initialized.
(reent_winsup): Fix a possible SEGV when _r == NULL.  Return NULL instead.
* MTinterface::fixup_after_fork: Switch reent back to _impure_ptr to keep
signal handling running when fork is called from a thread other than the
mainthread.
@
text
@d82 2
@


1.23.4.1
log
@* fhandler_tty.cc (fhandler_pty_master::process_slave_output): Handle buf ==
NULL as flushing the buffer.
(fhandler_tty_slave::read): Handle ptr == NULL as flushing the buffer.
(fhandler_tty_slave::tcflush): Implement input queue flushing by calling read
with NULL buffer.
(fhandler_pty_master::tcflush): Ditto, calling process_slave_output.
* termios.cc (tcflush): Check for legal `queue' value.  Return EINVAL
otherwise.
* syscalls.cc (gethostid): Add lpFreeBytesAvailable argument to
GetDiskFreeSpaceEx call since NT4 requires it.
@
text
@a81 2
  else if (queue != TCIFLUSH && queue != TCOFLUSH && queue != TCIOFLUSH)
      set_errno (EINVAL);
@


1.22
log
@* termios.cc (setspeed): New function.
(cfsetospeed): Use setspeed to set speed.
(cfsetispeed): Use setspeed to set speed.
* autoload.cc: Add load statement for UuidCreate, and UuidCreateSequential.
* cpuid.h: New file.
* cygwin.din: Export gethostid.
* fhandler_proc.cc (cpuid): Move to cpuid.h.
(can_set_flag): Move to cpuid.h.
* syscalls.cc (gethostid): New function.
* version.h: Bump DLL minor version number to 83.
@
text
@a14 1
#include <errno.h>
@


1.21
log
@* fhandler_serial.cc (fhandler_serial::open): Avoid extraneous setting of res.
* termios.cc (tcsetattr): Correctly record errno after tcsetattr call.
* fhandler_serial.cc (fhandler_serial::tcsetattr): Add error-checking so that
if any Win32 SetComm*() calls fail, errno gets set to EINVAL and tcsetattr()
returns -1.  Catch invalid bitrates, mostly.  If baud rate setting is B0, just
drop DTR and leave Win32 DCB bitrate as-is since 0 is not a valid Win32
setting.
(fhandler_serial::tcgetattr): If DTR is low, populate the bitrate as B0,
otherwise get it from the DCB.
@
text
@d250 38
d293 1
a293 1
  tp->c_ospeed = speed;
d295 1
a295 1
  return 0;
d303 1
a303 1
  tp->c_ispeed = speed;
d305 1
a305 1
  return 0;
@


1.20
log
@* fhandler.cc (fhandler_base::dup): Don't set handle on failure.  Caller has
already taken care of that.
* fhandler_console.cc (fhandler_console::open): Initialize handles to NULL.
(fhandler_console::close): Ditto.  GNUify non-GNU formatted functions calls
throughout.
@
text
@d147 1
a147 2
	  else
	    e = get_errno ();
@


1.20.16.1
log
@merge from trunk
@
text
@d147 2
a148 1
	  e = get_errno ();
@


1.20.16.2
log
@merge from trunk.
Reorganize includes throughout so that path.h comes before fhandler.h.
Eliminate path_conv arguments from fhandler functions which take them,
throughout.  Use get_name() and get_win32_name() consistently throughout for
fhandler objects.  Use build_fh_* functions throughout, where appropriate.
* fhandler.h (fhandler_base): Store path_conv struct here.  Remove dev.
* dtable.h (dtable::build_fhandler_*): Remove.
(build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* dtable.cc (build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* fhandler.h (fhandler_base::set_name): Change argument.
* fhandler.cc (fhandler_base::set_name): Just accept a path_conv argument.
(executable_states): Move.
* path.h (executable_state): Accept.
* syscalls.cc (stat_worker): Make static.
* winsup.h (stat_worker): Remove definition.
@
text
@d20 1
a21 1
#include "fhandler.h"
@


1.20.16.3
log
@merge from trunk
@
text
@a249 38
static inline int
setspeed (speed_t &set_speed, speed_t from_speed)
{
  int res;
  switch (from_speed)
    {
    case B0:
    case B50:
    case B75:
    case B110:
    case B134:
    case B150:
    case B200:
    case B300:
    case B600:
    case B1200:
    case B1800:
    case B2400:
    case B4800:
    case B9600:
    case B19200:
    case B38400:
    case B57600:
    case B115200:
    case B128000:
    case B230400:
    case B256000:
      set_speed = from_speed;
      res = 0;
      break;
    default:
      set_errno (EINVAL);
      res = -1;
      break;
    }
  return res;
}

d255 1
a255 1
  int res = setspeed (tp->c_ospeed, speed);
d257 1
a257 1
  return res;
d265 1
a265 1
  int res = setspeed (tp->c_ispeed, speed);
d267 1
a267 1
  return res;
@


1.20.16.4
log
@merge from trunk
@
text
@d15 1
@


1.19
log
@* fhandler_console.cc (fhandler_console::read): Use appropriate kill_pgrp
method.
* select.cc (peek_console): Ditto.
* fhandler_termios.cc (fhandler_termios::bg_check): Send "stopped" signal to
entire process group as dictated by SUSv3.
* termios.cc (tcsetattr): Detect when stopped signal sent and force a stop
before setting anything.
@
text
@d241 1
a241 1
  return __tonew_termios(tp)->c_ospeed;
d248 1
a248 1
  return __tonew_termios(tp)->c_ispeed;
@


1.18
log
@* dtable.cc (handle_to_fn): Attempt to handle "raw" accesses to remote shares.
* path.cc (mount_info::conv_to_win32_path): Set flags to binary when mount
entry is not found.
(mount_info::set_flags_from_win32_path): Ditto.
@
text
@d26 1
d115 1
a115 6
  int res = -1;

  cygheap_fdget cfd (fd);
  if (cfd < 0)
    goto out;

d117 1
d119 42
a160 4
  if (!cfd->is_tty ())
    set_errno (ENOTTY);
  else if ((res = cfd->bg_check (-SIGTTOU)) > bg_eof)
    res = cfd->tcsetattr (a, t);
d162 2
a163 2
out:
  termios_printf ("iflag %x, oflag %x, cflag %x, lflag %x, VMIN %d, VTIME %d",
@


1.17
log
@* exceptions.cc: Add stdlib.h include for alloca declaration.
* poll.cc: Ditto.
* termios.cc: Ditto.
* syscalls.cc (_write): Only allow zero length when fd is valid.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 2000, 2001 Red Hat, Inc.
@


1.16
log
@* fhandler.cc (fhandler_base::fork_fixup): Don't protect handle.
* dlfcn.cc: Fix to confirm to coding standards.  Reorganize includes throughout
to accomodate new cygheap.h usage.
* cygheap.h (cygheap_fdmanip): New class: simplifies locking and retrieval of
fds from cygheap->fdtab.
(cygheap_fdget): Ditto.
(cygheap_fdnew): Ditto.
* fcntl.cc (_fcntl): Use new method to lock fdtab and retrieve info.
* ioctl.cc (ioctl): Ditto.
* mmap.cc (mmap): Ditto.
* net.cc: Ditto, throughout.
* passwd.cc (getpass): Ditto.
* path.cc (fchdir): Ditto.
* pipe.cc (make_pipe): Ditto.
* sec_acl.cc (facl): Ditto.
* syscalls.cc: Ditto, throughout.
* termios.cc: Ditto, throughout.
@
text
@d17 1
@


1.15
log
@Add "path.h" include throughout, where needed.  Use new path_conv methods and
operators to simplify testing for directory and attributes, throughout.
* path.h (path_conv::exists): New method.
(path_conv::has_attribute): Ditto.
(path_conv::isdir): Ditto.
(path_conv::DWORD &): New operator.
(path_conv::int &): Ditto.
* dir.cc (rmdir): Eliminate a goto.
* dtable.cc (dtable::build_fhandler): Accept opt and suffix info for
path_conv.check.  Return fh == NULL on path_conv error.  Pass unit to set_name
as appropriate.
(dtable::reset_unix_path_name): New method.
* dtable.h (dtable): Declare new method.  Reflect arg changes to
build_fhandler.
* fhandler.cc (fhandler_disk_dummy_name): Eliminate.
(fhandler_base::set_name): Expect paths to be NULL.  Build unix_path_name from
win32_path_name when it is a device.
(fhandler_base::reset_unix_path_name): New method.
(fhandler_base::raw_read): Report EISDIR when ERROR_INVALID_FUNCTION or
ERROR_INVALID_PARAMETER and reading a directory.
(fhandler_disk_file::fstat): Don't call stat_dev since we should now never be
calling fhandler_disk_file methods with devices.
(fhandler_base::fhandler_base): Clear {unix,win32}_path_name.
(fhandler_base::~fhandler_base): Always free {unix,win32}_path_name.
(fhandler_disk_file::fhandler_disk_file): Remove set_no_free_names kludge.
(fhandler_disk_file::open): Ditto.
* fhandler.h (fhandler_base::no_free_names): Eliminate.
(fhandler_base::set_no_free_names): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::fhandler_tty_slave): Don't set
unix_path_name here.
* path.cc (fchdir): Lock fd table throughout.  Use new
dtable::reset_unix_path_name method to reset path.
* syscalls.cc (stat_worker): Reorganize to always call fstat method.  Pass
path_conv method to fhandler_*::open.
(chroot): Elminate a goto.
@
text
@d33 3
a35 5
  if (cygheap->fdtab.not_open (fd))
    {
      set_errno (EBADF);
      goto out;
    }
d37 1
a37 4
  fhandler_base *fh;
  fh = cygheap->fdtab[fd];

  if (!fh->is_tty ())
d39 2
a40 5
  else
    {
      if ((res = fh->bg_check (-SIGTTOU)) > bg_eof)
	res = fh->tcsendbreak (duration);
    }
d55 3
a57 8
  if (cygheap->fdtab.not_open (fd))
    {
      set_errno (EBADF);
      goto out;
    }

  fhandler_base *fh;
  fh = cygheap->fdtab[fd];
d59 1
a59 1
  if (!fh->is_tty ())
d61 2
a62 5
  else
    {
      if ((res = fh->bg_check (-SIGTTOU)) > bg_eof)
	res = fh->tcdrain ();
    }
d75 3
a77 8
  if (cygheap->fdtab.not_open (fd))
    {
      set_errno (EBADF);
      goto out;
    }

  fhandler_base *fh;
  fh = cygheap->fdtab[fd];
d79 1
a79 1
  if (!fh->is_tty ())
d81 2
a82 5
  else
    {
      if ((res = fh->bg_check (-SIGTTOU)) > bg_eof)
	res = fh->tcflush (queue);
    }
d95 3
a97 5
  if (cygheap->fdtab.not_open (fd))
    {
      set_errno (EBADF);
      goto out;
    }
d99 1
a99 4
  fhandler_base *fh;
  fh = cygheap->fdtab[fd];

  if (!fh->is_tty ())
d101 2
a102 5
  else
    {
      if ((res = fh->bg_check (-SIGTTOU)) > bg_eof)
	res = fh->tcflow (action);
    }
d115 3
a117 5
  if (cygheap->fdtab.not_open (fd))
    {
      set_errno (EBADF);
      goto out;
    }
d121 1
a121 4
  fhandler_base *fh;
  fh = cygheap->fdtab[fd];

  if (!fh->is_tty ())
d123 2
a124 5
  else
    {
      if ((res = fh->bg_check (-SIGTTOU)) > bg_eof)
	res = fh->tcsetattr (a, t);
    }
d141 4
a144 3
  if (cygheap->fdtab.not_open (fd))
    set_errno (EBADF);
  else if (!cygheap->fdtab[fd]->is_tty ())
d146 2
a147 5
  else
    {
      if ((res = cygheap->fdtab[fd]->tcgetattr (t)) == 0)
	(void) __toapp_termios (in_t, t);
    }
d165 4
a168 3
  if (cygheap->fdtab.not_open (fd))
    set_errno (EBADF);
  else if (!cygheap->fdtab[fd]->is_tty ())
d171 1
a171 1
    res = cygheap->fdtab[fd]->tcgetpgrp ();
d183 4
a186 3
  if (cygheap->fdtab.not_open (fd))
    set_errno (EBADF);
  else if (!cygheap->fdtab[fd]->is_tty ())
d189 1
a189 1
    res = cygheap->fdtab[fd]->tcsetpgrp (pgid);
@


1.14
log
@* dtable.cc (dtable::dup2): Allow extension of fd table by dup2.
* syscalls.cc: Minor code cleanup.
(fpathconf): Check for bad fd before doing anything else.
* termios.cc (tcsetattr): Don't convert to new termios if bad fd.
(tcgetattr): Minor debugging tweak.
@
text
@d20 1
@


1.14.4.1
log
@Merged changes from HEAD
@
text
@a19 1
#include "path.h"
@


1.14.4.2
log
@Merged changes from HEAD
@
text
@a16 1
#include <stdlib.h>
d33 5
a37 3
  cygheap_fdget cfd (fd);
  if (cfd < 0)
    goto out;
d39 4
a42 1
  if (!cfd->is_tty ())
d44 5
a48 2
  else if ((res = cfd->bg_check (-SIGTTOU)) > bg_eof)
    res = cfd->tcsendbreak (duration);
d63 8
a70 3
  cygheap_fdget cfd (fd);
  if (cfd < 0)
    goto out;
d72 1
a72 1
  if (!cfd->is_tty ())
d74 5
a78 2
  else if ((res = cfd->bg_check (-SIGTTOU)) > bg_eof)
    res = cfd->tcdrain ();
d91 8
a98 3
  cygheap_fdget cfd (fd);
  if (cfd < 0)
    goto out;
d100 1
a100 1
  if (!cfd->is_tty ())
d102 5
a106 2
  else if ((res = cfd->bg_check (-SIGTTOU)) > bg_eof)
    res = cfd->tcflush (queue);
d119 5
a123 3
  cygheap_fdget cfd (fd);
  if (cfd < 0)
    goto out;
d125 4
a128 1
  if (!cfd->is_tty ())
d130 5
a134 2
  else if ((res = cfd->bg_check (-SIGTTOU)) > bg_eof)
    res = cfd->tcflow (action);
d147 5
a151 3
  cygheap_fdget cfd (fd);
  if (cfd < 0)
    goto out;
d155 4
a158 1
  if (!cfd->is_tty ())
d160 5
a164 2
  else if ((res = cfd->bg_check (-SIGTTOU)) > bg_eof)
    res = cfd->tcsetattr (a, t);
d181 3
a183 4
  cygheap_fdget cfd (fd);
  if (cfd < 0)
    /* saw an error */;
  else if (!cfd->is_tty ())
d185 5
a189 2
  else if ((res = cfd->tcgetattr (t)) == 0)
    (void) __toapp_termios (in_t, t);
d207 3
a209 4
  cygheap_fdget cfd (fd);
  if (cfd < 0)
    /* saw an error */;
  else if (!cfd->is_tty ())
d212 1
a212 1
    res = cfd->tcgetpgrp ();
d224 3
a226 4
  cygheap_fdget cfd (fd);
  if (cfd < 0)
    /* saw an error */;
  else if (!cfd->is_tty ())
d229 1
a229 1
    res = cfd->tcsetpgrp (pgid);
@


1.14.4.3
log
@Merged changes from HEAD
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 2000, 2001, 2002 Red Hat, Inc.
@


1.14.4.4
log
@Merged changes from HEAD
@
text
@a25 1
#include "sigproc.h"
d114 6
a119 1
  int res;
a120 1
  int e = get_errno ();
d122 4
a125 42
  while (1)
    {
      sigframe thisframe (mainthread);

      res = -1;
      cygheap_fdget cfd (fd);
      if (cfd < 0)
	{
	  e = get_errno ();
	  break;
	}

      if (!cfd->is_tty ())
	{
	  e = ENOTTY;
	  break;
	}

      res = cfd->bg_check (-SIGTTOU);

      switch (res)
	{
	case bg_eof:
	  e = get_errno ();
	  break;
	case bg_ok:
	  if (cfd.isopen ())
	    res = cfd->tcsetattr (a, t);
	  else
	    e = get_errno ();
	  break;
	case bg_signalled:
	  if (thisframe.call_signal_handler ())
	    continue;
	  res = -1;
	  /* fall through intentionally */
	default:
	  e = get_errno ();
	  break;
	}
      break;
    }
d127 2
a128 2
  set_errno (e);
  termios_printf ("iflag %p, oflag %p, cflag %p, lflag %p, VMIN %d, VTIME %d",
@


1.14.4.5
log
@Merged changes from HEAD
@
text
@d241 1
a241 1
  return __tonew_termios (tp)->c_ospeed;
d248 1
a248 1
  return __tonew_termios (tp)->c_ispeed;
@


1.13
log
@Throughout, reorganize header file inclusion to put security.h prior to
fhandler.h.
* fhandler.h (fhandler_base::get_inheritance): New method.
* fhandler_socket.cc (fhandler_socket::create_secret_event): Use proper
close-on-exec inheritance when creating.
(fhandler_socket::check_peer_secret_event): Create handle as non-inheritable.
@
text
@a145 1
  t = __tonew_termios (t);
d152 2
d191 1
a191 1
    termios_printf ("%d = tcgetattr (%d, %x)", res, fd, in_t);
@


1.12
log
@forced commit
@
text
@d18 1
d22 1
a22 1
#include <cygwin/version.h>
@


1.11
log
@Throughout, change fdtab references to cygheap->fdtab.
* child_info.h (cygheap_exec_info): Eliminate special fdtab stuff.
* spawn.cc (spawn_guts): Ditto.
* cygheap.cc (cygheap_init): Initialize fdtab, if appropriate.
* cygheap.h (CYGHEAPSIZE): Include size of init_cygheap.
(_cmalloc_entry): Include fdtab here.
* dtable.h (dtable): Declare/define new methods.
* dtable.cc (dtable::vfork_child_fixup): New method.
(dtable::fixup_after_exec): Remove unneeded extra arguments.
* dcrt0.cc (dll_crt0_1): Ditto.
* environ.cc (getwinenv): Use case sensitive comparison.
(winenv): Make a copy of environment cache to avoid realloc problems when
duplicate environment variables exist in the environment.  (From Egor Duda)
* net.cc (cygwin_socket): Revert Apr 14 change.
* include/sys/file.h: Protect against previous X_OK definition.
* passwd.cc: Eliminate passwd_sem throughout.
* security.cc: Ditto.
* cygwin.din: Export New functions.
* passwd.cc (read_etc_passwd): Make race safe.
(getpwuid_r): New function.
(getpwnam_r): New function.
@
text
@@


1.10
log
@* autoload.cc (LoadDLLinitfunc): Remove debugging statement.
* exceptions.cc (sig_handle_tty_stop): Move setting of PID_STOPPED to earlier
in interrupt.
((interrupt_setup): i.e., here.
(sig_handle): Don't queue multiple SIGSTOPS.
* fhandler.h (bg_check_types): Enumerate return value of bg_check for clarity.
* signal.cc (kill_pgrp): Minor cleanup.
* fhandler_termios.cc (fhandler_termios::bg_check): Use enumerated type for
function return.  Don't raise signal if a signal is already queued.
* fhandler_console.cc (fhandler_console::read): Use enumerated return type for
bg_check.
* select.cc: Ditto, throughout.
* read.cc: Ditto, throughout.
* termios.cc: Ditto, throughout.
(_read): YA interrupt detect simplification.
* wait.cc (wait4): Ditto.
@
text
@d20 1
d31 1
a31 1
  if (fdtab.not_open (fd))
d38 1
a38 1
  fh = fdtab[fd];
d61 1
a61 1
  if (fdtab.not_open (fd))
d68 1
a68 1
  fh = fdtab[fd];
d89 1
a89 1
  if (fdtab.not_open (fd))
d96 1
a96 1
  fh = fdtab[fd];
d117 1
a117 1
  if (fdtab.not_open (fd))
d124 1
a124 1
  fh = fdtab[fd];
d146 1
a146 1
  if (fdtab.not_open (fd))
d153 1
a153 1
  fh = fdtab[fd];
d178 1
a178 1
  if (fdtab.not_open (fd))
d180 1
a180 1
  else if (!fdtab[fd]->is_tty ())
d184 1
a184 1
      if ((res = fdtab[fd]->tcgetattr (t)) == 0)
d204 1
a204 1
  if (fdtab.not_open (fd))
d206 1
a206 1
  else if (!fdtab[fd]->is_tty ())
d209 1
a209 1
    res = fdtab[fd]->tcgetpgrp ();
d221 1
a221 1
  if (fdtab.not_open (fd))
d223 1
a223 1
  else if (!fdtab[fd]->is_tty ())
d226 1
a226 1
    res = fdtab[fd]->tcsetpgrp (pgid);
@


1.9
log
@Break out more header info into separate files.  Use appropriate header files
throughout.
* shared.h: Remove.
* cygwin_version.h: New file.
* delqueue.h: New file.
* environ.h: New file.
* host_dependent.h: New file.
* perprocess.h: New file.
* registry.h: New file.
* security.h: New file.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 2000 Cygnus Solutions.
d43 1
a43 1
      if ((res = fh->bg_check (-SIGTTOU)) > 0)
d73 1
a73 1
      if ((res = fh->bg_check (-SIGTTOU)) > 0)
d101 1
a101 1
      if ((res = fh->bg_check (-SIGTTOU)) > 0)
d129 1
a129 1
      if ((res = fh->bg_check (-SIGTTOU)) > 0)
d158 1
a158 1
      if ((res = fh->bg_check (-SIGTTOU)) > 0)
@


1.8
log
@Split out tty and shared_info stuff into their own headers and use throughout.
Include sys/termios.h for files which need it.
* tty.h: New file.
* shared_info.h: New file.
* fhandler.h: Move inline methods that rely on tty stuff to
fhandler_console.cc.
* fhandler_tty.cc (fhandler_pty_master::process_slave_output): Set
output_done_event immediately after reading data to speed up tty output
processing.
(process_output): Set write_error to errno or zero.
(fhandler_tty_slave::write): Check previous write error prior to writing to
slave end of pipe.  This allows tty output to be slightly less synchronous.
* fhandler_console.cc (fhandler_console::tcsetpgrp): Moved here from
fhandler.h.
(fhandler_console::set_input_state): Ditto.
@
text
@d16 1
d20 2
@


1.7
log
@* path.cc (readlink): Check if buffer length is positive.  Truncate output to
buffer length.  Don't terminate buffer with '\0'.
@
text
@d19 1
d22 1
a22 2
extern "C"
int
d50 1
a50 2
extern "C"
int
d80 1
a80 2
extern "C"
int
d108 1
a108 2
extern "C"
int
d136 1
a136 2
extern "C"
int
d168 1
a168 2
extern "C"
int
d195 1
a195 2
extern "C"
int
d212 1
a212 2
extern "C"
int
d235 1
a235 2
extern "C"
speed_t
d242 1
a242 2
extern "C"
speed_t
d249 1
a249 2
extern "C"
int
d259 1
a259 2
extern "C"
int
@


1.6
log
@* winsup.h: Eliminate inclusion of most of the cygwin .h files.  Use .h files
only in sources which require them.
* Makefile.in: Generate dependencies with -MD option.
@
text
@d45 1
a45 1
  syscall_printf ("%d = tcsendbreak (%d, %d )", res, fd, duration);
@


1.5
log
@* cygerrno.h: New file.  Use this throughout whenever errno manipulation is
required.
* errno.cc: Use DWORD to hold Windows errors.
(geterrno_from_win_error): New function.
(seterrno_from_win_error): Use geterrno_from_win_error to convert supplied
windows error (suggested by Corinna Vinschen).
* path.cc (symlink_info): Add error element.
* path.cc (path_conv::check): Remove errno setting.  Use new symlink_info errno
element to set path_conv error, where appropriate.
(symlink_info::check): Set error element rather than attempting to manipulate
errno.  Add more checks for trailing / and /..  even though they are currently
useless.  Avoid setting EINVAL.
* path.cc (normalize_posix_path): Correct check for trailing /.
@
text
@d16 2
a18 1
#include "cygerrno.h"
@


1.4
log
@* winsup.h: Split out dtable definitions into separate header file.
* dtable.h: New file.
* sigproc.h: Eliminate pinfo.h usage here.  Use it in source files that need
it.
@
text
@d17 1
@


1.3
log
@Rename hinfo -> dtable.  Name the former dtable array 'fdtab'.
@
text
@d16 1
@


1.2
log
@* winsup.h: take out protections of environ, errno, allow C use
* *.cc: put winsup.h before other headers (for __INSIDE_CYGWIN__);
use cur_environ() instead of just environ
* times.cc: remove import protections
* glob.c: add winsup.h
* localtime.c: ditto
* smallprint.c: ditto
* Makefile.in: don't __INSIDE_CYGWIN__ as it messes up profiling.
@
text
@d24 1
a24 1
  if (dtable.not_open (fd))
d31 1
a31 1
  fh = dtable[fd];
d55 1
a55 1
  if (dtable.not_open (fd))
d62 1
a62 1
  fh = dtable[fd];
d84 1
a84 1
  if (dtable.not_open (fd))
d91 1
a91 1
  fh = dtable[fd];
d113 1
a113 1
  if (dtable.not_open (fd))
d120 1
a120 1
  fh = dtable[fd];
d143 1
a143 1
  if (dtable.not_open (fd))
d150 1
a150 1
  fh = dtable[fd];
d176 1
a176 1
  if (dtable.not_open (fd))
d178 1
a178 1
  else if (!dtable[fd]->is_tty ())
d182 1
a182 1
      if ((res = dtable[fd]->tcgetattr (t)) == 0)
d203 1
a203 1
  if (dtable.not_open (fd))
d205 1
a205 1
  else if (!dtable[fd]->is_tty ())
d208 1
a208 1
    res = dtable[fd]->tcgetpgrp ();
d221 1
a221 1
  if (dtable.not_open (fd))
d223 1
a223 1
  else if (!dtable[fd]->is_tty ())
d226 1
a226 1
    res = dtable[fd]->tcsetpgrp (pgid);
@


1.1
log
@Initial revision
@
text
@d14 1
a15 1
#include "winsup.h"
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
