head	1.29;
access;
symbols
	cygwin-1_7_35-release:1.29
	cygwin-1_7_34-release:1.29
	cygwin-1_7_33-release:1.28
	cygwin-1_7_32-release:1.28
	cygwin-1_7_31-release:1.28
	cygwin-1_7_30-release:1.28
	cygwin-1_7_29-release:1.28
	cygwin-1_7_29-release-branchpoint:1.28.0.2
	cygwin-pre-user-db:1.28
	cygwin-1_7_28-release:1.28
	cygwin-1_7_27-release:1.28
	cygwin-1_7_26-release:1.28
	cygwin-1_7_25-release:1.28
	cygwin-1_7_24-release:1.28
	cygwin-1_7_23-release:1.28
	cygwin-1_7_22-release:1.28
	cygwin-1_7_21-release:1.28
	cygwin-1_7_20-release:1.28
	cygwin-1_7_19-release:1.28
	cygwin-64bit-postmerge:1.28
	cygwin-64bit-premerge-branch:1.27.0.2
	cygwin-64bit-premerge:1.27
	cygwin-1_7_18-release:1.27
	post-ptmalloc3:1.21.2.4
	pre-ptmalloc3:1.21.2.4
	cygwin-1_7_17-release:1.21
	cygwin-64bit-branch:1.21.0.2
	cygwin-1_7_16-release:1.21
	cygwin-1_7_15-release:1.21
	cygwin-1_7_14_2-release:1.21
	cygwin-1_7_14-release:1.21
	cygwin-1_7_12-release:1.21
	cygwin-1_7_11-release:1.21
	cygwin-1_7_10-release:1.21
	signal-rewrite:1.20.0.2
	pre-notty:1.20
	cygwin-1_7_9-release:1.19
	cv-post-1_7_9:1.19.0.2
	cygwin-1_7_8-release:1.19
	cygwin-1_7_7-release:1.19
	cygwin-1_7_5-release:1.16
	cygwin-1_7_4-release:1.16
	cygwin-1_7_3-release:1.16
	cygwin-1_7_2-release:1.16
	fifo_doover3:1.16.0.4
	cygwin-1_7_1-release:1.16
	prefifo:1.16
	cv-branch-2:1.16.0.2
	pre-ripout-set_console_state_for_spawn:1.15
	EOL_registry_mounts:1.15
	preoverlapped:1.15
	drop_9x_support_start:1.15
	cr-0x5f1:1.15.0.8
	cv-branch:1.15.0.6
	pre-ptymaster-archetype:1.15
	cr-0x3b58:1.15.0.4
	cr-0x5ef:1.15.0.2
	after-mmap-privanon-noreserve:1.15
	after-mmap-revamp:1.15
	before-mmap-revamp:1.15
	cgf-more-exit-sync:1.15
	post_wait_sig_exit:1.15
	pre_wait_sig_exit:1.15
	reparent-point:1.10
	noreparent:1.10.0.4
	cr-0x5e6:1.10.0.2
	cr-0x9e:1.8.0.12
	cr-0x9d:1.8.0.10
	cgf-deleteme:1.8.0.8
	pre-sigrewrite:1.8
	corinna-01:1.8
	cr-0x9c:1.8.0.6
	cr-0x9b:1.8.0.4
	cr-0x99:1.8
	Z-emcb-cygwin_daemon:1.8.0.2
	w32api-2_2:1.7
	mingw-runtime-2_4:1.7
	pre-cgf-merge:1.8
	cgf-dev-branch:1.7.0.52
	predaemon:1.7
	cygwin_daemon_merge_HEAD:1.7
	pregp02r1:1.7.0.30
	cygnus_cvs_20020108_pre:1.7
	Z-cygwin_daemon_merge-new_HEAD:1.7
	Z-cygwin_daemon_merge_HEAD:1.7
	cygwin_daemon:1.5.0.4;
locks; strict;
comment	@ * @;


1.29
date	2014.08.15.13.50.52;	author corinna;	state Exp;
branches;
next	1.28;

1.28
date	2013.04.23.09.44.31;	author corinna;	state Exp;
branches;
next	1.27;

1.27
date	2013.01.21.07.42.02;	author cgf;	state Exp;
branches;
next	1.26;

1.26
date	2013.01.21.07.34.07;	author cgf;	state Exp;
branches;
next	1.25;

1.25
date	2013.01.21.04.34.50;	author cgf;	state Exp;
branches;
next	1.24;

1.24
date	2013.01.14.17.16.02;	author corinna;	state Exp;
branches;
next	1.23;

1.23
date	2013.01.09.16.25.15;	author corinna;	state Exp;
branches;
next	1.22;

1.22
date	2012.12.21.21.30.56;	author cgf;	state Exp;
branches;
next	1.21;

1.21
date	2011.10.15.22.37.28;	author cgf;	state Exp;
branches
	1.21.2.1;
next	1.20;

1.20
date	2011.04.28.12.13.40;	author corinna;	state Exp;
branches;
next	1.19;

1.19
date	2010.04.20.03.45.27;	author cgf;	state Exp;
branches;
next	1.18;

1.18
date	2010.04.20.03.32.37;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2010.04.16.15.42.29;	author corinna;	state Exp;
branches;
next	1.16;

1.16
date	2009.06.08.19.44.33;	author corinna;	state Exp;
branches;
next	1.15;

1.15
date	2005.08.20.06.19.54;	author cgf;	state Exp;
branches;
next	1.14;

1.14
date	2005.06.30.02.52.12;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2005.05.04.11.05.11;	author corinna;	state Exp;
branches;
next	1.12;

1.12
date	2005.05.04.11.00.22;	author corinna;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.13.16.41.30;	author corinna;	state Exp;
branches;
next	1.10;

1.10
date	2004.02.02.10.47.29;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2004.02.01.18.29.11;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2003.06.16.03.24.09;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.22.21.09.41;	author cgf;	state Exp;
branches
	1.7.52.1;
next	1.6;

1.6
date	2001.10.16.03.31.50;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.24.22.26.49;	author cgf;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2001.02.22.14.51.16;	author corinna;	state Exp;
branches;
next	1.3;

1.3
date	2001.02.22.12.56.36;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.16.23.55.57;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.08.22.03.58.46;	author cgf;	state Exp;
branches;
next	;

1.21.2.1
date	2013.01.09.16.27.19;	author corinna;	state Exp;
branches;
next	1.21.2.2;

1.21.2.2
date	2013.01.14.17.16.30;	author corinna;	state Exp;
branches;
next	1.21.2.3;

1.21.2.3
date	2013.01.21.13.52.04;	author corinna;	state Exp;
branches;
next	1.21.2.4;

1.21.2.4
date	2013.02.08.19.42.29;	author corinna;	state Exp;
branches;
next	;

1.7.52.1
date	2003.07.06.05.10.42;	author cgf;	state Exp;
branches;
next	;

1.5.4.1
date	2002.01.04.03.56.05;	author rbcollins;	state Exp;
branches;
next	;


desc
@@


1.29
log
@	* cygerrno.h (seterrno): Define as (always) inline function.
	* errno.cc (seterrno): Remove.
@
text
@/* cygerrno.h: main Cygwin header file.

   Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2009, 2010, 2011, 2012, 2013,
   2014 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#ifndef _CYGERRNO_H
#define _CYGERRNO_H
#include <errno.h>
#include "regparm.h"

void __reg3 seterrno_from_win_error (const char *file, int line, DWORD code);
void __reg3 seterrno_from_nt_status (const char *file, int line, NTSTATUS status);
int __reg2 geterrno_from_win_error (DWORD code = GetLastError (), int deferrno = 13 /*EACCESS*/);
int __reg2 geterrno_from_nt_status (NTSTATUS status, int deferrno = 13 /*EACCESS*/);

inline void __attribute__ ((always_inline))
seterrno (const char *file, int line)
{
  seterrno_from_win_error (file, line, GetLastError ());
}

#define __seterrno() seterrno (__FILE__, __LINE__)
#define __seterrno_from_win_error(val) seterrno_from_win_error (__FILE__, __LINE__, val)
#define __seterrno_from_nt_status(status) seterrno_from_nt_status (__FILE__, __LINE__, status)

extern inline int
__set_errno (const char *fn, int ln, int val)
{
  debug_printf ("%s:%d setting errno %d", fn, ln, val);
  return errno = _impure_ptr->_errno = val;
}
#define set_errno(val) __set_errno (__PRETTY_FUNCTION__, __LINE__, (val))

#define get_errno()  (errno)
extern "C" void __stdcall set_sig_errno (int e);

class save_errno
  {
    int saved;
  public:
    save_errno () {saved = get_errno ();}
    save_errno (int what) {saved = get_errno (); set_errno (what); }
    void set (int what) {set_errno (what); saved = what;}
    void reset () {saved = get_errno ();}
    ~save_errno () {errno = _impure_ptr->_errno = saved;}
  };

extern const char *__sp_fn;
extern int __sp_ln;
#endif /*_CYGERRNO_H*/
@


1.28
log
@	* Merge in cygwin-64bit-branch.
@
text
@d3 2
a4 2
   Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2009, 2010, 2011, 2012, 2013
   Red Hat, Inc.
a18 1
void __reg2 seterrno (const char *, int line);
d22 6
@


1.27
log
@* cygerrno.h (__reg3): Define.
* cygmalloc.h (__reg3): Ditto.
@
text
@d15 1
a15 10

#ifndef __reg1
# define __reg1 __stdcall __attribute__ ((regparm (1)))
#endif
#ifndef __reg2
# define __reg2 __stdcall __attribute__ ((regparm (2)))
#endif
#ifndef __reg3
# define __reg3 __stdcall __attribute__ ((regparm (3)))
#endif
@


1.26
log
@* cygerrno.h: Conditionally define __regN for cygserver.
@
text
@d22 2
a23 2
#ifndef __reg2
# define __reg2 __stdcall __attribute__ ((regparm (2)))
@


1.25
log
@Throughout, change __attribute__ ((regparm (N))) to just __regN.  Throughout,
(mainly in fhandler*) start fixing gcc 4.7.2 mismatch between regparm
definitions and declarations.
* gendef: Define some functions to take @@ declaration to accommodate _regN
defines which use __stdcall.
* gentls_offsets: Define __regN macros as empty.
* autoload.cc (wsock_init): Remove unneeded regparm attribute.
* winsup.h (__reg1): Define.
(__reg2): Define.
(__reg3): Define.
* advapi32.cc (DuplicateTokenEx): Coerce some initializers to avoid warnings
from gcc 4.7.2.
* exceptions.cc (status_info): Declare struct to use NTSTATUS.
(cygwin_exception::dump_exception): Coerce e->ExceptionCode to NTSTATUS.
* fhandler_clipboard.cc (cygnativeformat): Redefine as UINT to avoid gcc 4.7.2
warnings.
(fhandler_dev_clipboard::read): Ditto.
@
text
@d16 10
@


1.24
log
@Fix copyrights
@
text
@d3 2
a4 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2010, 2011, 2012, 2013 Red Hat, Inc.
d16 5
a20 5
void __stdcall seterrno_from_win_error (const char *file, int line, DWORD code) __attribute__ ((regparm(3)));
void __stdcall seterrno_from_nt_status (const char *file, int line, NTSTATUS status) __attribute__ ((regparm(3)));
void __stdcall seterrno (const char *, int line) __attribute__ ((regparm(2)));
int __stdcall geterrno_from_win_error (DWORD code = GetLastError (), int deferrno = 13 /*EACCESS*/) __attribute__ ((regparm(2)));
int __stdcall geterrno_from_nt_status (NTSTATUS status, int deferrno = 13 /*EACCESS*/) __attribute__ ((regparm(2)));
@


1.23
log
@	* cygerrno.h: Fix copyright.
	* exceptions.cc: Drop comment explaining removed variable.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2010, 2011, 2012 Red Hat, Inc.
@


1.22
log
@Revert the reversion and go with implementation described in cgf-000017, with
some modifications.
* init.cc (dll_entry): Revert previous change.
* miscfuncs.cc: Include sigproc.h for exit_thread declaration.
* winsup.h (ExitThread): Define as 'exit_thread' to ensure no accidental use.
* sigproc.cc (exit_thread): New function.
(wait_sig): Handle __SIGTHREADEXIT case.  Don't just block rather than
returning from this function.
* sigproc.h (__SIGTHREADEXIT): New enum.
(exit_thread): Declare.
* sync.cc (muto::release): Accept a tls command-line argument.
* sync.h (muto::release): Accept a tls command-line parameter.  Default to
&_my_tls.
* cygerrno.h (__set_errno): Define as extern so that no function code is ever
emitted.
* cygserver_ipc.h (cygserver_ipc.h): Ditto.
* miscfuncs.h (transform_chars): Ditto.
* path.h (has_attribute): Ditto.
* security.h (privilege_luid): Ditto.
* winsup.h (flush_file_buffers): Ditto.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2010, 2011 Red Hat, Inc.
@


1.21
log
@* cygerrno.h (__set_errno): Modify debugging output to make searching strace
logs easier.  Throughout, change /dev/tty* to /dev/pty*.  Throughout, add flags
argument to fhandler_*::dup methods.
* devices.in: Rename (temporarily?) /dev/ttyN to /dev/ptyN.  Add /dev/ptymN
devices for pty masters.
* devices.cc: Regenerate.
* devices.h (MAX_CONSOLES): Set to max number supported by devices.in.
(fh_devices::FH_PTMX): Rename from FH_PTYM.
(device::operator int): Return by reference.
* dtable.cc (fh_alloc): Take pc as an argument rather than just the device.
This makes debugging easier since more information is available.  Actually
implement handling for already-allocated pty master devices.  Make different
decisions when generating fhandler for not-opened devices.  Add kludge to deal
with opening /dev/tty.
(cnew_no_ctor): New macro.
(build_fh_pc): Make debugging output more verbose.  Use new clone() fhandler
interface to duplicate archetypes.  Reset last term opened.
(dtable::dup_worker): Use Use new clone() fhandler interface to duplicate
archetypes.  Pass flags to child dup handler.
(dtable::dup3): Set O_NOCTTY flag if newfd is not stdin/stdout/stderr.
* fhandler.cc (fhandler_base::reset): Rename from operator =() and reduce
functionality and sense of copy direction.
(fhandler_base::open_with_arch): Use published interface to query io_handle().
Use new copyto() fhandler method to copy from/to found archetype.
* fhandler.h: Throughout, delete size(), add copyout, clone, and fhandler_*
(void *) methods.
(fhandler_base::reset): Rename from operator =().
(fhandler_termios::is_dev_tty): Delete.
(fhandler_termios): change "protected" region to "private".
(fhandler_termios::is_dev_tty): Delete.
(fhandler_termios): Rearrange protected/public.
(fhandler_termios::fhandler_termios): Remember last fhandler_termios "opened".
(fhandler_termios::~fhandler_termios): Forget last fhandler_termios opened.
(ioctl): Rename from ioctl_termios.  Take a void * argument.  Reflect argument
change in pinfo::set_ctty.
(fhandler_console::dup): Declare new function.  Set ctty here if appropriate.
(fhandler_pty_master::from_master): Privatize.
(fhandler_pty_master::to_master): Ditto.
(fhandler_pty_master::dwProcessId): Ditto.
(fhandler_pty_master::fhandler_pty_master): Add an `int' argument.
(fhandler_pty_master::open_setup): Declare new function.
(fhandler_pty_master::~fhandler_pty_master): Declare new method.
(fhandler_nodevice): Remove commented out function declaration.
* fhandler_console.cc: Use get_ttyp() instead of tc() throughout.
(fhandler_console::dup): Define new function to set controlling ctty on dup, as
appropriate.
(fhandler_console::ioctl): Reflect ioctl_termios name change.
(fhandler_console::setup): Rename from get_tty_stuff.
(fhandler_console::open_setup): Reflect argument change in pinfo::set_ctty.
(fhandler_console::fhandler_console): Set _tc here.
* fhandler_termios.cc (handler_termios::ioctl): Rename.  Take a void * arg like
other ioctl functions.
* fhandler_tty.cc (fhandler_pty_slave::dup): Call myself->set_ctty to
potentially reset the controlling terminal.
(fhandler_pty_slave::ioctl): Reflect name/arg change for ioctl_termios.
(fhandler_pty_slave::fhandler_pty_slave): Take a "unit" argument.  Call setup()
here so that we will know the unit number of this fhandler as soon as possible.
Set the unit as appropriate.
(handler_pty_master::open): Move most stuff to constructor and open_setup.
(handler_pty_slave::open_setup): Reflect argument change in pinfo::set_ctty.
(handler_pty_master::open_setup): Define new function.
(fhandler_pty_master::cleanup): Clear handles as a flag that the destructor
does not have to do "close" operations.
(fhandler_pty_master::close): Ditto.
(fhandler_pty_master::~fhandler_pty_master): Define new method.
(fhandler_pty_master::ioctl): Reflect name/arg change for ioctl_termios.
(fhandler_pty_master::setup): Allocate tty here.  Rely on handles being
returned from allocated test rather than opening them here.  Avoid setting
_need_nl here since it is already zeroed in the constructor.  Set up device
information with DEV_TTYM_MAJOR.
* path.h (path_conv &operator =): Take a const argument.
(path_conv::dup): Ditto.
(pathconv_arg::PC_OPEN): New enum.
(pathconv_arg::PC_CTTY): Ditto.
(path_types::PATH_CTTY): Ditto.
(path_types::PATH_OPEN): Ditto.
(path_conv::isopen): New method.
(path_conv::isctty_capable): Ditto.
* path.cc (path_conv::check): Set PATH_OPEN and PATH_CTTY as appropriate.
* pipe.cc (fhandler_pipe::open): Use copyto to copy pipe handle.
* syscall.cc (open): Reinstate fd > 2 check to disallow resetting ctty on
non-std* handles.
* tty.cc (tty_list::allocate): Pass out handles for allocated tty.  use
`not_allocated' to find unallocated ttys.  Avoid keeping the lock since the
allocation of the tty should be sufficient to prevent multiple access.
(tty::not_allocated): Clarify comment.  Rename.  Return handles when an unused
tty is found.  Simply test for existing tty.
(tty::exists): Rewrite to use `not_allocated'.
* tty.h (NTTYS): Reset down to actual number supported by devices.in.
(tty::not_allocated): Declare new function.
(tty_list::allocate): Pass out read/write tty handles.  Zero them when not
found.
* fhandler_proc.cc: Reflect name change from FH_PTYM -> FH_PTMX.
* pinfo.h (pinfo::set_ctty): Reduce/reorder arguments passed in.
* pinfo.cc (pinfo::set_ctty): Ditto.  Just use tc() built into the passed-in
fhandler_termios pointer.  Return true if ctty is assigned.
* syscalls.cc (open): Call build_fh_pc with PC_OPEN flag.  Set PC_CTTY if
appropriate.
(stat_worker): Remove is_dev_tty () stuff.
@
text
@d25 1
a25 1
inline int
@


1.21.2.1
log
@Pull in changes from HEAD
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2010, 2011, 2012 Red Hat, Inc.
d25 1
a25 1
extern inline int
@


1.21.2.2
log
@Fix copyrights
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2010, 2011, 2012, 2013 Red Hat, Inc.
@


1.21.2.3
log
@Pull in changes from HEAD
@
text
@d3 1
a3 2
   Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2009, 2010, 2011, 2012, 2013
   Red Hat, Inc.
d15 5
a19 15
#ifndef __reg1
# define __reg1 __stdcall __attribute__ ((regparm (1)))
#endif
#ifndef __reg2
# define __reg2 __stdcall __attribute__ ((regparm (2)))
#endif
#ifndef __reg3
# define __reg3 __stdcall __attribute__ ((regparm (3)))
#endif

void __reg3 seterrno_from_win_error (const char *file, int line, DWORD code);
void __reg3 seterrno_from_nt_status (const char *file, int line, NTSTATUS status);
void __reg2 seterrno (const char *, int line);
int __reg2 geterrno_from_win_error (DWORD code = GetLastError (), int deferrno = 13 /*EACCESS*/);
int __reg2 geterrno_from_nt_status (NTSTATUS status, int deferrno = 13 /*EACCESS*/);
@


1.21.2.4
log
@	* regparm.h: New file to define platform dependent regparm attributes.
	Define all of them empty if __CYGMAGIC__ is defined.
	* cygerrno.h: Include regparm.h instead of defining _reg[123] here.
	* winsup.h: Ditto.
	* cygmagic: Define __CYGMAGIC__ to help generate same result on all
	platforms.
	* child_info.h (CURR_CHILD_INFO_MAGIC): Update.
	(class child_info_fork): Drop extraneous semicolon.
@
text
@d15 10
a24 1
#include "regparm.h"
@


1.20
log
@	* cygerrno.h (geterrno_from_nt_status): Declare.
	* errno.cc (geterrno_from_nt_status): Define.
	* flock.cc: Fix copyright dates.
	* ntdll.h (enum _TIMER_TYPE): Define.
	(PTIMER_APC_ROUTINE): Define.
	(NtCancelTimer): Declare.
	(NtCreateTimer): Declare.
	(NtSetTimer): Declare.
	* posix_ipc.cc (ipc_cond_timedwait): Rewrite to make interruptible and
	restartable.  Call pthread_testcancel in case of timeout to enable
	pthread_cancel on waiting thread.  Replace WFMO timeout with waiting
	for a waitable timer.  Explain why.  Replace single call to WFMO with
	two calls, one for the event, one for the mutex.  Don't lock mutex in
	case of error.
	(ipc_cond_signal): Make void function.
	(ipc_cond_close): Ditto.
	(_mq_send): Immediately return -1 in case of error from
	ipc_cond_timedwait.
	(_mq_receive): Ditto.
@
text
@d28 1
a28 1
  debug_printf ("%s:%d val %d", fn, ln, val);
@


1.19
log
@* cygerrno.h: Nevermind.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2010 Red Hat, Inc.
d19 1
@


1.18
log
@* cygerrno.h: Protect use of NTSTATUS for only when we need it.
* lib/_cygwin_crt0_common.cc: Remove unneeded declarations.
@
text
@a15 1
#ifdef _NTDLL_H
a16 1
#endif
@


1.17
log
@	* cygerrno.h (seterrno_from_nt_status): Declare.
	(__seterrno_from_nt_status): Call seterrno_from_nt_status.
	* errno.cc (seterrno_from_win_error): Set errno without calling
	set_errno to avoid packing strace output with errno messages.
	(seterrno_from_nt_status): New function to print NT status as well as
	resulting Windows error.
@
text
@d16 1
d18 1
@


1.16
log
@	* cygerrno.h (save_errno::~save_errno): Set errno directly to avoid
	flooding debug output.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003, 2004 Red Hat, Inc.
d16 1
d22 1
a22 6
#define __seterrno_from_nt_status(status) \
	({ \
	  DWORD winerr = RtlNtStatusToDosError (status); \
	  SetLastError (winerr); \
	  __seterrno_from_win_error (winerr); \
	})
@


1.15
log
@* cygerrno.h (geterrno_from_win_error): Change declaration to default to using
GetLastError and EACCESS.
* cygwin.din: Export readdir_r.
* include/cygwin/version.h: Bump API version number to 138.
* syscalls.cc (readdir_worker): New function, renamed from old readdir()
function.
(readdir): Use readdir_worker.
(readdir_r): New function.
* fhandler.h (fhandler_base::readdir): Accommodate second argument indicating
dirent buffer.
(fhandler_disk_file::readdir): Ditto.
(fhandler_cygdrive::readdir): Ditto.
(fhandler_proc::readdir): Ditto.
(fhandler_netdrive::readdir): Ditto.
(fhandler_registry::readdir): Ditto.
(fhandler_process::readdir): Ditto.
* fhandler.cc (fhandler_base::readdir): Ditto.
* fhandler_disk_file.cc (fhandler_disk_file::readdir): Ditto.
* fhandler_cygdrive.cc (fhandler_cygdrive::readdir): Ditto.
* fhandler_proc.cc (fhandler_proc::readdir): Ditto.
* fhandler_netdrive.cc (fhandler_netdrive::readdir): Ditto.
* fhandler_registry.cc (fhandler_registry::readdir): Ditto.
* fhandler_process.cc (fhandler_process::readdir): Ditto.
@
text
@d47 1
a47 1
    ~save_errno () {set_errno (saved);}
@


1.14
log
@* cygerrno.h: Make multi-inclusion safe.
* fhandler_termios.cc (fhandler_termios::tcsetpgrp): Deal with EINTR.
* dcrt0.cc (dll_crt0_0): Accommodate init_console_handler argument change.
* winsup.h: Ditto.
* fhandler_tty.cc (fhandler_tty_slave::open): Ditto.
* exceptions.cc (init_console_handler): Ditto.  Ignore console events if we're
not attached to a terminal.
* fhandler_tty.cc (fhandler_tty_slave::open): Ditto.
* wincap.cc: Implement has_null_console_handler_routine throughout.
* wincap.h: Ditto.
@
text
@d17 1
a17 1
int __stdcall geterrno_from_win_error (DWORD code, int deferrno) __attribute__ ((regparm(2)));
@


1.13
log
@	* cygerrno.h (__set_errno): Remove useless parentheses.
@
text
@d11 2
d52 1
@


1.12
log
@	* cygerrno.h (__set_errno): Define as inline function here.
	(set_errno): Always define as call to __set_errno.
	* debug.cc (__set_errno): Move to cygerrno.h.
@
text
@d30 1
a30 1
  return errno = _impure_ptr->_errno = (val);
@


1.11
log
@	* cygerrno.h (__seterrno_from_nt_status): Define. Always set Win32
	error code as well as errno. Use throughout where errno is set from
	NT status.
	(set_errno): Evaluate val only once.
	* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Fix typo in
	debug output.
	* fhandler_mem.cc (fhandler_dev_mem::open): Rely on
	__seterrno_from_nt_status setting Win32 error code in debug output.
	* fhandler_proc.cc (format_proc_uptime): Ditto.
	(format_proc_stat): Ditto.
	* fhandler_process.cc (format_process_stat): Ditto.
	* sysconf.cc (sysconf): Ditto.
@
text
@d26 6
a31 4
#ifndef DEBUGGING
#define set_errno(val) (errno = _impure_ptr->_errno = (val))
#else
int __stdcall __set_errno (const char *ln, int ln, int val) __attribute ((regparm(3)));
d33 1
a33 1
#endif
@


1.10
log
@	* cygerrno.h (set_errno): Replace semicolon with comma in non-DEBUGGING
	version to avoid compile time error.
@
text
@d19 6
d27 1
a27 1
#define set_errno(val) (errno = (val), _impure_ptr->_errno = (val))
@


1.9
log
@* cygerrno.h (set_errno): Set global errno whenever setting thread specific
version.
* debug.cc (__set_errno): Ditto.
* exceptions.cc (handle_sigsuspend): Remove spurious sig_dispatch_pending call.
(set_signal_mask): When there seem to be pending signals to dispatch, tell
signal_dispatch_pending/sig_send not to specifically call any handlers.
* sigproc.h (sig_dispatch_pending): Change declaration to void.
* sigproc.cc (sig_dispatch_pending): Change definition to void.  Take an
argument to determine whether to tell sig_send to wait for handler to be
called.
* sigproc.cc (sig_send): Don't call signal handler when sig == __SIGFLUSHFAST.
(wait_sig): Honor __SIGFLUSHFAST.  Guard against sigpacket::process nuking
si_signo.
* sigproc.h (__SIGFLUSHFAST): Define new special signal.
(sig_dispatch_pending): Change declaration to void.  Take optional boolean
argument.
* fork.cc (vfork): Add debugging output.
@
text
@d21 1
a21 1
#define set_errno(val) (errno = (val); _impure_ptr->_errno = (val))
@


1.8
log
@Throughout, remove "include <errno.h>" from files which already include
cygerrno.h.
* include/cygwin/config.h (__DYNAMIC_REENT__): Define.
* include/cygwin/version.h: Bump API minor version.
* cygwin.din: Export __getreent
* cygerrno.h: Include errno.h.  Fix places where _impure_ptr is used directly
to store the errno value.
* debug.cc (__set_errno): Ditto.
* errno.cc: Remove _RRENT_ONLY define to get errno.cc compiled.
* signal.cc: Rename _reent_clib to _REENT throughout.
* thread.h (reent_clib): Remove prototype.
* thread.cc (reent_clib): Rename reent_clib to __getreent.  Return _impure_ptr
until MTinterface is initialized.
(reent_winsup): Fix a possible SEGV when _r == NULL.  Return NULL instead.
* MTinterface::fixup_after_fork: Switch reent back to _impure_ptr to keep
signal handling running when fork is called from a thread other than the
mainthread.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003 Red Hat, Inc.
d21 1
a21 1
#define set_errno(val) (errno = (val))
@


1.7
log
@* debug.cc (set_errno): Return value of errno that was set, just like the
macro.
(setclexec_pid): Replace old handle with new handle.
* debug.h: Reflect change in arguments for setclexec_pid.
* fhandler.cc (fhandler_base::set_inheritance): Ditto.
(fhandler_base::fork_fixup): Ditto.
* cygerrno.h: Reflect return value change for set_errno.
@
text
@d3 1
a3 1
   Copyright 2000 Red Hat, Inc.
d11 2
d21 1
a21 1
#define set_errno(val) (_impure_ptr->_errno = (val))
d26 1
a26 1
#define get_errno()  (_impure_ptr->_errno)
@


1.7.52.1
log
@merge from trunk
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003 Red Hat, Inc.
a10 2
#include <errno.h>

d19 1
a19 1
#define set_errno(val) (errno = (val))
d24 1
a24 1
#define get_errno()  (errno)
@


1.6
log
@* cygerrno.h (set_errno): Define more informative version of this function for
debugging.
(__set_errno): Declare when DEBUGGING.
* cygheap.h (cygheap_fdget::cygheap_fdget): Add a flag to control when errno is
set.
* debug.cc (__set_errno): New function.
* fcntl.cc (_fcntl): Fix so that correct fd is used for second argument to
dup2.
* syscalls.cc (_cygwin_istext_for_stdio): Don't set errno here when using
cygheap_fdget.
@
text
@d21 1
a21 1
void __stdcall __set_errno (const char *ln, int ln, int val) __attribute ((regparm(3)));
@


1.5
log
@forced commit
@
text
@d18 1
d20 4
@


1.5.4.1
log
@Merged changes from HEAD
@
text
@a17 1
#ifndef DEBUGGING
a18 4
#else
int __stdcall __set_errno (const char *ln, int ln, int val) __attribute ((regparm(3)));
#define set_errno(val) __set_errno (__PRETTY_FUNCTION__, __LINE__, (val))
#endif
@


1.4
log
@        * cygerrno.h: Revert previous patch.
        * errno.cc: Ditto.
        * dir.cc: Eliminate `dir_suffixes'.
        (opendir): Remove usage of `dir_suffixes'.
        (rmdir): Ditto.
        * fhandler.cc (fhandler_disk_file::open): Remove usage of
        `inner_suffixes'.
        * path.cc: Rename `inner_suffixes' to `lnk_suffixes'.
        (path_conv::check): Remove usage of `inner_suffixes'.
        (symlink): Ditto.
        (symlink_info::check): Handle checking for `.lnk' in path_conv
        exclusively here.
        (chdir): Remove usage of `dir_suffixes'.
        * shortcut.c: Eliminate debug_printf lines.
        (check_shortcut): Don't set error except on failing ReadFile.
        * spawn.cc: Remove ".lnk" from `std_suffixes'.
        * syscalls.cc (_unlink): Remove usage of `inner_suffixes'.
        Remove ".lnk" from `stat_suffixes'.
        (_rename): Add check for renaming a symlink to keep the ".lnk"
        suffix after renaming.
@
text
@@


1.3
log
@        * shortcut.c: New file. Provides a C interface to reading of
        Windows shortcuts to avoid compiler flag `-fvtable-thunks'.
        * shortcut.h: Ditto.
        * Makefile.in: Add shortcut.o to DLL_OFILES.
        * cygerrno.h: Provide a C interface to `geterrno_from_win_error' for
        using in shortcut.c.
        * errno.cc (geterrno_from_win_error): Define as extern "C".
        * path.cc (struct symlink_info): Remove methods `check_shortcut' and
        `check_sysfile'.
        (shortcut_header): Move to shortcut.c.
        (shortcut_initalized): Ditto.
        (create_shortcut_header): Ditto.
        (cmp_shortcut_header): Ditto.
        (symlink_info::check_shortcut): Ditto. Reorganize as a plain C function.
        (symlink_info::check_sysfile): Redefine as a global function using the
        same parameter list as `check_shortcut' for clearness.
        (symlink_info::check): Change parameter list for calls to
        `check_shortcut' and `check_sysfile'.
@
text
@a10 12
#ifdef __cplusplus
extern "C" {
#endif

int __stdcall geterrno_from_win_error (DWORD code, int deferrno) __attribute__ ((regparm(2)));

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus

d13 1
a34 2

#endif /* __cplusplus */
@


1.2
log
@* Makefile.in: Remove some obsolete stuff.
* dcrt0.cc (dll_crt0_1): Call signal_fixup_after_exec where appropriate.  Set
myself->uid from parent version.  Just use ThreadItem Init method.  Close or
store hexec_proc as appropriate.
(_dll_crt0): Store user_data->forkee here so that proper tests can be made
subsequently.
(do_exit): Remove hExeced stuff.
* environ.cc (environ_init): Accept environ count as well as environ pointer.
* environ.h: Reflect above change.
* pinfo.cc (pinfo_init): Ditto.  Accept environ count.
(fixup_in_spawned_child): Remove.
* spawn.cc (spawn_guts): Move signal code to dll_crt0_1.  Don't suspend execing
process since it is no longer necessary.  Store envc.
* exceptions.cc (signal_fixup_after_exec): New function.
(call_handler): Remove hExeced test.
* child_info.h (cygheap_exec_info): Store envc as well as envp.
(child_info_spawn): Store hexec_proc so that it can be closed in child.
* path.cc (normalize_posix_path): Avoid intermediate use of temporary cwd buf.
(normalize_win32_path): Ditto.
(cwdstuff::get_initial): Always set lock.
* sigproc.h: Remove hExeced.
* strace.cc (strace::vsprntf): Modify to accomodate for lack of hExeced.
* thread.cc (MTinterface::Init): Merge Init1 and ClearReent into this method.
(MTinterface::Init1): Eliminate.
(MTinterface::ClearReent): Eliminate.
* thread.h: Reflect above changes.
* include/sys/strace.h (strace): Make microseconds() public.  Make various
functions 'regparm', throughout.
* pinfo.h (_pinfo): Inline simple signal manipulation functions.  Requires
inclusion of thread.h which was removed from .cc files, where appropriate.
throughout.
* pinfo.cc: Eliminate signal manipulation functions.
(_pinfo::exit): Calculate total rusage for exiting process here.
* cygheap.cc (size2bucket): Eliminate.
(init_buckets): Ditto.
(_cmalloc): Calculate size and bits in a loop rather than going through a
function call.
(_crealloc): Use stored array index to calculate allocated size.
* spawn.cc (spawn_guts): Use _pinfo exit method to exit, calculating cpu usage.
@
text
@d11 12
a24 1
int __stdcall geterrno_from_win_error (DWORD code, int deferrno) __attribute__ ((regparm(2)));
d46 2
@


1.1
log
@* cygerrno.h: New file.  Use this throughout whenever errno manipulation is
required.
* errno.cc: Use DWORD to hold Windows errors.
(geterrno_from_win_error): New function.
(seterrno_from_win_error): Use geterrno_from_win_error to convert supplied
windows error (suggested by Corinna Vinschen).
* path.cc (symlink_info): Add error element.
* path.cc (path_conv::check): Remove errno setting.  Use new symlink_info errno
element to set path_conv error, where appropriate.
(symlink_info::check): Set error element rather than attempting to manipulate
errno.  Add more checks for trailing / and /..  even though they are currently
useless.  Avoid setting EINVAL.
* path.cc (normalize_posix_path): Correct check for trailing /.
@
text
@d11 3
a13 3
void __stdcall seterrno_from_win_error (const char *file, int line, DWORD code);
void __stdcall seterrno (const char *, int line);
int __stdcall geterrno_from_win_error (DWORD code, int deferrno);
@

