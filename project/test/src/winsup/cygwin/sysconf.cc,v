head	1.65;
access;
symbols
	cygwin-1_7_35-release:1.65
	cygwin-1_7_34-release:1.65
	cygwin-1_7_33-release:1.65
	cygwin-1_7_32-release:1.65
	cygwin-1_7_31-release:1.65
	cygwin-1_7_30-release:1.65
	cygwin-1_7_29-release:1.65
	cygwin-1_7_29-release-branchpoint:1.65.0.2
	cygwin-pre-user-db:1.65
	cygwin-1_7_28-release:1.65
	cygwin-1_7_27-release:1.65
	cygwin-1_7_26-release:1.65
	cygwin-1_7_25-release:1.65
	cygwin-1_7_24-release:1.65
	cygwin-1_7_23-release:1.65
	cygwin-1_7_22-release:1.65
	cygwin-1_7_21-release:1.65
	cygwin-1_7_20-release:1.65
	cygwin-1_7_19-release:1.65
	cygwin-64bit-postmerge:1.65
	cygwin-64bit-premerge-branch:1.64.0.2
	cygwin-64bit-premerge:1.64
	cygwin-1_7_18-release:1.64
	post-ptmalloc3:1.63.2.3
	pre-ptmalloc3:1.63.2.3
	cygwin-1_7_17-release:1.63
	cygwin-64bit-branch:1.63.0.2
	cygwin-1_7_16-release:1.63
	cygwin-1_7_15-release:1.63
	cygwin-1_7_14_2-release:1.63
	cygwin-1_7_14-release:1.63
	cygwin-1_7_12-release:1.63
	cygwin-1_7_11-release:1.62
	cygwin-1_7_10-release:1.62
	signal-rewrite:1.61.0.2
	pre-notty:1.59
	cygwin-1_7_9-release:1.54
	cv-post-1_7_9:1.54.0.2
	cygwin-1_7_8-release:1.54
	cygwin-1_7_7-release:1.54
	cygwin-1_7_5-release:1.53
	cygwin-1_7_4-release:1.53
	cygwin-1_7_3-release:1.53
	cygwin-1_7_2-release:1.53
	fifo_doover3:1.53.0.2
	cygwin-1_7_1-release:1.53
	prefifo:1.52
	cv-branch-2:1.52.0.2
	pre-ripout-set_console_state_for_spawn:1.52
	EOL_registry_mounts:1.51
	preoverlapped:1.51
	drop_9x_support_start:1.49
	cr-0x5f1:1.45.0.4
	cv-branch:1.45.0.2
	pre-ptymaster-archetype:1.45
	cr-0x3b58:1.42.0.4
	cr-0x5ef:1.42.0.2
	after-mmap-privanon-noreserve:1.41
	after-mmap-revamp:1.41
	before-mmap-revamp:1.41
	cgf-more-exit-sync:1.40
	post_wait_sig_exit:1.40
	pre_wait_sig_exit:1.40
	reparent-point:1.38
	noreparent:1.38.0.2
	cr-0x5e6:1.36.0.2
	cr-0x9e:1.32.0.6
	cr-0x9d:1.32.0.4
	cgf-deleteme:1.32.0.2
	pre-sigrewrite:1.32
	corinna-01:1.32
	cr-0x9c:1.31.0.4
	cr-0x9b:1.31.0.2
	cr-0x99:1.30
	Z-emcb-cygwin_daemon:1.30.0.2
	w32api-2_2:1.26
	mingw-runtime-2_4:1.26
	pre-cgf-merge:1.31
	cgf-dev-branch:1.26.0.2
	predaemon:1.21
	cygwin_daemon_merge_HEAD:1.21
	pregp02r1:1.21.0.30
	cygnus_cvs_20020108_pre:1.21
	Z-cygwin_daemon_merge-new_HEAD:1.24
	Z-cygwin_daemon_merge_HEAD:1.24
	cygwin_daemon:1.18.0.2;
locks; strict;
comment	@// @;
expand	@o@;


1.65
date	2013.04.23.09.44.34;	author corinna;	state Exp;
branches;
next	1.64;

1.64
date	2013.01.21.04.38.28;	author cgf;	state Exp;
branches;
next	1.63;

1.63
date	2012.03.08.09.36.11;	author corinna;	state Exp;
branches
	1.63.2.1;
next	1.62;

1.62
date	2011.12.22.11.02.36;	author corinna;	state Exp;
branches;
next	1.61;

1.61
date	2011.07.21.09.39.21;	author yselkowitz;	state Exp;
branches;
next	1.60;

1.60
date	2011.07.18.23.08.09;	author yselkowitz;	state Exp;
branches;
next	1.59;

1.59
date	2011.06.06.05.02.13;	author cgf;	state Exp;
branches;
next	1.58;

1.58
date	2011.05.17.17.08.09;	author yselkowitz;	state Exp;
branches;
next	1.57;

1.57
date	2011.05.15.18.49.39;	author corinna;	state Exp;
branches;
next	1.56;

1.56
date	2011.05.06.18.53.21;	author yselkowitz;	state Exp;
branches;
next	1.55;

1.55
date	2011.05.02.16.11.06;	author yselkowitz;	state Exp;
branches;
next	1.54;

1.54
date	2010.08.09.16.47.47;	author yselkowitz;	state Exp;
branches;
next	1.53;

1.53
date	2009.11.12.14.40.47;	author corinna;	state Exp;
branches;
next	1.52;

1.52
date	2008.04.07.18.45.59;	author cgf;	state Exp;
branches;
next	1.51;

1.51
date	2007.06.11.17.38.27;	author corinna;	state Exp;
branches;
next	1.50;

1.50
date	2007.02.22.17.09.46;	author corinna;	state Exp;
branches;
next	1.49;

1.49
date	2007.02.14.10.06.45;	author corinna;	state Exp;
branches;
next	1.48;

1.48
date	2007.02.08.13.36.53;	author corinna;	state Exp;
branches;
next	1.47;

1.47
date	2007.02.07.17.22.40;	author corinna;	state Exp;
branches;
next	1.46;

1.46
date	2006.11.07.17.59.54;	author corinna;	state Exp;
branches;
next	1.45;

1.45
date	2006.05.28.15.50.14;	author cgf;	state Exp;
branches;
next	1.44;

1.44
date	2006.04.13.12.14.58;	author corinna;	state Exp;
branches;
next	1.43;

1.43
date	2006.04.13.12.14.05;	author corinna;	state Exp;
branches;
next	1.42;

1.42
date	2005.12.22.05.57.54;	author cgf;	state Exp;
branches;
next	1.41;

1.41
date	2005.10.18.18.51.33;	author corinna;	state Exp;
branches;
next	1.40;

1.40
date	2005.04.13.16.41.33;	author corinna;	state Exp;
branches;
next	1.39;

1.39
date	2005.01.12.22.40.46;	author cgf;	state Exp;
branches;
next	1.38;

1.38
date	2004.09.03.01.53.12;	author cgf;	state Exp;
branches;
next	1.37;

1.37
date	2004.05.28.19.50.07;	author cgf;	state Exp;
branches;
next	1.36;

1.36
date	2004.05.17.16.06.00;	author corinna;	state Exp;
branches;
next	1.35;

1.35
date	2004.04.14.10.20.25;	author corinna;	state Exp;
branches;
next	1.34;

1.34
date	2004.02.09.04.04.24;	author cgf;	state Exp;
branches;
next	1.33;

1.33
date	2004.02.03.21.59.26;	author cgf;	state Exp;
branches;
next	1.32;

1.32
date	2003.09.25.00.37.17;	author cgf;	state Exp;
branches;
next	1.31;

1.31
date	2003.09.04.10.57.58;	author corinna;	state Exp;
branches;
next	1.30;

1.30
date	2003.07.17.07.35.16;	author corinna;	state Exp;
branches;
next	1.29;

1.29
date	2003.07.09.23.59.47;	author cgf;	state Exp;
branches;
next	1.28;

1.28
date	2003.07.09.01.33.06;	author cgf;	state Exp;
branches;
next	1.27;

1.27
date	2003.06.16.03.24.12;	author cgf;	state Exp;
branches;
next	1.26;

1.26
date	2003.01.10.12.32.47;	author corinna;	state Exp;
branches
	1.26.2.1;
next	1.25;

1.25
date	2003.01.01.18.12.49;	author cgf;	state Exp;
branches;
next	1.24;

1.24
date	2002.09.22.03.38.57;	author cgf;	state Exp;
branches
	1.24.16.1;
next	1.23;

1.23
date	2002.06.05.04.01.43;	author cgf;	state Exp;
branches;
next	1.22;

1.22
date	2002.03.12.08.57.22;	author corinna;	state Exp;
branches;
next	1.21;

1.21
date	2001.11.05.06.09.08;	author cgf;	state Exp;
branches;
next	1.20;

1.20
date	2001.10.15.23.39.33;	author cgf;	state Exp;
branches;
next	1.19;

1.19
date	2001.10.01.04.10.07;	author cgf;	state Exp;
branches;
next	1.18;

1.18
date	2001.09.12.17.46.36;	author corinna;	state Exp;
branches
	1.18.2.1;
next	1.17;

1.17
date	2001.09.11.20.01.01;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2001.09.07.21.32.05;	author cgf;	state Exp;
branches;
next	1.15;

1.15
date	2001.08.16.14.29.21;	author corinna;	state Exp;
branches;
next	1.14;

1.14
date	2001.08.16.14.20.09;	author corinna;	state Exp;
branches;
next	1.13;

1.13
date	2001.08.04.21.10.52;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2001.07.26.19.22.24;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.24.22.26.53;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2001.04.18.21.10.14;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2001.01.15.10.58.19;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.28.05.41.43;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.24.18.44.56;	author corinna;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.22.05.10.20;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.22.03.58.47;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.12.05.35.42;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.12.04.48.44;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.02.16.28.18;	author dj;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.63.2.1
date	2012.11.12.17.26.24;	author corinna;	state Exp;
branches;
next	1.63.2.2;

1.63.2.2
date	2012.12.10.11.45.51;	author corinna;	state Exp;
branches;
next	1.63.2.3;

1.63.2.3
date	2013.01.21.13.52.11;	author corinna;	state Exp;
branches;
next	1.63.2.4;

1.63.2.4
date	2013.03.27.11.16.52;	author corinna;	state Exp;
branches;
next	;

1.26.2.1
date	2003.02.14.03.03.29;	author cgf;	state Exp;
branches;
next	1.26.2.2;

1.26.2.2
date	2003.07.06.05.10.43;	author cgf;	state Exp;
branches;
next	1.26.2.3;

1.26.2.3
date	2003.07.10.01.06.23;	author cgf;	state Exp;
branches;
next	1.26.2.4;

1.26.2.4
date	2003.08.06.03.58.58;	author cgf;	state Exp;
branches;
next	1.26.2.5;

1.26.2.5
date	2003.09.10.16.23.39;	author cgf;	state Exp;
branches;
next	;

1.24.16.1
date	2003.01.01.18.16.37;	author cgf;	state Exp;
branches;
next	;

1.18.2.1
date	2001.10.02.12.09.56;	author rbcollins;	state Exp;
branches;
next	1.18.2.2;

1.18.2.2
date	2002.01.04.03.56.11;	author rbcollins;	state Exp;
branches;
next	1.18.2.3;

1.18.2.3
date	2002.06.13.14.34.13;	author rbcollins;	state Exp;
branches;
next	1.18.2.4;

1.18.2.4
date	2002.09.22.10.01.29;	author scottc;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.65
log
@	* Merge in cygwin-64bit-branch.
@
text
@/* sysconf.cc

   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2007, 2008, 2009, 2010, 2011, 2012, 2013 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include "winsup.h"
#include <unistd.h>
#include <sys/param.h>
#include <sys/sysinfo.h>
#include "cygerrno.h"
#include "security.h"
#include "path.h"
#include "fhandler.h"
#include "dtable.h"
#include "pinfo.h"
#include "ntdll.h"

static long
get_open_max (int in)
{
  long max = getdtablesize ();
  if (max < OPEN_MAX)
    max = OPEN_MAX;
  return max;
}

static long
get_page_size (int in)
{
  return wincap.allocation_granularity ();
}

static long
get_nproc_values (int in)
{
  NTSTATUS status;
  SYSTEM_BASIC_INFORMATION sbi;

  status = NtQuerySystemInformation (SystemBasicInformation, (PVOID) &sbi,
				     sizeof sbi, NULL);
  if (!NT_SUCCESS (status))
    {
      __seterrno_from_nt_status (status);
      debug_printf ("NtQuerySystemInformation: status %y, %E", status);
      return -1;
    }
  switch (in)
    {
    case _SC_NPROCESSORS_CONF:
      return sbi.NumberProcessors;
    case _SC_NPROCESSORS_ONLN:
      {
	int i = 0;
	do
	 if (sbi.ActiveProcessors & 1)
	   i++;
	while (sbi.ActiveProcessors >>= 1);
	return i;
      }
    case _SC_PHYS_PAGES:
      return sbi.NumberOfPhysicalPages
	     / (wincap.allocation_granularity () / wincap.page_size ());
    }
  return -1;
}

static long
get_avphys (int in)
{
  NTSTATUS status;
  SYSTEM_PERFORMANCE_INFORMATION spi;

  status = NtQuerySystemInformation (SystemPerformanceInformation,
				     (PVOID) &spi, sizeof spi, NULL);
  if (!NT_SUCCESS (status))
    {
      __seterrno_from_nt_status (status);
      debug_printf ("NtQuerySystemInformation: status %y, %E", status);
      return -1;
    }
  return spi.AvailablePages
	 / (wincap.allocation_granularity () / wincap.page_size ());
}

enum sc_type { nsup, cons, func };

static struct
{
  sc_type type;
  union
    {
      long c;
      long (*f)(int);
    };
} sca[] =
{
  {cons, {c:ARG_MAX}},			/*   0, _SC_ARG_MAX */
  {cons, {c:CHILD_MAX}},		/*   1, _SC_CHILD_MAX */
  {cons, {c:CLOCKS_PER_SEC}},		/*   2, _SC_CLK_TCK */
  {cons, {c:NGROUPS_MAX}},		/*   3, _SC_NGROUPS_MAX */
  {func, {f:get_open_max}},		/*   4, _SC_OPEN_MAX */
  {cons, {c:_POSIX_JOB_CONTROL}},	/*   5, _SC_JOB_CONTROL */
  {cons, {c:_POSIX_SAVED_IDS}},		/*   6, _SC_SAVED_IDS */
  {cons, {c:_POSIX_VERSION}},		/*   7, _SC_VERSION */
  {func, {f:get_page_size}},		/*   8, _SC_PAGESIZE */
  {func, {f:get_nproc_values}},		/*   9, _SC_NPROCESSORS_CONF */
  {func, {f:get_nproc_values}},		/*  10, _SC_NPROCESSORS_ONLN */
  {func, {f:get_nproc_values}},		/*  11, _SC_PHYS_PAGES */
  {func, {f:get_avphys}},		/*  12, _SC_AVPHYS_PAGES */
  {cons, {c:MQ_OPEN_MAX}},		/*  13, _SC_MQ_OPEN_MAX */
  {cons, {c:MQ_PRIO_MAX}},		/*  14, _SC_MQ_PRIO_MAX */
  {cons, {c:RTSIG_MAX}},		/*  15, _SC_RTSIG_MAX */
  {cons, {c:-1L}},			/*  16, _SC_SEM_NSEMS_MAX */
  {cons, {c:SEM_VALUE_MAX}},		/*  17, _SC_SEM_VALUE_MAX */
  {cons, {c:SIGQUEUE_MAX}},		/*  18, _SC_SIGQUEUE_MAX */
  {cons, {c:TIMER_MAX}},		/*  19, _SC_TIMER_MAX */
  {nsup, {c:0}},			/*  20, _SC_TZNAME_MAX */
  {cons, {c:-1L}},			/*  21, _SC_ASYNCHRONOUS_IO */
  {cons, {c:_POSIX_FSYNC}},		/*  22, _SC_FSYNC */
  {cons, {c:_POSIX_MAPPED_FILES}},	/*  23, _SC_MAPPED_FILES */
  {cons, {c:-1L}},			/*  24, _SC_MEMLOCK */
  {cons, {c:_POSIX_MEMLOCK_RANGE}},	/*  25, _SC_MEMLOCK_RANGE */
  {cons, {c:_POSIX_MEMORY_PROTECTION}},	/*  26, _SC_MEMORY_PROTECTION */
  {cons, {c:_POSIX_MESSAGE_PASSING}},	/*  27, _SC_MESSAGE_PASSING */
  {cons, {c:-1L}},			/*  28, _SC_PRIORITIZED_IO */
  {cons, {c:_POSIX_REALTIME_SIGNALS}},	/*  29, _SC_REALTIME_SIGNALS */
  {cons, {c:_POSIX_SEMAPHORES}},	/*  30, _SC_SEMAPHORES */
  {cons, {c:_POSIX_SHARED_MEMORY_OBJECTS}},	/*  31, _SC_SHARED_MEMORY_OBJECTS */
  {cons, {c:_POSIX_SYNCHRONIZED_IO}},	/*  32, _SC_SYNCHRONIZED_IO */
  {cons, {c:_POSIX_TIMERS}},		/*  33, _SC_TIMERS */
  {nsup, {c:0}},			/*  34, _SC_AIO_LISTIO_MAX */
  {nsup, {c:0}},			/*  35, _SC_AIO_MAX */
  {nsup, {c:0}},			/*  36, _SC_AIO_PRIO_DELTA_MAX */
  {nsup, {c:0}},			/*  37, _SC_DELAYTIMER_MAX */
  {cons, {c:PTHREAD_KEYS_MAX}},		/*  38, _SC_THREAD_KEYS_MAX */
  {cons, {c:PTHREAD_STACK_MIN}},	/*  39, _SC_THREAD_STACK_MIN */
  {cons, {c:-1L}},			/*  40, _SC_THREAD_THREADS_MAX */
  {cons, {c:TTY_NAME_MAX}},		/*  41, _SC_TTY_NAME_MAX */
  {cons, {c:_POSIX_THREADS}},		/*  42, _SC_THREADS */
  {cons, {c:_POSIX_THREAD_ATTR_STACKADDR}},/*  43, _SC_THREAD_ATTR_STACKADDR */
  {cons, {c:_POSIX_THREAD_ATTR_STACKSIZE}},/*  44, _SC_THREAD_ATTR_STACKSIZE */
  {cons, {c:_POSIX_THREAD_PRIORITY_SCHEDULING}},	/*  45, _SC_THREAD_PRIORITY_SCHEDULING */
  {cons, {c:-1L}},			/*  46, _SC_THREAD_PRIO_INHERIT */
  {cons, {c:-1L}},			/*  47, _SC_THREAD_PRIO_PROTECT */
  {cons, {c:_POSIX_THREAD_PROCESS_SHARED}},	/*  48, _SC_THREAD_PROCESS_SHARED */
  {cons, {c:_POSIX_THREAD_SAFE_FUNCTIONS}},	/*  49, _SC_THREAD_SAFE_FUNCTIONS */
  {cons, {c:16384L}},			/*  50, _SC_GETGR_R_SIZE_MAX */
  {cons, {c:16384L}},			/*  51, _SC_GETPW_R_SIZE_MAX */
  {cons, {c:LOGIN_NAME_MAX}},		/*  52, _SC_LOGIN_NAME_MAX */
  {cons, {c:PTHREAD_DESTRUCTOR_ITERATIONS}},	/*  53, _SC_THREAD_DESTRUCTOR_ITERATIONS */
  {cons, {c:_POSIX_ADVISORY_INFO}},	/*  54, _SC_ADVISORY_INFO */
  {cons, {c:ATEXIT_MAX}},		/*  55, _SC_ATEXIT_MAX */
  {cons, {c:-1L}},			/*  56, _SC_BARRIERS */
  {cons, {c:BC_BASE_MAX}},		/*  57, _SC_BC_BASE_MAX */
  {cons, {c:BC_DIM_MAX}},		/*  58, _SC_BC_DIM_MAX */
  {cons, {c:BC_SCALE_MAX}},		/*  59, _SC_BC_SCALE_MAX */
  {cons, {c:BC_STRING_MAX}},		/*  60, _SC_BC_STRING_MAX */
  {cons, {c:_POSIX_CLOCK_SELECTION}},	/*  61, _SC_CLOCK_SELECTION */
  {nsup, {c:0}},			/*  62, _SC_COLL_WEIGHTS_MAX */
  {cons, {c:_POSIX_CPUTIME}},		/*  63, _SC_CPUTIME */
  {cons, {c:EXPR_NEST_MAX}},		/*  64, _SC_EXPR_NEST_MAX */
  {cons, {c:HOST_NAME_MAX}},		/*  65, _SC_HOST_NAME_MAX */
  {cons, {c:IOV_MAX}},			/*  66, _SC_IOV_MAX */
  {cons, {c:_POSIX_IPV6}},		/*  67, _SC_IPV6 */
  {cons, {c:LINE_MAX}},			/*  68, _SC_LINE_MAX */
  {cons, {c:_POSIX_MONOTONIC_CLOCK}},	/*  69, _SC_MONOTONIC_CLOCK */
  {cons, {c:_POSIX_RAW_SOCKETS}},	/*  70, _SC_RAW_SOCKETS */
  {cons, {c:_POSIX_READER_WRITER_LOCKS}},	/*  71, _SC_READER_WRITER_LOCKS */
  {cons, {c:_POSIX_REGEXP}},		/*  72, _SC_REGEXP */
  {cons, {c:RE_DUP_MAX}},		/*  73, _SC_RE_DUP_MAX */
  {cons, {c:_POSIX_SHELL}},		/*  74, _SC_SHELL */
  {cons, {c:-1L}},			/*  75, _SC_SPAWN */
  {cons, {c:_POSIX_SPIN_LOCKS}},	/*  76, _SC_SPIN_LOCKS */
  {cons, {c:-1L}},			/*  77, _SC_SPORADIC_SERVER */
  {nsup, {c:0}},			/*  78, _SC_SS_REPL_MAX */
  {cons, {c:SYMLOOP_MAX}},		/*  79, _SC_SYMLOOP_MAX */
  {cons, {c:_POSIX_THREAD_CPUTIME}},	/*  80, _SC_THREAD_CPUTIME */
  {cons, {c:-1L}},			/*  81, _SC_THREAD_SPORADIC_SERVER */
  {cons, {c:-1L}},			/*  82, _SC_TIMEOUTS */
  {cons, {c:-1L}},			/*  83, _SC_TRACE */
  {cons, {c:-1L}},			/*  84, _SC_TRACE_EVENT_FILTER */
  {nsup, {c:0}},			/*  85, _SC_TRACE_EVENT_NAME_MAX */
  {cons, {c:-1L}},			/*  86, _SC_TRACE_INHERIT */
  {cons, {c:-1L}},			/*  87, _SC_TRACE_LOG */
  {nsup, {c:0}},			/*  88, _SC_TRACE_NAME_MAX */
  {nsup, {c:0}},			/*  89, _SC_TRACE_SYS_MAX */
  {nsup, {c:0}},			/*  90, _SC_TRACE_USER_EVENT_MAX */
  {cons, {c:-1L}},			/*  91, _SC_TYPED_MEMORY_OBJECTS */
  {cons, {c:_POSIX_V6_ILP32_OFF32}},	/*  92, _SC_V6_ILP32_OFF32 */
  {cons, {c:_POSIX_V6_ILP32_OFFBIG}},	/*  93, _SC_V6_ILP32_OFFBIG */
  {cons, {c:_POSIX_V6_LP64_OFF64}},	/*  94, _SC_V6_LP64_OFF64 */
  {cons, {c:_POSIX_V6_LPBIG_OFFBIG}},	/*  95, _SC_V6_LPBIG_OFFBIG */
  {cons, {c:_XOPEN_CRYPT}},		/*  96, _SC_XOPEN_CRYPT */
  {cons, {c:_XOPEN_ENH_I18N}},		/*  97, _SC_XOPEN_ENH_I18N */
  {cons, {c:-1L}},			/*  98, _SC_XOPEN_LEGACY */
  {cons, {c:-1L}},			/*  99, _SC_XOPEN_REALTIME */
  {cons, {c:STREAM_MAX}},		/* 100, _SC_STREAM_MAX */
  {cons, {c:_POSIX_PRIORITY_SCHEDULING}},	/* 101, _SC_PRIORITY_SCHEDULING */
  {cons, {c:-1L}},			/* 102, _SC_XOPEN_REALTIME_THREADS */
  {cons, {c:_XOPEN_SHM}},		/* 103, _SC_XOPEN_SHM */
  {cons, {c:-1L}},			/* 104, _SC_XOPEN_STREAMS */
  {cons, {c:-1L}},			/* 105, _SC_XOPEN_UNIX */
  {cons, {c:_XOPEN_VERSION}},		/* 106, _SC_XOPEN_VERSION */
  {cons, {c:_POSIX2_CHAR_TERM}},	/* 107, _SC_2_CHAR_TERM */
  {cons, {c:_POSIX2_C_BIND}},		/* 108, _SC_2_C_BIND */
  {cons, {c:_POSIX2_C_BIND}},		/* 109, _SC_2_C_DEV */
  {cons, {c:-1L}},			/* 110, _SC_2_FORT_DEV */
  {cons, {c:-1L}},			/* 111, _SC_2_FORT_RUN */
  {cons, {c:-1L}},			/* 112, _SC_2_LOCALEDEF */
  {cons, {c:-1L}},			/* 113, _SC_2_PBS */
  {cons, {c:-1L}},			/* 114, _SC_2_PBS_ACCOUNTING */
  {cons, {c:-1L}},			/* 115, _SC_2_PBS_CHECKPOINT */
  {cons, {c:-1L}},			/* 116, _SC_2_PBS_LOCATE */
  {cons, {c:-1L}},			/* 117, _SC_2_PBS_MESSAGE */
  {cons, {c:-1L}},			/* 118, _SC_2_PBS_TRACK */
  {cons, {c:_POSIX2_SW_DEV}},		/* 119, _SC_2_SW_DEV */
  {cons, {c:_POSIX2_UPE}},		/* 120, _SC_2_UPE */
  {cons, {c:_POSIX2_VERSION}},		/* 121, _SC_2_VERSION */
  {cons, {c:-1L}},			/* 122, _SC_THREAD_ROBUST_PRIO_INHERIT */
  {cons, {c:-1L}},			/* 123, _SC_THREAD_ROBUST_PRIO_PROTECT */
  {cons, {c:-1L}},			/* 124, _SC_XOPEN_UUCP */
};

#define SC_MIN _SC_ARG_MAX
#define SC_MAX _SC_XOPEN_UUCP

/* sysconf: POSIX 4.8.1.1 */
/* Allows a portable app to determine quantities of resources or
   presence of an option at execution time. */
long int
sysconf (int in)
{
  if (in >= SC_MIN && in <= SC_MAX)
    {
      switch (sca[in].type)
	{
	case nsup:
	  break;
	case cons:
	  return sca[in].c;
	case func:
	  return sca[in].f (in);
	}
    }
  /* Unimplemented sysconf name or invalid option value. */
  set_errno (EINVAL);
  return -1L;
}

#define ls(s)	sizeof(s),s

static struct
{
  size_t l;
  const char *s;
} csa[] =
{
  {ls ("/bin:/usr/bin")},		/* _CS_PATH */
  {0, NULL},				/* _CS_POSIX_V6_ILP32_OFF32_CFLAGS */
  {0, NULL},				/* _CS_POSIX_V6_ILP32_OFF32_LDFLAGS */
  {0, NULL},				/* _CS_POSIX_V6_ILP32_OFF32_LIBS */
  {0, NULL},				/* _CS_XBS5_ILP32_OFF32_LINTFLAGS */
#ifdef __x86_64__
  {0, NULL},				/* _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS */
  {0, NULL},				/* _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS */
  {0, NULL},				/* _CS_POSIX_V6_ILP32_OFFBIG_LIBS */
  {0, NULL},				/* _CS_XBS5_ILP32_OFFBIG_LINTFLAGS */
  {ls ("")},				/* _CS_POSIX_V6_LP64_OFF64_CFLAGS */
  {ls ("")},				/* _CS_POSIX_V6_LP64_OFF64_LDFLAGS */
  {ls ("")},				/* _CS_POSIX_V6_LP64_OFF64_LIBS */
  {ls ("")},				/* _CS_XBS5_LP64_OFF64_LINTFLAGS */
  {ls ("")},				/* _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS */
  {ls ("")},				/* _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS */
  {ls ("")},				/* _CS_POSIX_V6_LPBIG_OFFBIG_LIBS */
  {ls ("")},				/* _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS */
  {ls ("POSIX_V6_LP64_OFF64")},		/* _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS */
#else
  {ls ("")},				/* _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS */
  {ls ("")},				/* _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS */
  {ls ("")},				/* _CS_POSIX_V6_ILP32_OFFBIG_LIBS */
  {ls ("")},				/* _CS_XBS5_ILP32_OFFBIG_LINTFLAGS */
  {0, NULL},				/* _CS_POSIX_V6_LP64_OFF64_CFLAGS */
  {0, NULL},				/* _CS_POSIX_V6_LP64_OFF64_LDFLAGS */
  {0, NULL},				/* _CS_POSIX_V6_LP64_OFF64_LIBS */
  {0, NULL},				/* _CS_XBS5_LP64_OFF64_LINTFLAGS */
  {0, NULL},				/* _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS */
  {0, NULL},				/* _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS */
  {0, NULL},				/* _CS_POSIX_V6_LPBIG_OFFBIG_LIBS */
  {0, NULL},				/* _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS */
  {ls ("POSIX_V6_ILP32_OFFBIG")},	/* _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS */
#endif
  {ls ("")},				/* _CS_POSIX_V7_THREADS_CFLAGS */
  {ls ("")},				/* _CS_POSIX_V7_THREADS_LDFLAGS */
  {ls ("POSIXLY_CORRECT=1")},		/* _CS_V7_ENV */
};

#define CS_MIN _CS_PATH
#define CS_MAX _CS_V7_ENV

extern "C" size_t
confstr (int in, char *buf, size_t len)
{
  if (in >= CS_MIN && in <= CS_MAX)
    {
      if (csa[in].l && len)
	{
	  buf[0] = 0;
	  strncat (buf, csa[in].s, MIN (len, csa[in].l) - 1);
	}
      return csa[in].l;
    }
  /* Invalid option value. */
  set_errno (EINVAL);
  return 0;
}

extern "C" int
get_nprocs_conf (void)
{
  return get_nproc_values (_SC_NPROCESSORS_CONF);
}

extern "C" int
get_nprocs (void)
{
  return get_nproc_values (_SC_NPROCESSORS_ONLN);
}

extern "C" long
get_phys_pages (void)
{
  return get_nproc_values (_SC_PHYS_PAGES);
}

extern "C" long
get_avphys_pages (void)
{
  return get_avphys (_SC_AVPHYS_PAGES);
}

extern "C" int
sysinfo (struct sysinfo *info)
{
  unsigned long long uptime = 0ULL, totalram = 0ULL, freeram = 0ULL,
		totalswap = 0ULL, freeswap = 0ULL;
  MEMORYSTATUSEX memory_status;
  PSYSTEM_PAGEFILE_INFORMATION spi = NULL;
  ULONG sizeof_spi = 512;
  PSYSTEM_TIMEOFDAY_INFORMATION stodi = NULL;
  const ULONG sizeof_stodi = sizeof (SYSTEM_TIMEOFDAY_INFORMATION);
  NTSTATUS status = STATUS_SUCCESS;
  winpids pids ((DWORD) 0);

  if (!info)
    {
      set_errno (EFAULT);
      return -1;
    }

  stodi = (PSYSTEM_TIMEOFDAY_INFORMATION) malloc (sizeof_stodi);
  status = NtQuerySystemInformation (SystemTimeOfDayInformation, (PVOID) stodi,
				     sizeof_stodi, NULL);
  if (NT_SUCCESS (status))
    uptime = (stodi->CurrentTime.QuadPart - stodi->BootTime.QuadPart)
	     / 10000000ULL;
  else
    debug_printf ("NtQuerySystemInformation(SystemTimeOfDayInformation), "
		  "status %y", status);

  if (stodi)
    free (stodi);

  memory_status.dwLength = sizeof (MEMORYSTATUSEX);
  GlobalMemoryStatusEx (&memory_status);
  totalram = memory_status.ullTotalPhys / wincap.page_size ();
  freeram = memory_status.ullAvailPhys / wincap.page_size ();

  spi = (PSYSTEM_PAGEFILE_INFORMATION) malloc (sizeof_spi);
  if (spi)
    {
      status = NtQuerySystemInformation (SystemPagefileInformation, (PVOID) spi,
					 sizeof_spi, &sizeof_spi);
      if (status == STATUS_INFO_LENGTH_MISMATCH)
	{
	  free (spi);
	  spi = (PSYSTEM_PAGEFILE_INFORMATION) malloc (sizeof_spi);
	  if (spi)
	    status = NtQuerySystemInformation (SystemPagefileInformation,
					       (PVOID) spi, sizeof_spi,
					       &sizeof_spi);
	}
    }
  if (!spi || !NT_SUCCESS (status))
    {
      debug_printf ("NtQuerySystemInformation(SystemPagefileInformation), "
		    "status %y", status);
      totalswap = (memory_status.ullTotalPageFile - memory_status.ullTotalPhys)
		  / wincap.page_size ();
      freeswap = (memory_status.ullAvailPageFile - memory_status.ullTotalPhys)
		 / wincap.page_size ();
    }
  else
    {
      PSYSTEM_PAGEFILE_INFORMATION spp = spi;
      do
	{
	  totalswap += spp->CurrentSize;
	  freeswap += spp->CurrentSize - spp->TotalUsed;
	}
      while (spp->NextEntryOffset
	     && (spp = (PSYSTEM_PAGEFILE_INFORMATION)
			   ((char *) spp + spp->NextEntryOffset)));
    }
  if (spi)
    free (spi);

  info->uptime = (long) uptime;
  info->totalram = (unsigned long) totalram;
  info->freeram = (unsigned long) freeram;
  info->totalswap = (unsigned long) totalswap;
  info->freeswap = (unsigned long) freeswap;
  info->procs = (unsigned short) pids.npids;
  info->mem_unit = (unsigned int) wincap.page_size ();

  /* FIXME: unsupported */
  info->loads[0] = 0UL;
  info->loads[1] = 0UL;
  info->loads[2] = 0UL;
  info->sharedram = 0UL;
  info->bufferram = 0UL;
  info->totalhigh = 0UL;
  info->freehigh = 0UL;

  return 0;
}
@


1.64
log
@Throughout, update copyrights to reflect dates which correspond to main-branch
checkins.  Regularize copyright format.
@
text
@d4 1
a4 1
   2007, 2008, 2009, 2010, 2011, 2012 Red Hat, Inc.
d50 1
a50 1
      debug_printf ("NtQuerySystemInformation: status %p, %E", status);
d84 1
a84 1
      debug_printf ("NtQuerySystemInformation: status %d, %E", status);
d195 1
a195 1
  {cons, {c:-1L}},			/*  92, _SC_V6_ILP32_OFF32 */
d197 2
a198 2
  {cons, {c:-1L}},			/*  94, _SC_V6_LP64_OFF64 */
  {cons, {c:-1L}},			/*  95, _SC_V6_LPBIG_OFFBIG */
d269 15
d297 1
d355 2
a356 2
  PSYSTEM_TIME_OF_DAY_INFORMATION stodi = NULL;
  const ULONG sizeof_stodi = sizeof (SYSTEM_TIME_OF_DAY_INFORMATION);
d366 1
a366 1
  stodi = (PSYSTEM_TIME_OF_DAY_INFORMATION) malloc (sizeof_stodi);
d374 1
a374 1
		  "status %p", status);
d402 1
a402 1
		    "status %p", status);
@


1.63
log
@	* Throughout, replace usage of w32api's min with MIN from sys/param.h.
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
   2006, 2007, 2009, 2010, 2011, 2012 Red Hat, Inc.
@


1.63.2.1
log
@	* dlfcn.cc (dlopen): Change cast to accommodate type change in ntdll.h
	* fhandler_process.cc (thread_info::thread_info): Change type of local
	variable size to ULONG to match NtQuerySystemInformation call.
	Add cast to avoid compiler warnings.
	(get_process_state): Add cast to avoid compiler warnings.  Accommodate
	name change of NextEntryOffset member of PSYSTEM_PROCESS_INFORMATION
	structure.
	* mmap.cc: Add casts to avoid compiler warnings.
	(mlock): Change type of local variables min and max to match
	GetProcessWorkingSetSize call.
	* nlsfuncs.cc (__collate_range_cmp): Add casts to avoid compiler
	warnings.
	* ntdll.h: Drop accommodations for Mingw32.  Fix a couple of formatting
	glitches.  Add a comment to all structures explicitely tested on 64 bit.
	(SYSTEM_INFORMATION_CLASS): Change SystemProcessesAndThreadsInformation
	to SystemProcessInformation and SystemProcessorTimes to
	SystemProcessorPerformanceInformation to match MSDN.
	(SYSTEM_BASIC_INFORMATION): Fix member types to match 64 bit.
	(SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION): Rename from
	SYSTEM_PROCESSOR_TIMES to use official name from MSDN.  Accommodate
	throughout.  Drop unneeded align attribute.
	(VM_COUNTERS): Fix member types to match 64 bit.
	(SYSTEM_PROCESS_INFORMATION): Rename from SYSTEM_PROCESSES to use
	official name from MSDN.  Fix member types to match 64 bit.  Change
	member names to match MSDN and Mingw64.  Accommodate throughout.
	(IO_STATUS_BLOCK): Change to use MSDN definition.
	(SYSTEM_TIMEOFDAY_INFORMATION): Rename from
	SYSTEM_TIME_OF_DAY_INFORMATION to use official name from MSDN.
	Accommodate throughout.  Add Reserved1 area per MSDN.
	(LDR_DATA_TABLE_ENTRY): Add comment for future reference.  Change
	type of LoadCount to USHORT.
	(PEB_LDR_DATA): Change type of Initialized to BOOLEAN.  Add comment for
	future reference.
	(PEB): Fix member types to match 64 bit.
	(GDI_TEB_BATCH): New type.
	(TEB): Fix member types to match 64 bit.
	(PROCESS_BASIC_INFORMATION): Ditto.
	(MEMORY_WORKING_SET_LIST): Ditto.
	(SharedUserData): Change comment to note the fact that the address
	is valid on 32 and 64 bit.
	* pinfo.cc (winpids::enum_processes): Add cast to avoid compiler
	warnings.
	* select.cc (pipe_data_available): Add braces in initalization of an
	IO_STATUS_BLOCK to match new definition.
	* wincap.h (class wincapc): Change type of wow64 to ULONG_PTR to match
	MSDN description.
	(wincapc::is_wow64): Convert return value explicitely to bool.
	* wow64.cc (wow64_test_for_64bit_parent): Change type of wow64 to
	ULONG_PTR to match MSDN description.  Add a cast to avoid compiler
	warning.
	* regex/engine.c: Avoid compiler warnings about unused and potentially
	uninitialized variables.
	* regex/regcomp.c: Ditto.  Drop unnecessary definition of LCID.
@
text
@d339 2
a340 2
  PSYSTEM_TIMEOFDAY_INFORMATION stodi = NULL;
  const ULONG sizeof_stodi = sizeof (SYSTEM_TIMEOFDAY_INFORMATION);
d350 1
a350 1
  stodi = (PSYSTEM_TIMEOFDAY_INFORMATION) malloc (sizeof_stodi);
@


1.63.2.2
log
@	* Throughout, fix format string of debug printf and api_fatal calls
	to work in 32 and 64 bit environment, as well as to honor signedness.
	Use %y instead of 0x%x.
	* fhandler.h (class fhandler_dev_mem): Change type of mem_size from
	DWORD to SIZE_T.
	* fhandler_mem.cc: Throughout, cast mem_size in comparisons to make
	GCC happy.
	* fhandler_process.cc (format_process_maps): Change type of ret_len
	to SIZE_T.
	(get_mem_values): Ditto for n and length.
	* mmap.cc (MapView): Ditto for commitsize and viewsize.
	(class mmap_record): Ditto for len.  Use SIZE_T througout for memory
	size in method args and return types.
	* ntdll.h (NtLockVirtualMemory): Fix type of memory size parameters
	to SIZE_T.
	(NtMapViewOfSection): Ditto.
	(NtQueryVirtualMemory): Ditto.
	(NtUnlockVirtualMemory): Ditto.
	(RtlFreeHeap): Change type of first parameter to HANDLE.
	* shm.cc (shmat): Change type of viewsize to SIZE_T.
	* timer.cc (timer_thread): Change type of sleep_ms to LONG.
	(ualarm): Drop casts to unsigned int in timer value computation.
@
text
@d50 1
a50 1
      debug_printf ("NtQuerySystemInformation: status %y, %E", status);
d84 1
a84 1
      debug_printf ("NtQuerySystemInformation: status %y, %E", status);
d358 1
a358 1
		  "status %y", status);
d386 1
a386 1
		    "status %y", status);
@


1.63.2.3
log
@Pull in changes from HEAD
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2007, 2008, 2009, 2010, 2011, 2012 Red Hat, Inc.
@


1.63.2.4
log
@	* sysconf.cc (sca): Change build environment values according to
	architecture.
	(csa): Ditto.
@
text
@d4 1
a4 1
   2007, 2008, 2009, 2010, 2011, 2012, 2013 Red Hat, Inc.
d195 1
a195 1
  {cons, {c:_POSIX_V6_ILP32_OFF32}},	/*  92, _SC_V6_ILP32_OFF32 */
d197 2
a198 2
  {cons, {c:_POSIX_V6_LP64_OFF64}},	/*  94, _SC_V6_LP64_OFF64 */
  {cons, {c:_POSIX_V6_LPBIG_OFFBIG}},	/*  95, _SC_V6_LPBIG_OFFBIG */
a268 15
#ifdef __x86_64__
  {0, NULL},				/* _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS */
  {0, NULL},				/* _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS */
  {0, NULL},				/* _CS_POSIX_V6_ILP32_OFFBIG_LIBS */
  {0, NULL},				/* _CS_XBS5_ILP32_OFFBIG_LINTFLAGS */
  {ls ("")},				/* _CS_POSIX_V6_LP64_OFF64_CFLAGS */
  {ls ("")},				/* _CS_POSIX_V6_LP64_OFF64_LDFLAGS */
  {ls ("")},				/* _CS_POSIX_V6_LP64_OFF64_LIBS */
  {ls ("")},				/* _CS_XBS5_LP64_OFF64_LINTFLAGS */
  {ls ("")},				/* _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS */
  {ls ("")},				/* _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS */
  {ls ("")},				/* _CS_POSIX_V6_LPBIG_OFFBIG_LIBS */
  {ls ("")},				/* _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS */
  {ls ("POSIX_V6_LP64_OFF64")},		/* _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS */
#else
a281 1
#endif
@


1.62
log
@	Throughout use wincap.allocation_granularity instead of getpagesize.
	Throughout use wincap.page_size instead of getsystempagesize.
	Throughout use "status" as variable name to hold NTSTATUS values.
	* fhandler_mem.cc: Check for NT_SUCCESS rather than for STATUS_SUCCESS.
	Fix debug_printf output.  Rectify long statements.  Fix comment
	formatting.
	* fhandler_proc.cc: Ditto.
	(format_proc_swaps): Drop useless test for ERROR_PROC_NOT_FOUND.
	* fhandler_process.cc: Ditto as in fhandler_mem.cc.
	(get_process_state): Rearrange allocation loop.  Use malloc/realloc.
	(get_mem_values): Fix potential NULL pointer usage.  Drop unused
	variable.
	* pinfo.cc (winpids::enum_processes): Handle low memory gracefully.
	* sec_auth.cc (get_priv_list): Drop local variable ret.
	* shared.cc (memory_init): Drop outdated call to getpagesize.
	* syscalls.cc (getsystempagesize): Remove.
	* sysconf.cc: Check for NT_SUCCESS rather than for STATUS_SUCCESS.
	(sysinfo): Constify sizeof_stodi.  Drop useless test for
	ERROR_PROC_NOT_FOUND.
	* thread.cc (pthread_getattr_np): Cast pointers to uintptr_t rather
	than to int for pointer arithmetic.
	* winsup.h (getsystempagesize): Drop declaration.
@
text
@d4 1
a4 1
   2006, 2007, 2009, 2010, 2011 Red Hat, Inc.
d14 1
d298 1
a298 1
	  strncat (buf, csa[in].s, min (len, csa[in].l) - 1);
@


1.61
log
@* cygwin.din (pthread_condattr_getclock): Export.
(pthread_condattr_setclock): Export.
* posix.sgml (std-notimpl): Move pthread_condattr_getclock and
pthread_condattr_setclock from here...
(std-susv4): ... to here.
* sysconf.cc (sca): Set _SC_CLOCK_SELECTION to _POSIX_CLOCK_SELECTION.
* thread.cc: (pthread_condattr::pthread_condattr): Initialize clock_id.
(pthread_cond::pthread_cond): Initialize clock_id.
(pthread_cond_timedwait): Use clock_gettime() instead of gettimeofday()
in order to support all allowed clocks.
(pthread_condattr_getclock): New function.
(pthread_condattr_setclock): New function.
* thread.h (class pthread_condattr): Add clock_id member.
(class pthread_cond): Ditto.
* include/pthread.h: Remove obsolete comment.
(pthread_condattr_getclock): Declare.
(pthread_condattr_setclock): Declare.
* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
@
text
@d35 1
a35 1
  return getpagesize ();
d41 1
a41 1
  NTSTATUS ret;
d43 4
a46 2
  if ((ret = NtQuerySystemInformation (SystemBasicInformation, (PVOID) &sbi,
				       sizeof sbi, NULL)) != STATUS_SUCCESS)
d48 2
a49 3
      __seterrno_from_nt_status (ret);
      debug_printf ("NtQuerySystemInformation: ret %d, Dos(ret) %E",
		    ret);
d67 1
a67 1
	     / (getpagesize () / getsystempagesize ());
d75 1
a75 1
  NTSTATUS ret;
d77 4
a80 3
  if ((ret = NtQuerySystemInformation (SystemPerformanceInformation,
				       (PVOID) &spi, sizeof spi, NULL))
      != STATUS_SUCCESS)
d82 2
a83 3
      __seterrno_from_nt_status (ret);
      debug_printf ("NtQuerySystemInformation: ret %d, Dos(ret) %E",
		    ret);
d86 2
a87 1
  return spi.AvailablePages / (getpagesize () / getsystempagesize ());
d339 2
a340 2
  ULONG sizeof_stodi = sizeof (SYSTEM_TIME_OF_DAY_INFORMATION);
  NTSTATUS ret = STATUS_SUCCESS;
d350 5
a354 4
  ret = NtQuerySystemInformation (SystemTimeOfDayInformation, (PVOID) stodi,
				  sizeof_stodi, NULL);
  if (NT_SUCCESS (ret))
    uptime = (stodi->CurrentTime.QuadPart - stodi->BootTime.QuadPart) / 10000000ULL;
d356 2
a357 4
    {
      debug_printf ("NtQuerySystemInformation(SystemTimeOfDayInformation), "
		  "status %p", ret);
    }
d364 2
a365 2
  totalram = memory_status.ullTotalPhys / getsystempagesize ();
  freeram = memory_status.ullAvailPhys / getsystempagesize ();
d370 3
a372 3
      ret = NtQuerySystemInformation (SystemPagefileInformation, (PVOID) spi,
				      sizeof_spi, &sizeof_spi);
      if (ret == STATUS_INFO_LENGTH_MISMATCH)
d377 3
a379 2
	    ret = NtQuerySystemInformation (SystemPagefileInformation,
					    (PVOID) spi, sizeof_spi, &sizeof_spi);
d382 1
a382 1
  if (!spi || ret || (!ret && GetLastError () == ERROR_PROC_NOT_FOUND))
d385 1
a385 1
		  "status %p", ret);
d387 1
a387 1
			/ getsystempagesize ();
d389 1
a389 1
			/ getsystempagesize ();
d412 1
a412 1
  info->mem_unit = (unsigned int) getsystempagesize ();
@


1.60
log
@* sysconf.cc (sca): Return -1 for _SC_THREAD_ROBUST_PRIO_INHERIT,
_SC_THREAD_ROBUST_PRIO_PROTECT, and _SC_XOPEN_UUCP.
(SC_MAX): Redefine accordingly.
(csa): Return strings for _CS_POSIX_V7_THREADS_CFLAGS,
_CS_POSIX_V7_THREADS_LDFLAGS, and _CS_V7_ENV.
(CS_MAX): Redefine accordingly.
* include/limits.h (LONG_BIT): Define.
(WORD_BIT): Define.
@
text
@d161 1
a161 1
  {cons, {c:-1L}},			/*  61, _SC_CLOCK_SELECTION */
@


1.59
log
@whitespace elimination
@
text
@d222 3
d228 1
a228 1
#define SC_MAX _SC_2_VERSION
d265 1
a265 1
  {0, NULL},				/* _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS */
d279 3
d285 1
a285 1
#define CS_MAX _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
@


1.58
log
@* cygwin.din (clock_getcpuclockid): Export.
(pthread_getcpuclockid): Export.
* hires.h (PID_TO_CLOCKID): New macro.
(CLOCKID_TO_PID): New macro.
(CLOCKID_IS_PROCESS): New macro.
(THREADID_TO_CLOCKID): New macro.
(CLOCKID_TO_THREADID): New macro.
(CLOCKID_IS_THREAD): New macro.
* ntdll.h (enum _THREAD_INFORMATION_CLASS): Add ThreadTimes.
* posix.sgml (std-notimpl): Add clock_getcpuclockid and
pthread_getcpuclockid from here...
(std-susv4): ... to here.
(std-notes): Remove limitations of clock_getres and clock_gettime.
Note limitation of timer_create to CLOCK_REALTIME.
* sysconf.cc (sca): Set _SC_CPUTIME to _POSIX_CPUTIME, and
_SC_THREAD_CPUTIME to _POSIX_THREAD_CPUTIME.
* thread.cc (pthread_getcpuclockid): New function.
* timer.cc (timer_create): Set errno to ENOTSUP for CPU-time clocks.
* times.cc (clock_gettime): Handle CLOCK_PROCESS_CPUTIME_ID and
CLOCK_THREAD_CPUTIME_ID.
(clock_getres): Ditto.
(clock_settime): Set errno to EPERM for CPU-time clocks.
(clock_getcpuclockid): New function.
* include/pthread.h (pthread_getcpuclockid): Declare.
* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
@
text
@d379 1
a379 1
                        / getsystempagesize ();
d381 1
a381 1
                        / getsystempagesize ();
@


1.57
log
@	* cygwin.din (pthread_attr_getguardsize): Export.
	(pthread_attr_setguardsize): Export.
	(pthread_attr_setstack): Export.
	(pthread_attr_setstackaddr): Export.
	* init.cc (dll_entry): Remove wow64_test_stack_marker.  Check for
	unusual stack address by testing stack addresses from current TEB.
	Check validity of _my_tls by testing if it's within the stack as
	given in current TEB.
	* miscfuncs.cc (struct thread_wrapper_arg): New structure used to
	push all required information to thread_wrapper function.
	(thread_wrapper): Wrapper function for actual thread function.
	If an application stack has been given, change %ebp and %esp so that
	the thread function runs on that stack.  If the thread has been created
	by CygwinCreateThread, set up the POSIX guard pages if necessary.
	(CygwinCreateThread): New function.
	* miscfuncs.h (CygwinCreateThread): Declare.
	* ntdll.h (struct _TEB): Define all members up to Peb.
	* posix.sgml (std-susv4): Move pthread_attr_getguardsize,
	pthread_attr_setguardsize and pthread_attr_setstack here.
	(std-deprec): Add pthread_attr_setstackaddr.
	* sysconf.cc (sca): Set _SC_THREAD_ATTR_STACKADDR to
	_POSIX_THREAD_ATTR_STACKADDR.
	* thread.cc (pthread::precreate): Copy pthread_attr stackaddr and
	guardsize members.
	(pthread::create): Call CygwinCreateThread.
	(pthread_attr::pthread_attr): Initialize guardsize.
	(pthread_attr_setstack): New function.
	(pthread_attr_setstackaddr): New function.
	(pthread_attr_setguardsize): New function.
	(pthread_attr_getguardsize): New function.
	(pthread_getattr_np): Copy attr.guardsize.
	* thread.h (pthread_attr): Add member guardsize.
	* include/pthread.h (pthread_attr_getguardsize): Declare.
	(pthread_attr_setguardsize): Declare.
	* include/cygwin/version.h: Bump API minor number.
@
text
@d163 1
a163 1
  {cons, {c:-1L}},			/*  63, _SC_CPUTIME */
d180 1
a180 1
  {cons, {c:-1L}},			/*  80, _SC_THREAD_CPUTIME */
@


1.56
log
@* sysconf.cc (sysinfo): New function.
* cygwin.din (sysinfo): Export.
* posix.sgml (std-gnu): Add sysinfo.
* include/sys/sysinfo.h (struct sysinfo): Define.
(sysinfo): Declare.
* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
@
text
@d143 2
a144 2
  {cons, {c:-1L}},			/*  43, _SC_THREAD_ATTR_STACKADDR */
  {cons, {c:_POSIX_THREAD_ATTR_STACKSIZE}},	/*  44, _SC_THREAD_ATTR_STACKSIZE */
@


1.55
log
@* sysconf.cc (sca): Set _SC_SPIN_LOCKS to _POSIX_SPIN_LOCKS.
@
text
@d4 1
a4 1
   2006, 2007, 2009 Red Hat, Inc.
d20 1
d321 96
@


1.54
log
@Implement POSIX.1-2004 Monotonic Clock.
* hires.h: Change hires_us to hires_ns, with nanosecond resolution.
(hires_ns::primed_ft): Remove.
(hires_ns::nsecs): New prototype.
(hires_ns::usecs): Rewrite in terms of nsecs.
(hires_ns::resolution): New prototype.
* times.cc: Change hires_us to hires_ns.
(ntod): Declare.
(systime): Remove.
(hires_ns::prime): Increase resolution to nanoseconds.
(hires_ns::nsecs): Rename usecs to nsecs to reflect increased resolution.
Remove justdelta argument.
(hires_ns::resolution): New function.
(clock_gettime): Accept CLOCK_MONOTONIC.
Use EINVAL instead of ENOSYS per POSIX.1-2004.
(clock_getres): Ditto.
(clock_setres): Use EINVAL instead of ENOSYS to conform with other
implementations.
* strace.cc (strace::microseconds): Adjust for hires_ns.
* sysconf.cc (sca): Set _SC_MONOTONIC_CLOCK to _POSIX_MONOTONIC_CLOCK.
* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
@
text
@d175 1
a175 1
  {cons, {c:-1L}},			/*  76, _SC_SPIN_LOCKS */
@


1.53
log
@	* sysconf.cc (get_nprocs): New function.
	(get_nprocs_conf): Ditto.
	(get_avphys_pages): Ditto.
	(get_phys_pages): Ditto.
	* cygwin.din: Export them.
	* include/sys/sysinfo.h: New header, decalre above new functions.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
	* posix.sgml: Mention them as GNU extensions.
@
text
@d168 1
a168 1
  {cons, {c:-1L}},			/*  69, _SC_MONOTONIC_CLOCK */
@


1.52
log
@Remove unneeded header files from source files throughout.
@
text
@d4 1
a4 1
   2006, 2007 Red Hat, Inc.
d14 1
d296 24
@


1.51
log
@	* cygwin.din (confstr): Export.
	* posix.sgml (confstr): Move to list of implemented SUSv3 functions.
	* sysconf.cc (confstr): Implement.
	* include/cygwin/version.h: Bump API minor number.
@
text
@a13 3
#include <time.h>
#include <limits.h>
#include <ntdef.h>
a18 1
#include "cygheap.h"
@


1.50
log
@	* fhandler.cc (fhandler_base::set_no_inheritance): Always use
	SetHandleInformation.
	* fhandler_disk_file.cc (fhandler_disk_file::lock): Always use
	UnlockFileEx/LockFileEx functions.
	* net.cc (fdsock): Don't bother to duplicate socket for inheritance.
	* sysconf.cc (get_nproc_values): Take NT for granted.
	(get_avphys): Ditto.
	* syslog.cc (WIN95_EVENT_LOG_PATH): Remove define.
	(get_win95_event_log_path): Remove.
	(vsyslog): Fix formatting.  Take NT for granted.
	* wincap.cc: Remove has_lock_file_ex, has_signal_object_and_wait,
	has_eventlog, has_set_handle_information,
	has_set_handle_information_on_console_handles and supports_smp
	throughout.
	* wincap.h: Ditto.
@
text
@d251 48
@


1.49
log
@	* Makefile.in (DLL_OFILES): Add posix_ipc.o.
	* cygwin.din (mq_close): Export.
	(mq_getattr): Export.
	(mq_notify): Export.
	(mq_open): Export.
	(mq_receive): Export.
	(mq_send): Export.
	(mq_setattr): Export.
	(mq_timedreceive): Export.
	(mq_timedsend): Export.
	(mq_unlink): Export.
	* posix_ipc.cc: New file implementing the above functions.  Move
	shm_open and shm_unlink from syscalls.cc here.
	* sysconf.cc (sca): Set value of _SC_MQ_OPEN_MAX to MQ_OPEN_MAX,
	_SC_MQ_PRIO_MAX to MQ_PRIO_MAX, _SC_MESSAGE_PASSING to
	_POSIX_MESSAGE_PASSING.
	* include/limits.h (MQ_OPEN_MAX): Define.
	(MQ_PRIO_MAX): Define.
	* include/mqueue.h: New file.
	* include/cygwin/version.h: Bump API minor number.
@
text
@d43 10
d56 1
d58 8
a65 3
      if (!wincap.supports_smp ())
	return 1;
      /*FALLTHRU*/
d67 2
a68 32
      if (wincap.supports_smp ())
	{
	  NTSTATUS ret;
	  SYSTEM_BASIC_INFORMATION sbi;
	  if ((ret = NtQuerySystemInformation (SystemBasicInformation,
						 (PVOID) &sbi,
					       sizeof sbi, NULL))
		!= STATUS_SUCCESS)
	    {
	      __seterrno_from_nt_status (ret);
	      debug_printf ("NtQuerySystemInformation: ret %d, Dos(ret) %E",
			    ret);
	      return -1;
	    }
	  switch (in)
	    {
	    case _SC_NPROCESSORS_CONF:
	     return sbi.NumberProcessors;
	    case _SC_NPROCESSORS_ONLN:
	     {
	       int i = 0;
	       do
		 if (sbi.ActiveProcessors & 1)
		   i++;
	       while (sbi.ActiveProcessors >>= 1);
	       return i;
	     }
	    case _SC_PHYS_PAGES:
	      return sbi.NumberOfPhysicalPages
		     / (getpagesize () / getsystempagesize ());
	    }
	}
d76 5
a80 1
  if (wincap.supports_smp ())
d82 4
a85 13
      NTSTATUS ret;
      SYSTEM_PERFORMANCE_INFORMATION spi;
      if ((ret = NtQuerySystemInformation (SystemPerformanceInformation,
					     (PVOID) &spi,
					   sizeof spi, NULL))
	    != STATUS_SUCCESS)
	{
	  __seterrno_from_nt_status (ret);
	  debug_printf ("NtQuerySystemInformation: ret %d, Dos(ret) %E",
			ret);
	  return -1;
	}
      return spi.AvailablePages / (getpagesize () / getsystempagesize ());
d87 1
a87 1
  return -1;
@


1.48
log
@	* cygwin.din (shm_open): Export.
	(shm_unlink): Export.
	* syscalls.cc (shm_open): New function.
	(shm_unlink): New function.
	* sysconf.cc (sca): Set value of _SC_SHARED_MEMORY_OBJECTS to
	_POSIX_SHARED_MEMORY_OBJECTS.
	* include/cygwin/version.h: Bump API minor number.
	* include/sys/mman.h (shm_open): Add prototype.
	(shm_unlink): Ditto.
@
text
@d134 2
a135 2
  {nsup, {c:0}},			/*  13, _SC_MQ_OPEN_MAX */
  {nsup, {c:0}},			/*  14, _SC_MQ_PRIO_MAX */
d148 1
a148 1
  {cons, {c:-1L}},			/*  27, _SC_MESSAGE_PASSING */
@


1.47
log
@	* cygmalloc.h (MALLOC_FAILURE_ACTION): Define empty.
	* cygwin.din (posix_madvise): Export.
	(posix_memalign): Export.
	* fhandler.cc (fhandler_base::fpathconf): Return useful values in
	_PC_VDISABLE, _PC_SYNC_IO and _PC_SYMLINK_MAX cases.
	* malloc_wrapper.cc (malloc): Set errno here since it's not set in
	dlmalloc.c anymore.
	(realloc): Ditto.
	(calloc): Ditto.
	(memalign): Ditto.
	(valloc): Ditto.
	(posix_memalign): New function.
	* mmap.cc (posix_madvise): New function.
	* sysconf.cc (get_open_max): New function.
	(get_page_size): Ditto.
	(get_nproc_values): Ditto.
	(get_avphys): Ditto.
	(sc_type): New type.
	(sca): New array to map _SC_xxx options to sysconf return values.
	(sysconf): Reimplement using sca array.
	* include/limits.h: Add all missing values as defined by SUSv3.
	* include/pthread.h (PTHREAD_DESTRUCTOR_ITERATIONS): Move definition
	to sys/limits.h.
	(PTHREAD_KEYS_MAX): Ditto.
	* include/semaphore.h (SEM_VALUE_MAX): Ditto.
	* include/cygwin/stdlib.h (posix_memalign): Declare.
	* include/cygwin/version.h: Bump API minor number.
	* include/sys/mman.h: Add posix_madvise flags.
	(posix_madvise): Declare.
	* include/sys/termios.h (_POSIX_VDISABLE): Move definition to
	sys/limits.h.
@
text
@d152 1
a152 1
  {cons, {c:-1L}},			/*  31, _SC_SHARED_MEMORY_OBJECTS */
@


1.46
log
@	* fhandler.cc (check_posix_perm): Moved here from syscalls.cc.
	(fhandler_base::fpathconf): New method implementing (f)pathconf.
	* fhandler.h (class fhandler_base): Declare fpathconf method.
	* path.cc (path_conv::check): Replace MAX_LINK_DEPTH with SYMLOOP_MAX.
	* path.h (MAX_LINK_DEPTH): Delete.
	* syscalls.cc (check_posix_perm): Move to fhandler.cc.
	(fpathconf): Call fhandler's fpathconf method.
	(pathconf): Build fhandler and call fhandler's fpathconf method.
	* sysconf.cc (sysconf): Reorder switch according to order of flags
	in sys/unistd.h.  Add handling for some missing flags.
	* include/limits.h: Reorder according to SUSv3 description.  Add some
	missing definitions.  Add comments.
	* include/sys/syslimits.h: New file overriding newlib's syslimits.h
	file.
@
text
@d4 1
a4 1
   2006 Red Hat, Inc.
d25 223
d254 1
a254 1
  switch (in)
d256 1
a256 12
      /* Keep order as in sys/unistd.h */
      case _SC_ARG_MAX:
	/* FIXME: what's the right value?  _POSIX_ARG_MAX is only 4K.
	   FIXME: Wouldn't it be more correct to return ARG_MAX here? */
	return 1048576;
      case _SC_CHILD_MAX:
	return CHILD_MAX;
      case _SC_CLK_TCK:
	return CLOCKS_PER_SEC;
      case _SC_NGROUPS_MAX:
	return NGROUPS_MAX;
      case _SC_OPEN_MAX:
d258 6
a263 4
	  long max = getdtablesize ();
	  if (max < OPEN_MAX)
	    max = OPEN_MAX;
	  return max;
a264 96
      case _SC_JOB_CONTROL:
	return _POSIX_JOB_CONTROL;
      case _SC_SAVED_IDS:
	return _POSIX_SAVED_IDS;
      case _SC_VERSION:
	return _POSIX_VERSION;
      case _SC_PAGESIZE:
	return getpagesize ();
      case _SC_NPROCESSORS_CONF:
      case _SC_NPROCESSORS_ONLN:
	if (!wincap.supports_smp ())
	  return 1;
	/*FALLTHRU*/
      case _SC_PHYS_PAGES:
	if (wincap.supports_smp ())
	  {
	    NTSTATUS ret;
	    SYSTEM_BASIC_INFORMATION sbi;
	    if ((ret = NtQuerySystemInformation (SystemBasicInformation,
						   (PVOID) &sbi,
						 sizeof sbi, NULL))
		  != STATUS_SUCCESS)
	      {
		__seterrno_from_nt_status (ret);
		debug_printf ("NtQuerySystemInformation: ret %d, Dos(ret) %E",
			      ret);
		return -1;
	      }
	    switch (in)
	      {
	      case _SC_NPROCESSORS_CONF:
	       return sbi.NumberProcessors;
	      case _SC_NPROCESSORS_ONLN:
	       {
		 int i = 0;
		 do
		   if (sbi.ActiveProcessors & 1)
		     i++;
		 while (sbi.ActiveProcessors >>= 1);
		 return i;
	       }
	      case _SC_PHYS_PAGES:
		return sbi.NumberOfPhysicalPages;
	      }
	  }
	break;
      case _SC_AVPHYS_PAGES:
	if (wincap.supports_smp ())
	  {
	    NTSTATUS ret;
	    SYSTEM_PERFORMANCE_INFORMATION spi;
	    if ((ret = NtQuerySystemInformation (SystemPerformanceInformation,
						   (PVOID) &spi,
						 sizeof spi, NULL))
		  != STATUS_SUCCESS)
	      {
		__seterrno_from_nt_status (ret);
		debug_printf ("NtQuerySystemInformation: ret %d, Dos(ret) %E",
			      ret);
		return -1;
	      }
	    return spi.AvailablePages;
	  }
      case _SC_RTSIG_MAX:
	return RTSIG_MAX;
      case _SC_TIMER_MAX:
	return TIMER_MAX;
#if 0	/* FIXME -- unimplemented */
      case _SC_TZNAME_MAX:
        return _POSIX_TZNAME_MAX;
#endif
      case _SC_MEMLOCK_RANGE:
	return _POSIX_MEMLOCK_RANGE;
      case _SC_SEMAPHORES:
        return _POSIX_SEMAPHORES;
      case _SC_TIMERS:
	return _POSIX_TIMERS;
      case _SC_TTY_NAME_MAX:
	return TTY_NAME_MAX;
      case _SC_THREADS:
	return _POSIX_THREADS;
      case _SC_THREAD_ATTR_STACKSIZE:
	return _POSIX_THREAD_ATTR_STACKSIZE;
      case _SC_THREAD_PRIORITY_SCHEDULING:
	return _POSIX_THREAD_PRIORITY_SCHEDULING;
      case _SC_THREAD_PROCESS_SHARED:
	return _POSIX_THREAD_PROCESS_SHARED;
      case _SC_THREAD_SAFE_FUNCTIONS:
	return _POSIX_THREAD_SAFE_FUNCTIONS;
      case _SC_GETPW_R_SIZE_MAX:
      case _SC_GETGR_R_SIZE_MAX:
	return 16*1024;
      case _SC_LOGIN_NAME_MAX:
	return LOGIN_NAME_MAX;
      case _SC_STREAM_MAX:
	return STREAM_MAX;
d266 1
a266 2

  /* Invalid input or unimplemented sysconf name */
d268 1
a268 1
  return -1;
@


1.45
log
@white space
@
text
@d33 1
d35 2
a36 1
	/* FIXME: what's the right value?  _POSIX_ARG_MAX is only 4K */
d38 6
a50 4
      case _SC_PAGESIZE:
	return getpagesize ();
      case _SC_CLK_TCK:
	return CLOCKS_PER_SEC;
a52 4
      case _SC_CHILD_MAX:
	return CHILD_MAX;
      case _SC_NGROUPS_MAX:
	return NGROUPS_MAX;
a54 5
      case _SC_LOGIN_NAME_MAX:
	return LOGIN_NAME_MAX;
      case _SC_GETPW_R_SIZE_MAX:
      case _SC_GETGR_R_SIZE_MAX:
	return 16*1024;
d57 2
a58 6
#if 0	/* FIXME -- unimplemented */
      case _SC_TZNAME_MAX:
	return _POSIX_TZNAME_MAX;
      case _SC_STREAM_MAX:
	return _POSIX_STREAM_MAX;
#endif
d116 6
a121 2
      case _SC_TTY_NAME_MAX:
	return TTY_NAME_MAX;
d125 5
a129 1
	return _POSIX_SEMAPHORES;
d140 7
a146 2
      case _SC_TIMERS:
	return _POSIX_TIMERS;
@


1.44
log
@	Bump copyright dates.
@
text
@d130 1
a130 1
        return _POSIX_SEMAPHORES;
d132 1
a132 1
        return _POSIX_THREADS;
d134 1
a134 1
        return _POSIX_THREAD_ATTR_STACKSIZE;
d136 1
a136 1
        return _POSIX_THREAD_PRIORITY_SCHEDULING;
d138 1
a138 1
        return _POSIX_THREAD_PROCESS_SHARED;
d140 1
a140 1
        return _POSIX_THREAD_SAFE_FUNCTIONS;
d142 1
a142 1
        return _POSIX_TIMERS;
@


1.43
log
@	* sysconf.cc (sysconf): Add _SC_THREADS, _SC_THREAD_ATTR_STACKSIZE,
	_SC_THREAD_PRIORITY_SCHEDULING, _SC_THREAD_PROCESS_SHARED,
	_SC_THREAD_SAFE_FUNCTIONS, _SC_TIMERS handling.
@
text
@d3 2
a4 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Red Hat, Inc.
@


1.42
log
@whitespace cleanup to force snapshot.
@
text
@d128 14
@


1.41
log
@	* autoload.cc (NtLockVirtualMemory): Import.
	(NtUnlockVirtualMemory): Import.
	(GetProcessWorkingSetSize): Import.
	(SetProcessWorkingSetSize): Import.
	* cygwin.din (mlock): Export.
	(munlock): Export.
	* mmap.cc (mlock): New function.
	(munlock): Ditto.
	* ntdll.h (STATUS_WORKING_SET_QUOTA): Define.
	(LOCK_VM_IN_WSL): Define.
	(LOCK_VM_IN_RAM): Define.
	(NtLockVirtualMemory): Declare.
	(NtUnlockVirtualMemory): Declare.
	* sysconf.cc (sysconf): Implement _SC_MEMLOCK_RANGE.
	* wincap.h: Implement has_working_virtual_lock throughout.
	* wincap.cc: Ditto.
	* include/cygwin/version.h: Bump API minor version.
	* include/sys/mman.h (mlock): Declare,
	(munlock): Declare.
@
text
@d127 1
a127 1
        return _POSIX_MEMLOCK_RANGE;
@


1.40
log
@	* cygerrno.h (__seterrno_from_nt_status): Define. Always set Win32
	error code as well as errno. Use throughout where errno is set from
	NT status.
	(set_errno): Evaluate val only once.
	* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Fix typo in
	debug output.
	* fhandler_mem.cc (fhandler_dev_mem::open): Rely on
	__seterrno_from_nt_status setting Win32 error code in debug output.
	* fhandler_proc.cc (format_proc_uptime): Ditto.
	(format_proc_stat): Ditto.
	* fhandler_process.cc (format_process_stat): Ditto.
	* sysconf.cc (sysconf): Ditto.
@
text
@d126 2
@


1.39
log
@Reorganize header file inclusion throughout so that cygerrno.h comes first.
* fhandler.h (select_record::thread_errno): Save any encountered errno here.
(select_record::set_select_errno): New function.
(select_record::saw_error): New function.
(select_record::select_record): Initialize thread_errno to zero.
* select.cc (set_handle_or_return_if_not_open): Set thread_errno on failure.
(select_stuff::wait): Record errno for later resurrection in calling thread.
(peek_serial): Ditto.
@
text
@d82 3
a84 3
		__seterrno_from_win_error (RtlNtStatusToDosError (ret));
		debug_printf ("NtQuerySystemInformation: ret %d, Dos(ret) %d",
			      ret, RtlNtStatusToDosError (ret));
d115 3
a117 3
		__seterrno_from_win_error (RtlNtStatusToDosError (ret));
		debug_printf ("NtQuerySystemInformation: ret %d, Dos(ret) %d",
			      ret, RtlNtStatusToDosError (ret));
@


1.38
log
@Regularize most strace_prints throughout so that %E is always preceded by a
comma and elminate most uses of "foo = %s" to "foo %s".
@
text
@d16 1
a20 1
#include "cygerrno.h"
@


1.37
log
@* path.cc (chdir): Always use the normalized_path as posix_cwd, except if it
starts with a drive.

Also perform whitespace cleanup.
@
text
@d83 1
a83 2
		debug_printf ("NtQuerySystemInformation: ret = %d, "
			      "Dos(ret) = %d",
d116 1
a116 2
		debug_printf ("NtQuerySystemInformation: ret = %d, "
			      "Dos(ret) = %d",
@


1.36
log
@	* cygwin.din: Add symbols flockfile, ftrylockfile, funlockfile,
	getgrgid_r, getgrnam_r and getlogin_r.
	* grp.cc (getgrgid_r): New function.
	(getgrnam_r): Ditto.
	* syscalls.cc (flockfile): Ditto.
	(ftrylockfile): Ditto.
	(funlockfile): Ditto.
	* sysconf.cc (sysconf): Return LOGIN_NAME_MAX in case of
	_SC_LOGIN_NAME_MAX.
	* thread.cc (__cygwin_lock_trylock): Define int.  Return value from
	call to pthread_mutex_trylock.
	* uinfo.cc (getlogin_r): New function.
	* include/limits.h: Define LOGIN_NAME_MAX.
	* include/cygwin/version.h: Bump API minor number.
	* include/sys/lock.h: Add declarations for __cygwin_lock_xxx functions.
	* include/sys/stdio.h: Add define for _ftrylockfile.
@
text
@d55 1
a55 1
        return LOGIN_NAME_MAX;
d107 1
a107 1
        if (wincap.supports_smp ())
d127 1
a127 1
        return TTY_NAME_MAX;
@


1.35
log
@	* autoload.cc (NtSetSecurityObject): Add.
	* fhandler_disk_file.cc (fhandler_disk_file::fchmod): Only request
	READ_CONTROL rights when opening the file.
	* ntdll.h (NtSetSecurityObject): Add declaration.
	* security.cc (write_sd): Call NtSetSecurityObject instead of
	BackupWrite.
	(get_nt_object_security): Don't free security descriptor here.

	* syscalls.cc (ttyname): Use buffer of length TTY_NAME_MAX + 1.
	* sysconf.cc (sysconf): Handle _SC_TTY_NAME_MAX request.
	* include/limits.h: Define TTY_NAME_MAX and _POSIX_TTY_NAME_MAX.
@
text
@d55 1
@


1.34
log
@* debug.h (console_printf): Define for non-debugging condition.
* cygtls.h (_threadinfo::lock): Remove wait argument.
(_threadinfo::interrupt_setup): Remove retaddr argument.
* exceptions.cc (_threadinfo::interrupt_setup): Ditto.
(_threadinfo::interrupt_now): Accommodate change to interrupt_setup argument.
(setup_handler): Ditto.  Always lock sig stack prior to determining interrupt
method.
* gendef (_sigfe): Correct thinko regarding cmpxchg.
(_sigbe): Ditto.
(_threadinfo::lock): Ditto.
(_threadinfo::pop): Eliminate left-over stack unlock.
* sigproc.cc (proc_subproc): Chnage debugging output to printed warning.
@
text
@d125 2
@


1.33
log
@* Makefile.in (DLL_OFILES): Add strsig.o.
* cygtls.h (_local_storage::signamebuf) New element.
* sysconf.cc (sysconf): Implement _SC_RTSIG_MAX.
* tlsoffset.h: Regenerate.
* include/limits.h (_POSIX_RTSIG_MAX): New define.
(RTSIG_MAX): Ditto.
* include/cygwin/signal.h (SIGRTMIN): New define.
(SIGRTMAX): Ditto.
(NSIG): Bump.
* strsig.cc: New file.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Red Hat, Inc.
@


1.32
log
@* devices.cc: New file.
* devices.gperf: New file.
* devices.shilka: New file.
* cygwin-gperf: New file.
* cygwin-shilka: New file.
* fhandler_fifo.cc: New file.
* fhandler_nodevice.cc : New file.  Reorganize headers so that path.h precedes
fhandler.h throughout.  Remove device argument and unit arguments from fhandler
constructors throughout.  Remove pc arguments to fhandler functions and use
internal pc element instead, throughout.  Use dev element in pc throughout.
Use major/minor elements rather than units and device numbers previously in
fhandler class.  Use correct methods for fhandler file names rather than
directly accessing file name variables, throughout.
* Makefile.in (DLL_OFILES): Add devices.o, fhandler_fifo.o
* dcrt0.cc (dll_crt0_1): Call device::init.
* devices.h: Renumber devices based on more Linux-like major/minor numbers.
Add more devices.  Declare standard device storage.
(device): Declare struct.
* dir.cc (opendir): Use new 'build_fh_name' to construct a fhandler_* type.
* dtable.cc (dtable::get_debugger_info): Ditto.
(cygwin_attach_handle_to_fd): Ditto.
(dtable::release): Remove special FH_SOCKET case in favor of generic
"need_fixup_before" test.
(dtable::init_std_file_from_handle): Use either build_fh_dev or build_fh_name
to build standard fhandler.
(dtable::build_fh_name): Renamed from dtable::build_fhandler_from_name.  Move
out of dtable class.  Don't accept a path_conv argument.  Just build it here
and pass it to:
(build_fh_pc): Renamed from dtable::build_fhandler.  Move out of dtable class.
Use intrinsic device type in path_conv to create new fhandler.
(build_fh_dev): Renamed from dtable::build_fhandler.  Move out of dtable class.
Simplify arguments to just take new 'device' type and a name.  Just return
pointer to fhandler rather than trying to insert into dtable.
(dtable::dup_worker): Accommodate above build_fh name changes.
(dtable::find_fifo): New (currently broken) function.
(handle_to_fn): Use strechr for efficiency.
* dtable.h: Reflect above build_fh name changes and argument differences.
(fhandler_base *&operator []): Return self rather than copy of self.
* fhandler.cc (fhandler_base::operator =): Use pc element to set normalized
path.
(fhandler_base::set_name): Ditto.
(fhandler_base::raw_read): Use method to access name.
(fhandler_base::write): Correctly use get_output_handle rather than get_handle.
(handler_base::device_access_denied): New function.
(fhandler_base::open): Eliminate pc argument and use pc element of
fhandler_base throughout.
(fhandler_base::fstat): Detect if device is based in filesystem and use
fstat_fs to calculate stat, if so.
(fhandler_base::fhandler_base): Eliminate handling of file names and, instead,
just free appropriate component from pc.
(fhandler_base::opendir): Remove path_conv parameter.
* fhandler.h: Remove all device flags.
(fhandler_base::pc): New element.
(fhandler_base::set_name): Change argument to path_conv.
(fhandler_base::error): New function.
(fhandler_base::exists): New function.
(fhandler_base::pc_binmode): New function.
(fhandler_base::dev): New function.
(fhandler_base::open_fs): New function.
(fhandler_base::fstat_fs): New function.
(fhandler_base::fstat_by_name): New function.
(fhandler_base::fstat_by_handle): New function.
(fhandler_base::isfifo): New function.
(fhandler_base::is_slow): New function.
(fhandler_base::is_auto_device): New function.
(fhandler_base::is_fs_special): New function.
(fhandler_base::device_access_denied): New function.
(fhandler_base::operator DWORD&): New operator.
(fhandler_base::get_name): Return normalized path from pc.
(fhandler_base::get_win32_name): Return windows path from pc.
(fhandler_base::isdevice): Renamed from is_device.
(fhandler_base::get_native_name): Return device format.
(fhandler_fifo): New class.
(fhandler_nodevice): New class.
(select_stuff::device_specific): Remove array.
(select_stuff::device_specific_pipe): New class element.
(select_stuff::device_specific_socket): New class element.
(select_stuff::device_specific_serial): New class element.
(select_stuff::select_stuff): Initialize new elements.
* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Move to base class
from fhandler_disk_file.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_disk_file::open): Move most functionality into
fhandler_base::open_fs.
(fhandler_base::open_fs): New function.
(fhandler_disk_file::close): Move most functionality into
fhandler_base::close_fs.
(fhandler_base::close_fs): New function.
* fhandler_mem.cc (fhandler_dev_mem::open): Use device name in debugging
output.
* fhandler_socket.cc (fhandler_socket::set_connect_secret): Copy standard
urandom device into appropriate place.
(fhandler_socket::accept): Reflect change in fdsock return value.
* fhandler_tty.cc: See "throughouts" above.
* net.cc: Accommodate fdsock change throughout.
(fdsock): Return success or failure, accept fd argument and device argument.
* path.cc (symlink_info::major): New element.
(symlink_info::minor): New element.
(symlink_info::parse_device): Declare new function.
(fs_info::update): Accommodate changes in path_conv class.
(path_conv::fillin): Ditto.
(path_conv::return_and_clear_normalized_path): Eliminate.
(path_conv::set_normalized_path): New function.
(path_conv::path_conv): Set info in dev element.  Use path_conv methods Check
for FH_FS rather than FH_BAD to indicate when to fill in filesystem stuff.
where appropriate rather than direct access.  Use set_normalized_path to set
normalized path.
(windows_device_names): Eliminate.
(get_dev): Ditto.
(get_raw_device_number): Ditto.
(get_device_number): Ditto.
(win32_device_name): Call new device name parser to do most of the heavy
lifting.
(mount_info::conv_to_win32_path): Fill in dev field as appropriate.
(symlink_worker): Handle new device files.
(symlink_info::check): Ditto.
(symlink_info::parse_device): Define new function.
* path.h (executable_states): Move here from fhandler.h.
(fs_info): Rename variables to *_storage and create methods for accessing same.
(path_conv): Add dev element, remove devn and unit and adjust inline methods to
accommodate.
(set_normalized_path): Declare new function.
* pinfo.cc (_pinfo::commune_recv): Add broken support for handling fifos.
(_pinfo::commune_send): Ditto.
* pipe.cc (fhandler_pipe::close): check for existence of handle before closing
it.
(handler_pipe::create): Rename from make_pipe.  Change arguments to accept
fhandler_pipe array.  Accommodate fifos.
(pipe): Rework to deal with fhandler_pipe::create changes.
(_pipe): Ditto.
* select.cc: Use individual device_specific types throughout rather than
indexing with obsolete device number.
(set_bits): Use is_socket call rather than checking device number.
* shared_info.h (CURR_MOUNT_MAGIC): Update.
(conv_to_win32_path): Reflect addition of device argument.
* syscalls.cc (mknod_worker): New function.
(open): Use build_fh_name to build fhandler.
(chown_worker): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(chmod_device): New function.
(chmod): Detect if this is an 'auto' device rather than an on-filesystem device
and handle appropriately.  Use chmod_device to set mode of in-filesystem
devices.
(stat_worker): Eliminate path_conv argument.  Call build_fh_name to construct
fhandler.  Use fh->error() rather than pc->error to detect errors in fhandler
construction.
(access_worker): New function pulled from access.  Accommodate in-filesystem
devices.
(access): Use access_worker.
(fpathconf): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(mknod_worker): New function.
(mknod32): New function.
(chroot): Free normalized path -- assuming it was actually cmalloced.
* tty.cc (create_tty_master): Tweak for new device class.
(tty::common_init): Ditto.
* winsup.h (stat_worker): Remove.
(symlink_worker): Declare.
* exceptions.cc (set_process_mask): Just call sig_dispatch_pending and don't
worry about pending_signals since sig_dispatch_pending should always do the
right thing now.
(sig_handle): Reorganize SIGCONT handling to more closely conform to SUSv3.
* pinfo.h: Move __SIG enum to sigproc.h.
(PICOM_FIFO): New enum element.
(_pinfo): Remove 'thread2signal' stuff throughout class.
(_pinfo::commune_send): Make varargs.
(_pinfo::sigtodo): Eliminate.
(_pinfo::thread2signal): Ditto.
* signal.cc (kill_worker): Eliminate call to setthread2signal.
* sigproc.cc (local_sigtodo): Eliminate.
(getlocal_sigtodo): Ditto.
(sigelem): New class.
(pending_signals): New class.
(sigqueue): New variable, start of sigqueue linked list.
(sigcatch_nonmain): Eliminate.
(sigcatch_main): Eliminate.
(sigcatch_nosync): Eliminate.
(sigcomplete_nonmain): Eliminate.
(pending_signals): Eliminate.
(sig_clear): Call signal thread to clear pending signals, unless already in
signal thread.
(sigpending): Call signal thread to get pending signals.
(sig_dispatch_pending): Eliminate use of pending_signals and just check
sigqueue.
(sigproc_terminate): Eliminate all of the obsolete semaphore stuff.  Close
signal pipe handle.
(sig_send): Eliminate all of the obsolete semaphore stuff and use pipe to send
signals.
(getevent): Eliminate.
(pending_signals::add): New function.
(pending_signals::del): New function.
(pending_signals::next): New function.
(wait_sig): Eliminate all of the obsolete semaphore stuff.  Use pipe to
communicate and maintain a linked list of signals.
* sigproc.h: Move __SIG defines here.  Add __SIGPENDING.
(sig_dispatch_pending): Remove "C" specifier.
(sig_handle): Accept a mask argument.
* thread.cc: Remove signal handling considerations throughout.
@
text
@d123 2
@


1.31
log
@	* sysconf.cc (sysconf): Return more accurate value for _SC_AVPHYS_PAGES.
@
text
@d17 1
a18 1
#include "path.h"
@


1.30
log
@	* sysconf.cc (sysconf): Fix OPEN_MAX patch.  Return page size on
	_SC_PAGESIZE again.
@
text
@a71 1
      case _SC_AVPHYS_PAGES:
a101 2
	      case _SC_AVPHYS_PAGES:
		return sbi.HighestPhysicalPage - sbi.LowestPhysicalPage + 1;
d105 18
@


1.29
log
@* sysconf.cc (sysconf): Return processors online rather than bitmask for
_SC_NPROCESSORS_ONLN.
@
text
@a35 2
	return getdtablesize ();
      case _SC_PAGESIZE:
d42 2
@


1.28
log
@* cygheap.cc (creturn): Set appropriate errno when out of memory.
(ccalloc): Only issue system_printf when debugging.
* dtable.cc (dtable::extend): Only allocate 100 * the incremental growth size
max.  Set errno appropriately.
(dtable::build_fhandler): Check for error from set_name.
* fhandler.cc (fhandler_base::set_name): Set errno and return error on OOM.
* fhandler.h (fhandler_base::set_name): Change to bool.
* fhandler_process.cc (format_process_stat): Fix formatting.
* resource.cc (getrlimit): Return greater of OPEN_MAX or fd table size.
* sysconf.cc (sysconf): Ditto.
@
text
@d93 8
a100 1
	       return sbi.ActiveProcessors;
@


1.27
log
@Throughout, remove "include <errno.h>" from files which already include
cygerrno.h.
* include/cygwin/config.h (__DYNAMIC_REENT__): Define.
* include/cygwin/version.h: Bump API minor version.
* cygwin.din: Export __getreent
* cygerrno.h: Include errno.h.  Fix places where _impure_ptr is used directly
to store the errno value.
* debug.cc (__set_errno): Ditto.
* errno.cc: Remove _RRENT_ONLY define to get errno.cc compiled.
* signal.cc: Rename _reent_clib to _REENT throughout.
* thread.h (reent_clib): Remove prototype.
* thread.cc (reent_clib): Rename reent_clib to __getreent.  Return _impure_ptr
until MTinterface is initialized.
(reent_winsup): Fix a possible SEGV when _r == NULL.  Return NULL instead.
* MTinterface::fixup_after_fork: Switch reent back to _impure_ptr to keep
signal handling running when fork is called from a thread other than the
mainthread.
@
text
@d38 6
a43 1
	return getpagesize ();
@


1.26
log
@	Split ChangeLog, create ChangeLog-2002.
	Fix copyright dates.
@
text
@a12 1
#include <errno.h>
@


1.26.2.1
log
@merge from trunk.
Reorganize includes throughout so that path.h comes before fhandler.h.
Eliminate path_conv arguments from fhandler functions which take them,
throughout.  Use get_name() and get_win32_name() consistently throughout for
fhandler objects.  Use build_fh_* functions throughout, where appropriate.
* fhandler.h (fhandler_base): Store path_conv struct here.  Remove dev.
* dtable.h (dtable::build_fhandler_*): Remove.
(build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* dtable.cc (build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* fhandler.h (fhandler_base::set_name): Change argument.
* fhandler.cc (fhandler_base::set_name): Just accept a path_conv argument.
(executable_states): Move.
* path.h (executable_state): Accept.
* syscalls.cc (stat_worker): Make static.
* winsup.h (stat_worker): Remove definition.
@
text
@d18 1
a19 1
#include "fhandler.h"
@


1.26.2.2
log
@merge from trunk
@
text
@d13 1
@


1.26.2.3
log
@merge from trunk
@
text
@d38 1
a38 6
	{
	  long max = getdtablesize ();
	  if (max < OPEN_MAX)
	    max = OPEN_MAX;
	  return max;
	}
d88 1
a88 8
	       {
		 int i = 0;
		 do
		   if (sbi.ActiveProcessors & 1)
		     i++;
		 while (sbi.ActiveProcessors >>= 1);
		 return i;
	       }
@


1.26.2.4
log
@merge from trunk
@
text
@d36 2
a43 2
      case _SC_PAGESIZE:
	return getpagesize ();
@


1.26.2.5
log
@merge from trunk
@
text
@d72 1
d103 2
a107 18
      case _SC_AVPHYS_PAGES:
        if (wincap.supports_smp ())
	  {
	    NTSTATUS ret;
	    SYSTEM_PERFORMANCE_INFORMATION spi;
	    if ((ret = NtQuerySystemInformation (SystemPerformanceInformation,
						   (PVOID) &spi,
						 sizeof spi, NULL))
		  != STATUS_SUCCESS)
	      {
		__seterrno_from_win_error (RtlNtStatusToDosError (ret));
		debug_printf ("NtQuerySystemInformation: ret = %d, "
			      "Dos(ret) = %d",
			      ret, RtlNtStatusToDosError (ret));
		return -1;
	      }
	    return spi.AvailablePages;
	  }
@


1.25
log
@* sysconf.cc (sysconf): Return arbitrary values for _SC_GETGR_R_SIZE_MAX,
_SC_LOGIN_NAME_MAX, _SC_GETPW_R_SIZE_MAX.
* passwd.cc (getpwuid_r32): Add uid/gid fields to size check calculation.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
@


1.24
log
@* fhandler.cc (fhandler_base::dup): Don't set handle on failure.  Caller has
already taken care of that.
* fhandler_console.cc (fhandler_console::open): Initialize handles to NULL.
(fhandler_console::close): Ditto.  GNUify non-GNU formatted functions calls
throughout.
@
text
@d50 4
@


1.24.16.1
log
@* sysconf.cc (sysconf): Return arbitrary values for _SC_GETGR_R_SIZE_MAX,
_SC_LOGIN_NAME_MAX, _SC_GETPW_R_SIZE_MAX.
* passwd.cc (getpwuid_r32): Add uid/gid fields to size check calculation.
* exceptions.cc (events_init): Display name of mutex on failure.
* windows.cc (setitimer): Return ENOSYS on invalid argument.
@
text
@a49 4
      case _SC_LOGIN_NAME_MAX:
      case _SC_GETPW_R_SIZE_MAX:
      case _SC_GETGR_R_SIZE_MAX:
	return 16*1024;
@


1.23
log
@* dtable.cc (handle_to_fn): Attempt to handle "raw" accesses to remote shares.
* path.cc (mount_info::conv_to_win32_path): Set flags to binary when mount
entry is not found.
(mount_info::set_flags_from_win32_path): Ditto.
@
text
@d75 3
a77 3
		debug_printf("NtQuerySystemInformation: ret = %d, "
			     "Dos(ret) = %d",
			     ret, RtlNtStatusToDosError (ret));
@


1.22
log
@        * sysconf.cc (sysconf): Fix condition.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001 Red Hat, Inc.
@


1.21
log
@Eliminate excess whitespace.
@
text
@d65 1
a65 1
	if (!wincap.supports_smp ())
@


1.20
log
@* fhandler.cc (fhandler_base::fork_fixup): Don't protect handle.
* dlfcn.cc: Fix to confirm to coding standards.  Reorganize includes throughout
to accomodate new cygheap.h usage.
* cygheap.h (cygheap_fdmanip): New class: simplifies locking and retrieval of
fds from cygheap->fdtab.
(cygheap_fdget): Ditto.
(cygheap_fdnew): Ditto.
* fcntl.cc (_fcntl): Use new method to lock fdtab and retrieve info.
* ioctl.cc (ioctl): Ditto.
* mmap.cc (mmap): Ditto.
* net.cc: Ditto, throughout.
* passwd.cc (getpass): Ditto.
* path.cc (fchdir): Ditto.
* pipe.cc (make_pipe): Ditto.
* sec_acl.cc (facl): Ditto.
* syscalls.cc: Ditto, throughout.
* termios.cc: Ditto, throughout.
@
text
@d92 1
a92 1
        break;
@


1.19
log
@Add "path.h" include throughout, where needed.  Use new path_conv methods and
operators to simplify testing for directory and attributes, throughout.
* path.h (path_conv::exists): New method.
(path_conv::has_attribute): Ditto.
(path_conv::isdir): Ditto.
(path_conv::DWORD &): New operator.
(path_conv::int &): Ditto.
* dir.cc (rmdir): Eliminate a goto.
* dtable.cc (dtable::build_fhandler): Accept opt and suffix info for
path_conv.check.  Return fh == NULL on path_conv error.  Pass unit to set_name
as appropriate.
(dtable::reset_unix_path_name): New method.
* dtable.h (dtable): Declare new method.  Reflect arg changes to
build_fhandler.
* fhandler.cc (fhandler_disk_dummy_name): Eliminate.
(fhandler_base::set_name): Expect paths to be NULL.  Build unix_path_name from
win32_path_name when it is a device.
(fhandler_base::reset_unix_path_name): New method.
(fhandler_base::raw_read): Report EISDIR when ERROR_INVALID_FUNCTION or
ERROR_INVALID_PARAMETER and reading a directory.
(fhandler_disk_file::fstat): Don't call stat_dev since we should now never be
calling fhandler_disk_file methods with devices.
(fhandler_base::fhandler_base): Clear {unix,win32}_path_name.
(fhandler_base::~fhandler_base): Always free {unix,win32}_path_name.
(fhandler_disk_file::fhandler_disk_file): Remove set_no_free_names kludge.
(fhandler_disk_file::open): Ditto.
* fhandler.h (fhandler_base::no_free_names): Eliminate.
(fhandler_base::set_no_free_names): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::fhandler_tty_slave): Don't set
unix_path_name here.
* path.cc (fchdir): Lock fd table throughout.  Use new
dtable::reset_unix_path_name method to reset path.
* syscalls.cc (stat_worker): Reorganize to always call fstat method.  Pass
path_conv method to fhandler_*::open.
(chroot): Elminate a goto.
@
text
@d21 1
a22 1
#include "cygerrno.h"
@


1.18
log
@        * Makefile.in: Build wincap.o.
        * wincap.cc: New file.
        * wincap.h: Ditto.
        * autoload.cc: Add dynamic load statement for `CreateHardLinkA'.
        * dcrt0.cc (os_being_run): Eliminated.
        (osname): Ditto.
        (iswinnt): Ditto.
        (set_os_type): Ditto.
        (dll_crt0_1): Call wincap.init() instead of set_os_type().
        (_dll_crt0): Ditto.
        * environ.cc (set_chunksize): New function.
        (parse_thing): `forkchunk' setting now invokes function `set_chunksize'.
        * fork.cc (chunksize): Eliminated. Moved to be member of wincap.
        * host_dependent.h: Removed.
        * syscalls.cc (_link): Try using `CreateHardLinkA' first, if available.
        * cygheap.cc, dcrt0.cc, delqueue.cc, dir.cc,
        environ.cc, fhandler.cc, fhandler.h, fhandler_console.cc,
        fhandler_mem.cc, fork.cc, mmap.cc, net.cc, pinfo.cc, pinfo.h,
        security.cc, syscalls.cc, sysconf.cc, syslog.cc, thread.cc,
        times.cc, tty.cc, uinfo.cc, uname.cc, winsup.h: Use new wincap
        capability check throughout.
        * winsup.h: Include wincap.h. Eliminate extern declarations of
        `os_being_run' and `iswinnt'. Eliminate `os_type" definition.
        * include/cygwin/version.h: Bump version to 1.3.4.
@
text
@d19 1
@


1.18.2.1
log
@Merged changes from HEAD
@
text
@a18 1
#include "path.h"
@


1.18.2.2
log
@Merged changes from HEAD
@
text
@d21 1
a22 1
#include "cygheap.h"
d92 1
a92 1
	break;
@


1.18.2.3
log
@Merged changes from HEAD
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
d65 1
a65 1
	if (wincap.supports_smp ())
@


1.18.2.4
log
@Merged changes from HEAD
@
text
@d75 3
a77 3
		debug_printf ("NtQuerySystemInformation: ret = %d, "
			      "Dos(ret) = %d",
			      ret, RtlNtStatusToDosError (ret));
@


1.17
log
@Update copyrights.
@
text
@d59 1
a59 1
	if (!iswinnt)
d64 28
a91 26
	{
	  NTSTATUS ret;
	  SYSTEM_BASIC_INFORMATION sbi;
	  if ((ret = NtQuerySystemInformation (SystemBasicInformation,
						 (PVOID) &sbi,
					       sizeof sbi, NULL))
		!= STATUS_SUCCESS)
	    {
	      __seterrno_from_win_error (RtlNtStatusToDosError (ret));
	      debug_printf("NtQuerySystemInformation: ret = %d, "
			   "Dos(ret) = %d",
			   ret, RtlNtStatusToDosError (ret));
	      return -1;
	    }
	  switch (in)
	    {
	    case _SC_NPROCESSORS_CONF:
	     return sbi.NumberProcessors;
	    case _SC_NPROCESSORS_ONLN:
	     return sbi.ActiveProcessors;
	    case _SC_PHYS_PAGES:
	      return sbi.NumberOfPhysicalPages;
	    case _SC_AVPHYS_PAGES:
	      return sbi.HighestPhysicalPage - sbi.LowestPhysicalPage + 1;
	    }
	}
@


1.16
log
@* cygheap.h (init_cygheap): Move heap pointers here.
* include/sys/cygwin.h (perprocess): Remove heap pointers.
* dcrt0.cc (__cygwin_user_data): Reflect obsolete perprocess stuff.
(_dll_crt0): Don't initialize heap pointers.
(cygwin_dll_init): Ditto.
(release_upto): Use heap pointers from cygheap.
* heap.h: Ditto.
* fork.cc (fork_parent): Ditto.  Don't set heap pointers in ch.
(fork_child): Remove obsolete sigproc_fixup_after_fork.
* shared.cc (memory_init): Reorganize so that cygheap initialization is called
prior to regular heap since regular heap uses cygheap now.
* sigproc.cc (proc_subproc): Eliminate zombies allocation.
(sigproc_init): Move zombies alloation here.  Don't free up array on fork, just
reuse it.
(sigproc_fixup_after_fork): Eliminate.
* sigproc.h: Ditto.
* include/cygwin/version.h: Reflect change to perprocess structure.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998 Cygnus Solutions.
@


1.15
log
@        * resource.cc (getrlimit): Return getdtablesize () as current limit
        on RLIMIT_NOFILE.
        * syscalls.cc (getdtablesize): Return OPEN_MAX if current dtable size
        is less than OPEN_MAX, the current dtable size otherwise.
        * sysconf.cc (sysconf): Return getdtablesize () on _SC_OPEN_MAX.
@
text
@d64 1
a64 1
        {
d67 1
a67 1
          if ((ret = NtQuerySystemInformation (SystemBasicInformation,
d71 5
a75 5
            {
              __seterrno_from_win_error (RtlNtStatusToDosError (ret));
              debug_printf("NtQuerySystemInformation: ret = %d, "
		           "Dos(ret) = %d",
                           ret, RtlNtStatusToDosError (ret));
d77 1
a77 1
            }
@


1.14
log
@        * resource.cc (getrlimit): Return OPEN_MAX as current limit
        on RLIMIT_NOFILE.
        * syscalls.cc (getdtablesize): Return OPEN_MAX.
        * sysconf.cc (sysconf): Return OPEN_MAX on _SC_OPEN_MAX.
        * include/limits.h (OPEN_MAX): Define as 256.
@
text
@d36 1
a36 1
	return OPEN_MAX;
@


1.13
log
@Throughout, change check for running under Windows NT to 'iswinnt'.
* dcrt0.cc (set_os_type): Set 'iswinnt' appropriately.
* cygheap.cc (init_cheap): Revert to using VirtualAlloc for allocating cygheap.
(cygheap_setup_for_child_cleanup): New function.  Standard function to call
after calling CreateProcess to cleanup cygheap info passed to child.
(cygheap_fixup_in_child): Copy cygheap from shared memory into allocated space
under Windows 9x or if can't relocate shared space under NT.
* cygheap.h: Declare new function.
* spawn.cc (spawn_guts): Use cygheap_fixup_in_child.
* fork.cc (fork_parent): Ditto.
* winsup.h: Declare iswinnt.
@
text
@d36 1
a36 4
	/* FIXME: this returns the current limit which can increase
	   if and when dtable::find_unused_handle is called.  Perhaps
	   we should return NOFILE or OPEN_MAX instead? */
	return cygheap->fdtab.size;
@


1.12
log
@Throughout, reorganize header file inclusion to put security.h prior to
fhandler.h.
* fhandler.h (fhandler_base::get_inheritance): New method.
* fhandler_socket.cc (fhandler_socket::create_secret_event): Use proper
close-on-exec inheritance when creating.
(fhandler_socket::check_peer_secret_event): Create handle as non-inheritable.
@
text
@d62 1
a62 1
	if (os_being_run != winNT)
@


1.11
log
@forced commit
@
text
@d17 1
@


1.10
log
@Throughout, change fdtab references to cygheap->fdtab.
* child_info.h (cygheap_exec_info): Eliminate special fdtab stuff.
* spawn.cc (spawn_guts): Ditto.
* cygheap.cc (cygheap_init): Initialize fdtab, if appropriate.
* cygheap.h (CYGHEAPSIZE): Include size of init_cygheap.
(_cmalloc_entry): Include fdtab here.
* dtable.h (dtable): Declare/define new methods.
* dtable.cc (dtable::vfork_child_fixup): New method.
(dtable::fixup_after_exec): Remove unneeded extra arguments.
* dcrt0.cc (dll_crt0_1): Ditto.
* environ.cc (getwinenv): Use case sensitive comparison.
(winenv): Make a copy of environment cache to avoid realloc problems when
duplicate environment variables exist in the environment.  (From Egor Duda)
* net.cc (cygwin_socket): Revert Apr 14 change.
* include/sys/file.h: Protect against previous X_OK definition.
* passwd.cc: Eliminate passwd_sem throughout.
* security.cc: Ditto.
* cygwin.din: Export New functions.
* passwd.cc (read_etc_passwd): Make race safe.
(getpwuid_r): New function.
(getpwnam_r): New function.
@
text
@@


1.9
log
@        * sysconf.cc (sysconf): return `getpagesize ()' on _SC_PAGESIZE
        request to avoid implementing the same twice.
@
text
@d19 1
d38 1
a38 1
	return fdtab.size;
@


1.8
log
@Whitespace cleanup.

* configure.in: Eliminate subdir stuff.
* configure: Regenerate.
* include/getopt.h (option): Make name field 'const'.
@
text
@d39 1
a39 5
	{
	  SYSTEM_INFO b;
	  GetSystemInfo (&b);
	  return b.dwPageSize;
	}
@


1.7
log
@        * ntdll.h: New file.
        * fhandler_mem.cc: Move ntdll.dll specific definitions and
        declarations to ntdll.h.
        * sysconf.cc (sysconf): Add support for _SC_NPROCESSORS_CONF,
        _SC_NPROCESSORS_ONLN, _SC_PHYS_PAGES and _SC_AVPHYS_PAGES.
@
text
@d74 1
a74 1
                                           	 sizeof sbi, NULL))
@


1.6
log
@* winsup.h: Eliminate inclusion of most of the cygwin .h files.  Use .h files
only in sources which require them.
* Makefile.in: Generate dependencies with -MD option.
@
text
@d16 1
d20 1
d62 33
@


1.5
log
@* cygerrno.h: New file.  Use this throughout whenever errno manipulation is
required.
* errno.cc: Use DWORD to hold Windows errors.
(geterrno_from_win_error): New function.
(seterrno_from_win_error): Use geterrno_from_win_error to convert supplied
windows error (suggested by Corinna Vinschen).
* path.cc (symlink_info): Add error element.
* path.cc (path_conv::check): Remove errno setting.  Use new symlink_info errno
element to set path_conv error, where appropriate.
(symlink_info::check): Set error element rather than attempting to manipulate
errno.  Add more checks for trailing / and /..  even though they are currently
useless.  Avoid setting EINVAL.
* path.cc (normalize_posix_path): Correct check for trailing /.
@
text
@d16 1
@


1.4
log
@* winsup.h: Split out dtable definitions into separate header file.
* dtable.h: New file.
* sigproc.h: Eliminate pinfo.h usage here.  Use it in source files that need
it.
@
text
@d17 1
@


1.3
log
@Rename hinfo -> dtable.  Name the former dtable array 'fdtab'.
@
text
@d16 1
@


1.2
log
@* winsup.h: take out protections of environ, errno, allow C use
* *.cc: put winsup.h before other headers (for __INSIDE_CYGWIN__);
use cur_environ() instead of just environ
* times.cc: remove import protections
* glob.c: add winsup.h
* localtime.c: ditto
* smallprint.c: ditto
* Makefile.in: don't __INSIDE_CYGWIN__ as it messes up profiling.
@
text
@d30 1
a30 1
	   if and when hinfo::find_unused_handle is called.  Perhaps
d32 1
a32 1
	return dtable.size;
@


1.1
log
@Initial revision
@
text
@d11 1
a15 1
#include "winsup.h"
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
