head	1.3;
access;
symbols
	cygwin-1_7_35-release:1.3
	cygwin-1_7_34-release:1.3
	cygwin-1_7_33-release:1.3
	cygwin-1_7_32-release:1.3
	cygwin-1_7_31-release:1.3
	cygwin-1_7_30-release:1.3
	cygwin-1_7_29-release:1.3
	cygwin-1_7_29-release-branchpoint:1.3.0.42
	cygwin-pre-user-db:1.3
	cygwin-1_7_28-release:1.3
	cygwin-1_7_27-release:1.3
	cygwin-1_7_26-release:1.3
	cygwin-1_7_25-release:1.3
	cygwin-1_7_24-release:1.3
	cygwin-1_7_23-release:1.3
	cygwin-1_7_22-release:1.3
	cygwin-1_7_21-release:1.3
	cygwin-1_7_20-release:1.3
	cygwin-1_7_19-release:1.3
	cygwin-64bit-postmerge:1.3
	cygwin-64bit-premerge-branch:1.3.0.40
	cygwin-64bit-premerge:1.3
	cygwin-1_7_18-release:1.3
	post-ptmalloc3:1.3
	pre-ptmalloc3:1.3
	cygwin-1_7_17-release:1.3
	cygwin-64bit-branch:1.3.0.38
	cygwin-1_7_16-release:1.3
	cygwin-1_7_15-release:1.3
	cygwin-1_7_14_2-release:1.3
	cygwin-1_7_14-release:1.3
	cygwin-1_7_12-release:1.3
	cygwin-1_7_11-release:1.3
	cygwin-1_7_10-release:1.3
	signal-rewrite:1.3.0.36
	pre-notty:1.3
	cygwin-1_7_9-release:1.3
	cv-post-1_7_9:1.3.0.32
	cygwin-1_7_8-release:1.3
	cygwin-1_7_7-release:1.3
	cygwin-1_7_5-release:1.3
	cygwin-1_7_4-release:1.3
	cygwin-1_7_3-release:1.3
	cygwin-1_7_2-release:1.3
	fifo_doover3:1.3.0.30
	cygwin-1_7_1-release:1.3
	prefifo:1.3
	cv-branch-2:1.3.0.28
	pre-ripout-set_console_state_for_spawn:1.3
	EOL_registry_mounts:1.3
	preoverlapped:1.3
	drop_9x_support_start:1.3
	cr-0x5f1:1.3.0.26
	cv-branch:1.3.0.24
	pre-ptymaster-archetype:1.3
	cr-0x3b58:1.3.0.22
	cr-0x5ef:1.3.0.20
	after-mmap-privanon-noreserve:1.3
	after-mmap-revamp:1.3
	before-mmap-revamp:1.3
	cgf-more-exit-sync:1.3
	post_wait_sig_exit:1.3
	pre_wait_sig_exit:1.3
	reparent-point:1.3
	noreparent:1.3.0.18
	cr-0x5e6:1.3.0.16
	cr-0x9e:1.3.0.14
	cr-0x9d:1.3.0.12
	cgf-deleteme:1.3.0.10
	pre-sigrewrite:1.3
	corinna-01:1.3
	cr-0x9c:1.3.0.8
	cr-0x9b:1.3.0.6
	cr-0x99:1.3
	Z-emcb-cygwin_daemon:1.3.0.2
	w32api-2_2:1.3
	mingw-runtime-2_4:1.3
	pre-cgf-merge:1.3
	cgf-dev-branch:1.3.0.56
	predaemon:1.3
	cygwin_daemon_merge_HEAD:1.3
	pregp02r1:1.3.0.34
	cygnus_cvs_20020108_pre:1.3
	Z-cygwin_daemon_merge-new_HEAD:1.3
	Z-cygwin_daemon_merge_HEAD:1.3
	cygwin_daemon:1.3.0.4;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2001.06.24.22.26.49;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.18.19.51.02;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.3
log
@forced commit
@
text
@
			    WINSUP ROADMAP

The purpose of this document is to give the briefest overview of how
the various parts of cygwin work together and where everything can be
found.  The intended audience is people developing the cygwin dll
itself.  Comments to dj@@cygnus.com.

=== cygwin1.dll source files

- overhead
.h	winsup autoload debug external shared sync
.cc	assert dcrt0 debug external init ntea registry security
	shared smallprint strace sync
.din	cygwin
.rc	winver
.sgml	external shared

- processes
.h	sigproc
.cc	exec fork pinfo resource signal sigproc spawn wait

- signals
.cc	exceptions window

- files and I/O
.h	delqueue fhandler path select
.cc	delqueue dir fhandler* dtable path pipe select tty
.sgml	dtable path

- common unix functions
.h	dll_init tz_posixrules
.cc	dlfcn dll_init environ errno fcntl flog grp ioctl localtime
	malloc passwd scandir strsep syscalls sysconf syslog termios
.c	longjmp setjmp
.sgml	dll_init

- unix emulation
.cc	heap mmap net times unifo uname


--- if MT_SAFE
.h	thread
.cc	pthread thread

--- from other places
regex/*
../libiberty/{random,strsignal}
../newlib/* (libc)

=== libcygwin.a source files

libccrt0.cc
libcmain.cc
dll_entry.cc
dll_main.cc
getopt.c

=== gmon (profiling, -pg)

gcrt0.c
gmon.c		gmon.h
mcount.c
profil.c	profil.h

=== entry points

- normal cygwin program

newlib/libc/sys/cygwin/crt0.c has mainCRTStartup() and calls cygwin_crt0()

libccrt0.cc has cygwin_crt0() and calls dll_crt0()

dcrt0.cc - has dll_crt0()

Note: dll_init.cc has nothing to do with initializing the cygwin dll.
It initializes the dlls you have dl_open'd.

- cygwin-built dll

dll_entry.cc - has a macro for wrapping your dll startup function
	(equivalent of DllMain()) in such a way that you get your
	cygwin environment set up automatically when your dll is
	loaded.

dll_main.cc - has empty DllMain() in case you don't have your own

- manually loading cygwin1.dll

init.cc - has dll_entry() which is called by the OS when the dll is
	loaded.  It doesn't do much except note if you linked
	cygwin1.dll or are manually loading it.

=== About "fhandlers"

An fhandler is a file type handler.  This is where the unix device
emulation happens.

dtable.cc maps posix file descriptors to a table of file handlers (type
fhandler) in the dll.  It's mostly concerned with managing the table
of descriptors (open, dup, fork, select).  Most of the posix I/O
system calls (syscalls.cc) use the fdtab table to call the right
fhandler directly.

fhandler.cc is the base class; specific types are derived as
appropriate (see fhandler.h).  dtable.cc is in charge of selecting and
creating a suitable fhandler when you open a file.  path.cc handles
emulated files in /dev (like /dev/null) by returning an FH_* value
from get_device_number (which dtable.cc calls in dtable::build_fhandler).

Note: if you're looking for read() and write(), they call _read() and
_write() in syscalls.cc.  The non-underscored ones are in
newlib/libc/syscalls and just call the underscored ones.

=== How "fork" works

It all starts in fork() in fork.cc.

Set up a pid in the shared memory area for the new child.  Use
setjmp() to capture state.  First time (parent), set up some stuff and
use CreateProcess to run a second copy of the same executable.  The
second copy will note in the shared memory area that it's a fork, and
do the longjmp.  They sync up and the parent copies all it's program
memory to the child's address space.  There's also code to reload
dlls, map shared memory and mmap'd files, etc.

Handling the special startup for the child is done in dcrt0.cc in many
places.  This case is triggered by a special StartupInfo structure
that's passed from the parent to the child in CreateProcessA.
@


1.2
log
@hinfo -> dtable
@
text
@@


1.1
log
@Initial revision
@
text
@d28 2
a29 2
.cc	delqueue dir fhandler* hinfo path pipe select tty
.sgml	hinfo path
d99 1
a99 1
hinfo.cc maps posix file descriptors to a table of file handlers (type
d102 1
a102 1
system calls (syscalls.cc) use the hinfo table to call the right
d106 1
a106 1
appropriate (see fhandler.h).  hinfo.cc is in charge of selecting and
d109 1
a109 1
from get_device_number (which hinfo.cc calls in hinfo::build_fhandler).
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
