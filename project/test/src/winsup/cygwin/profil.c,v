head	1.11;
access;
symbols
	cygwin-1_7_35-release:1.11
	cygwin-1_7_34-release:1.11
	cygwin-1_7_33-release:1.11
	cygwin-1_7_32-release:1.11
	cygwin-1_7_31-release:1.11
	cygwin-1_7_30-release:1.11
	cygwin-1_7_29-release:1.11
	cygwin-1_7_29-release-branchpoint:1.11.0.2
	cygwin-pre-user-db:1.11
	cygwin-1_7_28-release:1.11
	cygwin-1_7_27-release:1.11
	cygwin-1_7_26-release:1.11
	cygwin-1_7_25-release:1.11
	cygwin-1_7_24-release:1.11
	cygwin-1_7_23-release:1.11
	cygwin-1_7_22-release:1.11
	cygwin-1_7_21-release:1.11
	cygwin-1_7_20-release:1.10
	cygwin-1_7_19-release:1.10
	cygwin-64bit-postmerge:1.10
	cygwin-64bit-premerge-branch:1.9.0.2
	cygwin-64bit-premerge:1.9
	cygwin-1_7_18-release:1.9
	post-ptmalloc3:1.8.6.2
	pre-ptmalloc3:1.8.6.2
	cygwin-1_7_17-release:1.8
	cygwin-64bit-branch:1.8.0.6
	cygwin-1_7_16-release:1.8
	cygwin-1_7_15-release:1.8
	cygwin-1_7_14_2-release:1.8
	cygwin-1_7_14-release:1.8
	cygwin-1_7_12-release:1.8
	cygwin-1_7_11-release:1.8
	cygwin-1_7_10-release:1.8
	signal-rewrite:1.8.0.4
	pre-notty:1.8
	cygwin-1_7_9-release:1.8
	cv-post-1_7_9:1.8.0.2
	cygwin-1_7_8-release:1.8
	cygwin-1_7_7-release:1.8
	cygwin-1_7_5-release:1.7
	cygwin-1_7_4-release:1.7
	cygwin-1_7_3-release:1.7
	cygwin-1_7_2-release:1.7
	fifo_doover3:1.7.0.4
	cygwin-1_7_1-release:1.7
	prefifo:1.7
	cv-branch-2:1.7.0.2
	pre-ripout-set_console_state_for_spawn:1.6
	EOL_registry_mounts:1.6
	preoverlapped:1.6
	drop_9x_support_start:1.6
	cr-0x5f1:1.6.0.24
	cv-branch:1.6.0.22
	pre-ptymaster-archetype:1.6
	cr-0x3b58:1.6.0.20
	cr-0x5ef:1.6.0.18
	after-mmap-privanon-noreserve:1.6
	after-mmap-revamp:1.6
	before-mmap-revamp:1.6
	cgf-more-exit-sync:1.6
	post_wait_sig_exit:1.6
	pre_wait_sig_exit:1.6
	reparent-point:1.6
	noreparent:1.6.0.16
	cr-0x5e6:1.6.0.14
	cr-0x9e:1.6.0.12
	cr-0x9d:1.6.0.10
	cgf-deleteme:1.6.0.8
	pre-sigrewrite:1.6
	corinna-01:1.6
	cr-0x9c:1.6.0.6
	cr-0x9b:1.6.0.4
	cr-0x99:1.6
	Z-emcb-cygwin_daemon:1.6.0.2
	w32api-2_2:1.5
	mingw-runtime-2_4:1.5
	pre-cgf-merge:1.6
	cgf-dev-branch:1.5.0.56
	predaemon:1.5
	cygwin_daemon_merge_HEAD:1.5
	pregp02r1:1.5.0.34
	cygnus_cvs_20020108_pre:1.5
	Z-cygwin_daemon_merge-new_HEAD:1.5
	Z-cygwin_daemon_merge_HEAD:1.5
	cygwin_daemon:1.5.0.4;
locks; strict;
comment	@ * @;
expand	@o@;


1.11
date	2013.06.18.09.45.37;	author corinna;	state Exp;
branches;
next	1.10;

1.10
date	2013.04.23.09.44.33;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2013.01.21.04.38.28;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2010.08.30.01.57.36;	author cgf;	state Exp;
branches
	1.8.6.1;
next	1.7;

1.7
date	2009.01.03.05.12.21;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2003.04.28.20.10.53;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2001.09.11.20.01.00;	author cgf;	state Exp;
branches
	1.5.56.1;
next	1.4;

1.4
date	2001.06.24.22.26.52;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2001.04.03.02.53.24;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.28.05.41.43;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.8.6.1
date	2012.11.16.15.30.55;	author corinna;	state Exp;
branches;
next	1.8.6.2;

1.8.6.2
date	2013.01.21.13.52.10;	author corinna;	state Exp;
branches;
next	;

1.5.56.1
date	2003.05.10.17.20.54;	author cgf;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.11
log
@	* Makefile.in (VPATH): Drop CONFIG_DIR.
	(EXTRA_DLL_OFILES): Remove.
	(DLL_OFILES): Remove EXTRA_DLL_OFILES.
	(ASFLAGS): Define as -D_WIN64 on x86_64.
	(GMON_OFILES): Add mcountFunc.o.
	($(srcdir)/$(TLSOFFSETS_H)): Use target_cpu rather than CONFIG_DIR.
	* configure.ac (CONFIG_DIR): Remove definition.
	* configure: Regenerate.
	* gcrt0.c: Use latest version from Mingw-w64 project.
	* gmon.c: Ditto.
	* gmon.h: Ditto.
	* mcount.c: Ditto.
	* mcountFunc.S: Ditto, new file.
	* profil.c: Ditto.
	* profil.h: Ditto.
	* config: Remove entire directory.
@
text
@/* profil.c -- win32 profil.c equivalent

   Copyright 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.

   This file is part of Cygwin.

   This software is a copyrighted work licensed under the terms of the
   Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
   details. */

/*
 * This file is taken from Cygwin distribution. Please keep it in sync.
 * The differences should be within __MINGW32__ guard.
 */

#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#endif
#include <windows.h>
#include <stdio.h>
#include <sys/types.h>
#include <errno.h>
#include <math.h>
#include "profil.h"

#define SLEEPTIME (1000 / PROF_HZ)

/* global profinfo for profil() call */
static struct profinfo prof;

/* Get the pc for thread THR */

static size_t
get_thrpc (HANDLE thr)
{
  CONTEXT ctx;
  size_t pc;
  int res;

  res = SuspendThread (thr);
  if (res == -1)
    return (size_t) - 1;
  ctx.ContextFlags = CONTEXT_CONTROL | CONTEXT_INTEGER;
  pc = (size_t) - 1;
  if (GetThreadContext (thr, &ctx)) {
#ifndef _WIN64
    pc = ctx.Eip;
#else
    pc = ctx.Rip;
#endif
  }
  ResumeThread (thr);
  return pc;
}

/* Display cell of profile buffer */
#if 0
static void
print_prof (struct profinfo *p)
{
  printf ("profthr %x\ttarget thr %x\n", p->profthr, p->targthr);
  printf ("pc: %x - %x\n", p->lowpc, p->highpc);
  printf ("scale: %x\n", p->scale);
  return;
}
#endif

/* Everytime we wake up use the main thread pc to hash into the cell in the
   profile buffer ARG. */

static void CALLBACK profthr_func (LPVOID);

static void CALLBACK
profthr_func (LPVOID arg)
{
  struct profinfo *p = (struct profinfo *) arg;
  size_t pc, idx;

  for (;;)
    {
      pc = (size_t) get_thrpc (p->targthr);
      if (pc >= p->lowpc && pc < p->highpc)
	{
	  idx = PROFIDX (pc, p->lowpc, p->scale);
	  p->counter[idx]++;
	}
#if 0
      print_prof (p);
#endif
      /* Check quit condition, WAIT_OBJECT_0 or WAIT_TIMEOUT */
      if (WaitForSingleObject (p->quitevt, SLEEPTIME) == WAIT_OBJECT_0)
	return;
    }
}

/* Stop profiling to the profiling buffer pointed to by P. */

static int
profile_off (struct profinfo *p)
{
  if (p->profthr)
    {
      SignalObjectAndWait (p->quitevt, p->profthr, INFINITE, FALSE);
      CloseHandle (p->quitevt);
      CloseHandle (p->profthr);
    }
  if (p->targthr)
    CloseHandle (p->targthr);
  return 0;
}

/* Create a timer thread and pass it a pointer P to the profiling buffer. */

static int
profile_on (struct profinfo *p)
{
  DWORD thrid;

  /* get handle for this thread */
  if (!DuplicateHandle (GetCurrentProcess (), GetCurrentThread (),
			GetCurrentProcess (), &p->targthr, 0, FALSE,
			DUPLICATE_SAME_ACCESS))
    {
      errno = ESRCH;
      return -1;
    }

  p->quitevt = CreateEvent (NULL, TRUE, FALSE, NULL);

  if (!p->quitevt)
    {
      CloseHandle (p->quitevt);
      p->targthr = 0;
      errno = EAGAIN;
      return -1;
    }

  p->profthr = CreateThread (0, 0, (DWORD (WINAPI *)(LPVOID)) profthr_func,
                             (void *) p, 0, &thrid);

  if (!p->profthr)
    {
      CloseHandle (p->targthr);
      CloseHandle (p->quitevt);
      p->targthr = 0;
      errno = EAGAIN;
      return -1;
    }

  /* Set profiler thread priority to highest to be sure that it gets the
     processor as soon it request it (i.e. when the Sleep terminate) to get
     the next data out of the profile. */

  SetThreadPriority (p->profthr, THREAD_PRIORITY_TIME_CRITICAL);

  return 0;
}

/*
 * start or stop profiling
 *
 * profiling goes into the SAMPLES buffer of size SIZE (which is treated
 * as an array of u_shorts of size size/2)
 *
 * each bin represents a range of pc addresses from OFFSET.  The number
 * of pc addresses in a bin depends on SCALE.  (A scale of 65536 maps
 * each bin to two addresses, A scale of 32768 maps each bin to 4 addresses,
 * a scale of 1 maps each bin to 128k addreses).  Scale may be 1 - 65536,
 * or zero to turn off profiling
 */
int
profile_ctl (struct profinfo * p, char *samples, size_t size,
	     size_t offset, u_int scale)
{
  size_t maxbin;

  if (scale > 65536)
    {
      errno = EINVAL;
      return -1;
    }

  profile_off (p);
  if (scale)
    {
      memset (samples, 0, size);
      memset (p, 0, sizeof *p);
      maxbin = size >> 1;
      prof.counter = (u_short *) samples;
      prof.lowpc = offset;
      prof.highpc = PROFADDR (maxbin, offset, scale);
      prof.scale = scale;

      return profile_on (p);
    }
  return 0;
}

/* Equivalent to unix profil()
   Every SLEEPTIME interval, the user's program counter (PC) is examined:
   offset is subtracted and the result is multiplied by scale.
   The word pointed to by this address is incremented.  Buf is unused. */

int
profil (char *samples, size_t size, size_t offset, u_int scale)
{
  return profile_ctl (&prof, samples, size, offset, scale);
}

@


1.10
log
@	* Merge in cygwin-64bit-branch.
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001, 2003, 2009, 2010, 2012 Red Hat, Inc.
d11 10
a20 1
#include "winlean.h"
d23 2
a24 2

#include <profil.h>
d33 1
a33 1
static uintptr_t
d37 1
a37 1
  uintptr_t pc;
d42 1
a42 1
    return (uintptr_t) -1;
d44 5
a48 3
  pc = (uintptr_t) -1;
  if (GetThreadContext (thr, &ctx))
#ifdef __x86_64__
a49 2
#else
    pc = ctx.Eip;
d51 1
d71 3
a73 1
static DWORD CALLBACK
d77 1
a77 4
  uintptr_t pc;
  size_t idx;

  SetThreadPriority(p->profthr, THREAD_PRIORITY_TIME_CRITICAL);
d81 1
a81 1
      pc = (uintptr_t) get_thrpc (p->targthr);
d90 3
a92 1
      Sleep (SLEEPTIME);
a93 1
  return 0;
d103 2
a104 1
      TerminateThread (p->profthr, 0);
d128 13
a140 1
  p->profthr = CreateThread (0, 0, profthr_func, (void *) p, 0, &thrid);
d144 1
d149 7
d173 1
a173 1
	     size_t offset, unsigned int scale)
d189 1
a189 1
      prof.counter = (uint16_t *) samples;
d205 1
a205 1
profil (char *samples, size_t size, size_t offset, unsigned int scale)
d209 1
@


1.9
log
@Throughout, update copyrights to reflect dates which correspond to main-branch
checkins.  Regularize copyright format.
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001, 2003, 2009, 2010 Red Hat, Inc.
d24 1
a24 1
static u_long
d28 1
a28 1
  u_long pc;
d33 1
a33 1
    return (u_long) - 1;
d35 1
a35 1
  pc = (u_long) - 1;
d37 3
d41 1
d65 2
a66 1
  u_long pc, idx;
d72 1
a72 1
      pc = (u_long) get_thrpc (p->targthr);
d142 1
a142 1
	     u_long offset, u_int scale)
d144 1
a144 1
  u_long maxbin;
d158 1
a158 1
      prof.counter = (u_short *) samples;
d174 1
a174 1
profil (char *samples, size_t size, u_long offset, u_int scale)
a177 1

@


1.8
log
@* winlean.h: New file.
* automode.c: Use "winlean.h".
* binmode.c: Ditto.
* gmon.c: Ditto.
* textmode.c: Ditto.
* textreadmode.c: Ditto.
* winsup.h: Ditto.
* lib/cygwin_attach_dll.c: Ditto.
* lib/dll_main.cc: Ditto.
* profile.c: Ditto.
* crt0.c: Ditto.  Cleanup ancient cruft.  Add dummy calls to cygwin_premain*.
* include/sys/cygwin.h: Remove old stuff.  Move premain declarations nearer to
other cygwin-specific function declarations.
* globals.cc: Add comment.
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001, 2003, 2009 Red Hat, Inc.
@


1.8.6.1
log
@	* cygtls.h (CYGTLS_PADSIZE): Define for 64 bit.  Add FIXME comment.
	* profil.c: Replace usage of network types with types as documented
	in Linux, throughout.
	(get_thrpc): Fix access to instruction pointer for x86_64.
	* profil.h: Include stdin.t.h.  Replace usage of network types with
	types as documented in Linux, throughout.
	* config/x86_64/profile.h (mcount): Use unsigned long rather than
	__uintptr_t.
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001, 2003, 2009, 2012 Red Hat, Inc.
d24 1
a24 1
static uintptr_t
d28 1
a28 1
  uintptr_t pc;
d33 1
a33 1
    return (uintptr_t) -1;
d35 1
a35 1
  pc = (uintptr_t) -1;
a36 3
#ifdef __x86_64__
    pc = ctx.Rip;
#else
a37 1
#endif
d61 1
a61 2
  uintptr_t pc;
  size_t idx;
d67 1
a67 1
      pc = (uintptr_t) get_thrpc (p->targthr);
d137 1
a137 1
	     size_t offset, unsigned int scale)
d139 1
a139 1
  size_t maxbin;
d153 1
a153 1
      prof.counter = (uint16_t *) samples;
d169 1
a169 1
profil (char *samples, size_t size, size_t offset, unsigned int scale)
d173 1
@


1.8.6.2
log
@Pull in changes from HEAD
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001, 2003, 2009, 2010, 2012 Red Hat, Inc.
@


1.7
log
@Remove unneeded header files from source files throughout.  Update copyrights
where appropriate.
* globals.cc: New file for generic global variables.
* mkglobals_h: New file to generate globals.h.
* mkstatic: New Script used to build a (currently non-working) static
libcygwin_s.a.
* Makefile.in: Add unused rule to build a non-working libcygwin_s.a.
(DLL_OFILES): Add globals.o.  Make all objects rely on globals.h.
(globals.h): New target.  Generate globals.h.
* cygtls.h: Honor new CYGTLS_HANDLE define to control when the HANDLE operator
is allowed in _cygtls.
* dcrt0.cc: Move most globals to globals.cc.
* init.cc: Ditto.
* environ.cc (strip_title_path): Remove now-unneeded extern.
* fhandler_serial.cc (fhandler_serial::open): Ditto.
* pinfo.cc: Ditto.
(commune_process): Ditto.
* shared.cc: Ditto.
* glob.cc: Ditto.
* strace.cc: Ditto.
* exceptions.cc: Define CYGTLS_HANDLE before including winsup.h.
* path.cc (stat_suffixes): Move here.
* security.h: Add forward class path_conv declaration.
* smallprint.cc (__small_vsprintf): Make a true c++ function.
(__small_sprintf): Ditto.
(small_printf): Ditto.
(console_printf): Ditto.
(__small_vswprintf): Ditto.
(__small_swprintf): Ditto.
* spawn.cc (spawn_guts): Remove _stdcall decoration in favor of regparm.
(hExeced): Move to globals.cc
* strfuncs.cc (current_codepage): Ditto.
(active_codepage): Ditto.
* sync.cc (lock_process::locker): Move here from dcrt0.cc.
* syscalls.cc (stat_suffixes): Move to path.cc.
* tty.cc (tty::create_master): Uncapitalize fatal warning for consistency.
* winsup.h: Include globals.h to declare most of the grab bag list of globals
which were previously defined here.
* mount.h: Move USER_* defines back to shared_info.h.
* speclib: Force temporary directory cleanup.
@
text
@d11 1
a11 1
#include <windows.h>
@


1.6
log
@* profil.h (PROFADDR): Prevent overflow when text segments are larger than
256k.
* profil.c (profthr_func): Raise thread priority for more accurate sampling.
* path.cc (hash_path_name): Use ino_t as type.
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000, 2001 Red Hat, Inc.
a11 1
#include <stdio.h>
a13 1
#include <math.h>
@


1.5
log
@Update copyrights.
@
text
@d65 2
@


1.5.56.1
log
@merge from trunk
@
text
@a64 2
  SetThreadPriority(p->profthr, THREAD_PRIORITY_TIME_CRITICAL);

@


1.4
log
@forced commit
@
text
@d3 1
a3 1
   Copyright 1998 Cygnus Solutions.
@


1.3
log
@* cygrun.c (main): Fix compiler warning.
* gmon.c (_mcleanup): Ditto.
* profil.c (profile_off): Ditto.
* net.cc (find_winsock_errno): New function.
(__set_winsock_errno): Use find_winsock_errno.
(cygwin_setsockopt): Detect SO_ERROR for debugging.
(cygwin_getsockopt): Ditto.  Translate error when getsockopt returns SO_ERROR.
* winsup.h: regparmize __set_winsock_errno.
* include/sys/strace.h: Document that strace functions can't use regparm.
@
text
@@


1.2
log
@Whitespace cleanup.

* configure.in: Eliminate subdir stuff.
* configure: Regenerate.
* include/getopt.h (option): Make name field 'const'.
@
text
@d101 1
a101 1
  int thrid;
@


1.1
log
@Initial revision
@
text
@d56 1
a56 1
/* Everytime we wake up use the main thread pc to hash into the cell in the 
d128 1
a128 1
 * 
d163 3
a165 3
/* Equivalent to unix profil() 
   Every SLEEPTIME interval, the user's program counter (PC) is examined: 
   offset is subtracted and the result is multiplied by scale.  
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
