head	1.164;
access;
symbols
	cygwin-1_7_35-release:1.164
	cygwin-1_7_34-release:1.164
	cygwin-1_7_33-release:1.161
	cygwin-1_7_32-release:1.161
	cygwin-1_7_31-release:1.161
	cygwin-1_7_30-release:1.161
	cygwin-1_7_29-release:1.161
	cygwin-1_7_29-release-branchpoint:1.161.0.2
	cygwin-pre-user-db:1.161
	cygwin-1_7_28-release:1.160
	cygwin-1_7_27-release:1.160
	cygwin-1_7_26-release:1.160
	cygwin-1_7_25-release:1.159
	cygwin-1_7_24-release:1.158
	cygwin-1_7_23-release:1.158
	cygwin-1_7_22-release:1.158
	cygwin-1_7_21-release:1.158
	cygwin-1_7_20-release:1.158
	cygwin-1_7_19-release:1.158
	cygwin-64bit-postmerge:1.157
	cygwin-64bit-premerge-branch:1.156.0.2
	cygwin-64bit-premerge:1.156
	cygwin-1_7_18-release:1.156
	post-ptmalloc3:1.155.2.4
	pre-ptmalloc3:1.155.2.4
	cygwin-1_7_17-release:1.155
	cygwin-64bit-branch:1.155.0.2
	cygwin-1_7_16-release:1.154
	cygwin-1_7_15-release:1.154
	cygwin-1_7_14_2-release:1.154
	cygwin-1_7_14-release:1.154
	cygwin-1_7_12-release:1.154
	cygwin-1_7_11-release:1.154
	cygwin-1_7_10-release:1.152
	signal-rewrite:1.148.0.2
	pre-notty:1.147
	cygwin-1_7_9-release:1.139
	cv-post-1_7_9:1.139.0.2
	cygwin-1_7_8-release:1.139
	cygwin-1_7_7-release:1.137
	cygwin-1_7_5-release:1.137
	cygwin-1_7_4-release:1.137
	cygwin-1_7_3-release:1.137
	cygwin-1_7_2-release:1.137
	fifo_doover3:1.130.0.2
	cygwin-1_7_1-release:1.129
	prefifo:1.127
	cv-branch-2:1.127.0.2
	pre-ripout-set_console_state_for_spawn:1.117
	EOL_registry_mounts:1.112
	preoverlapped:1.108
	drop_9x_support_start:1.104
	cr-0x5f1:1.98.0.8
	cv-branch:1.98.0.6
	pre-ptymaster-archetype:1.98
	cr-0x3b58:1.98.0.4
	cr-0x5ef:1.98.0.2
	after-mmap-privanon-noreserve:1.98
	after-mmap-revamp:1.98
	before-mmap-revamp:1.98
	cgf-more-exit-sync:1.98
	post_wait_sig_exit:1.96
	pre_wait_sig_exit:1.96
	reparent-point:1.82
	noreparent:1.82.0.2
	cr-0x5e6:1.81.0.2
	cr-0x9e:1.80.0.6
	cr-0x9d:1.80.0.4
	cgf-deleteme:1.80.0.2
	pre-sigrewrite:1.78
	corinna-01:1.77
	cr-0x9c:1.73.0.4
	cr-0x9b:1.73.0.2
	cr-0x99:1.69
	Z-emcb-cygwin_daemon:1.69.0.2
	w32api-2_2:1.65
	mingw-runtime-2_4:1.65
	pre-cgf-merge:1.73
	cgf-dev-branch:1.64.0.10
	predaemon:1.42
	cygwin_daemon_merge_HEAD:1.42
	pregp02r1:1.42.0.2
	cygnus_cvs_20020108_pre:1.39
	Z-cygwin_daemon_merge-new_HEAD:1.53
	Z-cygwin_daemon_merge_HEAD:1.53
	cygwin_daemon:1.32.0.4;
locks; strict;
comment	@// @;
expand	@o@;


1.164
date	2014.11.27.16.49.41;	author corinna;	state Exp;
branches;
next	1.163;

1.163
date	2014.10.17.14.36.59;	author corinna;	state Exp;
branches;
next	1.162;

1.162
date	2014.02.09.19.44.55;	author corinna;	state Exp;
branches;
next	1.161;

1.161
date	2014.02.06.20.38.35;	author corinna;	state Exp;
branches;
next	1.160;

1.160
date	2013.11.24.12.13.35;	author corinna;	state Exp;
branches;
next	1.159;

1.159
date	2013.08.30.21.02.02;	author cgf;	state Exp;
branches;
next	1.158;

1.158
date	2013.05.22.16.55.55;	author corinna;	state Exp;
branches;
next	1.157;

1.157
date	2013.04.23.09.44.33;	author corinna;	state Exp;
branches;
next	1.156;

1.156
date	2013.01.21.04.38.28;	author cgf;	state Exp;
branches;
next	1.155;

1.155
date	2012.07.29.19.18.05;	author cgf;	state Exp;
branches
	1.155.2.1;
next	1.154;

1.154
date	2012.02.21.17.03.51;	author corinna;	state Exp;
branches;
next	1.153;

1.153
date	2012.02.14.11.27.43;	author corinna;	state Exp;
branches;
next	1.152;

1.152
date	2011.12.22.11.02.34;	author corinna;	state Exp;
branches;
next	1.151;

1.151
date	2011.11.18.17.38.04;	author corinna;	state Exp;
branches;
next	1.150;

1.150
date	2011.11.17.22.08.14;	author corinna;	state Exp;
branches;
next	1.149;

1.149
date	2011.10.24.09.19.58;	author corinna;	state Exp;
branches;
next	1.148;

1.148
date	2011.08.09.12.00.27;	author corinna;	state Exp;
branches;
next	1.147;

1.147
date	2011.06.07.20.55.10;	author cgf;	state Exp;
branches;
next	1.146;

1.146
date	2011.06.05.02.10.31;	author cgf;	state Exp;
branches;
next	1.145;

1.145
date	2011.05.28.18.17.09;	author cgf;	state Exp;
branches;
next	1.144;

1.144
date	2011.05.27.06.11.05;	author corinna;	state Exp;
branches;
next	1.143;

1.143
date	2011.05.16.10.27.14;	author corinna;	state Exp;
branches;
next	1.142;

1.142
date	2011.05.02.15.28.35;	author cgf;	state Exp;
branches;
next	1.141;

1.141
date	2011.04.23.13.15.46;	author corinna;	state Exp;
branches;
next	1.140;

1.140
date	2011.04.19.10.02.06;	author corinna;	state Exp;
branches;
next	1.139;

1.139
date	2010.09.28.14.49.31;	author corinna;	state Exp;
branches;
next	1.138;

1.138
date	2010.09.28.14.40.18;	author corinna;	state Exp;
branches;
next	1.137;

1.137
date	2010.03.18.19.10.11;	author cgf;	state Exp;
branches;
next	1.136;

1.136
date	2010.03.15.21.29.15;	author cgf;	state Exp;
branches;
next	1.135;

1.135
date	2010.03.13.19.34.35;	author cgf;	state Exp;
branches;
next	1.134;

1.134
date	2010.03.12.23.13.47;	author cgf;	state Exp;
branches;
next	1.133;

1.133
date	2010.03.10.15.39.52;	author cgf;	state Exp;
branches;
next	1.132;

1.132
date	2010.03.09.21.26.55;	author cgf;	state Exp;
branches;
next	1.131;

1.131
date	2010.03.09.16.07.15;	author cgf;	state Exp;
branches;
next	1.130;

1.130
date	2009.12.18.20.32.04;	author corinna;	state Exp;
branches;
next	1.129;

1.129
date	2009.11.06.13.06.36;	author corinna;	state Exp;
branches;
next	1.128;

1.128
date	2009.10.31.13.24.06;	author corinna;	state Exp;
branches;
next	1.127;

1.127
date	2009.06.08.03.53.40;	author cgf;	state Exp;
branches;
next	1.126;

1.126
date	2009.01.26.13.42.37;	author corinna;	state Exp;
branches;
next	1.125;

1.125
date	2009.01.03.05.12.21;	author cgf;	state Exp;
branches;
next	1.124;

1.124
date	2008.11.26.17.21.04;	author cgf;	state Exp;
branches;
next	1.123;

1.123
date	2008.07.27.22.31.48;	author cgf;	state Exp;
branches;
next	1.122;

1.122
date	2008.07.27.14.52.46;	author cgf;	state Exp;
branches;
next	1.121;

1.121
date	2008.07.25.15.23.56;	author corinna;	state Exp;
branches;
next	1.120;

1.120
date	2008.07.24.18.25.52;	author corinna;	state Exp;
branches;
next	1.119;

1.119
date	2008.07.16.20.20.45;	author corinna;	state Exp;
branches;
next	1.118;

1.118
date	2008.07.15.11.42.45;	author corinna;	state Exp;
branches;
next	1.117;

1.117
date	2008.05.23.11.59.37;	author corinna;	state Exp;
branches;
next	1.116;

1.116
date	2008.04.21.12.46.57;	author corinna;	state Exp;
branches;
next	1.115;

1.115
date	2008.04.18.20.13.37;	author corinna;	state Exp;
branches;
next	1.114;

1.114
date	2008.04.07.18.45.57;	author cgf;	state Exp;
branches;
next	1.113;

1.113
date	2008.04.07.16.15.45;	author cgf;	state Exp;
branches;
next	1.112;

1.112
date	2008.04.01.13.22.47;	author corinna;	state Exp;
branches;
next	1.111;

1.111
date	2008.03.27.10.43.14;	author corinna;	state Exp;
branches;
next	1.110;

1.110
date	2007.12.05.15.10.19;	author corinna;	state Exp;
branches;
next	1.109;

1.109
date	2007.08.13.17.16.04;	author corinna;	state Exp;
branches;
next	1.108;

1.108
date	2007.06.27.17.08.19;	author corinna;	state Exp;
branches;
next	1.107;

1.107
date	2007.03.29.16.37.36;	author corinna;	state Exp;
branches;
next	1.106;

1.106
date	2007.02.23.10.51.59;	author corinna;	state Exp;
branches;
next	1.105;

1.105
date	2007.02.22.10.54.47;	author corinna;	state Exp;
branches;
next	1.104;

1.104
date	2006.12.11.18.55.28;	author cgf;	state Exp;
branches;
next	1.103;

1.103
date	2006.10.31.18.41.16;	author corinna;	state Exp;
branches;
next	1.102;

1.102
date	2006.10.27.10.51.25;	author corinna;	state Exp;
branches;
next	1.101;

1.101
date	2006.08.11.15.40.07;	author corinna;	state Exp;
branches;
next	1.100;

1.100
date	2006.07.26.21.02.01;	author corinna;	state Exp;
branches;
next	1.99;

1.99
date	2006.07.26.15.59.39;	author corinna;	state Exp;
branches;
next	1.98;

1.98
date	2005.09.27.19.04.38;	author corinna;	state Exp;
branches
	1.98.8.1;
next	1.97;

1.97
date	2005.09.23.23.56.17;	author cgf;	state Exp;
branches;
next	1.96;

1.96
date	2005.07.06.20.05.02;	author cgf;	state Exp;
branches;
next	1.95;

1.95
date	2005.05.04.01.20.05;	author cgf;	state Exp;
branches;
next	1.94;

1.94
date	2005.04.30.17.07.05;	author cgf;	state Exp;
branches;
next	1.93;

1.93
date	2005.04.28.23.59.44;	author cgf;	state Exp;
branches;
next	1.92;

1.92
date	2005.04.23.03.24.21;	author cgf;	state Exp;
branches;
next	1.91;

1.91
date	2005.04.21.23.53.49;	author cgf;	state Exp;
branches;
next	1.90;

1.90
date	2005.02.20.04.25.32;	author cgf;	state Exp;
branches;
next	1.89;

1.89
date	2005.01.26.00.15.11;	author cgf;	state Exp;
branches;
next	1.88;

1.88
date	2005.01.12.22.40.45;	author cgf;	state Exp;
branches;
next	1.87;

1.87
date	2005.01.05.21.40.08;	author cgf;	state Exp;
branches;
next	1.86;

1.86
date	2005.01.03.18.16.46;	author cgf;	state Exp;
branches;
next	1.85;

1.85
date	2005.01.02.00.34.55;	author cgf;	state Exp;
branches;
next	1.84;

1.84
date	2004.12.03.02.00.37;	author phumblet;	state Exp;
branches;
next	1.83;

1.83
date	2004.11.20.19.09.18;	author phumblet;	state Exp;
branches;
next	1.82;

1.82
date	2004.05.28.19.50.06;	author cgf;	state Exp;
branches;
next	1.81;

1.81
date	2004.03.26.21.43.48;	author corinna;	state Exp;
branches;
next	1.80;

1.80
date	2003.12.01.15.03.43;	author corinna;	state Exp;
branches;
next	1.79;

1.79
date	2003.12.01.11.16.20;	author corinna;	state Exp;
branches;
next	1.78;

1.78
date	2003.11.14.23.40.05;	author rbcollins;	state Exp;
branches;
next	1.77;

1.77
date	2003.10.10.19.07.08;	author cgf;	state Exp;
branches;
next	1.76;

1.76
date	2003.10.08.21.40.33;	author cgf;	state Exp;
branches;
next	1.75;

1.75
date	2003.09.25.02.29.04;	author phumblet;	state Exp;
branches;
next	1.74;

1.74
date	2003.09.25.00.37.17;	author cgf;	state Exp;
branches;
next	1.73;

1.73
date	2003.09.11.07.57.39;	author corinna;	state Exp;
branches;
next	1.72;

1.72
date	2003.09.10.21.01.40;	author cgf;	state Exp;
branches;
next	1.71;

1.71
date	2003.09.10.02.12.26;	author phumblet;	state Exp;
branches;
next	1.70;

1.70
date	2003.09.03.14.15.55;	author cgf;	state Exp;
branches;
next	1.69;

1.69
date	2003.06.16.03.24.11;	author cgf;	state Exp;
branches;
next	1.68;

1.68
date	2003.06.05.02.56.27;	author cgf;	state Exp;
branches;
next	1.67;

1.67
date	2003.05.21.08.01.56;	author corinna;	state Exp;
branches;
next	1.66;

1.66
date	2003.05.20.15.22.09;	author corinna;	state Exp;
branches;
next	1.65;

1.65
date	2003.01.31.15.02.40;	author cgf;	state Exp;
branches;
next	1.64;

1.64
date	2002.11.02.03.31.15;	author cgf;	state Exp;
branches
	1.64.10.1;
next	1.63;

1.63
date	2002.10.23.02.20.37;	author cgf;	state Exp;
branches;
next	1.62;

1.62
date	2002.10.22.16.18.55;	author cgf;	state Exp;
branches;
next	1.61;

1.61
date	2002.10.21.01.00.57;	author cgf;	state Exp;
branches;
next	1.60;

1.60
date	2002.10.20.04.15.50;	author cgf;	state Exp;
branches;
next	1.59;

1.59
date	2002.10.19.00.57.06;	author cgf;	state Exp;
branches;
next	1.58;

1.58
date	2002.10.18.23.52.58;	author cgf;	state Exp;
branches;
next	1.57;

1.57
date	2002.10.15.17.04.20;	author cgf;	state Exp;
branches;
next	1.56;

1.56
date	2002.10.15.07.03.44;	author cgf;	state Exp;
branches;
next	1.55;

1.55
date	2002.10.14.20.25.52;	author cgf;	state Exp;
branches;
next	1.54;

1.54
date	2002.10.13.18.16.33;	author cgf;	state Exp;
branches;
next	1.53;

1.53
date	2002.09.19.15.12.48;	author cgf;	state Exp;
branches;
next	1.52;

1.52
date	2002.09.02.06.00.59;	author cgf;	state Exp;
branches;
next	1.51;

1.51
date	2002.08.26.04.30.11;	author cgf;	state Exp;
branches;
next	1.50;

1.50
date	2002.08.06.22.05.53;	author cgf;	state Exp;
branches;
next	1.49;

1.49
date	2002.07.14.19.15.32;	author cgf;	state Exp;
branches;
next	1.48;

1.48
date	2002.07.13.20.00.26;	author cgf;	state Exp;
branches;
next	1.47;

1.47
date	2002.07.01.14.31.28;	author corinna;	state Exp;
branches;
next	1.46;

1.46
date	2002.06.05.04.01.43;	author cgf;	state Exp;
branches;
next	1.45;

1.45
date	2002.06.02.06.07.01;	author cgf;	state Exp;
branches;
next	1.44;

1.44
date	2002.05.25.02.22.50;	author cgf;	state Exp;
branches;
next	1.43;

1.43
date	2002.05.13.12.10.49;	author corinna;	state Exp;
branches;
next	1.42;

1.42
date	2002.02.19.05.58.44;	author cgf;	state Exp;
branches;
next	1.41;

1.41
date	2002.02.17.04.59.55;	author cgf;	state Exp;
branches;
next	1.40;

1.40
date	2002.02.16.17.47.48;	author cgf;	state Exp;
branches;
next	1.39;

1.39
date	2001.12.26.21.35.16;	author cgf;	state Exp;
branches;
next	1.38;

1.38
date	2001.12.26.04.53.34;	author cgf;	state Exp;
branches;
next	1.37;

1.37
date	2001.11.05.06.09.08;	author cgf;	state Exp;
branches;
next	1.36;

1.36
date	2001.10.24.21.56.53;	author cgf;	state Exp;
branches;
next	1.35;

1.35
date	2001.10.15.23.39.33;	author cgf;	state Exp;
branches;
next	1.34;

1.34
date	2001.10.09.23.28.24;	author cgf;	state Exp;
branches;
next	1.33;

1.33
date	2001.10.01.04.10.07;	author cgf;	state Exp;
branches;
next	1.32;

1.32
date	2001.09.11.15.25.08;	author cgf;	state Exp;
branches
	1.32.4.1;
next	1.31;

1.31
date	2001.09.09.19.06.50;	author cgf;	state Exp;
branches;
next	1.30;

1.30
date	2001.09.07.21.32.05;	author cgf;	state Exp;
branches;
next	1.29;

1.29
date	2001.09.06.04.41.59;	author cgf;	state Exp;
branches;
next	1.28;

1.28
date	2001.09.03.02.13.05;	author cgf;	state Exp;
branches;
next	1.27;

1.27
date	2001.07.26.19.22.24;	author cgf;	state Exp;
branches;
next	1.26;

1.26
date	2001.07.17.03.41.52;	author cgf;	state Exp;
branches;
next	1.25;

1.25
date	2001.07.15.22.40.07;	author corinna;	state Exp;
branches;
next	1.24;

1.24
date	2001.06.24.22.26.52;	author cgf;	state Exp;
branches;
next	1.23;

1.23
date	2001.05.15.19.23.31;	author corinna;	state Exp;
branches;
next	1.22;

1.22
date	2001.04.30.18.21.48;	author corinna;	state Exp;
branches;
next	1.21;

1.21
date	2001.04.25.09.43.25;	author corinna;	state Exp;
branches;
next	1.20;

1.20
date	2001.04.22.22.12.12;	author corinna;	state Exp;
branches;
next	1.19;

1.19
date	2001.04.18.21.10.13;	author cgf;	state Exp;
branches;
next	1.18;

1.18
date	2001.03.18.21.11.25;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2001.03.18.03.34.05;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2001.01.31.15.06.06;	author cgf;	state Exp;
branches;
next	1.15;

1.15
date	2001.01.30.08.10.04;	author corinna;	state Exp;
branches;
next	1.14;

1.14
date	2001.01.29.00.46.25;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2001.01.28.05.51.14;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2000.11.15.00.13.09;	author corinna;	state Exp;
branches;
next	1.11;

1.11
date	2000.09.08.02.56.55;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2000.09.07.16.23.51;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2000.09.03.04.16.35;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2000.08.22.05.10.20;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.12.05.35.42;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.09.02.33.47;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.02.16.28.18;	author dj;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.29.16.24.39;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.02.10.17.44;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.24.16.31.36;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.155.2.1
date	2012.11.16.13.48.24;	author corinna;	state Exp;
branches;
next	1.155.2.2;

1.155.2.2
date	2012.12.10.11.45.50;	author corinna;	state Exp;
branches;
next	1.155.2.3;

1.155.2.3
date	2013.01.21.13.52.10;	author corinna;	state Exp;
branches;
next	1.155.2.4;

1.155.2.4
date	2013.02.04.15.43.12;	author corinna;	state Exp;
branches;
next	1.155.2.5;

1.155.2.5
date	2013.03.01.16.32.33;	author corinna;	state Exp;
branches;
next	;

1.98.8.1
date	2006.11.08.10.00.06;	author corinna;	state Exp;
branches;
next	1.98.8.2;

1.98.8.2
date	2007.01.15.11.56.07;	author corinna;	state Exp;
branches;
next	1.98.8.3;

1.98.8.3
date	2007.11.12.15.30.19;	author corinna;	state Exp;
branches;
next	;

1.64.10.1
date	2003.01.31.15.02.59;	author cgf;	state Exp;
branches;
next	1.64.10.2;

1.64.10.2
date	2003.02.14.03.03.29;	author cgf;	state Exp;
branches;
next	1.64.10.3;

1.64.10.3
date	2003.05.26.19.39.06;	author cgf;	state Exp;
branches;
next	1.64.10.4;

1.64.10.4
date	2003.06.06.00.27.50;	author cgf;	state Exp;
branches;
next	1.64.10.5;

1.64.10.5
date	2003.07.06.05.10.43;	author cgf;	state Exp;
branches;
next	1.64.10.6;

1.64.10.6
date	2003.09.10.16.23.39;	author cgf;	state Exp;
branches;
next	1.64.10.7;

1.64.10.7
date	2003.09.11.04.47.22;	author cgf;	state Exp;
branches;
next	1.64.10.8;

1.64.10.8
date	2003.09.14.01.35.38;	author cgf;	state Exp;
branches;
next	;

1.32.4.1
date	2001.10.02.12.09.56;	author rbcollins;	state Exp;
branches;
next	1.32.4.2;

1.32.4.2
date	2002.01.04.03.56.10;	author rbcollins;	state Exp;
branches;
next	1.32.4.3;

1.32.4.3
date	2002.02.28.12.53.27;	author rbcollins;	state Exp;
branches;
next	1.32.4.4;

1.32.4.4
date	2002.06.13.14.34.11;	author rbcollins;	state Exp;
branches;
next	1.32.4.5;

1.32.4.5
date	2002.07.02.10.58.20;	author scottc;	state Exp;
branches;
next	1.32.4.6;

1.32.4.6
date	2002.07.13.20.39.24;	author scottc;	state Exp;
branches;
next	1.32.4.7;

1.32.4.7
date	2002.07.14.19.26.23;	author scottc;	state Exp;
branches;
next	1.32.4.8;

1.32.4.8
date	2002.08.07.10.45.00;	author scottc;	state Exp;
branches;
next	1.32.4.9;

1.32.4.9
date	2002.08.26.11.38.15;	author scottc;	state Exp;
branches;
next	1.32.4.10;

1.32.4.10
date	2002.09.03.13.52.07;	author scottc;	state Exp;
branches;
next	1.32.4.11;

1.32.4.11
date	2002.09.19.21.51.22;	author scottc;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.164
log
@	* mount.cc (mount_info::init): Take bool argument and allow to
	initialize mount table in two steps, system and user, depending on
	bool value.
	* mount.h (class mount_info): Align declaration of init function to
	above change.
	* shared.cc (user_info::initialize): Initialize mount table in two
	steps to allow internal_getpwsid to create valid POSIX paths from
	DOS paths given in AD.  Add comments.
	* uinfo.cc (cygheap_pwdgrp::get_home): Allow DOS paths in
	NSS_SCHEME_FREEATTR attributes.
	(cygheap_pwdgrp::get_shell): Ditto.
@
text
@/* shared.cc: shared data area support.

   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include "winsup.h"
#include "miscfuncs.h"
#include <unistd.h>
#include "cygerrno.h"
#include "pinfo.h"
#include "path.h"
#include "fhandler.h"
#include "dtable.h"
#include "cygheap.h"
#include "heap.h"
#include "shared_info_magic.h"
#include "registry.h"
#include "cygwin_version.h"
#include "spinlock.h"
#include <alloca.h>
#include <wchar.h>

shared_info NO_COPY *cygwin_shared;
user_info NO_COPY *user_shared;
HANDLE NO_COPY cygwin_shared_h;
HANDLE NO_COPY cygwin_user_h;

/* This function returns a handle to the top-level directory in the global
   NT namespace used to implement global objects including shared memory. */

static HANDLE NO_COPY shared_parent_dir;

HANDLE
get_shared_parent_dir ()
{
  UNICODE_STRING uname;
  OBJECT_ATTRIBUTES attr;
  NTSTATUS status;

  if (!shared_parent_dir)
    {
      WCHAR bnoname[MAX_PATH];
      __small_swprintf (bnoname, L"\\BaseNamedObjects\\%s%s-%S",
			cygwin_version.shared_id,
			_cygwin_testing ? cygwin_version.dll_build_date : "",
			&cygheap->installation_key);
      RtlInitUnicodeString (&uname, bnoname);
      InitializeObjectAttributes (&attr, &uname, OBJ_OPENIF, NULL,
				  everyone_sd (CYG_SHARED_DIR_ACCESS));
      status = NtCreateDirectoryObject (&shared_parent_dir,
					CYG_SHARED_DIR_ACCESS, &attr);
      if (!NT_SUCCESS (status))
	api_fatal ("NtCreateDirectoryObject(%S): %y", &uname, status);
    }
  return shared_parent_dir;
}

static HANDLE NO_COPY session_parent_dir;

HANDLE
get_session_parent_dir ()
{
  UNICODE_STRING uname;
  OBJECT_ATTRIBUTES attr;
  NTSTATUS status;

  if (!session_parent_dir)
    {
      PROCESS_SESSION_INFORMATION psi;
      status = NtQueryInformationProcess (NtCurrentProcess (),
					  ProcessSessionInformation,
					  &psi, sizeof psi, NULL);
      if (!NT_SUCCESS (status) || psi.SessionId == 0)
	session_parent_dir = get_shared_parent_dir ();
      else
	{
	  WCHAR bnoname[MAX_PATH];
	  __small_swprintf (bnoname,
			    L"\\Sessions\\BNOLINKS\\%d\\%s%s-%S",
			    psi.SessionId, cygwin_version.shared_id,
			    _cygwin_testing ? cygwin_version.dll_build_date : "",
			    &cygheap->installation_key);
	  RtlInitUnicodeString (&uname, bnoname);
	  InitializeObjectAttributes (&attr, &uname, OBJ_OPENIF, NULL,
				      everyone_sd(CYG_SHARED_DIR_ACCESS));
	  status = NtCreateDirectoryObject (&session_parent_dir,
					    CYG_SHARED_DIR_ACCESS, &attr);
	  if (!NT_SUCCESS (status))
	    api_fatal ("NtCreateDirectoryObject(%S): %y", &uname, status);
	}
    }
  return session_parent_dir;
}

char * __stdcall
shared_name (char *ret_buf, const char *str, int num)
{
  __small_sprintf (ret_buf, "%s.%d", str, num);
  return ret_buf;
}

WCHAR * __stdcall
shared_name (WCHAR *ret_buf, const WCHAR *str, int num)
{
  __small_swprintf (ret_buf, L"%W.%d", str, num);
  return ret_buf;
}

#define page_const ((ptrdiff_t) 65535)
#define pround(n) ((ptrdiff_t)(((n) + page_const) & ~page_const))

/* The order in offsets is so that the constant blocks shared_info
   and user_info are right below the cygwin DLL, then the pinfo block
   which changes with each process.  Below that is the console_state,
   an optional block which only exists when running in a Windows console
   window.  Therefore, if we are not running in a console, we have 64K
   more of contiguous memory below the Cygwin DLL. */
static ptrdiff_t offsets[] =
{
  - pround (sizeof (shared_info)),		/* SH_CYGWIN_SHARED */
  - pround (sizeof (shared_info))		/* SH_USER_SHARED */
  - pround (sizeof (user_info)),
  - pround (sizeof (shared_info))		/* SH_MYSELF */
  - pround (sizeof (user_info))
  - pround (sizeof (_pinfo)),
  - pround (sizeof (shared_info))		/* SH_SHARED_CONSOLE */
  - pround (sizeof (user_info))
  - pround (sizeof (_pinfo))
  - pround (sizeof (fhandler_console::console_state)),
  0
};

#define off_addr(x)	((void *)((caddr_t) cygwin_hmodule + offsets[x]))

void * __stdcall
open_shared (const WCHAR *name, int n, HANDLE& shared_h, DWORD size,
	     shared_locations m, PSECURITY_ATTRIBUTES psa, DWORD access)
{
  return open_shared (name, n, shared_h, size, &m, psa, access);
}

void * __stdcall
open_shared (const WCHAR *name, int n, HANDLE& shared_h, DWORD size,
	     shared_locations *m, PSECURITY_ATTRIBUTES psa, DWORD access)
{
  void *shared;

  void *addr;
  if (*m == SH_JUSTCREATE || *m == SH_JUSTOPEN)
    addr = NULL;
  else
    {
      addr = off_addr (*m);
      VirtualFree (addr, 0, MEM_RELEASE);
    }

  WCHAR map_buf[MAX_PATH];
  WCHAR *mapname = NULL;

  if (shared_h)
    *m = SH_JUSTOPEN;
  else
    {
      if (name)
	mapname = shared_name (map_buf, name, n);
      if (*m == SH_JUSTOPEN)
	shared_h = OpenFileMappingW (access, FALSE, mapname);
      else
	{
	  shared_h = CreateFileMappingW (INVALID_HANDLE_VALUE, psa,
					PAGE_READWRITE, 0, size, mapname);
	  if (GetLastError () == ERROR_ALREADY_EXISTS)
	    *m = SH_JUSTOPEN;
	}
      if (shared_h)
	/* ok! */;
      else if (*m != SH_JUSTOPEN)
	api_fatal ("CreateFileMapping %W, %E.  Terminating.", mapname);
      else
	return NULL;
    }

  shared = (shared_info *) MapViewOfFileEx (shared_h, access, 0, 0, 0, addr);

  if (!shared && addr)
    {
      shared = (shared_info *) MapViewOfFileEx (shared_h,
				       FILE_MAP_READ|FILE_MAP_WRITE,
				       0, 0, 0, NULL);
#ifdef DEBUGGING
      system_printf ("relocating shared object %W(%d) from %p to %p", name, n, addr, shared);
#endif
      offsets[0] = 0;
    }

  if (!shared)
    api_fatal ("MapViewOfFileEx '%W'(%p), %E.  Terminating.", mapname, shared_h);

  if (*m == SH_CYGWIN_SHARED && offsets[0])
    {
      /* Reserve subsequent shared memory areas in non-relocated case only.
	 There's no good reason to reserve the console shmem, because it's
	 not yet known if we will allocate it at all. */
      for (int i = SH_USER_SHARED; i < SH_SHARED_CONSOLE; i++)
	{
	  DWORD size = offsets[i - 1] - offsets[i];
	  if (!VirtualAlloc (off_addr (i), size, MEM_RESERVE, PAGE_NOACCESS))
	    continue;  /* oh well */
	}
    }

  debug_printf ("name %W, n %d, shared %p (wanted %p), h %p, *m %d",
		mapname, n, shared, addr, shared_h, *m);

  return shared;
}

/* Second half of user shared initialization: Initialize content. */
void
user_info::initialize ()
{
  /* Wait for initialization of the Cygwin per-user shared, if necessary */
  spinlock sversion (version, CURR_USER_MAGIC);
  if (!sversion)
    {
      cb = sizeof (*user_shared);
      /* Initialize mount table from system fstab prior to calling
         internal_getpwsid.  This allows to convert pw_dir and pw_shell
	 paths given in DOS notation to valid POSIX paths.  */
      mountinfo.init (false);
      cygpsid sid (cygheap->user.sid ());
      struct passwd *pw = internal_getpwsid (sid);
      /* Correct the user name with what's defined in /etc/passwd before
	 loading the user fstab file. */
      if (pw)
	cygheap->user.set_name (pw->pw_name);
      /* After fetching the user infos, add mount entries from user's fstab. */
      mountinfo.init (true);
    }
  else if (sversion != CURR_USER_MAGIC)
    sversion.multiple_cygwin_problem ("user shared memory version", version,
				      sversion);
  else if (user_shared->cb != sizeof (*user_shared))
    sversion.multiple_cygwin_problem ("user shared memory size", cb,
				      sizeof (*user_shared));
}

/* First half of user shared initialization: Create shared mem region. */
void
user_info::create (bool reinit)
{
  WCHAR name[UNLEN + 1] = L""; /* Large enough for SID */

  if (reinit)
    {
      if (!UnmapViewOfFile (user_shared))
	debug_printf("UnmapViewOfFile %E");
      if (!ForceCloseHandle (cygwin_user_h))
	debug_printf("CloseHandle %E");
      cygwin_user_h = NULL;
    }

  if (!cygwin_user_h)
    cygheap->user.get_windows_id (name);

  user_shared = (user_info *) open_shared (name, USER_VERSION,
					   cygwin_user_h, sizeof (user_info),
					   SH_USER_SHARED, &sec_none);
  debug_printf ("opening user shared for '%W' at %p", name, user_shared);
  ProtectHandleINH (cygwin_user_h);
  debug_printf ("user shared version %x", user_shared->version);
  if (reinit)
    user_shared->initialize ();
}

void __stdcall
shared_destroy ()
{
  ForceCloseHandle (cygwin_shared_h);
  UnmapViewOfFile (cygwin_shared);
  ForceCloseHandle (cygwin_user_h);
  UnmapViewOfFile (user_shared);
}

/* Initialize obcaseinsensitive.*/
void
shared_info::init_obcaseinsensitive ()
{
  /* Instead of reading the obcaseinsensitive registry value, test the
     actual state of case sensitivity handling in the kernel. */
  UNICODE_STRING sysroot;
  OBJECT_ATTRIBUTES attr;
  HANDLE h;

  RtlInitUnicodeString (&sysroot, L"\\SYSTEMROOT");
  InitializeObjectAttributes (&attr, &sysroot, 0, NULL, NULL);
  /* NtOpenSymbolicLinkObject returns STATUS_ACCESS_DENIED when called
     with a 0 access mask.  However, if the kernel is case sensitive,
     it returns STATUS_OBJECT_NAME_NOT_FOUND because we used the incorrect
     case for the filename (It's actually "\\SystemRoot"). */
  obcaseinsensitive = NtOpenSymbolicLinkObject (&h, 0, &attr)
		      != STATUS_OBJECT_NAME_NOT_FOUND;
}

void inline
shared_info::create ()
{
  cygwin_shared = (shared_info *) open_shared (L"shared",
					       CYGWIN_VERSION_SHARED_DATA,
					       cygwin_shared_h,
					       sizeof (*cygwin_shared),
					       SH_CYGWIN_SHARED,
					       &sec_all_nih);
  cygwin_shared->initialize ();
}

void
shared_info::initialize ()
{
  spinlock sversion (version, CURR_SHARED_MAGIC);
  if (!sversion)
    {
      cb = sizeof (*this);
      get_session_parent_dir ();	/* Create session dir if first process. */
      init_obcaseinsensitive ();	/* Initialize obcaseinsensitive */
      tty.init ();			/* Initialize tty table  */
      mt.initialize ();			/* Initialize shared tape information */
      /* Defer debug output printing the installation root and installation key
	 up to this point.  Debug output except for system_printf requires
	 the global shared memory to exist. */
      debug_printf ("Installation root: <%W> key: <%S>",
		    cygheap->installation_root, &cygheap->installation_key);
    }
  else if (sversion != CURR_SHARED_MAGIC)
    sversion.multiple_cygwin_problem ("system shared memory version",
				      sversion, CURR_SHARED_MAGIC);
  else if (cb != sizeof (*this))
    system_printf ("size of shared memory region changed from %lu to %u",
		   sizeof (*this), cb);
  /* FIXME? Shouldn't this be in memory_init? */
  cygheap->user_heap.init ();
}

void
memory_init ()
{
  shared_info::create ();	/* Initialize global shared memory */
  user_info::create (false);	/* Initialize per-user shared memory */
  /* Initialize tty list session stuff.  Doesn't really belong here but
     this needs to be initialized before any tty or console manipulation
     happens and it is a common location.  */
  tty_list::init_session ();
}
@


1.163
log
@	* cygheap.cc (cygheap_fixup_in_child): Call set_dll_dir.
	(init_cygheap::init_installation_root): Just memmove contents of
	installation_root instead of calling GetModuleFileNameW again.
	Copy installation_root to installation_dir before stripping of
	"bin" dir.  Don't call SetDllDirectory here.  Explain what we do.
	(setup_cygheap): New function taking over initial cygheap setup
	from memory_init.  Additionally call set_dll_dir.
	* cygheap.h (struct init_cygheap): Add installation_dir member.
	(init_cygheap::set_dll_dir): Define.
	(setup_cygheap): Declare.
	* dcrt0.cc: Throughout drop parameter from memory_init call.
	(dll_crt0_0): Call setup_cygheap prior to memory_init.
	* dlfcn.cc (dlopen): Change comment to point to the right function.
	* shared.cc (memory_init): Drop parameter.  Drop cygheap setup.
	* shared_info.h (memory_init): Change declaration accordingly.
@
text
@d233 4
d243 2
a244 1
      mountinfo.init ();	/* Initialize the mount table.  */
@


1.162
log
@	Introduce reading passwd/group entries from SAM/AD.  Introduce
	/etc/nsswitch.conf file to configure it.
	* Makefile.in (DLL_OFILES): Add ldap.o.
	* autoload.cc: Import ldap functions from wldap32.dll.
	(DsEnumerateDomainTrustsW): Import.
	(NetGroupGetInfo): Import.
	* cygheap.h (class cygheap_domain_info): New class to keep global
	domain info.
	(class cygheap_pwdgrp): New class to keep passwd/group caches and
	configuration info from /etc/nssswitch.conf.
	(struct init_cygheap): Add cygheap_domain_info member "dom" and
	cygheap_pwdgrp member "pg".
	* cygtls.h (struct _local_storage): Remove unused member "res".
	Rearrange slightly, Add members pwbuf and grbuf to implement non-caching
	passwd/group fetching from SAM/AD.  Make pw_pos and pw_pos unsigned.
	* fhandler_disk_file.cc (fhandler_base::fstat_by_nfs_ea): Add RFC 2307
	uid/gid mapping.
	* fhandler_process.cc: Drop including pwdgrp.h.
	* fhandler_procsysvipc.cc: Ditto.
	* fhandler_registry.cc (fhandler_registry::fstat): Set key uid/gid
	to ILLEGAL_UID/ILLEGAL_GID rather than UNKNOWN_UID/UNKNOWN_GID.
	* grp.cc (group_buf): Drop.
	(gr): Drop.
	(pwdgrp::parse_group): Fill pg_grp.
	(pwdgrp::read_group): Remove.
	(pwdgrp::init_grp): New method.
	(pwdgrp::prep_tls_grbuf): New method.
	(pwdgrp::find_group): New methods.
	(internal_getgrsid): Convert to call new pwdgrp methods.
	(internal_getgrnam): Ditto.
	(internal_getgrgid): Ditto.
	(getgrgid_r): Drop 2nd parameter from internal_getgrgid call.
	(getgrgid32): Ditto.
	(getgrnam_r): Ditto for internal_getgrnam.
	(getgrnam32): Ditto.
	(getgrent32): Convert to call new pwdgrp methods.
	(internal_getgrent): Remove.
	(internal_getgroups): Simplify, especially drop calls to
	internal_getgrent.
	* ldap.cc: New file implementing cyg_ldap class for LDAP access to AD
	and RFC 2307 server.
	* ldap.h: New header, declaring cyg_ldap class.
	* passwd.cc (passwd_buf): Drop.
	(pr): Drop.
	(pwdgrp::parse_passwd): Fill pg_pwd.
	(pwdgrp::read_passwd): Remove.
	(pwdgrp::init_pwd): New method.
	(pwdgrp::prep_tls_pwbuf): New method.
	(find_user): New methods.
	(internal_getpwsid): Convert to call new pwdgrp methods.
	(internal_getpwnam): Ditto.
	(internal_getpwuid): Ditto.
	(getpwuid32): Drop 2nd parameter from internal_getpwuid call.
	(getpwuid_r): Ditto.
	(getpwnam): Ditto for internal_getpwnam.
	(getpwnam_r): Ditto.
	(getpwent): Convert to call new pwdgrp methods.
	* path.cc (class etc): Remove all methods.
	* path.h (class etc): Drop.
	* pinfo.cc (pinfo_basic::pinfo_basic): Set gid to ILLEGAL_GID rather
	than UNKNOWN_GID.
	(pinfo_init): Ditto.
	* pwdgrp.h (internal_getpwnam): Drop 2nd parameter from declaration.
	(internal_getpwuid): Ditto.
	(internal_getgrgid): Ditto.
	(internal_getgrnam): Ditto.
	(internal_getgrent): Drop declaration.
	(enum fetch_user_arg_type_t): New type.
	(struct fetch_user_arg_t): New type.
	(struct pg_pwd): New type.
	(struct pg_grp): New type.
	(class pwdgrp): Rework to provide functions for file and db requests
	and caching.
	(class ugid_cache_t): New class to provide RFC 2307 uid map caching.
	(ugid_cache): Declare.
	* sec_acl.cc: Drop including pwdgrp.h.
	* sec_auth.cc: Drop including dsgetdc.h and pwdgrp.h.
	(get_logon_server): Convert third parameter to ULONG flags argument
	to allow arbitrary flags values in DsGetDcNameW call and change calls
	to this function throughout.  Use cached account domain name rather
	than calling GetComputerNameW.
	(get_unix_group_sidlist): Remove.
	(get_server_groups): Drop call to get_unix_group_sidlist.
	(verify_token): Rework token group check without calling
	internal_getgrent.
	* sec_helper.cc (cygpsid::pstring): New methods, like string() but
	return pointer to end of string.
	(cygsid::getfromstr): Add wide character implementation.
	(get_sids_info): Add RFC 2307 uid/gid mapping for Samba shares.
	* security.cc: Drop including pwdgrp.h.
	* security.h (DEFAULT_UID): Remove.
	(UNKNOWN_UID): Remove.
	(UNKNOWN_GID): Remove.
	(uinfo_init): Move here from winsup.h.
	(ILLEGAL_UID): Ditto.
	(ILLEGAL_GID): Ditto.
	(UNIX_POSIX_OFFSET): Define.  Add lengthy comment.
	(UNIX_POSIX_MASK): Ditto.
	(MAP_UNIX_TO_CYGWIN_ID): Ditto.
	(ILLEGAL_UID16): Move here from winsup.h.
	(ILLEGAL_GID16): Ditto.
	(uid16touid32): Ditto.
	(gid16togid32): Ditto.
	(sid_id_auth): New convenience macro for SID component access.
	(sid_sub_auth_count): Ditto.
	(sid_sub_auth): Ditto.
	(sid_sub_auth_rid): Ditto.
	(cygpsid::pstring): Declare.
	(cygsid::getfromstr): Declare wide character variant.
	(cygsid::operator=): Ditto.
	(cygsid::operator*=): Ditto.
	(get_logon_server): Change declaration according to source code.
	* setlsapwd.cc (setlsapwd): Drop 2nd parameter from internal_getpwnam
	call.
	* shared.cc (memory_init): Call cygheap->pg.init in first process.
	* syscalls.cc: Drop including pwdgrp.h.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Ditto.
	* uinfo.cc (internal_getlogin): Drop gratuitious internal_getpwuid
	call.  Fix debug output.  Overwrite user gid in border case of a
	missing passwd file while a group file exists.
	(pwdgrp::add_line): Allocate memory on cygheap.
	(pwdgrp::load): Remove.
	(ugid_cache): Define.
	(cygheap_pwdgrp::init): New method.
	(cygheap_pwdgrp::nss_init_line): New method.
	(cygheap_pwdgrp::_nss_init): New method.
	(cygheap_domain_info::init): New method.
	(logon_sid): Define.
	(get_logon_sid): New function.
	(pwdgrp::add_account_post_fetch): New method.
	(pwdgrp::add_account_from_file): New methods.
	(pwdgrp::add_account_from_windows): New methods.
	(pwdgrp::check_file): New method.
	(pwdgrp::fetch_account_from_line): New method.
	(pwdgrp::fetch_account_from_file): New method.
	(pwdgrp::fetch_account_from_windows): New method.
	* winsup.h: Move aforementioned macros and declarations to security.h.
@
text
@d346 1
a346 1
memory_init (bool init_cygheap)
a347 9
  /* Initialize the Cygwin heap, if necessary */
  if (init_cygheap)
    {
      cygheap_init ();
      cygheap->user.init ();
      cygheap->init_installation_root (); /* Requires user.init! */
      cygheap->pg.init ();
    }

@


1.161
log
@	* fhandler_disk_file.cc (fhandler_disk_file::fchown): Fix typo in
	comment.
	* mount.cc (mount_info::from_fstab): Use tmp_pathbuf rather than
	stack for big local buffer.
	* net.cc (cygwin_gethostname): Call GetComputerNameExA rather than
	GetComputerNameA if gethostname failed.
	* shared.cc (user_info::initialize): Fix formatting.
	* include/sys/file.h: Define flock and accompanying macros if not
	already defined in sys/_default_fcntl.h.
@
text
@a24 1
#include "pwdgrp.h"
d354 1
@


1.160
log
@	Throughout, drop unnecessary explicit includes of windows header files
	included by default.
	* winlean.h: Add long comment to explain why we have to define certain
	symbols.
	(_NORMALIZE_): Define.
	(_WINNLS_): Drop definition and subsequent undef.
	(_WINNETWK_): Ditto.
	(_WINSVC_): Ditto.

2013-11-23  Eric Blake  <eblake@@redhat.com>
@
text
@d4 1
a4 1
   2007, 2008, 2009, 2010, 2011, 2012, 2013 Red Hat, Inc.
d233 1
a233 1
      cb =  sizeof (*user_shared);
@


1.159
log
@* cygheap.h (user_heap_info::sbrk): Declare new function.
(user_heap_info::init): Ditto.
* heap.cc (user_heap_info::init): Rename from heap_init().  Avoid explictly
using cygheap->user_heap.
(sbrk): Use user_heap_info method via cygheap->user_heap.
(user_heap_info::sbrk): Renamed from sbrk().  Eliminate explicit use of
cygheap->user_heap.  Change some pointer arithmetic to use (char *) for
consistency.
* shared.cc (shared_info::initialize): Change heap_init call to
cygheap->user_heap.init.
@
text
@a28 2
#include <wingdi.h>
#include <winuser.h>
@


1.158
log
@	* spinlock.h (ULONG): Replace LONG operator with ULONG to accommodate
	the fact that CURR_SHARED_MAGIC and USER_SHARED_MAGIC are unsigned
	values.
	* shared.cc (shared_info::initialize): Drop explicit cast here.
@
text
@d344 2
a345 1
  heap_init ();
@


1.157
log
@	* Merge in cygwin-64bit-branch.
@
text
@d338 1
a338 1
  else if (sversion != (LONG) CURR_SHARED_MAGIC)
@


1.156
log
@Throughout, update copyrights to reflect dates which correspond to main-branch
checkins.  Regularize copyright format.
@
text
@d4 1
a4 1
   2007, 2008, 2009, 2010, 2011, 2012 Red Hat, Inc.
d62 1
a62 1
	api_fatal ("NtCreateDirectoryObject(%S): %p", &uname, status);
d98 1
a98 1
	    api_fatal ("NtCreateDirectoryObject(%S): %p", &uname, status);
d118 2
a119 2
#define page_const (65535)
#define pround(n) (((size_t) (n) + page_const) & ~page_const)
d293 14
a306 34
  if (wincap.kernel_is_always_casesensitive ())
    {
      /* Only Windows 2000.  Default to case insensitive unless the user
      	 sets the obcaseinsensitive registry value explicitely to 0. */
      DWORD def_obcaseinsensitive = 1;

      obcaseinsensitive = def_obcaseinsensitive;
      RTL_QUERY_REGISTRY_TABLE tab[2] = {
	{ NULL, RTL_QUERY_REGISTRY_DIRECT | RTL_QUERY_REGISTRY_NOSTRING,
	  L"obcaseinsensitive", &obcaseinsensitive, REG_DWORD,
	  &def_obcaseinsensitive, sizeof (DWORD) },
	{ NULL, 0, NULL, NULL, 0, NULL, 0 }
      };
      RtlQueryRegistryValues (RTL_REGISTRY_CONTROL,
			      L"Session Manager\\kernel",
			      tab, NULL, NULL);
    }
  else
    {
      /* Instead of reading the obcaseinsensitive registry value, test the
	 actual state of case sensitivity handling in the kernel. */
      UNICODE_STRING sysroot;
      OBJECT_ATTRIBUTES attr;
      HANDLE h;

      RtlInitUnicodeString (&sysroot, L"\\SYSTEMROOT");
      InitializeObjectAttributes (&attr, &sysroot, 0, NULL, NULL);
      /* NtOpenSymbolicLinkObject returns STATUS_ACCESS_DENIED when called
      	 with a 0 access mask.  However, if the kernel is case sensitive,
	 it returns STATUS_OBJECT_NAME_NOT_FOUND because we used the incorrect
	 case for the filename (It's actually "\\SystemRoot"). */
      obcaseinsensitive = NtOpenSymbolicLinkObject (&h, 0, &attr)
			  != STATUS_OBJECT_NAME_NOT_FOUND;
    }
d342 1
a342 1
    system_printf ("size of shared memory region changed from %u to %u",
@


1.155
log
@* fhandler_termios.cc (fhandler_termios::line_edit): Use special case '%0c'
handling to print non-printable characters using hex notation.
* smallprint.cc (__small_vsprintf): Semi-reimplement printing of non-printable
characters in hex but only when padding is specified.
* dcrt0.cc (dll_crt0_0): Remove tty_list initialization.
* shared.cc (memory_init): Initialize tty_list here.
* path.cc (path_conv::check): Remove unneeded parentheses from if check.
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
   2006, 2007, 2008, 2009, 2010, 2011, 2012 Red Hat, Inc.
@


1.155.2.1
log
@	* fhandler_netdrive.cc: Use UINT32_MAX rather than UINT_MAX to make
	absolutely clear that we mean the 32 bit maximum.
	* fhandler_socket.cc: Ditto.
	* pinfo.cc: Ditto with INT32_MAX.
	* select.cc (fd_mask): Drop gratuitious definition.
	(sizeof_fd_set): Cast to size_t.
	* shared.cc (pround): Cast to ptrdiff_t.
	* strace.cc (strace::activate): Fix format string.
	(strace::write_childpid): Take pid_t as parameter.
	* include/sys/strace.h (strace::write_childpid): Change declaration
	accordingly.
	* sync.cc (muto::init): Cast in call to InterlockedExchangePointer to
	make compiler happy.
	* sync.h (class muto): De-const name.
	* syslog.cc (try_connect_syslogd): Take size_t as third argument.
	(vsyslog): Convert len to size_t.
	* thread.cc: Use {U}INT32_MAX rather than {U}LONG_MAX.  Througout change
	types used in Windows calls to matching Windows types.
	(pthread::cancel): Fix access to instruction pointer for x86_64.
	(pthread_attr_getstack): Cast to ptrdiff_t for pointer arithmetic.
	* thread.h: Throughout convert 'long' types to uint32_t or LONG.
@
text
@d119 1
a119 1
#define pround(n) ((ptrdiff_t)(((n) + page_const) & ~page_const))
@


1.155.2.2
log
@	* Throughout, fix format string of debug printf and api_fatal calls
	to work in 32 and 64 bit environment, as well as to honor signedness.
	Use %y instead of 0x%x.
	* fhandler.h (class fhandler_dev_mem): Change type of mem_size from
	DWORD to SIZE_T.
	* fhandler_mem.cc: Throughout, cast mem_size in comparisons to make
	GCC happy.
	* fhandler_process.cc (format_process_maps): Change type of ret_len
	to SIZE_T.
	(get_mem_values): Ditto for n and length.
	* mmap.cc (MapView): Ditto for commitsize and viewsize.
	(class mmap_record): Ditto for len.  Use SIZE_T througout for memory
	size in method args and return types.
	* ntdll.h (NtLockVirtualMemory): Fix type of memory size parameters
	to SIZE_T.
	(NtMapViewOfSection): Ditto.
	(NtQueryVirtualMemory): Ditto.
	(NtUnlockVirtualMemory): Ditto.
	(RtlFreeHeap): Change type of first parameter to HANDLE.
	* shm.cc (shmat): Change type of viewsize to SIZE_T.
	* timer.cc (timer_thread): Change type of sleep_ms to LONG.
	(ualarm): Drop casts to unsigned int in timer value computation.
@
text
@d62 1
a62 1
	api_fatal ("NtCreateDirectoryObject(%S): %y", &uname, status);
d98 1
a98 1
	    api_fatal ("NtCreateDirectoryObject(%S): %y", &uname, status);
d362 1
a362 1
    system_printf ("size of shared memory region changed from %lu to %u",
@


1.155.2.3
log
@Pull in changes from HEAD
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2007, 2008, 2009, 2010, 2011, 2012 Red Hat, Inc.
@


1.155.2.4
log
@	* autoload.cc (LoadDLLfuncEx3): Adjust address computation required
	by latest change to the 64 bit code.
	* cygmalloc.h (MALLOC_ALIGNMENT): Set to 16 on x86_64.
	* cygtls.h: Set struct alignment to 8 on x86_64.  Move inclusion of
	other header files outside of alignment-enforced code area.  Drop
	inclusion of security.h entirely.
	(_cygtls::get_signal_arrived): Use NULL SECURITY_ATTRIBUTES rather than
	&sec_none_nih.
	* gendef (_cygtls::lock): Fix stack alignment.
	* heap.cc (page_const): Change type to ptrdiff_t, otherwise negation
	operator in pround creates broken bitmask.
	* shared.cc (page_const): Add cast to ptrdiff_t.
	* tlsoffsets64.h: Regenerate.
@
text
@d118 1
a118 1
#define page_const ((ptrdiff_t) 65535)
@


1.155.2.5
log
@	* autoload.cc (AttachConsole): Remove.
	(GetModuleHandleExW): Remove.
	(GetSystemWow64DirectoryW): Remove.
	(GetVolumePathNamesForVolumeNameW): Remove.
	* exceptions.cc (cygwin_stackdump): Always call RtlCaptureContext.
	(exception::handle): Drop accidentally left in debugging statement.
	Always call RtlCaptureContext.
	(sigpacket::process): Always call RtlCaptureContext for current thread.
	* fhandler_disk_file.cc (fstatvfs): Drop code using
	FileFsSizeInformation.
	(struct __DIR_cache): Remove comment.
	(fhandler_disk_file::rewinddir): Drop W2K-only code.
	* fhandler_floppy.cc (fhandler_dev_floppy::get_drive_info): Don't
	check for old OS.  Extend a comment.
	* fhandler_mem.cc (fhandler_dev_mem::open): Drop NT4 and W2K from
	debug output.
	* fhandler_proc.cc (format_proc_partitions): Drop Pre-XP considerations.
	* fhandler_procnet.cc (fhandler_procnet::exists): Ditto.
	(fhandler_procnet::readdir): Ditto.
	(format_procnet_ifinet6): Ditto.
	* fhandler_socket.cc (fhandler_socket::recvmsg): Ditto.
	* fhandler_tape.cc (mtinfo_drive::get_status): Ditto.
	* init.cc (dll_entry): Drop W2K-only code.
	* net.cc (get_ifs): Rename from get_xp_ifs.
	(get_2k_ifs): Remove.
	(getifaddrs): Always call get_ifs.
	(get_ifconf): Ditto.
	(if_nametoindex): Drop Pre-XP considerations.
	(load_ipv6_funcs): Ditto.  Fix preceeding comment.
	* sec_auth.cc (lsaauth): Drop code handling fake_login_sid.
	* sec_helper.cc (fake_logon_sid): Remove.
	(set_cygwin_privileges): Fix uncommented statement to drop pre-XP
	considerations.
	* security.h (fake_logon_sid): Drop declaration.
	* shared.cc (shared_info::init_obcaseinsensitive): Drop W2K-only code.
	* wincap.cc: Throughout, remove setting all deprecated wincapc members.
	(wincap_minimal): Set to wincap_xpsp2.
	(wincap_2000): Remove.
	(wincap_2000sp4): Remove.
	(wincap_xp): Remove.
	(wincap_xpsp1): Remove.
	(wincapc::init): Drop OS 5.0 and pre-SP2 XP.
	* wincap.h (struct wincaps): Remove the following members:
	has_create_global_privilege, has_ioctl_storage_get_media_types_ex,
	has_disk_ex_ioctls, has_buggy_restart_scan, needs_logon_sid_in_sid_list,
	has_gaa_prefixes, has_recvmsg, has_stack_size_param_is_a_reservation,
	kernel_is_always_casesensitive, has_rtl_capture_context.
@
text
@d4 1
a4 1
   2007, 2008, 2009, 2010, 2011, 2012, 2013 Red Hat, Inc.
d293 34
a326 14
  /* Instead of reading the obcaseinsensitive registry value, test the
     actual state of case sensitivity handling in the kernel. */
  UNICODE_STRING sysroot;
  OBJECT_ATTRIBUTES attr;
  HANDLE h;

  RtlInitUnicodeString (&sysroot, L"\\SYSTEMROOT");
  InitializeObjectAttributes (&attr, &sysroot, 0, NULL, NULL);
  /* NtOpenSymbolicLinkObject returns STATUS_ACCESS_DENIED when called
     with a 0 access mask.  However, if the kernel is case sensitive,
     it returns STATUS_OBJECT_NAME_NOT_FOUND because we used the incorrect
     case for the filename (It's actually "\\SystemRoot"). */
  obcaseinsensitive = NtOpenSymbolicLinkObject (&h, 0, &attr)
		      != STATUS_OBJECT_NAME_NOT_FOUND;
@


1.154
log
@	* shared.cc (shared_info::init_obcaseinsensitive): Check actual state
	of case sensitivity on post-Windows 2000 systems.
	* wincap.h (wincaps::kernel_is_always_casesensitive): New element.
	* wincap.cc: Implement above element throughout.
@
text
@d380 4
@


1.153
log
@	* cygheap.cc (init_cygheap::init_installation_root): Convert function
	init_installation_root into a cygheap method.
	* cygheap.h (struct init_cygheap): Move installation_root,
	installation_key, and installation_key_buf from shared
	.cygwin_dll_common DLL section to cygheap.  Declare new method
	init_installation_root.
	* dtable.cc (handle_to_fn): Accommodate the move of installation strings
	to the cygheap.
	* external.cc (cygwin_internal): Ditto.
	* fhandler_console.cc (fhandler_console::open_shared_console): Ditto.
	* fhandler_mailslot.cc (fhandler_mailslot::get_object_attr): Ditto.
	* fhandler_tty.cc: Ditto, throughout.
	* mount.cc (mount_info::init): Ditto.
	* pipe.cc (fhandler_pipe::create): Ditto.
	* shared.cc: Ditto, throughout.
	(installation_root): Remove.
	(installation_key): Move to cygheap.
	(installation_key_buf): Ditto.
	(installation_root_inited): Remove.
	(SPIN_WAIT): Remove.
	(init_installation_root): Move to cygheap.
	(memory_init): Call cygheap->init_installation_root right after
	cygheap->user.init.  Drop call of init_installation_root function.
	* shared_info.h (init_installation_root): Drop declaration.
	(installation_root): Ditto.
	(installation_key): Ditto.
	* uinfo.cc (pwdgrp::load): Accommodate the move of installation strings
	to the cygheap.
@
text
@d289 1
a289 1
/* Initialize obcaseinsensitive.  Default to case insensitive on pre-XP. */
d293 5
a297 2
  NTSTATUS status;
  DWORD def_obcaseinsensitive = 1;
d299 28
a326 10
  obcaseinsensitive = def_obcaseinsensitive;
  RTL_QUERY_REGISTRY_TABLE tab[2] = {
    { NULL, RTL_QUERY_REGISTRY_DIRECT | RTL_QUERY_REGISTRY_NOSTRING,
      L"obcaseinsensitive", &obcaseinsensitive, REG_DWORD,
      &def_obcaseinsensitive, sizeof (DWORD) },
    { NULL, 0, NULL, NULL, 0, NULL, 0 }
  };
  status = RtlQueryRegistryValues (RTL_REGISTRY_CONTROL,
				   L"Session Manager\\kernel",
				   tab, NULL, NULL);
@


1.152
log
@	Throughout use wincap.allocation_granularity instead of getpagesize.
	Throughout use wincap.page_size instead of getsystempagesize.
	Throughout use "status" as variable name to hold NTSTATUS values.
	* fhandler_mem.cc: Check for NT_SUCCESS rather than for STATUS_SUCCESS.
	Fix debug_printf output.  Rectify long statements.  Fix comment
	formatting.
	* fhandler_proc.cc: Ditto.
	(format_proc_swaps): Drop useless test for ERROR_PROC_NOT_FOUND.
	* fhandler_process.cc: Ditto as in fhandler_mem.cc.
	(get_process_state): Rearrange allocation loop.  Use malloc/realloc.
	(get_mem_values): Fix potential NULL pointer usage.  Drop unused
	variable.
	* pinfo.cc (winpids::enum_processes): Handle low memory gracefully.
	* sec_auth.cc (get_priv_list): Drop local variable ret.
	* shared.cc (memory_init): Drop outdated call to getpagesize.
	* syscalls.cc (getsystempagesize): Remove.
	* sysconf.cc: Check for NT_SUCCESS rather than for STATUS_SUCCESS.
	(sysinfo): Constify sizeof_stodi.  Drop useless test for
	ERROR_PROC_NOT_FOUND.
	* thread.cc (pthread_getattr_np): Cast pointers to uintptr_t rather
	than to int for pointer arithmetic.
	* winsup.h (getsystempagesize): Drop declaration.
@
text
@d4 1
a4 1
   2006, 2007, 2008, 2009, 2010, 2011 Red Hat, Inc.
a36 90
WCHAR installation_root[PATH_MAX] __attribute__((section (".cygwin_dll_common"), shared));
UNICODE_STRING installation_key __attribute__((section (".cygwin_dll_common"), shared));
WCHAR installation_key_buf[18] __attribute__((section (".cygwin_dll_common"), shared));
static LONG installation_root_inited __attribute__((section (".cygwin_dll_common"), shared));

#define SPIN_WAIT 10000

/* Use absolute path of cygwin1.dll to derive the Win32 dir which
   is our installation_root.  Note that we can't handle Cygwin installation
   root dirs of more than 4K path length.  I assume that's ok...

   This function also generates the installation_key value.  It's a 64 bit
   hash value based on the path of the Cygwin DLL itself.  It's subsequently
   used when generating shared object names.  Thus, different Cygwin
   installations generate different object names and so are isolated from
   each other.

   Having this information, the installation key together with the
   installation root path is written to the registry.  The idea is that
   cygcheck can print the paths into which the Cygwin DLL has been
   installed for debugging purposes.

   Last but not least, the new cygwin properties datastrcuture is checked
   for the "disabled_key" value, which is used to determine whether the
   installation key is actually added to all object names or not.  This is
   used as a last resort for debugging purposes, usually.  However, there
   could be another good reason to re-enable object name collisions between
   multiple Cygwin DLLs, which we're just not aware of right now.  Cygcheck
   can be used to change the value in an existing Cygwin DLL binary. */

void inline
init_installation_root ()
{
  spinlock iri (installation_root_inited);
  if (!iri)
    {
      if (!GetModuleFileNameW (cygwin_hmodule, installation_root, PATH_MAX))
	api_fatal ("Can't initialize Cygwin installation root dir.\n"
		   "GetModuleFileNameW(%p, %p, %u), %E",
		   cygwin_hmodule, installation_root, PATH_MAX);
      PWCHAR p = installation_root;
      if (wcsncmp (p, L"\\\\?\\", 4))	/* No long path prefix. */
	{
	  if (!wcsncasecmp (p, L"\\\\", 2))	/* UNC */
	    {
	      p = wcpcpy (p, L"\\??\\UN");
	      GetModuleFileNameW (cygwin_hmodule, p, PATH_MAX - 6);
	      *p = L'C';
	    }
	  else
	    {
	      p = wcpcpy (p, L"\\??\\");
	      GetModuleFileNameW (cygwin_hmodule, p, PATH_MAX - 4);
	    }
	}
      installation_root[1] = L'?';

      RtlInitEmptyUnicodeString (&installation_key, installation_key_buf,
				 sizeof installation_key_buf);
      RtlInt64ToHexUnicodeString (hash_path_name (0, installation_root),
				  &installation_key, FALSE);

      PWCHAR w = wcsrchr (installation_root, L'\\');
      if (w)
	{
	  *w = L'\0';
	  w = wcsrchr (installation_root, L'\\');
	}
      if (!w)
	api_fatal ("Can't initialize Cygwin installation root dir.\n"
		   "Invalid DLL path");
      *w = L'\0';

      for (int i = 1; i >= 0; --i)
	{
	  reg_key r (i, KEY_WRITE, _WIDE (CYGWIN_INFO_INSTALLATIONS_NAME),
		     NULL);
	  if (NT_SUCCESS (r.set_string (installation_key_buf,
					installation_root)))
	    break;
	}

      if (cygwin_props.disable_key)
	{
	  installation_key.Length = 0;
	  installation_key.Buffer[0] = L'\0';
	}
    }
}

d55 1
a55 1
			&installation_key);
d91 1
a91 1
			    &installation_key);
d335 1
a335 1
		    installation_root, &installation_key);
d354 1
a356 1
  init_installation_root ();	/* Initialize installation root dir */
@


1.151
log
@	* shared.cc (get_shared_parent_dir): Use global shared_parent_dir
	instead of local dir variable and create handle not inheritable to
	avoid accumulating stray handles in child processes.
	(get_session_parent_dir): Ditto with session_parent_dir variable.
@
text
@a438 2
  getpagesize ();

@


1.150
log
@	* shared.cc (shared_info::create): Open global shared data section
	non-inheritable to avoid accumulating stray handles in child processes.
@
text
@d130 2
a134 1
  static HANDLE dir;
d139 1
a139 1
  if (!dir)
d147 4
a150 3
      InitializeObjectAttributes (&attr, &uname, OBJ_INHERIT | OBJ_OPENIF,
				  NULL, everyone_sd (CYG_SHARED_DIR_ACCESS));
      status = NtCreateDirectoryObject (&dir, CYG_SHARED_DIR_ACCESS, &attr);
d154 1
a154 1
  return dir;
d157 2
a161 1
  static HANDLE dir;
d166 1
a166 1
  if (!dir)
d173 1
a173 1
	dir = get_shared_parent_dir ();
d183 4
a186 3
	  InitializeObjectAttributes (&attr, &uname, OBJ_INHERIT | OBJ_OPENIF,
				      NULL, everyone_sd(CYG_SHARED_DIR_ACCESS));
	  status = NtCreateDirectoryObject (&dir, CYG_SHARED_DIR_ACCESS, &attr);
d191 1
a191 1
  return dir;
@


1.149
log
@	* shared.cc (open_shared): Fix memory reservation of essential shared
	memory regions.  Drop delta computations since delta is always 0 in
	non-relocated case.  Add a comment.
@
text
@d401 2
a402 1
					       SH_CYGWIN_SHARED);
@


1.148
log
@	* heap.cc (eval_initial_heap_size): New function fetching the heap
	size from the LoaderFlags field in the PE/COFF header.
	(heap_init): Call eval_initial_heap_size rather than
	cygwin_shared->heap_chunk_size to fetch the initial heap size.
	* shared.cc (shared_info::heap_chunk_size): Remove.
	* shared_info.h (class shared_info): Drop heap_chunk member.
	(CURR_SHARED_MAGIC): Update.
@
text
@d296 4
a299 3
      ptrdiff_t delta = (caddr_t) shared - (caddr_t) off_addr (0);
      offsets[0] = (caddr_t) shared - (caddr_t) cygwin_hmodule;
      for (int i = SH_USER_SHARED + 1; i < SH_TOTAL_SIZE; i++)
d301 1
a301 2
	  unsigned size = offsets[i] - offsets[i + 1];
	  offsets[i] += delta;
a304 1
      offsets[SH_TOTAL_SIZE] += delta;
d307 2
a308 1
  debug_printf ("name %W, n %d, shared %p (wanted %p), h %p, *m %d", mapname, n, shared, addr, shared_h, *m);
@


1.147
log
@* fhandler_console.cc (fhandler_console::open_shared_console): Semi-revert to
using fixed location for console stuff.
* shared.cc (offsets): Ditto.  Comment.
* shared_info (shared_locations): Re-add SH_SHARED_CONSOLE.
@
text
@a446 31

unsigned
shared_info::heap_chunk_size ()
{
  if (!heap_chunk)
    {
      /* Fetch from registry, first user then local machine.  */
      for (int i = 0; i < 2; i++)
	{
	  reg_key reg (i, KEY_READ, NULL);

	  /* Note that reserving a huge amount of heap space does not result in
	     the use of swap since we are not committing it. */
	  /* FIXME: We should not be restricted to a fixed size heap no matter
	     what the fixed size is. */

	  if ((heap_chunk = reg.get_dword (L"heap_chunk_in_mb", 0)))
	    break;
	  heap_chunk = 384; /* Default */
	}

      if (heap_chunk < 4)
	heap_chunk = 4 * 1024 * 1024;
      else
	heap_chunk <<= 20;
      if (!heap_chunk)
	heap_chunk = 384 * 1024 * 1024;
    }

  return heap_chunk;
}
@


1.146
log
@* fhandler_console.cc (fhandler_console::open_shared_console): Don't zero
handle to open_shared since it is supposed to be an input.
(enum_windows): Set handle input to open_shared to NULL since it does not
represent any previously opened shared region.
* shared.cc (open_shared): Tweak debugging output.
@
text
@d209 4
a212 1
   which changes with each process.  */
d215 2
a216 2
  - pround (sizeof (shared_info)),
  - pround (sizeof (shared_info))
d218 1
a218 1
  - pround (sizeof (shared_info))
d221 1
a221 1
  - pround (sizeof (shared_info))
d223 2
a224 1
  - pround (sizeof (_pinfo)),
@


1.145
log
@* autoload.cc: Call _api_fatal in asm.
* child_info.h: Redefine CURR_CHILD_INFO_MAGIC.
(child_info_fork::abort): Rename from handle_failure.  Change arguments.
* cygtls.h (_local_storage::ttybuf): New field.
* dcrt0.cc (vapi_fatal): Split api_fatal.  Add "in forked process" to message
when appropriate.
(api_fatal): Use vapi_fatal.
* devices.h: Make multiple inclusion safe.
(fh_devices): Add FH_CONS* stuff.  Reorder slightly.
(device): Eliminate anonymous union.  Add more ways to access minor/major.
(device::setunit): Accommodate no-longer-anonymous union.
(device::is_fs): Ditto.
(device::is_fs_special): Ditto.
(device::major): New function.
(device::minor): Ditto.
(device::is_device): New function.
(device::not_device): Ditto.
(device::operator int): New operator.
(device::operator fh_devices): Ditto.
(device::operator bool): Ditto.
(device::operator DWORD): Ditto.
(device::operator =): Ditto.
(isproc_dev): New function.
(isprocsys_dev): Ditto.
(iscons_dev): Ditto.
(istty_slave_dev): Ditto.
* devices.in: Add new "/dev/cons*" strings.  Accommodate no-longer-anonymous
union throughout.
(BRACK): Use more precise method for initialization.
* devices.cc: Regenerate.
* dtable.cc (dtable::stdio_init): Use get_cttyp instead of get_tty.
(dtable::find_archetype): Use new DWORD operator in device to test archetypes.
(dtable::init_std_file_from_handle): Use different method to initialize 'dev'.
Adapt to different ctty handling and accommodate /dev/cons*.
(fh_alloc): Accommodate no-longer-anonymous union.  Adapt to new /dev/cons*.
(build_fh_pc): Make debugging output more useful.
* exceptions.cc (ctrl_c_handler): Use get_cttyp instead of get_tty.
* external.cc (fillout_pinfo): Accommodate new cons* stuff.
* fhandler.cc (fhandler_base::read): Eliminate is_slow() test.
* fhandler.h (fhandler_base::*): Adapt to changes in device.h.
(fhandler_*::is_slow): Delete.
( fhandler_proc::get_proc_fhandler): Return fh_devices type.
* fhandler_console.cc (open_shared_console): New function.
(console_unit): New class.
(console_unit::console_unit): New constructor.
(enum_windows): New function.  Declare as friend to console_unit.
(fhandler_console::set_unit): New function.
(fhandler_console::get_tty_stuff): Call set_unit to set the unit number and
determine if initialization is needed.  Eliminate flags parameter.
(tty_list::get_cttyp): Rename (sorta) from get_tty.  Return pointer to correct
tty_min.
(fhandler_console::open): Adapt to elimination of argument to get_tty_stuff.
(fhandler_console::output_tcsetattr): Properly detect error condition.
(fhandler_console::fixup_after_fork_exec): Adapt to get_tty_stuff() setting tc
automatically.
* fhandler_proc.cc: Use FH_BAD rather than 0 throughout where using fh_devices
enum.
(fhandler_proc::get_proc_fhandler): Return fh_devices.  Adapt to devices.h
changes.
* fhandler_process.cc: Adapt to devices.h changes.  Use FH_BAD rather than 0
throughout where using fh_devices enum.
* fhandler_procnet.cc: Ditto.
* fhandler_procsys.cc: Ditto.
* fhandler_procsysvipc.cc: Ditto.
* fhandler_tape.cc (fhandler_dev_tape::fhandler_dev_tape): Ditto.
* fhandler_termios.cc (handler_termios::bg_check): Use tc->ttyname() rather
than assuming that we can construct a tty.
* fhandler_tty.cc (fhandler_tty_master::fhandler_tty_master): Just return
get_minor() of dev.
(fhandler_pty_master::process_slave_output): Add slightly more debugging info.
(fhandler_tty_slave::fhandler_tty_slave): Change name from ntty to unit.
(fhandler_pty_master::open): Ditto.
(fhandler_tty_slave::ioctl): Adapt to change which causes ctty to represent a
complete device.
(fhandler_tty_master::init_console): Add debugging for failure path.
(fhandler_pty_master::setup): Use get_unit() to retrieve unit number rather
than relying on raw ntty.
(fhandler_pty_master::setup): Ditto.
* fhandler_virtual.h (virt_tab_t): Redefine fhandler as fh_devices.
* fork.cc: Remove obsolete vfork stuff.
(frok::child): Don't assume that a ctty == 0 is valid.
* mount.cc (mount_info::conv_to_win32_path): Adapt to device struct changes.
(mount_info::conv_to_win32_path): Ditto.
* path.cc (path_conv::check): Retrive major/minor numbers via a method rather
than accessing them directly from device.  Rely on dev operators to
set/retrieve device information as required by device struct change.
* path.h (isproc_dev): Move to devices.h.
(isprocsys_dev): Ditto.
(isvirtual_dev): Ditto.
(path_conv:{isdevice,isfifo,isspecial,iscygdrive,issocket,get_devn,get_unitn}):
Use device methods to access/manipulate devices.
* pinfo.cc (pinfo::exit): Don't assume that ctty == 0 is valid.  Use iscons_dev
to determine if a device is a console.
(_pinfo::_ctty): Use device::parse to generate tty/cons name.
(_pinfo::set_ctty): Don't assume that ctty == 0 is valid.  Remove redundant
info from debugging.
* shared.cc (offsets): Remove console offset.
* shared_info.h (shared_locations): Ditto.
* syscalls.cc (umask): Use device methods to manipulate device information.
(ctermid): Use device::parse to generate term device name.
* tlsoffsets.h: Regenerate.
* tty.cc (ttyslot): Return minor number of ctty since ctty now represents a
full device.
(tty::create_master): Set ctty to a complete device.
(tty_list::attach): Rework to detect new /dev/cons* stuff.
(tty_list::terminate): Adapt to changes to ctty.
(tty_list::init): Adapt to change to setntty - pass in device major number.
(tty::exists): Use get_unit() to retrive tty unit number.
(tty::open_mutex): Ditto.
(tty::open_inuse): Ditto.
(tty::create_inuse): Ditto.
(tty::get_event): Ditto.
(tty_min::ttyname): Define new function.
* tty.h (tty_min::ntty): Redefine as fh_devices.
(tty::exists): Use get_unit() to retrive tty unit number.
(tty::open_mutex): Ditto.
(tty::open_inuse): Ditto.
(tty::create_inuse): Ditto.
(tty::get_event): Ditto.
(tty_min::ttyname): Declare new function.
(tty::getntty): Declare as const.
(tty_list::operator []): Assure that only minor part of argument is used.
* dll_init.cc (dll_list::alloc): Detect mismatch of data segments early issuing
an explicit error message if necessary.
* heap.cc (heap_init): Adapt to changes from fork->handle_failure to
fork->abort.
* pinfo.h (EXITCODE_FORK_FAILED): New enum.  (from Ryan Johnson)
* sigproc.cc (child_info_fork::abort): Rename from handle_failure.  Change
arguments to allow passing in a printf-like message.
* winsup.h (api_fatal): Delete macro definition.
(api_fatal): Redefine from __api_fatal.
(vapi_fatal): Declare new function.
* include/sys/strace.h (strace_vprintf): Define new macro.
* ntdll.h (_SYSTEM_INFORMATION_CLASS): Add SystemHandleInformation.
@
text
@d304 1
a304 1
  debug_printf ("name %W, n %d, shared %p (wanted %p), h %p", mapname, n, shared, addr, shared_h);
@


1.144
log
@	* shared.cc (offsets): Reorder so that console_state is lowest in
	memory.  Explain why.
	(open_shared): Accommodate reordering of offsets array.
	* shared_info.h (shared_locations): Reorder SH_SHARED_CONSOLE after
	SH_MYSELF.
@
text
@d209 1
a209 4
   which changes with each process.  Below that is the console_state,
   an optional block which only exists when running in a Windows console
   window.  Therefore, if we are not running in a console, we have 64K
   more of contiguous memory below the Cygwin DLL. */
d220 1
a220 2
  - pround (sizeof (_pinfo))
  - pround (sizeof (console_state)),
@


1.143
log
@	* heap.cc (heap_init): Rewrite initial heap allocation to use addresses
	beyond 0x20000000.  Explain why and how.
	* shared.cc (shared_info::heap_slop_size): Remove.
	* shared_info.h (class shared_info): Remove heap_slop_inited and
	heap_slop members.  Remove heap_slop_size declaration.
	(CURR_SHARED_MAGIC): Update.
	* wincap.cc: Throughout, drop heapslop.
	* wincap.h (struct wincaps): Drop heapslop.
@
text
@d207 6
d215 3
a219 1
  - pround (sizeof (console_state))
d221 1
d223 2
a224 5
  - pround (sizeof (console_state))
  - pround (sizeof (_pinfo)),
  - pround (sizeof (console_state))
  - pround (sizeof (_pinfo)),
  - pround (sizeof (_pinfo)),
d278 1
a278 2
  shared = (shared_info *)
    MapViewOfFileEx (shared_h, access, 0, 0, 0, addr);
d300 1
a300 1
	  unsigned size = offsets[i + 1] - offsets[i];
@


1.142
log
@Eliminate trailing whitespace in some files.

* dll_init.cc (dll_list::alloc): Reset 'p' in forked process.
* select.cc (select_stuff::wait): Move cleanup() closer to WFMO to minimize
unavoidable (?) race.
@
text
@a443 21
shared_info::heap_slop_size ()
{
  if (!heap_slop_inited)
    {
      /* Fetch from registry, first user then local machine.  */
      for (int i = 0; i < 2; i++)
	{
	  reg_key reg (i, KEY_READ, NULL);

	  if ((heap_slop = reg.get_dword (L"heap_slop_in_mb", 0)))
	    break;
	  heap_slop = wincap.heapslop ();
	}
      heap_slop <<= 20;
      heap_slop_inited = true;
    }

  return heap_slop;
}

unsigned
@


1.141
log
@	* registry.cc (reg_key::get_dword): Rename from get_int, use DWORD
	rather than int type.  Avoid compiler warning.
	(reg_key::set_dword): Rename from set_int, use DWORD rather than int
	type.  Change return type to NTSTATUS.
	(reg_key::get_string): Change return type to NTSTATUS.
	(reg_key::set_string): Ditto.
	* registry.h: Accommodate above changes.
	* environ.cc (regopt): Test return value of reg_key::get_string as
	NTSTATUS.
	* sched.cc (sched_rr_get_interval): Change local int vars to DWORD.
	Call reg_key::get_dword instead of reg_key::get_int.
	* shared.cc (init_installation_root): Test return value of
	reg_key::get_string as NTSTATUS.
	(shared_info::heap_slop_size): Call reg_key::get_dword rather than
	reg_key::get_int.
	(shared_info::heap_chunk_size): Ditto.
	* shared_info.h (CURR_SHARED_MAGIC): Update.
	(class shared_info): Change heap_chunk and heap_slop to DWORD  values.
@
text
@d53 1
a53 1
   
d58 1
a58 1
   
d376 1
a376 1
 
@


1.140
log
@	* Makefile.in (DLL_IMPORTS): Drop advapi32.dll.
	* autoload.cc: Enable autoloading advapi32 functions.
	* environ.cc (regopt): Use wide char arguments in reg_key functions.
	* fhandler_console.cc (beep): Ditto.  Use WCHAR throughout.
	* registry.cc (reg_key): Rewrite reg_key class to use native NT registry
	functions.  Use WCHAR string parameters throughout.  Use PCWSTR rather
	than const WCHAR.  Drop multibyte char functionality.  Drop unused
	methods.
	(get_registry_hive_path): Use RtlQueryRegistryValues to fetch path from
	registry.
	(load_registry_hive): Drop useless check for user hive being available.
	Load hive using NtLoadKey.
	* registry.h: Accommodate above changes.
	* sched.cc (sched_rr_get_interval): Use wide char arguments in reg_key
	functions.
	* shared.cc (init_installation_root): Ditto.
	(shared_info::init_obcaseinsensitive): Use RtlQueryRegistryValues to
	fetch obcaseinsensitive value.
	(shared_info::heap_slop_size): Use wide char arguments in reg_key
	functions.
	(shared_info::heap_chunk_size): Ditto.
	* syscalls.cc (gethostid): Ditto.
	* winsup.h (__WIDE): Define.
	(_WIDE): Define.
	* libc/minires-os-if.c (get_registry_dns_items): Don't fetch values
	from registry.  Just extract them from given UNICODE_STRING parameter.
	(get_registry_dns): Fetch all registry values at once using
	RtlQueryRegistryValues.
@
text
@d114 2
a115 2
	  if (r.set_string (installation_key_buf, installation_root)
	      == ERROR_SUCCESS)
d453 1
a453 1
	  if ((heap_slop = reg.get_int (L"heap_slop_in_mb", 0)))
d479 1
a479 1
	  if ((heap_chunk = reg.get_int (L"heap_chunk_in_mb", 0)))
@


1.139
log
@	Revert accidental previous login.
@
text
@d4 1
a4 1
   2006, 2007, 2008, 2009 Red Hat, Inc.
d112 2
a113 1
	  reg_key r (i, KEY_WRITE, CYGWIN_INFO_INSTALLATIONS_NAME, NULL);
d374 13
a386 13
  HKEY key;
  DWORD size = sizeof (DWORD);

  obcaseinsensitive = 1;
  if (RegOpenKeyEx (HKEY_LOCAL_MACHINE,
		  "SYSTEM\\CurrentControlSet\\Control\\Session Manager\\kernel",
		  0, KEY_READ, &key) == ERROR_SUCCESS)
    {
      RegQueryValueEx (key, "obcaseinsensitive", NULL, NULL,
		       (LPBYTE) &obcaseinsensitive, &size);
      RegCloseKey (key);
    }
  debug_printf ("obcaseinsensitive set to %d", obcaseinsensitive);
d453 1
a453 1
	  if ((heap_slop = reg.get_int ("heap_slop_in_mb", 0)))
d479 1
a479 1
	  if ((heap_chunk = reg.get_int ("heap_chunk_in_mb", 0)))
@


1.138
log
@	* Makefile.in (DLL_IMPORTS): Remove libadvapi32.a.
	* autoload.cc: Add all advapi32 entry points.
	* mount.cc (mount_info::init): Read user fstab only if we have a
	username.
	* passwd.cc (pwdgrp::read_passwd): Only use username if we have one.
	* shared.cc (user_info::initialize): Set cb last so as not to override
	planned behaviour in pwdgrp::read_passwd.
	* uinfo.cc (cygheap_user::init): Fetch Windows username from environment
	variable $USERNAME.  Don't set name in cygheap if variable is empty.
	(internal_getlogin): If we still have no username, try GetUserNameW.
@
text
@d315 1
a322 1
      cb = sizeof (*user_shared);
@


1.137
log
@* shared.cc (init_installation_root): Change to make sure that scope of the
lock lasts the entire function.
@
text
@a314 1
      cb =  sizeof (*user_shared);
d322 1
@


1.136
log
@* shared_info.h (user_info): Add dll_crt0_1 as a friend.
(user_info::version): Make LONG to accommodate spinlock use.
(user_info::create): New static function renamed from user_info_create.
(user_info::initialize): New private function renamed from
user_info_initialize.
(SHARED_VERSION): Delete.
(SHARED_VERSION_MAGIC): Ditto.
(USER_VERSION_MAGIC): Ditto.
(SHARED_INFO_CB): Ditto.
(USER_VERSION): Ditto.
(USER_VERSION_MAGIC): Ditto.
(CURR_SHARED_MAGIC): Update.
(CURR_USER_MAGIC): Ditto.
(shared_info::version): Make LONG to accommodate spinlock use.
(shared_info::create): New static function mirroring user_info::create.
(dll_crt0_1): Accommodate change to user_info::initialize.
* spinlock.h (spinlock::setto): New variable member.
(spinlock::done): New function.
(spinlock::spinlock): Generalize to allow arbitrary values and timeouts.  Call
done() when lock is not needed.
* ntdll.h: Make multiple-inclusion safe.
(NtQuerySystemTime): Declare.
* shared.cc (installation_root_inited): Rename from shared_mem_inited.
(init_installation_root): Make inline.  Use a spinlock to ensure that this is
initialized only once per session.
(user_info::initialize): Rename from user_shared_initialize.  Protect with
spinlock on sversion and remove other spinlock-like things.  Remove reference
to user_shared since it is now implicit.  Refer to spinlock version of
multiple_cygwin_problem to ensure that any spinlock is released.
(user_info::create): Rename from user_shared_create.  Accommodate change from
user_shared_initialize to user_info::initialize.
(shared_info::create): New inline function.
(shared_info::initialize): Protect with spinlock on sversion.  Move heap_init
back under specific control of shared_info spinlock.  Remove reference to
SHARED_INFO_CB and just use sizeof(*this).
(memory_init): Move all locking into respective functions where it is needed.
Accommodate name changes.  Remove call to heap_init().
* syscalls.cc (seteuid32): Accommodate name change to user_info::create().
* mount.cc (mount_info::create_root_entry): Report on errors from add_item
since they should be nonexistent.
(mount_info::init): Don't initialize nmounts.  It should already be zero.  Give
more verbose error when root_idx < 0.  Implicitly use this pointer rather than
explicitly referencing mount_table->.
(mount_info::add_item): Minor whitespace fix.
@
text
@d70 2
a71 1
  if (!spinlock (installation_root_inited))
@


1.135
log
@* spinlock.h: New file.
(spinlock): New class.
* shared.cc: Include spinlock.h.
(memory_init): Use new spinlock methods rather than roll-your-own.  Time out
after ten seconds if shared_mem_inited is not initialized.
* sync.h: Update copyright.  Remove vanity attribution.
* sigproc.cc (sigproc_terminate): Avoid attempts to kill the signal thread
while we're still initializing or suffer a deadlock.
@
text
@a26 1
#include "ntdll.h"
d40 3
a42 1
static LONG shared_mem_inited __attribute__((section (".cygwin_dll_common"), shared));
d67 1
a67 1
void
d70 1
a70 6
  if (!GetModuleFileNameW (cygwin_hmodule, installation_root, PATH_MAX))
    api_fatal ("Can't initialize Cygwin installation root dir.\n"
	       "GetModuleFileNameW(%p, %p, %u), %E",
	       cygwin_hmodule, installation_root, PATH_MAX);
  PWCHAR p = installation_root;
  if (wcsncmp (p, L"\\\\?\\", 4))	/* No long path prefix. */
d72 6
a77 1
      if (!wcsncasecmp (p, L"\\\\", 2))	/* UNC */
d79 11
a89 3
	  p = wcpcpy (p, L"\\??\\UN");
	  GetModuleFileNameW (cygwin_hmodule, p, PATH_MAX - 6);
	  *p = L'C';
d91 9
a99 1
      else
d101 2
a102 2
	  p = wcpcpy (p, L"\\??\\");
	  GetModuleFileNameW (cygwin_hmodule, p, PATH_MAX - 4);
d104 3
a106 11
    }
  installation_root[1] = L'?';

  RtlInitEmptyUnicodeString (&installation_key, installation_key_buf,
			     sizeof installation_key_buf);
  RtlInt64ToHexUnicodeString (hash_path_name (0, installation_root),
			      &installation_key, FALSE);

  PWCHAR w = wcsrchr (installation_root, L'\\');
  if (w)
    {
a107 6
      w = wcsrchr (installation_root, L'\\');
    }
  if (!w)
    api_fatal ("Can't initialize Cygwin installation root dir.\n"
	       "Invalid DLL path");
  *w = L'\0';
d109 7
a115 7
  for (int i = 1; i >= 0; --i)
    {
      reg_key r (i, KEY_WRITE, CYGWIN_INFO_INSTALLATIONS_NAME, NULL);
      if (r.set_string (installation_key_buf, installation_root)
	  == ERROR_SUCCESS)
      	break;
    }
d117 5
a121 4
  if (cygwin_props.disable_key)
    {
      installation_key.Length = 0;
      installation_key.Buffer[0] = L'\0';
d308 1
a308 1
user_shared_initialize ()
a309 1
  DWORD sversion = (DWORD) InterlockedExchange ((LONG *) &user_shared->version, USER_VERSION_MAGIC);
d311 1
d314 1
d321 1
a321 11
      user_shared->mountinfo.init ();	/* Initialize the mount table.  */
      user_shared->cb =  sizeof (*user_shared);
    }
  else
    {
      while (!user_shared->cb)
	yield ();	// Should be hit only very very rarely
      if (user_shared->version != sversion)
	multiple_cygwin_problem ("user shared memory version", user_shared->version, sversion);
      else if (user_shared->cb != sizeof (*user_shared))
	multiple_cygwin_problem ("user shared memory size", user_shared->cb, sizeof (*user_shared));
d323 6
d333 1
a333 1
user_shared_create (bool reinit)
d356 1
a356 1
    user_shared_initialize ();
d387 11
d401 1
a401 1
  DWORD sversion = (DWORD) InterlockedExchange ((LONG *) &version, SHARED_VERSION_MAGIC);
d409 10
a418 8
    }
  else if (sversion != SHARED_VERSION_MAGIC)
    {
      InterlockedExchange ((LONG *) &version, sversion);
      multiple_cygwin_problem ("system shared memory version", sversion, SHARED_VERSION_MAGIC);
    }

  if (cb != SHARED_INFO_CB)
d420 2
a421 1
		   SHARED_INFO_CB, cb);
d436 3
a438 24
  /* Initialize general shared memory under spinlock control */
  {
    spinlock smi (shared_mem_inited, 10000);
    if (!smi)
      init_installation_root ();	/* Initialize installation root dir */

    cygwin_shared = (shared_info *) open_shared (L"shared",
						 CYGWIN_VERSION_SHARED_DATA,
						 cygwin_shared_h,
						 sizeof (*cygwin_shared),
						 SH_CYGWIN_SHARED);
    heap_init ();

    if (!smi)
      {
	cygwin_shared->initialize ();
	/* Defer debug output printing the installation root and installation key
	   up to this point.  Debug output except for system_printf requires
	   the global shared memory to exist. */
	debug_printf ("Installation root: <%W> key: <%S>",
		      installation_root, &installation_key);
      }
  }
  user_shared_create (false);
@


1.134
log
@Throughout change all calls of low_priority_sleep (0) to yield ().
* miscfuncs.cc (yield): Rename from low_priority_sleep.  Remove all of the
logic which called Sleep() and just use SwitchToThread.
* miscfuncs.h (yield): Rename from low_priority_sleep.
(SLEEP_0_STAY_LOW): Delete unused define.
* shared.cc (memory_init): Move heap_init() call directly after shared memory
initialization to more closely mimic long-standing program flow.
* tty.cc (tty_list::terminate): Replace call to low_priority_sleep with Sleep.
@
text
@d26 1
d422 22
a443 34
  for (;;)
    {
      LONG smi = InterlockedExchange (&shared_mem_inited, -1);
      if (smi < 0)
	{
	  yield ();
	  continue;
	}

      if (!smi)
	/* Initialize installation root dir */
	init_installation_root ();

      cygwin_shared = (shared_info *) open_shared (L"shared",
						   CYGWIN_VERSION_SHARED_DATA,
						   cygwin_shared_h,
						   sizeof (*cygwin_shared),
						   SH_CYGWIN_SHARED);
      heap_init ();

      if (!smi)
	{
	  cygwin_shared->initialize ();
	  /* Defer debug output printing the installation root and installation key
	     up to this point.  Debug output except for system_printf requires
	     the global shared memory to exist. */
	  debug_printf ("Installation root: <%W> key: <%S>",
			installation_root, &installation_key);
	  smi = 1;
	}

      InterlockedExchange (&shared_mem_inited, smi);
      break;
    }
@


1.133
log
@* shared.cc (memory_init): Fix comment.  Fix indentation.
@
text
@d321 1
a321 1
	low_priority_sleep (0);	// Should be hit only very very rarely
d426 1
a426 1
	  low_priority_sleep (0);
a433 1
      /* Installation root dir has been globally initialized */
d439 2
a454 1
  heap_init ();
@


1.132
log
@* shared_info.h (open_shared): Create function wrapper for common use case.
(open_shared): Change fifth argument to a pointer rather than a reference.
* fhandler_console.cc (fhandler_console::get_tty_stuff): Eliminate use of dummy
variable and call open_shared with constant.
* fhandler_process.cc (format_process_mounts): Ditto.
* pinfo.cc (pinfo::init): Pass pointer to shloc.
* shared.cc (shared_mem_inited): New variable.
(open_shared): Crate function wrapper for common use case.
(open_shared): Accommodate change to fifth argument to a pointer.
(shared_info::initialize): Remove spinlock test.  Simplify function.  Move
get_session_parent_dir call back here.
(memory_init): Protect global shared settings with shared_mem_inited spinlock.
Move get_session_parent_dir call to shared_info::initialize.
@
text
@d420 1
a420 1
  /* Initialize general shared memory */
d440 11
a450 10
	if (!smi)
	  {
	    cygwin_shared->initialize ();
	    /* Defer debug output printing the installation root and installation key
	       up to this point.  Debug output except for system_printf requires
	       the global shared memory to exist. */
	    debug_printf ("Installation root: <%W> key: <%S>",
			  installation_root, &installation_key);
	    smi = 1;
	  }
@


1.131
log
@* shared.cc (inst_root_inited): Delete.
* (shared_info::initialize): Reorganize.  Move call to init_installation_root
here under spinlock control.  Move unneeded non-shared_info initialization out
of this function.
(memory_init): Remove call to init_installation_root.  Call heap_init and
get_session_parent_dir here.
@
text
@d40 1
a117 1

d219 8
a226 1
	     shared_locations& m, PSECURITY_ATTRIBUTES psa, DWORD access)
d231 1
a231 1
  if (m == SH_JUSTCREATE || m == SH_JUSTOPEN)
d235 1
a235 1
      addr = off_addr (m);
d243 1
a243 1
    m = SH_JUSTOPEN;
d248 1
a248 1
      if (m == SH_JUSTOPEN)
d255 1
a255 1
	    m = SH_JUSTOPEN;
d259 1
a259 1
      else if (m != SH_JUSTOPEN)
d282 1
a282 1
  if (m == SH_CYGWIN_SHARED && offsets[0])
a346 1
  shared_locations sh_user_shared = SH_USER_SHARED;
d348 2
a349 2
					    cygwin_user_h, sizeof (user_info),
					    sh_user_shared, &sec_none);
d391 5
a395 10
      /* Initialize installation root dir. This is put here just to piggyback on the
	 shared memory spinlock.  The installation root does not live in shared_info
	 shared memory.  */
      init_installation_root ();
      init_obcaseinsensitive ();/* Initialize obcaseinsensitive. */
      tty.init ();		/* Initialize tty table.  */
      mt.initialize ();		/* Initialize shared tape information. */
      debug_printf ("Installation root: <%W> key: <%S>",
		    installation_root, &installation_key);
      cb = sizeof (*this);	/* Do last, after all shared memory initialization */
d397 1
a397 1
  else
d399 2
a400 7
      if (sversion != SHARED_VERSION_MAGIC)
	{
	  InterlockedExchange ((LONG *) &version, sversion);
	  multiple_cygwin_problem ("system shared memory version", sversion, SHARED_VERSION_MAGIC);
	}
      while (!cb)
	low_priority_sleep (0);	// Should be hit only very very rarely
d421 32
a452 7
  shared_locations sh_cygwin_shared;
  cygwin_shared = (shared_info *) open_shared (L"shared",
					       CYGWIN_VERSION_SHARED_DATA,
					       cygwin_shared_h,
					       sizeof (*cygwin_shared),
					       sh_cygwin_shared = SH_CYGWIN_SHARED);
  cygwin_shared->initialize ();
a453 1
  get_session_parent_dir ();	/* Create session dir if first process. */
@


1.130
log
@	Throughout, replace hMainProc with GetCurrentProcess/NtCurrentProcess
	according to context.  Throughout, replace hMainThread with
	GetCurrentThread/NtCurrentThread according to context.
	* dcrt0.cc (dll_crt0_0): Drop duplication of GetCurrentProcess to
	hMainProc.  Drop duplication of GetCurrentThread to hMainThread.
	* dtable.cc (dtable::stdio_init): Remove useless comment.
	* globals.cc (hMainProc): Remove.
	(hMainThread): Remove.
	* ntdll.h (NtCurrentProcess): Define.
	(NtCurrentThread: Define.
@
text
@a39 1
static bool inst_root_inited;
a117 1
  inst_root_inited = true;
d383 14
a396 1
  if (sversion)
a406 11
  heap_init ();
  get_session_parent_dir ();	/* Create session dir if first process. */

  if (!sversion)
    {
      init_obcaseinsensitive ();/* Initialize obcaseinsensitive. */
      tty.init ();		/* Initialize tty table.  */
      mt.initialize ();		/* Initialize shared tape information. */
      cb = sizeof (*this);	/* Do last, after all shared memory initialization */
    }

a423 4
  /* Initialize installation root dir. */
  if (!installation_root[0])
    init_installation_root ();

a430 6
  /* Defer debug output printing the installation root and installation key
     up to this point.  Debug output except for system_printf requires
     the global shared memory to exist. */
  if (inst_root_inited)
    debug_printf ("Installation root: <%W> key: <%S>",
		  installation_root, &installation_key);
d432 2
@


1.129
log
@	* shared.cc (inst_root_inited): New static bool variable.
	(init_installation_root): Set inst_root_inited to true.
	(memory_init): Print installation root debug output only if
	inst_root_inited is true.
@
text
@d161 1
a161 1
      status = NtQueryInformationProcess (GetCurrentProcess (),
@


1.128
log
@	* cygprops.h: New file.
	* dtable.cc (handle_to_fn): Add check for correct installation_key
	string in object name for pipes and ttys.
	* external.cc (cygwin_internal): Add CW_GET_INSTKEY to allow fetching
	the installation_key from cygserver.
	* fhandler_fifo.cc (fhandler_fifo::fifo_name): Add installation_key
	to fifo name.
	* globals.cc: Include cygprops.h.
	(_RDATA): Move slightly and add comment.
	(cygwin_props): Define.
	* mount.cc (mount_info::init): Accommodate the fact that
	installation_root is now a global variable in DLL common shared memory,
	rather than a member of cygwin_shared.
	* pipe.cc (fhandler_pipe::create_selectable): Add installation_key to
	pipe name.
	* shared.cc (installation_root): Define here for storage in DLL
	common shared memory.
	(installation_key): Ditto.
	(installation_key_buf): Ditto.
	(init_installation_root): Convert from shared_info method to ordinary
	function.  Add initializing installation_key.  Invalidate
	installation_key depending of value of disable_key property.  Add
	comment to explain.
	(get_shared_parent_dir): Add installation_key to directory name.
	(get_session_parent_dir): Ditto.
	(shared_info::initialize): Move call to init_installation_root from
	here...
	(memory_init): ...to here.  Add debug output to print installation root
	and installation key.  Add comment to explain why.
	* shared_info.h (SHARED_INFO_CB): Recalculate.
	(CURR_SHARED_MAGIC): Ditto.
	(class shared_info): Remove definition of installation_root and
	declaration of init_installation_root.
	(init_installation_root): Declare.
	(installation_root): Declare.
	(installation_key): Declare.
	* uinfo.cc (pwdgrp::load): Accommodate the fact that installation_root
	is now a global variable in DLL common shared memory.
	* include/cygwin/version.h: Bump API minor number.
	(CYGWIN_INFO_INSTALLATIONS_NAME): Add.
	* include/sys/cygwin.h (cygwin_getinfo_types): Add CW_GET_INSTKEY.
@
text
@d40 1
d118 2
d438 3
a440 2
  debug_printf ("Installation root: <%W> key: <%S>",
		installation_root, &installation_key);
@


1.127
log
@* cygheap.h (mini_cygheap): New struct.
(init_cygheap): Inherit locale field via mini_cygheap.
* cygheap.cc (cygheap_at_start): Define new variable.
(cygheap): Initialize as cygheap_at_start so that locale information is always
available.
(cygheap_init): Initialize cygheap iff it is set to cygheap_at_start.
* shared_info.h (memory_init): Accommodate argument change.
* memory.cc (memory_init): Accept an argument indicating whether cygheap should
be initialized or not.
* dcrt0.cc (child_info_fork::handle_fork): Pass false to memory_init().
(child_info_spawn::handle_spawn): Ditto.
(dll_crt0_0): Pass true to memory_init when not forking or execing.
* cygheap.h (cygheap_types::HEAP_2_DLL): New enum.
* dll_init.h (dll): Remove unused namelen field.
(dll_list::load_after_fork): Accommodate change in arguments.
* dll_init.cc (dll_list::alloc): Allocate dll information in the cygwin heap.
(dll_list::detach): Free dll information from the cygwin heap.
(dll_list::load_after_fork): Use dll information in the cygwin heap directly
rather than querying parent.
* fork.cc (frok::first_dll): Delete.
(frok::child): Don't report on first_dll.  Don't pass it to load_on_fork.
(frok::parent): Don't set first_dll.
(fork): Ditto.
@
text
@d29 2
d37 82
d133 1
a133 1
      __small_swprintf (bnoname, L"\\BaseNamedObjects\\%s%s",
d135 2
a136 1
			_cygwin_testing ? cygwin_version.dll_build_date : "");
d167 1
a167 1
			    L"\\Sessions\\BNOLINKS\\%d\\%s%s",
d169 2
a170 1
			    _cygwin_testing ? cygwin_version.dll_build_date : "");
a358 40
/* Use absolute path of cygwin1.dll to derive the Win32 dir which
   is our installation root.  Note that we can't handle Cygwin installation
   root dirs of more than 4K path length.  I assume that's ok... */
void
shared_info::init_installation_root ()
{
  if (!GetModuleFileNameW (cygwin_hmodule, installation_root, PATH_MAX))
    api_fatal ("Can't initialize Cygwin installation root dir.\n"
	       "GetModuleFileNameW(%p, %p, %u), %E",
	       cygwin_hmodule, installation_root, PATH_MAX);
  PWCHAR p = installation_root;
  if (wcsncmp (p, L"\\\\?\\", 4))	/* No long path prefix. */
    {
      if (!wcsncasecmp (p, L"\\\\", 2))	/* UNC */
	{
	  p = wcpcpy (p, L"\\??\\UN");
	  GetModuleFileNameW (cygwin_hmodule, p, PATH_MAX - 6);
	  *p = L'C';
	}
      else
	{
	  p = wcpcpy (p, L"\\??\\");
	  GetModuleFileNameW (cygwin_hmodule, p, PATH_MAX - 4);
	}
    }
  installation_root[1] = L'?';

  PWCHAR w = wcsrchr (installation_root, L'\\');
  if (w)
    {
      *w = L'\0';
      w = wcsrchr (installation_root, L'\\');
    }
  if (!w)
    api_fatal ("Can't initialize Cygwin installation root dir.\n"
	       "Invalid DLL path");

  *w = L'\0';
}

a397 1
      init_installation_root ();/* Initialize installation root dir. */
d421 4
d432 5
@


1.126
log
@	* shared.cc (shared_name): New function for WCHAR names.
	(open_shared): Take name parameter as WCHAR.  Accommodate throughout.
	* shared_info.h ((CURR_SHARED_MAGIC): Redefine.
	(shared_name): Add declaration for function taking a WCHAR name.
	(open_shared): Change declaration according to above change.
	* pinfo.cc (pinfo::init) : Accommodate above change.
@
text
@d364 2
a365 2
void __stdcall
memory_init ()
d370 1
a370 1
  if (!cygheap)
@


1.125
log
@Remove unneeded header files from source files throughout.  Update copyrights
where appropriate.
* globals.cc: New file for generic global variables.
* mkglobals_h: New file to generate globals.h.
* mkstatic: New Script used to build a (currently non-working) static
libcygwin_s.a.
* Makefile.in: Add unused rule to build a non-working libcygwin_s.a.
(DLL_OFILES): Add globals.o.  Make all objects rely on globals.h.
(globals.h): New target.  Generate globals.h.
* cygtls.h: Honor new CYGTLS_HANDLE define to control when the HANDLE operator
is allowed in _cygtls.
* dcrt0.cc: Move most globals to globals.cc.
* init.cc: Ditto.
* environ.cc (strip_title_path): Remove now-unneeded extern.
* fhandler_serial.cc (fhandler_serial::open): Ditto.
* pinfo.cc: Ditto.
(commune_process): Ditto.
* shared.cc: Ditto.
* glob.cc: Ditto.
* strace.cc: Ditto.
* exceptions.cc: Define CYGTLS_HANDLE before including winsup.h.
* path.cc (stat_suffixes): Move here.
* security.h: Add forward class path_conv declaration.
* smallprint.cc (__small_vsprintf): Make a true c++ function.
(__small_sprintf): Ditto.
(small_printf): Ditto.
(console_printf): Ditto.
(__small_vswprintf): Ditto.
(__small_swprintf): Ditto.
* spawn.cc (spawn_guts): Remove _stdcall decoration in favor of regparm.
(hExeced): Move to globals.cc
* strfuncs.cc (current_codepage): Ditto.
(active_codepage): Ditto.
* sync.cc (lock_process::locker): Move here from dcrt0.cc.
* syscalls.cc (stat_suffixes): Move to path.cc.
* tty.cc (tty::create_master): Uncapitalize fatal warning for consistency.
* winsup.h: Include globals.h to declare most of the grab bag list of globals
which were previously defined here.
* mount.h: Move USER_* defines back to shared_info.h.
* speclib: Force temporary directory cleanup.
@
text
@d103 7
d131 1
a131 1
open_shared (const char *name, int n, HANDLE& shared_h, DWORD size,
d145 2
a146 2
  char map_buf[MAX_PATH];
  char *mapname = NULL;
d155 1
a155 1
	shared_h = OpenFileMapping (access, FALSE, mapname);
d158 1
a158 1
	  shared_h = CreateFileMapping (INVALID_HANDLE_VALUE, psa,
d166 1
a166 1
	api_fatal ("CreateFileMapping %s, %E.  Terminating.", mapname);
d180 1
a180 1
      system_printf ("relocating shared object %s(%d) from %p to %p", name, n, addr, shared);
d186 1
a186 1
    api_fatal ("MapViewOfFileEx '%s'(%p), %E.  Terminating.", mapname, shared_h);
d202 1
a202 1
  debug_printf ("name %s, n %d, shared %p (wanted %p), h %p", mapname, n, shared, addr, shared_h);
d239 1
a239 1
  char name[UNLEN + 1] = ""; /* Large enough for SID */
d257 1
a257 1
  debug_printf ("opening user shared for '%s' at %p", name, user_shared);
d378 1
a378 1
  cygwin_shared = (shared_info *) open_shared ("shared",
@


1.124
log
@Remove unneeded whitespace.
* fhandler_fifo.cc (fhandler_fifo::open): Rework to cause errno to be set to
ENXIO when opening a fifo write/nonblocking.
* environ.cc (ucreqenv): Rename to ucenv.  Move code from old ucenv here and
conditionalize it on create_upcaseenv.
(ucenv): Delete.
(environ_init): Fix compiler warning by moving create_upcaseenv test to ucenv.
Don't bother checking for child_proc_info when calling ucenv since it is
assumed to be NULL at the point where the function is called.
* path.cc (symlink_worker): Turn off MS-DOS path warnings when dealing with
devices since the device handler passes in a translated MS-DOS path.
* sec_auth.cc (lsaprivkeyauth): Avoid variable initialization which causes a
compiler error.
* fhandler_netdrive.cc: Update copyright.
@
text
@d4 1
a4 1
   2006, 2007, 2008 Red Hat, Inc.
a36 1
extern bool _cygwin_testing;
@


1.123
log
@* dcrt0.cc (dll_crt0_0): Remove calling malloc_init and
user_shared_initialize_1 from here.
(dll_crt0_1): Remove dynamically_loaded check.  Just call malloc_init and
user_shared_initialize unconditionally.
* shared.cc (user_shared_create): Rename from user_shared_initialize.
(user_shared_initialize): Rename from user_shared_initialize_1.  Move complete
user_shared content initialization code here from user_shared_create.
* syscalls.cc (seteuid32): Remove call to user_shared_initialize_1.  That is
implied by the "true" argument to user_shared_create().
@
text
@d55 1
a55 1
                                  NULL, everyone_sd (CYG_SHARED_DIR_ACCESS));
d58 1
a58 1
        api_fatal ("NtCreateDirectoryObject(%S): %p", &uname, status);
d61 1
a61 1
} 
d80 1
a80 1
        {
d95 1
a95 1
} 
d153 1
a153 1
	  				PAGE_READWRITE, 0, size, mapname);
d214 1
a214 1
      	cygheap->user.set_name (pw->pw_name);
@


1.122
log
@* shared_info.h (shared_destroy): Declare.
* shared.cc (shared_destroy): Define new function to destroy shared memory
regions.
* init.cc (dll_entry): Call shared_destroy when dll detaches from the process.
@
text
@d201 1
a201 2
/* User shared initialization which requires malloc and cygtls stuff has to
   go here. */
d203 1
a203 1
user_shared_initialize_1 ()
d205 3
a207 1
  if (!user_shared->cb)
d218 9
d229 1
d231 1
a231 1
user_shared_initialize (bool reinit)
d254 2
a255 12

  DWORD sversion = (DWORD) InterlockedExchange ((LONG *) &user_shared->version, USER_VERSION_MAGIC);
  /* Wait for initialization of the Cygwin per-user shared, if necessary */
  if (sversion)
    {
      while (!user_shared->cb)
	low_priority_sleep (0);	// Should be hit only very very rarely
      if (user_shared->version != sversion)
	multiple_cygwin_problem ("user shared memory version", user_shared->version, sversion);
      else if (user_shared->cb != sizeof (*user_shared))
	multiple_cygwin_problem ("user shared memory size", user_shared->cb, sizeof (*user_shared));
    }
d371 1
a371 1
  shared_locations sh_cygwin_shared = SH_CYGWIN_SHARED;
d376 1
a376 2
					       sh_cygwin_shared);

d378 1
a378 2

  user_shared_initialize (false);
@


1.121
log
@	* dcrt0.cc (dll_crt0_0): Call malloc_init and user_shared_initialize_1
	here in case we're dynamically loaded.  Explain why.
	(dll_crt0_1): Call user_shared_initialize_1 from here.
	* mount.cc (is_native_path): New inline function testing for native
	and long Win32 path prefix.
	(is_unc_share): Remove long WIn32 path prefix test.
	(mount_info::create_root_entry): Use PATH_MAX buffer.
	(mount_info::init): Ditto.
	(mount_info::add_item): Test for is_native_path as well.
	* path.cc (normalize_win32_path): Simplify native path prefix code.
	* shared.cc (user_shared_initialize_1): New function taking user
	shared initialization code relying on malloc and cygtls.
	(user_shared_initialize): Move mountinfo initialization to
	user_shared_initialize_1.
	* shared_info.h (user_shared_initialize_1): Declare.
	* syscalls.cc (seteuid32): Call user_shared_initialize_1 after user
	changed.
@
text
@d257 9
@


1.120
log
@	* shared.cc (user_shared_initialize): Fetch potentially changed Cygwin
	username from /etc/passwd before loading mount table.
	(shared_info::init_installation_root): New function fetching Cygwin's
	installation root dir and storing as native NT path in global shared
	memory.
	(shared_info::initialize): Call init_installation_root exactly once at
	first startup.
	* shared_info.h (SHARED_INFO_CB): Accommodate change to shared_info.
	(CURR_SHARED_MAGIC): Ditto.
	(class shared_info): Add installation_root member.
	(shared_info::init_installation_root): Declare.

	* grp.cc (pwdgrp::read_group): Call pwdgrp::load with native WCHAR path.
	* passwd.cc (pwdgrp::read_passwd): Ditto.  Avoid recursion.
	(etc::init): Take POBJECT_ATTRIBUTES instead of path_conv.
	* path.h (etc::init): Change prototype accordingly.
	* pwdgrp.h (class pwdgrp): Store path as UNICODE_STRING/PWCHAR instead
	of as path_conv.
	(pwdgrp::load): Accommodate prototype.
	* uinfo.cc (pwdgrp::load): Change argument type from char to wchar_t.
	Create native NT path here instead of calling path_conv.

	* mount.cc (find_root_from_cygwin_dll): Drop in favor of global
	initializaion in shared_info.
	(mount_info::init): Fetch native NT root dir from cygwin_shared.
	(mount_info::from_fstab): Expect native NT path and use native NT
	functions to access file.  Convert username part in user fstab path
	according to special char transformation rules.
	* path.cc (tfx_chars): Convert slash to backslash.
	(transform_chars): Implement for path given as PWCHAR.
	(transform_chars): PUNICODE_STRING version calls PWCHAR version.
	Remove useless commented code.
@
text
@d201 18
d245 2
a246 13
  /* Initialize the Cygwin per-user shared, if necessary */
  if (!sversion)
    {
      cygpsid sid (cygheap->user.sid ());
      struct passwd *pw = internal_getpwsid (sid);
      /* Correct the user name with what's defined in /etc/passwd before
	 loading the user fstab file. */
      if (pw)
      	cygheap->user.set_name (pw->pw_name);
      user_shared->mountinfo.init ();	/* Initialize the mount table.  */
      user_shared->cb =  sizeof (*user_shared);
    }
  else
@


1.119
log
@	Add case-sensitivity.
	Unconditionally handle mount points case-sensitive.
	Unconditionally handle virtual paths case-sensitive.
	Unconditionally handle registry paths case-insensitive.
	Otherwise, accommodate case-sensitivity of given path throughout.
	* cygheap.cc (cygheap_root::set): Get additional caseinsensitive
	parameter and store it.
	* cygheap.h (struct cygheap_root_mount_info): Add member
	caseinsensitive.
	* dlfcn.cc (get_full_path_of_dll): Drop PC_NOFULL parameter from call
	to path_conv::check.
	* environ.cc (pcheck_case): Remove.
	(check_case_init): Remove.
	(known): Drop "check_case" option.
	* exceptions.cc (open_stackdumpfile): Add comment.
	* fhandler.cc (fhandler_base::get_default_fmode): Call pathmatch
	instead of strcasematch.
	* fhandler_disk_file.cc: Accommodate case-sensitivity of given path
	throughout.
	(__DIR_mounts::check_mount): Unconditionally check virtual paths
	case-sensitive.
	(fhandler_disk_file::link): Drop case clash handling.
	(fhandler_disk_file::open): Ditto.
	(fhandler_disk_file::readdir_helper): Drop managed mount code.
	* mount.cc: Remove managed mount code and datastructures.
	(struct opt): Remove "managed" option.  Add "posix=0" and "posix=1"
	options.
	(fillout_mntent): Remove "managed" output.  Add "posix" output.
	* path.cc (struct symlink_info): Remove case_clash member and
	case_check method.
	(pcheck_case): Remove.
	(path_prefix_p): Take additional bool parameter "caseinsensitive".
	(pathnmatch): Ditto.
	(pathmatch): Ditto.
	(mkrelpath): Ditto.
	(fs_info::update): Set caseinsensitive flag according to file system
	name and FILE_CASE_SENSITIVE_SEARCH flag.  Add comment.
	(tfx_chars_managed): Remove.
	(transform_chars): Drop "managed" parameter.  Always use tfx_chars.
	(get_nt_native_path): Drop "managed" parameter.  Make sure drive letters
	are always upper case.
	(getfileattr): Change second parameter to denote caseinsensitivity.
	(path_conv::check): Initialize caseinsensitive to OBJ_CASE_INSENSITIVE.
	Set caseinsensitive according to global obcaseinsensitive flag, file
	system case sensitivity and MOUNT_NOPOSIX mount flag.
	Drop case_clash and all the related code.
	(symlink_worker): Drop case clash handling.
	(symlink_info::set): Drop setting case_clash.
	(symlink_info::case_check): Remove.
	(cwdstuff::set): Add comment.
	(etc::init): Take path_conv instead of PUNICODE_STRING as parameter to
	allow case sensitivity.
	* path.h (enum pathconv_arg): Drop PC_SYM_IGNORE.
	(enum case_checking): Remove.
	(enum path_types): Drop PATH_ENC, add PATH_NOPOSIX flag.
	(struct fs_info): Add caseinsensitive flag and accessor methods.
	(class path_conv): Add caseinsensitive member and define
	objcaseinsensitive method.  Drop case_clash member and isencoded method.
	(pathmatch): Change prototype according to above change.
	(pathnmatch): Ditto.
	(path_prefix_p): Ditto.
	(get_nt_native_path): Ditto.
	(class etc): Ditto.
	(fnunmunge): Remove prototype.
	* shared.cc (shared_info::init_obcaseinsensitive): Initialize
	obcaseinsensitive flag from obcaseinsensitive registry value.
	(shared_info::initialize): Call init_obcaseinsensitive here by the
	first process creating the shared memory.
	* shared_info.h (mount_item::fnmunge): Remove.
	(shared_info::obcaseinsensitive): Rename from obcaseinsensitivity.
	(shared_info::init_obcaseinsensitive): Declare.
	* syscalls.cc (try_to_bin): Add comment.
	* include/sys/mount.h (MOUNT_ENC): Remove flag.
	(MOUNT_NOPOSIX): Add flag.
@
text
@d25 1
d28 1
d230 6
a235 1
      debug_printf ("initializing user shared");
d250 40
d329 2
a330 1

a332 1
      init_obcaseinsensitive ();/* Initialize obcaseinsensitive. */
@


1.118
log
@	* fhandler_tape.cc (mtinfo::initialize): Remove synchronization stuff.
	Just initialize drive data.
	* mtinfo.h (MTINFO_MAGIC): Remove.
	(MTINFO_VERSION): Remove.
	(class mtinfo): Remove magic and version members.
	* shared.cc (shared_info::initialize): Move call to
	get_session_parent_dir so that the dir creation is only called once.
	Move call to mt.initialize so that it's called only by the first
	process creating the shared memory.
	* shared_info.h (SHARED_INFO_CB): Accommodate change to shared_info.
	(CURR_SHARED_MAGIC): Ditto.
	(class shared_info): Add obcaseinsensitivity member.
@
text
@d243 19
d282 1
d285 1
@


1.117
log
@	* shared.cc (open_shared): Fix comments.  Fix a condition which has
	been overlooked to revert to its old state in change from 2008-04-18.
@
text
@d259 1
d264 1
a267 4
  mt.initialize ();		/* Initialize shared tape information. */

  get_session_parent_dir ();	/* Create session dir if first process. */

@


1.116
log
@	* Makefile.in (DLL_OFILES): Add kernel32.o.
	* autoload.cc (WSACloseEvent): Remove.
	(WSACreateEvent): Remove.
	* cygheap.cc (cygheap_init): Drop initializing shared_prefix.
	* cygheap.h (struct init_cygheap): Drop shared_prefix and
	shared_prefix_buf members.
	* fhandler_socket.cc (sock_shared_name): New static function.
	(search_wsa_event_slot): Convert name buffers to WCHAR.  Call
	NtCreateMutant/NtOpenMutant to create mutexes in session local
	namespace.
	(fhandler_socket::init_events): Ditto.  Fix debug output.
	(fhandler_socket::release_events): Close mutexes using NtClose.
	(fhandler_socket::dup): Ditto.
	* kernel32.cc: New file, implementing Win32 calls in a Cygwin-specific
	way.
	* mmap.cc (MapView): Make static.
	* ntdll.h: Fix status code sorting.
	(STATUS_OBJECT_NAME_EXISTS): Define.
	(SEMAPHORE_QUERY_STATE): Define.
	(CYG_SHARED_DIR_ACCESS): Define.
	(CYG_MUTANT_ACCESS): Define.
	(CYG_EVENT_ACCESS): Define.
	(CYG_SEMAPHORE_ACCESS): Define.
	(enum _PROCESSINFOCLASS): Define ProcessSessionInformation.
	(struct _PROCESS_SESSION_INFORMATION): Define.
	(NtCreateSemaphore): Declare.
	(NtOpenSemaphore): Declare.
	* flock.cc: Use CYG_xxx_ACCESS access masks where appropriate.
	* posix_ipc.cc (ipc_mutex_init): Use native functions to create mutex.
	Create in cygwin-shared subdir.
	(ipc_cond_init): Ditto for event.
	(ipc_mutex_close): Use NtClose.
	(ipc_cond_close): Ditto.
	(mq_open): Drop "cyg" prefix from mqh_uname.
	* shared.cc (CYG_SHARED_DIR_ACCESS): Drop definition here.
	(_cygwin_testing): Declare extern on file level.
	(get_shared_parent_dir): Change name of shared directory.  Add name
	to api_fatal output.
	(get_session_parent_dir): New function.
	(shared_name): Simplify.
	(shared_info::initialize): Call get_session_parent_dir.
	* shared_info.h (get_session_parent_dir): Declare.
	* smallprint.cc (__small_vswprintf): Fix bug in multibyte string
	conversion.
	* thread.cc (semaphore::semaphore): Align semaphore name to object
	names in posix IPC functions.
	* include/cygwin/version.h (CYGWIN_VERSION_SHARED_DATA): Bump.
@
text
@a167 1
      /* Probably win95, so try without specifying the address.  */
d172 1
a172 1
      system_printf ("relocating shared object %s(%d) from %p to %p on Windows NT", name, n, addr, shared);
d180 1
a180 1
  if (m == SH_USER_SHARED && offsets[0])
@


1.115
log
@	* fhandler.h (-struct wsa_event): Move to wsa_event.h.  Include
	wsa_event.h instead.
	* fhandler_socket.cc (NUM_SOCKS): Move to wsa_event.h.
	(wsa_events): Move from DLL shared area to cygwin_shared shared
	memory.  Accommodate throughout.
	(socket_serial_number): Ditto.
	* fhandler_tape.cc (mt): Ditto.
	(mtinfo_init): Remove.
	(mt): Define as cygwin_shared->mt.
	* flock.cc (FLOCK_PARENT_DIR_ACCESS): Remove.
	(FLOCK_INODE_DIR_ACCESS): Move up in file.
	(FLOCK_MUTANT_ACCESS): Ditto.
	(FLOCK_EVENT_ACCESS): Ditto.
	(get_lock_parent_dir): Remove.
	(inode_t::inode_t): Call get_shared_parent_dir to get parent dir handle.
	Add a "flock-" prefix to file's lock directory name for clarity.
	* mtinfo.h (mtinfo_init): Drop declaration.
	* net.cc (last_used_bindresvport): Move from DLL shared area to
	cygwin_shared shared memory.
	(cygwin_bindresvport_sa): Accommodate above change.
	* sec_helper.cc (_everyone_sd): Move here from flock.cc.
	* security.h (SD_MIN_SIZE): Ditto.
	(everyone_sd): Ditto.
	* shared.cc (cygwin_shared_area): Remove.
	(cygwin_shared_h): New handle.
	(get_shared_parent_dir): New static function.
	(shared_name): Drop session_local argument.  Call get_shared_parent_dir
	here.  Add cygwin-shared subdir to object name.
	(offsets): Reinstantiate SH_CYGWIN_SHARED member.
	(open_shared): Revert change from 2007-03-29 for systems supporting
	SeCreateGlobalPrivilege.
	(shared_info::initialize): Call mtinfo's initialize here.
	(memory_init): Drop call to mtinfo_init.
	* shared_info.h (SHARED_INFO_CB): Accommodate change to shared_info.
	(CURR_SHARED_MAGIC): Ditto.
	(class shared_info): Add members for global socket and tape info
	sharing.
	(enum shared_locations): Reinstantiate SH_CYGWIN_SHARED.
	(get_shared_parent_dir): Declare.
	(shared_name): Drop session_local argument from declaration.
	* wsa_event.h: New file.  Move definitions of NUM_SOCKS and
	struct wsa_event here.
@
text
@d35 1
a35 7

#define CYG_SHARED_DIR_ACCESS	(DIRECTORY_QUERY \
                                 | DIRECTORY_TRAVERSE \
                                 | DIRECTORY_CREATE_SUBDIRECTORY \
                                 | DIRECTORY_CREATE_OBJECT \
                                 | READ_CONTROL)

d44 1
a44 1
  
d47 5
a51 1
      RtlInitUnicodeString (&uname, L"\\BaseNamedObjects\\cygwin-shared");
d56 35
a90 1
        api_fatal ("NtCreateDirectoryObject(parent): %p", status);
d98 1
a98 8
  extern bool _cygwin_testing;

  get_shared_parent_dir ();
  __small_sprintf (ret_buf, "%scygwin-shared\\%s.%s.%d",
		   cygheap->shared_prefix,
		   cygwin_version.shared_id, str, num);
  if (_cygwin_testing)
    strcat (ret_buf, cygwin_version.dll_build_date);
d267 3
a269 1
  mt.initialize ();
@


1.114
log
@Remove unneeded header files from source files throughout.
@
text
@d25 2
a26 1
#include "mtinfo.h"
a27 1
static shared_info cygwin_shared_area __attribute__((section (".cygwin_dll_common"), shared));
d30 1
d33 30
d64 1
a64 1
shared_name (char *ret_buf, const char *str, int num, bool session_local)
d68 3
a70 2
  __small_sprintf (ret_buf, "%s%s.%s.%d",
		   session_local ? "" : cygheap->shared_prefix,
d82 4
a118 8
      /* Beginning with Windows 2003 Server, a process doesn't necessarily
	 have the right to create globally accessible shared memory.  If so,
	 creating the shared memory will fail with ERROR_ACCESS_DENIED if the
	 user doesn't have the SeCreateGlobalPrivilege privilege.  If that
	 happened, we retry to create a shared memory object locally.  This
	 only allows to see the processes in the current user session, but
	 that's better than nothing. */

d122 1
a122 6
	{
	  shared_h = OpenFileMapping (access, FALSE, mapname);
	  if (!shared_h && wincap.has_create_global_privilege ()
	      && GetLastError () == ERROR_FILE_NOT_FOUND)
	    shared_h = OpenFileMapping (access, FALSE, mapname + 7);
	}
d127 2
a128 16
	  switch (GetLastError ())
	    {
	    case ERROR_ALREADY_EXISTS:
	      m = SH_JUSTOPEN;
	      break;
	    case ERROR_ACCESS_DENIED:
	      if (wincap.has_create_global_privilege ())
	        {
		  shared_h = CreateFileMapping (INVALID_HANDLE_VALUE, psa,
						PAGE_READWRITE, 0, size,
						mapname + 7);
		  if (GetLastError () == ERROR_ALREADY_EXISTS)
		    m = SH_JUSTOPEN;
		}
	      break;
	    }
d242 2
d261 8
a268 1
  cygwin_shared = &cygwin_shared_area;
a271 1
  mtinfo_init ();
@


1.113
log
@Add miscfuncs.h to files as needed throughout.
* mount.cc: New file.
* path.cc: Move mount-specific stuff into mount.cc.  Move common stuff into
miscfuncs.cc.  Remove unneeded includes.
* miscfuncs.cc: Move some common path functions here.
* miscfuncs.h: New file.
* winsup.h: Move miscelleneous functions to miscfuncs.h.
* dcrt0.cc: Remove unneeded includes.
* Makefile.in (DLL_OFILES): Add mount.o.
* include/cygwin/config.h: Fix a minor typo.
@
text
@a14 4
#include <stdio.h>
#include <stdlib.h>
#include <grp.h>
#include <pwd.h>
a16 1
#include "security.h"
a24 1
#include "child_info.h"
@


1.112
log
@	* Fix copyright dates.
@
text
@d13 1
@


1.111
log
@	* fhandler_socket.cc: Create shared objects session local throughout.
	* shared.cc (shared_name): Add argument to allow opening session
	local shared memory.
	* shared_info.h (shared_name): Change declaration accordingly.
@
text
@d4 1
a4 1
   2006, 2007 Red Hat, Inc.
@


1.110
log
@	* fhandler_registry.cc: Use NAME_MAX + 1 instead of CYG_MAX_PATH
	throughout for subkey name buffer size.
	* fhandler_socket.cc (search_wsa_event_slot): Use MAX_PATH instead of
	CYG_MAX_PATH for mutext name buffer size.
	(fhandler_socket::init_events): Ditto.
	* fhandler_virtual.cc (fhandler_virtual::opendir): Check path length
	against PATH_MAX instead of against CYG_MAX_PATH.
	* registry.cc (get_registry_hive_path): Use PATH_MAX instead of
	CYG_MAX_PATH for registry value path buffer size.
	* shared.cc (open_shared): Use MAX_PATH instead of CYG_MAX_PATH
	for shared memory name buffer size.
	* thread.cc (semaphore::semaphore): Use MAX_PATH instead of CYG_MAX_PATH
	for semaphore name buffer size.
	* uinfo.cc (cygheap_user::env_userprofile): Use PATH_MAX instead of
	CYG_MAX_PATH for temporary path name buffer size.
	* winf.h (LINE_BUF_CHUNK): Define as MAX_PATH * 2.
	* include/sys/dirent.h: Include sys/limits.h.  Define name buffer sizes
	using NAME_MAX.
@
text
@d38 1
a38 1
shared_name (char *ret_buf, const char *str, int num)
d42 2
a43 1
  __small_sprintf (ret_buf, "%s%s.%s.%d", cygheap->shared_prefix,
@


1.109
log
@	* Makefile.in (DLL_OFILES): Remove delqueue.o.
	* delqueue.cc: Delete.
	* fhandler.h (fhandler_base::close_fs): Drop declaration.
	(fhandler_disk_file::close): Drop declaration.
	* fhandler_disk_file.cc (fhandler_base::fstat_fs): Call close instead of
	close_fs.
	(fhandler_base::fstat_helper): Use open FH_UNIX handle in call to
	get_file_attribute.
	(fhandler_base::open_fs): Call close instead of get_file_attribute.
	(fhandler_disk_file::close): Remove.
	(fhandler_base::close_fs): Remove.
	* fhandler_socket.cc (fhandler_socket::close): Just call
	fhandler_base::close for FH_UNIX sockets.
	* shared.cc (user_shared_initialize): Drop call to
	user_shared->delqueue.init.
	* shared_info.h (CURR_USER_MAGIC): Change according to below change.
	(MAX_DELQUEUES_PENDING): Remove.
	(class delqueue_list): Remove.
	(class user_info): Remove delqueue.
	* syscalls.cc (close_all_files): Drop call to
	user_shared->delqueue.process_queue.
	(unlink): Drop delqueue handling.
@
text
@d80 1
a80 1
  char map_buf[CYG_MAX_PATH];
@


1.108
log
@	* shared_info.h (SHARED_INFO_CB): Accommodate change to shared_info.
	(CURR_SHARED_MAGIC): Ditto.
	(class shared_info): Add heap_slop_inited member.
	* shared.cc (shared_info::heap_slop_size): Use heap_slop_inited to
	track initializing heap_slop since 0 is a valid value for heap_slop.
	Drop useless < 0 consideration.
@
text
@a200 1
      user_shared->delqueue.init (); /* Initialize the queue of deleted files.  */
@


1.107
log
@	* cygheap.cc (cygheap_init): Fix formatting.  Remove comment.  Set
	shared_prefix depending only on terminal service capability.
	* dcrt0.cc (dll_crt0_1): Don't call set_cygwin_privileges here.
	* fhandler_fifo.cc (fhandler_fifo::open): Create the mutex as global
	object.
	* posix_ipc.cc (ipc_mutex_init): Use cygheap->shared_prefix.
	(ipc_cond_init): Ditto.
	* sec_helper.cc (privilege_name): Make static.  Use LookupPrivilegeName
	directly to be independent of the state of cygheap.
	(set_privilege): Take a LUID as parameter instead of an index value.
	Only print debug output in case of failure.
	(set_cygwin_privileges): Add comment.  Use LookupPrivilegeValue to
	get privilege LUIDs.
	(init_global_security): Call set_cygwin_privileges here.
	* security.h (privilege_name): Drop declaration.
	(set_privilege): Declare according to above change.
	(set_process_privilege): Call privilege_luid to get LUID.
	(_push_thread_privilege): Ditto.
	* shared.cc (open_shared): Add comment.  On systems supporting the
	SeCreateGlobalPrivilege, try to create/open global shared memory first.
	Fall back to local shared memory if that fails.
	* thread.cc (semaphore::semaphore): Use cygheap->shared_prefix.
	* wincap.h (wincapc::has_create_global_privilege): New element.
	* wincap.cc: Implement above element throughout.
@
text
@d265 1
a265 1
  if (!heap_slop)
d276 2
a277 5

      if (heap_slop < 0)
	heap_slop = 0;
      else
	heap_slop <<= 20;
@


1.106
log
@	* exceptions.cc (dummy_ctrl_c_handler): Remove.
	(init_console_handler): Drop has_null_console_handler_routine checks.
	* fhandler_raw.cc (fhandler_dev_raw::open): Drop has_raw_devices check.
	* fhandler_serial.cc (fhandler_serial::open): Drop
	.supports_reading_modem_output_lines check.
	* miscfuncs.cc (low_priority_sleep): Drop has_switch_to_thread check.
	* shared.cc (open_shared): Drop needs_memory_protection checks.
	* spawn.cc (spawn_guts): Drop start_proc_suspended check.
	* uname.cc (uname): Drop has_valid_processorlevel check.
	* wincap.cc: Remove has_raw_devices, has_valid_processorlevel,
	supports_reading_modem_output_lines, needs_memory_protection,
	has_switch_to_thread, start_proc_suspended and
	has_null_console_handler_routine throughout.
	* wincap.h: Ditto.
@
text
@d87 8
d98 6
a103 1
	shared_h = OpenFileMapping (access, FALSE, mapname);
d106 18
a123 4
	  shared_h = CreateFileMapping (INVALID_HANDLE_VALUE, psa, PAGE_READWRITE,
					0, size, mapname);
	  if (GetLastError () == ERROR_ALREADY_EXISTS)
	    m = SH_JUSTOPEN;
@


1.105
log
@	* Makefile.in (DLL_IMPORTS): Add libntdll.a.
	* autoload.cc: Remove all symbols from advapi32.dll, kernel32.dll and
	ntdll.dll available on all platforms since NT4.

	Throughout remove all usage of wincap.is_winnt.
	* dcrt0.cc (dll_crt0_0): Remove call to mmap_init.
	* fhandler.h (class fhandler_base): Remove has_changed flag.
	(fhandler_disk_file::touch_ctime): Remove declaration.
	(fhandler_disk_file::readdir_9x): Ditto.
	(fhandler_disk_file::touch_ctime): Remove.
	(fhandler_disk_file::readdir_9x): Remove.
	(fhandler_disk_file::closedir): Call NtClose instead of CloseHandle.
	* mmap.cc: Throughout call CreateMapping and MapView directly.
	(VirtualProt9x): Remove.
	(VirtualProtNT): Remove.
	(VirtualProtEx9x): Remove.
	(VirtualProtExNT): Remove.
	(VirtualProtect): Remove define.
	(VirtualProtectEx): Remove define.
	(CreateMapping9x): Remove.
	(CreateMappingNT): Rename to CreateMapping.
	(MapView9x): Remove.
	(MapViewNT): Rename to MapView.
	(struct mmap_func_t): Remove definition.
	(mmap_funcs_9x): Remove.
	(mmap_funcs_nt): Remove.
	(mmap_func): Remove.
	(mmap_init): Remove.
	* net.cc (getdomainname): Drop comment. Use NT4 registry key only.
	(get_95_ifconf): Remove.
	* pinfo.cc (winpids::enumNT): Rename to winpids::enum_processes.
	(winpids::enum9x): Remove.
	(winpids::set): Just call enum_processes directly.
	(winpids::enum_init): Ditto.
	* pinfo.h (class winpids): Drop enum_processes pointer.  Rename
	enumNT to enum_processes.  Drop enum9x declaration.  Drop initialization
	of enum_processes throughout.
	* registry.cc (get_registry_hive_path): Just create NT key.
	(load_registry_hive): Only load NT specific file.
	* syscalls.cc (unlink_9x): Remove.
	(unlink): Just call unlink_nt.
	* wincap.cc: Remove is_winnt flag throughout.
	* wincap.h: Ditto.
	* winsup.h: Remove mmap_init declaration.
@
text
@d72 1
a72 2
  if ((m == SH_JUSTCREATE || m == SH_JUSTOPEN)
      || !wincap.needs_memory_protection () && offsets[0])
d124 1
a124 1
  if (m == SH_USER_SHARED && offsets[0] && wincap.needs_memory_protection ())
@


1.104
log
@* child_info.h (child_info_spawn::__stdin): New element.
(child_info_spawn::__stdin): Ditto.
(CURR_CHILD_INFO_MAGIC): Regenerate.
* dcrt0.cc (check_sanity_and_sync): Minor cleanup.
(child_info_spawn::handle_spawn): Handle new __std* elements by calling
move_fd.
* dtable.cc (dtable::move_fd): Define new function.
* dtable.h (dtable::move_fd): Declare new function.
* fhandler.h (fhandler_pipe::popen_pid): Declare new element.
* fhandler.h (fhandler_pipe::get_popen_pid): Define new function.
* fhandler.h (fhandler_pipe::set_popen_pid): Ditto.
* pipe.cc (fhandler_pipe::fhandler_pipe): Zero popen_pid.
(fhandler_pipe::dup): Ditto.
* spawn.cc (handle): Change second argument to bool.
(spawn_guts): Accept __stdin/__stdout arguments and set them appropriately in
child_info structure and in STARTUPINFO structure.
* syscalls.cc (popen): New cygwin-specific implementation using spawn.
(pclose): Ditto.
* winsup.h (spawn_guts): Accommodate new arguments for spawn_guts.
* fhandler.cc (fhandler_base::set_no_inheritance): Make second arg a bool.
* fhandler.h (fhandler_base::set_no_inheritance): Ditto for declaration.
* child_info.h (child_info::msv_count): Rename from the now-inappropriate
"zero".
(child_info_spawn::filler): Add filler to work around Vista bug.
(child_info_fork::filler): Ditto.
* dcrt0.cc (get_cygwin_startup_info): Remove "zero" check since it is now
always filled out.
* fork.cc (frok::parent): Move ch.zero manipulation to constructor.
* spawn.cc (spawn_guts): Ditto.  Remove _ch wrapper.
* sigproc.cc (child_info::child_info): Initialize starter[].
* shared.cc (shared_info::heap_slop_size): Remove noisy system_printfs.
* shared_info.h (CURR_SHARED_MAGIC): Regenerate.
@
text
@d4 1
a4 1
   2006 Red Hat, Inc.
d117 1
a117 2
      if (wincap.is_winnt ())
	system_printf ("relocating shared object %s(%d) from %p to %p on Windows NT", name, n, addr, shared);
@


1.103
log
@	* cygheap.h (struct user_heap_info): Add slop member.
	* heap.cc (heap_init): Add slop factor to heap allocation.  Add
	comment.
	* mmap.cc (MapViewNT): Allocate memory maps top down.
	(fhandler_dev_zero::mmap): Ditto.
	* shared.cc (shared_info::heap_slop_size): New method.
	(shared_info::heap_chunk_size): Don't use debug_printf at early stage.
	* shared_info.h (SHARED_INFO_CB): Accomodate change to shared_info.
	(CURR_SHARED_MAGIC): Ditto.
	(class shared_info): Add heap_slop member.  Declare heap_slop_size.
	* wincap.h: Define heapslop throughout.
	* wincap.cc: Ditto.
@
text
@a255 3
#ifdef DEBUGGING
      system_printf ("fixed heap slop is %p", heap_slop);
#endif
a286 3
#ifdef DEBUGGING
      system_printf ("fixed heap size is %u", heap_chunk);
#endif
@


1.102
log
@	* shared.cc (open_shared): Drop useless attempt from 2006-08-11.
@
text
@d238 27
d290 3
a292 1
      debug_printf ("fixed heap size is %u", heap_chunk);
@


1.101
log
@	* shared.cc (open_shared): Desperately try to get shared memory, only
	when DEBUGGING enabled for now.
@
text
@a95 24
#ifdef DEBUGGING
	  if (!shared_h && GetLastError () == NO_ERROR)
	    {
	      system_printf ("CreateFileMapping %s, %E.  Retry Open", mapname);
	      shared_h = OpenFileMapping (access, FALSE, mapname);
	      if (!shared_h)
		{
		  system_printf ("OpenFileMapping %s, %E.  Retry Create "
				 "after sleep (check timing problem)", mapname);
		  Sleep (1000L);
		  shared_h = CreateFileMapping (INVALID_HANDLE_VALUE, psa,
						PAGE_READWRITE, 0, size,
						mapname);
		  if (!shared_h)
		    system_printf ("Retried CreateFileMapping %s, %E.",
				   mapname);
		  else
		    system_printf ("Retried CreateFileMapping %s succeeded!",
				   mapname);
		}
	      else
		system_printf ("OpenFileMapping %s succeeded!", mapname);
	    }
#endif
@


1.100
log
@	* shared.cc (offsets): Define as offsets relative to cygwin_hmodule
	instead of addresses.
	(off_addr): New macro.
	(open_shared): Use offsets array accordingly.  Remove unused code.
	* shared_info.h (cygwin_shared_address): Remove.
@
text
@d96 24
@


1.99
log
@	* cygheap.h (struct init_cygheap): Remove shared_h and mt_h members.
	* fhandler_tape.cc (mt): Define as DLL shared area in
	.cygwin_dll_common instead of as dynamically allocated area.
	Change referencing throughout.
	* mtinfo.h (mt_h): Remove entirely.
	(mt): Remove extern declaration.
	* shared.cc (cygwin_shared_area): New global cygwin_shared
	variable located in .cygwin_dll_common.
	(offsets): Define shared region addresses descending from
	cygwin_shared_address.
	(open_shared): Replace usage of SH_CYGWIN_SHARED by SH_USER_SHARED.
	(memory_init): Set cygwin_shared just by pointing to cygwin_shared_area.
	* shared_info.h (shared_locations): Remove SH_CYGWIN_SHARED and
	SH_MTINFO.
	(cygwin_shared_address): Define as DLL start address.
	* tty.h (tty_min::tty_min): Remove constructor.
@
text
@d52 1
a52 1
static char *offsets[] =
d54 7
a60 10
  (char *) cygwin_shared_address
    - pround (sizeof (user_info))
    - pround (sizeof (console_state))
    - pround (sizeof (_pinfo)),
  (char *) cygwin_shared_address
    - pround (sizeof (console_state))
    - pround (sizeof (_pinfo)),
  (char *) cygwin_shared_address
    - pround (sizeof (_pinfo)),
  (char *) cygwin_shared_address
d63 2
d77 1
a77 1
      addr = offsets[m];
d120 1
a120 1
      offsets[0] = NULL;
d128 2
a129 2
      unsigned delta = (char *) shared - offsets[0];
      offsets[0] = (char *) shared;
d134 1
a134 1
	  if (!VirtualAlloc (offsets[i], size, MEM_RESERVE, PAGE_NOACCESS))
a137 6

#if 0
      if (!child_proc_info && wincap.needs_memory_protection ())
	for (DWORD s = 0x950000; s <= 0xa40000; s += 0x1000)
	  VirtualAlloc ((void *) s, 4, MEM_RESERVE, PAGE_NOACCESS);
#endif
@


1.98
log
@	* cygheap.cc (cygheap_init): Add GLOBAL_PRIV to hProcToken explicitely
	since hProcImpToken isn't initialized here.
	* shared.cc (open_shared): Always print mapname instead of name in
	debug output.
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005
   Red Hat, Inc.
d32 1
a53 1
  (char *) cygwin_shared_address,
d55 3
a57 1
    + pround (sizeof (shared_info)),
d59 2
a60 2
    + pround (sizeof (shared_info))
    + pround (sizeof (user_info)),
d62 1
a62 3
    + pround (sizeof (shared_info))
    + pround (sizeof (user_info))
    + pround (sizeof (console_state)),
a63 10
    + pround (sizeof (shared_info))
    + pround (sizeof (user_info))
    + pround (sizeof (console_state))
    + pround (sizeof (_pinfo)),
  (char *) cygwin_shared_address
    + pround (sizeof (shared_info))
    + pround (sizeof (user_info))
    + pround (sizeof (console_state))
    + pround (sizeof (_pinfo))
    + pround (sizeof (mtinfo))
d127 1
a127 1
  if (m == SH_CYGWIN_SHARED && offsets[0] && wincap.needs_memory_protection ())
d131 1
a131 1
      for (int i = SH_CYGWIN_SHARED + 1; i < SH_TOTAL_SIZE; i++)
d237 1
a237 8
  /* Initialize general shared memory */
  shared_locations sh_cygwin_shared = SH_CYGWIN_SHARED;
  cygwin_shared = (shared_info *) open_shared ("shared",
					       CYGWIN_VERSION_SHARED_DATA,
					       cygheap->shared_h,
					       sizeof (*cygwin_shared),
					       sh_cygwin_shared);

a238 1
  ProtectHandleINH (cygheap->shared_h);
@


1.98.8.1
log
@	* dtable.cc (build_fh_pc): Add missing DEV_SD1_MAJOR case (Thanks to
	Joe Loh for noticing).

	* cygheap.h (struct user_heap_info): Add slop member.
	* heap.cc (heap_init): Add slop factor to heap allocation.  Add
	comment.
	* mmap.cc (MapViewNT): Allocate memory maps top down.
	(fhandler_dev_zero::mmap): Ditto.
	* shared.cc (shared_info::heap_slop_size): New method.
	(shared_info::heap_chunk_size): Don't use debug_printf at early stage.
	* shared_info.h (SHARED_INFO_CB): Accomodate change to shared_info.
	(CURR_SHARED_MAGIC): Ditto.
	(class shared_info): Add heap_slop member.  Declare heap_slop_size.
	* wincap.h: Define heapslop throughout.
	* wincap.cc: Ditto.
@
text
@a262 27
shared_info::heap_slop_size ()
{
  if (!heap_slop)
    {
      /* Fetch from registry, first user then local machine.  */
      for (int i = 0; i < 2; i++)
	{
	  reg_key reg (i, KEY_READ, NULL);

	  if ((heap_slop = reg.get_int ("heap_slop_in_mb", 0)))
	    break;
	  heap_slop = wincap.heapslop ();
	}

      if (heap_slop < 0)
	heap_slop = 0;
      else
	heap_slop <<= 20;
#ifdef DEBUGGING
      system_printf ("fixed heap slop is %p", heap_slop);
#endif
    }

  return heap_slop;
}

unsigned
d288 1
a288 3
#ifdef DEBUGGING
      system_printf ("fixed heap size is %u", heap_chunk);
#endif
@


1.98.8.2
log
@2007-01-13  Christopher Faylor  <me@@cgf.cx>

	* glob.cc: Update copyright notice with latest from FreeBSD.
	(glob0): Use correct type for c variable to propagate previously
	detected protection.

2007-01-12  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc (_csbrk): Fix off-by-one error.
	* cygwin.sc: Give .cygheap a minimum size of 512K.

2007-01-12  Corinna Vinschen  <corinna@@vinschen.de>

	* fork.cc (child_copy): Add missing Windows PID in debug output.

2007-01-12  Corinna Vinschen  <corinna@@vinschen.de>

	* syscalls.cc: Update copyright.

2007-01-10  Corinna Vinschen  <corinna@@vinschen.de>

	* mmap.cc (mmap64): Pre-Reserve space for the whole mapping to get a
	useful, valid address before the actual mappings take place.
	Fix typo in comment.

2007-01-10  Corinna Vinschen  <corinna@@vinschen.de>

	* syscalls.cc (sync): Use b_drive for B: drive (Thanks to Howard Chu).

2007-01-09  Corinna Vinschen  <corinna@@vinschen.de>

	* mmap.cc: Do bookkeeping in 4K pages, rather than in 64K chunks.

2007-01-01  Christopher Faylor  <me@@cgf.cx>

	* spawn.cc (spawn_guts): Don't expect synchronization from a non-cygwin
	_P_NOWAIT process.

2006-12-12  Christopher Faylor  <me@@cgf.cx>

	* syscalls.cc (popen): Allow '[rw][bt]'.

2006-12-11  Christopher Faylor  <me@@cgf.cx>

	* sigproc.cc (child_info::child_info): Move old comment about msv_count
	here.  Edit it slightly to reflect new sensibilities.

2006-12-11  Christopher Faylor  <me+cygwin@@cgf.cx>

	* child_info.h (child_info_spawn::__stdin): New element.
	(child_info_spawn::__stdin): Ditto.
	(CURR_CHILD_INFO_MAGIC): Regenerate.
	* dcrt0.cc (check_sanity_and_sync): Minor cleanup.
	(child_info_spawn::handle_spawn): Handle new __std* elements by calling
	move_fd.
	* dtable.cc (dtable::move_fd): Define new function.
	* dtable.h (dtable::move_fd): Declare new function.
	* fhandler.h (fhandler_pipe::popen_pid): Declare new element.
	* fhandler.h (fhandler_pipe::get_popen_pid): Define new function.
	* fhandler.h (fhandler_pipe::set_popen_pid): Ditto.
	* pipe.cc (fhandler_pipe::fhandler_pipe): Zero popen_pid.
	(fhandler_pipe::dup): Ditto.
	* spawn.cc (handle): Change second argument to bool.
	(spawn_guts): Accept __stdin/__stdout arguments and set them
	appropriately in child_info structure and in STARTUPINFO structure.
	* syscalls.cc (popen): New cygwin-specific implementation using spawn.
	(pclose): Ditto.
	* winsup.h (spawn_guts): Accommodate new arguments for spawn_guts.

	* fhandler.cc (fhandler_base::set_no_inheritance): Make second arg a bool.
	* fhandler.h (fhandler_base::set_no_inheritance): Ditto for declaration.

	* child_info.h (child_info::msv_count): Rename from the now-inappropriate
	"zero".
	(child_info_spawn::filler): Add filler to work around Vista bug.
	(child_info_fork::filler): Ditto.
	* dcrt0.cc (get_cygwin_startup_info): Remove "zero" check since it is
	now always filled out.
	* fork.cc (frok::parent): Move ch.zero manipulation to constructor.
	* spawn.cc (spawn_guts): Ditto.  Remove _ch wrapper.
	* sigproc.cc (child_info::child_info): Initialize starter[].

	* shared.cc (shared_info::heap_slop_size): Remove noisy system_printfs.
	* shared_info.h (CURR_SHARED_MAGIC): Regenerate.
@
text
@d281 3
d315 3
@


1.98.8.3
log
@2007-11-08  Christopher Faylor  <me+cygwin@@cgf.cx>

	* dllfixdbg: Eliminate extra objcopy step.

2007-11-07  Pedro Alves  <pedro_alves@@portugalmail.pt>

	* dllfixdbg: Pass --only-keep-debug to objcopy, instead of
	selecting the sections manually.

2007-11-06  Corinna Vinschen  <corinna@@vinschen.de>

	* thread.cc (pthread_key_create): Drop check for incoming valid object.

2007-11-06  Corinna Vinschen  <corinna@@vinschen.de>

	* shm.cc: Include sync.h
	(struct shm_shmid_list): Add ref_count member.
	(struct shm_attached_list): Remove hdl and size members.  Add a parent
	member pointing to referenced shm_shmid_list entry.
	(shm_guard): New muto.
	(SLIST_LOCK): Define.
	(SLIST_UNLOCK): Define.
	(fixup_shms_after_fork): Use hdl and size members of parent
	shm_shmid_list entry.
	(shmat): Access sequential bookkeeping lists in a thread safe way.
	Accommodate change in list element layout.  Align comments.
	(shmctl): Ditto.
	(shmdt): Ditto.
	(shmget): Ditto.

2007-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* shm.cc (shmctl): On IPC_RMID don't unmap views and don't close handle
	if the map is still referenced to emulate Linux and BSD behaviour.

2007-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* shm.cc (shmctl): On IPC_RMID also unmap all views on shared mem
	as well as connected shm_attached_list entry.

2007-10-30  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Don't remove
	write bits for directories with R/O attribute.
	(fhandler_base::fhaccess): Don't shortcircuit R/O attribute with W_OK
	scenarios for directories.

2007-09-26  Corinna Vinschen  <corinna@@vinschen.de>

	* termios.cc (setspeed): Support new baud rates introduced 2007-02-05.

2007-09-18  Corinna Vinschen  <corinna@@vinschen.de>

	* mmap.cc (fh_disk_file): Delete as global static variable and...
	(mmap64): ...define as local pointer to make mmap thread-safe.
	Accommodate throughout.  Only initialize fh_disk_file after file could
	be opened with GENERIC_EXECUTE access.

2007-09-06  Brian Dessent  <brian@@dessent.net>

	* include/sys/stdio.h (_flockfile): Don't try to lock a FILE
	that has the __SSTR flag set.
	(_ftrylockfile): Likewise.
	(_funlockfile): Likewise.

2007-08-24  Corinna Vinschen  <corinna@@vinschen.de>

	* syscalls.cc (open): Don't follow symlinks if O_EXCL is given.

2007-08-09  Ernie Coskrey  <Ernie.Coskrey@@steeleye.com>

	* gendef (sigbe): Reset "incyg" while the stack lock is active to avoid
	a potential race.

2007-08-01  Corinna Vinschen  <corinna@@vinschen.de>

	* localtime.cc (tzsetwall): Don't set TZ.

2007-07-17  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.cc (fhandler_base::fhaccess): Add check for R/O file system.

2007-07-14  Christopher Faylor  <me+cygwin@@cgf.cx>

	* init.cc (in_dllentry): Delete.
	(dll_entry): Remove assignment to deleted variable.
	* winsup.h (in_dllentry): Delete declaration.
	* exceptions.cc (inside_kernel): Use another method to see if we are in
	dll_entry phase.

2007-07-14  Christopher Faylor  <me+cygwin@@cgf.cx>

	* init.cc (in_dllentry): Make NO_COPY to avoid spurious false positives.

2007-07-09  Christopher Faylor  <me+cygwin@@cgf.cx>

	* dlfcn.cc (dlclose): Don't close handle returned from
	GetModuleHandle(NULL).

2007-07-06  Corinna Vinschen  <corinna@@vinschen.de>

	* times.cc (gettimeofday): Align definition to POSIX.

2007-07-04  Corinna Vinschen  <corinna@@vinschen.de>

	* times.cc: Define __timezonefunc__ before including time.h to protect
	definition of timezone function.

2007-07-04  Corinna Vinschen  <corinna@@vinschen.de>

	* include/cygwin/time.h: Switch to timezone variable by default.  Add
	comment.

2007-06-27  Corinna Vinschen  <corinna@@vinschen.de>

	* shared_info.h (SHARED_INFO_CB): Accommodate change to shared_info.
	(CURR_SHARED_MAGIC): Ditto.
	(class shared_info): Add heap_slop_inited member.
	* shared.cc (shared_info::heap_slop_size): Use heap_slop_inited to
	track initializing heap_slop since 0 is a valid value for heap_slop.
	Drop useless < 0 consideration.

2007-06-12  Christopher Faylor  <me+cygwin@@cgf.cx>

	* signal.cc (usleep): Use useconds_t for the type as per POSIX.

2007-06-12  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.cc (fhandler_base::fstat): Set pipe permission bits more
	correctly.

2007-05-29  Corinna Vinschen  <corinna@@vinschen.de>

	* dtable.cc (dtable::set_file_pointers_for_exec): Call SetFilePointer
	correctly for 64 bit file access.  Comment out functionality.
	* fhandler.cc (fhandler_base::open): Don't set append_mode.
	(fhandler_base::write): Check for O_APPEND instead of append_mode.
	Call SetFilePointer correctly for 64 bit file access.  Handle
	errors from SetFilePointer.
	* fhandler.h (class fhandler_base): Drop append_mode status flag.
	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Handle
	seeking correctly for 64 bit file access.

2007-05-21  Christian Franke <franke@@computer.org>

	* fhandler_floppy.cc (fhandler_dev_floppy::lseek): Don't invalidate
	devbuf if new position is within buffered range.

2007-05-21  Eric Blake  <ebb9@@byu.net>

	* include/search.h (hsearch_r): Provide declaration.

2007-05-21  Christian Franke <franke@@computer.org>
	     Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_floppy.cc (fhandler_dev_floppy::lseek): Set buf size to
	sector size.  Simplify non-sector aligned case.  Handle errors from
	raw_read.

2007-05-15  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_socket.cc (adjust_socket_file_mode): New inline function.
	(fhandler_socket::fchmod): Squeeze mode through adjust_socket_file_mode
	before using it.
	(fhandler_socket::bind): Ditto.

2007-04-18  Brian Dessent  <brian@@dessent.net>

	* cygwin.sc: Remove duplicated .debug_macinfo section.
	* dllfixdbg: Also copy DWARF-2 sections into .dbg file.

2007-04-06  Eric Blake  <ebb9@@byu.net>

	* include/stdint.h (WINT_MIN): Fix sign.

2007-04-04  Eric Blake  <ebb9@@byu.net>

	* include/stdint.h (WINT_MIN, WINT_MAX): Fix definition.

2007-03-28  Christopher Faylor  <me@@cgf.cx>

	* spawn.cc (spawn_guts): Start pure-windows processes in a suspended
	state to avoid potential DuplicateHandle problems.

2007-03-07  Christopher Faylor  <me@@cgf.cx>

	* signal.cc (handle_sigprocmask): Remove extraneous
	sig_dispatch_pending.

2007-02-26  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.cc (fhandler_base::fstat): Set all file times to arbitrary
	fixed value.

2007-02-20  Christopher Faylor  <me@@cgf.cx>

	* exceptions.cc (_cygtls::signal_exit): Only call myself.exit when when
	exit_state indicates that we've visited do_exit.
	* sync.h (lock_process::lock_process): Use renamed exit_state -
	ES_PROCESS_LOCKED.
	* winsup.h: Rename ES_MUTO_SET to ES_PROCESS_LOCKED.

2007-02-20  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_socket.cc (fhandler_socket::bind): Remove printing wrong
	errno in debug output.

2007-02-05  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_serial.cc (fhandler_serial::tcsetattr): Add support for
	baud rates up to 3000000 baud.  Add missing 128K and 256K cases.
	(fhandler_serial::tcgetattr): Ditto.
	* include/sys/termios.h: Add baud rate definitions from B460800 up to
	B3000000.

2007-01-04  Brian Ford  <Brian.Ford@@FlightSafety.com>
	     Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.h (PREFERRED_IO_BLKSIZE): Define as 64K.
	* fhandler.cc (fhandler_base::fstat): Set st_blksize to
	PREFERRED_IO_BLKSIZE.
	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Ditto.
	* fhandler_mailslot.cc (fhandler_mailslot::fstat): Ditto.
	* fhandler_raw.cc (fhandler_dev_raw::fstat): Ditto.

2006-11-08  Corinna Vinschen  <corinna@@vinschen.de>

	* security.cc (get_token_group_sidlist): Always add the local
	group to the token.

2006-07-14  Corinna Vinschen  <corinna@@vinschen.de>

	* security.cc (get_token_group_sidlist): Always add the interactive
	group to the token.  Create logon_id group SID by copying it from
	incoming group list.
@
text
@d265 1
a265 1
  if (!heap_slop_inited)
d276 5
a280 2
      heap_slop <<= 20;
      heap_slop_inited = true;
@


1.97
log
@* shared.cc (open_shared): Add crucial bit of debugging info.
@
text
@d92 3
d99 1
a99 5
      char *mapname;
      char map_buf[CYG_MAX_PATH];
      if (!name)
	mapname = NULL;
      else
d135 1
a135 1
    api_fatal ("MapViewOfFileEx '%s'(%p), %E.  Terminating.", name, shared_h);
d157 1
a157 1
  debug_printf ("name %s, n %d, shared %p (wanted %p), h %p", name, n, shared, addr, shared_h);
@


1.96
log
@Eliminate (void) cast on standalone function calls throughout.
@
text
@d158 1
a158 1
  debug_printf ("name %s, shared %p (wanted %p), h %p", name, shared, addr, shared_h);
@


1.95
log
@* shared.cc (user_shared_initialize): Rework locking so that nothing is checked
until cb is non-zero.
@
text
@d89 1
a89 1
      (void) VirtualFree (addr, 0, MEM_RELEASE);
@


1.94
log
@* environ.cc (spenv::force_into_environment): Rename from add_always.
(spenv::add_if_exists): Rename from force.
(build_env): Accommodate name changes.  Make sure that stuff that is always
supposed to be in the environment is actually added to the environment.
* shared.cc (open_shared): Restore VirtualFree eliminated by 2005-04-28 change.
@
text
@a191 1
      user_shared->version = USER_VERSION_MAGIC;
d193 2
a195 6
      if (user_shared->cb != sizeof (*user_shared))
	system_printf ("size of user shared region changed from %u to %u",
		       sizeof (*user_shared), user_shared->cb);
      user_shared->mountinfo.init ();	/* Initialize the mount table.  */
      /* Initialize the queue of deleted files.  */
      user_shared->delqueue.init ();
a196 4
  else if (user_shared->version != USER_VERSION_MAGIC)
    multiple_cygwin_problem ("user shared memory version", user_shared->version, USER_VERSION_MAGIC);
  else if (user_shared->cb != sizeof (*user_shared))
    multiple_cygwin_problem ("user shared memory size", user_shared->cb, sizeof (*user_shared));
d198 1
d201 5
@


1.93
log
@* shared_info.h (cygwin_shared_address): Bump to a higher value to avoid
collision with large data areas.
* fhandler_console.cc (fhandler_console::get_tty_stuff): Accommodate changes to
open_shared arguments.
* fhandler_tape.cc (mtinfo_init): Ditto.
* pinfo.cc (pinfo::init): Use open_shared rather than win32 mmap calls.
* shared.cc (user_shared_initialize): Ditto.
(memory_init): Ditto.
(open_shared): Change to allow use a smore general mmap handler.
* shared_info.h (shared_locations): Add SH_JUSTCREATE, SH_JUSTOPEN.
(open_shared): Change declaration to match new usage.
* autoload.cc (LoadDLLfuncEx2): Define in terms of LoadDLLfuncEx3.
(LoadDLLfuncEx3): New macro.
@
text
@d87 4
a90 1
    addr = offsets[m];
@


1.92
log
@* shared.cc (user_shared_initialize): Implement locking similar to shared_info
when initializing shared region.
@
text
@d78 1
a78 1
	     shared_locations m, PSECURITY_ATTRIBUTES psa)
d83 2
a84 1
  if (!wincap.needs_memory_protection () && offsets[0])
d87 1
a87 4
    {
      addr = offsets[m];
      (void) VirtualFree (addr, 0, MEM_RELEASE);
    }
d89 3
a91 4
  if (!size)
    return addr;

  if (!shared_h)
d99 12
a110 2
      if (!(shared_h = CreateFileMapping (INVALID_HANDLE_VALUE, psa,
					  PAGE_READWRITE, 0, size, mapname)))
d112 2
d117 1
a117 1
    MapViewOfFileEx (shared_h, FILE_MAP_READ | FILE_MAP_WRITE, 0, 0, 0, addr);
d119 1
a119 1
  if (!shared)
d124 1
a124 1
				       0, 0, 0, 0);
d177 1
d180 1
a180 1
					    SH_USER_SHARED, &sec_none);
d249 1
d254 1
a254 1
					       SH_CYGWIN_SHARED);
@


1.91
log
@* shared.cc (shared_info::initialize): Test previous version of shared memory
magic rather than current version when determining if there has been a shared
memory mismatch.
@
text
@d175 1
d177 1
a177 1
  if (!user_shared->version)
d193 3
@


1.90
log
@copyright
@
text
@d198 1
a198 6
  if (!sversion)
    {
      /* Initialize tty table.  */
      tty.init ();
    }
  else
d200 1
a200 1
      if (version != SHARED_VERSION_MAGIC)
a201 1
	  multiple_cygwin_problem ("system shared memory version", version, SHARED_VERSION_MAGIC);
d203 1
d212 4
a215 1
    cb = sizeof (*this);	// Do last, after all shared memory initializion
@


1.89
log
@* pinfo.h (pinfo::init): Make third parameter non-optional and propagate change
throughout.
* pinfo.cc (set_myself): Pass INVALID_HANDLE_POINTER if h is NULL.
(pinfo::init): Make third parameter non-optional.  Eliminate use of PID_EXECED
as an argument.  Put setting of handle back inside loop but reorganize to try
to open it only when necessary.
@
text
@d3 2
a4 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005 Red Hat, Inc.
@


1.88
log
@Reorganize header file inclusion throughout so that cygerrno.h comes first.
* fhandler.h (select_record::thread_errno): Save any encountered errno here.
(select_record::set_select_errno): New function.
(select_record::saw_error): New function.
(select_record::select_record): Initialize thread_errno to zero.
* select.cc (set_handle_or_return_if_not_open): Set thread_errno on failure.
(select_stuff::wait): Record errno for later resurrection in calling thread.
(peek_serial): Ditto.
@
text
@d76 1
a76 1
open_shared (const char *name, int n, HANDLE &shared_h, DWORD size,
@


1.87
log
@* dcrt0.cc (multiple_cygwin_problem): Reorganize error message to not always
talk about a "version" when it's not a version.
(dll_crt0_0): Change info passed to multiple_cygwin_problem to be a little more
precise.
* shared.cc (user_shared_initialize): Ditto.
(shared_info::initialize): Ditto.
@
text
@d17 1
a22 1
#include "cygerrno.h"
@


1.86
log
@Update copyrights.
@
text
@d188 1
a188 1
    multiple_cygwin_problem ("user", user_shared->version, USER_VERSION_MAGIC);
d190 1
a190 1
    multiple_cygwin_problem ("user shared size", user_shared->cb, sizeof (*user_shared));
d206 1
a206 1
	  multiple_cygwin_problem ("shared", version, SHARED_VERSION_MAGIC);
@


1.85
log
@* shared.cc (open_shared): Don't attempt VirtualAlloc magic if first attempt to
map memory fails.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Red Hat, Inc.
@


1.84
log
@2004-12-03  Pierre Humblet <pierre.humblet@@ieee.org>

	* registry.h (reg_key::reg_key): Change arguments.
	* shared_info.h (class mount_info): Remove had_to_create_mount_areas.
	* registry.cc (reg_key::reg_key): Change constructors to always handle
	HKLM and to avoid relying on HKCU.
	Do not set mount_table->had_to_create_mount_areas.
	* path.cc (mount_info::conv_to_win32_path): Improve update of
	sys_mount_table_counter.
	(mount_info::read_mounts): Use new reg_key constructor.
	(mount_info::add_reg_mount): Ditto.
	(mount_info::del_reg_mount): Ditto.
	(mount_info::read_cygdrive_info_from_registry): Ditto.
	(mount_info::write_cygdrive_info_to_registry): Ditto.
	Update cygwin_shared->sys_mount_table_counter after registry update.
	(mount_info::get_cygdrive_info): Ditto.
	* shared.cc (shared_info::heap_chunk_size): Use new reg_key constructor.
	* environ.cc (regopt): Ditto.
@
text
@d82 1
a82 1
  if (!wincap.needs_memory_protection ())
d119 1
d125 1
a125 1
  if (m == SH_CYGWIN_SHARED && wincap.needs_memory_protection ())
@


1.83
log
@2004-11-20  Pierre Humblet <pierre.humblet@@ieee.org>

	* cygheap.h (cygheap_user::get_windows_id): New method.
	* registry.h (get_registry_hive_path): Change argument type.
	(load_registry_hive): Ditto.
	* registry.cc (get_registry_hive_path): Change argument type and take
	Win9x keys into account.
	(load_registry_hive): Ditto.
	* uinfo.cc (cygheap_user::env_userprofile): Use get_windows_id, even
	for SYSTEM.
	* shared.cc (user_shared_initialize): Use get_windows_id.
	* syscalls.cc (seteuid32): Load the registry hive and reload the user
	shared also on Win9x.
@
text
@d253 4
a256 1
      /* Fetch misc. registry entries.  */
d258 4
a261 1
      reg_key reg (KEY_READ, NULL);
d263 4
a266 12
      /* Note that reserving a huge amount of heap space does not result in
      the use of swap since we are not committing it. */
      /* FIXME: We should not be restricted to a fixed size heap no matter
      what the fixed size is. */

      heap_chunk = reg.get_int ("heap_chunk_in_mb", 0);
      if (!heap_chunk) {
	reg_key r1 (HKEY_LOCAL_MACHINE, KEY_READ, "SOFTWARE",
		    CYGWIN_INFO_CYGNUS_REGISTRY_NAME,
		    CYGWIN_INFO_CYGWIN_REGISTRY_NAME, NULL);
	heap_chunk = r1.get_int ("heap_chunk_in_mb", 384);
      }
@


1.82
log
@* path.cc (chdir): Always use the normalized_path as posix_cwd, except if it
starts with a drive.

Also perform whitespace cleanup.
@
text
@d164 1
a164 9
    {
      if (wincap.has_security ())
	{
	  cygpsid tu (cygheap->user.sid ());
	  tu.string (name);
	}
      else
	strcpy (name, cygheap->user.name ());
    }
@


1.81
log
@	* errno.cc (errmap): Map ERROR_SHARING_VIOLATION to EBUSY,
	ERROR_EOM_OVERFLOW and ERROR_NO_DATA_DETECTED to EIO.  Add mappings
	for ERROR_NO_MEDIA_IN_DRIVE, ERROR_DEVICE_REQUIRES_CLEANING and
	ERROR_DEVICE_DOOR_OPEN.
	* fhandler.h (class fhandler_dev_raw): Drop varblkop member.
	(fhandler_dev_raw::is_eom): De-virtualize.
	(fhandler_dev_raw::is_eof): Ditto.
	(class fhandler_dev_tape): Drop lasterr and dp member.  Add mt_mtx
	member.  Drop all private methods formerly used by ioctl.
	(fhandler_dev_tape::is_rewind_device): Use get_minor for clarity.
	(fhandler_dev_tape::driveno): New method.
	(fhandler_dev_tape::drive_init): New method.
	(fhandler_dev_tape::clear): Remove method.
	(fhandler_dev_tape::is_eom): Ditto.
	(fhandler_dev_tape::is_eof): Ditto.
	(fhandler_dev_tape::write_file): Ditto.
	(fhandler_dev_tape::read_file): Ditto.
	(fhandler_dev_tape::_lock): New method.
	(fhandler_dev_tape::unlock): New method.
	(fhandler_dev_tape::raw_read): New method.
	(fhandler_dev_tape::raw_write): New method.
	* fhandler_raw.cc (fhandler_dev_raw::is_eom): New method.
	(fhandler_dev_raw::is_eof): New method.
	(fhandler_dev_raw::open): Allow setting write through option by
	using the O_TEXT flag as ... flag.
	(fhandler_dev_raw::writebuf): Remove usage of varblkop and other
	tape specific code.
	(fhandler_dev_raw::raw_read): Ditto.
	(fhandler_dev_raw::dup): Ditto.
	* fhandler_tape.cc: Rewrite tape operations entirely.  Implement
	new tape driver classes mtinfo, mtinfo_drive and mtinfo_part.
	Reduce fhandler_dev_tape methods to mostly just calling appropriate
	mtinfo_drive methods.
	(mtinfo_init): New function adding the mtinfo shared memory area.
	* mtinfo.h: New file, containing the definition of the new tape
	driver classes.
	* shared.cc: Include mtinfo.h.
	(offsets): Add entry for mtinfo shared memory area.
	(memory_init): Call mtinfo_init.
	* shared_info.h (shared_locations): Add SH_MTINFO shared location.
	* include/cygwin/mtio.h: Change and add various comments.  Add GMT_xxx
	macros for new generic flags.  Add MT_ST_xxx bitfield definitions
	for MTSETDRVBUFFER ioctl.
	* include/cygwin/version.h: Bump API minor version number.
@
text
@d100 1
a100 1
        mapname = shared_name (map_buf, name, n);
d166 1
a166 1
        {
@


1.80
log
@	* cygheap.cc (cygheap_init): Set cygheap->shared_prefix.
	* cygheap.h (struct init_cygheap): Add shared_prefix.
	* shared.cc (shared_name): Use cygheap->shared_prefix.
@
text
@d29 1
d66 5
d72 1
d253 1
@


1.79
log
@	* shared.cc (shared_name): Take into account the SE_CREATE_GLOBAL_NAME
	privilege when building the name string.
	(open_shared): Remove the call to OpenFileMapping.
	(shared_info::initialize): Move cygheap initialization to ...
	(memory_init): ... here. Suppress now useless shared_h variable.
	(user_shared_initialize): Make tu a cygpsid.
@
text
@a37 4
  static const char *prefix =
    wincap.has_terminal_services ()
    && (set_process_privilege (SE_CREATE_GLOBAL_NAME, true) >= 0
	|| GetLastError () == ERROR_NO_SUCH_PRIVILEGE) ? "Global\\" : "";
d39 1
a39 1
  __small_sprintf (ret_buf, "%s%s.%s.%d", prefix,
@


1.78
log
@2003-11-11  Robert Collins <rbtcollins@@hotmail.com>
	    Ron Parker <rdparker@@butlermfg.com>

	* bsdlib.cc: Update throughout to use CYG_MAX_PATH rather than MAX_PATH.
	* cygheap.h: Ditto.
	* dcrt0.cc: Ditto.
	* delqueue.cc: Ditto.
	* dlfcn.cc: Ditto.
	* dll_init.cc: Ditto.
	* dll_init.h: Ditto.
	* dtable.cc: Ditto.
	* environ.cc: Ditto.
	* environ.h: Ditto.
	* exceptions.cc: Ditto.
	* external.cc: Ditto.
	* fhandler_disk_file.cc: Ditto.
	* fhandler_proc.cc: Ditto.
	* fhandler_process.cc: Ditto.
	* fhandler_raw.cc: Ditto.
	* fhandler_registry.cc: Ditto.
	* fhandler_socket.cc: Ditto.
	* fhandler_virtual.cc: Ditto.
	* miscfuncs.cc: Ditto.
	* mmap.cc: Ditto.
	* netdb.cc: Ditto.
	* path.cc: Ditto.
	* path.h: Ditto.
	* pinfo.cc: Ditto.
	* pinfo.h: Ditto.
	* pthread.cc: Ditto.
	* registry.cc: Ditto.
	* shared.cc: Ditto.
	* shared_info.h: Ditto.
	* smallprint.c: Ditto.
	* spawn.cc: Ditto.
	* strace.cc: Ditto.
	* syscalls.cc: Ditto.
	* thread.h: Ditto.
	* uinfo.cc: Ditto.
	* winsup.h: Ditto.
	* include/limits.h: Ditto.
	* include/cygwin/config.h: Ditto.
	* include/sys/param.h: Ditto.
@
text
@d38 4
d43 1
a43 2
  __small_sprintf (ret_buf, "%s%s.%s.%d",
  		   wincap.has_terminal_services () ?  "Global\\" : "",
d97 2
a98 7
	{
	  mapname = shared_name (map_buf, name, n);
	  shared_h = OpenFileMappingA (FILE_MAP_READ | FILE_MAP_WRITE,
				       TRUE, mapname);
	}
      if (!shared_h &&
	  !(shared_h = CreateFileMapping (INVALID_HANDLE_VALUE, psa,
d100 1
a100 1
	api_fatal ("CreateFileMapping, %E.  Terminating.");
d164 1
a164 1
	  cygsid tu (cygheap->user.sid ());
a216 7
  /* Initialize the Cygwin heap, if necessary */
  if (!cygheap)
    {
      cygheap_init ();
      cygheap->user.init ();
    }

d232 7
a239 1
  HANDLE shared_h = cygheap ? cygheap->shared_h : NULL;
d242 1
a242 1
					       shared_h,
a246 1
  cygheap->shared_h = shared_h;
@


1.77
log
@* shared.cc (shared_info::initialize): Remove myself check since hMainProc
initialization will allow user initialization to work.
@
text
@d90 1
a90 1
      char map_buf[MAX_PATH];
@


1.76
log
@* dcrt0.cc (hMainProc): Initialize to useful value for use when dll is
dynamically loaded.
(shared_info::initialize): Don't initialize user stuff if myself doesn't exit.
@
text
@d223 1
a223 2
      if (myself)
	cygheap->user.init ();
@


1.75
log
@2003-09-24  Pierre Humblet <pierre.humblet@@ieee.org>

	* shared_info.h (class user_info): New.
	(cygwin_user_h): New.
	(user_shared): New.
	(enum shared_locations): Replace SH_MOUNT_TABLE by SH_USER_SHARED;
	(mount_table): Change from variable to macro.
	* shared.cc: Use sizeof(user_info) in "offsets".
	(user_shared_initialize): Add "reinit" argument to indicate need
	to reinitialize the mapping. Replace "mount_table" by "user_shared"
	throughout. Call user_shared->mountinfo.init and
	user_shared->delqueue.init.
	(shared_info::initialize): Do not call delqueue.init.
	(memory_init): Add argument to user_shared_initialize.
	* child_info.h (child_info::mount_h): Delete.
	(child_info::user_h): New.
	* sigpproc.cc (init_child_info): Use user_h instead of mount_h.
	* dcrt0.cc (_dll_crt0): Ditto.
	* fhandler_disk_file.cc (fhandler_disk_file::close): Use
	user_shared->delqueue instead of cygwin_shared->delqueue.
	* fhandler_virtual.cc (fhandler_virtual::close): Ditto.
	* syscalls.cc (close_all_files): Ditto.
	(unlink): Ditto.
	(seteuid32): Add argument to user_shared_initialize.
@
text
@d223 2
a224 1
      cygheap->user.init ();
@


1.74
log
@* devices.cc: New file.
* devices.gperf: New file.
* devices.shilka: New file.
* cygwin-gperf: New file.
* cygwin-shilka: New file.
* fhandler_fifo.cc: New file.
* fhandler_nodevice.cc : New file.  Reorganize headers so that path.h precedes
fhandler.h throughout.  Remove device argument and unit arguments from fhandler
constructors throughout.  Remove pc arguments to fhandler functions and use
internal pc element instead, throughout.  Use dev element in pc throughout.
Use major/minor elements rather than units and device numbers previously in
fhandler class.  Use correct methods for fhandler file names rather than
directly accessing file name variables, throughout.
* Makefile.in (DLL_OFILES): Add devices.o, fhandler_fifo.o
* dcrt0.cc (dll_crt0_1): Call device::init.
* devices.h: Renumber devices based on more Linux-like major/minor numbers.
Add more devices.  Declare standard device storage.
(device): Declare struct.
* dir.cc (opendir): Use new 'build_fh_name' to construct a fhandler_* type.
* dtable.cc (dtable::get_debugger_info): Ditto.
(cygwin_attach_handle_to_fd): Ditto.
(dtable::release): Remove special FH_SOCKET case in favor of generic
"need_fixup_before" test.
(dtable::init_std_file_from_handle): Use either build_fh_dev or build_fh_name
to build standard fhandler.
(dtable::build_fh_name): Renamed from dtable::build_fhandler_from_name.  Move
out of dtable class.  Don't accept a path_conv argument.  Just build it here
and pass it to:
(build_fh_pc): Renamed from dtable::build_fhandler.  Move out of dtable class.
Use intrinsic device type in path_conv to create new fhandler.
(build_fh_dev): Renamed from dtable::build_fhandler.  Move out of dtable class.
Simplify arguments to just take new 'device' type and a name.  Just return
pointer to fhandler rather than trying to insert into dtable.
(dtable::dup_worker): Accommodate above build_fh name changes.
(dtable::find_fifo): New (currently broken) function.
(handle_to_fn): Use strechr for efficiency.
* dtable.h: Reflect above build_fh name changes and argument differences.
(fhandler_base *&operator []): Return self rather than copy of self.
* fhandler.cc (fhandler_base::operator =): Use pc element to set normalized
path.
(fhandler_base::set_name): Ditto.
(fhandler_base::raw_read): Use method to access name.
(fhandler_base::write): Correctly use get_output_handle rather than get_handle.
(handler_base::device_access_denied): New function.
(fhandler_base::open): Eliminate pc argument and use pc element of
fhandler_base throughout.
(fhandler_base::fstat): Detect if device is based in filesystem and use
fstat_fs to calculate stat, if so.
(fhandler_base::fhandler_base): Eliminate handling of file names and, instead,
just free appropriate component from pc.
(fhandler_base::opendir): Remove path_conv parameter.
* fhandler.h: Remove all device flags.
(fhandler_base::pc): New element.
(fhandler_base::set_name): Change argument to path_conv.
(fhandler_base::error): New function.
(fhandler_base::exists): New function.
(fhandler_base::pc_binmode): New function.
(fhandler_base::dev): New function.
(fhandler_base::open_fs): New function.
(fhandler_base::fstat_fs): New function.
(fhandler_base::fstat_by_name): New function.
(fhandler_base::fstat_by_handle): New function.
(fhandler_base::isfifo): New function.
(fhandler_base::is_slow): New function.
(fhandler_base::is_auto_device): New function.
(fhandler_base::is_fs_special): New function.
(fhandler_base::device_access_denied): New function.
(fhandler_base::operator DWORD&): New operator.
(fhandler_base::get_name): Return normalized path from pc.
(fhandler_base::get_win32_name): Return windows path from pc.
(fhandler_base::isdevice): Renamed from is_device.
(fhandler_base::get_native_name): Return device format.
(fhandler_fifo): New class.
(fhandler_nodevice): New class.
(select_stuff::device_specific): Remove array.
(select_stuff::device_specific_pipe): New class element.
(select_stuff::device_specific_socket): New class element.
(select_stuff::device_specific_serial): New class element.
(select_stuff::select_stuff): Initialize new elements.
* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Move to base class
from fhandler_disk_file.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_disk_file::open): Move most functionality into
fhandler_base::open_fs.
(fhandler_base::open_fs): New function.
(fhandler_disk_file::close): Move most functionality into
fhandler_base::close_fs.
(fhandler_base::close_fs): New function.
* fhandler_mem.cc (fhandler_dev_mem::open): Use device name in debugging
output.
* fhandler_socket.cc (fhandler_socket::set_connect_secret): Copy standard
urandom device into appropriate place.
(fhandler_socket::accept): Reflect change in fdsock return value.
* fhandler_tty.cc: See "throughouts" above.
* net.cc: Accommodate fdsock change throughout.
(fdsock): Return success or failure, accept fd argument and device argument.
* path.cc (symlink_info::major): New element.
(symlink_info::minor): New element.
(symlink_info::parse_device): Declare new function.
(fs_info::update): Accommodate changes in path_conv class.
(path_conv::fillin): Ditto.
(path_conv::return_and_clear_normalized_path): Eliminate.
(path_conv::set_normalized_path): New function.
(path_conv::path_conv): Set info in dev element.  Use path_conv methods Check
for FH_FS rather than FH_BAD to indicate when to fill in filesystem stuff.
where appropriate rather than direct access.  Use set_normalized_path to set
normalized path.
(windows_device_names): Eliminate.
(get_dev): Ditto.
(get_raw_device_number): Ditto.
(get_device_number): Ditto.
(win32_device_name): Call new device name parser to do most of the heavy
lifting.
(mount_info::conv_to_win32_path): Fill in dev field as appropriate.
(symlink_worker): Handle new device files.
(symlink_info::check): Ditto.
(symlink_info::parse_device): Define new function.
* path.h (executable_states): Move here from fhandler.h.
(fs_info): Rename variables to *_storage and create methods for accessing same.
(path_conv): Add dev element, remove devn and unit and adjust inline methods to
accommodate.
(set_normalized_path): Declare new function.
* pinfo.cc (_pinfo::commune_recv): Add broken support for handling fifos.
(_pinfo::commune_send): Ditto.
* pipe.cc (fhandler_pipe::close): check for existence of handle before closing
it.
(handler_pipe::create): Rename from make_pipe.  Change arguments to accept
fhandler_pipe array.  Accommodate fifos.
(pipe): Rework to deal with fhandler_pipe::create changes.
(_pipe): Ditto.
* select.cc: Use individual device_specific types throughout rather than
indexing with obsolete device number.
(set_bits): Use is_socket call rather than checking device number.
* shared_info.h (CURR_MOUNT_MAGIC): Update.
(conv_to_win32_path): Reflect addition of device argument.
* syscalls.cc (mknod_worker): New function.
(open): Use build_fh_name to build fhandler.
(chown_worker): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(chmod_device): New function.
(chmod): Detect if this is an 'auto' device rather than an on-filesystem device
and handle appropriately.  Use chmod_device to set mode of in-filesystem
devices.
(stat_worker): Eliminate path_conv argument.  Call build_fh_name to construct
fhandler.  Use fh->error() rather than pc->error to detect errors in fhandler
construction.
(access_worker): New function pulled from access.  Accommodate in-filesystem
devices.
(access): Use access_worker.
(fpathconf): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(mknod_worker): New function.
(mknod32): New function.
(chroot): Free normalized path -- assuming it was actually cmalloced.
* tty.cc (create_tty_master): Tweak for new device class.
(tty::common_init): Ditto.
* winsup.h (stat_worker): Remove.
(symlink_worker): Declare.
* exceptions.cc (set_process_mask): Just call sig_dispatch_pending and don't
worry about pending_signals since sig_dispatch_pending should always do the
right thing now.
(sig_handle): Reorganize SIGCONT handling to more closely conform to SUSv3.
* pinfo.h: Move __SIG enum to sigproc.h.
(PICOM_FIFO): New enum element.
(_pinfo): Remove 'thread2signal' stuff throughout class.
(_pinfo::commune_send): Make varargs.
(_pinfo::sigtodo): Eliminate.
(_pinfo::thread2signal): Ditto.
* signal.cc (kill_worker): Eliminate call to setthread2signal.
* sigproc.cc (local_sigtodo): Eliminate.
(getlocal_sigtodo): Ditto.
(sigelem): New class.
(pending_signals): New class.
(sigqueue): New variable, start of sigqueue linked list.
(sigcatch_nonmain): Eliminate.
(sigcatch_main): Eliminate.
(sigcatch_nosync): Eliminate.
(sigcomplete_nonmain): Eliminate.
(pending_signals): Eliminate.
(sig_clear): Call signal thread to clear pending signals, unless already in
signal thread.
(sigpending): Call signal thread to get pending signals.
(sig_dispatch_pending): Eliminate use of pending_signals and just check
sigqueue.
(sigproc_terminate): Eliminate all of the obsolete semaphore stuff.  Close
signal pipe handle.
(sig_send): Eliminate all of the obsolete semaphore stuff and use pipe to send
signals.
(getevent): Eliminate.
(pending_signals::add): New function.
(pending_signals::del): New function.
(pending_signals::next): New function.
(wait_sig): Eliminate all of the obsolete semaphore stuff.  Use pipe to
communicate and maintain a linked list of signals.
* sigproc.h: Move __SIG defines here.  Add __SIGPENDING.
(sig_dispatch_pending): Remove "C" specifier.
(sig_handle): Accept a mask argument.
* thread.cc: Remove signal handling considerations throughout.
@
text
@d31 2
a32 2
mount_info NO_COPY *mount_table;
HANDLE NO_COPY cygwin_mount_h;
d57 1
a57 1
    + pround (sizeof (mount_info)),
d60 1
a60 1
    + pround (sizeof (mount_info))
d64 1
a64 1
    + pround (sizeof (mount_info))
d149 1
a149 1
user_shared_initialize ()
d151 1
a151 1
  char name[UNLEN + 1] = "";
d153 1
a153 1
  if (wincap.has_security ())
d155 5
a159 2
      cygsid tu (cygheap->user.sid ());
      tu.string (name);
a160 2
  else
    strcpy (name, cygheap->user.name ());
d162 1
a162 1
  if (cygwin_mount_h) /* Reinit */
d164 7
a170 5
      if (!UnmapViewOfFile (mount_table))
	debug_printf("UnmapViewOfFile %E");
      if (!ForceCloseHandle (cygwin_mount_h))
	debug_printf("CloseHandle %E");
      cygwin_mount_h = NULL;
d173 24
a196 23
  mount_table = (mount_info *) open_shared (name, MOUNT_VERSION,
					    cygwin_mount_h, sizeof (mount_info),
					    SH_MOUNT_TABLE, &sec_none);
  debug_printf ("opening mount table for '%s' at %p", name,
		mount_table);
  ProtectHandleINH (cygwin_mount_h);
  debug_printf ("mount table version %x at %p", mount_table->version, mount_table);

  /* Initialize the Cygwin per-user mount table, if necessary */
  if (!mount_table->version)
    {
      mount_table->version = MOUNT_VERSION_MAGIC;
      debug_printf ("initializing mount table");
      mount_table->cb = sizeof (*mount_table);
      if (mount_table->cb != MOUNT_INFO_CB)
	system_printf ("size of mount table region changed from %u to %u",
		       MOUNT_INFO_CB, mount_table->cb);
      mount_table->init ();	/* Initialize the mount table.  */
    }
  else if (mount_table->version != MOUNT_VERSION_MAGIC)
    multiple_cygwin_problem ("mount", mount_table->version, MOUNT_VERSION);
  else if (mount_table->cb !=  MOUNT_INFO_CB)
    multiple_cygwin_problem ("mount table size", mount_table->cb, MOUNT_INFO_CB);
a204 3
      /* Initialize the queue of deleted files.  */
      delqueue.init ();

d253 1
a253 1
  user_shared_initialize ();
@


1.73
log
@	* shared.cc (user_shared_initialize): Revert length attribute for name
	variable to be just UNLEN + 1.
@
text
@d19 1
a20 1
#include "path.h"
@


1.72
log
@* shared_info.h (shared_info::initialize): Remove argument.
* cygheap.h (cygheap_user::init): New declaration.
* uinfo.cc (cygheap_user::init): New.
(internal_getlogin): Move functionality to cygheap_user::init.  Open the
process token to update the group sid.
* shared.cc (user_shared_initialize): Get the user information from
cygheap->user.
(shared_info::initialize): Remove argument.  Call cygheap->user.init instead of
cygheap->user.set_name.
(memory_init): Do not get the user name and do not pass it to
shared_info::initialize.
* registry.cc (get_registry_hive_path): Make csid a cygpsid.
(load_registry_hive): Ditto.
@
text
@d151 1
a151 1
  char name[UNLEN > 127 ? UNLEN + 1 : 128] = "";
@


1.71
log
@2003-09-09  Pierre Humblet <pierre.humblet@@ieee.org>

	* shared_info.h: Include security.h.
	(open_shared): Add psa argument.
	(user_shared_initialize): New declaration.
	* security.h: Add _SECURITY_H guard.
	(sec_user): Use sec_none in the no ntsec case.
	* spawn.cc (spawn_guts): Remove call to load_registry_hive.
	* syscalls (seteuid32): If warranted, call load_registry_hive,
	user_shared_initialize and RegCloseKey(HKEY_CURRENT_USER).
	* shared.cc (user_shared_initialize): New.
	(open_shared): Add and use psa argument.
	(memory_init): Move mount table initialization to
	user_shared_initialize. Call it.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
d70 1
a70 1
open_shared (const char *name, int n, HANDLE &shared_h, DWORD size, 
d148 1
a148 1
void 
d151 2
a152 3
  char name[UNLEN + 1] = "";
  
  /* Temporary code. Will be cleaned up later */ 
d155 1
a155 18
      HANDLE ptok = NULL;
      DWORD siz;
      cygsid tu;
      
      if (cygwin_mount_h) /* Reinit */
	tu = cygheap->user.sid ();
      else
        {  
	  if (!OpenProcessToken (hMainProc, TOKEN_ADJUST_DEFAULT | TOKEN_QUERY,
				 &ptok))
	    system_printf ("OpenProcessToken(): %E");
	  else if (!GetTokenInformation (ptok, TokenUser, &tu, sizeof tu, &siz))
	    system_printf ("GetTokenInformation (TokenUser): %E");
	  else
	    tu.string (name);
	  if (ptok)
	    CloseHandle (ptok);
	}
d161 1
a161 1
  if (cygwin_mount_h)
d169 1
a169 1
  
d196 1
a196 1
shared_info::initialize (const char *user_name)
d222 1
a222 1
      cygheap->user.set_name (user_name);
a239 6
  char user_name[UNLEN + 1];
  DWORD user_name_len = UNLEN + 1;

  if (!GetUserName (user_name, &user_name_len))
    strcpy (user_name, "unknown");

d248 1
a248 2
  cygwin_shared->initialize (user_name);

@


1.70
log
@* exceptions.cc (set_process_mask): Set pending signals only when signals
become unmasked.
* sigproc.cc (pending_signals): Flip back to a global.
(wait_sig): Don't set pending signals when there is an armed semaphore or
signal is blocked.
* shared.cc (shared_info::initialize): Add a username parameter for user-mode
mounts.  Reorganize to try to avoid startup race.
(memory_init): Move some stuff into shared_info::initialize.
* shared_info.h (shared_info::initialize): Change declaration.
(CURR_SHARED_MAGIC): Update.
@
text
@d70 2
a71 1
open_shared (const char *name, int n, HANDLE &shared_h, DWORD size, shared_locations m)
d100 1
a100 1
	  !(shared_h = CreateFileMapping (INVALID_HANDLE_VALUE, &sec_all,
d148 65
d277 1
a277 25
  /* Allocate memory for the per-user mount table */
  mount_table = (mount_info *) open_shared (user_name, MOUNT_VERSION,
					    cygwin_mount_h, sizeof (mount_info),
					    SH_MOUNT_TABLE);
  debug_printf ("opening mount table for '%s' at %p", cygheap->user.name (),
		mount_table);
  ProtectHandleINH (cygwin_mount_h);
  debug_printf ("mount table version %x at %p", mount_table->version, mount_table);

  /* Initialize the Cygwin per-user mount table, if necessary */
  if (!mount_table->version)
    {
      mount_table->version = MOUNT_VERSION_MAGIC;
      debug_printf ("initializing mount table");
      mount_table->cb = sizeof (*mount_table);
      if (mount_table->cb != MOUNT_INFO_CB)
	system_printf ("size of mount table region changed from %u to %u",
		       MOUNT_INFO_CB, mount_table->cb);
      mount_table->init ();	/* Initialize the mount table.  */
    }
  else if (mount_table->version != MOUNT_VERSION_MAGIC)
    multiple_cygwin_problem ("mount", mount_table->version, MOUNT_VERSION);
  else if (mount_table->cb !=  MOUNT_INFO_CB)
    multiple_cygwin_problem ("mount table size", mount_table->cb, MOUNT_INFO_CB);

@


1.69
log
@Throughout, remove "include <errno.h>" from files which already include
cygerrno.h.
* include/cygwin/config.h (__DYNAMIC_REENT__): Define.
* include/cygwin/version.h: Bump API minor version.
* cygwin.din: Export __getreent
* cygerrno.h: Include errno.h.  Fix places where _impure_ptr is used directly
to store the errno value.
* debug.cc (__set_errno): Ditto.
* errno.cc: Remove _RRENT_ONLY define to get errno.cc compiled.
* signal.cc: Rename _reent_clib to _REENT throughout.
* thread.h (reent_clib): Remove prototype.
* thread.cc (reent_clib): Rename reent_clib to __getreent.  Return _impure_ptr
until MTinterface is initialized.
(reent_winsup): Fix a possible SEGV when _r == NULL.  Return NULL instead.
* MTinterface::fixup_after_fork: Switch reent back to _impure_ptr to keep
signal handling running when fork is called from a thread other than the
mainthread.
@
text
@d148 1
a148 1
shared_info::initialize ()
d150 10
a159 1
  if (version)
d162 13
a174 4
	multiple_cygwin_problem ("shared", version, SHARED_VERSION_MAGIC);
      else if (cb != SHARED_INFO_CB)
	multiple_cygwin_problem ("shared size", cb, SHARED_INFO_CB);
      return;
d177 4
a180 2
  /* Initialize the queue of deleted files.  */
  delqueue.init ();
a181 4
  /* Initialize tty table.  */
  tty.init ();
  version = SHARED_VERSION_MAGIC;
  cb = sizeof (*this);
d191 7
d206 1
a206 15
  cygwin_shared->initialize ();

  /* Allocate memory for the per-user mount table */
  char user_name[UNLEN + 1];
  DWORD user_name_len = UNLEN + 1;

  if (!GetUserName (user_name, &user_name_len))
    strcpy (user_name, "unknown");

  /* Initialize the Cygwin heap, if necessary */
  if (!cygheap)
    {
      cygheap_init ();
      cygheap->user.set_name (user_name);
    }
d211 1
a211 2
  heap_init ();

@


1.68
log
@* shared.cc (shared_info::heap_chunk_size): Be really defensive about making
sure that heap_chunk is set.
@
text
@a16 1
#include <errno.h>
@


1.67
log
@	* shared_info.h: Match shared_name declaration with below change.
	* shared.cc (shared_name): Use incoming char * parameter instead of
	local static buffer.
	(open_shared): Accomodate new calling convention for shared_name.
	* exceptions.cc (events_init): Ditto.
	* sigproc.cc (getsem): Ditto.
	* syscalls.cc (login): Ditto.
	(logout): Ditto.
	(pututline): Ditto.
@
text
@d257 2
@


1.66
log
@	* fhandler_socket.cc (SECRET_EVENT_NAME): Remove.
	(ENTROPY_SOURCE_NAME): Ditto.
	(secret_event_name): New static function.  Create shared event name
	with "Global\" prefix on systems supporting terminal services.
	(fhandler_socket::set_connect_secret): Fix conditional.
	(fhandler_socket::create_secret_event): Create secret event using
	secret_event_name().
	(fhandler_socket::close_secret_event): Ditto.
	* shared.cc (shared_name): Create shared object name with "Global\"
	prefix on systems supporting terminal services.
	* wincap.cc: Set has_terminal_services capability throughout.
	(wincap_2003): New global object representing Windows 2003 Server
	capabilities.
	(wincapc::init): Accomodate Windows 2003 Server.
	* wincap.h (struct wincaps): Add has_terminal_services capability.
@
text
@d36 1
a36 1
shared_name (const char *str, int num)
a37 1
  static NO_COPY char buf[MAX_PATH] = {0};
d40 1
a40 1
  __small_sprintf (buf, "%s%s.%s.%d",
d44 2
a45 2
    strcat (buf, cygwin_version.dll_build_date);
  return buf;
d90 1
d95 1
a95 1
	  mapname = shared_name (name, n);
@


1.65
log
@* shared.cc (shared_info::heap_chunk_size): Use correct variable when reading
HKLM.
@
text
@d41 3
a43 1
  __small_sprintf (buf, "%s.%s.%d", cygwin_version.shared_id, str, num);
@


1.64
log
@space
@
text
@d248 1
a248 1
	heap_chunk = reg.get_int ("heap_chunk_in_mb", 384);
@


1.64.10.1
log
@merge from trunk
@
text
@d248 1
a248 1
	heap_chunk = r1.get_int ("heap_chunk_in_mb", 384);
@


1.64.10.2
log
@merge from trunk.
Reorganize includes throughout so that path.h comes before fhandler.h.
Eliminate path_conv arguments from fhandler functions which take them,
throughout.  Use get_name() and get_win32_name() consistently throughout for
fhandler objects.  Use build_fh_* functions throughout, where appropriate.
* fhandler.h (fhandler_base): Store path_conv struct here.  Remove dev.
* dtable.h (dtable::build_fhandler_*): Remove.
(build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* dtable.cc (build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* fhandler.h (fhandler_base::set_name): Change argument.
* fhandler.cc (fhandler_base::set_name): Just accept a path_conv argument.
(executable_states): Move.
* path.h (executable_state): Accept.
* syscalls.cc (stat_worker): Make static.
* winsup.h (stat_worker): Remove definition.
@
text
@d20 1
a21 1
#include "fhandler.h"
@


1.64.10.3
log
@merge from trunk
@
text
@d36 1
a36 1
shared_name (char *ret_buf, const char *str, int num)
d38 1
d41 1
a41 3
  __small_sprintf (ret_buf, "%s%s.%s.%d",
  		   wincap.has_terminal_services () ?  "Global\\" : "",
		   cygwin_version.shared_id, str, num);
d43 2
a44 2
    strcat (ret_buf, cygwin_version.dll_build_date);
  return ret_buf;
a88 1
      char map_buf[MAX_PATH];
d93 1
a93 1
	  mapname = shared_name (map_buf, name, n);
@


1.64.10.4
log
@merge from trunk
@
text
@a256 2
      if (!heap_chunk)
	heap_chunk = 384 * 1024 * 1024;
@


1.64.10.5
log
@merge from trunk
@
text
@d17 1
@


1.64.10.6
log
@merge from trunk
@
text
@d148 1
a148 1
shared_info::initialize (const char *user_name)
d150 1
a150 10
  DWORD sversion = (DWORD) InterlockedExchange ((LONG *) &version, SHARED_VERSION_MAGIC);
  if (!sversion)
    {
      /* Initialize the queue of deleted files.  */
      delqueue.init ();

      /* Initialize tty table.  */
      tty.init ();
    }
  else
d153 4
a156 13
	{
	  multiple_cygwin_problem ("shared", version, SHARED_VERSION_MAGIC);
	  InterlockedExchange ((LONG *) &version, sversion);
	}
      while (!cb)
	low_priority_sleep (0);	// Should be hit only very very rarely
    }

  /* Initialize the Cygwin heap, if necessary */
  if (!cygheap)
    {
      cygheap_init ();
      cygheap->user.set_name (user_name);
d159 2
a160 4
  heap_init ();

  if (!sversion)
    cb = sizeof (*this);	// Do last, after all shared memory initializion
d162 4
a174 7

  char user_name[UNLEN + 1];
  DWORD user_name_len = UNLEN + 1;

  if (!GetUserName (user_name, &user_name_len))
    strcpy (user_name, "unknown");

d183 15
a197 1
  cygwin_shared->initialize (user_name);
d202 2
a203 1
  /* Allocate memory for the per-user mount table */
@


1.64.10.7
log
@merge from trunk
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Red Hat, Inc.
d70 1
a70 2
open_shared (const char *name, int n, HANDLE &shared_h, DWORD size,
	     shared_locations m, PSECURITY_ATTRIBUTES psa)
d99 1
a99 1
	  !(shared_h = CreateFileMapping (INVALID_HANDLE_VALUE, psa,
d148 1
a148 48
user_shared_initialize ()
{
  char name[UNLEN > 127 ? UNLEN + 1 : 128] = "";

  if (wincap.has_security ())
    {
      cygsid tu (cygheap->user.sid ());
      tu.string (name);
    }
  else
    strcpy (name, cygheap->user.name ());

  if (cygwin_mount_h) /* Reinit */
    {
      if (!UnmapViewOfFile (mount_table))
	debug_printf("UnmapViewOfFile %E");
      if (!ForceCloseHandle (cygwin_mount_h))
	debug_printf("CloseHandle %E");
      cygwin_mount_h = NULL;
    }

  mount_table = (mount_info *) open_shared (name, MOUNT_VERSION,
					    cygwin_mount_h, sizeof (mount_info),
					    SH_MOUNT_TABLE, &sec_none);
  debug_printf ("opening mount table for '%s' at %p", name,
		mount_table);
  ProtectHandleINH (cygwin_mount_h);
  debug_printf ("mount table version %x at %p", mount_table->version, mount_table);

  /* Initialize the Cygwin per-user mount table, if necessary */
  if (!mount_table->version)
    {
      mount_table->version = MOUNT_VERSION_MAGIC;
      debug_printf ("initializing mount table");
      mount_table->cb = sizeof (*mount_table);
      if (mount_table->cb != MOUNT_INFO_CB)
	system_printf ("size of mount table region changed from %u to %u",
		       MOUNT_INFO_CB, mount_table->cb);
      mount_table->init ();	/* Initialize the mount table.  */
    }
  else if (mount_table->version != MOUNT_VERSION_MAGIC)
    multiple_cygwin_problem ("mount", mount_table->version, MOUNT_VERSION);
  else if (mount_table->cb !=  MOUNT_INFO_CB)
    multiple_cygwin_problem ("mount table size", mount_table->cb, MOUNT_INFO_CB);
}

void
shared_info::initialize ()
d174 1
a174 1
      cygheap->user.init ();
d192 6
d206 2
a207 1
  cygwin_shared->initialize ();
d211 25
a235 1
  user_shared_initialize ();
@


1.64.10.8
log
@merge from trunk
@
text
@d151 1
a151 1
  char name[UNLEN + 1] = "";
@


1.63
log
@* shared.cc (shared_info::initialize): Use correct value for version
comparison.
* include/cygwin/version.h (CYGWIN_VERSION_MAGIC): Use all of a DWORD for magic
calculation.
@
text
@d248 1
a248 1
        heap_chunk = reg.get_int ("heap_chunk_in_mb", 384);
@


1.62
log
@* cygheap.cc (cygheap_fixup_in_child): Use user_heap element in cygheap.
(init_cheap): Ditto for declaration.
* fork.cc (fork_parent): Use user_heap element in cygheap.
* heap.h (inheap): Ditto.
* heap.cc (sbrk): Ditto.
(heap_init): Ditto.  Reorganize to shrink heap chunk as required and record new
value in cygheap.
* dcrt0.cc (dll_crt0_1): More "move the cygthread init" games.
* shared.cc (open_shared): Rework memory protection to properly deal with
relocated shared segment.
(shared_info::heap_chunk_size): Rename element to 'heap_chunk'.
* shared_info.h (shared_info): Ditto for declaration.
* strace.cc (strace::hello): Report on heap chunk size from cygheap since it
may shrink.
@
text
@d152 1
a152 1
	multiple_cygwin_problem ("shared", version, SHARED_VERSION);
@


1.61
log
@Change _function() to function() throughout.
* cygwin.din: Remove last vestiges (?) of newlib wrappers.
* cygthread.cc (cygthread::detach): Always wait for event or suffer an
apparently inavoidable race.
* dcrt0.cc (dll_crt0_1): Allocate threads after stack has been relocated.
* debub.cc (lock_debug): Don't acquire lock on exit.
* fork.cc (fork_child): Recreate mmaps before doing anything else since Windows
has a habit of using blocks of memory in the child that could previously have
been occupied by shared memory in the parent.
* mmap.cc (fhandler_disk_file::fixup_mmap_after_fork): Issue error here and
provide some details about what went wrong.
(fixup_mmaps_after_fork): Remove error message.
* shared.cc (open_shared): Move warning message so that more detail is
possible.
* sigproc.cc (sigproc_init): Initialize sync_proc_subproc to avoid a race.
(sigproc_terminate): Specifically wait for process thread to terminate.
@
text
@d50 19
a72 18
  static char *offsets[] =
  {
    (char *) cygwin_shared_address,
    (char *) cygwin_shared_address
      + pround (sizeof (shared_info)),
    (char *) cygwin_shared_address
      + pround (sizeof (shared_info))
      + pround (sizeof (mount_info)),
    (char *) cygwin_shared_address
      + pround (sizeof (shared_info))
      + pround (sizeof (mount_info))
      + pround (sizeof (console_state)),
    (char *) cygwin_shared_address
      + pround (sizeof (shared_info))
      + pround (sizeof (mount_info))
      + pround (sizeof (console_state))
      + pround (sizeof (_pinfo))
  };
d121 1
a121 1
  if (m == SH_CYGWIN_SHARED)
d123 2
d127 3
a129 3
	  offsets[i] += (char *) shared - offsets[0];
	  if (!VirtualAlloc (offsets[i], offsets[i + 1] - offsets[i],
			     MEM_RESERVE, PAGE_NOACCESS))
a130 1
	  offsets[0] = (char *) shared;
d132 1
a142 3
  /* FIXME: I couldn't find anywhere in the documentation a note about
     whether the memory is initialized to zero.  The code assumes it does
     and since this part seems to be working, we'll leave it as is.  */
d232 1
a232 1
  if (!initial_heap_size)
d243 2
a244 2
      initial_heap_size = reg.get_int ("heap_chunk_in_mb", 0);
      if (!initial_heap_size) {
d248 1
a248 1
        initial_heap_size = reg.get_int ("heap_chunk_in_mb", 384);
d251 2
a252 2
      if (initial_heap_size < 4)
	initial_heap_size = 4 * 1024 * 1024;
d254 2
a255 2
	initial_heap_size <<= 20;
      debug_printf ("fixed heap size is %u", initial_heap_size);
d258 1
a258 1
  return initial_heap_size;
@


1.60
log
@Rename _kill() to kill() throughout.  Rename _raise() to raise() throughout.
Rename _pid() to pid() throughout.
* Makefile.in: Compile some objects with -fomit-frame-pointer.
* cygwin.din: Reverse aliasing for _kill.
* syscalls.cc (_getpid_r): New function, implemented for newlib compatibility.
* shared.cc (open_shared): Remove reserving of memory since previous change
eliminate the need for this hack.
@
text
@a106 4
#ifdef DEBUGGING
      if (wincap.is_winnt ())
	system_printf ("relocating shared object %s(%d) on Windows NT", name, n);
#endif
d111 4
@


1.59
log
@* dcrt0.cc (dll_crt0_1): Initialize cygwin threads here only when not forking.
* fork.cc (fork_child): Initialize cygwin thread later in process to avoid
allocating memory for thread stacks.
* shared.cc (open_shared): Issue warning if NT and shared segment is relocated.
@
text
@d131 1
d135 1
a231 1
  unsigned val;
@


1.58
log
@* fork.cc (fork_child): Move mmap initialization.
* shared.cc (shared_info::heap_chunk_size): Store info as megabytes.  Search
HKEY_LOCAL_MACHINE as well as HKEY_CURRENT_USER.
* shared_info.h (shared_info::initial_heap_size): Change element name to
reflect new functionality.
* strace.cc (strace::hello): Report on initial heap size.
@
text
@d107 4
@


1.57
log
@* shared.cc (open_shared): Revert to "old" method for shared memory location if
!wincap.needs_memory_protection.
* wincap.cc: Implement needs_memory_protection throughout.
* wincap.h: Ditto.
@
text
@d226 2
a227 1
  if (!heap_chunk_in_mb)
d238 13
a250 6
      heap_chunk_in_mb = reg.get_int ("heap_chunk_in_mb", 256);
      if (heap_chunk_in_mb < 4)
	{
	  heap_chunk_in_mb = 4;
	  reg.set_int ("heap_chunk_in_mb", heap_chunk_in_mb);
	}
d253 1
a253 1
  return heap_chunk_in_mb << 20;
@


1.56
log
@* child_info.h (CURR_CHILD_INFO_MAGIC): Reset.
(child_info_fork::mount_table): Remove.
(child_info_fork::myself_addr): Remove.
* fork.cc (fork_child): Don't set either of the above.
* dcrt0.cc (dll_crt0_1): Call memory_init as early as possible.
* fhandler_console.cc (console_state): Move to shared_info.h.
(fhandler_console::get_tty_stuff): Reflect open_shared arg change.
* pinfo.cc (myself_addr): Remove definition.
(pinfo::init): Get myself address from open_shared.
* pinfo.h (myself_addr): Remove declaration.
* shared.cc (open_shared): Rework so that known shared memory locations are
protected.  Take shared memory type as fifth argument.
(memory_init): Reflect open_shared arg change.
* shared_info.h (shared_locations): New enum.
(console_state): Move here.
(open_shared): Reflect open_shared arg change in declaration.
@
text
@d73 4
a76 1
  if (m == SH_CYGWIN_SHARED)
d78 2
a79 7
      for (int i = SH_CYGWIN_SHARED; i < SH_TOTAL_SIZE; i++)
	if (!VirtualAlloc (offsets[i], offsets[i + 1] - offsets[i],
			   MEM_RESERVE, PAGE_NOACCESS))
	  continue;  /* oh well */
      if (!child_proc_info)
	for (DWORD s = 0x950000; s <= 0xa40000; s += 0x1000)
	  VirtualAlloc ((void *) s, 4, MEM_RESERVE, PAGE_NOACCESS);
a81 3
  void *addr = offsets[m];
  (void) VirtualFree (addr, 0, MEM_RELEASE);

d115 16
@


1.55
log
@* child_info.h (CURR_CHILD_INFO_MAGIC): Reset.
(child_info_fork::heaptop): Remove obsolete element.
(child_info_fork::heabbase): Ditto.
(child_info_fork::heapptr): Ditto.
(child_info_fork::mount_table): New element.
(child_info_fork::myself_addr): Ditto.
* dcrt0.cc (dll_crt0_1): Set mount_table and myself_addr when forking.
(initial_env): Add newline to "sleeping" message.
* dll_init.cc (reserve_upto): Accommodate cygwin heap when freeing memory.
Make debugging output a little more descriptive.
* fork.cc (fork_parent): Save mount_table and myself_addr.
* pinfo.cc (myself_addr): New variable.
(set_myself): Pass PID_MYSELF flag to init.
(pinfo::Init): Honor PID_MYSELF.  Save address where myself shared memory
resides in myself_addr, for fork.
* pinfo.h (myself_addr): Declare.
* shared.cc (memory_init): On fork, use previously saved address for location
of mount table.
* include/sys/cygwin.h (PID_MYSELF): New value.
* dtable.cc (dtable::stdio_init): Don't pass access type to
init_std_file_from_handle.  It's always the same.
(dtable::init_std_file_from_handle): Remove access type argument.  Assume
read/write.
* dtable.h (dtable::init_std_file_from_handle): Ditto for declaration.
* exceptions.cc (try_to_debug): Don't try to debug if already being debugged.
* fhandler_console.cc (shared_console_info_save): New variable.
(fhandler_console::get_tty_stuff): Save address of shared console stuff for
fork.
@
text
@d29 1
d47 3
d51 1
a51 1
open_shared (const char *name, int n, HANDLE &shared_h, DWORD size, void *addr)
d54 35
d107 2
a108 3
  shared = (shared_info *) MapViewOfFileEx (shared_h,
				       FILE_MAP_READ | FILE_MAP_WRITE,
				       0, 0, 0, addr);
d156 1
d163 1
a163 1
					       cygwin_shared_address);
a183 1
  getpagesize ();
d185 1
d188 1
a188 1
					    mount_table);
d190 1
a190 1
		mount_table_address);
@


1.54
log
@* cygthread.cc (cygthread::stub): Don't create event for long-running threads.
Initialize thread_sync event here which is used to Suspend using an event
rather than relying on SuspendThread/ResumeThread.
(cygthread::init): Save handle to runner thread for future termination.
(cygthread::cygthread): Only resume thread when it is actually suspended.
Otherwise signal thread completion event.
(cygthread::terminate): Forcibly terminate runner thread and any helper
threads.  Call DisableThreadLibrary calls if execing.
* cygthread.h (cygthread::thread_sync): Declare.
* dcrt0.cc (do_exit): Eliminate calls to obsolete window_terminate and
shared_terminate.
* exceptions.cc (events_terminate): Don't bother closing title_mutex since it
is going away anyway.
* pinfo.cc (_pinfo::exit): Call cygthread::terminate to ensure that threads are
shut down before process exit or otherwise strange races seem to occur.
* shared.cc (shared_terminate): Eliminate.
* shared.h (shared_terminate): Eliminate declaration.
* winsup.h (window_terminate): Eliminate declaration.
* spawn.cc (spawn_guts): Call cygthread::terminate early in process if execing.
Call DisableThreadLibrary calls if execing.
* window.cc (Winmain): Call ExitThread to force exit.
(window_terminate): Eliminate.
* dcrt0.cc (do_exit): Track exit state more closely.
@
text
@d30 2
a31 2
shared_info NO_COPY *cygwin_shared = NULL;
mount_info NO_COPY *mount_table = NULL;
d148 2
a149 2
					    cygwin_mount_h,
					    sizeof (mount_info), 0);
@


1.53
log
@Cleanup calls to CreateFile throughout.
* dcrt0.cc (__api_fatal): Correctly check for failing return from CreateFile.
* assert.cc (__assert): Don't check return value from CreateFile for NULL.
* fhandler_console.cc (set_console_state_for_spawn): Ditto.
* fork.cc (fork_parent): Ditto.
@
text
@a172 9
void __stdcall
shared_terminate ()
{
  if (cygheap->shared_h)
    ForceCloseHandle (cygheap->shared_h);
  if (cygwin_mount_h)
    ForceCloseHandle (cygwin_mount_h);
}

@


1.52
log
@* dcrt0.cc (dll_crt0_1): Remove getpagesize() call.
* shared.cc (memory_init): Move it here.
@
text
@d63 3
a65 7
	  !(shared_h = CreateFileMappingA (INVALID_HANDLE_VALUE,
					   &sec_all,
					   PAGE_READWRITE,
					   0,
					   size,
					   mapname)))
	api_fatal ("CreateFileMappingA, %E.  Terminating.");
@


1.51
log
@* Makefile.in (cygcheck.exe): Make a -mno-cygwin program.
* cygrun.c (main): Export CYGWIN=ntsec unless otherwise set.
* shared.cc (shared_name): Only add build date to shared name when
*testing*.
@
text
@d149 1
@


1.50
log
@Conrad Scott <conrad.scott@@dsl.pipex.com
* cygheap.cc (_csbrk): Allocate some slop initially.  Don't erroneously add
sbrk amount to returned value in initial case.
@
text
@d41 1
a41 1
  if (!_cygwin_testing)
@


1.49
log
@* dcrt0.cc (dll_crt0_1): Move debug_init call back to here.  Avoid a compiler
warning.
* shared.cc (memory_init): Remove debug_init call.
* debug.h (handle_list): Change "clexec" to "inherited".
* debug.cc: Remove a spurious declaration.
(setclexec): Conditionalize away since it is currently unused.
(add_handle): Use inherited field rather than clexec.
(debug_fixup_after_fork_exec): Ditto.  Move debugging output to delete_handle.
(delete_handle): Add debugging output.
* fhandler.cc (fhandler_base::set_inheritance): Don't bother setting
inheritance in debugging table since the handle was never protected anyway.
(fhandler_base::fork_fixup): Ditto.
* exceptions.cc (debugger_command): Revert.
@
text
@d32 1
a32 1
HANDLE cygwin_mount_h;
@


1.48
log
@* debug.h (handle_list): Move here from debug.cc.  Add "inherit" flag
functionality.
* cygheap.cc (init_cheap): Move cygheap_max calculation to _csbrk.
(_csbrk): Reorganize to not assume first allocation is <= 1 page.
(cygheap_setup_for_child): Mark protected handle as inheritable.
* cygheap.h (cygheap_debug): New struct.
(init_cygheap): Add new structure when debugging.
* dcrt0.cc (dll_crt0_1): Remove call to debug_init.  Close ppid_handle here, if
appropriate.  Don't protect subproc_ready, since it is already protected in the
parent.  Call memory_init prior to ProtectHandle to ensure that cygheap is set
up.  Call debug_fixup_after_fork_exec when appropriate.
(_dll_crt0): Don't close ppid_handle here.
* debug.cc: Use cygheap debug structure rather than static elements throughout.
(add_handle): Don't issue a warning if attempt to protect handle in exactly the
same way from exactly the same place.  Add pid info to warning output.  Accept
additional argument controlling whether handle is to be inherited.  Add pid to
stored information.
(debug_fixup_after_fork_exec): Renamed from debug_fixup_after_fork.  Reorganize
to avoid erroneously skipping handles.
(mark_closed): Add pid info to warning output.
(setclexec): Rename from setclexec_pid.
* fhandler.cc (fhandler_base::get_default_fmode): Minor reorg.
(fhandler_base::fstat): Add debugging output.
(fhandler_base::set_inheritance): Call setclexec rather than setclexec_pid.
(fhandler_base::fork_fixup): Ditto.
* fhandler_console.cc (get_tty_stuff): Mark protected handle as inheritable.
* fhandler_tty.cc (fhandler_tty_slave::open): Ditto.
* tty.cc (tty::make_pipes): Ditto.
(tty::common_init): Ditto.
* fork.cc (fork_parent): Ditto.
(fork_child): Close protected handles with correct name.  Remove
debug_fixup_after_fork call.
* fhandler_socket.cc (fhandler_socket::create_secret_event): Mark protected
handle as inheritable/non-inheritable, as appropriate.
* shared.cc (memory_init): Mark protected handle as inheritable.  Call
debug_init here.
* sigproc.cc (wait_sig): Close protected handle with correct name.
* spawn.cc (spawn_guts): Rename spr to subproc_ready and mark it as
inheritable.
* exceptions.cc (debugger_command): Try to run dumper.exe, if found.
* syscalls.cc (fstat64): Don't follow symlinks for path_conv lookup since path
is already resolved.
@
text
@a145 2
  debug_init ();

@


1.47
log
@	* shared.cc (sec_none): Move to sec_helper.cc.
	(sec_none_nih): Ditto.
	(sec_all): Ditto.
	(sec_all_nih): Ditto.
	(get_null_sd): Ditto.
	(sec_acl): Ditto.
	(__sec_user): Ditto.
	* sec_helper.cc (sec_none): Move from shared.cc to here.
	(sec_none_nih): Ditto.
	(sec_all): Ditto.
	(sec_all_nih): Ditto.
	(get_null_sd): Ditto.
	(sec_acl): Ditto.
	(__sec_user): Ditto.
@
text
@d146 2
d149 1
a149 1
  ProtectHandle (cygheap->shared_h);
d157 1
a157 1
  ProtectHandle (cygwin_mount_h);
@


1.46
log
@* dtable.cc (handle_to_fn): Attempt to handle "raw" accesses to remote shares.
* path.cc (mount_info::conv_to_win32_path): Set flags to binary when mount
entry is not found.
(mount_info::set_flags_from_win32_path): Ditto.
@
text
@a33 6
/* General purpose security attribute objects for global use. */
SECURITY_ATTRIBUTES NO_COPY sec_none;
SECURITY_ATTRIBUTES NO_COPY sec_none_nih;
SECURITY_ATTRIBUTES NO_COPY sec_all;
SECURITY_ATTRIBUTES NO_COPY sec_all_nih;

a207 90
}

/*
 * Function to return a common SECURITY_DESCRIPTOR * that
 * allows all access.
 */

static NO_COPY SECURITY_DESCRIPTOR *null_sdp = 0;

SECURITY_DESCRIPTOR *__stdcall
get_null_sd ()
{
  static NO_COPY SECURITY_DESCRIPTOR sd;

  if (null_sdp == 0)
    {
      InitializeSecurityDescriptor (&sd, SECURITY_DESCRIPTOR_REVISION);
      SetSecurityDescriptorDacl (&sd, TRUE, 0, FALSE);
      null_sdp = &sd;
    }
  return null_sdp;
}

BOOL
sec_acl (PACL acl, BOOL admins, PSID sid1, PSID sid2)
{
  size_t acl_len = MAX_DACL_LEN(5);

  if (!InitializeAcl (acl, acl_len, ACL_REVISION))
    {
      debug_printf ("InitializeAcl %E");
      return FALSE;
    }
  if (sid2)
    if (!AddAccessAllowedAce (acl, ACL_REVISION,
			      GENERIC_ALL, sid2))
      debug_printf ("AddAccessAllowedAce(sid2) %E");
  if (sid1)
    if (!AddAccessAllowedAce (acl, ACL_REVISION,
			      GENERIC_ALL, sid1))
      debug_printf ("AddAccessAllowedAce(sid1) %E", sid1);
  if (admins)
    if (!AddAccessAllowedAce (acl, ACL_REVISION,
			      GENERIC_ALL, well_known_admins_sid))
      debug_printf ("AddAccessAllowedAce(admin) %E");
  if (!AddAccessAllowedAce (acl, ACL_REVISION,
			    GENERIC_ALL, well_known_system_sid))
    debug_printf ("AddAccessAllowedAce(system) %E");
#if 0 /* Does not seem to help */
  if (!AddAccessAllowedAce (acl, ACL_REVISION,
			    GENERIC_ALL, well_known_creator_owner_sid))
    debug_printf ("AddAccessAllowedAce(creator_owner) %E");
#endif
  return TRUE;
}

PSECURITY_ATTRIBUTES __stdcall
__sec_user (PVOID sa_buf, PSID sid2, BOOL inherit)
{
  PSECURITY_ATTRIBUTES psa = (PSECURITY_ATTRIBUTES) sa_buf;
  PSECURITY_DESCRIPTOR psd = (PSECURITY_DESCRIPTOR)
			     ((char *) sa_buf + sizeof (*psa));
  PACL acl = (PACL) ((char *) sa_buf + sizeof (*psa) + sizeof (*psd));

  cygsid sid;

  if (!(sid = cygheap->user.orig_sid ()) ||
	  (!sec_acl (acl, TRUE, sid, sid2)))
    return inherit ? &sec_none : &sec_none_nih;

  if (!InitializeSecurityDescriptor (psd, SECURITY_DESCRIPTOR_REVISION))
    debug_printf ("InitializeSecurityDescriptor %E");

/*
 * Setting the owner lets the created security attribute not work
 * on NT4 SP3 Server. Don't know why, but the function still does
 * what it should do also if the owner isn't set.
*/
#if 0
  if (!SetSecurityDescriptorOwner (psd, sid, FALSE))
    debug_printf ("SetSecurityDescriptorOwner %E");
#endif

  if (!SetSecurityDescriptorDacl (psd, TRUE, acl, FALSE))
    debug_printf ("SetSecurityDescriptorDacl %E");

  psa->nLength = sizeof (SECURITY_ATTRIBUTES);
  psa->lpSecurityDescriptor = psd;
  psa->bInheritHandle = inherit;
  return psa;
@


1.45
log
@Remove unneeded sigproc.h includes throughout.
* fhandler.h (fhandler_proc::fill_filebuf): Take a pinfo argument.
* fhandler_proc.cc (fhandler_proc::get_proc_fhandler): Simplify search for
given pid.
(fhandler_proc::readdir): Assume that pid exists if it shows up in the winpid
list.
* fhandler_process.cc (fhandler_process::open): Simplify search for given pid.
Call fill_filebuf with pinfo argument.
(fhandler_process::fill_filebuf): Pass pinfo here and assume that it exists.
* pinfo.h (pinfo::remember): Define differently if sigproc.h is not included.
* dll_init.cc (dll_list::detach): Don't run destructor on exit.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001 Red Hat, Inc.
@


1.44
log
@Remove unneeded sync.h, where appropriate, throughout.  Remove unneeded heap.h,
where appropriate, throughout.  Remove unneeded exceptions.h, where
appropriate, throughout.  Remove unneeded perprocess.h, where appropriate,
throughout.
@
text
@a17 1
#include "sigproc.h"
@


1.43
log
@	* shared.cc (__sec_user): Split into sec_acl() and call orig_sid().
	(sec_acl): Create from part of __sec_user(), except creator/owner.
	* security.h: Define sec_acl() and MAX_DACL_LEN.
@
text
@a17 1
#include "sync.h"
@


1.42
log
@* fork.cc (fork_parent): Use sec_user_nih to control process/thread
inheritance/permission.
* spawn.cc (spawn_guts): Ditto.
* security.cc (create_token): Initialize token so that it is not tested for
bogus value later.  Use sec_user to control process/thread creation.
* security.h (__sec_user): Rename declaration from sec_user.
(sec_user_nih): Declare here as inline function wrapper for __sec_user.
(sec_user): Ditto.
* sigproc.cc (czombies): Allocate a character array for zombies to avoid
constructor overhead
(extremely hackish, I know).
(cpchildren): Ditto.
(pchildren): New define.
(zombies): Ditto.
(getsem): Use sec_user_nih to control semaphore inheritance/permission.
@
text
@d239 33
d282 2
a283 3
  if (cygheap->user.sid ())
    sid = cygheap->user.sid ();
  else if (!lookup_name (getlogin (), cygheap->user.logsrv (), sid))
a284 39

  size_t acl_len = sizeof (ACL)
		   + 4 * (sizeof (ACCESS_ALLOWED_ACE) - sizeof (DWORD))
		   + GetLengthSid (sid)
		   + GetLengthSid (well_known_admins_sid)
		   + GetLengthSid (well_known_system_sid)
		   + GetLengthSid (well_known_creator_owner_sid);
  if (sid2)
    acl_len += sizeof (ACCESS_ALLOWED_ACE) - sizeof (DWORD)
	       + GetLengthSid (sid2);

  if (!InitializeAcl (acl, acl_len, ACL_REVISION))
    debug_printf ("InitializeAcl %E");

  if (!AddAccessAllowedAce (acl, ACL_REVISION,
			    SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL,
			    sid))
    debug_printf ("AddAccessAllowedAce(%s) %E", getlogin ());

  if (!AddAccessAllowedAce (acl, ACL_REVISION,
			    SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL,
			    well_known_admins_sid))
    debug_printf ("AddAccessAllowedAce(admin) %E");

  if (!AddAccessAllowedAce (acl, ACL_REVISION,
			    SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL,
			    well_known_system_sid))
    debug_printf ("AddAccessAllowedAce(system) %E");

  if (!AddAccessAllowedAce (acl, ACL_REVISION,
			    SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL,
			    well_known_creator_owner_sid))
    debug_printf ("AddAccessAllowedAce(creator_owner) %E");

  if (sid2)
    if (!AddAccessAllowedAce (acl, ACL_REVISION,
			      SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL,
			      sid2))
      debug_printf ("AddAccessAllowedAce(sid2) %E");
@


1.41
log
@* times.cc (hires::prime): Restore thread priority on failure condition.
* uinfo.cc (uinfo_init): Use more robust method for determining if process was
invoked from a non-cygwin process.
* sync.h (muto::init): Eliminate "inheritance" parameter.
(new_muto): Reflect removal of parameter.
* sync.cc (muto::init): Ditto.
* cygheap.cc (cygheap_init): Ditto.
* debug.cc (threadname_init): Ditto.
* exceptions.cc (events_init): Ditto.
* malloc.cc (malloc_init): Ditto.
* path.cc (cwdstuff::init): Ditto.
* sigproc.cc (sigproc_init): Ditto.
* grp.cc (group_lock): Use different method for locking with static member.
(read_etc_group): REALLY ensure that read lock mutex is released.
* passwd.cc (passwd_lock): Use different method for locking with static member.
(read_etc_passwd): REALLY ensure that read lock mutex is released.
* shared.cc (sec_user): Correct reversed inheritance test.
@
text
@d240 1
a240 1
sec_user (PVOID sa_buf, PSID sid2, BOOL inherit)
a241 3
  if (!sa_buf)
    return inherit ? &sec_none : &sec_none_nih;

a312 6
}

SECURITY_ATTRIBUTES *__stdcall
sec_user_nih (PVOID sa_buf, PSID sid2)
{
  return sec_user (sa_buf, sid2, FALSE);
@


1.40
log
@whitespace cleanup
@
text
@d243 1
a243 1
    return inherit ? &sec_none_nih : &sec_none;
d255 1
a255 1
    return inherit ? &sec_none_nih : &sec_none;
@


1.39
log
@* cygmagic: Add define name to warning.
* dcrt0.cc (_dll_crt0): Check for changes in child_info size.
(multiple_cygwin_problem): Avoid "proc" errors when testing.  Just assume new
cygwin proc.
* shared_info.h (mount_info): Add 'cb' element for sanity checks.
(shared_info): Ditto.
* child_info.h (child_info): Add fhandler_union_size element for sanity
checking.
* shared.cc (open_shared): Detect shared region size mismatch between parent
and child.
(shared_info::initialize): Detect shared region size mismatch with expectation.
(memory_Init): Ditto.
* sigproc.cc (init_child_info): Correctly set cb in passed structure.
* shared.cc (open_shared):
@
text
@d242 1
a242 1
  if (! sa_buf)
d254 1
a254 1
  else if (! lookup_name (getlogin (), cygheap->user.logsrv (), sid))
d267 1
a267 1
  if (! InitializeAcl (acl, acl_len, ACL_REVISION))
d270 3
a272 3
  if (! AddAccessAllowedAce (acl, ACL_REVISION,
			     SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL,
			     sid))
d275 3
a277 3
  if (! AddAccessAllowedAce (acl, ACL_REVISION,
			     SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL,
			     well_known_admins_sid))
d280 3
a282 3
  if (! AddAccessAllowedAce (acl, ACL_REVISION,
			     SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL,
			     well_known_system_sid))
d285 3
a287 3
  if (! AddAccessAllowedAce (acl, ACL_REVISION,
			     SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL,
			     well_known_creator_owner_sid))
d291 3
a293 3
    if (! AddAccessAllowedAce (acl, ACL_REVISION,
			       SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL,
			       sid2))
d296 1
a296 2
  if (! InitializeSecurityDescriptor (psd,
				      SECURITY_DESCRIPTOR_REVISION))
d305 1
a305 1
  if (! SetSecurityDescriptorOwner (psd, sid, FALSE))
d309 1
a309 1
  if (! SetSecurityDescriptorDacl (psd, TRUE, acl, FALSE))
@


1.38
log
@* Makefile.in: Autogenerate some header files which provide magic numbers.
Force dependencies for files which depend on autogenerated headers to ensure
that they are always built.
* child_info.h (child_info): Add new fields to accommodate new magic number
header stuff.
* dcrt0.cc: Rely on "child_info_magic.h" to ensure that correct child_info
magic numbers are used.
(dll_crt0_1): Temporarily remove _cygwin_testing_magic test.
(_dll_crt0): Do more testing on magic numbers from fork_info structure.  Call
"multiple_cygwin_problem" where appropriate.
(multiple_cygwin_problem): Rename from multiple_cygwin_die.  Issue a warning or
die, as appropriate based on cygwin version/magic number mismatch.
* pinfo.cc (pinfo::exit): Don't attempt to dereference `this' if it doesn't
exist.  This can happen when a fatal error occurs early in process
initialization.
* shared.cc: Rely on "shared_info_magic.h" to accommodate that new magic number
header stuff.
(shared_info::initialize): Use new magic number stuff, for shared region.
(memory_init): Ditto, for mount table.
* shared_info.h: Accomodate new magic number stuff for shared region and mount
table.
* sigproc.cc: Rely on "child_info_magic.h" to accommodate new magic number
header stuff.
(init_child_info): Initialize new fields in child_info) to accomodate magic
numbers.
* winsup.h: Rename multiple_cygwin_die to multiple_cygwin_problem.
* include/cygwin/version.h: Define macros for manipulating version magic.
* cygmagic: New shell script for generating magic numbers.
@
text
@d106 1
a106 1
  if (inited)
d108 4
a111 2
      if (inited != SHARED_VERSION_MAGIC)
	multiple_cygwin_problem ("shared", inited, SHARED_VERSION);
d120 5
a124 1
  inited = SHARED_VERSION_MAGIC;
d171 4
d179 2
@


1.37
log
@Eliminate excess whitespace.
@
text
@d28 1
a28 1
#include "shared_info.h"
a31 3
#define SHAREDVER (unsigned)(cygwin_version.api_major << 16 | \
		   cygwin_version.api_minor)

d108 2
a109 2
      if (inited != SHAREDVER)
	multiple_cygwin_die ();
d118 1
a118 1
  inited = SHAREDVER;
d163 1
a163 1
      mount_table->version = MOUNT_VERSION;
d167 2
a168 2
  else if (mount_table->version != MOUNT_VERSION)
    multiple_cygwin_die ();
@


1.36
log
@* Makefile.in: Only build testsuite directory on first 'make check'.
* configure.in: Remove testsuite from SUBDIRS.
* configure: Regenerate.
@
text
@d156 1
a156 1
      					    cygwin_mount_h,
@


1.35
log
@* fhandler.cc (fhandler_base::fork_fixup): Don't protect handle.
* dlfcn.cc: Fix to confirm to coding standards.  Reorganize includes throughout
to accomodate new cygheap.h usage.
* cygheap.h (cygheap_fdmanip): New class: simplifies locking and retrieval of
fds from cygheap->fdtab.
(cygheap_fdget): Ditto.
(cygheap_fdnew): Ditto.
* fcntl.cc (_fcntl): Use new method to lock fdtab and retrieve info.
* ioctl.cc (ioctl): Ditto.
* mmap.cc (mmap): Ditto.
* net.cc: Ditto, throughout.
* passwd.cc (getpass): Ditto.
* path.cc (fchdir): Ditto.
* pipe.cc (make_pipe): Ditto.
* sec_acl.cc (facl): Ditto.
* syscalls.cc: Ditto, throughout.
* termios.cc: Ditto, throughout.
@
text
@d58 1
a58 1
open_shared (const char *name, HANDLE &shared_h, DWORD size, void *addr)
d69 1
a69 1
	  mapname = shared_name (name, 0);
d130 1
d155 2
a156 1
  mount_table = (mount_info *) open_shared (user_name, cygwin_mount_h,
d170 3
@


1.34
log
@* uinfo.cc (internal_getlogin): Reorganize slightly to minimize work in default
condition.
@
text
@d17 1
d25 1
@


1.33
log
@Add "path.h" include throughout, where needed.  Use new path_conv methods and
operators to simplify testing for directory and attributes, throughout.
* path.h (path_conv::exists): New method.
(path_conv::has_attribute): Ditto.
(path_conv::isdir): Ditto.
(path_conv::DWORD &): New operator.
(path_conv::int &): Ditto.
* dir.cc (rmdir): Eliminate a goto.
* dtable.cc (dtable::build_fhandler): Accept opt and suffix info for
path_conv.check.  Return fh == NULL on path_conv error.  Pass unit to set_name
as appropriate.
(dtable::reset_unix_path_name): New method.
* dtable.h (dtable): Declare new method.  Reflect arg changes to
build_fhandler.
* fhandler.cc (fhandler_disk_dummy_name): Eliminate.
(fhandler_base::set_name): Expect paths to be NULL.  Build unix_path_name from
win32_path_name when it is a device.
(fhandler_base::reset_unix_path_name): New method.
(fhandler_base::raw_read): Report EISDIR when ERROR_INVALID_FUNCTION or
ERROR_INVALID_PARAMETER and reading a directory.
(fhandler_disk_file::fstat): Don't call stat_dev since we should now never be
calling fhandler_disk_file methods with devices.
(fhandler_base::fhandler_base): Clear {unix,win32}_path_name.
(fhandler_base::~fhandler_base): Always free {unix,win32}_path_name.
(fhandler_disk_file::fhandler_disk_file): Remove set_no_free_names kludge.
(fhandler_disk_file::open): Ditto.
* fhandler.h (fhandler_base::no_free_names): Eliminate.
(fhandler_base::set_no_free_names): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::fhandler_tty_slave): Don't set
unix_path_name here.
* path.cc (fchdir): Lock fd table throughout.  Use new
dtable::reset_unix_path_name method to reset path.
* syscalls.cc (stat_worker): Reorganize to always call fstat method.  Pass
path_conv method to fhandler_*::open.
(chroot): Elminate a goto.
@
text
@d110 1
a110 4
	api_fatal ("Shared region version mismatch.  Version %x != %x.\n"
		   "Are you using multiple versions of cygwin1.dll?\n"
		   "Run 'cygcheck -r -s -v' to find out.",
		   inited, SHAREDVER);
@


1.32
log
@* cygwin.din: Remove cygwin_getshared.
* shared.cc: Ditto.
* include/cygwin/version.h: Bump API minor number.
* dtable.cc (dtable::build_fhandler): Fix incorrect test for socket.
@
text
@d22 1
@


1.32.4.1
log
@Merged changes from HEAD
@
text
@a21 1
#include "path.h"
@


1.32.4.2
log
@Merged changes from HEAD
@
text
@a16 1
#include <errno.h>
a23 1
#include "cygerrno.h"
d26 1
a26 1
#include "shared_info_magic.h"
d30 3
d56 1
a56 1
open_shared (const char *name, int n, HANDLE &shared_h, DWORD size, void *addr)
d67 1
a67 1
	  mapname = shared_name (name, n);
d107 1
a107 1
  if (version)
d109 5
a113 4
      if (version != SHARED_VERSION_MAGIC)
	multiple_cygwin_problem ("shared", version, SHARED_VERSION);
      else if (cb != SHARED_INFO_CB)
	multiple_cygwin_problem ("shared size", cb, SHARED_INFO_CB);
d122 1
a122 5
  version = SHARED_VERSION_MAGIC;
  cb = sizeof (*this);
  if (cb != SHARED_INFO_CB)
    system_printf ("size of shared memory region changed from %u to %u",
		   SHARED_INFO_CB, cb);
a130 1
					       CYGWIN_VERSION_SHARED_DATA,
d155 1
a155 2
  mount_table = (mount_info *) open_shared (user_name, MOUNT_VERSION,
					    cygwin_mount_h,
d165 1
a165 1
      mount_table->version = MOUNT_VERSION_MAGIC;
a166 4
      mount_table->cb = sizeof (*mount_table);
      if (mount_table->cb != MOUNT_INFO_CB)
	system_printf ("size of mount table region changed from %u to %u",
		       MOUNT_INFO_CB, mount_table->cb);
a168 5
  else if (mount_table->version != MOUNT_VERSION_MAGIC)
    multiple_cygwin_problem ("mount", mount_table->version, MOUNT_VERSION);
  else if (mount_table->cb !=  MOUNT_INFO_CB)
    multiple_cygwin_problem ("mount table size", mount_table->cb, MOUNT_INFO_CB);

@


1.32.4.3
log
@Merged changes from HEAD
@
text
@d240 1
a240 1
__sec_user (PVOID sa_buf, PSID sid2, BOOL inherit)
d242 3
d254 2
a255 2
  else if (!lookup_name (getlogin (), cygheap->user.logsrv (), sid))
    return inherit ? &sec_none : &sec_none_nih;
d267 1
a267 1
  if (!InitializeAcl (acl, acl_len, ACL_REVISION))
d270 3
a272 3
  if (!AddAccessAllowedAce (acl, ACL_REVISION,
			    SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL,
			    sid))
d275 3
a277 3
  if (!AddAccessAllowedAce (acl, ACL_REVISION,
			    SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL,
			    well_known_admins_sid))
d280 3
a282 3
  if (!AddAccessAllowedAce (acl, ACL_REVISION,
			    SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL,
			    well_known_system_sid))
d285 3
a287 3
  if (!AddAccessAllowedAce (acl, ACL_REVISION,
			    SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL,
			    well_known_creator_owner_sid))
d291 3
a293 3
    if (!AddAccessAllowedAce (acl, ACL_REVISION,
			      SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL,
			      sid2))
d296 2
a297 1
  if (!InitializeSecurityDescriptor (psd, SECURITY_DESCRIPTOR_REVISION))
d306 1
a306 1
  if (!SetSecurityDescriptorOwner (psd, sid, FALSE))
d310 1
a310 1
  if (!SetSecurityDescriptorDacl (psd, TRUE, acl, FALSE))
d317 6
@


1.32.4.4
log
@Merged changes from HEAD
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
d18 2
a238 33
BOOL
sec_acl (PACL acl, BOOL admins, PSID sid1, PSID sid2)
{
  size_t acl_len = MAX_DACL_LEN(5);

  if (!InitializeAcl (acl, acl_len, ACL_REVISION))
    {
      debug_printf ("InitializeAcl %E");
      return FALSE;
    }
  if (sid2)
    if (!AddAccessAllowedAce (acl, ACL_REVISION,
			      GENERIC_ALL, sid2))
      debug_printf ("AddAccessAllowedAce(sid2) %E");
  if (sid1)
    if (!AddAccessAllowedAce (acl, ACL_REVISION,
			      GENERIC_ALL, sid1))
      debug_printf ("AddAccessAllowedAce(sid1) %E", sid1);
  if (admins)
    if (!AddAccessAllowedAce (acl, ACL_REVISION,
			      GENERIC_ALL, well_known_admins_sid))
      debug_printf ("AddAccessAllowedAce(admin) %E");
  if (!AddAccessAllowedAce (acl, ACL_REVISION,
			    GENERIC_ALL, well_known_system_sid))
    debug_printf ("AddAccessAllowedAce(system) %E");
#if 0 /* Does not seem to help */
  if (!AddAccessAllowedAce (acl, ACL_REVISION,
			    GENERIC_ALL, well_known_creator_owner_sid))
    debug_printf ("AddAccessAllowedAce(creator_owner) %E");
#endif
  return TRUE;
}

d249 3
a251 2
  if (!(sid = cygheap->user.orig_sid ()) ||
	  (!sec_acl (acl, TRUE, sid, sid2)))
d253 39
@


1.32.4.5
log
@Merged changes from HEAD
@
text
@d34 6
d214 90
@


1.32.4.6
log
@Merged changes from HEAD
@
text
@a145 2
  debug_init ();

d147 1
a147 1
  ProtectHandleINH (cygheap->shared_h);
d155 1
a155 1
  ProtectHandleINH (cygwin_mount_h);
@


1.32.4.7
log
@Merged changes from HEAD
@
text
@d146 2
@


1.32.4.8
log
@Merged changes from HEAD
@
text
@d32 1
a32 1
HANDLE NO_COPY cygwin_mount_h;
@


1.32.4.9
log
@Merged changes from HEAD
@
text
@d41 1
a41 1
  if (_cygwin_testing)
@


1.32.4.10
log
@Merged changes from HEAD
@
text
@a148 1
  getpagesize ();
@


1.32.4.11
log
@Merged changes from HEAD
@
text
@d63 7
a69 3
	  !(shared_h = CreateFileMapping (INVALID_HANDLE_VALUE, &sec_all,
					  PAGE_READWRITE, 0, size, mapname)))
	api_fatal ("CreateFileMapping, %E.  Terminating.");
@


1.31
log
@* cygheap.cc (cygheap_fixup_in_child): Clear cygheap->base so that heap is not
forced to start at the same place in execed process.
* heap.cc: Remove brk* macros for clarity throughout.
* heap.h: Ditto.
* shared.cc (shared_info::initialize): Move heap_chunk test into
heap_chunk_size().
(heap_chunk_size): Check for chunk size here.  Don't go to registry if
heap_chunk_in_mb is already set.
* smallprint.c (console_printf): Add Windows 95 concessions.
@
text
@a203 8
/* For apps that wish to access the shared data.  */

shared_info *
cygwin_getshared ()
{
  return cygwin_shared;
}

@


1.30
log
@* cygheap.h (init_cygheap): Move heap pointers here.
* include/sys/cygwin.h (perprocess): Remove heap pointers.
* dcrt0.cc (__cygwin_user_data): Reflect obsolete perprocess stuff.
(_dll_crt0): Don't initialize heap pointers.
(cygwin_dll_init): Ditto.
(release_upto): Use heap pointers from cygheap.
* heap.h: Ditto.
* fork.cc (fork_parent): Ditto.  Don't set heap pointers in ch.
(fork_child): Remove obsolete sigproc_fixup_after_fork.
* shared.cc (memory_init): Reorganize so that cygheap initialization is called
prior to regular heap since regular heap uses cygheap now.
* sigproc.cc (proc_subproc): Eliminate zombies allocation.
(sigproc_init): Move zombies alloation here.  Don't free up array on fork, just
reuse it.
(sigproc_fixup_after_fork): Eliminate.
* sigproc.h: Ditto.
* include/cygwin/version.h: Reflect change to perprocess structure.
@
text
@a105 2
  /* Ya, Win32 provides a way for a dll to watch when it's first loaded.
     We may eventually want to use it but for now we have this.  */
a120 17

  /* Fetch misc. registry entries.  */

  reg_key reg (KEY_READ, NULL);

  /* Note that reserving a huge amount of heap space does not result in
  the use of swap since we are not committing it. */
  /* FIXME: We should not be restricted to a fixed size heap no matter
  what the fixed size is. */

  heap_chunk_in_mb = reg.get_int ("heap_chunk_in_mb", 256);
  if (heap_chunk_in_mb < 4)
    {
      heap_chunk_in_mb = 4;
      reg.set_int ("heap_chunk_in_mb", heap_chunk_in_mb);
    }

d182 19
@


1.29
log
@Remove initialization of static or global values to zero, throughout.  This
just needlessly grows the size of the DLL.
* tty.cc (tty::alive): Make inuse handle non-inheriting on open, just for
thread safety.
@
text
@a153 1
  heap_init ();
a160 6
  mount_table = (mount_info *) open_shared (user_name, cygwin_mount_h,
					    sizeof (mount_info), 0);
  debug_printf ("opening mount table for '%s' at %p", cygheap->user.name (),
		mount_table_address);
  ProtectHandle (cygwin_mount_h);
  debug_printf ("mount table version %x at %p", mount_table->version, mount_table);
d168 1
d171 8
@


1.28
log
@* child_info.h: Modify magic number.
* dcrt0.cc (_cygwin_testing): Define.
(_dll_crt0): Set _cygwin_testing if CYGWIN_TESTING environment variable exists.
Don't issue "conflicting versions" error if _cygwin_testing is true.
* shared.cc (shared_name): Use _cygwin_testing global rather than testing the
environment.
* syscalls.cc (_write): Remove debugging info.
@
text
@d34 1
a34 1
HANDLE cygwin_mount_h = NULL;
@


1.27
log
@Throughout, reorganize header file inclusion to put security.h prior to
fhandler.h.
* fhandler.h (fhandler_base::get_inheritance): New method.
* fhandler_socket.cc (fhandler_socket::create_secret_event): Use proper
close-on-exec inheritance when creating.
(fhandler_socket::check_peer_secret_event): Create handle as non-inheritable.
@
text
@d46 1
a46 1
  char envbuf[6];
d49 1
a49 1
  if (GetEnvironmentVariable ("CYGWIN_TESTING", envbuf, 5))
@


1.26
log
@* child_info.h: Bump magic number.
(class child_info): Add an element.
* cygheap.cc (init_cheap): Allocate cygwin heap in shared memory area.
(cygheap_fixup_in_child): Map cygwin heap, passed from parent via shared memory
into correct address.
(cygheap_setup_for_child): New function.
* cygheap.h: Declare new functions.
* dcrt0.cc (dll_crt0_1): Accomodate new cygheap_fixup_in_child arguments.
Avoid protecting subproc_ready unless it is spawn/nowait.
* fork.cc (fork_parent): Use new cygheap_setup_for_child function to setup
cygwin heap info.  Close passed cygheap shared memory handle.
* spawn.cc (spawn_guts): Ditto.  Also, reorganize to avoid synchronization
between parent and child in non-P_OVERLAY case.
* sigproc.cc (wait_sig): Only signal subproc_ready when execing.
@
text
@d20 1
a27 1
#include "security.h"
@


1.25
log
@        Change well_known_admin_sid to well_known_admins_sid throughout.
        * sec_acl.cc (setacl): Never set DELETE permission. Set
        FILE_DELETE_CHILD only on readable and executable directories.
        * sec_helper.cc: Add constructor for `well_known_null_sid'.
        * security.cc (get_nt_attribute): Set S_ISVTX for directories if
        FILE_WRITE_DATA and FILE_EXECUTE but not FILE_DELETE_CHILD is set.
        Add evaluation of S_ISVTX, S_ISGID and S_ISUID from NULL ACE.
        (alloc_sd): Never set DELETE permission. Set FILE_DELETE_CHILD
        only on readable and executable directories.
        Add creation of NULL ACE for S_ISVTX, S_ISGID and S_ISUID permissions.
        * security.h: Add extern declaration for `well_known_null_sid'.
@
text
@d89 1
a89 1
				       0,0,0,0);
@


1.24
log
@forced commit
@
text
@d252 1
a252 1
		   + GetLengthSid (well_known_admin_sid)
d269 1
a269 1
			     well_known_admin_sid))
@


1.23
log
@        * fork.cc (fork): Eliminate superfluous call to getuid().
        * security.h: New define `NO_SID'. Remove declarations of functions
        moved to methods into class cygsid.
        (class cygsid): Declare new methods `getfromstr', `get_sid',
        `getfrompw', `getfromgr', `get_rid', `get_uid', `get_gid', `string'
        and new constructors and operators =, == and !=.
        Declare new global cygsids `well_known_XXX_sid' substituting the
        corresponding `get_XXX_sid' functions. Remove declarations of
        these functions.
        * sec_helper.cc (well_known_admin_sid): New global variable.
        (well_known_system_sid): Ditto
        (well_known_creator_owner_sid): Ditto
        (well_known_world_sid): Ditto
        (cygsid::string): New method, substituting `convert_sid_to_string_sid'.
        (cygsid::get_sid): New method, substituting `get_sid'.
        (cygsid::getfromstr): New method, substituting
        `convert_string_sid_to_sid'.
        (cygsid::getfrompw): New method, substituting `get_pw_sid'.
        (cygsid::getfromgr): New method, substituting `get_gr_sid'.
        (cygsid::get_id): New method, substituting `get_id_from_sid'.
        (get_admin_sid): Eliminated.
        (get_system_sid): Ditto.
        (get_creator_owner_sid): Ditto.
        (get_world_sid): Ditto.
        * grp.cc: Use new cygsid methods and well known sids throughout.
        * registry.cc: Ditto.
        * sec_acl.cc: Ditto.
        * security.cc: Ditto.
        * shared.cc: Ditto.
        * syscalls.cc (seteuid): Ditto. Eliminate redundant conditional.
        * uinfo.cc (internal_getlogin): Ditto.
        * spawn.cc (spawn_guts) Revert previous patch.
@
text
@@


1.22
log
@        * grp.cc: Eliminate MAX_DOMAIN_NAME define.
        (read_etc_group): Substitute MAX_DOMAIN_NAME by
        INTERNET_MAX_HOST_NAME_LENGTH.
        * passwd.cc (parse_pwd): Don't force pw_name to be lower case.
        * sec_helper.cc: Substitute MAX_USER_NAME by UNLEN,
        MAX_COMPUTERNAME_LENGTH by INTERNET_MAX_HOST_NAME_LENGTH throughout.
        (lookup_name): Slight cleanup.
        * security.cc (alloc_sd): Substitute MAX_USER_NAME by UNLEN.
        * security.h: Define DEFAULT_UID as DOMAIN_USER_RID_ADMIN and
        DEFAULT_GID as DOMAIN_ALIAS_RID_ADMINS.
        * shared.cc (memory_init): Substitute MAX_USER_NAME by UNLEN.
        * thread.h: Ditto.
        * uinfo.cc (internal_getlogin): Substitute MAX_USER_NAME by UNLEN.
        Substitute MAX_COMPUTERNAME_LENGTH and MAX_HOST_NAME by
        INTERNET_MAX_HOST_NAME_LENGTH.
        * winsup.h: Include lmcons.h. Eliminate MAX_USER_NAME and
        MAX_HOST_NAME. Move DEFAULT_UID and DEFAULT_GID to security.h.
@
text
@d252 3
a254 3
		   + GetLengthSid (get_admin_sid ())
		   + GetLengthSid (get_system_sid ())
		   + GetLengthSid (get_creator_owner_sid ());
d269 1
a269 1
			     get_admin_sid ()))
d274 1
a274 1
			     get_system_sid ()))
d279 1
a279 1
			     get_creator_owner_sid ()))
@


1.21
log
@        * autoload.cc: Add LoadDLLfunc statements for SetTokenInformation@@16.
        * cygheap.cc: Include security.h.
        * grp.cc (internal_getgrent): New function.
        (getgroups): Rearranged using `internal_getgrent' and the new
        `cygsid' class.
        * passwd.cc (internal_getpwent): New function.
        * sec_acl.cc: Use new `cygsid' class throughout.
        (acl_access): Use `internal_getgrent' instead of `getgrent'.
        * sec_helper.cc: Use new `cygsid' class throughout.
        (get_id_from_sid): Use `internal_getgrent' instead of `getgrent'.
        Use `internal_getpwent' instead of `getpwent'.
        * security.cc: Use new `cygsid' class throughout.
        * security.h: Move `MAX_SID_LEN' from winsup.h to here.
        Add extern declarations for `internal_getgrent' and `internal_getpwent'.
        (class cygsid): New class.
        * shared.cc (sec_user): Use new `cygsid' class.
        * syscalls.cc (seteuid): Try to set owner to user and primary group to
        current group in impersonation token before performing impersonation.
        (setegid): Try to set primary group in process token to the new group
        if ntsec is on.
        * uinfo.cc (internal_getlogin): Use new `cygsid' class.
        Try to set owner to user and primary group to current group in process
        token if the process has been started from a non cygwin process.
        (uinfo_init): Set primary group only if the process has been started
        from a non cygwin process.
        * winsup.h: Move define for `MAX_SID_LEN' to security.h.
@
text
@d157 2
a158 2
  char user_name[MAX_USER_NAME];
  DWORD user_name_len = MAX_USER_NAME;
@


1.20
log
@        * security.cc (alloc_sd): Reformat comment.
        * shared.cc: Drop function declarations already in security.h.
@
text
@d242 1
a242 2
  char sid_buf[MAX_SID_LEN];
  PSID sid = (PSID) sid_buf;
d245 1
a245 1
    CopySid (MAX_SID_LEN, sid, (void *) cygheap->user.sid ());
@


1.19
log
@Throughout, change fdtab references to cygheap->fdtab.
* child_info.h (cygheap_exec_info): Eliminate special fdtab stuff.
* spawn.cc (spawn_guts): Ditto.
* cygheap.cc (cygheap_init): Initialize fdtab, if appropriate.
* cygheap.h (CYGHEAPSIZE): Include size of init_cygheap.
(_cmalloc_entry): Include fdtab here.
* dtable.h (dtable): Declare/define new methods.
* dtable.cc (dtable::vfork_child_fixup): New method.
(dtable::fixup_after_exec): Remove unneeded extra arguments.
* dcrt0.cc (dll_crt0_1): Ditto.
* environ.cc (getwinenv): Use case sensitive comparison.
(winenv): Make a copy of environment cache to avoid realloc problems when
duplicate environment variables exist in the environment.  (From Egor Duda)
* net.cc (cygwin_socket): Revert Apr 14 change.
* include/sys/file.h: Protect against previous X_OK definition.
* passwd.cc: Eliminate passwd_sem throughout.
* security.cc: Ditto.
* cygwin.din: Export New functions.
* passwd.cc (read_etc_passwd): Make race safe.
(getpwuid_r): New function.
(getpwnam_r): New function.
@
text
@a230 4
extern PSID get_admin_sid ();
extern PSID get_system_sid ();
extern PSID get_creator_owner_sid ();

@


1.18
log
@Fix spacing, copyrights.
@
text
@d20 2
@


1.17
log
@Update copyrights.
@
text
@d47 2
a48 2
  if (GetEnvironmentVariable("CYGWIN_TESTING", envbuf, 5))
    strcat(buf, cygwin_version.dll_build_date);
d263 1
a263 1
    debug_printf("InitializeAcl %E");
d268 1
a268 1
    debug_printf("AddAccessAllowedAce(%s) %E", getlogin());
d273 1
a273 1
    debug_printf("AddAccessAllowedAce(admin) %E");
d278 1
a278 1
    debug_printf("AddAccessAllowedAce(system) %E");
d283 1
a283 1
    debug_printf("AddAccessAllowedAce(creator_owner) %E");
d289 1
a289 1
      debug_printf("AddAccessAllowedAce(sid2) %E");
d293 1
a293 1
    debug_printf("InitializeSecurityDescriptor %E");
d302 1
a302 1
    debug_printf("SetSecurityDescriptorOwner %E");
d306 1
a306 1
    debug_printf("SetSecurityDescriptorDacl %E");
@


1.16
log
@* shared.cc (shared_info::initialize): Reduce size of heap.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000 Cygnus Solutions.
@


1.15
log
@        * pinfo.cc (pinfo::init): Use INVALID_HANDLE_VALUE instead of
        explicit cast (HANDLE) 0xffffffff.
        * shared.cc (open_shared): Ditto.
@
text
@d131 1
a131 1
  heap_chunk_in_mb = reg.get_int ("heap_chunk_in_mb", 1024);
@


1.14
log
@* syscalls.cc (_link): Make sure that newpath does not exist.  Set errno if it
does.
* cygheap.cc (init_cheap): Don't specify a load address for the heap.  It
doesn't work on #!*& Windows 9x.
(cygheap_init): Move GetUserName to memory_init.
* dcrt0.cc (dll_crt0_1): Call new memory_init functin, eliminate call to
heap_init.
* heap.cc (heap_init): Improve error output.
* heap.h: Correct some declarations.
* shared.cc (mount_table_init): Remove.
(memory_init): Renamed from shared_init.  Reorganize to accomodate strange
Windows 9x problems with cygheap/heap interaction.
* shared_info.h: Rename shared_init to memory_init.
@
text
@d69 1
a69 1
	  !(shared_h = CreateFileMappingA ((HANDLE) 0xffffffff,
@


1.13
log
@Throughout, change 'cygwin_shared.mount' to 'mount_table'.
* child_info.h (child_info): Move shared_h, console_h to cygheap.  Add mount_h.
* cygheap.h (init_cygheap): Add shared_h, console_h.
* cygheap.cc (init_cheap): Initialize heap at a fixed location after the shared
memory regions.  Initialize cygheap->user name here.
* dcrt0.cc (dll_crt0_1): Call getpagesize () to initialize constants.  Remove
cygheap_init since it is done in shared_init now.
(_dll_crt0): Initialize mount_h, remove shared_h and console_h initialization.
* fhandler_console.cc (console_shared_h): Eliminate.
(get_tty_stuff): Use cygheap->console_h rather than console_shared_h.
* heap.cc (heap_init): Use page size constant calculated earlier in
initialization.
* shared.cc: Eliminate cygwin_shared_h.  Add cygwin_mount_h.
(mount_table_init): New function for initializing a user mount table.
(open_shared_file_map): Use constant for shared memory region.  Initialize
cygheap and mount table here.
(open_shared): Improve debugging output.
(shared_info::initialize): Eliminate call to mount.init.
(shared_terminate): Use cygheap->shared_h.  Close cygwin_mount_h.
(open_shared_file_map): Eliminate.
* shared_info.h (mount_info): Add a version field.
(shared_align_past): New macro for calculating location for shared memory
regions.
* sigproc.cc (init_child_info): Eliminate shared_h, console_h.
* spawn.cc (spawn_guts): Pass on cygwin_mount_h iff not a different user.
* syscalls.cc (system_info): New global holding system memory defaults.
(getpagesize): Use system_info.
* uinfo.cc (internal_getlogin): Only fill in user name if nonexistent.
* winsup.h: Declare system_info.
* passwd.cc (read_etc_passwd): Use cygheap->user.name () rather than retrieving
the name again.
@
text
@d21 1
a51 20
static void
mount_table_init ()
{
  void *addr = mount_table_address;
  debug_printf ("opening mount table for '%s' at %p", cygheap->user.name (),
		mount_table_address);
  mount_table = (mount_info *) open_shared (cygheap->user.name (),
					    cygwin_mount_h, sizeof (mount_info),
					    addr);
  ProtectHandle (cygwin_mount_h);

  debug_printf ("mount table version %x at %p", mount_table->version, mount_table);
  if (!mount_table->version)
    {
      mount_table->version = MOUNT_VERSION;
      debug_printf ("initializing mount table");
      mount_table->init ();	/* Initialize the mount table.  */
    }
}

d127 1
a127 1
  swapping since we are not committing it. */
d131 1
a131 1
  heap_chunk_in_mb = reg.get_int ("heap_chunk_in_mb", 128);
d142 1
a142 1
shared_init ()
d144 1
d150 18
d169 4
a172 4
    cygheap_init ();
 
  mount_table_init ();

d175 8
a182 1
  cygwin_shared->initialize ();
@


1.12
log
@        * cygheap.cc (cygheap_root::cygheap_root): New function.
        (cygheap_root::~cygheap_root): Ditto.
        (cygheap_root::operator=): Ditto.
        (cygheap_user::~cygheap_user): Ditto.
        (cygheap_user::set_name): Ditto.
        (cygheap_user::set_logsrv): Ditto.
        (cygheap_user::set_domain): Ditto.
        (cygheap_user::set_sid): Ditto.
        * cygheap.h (cygheap_root): New class.
        (cygheap_user): Ditto.
        (init_cygheap): Change type of `root' member to cygheap_root.
        Add `user' member.
        * dir.cc (opendir): Use new `cygheap_root' class.
        * dcrt0.cc (dll_crt0_1): Use new `cygheap_user' class.
        * fork.cc (fork_parent): Ditto.
        * grp.cc (getgroups): Ditto.
        * passwd.cc (search_for): Ditto.
        * path.cc: Use new `cygheap_root' class throughout.
        * pinfo.h (_pinfo): Remove `use_psid'. Move `username', `psid',
        `logsrv', `domain', `orig_{uid,gid}' and `real_{uid,gid}' to
        cygheap_user class.
        * security.cc: Use new `cygheap_user' class throughout.
        * shared.cc (sec_user): Ditto.
        * sigproc.cc (proc_subproc): Remove copy statements for user
        related information moved to `cygheap_user' class.
        * spawn.cc (spawn_guts): Invalidate current chroot settings
        when creating Windows environment. Use new `cygheap_user' class.
        * syscalls.cc: Use new `cygheap_user' class throughout.
        * uinfo.cc: Ditto.
        * uinfo.cc (internal_getlogin): Change parameters to reflect the
        move of user information to cygheap.
@
text
@d30 2
a31 3

/* The handle of the shared data area.  */
HANDLE cygwin_shared_h = NULL;
d51 2
a52 3
/* Open the shared memory map.  */
static void __stdcall
open_shared_file_map ()
d54 15
a68 5
  cygwin_shared = (shared_info *) open_shared ("shared",
					       cygwin_shared_h,
					       sizeof (*cygwin_shared),
					       (void *)0xa000000);
  ProtectHandle (cygwin_shared);
d110 1
a110 1
    api_fatal ("MapViewOfFileEx, %E.  Terminating.");
d112 1
a112 1
  debug_printf ("name %s, shared %p, h %p", name, shared, shared_h);
a134 3
  /* Initialize the mount table.  */
  mount.init ();

d163 9
a171 1
  open_shared_file_map ();
d173 2
d181 4
a184 2
  if (cygwin_shared_h)
    ForceCloseHandle (cygwin_shared_h);
a311 1

@


1.11
log
@Break out more header info into separate files.  Use appropriate header files
throughout.
* shared.h: Remove.
* cygwin_version.h: New file.
* delqueue.h: New file.
* environ.h: New file.
* host_dependent.h: New file.
* perprocess.h: New file.
* registry.h: New file.
* security.h: New file.
@
text
@d20 1
d223 3
a225 3
  if (myself->use_psid)
    CopySid (MAX_SID_LEN, sid, myself->psid);
  else if (! lookup_name (getlogin (), myself->logsrv, sid))
@


1.10
log
@Split out tty and shared_info stuff into their own headers and use throughout.
Include sys/termios.h for files which need it.
* tty.h: New file.
* shared_info.h: New file.
* fhandler.h: Move inline methods that rely on tty stuff to
fhandler_console.cc.
* fhandler_tty.cc (fhandler_pty_master::process_slave_output): Set
output_done_event immediately after reading data to speed up tty output
processing.
(process_output): Set write_error to errno or zero.
(fhandler_tty_slave::write): Check previous write error prior to writing to
slave end of pipe.  This allows tty output to be slightly less synchronous.
* fhandler_console.cc (fhandler_console::tcsetpgrp): Moved here from
fhandler.h.
(fhandler_console::set_input_state): Ditto.
@
text
@a19 1
#include "tty.h"
d21 3
@


1.9
log
@* Makefile.in: Add cygheap.o.
* child_info.h: Add specific exec class.
* cygheap.h: New file.  Contains declarations for cygwin heap.
* cygheap.cc: New file.  Implements cygwin heap functions.
* dcrt0.cc (quoted): Simplify due to new method for passing arguments between
cygwin programs.
(alloc_stack_hard_way): Attempt to handle overlapped stack.
(dll_crt0_1): Move child_info processing here.  Accomodate new method for
passing arguments between cygwin programs.  Initialize cygwin heap.  Establish
__argc and __argv variables.
(_dll_crt0): Move most of child_info processing to dll_crt0_1.
(cygwin_dll_init): Remove duplication.
* dtable.cc (dtable::extend): Allocate dtable using cygwin heap.
(dtable::build_fhandler): Ditto for fhandler type being constructed.
(dtable::dup_worker): Free new fhandler from cygwin heap on error.
(dtable::select_*): Don't assume that this == fdtab.
(dtable::linearize_fd_array): Delete.
(dtable::delinearize_fd_array): Delete.
(dtable::fixup_after_exec): New file.
(dtable::vfork_child_dup): Use cygwin heap.
(dtable::vfork_parent_restore): Ditto.
* dtable.h: Remove obsolete methods.  Add new method.
* environ.cc (posify): Eliminate already_posix parameter and logic.
(envsize): New function.
(_addenv): Use envsize.
(environ_init): Accept an argument pointing to an existing environment list.
If supplied, allocate space for this in the the program's heap.
* fhandler.cc (fhandler_base::operator =): Move here from fhandler.h.  Use
cygwin heap to allocate filenames.
(fhandler_base::set_name): Allocate/free names from cygwin heap.
(fhandler_base::linearize): Delete.
(fhandler_base::de_linearize): Delete.
(fhandler_base::operator delete): Free from cygwin heap.
(fhandler_base::~fhandler_base): Ditto.
* fhandler.h: Accomodate elimination of *linearize and other changes above.
* fhandler_console.cc (fhandler_console::fixup_after_exec): Rename from
de_linearize.
* heap.h: New file.
* fhandler_tty.cc (fhandler_tty_slave::fhandler_tty_slave): Use cygwin heap for
name.  fhandler_tty::fixup_after_exec): Rename from de_linearize.
* fork.cc (fork): Call cygheap_fixup_in_child.
* heap.cc: Use declarations in heap.h.
* malloc.cc: Sprinkle assertions throughout to catch attempts to free/realloc
something from the cygwin heap.
* path.cc: Throughout, eliminate use of per-thread cache for cwd.  Use cwd_*
functions rather than cwd_* variables to access cwd_win32 and cwd_posix.
(cwd_win32): New function.
(cwd_posix): New function.
(cwd_hash): New function.
(cwd_fixup_after_exec): New function.
* path.h: Accomodate path.cc changes.
* pinfo.cc (pinfo_init): Accept a pointer to an environment table.  Pass this
to environ_init.  Eliminate old 'title' tests.
* pinfo.h: Accomodate above change in argument.
* spawn.cc (struct av): New method for building argv list.
(av::unshift): New method.
(spawn_guts): Allocate everything that the child process needs in the cygwin
heap and pass a pointer to this to the child.  Build argv list using new
method.  Eliminate delinearize stuff.
* thread.h: Eliminate _cwd_win32 and _cwd_posix buffers.
* winsup.h: Eliminate obsolete functions.  Add envsize() declaration.
@
text
@d20 2
@


1.8
log
@* winsup.h: Eliminate inclusion of most of the cygwin .h files.  Use .h files
only in sources which require them.
* Makefile.in: Generate dependencies with -MD option.
@
text
@d212 1
a212 1
                             ((char *) sa_buf + sizeof (*psa));
d224 5
a228 5
                   + 4 * (sizeof (ACCESS_ALLOWED_ACE) - sizeof (DWORD))
                   + GetLengthSid (sid)
                   + GetLengthSid (get_admin_sid ())
                   + GetLengthSid (get_system_sid ())
                   + GetLengthSid (get_creator_owner_sid ());
d231 1
a231 1
               + GetLengthSid (sid2);
d237 2
a238 2
                             SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL,
                             sid))
d242 2
a243 2
                             SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL,
                             get_admin_sid ()))
d247 2
a248 2
                             SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL,
                             get_system_sid ()))
d252 2
a253 2
                             SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL,
                             get_creator_owner_sid ()))
d258 2
a259 2
                               SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL,
                               sid2))
d263 1
a263 1
                                      SECURITY_DESCRIPTOR_REVISION))
@


1.7
log
@* winsup.h: Split out dtable definitions into separate header file.
* dtable.h: New file.
* sigproc.h: Eliminate pinfo.h usage here.  Use it in source files that need
it.
@
text
@d17 2
@


1.6
log
@* select.cc (allocfd_set): Zero allocated fd_set.
(cygwin_select): Move fd_set copying logic from ::wait to here.  Use common
return through sell.poll.
(select_stuff::wait): Just return success or failure and let caller fill in
fd_set.
* pinfo.h (pinfo): Eliminate self-referential pointer to sidbuf since pinfo
structure exists at random locations now.
* fork.cc (fork): Use 'use_psid' element to control when the psid is relevant.
* shared.cc (sec_user): Ditto.
* spawn.cc (spawn_guts): Ditto.
* uinfo.cc (internal_getlogin): Ditto.
* syscall.cc (seteuid): Ditto.  Set use_psid element.
@
text
@d17 1
@


1.5
log
@* winsup.h: take out protections of environ, errno, allow C use
* *.cc: put winsup.h before other headers (for __INSIDE_CYGWIN__);
use cur_environ() instead of just environ
* times.cc: remove import protections
* glob.c: add winsup.h
* localtime.c: ditto
* smallprint.c: ditto
* Makefile.in: don't __INSIDE_CYGWIN__ as it messes up profiling.
@
text
@d215 1
a215 1
  if (myself->psid)
@


1.4
log
@* include/cygwin/version.h: Bump DLL minor version number to 5 due to all of
the changes below.  Redefine process structure to avoid a fixed size table.
Redefine pinfo/_pinfo classes.  Use these throughout.
* dcrt0.cc (dll_crt0_1): Accomodate set_myself argument change.
(__api_fatal): Accomodate _pinfo::record_death argument change.
* exceptions.cc (really_exit): Ditto.
(sig_handle_tty_stop): Use pinfo constructor to access process info.
(events_init): Don't create pinfo_mutex since it is no longer required.
* external.cc (fillout_pinfo): Use winpids class to iterate over all system
pids.
(cygwin_internal): lock_pinfo_for_update and unlock_pinfo are now noops.
* fhandler_termios.cc (fhandler_termios::set_ctty): Use pinfo constructor to
access process info.
* fork.cc (fork): Reorganize to initialize child info after the child has
started since that is when we know the child's winpid, which is necessary to
allocate the pinfo shared memory.
* mmap.cc (recreate_mmaps_after_fork): Change arg type to _pinfo.
* pinfo.cc: Rename pinfo methods to _pinfo throughout.  Eliminate pinfo_list
stuff.
(set_myself): Accept a pid argument now.  Call pinfo initializer to initialize
myself.  Detect when this is an "execed" process and create an "indirect" pid
block.
(pinfo_init): Accomodate set_myself arg change.
(procinfo): Remove.
(pinfo::lock_pinfo): Remove.
(pinfo::unlock_pinfo): Remove.
(pinfo::init): New method.  Allocates shared memory space for process pinfo
structure.
(pinfo::record_death): Don't call locking functions.
(cygwin_winpid_to_pid): Simplify by using new pinfo constructor.
(EnumProcessesW95): New function for iterating over processes on Windows 95.
(winpids::winpids): New constructor for winpids class.  Sets up a list of
process ids.
(enum_init): Initialize w95/wnt pid enumerators.
* shared.cc (shared-info::initialize): Remove pid initialization.
* shared.h: Move pinfo stuff into pinfo.h.
(class shared_info): Remove pinfo_list element.
* signal.cc (kill_worker): Use pinfo constructor to access process info.
(kill_pgrp): Ditto.  Use winpids methods to access list of processes.
* sigproc.cc: Throughout, modify to use _pinfo where appropriate.
(proc_exists (pid_t)): New function.  Determines if a process exists based on
the pid.
(proc_exists (_pinfo *p): Use new proc_exists function above.
(proc_subproc): Copy pinfo stuff around rather than _pinfo pointers.  Try to be
careful about releasing shared memory when we don't need it anymore.  Remove
pinfo locks.
(remove_zombies): Remove pinfo memory when zombie is going away.
* sigproc.h: Reflect _pinfo/pinfo changes in sigproc.cc.
* spawn.cc (spawn_guts): Eliminate pinfo *child argument.  Reorganize to only
initialize child pinfo after process has been started and we know the windows
pid.
(_spawnve): Reflect spawn_guts changes.
* syscalls.cc (setpgid): Use pinfo constructor to access process info.
(getpgid): Ditto.
(internal_getlogin): Use _pinfo.
* winsup.h: Eliminate pinfo_mutex.  Eliminate spawn_guts declaration since it
is static now.  Reflect set_myself argument change.
* include/sys/cygwin.h: Add some PID_* enums to accomodate new pinfo stuff.
* include/cygwin/version.h: Update minor version for cygdrive changes below.
@
text
@d11 1
a16 1
#include "winsup.h"
@


1.3
log
@        * winsup.h: Define MAX_SID_LEN and new MAX_HOST_NAME.
        * fork.cc (fork): Use above defines instead of numerical constants.
        * shared.cc (sec_user): Ditto.
        * shared.h (class pinfo): Ditto.
        * syscall.cc (seteuid): Ditto.
        * spawn.cc (_spawnve): Ditto. Eliminate conditional.
        (spawn_guts): Set child->uid = USHRT_MAX when user context will be
        changed in child process.
        * uinfo.cc (uinfo_init): Check for myself->uid instead of myself->psid
        to avoid reloading of /etc/passwd on process startup if ntsec is off.
        Use above defines instead of numerical constants.
        * security.cc: Move define for MAX_SID_LEN to winsup.h.
@
text
@a121 3
  /* Initialize the process table.  */
  p.init ();

@


1.2
log
@* shared.cc (shared_info::initialize): Improve error message clarity.
* mkvers.sh: Eliminate debugging output.
@
text
@d215 1
a215 1
  char sid_buf[40];
d219 1
a219 1
    CopySid (40, sid, myself->psid);
@


1.1
log
@Initial revision
@
text
@d112 4
a115 1
	api_fatal ("shared region is corrupted.  inited %x", inited);
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
