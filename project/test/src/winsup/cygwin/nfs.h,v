head	1.3;
access;
symbols
	cygwin-1_7_35-release:1.3
	cygwin-1_7_34-release:1.3
	cygwin-1_7_33-release:1.3
	cygwin-1_7_32-release:1.3
	cygwin-1_7_31-release:1.3
	cygwin-1_7_30-release:1.3
	cygwin-1_7_29-release:1.3
	cygwin-1_7_29-release-branchpoint:1.3.0.2
	cygwin-pre-user-db:1.3
	cygwin-1_7_28-release:1.3
	cygwin-1_7_27-release:1.3
	cygwin-1_7_26-release:1.3
	cygwin-1_7_25-release:1.3
	cygwin-1_7_24-release:1.3
	cygwin-1_7_23-release:1.3
	cygwin-1_7_22-release:1.3
	cygwin-1_7_21-release:1.3
	cygwin-1_7_20-release:1.3
	cygwin-1_7_19-release:1.3
	cygwin-64bit-postmerge:1.3
	cygwin-64bit-premerge-branch:1.2.0.8
	cygwin-64bit-premerge:1.2
	cygwin-1_7_18-release:1.2
	post-ptmalloc3:1.2.6.1
	pre-ptmalloc3:1.2.6.1
	cygwin-1_7_17-release:1.2
	cygwin-64bit-branch:1.2.0.6
	cygwin-1_7_16-release:1.2
	cygwin-1_7_15-release:1.2
	cygwin-1_7_14_2-release:1.2
	cygwin-1_7_14-release:1.2
	cygwin-1_7_12-release:1.2
	cygwin-1_7_11-release:1.2
	cygwin-1_7_10-release:1.2
	signal-rewrite:1.2.0.4
	pre-notty:1.2
	cygwin-1_7_9-release:1.2
	cv-post-1_7_9:1.2.0.2
	cygwin-1_7_8-release:1.2
	cygwin-1_7_7-release:1.1
	cygwin-1_7_5-release:1.1
	cygwin-1_7_4-release:1.1
	cygwin-1_7_3-release:1.1
	cygwin-1_7_2-release:1.1
	fifo_doover3:1.1.0.4
	cygwin-1_7_1-release:1.1
	prefifo:1.1
	cv-branch-2:1.1.0.2
	pre-ripout-set_console_state_for_spawn:1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.04.23.09.44.33;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2010.10.02.19.03.44;	author corinna;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	2008.05.20.15.11.23;	author corinna;	state Exp;
branches;
next	;

1.2.6.1
date	2013.02.16.12.25.40;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.3
log
@	* Merge in cygwin-64bit-branch.
@
text
@/* nfs.h

   Copyright 2008, 2010 Red Hat, Inc.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#define NFS_ACT_ON_LINK "NfsActOnLink"
#define NFS_SYML_TARGET "NfsSymlinkTargetName"
#define NFS_V3_ATTR     "NfsV3Attributes"

/* NFS datastructures per RFC 1813, as returned by SFU NFS. */

enum ftype3 {
  NF3REG    = 1,
  NF3DIR    = 2,
  NF3BLK    = 3,
  NF3CHR    = 4,
  NF3LNK    = 5,
  NF3SOCK   = 6,
  NF3FIFO   = 7
};

#pragma pack (push, 4)
struct nfs_timestruc_t
{
  int32_t  tv_sec;
  uint32_t tv_nsec;
};

struct fattr3 {
  uint32_t type;
  uint32_t mode;
  uint32_t nlink;
  uint32_t uid;
  uint32_t gid;
  uint32_t filler1;
  uint64_t size;
  uint64_t used;
  struct
    {
      uint32_t specdata1;
      uint32_t specdata2;
    } rdev;
  uint64_t fsid;
  uint64_t fileid;
  struct nfs_timestruc_t atime;
  struct nfs_timestruc_t mtime;
  struct nfs_timestruc_t ctime;
};
#pragma pack (pop)

struct nfs_aol_ffei_t {
  ULONG NextEntryOffset;
  UCHAR Flags;
  UCHAR EaNameLength;
  USHORT EaValueLength;
  CHAR EaName[sizeof (NFS_ACT_ON_LINK)];
};
extern struct nfs_aol_ffei_t nfs_aol_ffei;

extern uint32_t nfs_type_mapping[];

extern NTSTATUS nfs_fetch_fattr3 (HANDLE h, fattr3 *fattr_buf);
@


1.2
log
@	* fhandler_disk_file.cc (fhandler_base::fstat_by_nfs_ea): Simplify.
	Just call nfs_fetch_fattr3 if called via fstat.
	* nfs.cc (nfs_fetch_fattr3): New function to fetch NFS fattr3 info from
	file handle.
	* nfs.h (nfs_fetch_fattr3): Declare.
	* path.cc (symlink_info::check): Simplify NFS case.  Just call
	nfs_fetch_fattr3.
@
text
@d25 7
d48 3
a50 3
  timestruc_t atime;
  timestruc_t mtime;
  timestruc_t ctime;
d52 1
@


1.2.6.1
log
@	* nfs.h: Make sure packing of NFS fattr3 struct is 4 byte.
	(struct nfs_timestruc_t): Define.
	(struct fattr3): Define timestamps as type struct nfs_timestruc_t.
	* fhandler_disk_file.cc (fhandler_base::fstat_by_nfs_ea): Copy
	each timestruc_t component separately to accommodate different size.
@
text
@a24 7
#pragma pack (push, 4)
struct nfs_timestruc_t
{
  int32_t  tv_sec;
  uint32_t tv_nsec;
};

d41 3
a43 3
  struct nfs_timestruc_t atime;
  struct nfs_timestruc_t mtime;
  struct nfs_timestruc_t ctime;
a44 1
#pragma pack (pop)
@


1.1
log
@	* Makefile.in (DLL_OFILES): Add nfs.o.
	* fhandler.cc (fhandler_base::open): Open files on NFS shares with
	correct access flags and EAs.
	* fhandler.h (fhandler_base::fstat_by_nfs_ea): Declare.
	* fhandler_disk_file.cc (fhandler_base::fstat_by_nfs_ea): New method.
	(fhandler_base::fstat_by_handle): Call fstat_by_nfs_ea for files on
	NFS shares.
	(fhandler_disk_file::fchmod): Use NFS specific method to set mode for
	files on NFS shares.  Don't overrule errno from call to
	set_file_attribute with errno from NtSetInformationFile call.
	(fhandler_disk_file::fchown): Add comment.
	* mount.cc (fillout_mntent): Accommodate change in second parameter
	to fs_info::update.
	* nfs.cc: New file.
	* nfs.h: New file.
	* path.cc (fs_info::update): Take handle instead of bool as second
	parameter.  Use that handle if it's not NULL.  Only close handle if
	it has been opened here.  Use static defined buffers instead of
	alloca'd buffers.
	(path_conv::check): Call symlink_info::check with reference to fs.
	Don't call fs.update here if file exists.
	(conv_path_list): Prefer tmp_pathbuf buffer over using alloca.
	(symlink_worker): Use NFS specific method to create symlinks on NFS
	shares.  Prefer tmp_pathbuf buffer over using alloca.
	(symlink_info::check_shortcut): Reopen file from incoming handle
	with necessary FILE_GENERIC_READ flag.  Prefer tmp_pathbuf buffer over
	using alloca.
	(symlink_info::check_sysfile): Ditto.
	(symlink_info::check_reparse_point): Use tmp_pathbuf buffer to
	allocate REPARSE_DATA_BUFFER.
	(symlink_info::check_nfs_symlink): New method.
	(enum symlink_t): Remove.
	(symlink_info::check): Don't use NtQueryAttributesFile.  Rather, open
	file with necessary access flags and call NtQueryInformationFile.  Fix
	error handling in case file can't be opened.  For existing files, call
	fs_info::update here.  Restructure symlink checking to accommodate the
	fact that the file is already open.  Add case for NFS symlinks.
	* path.h (fs_info::update): Take handle instead of bool as second
	parameter.
@
text
@d3 1
a3 1
   Copyright 2008 Red Hat, Inc.
d56 2
@

