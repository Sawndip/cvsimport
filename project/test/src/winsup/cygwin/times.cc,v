head	1.126;
access;
symbols
	cygwin-1_7_35-release:1.126
	cygwin-1_7_34-release:1.125
	cygwin-1_7_33-release:1.123.2.1
	cygwin-1_7_32-release:1.123
	cygwin-1_7_31-release:1.123
	cygwin-1_7_30-release:1.123
	cygwin-1_7_29-release:1.123
	cygwin-1_7_29-release-branchpoint:1.123.0.2
	cygwin-pre-user-db:1.123
	cygwin-1_7_28-release:1.123
	cygwin-1_7_27-release:1.123
	cygwin-1_7_26-release:1.123
	cygwin-1_7_25-release:1.122
	cygwin-1_7_24-release:1.122
	cygwin-1_7_23-release:1.122
	cygwin-1_7_22-release:1.122
	cygwin-1_7_21-release:1.122
	cygwin-1_7_20-release:1.119
	cygwin-1_7_19-release:1.119
	cygwin-64bit-postmerge:1.119
	cygwin-64bit-premerge-branch:1.118.0.2
	cygwin-64bit-premerge:1.118
	cygwin-1_7_18-release:1.118
	post-ptmalloc3:1.116.2.2
	pre-ptmalloc3:1.116.2.2
	cygwin-1_7_17-release:1.116
	cygwin-64bit-branch:1.116.0.2
	cygwin-1_7_16-release:1.116
	cygwin-1_7_15-release:1.116
	cygwin-1_7_14_2-release:1.116
	cygwin-1_7_14-release:1.116
	cygwin-1_7_12-release:1.116
	cygwin-1_7_11-release:1.113
	cygwin-1_7_10-release:1.113
	signal-rewrite:1.111.0.2
	pre-notty:1.110
	cygwin-1_7_9-release:1.103
	cv-post-1_7_9:1.103.0.2
	cygwin-1_7_8-release:1.103
	cygwin-1_7_7-release:1.103
	cygwin-1_7_5-release:1.100
	cygwin-1_7_4-release:1.100
	cygwin-1_7_3-release:1.100
	cygwin-1_7_2-release:1.100
	fifo_doover3:1.99.0.2
	cygwin-1_7_1-release:1.98
	prefifo:1.97
	cv-branch-2:1.97.0.2
	pre-ripout-set_console_state_for_spawn:1.95
	EOL_registry_mounts:1.93
	preoverlapped:1.91
	drop_9x_support_start:1.88
	cr-0x5f1:1.88.0.4
	cv-branch:1.88.0.2
	pre-ptymaster-archetype:1.88
	cr-0x3b58:1.87.0.4
	cr-0x5ef:1.87.0.2
	after-mmap-privanon-noreserve:1.82
	after-mmap-revamp:1.82
	before-mmap-revamp:1.82
	cgf-more-exit-sync:1.66
	post_wait_sig_exit:1.66
	pre_wait_sig_exit:1.65
	reparent-point:1.54
	noreparent:1.54.0.2
	cr-0x5e6:1.51.0.2
	cr-0x9e:1.50.0.6
	cr-0x9d:1.50.0.4
	cgf-deleteme:1.50.0.2
	pre-sigrewrite:1.49
	corinna-01:1.49
	cr-0x9c:1.48.0.4
	cr-0x9b:1.48.0.2
	cr-0x99:1.46
	Z-emcb-cygwin_daemon:1.46.0.2
	w32api-2_2:1.44
	mingw-runtime-2_4:1.44
	pre-cgf-merge:1.48
	cgf-dev-branch:1.44.0.12
	predaemon:1.27
	cygwin_daemon_merge_HEAD:1.27
	pregp02r1:1.27.0.2
	cygnus_cvs_20020108_pre:1.23
	Z-cygwin_daemon_merge-new_HEAD:1.41
	Z-cygwin_daemon_merge_HEAD:1.41
	cygwin_daemon:1.23.0.2;
locks; strict;
comment	@// @;
expand	@o@;


1.126
date	2015.02.20.15.13.46;	author corinna;	state Exp;
branches;
next	1.125;

1.125
date	2014.10.22.19.03.01;	author yselkowitz;	state Exp;
branches;
next	1.124;

1.124
date	2014.08.22.09.21.32;	author corinna;	state Exp;
branches;
next	1.123;

1.123
date	2013.11.25.11.38.08;	author corinna;	state Exp;
branches
	1.123.2.1;
next	1.122;

1.122
date	2013.06.17.08.33.41;	author corinna;	state Exp;
branches;
next	1.121;

1.121
date	2013.06.14.15.41.17;	author corinna;	state Exp;
branches;
next	1.120;

1.120
date	2013.06.14.09.09.41;	author corinna;	state Exp;
branches;
next	1.119;

1.119
date	2013.04.23.09.44.34;	author corinna;	state Exp;
branches;
next	1.118;

1.118
date	2013.04.11.19.49.58;	author corinna;	state Exp;
branches;
next	1.117;

1.117
date	2013.01.21.04.38.29;	author cgf;	state Exp;
branches;
next	1.116;

1.116
date	2012.03.28.07.38.35;	author corinna;	state Exp;
branches
	1.116.2.1;
next	1.115;

1.115
date	2012.03.27.08.50.45;	author corinna;	state Exp;
branches;
next	1.114;

1.114
date	2012.03.26.09.05.50;	author corinna;	state Exp;
branches;
next	1.113;

1.113
date	2011.12.13.11.38.12;	author corinna;	state Exp;
branches;
next	1.112;

1.112
date	2011.12.03.21.43.27;	author cgf;	state Exp;
branches;
next	1.111;

1.111
date	2011.08.03.16.40.48;	author yselkowitz;	state Exp;
branches;
next	1.110;

1.110
date	2011.06.06.05.02.13;	author cgf;	state Exp;
branches;
next	1.109;

1.109
date	2011.05.17.17.08.09;	author yselkowitz;	state Exp;
branches;
next	1.108;

1.108
date	2011.05.09.08.57.46;	author yselkowitz;	state Exp;
branches;
next	1.107;

1.107
date	2011.05.02.15.28.35;	author cgf;	state Exp;
branches;
next	1.106;

1.106
date	2011.03.30.21.54.09;	author corinna;	state Exp;
branches;
next	1.105;

1.105
date	2011.03.30.11.30.34;	author corinna;	state Exp;
branches;
next	1.104;

1.104
date	2011.03.29.10.21.30;	author corinna;	state Exp;
branches;
next	1.103;

1.103
date	2010.08.09.16.47.47;	author yselkowitz;	state Exp;
branches
	1.103.2.1;
next	1.102;

1.102
date	2010.06.12.16.34.26;	author cgf;	state Exp;
branches;
next	1.101;

1.101
date	2010.05.26.14.48.17;	author cgf;	state Exp;
branches;
next	1.100;

1.100
date	2010.01.12.10.14.59;	author corinna;	state Exp;
branches;
next	1.99;

1.99
date	2009.12.18.20.32.04;	author corinna;	state Exp;
branches;
next	1.98;

1.98
date	2009.10.13.02.26.33;	author ericb;	state Exp;
branches;
next	1.97;

1.97
date	2009.01.03.05.12.22;	author cgf;	state Exp;
branches;
next	1.96;

1.96
date	2008.07.16.20.20.45;	author corinna;	state Exp;
branches;
next	1.95;

1.95
date	2008.04.24.09.59.54;	author corinna;	state Exp;
branches;
next	1.94;

1.94
date	2008.04.07.18.45.59;	author cgf;	state Exp;
branches;
next	1.93;

1.93
date	2007.08.14.14.48.52;	author corinna;	state Exp;
branches;
next	1.92;

1.92
date	2007.07.06.20.09.23;	author corinna;	state Exp;
branches;
next	1.91;

1.91
date	2007.07.04.10.43.29;	author corinna;	state Exp;
branches;
next	1.90;

1.90
date	2007.02.22.17.09.46;	author corinna;	state Exp;
branches;
next	1.89;

1.89
date	2007.02.22.16.22.38;	author corinna;	state Exp;
branches;
next	1.88;

1.88
date	2006.02.11.00.06.50;	author cgf;	state Exp;
branches
	1.88.4.1;
next	1.87;

1.87
date	2005.12.13.02.55.11;	author cgf;	state Exp;
branches;
next	1.86;

1.86
date	2005.12.13.02.02.51;	author cgf;	state Exp;
branches;
next	1.85;

1.85
date	2005.12.13.00.43.46;	author cgf;	state Exp;
branches;
next	1.84;

1.84
date	2005.12.07.22.28.49;	author cgf;	state Exp;
branches;
next	1.83;

1.83
date	2005.11.30.18.14.07;	author cgf;	state Exp;
branches;
next	1.82;

1.82
date	2005.11.18.15.57.16;	author cgf;	state Exp;
branches;
next	1.81;

1.81
date	2005.11.16.05.12.11;	author cgf;	state Exp;
branches;
next	1.80;

1.80
date	2005.11.11.16.42.15;	author cgf;	state Exp;
branches;
next	1.79;

1.79
date	2005.11.11.04.07.30;	author cgf;	state Exp;
branches;
next	1.78;

1.78
date	2005.11.07.17.08.08;	author corinna;	state Exp;
branches;
next	1.77;

1.77
date	2005.11.04.20.45.56;	author cgf;	state Exp;
branches;
next	1.76;

1.76
date	2005.11.04.17.38.32;	author cgf;	state Exp;
branches;
next	1.75;

1.75
date	2005.11.04.02.01.45;	author cgf;	state Exp;
branches;
next	1.74;

1.74
date	2005.11.03.14.59.23;	author cgf;	state Exp;
branches;
next	1.73;

1.73
date	2005.11.03.02.41.51;	author cgf;	state Exp;
branches;
next	1.72;

1.72
date	2005.11.02.18.28.40;	author cgf;	state Exp;
branches;
next	1.71;

1.71
date	2005.10.24.15.09.07;	author cgf;	state Exp;
branches;
next	1.70;

1.70
date	2005.10.23.23.47.45;	author cgf;	state Exp;
branches;
next	1.69;

1.69
date	2005.10.20.14.26.23;	author corinna;	state Exp;
branches;
next	1.68;

1.68
date	2005.10.19.17.11.25;	author cgf;	state Exp;
branches;
next	1.67;

1.67
date	2005.10.19.16.50.43;	author cgf;	state Exp;
branches;
next	1.66;

1.66
date	2005.09.14.14.27.56;	author cgf;	state Exp;
branches;
next	1.65;

1.65
date	2005.07.03.02.40.30;	author cgf;	state Exp;
branches;
next	1.64;

1.64
date	2005.05.28.21.31.17;	author cgf;	state Exp;
branches;
next	1.63;

1.63
date	2005.03.27.23.33.30;	author cgf;	state Exp;
branches;
next	1.62;

1.62
date	2005.03.02.08.28.54;	author corinna;	state Exp;
branches;
next	1.61;

1.61
date	2005.02.20.11.44.32;	author corinna;	state Exp;
branches;
next	1.60;

1.60
date	2005.02.20.04.25.33;	author cgf;	state Exp;
branches;
next	1.59;

1.59
date	2005.02.17.12.08.16;	author corinna;	state Exp;
branches;
next	1.58;

1.58
date	2005.02.11.14.27.36;	author corinna;	state Exp;
branches;
next	1.57;

1.57
date	2005.02.08.20.59.40;	author corinna;	state Exp;
branches;
next	1.56;

1.56
date	2005.02.02.09.46.52;	author corinna;	state Exp;
branches;
next	1.55;

1.55
date	2004.11.26.04.15.09;	author cgf;	state Exp;
branches;
next	1.54;

1.54
date	2004.09.10.08.30.51;	author corinna;	state Exp;
branches
	1.54.2.1;
next	1.53;

1.53
date	2004.06.30.16.00.32;	author corinna;	state Exp;
branches;
next	1.52;

1.52
date	2004.06.30.15.50.08;	author corinna;	state Exp;
branches;
next	1.51;

1.51
date	2004.01.19.05.46.54;	author cgf;	state Exp;
branches;
next	1.50;

1.50
date	2003.12.23.16.26.31;	author cgf;	state Exp;
branches
	1.50.2.1;
next	1.49;

1.49
date	2003.09.25.00.37.17;	author cgf;	state Exp;
branches;
next	1.48;

1.48
date	2003.09.07.05.18.01;	author cgf;	state Exp;
branches;
next	1.47;

1.47
date	2003.09.06.02.14.06;	author cgf;	state Exp;
branches;
next	1.46;

1.46
date	2003.07.17.05.27.03;	author cgf;	state Exp;
branches;
next	1.45;

1.45
date	2003.06.16.03.24.12;	author cgf;	state Exp;
branches;
next	1.44;

1.44
date	2002.10.21.01.00.57;	author cgf;	state Exp;
branches
	1.44.12.1;
next	1.43;

1.43
date	2002.09.30.04.35.18;	author cgf;	state Exp;
branches;
next	1.42;

1.42
date	2002.09.23.00.31.30;	author cgf;	state Exp;
branches;
next	1.41;

1.41
date	2002.09.22.03.38.57;	author cgf;	state Exp;
branches;
next	1.40;

1.40
date	2002.09.19.15.12.48;	author cgf;	state Exp;
branches;
next	1.39;

1.39
date	2002.07.25.15.59.49;	author cgf;	state Exp;
branches;
next	1.38;

1.38
date	2002.06.08.01.24.58;	author cgf;	state Exp;
branches;
next	1.37;

1.37
date	2002.06.07.03.44.33;	author cgf;	state Exp;
branches;
next	1.36;

1.36
date	2002.06.06.15.35.07;	author corinna;	state Exp;
branches;
next	1.35;

1.35
date	2002.06.06.00.09.55;	author cgf;	state Exp;
branches;
next	1.34;

1.34
date	2002.06.02.06.07.01;	author cgf;	state Exp;
branches;
next	1.33;

1.33
date	2002.05.25.02.22.50;	author cgf;	state Exp;
branches;
next	1.32;

1.32
date	2002.05.17.08.32.29;	author corinna;	state Exp;
branches;
next	1.31;

1.31
date	2002.05.12.01.50.38;	author cgf;	state Exp;
branches;
next	1.30;

1.30
date	2002.03.28.05.20.53;	author cgf;	state Exp;
branches;
next	1.29;

1.29
date	2002.03.28.04.56.06;	author cgf;	state Exp;
branches;
next	1.28;

1.28
date	2002.02.28.19.06.42;	author cgf;	state Exp;
branches;
next	1.27;

1.27
date	2002.02.17.04.59.55;	author cgf;	state Exp;
branches;
next	1.26;

1.26
date	2002.02.15.17.06.40;	author cgf;	state Exp;
branches;
next	1.25;

1.25
date	2002.02.15.07.05.05;	author cgf;	state Exp;
branches;
next	1.24;

1.24
date	2002.01.14.20.39.59;	author corinna;	state Exp;
branches;
next	1.23;

1.23
date	2001.09.16.14.26.11;	author duda;	state Exp;
branches
	1.23.2.1;
next	1.22;

1.22
date	2001.09.12.17.46.36;	author corinna;	state Exp;
branches;
next	1.21;

1.21
date	2001.09.07.21.32.05;	author cgf;	state Exp;
branches;
next	1.20;

1.20
date	2001.08.15.10.48.43;	author corinna;	state Exp;
branches;
next	1.19;

1.19
date	2001.08.15.10.21.39;	author corinna;	state Exp;
branches;
next	1.18;

1.18
date	2001.08.04.21.10.52;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2001.07.26.19.22.24;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2001.06.24.22.26.53;	author cgf;	state Exp;
branches;
next	1.15;

1.15
date	2001.04.01.03.06.02;	author cgf;	state Exp;
branches;
next	1.14;

1.14
date	2001.03.18.03.34.05;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2001.02.26.22.36.09;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2000.10.28.05.41.43;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2000.10.20.21.45.50;	author dj;	state Exp;
branches;
next	1.10;

1.10
date	2000.10.16.23.55.57;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2000.09.08.02.56.55;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2000.08.30.22.37.24;	author dj;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.22.05.10.20;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.22.03.58.47;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.12.05.35.42;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.02.16.28.18;	author dj;	state Exp;
branches;
next	1.3;

1.3
date	2000.03.19.04.14.07;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.19.04.05.14;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.123.2.1
date	2014.11.13.12.53.07;	author corinna;	state Exp;
branches;
next	;

1.116.2.1
date	2012.12.10.11.45.51;	author corinna;	state Exp;
branches;
next	1.116.2.2;

1.116.2.2
date	2013.01.21.13.52.11;	author corinna;	state Exp;
branches;
next	1.116.2.3;

1.116.2.3
date	2013.04.11.19.50.04;	author corinna;	state Exp;
branches;
next	;

1.103.2.1
date	2011.03.11.10.21.55;	author corinna;	state Exp;
branches;
next	1.103.2.2;

1.103.2.2
date	2011.03.11.11.17.50;	author corinna;	state Exp;
branches;
next	1.103.2.3;

1.103.2.3
date	2011.03.11.11.22.06;	author corinna;	state Exp;
branches;
next	1.103.2.4;

1.103.2.4
date	2011.03.11.11.24.38;	author corinna;	state Exp;
branches;
next	1.103.2.5;

1.103.2.5
date	2011.03.11.15.56.05;	author corinna;	state Exp;
branches;
next	1.103.2.6;

1.103.2.6
date	2011.03.12.10.02.53;	author corinna;	state Exp;
branches;
next	;

1.88.4.1
date	2007.11.12.15.30.20;	author corinna;	state Exp;
branches;
next	;

1.54.2.1
date	2004.11.16.15.16.57;	author cgf;	state Exp;
branches;
next	;

1.50.2.1
date	2004.01.19.05.38.24;	author cgf;	state Exp;
branches;
next	;

1.44.12.1
date	2003.02.14.03.03.29;	author cgf;	state Exp;
branches;
next	1.44.12.2;

1.44.12.2
date	2003.07.06.05.10.43;	author cgf;	state Exp;
branches;
next	1.44.12.3;

1.44.12.3
date	2003.08.06.03.58.58;	author cgf;	state Exp;
branches;
next	1.44.12.4;

1.44.12.4
date	2003.09.10.16.23.39;	author cgf;	state Exp;
branches;
next	;

1.23.2.1
date	2002.01.15.12.52.52;	author rbcollins;	state Exp;
branches;
next	1.23.2.2;

1.23.2.2
date	2002.02.28.12.53.28;	author rbcollins;	state Exp;
branches;
next	1.23.2.3;

1.23.2.3
date	2002.03.03.12.42.03;	author rbcollins;	state Exp;
branches;
next	1.23.2.4;

1.23.2.4
date	2002.06.13.14.34.14;	author rbcollins;	state Exp;
branches;
next	1.23.2.5;

1.23.2.5
date	2002.07.26.19.03.36;	author scottc;	state Exp;
branches;
next	1.23.2.6;

1.23.2.6
date	2002.09.19.21.51.22;	author scottc;	state Exp;
branches;
next	1.23.2.7;

1.23.2.7
date	2002.09.22.10.01.29;	author scottc;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.126
log
@	* grp.cc (internal_getgroups): Take additional timeout_ns parameter.
	Restrict fetching group account entries from user token groups by
	timeout_ns 100ns-intervals.  Add preceding comment to explain why.
	* pwdgrp.h (internal_getgroups): Align prototype.
	* times.cc (GetTickCount_ns): New function.
	* uinfo.cc (internal_getlogin): Call internal_getgroups wih 300ms
	timeout.
	* winsup.h (GetTickCount_ns): Declare.
@
text
@/* times.cc

   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#define __timezonefunc__
#include "winsup.h"
#include <sys/times.h>
#include <sys/timeb.h>
#include <utime.h>
#include <stdlib.h>
#include <unistd.h>
#include "cygerrno.h"
#include "security.h"
#include "path.h"
#include "fhandler.h"
#include "dtable.h"
#include "cygheap.h"
#include "pinfo.h"
#include "thread.h"
#include "cygtls.h"
#include "ntdll.h"

hires_ms NO_COPY gtod;

hires_ns NO_COPY ntod;

/* Temporary declare here until 32 bit w32api follows suit. */
extern "C" { void WINAPI GetSystemTimePreciseAsFileTime (LPFILETIME); }

static inline void __attribute__ ((always_inline))
get_system_time (PLARGE_INTEGER systime)
{
  wincap.has_precise_system_time ()
  	? GetSystemTimePreciseAsFileTime ((LPFILETIME) systime)
	: GetSystemTimeAsFileTime ((LPFILETIME) systime);
}

/* There's no GetTickCount64 on pre-Vista.  This is the do-it-yourself kit,
   as it was implemented as hires_ms::timeGetTime_ns once.  Resurrect the
   functionality to allow reliable (albeit low res) timing values.  The
   function returns the value in 100ns interval to avoid a division by 10000. */
ULONGLONG
GetTickCount_ns ()
{
  LARGE_INTEGER t;
  do
    {
      t.HighPart = SharedUserData.InterruptTime.High1Time;
      t.LowPart = SharedUserData.InterruptTime.LowPart;
    }
  while (t.HighPart != SharedUserData.InterruptTime.High2Time);
  return (ULONGLONG) t.QuadPart;
}

/* Cygwin internal */
static uint64_t __stdcall
__to_clock_t (PLARGE_INTEGER src, int flag)
{
  uint64_t total = src->QuadPart;
  /* Convert into clock ticks - the total is in 10ths of a usec.  */
  if (flag)
    total -= FACTOR;

  total /= NSPERSEC / CLOCKS_PER_SEC;
  return total;
}

/* times: POSIX 4.5.2.1 */
extern "C" clock_t
times (struct tms *buf)
{
  static SYSTEM_TIMEOFDAY_INFORMATION stodi;
  KERNEL_USER_TIMES kut;
  LARGE_INTEGER ticks;
  clock_t tc = (clock_t) -1;

  __try
    {
      /* Fetch boot time if we haven't already. */
      if (!stodi.BootTime.QuadPart)
	NtQuerySystemInformation (SystemTimeOfDayInformation,
				  &stodi, sizeof stodi, NULL);

      NtQueryInformationProcess (NtCurrentProcess (), ProcessTimes,
				 &kut, sizeof kut, NULL);
      get_system_time (&ticks);

      /* uptime */
      ticks.QuadPart -= stodi.BootTime.QuadPart;
      /* ticks is in in 100ns, convert to clock ticks. */
      tc = (clock_t) (ticks.QuadPart * CLOCKS_PER_SEC / NSPERSEC);

      buf->tms_stime = __to_clock_t (&kut.KernelTime, 0);
      buf->tms_utime = __to_clock_t (&kut.UserTime, 0);
      timeval_to_filetime (&myself->rusage_children.ru_stime, &kut.KernelTime);
      buf->tms_cstime = __to_clock_t (&kut.KernelTime, 1);
      timeval_to_filetime (&myself->rusage_children.ru_utime, &kut.UserTime);
      buf->tms_cutime = __to_clock_t (&kut.UserTime, 1);
    }
  __except (EFAULT)
    {
      tc = (clock_t) -1;
    }
  __endtry
  syscall_printf ("%D = times(%p)", tc, buf);
  return tc;
}

EXPORT_ALIAS (times, _times)

/* settimeofday: BSD */
extern "C" int
settimeofday (const struct timeval *tv, const struct timezone *tz)
{
  SYSTEMTIME st;
  struct tm *ptm;
  int res = -1;

  __try
    {
      if (tv->tv_usec < 0 || tv->tv_usec >= 1000000)
	{
	  set_errno (EINVAL);
	  return -1;
	}

      ptm = gmtime (&tv->tv_sec);
      st.wYear	   = ptm->tm_year + 1900;
      st.wMonth	   = ptm->tm_mon + 1;
      st.wDayOfWeek    = ptm->tm_wday;
      st.wDay	   = ptm->tm_mday;
      st.wHour	   = ptm->tm_hour;
      st.wMinute       = ptm->tm_min;
      st.wSecond       = ptm->tm_sec;
      st.wMilliseconds = tv->tv_usec / 1000;

      res = -!SetSystemTime (&st);
      gtod.reset ();

      if (res)
	set_errno (EPERM);
    }
  __except (EFAULT)
    {
      res = -1;
    }
  __endtry
  syscall_printf ("%R = settimeofday(%p, %p)", res, tv, tz);
  return res;
}

/* stime: SVr4 */
extern "C" int
stime (const time_t *t)
{
  struct timeval tv = { *t, 0 };
  return settimeofday(&tv, NULL);
}

/* timezone: standards? */
extern "C" char *
timezone (void)
{
  char *b = _my_tls.locals.timezone_buf;

  tzset ();
  __small_sprintf (b,"GMT%+d:%02d", (int) (-_timezone / 3600), (int) (abs (_timezone / 60) % 60));
  return b;
}

/* Cygwin internal */
void __stdcall
totimeval (struct timeval *dst, PLARGE_INTEGER src, int sub, int flag)
{
  int64_t x = __to_clock_t (src, flag);

  x *= (int64_t) 1000000 / CLOCKS_PER_SEC; /* Turn x into usecs */
  x -= (int64_t) sub * 1000000;

  dst->tv_usec = x % 1000000; /* And split */
  dst->tv_sec = x / 1000000;
}

/* FIXME: Make thread safe */
extern "C" int
gettimeofday (struct timeval *__restrict tv, void *__restrict tzvp)
{
  struct timezone *tz = (struct timezone *) tzvp;
  static bool tzflag;
  LONGLONG now = gtod.usecs ();

  if (now == (LONGLONG) -1)
    return -1;

  tv->tv_sec = now / 1000000;
  tv->tv_usec = now % 1000000;

  if (tz != NULL)
    {
      if (!tzflag)
	{
	  tzset ();
	  tzflag = true;
	}
      tz->tz_minuteswest = _timezone / 60;
      tz->tz_dsttime = _daylight;
    }

  return 0;
}

EXPORT_ALIAS (gettimeofday, _gettimeofday)

/* Cygwin internal */
void __stdcall
timespec_to_filetime (const struct timespec *time_in, PLARGE_INTEGER out)
{
  if (time_in->tv_nsec == UTIME_OMIT)
    out->QuadPart = 0;
  else
    out->QuadPart = time_in->tv_sec * NSPERSEC
		    + time_in->tv_nsec / (1000000000/NSPERSEC) + FACTOR;
}

/* Cygwin internal */
void __stdcall
timeval_to_filetime (const struct timeval *time_in, PLARGE_INTEGER out)
{
  out->QuadPart = time_in->tv_sec * NSPERSEC
		  + time_in->tv_usec * (NSPERSEC/1000000) + FACTOR;
}

/* Cygwin internal */
static timeval __stdcall
time_t_to_timeval (time_t in)
{
  timeval res;
  res.tv_sec = in;
  res.tv_usec = 0;
  return res;
}

/* Cygwin internal */
static const struct timespec *
timeval_to_timespec (const struct timeval *tvp, struct timespec *tmp)
{
  if (!tvp)
    return NULL;

  tmp[0].tv_sec = tvp[0].tv_sec;
  tmp[0].tv_nsec = tvp[0].tv_usec * 1000;
  if (tmp[0].tv_nsec < 0)
    tmp[0].tv_nsec = 0;
  else if (tmp[0].tv_nsec > 999999999)
    tmp[0].tv_nsec = 999999999;

  tmp[1].tv_sec = tvp[1].tv_sec;
  tmp[1].tv_nsec = tvp[1].tv_usec * 1000;
  if (tmp[1].tv_nsec < 0)
    tmp[1].tv_nsec = 0;
  else if (tmp[1].tv_nsec > 999999999)
    tmp[1].tv_nsec = 999999999;

  return tmp;
}

/* Cygwin internal */
/* Convert a Win32 time to "UNIX" format. */
time_t __stdcall
to_time_t (PLARGE_INTEGER ptr)
{
  /* A file time is the number of 100ns since jan 1 1601
     stuffed into two long words.
     A time_t is the number of seconds since jan 1 1970.  */

  int64_t x = ptr->QuadPart;

  /* pass "no time" as epoch */
  if (x == 0)
    return 0;

  x -= FACTOR;			/* number of 100ns between 1601 and 1970 */
  x /= NSPERSEC;		/* number of 100ns in a second */
  return x;
}

/* Cygwin internal */
/* Convert a Win32 time to "UNIX" timestruc_t format. */
void __stdcall
to_timestruc_t (PLARGE_INTEGER ptr, timestruc_t *out)
{
  /* A file time is the number of 100ns since jan 1 1601
     stuffed into two long words.
     A timestruc_t is the number of seconds and microseconds since jan 1 1970
     stuffed into a time_t and a long.  */

  int64_t rem;
  int64_t x = ptr->QuadPart;

  /* pass "no time" as epoch */
  if (x == 0)
    {
      out->tv_sec = 0;
      out->tv_nsec = 0;
      return;
    }

  x -= FACTOR;			/* number of 100ns between 1601 and 1970 */
  rem = x % NSPERSEC;
  x /= NSPERSEC;		/* number of 100ns in a second */
  out->tv_nsec = rem * 100;	/* as tv_nsec is in nanoseconds */
  out->tv_sec = x;
}

/* Cygwin internal */
/* Get the current time as a "UNIX" timestruc_t format. */
void __stdcall
time_as_timestruc_t (timestruc_t * out)
{
  LARGE_INTEGER systime;

  get_system_time (&systime);
  to_timestruc_t (&systime, out);
}

/* time: POSIX 4.5.1.1, C 4.12.2.4 */
/* Return number of seconds since 00:00 UTC on jan 1, 1970 */
extern "C" time_t
time (time_t * ptr)
{
  time_t res;
  LARGE_INTEGER systime;

  get_system_time (&systime);
  res = to_time_t (&systime);
  if (ptr)
    *ptr = res;

  syscall_printf ("%d = time(%p)", res, ptr);

  return res;
}

int
utimens_worker (path_conv &win32, const struct timespec *tvp)
{
  int res = -1;

  if (win32.error)
    set_errno (win32.error);
  else
    {
      fhandler_base *fh = NULL;
      bool fromfd = false;

      cygheap_fdenum cfd (true);
      while (cfd.next () >= 0)
	if (cfd->get_access () & (FILE_WRITE_ATTRIBUTES | GENERIC_WRITE)
	    && RtlEqualUnicodeString (cfd->pc.get_nt_native_path (),
				      win32.get_nt_native_path (),
				      cfd->pc.objcaseinsensitive ()))
	  {
	    fh = cfd;
	    fromfd = true;
	    break;
	  }

      if (!fh)
	{
	  if (!(fh = build_fh_pc (win32)))
	    goto error;

	  if (fh->error ())
	    {
	      debug_printf ("got %d error from build_fh_pc", fh->error ());
	      set_errno (fh->error ());
	    }
	}

      res = fh->utimens (tvp);

      if (!fromfd)
	delete fh;
    }

error:
  syscall_printf ("%R = utimes(%S, %p)", res, win32.get_nt_native_path (), tvp);
  return res;
}

/* utimes: POSIX/SUSv3 */
extern "C" int
utimes (const char *path, const struct timeval *tvp)
{
  path_conv win32 (path, PC_POSIX | PC_SYM_FOLLOW, stat_suffixes);
  struct timespec tmp[2];
  return utimens_worker (win32, timeval_to_timespec (tvp, tmp));
}

/* BSD */
extern "C" int
lutimes (const char *path, const struct timeval *tvp)
{
  path_conv win32 (path, PC_POSIX | PC_SYM_NOFOLLOW, stat_suffixes);
  struct timespec tmp[2];
  return utimens_worker (win32, timeval_to_timespec (tvp, tmp));
}

/* futimens: POSIX/SUSv4 */
extern "C" int
futimens (int fd, const struct timespec *tvp)
{
  int res;

  cygheap_fdget cfd (fd);
  if (cfd < 0)
    res = -1;
  else if (cfd->get_access () & (FILE_WRITE_ATTRIBUTES | GENERIC_WRITE))
    res = cfd->utimens (tvp);
  else
    res = utimens_worker (cfd->pc, tvp);
  syscall_printf ("%d = futimens(%d, %p)", res, fd, tvp);
  return res;
}

/* BSD */
extern "C" int
futimes (int fd, const struct timeval *tvp)
{
  struct timespec tmp[2];
  return futimens (fd,  timeval_to_timespec (tvp, tmp));
}

/* utime: POSIX 5.6.6.1 */
extern "C" int
utime (const char *path, const struct utimbuf *buf)
{
  struct timeval tmp[2];

  if (buf == 0)
    return utimes (path, 0);

  debug_printf ("incoming utime act %lx", buf->actime);
  tmp[0] = time_t_to_timeval (buf->actime);
  tmp[1] = time_t_to_timeval (buf->modtime);

  return utimes (path, tmp);
}

/* ftime: standards? */
extern "C" int
ftime (struct timeb *tp)
{
  struct timeval tv;
  struct timezone tz;

  if (gettimeofday (&tv, &tz) < 0)
    return -1;

  tp->time = tv.tv_sec;
  tp->millitm = tv.tv_usec / 1000;
  tp->timezone = tz.tz_minuteswest;
  tp->dstflag = tz.tz_dsttime;

  return 0;
}

#define stupid_printf if (cygwin_finished_initializing) debug_printf
void
hires_ns::prime ()
{
  LARGE_INTEGER ifreq;
  if (!QueryPerformanceFrequency (&ifreq))
    {
      inited = -1;
      return;
    }

  int priority = GetThreadPriority (GetCurrentThread ());

  SetThreadPriority (GetCurrentThread (), THREAD_PRIORITY_TIME_CRITICAL);
  if (!QueryPerformanceCounter (&primed_pc))
    {
      SetThreadPriority (GetCurrentThread (), priority);
      inited = -1;
      return;
    }

  freq = (double) ((double) 1000000000. / (double) ifreq.QuadPart);
  inited = true;
  SetThreadPriority (GetCurrentThread (), priority);
}

LONGLONG
hires_ns::nsecs (bool monotonic)
{
  if (!inited)
    prime ();
  if (inited < 0)
    {
      set_errno (ENOSYS);
      return (LONGLONG) -1;
    }

  LARGE_INTEGER now;
  if (!QueryPerformanceCounter (&now))
    {
      set_errno (ENOSYS);
      return -1;
    }

  // FIXME: Use round() here?
  now.QuadPart = (LONGLONG) (freq * (double)
		 (now.QuadPart - (monotonic ? 0LL : primed_pc.QuadPart)));
  return now.QuadPart;
}

LONGLONG
hires_ms::nsecs ()
{
  LARGE_INTEGER systime;
  get_system_time (&systime);
  /* Add conversion factor for UNIX vs. Windows base time */
  return systime.QuadPart - FACTOR;
}

extern "C" int
clock_gettime (clockid_t clk_id, struct timespec *tp)
{
  if (CLOCKID_IS_PROCESS (clk_id))
    {
      pid_t pid = CLOCKID_TO_PID (clk_id);
      HANDLE hProcess;
      KERNEL_USER_TIMES kut;
      int64_t x;

      if (pid == 0)
	pid = getpid ();

      pinfo p (pid);
      if (!p->exists ())
	{
	  set_errno (EINVAL);
	  return -1;
	}

      hProcess = OpenProcess (PROCESS_QUERY_INFORMATION, 0, p->dwProcessId);
      NtQueryInformationProcess (hProcess, ProcessTimes,
				 &kut, sizeof kut, NULL);

      x = kut.KernelTime.QuadPart + kut.UserTime.QuadPart;
      tp->tv_sec = x / NSPERSEC;
      tp->tv_nsec = (x % NSPERSEC) * 100LL;

      CloseHandle (hProcess);
      return 0;
    }

  if (CLOCKID_IS_THREAD (clk_id))
    {
      long thr_id = CLOCKID_TO_THREADID (clk_id);
      HANDLE hThread;
      KERNEL_USER_TIMES kut;
      int64_t x;

      if (thr_id == 0)
	thr_id = pthread::self ()->getsequence_np ();

      hThread = OpenThread (THREAD_QUERY_INFORMATION, 0, thr_id);
      if (!hThread)
	{
	  set_errno (EINVAL);
	  return -1;
	}

      NtQueryInformationThread (hThread, ThreadTimes,
				&kut, sizeof kut, NULL);

      x = kut.KernelTime.QuadPart + kut.UserTime.QuadPart;
      tp->tv_sec = x / NSPERSEC;
      tp->tv_nsec = (x % NSPERSEC) * 100LL;

      CloseHandle (hThread);
      return 0;
    }

  switch (clk_id)
    {
      case CLOCK_REALTIME:
	{
	  LONGLONG now = gtod.nsecs ();
	  if (now == (LONGLONG) -1)
	    return -1;
	  tp->tv_sec = now / NSPERSEC;
	  tp->tv_nsec = (now % NSPERSEC) * (1000000000 / NSPERSEC);
	  break;
	}

      case CLOCK_MONOTONIC:
	{
	  LONGLONG now = ntod.nsecs (true);
	  if (now == (LONGLONG) -1)
	    return -1;

	  tp->tv_sec = now / 1000000000;
	  tp->tv_nsec = (now % 1000000000);
	  break;
	}

      default:
	set_errno (EINVAL);
	return -1;
    }

  return 0;
}

extern "C" int
clock_settime (clockid_t clk_id, const struct timespec *tp)
{
  struct timeval tv;

  if (CLOCKID_IS_PROCESS (clk_id) || CLOCKID_IS_THREAD (clk_id))
    /* According to POSIX, the privileges to set a particular clock
     * are implementation-defined.  On Linux, CPU-time clocks are not
     * settable; do the same here.
     */
    {
      set_errno (EPERM);
      return -1;
    }

  if (clk_id != CLOCK_REALTIME)
    {
      set_errno (EINVAL);
      return -1;
    }

  tv.tv_sec = tp->tv_sec;
  tv.tv_usec = tp->tv_nsec / 1000;

  return settimeofday (&tv, NULL);
}

static ULONG minperiod;	// FIXME: Maintain period after a fork.

LONGLONG
hires_ns::resolution ()
{
  if (!inited)
    prime ();
  if (inited < 0)
    {
      set_errno (ENOSYS);
      return (LONGLONG) -1;
    }

  return (freq <= 1.0) ? 1LL : (LONGLONG) freq;
}

UINT
hires_ms::resolution ()
{
  if (!minperiod)
    {
      ULONG coarsest, finest, actual;

      NtQueryTimerResolution (&coarsest, &finest, &actual);
      /* The actual resolution of the OS timer is a system-wide setting which
	 can be changed any time, by any process.  The only fixed value we
	 can rely on is the coarsest value. */
      minperiod = coarsest;
    }
  return minperiod;
}

extern "C" int
clock_getres (clockid_t clk_id, struct timespec *tp)
{
  if (CLOCKID_IS_PROCESS (clk_id) || CLOCKID_IS_THREAD (clk_id))
    {
      ULONG coarsest, finest, actual;

      NtQueryTimerResolution (&coarsest, &finest, &actual);
      tp->tv_sec = coarsest / NSPERSEC;
      tp->tv_nsec = (coarsest % NSPERSEC) * 100;
      return 0;
    }

  switch (clk_id)
    {
      case CLOCK_REALTIME:
	{
	  DWORD period = gtod.resolution ();
	  tp->tv_sec = period / NSPERSEC;
	  tp->tv_nsec = (period % NSPERSEC) * 100;
	  break;
	}

      case CLOCK_MONOTONIC:
	{
	  LONGLONG period = ntod.resolution ();
	  tp->tv_sec = period / 1000000000;
	  tp->tv_nsec = period % 1000000000;
	  break;
	}

      default:
	set_errno (EINVAL);
	return -1;
    }

  return 0;
}

extern "C" int
clock_setres (clockid_t clk_id, struct timespec *tp)
{
  static NO_COPY bool period_set;
  int status;

  if (clk_id != CLOCK_REALTIME)
    {
      set_errno (EINVAL);
      return -1;
    }

  /* Convert to 100ns to match OS resolution.  The OS uses ULONG values
     to express resolution in 100ns units, so the coarsest timer resolution
     is < 430 secs.  Actually the coarsest timer resolution is only slightly
     beyond 15ms, but this might change in future OS versions, so we play nice
     here. */
  ULONGLONG period = (tp->tv_sec * 10000000ULL) + ((tp->tv_nsec) / 100ULL);

  /* clock_setres is non-POSIX/non-Linux.  On QNX, the function always
     rounds the incoming value to the nearest supported value. */
  ULONG coarsest, finest, actual;
  if (NT_SUCCESS (NtQueryTimerResolution (&coarsest, &finest, &actual)))
    {
      if (period > coarsest)
	period = coarsest;
      else if (finest > period)
	period = finest;
    }

  if (period_set
      && NT_SUCCESS (NtSetTimerResolution (minperiod, FALSE, &actual)))
    period_set = false;

  status = NtSetTimerResolution (period, TRUE, &actual);
  if (!NT_SUCCESS (status))
    {
      __seterrno_from_nt_status (status);
      return -1;
    }
  minperiod = period;
  period_set = true;
  return 0;
}

extern "C" int
clock_getcpuclockid (pid_t pid, clockid_t *clk_id)
{
  if (pid != 0 && !pinfo (pid)->exists ())
    return (ESRCH);
  *clk_id = (clockid_t) PID_TO_CLOCKID (pid);
  return 0;
}
@


1.125
log
@* common.din (stime): Export.
* times.cc (stime): New function.
* include/cygwin/time.h (stime): Declare.
* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
@
text
@d4 1
a4 1
   2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014 Red Hat, Inc.
d45 17
@


1.124
log
@	* Throughout, use __try/__except/__endtry blocks, rather than myfault
	handler.
	* cygtls.cc (_cygtls::remove): Accommodate the fact that pathbufs
	has been moved from _local_storage to _cygtls.
	* cygtls.h (class tls_pathbuf): Add comment to hint to gendef usage
	of counters.  Change type of counters to uint32_t for clarity.
	Remove _cygtls as friend class.
	(struct _local_storage): Move pathbufs from here...
	(struct _cygtls): ...to here, allowing to access it from _sigbe.
	(class san): Only define on 32 bit.  Remove errno, _c_cnt and _w_cnt
	members.
	(san::setup): Drop parameter.  Don't initialize removed members.
	(san::leave): Don't set removed members.
	(class myfault): Only define on 32 bit.
	(myfault::faulted): Only keep implementation not taking any parameter.
	Drop argument in call to sebastian.setup.
	(__try/__leave/__except/__endtry): Implement to support real SEH.  For
	now stick to SJLJ on 32 bit.
	* dcrt0.cc (dll_crt0_0): Drop 64 bit call to
	exception::install_myfault_handler.
	* exception.h (exception_handler): Define with EXCEPTION_DISPOSITION
	as return type.
	(PDISPATCHER_CONTEXT): Define as void * on 32 bit.  Define as pointer
	to _DISPATCHER_CONTEXT on 64 bit.
	(class exception): Define separately for 32 and 64 bit.
	(exception::myfault): Add handler for myfault SEH handling on 64 bit.
	(exception::exception): Fix mangled method name to account for change
	in type of last parameter.
	(exception::install_myfault_handler): Remove.
	* exceptions.cc (exception::myfault_handle): Remove.
	(exception::myfault): New SEH handler for 64 bit.
	* gendef (_sigbe): Set tls_pathbuf counters to 0 explicitely when
	returning to the caller.
	* ntdll.h: Move a comment to a better place.
	(struct _SCOPE_TABLE): Define on 64 bit.
	* thread.cc (verifyable_object_isvalid): Remove gcc 4.7 workaround.
	* tls_pbuf.cc (tls_pbuf): Fix to accommodate new place of pathbufs.
	(tls_pathbuf::destroy): Change type of loop variables to uint32_t.
	* tls_pbuf.h (class tmp_pathbuf): Change type of buffer counters to
	uint32_t.  Accommodate new place of pathbufs.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Regenerate.
@
text
@d142 8
@


1.123
log
@	Throughout, keep function definitions and declarations in sync with
	newlib in terms of C99 "restrict" keyword.
@
text
@d4 1
a4 1
   2007, 2008, 2009, 2010, 2011, 2012, 2013 Red Hat, Inc.
a61 4
  myfault efault;
  if (efault.faulted (EFAULT))
    return ((clock_t) -1);

d65 8
d74 8
a81 20
  /* Fetch boot time if we haven't already. */
  if (!stodi.BootTime.QuadPart)
    NtQuerySystemInformation (SystemTimeOfDayInformation,
			      &stodi, sizeof stodi, NULL);

  NtQueryInformationProcess (NtCurrentProcess (), ProcessTimes,
			     &kut, sizeof kut, NULL);
  get_system_time (&ticks);

  /* uptime */
  ticks.QuadPart -= stodi.BootTime.QuadPart;
  /* ticks is in in 100ns, convert to clock ticks. */
  clock_t tc = (clock_t) (ticks.QuadPart * CLOCKS_PER_SEC / NSPERSEC);

  buf->tms_stime = __to_clock_t (&kut.KernelTime, 0);
  buf->tms_utime = __to_clock_t (&kut.UserTime, 0);
  timeval_to_filetime (&myself->rusage_children.ru_stime, &kut.KernelTime);
  buf->tms_cstime = __to_clock_t (&kut.KernelTime, 1);
  timeval_to_filetime (&myself->rusage_children.ru_utime, &kut.UserTime);
  buf->tms_cutime = __to_clock_t (&kut.UserTime, 1);
d83 12
d107 9
a115 1
  int res;
d117 12
a128 3
  myfault efault;
  if (efault.faulted (EFAULT))
    return -1;
d130 4
a133 1
  if (tv->tv_usec < 0 || tv->tv_usec >= 1000000)
d135 1
a135 2
      set_errno (EINVAL);
      return -1;
d137 1
a137 17

  ptm = gmtime (&tv->tv_sec);
  st.wYear	   = ptm->tm_year + 1900;
  st.wMonth	   = ptm->tm_mon + 1;
  st.wDayOfWeek    = ptm->tm_wday;
  st.wDay	   = ptm->tm_mday;
  st.wHour	   = ptm->tm_hour;
  st.wMinute       = ptm->tm_min;
  st.wSecond       = ptm->tm_sec;
  st.wMilliseconds = tv->tv_usec / 1000;

  res = -!SetSystemTime (&st);
  gtod.reset ();

  if (res)
    set_errno (EPERM);

@


1.123.2.1
log
@2014-11-07  Corinna Vinschen  <corinna@@vinschen.de>

	* dcrt0.cc (cygwin__cxa_atexit): Fetch correct DSO handle value
	by searching dll list.  Explain why.

2014-11-06  Corinna Vinschen  <corinna@@vinschen.de>

	* dcrt0.cc (cygwin_atexit): Change preceeding comment to reflect
	API version numbers.
	* external.cc (cygwin_internal): disable setting cxx_malloc on 64 bit.
	Add CW_FIXED_ATEXIT case.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
	* include/sys/cygwin.h (cygwin_getinfo_types): Add CW_FIXED_ATEXIT.
	* lib/atexit.c (atexit): Test running Cygwin version by checking
	return value of cygwin_internal (CW_FIXED_ATEXIT).

2014-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* lib/atexit.c (atexit): Check for being linked into the executable.
	If so, call __cxa_atexit with NULL DSO handle.  Explain why.
	* lib/dso_handle.c: New file providing fallback __dso_handle.

2014-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (NEW_FUNCTIONS): Add atexit to be not exported.
	* lib/atexit.c (atexit): New, statically linkable version of atexit.
	* dcrt0.cc (cygwin_atexit): Add comment to mark this function as old
	entry point.  Indiscriminately check for DSO of function pointer for
	all functions, if checking for DSO of return address fails on x86_64.
	Change comment accordingly.

2014-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (NEW_FUNCTIONS): Define target-independent.  Add target
	dependent stuff afterwards.  Globally define timezone and all xdr
	symbols as non-exported from libcygwin.a.

2014-11-03  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc: Fix formatting.

2014-10-29  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc (init_cygheap::init_installation_root): Create content of
	installation_dir as non-prefixed path, if possible.

2014-10-29  Corinna Vinschen  <corinna@@vinschen.de>

	* common.din (__cxa_atexit): Define as cygwin__cxa_atexit.
	* dcrt0.cc (cygwin__cxa_atexit): New function.  Explain what we do.

2014-10-28  Corinna Vinschen  <corinna@@vinschen.de>

	* globals.cc (dos_file_warning): Set to false by default.
	* path.cc (warn_msdos): Make static.  Drop test for dos_file_warning.
	(path_conv::check): Check for dos_file_warning here to avoid a function
	call in the default case.

2014-10-27  Corinna Vinschen  <corinna@@vinschen.de>

	* dcrt0.cc (cygwin_atexit): Add workaround for broken atexit calls
	in __gcc_register_frame of DLLs built with gcc-4.8.3-3.

2014-10-27  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc (init_cygheap::init_installation_root): Set
	installation_dir_len.
	* cygheap.h (struct init_cygheap): Add installation_dir_len member.
	* environ.cc (win_env::add_cache): Use stpcpy for speed.
	(posify_maybe): Use tmp_pathbuf buffer instead of stack.
	(raise_envblock): New function to resize Windows environment block.
	(build_env): Fix indentation.  Call raise_envblock function.  Check if
	$PATH exists and is non-empty.  If not, add PATH variable with Cygwin
	installation directory as content to Windows environment.  Explain why.

2014-10-24  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_proc.cc (format_proc_cygdrive): Fix symlink path if cygdrive
	is "/".

2014-10-24  Corinna Vinschen  <corinna@@vinschen.de>

	* gendef (sigdelayed): 64 bit only: Fix seh_pushreg statements in
	prologue.

2014-10-22  Yaakov Selkowitz  <yselkowi@@redhat.com>

	* common.din (stime): Export.
	* times.cc (stime): New function.
	* include/cygwin/time.h (stime): Declare.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.

2014-10-20  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_serial.cc: Revert debug code accidentally checked in on
	2014-08-18.

2014-10-20  Corinna Vinschen  <corinna@@vinschen.de>

	* path.cc (symlink_info::check): Set error from status code if opening
	the parent directory failed, but keep special case for root dirs.

2014-10-17  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc (init_cygheap::init_installation_root): Just memmove
	contents of installation_root instead of calling GetModuleFileNameW
	again.  Copy installation_root to installation_dir before stripping of
	"bin" dir.  Explain what we do.
	* cygheap.h (struct init_cygheap): Add installation_dir member.

2014-10-17  Corinna Vinschen  <corinna@@vinschen.de>

	* cygtls.h (__try): Define __l_endtry as block-local label in 32 bit
	case as well.

2014-10-17  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (DLL_OFILES): Add quotactl.o.
	* common.din (quotactl): Export.
	* ntdll.h: Define FILE_FS_CONTROL_INFORMATION::FileSystemControlFlags
	flag values.
	(struct _FILE_FS_CONTROL_INFORMATION): Define.
	(struct _FILE_GET_QUOTA_INFORMATION): Define.
	(typedef struct _FILE_QUOTA_INFORMATION): Define.
	(NtQueryObject): Use PVOID rather than VOID*.
	(NtQueryVolumeInformationFile): Ditto.
	(NtQueryQuotaInformationFile): Declare.
	(NtSetQuotaInformationFile): Declare.
	(NtSetVolumeInformationFile): Declare.
	* quotactl.cc: New file implementing quotactl().
	* include/sys/mount.h (BLOCK_SIZE): Define.
	(BLOCK_SIZE_BITS): Define.
	* include/sys/quota.h: New header.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.

2014-10-16  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (DLL_OFILES): Rearrange with one file per line.

2014-10-16  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_proc.cc (format_proc_partitions): Extend output to print
	the windows mount points the device is mounted on.

2014-10-13  Corinna Vinschen  <corinna@@vinschen.de>

	* net.cc (cygwin_setsockopt): Drop redundant test for AF_LOCAL and
	SOCK_STREAM in SO_PEERCRED case, as in the original patch.

2014-10-12  Corinna Vinschen  <corinna@@vinschen.de>

	* dlfcn.cc (gfpod_helper): Only check for POSIX dir separator, same as
	in get_full_path_of_dll.

2014-10-12  Corinna Vinschen  <corinna@@vinschen.de>

	* dlfcn.cc (set_dl_error): Drop useless __stdcall.
	(check_path_access): Ditto.  Drop FE_CWD from call to find_exec.
	(gfpod_helper): Call path_conv::check for all paths containing a dir
	separator to more closely follow the Linux search algorithm.
	(get_full_path_of_dll): Drop useless __stdcall.
	(dlopen): Simplify RTLD_NOLOAD case by calling GetModuleHandleEx
	instead of GetModuleHandle/LoadLibrary.

2014-10-11  Christian Franke  <franke@@computer.org>

	Add setsockopt(sd, SOL_SOCKET, SO_PEERCRED, NULL, 0) to disable
	initial handshake on AF_LOCAL sockets.
	* fhandler.h (class fhandler_socket): Add no_getpeereid status flag.
	(fhandler_socket::af_local_set_no_getpeereid): New prototype.
	* fhandler_socket.cc (fhandler_socket::af_local_connect): Skip handshake
	if no_getpeereid is set.  Add debug output.
	(fhandler_socket::af_local_accept): Likewise.
	(fhandler_socket::af_local_set_no_getpeereid): New function.
	(fhandler_socket::af_local_copy): Copy no_getpeereid.
	(fhandler_socket::getpeereid): Fail if no_getpeereid is set.
	* net.cc (cygwin_setsockopt): Add SO_PEERCRED for AF_LOCAL/SOCK_STREAM
	sockets.  Add comment to explain why we need it.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.

2014-10-10  Corinna Vinschen  <corinna@@vinschen.de>

	* dlfcn.cc (dlopen): Disable old 32 bit code on 64 bit.
	* dcrt0.cc (check_sanity_and_sync): Ditto.
	* dll_init.cc (dll_dllcrt0_1): Fix typo in comment.

2014-10-08  Corinna Vinschen  <corinna@@vinschen.de>

	* common.din (ffsl): Export.
	(ffsll): Export.
	* syscalls.cc (ffs): Implement using GCC intrinsic.
	(ffsl): Ditto.
	(ffsll): Ditto.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.

2014-10-08  Christian Franke  <franke@@computer.org>

	* syscalls.cc (ffs): Fix crash of ffs (0x80000000) on 64 bit.

2014-10-08  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_process.cc (format_process_statm): Fix output of dirty
	pages.  Add linefeed.

2014-09-05  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_proc.cc (proc_tab): Add entry for cygdrive symlink.
	(format_proc_cygdrive): New function to implement /proc/cygdrive.

2014-09-05  Corinna Vinschen  <corinna@@vinschen.de>

	* exception.h (class exception): Remove unnecessary #ifdef.

2014-09-05  Corinna Vinschen  <corinna@@vinschen.de>

	* winlean.h (DNLEN): Raise to 31.  Explain why.

2014-08-28  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_disk_file.cc (fhandler_disk_file::fstatvfs): Try the
	FileFsSizeInformation information class on filesystems choking on
	FileFsFullSizeInformation (I see you Netapp!)

2014-08-27  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.h (fhandler_pty_slave::fch_open_handles): Add bool parameter
	to declaration.
	* fhandler_tty.cc (fhandler_pty_slave::fch_open_handles): Add bool
	parameter "chown".  Only request WRITE_OWNER access when opening pty
	synchronization objects if "chown" is set.
	(fhandler_pty_slave::fchmod): Call fch_open_handles with new bool
	parameter set to false.
	(fhandler_pty_slave::fchown): Call fch_open_handles with new bool
	parameter set to true.
	* kernel32.cc (CreateFileMappingW): Fix default standard rights for
	file mappings from READ_CONTROL to STANDARD_RIGHTS_REQUIRED to allow
	changing the DACL (fixes "access denied" error in pinfo::set_acl).

	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Change debug
	output to print mode bits in octal.
	* security.cc (alloc_sd): Ditto.
	(set_file_attribute): Ditto.

2014-08-27  Corinna Vinschen  <corinna@@vinschen.de>

	* ntea.cc (read_ea): Change left-over return to __leave.  Fix
	condition to close handle.  Call NtClose rather than CloseHandle.
	(write_ea): Fix condition to close handle.  Call NtClose rather than
	CloseHandle.
	* security.cc (get_file_sd): Call pc.init_reopen_attr if a valid
	incoming handle was given, pc.get_object_attr otherwise.
	(set_file_sd): Ditto.

2014-08-26  Corinna Vinschen  <corinna@@vinschen.de>

	* path.h (path_conv::init_reopen_attr): Change from void to returning
	POBJECT_ATTRIBUTES.  Take OBJECT_ATTRIBUTES reference as argument, not
	pointer.
	* fhandler_disk_file.cc: Throughout accommodate above change.
	* syscalls.cc: Ditto.
	* ntea.cc (read_ea): Don't set hdl to NULL if it's already NULL.  Set
	attr with pc.init_reopen_attr before trying to reopen file.
	(write_ea): Ditto.
	* security.cc (get_file_sd): Use pc.init_reopen_attr rather than
	pc.get_object_attr when trying to reopen file.
	(set_file_sd): Ditto.

2014-08-25  Corinna Vinschen  <corinna@@vinschen.de>

	* cygtls.cc (san::leave/x86_64): Implement.
	* cygtls.h (class tls_pathbuf): Move counter variables into a union.
	Add 64 bit element _counters covering both counter variables to
	optimize save and restore operations.
	(class san/x86_64): Only store single 64 bit value.
	(san::san/x86_64): Implement.
	(san::leave/x86_64): Only declare here, as returns_twice function.
	Explain why.
	(class san/i686): Change type of _c_cnt and _w_cnt to uint32_t.
	(__try/x86_64): Move definition of __sebastian after the first memory
	barrier.  Drop __sebastian.setup call.

2014-08-25  Corinna Vinschen  <corinna@@vinschen.de>

	* cygtls.cc (_cygtls::remove): Revert previous patch.
	*  cygtls.h (struct _local_storage): Move pathbufs back here.
	(class san/x86_64): Revert class.  Save and restore pathbufs counters
	only.
	(class san/i686): Revert saving and restoring pathbufs counters.
	(__try/x86_64): Add a san variable and call it's setup method.
	(__except/x86_64): Call san::leave to restore pathbufs counters.
	* gendef (_sigbe): Revert previous change.
	* thread.cc (verifyable_object_state): Remove gcc 4.7 workaround in
	forward declaration as well.
	* tls_pbuf.cc (tls_pbuf): Revert previous change.
	* tls_pbuf.h (class tmp_pathbuf): Accommodate reverting pathbufs to
	locals structure.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Regenerate.

2014-08-21  Corinna Vinschen  <corinna@@vinschen.de>

	* Throughout, use __try/__except/__endtry blocks, rather than myfault
	handler.
	* cygtls.cc (_cygtls::remove): Accommodate the fact that pathbufs
	has been moved from _local_storage to _cygtls.
	* cygtls.h (class tls_pathbuf): Add comment to hint to gendef usage
	of counters.  Change type of counters to uint32_t for clarity.
	Remove _cygtls as friend class.
	(struct _local_storage): Move pathbufs from here...
	(struct _cygtls): ...to here, allowing to access it from _sigbe.
	(class san): Only define on 32 bit.  Remove errno, _c_cnt and _w_cnt
	members.
	(san::setup): Drop parameter.  Don't initialize removed members.
	(san::leave): Don't set removed members.
	(class myfault): Only define on 32 bit.
	(myfault::faulted): Only keep implementation not taking any parameter.
	Drop argument in call to sebastian.setup.
	(__try/__leave/__except/__endtry): Implement to support real SEH.  For
	now stick to SJLJ on 32 bit.
	* dcrt0.cc (dll_crt0_0): Drop 64 bit call to
	exception::install_myfault_handler.
	* exception.h (exception_handler): Define with EXCEPTION_DISPOSITION
	as return type.
	(PDISPATCHER_CONTEXT): Define as void * on 32 bit.  Define as pointer
	to _DISPATCHER_CONTEXT on 64 bit.
	(class exception): Define separately for 32 and 64 bit.
	(exception::myfault): Add handler for myfault SEH handling on 64 bit.
	(exception::exception): Fix mangled method name to account for change
	in type of last parameter.
	(exception::install_myfault_handler): Remove.
	* exceptions.cc (exception::myfault_handle): Remove.
	(exception::myfault): New SEH handler for 64 bit.
	* gendef (_sigbe): Set tls_pathbuf counters to 0 explicitely when
	returning to the caller.
	* ntdll.h: Move a comment to a better place.
	(struct _SCOPE_TABLE): Define on 64 bit.
	* thread.cc (verifyable_object_isvalid): Remove gcc 4.7 workaround.
	* tls_pbuf.cc (tls_pbuf): Fix to accommodate new place of pathbufs.
	(tls_pathbuf::destroy): Change type of loop variables to uint32_t.
	* tls_pbuf.h (class tmp_pathbuf): Change type of buffer counters to
	uint32_t.  Accommodate new place of pathbufs.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Regenerate.

2014-08-21  Corinna Vinschen  <corinna@@vinschen.de>

	* miscfuncs.cc (__import_address): Cover the first dereference to imp
	under the fault handler.

2014-08-21  Corinna Vinschen  <corinna@@vinschen.de>

	* net.cc (if_freenameindex): Don't catch a SEGV from free to fail
	loudly on double free.

2014-08-21  Corinna Vinschen  <corinna@@vinschen.de>

	* dir.cc (rmdir): Don't skip deleting fh in the ENOTEMPTY case.

2014-08-20  Corinna Vinschen  <corinna@@vinschen.de>

	* tls_pbuf.h (tmp_pathbuf::tmp_pathbuf): Convert to inline method.
	(tmp_pathbuf::~tmp_pathbuf): Ditto.
	* tls_pbuf.cc (tmp_pathbuf::tmp_pathbuf): Remove here.
	(tmp_pathbuf::~tmp_pathbuf): Ditto.

2014-08-19  Corinna Vinschen  <corinna@@vinschen.de>

	* dir.cc (dirfd): Per POSIX, return EINVAL on invalid directory stream.
	(telldir): Per POSIX, return -1 and set errno to EBADF, rather than
	just returning 0, on invalid directory stream.
	* signal.cc (sigwaitinfo): Return -1, not EFAULT, when SEGV was catched.

2014-08-19  Corinna Vinschen  <corinna@@vinschen.de>

	* autoload.cc: Replace WNet[...]A with WNet[...]W imports.
	* dcrt0.cc (initial_env): Drop strlwr calls.  Call strcasestr instead.
	* fhandler_netdrive.cc: Throughout, convert to calling WNet UNICODE
	functions.  Use tmp_pathbuf rather than alloca.  Replace call to
	strlwr with call to RtlDowncaseUnicodeString.

2014-08-19  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.h (fhandler_serial::is_tty): Reinstantiate.

2014-08-18  Corinna Vinschen  <corinna@@vinschen.de>

	* miscfuncs.cc (strlwr): Rename from cygwin_strlwr.  Drop __stdcall
	decoration.
	(strupr): Rename from cygwin_strupr.  Drop __stdcall decoration.
	* string.h (strlwr): Remove override macro.  Simply declare.
	(strupr): Ditto.

2014-08-18  Corinna Vinschen  <corinna@@vinschen.de>

	* dtable.cc (dtable::init_std_file_from_handle): Mention that console
	handles are kernel objects since Windows 8.
	* fhandler.h (enum conn_state): Add "listener" state.
	(class fhandler_socket): Drop listener status flag.
	(fhandler_socket::lseek): Return -1 and errno ESPIPE.
	(fhandler_serial::lseek): Ditto.
	(fhandler_serial::is_tty): Remove.
	* fhandler_socket.cc (fhandler_socket::listen): Set connect_state to
	listener.  Add comment.
	(fhandler_socket::accept4): Explicitely check if the socket is listening
	and fail with EINVAL, if not.  Explain why we have to do that.
	(fhandler_socket::getpeereid): Drop now redundant test.

2014-08-15  Corinna Vinschen  <corinna@@vinschen.de>

	* winsup.h (_GNU_SOURCE): Define.  Explain why.

2014-08-14  Corinna Vinschen  <corinna@@vinschen.de>

	* dlmalloc.c: Remove unused file.
	* dlmalloc.h: Ditto.
	* malloc.cc: Update to Doug Lea's malloc version 2.8.6.

2014-08-13  Corinna Vinschen  <corinna@@vinschen.de>

	* include/cygwin/version.h (CYGWIN_VERSION_DLL_MINOR): Bump to 33.
	(CYGWIN_VERSION_API_MINOR): Bump to reflect intermediate 1.7.32 release.

2014-07-21  Corinna Vinschen  <corinna@@vinschen.de>

	* include/cygwin/version.h (CYGWIN_VERSION_DLL_MINOR): Bump to 32.

2014-05-06  Corinna Vinschen  <corinna@@vinschen.de>

	* winlean.h (PIPE_REJECT_REMOTE_CLIENTS): Drop temporary definition
	since Mingw64 catched up.
	(DNLEN): Redefine as 16.  Explain why.

2014-03-06  Corinna Vinschen  <corinna@@vinschen.de>

	* setlsapwd.cc (setlsapwd): Use RtlSecureZeroMemory to delete password
	from memory.

2014-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): Document atexit.

2014-10-28  Corinna Vinschen  <corinna@@vinschen.de>

	* cygwinenv.xml: Change default setting of dosfilewarning.
	* new-features.xml (ov-new1.7.33): Document aforementioned change.

2014-10-27  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): Document empty $PATH handling.

2014-10-22  Corinna Vinschen  <corinna@@vinschen.de>

	* posix.xml (std-gnu): Add ffsl, ffsll, quotactl.
	(std-notes): Add restrictions of quotactl.

2014-10-22  Yaakov Selkowitz  <yselkowi@@redhat.com>

	* new-features.xml (ov-new1.7.33): Document stime.
	* posix.xml (std-deprec): Add stime.

2014-10-22  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): s/Linux/glibc.

2014-10-22  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): Update to current state.

2014-08-13  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): Add new section.
	(ov-new1.7.32): Reflect intermediate 1.7.32 release.

2014-10-21  Corinna Vinschen  <corinna@@vinschen.de>

	* cygcheck.cc (CYGLSA64_DLL): Remove unused macro.
	(dump_sysinfo): If COMSPEC isn't set in the MSVCRT environment, set it.
	Explain why.
@
text
@d4 1
a4 1
   2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014 Red Hat, Inc.
d62 4
a68 8
  clock_t tc = (clock_t) -1;

  __try
    {
      /* Fetch boot time if we haven't already. */
      if (!stodi.BootTime.QuadPart)
	NtQuerySystemInformation (SystemTimeOfDayInformation,
				  &stodi, sizeof stodi, NULL);
d70 20
a89 3
      NtQueryInformationProcess (NtCurrentProcess (), ProcessTimes,
				 &kut, sizeof kut, NULL);
      get_system_time (&ticks);
a90 17
      /* uptime */
      ticks.QuadPart -= stodi.BootTime.QuadPart;
      /* ticks is in in 100ns, convert to clock ticks. */
      tc = (clock_t) (ticks.QuadPart * CLOCKS_PER_SEC / NSPERSEC);

      buf->tms_stime = __to_clock_t (&kut.KernelTime, 0);
      buf->tms_utime = __to_clock_t (&kut.UserTime, 0);
      timeval_to_filetime (&myself->rusage_children.ru_stime, &kut.KernelTime);
      buf->tms_cstime = __to_clock_t (&kut.KernelTime, 1);
      timeval_to_filetime (&myself->rusage_children.ru_utime, &kut.UserTime);
      buf->tms_cutime = __to_clock_t (&kut.UserTime, 1);
    }
  __except (EFAULT)
    {
      tc = (clock_t) -1;
    }
  __endtry
d103 5
a107 1
  int res = -1;
d109 1
a109 1
  __try
d111 16
a126 5
      if (tv->tv_usec < 0 || tv->tv_usec >= 1000000)
	{
	  set_errno (EINVAL);
	  return -1;
	}
d128 2
a129 12
      ptm = gmtime (&tv->tv_sec);
      st.wYear	   = ptm->tm_year + 1900;
      st.wMonth	   = ptm->tm_mon + 1;
      st.wDayOfWeek    = ptm->tm_wday;
      st.wDay	   = ptm->tm_mday;
      st.wHour	   = ptm->tm_hour;
      st.wMinute       = ptm->tm_min;
      st.wSecond       = ptm->tm_sec;
      st.wMilliseconds = tv->tv_usec / 1000;

      res = -!SetSystemTime (&st);
      gtod.reset ();
a130 8
      if (res)
	set_errno (EPERM);
    }
  __except (EFAULT)
    {
      res = -1;
    }
  __endtry
a134 8
/* stime: SVr4 */
extern "C" int
stime (const time_t *t)
{
  struct timeval tv = { *t, 0 };
  return settimeofday(&tv, NULL);
}

@


1.122
log
@	* times.cc (GetSystemTimePreciseAsFileTime): Add comment to declaration.
	(__to_clock_t): Remove a debug_printf.
	(times): Align syscall_printf to debug output of other system calls.
@
text
@d161 1
a161 1
gettimeofday (struct timeval *tv, void *tzvp)
@


1.121
log
@	* autoload.cc (GetSystemTimePreciseAsFileTime): Define.
	* times.cc (GetSystemTimePreciseAsFileTime): Temporarily declare here
	to workaround missing definition in 32 bit w32api headers.
	(get_system_time): New always inline function to call either
	GetSystemTimePreciseAsFileTime or GetSystemTimeAsFileTime on a per OS
	basis.  Call throughout instead of GetSystemTimeAsFileTime.
	* wincap.h (wincaps::has_precise_system_time): New element.
	* wincap.cc: Implement above element throughout.
@
text
@d34 1
a54 1
  debug_printf ("total %016X", total);
a83 3
  syscall_printf ("ticks %D, CLOCKS_PER_SEC %d", ticks, CLOCKS_PER_SEC);
  syscall_printf ("UserTime %D, KernelTime %D, CreationTime %D, ExitTime %D",
		  kut.UserTime, kut.KernelTime, kut.CreateTime, kut.ExitTime);
d91 1
@


1.120
log
@	Streamline time/times functionality.  Remove last remains of former
	Windows 9x compatibility.
	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Drop now unneeded
	casts in calls to_timestruc_t.
	(fhandler_base::utimens_fs): Ditto for timespec_to_filetime.
	* fhandler_proc.cc (format_proc_stat): Ditto for to_time_t.
	* hires.h (class hires_ms): Remove unused member initime_ns.
	Remove declarations for timeGetTime_ns and prime.
	(hires_ms::uptime): Remove.
	* posix_ipc.cc (ipc_cond_timedwait): Ditto for timespec_to_filetime.
	* fhandler_registry.cc (fhandler_registry::fstat): Add cast.
	* resource.cc (fill_rusage): Call NtQueryInformationProcess rather than
	GetProcessTimes to deal with LARGE_INTEGER rather than FILETIME.
	* times.cc: Simplify time handling.  Throughout, use LARGE_INTEGER
	rather than FILETIME to simplify computations.  Throughout use
	{u}int64_t rather than {unsigned} long long.  Drop unneeded casts since
	NSPERSEC is 64 bit anyway.
	(systime_ns): Remove.
	(times): Call NtQuerySystemInformation to fetch boot time.  Call
	NtQueryInformationProcess rather than GetProcessTimes to deal with
	LARGE_INTEGER rather than FILETIME.  Call GetSystemTimeAsFileTime.
	(totimeval): Use constant 1000000 as in other functions.
	(time_t_to_filetime): Remove.
	(to_time_t): Change return type to time_t.
	(time_as_timestruc_t): Rename filetime to systime.
	(time): Ditto. Add cast.
	(hires_ns::nsecs): Fix return type cast.
	(hires_ms::timeGetTime_ns): Remove.
	(hires_ns::prime): Remove.
	(hires_ms::nsecs): Drop call to prime.  Call GetSystemTimeAsFileTime
	directly.  Subtract FACTOR here since it's the only function needing
	to do so.
	(minperiod): Cosmetically change to ULONG.
	(hires_ns::resolution): Fix return type cast.
	(hires_ms::resolution): Simplify, rely on NtQueryTimerResolution.
	* winsup.h: Align time related prototypes to above changes.
@
text
@d34 10
d77 1
a77 1
  GetSystemTimeAsFileTime ((LPFILETIME) &ticks);
d299 1
a299 1
  GetSystemTimeAsFileTime ((LPFILETIME) &systime);
d311 1
a311 1
  GetSystemTimeAsFileTime ((LPFILETIME) &systime);
d499 1
a499 1
  GetSystemTimeAsFileTime ((LPFILETIME) &systime);
@


1.119
log
@	* Merge in cygwin-64bit-branch.
@
text
@d4 1
a4 1
   2007, 2008, 2009, 2010, 2011, 2012 Red Hat, Inc.
a33 9
static inline LONGLONG
systime_ns ()
{
  LARGE_INTEGER x;
  GetSystemTimeAsFileTime ((LPFILETIME) &x);
  x.QuadPart -= FACTOR;		/* Add conversion factor for UNIX vs. Windows base time */
  return x.QuadPart;
}

d35 2
a36 2
static unsigned long long __stdcall
__to_clock_t (FILETIME *src, int flag)
d38 1
a38 3
  unsigned long long total = ((unsigned long long) src->dwHighDateTime << 32) + ((unsigned)src->dwLowDateTime);
  syscall_printf ("dwHighDateTime %u, dwLowDateTime %u", src->dwHighDateTime, src->dwLowDateTime);

d43 2
a44 2
  total /= (unsigned long long) (NSPERSEC / CLOCKS_PER_SEC);
  syscall_printf ("total %08x %08x", (unsigned) (total>>32), (unsigned) (total));
a51 2
  FILETIME creation_time, exit_time, kernel_time, user_time;

d56 17
a72 7
  LONGLONG ticks = gtod.uptime ();
  /* Ticks is in milliseconds, convert to our ticks. Use long long to prevent
     overflow. */
  clock_t tc = (clock_t) (ticks * CLOCKS_PER_SEC / 1000);

  GetProcessTimes (GetCurrentProcess (), &creation_time, &exit_time,
		   &kernel_time, &user_time);
d75 8
a82 10
  syscall_printf ("user_time %D, kernel_time %D, "
		  "creation_time %D, exit_time %D",
		  user_time, kernel_time,
		  creation_time, exit_time);
  buf->tms_stime = __to_clock_t (&kernel_time, 0);
  buf->tms_utime = __to_clock_t (&user_time, 0);
  timeval_to_filetime (&myself->rusage_children.ru_stime, &kernel_time);
  buf->tms_cstime = __to_clock_t (&kernel_time, 1);
  timeval_to_filetime (&myself->rusage_children.ru_utime, &user_time);
  buf->tms_cutime = __to_clock_t (&user_time, 1);
d140 1
a140 1
totimeval (struct timeval *dst, FILETIME *src, int sub, int flag)
d142 1
a142 1
  long long x = __to_clock_t (src, flag);
d144 2
a145 2
  x *= (int) (1e6) / CLOCKS_PER_SEC; /* Turn x into usecs */
  x -= (long long) sub * (int) (1e6);
d147 2
a148 2
  dst->tv_usec = x % (long long) (1e6); /* And split */
  dst->tv_sec = x / (long long) (1e6);
a181 9
void
time_t_to_filetime (time_t time_in, FILETIME *out)
{
  long long x = time_in * NSPERSEC + FACTOR;
  out->dwHighDateTime = x >> 32;
  out->dwLowDateTime = x;
}

/* Cygwin internal */
d183 1
a183 1
timespec_to_filetime (const struct timespec *time_in, FILETIME *out)
d186 1
a186 1
    out->dwHighDateTime = out->dwLowDateTime = 0;
d188 2
a189 6
    {
      long long x = time_in->tv_sec * NSPERSEC +
			    time_in->tv_nsec / (1000000000/NSPERSEC) + FACTOR;
      out->dwHighDateTime = x >> 32;
      out->dwLowDateTime = x;
    }
d194 1
a194 1
timeval_to_filetime (const struct timeval *time_in, FILETIME *out)
d196 2
a197 4
  long long x = time_in->tv_sec * NSPERSEC +
			time_in->tv_usec * (NSPERSEC/1000000) + FACTOR;
  out->dwHighDateTime = x >> 32;
  out->dwLowDateTime = x;
d236 2
a237 2
long __stdcall
to_time_t (FILETIME *ptr)
d243 1
a243 1
  long long x = ((long long) ptr->dwHighDateTime << 32) + ((unsigned)ptr->dwLowDateTime);
d250 1
a250 1
  x /= (long long) NSPERSEC;		/* number of 100ns in a second */
d257 1
a257 1
to_timestruc_t (FILETIME *ptr, timestruc_t *out)
d264 2
a265 2
  long rem;
  long long x = ((long long) ptr->dwHighDateTime << 32) + ((unsigned)ptr->dwLowDateTime);
d276 2
a277 2
  rem = x % ((long long)NSPERSEC);
  x /= (long long) NSPERSEC;		/* number of 100ns in a second */
d287 1
a287 1
  FILETIME filetime;
d289 2
a290 2
  GetSystemTimeAsFileTime (&filetime);
  to_timestruc_t (&filetime, out);
d299 1
a299 1
  FILETIME filetime;
d301 2
a302 2
  GetSystemTimeAsFileTime (&filetime);
  res = to_time_t (&filetime);
d469 1
a469 1
      return (long long) -1;
a485 61
hires_ms::timeGetTime_ns ()
{
  LARGE_INTEGER t;

  /* This is how timeGetTime is implemented in winmm.dll.
     The real timeGetTime subtracts and adds some values which are constant
     over the lifetime of the process.  Since we don't need absolute accuracy
     of the value returned by timeGetTime, only relative accuracy, we can skip
     this step.  However, if we ever find out that we need absolute accuracy,
     here's how it works in it's full beauty:

     - At process startup, winmm initializes two calibration values:

       DWORD tick_count_start;
       LARGE_INTEGER int_time_start;
       do
	 {
	   tick_count_start = GetTickCount ();
	   do
	     {
	       int_time_start.HighPart = SharedUserData.InterruptTime.High1Time;
	       int_time_start.LowPart = SharedUserData.InterruptTime.LowPart;
	     }
	   while (int_time_start.HighPart
		  != SharedUserData.InterruptTime.High2Time);
	 }
       while (tick_count_start != GetTickCount ();

     - timeGetTime computes its return value in the loop as below, and then:

       t.QuadPart -= int_time_start.QuadPart;
       t.QuadPart /= 10000;
       t.LowPart += tick_count_start;
       return t.LowPart;
  */
  do
    {
      t.HighPart = SharedUserData.InterruptTime.High1Time;
      t.LowPart = SharedUserData.InterruptTime.LowPart;
    }
  while (t.HighPart != SharedUserData.InterruptTime.High2Time);
  /* We use the value in full 100ns resolution in the calling functions
     anyway, so we can skip dividing by 10000 here. */
  return t.QuadPart;
}

void
hires_ms::prime ()
{
  if (!inited)
    {
      int priority = GetThreadPriority (GetCurrentThread ());
      SetThreadPriority (GetCurrentThread (), THREAD_PRIORITY_TIME_CRITICAL);
      initime_ns = systime_ns () - timeGetTime_ns ();
      inited = true;
      SetThreadPriority (GetCurrentThread (), priority);
    }
  return;
}

LONGLONG
d488 4
a491 3
  if (!inited)
    prime ();
  return systime_ns ();
d502 1
a502 2
      ULONG sizeof_kut = sizeof (KERNEL_USER_TIMES);
      long long x;
d515 2
a516 1
      NtQueryInformationProcess (hProcess, ProcessTimes, &kut, sizeof_kut, &sizeof_kut);
d519 2
a520 2
      tp->tv_sec = x / (long long) NSPERSEC;
      tp->tv_nsec = (x % (long long) NSPERSEC) * 100LL;
d531 1
a531 2
      ULONG sizeof_kut = sizeof (KERNEL_USER_TIMES);
      long long x;
d543 2
a544 1
      NtQueryInformationThread (hThread, ThreadTimes, &kut, sizeof_kut, &sizeof_kut);
d547 2
a548 2
      tp->tv_sec = x / (long long) NSPERSEC;
      tp->tv_nsec = (x % (long long) NSPERSEC) * 100LL;
d612 1
a612 1
static DWORD minperiod;	// FIXME: Maintain period after a fork.
d622 1
a622 1
      return (long long) -1;
a632 1
      NTSTATUS status;
d635 5
a639 30
      status = NtQueryTimerResolution (&coarsest, &finest, &actual);
      if (NT_SUCCESS (status))
	/* The actual resolution of the OS timer is a system-wide setting which
	   can be changed any time, by any process.  The only fixed value we
	   can rely on is the coarsest value. */
	minperiod = coarsest;
      else
	{
	  /* There's no good reason that NtQueryTimerResolution should fail
	     at all, but let's play it safe.  Try to empirically determine
	     current timer resolution */
	  int priority = GetThreadPriority (GetCurrentThread ());
	  SetThreadPriority (GetCurrentThread (),
			     THREAD_PRIORITY_TIME_CRITICAL);
	  LONGLONG period = 0;
	  for (int i = 0; i < 4; i++)
	    {
	      LONGLONG now;
	      LONGLONG then = timeGetTime_ns ();
	      while ((now = timeGetTime_ns ()) == then)
		continue;
	      then = now;
	      while ((now = timeGetTime_ns ()) == then)
		continue;
	      period += now - then;
	    }
	  SetThreadPriority (GetCurrentThread (), priority);
	  period /= 4L;
	  minperiod = (DWORD) period;
	}
@


1.118
log
@	* hires.h (hires_ns::nsecs): Declare with bool parameter.
	* times.cc (hires_ns::nsecs): Take bool parameter.  If set to true,
	don't use prime value (== return system wide absolute value).
@
text
@d77 5
a81 3
  syscall_printf ("ticks %d, CLOCKS_PER_SEC %d", ticks, CLOCKS_PER_SEC);
  syscall_printf ("user_time %d, kernel_time %d, creation_time %d, exit_time %d",
		  user_time, kernel_time, creation_time, exit_time);
d128 1
a128 1
  syscall_printf ("%R = settimeofday(%x, %x)", res, tv, tz);
d326 1
a326 1
  syscall_printf ("%d = time(%x)", res, ptr);
d430 1
a430 1
  debug_printf ("incoming utime act %x", buf->actime);
d501 1
a501 1
  		 (now.QuadPart - (monotonic ? 0LL : primed_pc.QuadPart)));
@


1.117
log
@Throughout, update copyrights to reflect dates which correspond to main-branch
checkins.  Regularize copyright format.
@
text
@d480 1
a480 1
hires_ns::nsecs ()
d498 2
a499 1
  now.QuadPart = (LONGLONG) (freq * (double) (now.QuadPart - primed_pc.QuadPart));
d646 1
a646 1
	  LONGLONG now = ntod.nsecs ();
@


1.116
log
@	* times.cc (clock_setres): Set minperiod to period.
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
   2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012 Red Hat, Inc.
@


1.116.2.1
log
@	* Throughout, fix format string of debug printf and api_fatal calls
	to work in 32 and 64 bit environment, as well as to honor signedness.
	Use %y instead of 0x%x.
	* fhandler.h (class fhandler_dev_mem): Change type of mem_size from
	DWORD to SIZE_T.
	* fhandler_mem.cc: Throughout, cast mem_size in comparisons to make
	GCC happy.
	* fhandler_process.cc (format_process_maps): Change type of ret_len
	to SIZE_T.
	(get_mem_values): Ditto for n and length.
	* mmap.cc (MapView): Ditto for commitsize and viewsize.
	(class mmap_record): Ditto for len.  Use SIZE_T througout for memory
	size in method args and return types.
	* ntdll.h (NtLockVirtualMemory): Fix type of memory size parameters
	to SIZE_T.
	(NtMapViewOfSection): Ditto.
	(NtQueryVirtualMemory): Ditto.
	(NtUnlockVirtualMemory): Ditto.
	(RtlFreeHeap): Change type of first parameter to HANDLE.
	* shm.cc (shmat): Change type of viewsize to SIZE_T.
	* timer.cc (timer_thread): Change type of sleep_ms to LONG.
	(ualarm): Drop casts to unsigned int in timer value computation.
@
text
@d77 3
a79 5
  syscall_printf ("ticks %D, CLOCKS_PER_SEC %d", ticks, CLOCKS_PER_SEC);
  syscall_printf ("user_time %D, kernel_time %D, "
		  "creation_time %D, exit_time %D",
		  user_time, kernel_time,
		  creation_time, exit_time);
d126 1
a126 1
  syscall_printf ("%R = settimeofday(%p, %p)", res, tv, tz);
d324 1
a324 1
  syscall_printf ("%d = time(%p)", res, ptr);
d428 1
a428 1
  debug_printf ("incoming utime act %lx", buf->actime);
@


1.116.2.2
log
@Pull in changes from HEAD
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2007, 2008, 2009, 2010, 2011, 2012 Red Hat, Inc.
@


1.116.2.3
log
@Pull inchange from HEAD
@
text
@d482 1
a482 1
hires_ns::nsecs (bool monotonic)
d500 1
a500 2
  now.QuadPart = (LONGLONG) (freq * (double)
		 (now.QuadPart - (monotonic ? 0LL : primed_pc.QuadPart)));
d647 1
a647 1
	  LONGLONG now = ntod.nsecs (true);
@


1.115
log
@	* times.cc (clock_setres): Revert previous change.
@
text
@d826 1
a826 1
  minperiod = actual;
@


1.114
log
@	* hires.h (hires_ms::dmsecs): Drop unused method.
	* times.cc (JITTER): Remove.
	(gtod): Revert to process-local variable.
	(hires_ms::nsecs): Just return system time to disallow discrepancy with
	the OS.
	(hires_ms::resolution): Return coarsest timer value from OS.  Add
	comment to explain why.
	(clock_setres): Ditto.
@
text
@d826 1
a826 4
  /* The actual resolution of the OS timer is a system-wide setting which
     can be changed any time, by any process.  The only fixed value we can
     rely on is the coarsest value. */
  minperiod = coarsest;
@


1.113
log
@	* times.cc (hires_ns::resolution): Don't return less than 1.
@
text
@d4 1
a4 1
   2005, 2006, 2007, 2008, 2009, 2010, 2011 Red Hat, Inc.
d30 1
a30 11
/* Max allowed diversion in 100ns of internal timer from system time.  If
   this difference is exceeded, the internal timer gets re-primed. */
#define JITTER (40 * 10000LL)

/* TODO: Putting this variable in the shared cygwin region partially solves
   the problem of cygwin processes not recognizing date changes when other
   cygwin processes set the date.  There is still an additional problem of
   long-running cygwin processes becoming confused when a non-cygwin process
   sets the date.  Unfortunately, it looks like a minor redesign is required
   to handle that case.  */
hires_ms gtod __attribute__((section (".cygwin_dll_common"), shared));
d568 1
a568 10

  LONGLONG t = systime_ns ();
  LONGLONG res = initime_ns + timeGetTime_ns ();
  if (llabs (res - t) > JITTER)
    {
      inited = false;
      prime ();
      res = initime_ns + timeGetTime_ns ();
    }
  return res;
d715 4
a718 1
	minperiod = (DWORD) actual;
d721 3
a723 1
	  /* Try to empirically determine current timer resolution */
d826 4
a829 1
  minperiod = actual;
@


1.112
log
@Throughout, remove extra space after function name from debugging output.
Throughout, change syscalls to report on return values using new %R format
option.
* smallprint.cc (__small_vsprintf): Add parsing for %R to report on return
values and possible errno from syscalls.
* errno.cc (errmap): Add PRIVILEGE_NOT_HELD.
* fhandler_tty.cc (fhandler_pty_master::setup): When creating a thread use
shorter name to reduce debuggging output.
* select.cc (start_thread_pipe): Ditto.
(start_thread_serial): Ditto.
(start_thread_socket): Ditto.
(start_thread_mailslot): Ditto.
* sigproc.cc (talktome): Ditto.
@
text
@d721 1
a721 1
  return (LONGLONG) freq;
@


1.111
log
@* cygtls.h (struct _local_storage): Add cw_timer member.
* cygtls.cc (_cygtls::init_thread): Initialize locals.cw_timer.
(_cygtls::fixup_after_fork): Ditto.
* tlsoffsets.h: Regenerate.
* ntdll.h (enum _TIMER_INFORMATION_CLASS): Define.
(struct _TIMER_BASIC_INFORMATION): Define.
(NtQueryTimer): Declare function.
* thread.h (cancelable_wait): Change timeout argument to
PLARGE_INTEGER and provide NULL default.
(fast_mutex::lock): Adjust accordingly.
(pthread_cond::wait): Change timeout argument to PLARGE_INTEGER
and default to NULL.
* thread.cc (cancelable_wait): Change timeout argument to
PLARGE_INTEGER.  Initialize _cygtls.locals.cw_timer if needed.
Use NT waitable timers for handling timeout.  Return remaining time
to timeout argument if timeout was relative.
(pthread_cond::wait): Change timeout argument to PLARGE_INTEGER.
Adjust to change in cancelable_wait.
(pthread_mutex::lock): Adjust to change in cancelable_wait.
(pthread_spinlock::lock): Ditto.
(pthread::join): Ditto.
(__pthread_cond_dowait): Change waitlength argument to PLARGE_INTEGER.
Adjust to changes in cancelable_wait and pthread_cond::wait.
(pthread_cond_timedwait): Adjust to change in __pthread_cond_dowait.
(pthread_cond_wait): Ditto.
(semaphore::_timedwait): Adjust to change in cancelable_wait.
(semaphore::_wait): Ditto.
* exceptions.cc (handle_sigsuspend): Ditto.
* signal.cc (nanosleep): Ditto.
* wait.cc (wait4): Ditto. Fix copyright dates.
* times.cc (FACTOR, NSPERSEC): Move from here...
* hires.h (FACTOR, NSPERSEC): ...to here.
@
text
@d133 1
a133 3
  syscall_printf ("%d = settimeofday (%x, %x)", res, tv, tz);

  if (res != 0)
d136 1
d334 1
a334 1
  syscall_printf ("%d = time (%x)", res, ptr);
d382 1
a382 2
  syscall_printf ("%d = utimes (%S, %p)",
		  res, win32.get_nt_native_path (), tvp);
d417 1
a417 1
  syscall_printf ("%d = futimens (%d, %p)", res, fd, tvp);
@


1.110
log
@whitespace elimination
@
text
@a29 4
/* 100ns difference between WIndows and UNIX timebase. */
#define FACTOR (0x19db1ded53e8000LL)
/* # of 100ns intervals per second. */
#define NSPERSEC 10000000LL
d736 1
a736 1
	minperiod = (DWORD) actual / 10000L;
d756 1
a756 1
	  period /= 40000L;
a758 4
      /* The resolution can be as low as 5000 100ns intervals on recent OSes.
	 We have to make sure that the resolution in ms is never 0. */
      if (!minperiod)
	minperiod = 1L;
d781 2
a782 2
	  tp->tv_sec = period / 1000;
	  tp->tv_nsec = (period % 1000) * 1000000;
d833 1
a833 1
      && NT_SUCCESS (NtSetTimerResolution (minperiod * 10000L, FALSE, &actual)))
d842 1
a842 5
  minperiod = actual / 10000L;
  /* The resolution can be as low as 5000 100ns intervals on recent OSes.
     We have to make sure that the resolution in ms is never 0. */
  if (!minperiod)
    minperiod = 1L;
@


1.109
log
@* cygwin.din (clock_getcpuclockid): Export.
(pthread_getcpuclockid): Export.
* hires.h (PID_TO_CLOCKID): New macro.
(CLOCKID_TO_PID): New macro.
(CLOCKID_IS_PROCESS): New macro.
(THREADID_TO_CLOCKID): New macro.
(CLOCKID_TO_THREADID): New macro.
(CLOCKID_IS_THREAD): New macro.
* ntdll.h (enum _THREAD_INFORMATION_CLASS): Add ThreadTimes.
* posix.sgml (std-notimpl): Add clock_getcpuclockid and
pthread_getcpuclockid from here...
(std-susv4): ... to here.
(std-notes): Remove limitations of clock_getres and clock_gettime.
Note limitation of timer_create to CLOCK_REALTIME.
* sysconf.cc (sca): Set _SC_CPUTIME to _POSIX_CPUTIME, and
_SC_THREAD_CPUTIME to _POSIX_THREAD_CPUTIME.
* thread.cc (pthread_getcpuclockid): New function.
* timer.cc (timer_create): Set errno to ENOTSUP for CPU-time clocks.
* times.cc (clock_gettime): Handle CLOCK_PROCESS_CPUTIME_ID and
CLOCK_THREAD_CPUTIME_ID.
(clock_getres): Ditto.
(clock_settime): Set errno to EPERM for CPU-time clocks.
(clock_getcpuclockid): New function.
* include/pthread.h (pthread_getcpuclockid): Declare.
* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
@
text
@d608 1
a608 1
        pid = getpid ();
d612 4
a615 4
        {
          set_errno (EINVAL);
          return -1;
        }
d637 1
a637 1
        thr_id = pthread::self ()->getsequence_np ();
d641 4
a644 4
        {
          set_errno (EINVAL);
          return -1;
        }
d659 8
a666 8
        {
          LONGLONG now = gtod.nsecs ();
          if (now == (LONGLONG) -1)
            return -1;
          tp->tv_sec = now / NSPERSEC;
          tp->tv_nsec = (now % NSPERSEC) * (1000000000 / NSPERSEC);
          break;
        }
d669 9
a677 9
        {
          LONGLONG now = ntod.nsecs ();
          if (now == (LONGLONG) -1)
            return -1;

          tp->tv_sec = now / 1000000000;
          tp->tv_nsec = (now % 1000000000);
          break;
        }
d680 2
a681 2
        set_errno (EINVAL);
        return -1;
d787 6
a792 6
        {
          DWORD period = gtod.resolution ();
          tp->tv_sec = period / 1000;
          tp->tv_nsec = (period % 1000) * 1000000;
          break;
        }
d795 6
a800 6
        {
          LONGLONG period = ntod.resolution ();
          tp->tv_sec = period / 1000000000;
          tp->tv_nsec = period % 1000000000;
          break;
        }
d803 2
a804 2
        set_errno (EINVAL);
        return -1;
@


1.108
log
@* times.cc (settimeofday): Add EFAULT handler.
Set errno to EINVAL if tv.tv_nsec is invalid, and to EPERM if
SetSystemTime fails.  Return -1 in case of failure, all for
compatibility with BSD and Linux.
(clock_settime): New function.
* cygwin.din (clock_settime): Export.
* posix.sgml (std-susv4): Add clock_settime.
Move clock_setres from here...
(std-deprec): ... to here.
(std-notes): Correct limitation of clock_setres to only CLOCK_REALTIME.
Add limitation of clock_settime to only CLOCK_REALTIME.
* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
@
text
@d18 1
d26 1
d599 57
d692 10
d774 10
d858 9
@


1.107
log
@Eliminate trailing whitespace in some files.

* dll_init.cc (dll_list::alloc): Reset 'p' in forked process.
* select.cc (select_stuff::wait): Move cleanup() closer to WFMO to minimize
unavoidable (?) race.
@
text
@d112 9
a120 1
  tz = tz;			/* silence warning about unused variable */
d132 1
a132 1
  res = !SetSystemTime (&st);
d137 3
d628 17
@


1.106
log
@	* hires.h: Fix copyright.
	* times.cc: Ditto.
	localtime, gmtime).
	(FACTOR): Add comment.
	(NSPERSEC): Ditto.
	(JITTER): New definition.  Comment.
	(systime_ns): Avoid gratuitous copying of the value returned by
	GetSystemTimeAsFileTime.
	(corelocaltime, localtime, gmtime): Remove very old, unused code block.
	(cygwin_tzset): Remove.
	(hires_ms::timeGetTime_ns): Add missing semicolon in comment.
	(hires_ms::nsecs): Redefine check for difference between internal
	timer value and system time.
@
text
@d516 1
a516 1
     
@


1.105
log
@	* times.cc (hires_ms::resolution): Make sure resolution is never 0.
	(clock_setres): Ditto.
@
text
@d4 1
a4 1
   2005, 2006, 2007, 2008, 2009, 2010 Red Hat, Inc.
d28 1
d30 1
d32 3
d50 1
a50 4
  FILETIME ft;
  GetSystemTimeAsFileTime (&ft);
  x.HighPart = ft.dwHighDateTime;
  x.LowPart = ft.dwLowDateTime;
a330 160
/*
 * localtime_r.c
 * Original Author:	Adapted from tzcode maintained by Arthur David Olson.
 *
 * Converts the calendar time pointed to by tim_p into a broken-down time
 * expressed as local time. Returns a pointer to a structure containing the
 * broken-down time.
 */

#define SECSPERMIN	60
#define MINSPERHOUR	60
#define HOURSPERDAY	24
#define SECSPERHOUR	(SECSPERMIN * MINSPERHOUR)
#define SECSPERDAY	(SECSPERHOUR * HOURSPERDAY)
#define DAYSPERWEEK	7
#define MONSPERYEAR	12

#define YEAR_BASE	1900
#define EPOCH_YEAR      1970
#define EPOCH_WDAY      4

#define isleap(y) ((((y) % 4) == 0 && ((y) % 100) != 0) || ((y) % 400) == 0)

#if 0 /* POSIX_LOCALTIME */

static _CONST int mon_lengths[2][MONSPERYEAR] = {
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

static _CONST int year_lengths[2] = {
  365,
  366
};

/*
 * Convert a time_t into a struct tm *.
 * Does NO timezone conversion.
 */

/* Cygwin internal */
static struct tm * __stdcall
corelocaltime (const time_t * tim_p)
{
  long days, rem;
  int y;
  int yleap;
  _CONST int *ip;
  struct tm &localtime_buf=_my_tls.locals.localtime_buf;

  time_t tim = *tim_p;
  struct tm *res = &localtime_buf;

  days = ((long) tim) / SECSPERDAY;
  rem = ((long) tim) % SECSPERDAY;

  while (rem < 0)
    {
      rem += SECSPERDAY;
      --days;
    }
  while (rem >= SECSPERDAY)
    {
      rem -= SECSPERDAY;
      ++days;
    }

  /* compute hour, min, and sec */
  res->tm_hour = (int) (rem / SECSPERHOUR);
  rem %= SECSPERHOUR;
  res->tm_min = (int) (rem / SECSPERMIN);
  res->tm_sec = (int) (rem % SECSPERMIN);

  /* compute day of week */
  if ((res->tm_wday = ((EPOCH_WDAY + days) % DAYSPERWEEK)) < 0)
    res->tm_wday += DAYSPERWEEK;

  /* compute year & day of year */
  y = EPOCH_YEAR;
  if (days >= 0)
    {
      for (;;)
	{
	  yleap = isleap (y);
	  if (days < year_lengths[yleap])
	    break;
	  y++;
	  days -= year_lengths[yleap];
	}
    }
  else
    {
      do
	{
	  --y;
	  yleap = isleap (y);
	  days += year_lengths[yleap];
	} while (days < 0);
    }

  res->tm_year = y - YEAR_BASE;
  res->tm_yday = days;
  ip = mon_lengths[yleap];
  for (res->tm_mon = 0; days >= ip[res->tm_mon]; ++res->tm_mon)
    days -= ip[res->tm_mon];
  res->tm_mday = days + 1;

  /* set daylight saving time flag */
  res->tm_isdst = -1;

  syscall_printf ("%d = corelocaltime (%x)", res, tim_p);

  return (res);
}

/* localtime: POSIX 8.1.1, C 4.12.3.4 */
/*
 * localtime takes a time_t (which is in UTC)
 * and formats it into a struct tm as a local time.
 */
extern "C" struct tm *
localtime (const time_t *tim_p)
{
  time_t tim = *tim_p;
  struct tm *rtm;

  tzset ();

  tim -= _timezone;

  rtm = corelocaltime (&tim);

  rtm->tm_isdst = _daylight;

  syscall_printf ("%x = localtime (%x)", rtm, tim_p);

  return rtm;
}

/* gmtime: C 4.12.3.3 */
/*
 * gmtime takes a time_t (which is already in UTC)
 * and just puts it into a struct tm.
 */
extern "C" struct tm *
gmtime (const time_t *tim_p)
{
  time_t tim = *tim_p;

  struct tm *rtm = corelocaltime (&tim);
  /* UTC has no daylight savings time */
  rtm->tm_isdst = 0;

  syscall_printf ("%x = gmtime (%x)", rtm, tim_p);

  return rtm;
}

#endif /* POSIX_LOCALTIME */

a455 6
/* obsolete, changed to cygwin_tzset when localtime.c was added - dj */
extern "C" void
cygwin_tzset ()
{
}

d523 1
a523 1
	   tick_count_start = GetTickCount ()
d574 1
a574 1
  if (res < (t - 40 * 10000LL))
@


1.104
log
@	* autoload.cc (winmm): Remove time functions.  Don't treat
	unloadable wave functions as fatal.
	* hires.h (hires_ms::timeGetTime_ns): New private method.
	(hires_ms::dmsecs): Call timeGetTime_ns here.
	* ntdll.h (struct _KSYSTEM_TIME): Define.
	(KUSER_SHARED_DATA): Redefine to allow access to InterruptTime.
	(SharedUserData): Define here.
	(NtQueryTimerResolution): Declare.
	(NtSetTimerResolution): Declare.
	* path.cc (SharedUserData): Move to ntdll.h.
	* times.cc (hires_ms::timeGetTime_ns): New private method.
	Use throughout instead of timeGetTime.  Document entire functionality
	of timeGetTime in case we need it.
	(hires_ms::resolution): Try a call to NtQueryTimerResolution
	to fetch current period.  Fall back to heuristic if that fails.
	Cast to DWORD in assignments to minperiod.
	(clock_setres): Align period to possible values per a call to
	NtQueryTimerResolution.  Explain why.  Replace calls to timeBeginPeriod
	and timeEndPeriod with underlying call to NtSetTimerResolution.  Use
	status code from NtSetTimerResolution to compute errno.
	Convert period to ULONGLONG and store 100ns value to simplify code.
@
text
@d830 4
d908 4
@


1.103
log
@Implement POSIX.1-2004 Monotonic Clock.
* hires.h: Change hires_us to hires_ns, with nanosecond resolution.
(hires_ns::primed_ft): Remove.
(hires_ns::nsecs): New prototype.
(hires_ns::usecs): Rewrite in terms of nsecs.
(hires_ns::resolution): New prototype.
* times.cc: Change hires_us to hires_ns.
(ntod): Declare.
(systime): Remove.
(hires_ns::prime): Increase resolution to nanoseconds.
(hires_ns::nsecs): Rename usecs to nsecs to reflect increased resolution.
Remove justdelta argument.
(hires_ns::resolution): New function.
(clock_gettime): Accept CLOCK_MONOTONIC.
Use EINVAL instead of ENOSYS per POSIX.1-2004.
(clock_getres): Ditto.
(clock_setres): Use EINVAL instead of ENOSYS to conform with other
implementations.
* strace.cc (strace::microseconds): Adjust for hires_ns.
* sysconf.cc (sca): Set _SC_MONOTONIC_CLOCK to _POSIX_MONOTONIC_CLOCK.
* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
@
text
@d669 47
d723 1
a723 1
      initime_ns = systime_ns () - (((LONGLONG) timeGetTime ()) * 10000LL);
d737 1
a737 1
  LONGLONG res = initime_ns + (((LONGLONG) timeGetTime ()) * 10000LL);
d742 1
a742 1
      res = initime_ns + (((LONGLONG) timeGetTime ()) * 10000LL);
d784 1
a784 1
hires_ns::resolution()
d802 7
a808 5
      /* Try to empirically determine current timer resolution */
      int priority = GetThreadPriority (GetCurrentThread ());
      SetThreadPriority (GetCurrentThread (), THREAD_PRIORITY_TIME_CRITICAL);
      DWORD period = 0;
      for (int i = 0; i < 4; i++)
d810 19
a828 8
	  DWORD now;
	  DWORD then = timeGetTime ();
	  while ((now = timeGetTime ()) == then)
	    continue;
	  then = now;
	  while ((now = timeGetTime ()) == then)
	    continue;
	  period += now - then;
a829 3
      SetThreadPriority (GetCurrentThread (), priority);
      period /= 4;
      minperiod = period;
d867 2
d875 21
a895 4
  if (period_set)
    timeEndPeriod (minperiod);

  DWORD period = (tp->tv_sec * 1000) + ((tp->tv_nsec) / 1000000);
d897 2
a898 1
  if (timeBeginPeriod (period))
d900 1
a900 7
      minperiod = period;
      period_set = true;
    }
  else
    {
      __seterrno ();
      timeBeginPeriod (minperiod);
d903 2
a904 1

@


1.103.2.1
log
@	* autoload.cc (winmm): Rremove time functions.  Don't treat
	unloadable wave functions as fatal.
	* hires.h (hires_ms::timeGetTime_ns): New private method.
	(hires_ms::dmsecs): Call timeGetTime_ns here.
	* ntdll.h (struct _KSYSTEM_TIME): Define.
	(KUSER_SHARED_DATA): Redefine to allow access to InterruptTime.
	(SharedUserData): Define here.
	(NtQueryTimerResolution): Declare.
	(NtSetTimerResolution): Declare.
	* path.cc (SharedUserData): Move to ntdll.h.
	* times.cc (hires_ms::timeGetTime_ns): New private method.
	Use throughout instead of timeGetTime.
	(hires_ms::resolution): Try a call to NtQueryTimerResolution
	to fetch current period.  Fall back to heuristic if that fails.
	(clock_setres): Align period to possible values per a call to
	NtQueryTimerResolution.  Explain why.  Replace calls to
	timeBeginPeriod and timeEndPeriod with underlying call to
	NtSetTimerResolution.
@
text
@a668 21
LONGLONG
hires_ms::timeGetTime_ns ()
{
  LARGE_INTEGER t;

  /* This is how timeGetTime is implemented in winmm.dll.
     The real timeGetTime subtracts and adds some values which are constant
     over the lifetime of the process.  Since we don't need absolute accuracy
     of the value returned by timeGetTime, only relative accuracy, we can skip
     this step. */
  do
    {
      t.HighPart = SharedUserData.InterruptTime.High1Time;
      t.LowPart = SharedUserData.InterruptTime.LowPart;
    }
  while (t.HighPart != SharedUserData.InterruptTime.High2Time);
  /* We use the value in full 100ns resolution in the calling functions
     anyway, so we can skip dividing by 10000 here. */
  return t.QuadPart;
}

d676 1
a676 1
      initime_ns = systime_ns () - timeGetTime_ns ();
d690 1
a690 1
  LONGLONG res = initime_ns + timeGetTime_ns ();
d695 1
a695 1
      res = initime_ns + timeGetTime_ns ();
d755 5
a759 7
      NTSTATUS status;
      ULONG coarsest, finest, actual;

      status = NtQueryTimerResolution (&coarsest, &finest, &actual);
      if (NT_SUCCESS (status))
	minperiod = (UINT) actual / 10000L;
      else
d761 8
a768 19
	  /* Try to empirically determine current timer resolution */
	  int priority = GetThreadPriority (GetCurrentThread ());
	  SetThreadPriority (GetCurrentThread (),
			     THREAD_PRIORITY_TIME_CRITICAL);
	  LONGLONG period = 0;
	  for (int i = 0; i < 4; i++)
	    {
	      LONGLONG now;
	      LONGLONG then = timeGetTime_ns ();
	      while ((now = timeGetTime_ns ()) == then)
		continue;
	      then = now;
	      while ((now = timeGetTime_ns ()) == then)
		continue;
	      period += now - then;
	    }
	  SetThreadPriority (GetCurrentThread (), priority);
	  period /= 40000L;
	  minperiod = (UINT) period;
d770 3
a809 1

d816 3
d821 6
a826 16
  /* clock_setres is non-POSIX/non-Linux.  On QNX, the function always
     rounds the incoming value to the nearest supported value. */
  ULONG coarsest, finest, actual;
  if (NT_SUCCESS (NtQueryTimerResolution (&coarsest, &finest, &actual)))
    {
      if (period > coarsest / 10000L)
	period = coarsest / 10000L;
      else if (finest / 10000L > period)
	period = finest / 10000L;
    }

  if (period_set
      && NT_SUCCESS (NtSetTimerResolution (minperiod * 10000L, FALSE, &actual)))
    period_set = false;

  if (!NT_SUCCESS (NtSetTimerResolution (period * 10000L, TRUE, &actual)))
d829 1
d832 1
a832 2
  minperiod = actual / 10000L;
  period_set = true;
@


1.103.2.2
log
@	* times.cc (hires_ms::timeGetTime_ns): Document entire functionality
	of timeGetTime in case we need it.
@
text
@d678 1
a678 26
     this step.  However, if we ever find out that we need absolute accuracy,
     here's how it works in it's full beauty:
     
     - At process startup, winmm initializes two calibration values:

       DWORD tick_count_start;
       LARGE_INTEGER int_time_start;
       do {
         tick_count_start = GetTickCount ()
	  do
	    {
	      int_time_start.HighPart = SharedUserData.InterruptTime.High1Time;
	      int_time_start.LowPart = SharedUserData.InterruptTime.LowPart;
	    }
	  while (int_time_start.HighPart
		 != SharedUserData.InterruptTime.High2Time);
	  }
	while (tick_count_start != GetTickCount ();

      - timeGetTime computes its return value in the loop as below, but then:

        t.QuadPart -= int_time_start.QuadPart;
	t.Loawart /= 10000;
	t.LowPart += tick_count_start;
	return t.LowPart;
  */
@


1.103.2.3
log
@	* times.cc (hires_ms::timeGetTime_ns): Fix typo in comment.
@
text
@d700 1
a700 1
	t.LowPart /= 10000;
@


1.103.2.4
log
@Fix previous fix for typo
@
text
@d700 1
a700 1
	t.QuadPart /= 10000;
@


1.103.2.5
log
@	* times.cc (clock_setres): Use status code from NtSetTimerResolution
	to compute errno.
@
text
@a865 1
  int status;
d890 1
a890 2
  status = NtSetTimerResolution (period * 10000L, TRUE, &actual);
  if (!NT_SUCCESS (status))
d892 1
a892 1
      __seterrno_from_nt_status (status);
@


1.103.2.6
log
@	* times.cc (hires_ms::timeGetTime_ns): Fix formatting in comment.
	(hires_ms::resolution): Cast to DWORD in assignments to minperiod.
	(clock_setres): Improve comment.  Convert period to ULONGLONG and
	store 100ns value to simplify code.
@
text
@d685 18
a702 19
       do
	 {
	   tick_count_start = GetTickCount ()
	   do
	     {
	       int_time_start.HighPart = SharedUserData.InterruptTime.High1Time;
	       int_time_start.LowPart = SharedUserData.InterruptTime.LowPart;
	     }
	   while (int_time_start.HighPart
		  != SharedUserData.InterruptTime.High2Time);
	 }
       while (tick_count_start != GetTickCount ();

     - timeGetTime computes its return value in the loop as below, and then:

       t.QuadPart -= int_time_start.QuadPart;
       t.QuadPart /= 10000;
       t.LowPart += tick_count_start;
       return t.LowPart;
d783 1
a783 1
hires_ns::resolution ()
d806 1
a806 1
	minperiod = (DWORD) actual / 10000L;
d827 1
a827 1
	  minperiod = (DWORD) period;
d874 1
a874 6
  /* Convert to 100ns to match OS resolution.  The OS uses ULONG values
     to express resolution in 100ns units, so the coarsest timer resolution
     is < 430 secs.  Actually the coarsest timer resolution is only slightly
     beyond 15ms, but this might change in future OS versions, so we play nice
     here. */
  ULONGLONG period = (tp->tv_sec * 10000000ULL) + ((tp->tv_nsec) / 100ULL);
d881 4
a884 4
      if (period > coarsest)
	period = coarsest;
      else if (finest > period)
	period = finest;
d891 1
a891 1
  status = NtSetTimerResolution (period, TRUE, &actual);
@


1.102
log
@* times.cc (gtod): Move to sharable region.
@
text
@d39 2
a52 6
static inline LONGLONG
systime ()
{
  return systime_ns () / 10;
}

d622 1
a622 1
hires_us::prime ()
d641 1
a641 2
  primed_ft.QuadPart = systime ();
  freq = (double) ((double) 1000000. / (double) ifreq.QuadPart);
d647 1
a647 1
hires_us::usecs (bool justdelta)
d666 1
a666 2
  LONGLONG res = justdelta ? now.QuadPart : primed_ft.QuadPart + now.QuadPart;
  return res;
d703 1
a703 1
  if (clk_id != CLOCK_REALTIME)
d705 24
a728 2
      set_errno (ENOSYS);
      return -1;
a730 6
  LONGLONG now = gtod.nsecs ();
  if (now == (LONGLONG) -1)
    return -1;

  tp->tv_sec = now / NSPERSEC;
  tp->tv_nsec = (now % NSPERSEC) * (1000000000 / NSPERSEC);
d736 14
d780 1
a780 1
  if (clk_id != CLOCK_REALTIME)
d782 19
a800 2
      set_errno (ENOSYS);
      return -1;
a802 5
  DWORD period = gtod.resolution ();

  tp->tv_sec = period / 1000;
  tp->tv_nsec = (period % 1000) * 1000000;

d812 1
a812 1
      set_errno (ENOSYS);
@


1.101
log
@* hires.h (hires_base::reset): New function.
(hires_us): Specify that hires_base is a public import.
(hires_ms): Ditto.
* times.cc (gtod): Move earlier in file.
(settimeofday): Reset gtod so that base will be subsequently recalculated.
@
text
@d31 7
a37 1
hires_ms NO_COPY gtod;
@


1.100
log
@	* dtable.cc (build_fh_name_worker): Remove.  Move all functionality
	back into build_fh_name.
	(build_fh_name): Drop unused HANDLE parameter.  Drop call to pc.fillin.
	Remove disabled build_fh_name with UNICODE_STRING name parameter.
	* dtable.h (build_fh_name): Drop HANDLE parameter from declaration.
	Remove declaration for build_fh_name with UNICODE_STRING name parameter.
	* path.cc (path_conv::fillin): Remove.
	(symlink_info::check): Fix comment.
	* path.h (path_conv::fillin): Remove declaration.
	* dir.cc: Accommodate change in build_fh_name parameters throughout.
	* sec_acl.cc: Ditto.
	* syscalls.cc: Ditto.

	* ntea.cc (getxattr_worker): Fix debug output.
	(setxattr_worker): Ditto.
	* times.cc (utimens_worker): Ditto.
@
text
@d31 2
d121 1
a151 2
hires_ms NO_COPY gtod;

@


1.99
log
@	Throughout, replace hMainProc with GetCurrentProcess/NtCurrentProcess
	according to context.  Throughout, replace hMainThread with
	GetCurrentThread/NtCurrentThread according to context.
	* dcrt0.cc (dll_crt0_0): Drop duplication of GetCurrentProcess to
	hMainProc.  Drop duplication of GetCurrentThread to hMainThread.
	* dtable.cc (dtable::stdio_init): Remove useless comment.
	* globals.cc (hMainProc): Remove.
	(hMainThread): Remove.
	* ntdll.h (NtCurrentProcess): Define.
	(NtCurrentThread: Define.
@
text
@d4 1
a4 1
   2005, 2006, 2007, 2008, 2009 Red Hat, Inc.
d517 1
a517 1
	      debug_printf ("got %d error from build_fh_name", fh->error ());
@


1.98
log
@Improve clock_gettime and utimensat resolution.

* hires.h (hires_ms): Change initime_us to initime_ns, with 10x
more resolution.
(hires_ms::nsecs): New prototype.
(hires_ms::usecs, hires_ms::msecs, hires_ms::uptime): Adjust.
* times.cc (systime_ns): New helper function.
(hires_ms::prime): Use it for more resolution.
(hires_ms::usecs): Change to...
(hires_ms::nsecs): ...with more resolution.
(clock_gettime): Use more resolution.
(systime): Rewrite in terms of systime_ns.
(timespec_to_filetime): Rewrite math to reflect true operation.
* fhandler_disk_file.cc (utimens_fs): Use higher resolution.
@
text
@d80 1
a80 1
  GetProcessTimes (hMainProc, &creation_time, &exit_time,
@


1.97
log
@Remove unneeded header files from source files throughout.  Update copyrights
where appropriate.
* globals.cc: New file for generic global variables.
* mkglobals_h: New file to generate globals.h.
* mkstatic: New Script used to build a (currently non-working) static
libcygwin_s.a.
* Makefile.in: Add unused rule to build a non-working libcygwin_s.a.
(DLL_OFILES): Add globals.o.  Make all objects rely on globals.h.
(globals.h): New target.  Generate globals.h.
* cygtls.h: Honor new CYGTLS_HANDLE define to control when the HANDLE operator
is allowed in _cygtls.
* dcrt0.cc: Move most globals to globals.cc.
* init.cc: Ditto.
* environ.cc (strip_title_path): Remove now-unneeded extern.
* fhandler_serial.cc (fhandler_serial::open): Ditto.
* pinfo.cc: Ditto.
(commune_process): Ditto.
* shared.cc: Ditto.
* glob.cc: Ditto.
* strace.cc: Ditto.
* exceptions.cc: Define CYGTLS_HANDLE before including winsup.h.
* path.cc (stat_suffixes): Move here.
* security.h: Add forward class path_conv declaration.
* smallprint.cc (__small_vsprintf): Make a true c++ function.
(__small_sprintf): Ditto.
(small_printf): Ditto.
(console_printf): Ditto.
(__small_vswprintf): Ditto.
(__small_swprintf): Ditto.
* spawn.cc (spawn_guts): Remove _stdcall decoration in favor of regparm.
(hExeced): Move to globals.cc
* strfuncs.cc (current_codepage): Ditto.
(active_codepage): Ditto.
* sync.cc (lock_process::locker): Move here from dcrt0.cc.
* syscalls.cc (stat_suffixes): Move to path.cc.
* tty.cc (tty::create_master): Uncapitalize fatal warning for consistency.
* winsup.h: Include globals.h to declare most of the grab bag list of globals
which were previously defined here.
* mount.h: Move USER_* defines back to shared_info.h.
* speclib: Force temporary directory cleanup.
@
text
@d32 1
a32 1
systime ()
a39 1
  x.QuadPart /= 10;		/* Convert to microseconds */
d43 6
d199 1
a199 1
			    time_in->tv_nsec / (NSPERSEC/100000) + FACTOR;
d675 1
a675 1
      initime_us = systime () - (((LONGLONG) timeGetTime ()) * 1000LL);
d683 1
a683 1
hires_ms::usecs ()
d688 3
a690 3
  LONGLONG t = systime ();
  LONGLONG res = initime_us + (((LONGLONG) timeGetTime ()) * 1000LL);
  if (res < (t - 40000LL))
d694 1
a694 1
      res = initime_us + (((LONGLONG) timeGetTime ()) * 1000LL);
d708 1
a708 1
  LONGLONG now = gtod.usecs ();
d712 2
a713 2
  tp->tv_sec = now / 1000000;
  tp->tv_nsec = (now % 1000000) * 1000;
@


1.96
log
@	Add case-sensitivity.
	Unconditionally handle mount points case-sensitive.
	Unconditionally handle virtual paths case-sensitive.
	Unconditionally handle registry paths case-insensitive.
	Otherwise, accommodate case-sensitivity of given path throughout.
	* cygheap.cc (cygheap_root::set): Get additional caseinsensitive
	parameter and store it.
	* cygheap.h (struct cygheap_root_mount_info): Add member
	caseinsensitive.
	* dlfcn.cc (get_full_path_of_dll): Drop PC_NOFULL parameter from call
	to path_conv::check.
	* environ.cc (pcheck_case): Remove.
	(check_case_init): Remove.
	(known): Drop "check_case" option.
	* exceptions.cc (open_stackdumpfile): Add comment.
	* fhandler.cc (fhandler_base::get_default_fmode): Call pathmatch
	instead of strcasematch.
	* fhandler_disk_file.cc: Accommodate case-sensitivity of given path
	throughout.
	(__DIR_mounts::check_mount): Unconditionally check virtual paths
	case-sensitive.
	(fhandler_disk_file::link): Drop case clash handling.
	(fhandler_disk_file::open): Ditto.
	(fhandler_disk_file::readdir_helper): Drop managed mount code.
	* mount.cc: Remove managed mount code and datastructures.
	(struct opt): Remove "managed" option.  Add "posix=0" and "posix=1"
	options.
	(fillout_mntent): Remove "managed" output.  Add "posix" output.
	* path.cc (struct symlink_info): Remove case_clash member and
	case_check method.
	(pcheck_case): Remove.
	(path_prefix_p): Take additional bool parameter "caseinsensitive".
	(pathnmatch): Ditto.
	(pathmatch): Ditto.
	(mkrelpath): Ditto.
	(fs_info::update): Set caseinsensitive flag according to file system
	name and FILE_CASE_SENSITIVE_SEARCH flag.  Add comment.
	(tfx_chars_managed): Remove.
	(transform_chars): Drop "managed" parameter.  Always use tfx_chars.
	(get_nt_native_path): Drop "managed" parameter.  Make sure drive letters
	are always upper case.
	(getfileattr): Change second parameter to denote caseinsensitivity.
	(path_conv::check): Initialize caseinsensitive to OBJ_CASE_INSENSITIVE.
	Set caseinsensitive according to global obcaseinsensitive flag, file
	system case sensitivity and MOUNT_NOPOSIX mount flag.
	Drop case_clash and all the related code.
	(symlink_worker): Drop case clash handling.
	(symlink_info::set): Drop setting case_clash.
	(symlink_info::case_check): Remove.
	(cwdstuff::set): Add comment.
	(etc::init): Take path_conv instead of PUNICODE_STRING as parameter to
	allow case sensitivity.
	* path.h (enum pathconv_arg): Drop PC_SYM_IGNORE.
	(enum case_checking): Remove.
	(enum path_types): Drop PATH_ENC, add PATH_NOPOSIX flag.
	(struct fs_info): Add caseinsensitive flag and accessor methods.
	(class path_conv): Add caseinsensitive member and define
	objcaseinsensitive method.  Drop case_clash member and isencoded method.
	(pathmatch): Change prototype according to above change.
	(pathnmatch): Ditto.
	(path_prefix_p): Ditto.
	(get_nt_native_path): Ditto.
	(class etc): Ditto.
	(fnunmunge): Remove prototype.
	* shared.cc (shared_info::init_obcaseinsensitive): Initialize
	obcaseinsensitive flag from obcaseinsensitive registry value.
	(shared_info::initialize): Call init_obcaseinsensitive here by the
	first process creating the shared memory.
	* shared_info.h (mount_item::fnmunge): Remove.
	(shared_info::obcaseinsensitive): Rename from obcaseinsensitivity.
	(shared_info::init_obcaseinsensitive): Declare.
	* syscalls.cc (try_to_bin): Add comment.
	* include/sys/mount.h (MOUNT_ENC): Remove flag.
	(MOUNT_NOPOSIX): Add flag.
@
text
@d4 1
a4 1
   2005, 2006, 2007 Red Hat, Inc.
d12 1
a13 1
#define __timezonefunc__
@


1.95
log
@	* cygwin.din (futimens): Export.
	(utimensat): Export.
	* fhandler.cc (fhandler_base::utimens): Replace fhandler_base::utimes.
	Call utimens_fs.
	* fhandler.h (class fhandler_base): Declare utimens_fs instead of
	utimes_fs, utimens instead of utimes.
	(class fhandler_disk_file): Declare utimens instead of utimes.
	* fhandler_disk_file.cc (fhandler_disk_file::utimens): Replace
	fhandler_disk_file::utimes.
	(fhandler_base::utimens_fs): Replace fhandler_base::utimes_fs.
	Implement tv_nsec handling according to SUSv4.
	* syscalls.cc (utimensat): New function.
	* times.cc (timespec_to_filetime): New function.
	(timeval_to_timespec): New function.
	(utimens_worker): Replace utimes_worker.
	(utimes): Convert timeval to timespec and call utimens_worker.
	(lutimes): Ditto.
	(futimens): Take over implementation from futimes.
	(futimes): Convert timeval to timespec and call futimens.
	* winsup.h (timespec_to_filetime): Declare.
	* include/cygwin/version.h: Bump API minor number.
	* posix.sgml: Add SUSv4 section.  Add futimens and utimensat to it.
@
text
@d498 1
a498 1
				      TRUE))
@


1.94
log
@Remove unneeded header files from source files throughout.
@
text
@d187 15
d221 24
d481 2
a482 2
static int
utimes_worker (path_conv &win32, const struct timeval *tvp)
d517 1
a517 1
      res = fh->utimes (tvp);
d534 2
a535 1
  return utimes_worker (win32, tvp);
d543 2
a544 1
  return utimes_worker (win32, tvp);
d547 1
a547 1
/* BSD */
d549 1
a549 1
futimes (int fd, const struct timeval *tvp)
d557 1
a557 1
    res = cfd->utimes (tvp);
d559 2
a560 2
    res = utimes_worker (cfd->pc, tvp);
  syscall_printf ("%d = futimes (%d, %p)", res, fd, tvp);
d564 8
@


1.93
log
@	* fhandler.h (fhandler_base::pc): Make public.
	* fhandler_disk_file.cc (fhandler_disk_file::link): Drop extern
	declaration of stat_suffixes.  Use NT native path in debug output.
	(fhandler_base::utimes_fs): Simplify closeit case.  Use close_fs
	to close newly opened file handle.
	(fhandler_base::open_fs): Use NT native path in debug output.
	* path.cc: Throughout drop extern declaration of stat_suffixes.
	* path.h (stat_suffixes): Declare.
	* sec_acl.cc (acl_worker): Drop extern declaration of stat_suffixes.
	* times.cc (utimes_worker): Take path_conv as parameter instead of
	single-byte pathnam, drop nofollow argument, accommodate throughout.
	Compare UNICODE paths when enumerating file descriptors.  Fix
	formatting.  Use NT native path in debug output.
@
text
@a13 1
#include <time.h>
a16 1
#include <stdio.h>
a17 1
#include <pthread.h>
a24 1
#include "hires.h"
a25 2
#include "sigproc.h"
#include "sync.h"
@


1.92
log
@	* times.cc (gettimeofday): Align definition to POSIX.
@
text
@d32 1
d449 1
a449 1
utimes_worker (const char *path, const struct timeval *tvp, int nofollow)
a451 1
  path_conv win32 (path, PC_POSIX | (nofollow ? PC_SYM_NOFOLLOW : PC_SYM_FOLLOW));
d463 3
a465 1
	    && strcmp (cfd->get_win32_name (), win32) == 0)
d481 1
a481 1
	  }
d491 2
a492 1
  syscall_printf ("%d = utimes (%s, %p)", res, path, tvp);
d500 2
a501 1
  return utimes_worker (path, tvp, 0);
d508 2
a509 1
  return utimes_worker (path, tvp, 1);
d524 1
a524 1
    res = utimes_worker (cfd->get_win32_name (), tvp, 1);
@


1.91
log
@
	* times.cc: Define __timezonefunc__ before including time.h to protect
	definition of timezone function.
@
text
@d153 1
a153 1
gettimeofday (struct timeval *tv, struct timezone *tz)
d155 1
@


1.90
log
@	* fhandler.cc (fhandler_base::set_no_inheritance): Always use
	SetHandleInformation.
	* fhandler_disk_file.cc (fhandler_disk_file::lock): Always use
	UnlockFileEx/LockFileEx functions.
	* net.cc (fdsock): Don't bother to duplicate socket for inheritance.
	* sysconf.cc (get_nproc_values): Take NT for granted.
	(get_avphys): Ditto.
	* syslog.cc (WIN95_EVENT_LOG_PATH): Remove define.
	(get_win95_event_log_path): Remove.
	(vsyslog): Fix formatting.  Take NT for granted.
	* wincap.cc: Remove has_lock_file_ex, has_signal_object_and_wait,
	has_eventlog, has_set_handle_information,
	has_set_handle_information_on_console_handles and supports_smp
	throughout.
	* wincap.h: Ditto.
@
text
@d13 1
@


1.89
log
@	* fhandler.cc (fhandler_base::write): Remove wincap.has_lseek_bug case.
	Simplify seek beyond EOF case.
	* times.cc (times): Remove wincap.has_get_process_times case.
	* wincap.cc: Remove has_delete_on_close, has_page_guard,
	has_get_process_times and has_lseek_bug throughout.
	* wincap.h: Ditto.
@
text
@d4 1
a4 1
   2005 Red Hat, Inc.
@


1.88
log
@* times.cc (clock_getres): Use correct conversion from milliseconds to
seconds/nanoseconds.
(clock_setres): Use correct conversion to nanoseconds.
@
text
@a77 4
  if (wincap.has_get_process_times ())
    {
      GetProcessTimes (hMainProc, &creation_time, &exit_time,
		       &kernel_time, &user_time);
d79 12
a90 20
      syscall_printf ("ticks %d, CLOCKS_PER_SEC %d", ticks, CLOCKS_PER_SEC);
      syscall_printf ("user_time %d, kernel_time %d, creation_time %d, exit_time %d",
		      user_time, kernel_time, creation_time, exit_time);
      buf->tms_stime = __to_clock_t (&kernel_time, 0);
      buf->tms_utime = __to_clock_t (&user_time, 0);
      timeval_to_filetime (&myself->rusage_children.ru_stime, &kernel_time);
      buf->tms_cstime = __to_clock_t (&kernel_time, 1);
      timeval_to_filetime (&myself->rusage_children.ru_utime, &user_time);
      buf->tms_cutime = __to_clock_t (&user_time, 1);
    }
  else
    /* GetProcessTimes() does not work for non-NT versions of Windows.  The
       return values are undefined, so instead just copy the ticks value
       into utime so that clock() will work properly on these systems */
    {
      buf->tms_utime = tc;
      buf->tms_stime = 0;
      buf->tms_cstime = 0;
      buf->tms_cutime = 0;
    }
d92 1
a92 1
   return tc;
@


1.88.4.1
log
@2007-11-08  Christopher Faylor  <me+cygwin@@cgf.cx>

	* dllfixdbg: Eliminate extra objcopy step.

2007-11-07  Pedro Alves  <pedro_alves@@portugalmail.pt>

	* dllfixdbg: Pass --only-keep-debug to objcopy, instead of
	selecting the sections manually.

2007-11-06  Corinna Vinschen  <corinna@@vinschen.de>

	* thread.cc (pthread_key_create): Drop check for incoming valid object.

2007-11-06  Corinna Vinschen  <corinna@@vinschen.de>

	* shm.cc: Include sync.h
	(struct shm_shmid_list): Add ref_count member.
	(struct shm_attached_list): Remove hdl and size members.  Add a parent
	member pointing to referenced shm_shmid_list entry.
	(shm_guard): New muto.
	(SLIST_LOCK): Define.
	(SLIST_UNLOCK): Define.
	(fixup_shms_after_fork): Use hdl and size members of parent
	shm_shmid_list entry.
	(shmat): Access sequential bookkeeping lists in a thread safe way.
	Accommodate change in list element layout.  Align comments.
	(shmctl): Ditto.
	(shmdt): Ditto.
	(shmget): Ditto.

2007-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* shm.cc (shmctl): On IPC_RMID don't unmap views and don't close handle
	if the map is still referenced to emulate Linux and BSD behaviour.

2007-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* shm.cc (shmctl): On IPC_RMID also unmap all views on shared mem
	as well as connected shm_attached_list entry.

2007-10-30  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Don't remove
	write bits for directories with R/O attribute.
	(fhandler_base::fhaccess): Don't shortcircuit R/O attribute with W_OK
	scenarios for directories.

2007-09-26  Corinna Vinschen  <corinna@@vinschen.de>

	* termios.cc (setspeed): Support new baud rates introduced 2007-02-05.

2007-09-18  Corinna Vinschen  <corinna@@vinschen.de>

	* mmap.cc (fh_disk_file): Delete as global static variable and...
	(mmap64): ...define as local pointer to make mmap thread-safe.
	Accommodate throughout.  Only initialize fh_disk_file after file could
	be opened with GENERIC_EXECUTE access.

2007-09-06  Brian Dessent  <brian@@dessent.net>

	* include/sys/stdio.h (_flockfile): Don't try to lock a FILE
	that has the __SSTR flag set.
	(_ftrylockfile): Likewise.
	(_funlockfile): Likewise.

2007-08-24  Corinna Vinschen  <corinna@@vinschen.de>

	* syscalls.cc (open): Don't follow symlinks if O_EXCL is given.

2007-08-09  Ernie Coskrey  <Ernie.Coskrey@@steeleye.com>

	* gendef (sigbe): Reset "incyg" while the stack lock is active to avoid
	a potential race.

2007-08-01  Corinna Vinschen  <corinna@@vinschen.de>

	* localtime.cc (tzsetwall): Don't set TZ.

2007-07-17  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.cc (fhandler_base::fhaccess): Add check for R/O file system.

2007-07-14  Christopher Faylor  <me+cygwin@@cgf.cx>

	* init.cc (in_dllentry): Delete.
	(dll_entry): Remove assignment to deleted variable.
	* winsup.h (in_dllentry): Delete declaration.
	* exceptions.cc (inside_kernel): Use another method to see if we are in
	dll_entry phase.

2007-07-14  Christopher Faylor  <me+cygwin@@cgf.cx>

	* init.cc (in_dllentry): Make NO_COPY to avoid spurious false positives.

2007-07-09  Christopher Faylor  <me+cygwin@@cgf.cx>

	* dlfcn.cc (dlclose): Don't close handle returned from
	GetModuleHandle(NULL).

2007-07-06  Corinna Vinschen  <corinna@@vinschen.de>

	* times.cc (gettimeofday): Align definition to POSIX.

2007-07-04  Corinna Vinschen  <corinna@@vinschen.de>

	* times.cc: Define __timezonefunc__ before including time.h to protect
	definition of timezone function.

2007-07-04  Corinna Vinschen  <corinna@@vinschen.de>

	* include/cygwin/time.h: Switch to timezone variable by default.  Add
	comment.

2007-06-27  Corinna Vinschen  <corinna@@vinschen.de>

	* shared_info.h (SHARED_INFO_CB): Accommodate change to shared_info.
	(CURR_SHARED_MAGIC): Ditto.
	(class shared_info): Add heap_slop_inited member.
	* shared.cc (shared_info::heap_slop_size): Use heap_slop_inited to
	track initializing heap_slop since 0 is a valid value for heap_slop.
	Drop useless < 0 consideration.

2007-06-12  Christopher Faylor  <me+cygwin@@cgf.cx>

	* signal.cc (usleep): Use useconds_t for the type as per POSIX.

2007-06-12  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.cc (fhandler_base::fstat): Set pipe permission bits more
	correctly.

2007-05-29  Corinna Vinschen  <corinna@@vinschen.de>

	* dtable.cc (dtable::set_file_pointers_for_exec): Call SetFilePointer
	correctly for 64 bit file access.  Comment out functionality.
	* fhandler.cc (fhandler_base::open): Don't set append_mode.
	(fhandler_base::write): Check for O_APPEND instead of append_mode.
	Call SetFilePointer correctly for 64 bit file access.  Handle
	errors from SetFilePointer.
	* fhandler.h (class fhandler_base): Drop append_mode status flag.
	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Handle
	seeking correctly for 64 bit file access.

2007-05-21  Christian Franke <franke@@computer.org>

	* fhandler_floppy.cc (fhandler_dev_floppy::lseek): Don't invalidate
	devbuf if new position is within buffered range.

2007-05-21  Eric Blake  <ebb9@@byu.net>

	* include/search.h (hsearch_r): Provide declaration.

2007-05-21  Christian Franke <franke@@computer.org>
	     Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_floppy.cc (fhandler_dev_floppy::lseek): Set buf size to
	sector size.  Simplify non-sector aligned case.  Handle errors from
	raw_read.

2007-05-15  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_socket.cc (adjust_socket_file_mode): New inline function.
	(fhandler_socket::fchmod): Squeeze mode through adjust_socket_file_mode
	before using it.
	(fhandler_socket::bind): Ditto.

2007-04-18  Brian Dessent  <brian@@dessent.net>

	* cygwin.sc: Remove duplicated .debug_macinfo section.
	* dllfixdbg: Also copy DWARF-2 sections into .dbg file.

2007-04-06  Eric Blake  <ebb9@@byu.net>

	* include/stdint.h (WINT_MIN): Fix sign.

2007-04-04  Eric Blake  <ebb9@@byu.net>

	* include/stdint.h (WINT_MIN, WINT_MAX): Fix definition.

2007-03-28  Christopher Faylor  <me@@cgf.cx>

	* spawn.cc (spawn_guts): Start pure-windows processes in a suspended
	state to avoid potential DuplicateHandle problems.

2007-03-07  Christopher Faylor  <me@@cgf.cx>

	* signal.cc (handle_sigprocmask): Remove extraneous
	sig_dispatch_pending.

2007-02-26  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.cc (fhandler_base::fstat): Set all file times to arbitrary
	fixed value.

2007-02-20  Christopher Faylor  <me@@cgf.cx>

	* exceptions.cc (_cygtls::signal_exit): Only call myself.exit when when
	exit_state indicates that we've visited do_exit.
	* sync.h (lock_process::lock_process): Use renamed exit_state -
	ES_PROCESS_LOCKED.
	* winsup.h: Rename ES_MUTO_SET to ES_PROCESS_LOCKED.

2007-02-20  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_socket.cc (fhandler_socket::bind): Remove printing wrong
	errno in debug output.

2007-02-05  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_serial.cc (fhandler_serial::tcsetattr): Add support for
	baud rates up to 3000000 baud.  Add missing 128K and 256K cases.
	(fhandler_serial::tcgetattr): Ditto.
	* include/sys/termios.h: Add baud rate definitions from B460800 up to
	B3000000.

2007-01-04  Brian Ford  <Brian.Ford@@FlightSafety.com>
	     Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.h (PREFERRED_IO_BLKSIZE): Define as 64K.
	* fhandler.cc (fhandler_base::fstat): Set st_blksize to
	PREFERRED_IO_BLKSIZE.
	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Ditto.
	* fhandler_mailslot.cc (fhandler_mailslot::fstat): Ditto.
	* fhandler_raw.cc (fhandler_dev_raw::fstat): Ditto.

2006-11-08  Corinna Vinschen  <corinna@@vinschen.de>

	* security.cc (get_token_group_sidlist): Always add the local
	group to the token.

2006-07-14  Corinna Vinschen  <corinna@@vinschen.de>

	* security.cc (get_token_group_sidlist): Always add the interactive
	group to the token.  Create logon_id group SID by copying it from
	incoming group list.
@
text
@a12 1
#define __timezonefunc__
d164 1
a164 1
gettimeofday (struct timeval *tv, void *tzvp)
a165 1
  struct timezone *tz = (struct timezone *) tzvp;
@


1.87
log
@* times.cc (hires_ms::usecs): Subtract from slop from system time or we'll
always end up priming the pump.
@
text
@d714 2
a715 2
  tp->tv_sec = period / 1000000;
  tp->tv_nsec = (period % 1000000) * 1000;
d733 1
a733 1
  DWORD period = (tp->tv_sec * 1000) + ((tp->tv_nsec) / 1000);
@


1.86
log
@* times.cc (systime): Correct precision referenced in comment.
* fhandler_tty.cc (fhandler_tty_slave::open): Don't free original windows
station since that will cause strange problems displaying fonts.  Reset windows
station to original station after creating console.
* times.cc (hires_ms::usecs): Only reprime when calculated time is less than
system time.
@
text
@d647 1
a647 1
  if (res < t)
@


1.85
log
@* times.cc (hires_ms::usecs): Correct order when checking if high precision
time is <= current time.
@
text
@d44 1
a44 1
  x.QuadPart /= 10;		/* Convert to milliseconds */
d647 1
a647 1
  if (res <= t)
@


1.84
log
@* hires.h (hires_ms::initime_ms): Delete.
(hires_ms::initime_us): Just define as LONGLONG.
(hires_ms::uptime): New function.
* select.cc (select_stuff::wait): Use gtod for timing to attempt to avoid
windows 32 bit wraparound.
* times.cc (systime): New function.
(times): Replace GetTickCount with gtod.uptime.
(hires_us::prime): Use systime() to calculate system time rather than calling
GetSystemTimeAsFileTime directly.
(hires_ms::prime): Ditto.  Eliminate initime_ms.
(hires_ms::usecs): Try harder to detect wraparound.
* fhandler_proc.cc (format_proc_partitions): Set drive_size to zero to avoid a
compiler warning.
@
text
@d645 1
d647 1
a647 1
  if (res <= systime ())
@


1.83
log
@* times.cc (hires_ms::prime): Remove debugging stuff.
(hires_ms::usecs): Ditto.
@
text
@d35 13
d50 1
a50 1
__to_clock_t (FILETIME * src, int flag)
d60 1
a60 1
  syscall_printf ("total %08x %08x", (unsigned)(total>>32), (unsigned)(total));
d74 1
a74 1
  DWORD ticks = GetTickCount ();
d77 1
a77 1
  clock_t tc = (clock_t) ((long long) ticks * CLOCKS_PER_SEC / 1000);
a584 1
  FILETIME f;
d595 3
a597 1
  GetSystemTimeAsFileTime (&f);
a598 7

  inited = 1;
  primed_ft.HighPart = f.dwHighDateTime;
  primed_ft.LowPart = f.dwLowDateTime;
  primed_ft.QuadPart -= FACTOR;
  primed_ft.QuadPart /= 10;
  freq = (double) ((double) 1000000. / (double) ifreq.QuadPart);
a629 1
      FILETIME f;
d632 2
a633 2
      initime_ms = timeGetTime ();
      GetSystemTimeAsFileTime (&f);
a634 6

      initime_us.HighPart = f.dwHighDateTime;
      initime_us.LowPart = f.dwLowDateTime;
      initime_us.QuadPart -= FACTOR;
      initime_us.QuadPart /= 10;
      inited = 1;
d645 2
a646 2
  DWORD now = timeGetTime ();
  if ((int) (now - initime_ms) < 0)
d648 1
a648 1
      inited = 0;
d650 1
a650 1
      now = timeGetTime ();
a651 2
  // FIXME: Not sure how this will handle the 49.71 day wrap around
  LONGLONG res = initime_us.QuadPart + ((LONGLONG) (now - initime_ms) * 1000);
@


1.82
log
@* times.cc (timezone): Put back (void).
* include/cygwin/time.h: Add more cygwin stuff from newlib.
@
text
@d624 2
a625 4
      // int priority = GetThreadPriority (GetCurrentThread ());
// stupid_printf ("priority %d", priority);
      // SetThreadPriority (GetCurrentThread (), THREAD_PRIORITY_TIME_CRITICAL);
stupid_printf ("SetThreadPriority to THREAD_PRIORITY_TIME_CRITICAL");
a626 1
stupid_printf ("after timeGetTime");
d628 1
a628 3
stupid_printf ("after GetSystemTimeAsFileTime");
      // SetThreadPriority (GetCurrentThread (), priority);
// stupid_printf ("SetThreadPriority(%p, %d)", GetCurrentThread(), priority);
a635 1
stupid_printf ("returning");
a641 1
stupid_printf ("before call to prime(), process priority %d", GetThreadPriority (GetCurrentThread ()));
a643 1
stupid_printf ("after call to prime(), process priority %d", GetThreadPriority (GetCurrentThread ()));
a645 1
stupid_printf ("after call to timeGetTime, process priority %d", GetThreadPriority (GetCurrentThread ()));
a647 1
stupid_printf ("special casing, process priority %d", GetThreadPriority (GetCurrentThread ()));
a653 1
stupid_printf ("res %U, process priority %d", res, GetThreadPriority (GetCurrentThread ()));
@


1.81
log
@* times.cc (hires_ms::prime): Don't escalate the priority.
@
text
@d125 1
a125 1
timezone ()
@


1.80
log
@* cygheap.h (init_cygheap::_gtod): Remove.
* cygwin.din: Export clock_getres and clock_setres.
* hires.h (hires_ms::minperiod): Delete declaration.
(hires_ms::began_period): Ditto.
(hires_ms::prime): Make void.
(hires_ms::resolution): Just define here.
(hires_ms::usecs): Remove unneeded argument.
(gtod): Redeclare as a variable.
* timer.cc (timer_thread): Eliminate argument to gtod.usecs().
(timer_tracker::gettime): Ditto.
(timer_tracker::settime): Ditto.
* times.cc (gettimeofday): Ditto.
(hires_ms::began_period): Delete declaration.
(hires_us::prime): Remove debugging.
(hires_ms::prime): Make void.  Eliminate period stuff.
(hires_ms::usecs): Eliminate argument to gtod.usecs().
(hires_ms::resolution): New function.
(clock_getres): Ditto.
(clock_setres): Ditto.
* version.h: Bump API version to 143.
* include/cygwin/time.h: New file.
@
text
@d624 3
a626 3
      int priority = GetThreadPriority (GetCurrentThread ());
stupid_printf ("priority %d", priority);
      SetThreadPriority (GetCurrentThread (), THREAD_PRIORITY_TIME_CRITICAL);
d632 2
a633 2
      SetThreadPriority (GetCurrentThread (), priority);
stupid_printf ("SetThreadPriority(%p, %d)", GetCurrentThread(), priority);
a634 1
      inited = 1;
d639 1
@


1.79
log
@* times.cc (hires_ms::prime): Comment out call to timeBeginPeriod for now.
(hires_ms::usecs): Call prime if haven't called began_period().
* param.h: Don't define stuff that is already defined in endian.h.
@
text
@d147 1
a147 4
bool NO_COPY hires_ms::began_period;	/* minperiod needs to be NO_COPY since it
					   is a trigger for setting timeBeginPeriod
					   which needs to be set once for every
					   program. */
d154 1
a154 1
  LONGLONG now = gtod.usecs (false);
a565 1
stupid_printf ("before QueryPerformanceFrequency"); // DELETEME
a567 1
stupid_printf ("QueryPerformanceFrequency failed"); // DELETEME
a570 1
stupid_printf ("after QueryPerformanceFrequency"); // DELETEME
a574 1
stupid_printf ("before SetThreadPriority(THREAD_PRIORITY_TIME_CRITICAL)"); // DELETEME
a575 1
stupid_printf ("after SetThreadPriority(THREAD_PRIORITY_TIME_CRITICAL)"); // DELETEME
a577 1
stupid_printf ("QueryPerformanceCounter failed, %E");
a578 1
stupid_printf ("After failing SetThreadPriority");
a581 1
stupid_printf ("after QueryPerformanceCounter"); // DELETEME
a583 1
stupid_printf ("after GetSystemTimeAsFileTime"); // DELETEME
a584 1
stupid_printf ("after SetThreadPriority(%d)", priority); // DELETEME
d618 1
a618 1
UINT
a620 25
  TIMECAPS tc;
  FILETIME f;

stupid_printf ("entering, minperiod %d, began_period %d", minperiod, began_period);
  if (minperiod)
    /* done previously */;
  else if (timeGetDevCaps (&tc, sizeof (tc)) != TIMERR_NOERROR)
{stupid_printf ("timeGetDevCaps failed, %E");
    minperiod = 1;
}
  else
{
    minperiod = min (max (tc.wPeriodMin, 1), tc.wPeriodMax);
stupid_printf ("timeGetDevCaps succeeded.  tc.wPeriodMin %u, tc.wPeriodMax %u, minperiod %u", tc.wPeriodMin, tc.wPeriodMax, minperiod); }
stupid_printf ("inited %d, minperiod %u, began_period %d", minperiod, began_period);

  if (!began_period)
    {
#if 0
      timeBeginPeriod (minperiod);
#endif
      began_period = true;
stupid_printf ("timeBeginPeriod called");
    }

d623 1
d642 1
a642 1
  return minperiod;
d646 1
a646 1
hires_ms::usecs (bool justdelta)
d648 2
a649 2
stupid_printf ("before call to prime(), minperiod %u, process priority %d", minperiod, GetThreadPriority (GetCurrentThread ()));
  if (!inited || !began_period) /* NO_COPY variable */
d677 1
a677 1
  LONGLONG now = gtod.usecs (false);
d685 76
@


1.78
log
@	* times.cc (futimes): Redirect to utimes_worker if given file
	descriptor is opened R/O.
@
text
@d652 1
d654 1
d686 1
a686 1
  if (!minperiod) /* NO_COPY variable */
@


1.77
log
@* cygheap.h (init_cygheap::_gtod): New hires_ms element.
* hires.h (hires_ms::minperiod): Remove static designation.
(hires::began_period): New field.
* signal.cc: Include headers required for cygheap.h now that gtod lives in the
cygheap.
* timer.c: Ditto.
* times.cc (gtod): Delete variable.
(gtod::minperiod): Ditto.
(gtod::began_period): Define.
(hires_ms::prime): Add more debugging output.  Call timeBeginPeriod only when
!began_period.
@
text
@d516 2
d519 1
a519 1
    res = cfd->utimes (tvp);
@


1.76
log
@* times.cc (hires_ms::prime): More debugging.
(hires_ms::usecs): Ditto.
@
text
@d147 1
a147 2
hires_ms gtod;
UINT NO_COPY hires_ms::minperiod;	/* minperiod needs to be NO_COPY since it
d635 1
a635 1
stupid_printf ("entering, minperiod %d", minperiod);
d639 1
d641 1
d643 6
a649 2
      minperiod = min (max (tc.wPeriodMin, 1), tc.wPeriodMax);
stupid_printf ("timeGetDevCaps succeeded.  tc.wPeriodMin %u, tc.wPeriodMax %u, minperiod %u", tc.wPeriodMin, tc.wPeriodMax, minperiod);
d651 2
a653 1
stupid_printf ("inited %d");
@


1.75
log
@* times.cc (stupid_printf): Define and use throughout -- temporarily.
@
text
@d147 5
a151 2
hires_ms NO_COPY gtod;
UINT hires_ms::minperiod;
d637 10
a646 9
  if (!minperiod)
    if (timeGetDevCaps (&tc, sizeof (tc)) != TIMERR_NOERROR)
      minperiod = 1;
    else
      {
stupid_printf ("timeGetDevCaps succeeded");
	minperiod = min (max (tc.wPeriodMin, 1), tc.wPeriodMax);
	timeBeginPeriod (minperiod);
      }
d675 1
d678 2
d681 1
d684 1
d691 1
@


1.74
log
@* times.cc (hires_ms::prime): Add lots of temporary debugging output.
@
text
@d560 1
d565 1
a565 1
debug_printf ("before QueryPerformanceFrequency"); // DELETEME
d568 1
a568 1
debug_printf ("QueryPerformanceFrequency failed"); // DELETEME
d572 1
a572 1
debug_printf ("after QueryPerformanceFrequency"); // DELETEME
d577 1
a577 1
debug_printf ("before SetThreadPriority(THREAD_PRIORITY_TIME_CRITICAL)"); // DELETEME
d579 1
a579 1
debug_printf ("after SetThreadPriority(THREAD_PRIORITY_TIME_CRITICAL)"); // DELETEME
d582 1
a582 1
debug_printf ("QueryPerformanceCounter failed, %E");
d584 1
a584 1
debug_printf ("After failing SetThreadPriority");
d588 1
a588 1
debug_printf ("after QueryPerformanceCounter"); // DELETEME
d591 1
a591 1
debug_printf ("after GetSystemTimeAsFileTime"); // DELETEME
d593 1
a593 1
debug_printf ("after SetThreadPriority(%d)", priority); // DELETEME
d633 1
a633 1
debug_printf ("entering, minperiod %d", minperiod);
d639 1
a639 1
debug_printf ("timeGetDevCaps succeeded");
d643 1
a643 1
debug_printf ("inited %d");
d648 1
a648 1
debug_printf ("priority %d", priority);
d650 1
a650 1
debug_printf ("SetThreadPriority to THREAD_PRIORITY_TIME_CRITICAL");
d652 1
a652 1
debug_printf ("after timeGetTime");
d654 1
a654 1
debug_printf ("after GetSystemTimeAsFileTime");
d656 1
a656 1
debug_printf ("SetThreadPriority(%p, %d)", GetCurrentThread(), priority);
d664 1
a664 1
debug_printf ("returning");
@


1.73
log
@* times.cc (hires_ms::minperiod): Make copy-on-fork.
(gettimeofday): Remove temporary debugging.
(hires_us::prime): Add lots of temporary debugging output.
@
text
@d632 1
d638 1
d642 1
d647 1
d649 1
d651 1
d653 1
d655 1
d663 1
@


1.72
log
@* times.cc (gettimeofday): Add temporary debugging output.
@
text
@d147 2
a148 2
hires_ms gtod;
UINT NO_COPY hires_ms::minperiod;
a154 1
debug_printf ("prior to gtod.usecs"); // DELETEME
d156 1
a156 1
debug_printf ("after to gtod.usecs"); // DELETEME
d564 1
d567 1
d571 1
d575 2
d578 1
d581 1
d583 1
d587 1
d590 1
d592 1
@


1.71
log
@* cygheap.h (cygheap_fdenum): Remove start_fd stuff.
(cygheap_fdenum::rewind): Ditto.
* pipe.cc (fhandler_pipe::open): Lock fdtab while enumerating.
* times.cc (utimes_worker): Ditto.
@
text
@d155 1
d157 1
@


1.70
log
@* cygheap.h (cygheap_fdenum::cygheap_fdenum): Record locked state or suffer
deadlocks.
(class locked_process): Move to another header.
* sync.h (lock_process): Define here.
* cygtls.cc (_cygtls::fixup_after_fork): Reset spinning state as well as
stacklock state.
* dcrt0.cc (lock_process::locker): Define.
(dtable::lock_cs): Delete.
* dtable.cc (dtable_init): Eliminate call to init_lock().
(dtable::fixup_after_fork): Ditto.
(dtable::init_lock): Delete definition.
* dtable.h (dtable::init_lock): Delete declaration.
(dtable::lock): Use process lock rather than dtable-specific lock.
(dtable::unlock): Ditto.
* sigproc.cc (sigproc_init): Minor change to debugging output.
* times.cc (utime_worker): Use build_fh_pc rather than reinterpreting the posix
path name again.  Return any error from path_conv immediately.
@
text
@d457 1
a457 1
      cygheap_fdenum cfd;
@


1.69
log
@	* cygwin.din (futimes): Export.
	(lutimes): Export.
	* times.cc (utimes_worker): Created from utimes, add nofollow flag
	to implement utimes and lutimes.
	(utimes): Just call utimes_worker.
	(lutimes): New function.
	(futimes): Ditto.
	* include/cygwin/version.h: Bump API minor version.
@
text
@d448 1
a448 13
  path_conv win32 (path, nofollow ? PC_SYM_NOFOLLOW : PC_SYM_FOLLOW);
  fhandler_base *fh = NULL;
  bool fromfd = false;

  cygheap_fdenum cfd;
  while (cfd.next () >= 0)
    if (cfd->get_access () & (FILE_WRITE_ATTRIBUTES | GENERIC_WRITE)
	&& strcmp (cfd->get_win32_name (), win32) == 0)
      {
	fh = cfd;
	fromfd = true;
	break;
      }
d450 6
a455 4
  if (!fh)
  {
    if (!(fh = build_fh_name (path, NULL, PC_SYM_FOLLOW)))
      goto error;
d457 21
a477 6
  if (fh->error ())
    {
      debug_printf ("got %d error from build_fh_name", fh->error ());
      set_errno (fh->error ());
    }
  }
d479 1
a479 1
  res = fh->utimes (tvp);
d481 3
a483 2
  if (!fromfd)
    delete fh;
@


1.68
log
@* times.cc (utimes): Only consider fds opened with write access.
@
text
@d444 2
a445 3
/* utimes: POSIX/SUSv3 */
extern "C" int
utimes (const char *path, const struct timeval *tvp)
d448 1
a448 1
  path_conv win32 (path, PC_SYM_FOLLOW);
d484 29
@


1.67
log
@* fhandler_disk_file.cc (fhandler_base::utimes_fs): Use existing handle if
fhandler has one.
* times.cc (utimes): Scan open fds for matching paths and use existing fhandler
if one exists.
@
text
@d455 2
a456 1
    if (strcmp (cfd->get_win32_name (), win32) == 0)
@


1.66
log
@Remove some more unneeded 'return;'s throughout.
@
text
@d25 1
d449 12
a460 1
  fhandler_base *fh;
d462 4
a465 2
  if (!(fh = build_fh_name (path, NULL, PC_SYM_FOLLOW)))
    goto error;
d472 6
a477 2
  else
    res = fh->utimes (tvp);
d479 1
a479 2
  delete fh;
 error:
@


1.65
log
@Replace valid memory checks with new myfault class "exception handling", almost
everywhere.  Leave some thread.cc stuff alone for now.
* cygtls.h: Kludge some definitions to avoid including a problematic windows
header.
(_cygtls::_myfault): New entry.
(_cygtls::_myfault_errno): Ditto.
(_cygtls::fault_guarded): New function.
(_cygtls::setup_fault): Ditto.
(_cygtls::return_from_fault): Ditto.
(_cygtls::clear_fault): Ditto.
(myfault): New class.
* exceptions.cc (handle_exceptions): Handle case of guarded fault in system
routine.
* gendef: Add another entry point for setjmp that the compiler doesn't know
about and won't complain about.
* gentls_offsets: Just include windows.h rather than kludging a HANDLE def.
* miscfuncs.cc (check_null_str): Delete.
(check_null_empty_str): Ditto.
(check_null_empty_str_errno): Ditto.
(check_null_str_errno): Ditto.
(__check_null_invalid_struct): Ditto.
(__check_null_invalid_struct_errno): Ditto.
(__check_invalid_read_ptr): Ditto.
(__check_invalid_read_ptr_errno): Ditto.
(dummytest): New function.
(check_iovec_for_read): Delete.
(chec_iovec): Rename from check_iovec_for_write.  Take a read/write parameter.
* tlsoffsets.h: Regenerate.
* winsup.h: Remove check_* declarations.
(check_iovec_for_read): Delete declaration.  Turn into a define instead.
(check_iovec_for_write): Ditto.
(check_iovec): New declaration.
* thread.h: Use ifdef guard name consistent with other header files.
@
text
@a535 1
  return;
@


1.64
log
@* times.cc (time_ms::usecs): Coerce comparison to signed or whole test is a
no-op.
@
text
@d56 2
a57 1
  if (check_null_invalid_struct_errno (buf))
@


1.63
log
@* times.cc (hires_ms::usecs): Compare the difference.
* hires.h: Add parentheses to HIRES_DELAY_MAX.
@
text
@d600 1
a600 1
  if ((now - initime_ms) < 0)
@


1.62
log
@	* fhandler_disk_file.cc (fhandler_disk_file::touch_ctime): Replace
	GetSystemTime/SystemTimeToFileTime with GetSystemTimeAsFileTime.
	* times.cc (time_as_timestruc_t): Ditto.
	(time): Ditto.
@
text
@d600 1
a600 1
  if (now < initime_ms)
@


1.61
log
@	* fhandler.h (enum query_state): Add query_write_attributes state.
	(fhandler_base::status.query_open): Add a bit to make room for more
	states.
	(class fhandler_base): Declare new method utimes.
	(class fhandler_socket): Ditto.
	(class fhandler_disk_file): Ditto.
	(fhandler_disk_file::fhandler_disk_file): Add constructor with
	path_conv parameter.
	* fhandler.cc (fhandler_base::open): Add query_write_attributes
	handling.
	(fhandler_base::utimes): New method.
	* fhandler_disk_file.cc (fhandler_disk_file::link): Simplify.
	Open file with query_write_attributes instead of query_write_control.
	(fhandler_disk_file::utimes): New method.
	(fhandler_disk_file::fhandler_disk_file): Add constructor with
	path_conv parameter setting pc member immediately.
	* fhandler_socket.cc (fhandler_socket::fchmod): Use new
	fhandler_disk_file constructor.
	(fhandler_socket::fchown): Ditto.
	(fhandler_socket::facl): Ditto.
	(fhandler_socket::link): Ditto.
	(fhandler_socket::utimes): New method.
	* times.cc: Include dtable.h.
	(timeval_to_filetime): Make non-static.
	(utimes): Move functionality into fhandler method utimes. Just call
	this method from here.
	* winsup.h: Simplify declarations of time helper functions.
	(timeval_to_filetime): Add extern declaration.
@
text
@a257 1
  SYSTEMTIME systemtime;
d260 1
a260 2
  GetSystemTime (&systemtime);
  SystemTimeToFileTime (&systemtime, &filetime);
a269 1
  SYSTEMTIME systemtime;
d272 1
a272 2
  GetSystemTime (&systemtime);
  SystemTimeToFileTime (&systemtime, &filetime);
@


1.60
log
@copyright
@
text
@d24 1
a33 2
static void __stdcall timeval_to_filetime (const struct timeval *time, FILETIME *out);

d186 1
a186 1
static void __stdcall
d446 1
a446 1
/* utimes: standards? */
d450 2
a451 10
  int res = 0;
  struct timeval tmp[2];
  path_conv win32 (path);

  if (win32.error)
    {
      set_errno (win32.error);
      syscall_printf ("-1 = utimes (%s, %x)", path, tvp);
      return -1;
    }
d453 2
a454 18
  /* MSDN suggests using FILE_FLAG_BACKUP_SEMANTICS for accessing
     the times of directories.  */
  /* Note: It's documented in MSDN that FILE_WRITE_ATTRIBUTES is
     sufficient to change the timestamps.  Unfortunately it's not
     sufficient for a remote HPFS which requires GENERIC_WRITE.
     Since we don't trust the weird FS name "??SS", we just try to
     open with GENERIC_WRITE if opening with FILE_WRITE_ATTRIBUTES
     failed.  That should do it, though this fails for R/O files
     of course. */
  HANDLE h = CreateFile (win32, FILE_WRITE_ATTRIBUTES,
			 FILE_SHARE_READ | FILE_SHARE_WRITE,
			 &sec_none_nih, OPEN_EXISTING,
			 FILE_ATTRIBUTE_NORMAL | FILE_FLAG_BACKUP_SEMANTICS,
			 0);
  if (h == INVALID_HANDLE_VALUE)
    h = CreateFile (win32, GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE,
		    &sec_none_nih, OPEN_EXISTING,
		    FILE_ATTRIBUTE_NORMAL | FILE_FLAG_BACKUP_SEMANTICS, 0);
d456 1
a456 1
  if (h == INVALID_HANDLE_VALUE)
d458 2
a459 10
      if (win32.isdir ())
	{
	  /* What we can do with directories more? */
	  res = 0;
	}
      else
	{
	  res = -1;
	  __seterrno ();
	}
d462 1
a462 34
    {
      gettimeofday (&tmp[0], 0);
      if (tvp == 0)
	{
	  tmp[1] = tmp[0];
	  tvp = tmp;
	}

      FILETIME lastaccess;
      FILETIME lastwrite;
      FILETIME lastchange;

      timeval_to_filetime (tvp + 0, &lastaccess);
      timeval_to_filetime (tvp + 1, &lastwrite);
      /* Update st_ctime */
      timeval_to_filetime (tmp + 0, &lastchange);

      debug_printf ("incoming lastaccess %08x %08x",
		   tvp->tv_sec,
		   tvp->tv_usec);

      /* FIXME: SetFileTime needs a handle with a write lock
	 on the file whose time is being modified.  So calls to utime()
	 fail for read only files.  */

      if (!SetFileTime (h, &lastchange, &lastaccess, &lastwrite))
	{
	  __seterrno ();
	  res = -1;
	}
      else
	res = 0;
      CloseHandle (h);
    }
d464 3
a466 2
  syscall_printf ("%d = utimes (%s, %x); (h%d)",
		  res, path, tvp, h);
@


1.59
log
@	* times.cc (utimes): Open files with FILE_WRITE_ATTRIBUTES first,
	if that fails, try opeing with GENERIC_WRITE.  Fix comments.
@
text
@d466 1
a466 1
     sufficient for a remote HPFS which requires GENERIC_WRITE. 
@


1.58
log
@	* times.cc (utimes): Open files with GENERIC_WRITE on file systems
	not supporting ACLs.
@
text
@d464 8
a471 10
  /* Note: It's not documented in MSDN that FILE_WRITE_ATTRIBUTES is
     sufficient to change the timestamps, but it is for NTFS and FAT,
     local or remote, NT and 9x.  Unfortunately it's not sufficient
     for a remote HPFS.  Looking for a way to decide whether we
     should use FILE_WRITE_ATTRIBUTES or GENERIC_WRITE, we're now
     using the has_acls () attribute.  The assumption is, that file
     systems not supporting ACLs don't have a way to distinguish
     between GENERIC_WRITE and FILE_WRITE_ATTRIBUTES anyway. */
  HANDLE h = CreateFile (win32, win32.has_acls () ? FILE_WRITE_ATTRIBUTES
  						  : GENERIC_WRITE,
d476 4
d509 1
a509 1
      /* Mark st_ctime for update */
a515 3
//      dump_filetime (lastaccess);
//      dump_filetime (lastwrite);

@


1.57
log
@	* times.cc (timeval_to_filetime): Define first parameter const.
	(utimes): Define second parameter to const according to SUSv3.
	(utime): Ditto.
	* include/sys/utime.h (utime) : Change declaration accordingly.
@
text
@d465 9
a473 2
     sufficient to change the timestamps... */
  HANDLE h = CreateFile (win32, FILE_WRITE_ATTRIBUTES,
@


1.56
log
@	* times.cc (utimes): Mark st_ctime for update according to SUSv3.
@
text
@d33 1
a33 1
static void __stdcall timeval_to_filetime (timeval *time, FILETIME *out);
d188 1
a188 1
timeval_to_filetime (timeval *time_in, FILETIME *out)
d449 1
a449 1
utimes (const char *path, struct timeval *tvp)
d531 1
a531 1
utime (const char *path, struct utimbuf *buf)
@


1.55
log
@* child_info.h (child_info_spawn::hexec_proc): Eliminate.
* dcrt0.cc (dll_crt0_0): Remove hexec_proc stuff.
* fork.cc (fork_child): Remove call to pinfo_fixup_after_fork.
* pinfo.cc (set_myself): Close and zero pid_handle if set.
(pinfo_fixup_after_fork): Delete.
(proc_waiter): Don't close vchild.hProcess here.  Do that when we are remove
the vchild from procs.  Save hProcess as pid_handle only on first reparent
operation.
(pinfo::wait): Don't set pid_handle here.
(pinfo::alert_parent): Always try to send signal.  If unsuccessful then close
and zero wr_proc_pipe.
* pinfo.h (pinfo::pinfo): Make sure that appropriate parts of the class are
zeroed on construction.
(pinfo::alert_parent): Take char argument.
(pinfo_fixup_after_fork): Delete declaration.
(hexec_proc): Ditto.
* sigproc.cc (remove_proc): Close pid_handle and hProcess if appropriate.
* spawn.cc (spawn_guts): Set cygheap->pid_handle on first exec.
* cygheap.h (init_cygheap::pid_handle): New element.
* pinfo.cc (set_myself): Clear previously existing cygheap->pid_handle when a
new process has been started.
(pinfo::wait): Make sure that a handle to the newly forked/spawned process is
kept around so that the pid will not be reused.
* pinfo.h (_pinfo::pid_handle): Move.
(pinfo::pid_handle): to here.
* spawn.cc (spawn_guts): Create a pid_handle in cygheap prior to spawning to
ensure that the pid does not get reused during the lifetime of the "cygwin
pid".
* pinfo.h (pinfo::alert_parent): New function.
* exceptions.cc (sig_handle_tty_stop): Use alert_parent to send "signals" to
parent.
* fork.cc (fork_parent): Don't close pi.hProcess.  Let the waiter thread do
that.
* pinfo.cc (proc_waiter): Detect case where process exits without setting the
exit code and use value from GetExitCodeProcess.  Reluctantly implement
__SIGREPARENT.
(pinfo::alert_parent): Define.
* sigproc.h (__SIGREPARENT): New enum.
* spawn.cc (spawn_guts): Send reparent signal to parent on exec.  Always create
process in suspended state to avoid races.  Remove cygthread.h in favor of
cygtls.h throughout since cygtls now includes cygthread.h.  Eliminate
ppid_handle usage throughout.
* child_info.h: Regenerate magic number
(child_info): Remove pppid_handle.
* cygthread.h (cygthread::release): New method.  Frees thread without waiting.
* cygthread.cc (cygthread::stub): Set _ctinfo in _mytls to point to information
for executing thread.  Don't call SetEvent if thread is no longer in use.
(cygthread::simplestub): Ditto.
* cygtls.h (_cygtls::_ctinfo): New element contains pointer to information
about executing cygthread, if any.
* dcrt0.cc: Remove last vestiges of per_thread stuff.
(dll_crt0_0): Ditto.  Remove accommodation for ppid_handle.
(do_exit): Remove obsolete reparenting test.
(_exit): Exit with a more SUSv3-like exit value.
* dtable.cc (dtable::stdio_init): Check for myself->cygstarted rather than
myself->ppid_handle to see if we were started by a cygwin process.
* exceptions.cc (open_stackdumpfile): Ditto.
(handle_exceptions): Ditto.
(ctrl_c_handler): Ditto.
(sig_handle_tty_stop): Ditto.  Let parent send signal to itself on STOP.
(sigpacket::process): Comment out vfork test.
(signal_exit): Use more SUSv3-like exit value on signal.
* external.cc (fillout_pinfo): Don't set hProcess.
* fork.cc: Remove VFORK cruft.
(per_thread::set): Delete.
(fork_child): Remove perthread stuff.
(fork_parent): Remove obsolete subproc_init.  Accommodate new method for
tracking subprocesses.
* pinfo.cc (set_myself): Accommodate new pinfo/_pinfo layout.  Set some things
here that used to be set in wait_sig.
(_pinfo::exit): Set exitcode here.  Close process pipe.
(_pinfo::commune_send): Accommodeate new pinfo/_pinfo layout.
(proc_waiter): New function.  Waits, in a thread for subprocess to go away.
(pinfo::wait): New function.  Initialization for proc_waiter.
* pinfo.h (_pinfo::exitcode): New element.
(_pinfo::cygstarted): Ditto.
(_pinfo::wr_proc_pipe): Ditto.
(_pinfo::ppid_handle): Delete.
(_pinfo::hProcess): Delete.
(_pinfo::lock): Delete.
(pinfo::hProcess): New element.
(pinfo::lock): Ditto.
(pinfo::wait): Declare new function.
(pinfo::preserve): Define new function.
* sigproc.cc: Remove old stuff from wait_subproc thread based method.
(zombies): Remove.
(procs): New.
(my_parent_is_alive): Just check that the parent pid exists.
(mychild): Just use pinfo methods to determine if child is mine.
(proc_subproc): Revamp PROC_ADDCHILD to use pinfo::wait.  Remove
PROC_CHILDTERMINATED logic.  Use different method to remove processes from list
when SIGCHLD == SIG_IGN.
(proc_terminate): Gut.
(subproc_init): Delete.
(init_child_info): Remove setting of pppid_handle.
(checkstate): Revamp to only scan procs array.
(remove_proc): Rename from remove_zombie.  Don't close hProcess or pid_handle.
Don't release memory if it's myself.
(stopped_or_terminated): Change logic to handle new consolidated proc/zombie
array.
(wait_subproc): Delete.
* sigproc.h: Remove obsolete EXIT_* defines.
(subproc_init): Remove declaration.
* spawn.cc (spawn_guts): Remove reparenting stuff.  Use standard wait logic to
wait for child if started from a non-cygwin process.
* tlsoffsets.h: Regenerate.
* tty.cc (tty_init): Check for myself->cygstarted rather than
myself->ppid_handle to see if we were started by a cygwin process.
* include/sys/signal.h (external_pinfo::exitcode): Replace hProcess.
* include/sys/wait.h (WCOREDUMP): Define.
* fhandler_tty.cc (fhandler_tty_slave::read): Add debugging output for timeout
case.
* signal.cc (abort): Flag that we are exiting with the ABORT signal.
@
text
@d3 2
a4 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Red Hat, Inc.
d487 1
a489 1
	  gettimeofday (&tmp[0], 0);
d496 1
d500 2
d514 1
a514 1
      if (!SetFileTime (h, 0, &lastaccess, &lastwrite))
@


1.54
log
@	* Makefile.in: Create libutil.a from bsdlib.o exports.
	* bsdlib.cc (logwtmp): Move from syscalls.cc to here.
	(login): Ditto.
	(logout): Ditto.

	* winsup.h (EXPORT_ALIAS): New macro.
	* exec.cc: Define alias symbols using EXPORT_ALIAS macro.
	* syscalls.cc: Ditto.
	* times.cc: Ditto.
@
text
@a25 1
#include "cygthread.h"
@


1.54.2.1
log
@Use cygthread.  Add release mechanism to cygthread so that it can be
used by threads which detach themselves.
@
text
@d26 1
@


1.53
log
@	* times.cc (hires_ms::usecs): Don't overreact.
@
text
@d93 1
a93 1
extern "C" clock_t _times (struct tms *) __attribute__((alias ("times")));
d175 1
a175 2
extern "C" int _gettimeofday (struct timeval *, struct timezone *)
  __attribute__((alias ("gettimeofday")));
@


1.52
log
@	* times.cc (hires_ms::usecs): Reinit timer when system time overflows.
@
text
@d661 1
a661 1
  if (now <= initime_ms)
@


1.51
log
@* cygwin/include/signal.h: Add copyright notice.
* cygwin.din: Make clock SIGFE.  Add clock_gettime, sigwaitinfo, timer_create,
timer_delete, timer_settime.
* include/cygwin/version.h: Reflect above additions.
* fork.cc (fork_child): Call fixup_timers_after_fork.
* signal.cc (sigwait): Remove unused variable.
* timer.cc: New file.
(clock_gettime): Define new function.
(timer_tracker): Define new struct used by timer functions.
(timer_tracker::timer_tracker): New function.
(to_us): New function.
(timer_thread): New function.
(timer_tracker::settime): New function.
(timer_create): New function.
(timer_settime): New function.
(timer_delete): New function.
(fixup_timers_after_fork): New function.
* cygthread.cc: Bump thread count.
* signal.cc (sigwaitinfo): Define new function.
(sigwait): Redefine based on sigwaitinfo.
* include/cygwin/signal.h (sigwaitinfo): Declare.
(sigwait): Ditto.
* dtable.cc (dtable::vfork_parent_restore): Avoid double close of ctty when
ctty == ctty_on_hold.
* cygtls.h (_threadinfo::threadkill): New element.
(_threadinfo::set_threadkill): Declare new function.
(_threadinfo::reset_threadkill): Declare new function.
* dcrt0.cc (dcrt0_1): Call here so that it will be possible to attach to
running process with #(*& Windows Me/9x.
(initial_env): Try to initialize strace if uninitialized.
* gendef: Don't zero signal if threadkill is set since that will happen in the
called function.
* signal.cc (sigwait): Ensure cleanup in error conditions.
* sigproc.cc (sig_send): Clear packet mask storage.
(wait_subproc): Fill in child exit code in siginfo_t structure.
* thread.cc (pthread_kill): Set threadkill flag.
* tlsoffsets.h: Regenerate.  Throughout, use siginfo_t to fill out all signal
information for "kernel" signals.
* cygtls.h (_threadinfo::set_siginfo): Declare new function.
* cygtls.cc (_threadinfo::set_siginfo): Define new function.
* dcrt0.cc (do_exit): Accommodate siginfo_t considerations.
* exceptions.cc (handle_exceptions): Ditto.
(sig_handle_tty_stop): Ditto.
(ctrl_c_handler): Use killsys() to send signal.
(sigpacket::process): Rename from sig_handle.  Use siginfo_t field from
sigpacket for everything.
(tty_min::kill_pgrp): Accommodate siginfo_t considerations.
(fhandler_termios::bg_check): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::ioctl): Use killsys() to send signal.
* signal.cc (kill_worker): Rewrite to use siginfo_t second argument.
(kill_pgrp): Ditto.
(kill0): Define new function pulled from kill().
(kill): Rewrite as frontend to kill0.
(killsys): Define new function.
* sigproc.cc (sigelem): Eliminate.
(sigpacket): Move to sigproc.h.  Subsume sigelem.
(pending_signals): Use sigpacket rather than sigelem for everything.
(sig_clear): Ditto.
(wait_sig): Ditto.
(sig_send): Rewrite to use siginfo_t argument.
(sig_send): New function wratpper to sig_send with siginfo_t argument.
(wait_subproc): Accommodate siginfo_t considerations.
* thread.cc (pthread_kill): Ditto.
* sigproc.h (sigpacket): Move here.
(sigpacket::process): Declare "new" function.
(sig_handle): Eliminate declaration.
(sig_send): Declare with new paramaters.
(killsys): Declare new function.
(kill_pgrp): Declare.
* winsup.h: Move some signal-specific stuff to sigproc.h.
* include/cygwin/signal.h: Tweak some siginfo_t stuff.
@
text
@d661 6
@


1.50
log
@* exceptions.cc (set_signal_mask): Redefine to not pass by address.  Report
calculated mask in debugging output.
* sigproc.h (set_signal_mask): Reflect above change in declaration.
* path.cc (mount_item::build_win32): Take path apart before feeding it to
fnmunge.  Throughout, change use of _reent_winsup()-> to _my_tls.locals.
instead.  Throughout, remove obsolete MT_SAFE/_CYG_THREAD_FAILSAFE
considerations.  Througout, add cygtls.h include.
* Makefile.in (DLL_OFILES): Add cygtls.o.  Add some more objects to the
-fomit-frame-pointer list.
* acconfig.h: Remove obsolete settings.
* config.h.in: Ditto.
* bsdlib.cc: Add cygtls.h include.
* configure.in: Remove --enable-extra-threadsafe-checking.
* configure: Regenerate.
* cygtls.h (_local_storage): New struct renamed from _winsup_t (sic).
(_threadinfo:local_clib): Add new field.
(_threadinfo::locals): Ditto.
(_threadinfo::init_thread): Accept second _reent * argument.
(_threadinfo::call): Define as regparm.
(CYGTLS_PADSIZE): Remove unnecessary slop.
(_getreent): Define as a macro.
* thread.h: Remove _CYG_THREAD_FAILSAFE and MT_SAFE stuff.
(_winsup_t): Move to cygtls.h.
(ResourceLocks::ResourceLocks): Eliminate empty constructor.
(MTinterface::reents): Eliminate.
(MTinterface::thread_self_key): Eliminate.
(MTinterface::MTinterface): Eliminate.
* dcrt0.cc: Include stdio.h for _impure_ptr initialization.
(do_global_ctors): Remove run_ctors_p (sic) considerations.  Don't call atexit
here.
(__main): Initialize destructors for user here.
(dll_crt0_1): Accept a dummy argument.  Don't call init_thread here.  Don't set
_impure_ptr here.  Call do_global_ctors after more things have been
initialized.
(_dll_crt0): Define zeros buffer as max of needed size of CYGTLS_PADSIZE so
that it can be used for two purposes while minimizing stack usage.  Initialize
_impure_ptr specifically, for speed.  Call dll_crt0_1 with buffer argument.
(cygwin_dll_init): Call dll_crt0_1 with dummy argument.
* dtable.cc (dtable::find_unused_handle): Remove call to AssertResourceOwner.
* exceptions.cc: Move _threadinfo stuff to new file.
* cygtls.cc: New file.
* gentls_offsets: Accommodate increasing complexity of cygtls.h.
* hires.h (hires_base::~hires_base): Remove.
* init.cc (dll_entry): Remove setting of reents.
* thread.cc: Remove syslog.h include.
(__getreent): Simplify to use _my_tls.
(_reent_winsup): Delete.
(AssertResourceOwner): Delete.
(MTinterface::Init): Remove setting of _clib and _winsup, with all that
entails.
(MTinterface::fixup_after_fork): Ditto.
(pthread::thread_init_wrapper): Ditto.  Also remove call to
set_tls_self_pointer.
(pthread::set_tls_self_pointer): Eliminate.
(pthread::get_tls_self_pointer): Just return _my_tls.tid;
(__reent_t::init_clib): Eliminate.
* tlsoffsets.h: Regenerate.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Red Hat, Inc.
d18 1
d26 3
d619 2
a620 1
  return justdelta ? now.QuadPart : primed_ft.QuadPart + now.QuadPart;
d664 18
@


1.50.2.1
log
@* cygwin/include/signal.h: Add copyright notice.
* cygwin.din: Make clock SIGFE.  Add clock_gettime, sigwaitinfo, timer_create,
timer_delete, timer_settime.
* include/cygwin/version.h: Reflect above additions.
* fork.cc (fork_child): Call fixup_timers_after_fork.
* signal.cc (sigwait): Remove unused variable.
* timer.cc: New file.
(clock_gettime): Define new function.
(timer_tracker): Define new struct used by timer functions.
(timer_tracker::timer_tracker): New function.
(to_us): New function.
(timer_thread): New function.
(timer_tracker::settime): New function.
(timer_create): New function.
(timer_settime): New function.
(timer_delete): New function.
(fixup_timers_after_fork): New function.
* cygthread.cc: Bump thread count.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Red Hat, Inc.
a17 1
#include <pthread.h>
a24 3
#include "cygthread.h"
#include "sigproc.h"
#include "sync.h"
d615 1
a615 2
  LONGLONG res = justdelta ? now.QuadPart : primed_ft.QuadPart + now.QuadPart;
  return res;
a658 18
}

extern "C" int
clock_gettime (clockid_t clk_id, struct timespec *tp)
{
  if (clk_id != CLOCK_REALTIME)
    {
      set_errno (ENOSYS);
      return -1;
    }

  LONGLONG now = gtod.usecs (false);
  if (now == (LONGLONG) -1)
    return -1;

  tp->tv_sec = now / 1000000;
  tp->tv_nsec = (now % 1000000) * 1000;
  return 0;
@


1.49
log
@* devices.cc: New file.
* devices.gperf: New file.
* devices.shilka: New file.
* cygwin-gperf: New file.
* cygwin-shilka: New file.
* fhandler_fifo.cc: New file.
* fhandler_nodevice.cc : New file.  Reorganize headers so that path.h precedes
fhandler.h throughout.  Remove device argument and unit arguments from fhandler
constructors throughout.  Remove pc arguments to fhandler functions and use
internal pc element instead, throughout.  Use dev element in pc throughout.
Use major/minor elements rather than units and device numbers previously in
fhandler class.  Use correct methods for fhandler file names rather than
directly accessing file name variables, throughout.
* Makefile.in (DLL_OFILES): Add devices.o, fhandler_fifo.o
* dcrt0.cc (dll_crt0_1): Call device::init.
* devices.h: Renumber devices based on more Linux-like major/minor numbers.
Add more devices.  Declare standard device storage.
(device): Declare struct.
* dir.cc (opendir): Use new 'build_fh_name' to construct a fhandler_* type.
* dtable.cc (dtable::get_debugger_info): Ditto.
(cygwin_attach_handle_to_fd): Ditto.
(dtable::release): Remove special FH_SOCKET case in favor of generic
"need_fixup_before" test.
(dtable::init_std_file_from_handle): Use either build_fh_dev or build_fh_name
to build standard fhandler.
(dtable::build_fh_name): Renamed from dtable::build_fhandler_from_name.  Move
out of dtable class.  Don't accept a path_conv argument.  Just build it here
and pass it to:
(build_fh_pc): Renamed from dtable::build_fhandler.  Move out of dtable class.
Use intrinsic device type in path_conv to create new fhandler.
(build_fh_dev): Renamed from dtable::build_fhandler.  Move out of dtable class.
Simplify arguments to just take new 'device' type and a name.  Just return
pointer to fhandler rather than trying to insert into dtable.
(dtable::dup_worker): Accommodate above build_fh name changes.
(dtable::find_fifo): New (currently broken) function.
(handle_to_fn): Use strechr for efficiency.
* dtable.h: Reflect above build_fh name changes and argument differences.
(fhandler_base *&operator []): Return self rather than copy of self.
* fhandler.cc (fhandler_base::operator =): Use pc element to set normalized
path.
(fhandler_base::set_name): Ditto.
(fhandler_base::raw_read): Use method to access name.
(fhandler_base::write): Correctly use get_output_handle rather than get_handle.
(handler_base::device_access_denied): New function.
(fhandler_base::open): Eliminate pc argument and use pc element of
fhandler_base throughout.
(fhandler_base::fstat): Detect if device is based in filesystem and use
fstat_fs to calculate stat, if so.
(fhandler_base::fhandler_base): Eliminate handling of file names and, instead,
just free appropriate component from pc.
(fhandler_base::opendir): Remove path_conv parameter.
* fhandler.h: Remove all device flags.
(fhandler_base::pc): New element.
(fhandler_base::set_name): Change argument to path_conv.
(fhandler_base::error): New function.
(fhandler_base::exists): New function.
(fhandler_base::pc_binmode): New function.
(fhandler_base::dev): New function.
(fhandler_base::open_fs): New function.
(fhandler_base::fstat_fs): New function.
(fhandler_base::fstat_by_name): New function.
(fhandler_base::fstat_by_handle): New function.
(fhandler_base::isfifo): New function.
(fhandler_base::is_slow): New function.
(fhandler_base::is_auto_device): New function.
(fhandler_base::is_fs_special): New function.
(fhandler_base::device_access_denied): New function.
(fhandler_base::operator DWORD&): New operator.
(fhandler_base::get_name): Return normalized path from pc.
(fhandler_base::get_win32_name): Return windows path from pc.
(fhandler_base::isdevice): Renamed from is_device.
(fhandler_base::get_native_name): Return device format.
(fhandler_fifo): New class.
(fhandler_nodevice): New class.
(select_stuff::device_specific): Remove array.
(select_stuff::device_specific_pipe): New class element.
(select_stuff::device_specific_socket): New class element.
(select_stuff::device_specific_serial): New class element.
(select_stuff::select_stuff): Initialize new elements.
* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Move to base class
from fhandler_disk_file.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_disk_file::open): Move most functionality into
fhandler_base::open_fs.
(fhandler_base::open_fs): New function.
(fhandler_disk_file::close): Move most functionality into
fhandler_base::close_fs.
(fhandler_base::close_fs): New function.
* fhandler_mem.cc (fhandler_dev_mem::open): Use device name in debugging
output.
* fhandler_socket.cc (fhandler_socket::set_connect_secret): Copy standard
urandom device into appropriate place.
(fhandler_socket::accept): Reflect change in fdsock return value.
* fhandler_tty.cc: See "throughouts" above.
* net.cc: Accommodate fdsock change throughout.
(fdsock): Return success or failure, accept fd argument and device argument.
* path.cc (symlink_info::major): New element.
(symlink_info::minor): New element.
(symlink_info::parse_device): Declare new function.
(fs_info::update): Accommodate changes in path_conv class.
(path_conv::fillin): Ditto.
(path_conv::return_and_clear_normalized_path): Eliminate.
(path_conv::set_normalized_path): New function.
(path_conv::path_conv): Set info in dev element.  Use path_conv methods Check
for FH_FS rather than FH_BAD to indicate when to fill in filesystem stuff.
where appropriate rather than direct access.  Use set_normalized_path to set
normalized path.
(windows_device_names): Eliminate.
(get_dev): Ditto.
(get_raw_device_number): Ditto.
(get_device_number): Ditto.
(win32_device_name): Call new device name parser to do most of the heavy
lifting.
(mount_info::conv_to_win32_path): Fill in dev field as appropriate.
(symlink_worker): Handle new device files.
(symlink_info::check): Ditto.
(symlink_info::parse_device): Define new function.
* path.h (executable_states): Move here from fhandler.h.
(fs_info): Rename variables to *_storage and create methods for accessing same.
(path_conv): Add dev element, remove devn and unit and adjust inline methods to
accommodate.
(set_normalized_path): Declare new function.
* pinfo.cc (_pinfo::commune_recv): Add broken support for handling fifos.
(_pinfo::commune_send): Ditto.
* pipe.cc (fhandler_pipe::close): check for existence of handle before closing
it.
(handler_pipe::create): Rename from make_pipe.  Change arguments to accept
fhandler_pipe array.  Accommodate fifos.
(pipe): Rework to deal with fhandler_pipe::create changes.
(_pipe): Ditto.
* select.cc: Use individual device_specific types throughout rather than
indexing with obsolete device number.
(set_bits): Use is_socket call rather than checking device number.
* shared_info.h (CURR_MOUNT_MAGIC): Update.
(conv_to_win32_path): Reflect addition of device argument.
* syscalls.cc (mknod_worker): New function.
(open): Use build_fh_name to build fhandler.
(chown_worker): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(chmod_device): New function.
(chmod): Detect if this is an 'auto' device rather than an on-filesystem device
and handle appropriately.  Use chmod_device to set mode of in-filesystem
devices.
(stat_worker): Eliminate path_conv argument.  Call build_fh_name to construct
fhandler.  Use fh->error() rather than pc->error to detect errors in fhandler
construction.
(access_worker): New function pulled from access.  Accommodate in-filesystem
devices.
(access): Use access_worker.
(fpathconf): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(mknod_worker): New function.
(mknod32): New function.
(chroot): Free normalized path -- assuming it was actually cmalloced.
* tty.cc (create_tty_master): Tweak for new device class.
(tty::common_init): Ditto.
* winsup.h (stat_worker): Remove.
(symlink_worker): Declare.
* exceptions.cc (set_process_mask): Just call sig_dispatch_pending and don't
worry about pending_signals since sig_dispatch_pending should always do the
right thing now.
(sig_handle): Reorganize SIGCONT handling to more closely conform to SUSv3.
* pinfo.h: Move __SIG enum to sigproc.h.
(PICOM_FIFO): New enum element.
(_pinfo): Remove 'thread2signal' stuff throughout class.
(_pinfo::commune_send): Make varargs.
(_pinfo::sigtodo): Eliminate.
(_pinfo::thread2signal): Ditto.
* signal.cc (kill_worker): Eliminate call to setthread2signal.
* sigproc.cc (local_sigtodo): Eliminate.
(getlocal_sigtodo): Ditto.
(sigelem): New class.
(pending_signals): New class.
(sigqueue): New variable, start of sigqueue linked list.
(sigcatch_nonmain): Eliminate.
(sigcatch_main): Eliminate.
(sigcatch_nosync): Eliminate.
(sigcomplete_nonmain): Eliminate.
(pending_signals): Eliminate.
(sig_clear): Call signal thread to clear pending signals, unless already in
signal thread.
(sigpending): Call signal thread to get pending signals.
(sig_dispatch_pending): Eliminate use of pending_signals and just check
sigqueue.
(sigproc_terminate): Eliminate all of the obsolete semaphore stuff.  Close
signal pipe handle.
(sig_send): Eliminate all of the obsolete semaphore stuff and use pipe to send
signals.
(getevent): Eliminate.
(pending_signals::add): New function.
(pending_signals::del): New function.
(pending_signals::next): New function.
(wait_sig): Eliminate all of the obsolete semaphore stuff.  Use pipe to
communicate and maintain a linked list of signals.
* sigproc.h: Move __SIG defines here.  Add __SIGPENDING.
(sig_dispatch_pending): Remove "C" specifier.
(sig_handle): Accept a mask argument.
* thread.cc: Remove signal handling considerations throughout.
@
text
@d24 1
d122 1
a122 5
#ifdef _MT_SAFE
  char *b=_reent_winsup ()->timezone_buf;
#else
  static NO_COPY char b[20] = {0};
#endif
d332 1
a332 5
#ifdef _MT_SAFE
  struct tm &localtime_buf=_reent_winsup ()->_localtime_buf;
#else
  static NO_COPY struct tm localtime_buf = {0};
#endif
@


1.48
log
@* signal.cc (nanosleep): Improve test for valid values.  Round delay up to
resolution.  Fix test for negative remainder.  Use timeGetTime through gtod.
(sleep): Round up return value.  Christopher Faylor <cgf@@redhat.com>
* hires.h (HIRES_DELAY_MAX): Define.
(hires_ms::minperiod): Declare static.
(hires_ms::resolution): New.
(hires_ms::dmsecs): New.
(hires_ms::prime): Return UINT.
(gtod): Declare.
* times.cc (hires_ms::prime): Always calculate minperiod and set it to 1 in
case of failure.  Return minperiod.
(hires_ms::resolution): Define.
(hires_ms::~hires_ms): Delete.
(hires_ms::usecs): Check minperiod to prime.
(gtod) Define as global.
@
text
@d20 1
a21 1
#include "path.h"
@


1.47
log
@* hires.h (hires_ms::~hires_ms): Delete declaration.
* times.cc (hires_ms::~hires_ms): Delete definition..
@
text
@d145 3
a151 1
  static hires_ms gtod;
d625 1
a625 1
void
a629 2
  int priority = GetThreadPriority (GetCurrentThread ());
  SetThreadPriority (GetCurrentThread (), THREAD_PRIORITY_TIME_CRITICAL);
d631 10
a640 3
  if (timeGetDevCaps (&tc, sizeof (tc)) != TIMERR_NOERROR)
    minperiod = 0;
  else
d642 11
a652 2
      minperiod = min (max (tc.wPeriodMin, 1), tc.wPeriodMax);
      timeBeginPeriod (minperiod);
d654 1
a654 10

  initime_ms = timeGetTime ();
  GetSystemTimeAsFileTime (&f);
  SetThreadPriority (GetCurrentThread (), priority);

  inited = 1;
  initime_us.HighPart = f.dwHighDateTime;
  initime_us.LowPart = f.dwLowDateTime;
  initime_us.QuadPart -= FACTOR;
  initime_us.QuadPart /= 10;
d660 1
a660 1
  if (!inited)
@


1.46
log
@update copyright
@
text
@a659 5

hires_ms::~hires_ms ()
{
  timeEndPeriod (minperiod);
}
@


1.45
log
@Throughout, remove "include <errno.h>" from files which already include
cygerrno.h.
* include/cygwin/config.h (__DYNAMIC_REENT__): Define.
* include/cygwin/version.h: Bump API minor version.
* cygwin.din: Export __getreent
* cygerrno.h: Include errno.h.  Fix places where _impure_ptr is used directly
to store the errno value.
* debug.cc (__set_errno): Ditto.
* errno.cc: Remove _RRENT_ONLY define to get errno.cc compiled.
* signal.cc: Rename _reent_clib to _REENT throughout.
* thread.h (reent_clib): Remove prototype.
* thread.cc (reent_clib): Rename reent_clib to __getreent.  Return _impure_ptr
until MTinterface is initialized.
(reent_winsup): Fix a possible SEGV when _r == NULL.  Return NULL instead.
* MTinterface::fixup_after_fork: Switch reent back to _impure_ptr to keep
signal handling running when fork is called from a thread other than the
mainthread.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
@


1.44
log
@Change _function() to function() throughout.
* cygwin.din: Remove last vestiges (?) of newlib wrappers.
* cygthread.cc (cygthread::detach): Always wait for event or suffer an
apparently inavoidable race.
* dcrt0.cc (dll_crt0_1): Allocate threads after stack has been relocated.
* debub.cc (lock_debug): Don't acquire lock on exit.
* fork.cc (fork_child): Recreate mmaps before doing anything else since Windows
has a habit of using blocks of memory in the child that could previously have
been occupied by shared memory in the parent.
* mmap.cc (fhandler_disk_file::fixup_mmap_after_fork): Issue error here and
provide some details about what went wrong.
(fixup_mmaps_after_fork): Remove error message.
* shared.cc (open_shared): Move warning message so that more detail is
possible.
* sigproc.cc (sigproc_init): Initialize sync_proc_subproc to avoid a race.
(sigproc_terminate): Specifically wait for process thread to terminate.
@
text
@a17 1
#include <errno.h>
@


1.44.12.1
log
@merge from trunk.
Reorganize includes throughout so that path.h comes before fhandler.h.
Eliminate path_conv arguments from fhandler functions which take them,
throughout.  Use get_name() and get_win32_name() consistently throughout for
fhandler objects.  Use build_fh_* functions throughout, where appropriate.
* fhandler.h (fhandler_base): Store path_conv struct here.  Remove dev.
* dtable.h (dtable::build_fhandler_*): Remove.
(build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* dtable.cc (build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* fhandler.h (fhandler_base::set_name): Change argument.
* fhandler.cc (fhandler_base::set_name): Just accept a path_conv argument.
(executable_states): Move.
* path.h (executable_state): Accept.
* syscalls.cc (stat_worker): Make static.
* winsup.h (stat_worker): Remove definition.
@
text
@d21 1
a22 1
#include "fhandler.h"
@


1.44.12.2
log
@merge from trunk
@
text
@d18 1
@


1.44.12.3
log
@merge from trunk
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Red Hat, Inc.
@


1.44.12.4
log
@merge from trunk
@
text
@a144 3
hires_ms gtod;
UINT NO_COPY hires_ms::minperiod;

d149 1
d623 1
a623 1
UINT
d628 2
d631 7
a637 8
  if (!minperiod)
    if (timeGetDevCaps (&tc, sizeof (tc)) != TIMERR_NOERROR)
      minperiod = 1;
    else
      {
	minperiod = min (max (tc.wPeriodMin, 1), tc.wPeriodMax);
	timeBeginPeriod (minperiod);
      }
d639 3
a641 7
  if (!inited)
    {
      int priority = GetThreadPriority (GetCurrentThread ());
      SetThreadPriority (GetCurrentThread (), THREAD_PRIORITY_TIME_CRITICAL);
      initime_ms = timeGetTime ();
      GetSystemTimeAsFileTime (&f);
      SetThreadPriority (GetCurrentThread (), priority);
d643 5
a647 7
      inited = 1;
      initime_us.HighPart = f.dwHighDateTime;
      initime_us.LowPart = f.dwLowDateTime;
      initime_us.QuadPart -= FACTOR;
      initime_us.QuadPart /= 10;
    }
  return minperiod;
d653 1
a653 1
  if (!minperiod) /* NO_COPY variable */
d659 5
@


1.43
log
@Remove \n from calls to strace class printfs throughout.
@
text
@d49 1
a49 1
_times (struct tms * buf)
d89 2
d173 2
a174 5
extern "C" int
_gettimeofday (struct timeval *p, struct timezone *z)
{
  return gettimeofday (p, z);
}
d268 1
a268 2
extern "C"
time_t
d410 1
a410 2
extern "C"
struct tm *
d434 1
a434 2
extern "C"
struct tm *
d451 1
a451 2
extern "C"
int
d530 1
a530 2
extern "C"
int
d546 1
a546 2
extern "C"
int
@


1.42
log
@More GNUify non-GNU formatted functions calls throughout.
@
text
@d43 1
a43 1
  syscall_printf ("total %08x %08x\n", (unsigned)(total>>32), (unsigned)(total));
@


1.41
log
@* fhandler.cc (fhandler_base::dup): Don't set handle on failure.  Caller has
already taken care of that.
* fhandler_console.cc (fhandler_console::open): Initialize handles to NULL.
(fhandler_console::close): Ditto.  GNUify non-GNU formatted functions calls
throughout.
@
text
@d337 1
a337 1
  struct tm &localtime_buf=_reent_winsup()->_localtime_buf;
d419 1
a419 1
  tzset();
@


1.40
log
@Cleanup calls to CreateFile throughout.
* dcrt0.cc (__api_fatal): Correctly check for failing return from CreateFile.
* assert.cc (__assert): Don't check return value from CreateFile for NULL.
* fhandler_console.cc (set_console_state_for_spawn): Ditto.
* fork.cc (fork_parent): Ditto.
@
text
@d99 1
a99 1
  ptm = gmtime(&tv->tv_sec);
d109 1
a109 1
  res = !SetSystemTime(&st);
d121 1
a121 1
  char *b=_reent_winsup()->timezone_buf;
d126 2
a127 2
  tzset();
  __small_sprintf (b,"GMT%+d:%02d", (int) (-_timezone / 3600), (int) (abs(_timezone / 60) % 60));
d161 1
a161 1
	  tzset();
@


1.39
log
@* times.cc (to_time_t): Always round time_t down to nearest second.
@
text
@d474 5
a478 7
  HANDLE h = CreateFileA (win32.get_win32 (),
			  FILE_WRITE_ATTRIBUTES,
			  FILE_SHARE_READ | FILE_SHARE_WRITE,
			  &sec_none_nih,
			  OPEN_EXISTING,
			  FILE_ATTRIBUTE_NORMAL | FILE_FLAG_BACKUP_SEMANTICS,
			  0);
@


1.38
log
@* fhandler_socket.cc (fhandler_socket::fstat): Don't assume that socket is
unix-domain socket.
* times.cc (hires_ms::prime): Set init flag.
* times.cc (hires_ms::prime): Adjust epoch of initime_us from 1601 to 1970.
@
text
@a214 1
  long rem;
a221 2
  rem = x % ((long long)NSPERSEC);
  rem += (NSPERSEC / 2);
a222 1
  x += (long long) (rem / NSPERSEC);
@


1.37
log
@* autoload.cc (timeGetDevCaps): Define new autoload function.
(timeGetTime): Ditto.
(timeBeginPeriod): Ditto.
(timeEndPeriod): Ditto.
* hires.h (hires_base): New class.  Renamed from hires.
(hires_us): New class.
(hires_ms): New class.
* strace.cc (strace::microseconds): Use hires_us class.
* times.cc (gettimeofday): Use hires-ms class.
(hires_us::prime): Renamed from hires::prime.
(hires_us::usecs): Renamed from hires:usecs.
(hires_ms::prime): New method.
(hires_ms::usecs): New method.
(hires_ms::~hires_ms): New destructor.
@
text
@d649 1
a649 1
      minperiod = min (max(tc.wPeriodMin, 1), tc.wPeriodMax);
d652 1
d656 2
d660 1
@


1.36
log
@	* fhandler.cc (fhandler_base::fstat): Initialise tv_nsec member of
	st_atim, st_mtim, and st_ctim fields.
	* fhandler_disk_file.cc (fhandler_disk_file::fstat_helper): Ditto.
	* fhandler_process.cc (fhandler_process::fstat): Ditto.
	* glob.c (stat32_to_STAT): Copy across the whole st_atim,
	st_mtime, and st_ctim fields.
	* syscalls.cc (stat64_to_stat32): Ditto.
	* times.cc (to_timestruc_t): New function.
	(time_as_timestruc_t): New function.
	* winsup.h: Add to_timestruc_t and time_as_timestruc_t functions.
	* include/cygwin/stat.h: Replace time_t with timestruc_t
	throughout for all file times, removing the st_spare1, st_spare2,
	and st_spare3 fields in the process. Add macros to access tv_sec
	fields by old names.
	* include/cygwin/types.h: Typedef timespec_t and timestruc_t as
	struct timespec.
@
text
@d146 1
a146 1
gettimeofday(struct timeval *tv, struct timezone *tz)
d148 1
a148 1
  static hires gtod;
d583 1
a583 1
hires::prime ()
d615 1
a615 1
hires::usecs (bool justdelta)
d635 39
@


1.35
log
@* cygwin.din: Eliminate some newlib wrappers.
* path.cc (get_devn): Only consider first 99 potential com devices.
(get_device_number): Ditto.
* times.cc (_times): Eliminate.
(_times): Renamed from times().
@
text
@d230 41
@


1.34
log
@Remove unneeded sigproc.h includes throughout.
* fhandler.h (fhandler_proc::fill_filebuf): Take a pinfo argument.
* fhandler_proc.cc (fhandler_proc::get_proc_fhandler): Simplify search for
given pid.
(fhandler_proc::readdir): Assume that pid exists if it shows up in the winpid
list.
* fhandler_process.cc (fhandler_process::open): Simplify search for given pid.
Call fill_filebuf with pinfo argument.
(fhandler_process::fill_filebuf): Pass pinfo here and assume that it exists.
* pinfo.h (pinfo::remember): Define differently if sigproc.h is not included.
* dll_init.cc (dll_list::detach): Don't run destructor on exit.
@
text
@d49 1
a49 1
times (struct tms * buf)
a86 6
}

extern "C" clock_t
_times (struct tms * buf)
{
  return times (buf);
@


1.33
log
@Remove unneeded sync.h, where appropriate, throughout.  Remove unneeded heap.h,
where appropriate, throughout.  Remove unneeded exceptions.h, where
appropriate, throughout.  Remove unneeded perprocess.h, where appropriate,
throughout.
@
text
@a22 1
#include "sigproc.h"
@


1.32
log
@	* times.cc (utimes): Use FILE_WRITE_ATTRIBUTES even on 9x/Me when
	opening file for writing timestamp.
	* wincap.cc: Remove flag has_specific_access_rights.
	* wincap.h: Ditto.
@
text
@a19 1
#include "perprocess.h"
a22 1
#include "sync.h"
@


1.31
log
@fix formatting
@
text
@d443 1
a443 1
     the times of directories.  FIXME: what about Win95??? */
d447 1
a447 2
			  wincap.has_specific_access_rights () ?
			  FILE_WRITE_ATTRIBUTES : GENERIC_WRITE,
@


1.30
log
@* times.cc (gettimeofday): Fix typo in previous patch.
@
text
@d168 5
a172 4
      if (!tzflag) {
        tzset();
        tzflag = true;
      }
@


1.29
log
@* times.cc (gettimeofday): Revert to setting timezone info if tz != NULL.
@
text
@d158 1
a158 1
  static tzflag;
d170 1
a170 1
        tzflag = 1;
@


1.28
log
@* times.cc: Remove if 0'd code.  Clean up slightly.
@
text
@d158 1
d165 11
@


1.27
log
@* times.cc (hires::prime): Restore thread priority on failure condition.
* uinfo.cc (uinfo_init): Use more robust method for determining if process was
invoked from a non-cygwin process.
* sync.h (muto::init): Eliminate "inheritance" parameter.
(new_muto): Reflect removal of parameter.
* sync.cc (muto::init): Ditto.
* cygheap.cc (cygheap_init): Ditto.
* debug.cc (threadname_init): Ditto.
* exceptions.cc (events_init): Ditto.
* malloc.cc (malloc_init): Ditto.
* path.cc (cwdstuff::init): Ditto.
* sigproc.cc (sigproc_init): Ditto.
* grp.cc (group_lock): Use different method for locking with static member.
(read_etc_group): REALLY ensure that read lock mutex is released.
* passwd.cc (passwd_lock): Use different method for locking with static member.
(read_etc_passwd): REALLY ensure that read lock mutex is released.
* shared.cc (sec_user): Correct reversed inheritance test.
@
text
@a172 22
#if 0
/* Work out magic constant below */
genf ()
{
  SYSTEMTIME s;
  FILETIME f;
  s.wYear = 1970;
  s.wMonth = 1;
  s.wDayOfWeek = 4;
  s.wDay = 1;
  s.wHour = 0;
  s.wMinute = 0;
  s.wSecond = 0;
  s.wMilliseconds = 0;
  SystemTimeToFileTime (&s, &f);

  small_printf ("FILE TIME is %08x%08x\n",
	       f.dwHighDateTime,
	       f.dwLowDateTime);
}
#endif

d533 1
a533 2
extern "C"
void
@


1.26
log
@* hires.h (hires::usecs): Rename from utime.  Accept an argument.
* strace.cc (strace::microseconds): Use hires class for calculating times.
* sync.h (new_muto): Use NO_COPY explicitly in declaration.
* times.cc (gettimeofday): Reflect change in usecs argument.
(hires::usecs): Ditto.  Changed name from utime.
* winsup.h (NO_COPY): Add nocommon attribute to force setting aside space for
variable.
* regcomp.c (REQUIRE): Add a void cast to bypass a warning.
@
text
@d576 1
@


1.25
log
@* hires.h: New file.
* times.cc (gettimeofday): Use hires class for calculating current time.
(hires::prime): New method.
(hires::utime): Ditto.
@
text
@d158 1
a158 1
  LONGLONG now = gtod.utime ();
d593 1
a593 1
hires::utime ()
a609 1
  now.QuadPart -= primed_pc.QuadPart;
d611 2
a612 1
  return primed_ft.QuadPart + (LONGLONG) ((double) now.QuadPart * freq);
@


1.24
log
@	* dir.cc: Use INVALID_FILE_ATTRIBUTES instead of "(DWORD) -1"
	for file attributes throughout.
	* fhandler.cc: Ditto.
	* fhandler_disk_file.cc: Ditto.
	* path.cc: Ditto.
	* path.h: Ditto.
	* syscalls.cc: Ditto.
	* times.cc (utimes): Use path_conv::isdir() instead of explicit
	GetFileAttributes() call.
@
text
@d27 1
d153 1
a153 1
/* gettimeofday: BSD */
d155 1
a155 1
gettimeofday (struct timeval *p, struct timezone *z)
d157 4
a160 1
  int res = 0;
d162 3
a164 18
  if (p != NULL)
    {
      FILETIME f;

      GetSystemTimeAsFileTime (&f);
      totimeval (p, &f, 0, 1);
    }

  if (z != NULL)
    {
      tzset();
      z->tz_minuteswest = _timezone / 60;
      z->tz_dsttime = _daylight;
    }

  syscall_printf ("%d = gettimeofday (%x, %x)", res, p, z);

  return res;
d167 1
a167 2
extern "C"
int
d559 54
@


1.23
log
@* path.cc (symlink): Check arguments for validity.
(getcwd): Ditto.
* syscalls.cc (ftruncate): Ditto.
* times.cc (times): Ditto.
* uname.cc (uname): Ditto.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001 Red Hat, Inc.
d478 1
a478 2
      if ((res = GetFileAttributes (win32.get_win32 ())) != -1 &&
		(res & FILE_ATTRIBUTE_DIRECTORY))
@


1.23.2.1
log
@Merged changes from HEAD
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
d478 2
a479 1
      if (win32.isdir ())
@


1.23.2.2
log
@Merged changes from HEAD
@
text
@a26 1
#include "hires.h"
d152 1
a152 1
/* FIXME: Make thread safe */
d154 1
a154 1
gettimeofday(struct timeval *tv, struct timezone *tz)
d156 18
a173 4
  static hires gtod;
  LONGLONG now = gtod.usecs (false);
  if (now == (LONGLONG) -1)
    return -1;
d175 1
a175 3
  tv->tv_sec = now / 1000000;
  tv->tv_usec = now % 1000000;
  return 0;
d178 2
a179 1
extern "C" int
a570 55
}

void
hires::prime ()
{
  LARGE_INTEGER ifreq;
  if (!QueryPerformanceFrequency (&ifreq))
    {
      inited = -1;
      return;
    }

  FILETIME f;
  int priority = GetThreadPriority (GetCurrentThread ());
  SetThreadPriority (GetCurrentThread (), THREAD_PRIORITY_TIME_CRITICAL);
  if (!QueryPerformanceCounter (&primed_pc))
    {
      SetThreadPriority (GetCurrentThread (), priority);
      inited = -1;
      return;
    }

  GetSystemTimeAsFileTime (&f);
  SetThreadPriority (GetCurrentThread (), priority);

  inited = 1;
  primed_ft.HighPart = f.dwHighDateTime;
  primed_ft.LowPart = f.dwLowDateTime;
  primed_ft.QuadPart -= FACTOR;
  primed_ft.QuadPart /= 10;
  freq = (double) ((double) 1000000. / (double) ifreq.QuadPart);
  return;
}

LONGLONG
hires::usecs (bool justdelta)
{
  if (!inited)
    prime ();
  if (inited < 0)
    {
      set_errno (ENOSYS);
      return (long long) -1;
    }

  LARGE_INTEGER now;
  if (!QueryPerformanceCounter (&now))
    {
      set_errno (ENOSYS);
      return -1;
    }

  // FIXME: Use round() here?
  now.QuadPart = (LONGLONG) (freq * (double) (now.QuadPart - primed_pc.QuadPart));
  return justdelta ? now.QuadPart : primed_ft.QuadPart + now.QuadPart;
@


1.23.2.3
log
@Merged changes from HEAD
@
text
@d173 22
d555 2
a556 1
extern "C" void
@


1.23.2.4
log
@Merged changes from HEAD
@
text
@d20 1
d24 2
d52 1
a52 1
_times (struct tms * buf)
d92 6
d155 1
a155 1
gettimeofday (struct timeval *tv, struct timezone *tz)
d157 1
a157 2
  static hires_ms gtod;
  static bool tzflag;
a163 12

  if (tz != NULL)
    {
      if (!tzflag)
	{
	  tzset();
	  tzflag = true;
	}
      tz->tz_minuteswest = _timezone / 60;
      tz->tz_dsttime = _daylight;
    }

a225 41
/* Cygwin internal */
/* Convert a Win32 time to "UNIX" timestruc_t format. */
void __stdcall
to_timestruc_t (FILETIME *ptr, timestruc_t *out)
{
  /* A file time is the number of 100ns since jan 1 1601
     stuffed into two long words.
     A timestruc_t is the number of seconds and microseconds since jan 1 1970
     stuffed into a time_t and a long.  */

  long rem;
  long long x = ((long long) ptr->dwHighDateTime << 32) + ((unsigned)ptr->dwLowDateTime);

  /* pass "no time" as epoch */
  if (x == 0)
    {
      out->tv_sec = 0;
      out->tv_nsec = 0;
      return;
    }

  x -= FACTOR;			/* number of 100ns between 1601 and 1970 */
  rem = x % ((long long)NSPERSEC);
  x /= (long long) NSPERSEC;		/* number of 100ns in a second */
  out->tv_nsec = rem * 100;	/* as tv_nsec is in nanoseconds */
  out->tv_sec = x;
}

/* Cygwin internal */
/* Get the current time as a "UNIX" timestruc_t format. */
void __stdcall
time_as_timestruc_t (timestruc_t * out)
{
  SYSTEMTIME systemtime;
  FILETIME filetime;

  GetSystemTime (&systemtime);
  SystemTimeToFileTime (&systemtime, &filetime);
  to_timestruc_t (&filetime, out);
}

d430 1
a430 1
     the times of directories.  */
d434 2
a435 1
			  FILE_WRITE_ATTRIBUTES,
d539 1
a539 1
hires_us::prime ()
d571 1
a571 1
hires_us::usecs (bool justdelta)
a590 43
}

void
hires_ms::prime ()
{
  TIMECAPS tc;
  FILETIME f;
  int priority = GetThreadPriority (GetCurrentThread ());
  SetThreadPriority (GetCurrentThread (), THREAD_PRIORITY_TIME_CRITICAL);

  if (timeGetDevCaps (&tc, sizeof (tc)) != TIMERR_NOERROR)
    minperiod = 0;
  else
    {
      minperiod = min (max (tc.wPeriodMin, 1), tc.wPeriodMax);
      timeBeginPeriod (minperiod);
    }

  initime_ms = timeGetTime ();
  GetSystemTimeAsFileTime (&f);
  SetThreadPriority (GetCurrentThread (), priority);

  inited = 1;
  initime_us.HighPart = f.dwHighDateTime;
  initime_us.LowPart = f.dwLowDateTime;
  initime_us.QuadPart -= FACTOR;
  initime_us.QuadPart /= 10;
}

LONGLONG
hires_ms::usecs (bool justdelta)
{
  if (!inited)
    prime ();
  DWORD now = timeGetTime ();
  // FIXME: Not sure how this will handle the 49.71 day wrap around
  LONGLONG res = initime_us.QuadPart + ((LONGLONG) (now - initime_ms) * 1000);
  return res;
}

hires_ms::~hires_ms ()
{
  timeEndPeriod (minperiod);
@


1.23.2.5
log
@Merged changes from HEAD
@
text
@d215 1
d223 2
d226 1
@


1.23.2.6
log
@Merged changes from HEAD
@
text
@d474 7
a480 5
  HANDLE h = CreateFile (win32, FILE_WRITE_ATTRIBUTES,
			 FILE_SHARE_READ | FILE_SHARE_WRITE,
			 &sec_none_nih, OPEN_EXISTING,
			 FILE_ATTRIBUTE_NORMAL | FILE_FLAG_BACKUP_SEMANTICS,
			 0);
@


1.23.2.7
log
@Merged changes from HEAD
@
text
@d99 1
a99 1
  ptm = gmtime (&tv->tv_sec);
d109 1
a109 1
  res = !SetSystemTime (&st);
d121 1
a121 1
  char *b=_reent_winsup ()->timezone_buf;
d126 2
a127 2
  tzset ();
  __small_sprintf (b,"GMT%+d:%02d", (int) (-_timezone / 3600), (int) (abs (_timezone / 60) % 60));
d161 1
a161 1
	  tzset ();
@


1.22
log
@        * Makefile.in: Build wincap.o.
        * wincap.cc: New file.
        * wincap.h: Ditto.
        * autoload.cc: Add dynamic load statement for `CreateHardLinkA'.
        * dcrt0.cc (os_being_run): Eliminated.
        (osname): Ditto.
        (iswinnt): Ditto.
        (set_os_type): Ditto.
        (dll_crt0_1): Call wincap.init() instead of set_os_type().
        (_dll_crt0): Ditto.
        * environ.cc (set_chunksize): New function.
        (parse_thing): `forkchunk' setting now invokes function `set_chunksize'.
        * fork.cc (chunksize): Eliminated. Moved to be member of wincap.
        * host_dependent.h: Removed.
        * syscalls.cc (_link): Try using `CreateHardLinkA' first, if available.
        * cygheap.cc, dcrt0.cc, delqueue.cc, dir.cc,
        environ.cc, fhandler.cc, fhandler.h, fhandler_console.cc,
        fhandler_mem.cc, fork.cc, mmap.cc, net.cc, pinfo.cc, pinfo.h,
        security.cc, syscalls.cc, sysconf.cc, syslog.cc, thread.cc,
        times.cc, tty.cc, uinfo.cc, uname.cc, winsup.h: Use new wincap
        capability check throughout.
        * winsup.h: Include wincap.h. Eliminate extern declarations of
        `os_being_run' and `iswinnt'. Eliminate `os_type" definition.
        * include/cygwin/version.h: Bump version to 1.3.4.
@
text
@d55 3
@


1.21
log
@* cygheap.h (init_cygheap): Move heap pointers here.
* include/sys/cygwin.h (perprocess): Remove heap pointers.
* dcrt0.cc (__cygwin_user_data): Reflect obsolete perprocess stuff.
(_dll_crt0): Don't initialize heap pointers.
(cygwin_dll_init): Ditto.
(release_upto): Use heap pointers from cygheap.
* heap.h: Ditto.
* fork.cc (fork_parent): Ditto.  Don't set heap pointers in ch.
(fork_child): Remove obsolete sigproc_fixup_after_fork.
* shared.cc (memory_init): Reorganize so that cygheap initialization is called
prior to regular heap since regular heap uses cygheap now.
* sigproc.cc (proc_subproc): Eliminate zombies allocation.
(sigproc_init): Move zombies alloation here.  Don't free up array on fork, just
reuse it.
(sigproc_fixup_after_fork): Eliminate.
* sigproc.h: Ditto.
* include/cygwin/version.h: Reflect change to perprocess structure.
@
text
@d59 1
a59 1
  if (iswinnt)
d465 2
a466 1
			  iswinnt ? FILE_WRITE_ATTRIBUTES : GENERIC_WRITE,
@


1.20
log
@        * times.cc (utimes): Revert previous change. Just open the
        file using FILE_WRITE_ATTRIBUTES instead of GENERIC_WRITE
        on NT/W2K.
@
text
@d105 2
a106 2
  st.wYear         = ptm->tm_year + 1900;
  st.wMonth        = ptm->tm_mon + 1;
d108 2
a109 2
  st.wDay          = ptm->tm_mday;
  st.wHour         = ptm->tm_hour;
@


1.19
log
@        * security.cc (set_nt_attribute): Return always -1 in case of
        a failure.
        * times.cc (utimes): On NTFS with ntsec ON, change the file's
        security descriptor temporarily to acquire write access if
        opening the file failed.
@
text
@a451 2
  PSECURITY_DESCRIPTOR sd = NULL;
  DWORD sd_size;
d462 2
d465 1
a465 1
			  GENERIC_WRITE,
a479 25
      else if (allow_ntsec && win32.has_acls ())
        {
	  /* The following hack allows setting the correct filetime
	     on NTFS with ntsec ON even when the file is R/O for the
	     current user. This solves the `cp -p' problem and allows
	     a more UNIX like behaviour. Basically we save the file's
	     current security descriptor, change the file access so
	     that we have write access (if possible) and if that worked
	     fine, reset the old security descriptor at the end of the
	     function. */
	  sd_size = 4096;
	  sd = (PSECURITY_DESCRIPTOR) alloca (sd_size);
	  if (read_sd (win32.get_win32 (), sd, &sd_size) <= 0)
	    sd = NULL;
	  else if (set_file_attribute (TRUE, win32.get_win32 (), 0600))
	    sd = NULL;
	  else
	    h = CreateFileA (win32.get_win32 (),
			     GENERIC_WRITE,
			     FILE_SHARE_READ | FILE_SHARE_WRITE,
			     &sec_none_nih,
			     OPEN_EXISTING,
			     FILE_ATTRIBUTE_NORMAL | FILE_FLAG_BACKUP_SEMANTICS,
			     0);
	}
d486 1
a486 1
  if (h != INVALID_HANDLE_VALUE)
a520 3

  if (sd)
    write_sd (win32.get_win32 (), sd, sd_size);
@


1.18
log
@Throughout, change check for running under Windows NT to 'iswinnt'.
* dcrt0.cc (set_os_type): Set 'iswinnt' appropriately.
* cygheap.cc (init_cheap): Revert to using VirtualAlloc for allocating cygheap.
(cygheap_setup_for_child_cleanup): New function.  Standard function to call
after calling CreateProcess to cleanup cygheap info passed to child.
(cygheap_fixup_in_child): Copy cygheap from shared memory into allocated space
under Windows 9x or if can't relocate shared space under NT.
* cygheap.h: Declare new function.
* spawn.cc (spawn_guts): Use cygheap_fixup_in_child.
* fork.cc (fork_parent): Ditto.
* winsup.h: Declare iswinnt.
@
text
@d452 2
d480 25
d511 1
a511 1
  else
d546 3
@


1.17
log
@Throughout, reorganize header file inclusion to put security.h prior to
fhandler.h.
* fhandler.h (fhandler_base::get_inheritance): New method.
* fhandler_socket.cc (fhandler_socket::create_secret_event): Use proper
close-on-exec inheritance when creating.
(fhandler_socket::check_peer_secret_event): Create handle as non-inheritable.
@
text
@d59 1
a59 1
  if (os_being_run == winNT)
@


1.16
log
@forced commit
@
text
@d21 1
a26 1
#include "security.h"
@


1.15
log
@* thread.h (struct _winsup_t): Remove obsolete elements.  Add available_drives
element.
* path.cc (mount_info::getmntent): Report "/cygdrive" drives when mounted
drives are exhausted.
(fillout_mntent): New function.
(mount_item::getmntent): Use fillout_mntent.
(cygdrives_mntent): New function.  Returns next available "/cygdrive".
(setmntent): Initialize available "/cygdrives".
* syscalls.cc: Remove some if 0'ed code.
* times.cc (timezone): Use more descriptive variable name.
@
text
@@


1.14
log
@Update copyrights.
@
text
@d126 1
a126 1
  char *b=_reent_winsup()->_b;
@


1.13
log
@* times.cc (settimeofday): Replace function stub with working code.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000 Cygnus Solutions.
@


1.12
log
@Whitespace cleanup.

* configure.in: Eliminate subdir stuff.
* configure: Regenerate.
* include/getopt.h (option): Make name field 'const'.
@
text
@d20 1
d96 1
a96 1
settimeofday (const struct timeval *, const struct timezone *)
d98 21
a118 2
  set_errno (ENOSYS);
  return -1;
@


1.11
log
@* times.cc (to_time_t): pass zero time as epoch
* fhandler.cc (fstat): copy atime/ctime from mtime if they're zero
@
text
@d65 1
a65 1
	    	   user_time, kernel_time, creation_time, exit_time);
@


1.10
log
@* Makefile.in: Remove some obsolete stuff.
* dcrt0.cc (dll_crt0_1): Call signal_fixup_after_exec where appropriate.  Set
myself->uid from parent version.  Just use ThreadItem Init method.  Close or
store hexec_proc as appropriate.
(_dll_crt0): Store user_data->forkee here so that proper tests can be made
subsequently.
(do_exit): Remove hExeced stuff.
* environ.cc (environ_init): Accept environ count as well as environ pointer.
* environ.h: Reflect above change.
* pinfo.cc (pinfo_init): Ditto.  Accept environ count.
(fixup_in_spawned_child): Remove.
* spawn.cc (spawn_guts): Move signal code to dll_crt0_1.  Don't suspend execing
process since it is no longer necessary.  Store envc.
* exceptions.cc (signal_fixup_after_exec): New function.
(call_handler): Remove hExeced test.
* child_info.h (cygheap_exec_info): Store envc as well as envp.
(child_info_spawn): Store hexec_proc so that it can be closed in child.
* path.cc (normalize_posix_path): Avoid intermediate use of temporary cwd buf.
(normalize_win32_path): Ditto.
(cwdstuff::get_initial): Always set lock.
* sigproc.h: Remove hExeced.
* strace.cc (strace::vsprntf): Modify to accomodate for lack of hExeced.
* thread.cc (MTinterface::Init): Merge Init1 and ClearReent into this method.
(MTinterface::Init1): Eliminate.
(MTinterface::ClearReent): Eliminate.
* thread.h: Reflect above changes.
* include/sys/strace.h (strace): Make microseconds() public.  Make various
functions 'regparm', throughout.
* pinfo.h (_pinfo): Inline simple signal manipulation functions.  Requires
inclusion of thread.h which was removed from .cc files, where appropriate.
throughout.
* pinfo.cc: Eliminate signal manipulation functions.
(_pinfo::exit): Calculate total rusage for exiting process here.
* cygheap.cc (size2bucket): Eliminate.
(init_buckets): Ditto.
(_cmalloc): Calculate size and bits in a loop rather than going through a
function call.
(_crealloc): Use stored array index to calculate allocated size.
* spawn.cc (spawn_guts): Use _pinfo exit method to exit, calculating cpu usage.
@
text
@d224 5
@


1.9
log
@Break out more header info into separate files.  Use appropriate header files
throughout.
* shared.h: Remove.
* cygwin_version.h: New file.
* delqueue.h: New file.
* environ.h: New file.
* host_dependent.h: New file.
* perprocess.h: New file.
* registry.h: New file.
* security.h: New file.
@
text
@a21 1
#include "thread.h"
@


1.8
log
@* times.cc (gettimeofday): use GetSystemTimeAsFileTime to avoid a
conversion
(FACTOR): correct value
(genf): set milliseconds to zero, DOW to 4.
@
text
@d26 1
@


1.7
log
@* winsup.h: Eliminate inclusion of most of the cygwin .h files.  Use .h files
only in sources which require them.
* Makefile.in: Generate dependencies with -MD option.
@
text
@d27 1
a27 1
#define FACTOR (0x19db1ded53ea710LL)
a136 1
      SYSTEMTIME t;
d139 1
a139 3
      GetSystemTime (&t);
      if (! SystemTimeToFileTime (&t, &f))
        res = -1;
d170 1
a170 1
  s.wDayOfWeek = 5;
d175 1
a175 1
  s.wMilliseconds = 1;
@


1.6
log
@* cygerrno.h: New file.  Use this throughout whenever errno manipulation is
required.
* errno.cc: Use DWORD to hold Windows errors.
(geterrno_from_win_error): New function.
(seterrno_from_win_error): Use geterrno_from_win_error to convert supplied
windows error (suggested by Corinna Vinschen).
* path.cc (symlink_info): Add error element.
* path.cc (path_conv::check): Remove errno setting.  Use new symlink_info errno
element to set path_conv error, where appropriate.
(symlink_info::check): Set error element rather than attempting to manipulate
errno.  Add more checks for trailing / and /..  even though they are currently
useless.  Avoid setting EINVAL.
* path.cc (normalize_posix_path): Correct check for trailing /.
@
text
@d19 6
a25 1
#include "cygerrno.h"
@


1.5
log
@* winsup.h: Split out dtable definitions into separate header file.
* dtable.h: New file.
* sigproc.h: Eliminate pinfo.h usage here.  Use it in source files that need
it.
@
text
@d20 1
@


1.4
log
@* winsup.h: take out protections of environ, errno, allow C use
* *.cc: put winsup.h before other headers (for __INSIDE_CYGWIN__);
use cur_environ() instead of just environ
* times.cc: remove import protections
* glob.c: add winsup.h
* localtime.c: ditto
* smallprint.c: ditto
* Makefile.in: don't __INSIDE_CYGWIN__ as it messes up profiling.
@
text
@d19 1
a19 1

@


1.3
log
@* times.cc: Fix extern declarations for variables that are exported but used by
this modules.
@
text
@d11 1
a11 4
/* Hide definitions from the library since they contain the
   "dllimport" attribute. */
#define _timezone dummy_timezone
#define _daylight dummy_daylight
a18 1
#include "winsup.h"
a19 4
#undef _timezone
#undef _daylight
extern time_t _timezone;
extern int _daylight;
@


1.2
log
@* times.cc: Remove unneeded (and incorrect) externs.
@
text
@d11 4
d23 5
@


1.1
log
@Initial revision
@
text
@a19 3
extern time_t __declspec(dllexport) _timezone;
extern int __declspec(dllexport) _daylight;

@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
