head	1.4;
access;
symbols
	cygwin-1_7_35-release:1.4
	cygwin-1_7_34-release:1.4
	cygwin-1_7_33-release:1.4
	cygwin-1_7_32-release:1.4
	cygwin-1_7_31-release:1.4
	cygwin-1_7_30-release:1.4
	cygwin-1_7_29-release:1.4
	cygwin-1_7_29-release-branchpoint:1.4.0.2
	cygwin-pre-user-db:1.4
	cygwin-1_7_28-release:1.4
	cygwin-1_7_27-release:1.4
	cygwin-1_7_26-release:1.4
	cygwin-1_7_25-release:1.4
	cygwin-1_7_24-release:1.4
	cygwin-1_7_23-release:1.4
	cygwin-1_7_22-release:1.4
	cygwin-1_7_21-release:1.4
	cygwin-1_7_20-release:1.4
	cygwin-1_7_19-release:1.4
	cygwin-64bit-postmerge:1.4
	cygwin-64bit-premerge-branch:1.3.0.10
	cygwin-64bit-premerge:1.3
	cygwin-1_7_18-release:1.3
	post-ptmalloc3:1.3.8.1
	pre-ptmalloc3:1.3.8.1
	cygwin-1_7_17-release:1.3
	cygwin-64bit-branch:1.3.0.8
	cygwin-1_7_16-release:1.3
	cygwin-1_7_15-release:1.3
	cygwin-1_7_14_2-release:1.3
	cygwin-1_7_14-release:1.3
	cygwin-1_7_12-release:1.3
	cygwin-1_7_11-release:1.3
	cygwin-1_7_10-release:1.3
	signal-rewrite:1.3.0.6
	pre-notty:1.3
	cygwin-1_7_9-release:1.3
	cv-post-1_7_9:1.3.0.4
	cygwin-1_7_8-release:1.3
	cygwin-1_7_7-release:1.3
	cygwin-1_7_5-release:1.3
	cygwin-1_7_4-release:1.3
	cygwin-1_7_3-release:1.3
	cygwin-1_7_2-release:1.3
	fifo_doover3:1.3.0.2
	cygwin-1_7_1-release:1.3
	prefifo:1.2;
locks; strict;
comment	@// @;


1.4
date	2013.04.23.09.44.33;	author corinna;	state Exp;
branches;
next	1.3;

1.3
date	2009.08.04.04.20.36;	author cgf;	state Exp;
branches
	1.3.8.1;
next	1.2;

1.2
date	2009.07.17.23.37.04;	author davek;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.07.20.12.44;	author davek;	state Exp;
branches;
next	;

1.3.8.1
date	2013.01.18.15.34.11;	author corinna;	state Exp;
branches;
next	1.3.8.2;

1.3.8.2
date	2013.03.04.11.09.16;	author yselkowitz;	state Exp;
branches;
next	;


desc
@@


1.4
log
@	* Merge in cygwin-64bit-branch.
@
text
@/* libstdcxx_wrapper.cc

   Copyright 2009 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details.  */


/* We provide these stubs to call into a user's
   provided ONDEE replacement if there is one - otherwise
   it must fall back to the standard libstdc++ version.  */

#include "winsup.h"
#include "cygwin-cxx.h"
#include "perprocess.h"

/* We are declaring asm names for the functions we define here, as we want
   to define the wrappers in this file.  GCC links everything with wrappers
   around the standard C++ memory management operators; these are the wrappers,
   but we want the compiler to know they are the malloc operators and not have
   it think they're just any old function matching 'extern "C" _wrap_*'.  */
#ifdef __x86_64__
#define MANGLED_ZNWX			"__wrap__Znwm"
#define MANGLED_ZNAX			"__wrap__Znam"
#define MANGLED_ZNWX_NOTHROW_T		"__wrap__ZnwmRKSt9nothrow_t"
#define MANGLED_ZNAX_NOTHROW_T		"__wrap__ZnamRKSt9nothrow_t"
#else
#define MANGLED_ZNWX			"___wrap__Znwj"
#define MANGLED_ZNAX			"___wrap__Znaj"
#define MANGLED_ZNWX_NOTHROW_T		"___wrap__ZnwjRKSt9nothrow_t"
#define MANGLED_ZNAX_NOTHROW_T		"___wrap__ZnajRKSt9nothrow_t"
#endif

extern void *operator new(std::size_t sz) throw (std::bad_alloc)
			__asm__ (MANGLED_ZNWX);
extern void *operator new[](std::size_t sz) throw (std::bad_alloc)
			__asm__ (MANGLED_ZNAX);
extern void operator delete(void *p) throw()
			__asm__ (_SYMSTR (__wrap__ZdlPv));
extern void operator delete[](void *p) throw()
			__asm__ (_SYMSTR (__wrap__ZdaPv));
extern void *operator new(std::size_t sz, const std::nothrow_t &nt) throw()
			__asm__ (MANGLED_ZNWX_NOTHROW_T);
extern void *operator new[](std::size_t sz, const std::nothrow_t &nt) throw()
			__asm__ (MANGLED_ZNAX_NOTHROW_T);
extern void operator delete(void *p, const std::nothrow_t &nt) throw()
			__asm__ (_SYMSTR (__wrap__ZdlPvRKSt9nothrow_t));
extern void operator delete[](void *p, const std::nothrow_t &nt) throw()
			__asm__ (_SYMSTR (__wrap__ZdaPvRKSt9nothrow_t));

extern void *
operator new(std::size_t sz) throw (std::bad_alloc)
{
  return (*user_data->cxx_malloc->oper_new) (sz);
}

extern void *
operator new[](std::size_t sz) throw (std::bad_alloc)
{
  return (*user_data->cxx_malloc->oper_new__) (sz);
}

extern void
operator delete(void *p) throw()
{
  (*user_data->cxx_malloc->oper_delete) (p);
}

extern void
operator delete[](void *p) throw()
{
  (*user_data->cxx_malloc->oper_delete__) (p);
}

extern void *
operator new(std::size_t sz, const std::nothrow_t &nt) throw()
{
  return (*user_data->cxx_malloc->oper_new_nt) (sz, nt);
}

extern void *
operator new[](std::size_t sz, const std::nothrow_t &nt) throw()
{
  return (*user_data->cxx_malloc->oper_new___nt) (sz, nt);
}

extern void
operator delete(void *p, const std::nothrow_t &nt) throw()
{
  (*user_data->cxx_malloc->oper_delete_nt) (p, nt);
}

extern void
operator delete[](void *p, const std::nothrow_t &nt) throw()
{
  (*user_data->cxx_malloc->oper_delete___nt) (p, nt);
}

@


1.3
log
@* fhandler.h (fhandler_cygdrive:DRVSZ): New enum.
(pdrive_buf): New place to hold information about cygdrive.
* fhandler_disk_file.cc (fhandler_cygdrive::set_drives): Store drive info in
pdrive_buf since get_win32_name() could now be too small to hold everything.
(fhandler_cygdrive::rewinddir): Reset pdrive to pdrive_buf.
(fhandler_cygdrive::closedir): Ditto.
* pipe.cc (fhandler_pipe::init): Be more defensive when referencing
get_win32_name().  Rework logic which made a copy of the POSIX path and then
never used it.
@
text
@d25 11
d38 1
a38 1
			__asm__ ("___wrap__Znwj");
d40 1
a40 1
			__asm__ ("___wrap__Znaj");
d42 1
a42 1
			__asm__ ("___wrap__ZdlPv");
d44 1
a44 1
			__asm__ ("___wrap__ZdaPv");
d46 1
a46 1
			__asm__ ("___wrap__ZnwjRKSt9nothrow_t");
d48 1
a48 1
			__asm__ ("___wrap__ZnajRKSt9nothrow_t");
d50 1
a50 1
			__asm__ ("___wrap__ZdlPvRKSt9nothrow_t");
d52 1
a52 1
			__asm__ ("___wrap__ZdaPvRKSt9nothrow_t");
@


1.3.8.1
log
@	* include/cygwin/config.h (__SYMBOL_PREFIX): Define.
	(_SYMSTR): Define.
	* child_info.h (spawn_info): Use _SYMSTR macro to define assembler
	symbol.
	(fork_info): Ditto.
	* libstdcxx_wrapper.cc: Ditto, throughout.
	* winsup.h (dll_crt0): Ditto.
	* include/cygwin/time.h (daylight): Ditto.
	(timezone): Ditto.
	* lib/_cygwin_crt0_common.cc: Ditto, throughout.
@
text
@d27 1
a27 1
			__asm__ (_SYMSTR (__wrap__Znwj));
d29 1
a29 1
			__asm__ (_SYMSTR (__wrap__Znaj));
d31 1
a31 1
			__asm__ (_SYMSTR (__wrap__ZdlPv));
d33 1
a33 1
			__asm__ (_SYMSTR (__wrap__ZdaPv));
d35 1
a35 1
			__asm__ (_SYMSTR (__wrap__ZnwjRKSt9nothrow_t));
d37 1
a37 1
			__asm__ (_SYMSTR (__wrap__ZnajRKSt9nothrow_t));
d39 1
a39 1
			__asm__ (_SYMSTR (__wrap__ZdlPvRKSt9nothrow_t));
d41 1
a41 1
			__asm__ (_SYMSTR (__wrap__ZdaPvRKSt9nothrow_t));
@


1.3.8.2
log
@* cygwin64.din: Fix mangled operator new names for size_t==long.
* libstdcxx_wrapper.cc: Ditto for x86_64.
@
text
@a24 11
#ifdef __x86_64__
#define MANGLED_ZNWX			"__wrap__Znwm"
#define MANGLED_ZNAX			"__wrap__Znam"
#define MANGLED_ZNWX_NOTHROW_T		"__wrap__ZnwmRKSt9nothrow_t"
#define MANGLED_ZNAX_NOTHROW_T		"__wrap__ZnamRKSt9nothrow_t"
#else
#define MANGLED_ZNWX			"___wrap__Znwj"
#define MANGLED_ZNAX			"___wrap__Znaj"
#define MANGLED_ZNWX_NOTHROW_T		"___wrap__ZnwjRKSt9nothrow_t"
#define MANGLED_ZNAX_NOTHROW_T		"___wrap__ZnajRKSt9nothrow_t"
#endif
d27 1
a27 1
			__asm__ (MANGLED_ZNWX);
d29 1
a29 1
			__asm__ (MANGLED_ZNAX);
d35 1
a35 1
			__asm__ (MANGLED_ZNWX_NOTHROW_T);
d37 1
a37 1
			__asm__ (MANGLED_ZNAX_NOTHROW_T);
@


1.2
log
@
	* libstdcxx_wrapper.cc (operator delete):  Remove stray space in
	asm name.
@
text
@d79 1
a79 1
extern void 
d85 1
a85 1
extern void 
@


1.1
log
@winsup/ChangeLog:

	* Makefile.common (COMPILE_CXX): Add support for per-file overrides
	to exclude $(nostdinc) and $(nostdincxx) from compiler flags.
	(COMPILE_CC): Likewise for $(nostdinc).

winsup/cygwin/ChangeLog:

	* Makefile.in (DLL_OFILES): Add libstdcxx_wrapper.o
	(libstdcxx_wrapper_CFLAGS): Add flags for new module.
	(_cygwin_crt0_common_STDINCFLAGS): Define per-file override.
	(libstdcxx_wrapper_STDINCFLAGS, cxx_STDINCFLAGS): Likewise.
	* cxx.cc: Include "cygwin-cxx.h".
	(operator new): Tweak prototype for full standards compliance.
	(operator new[]): Likewise.
	(operator new (nothrow)): New fallback function.
	(operator new[] (nothrow), operator delete (nothrow),
	operator delete[] (nothrow)): Likewise.
	(default_cygwin_cxx_malloc): New struct of pointers to the above,
	for final last-resort fallback default.
	* cygwin-cxx.h: New file.
	(struct per_process_cxx_malloc): Define.
	(default_cygwin_cxx_malloc): Declare extern.
	* cygwin.din (__wrap__ZdaPv): Export new wrapper.
	(__wrap__ZdaPvRKSt9nothrow_t, __wrap__ZdlPv,
	__wrap__ZdlPvRKSt9nothrow_t, __wrap__Znaj,
	__wrap__ZnajRKSt9nothrow_t, __wrap__Znwj,
	__wrap__ZnwjRKSt9nothrow_t): Likewise.
	* globals.cc (__cygwin_user_data): Init newly-repurposed 'forkee'
	field (now 'cxx_malloc') to point to default_cygwin_cxx_malloc.
	* libstdcxx_wrapper.cc: New file.
	(__wrap__ZdaPv, __wrap__ZdaPvRKSt9nothrow_t, __wrap__ZdlPv,
	__wrap__ZdlPvRKSt9nothrow_t, __wrap__Znaj,
	__wrap__ZnajRKSt9nothrow_t, __wrap__Znwj,
	__wrap__ZnwjRKSt9nothrow_t): Define wrapper functions for libstdc++
	malloc operators and their overrides.
	* winsup.h (default_cygwin_cxx_malloc): Declare extern.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
	* include/sys/cygwin.h (struct per_process_cxx_malloc): Forward
	declare here.
	(struct per_process::forkee): Rename and repurpose from this ...
	(struct per_process::cxx_malloc): ... to this.
	* lib/_cygwin_crt0_common.cc: Include cygwin-cxx.h.
	(WEAK): Define shorthand helper macro.
	(__cygwin_cxx_malloc): Define and populate with weak references
	to whatever libstdc++ malloc operators will be visible at final
	link time for Cygwin apps and dlls.
	(_cygwin_crt0_common): Always look up cygwin DLL's internal
	per_process data, and don't test for (impossible) failure.  Inherit
	any members of __cygwin_cxx_malloc that we don't have overrides
	for from the DLL's default and store the resulting overall set of
	overrides back into the DLL's global per_process data.
@
text
@d31 1
a31 1
			__asm__ ("___wrap__ZdlPv ");
@

