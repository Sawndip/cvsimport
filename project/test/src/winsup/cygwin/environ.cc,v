head	1.219;
access;
symbols
	cygwin-1_7_35-release:1.219
	cygwin-1_7_34-release:1.219
	cygwin-1_7_33-release:1.209.2.3
	cygwin-1_7_32-release:1.209.2.2
	cygwin-1_7_31-release:1.209.2.2
	cygwin-1_7_30-release:1.209.2.1
	cygwin-1_7_29-release:1.209.2.1
	cygwin-1_7_29-release-branchpoint:1.209.0.2
	cygwin-pre-user-db:1.209
	cygwin-1_7_28-release:1.209
	cygwin-1_7_27-release:1.209
	cygwin-1_7_26-release:1.209
	cygwin-1_7_25-release:1.208
	cygwin-1_7_24-release:1.208
	cygwin-1_7_23-release:1.208
	callout:1.208.0.2
	cygwin-1_7_22-release:1.207
	cygwin-1_7_21-release:1.207
	cygwin-1_7_20-release:1.206
	cygwin-1_7_19-release:1.206
	cygwin-64bit-postmerge:1.203
	cygwin-64bit-premerge-branch:1.202.0.2
	cygwin-64bit-premerge:1.202
	cygwin-1_7_18-release:1.202
	post-ptmalloc3:1.200.2.3
	pre-ptmalloc3:1.200.2.3
	cygwin-1_7_17-release:1.200
	cygwin-64bit-branch:1.200.0.2
	cygwin-1_7_16-release:1.200
	cygwin-1_7_15-release:1.200
	cygwin-1_7_14_2-release:1.199
	cygwin-1_7_14-release:1.199
	cygwin-1_7_12-release:1.199
	cygwin-1_7_11-release:1.197
	cygwin-1_7_10-release:1.197
	signal-rewrite:1.196.0.2
	pre-notty:1.186
	cygwin-1_7_9-release:1.183
	cv-post-1_7_9:1.183.0.2
	cygwin-1_7_8-release:1.183
	cygwin-1_7_7-release:1.183
	cygwin-1_7_5-release:1.182
	cygwin-1_7_4-release:1.182
	cygwin-1_7_3-release:1.182
	cygwin-1_7_2-release:1.182
	fifo_doover3:1.182.0.2
	cygwin-1_7_1-release:1.182
	prefifo:1.180
	cv-branch-2:1.180.0.2
	pre-ripout-set_console_state_for_spawn:1.166
	EOL_registry_mounts:1.164
	preoverlapped:1.153
	drop_9x_support_start:1.151
	cr-0x5f1:1.145.0.4
	cv-branch:1.145.0.2
	pre-ptymaster-archetype:1.145
	cr-0x3b58:1.134.0.4
	cr-0x5ef:1.134.0.2
	after-mmap-privanon-noreserve:1.129
	after-mmap-revamp:1.129
	before-mmap-revamp:1.129
	cgf-more-exit-sync:1.128
	post_wait_sig_exit:1.128
	pre_wait_sig_exit:1.123
	reparent-point:1.102
	noreparent:1.102.0.2
	cr-0x5e6:1.99.0.2
	cr-0x9e:1.97.0.6
	cr-0x9d:1.97.0.4
	cgf-deleteme:1.97.0.2
	pre-sigrewrite:1.97
	corinna-01:1.96
	cr-0x9c:1.95.0.6
	cr-0x9b:1.95.0.4
	cr-0x99:1.95
	Z-emcb-cygwin_daemon:1.95.0.2
	w32api-2_2:1.90
	mingw-runtime-2_4:1.90
	pre-cgf-merge:1.95
	cgf-dev-branch:1.90.0.16
	predaemon:1.62
	cygwin_daemon_merge_HEAD:1.62
	pregp02r1:1.62.0.30
	cygnus_cvs_20020108_pre:1.62
	Z-cygwin_daemon_merge-new_HEAD:1.87
	Z-cygwin_daemon_merge_HEAD:1.87
	cygwin_daemon:1.59.0.2;
locks; strict;
comment	@// @;
expand	@o@;


1.219
date	2015.01.14.10.40.03;	author corinna;	state Exp;
branches;
next	1.218;

1.218
date	2015.01.14.10.31.14;	author corinna;	state Exp;
branches;
next	1.217;

1.217
date	2014.12.08.11.21.14;	author corinna;	state Exp;
branches;
next	1.216;

1.216
date	2014.12.06.09.54.28;	author corinna;	state Exp;
branches;
next	1.215;

1.215
date	2014.12.02.10.16.03;	author corinna;	state Exp;
branches;
next	1.214;

1.214
date	2014.10.27.11.33.53;	author corinna;	state Exp;
branches;
next	1.213;

1.213
date	2014.08.22.09.21.30;	author corinna;	state Exp;
branches;
next	1.212;

1.212
date	2014.06.23.11.43.33;	author corinna;	state Exp;
branches;
next	1.211;

1.211
date	2014.02.10.01.59.37;	author cgf;	state Exp;
branches;
next	1.210;

1.210
date	2014.02.09.20.30.24;	author cgf;	state Exp;
branches;
next	1.209;

1.209
date	2013.11.24.12.13.33;	author corinna;	state Exp;
branches
	1.209.2.1;
next	1.208;

1.208
date	2013.07.26.17.27.59;	author cgf;	state Exp;
branches
	1.208.2.1;
next	1.207;

1.207
date	2013.07.10.12.15.32;	author corinna;	state Exp;
branches;
next	1.206;

1.206
date	2013.05.24.13.32.10;	author corinna;	state Exp;
branches;
next	1.205;

1.205
date	2013.05.23.14.23.01;	author corinna;	state Exp;
branches;
next	1.204;

1.204
date	2013.04.24.10.16.12;	author corinna;	state Exp;
branches;
next	1.203;

1.203
date	2013.04.23.09.44.32;	author corinna;	state Exp;
branches;
next	1.202;

1.202
date	2013.01.21.04.34.50;	author cgf;	state Exp;
branches;
next	1.201;

1.201
date	2012.10.27.12.09.38;	author ktietz;	state Exp;
branches;
next	1.200;

1.200
date	2012.04.28.19.49.57;	author cgf;	state Exp;
branches
	1.200.2.1;
next	1.199;

1.199
date	2012.02.26.15.47.43;	author corinna;	state Exp;
branches;
next	1.198;

1.198
date	2012.02.26.14.01.32;	author corinna;	state Exp;
branches;
next	1.197;

1.197
date	2011.12.17.23.39.46;	author cgf;	state Exp;
branches;
next	1.196;

1.196
date	2011.08.21.18.45.07;	author cgf;	state Exp;
branches;
next	1.195;

1.195
date	2011.08.19.18.19.22;	author cgf;	state Exp;
branches;
next	1.194;

1.194
date	2011.07.04.18.14.31;	author cgf;	state Exp;
branches;
next	1.193;

1.193
date	2011.07.04.09.39.20;	author corinna;	state Exp;
branches;
next	1.192;

1.192
date	2011.06.10.15.06.13;	author cgf;	state Exp;
branches;
next	1.191;

1.191
date	2011.06.09.21.20.26;	author cgf;	state Exp;
branches;
next	1.190;

1.190
date	2011.06.09.19.08.22;	author cgf;	state Exp;
branches;
next	1.189;

1.189
date	2011.06.09.17.50.41;	author cgf;	state Exp;
branches;
next	1.188;

1.188
date	2011.06.08.19.51.15;	author cgf;	state Exp;
branches;
next	1.187;

1.187
date	2011.06.08.19.27.48;	author cgf;	state Exp;
branches;
next	1.186;

1.186
date	2011.05.10.10.17.30;	author corinna;	state Exp;
branches;
next	1.185;

1.185
date	2011.04.23.13.15.45;	author corinna;	state Exp;
branches;
next	1.184;

1.184
date	2011.04.19.10.02.06;	author corinna;	state Exp;
branches;
next	1.183;

1.183
date	2010.05.18.14.30.50;	author cgf;	state Exp;
branches;
next	1.182;

1.182
date	2009.11.16.20.05.49;	author ericb;	state Exp;
branches;
next	1.181;

1.181
date	2009.09.28.10.43.49;	author corinna;	state Exp;
branches;
next	1.180;

1.180
date	2009.05.14.19.49.37;	author corinna;	state Exp;
branches;
next	1.179;

1.179
date	2009.05.13.15.00.06;	author corinna;	state Exp;
branches;
next	1.178;

1.178
date	2009.04.02.17.44.01;	author corinna;	state Exp;
branches;
next	1.177;

1.177
date	2009.03.25.12.29.03;	author corinna;	state Exp;
branches;
next	1.176;

1.176
date	2009.03.24.12.18.34;	author corinna;	state Exp;
branches;
next	1.175;

1.175
date	2009.02.13.17.49.37;	author corinna;	state Exp;
branches;
next	1.174;

1.174
date	2009.01.21.17.14.37;	author corinna;	state Exp;
branches;
next	1.173;

1.173
date	2009.01.03.05.12.20;	author cgf;	state Exp;
branches;
next	1.172;

1.172
date	2008.11.26.17.21.03;	author cgf;	state Exp;
branches;
next	1.171;

1.171
date	2008.11.11.10.51.03;	author corinna;	state Exp;
branches;
next	1.170;

1.170
date	2008.11.05.11.57.44;	author corinna;	state Exp;
branches;
next	1.169;

1.169
date	2008.07.18.08.16.40;	author corinna;	state Exp;
branches;
next	1.168;

1.168
date	2008.07.16.20.20.44;	author corinna;	state Exp;
branches;
next	1.167;

1.167
date	2008.07.14.20.22.02;	author corinna;	state Exp;
branches;
next	1.166;

1.166
date	2008.04.13.16.47.21;	author corinna;	state Exp;
branches;
next	1.165;

1.165
date	2008.04.07.18.45.57;	author cgf;	state Exp;
branches;
next	1.164;

1.164
date	2008.04.01.13.22.46;	author corinna;	state Exp;
branches;
next	1.163;

1.163
date	2008.03.12.12.41.49;	author corinna;	state Exp;
branches;
next	1.162;

1.162
date	2008.03.11.11.42.00;	author corinna;	state Exp;
branches;
next	1.161;

1.161
date	2008.03.07.11.24.51;	author corinna;	state Exp;
branches;
next	1.160;

1.160
date	2008.02.25.18.32.23;	author corinna;	state Exp;
branches;
next	1.159;

1.159
date	2008.02.14.16.47.11;	author corinna;	state Exp;
branches;
next	1.158;

1.158
date	2008.02.05.17.37.10;	author corinna;	state Exp;
branches;
next	1.157;

1.157
date	2008.02.01.12.37.51;	author corinna;	state Exp;
branches;
next	1.156;

1.156
date	2008.01.31.20.26.01;	author corinna;	state Exp;
branches;
next	1.155;

1.155
date	2007.12.12.12.12.23;	author corinna;	state Exp;
branches;
next	1.154;

1.154
date	2007.11.26.21.30.49;	author cgf;	state Exp;
branches;
next	1.153;

1.153
date	2007.03.01.15.13.47;	author cgf;	state Exp;
branches;
next	1.152;

1.152
date	2007.02.23.15.15.48;	author corinna;	state Exp;
branches;
next	1.151;

1.151
date	2006.12.12.19.18.56;	author corinna;	state Exp;
branches;
next	1.150;

1.150
date	2006.12.12.18.47.25;	author corinna;	state Exp;
branches;
next	1.149;

1.149
date	2006.11.27.12.59.58;	author corinna;	state Exp;
branches;
next	1.148;

1.148
date	2006.09.07.20.42.53;	author cgf;	state Exp;
branches;
next	1.147;

1.147
date	2006.08.02.15.11.48;	author cgf;	state Exp;
branches;
next	1.146;

1.146
date	2006.08.01.18.00.44;	author cgf;	state Exp;
branches;
next	1.145;

1.145
date	2006.05.28.15.50.13;	author cgf;	state Exp;
branches
	1.145.4.1;
next	1.144;

1.144
date	2006.04.24.16.42.07;	author cgf;	state Exp;
branches;
next	1.143;

1.143
date	2006.04.21.21.34.38;	author cgf;	state Exp;
branches;
next	1.142;

1.142
date	2006.04.21.19.40.48;	author cgf;	state Exp;
branches;
next	1.141;

1.141
date	2006.04.21.19.19.31;	author cgf;	state Exp;
branches;
next	1.140;

1.140
date	2006.04.21.17.21.41;	author corinna;	state Exp;
branches;
next	1.139;

1.139
date	2006.03.22.16.42.44;	author cgf;	state Exp;
branches;
next	1.138;

1.138
date	2006.03.18.19.17.21;	author cgf;	state Exp;
branches;
next	1.137;

1.137
date	2006.03.14.19.07.36;	author cgf;	state Exp;
branches;
next	1.136;

1.136
date	2006.03.13.21.10.14;	author cgf;	state Exp;
branches;
next	1.135;

1.135
date	2006.02.05.18.18.02;	author corinna;	state Exp;
branches;
next	1.134;

1.134
date	2006.01.12.15.53.50;	author corinna;	state Exp;
branches;
next	1.133;

1.133
date	2006.01.08.20.10.51;	author cgf;	state Exp;
branches;
next	1.132;

1.132
date	2005.12.29.03.46.56;	author cgf;	state Exp;
branches;
next	1.131;

1.131
date	2005.12.05.22.30.02;	author cgf;	state Exp;
branches;
next	1.130;

1.130
date	2005.12.04.21.47.03;	author corinna;	state Exp;
branches;
next	1.129;

1.129
date	2005.11.08.16.32.09;	author cgf;	state Exp;
branches;
next	1.128;

1.128
date	2005.09.16.20.12.12;	author cgf;	state Exp;
branches;
next	1.127;

1.127
date	2005.09.16.19.58.12;	author cgf;	state Exp;
branches;
next	1.126;

1.126
date	2005.09.16.15.56.06;	author cgf;	state Exp;
branches;
next	1.125;

1.125
date	2005.09.16.14.52.32;	author cgf;	state Exp;
branches;
next	1.124;

1.124
date	2005.09.13.17.08.52;	author cgf;	state Exp;
branches;
next	1.123;

1.123
date	2005.07.06.20.04.59;	author cgf;	state Exp;
branches;
next	1.122;

1.122
date	2005.07.03.02.40.28;	author cgf;	state Exp;
branches;
next	1.121;

1.121
date	2005.06.08.15.42.58;	author cgf;	state Exp;
branches;
next	1.120;

1.120
date	2005.05.27.18.26.19;	author cgf;	state Exp;
branches;
next	1.119;

1.119
date	2005.05.22.03.54.29;	author cgf;	state Exp;
branches;
next	1.118;

1.118
date	2005.05.16.15.48.36;	author corinna;	state Exp;
branches;
next	1.117;

1.117
date	2005.05.15.12.04.13;	author corinna;	state Exp;
branches;
next	1.116;

1.116
date	2005.04.30.17.07.05;	author cgf;	state Exp;
branches;
next	1.115;

1.115
date	2005.04.27.03.09.59;	author cgf;	state Exp;
branches;
next	1.114;

1.114
date	2005.04.16.13.11.40;	author corinna;	state Exp;
branches;
next	1.113;

1.113
date	2005.04.03.13.06.41;	author corinna;	state Exp;
branches;
next	1.112;

1.112
date	2005.03.30.22.06.32;	author cgf;	state Exp;
branches;
next	1.111;

1.111
date	2005.03.30.21.35.31;	author cgf;	state Exp;
branches;
next	1.110;

1.110
date	2005.03.30.15.54.28;	author cgf;	state Exp;
branches;
next	1.109;

1.109
date	2005.01.31.20.02.36;	author corinna;	state Exp;
branches;
next	1.108;

1.108
date	2005.01.12.22.40.45;	author cgf;	state Exp;
branches;
next	1.107;

1.107
date	2005.01.11.12.45.08;	author corinna;	state Exp;
branches;
next	1.106;

1.106
date	2005.01.11.12.42.35;	author corinna;	state Exp;
branches;
next	1.105;

1.105
date	2004.12.03.23.49.06;	author cgf;	state Exp;
branches;
next	1.104;

1.104
date	2004.12.03.02.00.37;	author phumblet;	state Exp;
branches;
next	1.103;

1.103
date	2004.11.26.04.21.47;	author cgf;	state Exp;
branches;
next	1.102;

1.102
date	2004.10.07.21.28.57;	author corinna;	state Exp;
branches;
next	1.101;

1.101
date	2004.08.21.15.50.33;	author corinna;	state Exp;
branches;
next	1.100;

1.100
date	2004.05.28.19.50.05;	author cgf;	state Exp;
branches;
next	1.99;

1.99
date	2004.05.09.15.17.15;	author phumblet;	state Exp;
branches;
next	1.98;

1.98
date	2004.05.08.02.55.38;	author cgf;	state Exp;
branches;
next	1.97;

1.97
date	2003.11.14.23.40.05;	author rbcollins;	state Exp;
branches;
next	1.96;

1.96
date	2003.09.25.00.37.16;	author cgf;	state Exp;
branches;
next	1.95;

1.95
date	2003.08.25.18.21.07;	author cgf;	state Exp;
branches;
next	1.94;

1.94
date	2003.07.24.19.33.13;	author cgf;	state Exp;
branches;
next	1.93;

1.93
date	2003.07.02.03.16.00;	author cgf;	state Exp;
branches;
next	1.92;

1.92
date	2003.06.16.03.24.10;	author cgf;	state Exp;
branches;
next	1.91;

1.91
date	2003.02.13.15.15.32;	author cgf;	state Exp;
branches;
next	1.90;

1.90
date	2002.09.30.03.05.13;	author cgf;	state Exp;
branches
	1.90.16.1;
next	1.89;

1.89
date	2002.09.30.02.51.21;	author cgf;	state Exp;
branches;
next	1.88;

1.88
date	2002.09.23.00.31.30;	author cgf;	state Exp;
branches;
next	1.87;

1.87
date	2002.09.19.03.30.20;	author cgf;	state Exp;
branches;
next	1.86;

1.86
date	2002.08.08.18.02.09;	author cgf;	state Exp;
branches;
next	1.85;

1.85
date	2002.07.01.02.11.30;	author cgf;	state Exp;
branches;
next	1.84;

1.84
date	2002.06.29.17.26.13;	author cgf;	state Exp;
branches;
next	1.83;

1.83
date	2002.06.29.06.40.19;	author cgf;	state Exp;
branches;
next	1.82;

1.82
date	2002.06.29.02.36.08;	author cgf;	state Exp;
branches;
next	1.81;

1.81
date	2002.06.27.20.44.27;	author cgf;	state Exp;
branches;
next	1.80;

1.80
date	2002.06.26.19.39.05;	author cgf;	state Exp;
branches;
next	1.79;

1.79
date	2002.06.26.05.29.41;	author cgf;	state Exp;
branches;
next	1.78;

1.78
date	2002.06.21.05.01.16;	author cgf;	state Exp;
branches;
next	1.77;

1.77
date	2002.06.19.15.27.24;	author cgf;	state Exp;
branches;
next	1.76;

1.76
date	2002.06.16.23.34.43;	author cgf;	state Exp;
branches;
next	1.75;

1.75
date	2002.06.16.05.45.37;	author cgf;	state Exp;
branches;
next	1.74;

1.74
date	2002.06.15.21.59.32;	author cgf;	state Exp;
branches;
next	1.73;

1.73
date	2002.06.14.21.46.18;	author cgf;	state Exp;
branches;
next	1.72;

1.72
date	2002.06.14.18.01.20;	author cgf;	state Exp;
branches;
next	1.71;

1.71
date	2002.06.14.14.08.07;	author corinna;	state Exp;
branches;
next	1.70;

1.70
date	2002.06.13.16.30.18;	author corinna;	state Exp;
branches;
next	1.69;

1.69
date	2002.06.13.01.28.51;	author cgf;	state Exp;
branches;
next	1.68;

1.68
date	2002.06.12.05.13.54;	author cgf;	state Exp;
branches;
next	1.67;

1.67
date	2002.06.05.04.01.42;	author cgf;	state Exp;
branches;
next	1.66;

1.66
date	2002.06.05.01.42.28;	author cgf;	state Exp;
branches;
next	1.65;

1.65
date	2002.06.02.06.07.00;	author cgf;	state Exp;
branches;
next	1.64;

1.64
date	2002.05.25.02.22.50;	author cgf;	state Exp;
branches;
next	1.63;

1.63
date	2002.02.28.14.25.53;	author rbcollins;	state Exp;
branches;
next	1.62;

1.62
date	2001.10.31.16.30.46;	author cgf;	state Exp;
branches;
next	1.61;

1.61
date	2001.10.03.03.49.26;	author cgf;	state Exp;
branches;
next	1.60;

1.60
date	2001.09.30.21.37.53;	author cgf;	state Exp;
branches;
next	1.59;

1.59
date	2001.09.12.17.46.35;	author corinna;	state Exp;
branches
	1.59.2.1;
next	1.58;

1.58
date	2001.09.06.05.17.22;	author cgf;	state Exp;
branches;
next	1.57;

1.57
date	2001.09.06.04.41.59;	author cgf;	state Exp;
branches;
next	1.56;

1.56
date	2001.08.04.21.10.52;	author cgf;	state Exp;
branches;
next	1.55;

1.55
date	2001.07.26.19.22.23;	author cgf;	state Exp;
branches;
next	1.54;

1.54
date	2001.06.28.02.19.57;	author cgf;	state Exp;
branches;
next	1.53;

1.53
date	2001.06.26.14.47.48;	author cgf;	state Exp;
branches;
next	1.52;

1.52
date	2001.06.24.22.26.50;	author cgf;	state Exp;
branches;
next	1.51;

1.51
date	2001.06.12.11.31.05;	author duda;	state Exp;
branches;
next	1.50;

1.50
date	2001.05.11.03.27.22;	author cgf;	state Exp;
branches;
next	1.49;

1.49
date	2001.05.04.20.39.38;	author cgf;	state Exp;
branches;
next	1.48;

1.48
date	2001.04.30.21.19.42;	author corinna;	state Exp;
branches;
next	1.47;

1.47
date	2001.04.18.21.10.12;	author cgf;	state Exp;
branches;
next	1.46;

1.46
date	2001.04.12.21.21.37;	author corinna;	state Exp;
branches;
next	1.45;

1.45
date	2001.03.26.01.16.11;	author cgf;	state Exp;
branches;
next	1.44;

1.44
date	2001.03.18.21.11.25;	author cgf;	state Exp;
branches;
next	1.43;

1.43
date	2001.03.14.15.32.49;	author corinna;	state Exp;
branches;
next	1.42;

1.42
date	2001.03.05.06.28.23;	author cgf;	state Exp;
branches;
next	1.41;

1.41
date	2001.03.02.11.41.09;	author corinna;	state Exp;
branches;
next	1.40;

1.40
date	2001.01.08.04.02.01;	author cgf;	state Exp;
branches;
next	1.39;

1.39
date	2000.12.19.19.52.57;	author corinna;	state Exp;
branches;
next	1.38;

1.38
date	2000.12.10.00.45.11;	author cgf;	state Exp;
branches;
next	1.37;

1.37
date	2000.11.15.06.27.48;	author cgf;	state Exp;
branches;
next	1.36;

1.36
date	2000.11.11.05.36.34;	author cgf;	state Exp;
branches;
next	1.35;

1.35
date	2000.11.08.20.36.36;	author cgf;	state Exp;
branches;
next	1.34;

1.34
date	2000.11.07.19.00.02;	author cgf;	state Exp;
branches;
next	1.33;

1.33
date	2000.10.28.05.41.43;	author cgf;	state Exp;
branches;
next	1.32;

1.32
date	2000.10.23.03.35.50;	author cgf;	state Exp;
branches;
next	1.31;

1.31
date	2000.10.19.03.12.44;	author dj;	state Exp;
branches;
next	1.30;

1.30
date	2000.10.19.00.45.39;	author dj;	state Exp;
branches;
next	1.29;

1.29
date	2000.10.18.04.53.37;	author cgf;	state Exp;
branches;
next	1.28;

1.28
date	2000.10.16.23.55.57;	author cgf;	state Exp;
branches;
next	1.27;

1.27
date	2000.09.25.16.36.12;	author cgf;	state Exp;
branches;
next	1.26;

1.26
date	2000.09.08.02.56.54;	author cgf;	state Exp;
branches;
next	1.25;

1.25
date	2000.09.03.04.45.52;	author cgf;	state Exp;
branches;
next	1.24;

1.24
date	2000.09.03.04.16.35;	author cgf;	state Exp;
branches;
next	1.23;

1.23
date	2000.08.24.17.54.43;	author cgf;	state Exp;
branches;
next	1.22;

1.22
date	2000.08.22.05.10.20;	author cgf;	state Exp;
branches;
next	1.21;

1.21
date	2000.08.22.03.58.47;	author cgf;	state Exp;
branches;
next	1.20;

1.20
date	2000.08.12.05.35.42;	author cgf;	state Exp;
branches;
next	1.19;

1.19
date	2000.08.02.16.28.17;	author dj;	state Exp;
branches;
next	1.18;

1.18
date	2000.07.29.16.24.37;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2000.07.29.16.01.23;	author cgf;	state Exp;
branches
	1.17.2.1;
next	1.16;

1.16
date	2000.07.26.18.51.14;	author corinna;	state Exp;
branches;
next	1.15;

1.15
date	2000.07.26.01.44.16;	author cgf;	state Exp;
branches;
next	1.14;

1.14
date	2000.07.17.19.18.21;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2000.07.17.15.59.27;	author corinna;	state Exp;
branches;
next	1.12;

1.12
date	2000.07.16.20.06.11;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2000.07.15.02.48.11;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2000.07.01.03.51.55;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2000.06.15.03.50.03;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2000.05.30.00.38.51;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2000.05.22.21.19.36;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2000.04.26.05.13.32;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2000.03.25.05.25.27;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.09.21.04.05;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.21.05.20.37;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.21.03.13.24;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.209.2.1
date	2014.02.19.18.36.34;	author cgf;	state Exp;
branches;
next	1.209.2.2;

1.209.2.2
date	2014.07.15.14.34.37;	author corinna;	state Exp;
branches;
next	1.209.2.3;

1.209.2.3
date	2014.11.13.12.52.55;	author corinna;	state Exp;
branches;
next	;

1.208.2.1
date	2013.07.31.14.50.08;	author cgf;	state Exp;
branches;
next	;

1.200.2.1
date	2012.10.27.12.11.51;	author ktietz;	state Exp;
branches;
next	1.200.2.2;

1.200.2.2
date	2012.12.10.11.45.46;	author corinna;	state Exp;
branches;
next	1.200.2.3;

1.200.2.3
date	2013.01.21.13.52.04;	author corinna;	state Exp;
branches;
next	1.200.2.4;

1.200.2.4
date	2013.03.05.14.29.30;	author corinna;	state Exp;
branches;
next	;

1.145.4.1
date	2006.10.16.12.46.34;	author corinna;	state Exp;
branches;
next	;

1.90.16.1
date	2003.02.14.03.03.27;	author cgf;	state Exp;
branches;
next	1.90.16.2;

1.90.16.2
date	2003.07.06.05.10.43;	author cgf;	state Exp;
branches;
next	1.90.16.3;

1.90.16.3
date	2003.08.06.03.58.57;	author cgf;	state Exp;
branches;
next	1.90.16.4;

1.90.16.4
date	2003.08.27.20.19.55;	author cgf;	state Exp;
branches;
next	;

1.59.2.1
date	2001.10.02.12.09.53;	author rbcollins;	state Exp;
branches;
next	1.59.2.2;

1.59.2.2
date	2001.10.02.13.26.58;	author rbcollins;	state Exp;
branches;
next	1.59.2.3;

1.59.2.3
date	2002.01.04.03.56.07;	author rbcollins;	state Exp;
branches;
next	1.59.2.4;

1.59.2.4
date	2002.06.13.14.34.02;	author rbcollins;	state Exp;
branches;
next	1.59.2.5;

1.59.2.5
date	2002.06.15.10.26.31;	author rbcollins;	state Exp;
branches;
next	1.59.2.6;

1.59.2.6
date	2002.06.18.00.17.06;	author scottc;	state Exp;
branches;
next	1.59.2.7;

1.59.2.7
date	2002.06.19.20.58.58;	author scottc;	state Exp;
branches;
next	1.59.2.8;

1.59.2.8
date	2002.06.21.12.18.51;	author scottc;	state Exp;
branches;
next	1.59.2.9;

1.59.2.9
date	2002.06.27.11.30.13;	author scottc;	state Exp;
branches;
next	1.59.2.10;

1.59.2.10
date	2002.06.28.18.15.47;	author scottc;	state Exp;
branches;
next	1.59.2.11;

1.59.2.11
date	2002.06.29.18.25.44;	author scottc;	state Exp;
branches;
next	1.59.2.12;

1.59.2.12
date	2002.07.01.13.53.39;	author scottc;	state Exp;
branches;
next	1.59.2.13;

1.59.2.13
date	2002.08.12.14.06.34;	author scottc;	state Exp;
branches;
next	1.59.2.14;

1.59.2.14
date	2002.09.19.08.11.17;	author scottc;	state Exp;
branches;
next	;

1.17.2.1
date	2000.08.04.00.48.23;	author cgf;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.219
log
@	* environ.cc (renv_arr): Drop variables not usually in a Windows
	environment and all variables being uppercase anyway.  But keep
	TMP and TEMP for paranoia.
@
text
@/* environ.cc: Cygwin-adopted functions from newlib to manipulate
   process's environment.

   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
   2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015 Red Hat, Inc.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include "winsup.h"
#include <userenv.h>
#include <stdlib.h>
#include <wchar.h>
#include <wctype.h>
#include <ctype.h>
#include <locale.h>
#include <assert.h>
#include <sys/param.h>
#include <cygwin/version.h>
#include "pinfo.h"
#include "perprocess.h"
#include "path.h"
#include "cygerrno.h"
#include "fhandler.h"
#include "dtable.h"
#include "cygheap.h"
#include "cygtls.h"
#include "tls_pbuf.h"
#include "registry.h"
#include "environ.h"
#include "child_info.h"
#include "shared_info.h"
#include "ntdll.h"

static char **lastenviron;

/* Parse CYGWIN options */

static NO_COPY bool export_settings = false;

enum settings
  {
    isfunc,
    setdword,
    setbool,
    setbit
  };

/* When BUF is:
   null or empty: disables globbing
   "ignorecase": enables case-insensitive globbing
   anything else: enables case-sensitive globbing */
static void
glob_init (const char *buf)
{
  if (!buf || !*buf)
    {
      allow_glob = false;
      ignore_case_with_glob = false;
    }
  else if (ascii_strncasematch (buf, "ignorecase", 10))
    {
      allow_glob = true;
      ignore_case_with_glob = true;
    }
  else
    {
      allow_glob = true;
      ignore_case_with_glob = false;
    }
}

static void
set_proc_retry (const char *buf)
{
  child_info::retry_count = strtoul (buf, NULL, 0);
}

static void
set_winsymlinks (const char *buf)
{
  if (!buf || !*buf)
    allow_winsymlinks = WSYM_lnk;
  else if (ascii_strncasematch (buf, "lnk", 3))
    allow_winsymlinks = WSYM_lnk;
  /* Make sure to try native symlinks only on systems supporting them. */
  else if (ascii_strncasematch (buf, "native", 6))
    {
      if (wincap.max_sys_priv () < SE_CREATE_SYMBOLIC_LINK_PRIVILEGE)
	{
	  if (!user_shared->warned_nonativesyms)
	    {
	      small_printf ("\"winsymlinks:%s\" option detected in CYGWIN environment variable.\n"
			    "Native symlinks are not supported on Windows versions prior to\n"
			    "Windows Vista/Server 2008.  This option will be ignored.\n", buf);
	      user_shared->warned_nonativesyms = 1;
	    }
	}
      else
	allow_winsymlinks = ascii_strcasematch (buf + 6, "strict")
			    ? WSYM_nativestrict : WSYM_native;
    }
}

/* The structure below is used to set up an array which is used to
   parse the CYGWIN environment variable or, if enabled, options from
   the registry.  */
static struct parse_thing
  {
    const char *name;
    union parse_setting
      {
	bool *b;
	DWORD *x;
	int *i;
	void (*func)(const char *);
      } setting;

    enum settings disposition;
    char *remember;
    union parse_values
      {
	DWORD i;
	const char *s;
      } values[2];
  } known[] NO_COPY =
{
  {"detect_bloda", {&detect_bloda}, setbool, NULL, {{false}, {true}}},
  {"dosfilewarning", {&dos_file_warning}, setbool, NULL, {{false}, {true}}},
  {"error_start", {func: error_start_init}, isfunc, NULL, {{0}, {0}}},
  {"export", {&export_settings}, setbool, NULL, {{false}, {true}}},
  {"glob", {func: glob_init}, isfunc, NULL, {{0}, {s: "normal"}}},
  {"pipe_byte", {&pipe_byte}, setbool, NULL, {{false}, {true}}},
  {"proc_retry", {func: set_proc_retry}, isfunc, NULL, {{0}, {5}}},
  {"reset_com", {&reset_com}, setbool, NULL, {{false}, {true}}},
  {"wincmdln", {&wincmdln}, setbool, NULL, {{false}, {true}}},
  {"winsymlinks", {func: set_winsymlinks}, isfunc, NULL, {{0}, {0}}},
  {NULL, {0}, setdword, 0, {{0}, {0}}}
};

/* Return a possibly-quoted token.
   Returns NULL when no more tokens available.  */
static char *
strbrk(char *&buf)
{
  buf += strspn(buf, " \t");
  if (!*buf)
    return NULL;
  char *tok = buf;
  char *sep = buf + strcspn(buf, " \t");
  char *quotestart = strchr(buf, '"');
  if (!quotestart || quotestart > sep)
    {
      buf = sep + !!*sep;	/* Don't point beyond EOS */
      quotestart = NULL;
    }
  else
    {
      char *quote = quotestart;
      sep = NULL;
      while (!sep)
	{
	  char *clquote = strchr (quote + 1, '"');
	  if (!clquote)
	    sep = strchr (quote, '\0');
	  else if (clquote[-1] != '\\')
	    sep = clquote;
	  else
	    {
	      memmove (clquote - 1, clquote, 1 + strchr (clquote, '\0') - clquote);
	      quote = clquote - 1;
	    }
	}
      buf = sep + 1;
      memmove (quotestart, quotestart + 1, sep - quotestart);
      sep--;
    }
  *sep = '\0';
  return tok;
}


/* Parse a string of the form "something=stuff somethingelse=more-stuff",
   silently ignoring unknown "somethings".  */
static void __stdcall
parse_options (const char *inbuf)
{
  int istrue;
  parse_thing *k;

  if (inbuf == NULL)
    {
      tmp_pathbuf tp;
      char *newbuf = tp.c_get ();
      newbuf[0] = '\0';
      for (k = known; k->name != NULL; k++)
	if (k->remember)
	  {
	    strcat (strcat (newbuf, " "), k->remember);
	    free (k->remember);
	    k->remember = NULL;
	  }

      if (export_settings)
	{
	  debug_printf ("%s", newbuf + 1);
	  setenv ("CYGWIN", newbuf + 1, 1);
	}
      return;
    }

  char *buf = strcpy ((char *) alloca (strlen (inbuf) + 1), inbuf);

  while (char *p = strbrk (buf))
    {
      char *keyword_here = p;
      if (!(istrue = !ascii_strncasematch (p, "no", 2)))
	p += 2;
      else if (!(istrue = *p != '-'))
	p++;

      char ch, *eq;
      if ((eq = strchr (p, '=')) != NULL || (eq = strchr (p, ':')) != NULL)
	ch = *eq, *eq++ = '\0';
      else
	ch = 0;

      for (parse_thing *k = known; k->name != NULL; k++)
	if (ascii_strcasematch (p, k->name))
	  {
	    switch (k->disposition)
	      {
	      case isfunc:
		k->setting.func ((!eq || !istrue) ?
		  k->values[istrue].s : eq);
		debug_printf ("%s (called func)", k->name);
		break;
	      case setdword:
		if (!istrue || !eq)
		  *k->setting.x = k->values[istrue].i;
		else
		  *k->setting.x = strtol (eq, NULL, 0);
		debug_printf ("%s %u", k->name, *k->setting.x);
		break;
	      case setbool:
		if (!istrue || !eq)
		  *k->setting.b = k->values[istrue].i;
		else
		  *k->setting.b = !!strtol (eq, NULL, 0);
		debug_printf ("%s%s", *k->setting.b ? "" : "no", k->name);
		break;
	      case setbit:
		*k->setting.x &= ~k->values[istrue].i;
		if (istrue || (eq && strtol (eq, NULL, 0)))
		  *k->setting.x |= k->values[istrue].i;
		debug_printf ("%s %x", k->name, *k->setting.x);
		break;
	      }

	    if (eq)
	      *--eq = ch;

	    int n = eq - p;
	    p = strdup (keyword_here);
	    if (n > 0)
	      p[n] = ':';
	    k->remember = p;
	    break;
	  }
      }
  debug_printf ("returning");
}

/* Helper functions for the below environment variables which have to
   be converted Win32<->POSIX. */
extern "C" ssize_t env_PATH_to_posix (const void *, void *, size_t);

ssize_t
env_plist_to_posix (const void *win32, void *posix, size_t size)
{
  return cygwin_conv_path_list (CCP_WIN_A_TO_POSIX | CCP_RELATIVE, win32,
				posix, size);
}

ssize_t
env_plist_to_win32 (const void *posix, void *win32, size_t size)
{
  return cygwin_conv_path_list (CCP_POSIX_TO_WIN_A | CCP_RELATIVE, posix,
				win32, size);
}

ssize_t
env_path_to_posix (const void *win32, void *posix, size_t size)
{
  return cygwin_conv_path (CCP_WIN_A_TO_POSIX | CCP_ABSOLUTE, win32,
			   posix, size);
}

ssize_t
env_path_to_win32 (const void *posix, void *win32, size_t size)
{
  return cygwin_conv_path (CCP_POSIX_TO_WIN_A | CCP_ABSOLUTE, posix,
			   win32, size);
}

#define ENVMALLOC \
  (CYGWIN_VERSION_DLL_MAKE_COMBINED (user_data->api_major, user_data->api_minor) \
	  <= CYGWIN_VERSION_DLL_MALLOC_ENV)

#define NL(x) x, (sizeof (x) - 1)
/* List of names which are converted from dos to unix
   on the way in and back again on the way out.

   PATH needs to be here because CreateProcess uses it and gdb uses
   CreateProcess.  HOME is here because most shells use it and would be
   confused by Windows style path names.  */
static win_env conv_envvars[] =
  {
    {NL ("PATH="), NULL, NULL, env_PATH_to_posix, env_plist_to_win32, true},
    {NL ("HOME="), NULL, NULL, env_path_to_posix, env_path_to_win32, false},
    {NL ("LD_LIBRARY_PATH="), NULL, NULL,
			       env_plist_to_posix, env_plist_to_win32, true},
    {NL ("TMPDIR="), NULL, NULL, env_path_to_posix, env_path_to_win32, false},
    {NL ("TMP="), NULL, NULL, env_path_to_posix, env_path_to_win32, false},
    {NL ("TEMP="), NULL, NULL, env_path_to_posix, env_path_to_win32, false},
    {NULL, 0, NULL, NULL, 0, 0}
  };

#define WC ((unsigned char) 1)
/* Note:  You *must* fill in this array setting the ordinal value of the first
   character of the above environment variable names to 1.
   This table is intended to speed up lookup of these variables. */

static const unsigned char conv_start_chars[256] =
  {
    0,        0,        0,        0,        0,        0,        0,        0,
    0,        0,        0,        0,        0,        0,        0,        0,
    0,        0,        0,        0,        0,        0,        0,        0,
    0,        0,        0,        0,        0,        0,        0,        0,
    0,        0,        0,        0,        0,        0,        0,        0,
    0,        0,        0,        0,        0,        0,        0,        0,
    0,        0,        0,        0,        0,        0,        0,        0,
    0,        0,        0,        0,        0,        0,        0,        0,
/*            A         B         C         D         E         F         G */
    0,        0,        0,        0,        0,        0,        0,        0,
    /*  72 */
/*  H         I         J         K         L         M         N         O */
    WC,       0,        0,        0,        WC,       0,        0,        0,
    /*  80 */
/*  P         Q         R         S         T         U         V         W */
    WC,       0,        0,        0,        WC,       0,        0,        0,
    /*  88 */
/*  x         Y         Z                                                   */
    0,        0,        0,        0,        0,        0,        0,        0,
    /*  96 */
/*            a         b         c         d         e         f         g */
    0,        0,        0,        0,        0,        0,        0,        0,
    /* 104 */
/*  h         i         j         k         l         m         n         o */
    WC,       0,        0,        0,        WC,       0,        0,        0,
    /* 112 */
/*  p         q         r         s         t         u         v         w */
    WC,       0,        0,        0,        WC,       0,        0,        0,
  };

static inline char
match_first_char (const char *s, unsigned char m)
{
  return conv_start_chars[(unsigned) *s] & m;
}

struct win_env&
win_env::operator = (struct win_env& x)
{
  name = x.name;
  namelen = x.namelen;
  toposix = x.toposix;
  towin32 = x.towin32;
  immediate = false;
  return *this;
}

win_env::~win_env ()
{
  if (posix)
    free (posix);
  if (native)
    free (native);
}

void
win_env::add_cache (const char *in_posix, const char *in_native)
{
  MALLOC_CHECK;
  posix = (char *) realloc (posix, strlen (in_posix) + 1);
  strcpy (posix, in_posix);
  if (in_native)
    {
      native = (char *) realloc (native, namelen + 1 + strlen (in_native));
      stpcpy (stpcpy (native, name), in_native);
    }
  else
    {
      tmp_pathbuf tp;
      char *buf = tp.c_get ();
      towin32 (in_posix, buf, NT_MAX_PATH);
      native = (char *) realloc (native, namelen + 1 + strlen (buf));
      stpcpy (stpcpy (native, name), buf);
    }
  MALLOC_CHECK;
  if (immediate && cygwin_finished_initializing)
    {
      wchar_t s[sys_mbstowcs (NULL, 0, native) + 1];
      sys_mbstowcs (s, sizeof s, native);
      /* Hack. Relies on affected variables only having ASCII names. */
      s[namelen - 1] = L'\0';
      SetEnvironmentVariableW (s, s + namelen);
    }
  debug_printf ("posix %s", posix);
  debug_printf ("native %s", native);
}


/* Check for a "special" environment variable name.  *env is the pointer
  to the beginning of the environment variable name.  *in_posix is any
  known posix value for the environment variable. Returns a pointer to
  the appropriate conversion structure.  */
win_env * __reg3
getwinenv (const char *env, const char *in_posix, win_env *temp)
{
  if (!match_first_char (env, WC))
    return NULL;

  for (int i = 0; conv_envvars[i].name != NULL; i++)
    if (strncmp (env, conv_envvars[i].name, conv_envvars[i].namelen) == 0)
      {
	win_env *we = conv_envvars + i;
	const char *val;
	if (!cur_environ () || !(val = in_posix ?: getenv (we->name)))
	  debug_printf ("can't set native for %s since no environ yet",
			we->name);
	else if (!we->posix || strcmp (val, we->posix) != 0)
	  {
	    if (temp)
	      {
		*temp = *we;
		we = temp;
	      }
	    we->add_cache (val);
	  }
	return we;
      }
  return NULL;
}

/* Convert windows path specs to POSIX, if appropriate.
 */
inline static void
posify_maybe (char **here, const char *value, char *outenv)
{
  char *src = *here;
  win_env *conv;

  if (!(conv = getwinenv (src)))
    return;

  int len = strcspn (src, "=") + 1;

  /* Turn all the items from c:<foo>;<bar> into their
     mounted equivalents - if there is one.  */

  memcpy (outenv, src, len);
  char *newvalue = outenv + len;
  if (!conv->toposix (value, newvalue, NT_MAX_PATH - len)
      || _impure_ptr->_errno != EIDRM)
    conv->add_cache (newvalue, *value != '/' ? value : NULL);
  else
    {
      /* The conversion routine removed elements from a path list so we have
	 to recalculate the windows path to remove elements there, too. */
      tmp_pathbuf tp;
      char *cleanvalue = tp.c_get ();
      conv->towin32 (newvalue, cleanvalue, NT_MAX_PATH);
      conv->add_cache (newvalue, cleanvalue);
    }

  debug_printf ("env var converted to %s", outenv);
  *here = strdup (outenv);
  free (src);
  MALLOC_CHECK;
}

/* Returns pointer to value associated with name, if any, else NULL.
  Sets offset to be the offset of the name/value combination in the
  environment array, for use by setenv(3) and unsetenv(3).
  Explicitly removes '=' in argument name.  */

static char *
my_findenv (const char *name, int *offset)
{
  register int len;
  register char **p;
  const char *c;

  c = name;
  len = 0;
  while (*c && *c != '=')
    {
      c++;
      len++;
    }

  for (p = cur_environ (); *p; ++p)
    if (!strncmp (*p, name, len))
      if (*(c = *p + len) == '=')
	{
	  *offset = p - cur_environ ();
	  return (char *) (++c);
	}
  MALLOC_CHECK;
  return NULL;
}

/* Primitive getenv before the environment is built.  */

static char *
getearly (const char * name, int *)
{
  char *ret;
  char **ptr;
  int len;

  if (spawn_info && (ptr = spawn_info->moreinfo->envp))
    {
      len = strlen (name);
      for (; *ptr; ptr++)
	if (strncasematch (name, *ptr, len) && (*ptr)[len] == '=')
	  return *ptr + len + 1;
    }
  else if ((len = GetEnvironmentVariableA (name, NULL, 0))
	   && (ret = (char *) cmalloc_abort (HEAP_2_STR, len))
	   && GetEnvironmentVariableA (name, ret, len))
    return ret;

  return NULL;
}

static char * (*findenv_func)(const char *, int *) = getearly;

/* Returns ptr to value associated with name, if any, else NULL.  */

extern "C" char *
getenv (const char *name)
{
  int offset;
  return findenv_func (name, &offset);
}

/* This function is required so that newlib uses the same environment
   as Cygwin. */
extern "C" char *
_getenv_r (struct _reent *, const char *name)
{
  int offset;
  return findenv_func (name, &offset);
}

static int __stdcall
envsize (const char * const *in_envp)
{
  const char * const *envp;
  for (envp = in_envp; *envp; envp++)
    continue;
  return (1 + envp - in_envp) * sizeof (const char *);
}

/* Takes similar arguments to setenv except that overwrite is
   either -1, 0, or 1.  0 or 1 signify that the function should
   perform similarly to setenv.  Otherwise putenv is assumed. */
static int __stdcall
_addenv (const char *name, const char *value, int overwrite)
{
  int issetenv = overwrite >= 0;
  int offset;
  char *p;

  unsigned int valuelen = strlen (value);
  if ((p = my_findenv (name, &offset)))
    {				/* Already exists. */
      if (!overwrite)		/* Ok to overwrite? */
	return 0;		/* No.  Wanted to add new value.  FIXME: Right return value? */

      /* We've found the offset into environ.  If this is a setenv call and
	 there is room in the current environment entry then just overwrite it.
	 Otherwise handle this case below. */
      if (issetenv && strlen (p) >= valuelen)
	{
	  strcpy (p, value);
	  return 0;
	}
    }
  else
    {				/* Create new slot. */
      int sz = envsize (cur_environ ());
      int allocsz = sz + (2 * sizeof (char *));

      offset = (sz - 1) / sizeof (char *);

      /* Allocate space for additional element plus terminating NULL. */
      if (cur_environ () == lastenviron)
	lastenviron = __cygwin_environ = (char **) realloc (cur_environ (),
							    allocsz);
      else if ((lastenviron = (char **) malloc (allocsz)) != NULL)
	__cygwin_environ = (char **) memcpy ((char **) lastenviron,
					     __cygwin_environ, sz);

      if (!__cygwin_environ)
	{
#ifdef DEBUGGING
	  try_to_debug ();
#endif
	  return -1;				/* Oops.  No more memory. */
	}

      __cygwin_environ[offset + 1] = NULL;	/* NULL terminate. */
      update_envptrs ();	/* Update any local copies of 'environ'. */
    }

  char *envhere;
  if (!issetenv)
    /* Not setenv. Just overwrite existing. */
    envhere = cur_environ ()[offset] = (char *) (ENVMALLOC ? strdup (name) : name);
  else
    {				/* setenv */
      /* Look for an '=' in the name and ignore anything after that if found. */
      for (p = (char *) name; *p && *p != '='; p++)
	continue;

      int namelen = p - name;	/* Length of name. */
      /* Allocate enough space for name + '=' + value + '\0' */
      envhere = cur_environ ()[offset] = (char *) malloc (namelen + valuelen + 2);
      if (!envhere)
	return -1;		/* Oops.  No more memory. */

      /* Put name '=' value into current slot. */
      strncpy (envhere, name, namelen);
      envhere[namelen] = '=';
      strcpy (envhere + namelen + 1, value);
    }

  /* Update cygwin's cache, if appropriate */
  win_env *spenv;
  if ((spenv = getwinenv (envhere)))
    spenv->add_cache (value);
  if (strcmp (name, "CYGWIN") == 0)
    parse_options (value);

  MALLOC_CHECK;
  return 0;
}

/* Set an environment variable */
extern "C" int
putenv (char *str)
{
  __try
    {
      if (*str)
	{
	  char *eq = strchr (str, '=');
	  if (eq)
	    return _addenv (str, eq + 1, -1);

	  /* Remove str from the environment. */
	  unsetenv (str);
	}
      return 0;
    }
  __except (EFAULT) {}
  __endtry
  return -1;
}

/* Set the value of the environment variable "name" to be
   "value".  If overwrite is set, replace any current value.  */
extern "C" int
setenv (const char *name, const char *value, int overwrite)
{
  __try
    {
      if (!name || !*name || strchr (name, '='))
	{
	  set_errno (EINVAL);
	  __leave;
	}
      return _addenv (name, value, !!overwrite);
    }
  __except (EFAULT) {}
  __endtry
  return -1;
}

/* Delete environment variable "name".  */
extern "C" int
unsetenv (const char *name)
{
  register char **e;
  int offset;

  __try
    {
      if (!name || *name == '\0' || strchr (name, '='))
	{
	  set_errno (EINVAL);
	  __leave;
	}

      while (my_findenv (name, &offset))	/* if set multiple times */
	/* Move up the rest of the array */
	for (e = cur_environ () + offset; ; e++)
	  if (!(*e = *(e + 1)))
	    break;

      return 0;
    }
  __except (EFAULT) {}
  __endtry
  return -1;
}

/* Minimal list of Windows vars which must be converted to uppercase.
   Either for POSIX compatibility of for backward compatibility with
   existing applications. */
static struct renv {
	const char *name;
	const size_t namelen;
} renv_arr[] = {
	{ NL("COMMONPROGRAMFILES=") },		// 0
	{ NL("COMSPEC=") },
	{ NL("PATH=") },			// 2
	{ NL("PROGRAMFILES=") },
	{ NL("SYSTEMDRIVE=") },			// 4
	{ NL("SYSTEMROOT=") },
	{ NL("TEMP=") },			// 6
	{ NL("TMP=") },
	{ NL("WINDIR=") }			// 8
};
#define RENV_SIZE (sizeof (renv_arr) / sizeof (renv_arr[0]))

/* Set of first characters of the above list of variables. */
static const char idx_arr[] = "CPSTW";
/* Index into renv_arr at which the variables with this specific character
   starts. */
static const int start_at[] = { 0, 2, 4, 6, 8 };

/* Turn environment variable part of a=b string into uppercase - for some
   environment variables only. */
static __inline__ void
ucenv (char *p, const char *eq)
{
  /* Hopefully as quickly as possible - only upper case specific set of important
     Windows variables. */
  char first = cyg_toupper (*p);
  const char *idx = strchr (idx_arr, first);
  if (idx)
    for (size_t i = start_at[idx - idx_arr];
	 i < RENV_SIZE && renv_arr[i].name[0] == first;
	 ++i)
      if (strncasematch (p, renv_arr[i].name, renv_arr[i].namelen))
	{
	  strncpy (p, renv_arr[i].name, renv_arr[i].namelen);
	  break;
	}
}

/* Initialize the environ array.  Look for the CYGWIN environment variable and
   set appropriate options from it.  */
void
environ_init (char **envp, int envc)
{
  PWCHAR rawenv, w;
  int i;
  char *p;
  char *newp;
  int sawTERM = 0;
  bool envp_passed_in;
  static char NO_COPY cygterm[] = "TERM=cygwin";
  tmp_pathbuf tp;

  __try
    {
      char *tmpbuf = tp.t_get ();
      if (!envp)
	envp_passed_in = 0;
      else
	{
	  envc++;
	  envc *= sizeof (char *);
	  char **newenv = (char **) malloc (envc);
	  memcpy (newenv, envp, envc);
	  cfree (envp);

	  /* Older applications relied on the fact that cygwin malloced elements of the
	     environment list.  */
	  envp = newenv;
	  if (ENVMALLOC)
	    for (char **e = newenv; *e; e++)
	      {
		char *p = *e;
		*e = strdup (p);
		cfree (p);
	      }
	  envp_passed_in = 1;
	  goto out;
	}

      /* Allocate space for environment + trailing NULL + CYGWIN env. */
      lastenviron = envp = (char **) malloc ((4 + (envc = 100)) * sizeof (char *));

      rawenv = GetEnvironmentStringsW ();
      if (!rawenv)
	{
	  system_printf ("GetEnvironmentStrings returned NULL, %E");
	  return;
	}
      debug_printf ("GetEnvironmentStrings returned %p", rawenv);

      /* Current directory information is recorded as variables of the
	 form "=X:=X:\foo\bar; these must be changed into something legal
	 (we could just ignore them but maybe an application will
	 eventually want to use them).  */
      for (i = 0, w = rawenv; *w != L'\0'; w = wcschr (w, L'\0') + 1, i++)
	{
	  sys_wcstombs_alloc (&newp, HEAP_NOTHEAP, w);
	  if (i >= envc)
	    envp = (char **) realloc (envp, (4 + (envc += 100)) * sizeof (char *));
	  envp[i] = newp;
	  if (*newp == '=')
	    *newp = '!';
	  char *eq = strchrnul (newp, '=');
	  ucenv (newp, eq);	/* uppercase env vars which need it */
	  if (*newp == 'T' && strncmp (newp, "TERM=", 5) == 0)
	    sawTERM = 1;
	  else if (*newp == 'C' && strncmp (newp, "CYGWIN=", 7) == 0)
	    parse_options (newp + 7);
	  if (*eq)
	    posify_maybe (envp + i, *++eq ? eq : --eq, tmpbuf);
	  debug_printf ("%p: %s", envp[i], envp[i]);
	}

      if (!sawTERM)
	envp[i++] = strdup (cygterm);
      envp[i] = NULL;
      FreeEnvironmentStringsW (rawenv);

    out:
      findenv_func = (char * (*)(const char*, int*)) my_findenv;
      __cygwin_environ = envp;
      update_envptrs ();
      if (envp_passed_in)
	{
	  p = getenv ("CYGWIN");
	  if (p)
	    parse_options (p);
	}
      MALLOC_CHECK;
    }
  __except (NO_ERROR)
    {
      api_fatal ("internal error reading the windows environment "
		 "- too many environment variables?");
    }
  __endtry
}

/* Function called by qsort to sort environment strings.  */
static int
env_sort (const void *a, const void *b)
{
  const char **p = (const char **) a;
  const char **q = (const char **) b;

  return strcmp (*p, *q);
}

char * __reg3
getwinenveq (const char *name, size_t namelen, int x)
{
  WCHAR name0[namelen - 1];
  WCHAR valbuf[32768]; /* Max size of an env.var including trailing '\0'. */

  name0[sys_mbstowcs (name0, sizeof name0, name, namelen - 1)] = L'\0';
  int totlen = GetEnvironmentVariableW (name0, valbuf, 32768);
  if (totlen > 0)
    {
      totlen = sys_wcstombs (NULL, 0, valbuf);
      if (x == HEAP_1_STR)
	totlen += namelen;
      else
	namelen = 0;
      char *p = (char *) cmalloc_abort ((cygheap_types) x, totlen);
      if (namelen)
	strcpy (p, name);
      sys_wcstombs (p + namelen, totlen, valbuf);
      debug_printf ("using value from GetEnvironmentVariable for '%W'", name0);
      return p;
    }

  debug_printf ("warning: %s not present in environment", name);
  return NULL;
}

struct spenv
{
  const char *name;
  size_t namelen;
  bool force_into_environment;	/* If true, always add to env if missing */
  bool add_if_exists;		/* if true, retrieve value from cache */
  const char * (cygheap_user::*from_cygheap) (const char *, size_t);

  char __reg3 *retrieve (bool, const char * const = NULL);
};

#define env_dontadd almost_null

/* Keep this list in upper case and sorted */
static NO_COPY spenv spenvs[] =
{
#ifdef DEBUGGING
  {NL ("CYGWIN_DEBUG="), false, true, NULL},
#endif
  {NL ("HOMEDRIVE="), false, false, &cygheap_user::env_homedrive},
  {NL ("HOMEPATH="), false, false, &cygheap_user::env_homepath},
  {NL ("LOGONSERVER="), false, false, &cygheap_user::env_logsrv},
  {NL ("PATH="), false, true, NULL},
  {NL ("SYSTEMDRIVE="), false, true, NULL},
  {NL ("SYSTEMROOT="), true, true, &cygheap_user::env_systemroot},
  {NL ("USERDOMAIN="), false, false, &cygheap_user::env_domain},
  {NL ("USERNAME="), false, false, &cygheap_user::env_name},
  {NL ("USERPROFILE="), false, false, &cygheap_user::env_userprofile},
  {NL ("WINDIR="), true, true, &cygheap_user::env_systemroot}
};

char *
spenv::retrieve (bool no_envblock, const char *const env)
{
  if (env && !ascii_strncasematch (env, name, namelen))
    return NULL;

  debug_printf ("no_envblock %d", no_envblock);

  if (from_cygheap)
    {
      const char *p;
      if (env && !cygheap->user.issetuid ())
	{
	  debug_printf ("duping existing value for '%s'", name);
	  /* Don't really care what it's set to if we're calling a cygwin program */
	  return cstrdup1 (env);
	}

      /* Calculate (potentially) value for given environment variable.  */
      p = (cygheap->user.*from_cygheap) (name, namelen);
      if (!p || (no_envblock && !env) || (p == env_dontadd))
	return env_dontadd;
      char *s = (char *) cmalloc_abort (HEAP_1_STR, namelen + strlen (p) + 1);
      strcpy (s, name);
      strcpy (s + namelen, p);
      debug_printf ("using computed value for '%s'", name);
      return s;
    }

  if (env)
    return cstrdup1 (env);

  return getwinenveq (name, namelen, HEAP_1_STR);
}

static inline int
raise_envblock (int new_tl, PWCHAR &envblock, PWCHAR &s)
{
  int tl = new_tl + 100;
  PWCHAR new_envblock =
	    (PWCHAR) realloc (envblock, (2 + tl) * sizeof (WCHAR));
  /* If realloc moves the block, move `s' with it. */
  if (new_envblock != envblock)
    {
      s += new_envblock - envblock;
      envblock = new_envblock;
    }
  return tl;
}

#define SPENVS_SIZE (sizeof (spenvs) / sizeof (spenvs[0]))

int
env_compare (const void *key, const void *memb)
{
  const char *k = *(const char **) key;
  const char *m = *(const char **) memb;

  char *ke = strchr (k, '=');
  char *me = strchr (m, '=');
  if (ke == NULL || me == NULL)
    return strcasecmp (k, m);
  int ret = strncasecmp (k, m, MIN (ke - k, me - m));
  if (!ret)
    ret = (ke - k) - (me - m);
  return ret;
}

/* Create a Windows-style environment block, i.e. a typical character buffer
   filled with null terminated strings, terminated by double null characters.
   Converts environment variables noted in conv_envvars into win32 form
   prior to placing them in the string.

   If new_token is set, we're going to switch the user account in
   child_info_spawn::worker.  If so, we're also fetching the Windows default
   environment for the new user, and merge it into the environment we propage
   to the child. */
char ** __reg3
build_env (const char * const *envp, PWCHAR &envblock, int &envc,
	   bool no_envblock, HANDLE new_token)
{
  PWCHAR cwinenv = NULL;
  size_t winnum = 0;
  char **winenv = NULL;

  int len, n;
  const char * const *srcp;
  char **dstp;
  bool saw_spenv[SPENVS_SIZE] = {0};

  debug_printf ("envp %p", envp);

  /* How many elements? */
  for (n = 0; envp[n]; n++)
    continue;

  /* Fetch windows env and convert to POSIX-style env. */
  if (new_token
      && CreateEnvironmentBlock ((LPVOID *) &cwinenv, new_token, FALSE))
    {
      PWCHAR var = cwinenv;
      while (*var)
	{
	  ++winnum;
	  var = wcschr (var, L'\0') + 1;
	}
      winenv = (char **) calloc (winnum + 1, sizeof (char *));
      if (winenv)
	{
	  for (winnum = 0, var = cwinenv;
	       *var;
	       ++winnum, var = wcschr (var, L'\0') + 1)
	    sys_wcstombs_alloc (&winenv[winnum], HEAP_NOTHEAP, var);
	}
      DestroyEnvironmentBlock (cwinenv);
      /* Eliminate variables which are already available in envp, as well as
	 the small set of crucial variables needing POSIX conversion and
	 potentially collide.  The windows env is sorted, so we can use
	 bsearch.  We're doing this first step, so the following code doesn't
	 allocate too much memory. */
      if (winenv)
	{
	  for (srcp = envp; *srcp; srcp++)
	    {
	      char **elem = (char **) bsearch (srcp, winenv, winnum,
					       sizeof *winenv, env_compare);
	      if (elem)
		{
		  free (*elem);
		  /* Use memmove to keep array sorted.
		     winnum - (elem - winenv) copies all elements following
		     elem, including the trailing NULL pointer. */
		  memmove (elem, elem + 1,
			   (winnum - (elem - winenv)) * sizeof *elem);
		  --winnum;
		}
	    }
	  for (char **elem = winenv; *elem; elem++)
	    {
	      if (match_first_char (*elem, WC))
		for (int i = 0; conv_envvars[i].name != NULL; i++)
		  if (strncmp (*elem, conv_envvars[i].name,
			       conv_envvars[i].namelen) == 0)
		    {
		      free (*elem);
		      memmove (elem, elem + 1,
			       (winnum - (elem - winenv)) * sizeof *elem);
		      --winnum;
		      --elem;
		    }
	    }
	}
    }

  /* Allocate a new "argv-style" environ list with room for extra stuff. */
  char **newenv = (char **) cmalloc_abort (HEAP_1_ARGV, sizeof (char *) *
				     (n + winnum + SPENVS_SIZE + 1));

  int tl = 0;
  char **pass_dstp;
  char **pass_env = (char **) alloca (sizeof (char *)
				      * (n + winnum + SPENVS_SIZE + 1));
  /* Iterate over input list, generating a new environment list and refreshing
     "special" entries, if necessary. */
  for (srcp = envp, dstp = newenv, pass_dstp = pass_env; *srcp; srcp++)
    {
      bool calc_tl = !no_envblock;
      /* Look for entries that require special attention */
      for (unsigned i = 0; i < SPENVS_SIZE; i++)
	if (!saw_spenv[i] && (*dstp = spenvs[i].retrieve (no_envblock, *srcp)))
	  {
	    saw_spenv[i] = 1;
	    if (*dstp == env_dontadd)
	      goto next1;
	    if (spenvs[i].add_if_exists)
	      calc_tl = true;
	    goto  next0;
	  }

      /* Add entry to new environment */
      *dstp = cstrdup1 (*srcp);

    next0:
      if (calc_tl)
	{
	  *pass_dstp++ = *dstp;
	  tl += strlen (*dstp) + 1;
	}
      dstp++;
    next1:
      continue;
    }

  assert ((srcp - envp) == n);
  /* Fill in any required-but-missing environment variables. */
  for (unsigned i = 0; i < SPENVS_SIZE; i++)
    if (!saw_spenv[i] && (spenvs[i].force_into_environment
			  || cygheap->user.issetuid ()))
      {
	*dstp = spenvs[i].retrieve (false);
	if (*dstp && *dstp != env_dontadd)
	  {
	    *pass_dstp++ = *dstp;
	    tl += strlen (*dstp) + 1;
	    /* Eliminate from winenv. */
	    if (winenv)
	      {
		char **elem = (char **) bsearch (dstp, winenv, winnum,
						 sizeof *winenv, env_compare);
		if (elem)
		  {
		    free (*elem);
		    memmove (elem, elem + 1,
			     (winnum - (elem - winenv)) * sizeof *elem);
		    --winnum;
		  }
	      }
	    dstp++;
	  }
      }

  /* Fill in any Windows environment vars still missing. */
  if (winenv)
    {
      char **elem;
      for (elem = winenv; *elem; ++elem)
	{
	  *dstp = cstrdup1 (*elem);
	  free (*elem);
	  *pass_dstp++ = *dstp;
	  tl += strlen (*dstp) + 1;
	  ++dstp;
	}
      free (winenv);
    }

  envc = dstp - newenv;		/* Number of entries in newenv */
  assert ((size_t) envc <= (n + winnum + SPENVS_SIZE));
  *dstp = NULL;			/* Terminate */

  size_t pass_envc = pass_dstp - pass_env;
  if (!pass_envc)
    envblock = NULL;
  else
    {
      *pass_dstp = NULL;
      debug_printf ("env count %ld, bytes %d", pass_envc, tl);
      win_env temp;
      temp.reset ();

      /* Windows programs expect the environment block to be sorted.  */
      qsort (pass_env, pass_envc, sizeof (char *), env_sort);

      /* Create an environment block suitable for passing to CreateProcess.  */
      PWCHAR s;
      envblock = (PWCHAR) malloc ((2 + tl) * sizeof (WCHAR));
      int new_tl = 0;
      bool saw_PATH = false;
      for (srcp = pass_env, s = envblock; *srcp; srcp++)
	{
	  const char *p;
	  win_env *conv;
	  len = strcspn (*srcp, "=") + 1;
	  const char *rest = *srcp + len;

	  /* Check for a bad entry.  This is necessary to get rid of empty
	     strings, induced by putenv and changing the string afterwards.
	     Note that this doesn't stop invalid strings without '=' in it
	     etc., but we're opting for speed here for now.  Adding complete
	     checking would be pretty expensive. */
	  if (len == 1 || !*rest)
	    continue;

	  /* See if this entry requires posix->win32 conversion. */
	  conv = getwinenv (*srcp, rest, &temp);
	  if (conv)
	    {
	      p = conv->native;	/* Use win32 path */
	      /* Does PATH exist in the environment? */
	      if (**srcp == 'P')
		{
		  /* And is it non-empty? */
		  if (!conv->native || !conv->native[0])
		    continue;
		  saw_PATH = true;
		}
	    }
	  else
	    p = *srcp;		/* Don't worry about it */

	  len = sys_mbstowcs (NULL, 0, p);
	  new_tl += len;	/* Keep running total of block length so far */

	  /* See if we need to increase the size of the block. */
	  if (new_tl > tl)
	    tl = raise_envblock (new_tl, envblock, s);

	  len = sys_mbstowcs (s, len, p);

	  /* See if environment variable is "special" in a Windows sense.
	     Under NT, the current directories for visited drives are stored
	     as =C:=\bar.  Cygwin converts the '=' to '!' for hopefully obvious
	     reasons.  We need to convert it back when building the envblock */
	  if (s[0] == L'!' && (iswdrive (s + 1) || (s[1] == L':' && s[2] == L':'))
	      && s[3] == L'=')
	    *s = L'=';
	  s += len + 1;
	}
      /* If PATH doesn't exist in the environment, add a PATH with just
	 Cygwin's bin dir to the Windows env to allow loading system DLLs
	 during execve. */
      if (!saw_PATH)
	{
	  new_tl += cygheap->installation_dir_len + 5;
	  if (new_tl > tl)
	    tl = raise_envblock (new_tl, envblock, s);
	  s = wcpcpy (wcpcpy (s, L"PATH="), cygheap->installation_dir) + 1;
	}
      *s = L'\0';			/* Two null bytes at the end */
      assert ((s - envblock) <= tl);	/* Detect if we somehow ran over end
					   of buffer */
    }

  debug_printf ("envp %p, envc %d", newenv, envc);
  return newenv;
}

#ifndef __x86_64__
/* This idiocy is necessary because the early implementers of cygwin
   did not seem to know about importing data variables from the DLL.
   So, we have to synchronize cygwin's idea of the environment with the
   main program's with each reference to the environment. */
extern "C" char ** __stdcall
cur_environ ()
{
  if (*main_environ != __cygwin_environ)
    {
      __cygwin_environ = *main_environ;
      update_envptrs ();
    }

  return __cygwin_environ;
}
#endif
@


1.218
log
@	* environ.cc (build_env): When merging the user's Windows environment,
	explicitely skip the variables needing conversion to avoid collisions.
	Extend comment to explain.
@
text
@d5 1
a5 1
   2008, 2009, 2010, 2011, 2012, 2013, 2014 Red Hat, Inc.
d739 1
a739 3
	{ NL("ALLUSERSPROFILE=") },		// 0
	{ NL("COMMONPROGRAMFILES=") },		// 1
	{ NL("COMPUTERNAME=") },
d741 1
a741 11
	{ NL("HOME=") },			// 4
	{ NL("HOMEDRIVE=") },
	{ NL("HOMEPATH=") },
	{ NL("NUMBER_OF_PROCESSORS=") },	// 7
	{ NL("OS=") },				// 8
	{ NL("PATH=") },			// 9
	{ NL("PATHEXT=") },
	{ NL("PROCESSOR_ARCHITECTURE=") },
	{ NL("PROCESSOR_IDENTIFIER=") },
	{ NL("PROCESSOR_LEVEL=") },
	{ NL("PROCESSOR_REVISION=") },
d743 1
a743 1
	{ NL("SYSTEMDRIVE=") },			// 16
d745 1
a745 2
	{ NL("TEMP=") },			// 18
	{ NL("TERM=") },
d747 1
a747 2
	{ NL("TMPDIR=") },
	{ NL("WINDIR=") }			// 22
d752 1
a752 1
static const char idx_arr[] = "ACHNOPSTW";
d755 1
a755 1
static const int start_at[] = { 0, 1, 4, 7, 8, 9, 16, 18, 22 };
@


1.217
log
@	* environ.cc (regopt): Remove function.
	(environ_init): Drop undocumented feature to read application-specific
	environment variables from the registry.
	* include/cygwin/version.h (CYGWIN_INFO_PROGRAM_OPTIONS_NAME): Remove.
@
text
@d1074 5
a1078 3
      /* Eliminate variables which are already available in envp.  The windows
	 env is sorted, so we can use bsearch.  We're doing this first step,
	 so the following code doesn't allocate too much memory. */
d1096 14
@


1.216
log
@	* environ.cc (build_env): Remove loquacious debug statements.
@
text
@d791 2
a792 33
/* Set options from the registry. */
static bool __stdcall
regopt (PCWSTR name, char *buf)
{
  bool parsed_something = false;
  UNICODE_STRING lname;
  size_t len = (wcslen(name) + 1) * sizeof (WCHAR);
  WCHAR lbuf[1024];	/* Use reasonable size to lower stack pressure.
			   get_string alloca's this additionally and 1024
			   is more than enough for CYGWIN env var values. */

  RtlInitEmptyUnicodeString(&lname, (PWCHAR) alloca (len), len);
  wcscpy(lname.Buffer, name);
  RtlDowncaseUnicodeString(&lname, &lname, FALSE);

  for (int i = 0; i < 2; i++)
    {
      reg_key r (i, KEY_READ, _WIDE (CYGWIN_INFO_PROGRAM_OPTIONS_NAME), NULL);
      if (NT_SUCCESS (r.get_string (lname.Buffer, lbuf, 1024, L"")))
	{
	  sys_wcstombs (buf, NT_MAX_PATH, lbuf);
	  parse_options (buf);
	  parsed_something = true;
	  break;
	}
    }

  MALLOC_CHECK;
  return parsed_something;
}

/* Initialize the environ array.  Look for the CYGWIN environment
   environment variable and set appropriate options from it.  */
a801 1
  bool got_something_from_registry;
a807 5
      got_something_from_registry = regopt (L"default", tmpbuf);
      if (myself->progname[0])
	got_something_from_registry = regopt (myself->progname, tmpbuf)
				      || got_something_from_registry;

a880 4

      if (got_something_from_registry)
	parse_options (NULL);	/* possibly export registry settings to
				       environment */
@


1.215
log
@	* autoload.cc (CreateEnvironmentBlock): Import.
	(DestroyEnvironmentBlock): Import.
	* environ.cc (env_compare): New static bsearch comparison function.
	(build_env): Add parameter taking a user token.  If token is non-NULL,
	fetch user's default Windows environment and merge it into the resulting
	environment.  Explain what we do in preceeding comment.
	* environ,h (build_env): Align prototype to above change.
	* external.cc (create_winenv): Call build_env with NULL token.
	* spawn.cc (child_info_spawn::worker): When spawning new process under
	another user account, call build_env with new token to allow merging
	user's default Windows environment.
	* winlean.h (_USERENV_): Define to override dllimport.
@
text
@a1125 1
		  system_printf ("remove: %s", *elem);
a1194 1
		    system_printf ("remove: %s", *elem);
@


1.214
log
@	* cygheap.cc (cygheap_fixup_in_child): Drop call to set_dll_dir.
	(init_cygheap::init_installation_root): Set installation_dir_len.
	(setup_cygheap): Drop call to set_dll_dir.
	* cygheap.h (struct init_cygheap): Add installation_dir_len member.
	(init_cygheap::set_dll_dir): Remove.
	* environ.cc (win_env::add_cache): Use stpcpy for speed.
	(posify_maybe): Use tmp_pathbuf buffer instead of stack.
	(raise_envblock): New function to resize Windows environment block.
	(build_env): Fix indentation.  Call raise_envblock function.  Check if
	$PATH exists and is non-empty.  If not, add PATH variable with Cygwin
	installation directory as content to Windows environment.  Explain why.

	* uinfo.cc (cygheap_pwdgrp::_nss_init): Fill UNICODE_STRING members
	on the fly.  Drop call to RtlInitUnicodeString.
	(pwdgrp::check_file): Ditto.
@
text
@d12 1
d19 1
d1052 16
d1071 6
a1076 1
   prior to placing them in the string.  */
d1079 1
a1079 1
	   bool no_envblock)
d1081 4
d1096 43
d1141 1
a1141 1
				     (n + SPENVS_SIZE + 1));
d1145 2
a1146 1
  char **pass_env = (char **) alloca (sizeof (char *) * (n + SPENVS_SIZE + 1));
d1181 2
a1182 1
    if (!saw_spenv[i] && (spenvs[i].force_into_environment || cygheap->user.issetuid ()))
d1189 14
d1207 15
d1223 1
a1223 1
  assert ((size_t) envc <= (n + SPENVS_SIZE));
@


1.213
log
@	* Throughout, use __try/__except/__endtry blocks, rather than myfault
	handler.
	* cygtls.cc (_cygtls::remove): Accommodate the fact that pathbufs
	has been moved from _local_storage to _cygtls.
	* cygtls.h (class tls_pathbuf): Add comment to hint to gendef usage
	of counters.  Change type of counters to uint32_t for clarity.
	Remove _cygtls as friend class.
	(struct _local_storage): Move pathbufs from here...
	(struct _cygtls): ...to here, allowing to access it from _sigbe.
	(class san): Only define on 32 bit.  Remove errno, _c_cnt and _w_cnt
	members.
	(san::setup): Drop parameter.  Don't initialize removed members.
	(san::leave): Don't set removed members.
	(class myfault): Only define on 32 bit.
	(myfault::faulted): Only keep implementation not taking any parameter.
	Drop argument in call to sebastian.setup.
	(__try/__leave/__except/__endtry): Implement to support real SEH.  For
	now stick to SJLJ on 32 bit.
	* dcrt0.cc (dll_crt0_0): Drop 64 bit call to
	exception::install_myfault_handler.
	* exception.h (exception_handler): Define with EXCEPTION_DISPOSITION
	as return type.
	(PDISPATCHER_CONTEXT): Define as void * on 32 bit.  Define as pointer
	to _DISPATCHER_CONTEXT on 64 bit.
	(class exception): Define separately for 32 and 64 bit.
	(exception::myfault): Add handler for myfault SEH handling on 64 bit.
	(exception::exception): Fix mangled method name to account for change
	in type of last parameter.
	(exception::install_myfault_handler): Remove.
	* exceptions.cc (exception::myfault_handle): Remove.
	(exception::myfault): New SEH handler for 64 bit.
	* gendef (_sigbe): Set tls_pathbuf counters to 0 explicitely when
	returning to the caller.
	* ntdll.h: Move a comment to a better place.
	(struct _SCOPE_TABLE): Define on 64 bit.
	* thread.cc (verifyable_object_isvalid): Remove gcc 4.7 workaround.
	* tls_pbuf.cc (tls_pbuf): Fix to accommodate new place of pathbufs.
	(tls_pathbuf::destroy): Change type of loop variables to uint32_t.
	* tls_pbuf.h (class tmp_pathbuf): Change type of buffer counters to
	uint32_t.  Accommodate new place of pathbufs.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Regenerate.
@
text
@d399 1
a399 2
      strcpy (native, name);
      strcpy (native + namelen, in_native);
a404 1
      strcpy (buf, name + namelen);
d407 1
a407 2
      strcpy (native, name);
      strcpy (native + namelen, buf);
d480 3
a482 2
      char cleanvalue[strlen (value) + 1];
      conv->towin32 (newvalue, cleanvalue, sizeof cleanvalue);
d1033 15
d1112 8
a1119 8
	  *dstp = spenvs[i].retrieve (false);
	  if (*dstp && *dstp != env_dontadd)
	    {
	      *pass_dstp++ = *dstp;
	      tl += strlen (*dstp) + 1;
	      dstp++;
	    }
	}
d1142 1
d1161 11
a1171 1
	    p = conv->native;	/* Use win32 path */
d1180 1
a1180 11
	    {
	      tl = new_tl + 100;
	      PWCHAR new_envblock =
			(PWCHAR) realloc (envblock, (2 + tl) * sizeof (WCHAR));
	      /* If realloc moves the block, move `s' with it. */
	      if (new_envblock != envblock)
		{
		  s += new_envblock - envblock;
		  envblock = new_envblock;
		}
	    }
d1182 1
a1182 1
	  int slen = sys_mbstowcs (s, len, p);
d1191 11
a1201 1
	  s += slen + 1;
@


1.212
log
@	* environ.cc (regopt): Allocate small local buffer to avoid copying
	twice.  Fixes resource leak (CID 60012).  Add comment.
@
text
@d5 1
a5 1
   2008, 2009, 2010, 2011, 2012, 2013 Red Hat, Inc.
d667 7
a673 8
  myfault efault;
  if (efault.faulted (EFAULT))
    return -1;
  if (*str)
    {
      char *eq = strchr (str, '=');
      if (eq)
	return _addenv (str, eq + 1, -1);
d675 4
a678 2
      /* Remove str from the environment. */
      unsetenv (str);
d680 3
a682 1
  return 0;
d690 1
a690 4
  myfault efault;
  if (efault.faulted (EFAULT))
    return -1;
  if (!name || !*name || strchr (name, '='))
d692 6
a697 2
      set_errno (EINVAL);
      return -1;
d699 3
a701 1
  return _addenv (name, value, !!overwrite);
a709 8
  myfault efault;
  if (efault.faulted (EFAULT))
    return -1;
  if (!name || *name == '\0' || strchr (name, '='))
    {
      set_errno (EINVAL);
      return -1;
    }
d711 13
a723 5
  while (my_findenv (name, &offset))	/* if set multiple times */
    /* Move up the rest of the array */
    for (e = cur_environ () + offset; ; e++)
      if (!(*e = *(e + 1)))
	break;
d725 5
a729 1
  return 0;
a834 1
  myfault efault;
d837 34
a870 2
  if (efault.faulted ())
    api_fatal ("internal error reading the windows environment - too many environment variables?");
d872 7
a878 5
  char *tmpbuf = tp.t_get ();
  got_something_from_registry = regopt (L"default", tmpbuf);
  if (myself->progname[0])
    got_something_from_registry = regopt (myself->progname, tmpbuf)
				  || got_something_from_registry;
d880 22
a901 23
  if (!envp)
    envp_passed_in = 0;
  else
    {
      envc++;
      envc *= sizeof (char *);
      char **newenv = (char **) malloc (envc);
      memcpy (newenv, envp, envc);
      cfree (envp);

      /* Older applications relied on the fact that cygwin malloced elements of the
	 environment list.  */
      envp = newenv;
      if (ENVMALLOC)
	for (char **e = newenv; *e; e++)
	  {
	    char *p = *e;
	    *e = strdup (p);
	    cfree (p);
	  }
      envp_passed_in = 1;
      goto out;
    }
d903 15
a917 2
  /* Allocate space for environment + trailing NULL + CYGWIN env. */
  lastenviron = envp = (char **) malloc ((4 + (envc = 100)) * sizeof (char *));
d919 6
a924 2
  rawenv = GetEnvironmentStringsW ();
  if (!rawenv)
d926 2
a927 2
      system_printf ("GetEnvironmentStrings returned NULL, %E");
      return;
d929 1
a929 45
  debug_printf ("GetEnvironmentStrings returned %p", rawenv);

  /* Current directory information is recorded as variables of the
     form "=X:=X:\foo\bar; these must be changed into something legal
     (we could just ignore them but maybe an application will
     eventually want to use them).  */
  for (i = 0, w = rawenv; *w != L'\0'; w = wcschr (w, L'\0') + 1, i++)
    {
      sys_wcstombs_alloc (&newp, HEAP_NOTHEAP, w);
      if (i >= envc)
	envp = (char **) realloc (envp, (4 + (envc += 100)) * sizeof (char *));
      envp[i] = newp;
      if (*newp == '=')
	*newp = '!';
      char *eq = strchrnul (newp, '=');
      ucenv (newp, eq);	/* uppercase env vars which need it */
      if (*newp == 'T' && strncmp (newp, "TERM=", 5) == 0)
	sawTERM = 1;
      else if (*newp == 'C' && strncmp (newp, "CYGWIN=", 7) == 0)
	parse_options (newp + 7);
      if (*eq)
	posify_maybe (envp + i, *++eq ? eq : --eq, tmpbuf);
      debug_printf ("%p: %s", envp[i], envp[i]);
    }

  if (!sawTERM)
    envp[i++] = strdup (cygterm);
  envp[i] = NULL;
  FreeEnvironmentStringsW (rawenv);

out:
  findenv_func = (char * (*)(const char*, int*)) my_findenv;
  __cygwin_environ = envp;
  update_envptrs ();
  if (envp_passed_in)
    {
      p = getenv ("CYGWIN");
      if (p)
	parse_options (p);
    }

  if (got_something_from_registry)
    parse_options (NULL);	/* possibly export registry settings to
				   environment */
  MALLOC_CHECK;
@


1.211
log
@* environ.cc (strbrk): Properly deal with environment variable sans quote.
@
text
@d783 1
a783 1
regopt (const WCHAR *name, char *buf)
d788 4
d799 1
a799 3

      if (NT_SUCCESS (r.get_string (lname.Buffer, (PWCHAR) buf,
				    NT_MAX_PATH, L"")))
d801 1
a801 3
	  char *newp;
	  sys_wcstombs_alloc(&newp, HEAP_NOTHEAP, (PWCHAR) buf);
	  strcpy(buf, newp);
@


1.210
log
@* environ.cc (strbrk): New function.
(parse_options): Use strbrk to parse CYGWIN environment variable.
@
text
@d151 1
a151 1
  if (quotestart > sep)
d153 1
a154 1
      buf = sep + 1;
@


1.209
log
@	Throughout, drop unnecessary explicit includes of windows header files
	included by default.
	* winlean.h: Add long comment to explain why we have to define certain
	symbols.
	(_NORMALIZE_): Define.
	(_WINNLS_): Drop definition and subsequent undef.
	(_WINNETWK_): Ditto.
	(_WINSVC_): Ditto.

2013-11-23  Eric Blake  <eblake@@redhat.com>
@
text
@d140 42
a187 1
  char *p, *lasts;
d212 2
a213 3
  for (p = strtok_r (buf, " \t", &lasts);
       p != NULL;
       p = strtok_r (NULL, " \t", &lasts))
@


1.209.2.1
log
@* environ.cc (strbrk): Properly deal with environment variable sans quote.
* environ.cc (strbrk): New function.
(parse_options): Use strbrk to parse CYGWIN environment variable.
@
text
@a139 42
/* Return a possibly-quoted token.
   Returns NULL when no more tokens available.  */
static char *
strbrk(char *&buf)
{
  buf += strspn(buf, " \t");
  if (!*buf)
    return NULL;
  char *tok = buf;
  char *sep = buf + strcspn(buf, " \t");
  char *quotestart = strchr(buf, '"');
  if (!quotestart || quotestart > sep)
    {
      buf = sep + !!*sep;	/* Don't point beyond EOS */
      quotestart = NULL;
    }
  else
    {
      char *quote = quotestart;
      sep = NULL;
      while (!sep)
	{
	  char *clquote = strchr (quote + 1, '"');
	  if (!clquote)
	    sep = strchr (quote, '\0');
	  else if (clquote[-1] != '\\')
	    sep = clquote;
	  else
	    {
	      memmove (clquote - 1, clquote, 1 + strchr (clquote, '\0') - clquote);
	      quote = clquote - 1;
	    }
	}
      buf = sep + 1;
      memmove (quotestart, quotestart + 1, sep - quotestart);
      sep--;
    }
  *sep = '\0';
  return tok;
}


d146 1
d171 3
a173 2

  while (char *p = strbrk (buf))
@


1.209.2.2
log
@2014-07-14  Christopher Faylor  <me.cygwin2014@@cgf.cx>

	* sigproc.cc (send_sig): Fix bad format in diagnostic output.

2014-07-14  Yaakov Selkowitz  <yselkowitz@@cygwin.com>

	* thread.cc (pthread_mutex::pthread_mutex): Change default type
	to PTHREAD_MUTEX_NORMAL.
	(pthread_mutex::unlock): Return EPERM if the mutex has no owner and
	the mutex type is PTHREAD_MUTEX_ERRORCHECK, as on Linux.
	(pthread_mutexattr::pthread_mutexattr): Ditto.
	(pthread_mutex_unlock): Do not fail if mutex is a normal mutex
	initializer.
	* include/pthread.h (PTHREAD_MUTEX_INITIALIZER): Redefine as
	PTHREAD_NORMAL_MUTEX_INITIALIZER_NP.

2014-07-09  Corinna Vinschen  <corinna@@vinschen.de>

	* thread.cc (pthread::create): Use PTHREAD_DEFAULT_STACKSIZE stacksize
	if attr.stacksize is 0.
	(pthread_attr::pthread_attr): Initialize stacksize to 0 to align more
	closely to Linux.
	(pthread_attr_getstack): Fix incorrect stackaddr computation.  Return
	stackaddr just like pthread_attr_getstackaddr.  Remove slightly off
	comment.
	(pthread_attr_getstackaddr): Remove slightly off comment.
	(pthread_getattr_np): Return stackaddr and stacksize based on the full
	allocated stackarea.

2014-07-09  Corinna Vinschen  <corinna@@vinschen.de>

	* exceptions.cc (exception::myfault_handle): Rephrase comment.

2014-07-09  Corinna Vinschen  <corinna@@vinschen.de>

	* exceptions.cc (exception::myfault_handle): Fix typo in comment.

2014-07-07  Corinna Vinschen  <corinna@@vinschen.de>

	* exceptions.cc (exception::myfault_handle): Disable handling
	STATUS_STACK_OVERFLOW.  Explain why.

2014-07-07  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_socket.cc (fhandler_socket::send_internal): Improve loop to
	write streams in chunks of wmem() bytes to raise performance when
	writing small buffers.  Rename variables and add comments to help
	understanding the code in years to come.

2014-07-07  Corinna Vinschen  <corinna@@vinschen.de>

	* libc/minires.c (minires_dprintf): Change "Minires" to "Resolv" to
	differ from external minres lib.
	(res_nquerydomain): Fix off-by-one in domain concatenation.  Add debug
	output.

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* spawn.cc (find_exec): Initialize err (CID 60111).
	* strace.cc (strace::activate): Fix potential buffer overrun (CID 59938)
	* syscalls.cc (popen): Close parent pipe descriptor via fclosing fp on
	error to avoid resource leak (CID 59981).
	* thread.cc (pthread::exit): Avoid accessing cygtls member after
	deleting "this" (CID 60217).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* select.cc (start_thread_socket): Delete si on early return in case of
	an error (CID 59967).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* regex/regcomp.c (computematchjumps): Free local memory in case of
	error (CID 59975).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* mount.cc (fs_info::update): Define dir in the outermost scope to avoid
	accessing out-of-scope value (CID 60027).  Always initialize attr to
	upath (CID 60113).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* malloc_wrapper.cc (mallinfo): Initialize m if external malloc is used,
	too (CID 60120).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* localtime.cc (tzload): Fix leaking memory (CID 60001).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* environ.cc (regopt): Allocate small local buffer to avoid copying
	twice.  Fixes resource leak (CID 60012).  Add comment.

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* dll_init.cc (dll_list::alloc): Fix buffer overrun (CID 59940).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* dcrt0.cc (insert_file): Fix resource leaks (CIDs 59987, 59988).
@
text
@d783 1
a783 1
regopt (PCWSTR name, char *buf)
a787 4
  WCHAR lbuf[1024];	/* Use reasonable size to lower stack pressure.
			   get_string alloca's this additionally and 1024
			   is more than enough for CYGWIN env var values. */

d795 3
a797 1
      if (NT_SUCCESS (r.get_string (lname.Buffer, lbuf, 1024, L"")))
d799 3
a801 1
	  sys_wcstombs (buf, NT_MAX_PATH, lbuf);
@


1.209.2.3
log
@2014-11-07  Corinna Vinschen  <corinna@@vinschen.de>

	* dcrt0.cc (cygwin__cxa_atexit): Fetch correct DSO handle value
	by searching dll list.  Explain why.

2014-11-06  Corinna Vinschen  <corinna@@vinschen.de>

	* dcrt0.cc (cygwin_atexit): Change preceeding comment to reflect
	API version numbers.
	* external.cc (cygwin_internal): disable setting cxx_malloc on 64 bit.
	Add CW_FIXED_ATEXIT case.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
	* include/sys/cygwin.h (cygwin_getinfo_types): Add CW_FIXED_ATEXIT.
	* lib/atexit.c (atexit): Test running Cygwin version by checking
	return value of cygwin_internal (CW_FIXED_ATEXIT).

2014-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* lib/atexit.c (atexit): Check for being linked into the executable.
	If so, call __cxa_atexit with NULL DSO handle.  Explain why.
	* lib/dso_handle.c: New file providing fallback __dso_handle.

2014-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (NEW_FUNCTIONS): Add atexit to be not exported.
	* lib/atexit.c (atexit): New, statically linkable version of atexit.
	* dcrt0.cc (cygwin_atexit): Add comment to mark this function as old
	entry point.  Indiscriminately check for DSO of function pointer for
	all functions, if checking for DSO of return address fails on x86_64.
	Change comment accordingly.

2014-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (NEW_FUNCTIONS): Define target-independent.  Add target
	dependent stuff afterwards.  Globally define timezone and all xdr
	symbols as non-exported from libcygwin.a.

2014-11-03  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc: Fix formatting.

2014-10-29  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc (init_cygheap::init_installation_root): Create content of
	installation_dir as non-prefixed path, if possible.

2014-10-29  Corinna Vinschen  <corinna@@vinschen.de>

	* common.din (__cxa_atexit): Define as cygwin__cxa_atexit.
	* dcrt0.cc (cygwin__cxa_atexit): New function.  Explain what we do.

2014-10-28  Corinna Vinschen  <corinna@@vinschen.de>

	* globals.cc (dos_file_warning): Set to false by default.
	* path.cc (warn_msdos): Make static.  Drop test for dos_file_warning.
	(path_conv::check): Check for dos_file_warning here to avoid a function
	call in the default case.

2014-10-27  Corinna Vinschen  <corinna@@vinschen.de>

	* dcrt0.cc (cygwin_atexit): Add workaround for broken atexit calls
	in __gcc_register_frame of DLLs built with gcc-4.8.3-3.

2014-10-27  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc (init_cygheap::init_installation_root): Set
	installation_dir_len.
	* cygheap.h (struct init_cygheap): Add installation_dir_len member.
	* environ.cc (win_env::add_cache): Use stpcpy for speed.
	(posify_maybe): Use tmp_pathbuf buffer instead of stack.
	(raise_envblock): New function to resize Windows environment block.
	(build_env): Fix indentation.  Call raise_envblock function.  Check if
	$PATH exists and is non-empty.  If not, add PATH variable with Cygwin
	installation directory as content to Windows environment.  Explain why.

2014-10-24  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_proc.cc (format_proc_cygdrive): Fix symlink path if cygdrive
	is "/".

2014-10-24  Corinna Vinschen  <corinna@@vinschen.de>

	* gendef (sigdelayed): 64 bit only: Fix seh_pushreg statements in
	prologue.

2014-10-22  Yaakov Selkowitz  <yselkowi@@redhat.com>

	* common.din (stime): Export.
	* times.cc (stime): New function.
	* include/cygwin/time.h (stime): Declare.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.

2014-10-20  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_serial.cc: Revert debug code accidentally checked in on
	2014-08-18.

2014-10-20  Corinna Vinschen  <corinna@@vinschen.de>

	* path.cc (symlink_info::check): Set error from status code if opening
	the parent directory failed, but keep special case for root dirs.

2014-10-17  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc (init_cygheap::init_installation_root): Just memmove
	contents of installation_root instead of calling GetModuleFileNameW
	again.  Copy installation_root to installation_dir before stripping of
	"bin" dir.  Explain what we do.
	* cygheap.h (struct init_cygheap): Add installation_dir member.

2014-10-17  Corinna Vinschen  <corinna@@vinschen.de>

	* cygtls.h (__try): Define __l_endtry as block-local label in 32 bit
	case as well.

2014-10-17  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (DLL_OFILES): Add quotactl.o.
	* common.din (quotactl): Export.
	* ntdll.h: Define FILE_FS_CONTROL_INFORMATION::FileSystemControlFlags
	flag values.
	(struct _FILE_FS_CONTROL_INFORMATION): Define.
	(struct _FILE_GET_QUOTA_INFORMATION): Define.
	(typedef struct _FILE_QUOTA_INFORMATION): Define.
	(NtQueryObject): Use PVOID rather than VOID*.
	(NtQueryVolumeInformationFile): Ditto.
	(NtQueryQuotaInformationFile): Declare.
	(NtSetQuotaInformationFile): Declare.
	(NtSetVolumeInformationFile): Declare.
	* quotactl.cc: New file implementing quotactl().
	* include/sys/mount.h (BLOCK_SIZE): Define.
	(BLOCK_SIZE_BITS): Define.
	* include/sys/quota.h: New header.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.

2014-10-16  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (DLL_OFILES): Rearrange with one file per line.

2014-10-16  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_proc.cc (format_proc_partitions): Extend output to print
	the windows mount points the device is mounted on.

2014-10-13  Corinna Vinschen  <corinna@@vinschen.de>

	* net.cc (cygwin_setsockopt): Drop redundant test for AF_LOCAL and
	SOCK_STREAM in SO_PEERCRED case, as in the original patch.

2014-10-12  Corinna Vinschen  <corinna@@vinschen.de>

	* dlfcn.cc (gfpod_helper): Only check for POSIX dir separator, same as
	in get_full_path_of_dll.

2014-10-12  Corinna Vinschen  <corinna@@vinschen.de>

	* dlfcn.cc (set_dl_error): Drop useless __stdcall.
	(check_path_access): Ditto.  Drop FE_CWD from call to find_exec.
	(gfpod_helper): Call path_conv::check for all paths containing a dir
	separator to more closely follow the Linux search algorithm.
	(get_full_path_of_dll): Drop useless __stdcall.
	(dlopen): Simplify RTLD_NOLOAD case by calling GetModuleHandleEx
	instead of GetModuleHandle/LoadLibrary.

2014-10-11  Christian Franke  <franke@@computer.org>

	Add setsockopt(sd, SOL_SOCKET, SO_PEERCRED, NULL, 0) to disable
	initial handshake on AF_LOCAL sockets.
	* fhandler.h (class fhandler_socket): Add no_getpeereid status flag.
	(fhandler_socket::af_local_set_no_getpeereid): New prototype.
	* fhandler_socket.cc (fhandler_socket::af_local_connect): Skip handshake
	if no_getpeereid is set.  Add debug output.
	(fhandler_socket::af_local_accept): Likewise.
	(fhandler_socket::af_local_set_no_getpeereid): New function.
	(fhandler_socket::af_local_copy): Copy no_getpeereid.
	(fhandler_socket::getpeereid): Fail if no_getpeereid is set.
	* net.cc (cygwin_setsockopt): Add SO_PEERCRED for AF_LOCAL/SOCK_STREAM
	sockets.  Add comment to explain why we need it.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.

2014-10-10  Corinna Vinschen  <corinna@@vinschen.de>

	* dlfcn.cc (dlopen): Disable old 32 bit code on 64 bit.
	* dcrt0.cc (check_sanity_and_sync): Ditto.
	* dll_init.cc (dll_dllcrt0_1): Fix typo in comment.

2014-10-08  Corinna Vinschen  <corinna@@vinschen.de>

	* common.din (ffsl): Export.
	(ffsll): Export.
	* syscalls.cc (ffs): Implement using GCC intrinsic.
	(ffsl): Ditto.
	(ffsll): Ditto.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.

2014-10-08  Christian Franke  <franke@@computer.org>

	* syscalls.cc (ffs): Fix crash of ffs (0x80000000) on 64 bit.

2014-10-08  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_process.cc (format_process_statm): Fix output of dirty
	pages.  Add linefeed.

2014-09-05  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_proc.cc (proc_tab): Add entry for cygdrive symlink.
	(format_proc_cygdrive): New function to implement /proc/cygdrive.

2014-09-05  Corinna Vinschen  <corinna@@vinschen.de>

	* exception.h (class exception): Remove unnecessary #ifdef.

2014-09-05  Corinna Vinschen  <corinna@@vinschen.de>

	* winlean.h (DNLEN): Raise to 31.  Explain why.

2014-08-28  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_disk_file.cc (fhandler_disk_file::fstatvfs): Try the
	FileFsSizeInformation information class on filesystems choking on
	FileFsFullSizeInformation (I see you Netapp!)

2014-08-27  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.h (fhandler_pty_slave::fch_open_handles): Add bool parameter
	to declaration.
	* fhandler_tty.cc (fhandler_pty_slave::fch_open_handles): Add bool
	parameter "chown".  Only request WRITE_OWNER access when opening pty
	synchronization objects if "chown" is set.
	(fhandler_pty_slave::fchmod): Call fch_open_handles with new bool
	parameter set to false.
	(fhandler_pty_slave::fchown): Call fch_open_handles with new bool
	parameter set to true.
	* kernel32.cc (CreateFileMappingW): Fix default standard rights for
	file mappings from READ_CONTROL to STANDARD_RIGHTS_REQUIRED to allow
	changing the DACL (fixes "access denied" error in pinfo::set_acl).

	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Change debug
	output to print mode bits in octal.
	* security.cc (alloc_sd): Ditto.
	(set_file_attribute): Ditto.

2014-08-27  Corinna Vinschen  <corinna@@vinschen.de>

	* ntea.cc (read_ea): Change left-over return to __leave.  Fix
	condition to close handle.  Call NtClose rather than CloseHandle.
	(write_ea): Fix condition to close handle.  Call NtClose rather than
	CloseHandle.
	* security.cc (get_file_sd): Call pc.init_reopen_attr if a valid
	incoming handle was given, pc.get_object_attr otherwise.
	(set_file_sd): Ditto.

2014-08-26  Corinna Vinschen  <corinna@@vinschen.de>

	* path.h (path_conv::init_reopen_attr): Change from void to returning
	POBJECT_ATTRIBUTES.  Take OBJECT_ATTRIBUTES reference as argument, not
	pointer.
	* fhandler_disk_file.cc: Throughout accommodate above change.
	* syscalls.cc: Ditto.
	* ntea.cc (read_ea): Don't set hdl to NULL if it's already NULL.  Set
	attr with pc.init_reopen_attr before trying to reopen file.
	(write_ea): Ditto.
	* security.cc (get_file_sd): Use pc.init_reopen_attr rather than
	pc.get_object_attr when trying to reopen file.
	(set_file_sd): Ditto.

2014-08-25  Corinna Vinschen  <corinna@@vinschen.de>

	* cygtls.cc (san::leave/x86_64): Implement.
	* cygtls.h (class tls_pathbuf): Move counter variables into a union.
	Add 64 bit element _counters covering both counter variables to
	optimize save and restore operations.
	(class san/x86_64): Only store single 64 bit value.
	(san::san/x86_64): Implement.
	(san::leave/x86_64): Only declare here, as returns_twice function.
	Explain why.
	(class san/i686): Change type of _c_cnt and _w_cnt to uint32_t.
	(__try/x86_64): Move definition of __sebastian after the first memory
	barrier.  Drop __sebastian.setup call.

2014-08-25  Corinna Vinschen  <corinna@@vinschen.de>

	* cygtls.cc (_cygtls::remove): Revert previous patch.
	*  cygtls.h (struct _local_storage): Move pathbufs back here.
	(class san/x86_64): Revert class.  Save and restore pathbufs counters
	only.
	(class san/i686): Revert saving and restoring pathbufs counters.
	(__try/x86_64): Add a san variable and call it's setup method.
	(__except/x86_64): Call san::leave to restore pathbufs counters.
	* gendef (_sigbe): Revert previous change.
	* thread.cc (verifyable_object_state): Remove gcc 4.7 workaround in
	forward declaration as well.
	* tls_pbuf.cc (tls_pbuf): Revert previous change.
	* tls_pbuf.h (class tmp_pathbuf): Accommodate reverting pathbufs to
	locals structure.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Regenerate.

2014-08-21  Corinna Vinschen  <corinna@@vinschen.de>

	* Throughout, use __try/__except/__endtry blocks, rather than myfault
	handler.
	* cygtls.cc (_cygtls::remove): Accommodate the fact that pathbufs
	has been moved from _local_storage to _cygtls.
	* cygtls.h (class tls_pathbuf): Add comment to hint to gendef usage
	of counters.  Change type of counters to uint32_t for clarity.
	Remove _cygtls as friend class.
	(struct _local_storage): Move pathbufs from here...
	(struct _cygtls): ...to here, allowing to access it from _sigbe.
	(class san): Only define on 32 bit.  Remove errno, _c_cnt and _w_cnt
	members.
	(san::setup): Drop parameter.  Don't initialize removed members.
	(san::leave): Don't set removed members.
	(class myfault): Only define on 32 bit.
	(myfault::faulted): Only keep implementation not taking any parameter.
	Drop argument in call to sebastian.setup.
	(__try/__leave/__except/__endtry): Implement to support real SEH.  For
	now stick to SJLJ on 32 bit.
	* dcrt0.cc (dll_crt0_0): Drop 64 bit call to
	exception::install_myfault_handler.
	* exception.h (exception_handler): Define with EXCEPTION_DISPOSITION
	as return type.
	(PDISPATCHER_CONTEXT): Define as void * on 32 bit.  Define as pointer
	to _DISPATCHER_CONTEXT on 64 bit.
	(class exception): Define separately for 32 and 64 bit.
	(exception::myfault): Add handler for myfault SEH handling on 64 bit.
	(exception::exception): Fix mangled method name to account for change
	in type of last parameter.
	(exception::install_myfault_handler): Remove.
	* exceptions.cc (exception::myfault_handle): Remove.
	(exception::myfault): New SEH handler for 64 bit.
	* gendef (_sigbe): Set tls_pathbuf counters to 0 explicitely when
	returning to the caller.
	* ntdll.h: Move a comment to a better place.
	(struct _SCOPE_TABLE): Define on 64 bit.
	* thread.cc (verifyable_object_isvalid): Remove gcc 4.7 workaround.
	* tls_pbuf.cc (tls_pbuf): Fix to accommodate new place of pathbufs.
	(tls_pathbuf::destroy): Change type of loop variables to uint32_t.
	* tls_pbuf.h (class tmp_pathbuf): Change type of buffer counters to
	uint32_t.  Accommodate new place of pathbufs.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Regenerate.

2014-08-21  Corinna Vinschen  <corinna@@vinschen.de>

	* miscfuncs.cc (__import_address): Cover the first dereference to imp
	under the fault handler.

2014-08-21  Corinna Vinschen  <corinna@@vinschen.de>

	* net.cc (if_freenameindex): Don't catch a SEGV from free to fail
	loudly on double free.

2014-08-21  Corinna Vinschen  <corinna@@vinschen.de>

	* dir.cc (rmdir): Don't skip deleting fh in the ENOTEMPTY case.

2014-08-20  Corinna Vinschen  <corinna@@vinschen.de>

	* tls_pbuf.h (tmp_pathbuf::tmp_pathbuf): Convert to inline method.
	(tmp_pathbuf::~tmp_pathbuf): Ditto.
	* tls_pbuf.cc (tmp_pathbuf::tmp_pathbuf): Remove here.
	(tmp_pathbuf::~tmp_pathbuf): Ditto.

2014-08-19  Corinna Vinschen  <corinna@@vinschen.de>

	* dir.cc (dirfd): Per POSIX, return EINVAL on invalid directory stream.
	(telldir): Per POSIX, return -1 and set errno to EBADF, rather than
	just returning 0, on invalid directory stream.
	* signal.cc (sigwaitinfo): Return -1, not EFAULT, when SEGV was catched.

2014-08-19  Corinna Vinschen  <corinna@@vinschen.de>

	* autoload.cc: Replace WNet[...]A with WNet[...]W imports.
	* dcrt0.cc (initial_env): Drop strlwr calls.  Call strcasestr instead.
	* fhandler_netdrive.cc: Throughout, convert to calling WNet UNICODE
	functions.  Use tmp_pathbuf rather than alloca.  Replace call to
	strlwr with call to RtlDowncaseUnicodeString.

2014-08-19  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.h (fhandler_serial::is_tty): Reinstantiate.

2014-08-18  Corinna Vinschen  <corinna@@vinschen.de>

	* miscfuncs.cc (strlwr): Rename from cygwin_strlwr.  Drop __stdcall
	decoration.
	(strupr): Rename from cygwin_strupr.  Drop __stdcall decoration.
	* string.h (strlwr): Remove override macro.  Simply declare.
	(strupr): Ditto.

2014-08-18  Corinna Vinschen  <corinna@@vinschen.de>

	* dtable.cc (dtable::init_std_file_from_handle): Mention that console
	handles are kernel objects since Windows 8.
	* fhandler.h (enum conn_state): Add "listener" state.
	(class fhandler_socket): Drop listener status flag.
	(fhandler_socket::lseek): Return -1 and errno ESPIPE.
	(fhandler_serial::lseek): Ditto.
	(fhandler_serial::is_tty): Remove.
	* fhandler_socket.cc (fhandler_socket::listen): Set connect_state to
	listener.  Add comment.
	(fhandler_socket::accept4): Explicitely check if the socket is listening
	and fail with EINVAL, if not.  Explain why we have to do that.
	(fhandler_socket::getpeereid): Drop now redundant test.

2014-08-15  Corinna Vinschen  <corinna@@vinschen.de>

	* winsup.h (_GNU_SOURCE): Define.  Explain why.

2014-08-14  Corinna Vinschen  <corinna@@vinschen.de>

	* dlmalloc.c: Remove unused file.
	* dlmalloc.h: Ditto.
	* malloc.cc: Update to Doug Lea's malloc version 2.8.6.

2014-08-13  Corinna Vinschen  <corinna@@vinschen.de>

	* include/cygwin/version.h (CYGWIN_VERSION_DLL_MINOR): Bump to 33.
	(CYGWIN_VERSION_API_MINOR): Bump to reflect intermediate 1.7.32 release.

2014-07-21  Corinna Vinschen  <corinna@@vinschen.de>

	* include/cygwin/version.h (CYGWIN_VERSION_DLL_MINOR): Bump to 32.

2014-05-06  Corinna Vinschen  <corinna@@vinschen.de>

	* winlean.h (PIPE_REJECT_REMOTE_CLIENTS): Drop temporary definition
	since Mingw64 catched up.
	(DNLEN): Redefine as 16.  Explain why.

2014-03-06  Corinna Vinschen  <corinna@@vinschen.de>

	* setlsapwd.cc (setlsapwd): Use RtlSecureZeroMemory to delete password
	from memory.

2014-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): Document atexit.

2014-10-28  Corinna Vinschen  <corinna@@vinschen.de>

	* cygwinenv.xml: Change default setting of dosfilewarning.
	* new-features.xml (ov-new1.7.33): Document aforementioned change.

2014-10-27  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): Document empty $PATH handling.

2014-10-22  Corinna Vinschen  <corinna@@vinschen.de>

	* posix.xml (std-gnu): Add ffsl, ffsll, quotactl.
	(std-notes): Add restrictions of quotactl.

2014-10-22  Yaakov Selkowitz  <yselkowi@@redhat.com>

	* new-features.xml (ov-new1.7.33): Document stime.
	* posix.xml (std-deprec): Add stime.

2014-10-22  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): s/Linux/glibc.

2014-10-22  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): Update to current state.

2014-08-13  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): Add new section.
	(ov-new1.7.32): Reflect intermediate 1.7.32 release.

2014-10-21  Corinna Vinschen  <corinna@@vinschen.de>

	* cygcheck.cc (CYGLSA64_DLL): Remove unused macro.
	(dump_sysinfo): If COMSPEC isn't set in the MSVCRT environment, set it.
	Explain why.
@
text
@d5 1
a5 1
   2008, 2009, 2010, 2011, 2012, 2013, 2014 Red Hat, Inc.
d399 2
a400 1
      stpcpy (stpcpy (native, name), in_native);
d406 1
d409 2
a410 1
      stpcpy (stpcpy (native, name), buf);
d483 2
a484 3
      tmp_pathbuf tp;
      char *cleanvalue = tp.c_get ();
      conv->towin32 (newvalue, cleanvalue, NT_MAX_PATH);
d667 8
a674 7
  __try
    {
      if (*str)
	{
	  char *eq = strchr (str, '=');
	  if (eq)
	    return _addenv (str, eq + 1, -1);
d676 2
a677 4
	  /* Remove str from the environment. */
	  unsetenv (str);
	}
      return 0;
d679 1
a679 3
  __except (EFAULT) {}
  __endtry
  return -1;
d687 4
a690 1
  __try
d692 2
a693 6
      if (!name || !*name || strchr (name, '='))
	{
	  set_errno (EINVAL);
	  __leave;
	}
      return _addenv (name, value, !!overwrite);
d695 1
a695 3
  __except (EFAULT) {}
  __endtry
  return -1;
d704 8
d713 5
a717 7
  __try
    {
      if (!name || *name == '\0' || strchr (name, '='))
	{
	  set_errno (EINVAL);
	  __leave;
	}
d719 1
a719 11
      while (my_findenv (name, &offset))	/* if set multiple times */
	/* Move up the rest of the array */
	for (e = cur_environ () + offset; ; e++)
	  if (!(*e = *(e + 1)))
	    break;

      return 0;
    }
  __except (EFAULT) {}
  __endtry
  return -1;
d825 1
d828 2
a829 7
  __try
    {
      char *tmpbuf = tp.t_get ();
      got_something_from_registry = regopt (L"default", tmpbuf);
      if (myself->progname[0])
	got_something_from_registry = regopt (myself->progname, tmpbuf)
				      || got_something_from_registry;
d831 5
a835 23
      if (!envp)
	envp_passed_in = 0;
      else
	{
	  envc++;
	  envc *= sizeof (char *);
	  char **newenv = (char **) malloc (envc);
	  memcpy (newenv, envp, envc);
	  cfree (envp);

	  /* Older applications relied on the fact that cygwin malloced elements of the
	     environment list.  */
	  envp = newenv;
	  if (ENVMALLOC)
	    for (char **e = newenv; *e; e++)
	      {
		char *p = *e;
		*e = strdup (p);
		cfree (p);
	      }
	  envp_passed_in = 1;
	  goto out;
	}
d837 23
a859 2
      /* Allocate space for environment + trailing NULL + CYGWIN env. */
      lastenviron = envp = (char **) malloc ((4 + (envc = 100)) * sizeof (char *));
d861 2
a862 30
      rawenv = GetEnvironmentStringsW ();
      if (!rawenv)
	{
	  system_printf ("GetEnvironmentStrings returned NULL, %E");
	  return;
	}
      debug_printf ("GetEnvironmentStrings returned %p", rawenv);

      /* Current directory information is recorded as variables of the
	 form "=X:=X:\foo\bar; these must be changed into something legal
	 (we could just ignore them but maybe an application will
	 eventually want to use them).  */
      for (i = 0, w = rawenv; *w != L'\0'; w = wcschr (w, L'\0') + 1, i++)
	{
	  sys_wcstombs_alloc (&newp, HEAP_NOTHEAP, w);
	  if (i >= envc)
	    envp = (char **) realloc (envp, (4 + (envc += 100)) * sizeof (char *));
	  envp[i] = newp;
	  if (*newp == '=')
	    *newp = '!';
	  char *eq = strchrnul (newp, '=');
	  ucenv (newp, eq);	/* uppercase env vars which need it */
	  if (*newp == 'T' && strncmp (newp, "TERM=", 5) == 0)
	    sawTERM = 1;
	  else if (*newp == 'C' && strncmp (newp, "CYGWIN=", 7) == 0)
	    parse_options (newp + 7);
	  if (*eq)
	    posify_maybe (envp + i, *++eq ? eq : --eq, tmpbuf);
	  debug_printf ("%p: %s", envp[i], envp[i]);
	}
d864 2
a865 22
      if (!sawTERM)
	envp[i++] = strdup (cygterm);
      envp[i] = NULL;
      FreeEnvironmentStringsW (rawenv);

    out:
      findenv_func = (char * (*)(const char*, int*)) my_findenv;
      __cygwin_environ = envp;
      update_envptrs ();
      if (envp_passed_in)
	{
	  p = getenv ("CYGWIN");
	  if (p)
	    parse_options (p);
	}

      if (got_something_from_registry)
	parse_options (NULL);	/* possibly export registry settings to
				       environment */
      MALLOC_CHECK;
    }
  __except (NO_ERROR)
d867 2
a868 2
      api_fatal ("internal error reading the windows environment "
		 "- too many environment variables?");
d870 45
a914 1
  __endtry
a1019 15
static inline int
raise_envblock (int new_tl, PWCHAR &envblock, PWCHAR &s)
{
  int tl = new_tl + 100;
  PWCHAR new_envblock =
	    (PWCHAR) realloc (envblock, (2 + tl) * sizeof (WCHAR));
  /* If realloc moves the block, move `s' with it. */
  if (new_envblock != envblock)
    {
      s += new_envblock - envblock;
      envblock = new_envblock;
    }
  return tl;
}

d1084 8
a1091 8
	*dstp = spenvs[i].retrieve (false);
	if (*dstp && *dstp != env_dontadd)
	  {
	    *pass_dstp++ = *dstp;
	    tl += strlen (*dstp) + 1;
	    dstp++;
	  }
      }
a1113 1
      bool saw_PATH = false;
d1132 1
a1132 11
	    {
	      p = conv->native;	/* Use win32 path */
	      /* Does PATH exist in the environment? */
	      if (**srcp == 'P')
		{
		  /* And is it non-empty? */
		  if (!conv->native || !conv->native[0])
		    continue;
		  saw_PATH = true;
		}
	    }
d1141 11
a1151 1
	    tl = raise_envblock (new_tl, envblock, s);
d1153 1
a1153 1
	  len = sys_mbstowcs (s, len, p);
d1162 1
a1162 11
	  s += len + 1;
	}
      /* If PATH doesn't exist in the environment, add a PATH with just
	 Cygwin's bin dir to the Windows env to allow loading system DLLs
	 during execve. */
      if (!saw_PATH)
	{
	  new_tl += cygheap->installation_dir_len + 5;
	  if (new_tl > tl)
	    tl = raise_envblock (new_tl, envblock, s);
	  s = wcpcpy (wcpcpy (s, L"PATH="), cygheap->installation_dir) + 1;
@


1.208
log
@cygwin directory changes:
	* environ.cc (tty_is_gone): Delete.
	(known): Delete tty, add wincmdln.
	* globals.cc: Reorganize list of environment bools, remove explicit =
	false for slight load time optimization.
	(wincmdln): New global.
	* spawn.cc (child_info_spawn::worker): Honor wincmdln.

doc directory changes:
	* new-features.sgml (ov-new1.7.23): Add new section.  Mention wincmdln.
	* cygwinenv.xml: Mention wincmdln.
@
text
@a18 1
#include <winnls.h>
@


1.208.2.1
log
@* environ.cc (known): Add preload keyword.
* external.cc: Include new callout.h header.
(cygwin_internal): Initial implementation of CW_CALLOUT and CW_CYGHEAP_MALLOC.
(dll_preload): Handle CYGWIN=preload:foo.dll.
(dummy_callout): Default NULL callout function.
* globals.cc: Include new callout.h header.
(callout): Declare/define.
* uname.cc (uname): Initial implementation of callout handling.
* winsup.h (dll_preload): Declare.
* include/cygwin/version.h: Bump API minor number to 269.
* include/sys/cygwin.h: Define CW_CALLOUT, CW_CYGHEAP_MALLOC.
@
text
@a132 1
  {"preload", {func: dll_preload}, isfunc,  NULL, {{0}, {0}}},
@


1.207
log
@	* cygwin.sc.in (.text.*): Fold into .text on all platforms.
	(.eh_frame): Add section.
	* environ.cc (my_findenv): Drop __stdcall attribute.
	(getearly): Ditto.
	(findenv_func): Drop cast.
@
text
@a79 13
tty_is_gone (const char *buf)
{
  if (!user_shared->warned_notty)
    {
      small_printf ("\"tty\" option detected in CYGWIN environment variable.\n"
		    "CYGWIN=tty is no longer supported.  Please remove it from your\n"
		    "CYGWIN environment variable and use a terminal emulator like mintty,\n"
		    "xterm, or rxvt.\n");
      user_shared->warned_notty = 1;
    }
}

static void
d136 1
a136 1
  {"tty", {func: tty_is_gone}, isfunc, NULL, {{0}, {0}}},
@


1.206
log
@	* environ.cc (win_env::add_cache): Set the Windows environment variable
	using wide chars to make sure native chars don't get scrambled.
	* environ.h (build_env): Fix formatting in declaration.
	* pinfo.cc (pinfo::status_exit): Handle STATUS_NO_MEMORY.  Explain why.
@
text
@d473 1
a473 1
static char * __stdcall
d501 1
a501 1
static char __stdcall *
d523 1
a523 1
static char * (*findenv_func)(const char *, int *) = (char * (*)(const char *, int *)) getearly;
@


1.205
log
@	* environ.cc (set_winsymlinks): Handle "winsymlinks:nativestrict"
	option.  On pre-Vista warn the user if the "winsymlinks:native*" option
	is set.
	* globals.cc (enum winsym_t): Add WSYM_nativestrict.
	* path.cc (symlink_native): Don't create native symlink if target
	does not exist.  Explain why.  Improve comments.
	(symlink_worker): Change AFS symlink handling to WSYM_nativestrict.
	Handle WSYM_nativestrict throughout.  Change condition for bail out
	to wsym_type == WSYM_nativestrict.  Add comment.  Fix formatting.
	* shared_info.h (CURR_USER_MAGIC): Change to reflect change in
	class user_info.
	(class user_info): Add member warned_nonativesyms.
@
text
@d389 5
a393 5
      char s[namelen];
      size_t n = namelen - 1;
      memcpy (s, name, n);
      s[n] = '\0';
      SetEnvironmentVariable (s, native + namelen);
@


1.204
log
@	* autoload.cc (CreateSymbolicLink): Define.
	* environ.cc (set_winsymlinks): Set allow_winsymlinks.
	(parse_thing): Change "winsymlinks" to set by function.
	* globals.cc (enum winsym_t): Define.
	(allow_winsymlinks): Define as winsym_t.
	(ro_u_afs): New R/O Unicode string.
	* mount.cc (fs_info::update): Fix comment.  Handle AFS.
	(fs_names): Add "afs".
	* mount.h (enum fs_info_type): Add afs.
	(class fs_info): Implement afs.
	* path.cc (symlink): Drop third parameter in call to symlink_worker.
	(symlink_nfs): New function.
	(symlink_native): New function.
	(symlink_worker): Drop third argument.  Handle native symlink type by
	calling symlink_native.  Move code to handle NFS to symlink_nfs.  Fix
	formatting.  Slightly restructure code.
	* path.h (class path_conv): Add fs_is_afs method.
	(symlink_worker): Declare here.
	* security.h: Define privilege constants as unsigned int instead of as
	unsigned long.
	* syscalls.cc (mknod_worker): Set third parameter in symlink_worker
	call to WSYM_lnk.
	* winsup.h (symlink_worker): Drop declaration here.
@
text
@d100 16
a115 3
  else if (ascii_strncasematch (buf, "native", 6)
	   && wincap.max_sys_priv () >= SE_CREATE_SYMBOLIC_LINK_PRIVILEGE)
    allow_winsymlinks = WSYM_native;
@


1.203
log
@	* Merge in cygwin-64bit-branch.
@
text
@d92 13
d137 1
a137 1
  {"winsymlinks", {&allow_winsymlinks}, setbool, NULL, {{false}, {true}}},
@


1.202
log
@Throughout, change __attribute__ ((regparm (N))) to just __regN.  Throughout,
(mainly in fhandler*) start fixing gcc 4.7.2 mismatch between regparm
definitions and declarations.
* gendef: Define some functions to take @@ declaration to accommodate _regN
defines which use __stdcall.
* gentls_offsets: Define __regN macros as empty.
* autoload.cc (wsock_init): Remove unneeded regparm attribute.
* winsup.h (__reg1): Define.
(__reg2): Define.
(__reg3): Define.
* advapi32.cc (DuplicateTokenEx): Coerce some initializers to avoid warnings
from gcc 4.7.2.
* exceptions.cc (status_info): Declare struct to use NTSTATUS.
(cygwin_exception::dump_exception): Coerce e->ExceptionCode to NTSTATUS.
* fhandler_clipboard.cc (cygnativeformat): Redefine as UINT to avoid gcc 4.7.2
warnings.
(fhandler_dev_clipboard::read): Ditto.
@
text
@d190 1
a190 1
		debug_printf ("%s %d", k->name, *k->setting.x);
d1051 1
a1051 1
      debug_printf ("env count %d, bytes %d", pass_envc, tl);
d1121 1
d1137 1
@


1.201
log
@        * dcrt0.cc (quoted): Renamed strechr to strchrnul.
        * environ.cc (environ_init): Likewise.
        * sec_acl.cc (aclfromtext32): Likewise.
        * sec_auth.cc (extract_nt_dom_user): Likewise.
        * uinfo.cc (pwdgrp::next_str): Likewise.
        * string.h (strechr): Likewise.
@
text
@d4 2
a5 2
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
   2006, 2007, 2008, 2009, 2010, 2011, 2012 Red Hat, Inc.
d378 1
a378 1
win_env * __stdcall
d875 1
a875 1
char * __stdcall
d910 1
a910 2
  char *retrieve (bool, const char * const = NULL)
    __attribute__ ((regparm (3)));
d974 1
a974 1
char ** __stdcall
@


1.200
log
@* environ.cc (struct parse_thing): Add temporary (?) "pipe_byte" option.
* globals.cc (pipe_byte): Declare.
* pipe.cc (fhandler_pipe::create): Use current process id in pipe name rather
than pid for simple name collision avoidance.  Do this only once to avoid extra
overhead when a busy pipe is found.  Honor pipe_byte to create non-message
pipes if set.
* sigproc.cc (sigproc_init): Use a specific name for the signal pipe.
@
text
@d832 1
a832 1
      char *eq = strechr (newp, '=');
@


1.200.2.1
log
@        * dcrt0.cc (quoted): Renamed strechr to strchrnul.
        * environ.cc (environ_init): Likewise.
        * sec_acl.cc (aclfromtext32): Likewise.
        * sec_auth.cc (extract_nt_dom_user): Likewise.
        * uinfo.cc (pwdgrp::next_str): Likewise.
        * string.h (strechr): Likewise.
@
text
@d832 1
a832 1
      char *eq = strchrnul (newp, '=');
@


1.200.2.2
log
@	* Throughout, fix format string of debug printf and api_fatal calls
	to work in 32 and 64 bit environment, as well as to honor signedness.
	Use %y instead of 0x%x.
	* fhandler.h (class fhandler_dev_mem): Change type of mem_size from
	DWORD to SIZE_T.
	* fhandler_mem.cc: Throughout, cast mem_size in comparisons to make
	GCC happy.
	* fhandler_process.cc (format_process_maps): Change type of ret_len
	to SIZE_T.
	(get_mem_values): Ditto for n and length.
	* mmap.cc (MapView): Ditto for commitsize and viewsize.
	(class mmap_record): Ditto for len.  Use SIZE_T througout for memory
	size in method args and return types.
	* ntdll.h (NtLockVirtualMemory): Fix type of memory size parameters
	to SIZE_T.
	(NtMapViewOfSection): Ditto.
	(NtQueryVirtualMemory): Ditto.
	(NtUnlockVirtualMemory): Ditto.
	(RtlFreeHeap): Change type of first parameter to HANDLE.
	* shm.cc (shmat): Change type of viewsize to SIZE_T.
	* timer.cc (timer_thread): Change type of sleep_ms to LONG.
	(ualarm): Drop casts to unsigned int in timer value computation.
@
text
@d190 1
a190 1
		debug_printf ("%s %u", k->name, *k->setting.x);
d1052 1
a1052 1
      debug_printf ("env count %ld, bytes %d", pass_envc, tl);
@


1.200.2.3
log
@Pull in changes from HEAD
@
text
@d4 2
a5 2
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
   2008, 2009, 2010, 2011, 2012, 2013 Red Hat, Inc.
d378 1
a378 1
win_env * __reg3
d875 1
a875 1
char * __reg3
d910 2
a911 1
  char __reg3 *retrieve (bool, const char * const = NULL);
d975 1
a975 1
char ** __reg3
@


1.200.2.4
log
@	For x86_64 target:
	* Makefile.in (COMMON_CFLAGS): Add -mcmodel=small to create smaller
	footprint.
	* cygwin64.din (__cygwin_environ): Drop export.  Only export environ
	as alias to __cygwin_environ.
	* dcrt0.cc (dll_crt0_1): Call main with __cygwin_environ as parameter.
	(_dll_crt0): Don't set main_environ.
	(cygwin_dll_init): Don't create local variable envp and don't set
	user_data->envptr.
	* dll_init.cc (dll_list::alloc): Don't assert.
	* dll_init.h (per_module::operator =): Don't set envptr.
	* environ.cc (cur_environ): Disable.
	* environ.h (main_environ): Don't define.
	(cur_environ): Change to macro.
	* globals.cc (main_environ): Don't initialize.
	(struct per_process): Drop envptr.
	* perprocess.h (SIZEOF_PER_PROCESS): Set to 41*8 to accommodate size
	change of struct per_process.
	* include/sys/cygwin.h (struct per_process): Drop envptr.
	* lib/_cygwin_crt0_common.cc (environ): Drop declaration.
	(_cygwin_crt0_common): Don't set u->envptr.
@
text
@a1120 1
#ifndef __x86_64__
a1135 1
#endif
@


1.199
log
@	* environ.cc (enum settings): Add setbool.  Rename justset to setdword
	to avoid future problems.
	(struct parse_thing): Change all justset to setbool for bool variables.
	(parse_options): Add a case for setbool setting for bool variables
	since justset (now setdword) always writes a DWORD value, thus
	potentially overwriting adjacent memory locations.
	* external.cc (cygwin_internal): Drop extern declaration.
@
text
@d120 1
@


1.198
log
@	* environ.cc (dos_file_warning): Drop declaration.
	(ignore_case_with_glob): Ditto.
	(allow_winsymlinks): Ditto.
	(reset_com): Move definition to globals.cc.
	(struct parse_thing): Add "detect_bloda" option.
	* fhandler_serial.cc (fhandler_serial::open): Drop (incorrect)
	declaration of reset_com.
	* globals.cc (ignore_case_with_glob): Move definition into C++-only
	block.
	(dos_file_warning): Define.
	(allow_winsymlinks): Define.
	(reset_com): Define.
	(detect_bloda): Define.
	* path.cc (dos_file_warning): Drop definition here.
	(allow_winsymlinks): Drop definition here.
@
text
@a42 1
    justset,
d44 2
d115 2
a116 2
  {"detect_bloda", {&detect_bloda}, justset, NULL, {{false}, {true}}},
  {"dosfilewarning", {&dos_file_warning}, justset, NULL, {{false}, {true}}},
d118 1
a118 1
  {"export", {&export_settings}, justset, NULL, {{false}, {true}}},
d121 1
a121 1
  {"reset_com", {&reset_com}, justset, NULL, {{false}, {true}}},
d123 2
a124 2
  {"winsymlinks", {&allow_winsymlinks}, justset, NULL, {{false}, {true}}},
  {NULL, {0}, justset, 0, {{0}, {0}}}
d184 1
a184 1
	      case justset:
d191 7
@


1.197
log
@Clean up whitespace.
@
text
@d5 1
a5 1
   2006, 2007, 2008, 2009, 2010, 2011 Red Hat, Inc.
a34 5
extern bool dos_file_warning;
extern bool ignore_case_with_glob;
extern bool allow_winsymlinks;
bool reset_com = false;

d114 1
@


1.196
log
@* dtable.cc (conv_start_chars): Remove unneeded section attribute.
@
text
@d305 1
a305 1
    WC,       0,        0,        0,        WC,       0,        0,        0, 
@


1.195
log
@* dtable.cc: Mark some const variables as static.
* environ.cc (conv_start_chars): Move to shared cygwin region and initialize at
compile time.
(match_first_char): New generic function for querying conv_start_chars.
(posify_maybe): Rename from posify.
(environ_init): Remove conv_envvars initialization.  Don't check
conv_start_chars, just allow posify_maybe to make the decision.
* fhandler_console.cc (__vt100_conv): Fix formatting.  Mark as const.
@
text
@d276 1
a276 2
static const unsigned char conv_start_chars[256]
  __attribute__((section (".cygwin_dll_common"), shared)) =
@


1.194
log
@* environ.cc (tty_is_gone): Wrap warning at 80 characters.
@
text
@d271 43
a313 1
static unsigned char conv_start_chars[256] = {0};
d377 1
a377 1
  if (!conv_start_chars[(unsigned char)*env])
d404 2
a405 2
static void __stdcall
posify (char **here, const char *value, char *outenv)
d698 1
a774 7
  if (!conv_start_chars[0])
    for (int i = 0; conv_envvars[i].name != NULL; i++)
      {
	conv_start_chars[(int) cyg_tolower (conv_envvars[i].name[0])] = 1;
	conv_start_chars[(int) cyg_toupper (conv_envvars[i].name[0])] = 1;
      }

d834 2
a835 2
      if (*eq && conv_start_chars[(unsigned char) envp[i][0]])
	posify (envp + i, *++eq ? eq : --eq, tmpbuf);
@


1.193
log
@	* environ.cc (environ_init): Reinstantiate on-the-fly CYGWIN variable
	test and call to parse_options if found.
@
text
@d90 2
a91 2
		    "CYGWIN environment variable and use a terminal emulator like mintty, "
		    "xterm, or rxvt\n");
@


1.192
log
@* environ.cc (create_upcaseenv): Delete.
(ucenv): Don't honor create_upcaseenv.
(environ_init): Remove early retrieval of CYGWIN environment variable.  Change
comment to reflect new behavior.
@
text
@d796 2
@


1.191
log
@* child_info.h (CURR_CHILD_INFO_MAGIC): Reset.
(child_info::old_title): Delete.
(child_info::~child_info_spawn): Remove recording of old_title.
* dcrt0.cc (title_buf): Delete.
(child_info_spawn::handle_spawn): Remove recording of old_title.
(dll_crt0_1): Get rid of all title handling.
(do_exit): Ditto.
* environ.cc (known): Delete strip_title and title.
* fhandler_console.cc (fhandler_console::write): Remove recording of old_title.
* globals.cc (exit_states): Remove ES_TITLE.
(display_title): Delete.
(strip_title_path): Delete.
(old_title): Delete.
* spawn.cc (spawn_guts): Remove old_title accommodation.
@
text
@a38 1
static bool create_upcaseenv = false;
a125 1
  {"upcaseenv", {&create_upcaseenv}, justset, NULL, {{false}, {true}}},
d662 2
a663 2
/* Turn environment variable part of a=b string into uppercase.
   Conditionally controlled by upcaseenv CYGWIN setting.  */
d667 13
a679 30
  if (create_upcaseenv)
    {
      /* Amazingly, NT has a case sensitive environment name list,
	 but only sometimes.
	 It's normal to have NT set your "Path" to something.
	 Later, you set "PATH" to something else.  This alters "Path".
	 But if you try and do a naive getenv on "PATH" you'll get nothing.

	 So we upper case the labels here to prevent confusion later but
	 we only do it for processes that are started by non-Cygwin programs. */
      for (; p < eq; p++)
	if (islower (*p))
	  *p = cyg_toupper (*p);
    }
  else
    {
      /* Hopefully as quickly as possible - only upcase specific set of important
	 Windows variables. */
      char first = cyg_toupper (*p);
      const char *idx = strchr (idx_arr, first);
      if (idx)
	for (size_t i = start_at[idx - idx_arr];
	     i < RENV_SIZE && renv_arr[i].name[0] == first;
	     ++i)
	  if (strncasematch (p, renv_arr[i].name, renv_arr[i].namelen))
	    {
	      strncpy (p, renv_arr[i].name, renv_arr[i].namelen);
	      break;
	    }
    }
a771 9
  /* We also need the CYGWIN variable early to know the value of the
     CYGWIN=upcaseenv setting for the below loop. */
  if ((i = GetEnvironmentVariableA ("CYGWIN", NULL, 0)))
    {
      char *buf = (char *) alloca (i);
      GetEnvironmentVariableA ("CYGWIN", buf, i);
      parse_options (buf);
    }

d793 1
a793 1
      ucenv (newp, eq);	/* (possibly conditionally) uppercase env vars. */
@


1.190
log
@* environ.cc (envcache): Delete.
(known): Remove envcache.
(getwinenv): Don't honor envcache setting.
@
text
@a125 2
  {"strip_title", {&strip_title_path}, justset, NULL, {{false}, {true}}},
  {"title", {&display_title}, justset, NULL, {{false}, {true}}},
@


1.189
log
@* environ.c: Move code earlier to allow:
(_addenv): Call parse_options() when CYGWIN environment variable is being
changed.
(parse_options): Change parameter to 'const'.
@
text
@a38 1
static bool envcache = true;
a120 1
  {"envcache", {&envcache}, justset, NULL, {{true}, {false}}},
d350 1
a350 1
	else if (!envcache || !we->posix || strcmp (val, we->posix) != 0)
@


1.188
log
@* environ.cc (tty_is_gone): Add missing space to message.
@
text
@d44 178
d564 2
a704 178
/* Parse CYGWIN options */

static NO_COPY bool export_settings = false;

enum settings
  {
    justset,
    isfunc,
    setbit
  };

/* When BUF is:
   null or empty: disables globbing
   "ignorecase": enables case-insensitive globbing
   anything else: enables case-sensitive globbing */
static void
glob_init (const char *buf)
{
  if (!buf || !*buf)
    {
      allow_glob = false;
      ignore_case_with_glob = false;
    }
  else if (ascii_strncasematch (buf, "ignorecase", 10))
    {
      allow_glob = true;
      ignore_case_with_glob = true;
    }
  else
    {
      allow_glob = true;
      ignore_case_with_glob = false;
    }
}

static void
set_proc_retry (const char *buf)
{
  child_info::retry_count = strtoul (buf, NULL, 0);
}

static void
tty_is_gone (const char *buf)
{
  if (!user_shared->warned_notty)
    {
      small_printf ("\"tty\" option detected in CYGWIN environment variable.\n"
		    "CYGWIN=tty is no longer supported.  Please remove it from your\n"
		    "CYGWIN environment variable and use a terminal emulator like mintty, "
		    "xterm, or rxvt\n");
      user_shared->warned_notty = 1;
    }
}

/* The structure below is used to set up an array which is used to
   parse the CYGWIN environment variable or, if enabled, options from
   the registry.  */
static struct parse_thing
  {
    const char *name;
    union parse_setting
      {
	bool *b;
	DWORD *x;
	int *i;
	void (*func)(const char *);
      } setting;

    enum settings disposition;
    char *remember;
    union parse_values
      {
	DWORD i;
	const char *s;
      } values[2];
  } known[] NO_COPY =
{
  {"dosfilewarning", {&dos_file_warning}, justset, NULL, {{false}, {true}}},
  {"envcache", {&envcache}, justset, NULL, {{true}, {false}}},
  {"error_start", {func: error_start_init}, isfunc, NULL, {{0}, {0}}},
  {"export", {&export_settings}, justset, NULL, {{false}, {true}}},
  {"glob", {func: glob_init}, isfunc, NULL, {{0}, {s: "normal"}}},
  {"proc_retry", {func: set_proc_retry}, isfunc, NULL, {{0}, {5}}},
  {"reset_com", {&reset_com}, justset, NULL, {{false}, {true}}},
  {"strip_title", {&strip_title_path}, justset, NULL, {{false}, {true}}},
  {"title", {&display_title}, justset, NULL, {{false}, {true}}},
  {"tty", {func: tty_is_gone}, isfunc, NULL, {{0}, {0}}},
  {"upcaseenv", {&create_upcaseenv}, justset, NULL, {{false}, {true}}},
  {"winsymlinks", {&allow_winsymlinks}, justset, NULL, {{false}, {true}}},
  {NULL, {0}, justset, 0, {{0}, {0}}}
};

/* Parse a string of the form "something=stuff somethingelse=more-stuff",
   silently ignoring unknown "somethings".  */
static void __stdcall
parse_options (char *buf)
{
  int istrue;
  char *p, *lasts;
  parse_thing *k;

  if (buf == NULL)
    {
      tmp_pathbuf tp;
      char *newbuf = tp.c_get ();
      newbuf[0] = '\0';
      for (k = known; k->name != NULL; k++)
	if (k->remember)
	  {
	    strcat (strcat (newbuf, " "), k->remember);
	    free (k->remember);
	    k->remember = NULL;
	  }

      if (export_settings)
	{
	  debug_printf ("%s", newbuf + 1);
	  setenv ("CYGWIN", newbuf + 1, 1);
	}
      return;
    }

  buf = strcpy ((char *) alloca (strlen (buf) + 1), buf);
  for (p = strtok_r (buf, " \t", &lasts);
       p != NULL;
       p = strtok_r (NULL, " \t", &lasts))
    {
      char *keyword_here = p;
      if (!(istrue = !ascii_strncasematch (p, "no", 2)))
	p += 2;
      else if (!(istrue = *p != '-'))
	p++;

      char ch, *eq;
      if ((eq = strchr (p, '=')) != NULL || (eq = strchr (p, ':')) != NULL)
	ch = *eq, *eq++ = '\0';
      else
	ch = 0;

      for (parse_thing *k = known; k->name != NULL; k++)
	if (ascii_strcasematch (p, k->name))
	  {
	    switch (k->disposition)
	      {
	      case isfunc:
		k->setting.func ((!eq || !istrue) ?
		  k->values[istrue].s : eq);
		debug_printf ("%s (called func)", k->name);
		break;
	      case justset:
		if (!istrue || !eq)
		  *k->setting.x = k->values[istrue].i;
		else
		  *k->setting.x = strtol (eq, NULL, 0);
		debug_printf ("%s %d", k->name, *k->setting.x);
		break;
	      case setbit:
		*k->setting.x &= ~k->values[istrue].i;
		if (istrue || (eq && strtol (eq, NULL, 0)))
		  *k->setting.x |= k->values[istrue].i;
		debug_printf ("%s %x", k->name, *k->setting.x);
		break;
	      }

	    if (eq)
	      *--eq = ch;

	    int n = eq - p;
	    p = strdup (keyword_here);
	    if (n > 0)
	      p[n] = ':';
	    k->remember = p;
	    break;
	  }
      }
  debug_printf ("returning");
}

@


1.187
log
@* environ.cc (settings::set_process_state): Delete.
(tty_is_gone): New function.
(known): Change "tty" to call tty_is_gone().  Remove unneeded '&' from
beginning of function address.
(parse_options): Remove set_process_state handling.
* shared_info.h (CURR_USER_MAGIC): Reset.
(user_info::warned_notty): New member.
@
text
@d573 1
a573 1
		    "CYGWIN environment variable and use a terminal emulator like mintty,"
@


1.186
log
@	* environ.cc (set_chunksize): Remove.
	(parse_thing): Remove forkchunk entry.
	* fork.cc (child_copy): Drop handling external chunksize setting.
	* wincap.cc: Througout, drop chunksize.
	(wincapc::set_chunksize): Remove.
	* wincap.h (struct wincaps): Drop chunksize and declaration of
	set_chunksize.
@
text
@d32 1
d533 1
a533 2
    setbit,
    set_process_state,
d566 13
d604 1
a604 1
  {"error_start", {func: &error_start_init}, isfunc, NULL, {{0}, {0}}},
d606 1
a606 1
  {"glob", {func: &glob_init}, isfunc, NULL, {{0}, {s: "normal"}}},
d611 1
a611 1
  {"tty", {NULL}, set_process_state, NULL, {{0}, {PID_USETTY}}},
a680 3
	      case set_process_state:
		k->setting.x = &myself->process_state;
		/* fall through */
@


1.185
log
@	* registry.cc (reg_key::get_dword): Rename from get_int, use DWORD
	rather than int type.  Avoid compiler warning.
	(reg_key::set_dword): Rename from set_int, use DWORD rather than int
	type.  Change return type to NTSTATUS.
	(reg_key::get_string): Change return type to NTSTATUS.
	(reg_key::set_string): Ditto.
	* registry.h: Accommodate above changes.
	* environ.cc (regopt): Test return value of reg_key::get_string as
	NTSTATUS.
	* sched.cc (sched_rr_get_interval): Change local int vars to DWORD.
	Call reg_key::get_dword instead of reg_key::get_int.
	* shared.cc (init_installation_root): Test return value of
	reg_key::get_string as NTSTATUS.
	(shared_info::heap_slop_size): Call reg_key::get_dword rather than
	reg_key::get_int.
	(shared_info::heap_chunk_size): Ditto.
	* shared_info.h (CURR_SHARED_MAGIC): Update.
	(class shared_info): Change heap_chunk and heap_slop to DWORD  values.
@
text
@a560 6
set_chunksize (const char *buf)
{
  wincap.set_chunksize (strtoul (buf, NULL, 0));
}

static void
a592 1
  {"forkchunk", {func: set_chunksize}, isfunc, NULL, {{0}, {0}}},
@


1.184
log
@	* Makefile.in (DLL_IMPORTS): Drop advapi32.dll.
	* autoload.cc: Enable autoloading advapi32 functions.
	* environ.cc (regopt): Use wide char arguments in reg_key functions.
	* fhandler_console.cc (beep): Ditto.  Use WCHAR throughout.
	* registry.cc (reg_key): Rewrite reg_key class to use native NT registry
	functions.  Use WCHAR string parameters throughout.  Use PCWSTR rather
	than const WCHAR.  Drop multibyte char functionality.  Drop unused
	methods.
	(get_registry_hive_path): Use RtlQueryRegistryValues to fetch path from
	registry.
	(load_registry_hive): Drop useless check for user hive being available.
	Load hive using NtLoadKey.
	* registry.h: Accommodate above changes.
	* sched.cc (sched_rr_get_interval): Use wide char arguments in reg_key
	functions.
	* shared.cc (init_installation_root): Ditto.
	(shared_info::init_obcaseinsensitive): Use RtlQueryRegistryValues to
	fetch obcaseinsensitive value.
	(shared_info::heap_slop_size): Use wide char arguments in reg_key
	functions.
	(shared_info::heap_chunk_size): Ditto.
	* syscalls.cc (gethostid): Ditto.
	* winsup.h (__WIDE): Define.
	(_WIDE): Define.
	* libc/minires-os-if.c (get_registry_dns_items): Don't fetch values
	from registry.  Just extract them from given UNICODE_STRING parameter.
	(get_registry_dns): Fetch all registry values at once using
	RtlQueryRegistryValues.
@
text
@d715 2
a716 1
      if (r.get_string (lname.Buffer, (PWCHAR) buf, NT_MAX_PATH, L"") == ERROR_SUCCESS)
@


1.183
log
@* environ.cc (regopt): Change the first argument to wide char string.
(environ_init): Accommodate change to the first argument of regopt.
* exception.cc (open_stackdumpfile): Accommodate change to the type of progname
in _pinfo.
* external.cc (fillout_pinfo): Ditto.
* fhandler_process.cc (format_process_winexename): Ditto.
(format_process_stat): Ditto.
* fork.cc (fork::parent): Ditto.
* pinfo.cc (pinfo_basic::pinfo_basic): Call GetModuleFileNameW instead of
GetModuleFileName.
(pinfo::thisproc): Accommodate change to the type of progname in _pinfo.
(pinfo_init): Ditto.
* pinfo.h (_pinfo): Change the type of progname to a wide char array.
* registry.h (reg_key::get_int): Change the first argument from constant point
to pointer to constant.
(reg_key::get_string): Ditto.  Change the last argument likewise.
* registry.cc (reg_key::get_int): Accommodate change to the declaration.
(reg_key::get_string): Ditto.
* strace.cc (strace::hello): Accommodate change to the type of progname in
_pinfo.
(strace::vsprntf): Ditto.
@
text
@d5 1
a5 1
   2006, 2007, 2008, 2009 Red Hat, Inc.
d713 1
a713 1
      reg_key r (i, KEY_READ, CYGWIN_INFO_PROGRAM_OPTIONS_NAME, NULL);
@


1.182
log
@Fix setenv and unsetenv corner cases.

* environ.cc (setenv): Detect invalid argument.
(unsetenv): Distinguish EFAULT from EINVAL.
@
text
@d32 1
d702 1
a702 1
regopt (const char *name, char *buf)
d705 5
a709 2
  char lname[strlen (name) + 1];
  strlwr (strcpy (lname, name));
d715 1
a715 1
      if (r.get_string (lname, buf, NT_MAX_PATH, "") == ERROR_SUCCESS)
d717 3
d757 1
a757 1
  got_something_from_registry = regopt ("default", tmpbuf);
@


1.181
log
@	* cygheap.cc (cygheap_init): Default locale.charset to "UTF-8".
	* dcrt0.cc (dll_crt0_1): Call setlocale (LC_CTYPE, "") here, just
	before resetting application locale to "C".
	* environ.cc (environ_init): Drop code setting locale here.
	* syscalls.cc (check_codepage): Break out check for required codepage
	from internal_setlocale.
	(internal_setlocale): Just convert CWD and $PATH from old charset to
	new charset and set internal charset.
	(setlocale): Change accordingly.  Don't require LC_ALL or LC_CTYPE to
	store old locale value.  Always call internal_setlocale if charset
	changed due to locale environment changes.
@
text
@d416 5
a420 4
  if (!*name)
    return 0;
  if (*value == '=')
    value++;
d431 3
a433 1
  if (efault.faulted () || *name == '\0' || strchr (name, '='))
@


1.180
log
@	* cygheap.cc (cygheap_init): Set Cygwin default locale values.
	* cygheap.h (struct cygheap_locale): New structure.
	(struct user_heap_info): Add cygheap_locale member locale.
	* dcrt0.cc (dll_crt0_1): Revert to calling _setlocale_r so that only
	the applications locale is reverted to "C".
	* environ.cc (environ_init): Remove unused got_lc variable.
	* fhandler.h (class dev_console): Remove now unsed locale variables.
	* fhandler_console.cc (fhandler_console::get_tty_stuff): Remove
	setting dev_console's locale members.
	(dev_console::con_to_str): Use internal locale settings.  Default to
	__ascii_wctomb if charset is "ASCII".
	(fhandler_console::write_normal): Ditto.
	* strfuncs.cc (__ascii_wctomb): Drop declaration.
	(__db_wctomb): Use fixed value 2 instead of not
	necessarily matching MB_CUR_MAX.
	(__eucjp_wctomb): Use 3 instead of MB_CUR_MAX.
	(sys_cp_wcstombs): Remove special case for "C" locale.
	(sys_wcstombs): Implement here.  Use internal locale data stored on
	cygheap.
	(sys_cp_mbstowcs): Remove special case for "C" locale.
	(sys_mbstowcs): Implement here.  Use internal locale data stored on
	cygheap.
	* syscalls.cc (internal_setlocale): New function to set cygheap locale
	data and to reset CWD posix path.
	(setlocale): Just call internal_setlocale from here if necessary.
	* wchar.h (__ascii_wctomb): Declare.
	(sys_wcstombs): Don't define inline, just declare.
	(sys_mbstowcs): Ditto.
@
text
@a734 1
  static const char *lc_arr[] = { "LC_ALL", "LC_CTYPE", "LANG", NULL };
a778 16
  /* We need the locale variables' content before we can loop through
     the whole environment, so that the wide-char to multibyte conversion
     can be done according to the $LC_ALL/$LC_CTYPE/$LANG/current_codepage
     setting, as well as the uppercasing according to the "upcaseenv"
     setting.  Note that we have to reset the LC_CTYPE setting to "C"
     before calling main() for POSIX compatibility. */
  for (int lc = 0; lc_arr[lc]; ++lc)
    {
      if ((i = GetEnvironmentVariableA (lc_arr[lc], NULL, 0)))
      	{
	  char *buf = (char *) alloca (i);
	  GetEnvironmentVariableA (lc_arr[lc], buf, i);
	  if (setlocale (LC_CTYPE, buf))
	    break;
	}
    }
@


1.179
log
@	* cygheap.h (cwdstuff): Convert to class.  Make posix and dir private.
	(cwdstuff::get_posix): New method.
	(cwdstuff::reset_posix): New method.
	* dcrt0.cc (dll_crt0_1): Call setlocale rather than _setlocale_r.
	* environ.cc (environ_init): Ditto.  Prefer "C" locale over current
	codepage default locale.
	* path.cc (chdir): Use cwdstuff::get_posix method instead of accessing
	cwdstuff::posix directly.
	(cwdstuff::set): Defer creating posix path to first usage.
	(cwdstuff::get_posix): Create posix path if it's empty, and return it.
	(cwdstuff::get): Create posix path if it's empty.
	* strfuncs.cc (sys_cp_wcstombs): Use UTF-8 conversion in the "C"
	locale.
	(sys_cp_mbstowcs): Ditto.
	* syscalls.cc (gen_full_path_at): Fetch CWD posix path locked.
	(setlocale): Implement here.  Reset CWD posix path.
@
text
@a734 1
  bool got_lc = false;
d793 1
a793 4
	    {
	      got_lc = true;
	      break;
	    }
@


1.178
log
@	* environ.cc (build_env): Fix length calculation of resulting
	wide char environment string.
@
text
@d793 1
a793 1
	  if (_setlocale_r (_GLOBAL_REENT, LC_CTYPE, buf))
a799 3
  /* No matching POSIX environment variable, use current codepage. */
  if (!got_lc)
    _setlocale_r (_GLOBAL_REENT, LC_CTYPE, "en_US");
@


1.177
log
@	* environ.cc (environ_init): Break from locale loop after first hit.
	* fhandler_console.cc (fhandler_console::write_normal): Print a SO
	sequence using always valid Unicode chars.
@
text
@d1083 1
a1083 1
	  len = strlen (p) + 1;
d1100 1
a1100 1
	  int slen = sys_mbstowcs (s, len, p, len);
@


1.176
log
@	* ctype.cc (_CTYPE_DATA_0_127): Add _B class to TAB character.
	(__ctype_default): New character class array for default ASCII
	character set.
	(__ctype_iso): New array of character class array for ISO charsets.
	(__ctype_cp): Ditto for singlebyte Windows codepages.
	(tolower): Implement as distinct function to support any singlebyte
	charset.
	(toupper): Ditto.
	(__set_ctype): New function to copy singlebyte character classes
	corresponding to current charset to ctype_b array.
	Align copyright text to upstream.
	* dcrt0.cc (dll_crt0_1): Reset current locale to "C" per POSIX.
	* environ.cc (set_file_api_mode): Remove.
	(codepage_init): Remove.
	(parse_thing): Remove "codepage" setting.
	(environ_init): Set locale according to environment settings, or
	to current codepage, before converting environment to multibyte.
	* fhandler.h (fhandler_console::write_replacement_char): Drop argument.
	* fhandler_console.cc (dev_console::str_to_con): Call sys_cp_mbstowcs
	rather than MultiByteToWideChar.
	(fhandler_console::write_replacement_char): Always print a funny
	half filled square if a character isn't in the current charset.
	(fhandler_console::write_normal): Convert to using __mbtowc
	rather than next_char.
	* fork.cc (frok::child): Drop call to set_file_api_mode.
	* globals.cc (enum codepage_type) Remove.
	(current_codepage): Remove.
	* miscfuncs.cc (cygwin_wcslwr): Unused, dangerous.  Remove.
	(cygwin_wcsupr): Ditto.
	(is_cp_multibyte): Remove.
	(next_char): Remove.
	* miscfuncs.h (is_cp_multibyte): Drop declaration.
	(next_char): Ditto.
	* strfuncs.cc (get_cp): Remove.
	(__db_wctomb): New function to implement _wctomb_r functionality for
	doublebyte charsets using WideCharToMultiByte.
	(__sjis_wctomb): New function to replace unusable newlib function.
	(__jis_wctomb): Ditto.
	(__eucjp_wctomb): Ditto.
	(__gbk_wctomb): New function.
	(__kr_wctomb): Ditto.
	(__big5_wctomb): Ditto.
	(__db_mbtowc): New function to implement _mbtowc_r functionality for
	doublebyte charsets using MultiByteToWideChar.
	(__sjis_mbtowc): New function to replace unusable newlib function.
	(__jis_mbtowc): Ditto.
	(__eucjp_mbtowc): Ditto.
	(__gbk_mbtowc): New function.
	(__kr_mbtowc): New function
	(__big5_mbtowc): New function
	(__set_charset_from_codepage): New function.
	(sys_wcstombs): Reimplement, basically using same wide char to multibyte
	conversion as newlib's application level functions.  Plus extras.
	Add lengthy comment to explain.  Change return type to size_t.
	(sys_wcstombs_alloc): Just use sys_wcstombs.  Change return type to
	size_t.
	(sys_cp_mbstowcs): Replace sys_mbstowcs, take additional codepage
	argument.  Explain why.  Change return type to size_t.
	(sys_mbstowcs_alloc): Just use sys_mbstowcs.  Change return type to
	size_t.
	* wchar.h: Declare internal functions implemented in strfuncs.cc.
	(wcscasecmp): Remove.
	(wcsncasecmp): Remove.
	(wcslwr): Remove.
	(wcsupr): Remove.
	* winsup.h (codepage_init): Remove declaration.
	(get_cp): Ditto.
	(sys_wcstombs): Align declaration to new implementation.
	(sys_wcstombs_alloc): Ditto.
	(sys_cp_mbstowcs): Add declaration.
	(sys_mbstowcs): Define as inline function.
	(sys_mbstowcs_alloc): Align declaration to new implementation.
	(set_file_api_mode): Remove declaration.
	* include/ctype.h (isblank): Redefine to use _B character class.
	(toupper): Remove ASCII-only definition.
	(tolower): Ditto.
@
text
@d794 4
a797 1
	    got_lc = true;
@


1.175
log
@	* environ.cc (_getenv_r): New function.
@
text
@d16 1
a555 42
void
set_file_api_mode (codepage_type cp)
{
  if (cp == oem_cp)
    {
      SetFileApisToOEM ();
      debug_printf ("File APIs set to OEM");
    }
  else
    {
      SetFileApisToANSI ();
      debug_printf ("File APIs set to ANSI");
    }
}

void
codepage_init (const char *buf)
{
  if (!buf)
    buf = "ansi";

  if (ascii_strcasematch (buf, "oem"))
    {
      current_codepage = oem_cp;
      active_codepage = GetOEMCP ();
    }
  else if (ascii_strcasematch (buf, "utf8"))
    {
      current_codepage = utf8_cp;
      active_codepage = CP_UTF8;
    }
  else
    {
      if (!ascii_strcasematch (buf, "ansi"))
	debug_printf ("Wrong codepage name: %s", buf);
      /* Fallback to ANSI */
      current_codepage = ansi_cp;
      active_codepage = GetACP ();
    }
  set_file_api_mode (current_codepage);
}

a590 1
  {"codepage", {func: &codepage_init}, isfunc, NULL, {{0}, {0}}},
d735 2
d781 1
a781 1
  /* We need the CYGWIN variable content before we can loop through
d783 19
a801 2
     can be done according to the "codepage" setting, as well as the
     uppercasing according to the "upcaseenv" setting. */
@


1.174
log
@ChangeLog:

	* configure.in: Remove --enable-server option.  Allways add the
	cygserver directory to $SUBDIRS.
	* configure: Regenerate.

cygwin/ChangeLog:

	Remove USE_SERVER define.  Accommodate throughout.
	* configure.in: Remove --enable-server option.
	* configure: Regenerate.
	* environ.cc: Remove CYGWIN=server setting.

cygserver/ChangeLog:

	* client.cc (allow_server): Remove variable.
	(client_request_get_version::client_request_get_version): Drop checking
	allow_server.

utils/ChangeLog:

	* passwd.c: Remove CYGWIN=server requirement from usage text.

doc/ChangeLog:

	* cygserver.sgml: Remove the "How to use the Cygserver services"
	section.
	* cygwinenv.sgml: Move "(no)server" to the removed options section.
	* faq-programming.xml: Remove CYGWIN=server requirement for running
	the Cygwin testsuite.
	* ntsec.sgml: Ditto for using `passwd -R'.
@
text
@d287 9
@


1.173
log
@Remove unneeded header files from source files throughout.  Update copyrights
where appropriate.
* globals.cc: New file for generic global variables.
* mkglobals_h: New file to generate globals.h.
* mkstatic: New Script used to build a (currently non-working) static
libcygwin_s.a.
* Makefile.in: Add unused rule to build a non-working libcygwin_s.a.
(DLL_OFILES): Add globals.o.  Make all objects rely on globals.h.
(globals.h): New target.  Generate globals.h.
* cygtls.h: Honor new CYGTLS_HANDLE define to control when the HANDLE operator
is allowed in _cygtls.
* dcrt0.cc: Move most globals to globals.cc.
* init.cc: Ditto.
* environ.cc (strip_title_path): Remove now-unneeded extern.
* fhandler_serial.cc (fhandler_serial::open): Ditto.
* pinfo.cc: Ditto.
(commune_process): Ditto.
* shared.cc: Ditto.
* glob.cc: Ditto.
* strace.cc: Ditto.
* exceptions.cc: Define CYGTLS_HANDLE before including winsup.h.
* path.cc (stat_suffixes): Move here.
* security.h: Add forward class path_conv declaration.
* smallprint.cc (__small_vsprintf): Make a true c++ function.
(__small_sprintf): Ditto.
(small_printf): Ditto.
(console_printf): Ditto.
(__small_vswprintf): Ditto.
(__small_swprintf): Ditto.
* spawn.cc (spawn_guts): Remove _stdcall decoration in favor of regparm.
(hExeced): Move to globals.cc
* strfuncs.cc (current_codepage): Ditto.
(active_codepage): Ditto.
* sync.cc (lock_process::locker): Move here from dcrt0.cc.
* syscalls.cc (stat_suffixes): Move to path.cc.
* tty.cc (tty::create_master): Uncapitalize fatal warning for consistency.
* winsup.h: Include globals.h to declare most of the grab bag list of globals
which were previously defined here.
* mount.h: Move USER_* defines back to shared_info.h.
* speclib: Force temporary directory cleanup.
@
text
@a37 3
#ifdef USE_SERVER
extern bool allow_server;
#endif
a631 3
#ifdef USE_SERVER
  {"server", {&allow_server}, justset, NULL, {{false}, {true}}},
#endif
@


1.172
log
@Remove unneeded whitespace.
* fhandler_fifo.cc (fhandler_fifo::open): Rework to cause errno to be set to
ENXIO when opening a fifo write/nonblocking.
* environ.cc (ucreqenv): Rename to ucenv.  Move code from old ucenv here and
conditionalize it on create_upcaseenv.
(ucenv): Delete.
(environ_init): Fix compiler warning by moving create_upcaseenv test to ucenv.
Don't bother checking for child_proc_info when calling ucenv since it is
assumed to be NULL at the point where the function is called.
* path.cc (symlink_worker): Turn off MS-DOS path warnings when dealing with
devices since the device handler passes in a translated MS-DOS path.
* sec_auth.cc (lsaprivkeyauth): Avoid variable initialization which causes a
compiler error.
* fhandler_netdrive.cc: Update copyright.
@
text
@d5 1
a5 1
   2006, 2007, 2008 Red Hat, Inc.
a32 1
extern bool allow_glob;
a34 1
extern bool strip_title_path;
@


1.171
log
@	* environ.cc (create_upcaseenv): New static variable.
	(renv_arr): New static array to keep track of environment variables
	which have to be always uppercased.
	(idx_arr): Ditto.
	(start_at): Ditto.
	(ucreqenv): New function to uppercase only the environment variables
	from renv_arr.
	(parse_thing): Add "upcaseenv" setting.
	(environ_init): Parse $CYGWIN before doing anything else.  Call
	ucreqenv instead of ucenv if CYGWIN=noupcaseenv is set.
@
text
@a439 17
/* Turn environment variable part of a=b string into uppercase. */
static __inline__ void
ucenv (char *p, char *eq)
{
  /* Amazingly, NT has a case sensitive environment name list,
     but only sometimes.
     It's normal to have NT set your "Path" to something.
     Later, you set "PATH" to something else.  This alters "Path".
     But if you try and do a naive getenv on "PATH" you'll get nothing.

     So we upper case the labels here to prevent confusion later but
     we only do it for the first process in a session group. */
  for (; p < eq; p++)
    if (islower (*p))
      *p = cyg_toupper (*p);
}

d444 2
a445 2
        const char *name;
        const size_t namelen;
d447 23
a469 23
        { NL("ALLUSERSPROFILE=") },		// 0
        { NL("COMMONPROGRAMFILES=") },		// 1
        { NL("COMPUTERNAME=") },
        { NL("COMSPEC=") },
        { NL("HOME=") },			// 4
        { NL("HOMEDRIVE=") },
        { NL("HOMEPATH=") },
        { NL("NUMBER_OF_PROCESSORS=") },	// 7
        { NL("OS=") },				// 8
        { NL("PATH=") },			// 9
        { NL("PATHEXT=") },
        { NL("PROCESSOR_ARCHITECTURE=") },
        { NL("PROCESSOR_IDENTIFIER=") },
        { NL("PROCESSOR_LEVEL=") },
        { NL("PROCESSOR_REVISION=") },
        { NL("PROGRAMFILES=") },
        { NL("SYSTEMDRIVE=") },			// 16
        { NL("SYSTEMROOT=") },
        { NL("TEMP=") },			// 18
        { NL("TERM=") },
        { NL("TMP=") },
        { NL("TMPDIR=") },
        { NL("WINDIR=") }			// 22
d478 2
a479 2
/* Hopefully as quick as possible.  Only upcase specific set of important
   Windows variables. */
d481 1
a481 1
ucreqenv (char *p)
d483 30
a512 11
  char first = cyg_toupper (*p);
  const char *idx = strchr (idx_arr, first);
  if (idx)
    for (size_t i = start_at[idx - idx_arr];
	 i < RENV_SIZE && renv_arr[i].name[0] == first;
	 ++i)
      if (strncasematch (p, renv_arr[i].name, renv_arr[i].namelen))
	{
	  strncpy (p, renv_arr[i].name, renv_arr[i].namelen);
	  break;
	}
d852 1
a852 5
      if (!child_proc_info)
	if (create_upcaseenv)
	  ucenv (newp, eq);	/* Uppercase all env vars. */
	else
	  ucreqenv (newp);	/* Uppercase only selected vars. */
d855 1
a855 1
      if (*eq && conv_start_chars[(unsigned char)envp[i][0]])
@


1.170
log
@	* environ.cc (environ_init): Avoid evaluating $CYGWIN twice.
@
text
@d39 1
d457 56
d641 1
d820 2
a821 1
     can be done according to the "codepage" setting. */
d851 4
a854 1
	ucenv (newp, eq);
@


1.169
log
@	* environ.cc (known): Remove "binmode" option.
	* fhandler.cc (binmode): Remove.
	(fhandler_base::set_flags): Accommodate binmode removal.
	* path.h (path_conv::set_binary): Remove.
	* pipe.cc (pipe): Create pipes always as binary pipes.
	* winsup.h (binmode): Remove declaration.
@
text
@a794 2
      if (*newp == 'C' && strncmp (newp, "CYGWIN=", sizeof ("CYGWIN=") - 1) == 0)
	parse_options (newp + sizeof ("CYGWIN=") - 1);
@


1.168
log
@	Add case-sensitivity.
	Unconditionally handle mount points case-sensitive.
	Unconditionally handle virtual paths case-sensitive.
	Unconditionally handle registry paths case-insensitive.
	Otherwise, accommodate case-sensitivity of given path throughout.
	* cygheap.cc (cygheap_root::set): Get additional caseinsensitive
	parameter and store it.
	* cygheap.h (struct cygheap_root_mount_info): Add member
	caseinsensitive.
	* dlfcn.cc (get_full_path_of_dll): Drop PC_NOFULL parameter from call
	to path_conv::check.
	* environ.cc (pcheck_case): Remove.
	(check_case_init): Remove.
	(known): Drop "check_case" option.
	* exceptions.cc (open_stackdumpfile): Add comment.
	* fhandler.cc (fhandler_base::get_default_fmode): Call pathmatch
	instead of strcasematch.
	* fhandler_disk_file.cc: Accommodate case-sensitivity of given path
	throughout.
	(__DIR_mounts::check_mount): Unconditionally check virtual paths
	case-sensitive.
	(fhandler_disk_file::link): Drop case clash handling.
	(fhandler_disk_file::open): Ditto.
	(fhandler_disk_file::readdir_helper): Drop managed mount code.
	* mount.cc: Remove managed mount code and datastructures.
	(struct opt): Remove "managed" option.  Add "posix=0" and "posix=1"
	options.
	(fillout_mntent): Remove "managed" output.  Add "posix" output.
	* path.cc (struct symlink_info): Remove case_clash member and
	case_check method.
	(pcheck_case): Remove.
	(path_prefix_p): Take additional bool parameter "caseinsensitive".
	(pathnmatch): Ditto.
	(pathmatch): Ditto.
	(mkrelpath): Ditto.
	(fs_info::update): Set caseinsensitive flag according to file system
	name and FILE_CASE_SENSITIVE_SEARCH flag.  Add comment.
	(tfx_chars_managed): Remove.
	(transform_chars): Drop "managed" parameter.  Always use tfx_chars.
	(get_nt_native_path): Drop "managed" parameter.  Make sure drive letters
	are always upper case.
	(getfileattr): Change second parameter to denote caseinsensitivity.
	(path_conv::check): Initialize caseinsensitive to OBJ_CASE_INSENSITIVE.
	Set caseinsensitive according to global obcaseinsensitive flag, file
	system case sensitivity and MOUNT_NOPOSIX mount flag.
	Drop case_clash and all the related code.
	(symlink_worker): Drop case clash handling.
	(symlink_info::set): Drop setting case_clash.
	(symlink_info::case_check): Remove.
	(cwdstuff::set): Add comment.
	(etc::init): Take path_conv instead of PUNICODE_STRING as parameter to
	allow case sensitivity.
	* path.h (enum pathconv_arg): Drop PC_SYM_IGNORE.
	(enum case_checking): Remove.
	(enum path_types): Drop PATH_ENC, add PATH_NOPOSIX flag.
	(struct fs_info): Add caseinsensitive flag and accessor methods.
	(class path_conv): Add caseinsensitive member and define
	objcaseinsensitive method.  Drop case_clash member and isencoded method.
	(pathmatch): Change prototype according to above change.
	(pathnmatch): Ditto.
	(path_prefix_p): Ditto.
	(get_nt_native_path): Ditto.
	(class etc): Ditto.
	(fnunmunge): Remove prototype.
	* shared.cc (shared_info::init_obcaseinsensitive): Initialize
	obcaseinsensitive flag from obcaseinsensitive registry value.
	(shared_info::initialize): Call init_obcaseinsensitive here by the
	first process creating the shared memory.
	* shared_info.h (mount_item::fnmunge): Remove.
	(shared_info::obcaseinsensitive): Rename from obcaseinsensitivity.
	(shared_info::init_obcaseinsensitive): Declare.
	* syscalls.cc (try_to_bin): Add comment.
	* include/sys/mount.h (MOUNT_ENC): Remove flag.
	(MOUNT_NOPOSIX): Add flag.
@
text
@a568 1
  {"binmode", {x: &binmode}, justset, NULL, {{O_TEXT}, {O_BINARY}}},
@


1.167
log
@	Throughout drop allow_ntsec and allow_smbntsec handling.
	* environ.cc (set_ntsec): Remove.
	(set_smbntsec): Remove.
	(known): Remove ntsec and smbntsec options.
	* external.cc (check_ntsec): Return true if no filename is given.
	* mount.cc (oopts): Add "acl" and "noacl" options.  Set MOUNT_NOACL
	flag accordingly.
	(fillout_mntent): Handle MOUNT_NOACL flag.
	* path.h (enum path_types): Add PATH_NOACL.
	* security.cc (allow_ntsec): Remove.
	(allow_smbntsec): Remove.
	* security.h (allow_ntsec): Drop declaration.
	(allow_smbntsec): Drop declaration.
	* include/sys/mount.h (MOUNT_NOACL): Define.
@
text
@a36 1
extern int pcheck_case;
a491 27
static void
check_case_init (const char *buf)
{
  if (!buf || !*buf)
    return;

  if (ascii_strncasematch (buf, "relax", 5))
    {
      pcheck_case = PCHECK_RELAXED;
      debug_printf ("File case checking set to RELAXED");
    }
  else if (ascii_strcasematch (buf, "adjust"))
    {
      pcheck_case = PCHECK_ADJUST;
      debug_printf ("File case checking set to ADJUST");
    }
  else if (ascii_strcasematch (buf, "strict"))
    {
      pcheck_case = PCHECK_STRICT;
      debug_printf ("File case checking set to STRICT");
    }
  else
    {
      debug_printf ("Wrong case checking name: %s", buf);
    }
}

a569 1
  {"check_case", {func: &check_case_init}, isfunc, NULL, {{0}, {0}}},
@


1.166
log
@	* fhandler_disk_file.cc (fhandler_disk_file::readdir_helper): Simplify
	code which checks for symlinks.  Fix problem with UNC paths.

	* environ.cc (struct parse_thing): Remove transparent_exe option.
	* syscalls.cc (transparent_exe): Remove.
	(unlink): Always add stat_suffixes, drop transparent_exe check.
	(open): Ditto.
	(link): Ditto.
	(pathconf): Ditto.
	* fhandler_disk_file.cc (fhandler_disk_file::link): Ditto.
	* fhandler_process.cc (fhandler_process::fill_filebuf): Always remove
	.exe suffix.
	* path.cc (realpath): Never attach known_suffix.
@
text
@a573 12
static void
set_ntsec (const char *buf)
{
  allow_ntsec = (buf && ascii_strcasematch (buf, "yes"));
}

static void
set_smbntsec (const char *buf)
{
  allow_smbntsec = (buf && ascii_strcasematch (buf, "yes"));
}

a605 1
  {"ntsec", {func: set_ntsec}, isfunc, NULL, {{0}, {s: "yes"}}},
a610 1
  {"smbntsec", {func: set_smbntsec}, isfunc, NULL, {{0}, {s: "yes"}}},
@


1.165
log
@Remove unneeded header files from source files throughout.
@
text
@a628 1
  {"transparent_exe", {&transparent_exe}, justset, NULL, {{false}, {true}}},
@


1.164
log
@	* Fix copyright dates.
@
text
@a12 2
#include <stddef.h>
#include <string.h>
a16 1
#include <sys/cygwin.h>
a20 1
#include "security.h"
@


1.163
log
@	* winsup.h (NT_MAX_PATH): Revert ill-advised change to 32767.
	Accommodate change throughout.

	* cygwin.din (cygwin_conv_path): Export.
	(cygwin_conv_path_list): Export.
	(cygwin_create_path): Export.
	* dcrt0.cc (dll_crt0_1): Use cygwin_conv_path.
	* dtable.cc (handle_to_fn): Ditto.  Don't expect UNICODE_STRING being
	0-terminated.
	* environ.cc (env_plist_to_posix): New helper function.
	(env_plist_to_win32): Ditto.
	(env_path_to_posix): Ditto.
	(env_path_to_win32): Ditto.
	(return_MAX_PATH): Remove.
	(conv_envvars): Use new helper functions.  Drop removed members.
	(win_env::operator =): Accommodate removal of path length functions.
	(win_env::add_cache): Accommodate new env helper function API.
	(posify): Ditto.
	* environ.h (struct win_env): Ditto. Remove path length function
	pointers since they are unused.
	* path.cc (warn_msdos): Use cygwin_conv_path.
	(getfileattr): Use new tmp_pathbuf::u_get method.
	(fillout_mntent): Ditto.
	(symlink_info::check): Ditto.
	(path_conv::check): Use sizeof (WCHAR) instead of constant 2.
	(symlink_info::check_reparse_point): Ditto.
	(conv_path_list): Get max size of target string as argument.  Call
	cygwin_conv_path as helper function.
	(cygwin_conv_path): New function.
	(cygwin_create_path): New function.
	(cygwin_conv_to_win32_path): Just call cygwin_conv_path with size set
	to MAX_PATH.
	(cygwin_conv_to_full_win32_path): Ditto.
	(cygwin_conv_to_posix_path): Ditto.
	(cygwin_conv_to_full_posix_path): Ditto.
	(conv_path_list_buf_size): Add FIXME comment.
	(env_PATH_to_posix): Rename from env_win32_to_posix_path_list.
	Add size argument as required for env helper functions.
	(cygwin_win32_to_posix_path_list): Call conv_path_list with size set to
	MAX_PATH.
	(cygwin_posix_to_win32_path_list): Ditto.
	(cygwin_conv_path_list): New function.
	(cwdstuff::get): Fix length argument in call to sys_wcstombs.
	* spawn.cc (find_exec): Use cygwin_conv_path_list.
	* tls_pbuf.h (tmp_pathbuf::u_get: New method.
	* uinfo.cc (cygheap_user::ontherange): Allocate temporary path buffers
	using tmp_pathbuf.  Use cygwin_conv_path.
	* winf.cc (av::unshift): Use cygwin_conv_path.
	* include/cygwin/version.h: Bump API minor number.
	* include/sys/cygwin.h: Comment out old cygwin32_XXX API.
	Mark old path handling API as deprecated.
	(cygwin_conv_path_t): Typedef.  Define values.
	(cygwin_conv_path): Declare.
	(cygwin_create_path): Declare.
	(cygwin_conv_path_list): Declare.
@
text
@d5 1
a5 1
   2006, 2007 Red Hat, Inc.
@


1.162
log
@	* environ.cc (parse_options): Use tmp_pathbuf to allocate buffer.
	(regopt): Take tmp buffer as additional argument.
	(environ_init): Alllcate tmpbuf earlier.  Use as temporary buffer in
	call to regopt.
	* tls_pbuf.cc (tmp_pathbuf::c_get): Allocate one additional char.
	(tmp_pathbuf::w_get): Allocate one additional WCHAR.
	* winf.cc (av::unshift): Use tmp_pathbuf to allocate buffer.
@
text
@d50 31
a80 1
extern "C" int env_win32_to_posix_path_list (const char *, char *posix);
a92 1
static int return_MAX_PATH (const char *) {return CYG_MAX_PATH;}
d95 8
a102 17
    {NL ("PATH="), NULL, NULL, env_win32_to_posix_path_list,
     cygwin_posix_to_win32_path_list,
     cygwin_win32_to_posix_path_list_buf_size,
     cygwin_posix_to_win32_path_list_buf_size, true},
    {NL ("HOME="), NULL, NULL, cygwin_conv_to_full_posix_path,
     cygwin_conv_to_full_win32_path, return_MAX_PATH, return_MAX_PATH, false},
    {NL ("LD_LIBRARY_PATH="), NULL, NULL, cygwin_win32_to_posix_path_list,
     cygwin_posix_to_win32_path_list,
     cygwin_win32_to_posix_path_list_buf_size,
     cygwin_posix_to_win32_path_list_buf_size, true},
    {NL ("TMPDIR="), NULL, NULL, cygwin_conv_to_full_posix_path,
     cygwin_conv_to_full_win32_path, return_MAX_PATH, return_MAX_PATH, false},
    {NL ("TMP="), NULL, NULL, cygwin_conv_to_full_posix_path,
     cygwin_conv_to_full_win32_path, return_MAX_PATH, return_MAX_PATH, false},
    {NL ("TEMP="), NULL, NULL, cygwin_conv_to_full_posix_path,
     cygwin_conv_to_full_win32_path, return_MAX_PATH, return_MAX_PATH, false},
    {NULL, 0, NULL, NULL, NULL, NULL, 0, 0}
a113 2
  posix_len = x.posix_len;
  win32_len = x.win32_len;
d143 1
a143 1
      towin32 (in_posix, buf);
d212 2
a213 1
  if (!conv->toposix (value, newvalue) || _impure_ptr->_errno != EIDRM)
d220 1
a220 1
      conv->towin32 (newvalue, cleanvalue);
@


1.161
log
@	* Makefile.in (DLL_OFILES): Add tls_pbuf.o.
	* autoload.cc (CreateDesktopW): Replace CreateDesktopA.
	(CreateWindowStationW): Replace CreateWindowStationA.
	(GetUserObjectInformationW): Replace GetUserObjectInformationA.
	* cygheap.h (cwdstuff::get): Assume default buffer size NT_MAX_PATH.
	* cygtls.cc (_cygtls::remove): Free temporary TLS path buffers.
	* cygtls.h (TP_NUM_C_BUFS): Define.
	(TP_NUM_W_BUFS): Define.
	(class tls_pathbuf): New class to store pointers to thread local
	temporary path buffers.
	(_local_storage::pathbufs): New member.
	* environ.cc (win_env::add_cache): Use temporary TLS path buffer instead
	of stack based buffer.
	(posify): Get temporary outenv buffer from calling function.
	(environ_init): Create temporary TLS path buffer for posify.
	(build_env): Create Windows environment block as WCHAR buffer.
	* environ.h (build_env): Change declaration accordingly.
	* external.cc (sync_winenv): Accommodate build_env change.
	* fhandler_console.cc (fhandler_console::need_invisible): Use
	GetUserObjectInformationW and CreateWindowStationW.
	* fhandler_process.cc (format_process_maps): Use temporary TLS path
	buffer instead of stack based buffer.
	* fork.cc (frok::parent): Convert to use CreateProcessW.
	* path.cc: Throughout use temporary TLS path buffers instead of stack
	based buffer.  Replace checks for CYG_MAX_PATH by checks for
	NT_MAX_PATH.
	(getfileattr): New function to replace GetFileAttributesA.
	(normalize_win32_path): Remove Win32 and NT long path prefixes.
	(getwd): Assume PATH_MAX + 1 buffer per SUSv3.
	* path.h (class path_conv): Set path buffer to size NT_MAX_PATH.
	(iswdrive): Define.
	* pinfo.cc (commune_process): Use temporary TLS path buffer instead of
	stack based buffer.
	* registry.cc (get_registry_hive_path): Ditto.
	(load_registry_hive): Ditto.
	* spawn.cc (spawn_guts): Convert to use CreateProcessW and
	CreateProcessAsUserW.
	(av::fixup): Open/close file using NtOpenFile/NtClose.
	* syscalls.cc (mknod_worker): Allow PATH_MAX file name.
	(mknod32): Ditto.
	(getusershell): Ditto.
	* tls_pbuf.cc: New file implementing tls_pathbuf and tmp_pathbuf
	methods.
	* tls_pbuf.h: New header for files using tmp_pathbuf.
	* tlsoffsets.h: Regenerate.
	* winsup.h (NT_MAX_PATH): Define as 32767 to avoid USHORT overflow.
@
text
@d629 2
a630 1
      char newbuf[CYG_MAX_PATH + 7];
d709 1
a709 1
regopt (const char *name)
a711 1
  char buf[CYG_MAX_PATH];
d719 1
a719 1
      if (r.get_string (lname, buf, sizeof (buf) - 1, "") == ERROR_SUCCESS)
d757 2
a758 1
  got_something_from_registry = regopt ("default");
d760 2
a761 1
    got_something_from_registry = regopt (myself->progname) || got_something_from_registry;
a811 1
  char *tmpbuf = tp.t_get ();
@


1.160
log
@	* dcrt0.cc (initial_env): Only use local buffer "buf" if DEBUGGING is
	enabled.  Replace calls to GetEnvironmentVariable by calls to
	GetEnvironmentVariableA for clarity.  Call GetEnvironmentVariableA
	with NULL buffer.
	(cygbench): Ditto, drop local buffer.
	* environ.cc (getearly): Call GetEnvironmentVariableA.
	(environ_init): Retrieve unicode environment and convert to current
	codepage locally.
	(getwinenveq): Ditto.
	* exceptions.cc (try_to_debug): Accommodate new sys_mbstowcs calling
	convention.
	* fhandler_clipboard.cc (set_clipboard): Call sys_mbstowcs to retrieve
	required buffer length.
	* fork.cc (frok::child): Call GetEnvironmentVariableA.
	* miscfuncs.cc: Accommodate changed arguments in calls to sys_mbstowcs.
	* sec_auth.cc: Ditto.
	* strfuncs.cc (sys_wcstombs_alloc): Fix formatting.
	(sys_mbstowcs): Change arguments to allow specifying a source string
	length.
	(sys_mbstowcs_alloc): Ditto.
	* uinfo.cc (cygheap_user::ontherange): Accommodate changed arguments in
	calls to sys_mbstowcs.
	* winsup.h (sys_mbstowcs): Adjust declaration.
	(sys_mbstowcs_alloc): Ditto.
@
text
@d16 1
d31 1
d122 2
a123 1
      char buf[NT_MAX_PATH];
d179 1
a179 1
posify (char **here, const char *value)
a191 1
  char outenv[1 + len + NT_MAX_PATH];
d745 1
d810 1
d827 1
a827 1
	posify (envp + i, *++eq ? eq : --eq);
d964 1
a964 1
build_env (const char * const *envp, char *&envblock, int &envc,
d1048 2
a1049 2
      char *s;
      envblock = (char *) malloc (2 + tl);
a1073 6
	  if (len >= 32 * 1024)
	    {
	      free (envblock);
	      envblock = NULL;
	      goto out;
	    }
d1080 2
a1081 2
	      char *new_envblock =
			(char *) realloc (envblock, 2 + tl);
d1090 1
a1090 1
	  memcpy (s, p, len);
d1096 4
a1099 4
	  if (s[0] == '!' && (isdrive (s + 1) || (s[1] == ':' && s[2] == ':'))
	      && s[3] == '=')
	    *s = '=';
	  s += len;
d1101 1
a1101 1
      *s = '\0';			/* Two null bytes at the end */
a1105 1
out:
@


1.159
log
@	* cygheap.cc (cwcsdup): New function.
	(cwcsdup1): New function.
	* cygheap.h (cygheap_user::get_windows_id): New method returning PWCHAR.
	(cwcsdup): Declare.
	(cwcsdup1): Declare.
	* registry.cc (get_registry_hive_path): Use WCHAR instead of char
	throughout.
	(load_registry_hive): Ditto.
	* registry.h (get_registry_hive_path): Change declaration accordingly.
	(load_registry_hive): Ditto.
	* sec_helper.cc (cygpsid::string): New method returning PWCHAR.
	* security.h (cygpsid::string): Declare.
	* syscalls.cc (seteuid32): Convert local name var to WCHAR.
	* uinfo.cc (cygheap_user::env_userprofile): Convert local name buffers
	to WCHAR.  Call sys_wcstombs_alloc to generate puserprof buffer.

	* winsup.h: Fix comment.
	(NT_MAX_PATH): New definition for maximum internal path length.
	Use throughout where appropriate.
	* include/limits.h (PATH_MAX): Set to 4096 as on Linux.
@
text
@d15 1
d256 1
a256 1
  else if ((len = GetEnvironmentVariable (name, NULL, 0))
d258 1
a258 1
	   && GetEnvironmentVariable (name, ret, len))
d734 1
a734 1
  char *rawenv;
d785 11
a795 1
  rawenv = GetEnvironmentStrings ();
d801 1
a801 1
  debug_printf ("GetEnvironmentStrings returned %p - \"%s\"", rawenv, rawenv);
d807 1
a807 1
  for (i = 0, p = rawenv; *p != '\0'; p = strchr (p, '\0') + 1, i++)
d809 1
a809 1
      newp = strdup (p);
d830 1
a830 1
  FreeEnvironmentStrings (rawenv);
d862 5
a866 5
  char dum[1];
  char name0[namelen - 1];
  memcpy (name0, name, namelen - 1);
  name0[namelen - 1] = '\0';
  int totlen = GetEnvironmentVariable (name0, dum, 0);
d869 1
a869 1
      totlen++;
d877 3
a879 8
      if (GetEnvironmentVariable (name0, p + namelen, totlen))
	{
	  debug_printf ("using value from GetEnvironmentVariable for '%s'",
			name0);
	  return p;
	}
      else
	cfree (p);
@


1.158
log
@	* autoload.cc (CharToOemA): Remove.
	(CharNextExA): Define.
	* environ.cc (codepage_init): Un-static.  Set active_codepage to
	active codepage.  Default to ansi regardless of buf pointer.
	* fhandler.h (dev_console::get_console_cp): New method.
	(dev_console::con_to_str): Change declaration according to new
	implementation.
	(dev_console::str_to_con): Ditto.
	* fhandler_console.cc (cp_convert): Remove.
	(dev_console::con_to_str): Redefine to take WCHAR as incoming console
	char.
	(dev_console::get_console_cp): Return correct codepage according to
	alternate_charset_active setting.
	(dev_console::str_to_con): Redefine to create WCHAR buffer for console
	output.
	(fhandler_console::read): Read console input as WCHARs.
	(base_chars): Fix typo in comment.
	(fhandler_console::char_command): Save and restore console output
	buffer using UNICODE functions.
	(fhandler_console::write_normal): Convert to write output in UNICODE.
	Use CharNextExA to recognize multibyte characters in input.  Workaround
	problem with UTF-8 and MultiByteToWideChar.  Simplify the loop for
	printing "normal" characters.
	* strfuncs.cc (active_codepage): New variable to store active codepage.
	(get_cp): Call codepage_init() if active_codepage is uninitialized.
	Just return active_codepage.
	(is_cp_multibyte): New function.
	* winsup.h (active_codepage): Declare.
	(codepage_init): Declare.
	(is_cp_multibyte): Declare.
@
text
@d119 1
a119 1
      char buf[PATH_MAX];
d188 1
a188 1
  char outenv[1 + len + PATH_MAX];
@


1.157
log
@	* string.h: Re-enable inline strcasematch and strncasematch
	implementations and rename to ascii_strcasematch/ascii_strncasematch.
	* dcrt0.cc: Replace str[n]casematch with ascii_str[n]casematch where
	applicable.
	* environ.cc: Ditto.
	* fhandler_process.cc: Ditto.
	* hookapi.cc: Ditto.
	* path.cc: Ditto.
	* spawn.cc: Ditto.
	* strace.cc: Ditto.
	* syscalls.cc: Ditto.
	* uinfo.cc: Ditto.
	* winf.cc: Ditto.
@
text
@d19 1
d517 1
a517 1
static void
d520 2
a521 2
  if (!buf || !*buf)
    return;
d524 4
a527 3
    current_codepage = oem_cp;
  else if (ascii_strcasematch (buf, "ansi"))
    current_codepage = ansi_cp;
d529 4
a532 1
    current_codepage = utf8_cp;
d534 7
a540 1
    debug_printf ("Wrong codepage name: %s", buf);
@


1.156
log
@	* dcrt0.cc (dll_crt0_1): Use GetCommandLineW and convert to current
	codepage.
	* environ.cc (set_file_api_mode): Always set file api to ANSI if not
	using the OEM codepage.
	(codepage_init): Allow "utf8" codepage.
	* fhandler_clipboard.cc (set_clipboard): Convert clipbuf to void and
	cast as needed.  Always convert input to wide char and write
	CF_UNICODETEXT to clipboard.
	(fhandler_dev_clipboard::read): Read CF_UNICODETEXT from clipboard and
	convert to current codepage if CYGWIN_NATIVE format is not available.
	* fhandler_console.cc: Drop redundant undef.
	* smallprint.cc (__small_vsprintf): Convert PWCHAR and UNICODE_STRING
	to current codepage for printing.
	* strfuncs.cc: Use PWCHAR throughout.
	(get_cp): Return CP_UTF8 for utf8_cp codepage setting.
	(sys_wcstombs): Allow NULL target buffer.
	(sys_wcstombs_alloc): New function.
	(sys_mbstowcs_alloc): Ditto.
	* winsup.h (codepage_type): Add utf8_cp.
	(HEAP_NOTHEAP): Define.
	(sys_wcstombs_alloc): Declare.
	(sys_mbstowcs_alloc): Declare.
@
text
@d462 1
a462 1
  else if (strncasematch (buf, "ignorecase", 10))
d480 1
a480 1
  if (strncasematch (buf, "relax", 5))
d485 1
a485 1
  else if (strcasematch (buf, "adjust"))
d490 1
a490 1
  else if (strcasematch (buf, "strict"))
d522 1
a522 1
  if (strcasematch (buf, "oem"))
d524 1
a524 1
  else if (strcasematch (buf, "ansi"))
d526 1
a526 1
  else if (strcasematch (buf, "utf8"))
d548 1
a548 1
  allow_ntsec = (buf && strcasematch (buf, "yes"));
d554 1
a554 1
  allow_smbntsec = (buf && strcasematch (buf, "yes"));
d639 1
a639 1
      if (!(istrue = !strncasematch (p, "no", 2)))
d651 1
a651 1
	if (strcasematch (p, k->name))
d904 1
a904 1
  if (env && !strncasematch (env, name, namelen))
@


1.155
log
@	* dcrt0.cc: Include string.h.
	(initial_env): Use small_printf's %P specifier.
	* dll_init.cc (dll_list::alloc): Use PATH_MAX instead of CYG_MAX_PATH
	for path name buffer size.
	* dll_init.h (struct dll): Ditto.
	* environ.cc: Include string.h.
	(win_env::add_cache): Use temporary local buffer for path conversion.
	(posify): Ditto.
	* exceptions.cc (try_to_debug): Use CreateProcessW to allow long path
	names.
	* miscfuncs.cc: Drop unused implementations of strcasematch and
	strncasematch.
	(ch_case_eq): Drop.
	(strcasestr): Drop.
	(cygwin_wcscasecmp): New function.
	(cygwin_wcsncasecmp): New function.
	(cygwin_strcasecmp): New function.
	(cygwin_strncasecmp): New function.
	(cygwin_wcslwr): New function.
	(cygwin_wcsupr): New function.
	(cygwin_strlwr): New function.
	(cygwin_strupr): New function.
	* ntdll.h (RtlDowncaseUnicodeString): Declare.
	(RtlUpcaseUnicodeString): Declare.
	(RtlInt64ToHexUnicodeString): Fix typo in comment.
	* string.h: Disable not NLS aware implementations of strcasematch
	and strncasematch.
	(cygwin_strcasecmp): Declare.
	(strcasecmp): Define as cygwin_strcasecmp.
	(cygwin_strncasecmp): Declare.
	(strncasecmp): Define as cygwin_strncasecmp.
	(strcasematch):Define using cygwin_strcasecmp.
	(strncasematch):Define using cygwin_strncasecmp.
	(cygwin_strlwr): Declare.
	(strlwr): Define as cygwin_strlwr.
	(cygwin_strupr): Declare.
	(strupr): Define as cygwin_strupr.
	* wchar.h: New file.
	* wincap.cc (wincapc::init): Use "NT" as fix OS string.
	* winsup.h (strcasematch): Drop declaration.
	(strncasematch): Ditto.
	(strcasestr): Ditto.
@
text
@d509 1
a509 1
  else if (cp == ansi_cp)
d523 1
a523 4
    {
      current_codepage = oem_cp;
      set_file_api_mode (current_codepage);
    }
d525 3
a527 4
    {
      current_codepage = ansi_cp;
      set_file_api_mode (current_codepage);
    }
d530 1
@


1.154
log
@Change many cygheap allocation routines to their *_abort analogs.
* cygheap.cc (cmalloc_abort): New function.
(crealloc_abort): Ditto.
(ccalloc_abort): Ditto.
@
text
@d14 1
d118 4
a121 1
      native = (char *) realloc (native, namelen + 1 + win32_len (in_posix));
d123 1
a123 1
      towin32 (in_posix, native + namelen);
d187 1
a187 1
  char *outenv = (char *) malloc (1 + len + conv->posix_len (value));
d202 1
a202 1
  *here = outenv;
@


1.153
log
@* Makefile (DLL_OFILES): Remove ntea.o
* environ.cc (set_ntea): Delete.
(parse_thing): Delete "ntea" setting.
* fhandler.cc (fhandler_base::open): Remove allow_ntea considerations.
(check_posix_perm): Ditto.
* fhandler_disk_file.cc (fhandler_disk_file::fchmod): Ditto.
(fhandler_base::open_fs): Ditto.
(fhandler_disk_file::mkdir): Ditto.
* path.cc (symlink_worker): Ditto.
* security.cc (get_file_attribute): Ditto.
(set_file_attribute): Ditto.
* security.h: Remove allow_ntea declaration.
@
text
@d251 1
a251 1
	   && (ret = (char *) cmalloc (HEAP_2_STR, len))
d851 1
a851 1
      char *p = (char *) cmalloc ((cygheap_types) x, totlen);
d922 1
a922 1
      char *s = (char *) cmalloc (HEAP_1_STR, namelen + strlen (p) + 1);
d957 1
a957 1
  char **newenv = (char **) cmalloc (HEAP_1_ARGV, sizeof (char *) *
@


1.152
log
@	Throughout remove all usage of wincap.has_security.
	* environ.cc (environ_init): Drop setting allow_ntsec here.
	* grp.cc (initgroups32): Drop usage of label "out".
	* security.cc (allow_ntsec): Set to true by default.
	* syscalls.cc (seteuid32): Remove label success_9x.
	* wincap.cc: Remove has_security throughout.
	* wincap.h: Ditto.
@
text
@a544 6
set_ntea (const char *buf)
{
  allow_ntea = (buf && strcasematch (buf, "yes"));
}

static void
a587 1
  {"ntea", {func: set_ntea}, isfunc, NULL, {{0}, {s: "yes"}}},
@


1.151
log
@	* environ.cc (subauth_id_init): Remove.
	(parse_thing): Drop "subauth_id" option.
	* security.cc (get_token_group_sidlist): Drop comments concerning
	subauthentication.
	(create_token): Back out subauthentication related changes.
	(subauth): Remove.
	* security.h (create_token): Remove declaration.
	(subauth): Ditto.
	* syscalls.cc (seteuid32): Drop subauthentication handling entirely.
@
text
@d5 1
a5 1
   2006 Red Hat, Inc.
d547 1
a547 1
  allow_ntea = (buf && strcasematch (buf, "yes") && wincap.has_security ());
d553 1
a553 1
  allow_ntsec = (buf && strcasematch (buf, "yes") && wincap.has_security ());
d559 1
a559 1
  allow_smbntsec = (buf && strcasematch (buf, "yes") && wincap.has_security ());
a751 4
  /* Set ntsec explicit as default, if NT is running */
  if (wincap.has_security ())
    allow_ntsec = true;

@


1.150
log
@	* environ.cc (set_traverse): Remove.
	(parse_thing): Drop "traverse" option.
	* path.cc (fs_info::update): Don't request SE_CHANGE_NOTIFY_PRIV
	privilege.
	* sec_helper.cc (set_cygwin_privileges): Ditto.
	* security.cc (allow_traverse): Remove.
	(alloc_sd): Drop special allow_traverse code.
	* security.h (allow_traverse): Drop declaration.
	* syscalls.cc (statvfs): Don't request SE_CHANGE_NOTIFY_PRIV privilege.
@
text
@a36 3
#if 0
extern int subauth_id;
#endif
a531 15
#if 0
static void
subauth_id_init (const char *buf)
{
  if (!buf || !*buf)
    return;

  int i = strtol (buf, NULL, 0);

  /* 0..127 are reserved by Microsoft, 132 is IIS subauthentication. */
  if (i > 127 && i != 132 && i <= 255)
    subauth_id = i;
}
#endif

a602 3
#if 0
  {"subauth_id", {func: &subauth_id_init}, isfunc, NULL, {{0}, {0}}},
#endif
@


1.149
log
@	* cyglsa.h: New header file.
	* environ.cc: Disable subauth settings.
	* grp.cc: Accomodate cygsidlist's count now being a method.
	* sec_helper.cc (SECURITY_MANDATORY_INTEGRITY_AUTHORITY): Remove.
	(mandatory_medium_integrity_sid): Remove.
	(mandatory_high_integrity_sid): Remove.
	(mandatory_system_integrity_sid): Remove.
	(fake_logon_sid): Add.
	(cygsid::get_sid): Add well_known parameter.  Set well_known_sid
	accordingly.
	(cygsid::getfromstr): Ditto.
	(cygsidlist::alloc_sids): Move here from security.cc.
	(cygsidlist::free_sids): Ditto.
	(cygsidlist::add): Move here from security.h.  Add well_known parameter.
	Set well_known_sid accordingly.  Don't allow duplicate SIDs.
	* security.cc: Include cyglsa.h and cygwin/version.h.  Throughout
	accomodate cygsidlist's count now being a method.  Throughout drop
	redundant "contains" tests.
	(get_user_local_groups): Add local groups as well known SIDs.
	(get_token_group_sidlist): Add well known groups as well known SIDs.
	(get_server_groups): Ditto.  Only call get_unix_group_sidlist after
	get_user_local_groups to maintain "well_known_sid" attribute.
	(get_initgroups_sidlist): Add well known groups as well known SIDs.
	(get_setgroups_sidlist): Add usersid and struct passwd parameter to
	allow calling get_server_groups from here.
	(get_system_priv_list): Make static.  Return size of TOKEN_PRIVILEGES
	structure.
	(get_priv_list): Ditto.
	(create_token): Accomodate above changes.  Drop misguided attempt to
	add MIC SIDs to created user token.  Print returned token as hex value.
	(subauth): Disable.
	(lsaauth): New function implementing client side of LSA authentication.
	* security.h (class cygsid): Add well_known_sid attribute.  Accomodate
	throughout.  Add *= operator to create a well known SID.
	(class cygsidlist): Rename count to cnt.  Make count a method.
	(cygsidlist::add): Move to sec_helper.cc.
	(cygsidlist::operator *=): New method to add well known SID.
	(cygsidlist::non_well_known_count): New method returning number of
	non well known SIDs in list.
	(cygsidlist::next_non_well_known_sid): New method returning next non
	well known SID by index.
	(mandatory_medium_integrity_sid): Drop declaration.
	(mandatory_high_integrity_sid): Drop declaration.
	(mandatory_system_integrity_sid): Drop declaration.
	(fake_logon_sid): Add declaration.
	(subauth): Disable declaration.
	(lsaauth): Add declaration.
	* syscalls.cc (seteuid32): Disable subauthentication.  Add LSA
	authentication.
	* wincap.h: Define needs_logon_sid_in_sid_list throughout.
	* wincap.cc: Ditto.
@
text
@a574 6
set_traverse (const char *buf)
{
  allow_traverse = (buf && strcasematch (buf, "yes") && wincap.has_security ());
}

static void
a624 1
  {"traverse", {func: set_traverse}, isfunc, NULL, {{0}, {s: "yes"}}},
@


1.148
log
@* environ.cc (build_env): Don't put an empty environment variable into the
environment.  Optimize use of "len".
* errno.cc (ERROR_MORE_DATA): Translate to EMSGSIZE rather than EAGAIN.
@
text
@d37 1
d39 1
d535 1
d548 1
d627 1
d629 1
@


1.147
log
@* environ.cc (env_win32_to_posix_path_list): Declare.
(conv_envvars): Use env_win32_to_posix_path_list rather than
cygwin_win32_to_posix_path_list.
(posify): Translate back to win32 path if errno is EIDRM.
* environ.h: Update copyright.  Define ENV_CVT.
* path.cc (conv_path_list): If converting for the environment and removed an
element set errno to ENV_CVT.
(env_win32_to_posix_path_list): New function.
@
text
@d1067 1
d1074 1
a1074 1
	  if (len == 1)
d1078 1
a1078 1
	  conv = getwinenv (*srcp, *srcp + len, &temp);
d1084 1
a1084 1
	  len = strlen (p);
d1091 1
a1091 1
	  new_tl += len + 1;	/* Keep running total of block length so far */
d1107 1
a1107 1
	  memcpy (s, p, len + 1);
d1116 1
a1116 1
	  s += len + 1;
@


1.146
log
@* environ.cc (dos_file_warning): Declare.
(parse_thing): Add "dosfilewarning".  Alphabetize.
* path.cc (normalize_posix_path): Return -1 when MS-DOS path detected.
(warn_msdos): New function.
(path_conv::check): Call if !PC_NOWARN and MS-DOS path detected.
(cygwin_conv_to_win32_path): Set PC_NOWARN when calling path_conv.
(cygwin_conv_to_full_win32_path): Ditto.
* path.h (pathconv_arg::PC_NOWARN): Define.
* shared_info.h (user_info::warned_msdos): New field.
(CURR_USER_MAGIC): Reset.
@
text
@d46 2
d62 1
a62 1
    {NL ("PATH="), NULL, NULL, cygwin_win32_to_posix_path_list,
d186 11
a196 2
  conv->toposix (value, outenv + len);
  conv->add_cache (outenv + len, *value != '/' ? value : NULL);
@


1.145
log
@white space
@
text
@d31 1
d597 1
d605 1
a605 1
  {"traverse", {func: set_traverse}, isfunc, NULL, {{0}, {s: "yes"}}},
d614 1
a617 1
  {"proc_retry", {func: set_proc_retry}, isfunc, NULL, {{0}, {5}}},
@


1.145.4.1
log
@	* include/asm/byteorder.h: Fix copyright dates.

	* autoload.cc (PrivilegeCheck): Define.
	* fhandler.cc (fhandler_base::open): Always try opening with backup
	resp. restore intent.
	* fhandler_disk_file.cc (fhandler_disk_file::opendir): Always try
	opening with backup intent.
	(fhandler_disk_file::readdir): Ditto when trying to retrieve file id
	explicitely.
	* security.cc (check_file_access): Replace pbuf with correctly
	PPRIVILEGE_SET typed pset.  Check explicitely for backup and/or restore
	privileges when AccessCheck fails, to circumvent AccessCheck
	shortcoming.  Add comment to explain.

	* include/asm/byteorder.h: Correct typo.

	* include/asm/byteorder.h: Don't #define n* macros if -fnoinline is
	specified.

	* environ.cc (build_env): Don't put an empty environment variable into
	the environment.  Optimize use of "len".
	* errno.cc (ERROR_MORE_DATA): Translate to EMSGSIZE rather than EAGAIN.
@
text
@a1053 1
	  const char *rest = *srcp + len;
d1060 1
a1060 1
	  if (len == 1 || !*rest)
d1064 1
a1064 1
	  conv = getwinenv (*srcp, rest, &temp);
d1070 1
a1070 1
	  len = strlen (p) + 1;
d1077 1
a1077 1
	  new_tl += len;	/* Keep running total of block length so far */
d1093 1
a1093 1
	  memcpy (s, p, len);
d1102 1
a1102 1
	  s += len;
@


1.144
log
@* environ.cc (getearly): Force correct dereference order when inspecting
environ table.
@
text
@d222 1
a222 1
  
@


1.143
log
@* environ.cc (getearly): Use GetEnvironmentVariable and cmalloc instead of
GetEnvironmentStrings.
(environ_init): Revert rawenv stuff.
@
text
@d236 1
a236 1
	if (strncasematch (name, *ptr, len) && *ptr[len] == '=')
@


1.142
log
@format comment using GNU-style
@
text
@a222 2
static NO_COPY char *rawenv;

d226 1
a226 1
getearly (const char * name, int *offset __attribute__ ((unused)))
d228 1
a228 1
  char *p;
d230 1
a230 1
  int len = strlen (name);
d232 11
a242 8
  if (spawn_info && (ptr = spawn_info->moreinfo->envp)) 
    for (; *ptr; ptr++)
      if (strncasematch (name, *ptr, len) && *ptr[len] == '=')
	return *ptr + len + 1;
  else if (rawenv || (rawenv = GetEnvironmentStrings ()))
    for (p = rawenv; *p; p = strchr (p, '\0') + 1)
      if (strncasematch (name, p, len) && p[len] == '=')
	return p + len + 1;
d737 1
a785 5
      if (rawenv)
	{
	  FreeEnvironmentStrings (rawenv);
	  rawenv = NULL;
	}
d792 1
d795 2
a796 6
      rawenv = GetEnvironmentStrings ();
      if (!rawenv)
	{
	  system_printf ("GetEnvironmentStrings returned NULL, %E");
	  return;
	}
d798 1
a798 1
  debug_printf ("rawenv %p - \"%s\"", rawenv, rawenv);
a827 1
  rawenv = NULL;
@


1.141
log
@* environ.cc (rawenv): Make this variable a file-scope static.
(getearly): Rename 's' variable to 'len' since 's' is used fairly consistently
throughout cygwin as a string variable.  Remove rawenv declaration.  Perform
other minor cleanups.
(environ_init): Remove rawenv declaration.  Only set rawenv to
GetEnvironmentStrings() if it has not already been set.  Properly free rawenv
in all cases.
@
text
@d192 4
a195 7
/*
 * my_findenv --
 *	Returns pointer to value associated with name, if any, else NULL.
 *	Sets offset to be the offset of the name/value combination in the
 *	environment array, for use by setenv(3) and unsetenv(3).
 *	Explicitly removes '=' in argument name.
 */
@


1.140
log
@	* environ.cc (getearly): New function.
	(findenv_func): New function pointer, predefined to getearly.
	(getenv): Call findenv function over the findenv_func pointer.
	(environ_init): Change findenv_func pointer to my_findenv after Cygwin
	environment is initialized.
@
text
@d225 2
d228 1
a228 4
/*
 * getearly --
 *	Primitive getenv before the environment is built.
 */
d230 1
a230 1
static char * __stdcall
d233 13
a245 22
  int s = strlen (name);
  char * rawenv;
  char ** ptr;
  child_info *get_cygwin_startup_info ();
  child_info_spawn *ci = (child_info_spawn *) get_cygwin_startup_info ();

  if (ci && (ptr = ci->moreinfo->envp)) 
    {
      for (; *ptr; ptr++)
	if (strncasematch (name, *ptr, s)
	    && (*(*ptr + s) == '='))
	  return *ptr + s + 1;
    }
  else if ((rawenv = GetEnvironmentStrings ()))
    {
      while (*rawenv)
	if (strncasematch (name, rawenv, s)
	    && (*(rawenv + s) == '='))
	  return rawenv + s + 1;
	else
	  rawenv = strchr (rawenv, 0) + 1;
    }
d251 1
a251 4
/*
 * getenv --
 *	Returns ptr to value associated with name, if any, else NULL.
 */
d352 1
a352 1
/* putenv Sets an environment variable */
d371 1
a371 1
/* setenv -- Set the value of the environment variable "name" to be
d386 1
a386 1
/* unsetenv(name) -- Delete environment variable "name".  */
a738 1
  char *rawenv;
d787 5
a797 1
  rawenv = GetEnvironmentStrings ();
d800 6
a805 2
      system_printf ("GetEnvironmentStrings returned NULL, %E");
      return;
d807 1
a807 1
  debug_printf ("GetEnvironmentStrings returned %p - \"%s\"", rawenv, rawenv);
d837 1
@


1.139
log
@* fhandler.cc (fcntl): Print flags in hex.
* dcrt0.cc (dll_crt0_0): Semi-revert 2006-03-14 change which moved pinfo_init
and uinfo_init here.
(dll_crt0_1): Ditto.
(__dll_crt0): Ditto.  Don't call update_envptrs here.
(dll_crt0_1): Ditto.  Move wait_for_sigthread call here from dll_crt0_0.
* environ.cc (environ_init): Call it here instead.
* sigproc.cc (my_readsig): New static variable.
(wait_for_sigthread): Set up read pipe here since we are assured that we have
the proper privileges when this is called.
(talktome): Eliminate second argument since it is available as a global now.
(wait_sig): Reflect use of my_readsig.
@
text
@d227 35
d270 1
a270 2

  return my_findenv (name, &offset);
d845 1
@


1.138
log
@* child_info.h (CURR_CHILD_INFO_MAGIC): Regenerate.
(child_info::retry): Move here from fork subclass.
(child_info::exit_code): New field.
(child_info::retry_count): Max retry count for process start.
(child_info::proc_retry): Declare new function.
(child_info_fork::retry): Move to parent.
(child_info_fork::fork_retry): Ditto.
* dcrt0.cc (child_info::fork_retry): Rename and move.
(child_info_fork::handle_failure): Move.
(dll_crt0_0): Initialize console handler based on whether we have a controlling
tty or not.  Avoid nonsensical check for fork where it can never occur.
* environ.cc (set_proc_retry): Rename from set_fork_retry.  Set retry_count in
child_info.
(parse_thing): Reflect above change.
* exceptions.cc (dummy_ctrl_c_handler): Remove unused variable name.
(ctrl_c_handler): Always return TRUE for the annoying CTRL_LOGOFF_EVENT.
* fhandler_termios.cc (fhandler_termios::tcsetpgrp): Remove call to
init_console_handler.
* fhandler_tty.cc (fhandler_tty_slave::open): Just call mange_console_count
here and let it decide what to do with initializing console control handling.
* fork.cc (fork_retry): Remove definition.
(frok::parent): Define static errbuf and use in error messages (not thread safe
yet).  Close pi.hThread as soon as possible.  Protect pi.hProcess as soon as
possible.  Don't set retry_count.  That happens automatically in the
constructor now.  Accommodate name change from fork_retry to proc_retry.
* init.cc (dll_entry): Turn off ctrl-c handling early until we know how it is
supposed to be handled.
* pinfo.cc (_pinfo::dup_proc_pipe): Remember original proc pipe value for
failure error message.  Tweak debug message slightly.
* sigproc.cc (child_info::retry_count): Define.
(child_info::child_info): Initialize retry count.
(child_info::sync): Set exit code if process dies before synchronization.
(child_info::proc_retry): Rename from child_info_fork::fork_retry.  Use
previously derived exit code.  Be more defensive about what is classified as an
error exit.
(child_info_fork::handle_failure): Move here from dcrt0.cc.
* spawn.cc (spawn_guts): Maintain error mode when starting new process to avoid
annoying pop ups.  Move deimpersonate call within new loop.  Move envblock
freeing to end.  Loop if process dies prematurely with bad exit code.
* syscalls.cc (init_console_handler): Remove hopefully unneeded call to
init_console_handler.
@
text
@d812 1
@


1.137
log
@* dcrt0.cc (main_environ): Initialize to &__cygwin_environment.
(dll_crt0_1): Move resourcelocks, thread interface, pinfo_init, and
uinfo_init...
(dll_crt0_0): ...to here.
(_dll_crt0): Call update_envptrs here after setting main_environ.
* environ.cc (environ_init): Eliminate initted variable.  Don't call
update_envptrs here.
* sigproc.cc (wait_sig): Use my_sendsig when calling CreatePipe to avoid a
dereference.
@
text
@a41 1
extern int fork_retry;
d522 1
a522 1
set_fork_retry (const char *buf)
d524 1
a524 1
  fork_retry = strtoul (buf, NULL, 0);
d596 1
a596 1
  {"fork_retry", {func: set_fork_retry}, isfunc, NULL, {{0}, {5}}},
@


1.136
log
@* child_info.h (child_info_fork::handle_failure): Declare new function.
(child_info_fork::retry): New field.
* dcrt0.cc (__api_fatal_exit_val): Define.
(child_info_fork::handle_failure): Define new function.
(__api_fatal): Exit using __api_fatal_exit_val value.
* environ.cc (set_fork_retry): Set fork_retry based on CYGWIN environment
variable.
(parse_thing): Add "fork_retry" setting.
* fork.cc (fork_retry): Define.
(frok::parent): Reorganize to allow retry of failed child creation if child
signalled that it was ok to do so.
* heap.cc (heap_init): Signal parent via handle_failure when VirtualAlloc
fails.
* pinfo.h (EXITCODE_RETRY): Declare.
* sigproc.cc (child_info::sync): Properly exit with failure condition if called
for fork and didn't see subproc_ready.
* spawn.cc (spawn_guts): Use windows pid as first argument.
* winsup.h: Remove obsolete NEW_MACRO_VARARGS define.
(__api_fatal_exit_val): Declare.
(set_api_fatal_return): Define.
(in_dllentry): Declare.
* exceptions.cc (inside_kernel): Remove unneeded in_dllentry declaration.
@
text
@d732 6
a737 10
  static int initted;
  if (!initted)
    {
      for (int i = 0; conv_envvars[i].name != NULL; i++)
	{
	  conv_start_chars[(int) cyg_tolower (conv_envvars[i].name[0])] = 1;
	  conv_start_chars[(int) cyg_toupper (conv_envvars[i].name[0])] = 1;
	}
      initted = 1;
    }
a812 1
  update_envptrs ();
@


1.135
log
@	* environ.cc (struct parse_thing): Add transparent_exe option.
	* fhandler_disk_file.cc (fhandler_disk_file::link): Accomodate
	transparent_exe option.  Add .exe suffix for links to executable files,
	if transparent_exe is set.
	* fhandler_process.cc (fhandler_process::fill_filebuf): Remove .exe
	suffix if transparent_exe option is set.
	* path.cc (symlink_worker): Accomodate transparent_exe option.
	(realpath): Don't tack on .exe suffix if transparent_exe is set.
	* syscalls.cc (transparent_exe): New global variable.
	(unlink): Accomodate transparent_exe option.
	(open): Ditto.
	(link): Ditto.
	(rename): Ditto. Maybe add .exe suffix when renaming executable files.
	(pathconf): Accomodate transparent_exe option.
	* winsup.h: Declare transparent_exe.
@
text
@d42 1
d519 7
a525 1
  wincap.set_chunksize (strtol (buf, NULL, 0));
d597 1
@


1.134
log
@	* Update copyrights.
@
text
@d589 1
@


1.133
log
@* environ.cc (spenvs[]): windir -> WINDIR.
@
text
@d4 2
a5 1
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005 Red Hat, Inc.
@


1.132
log
@* environ.cc (win_env::add_cache): Don't add variables to the environment
during initialization.
@
text
@d892 1
a892 1
  {NL ("windir="), true, true, &cygheap_user::env_systemroot}
@


1.131
log
@* include/cygwin/stdlib.h: New file.
* environ.cc (unsetenv): Change to return -1 on input error.
* include/cygwin/version.h: Add more description to latest api bump.
@
text
@d119 1
a119 1
  if (immediate)
@


1.130
log
@	* environ.cc (spenvs): Add "windir" as an "always export" variable
	to accomodate WinSock on Windows 95.
@
text
@d365 1
a365 1
extern "C" void
d370 6
d382 2
@


1.129
log
@* environ.cc (spenvs): Make "SYSTEMDRIVE" an "always export".
@
text
@d883 2
a884 1
  {NL ("USERPROFILE="), false, false, &cygheap_user::env_userprofile}
@


1.128
log
@* environ.cc (build_env): Use "kilo"bytes not "mega"bytes.  Return immediately
on error.
* spawn.cc (spawn_guts): Set return value to -1 on error from build_env.
@
text
@d879 1
a879 1
  {NL ("SYSTEMDRIVE="), false, false, NULL},
@


1.127
log
@* environ.cc (build_env): Clear envblock and return NULL on attempt to use env
var > 32K.
* spawn.cc (spawn_guts): Set E2BIG if build_env detects an error.
@
text
@d1037 1
a1037 1
	  if (len >= 32 * 1024 * 1024)
d1041 1
a1041 1
	      break;
d1075 1
@


1.126
log
@* environ.cc (environ_init): Protect with a 'myfault' in case
GetEnvironmentStrings misbehaves.
* environ.cc (environ_init): Add debugging output with value returned from
GetEnvironmentStrings.
@
text
@d1037 6
a1074 1

@


1.125
log
@* environ.cc (environ_init): Issue an error if GetEnvironmentStrings fails and
return.
@
text
@d709 4
d766 1
@


1.124
log
@* dcrt0.cc (do_exit): Rely on sigproc_terminate to set exit_state
appropriately.
* pinfo.cc (pinfo::exit): Always call sigproc_terminate here.  Rely on
sigproc_terminate to signal signal thread to handle eventual process exit.
* sigproc.cc (no_signals_available): Change criteria for determining if this
process can handle signals to itself.
(my_sendsig): New variable.  Copy of my sendsig handle.
(proc_can_be_signalled): Don't send signals if exit code is set.
(sigproc_terminate): Use and set exit_state appropriately to determine when to
do anything.  Send __SIGEXIT to self to control process exit.
(sig_send): Use my_sendsig for sending signals.  Don't call
proc_can_be_signalled for myself since the criteria is now different for
sending signals to myself.
(wait_sig): Copy myself->sendsig to my_sendsig for future use.  Exit signal
loop when __SIGEXIT is received.  Wait for main thread to exit and use its exit
status to actually exit process.
* sigproc.h (__SIGEXIT): New enum.
* dcrt0.cc (alloc_stack): Eliminate superfluous "return;".
* debug.cc (add_handle): Ditto.
* devices.in (device::parse): Ditto.
* dtable.cc (dtable::vfork_parent_restore): Ditto.
(dtable::vfork_child_fixup): Ditto.
* environ.cc (parse_options): Ditto.
* errno.cc (seterrno_from_win_error): Ditto.
* exceptions.cc (sig_handle_tty_stop): Ditto.
(set_signal_mask): Ditto.
* fhandler.cc (fhandler_base::read): Ditto.
(fhandler_base::operator delete): Ditto.
(fhandler_base::seekdir): Ditto.
(fhandler_base::rewinddir): Ditto.
* fhandler_console.cc (fhandler_console::read): Ditto.
(fhandler_console::fixup_after_exec): Ditto.
* sigproc.cc (sigproc_init): Ditto.
(sigproc_terminate): Ditto.

* devices.cc: Regenerate.
@
text
@d755 1
d757 5
@


1.123
log
@Eliminate (void) cast on standalone function calls throughout.
@
text
@a668 1
  return;
@


1.122
log
@Replace valid memory checks with new myfault class "exception handling", almost
everywhere.  Leave some thread.cc stuff alone for now.
* cygtls.h: Kludge some definitions to avoid including a problematic windows
header.
(_cygtls::_myfault): New entry.
(_cygtls::_myfault_errno): Ditto.
(_cygtls::fault_guarded): New function.
(_cygtls::setup_fault): Ditto.
(_cygtls::return_from_fault): Ditto.
(_cygtls::clear_fault): Ditto.
(myfault): New class.
* exceptions.cc (handle_exceptions): Handle case of guarded fault in system
routine.
* gendef: Add another entry point for setjmp that the compiler doesn't know
about and won't complain about.
* gentls_offsets: Just include windows.h rather than kludging a HANDLE def.
* miscfuncs.cc (check_null_str): Delete.
(check_null_empty_str): Ditto.
(check_null_empty_str_errno): Ditto.
(check_null_str_errno): Ditto.
(__check_null_invalid_struct): Ditto.
(__check_null_invalid_struct_errno): Ditto.
(__check_invalid_read_ptr): Ditto.
(__check_invalid_read_ptr_errno): Ditto.
(dummytest): New function.
(check_iovec_for_read): Delete.
(chec_iovec): Rename from check_iovec_for_write.  Take a read/write parameter.
* tlsoffsets.h: Regenerate.
* winsup.h: Remove check_* declarations.
(check_iovec_for_read): Delete declaration.  Turn into a define instead.
(check_iovec_for_write): Ditto.
(check_iovec): New declaration.
* thread.h: Use ifdef guard name consistent with other header files.
@
text
@d109 2
a110 2
      (void) strcpy (native, name);
      (void) strcpy (native + namelen, in_native);
d115 1
a115 1
      (void) strcpy (native, name);
d900 1
a900 1
      (void) strcpy (s + namelen, p);
@


1.121
log
@* environ.cc (spenvs): Remove cut/paste error which associated CYGWIN_DEBUG
with HOME.
@
text
@d334 8
a341 11
  int res;
  if ((res = check_null_empty_str (str)))
    {
      if (res == ENOENT)
	return 0;
      set_errno (res);
      return  -1;
    }
  char *eq = strchr (str, '=');
  if (eq)
    return _addenv (str, eq + 1, -1);
d343 3
a345 2
  /* Remove str from the environment. */
  unsetenv (str);
d354 5
a358 13
  int res;
  if ((res = check_null_empty_str (value)) == EFAULT)
    {
      set_errno (res);
      return  -1;
    }
  if ((res = check_null_empty_str (name)))
    {
      if (res == ENOENT)
	return 0;
      set_errno (res);
      return  -1;
    }
@


1.120
log
@* cygheap.h: Reference _cygheap_start via .cygheap section.
* environ.cc: Fix force_into_environment typo throughout.
(spenvs): Export CYGWIN_DEBUG if DEBUGGING.
@
text
@d873 1
a873 1
  {NL ("CYGWIN_DEBUG="), false, true, &cygheap_user::env_homedrive},
@


1.119
log
@* spawn.cc (find_exec): Accept a PATH-like string in place of an environment
variable.
* dlfcn.cc (get_full_path_of_dll): Search /usr/bin (for windows compatibility)
and /usr/lib (for UNIX compatibility) when looking for shared libraries.
* environ.cc (conv_envvars): Put back LD_LIBRARY_PATH since it is used by
get_full_path_of_dll().
* errno.cc (errmap): Map MOD_NOT_FOUND to ENOENT.
* cygmagic: Remove debugging cruft.
@
text
@d859 1
a859 1
  bool force_into_environmentironment;	/* If true, always add to env if missing */
d872 3
d983 1
a983 1
    if (!saw_spenv[i] && (spenvs[i].force_into_environmentironment || cygheap->user.issetuid ()))
@


1.118
log
@	* environ.cc (conv_envvars): Remove LD_LIBRARY_PATH entirely.
	It doesn't belong here.
@
text
@d64 4
@


1.117
log
@	* environ.cc (conv_envvars): Treat LD_LIBRARY_PATH as path list.
@
text
@a63 4
    {NL ("LD_LIBRARY_PATH="), NULL, NULL, cygwin_win32_to_posix_path_list,
     cygwin_posix_to_win32_path_list,
     cygwin_win32_to_posix_path_list_buf_size,
     cygwin_posix_to_win32_path_list_buf_size, true},
@


1.116
log
@* environ.cc (spenv::force_into_environment): Rename from add_always.
(spenv::add_if_exists): Rename from force.
(build_env): Accommodate name changes.  Make sure that stuff that is always
supposed to be in the environment is actually added to the environment.
* shared.cc (open_shared): Restore VirtualFree eliminated by 2005-04-28 change.
@
text
@d64 4
a67 2
    {NL ("LD_LIBRARY_PATH="), NULL, NULL, cygwin_conv_to_full_posix_path,
     cygwin_conv_to_full_win32_path, return_MAX_PATH, return_MAX_PATH, true},
@


1.115
log
@* environ.cc (build_env): Ensure that win32 array is properly filled in when a
missing value has to be generated.
@
text
@d4 1
a4 1
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2005 Red Hat, Inc.
d857 2
a858 2
  bool add_always;	/* If true, always add to env if missing */
  bool force;	/* if true, retrieve value from cache */
d956 1
a956 1
	    if (spenvs[i].force)
d978 1
a978 1
    if (!saw_spenv[i] && (spenvs[i].add_always || cygheap->user.issetuid ()))
d980 2
a981 2
	  *dstp = spenvs[i].retrieve (no_envblock);
	  if (*dstp && (!no_envblock || spenvs[i].force) && *dstp != env_dontadd)
@


1.114
log
@	* environ.cc (environ_init): Don't set traverse checking as default.
@
text
@d983 1
a983 1
	      *pass_dstp = *dstp;
@


1.113
log
@	* cygheap.cc (cygheap_init): Accomodate set_process_privilege change.
	* cygheap.h (cygheap_user::curr_primary_token): New member.
	(cygheap_user::primary_token): New method.
	(cygheap_user::deimpersonate): Always revert to processes'
	impersonation token.
	(cygheap_user::reimpersonate): Set processes' or setuid token as
	necessary.
	(cygheap_user::has_impersonation_tokens): Look for curr_primary_token
	value.
	(cygheap_user::close_impersonation_tokens): Close curr_primary_token
	here if necessary.  Don't reset token values to NO_IMPERSONATION since
	that's done in uinfo_init anyway.
	(init_cygheap::luid): New LUID array keeping privilege LUIDs.
	* cygtls.cc (_cygtls::init_thread): Call cygheap->user.reimpersonate.
	* dcrt0.cc (hProcToken): New global variable to keep process token.
	(hProcImpToken): Ditto for process impersonation token.
	(dll_crt0_0): Open process token here once.  Duplicate to create
	hProcImpToken.
	(dll_crt0_1): Call set_cygwin_privileges.
	* environ.cc (allow_ntea): Drop duplicate declaration.
	(allow_smbntsec): Ditto.
	(set_traverse): Only set allow_traverse here.
	(environ_init): Ditto.
	* fhandler_disk_file.cc (fhandler_disk_file::fchmod): Drop call to
	enable_restore_privilege.
	(fhandler_disk_file::fchown): Ditto.
	(fhandler_disk_file::facl): Ditto.
	* fork.cc (fork_child): Move call to cygheap->user.reimpersonate after
	syn with parent. Call set_cygwin_privileges.
	* grp.cc (internal_getgroups): Use hProcImpToken instead of opening
	process token.
	* path.cc (fs_info::update): Bypass traverse checking when retrieving
	volume information using push/pop_thread_privileges.
	* registry.cc (load_registry_hive): Drop setting restore privilege
	since it's already set if available.
	* sec_helper.cc: Include cygtls.h.
	(cygpriv): Privilege string array.
	(privilege_luid): New function, evaluate LUID from cygpriv_idx.
	(privilege_luid_by_name): New function, evaluate LUID from privilege
	string.
	(privilege_name): New function, evaluate privilege string from
	cygpriv_idx.
	(set_privilege): New static function called by set_process_privilege
	and set_thread_privilege.  Call privilege_luid to get privilege LUID.
	Fix bug in return value evaluation. Improve debug output.
	(set_cygwin_privileges): New function.
	(set_process_privilege): Remove.
	(enable_restore_privilege): Remove.
	* security.cc (allow_traverse): New global variable.
	(sys_privs): Change type to cygpriv_idx and store privilege indices
	instead of strings.
	(SYSTEM_PRIVILEGES_COUNT): Renamed from SYSTEM_PERMISSION_COUNT.
	(get_system_priv_list): Don't use numerical constant in malloc call.
	Use privilege_luid to get privilege LUIDs.
	(get_priv_list): Call privilege_luid_by_name to get LUIDs. Improve
	inner privilege LUID comparison loop.
	(create_token): Enable create token privilege using
	push/pop_self_privileges. Use hProcToken instead of opening process
	token. Use default DACL when duplicating token.
	(subauth): Enable tcb privilege using push/pop_self_privileges.
	Use sec_none instead of homw made security attributes when duplicating
	token.
	(check_file_access): Don't duplicate access token, use active
	impersonation token as is.
	* security.h (enum cygpriv_idx): New enumeration type enumerating
	possible privileges.
	(privilege_luid): Declare new function.
	(privilege_luid_by_name): Ditto.
	(privilege_name): Ditto.
	(allow_traverse): Declare.
	(set_privilege): Declare function.
	(set_process_privilege): Define as macro.
	(enable_restore_privilege): Remove declaration.
	(_push_thread_privilege): Define macro.
	(push_thread_privilege): Ditto.
	(pop_thread_privilege): Ditto.
	(pop_self_privilege): Ditto.
	* spawn.cc (spawn_guts): Use cygheap->user.primary_token instead of
	cygheap->user.token.
	* syscalls.cc (statvfs): Bypass traverse checking when retrieving
	volume information using push/pop_thread_privileges. Rearrange code
	to simplify push/pop bracketing.
	(seteuid32): Use hProcToken instead of opening process token. Call
	cygheap->user.deimpersonate instead of RevertToSelf.  Create
	impersonation token from primary internal or external token.  Set
	cygheap->user.curr_primary_token and cygheap->user.current_token
	privileges once here.  Drop "failed" and "failed_ptok" labels.
	Drop setting DefaultDacl of process token.
	(setegid32): Use hProcToken and hProcImpToken instead of opening
	process token. Always reimpersonate afterwards.
	* uinfo.cc (cygheap_user::init): Use hProcToken instead of opening
	process token.
	(internal_getlogin): Ditto. Set hProcImpToken, too.
	(uinfo_init): Initialize cygheap->user.curr_primary_token.
	* winsup.h (hProcToken): Declare.
	(hProcImpToken): Declare.
@
text
@d734 1
a734 1
  /* Set ntsec and traverse checking explicit as default, if NT is running */
d736 1
a736 4
    {
      allow_ntsec = true;
      allow_traverse = true;
    }
@


1.112
log
@* environ.cc (spenvs): Re-force SYSTEMROOT to always be included in
environment.
(build_env): Ditto.
@
text
@d25 1
a31 2
extern bool allow_ntea;
extern bool allow_smbntsec;
d535 1
a535 3
  if (wincap.has_security ())
    set_process_privilege (SE_CHANGE_NOTIFY_NAME,
			   !buf || !strcasematch (buf, "yes"));
d738 1
a738 1
      set_process_privilege (SE_CHANGE_NOTIFY_NAME, false);
@


1.111
log
@* environ.cc (spenv::retrieve): Revert most of previous change.
(build_env): Ditto.  Rework to track environment variables which need to always
be in the windows environment in a separate array.
@
text
@d881 1
a881 1
  {NL ("SYSTEMROOT="), true, false, &cygheap_user::env_systemroot},
d987 1
a987 1
	  if (*dstp && !no_envblock && *dstp != env_dontadd)
d989 1
@


1.110
log
@* environ.h (win_env::immediate): Declare new field.
(win_env::operator = ): Declare new operator.
(win_env::reset): Declare new function.
(win_env::~win_env): Declare new destructor.
(getwinenv): Add optional third argument to declaration.
* environ.cc (conv_envvars): Accommodate immediate field.
(win_env::operator =): Define new operator.
(win_env::~win_env): Define new destructor.
(win_env::add_cache): Add value to environment immediately if "immediate" is
set.
(getwinenv): Accept optional third argument which will be used to store
"cached" values to avoid overwriting real cache.
(spenv::force): Declare new field.
(spenvs): Accommodate force field.  Add "PATH=" with force set to true.
(spenv::retrieve): Avoid duping anything if we're not building an envblock.
(build_env): Ditto.  Use size of potentially constructed new environment block
to determine if we need to create an environment block.  Pass getwinenv
temporary storage to avoid inappropriately overwriting the environment cache.
@
text
@d902 1
a902 1
	  return (no_envblock && !force) ? env_dontadd : cstrdup1 (env);
d907 1
a907 1
      if (!p || (p == env_dontadd) || (!force && (no_envblock && !env)))
a915 2
  if (!force && no_envblock)
    return env_dontadd;
d945 1
a945 1
						  (n + SPENVS_SIZE + 1));
d948 2
d952 1
a952 1
  for (srcp = envp, dstp = newenv; *srcp; srcp++)
d954 1
d960 5
a964 3
	    if (*dstp != env_dontadd)
	      goto next0;
	    goto  next1;
a966 2
      if (no_envblock)
	goto next1;
d971 5
a975 3
      /* If necessary, calculate rough running total for envblock size */
      if (!no_envblock)
	tl += strlen (*dstp) + 1;
d998 2
a999 1
  if (!envc)
d1003 2
a1004 1
      debug_printf ("env count %d, bytes %d", envc, tl);
d1009 1
a1009 1
      qsort (newenv, envc, sizeof (char *), env_sort);
d1015 1
a1015 1
      for (srcp = newenv, s = envblock; *srcp; srcp++)
@


1.109
log
@	* environ.cc (set_traverse): New function.
	(parse_thing): Add "traverse" option.  Sort options alphabetically.
	(environ_init): On NT, switch on traverse checking by default.
@
text
@d62 1
a62 1
     cygwin_posix_to_win32_path_list_buf_size},
d64 1
a64 1
     cygwin_conv_to_full_win32_path, return_MAX_PATH, return_MAX_PATH},
d66 1
a66 1
     cygwin_conv_to_full_win32_path, return_MAX_PATH, return_MAX_PATH},
d68 1
a68 1
     cygwin_conv_to_full_win32_path, return_MAX_PATH, return_MAX_PATH},
d70 1
a70 1
     cygwin_conv_to_full_win32_path, return_MAX_PATH, return_MAX_PATH},
d72 1
a72 1
     cygwin_conv_to_full_win32_path, return_MAX_PATH, return_MAX_PATH},
d78 21
d118 8
d136 1
a136 1
getwinenv (const char *env, const char *in_posix)
d144 1
a144 1
	win_env * const we = conv_envvars + i;
d150 8
a157 1
	      we->add_cache (val);
d864 1
d876 9
a884 8
  {NL ("HOMEDRIVE="), false, &cygheap_user::env_homedrive},
  {NL ("HOMEPATH="), false, &cygheap_user::env_homepath},
  {NL ("LOGONSERVER="), false, &cygheap_user::env_logsrv},
  {NL ("SYSTEMDRIVE="), false, NULL},
  {NL ("SYSTEMROOT="), true, &cygheap_user::env_systemroot},
  {NL ("USERDOMAIN="), false, &cygheap_user::env_domain},
  {NL ("USERNAME="), false, &cygheap_user::env_name},
  {NL ("USERPROFILE="), false, &cygheap_user::env_userprofile},
d888 1
a888 1
spenv::retrieve (bool no_envblock, const char *const envname)
d890 1
a890 1
  if (envname && !strncasematch (envname, name, namelen))
d898 1
a898 1
      if (envname && !cygheap->user.issetuid ())
d901 2
a902 2
	  return cstrdup1 (envname);	/* Don't really care what it's set to
					   if we're calling a cygwin program */
d907 1
a907 1
      if (!p || (no_envblock && !envname) || (p == env_dontadd))
d916 4
a919 2
  if (envname)
    return cstrdup1 (envname);
d959 3
a961 3
	    if (*dstp == env_dontadd)
	      goto next1;
	    goto  next0;
d964 2
d995 1
a995 1
  if (no_envblock)
d1000 2
d1025 1
a1025 1
	  conv = getwinenv (*srcp, *srcp + len);
d1064 1
@


1.108
log
@Reorganize header file inclusion throughout so that cygerrno.h comes first.
* fhandler.h (select_record::thread_errno): Save any encountered errno here.
(select_record::set_select_errno): New function.
(select_record::saw_error): New function.
(select_record::select_record): Initialize thread_errno to zero.
* select.cc (set_handle_or_return_if_not_open): Set thread_errno on failure.
(select_stuff::wait): Record errno for later resurrection in calling thread.
(peek_serial): Ditto.
@
text
@d498 8
a536 3
#ifdef USE_SERVER
  {"server", {&allow_server}, justset, NULL, {{false}, {true}}},
#endif
d544 5
a549 1
  {"reset_com", {&reset_com}, justset, NULL, {{false}, {true}}},
d701 1
a701 1
  /* Set ntsec explicit as default, if NT is running */
d703 4
a706 1
    allow_ntsec = true;
@


1.107
log
@	* environ.cc: Yes, yes, the copyright date, as usual.
@
text
@d21 1
a22 1
#include "cygerrno.h"
@


1.106
log
@	* environ.cc (build_env): Disallow empty strings and strings starting
	with '=' in Win32 environment.
@
text
@d4 1
a4 1
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003 Red Hat, Inc.
@


1.105
log
@* environ.cc (environ_init): Alloc space for TERM if it is not set, like all of
the other environment variables.
@
text
@d960 8
@


1.104
log
@2004-12-03  Pierre Humblet <pierre.humblet@@ieee.org>

	* registry.h (reg_key::reg_key): Change arguments.
	* shared_info.h (class mount_info): Remove had_to_create_mount_areas.
	* registry.cc (reg_key::reg_key): Change constructors to always handle
	HKLM and to avoid relying on HKCU.
	Do not set mount_table->had_to_create_mount_areas.
	* path.cc (mount_info::conv_to_win32_path): Improve update of
	sys_mount_table_counter.
	(mount_info::read_mounts): Use new reg_key constructor.
	(mount_info::add_reg_mount): Ditto.
	(mount_info::del_reg_mount): Ditto.
	(mount_info::read_cygdrive_info_from_registry): Ditto.
	(mount_info::write_cygdrive_info_to_registry): Ditto.
	Update cygwin_shared->sys_mount_table_counter after registry update.
	(mount_info::get_cygdrive_info): Ditto.
	* shared.cc (shared_info::heap_chunk_size): Use new reg_key constructor.
	* environ.cc (regopt): Ditto.
@
text
@d749 1
a749 1
    envp[i++] = cygterm;
@


1.103
log
@* environ.cc (putenv): Accommodate recent newlib change in argument to putenv.
@
text
@a642 2
  /* FIXME: should not be under mount */
  reg_key r (KEY_READ, CYGWIN_INFO_PROGRAM_OPTIONS_NAME, NULL);
d647 1
a647 1
  if (r.get_string (lname, buf, sizeof (buf) - 1, "") == ERROR_SUCCESS)
d649 3
a651 10
      parse_options (buf);
      parsed_something = true;
    }
  else
    {
      reg_key r1 (HKEY_LOCAL_MACHINE, KEY_READ, "SOFTWARE",
		  CYGWIN_INFO_CYGNUS_REGISTRY_NAME,
		  CYGWIN_INFO_CYGWIN_REGISTRY_NAME,
		  CYGWIN_INFO_PROGRAM_OPTIONS_NAME, NULL);
      if (r1.get_string (lname, buf, sizeof (buf) - 1, "") == ERROR_SUCCESS)
d655 1
d658 1
@


1.102
log
@	* cygheap.h (class cygheap_user): Add psystemroot member and
	env_systemroot method.
	* environ.cc (struct spenv): Add add_always member.
	(spenvs): Accomodate new add_always member.  Add
	cygheap_user::env_systemroot method to SYSTEMROOT entry.
	(build_env): Check add_always member when adding missing environment
	variables from spenvs.
	* uinfo.cc (cygheap_user::env_systemroot): New method.
@
text
@d295 1
a295 1
putenv (const char *str)
@


1.101
log
@	* environ.cc (set_ntea): New function.
	(set_ntsec): Ditto.
	(set_smbntsec): Ditto.
	(parse_thing): Change ntea, ntsec and smbntsec settings to call
	appropriate functions.
@
text
@d822 1
d824 1
d834 8
a841 8
  {NL ("HOMEDRIVE="), &cygheap_user::env_homedrive},
  {NL ("HOMEPATH="), &cygheap_user::env_homepath},
  {NL ("LOGONSERVER="), &cygheap_user::env_logsrv},
  {NL ("SYSTEMDRIVE="), NULL},
  {NL ("SYSTEMROOT="), NULL},
  {NL ("USERDOMAIN="), &cygheap_user::env_domain},
  {NL ("USERNAME="), &cygheap_user::env_name},
  {NL ("USERPROFILE="), &cygheap_user::env_userprofile},
d933 2
a934 3
  if (cygheap->user.issetuid ())
    for (unsigned i = 0; i < SPENVS_SIZE; i++)
      if (!saw_spenv[i])
@


1.100
log
@* path.cc (chdir): Always use the normalized_path as posix_cwd, except if it
starts with a drive.

Also perform whitespace cleanup.
@
text
@d485 18
d537 3
a539 3
  {"ntea", {&allow_ntea}, justset, NULL, {{false}, {true}}},
  {"ntsec", {&allow_ntsec}, justset, NULL, {{false}, {true}}},
  {"smbntsec", {&allow_smbntsec}, justset, NULL, {{false}, {true}}},
@


1.99
log
@2004-05-09  Pierre Humblet <pierre.humblet@@ieee.org>

        * environ.cc (build_env): Only try to construct required-but-missing
        variables while issetuid.
@
text
@d916 1
a916 1
        {
d924 1
a924 1
  
@


1.98
log
@* syscalls.cc: Include environ.h.
(chroot): Set errno in case of path error.  Call getwinenv.
* environ.cc: Remove the NO_COPY attribute of conv_envvars.
@
text
@d913 12
a924 11
  for (unsigned i = 0; i < SPENVS_SIZE; i++)
    if (!saw_spenv[i])
      {
	*dstp = spenvs[i].retrieve (no_envblock);
	if (*dstp && !no_envblock && *dstp != env_dontadd)
	  {
	    tl += strlen (*dstp) + 1;
	    dstp++;
	  }
      }

@


1.97
log
@2003-11-11  Robert Collins <rbtcollins@@hotmail.com>
	    Ron Parker <rdparker@@butlermfg.com>

	* bsdlib.cc: Update throughout to use CYG_MAX_PATH rather than MAX_PATH.
	* cygheap.h: Ditto.
	* dcrt0.cc: Ditto.
	* delqueue.cc: Ditto.
	* dlfcn.cc: Ditto.
	* dll_init.cc: Ditto.
	* dll_init.h: Ditto.
	* dtable.cc: Ditto.
	* environ.cc: Ditto.
	* environ.h: Ditto.
	* exceptions.cc: Ditto.
	* external.cc: Ditto.
	* fhandler_disk_file.cc: Ditto.
	* fhandler_proc.cc: Ditto.
	* fhandler_process.cc: Ditto.
	* fhandler_raw.cc: Ditto.
	* fhandler_registry.cc: Ditto.
	* fhandler_socket.cc: Ditto.
	* fhandler_virtual.cc: Ditto.
	* miscfuncs.cc: Ditto.
	* mmap.cc: Ditto.
	* netdb.cc: Ditto.
	* path.cc: Ditto.
	* path.h: Ditto.
	* pinfo.cc: Ditto.
	* pinfo.h: Ditto.
	* pthread.cc: Ditto.
	* registry.cc: Ditto.
	* shared.cc: Ditto.
	* shared_info.h: Ditto.
	* smallprint.c: Ditto.
	* spawn.cc: Ditto.
	* strace.cc: Ditto.
	* syscalls.cc: Ditto.
	* thread.h: Ditto.
	* uinfo.cc: Ditto.
	* winsup.h: Ditto.
	* include/limits.h: Ditto.
	* include/cygwin/config.h: Ditto.
	* include/sys/param.h: Ditto.
@
text
@d57 1
a57 1
static NO_COPY win_env conv_envvars[] =
@


1.96
log
@* devices.cc: New file.
* devices.gperf: New file.
* devices.shilka: New file.
* cygwin-gperf: New file.
* cygwin-shilka: New file.
* fhandler_fifo.cc: New file.
* fhandler_nodevice.cc : New file.  Reorganize headers so that path.h precedes
fhandler.h throughout.  Remove device argument and unit arguments from fhandler
constructors throughout.  Remove pc arguments to fhandler functions and use
internal pc element instead, throughout.  Use dev element in pc throughout.
Use major/minor elements rather than units and device numbers previously in
fhandler class.  Use correct methods for fhandler file names rather than
directly accessing file name variables, throughout.
* Makefile.in (DLL_OFILES): Add devices.o, fhandler_fifo.o
* dcrt0.cc (dll_crt0_1): Call device::init.
* devices.h: Renumber devices based on more Linux-like major/minor numbers.
Add more devices.  Declare standard device storage.
(device): Declare struct.
* dir.cc (opendir): Use new 'build_fh_name' to construct a fhandler_* type.
* dtable.cc (dtable::get_debugger_info): Ditto.
(cygwin_attach_handle_to_fd): Ditto.
(dtable::release): Remove special FH_SOCKET case in favor of generic
"need_fixup_before" test.
(dtable::init_std_file_from_handle): Use either build_fh_dev or build_fh_name
to build standard fhandler.
(dtable::build_fh_name): Renamed from dtable::build_fhandler_from_name.  Move
out of dtable class.  Don't accept a path_conv argument.  Just build it here
and pass it to:
(build_fh_pc): Renamed from dtable::build_fhandler.  Move out of dtable class.
Use intrinsic device type in path_conv to create new fhandler.
(build_fh_dev): Renamed from dtable::build_fhandler.  Move out of dtable class.
Simplify arguments to just take new 'device' type and a name.  Just return
pointer to fhandler rather than trying to insert into dtable.
(dtable::dup_worker): Accommodate above build_fh name changes.
(dtable::find_fifo): New (currently broken) function.
(handle_to_fn): Use strechr for efficiency.
* dtable.h: Reflect above build_fh name changes and argument differences.
(fhandler_base *&operator []): Return self rather than copy of self.
* fhandler.cc (fhandler_base::operator =): Use pc element to set normalized
path.
(fhandler_base::set_name): Ditto.
(fhandler_base::raw_read): Use method to access name.
(fhandler_base::write): Correctly use get_output_handle rather than get_handle.
(handler_base::device_access_denied): New function.
(fhandler_base::open): Eliminate pc argument and use pc element of
fhandler_base throughout.
(fhandler_base::fstat): Detect if device is based in filesystem and use
fstat_fs to calculate stat, if so.
(fhandler_base::fhandler_base): Eliminate handling of file names and, instead,
just free appropriate component from pc.
(fhandler_base::opendir): Remove path_conv parameter.
* fhandler.h: Remove all device flags.
(fhandler_base::pc): New element.
(fhandler_base::set_name): Change argument to path_conv.
(fhandler_base::error): New function.
(fhandler_base::exists): New function.
(fhandler_base::pc_binmode): New function.
(fhandler_base::dev): New function.
(fhandler_base::open_fs): New function.
(fhandler_base::fstat_fs): New function.
(fhandler_base::fstat_by_name): New function.
(fhandler_base::fstat_by_handle): New function.
(fhandler_base::isfifo): New function.
(fhandler_base::is_slow): New function.
(fhandler_base::is_auto_device): New function.
(fhandler_base::is_fs_special): New function.
(fhandler_base::device_access_denied): New function.
(fhandler_base::operator DWORD&): New operator.
(fhandler_base::get_name): Return normalized path from pc.
(fhandler_base::get_win32_name): Return windows path from pc.
(fhandler_base::isdevice): Renamed from is_device.
(fhandler_base::get_native_name): Return device format.
(fhandler_fifo): New class.
(fhandler_nodevice): New class.
(select_stuff::device_specific): Remove array.
(select_stuff::device_specific_pipe): New class element.
(select_stuff::device_specific_socket): New class element.
(select_stuff::device_specific_serial): New class element.
(select_stuff::select_stuff): Initialize new elements.
* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Move to base class
from fhandler_disk_file.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_disk_file::open): Move most functionality into
fhandler_base::open_fs.
(fhandler_base::open_fs): New function.
(fhandler_disk_file::close): Move most functionality into
fhandler_base::close_fs.
(fhandler_base::close_fs): New function.
* fhandler_mem.cc (fhandler_dev_mem::open): Use device name in debugging
output.
* fhandler_socket.cc (fhandler_socket::set_connect_secret): Copy standard
urandom device into appropriate place.
(fhandler_socket::accept): Reflect change in fdsock return value.
* fhandler_tty.cc: See "throughouts" above.
* net.cc: Accommodate fdsock change throughout.
(fdsock): Return success or failure, accept fd argument and device argument.
* path.cc (symlink_info::major): New element.
(symlink_info::minor): New element.
(symlink_info::parse_device): Declare new function.
(fs_info::update): Accommodate changes in path_conv class.
(path_conv::fillin): Ditto.
(path_conv::return_and_clear_normalized_path): Eliminate.
(path_conv::set_normalized_path): New function.
(path_conv::path_conv): Set info in dev element.  Use path_conv methods Check
for FH_FS rather than FH_BAD to indicate when to fill in filesystem stuff.
where appropriate rather than direct access.  Use set_normalized_path to set
normalized path.
(windows_device_names): Eliminate.
(get_dev): Ditto.
(get_raw_device_number): Ditto.
(get_device_number): Ditto.
(win32_device_name): Call new device name parser to do most of the heavy
lifting.
(mount_info::conv_to_win32_path): Fill in dev field as appropriate.
(symlink_worker): Handle new device files.
(symlink_info::check): Ditto.
(symlink_info::parse_device): Define new function.
* path.h (executable_states): Move here from fhandler.h.
(fs_info): Rename variables to *_storage and create methods for accessing same.
(path_conv): Add dev element, remove devn and unit and adjust inline methods to
accommodate.
(set_normalized_path): Declare new function.
* pinfo.cc (_pinfo::commune_recv): Add broken support for handling fifos.
(_pinfo::commune_send): Ditto.
* pipe.cc (fhandler_pipe::close): check for existence of handle before closing
it.
(handler_pipe::create): Rename from make_pipe.  Change arguments to accept
fhandler_pipe array.  Accommodate fifos.
(pipe): Rework to deal with fhandler_pipe::create changes.
(_pipe): Ditto.
* select.cc: Use individual device_specific types throughout rather than
indexing with obsolete device number.
(set_bits): Use is_socket call rather than checking device number.
* shared_info.h (CURR_MOUNT_MAGIC): Update.
(conv_to_win32_path): Reflect addition of device argument.
* syscalls.cc (mknod_worker): New function.
(open): Use build_fh_name to build fhandler.
(chown_worker): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(chmod_device): New function.
(chmod): Detect if this is an 'auto' device rather than an on-filesystem device
and handle appropriately.  Use chmod_device to set mode of in-filesystem
devices.
(stat_worker): Eliminate path_conv argument.  Call build_fh_name to construct
fhandler.  Use fh->error() rather than pc->error to detect errors in fhandler
construction.
(access_worker): New function pulled from access.  Accommodate in-filesystem
devices.
(access): Use access_worker.
(fpathconf): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(mknod_worker): New function.
(mknod32): New function.
(chroot): Free normalized path -- assuming it was actually cmalloced.
* tty.cc (create_tty_master): Tweak for new device class.
(tty::common_init): Ditto.
* winsup.h (stat_worker): Remove.
(symlink_worker): Declare.
* exceptions.cc (set_process_mask): Just call sig_dispatch_pending and don't
worry about pending_signals since sig_dispatch_pending should always do the
right thing now.
(sig_handle): Reorganize SIGCONT handling to more closely conform to SUSv3.
* pinfo.h: Move __SIG enum to sigproc.h.
(PICOM_FIFO): New enum element.
(_pinfo): Remove 'thread2signal' stuff throughout class.
(_pinfo::commune_send): Make varargs.
(_pinfo::sigtodo): Eliminate.
(_pinfo::thread2signal): Ditto.
* signal.cc (kill_worker): Eliminate call to setthread2signal.
* sigproc.cc (local_sigtodo): Eliminate.
(getlocal_sigtodo): Ditto.
(sigelem): New class.
(pending_signals): New class.
(sigqueue): New variable, start of sigqueue linked list.
(sigcatch_nonmain): Eliminate.
(sigcatch_main): Eliminate.
(sigcatch_nosync): Eliminate.
(sigcomplete_nonmain): Eliminate.
(pending_signals): Eliminate.
(sig_clear): Call signal thread to clear pending signals, unless already in
signal thread.
(sigpending): Call signal thread to get pending signals.
(sig_dispatch_pending): Eliminate use of pending_signals and just check
sigqueue.
(sigproc_terminate): Eliminate all of the obsolete semaphore stuff.  Close
signal pipe handle.
(sig_send): Eliminate all of the obsolete semaphore stuff and use pipe to send
signals.
(getevent): Eliminate.
(pending_signals::add): New function.
(pending_signals::del): New function.
(pending_signals::next): New function.
(wait_sig): Eliminate all of the obsolete semaphore stuff.  Use pipe to
communicate and maintain a linked list of signals.
* sigproc.h: Move __SIG defines here.  Add __SIGPENDING.
(sig_dispatch_pending): Remove "C" specifier.
(sig_handle): Accept a mask argument.
* thread.cc: Remove signal handling considerations throughout.
@
text
@d56 1
a56 1
static int return_MAX_PATH (const char *) {return MAX_PATH;}
d542 1
a542 1
      char newbuf[MAX_PATH + 7];
d627 1
a627 1
  char buf[MAX_PATH];
@


1.95
log
@Throughout, change USE_CYGSERVER to USE_SERVER.
* Makefile.in (LIBSERVER): Define and use.
* configure.in: Set LIBSERVER as appropriate.
* environ.cc: Rename allow_daemon to allow_server.  Only recognize when
USE_SERVER is defined.
@
text
@d20 1
a21 1
#include "path.h"
@


1.94
log
@* environ.cc (check_case_init): Use strncasematch.
* cygwin.din: Export __mempcpy.
* cygwin/version.h: Bump api minor number.
@
text
@a37 1
bool allow_daemon = false;
d39 3
d511 3
a513 1
  {"daemon", {&allow_daemon}, justset, NULL, {{false}, {true}}},
@


1.93
log
@* Makefile.in: Remove cygserver stuff.
* acconfig.h: Add USE_CYGSERVER define.
* config.h.in: Regenerate.
* configure.in: Add --enable-server setting.
* configure: Regenerate.
* fhandler_tty.cc (fhandler_tty_slave::open): Conditionalize compilation of
cygserver stuff.
* fork.cc (fork_child): Ditto.
* shm.cc: Ditto.
* tty.cc (tty::common_init): Ditto.
* dcrt0.cc: Use bool rather than BOOL for CYGWIN environment variable
definitions.
* environ.cc: Ditto.
* ntea.cc: Ditto.
* security.cc: Ditto.
* security.h: Ditto.
* syscalls.cc (check_posix_perm): Remove externs that were already declared in
a header.
* winsup.h: Ditto.  Declare _MT_SAFE here.  Delete it someday since cygwin
should always be _MT_SAFE.
@
text
@d408 1
a408 1
  if (strncmp (buf, "relax", 5)== 0)
@


1.92
log
@Throughout, remove "include <errno.h>" from files which already include
cygerrno.h.
* include/cygwin/config.h (__DYNAMIC_REENT__): Define.
* include/cygwin/version.h: Bump API minor version.
* cygwin.din: Export __getreent
* cygerrno.h: Include errno.h.  Fix places where _impure_ptr is used directly
to store the errno value.
* debug.cc (__set_errno): Ditto.
* errno.cc: Remove _RRENT_ONLY define to get errno.cc compiled.
* signal.cc: Rename _reent_clib to _REENT throughout.
* thread.h (reent_clib): Remove prototype.
* thread.cc (reent_clib): Rename reent_clib to __getreent.  Return _impure_ptr
until MTinterface is initialized.
(reent_winsup): Fix a possible SEGV when _r == NULL.  Return NULL instead.
* MTinterface::fixup_after_fork: Switch reent back to _impure_ptr to keep
signal handling running when fork is called from a thread other than the
mainthread.
@
text
@d4 1
a4 1
   Copyright 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
d29 1
a29 2
extern BOOL allow_daemon;
extern BOOL allow_glob;
d31 4
a34 4
extern BOOL allow_ntea;
extern BOOL allow_smbntsec;
extern BOOL allow_winsymlinks;
extern BOOL strip_title_path;
d37 3
a39 2
BOOL reset_com = FALSE;
static BOOL envcache = TRUE;
d368 1
a368 1
static NO_COPY BOOL export_settings = false;
d387 2
a388 2
      allow_glob = FALSE;
      ignore_case_with_glob = FALSE;
d392 2
a393 2
      allow_glob = TRUE;
      ignore_case_with_glob = TRUE;
d397 2
a398 2
      allow_glob = TRUE;
      ignore_case_with_glob = FALSE;
d491 1
a491 1
	BOOL *b;
d509 2
a510 2
  {"daemon", {&allow_daemon}, justset, NULL, {{FALSE}, {TRUE}}},
  {"envcache", {&envcache}, justset, NULL, {{TRUE}, {FALSE}}},
d512 1
a512 1
  {"export", {&export_settings}, justset, NULL, {{FALSE}, {TRUE}}},
d515 5
a519 5
  {"ntea", {&allow_ntea}, justset, NULL, {{FALSE}, {TRUE}}},
  {"ntsec", {&allow_ntsec}, justset, NULL, {{FALSE}, {TRUE}}},
  {"smbntsec", {&allow_smbntsec}, justset, NULL, {{FALSE}, {TRUE}}},
  {"reset_com", {&reset_com}, justset, NULL, {{FALSE}, {TRUE}}},
  {"strip_title", {&strip_title_path}, justset, NULL, {{FALSE}, {TRUE}}},
d521 1
a521 1
  {"title", {&display_title}, justset, NULL, {{FALSE}, {TRUE}}},
d523 1
a523 1
  {"winsymlinks", {&allow_winsymlinks}, justset, NULL, {{FALSE}, {TRUE}}},
d679 1
a679 1
    allow_ntsec = TRUE;
@


1.91
log
@* include/cygwin/in.h (sockaddr_in): Fix typo.
@
text
@a10 1
#include <errno.h>
@


1.90
log
@* security.cc (allow_ntsec): Default to zero.
* environ.cc (environ_init): Set allow_ntsec to TRUE by default, assuming OS
allows it.
@
text
@d722 1
a722 3
      char *eq;
      if ((eq = strchr (newp, '=')) == NULL)
	eq = strchr (newp, '\0');
@


1.90.16.1
log
@merge from trunk.
Reorganize includes throughout so that path.h comes before fhandler.h.
Eliminate path_conv arguments from fhandler functions which take them,
throughout.  Use get_name() and get_win32_name() consistently throughout for
fhandler objects.  Use build_fh_* functions throughout, where appropriate.
* fhandler.h (fhandler_base): Store path_conv struct here.  Remove dev.
* dtable.h (dtable::build_fhandler_*): Remove.
(build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* dtable.cc (build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* fhandler.h (fhandler_base::set_name): Change argument.
* fhandler.cc (fhandler_base::set_name): Just accept a path_conv argument.
(executable_states): Move.
* path.h (executable_state): Accept.
* syscalls.cc (stat_worker): Make static.
* winsup.h (stat_worker): Remove definition.
@
text
@d21 1
a22 1
#include "fhandler.h"
d722 3
a724 1
      char *eq = strechr (newp, '=');
@


1.90.16.2
log
@merge from trunk
@
text
@d4 1
a4 1
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003 Red Hat, Inc.
d11 1
d30 2
a31 1
extern bool allow_glob;
d33 4
a36 4
extern bool allow_ntea;
extern bool allow_smbntsec;
extern bool allow_winsymlinks;
extern bool strip_title_path;
d39 2
a40 3
bool reset_com = false;
bool allow_daemon = false;
static bool envcache = true;
d369 1
a369 1
static NO_COPY bool export_settings = false;
d388 2
a389 2
      allow_glob = false;
      ignore_case_with_glob = false;
d393 2
a394 2
      allow_glob = true;
      ignore_case_with_glob = true;
d398 2
a399 2
      allow_glob = true;
      ignore_case_with_glob = false;
d492 1
a492 1
	bool *b;
d510 2
a511 2
  {"daemon", {&allow_daemon}, justset, NULL, {{false}, {true}}},
  {"envcache", {&envcache}, justset, NULL, {{true}, {false}}},
d513 1
a513 1
  {"export", {&export_settings}, justset, NULL, {{false}, {true}}},
d516 5
a520 5
  {"ntea", {&allow_ntea}, justset, NULL, {{false}, {true}}},
  {"ntsec", {&allow_ntsec}, justset, NULL, {{false}, {true}}},
  {"smbntsec", {&allow_smbntsec}, justset, NULL, {{false}, {true}}},
  {"reset_com", {&reset_com}, justset, NULL, {{false}, {true}}},
  {"strip_title", {&strip_title_path}, justset, NULL, {{false}, {true}}},
d522 1
a522 1
  {"title", {&display_title}, justset, NULL, {{false}, {true}}},
d524 1
a524 1
  {"winsymlinks", {&allow_winsymlinks}, justset, NULL, {{false}, {true}}},
d680 1
a680 1
    allow_ntsec = true;
@


1.90.16.3
log
@merge from trunk
@
text
@d408 1
a408 1
  if (strncasematch (buf, "relax", 5))
@


1.90.16.4
log
@merge from trunk
@
text
@d38 1
a39 3
#ifdef USE_SERVER
extern bool allow_server;
#endif
d509 1
a509 3
#ifdef USE_SERVER
  {"server", {&allow_server}, justset, NULL, {{false}, {true}}},
#endif
@


1.89
log
@* environ.cc (environ_init): Avoid a compiler warning.
* path.cc (path_conv::check): Ditto.
* path.h (path_conv::operator int): Ditto.
* regex/engine.c: Ditto throughout.
* regex/regcomp.c: Ditto throughout.
* regex/regexec.c: Ditto throughout.
@
text
@a677 1
#ifdef NTSEC_ON_BY_DEFAULT
a680 1
#endif
@


1.88
log
@More GNUify non-GNU formatted functions calls throughout.
@
text
@d668 2
a669 2
	  conv_start_chars[cyg_tolower (conv_envvars[i].name[0])] = 1;
	  conv_start_chars[cyg_toupper (conv_envvars[i].name[0])] = 1;
@


1.87
log
@* cygthread.cc (cygthread::initialized): Avoid copying on fork or some threads
may not end up in the pool.
(cygthread::new): Avoid race when checking for initialized.  Add debugging
code.
* fhandler.cc (fhandler_base::raw_read): Add case for ERROR_INVALID_HANDLE due
to Win95 directories.
(fhandler_base::open): Handle errors due to Win95 directories.
(fhandler_base::close): Add get_nohandle () test.
(fhandler_base::set_close_on_exec): Ditto.
(fhandler_base::fork_fixup): Ditto.
(fhandler_base::lock): Change error code to Posix EINVAL.
(fhandler_base::dup): If get_nohandle (), set new value to INVALID_HANDLE_VALUE
instead of NULL.
* fhandler_disk_file.cc (fhandler_disk_file::fstat): Call fstat_by_name if
get_nohandle ().  Remove extraneous element from strpbrk.
(fhandler_disk_file::open): Remove test for Win95 directory.
* fhandler_random.cc (fhandler_dev_random::open): Add set_nohandle ().
* fhandler_clipboard.cc (fhandler_dev_clipboard::open): Ditto.
* fhandler_zero.cc (fhandler_dev_zero::open): Ditto.
(fhandler_dev_zero::close): Delete.
* fhandler.h (class fhandler_dev_zero): Ditto.
@
text
@d625 1
a625 1
  char lname[strlen(name) + 1];
d668 2
a669 2
	  conv_start_chars[cyg_tolower(conv_envvars[i].name[0])] = 1;
	  conv_start_chars[cyg_toupper(conv_envvars[i].name[0])] = 1;
d731 2
a732 2
      if (*newp == 'C' && strncmp (newp, "CYGWIN=", sizeof("CYGWIN=") - 1) == 0)
	parse_options (newp + sizeof("CYGWIN=") - 1);
@


1.86
log
@* environ.cc (parse_options): Remember the "no" part of any options for later
export.
@
text
@d963 1
a963 1
	      		(char *) realloc (envblock, 2 + tl);
d966 1
a966 1
	        {
@


1.85
log
@* environ.cc (parse_options): Use setenv to potentially replace CYGWIN value on
export.  Fixes broken behavior since November 2000 changes.
(regopt): Return indication of whether or not something has been parsed from
the registry.
(environ_init): Only attempt to export CYGWIN variable when values were set
from the registry.  It is exported automatically otherwise.
@
text
@d562 1
d606 1
a606 1
	    p = strdup (p);
@


1.84
log
@* environ.cc (spenv::retrieve): Detect return of env_dontadd from cygheap_user
methods.
(build_env): Avoid incrementing environment pointer if not actually adding to
the environment.  That could result in garbage in the environment table.  Be
more defensive when reallocing envblock.
@
text
@d369 1
a369 1
static NO_COPY BOOL export_settings = FALSE;
d539 2
a540 1
      char newbuf[MAX_PATH + 7] = "CYGWIN";
d548 6
a553 5
      if (!export_settings)
	return;
      newbuf[sizeof ("CYGWIN") - 1] = '=';
      debug_printf ("%s", newbuf);
      putenv (newbuf);
d617 1
a617 1
static void __stdcall
d620 1
d626 1
d628 4
a631 1
    parse_options (buf);
d639 4
a642 1
	parse_options (buf);
d645 1
d659 1
d673 1
a673 1
  regopt ("default");
d675 1
a675 1
    regopt (myself->progname);
d751 4
a754 1
  parse_options (NULL);
d911 1
d917 1
a917 1
	if (*dstp && *dstp != env_dontadd && !no_envblock)
d925 1
@


1.83
log
@* environ.cc (spenv::from_cygheap): Still need to take setuid into
consideration.
@
text
@d829 1
a829 1
      if (!p || (no_envblock && !envname))
d901 1
a901 1
	if (*dstp && *dstp != env_dontadd)
d903 1
a903 2
	    if (!no_envblock)
	      tl += strlen (*dstp) + 1;
d943 1
d945 1
a945 1
	      		(char *) realloc (envblock, 2 + (tl += len + 100));
@


1.82
log
@* cygheap.h (cygheap_user): Reorg to accommodate environment caching.
(cygheap_user::logsrv): New method.
(cygheap_user::winname): Ditto.
(cygheap_user::domain): Ditto.
(cygheap_user::test_uid): Ditto.
* cygheap.cc (cygheap_user::set_name): Reflect name "pwinname" name change.
* environ.cc (getwinenveq): New function.
(spenv::from_cygheap): Change arguments.
(spenv::retrieve): Ditto for call.  Use getwinenveq to retrieve info from
environment.  Always return value from cygwin environment, if it exists.
* environ.h (getwinenveq): Declare.
* uinfo.cc (cygheap_user::ontherange): Use logsrv() rather than env_logsrv().
(cygheap_user::test_uid): Define new method.
(cygheap_user::env_logsrv): Accept environment arguments.  Use test_uid to find
info.
(cygheap_user::env_domain): Ditto.
(cygheap_user::env_userprofile): Ditto.
(cygheap_user::env_homepath): Ditto.
(cygheap_user::env_homedrive): Ditto.
(cygheap_user::env_name): Ditto.
@
text
@d820 1
a820 1
      if (envname)
@


1.81
log
@* cygheap.cc (cfree_and_set): New function.
(cygheap_user::set_name): Use cfree_and_set to reset members.
* cygheap.h (cygheap_user): Delete static members.
(cygheap_user::puserprof): New member.
(cfree_and_set): Declare.
* dcrt0.cc (almost_null): Define.
* winsup.h (almost_null): Declare.
* syscalls.cc (cfree_and_set): Remove unused variable.
* uinfo.cc (cygheap_user::homepath_env_buf): Eliminate.
(cygheap_user::homedrive_env_buf): Ditto.
(cygheap_user::userprofile_env_buf): Ditto.
(cygheap_user::ontherange): YA change to try to preserve existing HOMEPATH and
HOMEDRIVE.  Return almost_null values when variables should not actually exist.
(cygheap_user::env_logsrv): Ditto.
(cygheap_user::env_domain): Ditto.
(cygheap_user::env_userprofile): Ditto.
@
text
@d753 32
d789 1
a789 1
  const char * (cygheap_user::*from_cygheap) ();
d820 1
a820 3
      if (cygheap->user.issetuid ())
	debug_printf ("calculating for setuid");
      else
d822 2
a823 12
	  debug_printf ("calculating for non-setuid");
	  if (!envname)
	    {
	      debug_printf ("not adding %s to windows environment", name);
	      return NULL;		/* No need to force these into the
					   environment */
	    }

	  if (no_envblock)
	    {
	      debug_printf ("duping existing value for '%s'", name);
	      return cstrdup1 (envname);/* Don't really care what it's set to
a824 1
	    }
d828 1
a828 1
      p = (cygheap->user.*from_cygheap) ();
d841 1
a841 18
  char dum[1];
  int vallen = GetEnvironmentVariable (name, dum, 0);
  if (vallen > 0)
    {
      char *p = (char *) cmalloc (HEAP_1_STR, namelen + ++vallen);
      strcpy (p, name);
      if (GetEnvironmentVariable (name, p + namelen, vallen))
	{
	  debug_printf ("using value from GetEnvironmentVariable for '%s'",
			envname);
	  return p;
	}
      else
	cfree (p);
    }

  debug_printf ("warning: %s not present in environment", name);
  return NULL;
@


1.80
log
@* cygheap.cc (cygheap_user::set_name): Avoid clearing things when just setting
name to itself or during first time initialization.
* environ.cc (check_case_init): Make case insensitive.
@
text
@d762 1
a762 1
char env_dontadd[] = "";
@


1.79
log
@* autoload (noload): Avoid clobbering bx register.
* environ.cc (codepage_init): Use case insensitive match.
* fhandler_console.cc (cp_get_internal): Delete.
(con_to_str): Use get_cp to derive code page.
(str_to_con): Ditto.
* miscfuncs.cc (get_cp): New function.
(sys_wcstombs): New function.  Converted from macro.
(sys_mbstowcs): Ditto.
* winsup.h: Reflect above changes.
@
text
@d414 1
a414 1
  else if (strcmp (buf, "adjust")== 0)
d419 1
a419 1
  else if (strcmp (buf, "strict")== 0)
@


1.78
log
@* uinfo.cc (cygheap_user::ontherange): Use env_name for NetUserGetInfo.
(cygheap_user::env_logsrv): Verify env_domain is valid.
* environ.cc: Include child_info.h and keep spenvs[] sorted.
(environ_init): Check child_proc_info instead of myself->ppid_handle.
@
text
@d451 1
a451 1
  if (strcmp (buf, "oem")== 0)
d456 1
a456 1
  else if (strcmp (buf, "ansi")== 0)
d462 1
a462 3
    {
      debug_printf ("Wrong codepage name: %s", buf);
    }
@


1.77
log
@Use hMainProc where appropriate, throughout.
* environ.cc (spenv::retrieve): Add debugging statements.
* pinfo.cc (set_myself): Don't call strace.hello if already stracing.
* strace.cc (strace): Move NO_COPY keyword so that it will actually take
effect.
@
text
@d28 1
d716 1
a716 1
      if (!myself->ppid_handle)
d769 1
a770 1
  {NL ("HOMEDRIVE="), &cygheap_user::env_homedrive},
d813 1
a813 1
        return env_dontadd;
@


1.76
log
@* cygheap.h (cygheap_user::issetuid): New method.
* dtable.cc (dtable::vfork_child_dup): Use new method to determine if we are in
"setuid mode."
* fork.cc (fork_parent): Ditto.
* spawn.cc (spawn_guts): Ditto.
* syscalls.cc (seteuid32): Ditto.
(setegid32): Ditto.
* environ.cc (spenv::retrieve): (Suggested by Pierre Humblet) Do potential
recalculation of cygheap_user stuff when in setuid mode.  Return special value
when environment variable exists but should not be added.
(build_env): Don't add retrieved value to dstp if it is 'dont_add'.
@
text
@d61 2
a62 2
    {NL ("HOME="), NULL, NULL, cygwin_conv_to_full_posix_path, cygwin_conv_to_full_win32_path,
     return_MAX_PATH, return_MAX_PATH},
d65 6
a70 6
    {NL ("TMPDIR="), NULL, NULL, cygwin_conv_to_full_posix_path, cygwin_conv_to_full_win32_path,
     return_MAX_PATH, return_MAX_PATH},
    {NL ("TMP="), NULL, NULL, cygwin_conv_to_full_posix_path, cygwin_conv_to_full_win32_path,
     return_MAX_PATH, return_MAX_PATH},
    {NL ("TEMP="), NULL, NULL, cygwin_conv_to_full_posix_path, cygwin_conv_to_full_win32_path,
     return_MAX_PATH, return_MAX_PATH},
d783 3
d789 3
a791 1
      if (!cygheap->user.issetuid ())
d793 1
d795 3
a797 1
	    return NULL;		/* No need to force these into the
d799 1
d802 3
a804 1
	    return cstrdup1 (envname);	/* Don't really care what it's set to
d806 1
d816 1
d830 5
a834 1
	return p;
@


1.75
log
@Changes suggested by Pierre Humblet.
* environ.cc (NL): New macro.
(conv_envvars): Use NL macro to fill in name and namelen.
(spenv::namelen): New field.
(spenvs): Use NL to fill in name and namelen.
(spenv::retrieve): Eliminate length argument.  Instead, use namelen throughout.
(build_env): Don't calculate length of initial FOO= part of environment.
Accommodate spenv::retrive argument change.
@
text
@d763 2
d786 4
a789 2
      if (!envname)
	return NULL;			/* No need to force these into the
d792 2
a793 2
      if (no_envblock)
	return cstrdup1 (envname);	/* Don't really care what it's set to
d795 1
d797 4
a800 4
      /* Make a FOO=BAR entry from the value returned by the cygheap_user
         method. */
      if (!(p = (cygheap->user.*from_cygheap) ()))
        return NULL;
d854 1
a854 1
  for (srcp = envp, dstp = newenv; *srcp; srcp++, dstp++)
d861 3
a863 1
	    goto next;
d869 1
a869 1
    next:
d873 3
d883 1
a883 1
	if (*dstp)
@


1.74
log
@* child_info.h (child_proc_info): Declare as base class.
(spawn_info): Declare as alias of child_proc_info to aid debugging.
(fork_info): Ditto.
* cygheap.cc (cygheap_fixup_in_child): Use child_proc_info global rather than
parameter.
* cygheap.h (cygheap_fixup_in_child): Reflect above change in declaration.
* dcrt0.cc (_dll_crt0): Move 'si' definition here.  Assign child_proc_info.
(dll_crt0_1): Accommodate cygheap_fixup_in_child and *_info changes.
* environ.cc (spenv::retrieve): Make regparm.
* environ.h (environ_init): Ditto.
(win_env::add_cache): Ditto.
(build_env): Ditto.
(getwinenv): Ditto.
* fork.cc (sync_with_parent): Use fork_info global.
(fork_child): Ditto.
@
text
@d47 1
d57 1
a57 1
    {"PATH=", 5, NULL, NULL, cygwin_win32_to_posix_path_list,
d61 1
a61 1
    {"HOME=", 5, NULL, NULL, cygwin_conv_to_full_posix_path, cygwin_conv_to_full_win32_path,
d63 1
a63 1
    {"LD_LIBRARY_PATH=", 16, NULL, NULL, cygwin_conv_to_full_posix_path,
d65 1
a65 1
    {"TMPDIR=", 7, NULL, NULL, cygwin_conv_to_full_posix_path, cygwin_conv_to_full_win32_path,
d67 1
a67 1
    {"TMP=", 4, NULL, NULL, cygwin_conv_to_full_posix_path, cygwin_conv_to_full_win32_path,
d69 1
a69 1
    {"TEMP=", 5, NULL, NULL, cygwin_conv_to_full_posix_path, cygwin_conv_to_full_win32_path,
d757 1
d759 1
a759 1
  char *retrieve (bool, const char * const = NULL, int = 0)
d766 8
a773 8
  {"HOMEPATH=", &cygheap_user::env_homepath},
  {"HOMEDRIVE=", &cygheap_user::env_homedrive},
  {"LOGONSERVER=", &cygheap_user::env_logsrv},
  {"SYSTEMDRIVE=", NULL},
  {"SYSTEMROOT=", NULL},
  {"USERDOMAIN=", &cygheap_user::env_domain},
  {"USERNAME=", &cygheap_user::env_name},
  {"USERPROFILE=", &cygheap_user::env_userprofile},
d777 1
a777 1
spenv::retrieve (bool no_envblock, const char *const envname, int len)
d779 1
a779 1
  if (len && !strncasematch (envname, name, len))
d784 1
a784 1
      if (!len)
a795 1
      int namelen = strlen (name);
d802 1
a802 1
  if (len)
a808 1
      int namelen = strlen (name);
a850 2
      len = strcspn (*srcp, "=") + 1;

d853 1
a853 2
	if (!saw_spenv[i]
	    && (*dstp = spenvs[i].retrieve (no_envblock, *srcp, len)))
d859 1
d863 1
d881 1
a881 1
  envc = dstp - newenv;
@


1.73
log
@* cygheap.h (cygheap_user::userprofile_env_buf): New static member.
* environ.cc (build_env): Add debugging statement.
(spenvs): Switch functions for USERDOMAIN and USERNAME.
* spawn.cc (spawn_guts): Move environment initialization prior to
cygheap_setup_for_child or environment info will never be copied to child.
@
text
@d757 2
a758 1
  char *retrieve (bool, const char * const = NULL, int = 0);
@


1.72
log
@* cygheap.cc (cygheap_user::set_logsrv): Remove.
(cygheap_user::set_domain): Ditto.
* cygheap.h (cygheap_user::set_logsrv): Remove declaration.
(cygheap_user::set_domain): Ditto.
(cygheap_user::env_domain): Declare new method.
(cygheap_user::env_name): Ditto.
* environ.cc (spenvs): Add two environment variables.
* spawn.cc (spawn_guts): Call build_env after RevertToSelf.  Always set
ciresrv.mount_h.
(cygheap_user::ontherange): Recalculate homedrive/homepath if they are empty.
Use env_logsrv to get logon server.
(cygheap_user::env_logsrv): Calculate server name here rather than relying on
it having been previously calculated.
(cygheap_user::env_domain): Ditto for domain name.
(cygheap-user::env_name): New method.
* syscalls.cc (seteuid32): Do not get or set the environment.  Do not call
LookupAccountSid nor internal_getlogin.  Set cygheap->user name and sid from
the passwd entry.
* uinfo.cc (uinfo_init): Only call internal_getlogin when starting from a non
Cygwin process and use the values returned in user.
(internal_getlogin): Simplify to case where starting from a non Cygwin process.
Store return values in user and return void.  Do not set the Windows default
environment.
* dcrt0.cc (dll_crt0_1): Call uinfo_init only when needed.  Do not set
myself->uid nor reset user.sid.
* spawn.cc (spawn_guts): Get the sid from cygheap->user.  Always
RevertToSelf().  Don't set uid in impersonated case.
* cygheap.cc (cygheap_user::set_sid): Do not set orig_sig.
(cygheap_user::set_orig_sid): New.
* cygheap.h: Declare cygheap_user::set_sid.
* winsup.h: Add argument to uinfo_init().
@
text
@d768 2
a769 2
  {"USERDOMAIN=", &cygheap_user::env_name},
  {"USERNAME=", &cygheap_user::env_domain},
d942 1
@


1.71
log
@        * environ.cc (build_env): If realloc moves envblock, move s with it.
@
text
@d768 2
@


1.70
log
@	* cygheap.cc (cygheap_user::set_name): Revert previous change.
	* environ.cc (spenv::retrieve): Check return value of call to
	cygheap->user.*from_cygheap().
@
text
@d913 10
a922 1
	    envblock = (char *) realloc (envblock, 2 + (tl += len + 100));
@


1.69
log
@* environ.cc (build_env): Correctly fill out windows environment block with
win32 paths rather than posix paths.
@
text
@d789 2
a790 1
      p = (cygheap->user.*from_cygheap) ();
@


1.68
log
@* cygheap.cc (cygheap_user::set_name): Set homedrive and homepath to NULL on
user name change.
(cygheap_user::set_logsrv): Allocate enough space for leading \\ so that we can
put this in the environment, if needed.
* cygheap.h (homebodies): New enum.
(cygheap_user::homedrive): New field.
(cygheap_user::homepath): Ditto.
(cygheap_user::env_logsrv): New method.
(cygheap_user::env_homepath): New method.
(cygheap_user::env_homedrive): New method.
(cygheap_user::env_userprofile): New method.
(cygheap_user::ontherange): New method.
* environ.cc (envsize): Eliminate debugging argument.
(environ_init): Assume that envc counts number of elments not total size.
(spenv): New class.
(spenvs): New array, renamed from forced_winenv_vars, using spenv.
(spenv::retrieve): New method.
(build_env): Rename from 'winenv' -- one stop shopping for building new
environment blocks for both windows and "unix".
* environ.h (build_env: Declare.
(winenv): Delete declaration.
(envsize): Ditto.
* spawn.cc (spawn_guts): Use build_env to build windows and cygwin environment
blocks.
* uinfo.cc (internal_getlogin): Eliminate environment manipulation.  Default to
info from GetUserName if it exists.  Move HOMEPATH and HOMEDRIVE stuff
elsewhere.  Move HOME setting elsewhere.  Only set HOME environment variable in
processes that are not parented by a cygwin process.
(cygheap_user::ontherange): Define new method.
(cygheap_user::env_logsrv): Ditto.
(cygheap_user::env_homepath): Ditto.
(cygheap_user::env_homedrive): Ditto.
(cygheap_user::env_userprofile): Ditto.
@
text
@d15 1
d100 3
a102 4
 * to the beginning of the environment variable name.  n is the length
 * of the name including a mandatory '='.  Returns a pointer to the
 * appropriate conversion structure.
 */
d114 1
a114 1
	if (!cur_environ () || !(val = in_posix ?: getenv(we->name)))
d827 1
a827 1
  int len, n, tl;
d834 1
a834 2
  tl = 0;

d838 7
a844 2
  char **newenv = (char **) cmalloc (HEAP_1_ARGV, sizeof (char *) * (n + SPENVS_SIZE + 1));

d849 1
d851 2
a852 1
	if (!saw_spenv[i] && (*dstp = spenvs[i].retrieve (no_envblock,*srcp, len)))
d855 1
a855 1
	    goto last;
d858 1
a858 8
      win_env *conv;
      if (!(conv = getwinenv (*srcp, *srcp + len)))
	*dstp = cstrdup1 (*srcp);
      else
	*dstp = cstrdup1 (conv->native);

      if ((*dstp)[0] == '!' && isdrive ((*dstp) + 1) && (*dstp)[3] == '=')
	**dstp = '=';
d860 3
a862 2
     last:
      tl += strlen (*dstp) + 1;
d865 1
d872 2
a873 1
	    tl += strlen (*dstp) + 1;
d891 4
a894 3
      char *ptr;
      envblock = (char *) malloc (tl + 2);
      for (srcp = newenv, ptr = envblock; *srcp; srcp++)
d896 28
a923 3
	  len = strlen (*srcp);
	  memcpy (ptr, *srcp, len + 1);
	  ptr += len + 1;
d925 3
a927 1
      *ptr = '\0';		/* Two null bytes at the end */
@


1.67
log
@* dtable.cc (handle_to_fn): Attempt to handle "raw" accesses to remote shares.
* path.cc (mount_info::conv_to_win32_path): Set flags to binary when mount
entry is not found.
(mount_info::set_flags_from_win32_path): Ditto.
@
text
@d198 2
a199 2
extern int __stdcall
envsize (const char * const *in_envp, int debug_print)
d203 1
a203 2
    if (debug_print)
      debug_printf ("%s", *envp);
d675 2
d753 7
d761 55
a815 6
static const NO_COPY char* forced_winenv_vars [] =
  {
    "SYSTEMDRIVE",
    "SYSTEMROOT",
    NULL
  };
d817 1
a817 1
#define FORCED_WINENV_SIZE (sizeof (forced_winenv_vars) / sizeof (forced_winenv_vars[0]))
d823 3
a825 2
char * __stdcall
winenv (const char * const *envp, int keep_posix)
d829 2
a830 3
  const char **dstp;
  bool saw_forced_winenv[FORCED_WINENV_SIZE] = {0};
  char *p;
d832 1
a832 1
  debug_printf ("envp %p, keep_posix %d", envp, keep_posix);
d839 1
a839 1
  const char *newenvp[n + 1 + FORCED_WINENV_SIZE];
d841 1
a841 1
  for (srcp = envp, dstp = newenvp; *srcp; srcp++, dstp++)
d843 9
a851 1
      len = strcspn (*srcp, "=");
d853 4
a857 9
      if (keep_posix || !(conv = getwinenv (*srcp, *srcp + len + 1)))
	*dstp = *srcp;
      else
	{
	  p = (char *) alloca (strlen (conv->native) + 1);
	  strcpy (p, conv->native);
	  *dstp = p;
	}
      tl += strlen (*dstp) + 1;
d859 1
a859 6
	{
	  p = (char *) alloca (strlen (*dstp) + 1);
	  strcpy (p, *dstp);
	  *p = '=';
	  *dstp = p;
	}
d861 2
a862 3
      for (int i = 0; forced_winenv_vars[i]; i++)
	if (!saw_forced_winenv[i])
	  saw_forced_winenv[i] = strncasematch (forced_winenv_vars[i], *srcp, len);
d865 2
a866 3
  char dum[1];
  for (int i = 0; forced_winenv_vars[i]; i++)
    if (!saw_forced_winenv[i])
d868 2
a869 2
	int vallen = GetEnvironmentVariable (forced_winenv_vars[i], dum, 0);
	if (vallen > 0)
d871 2
a872 12
	    int namelen = strlen (forced_winenv_vars[i]) + 1;
	    p = (char *) alloca (namelen + ++vallen);
	    strcpy (p, forced_winenv_vars[i]);
	    strcat (p, "=");
	    if (!GetEnvironmentVariable (forced_winenv_vars[i], p + namelen,
					 vallen))
	      debug_printf ("warning: %s not present in environment", *srcp);
	    else
	      {
		*dstp++ = p;
		tl += strlen (p) + 1;
	      }
d876 2
a877 1
  *dstp = NULL;		/* Terminate */
d879 5
a883 2
  int envlen = dstp - newenvp;
  debug_printf ("env count %d, bytes %d", envlen, tl);
d885 2
a886 2
  /* Windows programs expect the environment block to be sorted.  */
  qsort (newenvp, envlen, sizeof (char *), env_sort);
d888 10
a897 8
  /* Create an environment block suitable for passing to CreateProcess.  */
  char *ptr, *envblock;
  envblock = (char *) malloc (tl + 2);
  for (srcp = newenvp, ptr = envblock; *srcp; srcp++)
    {
      len = strlen (*srcp);
      memcpy (ptr, *srcp, len + 1);
      ptr += len + 1;
a898 1
  *ptr = '\0';		/* Two null bytes at the end */
d900 1
a900 1
  return envblock;
@


1.66
log
@Remove fcntl.h includes throughout.
* fhandler.h: Move fcntl.h include here.
(fhandler_base::set_flags): Accept supplied_bin argument.  Make non-inlined.
* dtable.cc (dtable::init_std_file_from_handle): Just use binmode from pc.
(reset_to_open_binmode): Use set_flags.
* cygwin.din (open): Avoid newlib wrapper.
(read): Ditto.
(unlink): Ditto.
(write): Ditto.
* fhandler.cc (fhandler_base::set_flags): Accept supplied_bin argument.  Make
binmode decisions here.
(fhandler_base::open): Avoid using pc if it is NULL.  Eliminate binmode logic.
Just call set_flags with binmode argument.
(fhandler_base::init): Call set_flags with binmode argument.
* fhandler_clipboard.cc (fhandler_dev_clipboard::open): Ditto.
* fhandler_console.cc (fhandler_console::open): Ditto.
(fhandler_console::init): Force binary on open.
* fhandler_disk_file.cc (fhandler_disk_file::open): Don't set binmode here.
Let it happen in base class.
* fhandler_dsp.cc (fhandler_dev_dsp::open): Force binmode open.  Set return
value appropriately if unable to open.
* fhandler_proc.cc (fhandler_proc::open): Make sure flags are set before
open_status.
* fhandler_process.cc (fhandler_process::open): Ditto.
* fhandler_registry.cc (fhandler_registry::open): Ditto.
* fhandler_random.cc (fhandler_dev_random::fhandler_dev_random): Ditto.
* fhandler_raw.cc (fhandler_dev_raw::open): Force O_BINARY by default.
* fhandler_serial.cc (fhandler_serial::init): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::open): Ditto.
(fhandler_pty_master::open): Ditto.
* fhandler_virtual.cc (fhandler_virtual::open): Ditto.
* fhandler_windows.cc (fhandler_windows::open): Ditto.
* fhandler_zero.cc (fhandler_dev_zero::open): Ditto.
* net.cc (fdsock): Ditto.
* path.cc (path_conv::check): Avoid checking for extension when error or
directory.
(set_flags): Set PATH_TEXT explicitly, when appropriate.
(mount_info::conv_to_win32_path): Use set_flags() to set path flags.
* path.h (PATH_TEXT): New enum.
(path_conv::binmode): Return appropriate constant based on binmode.
* pipe.cc (make_pipe): Set binmode to O_TEXT xor O_BINARY.
* syscalls.cc (setmode_helper): Make debugging message a little clearer.
(setmode): Set binmode via set_flags.
@
text
@d4 1
a4 1
   Copyright 1997, 1998, 1999, 2000, 2001 Red Hat, Inc.
@


1.65
log
@Remove unneeded sigproc.h includes throughout.
* fhandler.h (fhandler_proc::fill_filebuf): Take a pinfo argument.
* fhandler_proc.cc (fhandler_proc::get_proc_fhandler): Simplify search for
given pid.
(fhandler_proc::readdir): Assume that pid exists if it shows up in the winpid
list.
* fhandler_process.cc (fhandler_process::open): Simplify search for given pid.
Call fill_filebuf with pinfo argument.
(fhandler_process::fill_filebuf): Pass pinfo here and assume that it exists.
* pinfo.h (pinfo::remember): Define differently if sigproc.h is not included.
* dll_init.cc (dll_list::detach): Don't run destructor on exit.
@
text
@a14 1
#include <fcntl.h>
@


1.64
log
@Remove unneeded sync.h, where appropriate, throughout.  Remove unneeded heap.h,
where appropriate, throughout.  Remove unneeded exceptions.h, where
appropriate, throughout.  Remove unneeded perprocess.h, where appropriate,
throughout.
@
text
@a17 1
#include "sigproc.h"
@


1.63
log
@2002-02-28  Robert Collins  <rbtcollins@@hotmail.com>

	* Merged cygwin_daemon into head minus the new shm and ipc exports.

2002-02-28  Robert Collins  <rbtcollins@@hotmail.com>

	* fhandler_tty.cc (fhandler_tty_slave::open): More debugging.
	(fhandler_tty_slave::read): Fix printf type for the handle.
	* tty.cc (tty::common_init): Add a FIXME for security.

2002-01-29  Robert Collins  <rbtcollins@@hotmail.com>

	* Makefile.in (OBJS): Remove duplicate localtime.o.

2002-01-17  Robert Collins  <rbtcollins@@hotmail.com>

	* cygserver.cc (check_and_dup_handle): Consolidate the two variants for
	simplicity.
	Add Some basic debug output.
	(client_request_attach_tty::serve): Use the new debug_printf for clarity.
	Mark the duplicated handles as inheritable - fixup_after_fork() doesn't reopen
	tty's.

2002-01-16  Robert Collins  <rbtcollins@@hotmail.com>

	* cygserver.cc (transport): Correct scope.
	(client_request_attach_tty::serve): Add more debug information.
	Fix erroneous use of transport instead of conn.
	* cygserver_transport_pipes.cc (transport_layer_pipes::close): More debug.
	(transport_layer_pipes::read): Ditto.
	(transport_layer_pipes::write): Ditto.
	(transport_layer_pipes::impersonate_client): Ditto.

Mon Oct  8  7:41:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* cygserver.cc (server_request::process): Rename client_request_shm_get to
	client_request_shm.
	* cygserver_process.cc (process_cache::add): Rename to add_task.
	Use process_cleanup instead of process_request.
	(process_cache::remove_process): New method.
	(process::process): Initialize new members.
	(process::~process): New member.
	(process::cleanup): New method.
	(process::add_cleanup_routine): New method.
	(process_request::process): Rename to process_cleanup.
	Call the process object's cleanup method and then delete it.
	(process_process_param::request_loop): Remove the signalling process.
	* cygserver_shm.cc: Globally rename client_request_shm_get to client_request_shm.
	(client_request_shm_get::serve): Handle attach request counting.
	* cygserver_shm.h: Globally rename client_request_shm_get to client_request_shm.
	(class shm_cleanup): New class.
	* shm.cc: Globally rename client_request_shm_get to client_request_shm.
	(client_request_shm::client_request_shm): New constructor for attach requests.
	(shmat): Use it.
	* include/cygwin/cygserver_process.h (class process_request): Rename to
	process_cleanup.
	(class cleanup_routine): New class.
	(class process): New members and methods to allow calling back when the process
	terminates.

Thu Oct  4 14:12:00 2001  Robert Collins <rbtcollins@@hotmail.com>
	* cygserver.cc (request_loop): Make static.
	(main): Use new cache constructor syntax.
	Start cache worker threads.
	Cleanup the cache at shutdown.
	* cygserver_process.cc: Run indent.
	(process_cache::process_cache): Add a trigger to use when adding a process.
	(process_cache::process): Move process_entry to process.
	Insert at the end of the list.
	Trigger the request loop when new process's inserted.
	(process_cache::process_requests): Do it.
	(process_cache::add): New method.
	(process_cache::handle_snapshot): New method.
	(process::process): Merge in the process_entry fields.
	(process::handle): Make a stub function.
	(process::exit_code): New method.
	(process_request::process): New method.
	(process_process_param::request_loop): New method.
	* cygserver_shm.cc: New header dependency - threaded_queue.h.
	* threaded_queue.cc (threaded_queue::cleanup): Clearer messages.
	(queue_process_param::stop): Short spinlock on interruptible threads.
	* threaded_queue.h (class threaded_queue): New constructor.
	* include/cygwin/cygserver_process.h (process_request): New class.
	(process_entry): Remove.
	(process): Merge in process_entry.
	(process_cache): Inherit from threaded_queue.

Tue Oct  2 23:24:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* cygserver.cc (class server_process_param): Use new constructor syntax.
	* cygserver_process.cc (process_cache::~process_cache): New function.
	* threaded_queue.cc: Define condition debug_printf.
	Run indent.
	(threaded_queue::cleanup): Move queue_process_param guts to a method.
	(threaded_queue::process_requests): Ditto.
	(queue_process_param::queue_process_param): New method.
	(queue_process_param::~queue_process_param): Ditto.
	(queue_process_param::start): Ditto.
	(queue_process_param::stop): Ditto.
	* threaded_queue.h (class queue_process_param): Add support for
	interruptible request loops.
	* cygwin/include/cygwin/cygserver_process.h (class process_cache): Add
	destructor.

Tue Oct  2 23:24:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* cygserver_client.cc: New flag allow_daemon to disable the daemon completely.
	(cygserver_request): Check it.
	(cygserver_init): Ditto.
	* environ.cc (parse_thing): Add (no)daemon option.

Tue Oct  2 23:00:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* shm.cc: Update to handle include changes from HEAD.

Tue Oct  2 16:06:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* Makefile.in: Remove cygserver_shm.o from cygwin1.dll.
	Rename cygserver_shm_outside.o to cygserver_shm.o.
	* cygserver.cc (server_request::process): Use the new client_request
	constructor.
	* cygserver_client.cc: Remove the #ifdef's stubs for the server method
	within cygwin.
	(client_request_attach_tty::client_request_attach_tty): Use the new
	client_request constructor.
	(client_request_shutdown::client_request_shutdown): Ditto.
	(client_request::client_request): Ditto.
	* cygserver_shm.cc (client_request_shm_get::serve): Remove the
	#ifdef'd stub for in-cygwin builds.
	(client_request_shm_get::client_request_shm_get): Use the new
	client_request constructor, and remove the in-cygwin variants.
	* cygserver_shm.h (class client_request_shm_get): #ifndef test the
	serve method - it's only used in cygserver.
	* shm.cc (client_request_shm_get::client_request_shm_get): New function.
	* include/cygwin/cygserver.h (request_header): New constructor.
	(class client_request): Use it.
	New constructor accepting the header size.
	#ifndef test the server method - it's only used within cygserver.
	(client_request_get_version): #ifdef test the server method.
	(client_request_shutdown): Ditto.
	(client_request_attach_tty): Ditto.

Tue Oct  2  9:57:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* Makefile.in: add threaded_queue.o to cygserver.exe.
	* cygserver.cc: Include threaded_queue.h
	(class server_request): Inherit from queue_request.
	(class server_process_param): Inherit from queue_process_param.
	(class server_request_queue): Inherit from threaded_queue.
	(request_loop): Adjust for new types.
	(server_request_queue::process_requests): Remove guts to
	threaded_queue::process_requests.
	(server_request::server_request): Adjust for new types.
	(worker_function): Delete.
	(server_request_queue::create_workers): Delete.
	(server_request_queue::cleanup): Delete.
	(server_request_queue::add): Move guts to threaded_queue::add.
	* threaded_queue.cc: New file.
	* threaded_queue.h: New file.

Mon Oct  1 12:38:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* cygserver.cc (client_request::serve): New function.
	* cygserver_process.cc: Inlude <pthread.h> for pthread_once.
	(process_cache::process_cache): Initialise a crtiical section for write access.
	(process_cache::process): Use the critical section. Also add missing entries to
	the cache.
	(do_process_init): New function to initalise class process static variables.
	(process::process): Ensure that the process access critical section is
	initialised.
	(process::handle): Close the handle of old process's when they have terminated
	and we are returning the handle for a process with the same pid.
	* cygserver_shm.cc: Run indent.
	Include cygserver_process.h to allow process cache functionality.
	(client_request_shm_get::serve): New parameter for process cache support.
	Use the process cache, not OpenProcess to get a handle to the originating process.
	Fix a handle leak with token_handle.
	* cygserver_shm.h (class client_request_shm_get): Update ::serve for process
	cache support.
	* cygserver_transport_pipes.cc: Redefine debug_printf to be conditional on DEBUG.
	* include/cygwin/cygserver.h: Do not implement client_request::serve in the
	header.
	* include/cygwin/cygserver_process.h (class process_cache): Add a write access
	critical section to prevent races when requests from a  multithreaded
	application arrive.

Sun Sep 30 23:41:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* Makefile.in: Add cygserver_process.o to cygserver.exe.
	* cygserver.cc: Include signal.h and cygwin_version.h.
	Define debug_printf as a macro.
	Define DEBUG to a value.
	(client_request_attach_tty::serve): Add beginning of process cache support.
	Change from #ifdef DEBUG to work with new DEBUG style.
	(client_request_get_version::serve): Add beginning of process cache support.
	(class server_request): New prototype for support of process cache.
	(class queue_process_param): New class to allow request loop threading.
	(class server_request_queue): Add beginning of process cache support.
	Allow request loop threading.
	(request_loop): Thread function for request loops.
	(server_request_queue::process_requests): Initiator for threaded request loops.
	(client_request_shutdown::serve): Add beginning of process cache support.
	(server_request::server_request): Ditto.
	(server_request::process): Use debug_printf. Add beginning of process cache
	support.
	(server_request_queue::cleanup): Kill off any request loop threads.
	(server_request_queue::add): Add beginning of process cache support.
	(handle_signal): Trigger a shutdown.
	(main): Print out some useful info at startup - version, date time.
	Add process cache support.
	Spawn a separate thread for the transport request loop, thus allowing concurrent
	support for multiple transports.
	* cygserver_client.cc (client_request_get_version::serve): Add process cache
	support.
	(client_request_attach_tty::serve): Add process cache support.
	(client_request_shutdown::serve): Add process cache support.
	* cygsserver_process.cc: New file with the process cache support.
	* cygserver_shm.cc: Redefine debug_printf to allow conditional output.
	* cygwin.din: Export shmdt().
	* shm.cc: Run indent.
	Update FIXME's.
	(shmdt): New function.
	* include/cygwin/cygserver.h (class client_request): Add process cache support.
	(class client_request_get_version): Ditto.
	(class client_request_shutdown): Ditto.
	(class client_request_attach_tty): Ditto.
	* include/cygwin/cygserver_process.h: New header for process cache support.

Sun Sep 30  8:52:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* include/cygwin/cygserver_transport.h: Add copyright header.
	* include/cygwin/cygserver_transport_pipes.h: Ditto.
	* include/cygwin/cygserver_transport_sockets.h: Ditto.

Sat Sep 29 20:40:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* Makefile.in: Add cygserver_transport_sockets.o to DLL_OFILES.
	Add cygserver_transport_sockets_outside.o to cygserver.exe.
	* cygserver.cc: Include new include files.
	* cygserver_client.cc: Ditto.
	* cygserver_shm.h: No need to include <sys/socket.h> now.
	* cygerver_transport.cc: Include new include files.
	(transport_layer_base::transport_layer_base): Strip back to a stub.
	(transport_layer_base::listen): Ditto.
	(transport_layer_base::accept): Ditto.
	(transport_layer_base::close): Ditto.
	(transport_layer_base::read): Ditto.
	(transport_layer_base::write): Ditto.
	(transport_layer_base::connect): Ditto.
	* cygserver_transport_pipes.cc: Include new header
	"cygwin/cygserver_transport_pipes.h".
	* cygserver_transport_sockets.cc: New file.
	* dcrt0.cc: No need to include <sys/socket.h> now.
	* fhandler_tty.cc: Ditto.
	* tty.cc: Ditto.
	* include/cygwin/cygserver_transport.h: Strip the base class to a stub.
	Remove the cygserver_transport_pipes class.
	* include/cygwin/cygserver_transport_pipes.h: New file.
	* include/cygwin/cygserver_transport_sockets.h: New file.

Tue Sep 25 16:22:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* autoload.cc: Add dynamic load statement for 'ImpersonateNamedPipeClient'.
	* Makefile.in: Add new object files, and build instructions for cygserver.exe.
	* cygwin.din: Export ftok, shmat, shmctl and shmget.
	* dcrt0.cc: Additional includes for cygserver support.
	(dll_crt0_1): Initialise the cygserver client.
	* fhandler.h (fhandler_tty): New method cygserver_attach_tty.
	* fhandler_tty.cc: Additional includes for cygserver support.
	(fhandler_tty_slave::open): Attempt to use the cygserver when obtaining
	handles from the parent process. On failure or 9x use the current method.
	(fhandler_tty_slave::cygserver_attach_tty): New function.
	* fork.cc (fork_child): Fixup shm memory mapped areas.
	* pinfo.h: Declare fixup_shms_after_fork().
	* security.h: Declare alloc_sd().
	* tty.cc: Additonal includes to support cygserver.
	(tty::common_init): Don't allow others to open us if the cygserver is running.
	* winsup.h: Declare cygserver_running.
	* cygserver.cc: New file.
	* cygserver_client.cc: New file.
	* cygserver_shm.cc: New file.
	* cygserver_shm.h: New file.
	* cygserver_transport.cc: New file.
	* cygserver_transport_pipes.cc: New file.
	* ipc.cc: New file.
	* shm.cc: New file.
	* include/cygwin/cygserver.h: New file.
	* include/cygwin/cygserver_transport.h: New file.
	* include/sys/ipc.h: New file.
	* include/sys/shm.h: New file.

2002-02-28  Robert Collins  <rbtcollins@@hotmail.com>

	* thread.cc (semaphore::TryWait): Set errno as required by posix 1003.1.
	(__sem_wait): Ditto.
	(__sem_trywait): Ditto.
@
text
@a17 1
#include "sync.h"
@


1.62
log
@* environ.cc: Set reset_com to false to mimic linux behavior more closely.
@
text
@d31 1
d514 1
@


1.61
log
@* cygheap.cc (cfree): Remove malloc debugging probe.
* dlmalloc.c (errprint): Remove abort() call which causes interesting error
message printing to abort prematurely.
* environ.cc: Sprinkle MALLOC_CHECKs liberally throughout.
(_addenv): Allocate two empty elements at end of environ to
(apparently) work around problems with some buggy applications.
(winenv): Avoid calling alloca if no forced environment variable is present.

* exceptions.cc (open_stackdumpfile): Don't print "Dumping stack trace to..."
when running in a cygwin environment (i.e., the parent is a cygwin process).

* dtable.cc (dtable::init_std_file_from_handle): Move device type detection
code from build_fhandler here since it is only used by this function.
(dtable::build_fhandler_from_name): New method.  Renamed from
dtable::build_fhandler.
(dtable::build_fhandler): Use build_fhandler_from_name.
(cygwin_attach_handle_to_fd): Ditto.
* syscalls.cc (_open): Ditto.
(stat_worker): Ditto.
* dtable.h (dtable::build_fhandler_from_name): Rename declaration from
dtable::build_fhandler.
@
text
@d39 1
a39 1
BOOL reset_com = TRUE;
@


1.60
log
@* environ.cc (winenv): Allocate exact amount of space needed for forced windows
environment variable rather than just using MAX_PATH.
@
text
@d79 1
d94 1
d150 1
d183 1
d238 1
a238 1
      int allocsz = sz + sizeof (char *);
d243 1
a243 1
      if (__cygwin_environ == lastenviron)
d255 1
a255 1
	  return -1;		/* Oops.  No more memory. */
d289 1
a619 1
  MALLOC_CHECK;
a624 1
  MALLOC_CHECK;
d816 2
a817 9
	int namelen = strlen (forced_winenv_vars[i]) + 1;
	int vallen = GetEnvironmentVariable (forced_winenv_vars[i], dum, 0) + 1;
	p = (char *) alloca (namelen + vallen);
	strcpy (p, forced_winenv_vars[i]);
	strcat (p, "=");
	if (!GetEnvironmentVariable (forced_winenv_vars[i], p + namelen,
	      			     vallen + 1))
	  debug_printf ("warning: %s not present in environment", *srcp);
	else
d819 12
a830 2
	    *dstp++ = p;
	    tl += strlen (p) + 1;
@


1.59
log
@        * Makefile.in: Build wincap.o.
        * wincap.cc: New file.
        * wincap.h: Ditto.
        * autoload.cc: Add dynamic load statement for `CreateHardLinkA'.
        * dcrt0.cc (os_being_run): Eliminated.
        (osname): Ditto.
        (iswinnt): Ditto.
        (set_os_type): Ditto.
        (dll_crt0_1): Call wincap.init() instead of set_os_type().
        (_dll_crt0): Ditto.
        * environ.cc (set_chunksize): New function.
        (parse_thing): `forkchunk' setting now invokes function `set_chunksize'.
        * fork.cc (chunksize): Eliminated. Moved to be member of wincap.
        * host_dependent.h: Removed.
        * syscalls.cc (_link): Try using `CreateHardLinkA' first, if available.
        * cygheap.cc, dcrt0.cc, delqueue.cc, dir.cc,
        environ.cc, fhandler.cc, fhandler.h, fhandler_console.cc,
        fhandler_mem.cc, fork.cc, mmap.cc, net.cc, pinfo.cc, pinfo.h,
        security.cc, syscalls.cc, sysconf.cc, syslog.cc, thread.cc,
        times.cc, tty.cc, uinfo.cc, uname.cc, winsup.h: Use new wincap
        capability check throughout.
        * winsup.h: Include wincap.h. Eliminate extern declarations of
        `os_being_run' and `iswinnt'. Eliminate `os_type" definition.
        * include/cygwin/version.h: Bump version to 1.3.4.
@
text
@d809 1
d813 3
a815 2
	len = strlen (forced_winenv_vars[i]);
	p = (char *) alloca (len + MAX_PATH + 1);
d818 2
a819 1
	if (!GetEnvironmentVariable (forced_winenv_vars[i], p + len + 1, MAX_PATH))
@


1.59.2.1
log
@Merged changes from HEAD
@
text
@a808 1
  char dum[1];
d812 2
a813 3
	int namelen = strlen (forced_winenv_vars[i]) + 1;
	int vallen = GetEnvironmentVariable (forced_winenv_vars[i], dum, 0) + 1;
	p = (char *) alloca (namelen + vallen);
d816 1
a816 2
	if (!GetEnvironmentVariable (forced_winenv_vars[i], p + namelen,
	      			     vallen + 1))
@


1.59.2.2
log
@Tue Oct  2 23:24:00 2001  Robert Collins <rbtcollins@@hotmail.com>

        * cygserver_client.cc: New flag allow_daemon to disable the daemon completely.
        (cygserver_request): Check it.
        (cygserver_init): Ditto.
        * environ.cc (parse_thing): Add (no)daemon option.
@
text
@a30 1
extern BOOL allow_daemon;
a507 1
  {"daemon", {&allow_daemon}, justset, NULL, {{FALSE}, {TRUE}}},
@


1.59.2.3
log
@Merged changes from HEAD
@
text
@d40 1
a40 1
BOOL reset_com = FALSE;
a79 1
  MALLOC_CHECK;
a93 1
  MALLOC_CHECK;
a148 1
  MALLOC_CHECK;
a180 1
  MALLOC_CHECK;
d235 1
a235 1
      int allocsz = sz + (2 * sizeof (char *));
d240 1
a240 1
      if (cur_environ () == lastenviron)
d252 1
a252 1
	  return -1;				/* Oops.  No more memory. */
a285 1
  MALLOC_CHECK;
d617 1
d623 1
d815 9
a823 2
	int vallen = GetEnvironmentVariable (forced_winenv_vars[i], dum, 0);
	if (vallen > 0)
d825 2
a826 12
	    int namelen = strlen (forced_winenv_vars[i]) + 1;
	    p = (char *) alloca (namelen + ++vallen);
	    strcpy (p, forced_winenv_vars[i]);
	    strcat (p, "=");
	    if (!GetEnvironmentVariable (forced_winenv_vars[i], p + namelen,
					 vallen))
	      debug_printf ("warning: %s not present in environment", *srcp);
	    else
	      {
		*dstp++ = p;
		tl += strlen (p) + 1;
	      }
@


1.59.2.4
log
@Merged changes from HEAD
@
text
@d4 1
a4 1
   Copyright 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
d15 1
a15 1
#include <assert.h>
d18 2
d102 4
a105 3
  to the beginning of the environment variable name.  *in_posix is any
  known posix value for the environment variable. Returns a pointer to
  the appropriate conversion structure.  */
d117 1
a117 1
	if (!cur_environ () || !(val = in_posix ?: getenv (we->name)))
d201 2
a202 2
static int __stdcall
envsize (const char * const *in_envp)
d206 2
a207 1
    continue;
a678 2
      envc++;
      envc *= sizeof (char *);
a754 7
struct spenv
{
  const char *name;
  const char * (cygheap_user::*from_cygheap) ();
  char *retrieve (bool, const char * const = NULL, int = 0);
};

d756 6
a761 35
static NO_COPY spenv spenvs[] =
{
  {"HOMEPATH=", &cygheap_user::env_homepath},
  {"HOMEDRIVE=", &cygheap_user::env_homedrive},
  {"LOGONSERVER=", &cygheap_user::env_logsrv},
  {"SYSTEMDRIVE=", NULL},
  {"SYSTEMROOT=", NULL},
  {"USERPROFILE=", &cygheap_user::env_userprofile},
};

char *
spenv::retrieve (bool no_envblock, const char *const envname, int len)
{
  if (len && !strncasematch (envname, name, len))
    return NULL;
  if (from_cygheap)
    {
      const char *p;
      if (!len)
	return NULL;			/* No need to force these into the
					   environment */

      if (no_envblock)
	return cstrdup1 (envname);	/* Don't really care what it's set to
					   if we're calling a cygwin program */

      /* Make a FOO=BAR entry from the value returned by the cygheap_user
         method. */
      p = (cygheap->user.*from_cygheap) ();
      int namelen = strlen (name);
      char *s = (char *) cmalloc (HEAP_1_STR, namelen + strlen (p) + 1);
      strcpy (s, name);
      (void) strcpy (s + namelen, p);
      return s;
    }
d763 1
a763 21
  if (len)
    return cstrdup1 (envname);

  char dum[1];
  int vallen = GetEnvironmentVariable (name, dum, 0);
  if (vallen > 0)
    {
      int namelen = strlen (name);
      char *p = (char *) cmalloc (HEAP_1_STR, namelen + ++vallen);
      strcpy (p, name);
      if (GetEnvironmentVariable (name, p + namelen, vallen))
	return p;
      else
	cfree (p);
    }

  debug_printf ("warning: %s not present in environment", name);
  return NULL;
}

#define SPENVS_SIZE (sizeof (spenvs) / sizeof (spenvs[0]))
d769 2
a770 3
char ** __stdcall
build_env (const char * const *envp, char *&envblock, int &envc,
	   bool no_envblock)
d772 1
a772 1
  int len, n;
d774 3
a776 2
  char **dstp;
  bool saw_spenv[SPENVS_SIZE] = {0};
d778 3
a780 1
  debug_printf ("envp %p", envp);
a781 1
  /* How many elements? */
d785 1
a785 19
  /* Allocate a new "argv-style" environ list with room for extra stuff. */
  char **newenv = (char **) cmalloc (HEAP_1_ARGV, sizeof (char *) *
						  (n + SPENVS_SIZE + 1));

  int tl = 0;
  /* Iterate over input list, generating a new environment list and refreshing
     "special" entries, if necessary. */
  for (srcp = envp, dstp = newenv; *srcp; srcp++, dstp++)
    {
      len = strcspn (*srcp, "=") + 1;

      /* Look for entries that require special attention */
      for (unsigned i = 0; i < SPENVS_SIZE; i++)
	if (!saw_spenv[i]
	    && (*dstp = spenvs[i].retrieve (no_envblock, *srcp, len)))
	  {
	    saw_spenv[i] = 1;
	    goto next;
	  }
d787 4
a790 1
      *dstp = cstrdup1 (*srcp);
d792 20
a811 3
    next:
      if (!no_envblock)
	tl += strlen (*dstp) + 1;
d814 3
a816 3
  /* Fill in any required-but-missing environment variables. */
  for (unsigned i = 0; i < SPENVS_SIZE; i++)
    if (!saw_spenv[i])
d818 2
a819 2
	*dstp = spenvs[i].retrieve (no_envblock);
	if (*dstp)
d821 12
a832 3
	    if (!no_envblock)
	      tl += strlen (*dstp) + 1;
	    dstp++;
d836 1
a836 2
  envc = dstp - newenv;
  *dstp = NULL;			/* Terminate */
d838 2
a839 5
  if (no_envblock)
    envblock = NULL;
  else
    {
      debug_printf ("env count %d, bytes %d", envc, tl);
d841 2
a842 2
      /* Windows programs expect the environment block to be sorted.  */
      qsort (newenv, envc, sizeof (char *), env_sort);
d844 8
a851 38
      /* Create an environment block suitable for passing to CreateProcess.  */
      char *s;
      envblock = (char *) malloc (2 + tl);
      int new_tl = 0;
      for (srcp = newenv, s = envblock; *srcp; srcp++)
	{
	  const char *p;
	  win_env *conv;
	  len = strcspn (*srcp, "=") + 1;

	  /* See if this entry requires posix->win32 conversion. */
	  conv = getwinenv (*srcp, *srcp + len);
	  if (conv)
	    p = conv->native;	/* Use win32 path */
	  else
	    p = *srcp;		/* Don't worry about it */

	  len = strlen (p);
	  new_tl += len + 1;	/* Keep running total of block length so far */

	  /* See if we need to increase the size of the block. */
	  if (new_tl > tl)
	    envblock = (char *) realloc (envblock, 2 + (tl += len + 100));

	  memcpy (s, p, len + 1);

	  /* See if environment variable is "special" in a Windows sense.
	     Under NT, the current directories for visited drives are stored
	     as =C:=\bar.  Cygwin converts the '=' to '!' for hopefully obvious
	     reasons.  We need to convert it back when building the envblock */
	  if (s[0] == '!' && (isdrive (s + 1) || (s[1] == ':' && s[2] == ':'))
	      && s[3] == '=')
	    *s = '=';
	  s += len + 1;
	}
      *s = '\0';			/* Two null bytes at the end */
      assert ((s - envblock) <= tl);	/* Detect if we somehow ran over end
					   of buffer */
d853 1
d855 1
a855 1
  return newenv;
@


1.59.2.5
log
@Merged changes from HEAD
@
text
@a767 2
  {"USERDOMAIN=", &cygheap_user::env_domain},
  {"USERNAME=", &cygheap_user::env_name},
d789 1
a789 2
      if (!(p = (cygheap->user.*from_cygheap) ()))
        return NULL;
d912 1
a912 10
	    {
	      char *new_envblock =
	      		(char *) realloc (envblock, 2 + (tl += len + 100));
	      /* If realloc moves the block, move `s' with it. */
	      if (new_envblock != envblock)
	        {
		  s += new_envblock - envblock;
		  envblock = new_envblock;
		}
	    }
a929 1
  debug_printf ("envp %p, envc %d", newenv, envc);
@


1.59.2.6
log
@Merged changes from HEAD
@
text
@a46 1
#define NL(x) x, (sizeof (x) - 1)
d56 1
a56 1
    {NL ("PATH="), NULL, NULL, cygwin_win32_to_posix_path_list,
d60 1
a60 1
    {NL ("HOME="), NULL, NULL, cygwin_conv_to_full_posix_path, cygwin_conv_to_full_win32_path,
d62 1
a62 1
    {NL ("LD_LIBRARY_PATH="), NULL, NULL, cygwin_conv_to_full_posix_path,
d64 1
a64 1
    {NL ("TMPDIR="), NULL, NULL, cygwin_conv_to_full_posix_path, cygwin_conv_to_full_win32_path,
d66 1
a66 1
    {NL ("TMP="), NULL, NULL, cygwin_conv_to_full_posix_path, cygwin_conv_to_full_win32_path,
d68 1
a68 1
    {NL ("TEMP="), NULL, NULL, cygwin_conv_to_full_posix_path, cygwin_conv_to_full_win32_path,
a755 1
  size_t namelen;
d757 1
a757 2
  char *retrieve (bool, const char * const = NULL)
    __attribute__ ((regparm (3)));
a759 2
char env_dontadd[] = "";

d763 8
a770 8
  {NL ("HOMEPATH="), &cygheap_user::env_homepath},
  {NL ("HOMEDRIVE="), &cygheap_user::env_homedrive},
  {NL ("LOGONSERVER="), &cygheap_user::env_logsrv},
  {NL ("SYSTEMDRIVE="), NULL},
  {NL ("SYSTEMROOT="), NULL},
  {NL ("USERDOMAIN="), &cygheap_user::env_domain},
  {NL ("USERNAME="), &cygheap_user::env_name},
  {NL ("USERPROFILE="), &cygheap_user::env_userprofile},
d774 1
a774 1
spenv::retrieve (bool no_envblock, const char *const envname)
d776 1
a776 1
  if (envname && !strncasematch (envname, name, namelen))
d781 2
a782 4
      if (!cygheap->user.issetuid ())
	{
	  if (!envname)
	    return NULL;		/* No need to force these into the
d785 2
a786 2
	  if (no_envblock)
	    return cstrdup1 (envname);	/* Don't really care what it's set to
a787 1
	}
d789 5
a793 4
      /* Calculate (potentially) value for given environment variable.  */
      p = (cygheap->user.*from_cygheap) ();
      if (!p || (no_envblock && !envname))
        return env_dontadd;
d800 1
a800 1
  if (envname)
d807 1
d848 1
a848 1
  for (srcp = envp, dstp = newenv; *srcp; srcp++)
d850 2
d854 2
a855 1
	if (!saw_spenv[i] && (*dstp = spenvs[i].retrieve (no_envblock, *srcp)))
d858 1
a858 3
	    if (*dstp == env_dontadd)
	      goto next1;
	    goto  next0;
a860 1
      /* Add entry to new environment */
d863 1
a863 2
    next0:
      /* If necessary, calculate rough running total for envblock size */
a865 3
      dstp++;
    next1:
      continue;
d873 1
a873 1
	if (*dstp && *dstp != env_dontadd)
d881 1
a881 1
  envc = dstp - newenv;		/* Number of entries in newenv */
@


1.59.2.7
log
@Merged changes from HEAD
@
text
@d61 2
a62 2
    {NL ("HOME="), NULL, NULL, cygwin_conv_to_full_posix_path,
     cygwin_conv_to_full_win32_path, return_MAX_PATH, return_MAX_PATH},
d65 6
a70 6
    {NL ("TMPDIR="), NULL, NULL, cygwin_conv_to_full_posix_path,
     cygwin_conv_to_full_win32_path, return_MAX_PATH, return_MAX_PATH},
    {NL ("TMP="), NULL, NULL, cygwin_conv_to_full_posix_path,
     cygwin_conv_to_full_win32_path, return_MAX_PATH, return_MAX_PATH},
    {NL ("TEMP="), NULL, NULL, cygwin_conv_to_full_posix_path,
     cygwin_conv_to_full_win32_path, return_MAX_PATH, return_MAX_PATH},
a782 3

  debug_printf ("no_envblock %d", no_envblock);

d786 1
a786 3
      if (cygheap->user.issetuid ())
	debug_printf ("calculating for setuid");
      else
a787 1
	  debug_printf ("calculating for non-setuid");
d789 1
a789 3
	    {
	      debug_printf ("not adding %s to windows environment", name);
	      return NULL;		/* No need to force these into the
a790 1
	    }
d793 1
a793 3
	    {
	      debug_printf ("duping existing value for '%s'", name);
	      return cstrdup1 (envname);/* Don't really care what it's set to
a794 1
	    }
a803 1
      debug_printf ("using computed value for '%s'", name);
d817 1
a817 5
	{
	  debug_printf ("using value from GetEnvironmentVariable for '%s'",
			envname);
	  return p;
	}
@


1.59.2.8
log
@Merged changes from HEAD
@
text
@a27 1
#include "child_info.h"
d715 1
a715 1
      if (!child_proc_info)
d768 1
a769 1
  {NL ("HOMEPATH="), &cygheap_user::env_homepath},
d812 1
a812 1
	return env_dontadd;
@


1.59.2.9
log
@Merged changes from HEAD
@
text
@d414 1
a414 1
  else if (strcasematch (buf, "adjust"))
d419 1
a419 1
  else if (strcasematch (buf, "strict"))
d451 1
a451 1
  if (strcasematch (buf, "oem"))
d456 1
a456 1
  else if (strcasematch (buf, "ansi"))
d462 3
a464 1
    debug_printf ("Wrong codepage name: %s", buf);
@


1.59.2.10
log
@Merged changes from HEAD
@
text
@d762 1
a762 1
#define env_dontadd almost_null
@


1.59.2.11
log
@Merged changes from HEAD
@
text
@a752 32
char * __stdcall
getwinenveq (const char *name, size_t namelen, int x)
{
  char dum[1];
  char name0[namelen - 1];
  memcpy (name0, name, namelen - 1);
  name0[namelen - 1] = '\0';
  int totlen = GetEnvironmentVariable (name0, dum, 0);
  if (totlen > 0)
    {
      totlen++;
      if (x == HEAP_1_STR)
	totlen += namelen;
      else
	namelen = 0;
      char *p = (char *) cmalloc ((cygheap_types) x, totlen);
      if (namelen)
	strcpy (p, name);
      if (GetEnvironmentVariable (name0, p + namelen, totlen))
	{
	  debug_printf ("using value from GetEnvironmentVariable for '%s'",
			name0);
	  return p;
	}
      else
	cfree (p);
    }

  debug_printf ("warning: %s not present in environment", name);
  return NULL;
}

d757 1
a757 1
  const char * (cygheap_user::*from_cygheap) (const char *, size_t);
d788 3
a790 1
      if (envname && !cygheap->user.issetuid ())
d792 12
a803 2
	  debug_printf ("duping existing value for '%s'", name);
	  return cstrdup1 (envname);	/* Don't really care what it's set to
d805 1
d809 2
a810 2
      p = (cygheap->user.*from_cygheap) (name, namelen);
      if (!p || (no_envblock && !envname) || (p == env_dontadd))
d822 18
a839 1
  return getwinenveq (name, namelen, HEAP_1_STR);
d899 1
a899 1
	if (*dstp && *dstp != env_dontadd && !no_envblock)
d901 2
a902 1
	    tl += strlen (*dstp) + 1;
a941 1
	      tl = new_tl + 100;
d943 1
a943 1
	      		(char *) realloc (envblock, 2 + tl);
@


1.59.2.12
log
@Merged changes from HEAD
@
text
@d369 1
a369 1
static NO_COPY BOOL export_settings = false;
d539 1
a539 2
      char newbuf[MAX_PATH + 7];
      newbuf[0] = '\0';
d547 5
a551 6

      if (export_settings)
	{
	  debug_printf ("%s", newbuf + 1);
	  setenv ("CYGWIN", newbuf + 1, 1);
	}
d615 1
a615 1
static bool __stdcall
a617 1
  bool parsed_something = false;
a622 1

d624 1
a624 4
    {
      parse_options (buf);
      parsed_something = true;
    }
d632 1
a632 4
	{
	  parse_options (buf);
	  parsed_something = true;
	}
a634 1
  return parsed_something;
a647 1
  bool got_something_from_registry;
d661 1
a661 1
  got_something_from_registry = regopt ("default");
d663 1
a663 1
    got_something_from_registry = regopt (myself->progname) || got_something_from_registry;
d739 1
a739 4

  if (got_something_from_registry)
    parse_options (NULL);	/* possibly export registry settings to
				   environment */
a895 1
  assert ((srcp - envp) == n);
d901 1
a901 1
	if (*dstp && !no_envblock && *dstp != env_dontadd)
a908 1
  assert ((size_t) envc <= (n + SPENVS_SIZE));
@


1.59.2.13
log
@Merged changes from HEAD
@
text
@a561 1
      char *keyword_here = p;
d605 1
a605 1
	    p = strdup (keyword_here);
@


1.59.2.14
log
@Merged changes from HEAD
@
text
@d963 1
a963 1
			(char *) realloc (envblock, 2 + tl);
d966 1
a966 1
		{
@


1.58
log
@Move appropriate variables to NO_COPY segment, throughout.
@
text
@a37 1
extern DWORD chunksize;
d476 6
d511 1
a511 1
  {"forkchunk", {x: &chunksize}, justset, NULL, {{8192}, {0}}},
d666 1
a666 1
  if (iswinnt)
@


1.57
log
@Remove initialization of static or global values to zero, throughout.  This
just needlessly grows the size of the DLL.
* tty.cc (tty::alive): Make inuse handle non-inheriting on open, just for
thread safety.
@
text
@d56 1
a56 1
static win_env conv_envvars[] =
d113 1
a113 1
	win_env *we = conv_envvars + i;
d480 1
a480 1
struct parse_thing
d498 1
a498 1
  } known[] =
d642 1
a642 1
  static char cygterm[] = "TERM=cygwin";
d746 1
a746 1
const char* forced_winenv_vars [] =
@


1.56
log
@Throughout, change check for running under Windows NT to 'iswinnt'.
* dcrt0.cc (set_os_type): Set 'iswinnt' appropriately.
* cygheap.cc (init_cheap): Revert to using VirtualAlloc for allocating cygheap.
(cygheap_setup_for_child_cleanup): New function.  Standard function to call
after calling CreateProcess to cleanup cygheap info passed to child.
(cygheap_fixup_in_child): Copy cygheap from shared memory into allocated space
under Windows 9x or if can't relocate shared space under NT.
* cygheap.h: Declare new function.
* spawn.cc (spawn_guts): Use cygheap_fixup_in_child.
* fork.cc (fork_parent): Ditto.
* winsup.h: Declare iswinnt.
@
text
@d43 1
a43 1
static char **lastenviron = NULL;
d644 1
a644 1
  static int initted = 0;
@


1.55
log
@Throughout, reorganize header file inclusion to put security.h prior to
fhandler.h.
* fhandler.h (fhandler_base::get_inheritance): New method.
* fhandler_socket.cc (fhandler_socket::create_secret_event): Use proper
close-on-exec inheritance when creating.
(fhandler_socket::check_peer_secret_event): Create handle as non-inheritable.
@
text
@d661 1
a661 1
  if (os_being_run == winNT)
@


1.54
log
@Change check_null_empty_path* to check_null_empty_str* throughout.
* path.cc (path_conv::check): Add signal protection here since retrieving info
about remote shares can take some time.
* path.h (check_null_empty_str_errno): Convert to a function prototype.
* path.cc (check_null_empty_str): Move to miscfuncs.cc.
* miscfuncs.cc (check_null_empty_str_errno): New function.
(__check_null_invalid_struct): Ditto.
(__check_null_invalid_struct_errno): Ditto.
(check_null_empty_str): Change from VirtualQuery to IsBadWritePtr.
* thread.cc (check_valid_pointer): Ditto.
* resource.cc (getrlimit): Use check_null_invalid_struct macro for checking
validity of pointer.
(setrlimit): Ditto.
@
text
@d22 1
@


1.53
log
@* mmap.cc: Clean up *ResourceLock calls throughout.
* thread.cc (pthread_cond::TimedWait): Check for WAIT_TIMEOUT as well as
WAIT_ABANDONED.
(__pthread_cond_timedwait): Calculate a relative wait from the abstime
parameter.
@
text
@d293 1
a293 1
  if ((res = check_null_empty_path (str)))
d315 1
a315 1
  if ((res = check_null_empty_path (value)) == EFAULT)
d320 1
a320 1
  if ((res = check_null_empty_path (name)))
@


1.52
log
@forced commit
@
text
@d752 1
a752 1
#define FORCED_WINENV_SIZE (sizeof (forced_winenv_vars) / sizeof (forced_winenv_vars[0])) 
@


1.51
log
@* environ.cc (set_file_api_mode): New function. Move setting
of file APIs mode (OEM/ANSI) here.
(codepage_init): From here.
* winsup.h (set_file_api_mode): Declare it.
* fork.cc (fork_child): Set file APIs mode in forkee.
@
text
@@


1.50
log
@Christopher Faylor <cgf@@redhat.com>
* environ.cc (winenv): Always add SYSTEMDRIVE and SYSYEMROOT to win32-style
environment if they don't already exist.
@
text
@d426 15
d450 1
a450 2
      SetFileApisToOEM ();
      debug_printf ("File APIs set to OEM");
d455 1
a455 2
      SetFileApisToANSI ();
      debug_printf ("File APIs set to ANSI");
@


1.49
log
@* exceptions.cc (ctrl_c_handler): Always send signal to process if it has no
tty.
@
text
@d731 10
d750 7
a756 1
  const char * *dstp;
d761 1
a761 1
  const char *newenvp[n + 1];
d763 1
a763 3
  debug_printf ("envp %p, keep_posix %d", envp, keep_posix);

  for (tl = 0, srcp = envp, dstp = newenvp; *srcp; srcp++, dstp++)
d765 1
a765 1
      len = strcspn (*srcp, "=") + 1;
d768 1
a768 1
      if (keep_posix || !(conv = getwinenv (*srcp, *srcp + len)))
d772 1
a772 1
	  char *p = (char *) alloca (strlen (conv->native) + 1);
d779 1
a779 1
	  char *p = (char *) alloca (strlen (*dstp) + 1);
d784 4
d789 16
@


1.48
log
@        * autoload.cc: Add LoadDLLinitfunc for secur32.dll.
        Add LoadDLLfuncEx statements for AllocateLocallyUniqueId@@4,
        DuplicateTokenEx@@24, LsaNtStatusToWinError@@4,
        LsaDeregisterLogonProcess@@4, LsaFreeReturnBuffer@@4,
        LsaLogonUser@@56, LsaLookupAuthenticationPackage@@12,
        LsaRegisterLogonProcess@@12,
        * environ.cc: Add extern declaration for `subauth_id'.
        (subauth_id_init): New function for setting `subauth_id'.
        (struct parse_thing): Add entry for `subauth_id'.
        * fork.cc (fork_parent): Call `RevertToSelf' and
        `ImpersonateLoggedOnUser' instead of `seteuid'.
        * security.cc: Define global variable `subauth_id'.
        (extract_nt_dom_user): New function.
        (cygwin_logon_user): Call `extract_nt_dom_user' now.
        (str2lsa): New static function.
        (str2buf2lsa): Ditto.
        (str2buf2uni): Ditto.
        (subauth): Ditto.
        * security.h: Add prototype for `subauth'.
        * spawn.cc (spawn_guts): Use cygheap->user.token only if impersonated.
        Use `cygsid' type. Remove impersonation before allowing access to
        workstation/desktop to everyone. Call `RevertToSelf' and
        `ImpersonateLoggedOnUser' instead of `seteuid'.
        * syscalls.cc (seteuid): Rearranged to allow using subauthentication
        to retrieve user tokens when needed.
@
text
@d117 1
a117 1
	else if (!envcache || !we->posix || strcmp (val, we->posix))
@


1.47
log
@Throughout, change fdtab references to cygheap->fdtab.
* child_info.h (cygheap_exec_info): Eliminate special fdtab stuff.
* spawn.cc (spawn_guts): Ditto.
* cygheap.cc (cygheap_init): Initialize fdtab, if appropriate.
* cygheap.h (CYGHEAPSIZE): Include size of init_cygheap.
(_cmalloc_entry): Include fdtab here.
* dtable.h (dtable): Declare/define new methods.
* dtable.cc (dtable::vfork_child_fixup): New method.
(dtable::fixup_after_exec): Remove unneeded extra arguments.
* dcrt0.cc (dll_crt0_1): Ditto.
* environ.cc (getwinenv): Use case sensitive comparison.
(winenv): Make a copy of environment cache to avoid realloc problems when
duplicate environment variables exist in the environment.  (From Egor Duda)
* net.cc (cygwin_socket): Revert Apr 14 change.
* include/sys/file.h: Protect against previous X_OK definition.
* passwd.cc: Eliminate passwd_sem throughout.
* security.cc: Ditto.
* cygwin.din: Export New functions.
* passwd.cc (read_etc_passwd): Make race safe.
(getpwuid_r): New function.
(getpwnam_r): New function.
@
text
@d38 1
d450 13
d499 1
@


1.46
log
@        * dir.cc (mkdir): Check for case clash.
        * environ.cc: Add extern declaration for `pcheck_case'.
        (check_case_init): New function.
        (struct parse_thing): Add "check_case" option.
        * errno.cc (_sys_nerrlist): Add text for ECASECLASH.
        (strerror): Add case branch for ECASECLASH.
        * fhandler.cc (fhandler_disk_file::open): Check for case clash.
        * path.cc: Add global variable `pcheck_case'.
        (struct symlink_info): Add member `case_clash' and method `case_check'.
        (path_prefix_p_): Call `pathnmatch' instead of `strncasematch'.
        (pathnmatch): New funtion.
        (pathmatch): Ditto.
        (path_conv::check): Add handling for case checking.
        (symlink): Check for case clash.
        (symlink_info::check): Add parameter for case checking.
        Handle case checking.
        (symlink_info::case_check): New method.
        (chdir): Don't use unconverted path if pcheck_case==PCHECK_STRICT.
        * path.h: Add extern declarations for `pathmatch' and
        `pathnmatch'.
        (enum case_checking): New enumeration type describing
        the case checking behaviour of path conversion routines.
        (class path_conv): Add member `case_clash'.
        * syscalls.cc (_link): Check for case clash.
@
text
@d25 1
d109 1
a109 1
    if (strncasematch (env, conv_envvars[i].name, conv_envvars[i].namelen))
d739 2
a740 2
      if (!keep_posix && (conv = getwinenv (*srcp, *srcp + len)))
	*dstp = conv->native;
d742 5
a746 1
	*dstp = *srcp;
@


1.45
log
@* dlfcn.cc (check_access): Eliminate.
(check_path_access): Use passed in path_conv buf.
(get_full_path_of_dll): Use passed in name buf to avoid a static.  Rip out most
of the path checking since LoadLibrary will do all of this automatically.
(dlopen): Set errno when appropriate (may not be compliant?).
* environ.cc (posify): Don't pass in "native" path if it seems to actually be
posix.
@
text
@d35 1
d398 27
d472 1
@


1.44
log
@Fix spacing, copyrights.
@
text
@d140 1
a140 1
  conv->add_cache (outenv + len, value);
@


1.43
log
@        * environ.cc (parse_options): Use strtok_r instead of strtok.
        * security.cc (convert_string_sid_to_sid): Ditto.
        (aclfromtext): Ditto. Fix buffer usage.
@
text
@a44 1

d47 1
a47 1
  
d402 1
a402 1
  if (strcmp (buf, "oem")== 0 )
d406 1
a406 1
      debug_printf ("File APIs set to OEM" );
d408 1
a408 1
  else if (strcmp (buf, "ansi")== 0 )
d412 1
a412 1
      debug_printf ("File APIs set to ANSI" );
d416 1
a416 1
      debug_printf ("Wrong codepage name: %s", buf );
@


1.42
log
@* dlopen.c (dlopen): Return NULL when name is NULL (suggested by
chrisiasci@@aol.com).
* cygwin.din: Add a new, internally used export - _check_for_executable.
* dcrt0.cc (dll_crt0_1): Set _check_for_executable for older binaries.  Pass
user_data to premain functions.
* fhandler.cc (fhandler_disk_file::open): Only check for executable if the
linked program is intereested in the executable bit.
(fhandler_disk_file::check_execable_p): Delete.
* fhandler.h (executable_states): New enumeration of various states of
executable bit caring.
(fhandler_base::set_execable_p): New method.
* fhandler_termios.cc (fhandler_termios::line_edit): Flag when a signal has
been sent to the tty.  Return -1 when this is so.
* fhandler_console.cc (fhandler_console::read): Return -1 when signal sending
character encountered.
* path.cc (path_conv::check): Record when path refers to a disk device.  Move
executable extension check here.
(check_sysfile): Accomodate new EXEC path states.
(has_suffix): Remove.
(next_suffix): Remove.
(class suffix_scan): New clas.
(suffix_scan::has): New method.
(suffix_scan:next): New method.
(symlink_info::check): Use suffix_scan method to control for scanning for
suffixes.
* path.h (path_conv::exec_state): New method.
* perprocess.h: Make "C" friendly.
* include/cygwin/version.h: Define CYGWIN_VERSION_CHECK_FOR_S_IEXEC.  Bump
CYGWIN_VERSION_API_MINOR.
* include/sys/cygwin.h: Change premain declarations.
* winsup.h: Move __cplusplus test to after builtin defines.
@
text
@d468 1
a468 1
  char *p;
d490 3
a492 1
  for (p = strtok (buf, " \t"); p != NULL; p = strtok (NULL, " \t"))
@


1.41
log
@        * dir.cc (readdir): Fix shortcut==symlink condition.
        * environ.cc: Add extern decl for `allow_winsymlinks'.
        (struct parse_thing): Add entry for `[no]winsymlinks'.
        * path.cc (symlink): Change to be able to create both,
        symlink==shortcut and symlink==systemfile, dependent of
        the setting of `allow_winsymlinks'.
        * security.cc (cygwin_logon_user): Add debug output.
        * shortcut.c: Add defines from path.h.
        (has_exec_chars): Copy from path.h.
        (check_shortcut): Check for executable file condition if not a
        shortcut.
@
text
@d21 1
a27 1
#include "perprocess.h"
d30 1
a30 1
extern BOOL ignore_case_with_glob;
@


1.40
log
@* pinfo.cc (codepage_init): Move function.
* environ.cc (codepage_init): To here.
* exceptoins.cc (SIG_NONMASKABLE): Remove SIGCONT from consideration since it
is supposed to be maskable.
* signal.cc (sigaction): Ditto.
* sigproc.cc (wait_sig): Ditto.
* winsup.h: Eliminate global declaration of codepage_init.
@
text
@d33 1
d458 1
@


1.39
log
@        * environ.cc (struct parse_thing): Add entry for new CYGWIN option
        `smbntsec'.
        * path.cc (path_conv::check): Check path for being a remote path.
        If so and `allow_smbntsec' is set to FALSE, set has_acls to FALSE.
        * security.cc: Add global definition for `allow_smbntsec'.
        * security.h: Add extern declaration for `allow_smbntsec'.
        * fhandler.cc (fhandler_disk_file::open): Eliminate extern declaration
        of `allow_ntsec'.
        * syscalls.cc: Ditto.
@
text
@d4 1
a4 1
   Copyright 1997, 1998, 1999, 2000 Red Hat, Inc.
d393 24
@


1.38
log
@* autoload.cc: Autoload CharToOemA.
* dcrt0.cc (dll_crt0_1): Translate command line to OEM if current codepage is
OEM.
* environ.cc: Add new option 'codepage' to CYGWIN environment variable.
* fhandler_clipboard.cc (fhandler_clipboard::read): Read clipboard in OEM mode
if current codepage is OEM.
* fhandler_console.cc (fhandler_console::read): Only translate console input if
current codepage is ANSI.
* fhandler_console.cc (fhandler_console::write_normal): Translate output data
if current codepage is ANSI.
* pinfo.cc (codepage_init): New function.  Setup current codepage from CYGWIN
environment variable and set codepage for file APIs.
* security.cc (read_sd): Translate file name to it if current codepage is OEM.
* winsup.h: (sys_wcstombs,sys_mbstowcs): Use current codepage for translations
between multibyte and widechar string and vice versa.
@
text
@d32 1
d428 1
@


1.37
log
@Throughout use myself->ppid_handle rather than parent_alive.
* child_info.h (child_info): Eliminate parent_alive.
* dcrt0.cc (dll_crt0_1): Call fork_init for debugging pid creation.
* fork.cc (fork_child): Reflect change to fixup_mmaps_after_fork arguments.
(slow_pid_reuse): New function to grab last 'n' pids to prevent pid reuse.
(fork_parent): Move last_fork_proc into slow_pid_reuse.  Handle fork_pids
debugging.  Eliminate unnecessary call to set_child_mmap_ptr.
(fork_init): New debugging function.
* mmap.cc (fixup_mmaps_after_fork): Renamed from recreate_mmaps_after_fork.
Rely on copied data after a fork.
(set_child_mmap_ptr): Eliminate.
* pinfo.h (_pinfo): Eliminate parent_alive, mmap_ptr and reflect above changes.
* spawn.cc (spawn_guts): Eliminate vestiges of "old way" of sending new hProc
to parent process.
@
text
@d4 1
a4 1
   Copyright 1997, 1998, 1999, 2000 Cygnus Solutions.
d45 5
a49 6
 * on the way in and back again on the way out.
 *
 * PATH needs to be here because CreateProcess uses it and gdb uses
 * CreateProcess.  HOME is here because most shells use it and would be
 * confused by Windows style path names.
 */
d284 1
a284 4
/* putenv --
 *	Sets an environment variable
 */

d305 2
a306 6
/*
 * setenv --
 *	Set the value of the environment variable "name" to be
 *	"value".  If overwrite is set, replace any current value.
 */

d328 1
a328 5
/*
 * unsetenv(name) --
 *	Delete environment variable "name".
 */

a342 1

d372 3
a374 4
 * null or empty: disables globbing
 * "ignorecase": enables case-insensitive globbing
 * anything else: enables case-sensitive globbing
 */
d396 2
a397 3
 * parse the CYGWIN environment variable or, if enabled, options from
 * the registry.
 */
d419 1
d435 1
a435 2
 * silently ignoring unknown "somethings".
 */
a518 1

d544 1
a544 2
 * environment variable and set appropriate options from it.
 */
d647 1
a647 2
/* Function called by qsort to sort environment strings.
 */
d658 3
a660 4
 * filled with null terminated strings, terminated by double null characters.
 * Converts environment variables noted in conv_envvars into win32 form
 * prior to placing them in the string.
 */
@


1.36
log
@* dcrt0.cc: New global variable `ignore_case_with_glob'.
(dll_crt0_1): Disable case-insensitive globbing before calling `main'.
* environ.cc (glob_init): New static function to set or clear
`ignore_case_with_glob'.
(known): Changed "glob" entry to call `glob_init'.
* glob.c (match): Use case-insensitive globbing if needed.
@
text
@d635 1
a635 1
      if (!parent_alive)
@


1.35
log
@* environ.cc (_addenv): malloc space for setenv if cygwin1.dll is used in
conjunction with older binaries.
(environ_init): Ditto.
* external.cc (get_cygdrive_info): New function.
* external.cc (get_cygdrive_prefixes): Change to use get_cygdrive_info but toss
the user and system flags.
* external.cc (cygwin_internal): Add new CW_GET_CYGDRIVE_INFO case.
* path.cc (mount_info::get_cygdrive_prefixes): Remove method.
* path.cc (mount_info::get_cygdrive_info): New method.  Actually,
get_cygdrive_info is really an enhanced version of get_cygdrive_prefixes
renamed to get_cygdrive_info that also gets the user and system flags.
* shared_info.h (get_cygdrive_prefixes): Remove method.
* shared_info.h (get_cygdrive_info): New method.
* include/cygwin/version.h: Bump minor API version due to adding
CW_GET_CYGDRIVE_INFO to cygwin_internal.
* include/sys/cygwin.h (cygwin_getinfo_types): Add CW_GET_CYGDRIVE_INFO.
@
text
@d30 1
d384 25
d438 1
a438 1
  {"glob", {&allow_glob}, justset, NULL, {{FALSE}, {TRUE}}},
@


1.34
log
@Fix typos.
@
text
@d27 1
d38 5
d256 2
a257 2
    envhere = cur_environ ()[offset] = (char *) name;	/* Not setenv. Just
						   overwrite existing. */
d575 3
d579 7
@


1.33
log
@Whitespace cleanup.

* configure.in: Eliminate subdir stuff.
* configure: Regenerate.
* include/getopt.h (option): Make name field 'const'.
@
text
@d238 1
a238 1
#ifdef DEBUGING
d240 1
a241 1
#endif
d601 1
a601 1
      debug_printf ("%s", envp[i]);
@


1.32
log
@* fork.cc (fork): Set sigframe here, since it can pause for a considerable
amount of time.
* environ.cc (_addenv): Add debugging.
* fhandler.cc: Eliminate unneeded include.
* smallprint.c: Ditto.
@
text
@d191 1
a191 1
    if (debug_print) 
@


1.31
log
@* Makefile.in: add miscfuncs.cc
* miscfuncs.cc: new, miscellaneous functions
* winsup.h: define table-driven tolower/toupper
* environ.cc: use them
* fhandler_console.cc: ditto
* fhandler_termios: ditto
* path.cc: ditto
(strncasematch, strcasematch, strcasestr): move to miscfuncs.cc
@
text
@d237 6
a242 1
	return -1;		/* Oops.  No more memory. */
@


1.30
log
@* dcrt0.cc (dll_crt0_1): init cygcwd before forkee branch

* environ.cc (conv_start_chars): Cache a table of "first
characters" for environment variables needing conversion.
(getwinenv): Use it.
(environ_init): Create it, also check first chars for TERM and
CYGWIN.

* path.cc: Use lookup table for case insensitive comparisons.
@
text
@d357 1
a357 1
      *p = toupper (*p);
d541 2
a542 2
	  conv_start_chars[tolower(conv_envvars[i].name[0])] = 1;
	  conv_start_chars[toupper(conv_envvars[i].name[0])] = 1;
@


1.29
log
@* exceptions.cc (call_handler): Make signal pending if sigsave.sig is still
active.
* syscalls.cc (_read): Don't clear errno.
* sigproc.cc (wait_sig): Don't scan the waiting process list after a SIGCHLD if
there are no zombies to reap.
* winsup.h: Use __builtin_strcmp.
* environ.cc (posify): Don't initialize len unless it is required
(from DJ Delorie <dj@@redhat.com>).
@
text
@d64 2
d96 3
d536 11
d590 1
a590 1
      if (strncmp (newp, "TERM=", 5) == 0)
d592 1
a592 1
      if (strncmp (newp, "CYGWIN=", sizeof("CYGWIN=") - 1) == 0)
d594 1
a594 1
      if (*eq)
@


1.28
log
@* Makefile.in: Remove some obsolete stuff.
* dcrt0.cc (dll_crt0_1): Call signal_fixup_after_exec where appropriate.  Set
myself->uid from parent version.  Just use ThreadItem Init method.  Close or
store hexec_proc as appropriate.
(_dll_crt0): Store user_data->forkee here so that proper tests can be made
subsequently.
(do_exit): Remove hExeced stuff.
* environ.cc (environ_init): Accept environ count as well as environ pointer.
* environ.h: Reflect above change.
* pinfo.cc (pinfo_init): Ditto.  Accept environ count.
(fixup_in_spawned_child): Remove.
* spawn.cc (spawn_guts): Move signal code to dll_crt0_1.  Don't suspend execing
process since it is no longer necessary.  Store envc.
* exceptions.cc (signal_fixup_after_exec): New function.
(call_handler): Remove hExeced test.
* child_info.h (cygheap_exec_info): Store envc as well as envp.
(child_info_spawn): Store hexec_proc so that it can be closed in child.
* path.cc (normalize_posix_path): Avoid intermediate use of temporary cwd buf.
(normalize_win32_path): Ditto.
(cwdstuff::get_initial): Always set lock.
* sigproc.h: Remove hExeced.
* strace.cc (strace::vsprntf): Modify to accomodate for lack of hExeced.
* thread.cc (MTinterface::Init): Merge Init1 and ClearReent into this method.
(MTinterface::Init1): Eliminate.
(MTinterface::ClearReent): Eliminate.
* thread.h: Reflect above changes.
* include/sys/strace.h (strace): Make microseconds() public.  Make various
functions 'regparm', throughout.
* pinfo.h (_pinfo): Inline simple signal manipulation functions.  Requires
inclusion of thread.h which was removed from .cc files, where appropriate.
throughout.
* pinfo.cc: Eliminate signal manipulation functions.
(_pinfo::exit): Calculate total rusage for exiting process here.
* cygheap.cc (size2bucket): Eliminate.
(init_buckets): Ditto.
(_cmalloc): Calculate size and bits in a loop rather than going through a
function call.
(_crealloc): Use stored array index to calculate allocated size.
* spawn.cc (spawn_guts): Use _pinfo exit method to exit, calculating cpu usage.
@
text
@a115 1
  int len = strcspn (src, "=") + 1;
d119 2
@


1.27
log
@* spawn.cc (av::dup_maybe): Make function void rather than void *.
* environ.cc (environ_init): Remember to reparse CYGWIN if envp is
supplied.
* heap.cc (_sbrk): Remember frame for signal handling.
* syscalls.cc (read_handler): Eliminate.
(_read): Move read_handler code here.  Reorganize for one path through
'ready_for_read'.
@
text
@d520 1
a520 1
environ_init (char **envp)
d523 1
a523 1
  int sz, i;
d544 2
a545 3
      sz = envsize (envp, 1);
      char **newenv = (char **) malloc (sz);
      memcpy (newenv, envp, sz);
d553 1
a553 1
  lastenviron = envp = (char **) malloc ((4 + (sz = 100)) * sizeof (char *));
d563 2
a564 3
      if (i >= sz)
	envp = (char **) realloc (envp, (4 + (sz += 100)) *
					    sizeof (char *));
@


1.26
log
@Break out more header info into separate files.  Use appropriate header files
throughout.
* shared.h: Remove.
* cygwin_version.h: New file.
* delqueue.h: New file.
* environ.h: New file.
* host_dependent.h: New file.
* perprocess.h: New file.
* registry.h: New file.
* security.h: New file.
@
text
@d527 1
d540 3
a542 1
  if (envp)
d549 1
d592 6
@


1.25
log
@* environ.cc (environ_init): Don't free the new environment table after we've
just copied stuff to it.
@
text
@d16 2
d25 2
@


1.24
log
@* Makefile.in: Add cygheap.o.
* child_info.h: Add specific exec class.
* cygheap.h: New file.  Contains declarations for cygwin heap.
* cygheap.cc: New file.  Implements cygwin heap functions.
* dcrt0.cc (quoted): Simplify due to new method for passing arguments between
cygwin programs.
(alloc_stack_hard_way): Attempt to handle overlapped stack.
(dll_crt0_1): Move child_info processing here.  Accomodate new method for
passing arguments between cygwin programs.  Initialize cygwin heap.  Establish
__argc and __argv variables.
(_dll_crt0): Move most of child_info processing to dll_crt0_1.
(cygwin_dll_init): Remove duplication.
* dtable.cc (dtable::extend): Allocate dtable using cygwin heap.
(dtable::build_fhandler): Ditto for fhandler type being constructed.
(dtable::dup_worker): Free new fhandler from cygwin heap on error.
(dtable::select_*): Don't assume that this == fdtab.
(dtable::linearize_fd_array): Delete.
(dtable::delinearize_fd_array): Delete.
(dtable::fixup_after_exec): New file.
(dtable::vfork_child_dup): Use cygwin heap.
(dtable::vfork_parent_restore): Ditto.
* dtable.h: Remove obsolete methods.  Add new method.
* environ.cc (posify): Eliminate already_posix parameter and logic.
(envsize): New function.
(_addenv): Use envsize.
(environ_init): Accept an argument pointing to an existing environment list.
If supplied, allocate space for this in the the program's heap.
* fhandler.cc (fhandler_base::operator =): Move here from fhandler.h.  Use
cygwin heap to allocate filenames.
(fhandler_base::set_name): Allocate/free names from cygwin heap.
(fhandler_base::linearize): Delete.
(fhandler_base::de_linearize): Delete.
(fhandler_base::operator delete): Free from cygwin heap.
(fhandler_base::~fhandler_base): Ditto.
* fhandler.h: Accomodate elimination of *linearize and other changes above.
* fhandler_console.cc (fhandler_console::fixup_after_exec): Rename from
de_linearize.
* heap.h: New file.
* fhandler_tty.cc (fhandler_tty_slave::fhandler_tty_slave): Use cygwin heap for
name.  fhandler_tty::fixup_after_exec): Rename from de_linearize.
* fork.cc (fork): Call cygheap_fixup_in_child.
* heap.cc: Use declarations in heap.h.
* malloc.cc: Sprinkle assertions throughout to catch attempts to free/realloc
something from the cygwin heap.
* path.cc: Throughout, eliminate use of per-thread cache for cwd.  Use cwd_*
functions rather than cwd_* variables to access cwd_win32 and cwd_posix.
(cwd_win32): New function.
(cwd_posix): New function.
(cwd_hash): New function.
(cwd_fixup_after_exec): New function.
* path.h: Accomodate path.cc changes.
* pinfo.cc (pinfo_init): Accept a pointer to an environment table.  Pass this
to environ_init.  Eliminate old 'title' tests.
* pinfo.h: Accomodate above change in argument.
* spawn.cc (struct av): New method for building argv list.
(av::unshift): New method.
(spawn_guts): Allocate everything that the child process needs in the cygwin
heap and pass a pointer to this to the child.  Build argv list using new
method.  Eliminate delinearize stuff.
* thread.h: Eliminate _cwd_win32 and _cwd_posix buffers.
* winsup.h: Eliminate obsolete functions.  Add envsize() declaration.
@
text
@d22 1
d539 1
a539 1
      envp = (char **) memcpy (newenv, envp, sz);
d541 1
@


1.23
log
@* environ.cc (parse_thing): nobinmode should force O_TEXT.
(regopt): Use correct path to find LOCAL_MACHINE registry options.
* fhandler.cc (fhandler_base::open): Set binary mode only when binmode ==
O_BINARY.
* pipe.cc (pipe): Pipe handling should rely on binmode not _fmode now that the
two are different.
@
text
@d30 2
d107 1
a107 1
posify (int already_posix, char **here, const char *value)
d116 2
a117 6
  if (already_posix)
    conv->add_cache (value, NULL);
  else
    {
      /* Turn all the items from c:<foo>;<bar> into their
	 mounted equivalents - if there is one.  */
d119 8
a126 9
      char *outenv = (char *) malloc (1 + len + conv->posix_len (value));
      memcpy (outenv, src, len);
      conv->toposix (value, outenv + len);
      conv->add_cache (outenv + len, value);

      debug_printf ("env var converted to %s", outenv);
      *here = outenv;
      free (src);
    }
d175 10
d212 2
a213 1
      char **env;
d215 1
a215 3
      /* Search for the end of the environment. */
      for (env = cur_environ (); *env; env++)
	continue;
d217 7
a223 1
      offset = env - cur_environ ();	/* Number of elements currently in environ. */
a224 3
      /* Allocate space for additional element plus terminating NULL. */
      __cygwin_environ = (char **) realloc (cur_environ (), (sizeof (char *) *
						     (offset + 2)));
d273 1
a273 1
        return 0;
d304 1
a304 1
        return 0;
d515 1
a515 1
environ_init (int already_posix)
d517 2
a518 2
  char *rawenv = GetEnvironmentStrings ();
  int envsize, i;
d520 1
a520 1
  char *newp, **envp;
a523 3
  /* Allocate space for environment + trailing NULL + CYGWIN env. */
  envp = (char **) malloc ((4 + (envsize = 100)) * sizeof (char *));

d534 13
d554 2
a555 2
      if (i >= envsize)
	envp = (char **) realloc (envp, (4 + (envsize += 100)) *
d570 1
a570 1
	posify (already_posix, envp + i, *++eq ? eq : --eq);
d577 3
@


1.22
log
@* winsup.h: Eliminate inclusion of most of the cygwin .h files.  Use .h files
only in sources which require them.
* Makefile.in: Generate dependencies with -MD option.
@
text
@d376 1
a376 1
  {"binmode", {x: &binmode}, justset, NULL, {{0}, {O_BINARY}}},
d492 4
a495 1
      reg_key r1 (HKEY_LOCAL_MACHINE, KEY_READ, CYGWIN_INFO_PROGRAM_OPTIONS_NAME, NULL);
@


1.21
log
@* cygerrno.h: New file.  Use this throughout whenever errno manipulation is
required.
* errno.cc: Use DWORD to hold Windows errors.
(geterrno_from_win_error): New function.
(seterrno_from_win_error): Use geterrno_from_win_error to convert supplied
windows error (suggested by Corinna Vinschen).
* path.cc (symlink_info): Add error element.
* path.cc (path_conv::check): Remove errno setting.  Use new symlink_info errno
element to set path_conv error, where appropriate.
(symlink_info::check): Set error element rather than attempting to manipulate
errno.  Add more checks for trailing / and /..  even though they are currently
useless.  Avoid setting EINVAL.
* path.cc (normalize_posix_path): Correct check for trailing /.
@
text
@d16 2
d19 2
@


1.20
log
@* winsup.h: Split out dtable definitions into separate header file.
* dtable.h: New file.
* sigproc.h: Eliminate pinfo.h usage here.  Use it in source files that need
it.
@
text
@d17 1
@


1.19
log
@* winsup.h: take out protections of environ, errno, allow C use
* *.cc: put winsup.h before other headers (for __INSIDE_CYGWIN__);
use cur_environ() instead of just environ
* times.cc: remove import protections
* glob.c: add winsup.h
* localtime.c: ditto
* smallprint.c: ditto
* Makefile.in: don't __INSIDE_CYGWIN__ as it messes up profiling.
@
text
@d16 1
@


1.18
log
@* include/cygwin/version.h: Bump DLL minor version number to 5 due to all of
the changes below.  Redefine process structure to avoid a fixed size table.
Redefine pinfo/_pinfo classes.  Use these throughout.
* dcrt0.cc (dll_crt0_1): Accomodate set_myself argument change.
(__api_fatal): Accomodate _pinfo::record_death argument change.
* exceptions.cc (really_exit): Ditto.
(sig_handle_tty_stop): Use pinfo constructor to access process info.
(events_init): Don't create pinfo_mutex since it is no longer required.
* external.cc (fillout_pinfo): Use winpids class to iterate over all system
pids.
(cygwin_internal): lock_pinfo_for_update and unlock_pinfo are now noops.
* fhandler_termios.cc (fhandler_termios::set_ctty): Use pinfo constructor to
access process info.
* fork.cc (fork): Reorganize to initialize child info after the child has
started since that is when we know the child's winpid, which is necessary to
allocate the pinfo shared memory.
* mmap.cc (recreate_mmaps_after_fork): Change arg type to _pinfo.
* pinfo.cc: Rename pinfo methods to _pinfo throughout.  Eliminate pinfo_list
stuff.
(set_myself): Accept a pid argument now.  Call pinfo initializer to initialize
myself.  Detect when this is an "execed" process and create an "indirect" pid
block.
(pinfo_init): Accomodate set_myself arg change.
(procinfo): Remove.
(pinfo::lock_pinfo): Remove.
(pinfo::unlock_pinfo): Remove.
(pinfo::init): New method.  Allocates shared memory space for process pinfo
structure.
(pinfo::record_death): Don't call locking functions.
(cygwin_winpid_to_pid): Simplify by using new pinfo constructor.
(EnumProcessesW95): New function for iterating over processes on Windows 95.
(winpids::winpids): New constructor for winpids class.  Sets up a list of
process ids.
(enum_init): Initialize w95/wnt pid enumerators.
* shared.cc (shared-info::initialize): Remove pid initialization.
* shared.h: Move pinfo stuff into pinfo.h.
(class shared_info): Remove pinfo_list element.
* signal.cc (kill_worker): Use pinfo constructor to access process info.
(kill_pgrp): Ditto.  Use winpids methods to access list of processes.
* sigproc.cc: Throughout, modify to use _pinfo where appropriate.
(proc_exists (pid_t)): New function.  Determines if a process exists based on
the pid.
(proc_exists (_pinfo *p): Use new proc_exists function above.
(proc_subproc): Copy pinfo stuff around rather than _pinfo pointers.  Try to be
careful about releasing shared memory when we don't need it anymore.  Remove
pinfo locks.
(remove_zombies): Remove pinfo memory when zombie is going away.
* sigproc.h: Reflect _pinfo/pinfo changes in sigproc.cc.
* spawn.cc (spawn_guts): Eliminate pinfo *child argument.  Reorganize to only
initialize child pinfo after process has been started and we know the windows
pid.
(_spawnve): Reflect spawn_guts changes.
* syscalls.cc (setpgid): Use pinfo constructor to access process info.
(getpgid): Ditto.
(internal_getlogin): Use _pinfo.
* winsup.h: Eliminate pinfo_mutex.  Eliminate spawn_guts declaration since it
is static now.  Reflect set_myself argument change.
* include/sys/cygwin.h: Add some PID_* enums to accomodate new pinfo stuff.
* include/cygwin/version.h: Update minor version for cygdrive changes below.
@
text
@d10 1
a12 1
#include "winsup.h"
d86 1
a86 1
	if (!environ || !(val = in_posix ?: getenv(we->name)))
d149 1
a149 1
  for (p = environ; *p; ++p)
d153 1
a153 1
	  *offset = p - environ;
d202 1
a202 1
      for (env = environ; *env; env++)
d205 1
a205 1
      offset = env - environ;	/* Number of elements currently in environ. */
d208 1
a208 1
      __cygwin_environ = (char **) realloc (environ, (sizeof (char *) *
d219 1
a219 1
    envhere = environ[offset] = (char *) name;	/* Not setenv. Just
d229 1
a229 1
      envhere = environ[offset] = (char *) malloc (namelen + valuelen + 2);
d311 1
a311 1
    for (e = environ + offset; ; e++)
@


1.17
log
@* environ.cc (parse_thing): Make binmode a DWORD.
* hinfo.cc (hinfo::init_std_file_from_handle): Use 'binmode' to determine
default open mode.
* winsup.h: Declare binmode.
@
text
@d630 1
a630 1
char ** __stdcall
@


1.17.2.1
log
@* select.cc (fhandler_console::select_read): Call set_cursor_maybe since select
may block and cursor may not be visible.
* select.cc (fhandler_console::select_write): Ditto.
* select.cc (fhandler_console::select_except): Ditto.
* environ.cc (cur_environ): Give "C" linkage.
* winsup.h: Ditto.
* winsup.cc: Change include ordering.
@
text
@d630 1
a630 1
extern "C" char ** __stdcall
@


1.16
log
@        * environ.cc (posify): Revert previous patch.
        (_addenv): Remove check_null_empty_path from here.
        (putenv): Call check_nullempty_path.
        (setenv): Call check_nullempty_path for name as well here.
        Don't report an error if value is empty string.
        (environ_init): Revert usage of newp.
@
text
@a20 2
extern BOOL binmode;
BOOL threadsafe;
d370 1
a370 1
  {"binmode", {&binmode}, justset, NULL, {{FALSE}, {TRUE}}},
a381 1
  {"threadsafe", {&threadsafe}, justset, NULL, {{TRUE}, {FALSE}}},
@


1.15
log
@* syscalls.cc (_link): Avoid extraneous call to cygwin_conv_to_win32_path.
@
text
@d124 1
a183 7
  int res;
  if ((res = check_null_empty_path (name)))
    {
      set_errno (res);
      return  -1;
    }

d256 8
d283 6
a288 1
  if ((res = check_null_empty_path (value)))
d290 2
d505 1
a505 1
  char **envp;
d528 1
d532 3
a534 3
      envp[i] = p;
      if (*p == '=')
	*p = '!';
d536 2
a537 2
      if ((eq = strchr (p, '=')) == NULL)
	eq = strchr (p, '\0');
d539 2
a540 2
	ucenv (p, eq);
      if (strncmp (p, "TERM=", 5) == 0)
d542 2
a543 2
      if (strncmp (p, "CYGWIN=", sizeof("CYGWIN=") - 1) == 0)
	parse_options (p + sizeof("CYGWIN=") - 1);
@


1.14
log
@Throughout, eliminate third argument to path_conv and use new PC_* constants
for second argument.
* path.h: Generalize SYMLINK_* constants to PC_*.
(path_conv): Create a new method.  Fold third argument into second.
* dll_init.cc (dll_list::alloc): Try harder to find space to allocate dll
struct.
(dll_dllcrt0): Don't check sanity if we've already called dll_crt0.
* path.cc (path_conv::check): Don't check for a null or empty path unless
specifically told with a flag setting.
(check_null_empty_path): New function, adapted from macro.
* syscalls.cc (_rename): Use already-determined file attributes rather than
checking again.
* lib/cygwin/cygwin_attach.dll.c (cygwin_attach_dll): Use a static per_process
structure since this is apparently supposed to be zeroed.
* lib/cygwin_crt0.c (cygwin_crt0): Zero per_process structure sent to older
DLLs.
@
text
@d10 2
a12 1
#include <stdlib.h>
a123 1
      free (src);
d173 82
d262 3
a264 2
  register char *p, *equal;
  int rval;
d266 3
a268 11
  if (!(p = strdup (str)))
    return 1;
  if (!(equal = index (p, '=')))
    {
      (void) free (p);
      return 1;
    }
  *equal = '\0';
  rval = setenv (p, equal + 1, 1);
  (void) free (p);
  return rval;
d274 1
a274 1
 *	"value".  If rewrite is set, replace any current value.
d278 1
a278 1
setenv (const char *name, const char *value, int rewrite)
d280 5
a284 31
  register char *C;
  unsigned int l_value;
  int offset;

  if (*value == '=')		/* no `=' in value */
    ++value;
  l_value = strlen (value);
  if ((C = my_findenv (name, &offset)))
    {				/* find if already exists */
      if (!rewrite)
	return 0;
      if (strlen (C) >= l_value)
	{			/* old larger; copy over */
	  while ((*C++ = *value++));
	  return 0;
	}
    }
  else
    {				/* create new slot */
      register int cnt;
      register char **P;

      for (P = environ, cnt = 0; *P; ++P, ++cnt)
	;
      __cygwin_environ = (char **) realloc ((char *) environ,
				   (size_t) (sizeof (char *) * (cnt + 2)));
      if (!__cygwin_environ)
	return -1;
      __cygwin_environ[cnt + 1] = NULL;
      update_envptrs ();
      offset = cnt;
d286 3
a288 15

  for (C = (char *) name; *C && *C != '='; ++C);	/* no `=' in name */

  if (!(environ[offset] =	/* name + `=' + value */
	(char *) malloc ((size_t) ((int) (C - name) + l_value + 2))))
    return -1;
  for (C = environ[offset]; (*C = *name++) && *C != '='; ++C);
  *C++ = '=';
  strcpy (C, value);

  win_env *spenv;
  if ((spenv = getwinenv (environ[offset])))
    spenv->add_cache (value);

  return 0;
d493 1
a493 1
  const char * const rawenv = GetEnvironmentStrings ();
d495 2
a496 2
  char *newp, **envp;
  const char *p;
d498 1
a518 1
      newp = strdup (p);
d522 3
a524 3
      envp[i] = newp;
      if (*newp == '=')
	*newp = '!';
d526 2
a527 2
      if ((eq = strchr (newp, '=')) == NULL)
	eq = strchr (newp, '\0');
d529 2
a530 2
	ucenv (newp, eq);
      if (strncmp (newp, "TERM=", 5) == 0)
d532 2
a533 2
      if (strncmp (newp, "CYGWIN=", sizeof("CYGWIN=") - 1) == 0)
	parse_options (newp + sizeof("CYGWIN=") - 1);
d540 1
a540 1
    envp[i++] = strdup ("TERM=cygwin");
a543 1
  FreeEnvironmentStringsA ((char *) rawenv);
@


1.13
log
@        * environ.cc (setenv): Use __cygwin_environ instead of
        environ after reallocating environment space.
@
text
@d262 1
a262 1
  register char **P;
d266 3
a268 2
    for (P = &environ[offset];; ++P)
      if (!(*P = *(P + 1)))
@


1.12
log
@* environ.cc: Use new definition of "environ" throughout.
(environ_init): Explicitly initialize __cygwin_environ.
(cur_environ): New function.  Detects when user has updated their environment.
* exec.cc: Use 'environ' define throughout rather than __cygwin_environ.
* spawn.cc: Ditto.
* winsup.h: Declare cur_environ, main_environ, environ.
@
text
@d231 1
a231 1
      if (!environ)
d233 1
a233 1
      environ[cnt + 1] = NULL;
@


1.11
log
@* hinfo.cc (hinfo::linearize_fd_array): Make max_used_fd an int so that we can
detect when there are no fds to pass.
* dcrt0.cc (host_dependent_constants::init): Revert Sat Mar 18 01:32:04 2000
change.
(dll_crt0_1): Set "cygwin_finished_initializing" flag.
(dll_crt0): Don't perform memcpy if uptr is already set to internal structure.
(_dll_crt0): Remember location of programs envptr.
* dll_init.h (per_module, dll, dll_list): Revamp.
* dll_init.cc: Revamp.  Use new classes.
* fork.cc (fork): Use new revamped dll, dll_list, and per_module stuff.
* environ.cc: Use __cygwin_environ throughout rather than the
user_data->envptr.
* exec.cc: Ditto.
* spawn.cc: Ditto.
* winsup.h: Declare update_envptrs, cygwin_finished_initializing.
* lib/_cygwin_crt0_common.cc (_cygwin_crt0_common): Revert previous change.
* lib/cygwin_attach_dll.cc (cygwin_attach_dll): Always pass in own per_process
structure or we end up overwriting information from the main program.
@
text
@a15 2
#define environ __cygwin_environ

d229 1
a229 1
      environ = (char **) realloc ((char *) environ,
d504 1
a504 1
  environ = envp;
d580 16
@


1.10
log
@* Makefile.in: Use variables rather than configure constructs where
appropriate.
(LIBCOS): Find additional stub library stuff in their own subdirectory.
* dcrt0.cc: Convert user_data pointer to static __cygwin_user_data area.
(do_global_ctors): Check magic_bisquit for initialization.
(dll_crt0_1): First group of premain functions prior to fd initialization.  Run
second group before calling main.
(dll_crt0 ()): New function, called from new initialization code.
(dll_crt0 (per_process *uptr)): Call new dll_crt0 () function on
initialization.
* debug.cc (thread_stub): Initialize bottom of stack with per-thread info.
* environ.cc (parse_thing): Use binmode global to control CYGWIN=binmode
behavior.
* fhandler.cc (fhandler_base::open): Allow explicit setting of __fmode to
O_BINARY or O_TEXT to override disk mount settings.
* libcmain.cc: Move to lib subdirectory.
* libccrt0.cc: Ditto.
* dll_main.cc: Ditto.
* dll_entry.cc: Ditto.
* getopt.c: Ditto.
* thread.cc (thread_init_wrapper): Call ExitThread explicitly rather than
returning, as a preliminary step towards placing per thread info at the bottom
of the stack.
* winsup.h: Move per_process class to include/sys/cygwin.h.  Declare new
dll_crt0().
* include/cygwin/version.h: Bump API minor version.
* binmode.c: New file.
* textmode.c: Ditto.
* lib/_cygwin_crt0_common.cc: Ditto.
* lib/crt0.h: Ditto.
* lib/cygwin_attach_dll.c: Ditto.
* lib/cygwin_crt0.c: Ditto.
* lib/dll_entry.cc: Ditto.
* lib/dll_main.cc: Ditto.
* lib/getopt.c: Ditto.
* lib/libcmain.c: Ditto.
* lib/premain0.c: Ditto.
* lib/premain1.c: Ditto.
* lib/premain2.c: Ditto.
* lib/premain3.c: Ditto.
@
text
@d16 1
a16 1
#define environ (*user_data->envptr)
d231 2
a232 2
      __cygwin_environ = environ = (char **) realloc ((char *) environ,
		      (size_t) (sizeof (char *) * (cnt + 2)));
d236 1
d506 2
a507 1
  __cygwin_environ = environ = envp;
@


1.9
log
@* environ.cc (conv_envvars): Detect and convert all environment variables used
by libiberty's choose-temp.c
@
text
@d22 1
d326 1
a326 1
  {"binmode", {&__fmode}, justset, NULL, {{O_TEXT}, {O_BINARY}}},
@


1.8
log
@* Makefile.in: Remove libadvapi32.a.
* autoload.h: Add additional field to autoload block for handling unimplemented
functions.
(LoadDLLfuncEx): New function which accepts additional parameter for
controlling unimplemented function behavior.
(LoadDLLfunc): Use LoadDLLfuncEx.
* dcrt0.cc: Use new arguments for LoadDLLfunc.  Add advapi32 routines.
(noload): Rewrite in assembler.  Handle new unimplemented function type.
* exceptions.cc: Eliminate another vestige of StackWalk stuff.
* net.cc: Use new arguments for LoadDLLfunc.
* uinfo.cc: Ditto.

* config.h.in: Remove obsolete define.
* path.h (isdrive): New macro.
* dcrt0.cc (globify): Use new macro to determine if a string refers to an
MS-DOS drive.
* environ.cc (winenv): Ditto.
* spawn.cc (find_exec): Ditto.
* path.cc (get_raw_device_number): Ditto.
(mount_info::conv_to_posix_path): Ditto.
(chdir): Ditto.
(cygwin_posix_path_list_p): Ditto.
(cygwin_split_path): Ditto.
(path_conv::check): Move tmp_buf to beginning of function since it can be used
earlier in the loop.  Use tmp_buf rather than 'root' to hold root information.
(mount_info::conv_to_win32_path): Add trailing slash to end of mount path when
it translates to a drive.  Add defensive code to avoid writing beyond the end
of 'dst'.
@
text
@d46 4
@


1.7
log
@* environ.cc (regopt): Scan HKLM if HKCU scan fails.
@
text
@d546 1
a546 2
      if ((*dstp)[0] == '!' && isalpha((*dstp)[1]) && (*dstp)[2] == ':' &&
	  (*dstp)[3] == '=')
@


1.6
log
@* exceptions.cc (interruptible): Allocate slightly more space for directory
name check.  Windows 95 seems to null-terminate the directory otherwise.
(interrupt_on_return): Issue a fatal error if we can't find the caller's stack.
* spawn.cc (find_exec): Accept a path_conv argument rather than a buffer so
that the caller can find things out about a translated path.
(perhaps_suffix): Ditto.
(spawn_guts): Allocate path_conv stuff here so that we can find out stuff about
the translated path (this is work in progress).
* environ.cc (environ_init): Accept an as-yet unused argument indicating
whether we were invoked from a cygwin parent or not.
(winenv): Ditto.
(posify): Accept an argument indicating whether the path has already been
translated.
* dlfcn.cc (check_access): Provide a path_conv buffer to find_exec.
* exec.cc (sexecvpe): Ditto.
* path.cc (path_conv::check): Rename from path_conv::path_conv.
(mount_item::getmntent): Recognize "Cygwin executable" bit.
(symlink_info::check): Remove debugging statements.
* path.h (class path_conv): Add iscygexec method.  Rewrite constructor to call
"check" method to allow multiple operations on a path_conv variable.
* pinfo.cc (pinfo_init): Pass argument to environ_init.
* shared.h: Bump PROC_MAGIC.
* winsup.h: Reflect above changes to function arguments.
* include/sys/mount.h: Add MOUNT_CYGWIN_EXEC type.
@
text
@d436 6
@


1.5
log
@* environ.cc: Add TMPDIR to the list of environment variables which are
converted to POSIX format.
* sigproc.cc (proc_terminate): Don't attempt to delete when a muto pointer is
NULL.
@
text
@d97 1
a97 1
posify (char **here, const char *value)
d106 6
a111 2
  /* Turn all the items from c:<foo>;<bar> into their
     mounted equivalents - if there is one.  */
d113 9
a121 8
  char *outenv = (char *) malloc (1 + len + conv->posix_len (value));
  memcpy (outenv, src, len);
  conv->toposix (value, outenv + len);
  conv->add_cache (outenv + len, value);

  debug_printf ("env var converted to %s", outenv);
  *here = outenv;
  free (src);
d443 1
a443 1
environ_init (void)
d487 1
a487 1
	posify (envp + i, *++eq ? eq : --eq);
d517 1
a517 1
winenv (const char * const *envp)
d528 2
d535 1
a535 1
      if ((conv = getwinenv (*srcp, *srcp + len)))
@


1.4
log
@* environ.cc: Eliminate oldstack CYGWIN option.
* exceptions.cc (sfta): Eliminate obsolete function.
(sgmb): Eliminate obsolete function.
(class stack_info): Remove MS method for walking the stack.
(stack_info::init): Just initialize required fields.
(stack_info::brute_force): Rename to stack_info::walk.
(handle_exceptions): Pass derived frame pointer to sig_send.
(interrupt_setup): Clear saved frame pointer here.
(interrupt_on_return): thestack is no longer a pointer.
(call_handler): Accept a flag to indicate when a signal was sent from other
than the main thread.  Use saved frame pointer for determining where to place
signal handler call.
(sig_handle): Accept "nonmain" argument.  Pass it to call_handler.
* fhandler_tty.cc (fhandler_tty_common::__acquire_output_mutex): Change
debugging output slightly.
* (fhandler_tty_common::__release_output_mutex): Ditto.
(fhandler_tty_slave::read): Fix a comment, remove a goto.
* sigproc.cc (sig_send): Accept an optional frame pointer argument for use when
suspending the main process.  sigcomplete_main is an autoreset event now.  Save
frame pointer for non-main operation.
(wait_sig): Make sigcomplete_main an autoreset event.  Eliminate NOSIGQUEUE.
Pass rc to sig_handle to signify if this was a nonmain process.
* sigproc.h: Reflect change to sig_send argument.
* syscalls.cc (swab): Eliminate swab function since it is now available in
newlib.
* winsup.h (signal_dispatch): Change CONTEXT cx to DWORD ebp.
@
text
@d44 2
@


1.3
log
@Respond to a multitude of g++ warnings.
@
text
@a21 1
extern BOOL oldstack;
a321 1
  {"oldstack", {&oldstack}, justset, NULL, {{FALSE}, {TRUE}}},
@


1.2
log
@* environ.cc (getwinenv): Make __stdcall.
(winenv): Ditto.
* malloc.cc (strdup): New function.  Occludes newlib version.
(_strdup_r): Ditto.
* winsup.h: Reflect above __stdcall changes.
@
text
@d45 1
a45 1
    {NULL}
d263 1
a263 1
static void __inline
@


1.1
log
@Initial revision
@
text
@d75 1
a75 1
win_env *
d156 1
a156 2
extern "C"
char *
d168 1
a168 2
extern "C"
int
d193 1
a193 2
extern "C"
int
d249 1
a249 2
extern "C"
void
d489 1
a489 1
  __cygwin_environ = *user_data->envptr = envp;
d511 1
a511 1
char *
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
