head	1.11;
access;
symbols
	cygwin-1_7_35-release:1.11
	cygwin-1_7_34-release:1.11
	cygwin-1_7_33-release:1.11
	cygwin-1_7_32-release:1.11
	cygwin-1_7_31-release:1.11
	cygwin-1_7_30-release:1.11
	cygwin-1_7_29-release:1.11
	cygwin-1_7_29-release-branchpoint:1.11.0.2
	cygwin-pre-user-db:1.11
	cygwin-1_7_28-release:1.11
	cygwin-1_7_27-release:1.11
	cygwin-1_7_26-release:1.11
	cygwin-1_7_25-release:1.11
	cygwin-1_7_24-release:1.11
	cygwin-1_7_23-release:1.11
	cygwin-1_7_22-release:1.11
	cygwin-1_7_21-release:1.11
	cygwin-1_7_20-release:1.11
	cygwin-1_7_19-release:1.11
	cygwin-64bit-postmerge:1.11
	cygwin-64bit-premerge-branch:1.10.0.2
	cygwin-64bit-premerge:1.10
	cygwin-1_7_18-release:1.10
	post-ptmalloc3:1.9.2.2
	pre-ptmalloc3:1.9.2.2
	cygwin-1_7_17-release:1.9
	cygwin-64bit-branch:1.9.0.2
	cygwin-1_7_16-release:1.9
	cygwin-1_7_15-release:1.9
	cygwin-1_7_14_2-release:1.9
	cygwin-1_7_14-release:1.9
	cygwin-1_7_12-release:1.9
	cygwin-1_7_11-release:1.9
	cygwin-1_7_10-release:1.9
	signal-rewrite:1.8.0.4
	pre-notty:1.8
	cygwin-1_7_9-release:1.8
	cv-post-1_7_9:1.8.0.2
	cygwin-1_7_8-release:1.8
	cygwin-1_7_7-release:1.8
	cygwin-1_7_5-release:1.7
	cygwin-1_7_4-release:1.7
	cygwin-1_7_3-release:1.7
	cygwin-1_7_2-release:1.7
	fifo_doover3:1.7.0.4
	cygwin-1_7_1-release:1.7
	prefifo:1.7
	cv-branch-2:1.7.0.2
	pre-ripout-set_console_state_for_spawn:1.7
	EOL_registry_mounts:1.6
	preoverlapped:1.5
	drop_9x_support_start:1.4
	cr-0x5f1:1.4.0.18
	cv-branch:1.4.0.16
	pre-ptymaster-archetype:1.4
	cr-0x3b58:1.4.0.14
	cr-0x5ef:1.4.0.12
	after-mmap-privanon-noreserve:1.4
	after-mmap-revamp:1.4
	before-mmap-revamp:1.4
	cgf-more-exit-sync:1.4
	post_wait_sig_exit:1.4
	pre_wait_sig_exit:1.4
	reparent-point:1.4
	noreparent:1.4.0.10
	cr-0x5e6:1.4.0.8
	cr-0x9e:1.4.0.6
	cr-0x9d:1.4.0.4
	cgf-deleteme:1.4.0.2
	pre-sigrewrite:1.4
	corinna-01:1.3
	cr-0x9c:1.3.0.8
	cr-0x9b:1.3.0.6
	cr-0x99:1.3
	Z-emcb-cygwin_daemon:1.3.0.2
	w32api-2_2:1.3
	mingw-runtime-2_4:1.3
	pre-cgf-merge:1.3
	cgf-dev-branch:1.3.0.4;
locks; strict;
comment	@// @;


1.11
date	2013.04.23.09.44.33;	author corinna;	state Exp;
branches;
next	1.10;

1.10
date	2013.01.21.04.38.27;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2011.12.13.17.46.08;	author corinna;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2010.08.28.08.51.21;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2008.04.07.18.45.57;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2007.12.05.16.50.18;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2007.02.22.10.54.47;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.14.23.40.05;	author rbcollins;	state Exp;
branches;
next	1.3;

1.3
date	2002.12.14.16.59.59;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2002.12.10.13.27.15;	author corinna;	state Exp;
branches;
next	1.1;

1.1
date	2002.12.04.20.44.17;	author cgf;	state Exp;
branches;
next	;

1.9.2.1
date	2013.01.21.13.52.09;	author corinna;	state Exp;
branches;
next	1.9.2.2;

1.9.2.2
date	2013.02.09.20.38.00;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.11
log
@	* Merge in cygwin-64bit-branch.
@
text
@/* netdb.cc: network database related routines.

   Copyright 2002, 2003, 2007, 2008, 2010, 2011, 2013 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include "winsup.h"
#include <stdio.h>
#include <stdlib.h>
#include <netdb.h>
#include <shared_info.h>

/* Locate and open a system network database file.  relative_path
 should be one of the following values:
 "protocol"
 "services"
 "networks"
 "hosts"

 It is the callers responsibility to close the file.  */
static FILE *
open_system_file (const char *relative_path)
{
  /* system dir path is never longer. */
  char win32_name[MAX_PATH];

  user_shared->warned_msdos = true;
  sys_wcstombs (win32_name, MAX_PATH, windows_system_directory);
  strcat (win32_name, "drivers\\etc\\");
  strcat (win32_name, relative_path);
  FILE *result = fopen (win32_name, "rt");
  debug_printf ("handle to netdb file %s: %p", win32_name, result);
  return result;
}

inline static FILE *
open_protocol_file ()
{
  return open_system_file ("protocol");
}

/* Wrapper for open_system_file(), fixing the constant name
"services".  Returns the open file. */
inline static FILE *
open_services_file ()
{
  return open_system_file ("services");
}

/* Read an entire line up till the next \n character.  Memory for the
line is dynamically allocated, and the caller must call free() to
deallocate it.  When the end of file is reached, NULL is returned.  */
static char *
get_entire_line (FILE *fd)
{
  static const int BUFF_SIZE = 1024;
  struct line_fragment
  {
    char buffer[BUFF_SIZE];
    line_fragment *next;
  };

  line_fragment *fragment_list_head = NULL;
  line_fragment *fragment = NULL;
  int fragment_count = 0;
  char *result;

  do
    {
      line_fragment *new_fragment = (line_fragment *) malloc (sizeof (line_fragment));
      paranoid_printf ("line fragment allocated %p", new_fragment);
      if (!fragment_list_head)
	fragment_list_head = new_fragment;
      if (fragment)
	fragment->next = new_fragment;
      fragment = new_fragment;
      fragment->next = NULL;
      *fragment->buffer = '\0';
      result = fgets (fragment->buffer, BUFF_SIZE, fd);
      ++fragment_count;
    }
  while (result && !strchr (fragment->buffer, '\n'));

  if (*fragment_list_head->buffer != '\0')
    {
      char *concatenated_line = (char *) calloc (fragment_count * BUFF_SIZE , sizeof (char));
      paranoid_printf ("concatenated line allocated %p", concatenated_line);
      *concatenated_line = '\0';
      fragment = fragment_list_head;
      while (fragment != NULL)
	{
	  line_fragment *previous = fragment;
	  strcat (concatenated_line, fragment->buffer);
	  fragment = fragment->next;
	  free (previous);
	}
      return concatenated_line;
    }
  else
    {
      fragment = fragment_list_head;
      while (fragment != NULL)
	{
	  line_fragment *previous = fragment;
	  fragment = fragment->next;
	  free (previous);
	}
      return NULL;
    }
}

/* Characters representing whitespace.  Used by parse_* routines to
delimit tokens.  */
static const char *SPACE = " \t\n\r\f";

/* Parse a list aliases from a network database file.  Returns a
char** structure terminated by a NULL. */
static void
parse_alias_list (char ***aliases, char **lasts)
{
  struct alias_t
  {
    char *alias_name;
    alias_t *next;
  };
  alias_t *alias_list_head = NULL, *alias_list_tail = NULL;
  char *alias;
  int alias_count = 0;
  alias = strtok_r (NULL, SPACE, lasts);

  while (alias)
    {
      ++alias_count;
      alias_t *new_alias = (alias_t *) malloc (sizeof (alias_t));
      paranoid_printf ("new alias alloc %p", new_alias);
      if (!alias_list_head)
	alias_list_head = new_alias;
      if (alias_list_tail)
	alias_list_tail->next = new_alias;
      new_alias->next = NULL;
      new_alias->alias_name = alias;
      alias_list_tail = new_alias;
      alias = strtok_r (NULL, SPACE, lasts);
    }

  *aliases = (char**) calloc (alias_count + 1, sizeof (char *));
  paranoid_printf ("aliases alloc %p", *aliases);

  char **current_entry = *aliases;
  while (alias_list_head)
    {
      alias_t *previous = alias_list_head;
      *current_entry = strdup (alias_list_head->alias_name);
      paranoid_printf ("*current entry strdup %p", *current_entry);
      alias_list_head = alias_list_head->next;
      free (previous);
      ++current_entry;
    }

  *current_entry = NULL;
}

/* Read the next line from svc_file, and parse it into the structure
pointed to by sep.  sep can point to stack or static data, but it's
members will be overwritten with pointers to dynamically allocated
heap data accommodating parsed data.  It is the responsibility of the
caller to free up the allocated structures. The function returns true
to indicate that a line was successfully read and parsed.  False is
used to indicate that no more lines can be read and parsed.  This
should also interpreted as end of file. */
static bool
parse_services_line (FILE *svc_file, struct servent *sep)
{
  char *line;
  while ((line = get_entire_line (svc_file)))
    {
      char *name, *port, *protocol, *lasts;

      line[strcspn (line, "#")] = '\0'; // truncate at comment marker.
      name = strtok_r (line, SPACE, &lasts);
      if (!name)
	{
	  free (line);
	  continue;
	}
      port = strtok_r (NULL, SPACE, &lasts);
      protocol = strchr (port, '/');
      *protocol++ = '\0';
      sep->s_name = strdup (name);
      paranoid_printf ("sep->s_name strdup %p", sep->s_name);
      sep->s_port = atoi (port);
      sep->s_proto = strdup (protocol);
      paranoid_printf ("sep->s_proto strdup %p", sep->s_proto);
      /* parse_alias_list relies on side effects.  Read the comments
	 for that function.*/
      parse_alias_list (& sep->s_aliases, &lasts);
      free (line);
      return true;
    }
  return false;
}

static FILE *svc_file = NULL;
static long int svc_read_pos = 0;
static struct servent current_servent;

/* Steps through a struct servent, and frees all of the internal
structures.*/
static void
free_servent (struct servent *sep)
{
  free (sep->s_name);
  free (sep->s_proto);
  char ** current = sep->s_aliases;
  while (current && *current)
    {
      free (*current);
      ++current;
    }
  free (sep->s_aliases);
  sep->s_name = NULL;
  sep->s_port = 0;
  sep->s_proto = NULL;
  sep->s_aliases = NULL;
}

extern "C" void
cygwin_setservent (int stay_open)
{
  if (svc_file)
    fclose (svc_file);
  if (stay_open)
    svc_file = open_services_file ();
  free_servent (&current_servent);
  svc_read_pos = 0;
  syscall_printf ("setservent (%d)", stay_open);
}

extern "C" struct servent *
cygwin_getservent (void)
{
  FILE *fd;
  if (svc_file)
    fd = svc_file;
  else
    {
      fd = open_services_file ();
      if (!fd)
	{
	  syscall_printf ("%p = getservent()", NULL);
	  return NULL;
	}
      fseek (fd, svc_read_pos, SEEK_SET);
    }
  free_servent (&current_servent);
  bool found = parse_services_line (fd, &current_servent);
  if (!svc_file)
    {
      svc_read_pos = ftell (fd);
      fclose (fd);
    }
  struct servent *result;
  if (found)
    result = &current_servent;
  else
    result = NULL;
  syscall_printf ("%p = getservent()", result);
  return result;
}

extern "C" void
cygwin_endservent (void)
{
  if (svc_file)
    {
      fclose (svc_file);
      svc_file = NULL;
    }
  free_servent (&current_servent);
  svc_read_pos = 0;
  syscall_printf ("endservent ()");
}

/* Read the next line from proto_file, and parse it into the structure
pointed to by pep.  pep can point to stack or static data, but it's
members will be overwritten with pointers to dynamically allocated
heap data accommodating parsed data.  It is the responsibility of the
caller to free up the allocated structures. The function returns true
to indicate that a line was successfully read and parsed.  False is
used to indicate that no more lines can be read and parsed.  This
should also interpreted as end of file. */
static bool
parse_protocol_line (FILE *proto_file, struct protoent *pep)
{
  char *line;
  while ((line = get_entire_line (proto_file)))
    {
      char *name, *protocol, *lasts;

      line[strcspn (line, "#")] = '\0'; // truncate at comment marker.
      name = strtok_r (line, SPACE, &lasts);
      if (!name)
	{
	  free (line);
	  continue;
	}
      protocol = strtok_r (NULL, SPACE, &lasts);
      pep->p_name = strdup (name);
      paranoid_printf ("pep->p_name strdup %p", pep->p_name);
      pep->p_proto = atoi (protocol);
      /* parse_alias_list relies on side effects.  Read the comments
	 for that function.*/
      parse_alias_list (& pep->p_aliases, &lasts);
      free (line);
      return true;
    }
  return false;
}

static FILE *proto_file = NULL;
static long int proto_read_pos = 0;
static struct protoent current_protoent;

/* Steps through a struct protoent, and frees all the internal
structures.  */
static void
free_protoent (struct protoent *pep)
{
  free (pep->p_name);
  char ** current = pep->p_aliases;
  while (current && *current)
    {
      free (*current);
      ++current;
    }
  free (pep->p_aliases);
  pep->p_name = NULL;
  pep->p_proto = 0;
  pep->p_aliases = NULL;
}

extern "C" void
cygwin_setprotoent (int stay_open)
{
  if (proto_file)
    fclose (proto_file);

  if (stay_open)
    proto_file = open_protocol_file ();

  free_protoent (&current_protoent);
  proto_read_pos = 0;
  syscall_printf ("setprotoent (%d)", stay_open);
}

extern "C" struct protoent *
cygwin_getprotoent (void)
{
  FILE *fd;

  if (proto_file)
    fd = proto_file;
  else
    {
      fd = open_protocol_file ();
      if (!fd)
	{
	  syscall_printf ("%p = getprotoent()", NULL);
	  return NULL;
	}
      fseek (fd, proto_read_pos, SEEK_SET);
    }
  free_protoent (&current_protoent);

  bool found = parse_protocol_line (fd, &current_protoent);
  if (!proto_file)
    {
      proto_read_pos = ftell (fd);
      fclose (fd);
    }

  struct protoent *result;
  if (found)
    result =  &current_protoent;
  else
    result =  NULL;

  syscall_printf ("%p = getprotoent()", result);
  return result;
}

extern "C" void
cygwin_endprotoent (void)
{
  if (proto_file)
    {
      fclose (proto_file);
      proto_file = NULL;
    }

  free_protoent (&current_protoent);
  proto_read_pos = 0;
  syscall_printf ("endprotoent ()");
}
@


1.10
log
@Throughout, update copyrights to reflect dates which correspond to main-branch
checkins.  Regularize copyright format.
@
text
@d3 1
a3 1
   Copyright 2002, 2003, 2007, 2008, 2010, 2011 Red Hat, Inc.
d118 1
a118 1
static const NO_COPY char *SPACE = " \t\n\r\f";
@


1.9
log
@	* netdb.cc (open_system_file): Avoid MS-DOS path warning.
@
text
@d3 1
a3 1
   Copyright 2002, 2003, 2007, 2010, 2011 Red Hat, Inc.
@


1.9.2.1
log
@Pull in changes from HEAD
@
text
@d3 1
a3 1
   Copyright 2002, 2003, 2007, 2008, 2010, 2011 Red Hat, Inc.
@


1.9.2.2
log
@	* cygwin.sc.in (.rdata): Add .rdata_cygwin_nocopy subsection.
	(.cygheap): Raise size to 3 Megs on x86_64.
	* dcrt0.cc (dll_crt0_0): Drop call to init_global_security.
	* dtable.cc (std_consts): Drop NO_COPY.
	* errno.cc (errmap): Drop NO_COPY, constify instead.
	(_sys_errlist): Drop NO_COPY.
	* fhandler_clipboard.cc (CYGWIN_NATIVE): Ditto.
	* fhandler_console.cc (keytable): Drop NO_COPY, constify instead.
	* grp.cc (null_ptr): Make NO_COPY_RO.
	* heap.cc (eval_start_address): Fix comment.
	* localtime.cc (wildabbr): Make NO_COPY_RO.
	(gmt): Ditto.
	* miscfuncs.cc (case_folded_lower): Drop NO_COPY.
	(case_folded_upper): Ditto.
	(isalpha_array): Ditto.
	(nice_to_winprio): Ditto for priority.
	(class thread_allocator): New class to allocate thread stack on x86_64.
	(thr_alloc): Define global NO_COPY instant of thread_allocator.
	(CygwinCreateThread): Call thr_alloc.alloc on x86_64 to reserve stack.
	* net.cc (errmap): Drop NO_COPY, constify instead.
	(host_errmap): Ditto.
	* netdb.cc (SPACE): Drop NO_COPY.
	* sec_helper.cc (null_sdp): Static NO_COPY_RO definition of null SD.
	(sec_none): Define NO_COPY_RO, define content statically.
	(sec_none_nih): Ditto.
	(sec_all): Ditto.
	(sec_all_nih): Ditto.
	(get_null_sd): Remove.
	(init_global_security): Remove.
	* security.cc (file_mapping): Define NO_COPY_RO.
	(check_registry_access): Ditto for reg_mapping.
	* spawn.cc (exe_suffixes): Drop NO_COPY, constify instead.
	(dll_suffixes): Drop unused, disabled definition and comment.
	* strsig.cc (sys_sigabbrev): Drop NO_COPY_INIT.
	(sys_siglist): Ditto.
	* syscalls.cc (def_shells): Drop NO_COPY.
	* winsup.h (NO_COPY_RO): Define to place variable in
	.rdata_cygwin_nocopy section.
	(init_global_security): Drop declaration.
@
text
@d3 1
a3 1
   Copyright 2002, 2003, 2007, 2008, 2010, 2011, 2013 Red Hat, Inc.
d118 1
a118 1
static const char *SPACE = " \t\n\r\f";
@


1.8
log
@	* autoload.cc (LoadDLLprime): Change dllname storage to string16.
	(struct dll_info): Convert name to WCHAR.
	(std_dll_init): Load DLLs with full path to windows system directory.
	Add hint to Microsoft security advisory.
	* dcrt0.cc (init_windows_system_directory): New function.
	(dll_crt0_0): Call init_windows_system_directory first.
	* exceptions.cc (windows_system_directory): Move to globals.cc.
	(windows_system_directory_length): Ditto.
	(events_init): Drop code fetching windows_system_directory.
	* globals.cc (windows_system_directory): New global variable.
	(windows_system_directory_length): Ditto.
	* net.cc (load_ipv6_funcs): Use windows_system_directory rather than
	GetSystemDirectoryW.
	* netdb.cc (open_system_file): Ditto.  Simplify debug output.
@
text
@d3 1
a3 1
   Copyright 2002, 2003, 2007, 2010 Red Hat, Inc.
d15 1
d31 1
@


1.7
log
@Remove unneeded header files from source files throughout.
@
text
@d3 1
a3 1
   Copyright 2002, 2003, 2007 Red Hat, Inc.
d30 2
a31 3
  if (!GetSystemDirectory (win32_name, MAX_PATH))
    return NULL;
  strcat (win32_name, "\\drivers\\etc\\");
a32 1
  debug_printf ("netdb file to open %s", win32_name);
d34 1
a34 1
  debug_printf ("handle to netdb file %p", result);
@


1.6
log
@	* fhandler_tty.cc (fhandler_tty_slave::open): Use MAX_PATH instead of
	CYG_MAX_PATH for event name buffer size.
	(fhandler_pty_master::setup): Use MAX_PATH instead of CYG_MAX_PATH for
	mutex name buffer size.
	* netdb.cc: Drop old comment.
	(open_system_file): Set path buffer size to MAX_PATH instead of
	CYG_MAX_PATH.  Drop conversion to posix path.  Open file using win32
	path.

	Fix typo in ChangeLog.
@
text
@a11 2
#include <windows.h>
#include <sys/cygwin.h>
a12 1
#include <string.h>
@


1.5
log
@	* Makefile.in (DLL_IMPORTS): Add libntdll.a.
	* autoload.cc: Remove all symbols from advapi32.dll, kernel32.dll and
	ntdll.dll available on all platforms since NT4.

	Throughout remove all usage of wincap.is_winnt.
	* dcrt0.cc (dll_crt0_0): Remove call to mmap_init.
	* fhandler.h (class fhandler_base): Remove has_changed flag.
	(fhandler_disk_file::touch_ctime): Remove declaration.
	(fhandler_disk_file::readdir_9x): Ditto.
	(fhandler_disk_file::touch_ctime): Remove.
	(fhandler_disk_file::readdir_9x): Remove.
	(fhandler_disk_file::closedir): Call NtClose instead of CloseHandle.
	* mmap.cc: Throughout call CreateMapping and MapView directly.
	(VirtualProt9x): Remove.
	(VirtualProtNT): Remove.
	(VirtualProtEx9x): Remove.
	(VirtualProtExNT): Remove.
	(VirtualProtect): Remove define.
	(VirtualProtectEx): Remove define.
	(CreateMapping9x): Remove.
	(CreateMappingNT): Rename to CreateMapping.
	(MapView9x): Remove.
	(MapViewNT): Rename to MapView.
	(struct mmap_func_t): Remove definition.
	(mmap_funcs_9x): Remove.
	(mmap_funcs_nt): Remove.
	(mmap_func): Remove.
	(mmap_init): Remove.
	* net.cc (getdomainname): Drop comment. Use NT4 registry key only.
	(get_95_ifconf): Remove.
	* pinfo.cc (winpids::enumNT): Rename to winpids::enum_processes.
	(winpids::enum9x): Remove.
	(winpids::set): Just call enum_processes directly.
	(winpids::enum_init): Ditto.
	* pinfo.h (class winpids): Drop enum_processes pointer.  Rename
	enumNT to enum_processes.  Drop enum9x declaration.  Drop initialization
	of enum_processes throughout.
	* registry.cc (get_registry_hive_path): Just create NT key.
	(load_registry_hive): Only load NT specific file.
	* syscalls.cc (unlink_9x): Remove.
	(unlink): Just call unlink_nt.
	* wincap.cc: Remove is_winnt flag throughout.
	* wincap.h: Ditto.
	* winsup.h: Remove mmap_init declaration.
@
text
@a25 3
 This routine will try to locate these files based on system type.
 Currently the only distinction made is between NT and non-NT systems.

d30 2
a31 2
  char win32_name[CYG_MAX_PATH];
  char posix_name[CYG_MAX_PATH];
d33 1
a33 1
  if (!GetSystemDirectory (win32_name, CYG_MAX_PATH))
a36 1
  cygwin_conv_to_full_posix_path (win32_name, posix_name);
d38 1
a38 1
  FILE *result = fopen (posix_name, "rt");
@


1.4
log
@2003-11-11  Robert Collins <rbtcollins@@hotmail.com>
	    Ron Parker <rdparker@@butlermfg.com>

	* bsdlib.cc: Update throughout to use CYG_MAX_PATH rather than MAX_PATH.
	* cygheap.h: Ditto.
	* dcrt0.cc: Ditto.
	* delqueue.cc: Ditto.
	* dlfcn.cc: Ditto.
	* dll_init.cc: Ditto.
	* dll_init.h: Ditto.
	* dtable.cc: Ditto.
	* environ.cc: Ditto.
	* environ.h: Ditto.
	* exceptions.cc: Ditto.
	* external.cc: Ditto.
	* fhandler_disk_file.cc: Ditto.
	* fhandler_proc.cc: Ditto.
	* fhandler_process.cc: Ditto.
	* fhandler_raw.cc: Ditto.
	* fhandler_registry.cc: Ditto.
	* fhandler_socket.cc: Ditto.
	* fhandler_virtual.cc: Ditto.
	* miscfuncs.cc: Ditto.
	* mmap.cc: Ditto.
	* netdb.cc: Ditto.
	* path.cc: Ditto.
	* path.h: Ditto.
	* pinfo.cc: Ditto.
	* pinfo.h: Ditto.
	* pthread.cc: Ditto.
	* registry.cc: Ditto.
	* shared.cc: Ditto.
	* shared_info.h: Ditto.
	* smallprint.c: Ditto.
	* spawn.cc: Ditto.
	* strace.cc: Ditto.
	* syscalls.cc: Ditto.
	* thread.h: Ditto.
	* uinfo.cc: Ditto.
	* winsup.h: Ditto.
	* include/limits.h: Ditto.
	* include/cygwin/config.h: Ditto.
	* include/sys/param.h: Ditto.
@
text
@d3 1
a3 1
   Copyright 2002 Red Hat, Inc.
d35 4
a38 12
  if (wincap.is_winnt ())
    {
      if (!GetSystemDirectory (win32_name, CYG_MAX_PATH))
	return NULL;
      strcat (win32_name, "\\drivers\\etc\\");
    }
  else
    {
      if (!GetWindowsDirectory (win32_name, CYG_MAX_PATH))
	return NULL;
      strcat (win32_name, "\\");
    }
@


1.3
log
@	* netdb.cc: Remove strtok_r comment.
@
text
@d33 2
a34 2
  char win32_name[MAX_PATH];
  char posix_name[MAX_PATH];
d37 1
a37 1
      if (!GetSystemDirectory (win32_name, MAX_PATH))
d43 1
a43 1
      if (!GetWindowsDirectory (win32_name, MAX_PATH))
@


1.2
log
@	* netdb.cc (parse_alias_list, parse_services_line)
	(parse_protocol_line): Change strtok calls to strtok_r.
@
text
@d136 1
a136 9
char** structure terminated by a NULL.

N.B. This routine relies on side effects due to the nature of
strtok_r().  strtok_r() initially takes a char * pointing to the start of
a line, and then NULL to indicate continued processing.  strtok_r() does
not provide a mechanism for getting pointer to the unprocessed portion
of a line.  Alias processing is done part way through a line after
strtok_r().  This routine relies on further calls to strtok_r(), passing
NULL as the first parameter, returning alias names from the line. */
@


1.1
log
@* netdb.cc: New file.
* Makeile.in (DLL_OFILES): Add reference to the new netdb.cc file.
* cygwin.din : Add new aliased exports for service and protocol enumerations in
netdb.cc.
@
text
@d139 2
a140 2
strtok().  strtok() initially takes a char * pointing to the start of
a line, and then NULL to indicate continued processing.  strtok() does
d143 1
a143 1
strtok().  This routine relies on further calls to strtok(), passing
d146 1
a146 1
parse_alias_list (char ***aliases)
d156 1
a156 1
  alias = strtok (NULL, SPACE);
d170 1
a170 1
      alias = strtok (NULL, SPACE);
d204 1
a204 1
      char *name, *port, *protocol;
d207 1
a207 1
      name = strtok (line, SPACE);
d213 1
a213 1
      port = strtok (NULL, SPACE);
d223 1
a223 1
      parse_alias_list (& sep->s_aliases);
d325 1
a325 1
      char *name, *protocol;
d328 1
a328 1
      name = strtok (line, SPACE);
d334 1
a334 1
      protocol = strtok (NULL, SPACE);
d340 1
a340 1
      parse_alias_list (& pep->p_aliases);
@

