head	1.28;
access;
symbols
	cygwin-1_7_35-release:1.28
	cygwin-1_7_34-release:1.28
	cygwin-1_7_33-release:1.27
	cygwin-1_7_32-release:1.27
	cygwin-1_7_31-release:1.27
	cygwin-1_7_30-release:1.27
	cygwin-1_7_29-release:1.27
	cygwin-1_7_29-release-branchpoint:1.27.0.2
	cygwin-pre-user-db:1.27
	cygwin-1_7_28-release:1.27
	cygwin-1_7_27-release:1.27
	cygwin-1_7_26-release:1.27
	cygwin-1_7_25-release:1.27
	cygwin-1_7_24-release:1.27
	cygwin-1_7_23-release:1.27
	cygwin-1_7_22-release:1.27
	cygwin-1_7_21-release:1.27
	cygwin-1_7_20-release:1.27
	cygwin-1_7_19-release:1.27
	cygwin-64bit-postmerge:1.26
	cygwin-64bit-premerge-branch:1.26.0.2
	cygwin-64bit-premerge:1.26
	cygwin-1_7_18-release:1.26
	post-ptmalloc3:1.24.2.2
	pre-ptmalloc3:1.24.2.2
	cygwin-1_7_17-release:1.25
	cygwin-64bit-branch:1.24.0.2
	cygwin-1_7_16-release:1.24
	cygwin-1_7_15-release:1.23
	cygwin-1_7_14_2-release:1.23
	cygwin-1_7_14-release:1.23
	cygwin-1_7_12-release:1.23
	cygwin-1_7_11-release:1.22
	cygwin-1_7_10-release:1.21
	signal-rewrite:1.19.0.2
	pre-notty:1.19
	cygwin-1_7_9-release:1.16
	cv-post-1_7_9:1.16.0.2
	cygwin-1_7_8-release:1.16
	cygwin-1_7_7-release:1.14
	cygwin-1_7_5-release:1.11
	cygwin-1_7_4-release:1.11
	cygwin-1_7_3-release:1.11
	cygwin-1_7_2-release:1.11
	fifo_doover3:1.10.0.2
	cygwin-1_7_1-release:1.10
	prefifo:1.9
	cv-branch-2:1.5.0.2;
locks; strict;
comment	@ * @;


1.28
date	2014.11.27.16.49.41;	author corinna;	state Exp;
branches;
next	1.27;

1.27
date	2013.04.24.10.16.12;	author corinna;	state Exp;
branches;
next	1.26;

1.26
date	2013.01.21.04.34.51;	author cgf;	state Exp;
branches;
next	1.25;

1.25
date	2012.08.14.09.49.25;	author corinna;	state Exp;
branches;
next	1.24;

1.24
date	2012.06.03.16.46.53;	author corinna;	state Exp;
branches
	1.24.2.1;
next	1.23;

1.23
date	2012.04.02.11.08.07;	author corinna;	state Exp;
branches;
next	1.22;

1.22
date	2012.02.16.11.02.05;	author corinna;	state Exp;
branches;
next	1.21;

1.21
date	2011.12.22.12.25.09;	author corinna;	state Exp;
branches;
next	1.20;

1.20
date	2011.10.21.08.29.19;	author corinna;	state Exp;
branches;
next	1.19;

1.19
date	2011.06.06.05.02.11;	author cgf;	state Exp;
branches;
next	1.18;

1.18
date	2011.05.26.19.30.00;	author corinna;	state Exp;
branches;
next	1.17;

1.17
date	2011.05.24.15.09.08;	author corinna;	state Exp;
branches;
next	1.16;

1.16
date	2010.11.22.14.19.50;	author corinna;	state Exp;
branches;
next	1.15;

1.15
date	2010.09.21.16.32.22;	author corinna;	state Exp;
branches;
next	1.14;

1.14
date	2010.08.09.08.18.30;	author corinna;	state Exp;
branches;
next	1.13;

1.13
date	2010.04.26.13.48.03;	author corinna;	state Exp;
branches;
next	1.12;

1.12
date	2010.04.22.17.33.28;	author corinna;	state Exp;
branches;
next	1.11;

1.11
date	2010.01.12.14.47.46;	author corinna;	state Exp;
branches;
next	1.10;

1.10
date	2009.07.28.10.39.55;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2009.07.23.11.46.06;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2009.07.17.09.00.19;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2009.07.16.09.56.25;	author corinna;	state Exp;
branches;
next	1.6;

1.6
date	2009.06.30.21.18.43;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2009.05.14.03.25.45;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2009.05.04.09.16.42;	author corinna;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.29.20.32.08;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.03.05.12.21;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2008.12.25.15.55.31;	author cgf;	state Exp;
branches;
next	;

1.24.2.1
date	2012.08.14.09.54.31;	author corinna;	state Exp;
branches;
next	1.24.2.2;

1.24.2.2
date	2013.01.21.13.52.09;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.28
log
@	* mount.cc (mount_info::init): Take bool argument and allow to
	initialize mount table in two steps, system and user, depending on
	bool value.
	* mount.h (class mount_info): Align declaration of init function to
	above change.
	* shared.cc (user_info::initialize): Initialize mount table in two
	steps to allow internal_getpwsid to create valid POSIX paths from
	DOS paths given in AD.  Add comments.
	* uinfo.cc (cygheap_pwdgrp::get_home): Allow DOS paths in
	NSS_SCHEME_FREEATTR attributes.
	(cygheap_pwdgrp::get_shell): Ditto.
@
text
@/* mount.h: mount definitions.

   Copyright 1996, 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
   2008, 2009, 2010, 2011, 2012, 2013, 2014 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#ifndef _MOUNT_H
#define _MOUNT_H

enum disk_type
{
  DT_NODISK,
  DT_CDROM,
  DT_FLOPPY,
  DT_HARDDISK,
  DT_SHARE_SMB,
  DT_SHARE_NFS
};

disk_type get_disk_type (LPCWSTR);

/* Don't add new fs types without adding them to fs_names in mount.cc!
   Don't reorder without reordering fs_names in mount.cc! */
enum fs_info_type
{
  none = 0,
  fat,
  ntfs,
  refs,
  samba,
  nfs,
  netapp,
  cdrom,
  udf,
  csc_cache,
  sunwnfs,
  unixfs,
  mvfs,
  cifs,
  nwfs,
  ncfsd,
  afs,
  /* Always last. */
  max_fs_type
};

extern struct fs_names_t {
    const char *name;
    bool block_device;
} fs_names[];

#define IMPLEMENT_FS_FLAG(type) \
  bool is_##type (bool val) { if (val) status.fs_type = type; return val; } \
  bool is_##type () const   { return status.fs_type == type; }

class fs_info
{
  struct status_flags
  {
    ULONG flags;		/* Volume flags */
    ULONG samba_version;	/* Samba version if available */
    ULONG name_len;		/* MaximumComponentNameLength */
    fs_info_type fs_type;	/* Filesystem type */
    unsigned is_remote_drive		: 1;
    unsigned has_acls			: 1;
    unsigned hasgood_inode		: 1;
    unsigned caseinsensitive		: 1;
    unsigned has_buggy_open		: 1;
    unsigned has_buggy_reopen		: 1;
    unsigned has_buggy_fileid_dirinfo	: 1;
    unsigned has_buggy_basic_info	: 1;
    unsigned has_dos_filenames_only	: 1;
  } status;
  ULONG sernum;			/* Volume Serial Number */
  char fsn[80];			/* Windows filesystem name */

 public:
  void clear ()
  {
    memset (&status, 0 , sizeof status);
    sernum = 0UL;
    fsn[0] = '\0';
  }
  fs_info () { clear (); }

  IMPLEMENT_STATUS_FLAG (ULONG, flags)
  IMPLEMENT_STATUS_FLAG (ULONG, samba_version)
  IMPLEMENT_STATUS_FLAG (ULONG, name_len)
  IMPLEMENT_STATUS_FLAG (bool, is_remote_drive)
  IMPLEMENT_STATUS_FLAG (bool, has_acls)
  IMPLEMENT_STATUS_FLAG (bool, hasgood_inode)
  IMPLEMENT_STATUS_FLAG (bool, caseinsensitive)
  IMPLEMENT_STATUS_FLAG (bool, has_buggy_open)
  IMPLEMENT_STATUS_FLAG (bool, has_buggy_reopen)
  IMPLEMENT_STATUS_FLAG (bool, has_buggy_fileid_dirinfo)
  IMPLEMENT_STATUS_FLAG (bool, has_buggy_basic_info)
  IMPLEMENT_STATUS_FLAG (bool, has_dos_filenames_only)
  IMPLEMENT_FS_FLAG (fat)
  IMPLEMENT_FS_FLAG (ntfs)
  IMPLEMENT_FS_FLAG (refs)
  IMPLEMENT_FS_FLAG (samba)
  IMPLEMENT_FS_FLAG (nfs)
  IMPLEMENT_FS_FLAG (netapp)
  IMPLEMENT_FS_FLAG (cdrom)
  IMPLEMENT_FS_FLAG (udf)
  IMPLEMENT_FS_FLAG (csc_cache)
  IMPLEMENT_FS_FLAG (sunwnfs)
  IMPLEMENT_FS_FLAG (unixfs)
  IMPLEMENT_FS_FLAG (mvfs)
  IMPLEMENT_FS_FLAG (cifs)
  IMPLEMENT_FS_FLAG (nwfs)
  IMPLEMENT_FS_FLAG (ncfsd)
  IMPLEMENT_FS_FLAG (afs)
  fs_info_type what_fs () const { return status.fs_type; }
  bool got_fs () const { return status.fs_type != none; }

  ULONG serial_number () const { return sernum; }

  const char *fsname () const { return fsn[0] ? fsn : "unknown"; }

  bool __reg3 update (PUNICODE_STRING, HANDLE);
  bool inited () const { return !!status.flags; }
};

/* Mount table entry */

class mount_item
{
 public:
  /* FIXME: Nasty static allocation.  Need to have a heap in the shared
     area [with the user being able to configure at runtime the max size].  */
  /* Win32-style mounted partition source ("C:\foo\bar").
     native_path[0] == 0 for unused entries.  */
  char native_path[CYG_MAX_PATH];
  int native_pathlen;

  /* POSIX-style mount point ("/foo/bar") */
  char posix_path[CYG_MAX_PATH];
  int posix_pathlen;

  unsigned flags;

  void init (const char *dev, const char *path, unsigned flags);

  struct mntent *getmntent ();
  int build_win32 (char *, const char *, unsigned *, unsigned);
};

/* Warning: Decreasing this value will cause cygwin.dll to ignore existing
   higher numbered registry entries.  Don't change this number willy-nilly.
   What we need is to have a more dynamic allocation scheme, but the current
   scheme should be satisfactory for a long while yet.  */
#define MAX_MOUNTS 64

class reg_key;
struct device;

/* NOTE: Do not make gratuitous changes to the names or organization of the
   below class.  The layout is checksummed to determine compatibility between
   different cygwin versions. */
class mount_info
{
 public:
  int nmounts;
  mount_item mount[MAX_MOUNTS];

  static bool got_usr_bin;
  static bool got_usr_lib;
  static int root_idx;

  /* cygdrive_prefix is used as the root of the path automatically
     prepended to a path when the path has no associated mount.
     cygdrive_flags are the default flags for the cygdrives. */
  char cygdrive[CYG_MAX_PATH];
  size_t cygdrive_len;
  unsigned cygdrive_flags;
 private:
  int posix_sorted[MAX_MOUNTS];
  int native_sorted[MAX_MOUNTS];

 public:
  void init (bool);
  int add_item (const char *dev, const char *path, unsigned flags);
  int del_item (const char *path, unsigned flags);

  unsigned set_flags_from_win32_path (const char *path);
  int conv_to_win32_path (const char *src_path, char *dst, device&,
			  unsigned *flags = NULL);
  int conv_to_posix_path (PWCHAR src_path, char *posix_path,
			  int keep_rel_p);
  int conv_to_posix_path (const char *src_path, char *posix_path,
			  int keep_rel_p);
  struct mntent *getmntent (int x);

  int write_cygdrive_info (const char *cygdrive_prefix, unsigned flags);
  int get_cygdrive_info (char *user, char *system, char* user_flags,
			 char* system_flags);
  void cygdrive_posix_path (const char *src, char *dst, int trailing_slash_p);
  int get_mounts_here (const char *parent_dir, int,
		       PUNICODE_STRING mount_points,
		       PUNICODE_STRING cygd);

 private:
  void sort ();
  void mount_slash ();
  void create_root_entry (const PWCHAR root);

  bool from_fstab_line (char *line, bool user);
  bool from_fstab (bool user, WCHAR [], PWCHAR);

  int cygdrive_win32_path (const char *src, char *dst, int& unit);
};

class dos_drive_mappings
{
  struct mapping
  {
    mapping *next;
    size_t doslen;
    size_t ntlen;
    wchar_t *dospath;
    wchar_t *ntdevpath;
  };
  mapping *mappings;

public:
  dos_drive_mappings ();
  ~dos_drive_mappings ();
  wchar_t *fixup_if_match (wchar_t *path);
};
#endif
@


1.27
log
@	* autoload.cc (CreateSymbolicLink): Define.
	* environ.cc (set_winsymlinks): Set allow_winsymlinks.
	(parse_thing): Change "winsymlinks" to set by function.
	* globals.cc (enum winsym_t): Define.
	(allow_winsymlinks): Define as winsym_t.
	(ro_u_afs): New R/O Unicode string.
	* mount.cc (fs_info::update): Fix comment.  Handle AFS.
	(fs_names): Add "afs".
	* mount.h (enum fs_info_type): Add afs.
	(class fs_info): Implement afs.
	* path.cc (symlink): Drop third parameter in call to symlink_worker.
	(symlink_nfs): New function.
	(symlink_native): New function.
	(symlink_worker): Drop third argument.  Handle native symlink type by
	calling symlink_native.  Move code to handle NFS to symlink_nfs.  Fix
	formatting.  Slightly restructure code.
	* path.h (class path_conv): Add fs_is_afs method.
	(symlink_worker): Declare here.
	* security.h: Define privilege constants as unsigned int instead of as
	unsigned long.
	* syscalls.cc (mknod_worker): Set third parameter in symlink_worker
	call to WSYM_lnk.
	* winsup.h (symlink_worker): Drop declaration here.
@
text
@d4 1
a4 1
   2008, 2009, 2010, 2011, 2012, 2013 Red Hat, Inc.
d187 1
a187 1
  void init ();
@


1.26
log
@Throughout, change __attribute__ ((regparm (N))) to just __regN.  Throughout,
(mainly in fhandler*) start fixing gcc 4.7.2 mismatch between regparm
definitions and declarations.
* gendef: Define some functions to take @@ declaration to accommodate _regN
defines which use __stdcall.
* gentls_offsets: Define __regN macros as empty.
* autoload.cc (wsock_init): Remove unneeded regparm attribute.
* winsup.h (__reg1): Define.
(__reg2): Define.
(__reg3): Define.
* advapi32.cc (DuplicateTokenEx): Coerce some initializers to avoid warnings
from gcc 4.7.2.
* exceptions.cc (status_info): Declare struct to use NTSTATUS.
(cygwin_exception::dump_exception): Coerce e->ExceptionCode to NTSTATUS.
* fhandler_clipboard.cc (cygnativeformat): Redefine as UINT to avoid gcc 4.7.2
warnings.
(fhandler_dev_clipboard::read): Ditto.
@
text
@d47 1
d118 1
@


1.25
log
@	* mount.cc (fs_names): Add missing ReFS entry.  Change comment.
	* mount.h (enum fs_info_type): Add comment.
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2005,
   2006, 2007, 2008, 2009, 2010, 2011, 2012 Red Hat, Inc.
d124 1
a124 1
  bool update (PUNICODE_STRING, HANDLE) __attribute__ ((regparm (3)));
@


1.24
log
@	* globals.cc (ro_u_refs): New R/O unicode string.
	* mount.cc (fs_info::update): Recognize ReFS.
	* mount.h (enum fs_info_type): Add refs.
	(class fs_info): Add refs flag and accessor methods.
	* ntdll.h (RtlAddAccessAllowedAceEx): Declare.
	(RtlAddAccessDeniedAceEx): Declare.
	* path.h (path_conv::fs_is_refs): Define.
	* sec_helper.cc (_recycler_sd): New function to create security
	descriptors suitable for the recycler bin starting with Vista.
	* security.cc (add_access_allowed_ace): Use RtlAddAccessAllowedAceEx
	and drop code to set AceFlags explicitely.
	(add_access_denied_ace): Use RtlAddAccessDeniedAceEx and drop code to
	set AceFlags explicitely.
	* security.h (_recycler_sd): Declare.
	(recycler_sd): Define.
	* syscalls.cc (desktop_ini): Change formatting.
	(desktop_ini_ext): Define third line of recycler desktop.ini file
	since Vista,
	(try_to_bin): Handle ReFS just like NTFS.  Write Vista and later
	Recycler in all uppercase, just like shell32 does when recreating it.
	Fix comments to include ReFS.  Don't implicitely reuse object
	attributes from earlier NtOpenFile call, rather recreate it for safety.
	Use recycler_sd call when creating security descriptor for Recycler
	dirs and files on Vista and later.  Write third line of desktop.ini
	when on Vista and later.
@
text
@d27 2
@


1.24.2.1
log
@Pull in changes from HEAD
@
text
@a26 2
/* Don't add new fs types without adding them to fs_names in mount.cc!
   Don't reorder without reordering fs_names in mount.cc! */
@


1.24.2.2
log
@Pull in changes from HEAD
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
   2008, 2009, 2010, 2011, 2012, 2013 Red Hat, Inc.
d124 1
a124 1
  bool __reg3 update (PUNICODE_STRING, HANDLE);
@


1.23
log
@	* fhandler.h (fhandler_dev::open): Declare.
	(fhandler_dev::close): Declare.
	(fhandler_dev::fstat): Declare.
	(fhandler_dev::fstatvfs): Declare.
	(fhandler_cygdrive::fstatvfs): Declare.
	* fhandler_dev.cc (fhandler_dev::open): New method.
	(fhandler_dev::close): Ditto.
	(fhandler_dev::fstat): Ditto.
	(fhandler_dev::fstatvfs): Ditto.
	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Don't fill
	st_rdev.
	(fhandler_cygdrive::fstatvfs): New method.
	* path.h (path_conv::fs_got_fs): New method.
	* mount.h (fs_info::got_fs): Change type to bool, make public.
@
text
@d32 1
d102 1
@


1.22
log
@	* autoload.cc (NetUseGetInfo): Define.
	* fhandler_disk_file.cc (fhandler_cygdrive::opendir): Rename flptst
	to drive.  Call new get_disk_type function rather than is_floppy and
	check SMB drives with the NetUseGetInfo function.  Explain why.
	* mount.cc (get_disk_type): New function to evaluate disk type from
	native NT device name.
	(is_floppy): Remove.
	* mount.h (enum disk_type): Define.
	(get_disk_type): Declare.
	* path.h (is_floppy): Drop declaration.
@
text
@a76 1
  unsigned long got_fs () const { return status.fs_type != none; }
d114 1
@


1.21
log
@	* external.cc (cygwin_internal): Implement CW_ALLOC_DRIVE_MAP,
	CW_MAP_DRIVE_MAP, CW_FREE_DRIVE_MAP.
	* fhandler_process.cc: Include mount.h.
	(get_volume_path_names_for_volume_name): Move to mount.cc.
	(struct dos_drive_mappings): Ditto.
	* mount.cc (get_volume_path_names_for_volume_name): Move here.
	(dos_drive_mappings::dos_drive_mappings): Ditto.
	(dos_drive_mappings::fixup_if_match): Ditto.
	(dos_drive_mappings::~dos_drive_mappings): Ditto.
	* mount.h (class dos_drive_mappings): Declare her.
	* include/sys/cygwin.h (cygwin_getinfo_types): Add CW_ALLOC_DRIVE_MAP,
	CW_MAP_DRIVE_MAP, CW_FREE_DRIVE_MAP.
	* include/cygwin/version.h: Bump API minor number.
@
text
@d4 1
a4 1
   2006, 2007, 2008, 2009, 2010, 2011 Red Hat, Inc.
d15 12
@


1.20
log
@	* globals.cc (ro_u_ncfsd): New R/O unicode string.
	* mount.cc (fs_info::update): Check for "NcFsd" FS.  Set flags and
	change comments accordingly.
	(fs_names): Add entry for NcFsd FS.
	* mount.h (enum fs_info_type): Add ncfsd.
	(class fs_info): Add ncfsd flag and accessor methods.
	* path.h (class path_conv): Add fs_is_ncfsd method.
	* syscalls.cc (unlink_nt): Experimentally try delete-on-close on NcFsd
	in STATUS_CANNOT_DELETE case.
@
text
@d200 18
@


1.19
log
@whitespace elimination
@
text
@d4 1
a4 1
   2006, 2007, 2008, 2009, 2010 Red Hat, Inc.
d31 1
d101 1
@


1.18
log
@	* mount.h (MAX_MOUNTS): Raise to 64.
@
text
@d70 1
a70 1
    sernum = 0UL; 
@


1.17
log
@	* mount.cc (mount_info::conv_to_win32_path): Remove unused code.
	* mount.h (class mount_info): Remove sys_mount_table_counter member.
	* shared_info.h (class shared_info): Ditto.
	(CURR_SHARED_MAGIC): Update.
@
text
@d138 1
a138 1
#define MAX_MOUNTS 30
@


1.16
log
@	* mount.cc (NETAPP_IGNORE): Add FILE_PERSISTENT_ACLS.
	(FS_IS_NETAPP_DATAONTAP): Drop test for FILE_PERSISTENT_ACLS.
	(fs_info::update): Set filetype to ntfs in remote case, too.  Fix a
	couple of comments.  Add test for Netapps faking to be FAT.

	* mount.h (IMPLEMENT_FS_FLAG): Simplify definition and usage.
@
text
@a148 1
  DWORD sys_mount_table_counter;
@


1.15
log
@	* mount.h (class fs_info): Add has_buggy_reopen flag and accessor
	methods.
	* mount.cc (fs_info::update): Set has_buggy_reopen flag for NWFS.
	Add comment.
	* path.h (path_conv::get_object_attr) Make inline method.
	(path_conv::init_reopen_attr): New inline method.
	* path.cc (path_conv::get_object_attr): Remove.
	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Use
	path_conv::init_reopen_attr method to initialize OBJECT_ATTRIBUTE for
	reopening file.
	(fhandler_disk_file::fchmod): Ditto.
	(fhandler_base::utimens_fs): Ditto.
	(fhandler_disk_file::rewinddir): Ditto.
	* syscalls.cc (unlink_nt): Ditto.
@
text
@d40 3
a42 3
#define IMPLEMENT_FS_FLAG(func, flag) \
  bool func (bool val) { if (val) status.fs_type = flag; return val; } \
  bool func () const   { return status.fs_type == flag; }
d87 13
a99 13
  IMPLEMENT_FS_FLAG (is_fat, fat)
  IMPLEMENT_FS_FLAG (is_ntfs, ntfs)
  IMPLEMENT_FS_FLAG (is_samba, samba)
  IMPLEMENT_FS_FLAG (is_nfs, nfs)
  IMPLEMENT_FS_FLAG (is_netapp, netapp)
  IMPLEMENT_FS_FLAG (is_cdrom, cdrom)
  IMPLEMENT_FS_FLAG (is_udf, udf)
  IMPLEMENT_FS_FLAG (is_csc_cache, csc_cache)
  IMPLEMENT_FS_FLAG (is_sunwnfs, sunwnfs)
  IMPLEMENT_FS_FLAG (is_unixfs, unixfs)
  IMPLEMENT_FS_FLAG (is_mvfs, mvfs)
  IMPLEMENT_FS_FLAG (is_cifs, cifs)
  IMPLEMENT_FS_FLAG (is_nwfs, nwfs)
@


1.14
log
@	* fhandler_proc.cc: Add /proc/filesystems virtual file.
	(format_proc_filesystems): New function.
	* mount.cc (fs_names): Move to global scope. Redefine as array
	of { "name", block_device? } structs.
	(fillout_mntent): Use name member of fs_names.
	* mount.h (fs_names): New prototype.
@
text
@d57 1
d83 1
@


1.13
log
@	* mount.h (fs_info::inited): New inline method.
	* path.cc (path_conv::check): Clear filesystem info if following a
	symlink.  Use new fs_info::inited method to check if FS info is already
	available.
	(symlink_info::check): Drop fs_update_called.  Use fs_info::inited
	method instead.  Streamline test for leading space and trailing dot or
	space.  Add comments.
@
text
@d35 5
@


1.12
log
@	* mount.cc (GETVOLINFO_VALID_MASK): Drop FILE_SEQUENTIAL_WRITE_ONCE
	from mask.  Expand the comment a bit.
	(WIN_FAT_FLAGS): New define.
	(FS_IS_WINDOWS_FAT): New macro.
	(fs_info::update): Handle remote FS faking to be FAT.  Subsume under
	CIFS.  Check for NWFS and has_buggy_basic_info only for remote
	filesystems.  Add check for has_dos_filenames_only.
	* mount.h (class fs_info): Add has_dos_filenames_only status flag.
	Implement accessors.
	* path.cc (symlink_info::check): Rearrange variable definitions to
	clear them up.  Add a restart label to allow a clean restart within
	the method.  Add a check for broken filesystems only allowing DOS
	pathnames in case we encounter a STATUS_OBJECT_NAME_NOT_FOUND status.
	If all checks point to one of that, restart method with tweaked
	incoming path.  Add lengthy comments to explain what we do.
@
text
@d100 1
@


1.11
log
@	* globals.cc (ro_u_nwfs): New R/O unicode string.
	* mount.cc (fs_info::update): Check for NWFS filesystem.  Set
	has_buggy_basic_info, if so.  Add comment to explain why.
	(fillout_mntent): Add "nwfs" string to fs_names array.
	* mount.h (enum fs_info_type): Add nwfs.
	(class fs_info): Add has_buggy_basic_info status flag.  Add accessors
	for has_buggy_basic_info and is_nwfs.
	* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Accommodate
	filesystems with broken FileBasicInformation handling.
	* path.cc (symlink_info::check): Ditto.
	* path.h (path_conv::has_buggy_basic_info): Add method.
@
text
@d54 1
d79 1
@


1.10
log
@	* mount.h (enum fs_info_type): New type.
	(IMPLEMENT_FS_FLAG): New define.
	(class fs_info): Convert filesystem type status flags into an enum
	fs_info_type.  Add cifs FS.  Revert change to has_buggy_open and
	has_buggy_fileid_dirinfo.  Make them normal; status flags again.
	Implement is_FS functions using IMPLEMENT_FS_FLAG.
	* mount.cc (fs_info::update): Define MINIMAL_WIN_NTFS_FLAGS and
	FS_IS_WINDOWS_NTFS.  Add comment.  Only test remote filesystems
	for "NTFS" once.  Add is_cifs check using FS_IS_WINDOWS_NTFS.
	Set has_buggy_open flag for SUNWNFS.  Set has_buggy_fileid_dirinfo
	flag for UNIXFS and all cifs type filesystems.  Only check for
	caseinsensitivity once.
	(fillout_mntent): Create locale fs_names array.  Use for setting
	_my_tls.locals.mnt_type.
@
text
@d4 1
a4 1
   2006, 2007, 2008, 2009 Red Hat, Inc.
d30 1
d53 1
d77 1
d90 1
@


1.9
log
@	* mount.h (fs_info::fsn): New member.
	(fs_info::clear): Clear fsn.
	(fs_info::fsname): New read accessor for fsn.
	* mount.cc (fs_info::update): Fill in fsn member with lowercased
	filesystem name if filesystem is not well-known.  Fall back to
	"unknown" if filesystem name is missing.
	(fillout_mntent): Print filesystem name retrieved in fs_info::update
	rather than static string "unknown".
@
text
@d15 23
d42 4
a45 3
    ULONG flags;		  /* Volume flags */
    ULONG samba_version;	  /* Samba version if available */
    ULONG name_len;		  /* MaximumComponentNameLength */
d50 2
a51 18
    union
    {
      struct
      {
	unsigned is_fat			: 1;
	unsigned is_ntfs		: 1;
	unsigned is_samba		: 1;
	unsigned is_nfs			: 1;
	unsigned is_netapp 		: 1;
	unsigned is_cdrom		: 1;
	unsigned is_udf			: 1;
	unsigned is_csc_cache		: 1;
	unsigned is_sunwnfs		: 1;
	unsigned is_unixfs		: 1;
	unsigned is_mvfs		: 1;
      };
      unsigned long fs_flags;
    };
d53 3
a55 3
  ULONG sernum;
  char fsn[80];
  unsigned long got_fs () { return status.fs_flags; }
d73 16
a88 11
  IMPLEMENT_STATUS_FLAG (bool, is_fat)
  IMPLEMENT_STATUS_FLAG (bool, is_ntfs)
  IMPLEMENT_STATUS_FLAG (bool, is_samba)
  IMPLEMENT_STATUS_FLAG (bool, is_nfs)
  IMPLEMENT_STATUS_FLAG (bool, is_netapp)
  IMPLEMENT_STATUS_FLAG (bool, is_cdrom)
  IMPLEMENT_STATUS_FLAG (bool, is_udf)
  IMPLEMENT_STATUS_FLAG (bool, is_csc_cache)
  IMPLEMENT_STATUS_FLAG (bool, is_sunwnfs)
  IMPLEMENT_STATUS_FLAG (bool, is_unixfs)
  IMPLEMENT_STATUS_FLAG (bool, is_mvfs)
a90 2
  int has_buggy_open () const {return is_sunwnfs ();}
  int has_buggy_fileid_dirinfo () const {return is_unixfs ();}
@


1.8
log
@	* globals.cc: Improve comment on R/O UNICODE_STRINGs.
	* mount.h (class fs_info): Add is_mvfs bit.
	* mount.cc (fs_info::update): Recognize MVFS remote filesystem.
	(fillout_mntent): Reorder filesystem checks for speed.  Add
	mvfs, unixfs, and sunwnfs filesystem types.
	* path.h (class path_conv): Add fs_is_mvfs method.
	* path.cc (symlink_worker): On MVFS, always create symlinks as
	Windows shortcuts.  Explain why.
@
text
@d46 1
d50 6
a55 1
  void clear () { memset (&status, 0 , sizeof status); sernum = 0UL; }
d80 1
@


1.7
log
@	* globals.cc: Reorder constant UNICODE_STRINGs for clarity.
	* mount.h (fs_info::sttaus): Move filesystem type flags into
	substructure.  Add union to allow simple test for having set any
	one filesystem type flag.  Replace has_buggy_open flag with is_sunwnfs
	flag.  Replace has_buggy_fileid_dirinfo with is_unixfs flag.
	(fs_info::got_fs): New private method.
	(fs_info::has_buggy_open): New explicit implementation.
	(fs_info::has_buggy_fileid_dirinfo): Ditto.
	* mount.cc (fs_info::update): Optimize filesystem checks for speed.
	* winsup.h (IMPLEMENT_STATUS_FLAG): Change write accessor to return
	value just set.
@
text
@d40 1
d69 1
@


1.6
log
@* select.h: New file split from fhandler.h.
(select_record::select_record): Define do-nothing constructor for "new" to
avoid gratuitous zeroing.
(select_info): New base class.
(select_pipe_info): New class with methods for dealing with pipes.
(select_socket_info): New class with methods for dealing with sockets.
(select_serial_info): Dummy class for serial.
(select_mailslot_info): Dummy class for mailslots.
(select_stuff): Define device_specific_* as actual classes rather than void *.
* dtable.h (dtable::select_read): Accommodate return value change to 'bool' and
argument change to "select_stuff".
(dtable::select_write): Ditto.
(dtable::select_except): Ditto.
* dtable.cc (dtable::select_read): Accommodate return value change to 'bool'
and argument change to "select_stuff".
(dtable::select_write): Ditto.
(dtable::select_except): Ditto.
* fhandler.h: Excise select-related classes.
(fhandler_*::select_read): Change argument to select_stuff.
(fhandler_*::select_write): Ditto.
(fhandler_*::select_except): Ditto.
* select.cc (UNIX_FD_ZERO): Use memset rather than bzero.
(select_stuff::test_and_set): Change return type to bool.  Allocate
select_record on entry and let fhandler_*::select_* operate on the start.next
field of select_stuff.
(pipeinf): Delete.
(select_pipe_info::select_pipe_info): New constructor.  Allocates event for
controlling pipe waits.
(select_pipe_info::~select_pipe_info): New destructor.  Destroy event.  Stop
thread.
(select_pipe_info::add_watch_handle): New function.
(thread_pipe): Wait for the hEvent part of any overlapped pipes before peeking.
(start_thread_pipe): Don't allocate device_specific_pipe stuff here.  Assume
that it has been allocated earlier.
(pipe_cleanup): Rely on select_pipe_info destructor to clean up pipe
paraphenalia.
(fhandler_*::select_*): Derive select_record from new select_stuff argument.
(fhandler_pipe::select_*): Ditto.  Allocate pipe-specific field if not already
allocated.
(serialinf): Delete.
(thread_serial): serialinf -> select_serial_info.
(fhandler_base::ready_for_read): Rewrite to accommodate change in argument to
fhandler_*::select_*.
(socketinf): Delete.
(thread_socket): socketinf -> select_socket_info.
(mailslotinf): Delete.
(thread_mailslot): mailslotinf -> select_mailslot_info.
@
text
@a22 2
    unsigned has_buggy_open		: 1;
    unsigned has_buggy_fileid_dirinfo	: 1;
d26 17
a42 8
    unsigned is_fat			: 1;
    unsigned is_ntfs			: 1;
    unsigned is_samba			: 1;
    unsigned is_nfs			: 1;
    unsigned is_netapp 			: 1;
    unsigned is_cdrom			: 1;
    unsigned is_udf			: 1;
    unsigned is_csc_cache		: 1;
d45 2
a54 2
  IMPLEMENT_STATUS_FLAG (bool, has_buggy_open)
  IMPLEMENT_STATUS_FLAG (bool, has_buggy_fileid_dirinfo)
d66 2
d70 3
@


1.5
log
@cygwin ChangeLog
2009-05-13  Corinna Vinschen  <corinna@@vinschen.de>
	    Christopher Faylor  <me+cygwin@@cgf.cx>

	* mount.cc (mount_info::got_usr_bin): Define.
	(mount_info::got_usr_lib): Ditto.
	(mount_info::root_idx): Ditto.
	(mount_info::create_root_entry): Create root entry as immutable and
	flag as automatic.
	(mount_info::init): Remove "Huh?  No /etc/fstab..." warning.
	Unconditionally call from_fstab for user and system tables.  Fill in
	/usr/bin and /usr/lib if they have not been specified in /etc/fstab.
	(oopts): Alphabetize.  Add "override" option to allow overriding
	immutable mount points.
	(mount_info::add_item): Accommodate new MOUNT_IMMUTABLE flag intended
	for root mount.
	(mount_info::add_item): Detect "/usr/bin", "/usr/lib", and "/" and set
	appropriate global state.
	(fillout_mntent): Add ,auto to mount points added by Cygwin DLL.
	(mount): Remove masking of MOUNT_SYSTEM.  Allow user to shoot
	themselves.  Add comment.
	* mount.h (mount_info::got_usr_bin): Declare.
	(mount_info::got_usr_lib): Ditto.
	(mount_info::root_idx): Ditto.
	* include/sys/mount.h: Reformat enum.
	Add MOUNT_{OVERRIDE,IMMUTABLE,AUTOMATIC}.

doc ChangeLog
2009-05-13  Corinna Vinschen  <corinna@@vinschen.de>
	    Christopher Faylor  <me+cygwin@@cgf.cx>

	* pathnames.sgml (mount-table): Sort mount options and add override
	option.  Add description of root mount handling.

utils ChangeLog
2009-05-13  Corinna Vinschen  <corinna@@vinschen.de>
	    Christopher Faylor  <me+cygwin@@cgf.cx>

	* mount.cc (oopts): Sort.  Add override option.  Add dummy "auto"
	option for consistency.
	(mount_entries): Avoid adding auto-mounted entries to -m output.

	* utils.sgml: Sort mount options.  Add description of override option.
@
text
@d19 2
a20 2
    ULONG flags;                  /* Volume flags */
    ULONG samba_version;          /* Samba version if available */
@


1.4
log
@	* security.cc (set_file_sd): Drop using FILE_OPEN_FOR_RECOVERY flag in
	call to NtOpenFile.
	* exceptions.cc (open_stackdumpfile): Ditto in call to NtCreateFile.
	* fhandler.cc (fhandler_base::open): Ditto.  Simplify setting
	create_options.

	* mount.cc (fs_info::update): Recognize offline storage.
	(fillout_mntent): Report UDF and offline storage.
	* mount.h (class fs_info): Add is_csc_cache status flag.
@
text
@d107 4
@


1.3
log
@	* fhandler_disk_file.cc (fhandler_disk_file::readdir): Fix inode number
	evaluation for faked "." entry.

	* mount.cc (fs_info::update): Move setting of is_cdrom after checking
	for caseinsensitivity.  Recognize UDF in is_cdrom case and set
	caseinsensitive flag according to UDF brokenness determined by OS.
	Add comment to explain why.
	* mount.h (class fs_info): Add is_udf status flag.
	* path.cc (symlink_info::check): Add workaround for UDF bug in
	terms of casesensitivity on certain OSes.
	* wincap.h (wincaps::has_broken_udf): New element.
	(wincaps::has_broken_udf): New element
@
text
@d35 1
d58 1
@


1.2
log
@Remove unneeded header files from source files throughout.  Update copyrights
where appropriate.
* globals.cc: New file for generic global variables.
* mkglobals_h: New file to generate globals.h.
* mkstatic: New Script used to build a (currently non-working) static
libcygwin_s.a.
* Makefile.in: Add unused rule to build a non-working libcygwin_s.a.
(DLL_OFILES): Add globals.o.  Make all objects rely on globals.h.
(globals.h): New target.  Generate globals.h.
* cygtls.h: Honor new CYGTLS_HANDLE define to control when the HANDLE operator
is allowed in _cygtls.
* dcrt0.cc: Move most globals to globals.cc.
* init.cc: Ditto.
* environ.cc (strip_title_path): Remove now-unneeded extern.
* fhandler_serial.cc (fhandler_serial::open): Ditto.
* pinfo.cc: Ditto.
(commune_process): Ditto.
* shared.cc: Ditto.
* glob.cc: Ditto.
* strace.cc: Ditto.
* exceptions.cc: Define CYGTLS_HANDLE before including winsup.h.
* path.cc (stat_suffixes): Move here.
* security.h: Add forward class path_conv declaration.
* smallprint.cc (__small_vsprintf): Make a true c++ function.
(__small_sprintf): Ditto.
(small_printf): Ditto.
(console_printf): Ditto.
(__small_vswprintf): Ditto.
(__small_swprintf): Ditto.
* spawn.cc (spawn_guts): Remove _stdcall decoration in favor of regparm.
(hExeced): Move to globals.cc
* strfuncs.cc (current_codepage): Ditto.
(active_codepage): Ditto.
* sync.cc (lock_process::locker): Move here from dcrt0.cc.
* syscalls.cc (stat_suffixes): Move to path.cc.
* tty.cc (tty::create_master): Uncapitalize fatal warning for consistency.
* winsup.h: Include globals.h to declare most of the grab bag list of globals
which were previously defined here.
* mount.h: Move USER_* defines back to shared_info.h.
* speclib: Force temporary directory cleanup.
@
text
@d34 1
d56 1
@


1.1
log
@* mount.cc: Change comment.
(smb_extended_info): Move here from path.cc.
(fs_info::update): Ditto.
(mount_info::create_root_entry): Delay conversion to slashes and use passed in
buffer to figure out fs type.
* path.cc (smb_extended_info): Move.
(fs_info::update): Ditto.
* mount.h: New file.  Move mount information here.
* path.h: (fs_info::update): Move.
* shared_info.h (mount_item): Ditto.
@
text
@d4 1
a4 1
   2006, 2007, 2008 Red Hat, Inc.
a89 4
#define USER_VERSION	1	// increment when mount table changes and
#define USER_VERSION_MAGIC CYGWIN_VERSION_MAGIC (USER_MAGIC, USER_VERSION)
#define CURR_USER_MAGIC 0xb2232e71U

@

