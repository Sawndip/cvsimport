head	1.12;
access;
symbols
	cygwin-1_7_35-release:1.12
	cygwin-1_7_34-release:1.12
	cygwin-1_7_33-release:1.12
	cygwin-1_7_32-release:1.12
	cygwin-1_7_31-release:1.12
	cygwin-1_7_30-release:1.12
	cygwin-1_7_29-release:1.12
	cygwin-1_7_29-release-branchpoint:1.12.0.2
	cygwin-pre-user-db:1.12
	cygwin-1_7_28-release:1.12
	cygwin-1_7_27-release:1.12
	cygwin-1_7_26-release:1.12
	cygwin-1_7_25-release:1.12
	cygwin-1_7_24-release:1.12
	cygwin-1_7_23-release:1.12
	cygwin-1_7_22-release:1.12
	cygwin-1_7_21-release:1.12
	cygwin-1_7_20-release:1.12
	cygwin-1_7_19-release:1.12
	cygwin-64bit-postmerge:1.11
	cygwin-64bit-premerge-branch:1.11.0.2
	cygwin-64bit-premerge:1.11
	cygwin-1_7_18-release:1.11
	post-ptmalloc3:1.10.2.1
	pre-ptmalloc3:1.10.2.1
	cygwin-1_7_17-release:1.10
	cygwin-64bit-branch:1.10.0.2
	cygwin-1_7_16-release:1.10
	cygwin-1_7_15-release:1.9
	cygwin-1_7_14_2-release:1.9
	cygwin-1_7_14-release:1.9
	cygwin-1_7_12-release:1.9
	cygwin-1_7_11-release:1.9
	cygwin-1_7_10-release:1.9
	signal-rewrite:1.9.0.8
	pre-notty:1.9
	cygwin-1_7_9-release:1.9
	cv-post-1_7_9:1.9.0.6
	cygwin-1_7_8-release:1.9
	cygwin-1_7_7-release:1.9
	cygwin-1_7_5-release:1.9
	cygwin-1_7_4-release:1.9
	cygwin-1_7_3-release:1.9
	cygwin-1_7_2-release:1.9
	fifo_doover3:1.9.0.4
	cygwin-1_7_1-release:1.9
	prefifo:1.9
	cv-branch-2:1.9.0.2
	pre-ripout-set_console_state_for_spawn:1.9
	EOL_registry_mounts:1.9
	preoverlapped:1.9
	drop_9x_support_start:1.7
	cr-0x5f1:1.5.0.24
	cv-branch:1.5.0.22
	pre-ptymaster-archetype:1.5
	cr-0x3b58:1.5.0.20
	cr-0x5ef:1.5.0.18
	after-mmap-privanon-noreserve:1.5
	after-mmap-revamp:1.5
	before-mmap-revamp:1.5
	cgf-more-exit-sync:1.5
	post_wait_sig_exit:1.5
	pre_wait_sig_exit:1.5
	reparent-point:1.5
	noreparent:1.5.0.16
	cr-0x5e6:1.5.0.14
	cr-0x9e:1.5.0.12
	cr-0x9d:1.5.0.10
	cgf-deleteme:1.5.0.8
	pre-sigrewrite:1.5
	corinna-01:1.5
	cr-0x9c:1.5.0.6
	cr-0x9b:1.5.0.4
	cr-0x99:1.5
	Z-emcb-cygwin_daemon:1.5.0.2
	w32api-2_2:1.5
	mingw-runtime-2_4:1.5
	pre-cgf-merge:1.5
	cgf-dev-branch:1.5.0.52
	predaemon:1.5
	cygwin_daemon_merge_HEAD:1.5
	pregp02r1:1.5.0.30
	cygnus_cvs_20020108_pre:1.5
	Z-cygwin_daemon_merge-new_HEAD:1.5
	Z-cygwin_daemon_merge_HEAD:1.5
	cygwin_daemon:1.4.0.8;
locks; strict;
comment	@ * @;
expand	@o@;


1.12
date	2013.05.31.08.40.35;	author corinna;	state Exp;
branches;
next	1.11;

1.11
date	2013.01.21.04.38.30;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2012.07.06.13.52.18;	author corinna;	state Exp;
branches
	1.10.2.1;
next	1.9;

1.9
date	2007.06.20.09.28.47;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2007.06.14.16.02.32;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2007.01.21.22.54.05;	author corinna;	state Exp;
branches;
next	1.6;

1.6
date	2007.01.16.12.01.36;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.05.06.09.13;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2001.03.05.21.29.22;	author corinna;	state Exp;
branches
	1.4.8.1;
next	1.3;

1.3
date	2001.02.07.22.50.50;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.28.05.41.43;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.10.2.1
date	2013.01.21.13.52.13;	author corinna;	state Exp;
branches;
next	;

1.4.8.1
date	2002.01.04.03.56.15;	author rbcollins;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.12
log
@	* include/cygwin/if.h: Include cygwin/socket.h rather than sys/socket.h
	to avoid circular dependency resulting in bogus compile time warnings.
@
text
@/* cygwin/if.h

   Copyright 1996, 2000, 2001, 2007, 2012, 2013 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#ifndef _CYGWIN_IF_H_
#define _CYGWIN_IF_H_

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#include <sys/types.h>
#include <cygwin/socket.h>

/* Standard interface flags. */
#define IFF_UP           0x1             /* interface is up               */
#define IFF_BROADCAST    0x2             /* broadcast address valid       */
#define IFF_LOOPBACK     0x8             /* is a loopback net             */
#define IFF_POINTOPOINT  0x10            /* is a point-to-point interface */
#define IFF_NOTRAILERS   0x20            /* avoid use of trailers         */
#define IFF_RUNNING      0x40            /* resources allocated           */
#define IFF_NOARP        0x80            /* no ARP protocol               */
#define IFF_PROMISC      0x100           /* receive all packets           */
#define IFF_MULTICAST    0x1000          /* Supports multicast            */
#define IFF_LOWER_UP     0x10000         /* driver signals L1 up          */
#define IFF_DORMANT      0x20000         /* driver signals dormant        */

struct if_nameindex {
  unsigned  if_index;
  char     *if_name;
};

/* This is the structure expected by ioctl when the application requests
   the friendly adapter name (>= XP SP1).  ifru_data should point to such
   a structure when ioctl is called with SIOCGIFFRNDLYNAM. */
#define IFRF_FRIENDLYNAMESIZ 260

struct ifreq_frndlyname {
  int  ifrf_len;
  char ifrf_friendlyname[IFRF_FRIENDLYNAMESIZ];
};

/*
 * Interface request structure used for socket
 * ioctl's.  All interface ioctl's must have parameter
 * definitions which begin with ifr_name.  The
 * remainder may be interface specific.
 */
#define IFNAMSIZ        44
#define IF_NAMESIZE     IFNAMSIZ
#define IFHWADDRLEN     6

struct ifreq {
  union {
    char    ifrn_name[IFNAMSIZ];   /* Unique Windows Adapter name (A GUID) */
  } ifr_ifrn;

  union {
    struct  sockaddr ifru_addr;
    struct  sockaddr ifru_broadaddr;
    struct  sockaddr ifru_dstaddr;
    struct  sockaddr ifru_netmask;
    struct  sockaddr ifru_hwaddr;
    int     ifru_flags;
    int     ifru_metric;
    int     ifru_mtu;
    int     ifru_ifindex;
    /* The space must be preallocated by the application. */
    void   *ifru_data;
    /* Pad to sizeof sockaddr_in6 for further extensions. */
    char    __ifru_pad[28];
  } ifr_ifru;
};

#define ifr_name        ifr_ifrn.ifrn_name      /* interface name       */
#define ifr_addr        ifr_ifru.ifru_addr      /* address              */
#define ifr_broadaddr   ifr_ifru.ifru_broadaddr /* broadcast address    */
#define ifr_dstaddr     ifr_ifru.ifru_dstaddr   /* destination address  */
#define ifr_netmask     ifr_ifru.ifru_netmask   /* interface net mask   */
#define ifr_flags       ifr_ifru.ifru_flags     /* flags                */
#define ifr_hwaddr      ifr_ifru.ifru_hwaddr    /* MAC address          */
#define ifr_metric      ifr_ifru.ifru_metric    /* metric               */
#define ifr_mtu         ifr_ifru.ifru_mtu       /* mtu                  */
#define ifr_ifindex     ifr_ifru.ifru_ifindex   /* interface index      */
#define ifr_data        ifr_ifru.ifru_data      /* for use by interface */
#define ifr_frndlyname  ifr_ifru.ifru_data      /* Windows friendly if name */

/*
 * Structure used in SIOCGIFCONF request.
 * Used to retrieve interface configuration
 * for machine (useful for programs which
 * must know all networks accessible).
 */

struct ifconf
{
  int     ifc_len;                        /* size of buffer       */
  union
  {
    caddr_t ifcu_buf;
    struct  ifreq *ifcu_req;
  } ifc_ifcu;
};

#define ifc_buf ifc_ifcu.ifcu_buf               /* buffer address       */
#define ifc_req ifc_ifcu.ifcu_req               /* array of structures  */

#ifndef __INSIDE_CYGWIN_NET__
extern unsigned             if_nametoindex (const char *);
extern char                *if_indextoname (unsigned, char *);
extern struct if_nameindex *if_nameindex (void);
extern void                 if_freenameindex (struct if_nameindex *);
#endif

#ifdef __cplusplus
};
#endif /* __cplusplus */

#endif /* _CYGWIN_IF_H_ */
@


1.11
log
@Throughout, update copyrights to reflect dates which correspond to main-branch
checkins.  Regularize copyright format.
@
text
@d3 1
a3 1
   Copyright 1996, 2000, 2001, 2007, 2012 Red Hat, Inc.
d19 1
a19 1
#include <sys/socket.h>
@


1.10
log
@	In terms of network related functionality, rely on Winsock definitions
	as much as possible:
	* dtable.cc: Drop including sys/socket.h.
	* fhandler_procnet.cc: Change includes accordingly.
	* fhandler_socket.cc: Ditto.
	(fhandler_socket::listen): Avoid gcc error message initializing sin6.
	(LPFN_WSARECVMSG): Only define when building against w32api headers.
	* net.cc: Change includes accordingly.  Define USE_SYS_TYPES_FD_SET
	and __WSA_ERR_MACROS_DEFINED.  Define _INC_NETIOAPI temporarily and
	explain why.
	(struct _IP_ADAPTER_UNICAST_ADDRESS_LH): Only define when building
	against w32api headers.
	(struct _IP_ADAPTER_ADDRESSES_LH): Ditto.
	(SIO_GET_INTERFACE_LIST): Ditto.
	(ws_freeaddrinfo): Rename from freeaddrinfo so as not to collide with
	Winsock declaration.  Change througout.
	(ws_getaddrinfo): Ditto.
	(ws_getnameinfo): Ditto.
	* select.cc: Include netdb.h after defining USE_SYS_TYPES_FD_SET.
	* syslog.cc: Drop including netinet/in.h.  Define USE_SYS_TYPES_FD_SET
	and include ws2tcpip.h.
	* include/netdb.h (struct addrinfo): Don't define when building Cygwin.
	* include/cygwin/if.h: Don't declare if_xxx functions when building
	Cygwin.
	* include/cygwin/in.h: Disable most definitions when building Cygwin.
	* include/cygwin/socket.h: Disable sockaddr and sockaddr_storage
	definitions when building Cygwin.  Same for MCAST_INCLUDE/MCAST_EXCLUDE.
	* libc/inet_addr.c: Don't define __INSIDE_CYGWIN__ nor
	__INSIDE_CYGWIN_NET__.
	* libc/inet_network.c: Ditto.
	* libc/minires.h: Drop redundant inclusion of netdb.h.  Define
	__INSIDE_CYGWIN_NET__ only before including netdb.h and resolver
	headers.
@
text
@d3 1
a3 1
   Copyright 1996, 2001, 2007 Red Hat, Inc.
@


1.10.2.1
log
@Pull in changes from HEAD
@
text
@d3 1
a3 1
   Copyright 1996, 2000, 2001, 2007, 2012 Red Hat, Inc.
@


1.9
log
@	* include/cygwin/if.h (IFF_POINTOPOINT): Fix typo.
@
text
@d114 1
d119 1
@


1.8
log
@	* autoload.cc (GetIpForwardTable): Define.
	* fhandler_socket.cc (fhandler_socket::ioctl): Handle SIOCGIFDSTADDR.
	* net.cc (get_routedst): New static function to get destination
	address of point-to-point interfaces.
	(get_xp_ifconf): Handle SIOCGIFDSTADDR.
	(get_2k_ifconf): Ditto.
	(get_nt_ifconf): Ditto.
	(get_ifconf): Ditto.
	* include/asm/socket.h (SIOCGIFDSTADDR): Define.
	* include/cygwin/if.h (struct ifreq): Add ifru_dstaddr member.
	(ifr_dstaddr): Define.
	* include/cygwin/in.h: Cast ipv4 addresses correctly to in_addr_t in
	definitions.
@
text
@d25 1
a25 1
#define IFF_POINTTOPOINT 0x10            /* is a point-to-point interface */
@


1.7
log
@	* autoload.cc (WSAIoctl): Define.
	(SendARP): Define.
	* cygwin.din: Export if_freenameindex, if_indextoname, if_nameindex and
	if_nametoindex.
	* fhandler_procnet.cc: Drop including wchar.h.  Drop definitions of
	GAA_FLAG_INCLUDE_ALL_INTERFACES, IP_ADAPTER_UNICAST_ADDRESS_VISTA.
	(fhandler_procnet::exists): Check for has_gaa_prefixes.  Call
	get_adapters_addresses here.
	(fhandler_procnet::readdir): Ditto.
	(prefix): Move to net.cc.
	(fhandler_procnet::fill_filebuf): Call get_adapters_addresses here.
	Simplify allocation.  Use AdapterName rather than FriendlyName as
	interface name.  Use IfIndex if available, Ipv6IfIndex otherwise.
	(in6_are_prefix_equal): Move to net.cc.
	* fhandler_socket.cc: Define old SIOCGxxx values.
	(CONV_OLD_TO_NEW_SIO): Convert old SIOCGxxx value to new one.
	(struct __old_ifreq): Define old struct ifreq.
	(fhandler_socket::ioctl): Handle old SIOCGxxx values.  Handle new
	SIOCGIFFRNDLYNAM command.  Simplify copying ifreq data to user space.
	Call get_ifconf with additional SOCKET parameter.
	* net.cc (IP_ADAPTER_UNICAST_ADDRESS_LH): Define.
	(IP_ADAPTER_ADDRESSES_LH): Define.
	(SIO_GET_INTERFACE_LIST): Define.
	(sockaddr_in6_old): Define.
	(sockaddr_gen): Define.
	(INTERFACE_INFO): Define.
	(IN_LOOPBACK): Define.
	(in_are_prefix_equal): New static function.
	(ip_addr_prefix): New function, replaces prefix function, add AF_INET
	handling.
	(GAA_FLAG_INCLUDE_ALL_INTERFACES): Define.
	(get_adapters_addresses): New function.
	(WS_IFF_xxx): Define Winsock interface flag values.
	(convert_ifr_flags): New function to convert Winsock interface flag
	values to Cygwin interface flag values.
	(get_xp_ifconf): New get_ifconf implementation for XP SP1 and above.
	(get_2k_ifconf): Fix interface index.  Fix formatting.
	(get_nt_ifconf): Fix formatting.
	(get_95_ifconf): Ditto.
	(get_ifconf): Take additional SOCKET parameter.  Call get_xp_ifconf
	on XP SP1 and above.
	(if_nametoindex): New function.
	(if_indextoname): New function.
	(if_nameindex): New function.
	(if_freenameindex): New function.
	(in6_are_prefix_equal): Moved here from fhandler_procnet.cc.
	* wincap.cc (wincap_xp): Define has_gaa_prefixes as true by default.
	(wincapc::init): Assume has_osversioninfoex by default.  Call
	GetVersionEx with OSVERSIONINFOEX first.  Call with OSVERSIONINFO only
	if that fails.  Simplify NT4 case and try to avoid strcmp.  Check XP
	Service Pack using version.wServicePackMajor to avoid strcmp.
	* include/asm/socket.h (SIOCGIFFRNDLYNAM): Define.
	* include/cygwin/if.h: Fix formatting.
	(IFF_POINTTOPOINT): Define.
	(IFF_NOARP): Define.
	(IFF_LOWER_UP): Define.
	(IFF_DORMANT): Define.
	(struct if_nameindex): Define.
	(IFRF_FRIENDLYNAMESIZ): Define.
	(struct ifreq_frndlyname): Define.
	(IFNAMSIZ): Redefine as 44.
	(IF_NAMESIZE): Define.
	(struct ifreq): Redefine ifru_flags as int.  Define ifru_data.  Pad size
	to sizeof sockaddr_in6 for further extensions.
	(ifr_data): Define.
	(ifr_frndlyname): Define.
	(if_nametoindex): Declare.
	(if_indextoname): Declare.
	(if_nameindex): Declare.
	(if_freenameindex): Declare.
	* include/cygwin/version.h: Bump API minor number.
	(CYGWIN_VERSION_CHECK_FOR_OLD_IFREQ): Define check for old vs. new
	ifreq structure.
@
text
@d67 1
d84 1
@


1.6
log
@	* fhandler_socket.cc (fhandler_socket::ioctl): Handle SIOCGIFINDEX.
	* net.cc (get_2k_ifconf): Ditto.
	(get_nt_ifconf): Fake SIOCGIFINDEX.
	(get_95_ifconf): Ditto.
	(get_ifconf): Handle SIOCGIFINDEX.  Fake it for loopback on systems
	not supporting IP Helper Lib.
	* include/asm/socket.h (SIOCGIFINDEX): Define.
	* include/cygwin/if.h (struct ifreq): Add member for interface index.
	(ifr_ifindex): Define.
@
text
@d22 26
a47 7
#define IFF_UP          0x1             /* interface is up              */
#define IFF_BROADCAST   0x2             /* broadcast address valid      */
#define IFF_LOOPBACK    0x8             /* is a loopback net            */
#define IFF_NOTRAILERS  0x20            /* avoid use of trailers        */
#define IFF_RUNNING     0x40            /* resources allocated          */
#define IFF_PROMISC     0x100           /* receive all packets          */
#define IFF_MULTICAST   0x1000          /* Supports multicast           */
d55 3
d59 19
a77 19
struct ifreq
{
#define IFNAMSIZ        16
#define IFHWADDRLEN     6
	union
	{
		char    ifrn_name[IFNAMSIZ];            /* if name, e.g. "en0" */
	} ifr_ifrn;

	union {
		struct  sockaddr ifru_addr;
		struct  sockaddr ifru_broadaddr;
		struct  sockaddr ifru_netmask;
		struct  sockaddr ifru_hwaddr;
		short   ifru_flags;
		int     ifru_metric;
		int     ifru_mtu;
		int	ifru_ifindex;
	} ifr_ifru;
d89 2
d101 6
a106 6
	int     ifc_len;                        /* size of buffer       */
	union
	{
		caddr_t ifcu_buf;
		struct  ifreq *ifcu_req;
	} ifc_ifcu;
d108 1
d112 5
@


1.5
log
@Eliminate excess whitespace.
@
text
@d3 1
a3 1
   Copyright 1996, 2001 Red Hat, Inc.
d54 1
d66 1
a66 1

@


1.4
log
@        * include/a.out.h: Add copyright hint.
        * include/fcntl.h: Ditto.
        * include/lastlog.h: Ditto.
        * include/memory.h: Ditto.
        * include/mntent.h: Ditto.
        * include/paths.h: Ditto.
        * include/poll.h: Ditto.
        * include/syslog.h: Ditto.
        * include/termio.h: Ditto.
        * include/tzfile.h: Ditto.
        * include/arpa/inet.h: Ditto.
        * include/asm/byteorder.h: Ditto.
        * include/asm/socket.h: Ditto.
        * include/asm/types.h: Ditto.
        * include/cygwin/if.h: Ditto.
        * include/cygwin/mtio.h: Ditto.
        * include/cygwin/rdevio.h: Ditto.
        * include/cygwin/socket.h: Ditto.
        * include/net/if.h: Ditto.
        * include/netinet/in.h: Ditto.
        * include/netinet/in_systm.h: Ditto.
        * include/netinet/ip.h: Ditto.
        * include/netinet/ip_icmp.h: Ditto.
        * include/netinet/tcp.h: Ditto.
        * include/sys/cdefs.h: Ditto.
        * include/sys/cygwin.h: Ditto.
        * include/sys/ioctl.h: Ditto.
        * include/sys/mman.h: Ditto.
        * include/sys/mount.h: Ditto.
        * include/sys/mtio.h: Ditto.
        * include/sys/procfs.h: Ditto.
        * include/sys/resource.h: Ditto.
        * include/sys/smallprint.h: Ditto.
        * include/sys/socket.h: Ditto.
        * include/sys/strace.h: Ditto.
        * include/sys/syslog.h: Ditto.
        * include/sys/sysmacros.h: Ditto.
        * include/sys/termio.h: Ditto.
        * include/sys/termios.h: Ditto.
        * include/sys/uio.h: Ditto.
        * include/sys/un.h: Ditto.
        * include/sys/utsname.h: Ditto.
        * include/sys/vfs.h: Ditto.
        * include/sys/wait.h: Ditto.
        * regexp/regerror.c: Ditto.
        * regexp/regexp.h: Ditto.
        * regexp/regmagic.h: Ditto.
@
text
@d41 4
a44 4
        union
        {
                char    ifrn_name[IFNAMSIZ];            /* if name, e.g. "en0" */
        } ifr_ifrn;
d46 9
a54 9
        union {
                struct  sockaddr ifru_addr;
                struct  sockaddr ifru_broadaddr;
                struct  sockaddr ifru_netmask;
                struct  sockaddr ifru_hwaddr;
                short   ifru_flags;
                int     ifru_metric;
                int     ifru_mtu;
        } ifr_ifru;
d76 6
a81 6
        int     ifc_len;                        /* size of buffer       */
        union
        {
                caddr_t ifcu_buf;
                struct  ifreq *ifcu_req;
        } ifc_ifcu;
@


1.4.8.1
log
@Merged changes from HEAD
@
text
@d41 4
a44 4
	union
	{
		char    ifrn_name[IFNAMSIZ];            /* if name, e.g. "en0" */
	} ifr_ifrn;
d46 9
a54 9
	union {
		struct  sockaddr ifru_addr;
		struct  sockaddr ifru_broadaddr;
		struct  sockaddr ifru_netmask;
		struct  sockaddr ifru_hwaddr;
		short   ifru_flags;
		int     ifru_metric;
		int     ifru_mtu;
	} ifr_ifru;
d76 6
a81 6
	int     ifc_len;                        /* size of buffer       */
	union
	{
		caddr_t ifcu_buf;
		struct  ifreq *ifcu_req;
	} ifc_ifcu;
@


1.3
log
@        * autoload.cc: Add LoadDLLinitfunc for iphlpapi.dll.
        Add LoadDLLfuncEx statements for GetIfTable@@12 and GetIpAddrTable@@12.
        * fhandler_socket.cc (fhandler_socket::ioctl): Move variable
        definitions to the beginning of the function to allow better debugging.
        Add handling for SIOCGIFHWADDR, SIOCGIFMETRIC and SIOCGIFMTU.
        * net.cc: Include iphlpapi.h.
        (get_2k_ifconf): Rewritten. Uses IP Helper API now.
        (get_nt_ifconf): Add handling for SIOCGIFHWADDR, SIOCGIFMETRIC
        and SIOCGIFMTU.
        (get_95_ifconf): Ditto. Renamed from `get_9x_ifconf'.
        (get_ifconf): Name loopback `lo' instead of `lo0' as in Linux.
        Add handling for SIOCGIFHWADDR, SIOCGIFMETRIC and SIOCGIFMTU.
        Call `get_95_ifconf' only on Windows 95, `get_nt_ifconf' only
        on Windows NT < Service Pack 3, `get_2k_ifconf otherwise.
        * include/asm/socket.h: Add defines for SIOCGIFHWADDR, SIOCGIFMETRIC
        and SIOCGIFMTU.
        * include/cygwin/if.h: Add `ifr_hwaddr', `ifr_metric' and `ifr_mtu'.
        (struct ifreq): Add `ifru_hwaddr'.
@
text
@d1 10
@


1.2
log
@Whitespace cleanup.

* configure.in: Eliminate subdir stuff.
* configure: Regenerate.
* include/getopt.h (option): Make name field 'const'.
@
text
@d30 1
d40 1
d52 4
@


1.1
log
@Initial revision
@
text
@d27 1
a27 1
struct ifreq 
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
