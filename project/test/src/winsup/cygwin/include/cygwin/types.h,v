head	1.36;
access;
symbols
	cygwin-1_7_35-release:1.36
	cygwin-1_7_34-release:1.36
	cygwin-1_7_33-release:1.36
	cygwin-1_7_32-release:1.36
	cygwin-1_7_31-release:1.36
	cygwin-1_7_30-release:1.36
	cygwin-1_7_29-release:1.36
	cygwin-1_7_29-release-branchpoint:1.36.0.2
	cygwin-pre-user-db:1.36
	cygwin-1_7_28-release:1.36
	cygwin-1_7_27-release:1.36
	cygwin-1_7_26-release:1.36
	cygwin-1_7_25-release:1.36
	cygwin-1_7_24-release:1.36
	cygwin-1_7_23-release:1.36
	cygwin-1_7_22-release:1.36
	cygwin-1_7_21-release:1.36
	cygwin-1_7_20-release:1.36
	cygwin-1_7_19-release:1.36
	cygwin-64bit-postmerge:1.36
	cygwin-64bit-premerge-branch:1.35.0.6
	cygwin-64bit-premerge:1.35
	cygwin-1_7_18-release:1.35
	post-ptmalloc3:1.35.4.2
	pre-ptmalloc3:1.35.4.2
	cygwin-1_7_17-release:1.35
	cygwin-64bit-branch:1.35.0.4
	cygwin-1_7_16-release:1.35
	cygwin-1_7_15-release:1.35
	cygwin-1_7_14_2-release:1.35
	cygwin-1_7_14-release:1.35
	cygwin-1_7_12-release:1.35
	cygwin-1_7_11-release:1.35
	cygwin-1_7_10-release:1.35
	signal-rewrite:1.35.0.2
	pre-notty:1.35
	cygwin-1_7_9-release:1.32
	cv-post-1_7_9:1.32.0.2
	cygwin-1_7_8-release:1.32
	cygwin-1_7_7-release:1.32
	cygwin-1_7_5-release:1.32
	cygwin-1_7_4-release:1.32
	cygwin-1_7_3-release:1.32
	cygwin-1_7_2-release:1.32
	fifo_doover3:1.31.0.6
	cygwin-1_7_1-release:1.31
	prefifo:1.31
	cv-branch-2:1.31.0.4
	pre-ripout-set_console_state_for_spawn:1.31
	EOL_registry_mounts:1.31
	preoverlapped:1.31
	drop_9x_support_start:1.31
	cr-0x5f1:1.31.0.2
	cv-branch:1.30.0.6
	pre-ptymaster-archetype:1.30
	cr-0x3b58:1.30.0.4
	cr-0x5ef:1.30.0.2
	after-mmap-privanon-noreserve:1.30
	after-mmap-revamp:1.30
	before-mmap-revamp:1.30
	cgf-more-exit-sync:1.30
	post_wait_sig_exit:1.30
	pre_wait_sig_exit:1.30
	reparent-point:1.26
	noreparent:1.26.0.10
	cr-0x5e6:1.26.0.8
	cr-0x9e:1.26.0.6
	cr-0x9d:1.26.0.4
	cgf-deleteme:1.26.0.2
	pre-sigrewrite:1.24
	corinna-01:1.24
	cr-0x9c:1.21.0.6
	cr-0x9b:1.21.0.4
	cr-0x99:1.21
	Z-emcb-cygwin_daemon:1.21.0.2
	w32api-2_2:1.12
	mingw-runtime-2_4:1.12
	pre-cgf-merge:1.21
	cgf-dev-branch:1.12.0.2
	predaemon:1.5
	cygwin_daemon_merge_HEAD:1.5
	pregp02r1:1.4.0.2
	cygnus_cvs_20020108_pre:1.3
	Z-cygwin_daemon_merge-new_HEAD:1.10
	Z-cygwin_daemon_merge_HEAD:1.10
	cygwin_daemon:1.2.0.8;
locks; strict;
comment	@ * @;
expand	@o@;


1.36
date	2013.04.23.09.44.35;	author corinna;	state Exp;
branches;
next	1.35;

1.35
date	2011.04.05.00.53.17;	author yselkowitz;	state Exp;
branches
	1.35.4.1;
next	1.34;

1.34
date	2011.04.05.00.50.19;	author yselkowitz;	state Exp;
branches;
next	1.33;

1.33
date	2011.03.29.10.32.40;	author corinna;	state Exp;
branches;
next	1.32;

1.32
date	2010.02.26.09.36.21;	author corinna;	state Exp;
branches
	1.32.2.1;
next	1.31;

1.31
date	2006.07.14.21.45.00;	author cgf;	state Exp;
branches;
next	1.30;

1.30
date	2005.08.06.23.00.05;	author cgf;	state Exp;
branches
	1.30.6.1;
next	1.29;

1.29
date	2005.07.25.21.46.36;	author cgf;	state Exp;
branches;
next	1.28;

1.28
date	2005.02.23.13.12.42;	author corinna;	state Exp;
branches;
next	1.27;

1.27
date	2005.01.25.22.45.10;	author corinna;	state Exp;
branches;
next	1.26;

1.26
date	2003.12.04.09.37.55;	author corinna;	state Exp;
branches;
next	1.25;

1.25
date	2003.12.01.17.26.28;	author corinna;	state Exp;
branches;
next	1.24;

1.24
date	2003.11.06.10.46.49;	author corinna;	state Exp;
branches;
next	1.23;

1.23
date	2003.09.25.00.38.45;	author cgf;	state Exp;
branches;
next	1.22;

1.22
date	2003.09.25.00.37.18;	author cgf;	state Exp;
branches;
next	1.21;

1.21
date	2003.05.20.12.38.04;	author corinna;	state Exp;
branches;
next	1.20;

1.20
date	2003.05.11.12.50.18;	author corinna;	state Exp;
branches;
next	1.19;

1.19
date	2003.05.11.00.10.11;	author cgf;	state Exp;
branches;
next	1.18;

1.18
date	2003.05.03.18.14.29;	author corinna;	state Exp;
branches;
next	1.17;

1.17
date	2003.04.28.20.10.54;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2003.04.22.14.55.01;	author corinna;	state Exp;
branches;
next	1.15;

1.15
date	2003.04.01.16.11.41;	author corinna;	state Exp;
branches;
next	1.14;

1.14
date	2003.02.13.15.37.07;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2003.02.10.22.43.29;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2003.01.10.12.32.49;	author corinna;	state Exp;
branches
	1.12.2.1;
next	1.11;

1.11
date	2003.01.09.21.14.33;	author tpfaff;	state Exp;
branches;
next	1.10;

1.10
date	2002.06.06.15.35.09;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2002.06.03.17.44.09;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.22.12.47.54;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.22.10.33.39;	author corinna;	state Exp;
branches;
next	1.6;

1.6
date	2002.05.01.20.26.33;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2002.02.25.17.47.51;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.09.20.39.55;	author corinna;	state Exp;
branches;
next	1.3;

1.3
date	2001.11.05.06.09.13;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.12.04.04.53;	author rbcollins;	state Exp;
branches
	1.2.8.1;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.35.4.1
date	2012.08.13.20.04.38;	author corinna;	state Exp;
branches;
next	1.35.4.2;

1.35.4.2
date	2012.11.05.20.17.09;	author corinna;	state Exp;
branches;
next	;

1.32.2.1
date	2011.03.11.11.37.50;	author corinna;	state Exp;
branches;
next	;

1.30.6.1
date	2006.07.18.10.33.54;	author corinna;	state Exp;
branches;
next	;

1.12.2.1
date	2003.02.11.03.13.10;	author cgf;	state Exp;
branches;
next	1.12.2.2;

1.12.2.2
date	2003.02.14.03.03.29;	author cgf;	state Exp;
branches;
next	1.12.2.3;

1.12.2.3
date	2003.04.03.01.32.33;	author cgf;	state Exp;
branches;
next	1.12.2.4;

1.12.2.4
date	2003.05.10.17.20.55;	author cgf;	state Exp;
branches;
next	1.12.2.5;

1.12.2.5
date	2003.05.26.19.39.07;	author cgf;	state Exp;
branches;
next	;

1.2.8.1
date	2002.01.04.03.56.15;	author rbcollins;	state Exp;
branches;
next	1.2.8.2;

1.2.8.2
date	2002.02.28.12.53.30;	author rbcollins;	state Exp;
branches;
next	1.2.8.3;

1.2.8.3
date	2002.06.13.14.34.19;	author rbcollins;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.36
log
@	* Merge in cygwin-64bit-branch.
@
text
@/* types.h

   Copyright 2001, 2002, 2003, 2005, 2006, 2010, 2011 Red Hat Inc.
   Written by Robert Collins <rbtcollins@@hotmail.com>

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#ifndef _CYGWIN_TYPES_H
#define _CYGWIN_TYPES_H

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdint.h>
#include <endian.h>
#include <bits/wordsize.h>

#ifndef __timespec_t_defined
#define __timespec_t_defined
typedef struct timespec timespec_t;
#endif /*__timespec_t_defined*/

#ifndef __timestruc_t_defined
#define __timestruc_t_defined
typedef struct timespec timestruc_t;
#endif /*__timestruc_t_defined*/

#ifndef __off_t_defined
#define __off_t_defined
/* Based on the newlib definitions. */
#if __WORDSIZE == 64
typedef _off_t off_t;
#else
typedef _off64_t off_t;
#endif
#endif /*__off_t_defined*/

typedef __loff_t loff_t;

#ifndef __dev_t_defined
#define __dev_t_defined
typedef __int16_t __dev16_t;
typedef __uint32_t dev_t;
#endif /*__dev_t_defined*/

#ifndef __blksize_t_defined
#define __blksize_t_defined
typedef __int32_t blksize_t;
#endif /*__blksize_t_defined*/

#ifndef __blkcnt_t_defined
#define __blkcnt_t_defined
typedef __int32_t __blkcnt32_t;
typedef __int64_t blkcnt_t;
#endif /*__blkcnt_t_defined*/

#ifndef __fsblkcnt_t_defined
#define __fsblkcnt_t_defined
/* Keep as is.  32 bit on i386, 64 bit on x86_64. */
typedef unsigned long fsblkcnt_t;
#endif /* __fsblkcnt_t_defined */

#ifndef __fsfilcnt_t_defined
#define __fsfilcnt_t_defined
/* Keep as is.  32 bit on i386, 64 bit on x86_64. */
typedef unsigned long fsfilcnt_t;
#endif /* __fsfilcnt_t_defined */

#ifndef __uid_t_defined
#define __uid_t_defined
typedef unsigned short __uid16_t;
typedef __uint32_t uid_t;
#endif /*__uid_t_defined*/

#ifndef __gid_t_defined
#define __gid_t_defined
typedef unsigned short __gid16_t;
typedef __uint32_t gid_t;
#endif /*__gid_t_defined*/

#ifndef __ino_t_defined
#define __ino_t_defined
#ifndef __x86_64__
typedef __uint32_t __ino32_t;
#endif
typedef __uint64_t ino_t;
#endif /*__ino_t_defined*/

/* Generic ID type, must match at least pid_t, uid_t and gid_t in size. */
#ifndef __id_t_defined
#define __id_t_defined
typedef __uint32_t id_t;
#endif /* __id_t_defined */

#if defined (__INSIDE_CYGWIN__) && !defined (__x86_64__)
struct __flock32 {
	short	 l_type;	/* F_RDLCK, F_WRLCK, or F_UNLCK */
	short	 l_whence;	/* flag to choose starting offset */
	_off_t	 l_start;	/* relative offset, in bytes */
	_off_t	 l_len;		/* length, in bytes; 0 means lock to EOF */
	short	 l_pid;		/* returned with F_GETLK */
	short	 l_xxx;		/* reserved for future use */
};
#endif

struct flock {
	short	 l_type;	/* F_RDLCK, F_WRLCK, or F_UNLCK */
	short	 l_whence;	/* flag to choose starting offset */
	off_t	 l_start;	/* relative offset, in bytes */
	off_t	 l_len;		/* length, in bytes; 0 means lock to EOF */
	pid_t	 l_pid;		/* returned with F_GETLK */
};

#ifndef __key_t_defined
#define __key_t_defined
typedef long long key_t;
#endif /* __key_t_defined */

#ifndef __BIT_TYPES_DEFINED
#define __BIT_TYPES_DEFINED__ 1

#ifndef __vm_offset_t_defined
#define __vm_offset_t_defined
typedef unsigned long vm_offset_t;
#endif /*__vm_offset_t_defined*/

#ifndef __vm_size_t_defined
#define __vm_size_t_defined
typedef unsigned long vm_size_t;
#endif /*__vm_size_t_defined*/

#ifndef __vm_object_t_defined
#define __vm_object_t_defined
typedef void *vm_object_t;
#endif /* __vm_object_t_defined */

#ifndef __u_int8_t_defined
#define __u_int8_t_defined
typedef unsigned char u_int8_t;
#endif
#ifndef __u_int16_t_defined
#define __u_int16_t_defined
typedef __uint16_t u_int16_t;
#endif
#ifndef __u_int32_t_defined
#define __u_int32_t_defined
typedef __uint32_t u_int32_t;
#endif
#ifndef __u_int64_t_defined
#define __u_int64_t_defined
typedef __uint64_t u_int64_t;
#endif

#ifndef __register_t_defined
#define __register_t_defined
typedef __int32_t register_t;
#endif

#ifndef __addr_t_defined
#define __addr_t_defined
typedef char *addr_t;
#endif

#ifndef __mode_t_defined
#define __mode_t_defined
typedef unsigned mode_t;
#endif
#endif /*__BIT_TYPES_DEFINED*/

#if !defined(__INSIDE_CYGWIN__) || !defined(__cplusplus)

typedef struct __pthread_t {char __dummy;} *pthread_t;
typedef struct __pthread_mutex_t {char __dummy;} *pthread_mutex_t;

typedef struct __pthread_key_t {char __dummy;} *pthread_key_t;
typedef struct __pthread_attr_t {char __dummy;} *pthread_attr_t;
typedef struct __pthread_mutexattr_t {char __dummy;} *pthread_mutexattr_t;
typedef struct __pthread_condattr_t {char __dummy;} *pthread_condattr_t;
typedef struct __pthread_cond_t {char __dummy;} *pthread_cond_t;

  /* These variables are not user alterable. This means you!. */
typedef struct
{
  pthread_mutex_t mutex;
  int state;
}
pthread_once_t;
typedef struct __pthread_spinlock_t {char __dummy;} *pthread_spinlock_t;
typedef struct __pthread_rwlock_t {char __dummy;} *pthread_rwlock_t;
typedef struct __pthread_rwlockattr_t {char __dummy;} *pthread_rwlockattr_t;

#else

/* pthreads types */

typedef class pthread *pthread_t;
typedef class pthread_mutex *pthread_mutex_t;
typedef class pthread_key *pthread_key_t;
typedef class pthread_attr *pthread_attr_t;
typedef class pthread_mutexattr *pthread_mutexattr_t;
typedef class pthread_condattr *pthread_condattr_t;
typedef class pthread_cond *pthread_cond_t;
typedef class pthread_once pthread_once_t;
typedef class pthread_spinlock *pthread_spinlock_t;
typedef class pthread_rwlock *pthread_rwlock_t;
typedef class pthread_rwlockattr *pthread_rwlockattr_t;

/* semaphores types */
typedef class semaphore *sem_t;
#endif /* __INSIDE_CYGWIN__ */

/* this header needs the dev_t typedef */
#include <sys/sysmacros.h>

#ifdef __cplusplus
}
#endif

#endif /* _CYGWIN_TYPES_H */
@


1.35
log
@* include/cygwin/types.h: Move #include <sys/sysmacros.h> to
end of header so that it gets the dev_t typedef.
* include/sys/sysmacros.h (gnu_dev_major, gnu_dev_minor,
gnu_dev_makedev): Prototype and define as inline functions.
(major, minor, makedev): Redefine in terms of gnu_dev_*.
@
text
@d22 1
d36 4
d41 1
d48 2
a49 3
typedef short __dev16_t;
typedef unsigned long __dev32_t;
typedef __dev32_t dev_t;
d54 1
a54 1
typedef long blksize_t;
d59 2
a60 3
typedef long __blkcnt32_t;
typedef long long __blkcnt64_t;
typedef __blkcnt64_t  blkcnt_t;
d65 1
d71 1
d78 1
a78 2
typedef unsigned long  __uid32_t;
typedef __uid32_t uid_t;
d84 1
a84 2
typedef unsigned long  __gid32_t;
typedef __gid32_t gid_t;
d89 4
a92 3
typedef unsigned long __ino32_t;
typedef unsigned long long __ino64_t;
typedef __ino64_t ino_t;
d98 1
a98 1
typedef unsigned long id_t;
d101 1
a101 1
#if defined (__INSIDE_CYGWIN__)
a109 8

struct __flock64 {
	short	 l_type;	/* F_RDLCK, F_WRLCK, or F_UNLCK */
	short	 l_whence;	/* flag to choose starting offset */
	_off64_t l_start;	/* relative offset, in bytes */
	_off64_t l_len;		/* length, in bytes; 0 means lock to EOF */
	pid_t	 l_pid;		/* returned with F_GETLK */
};
@


1.35.4.1
log
@	* include/cygwin/stat.h (struct __stat64): Drop entirely in favor of
	struct stat.  Accommodate throughout Cygwin.
	* include/cygwin/types.h: Throughout, drop current, internal types
	used since Cygwin 1.5 with the base type they have been used for.
	Throughout, define types based on bitsize-specific types where
	appropriate.  Accommodate throughout Cygwin.
	* include/sys/cygwin.h: Drop __uid32_t and __gid32_t in favor of
	uid_t and gid_t.  Define uid/gid types based on bitsize-specific types.
	(struct external_pinfo): Accommodate above change.
	* cygtls.h (struct _local_storage): Drop unused members grp and
	namearray,
	* tlsoffsets.h: Regenerate.
	* devices.h (_dev_t): Drop definition.  Use dev_t throughout instead.
	* devices.cc: Regenerate.

	Probably temporary patch to drop unneeded functionality on x86_64:
	* fcntl.cc (_fcntl): Alias to fcntl64 on x86_64.
	* glob.cc (CYGWIN_gl_stat): Simplify on x86_64.
	* grp.cc (grp32togrp16): Don't define on x86_64.
	(getgrgid): Alias to getgrgid32 on x86_64.
	(getgrnam): Alias to getgrnam32 on x86_64.
	(getgrent): Alias to getgrent32 on x86_64.
	(getgroups): Alias to getgroups32 on x86_64.
	(initgroups): Alias to initgroups32 on x86_64.
	(setgroups): Alias to setgroups32 on x86_64.
	* mmap.cc (mmap): Alias to mmap64 on x86_64.
	* passwd.cc (getpwuid): Alias to getpwuid32 on x86_64.
	(getpwuid_r): Alias to getpwuid_r32 on x86_64.
	(getpwduid): Don't define on x86_64.
	* syscalls.cc (lseek): Alias to lseek64 on x86_64.
	(_lseek): Alias to lseek64 on x86_64.
	(chown): Alias to chown32 on x86_64.
	(lchown): Alias to lchown32 on x86_64.
	(fchown): Alias to fchown32 on x86_64.
	(stat64_to_stat32): Don't define on x86_64.
	(fstat): Alias to fstat64 on x86_64.
	(_fstat_r): Alias to _fstat64_r on x86_64.
	(stat): Alias to stat64 on x86_64.
	(_stat_r): Alias to _stat64_r on x86_64.
	(lstat): Alias to lstat64 on x86_64.
	(ftruncate): Alias to ftruncate64 on x86_64.
	(truncate): Alias to truncate64 on x86_64.
	(seteuid): Alias to seteuid32 on x86_64.
	(setuid): Alias to setuid32 on x86_64.
	(setreuid): Alias to setreuid32 on x86_64.
	(setegid): Alias to setegid32 on x86_64.
	(setgid): Alias to setgid32 on x86_64.
	(setregid): Alias to setregid32 on x86_64.
	* uinfo.cc (getuid): Alias to getuid32 on x86_64.
	(getgid): Alias to getgid32 on x86_64.
	(geteuid): Alias to geteuid32 on x86_64.
	(getegid): Alias to getegid32 on x86_64.
	* winsup.h (ILLEGAL_UID16): Don't define on x86_64.
	(ILLEGAL_GID16): Ditto.
	(uid16touid32): Don't declare on x86_64.
	(gid16togid32): Don't declare on x86_64.
@
text
@a34 4
/* Based on the newlib definitions. */
#ifdef __x86_64__
typedef _off_t off_t;
#else
a35 1
#endif
d42 3
a44 2
typedef __int16_t __dev16_t;
typedef __uint32_t dev_t;
d49 1
a49 1
typedef __int32_t blksize_t;
d54 3
a56 2
typedef __int32_t __blkcnt32_t;
typedef __int64_t blkcnt_t;
a60 1
/* Keep as is.  32 bit on i386, 64 bit on x86_64. */
a65 1
/* Keep as is.  32 bit on i386, 64 bit on x86_64. */
d72 2
a73 1
typedef __uint32_t uid_t;
d79 2
a80 1
typedef __uint32_t gid_t;
d85 3
a87 4
#ifndef __x86_64__
typedef __uint32_t __ino32_t;
#endif
typedef __uint64_t ino_t;
d93 1
a93 1
typedef __uint32_t id_t;
d96 1
a96 1
#if defined (__INSIDE_CYGWIN__) && !defined (__x86_64__)
d105 8
@


1.35.4.2
log
@	* fhandler_process.cc: Fix debug printf calls to be type safe.
	Add casts to avoid compiler warnings.
	(get_mem_values): Avoid using ULONG_MAX since it's NOT matching
	ULONG on 64 bit.
	* fhandler_procnet.cc (fhandler_procnet::open): Fix syscall_printf call
	to be type safe.
	(format_procnet_ifinet6): Add cast to avoid compiler warnings.
	* ntdll.h (struct _DEBUG_HEAP_BLOCK): Change Address to ULONG_PTR.

	* include/bits/wordsize.h: Fix __WORDSIZE definition for x86_64.
	Add __WORDSIZE_COMPAT32 as on Linux.
	* include/inttypes.h: Include bits/wordsize.h.  Use __WORDSIZE check
	where appropriate.
	* include/limits.h: Include bits/wordsize.h.
	(CHAR_BIT): Change definition to rely on default
	compiler definition.
	(LONG_BIT): Ditto.
	(WORD_BIT): Ditto.
	(__LONG_MAX__): Use __WORDSIZE check.
	(RTSIG_MAX): Ditto.
	* include/stdint.h: Include bits/wordsize.h.  Use __WORDSIZE check
	where appropriate.
	* include/cygwin/signal.h: Ditto.
	* include/cygwin/types.h: Ditto.

	* include/asm/byteorder.h (__ntohl): Use bswap instruction, available
	since i486.
	(__ntohs): Fix constraint to work on 64 bit CPU as well.
@
text
@a21 1
#include <bits/wordsize.h>
d36 1
a36 1
#if __WORDSIZE == 64
@


1.34
log
@* include/cygwin/types.h: Move multiple inclusion guards to
beginning and end of header.
@
text
@a19 1
#include <sys/sysmacros.h>
d221 3
@


1.33
log
@	* cygwin.din (pthread_spin_destroy): Export.
	(pthread_spin_init): Export.
	(pthread_spin_lock): Export.
	(pthread_spin_trylock): Export.
	(pthread_spin_unlock): Export.
	* posix.sgml (std-susv4): Add pthread_spin_destroy, pthread_spin_init,
	pthread_spin_lock, pthread_spin_trylock, pthread_spin_unlock.
	(std-notimpl): Remove pthread_spin_[...].
	* pthread.cc (pthread_spin_init): New function.
	* thread.cc (pthread_spinlock::is_good_object): New function.
	(pthread_mutex::pthread_mutex): Rearrange initializers to accommodate
	protected data in pthread_mutex.
	(pthread_spinlock::pthread_spinlock): New constructor.
	(pthread_spinlock::lock): New method.
	(pthread_spinlock::unlock): New method.
	(pthread_spinlock::init): New method.
	(pthread_spin_lock): New function.
	(pthread_spin_trylock): New function.
	(pthread_spin_unlock): New function.
	(pthread_spin_destroy): New function.
	* thread.h (PTHREAD_SPINLOCK_MAGIC): Define.
	(class pthread_mutex): Change access level of members shared with
	derived classes to protected.
	(pthread_mutex::set_shared): New protected method.
	(class pthread_spinlock): New class, derived class of pthread_mutex.
	* include/pthread.h (pthread_spin_destroy): Declare.
	(pthread_spin_init): Declare.
	(pthread_spin_lock): Declare.
	(pthread_spin_trylock): Declare.
	(pthread_spin_unlock): Declare.
	* include/cygwin/types.h (pthread_spinlock_t): New typedef.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
@
text
@d12 3
a19 3
#ifndef _CYGWIN_TYPES_H
#define _CYGWIN_TYPES_H

a220 1
#endif /* _CYGWIN_TYPES_H */
d225 2
@


1.32
log
@	Remove all traces of __CYGWIN_USE_BIG_TYPES__.

	* include/cygwin/config.h: Move Cygwin-specific build flags from
	newlib's sys/config.h here.  Add a comment.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003, 2005, 2006, 2010 Red Hat Inc.
d198 1
d214 1
@


1.32.2.1
log
@	* cygwin.din (pthread_spin_destroy): Export.
	(pthread_spin_init): Export.
	(pthread_spin_lock): Export.
	(pthread_spin_trylock): Export.
	(pthread_spin_unlock): Export.
	* posix.sgml (std-susv4): Add pthread_spin_destroy, pthread_spin_init,
	pthread_spin_lock, pthread_spin_trylock, pthread_spin_unlock.
	(std-notimpl): Remove pthread_spin_[...].
	* pthread.cc (pthread_spin_init): New function.
	* thread.cc (pthread_spinlock::is_good_object): New function.
	(pthread_mutex::pthread_mutex): Rearrange initializers to accommodate
	protected data in pthread_mutex.
	(pthread_spinlock::pthread_spinlock): New constructor.
	(pthread_spinlock::lock): New method.
	(pthread_spinlock::unlock): New method.
	(pthread_spinlock::init): New method.
	(pthread_spin_lock): New function.
	(pthread_spin_trylock): New function.
	(pthread_spin_unlock): New function.
	(pthread_spin_destroy): New function.
	* thread.h (PTHREAD_SPINLOCK_MAGIC): Define.
	(class pthread_mutex): Change access level of members shared with
	derived classes to protected.
	(pthread_mutex::set_shared): New protected method.
	(class pthread_spinlock): New class, derived class of pthread_mutex.
	* include/pthread.h (pthread_spin_destroy): Declare.
	(pthread_spin_init): Declare.
	(pthread_spin_lock): Declare.
	(pthread_spin_trylock): Declare.
	(pthread_spin_unlock): Declare.
	* include/cygwin/types.h (pthread_spinlock_t): New typedef.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003, 2005, 2006, 2010, 2011 Red Hat Inc.
a197 1
typedef struct __pthread_spinlock_t {char __dummy;} *pthread_spinlock_t;
a212 1
typedef class pthread_spinlock *pthread_spinlock_t;
@


1.31
log
@* include/cygwin/types.h: Update copyright.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003, 2005 Red Hat Inc.
a35 1
#ifdef __CYGWIN_USE_BIG_TYPES__
a36 3
#else
typedef _off_t off_t;
#endif
a44 1
#ifdef __CYGWIN_USE_BIG_TYPES__
a45 3
#else
typedef __dev16_t dev_t;
#endif
a56 1
#ifdef __CYGWIN_USE_BIG_TYPES__
a57 3
#else
typedef __blkcnt32_t  blkcnt_t;
#endif
a73 1
#ifdef __CYGWIN_USE_BIG_TYPES__
a74 3
#else
typedef __uid16_t uid_t;
#endif
a80 1
#ifdef __CYGWIN_USE_BIG_TYPES__
a81 3
#else
typedef __gid16_t gid_t;
#endif
a87 1
#ifdef __CYGWIN_USE_BIG_TYPES__
a88 3
#else
typedef __ino32_t ino_t;
#endif
a120 1
#ifdef __CYGWIN_USE_BIG_TYPES__
a121 4
#else
	short	 l_pid;		/* returned with F_GETLK */
	short	 l_xxx;		/* reserved for future use */
#endif
@


1.30
log
@* include/endian.h: Move everything into this file and define things more like
linux.
* include/cygwin/types.h: Include endian.h.
* include/sys/dirent.h: Define DT_* types and conversion macros.
* pinfo.cc (pinfo::init): Remove special handling for PID_ALLPIDS and execed
code, even though it probably still isn't quite right.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003 Red Hat Inc.
@


1.30.6.1
log
@	* Merge HEAD into cv-branch.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003, 2005 Red Hat Inc.
@


1.29
log
@* include/cygwin/types.h: Define loff_t.
@
text
@d22 1
@


1.28
log
@	* cygwin.din (fstatvfs): Export.
	(statvfs): Export.
	* syscalls.cc: Include sys/statvfs.h.
	(statvfs): New function.  Move statfs functionality here.
	(fstatvfs): New function.
	(statfs): Just call statvfs and copy structure.  Check validity of
	incoming struct statfs pointer.
	* include/cygwin/types.h (fsblkcnt_t): Define.
	(fsfilcnt_t): Define.
	* include/cygwin/version.h: Bump API minor version.
	* include/sys/statvfs.h: New file.
@
text
@d42 2
@


1.27
log
@	* cygwin.din: Export getpriority and setpriority.
	* fork.cc (fork_parent): Copy parent's nice value into child.
	* spawn.cc (spawn_guts): Ditto.
	* miscfuncs.cc (winprio_to_nice): New function.
	(nice_to_winprio): Ditto.
	* pinfo.cc (pinfo_init): If parent is not a Cygwin process, set
	default nice value according to current Win32 priority class.
	* pinfo.h (class _pinfo): Add nice member.
	* syscalls.cc (setpriority): New function, only implementing
	PRIO_PROCESS for now.
	(getpriority): Ditto.
	(nice): Just call setpriority.
	* wincap.h (wincaps::has_extended_priority_class): New element.
	* wincap.cc: Implement above element throughout.
	* winsup.h: Add prototypes for winprio_to_nice and nice_to_winprio.
	* include/limits.h (NZERO): New define.
	* include/cygwin/types.h (id_t): New datatype.
	* include/cygwin/version.h: Bump API minor version.
	* include/sys/resource.h: Add PRIO_XXX defines and prototypes for
	getpriority and setpriority.
@
text
@d69 10
@


1.26
log
@	* include/cygwin/types.h (struct __fcntl64): Fix datatype of l_start.
@
text
@d102 6
@


1.25
log
@	* Makefile.in (OBSOLETE_FUNCTIONS): Add fcntl.
	(NEW_FUNCTIONS): Add fcntl64.
	* cygwin.din: Export fcntl64.  Make fcntl being SIGFE.
	* fcntl.cc (fcntl_worker): New function.
	(fcntl64): New function.
	(_fcntl): Call fcntl_worker.  Convert 32 bit flock structure into
	64 bit flock structure and vice versa.
	* fhandler.cc (fhandler_base::lock): Change 2nd parameter to
	struct __flock64 *.
	* fhandler_disk_file.cc (fhandler_disk_file::lock): Ditto.  Rework
	to be 64 bit aware.
	* fhandler.h: Accomodate above method argument changes.
	* include/cygwin/types.h: Add struct __flock32 and __flock64.
	Define struct flock according to setting of __CYGWIN_USE_BIG_TYPES__.
	* include/cygwin/version.h: Bump API minor number.
@
text
@d115 1
a115 1
	_off_t	 l_start;	/* relative offset, in bytes */
@


1.24
log
@	* include/cygwin/types.h: Fix preprocessor guards for vm_offset_t and
	vm_size_t.  Add typedef for vm_object_t.
@
text
@d102 32
@


1.23
log
@correct incorrect checkin
@
text
@d110 1
a110 1
#ifndef __vm_offset_t
d115 1
a115 1
#ifndef __vm_size_t
d119 5
@


1.22
log
@* devices.cc: New file.
* devices.gperf: New file.
* devices.shilka: New file.
* cygwin-gperf: New file.
* cygwin-shilka: New file.
* fhandler_fifo.cc: New file.
* fhandler_nodevice.cc : New file.  Reorganize headers so that path.h precedes
fhandler.h throughout.  Remove device argument and unit arguments from fhandler
constructors throughout.  Remove pc arguments to fhandler functions and use
internal pc element instead, throughout.  Use dev element in pc throughout.
Use major/minor elements rather than units and device numbers previously in
fhandler class.  Use correct methods for fhandler file names rather than
directly accessing file name variables, throughout.
* Makefile.in (DLL_OFILES): Add devices.o, fhandler_fifo.o
* dcrt0.cc (dll_crt0_1): Call device::init.
* devices.h: Renumber devices based on more Linux-like major/minor numbers.
Add more devices.  Declare standard device storage.
(device): Declare struct.
* dir.cc (opendir): Use new 'build_fh_name' to construct a fhandler_* type.
* dtable.cc (dtable::get_debugger_info): Ditto.
(cygwin_attach_handle_to_fd): Ditto.
(dtable::release): Remove special FH_SOCKET case in favor of generic
"need_fixup_before" test.
(dtable::init_std_file_from_handle): Use either build_fh_dev or build_fh_name
to build standard fhandler.
(dtable::build_fh_name): Renamed from dtable::build_fhandler_from_name.  Move
out of dtable class.  Don't accept a path_conv argument.  Just build it here
and pass it to:
(build_fh_pc): Renamed from dtable::build_fhandler.  Move out of dtable class.
Use intrinsic device type in path_conv to create new fhandler.
(build_fh_dev): Renamed from dtable::build_fhandler.  Move out of dtable class.
Simplify arguments to just take new 'device' type and a name.  Just return
pointer to fhandler rather than trying to insert into dtable.
(dtable::dup_worker): Accommodate above build_fh name changes.
(dtable::find_fifo): New (currently broken) function.
(handle_to_fn): Use strechr for efficiency.
* dtable.h: Reflect above build_fh name changes and argument differences.
(fhandler_base *&operator []): Return self rather than copy of self.
* fhandler.cc (fhandler_base::operator =): Use pc element to set normalized
path.
(fhandler_base::set_name): Ditto.
(fhandler_base::raw_read): Use method to access name.
(fhandler_base::write): Correctly use get_output_handle rather than get_handle.
(handler_base::device_access_denied): New function.
(fhandler_base::open): Eliminate pc argument and use pc element of
fhandler_base throughout.
(fhandler_base::fstat): Detect if device is based in filesystem and use
fstat_fs to calculate stat, if so.
(fhandler_base::fhandler_base): Eliminate handling of file names and, instead,
just free appropriate component from pc.
(fhandler_base::opendir): Remove path_conv parameter.
* fhandler.h: Remove all device flags.
(fhandler_base::pc): New element.
(fhandler_base::set_name): Change argument to path_conv.
(fhandler_base::error): New function.
(fhandler_base::exists): New function.
(fhandler_base::pc_binmode): New function.
(fhandler_base::dev): New function.
(fhandler_base::open_fs): New function.
(fhandler_base::fstat_fs): New function.
(fhandler_base::fstat_by_name): New function.
(fhandler_base::fstat_by_handle): New function.
(fhandler_base::isfifo): New function.
(fhandler_base::is_slow): New function.
(fhandler_base::is_auto_device): New function.
(fhandler_base::is_fs_special): New function.
(fhandler_base::device_access_denied): New function.
(fhandler_base::operator DWORD&): New operator.
(fhandler_base::get_name): Return normalized path from pc.
(fhandler_base::get_win32_name): Return windows path from pc.
(fhandler_base::isdevice): Renamed from is_device.
(fhandler_base::get_native_name): Return device format.
(fhandler_fifo): New class.
(fhandler_nodevice): New class.
(select_stuff::device_specific): Remove array.
(select_stuff::device_specific_pipe): New class element.
(select_stuff::device_specific_socket): New class element.
(select_stuff::device_specific_serial): New class element.
(select_stuff::select_stuff): Initialize new elements.
* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Move to base class
from fhandler_disk_file.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_disk_file::open): Move most functionality into
fhandler_base::open_fs.
(fhandler_base::open_fs): New function.
(fhandler_disk_file::close): Move most functionality into
fhandler_base::close_fs.
(fhandler_base::close_fs): New function.
* fhandler_mem.cc (fhandler_dev_mem::open): Use device name in debugging
output.
* fhandler_socket.cc (fhandler_socket::set_connect_secret): Copy standard
urandom device into appropriate place.
(fhandler_socket::accept): Reflect change in fdsock return value.
* fhandler_tty.cc: See "throughouts" above.
* net.cc: Accommodate fdsock change throughout.
(fdsock): Return success or failure, accept fd argument and device argument.
* path.cc (symlink_info::major): New element.
(symlink_info::minor): New element.
(symlink_info::parse_device): Declare new function.
(fs_info::update): Accommodate changes in path_conv class.
(path_conv::fillin): Ditto.
(path_conv::return_and_clear_normalized_path): Eliminate.
(path_conv::set_normalized_path): New function.
(path_conv::path_conv): Set info in dev element.  Use path_conv methods Check
for FH_FS rather than FH_BAD to indicate when to fill in filesystem stuff.
where appropriate rather than direct access.  Use set_normalized_path to set
normalized path.
(windows_device_names): Eliminate.
(get_dev): Ditto.
(get_raw_device_number): Ditto.
(get_device_number): Ditto.
(win32_device_name): Call new device name parser to do most of the heavy
lifting.
(mount_info::conv_to_win32_path): Fill in dev field as appropriate.
(symlink_worker): Handle new device files.
(symlink_info::check): Ditto.
(symlink_info::parse_device): Define new function.
* path.h (executable_states): Move here from fhandler.h.
(fs_info): Rename variables to *_storage and create methods for accessing same.
(path_conv): Add dev element, remove devn and unit and adjust inline methods to
accommodate.
(set_normalized_path): Declare new function.
* pinfo.cc (_pinfo::commune_recv): Add broken support for handling fifos.
(_pinfo::commune_send): Ditto.
* pipe.cc (fhandler_pipe::close): check for existence of handle before closing
it.
(handler_pipe::create): Rename from make_pipe.  Change arguments to accept
fhandler_pipe array.  Accommodate fifos.
(pipe): Rework to deal with fhandler_pipe::create changes.
(_pipe): Ditto.
* select.cc: Use individual device_specific types throughout rather than
indexing with obsolete device number.
(set_bits): Use is_socket call rather than checking device number.
* shared_info.h (CURR_MOUNT_MAGIC): Update.
(conv_to_win32_path): Reflect addition of device argument.
* syscalls.cc (mknod_worker): New function.
(open): Use build_fh_name to build fhandler.
(chown_worker): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(chmod_device): New function.
(chmod): Detect if this is an 'auto' device rather than an on-filesystem device
and handle appropriately.  Use chmod_device to set mode of in-filesystem
devices.
(stat_worker): Eliminate path_conv argument.  Call build_fh_name to construct
fhandler.  Use fh->error() rather than pc->error to detect errors in fhandler
construction.
(access_worker): New function pulled from access.  Accommodate in-filesystem
devices.
(access): Use access_worker.
(fpathconf): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(mknod_worker): New function.
(mknod32): New function.
(chroot): Free normalized path -- assuming it was actually cmalloced.
* tty.cc (create_tty_master): Tweak for new device class.
(tty::common_init): Ditto.
* winsup.h (stat_worker): Remove.
(symlink_worker): Declare.
* exceptions.cc (set_process_mask): Just call sig_dispatch_pending and don't
worry about pending_signals since sig_dispatch_pending should always do the
right thing now.
(sig_handle): Reorganize SIGCONT handling to more closely conform to SUSv3.
* pinfo.h: Move __SIG enum to sigproc.h.
(PICOM_FIFO): New enum element.
(_pinfo): Remove 'thread2signal' stuff throughout class.
(_pinfo::commune_send): Make varargs.
(_pinfo::sigtodo): Eliminate.
(_pinfo::thread2signal): Ditto.
* signal.cc (kill_worker): Eliminate call to setthread2signal.
* sigproc.cc (local_sigtodo): Eliminate.
(getlocal_sigtodo): Ditto.
(sigelem): New class.
(pending_signals): New class.
(sigqueue): New variable, start of sigqueue linked list.
(sigcatch_nonmain): Eliminate.
(sigcatch_main): Eliminate.
(sigcatch_nosync): Eliminate.
(sigcomplete_nonmain): Eliminate.
(pending_signals): Eliminate.
(sig_clear): Call signal thread to clear pending signals, unless already in
signal thread.
(sigpending): Call signal thread to get pending signals.
(sig_dispatch_pending): Eliminate use of pending_signals and just check
sigqueue.
(sigproc_terminate): Eliminate all of the obsolete semaphore stuff.  Close
signal pipe handle.
(sig_send): Eliminate all of the obsolete semaphore stuff and use pipe to send
signals.
(getevent): Eliminate.
(pending_signals::add): New function.
(pending_signals::del): New function.
(pending_signals::next): New function.
(wait_sig): Eliminate all of the obsolete semaphore stuff.  Use pipe to
communicate and maintain a linked list of signals.
* sigproc.h: Move __SIG defines here.  Add __SIGPENDING.
(sig_dispatch_pending): Remove "C" specifier.
(sig_handle): Accept a mask argument.
* thread.cc: Remove signal handling considerations throughout.
@
text
@d104 1
a104 1
typedef long key_t;
@


1.21
log
@	* winsup/cygwin/include/cygwin/version.h: Bump API minor version.
	* winsup/cygwin/include/cygwin/types.h: Define key_t as long long.
	* winsup/cygwin/cygwin.din: Add ftok, _ftok.
	* winsup/cygwin/ipc.cc (ftok): Rework implementation.
@
text
@d104 1
a104 1
typedef long long key_t;
@


1.20
log
@	* include/cygwin/types.h: Add key_t typedef.
@
text
@d104 1
a104 1
typedef long key_t;
@


1.19
log
@* dir.cc (readdir): Fill out new old_d_ino field.
* fhandler.h (fhandler_base::namehash): Define as ino_t.
(fhandler_base::get_namehash): Ditto.
* fhandler_disk_file.cc (fhandler_disk_file::fstat_helper): Accommodate new 64
bit st_ino.
* fhandler_socket.cc (fhandler_socket::fstat): Ditto.
* path.cc (hash_path_name): Return ino_t.
* syscalls.cc (stat64_to_stat32): Convert 64 bit inode to 32 bit.
* winsup.h (hash_path_name): Declare as returning ino_t.
* include/cygwin/stat.h (__stat32): Use 32 bit st_ino.
(__stat64): Use 64 bit st_ino.
* include/cygwin/types.h (__ino64_t): Define.
(__ino32_t): Ditto.
(ino_t): Define appropriately.
@
text
@d102 5
@


1.18
log
@	* include/cygwin/types.h: Fix erroneous definition of ino_t from
	2003-04-28.
@
text
@d93 7
a99 1
typedef unsigned long ino_t;
@


1.17
log
@* profil.h (PROFADDR): Prevent overflow when text segments are larger than
256k.
* profil.c (profthr_func): Raise thread priority for more accurate sampling.
* path.cc (hash_path_name): Use ino_t as type.
@
text
@d93 1
a93 1
typedef unsigned long long ino_t;
@


1.16
log
@	* include/inttypes.h: New file.
	* include/stdint.h: New file.
	* include/cygwin/in.h: Include stdint.h instead of sys/types.h.
	* include/cygwin/types.h: Include stdint.h.  Remove typedefs for
	intN_t and uintN_t since these are defined in stdint.h now.
@
text
@a92 1
#ifdef __CYGWIN_USE_BIG_TYPES1__
a93 3
#else
typedef unsigned long ino_t;
#endif
@


1.15
log
@	* dir.cc: Change __off32_t to _off_t and __off64_t to _off64_t
	throughout.
	* fhandler.cc: Ditto.
	* fhandler.h: Ditto.
	* fhandler_clipboard.cc: Ditto.
	* fhandler_disk_file.cc: Ditto.
	* fhandler_dsp.cc: Ditto.
	* fhandler_floppy.cc: Ditto.
	* fhandler_mem.cc: Ditto.
	* fhandler_proc.cc: Ditto.
	* fhandler_process.cc: Ditto.
	* fhandler_random.cc: Ditto.
	* fhandler_registry.cc: Ditto.
	* fhandler_tape.cc: Ditto.
	* fhandler_termios.cc: Ditto.
	* fhandler_virtual.cc: Ditto.
	* fhandler_zero.cc: Ditto.
	* mmap.cc: Ditto.
	* pipe.cc: Ditto.
	* syscalls.cc: Ditto.
	* winsup.h: Ditto.
	* include/cygwin/stat.h: Ditto.
	* include/cygwin/types.h: Ditto.  Remove definition of __off32_t
	and __off64_t.
@
text
@d21 1
a112 34
#ifndef __int8_t_defined
#define __int8_t_defined
typedef char int8_t;
#endif
#ifndef __int16_t_defined
#define __int16_t_defined
typedef __int16_t int16_t;
#endif
#ifndef __int32_t_defined
#define __int32_t_defined
typedef __int32_t int32_t;
#endif
#ifndef __int64_t_defined
#define __int64_t_defined
typedef __int64_t int64_t;
#endif

#ifndef __uint8_t_defined
#define __uint8_t_defined
typedef unsigned char uint8_t;
#endif
#ifndef __uint16_t_defined
#define __uint16_t_defined
typedef __uint16_t uint16_t;
#endif
#ifndef __uint32_t_defined
#define __uint32_t_defined
typedef __uint32_t uint32_t;
#endif
#ifndef __uint64_t_defined
#define __uint64_t_defined
typedef __uint64_t uint64_t;
#endif

a127 10
#endif

#ifndef __uintptr_t_defined
#define __uintptr_t_defined
typedef unsigned long uintptr_t;
#endif

#ifndef __intptr_t_defined
#define __intptr_t_defined
typedef long intptr_t;
@


1.14
log
@* include/cygwin/types.h: Use correct ifdef guard for u_ definitions.
@
text
@a33 2
typedef long __off32_t;
typedef long long __off64_t;
d35 1
a35 1
typedef __off64_t off_t;
d37 1
a37 1
typedef __off32_t off_t;
@


1.13
log
@* include/cygwin/in.h (in_attr_t): Define new type.
* include/arpa/inet.h (inet_addr): Change return type to in_addr_t.
(inet_lnaof): Ditto.
(inet_netof): Ditto.
(inet_network): Ditto.
* include/cygwin/types.h: Move many *_t typedefs here.  Protect them with
ifdefs.
* fhandler_disk_file.cc (fhandler_disk_file::fstat): Change ntsec_atts to
mode_t.
* security.cc (get_attribute_from_acl): Accept mode_t attribute.
(get_nt_attribute): Ditto.
(get_file_attribute): Ditto.
(get_nt_object_attribute): Ditto.
(get_object_attribute): Ditto.
* security.h: Reflect above changes.
* syscalls.cc (chown_worker): Change attrib to mode_t.
@
text
@d148 2
a149 2
#ifndef __uint8_t_defined
#define __uint8_t_defined
d152 2
a153 2
#ifndef __uint16_t_defined
#define __uint16_t_defined
d156 2
a157 2
#ifndef __uint32_t_defined
#define __uint32_t_defined
d160 2
a161 2
#ifndef __uint64_t_defined
#define __uint64_t_defined
@


1.12
log
@	Split ChangeLog, create ChangeLog-2002.
	Fix copyright dates.
@
text
@d22 4
a25 1
typedef struct timespec timespec_t, timestruc_t;
d27 7
d41 1
d43 2
d52 1
d54 2
d57 1
d59 2
d68 1
d70 2
d73 10
a83 1
typedef unsigned long  __uid32_t;
a85 1
typedef __uid32_t uid_t;
a87 1
typedef __uid16_t uid_t;
d90 100
@


1.12.2.1
log
@merge from trunk
@
text
@d22 1
a22 4
#ifndef __timespec_t_defined
#define __timespec_t_defined
typedef struct timespec timespec_t;
#endif /*__timespec_t_defined*/
a23 7
#ifndef __timestruc_t_defined
#define __timestruc_t_defined
typedef struct timespec timestruc_t;
#endif /*__timestruc_t_defined*/

#ifndef __off_t_defined
#define __off_t_defined
a30 1
#endif /*__off_t_defined*/
a31 2
#ifndef __dev_t_defined
#define __dev_t_defined
a38 1
#endif /*__dev_t_defined*/
a39 2
#ifndef __blksize_t_defined
#define __blksize_t_defined
a40 1
#endif /*__blksize_t_defined*/
a41 2
#ifndef __blkcnt_t_defined
#define __blkcnt_t_defined
a48 1
#endif /*__blkcnt_t_defined*/
a49 2
#ifndef __uid_t_defined
#define __uid_t_defined
d51 1
d53 1
d56 1
a58 10
#endif
#endif /*__uid_t_defined*/

#ifndef __gid_t_defined
#define __gid_t_defined
typedef unsigned short __gid16_t;
typedef unsigned long  __gid32_t;
#ifdef __CYGWIN_USE_BIG_TYPES__
typedef __gid32_t gid_t;
#else
a60 100
#endif /*__gid_t_defined*/

#ifndef __ino_t_defined
#define __ino_t_defined
#ifdef __CYGWIN_USE_BIG_TYPES1__
typedef unsigned long long ino_t;
#else
typedef unsigned long ino_t;
#endif
#endif /*__ino_t_defined*/

#ifndef __BIT_TYPES_DEFINED
#define __BIT_TYPES_DEFINED__ 1

#ifndef __vm_offset_t
#define __vm_offset_t_defined
typedef unsigned long vm_offset_t;
#endif /*__vm_offset_t_defined*/

#ifndef __vm_size_t
#define __vm_size_t_defined
typedef unsigned long vm_size_t;
#endif /*__vm_size_t_defined*/

#ifndef __int8_t_defined
#define __int8_t_defined
typedef char int8_t;
#endif
#ifndef __int16_t_defined
#define __int16_t_defined
typedef __int16_t int16_t;
#endif
#ifndef __int32_t_defined
#define __int32_t_defined
typedef __int32_t int32_t;
#endif
#ifndef __int64_t_defined
#define __int64_t_defined
typedef __int64_t int64_t;
#endif

#ifndef __uint8_t_defined
#define __uint8_t_defined
typedef unsigned char uint8_t;
#endif
#ifndef __uint16_t_defined
#define __uint16_t_defined
typedef __uint16_t uint16_t;
#endif
#ifndef __uint32_t_defined
#define __uint32_t_defined
typedef __uint32_t uint32_t;
#endif
#ifndef __uint64_t_defined
#define __uint64_t_defined
typedef __uint64_t uint64_t;
#endif

#ifndef __uint8_t_defined
#define __uint8_t_defined
typedef unsigned char u_int8_t;
#endif
#ifndef __uint16_t_defined
#define __uint16_t_defined
typedef __uint16_t u_int16_t;
#endif
#ifndef __uint32_t_defined
#define __uint32_t_defined
typedef __uint32_t u_int32_t;
#endif
#ifndef __uint64_t_defined
#define __uint64_t_defined
typedef __uint64_t u_int64_t;
#endif

#ifndef __uintptr_t_defined
#define __uintptr_t_defined
typedef unsigned long uintptr_t;
#endif

#ifndef __intptr_t_defined
#define __intptr_t_defined
typedef long intptr_t;
#endif

#ifndef __register_t_defined
#define __register_t_defined
typedef __int32_t register_t;
#endif

#ifndef __addr_t_defined
#define __addr_t_defined
typedef char *addr_t;
#endif

#ifndef __mode_t_defined
#define __mode_t_defined
typedef unsigned mode_t;
#endif
#endif /*__BIT_TYPES_DEFINED*/
@


1.12.2.2
log
@merge from trunk.
Reorganize includes throughout so that path.h comes before fhandler.h.
Eliminate path_conv arguments from fhandler functions which take them,
throughout.  Use get_name() and get_win32_name() consistently throughout for
fhandler objects.  Use build_fh_* functions throughout, where appropriate.
* fhandler.h (fhandler_base): Store path_conv struct here.  Remove dev.
* dtable.h (dtable::build_fhandler_*): Remove.
(build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* dtable.cc (build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* fhandler.h (fhandler_base::set_name): Change argument.
* fhandler.cc (fhandler_base::set_name): Just accept a path_conv argument.
(executable_states): Move.
* path.h (executable_state): Accept.
* syscalls.cc (stat_worker): Make static.
* winsup.h (stat_worker): Remove definition.
@
text
@d148 2
a149 2
#ifndef __u_int8_t_defined
#define __u_int8_t_defined
d152 2
a153 2
#ifndef __u_int16_t_defined
#define __u_int16_t_defined
d156 2
a157 2
#ifndef __u_int32_t_defined
#define __u_int32_t_defined
d160 2
a161 2
#ifndef __u_int64_t_defined
#define __u_int64_t_defined
@


1.12.2.3
log
@merge from trunk
@
text
@d34 2
d37 1
a37 1
typedef _off64_t off_t;
d39 1
a39 1
typedef _off_t off_t;
@


1.12.2.4
log
@merge from trunk
@
text
@a20 1
#include <stdint.h>
d92 3
d96 1
d112 34
d161 10
@


1.12.2.5
log
@merge from trunk
@
text
@d93 1
a93 7
typedef unsigned long __ino32_t;
typedef unsigned long long __ino64_t;
#ifdef __CYGWIN_USE_BIG_TYPES__
typedef __ino64_t ino_t;
#else
typedef __ino32_t ino_t;
#endif
a94 5

#ifndef __key_t_defined
#define __key_t_defined
typedef long key_t;
#endif /* __key_t_defined */
@


1.11
log
@Apply pthread_types_patch
@
text
@d3 1
a3 1
   Copyright 2001, 2002 Red Hat Inc.
@


1.10
log
@	* fhandler.cc (fhandler_base::fstat): Initialise tv_nsec member of
	st_atim, st_mtim, and st_ctim fields.
	* fhandler_disk_file.cc (fhandler_disk_file::fstat_helper): Ditto.
	* fhandler_process.cc (fhandler_process::fstat): Ditto.
	* glob.c (stat32_to_STAT): Copy across the whole st_atim,
	st_mtime, and st_ctim fields.
	* syscalls.cc (stat64_to_stat32): Ditto.
	* times.cc (to_timestruc_t): New function.
	(time_as_timestruc_t): New function.
	* winsup.h: Add to_timestruc_t and time_as_timestruc_t functions.
	* include/cygwin/stat.h: Replace time_t with timestruc_t
	throughout for all file times, removing the st_spare1, st_spare2,
	and st_spare3 fields in the process. Add macros to access tv_sec
	fields by old names.
	* include/cygwin/types.h: Typedef timespec_t and timestruc_t as
	struct timespec.
@
text
@d64 2
a65 2
typedef void *pthread_t;
typedef void *pthread_mutex_t;
d67 5
a71 5
typedef void *pthread_key_t;
typedef void *pthread_attr_t;
typedef void *pthread_mutexattr_t;
typedef void *pthread_condattr_t;
typedef void *pthread_cond_t;
d80 2
a81 2
typedef void *pthread_rwlock_t;
typedef void *pthread_rwlockattr_t;
@


1.9
log
@	* syscalls.cc (stat64_to_stat32): Transform st_dev correctly.
	(fstat64): Add evaluating st_ino and st_dev.
	(stat_worker): Evaluate st_dev as 32 bit value.
	* include/cygwin/stat.h: Use new dev_t definition throughout.
	* include/cygwin/types.h: Define __dev16_t and __dev32_t.  Define
	dev_t according to __CYGWIN_USE_BIG_TYPES__ setting.
	* include/sys/sysmacros.h: Define major, minor and makedev
	according to __CYGWIN_USE_BIG_TYPES__ setting.
@
text
@d22 2
@


1.8
log
@	* include/cygwin/types.h: Revert previous patch.
@
text
@d30 8
@


1.7
log
@	* include/cygwin/types.h: Define pthread stuff only if _POSIX_THREADS
	is defined.
@
text
@a52 1
#if defined(_POSIX_THREADS)
a89 1
#endif /* defined(_POSIX_THREADS) */
@


1.6
log
@* include/cygwin/types.h: Include <sys/sysmacros.h>.
@
text
@d53 1
d91 1
@


1.5
log
@	* cygwin.din (fstat64): New symbol.
	(ftruncate64): Ditto.
	(lseek64): Ditto.
	(lstat64): Ditto.
	(mmap64): Ditto.
	(seekdir64): Ditto.
	(stat64): Ditto.
	(telldir64): Ditto.
	(truncate64): Ditto.
	* dir.cc (telldir64): New function.
	(telldir): Call telldir64().
	(seekdir64): New function.
	(seekdir): Call seekdir64().
	* fhandler.h: Redefine all methods using __off32_t to use __off64_t.
	* fhandler.cc: Use __off64_t and struct __stat64 throughout.
	* fhandler_clipboard.cc: Ditto.
	* fhandler_disk_file.cc: Ditto.
	* fhandler_dsp.cc: Ditto.
	* fhandler_floppy.cc: Ditto.
	* fhandler_mem.cc: Ditto.
	* fhandler_random.cc: Ditto.
	* fhandler_socket.cc: Ditto.
	* fhandler_tape.cc: Ditto.
	* fhandler_zero.cc: Ditto.
	* pipe.cc: Ditto.
	* glob.c: Ditto, call lstat64 and stat64 in Cygwin.
	* mmap.cc: Use __off64_t throughout.
	(mmap64): New function.
	* sec_acl.cc (acl_worker): Use struct __stat64, call stat64 and lstat64.
	* syscalls.cc (lseek64): New function.
	(stat64_to_stat32): Ditto.
	(fstat64): Ditto.
	(stat64): Ditto.
	(lstat64): Ditto.
	(ftruncate64): Ditto.
	(truncate64): Ditto.
	(_fstat): Call fstat64.
	(_stat): Call stat64.
	(cygwin_lstat): Rename to avoid declaration problem.  Call lstat64.
	(stat_worker): Use struct __stat64.
	(access): Ditto.
	(ftruncate): Call ftruncate64.
	(truncate): Call truncate64.
	* wincap.cc: Set flag has_64bit_file_access appropriately.
	* wincap.h: Add flag has_64bit_file_access.
	* winsup.h (ILLEGAL_SEEK): Define as __off64_t.
	(stat_dev): Declare using struct __stat64.
	(stat_worker): Ditto.
	* include/cygwin/stat.h (struct __stat32): Define if compiling Cygwin.
	(struct __stat64): Ditto.
	(struct stat): Revert definition with explicitly sized datatypes.
	Eliminate sized field names.
	* include/cygwin/types.h (blksize_t): New type.
	(__blkcnt32_t): Ditto.
	(__blkcnt64_t): Ditto.
	(blkcnt_t): Ditto.
@
text
@d20 2
@


1.4
log
@	* include/cygwin/grp.h: New file.
	* include/cygwin/stat.h: Ditto.
	* include/cygwin/types.h: Add definitions for __off32_t,
	__off64_t, off_t, __uid16_t, __uid32_t, uid_t, __gid16_t,
	__gid32_t and gid_t.
	* include/sys/cygwin.h: Use correct uid and gid types.
@
text
@d28 10
@


1.3
log
@Eliminate excess whitespace.
@
text
@d3 1
a3 1
   Copyright 2001 Red Hat Inc.
d19 20
@


1.2
log
@	* configure.in: Remove PTH_ALLOW.
	* cygwin.din: Remove @@PTH_ALLOW@@ prefixes to pthread functions.
	Add new pthread exports.
	* pthread.cc: New wrapper functions for the above new exports.
	* sched.cc (valid_sched_parameters): New function.
	(sched_setparam): Use it.
	(sched_set_thread_priority): New function. Used by pthread_sched*.
	* thread.cc (pthread_key_destructor::InsertAfter): New function.
	(pthread_key_destructor::UnlinkNext): New function.
	(pthread_key_destructor::Next): New function.
	(pthread_key_destructor_list::Insert): New function.
	(pthread_key_destructor_list::Remove): New function.
	(pthread_key_destructor_list::Pop): New function.
	(pthread_key_destructor::pthread_key_destructor): New function.
	(pthread_key_destructor_list::IterateNull): New function.
	(MTinterface::Init): Initialise new member.
	(pthread::pthread): Initialise new members.
	(pthread::create): Copy new attributes. Set the new thread priority.
	(pthread_attr::pthread_attr): Initialise new members.
	(pthread_key::pthread_key): Setup destructor function.
	(pthread_key::~pthread_key): Remove destructor function.
	(pthread_mutexattr::pthread_mutexattr): New function.
	(pthread_mutexattr::~pthread_mutexattr): New function.
	(__pthread_once): New function.
	(__pthread_cleanup): New function.
	(__pthread_cancel): New function.
	(__pthread_setcancelstate): New function.
	(__pthread_setcanceltype): New function.
	(__pthread_testcancel): New function.
	(__pthread_attr_getinheritsched): New function.
	(__pthread_attr_getschedparam): New function.
	(__pthread_attr_getschedpolicy): New function.
	(__pthread_attr_getscope): New function.
	(__pthread_attr_setinheritsched): New function.
	(__pthread_attr_setschedparam): New function.
	(__pthread_attr_setschedpolicy): New function.
	(__pthread_attr_setscope): New function.
	(__pthread_exit): Call any key destructors on thread exit.
	(__pthread_join): Use the embedded attr values.
	(__pthread_detach): Use the embedded attr values.
	(__pthread_getconcurrency): New function.
	(__pthread_getschedparam): New function.
	(__pthread_key_create): Pass the destructor on object creation.
	(__pthread_key_delete): Correct incorrect prototype.
	(__pthread_setconcurrency): New function.
	(__pthread_setschedparam): New function.
	(__pthread_cond_timedwait): Support static mutex initialisers.
	(__pthread_cond_wait): Ditto.
	(__pthread_mutex_getprioceiling): New function.
	(__pthread_mutex_lock): Support static mutex initialisers.
	(__pthread_mutex_trylock): Ditto.
	(__pthread_mutex_unlock): Ditto.
	(__pthread_mutex_destroy): Ditto.
	(__pthread_mutex_setprioceiling): New function.
	(__pthread_mutexattr_getprotocol): New function.
	(__pthread_mutexattr_getpshared): New function.
	(__pthread_mutexattr_gettype): New function.
	(__pthread_mutexattr_init): New function.
	(__pthread_mutexattr_destroy): New function.
	(__pthread_mutexattr_setprotocol): New function.
	(__pthread_mutexattr_setprioceiling): New function.
	(__pthread_mutexattr_getprioceiling): New function.
	(__pthread_mutexattr_setpshared): New function.
	(__pthread_mutexattr_settype): New function.
	Remove stubs for non MT_SAFE compilation.
	* thread.h: Remove duplicate #defines.
	Add prototypes for new functions in thread.cc.
	(pthread_key_destructor): New class.
	(pthread_key_destructor_list): New class.
	(pthread_attr): Add new members.
	(pthread): Remove members that are duplicated in the pthread_attr class.
	(pthread_mutex_attr): Add new members.
	(pthread_once): New class.
	* include/pthread.h: Add prototypes for new functions exported from cygwin1.dll.
	Remove typedefs.
	* include/sched.h: Add prototypes for new functions in sched.cc.
	* include/cygwin/types.h: Add typedefs from pthread.h
@
text
@d3 1
a3 1
   Copyright 2001 Red Hat Inc. 
@


1.2.8.1
log
@Merged changes from HEAD
@
text
@d3 1
a3 1
   Copyright 2001 Red Hat Inc.
@


1.2.8.2
log
@Merged changes from HEAD
@
text
@d3 1
a3 1
   Copyright 2001, 2002 Red Hat Inc.
a18 30

typedef long __off32_t;
typedef long long __off64_t;
#ifdef __CYGWIN_USE_BIG_TYPES__
typedef __off64_t off_t;
#else
typedef __off32_t off_t;
#endif

typedef long blksize_t;

typedef long __blkcnt32_t;
typedef long long __blkcnt64_t;
#ifdef __CYGWIN_USE_BIG_TYPES__
typedef __blkcnt64_t  blkcnt_t;
#else
typedef __blkcnt32_t  blkcnt_t;
#endif

typedef unsigned short __uid16_t;
typedef unsigned short __gid16_t;
typedef unsigned long  __uid32_t;
typedef unsigned long  __gid32_t;
#ifdef __CYGWIN_USE_BIG_TYPES__
typedef __uid32_t uid_t;
typedef __gid32_t gid_t;
#else
typedef __uid16_t uid_t;
typedef __gid16_t gid_t;
#endif
@


1.2.8.3
log
@Merged changes from HEAD
@
text
@a19 4
#include <sys/sysmacros.h>

typedef struct timespec timespec_t, timestruc_t;

a25 8
#endif

typedef short __dev16_t;
typedef unsigned long __dev32_t;
#ifdef __CYGWIN_USE_BIG_TYPES__
typedef __dev32_t dev_t;
#else
typedef __dev16_t dev_t;
@


1.1
log
@Initial revision
@
text
@d1 63
a63 1
/* types.h */
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
