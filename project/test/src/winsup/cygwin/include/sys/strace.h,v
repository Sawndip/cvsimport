head	1.34;
access;
symbols
	cygwin-1_7_35-release:1.34
	cygwin-1_7_34-release:1.34
	cygwin-1_7_33-release:1.33.2.1
	cygwin-1_7_32-release:1.33.2.1
	cygwin-1_7_31-release:1.33
	cygwin-1_7_30-release:1.33
	cygwin-1_7_29-release:1.33
	cygwin-1_7_29-release-branchpoint:1.33.0.2
	cygwin-pre-user-db:1.33
	cygwin-1_7_28-release:1.33
	cygwin-1_7_27-release:1.33
	cygwin-1_7_26-release:1.33
	cygwin-1_7_25-release:1.33
	cygwin-1_7_24-release:1.33
	cygwin-1_7_23-release:1.33
	cygwin-1_7_22-release:1.33
	cygwin-1_7_21-release:1.33
	cygwin-1_7_20-release:1.33
	cygwin-1_7_19-release:1.33
	cygwin-64bit-postmerge:1.33
	cygwin-64bit-premerge-branch:1.32.0.2
	cygwin-64bit-premerge:1.32
	cygwin-1_7_18-release:1.32
	post-ptmalloc3:1.31.2.4
	pre-ptmalloc3:1.31.2.4
	cygwin-1_7_17-release:1.31
	cygwin-64bit-branch:1.31.0.2
	cygwin-1_7_16-release:1.31
	cygwin-1_7_15-release:1.31
	cygwin-1_7_14_2-release:1.31
	cygwin-1_7_14-release:1.31
	cygwin-1_7_12-release:1.31
	cygwin-1_7_11-release:1.31
	cygwin-1_7_10-release:1.31
	signal-rewrite:1.28.0.2
	pre-notty:1.26
	cygwin-1_7_9-release:1.25
	cv-post-1_7_9:1.25.0.2
	cygwin-1_7_8-release:1.25
	cygwin-1_7_7-release:1.25
	cygwin-1_7_5-release:1.25
	cygwin-1_7_4-release:1.25
	cygwin-1_7_3-release:1.25
	cygwin-1_7_2-release:1.24
	fifo_doover3:1.21.0.4
	cygwin-1_7_1-release:1.21
	prefifo:1.21
	cv-branch-2:1.21.0.2
	pre-ripout-set_console_state_for_spawn:1.20
	EOL_registry_mounts:1.20
	preoverlapped:1.20
	drop_9x_support_start:1.20
	cr-0x5f1:1.20.0.8
	cv-branch:1.20.0.6
	pre-ptymaster-archetype:1.20
	cr-0x3b58:1.20.0.4
	cr-0x5ef:1.20.0.2
	after-mmap-privanon-noreserve:1.19
	after-mmap-revamp:1.19
	before-mmap-revamp:1.19
	cgf-more-exit-sync:1.19
	post_wait_sig_exit:1.19
	pre_wait_sig_exit:1.18
	reparent-point:1.17
	noreparent:1.17.0.16
	cr-0x5e6:1.17.0.14
	cr-0x9e:1.17.0.12
	cr-0x9d:1.17.0.10
	cgf-deleteme:1.17.0.8
	pre-sigrewrite:1.17
	corinna-01:1.17
	cr-0x9c:1.17.0.6
	cr-0x9b:1.17.0.4
	cr-0x99:1.17
	Z-emcb-cygwin_daemon:1.17.0.2
	w32api-2_2:1.17
	mingw-runtime-2_4:1.17
	pre-cgf-merge:1.17
	cgf-dev-branch:1.16.0.20
	predaemon:1.15
	cygwin_daemon_merge_HEAD:1.15
	pregp02r1:1.15.0.2
	cygnus_cvs_20020108_pre:1.12
	Z-cygwin_daemon_merge-new_HEAD:1.16
	Z-cygwin_daemon_merge_HEAD:1.16
	cygwin_daemon:1.12.0.8;
locks; strict;
comment	@ * @;
expand	@o@;


1.34
date	2014.08.01.15.48.37;	author ericb;	state Exp;
branches;
next	1.33;

1.33
date	2013.04.23.09.44.35;	author corinna;	state Exp;
branches
	1.33.2.1;
next	1.32;

1.32
date	2013.01.21.04.38.31;	author cgf;	state Exp;
branches;
next	1.31;

1.31
date	2011.11.24.21.36.53;	author cgf;	state Exp;
branches
	1.31.2.1;
next	1.30;

1.30
date	2011.11.24.02.17.55;	author cgf;	state Exp;
branches;
next	1.29;

1.29
date	2011.10.30.04.50.36;	author cgf;	state Exp;
branches;
next	1.28;

1.28
date	2011.08.03.17.58.59;	author cgf;	state Exp;
branches;
next	1.27;

1.27
date	2011.06.17.08.30.27;	author corinna;	state Exp;
branches;
next	1.26;

1.26
date	2011.05.28.18.17.09;	author cgf;	state Exp;
branches;
next	1.25;

1.25
date	2010.03.31.18.06.02;	author cgf;	state Exp;
branches;
next	1.24;

1.24
date	2010.02.22.20.36.04;	author cgf;	state Exp;
branches;
next	1.23;

1.23
date	2010.02.19.20.01.49;	author cgf;	state Exp;
branches;
next	1.22;

1.22
date	2010.02.19.17.55.26;	author cgf;	state Exp;
branches;
next	1.21;

1.21
date	2008.12.19.19.09.51;	author cgf;	state Exp;
branches;
next	1.20;

1.20
date	2005.12.29.20.46.34;	author cgf;	state Exp;
branches;
next	1.19;

1.19
date	2005.09.22.16.41.36;	author cgf;	state Exp;
branches;
next	1.18;

1.18
date	2004.12.10.16.25.35;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2003.01.26.05.38.38;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2002.06.10.19.58.21;	author cgf;	state Exp;
branches
	1.16.20.1;
next	1.15;

1.15
date	2002.02.14.21.20.06;	author cgf;	state Exp;
branches;
next	1.14;

1.14
date	2002.01.29.02.02.03;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2002.01.28.18.03.40;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2001.04.03.02.53.25;	author cgf;	state Exp;
branches
	1.12.8.1;
next	1.11;

1.11
date	2001.03.07.17.45.03;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.05.21.29.23;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2001.02.26.09.50.24;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.24.02.25.27;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.16.23.55.58;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.24.17.23.35;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.02.19.26.01;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.02.15.24.45;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.02.03.42.31;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.03.07.05.33.09;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.33.2.1
date	2014.08.13.17.39.11;	author corinna;	state Exp;
branches;
next	;

1.31.2.1
date	2012.11.16.13.48.25;	author corinna;	state Exp;
branches;
next	1.31.2.2;

1.31.2.2
date	2012.11.22.12.05.08;	author corinna;	state Exp;
branches;
next	1.31.2.3;

1.31.2.3
date	2012.11.22.12.12.46;	author corinna;	state Exp;
branches;
next	1.31.2.4;

1.31.2.4
date	2013.01.21.13.52.14;	author corinna;	state Exp;
branches;
next	;

1.16.20.1
date	2003.01.26.05.39.17;	author cgf;	state Exp;
branches;
next	;

1.12.8.1
date	2002.02.28.12.53.31;	author rbcollins;	state Exp;
branches;
next	1.12.8.2;

1.12.8.2
date	2002.06.13.14.34.20;	author rbcollins;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.34
log
@headers: properly decorate attributes

As pointed out here:
https://cygwin.com/ml/cygwin/2014-07/msg00371.html

any use of __attribute__ in a header that can be included by a user
should be namespace-safe, by decorating the attribute arguments with __
(while gcc does a lousy job at documenting it, ALL attributes have a __
counterpart, precisely so that public headers can use attributes without
risk of collision with macros belonging to user namespace).

* include/pthread.h: Decorate attribute names with __, for
namespace safety.
* include/cygwin/core_dump.h: Likewise.
* include/cygwin/cygwin_dll.h: Likewise.
* include/sys/cygwin.h: Likewise.
* include/sys/strace.h: Likewise.
@
text
@/* sys/strace.h

   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2008,
   2010, 2011, 2012, 2014 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

/* This file contains routines for tracing system calls and other internal
   phenomenon.

   When tracing system calls, try to use the same style throughout:

   result = syscall (arg1, arg2, arg3) [optional extra stuff]

   If a system call can block (eg: read, write, wait), print another message
   before hanging so the user will know why the program has stopped.

   Note: __seterrno will also print a trace message.  Have that printed
   *first*.  This will make it easy to always know what __seterrno is
   refering to.  For the same reason, try not to have __seterrno messages
   printed alone.
*/

#ifndef _SYS_STRACE_H
#define _SYS_STRACE_H

#include <stdarg.h>
#include <sys/types.h>

#ifdef __cplusplus

class child_info;
class strace
{
  int vsprntf (char *buf, const char *func, const char *infmt, va_list ap);
  void write (unsigned category, const char *buf, int count);
  unsigned char _active;
public:
  void activate (bool) __attribute__ ((__regparm__ (2)));;
  strace () {}
  int microseconds ();
  int version;
  int lmicrosec;
  bool execing;
  void dll_info () __attribute__ ((__regparm__ (1)));
  void prntf (unsigned, const char *func, const char *, ...) /*__attribute__ ((__regparm__(3)))*/;
  void vprntf (unsigned, const char *func, const char *, va_list ap) /*__attribute__ ((__regparm__(3)))*/;
  void wm (int message, int word, int lon) __attribute__ ((__regparm__(3)));
  void write_childpid (pid_t) __attribute__ ((__regparm__ (3)));
  bool attached () const {return _active == 3;}
  bool active () const {return _active & 1;}
  unsigned char& active_val () {return _active;}
};

extern strace strace;

#endif /* __cplusplus */

#define _STRACE_INTERFACE_ACTIVATE_ADDR  -1
#define _STRACE_INTERFACE_ACTIVATE_ADDR1 -2
#define _STRACE_CHILD_PID -3

/* Bitmasks of tracing messages to print.  */

#define _STRACE_ALL	 0x000001 // so behaviour of strace=1 is unchanged
#define _STRACE_FLUSH	 0x000002 // flush output buffer after every message
#define _STRACE_INHERIT  0x000004 // children inherit mask from parent
#define _STRACE_UHOH	 0x000008 // unusual or weird phenomenon
#define _STRACE_SYSCALL	 0x000010 // system calls
#define _STRACE_STARTUP	 0x000020 // argc/envp printout at startup
#define _STRACE_DEBUG    0x000040 // info to help debugging
#define _STRACE_PARANOID 0x000080 // paranoid info
#define _STRACE_TERMIOS	 0x000100 // info for debugging termios stuff
#define _STRACE_SELECT	 0x000200 // info on ugly select internals
#define _STRACE_WM	 0x000400 // trace windows messages (enable _strace_wm)
#define _STRACE_SIGP	 0x000800 // trace signal and process handling
#define _STRACE_MINIMAL	 0x001000 // very minimal strace output
#define _STRACE_PTHREAD	 0x002000 // pthread calls
#define _STRACE_EXITDUMP 0x004000 // dump strace cache on exit
#define _STRACE_SYSTEM	 0x008000 // cache strace messages
#define _STRACE_NOMUTEX	 0x010000 // don't use mutex for synchronization
#define _STRACE_MALLOC	 0x020000 // trace malloc calls
#define _STRACE_THREAD	 0x040000 // cygthread calls
#define _STRACE_NOTALL	 0x080000 // don't include if _STRACE_ALL
#define _STRACE_SPECIAL	 0x100000 // special case, only for debugging - do not check in

#ifdef __cplusplus
extern "C" {
#endif

void small_printf (const char *, ...);
void strace_printf (unsigned, const char *func, const char *, ...);

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus

#ifdef NOSTRACE
#define strace_printf_wrap(what, fmt, args...)
#define strace_printf_wrap1(what, fmt, args...)
#else
#define strace_printf_wrap(what, fmt, args...) \
   ((void) ({\
	if ((_STRACE_ ## what & _STRACE_SYSTEM) || strace.active ()) \
	  strace.prntf(_STRACE_ ## what, __PRETTY_FUNCTION__, fmt, ## args); \
	0; \
    }))
#define strace_printf_wrap1(what, fmt, args...) \
    ((void) ({\
	if ((_STRACE_ ## what & _STRACE_SYSTEM) || strace.active ()) \
	  strace.prntf((_STRACE_ ## what) | _STRACE_NOTALL, __PRETTY_FUNCTION__, fmt, ## args); \
	0; \
    }))
#define strace_vprintf(what, fmt, arg) \
    ((void) ({\
	if ((_STRACE_ ## what & _STRACE_SYSTEM) || strace.active ()) \
	  strace.vprntf((_STRACE_ ## what), __PRETTY_FUNCTION__, fmt, arg); \
	0; \
    }))
#endif /*NOSTRACE*/

#ifdef DEBUGGING
#define debug_only_printf(fmt, args...) debug_printf (fmt , ## args)
#else
#define debug_only_printf(fmt, args...) do {} while (0)
#endif
#define debug_printf(fmt, args...) strace_printf_wrap(DEBUG, fmt , ## args)
#define malloc_printf(fmt, args...) strace_printf_wrap1(MALLOC, fmt , ## args)
#define minimal_printf(fmt, args...) strace_printf_wrap1(MINIMAL, fmt , ## args)
#define paranoid_printf(fmt, args...) strace_printf_wrap1(PARANOID, fmt , ## args)
#define pthread_printf(fmt, args...) strace_printf_wrap1(PTHREAD, fmt , ## args)
#define select_printf(fmt, args...) strace_printf_wrap(SELECT, fmt , ## args)
#define sigproc_printf(fmt, args...) strace_printf_wrap(SIGP, fmt , ## args)
#define syscall_printf(fmt, args...) strace_printf_wrap(SYSCALL, fmt , ## args)
#define system_printf(fmt, args...) strace_printf_wrap(SYSTEM, fmt , ## args)
#define termios_printf(fmt, args...) strace_printf_wrap(TERMIOS, fmt , ## args)
#define thread_printf(fmt, args...) strace_printf_wrap1(THREAD, fmt , ## args)
#define special_printf(fmt, args...) strace_printf_wrap1(SPECIAL, fmt , ## args)
#define wm_printf(fmt, args...) strace_printf_wrap(WM, fmt , ## args)
#endif /* __cplusplus */
#endif /* _SYS_STRACE_H */
@


1.33
log
@	* Merge in cygwin-64bit-branch.
@
text
@d4 1
a4 1
   2010, 2011, 2012 Red Hat, Inc.
d43 1
a43 1
  void activate (bool) __attribute__ ((regparm (2)));;
d49 5
a53 5
  void dll_info () __attribute__ ((regparm (1)));
  void prntf (unsigned, const char *func, const char *, ...) /*__attribute__ ((regparm(3)))*/;
  void vprntf (unsigned, const char *func, const char *, va_list ap) /*__attribute__ ((regparm(3)))*/;
  void wm (int message, int word, int lon) __attribute__ ((regparm(3)));
  void write_childpid (pid_t) __attribute__ ((regparm (3)));
@


1.33.2.1
log
@2014-08-11  Corinna Vinschen  <corinna@@vinschen.de>

	* cpuid.h: Add missing copyright header.  Fix formatting.  Use uint32_t
	instead of unsigned throughout.  Change functions to static inline and
	always inline.
	(cpuid): Add parameter to set ecx, allowing to request extended CPUID
	info.
	* fhandler_proc.cc (format_proc_cpuinfo): Use uint32_t instead of
	unsigned throughout.  Add fake decimal places to MHz info.  Handle more
	feature flags.
	* fhandler_random.cc (fhandler_dev_random::write): Allow up to 4K
	input to add entropy.
	* syscalls.cc: Drop including cpuid.h.

2014-08-07  Yaakov Selkowitz  <yselkowi@@redhat.com>

	* common.din (__cxa_finalize): Export.
	* dcrt0.cc (cygwin_atexit): Use d->handle with __cxa_atexit.
	* dll_init.cc (dll_list::detach): Use d->handle with __cxa_finalize.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Use 274 for
	__cxa_finalize as well.

2014-08-04  Anthony Heading  <anthony@@ajrh.net>

	* include/sys/file.h: Add extern "C".

2014-08-04  Corinna Vinschen  <corinna@@vinschen.de>

	* common.din (__cxa_atexit): Export.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump to 274.

2014-07-31  Eric Blake  <eblake@@redhat.com>

	* include/pthread.h: Decorate attribute names with __, for
	namespace safety.
	* include/cygwin/core_dump.h: Likewise.
	* include/cygwin/cygwin_dll.h: Likewise.
	* include/sys/cygwin.h: Likewise.
	* include/sys/strace.h: Likewise.
@
text
@d4 1
a4 1
   2010, 2011, 2012, 2014 Red Hat, Inc.
d43 1
a43 1
  void activate (bool) __attribute__ ((__regparm__ (2)));;
d49 5
a53 5
  void dll_info () __attribute__ ((__regparm__ (1)));
  void prntf (unsigned, const char *func, const char *, ...) /*__attribute__ ((__regparm__(3)))*/;
  void vprntf (unsigned, const char *func, const char *, va_list ap) /*__attribute__ ((__regparm__(3)))*/;
  void wm (int message, int word, int lon) __attribute__ ((__regparm__(3)));
  void write_childpid (pid_t) __attribute__ ((__regparm__ (3)));
@


1.32
log
@Throughout, update copyrights to reflect dates which correspond to main-branch
checkins.  Regularize copyright format.
@
text
@d4 1
a4 1
   2010, 2011 Red Hat, Inc.
d32 1
d53 1
a53 1
  void write_childpid (unsigned long) __attribute__ ((regparm (3)));
@


1.31
log
@* cygthread.h (cygthread::name): Default name to "main" if we are early in the
process of setting up the DLL and no name is known.
* dcrt0.cc (initial_env): Remove CYGWIN_SLEEP stuff.
(get_cygwin_startup_info): Activate strace here as appropriate.
(dll_crt0_0): Move get_cygwin_startup_info as early as possible to avoid
missing strace output.
* fork.cc (frok::child): Move debugging statement to point where ppid will be
set.
* pinfo.cc (pinfo::thisproc): Remove obsolete call to strace.hello.  Tweak
debug output slightly.
* select.cc (select_stuff::wait): Allow APCS to be triggered while waiting
since we use them now.  Report when that happens.
* sigproc.cc (child_info::child_info): Use strace.active() rather than
strace.attached().
* spawn.cc (child_info_spawn::worker): Only write strace child pid when we know
it's a cygwin process.  Accommodate change to write_child argument list.
* strace.cc (strace::hello): Delete.  Move functionality...
(strace::activate): ...to here.
(mypid): Just use raw GetCurrentProcessId () if myself isn't set.
(strace::write_childpid): Don't wait for subproc_ready.  Remove arg which was
required for it.
* include/sys/strace.h (strace::hello): Delete.
(strace::write_childpid): Delete first argument.
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
   2005, 2008, 2010, 2011 Red Hat, Inc.
@


1.31.2.1
log
@	* fhandler_netdrive.cc: Use UINT32_MAX rather than UINT_MAX to make
	absolutely clear that we mean the 32 bit maximum.
	* fhandler_socket.cc: Ditto.
	* pinfo.cc: Ditto with INT32_MAX.
	* select.cc (fd_mask): Drop gratuitious definition.
	(sizeof_fd_set): Cast to size_t.
	* shared.cc (pround): Cast to ptrdiff_t.
	* strace.cc (strace::activate): Fix format string.
	(strace::write_childpid): Take pid_t as parameter.
	* include/sys/strace.h (strace::write_childpid): Change declaration
	accordingly.
	* sync.cc (muto::init): Cast in call to InterlockedExchangePointer to
	make compiler happy.
	* sync.h (class muto): De-const name.
	* syslog.cc (try_connect_syslogd): Take size_t as third argument.
	(vsyslog): Convert len to size_t.
	* thread.cc: Use {U}INT32_MAX rather than {U}LONG_MAX.  Througout change
	types used in Windows calls to matching Windows types.
	(pthread::cancel): Fix access to instruction pointer for x86_64.
	(pthread_attr_getstack): Cast to ptrdiff_t for pointer arithmetic.
	* thread.h: Throughout convert 'long' types to uint32_t or LONG.
@
text
@d52 1
a52 1
  void write_childpid (pid_t) __attribute__ ((regparm (3)));
@


1.31.2.2
log
@Fix copyrights.
@
text
@d4 1
a4 1
   2005, 2008, 2010, 2011, 2012 Red Hat, Inc.
@


1.31.2.3
log
@	* include/sys/strace.h: Include sys/types.h for pid_t.
@
text
@a31 1
#include <sys/types.h>
@


1.31.2.4
log
@Pull in changes from HEAD
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2008,
   2010, 2011, 2012 Red Hat, Inc.
@


1.30
log
@* child_info.h (CURR_CHILD_INFO_MAGIC): Reset for previous changes.
* dcrt0.cc (get_cygwin_startup_info): Signal readiness when stracing since
strace::write_child relies on it.  Use strace.activate to notify strace
process, passing in arg indicating whether we're forked.
* sigproc.cc (wait_sig): Accommodate new strace::activate argument.
* spawn.cc (child_info_spawn::worker): Oops.  Previous suspended test was
actually correct.  Revert and document.
* strace.cc (strace::activate): Send additional flag indicating whether this is
an attempt to activate a forked process.
(strace::hello): Report on windows pid.
* include/sys/strace.h (strace::strace): Make a dummy.
(strace::activate): Modify declaration to accept an argument.
(strace::write_childpid): Set regparm.
@
text
@a47 1
  void hello () __attribute__ ((regparm (1)));
d52 1
a52 1
  void write_childpid (child_info&, unsigned long) __attribute__ ((regparm (3)));
@


1.29
log
@* fhandler.h (fhandler_pipe::create_selectable): Remove optional argument, take
an options argument for CreateNamedPipe/CreateFile.  Change handle arguments to
expect pointers.
(fhandler_fifo::fifo_state): Delete.
(fhandler_fifo::dummy_client): Ditto.
(fhandler_fifo::open_nonserver): Ditto.
(fhandler_fifo::wait_state): Ditto.
(fhandler_fifo::raw_write): Ditto.
(fhandler_fifo::read_ready): New field.
(fhandler_fifo::write_ready): Ditto.
(fhandler_fifo::wait): Modify argument.
(fhandler_fifo::fifo_name): Add a new argument.
(fhandler_fifo::fixup_after_fork): New function.
* fhandler_fifo.cc (fhandler_fifo::fhandler_fifo): Remove initialization of
expunged elements.  Initialize new handles to NULL.
(fhandler_fifo::open_nonserver): Delete.
(fnevent): New macro for creating a named event.
(fnpipe): New macro for creating a unique named pipe name.
(create_pipe): New macro for simplification of named pipe creation.
(fhandler_fifo::fifo_name): Use new argument when creating a shared name.
(fhandler_fifo::open): Rewrite.  Use events to synchronize.
(pure_debug_printf): New macro, active only when DEBUGGING.
(fhandler_fifo::wait): Rewrite to wait for new fifo events which are supplied
as a parameter.
(fhandler_fifo::raw_read): Rewrite to use handle mechanism to detect
client-side disconnect.
(fhandler_fifo::raw_write): Delete.
(fhandler_fifo::close): Remove accommodations for expunged fields.  Close event
handles.
(fhandler_fifo::dup): Remove accommodations for expunged fields.  Duplicate
event handles.
(fhandler_fifo::fixup_after_fork): New function.  Perform fixups on event
handles.
(fhandler_fifo::set_close_on_exec): Remove accommodations for expunged fields.
Set inheritance for new handle fields.
* miscfuncs.cc (CreatePipeOverlapped): Accommodate changes in
fhandler_pipe::create_selectable.
* tty.cc (tty::not_allocated): Ditto.
* pipe.cc (fhandler_pipe::create): Ditto.
(fhandler_pipe::create_selectable): Accept an extra open_mode argument.  Pass
arguments by reference and allow opening one end of the pipe at a time.
* sys/strace.h (debug_only_printf): Define new macro which calls debug_printf
only when DEBUGGING is defined.
@
text
@d42 2
a43 2
  void activate ();
  strace () {activate ();}
d53 1
a53 1
  void write_childpid (child_info&, unsigned long) __attribute__ ((regparm (2)));
@


1.28
log
@* dll_init.cc: Use fabort in favor of api_fatal and fork_info->abort where
appropriate throughout.
(fabort): Define.
(dll_list::topsort): Don't print sorting information.  Fix formatting.
(dll_list::topsort_visit): Fix formatting.
(dll_list::load_after_fork_impl): Perform comment fixups.
* sigproc.cc (child_info_fork::abort): (for now?) Always print cause of fork
failure.
* include/sys/strace.h (strace_vprintf): Remove _STRACE_NOTALL when printing.
We really do want to see this.
@
text
@d128 5
@


1.27
log
@	* dcrt0.cc (dll_crt0_1): Call strace.dll_info after call to pinfo_init.
	* strace.cc (strace::hello): Drop printing DLL information here since
	application info is not always available at this point.
	(strace::dll_info): New method to print DLL info.
	* include/sys/strace.h (strace::dll_info): Declare.
@
text
@d123 1
a123 1
	  strace.vprntf((_STRACE_ ## what) | _STRACE_NOTALL, __PRETTY_FUNCTION__, fmt, arg); \
@


1.26
log
@* autoload.cc: Call _api_fatal in asm.
* child_info.h: Redefine CURR_CHILD_INFO_MAGIC.
(child_info_fork::abort): Rename from handle_failure.  Change arguments.
* cygtls.h (_local_storage::ttybuf): New field.
* dcrt0.cc (vapi_fatal): Split api_fatal.  Add "in forked process" to message
when appropriate.
(api_fatal): Use vapi_fatal.
* devices.h: Make multiple inclusion safe.
(fh_devices): Add FH_CONS* stuff.  Reorder slightly.
(device): Eliminate anonymous union.  Add more ways to access minor/major.
(device::setunit): Accommodate no-longer-anonymous union.
(device::is_fs): Ditto.
(device::is_fs_special): Ditto.
(device::major): New function.
(device::minor): Ditto.
(device::is_device): New function.
(device::not_device): Ditto.
(device::operator int): New operator.
(device::operator fh_devices): Ditto.
(device::operator bool): Ditto.
(device::operator DWORD): Ditto.
(device::operator =): Ditto.
(isproc_dev): New function.
(isprocsys_dev): Ditto.
(iscons_dev): Ditto.
(istty_slave_dev): Ditto.
* devices.in: Add new "/dev/cons*" strings.  Accommodate no-longer-anonymous
union throughout.
(BRACK): Use more precise method for initialization.
* devices.cc: Regenerate.
* dtable.cc (dtable::stdio_init): Use get_cttyp instead of get_tty.
(dtable::find_archetype): Use new DWORD operator in device to test archetypes.
(dtable::init_std_file_from_handle): Use different method to initialize 'dev'.
Adapt to different ctty handling and accommodate /dev/cons*.
(fh_alloc): Accommodate no-longer-anonymous union.  Adapt to new /dev/cons*.
(build_fh_pc): Make debugging output more useful.
* exceptions.cc (ctrl_c_handler): Use get_cttyp instead of get_tty.
* external.cc (fillout_pinfo): Accommodate new cons* stuff.
* fhandler.cc (fhandler_base::read): Eliminate is_slow() test.
* fhandler.h (fhandler_base::*): Adapt to changes in device.h.
(fhandler_*::is_slow): Delete.
( fhandler_proc::get_proc_fhandler): Return fh_devices type.
* fhandler_console.cc (open_shared_console): New function.
(console_unit): New class.
(console_unit::console_unit): New constructor.
(enum_windows): New function.  Declare as friend to console_unit.
(fhandler_console::set_unit): New function.
(fhandler_console::get_tty_stuff): Call set_unit to set the unit number and
determine if initialization is needed.  Eliminate flags parameter.
(tty_list::get_cttyp): Rename (sorta) from get_tty.  Return pointer to correct
tty_min.
(fhandler_console::open): Adapt to elimination of argument to get_tty_stuff.
(fhandler_console::output_tcsetattr): Properly detect error condition.
(fhandler_console::fixup_after_fork_exec): Adapt to get_tty_stuff() setting tc
automatically.
* fhandler_proc.cc: Use FH_BAD rather than 0 throughout where using fh_devices
enum.
(fhandler_proc::get_proc_fhandler): Return fh_devices.  Adapt to devices.h
changes.
* fhandler_process.cc: Adapt to devices.h changes.  Use FH_BAD rather than 0
throughout where using fh_devices enum.
* fhandler_procnet.cc: Ditto.
* fhandler_procsys.cc: Ditto.
* fhandler_procsysvipc.cc: Ditto.
* fhandler_tape.cc (fhandler_dev_tape::fhandler_dev_tape): Ditto.
* fhandler_termios.cc (handler_termios::bg_check): Use tc->ttyname() rather
than assuming that we can construct a tty.
* fhandler_tty.cc (fhandler_tty_master::fhandler_tty_master): Just return
get_minor() of dev.
(fhandler_pty_master::process_slave_output): Add slightly more debugging info.
(fhandler_tty_slave::fhandler_tty_slave): Change name from ntty to unit.
(fhandler_pty_master::open): Ditto.
(fhandler_tty_slave::ioctl): Adapt to change which causes ctty to represent a
complete device.
(fhandler_tty_master::init_console): Add debugging for failure path.
(fhandler_pty_master::setup): Use get_unit() to retrieve unit number rather
than relying on raw ntty.
(fhandler_pty_master::setup): Ditto.
* fhandler_virtual.h (virt_tab_t): Redefine fhandler as fh_devices.
* fork.cc: Remove obsolete vfork stuff.
(frok::child): Don't assume that a ctty == 0 is valid.
* mount.cc (mount_info::conv_to_win32_path): Adapt to device struct changes.
(mount_info::conv_to_win32_path): Ditto.
* path.cc (path_conv::check): Retrive major/minor numbers via a method rather
than accessing them directly from device.  Rely on dev operators to
set/retrieve device information as required by device struct change.
* path.h (isproc_dev): Move to devices.h.
(isprocsys_dev): Ditto.
(isvirtual_dev): Ditto.
(path_conv:{isdevice,isfifo,isspecial,iscygdrive,issocket,get_devn,get_unitn}):
Use device methods to access/manipulate devices.
* pinfo.cc (pinfo::exit): Don't assume that ctty == 0 is valid.  Use iscons_dev
to determine if a device is a console.
(_pinfo::_ctty): Use device::parse to generate tty/cons name.
(_pinfo::set_ctty): Don't assume that ctty == 0 is valid.  Remove redundant
info from debugging.
* shared.cc (offsets): Remove console offset.
* shared_info.h (shared_locations): Ditto.
* syscalls.cc (umask): Use device methods to manipulate device information.
(ctermid): Use device::parse to generate term device name.
* tlsoffsets.h: Regenerate.
* tty.cc (ttyslot): Return minor number of ctty since ctty now represents a
full device.
(tty::create_master): Set ctty to a complete device.
(tty_list::attach): Rework to detect new /dev/cons* stuff.
(tty_list::terminate): Adapt to changes to ctty.
(tty_list::init): Adapt to change to setntty - pass in device major number.
(tty::exists): Use get_unit() to retrive tty unit number.
(tty::open_mutex): Ditto.
(tty::open_inuse): Ditto.
(tty::create_inuse): Ditto.
(tty::get_event): Ditto.
(tty_min::ttyname): Define new function.
* tty.h (tty_min::ntty): Redefine as fh_devices.
(tty::exists): Use get_unit() to retrive tty unit number.
(tty::open_mutex): Ditto.
(tty::open_inuse): Ditto.
(tty::create_inuse): Ditto.
(tty::get_event): Ditto.
(tty_min::ttyname): Declare new function.
(tty::getntty): Declare as const.
(tty_list::operator []): Assure that only minor part of argument is used.
* dll_init.cc (dll_list::alloc): Detect mismatch of data segments early issuing
an explicit error message if necessary.
* heap.cc (heap_init): Adapt to changes from fork->handle_failure to
fork->abort.
* pinfo.h (EXITCODE_FORK_FAILED): New enum.  (from Ryan Johnson)
* sigproc.cc (child_info_fork::abort): Rename from handle_failure.  Change
arguments to allow passing in a printf-like message.
* winsup.h (api_fatal): Delete macro definition.
(api_fatal): Redefine from __api_fatal.
(vapi_fatal): Declare new function.
* include/sys/strace.h (strace_vprintf): Define new macro.
* ntdll.h (_SYSTEM_INFORMATION_CLASS): Add SystemHandleInformation.
@
text
@d49 1
@


1.25
log
@* sigproc.cc (wait_sig): Make sure that strace is activated on __SIGSTRACE by
calling new strace::activate function.
* strace.cc (strace::activate): Rename from strace::strace.
* strace.h (strace::activate): Define new function.
(strace::strace): Call activate.
@
text
@d4 1
a4 1
   2005, 2008, 2010 Red Hat, Inc.
d119 6
@


1.24
log
@* include/sys/strace.h: Define _STRACE_SPECIAL.
(strace_printf_wrap): Fix NOSTRACE definitions.
(strace_printf_wrap1): Fix NOSTRACE definitions.
(special_printf): Define.
* thread.cc: Perform minor syntax fix in a comment.  Rename
"is_good_initialzer*" to "is_initializer*" throughout.  Use pthread_printf
rather than debug_printf throughout.  Add extra pthread_printf debugging
throughout.
(pthread_mutex::_new_mutex): New constant value.
(pthread_mutex::_unlocked_mutex): Ditto.
(pthread_mutex::_destroyed_mutex): Ditto.
(pthread_mutex::no_owner): Define new function.
(pthread_mutex::can_be_unlocked): Detect no_owner situation.  Handle
PTHREAD_MUTEX_NORMAL as a special case.
(pthread::create_cancel_event): Use C++ boolean values.
(pthread::precreate): Use method to set mutex type.
(pthread_cond::pthread_cond): Ditto.
(pthread_rwlock::pthread_rwlock): Ditto.
(pthread_mutex::pthread_mutex): Set owner to _new_mutex initially.
(pthread_mutex::~pthread_mutex): Reset various elements to make it clearer if
they are incorrectly reused.
(pthread_mutex::lock): Add clarifying comment.
(pthread_mutex::unlock): Attempt to handle various mutex types correctly.  In
particular, reinstate ability to have one thread unlock another thread's mutex
if type == PTHREAD_MUTEX_NORMAL.
(semaphore::_fixup_after_fork): Avoid redundancy.
(pthread_mutex::_fixup_after_fork): Ditto.  Fix debugging statement.
(__pthread_cond_dowait): Accommodate changes to remove previously inexplicable
use can_be_unblocked() as a static function.
* thread.h: Rename "is_good_initialzer*" to "is_initializer*" throughout.
(pthread_mutex): Reorganize.  Make many things private.
(pthread_mutex::no_owner): Define new method.
(pthread_mutex::_new_mutex): Define new constant.
(pthread_mutex::_unlocked_mutex): Ditto.
(pthread_mutex::_destroyed_mutex): Ditto.
@
text
@d42 2
a43 1
  strace ();
@


1.23
log
@Update copyright
@
text
@d67 21
a87 20
#define _STRACE_ALL	 0x00001 // so behaviour of strace=1 is unchanged
#define _STRACE_FLUSH	 0x00002 // flush output buffer after every message
#define _STRACE_INHERIT  0x00004 // children inherit mask from parent
#define _STRACE_UHOH	 0x00008 // unusual or weird phenomenon
#define _STRACE_SYSCALL	 0x00010 // system calls
#define _STRACE_STARTUP	 0x00020 // argc/envp printout at startup
#define _STRACE_DEBUG    0x00040 // info to help debugging
#define _STRACE_PARANOID 0x00080 // paranoid info
#define _STRACE_TERMIOS	 0x00100 // info for debugging termios stuff
#define _STRACE_SELECT	 0x00200 // info on ugly select internals
#define _STRACE_WM	 0x00400 // trace windows messages (enable _strace_wm)
#define _STRACE_SIGP	 0x00800 // trace signal and process handling
#define _STRACE_MINIMAL	 0x01000 // very minimal strace output
#define _STRACE_PTHREAD	 0x02000 // pthread calls
#define _STRACE_EXITDUMP 0x04000 // dump strace cache on exit
#define _STRACE_SYSTEM	 0x08000 // cache strace messages
#define _STRACE_NOMUTEX	 0x10000 // don't use mutex for synchronization
#define _STRACE_MALLOC	 0x20000 // trace malloc calls
#define _STRACE_THREAD	 0x40000 // cygthread calls
#define _STRACE_NOTALL	 0x80000 // don't include if _STRACE_ALL
d103 2
a104 2
#define define_strace(c, f)
#define define_strace1(c, f)
d118 1
d131 1
a132 1
#endif /*NOSTRACE*/
@


1.22
log
@utils/ChangeLog:
* strace.cc (mnemonic_table): Add pthread mask option.
(usage): Document strace pthread mask option.
* utils.sgml: Ditto.

cygwin/ChangeLog:
* include/sys/strace.h: Remove old code.  Add support for ptrace
tracing.
@
text
@d4 1
a4 1
   2005 Red Hat, Inc.
@


1.21
log
@* pinfo.cc (pinfo_basic): New class.
(pinfo_basic::pinfo_basic): Define constructor for new class.
(myself): Initialize from myself_initial.
(set_myself): Set pid and progname from already myself_initial.
* strace.cc (strace::strace): Split apart strace::hello.  Send notification to
strace as early as possible.
(strace::hello): Just send clause which describes the current process.  This
can now be preceded by early initialization strace output.
* include/sys/strace.h (strace::strace): Declare new constructor.
@
text
@d80 1
d85 1
a85 1
#define _STRACE_THREAD	 0x40000 // thread-locking calls
a104 25
#ifdef NEW_MACRO_VARARGS
/* Output message to strace log */

#define define_strace0(c,...) \
  do { \
      if ((c & _STRACE_SYSTEM) || strace.active ()) \
	strace.prntf (c, __PRETTY_FUNCTION__, __VA_ARGS__); \
    } \
  while (0)

#define define_strace(c, ...) define_strace0 (_STRACE_ ## c, __VA_ARGS__)
#define define_strace1(c, ...) define_strace0 ((_STRACE_ ## c | _STRACE_NOTALL), __VA_ARGS__)

#define debug_printf(...)	define_strace (DEBUG, __VA_ARGS__)
#define paranoid_printf(...)	define_strace1 (PARANOID, __VA_ARGS__)
#define select_printf(...)	define_strace (SELECT, __VA_ARGS__)
#define sigproc_printf(...)	define_strace (SIGP, __VA_ARGS__)
#define syscall_printf(...)	define_strace (SYSCALL, __VA_ARGS__)
#define system_printf(...)	define_strace (SYSTEM, __VA_ARGS__)
#define termios_printf(...)	define_strace (TERMIOS, __VA_ARGS__)
#define wm_printf(...)		define_strace (WM, __VA_ARGS__)
#define minimal_printf(...)	define_strace1 (MINIMAL, __VA_ARGS__)
#define malloc_printf(...)	define_strace1 (MALLOC, __VA_ARGS__)
#define thread_printf(...)	define_strace1 (THREAD, __VA_ARGS__)
#else
d119 2
d122 1
d128 1
a129 4
#define minimal_printf(fmt, args...) strace_printf_wrap1(MINIMAL, fmt , ## args)
#define malloc_printf(fmt, args...) strace_printf_wrap1(MALLOC, fmt , ## args)
#define thread_printf(fmt, args...) strace_printf_wrap1(THREAD, fmt , ## args)
#endif /*NEW_MACRO_VARARGS*/
@


1.20
log
@*** cygwin DLL Changes:
* child_info.h (CURR_CHILD_INFO_MAGIC): Reset.
(child_info::dwProcessId): Delete.
(child_info::straced): New variable.
(child_info::handle_fork): New member function.
* dcrt0.cc (in_forkee): New global variable.
(__cygwin_user_data::forkee): Mark as obsolete.
(do_global_ctors): Use in_forkee rather than user_data->forkee.
(get_cygwin_startup_info): Ditto.  Deal with new straced field to allow strace
to deal with children of attached processes.
(initial_env): Accommodate changes to strace::hello.
(child_info_fork::handle_fork): Rename from plain old 'handle_fork'.  Move
alloc_stack() call elsewhere.
(dll_crt0_0): Fill out more of user_data.  Reference handle_fork via fork_info.
Add some debugging output.
(_dll_crt0): Don't wait for sync thread if sync_startup is invalid.  Zero
sync_startup here.  Call alloc_stack() here, if appropriate.
(dll_crt0_1): Use in_forkee rather than user_data->forkee.
(dll_crt0): Ditto.
* malloc_wrapper.cc (malloc_init): Ditto.
* dll_init.cc (in_forkee): Remove local static version of this variable.
(dll_list::load_after_fork): Don't set in_forkee here.
* external.cc (cygwin_internal): Use strace method rather than accessing field
directly.
* fhandler.cc (fhandler_base::read): Ditto.
* fhandler_tty.cc (fhandler_tty_common::__acquire_output_mutex): Ditto.
* fork.cc (frok::parent): Invoke strace write_childpid to communicate with
potential strace.
(child_copy): Add more detail to debugging output.
* init.cc (calibration_id): New static variable.
(prime_threads): Set sync_startup to invalid handle if we already know about
thread_func_ix.  Use static calibration_id to hold calibration thread id.
* munge_threadfunc (munge_threadfunc): Don't try to debug if we don't find
threadfunc_ix.
(dll_entry): Avoid calling munge_threadfunc and _cygtls::remove on non-cygwin
threads invoked during process startup.
* pinfo.cc (set_myself): Always call strace.hello here regardless of DEBUGGING.
* sigproc.cc (child_info::child_info): Remove spurious handling of dwProcessId.
Set straced as appropriate.
* spawn.cc (spawn_guts): Rename ciresrv to ch.  Invoke strace write_childpid to
communicate with potential strace.
* strace.cc: Include child_info.h.
(strace::hello): Remove inited test.  Use active() method to test if strace has
been activated.  Handle case where we are started before
(mypid): New function.
(strace::vsprntf): Try to deal more intelligently with case where progname may
not be filled out.  Put pid in parentheses if it is a windows pid rather than a
cygwin pid.  myself has been filled out.
(strace::write_childpid): New function for notifying strace about the creation
of children.
(strace::vprntf): Use strace method rather than accessing field directly.
(strace_printf): Ditto.
(strace::wm): Ditto.
* winsup.h (in_forkee): Declare.
* include/sys/strace.h (strace::write_childpid): Declare new function.
(strace::attached): Define new function.
(strace::active): Ditto.
(strace::active_val): Ditto.
(_STRACE_ON): Delete.
(_STRACE_OFF): Ditto.
(define_strace0): Use strace method rather than accessing field directly.
(strace_printf_wrap): Ditto.
(strace_printf_wrap1): Ditto.

*** cygwin utils changes:
* strace.cc (nprocesses): Make static global.
(quiet): New variable.
(strace_active): Ditto.
(add_child): Increment nprocesses here.  Don't add a child if it is already
added (windows bug?).  Report on child if not quiet.
(get_child): Just return NULL if child not found.
(remove_child): Report on child if not quiet.
(attach_process): Don't complain if given a windows process.  Use windows pid
in error.
(handle_output_debug_string): Issue error if trying to manipulate a process
that we don't know about.  Handle _STRACE_CHILD_PID - attach to reported child
when we get this.
(proc_child): Move nprocesses to file scope.  Report on exceptions.
(longopts): Implement "--quiet".
(opts): Implement "-q".
(main): Manipulate quiet flag.
* utils.sgml (strace): Add words describing '-q'.
@
text
@d42 1
@


1.19
log
@* include/sys/strace.h (_STRACE_ON): Remove semicolon from definition.
(_STRACE_OFF): Remove semicolon from definition.
@
text
@d3 2
a4 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001 Red Hat, Inc.
a11 2
/* sys/strace.h */

d35 1
d40 1
a43 1
  int active;
d45 2
a46 3
  int execing;
  int inited;
  void hello ();
d50 4
d62 1
a84 7
#if defined (DEBUGGING)
# define _STRACE_ON strace.active = 1
# define _STRACE_OFF strace.active = 0
#else
# define _STRACE_ON
# define _STRACE_OFF
#endif
d108 1
a108 1
      if ((c & _STRACE_SYSTEM) || strace.active) \
d130 1
a130 1
	if ((_STRACE_ ## what & _STRACE_SYSTEM) || strace.active) \
d136 1
a136 1
	if ((_STRACE_ ## what & _STRACE_SYSTEM) || strace.active) \
@


1.18
log
@* include/sys/strace.h: Don't output paranoid_printf by default.
@
text
@d82 2
a83 2
# define _STRACE_ON strace.active = 1;
# define _STRACE_OFF strace.active = 0;
@


1.17
log
@* include/sys/strace.h (paranoid_printf): Define as not being part of "all"
output.
* pwdgrp.h (pwdgrp::next_num): Rename from next_int.  Returns true/false if
parse operation succeeded.
(pwdgrp::reparse): Remove.
(pwdgrp::raw_ptr): New function.  Returns pointer in line.
(pwdgrp::next_num): New functions for parsing other than unsigned long.
* grp.cc (pwdgrp::parse_group): Reinstate previous parsing behavior.  Don't
fill in fields with NULL and assign empty gr_mem to known pointer rather than
doing a pointless calloc.  Streamline gr_mem parsing.  Don't increment
curr_lines here.
* passwd.cc (pwdgrp::parse_passwd): Use new behavior of next_num.  Don't
increment curr_lines here.
* uinfo.cc (pwdgrp::next_str): Keep returning EOL if out of data.
(pwdgrp::reparse): Remove.
(pwdgrp::next_num): Rename from next_int.  Return bool indicating success of
parse, argument returns value parsed.
(pwdgrp::add_line): Increment curr_lines here on successful parse.
(pwdgrp::load): (from Pierre Humblet) Don't return status.  Just report it
here.
@
text
@d120 1
a120 1
#define paranoid_printf(...)	define_strace (PARANOID, __VA_ARGS__)
@


1.16
log
@* include/sys/strace.h (strace): Avoid use of constructor.
@
text
@d145 1
a145 1
#define paranoid_printf(fmt, args...) strace_printf_wrap(PARANOID, fmt , ## args)
@


1.16.20.1
log
@merge from trunk
@
text
@d145 1
a145 1
#define paranoid_printf(fmt, args...) strace_printf_wrap1(PARANOID, fmt , ## args)
@


1.15
log
@* exceptions.cc (unused_sig_wrapper): Eliminate unused parameter to asm.
* external.cc (cygwin_internal): Change CW_STRACE_ON to CW_STRACE_TOGGLE.
* strace.cc (strace::hello): Toggle strace on and off.
* sync.cc (muto::init): Renamed from constructor.
* sync.h (muto::new): Delete.
(muto::delete): Ditto.
(new_muto): Simplify.  Use muto.init for nearly everything.
* uinfo.cc (uinfo_init): Avoid closing a NULL handle.
* include/sys/cygwin.h (cygwin_getinfo_types): Rename CW_STRACE_OFF to
CW_STRACE_TOGGLE.  Delete CW_STRACE_OFF.
* include/sys/strace.h (strace): Add "inited" field.
@
text
@a46 1
  strace() : version(1) {}
@


1.14
log
@* external.cc (cygwin_internal): Initialize various internal settings if
required to allow use of some things from user loaded DLL.
(CW_STRACE_ON): Add new feature.
(CW_CYGWIN_PID_TO_WINPID): Ditto.
* pinfo.cc (set_myself): Call "strace.hello" to initiate possible strace
session.
(pinfo::init): Guard against dereferencing uninitialized myself.
* sigproc.cc (wait_sig): Call strace.hello() when __SIGTRACE "signal" received.
* strace.cc (strace::hello): New method.
* wincap.cc (wincapc::init): Avoid initializing if already initialized.
* wincap.h (wincapc::wincapc): New method.
* include/sys/cygwin.h: Add new CW_ enums.  Kludge typedefs of {g,u}id_t if
required.
* strace.h (strace::hello): Declare new method.
@
text
@d46 1
@


1.13
log
@* include/sys/strace.h (_STRACE_ON): Define.
(_STRACE_OFF): Ditto.
@
text
@d47 1
@


1.12
log
@* cygrun.c (main): Fix compiler warning.
* gmon.c (_mcleanup): Ditto.
* profil.c (profile_off): Ditto.
* net.cc (find_winsock_errno): New function.
(__set_winsock_errno): Use find_winsock_errno.
(cygwin_setsockopt): Detect SO_ERROR for debugging.
(cygwin_getsockopt): Ditto.  Translate error when getsockopt returns SO_ERROR.
* winsup.h: regparmize __set_winsock_errno.
* include/sys/strace.h: Document that strace functions can't use regparm.
@
text
@d80 7
@


1.12.8.1
log
@Merged changes from HEAD
@
text
@a45 1
  int inited;
a46 1
  void hello ();
a79 7
#if defined (DEBUGGING)
# define _STRACE_ON strace.active = 1;
# define _STRACE_OFF strace.active = 0;
#else
# define _STRACE_ON
# define _STRACE_OFF
#endif
@


1.12.8.2
log
@Merged changes from HEAD
@
text
@d47 1
@


1.11
log
@Update copyright.
@
text
@d47 3
a49 3
  void prntf (unsigned, const char *func, const char *, ...);
  void vprntf (unsigned, const char *func, const char *, va_list ap);
  void wm (int message, int word, int lon);
@


1.10
log
@        * include/a.out.h: Add copyright hint.
        * include/fcntl.h: Ditto.
        * include/lastlog.h: Ditto.
        * include/memory.h: Ditto.
        * include/mntent.h: Ditto.
        * include/paths.h: Ditto.
        * include/poll.h: Ditto.
        * include/syslog.h: Ditto.
        * include/termio.h: Ditto.
        * include/tzfile.h: Ditto.
        * include/arpa/inet.h: Ditto.
        * include/asm/byteorder.h: Ditto.
        * include/asm/socket.h: Ditto.
        * include/asm/types.h: Ditto.
        * include/cygwin/if.h: Ditto.
        * include/cygwin/mtio.h: Ditto.
        * include/cygwin/rdevio.h: Ditto.
        * include/cygwin/socket.h: Ditto.
        * include/net/if.h: Ditto.
        * include/netinet/in.h: Ditto.
        * include/netinet/in_systm.h: Ditto.
        * include/netinet/ip.h: Ditto.
        * include/netinet/ip_icmp.h: Ditto.
        * include/netinet/tcp.h: Ditto.
        * include/sys/cdefs.h: Ditto.
        * include/sys/cygwin.h: Ditto.
        * include/sys/ioctl.h: Ditto.
        * include/sys/mman.h: Ditto.
        * include/sys/mount.h: Ditto.
        * include/sys/mtio.h: Ditto.
        * include/sys/procfs.h: Ditto.
        * include/sys/resource.h: Ditto.
        * include/sys/smallprint.h: Ditto.
        * include/sys/socket.h: Ditto.
        * include/sys/strace.h: Ditto.
        * include/sys/syslog.h: Ditto.
        * include/sys/sysmacros.h: Ditto.
        * include/sys/termio.h: Ditto.
        * include/sys/termios.h: Ditto.
        * include/sys/uio.h: Ditto.
        * include/sys/un.h: Ditto.
        * include/sys/utsname.h: Ditto.
        * include/sys/vfs.h: Ditto.
        * include/sys/wait.h: Ditto.
        * regexp/regerror.c: Ditto.
        * regexp/regexp.h: Ditto.
        * regexp/regmagic.h: Ditto.
@
text
@d3 1
a3 1
   Copyright 1996-2001 Red Hat, Inc.
@


1.9
log
@        * strace.cc (strace::vprntf): Move prntf functionality to this function
        adding an va_list interface to strace.
        (strace::printf): Calls strace::vprntf now.
        (strace_printf): New function providing an extern "C" interface to
        trace output.
        * include/sys/strace.h: Make plain C clean.
        (class strace): Add `vprntf' method.
@
text
@d1 10
@


1.8
log
@* exceptions.cc (signal_exit): Kill any executing child process if we're dying.
* path.h: Remove unneeded extern.
* spawn.cc (std_suffixes): Make static.  Don't set dwProcessId here since it
makes the process unsignalable.  Set strace flag that this is an execed process
stub.
* strace.cc (strace::vsprntf): Use strace flag to indicate when to visually
flag that this is an exec stub.
* include/sys/strace.h (strace): Add 'execing' flag.
@
text
@d24 2
d38 1
d44 2
d71 12
a82 1
extern "C" void small_printf (const char *, ...);
d139 1
@


1.7
log
@* Makefile.in: Remove some obsolete stuff.
* dcrt0.cc (dll_crt0_1): Call signal_fixup_after_exec where appropriate.  Set
myself->uid from parent version.  Just use ThreadItem Init method.  Close or
store hexec_proc as appropriate.
(_dll_crt0): Store user_data->forkee here so that proper tests can be made
subsequently.
(do_exit): Remove hExeced stuff.
* environ.cc (environ_init): Accept environ count as well as environ pointer.
* environ.h: Reflect above change.
* pinfo.cc (pinfo_init): Ditto.  Accept environ count.
(fixup_in_spawned_child): Remove.
* spawn.cc (spawn_guts): Move signal code to dll_crt0_1.  Don't suspend execing
process since it is no longer necessary.  Store envc.
* exceptions.cc (signal_fixup_after_exec): New function.
(call_handler): Remove hExeced test.
* child_info.h (cygheap_exec_info): Store envc as well as envp.
(child_info_spawn): Store hexec_proc so that it can be closed in child.
* path.cc (normalize_posix_path): Avoid intermediate use of temporary cwd buf.
(normalize_win32_path): Ditto.
(cwdstuff::get_initial): Always set lock.
* sigproc.h: Remove hExeced.
* strace.cc (strace::vsprntf): Modify to accomodate for lack of hExeced.
* thread.cc (MTinterface::Init): Merge Init1 and ClearReent into this method.
(MTinterface::Init1): Eliminate.
(MTinterface::ClearReent): Eliminate.
* thread.h: Reflect above changes.
* include/sys/strace.h (strace): Make microseconds() public.  Make various
functions 'regparm', throughout.
* pinfo.h (_pinfo): Inline simple signal manipulation functions.  Requires
inclusion of thread.h which was removed from .cc files, where appropriate.
throughout.
* pinfo.cc: Eliminate signal manipulation functions.
(_pinfo::exit): Calculate total rusage for exiting process here.
* cygheap.cc (size2bucket): Eliminate.
(init_buckets): Ditto.
(_cmalloc): Calculate size and bits in a loop rather than going through a
function call.
(_crealloc): Use stored array index to calculate allocated size.
* spawn.cc (spawn_guts): Use _pinfo exit method to exit, calculating cpu usage.
@
text
@d33 1
@


1.6
log
@* include/sys/cygwin.h (strace_printf_wrap): Force printing when
_STRACE_SYSTEM.
(strace_printf_wrap1): Ditto.
@
text
@a25 1
  int microseconds ();
d29 1
@


1.5
log
@* strace.cc (strace::prntf): Make second argument the function name, rather
than use special format options.
(strace::vprntf): Ditto.
(getfunc): New function.
* include/sys/strace.h: Reflect above changes.
* smallprint.c (__small_vsprintf): Eliminate '%F' formatting.
* pinfo.cc (set_myself): Modify for new strace::prntf parameter.
* errno.cc (seterrno_from_win_error): Ditto.
* fhandler_tty.cc (fhandler_tty_common::__acquire_output_mutex): Ditto.
* fhandler_tty.cc (fhandler_tty_common::__release_output_mutex): Ditto.
@
text
@d98 1
a98 1
	if (strace.active) \
d104 1
a104 1
	if (strace.active) \
@


1.4
log
@* include/sys/strace.h: Fix strace definition.
@
text
@d27 1
a27 1
  int vsprntf (char *buf, const char *infmt, va_list ap);
d34 1
a34 1
  void prntf (unsigned, const char *, ...);
d77 1
a77 1
	strace.prntf (c, "%F: " __VA_ARGS__); \
d99 1
a99 1
	  strace.prntf(_STRACE_ ## what, "%F: " fmt, __PRETTY_FUNCTION__ , ## args); \
d105 1
a105 1
	  strace.prntf((_STRACE_ ## what) | _STRACE_NOTALL, "%F: " fmt, __PRETTY_FUNCTION__ , ## args); \
@


1.3
log
@* strace.h: Add kludgy workarounds to avoid using deprecated methods for
variable argument macros when possible.
* sigproc.cc: Throughout, use sigproc_printf rather than sip_printf.
* strace.cc (strace::prntf): Remove 'active' check, since callers are supposed
to ensure this.
(__system_printf): Remove.  Subsumed by strace::prntf.
* winsup.h: Define "NEW_MACRO_VARARGS" to indicate when to use new macro
varargs capability.
@
text
@d76 1
a76 1
      if (c & _STRACE_SYSTEM || strace.active) \
d82 1
a82 1
#define define_strace1(c, ...) define_strace0 (_STRACE_ ## c | _STRACE_NOTALL, __VA_ARGS__)
@


1.2
log
@Throughout use strace class in place of individual functions and variables.
* cygwin.din: Eliminate _strace_wm.
* sigproc.cc (wait_sig): Temporarily add more debugging output.
* include/cygwin/version.h: Bump minor api to reflect export change.
@
text
@a25 1
  friend void __system_printf (const char *fmt, ...);
d34 1
a34 1
  void prntf (unsigned category, const char *fmt,...);
d38 2
d59 1
a59 1
#define _STRACE_CACHE	 0x08000 // cache strace messages
d67 5
a71 1
#ifndef NOSTRACE
a72 2
#define system_printf(fmt, args...) \
  __system_printf("%F: " fmt, __PRETTY_FUNCTION__ , ## args)
d74 22
a107 1
#endif /*NOSTRACE*/
d110 3
d114 1
a114 1
#define paranoid_printf(fmt, args...) strace_printf_wrap(PARANOID, fmt , ## args)
a115 1
#define select_printf(fmt, args...) strace_printf_wrap(SELECT, fmt , ## args)
a116 1
#define sigproc_printf(fmt, args...) strace_printf_wrap(SIGP, fmt , ## args)
d120 2
a121 1

@


1.1
log
@Initial revision
@
text
@d22 1
a22 3
#ifdef __cplusplus
extern "C" {
#endif
d24 17
a40 1
#define _STRACE_INTERFACE_ACTIVATE_ADDR -1
d64 1
a64 1
void small_printf (const char *, ...);
d66 1
a66 6
#ifdef NOSTRACE
#define strace_printf(category, fmt...) 0
#define strace_printf_wrap(category, fmt...) 0
#define strace_printf_wrap1(category, fmt...) 0
#define strace_wm(category, msg...) 0
#else
a67 3
void strace_printf (unsigned, const char *, ...);
void __system_printf (const char *, ...);

a70 2
void _strace_wm (int __message, int __word, int __lon);

d73 2
a74 2
	if (strace_active) \
	  strace_printf(_STRACE_ ## what, "%F: " fmt, __PRETTY_FUNCTION__ , ## args); \
d79 2
a80 2
	if (strace_active) \
	  strace_printf((_STRACE_ ## what) | _STRACE_NOTALL, "%F: " fmt, __PRETTY_FUNCTION__ , ## args); \
a94 4

#ifdef __cplusplus
}
#endif
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
