head	1.10;
access;
symbols
	cygwin-1_7_35-release:1.10
	cygwin-1_7_34-release:1.10
	cygwin-1_7_33-release:1.10
	cygwin-1_7_32-release:1.10
	cygwin-1_7_31-release:1.10
	cygwin-1_7_30-release:1.10
	cygwin-1_7_29-release:1.10
	cygwin-1_7_29-release-branchpoint:1.10.0.4
	cygwin-pre-user-db:1.10
	cygwin-1_7_28-release:1.10
	cygwin-1_7_27-release:1.10
	cygwin-1_7_26-release:1.10
	cygwin-1_7_25-release:1.10
	cygwin-1_7_24-release:1.10
	cygwin-1_7_23-release:1.10
	cygwin-1_7_22-release:1.10
	cygwin-1_7_21-release:1.10
	cygwin-1_7_20-release:1.10
	cygwin-1_7_19-release:1.10
	cygwin-64bit-postmerge:1.10
	cygwin-64bit-premerge-branch:1.10.0.2
	cygwin-64bit-premerge:1.10
	cygwin-1_7_18-release:1.10
	post-ptmalloc3:1.9.2.1
	pre-ptmalloc3:1.9.2.1
	cygwin-1_7_17-release:1.9
	cygwin-64bit-branch:1.9.0.2
	cygwin-1_7_16-release:1.8
	cygwin-1_7_15-release:1.8
	cygwin-1_7_14_2-release:1.8
	cygwin-1_7_14-release:1.8
	cygwin-1_7_12-release:1.8
	cygwin-1_7_11-release:1.8
	cygwin-1_7_10-release:1.7
	signal-rewrite:1.4.0.12
	pre-notty:1.4
	cygwin-1_7_9-release:1.4
	cv-post-1_7_9:1.4.0.10
	cygwin-1_7_8-release:1.4
	cygwin-1_7_7-release:1.4
	cygwin-1_7_5-release:1.4
	cygwin-1_7_4-release:1.4
	cygwin-1_7_3-release:1.4
	cygwin-1_7_2-release:1.4
	fifo_doover3:1.4.0.8
	cygwin-1_7_1-release:1.4
	prefifo:1.4
	cv-branch-2:1.4.0.6
	pre-ripout-set_console_state_for_spawn:1.4
	EOL_registry_mounts:1.4
	preoverlapped:1.4
	drop_9x_support_start:1.4
	cr-0x5f1:1.4.0.4
	cv-branch:1.4.0.2
	pre-ptymaster-archetype:1.3
	cr-0x3b58:1.3.0.4
	cr-0x5ef:1.3.0.2
	after-mmap-privanon-noreserve:1.3
	after-mmap-revamp:1.3
	before-mmap-revamp:1.3
	cgf-more-exit-sync:1.3
	post_wait_sig_exit:1.3
	pre_wait_sig_exit:1.3
	reparent-point:1.2
	noreparent:1.2.0.18
	cr-0x5e6:1.2.0.16
	cr-0x9e:1.2.0.14
	cr-0x9d:1.2.0.12
	cgf-deleteme:1.2.0.10
	pre-sigrewrite:1.2
	corinna-01:1.2
	cr-0x9c:1.2.0.6
	cr-0x9b:1.2.0.4
	cr-0x99:1.2
	Z-emcb-cygwin_daemon:1.2.0.2
	w32api-2_2:1.2
	mingw-runtime-2_4:1.2
	pre-cgf-merge:1.2
	cgf-dev-branch:1.2.0.60
	predaemon:1.2
	cygwin_daemon_merge_HEAD:1.2
	pregp02r1:1.2.0.38
	cygnus_cvs_20020108_pre:1.2
	Z-cygwin_daemon_merge-new_HEAD:1.2
	Z-cygwin_daemon_merge_HEAD:1.2
	cygwin_daemon:1.2.0.8;
locks; strict;
comment	@ * @;
expand	@o@;


1.10
date	2013.01.21.04.38.31;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2012.08.08.09.39.36;	author corinna;	state Exp;
branches
	1.9.2.1;
next	1.8;

1.8
date	2012.02.08.19.51.13;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2011.12.08.18.24.24;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2011.12.08.06.58.10;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2011.10.06.16.02.37;	author chrfranke;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.12.14.25.05;	author corinna;	state Exp;
branches;
next	1.3;

1.3
date	2004.11.26.04.15.10;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2001.03.05.21.29.23;	author corinna;	state Exp;
branches
	1.2.18.1;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.9.2.1
date	2013.01.21.13.52.14;	author corinna;	state Exp;
branches;
next	;

1.2.18.1
date	2004.11.16.06.02.06;	author cgf;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Throughout, update copyrights to reflect dates which correspond to main-branch
checkins.  Regularize copyright format.
@
text
@/* sys/wait.h

   Copyright 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2006, 2011, 2012 Red
   Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#ifndef _SYS_WAIT_H
#define _SYS_WAIT_H

#include <sys/types.h>
#include <sys/resource.h>
#include <cygwin/wait.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifdef __INSIDE_CYGWIN__

typedef int *__wait_status_ptr_t;

#elif defined(__cplusplus)

/* Attribute __transparent_union__ is only supported for C.  */
typedef void *__wait_status_ptr_t;

#else /* !__INSIDE_CYGWIN__ && !__cplusplus */

/* Allow `int' and `union wait' for the status.  */
typedef union
  {
    int *__int_ptr;
    union wait *__union_wait_ptr;
  } __wait_status_ptr_t  __attribute__ ((__transparent_union__));

#endif /* __INSIDE_CYGWIN__ */

pid_t wait (__wait_status_ptr_t __status);
pid_t waitpid (pid_t __pid, __wait_status_ptr_t __status, int __options);
pid_t wait3 (__wait_status_ptr_t __status, int __options, struct rusage *__rusage);
pid_t wait4 (pid_t __pid, __wait_status_ptr_t __status, int __options, struct rusage *__rusage);

#ifdef _COMPILING_NEWLIB
pid_t _wait (__wait_status_ptr_t __status);
#endif

union wait
  {
    int w_status;
    struct
      {
	unsigned int __w_termsig:7; /* Terminating signal.  */
	unsigned int __w_coredump:1; /* Set if dumped core.  */
	unsigned int __w_retcode:8; /* Return code if exited normally.  */
	unsigned int:16;
      } __wait_terminated;
    struct
      {
	unsigned int __w_stopval:8; /* W_STOPPED if stopped.  */
	unsigned int __w_stopsig:8; /* Stopping signal.  */
	unsigned int:16;
      } __wait_stopped;
  }; 
#define	w_termsig	__wait_terminated.__w_termsig
#define	w_coredump	__wait_terminated.__w_coredump
#define	w_retcode	__wait_terminated.__w_retcode
#define	w_stopsig	__wait_stopped.__w_stopsig
#define	w_stopval	__wait_stopped.__w_stopval

#ifdef __cplusplus
}
#endif

/* Used in cygwin/wait.h, redefine to accept `int' and `union wait'.  */
#undef __wait_status_to_int

#ifdef __cplusplus

extern "C++" {
inline int __wait_status_to_int (int __status)
  { return __status; }
inline int __wait_status_to_int (const union wait & __status)
  { return __status.w_status; }
}

#else /* !__cplusplus */

#define __wait_status_to_int(__status)  (__extension__ \
  (((union { __typeof(__status) __in; int __out; }) { .__in = (__status) }).__out))

#endif /* __cplusplus */

#endif /* _SYS_WAIT_H */
@


1.9
log
@	* include/sys/wait.h (_wait): Define when building newlib.
@
text
@d3 2
a4 1
   Copyright 1997, 1998, 2001, 2002, 2003, 2004, 2006, 2011, 2012 Red Hat, Inc.
@


1.9.2.1
log
@Pull in changes from HEAD
@
text
@d3 1
a3 2
   Copyright 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2006, 2011, 2012 Red
   Hat, Inc.
@


1.8
log
@* include/sys/wait.h: Remove C++ inline functions for `union wait'.  For C++
use `void *' as __wait_status_ptr_t instead.  This is less type safe but fixes
compile error on `wait(NULL)'.  Remove extra `;'.
@
text
@d3 1
a3 1
   Copyright 1997, 1998, 2001, 2002, 2003, 2004, 2006, 2011 Red Hat, Inc.
d47 4
@


1.7
log
@* include/sys/wait.h: Add in all c++ functions.
@
text
@d22 1
a22 1
#ifdef __cplusplus
d26 6
a31 1
#else /* !__cplusplus */
d40 1
a40 1
#endif /* __cplusplus */
d63 1
a63 2
  };

d84 1
a84 11

/* C++ wait() variants for `union wait'.  */
inline pid_t wait (union wait *__status)
  { return wait ((int *) __status); }
inline pid_t waitpid (pid_t __pid, union wait *__status, int __options)
  { return waitpid(__pid, (int *) __status, __options); }
inline pid_t wait3 (union wait *__status, int __options, struct rusage *__rusage)
  { return wait3 ((int *) __status, __options, __rusage); }
inline pid_t wait4 (pid_t __pid, union wait *__status, int __options, struct rusage *__rusage)
  { return wait4 (__pid, (int *) __status, __options, __rusage); }
};
@


1.6
log
@* include/sys/wait.h: Ensure that C++ functions are only used when using C++.
@
text
@a79 1
};
d90 1
@


1.5
log
@2011-10-06  Christian Franke  <franke@@computer.org>

	* include/cygwin/wait.h: Use new __wait_status_to_int()
	macro to access status value in W*() status checks.
	Fix status description.
	* include/sys/wait.h: Allow `int' and `union wait' as
	wait status parameter.  Change __wait_status_to_int()
	macro and wait () prototypes accordingly.  Add inline
	functions for C++.  Remove extra `;'.
@
text
@d75 1
d80 1
@


1.4
log
@	* include/sys/wait.h: Move definition of wait constants from here...
	* include/cygwin/wait.h: ...to here.  New file.
	* include/cygwin/stdlib.h: Include cygwin/wait.h to conform with SUSv3.
@
text
@d3 1
a3 1
   Copyright 1997, 1998, 2001, 2002, 2003, 2004, 2006 Red Hat, Inc.
d22 19
a40 4
pid_t wait (int *);
pid_t waitpid (pid_t, int *, int);
pid_t wait3 (int *__status, int __options, struct rusage *__rusage);
pid_t wait4 (pid_t __pid, int *__status, int __options, struct rusage *__rusage);
d67 1
a67 1
};
d70 28
a97 1
#endif
@


1.3
log
@* child_info.h (child_info_spawn::hexec_proc): Eliminate.
* dcrt0.cc (dll_crt0_0): Remove hexec_proc stuff.
* fork.cc (fork_child): Remove call to pinfo_fixup_after_fork.
* pinfo.cc (set_myself): Close and zero pid_handle if set.
(pinfo_fixup_after_fork): Delete.
(proc_waiter): Don't close vchild.hProcess here.  Do that when we are remove
the vchild from procs.  Save hProcess as pid_handle only on first reparent
operation.
(pinfo::wait): Don't set pid_handle here.
(pinfo::alert_parent): Always try to send signal.  If unsuccessful then close
and zero wr_proc_pipe.
* pinfo.h (pinfo::pinfo): Make sure that appropriate parts of the class are
zeroed on construction.
(pinfo::alert_parent): Take char argument.
(pinfo_fixup_after_fork): Delete declaration.
(hexec_proc): Ditto.
* sigproc.cc (remove_proc): Close pid_handle and hProcess if appropriate.
* spawn.cc (spawn_guts): Set cygheap->pid_handle on first exec.
* cygheap.h (init_cygheap::pid_handle): New element.
* pinfo.cc (set_myself): Clear previously existing cygheap->pid_handle when a
new process has been started.
(pinfo::wait): Make sure that a handle to the newly forked/spawned process is
kept around so that the pid will not be reused.
* pinfo.h (_pinfo::pid_handle): Move.
(pinfo::pid_handle): to here.
* spawn.cc (spawn_guts): Create a pid_handle in cygheap prior to spawning to
ensure that the pid does not get reused during the lifetime of the "cygwin
pid".
* pinfo.h (pinfo::alert_parent): New function.
* exceptions.cc (sig_handle_tty_stop): Use alert_parent to send "signals" to
parent.
* fork.cc (fork_parent): Don't close pi.hProcess.  Let the waiter thread do
that.
* pinfo.cc (proc_waiter): Detect case where process exits without setting the
exit code and use value from GetExitCodeProcess.  Reluctantly implement
__SIGREPARENT.
(pinfo::alert_parent): Define.
* sigproc.h (__SIGREPARENT): New enum.
* spawn.cc (spawn_guts): Send reparent signal to parent on exec.  Always create
process in suspended state to avoid races.  Remove cygthread.h in favor of
cygtls.h throughout since cygtls now includes cygthread.h.  Eliminate
ppid_handle usage throughout.
* child_info.h: Regenerate magic number
(child_info): Remove pppid_handle.
* cygthread.h (cygthread::release): New method.  Frees thread without waiting.
* cygthread.cc (cygthread::stub): Set _ctinfo in _mytls to point to information
for executing thread.  Don't call SetEvent if thread is no longer in use.
(cygthread::simplestub): Ditto.
* cygtls.h (_cygtls::_ctinfo): New element contains pointer to information
about executing cygthread, if any.
* dcrt0.cc: Remove last vestiges of per_thread stuff.
(dll_crt0_0): Ditto.  Remove accommodation for ppid_handle.
(do_exit): Remove obsolete reparenting test.
(_exit): Exit with a more SUSv3-like exit value.
* dtable.cc (dtable::stdio_init): Check for myself->cygstarted rather than
myself->ppid_handle to see if we were started by a cygwin process.
* exceptions.cc (open_stackdumpfile): Ditto.
(handle_exceptions): Ditto.
(ctrl_c_handler): Ditto.
(sig_handle_tty_stop): Ditto.  Let parent send signal to itself on STOP.
(sigpacket::process): Comment out vfork test.
(signal_exit): Use more SUSv3-like exit value on signal.
* external.cc (fillout_pinfo): Don't set hProcess.
* fork.cc: Remove VFORK cruft.
(per_thread::set): Delete.
(fork_child): Remove perthread stuff.
(fork_parent): Remove obsolete subproc_init.  Accommodate new method for
tracking subprocesses.
* pinfo.cc (set_myself): Accommodate new pinfo/_pinfo layout.  Set some things
here that used to be set in wait_sig.
(_pinfo::exit): Set exitcode here.  Close process pipe.
(_pinfo::commune_send): Accommodeate new pinfo/_pinfo layout.
(proc_waiter): New function.  Waits, in a thread for subprocess to go away.
(pinfo::wait): New function.  Initialization for proc_waiter.
* pinfo.h (_pinfo::exitcode): New element.
(_pinfo::cygstarted): Ditto.
(_pinfo::wr_proc_pipe): Ditto.
(_pinfo::ppid_handle): Delete.
(_pinfo::hProcess): Delete.
(_pinfo::lock): Delete.
(pinfo::hProcess): New element.
(pinfo::lock): Ditto.
(pinfo::wait): Declare new function.
(pinfo::preserve): Define new function.
* sigproc.cc: Remove old stuff from wait_subproc thread based method.
(zombies): Remove.
(procs): New.
(my_parent_is_alive): Just check that the parent pid exists.
(mychild): Just use pinfo methods to determine if child is mine.
(proc_subproc): Revamp PROC_ADDCHILD to use pinfo::wait.  Remove
PROC_CHILDTERMINATED logic.  Use different method to remove processes from list
when SIGCHLD == SIG_IGN.
(proc_terminate): Gut.
(subproc_init): Delete.
(init_child_info): Remove setting of pppid_handle.
(checkstate): Revamp to only scan procs array.
(remove_proc): Rename from remove_zombie.  Don't close hProcess or pid_handle.
Don't release memory if it's myself.
(stopped_or_terminated): Change logic to handle new consolidated proc/zombie
array.
(wait_subproc): Delete.
* sigproc.h: Remove obsolete EXIT_* defines.
(subproc_init): Remove declaration.
* spawn.cc (spawn_guts): Remove reparenting stuff.  Use standard wait logic to
wait for child if started from a non-cygwin process.
* tlsoffsets.h: Regenerate.
* tty.cc (tty_init): Check for myself->cygstarted rather than
myself->ppid_handle to see if we were started by a cygwin process.
* include/sys/signal.h (external_pinfo::exitcode): Replace hProcess.
* include/sys/wait.h (WCOREDUMP): Define.
* fhandler_tty.cc (fhandler_tty_slave::read): Add debugging output for timeout
case.
* signal.cc (abort): Flag that we are exiting with the ABORT signal.
@
text
@d3 1
a3 1
   Copyright 1997, 1998, 2001, 2002, 2003, 2004 Red Hat, Inc.
d16 1
a21 20
#define WNOHANG 1
#define WUNTRACED 2

/* A status looks like:
      <2 bytes info> <2 bytes code>

      <code> == 0, child has exited, info is the exit value
      <code> == 1..7e, child has exited, info is the signal number.
      <code> == 7f, child has stopped, info was the signal number.
      <code> == 80, there was a core dump.
*/

#define WIFEXITED(w)	(((w) & 0xff) == 0)
#define WIFSIGNALED(w)	(((w) & 0x7f) > 0 && (((w) & 0x7f) < 0x7f))
#define WIFSTOPPED(w)	(((w) & 0xff) == 0x7f)
#define WEXITSTATUS(w)	(((w) >> 8) & 0xff)
#define WTERMSIG(w)	((w) & 0x7f)
#define WSTOPSIG	WEXITSTATUS
#define WCOREDUMP(w)	(WIFSIGNALED(w) && (w & 0x80))

@


1.2
log
@        * include/a.out.h: Add copyright hint.
        * include/fcntl.h: Ditto.
        * include/lastlog.h: Ditto.
        * include/memory.h: Ditto.
        * include/mntent.h: Ditto.
        * include/paths.h: Ditto.
        * include/poll.h: Ditto.
        * include/syslog.h: Ditto.
        * include/termio.h: Ditto.
        * include/tzfile.h: Ditto.
        * include/arpa/inet.h: Ditto.
        * include/asm/byteorder.h: Ditto.
        * include/asm/socket.h: Ditto.
        * include/asm/types.h: Ditto.
        * include/cygwin/if.h: Ditto.
        * include/cygwin/mtio.h: Ditto.
        * include/cygwin/rdevio.h: Ditto.
        * include/cygwin/socket.h: Ditto.
        * include/net/if.h: Ditto.
        * include/netinet/in.h: Ditto.
        * include/netinet/in_systm.h: Ditto.
        * include/netinet/ip.h: Ditto.
        * include/netinet/ip_icmp.h: Ditto.
        * include/netinet/tcp.h: Ditto.
        * include/sys/cdefs.h: Ditto.
        * include/sys/cygwin.h: Ditto.
        * include/sys/ioctl.h: Ditto.
        * include/sys/mman.h: Ditto.
        * include/sys/mount.h: Ditto.
        * include/sys/mtio.h: Ditto.
        * include/sys/procfs.h: Ditto.
        * include/sys/resource.h: Ditto.
        * include/sys/smallprint.h: Ditto.
        * include/sys/socket.h: Ditto.
        * include/sys/strace.h: Ditto.
        * include/sys/syslog.h: Ditto.
        * include/sys/sysmacros.h: Ditto.
        * include/sys/termio.h: Ditto.
        * include/sys/termios.h: Ditto.
        * include/sys/uio.h: Ditto.
        * include/sys/un.h: Ditto.
        * include/sys/utsname.h: Ditto.
        * include/sys/vfs.h: Ditto.
        * include/sys/wait.h: Ditto.
        * regexp/regerror.c: Ditto.
        * regexp/regexp.h: Ditto.
        * regexp/regmagic.h: Ditto.
@
text
@d3 1
a3 1
   Copyright 1997, 1998, 2001 Red Hat, Inc.
d39 1
@


1.2.18.1
log
@experimental branch which removes cygwin's reparenting code, in favor of a pipe.
@
text
@d3 1
a3 1
   Copyright 1997, 1998, 2001, 2002, 2003, 2004 Red Hat, Inc.
a38 1
#define WCOREDUMP(w)	(WIFSIGNALED(w) && (w & 0x80))
@


1.1
log
@Initial revision
@
text
@d1 10
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
