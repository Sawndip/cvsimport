head	1.6;
access;
symbols
	cygwin-1_7_35-release:1.6
	cygwin-1_7_34-release:1.6
	cygwin-1_7_33-release:1.6
	cygwin-1_7_32-release:1.6
	cygwin-1_7_31-release:1.6
	cygwin-1_7_30-release:1.6
	cygwin-1_7_29-release:1.6
	cygwin-1_7_29-release-branchpoint:1.6.0.10
	cygwin-pre-user-db:1.6
	cygwin-1_7_28-release:1.6
	cygwin-1_7_27-release:1.6
	cygwin-1_7_26-release:1.6
	cygwin-1_7_25-release:1.6
	cygwin-1_7_24-release:1.6
	cygwin-1_7_23-release:1.6
	cygwin-1_7_22-release:1.6
	cygwin-1_7_21-release:1.6
	cygwin-1_7_20-release:1.6
	cygwin-1_7_19-release:1.6
	cygwin-64bit-postmerge:1.6
	cygwin-64bit-premerge-branch:1.6.0.8
	cygwin-64bit-premerge:1.6
	cygwin-1_7_18-release:1.6
	post-ptmalloc3:1.6
	pre-ptmalloc3:1.6
	cygwin-1_7_17-release:1.6
	cygwin-64bit-branch:1.6.0.6
	cygwin-1_7_16-release:1.6
	cygwin-1_7_15-release:1.6
	cygwin-1_7_14_2-release:1.6
	cygwin-1_7_14-release:1.6
	cygwin-1_7_12-release:1.6
	cygwin-1_7_11-release:1.6
	cygwin-1_7_10-release:1.6
	signal-rewrite:1.6.0.4
	pre-notty:1.6
	cygwin-1_7_9-release:1.6
	cv-post-1_7_9:1.6.0.2
	cygwin-1_7_8-release:1.6
	cygwin-1_7_7-release:1.5
	cygwin-1_7_5-release:1.5
	cygwin-1_7_4-release:1.5
	cygwin-1_7_3-release:1.5
	cygwin-1_7_2-release:1.5
	fifo_doover3:1.5.0.12
	cygwin-1_7_1-release:1.5
	prefifo:1.5
	cv-branch-2:1.5.0.10
	pre-ripout-set_console_state_for_spawn:1.5
	EOL_registry_mounts:1.5
	preoverlapped:1.5
	drop_9x_support_start:1.5
	cr-0x5f1:1.5.0.8
	cv-branch:1.5.0.6
	pre-ptymaster-archetype:1.5
	cr-0x3b58:1.5.0.4
	cr-0x5ef:1.5.0.2
	after-mmap-privanon-noreserve:1.5
	after-mmap-revamp:1.5
	before-mmap-revamp:1.5
	cgf-more-exit-sync:1.5
	post_wait_sig_exit:1.5
	pre_wait_sig_exit:1.5
	reparent-point:1.4
	noreparent:1.4.0.16
	cr-0x5e6:1.4.0.14
	cr-0x9e:1.4.0.12
	cr-0x9d:1.4.0.10
	cgf-deleteme:1.4.0.8
	pre-sigrewrite:1.4
	corinna-01:1.4
	cr-0x9c:1.4.0.6
	cr-0x9b:1.4.0.4
	cr-0x99:1.4
	Z-emcb-cygwin_daemon:1.4.0.2
	w32api-2_2:1.3
	mingw-runtime-2_4:1.3
	pre-cgf-merge:1.4
	cgf-dev-branch:1.3.0.20
	predaemon:1.2
	cygwin_daemon_merge_HEAD:1.2
	pregp02r1:1.2.0.38
	cygnus_cvs_20020108_pre:1.2
	Z-cygwin_daemon_merge-new_HEAD:1.3
	Z-cygwin_daemon_merge_HEAD:1.3
	cygwin_daemon:1.2.0.8;
locks; strict;
comment	@ * @;
expand	@o@;


1.6
date	2011.02.11.12.42.30;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.02.03.50.10;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2003.04.25.08.32.30;	author corinna;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.29.07.38.54;	author corinna;	state Exp;
branches
	1.3.20.1;
next	1.2;

1.2
date	2001.03.05.21.29.22;	author corinna;	state Exp;
branches
	1.2.8.1;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.3.20.1
date	2003.05.10.17.20.55;	author cgf;	state Exp;
branches;
next	;

1.2.8.1
date	2002.06.13.14.34.19;	author rbcollins;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.6
log
@	* include/endian.h: Move definitions of __BIG_ENDIAN, __LITTLE_ENDIAN,
	and __BYTE_ORDER into ...
	* include/bits/endian.h: New file.
	* include/arpa/nameser_compat.h: Include endian.h rather than defining
	BYTE_ORDER here.
	* include/asm/byteorder.h: Include bits/endian.h.  Drop definition of
	__LITTLE_ENDIAN.
	* include/netinet/ip.h: Include bits/endian.h.  Drop definitions of
	BIG_ENDIAN, LITTLE_ENDIAN, and BYTE_ORDER.  Use underscored variants
	of aforementioned constants.
	* include/netinet/tcp.h: Ditto.
	* include/sys/param.h: Drop disabled definitions of BIG_ENDIAN,
	LITTLE_ENDIAN, and BYTE_ORDER.

	* include/netinet/ip.h: Reformat.  Define setsockopt IP_TOS options
	matching recent RFCs.  Tweak comments.
@
text
@/*
 * Copyright (c) 1982, 1986, 1993
 *      The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the University of
 *      California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *      @@(#)ip.h        8.2 (Berkeley) 6/1/94
 * $FreeBSD: src/sys/netinet/ip.h,v 1.17 1999/12/22 19:13:20 shin Exp $
 */

#ifndef _NETINET_IP_H
#define _NETINET_IP_H

#include <netinet/in_systm.h>
#include <netinet/in.h>
#include <bits/endian.h>

/*
 * Definitions for internet protocol version 4.
 * Per RFC 791, September 1981.
 */
#define IPVERSION	4

/*
 * Structure of an internet header, naked of options.
 */
struct ip {
#ifdef _IP_VHL
	u_char  ip_vhl;			/* version << 4 | header length >> 2 */
#else
#if __BYTE_ORDER == __LITTLE_ENDIAN
	u_int   ip_hl:4,		/* header length */
		ip_v:4;			/* version */
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
	u_int   ip_v:4,			/* version */
		ip_hl:4;		/* header length */
#endif
#endif /* not _IP_VHL */
	u_char  ip_tos;			/* type of service */
	u_short ip_len;			/* total length */
	u_short ip_id;			/* identification */
	u_short ip_off;			/* fragment offset field */
#define IP_RF 0x8000			/* reserved fragment flag */
#define IP_DF 0x4000			/* dont fragment flag */
#define IP_MF 0x2000			/* more fragments flag */
#define IP_OFFMASK 0x1fff		/* mask for fragmenting bits */
	u_char  ip_ttl;			/* time to live */
	u_char  ip_p;			/* protocol */
	u_short ip_sum;			/* checksum */
	struct  in_addr ip_src,ip_dst;  /* source and dest address */
};

#ifdef _IP_VHL
#define IP_MAKE_VHL(v, hl)	((v) << 4 | (hl))
#define IP_VHL_HL(vhl)		((vhl) & 0x0f)
#define IP_VHL_V(vhl)		((vhl) >> 4)
#define IP_VHL_BORING		0x45
#endif

#define IP_MAXPACKET	65535	/* maximum packet size */

/*
 * Definitions for DiffServ Codepoints as per RFC2474
 */
#define IPTOS_DSCP_CS0		0x00
#define IPTOS_DSCP_CS1		0x20
#define IPTOS_DSCP_AF11		0x28
#define IPTOS_DSCP_AF12		0x30
#define IPTOS_DSCP_AF13		0x38
#define IPTOS_DSCP_CS2		0x40
#define IPTOS_DSCP_AF21		0x48
#define IPTOS_DSCP_AF22		0x50
#define IPTOS_DSCP_AF23		0x58
#define IPTOS_DSCP_CS3		0x60
#define IPTOS_DSCP_AF31		0x68
#define IPTOS_DSCP_AF32		0x70
#define IPTOS_DSCP_AF33		0x78
#define IPTOS_DSCP_CS4		0x80
#define IPTOS_DSCP_AF41		0x88
#define IPTOS_DSCP_AF42		0x90
#define IPTOS_DSCP_AF43		0x98
#define IPTOS_DSCP_CS5		0xa0
#define IPTOS_DSCP_EF		0xb8
#define IPTOS_DSCP_CS6		0xc0
#define IPTOS_DSCP_CS7		0xe0

/*
 * Definitions for DiffServ Class Selector Codepoints as defined by Linux.
 * Linux uses different names than OpenBSD, unfortunately.
 */
#define IPTOS_CLASS_CS0		0x00
#define IPTOS_CLASS_CS1		0x20
#define IPTOS_CLASS_CS2		0x40
#define IPTOS_CLASS_CS3		0x60
#define IPTOS_CLASS_CS4		0x80
#define IPTOS_CLASS_CS5		0xa0
#define IPTOS_CLASS_CS6		0xc0
#define IPTOS_CLASS_CS7		0xe0
#define IPTOS_CLASS_DEFAULT	IPTOS_CLASS_CS0
/* Linux also defined masks and access macros. */
#define IPTOS_CLASS_MASK	0xe0
#define IPTOS_CLASS(cs)		((cs) & IPTOS_CLASS_MASK)
#define IPTOS_DSCP_MASK		0xfc
#define IPTOS_DSCP(cp)		((cp) & IPTOS_DSCP_MASK)

/*
 * ECN (Explicit Congestion Notification) codepoints in RFC3168
 * mapped to the lower 2 bits of the TOS field.
 */
#define IPTOS_ECN_NOTECT	0x00	/* not-ECT */
#define IPTOS_ECN_ECT1		0x01	/* ECN-capable transport (1) */
#define IPTOS_ECN_ECT0		0x02	/* ECN-capable transport (0) */
#define IPTOS_ECN_CE		0x03	/* congestion experienced */
#define IPTOS_ECN_MASK		0x03	/* ECN field mask */
/* Linux also defined an access macro.
 * The name of IPTOS_ECN_NOTECT differs, too, unfortunately. */
#define IPTOS_ECN(cn)		((cn) & IPTOS_ECN_MASK)
#define IPTOS_ECN_NOT_ECT	0x00

/*
 * Definitions for IP type of service per RFC1349 (ip_tos)
 * DEPRECATED
 */
#ifndef IPTOS_LOWDELAY
#define IPTOS_LOWDELAY		0x10
#define IPTOS_THROUGHPUT	0x08
#define IPTOS_RELIABILITY	0x04
#endif
#define IPTOS_MINCOST		0x02
/* ECN RFC3168 obsoletes RFC2481, and these will be deprecated soon. */
#define IPTOS_CE		0x01	/* congestion experienced */
#define IPTOS_ECT		0x02	/* ECN-capable transport */

/*
 * Definitions for IP precedence per RFC1195 (also in ip_tos) (hopefully unused)
 */
#define IPTOS_PREC_NETCONTROL		0xe0
#define IPTOS_PREC_INTERNETCONTROL	0xc0
#define IPTOS_PREC_CRITIC_ECP		0xa0
#define IPTOS_PREC_FLASHOVERRIDE	0x80
#define IPTOS_PREC_FLASH		0x60
#define IPTOS_PREC_IMMEDIATE		0x40
#define IPTOS_PREC_PRIORITY		0x20
#define IPTOS_PREC_ROUTINE		0x00


/*
 * Definitions for options.
 */
#define IPOPT_COPIED(o)		((o)&0x80)
#define IPOPT_CLASS(o)		((o)&0x60)
#define IPOPT_NUMBER(o)		((o)&0x1f)

#define IPOPT_CONTROL		0x00
#define IPOPT_RESERVED1		0x20
#define IPOPT_DEBMEAS		0x40
#define IPOPT_RESERVED2		0x60

#define IPOPT_EOL		0		/* end of option list */
#define IPOPT_NOP		1		/* no operation */

#define IPOPT_RR		7		/* record packet route */
#define IPOPT_TS		68		/* timestamp */
#define IPOPT_SECURITY		130		/* provide s,c,h,tcc */
#define IPOPT_LSRR		131		/* loose source route */
#define IPOPT_SATID		136		/* satnet id */
#define IPOPT_SSRR		137		/* strict source route */
#define IPOPT_RA		148		/* router alert */

/*
 * Offsets to fields in options other than EOL and NOP.
 */
#define IPOPT_OPTVAL		0		/* option ID */
#define IPOPT_OLEN		1		/* option length */
#define IPOPT_OFFSET		2		/* offset within option */
#define IPOPT_MINOFF		4		/* min value of above */

/*
 * Time stamp option structure.
 */
struct  ip_timestamp {
	u_char  ipt_code;		/* IPOPT_TS */
	u_char  ipt_len;		/* size of structure (variable) */
	u_char  ipt_ptr;		/* index of current entry */
#if __BYTE_ORDER == __LITTLE_ENDIAN
	u_int   ipt_flg:4,		/* flags, see below */
		ipt_oflw:4;		/* overflow counter */
#endif
#if __BYTE_ORDER == __BIG_ENDIAN
	u_int   ipt_oflw:4,		/* overflow counter */
		ipt_flg:4;		/* flags, see below */
#endif
	union ipt_timestamp {
		n_long  ipt_time[1];
		struct  ipt_ta {
			struct in_addr ipt_addr;
			n_long ipt_time;
		} ipt_ta[1];
	} ipt_timestamp;
};

/* flag bits for ipt_flg */
#define IPOPT_TS_TSONLY		0		/* timestamps only */
#define IPOPT_TS_TSANDADDR	1		/* timestamps and addresses */
#define IPOPT_TS_PRESPEC	3		/* specified modules only */

/* bits for security (not byte swapped) */
#define IPOPT_SECUR_UNCLASS	0x0000
#define IPOPT_SECUR_CONFID	0xf135
#define IPOPT_SECUR_EFTO	0x789a
#define IPOPT_SECUR_MMMM	0xbc4d
#define IPOPT_SECUR_RESTR	0xaf13
#define IPOPT_SECUR_SECRET	0xd788
#define IPOPT_SECUR_TOPSECRET	0x6bc5

/*
 * Internet implementation parameters.
 */
#define MAXTTL		255		/* maximum time to live (seconds) */
#define IPDEFTTL	64		/* default ttl, from RFC 1340 */
#define IPFRAGTTL	60		/* time to live for frags, slowhz */
#define IPTTLDEC	1		/* subtracted when forwarding */

#define IP_MSS		576		/* default maximum segment size */

#endif
@


1.5
log
@white space and minor comment cleanup.
@
text
@d42 1
a42 9

/* Added by Wu Yongwei */
#ifndef LITTLE_ENDIAN
#define LITTLE_ENDIAN   1234
#define BIG_ENDIAN      4321
#endif
#ifndef BYTE_ORDER
#define BYTE_ORDER      LITTLE_ENDIAN
#endif
d48 1
a48 1
#define IPVERSION       4
d55 1
a55 1
	u_char  ip_vhl;                 /* version << 4 | header length >> 2 */
d57 7
a63 7
#if BYTE_ORDER == LITTLE_ENDIAN
	u_int   ip_hl:4,                /* header length */
		ip_v:4;                 /* version */
#endif
#if BYTE_ORDER == BIG_ENDIAN
	u_int   ip_v:4,                 /* version */
		ip_hl:4;                /* header length */
d66 11
a76 11
	u_char  ip_tos;                 /* type of service */
	u_short ip_len;                 /* total length */
	u_short ip_id;                  /* identification */
	u_short ip_off;                 /* fragment offset field */
#define IP_RF 0x8000                    /* reserved fragment flag */
#define IP_DF 0x4000                    /* dont fragment flag */
#define IP_MF 0x2000                    /* more fragments flag */
#define IP_OFFMASK 0x1fff               /* mask for fragmenting bits */
	u_char  ip_ttl;                 /* time to live */
	u_char  ip_p;                   /* protocol */
	u_short ip_sum;                 /* checksum */
d81 65
a145 7
#define IP_MAKE_VHL(v, hl)      ((v) << 4 | (hl))
#define IP_VHL_HL(vhl)          ((vhl) & 0x0f)
#define IP_VHL_V(vhl)           ((vhl) >> 4)
#define IP_VHL_BORING           0x45
#endif

#define IP_MAXPACKET    65535           /* maximum packet size */
d148 2
a149 1
 * Definitions for IP type of service (ip_tos)
d152 20
a171 9
#define IPTOS_LOWDELAY          0x10
#define IPTOS_THROUGHPUT        0x08
#define IPTOS_RELIABILITY       0x04
#endif
#define IPTOS_MINCOST           0x02
/* ECN bits proposed by Sally Floyd */
#define IPTOS_CE                0x01    /* congestion experienced */
#define IPTOS_ECT               0x02    /* ECN-capable transport */

a172 11
/*
 * Definitions for IP precedence (also in ip_tos) (hopefully unused)
 */
#define IPTOS_PREC_NETCONTROL           0xe0
#define IPTOS_PREC_INTERNETCONTROL      0xc0
#define IPTOS_PREC_CRITIC_ECP           0xa0
#define IPTOS_PREC_FLASHOVERRIDE        0x80
#define IPTOS_PREC_FLASH                0x60
#define IPTOS_PREC_IMMEDIATE            0x40
#define IPTOS_PREC_PRIORITY             0x20
#define IPTOS_PREC_ROUTINE              0x00
d177 19
a195 19
#define IPOPT_COPIED(o)         ((o)&0x80)
#define IPOPT_CLASS(o)          ((o)&0x60)
#define IPOPT_NUMBER(o)         ((o)&0x1f)

#define IPOPT_CONTROL           0x00
#define IPOPT_RESERVED1         0x20
#define IPOPT_DEBMEAS           0x40
#define IPOPT_RESERVED2         0x60

#define IPOPT_EOL               0               /* end of option list */
#define IPOPT_NOP               1               /* no operation */

#define IPOPT_RR                7               /* record packet route */
#define IPOPT_TS                68              /* timestamp */
#define IPOPT_SECURITY          130             /* provide s,c,h,tcc */
#define IPOPT_LSRR              131             /* loose source route */
#define IPOPT_SATID             136             /* satnet id */
#define IPOPT_SSRR              137             /* strict source route */
#define IPOPT_RA                148             /* router alert */
d200 4
a203 4
#define IPOPT_OPTVAL            0               /* option ID */
#define IPOPT_OLEN              1               /* option length */
#define IPOPT_OFFSET            2               /* offset within option */
#define IPOPT_MINOFF            4               /* min value of above */
d209 10
a218 10
	u_char  ipt_code;               /* IPOPT_TS */
	u_char  ipt_len;                /* size of structure (variable) */
	u_char  ipt_ptr;                /* index of current entry */
#if BYTE_ORDER == LITTLE_ENDIAN
	u_int   ipt_flg:4,              /* flags, see below */
		ipt_oflw:4;             /* overflow counter */
#endif
#if BYTE_ORDER == BIG_ENDIAN
	u_int   ipt_oflw:4,             /* overflow counter */
		ipt_flg:4;              /* flags, see below */
d230 3
a232 3
#define IPOPT_TS_TSONLY         0               /* timestamps only */
#define IPOPT_TS_TSANDADDR      1               /* timestamps and addresses */
#define IPOPT_TS_PRESPEC        3               /* specified modules only */
d235 7
a241 7
#define IPOPT_SECUR_UNCLASS     0x0000
#define IPOPT_SECUR_CONFID      0xf135
#define IPOPT_SECUR_EFTO        0x789a
#define IPOPT_SECUR_MMMM        0xbc4d
#define IPOPT_SECUR_RESTR       0xaf13
#define IPOPT_SECUR_SECRET      0xd788
#define IPOPT_SECUR_TOPSECRET   0x6bc5
d246 4
a249 4
#define MAXTTL          255             /* maximum time to live (seconds) */
#define IPDEFTTL        64              /* default ttl, from RFC 1340 */
#define IPFRAGTTL       60              /* time to live for frags, slowhz */
#define IPTTLDEC        1               /* subtracted when forwarding */
d251 1
a251 1
#define IP_MSS          576             /* default maximum segment size */
@


1.4
log
@	* include/netinet/ip.h: Include netinet/in_systm.h and netinet/in.h
	to allow standalone usage (autoconf).
@
text
@d63 1
a63 1
        u_char  ip_vhl;                 /* version << 4 | header length >> 2 */
d66 2
a67 2
        u_int   ip_hl:4,                /* header length */
                ip_v:4;                 /* version */
d70 2
a71 2
        u_int   ip_v:4,                 /* version */
                ip_hl:4;                /* header length */
d74 4
a77 4
        u_char  ip_tos;                 /* type of service */
        u_short ip_len;                 /* total length */
        u_short ip_id;                  /* identification */
        u_short ip_off;                 /* fragment offset field */
d82 4
a85 4
        u_char  ip_ttl;                 /* time to live */
        u_char  ip_p;                   /* protocol */
        u_short ip_sum;                 /* checksum */
        struct  in_addr ip_src,ip_dst;  /* source and dest address */
d158 3
a160 3
        u_char  ipt_code;               /* IPOPT_TS */
        u_char  ipt_len;                /* size of structure (variable) */
        u_char  ipt_ptr;                /* index of current entry */
d162 2
a163 2
        u_int   ipt_flg:4,              /* flags, see below */
                ipt_oflw:4;             /* overflow counter */
d166 2
a167 2
        u_int   ipt_oflw:4,             /* overflow counter */
                ipt_flg:4;              /* flags, see below */
d169 7
a175 7
        union ipt_timestamp {
                n_long  ipt_time[1];
                struct  ipt_ta {
                        struct in_addr ipt_addr;
                        n_long ipt_time;
                } ipt_ta[1];
        } ipt_timestamp;
@


1.3
log
@	* include/cygwin/socket.h: Protect some symbols against multiple
	definition.
	* include/netinet/ip.h: Ditto.
	* include/netinet/tcp.h: Ditto.

	* include/netinet/ip.h: Replace by BSD derived version of the file.
	* include/netinet/tcp.h: Ditto.
	* include/netinet/udp.h: New file.
	* include/cygwin/ip.h: Remove.
@
text
@d40 3
@


1.3.20.1
log
@merge from trunk
@
text
@a39 3
#include <netinet/in_systm.h>
#include <netinet/in.h>

@


1.2
log
@        * include/a.out.h: Add copyright hint.
        * include/fcntl.h: Ditto.
        * include/lastlog.h: Ditto.
        * include/memory.h: Ditto.
        * include/mntent.h: Ditto.
        * include/paths.h: Ditto.
        * include/poll.h: Ditto.
        * include/syslog.h: Ditto.
        * include/termio.h: Ditto.
        * include/tzfile.h: Ditto.
        * include/arpa/inet.h: Ditto.
        * include/asm/byteorder.h: Ditto.
        * include/asm/socket.h: Ditto.
        * include/asm/types.h: Ditto.
        * include/cygwin/if.h: Ditto.
        * include/cygwin/mtio.h: Ditto.
        * include/cygwin/rdevio.h: Ditto.
        * include/cygwin/socket.h: Ditto.
        * include/net/if.h: Ditto.
        * include/netinet/in.h: Ditto.
        * include/netinet/in_systm.h: Ditto.
        * include/netinet/ip.h: Ditto.
        * include/netinet/ip_icmp.h: Ditto.
        * include/netinet/tcp.h: Ditto.
        * include/sys/cdefs.h: Ditto.
        * include/sys/cygwin.h: Ditto.
        * include/sys/ioctl.h: Ditto.
        * include/sys/mman.h: Ditto.
        * include/sys/mount.h: Ditto.
        * include/sys/mtio.h: Ditto.
        * include/sys/procfs.h: Ditto.
        * include/sys/resource.h: Ditto.
        * include/sys/smallprint.h: Ditto.
        * include/sys/socket.h: Ditto.
        * include/sys/strace.h: Ditto.
        * include/sys/syslog.h: Ditto.
        * include/sys/sysmacros.h: Ditto.
        * include/sys/termio.h: Ditto.
        * include/sys/termios.h: Ditto.
        * include/sys/uio.h: Ditto.
        * include/sys/un.h: Ditto.
        * include/sys/utsname.h: Ditto.
        * include/sys/vfs.h: Ditto.
        * include/sys/wait.h: Ditto.
        * regexp/regerror.c: Ditto.
        * regexp/regexp.h: Ditto.
        * regexp/regmagic.h: Ditto.
@
text
@d1 35
a35 9
/* netinet/ip.h

   Copyright 1998, 2001 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */
d40 158
a197 1
#include <cygwin/ip.h>
d199 1
a199 1
#endif /* _NETINET_IP_H */
@


1.2.8.1
log
@Merged changes from HEAD
@
text
@d1 9
a9 35
/*
 * Copyright (c) 1982, 1986, 1993
 *      The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *      This product includes software developed by the University of
 *      California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *      @@(#)ip.h        8.2 (Berkeley) 6/1/94
 * $FreeBSD: src/sys/netinet/ip.h,v 1.17 1999/12/22 19:13:20 shin Exp $
 */
d14 1
a14 158
/* Added by Wu Yongwei */
#ifndef LITTLE_ENDIAN
#define LITTLE_ENDIAN   1234
#define BIG_ENDIAN      4321
#endif
#ifndef BYTE_ORDER
#define BYTE_ORDER      LITTLE_ENDIAN
#endif

/*
 * Definitions for internet protocol version 4.
 * Per RFC 791, September 1981.
 */
#define IPVERSION       4

/*
 * Structure of an internet header, naked of options.
 */
struct ip {
#ifdef _IP_VHL
        u_char  ip_vhl;                 /* version << 4 | header length >> 2 */
#else
#if BYTE_ORDER == LITTLE_ENDIAN
        u_int   ip_hl:4,                /* header length */
                ip_v:4;                 /* version */
#endif
#if BYTE_ORDER == BIG_ENDIAN
        u_int   ip_v:4,                 /* version */
                ip_hl:4;                /* header length */
#endif
#endif /* not _IP_VHL */
        u_char  ip_tos;                 /* type of service */
        u_short ip_len;                 /* total length */
        u_short ip_id;                  /* identification */
        u_short ip_off;                 /* fragment offset field */
#define IP_RF 0x8000                    /* reserved fragment flag */
#define IP_DF 0x4000                    /* dont fragment flag */
#define IP_MF 0x2000                    /* more fragments flag */
#define IP_OFFMASK 0x1fff               /* mask for fragmenting bits */
        u_char  ip_ttl;                 /* time to live */
        u_char  ip_p;                   /* protocol */
        u_short ip_sum;                 /* checksum */
        struct  in_addr ip_src,ip_dst;  /* source and dest address */
};

#ifdef _IP_VHL
#define IP_MAKE_VHL(v, hl)      ((v) << 4 | (hl))
#define IP_VHL_HL(vhl)          ((vhl) & 0x0f)
#define IP_VHL_V(vhl)           ((vhl) >> 4)
#define IP_VHL_BORING           0x45
#endif

#define IP_MAXPACKET    65535           /* maximum packet size */

/*
 * Definitions for IP type of service (ip_tos)
 */
#ifndef IPTOS_LOWDELAY
#define IPTOS_LOWDELAY          0x10
#define IPTOS_THROUGHPUT        0x08
#define IPTOS_RELIABILITY       0x04
#endif
#define IPTOS_MINCOST           0x02
/* ECN bits proposed by Sally Floyd */
#define IPTOS_CE                0x01    /* congestion experienced */
#define IPTOS_ECT               0x02    /* ECN-capable transport */


/*
 * Definitions for IP precedence (also in ip_tos) (hopefully unused)
 */
#define IPTOS_PREC_NETCONTROL           0xe0
#define IPTOS_PREC_INTERNETCONTROL      0xc0
#define IPTOS_PREC_CRITIC_ECP           0xa0
#define IPTOS_PREC_FLASHOVERRIDE        0x80
#define IPTOS_PREC_FLASH                0x60
#define IPTOS_PREC_IMMEDIATE            0x40
#define IPTOS_PREC_PRIORITY             0x20
#define IPTOS_PREC_ROUTINE              0x00

/*
 * Definitions for options.
 */
#define IPOPT_COPIED(o)         ((o)&0x80)
#define IPOPT_CLASS(o)          ((o)&0x60)
#define IPOPT_NUMBER(o)         ((o)&0x1f)

#define IPOPT_CONTROL           0x00
#define IPOPT_RESERVED1         0x20
#define IPOPT_DEBMEAS           0x40
#define IPOPT_RESERVED2         0x60

#define IPOPT_EOL               0               /* end of option list */
#define IPOPT_NOP               1               /* no operation */

#define IPOPT_RR                7               /* record packet route */
#define IPOPT_TS                68              /* timestamp */
#define IPOPT_SECURITY          130             /* provide s,c,h,tcc */
#define IPOPT_LSRR              131             /* loose source route */
#define IPOPT_SATID             136             /* satnet id */
#define IPOPT_SSRR              137             /* strict source route */
#define IPOPT_RA                148             /* router alert */

/*
 * Offsets to fields in options other than EOL and NOP.
 */
#define IPOPT_OPTVAL            0               /* option ID */
#define IPOPT_OLEN              1               /* option length */
#define IPOPT_OFFSET            2               /* offset within option */
#define IPOPT_MINOFF            4               /* min value of above */

/*
 * Time stamp option structure.
 */
struct  ip_timestamp {
        u_char  ipt_code;               /* IPOPT_TS */
        u_char  ipt_len;                /* size of structure (variable) */
        u_char  ipt_ptr;                /* index of current entry */
#if BYTE_ORDER == LITTLE_ENDIAN
        u_int   ipt_flg:4,              /* flags, see below */
                ipt_oflw:4;             /* overflow counter */
#endif
#if BYTE_ORDER == BIG_ENDIAN
        u_int   ipt_oflw:4,             /* overflow counter */
                ipt_flg:4;              /* flags, see below */
#endif
        union ipt_timestamp {
                n_long  ipt_time[1];
                struct  ipt_ta {
                        struct in_addr ipt_addr;
                        n_long ipt_time;
                } ipt_ta[1];
        } ipt_timestamp;
};

/* flag bits for ipt_flg */
#define IPOPT_TS_TSONLY         0               /* timestamps only */
#define IPOPT_TS_TSANDADDR      1               /* timestamps and addresses */
#define IPOPT_TS_PRESPEC        3               /* specified modules only */

/* bits for security (not byte swapped) */
#define IPOPT_SECUR_UNCLASS     0x0000
#define IPOPT_SECUR_CONFID      0xf135
#define IPOPT_SECUR_EFTO        0x789a
#define IPOPT_SECUR_MMMM        0xbc4d
#define IPOPT_SECUR_RESTR       0xaf13
#define IPOPT_SECUR_SECRET      0xd788
#define IPOPT_SECUR_TOPSECRET   0x6bc5

/*
 * Internet implementation parameters.
 */
#define MAXTTL          255             /* maximum time to live (seconds) */
#define IPDEFTTL        64              /* default ttl, from RFC 1340 */
#define IPFRAGTTL       60              /* time to live for frags, slowhz */
#define IPTTLDEC        1               /* subtracted when forwarding */

#define IP_MSS          576             /* default maximum segment size */
d16 1
a16 1
#endif
@


1.1
log
@Initial revision
@
text
@d1 10
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
