head	1.19;
access;
symbols
	cygwin-1_7_35-release:1.19
	cygwin-1_7_34-release:1.19
	cygwin-1_7_33-release:1.18
	cygwin-1_7_32-release:1.18
	cygwin-1_7_31-release:1.18
	cygwin-1_7_30-release:1.18
	cygwin-1_7_29-release:1.18
	cygwin-1_7_29-release-branchpoint:1.18.0.2
	cygwin-pre-user-db:1.18
	cygwin-1_7_28-release:1.18
	cygwin-1_7_27-release:1.18
	cygwin-1_7_26-release:1.18
	cygwin-1_7_25-release:1.18
	cygwin-1_7_24-release:1.18
	cygwin-1_7_23-release:1.18
	cygwin-1_7_22-release:1.18
	cygwin-1_7_21-release:1.18
	cygwin-1_7_20-release:1.18
	cygwin-1_7_19-release:1.18
	cygwin-64bit-postmerge:1.17
	cygwin-64bit-premerge-branch:1.16.0.2
	cygwin-64bit-premerge:1.16
	cygwin-1_7_18-release:1.16
	post-ptmalloc3:1.15.10.1
	pre-ptmalloc3:1.15.10.1
	cygwin-1_7_17-release:1.15
	cygwin-64bit-branch:1.15.0.10
	cygwin-1_7_16-release:1.15
	cygwin-1_7_15-release:1.15
	cygwin-1_7_14_2-release:1.15
	cygwin-1_7_14-release:1.15
	cygwin-1_7_12-release:1.15
	cygwin-1_7_11-release:1.15
	cygwin-1_7_10-release:1.15
	signal-rewrite:1.15.0.8
	pre-notty:1.15
	cygwin-1_7_9-release:1.15
	cv-post-1_7_9:1.15.0.6
	cygwin-1_7_8-release:1.15
	cygwin-1_7_7-release:1.15
	cygwin-1_7_5-release:1.15
	cygwin-1_7_4-release:1.15
	cygwin-1_7_3-release:1.15
	cygwin-1_7_2-release:1.15
	fifo_doover3:1.15.0.4
	cygwin-1_7_1-release:1.15
	prefifo:1.15
	cv-branch-2:1.15.0.2
	pre-ripout-set_console_state_for_spawn:1.15
	EOL_registry_mounts:1.14
	preoverlapped:1.10
	drop_9x_support_start:1.10
	cr-0x5f1:1.9.0.8
	cv-branch:1.9.0.6
	pre-ptymaster-archetype:1.9
	cr-0x3b58:1.9.0.4
	cr-0x5ef:1.9.0.2
	after-mmap-privanon-noreserve:1.9
	after-mmap-revamp:1.9
	before-mmap-revamp:1.9
	cgf-more-exit-sync:1.9
	post_wait_sig_exit:1.9
	pre_wait_sig_exit:1.9
	reparent-point:1.8
	noreparent:1.8.0.10
	cr-0x5e6:1.8.0.8
	cr-0x9e:1.8.0.6
	cr-0x9d:1.8.0.4
	cgf-deleteme:1.8.0.2
	pre-sigrewrite:1.8
	corinna-01:1.7
	cr-0x9c:1.7.0.6
	cr-0x9b:1.7.0.4
	cr-0x99:1.7
	Z-emcb-cygwin_daemon:1.7.0.2
	w32api-2_2:1.7
	mingw-runtime-2_4:1.7
	pre-cgf-merge:1.7
	cgf-dev-branch:1.7.0.18
	predaemon:1.4
	cygwin_daemon_merge_HEAD:1.4
	pregp02r1:1.4.0.30
	cygnus_cvs_20020108_pre:1.4
	Z-cygwin_daemon_merge-new_HEAD:1.7
	Z-cygwin_daemon_merge_HEAD:1.7
	cygwin_daemon:1.3.0.4;
locks; strict;
comment	@ * @;


1.19
date	2014.12.02.10.16.03;	author corinna;	state Exp;
branches;
next	1.18;

1.18
date	2013.05.24.13.32.10;	author corinna;	state Exp;
branches;
next	1.17;

1.17
date	2013.04.23.09.44.32;	author corinna;	state Exp;
branches;
next	1.16;

1.16
date	2013.01.21.04.34.50;	author cgf;	state Exp;
branches;
next	1.15;

1.15
date	2008.04.07.16.15.45;	author cgf;	state Exp;
branches
	1.15.10.1;
next	1.14;

1.14
date	2008.04.01.13.22.46;	author corinna;	state Exp;
branches;
next	1.13;

1.13
date	2008.03.12.17.04.10;	author corinna;	state Exp;
branches;
next	1.12;

1.12
date	2008.03.12.12.41.49;	author corinna;	state Exp;
branches;
next	1.11;

1.11
date	2008.03.07.11.24.51;	author corinna;	state Exp;
branches;
next	1.10;

1.10
date	2006.08.02.15.11.48;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2005.03.30.15.54.28;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2003.11.14.23.40.05;	author rbcollins;	state Exp;
branches;
next	1.7;

1.7
date	2002.06.29.02.36.08;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.15.21.59.32;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.12.05.13.54;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.31.00.55.32;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.24.22.26.50;	author cgf;	state Exp;
branches
	1.3.4.1;
next	1.2;

1.2
date	2000.10.16.23.55.57;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.09.08.02.56.54;	author cgf;	state Exp;
branches;
next	;

1.15.10.1
date	2013.01.21.13.52.04;	author corinna;	state Exp;
branches;
next	1.15.10.2;

1.15.10.2
date	2013.03.05.14.29.30;	author corinna;	state Exp;
branches;
next	1.15.10.3;

1.15.10.3
date	2013.03.05.16.44.26;	author corinna;	state Exp;
branches;
next	;

1.3.4.1
date	2002.01.04.03.56.07;	author rbcollins;	state Exp;
branches;
next	1.3.4.2;

1.3.4.2
date	2002.06.13.14.34.02;	author rbcollins;	state Exp;
branches;
next	1.3.4.3;

1.3.4.3
date	2002.06.18.00.17.07;	author scottc;	state Exp;
branches;
next	1.3.4.4;

1.3.4.4
date	2002.06.29.18.25.44;	author scottc;	state Exp;
branches;
next	;


desc
@@


1.19
log
@	* autoload.cc (CreateEnvironmentBlock): Import.
	(DestroyEnvironmentBlock): Import.
	* environ.cc (env_compare): New static bsearch comparison function.
	(build_env): Add parameter taking a user token.  If token is non-NULL,
	fetch user's default Windows environment and merge it into the resulting
	environment.  Explain what we do in preceeding comment.
	* environ,h (build_env): Align prototype to above change.
	* external.cc (create_winenv): Call build_env with NULL token.
	* spawn.cc (child_info_spawn::worker): When spawning new process under
	another user account, call build_env with new token to allow merging
	user's default Windows environment.
	* winlean.h (_USERENV_): Define to override dllimport.
@
text
@/* environ.h: Declarations for environ manipulation

   Copyright 2000, 2001, 2002, 2003, 2005, 2006, 2008, 2013, 2014 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

/* Initialize the environment */
void __reg2 environ_init (char **, int);

/* The structure below is used to control conversion to/from posix-style
   file specs.  Currently, only PATH and HOME are converted, but PATH
   needs to use a "convert path list" function while HOME needs a simple
   "convert to posix/win32".  */
struct win_env
  {
    const char *name;
    size_t namelen;
    char *posix;
    char *native;
    ssize_t (*toposix) (const void *, void *, size_t);
    ssize_t (*towin32) (const void *, void *, size_t);
    bool immediate;
    void __reg3 add_cache (const char *in_posix, const char *in_native = NULL);
    const char * get_native () const {return native ? native + namelen : NULL;}
    const char * get_posix () const {return posix ? posix : NULL;}
    struct win_env& operator = (struct win_env& x);
    void reset () {native = posix = NULL;}
    ~win_env ();
  };

win_env * __reg3 getwinenv (const char *name, const char *posix = NULL, win_env * = NULL);
char * __reg3 getwinenveq (const char *name, size_t len, int);

#ifdef __x86_64__
#define update_envptrs()
extern "C" char **__cygwin_environ;
#define cur_environ()  __cygwin_environ
#else
void __stdcall update_envptrs ();
extern "C" char **__cygwin_environ, ***main_environ;
extern "C" char __stdcall **cur_environ ();
#endif
char ** __reg3 build_env (const char * const *envp, PWCHAR &envblock,
			  int &envc, bool need_envblock, HANDLE new_token);

#define ENV_CVT -1
@


1.18
log
@	* environ.cc (win_env::add_cache): Set the Windows environment variable
	using wide chars to make sure native chars don't get scrambled.
	* environ.h (build_env): Fix formatting in declaration.
	* pinfo.cc (pinfo::status_exit): Handle STATUS_NO_MEMORY.  Explain why.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003, 2005, 2006, 2008, 2013 Red Hat, Inc.
d48 1
a48 1
			  int &envc, bool need_envblock);
@


1.17
log
@	* Merge in cygwin-64bit-branch.
@
text
@d48 1
a48 1
			     int &envc, bool need_envblock);
@


1.16
log
@Throughout, change __attribute__ ((regparm (N))) to just __regN.  Throughout,
(mainly in fhandler*) start fixing gcc 4.7.2 mismatch between regparm
definitions and declarations.
* gendef: Define some functions to take @@ declaration to accommodate _regN
defines which use __stdcall.
* gentls_offsets: Define __regN macros as empty.
* autoload.cc (wsock_init): Remove unneeded regparm attribute.
* winsup.h (__reg1): Define.
(__reg2): Define.
(__reg3): Define.
* advapi32.cc (DuplicateTokenEx): Coerce some initializers to avoid warnings
from gcc 4.7.2.
* exceptions.cc (status_info): Declare struct to use NTSTATUS.
(cygwin_exception::dump_exception): Coerce e->ExceptionCode to NTSTATUS.
* fhandler_clipboard.cc (cygnativeformat): Redefine as UINT to avoid gcc 4.7.2
warnings.
(fhandler_dev_clipboard::read): Ditto.
@
text
@d38 5
d46 1
@


1.15
log
@Add miscfuncs.h to files as needed throughout.
* mount.cc: New file.
* path.cc: Move mount-specific stuff into mount.cc.  Move common stuff into
miscfuncs.cc.  Remove unneeded includes.
* miscfuncs.cc: Move some common path functions here.
* miscfuncs.h: New file.
* winsup.h: Move miscelleneous functions to miscfuncs.h.
* dcrt0.cc: Remove unneeded includes.
* Makefile.in (DLL_OFILES): Add mount.o.
* include/cygwin/config.h: Fix a minor typo.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003, 2005, 2006, 2008 Red Hat, Inc.
d12 1
a12 2
void environ_init (char **, int)
  __attribute__ ((regparm (2)));
d27 1
a27 2
    void add_cache (const char *in_posix, const char *in_native = NULL)
      __attribute__ ((regparm (3)));
d35 2
a36 4
win_env * __stdcall getwinenv (const char *name, const char *posix = NULL, win_env * = NULL)
  __attribute__ ((regparm (3)));
char * __stdcall getwinenveq (const char *name, size_t len, int)
  __attribute__ ((regparm (3)));
d41 2
a42 3
char ** __stdcall build_env (const char * const *envp, PWCHAR &envblock,
			     int &envc, bool need_envblock)
  __attribute__ ((regparm (3)));
@


1.15.10.1
log
@Pull in changes from HEAD
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003, 2005, 2006, 2008, 2013 Red Hat, Inc.
d12 2
a13 1
void __reg2 environ_init (char **, int);
d28 2
a29 1
    void __reg3 add_cache (const char *in_posix, const char *in_native = NULL);
d37 4
a40 2
win_env * __reg3 getwinenv (const char *name, const char *posix = NULL, win_env * = NULL);
char * __reg3 getwinenveq (const char *name, size_t len, int);
d45 3
a47 2
char ** __reg3 build_env (const char * const *envp, PWCHAR &envblock,
			     int &envc, bool need_envblock);
@


1.15.10.2
log
@	For x86_64 target:
	* Makefile.in (COMMON_CFLAGS): Add -mcmodel=small to create smaller
	footprint.
	* cygwin64.din (__cygwin_environ): Drop export.  Only export environ
	as alias to __cygwin_environ.
	* dcrt0.cc (dll_crt0_1): Call main with __cygwin_environ as parameter.
	(_dll_crt0): Don't set main_environ.
	(cygwin_dll_init): Don't create local variable envp and don't set
	user_data->envptr.
	* dll_init.cc (dll_list::alloc): Don't assert.
	* dll_init.h (per_module::operator =): Don't set envptr.
	* environ.cc (cur_environ): Disable.
	* environ.h (main_environ): Don't define.
	(cur_environ): Change to macro.
	* globals.cc (main_environ): Don't initialize.
	(struct per_process): Drop envptr.
	* perprocess.h (SIZEOF_PER_PROCESS): Set to 41*8 to accommodate size
	change of struct per_process.
	* include/sys/cygwin.h (struct per_process): Drop envptr.
	* lib/_cygwin_crt0_common.cc (environ): Drop declaration.
	(_cygwin_crt0_common): Don't set u->envptr.
@
text
@a38 4
#ifdef __x86_64__
extern "C" char **__cygwin_environ;
#define cur_environ()  __cygwin_environ
#else
a40 1
#endif
@


1.15.10.3
log
@	For x86_64 target:
	* dll_init.cc (dll::init): Don't set p.envptr.
	(update_envptrs): Disable entirely.
	* dll_init.h (struct per_module): Disable envptr.
	* environ.h (update_envptrs): Change to empty macro.
@
text
@d38 1
a39 1
#define update_envptrs()
a42 1
void __stdcall update_envptrs ();
@


1.14
log
@	* Fix copyright dates.
@
text
@d43 1
a43 1
extern char **__cygwin_environ, ***main_environ;
@


1.13
log
@	* environ.h: Fix comment.
	* winsup.h: Ditto.  Reflect the fact that CYG_MAX_PATH is deprecated.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003, 2005, 2006 Red Hat, Inc.
@


1.12
log
@	* winsup.h (NT_MAX_PATH): Revert ill-advised change to 32767.
	Accommodate change throughout.

	* cygwin.din (cygwin_conv_path): Export.
	(cygwin_conv_path_list): Export.
	(cygwin_create_path): Export.
	* dcrt0.cc (dll_crt0_1): Use cygwin_conv_path.
	* dtable.cc (handle_to_fn): Ditto.  Don't expect UNICODE_STRING being
	0-terminated.
	* environ.cc (env_plist_to_posix): New helper function.
	(env_plist_to_win32): Ditto.
	(env_path_to_posix): Ditto.
	(env_path_to_win32): Ditto.
	(return_MAX_PATH): Remove.
	(conv_envvars): Use new helper functions.  Drop removed members.
	(win_env::operator =): Accommodate removal of path length functions.
	(win_env::add_cache): Accommodate new env helper function API.
	(posify): Ditto.
	* environ.h (struct win_env): Ditto. Remove path length function
	pointers since they are unused.
	* path.cc (warn_msdos): Use cygwin_conv_path.
	(getfileattr): Use new tmp_pathbuf::u_get method.
	(fillout_mntent): Ditto.
	(symlink_info::check): Ditto.
	(path_conv::check): Use sizeof (WCHAR) instead of constant 2.
	(symlink_info::check_reparse_point): Ditto.
	(conv_path_list): Get max size of target string as argument.  Call
	cygwin_conv_path as helper function.
	(cygwin_conv_path): New function.
	(cygwin_create_path): New function.
	(cygwin_conv_to_win32_path): Just call cygwin_conv_path with size set
	to MAX_PATH.
	(cygwin_conv_to_full_win32_path): Ditto.
	(cygwin_conv_to_posix_path): Ditto.
	(cygwin_conv_to_full_posix_path): Ditto.
	(conv_path_list_buf_size): Add FIXME comment.
	(env_PATH_to_posix): Rename from env_win32_to_posix_path_list.
	Add size argument as required for env helper functions.
	(cygwin_win32_to_posix_path_list): Call conv_path_list with size set to
	MAX_PATH.
	(cygwin_posix_to_win32_path_list): Ditto.
	(cygwin_conv_path_list): New function.
	(cwdstuff::get): Fix length argument in call to sys_wcstombs.
	* spawn.cc (find_exec): Use cygwin_conv_path_list.
	* tls_pbuf.h (tmp_pathbuf::u_get: New method.
	* uinfo.cc (cygheap_user::ontherange): Allocate temporary path buffers
	using tmp_pathbuf.  Use cygwin_conv_path.
	* winf.cc (av::unshift): Use cygwin_conv_path.
	* include/cygwin/version.h: Bump API minor number.
	* include/sys/cygwin.h: Comment out old cygwin32_XXX API.
	Mark old path handling API as deprecated.
	(cygwin_conv_path_t): Typedef.  Define values.
	(cygwin_conv_path): Declare.
	(cygwin_create_path): Declare.
	(cygwin_conv_path_list): Declare.
@
text
@d18 1
a18 2
   "convert to posix/win32".  For the simple case, where a calculated length
   is required, just return CYG_MAX_PATH.  *FIXME* */
@


1.11
log
@	* Makefile.in (DLL_OFILES): Add tls_pbuf.o.
	* autoload.cc (CreateDesktopW): Replace CreateDesktopA.
	(CreateWindowStationW): Replace CreateWindowStationA.
	(GetUserObjectInformationW): Replace GetUserObjectInformationA.
	* cygheap.h (cwdstuff::get): Assume default buffer size NT_MAX_PATH.
	* cygtls.cc (_cygtls::remove): Free temporary TLS path buffers.
	* cygtls.h (TP_NUM_C_BUFS): Define.
	(TP_NUM_W_BUFS): Define.
	(class tls_pathbuf): New class to store pointers to thread local
	temporary path buffers.
	(_local_storage::pathbufs): New member.
	* environ.cc (win_env::add_cache): Use temporary TLS path buffer instead
	of stack based buffer.
	(posify): Get temporary outenv buffer from calling function.
	(environ_init): Create temporary TLS path buffer for posify.
	(build_env): Create Windows environment block as WCHAR buffer.
	* environ.h (build_env): Change declaration accordingly.
	* external.cc (sync_winenv): Accommodate build_env change.
	* fhandler_console.cc (fhandler_console::need_invisible): Use
	GetUserObjectInformationW and CreateWindowStationW.
	* fhandler_process.cc (format_process_maps): Use temporary TLS path
	buffer instead of stack based buffer.
	* fork.cc (frok::parent): Convert to use CreateProcessW.
	* path.cc: Throughout use temporary TLS path buffers instead of stack
	based buffer.  Replace checks for CYG_MAX_PATH by checks for
	NT_MAX_PATH.
	(getfileattr): New function to replace GetFileAttributesA.
	(normalize_win32_path): Remove Win32 and NT long path prefixes.
	(getwd): Assume PATH_MAX + 1 buffer per SUSv3.
	* path.h (class path_conv): Set path buffer to size NT_MAX_PATH.
	(iswdrive): Define.
	* pinfo.cc (commune_process): Use temporary TLS path buffer instead of
	stack based buffer.
	* registry.cc (get_registry_hive_path): Ditto.
	(load_registry_hive): Ditto.
	* spawn.cc (spawn_guts): Convert to use CreateProcessW and
	CreateProcessAsUserW.
	(av::fixup): Open/close file using NtOpenFile/NtClose.
	* syscalls.cc (mknod_worker): Allow PATH_MAX file name.
	(mknod32): Ditto.
	(getusershell): Ditto.
	* tls_pbuf.cc: New file implementing tls_pathbuf and tmp_pathbuf
	methods.
	* tls_pbuf.h: New header for files using tmp_pathbuf.
	* tlsoffsets.h: Regenerate.
	* winsup.h (NT_MAX_PATH): Define as 32767 to avoid USHORT overflow.
@
text
@d26 2
a27 4
    int (*toposix) (const char *, char *);
    int (*towin32) (const char *, char *);
    int (*posix_len) (const char *);
    int (*win32_len) (const char *);
@


1.10
log
@* environ.cc (env_win32_to_posix_path_list): Declare.
(conv_envvars): Use env_win32_to_posix_path_list rather than
cygwin_win32_to_posix_path_list.
(posify): Translate back to win32 path if errno is EIDRM.
* environ.h: Update copyright.  Define ENV_CVT.
* path.cc (conv_path_list): If converting for the environment and removed an
element set errno to ENV_CVT.
(env_win32_to_posix_path_list): New function.
@
text
@d48 1
a48 1
char ** __stdcall build_env (const char * const *envp, char *&envblock,
@


1.9
log
@* environ.h (win_env::immediate): Declare new field.
(win_env::operator = ): Declare new operator.
(win_env::reset): Declare new function.
(win_env::~win_env): Declare new destructor.
(getwinenv): Add optional third argument to declaration.
* environ.cc (conv_envvars): Accommodate immediate field.
(win_env::operator =): Define new operator.
(win_env::~win_env): Define new destructor.
(win_env::add_cache): Add value to environment immediately if "immediate" is
set.
(getwinenv): Accept optional third argument which will be used to store
"cached" values to avoid overwriting real cache.
(spenv::force): Declare new field.
(spenvs): Accommodate force field.  Add "PATH=" with force set to true.
(spenv::retrieve): Avoid duping anything if we're not building an envblock.
(build_env): Ditto.  Use size of potentially constructed new environment block
to determine if we need to create an environment block.  Pass getwinenv
temporary storage to avoid inappropriately overwriting the environment cache.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002 Red Hat, Inc.
d51 2
@


1.8
log
@2003-11-11  Robert Collins <rbtcollins@@hotmail.com>
	    Ron Parker <rdparker@@butlermfg.com>

	* bsdlib.cc: Update throughout to use CYG_MAX_PATH rather than MAX_PATH.
	* cygheap.h: Ditto.
	* dcrt0.cc: Ditto.
	* delqueue.cc: Ditto.
	* dlfcn.cc: Ditto.
	* dll_init.cc: Ditto.
	* dll_init.h: Ditto.
	* dtable.cc: Ditto.
	* environ.cc: Ditto.
	* environ.h: Ditto.
	* exceptions.cc: Ditto.
	* external.cc: Ditto.
	* fhandler_disk_file.cc: Ditto.
	* fhandler_proc.cc: Ditto.
	* fhandler_process.cc: Ditto.
	* fhandler_raw.cc: Ditto.
	* fhandler_registry.cc: Ditto.
	* fhandler_socket.cc: Ditto.
	* fhandler_virtual.cc: Ditto.
	* miscfuncs.cc: Ditto.
	* mmap.cc: Ditto.
	* netdb.cc: Ditto.
	* path.cc: Ditto.
	* path.h: Ditto.
	* pinfo.cc: Ditto.
	* pinfo.h: Ditto.
	* pthread.cc: Ditto.
	* registry.cc: Ditto.
	* shared.cc: Ditto.
	* shared_info.h: Ditto.
	* smallprint.c: Ditto.
	* spawn.cc: Ditto.
	* strace.cc: Ditto.
	* syscalls.cc: Ditto.
	* thread.h: Ditto.
	* uinfo.cc: Ditto.
	* winsup.h: Ditto.
	* include/limits.h: Ditto.
	* include/cygwin/config.h: Ditto.
	* include/sys/param.h: Ditto.
@
text
@d30 1
d35 3
d40 1
a40 1
win_env * __stdcall getwinenv (const char *name, const char *posix = NULL)
@


1.7
log
@* cygheap.h (cygheap_user): Reorg to accommodate environment caching.
(cygheap_user::logsrv): New method.
(cygheap_user::winname): Ditto.
(cygheap_user::domain): Ditto.
(cygheap_user::test_uid): Ditto.
* cygheap.cc (cygheap_user::set_name): Reflect name "pwinname" name change.
* environ.cc (getwinenveq): New function.
(spenv::from_cygheap): Change arguments.
(spenv::retrieve): Ditto for call.  Use getwinenveq to retrieve info from
environment.  Always return value from cygwin environment, if it exists.
* environ.h (getwinenveq): Declare.
* uinfo.cc (cygheap_user::ontherange): Use logsrv() rather than env_logsrv().
(cygheap_user::test_uid): Define new method.
(cygheap_user::env_logsrv): Accept environment arguments.  Use test_uid to find
info.
(cygheap_user::env_domain): Ditto.
(cygheap_user::env_userprofile): Ditto.
(cygheap_user::env_homepath): Ditto.
(cygheap_user::env_homedrive): Ditto.
(cygheap_user::env_name): Ditto.
@
text
@d19 1
a19 1
   is required, just return MAX_PATH.  *FIXME* */
@


1.6
log
@* child_info.h (child_proc_info): Declare as base class.
(spawn_info): Declare as alias of child_proc_info to aid debugging.
(fork_info): Ditto.
* cygheap.cc (cygheap_fixup_in_child): Use child_proc_info global rather than
parameter.
* cygheap.h (cygheap_fixup_in_child): Reflect above change in declaration.
* dcrt0.cc (_dll_crt0): Move 'si' definition here.  Assign child_proc_info.
(dll_crt0_1): Accommodate cygheap_fixup_in_child and *_info changes.
* environ.cc (spenv::retrieve): Make regparm.
* environ.h (environ_init): Ditto.
(win_env::add_cache): Ditto.
(build_env): Ditto.
(getwinenv): Ditto.
* fork.cc (sync_with_parent): Use fork_info global.
(fork_child): Ditto.
@
text
@d38 2
@


1.5
log
@* cygheap.cc (cygheap_user::set_name): Set homedrive and homepath to NULL on
user name change.
(cygheap_user::set_logsrv): Allocate enough space for leading \\ so that we can
put this in the environment, if needed.
* cygheap.h (homebodies): New enum.
(cygheap_user::homedrive): New field.
(cygheap_user::homepath): Ditto.
(cygheap_user::env_logsrv): New method.
(cygheap_user::env_homepath): New method.
(cygheap_user::env_homedrive): New method.
(cygheap_user::env_userprofile): New method.
(cygheap_user::ontherange): New method.
* environ.cc (envsize): Eliminate debugging argument.
(environ_init): Assume that envc counts number of elments not total size.
(spenv): New class.
(spenvs): New array, renamed from forced_winenv_vars, using spenv.
(spenv::retrieve): New method.
(build_env): Rename from 'winenv' -- one stop shopping for building new
environment blocks for both windows and "unix".
* environ.h (build_env: Declare.
(winenv): Delete declaration.
(envsize): Ditto.
* spawn.cc (spawn_guts): Use build_env to build windows and cygwin environment
blocks.
* uinfo.cc (internal_getlogin): Eliminate environment manipulation.  Default to
info from GetUserName if it exists.  Move HOMEPATH and HOMEDRIVE stuff
elsewhere.  Move HOME setting elsewhere.  Only set HOME environment variable in
processes that are not parented by a cygwin process.
(cygheap_user::ontherange): Define new method.
(cygheap_user::env_logsrv): Ditto.
(cygheap_user::env_homepath): Ditto.
(cygheap_user::env_homedrive): Ditto.
(cygheap_user::env_userprofile): Ditto.
@
text
@d12 2
a13 1
void environ_init (char **, int);
d30 2
a31 1
    void add_cache (const char *in_posix, const char *in_native = NULL);
d36 2
a37 1
win_env * __stdcall getwinenv (const char *name, const char *posix = NULL);
d43 2
a44 1
			     int &envc, bool need_envblock);
@


1.4
log
@* cygheap.h (cygheap_fdmanip::cygheap_fdmanip): Clear fh.
(cygheap_fdmanip::isopen): New method.
* syscalls.cc (_read): Avoid accessing closed fd.
* path.h (fe_types): New enum.
(path_conv::set_path): New method.
(find_exec): Change null_if_not_found argument to something more generic.
* spawn.cc (find_exec): Default to returning the POSIX path rather than the
windows path, unless instructed otherwise.
(spawn_guts): Force call to find_exec to use native paths.
* dlfcn.cc (check_path_access): Accommodate new find_exec arguments.
* environ.h (win_env::get_posix): New method.
@
text
@d3 1
a3 1
   Copyright 2000 Red Hat, Inc.
d15 4
a18 5
 * file specs.  Currently, only PATH and HOME are converted, but PATH
 * needs to use a "convert path list" function while HOME needs a simple
 * "convert to posix/win32".  For the simple case, where a calculated length
 * is required, just return MAX_PATH.  *FIXME*
 */
a36 1
char * __stdcall winenv (const char * const *, int);
d39 2
a40 1
int __stdcall envsize (const char * const *, int debug_print = 0);
@


1.3
log
@forced commit
@
text
@d31 2
a32 1
    const char * get_native () {return native ? native + namelen : NULL;}
@


1.3.4.1
log
@Merged changes from HEAD
@
text
@d31 1
a31 2
    const char * get_native () const {return native ? native + namelen : NULL;}
    const char * get_posix () const {return posix ? posix : NULL;}
@


1.3.4.2
log
@Merged changes from HEAD
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002 Red Hat, Inc.
d15 5
a19 4
   file specs.  Currently, only PATH and HOME are converted, but PATH
   needs to use a "convert path list" function while HOME needs a simple
   "convert to posix/win32".  For the simple case, where a calculated length
   is required, just return MAX_PATH.  *FIXME* */
d38 1
d41 1
a41 2
char ** __stdcall build_env (const char * const *envp, char *&envblock,
			     int &envc, bool need_envblock);
@


1.3.4.3
log
@Merged changes from HEAD
@
text
@d12 1
a12 2
void environ_init (char **, int)
  __attribute__ ((regparm (2)));
d29 1
a29 2
    void add_cache (const char *in_posix, const char *in_native = NULL)
      __attribute__ ((regparm (3)));
d34 1
a34 2
win_env * __stdcall getwinenv (const char *name, const char *posix = NULL)
  __attribute__ ((regparm (3)));
d40 1
a40 2
			     int &envc, bool need_envblock)
  __attribute__ ((regparm (3)));
@


1.3.4.4
log
@Merged changes from HEAD
@
text
@a37 2
char * __stdcall getwinenveq (const char *name, size_t len, int)
  __attribute__ ((regparm (3)));
@


1.2
log
@* Makefile.in: Remove some obsolete stuff.
* dcrt0.cc (dll_crt0_1): Call signal_fixup_after_exec where appropriate.  Set
myself->uid from parent version.  Just use ThreadItem Init method.  Close or
store hexec_proc as appropriate.
(_dll_crt0): Store user_data->forkee here so that proper tests can be made
subsequently.
(do_exit): Remove hExeced stuff.
* environ.cc (environ_init): Accept environ count as well as environ pointer.
* environ.h: Reflect above change.
* pinfo.cc (pinfo_init): Ditto.  Accept environ count.
(fixup_in_spawned_child): Remove.
* spawn.cc (spawn_guts): Move signal code to dll_crt0_1.  Don't suspend execing
process since it is no longer necessary.  Store envc.
* exceptions.cc (signal_fixup_after_exec): New function.
(call_handler): Remove hExeced test.
* child_info.h (cygheap_exec_info): Store envc as well as envp.
(child_info_spawn): Store hexec_proc so that it can be closed in child.
* path.cc (normalize_posix_path): Avoid intermediate use of temporary cwd buf.
(normalize_win32_path): Ditto.
(cwdstuff::get_initial): Always set lock.
* sigproc.h: Remove hExeced.
* strace.cc (strace::vsprntf): Modify to accomodate for lack of hExeced.
* thread.cc (MTinterface::Init): Merge Init1 and ClearReent into this method.
(MTinterface::Init1): Eliminate.
(MTinterface::ClearReent): Eliminate.
* thread.h: Reflect above changes.
* include/sys/strace.h (strace): Make microseconds() public.  Make various
functions 'regparm', throughout.
* pinfo.h (_pinfo): Inline simple signal manipulation functions.  Requires
inclusion of thread.h which was removed from .cc files, where appropriate.
throughout.
* pinfo.cc: Eliminate signal manipulation functions.
(_pinfo::exit): Calculate total rusage for exiting process here.
* cygheap.cc (size2bucket): Eliminate.
(init_buckets): Ditto.
(_cmalloc): Calculate size and bits in a loop rather than going through a
function call.
(_crealloc): Use stored array index to calculate allocated size.
* spawn.cc (spawn_guts): Use _pinfo exit method to exit, calculating cpu usage.
@
text
@@


1.1
log
@Break out more header info into separate files.  Use appropriate header files
throughout.
* shared.h: Remove.
* cygwin_version.h: New file.
* delqueue.h: New file.
* environ.h: New file.
* host_dependent.h: New file.
* perprocess.h: New file.
* registry.h: New file.
* security.h: New file.
@
text
@d12 1
a12 1
void environ_init (char **);
@

