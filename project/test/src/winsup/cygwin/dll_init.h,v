head	1.34;
access;
symbols
	cygwin-1_7_35-release:1.34
	cygwin-1_7_34-release:1.34
	cygwin-1_7_33-release:1.34
	cygwin-1_7_32-release:1.34
	cygwin-1_7_31-release:1.34
	cygwin-1_7_30-release:1.34
	cygwin-1_7_29-release:1.34
	cygwin-1_7_29-release-branchpoint:1.34.0.2
	cygwin-pre-user-db:1.34
	cygwin-1_7_28-release:1.34
	cygwin-1_7_27-release:1.34
	cygwin-1_7_26-release:1.34
	cygwin-1_7_25-release:1.34
	cygwin-1_7_24-release:1.34
	cygwin-1_7_23-release:1.34
	cygwin-1_7_22-release:1.34
	cygwin-1_7_21-release:1.34
	cygwin-1_7_20-release:1.34
	cygwin-1_7_19-release:1.34
	cygwin-64bit-postmerge:1.34
	cygwin-64bit-premerge-branch:1.33.0.2
	cygwin-64bit-premerge:1.33
	cygwin-1_7_18-release:1.33
	post-ptmalloc3:1.32.2.2
	pre-ptmalloc3:1.32.2.2
	cygwin-1_7_17-release:1.32
	cygwin-64bit-branch:1.32.0.2
	cygwin-1_7_16-release:1.32
	cygwin-1_7_15-release:1.32
	cygwin-1_7_14_2-release:1.32
	cygwin-1_7_14-release:1.32
	cygwin-1_7_12-release:1.32
	cygwin-1_7_11-release:1.31
	cygwin-1_7_10-release:1.28
	signal-rewrite:1.28.0.2
	pre-notty:1.28
	cygwin-1_7_9-release:1.19
	cv-post-1_7_9:1.19.0.2
	cygwin-1_7_8-release:1.19
	cygwin-1_7_7-release:1.19
	cygwin-1_7_5-release:1.19
	cygwin-1_7_4-release:1.19
	cygwin-1_7_3-release:1.19
	cygwin-1_7_2-release:1.19
	fifo_doover3:1.18.0.2
	cygwin-1_7_1-release:1.18
	prefifo:1.17
	cv-branch-2:1.17.0.2
	pre-ripout-set_console_state_for_spawn:1.13
	EOL_registry_mounts:1.13
	preoverlapped:1.11
	drop_9x_support_start:1.11
	cr-0x5f1:1.11.0.8
	cv-branch:1.11.0.6
	pre-ptymaster-archetype:1.11
	cr-0x3b58:1.11.0.4
	cr-0x5ef:1.11.0.2
	after-mmap-privanon-noreserve:1.11
	after-mmap-revamp:1.11
	before-mmap-revamp:1.11
	cgf-more-exit-sync:1.11
	post_wait_sig_exit:1.11
	pre_wait_sig_exit:1.11
	reparent-point:1.9
	noreparent:1.9.0.10
	cr-0x5e6:1.9.0.8
	cr-0x9e:1.9.0.6
	cr-0x9d:1.9.0.4
	cgf-deleteme:1.9.0.2
	pre-sigrewrite:1.9
	corinna-01:1.8
	cr-0x9c:1.8.0.6
	cr-0x9b:1.8.0.4
	cr-0x99:1.8
	Z-emcb-cygwin_daemon:1.8.0.2
	w32api-2_2:1.8
	mingw-runtime-2_4:1.8
	pre-cgf-merge:1.8
	cgf-dev-branch:1.8.0.8
	predaemon:1.5
	cygwin_daemon_merge_HEAD:1.5
	pregp02r1:1.5.0.30
	cygnus_cvs_20020108_pre:1.5
	Z-cygwin_daemon_merge-new_HEAD:1.7
	Z-cygwin_daemon_merge_HEAD:1.7
	cygwin_daemon:1.4.0.4;
locks; strict;
comment	@ * @;
expand	@o@;


1.34
date	2013.04.23.09.44.32;	author corinna;	state Exp;
branches;
next	1.33;

1.33
date	2013.01.21.04.38.27;	author cgf;	state Exp;
branches;
next	1.32;

1.32
date	2012.03.04.13.50.12;	author corinna;	state Exp;
branches
	1.32.2.1;
next	1.31;

1.31
date	2012.02.09.14.41.21;	author corinna;	state Exp;
branches;
next	1.30;

1.30
date	2012.02.09.09.04.10;	author corinna;	state Exp;
branches;
next	1.29;

1.29
date	2012.02.08.17.35.02;	author corinna;	state Exp;
branches;
next	1.28;

1.28
date	2011.06.06.05.02.09;	author cgf;	state Exp;
branches;
next	1.27;

1.27
date	2011.05.30.17.16.24;	author cgf;	state Exp;
branches;
next	1.26;

1.26
date	2011.05.30.16.09.29;	author cgf;	state Exp;
branches;
next	1.25;

1.25
date	2011.05.30.06.52.12;	author cgf;	state Exp;
branches;
next	1.24;

1.24
date	2011.05.28.20.55.34;	author cgf;	state Exp;
branches;
next	1.23;

1.23
date	2011.05.28.20.41.51;	author cgf;	state Exp;
branches;
next	1.22;

1.22
date	2011.05.28.20.27.56;	author cgf;	state Exp;
branches;
next	1.21;

1.21
date	2011.05.28.20.17.09;	author cgf;	state Exp;
branches;
next	1.20;

1.20
date	2011.04.21.00.53.55;	author cgf;	state Exp;
branches;
next	1.19;

1.19
date	2010.02.02.02.00.01;	author cgf;	state Exp;
branches;
next	1.18;

1.18
date	2009.08.21.21.32.06;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2009.06.08.03.53.40;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2009.06.06.11.47.29;	author corinna;	state Exp;
branches;
next	1.15;

1.15
date	2008.08.13.08.25.44;	author corinna;	state Exp;
branches;
next	1.14;

1.14
date	2008.08.04.15.55.32;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2008.02.14.16.47.11;	author corinna;	state Exp;
branches;
next	1.12;

1.12
date	2007.12.12.12.12.23;	author corinna;	state Exp;
branches;
next	1.11;

1.11
date	2005.04.14.17.34.03;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2005.04.03.08.45.17;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2003.11.14.23.40.05;	author rbcollins;	state Exp;
branches;
next	1.8;

1.8
date	2002.11.14.04.29.39;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2002.04.19.14.42.20;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2002.04.19.12.46.19;	author rbcollins;	state Exp;
branches;
next	1.5;

1.5
date	2001.11.03.03.32.27;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.11.20.01.00;	author cgf;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2001.06.24.22.26.49;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.15.02.48.10;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.32.2.1
date	2012.10.23.14.23.49;	author corinna;	state Exp;
branches;
next	1.32.2.2;

1.32.2.2
date	2013.01.21.13.52.04;	author corinna;	state Exp;
branches;
next	1.32.2.3;

1.32.2.3
date	2013.03.05.14.29.30;	author corinna;	state Exp;
branches;
next	1.32.2.4;

1.32.2.4
date	2013.03.05.16.44.26;	author corinna;	state Exp;
branches;
next	;

1.4.4.1
date	2002.01.04.03.56.06;	author rbcollins;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.34
log
@	* Merge in cygwin-64bit-branch.
@
text
@/* dll_init.h

   Copyright 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2007, 2008, 2009, 2010,
   2011, 2012, 2013 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

struct per_module
{
#ifndef __x86_64__
  char ***envptr;
#endif
  void (**ctors)(void);
  void (**dtors)(void);
  void *data_start;
  void *data_end;
  void *bss_start;
  void *bss_end;
  int (*main)(int, char **, char **);
  per_module &operator = (per_process *p)
  {
#ifndef __x86_64__
    envptr = p->envptr;
#endif
    ctors = p->ctors;
    dtors = p->dtors;
    data_start = p->data_start;
    data_end = p->data_end;
    bss_start = p->bss_start;
    bss_end = p->bss_end;
    main = p->main;
    return *this;
  }
  void run_ctors ();
  void run_dtors ();
};


typedef enum
{
  DLL_NONE,
  DLL_LINK,
  DLL_LOAD,
  DLL_ANY
} dll_type;

struct dll
{
  struct dll *next, *prev;
  per_module p;
  HMODULE handle;
  int count;
  bool has_dtors;
  dll_type type;
  long ndeps;
  dll** deps;
  DWORD image_size;
  void* preferred_base;
  PWCHAR modname;
  WCHAR name[1];
  void detach ();
  int init ();
  void run_dtors ()
  {
    if (has_dtors)
      {
	has_dtors = 0;
	p.run_dtors ();
      }
  }
};

#define MAX_DLL_BEFORE_INIT     100

class dll_list
{
  dll *end;
  dll *hold;
  dll_type hold_type;
  static muto protect;
public:
  dll start;
  int loaded_dlls;
  int reload_on_fork;
  dll *operator [] (const PWCHAR name);
  dll *alloc (HINSTANCE, per_process *, dll_type);
  dll *find (void *);
  void detach (void *);
  void init ();
  void load_after_fork (HANDLE);
  void reserve_space ();
  void load_after_fork_impl (HANDLE, dll* which, int retries);
  dll *find_by_modname (const PWCHAR name);
  void populate_deps (dll* d);
  void topsort ();
  void topsort_visit (dll* d, bool goto_tail);
  void append (dll* d);

  dll *inext ()
  {
    while ((hold = hold->next))
      if (hold_type == DLL_ANY || hold->type == hold_type)
	break;
    return hold;
  }

  dll *istart (dll_type t)
  {
    hold_type = t;
    hold = &start;
    return inext ();
  }
  void guard(bool lockit)
  {
    if (lockit)
      protect.acquire ();
    else
      protect.release ();
  }
  friend void dll_global_dtors ();
  dll_list () { protect.init ("dll_list"); }
};

/* References:
   http://msdn.microsoft.com/en-us/windows/hardware/gg463125
   http://msdn.microsoft.com/en-us/library/ms809762.aspx
*/
struct pefile
{
  IMAGE_DOS_HEADER dos_hdr;

  char* rva (ptrdiff_t offset) { return (char*) this + offset; }
  PIMAGE_NT_HEADERS pe_hdr () { return (PIMAGE_NT_HEADERS) rva (dos_hdr.e_lfanew); }
  PIMAGE_OPTIONAL_HEADER optional_hdr () { return &pe_hdr ()->OptionalHeader; }
  PIMAGE_DATA_DIRECTORY idata_dir (DWORD which)
  {
    PIMAGE_OPTIONAL_HEADER oh = optional_hdr ();
    return (which < oh->NumberOfRvaAndSizes)? oh->DataDirectory + which : 0;
  }
};

extern dll_list dlls;
void dll_global_dtors ();

/* These probably belong in a newlib header but we can keep them here
   for now.  */
extern "C" int __cxa_atexit(void (*)(void*), void*, void*);
extern "C" int __cxa_finalize(void*);
@


1.33
log
@Throughout, update copyrights to reflect dates which correspond to main-branch
checkins.  Regularize copyright format.
@
text
@d4 1
a4 1
   2011, 2012 Red Hat, Inc.
d14 1
d16 1
d26 1
d28 1
d136 3
a138 3
  char* rva (long offset) { return (char*) this + offset; }
  PIMAGE_NT_HEADERS32 pe_hdr () { return (PIMAGE_NT_HEADERS32) rva (dos_hdr.e_lfanew); }
  PIMAGE_OPTIONAL_HEADER32 optional_hdr () { return &pe_hdr ()->OptionalHeader; }
d141 1
a141 1
    PIMAGE_OPTIONAL_HEADER32 oh = optional_hdr ();
@


1.32
log
@	* dll_init.cc: Revert pathname changes from 2012-02-08.
	(dll_list::operator[]): Add long comment to explain the misery.
	(dll_list::alloc): Skip long pathname prefix potentially returned by
	GetModuleFileNameW.
	* dll_init.h (dll_list::find_by_modname): Add back declaration.
@
text
@d3 2
a4 2
   Copyright 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2007, 2008,
   2009, 2010, 2011, 2012 Red Hat, Inc.
@


1.32.2.1
log
@	* dll_init.cc (reserve_at): Use PVOID rather than DWORD as type for
	pointer parameters and return type.
	(release_at): Ditto.
	(dll_list::load_after_fork_impl): Fix format strings.  Call reserve_at
	without casts to DWORD.
	(struct dllcrt0_info): Change type of res to PVOID.
	(dll_dllcrt0): Return PVOID rather than int.
	(dll_dllcrt0_1): Accommodate type change of dllcrt0_info::res.
	(dll_noncygwin_dllcrt0): Disable on 64 bit.  Add a cast for 32 bit.
	* dll_init.h (struct pefile): Drop 32 bit decoration from Windows
	types.
	* ntdll.h (struct _DEBUG_HEAP_INFORMATION): Define Base as UINT_PTR.
	(struct _DEBUG_MODULE_INFORMATION): Define Reserved and Base as
	UINT_PTR.
	* winsup.h (dll_dllcrt0): Declare as PVOID.
	(dll_noncygwin_dllcrt0): Don't declare on 64 bit.
	* include/cygwin/cygwin_dll.h (cygwin_attach_dll): Declare as PVOID.
	(cygwin_detach_dll): Declare with PVOID parameter.
	(dll_index): Declare as PVOID.
	(_cygwin_dll_entry): Accommodate type change of dll_index.
	* lib/crt0.h (dll_dllcrt0): Declare as PVOID.
	* lib/cygwin_attach_dll.c (cygwin_attach_dll): Define PVOID.
@
text
@d132 3
a134 3
  char* rva (ptrdiff_t offset) { return (char*) this + offset; }
  PIMAGE_NT_HEADERS pe_hdr () { return (PIMAGE_NT_HEADERS) rva (dos_hdr.e_lfanew); }
  PIMAGE_OPTIONAL_HEADER optional_hdr () { return &pe_hdr ()->OptionalHeader; }
d137 1
a137 1
    PIMAGE_OPTIONAL_HEADER oh = optional_hdr ();
@


1.32.2.2
log
@Pull in changes from HEAD
@
text
@d3 2
a4 2
   Copyright 1998, 1999, 2000, 2001, 2002, 2003, 2005, 2007, 2008, 2009, 2010,
   2011, 2012 Red Hat, Inc.
@


1.32.2.3
log
@	For x86_64 target:
	* Makefile.in (COMMON_CFLAGS): Add -mcmodel=small to create smaller
	footprint.
	* cygwin64.din (__cygwin_environ): Drop export.  Only export environ
	as alias to __cygwin_environ.
	* dcrt0.cc (dll_crt0_1): Call main with __cygwin_environ as parameter.
	(_dll_crt0): Don't set main_environ.
	(cygwin_dll_init): Don't create local variable envp and don't set
	user_data->envptr.
	* dll_init.cc (dll_list::alloc): Don't assert.
	* dll_init.h (per_module::operator =): Don't set envptr.
	* environ.cc (cur_environ): Disable.
	* environ.h (main_environ): Don't define.
	(cur_environ): Change to macro.
	* globals.cc (main_environ): Don't initialize.
	(struct per_process): Drop envptr.
	* perprocess.h (SIZEOF_PER_PROCESS): Set to 41*8 to accommodate size
	change of struct per_process.
	* include/sys/cygwin.h (struct per_process): Drop envptr.
	* lib/_cygwin_crt0_common.cc (environ): Drop declaration.
	(_cygwin_crt0_common): Don't set u->envptr.
@
text
@d4 1
a4 1
   2011, 2012, 2013 Red Hat, Inc.
a23 1
#ifndef __x86_64__
a24 1
#endif
@


1.32.2.4
log
@	For x86_64 target:
	* dll_init.cc (dll::init): Don't set p.envptr.
	(update_envptrs): Disable entirely.
	* dll_init.h (struct per_module): Disable envptr.
	* environ.h (update_envptrs): Change to empty macro.
@
text
@a13 1
#ifndef __x86_64__
a14 1
#endif
@


1.31
log
@	* dll_init.h (struct dll): Re-add modname.
	* dll_init.cc: Throughout, use modname where it was used before.
	(dll_list::operator[]): Use modname.  Move comment from dll_list::alloc
	here and remove hint about GetModuleBaseNameW.
	(dll_list::alloc): Store full path in name, pointer to basename in
	modname.  Search dll using modname.
@
text
@d93 1
@


1.30
log
@*** empty log message ***
@
text
@d59 1
@


1.29
log
@	* dll_init.cc: Throughout, drop usage of modname in favor of name.
	(dll_list::find_by_modname): Remove.
	(dll_list::alloc): Only store module basename in name.  Add comment to
	explain why.  Simplify address check.  Fix formatting in comment.
	* dll_init.h (struct dll): Drop modname and find_by_modname.
@
text
@d4 1
a4 1
   2009 Red Hat, Inc.
@


1.28
log
@whitespace elimination
@
text
@a56 1
  PWCHAR modname;
a91 1
  dll *find_by_modname (const PWCHAR name);
@


1.27
log
@* dll_init.cc (dll_list::append): Eliminate increment of unused tot variable.
* dll_init.h (dll_list::tot): Delete.
(dll_list::populate_all_deps): Delete undefined function.
* fhandler.cc (fhandler_base_overlapped::wait_overlapped): Move EPIPE handling
under error condition.
@
text
@d98 1
a98 1
  
@


1.26
log
@* dll_init.cc (reserve_upto): Remove.
(release_upto): Ditto.
(dll_list::reserve_space): New function to reserve space needed by DLL_LOAD
dlls early in the fork process.
(dll_list::load_after_fork): Rewrite to use recursion to track reservations it
makes while trying to make dlls land where they belong.
(dll_list::load_after_fork_impl): New function used by load_after_fork.
(dll_list::alloc): Initialize image base field.
* dll_init.h (dll_list::prefered_base): New field.
(dll_list::reserve_space): Declare new function.
(dll_list::load_after_fork): Declare new function.
* fork.cc (frok::child): call dll_list::reserve_space early, so we can retry if
it fails.
@
text
@a82 1
  int tot;
a93 1
  void populate_all_deps ();
@


1.25
log
@* dll_init.cc (dll_list::find_by_modname): New function to search the dll list
for a module name only (no path).
(dll_list::alloc): Initialize newly-added members of struct dll.
(dll_list::append): New function to factor out the append operation
(used by dll_list::topsort).
(dll_list::populate_deps): New function to identify dll dependencies.
(dll_list::topsort): New function to sort the dll list topologically by
dependencies.
(dll_list::topsort_visit): New helper function for the above.
* dll_init.h (dll::ndeps): New class member.
(dll::deps): Ditto.
(dll::modname): Ditto.
(dll_list::find_by_modname): New function related to topsort.
(dll_list::populate_all_deps): Ditto.
(dll_list::populate_deps): Ditto.
(dll_list::topsort): Ditto.
(dll_list::topsort_visit): Ditto.
(dll_list::append): Ditto.
(pefile): New struct allowing simple introspection of dll images.
* fork.cc (fork): Topologically sort the dll list before forking
* child_info.h (CURR_CHILD_INFO_MAGIC): Refresh.
(child_info::refresh_cygheap): New function.
* spawn.cc (spawn_guts): Call refresh_cygheap before creating a new process to
ensure that cygheap_max is up-to-date.
* fork.cc (frok::parent): Ditto.
@
text
@d59 1
d92 2
@


1.24
log
@* dll_init.cc (dll_list::alloc): Initialize dll::image_size.
(reserve_at): Don't reserve space needed by the target dll if the latter
overlaps the free region to be blocked.
(dll_list::load_after_fork): Use new version of reserve_at.
* dll_init.h (dll::image_size): New member.
(pefile): New struct.
@
text
@d55 3
d91 7
@


1.23
log
@Revert previous checkins as they introduced a bug when running zsh.
@
text
@d55 1
d113 18
@


1.22
log
@* dll_init.cc (reserve_upto): Remove.
(release_upto): Ditto.
(dll_list::reserve_space): New function to reserve space needed by DLL_LOAD
dlls early in the fork process.
(dll_list::load_after_fork): Rewrite to use recursion for tracking reservations
made while trying to make dlls land where they belong.
(dll_list::load_after_fork_impl): Ditto.
(dll_list::alloc): Initialize image base field.
* dll_init.h (struct dll_list): declare new functions.
(dll::image_size): New member.
@
text
@a54 4
  DWORD image_size;
  long ndeps;
  dll** deps;
  PWCHAR modname;
a86 7
  dll *find_by_modname (const PWCHAR name);
  void populate_all_deps ();
  void populate_deps (dll* d);
  void topsort ();
  void topsort_visit (dll* d, bool goto_tail);
  void append (dll* d);
  
a111 19
/* References:
   http://msdn.microsoft.com/en-us/windows/hardware/gg463125
   http://msdn.microsoft.com/en-us/library/ms809762.aspx
*/
/* FIXME: Integrate with other similar uses in source. */
struct pefile
{
  IMAGE_DOS_HEADER dos_hdr;

  char* rva (long offset) { return (char*) this + offset; }
  PIMAGE_NT_HEADERS32 pe_hdr () { return (PIMAGE_NT_HEADERS32) rva (dos_hdr.e_lfanew); }
  PIMAGE_OPTIONAL_HEADER32 optional_hdr () { return &pe_hdr ()->OptionalHeader; }
  PIMAGE_DATA_DIRECTORY idata_dir (DWORD which)
  {
    PIMAGE_OPTIONAL_HEADER32 oh = optional_hdr ();
    return (which < oh->NumberOfRvaAndSizes)? oh->DataDirectory + which : 0;
  }
};

@


1.21
log
@* dll_init.cc (dll_list::find_by_modname): New function to search the dll list
for a module name only (no path).
(dll_list::alloc): Initialize newly-added members of struct dll.
(dll_list::append): New function to factor out the append operation
(used by dll_list::topsort).
(dll_list::populate_deps): New function to identify dll dependencies.
(dll_list::topsort): New function to sort the dll list topologically by
dependencies.
(dll_list::topsort_visit): New helper function for the above.
* dll_init.h (dll::ndeps): New class member.
(dll::deps): Ditto.
(dll::modname): Ditto.
(dll_list::find_by_modname): New function related to topsort.
(dll_list::populate_all_deps): Ditto.
(dll_list::populate_deps): Ditto.
(dll_list::topsort): Ditto.
(dll_list::topsort_visit): Ditto.
(dll_list::append): Ditto.
(pefile): New struct allowing simple introspection of dll images.
* fork.cc (fork): Topologically sort the dll list before forking.
@
text
@d55 1
@


1.20
log
@* cygheap.cc (init_cygheap::close_ctty): Avoid closing console-cttys since they
don't use archetypes and this will just result in double frees.
* dll_init.cc (dll_list::protect): Define.
(dll_list::alloc): Guard list access.
(dll_list::detach): Ditto.
* dll_init.h (dll_list::protect): Declare new muto.
(dll_list::guard): Define/declare function to guard list access.
* fhandler_termios.cc (fhandler_termios::sigflush): Avoid SEGV in pathological
condition of get_ttyp() == NULL.
@
text
@d55 3
d90 7
d122 19
@


1.19
log
@* dcrt0.cc (atexit_lock): Delete.
(cygwin_exit): Remove atexit lock.
(cygwin_atexit): Ditto.  Rename parameter to match newlib.  Call __cxa_atexit
when invoked by a registered DLL.
* dll_init.cc (remove_dll_atexit): Delete.
(dll_list::find): New function.
(dll_list::detach): Use dll_list::find to find dll associated with return
address.  Use __cxa_finalize to run atexit functions associated with the dll.
(cygwin_detach_dll): Don't assume that HANDLE == void *.
* dll_init.h (dll_list::find): Declare.
(__cxa_atexit): Ditto.
(__cxa_finalize): Ditto.
* init.cc (dll_entry): Clarify comment.
@
text
@d75 1
d94 1
d101 7
d109 1
@


1.18
log
@* dll_init.h (has_dtors): New flag.
(run_dtors): New wrapper function which avoids calling dtors more than once.
* dll_init.cc (dll_global_dtors): Use dll.run_dtors wrapper.
(dll_list::detach): Ditto.
(dll_list::alloc): Set has_dtors flag.
@
text
@d82 1
d104 5
@


1.17
log
@* cygheap.h (mini_cygheap): New struct.
(init_cygheap): Inherit locale field via mini_cygheap.
* cygheap.cc (cygheap_at_start): Define new variable.
(cygheap): Initialize as cygheap_at_start so that locale information is always
available.
(cygheap_init): Initialize cygheap iff it is set to cygheap_at_start.
* shared_info.h (memory_init): Accommodate argument change.
* memory.cc (memory_init): Accept an argument indicating whether cygheap should
be initialized or not.
* dcrt0.cc (child_info_fork::handle_fork): Pass false to memory_init().
(child_info_spawn::handle_spawn): Ditto.
(dll_crt0_0): Pass true to memory_init when not forking or execing.
* cygheap.h (cygheap_types::HEAP_2_DLL): New enum.
* dll_init.h (dll): Remove unused namelen field.
(dll_list::load_after_fork): Accommodate change in arguments.
* dll_init.cc (dll_list::alloc): Allocate dll information in the cygwin heap.
(dll_list::detach): Free dll information from the cygwin heap.
(dll_list::load_after_fork): Use dll information in the cygwin heap directly
rather than querying parent.
* fork.cc (frok::first_dll): Delete.
(frok::child): Don't report on first_dll.  Don't pass it to load_on_fork.
(frok::parent): Don't set first_dll.
(fork): Ditto.
@
text
@d53 1
d58 8
@


1.16
log
@	* dll_init.h (struct dll): Set size of name element to ANYSIZE_ARRAY.
	* dll_init.cc: Fix formatting.
	(dll_list::alloc): Only allocate as much memory for struct dll as
	necessary for given DLL name.
	(dll_list::load_after_fork): Only read a single page of parent memory.
	Only read more if namelen indicates that it's necessary.
@
text
@d54 1
a54 2
  int namelen;
  WCHAR name[ANYSIZE_ARRAY];
d75 1
a75 1
  void load_after_fork (HANDLE, dll *);
@


1.15
log
@	* dll_init.cc: Throughout convert to use long pathnames.
	* dll_init.h (struct dll): Change name to WCHAR, change operator [] to
	take PWCHAR argument.
@
text
@d3 2
a4 1
   Copyright 1998, 1999, 2000, 2001 Red Hat, Inc.
d55 1
a55 1
  WCHAR name[NT_MAX_PATH];
@


1.14
log
@Changes suggested by Dave Korn.
* dcrt0.cc (cygwin_exit): Remove (hopefully) extraneous call to
dll_global_dtors.
* dll_init.cc (dll_global_dtors): Run destructors in reverse dependency/load
order.
* dll_init.h (dll_list): Add dll_global_dtors as a friend.
@
text
@d54 1
a54 1
  char name[NT_MAX_PATH];
d71 1
a71 1
  dll *operator [] (const char *name);
@


1.13
log
@	* cygheap.cc (cwcsdup): New function.
	(cwcsdup1): New function.
	* cygheap.h (cygheap_user::get_windows_id): New method returning PWCHAR.
	(cwcsdup): Declare.
	(cwcsdup1): Declare.
	* registry.cc (get_registry_hive_path): Use WCHAR instead of char
	throughout.
	(load_registry_hive): Ditto.
	* registry.h (get_registry_hive_path): Change declaration accordingly.
	(load_registry_hive): Ditto.
	* sec_helper.cc (cygpsid::string): New method returning PWCHAR.
	* security.h (cygpsid::string): Declare.
	* syscalls.cc (seteuid32): Convert local name var to WCHAR.
	* uinfo.cc (cygheap_user::env_userprofile): Convert local name buffers
	to WCHAR.  Call sys_wcstombs_alloc to generate puserprof buffer.

	* winsup.h: Fix comment.
	(NT_MAX_PATH): New definition for maximum internal path length.
	Use throughout where appropriate.
	* include/limits.h (PATH_MAX): Set to 4096 as on Linux.
@
text
@d89 1
@


1.12
log
@	* dcrt0.cc: Include string.h.
	(initial_env): Use small_printf's %P specifier.
	* dll_init.cc (dll_list::alloc): Use PATH_MAX instead of CYG_MAX_PATH
	for path name buffer size.
	* dll_init.h (struct dll): Ditto.
	* environ.cc: Include string.h.
	(win_env::add_cache): Use temporary local buffer for path conversion.
	(posify): Ditto.
	* exceptions.cc (try_to_debug): Use CreateProcessW to allow long path
	names.
	* miscfuncs.cc: Drop unused implementations of strcasematch and
	strncasematch.
	(ch_case_eq): Drop.
	(strcasestr): Drop.
	(cygwin_wcscasecmp): New function.
	(cygwin_wcsncasecmp): New function.
	(cygwin_strcasecmp): New function.
	(cygwin_strncasecmp): New function.
	(cygwin_wcslwr): New function.
	(cygwin_wcsupr): New function.
	(cygwin_strlwr): New function.
	(cygwin_strupr): New function.
	* ntdll.h (RtlDowncaseUnicodeString): Declare.
	(RtlUpcaseUnicodeString): Declare.
	(RtlInt64ToHexUnicodeString): Fix typo in comment.
	* string.h: Disable not NLS aware implementations of strcasematch
	and strncasematch.
	(cygwin_strcasecmp): Declare.
	(strcasecmp): Define as cygwin_strcasecmp.
	(cygwin_strncasecmp): Declare.
	(strncasecmp): Define as cygwin_strncasecmp.
	(strcasematch):Define using cygwin_strcasecmp.
	(strncasematch):Define using cygwin_strncasecmp.
	(cygwin_strlwr): Declare.
	(strlwr): Define as cygwin_strlwr.
	(cygwin_strupr): Declare.
	(strupr): Define as cygwin_strupr.
	* wchar.h: New file.
	* wincap.cc (wincapc::init): Use "NT" as fix OS string.
	* winsup.h (strcasematch): Drop declaration.
	(strncasematch): Ditto.
	(strcasestr): Ditto.
@
text
@d54 1
a54 1
  char name[PATH_MAX];
@


1.11
log
@* dcrt0.cc (do_global_dtors): Run DLL dtors.
(__main): Don't rely on atexit to run dtors.
(do_exit): Specifically call do_global_dtors here.
(cygwin_exit): Ditto.
* dll_init.cc (dll_global_dtors): Make global.  Only run dtors once.
(dll_list::init): Just set flag that dtors should be run.  Don't rely on
atexit.
* dll_init.h (dll_global_dtors): Declare.
* exceptions.cc (sigrelse): Define.
* path.h (is_fs_device): New method.
(is_lnk_special): Ditto.
* fhandler_disk_file.cc (fhandler_disk_file::link): Use "is_lnk_special" rather
than "is_lnk_symlink".
* syscalls.cc (rename): Ditto.
* hookapi.cc (ld_preload): Use colon as a separator rather than space.
@
text
@d54 1
a54 1
  char name[CYG_MAX_PATH];
@


1.10
log
@	Unify usage of CYG_MAX_PATH throughout.  Change buffers from
	size CYG_MAX_PATH + 1 to CYG_MAX_PATH.  Change length tests
	accordingly.
@
text
@d92 1
@


1.9
log
@2003-11-11  Robert Collins <rbtcollins@@hotmail.com>
	    Ron Parker <rdparker@@butlermfg.com>

	* bsdlib.cc: Update throughout to use CYG_MAX_PATH rather than MAX_PATH.
	* cygheap.h: Ditto.
	* dcrt0.cc: Ditto.
	* delqueue.cc: Ditto.
	* dlfcn.cc: Ditto.
	* dll_init.cc: Ditto.
	* dll_init.h: Ditto.
	* dtable.cc: Ditto.
	* environ.cc: Ditto.
	* environ.h: Ditto.
	* exceptions.cc: Ditto.
	* external.cc: Ditto.
	* fhandler_disk_file.cc: Ditto.
	* fhandler_proc.cc: Ditto.
	* fhandler_process.cc: Ditto.
	* fhandler_raw.cc: Ditto.
	* fhandler_registry.cc: Ditto.
	* fhandler_socket.cc: Ditto.
	* fhandler_virtual.cc: Ditto.
	* miscfuncs.cc: Ditto.
	* mmap.cc: Ditto.
	* netdb.cc: Ditto.
	* path.cc: Ditto.
	* path.h: Ditto.
	* pinfo.cc: Ditto.
	* pinfo.h: Ditto.
	* pthread.cc: Ditto.
	* registry.cc: Ditto.
	* shared.cc: Ditto.
	* shared_info.h: Ditto.
	* smallprint.c: Ditto.
	* spawn.cc: Ditto.
	* strace.cc: Ditto.
	* syscalls.cc: Ditto.
	* thread.h: Ditto.
	* uinfo.cc: Ditto.
	* winsup.h: Ditto.
	* include/limits.h: Ditto.
	* include/cygwin/config.h: Ditto.
	* include/sys/param.h: Ditto.
@
text
@d54 1
a54 1
  char name[CYG_MAX_PATH + 1];
@


1.8
log
@* dll_init.cc (dll_list::detach): Eliminate reliance on passed in dll address.
Infer from module of caller instead.
(cygwin_detach_dll): Ignore dll_index argument.
* dll_init.h (dll_list::detach): Reflect argument change above.
@
text
@d54 1
a54 1
  char name[MAX_PATH + 1];
@


1.7
log
@revert patch
@
text
@d73 1
a73 1
  void detach (dll *);
@


1.6
log
@2002-04-16  Thomas Pfaff  <tpfaff@@gmx.net>

        * dll_init.h (per_process::dtors_run): New member.
        * dll_init.cc (per_module::run_dtors): Run dtors only once.
        (dll::init): Initialize dtors_run flag.
@
text
@a15 1
  bool dtors_run;
@


1.5
log
@* dll_init.h (class dll_list): Reorder functions to avoid compiler "can't
inline" warnings.
* security.h (class cygsid): Ditto.
* sigproc.cc (get_proc_lock): Ditto.
* sigproc.h (class sigframe): Ditto.
* sync.h (class muto): Ditto.
* fhandler.h (fhandler_base::get_guard): Actually MAKE virtual as previously
indicated.
* pipe.cc (make_pipe): Remove extraneous set_errno.
* syscalls.cc (_open): Ditto.
* select.cc (peek_pipe): Need to check that there is still something to read
from the pipe after acquiring the mutex since another process/thread could have
eaten the input before we got to acquiring the lock.  (Thanks to Nick Duffek
for this inspiration.)
@
text
@d16 1
@


1.4
log
@Update copyrights.
@
text
@a75 6
  dll *istart (dll_type t)
  {
    hold_type = t;
    hold = &start;
    return inext ();
  }
d82 6
@


1.4.4.1
log
@Merged changes from HEAD
@
text
@d76 6
a87 6
  }
  dll *istart (dll_type t)
  {
    hold_type = t;
    hold = &start;
    return inext ();
@


1.3
log
@forced commit
@
text
@d3 1
a3 1
   Copyright 1998, 1999, 2000 Cygnus Solutions
@


1.2
log
@* hinfo.cc (hinfo::linearize_fd_array): Make max_used_fd an int so that we can
detect when there are no fds to pass.
* dcrt0.cc (host_dependent_constants::init): Revert Sat Mar 18 01:32:04 2000
change.
(dll_crt0_1): Set "cygwin_finished_initializing" flag.
(dll_crt0): Don't perform memcpy if uptr is already set to internal structure.
(_dll_crt0): Remember location of programs envptr.
* dll_init.h (per_module, dll, dll_list): Revamp.
* dll_init.cc: Revamp.  Use new classes.
* fork.cc (fork): Use new revamped dll, dll_list, and per_module stuff.
* environ.cc: Use __cygwin_environ throughout rather than the
user_data->envptr.
* exec.cc: Ditto.
* spawn.cc: Ditto.
* winsup.h: Declare update_envptrs, cygwin_finished_initializing.
* lib/_cygwin_crt0_common.cc (_cygwin_crt0_common): Revert previous change.
* lib/cygwin_attach_dll.cc (cygwin_attach_dll): Always pass in own per_process
structure or we end up overwriting information from the main program.
@
text
@@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
   Copyright 1998 Cygnus Solutions
d11 1
a11 3
//-----------------------------------------------------------------------------
// list of loaded DLL (used by fork & init)
class DllList
d13 22
a34 26
public:
  static DllList& the ();

  // return dll index used for freeDll
  int recordDll (HMODULE, per_process*);
  void detachDll (int dll_index);

  // called after initialization of main module in dll_crt0
  void initAll ();

  // global destructors of loaded dlls
  void doGlobalDestructorsOfDlls ();

  // number of dlls dlopened
  int numberOfOpenedDlls ();

  // boolean to determine if forked process must reload dlls opened with
  // LoadLibrary or dlopen ...
  // default = 0 (FALSE)
  int forkeeMustReloadDlls ();
  void forkeeMustReloadDlls (int);

  void forkeeLoadDlls ();

  // set name of current library opened with dlopen
  void currentDlOpenedLib (const char*);
a36 2
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
d38 1
a38 1
class DllListIterator
d40 5
a44 6
  int _type;
  int _index;

protected:
  DllListIterator (int type);
  int index () const { return _index; }
d46 1
a46 12
public:
  virtual ~DllListIterator();

  int ok() { return _index!=-1; }
  void operator++ ();
  void operator++ (int) { operator++ (); }
  operator per_process* ();
};

//-----------------------------------------------------------------------------

class LinkedDllIterator : public DllListIterator
d48 9
a56 3
public:
  LinkedDllIterator ();
  ~LinkedDllIterator ();
d59 1
a59 1
//-----------------------------------------------------------------------------
d61 1
a61 1
class LoadedDllIterator : public DllListIterator
d63 3
d67 22
a88 2
  LoadedDllIterator ();
  ~LoadedDllIterator ();
d91 1
a91 21
//-----------------------------------------------------------------------------

#define DO_LINKED_DLL(var)						      \
{									      \
LinkedDllIterator iterator;						      \
while (iterator.ok ())							      \
{									      \
  per_process *var = (per_process *) iterator;

#define DO_LOADED_DLL(var)						      \
{									      \
LoadedDllIterator iterator;						      \
while (iterator.ok ())							      \
{									      \
  per_process *var = (per_process *) iterator;

#define DLL_DONE							      \
  iterator++;								      \
}									      \
}

@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
