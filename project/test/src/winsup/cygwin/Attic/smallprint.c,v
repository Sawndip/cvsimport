head	1.22;
access;
symbols
	preoverlapped:1.21
	drop_9x_support_start:1.21
	cr-0x5f1:1.20.0.4
	cv-branch:1.20.0.2
	pre-ptymaster-archetype:1.19
	cr-0x3b58:1.19.0.4
	cr-0x5ef:1.19.0.2
	after-mmap-privanon-noreserve:1.19
	after-mmap-revamp:1.19
	before-mmap-revamp:1.19
	cgf-more-exit-sync:1.19
	post_wait_sig_exit:1.19
	pre_wait_sig_exit:1.19
	reparent-point:1.14
	noreparent:1.14.0.10
	cr-0x5e6:1.14.0.8
	cr-0x9e:1.14.0.6
	cr-0x9d:1.14.0.4
	cgf-deleteme:1.14.0.2
	pre-sigrewrite:1.14
	corinna-01:1.13
	cr-0x9c:1.12.0.6
	cr-0x9b:1.12.0.4
	cr-0x99:1.12
	Z-emcb-cygwin_daemon:1.12.0.2
	w32api-2_2:1.12
	mingw-runtime-2_4:1.12
	pre-cgf-merge:1.12
	cgf-dev-branch:1.12.0.22
	predaemon:1.10
	cygwin_daemon_merge_HEAD:1.10
	pregp02r1:1.9.0.34
	cygnus_cvs_20020108_pre:1.9
	Z-cygwin_daemon_merge-new_HEAD:1.12
	Z-cygwin_daemon_merge_HEAD:1.12
	cygwin_daemon:1.9.0.4;
locks; strict;
comment	@ * @;
expand	@o@;


1.22
date	2007.07.31.20.48.17;	author corinna;	state dead;
branches;
next	1.21;

1.21
date	2006.10.27.10.41.51;	author corinna;	state Exp;
branches;
next	1.20;

1.20
date	2006.06.23.00.19.39;	author cgf;	state Exp;
branches
	1.20.4.1;
next	1.19;

1.19
date	2005.03.19.21.45.15;	author cgf;	state Exp;
branches;
next	1.18;

1.18
date	2005.01.31.20.55.33;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2005.01.31.19.57.05;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2005.01.31.19.52.03;	author cgf;	state Exp;
branches;
next	1.15;

1.15
date	2005.01.29.13.34.34;	author corinna;	state Exp;
branches;
next	1.14;

1.14
date	2003.11.14.23.40.05;	author rbcollins;	state Exp;
branches;
next	1.13;

1.13
date	2003.09.25.00.37.17;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2002.06.13.17.28.11;	author cgf;	state Exp;
branches
	1.12.20.1
	1.12.22.1;
next	1.11;

1.11
date	2002.05.23.06.00.49;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2002.02.22.18.22.24;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2001.09.11.20.01.00;	author cgf;	state Exp;
branches
	1.9.4.1;
next	1.8;

1.8
date	2001.09.09.19.06.50;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2001.08.22.17.50.22;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.24.22.26.52;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.04.20.39.38;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.23.03.35.50;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.02.19.26.01;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.02.16.28.18;	author dj;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;

1.9.4.1
date	2002.02.28.12.53.27;	author rbcollins;	state Exp;
branches;
next	1.9.4.2;

1.9.4.2
date	2002.06.13.14.34.12;	author rbcollins;	state Exp;
branches;
next	1.9.4.3;

1.9.4.3
date	2002.06.15.10.26.31;	author rbcollins;	state Exp;
branches;
next	;

1.12.20.1
date	2003.01.05.03.01.16;	author cgf;	state Exp;
branches;
next	;

1.12.22.1
date	2003.01.16.01.27.31;	author cgf;	state Exp;
branches;
next	;

1.20.4.1
date	2006.10.27.10.49.53;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.22
log
@	* ntdll.h (RtlFreeAnsiString): Declare.
	* ntdll.h (RtlFreeOemString): Declare.
	* ntdll.h (RtlUnicodeStringToAnsiString): Declare.
	* ntdll.h (RtlUnicodeStringToOemString): Declare.
	* smallprint.cc: Renamed from smallprint.c.  Drop unnecessary
	forward declarations.
	(__small_vsprintf): Add format specifiers 'C' for WCHAR arguments
	and 'S' for PUNICODE_STRING arguments.
@
text
@/* smallprint.c: small print routines for WIN32

   Copyright 1996, 1998, 2000, 2001, 2002, 2003, 2005, 2006 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include "winsup.h"
#include <stdarg.h>
#include <stdlib.h>
#include <ctype.h>
#define WIN32_LEAN_AND_MEAN
#include <windows.h>

int __small_sprintf (char *dst, const char *fmt, ...);
int __small_vsprintf (char *dst, const char *fmt, va_list ap);

#define LLMASK	(0xffffffffffffffffULL)
#define LMASK	(0xffffffff)

#define rnarg(dst, base, dosign, len, pad) __rn ((dst), (base), (dosign), va_arg (ap, long), len, pad, LMASK)
#define rnargLL(dst, base, dosign, len, pad) __rn ((dst), (base), (dosign), va_arg (ap, unsigned long long), len, pad, LLMASK)

static char __fastcall *
__rn (char *dst, int base, int dosign, long long val, int len, int pad, unsigned long long mask)
{
  /* longest number is ULLONG_MAX, 18446744073709551615, 20 digits */
  unsigned long long uval = 0;
  char res[20];
  static const char str[16] = "0123456789ABCDEF";
  int l = 0;

  if (dosign && val < 0)
    {
      *dst++ = '-';
      uval = -val;
    }
  else if (dosign > 0 && val > 0)
    {
      *dst++ = '+';
      uval = val;
    }
  else
    uval = val;

  uval &= mask;

  do
    {
      res[l++] = str[uval % base];
      uval /= base;
    }
  while (uval);

  while (len-- > l)
    *dst++ = pad;

  while (l > 0)
    *dst++ = res[--l];

  return dst;
}

int
__small_vsprintf (char *dst, const char *fmt, va_list ap)
{
  char tmp[CYG_MAX_PATH + 1];
  char *orig = dst;
  const char *s;

  DWORD err = GetLastError ();

  while (*fmt)
    {
      int i, n = 0x7fff;
      if (*fmt != '%')
	*dst++ = *fmt++;
      else
	{
	  int len = 0;
	  char pad = ' ';
	  int addsign = -1;

	  switch (*++fmt)
	  {
	    case '+':
	      addsign = 1;
	      fmt++;
	      break;
	    case '%':
	      *dst++ = *fmt++;
	      continue;
	  }

	  for (;;)
	    {
	      char c = *fmt++;
	      switch (c)
		{
		case '0':
		  if (len == 0)
		    {
		      pad = '0';
		      continue;
		    }
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
		  len = len * 10 + (c - '0');
		  continue;
		case 'l':
		  continue;
		case 'c':
		  {
		    int c = va_arg (ap, int);
		    if (c > ' ' && c <= 127)
		      *dst++ = c;
		    else
		      {
			*dst++ = '0';
			*dst++ = 'x';
			dst = __rn (dst, 16, 0, c, len, pad, LMASK);
		      }
		  }
		  break;
		case 'E':
		  strcpy (dst, "Win32 error ");
		  dst = __rn (dst + sizeof ("Win32 error"), 10, 0, err, len, pad, LMASK);
		  break;
		case 'd':
		  dst = rnarg (dst, 10, addsign, len, pad);
		  break;
		case 'D':
		  dst = rnargLL (dst, 10, addsign, len, pad);
		  break;
		case 'u':
		  dst = rnarg (dst, 10, 0, len, pad);
		  break;
		case 'U':
		  dst = rnargLL (dst, 10, 0, len, pad);
		  break;
		case 'o':
		  dst = rnarg (dst, 8, 0, len, pad);
		  break;
		case 'p':
		  *dst++ = '0';
		  *dst++ = 'x';
		  /* fall through */
		case 'x':
		  dst = rnarg (dst, 16, 0, len, pad);
		  break;
		case 'X':
		  dst = rnargLL (dst, 16, 0, len, pad);
		  break;
		case 'P':
		  if (!GetModuleFileName (NULL, tmp, CYG_MAX_PATH))
		    s = "cygwin program";
		  else
		    s = tmp;
		  goto fillin;
		case '.':
		  n = strtol (fmt, (char **) &fmt, 10);
		  if (*fmt++ != 's')
		    goto endfor;
		case 's':
		  s = va_arg (ap, char *);
		  if (s == NULL)
		    s = "(null)";
		fillin:
		  for (i = 0; *s && i < n; i++)
		    *dst++ = *s++;
		  break;
		default:
		  *dst++ = '?';
		  *dst++ = fmt[-1];
		}
	    endfor:
	      break;
	    }
	}
    }
  *dst = 0;
  SetLastError (err);
  return dst - orig;
}

int
__small_sprintf (char *dst, const char *fmt, ...)
{
  int r;
  va_list ap;
  va_start (ap, fmt);
  r = __small_vsprintf (dst, fmt, ap);
  va_end (ap);
  return r;
}

void
small_printf (const char *fmt, ...)
{
  char buf[16384];
  va_list ap;
  DWORD done;
  int count;

#if 0	/* Turn on to force console errors */
  extern SECURITY_ATTRIBUTES sec_none;
  HANDLE h = CreateFileA ("CONOUT$", GENERIC_READ|GENERIC_WRITE,
		   FILE_SHARE_WRITE | FILE_SHARE_WRITE, &sec_none,
		   OPEN_EXISTING, 0, 0);
  if (h)
    SetStdHandle (STD_ERROR_HANDLE, h);
#endif

  va_start (ap, fmt);
  count = __small_vsprintf (buf, fmt, ap);
  va_end (ap);

  WriteFile (GetStdHandle (STD_ERROR_HANDLE), buf, count, &done, NULL);
  FlushFileBuffers (GetStdHandle (STD_ERROR_HANDLE));
}

#ifdef DEBUGGING
static HANDLE NO_COPY console_handle = NULL;
void
console_printf (const char *fmt, ...)
{
  char buf[16384];
  va_list ap;
  DWORD done;
  int count;

  if (!console_handle)
    console_handle = CreateFileA ("CON", GENERIC_WRITE,
				  FILE_SHARE_READ | FILE_SHARE_WRITE,
				  NULL, OPEN_EXISTING, 0, 0);

  if (console_handle == INVALID_HANDLE_VALUE)
    console_handle = GetStdHandle (STD_ERROR_HANDLE);

  va_start (ap, fmt);
  count = __small_vsprintf (buf, fmt, ap);
  va_end (ap);

  WriteFile (console_handle, buf, count, &done, NULL);
  FlushFileBuffers (console_handle);
}
#endif
@


1.21
log
@	* dcrt0.cc (__api_fatal): Drop spare argument to __small_sprintf.
	* smallprint.c (__small_vsprintf): Preserve GetLastError value.
	* winsup.h (api_fatal): Simplify.  Drop duplicate filename arg.
@
text
@@


1.20
log
@* fhandler_fifo.cc (fhandler_fifo::open): Release process lock and grab a
system-wide mutex to prevent a deadlock and a race.
* sync.h (lock_process): Make fhandler_fifo a friend.
* smallprint.c (__small_vsprintf): Cosmetic change.
@
text
@d74 2
d130 1
a130 1
		  dst = __rn (dst + sizeof ("Win32 error"), 10, 0, GetLastError (), len, pad, LMASK);
d185 1
@


1.20.4.1
log
@	* dcrt0.cc (__api_fatal): Drop spare argument to __small_sprintf.
	* smallprint.c (__small_vsprintf): Preserve GetLastError value.
	* winsup.h (api_fatal): Simplify.  Drop duplicate filename arg.
@
text
@a73 2
  DWORD err = GetLastError ();

d128 1
a128 1
		  dst = __rn (dst + sizeof ("Win32 error"), 10, 0, err, len, pad, LMASK);
a182 1
  SetLastError (err);
@


1.19
log
@* child_info.h (fork_info): Use different method to alias variable.
(spawn_info): Ditto.
* cxx.cc (__cxa_guard_acquire): New function (needed for gcc 4.x).
(__cxa_guard_release): Ditto.
* devices.in: Make sure stuff is correctly bracketed (for gcc 4.x).
* devices.cc: Regenerate.
* fhandler.h (fhandler_disk_file::fchmod): Avoid left coercion (for gcc 4.x).
* smallprint.c (__rn): Declare as __fastcall since gcc 4.x complains about use
of regparm, for some reason.
* sync.h (sync::init_lock): Remove.
* sync.cc (sync::init_lock): Ditto.
@
text
@d3 1
a3 1
   Copyright 1996, 1998, 2000, 2001, 2002 Red Hat, Inc.
d162 1
a162 1
		  n = strtol (fmt, (char **)&fmt, 10);
@


1.18
log
@* smallprint.c (rnarg): Use long rather than unsigned long so that we get
proper sign extension.
@
text
@d27 1
a27 5
static char * __rn (char *, int, int, long long, int, int,
		    unsigned long long) __attribute__ ((regparm (3)));


static char *
@


1.17
log
@* smallprint.c (__rn): Regparmize.
@
text
@d24 1
a24 1
#define rnarg(dst, base, dosign, len, pad) __rn ((dst), (base), (dosign), va_arg (ap, unsigned), len, pad, LMASK)
d62 1
a62 1
  while (len -- > l)
d66 1
a66 3
    {
      *dst++ = res[--l];
    }
@


1.16
log
@* smallprint.c (rnarg): New macro.
(rnargLL): Ditto.
(__rn): Rename from 'rn', add a mask argument, and use the mask argument to
control how many significant digits to care about.
(__small_vsprintf): Use __rn, rnarg, rnargLL, as appropriate.
@
text
@d27 4
@


1.15
log
@	* smallprint.c (rn): Change uval to unsigned long long to fix 64 bit
	handling.
	* fhandler_process.cc (format_process_maps): Print major, minor and
	inode numbers correctly.
@
text
@d21 6
d28 1
a28 1
rn (char *dst, int base, int dosign, long long val, int len, int pad)
d31 1
a31 1
  unsigned long long uval;
d47 3
a49 3
    {
      uval = val;
    }
d124 1
a124 1
			dst = rn (dst, 16, 0, c, len, pad);
d130 1
a130 1
		  dst = rn (dst + sizeof ("Win32 error"), 10, 0, GetLastError (), len, pad);
d133 1
a133 1
		  dst = rn (dst, 10, addsign, va_arg (ap, int), len, pad);
d136 1
a136 1
		  dst = rn (dst, 10, addsign, va_arg (ap, long long), len, pad);
d139 1
a139 1
		  dst = rn (dst, 10, 0, va_arg (ap, int), len, pad);
d142 1
a142 1
		  dst = rn (dst, 10, 0, va_arg (ap, long long), len, pad);
d145 1
a145 1
		  dst = rn (dst, 8, 0, va_arg (ap, unsigned), len, pad);
d152 1
a152 1
		  dst = rn (dst, 16, 0, va_arg (ap, int), len, pad);
d155 1
a155 1
		  dst = rn (dst, 16, 0, va_arg (ap, long long), len, pad);
@


1.14
log
@2003-11-11  Robert Collins <rbtcollins@@hotmail.com>
	    Ron Parker <rdparker@@butlermfg.com>

	* bsdlib.cc: Update throughout to use CYG_MAX_PATH rather than MAX_PATH.
	* cygheap.h: Ditto.
	* dcrt0.cc: Ditto.
	* delqueue.cc: Ditto.
	* dlfcn.cc: Ditto.
	* dll_init.cc: Ditto.
	* dll_init.h: Ditto.
	* dtable.cc: Ditto.
	* environ.cc: Ditto.
	* environ.h: Ditto.
	* exceptions.cc: Ditto.
	* external.cc: Ditto.
	* fhandler_disk_file.cc: Ditto.
	* fhandler_proc.cc: Ditto.
	* fhandler_process.cc: Ditto.
	* fhandler_raw.cc: Ditto.
	* fhandler_registry.cc: Ditto.
	* fhandler_socket.cc: Ditto.
	* fhandler_virtual.cc: Ditto.
	* miscfuncs.cc: Ditto.
	* mmap.cc: Ditto.
	* netdb.cc: Ditto.
	* path.cc: Ditto.
	* path.h: Ditto.
	* pinfo.cc: Ditto.
	* pinfo.h: Ditto.
	* pthread.cc: Ditto.
	* registry.cc: Ditto.
	* shared.cc: Ditto.
	* shared_info.h: Ditto.
	* smallprint.c: Ditto.
	* spawn.cc: Ditto.
	* strace.cc: Ditto.
	* syscalls.cc: Ditto.
	* thread.h: Ditto.
	* uinfo.cc: Ditto.
	* winsup.h: Ditto.
	* include/limits.h: Ditto.
	* include/cygwin/config.h: Ditto.
	* include/sys/param.h: Ditto.
@
text
@d25 1
a25 1
  unsigned uval;
@


1.13
log
@* devices.cc: New file.
* devices.gperf: New file.
* devices.shilka: New file.
* cygwin-gperf: New file.
* cygwin-shilka: New file.
* fhandler_fifo.cc: New file.
* fhandler_nodevice.cc : New file.  Reorganize headers so that path.h precedes
fhandler.h throughout.  Remove device argument and unit arguments from fhandler
constructors throughout.  Remove pc arguments to fhandler functions and use
internal pc element instead, throughout.  Use dev element in pc throughout.
Use major/minor elements rather than units and device numbers previously in
fhandler class.  Use correct methods for fhandler file names rather than
directly accessing file name variables, throughout.
* Makefile.in (DLL_OFILES): Add devices.o, fhandler_fifo.o
* dcrt0.cc (dll_crt0_1): Call device::init.
* devices.h: Renumber devices based on more Linux-like major/minor numbers.
Add more devices.  Declare standard device storage.
(device): Declare struct.
* dir.cc (opendir): Use new 'build_fh_name' to construct a fhandler_* type.
* dtable.cc (dtable::get_debugger_info): Ditto.
(cygwin_attach_handle_to_fd): Ditto.
(dtable::release): Remove special FH_SOCKET case in favor of generic
"need_fixup_before" test.
(dtable::init_std_file_from_handle): Use either build_fh_dev or build_fh_name
to build standard fhandler.
(dtable::build_fh_name): Renamed from dtable::build_fhandler_from_name.  Move
out of dtable class.  Don't accept a path_conv argument.  Just build it here
and pass it to:
(build_fh_pc): Renamed from dtable::build_fhandler.  Move out of dtable class.
Use intrinsic device type in path_conv to create new fhandler.
(build_fh_dev): Renamed from dtable::build_fhandler.  Move out of dtable class.
Simplify arguments to just take new 'device' type and a name.  Just return
pointer to fhandler rather than trying to insert into dtable.
(dtable::dup_worker): Accommodate above build_fh name changes.
(dtable::find_fifo): New (currently broken) function.
(handle_to_fn): Use strechr for efficiency.
* dtable.h: Reflect above build_fh name changes and argument differences.
(fhandler_base *&operator []): Return self rather than copy of self.
* fhandler.cc (fhandler_base::operator =): Use pc element to set normalized
path.
(fhandler_base::set_name): Ditto.
(fhandler_base::raw_read): Use method to access name.
(fhandler_base::write): Correctly use get_output_handle rather than get_handle.
(handler_base::device_access_denied): New function.
(fhandler_base::open): Eliminate pc argument and use pc element of
fhandler_base throughout.
(fhandler_base::fstat): Detect if device is based in filesystem and use
fstat_fs to calculate stat, if so.
(fhandler_base::fhandler_base): Eliminate handling of file names and, instead,
just free appropriate component from pc.
(fhandler_base::opendir): Remove path_conv parameter.
* fhandler.h: Remove all device flags.
(fhandler_base::pc): New element.
(fhandler_base::set_name): Change argument to path_conv.
(fhandler_base::error): New function.
(fhandler_base::exists): New function.
(fhandler_base::pc_binmode): New function.
(fhandler_base::dev): New function.
(fhandler_base::open_fs): New function.
(fhandler_base::fstat_fs): New function.
(fhandler_base::fstat_by_name): New function.
(fhandler_base::fstat_by_handle): New function.
(fhandler_base::isfifo): New function.
(fhandler_base::is_slow): New function.
(fhandler_base::is_auto_device): New function.
(fhandler_base::is_fs_special): New function.
(fhandler_base::device_access_denied): New function.
(fhandler_base::operator DWORD&): New operator.
(fhandler_base::get_name): Return normalized path from pc.
(fhandler_base::get_win32_name): Return windows path from pc.
(fhandler_base::isdevice): Renamed from is_device.
(fhandler_base::get_native_name): Return device format.
(fhandler_fifo): New class.
(fhandler_nodevice): New class.
(select_stuff::device_specific): Remove array.
(select_stuff::device_specific_pipe): New class element.
(select_stuff::device_specific_socket): New class element.
(select_stuff::device_specific_serial): New class element.
(select_stuff::select_stuff): Initialize new elements.
* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Move to base class
from fhandler_disk_file.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_disk_file::open): Move most functionality into
fhandler_base::open_fs.
(fhandler_base::open_fs): New function.
(fhandler_disk_file::close): Move most functionality into
fhandler_base::close_fs.
(fhandler_base::close_fs): New function.
* fhandler_mem.cc (fhandler_dev_mem::open): Use device name in debugging
output.
* fhandler_socket.cc (fhandler_socket::set_connect_secret): Copy standard
urandom device into appropriate place.
(fhandler_socket::accept): Reflect change in fdsock return value.
* fhandler_tty.cc: See "throughouts" above.
* net.cc: Accommodate fdsock change throughout.
(fdsock): Return success or failure, accept fd argument and device argument.
* path.cc (symlink_info::major): New element.
(symlink_info::minor): New element.
(symlink_info::parse_device): Declare new function.
(fs_info::update): Accommodate changes in path_conv class.
(path_conv::fillin): Ditto.
(path_conv::return_and_clear_normalized_path): Eliminate.
(path_conv::set_normalized_path): New function.
(path_conv::path_conv): Set info in dev element.  Use path_conv methods Check
for FH_FS rather than FH_BAD to indicate when to fill in filesystem stuff.
where appropriate rather than direct access.  Use set_normalized_path to set
normalized path.
(windows_device_names): Eliminate.
(get_dev): Ditto.
(get_raw_device_number): Ditto.
(get_device_number): Ditto.
(win32_device_name): Call new device name parser to do most of the heavy
lifting.
(mount_info::conv_to_win32_path): Fill in dev field as appropriate.
(symlink_worker): Handle new device files.
(symlink_info::check): Ditto.
(symlink_info::parse_device): Define new function.
* path.h (executable_states): Move here from fhandler.h.
(fs_info): Rename variables to *_storage and create methods for accessing same.
(path_conv): Add dev element, remove devn and unit and adjust inline methods to
accommodate.
(set_normalized_path): Declare new function.
* pinfo.cc (_pinfo::commune_recv): Add broken support for handling fifos.
(_pinfo::commune_send): Ditto.
* pipe.cc (fhandler_pipe::close): check for existence of handle before closing
it.
(handler_pipe::create): Rename from make_pipe.  Change arguments to accept
fhandler_pipe array.  Accommodate fifos.
(pipe): Rework to deal with fhandler_pipe::create changes.
(_pipe): Ditto.
* select.cc: Use individual device_specific types throughout rather than
indexing with obsolete device number.
(set_bits): Use is_socket call rather than checking device number.
* shared_info.h (CURR_MOUNT_MAGIC): Update.
(conv_to_win32_path): Reflect addition of device argument.
* syscalls.cc (mknod_worker): New function.
(open): Use build_fh_name to build fhandler.
(chown_worker): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(chmod_device): New function.
(chmod): Detect if this is an 'auto' device rather than an on-filesystem device
and handle appropriately.  Use chmod_device to set mode of in-filesystem
devices.
(stat_worker): Eliminate path_conv argument.  Call build_fh_name to construct
fhandler.  Use fh->error() rather than pc->error to detect errors in fhandler
construction.
(access_worker): New function pulled from access.  Accommodate in-filesystem
devices.
(access): Use access_worker.
(fpathconf): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(mknod_worker): New function.
(mknod32): New function.
(chroot): Free normalized path -- assuming it was actually cmalloced.
* tty.cc (create_tty_master): Tweak for new device class.
(tty::common_init): Ditto.
* winsup.h (stat_worker): Remove.
(symlink_worker): Declare.
* exceptions.cc (set_process_mask): Just call sig_dispatch_pending and don't
worry about pending_signals since sig_dispatch_pending should always do the
right thing now.
(sig_handle): Reorganize SIGCONT handling to more closely conform to SUSv3.
* pinfo.h: Move __SIG enum to sigproc.h.
(PICOM_FIFO): New enum element.
(_pinfo): Remove 'thread2signal' stuff throughout class.
(_pinfo::commune_send): Make varargs.
(_pinfo::sigtodo): Eliminate.
(_pinfo::thread2signal): Ditto.
* signal.cc (kill_worker): Eliminate call to setthread2signal.
* sigproc.cc (local_sigtodo): Eliminate.
(getlocal_sigtodo): Ditto.
(sigelem): New class.
(pending_signals): New class.
(sigqueue): New variable, start of sigqueue linked list.
(sigcatch_nonmain): Eliminate.
(sigcatch_main): Eliminate.
(sigcatch_nosync): Eliminate.
(sigcomplete_nonmain): Eliminate.
(pending_signals): Eliminate.
(sig_clear): Call signal thread to clear pending signals, unless already in
signal thread.
(sigpending): Call signal thread to get pending signals.
(sig_dispatch_pending): Eliminate use of pending_signals and just check
sigqueue.
(sigproc_terminate): Eliminate all of the obsolete semaphore stuff.  Close
signal pipe handle.
(sig_send): Eliminate all of the obsolete semaphore stuff and use pipe to send
signals.
(getevent): Eliminate.
(pending_signals::add): New function.
(pending_signals::del): New function.
(pending_signals::next): New function.
(wait_sig): Eliminate all of the obsolete semaphore stuff.  Use pipe to
communicate and maintain a linked list of signals.
* sigproc.h: Move __SIG defines here.  Add __SIGPENDING.
(sig_dispatch_pending): Remove "C" specifier.
(sig_handle): Accept a mask argument.
* thread.cc: Remove signal handling considerations throughout.
@
text
@d66 1
a66 1
  char tmp[MAX_PATH + 1];
d152 1
a152 1
		  if (!GetModuleFileName (NULL, tmp, MAX_PATH))
@


1.12
log
@* winver.rc: Add more words to copyright.
@
text
@d18 1
a18 1
int __small_sprintf (char *dst, const char *fmt,...);
d111 1
a111 1
		    int c = va_arg (ap,int);
d183 1
a183 1
__small_sprintf (char *dst, const char *fmt,...)
d194 1
a194 1
small_printf (const char *fmt,...)
d221 1
a221 1
console_printf (const char *fmt,...)
@


1.12.22.1
log
@merge from trunk
@
text
@d18 1
a18 1
int __small_sprintf (char *dst, const char *fmt, ...);
d111 1
a111 1
		    int c = va_arg (ap, int);
d183 1
a183 1
__small_sprintf (char *dst, const char *fmt, ...)
d194 1
a194 1
small_printf (const char *fmt, ...)
d221 1
a221 1
console_printf (const char *fmt, ...)
@


1.12.20.1
log
@Replace is_fs_device with is_fs_special throughout.
* Makefile.in (DLL_OFILES): Add fhandler_fifo.o.
* devices.h (fh_devices): Renumber some minor numbers to fit in 8 bits.
* dtable.cc (dtable::build_fhandler): Handle FH_FIFO.  Set errno to ENODEV if
device not found.
* dtable::find_fifo: Define new function.
* dtable.h (dtable::find_fifo): Declare new function.
* fhandler.cc (fhandler_base::device_access_denied): Fix O_RDONLY test.
(fhandler_base::write): Use output file handle for writing.
(fhandler_base::fstat): Use is_fs_special rather than is_fs_device.
* fhandler.h (fhandler_base::is_fs_special): Rename from is_fs_device.
(fhandler_pipe): Make private elements protected so that fhandler_fifo can use
them too.
(fhandler_pipe::create): New function derived from make_pipe.
(fhandler_fifo): Add more needed elements.
(fhandler_pty_master::slave): Add to track slave device.
(fhandler_pty_master::get_unit): Define.
* fhandler_tty.cc (fhandler_tty_master::init): Register slave device.
(fhandler_pty_master::open): Ditto.
(symlink_info::parse_device): Handle fifo specially.
* pinfo.cc (_pinfo::commune_recv): Initial fifo implementation.
(_pinfo::commune_send): Ditto.
* pinfo.h (picom): Add PICOM_FIFO.
* pipe.cc (fhandler_pipe::close): Close input handle here specifically.
(fhandler_pipe::create): Rename from make_pipe.  Create fhandlers rather than
fds.
(pipe): Use fhandler_pipe::create to create pipe.
(_pipe): Ditto.
* syscalls.cc (mknod): Accommodate fifos.
@
text
@d18 1
a18 1
int __small_sprintf (char *dst, const char *fmt, ...);
d111 1
a111 1
		    int c = va_arg (ap, int);
d183 1
a183 1
__small_sprintf (char *dst, const char *fmt, ...)
d194 1
a194 1
small_printf (const char *fmt, ...)
d221 1
a221 1
console_printf (const char *fmt, ...)
@


1.11
log
@* smallprint.c (__small_vsprintf): Implement '%o' after all these years.
@
text
@d3 1
a3 1
   Copyright 1996, 1998, 2000, 2001 Red Hat, Inc.
@


1.10
log
@	* smallprint.c (rn): Allow long long values.
	(__small_vsprintf): Add 'D', 'U' and 'X' formats for long long
	parameters.
@
text
@d138 3
@


1.9
log
@Update copyrights.
@
text
@d22 1
a22 1
rn (char *dst, int base, int dosign, int val, int len, int pad)
d24 1
a24 1
  /* longest number is 4294967295, 10 digits */
d26 1
a26 1
  char res[10];
d129 3
d135 3
d144 3
@


1.9.4.1
log
@Merged changes from HEAD
@
text
@d22 1
a22 1
rn (char *dst, int base, int dosign, long long val, int len, int pad)
d24 1
a24 1
  /* longest number is ULLONG_MAX, 18446744073709551615, 20 digits */
d26 1
a26 1
  char res[20];
a128 3
		case 'D':
		  dst = rn (dst, 10, addsign, va_arg (ap, long long), len, pad);
		  break;
a131 3
		case 'U':
		  dst = rn (dst, 10, 0, va_arg (ap, long long), len, pad);
		  break;
a137 3
		  break;
		case 'X':
		  dst = rn (dst, 16, 0, va_arg (ap, long long), len, pad);
@


1.9.4.2
log
@Merged changes from HEAD
@
text
@a137 3
		case 'o':
		  dst = rn (dst, 8, 0, va_arg (ap, unsigned), len, pad);
		  break;
@


1.9.4.3
log
@Merged changes from HEAD
@
text
@d3 1
a3 1
   Copyright 1996, 1998, 2000, 2001, 2002 Red Hat, Inc.
@


1.8
log
@* cygheap.cc (cygheap_fixup_in_child): Clear cygheap->base so that heap is not
forced to start at the same place in execed process.
* heap.cc: Remove brk* macros for clarity throughout.
* heap.h: Ditto.
* shared.cc (shared_info::initialize): Move heap_chunk test into
heap_chunk_size().
(heap_chunk_size): Check for chunk size here.  Don't go to registry if
heap_chunk_in_mb is already set.
* smallprint.c (console_printf): Add Windows 95 concessions.
@
text
@d3 1
a3 1
   Copyright 1996, 1998, 2000 Cygnus Solutions.
@


1.7
log
@* smallprint.c (console_printf): New function.
* dcrt0.cc (dll_crt0_1): Use console_printf for debugging output.
* debug.cc (debug_mark_closed): New function.
(close_handle): Use debug_mark_closed.
* debug.h: Declare new functions.
* dtable.cc (dtable::build_fhandler): Remove unneeded extern.
* spawn.cc: Cosmetic changes.
* winsup.h: Define NO_COPY for C files, too.  Declare a global.
@
text
@a214 1
  extern SECURITY_ATTRIBUTES sec_none;
d217 7
a223 2
    console_handle = CreateFileA ("CONOUT$", GENERIC_WRITE, FILE_SHARE_WRITE,
				  &sec_none, OPEN_EXISTING, 0, 0);
@


1.6
log
@forced commit
@
text
@d184 1
a184 1
  char buf[2000];
d202 1
a202 1
  WriteFile (GetStdHandle (STD_ERROR_HANDLE), buf, count, &done, 0);
d205 23
@


1.5
log
@* exceptions.cc (ctrl_c_handler): Always send signal to process if it has no
tty.
@
text
@@


1.4
log
@* fork.cc (fork): Set sigframe here, since it can pause for a considerable
amount of time.
* environ.cc (_addenv): Add debugging.
* fhandler.cc: Eliminate unneeded include.
* smallprint.c: Ditto.
@
text
@d15 1
@


1.3
log
@* strace.cc (strace::prntf): Make second argument the function name, rather
than use special format options.
(strace::vprntf): Ditto.
(getfunc): New function.
* include/sys/strace.h: Reflect above changes.
* smallprint.c (__small_vsprintf): Eliminate '%F' formatting.
* pinfo.cc (set_myself): Modify for new strace::prntf parameter.
* errno.cc (seterrno_from_win_error): Ditto.
* fhandler_tty.cc (fhandler_tty_common::__acquire_output_mutex): Ditto.
* fhandler_tty.cc (fhandler_tty_common::__release_output_mutex): Ditto.
@
text
@a12 1
#include <string.h>
@


1.2
log
@* winsup.h: take out protections of environ, errno, allow C use
* *.cc: put winsup.h before other headers (for __INSIDE_CYGWIN__);
use cur_environ() instead of just environ
* times.cc: remove import protections
* glob.c: add winsup.h
* localtime.c: ditto
* smallprint.c: ditto
* Makefile.in: don't __INSIDE_CYGWIN__ as it messes up profiling.
@
text
@a156 26
		case 'F':
		{
		  const char *p, *pe;
		  s = va_arg (ap, char *);
		  for (p = s; (pe = strchr (p, '(')); p = pe + 1)
		    if (isalnum ((int)pe[-1]) || pe[-1] == '_')
		      break;
		    else if (isspace((int)pe[-1]))
		      {
			pe--;
			break;
		      }
		  if (!pe)
		    pe = strchr (s, '\0');
		  for (p = pe; p > s; p--)
		    if (p != pe && *p == ' ')
		      {
			p++;
			break;
		      }
		  if (*p == '*')
		    p++;
		  while (p < pe)
		    *dst++ = *p++;
		  break;
		}
@


1.1
log
@Initial revision
@
text
@d11 1
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
