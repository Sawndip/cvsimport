head	1.8;
access;
symbols
	cgf-dev-branch:1.2.0.2;
locks; strict;
comment	@# @;


1.8
date	2003.10.26.01.09.06;	author cgf;	state dead;
branches;
next	1.7;

1.7
date	2003.09.27.15.19.29;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2003.09.25.00.37.16;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2003.09.20.00.31.13;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.16.01.55.51;	author cgf;	state dead;
branches;
next	1.3;

1.3
date	2003.01.16.01.27.30;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2002.12.28.07.33.14;	author cgf;	state dead;
branches
	1.2.2.1;
next	1.1;

1.1
date	2002.12.28.07.15.12;	author cgf;	state Exp;
branches;
next	;

1.2.2.1
date	2002.12.28.07.33.34;	author cgf;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2002.12.29.06.14.14;	author cgf;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2003.01.25.18.59.43;	author cgf;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	2003.01.28.16.45.04;	author corinna;	state Exp;
branches;
next	1.2.2.5;

1.2.2.5
date	2003.02.01.04.48.22;	author cgf;	state Exp;
branches;
next	1.2.2.6;

1.2.2.6
date	2003.02.01.18.42.23;	author cgf;	state Exp;
branches;
next	1.2.2.7;

1.2.2.7
date	2003.02.05.14.25.07;	author cgf;	state Exp;
branches;
next	1.2.2.8;

1.2.2.8
date	2003.02.23.06.00.22;	author cgf;	state Exp;
branches;
next	1.2.2.9;

1.2.2.9
date	2003.02.23.07.03.23;	author cgf;	state Exp;
branches;
next	1.2.2.10;

1.2.2.10
date	2003.02.27.15.10.22;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Remove file that was supposed to have disappeared a month ago.
@
text
@%{
#include "winsup.h"
#include <sys/types.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include "devices.h"
#include "sys/cygwin.h"
#include "tty.h"
#include "pinfo.h"
#undef __GNUC__
static unsigned int devhash (const char *, unsigned)
  __attribute__ ((regparm (2)));
#define bad_dev (&dev_bad_storage)

%}
struct device;
%%
"/dev/tty", FH_TTY, "\\dev\\tty", 0, 0, 0, 0
"/dev/ttys", FH_TTYS, "\\dev\\tty%d", 0, 255, 0, 0
"/dev/console", FH_CONSOLE, "\\dev\\console", 0, 0, 0, 0
"/dev/ttym", FH_TTYM, "\\dev\\ttym", 0, 255, 0, 0
"/dev/ptmx", FH_PTYM, "\\dev\\ptmx", 0, 0, 0, 0
"/dev/windows", FH_WINDOWS, "\\dev\\windows", 0, 0, 0, 0
"/dev/dsp", FH_OSS_DSP, "\\dev\\dsp", 0, 0, 0, 0
"/dev/conin", FH_CONIN, "conin", 0, 0, 0, 0
"/dev/conout", FH_CONOUT, "conout", 0, 0, 0, 0
"/dev/null", FH_NULL, "nul", 0, 0, 0, 0
"/dev/zero", FH_ZERO, "\\dev\\zero", 0, 0, 0, 0
"/dev/random", FH_RANDOM, "\\dev\\random", 0, 0, 0, 0
"/dev/urandom", FH_URANDOM, "\\dev\\urandom", 0, 0, 0, 0
"/dev/mem", FH_MEM, "\\dev\\mem", 0, 0, 0, 0
"/dev/kmem", FH_KMEM, "\\dev\\mem", 0, 0, 0, 0
"/dev/clipboard", FH_CLIPBOARD, "\\dev\\clipboard", 0, 0, 0, 0
"/dev/port", FH_PORT, "\\dev\\port", 0, 0, 0, 0
"/dev/com", FH_SERIAL, "\\.\\com%d", 1, 99
"/dev/ttyS", FH_SERIAL, "\\.\\com%d", 0, 99, -1
"/dev/pipe", FH_PIPE, "\\dev\\pipe", 0, 0, 0, 0
"/dev/fifo", FH_FIFO, "\\dev\\fifo", 0, 0, 0, 0
"/dev/st", FH_TAPE, "\\Device\\Tape%d", 0, 127
"/dev/nst", FH_NTAPE, "\\Device\\Tape%d", 0, 127
"/dev/fd", FH_FLOPPY, "\\Device\\Floppy%d", 0, 15
"/dev/scd", FH_CDROM, "\\Device\\CdRom%d", 0, 15
"/dev/sr", FH_CDROM, "\\Device\\CdRom%d", 0, 15
"/dev/hda", FH_SDA, "\\Device\\Harddisk%d\\Partition%d", 1, 16, -1
"/dev/hdb", FH_SDB, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 15
"/dev/hdc", FH_SDC, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 31
"/dev/hdd", FH_SDD, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 47
"/dev/hde", FH_SDE, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 63
"/dev/hdf", FH_SDF, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 79
"/dev/hdg", FH_SDG, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 95
"/dev/hdh", FH_SDH, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 111
"/dev/hdi", FH_SDI, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 127
"/dev/hdj", FH_SDJ, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 143
"/dev/hdk", FH_SDK, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 159
"/dev/hdl", FH_SDL, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 175
"/dev/hdm", FH_SDM, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 191
"/dev/hdn", FH_SDN, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 207
"/dev/hdo", FH_SDO, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 223
"/dev/hdp", FH_SDP, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 239
"/dev/hdq", FH_SDQ, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 255  /* FIXME 8 bit lunacy */
"/dev/hdr", FH_SDR, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 271
"/dev/hds", FH_SDS, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 287
"/dev/hdt", FH_SDT, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 303
"/dev/hdu", FH_SDU, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 319
"/dev/hdv", FH_SDV, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 335
"/dev/hdw", FH_SDW, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 351
"/dev/hdx", FH_SDX, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 367
"/dev/hdy", FH_SDY, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 383
"/dev/hdz", FH_SDZ, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 399
"/dev/rawdrive", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
":bad:", FH_BAD, ":bad:", 0, 0, 0, 0
%%
void
device::parse (const char *s)
{
  size_t len = strlen (s);
  const device *dev = lookup (s, len);
  unsigned unit = 0;

  if (!dev || !*dev)
    {
      size_t prior_len = len;
      while (len-- > 0 && isdigit (s[len]))
	continue;
      if (++len < prior_len)
	{
	  dev = lookup (s, len);
	  if (!dev || !dev->upper)
	    dev = NULL;
	  else
	    {
	      unsigned n = atoi (s + len);
	      if (dev->devn == FH_TTY)
		dev = ttys_dev;         // SIGH
	      if (n >= dev->lower && n <= dev->upper)
		unit = n;
	    }
	}
    }

  if (!dev || !*dev)
    *this = *fs_dev;
  else if (dev->devn == FH_TTY)
    tty_to_real_device ();
  else
    {
      *this = *dev;
      if (!setunit (unit))
	devn = 0;
    }
}

void
device::init ()
{
  /* nothing to do... yet */
}

void
device::parse (_major_t major, _minor_t minor)
{
  _dev_t dev = FHDEV (major, 0);

  devn = 0;

  unsigned i;
  for (i = 0; i < (sizeof (unit_devices) / sizeof (unit_devices[0])); i++)
    if (unit_devices[i]->devn == dev)
      {
	*this = *unit_devices[i];
	this->setunit (minor);
	goto out;
      }

  dev = FHDEV (major, minor);
  for (i = 0; i < (sizeof (uniq_devices) / sizeof (uniq_devices[0])); i++)
    if (uniq_devices[i]->devn == dev)
      {
	*this = *uniq_devices[i];
	break;
      }
  
out:
  if (!*this)
    devn = FHDEV (major, minor);
  return;
}

void
device::parse (_dev_t dev)
{
  parse (_major (dev), _minor (dev));
}

void
device::tty_to_real_device ()
{
  if (!real_tty_attached (myself))
    *this = myself->ctty < 0 ? *bad_dev : *console_dev;
  else
    {
      *this = *ttys_dev;
      setunit (myself->ctty);
    }
}
@


1.7
log
@* device.shilka (device::parse): Allow units on other than tty.
@
text
@@


1.6
log
@* devices.cc: New file.
* devices.gperf: New file.
* devices.shilka: New file.
* cygwin-gperf: New file.
* cygwin-shilka: New file.
* fhandler_fifo.cc: New file.
* fhandler_nodevice.cc : New file.  Reorganize headers so that path.h precedes
fhandler.h throughout.  Remove device argument and unit arguments from fhandler
constructors throughout.  Remove pc arguments to fhandler functions and use
internal pc element instead, throughout.  Use dev element in pc throughout.
Use major/minor elements rather than units and device numbers previously in
fhandler class.  Use correct methods for fhandler file names rather than
directly accessing file name variables, throughout.
* Makefile.in (DLL_OFILES): Add devices.o, fhandler_fifo.o
* dcrt0.cc (dll_crt0_1): Call device::init.
* devices.h: Renumber devices based on more Linux-like major/minor numbers.
Add more devices.  Declare standard device storage.
(device): Declare struct.
* dir.cc (opendir): Use new 'build_fh_name' to construct a fhandler_* type.
* dtable.cc (dtable::get_debugger_info): Ditto.
(cygwin_attach_handle_to_fd): Ditto.
(dtable::release): Remove special FH_SOCKET case in favor of generic
"need_fixup_before" test.
(dtable::init_std_file_from_handle): Use either build_fh_dev or build_fh_name
to build standard fhandler.
(dtable::build_fh_name): Renamed from dtable::build_fhandler_from_name.  Move
out of dtable class.  Don't accept a path_conv argument.  Just build it here
and pass it to:
(build_fh_pc): Renamed from dtable::build_fhandler.  Move out of dtable class.
Use intrinsic device type in path_conv to create new fhandler.
(build_fh_dev): Renamed from dtable::build_fhandler.  Move out of dtable class.
Simplify arguments to just take new 'device' type and a name.  Just return
pointer to fhandler rather than trying to insert into dtable.
(dtable::dup_worker): Accommodate above build_fh name changes.
(dtable::find_fifo): New (currently broken) function.
(handle_to_fn): Use strechr for efficiency.
* dtable.h: Reflect above build_fh name changes and argument differences.
(fhandler_base *&operator []): Return self rather than copy of self.
* fhandler.cc (fhandler_base::operator =): Use pc element to set normalized
path.
(fhandler_base::set_name): Ditto.
(fhandler_base::raw_read): Use method to access name.
(fhandler_base::write): Correctly use get_output_handle rather than get_handle.
(handler_base::device_access_denied): New function.
(fhandler_base::open): Eliminate pc argument and use pc element of
fhandler_base throughout.
(fhandler_base::fstat): Detect if device is based in filesystem and use
fstat_fs to calculate stat, if so.
(fhandler_base::fhandler_base): Eliminate handling of file names and, instead,
just free appropriate component from pc.
(fhandler_base::opendir): Remove path_conv parameter.
* fhandler.h: Remove all device flags.
(fhandler_base::pc): New element.
(fhandler_base::set_name): Change argument to path_conv.
(fhandler_base::error): New function.
(fhandler_base::exists): New function.
(fhandler_base::pc_binmode): New function.
(fhandler_base::dev): New function.
(fhandler_base::open_fs): New function.
(fhandler_base::fstat_fs): New function.
(fhandler_base::fstat_by_name): New function.
(fhandler_base::fstat_by_handle): New function.
(fhandler_base::isfifo): New function.
(fhandler_base::is_slow): New function.
(fhandler_base::is_auto_device): New function.
(fhandler_base::is_fs_special): New function.
(fhandler_base::device_access_denied): New function.
(fhandler_base::operator DWORD&): New operator.
(fhandler_base::get_name): Return normalized path from pc.
(fhandler_base::get_win32_name): Return windows path from pc.
(fhandler_base::isdevice): Renamed from is_device.
(fhandler_base::get_native_name): Return device format.
(fhandler_fifo): New class.
(fhandler_nodevice): New class.
(select_stuff::device_specific): Remove array.
(select_stuff::device_specific_pipe): New class element.
(select_stuff::device_specific_socket): New class element.
(select_stuff::device_specific_serial): New class element.
(select_stuff::select_stuff): Initialize new elements.
* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Move to base class
from fhandler_disk_file.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_disk_file::open): Move most functionality into
fhandler_base::open_fs.
(fhandler_base::open_fs): New function.
(fhandler_disk_file::close): Move most functionality into
fhandler_base::close_fs.
(fhandler_base::close_fs): New function.
* fhandler_mem.cc (fhandler_dev_mem::open): Use device name in debugging
output.
* fhandler_socket.cc (fhandler_socket::set_connect_secret): Copy standard
urandom device into appropriate place.
(fhandler_socket::accept): Reflect change in fdsock return value.
* fhandler_tty.cc: See "throughouts" above.
* net.cc: Accommodate fdsock change throughout.
(fdsock): Return success or failure, accept fd argument and device argument.
* path.cc (symlink_info::major): New element.
(symlink_info::minor): New element.
(symlink_info::parse_device): Declare new function.
(fs_info::update): Accommodate changes in path_conv class.
(path_conv::fillin): Ditto.
(path_conv::return_and_clear_normalized_path): Eliminate.
(path_conv::set_normalized_path): New function.
(path_conv::path_conv): Set info in dev element.  Use path_conv methods Check
for FH_FS rather than FH_BAD to indicate when to fill in filesystem stuff.
where appropriate rather than direct access.  Use set_normalized_path to set
normalized path.
(windows_device_names): Eliminate.
(get_dev): Ditto.
(get_raw_device_number): Ditto.
(get_device_number): Ditto.
(win32_device_name): Call new device name parser to do most of the heavy
lifting.
(mount_info::conv_to_win32_path): Fill in dev field as appropriate.
(symlink_worker): Handle new device files.
(symlink_info::check): Ditto.
(symlink_info::parse_device): Define new function.
* path.h (executable_states): Move here from fhandler.h.
(fs_info): Rename variables to *_storage and create methods for accessing same.
(path_conv): Add dev element, remove devn and unit and adjust inline methods to
accommodate.
(set_normalized_path): Declare new function.
* pinfo.cc (_pinfo::commune_recv): Add broken support for handling fifos.
(_pinfo::commune_send): Ditto.
* pipe.cc (fhandler_pipe::close): check for existence of handle before closing
it.
(handler_pipe::create): Rename from make_pipe.  Change arguments to accept
fhandler_pipe array.  Accommodate fifos.
(pipe): Rework to deal with fhandler_pipe::create changes.
(_pipe): Ditto.
* select.cc: Use individual device_specific types throughout rather than
indexing with obsolete device number.
(set_bits): Use is_socket call rather than checking device number.
* shared_info.h (CURR_MOUNT_MAGIC): Update.
(conv_to_win32_path): Reflect addition of device argument.
* syscalls.cc (mknod_worker): New function.
(open): Use build_fh_name to build fhandler.
(chown_worker): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(chmod_device): New function.
(chmod): Detect if this is an 'auto' device rather than an on-filesystem device
and handle appropriately.  Use chmod_device to set mode of in-filesystem
devices.
(stat_worker): Eliminate path_conv argument.  Call build_fh_name to construct
fhandler.  Use fh->error() rather than pc->error to detect errors in fhandler
construction.
(access_worker): New function pulled from access.  Accommodate in-filesystem
devices.
(access): Use access_worker.
(fpathconf): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(mknod_worker): New function.
(mknod32): New function.
(chroot): Free normalized path -- assuming it was actually cmalloced.
* tty.cc (create_tty_master): Tweak for new device class.
(tty::common_init): Ditto.
* winsup.h (stat_worker): Remove.
(symlink_worker): Declare.
* exceptions.cc (set_process_mask): Just call sig_dispatch_pending and don't
worry about pending_signals since sig_dispatch_pending should always do the
right thing now.
(sig_handle): Reorganize SIGCONT handling to more closely conform to SUSv3.
* pinfo.h: Move __SIG enum to sigproc.h.
(PICOM_FIFO): New enum element.
(_pinfo): Remove 'thread2signal' stuff throughout class.
(_pinfo::commune_send): Make varargs.
(_pinfo::sigtodo): Eliminate.
(_pinfo::thread2signal): Ditto.
* signal.cc (kill_worker): Eliminate call to setthread2signal.
* sigproc.cc (local_sigtodo): Eliminate.
(getlocal_sigtodo): Ditto.
(sigelem): New class.
(pending_signals): New class.
(sigqueue): New variable, start of sigqueue linked list.
(sigcatch_nonmain): Eliminate.
(sigcatch_main): Eliminate.
(sigcatch_nosync): Eliminate.
(sigcomplete_nonmain): Eliminate.
(pending_signals): Eliminate.
(sig_clear): Call signal thread to clear pending signals, unless already in
signal thread.
(sigpending): Call signal thread to get pending signals.
(sig_dispatch_pending): Eliminate use of pending_signals and just check
sigqueue.
(sigproc_terminate): Eliminate all of the obsolete semaphore stuff.  Close
signal pipe handle.
(sig_send): Eliminate all of the obsolete semaphore stuff and use pipe to send
signals.
(getevent): Eliminate.
(pending_signals::add): New function.
(pending_signals::del): New function.
(pending_signals::next): New function.
(wait_sig): Eliminate all of the obsolete semaphore stuff.  Use pipe to
communicate and maintain a linked list of signals.
* sigproc.h: Move __SIG defines here.  Add __SIGPENDING.
(sig_dispatch_pending): Remove "C" specifier.
(sig_handle): Accept a mask argument.
* thread.cc: Remove signal handling considerations throughout.
@
text
@d89 1
a89 1
	  if (!dev || (!dev->upper && !dev->devn == FH_TTY))
@


1.5
log
@* syscalls.cc (system): Strip signal considerations from here so that they are
not inherited by a child process.
* spawn.cc (spawn_guts): Handle system() signal stuff here.
* winsup.h (_P_SYSTEM): Define.
@
text
@d14 2
@


1.4
log
@remove errnoneously added files
@
text
@a36 2
"/dev/piper", FH_PIPER, "\\dev\\piper", 0, 0, 0, 0
"/dev/pipew", FH_PIPEW, "\\dev\\pipew", 0, 0, 0, 0
a37 4
"/dev/streamsocket", FH_SOCKET, "\\dev\\socket", 0, 0, 0, 0
"/dev/tcp", FH_SOCKET, "\\dev\\socket", 0, 0, 0, 0
"/dev/udp", FH_SOCKET, "\\dev\\socket", 0, 0, 0, 0
"/dev/dgsocket", FH_SOCKET, "\\dev\\socket", 0, 0, 0, 0
d42 27
a68 6
"/dev/sd", FH_SD, "\\Device\\Harddisk%d\\Partition%d", 'a', 'z', -'a', 16
"/dev/tape", FH_TAPE, "\\Device\\Tape%d", 0, 127, 0, 0
"/dev/ntape", FH_NTAPE, "\\Device\\Tape%d", 0, 127, 128, 0
"\\\\.\\tape", FH_TAPE, "\\Device\\Tape%d", 0, 127, 0, 0
"\\\\.\\ntape", FH_NTAPE, "\\Device\\Tape%d", 0, 127, 128, 0
"\\\\.\\physicaldrive", FH_SD, "\\Device\\Harddisk%d\\Partition%d", 0, 224, 0, 16
d70 1
a70 55
"\\\\.\\a:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\b:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\c:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\d:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\e:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\f:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\g:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\h:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\i:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\j:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\k:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\l:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\m:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\n:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\o:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\p:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\q:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\r:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\s:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\t:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\u:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\v:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\w:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\x:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\y:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"\\\\.\\z:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"////.//tape", FH_TAPE, "//Device//Tape%d", 0, 127, 0, 0
"////.//ntape", FH_NTAPE, "//Device//Tape%d", 0, 127, 128, 0
"//./physicaldrive", FH_SD, "\\Device\\Harddisk%d\\Partition%d", 0, 224, 0, 16
"//./a:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./b:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./c:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./d:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./e:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./f:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./g:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./h:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./i:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./j:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./k:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./l:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./m:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./n:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./o:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./p:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./q:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./r:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./s:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./t:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./u:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./v:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./w:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./x:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./y:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
"//./z:", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
d87 1
a87 1
	  if (!dev || (!dev->upper && ! dev->devn == FH_TTY))
d101 1
a101 1
    devn = 0;
d143 2
d158 1
a158 1
    *this = *console_dev;
@


1.3
log
@merge from trunk
@
text
@@


1.2
log
@remove from trunk
@
text
@d17 1
a17 1
"/dev/tty", FH_TTY, "\\dev\\tty", 0, 255, 0, 0
d31 1
d39 1
d54 1
d126 1
a126 1
	  if (!dev || !dev->upper)
d141 2
d145 1
a145 12
      if (dev->devn != FH_TTY)
	*this = *dev;
      else
	{
	  if (!real_tty_attached (myself))
	    *this = *console_dev;
	  else
	    {
	      unit = myself->ctty;
	      *this = *ttys_dev;
	    }
	}
d151 39
a189 7
const device *console_dev;
const device *piper_dev;
const device *pipew_dev;
const device *socket_dev;
const device *ttym_dev;
const device *ttys_dev;
const device *urandom_dev;
d192 1
a192 1
device::init ()
d194 7
a200 7
  piper_dev = lookup ("/dev/piper", sizeof ("/dev/piper") - 1);
  pipew_dev = lookup ("/dev/pipew", sizeof ("/dev/pipew") - 1);
  console_dev = lookup ("/dev/console", sizeof ("/dev/console") - 1);
  ttym_dev = lookup ("/dev/ttym", sizeof ("/dev/ttym") - 1);
  ttys_dev = lookup ("/dev/ttys", sizeof ("/dev/ttys") - 1);
  socket_dev = lookup ("/dev/tcp", sizeof ("/dev/tcp") - 1);
  urandom_dev = lookup ("/dev/urandom", sizeof ("/dev/urandom") - 1);
@


1.2.2.1
log
@add to branch
@
text
@@


1.2.2.2
log
@* cygwin-gperf: New file.
* Makefile.in: Use cygwin-gperf script to build devices.cc.
* configure.in: Remove some comments.
* configure: Regenerate.
* devices.gperf: Remove max unit determination from FH_TTY.  Add /dev/kmem.
Add /dev/fifo.  Add /dev/rawdrive.  Remove specific "const device *"
declarations since they are now autogenerated.
(device::parse): Treat FH_TTY specially.  Move logic for determining real tty
device to separate function.
(device::init): Reduce to nothing.
(device::parse): New function taking different arguments.
(device::parse): Ditto.
(device::tty_to_real_device): New function.
* devices.h (struct device): Define above new functions.
(device::dev_on_fs): New element.
(device::setfs): New function.
(device::isfs): Ditto.
* dtable.cc (dtable::build_fhandler): Treat FH_TTY specially.
* fhandler.cc (fhandler_base::set_name): Make special determination for
non-disk-resident devices.
* fhandler.h (fhandler_base::isdevice): Renamed from 'is_device'.
(fhandler_disk_file::isdevice): Ditto.
(fhandler_base::is_auto_device): New function.
(fhandler_base::is_fs_device): New function.
(fhandler_tty_slave::get_unit): Declare.
(fhandler_disk_file::readdir): Take special .lnk consideration for devices as
well as symlinks.
* fhandler_tty.cc: Use get_unit () rather than dev.minor throughout.
(fhandler_tty_slave::get_unit): Define new function.
* path.cc (symlink_info::major): New element.
(symlink_info::major): Ditto.
(symlink_info::devtype): Ditto.
(path_conv::check): Handle devices detected by symlink_info::check.
(win32_device_name): Eliminate special FH_TTY handling.
(symlink): Move bulk of procesing to symlink_worker.
(symlink_worker): New function.  Handles devices.
(symlink_info::parse_device): Parse info from potential device file into
symlink_info elements.
(symlink_info::check): If contents of .lnk file begin with a ':' then treat the
file as a device file.
* path.h (isdevice): Renamed from is_device.
(is_auto_device): New function.
(is_fs_device): Ditto.
* syscalls.cc (chown_worker): Allow setting of ownership for on-disk devices.
(chmod): Ditto.
(mknod): Implement.
* winsup.h (symlink_worker): Declare.
@
text
@d17 1
a17 1
"/dev/tty", FH_TTY, "\\dev\\tty", 0, 0, 0, 0
a30 1
"/dev/kmem", FH_KMEM, "\\dev\\mem", 0, 0, 0, 0
a37 1
"/dev/fifo", FH_FIFO, "\\dev\\fifo", 0, 0, 0, 0
a51 1
"/dev/rawdrive", FH_RAWDRIVE, "\\DosDevices\\%c:", 0, 0, 0, 0
d123 1
a123 1
	  if (!dev || (!dev->upper && ! dev->devn == FH_TTY))
a137 2
  else if (dev->devn == FH_TTY)
    tty_to_real_device ();
d140 12
a151 1
      *this = *dev;
d157 8
d168 7
a174 47
  /* nothing to do... yet */
}

void
device::parse (_major_t major, _minor_t minor)
{
  _dev_t dev = FHDEV (major, 0);

  devn = 0;

  unsigned i;
  for (i = 0; i < (sizeof (unit_devices) / sizeof (unit_devices[0])); i++)
    if (unit_devices[i]->devn == dev)
      {
	*this = *unit_devices[i];
	this->setunit (minor);
	goto out;
      }

  dev = FHDEV (major, minor);
  for (i = 0; i < (sizeof (uniq_devices) / sizeof (uniq_devices[0])); i++)
    if (uniq_devices[i]->devn == dev)
      {
	*this = *uniq_devices[i];
	break;
      }
  
out:
  return;
}

void
device::parse (_dev_t dev)
{
  parse (_major (dev), _minor (dev));
}

void
device::tty_to_real_device ()
{
  if (!real_tty_attached (myself))
    *this = *console_dev;
  else
    {
      *this = *ttys_dev;
      setunit (myself->ctty);
    }
@


1.2.2.3
log
@* Makefile.in (DLL_OFILES): Add fhandler_nodevice.o.
* devices.gperf (device::parse): Just set devn to input if device not found --
nonexistent device will be caught later.
* dtable.cc (dtable::build_fhandler): Build fhandler_nodevice type when unknown
device.
* fhandler.h (fhandler_nodevice): New class.
(fhandler_union): Add fhandler_nodevice.
* path.cc (path_conv::check): Always set device stuff if major/minor are
specified.
@
text
@a109 1
":bad:", FH_BAD, ":bad:", 0, 0, 0, 0
a181 2
  if (!*this)
    devn = FHDEV (major, minor);
@


1.2.2.4
log
@	* devices.gperf: Remove obsolete win32 device names.
@
text
@d44 2
a45 2
"/dev/st", FH_TAPE, "\\Device\\Tape%d", 0, 127,
"/dev/nst", FH_NTAPE, "\\Device\\Tape%d", 0, 127,
a47 1
"/dev/sr", FH_CDROM, "\\Device\\CdRom%d", 0, 15
d49 5
d55 55
@


1.2.2.5
log
@merge from trunk
@
text
@d44 2
a45 2
"/dev/st", FH_TAPE, "\\Device\\Tape%d", 0, 127
"/dev/nst", FH_NTAPE, "\\Device\\Tape%d", 0, 127
@


1.2.2.6
log
@merge from trunk
@
text
@d49 1
a49 26
"/dev/sda", FH_SDA, "\\Device\\Harddisk%d\\Partition%d", 1, 16, -1
"/dev/sdb", FH_SDB, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 15
"/dev/sdc", FH_SDC, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 31
"/dev/sdd", FH_SDD, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 47
"/dev/sde", FH_SDE, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 63
"/dev/sdf", FH_SDF, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 79
"/dev/sdg", FH_SDG, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 95
"/dev/sdh", FH_SDH, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 111
"/dev/sdi", FH_SDI, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 127
"/dev/sdj", FH_SDJ, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 143
"/dev/sdk", FH_SDK, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 159
"/dev/sdl", FH_SDL, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 175
"/dev/sdm", FH_SDM, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 191
"/dev/sdn", FH_SDN, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 207
"/dev/sdo", FH_SDO, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 223
"/dev/sdp", FH_SDP, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 239
"/dev/sdq", FH_SDQ, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 255  /* FIXME 8 bit lunacy */
"/dev/sdr", FH_SDR, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 271
"/dev/sds", FH_SDS, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 287
"/dev/sdt", FH_SDT, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 303
"/dev/sdu", FH_SDU, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 319
"/dev/sdv", FH_SDV, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 335
"/dev/sdw", FH_SDW, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 351
"/dev/sdx", FH_SDX, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 367
"/dev/sdy", FH_SDY, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 383
"/dev/sdz", FH_SDZ, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 399
d68 1
a68 1
	  if (!dev || (!dev->upper && !dev->devn == FH_TTY))
@


1.2.2.7
log
@merge from trunk
@
text
@d49 26
a74 26
"/dev/hda", FH_SDA, "\\Device\\Harddisk%d\\Partition%d", 1, 16, -1
"/dev/hdb", FH_SDB, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 15
"/dev/hdc", FH_SDC, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 31
"/dev/hdd", FH_SDD, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 47
"/dev/hde", FH_SDE, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 63
"/dev/hdf", FH_SDF, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 79
"/dev/hdg", FH_SDG, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 95
"/dev/hdh", FH_SDH, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 111
"/dev/hdi", FH_SDI, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 127
"/dev/hdj", FH_SDJ, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 143
"/dev/hdk", FH_SDK, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 159
"/dev/hdl", FH_SDL, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 175
"/dev/hdm", FH_SDM, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 191
"/dev/hdn", FH_SDN, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 207
"/dev/hdo", FH_SDO, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 223
"/dev/hdp", FH_SDP, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 239
"/dev/hdq", FH_SDQ, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 255  /* FIXME 8 bit lunacy */
"/dev/hdr", FH_SDR, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 271
"/dev/hds", FH_SDS, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 287
"/dev/hdt", FH_SDT, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 303
"/dev/hdu", FH_SDU, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 319
"/dev/hdv", FH_SDV, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 335
"/dev/hdw", FH_SDW, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 351
"/dev/hdx", FH_SDX, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 367
"/dev/hdy", FH_SDY, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 383
"/dev/hdz", FH_SDZ, "\\Device\\Harddisk%d\\Partition%d", 1, 16, 399
@


1.2.2.8
log
@merge from trunk
@
text
@d164 1
a164 1
    *this = myself->ctty < 0 ? *bad_dev : *console_dev;
@


1.2.2.9
log
@* cygwin-gperf: Fix typo in FH_FS static storage.
* devices.gperf (device::parse): Default to fs "device" when nothing else is
found.
* fhandler.cc (fhandler_base::device_access_denied): Use access_worker rather
than access to avoid reparsing pc.
* fhandler_nodevice.cc (fhandler_nodevice::open): Set errno to ENXIO rather
than ENODEV.
* path.cc (path_conv::check): Default to FH_FS rather than FH_BAD.
(mount_info::conv_to_win32_path): Ditto.
(win32_device_name): Don't do device handling if FH_FS.
* path.h (path_conv::get_devn): Just return raw device number.
* syscalls.cc (access_worker): New function, split from access().  Correctly
deal with special devices in light of recent ntsec changes.
(access): Use access_worker.
@
text
@d107 1
a107 1
    *this = *fs_dev;
@


1.2.2.10
log
@merge from trunk
@
text
@d37 2
d40 4
@


1.1
log
@* Makefile.in: Add devices.gperf.
* devices.h: New file.
* devices.gperf: Ditto.
@
text
@@

