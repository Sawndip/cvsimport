head	1.64;
access;
symbols
	cygwin-1_7_21-release:1.63
	cygwin-1_7_20-release:1.63
	cygwin-1_7_19-release:1.63
	cygwin-64bit-postmerge:1.62
	cygwin-64bit-premerge-branch:1.61.0.2
	cygwin-64bit-premerge:1.61
	cygwin-1_7_18-release:1.61
	post-ptmalloc3:1.60.2.3
	pre-ptmalloc3:1.60.2.3
	cygwin-1_7_17-release:1.60
	cygwin-64bit-branch:1.60.0.2
	cygwin-1_7_16-release:1.60
	cygwin-1_7_15-release:1.59
	cygwin-1_7_14_2-release:1.59
	cygwin-1_7_14-release:1.59
	cygwin-1_7_12-release:1.59
	cygwin-1_7_11-release:1.59
	cygwin-1_7_10-release:1.59
	signal-rewrite:1.57.0.2
	pre-notty:1.56
	cygwin-1_7_9-release:1.56
	cv-post-1_7_9:1.56.0.2
	cygwin-1_7_8-release:1.56
	cygwin-1_7_7-release:1.56
	cygwin-1_7_5-release:1.56
	cygwin-1_7_4-release:1.56
	cygwin-1_7_3-release:1.56
	cygwin-1_7_2-release:1.56
	fifo_doover3:1.55.0.2
	cygwin-1_7_1-release:1.55
	prefifo:1.54
	cv-branch-2:1.53.0.2
	pre-ripout-set_console_state_for_spawn:1.52
	EOL_registry_mounts:1.51
	preoverlapped:1.51
	drop_9x_support_start:1.51
	cr-0x5f1:1.50.0.8
	cv-branch:1.50.0.6
	pre-ptymaster-archetype:1.50
	cr-0x3b58:1.50.0.4
	cr-0x5ef:1.50.0.2
	after-mmap-privanon-noreserve:1.49
	after-mmap-revamp:1.49
	before-mmap-revamp:1.48
	cgf-more-exit-sync:1.48
	post_wait_sig_exit:1.46
	pre_wait_sig_exit:1.45
	reparent-point:1.40
	noreparent:1.40.0.2
	cr-0x5e6:1.39.0.2
	cr-0x9e:1.37.0.6
	cr-0x9d:1.37.0.4
	cgf-deleteme:1.37.0.2
	pre-sigrewrite:1.36
	corinna-01:1.36
	cr-0x9c:1.35.0.4
	cr-0x9b:1.35.0.2
	cr-0x99:1.34
	Z-emcb-cygwin_daemon:1.34.0.2
	w32api-2_2:1.32
	mingw-runtime-2_4:1.32
	pre-cgf-merge:1.35
	cgf-dev-branch:1.31.0.6
	predaemon:1.27
	cygwin_daemon_merge_HEAD:1.27
	pregp02r1:1.26.0.2
	cygnus_cvs_20020108_pre:1.24
	Z-cygwin_daemon_merge-new_HEAD:1.29
	Z-cygwin_daemon_merge_HEAD:1.29
	cygwin_daemon:1.20.0.2;
locks; strict;
comment	@// @;


1.64
date	2013.07.15.13.54.27;	author corinna;	state dead;
branches;
next	1.63;

1.63
date	2013.05.01.01.20.37;	author yselkowitz;	state Exp;
branches;
next	1.62;

1.62
date	2013.04.23.09.44.32;	author corinna;	state Exp;
branches;
next	1.61;

1.61
date	2013.01.21.04.34.51;	author cgf;	state Exp;
branches;
next	1.60;

1.60
date	2012.05.22.17.37.40;	author corinna;	state Exp;
branches
	1.60.2.1;
next	1.59;

1.59
date	2011.12.22.11.02.33;	author corinna;	state Exp;
branches;
next	1.58;

1.58
date	2011.11.14.01.37.02;	author cgf;	state Exp;
branches;
next	1.57;

1.57
date	2011.07.31.12.37.52;	author corinna;	state Exp;
branches;
next	1.56;

1.56
date	2010.01.14.18.46.01;	author corinna;	state Exp;
branches;
next	1.55;

1.55
date	2009.07.24.20.54.33;	author cgf;	state Exp;
branches;
next	1.54;

1.54
date	2009.07.14.17.37.42;	author corinna;	state Exp;
branches;
next	1.53;

1.53
date	2009.01.03.05.12.20;	author cgf;	state Exp;
branches;
next	1.52;

1.52
date	2008.04.07.18.45.57;	author cgf;	state Exp;
branches;
next	1.51;

1.51
date	2006.12.06.16.33.03;	author corinna;	state Exp;
branches;
next	1.50;

1.50
date	2005.12.14.16.38.22;	author corinna;	state Exp;
branches;
next	1.49;

1.49
date	2005.11.28.22.32.29;	author corinna;	state Exp;
branches;
next	1.48;

1.48
date	2005.09.28.19.22.22;	author corinna;	state Exp;
branches;
next	1.47;

1.47
date	2005.09.28.19.02.49;	author corinna;	state Exp;
branches;
next	1.46;

1.46
date	2005.09.14.14.27.54;	author cgf;	state Exp;
branches;
next	1.45;

1.45
date	2005.07.05.03.16.44;	author cgf;	state Exp;
branches;
next	1.44;

1.44
date	2005.04.13.16.41.31;	author corinna;	state Exp;
branches;
next	1.43;

1.43
date	2005.03.27.01.57.37;	author cgf;	state Exp;
branches;
next	1.42;

1.42
date	2005.02.27.04.30.07;	author cgf;	state Exp;
branches;
next	1.41;

1.41
date	2005.02.25.21.23.15;	author corinna;	state Exp;
branches;
next	1.40;

1.40
date	2004.09.03.01.53.11;	author cgf;	state Exp;
branches;
next	1.39;

1.39
date	2004.05.07.21.28.53;	author corinna;	state Exp;
branches;
next	1.38;

1.38
date	2004.02.09.04.04.23;	author cgf;	state Exp;
branches;
next	1.37;

1.37
date	2003.12.07.22.37.11;	author cgf;	state Exp;
branches;
next	1.36;

1.36
date	2003.09.25.00.37.16;	author cgf;	state Exp;
branches;
next	1.35;

1.35
date	2003.09.07.02.22.58;	author cgf;	state Exp;
branches;
next	1.34;

1.34
date	2003.06.16.03.24.10;	author cgf;	state Exp;
branches;
next	1.33;

1.33
date	2003.04.01.16.11.41;	author corinna;	state Exp;
branches;
next	1.32;

1.32
date	2003.02.04.03.01.17;	author cgf;	state Exp;
branches;
next	1.31;

1.31
date	2002.12.14.04.01.32;	author cgf;	state Exp;
branches
	1.31.4.1
	1.31.6.1;
next	1.30;

1.30
date	2002.09.23.00.31.30;	author cgf;	state Exp;
branches;
next	1.29;

1.29
date	2002.09.22.03.38.57;	author cgf;	state Exp;
branches;
next	1.28;

1.28
date	2002.06.05.01.42.28;	author cgf;	state Exp;
branches;
next	1.27;

1.27
date	2002.02.25.17.47.46;	author corinna;	state Exp;
branches;
next	1.26;

1.26
date	2002.02.10.13.50.13;	author corinna;	state Exp;
branches;
next	1.25;

1.25
date	2002.02.10.13.38.49;	author corinna;	state Exp;
branches;
next	1.24;

1.24
date	2001.10.24.04.16.45;	author cgf;	state Exp;
branches;
next	1.23;

1.23
date	2001.10.13.17.23.35;	author cgf;	state Exp;
branches;
next	1.22;

1.22
date	2001.10.05.04.21.41;	author cgf;	state Exp;
branches;
next	1.21;

1.21
date	2001.10.04.02.34.19;	author cgf;	state Exp;
branches;
next	1.20;

1.20
date	2001.09.12.17.46.36;	author corinna;	state Exp;
branches
	1.20.2.1;
next	1.19;

1.19
date	2001.09.07.21.32.04;	author cgf;	state Exp;
branches;
next	1.18;

1.18
date	2001.08.04.21.10.52;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2001.07.26.19.22.23;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2001.06.24.22.26.51;	author cgf;	state Exp;
branches;
next	1.15;

1.15
date	2001.04.24.02.07.58;	author cgf;	state Exp;
branches;
next	1.14;

1.14
date	2001.02.23.09.49.19;	author corinna;	state Exp;
branches;
next	1.13;

1.13
date	2001.01.11.12.33.12;	author corinna;	state Exp;
branches;
next	1.12;

1.12
date	2001.01.08.04.02.01;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2000.10.28.05.41.43;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2000.10.27.18.53.56;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2000.10.24.18.44.56;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.09.14.49.25;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.09.14.02.25;	author corinna;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.09.13.19.41;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.07.17.35.36;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.04.17.08.46;	author corinna;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.02.09.07.50;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.02.08.31.07;	author corinna;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.01.01.02.40;	author corinna;	state Exp;
branches;
next	;

1.60.2.1
date	2012.08.13.20.04.33;	author corinna;	state Exp;
branches;
next	1.60.2.2;

1.60.2.2
date	2012.12.10.11.45.47;	author corinna;	state Exp;
branches;
next	1.60.2.3;

1.60.2.3
date	2013.01.21.13.52.05;	author corinna;	state Exp;
branches;
next	1.60.2.4;

1.60.2.4
date	2013.03.01.16.32.33;	author corinna;	state Exp;
branches;
next	;

1.31.4.1
date	2002.12.28.16.56.16;	author cgf;	state Exp;
branches;
next	1.31.4.2;

1.31.4.2
date	2002.12.28.17.39.47;	author cgf;	state Exp;
branches;
next	;

1.31.6.1
date	2003.01.16.01.27.30;	author cgf;	state Exp;
branches;
next	1.31.6.2;

1.31.6.2
date	2003.02.05.14.25.07;	author cgf;	state Exp;
branches;
next	1.31.6.3;

1.31.6.3
date	2003.02.14.03.03.28;	author cgf;	state Exp;
branches;
next	1.31.6.4;

1.31.6.4
date	2003.04.03.01.32.32;	author cgf;	state Exp;
branches;
next	1.31.6.5;

1.31.6.5
date	2003.07.06.05.10.43;	author cgf;	state Exp;
branches;
next	1.31.6.6;

1.31.6.6
date	2003.09.10.16.23.39;	author cgf;	state Exp;
branches;
next	;

1.20.2.1
date	2002.01.04.03.56.08;	author rbcollins;	state Exp;
branches;
next	1.20.2.2;

1.20.2.2
date	2002.02.28.12.53.24;	author rbcollins;	state Exp;
branches;
next	1.20.2.3;

1.20.2.3
date	2002.06.13.14.34.05;	author rbcollins;	state Exp;
branches;
next	1.20.2.4;

1.20.2.4
date	2002.09.22.10.01.27;	author scottc;	state Exp;
branches;
next	;


desc
@@


1.64
log
@	Remove /dev/mem, /dev/kmem, /dev/port support.
	* Makefile.in (DLL_OFILES): Drop fhandler_mem.o.
	(fhandler_mem_CFLAGS): Remove rule.
	* devices.in (enum fh_devices): Remove FH_MEM, FH_KMEM and FH_PORT.
	* devices.cc: Regenerate.
	* dtable.cc (fh_alloc): Drop handling for FH_MEM, FH_KMEM and FH_PORT.
	* fhandler.h (class fhandler_dev_mem): Remove.
	* fhandler_mem.cc: Remove file.
	* globals.cc (ro_u_pmem): Remove.
	* mmap.cc (fhandler_dev_mem::mmap): Remove.
	(fhandler_dev_mem::munmap): Remove.
	(fhandler_dev_mem::fixup_mmap_after_fork): Remove.
@
text
@/* fhandler_mem.cc.  See fhandler.h for a description of the fhandler classes.

   Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2008, 2009, 2010, 2011,
   2012, 2013 Red Hat, Inc.

   This file is part of Cygwin.

   This software is a copyrighted work licensed under the terms of the
   Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
   details. */

#include "winsup.h"
#include <unistd.h>

#include "cygerrno.h"
#include "path.h"
#include "fhandler.h"
#include "ntdll.h"

/**********************************************************************/
/* fhandler_dev_mem */

fhandler_dev_mem::fhandler_dev_mem ()
  : fhandler_base ()
{
}

fhandler_dev_mem::~fhandler_dev_mem ()
{
}

int
fhandler_dev_mem::open (int flags, mode_t)
{
  NTSTATUS status;

  if (!wincap.has_physical_mem_access ())
    {
      set_errno (EACCES);
      debug_printf ("%s is accessible under XP only", dev ().name);
      return 0;
    }

  if (dev () == FH_MEM) /* /dev/mem */
    {
      SYSTEM_BASIC_INFORMATION sbi;
      status = NtQuerySystemInformation (SystemBasicInformation, (PVOID) &sbi,
					 sizeof sbi, NULL);
      if (NT_SUCCESS (status))
	{
	  __seterrno_from_nt_status (status);
	  debug_printf("NtQuerySystemInformation: status %p", status);
	  mem_size = 0;
	}
      else
	mem_size = (SIZE_T) sbi.PhysicalPageSize
		   * (SIZE_T) sbi.NumberOfPhysicalPages;
      debug_printf ("MemSize: %ld MB", mem_size >> 20);
    }
  else if (dev () == FH_KMEM) /* /dev/kmem - Not yet supported */
    {
      mem_size = 0;
      debug_printf ("KMemSize: %ld MB", mem_size >> 20);
    }
  else if (dev () == FH_PORT) /* /dev/port == First 64K of /dev/mem */
    {
      mem_size = 65536;
      debug_printf ("PortSize: 64 KB");
    }
  else
    {
      mem_size = 0;
      debug_printf ("Illegal minor number");
    }

  /* Check for illegal flags. */
  if (flags & (O_APPEND | O_TRUNC | O_EXCL))
    {
      set_errno (EINVAL);
      return 0;
    }

  OBJECT_ATTRIBUTES attr;
  InitializeObjectAttributes (&attr, &ro_u_pmem,
			      OBJ_CASE_INSENSITIVE
			      | (flags & O_CLOEXEC ? 0 : OBJ_INHERIT),
			      NULL, NULL);

  ACCESS_MASK section_access;
  if ((flags & O_ACCMODE) == O_RDONLY)
    {
      set_access (GENERIC_READ);
      section_access = SECTION_MAP_READ;
    }
  else if ((flags & O_ACCMODE) == O_WRONLY)
    {
      set_access (GENERIC_WRITE);
      section_access = SECTION_MAP_READ | SECTION_MAP_WRITE;
    }
  else
    {
      set_access (GENERIC_READ | GENERIC_WRITE);
      section_access = SECTION_MAP_READ | SECTION_MAP_WRITE;
    }

  HANDLE mem;
  status = NtOpenSection (&mem, section_access, &attr);
  if (!NT_SUCCESS (status))
    {
      __seterrno_from_nt_status (status);
      set_io_handle (NULL);
      return 0;
    }

  set_io_handle (mem);
  set_open_status ();
  return 1;
}

ssize_t __stdcall
fhandler_dev_mem::write (const void *ptr, size_t ulen)
{
  if (!ulen || pos >= (off_t) mem_size)
    return 0;

  if (!(get_access () & GENERIC_WRITE))
    {
      set_errno (EINVAL);
      return -1;
    }

  if (pos + ulen > mem_size)
    ulen = (off_t) mem_size - pos;

  PHYSICAL_ADDRESS phys;
  NTSTATUS status;
  void *viewmem = NULL;
  SIZE_T len = ulen + wincap.page_size () - 1;

  phys.QuadPart = (ULONGLONG) pos;
  status = NtMapViewOfSection (get_handle (), INVALID_HANDLE_VALUE, &viewmem,
			       0L, len, &phys, &len, ViewShare, 0,
			       PAGE_READONLY);
  if (!NT_SUCCESS (status))
    {
      __seterrno_from_nt_status (status);
      return -1;
    }

  memcpy ((char *) viewmem + (pos - phys.QuadPart), ptr, ulen);

  status = NtUnmapViewOfSection (INVALID_HANDLE_VALUE, viewmem);
  if (!NT_SUCCESS (status))
    {
      __seterrno_from_nt_status (status);
      return -1;
    }

  pos += ulen;
  return ulen;
}

void __reg3
fhandler_dev_mem::read (void *ptr, size_t& ulen)
{
  if (!ulen || pos >= (off_t) mem_size)
    {
      ulen = 0;
      return;
    }

  if (!(get_access () & GENERIC_READ))
    {
      set_errno (EINVAL);
      ulen = (size_t) -1;
      return;
    }

  if (pos + ulen > mem_size)
    ulen = (off_t) mem_size - pos;

  PHYSICAL_ADDRESS phys;
  NTSTATUS status;
  void *viewmem = NULL;
  SIZE_T len = ulen + wincap.page_size () - 1;

  phys.QuadPart = (ULONGLONG) pos;
  status = NtMapViewOfSection (get_handle (), INVALID_HANDLE_VALUE, &viewmem,
			       0L, len, &phys, &len, ViewShare, 0,
			       PAGE_READONLY);
  if (!NT_SUCCESS (status))
    {
      __seterrno_from_nt_status (status);
      ulen = (size_t) -1;
      return;
    }

  memcpy (ptr, (char *) viewmem + (pos - phys.QuadPart), ulen);

  status = NtUnmapViewOfSection (INVALID_HANDLE_VALUE, viewmem);
  if (!NT_SUCCESS (status))
    {
      __seterrno_from_nt_status (status);
      ulen = (size_t) -1;
      return;
    }

  pos += ulen;
}

off_t
fhandler_dev_mem::lseek (off_t offset, int whence)
{
  switch (whence)
    {
    case SEEK_SET:
      pos = offset;
      break;

    case SEEK_CUR:
      pos += offset;
      break;

    case SEEK_END:
      pos = (off_t) mem_size;
      pos += offset;
      break;

    default:
      set_errno (EINVAL);
      return ILLEGAL_SEEK;
    }

  if (pos > (off_t) mem_size)
    {
      set_errno (EINVAL);
      return ILLEGAL_SEEK;
    }

  return pos;
}

int __reg2
fhandler_dev_mem::fstat (struct stat *buf)
{
  fhandler_base::fstat (buf);
  buf->st_blksize = wincap.page_size ();
  if (is_auto_device ())
    {
      buf->st_mode = S_IFCHR;
      if (wincap.has_physical_mem_access ())
	buf->st_mode |= S_IRUSR | S_IWUSR |
			S_IRGRP | S_IWGRP |
			S_IROTH | S_IWOTH;
    }

  return 0;
}
@


1.63
log
@Throughout, (mainly in fhandler*) fix remaining gcc 4.7 mismatch
warnings between regparm definitions and declarations.
* smallprint.cc (__small_vswprintf): Conditionalize declaration and
setting of l_opt for only x86_64.
* spawn.cc (child_info_spawn::worker): Remove unused 'pid' variable.
* thread.cc (verifyable_object_isvalid): Temporarily define as
non-inline with gcc 4.7+, regardless of target.
@
text
@@


1.62
log
@	* Merge in cygwin-64bit-branch.
@
text
@d163 1
a163 1
void __stdcall
@


1.61
log
@Throughout, change __attribute__ ((regparm (N))) to just __regN.  Throughout,
(mainly in fhandler*) start fixing gcc 4.7.2 mismatch between regparm
definitions and declarations.
* gendef: Define some functions to take @@ declaration to accommodate _regN
defines which use __stdcall.
* gentls_offsets: Define __regN macros as empty.
* autoload.cc (wsock_init): Remove unneeded regparm attribute.
* winsup.h (__reg1): Define.
(__reg2): Define.
(__reg3): Define.
* advapi32.cc (DuplicateTokenEx): Coerce some initializers to avoid warnings
from gcc 4.7.2.
* exceptions.cc (status_info): Declare struct to use NTSTATUS.
(cygwin_exception::dump_exception): Coerce e->ExceptionCode to NTSTATUS.
* fhandler_clipboard.cc (cygnativeformat): Redefine as UINT to avoid gcc 4.7.2
warnings.
(fhandler_dev_clipboard::read): Ditto.
@
text
@d40 1
a40 1
      debug_printf ("%s is accessible under NT4/W2K/XP only", dev ().name);
d52 1
a52 1
	  debug_printf("NtQuerySystemInformation: status %p, %E", status);
d56 3
a58 2
	mem_size = sbi.PhysicalPageSize * sbi.NumberOfPhysicalPages;
      debug_printf ("MemSize: %d MB", mem_size >> 20);
d63 1
a63 1
      debug_printf ("KMemSize: %d MB", mem_size >> 20);
d123 1
a123 1
  if (!ulen || pos >= mem_size)
d133 1
a133 1
    ulen = mem_size - pos;
d138 1
a138 1
  DWORD len = ulen + wincap.page_size () - 1;
d166 1
a166 1
  if (!ulen || pos >= mem_size)
d180 1
a180 1
    ulen = mem_size - pos;
d185 1
a185 1
  DWORD len = ulen + wincap.page_size () - 1;
d211 2
a212 2
_off64_t
fhandler_dev_mem::lseek (_off64_t offset, int whence)
d225 1
a225 1
      pos = mem_size;
d234 1
a234 1
  if (pos > mem_size)
d244 1
a244 1
fhandler_dev_mem::fstat (struct __stat64 *buf)
@


1.60
log
@	* devices.in: Fix native name of /dev/kmem.
	* devices.cc: Regenerate.
	* dtable.cc (fh_alloc): Don't forget FH_KMEM.
	* fhandler_mem.cc (fhandler_dev_mem::open): Set errno to EACCES rather
	than ENOENT on systems not granting access to physical memory from
	user space.
@
text
@d3 2
a4 2
   Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2008, 2009,
   2010, 2011, 2012 Red Hat, Inc.
d242 1
a242 1
int
@


1.60.2.1
log
@	* include/cygwin/stat.h (struct __stat64): Drop entirely in favor of
	struct stat.  Accommodate throughout Cygwin.
	* include/cygwin/types.h: Throughout, drop current, internal types
	used since Cygwin 1.5 with the base type they have been used for.
	Throughout, define types based on bitsize-specific types where
	appropriate.  Accommodate throughout Cygwin.
	* include/sys/cygwin.h: Drop __uid32_t and __gid32_t in favor of
	uid_t and gid_t.  Define uid/gid types based on bitsize-specific types.
	(struct external_pinfo): Accommodate above change.
	* cygtls.h (struct _local_storage): Drop unused members grp and
	namearray,
	* tlsoffsets.h: Regenerate.
	* devices.h (_dev_t): Drop definition.  Use dev_t throughout instead.
	* devices.cc: Regenerate.

	Probably temporary patch to drop unneeded functionality on x86_64:
	* fcntl.cc (_fcntl): Alias to fcntl64 on x86_64.
	* glob.cc (CYGWIN_gl_stat): Simplify on x86_64.
	* grp.cc (grp32togrp16): Don't define on x86_64.
	(getgrgid): Alias to getgrgid32 on x86_64.
	(getgrnam): Alias to getgrnam32 on x86_64.
	(getgrent): Alias to getgrent32 on x86_64.
	(getgroups): Alias to getgroups32 on x86_64.
	(initgroups): Alias to initgroups32 on x86_64.
	(setgroups): Alias to setgroups32 on x86_64.
	* mmap.cc (mmap): Alias to mmap64 on x86_64.
	* passwd.cc (getpwuid): Alias to getpwuid32 on x86_64.
	(getpwuid_r): Alias to getpwuid_r32 on x86_64.
	(getpwduid): Don't define on x86_64.
	* syscalls.cc (lseek): Alias to lseek64 on x86_64.
	(_lseek): Alias to lseek64 on x86_64.
	(chown): Alias to chown32 on x86_64.
	(lchown): Alias to lchown32 on x86_64.
	(fchown): Alias to fchown32 on x86_64.
	(stat64_to_stat32): Don't define on x86_64.
	(fstat): Alias to fstat64 on x86_64.
	(_fstat_r): Alias to _fstat64_r on x86_64.
	(stat): Alias to stat64 on x86_64.
	(_stat_r): Alias to _stat64_r on x86_64.
	(lstat): Alias to lstat64 on x86_64.
	(ftruncate): Alias to ftruncate64 on x86_64.
	(truncate): Alias to truncate64 on x86_64.
	(seteuid): Alias to seteuid32 on x86_64.
	(setuid): Alias to setuid32 on x86_64.
	(setreuid): Alias to setreuid32 on x86_64.
	(setegid): Alias to setegid32 on x86_64.
	(setgid): Alias to setgid32 on x86_64.
	(setregid): Alias to setregid32 on x86_64.
	* uinfo.cc (getuid): Alias to getuid32 on x86_64.
	(getgid): Alias to getgid32 on x86_64.
	(geteuid): Alias to geteuid32 on x86_64.
	(getegid): Alias to getegid32 on x86_64.
	* winsup.h (ILLEGAL_UID16): Don't define on x86_64.
	(ILLEGAL_GID16): Ditto.
	(uid16touid32): Don't declare on x86_64.
	(gid16togid32): Don't declare on x86_64.
@
text
@d210 2
a211 2
off_t
fhandler_dev_mem::lseek (off_t offset, int whence)
d243 1
a243 1
fhandler_dev_mem::fstat (struct stat *buf)
@


1.60.2.2
log
@	* Throughout, fix format string of debug printf and api_fatal calls
	to work in 32 and 64 bit environment, as well as to honor signedness.
	Use %y instead of 0x%x.
	* fhandler.h (class fhandler_dev_mem): Change type of mem_size from
	DWORD to SIZE_T.
	* fhandler_mem.cc: Throughout, cast mem_size in comparisons to make
	GCC happy.
	* fhandler_process.cc (format_process_maps): Change type of ret_len
	to SIZE_T.
	(get_mem_values): Ditto for n and length.
	* mmap.cc (MapView): Ditto for commitsize and viewsize.
	(class mmap_record): Ditto for len.  Use SIZE_T througout for memory
	size in method args and return types.
	* ntdll.h (NtLockVirtualMemory): Fix type of memory size parameters
	to SIZE_T.
	(NtMapViewOfSection): Ditto.
	(NtQueryVirtualMemory): Ditto.
	(NtUnlockVirtualMemory): Ditto.
	(RtlFreeHeap): Change type of first parameter to HANDLE.
	* shm.cc (shmat): Change type of viewsize to SIZE_T.
	* timer.cc (timer_thread): Change type of sleep_ms to LONG.
	(ualarm): Drop casts to unsigned int in timer value computation.
@
text
@d52 1
a52 1
	  debug_printf("NtQuerySystemInformation: status %p", status);
d56 2
a57 3
	mem_size = (SIZE_T) sbi.PhysicalPageSize
		   * (SIZE_T) sbi.NumberOfPhysicalPages;
      debug_printf ("MemSize: %ld MB", mem_size >> 20);
d62 1
a62 1
      debug_printf ("KMemSize: %ld MB", mem_size >> 20);
d122 1
a122 1
  if (!ulen || pos >= (off_t) mem_size)
d132 1
a132 1
    ulen = (off_t) mem_size - pos;
d137 1
a137 1
  SIZE_T len = ulen + wincap.page_size () - 1;
d165 1
a165 1
  if (!ulen || pos >= (off_t) mem_size)
d179 1
a179 1
    ulen = (off_t) mem_size - pos;
d184 1
a184 1
  SIZE_T len = ulen + wincap.page_size () - 1;
d224 1
a224 1
      pos = (off_t) mem_size;
d233 1
a233 1
  if (pos > (off_t) mem_size)
@


1.60.2.3
log
@Pull in changes from HEAD
@
text
@d3 2
a4 2
   Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2008, 2009, 2010, 2011,
   2012, 2013 Red Hat, Inc.
d243 1
a243 1
int __reg2
@


1.60.2.4
log
@	* autoload.cc (AttachConsole): Remove.
	(GetModuleHandleExW): Remove.
	(GetSystemWow64DirectoryW): Remove.
	(GetVolumePathNamesForVolumeNameW): Remove.
	* exceptions.cc (cygwin_stackdump): Always call RtlCaptureContext.
	(exception::handle): Drop accidentally left in debugging statement.
	Always call RtlCaptureContext.
	(sigpacket::process): Always call RtlCaptureContext for current thread.
	* fhandler_disk_file.cc (fstatvfs): Drop code using
	FileFsSizeInformation.
	(struct __DIR_cache): Remove comment.
	(fhandler_disk_file::rewinddir): Drop W2K-only code.
	* fhandler_floppy.cc (fhandler_dev_floppy::get_drive_info): Don't
	check for old OS.  Extend a comment.
	* fhandler_mem.cc (fhandler_dev_mem::open): Drop NT4 and W2K from
	debug output.
	* fhandler_proc.cc (format_proc_partitions): Drop Pre-XP considerations.
	* fhandler_procnet.cc (fhandler_procnet::exists): Ditto.
	(fhandler_procnet::readdir): Ditto.
	(format_procnet_ifinet6): Ditto.
	* fhandler_socket.cc (fhandler_socket::recvmsg): Ditto.
	* fhandler_tape.cc (mtinfo_drive::get_status): Ditto.
	* init.cc (dll_entry): Drop W2K-only code.
	* net.cc (get_ifs): Rename from get_xp_ifs.
	(get_2k_ifs): Remove.
	(getifaddrs): Always call get_ifs.
	(get_ifconf): Ditto.
	(if_nametoindex): Drop Pre-XP considerations.
	(load_ipv6_funcs): Ditto.  Fix preceeding comment.
	* sec_auth.cc (lsaauth): Drop code handling fake_login_sid.
	* sec_helper.cc (fake_logon_sid): Remove.
	(set_cygwin_privileges): Fix uncommented statement to drop pre-XP
	considerations.
	* security.h (fake_logon_sid): Drop declaration.
	* shared.cc (shared_info::init_obcaseinsensitive): Drop W2K-only code.
	* wincap.cc: Throughout, remove setting all deprecated wincapc members.
	(wincap_minimal): Set to wincap_xpsp2.
	(wincap_2000): Remove.
	(wincap_2000sp4): Remove.
	(wincap_xp): Remove.
	(wincap_xpsp1): Remove.
	(wincapc::init): Drop OS 5.0 and pre-SP2 XP.
	* wincap.h (struct wincaps): Remove the following members:
	has_create_global_privilege, has_ioctl_storage_get_media_types_ex,
	has_disk_ex_ioctls, has_buggy_restart_scan, needs_logon_sid_in_sid_list,
	has_gaa_prefixes, has_recvmsg, has_stack_size_param_is_a_reservation,
	kernel_is_always_casesensitive, has_rtl_capture_context.
@
text
@d40 1
a40 1
      debug_printf ("%s is accessible under XP only", dev ().name);
@


1.59
log
@	Throughout use wincap.allocation_granularity instead of getpagesize.
	Throughout use wincap.page_size instead of getsystempagesize.
	Throughout use "status" as variable name to hold NTSTATUS values.
	* fhandler_mem.cc: Check for NT_SUCCESS rather than for STATUS_SUCCESS.
	Fix debug_printf output.  Rectify long statements.  Fix comment
	formatting.
	* fhandler_proc.cc: Ditto.
	(format_proc_swaps): Drop useless test for ERROR_PROC_NOT_FOUND.
	* fhandler_process.cc: Ditto as in fhandler_mem.cc.
	(get_process_state): Rearrange allocation loop.  Use malloc/realloc.
	(get_mem_values): Fix potential NULL pointer usage.  Drop unused
	variable.
	* pinfo.cc (winpids::enum_processes): Handle low memory gracefully.
	* sec_auth.cc (get_priv_list): Drop local variable ret.
	* shared.cc (memory_init): Drop outdated call to getpagesize.
	* syscalls.cc (getsystempagesize): Remove.
	* sysconf.cc: Check for NT_SUCCESS rather than for STATUS_SUCCESS.
	(sysinfo): Constify sizeof_stodi.  Drop useless test for
	ERROR_PROC_NOT_FOUND.
	* thread.cc (pthread_getattr_np): Cast pointers to uintptr_t rather
	than to int for pointer arithmetic.
	* winsup.h (getsystempagesize): Drop declaration.
@
text
@d4 1
a4 1
   2010, 2011 Red Hat, Inc.
d39 1
a39 1
      set_errno (ENOENT);
@


1.58
log
@update copyrights
@
text
@d35 2
a45 1
      NTSTATUS ret;
d47 3
a49 2
      if ((ret = NtQuerySystemInformation (SystemBasicInformation, (PVOID) &sbi,
					   sizeof sbi, NULL)) != STATUS_SUCCESS)
d51 2
a52 2
	  __seterrno_from_nt_status (ret);
	  debug_printf("NtQuerySystemInformation: ret %d, Dos(ret) %E", ret);
d72 1
a72 1
      debug_printf ("Illegal minor number!!!");
d106 2
a107 2
  NTSTATUS ret = NtOpenSection (&mem, section_access, &attr);
  if (!NT_SUCCESS (ret))
d109 1
a109 1
      __seterrno_from_nt_status (ret);
d135 1
a135 1
  NTSTATUS ret;
d137 1
a137 1
  DWORD len = ulen + getsystempagesize () - 1;
d140 4
a143 10
  if ((ret = NtMapViewOfSection (get_handle (),
				 INVALID_HANDLE_VALUE,
				 &viewmem,
				 0L,
				 len,
				 &phys,
				 &len,
				 ViewShare,
				 0,
				 PAGE_READONLY)) != STATUS_SUCCESS)
d145 1
a145 1
      __seterrno_from_nt_status (ret);
d151 2
a152 1
  if (!NT_SUCCESS (ret = NtUnmapViewOfSection (INVALID_HANDLE_VALUE, viewmem)))
d154 1
a154 1
      __seterrno_from_nt_status (ret);
d182 1
a182 1
  NTSTATUS ret;
d184 1
a184 1
  DWORD len = ulen + getsystempagesize () - 1;
d187 4
a190 10
  if ((ret = NtMapViewOfSection (get_handle (),
				 INVALID_HANDLE_VALUE,
				 &viewmem,
				 0L,
				 len,
				 &phys,
				 &len,
				 ViewShare,
				 0,
				 PAGE_READONLY)) != STATUS_SUCCESS)
d192 1
a192 1
      __seterrno_from_nt_status (ret);
d199 2
a200 1
  if (!NT_SUCCESS (ret = NtUnmapViewOfSection (INVALID_HANDLE_VALUE, viewmem)))
d202 1
a202 1
      __seterrno_from_nt_status (ret);
d246 1
a246 1
  buf->st_blksize = getsystempagesize ();
@


1.57
log
@	* fhandler.h (class fhandler_dev_mem): Remove dup method declaration.
	* fhandler_clipboard.cc (fhandler_dev_clipboard::dup): Accommodate the
	fact that the entire fhandler gets copied over to the child in
	operator =.
	* fhandler_floppy.cc (fhandler_dev_floppy::dup): Ditto.
	* fhandler_raw.cc (fhandler_dev_raw::dup): Ditto.
	* fhandler_serial.cc (fhandler_serial::dup): Ditto.
	* fhandler_socket.cc (fhandler_socket::dup): Ditto.
	* fhandler_virtual.cc (fhandler_virtual::dup): Ditto.
	* fhandler_mem.cc (fhandler_dev_mem::dup): Ditto.  Remove entirely.
@
text
@d4 1
a4 1
   2010 Red Hat, Inc.
@


1.56
log
@	* cygwin.din (dup3): Export.
	(pipe2): Export.
	* dtable.cc (dtable::dup_worker): Take additional flags parameter.
	Handle O_CLOEXEC flag.
	(dtable::dup3): Rename from dup2.  Take additional flags parameter.
	Check for valid flags.  Drop check for newfd == oldfd.
	* dtable.h (dtable::dup_worker): Add flags parameter.
	(dtable::dup3): Rename from dup2.
	* fcntl.cc (fcntl64): Add F_DUPFD_CLOEXEC case.
	* fhandler.h (fhandler_mailslot::get_object_attr): Add flags parameter.
	* fhandler.cc (fhandler_base::open): Use security attribute with
	inheritance according to setting of O_CLOEXEC flag.
	* fhandler_console.cc (fhandler_console::open): Ditto.
	* fhandler_fifo.cc (sec_user_cloexec): New inline function to
	create security attribute with inheritance according to setting of
	O_CLOEXEC flag.
	(fhandler_fifo::open): Call sec_user_cloexec to fetch security
	attribute.
	(fhandler_fifo::wait): Ditto.
	* fhandler_mem.cc (fhandler_dev_mem::open): Ditto.
	* fhandler_mailslot.cc (fhandler_mailslot::get_object_attr): Take
	additional flags parameter.  Use security attribute with inheritance
	according to setting of O_CLOEXEC flag.
	(fhandler_mailslot::open): Call get_object_attr with flags parameter.
	* fhandler_registry.cc (fhandler_registry::open): Call set_close_on_exec
	on real handles to accommodate O_CLOEXEC flag.
	* fhandler_tty.cc (fhandler_tty_slave::open): Ditto.
	* fhandler_tape.cc: Create mutex with inheritance according to setting
	of O_CLOEXEC flag.
	* pipe.cc: Replace usage of O_NOINHERIT with O_CLOEXEC.
	 (fhandler_pipe::init): Simplify setting close_on_exec flag.
	(fhandler_pipe::open): Remove setting close_on_exec flag.
	(fhandler_pipe::create): Use security attribute with inheritance
	according to setting of O_CLOEXEC flag.
	(pipe2): New exported function.
	* posix_ipc.cc: Throughout, open backing files with O_CLOEXEC
	flag to follow POSIX semantics.
	* security.h (sec_none_cloexec): New define.
	* syscalls.cc (dup): Add missing extern "C" qualifier.  Accommodate
	renaming of dtable::dup2 to dtable::dup3.
	(dup2): Ditto.  Check newfd == oldfd here.
	(dup3): New function.  Check newfd == oldfd here.
	(open): Set close_on_exec flag according to O_CLOEXEC flag before
	calling fhandler->open.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
@
text
@a265 15

int
fhandler_dev_mem::dup (fhandler_base *child)
{
  int ret = fhandler_base::dup (child);

  if (! ret)
    {
      fhandler_dev_mem *fhc = (fhandler_dev_mem *) child;

      fhc->mem_size = mem_size;
      fhc->pos = pos;
    }
  return ret;
}
@


1.55
log
@* sigproc.h (wait_for_sigthread): Eliminate parameter.
* sigproc.cc (wait_for_sigthread): Ditto.  Don't synchronize with wait_sig
after receiving an event that it is ready to go.
(init_sig_pipe): New function.
(wait_sig): Call init_sig_pipe to create pipes for communicating signals to
this process.  Don't send sigCONT signal when initializing.
* fork.cc (frok::child): Accommodate wait_for_sigpipe parameter change.
* fhandler.h (fhandler_*::write): Make ssize_t/__stdcall.
(fhandler_*::write_overlapped): Ditto.
(fhandler_*::raw_write): Ditto.
(fhandler_*::readv): Ditto.
(fhandler_*::writev): Ditto.
(fhandler_*::raw_read): Make __stdcall.
* fhandler: Accommodate changes to read/write functions throughout.
* fhandler_clipboard.cc: Ditto.
* fhandler_console.cc: Ditto.
* fhandler_dsp.cc: Ditto.
* fhandler_fifo.cc: Ditto.
* fhandler_mailslot.cc: Ditto.
* fhandler_mem.cc: Ditto.
* fhandler_mem.cc: Ditto.
* fhandler_random.cc: Ditto.
* fhandler_tape.cc: Ditto.
* fhandler_tty.cc: Ditto.
* fhandler_virtual.cc: Ditto.
* fhandler_windows.cc: Ditto.
* fhandler_zero.cc: Ditto.
* syscalls.cc (readv): Use ssize_t as temp variable.
* fhandler.cc (fhandler_base::read): Coerce returned len to signed or it will
never be treated as < 0.
(fhandler_base::wait_overlapped): Minimize calls to GetLastError.  Remove
duplicate debugging test.  Fix error return.
* fhandler.h (fhandler_fifo::fifo_name): Declare new function.
(fhandler_fifo::close): Ditto.
(fhandler_fifo::dup): Ditto.
(fhandler_fifo::close_on_exec): Ditto.
* fhandler.cc (fhandler_fifo::fifo_name): Define new function.
(FIFO_BUF_SIZE): New define.
(cnp): Ditto.
(fhandler_fifo::open): Rework.  Use cnp to open named pipe.  Always open write
side as a client.  Open dummy client when writing and can't connect.
(wait): Rework.  Implement fifo_wait_for_next_client.  Handle signals during
connect better.  Add new fifo_wait_for_server code which polls
(sigh) waiting for server.
(fhandler_fifo::raw_read): Handle transition states when one client closes and
another is available.
(fhandler_fifo::close): Define.
(fhandler_fifo::dup): Ditto.
(fhandler_fifo::close_on_exec): Ditto.
@
text
@d3 2
a4 2
   Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2008, 2009
   Red Hat, Inc.
d82 2
a83 1
			      OBJ_CASE_INSENSITIVE | OBJ_INHERIT,
@


1.54
log
@	Throughout avoid having to initialize constant UNICODE_STRINGs.
	* globals.cc: Define constant UNICODE_STRINGs and store in .rdata
	section.
	* fhandler_disk_file.cc: Throughout, use readonly UNICODE_STRINGs
	rather then initializing local UNICODE_STRING variable where
	applicable.
	* fhandler_mem.cc (fhandler_dev_mem::open): Ditto.
	* flock.cc (inode_t::inode_t): Ditto.
	* mmap.cc: Ditto.
	* syscalls.cc: Ditto.
	* mount.cc (fs_info::update): Ditto.
	* path.cc: Ditto.

	* ntdll.h (RtlEqualUnicodePathPrefix): Redefine to take prefix as
	UNICODE_STRING.
	(RtlEqualUnicodePathSuffix): Redefine to take suffix as UNICODE_STRING.
	* fhandler_disk_file.cc: Accommodate throughout.
	* mount.cc (fs_info::update): Ditto.
	* path.cc (cwdstuff::set): Ditto.
	* syscalls.cc: Ditto.
@
text
@d116 1
a116 1
int
@


1.53
log
@Remove unneeded header files from source files throughout.  Update copyrights
where appropriate.
* globals.cc: New file for generic global variables.
* mkglobals_h: New file to generate globals.h.
* mkstatic: New Script used to build a (currently non-working) static
libcygwin_s.a.
* Makefile.in: Add unused rule to build a non-working libcygwin_s.a.
(DLL_OFILES): Add globals.o.  Make all objects rely on globals.h.
(globals.h): New target.  Generate globals.h.
* cygtls.h: Honor new CYGTLS_HANDLE define to control when the HANDLE operator
is allowed in _cygtls.
* dcrt0.cc: Move most globals to globals.cc.
* init.cc: Ditto.
* environ.cc (strip_title_path): Remove now-unneeded extern.
* fhandler_serial.cc (fhandler_serial::open): Ditto.
* pinfo.cc: Ditto.
(commune_process): Ditto.
* shared.cc: Ditto.
* glob.cc: Ditto.
* strace.cc: Ditto.
* exceptions.cc: Define CYGTLS_HANDLE before including winsup.h.
* path.cc (stat_suffixes): Move here.
* security.h: Add forward class path_conv declaration.
* smallprint.cc (__small_vsprintf): Make a true c++ function.
(__small_sprintf): Ditto.
(small_printf): Ditto.
(console_printf): Ditto.
(__small_vswprintf): Ditto.
(__small_swprintf): Ditto.
* spawn.cc (spawn_guts): Remove _stdcall decoration in favor of regparm.
(hExeced): Move to globals.cc
* strfuncs.cc (current_codepage): Ditto.
(active_codepage): Ditto.
* sync.cc (lock_process::locker): Move here from dcrt0.cc.
* syscalls.cc (stat_suffixes): Move to path.cc.
* tty.cc (tty::create_master): Uncapitalize fatal warning for consistency.
* winsup.h: Include globals.h to declare most of the grab bag list of globals
which were previously defined here.
* mount.h: Move USER_* defines back to shared_info.h.
* speclib: Force temporary directory cleanup.
@
text
@a79 3
  UNICODE_STRING memstr;
  RtlInitUnicodeString (&memstr, L"\\device\\physicalmemory");

d81 1
a81 1
  InitializeObjectAttributes (&attr, &memstr,
@


1.52
log
@Remove unneeded header files from source files throughout.
@
text
@d3 2
a4 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2005 Red Hat, Inc.
a15 1
#include "security.h"
@


1.51
log
@	* fhandler_mem.cc (fhandler_dev_mem::open): Fix comment.
	* wincap.cc (has_physical_mem_access): Reflect the fact that physical
	memory access has been made a protected operation beginning with
	2003 Server.
@
text
@a12 2
#include <sys/mman.h>
#include <ntdef.h>
@


1.50
log
@	* fhandler.cc (ACCFLAGS): Remove macro.
	(fhandler_base::get_default_fmode): Use O_ACCMODE instead of ACCFLAGS
	and or'ed read/write flags.
	(fhandler_base::open_9x): Use O_ACCMODE instead of or'ed read/write
	flags.
	(fhandler_base::open): Ditto.
	* fhandler_disk_file.cc (fhandler_base::open_fs): Ditto.
	* fhandler_mem.cc (fhandler_dev_mem::open): Ditto.
	* fhandler_raw.cc (fhandler_dev_raw::open): Ditto.
@
text
@d40 1
a40 1
      debug_printf ("%s is accessible under NT/W2K only", dev ().name);
@


1.49
log
@	* autoload.cc (NtCreateSection): Define.
	* cygheap.cc (_csbrk): Call getpagesize instead of getshmlba.
	* dcrt0.cc (dll_crt0_0): Call mmap_init.
	* external.cc (cygwin_internal): Call getpagesize instead of getshmlba.
	* fhandler.h (fhandler_base::mmap): Change access to prot parameter.
	(fhandler_base::fixup_mmap_after_fork): Ditto.
	(fhandler_disk_file::mmap): Ditto.
	(fhandler_disk_file::fixup_mmap_after_fork): Ditto.
	(fhandler_dev_mem::mmap): Ditto.
	(fhandler_dev_mem::fixup_mmap_after_fork): Ditto.
	* fhandler_mem.cc (fhandler_dev_mem::write): Call getsystempagesize
	instead of getpagesize.
	(fhandler_dev_mem::read): Ditto.
	(fhandler_dev_mem::fstat): Ditto.
	(fhandler_dev_mem::mmap): Move to mmap.cc.
	(fhandler_dev_mem::munmap): Ditto.
	(fhandler_dev_mem::msync): Ditto.
	(fhandler_dev_mem::fixup_mmap_after_fork): Ditto.
	* fhandler_proc.cc (format_proc_meminfo): Call getsystempagesize
	instead of getpagesize.
	* fhandler_process.cc (format_process_stat): Ditto.
	(format_process_status): Ditto.
	(get_mem_values): Ditto.
	* mmap.cc: Fix formatting.  Try to make more readable and modular.
	Take advantage of pagesize==granularity.
	(gen_protect): New static function to evaluate Windows
	protection bits from POSIX protection and flags.
	(gen_access): Ditto for Windows access mode.
	(VirtualProt9x): Wrapper function to call VirtualProtect on 9x.
	(VirtualProtNT): Ditto for NT.
	(VirtualProtEx9x): Ditto for VirtualProtectEx on 9x.
	(VirtualProtExNT): Ditto for NT.
	(CreateMapping9x): Wrapper function for creating a mapping handle on 9x.
	(CreateMappingNT): Ditto for NT.
	(MapView9x): Wrapper function to map a view on 9x.
	(MapViewNT): Ditto for NT.
	(mmap_funcs_9x): Structure containing function pointers to wrapper
	functions for 9x.
	(mmap_funcs_nt): Ditto for NT.
	(mmap_func): Pointer to wrapper functions used in subsequent code.
	(mmap_init): Initialize mmap_func depending on OS.
	(class mmap_record): Use sensible member names.  Add POSIX protection
	member. Drop Windows access flags member.  Constify more methods.
	Use accessors instead of direct member access inside of own methods.
	(mmap_record::gen_protect): Class wrapper to evaluate matching
	Windows protection bits.
	(mmap_record::gen_access): Ditto for Windows access flags.
	(mmap_record::compatible_flags): New function to check if flags are
	compatible with flags of existing map.
	(list::add_record): Drop offset and length arguments.
	(class map): Change counters to unsigned.  Match usage throughout.
	(mmapped_areas): Convert from pointer to global struct.
	(mmap_record::alloc_page_map): Simplify.
	(mmap_record::map_pages): Ditto.
	(mmap_record::fixup_page_map): Delete.
	(mmap64): Simplify.  Add workaround for Windows 98 bug.  Fix bug on
	NT that existing anonymous mappings weren't searched for a match.
	(munmap): Add workaround for Windows 98 bug.
	(msync): Simplify.
	(mprotect): Handle existing maps correctly.
	(mlock): Add local pagesize variable and enlightening comment.
	(fhandler_disk_file::mmap): Main functionality now in CreateMapping/
	MapView wrapper functions.
	(fhandler_disk_file::fixup_mmap_after_fork): Call MapView wrapper.
	(fhandler_dev_mem::mmap): Moved from fhandler_mem.cc.  Simplify by
	calling MapViewNT.
	(fhandler_dev_mem::munmap): Moved from fhandler_mem.cc.
	(fhandler_dev_mem::msync): Ditto.
	(fhandler_dev_mem::fixup_mmap_after_fork): Ditto.  Call MapViewNT.
	(fixup_mmaps_after_fork): Restructure and hopefully speed up loop for
	setting protection and memory content on MAP_PRIVATE maps.
	* ntdll.h (AT_ROUND_TO_PAGE): Remove define.
	(AT_EXTENDABLE_FILE): Add define.
	(NtCreateSection): Add prototype.
	* syscalls.cc (getpagesize): Return granularity as pagesize now.
	(getsystempagesize): New function to retrieve "real" pagesize.
	(getshmlba): Delete since it's replaced by getpagesize now.
	* wincap.h (wincaps::has_mmap_alignment_bug): New element.
	* wincap.cc: Implement above element throughout.
	* winsup.h (getshmlba): Drop prototype.
	(getsystempagesize): Add prototype.
	(mmap_init): Ditto.
	* include/sys/mman.h: (Not yet) define MAP_NORESERVE.
@
text
@d91 1
a91 1
  if ((flags & (O_RDONLY | O_WRONLY | O_RDWR)) == O_RDONLY)
d96 1
a96 1
  else if ((flags & (O_RDONLY | O_WRONLY | O_RDWR)) == O_WRONLY)
@


1.48
log
@	Revert erroneous checkin.
@
text
@d139 1
a139 1
  DWORD len = ulen + getpagesize () - 1;
d191 1
a191 1
  DWORD len = ulen + getpagesize () - 1;
a253 139
HANDLE
fhandler_dev_mem::mmap (caddr_t *addr, size_t len, DWORD access,
			int flags, _off64_t off)
{
  if (off >= mem_size
      || (DWORD) len >= mem_size
      || off + len >= mem_size)
    {
      set_errno (EINVAL);
      syscall_printf ("-1 = mmap(): illegal parameter, set EINVAL");
      return INVALID_HANDLE_VALUE;
    }

  UNICODE_STRING memstr;
  RtlInitUnicodeString (&memstr, L"\\device\\physicalmemory");

  OBJECT_ATTRIBUTES attr;
  InitializeObjectAttributes (&attr, &memstr,
			      OBJ_CASE_INSENSITIVE | OBJ_INHERIT,
			      NULL, NULL);

  ACCESS_MASK section_access;
  ULONG protect;

  if (access & FILE_MAP_COPY)
    {
      section_access = SECTION_MAP_READ | SECTION_MAP_WRITE;
      protect = PAGE_WRITECOPY;
    }
  else if (access & FILE_MAP_WRITE)
    {
      section_access = SECTION_MAP_READ | SECTION_MAP_WRITE;
      protect = PAGE_READWRITE;
    }
  else
    {
      section_access = SECTION_MAP_READ;
      protect = PAGE_READONLY;
    }

  HANDLE h;
  NTSTATUS ret = NtOpenSection (&h, section_access, &attr);
  if (!NT_SUCCESS (ret))
    {
      __seterrno_from_nt_status (ret);
      syscall_printf ("-1 = mmap(): NtOpenSection failed with %E");
      return INVALID_HANDLE_VALUE;
    }

  PHYSICAL_ADDRESS phys;
  void *base = *addr;
  DWORD dlen = len;

  phys.QuadPart = (ULONGLONG) off;

  if ((ret = NtMapViewOfSection (h,
				 INVALID_HANDLE_VALUE,
				 &base,
				 0L,
				 dlen,
				 &phys,
				 &dlen,
				 ViewShare /*??*/,
				 0,
				 protect)) != STATUS_SUCCESS)
    {
      __seterrno_from_nt_status (ret);
      syscall_printf ("-1 = mmap(): NtMapViewOfSection failed with %E");
      return INVALID_HANDLE_VALUE;
    }
  if ((flags & MAP_FIXED) && base != *addr)
    {
      set_errno (EINVAL);
      syscall_printf ("-1 = mmap(): address shift with MAP_FIXED given");
      NtUnmapViewOfSection (INVALID_HANDLE_VALUE, base);
      return INVALID_HANDLE_VALUE;
    }

  *addr = (caddr_t) base;
  return h;
}

int
fhandler_dev_mem::munmap (HANDLE h, caddr_t addr, size_t len)
{
  NTSTATUS ret;
  if (!NT_SUCCESS (ret = NtUnmapViewOfSection (INVALID_HANDLE_VALUE, addr)))
    {
      __seterrno_from_nt_status (ret);
      return -1;
    }
  CloseHandle (h);
  return 0;
}

int
fhandler_dev_mem::msync (HANDLE h, caddr_t addr, size_t len, int flags)
{
  return 0;
}

bool
fhandler_dev_mem::fixup_mmap_after_fork (HANDLE h, DWORD access, int flags,
					 _off64_t offset, DWORD size,
					 void *address)
{
  DWORD ret;
  PHYSICAL_ADDRESS phys;
  void *base = address;
  DWORD dlen = size;
  ULONG protect;

  if (access & FILE_MAP_COPY)
    protect = PAGE_WRITECOPY;
  else if (access & FILE_MAP_WRITE)
    protect = PAGE_READWRITE;
  else
    protect = PAGE_READONLY;

  phys.QuadPart = (ULONGLONG) offset;

  if ((ret = NtMapViewOfSection (h,
				 INVALID_HANDLE_VALUE,
				 &base,
				 0L,
				 dlen,
				 &phys,
				 &dlen,
				 ViewShare /*??*/,
				 0,
				 protect)) != STATUS_SUCCESS)
    {
      __seterrno_from_nt_status (ret);
      syscall_printf ("-1 = fixup_mmap_after_fork(): NtMapViewOfSection failed with %E");
      return false;
    }
  return base == address;
}

d258 1
a258 1
  buf->st_blksize = getpagesize ();
@


1.47
log
@	* fhandler.h (class fhandler_dev_raw): Delete current_position and
	eof_detected status flag.  Delete is_eom and is_eof methods.
	Move drive_size, bytes_per_sector, eom_detected status flag, as well
	as the methods read_file, write_file, raw_read and raw_write to ...
	(class fhandler_dev_floppy): ... here. Remove is_eom and is_eof
	methods.  Add dup method.
	* fhandler_floppy.cc (IS_EOM): New macro.
	(fhandler_dev_floppy::is_eom): Remove.
	(fhandler_dev_floppy::is_eof): Remove.
	(fhandler_dev_floppy::fhandler_dev_floppy): Initialize status flags.
	(fhandler_dev_floppy::get_drive_info): Only call EX functions on
	systems supporting them and stop suffering strange delays.
	(fhandler_dev_floppy::read_file): Move here, drop setting
	current_position.
	(fhandler_dev_floppy::write_file): Move here, drop setting
	current_position.
	(fhandler_dev_floppy::open): Rearrange comment.
	(fhandler_dev_floppy::dup): New method.
	(fhandler_dev_floppy::get_current_position): New inline method.  Use
	instead of former current_position were appropriate.
	(fhandler_dev_floppy::raw_read): Move here.  Drop EOF handling.
	(fhandler_dev_floppy::raw_write): Move here.  Drop EOF handling.
	(fhandler_dev_floppy::lseek): Remove useless conditions.  Convert
	sector_aligned_offset to LARGE_INTEGER to improve SetFilePointer call.
	(fhandler_dev_floppy::ioctl): Move blocksize check in RDSETBLK case
	to here.
	* fhandler_raw.cc (fhandler_dev_raw::is_eom): Remove.
	(fhandler_dev_raw::is_eof): Remove.
	(fhandler_dev_raw::write_file): Remove.
	(fhandler_dev_raw::read_file): Remove.
	(fhandler_dev_raw::raw_read): Remove.
	(fhandler_dev_raw::raw_write): Remove.
	(fhandler_dev_raw::dup): Drop copying removed members.
	(fhandler_dev_raw::ioctl): Drop blocksize testing.
	* wincap.h: Implement has_disk_ex_ioctls throughout.
	* wincap.cc: Ditto.
	(wincap_vista): Preliminary wincaps for Windows Vista/Longhorn.
	(wincapc::init): Add Vista/Longhorn handling.
@
text
@d411 1
a411 1
fhandler_dev_mem::dup (fhandler_base *child, HANDLE from_proc)
d413 1
a413 1
  int ret = fhandler_base::dup (child, from_proc);
@


1.46
log
@Remove some more unneeded 'return;'s throughout.
@
text
@d411 1
a411 1
fhandler_dev_mem::dup (fhandler_base *child)
d413 1
a413 1
  int ret = fhandler_base::dup (child);
@


1.45
log
@Change foo (void) to foo () for all c++ functions throughout.  Remove all
fhandler_*::dump functions throughout.
* fhandler.h (fhandler_dev_mem::close): Remove pass-through function in favor
of virtual method.
(handler_dev_raw::close): Ditto.
(fhandler_dev_clipboard::fixup_after_exec): New method.
* fhandler_dev_mem.cc (fhandler_dev_mem::close): Eliminate pass through
* fhandler_dev_raw.cc (fhandler_dev_raw::close): Ditto.
* fhandler_clipboard.cc (fhandler_dev_clipboard::close): Don't go to extra
effort when execing.
(fhandler_dev_clipboard::fixup_after_exec): New function.
* fhandler_console.cc (fhandler_console::close): Don't do "extra stuff" when we
know we're execing.
* fhandler_disk_file.cc (fhandler_disk_file::close): Ditto.
* fhandler_dsp.cc (fhandler_dev_dsp::close): Ditto.
* fhandler_fifo.cc (fhandler_fifo.cc::close): Ditto.  function in favor of base
function.
* fhandler_random.cc (fhandler_dev_random::close): Ditto.
* fhandler_registry.cc (fhandler_registry::close): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::close): Ditto.
* fhandler_virtual.cc (fhandler_virtual::close): Ditto.
* pinfo.cc (proc_waiter): Remove unneeded hExeced declaration.
* sigproc.cc: Ditto.
* winsup.h (hExeced): Define here.
* fhandler_virtual.cc (fhandler_virtual::fixup_after_exec): Just call close()
to reinitialize things to known state.
@
text
@a219 1
  return;
@


1.44
log
@	* cygerrno.h (__seterrno_from_nt_status): Define. Always set Win32
	error code as well as errno. Use throughout where errno is set from
	NT status.
	(set_errno): Evaluate val only once.
	* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Fix typo in
	debug output.
	* fhandler_mem.cc (fhandler_dev_mem::open): Rely on
	__seterrno_from_nt_status setting Win32 error code in debug output.
	* fhandler_proc.cc (format_proc_uptime): Ditto.
	(format_proc_stat): Ditto.
	* fhandler_process.cc (format_process_stat): Ditto.
	* sysconf.cc (sysconf): Ditto.
@
text
@d30 1
a30 1
fhandler_dev_mem::~fhandler_dev_mem (void)
a222 6
int
fhandler_dev_mem::close (void)
{
  return fhandler_base::close ();
}

a424 6

void
fhandler_dev_mem::dump ()
{
  paranoid_printf ("here, fhandler_dev_mem");
}
@


1.43
log
@* wininfo.h (wininfo::timer_active): Delete.
(wininfo::itv): Ditto.
(wininfo::start_time): Ditto.
(wininfo::window_started): Ditto.
(wininfo::getitimer): Ditto.
(wininfo::setitimer): Ditto.
(wininfo::wininfo): Ditto.
(wininfo::lock): New method.
(wininfo::release): Ditto.
* window.cc: Use new lock/acquire wininfo methods throughout.
(wininfo::wininfo): Delete
(wininfo::getitimer): Ditto.
(wininfo::setitimer): Ditto.
(getitimer): Ditto.
(setitimer): Ditto.
(ualarm): Ditto.
(alarm): Ditto.
(wininfo::lock): Define new function.
(wininfo::release): Ditto.
(wininfo::process): Delete WM_TIMER handling.
* timer.cc (struct timetracker): Delete it, flags.  Add it_interval,
interval_us, sleepto_us, running, init_muto(), syncthread, and gettime().
(ttstart): Make NO_COPY.
(lock_timer_tracker): New class.
(timer_tracker::timer_tracker): Distinguish ttstart case.
(timer_tracker::~timer_tracker): New destructor.  Clean out events, and reset
magic.
(timer_tracker::init_muto): New method.
(to_us): Round up as per POSIX.
(timer_thread): Reorganize to match timer_tracker::settime and
timer_tracker::gettime.  Call sig_send without wait.  Call auto_release.
(timer_tracker::settime): Reorganize logic to avoid race.  Call gettime to
recover old value.
(timer_tracker::gettime): New method.
(timer_create): Properly set errno on invalid timerid.  Use new
lock_timer_tracker method.
(timer_delete): Ditto.  Simplify code slightly.
(timer_gettime): New function.
(fixup_timers_after_fork): Reinit ttstart.
(getitimer): New implementation.
(setitimer): Ditto.
(ualarm): Ditto.
(alarm): Ditto.
* cygwin.din: Export timer_gettime.
* winsup.h: Remove has has_visible_window_station declaration.
* Makefile.in (DLL_OFILES): Add lsearch.o.
* cygthread.h (cygthread::notify_detached): New element.
(cygthread::cygthread): Take optional fourth argument signifying event to
signal on thread completion.
* cygthread.cc (cygthread::stub): Signal notify_detached event, if it exists.
(cygthread::cygthread): Initialize notify_detached from fourth argument.
(cygthread::detach): Wait for notify_detached field is present.
* lsearch.cc: New file.
* search.h: Ditto.
* include/cygwin/version.h: Bump API minor number to 126.
* cygwin.din: Export lsearch, lfind.
@
text
@d51 2
a52 3
	  __seterrno_from_win_error (RtlNtStatusToDosError (ret));
	  debug_printf("NtQuerySystemInformation: ret %d, Dos(ret) %d",
		       ret, RtlNtStatusToDosError (ret));
d111 1
a111 1
      __seterrno_from_win_error (RtlNtStatusToDosError (ret));
d153 1
a153 1
      __seterrno_from_win_error (RtlNtStatusToDosError (ret));
d161 1
a161 1
      __seterrno_from_win_error (RtlNtStatusToDosError (ret));
d205 1
a205 1
      __seterrno_from_win_error (RtlNtStatusToDosError (ret));
d214 1
a214 1
      __seterrno_from_win_error (RtlNtStatusToDosError (ret));
d305 1
a305 1
      __seterrno_from_win_error (RtlNtStatusToDosError (ret));
d327 1
a327 1
      __seterrno_from_win_error (RtlNtStatusToDosError (ret));
d349 1
a349 1
      __seterrno_from_win_error (RtlNtStatusToDosError (ret));
d393 1
a393 1
      __seterrno_from_win_error (RtlNtStatusToDosError (ret));
@


1.42
log
@* sigproc.cc (_pinfo::set_ctty): Move function
* pinfo.cc (_pinfo::set_ctty): to here.
* fhandler_mem.cc (fhandler_dev_mem::fstat): Don't fill out structure if this
is an on-disk device rather than an "auto" device.
* fhandler_raw.cc (fhandler_dev_raw::fstat): Ditto.
* path.cc (normalize_posix_path): Don't treat a standalone '//' as introducing
a UNC path.
(normalize_win32_path): Ditto.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003, 2004 Red Hat, Inc.
@


1.41
log
@	* fhandler.h (class fhandler_base): Declare fixup_mmap_after_fork
	with additional flags parameter.  Change offset parameter to _off64_t.
	(class fhandler_disk_file): Ditto.
	(class fhandler_dev_mem): Ditto.
	* fhandler_mem.cc (fhandler_dev_mem::fixup_mmap_after_fork):
	Accomodate new parameters.
	* mmap.cc: Include ntdll.h.
	(class mmap_record): Add flags member.
	(mmap_record::mmap_record): Add flags parameter.
	(mmap_record::get_flags): New method.
	(class map): Add next_anon_addr member to store next anonymous mapping
	address suggestion.
	(map::get_next_anon_addr): New method.
	(map::set_next_anon_addr): New method.
	(mmap64): Don't align offset and length to granularity in case of
	MAP_ANONYMOUS on NT.  Check for already existing mapping only on 9x.
	Call mmap_record::mmap_record with additional flags argument.
	(fhandler_base::fixup_mmap_after_fork): Accomodate new parameters.
	(fhandler_disk_file::mmap): Use NtMapViewOfSection with
	AT_ROUND_TO_PAGE flag for anonymous mappings on NT.  If addr is NULL,
	try to map adjacent to previous mapping.
	(fhandler_disk_file::fixup_mmap_after_fork): Add flags argument.
	Change offset parameter to _off64_t.  Use NtMapViewOfSection to
	re-create anonymous mappings on NT.
	(fixup_mmaps_after_fork): Accomodate new parameters when calling
	fhandler's fixup_mmaps_after_fork function.
	* ntdll.h (AT_ROUND_TO_PAGE): New define.
@
text
@a404 5
  buf->st_mode = S_IFCHR;
  if (wincap.has_physical_mem_access ())
    buf->st_mode |= S_IRUSR | S_IWUSR |
		    S_IRGRP | S_IWGRP |
		    S_IROTH | S_IWOTH;
d406 8
@


1.40
log
@Regularize most strace_prints throughout so that %E is always preceded by a
comma and elminate most uses of "foo = %s" to "foo %s".
@
text
@d364 3
a366 2
fhandler_dev_mem::fixup_mmap_after_fork (HANDLE h, DWORD access, DWORD offset,
					 DWORD size, void *address)
@


1.39
log
@	* fhandler_mem.cc (fhandler_dev_mem::fhandler_dev_mem): Move
	initialization of "mem_size" from here...
	(fhandler_dev_mem::open): ...to here.  Fix typo in FH_PORT case.
@
text
@d52 1
a52 1
	  debug_printf("NtQuerySystemInformation: ret = %d, Dos(ret) = %d",
@


1.38
log
@* debug.h (console_printf): Define for non-debugging condition.
* cygtls.h (_threadinfo::lock): Remove wait argument.
(_threadinfo::interrupt_setup): Remove retaddr argument.
* exceptions.cc (_threadinfo::interrupt_setup): Ditto.
(_threadinfo::interrupt_now): Accommodate change to interrupt_setup argument.
(setup_handler): Ditto.  Always lock sig stack prior to determining interrupt
method.
* gendef (_sigfe): Correct thinko regarding cmpxchg.
(_sigbe): Ditto.
(_threadinfo::lock): Ditto.
(_threadinfo::pop): Eliminate left-over stack unlock.
* sigproc.cc (proc_subproc): Chnage debugging output to printed warning.
@
text
@d28 9
a36 1
  /* Reading physical memory only supported on NT/W2K. */
d39 3
a41 2
      mem_size = 0;
      return;
d65 1
a65 1
  else if (dev () == FH_ZERO) /* /dev/port == First 64K of /dev/mem */
a73 15
    }
}

fhandler_dev_mem::~fhandler_dev_mem (void)
{
}

int
fhandler_dev_mem::open (int flags, mode_t)
{
  if (!wincap.has_physical_mem_access ())
    {
      set_errno (ENOENT);
      debug_printf ("%s is accessible under NT/W2K only", dev ().name);
      return 0;
@


1.37
log
@Change use of BOOL, TRUE, FALSE to bool, true, false, as appropriate,
throughout.
* tty.cc (tty::common_init): Remove call to SetKernelObjectSecurity and edit
some comments.
* cygheap.h (init_cygheap::ctty): Add new element.
* devices.in (device::parse): Remove special handling for /dev/tty.
* devices.cc: Regenerate.
* dtable.cc (build_fh_pc): Don't reset /dev/tty device.  Let the device opener
do that.
* fhandler_termios.cc (tty_min::set_ctty): Redefine to _pinfo class.
* fhandler_tty.cc (fhandler_tty_common::set_close_on_exec): Avoid setting
noninherit flag for ctty.
* tty.h: Move BOOLs to bools.
(tty_min::set_ctty): Redeclare to _pinfo class.
* pinfo.cc (_pinfo::set_ctty): Define new function based on tty_min::set_ctty.
Change first argument from tty number to tty_min class.
* pinfo.h (_pinfo::set_ctty): Declare.
* fhandler_console.cc (fhandler_console::get_tty_stuff): Reflect move of
set_ctty to _pinfo class.
* fhandler_tty.cc (fhandler_tty_slave::open): Treat FH_TTY specially.  Use
saved cygheap value if it exists.  Otherwise convert to real device and save on
first time open.
(fhandler_tty_common::dup): Potentially set controlling tty if duping a slave
tty.
* syscalls.cc (setsid): Close controlling tty in cygheap.
* tty.cc: Change some BOOLs to bools.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002 Red Hat, Inc.
@


1.36
log
@* devices.cc: New file.
* devices.gperf: New file.
* devices.shilka: New file.
* cygwin-gperf: New file.
* cygwin-shilka: New file.
* fhandler_fifo.cc: New file.
* fhandler_nodevice.cc : New file.  Reorganize headers so that path.h precedes
fhandler.h throughout.  Remove device argument and unit arguments from fhandler
constructors throughout.  Remove pc arguments to fhandler functions and use
internal pc element instead, throughout.  Use dev element in pc throughout.
Use major/minor elements rather than units and device numbers previously in
fhandler class.  Use correct methods for fhandler file names rather than
directly accessing file name variables, throughout.
* Makefile.in (DLL_OFILES): Add devices.o, fhandler_fifo.o
* dcrt0.cc (dll_crt0_1): Call device::init.
* devices.h: Renumber devices based on more Linux-like major/minor numbers.
Add more devices.  Declare standard device storage.
(device): Declare struct.
* dir.cc (opendir): Use new 'build_fh_name' to construct a fhandler_* type.
* dtable.cc (dtable::get_debugger_info): Ditto.
(cygwin_attach_handle_to_fd): Ditto.
(dtable::release): Remove special FH_SOCKET case in favor of generic
"need_fixup_before" test.
(dtable::init_std_file_from_handle): Use either build_fh_dev or build_fh_name
to build standard fhandler.
(dtable::build_fh_name): Renamed from dtable::build_fhandler_from_name.  Move
out of dtable class.  Don't accept a path_conv argument.  Just build it here
and pass it to:
(build_fh_pc): Renamed from dtable::build_fhandler.  Move out of dtable class.
Use intrinsic device type in path_conv to create new fhandler.
(build_fh_dev): Renamed from dtable::build_fhandler.  Move out of dtable class.
Simplify arguments to just take new 'device' type and a name.  Just return
pointer to fhandler rather than trying to insert into dtable.
(dtable::dup_worker): Accommodate above build_fh name changes.
(dtable::find_fifo): New (currently broken) function.
(handle_to_fn): Use strechr for efficiency.
* dtable.h: Reflect above build_fh name changes and argument differences.
(fhandler_base *&operator []): Return self rather than copy of self.
* fhandler.cc (fhandler_base::operator =): Use pc element to set normalized
path.
(fhandler_base::set_name): Ditto.
(fhandler_base::raw_read): Use method to access name.
(fhandler_base::write): Correctly use get_output_handle rather than get_handle.
(handler_base::device_access_denied): New function.
(fhandler_base::open): Eliminate pc argument and use pc element of
fhandler_base throughout.
(fhandler_base::fstat): Detect if device is based in filesystem and use
fstat_fs to calculate stat, if so.
(fhandler_base::fhandler_base): Eliminate handling of file names and, instead,
just free appropriate component from pc.
(fhandler_base::opendir): Remove path_conv parameter.
* fhandler.h: Remove all device flags.
(fhandler_base::pc): New element.
(fhandler_base::set_name): Change argument to path_conv.
(fhandler_base::error): New function.
(fhandler_base::exists): New function.
(fhandler_base::pc_binmode): New function.
(fhandler_base::dev): New function.
(fhandler_base::open_fs): New function.
(fhandler_base::fstat_fs): New function.
(fhandler_base::fstat_by_name): New function.
(fhandler_base::fstat_by_handle): New function.
(fhandler_base::isfifo): New function.
(fhandler_base::is_slow): New function.
(fhandler_base::is_auto_device): New function.
(fhandler_base::is_fs_special): New function.
(fhandler_base::device_access_denied): New function.
(fhandler_base::operator DWORD&): New operator.
(fhandler_base::get_name): Return normalized path from pc.
(fhandler_base::get_win32_name): Return windows path from pc.
(fhandler_base::isdevice): Renamed from is_device.
(fhandler_base::get_native_name): Return device format.
(fhandler_fifo): New class.
(fhandler_nodevice): New class.
(select_stuff::device_specific): Remove array.
(select_stuff::device_specific_pipe): New class element.
(select_stuff::device_specific_socket): New class element.
(select_stuff::device_specific_serial): New class element.
(select_stuff::select_stuff): Initialize new elements.
* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Move to base class
from fhandler_disk_file.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_disk_file::open): Move most functionality into
fhandler_base::open_fs.
(fhandler_base::open_fs): New function.
(fhandler_disk_file::close): Move most functionality into
fhandler_base::close_fs.
(fhandler_base::close_fs): New function.
* fhandler_mem.cc (fhandler_dev_mem::open): Use device name in debugging
output.
* fhandler_socket.cc (fhandler_socket::set_connect_secret): Copy standard
urandom device into appropriate place.
(fhandler_socket::accept): Reflect change in fdsock return value.
* fhandler_tty.cc: See "throughouts" above.
* net.cc: Accommodate fdsock change throughout.
(fdsock): Return success or failure, accept fd argument and device argument.
* path.cc (symlink_info::major): New element.
(symlink_info::minor): New element.
(symlink_info::parse_device): Declare new function.
(fs_info::update): Accommodate changes in path_conv class.
(path_conv::fillin): Ditto.
(path_conv::return_and_clear_normalized_path): Eliminate.
(path_conv::set_normalized_path): New function.
(path_conv::path_conv): Set info in dev element.  Use path_conv methods Check
for FH_FS rather than FH_BAD to indicate when to fill in filesystem stuff.
where appropriate rather than direct access.  Use set_normalized_path to set
normalized path.
(windows_device_names): Eliminate.
(get_dev): Ditto.
(get_raw_device_number): Ditto.
(get_device_number): Ditto.
(win32_device_name): Call new device name parser to do most of the heavy
lifting.
(mount_info::conv_to_win32_path): Fill in dev field as appropriate.
(symlink_worker): Handle new device files.
(symlink_info::check): Ditto.
(symlink_info::parse_device): Define new function.
* path.h (executable_states): Move here from fhandler.h.
(fs_info): Rename variables to *_storage and create methods for accessing same.
(path_conv): Add dev element, remove devn and unit and adjust inline methods to
accommodate.
(set_normalized_path): Declare new function.
* pinfo.cc (_pinfo::commune_recv): Add broken support for handling fifos.
(_pinfo::commune_send): Ditto.
* pipe.cc (fhandler_pipe::close): check for existence of handle before closing
it.
(handler_pipe::create): Rename from make_pipe.  Change arguments to accept
fhandler_pipe array.  Accommodate fifos.
(pipe): Rework to deal with fhandler_pipe::create changes.
(_pipe): Ditto.
* select.cc: Use individual device_specific types throughout rather than
indexing with obsolete device number.
(set_bits): Use is_socket call rather than checking device number.
* shared_info.h (CURR_MOUNT_MAGIC): Update.
(conv_to_win32_path): Reflect addition of device argument.
* syscalls.cc (mknod_worker): New function.
(open): Use build_fh_name to build fhandler.
(chown_worker): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(chmod_device): New function.
(chmod): Detect if this is an 'auto' device rather than an on-filesystem device
and handle appropriately.  Use chmod_device to set mode of in-filesystem
devices.
(stat_worker): Eliminate path_conv argument.  Call build_fh_name to construct
fhandler.  Use fh->error() rather than pc->error to detect errors in fhandler
construction.
(access_worker): New function pulled from access.  Accommodate in-filesystem
devices.
(access): Use access_worker.
(fpathconf): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(mknod_worker): New function.
(mknod32): New function.
(chroot): Free normalized path -- assuming it was actually cmalloced.
* tty.cc (create_tty_master): Tweak for new device class.
(tty::common_init): Ditto.
* winsup.h (stat_worker): Remove.
(symlink_worker): Declare.
* exceptions.cc (set_process_mask): Just call sig_dispatch_pending and don't
worry about pending_signals since sig_dispatch_pending should always do the
right thing now.
(sig_handle): Reorganize SIGCONT handling to more closely conform to SUSv3.
* pinfo.h: Move __SIG enum to sigproc.h.
(PICOM_FIFO): New enum element.
(_pinfo): Remove 'thread2signal' stuff throughout class.
(_pinfo::commune_send): Make varargs.
(_pinfo::sigtodo): Eliminate.
(_pinfo::thread2signal): Ditto.
* signal.cc (kill_worker): Eliminate call to setthread2signal.
* sigproc.cc (local_sigtodo): Eliminate.
(getlocal_sigtodo): Ditto.
(sigelem): New class.
(pending_signals): New class.
(sigqueue): New variable, start of sigqueue linked list.
(sigcatch_nonmain): Eliminate.
(sigcatch_main): Eliminate.
(sigcatch_nosync): Eliminate.
(sigcomplete_nonmain): Eliminate.
(pending_signals): Eliminate.
(sig_clear): Call signal thread to clear pending signals, unless already in
signal thread.
(sigpending): Call signal thread to get pending signals.
(sig_dispatch_pending): Eliminate use of pending_signals and just check
sigqueue.
(sigproc_terminate): Eliminate all of the obsolete semaphore stuff.  Close
signal pipe handle.
(sig_send): Eliminate all of the obsolete semaphore stuff and use pipe to send
signals.
(getevent): Eliminate.
(pending_signals::add): New function.
(pending_signals::del): New function.
(pending_signals::next): New function.
(wait_sig): Eliminate all of the obsolete semaphore stuff.  Use pipe to
communicate and maintain a linked list of signals.
* sigproc.h: Move __SIG defines here.  Add __SIGPENDING.
(sig_dispatch_pending): Remove "C" specifier.
(sig_handle): Accept a mask argument.
* thread.cc: Remove signal handling considerations throughout.
@
text
@d369 1
a369 1
BOOL
d401 1
a401 1
      return FALSE;
@


1.35
log
@Remove left coercion throughout.
@
text
@d18 1
d25 2
a26 2
fhandler_dev_mem::fhandler_dev_mem (int nunit)
  : fhandler_base (FH_MEM), unit (nunit)
d35 1
a35 1
  if (unit == 1) /* /dev/mem */
d51 1
a51 1
  else if (unit == 2) /* /dev/kmem - Not yet supported */
d56 1
a56 1
  else if (unit == 4) /* /dev/port == First 64K of /dev/mem */
d73 1
a73 1
fhandler_dev_mem::open (path_conv *, int flags, mode_t)
d78 1
a78 4
      debug_printf ("%s is accessible under NT/W2K only",
		    unit == 1 ? "/dev/mem" :
		    unit == 2 ? "/dev/kmem" :
				"/dev/port");
d407 1
a407 1
fhandler_dev_mem::fstat (struct __stat64 *buf, path_conv *pc)
d409 1
a409 1
  fhandler_base::fstat (buf, pc);
@


1.34
log
@Throughout, remove "include <errno.h>" from files which already include
cygerrno.h.
* include/cygwin/config.h (__DYNAMIC_REENT__): Define.
* include/cygwin/version.h: Bump API minor version.
* cygwin.din: Export __getreent
* cygerrno.h: Include errno.h.  Fix places where _impure_ptr is used directly
to store the errno value.
* debug.cc (__set_errno): Ditto.
* errno.cc: Remove _RRENT_ONLY define to get errno.cc compiled.
* signal.cc: Rename _reent_clib to _REENT throughout.
* thread.h (reent_clib): Remove prototype.
* thread.cc (reent_clib): Rename reent_clib to __getreent.  Return _impure_ptr
until MTinterface is initialized.
(reent_winsup): Fix a possible SEGV when _r == NULL.  Return NULL instead.
* MTinterface::fixup_after_fork: Switch reent back to _impure_ptr to keep
signal handling running when fork is called from a thread other than the
mainthread.
@
text
@d190 1
a190 1
      (ssize_t) ulen = -1;
d215 1
a215 1
      (ssize_t) ulen = -1;
d224 1
a224 1
      (ssize_t) ulen = -1;
@


1.33
log
@	* dir.cc: Change __off32_t to _off_t and __off64_t to _off64_t
	throughout.
	* fhandler.cc: Ditto.
	* fhandler.h: Ditto.
	* fhandler_clipboard.cc: Ditto.
	* fhandler_disk_file.cc: Ditto.
	* fhandler_dsp.cc: Ditto.
	* fhandler_floppy.cc: Ditto.
	* fhandler_mem.cc: Ditto.
	* fhandler_proc.cc: Ditto.
	* fhandler_process.cc: Ditto.
	* fhandler_random.cc: Ditto.
	* fhandler_registry.cc: Ditto.
	* fhandler_tape.cc: Ditto.
	* fhandler_termios.cc: Ditto.
	* fhandler_virtual.cc: Ditto.
	* fhandler_zero.cc: Ditto.
	* mmap.cc: Ditto.
	* pipe.cc: Ditto.
	* syscalls.cc: Ditto.
	* winsup.h: Ditto.
	* include/cygwin/stat.h: Ditto.
	* include/cygwin/types.h: Ditto.  Remove definition of __off32_t
	and __off64_t.
@
text
@a11 1
#include <errno.h>
@


1.32
log
@Eliminate most unneeded this-> pointers throughout.
@
text
@d239 2
a240 2
__off64_t
fhandler_dev_mem::lseek (__off64_t offset, int whence)
d273 1
a273 1
			int flags, __off64_t off)
@


1.31
log
@Throughout, change fhandler_*::read and fhandler_*::raw_read to void functions
whose second arguments are both the lenght and the return value.
* fhandler.cc (fhandler_base::read): Rework slightly to use second argument as
input/output.  Tweak CRLF stuff.
(fhandler_base::readv): Accommodate fhandler_*::read changes.
* cygthread.h (cygthread::detach): Declare as taking optional handle argument.
(cygthread::detach): When given a handle argument, wait for the handle to be
signalled before waiting for thread to detach.  Return true when signal
detected.
@
text
@d412 1
a412 1
  this->fhandler_base::fstat (buf, pc);
@


1.31.6.1
log
@merge from trunk
@
text
@d25 2
a26 2
fhandler_dev_mem::fhandler_dev_mem ()
  : fhandler_base ()
d35 1
a35 1
  if (dev == FH_MEM) /* /dev/mem */
d51 1
a51 1
  else if (dev == FH_KMEM) /* /dev/kmem - Not yet supported */
d56 1
a56 1
  else if (dev == FH_ZERO) /* /dev/port == First 64K of /dev/mem */
d78 4
a81 1
      debug_printf ("%s is accessible under NT/W2K only", dev.name);
@


1.31.6.2
log
@merge from trunk
@
text
@d409 1
a409 1
  fhandler_base::fstat (buf, pc);
@


1.31.6.3
log
@merge from trunk.
Reorganize includes throughout so that path.h comes before fhandler.h.
Eliminate path_conv arguments from fhandler functions which take them,
throughout.  Use get_name() and get_win32_name() consistently throughout for
fhandler objects.  Use build_fh_* functions throughout, where appropriate.
* fhandler.h (fhandler_base): Store path_conv struct here.  Remove dev.
* dtable.h (dtable::build_fhandler_*): Remove.
(build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* dtable.cc (build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* fhandler.h (fhandler_base::set_name): Change argument.
* fhandler.cc (fhandler_base::set_name): Just accept a path_conv argument.
(executable_states): Move.
* path.h (executable_state): Accept.
* syscalls.cc (stat_worker): Make static.
* winsup.h (stat_worker): Remove definition.
@
text
@a18 1
#include "path.h"
d35 1
a35 1
  if (dev () == FH_MEM) /* /dev/mem */
d51 1
a51 1
  else if (dev () == FH_KMEM) /* /dev/kmem - Not yet supported */
d56 1
a56 1
  else if (dev () == FH_ZERO) /* /dev/port == First 64K of /dev/mem */
d73 1
a73 1
fhandler_dev_mem::open (int flags, mode_t)
d78 1
a78 1
      debug_printf ("%s is accessible under NT/W2K only", dev ().name);
d407 1
a407 1
fhandler_dev_mem::fstat (struct __stat64 *buf)
d409 1
a409 1
  fhandler_base::fstat (buf);
@


1.31.6.4
log
@merge from trunk
@
text
@d237 2
a238 2
_off64_t
fhandler_dev_mem::lseek (_off64_t offset, int whence)
d271 1
a271 1
			int flags, _off64_t off)
@


1.31.6.5
log
@merge from trunk
@
text
@d12 1
@


1.31.6.6
log
@merge from trunk
@
text
@d188 1
a188 1
      ulen = (size_t) -1;
d213 1
a213 1
      ulen = (size_t) -1;
d222 1
a222 1
      ulen = (size_t) -1;
@


1.31.4.1
log
@Eliminate unit argument and special unit fields from fhandler classes and
constructors throughout.
* fhandler_mem.cc (fhandler_dev_mem::fhandler_dev_mem): Make decisions based on
specific device type rather than unit number.
* fhandler_random.cc (fhandler_dev_random::write): Ditto.
(fhandler_dev_random::read): Ditto.
* fhandler_socket.cc (fhandler_socket::set_connect_secret): Set device type to
"urandom" after construction of entropy_source.
* path.cc (windows_devices_names): Remove.
@
text
@d25 2
a26 2
fhandler_dev_mem::fhandler_dev_mem ()
  : fhandler_base (FH_MEM)
d35 1
a35 1
  if (dev == FH_MEM) /* /dev/mem */
d51 1
a51 1
  else if (dev == FH_KMEM) /* /dev/kmem - Not yet supported */
d56 1
a56 1
  else if (dev == FH_ZERO) /* /dev/port == First 64K of /dev/mem */
d78 4
a81 1
      debug_printf ("%s is accessible under NT/W2K only", dev.name);
@


1.31.4.2
log
@Eliminate device number argument from fhandler constructors throughout.
@
text
@d26 1
a26 1
  : fhandler_base ()
@


1.30
log
@More GNUify non-GNU formatted functions calls throughout.
@
text
@d179 2
a180 2
int __stdcall
fhandler_dev_mem::read (void *ptr, size_t ulen)
d183 4
a186 1
    return 0;
d191 2
a192 1
      return -1;
d216 2
a217 1
      return -1;
d225 2
a226 1
      return -1;
d230 1
a230 1
  return ulen;
@


1.29
log
@* fhandler.cc (fhandler_base::dup): Don't set handle on failure.  Caller has
already taken care of that.
* fhandler_console.cc (fhandler_console::open): Initialize handles to NULL.
(fhandler_console::close): Ditto.  GNUify non-GNU formatted functions calls
throughout.
@
text
@d119 1
a119 1
  if (!NT_SUCCESS(ret))
d169 1
a169 1
  if (!NT_SUCCESS(ret = NtUnmapViewOfSection (INVALID_HANDLE_VALUE, viewmem)))
d217 1
a217 1
  if (!NT_SUCCESS(ret = NtUnmapViewOfSection (INVALID_HANDLE_VALUE, viewmem)))
d307 1
a307 1
  if (!NT_SUCCESS(ret))
d351 1
a351 1
  if (!NT_SUCCESS(ret = NtUnmapViewOfSection (INVALID_HANDLE_VALUE, addr)))
@


1.28
log
@Remove fcntl.h includes throughout.
* fhandler.h: Move fcntl.h include here.
(fhandler_base::set_flags): Accept supplied_bin argument.  Make non-inlined.
* dtable.cc (dtable::init_std_file_from_handle): Just use binmode from pc.
(reset_to_open_binmode): Use set_flags.
* cygwin.din (open): Avoid newlib wrapper.
(read): Ditto.
(unlink): Ditto.
(write): Ditto.
* fhandler.cc (fhandler_base::set_flags): Accept supplied_bin argument.  Make
binmode decisions here.
(fhandler_base::open): Avoid using pc if it is NULL.  Eliminate binmode logic.
Just call set_flags with binmode argument.
(fhandler_base::init): Call set_flags with binmode argument.
* fhandler_clipboard.cc (fhandler_dev_clipboard::open): Ditto.
* fhandler_console.cc (fhandler_console::open): Ditto.
(fhandler_console::init): Force binary on open.
* fhandler_disk_file.cc (fhandler_disk_file::open): Don't set binmode here.
Let it happen in base class.
* fhandler_dsp.cc (fhandler_dev_dsp::open): Force binmode open.  Set return
value appropriately if unable to open.
* fhandler_proc.cc (fhandler_proc::open): Make sure flags are set before
open_status.
* fhandler_process.cc (fhandler_process::open): Ditto.
* fhandler_registry.cc (fhandler_registry::open): Ditto.
* fhandler_random.cc (fhandler_dev_random::fhandler_dev_random): Ditto.
* fhandler_raw.cc (fhandler_dev_raw::open): Force O_BINARY by default.
* fhandler_serial.cc (fhandler_serial::init): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::open): Ditto.
(fhandler_pty_master::open): Ditto.
* fhandler_virtual.cc (fhandler_virtual::open): Ditto.
* fhandler_windows.cc (fhandler_windows::open): Ditto.
* fhandler_zero.cc (fhandler_dev_zero::open): Ditto.
* net.cc (fdsock): Ditto.
* path.cc (path_conv::check): Avoid checking for extension when error or
directory.
(set_flags): Set PATH_TEXT explicitly, when appropriate.
(mount_info::conv_to_win32_path): Use set_flags() to set path flags.
* path.h (PATH_TEXT): New enum.
(path_conv::binmode): Return appropriate constant based on binmode.
* pipe.cc (make_pipe): Set binmode to O_TEXT xor O_BINARY.
* syscalls.cc (setmode_helper): Make debugging message a little clearer.
(setmode): Set binmode via set_flags.
@
text
@d96 3
a98 3
  InitializeObjectAttributes(&attr, &memstr,
			     OBJ_CASE_INSENSITIVE | OBJ_INHERIT,
			     NULL, NULL);
d282 3
a284 3
  InitializeObjectAttributes(&attr, &memstr,
			     OBJ_CASE_INSENSITIVE | OBJ_INHERIT,
			     NULL, NULL);
d435 1
a435 1
  paranoid_printf("here, fhandler_dev_mem");
@


1.27
log
@	* cygwin.din (fstat64): New symbol.
	(ftruncate64): Ditto.
	(lseek64): Ditto.
	(lstat64): Ditto.
	(mmap64): Ditto.
	(seekdir64): Ditto.
	(stat64): Ditto.
	(telldir64): Ditto.
	(truncate64): Ditto.
	* dir.cc (telldir64): New function.
	(telldir): Call telldir64().
	(seekdir64): New function.
	(seekdir): Call seekdir64().
	* fhandler.h: Redefine all methods using __off32_t to use __off64_t.
	* fhandler.cc: Use __off64_t and struct __stat64 throughout.
	* fhandler_clipboard.cc: Ditto.
	* fhandler_disk_file.cc: Ditto.
	* fhandler_dsp.cc: Ditto.
	* fhandler_floppy.cc: Ditto.
	* fhandler_mem.cc: Ditto.
	* fhandler_random.cc: Ditto.
	* fhandler_socket.cc: Ditto.
	* fhandler_tape.cc: Ditto.
	* fhandler_zero.cc: Ditto.
	* pipe.cc: Ditto.
	* glob.c: Ditto, call lstat64 and stat64 in Cygwin.
	* mmap.cc: Use __off64_t throughout.
	(mmap64): New function.
	* sec_acl.cc (acl_worker): Use struct __stat64, call stat64 and lstat64.
	* syscalls.cc (lseek64): New function.
	(stat64_to_stat32): Ditto.
	(fstat64): Ditto.
	(stat64): Ditto.
	(lstat64): Ditto.
	(ftruncate64): Ditto.
	(truncate64): Ditto.
	(_fstat): Call fstat64.
	(_stat): Call stat64.
	(cygwin_lstat): Rename to avoid declaration problem.  Call lstat64.
	(stat_worker): Use struct __stat64.
	(access): Ditto.
	(ftruncate): Call ftruncate64.
	(truncate): Call truncate64.
	* wincap.cc: Set flag has_64bit_file_access appropriately.
	* wincap.h: Add flag has_64bit_file_access.
	* winsup.h (ILLEGAL_SEEK): Define as __off64_t.
	(stat_dev): Declare using struct __stat64.
	(stat_worker): Ditto.
	* include/cygwin/stat.h (struct __stat32): Define if compiling Cygwin.
	(struct __stat64): Ditto.
	(struct stat): Revert definition with explicitly sized datatypes.
	Eliminate sized field names.
	* include/cygwin/types.h (blksize_t): New type.
	(__blkcnt32_t): Ditto.
	(__blkcnt64_t): Ditto.
	(blkcnt_t): Ditto.
@
text
@a11 1
#include <fcntl.h>
@


1.26
log
@	* child_info.h, cygheap.h, fhandler_clipboard.cc, fhandler_dsp.cc,
	fhandler_floppy.cc, fhandler_mem.cc, fhandler_random.cc,
	fhandler_tape.cc, fhandler_zero.cc, grp.cc, mmap.cc, passwd.cc,
	pinfo.cc, pinfo.h, pipe.cc, sec_acl.cc, sec_helper.cc, security.cc,
	security.h, thread.h, uinfo.cc, include/cygwin/acl.h: Fix copyright.
@
text
@d234 2
a235 2
__off32_t
fhandler_dev_mem::lseek (__off32_t offset, int whence)
d268 1
a268 1
			int flags, __off32_t off)
d270 1
a270 1
  if ((DWORD) off >= mem_size
d272 1
a272 1
      || (DWORD) off + len >= mem_size)
d405 1
a405 1
fhandler_dev_mem::fstat (struct stat *buf, path_conv *pc)
@


1.25
log
@	* (child_info.h, cygheap.h, dcrt0.cc, dir.cc, fhandler.cc, fhandler.h,
	fhandler_clipboard.cc, fhandler_disk_file.cc, fhandler_dsp.cc,
	fhandler_floppy.cc, fhandler_mem.cc, fhandler_random.cc,
	fhandler_tape.cc, fhandler_zero.cc, grp.cc, mmap.cc, passwd.cc,
	pinfo.cc, pinfo.h, pipe.cc, sec_acl.cc, sec_helper.cc, security.cc,
	security.h, spawn.cc, syscalls.cc, thread.h, uinfo.cc, winsup.h):
	Change usage of uid_t to __uid16_t, gid_t to __gid16_t and
	off_t to __off32_t throughout.  Use INVALID_UID, INVALID_GID and
	INVALID_SEEK instead casting -1 to the appropriate type.
	* winsup.h: Define INVALID_UID, INVALID_GID and INVALID_SEEK.
	* include/cygwin/acl.h: Define internal __aclent16_t and __aclent32_t
	types.  Don't declare acl functions when compiling Cygwin.
	* include/cygwin/grp.h: Declare getgrgid() and getgrnam() with
	correct types for internal usage.
@
text
@d3 1
a3 1
   Copyright 2000, 2001 Red Hat, Inc.
@


1.24
log
@Ensure that all fhandler_*::read definitions are __stdcall throughout.
* fhandler.cc (fhandler_base::set_inheritance): Be more defensive in debugging
code.
* fhandler.h: Adjust regparms throughout to reflect passing 'this' parameter.
* fhandler_console.cc (fhandler_console::read): Remove unneeded test.  Only
honor "key down" events.
* miscfuncs.cc (strcasestr): Reorganize for efficient code use.
(check_null_empty_str_errno): Ditto.
(__check_null_invalid_struct_errno): Ditto.
(__check_invalid_read_ptr_errno): Ditto.
* syscalls.cc (_read): Return 0 when length == 0, as per Single UNIX
Specification.
@
text
@d234 2
a235 2
off_t
fhandler_dev_mem::lseek (off_t offset, int whence)
d254 1
a254 1
      return (off_t) -1;
d260 1
a260 1
      return (off_t) -1;
d268 1
a268 1
			int flags, off_t off)
@


1.23
log
@* fhandler_dsp.cc (fhandler_dsp::ioctl): Return 0 for successful
SNDCTL_DSP_GETBLKSIZE operation.  Remove obsolete 'name' arg from fhandler_*
constructors throughout.
* winsup.h (winsock_active): New macro.
(winsock2_active): Ditto.
* autoload.cc (wsock_init): Use new macros to decide if winsock or winsock2 is
loaded.
(nonexist_wsock32): Dummy function to force winsock load.
(nonexist_ws2_32): Dummy function to force winsock2 load.
* fhandler.h (fhandler_socket::fstat): Declare new method.  Currently unused.
* fhandler_socket.cc (fhandler_socket::fixup_before_fork_exec): Check that
winsock2 is active before trying WSADuplicateSocketA.
(fhandler_socket::fixup_after_fork): Add extra check for winsock2_active.
Otherwise use iffy procedures for Windows 95.
(fhandler_socket::fixup_after_exec): Add debugging.
(fhandler_socket::dup): Add debugging.
(fhandler_socket::fstat): New method.
(fhandler_socket::set_close_on_exec): Attempt to perform iffy stuff on Windows
95.
* errno.cc (_sys_nerr): Work around compiler strangeness.
* pinfo.cc (winpids::add): Add extra element at end of allocated array for
setting to NULL.
(winpids::enumNT): Ditto.
(winpids::init): Don't modify pidlist if it hasn't been allocated
(possibly due to malloc problem).
@
text
@d180 1
a180 1
int
@


1.22
log
@Add second path_conv * argument to fstat()s throughout.
* fhandler.h: Change read and fstat to regparm/stdcall throughout.
(fhandler_base::fstat): Just declare.  Don't define.
(fhandler_disk_file::fstat_helper): Declare.
* fhandler.cc (fhandler_base::fstat): Move here from fhandler.h, adapt from
former stat_dev().
(fhandler_disk_file::fstat): Move most of the disk-file-specific logic from
stat_worker to here.  Use fstat_helper to derive final fstat output.
(fhandler_disk_file::fstat_helper): New method, renamed from former fstat
method.
(num_entries): Moved here from syscalls.cc.
* fhandler_mem.cc (fhandler_dev_mem::fstat): Use base class to initialize most
stuff.  Invert has_physical_mem_access test for establishing permissions.
* fhandler_raw.cc (fhandler_dev_raw::fstat): Eliminate unneed test and memory
clearing.  Use base class to initialize most stuff.
* syscalls.cc (stat_dev): Eliminate.
(stat_worker): Simply call fstat method to generate fstat output.  Move all
device specific code to appropriate fstats.
* dir.cc (opendir): Pass correct arg to stat_worker to allow following
symlinks.
@
text
@d26 2
a27 3
fhandler_dev_mem::fhandler_dev_mem (const char *name, int nunit)
: fhandler_base (FH_MEM, name),
  unit (nunit)
@


1.21
log
@* dcrt0.cc (dll_crt0_1): Don't close hexec_proc if it is NULL.
* fork.cc (vfork): Add debugging statements.
* path.cc (get_device_number): Make static.  Rewrite to inspect both unix and
windows paths.
(get_raw_device_number): Just check for parts of raw device that we care about.
(get_devn): New function, pulled from get_device_number.
(win32_device_name): Accomodate arg changes to get_device_number.
(mount_info::get_device_number): Call get_device_number on translated Windows
path.
* spawn.cc (spawn_guts): Don't treat P_VFORK differently from P_NOWAIT.  Add
handle to child's shared region to child so that it will be preserved if the
parent goes away.
* fhandler.h: Throughout, simplify to one open method for all fhandler classes,
requiring a path_conv first element.
* fhandler.cc (fhandler_base::open): Remove obsolete method.  Generalize to
require path_conv * as first argument.
(fhandler_disk_file::open): Remove obsolete method.
(fhandler_disk_file::open): Use path_conv pointer rather than reference.
* fhandler_clipboard.cc (fhandler_dev_clipboard::dup): Use new open method.
(fhandler_dev_clipboard::open): Accomodate new argument for open methods.
* fhandler_console.cc (fhandler_console::open): Ditto.
(fhandler_console::dup): Use new open method.
(fhandler_console::fixup_after_fork): Ditto.
(fhandler_console::fixup_after_exec): Ditto.
* fhandler_dsp.cc (fhandler_dev_dsp::open): Accomodate new argument for open
methods.
* fhandler_floppy.cc (fhandler_dev_floppy::open): Ditto.
* fhandler_mem.cc (fhandler_dev_mem::open): Ditto.
* fhandler_random (fhandler_dev_random::open): Ditto.
* fhandler_raw.cc (fhandler_dev_raw::open): Ditto.
* fhandler_serial.cc (fhandler_serial::open): Ditto.
* fhandler_tape.cc (fhandler_dev_tape::open): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::open): Ditto.
(fhandler_pty_master::open): Ditto.
* fhandler_windows.cc (fhandler_windows::open): Ditto.
* fhandler_zero.cc (fhandler_dev_zero::open): Ditto.
* fhandler_socket.cc (fhandler_socket::set_connect_secret): Accomodate new
argument for open methods.
* syscalls.cc (_open): Ditto.
(stat_worker): Ditto.
@
text
@d406 1
a406 1
fhandler_dev_mem::fstat (struct stat *buf)
d408 1
a408 7
  if (!buf)
    {
      set_errno (EINVAL);
      return -1;
    }

  memset (buf, 0, sizeof *buf);
d410 1
a410 1
  if (!wincap.has_physical_mem_access ())
a413 1
  buf->st_nlink = 1;
a414 1
  buf->st_dev = buf->st_rdev = get_device () << 8 | (unit & 0xff);
@


1.20
log
@        * Makefile.in: Build wincap.o.
        * wincap.cc: New file.
        * wincap.h: Ditto.
        * autoload.cc: Add dynamic load statement for `CreateHardLinkA'.
        * dcrt0.cc (os_being_run): Eliminated.
        (osname): Ditto.
        (iswinnt): Ditto.
        (set_os_type): Ditto.
        (dll_crt0_1): Call wincap.init() instead of set_os_type().
        (_dll_crt0): Ditto.
        * environ.cc (set_chunksize): New function.
        (parse_thing): `forkchunk' setting now invokes function `set_chunksize'.
        * fork.cc (chunksize): Eliminated. Moved to be member of wincap.
        * host_dependent.h: Removed.
        * syscalls.cc (_link): Try using `CreateHardLinkA' first, if available.
        * cygheap.cc, dcrt0.cc, delqueue.cc, dir.cc,
        environ.cc, fhandler.cc, fhandler.h, fhandler_console.cc,
        fhandler_mem.cc, fork.cc, mmap.cc, net.cc, pinfo.cc, pinfo.h,
        security.cc, syscalls.cc, sysconf.cc, syslog.cc, thread.cc,
        times.cc, tty.cc, uinfo.cc, uname.cc, winsup.h: Use new wincap
        capability check throughout.
        * winsup.h: Include wincap.h. Eliminate extern declarations of
        `os_being_run' and `iswinnt'. Eliminate `os_type" definition.
        * include/cygwin/version.h: Bump version to 1.3.4.
@
text
@d75 1
a75 1
fhandler_dev_mem::open (const char *, int flags, mode_t)
@


1.20.2.1
log
@Merged changes from HEAD
@
text
@d26 3
a28 2
fhandler_dev_mem::fhandler_dev_mem (int nunit)
  : fhandler_base (FH_MEM), unit (nunit)
d75 1
a75 1
fhandler_dev_mem::open (path_conv *, int flags, mode_t)
d181 1
a181 1
int __stdcall
d406 1
a406 1
fhandler_dev_mem::fstat (struct stat *buf, path_conv *pc)
d408 7
a414 1
  this->fhandler_base::fstat (buf, pc);
d416 1
a416 1
  if (wincap.has_physical_mem_access ())
d420 1
d422 1
@


1.20.2.2
log
@Merged changes from HEAD
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002 Red Hat, Inc.
d234 2
a235 2
__off64_t
fhandler_dev_mem::lseek (__off64_t offset, int whence)
d254 1
a254 1
      return ILLEGAL_SEEK;
d260 1
a260 1
      return ILLEGAL_SEEK;
d268 1
a268 1
			int flags, __off64_t off)
d270 1
a270 1
  if (off >= mem_size
d272 1
a272 1
      || off + len >= mem_size)
d405 1
a405 1
fhandler_dev_mem::fstat (struct __stat64 *buf, path_conv *pc)
@


1.20.2.3
log
@Merged changes from HEAD
@
text
@d12 1
@


1.20.2.4
log
@Merged changes from HEAD
@
text
@d96 3
a98 3
  InitializeObjectAttributes (&attr, &memstr,
			      OBJ_CASE_INSENSITIVE | OBJ_INHERIT,
			      NULL, NULL);
d282 3
a284 3
  InitializeObjectAttributes (&attr, &memstr,
			      OBJ_CASE_INSENSITIVE | OBJ_INHERIT,
			      NULL, NULL);
d435 1
a435 1
  paranoid_printf ("here, fhandler_dev_mem");
@


1.19
log
@* cygheap.h (init_cygheap): Move heap pointers here.
* include/sys/cygwin.h (perprocess): Remove heap pointers.
* dcrt0.cc (__cygwin_user_data): Reflect obsolete perprocess stuff.
(_dll_crt0): Don't initialize heap pointers.
(cygwin_dll_init): Ditto.
(release_upto): Use heap pointers from cygheap.
* heap.h: Ditto.
* fork.cc (fork_parent): Ditto.  Don't set heap pointers in ch.
(fork_child): Remove obsolete sigproc_fixup_after_fork.
* shared.cc (memory_init): Reorganize so that cygheap initialization is called
prior to regular heap since regular heap uses cygheap now.
* sigproc.cc (proc_subproc): Eliminate zombies allocation.
(sigproc_init): Move zombies alloation here.  Don't free up array on fork, just
reuse it.
(sigproc_fixup_after_fork): Eliminate.
* sigproc.h: Ditto.
* include/cygwin/version.h: Reflect change to perprocess structure.
@
text
@d31 1
a31 1
  if (!iswinnt)
d77 1
a77 1
  if (!iswinnt)
d416 1
a416 1
  if (!iswinnt)
@


1.18
log
@Throughout, change check for running under Windows NT to 'iswinnt'.
* dcrt0.cc (set_os_type): Set 'iswinnt' appropriately.
* cygheap.cc (init_cheap): Revert to using VirtualAlloc for allocating cygheap.
(cygheap_setup_for_child_cleanup): New function.  Standard function to call
after calling CreateProcess to cleanup cygheap info passed to child.
(cygheap_fixup_in_child): Copy cygheap from shared memory into allocated space
under Windows 9x or if can't relocate shared space under NT.
* cygheap.h: Declare new function.
* spawn.cc (spawn_guts): Use cygheap_fixup_in_child.
* fork.cc (fork_parent): Ditto.
* winsup.h: Declare iswinnt.
@
text
@d42 7
a48 7
                                           sizeof sbi, NULL)) != STATUS_SUCCESS)
        {
          __seterrno_from_win_error (RtlNtStatusToDosError (ret));
          debug_printf("NtQuerySystemInformation: ret = %d, Dos(ret) = %d",
                       ret, RtlNtStatusToDosError (ret));
          mem_size = 0;
        }
d50 1
a50 1
        mem_size = sbi.PhysicalPageSize * sbi.NumberOfPhysicalPages;
d81 3
a83 3
                    unit == 1 ? "/dev/mem" :
                    unit == 2 ? "/dev/kmem" :
                                "/dev/port");
d99 1
a99 1
  			     OBJ_CASE_INSENSITIVE | OBJ_INHERIT,
d155 9
a163 9
                                 INVALID_HANDLE_VALUE,
                                 &viewmem,
                                 0L,
                                 len,
                                 &phys,
                                 &len,
                                 ViewShare,
                                 0,
                                 PAGE_READONLY)) != STATUS_SUCCESS)
d203 9
a211 9
                                 INVALID_HANDLE_VALUE,
                                 &viewmem,
                                 0L,
                                 len,
                                 &phys,
                                 &len,
                                 ViewShare,
                                 0,
                                 PAGE_READONLY)) != STATUS_SUCCESS)
d286 1
a286 1
  			     NULL, NULL);
@


1.17
log
@Throughout, reorganize header file inclusion to put security.h prior to
fhandler.h.
* fhandler.h (fhandler_base::get_inheritance): New method.
* fhandler_socket.cc (fhandler_socket::create_secret_event): Use proper
close-on-exec inheritance when creating.
(fhandler_socket::check_peer_secret_event): Create handle as non-inheritable.
@
text
@d31 1
a31 1
  if (os_being_run != winNT)
d77 1
a77 1
  if (os_being_run != winNT)
d416 1
a416 1
  if (os_being_run != winNT)
@


1.16
log
@forced commit
@
text
@d19 1
@


1.15
log
@Remove trailing underscore from fhandler_base and friends, throughout.
* fhandler.h (fhandler_base::set_open_status): New method.  Stores original
open status.
(fhandler_base::get_open_status): New method.  Retrieves original open status.
(fhandler_base::reset_to_open_binmode): New method.
* fhandler.cc (fhandler_base::open): Save open status.
(fhandler_base::init): Ditto.
* fhandler_clipboard.cc (fhandler_clipboard::open): Ditto.
* fhandler_console.cc (fhandler_console::open): Ditto.
* fhandler_dsp.cc (fhandler_dsp::open): Ditto.
* fhandler_dev_mem.cc (fhandler_dev_mem::open): Ditto.
* fhandler_dev_random.cc (fhandler_dev_random::open): Ditto.
* fhandler_serial.cc (fhandler_serial::open): Ditto.
* fhandler_tty_slave.cc (fhandler_tty_slave::open): Ditto.
* fhandler_tty_master.cc (fhandler_tty_master::open): Ditto.
* fhandler_dev_zero.cc (fhandler_dev_zero::open): Ditto.
* syscalls.cc (setmode): Rework so that 0 mode value causes reversion to open
state.
* fhandler_tty_slave.cc (fhandler_tty_slave::read): Use correct multiplier when
converting from deciseconds to milliseconds.
@
text
@@


1.14
log
@        * mmap.cc (fhandler_disk_file::mmap): Use `addr' correctly.
	* fhandler_mem.cc (fhandler_dev_mem::mmap): Ditto.
@
text
@d128 1
@


1.13
log
@        * fhandler.h (fhandler_base): New method `fixup_mmap_after_fork'.
        (fhandler_disk_file: Ditto.
        (fhandler_dev_mem): Ditto.
        * fhandler_mem.cc (fhandler_dev_mem::open): Set OBJ_INHERIT attribute
        for device\physicalmemory handle.
        (fhandler_dev_mem::mmap): Ditto.
        * fhandler_mem.cc (fhandler_dev_mem::fixup_mmap_after_fork): New method.
        * mmap.cc (mmap_record): Add private `fdesc_' member. Change constructor
        accordingly.
        (get_fd): New method.
        (mmap): Use new mmap_record constructor.
        (fhandler_base::fixup_mmap_after_fork): New method.
        (fhandler_disk_file::fixup_mmap_after_fork): Ditto.
        (fixup_mmaps_after_fork): Call `fixup_mmap_after_fork' of appropriate
        fhandler class.
@
text
@d335 1
a335 1
  if ((flags & MAP_FIXED) && base != addr)
@


1.12
log
@* pinfo.cc (codepage_init): Move function.
* environ.cc (codepage_init): To here.
* exceptoins.cc (SIG_NONMASKABLE): Remove SIGCONT from consideration since it
is supposed to be maskable.
* signal.cc (sigaction): Ditto.
* sigproc.cc (wait_sig): Ditto.
* winsup.h: Eliminate global declaration of codepage_init.
@
text
@d97 3
a99 1
  InitializeObjectAttributes(&attr, &memstr, OBJ_CASE_INSENSITIVE, NULL, NULL);
d282 3
a284 1
  InitializeObjectAttributes(&attr, &memstr, OBJ_CASE_INSENSITIVE, NULL, NULL);
d364 37
@


1.11
log
@Whitespace cleanup.

* configure.in: Eliminate subdir stuff.
* configure: Regenerate.
* include/getopt.h (option): Make name field 'const'.
@
text
@d3 1
a3 1
   Copyright 1999, 2000 Cygnus Solutions.
d82 1
a82 1
                                "/dev/port" );
@


1.10
log
@        * autoload.cc: New file keeping all autoload stuff.
        * Makefile.in: Add autoload.o to dependencies.
        * dcrt0.cc: Move all autoload stuff to autoload.cc.
        * fhandler_mem.cc: Ditto.
        * net.cc: Ditto.
        * uinfo.cc: Ditto.
@
text
@d239 1
a239 1
    
d248 1
a248 1
    
d317 1
a317 1
  				 INVALID_HANDLE_VALUE,
@


1.9
log
@        * ntdll.h: New file.
        * fhandler_mem.cc: Move ntdll.dll specific definitions and
        declarations to ntdll.h.
        * sysconf.cc (sysconf): Add support for _SC_NPROCESSORS_CONF,
        _SC_NPROCESSORS_ONLN, _SC_PHYS_PAGES and _SC_AVPHYS_PAGES.
@
text
@a17 1
#include "autoload.h"
a402 39
}

extern "C" {

LoadDLLinitfunc (ntdll)
{
  HANDLE h;
  static NO_COPY LONG here = -1L;

  while (InterlockedIncrement (&here))
    {
      InterlockedDecrement (&here);
small_printf ("Multiple tries to read ntdll.dll\n");
      Sleep (0);
    }

  if (ntdll_handle)
    /* nothing to do */;
  else if ((h = LoadLibrary ("ntdll.dll")) != NULL)
    ntdll_handle = h;
  else if (!ntdll_handle)
    api_fatal ("could not load ntdll.dll, %E");

  InterlockedDecrement (&here);
  return 0;
}

static void dummy_autoload (void) __attribute__ ((unused));
static void
dummy_autoload (void)
{
LoadDLLinit (ntdll)
LoadDLLfuncEx (NtMapViewOfSection, 40, ntdll, 1)
LoadDLLfuncEx (NtOpenSection, 12, ntdll, 1)
LoadDLLfuncEx (NtQuerySystemInformation, 16, ntdll, 1)
LoadDLLfuncEx (NtUnmapViewOfSection, 8, ntdll, 1)
LoadDLLfuncEx (RtlInitUnicodeString, 8, ntdll, 1)
LoadDLLfuncEx (RtlNtStatusToDosError, 4, ntdll, 1)
}
@


1.8
log
@* fhandler_mem.cc (fhandler_dev_mem::fhandler_dev_mem): Fix debug output.
@
text
@d21 1
a21 36

/*
 * The following both data structures aren't defined anywhere in the Microsoft
 * header files. Taken from the book "Windows NT/2000 Native API Reference"
 * by Gary Nebbett.
 */
typedef enum _SYSTEM_INFORMATION_CLASS {
  SystemBasicInformation = 0
  /* Dropped each other since not used here. */
} SYSTEM_INFORMATION_CLASS;

typedef struct _SYSTEM_BASIC_INFORMATION {
  ULONG Unknown;
  ULONG MaximumIncrement;
  ULONG PhysicalPageSize;
  ULONG NumberOfPhysicalPages;
  ULONG LowestPhysicalPage;
  ULONG HighestPhysicalPage;
  ULONG AllocationGranularity;
  ULONG LowestUserAddress;
  ULONG HighestUserAddress;
  ULONG ActiveProcessors;
  ULONG NumberProcessors;
} SYSTEM_BASIC_INFORMATION, *PSYSTEM_BASIC_INFORMATION;

extern "C" {
NTSTATUS NTAPI NtMapViewOfSection(HANDLE,HANDLE,PVOID*,ULONG,ULONG,
                                  PLARGE_INTEGER,PULONG,SECTION_INHERIT,
                                  ULONG,ULONG);
NTSTATUS NTAPI NtQuerySystemInformation(SYSTEM_INFORMATION_CLASS,
                                        PVOID,ULONG,PULONG);
NTSTATUS NTAPI NtOpenSection(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES);
NTSTATUS NTAPI NtUnmapViewOfSection(HANDLE,PVOID);
VOID NTAPI RtlInitUnicodeString(PUNICODE_STRING,PCWSTR);
ULONG NTAPI RtlNtStatusToDosError(NTSTATUS);
}
@


1.7
log
@        * fhandler_mem.cc: Eliminate unused include statements.
        (fhandler_dev_mem::fhandler_dev_mem): Check for 9X/ME.
@
text
@d86 1
a86 1
      debug_printf ("MemSize: %d MB", mem_size >>= 20);
d91 1
a91 1
      debug_printf ("KMemSize: %d MB", mem_size >>= 20);
@


1.6
log
@        * fhandler.h (fhandler_dev_mem): Erase member `init_phase' and
        member function `init'.
        * fhandler_mem.cc: Add typedefs for NT internal data types
        `SYSTEM_INFORMATION_CLASS' and `SYSTEM_BASIC_INFORMATION'.
        Add prototype for `NtQuerySystemInformation' function.
        (fhandler_dev_mem::fhandler_dev_mem): Takes over initialization task
        from `init'. Use `NtQuerySystemInformation' function to evaluate the
        size of physical memory instead of interval search.
        (fhandler_dev_mem::init): Eliminated.
        (fhandler_dev_mem::open): Don't call `init'.
        (fhandler_dev_mem::read): Eliminate check for `init_phase'.
        (dummy_autoload): Add load statement for `NtQuerySystemInformation'.
@
text
@a11 1
#include <sys/termios.h>
a18 1
#include "cygheap.h"
a20 1
#include "path.h"
d65 7
@


1.5
log
@        * fhandler.h (fhandler_dev_mem): Add methods mmap, munmap and msync.
        Add `unit' member.
        * fhandler_mem.cc (fhandler_dev_mem): Initialize `unit' as well.
        (init): Care for differences between /dev/mem, /dev/kmem (not
        implemented yet) and /dev/port.
        (open): Change debug message to reflect the device.
        (mmap): New function.
        (munmap): Ditto.
        (msync): Ditto.
        (fstat): Use unit when setting st_dev in stat structure.
        * mmap.cc (mmap): Handle MAP_ANONYMOUS flag.
        Change error handling slightly.
        * path.cc (get_device_number): Handle /dev/port.
@
text
@d25 24
d51 4
a54 2
                                      PLARGE_INTEGER,PULONG,SECTION_INHERIT,
                                      ULONG,ULONG);
d66 1
a66 11
  unit (nunit),
  init_phase (false)
{
}

fhandler_dev_mem::~fhandler_dev_mem (void)
{
}

void
fhandler_dev_mem::init ()
d70 4
a73 6
      long page_size = getpagesize ();
      char buf[1];

      init_phase = true;
      mem_size = pos = 1 << 30;
      for (off_t afct = 1 << 29; afct >= page_size; afct >>= 1)
d75 4
a78 8
          if (read (buf, 1) > 0)
            pos += afct;
          else
            {
              if (pos < mem_size)
                mem_size = pos;
              pos -= afct;
            }
d80 2
a81 1
      pos = 0;
d96 2
a97 1
      debug_printf ("Illegal unit!!!");
d99 4
a102 1
  init_phase = false;
a157 1
  init ();
d241 1
a241 2
      if (!init_phase) /* Don't want to flood debug output with init crap. */
        __seterrno_from_win_error (RtlNtStatusToDosError (ret));
d469 1
@


1.4
log
@        * fhandler.h (fhandler_dev_mem): Add method `init'. Add members
        `mem_size' and `init_phase'.
        * fhandler_mem.cc (init): New function to figure out the size of
        the physical memory.
        (open): Add checking for illegal flags. Change usage of access mode.
        (write): Add intended functionality.
        (read): Add parameter checking. Eliminate page size constant. Use
        getpagesize() instead. Don't touch errno and don't create debug output
        while init() is running.
        (lseek): Add bounds checking. Fix SEEK_END.
        (fstat): Eliminate page size constant. Use getpagesize() instead.
        (dup): Add intended functionality.
@
text
@d16 1
d38 1
a38 1
fhandler_dev_mem::fhandler_dev_mem (const char *name, int)
d40 2
a41 1
  init_phase(false)
d52 4
a55 2
  long page_size = getpagesize ();
  char buf[1];
d57 3
a59 7
  init_phase = true;
  mem_size = pos = 1 << 30;
  for (off_t afct = 1 << 29; afct >= page_size; afct >>= 1)
    {
      if (read (buf, 1) > 0)
        pos += afct;
      else
d61 8
a68 3
          if (pos < mem_size)
            mem_size = pos;
          pos -= afct;
d70 16
a86 2
  pos = 0;
  debug_printf ("MemSize: %d MB", mem_size >>= 20);
d96 4
a99 1
      debug_printf ("/dev/mem is accessible under NT/W2K only");
a191 1

a240 1

d282 99
d398 1
a398 1
  buf->st_dev = buf->st_rdev = get_device () << 8;
@


1.3
log
@        * fhandler_mem.cc: Load ntdll functions via autoload method.
        (load_ntdll_funcs): Eliminated.
@
text
@d39 1
a39 1
  pos(0UL)
d47 24
d81 7
d94 1
d96 4
a99 1
    set_access (SECTION_MAP_READ);
d101 4
a104 1
    set_access (SECTION_MAP_WRITE);
d106 4
a109 1
    set_access (SECTION_MAP_READ | SECTION_MAP_WRITE);
d112 1
a112 1
  NTSTATUS ret = NtOpenSection (&mem, get_access (), &attr);
d121 1
d126 1
a126 1
fhandler_dev_mem::write (const void *ptr, size_t len)
d128 44
a171 2
  set_errno (ENOSYS);
  return -1;
d177 1
a177 1
  if (!ulen)
d180 9
d192 1
a192 1
  DWORD len = ulen + 4095;
d206 2
a207 1
      __seterrno_from_win_error (RtlNtStatusToDosError (ret));
d244 2
a245 2
      pos = 0;
      pos -= offset;
d253 6
d278 1
a278 1
  buf->st_blksize = 4096;
d287 10
a296 2
  set_errno (ENOSYS);
  return -1;
@


1.2
log
@        * fhandler_mem.cc (load_ntdll_funcs): Add missing __stdcall qualifiers.
@
text
@d18 1
d24 8
a31 80
static int inited = FALSE;
NTSTATUS (__stdcall *NtMapViewOfSection)(HANDLE,HANDLE,PVOID*,ULONG,ULONG,
                                         PLARGE_INTEGER,PULONG,SECTION_INHERIT,
                                         ULONG,ULONG);
NTSTATUS (__stdcall *NtOpenSection)(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES);
NTSTATUS (__stdcall *NtUnmapViewOfSection)(HANDLE,PVOID);
VOID (__stdcall *RtlInitUnicodeString)(PUNICODE_STRING,PCWSTR);
ULONG (__stdcall *RtlNtStatusToDosError) (NTSTATUS);

int
load_ntdll_funcs ()
{
  int ret = 0;

  if (os_being_run != winNT)
    {
      set_errno (ENOENT);
      debug_printf ("/dev/mem is accessible under NT/W2K only");
      return 0;
    }

  HMODULE ntdll = GetModuleHandle ("ntdll.dll");

  if (inited)
    {
      debug_printf ("function pointers already inited");
      return 1;
    }

  if (!ntdll)
    {
      __seterrno ();
      goto out;
    }

  if (!(NtMapViewOfSection = (NTSTATUS (__stdcall *)(HANDLE,HANDLE,PVOID*,ULONG,
                                                     ULONG,PLARGE_INTEGER,
                                                     PULONG,SECTION_INHERIT,
                                                     ULONG,ULONG))
                             GetProcAddress (ntdll, "NtMapViewOfSection")))
    {
      __seterrno ();
      goto out;
    }

  if (!(NtOpenSection = (NTSTATUS (__stdcall *)(PHANDLE,ACCESS_MASK,
                                                POBJECT_ATTRIBUTES))
                        GetProcAddress (ntdll, "NtOpenSection")))
    {
      __seterrno ();
      goto out;
    }

  if (!(NtUnmapViewOfSection = (NTSTATUS (__stdcall *)(HANDLE,PVOID))
                               GetProcAddress (ntdll, "NtUnmapViewOfSection")))
    {
      __seterrno ();
      goto out;
    }

  if (!(RtlInitUnicodeString = (VOID (__stdcall *)(PUNICODE_STRING,PCWSTR))
                               GetProcAddress (ntdll, "RtlInitUnicodeString")))
    {
      __seterrno ();
      goto out;
    }

  if (!(RtlNtStatusToDosError = (ULONG (__stdcall *)(NTSTATUS))
                               GetProcAddress (ntdll, "RtlNtStatusToDosError")))
    {
      __seterrno ();
      goto out;
    }

  inited = TRUE;
  ret = 1;

out:
  debug_printf ("%d = load_ntdll_funcs()", ret);
  return ret;
d50 6
a55 2
  if (!load_ntdll_funcs ())
    return 0;
d195 38
@


1.1
log
@        * Makefile.in: Add fhandler_mem.o to the dependencies.
        * dtable.cc (dtable::build_fhandler): Add case for FH_MEM.
        * fhandler.h: Add FH_MEM device type.  Add class fhandler_dev_mem.
        * fhandler_mem.cc: New file. Implementation of class fhandler_dev_mem.
        * path.cc: Add /dev/mem to windows_device_names.
        (get_device_number): Add FH_MEM type.
@
text
@d58 4
a61 3
  if (!(NtMapViewOfSection = (NTSTATUS (*)(HANDLE,HANDLE,PVOID*,ULONG,ULONG,
                                           PLARGE_INTEGER,PULONG,
                                           SECTION_INHERIT,ULONG,ULONG))
d68 2
a69 1
  if (!(NtOpenSection = (NTSTATUS (*)(PHANDLE,ACCESS_MASK,POBJECT_ATTRIBUTES))
d76 1
a76 1
  if (!(NtUnmapViewOfSection = (NTSTATUS (*)(HANDLE,PVOID))
d83 1
a83 1
  if (!(RtlInitUnicodeString = (VOID (*)(PUNICODE_STRING,PCWSTR))
d90 1
a90 1
  if (!(RtlNtStatusToDosError = (ULONG (*)(NTSTATUS))
@

