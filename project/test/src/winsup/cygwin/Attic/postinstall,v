head	1.9;
access;
symbols;
locks; strict;
comment	@# @;


1.9
date	2008.04.25.17.13.27;	author corinna;	state dead;
branches;
next	1.8;

1.8
date	2008.04.21.14.00.24;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2008.04.14.14.09.00;	author corinna;	state Exp;
branches;
next	1.6;

1.6
date	2008.04.08.16.12.24;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2008.04.08.07.58.12;	author corinna;	state Exp;
branches;
next	1.4;

1.4
date	2008.04.07.16.37.20;	author corinna;	state Exp;
branches;
next	1.3;

1.3
date	2008.04.07.14.09.22;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.06.09.56.42;	author corinna;	state Exp;
branches;
next	1.1;

1.1
date	2008.04.05.09.30.06;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.9
log
@	* postinstall: Remove (Moved to base-cygwin package).
@
text
@#!/bin/bash
#
# Copyright 2008 Red Hat, Inc.
#
# This file is part of Cygwin.
#
# This software is a copyrighted work licensed under the terms of the
# Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
# details.
#
export PATH="/bin:$PATH"

SYSCONFDIR=/etc
FSTAB="${SYSCONFDIR}/fstab"
FSTABDIR="${SYSCONFDIR}/fstab.d"

DEVDIR=/dev

print_flags ()
{
  (( $1 & 0x0002 )) && echo -n "binary" || echo -n "text"
  (( $1 & 0x0010 )) && echo -n ",exec"
  (( $1 & 0x0040 )) && echo -n ",cygexec"
  (( $1 & 0x0100 )) && echo -n ",notexec"
  (( $1 & 0x0800 )) && echo -n ",managed"
}

# Create fstab file if it doesn't exist.
if [ -e "${FSTAB}" -a ! -f "${FSTAB}" ]
then
  # Try to move
  mv -f "${FSTAB}" "${FSTAB}.orig"
  if [ -e "${FSTAB}" -a ! -f "${FSTAB}" ]
  then
    echo
    echo "${FSTAB} is existant but not a file."
    echo "Since this file is specifying the mount points, this might"
    echo "result in unexpected trouble.  Please fix that manually."
    echo
  fi
fi

if [ ! -e "${FSTAB}" ]
then
  # Set IFS to just a LF
  _OLD_IFS="$IFS"
  IFS="
"
  for line in $(mount)
  do
    [[ "$line" =~ ([^ ]*)\ on\ ([^ ]*)\ type\ ([^ ]*)\ .* ]]
    if [ "${BASH_REMATCH[2]}" = "/" ]
    then
      CYGROOT="${BASH_REMATCH[1]}"
      FS_TYPE="${BASH_REMATCH[3]}"
      break
    fi
  done
  cat > ${FSTAB} << EOF
# The  file fstab contains descriptive information about the various file
# systems.  fstab is only read by programs, and not written;  it  is  the
# duty  of  the system administrator to properly create and maintain this
# file.  Each filesystem is described on a separate line; fields on  each
# line are separated by tabs or spaces.  Lines starting with '#' are com-
# ments.
#
# The first field, (fs_spec),  describes  the  block  special  device  or
# remote filesystem to be mounted.  On Cygwin, this is the native Windows
# path which  the mount point links in.  As path separator you MUST use a
# slash.  Usage of  a backslash might  lead to  unexpected  results.  UNC
# paths  (using  slashes,  not  backslashes)  are  allowed.  If  the path
# contains spaces these can be escaped as '\040'.
#
# The second field, (fs_file), describes the mount point for the filesys-
# tem.  If the  name  of  the  mount point contains  spaces these can be
# escaped as '\040'.
#
# The third field, (fs_vfstype), describes the type  of  the  filesystem.
# Cygwin supports any string here, since  the file system type is usually
# not  evaluated.  The  noticable  exception  is  the  file  system  type
# cygdrive.  This  type is  used to  set the  cygdrive  prefix.  See  the
# user's guide for more information about the cygdrive prefix.
#
# The  fourth  field, (fs_mntops), describes the mount options associated
# with  the filesystem.  It is  formatted as a  comma separated  list  of
# options.  It contains at least  the type of mount (binary or text) plus
# any additional options appropriate to  the filesystem type.  Recognized
# options are binary, text, nouser, user, exec, notexec, cygexec, nosuid,
# managed.  For a description of the options see  the user's guide.  Note
# that  nouser mount  points  are  not overridable  by  a  later  call to
# mount(2).  This is only  possible for user mount  points.  Mount points
# are by default nouser mount points, unless you specify the option user.
#
# The fifth (fs_freq) and sixth (fs_passno) field  are ignored.  They are
# so far only specified to keep a Linux-like fstab file layout.
#
# Note that  you don't have  to specify an fstab  entry for the root dir,
# unless you want  to have the  root dir pointing  to somewhere  entirely
# different (hopefully  you know what  you're doing), or  if you want  to
# mount the root dir with special options (for instance, as text mount).
#
# Example entries:
#
#   Just a normal mount point:
#
#       c:/foo /bar fat32 binary 0 0
#
#   A mount point for a managed, textmode mount:
#
#       C:/foo /bar/baz ntfs text,managed 0 0
#
#   A mount point for a Windows directory with spaces in it:
#
#       C:/Documents\040and\040Settings /docs ext3 binary 0 0
#
#   A mount point for a remote directory:
#
#       //server/share/subdir /srv/subdir smbfs binary 0 0
#
#   This is just a comment:
#
#       # This is just a comment
#
#   Set the cygdrive prefix to /mnt:
#
#       none /mnt cygdrive binary 0 0
#

EOF

  usr_bin=""
  usr_lib=""
  key='\HKLM\SOFTWARE\Cygnus Solutions\Cygwin\mounts v2'
  for subkey in $(regtool -q list "$key")
  do
    if [[ "$subkey" =~ /.* ]]
    then
      [ "$subkey" = "/usr/bin" ] && usr_bin="1"
      [ "$subkey" = "/usr/lib" ] && usr_lib="1"
      nat=$(regtool -q get "$key\\$subkey\native")
      nat="${nat//\\//}"
      nat="${nat// /\\040}"
      psx="${subkey// /\\040}"
      flags=$(regtool -q get "$key\\$subkey\flags")
      echo -n "${nat} ${psx} some_fs "
      print_flags $flags
      echo " 0 0"
    fi >> ${FSTAB}
  done
  [ -z "$usr_bin" ] &&
    echo "${CYGROOT//\\//}/bin /usr/bin ${FS_TYPE} binary 0 0" >> ${FSTAB}
  [ -z "$usr_lib" ] &&
    echo "${CYGROOT//\\//}/lib /usr/lib ${FS_TYPE} binary 0 0" >> ${FSTAB}

  cygd=""
  prefix=$(regtool -q get "$key\cygdrive prefix")
  flags=$(regtool -q get "$key\cygdrive flags")
  [ -z "$flags" ] && flags=2
  # Don't take system and cygdrive flags into account when testing
  if [ -n "$prefix" \
       -a \( "$prefix" != "/cygdrive" -o "$(( $flags & ~0x28 ))" -ne 2 \) ]
  then
    cygd="1"
    psx="${prefix// /\\040}"
    echo -n "none ${psx} cygdrive "
    print_flags $flags
    echo ",user 0 0"
  fi >> ${FSTAB}

  if [ -z "$cygd" ]
  then
    echo "# This is default anyway:" >> ${FSTAB}
    echo "# none /cygdrive cygdrive binary,user 0 0" >> ${FSTAB}
  fi
  IFS="$_OLD_IFS"
fi

# Check for ${FSTABDIR} directory

if [ -e "${FSTABDIR}" -a ! -d "${FSTABDIR}" ]
then 
  # No mercy.  Try to remove.
  rm -f "${FSTABDIR}"
  if [ -e "${FSTABDIR}" -a ! -d "${FSTABDIR}" ]
  then 
    echo
    echo "${FSTABDIR} is existant but not a directory."
    echo "Please fix that manually."
    echo
    exit 1
  fi
fi

# Create it if necessary

if [ ! -e "${FSTABDIR}" ]
then
  mkdir -m 1777 "${FSTABDIR}"
  if [ ! -e "${FSTABDIR}" ]
  then
    echo
    echo "Creating ${FSTABDIR} directory failed."
    echo "Please fix that manually."
    echo
    exit 1
  fi
fi

# Check for ${DEVDIR} directory

if [ -e "${DEVDIR}" -a ! -d "${DEVDIR}" ]
then 
  # No mercy.  Try to remove.
  rm -f "${DEVDIR}"
  if [ -e "${DEVDIR}" -a ! -d "${DEVDIR}" ]
  then 
    echo
    echo "${DEVDIR} is existant but not a directory."
    echo "Please fix that manually, otherwise you WILL get problems."
    echo
    exit 1
  fi
fi

# Create it if necessary

if [ ! -e "${DEVDIR}" ]
then
  mkdir -m 755 "${DEVDIR}"
  if [ ! -e "${DEVDIR}" ]
  then
    echo
    echo "Creating ${DEVDIR} directory failed."
    echo "Please fix that manually, otherwise you WILL get problems."
    echo
    exit 1
  fi
fi

setfacl -m u:system:rwx "${DEVDIR}"

# Check for ${DEVDIR}/shm directory (for POSIX semaphores and POSIX shared mem)

if [ -e "${DEVDIR}/shm" -a ! -d "${DEVDIR}/shm" ]
then
  # No mercy.  Try to remove.
  rm -f "${DEVDIR}/shm"
  if [ -e "${DEVDIR}/shm" -a ! -d "${DEVDIR}/shm" ]
  then 
    echo
    echo "${DEVDIR}/shm is existant but not a directory."
    echo "POSIX semaphores and POSIX shared memory will not work"
    echo
  fi
fi

# Create it if necessary

if [ ! -e "${DEVDIR}/shm" ]
then
  mkdir -m 1777 "${DEVDIR}/shm"
  if [ ! -e "${DEVDIR}/shm" ]
  then
    echo
    echo "Creating ${DEVDIR}/shm directory failed."
    echo "POSIX semaphores and POSIX shared memory will not work"
    echo
  fi
fi

# Check for ${DEVDIR}/mqueue directory (for POSIX message queues)

if [ -e "${DEVDIR}/mqueue" -a ! -d "${DEVDIR}/mqueue" ]
then
  # No mercy.  Try to remove.
  rm -f "${DEVDIR}/shm"
  if [ -e "${DEVDIR}/shm" -a ! -d "${DEVDIR}/shm" ]
  then 
    echo
    echo "${DEVDIR}/mqueue is existant but not a directory."
    echo "POSIX message queues will not work"
    echo
  fi
fi

# Create it if necessary

if [ ! -e "${DEVDIR}/mqueue" ]
then
  mkdir -m 1777 "${DEVDIR}/mqueue"
  if [ ! -e "${DEVDIR}/mqueue" ]
  then
    echo
    echo "Creating ${DEVDIR}/mqueue directory failed."
    echo "POSIX message queues will not work"
    echo
  fi
fi
@


1.8
log
@	* mount.cc (mount_info::init): Remove call to from_registry.  Print
	message that fstab is missing.
	(mount_info::from_fstab): Use CYGWIN_INFO_CYGDRIVE_DEFAULT_PREFIX
	instead of constant string.
	(mount_info::read_mounts): Remove.
	(mount_info::from_registry): Remove.
	(mount_info::read_cygdrive_info_from_registry): Remove.
	* postinstall: Enable code to create fstab entries from old registry
	entries.
	* registry.cc (reg_key::reg_key): Drop CYGWIN_INFO_CYGNUS_REGISTRY_NAME
	from registry key.
	* shared_info.h (mount_info::read_mounts): Remove declaration.
	(mount_info::from_registry): Ditto.
	(mount_info::to_registry): Ditto.
	(mount_info::read_cygdrive_info_from_registry): Ditto.
	* winver.rc (CYGWIN_REGISTRY_KEY): Remove.
	(LegalCopyright): Fix to include 2008.
	(RegistryKey): Set to CYGWIN_INFO_CYGWIN_REGISTRY_NAME.
	* include/cygwin/version.h (CYGWIN_INFO_CYGNUS_REGISTRY_NAME): Remove.
@
text
@@


1.7
log
@	* postinstall: Fix copy/paste bug.
@
text
@d131 20
a150 23
  #
  # TODO: Enable the below code for the first official release.
  #
  #usr_bin=""
  #usr_lib=""
  #key='\HKLM\SOFTWARE\Cygnus Solutions\Cygwin\mounts v2'
  #for subkey in $(regtool -q list "$key")
  #do
  #  if [[ "$subkey" =~ /.* ]]
  #  then
  #    [ "$subkey" = "/usr/bin" ] && usr_bin="1"
  #    [ "$subkey" = "/usr/lib" ] && usr_lib="1"
  #    nat=$(regtool -q get "$key\\$subkey\native")
  #    nat="${nat//\\//}"
  #    nat="${nat// /\\040}"
  #    psx="${subkey// /\\040}"
  #    flags=$(regtool -q get "$key\\$subkey\flags")
  #    echo -n "${nat} ${psx} some_fs "
  #    print_flags $flags
  #    echo " 0 0"
  #  fi >> ${FSTAB}
  #done
  #[ -z "$usr_bin" ] &&
d152 1
a152 1
  #[ -z "$usr_lib" ] &&
d155 14
a168 14
  #cygd=""
  #prefix=$(regtool -q get "$key\cygdrive prefix")
  #flags=$(regtool -q get "$key\cygdrive flags")
  #[ -z "$flags" ] && flags=2
  ## Don't take system and cygdrive flags into account when testing
  #if [ -n "$prefix" \
  #     -a \( "$prefix" != "/cygdrive" -o "$(( $flags & ~0x28 ))" -ne 2 \) ]
  #then
  #  cygd="1"
  #  psx="${prefix// /\\040}"
  #  echo -n "none ${psx} cygdrive "
  #  print_flags $flags
  #  echo ",user 0 0"
  #fi >> ${FSTAB}
d170 2
a171 2
  #if [ -z "$cygd" ]
  #then
d174 1
a174 1
  #fi
@


1.6
log
@	* mount.cc (mount_info::from_fstab): Read user fstab files from
	/etc/fstab.d/$USER to avoid user write access to /etc.
	* postinstall: Use variables for filenames.  Create /etc/fstab.d dir
	with 01777 permissions.
@
text
@d160 2
d164 1
a164 1
  #     -a \( "$prefix" != "/cygdrive" \ -o "$(( $flags & ~0x28 ))" -ne 2 \) ]
@


1.5
log
@	* postinstall: Disable adding registry mounts to /etc/fstab for now.
@
text
@d13 4
d29 1
a29 1
if [ -e "/etc/fstab" -a ! -f "/etc/fstab" ]
d32 2
a33 2
  mv -f "/etc/fstab" "/etc/fstab.orig"
  if [ -e "/etc/fstab" -a ! -f "/etc/fstab" ]
d36 1
a36 1
    echo "/etc/fstab is existant but not a file."
d43 1
a43 1
if [ ! -e "/etc/fstab" ]
d59 1
a59 1
  cat > /etc/fstab << EOF
d151 1
a151 1
  #  fi >> /etc/fstab
d154 1
a154 1
    echo "${CYGROOT//\\//}/bin /usr/bin ${FS_TYPE} binary 0 0" >> /etc/fstab
d156 1
a156 1
    echo "${CYGROOT//\\//}/lib /usr/lib ${FS_TYPE} binary 0 0" >> /etc/fstab
d169 1
a169 1
  #fi >> /etc/fstab
d173 2
a174 2
    echo "# This is default anyway:" >> /etc/fstab
    echo "# none /cygdrive cygdrive binary,user 0 0" >> /etc/fstab
d179 31
@


1.4
log
@	* postinstall: Add function print_flags and call where appropriate.
	Omit system and cygdrive flag when testing cygdrive flags.
@
text
@d127 23
a149 20
  usr_bin=""
  usr_lib=""
  key='\HKLM\SOFTWARE\Cygnus Solutions\Cygwin\mounts v2'
  for subkey in $(regtool -q list "$key")
  do
    if [[ "$subkey" =~ /.* ]]
    then
      [ "$subkey" = "/usr/bin" ] && usr_bin="1"
      [ "$subkey" = "/usr/lib" ] && usr_lib="1"
      nat=$(regtool -q get "$key\\$subkey\native")
      nat="${nat//\\//}"
      nat="${nat// /\\040}"
      psx="${subkey// /\\040}"
      flags=$(regtool -q get "$key\\$subkey\flags")
      echo -n "${nat} ${psx} some_fs "
      print_flags $flags
      echo " 0 0"
    fi >> /etc/fstab
  done
  [ -z "$usr_bin" ] &&
d151 1
a151 1
  [ -z "$usr_lib" ] &&
d154 12
a165 12
  cygd=""
  prefix=$(regtool -q get "$key\cygdrive prefix")
  # Don't take system and cygdrive flags into account when testing
  if [ -n "$prefix" \
       -a \( "$prefix" != "/cygdrive" \ -o "$(( $flags & ~0x28 ))" -ne 2 \) ]
  then
    cygd="1"
    psx="${prefix// /\\040}"
    echo -n "none ${psx} cygdrive "
    print_flags $flags
    echo ",user 0 0"
  fi >> /etc/fstab
d167 2
a168 2
  if [ -z "$cygd" ]
  then
d171 1
a171 1
  fi
@


1.3
log
@	* postinstall: Set IFS to LF only.  Change while loop in subshell to
	for loop in parent shell.  Add code to read system mount points and
	system cygdrive prefix from registry and append them to /etc/fstab.
@
text
@d15 9
d142 1
a142 5
      (( $flags & 0x0002 )) && echo -n "binary" || echo -n "text"
      (( $flags & 0x0010 )) && echo -n ",exec"
      (( $flags & 0x0040 )) && echo -n ",cygexec"
      (( $flags & 0x0100 )) && echo -n ",notexec"
      (( $flags & 0x0800 )) && echo -n ",managed"
d153 3
a155 2
  flags=$(regtool -q get "$key\cygdrive flags")
  if [ -n "$prefix" -a \( "$prefix" != "/cygdrive" -o "$flags" -ne 42 \) ]
d160 1
a160 5
    (( $flags & 0x0002 )) && echo -n "binary" || echo -n "text"
    (( $flags & 0x0010 )) && echo -n ",exec"
    (( $flags & 0x0040 )) && echo -n ",cygexec"
    (( $flags & 0x0100 )) && echo -n ",notexec"
    (( $flags & 0x0800 )) && echo -n ",managed"
@


1.2
log
@	* path.cc (struct opt): Rename "system" to "nouser".
	* postinsatll: Ditto.
@
text
@d32 15
a46 13
  mount |
  (
    while read -r line
    do
      [[ "$line" =~ ([^ ]*)\ on\ ([^ ]*)\ type\ ([^ ]*)\ .* ]]
      if [ "${BASH_REMATCH[2]}" = "/" ]
      then
	CYGROOT="${BASH_REMATCH[1]}"
	FS_TYPE="${BASH_REMATCH[3]}"
	break
      fi
    done
    cat > /etc/fstab << EOF
a115 4
${CYGROOT//\\//}/bin /usr/bin ${FS_TYPE} binary 0 0
${CYGROOT//\\//}/lib /usr/lib ${FS_TYPE} binary 0 0
# This is default anyway:
# none /cygdrive cygdrive binary,user 0 0
d117 51
a167 1
  )
@


1.1
log
@	* postinstall: New script.
	* Makefile.in (sysconfdir): Define.
	(install): Create $(sysconfdir)/postinstall dir.  Install postinstall
	script into it.

	* path.cc: Add temorary comments to note later function removal.
	(conv_fstab_spaces): New inline function to handle \040 to space
	conversion.
	(struct opt): Add "system" and "user" mount options.
	(mount_info::from_fstab_line): Only allow # to start a comment at
	the beginning of the line.  Call conv_fstab_spaces on native_path and
	posix_path fields.  Don't enforce system mounts in /etc/fstab.
	Drop last argument in call to add_item.
	(mount_info::from_fstab): Create a default cygdrive entry.  Load
	user mount points from fstab.<username> instead of fstab.<sid>.
	(mount_info::read_mounts): Drop last argument in call to add_item.
	(mount_info::add_reg_mount): Remove.
	(mount_info::del_reg_mount): Remove.
	(mount_info::write_cygdrive_info): Rename from
	mount_info::write_cygdrive_info_to_registry.  Don't write to registry.
	Disallow to overwrite a system cygdrive prefix.
	(mount_info::remove_cygdrive_info_from_registry): Remove.
	(mount_info::get_cygdrive_info): Just fetch current cygdrive prefix and
	flags.
	(mount_info::add_item): Drop last argument.  Don't write to registry.
	Disallow to overwrite a system mount point.
	(mount_info::del_item): Drop last argument.  Don't write to registry.
	Disallow to remove a system mount point.
	(mount): Enforce user mount.
	(cygwin_umount): Ditto.
	* shared_info.h (mount_info::add_item): Drop last argument.
	(mount_info::del_item): Ditto.
	(mount_info::add_reg_mount): Remove.
	(mount_info::del_reg_mount): Remove.
	(mount_info::write_cygdrive_info): Rename from
	mount_info::write_cygdrive_info_to_registry.
	(mount_info::remove_cygdrive_info_from_registry): Remove.
@
text
@d73 1
a73 1
# options are binary, text, system, user, exec, notexec, cygexec, nosuid,
d75 1
a75 1
# that  system mount  points  are  not overridable  by  a  later  call to
d77 1
a77 1
# are by default system mount points, unless you specify the option user.
d114 2
a115 2
${CYGROOT//\\//}/bin /usr/bin ${FS_TYPE} binary,system 0 0
${CYGROOT//\\//}/lib /usr/lib ${FS_TYPE} binary,system 0 0
@

