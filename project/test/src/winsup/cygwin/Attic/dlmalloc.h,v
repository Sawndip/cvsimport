head	1.5;
access;
symbols
	cygwin-1_7_33-release:1.4
	cygwin-1_7_32-release:1.4
	cygwin-1_7_31-release:1.4
	cygwin-1_7_30-release:1.4
	cygwin-1_7_29-release:1.4
	cygwin-1_7_29-release-branchpoint:1.4.0.26
	cygwin-pre-user-db:1.4
	cygwin-1_7_28-release:1.4
	cygwin-1_7_27-release:1.4
	cygwin-1_7_26-release:1.4
	cygwin-1_7_25-release:1.4
	cygwin-1_7_24-release:1.4
	cygwin-1_7_23-release:1.4
	cygwin-1_7_22-release:1.4
	cygwin-1_7_21-release:1.4
	cygwin-1_7_20-release:1.4
	cygwin-1_7_19-release:1.4
	cygwin-64bit-postmerge:1.4
	cygwin-64bit-premerge-branch:1.4.0.24
	cygwin-64bit-premerge:1.4
	cygwin-1_7_18-release:1.4
	post-ptmalloc3:1.4
	pre-ptmalloc3:1.4
	cygwin-1_7_17-release:1.4
	cygwin-64bit-branch:1.4.0.22
	cygwin-1_7_16-release:1.4
	cygwin-1_7_15-release:1.4
	cygwin-1_7_14_2-release:1.4
	cygwin-1_7_14-release:1.4
	cygwin-1_7_12-release:1.4
	cygwin-1_7_11-release:1.4
	cygwin-1_7_10-release:1.4
	signal-rewrite:1.4.0.20
	pre-notty:1.4
	cygwin-1_7_9-release:1.4
	cv-post-1_7_9:1.4.0.18
	cygwin-1_7_8-release:1.4
	cygwin-1_7_7-release:1.4
	cygwin-1_7_5-release:1.4
	cygwin-1_7_4-release:1.4
	cygwin-1_7_3-release:1.4
	cygwin-1_7_2-release:1.4
	fifo_doover3:1.4.0.16
	cygwin-1_7_1-release:1.4
	prefifo:1.4
	cv-branch-2:1.4.0.14
	pre-ripout-set_console_state_for_spawn:1.4
	EOL_registry_mounts:1.4
	preoverlapped:1.4
	drop_9x_support_start:1.4
	cr-0x5f1:1.4.0.12
	cv-branch:1.4.0.10
	pre-ptymaster-archetype:1.4
	cr-0x3b58:1.4.0.8
	cr-0x5ef:1.4.0.6
	after-mmap-privanon-noreserve:1.4
	after-mmap-revamp:1.4
	before-mmap-revamp:1.4
	cgf-more-exit-sync:1.4
	post_wait_sig_exit:1.4
	pre_wait_sig_exit:1.4
	reparent-point:1.4
	noreparent:1.4.0.4
	cr-0x5e6:1.4.0.2
	cr-0x9e:1.3.0.10
	cr-0x9d:1.3.0.8
	cgf-deleteme:1.3.0.6
	pre-sigrewrite:1.3
	corinna-01:1.3
	cr-0x9c:1.3.0.4
	cr-0x9b:1.3.0.2
	cr-0x99:1.3
	Z-emcb-cygwin_daemon:1.2.0.2
	w32api-2_2:1.2
	mingw-runtime-2_4:1.2
	pre-cgf-merge:1.3
	cgf-dev-branch:1.2.0.56
	predaemon:1.2
	cygwin_daemon_merge_HEAD:1.2
	pregp02r1:1.2.0.34
	cygnus_cvs_20020108_pre:1.2
	Z-cygwin_daemon_merge-new_HEAD:1.2
	Z-cygwin_daemon_merge_HEAD:1.2
	cygwin_daemon:1.2.0.4;
locks; strict;
comment	@ * @;
expand	@o@;


1.5
date	2014.08.14.17.36.24;	author corinna;	state dead;
branches;
next	1.4;

1.4
date	2004.01.20.19.36.34;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2003.08.31.18.26.58;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.24.22.26.50;	author cgf;	state Exp;
branches
	1.2.56.1;
next	1.1;

1.1
date	2001.04.24.15.25.30;	author duda;	state Exp;
branches;
next	;

1.2.56.1
date	2003.09.02.02.31.08;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.5
log
@	* dlmalloc.c: Remove unused file.
	* dlmalloc.h: Ditto.
	* malloc.cc: Update to Doug Lea's malloc version 2.8.6.
@
text
@
/*
 * Header file for BBCized version of Doug Lea's malloc.c, automatically
 * generated by
 *  /source/prod/libbbc/compat/dlmalloc/cvt
 * from
 *  /source/prod/libbbc/compat/dlmalloc/malloc.c
 *
 * bbclabel: autogenerated
 */
#define _INCLUDE_MALLOC_H_ 1
void malloc_outofmem(void (*)(void));


struct mallinfo {
  int arena;    /* total space allocated from system */
  int ordblks;  /* number of non-inuse chunks */
  int smblks;   /* unused -- always zero */
  int hblks;    /* number of mmapped regions */
  int hblkhd;   /* total space in mmapped regions */
  int usmblks;  /* unused -- always zero */
  int fsmblks;  /* unused -- always zero */
  int uordblks; /* total allocated space */
  int fordblks; /* total non-inuse space */
  int keepcost; /* top-most, releasable (via malloc_trim) space */
};


#define M_MXFAST  1    /* UNUSED in this malloc */
#define M_NLBLKS  2    /* UNUSED in this malloc */
#define M_GRAIN   3    /* UNUSED in this malloc */
#define M_KEEP    4    /* UNUSED in this malloc */


#define M_TRIM_THRESHOLD    -1
#define M_TOP_PAD           -2
#define M_MMAP_THRESHOLD    -3
#define M_MMAP_MAX          -4
#define M_SCANHEAP	    -5
#define M_FILL

#ifdef MALLOC_DEBUG

#define dlmalloc(size)		malloc_dbg(size, __FILE__, __LINE__)
#define dlfree(p)			free_dbg(p, __FILE__, __LINE__)
#define dlrealloc(p, size)	realloc_dbg(p, size, __FILE__, __LINE__)
#define dlcalloc(n, size)		calloc_dbg(n, size, __FILE__, __LINE__)
#define dlmemalign(align, size)	memalign_dbg(align, size, __FILE__, __LINE__)
#define dlvalloc(size)		valloc_dbg(size, __FILE__, __LINE__)
#define dlpvalloc(size)		pvalloc_dbg(size, __FILE__, __LINE__)
#define dlmalloc_trim(pad)	malloc_trim_dbg(pad, __FILE__, __LINE__)
#define dlmalloc_usable_size(p)	malloc_usable_size_dbg(p, __FILE__, __LINE__)
#define dlmalloc_stats()		malloc_stats_dbg(__FILE__, __LINE__)
#define dlmallopt(flag, val)	mallopt_dbg(flag, val, __FILE__, __LINE__)
#define dlmallinfo()		mallinfo_dbg(__FILE__, __LINE__)


#ifdef __cplusplus
extern "C" {
#endif
void* malloc_dbg(size_t, const char *, int);
void    free_dbg(void*, const char *, int);
void* realloc_dbg(void*, size_t, const char *, int);
void* calloc_dbg(size_t, size_t, const char *, int);
void* memalign_dbg(size_t, size_t, const char *, int);
void* valloc_dbg(size_t, const char *, int);
void* pvalloc_dbg(size_t, const char *, int);
int     malloc_trim_dbg(size_t, const char *, int);
size_t  malloc_usable_size_dbg(void*, const char *, int);
void    malloc_stats_dbg(const char *, int);
int     mallopt_dbg(int, int, const char *, int);
struct mallinfo mallinfo_dbg(const char *, int);
#ifdef __cplusplus
}
#endif

#endif /* MALLOC_DEBUG */

#ifndef MALLOC_DEBUG

void* malloc(size_t);
void    free(void*);
void* realloc(void*, size_t);
void* calloc(size_t, size_t);
void* memalign(size_t, size_t);
void* valloc(size_t);
void* pvalloc(size_t);
int     malloc_trim(size_t);
size_t  malloc_usable_size(void*);
void    malloc_stats(void);
int     mallopt(int, int);
struct mallinfo mallinfo(void);
#endif /* !MALLOC_DEBUG */
@


1.4
log
@* include/cygwin/version.h: Bump DLL minor number to 8.
* cygmalloc.h: Make more concessions to attempts to get debugging malloc
working.
* debug.h: Ditto.
* dlmalloc.cc: Ditto.
* dlmalloc.h: Ditto.
* malloc_wrapper.cc: Ditto.
* perthread.h (perthread::create): Use calloc to ensure zeroed memory.
@
text
@@


1.3
log
@* Makefile.in (MALLOC_OFILES): Always fill in with correct malloc object.
* configure.in: Fill in MALLOC_OFILES with either debugging or regular malloc.
* configure: Regenerate.
* dlmalloc.c: Make various fruitless changes to attempt to get to work.
* dlmalloc.h: Ditto.
* malloc.cc (free): Check malloc pool when debugging.
* path.cc (win32_device_name): Eliminate compiler warning.
* sigproc.cc (sig_dispatch_pending): Remove use of was_pending.  Let
thisframe.call_signal_handler decide if handler should be called rather than
using bogus was_pending check.
* exceptions.cc (interrupt_setup): Remove accidentally checked in debugging
code.
* heap.cc (sbrk): Save rounded addess in user_heap_max.
@
text
@d44 12
a55 12
#define dmalloc(size)		malloc_dbg(size, __FILE__, __LINE__)
#define dfree(p)			free_dbg(p, __FILE__, __LINE__)
#define drealloc(p, size)	realloc_dbg(p, size, __FILE__, __LINE__)
#define dcalloc(n, size)		calloc_dbg(n, size, __FILE__, __LINE__)
#define dmemalign(align, size)	memalign_dbg(align, size, __FILE__, __LINE__)
#define dvalloc(size)		valloc_dbg(size, __FILE__, __LINE__)
#define dpvalloc(size)		pvalloc_dbg(size, __FILE__, __LINE__)
#define dmalloc_trim(pad)	malloc_trim_dbg(pad, __FILE__, __LINE__)
#define dmalloc_usable_size(p)	malloc_usable_size_dbg(p, __FILE__, __LINE__)
#define dmalloc_stats()		malloc_stats_dbg(__FILE__, __LINE__)
#define dmallopt(flag, val)	mallopt_dbg(flag, val, __FILE__, __LINE__)
#define dmallinfo()		mallinfo_dbg(__FILE__, __LINE__)
@


1.2
log
@forced commit
@
text
@d11 1
a11 1

d44 12
a55 13
#define malloc(size)		malloc_dbg(size, __FILE__, __LINE__)
#define free(p)			free_dbg(p, __FILE__, __LINE__)
#define realloc(p, size)	realloc_dbg(p, size, __FILE__, __LINE__)
#define calloc(n, size)		calloc_dbg(n, size, __FILE__, __LINE__)
#define memalign(align, size)	memalign_dbg(align, size, __FILE__, __LINE__)
#define valloc(size)		valloc_dbg(size, __FILE__, __LINE__)
#define pvalloc(size)		pvalloc_dbg(size, __FILE__, __LINE__)
#define cfree(p)		cfree_dbg(p, __FILE__, __LINE__)
#define malloc_trim(pad)	malloc_trim_dbg(pad, __FILE__, __LINE__)
#define malloc_usable_size(p)	malloc_usable_size_dbg(p, __FILE__, __LINE__)
#define malloc_stats()		malloc_stats_dbg(__FILE__, __LINE__)
#define mallopt(flag, val)	mallopt_dbg(flag, val, __FILE__, __LINE__)
#define mallinfo()		mallinfo_dbg(__FILE__, __LINE__)
a67 1
void    cfree_dbg(void*, const char *, int);
a87 1
void    cfree(void*);
@


1.2.56.1
log
@merge from trunk
@
text
@d11 1
a11 1
#define _INCLUDE_MALLOC_H_ 1
d44 13
a56 12
#define dmalloc(size)		malloc_dbg(size, __FILE__, __LINE__)
#define dfree(p)			free_dbg(p, __FILE__, __LINE__)
#define drealloc(p, size)	realloc_dbg(p, size, __FILE__, __LINE__)
#define dcalloc(n, size)		calloc_dbg(n, size, __FILE__, __LINE__)
#define dmemalign(align, size)	memalign_dbg(align, size, __FILE__, __LINE__)
#define dvalloc(size)		valloc_dbg(size, __FILE__, __LINE__)
#define dpvalloc(size)		pvalloc_dbg(size, __FILE__, __LINE__)
#define dmalloc_trim(pad)	malloc_trim_dbg(pad, __FILE__, __LINE__)
#define dmalloc_usable_size(p)	malloc_usable_size_dbg(p, __FILE__, __LINE__)
#define dmalloc_stats()		malloc_stats_dbg(__FILE__, __LINE__)
#define dmallopt(flag, val)	mallopt_dbg(flag, val, __FILE__, __LINE__)
#define dmallinfo()		mallinfo_dbg(__FILE__, __LINE__)
d69 1
d90 1
@


1.1
log
@* dlmalloc.c: New file. Port of Doug Lea's malloc
* dlmalloc.h: Ditto.
* Makefile.in: Add support for MALLOC_DEBUG
* config.h.in: Ditto.
* winsup.h: Ditto.
* configure.in: Add --enable-malloc-debugging option.
* configure: Regenerate.
* debug.h: Include declarations for debugging malloc.
* tty.cc (grantpt): Fix definition.
(unlockpt): Ditto.
@
text
@@

