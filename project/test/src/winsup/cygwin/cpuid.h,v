head	1.4;
access;
symbols
	cygwin-1_7_35-release:1.4
	cygwin-1_7_34-release:1.4
	cygwin-1_7_33-release:1.3.2.1
	cygwin-1_7_32-release:1.3.2.1
	cygwin-1_7_31-release:1.3
	cygwin-1_7_30-release:1.3
	cygwin-1_7_29-release:1.3
	cygwin-1_7_29-release-branchpoint:1.3.0.2
	cygwin-pre-user-db:1.3
	cygwin-1_7_28-release:1.3
	cygwin-1_7_27-release:1.3
	cygwin-1_7_26-release:1.3
	cygwin-1_7_25-release:1.3
	cygwin-1_7_24-release:1.3
	cygwin-1_7_23-release:1.3
	cygwin-1_7_22-release:1.3
	cygwin-1_7_21-release:1.3
	cygwin-1_7_20-release:1.3
	cygwin-1_7_19-release:1.3
	cygwin-64bit-postmerge:1.3
	cygwin-64bit-premerge-branch:1.2.0.22
	cygwin-64bit-premerge:1.2
	cygwin-1_7_18-release:1.2
	post-ptmalloc3:1.2.20.1
	pre-ptmalloc3:1.2.20.1
	cygwin-1_7_17-release:1.2
	cygwin-64bit-branch:1.2.0.20
	cygwin-1_7_16-release:1.2
	cygwin-1_7_15-release:1.2
	cygwin-1_7_14_2-release:1.2
	cygwin-1_7_14-release:1.2
	cygwin-1_7_12-release:1.2
	cygwin-1_7_11-release:1.2
	cygwin-1_7_10-release:1.2
	signal-rewrite:1.2.0.18
	pre-notty:1.2
	cygwin-1_7_9-release:1.2
	cv-post-1_7_9:1.2.0.16
	cygwin-1_7_8-release:1.2
	cygwin-1_7_7-release:1.2
	cygwin-1_7_5-release:1.2
	cygwin-1_7_4-release:1.2
	cygwin-1_7_3-release:1.2
	cygwin-1_7_2-release:1.2
	fifo_doover3:1.2.0.14
	cygwin-1_7_1-release:1.2
	prefifo:1.2
	cv-branch-2:1.2.0.12
	pre-ripout-set_console_state_for_spawn:1.2
	EOL_registry_mounts:1.2
	preoverlapped:1.2
	drop_9x_support_start:1.2
	cr-0x5f1:1.2.0.10
	cv-branch:1.2.0.8
	pre-ptymaster-archetype:1.2
	cr-0x3b58:1.2.0.6
	cr-0x5ef:1.2.0.4
	after-mmap-privanon-noreserve:1.2
	after-mmap-revamp:1.2
	before-mmap-revamp:1.2
	cgf-more-exit-sync:1.2
	post_wait_sig_exit:1.2
	pre_wait_sig_exit:1.2
	reparent-point:1.2
	noreparent:1.2.0.2
	cr-0x5e6:1.1.0.16
	cr-0x9e:1.1.0.14
	cr-0x9d:1.1.0.12
	cgf-deleteme:1.1.0.10
	pre-sigrewrite:1.1
	corinna-01:1.1
	cr-0x9c:1.1.0.8
	cr-0x9b:1.1.0.6
	cr-0x99:1.1
	Z-emcb-cygwin_daemon:1.1.0.4
	pre-cgf-merge:1.1
	cgf-dev-branch:1.1.0.2;
locks; strict;
comment	@ * @;


1.4
date	2014.08.11.12.03.18;	author corinna;	state Exp;
branches;
next	1.3;

1.3
date	2013.04.23.09.44.31;	author corinna;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2004.05.28.19.50.05;	author cgf;	state Exp;
branches
	1.2.20.1;
next	1.1;

1.1
date	2003.04.16.03.03.44;	author cgf;	state Exp;
branches
	1.1.2.1;
next	;

1.3.2.1
date	2014.08.13.17.39.10;	author corinna;	state Exp;
branches;
next	;

1.2.20.1
date	2012.11.05.17.20.19;	author corinna;	state Exp;
branches;
next	;

1.1.2.1
date	2003.05.10.17.20.52;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.4
log
@	* cpuid.h: Add missing copyright header.  Fix formatting.  Use uint32_t
	instead of unsigned throughout.  Change functions to static inline and
	always inline.
	(cpuid): Add parameter to set ecx, allowing to request extended CPUID
	info.
	* fhandler_proc.cc (format_proc_cpuinfo): Use uint32_t instead of
	unsigned throughout.  Add fake decimal places to MHz info.  Handle more
	feature flags.
	* fhandler_random.cc (fhandler_dev_random::write): Allow up to 4K
	input to add entropy.
	* syscalls.cc: Drop including cpuid.h.
@
text
@/* cpuid.h: Define cpuid instruction

   Copyright 2003, 2012, 2014 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#ifndef CPUID_H
#define CPUID_H

static inline void __attribute ((always_inline))
cpuid (uint32_t *a, uint32_t *b, uint32_t *c, uint32_t *d, uint32_t ain,
       uint32_t cin = 0)
{
  asm volatile ("cpuid"
		: "=a" (*a), "=b" (*b), "=c" (*c), "=d" (*d)
		: "a" (ain), "c" (cin));
}

#ifdef __x86_64__
static inline bool __attribute ((always_inline))
can_set_flag (register uint32_t long flag)
{
  register uint32_t long r1, r2;

  asm volatile ("pushfq\n"
		"popq %0\n"
		"movq %0, %1\n"
		"xorq %2, %0\n"
		"pushq %0\n"
		"popfq\n"
		"pushfq\n"
		"popq %0\n"
		"pushq %1\n"
		"popfq\n"
		: "=&r" (r1), "=&r" (r2)
		: "ir" (flag)
  );
  return ((r1 ^ r2) & flag) != 0;
}
#else
static inline bool __attribute ((always_inline))
can_set_flag (register uint32_t flag)
{
  register uint32_t r1, r2;

  asm volatile ("pushfl\n"
		"popl %0\n"
		"movl %0, %1\n"
		"xorl %2, %0\n"
		"pushl %0\n"
		"popfl\n"
		"pushfl\n"
		"popl %0\n"
		"pushl %1\n"
		"popfl\n"
		: "=&r" (r1), "=&r" (r2)
		: "ir" (flag)
  );
  return ((r1 ^ r2) & flag) != 0;
}
#endif

#endif // !CPUID_H
@


1.3
log
@	* Merge in cygwin-64bit-branch.
@
text
@d1 10
d14 3
a16 2
extern inline void
cpuid (unsigned *a, unsigned *b, unsigned *c, unsigned *d, unsigned in)
d18 3
a20 6
  asm ("cpuid"
       : "=a" (*a),
	 "=b" (*b),
	 "=c" (*c),
	 "=d" (*d)
       : "a" (in));
d24 2
a25 2
extern inline bool
can_set_flag (register unsigned long flag)
d27 14
a40 13
  register unsigned long r1, r2;
  asm("pushfq\n"
      "popq %0\n"
      "movq %0, %1\n"
      "xorq %2, %0\n"
      "pushq %0\n"
      "popfq\n"
      "pushfq\n"
      "popq %0\n"
      "pushq %1\n"
      "popfq\n"
      : "=&r" (r1), "=&r" (r2)
      : "ir" (flag)
d45 2
a46 2
extern inline bool
can_set_flag (register unsigned flag)
d48 14
a61 13
  register unsigned r1, r2;
  asm("pushfl\n"
      "popl %0\n"
      "movl %0, %1\n"
      "xorl %2, %0\n"
      "pushl %0\n"
      "popfl\n"
      "pushfl\n"
      "popl %0\n"
      "pushl %1\n"
      "popfl\n"
      : "=&r" (r1), "=&r" (r2)
      : "ir" (flag)
@


1.3.2.1
log
@2014-08-11  Corinna Vinschen  <corinna@@vinschen.de>

	* cpuid.h: Add missing copyright header.  Fix formatting.  Use uint32_t
	instead of unsigned throughout.  Change functions to static inline and
	always inline.
	(cpuid): Add parameter to set ecx, allowing to request extended CPUID
	info.
	* fhandler_proc.cc (format_proc_cpuinfo): Use uint32_t instead of
	unsigned throughout.  Add fake decimal places to MHz info.  Handle more
	feature flags.
	* fhandler_random.cc (fhandler_dev_random::write): Allow up to 4K
	input to add entropy.
	* syscalls.cc: Drop including cpuid.h.

2014-08-07  Yaakov Selkowitz  <yselkowi@@redhat.com>

	* common.din (__cxa_finalize): Export.
	* dcrt0.cc (cygwin_atexit): Use d->handle with __cxa_atexit.
	* dll_init.cc (dll_list::detach): Use d->handle with __cxa_finalize.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Use 274 for
	__cxa_finalize as well.

2014-08-04  Anthony Heading  <anthony@@ajrh.net>

	* include/sys/file.h: Add extern "C".

2014-08-04  Corinna Vinschen  <corinna@@vinschen.de>

	* common.din (__cxa_atexit): Export.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump to 274.

2014-07-31  Eric Blake  <eblake@@redhat.com>

	* include/pthread.h: Decorate attribute names with __, for
	namespace safety.
	* include/cygwin/core_dump.h: Likewise.
	* include/cygwin/cygwin_dll.h: Likewise.
	* include/sys/cygwin.h: Likewise.
	* include/sys/strace.h: Likewise.
@
text
@a0 10
/* cpuid.h: Define cpuid instruction

   Copyright 2003, 2012, 2014 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

d4 2
a5 3
static inline void __attribute ((always_inline))
cpuid (uint32_t *a, uint32_t *b, uint32_t *c, uint32_t *d, uint32_t ain,
       uint32_t cin = 0)
d7 6
a12 3
  asm volatile ("cpuid"
		: "=a" (*a), "=b" (*b), "=c" (*c), "=d" (*d)
		: "a" (ain), "c" (cin));
d16 2
a17 2
static inline bool __attribute ((always_inline))
can_set_flag (register uint32_t long flag)
d19 13
a31 14
  register uint32_t long r1, r2;

  asm volatile ("pushfq\n"
		"popq %0\n"
		"movq %0, %1\n"
		"xorq %2, %0\n"
		"pushq %0\n"
		"popfq\n"
		"pushfq\n"
		"popq %0\n"
		"pushq %1\n"
		"popfq\n"
		: "=&r" (r1), "=&r" (r2)
		: "ir" (flag)
d36 2
a37 2
static inline bool __attribute ((always_inline))
can_set_flag (register uint32_t flag)
d39 13
a51 14
  register uint32_t r1, r2;

  asm volatile ("pushfl\n"
		"popl %0\n"
		"movl %0, %1\n"
		"xorl %2, %0\n"
		"pushl %0\n"
		"popfl\n"
		"pushfl\n"
		"popl %0\n"
		"pushl %1\n"
		"popfl\n"
		: "=&r" (r1), "=&r" (r2)
		: "ir" (flag)
@


1.2
log
@* path.cc (chdir): Always use the normalized_path as posix_cwd, except if it
starts with a drive.

Also perform whitespace cleanup.
@
text
@d15 1
d17 1
a17 1
can_set_flag (unsigned flag)
d19 21
a39 1
  unsigned r1, r2;
d55 1
@


1.2.20.1
log
@	* cpuid.h (can_set_flag): Implement for x86_64.
	* fhandler.h (class fhandler_dev_raw): Define devbuf members taking
	numerical values as DWORD, rather than size_t.
	* fhandler_dsp.cc: Fix debug printf calls to be type safe.
	(waveOut_callback): Align parameter types to latest MSDN description.
	(waveIn_callback): Ditto.
	(fhandler_dev_dsp::Audio_out::start): Change casts in call to
	waveOutOpen according to MSDN.
	(fhandler_dev_dsp::Audio_out::parsewav): Fix a cast.
	(fhandler_dev_dsp::Audio_in::start): Change casts in call to
	waveInOpen according to MSDN.
	* fhandler_floppy.cc: Fix debug printf calls to be type safe.
	(fhandler_dev_floppy::ioctl): Add casts to be on the safe side.
	* fhandler_proc.cc: Fix debug printf calls to be type safe.
@
text
@a14 1
#ifdef __x86_64__
d16 1
a16 1
can_set_flag (register unsigned long flag)
d18 1
a18 21
  register unsigned long r1, r2;
  asm("pushfq\n"
      "popq %0\n"
      "movq %0, %1\n"
      "xorq %2, %0\n"
      "pushq %0\n"
      "popfq\n"
      "pushfq\n"
      "popq %0\n"
      "pushq %1\n"
      "popfq\n"
      : "=&r" (r1), "=&r" (r2)
      : "ir" (flag)
  );
  return ((r1 ^ r2) & flag) != 0;
}
#else
extern inline bool
can_set_flag (register unsigned flag)
{
  register unsigned r1, r2;
a33 1
#endif
@


1.1
log
@* termios.cc (setspeed): New function.
(cfsetospeed): Use setspeed to set speed.
(cfsetispeed): Use setspeed to set speed.
* autoload.cc: Add load statement for UuidCreate, and UuidCreateSequential.
* cpuid.h: New file.
* cygwin.din: Export gethostid.
* fhandler_proc.cc (cpuid): Move to cpuid.h.
(can_set_flag): Move to cpuid.h.
* syscalls.cc (gethostid): New function.
* version.h: Bump DLL minor version number to 83.
@
text
@d9 3
a11 3
         "=b" (*b),
         "=c" (*c),
         "=d" (*d)
@


1.1.2.1
log
@merge from trunk
@
text
@@

