head	1.7;
access;
symbols
	cygwin-1_7_35-release:1.7
	cygwin-1_7_34-release:1.7
	cygwin-1_7_33-release:1.7
	cygwin-1_7_32-release:1.7
	cygwin-1_7_31-release:1.7
	cygwin-1_7_30-release:1.7
	cygwin-1_7_29-release:1.7
	cygwin-1_7_29-release-branchpoint:1.7.0.12
	cygwin-pre-user-db:1.7
	cygwin-1_7_28-release:1.7
	cygwin-1_7_27-release:1.7
	cygwin-1_7_26-release:1.7
	cygwin-1_7_25-release:1.7
	cygwin-1_7_24-release:1.7
	cygwin-1_7_23-release:1.7
	cygwin-1_7_22-release:1.7
	cygwin-1_7_21-release:1.7
	cygwin-1_7_20-release:1.7
	cygwin-1_7_19-release:1.7
	cygwin-64bit-postmerge:1.7
	cygwin-64bit-premerge-branch:1.7.0.10
	cygwin-64bit-premerge:1.7
	cygwin-1_7_18-release:1.7
	post-ptmalloc3:1.7
	pre-ptmalloc3:1.7
	cygwin-1_7_17-release:1.7
	cygwin-64bit-branch:1.7.0.8
	cygwin-1_7_16-release:1.7
	cygwin-1_7_15-release:1.7
	cygwin-1_7_14_2-release:1.7
	cygwin-1_7_14-release:1.7
	cygwin-1_7_12-release:1.7
	cygwin-1_7_11-release:1.7
	cygwin-1_7_10-release:1.7
	signal-rewrite:1.7.0.6
	pre-notty:1.7
	cygwin-1_7_9-release:1.7
	cv-post-1_7_9:1.7.0.4
	cygwin-1_7_8-release:1.7
	cygwin-1_7_7-release:1.7
	cygwin-1_7_5-release:1.7
	cygwin-1_7_4-release:1.7
	cygwin-1_7_3-release:1.7
	cygwin-1_7_2-release:1.7
	fifo_doover3:1.7.0.2
	cygwin-1_7_1-release:1.7
	prefifo:1.5
	cv-branch-2:1.4.0.2
	pre-ripout-set_console_state_for_spawn:1.3
	EOL_registry_mounts:1.3
	preoverlapped:1.3
	drop_9x_support_start:1.3
	cr-0x5f1:1.3.0.8
	cv-branch:1.3.0.6
	pre-ptymaster-archetype:1.3
	cr-0x3b58:1.3.0.4
	cr-0x5ef:1.3.0.2
	after-mmap-privanon-noreserve:1.3
	after-mmap-revamp:1.3
	before-mmap-revamp:1.3
	cgf-more-exit-sync:1.3
	post_wait_sig_exit:1.3
	pre_wait_sig_exit:1.3
	reparent-point:1.2
	noreparent:1.2.0.14
	cr-0x5e6:1.2.0.12
	cr-0x9e:1.2.0.10
	cr-0x9d:1.2.0.8
	cgf-deleteme:1.2.0.6
	pre-sigrewrite:1.2
	corinna-01:1.2
	cr-0x9c:1.2.0.4
	cr-0x9b:1.2.0.2
	cr-0x99:1.1
	Z-emcb-cygwin_daemon:1.1.0.2
	w32api-2_2:1.1
	mingw-runtime-2_4:1.1
	pre-cgf-merge:1.2
	cgf-dev-branch:1.1.0.4;
locks; strict;
comment	@// @;


1.7
date	2009.08.13.07.35.49;	author corinna;	state Exp;
branches;
next	1.6;

1.6
date	2009.08.04.04.20.36;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.07.20.12.44;	author davek;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.03.05.12.20;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.19.21.45.14;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.04.03.01.35;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2002.12.04.20.36.23;	author corinna;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2003.09.10.16.23.39;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.7
log
@	* cxx.cc (default_cygwin_cxx_malloc): Enhance commenting.
	* dll_init.cc (dll_dllcrt0_1): Likewise.
	* dlfcn.cc (dlopen): Prevent dlopen()'d DLL from installing any
	cxx malloc overrides.
	* include/cygwin/cygwin_dll.h (__dynamically_loaded): New variable.
	* lib/_cygwin_crt0_common.cc (_cygwin_crt0_common): Check it and only
	install cxx malloc overrides when statically loaded.  Extend comments.
@
text
@/* cxx.cc

   Copyright 2002, 2003, 2005, 2009 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#if (__GNUC__ >= 3)

#include "winsup.h"
#include "cygwin-cxx.h"

/* These implementations of operators new and delete are used internally by
   the DLL, and are kept separate from the user's/libstdc++'s versions by
   use of LD's --wrap option.  */

void *
operator new (std::size_t s)
{
  void *p = calloc (1, s);
  return p;
}

void
operator delete (void *p)
{
  free (p);
}

void *
operator new[] (std::size_t s)
{
  return ::operator new (s);
}

void
operator delete[] (void *p)
{
  ::operator delete (p);
}

/* Nothrow versions, provided only for completeness in the fallback array.  */

void *
operator new (std::size_t s, const std::nothrow_t &)
{
  void *p = calloc (1, s);
  return p;
}

void
operator delete (void *p, const std::nothrow_t &)
{
  free (p);
}

void *
operator new[] (std::size_t s, const std::nothrow_t &nt)
{
  return ::operator new (s, nt);
}

void
operator delete[] (void *p, const std::nothrow_t &nt)
{
  ::operator delete (p, nt);
}


extern "C" void
__cxa_pure_virtual (void)
{
  api_fatal ("pure virtual method called");
}

extern "C" void
__cxa_guard_acquire ()
{
}

extern "C" void
__cxa_guard_release ()
{
}

/* These routines are made available as last-resort fallbacks
   for the application.  Should not be used in practice; the
   entries in this struct get overwritten by each DLL as it
   is loaded, and libstdc++ will override the whole lot first
   thing of all.   */

struct per_process_cxx_malloc default_cygwin_cxx_malloc =
{
  &(operator new),
  &(operator new[]),
  &(operator delete),
  &(operator delete[]),
  &(operator new),
  &(operator new[]),
  &(operator delete),
  &(operator delete[]),
};


#endif
@


1.6
log
@* fhandler.h (fhandler_cygdrive:DRVSZ): New enum.
(pdrive_buf): New place to hold information about cygdrive.
* fhandler_disk_file.cc (fhandler_cygdrive::set_drives): Store drive info in
pdrive_buf since get_win32_name() could now be too small to hold everything.
(fhandler_cygdrive::rewinddir): Reset pdrive to pdrive_buf.
(fhandler_cygdrive::closedir): Ditto.
* pipe.cc (fhandler_pipe::init): Be more defensive when referencing
get_win32_name().  Rework logic which made a copy of the POSIX path and then
never used it.
@
text
@d90 4
a93 1
   for the application.  Should not be used in practice.  */
@


1.5
log
@winsup/ChangeLog:

	* Makefile.common (COMPILE_CXX): Add support for per-file overrides
	to exclude $(nostdinc) and $(nostdincxx) from compiler flags.
	(COMPILE_CC): Likewise for $(nostdinc).

winsup/cygwin/ChangeLog:

	* Makefile.in (DLL_OFILES): Add libstdcxx_wrapper.o
	(libstdcxx_wrapper_CFLAGS): Add flags for new module.
	(_cygwin_crt0_common_STDINCFLAGS): Define per-file override.
	(libstdcxx_wrapper_STDINCFLAGS, cxx_STDINCFLAGS): Likewise.
	* cxx.cc: Include "cygwin-cxx.h".
	(operator new): Tweak prototype for full standards compliance.
	(operator new[]): Likewise.
	(operator new (nothrow)): New fallback function.
	(operator new[] (nothrow), operator delete (nothrow),
	operator delete[] (nothrow)): Likewise.
	(default_cygwin_cxx_malloc): New struct of pointers to the above,
	for final last-resort fallback default.
	* cygwin-cxx.h: New file.
	(struct per_process_cxx_malloc): Define.
	(default_cygwin_cxx_malloc): Declare extern.
	* cygwin.din (__wrap__ZdaPv): Export new wrapper.
	(__wrap__ZdaPvRKSt9nothrow_t, __wrap__ZdlPv,
	__wrap__ZdlPvRKSt9nothrow_t, __wrap__Znaj,
	__wrap__ZnajRKSt9nothrow_t, __wrap__Znwj,
	__wrap__ZnwjRKSt9nothrow_t): Likewise.
	* globals.cc (__cygwin_user_data): Init newly-repurposed 'forkee'
	field (now 'cxx_malloc') to point to default_cygwin_cxx_malloc.
	* libstdcxx_wrapper.cc: New file.
	(__wrap__ZdaPv, __wrap__ZdaPvRKSt9nothrow_t, __wrap__ZdlPv,
	__wrap__ZdlPvRKSt9nothrow_t, __wrap__Znaj,
	__wrap__ZnajRKSt9nothrow_t, __wrap__Znwj,
	__wrap__ZnwjRKSt9nothrow_t): Define wrapper functions for libstdc++
	malloc operators and their overrides.
	* winsup.h (default_cygwin_cxx_malloc): Declare extern.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
	* include/sys/cygwin.h (struct per_process_cxx_malloc): Forward
	declare here.
	(struct per_process::forkee): Rename and repurpose from this ...
	(struct per_process::cxx_malloc): ... to this.
	* lib/_cygwin_crt0_common.cc: Include cygwin-cxx.h.
	(WEAK): Define shorthand helper macro.
	(__cygwin_cxx_malloc): Define and populate with weak references
	to whatever libstdc++ malloc operators will be visible at final
	link time for Cygwin apps and dlls.
	(_cygwin_crt0_common): Always look up cygwin DLL's internal
	per_process data, and don't test for (impossible) failure.  Inherit
	any members of __cygwin_cxx_malloc that we don't have overrides
	for from the DLL's default and store the resulting overall set of
	overrides back into the DLL's global per_process data.
@
text
@d92 1
a92 1
struct per_process_cxx_malloc default_cygwin_cxx_malloc = 
@


1.4
log
@Remove unneeded header files from source files throughout.  Update copyrights
where appropriate.
* globals.cc: New file for generic global variables.
* mkglobals_h: New file to generate globals.h.
* mkstatic: New Script used to build a (currently non-working) static
libcygwin_s.a.
* Makefile.in: Add unused rule to build a non-working libcygwin_s.a.
(DLL_OFILES): Add globals.o.  Make all objects rely on globals.h.
(globals.h): New target.  Generate globals.h.
* cygtls.h: Honor new CYGTLS_HANDLE define to control when the HANDLE operator
is allowed in _cygtls.
* dcrt0.cc: Move most globals to globals.cc.
* init.cc: Ditto.
* environ.cc (strip_title_path): Remove now-unneeded extern.
* fhandler_serial.cc (fhandler_serial::open): Ditto.
* pinfo.cc: Ditto.
(commune_process): Ditto.
* shared.cc: Ditto.
* glob.cc: Ditto.
* strace.cc: Ditto.
* exceptions.cc: Define CYGTLS_HANDLE before including winsup.h.
* path.cc (stat_suffixes): Move here.
* security.h: Add forward class path_conv declaration.
* smallprint.cc (__small_vsprintf): Make a true c++ function.
(__small_sprintf): Ditto.
(small_printf): Ditto.
(console_printf): Ditto.
(__small_vswprintf): Ditto.
(__small_swprintf): Ditto.
* spawn.cc (spawn_guts): Remove _stdcall decoration in favor of regparm.
(hExeced): Move to globals.cc
* strfuncs.cc (current_codepage): Ditto.
(active_codepage): Ditto.
* sync.cc (lock_process::locker): Move here from dcrt0.cc.
* syscalls.cc (stat_suffixes): Move to path.cc.
* tty.cc (tty::create_master): Uncapitalize fatal warning for consistency.
* winsup.h: Include globals.h to declare most of the grab bag list of globals
which were previously defined here.
* mount.h: Move USER_* defines back to shared_info.h.
* speclib: Force temporary directory cleanup.
@
text
@d14 5
d21 1
a21 1
operator new (size_t s)
d34 1
a34 1
operator new[] (size_t s)
d45 28
d88 17
@


1.3
log
@* child_info.h (fork_info): Use different method to alias variable.
(spawn_info): Ditto.
* cxx.cc (__cxa_guard_acquire): New function (needed for gcc 4.x).
(__cxa_guard_release): Ditto.
* devices.in: Make sure stuff is correctly bracketed (for gcc 4.x).
* devices.cc: Regenerate.
* fhandler.h (fhandler_disk_file::fchmod): Avoid left coercion (for gcc 4.x).
* smallprint.c (__rn): Declare as __fastcall since gcc 4.x complains about use
of regparm, for some reason.
* sync.h (sync::init_lock): Remove.
* sync.cc (sync::init_lock): Ditto.
@
text
@d3 1
a3 1
   Copyright 2002, 2003 Red Hat, Inc.
a13 1
#include <stdlib.h>
@


1.2
log
@* cxx.cc (new): Fix formatting.  Just return result of ccalloc rather than
calling memset explicitly.
@
text
@d46 10
@


1.1
log
@	* cxx.cc: New file. Implement new, new[], delete and delete[]
	operators and  __cxa_pure_virtual if compiled by gcc >=3.
	* Makefile.in (DLL_OFILES): Add cxx.o.
	Remove libstdc++.a from cygwin1.dll link step.
@
text
@d3 1
a3 1
   Copyright 2002 Red Hat, Inc.
d19 1
a19 3
  void *p = malloc (s);
  if (p)
    memset (p,0,s);
a45 1

@


1.1.4.1
log
@merge from trunk
@
text
@d3 1
a3 1
   Copyright 2002, 2003 Red Hat, Inc.
d19 3
a21 1
  void *p = calloc (1, s);
d48 1
@


