head	1.26;
access;
symbols
	cygwin-1_7_35-release:1.26
	cygwin-1_7_34-release:1.26
	cygwin-1_7_33-release:1.26
	cygwin-1_7_32-release:1.26
	cygwin-1_7_31-release:1.26
	cygwin-1_7_30-release:1.26
	cygwin-1_7_29-release:1.26
	cygwin-1_7_29-release-branchpoint:1.26.0.2
	cygwin-pre-user-db:1.26
	cygwin-1_7_28-release:1.26
	cygwin-1_7_27-release:1.26
	cygwin-1_7_26-release:1.26
	cygwin-1_7_25-release:1.26
	cygwin-1_7_24-release:1.26
	cygwin-1_7_23-release:1.26
	cygwin-1_7_22-release:1.26
	cygwin-1_7_21-release:1.26
	cygwin-1_7_20-release:1.26
	cygwin-1_7_19-release:1.26
	cygwin-64bit-postmerge:1.26
	cygwin-64bit-premerge-branch:1.25.0.8
	cygwin-64bit-premerge:1.25
	cygwin-1_7_18-release:1.25
	post-ptmalloc3:1.25.6.2
	pre-ptmalloc3:1.25.6.2
	cygwin-1_7_17-release:1.25
	cygwin-64bit-branch:1.25.0.6
	cygwin-1_7_16-release:1.25
	cygwin-1_7_15-release:1.25
	cygwin-1_7_14_2-release:1.25
	cygwin-1_7_14-release:1.25
	cygwin-1_7_12-release:1.25
	cygwin-1_7_11-release:1.25
	cygwin-1_7_10-release:1.25
	signal-rewrite:1.25.0.4
	pre-notty:1.25
	cygwin-1_7_9-release:1.25
	cv-post-1_7_9:1.25.0.2
	cygwin-1_7_8-release:1.25
	cygwin-1_7_7-release:1.24
	cygwin-1_7_5-release:1.24
	cygwin-1_7_4-release:1.24
	cygwin-1_7_3-release:1.24
	cygwin-1_7_2-release:1.24
	fifo_doover3:1.24.0.2
	cygwin-1_7_1-release:1.24
	prefifo:1.23
	cv-branch-2:1.23.0.2
	pre-ripout-set_console_state_for_spawn:1.13
	EOL_registry_mounts:1.13
	preoverlapped:1.13
	drop_9x_support_start:1.13
	cr-0x5f1:1.13.0.18
	cv-branch:1.13.0.16
	pre-ptymaster-archetype:1.13
	cr-0x3b58:1.13.0.14
	cr-0x5ef:1.13.0.12
	after-mmap-privanon-noreserve:1.13
	after-mmap-revamp:1.13
	before-mmap-revamp:1.13
	cgf-more-exit-sync:1.13
	post_wait_sig_exit:1.13
	pre_wait_sig_exit:1.13
	reparent-point:1.13
	noreparent:1.13.0.10
	cr-0x5e6:1.13.0.8
	cr-0x9e:1.13.0.6
	cr-0x9d:1.13.0.4
	cgf-deleteme:1.13.0.2
	pre-sigrewrite:1.13
	corinna-01:1.12
	cr-0x9c:1.12.0.6
	cr-0x9b:1.12.0.4
	cr-0x99:1.12
	Z-emcb-cygwin_daemon:1.12.0.2
	w32api-2_2:1.7
	mingw-runtime-2_4:1.7
	pre-cgf-merge:1.12
	cgf-dev-branch:1.7.0.24
	predaemon:1.7
	cygwin_daemon_merge_HEAD:1.7
	pregp02r1:1.7.0.2
	cygnus_cvs_20020108_pre:1.2
	Z-cygwin_daemon_merge_HEAD:1.7
	cygwin_daemon:1.2.0.2
	Z-cygwin_daemon_merge-new_HEAD:1.7;
locks; strict;
comment	@# @;


1.26
date	2013.04.23.09.44.33;	author corinna;	state Exp;
branches;
next	1.25;

1.25
date	2011.02.11.18.00.55;	author cgf;	state Exp;
branches
	1.25.6.1;
next	1.24;

1.24
date	2009.11.30.15.40.23;	author cgf;	state Exp;
branches;
next	1.23;

1.23
date	2009.04.18.17.23.45;	author cgf;	state Exp;
branches;
next	1.22;

1.22
date	2009.04.14.15.10.28;	author cgf;	state Exp;
branches;
next	1.21;

1.21
date	2009.04.14.14.28.34;	author cgf;	state Exp;
branches;
next	1.20;

1.20
date	2009.04.12.05.11.08;	author cgf;	state Exp;
branches;
next	1.19;

1.19
date	2009.04.12.03.19.52;	author cgf;	state Exp;
branches;
next	1.18;

1.18
date	2009.04.10.04.29.25;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2009.04.09.21.02.53;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2009.03.28.04.55.36;	author cgf;	state Exp;
branches;
next	1.15;

1.15
date	2009.01.03.05.12.21;	author cgf;	state Exp;
branches;
next	1.14;

1.14
date	2009.01.02.06.57.14;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2003.11.28.20.51.11;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.27.21.01.14;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2003.08.21.03.36.02;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.21.02.19.25;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2003.08.19.04.10.42;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.06.01.40.12;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2002.01.24.21.39.09;	author cgf;	state Exp;
branches
	1.7.24.1;
next	1.6;

1.6
date	2002.01.23.18.46.19;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2002.01.22.01.40.11;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2002.01.21.17.42.08;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2002.01.13.20.03.03;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2002.01.02.00.06.35;	author cgf;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2001.12.31.03.19.29;	author cgf;	state Exp;
branches;
next	;

1.25.6.1
date	2013.02.18.06.02.38;	author yselkowitz;	state Exp;
branches;
next	1.25.6.2;

1.25.6.2
date	2013.02.21.12.02.52;	author corinna;	state Exp;
branches;
next	;

1.7.24.1
date	2003.08.06.03.58.57;	author cgf;	state Exp;
branches;
next	1.7.24.2;

1.7.24.2
date	2003.08.27.20.19.55;	author cgf;	state Exp;
branches;
next	1.7.24.3;

1.7.24.3
date	2003.09.02.02.31.09;	author cgf;	state Exp;
branches;
next	;

1.2.2.1
date	2002.01.04.03.56.11;	author rbcollins;	state Exp;
branches;
next	1.2.2.2;

1.2.2.2
date	2002.01.15.12.52.52;	author rbcollins;	state Exp;
branches;
next	1.2.2.3;

1.2.2.3
date	2002.01.22.04.52.40;	author rbcollins;	state Exp;
branches;
next	1.2.2.4;

1.2.2.4
date	2002.02.28.12.53.27;	author rbcollins;	state Exp;
branches;
next	;


desc
@@


1.26
log
@	* Merge in cygwin-64bit-branch.
@
text
@#!/usr/bin/perl
use Getopt::Long;
use File::Temp qw'tempdir';
use File::Basename;
use File::Spec;
use strict;

sub dllname($;$);

my $static;
my $inverse;
my @@exclude;

my ($cpu, $ar, $as, $nm, $objcopy);
GetOptions('exclude=s'=>\@@exclude, 'static!'=>\$static, 'v!'=>\$inverse,
	   'cpu=s'=>\$cpu, 'ar=s'=>\$ar, 'as=s'=>\$as,'nm=s'=>\$nm, 'objcopy=s'=>\$objcopy);

$_ = File::Spec->rel2abs($_) for @@ARGV;

my $libdll = shift;
my $lib =  pop;
my $uscore = ($cpu eq 'x86_64' ? undef : '_');
(my $iname = basename $lib) =~ s/\.a$//o;
$iname = $uscore . $iname . '_dll_iname';

open my $nm_fd, '-|', $nm, '-Apg', '--defined-only', @@ARGV, $libdll or
  die "$0: execution of $nm for object files failed - $!\n";

my %match_syms = ();
my $symfiles = ();
my $lastfn;
my %extract = ();
my $exclude_regex = @@exclude ? join('|', @@exclude) : '\\UnLiKeLy//';
$exclude_regex = qr/$exclude_regex/;
my $dllname;
while (<$nm_fd>) {
    study;
    if (/ I _?(.*)_dll_iname/o) {
	$dllname = $1;
    } else {
	my ($file, $member, $symbol) = m%^([^:]*):([^:]*(?=:))?.* T (.*)%o;
	next if !defined($symbol) || $symbol =~ $exclude_regex;
	if ($file ne $libdll) {
	     $match_syms{$symbol} = 1;
	 } elsif ($match_syms{$symbol} ? !$inverse : $inverse) {
	     $extract{$member} = 1;
	 }
    }
}
close $nm_fd;
   

%extract or die "$0: couldn't find symbols for $lib\n";

my $dir = tempdir(CLEANUP => 1);

chdir $dir;
# print join(' ', '+', $ar, 'x', sort keys %extract), "\n";
my $res = system $ar, 'x', $libdll, sort keys %extract;
die "$0: $ar extraction exited with non-zero status\n" if $res;
unlink $lib;

# Add a dummy .idata object for libtool so that it will think
# this library is an import library.
my $iname_o = 'd000000.o';
$extract{$iname_o} = 1;
open my $as_fd, '|-', $as, '-R', '-o', $iname_o, "-";
print $as_fd <<EOF;
	.section .idata\$7
.global $iname
$iname: .asciz "$dllname.dll"
EOF
close $as_fd or exit 1;
system $objcopy, '-j', '.idata$7', $iname_o;

$res = system $ar, 'crus', $lib, sort keys %extract;
unlink keys %extract;
die "$0: ar creation of $lib exited with non-zero status\n" if $res;
exit 0;

END {
    chdir '/tmp';	# Allow $dir directory removal on Windows
}
@


1.25
log
@* mkstatic: Make sure that we are not cd'ed to temporary directory on exit to
avoid bogus warnings on directory cleanup.
* speclib: Ditto.
* mkimport: Ditto.
@
text
@d14 1
a14 1
my ($ar, $as, $nm, $objcopy);
d16 1
a16 1
	   'ar=s'=>\$ar, 'as=s'=>\$as,'nm=s'=>\$nm, 'objcopy=s'=>\$objcopy);
d22 1
d24 1
a24 1
$iname = '_' . $iname . '_dll_iname';
d38 1
a38 1
    if (/ I _(.*)_dll_iname/o) {
@


1.25.6.1
log
@* Makefile.in (libcygwin.a): Move --target flag from here...
(toolopts): to here, to be used by both mkimport and speclib.
* speclib: Omit leading underscore in symbol names on x86_64.
@
text
@d14 1
a14 1
my ($target, $ar, $as, $nm, $objcopy);
d16 1
a16 1
	   'target=s'=>\$target, 'ar=s'=>\$ar, 'as=s'=>\$as,'nm=s'=>\$nm, 'objcopy=s'=>\$objcopy);
a21 1
my $uscore = ($target =~ /^x86_64\-/ ? undef : '_');
d23 1
a23 1
$iname = $uscore . $iname . '_dll_iname';
d37 1
a37 1
    if (/ I _?(.*)_dll_iname/o) {
@


1.25.6.2
log
@	* Makefile.in (target_cpu): Define.  Check for target_cpu rather than
	target_alias for conditional compilation issues.
	(toolopts): Change --target into --cpu option and use $target_cpu as
	argument.
	($(DEF_FILE)): Call gendef with $(target_cpu) as argument, rather than
	with $(target_alias).
	* gendef: Accommodate change from --target to --cpu option.
	* mkimport: Ditto.
	* speclib: Ditto.
@
text
@d14 1
a14 1
my ($cpu, $ar, $as, $nm, $objcopy);
d16 1
a16 1
	   'cpu=s'=>\$cpu, 'ar=s'=>\$ar, 'as=s'=>\$as,'nm=s'=>\$nm, 'objcopy=s'=>\$objcopy);
d22 1
a22 1
my $uscore = ($cpu eq 'x86_64' ? undef : '_');
@


1.24
log
@* speclib: Use last dll found since that's the real name of the cygwin DLL.
@
text
@d79 4
@


1.23
log
@* mkimport: Specify .text for stub explicitly.
* speclib: Add a dummy '.idata$7' section referring to the dll associated with
the real import library.
@
text
@d38 1
a38 1
	$dllname ||= $1;
@


1.22
log
@* speclib: Really revert to using tempdir.
@
text
@d22 2
d34 1
d37 11
a47 7
    my ($file, $member, $symbol) = m%^([^:]*):([^:]*(?=:))?.* T (.*)%o;
    next if !defined($symbol) || $symbol =~ $exclude_regex;
    if ($file ne $libdll) {
	 $match_syms{$symbol} = 1;
     } elsif ($match_syms{$symbol} ? !$inverse : $inverse) {
	 $extract{$member} = 1;
     }
d50 1
d61 14
@


1.21
log
@* speclib: Revert to using tempdir.
@
text
@d3 1
a3 1
use File::Temp;
d46 1
a46 1
my $dir = File::Temp->tempdir(CLEANUP => 1);
@


1.20
log
@* speclib: Initial stab at cleaning up temp files.  More work needed.
* mkimport: Ditto.
@
text
@d46 1
a46 1
my $dir = File::Temp->newdir();
@


1.19
log
@* mkimport: New script to perform all operations necessary to create
libcygwin.a.
* rmsym: Delete.
* newsym: Delete.
* Makefile.in (toolopts): New variable which holds options relating to
binutils/gcc tools.
(speclib): Use toolopts.  Add symbols to avoid copying to special libraries.
(OBSOLETE_FUNCTIONS): Delete.
(NEW_FUNCTIONS): Change to represent an argument to new mkimport script.
(libcygwin.a): Use only new mkimport script to create libcygwin.a.  Only rely
on ${LIBCOS}.
(*/lib*.a): Simplify speclib dependencies.
(speclib): Accept toolchain options.  Convert every argument to absolute path.
Simplify parsing of nm output.  Accommodate new exclude option.
@
text
@d3 1
a3 1
use File::Temp qw'tempdir';
d46 1
a46 1
my $dir = tempdir(CLEANUP => 1);
d53 4
a56 1
exec $ar, 'crus', $lib, sort keys %extract;
@


1.18
log
@* speclib: Use a more robust method to derive full file path.
@
text
@d11 2
a12 1
my $exclude;
d14 3
a16 1
GetOptions('static!'=>\$static, 'v|exclude!'=>\$exclude);
d18 1
a18 4
my $nm = shift;
my $ar = shift;
my $libdll = File::Spec->rel2abs(shift @@ARGV);
my $lib =  File::Spec->rel2abs(pop @@ARGV);
d20 4
a23 1
open my $nm_fd, '-|', $nm, '-Ap', '--defined-only', @@ARGV, $libdll or
d30 2
d34 6
a39 11
    m%^\Q$libdll\E:([^:]*):\d+ i \.idata\$([56])% and do {
	next;
    };
    m%^\Q$libdll\E:[^:]*:\d+ I (__head_.*)$% and do {
	next;
    };
    next unless m%^([^:]*):([^:]*(?=:))?.* [DTI] (.*)%o;
    if ($1 ne $libdll) {
	 $match_syms{$3} = 1;
     } elsif ($match_syms{$3} ? !$exclude : $exclude) {
	 $extract{$2} = 1;
@


1.17
log
@* speclib: Semi-revert to previous version but don't try to generate
well-formed import library.  Instead, just extract appropriate symbols and let
later libcygwin.a on link line fill in the rest of the import stuff.
* gendef: Hopefully no-op modification to allow easier post-processing on
symbol values.
@
text
@d5 1
a5 1
use Cwd;
d17 2
a18 2
my $libdll = Cwd::abs_path(shift @@ARGV);
my $lib = Cwd::abs_path(pop @@ARGV);
@


1.16
log
@* Makefile.in: Perform some minor cleanup.  Revamp speclib handling.
* speclib: Rewrite to create libraries with dlltool rather than attempting
surgery on libcygwin.a.
@
text
@d5 1
d8 7
d16 3
a18 11
my $dlltool = shift;
my $def = shift;
my $lib = pop;

my $inverse;
if ($ARGV[$#ARGV] ne '-v') {
    $inverse = 0;
} else {
    $inverse = 1;
    $#ARGV--;
}
d20 1
a20 14
open my $def_fd, '<', $def or die "$0: couldn't open \"$def\" - $!\n";
my %defsyms = ();
my $newdef = '';
while (<$def_fd>) {
    if (/^\s*(?:EXPORTS\b|LIBRARY\b|\s*$)/o) {
	$newdef .= $_;
    } else {
	my $sym = (split ' ')[0];
	$defsyms{$sym} = $_;
    }
}
close $def_fd;

open my $nm_fd, '-|', $nm, '-pg', '--defined-only', @@ARGV or
d23 4
d28 13
a40 6
    next unless /\S+\s+[A-Z]+\s+_(.*)$/o;
    if ($inverse) {
	delete $defsyms{$1};
    } else {
	$newdef .= $defsyms{$1} if exists $defsyms{$1};
    }
d44 3
a46 1
$newdef .= join '', sort values %defsyms if $inverse;
d48 6
a53 5
open my $dlltool_fd, '|-', $dlltool, '-d', '/proc/self/fd/0', '-D', 'cygwin1.dll', '-l', $lib or
    die "$0: couldn't start dlltool - $dlltool - $!\n";
print $dlltool_fd $newdef;
close $dlltool_fd or exit 1;
exit 0;
@


1.15
log
@Remove unneeded header files from source files throughout.  Update copyrights
where appropriate.
* globals.cc: New file for generic global variables.
* mkglobals_h: New file to generate globals.h.
* mkstatic: New Script used to build a (currently non-working) static
libcygwin_s.a.
* Makefile.in: Add unused rule to build a non-working libcygwin_s.a.
(DLL_OFILES): Add globals.o.  Make all objects rely on globals.h.
(globals.h): New target.  Generate globals.h.
* cygtls.h: Honor new CYGTLS_HANDLE define to control when the HANDLE operator
is allowed in _cygtls.
* dcrt0.cc: Move most globals to globals.cc.
* init.cc: Ditto.
* environ.cc (strip_title_path): Remove now-unneeded extern.
* fhandler_serial.cc (fhandler_serial::open): Ditto.
* pinfo.cc: Ditto.
(commune_process): Ditto.
* shared.cc: Ditto.
* glob.cc: Ditto.
* strace.cc: Ditto.
* exceptions.cc: Define CYGTLS_HANDLE before including winsup.h.
* path.cc (stat_suffixes): Move here.
* security.h: Add forward class path_conv declaration.
* smallprint.cc (__small_vsprintf): Make a true c++ function.
(__small_sprintf): Ditto.
(small_printf): Ditto.
(console_printf): Ditto.
(__small_vswprintf): Ditto.
(__small_swprintf): Ditto.
* spawn.cc (spawn_guts): Remove _stdcall decoration in favor of regparm.
(hExeced): Move to globals.cc
* strfuncs.cc (current_codepage): Ditto.
(active_codepage): Ditto.
* sync.cc (lock_process::locker): Move here from dcrt0.cc.
* syscalls.cc (stat_suffixes): Move to path.cc.
* tty.cc (tty::create_master): Uncapitalize fatal warning for consistency.
* winsup.h: Include globals.h to declare most of the grab bag list of globals
which were previously defined here.
* mount.h: Move USER_* defines back to shared_info.h.
* speclib: Force temporary directory cleanup.
@
text
@d7 12
a18 1
sub dllname($;$);
d20 12
a31 10
my $verbose;
my $static;
my $exclude;

GetOptions('static!'=>\$static, 'v|exclude!'=>\$exclude);

my $lib = shift;
my $nm = shift;
my $ar = shift;
my $libdll = shift;
d33 1
a33 1
open my $nm_fd, '-|', $nm, '-Ap', '--defined-only', @@ARGV, $libdll or
a35 6
my %match_syms = ();
my $symfiles = ();
my $lastfn;
my @@headtail = ();
my %extract = ();
my $libdllname;
d37 6
a42 19
    study;
    m%^\Q$libdll\E:([^:]*):\d+ i \.idata\$([56])% and do {
	if ($2 eq 5) {
	    push @@headtail, $1;
	} else {
	    pop @@headtail;
	}
	next;
    };
    m%^\Q$libdll\E:[^:]*:\d+ I (__head_.*)$% and do {
	$libdllname = $1;
	next;
    };
    next unless m%^([^:]*):([^:]*(?=:))?.* [DTI] (.*)%o;
    if ($1 ne $libdll) {
	 $match_syms{$3} = 1;
     } elsif ($match_syms{$3} ? !$exclude : $exclude) {
	 $extract{$2} = 1;
     }
d46 1
a46 7
%extract or die "$0: couldn't find symbols for $lib\n";
defined($libdllname) or die "$0: couldn't determine __head_<NAME> - malformed import archive?\n";
for (@@headtail) {
    $extract{$_} = 1;
}

my $dir = tempdir(CLEANUP => 1);
d48 4
a51 25
chdir $dir;
# print join(' ', '+', $ar, 'x', sort keys %extract), "\n";
my $res = system $ar, 'x', $libdll, sort keys %extract;
die "$0: $ar extraction exited with non-zero status\n" if $res;
unlink $lib;
$res = system $ar, 'crus', $lib, sort keys %extract;
die "$0: $ar creation exited with non-zero status\n" if $res;

open my $lib_fd, '<', $lib or die "$0: couldn't open $lib for input - $!\n";
binmode $lib_fd;

my $libname = dllname($lib, 'lib');
my $pad = length($libdllname) - length($libname);
die "$0: library name too long (" . length($libname) . ")\n" if $pad < 0;
$libname .= "\0" x $pad;

$res = sysread($lib_fd, $_, -s $lib);
close $lib_fd;

die "$0: couldn't read $lib - $!\n" if $res != -s _;
0 while s/$libdllname/$libname/sog;

open $lib_fd, '>', $lib or die "$0: couldn't open $lib for output - $!\n";
syswrite($lib_fd, $_) == length($_) or die "$0: write to $lib failed - $!\n";
close $lib_fd;
a52 6

sub dllname($;$) {
    my $x = basename($_[0], '.a');
    $x =~ s/^lib//o;
    return '__head_' . $_[1] . $x;
}
@


1.14
log
@* speclib: Rewrite completely in perl.  Avoid multiple nm calls.
@
text
@d58 1
a58 1
my $dir = tempdir();
@


1.13
log
@* speclib: Use correct EOF marker.  Ensure that directory is actually deleted
when running under Windows.
@
text
@d1 90
a90 49
#!/bin/sh -x
# speclib - Make a special version of the cygwin import library.
#
#   Copyright 2001, 2002 Red Hat, Inc.
#
# This file is part of Cygwin.
#
# This software is a copyrighted work licensed under the terms of the
# Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
# details.

case "$1" in
    -v) shift; v() { :; } ;;
    *) v() { /bin/false; } ;;
esac
lib=$1; shift
nm=$1; shift
ar=$1; shift
libdll=$1; shift
cp /dev/null /tmp/$$.objs
trap "cd /tmp; /bin/rm -rf $lib.bak /tmp/$$.dir /tmp/$$.syms /tmp/$$.objs /tmp/$$.raw" 0 1 2 15
$nm --extern-only --defined-only $* | sed -n -e 's%^.* [TD] \(.*\)$%/ \1\$/p%p' > /tmp/$$.syms
v || $nm -Ap --extern-only --defined-only $libdll | egrep ' I __head| I _.*_iname' |  awk -F: '{print $2}' > /tmp/$$.objs
$nm -Ap --extern-only --defined-only $libdll | sed -n -f /tmp/$$.syms | awk -F: '{print $2}' >> /tmp/$$.objs
sort -o /tmp/$$.objs -u /tmp/$$.objs

[ -s /tmp/$$.objs ] || { echo "speclib: couldn't find symbols for $lib" 1>&2; exit 1; }

/bin/rm -rf /tmp/$$.dir
mkdir /tmp/$$.dir
cd /tmp/$$.dir
if v; then
    $ar x $libdll
    /bin/rm -f `cat /tmp/$$.objs`
else
    $ar x $libdll `cat /tmp/$$.objs`
fi
/bin/rm -f $lib
$ar crus $lib *.o
export lib;
perl -pi.bak -- - $lib << 'EOF'
BEGIN {
    binmode STDIN;
    binmode STDOUT;
    $lib = ($ENV{lib} =~ m!/([^/]+)$!o)[0] || $ENV{lib};
    $lib =~ s/\.a//o;
    my $pad = length('cygwin1_dll') - length($lib);
    die "speclib: library name too long (" . length($lib) . ")\n" if $pad < 0;
    $lib = "__head_$lib" . "\0" x $pad;
a91 2
    s/__head_cygwin1_dll/$lib/g;
EOF
@


1.12
log
@* specdir: Correctly remove temporary directory prior to use.
@
text
@d21 1
a21 1
trap "/bin/rm -rf $lib.bak /tmp/$$.dir /tmp/$$.syms /tmp/$$.objs /tmp/$$.raw" 0 1 2 15
d52 1
a52 1
'EOF'
@


1.11
log
@* speclib: Reenable removal of temp files.
@
text
@d29 1
a29 1
/bin/rm -f /tmp/$$>dir
@


1.10
log
@* speclib: Fix created lib to avoid "File truncated" problems.
@
text
@d21 1
a21 1
# trap "/bin/rm -rf /tmp/$$.dir /tmp/$$.syms /tmp/$$.objs /tmp/$$.raw" 0 1 2 15
@


1.9
log
@Throughout, eliminate argument to sig_dispatch_pending.
* exceptions.cc (setup_handler): Move non-interruptible condition handling
(back) to wait_sig (as suggested by Pierre Humblet).
(set_process_mask): Don't worry about calling sig_dispatch_pending from
sigthread since it is detected in the function anyway.
(sig_handle): Eliminate thisproc arg.  Don't call sig_dispatch_pending on
SIGCONT since that should happen automatically.
* sigproc.cc (sig_dispatch_pending): Eliminate justwake argument.  Just return
when called from sigthread.
(wait_sig): Change some variables to bool.  Change inner while to an if.  Move
uninterruptible signal handling here.
(sigproc_terminate): Don't call sig_dispatch_pending.  Just increment semaphore
on exit.
* speclib: Use slightly different (but still flawed) method for determining
symbols to extract from libraries.
@
text
@d40 13
@


1.8
log
@* Makefile.in: Rework to accommodate new speclib arguments.
* speclib: Rework to extract everything from libcygwin.a rather than building
things from existing object files.
@
text
@d21 2
a22 2
trap "/bin/rm -rf /tmp/$$.dir /tmp/$$.syms /tmp/$$.objs /tmp/$$.raw" 0 1 2 15
$nm --extern-only --defined-only $* | sed -e '/^[ 	]*$/d' -e '/:$/d' -e 's%^.* _\(.*\)%/ __imp__\1$/p%' | grep -v ' __imp___imp__' > /tmp/$$.syms
@


1.7
log
@* speclib: Ensure that temporary def file is removed.
@
text
@d1 1
a1 1
#!/bin/sh
d13 2
a14 1
    -v) v="-v"; shift
d18 22
a39 7
dlltool=$1; shift
as=$1; shift
def=$1; shift
trap "rm -f /tmp/$$.def" 0 1 2 15
(echo "LIBRARY cygwin1.dll
EXPORTS"; $nm --extern-only --defined-only $* | sed -e '/^[ 	]*$/d' -e '/:$/d' -e 's/^.* _\(.*\)/\1/' |  grep $v -f - -w $def |egrep -vi '^library|exports|^$' | sort) > /tmp/$$.def
$dlltool --as=$as -d /tmp/$$.def -l "$lib"
@


1.7.24.1
log
@merge from trunk
@
text
@d1 1
a1 1
#!/bin/sh -x
d13 1
a13 2
    -v) shift; v() { :; } ;;
    *) v() { /bin/false; } ;;
d17 7
a23 22
ar=$1; shift
libdll=$1; shift
cp /dev/null /tmp/$$.objs
trap "/bin/rm -rf /tmp/$$.dir /tmp/$$.syms /tmp/$$.objs /tmp/$$.raw" 0 1 2 15
$nm --extern-only --defined-only $* | sed -e '/^[ 	]*$/d' -e '/:$/d' -e 's%^.* _\(.*\)%/ __imp__\1$/p%' | grep -v ' __imp___imp__' > /tmp/$$.syms
v || $nm -Ap --extern-only --defined-only $libdll | egrep ' I __head| I _.*_iname' |  awk -F: '{print $2}' > /tmp/$$.objs
$nm -Ap --extern-only --defined-only $libdll | sed -n -f /tmp/$$.syms | awk -F: '{print $2}' >> /tmp/$$.objs
sort -o /tmp/$$.objs -u /tmp/$$.objs

[ -s /tmp/$$.objs ] || { echo "speclib: couldn't find symbols for $lib" 1>&2; exit 1; }

/bin/rm -f /tmp/$$>dir
mkdir /tmp/$$.dir
cd /tmp/$$.dir
if v; then
    $ar x $libdll
    /bin/rm -f `cat /tmp/$$.objs`
else
    $ar x $libdll `cat /tmp/$$.objs`
fi
/bin/rm -f $lib
$ar crus $lib *.o
@


1.7.24.2
log
@merge from trunk
@
text
@d21 2
a22 2
trap "/bin/rm -rf $lib.bak /tmp/$$.dir /tmp/$$.syms /tmp/$$.objs /tmp/$$.raw" 0 1 2 15
$nm --extern-only --defined-only $* | sed -n -e 's%^.* [TD] \(.*\)$%/ \1\$/p%p' > /tmp/$$.syms
a39 13
export lib;
perl -pi.bak -- - $lib << 'EOF'
BEGIN {
    binmode STDIN;
    binmode STDOUT;
    $lib = ($ENV{lib} =~ m!/([^/]+)$!o)[0] || $ENV{lib};
    $lib =~ s/\.a//o;
    my $pad = length('cygwin1_dll') - length($lib);
    die "speclib: library name too long (" . length($lib) . ")\n" if $pad < 0;
    $lib = "__head_$lib" . "\0" x $pad;
}
    s/__head_cygwin1_dll/$lib/g;
'EOF'
@


1.7.24.3
log
@merge from trunk
@
text
@d29 1
a29 1
/bin/rm -rf /tmp/$$.dir
@


1.6
log
@* speclib: Use rm -f to remove temp file just to quiet any potential warnings.
@
text
@d23 1
a23 1
exec $dlltool --as=$as -d /tmp/$$.def -l "$lib"
@


1.5
log
@* Makefile.in (libpthread.a): Pass the assembler also.
(libm.a): Ditto.
(libc.a): Ditto.
* speclib: Specify the assembler to dlltool.
@
text
@d20 1
a20 1
trap "rm /tmp/$$.def" 0 1 2 15
@


1.4
log
@* speclib: Don't use /dev/null as DLL name.  Just default to what's already in
.def file.
* exceptions.cc (sig_handle): Remove last vestiges of SA_NOCLDSTOP code which
caused SIGCHLD to be ignored.
@
text
@d18 1
d23 1
a23 1
exec $dlltool -d /tmp/$$.def -l "$lib"
@


1.3
log
@Add copyright stuff
@
text
@d22 1
a22 1
exec $dlltool -d /tmp/$$.def -l "$lib" -D /dev/null
@


1.2
log
@* speclib: Remove temp files automatically.
@
text
@d2 10
@


1.2.2.1
log
@Merged changes from HEAD
@
text
@@


1.2.2.2
log
@Merged changes from HEAD
@
text
@a1 10
# speclib - Make a special version of the cygwin import library.
#
#   Copyright 2001, 2002 Red Hat, Inc.
#
# This file is part of Cygwin.
#
# This software is a copyrighted work licensed under the terms of the
# Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
# details.

@


1.2.2.3
log
@Merged changes from HEAD
@
text
@a17 1
as=$1; shift
d22 1
a22 1
exec $dlltool --as=$as -d /tmp/$$.def -l "$lib"
@


1.2.2.4
log
@Merged changes from HEAD
@
text
@d20 1
a20 1
trap "rm -f /tmp/$$.def" 0 1 2 15
d23 1
a23 1
$dlltool --as=$as -d /tmp/$$.def -l "$lib"
@


1.1
log
@* speclib: New file.
* Makefile.in: Create library versions of automode.o, textmode.o, and binmode.o
for easier use on command line.  Create libpthread.a, libm.a, and libc.a with
subsets of exports found in libcygwin.a.
@
text
@d9 1
a9 1
# trap "rm /tmp/$$.def" 0 1 2 15
@

