head	1.37;
access;
symbols
	cygwin-1_7_35-release:1.37
	cygwin-1_7_34-release:1.36
	cygwin-1_7_33-release:1.36
	cygwin-1_7_32-release:1.36
	cygwin-1_7_31-release:1.36
	cygwin-1_7_30-release:1.36
	cygwin-1_7_29-release:1.36
	cygwin-1_7_29-release-branchpoint:1.36.0.2
	cygwin-pre-user-db:1.36
	cygwin-1_7_28-release:1.36
	cygwin-1_7_27-release:1.36
	cygwin-1_7_26-release:1.36
	cygwin-1_7_25-release:1.35
	cygwin-1_7_24-release:1.35
	cygwin-1_7_23-release:1.35
	cygwin-1_7_22-release:1.35
	cygwin-1_7_21-release:1.35
	cygwin-1_7_20-release:1.35
	cygwin-1_7_19-release:1.35
	cygwin-64bit-postmerge:1.35
	cygwin-64bit-premerge-branch:1.35.0.2
	cygwin-64bit-premerge:1.35
	cygwin-1_7_18-release:1.35
	post-ptmalloc3:1.34.2.1
	pre-ptmalloc3:1.34.2.1
	cygwin-1_7_17-release:1.34
	cygwin-64bit-branch:1.34.0.2
	cygwin-1_7_16-release:1.34
	cygwin-1_7_15-release:1.34
	cygwin-1_7_14_2-release:1.34
	cygwin-1_7_14-release:1.34
	cygwin-1_7_12-release:1.34
	cygwin-1_7_11-release:1.34
	cygwin-1_7_10-release:1.33
	signal-rewrite:1.32.0.4
	pre-notty:1.32
	cygwin-1_7_9-release:1.32
	cv-post-1_7_9:1.32.0.2
	cygwin-1_7_8-release:1.32
	cygwin-1_7_7-release:1.27
	cygwin-1_7_5-release:1.27
	cygwin-1_7_4-release:1.27
	cygwin-1_7_3-release:1.27
	cygwin-1_7_2-release:1.27
	fifo_doover3:1.27.0.2
	cygwin-1_7_1-release:1.26
	prefifo:1.25
	cv-branch-2:1.25.0.2
	pre-ripout-set_console_state_for_spawn:1.25
	EOL_registry_mounts:1.24
	preoverlapped:1.24
	drop_9x_support_start:1.24
	cr-0x5f1:1.24.0.4
	cv-branch:1.24.0.2
	pre-ptymaster-archetype:1.24
	cr-0x3b58:1.23.0.4
	cr-0x5ef:1.23.0.2
	after-mmap-privanon-noreserve:1.23
	after-mmap-revamp:1.23
	before-mmap-revamp:1.23
	cgf-more-exit-sync:1.23
	post_wait_sig_exit:1.23
	pre_wait_sig_exit:1.23
	reparent-point:1.22
	noreparent:1.22.0.2
	cr-0x5e6:1.21.0.8
	cr-0x9e:1.21.0.6
	cr-0x9d:1.21.0.4
	cgf-deleteme:1.21.0.2
	pre-sigrewrite:1.21
	corinna-01:1.21
	cr-0x9c:1.20.0.6
	cr-0x9b:1.20.0.4
	cr-0x99:1.20
	Z-emcb-cygwin_daemon:1.20.0.2
	w32api-2_2:1.19
	mingw-runtime-2_4:1.19
	pre-cgf-merge:1.20
	cgf-dev-branch:1.19.0.12
	predaemon:1.14
	cygwin_daemon_merge_HEAD:1.14
	pregp02r1:1.14.0.30
	cygnus_cvs_20020108_pre:1.14
	Z-cygwin_daemon_merge-new_HEAD:1.18
	Z-cygwin_daemon_merge_HEAD:1.18
	cygwin_daemon:1.13.0.4;
locks; strict;
comment	@// @;
expand	@o@;


1.37
date	2015.02.11.13.15.58;	author corinna;	state Exp;
branches;
next	1.36;

1.36
date	2013.11.26.17.11.08;	author corinna;	state Exp;
branches;
next	1.35;

1.35
date	2013.01.21.04.38.27;	author cgf;	state Exp;
branches;
next	1.34;

1.34
date	2012.02.07.17.15.06;	author corinna;	state Exp;
branches
	1.34.2.1;
next	1.33;

1.33
date	2012.01.09.17.03.38;	author corinna;	state Exp;
branches;
next	1.32;

1.32
date	2011.01.20.11.09.21;	author corinna;	state Exp;
branches;
next	1.31;

1.31
date	2011.01.19.10.30.39;	author corinna;	state Exp;
branches;
next	1.30;

1.30
date	2011.01.19.10.28.39;	author corinna;	state Exp;
branches;
next	1.29;

1.29
date	2011.01.19.09.41.54;	author corinna;	state Exp;
branches;
next	1.28;

1.28
date	2011.01.19.09.15.17;	author corinna;	state Exp;
branches;
next	1.27;

1.27
date	2009.12.21.15.16.28;	author corinna;	state Exp;
branches;
next	1.26;

1.26
date	2009.09.26.21.01.10;	author ericb;	state Exp;
branches;
next	1.25;

1.25
date	2008.04.07.18.45.57;	author cgf;	state Exp;
branches;
next	1.24;

1.24
date	2006.02.15.22.10.56;	author cgf;	state Exp;
branches;
next	1.23;

1.23
date	2005.01.12.22.40.45;	author cgf;	state Exp;
branches;
next	1.22;

1.22
date	2004.09.10.08.30.50;	author corinna;	state Exp;
branches;
next	1.21;

1.21
date	2003.09.25.00.37.16;	author cgf;	state Exp;
branches;
next	1.20;

1.20
date	2003.06.16.03.24.10;	author cgf;	state Exp;
branches;
next	1.19;

1.19
date	2002.10.21.01.00.56;	author cgf;	state Exp;
branches
	1.19.12.1;
next	1.18;

1.18
date	2002.06.11.02.08.00;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2002.06.05.04.01.42;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2002.06.02.06.07.00;	author cgf;	state Exp;
branches;
next	1.15;

1.15
date	2002.05.25.02.22.50;	author cgf;	state Exp;
branches;
next	1.14;

1.14
date	2001.10.22.18.39.21;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2001.09.11.20.01.00;	author cgf;	state Exp;
branches
	1.13.4.1;
next	1.12;

1.12
date	2001.07.26.19.22.23;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.24.22.26.50;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2001.03.05.06.28.23;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2000.09.08.02.56.54;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2000.08.25.19.52.04;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.22.05.10.20;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.02.16.28.17;	author dj;	state Exp;
branches;
next	1.5;

1.5
date	2000.07.16.20.06.11;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.15.02.48.11;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.01.17.30.35;	author corinna;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.26.05.13.32;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.34.2.1
date	2013.01.21.13.52.05;	author corinna;	state Exp;
branches;
next	;

1.19.12.1
date	2003.02.14.03.03.27;	author cgf;	state Exp;
branches;
next	1.19.12.2;

1.19.12.2
date	2003.07.06.05.10.43;	author cgf;	state Exp;
branches;
next	;

1.13.4.1
date	2002.01.04.03.56.07;	author rbcollins;	state Exp;
branches;
next	1.13.4.2;

1.13.4.2
date	2002.06.13.14.34.03;	author rbcollins;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.37
log
@	* dlfcn.cc (check_path_access): Drop FE_NATIVE from find_exec call.
	(gfpod_helper): Drop equality sign from environment variable name
	in call to check_path_access.
	* exec.cc (execlp): Drop equality sign from environment variable name
	in call to find_exec.
	(execvp): Ditto.
	(execvpe): Ditto.
	* path.h (enum fe_types): Drop FE_NATIVE.
	(find_exec): Rename third paramter in declaration from search.  Drop
	equality sign from default value.
	* spawn.cc (perhaps_suffix): Add PC_POSIX to path_conv::check call.
	(find_exec): Simplify function.  Iterate over POSIX pathlist rather
	than Windows pathlist.  Drop handling of FE_NATIVE flag.  Always fill
	posix path of incoming path_conv buf, unless FE_NNF flag is given.
	(av::setup): Drop equality sign from environment variable name
	in call to find_exec.  Call unshift with normalized_path.
	* winf.cc (av::unshift): Drop conv parameter and code converting
	Windows to POSIX path.
	* winf.h (av::unshift): Accommodate prototype.
@
text
@/* exec.cc: exec system call support.

   Copyright 1996, 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2008,
   2009, 2011, 2012, 2015 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include "winsup.h"
#include <process.h>
#include "cygerrno.h"
#include "path.h"
#include "environ.h"
#include "sync.h"
#include "fhandler.h"
#include "dtable.h"
#include "pinfo.h"
#include "cygheap.h"
#include "winf.h"

extern "C" int
execl (const char *path, const char *arg0, ...)
{
  int i;
  va_list args;
  const char *argv[1024];

  va_start (args, arg0);
  argv[0] = arg0;
  i = 1;
  do
      argv[i] = va_arg (args, const char *);
  while (argv[i++] != NULL);
  va_end (args);
  MALLOC_CHECK;
  return spawnve (_P_OVERLAY, path, (char * const  *) argv, cur_environ ());
}

extern "C" int
execle (const char *path, const char *arg0, ...)
{
  int i;
  va_list args;
  const char *argv[1024];
  const char * const *envp;

  va_start (args, arg0);
  argv[0] = arg0;
  i = 1;
  do
      argv[i] = va_arg (args, const char *);
  while (argv[i++] != NULL);
  envp = va_arg (args, const char * const *);
  va_end (args);
  MALLOC_CHECK;
  return spawnve (_P_OVERLAY, path, (char * const  *) argv, envp);
}

extern "C" int
execlp (const char *file, const char *arg0, ...)
{
  int i;
  va_list args;
  const char *argv[1024];
  path_conv buf;

  va_start (args, arg0);
  argv[0] = arg0;
  i = 1;
  do
      argv[i] = va_arg (args, const char *);
  while (argv[i++] != NULL);
  va_end (args);
  MALLOC_CHECK;
  return spawnve (_P_OVERLAY | _P_PATH_TYPE_EXEC,
		  find_exec (file, buf, "PATH", FE_NNF) ?: "",
		  (char * const  *) argv, cur_environ ());
}

extern "C" int
execv (const char *path, char * const *argv)
{
  MALLOC_CHECK;
  return spawnve (_P_OVERLAY, path, argv, cur_environ ());
}

extern "C" int
execve (const char *path, char *const argv[], char *const envp[])
{
  MALLOC_CHECK;
  return spawnve (_P_OVERLAY, path, argv, envp);
}
EXPORT_ALIAS (execve, _execve)	/* For newlib */

extern "C" int
execvp (const char *file, char * const *argv)
{
  path_conv buf;

  MALLOC_CHECK;
  return spawnve (_P_OVERLAY | _P_PATH_TYPE_EXEC,
		  find_exec (file, buf, "PATH", FE_NNF) ?: "",
		  argv, cur_environ ());
}

extern "C" int
execvpe (const char *file, char * const *argv, char *const *envp)
{
  path_conv buf;

  MALLOC_CHECK;
  return spawnve (_P_OVERLAY | _P_PATH_TYPE_EXEC,
		  find_exec (file, buf, "PATH", FE_NNF) ?: "",
		  argv, envp);
}

extern "C" int
fexecve (int fd, char * const *argv, char *const *envp)
{
  cygheap_fdget cfd (fd);
  if (cfd < 0)
    {
      syscall_printf ("-1 = fexecve (%d, %p, %p)", fd, argv, envp);
      return -1;
    }

  MALLOC_CHECK;
  return spawnve (_P_OVERLAY, cfd->pc.get_win32 (), argv, envp);
}

extern "C" pid_t
sexecve_is_bad ()
{
  set_errno (ENOSYS);
  return 0;
}
@


1.36
log
@	* common.din: Export posix_spawn[...] functions.
	* exec.cc (execve): Add EXPORT_ALIAS _execve.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
	* posix.sgml (std-susv4):  Add posix_spawn[...] here.
	(std-notimpl): Drop here.
@
text
@d4 1
a4 1
   2009, 2011, 2012 Red Hat, Inc.
d79 1
a79 1
		  find_exec (file, buf, "PATH=", FE_NNF) ?: "",
d105 1
a105 1
		  find_exec (file, buf, "PATH=", FE_NNF) ?: "",
d116 1
a116 1
		  find_exec (file, buf, "PATH=", FE_NNF) ?: "",
@


1.35
log
@Throughout, update copyrights to reflect dates which correspond to main-branch
checkins.  Regularize copyright format.
@
text
@d96 1
@


1.34
log
@	* include/process.h: Move here from include/cygwin subdir.
	* exec.cc: Change include of process.h to reflect the fact that it's
	now back in include.
	* spawn.cc: Ditto.
	* syscalls.cc: Ditto.
@
text
@d3 2
a4 1
   Copyright 1996, 1997, 1998, 2000, 2001, 2002, 2009, 2011, 2012 Red Hat, Inc.
@


1.34.2.1
log
@Pull in changes from HEAD
@
text
@d3 1
a3 2
   Copyright 1996, 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2008,
   2009, 2011, 2012 Red Hat, Inc.
@


1.33
log
@	* include/cygwin/process.h: Move here from newlib.
	* exec.cc: Change include of process.h to reflect the fact that it's
	now in the include/cygwin subfolder.
	* spawn.cc: Ditto.
	* syscalls.cc: Ditto.
@
text
@d12 1
a12 1
#include <cygwin/process.h>
@


1.32
log
@	* exec.cc: Include pinfo.h.
	* winf.h: Move definitions of _P_PATH_TYPE_EXEC and _P_MODE from here...
	* pinfo.h: ...to here.
	(_P_PATH_TYPE_EXEC): Redefine to be bigger than _P_SYSTEM.
	(_P_MODE): Redefine so as not to mask out _P_SYSTEM.
	* spawn.cc (spawnlp): Add _P_PATH_TYPE_EXEC flag in call to spawnve.
	(spawnlpe): Ditto.
	(spawnvp): Ditto.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 2000, 2001, 2002, 2009, 2011 Red Hat, Inc.
d12 1
a12 1
#include <process.h>
@


1.31
log
@	* exec.cc (execlp): Add missing _P_PATH_TYPE_EXEC flag in call to
	spawnve.
@
text
@d19 1
@


1.30
log
@	* exec.cc: Rearrange functions in alphabetical order.
	(_execve): Drop temporary define and drop export alias.
	(execl): Call spawnve.
	(execle): New function.
	(execlp): New function.
	(execv): Call spawnve.
	(execve): Drop converting NULL envp to emtpy envp.
	(execvp): Call spawnve.
	(execvpe): Drop converting NULL envp to emtpy envp.  Call spawnve.
	(fexecve): Call spawnve.
	* spawn.cc (spawnve): Convert NULL envp to emtpy envp.  Remove outdated
	comment.
	(spawnlp): Call spawnve.
	(spawnlpe): Ditto.
	(spawnvp): Ditto.
	(spawnvpe): Fix formatting.
@
text
@d76 2
a77 1
  return spawnve (_P_OVERLAY, find_exec (file, buf, "PATH=", FE_NNF) ?: "",
@


1.29
log
@	* exec.cc (strccpy): Move function from here...
	* strfuncs.cc (strccpy): ...to here.
	* string.h (strccpy): Declare.
	* winsup.h (strccpy): Drop declaration.
@
text
@a10 1
#define _execve __FOO_execve_
a20 1
#undef _execve
d22 17
a38 2
/* This is called _execve and not execve because the real execve is defined
   in libc/posix/execve.c.  It calls us.  */
d41 1
a41 1
execve (const char *path, char *const argv[], char *const envp[])
d43 13
a55 1
  static char *const empty_env[] = { 0 };
d57 1
a57 3
  if (!envp)
    envp = empty_env;
  return spawnve (_P_OVERLAY, path, argv, envp);
a59 2
EXPORT_ALIAS (execve, _execve)

d61 1
a61 1
execl (const char *path, const char *arg0, ...)
d66 1
d76 2
a77 1
  return execve (path, (char * const  *) argv, cur_environ ());
d84 1
a84 1
  return execve (path, (char * const *) argv, cur_environ ());
d87 2
a88 2
extern "C" pid_t
sexecve_is_bad ()
d90 2
a91 2
  set_errno (ENOSYS);
  return 0;
d95 1
a95 1
execvp (const char *path, char * const *argv)
d98 2
d101 1
a101 1
		  find_exec (path, buf, "PATH=", FE_NNF) ?: "",
d106 1
a106 1
execvpe (const char *path, char * const *argv, char *const *envp)
d108 2
a109 1
  static char *const empty_env[] = { 0 };
a110 3
  if (!envp)
    envp = empty_env;
  path_conv buf;
d112 1
a112 1
		  find_exec (path, buf, "PATH=", FE_NNF) ?: "",
d125 10
a134 1
  return execve (cfd->pc.get_win32 (), argv, envp);
@


1.28
log
@	* errno.cc (errmap): Add error codes for invalid binaries.
	* exec.cc (execvp): Call spawnve with _P_PATH_TYPE_EXEC flag
	from here.
	(execvpe): Ditto.
	* spawn.cc (spawn_guts): Filter _P_PATH_TYPE_EXEC from mode and
	store in p_type_exec.  Call av::fixup with addtional p_type_exec
	argument.
	(spawnve): Check for filtered mode.
	(spawnvpe): Add _P_PATH_TYPE_EXEC flag when calling spawnve.
	(av::fixup): Accept additional bool parameter p_type_exec.  Only check
	for script if p_type_exec is true.
	* winf.h (_P_PATH_TYPE_EXEC): Define.
	(_P_MODE): Define.
	(av::fixup): Declare with additional bool parameter.
@
text
@a70 15
/* Copy string, until c or <nul> is encountered.
   NUL-terminate the destination string (s1).
   Return pointer to terminating byte in dst string.  */

char * __stdcall
strccpy (char *s1, const char **s2, char c)
{
  while (**s2 && **s2 != c)
    *s1++ = *((*s2)++);
  *s1 = 0;

  MALLOC_CHECK;
  return s1;
}

@


1.27
log
@	* exec.cc (execvp): Call find_exec with FE_NNF flag to enforce
	a NULL return when executable isn't found in $PATH.  Convert NULL
	to "".
	(execvpe): Ditto.
	* spawn.cc (spawn_guts): Return with EFAULT if prog_arg is NULL.
	Return with ENOENT if prog_arg is empty string.  Add a comment.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 2000, 2001, 2002, 2009 Red Hat, Inc.
d21 1
d90 3
a92 1
  return execv (find_exec (path, buf, "PATH=", FE_NNF) ?: "", argv);
d98 4
d103 3
a105 1
  return execve (find_exec (path, buf, "PATH=", FE_NNF) ?: "", argv, envp);
@


1.26
log
@Add fexecve, execvpe.

* exec.cc (fexecve): New function.
* cygwin.din (execvpe, fexecve): Export new fexecve and existing
execvpe.
* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
* posix.sgml: Mention them.
@
text
@d89 1
a89 1
  return  execv (find_exec (path, buf), argv);
d96 1
a96 1
  return  execve (find_exec (path, buf), argv, envp);
@


1.25
log
@Remove unneeded header files from source files throughout.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 2000, 2001, 2002 Red Hat, Inc.
d17 4
d98 12
@


1.24
log
@minor comment restructuring
@
text
@a12 2
#include <unistd.h>
#include <stdlib.h>
a14 2
#include "perprocess.h"
#include "security.h"
a15 2
#include "fhandler.h"
#include "pinfo.h"
@


1.23
log
@Reorganize header file inclusion throughout so that cygerrno.h comes first.
* fhandler.h (select_record::thread_errno): Save any encountered errno here.
(select_record::set_select_errno): New function.
(select_record::saw_error): New function.
(select_record::select_record): Initialize thread_errno to zero.
* select.cc (set_handle_or_return_if_not_open): Set thread_errno on failure.
(select_stuff::wait): Record errno for later resurrection in calling thread.
(peek_serial): Ditto.
@
text
@d72 3
a74 5
/*
 * Copy string, until c or <nul> is encountered.
 * NUL-terminate the destination string (s1).
 * Return pointer to terminating byte in dst string.
 */
@


1.22
log
@	* Makefile.in: Create libutil.a from bsdlib.o exports.
	* bsdlib.cc (logwtmp): Move from syscalls.cc to here.
	(login): Ditto.
	(logout): Ditto.

	* winsup.h (EXPORT_ALIAS): New macro.
	* exec.cc: Define alias symbols using EXPORT_ALIAS macro.
	* syscalls.cc: Ditto.
	* times.cc: Ditto.
@
text
@d16 1
a22 1
#include "cygerrno.h"
@


1.21
log
@* devices.cc: New file.
* devices.gperf: New file.
* devices.shilka: New file.
* cygwin-gperf: New file.
* cygwin-shilka: New file.
* fhandler_fifo.cc: New file.
* fhandler_nodevice.cc : New file.  Reorganize headers so that path.h precedes
fhandler.h throughout.  Remove device argument and unit arguments from fhandler
constructors throughout.  Remove pc arguments to fhandler functions and use
internal pc element instead, throughout.  Use dev element in pc throughout.
Use major/minor elements rather than units and device numbers previously in
fhandler class.  Use correct methods for fhandler file names rather than
directly accessing file name variables, throughout.
* Makefile.in (DLL_OFILES): Add devices.o, fhandler_fifo.o
* dcrt0.cc (dll_crt0_1): Call device::init.
* devices.h: Renumber devices based on more Linux-like major/minor numbers.
Add more devices.  Declare standard device storage.
(device): Declare struct.
* dir.cc (opendir): Use new 'build_fh_name' to construct a fhandler_* type.
* dtable.cc (dtable::get_debugger_info): Ditto.
(cygwin_attach_handle_to_fd): Ditto.
(dtable::release): Remove special FH_SOCKET case in favor of generic
"need_fixup_before" test.
(dtable::init_std_file_from_handle): Use either build_fh_dev or build_fh_name
to build standard fhandler.
(dtable::build_fh_name): Renamed from dtable::build_fhandler_from_name.  Move
out of dtable class.  Don't accept a path_conv argument.  Just build it here
and pass it to:
(build_fh_pc): Renamed from dtable::build_fhandler.  Move out of dtable class.
Use intrinsic device type in path_conv to create new fhandler.
(build_fh_dev): Renamed from dtable::build_fhandler.  Move out of dtable class.
Simplify arguments to just take new 'device' type and a name.  Just return
pointer to fhandler rather than trying to insert into dtable.
(dtable::dup_worker): Accommodate above build_fh name changes.
(dtable::find_fifo): New (currently broken) function.
(handle_to_fn): Use strechr for efficiency.
* dtable.h: Reflect above build_fh name changes and argument differences.
(fhandler_base *&operator []): Return self rather than copy of self.
* fhandler.cc (fhandler_base::operator =): Use pc element to set normalized
path.
(fhandler_base::set_name): Ditto.
(fhandler_base::raw_read): Use method to access name.
(fhandler_base::write): Correctly use get_output_handle rather than get_handle.
(handler_base::device_access_denied): New function.
(fhandler_base::open): Eliminate pc argument and use pc element of
fhandler_base throughout.
(fhandler_base::fstat): Detect if device is based in filesystem and use
fstat_fs to calculate stat, if so.
(fhandler_base::fhandler_base): Eliminate handling of file names and, instead,
just free appropriate component from pc.
(fhandler_base::opendir): Remove path_conv parameter.
* fhandler.h: Remove all device flags.
(fhandler_base::pc): New element.
(fhandler_base::set_name): Change argument to path_conv.
(fhandler_base::error): New function.
(fhandler_base::exists): New function.
(fhandler_base::pc_binmode): New function.
(fhandler_base::dev): New function.
(fhandler_base::open_fs): New function.
(fhandler_base::fstat_fs): New function.
(fhandler_base::fstat_by_name): New function.
(fhandler_base::fstat_by_handle): New function.
(fhandler_base::isfifo): New function.
(fhandler_base::is_slow): New function.
(fhandler_base::is_auto_device): New function.
(fhandler_base::is_fs_special): New function.
(fhandler_base::device_access_denied): New function.
(fhandler_base::operator DWORD&): New operator.
(fhandler_base::get_name): Return normalized path from pc.
(fhandler_base::get_win32_name): Return windows path from pc.
(fhandler_base::isdevice): Renamed from is_device.
(fhandler_base::get_native_name): Return device format.
(fhandler_fifo): New class.
(fhandler_nodevice): New class.
(select_stuff::device_specific): Remove array.
(select_stuff::device_specific_pipe): New class element.
(select_stuff::device_specific_socket): New class element.
(select_stuff::device_specific_serial): New class element.
(select_stuff::select_stuff): Initialize new elements.
* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Move to base class
from fhandler_disk_file.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_disk_file::open): Move most functionality into
fhandler_base::open_fs.
(fhandler_base::open_fs): New function.
(fhandler_disk_file::close): Move most functionality into
fhandler_base::close_fs.
(fhandler_base::close_fs): New function.
* fhandler_mem.cc (fhandler_dev_mem::open): Use device name in debugging
output.
* fhandler_socket.cc (fhandler_socket::set_connect_secret): Copy standard
urandom device into appropriate place.
(fhandler_socket::accept): Reflect change in fdsock return value.
* fhandler_tty.cc: See "throughouts" above.
* net.cc: Accommodate fdsock change throughout.
(fdsock): Return success or failure, accept fd argument and device argument.
* path.cc (symlink_info::major): New element.
(symlink_info::minor): New element.
(symlink_info::parse_device): Declare new function.
(fs_info::update): Accommodate changes in path_conv class.
(path_conv::fillin): Ditto.
(path_conv::return_and_clear_normalized_path): Eliminate.
(path_conv::set_normalized_path): New function.
(path_conv::path_conv): Set info in dev element.  Use path_conv methods Check
for FH_FS rather than FH_BAD to indicate when to fill in filesystem stuff.
where appropriate rather than direct access.  Use set_normalized_path to set
normalized path.
(windows_device_names): Eliminate.
(get_dev): Ditto.
(get_raw_device_number): Ditto.
(get_device_number): Ditto.
(win32_device_name): Call new device name parser to do most of the heavy
lifting.
(mount_info::conv_to_win32_path): Fill in dev field as appropriate.
(symlink_worker): Handle new device files.
(symlink_info::check): Ditto.
(symlink_info::parse_device): Define new function.
* path.h (executable_states): Move here from fhandler.h.
(fs_info): Rename variables to *_storage and create methods for accessing same.
(path_conv): Add dev element, remove devn and unit and adjust inline methods to
accommodate.
(set_normalized_path): Declare new function.
* pinfo.cc (_pinfo::commune_recv): Add broken support for handling fifos.
(_pinfo::commune_send): Ditto.
* pipe.cc (fhandler_pipe::close): check for existence of handle before closing
it.
(handler_pipe::create): Rename from make_pipe.  Change arguments to accept
fhandler_pipe array.  Accommodate fifos.
(pipe): Rework to deal with fhandler_pipe::create changes.
(_pipe): Ditto.
* select.cc: Use individual device_specific types throughout rather than
indexing with obsolete device number.
(set_bits): Use is_socket call rather than checking device number.
* shared_info.h (CURR_MOUNT_MAGIC): Update.
(conv_to_win32_path): Reflect addition of device argument.
* syscalls.cc (mknod_worker): New function.
(open): Use build_fh_name to build fhandler.
(chown_worker): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(chmod_device): New function.
(chmod): Detect if this is an 'auto' device rather than an on-filesystem device
and handle appropriately.  Use chmod_device to set mode of in-filesystem
devices.
(stat_worker): Eliminate path_conv argument.  Call build_fh_name to construct
fhandler.  Use fh->error() rather than pc->error to detect errors in fhandler
construction.
(access_worker): New function pulled from access.  Accommodate in-filesystem
devices.
(access): Use access_worker.
(fpathconf): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(mknod_worker): New function.
(mknod32): New function.
(chroot): Free normalized path -- assuming it was actually cmalloced.
* tty.cc (create_tty_master): Tweak for new device class.
(tty::common_init): Ditto.
* winsup.h (stat_worker): Remove.
(symlink_worker): Declare.
* exceptions.cc (set_process_mask): Just call sig_dispatch_pending and don't
worry about pending_signals since sig_dispatch_pending should always do the
right thing now.
(sig_handle): Reorganize SIGCONT handling to more closely conform to SUSv3.
* pinfo.h: Move __SIG enum to sigproc.h.
(PICOM_FIFO): New enum element.
(_pinfo): Remove 'thread2signal' stuff throughout class.
(_pinfo::commune_send): Make varargs.
(_pinfo::sigtodo): Eliminate.
(_pinfo::thread2signal): Ditto.
* signal.cc (kill_worker): Eliminate call to setthread2signal.
* sigproc.cc (local_sigtodo): Eliminate.
(getlocal_sigtodo): Ditto.
(sigelem): New class.
(pending_signals): New class.
(sigqueue): New variable, start of sigqueue linked list.
(sigcatch_nonmain): Eliminate.
(sigcatch_main): Eliminate.
(sigcatch_nosync): Eliminate.
(sigcomplete_nonmain): Eliminate.
(pending_signals): Eliminate.
(sig_clear): Call signal thread to clear pending signals, unless already in
signal thread.
(sigpending): Call signal thread to get pending signals.
(sig_dispatch_pending): Eliminate use of pending_signals and just check
sigqueue.
(sigproc_terminate): Eliminate all of the obsolete semaphore stuff.  Close
signal pipe handle.
(sig_send): Eliminate all of the obsolete semaphore stuff and use pipe to send
signals.
(getevent): Eliminate.
(pending_signals::add): New function.
(pending_signals::del): New function.
(pending_signals::next): New function.
(wait_sig): Eliminate all of the obsolete semaphore stuff.  Use pipe to
communicate and maintain a linked list of signals.
* sigproc.h: Move __SIG defines here.  Add __SIGPENDING.
(sig_dispatch_pending): Remove "C" specifier.
(sig_handle): Accept a mask argument.
* thread.cc: Remove signal handling considerations throughout.
@
text
@d38 1
a38 2
extern "C" int _execve (const char *, char *const [], char *const [])
  __attribute__ ((alias ("execve")));
@


1.20
log
@Throughout, remove "include <errno.h>" from files which already include
cygerrno.h.
* include/cygwin/config.h (__DYNAMIC_REENT__): Define.
* include/cygwin/version.h: Bump API minor version.
* cygwin.din: Export __getreent
* cygerrno.h: Include errno.h.  Fix places where _impure_ptr is used directly
to store the errno value.
* debug.cc (__set_errno): Ditto.
* errno.cc: Remove _RRENT_ONLY define to get errno.cc compiled.
* signal.cc: Rename _reent_clib to _REENT throughout.
* thread.h (reent_clib): Remove prototype.
* thread.cc (reent_clib): Rename reent_clib to __getreent.  Return _impure_ptr
until MTinterface is initialized.
(reent_winsup): Fix a possible SEGV when _r == NULL.  Return NULL instead.
* MTinterface::fixup_after_fork: Switch reent back to _impure_ptr to keep
signal handling running when fork is called from a thread other than the
mainthread.
@
text
@d18 1
a19 1
#include "path.h"
@


1.19
log
@Change _function() to function() throughout.
* cygwin.din: Remove last vestiges (?) of newlib wrappers.
* cygthread.cc (cygthread::detach): Always wait for event or suffer an
apparently inavoidable race.
* dcrt0.cc (dll_crt0_1): Allocate threads after stack has been relocated.
* debub.cc (lock_debug): Don't acquire lock on exit.
* fork.cc (fork_child): Recreate mmaps before doing anything else since Windows
has a habit of using blocks of memory in the child that could previously have
been occupied by shared memory in the parent.
* mmap.cc (fhandler_disk_file::fixup_mmap_after_fork): Issue error here and
provide some details about what went wrong.
(fixup_mmaps_after_fork): Remove error message.
* shared.cc (open_shared): Move warning message so that more detail is
possible.
* sigproc.cc (sigproc_init): Initialize sync_proc_subproc to avoid a race.
(sigproc_terminate): Specifically wait for process thread to terminate.
@
text
@a14 1
#include <errno.h>
@


1.19.12.1
log
@merge from trunk.
Reorganize includes throughout so that path.h comes before fhandler.h.
Eliminate path_conv arguments from fhandler functions which take them,
throughout.  Use get_name() and get_win32_name() consistently throughout for
fhandler objects.  Use build_fh_* functions throughout, where appropriate.
* fhandler.h (fhandler_base): Store path_conv struct here.  Remove dev.
* dtable.h (dtable::build_fhandler_*): Remove.
(build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* dtable.cc (build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* fhandler.h (fhandler_base::set_name): Change argument.
* fhandler.cc (fhandler_base::set_name): Just accept a path_conv argument.
(executable_states): Move.
* path.h (executable_state): Accept.
* syscalls.cc (stat_worker): Make static.
* winsup.h (stat_worker): Remove definition.
@
text
@d19 1
a20 1
#include "fhandler.h"
@


1.19.12.2
log
@merge from trunk
@
text
@d15 1
@


1.18
log
@* Makefile.in: Ensure that -MD gets added to CFLAGS regardless of CFLAGS
command-line setting.
* cygwin.din: Export sexec* functions as function which returns ENOSYS
(i.e., sexec* is deprecated).
* dtable.cc (dtable::vfork_child_dup): Ensure that impersonation is restored
even on failure.
* exec.cc: Throughout, remove references to sexec* and _spawnve.
* pinfo.h: Remove _spawnve declaration.
* spawn.cc: Rename _spawnve to spawnve and use throughout.
(spawn_guts): Eliminate hToken argument and processing of same.  Just perform
special actions if impersonating.
(spawnve): Rename from _spawnve.
@
text
@d11 1
d24 1
d30 1
a30 1
_execve (const char *path, char *const argv[], char *const envp[])
d39 3
d57 1
a57 1
  return _execve (path, (char * const  *) argv, cur_environ ());
d64 1
a64 1
  return _execve (path, (char * const *) argv, cur_environ ());
@


1.17
log
@* dtable.cc (handle_to_fn): Attempt to handle "raw" accesses to remote shares.
* path.cc (mount_info::conv_to_win32_path): Set flags to binary when mount
entry is not found.
(mount_info::set_flags_from_win32_path): Ditto.
@
text
@d22 1
d34 1
a34 1
  return _spawnve (NULL, _P_OVERLAY, path, argv, envp);
a61 2
/* the same as a standard exec() calls family, but with NT security support */

d63 1
a63 74
sexecve (HANDLE hToken, const char *path, const char *const argv[],
	 const char *const envp[])
{
  _spawnve (hToken, _P_OVERLAY, path, argv, envp);
  return -1;
}

extern "C" int
sexecl (HANDLE hToken, const char *path, const char *arg0, ...)
{
  int i;
  va_list args;
  const char *argv[1024];

  va_start (args, arg0);
  argv[0] = arg0;
  i = 1;

  do
      argv[i] = va_arg (args, const char *);
  while (argv[i++] != NULL);

  va_end (args);

  MALLOC_CHECK;
  return sexecve (hToken, path, (char * const *) argv, cur_environ ());
}

extern "C" int
sexecle (HANDLE hToken, const char *path, const char *arg0, ...)
{
  int i;
  va_list args;
  const char * const *envp;
  const char *argv[1024];

  va_start (args, arg0);
  argv[0] = arg0;
  i = 1;

  do
    argv[i] = va_arg (args, const char *);
  while (argv[i++] != NULL);

  envp = va_arg (args, const char * const *);
  va_end (args);

  MALLOC_CHECK;
  return sexecve(hToken, path, (char * const *) argv, (char * const *) envp);
}

extern "C" int
sexeclp (HANDLE hToken, const char *path, const char *arg0, ...)
{
  int i;
  va_list args;
  const char *argv[1024];

  va_start (args, arg0);
  argv[0] = arg0;
  i = 1;

  do
      argv[i] = va_arg (args, const char *);
  while (argv[i++] != NULL);

  va_end (args);

  MALLOC_CHECK;
  return sexecvpe (hToken, path, (const char * const *) argv, cur_environ ());
}

extern "C" int
sexeclpe (HANDLE hToken, const char *path, const char *arg0, ...)
d65 2
a66 32
  int i;
  va_list args;
  const char * const *envp;
  const char *argv[1024];

  va_start (args, arg0);
  argv[0] = arg0;
  i = 1;

  do
    argv[i] = va_arg (args, const char *);
  while (argv[i++] != NULL);

  envp = va_arg (args, const char * const *);
  va_end (args);

  MALLOC_CHECK;
  return sexecvpe (hToken, path, argv, envp);
}

extern "C" int
sexecv (HANDLE hToken, const char *path, const char * const *argv)
{
  MALLOC_CHECK;
  return sexecve (hToken, path, argv, cur_environ ());
}

extern "C" int
sexecp (HANDLE hToken, const char *path, const char * const *argv)
{
  MALLOC_CHECK;
  return sexecvpe (hToken, path, argv, cur_environ ());
a83 9
}

extern "C" int
sexecvpe (HANDLE hToken, const char *file, const char * const *argv,
	  const char *const *envp)
{
  path_conv buf;
  MALLOC_CHECK;
  return sexecve (hToken, find_exec (file, buf), argv, envp);
@


1.16
log
@Remove unneeded sigproc.h includes throughout.
* fhandler.h (fhandler_proc::fill_filebuf): Take a pinfo argument.
* fhandler_proc.cc (fhandler_proc::get_proc_fhandler): Simplify search for
given pid.
(fhandler_proc::readdir): Assume that pid exists if it shows up in the winpid
list.
* fhandler_process.cc (fhandler_process::open): Simplify search for given pid.
Call fill_filebuf with pinfo argument.
(fhandler_process::fill_filebuf): Pass pinfo here and assume that it exists.
* pinfo.h (pinfo::remember): Define differently if sigproc.h is not included.
* dll_init.cc (dll_list::detach): Don't run destructor on exit.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 2000, 2001 Red Hat, Inc.
@


1.15
log
@Remove unneeded sync.h, where appropriate, throughout.  Remove unneeded heap.h,
where appropriate, throughout.  Remove unneeded exceptions.h, where
appropriate, throughout.  Remove unneeded perprocess.h, where appropriate,
throughout.
@
text
@a19 1
#include "sigproc.h"
@


1.14
log
@Remove 'cb' parameter and modify fhandler_* constructors throughout.
* dtable.cc (dtable::build_fhandler): Remove debugging output which uses 'cb'.
* exec.cc (execvp): New function.
(execvpe): Ditto.
* fhandler.cc (fhandler_base::fhandler_base): Use constructor initialization.
* fhandler.h (fhandler_tty_common::fhandler_tty_common): Ditto.
* fhandler_clipboard.cc (fhandler_dev_clipboard::fhandler_dev_clipboard):
Ditto.
* fhandler_console.cc (fhandler_console::fhandler_console): Ditto.
* fhandler_raw.cc (fhandler_dev_raw::fhandler_dev_raw): Ditto.
* fhandler_serial.cc (fhandler_serial::fhandler_serial): Ditto.
* fhandler_tty.cc (fhandler_tty_master::fhandler_tty_master): Ditto.
(fhandler_tty_slave::fhandler_tty_slave): Ditto.
(fhandler_pty_master::fhandler_pty_master): Ditto.
* fhandler_windows.cc (fhandler_windows::fhandler_windows): Ditto.
@
text
@a19 1
#include "sync.h"
@


1.13
log
@Update copyrights.
@
text
@d28 1
a28 2
extern "C"
int
d38 1
a38 2
extern "C"
int
d56 1
a56 2
extern "C"
int
d65 1
a65 2
extern "C"
pid_t
d73 1
a73 2
extern "C"
int
d94 1
a94 2
extern "C"
int
d117 1
a117 2
extern "C"
int
d138 1
a138 2
extern "C"
int
d161 1
a161 2
extern "C"
int
d168 1
a168 2
extern "C"
int
d192 1
a192 2
extern "C"
int
d199 14
@


1.13.4.1
log
@Merged changes from HEAD
@
text
@d28 2
a29 1
extern "C" int
d39 2
a40 1
extern "C" int
d58 2
a59 1
extern "C" int
d68 2
a69 1
extern "C" pid_t
d77 2
a78 1
extern "C" int
d99 2
a100 1
extern "C" int
d123 2
a124 1
extern "C" int
d145 2
a146 1
extern "C" int
d169 2
a170 1
extern "C" int
d177 2
a178 1
extern "C" int
d202 2
a203 1
extern "C" int
a209 14
}

extern "C" int
execvp (const char *path, char * const *argv)
{
  path_conv buf;
  return  execv (find_exec (path, buf), argv);
}

extern "C" int
execvpe (const char *path, char * const *argv, char *const *envp)
{
  path_conv buf;
  return  execve (find_exec (path, buf), argv, envp);
@


1.13.4.2
log
@Merged changes from HEAD
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 2000, 2001, 2002 Red Hat, Inc.
d20 2
a23 1
#include "cygerrno.h"
d35 1
a35 1
  return spawnve (_P_OVERLAY, path, argv, envp);
d63 2
d66 74
a139 1
sexecve_is_bad ()
d141 32
a172 2
  set_errno (ENOSYS);
  return 0;
d190 9
@


1.12
log
@Throughout, reorganize header file inclusion to put security.h prior to
fhandler.h.
* fhandler.h (fhandler_base::get_inheritance): New method.
* fhandler_socket.cc (fhandler_socket::create_secret_event): Use proper
close-on-exec inheritance when creating.
(fhandler_socket::check_peer_secret_event): Create handle as non-inheritable.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 2000 Cygnus Solutions.
@


1.11
log
@forced commit
@
text
@d17 1
@


1.10
log
@* dlopen.c (dlopen): Return NULL when name is NULL (suggested by
chrisiasci@@aol.com).
* cygwin.din: Add a new, internally used export - _check_for_executable.
* dcrt0.cc (dll_crt0_1): Set _check_for_executable for older binaries.  Pass
user_data to premain functions.
* fhandler.cc (fhandler_disk_file::open): Only check for executable if the
linked program is intereested in the executable bit.
(fhandler_disk_file::check_execable_p): Delete.
* fhandler.h (executable_states): New enumeration of various states of
executable bit caring.
(fhandler_base::set_execable_p): New method.
* fhandler_termios.cc (fhandler_termios::line_edit): Flag when a signal has
been sent to the tty.  Return -1 when this is so.
* fhandler_console.cc (fhandler_console::read): Return -1 when signal sending
character encountered.
* path.cc (path_conv::check): Record when path refers to a disk device.  Move
executable extension check here.
(check_sysfile): Accomodate new EXEC path states.
(has_suffix): Remove.
(next_suffix): Remove.
(class suffix_scan): New clas.
(suffix_scan::has): New method.
(suffix_scan:next): New method.
(symlink_info::check): Use suffix_scan method to control for scanning for
suffixes.
* path.h (path_conv::exec_state): New method.
* perprocess.h: Make "C" friendly.
* include/cygwin/version.h: Define CYGWIN_VERSION_CHECK_FOR_S_IEXEC.  Bump
CYGWIN_VERSION_API_MINOR.
* include/sys/cygwin.h: Change premain declarations.
* winsup.h: Move __cplusplus test to after builtin defines.
@
text
@@


1.9
log
@Break out more header info into separate files.  Use appropriate header files
throughout.
* shared.h: Remove.
* cygwin_version.h: New file.
* delqueue.h: New file.
* environ.h: New file.
* host_dependent.h: New file.
* perprocess.h: New file.
* registry.h: New file.
* security.h: New file.
@
text
@d16 1
@


1.8
log
@        * exec.cc (_execve): Change definition according to declaration in
        newlib/libc/include/sys/unistd.h.
@
text
@d18 4
@


1.7
log
@* winsup.h: Eliminate inclusion of most of the cygwin .h files.  Use .h files
only in sources which require them.
* Makefile.in: Generate dependencies with -MD option.
@
text
@d23 2
a24 2
pid_t
_execve (const char *path, const char *const argv[], const char *const envp[])
@


1.6
log
@* winsup.h: take out protections of environ, errno, allow C use
* *.cc: put winsup.h before other headers (for __INSIDE_CYGWIN__);
use cur_environ() instead of just environ
* times.cc: remove import protections
* glob.c: add winsup.h
* localtime.c: ditto
* smallprint.c: ditto
* Makefile.in: don't __INSIDE_CYGWIN__ as it messes up profiling.
@
text
@d16 2
@


1.5
log
@* environ.cc: Use new definition of "environ" throughout.
(environ_init): Explicitly initialize __cygwin_environ.
(cur_environ): New function.  Detects when user has updated their environment.
* exec.cc: Use 'environ' define throughout rather than __cygwin_environ.
* spawn.cc: Ditto.
* winsup.h: Declare cur_environ, main_environ, environ.
@
text
@d11 1
a15 1
#include "winsup.h"
d47 1
a47 1
  return _execve (path, (char * const  *) argv, environ);
d55 1
a55 1
  return _execve (path, (char * const *) argv, environ);
d88 1
a88 1
  return sexecve (hToken, path, (char * const *) argv, environ);
d134 1
a134 1
  return sexecvpe (hToken, path, (const char * const *) argv, environ);
d166 1
a166 1
  return sexecve (hToken, path, argv, environ);
d174 1
a174 1
  return sexecvpe (hToken, path, argv, environ);
@


1.4
log
@* hinfo.cc (hinfo::linearize_fd_array): Make max_used_fd an int so that we can
detect when there are no fds to pass.
* dcrt0.cc (host_dependent_constants::init): Revert Sat Mar 18 01:32:04 2000
change.
(dll_crt0_1): Set "cygwin_finished_initializing" flag.
(dll_crt0): Don't perform memcpy if uptr is already set to internal structure.
(_dll_crt0): Remember location of programs envptr.
* dll_init.h (per_module, dll, dll_list): Revamp.
* dll_init.cc: Revamp.  Use new classes.
* fork.cc (fork): Use new revamped dll, dll_list, and per_module stuff.
* environ.cc: Use __cygwin_environ throughout rather than the
user_data->envptr.
* exec.cc: Ditto.
* spawn.cc: Ditto.
* winsup.h: Declare update_envptrs, cygwin_finished_initializing.
* lib/_cygwin_crt0_common.cc (_cygwin_crt0_common): Revert previous change.
* lib/cygwin_attach_dll.cc (cygwin_attach_dll): Always pass in own per_process
structure or we end up overwriting information from the main program.
@
text
@d47 1
a47 1
  return _execve (path, (char * const  *) argv, __cygwin_environ);
d55 1
a55 1
  return _execve (path, (char * const *) argv, __cygwin_environ);
d88 1
a88 1
  return sexecve (hToken, path, (char * const *) argv, __cygwin_environ);
d134 1
a134 1
  return sexecvpe (hToken, path, (const char * const *) argv, __cygwin_environ);
d166 1
a166 1
  return sexecve (hToken, path, argv, __cygwin_environ);
d174 1
a174 1
  return sexecvpe (hToken, path, argv, __cygwin_environ);
@


1.3
log
@Changes by  Kazuhiro Fujieda  <fujieda@@jaist.ac.jp>
        * assert.cc (__assert): Reduce dependency on newlib.
        * exec.cc: Eliminate unnecessary inclusion of ctype.h.
        * glob.c: Ditto.
        * hinfo.cc: Ditto.
        * init.cc: Ditto.
        * strace.cc: Ditto.
        * tty.cc: Ditto.
        * grp.cc (parse_grp): Eliminate atoi.
        * passwd.cc (grab_int): Ditto.
        * grp.cc (getgroups): Eliminate str{n,}casecmp.
        * path.cc (get_raw_device_number): Ditto.
        * path.cc (sort_by_native_name): Ditto.
        * spawn.cc (iscmd): Ditto.
        * uinfo.cc (internal_getlogin): Ditto.
@
text
@d47 1
a47 1
  return _execve (path, (char * const  *) argv, *user_data->envptr);
d55 1
a55 1
  return _execve (path, (char * const *) argv, *user_data->envptr);
d88 1
a88 1
  return sexecve (hToken, path, (char * const *) argv, *user_data->envptr);
d134 1
a134 2
  return sexecvpe (hToken, path, (const char * const *) argv,
					      *user_data->envptr);
d166 1
a166 1
  return sexecve (hToken, path, argv, *user_data->envptr);
d174 1
a174 1
  return sexecvpe (hToken, path, argv, *user_data->envptr);
@


1.2
log
@* exceptions.cc (interruptible): Allocate slightly more space for directory
name check.  Windows 95 seems to null-terminate the directory otherwise.
(interrupt_on_return): Issue a fatal error if we can't find the caller's stack.
* spawn.cc (find_exec): Accept a path_conv argument rather than a buffer so
that the caller can find things out about a translated path.
(perhaps_suffix): Ditto.
(spawn_guts): Allocate path_conv stuff here so that we can find out stuff about
the translated path (this is work in progress).
* environ.cc (environ_init): Accept an as-yet unused argument indicating
whether we were invoked from a cygwin parent or not.
(winenv): Ditto.
(posify): Accept an argument indicating whether the path has already been
translated.
* dlfcn.cc (check_access): Provide a path_conv buffer to find_exec.
* exec.cc (sexecvpe): Ditto.
* path.cc (path_conv::check): Rename from path_conv::path_conv.
(mount_item::getmntent): Recognize "Cygwin executable" bit.
(symlink_info::check): Remove debugging statements.
* path.h (class path_conv): Add iscygexec method.  Rewrite constructor to call
"check" method to allow multiple operations on a path_conv variable.
* pinfo.cc (pinfo_init): Pass argument to environ_init.
* shared.h: Bump PROC_MAGIC.
* winsup.h: Reflect above changes to function arguments.
* include/sys/mount.h: Add MOUNT_CYGWIN_EXEC type.
@
text
@a13 1
#include <ctype.h>
@


1.1
log
@Initial revision
@
text
@d201 1
a201 1
  char buf[MAXNAMLEN];
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
