head	1.10;
access;
symbols
	cygwin-1_7_35-release:1.10
	cygwin-1_7_34-release:1.10
	cygwin-1_7_33-release:1.10
	cygwin-1_7_32-release:1.10
	cygwin-1_7_31-release:1.10
	cygwin-1_7_30-release:1.10
	cygwin-1_7_29-release:1.10
	cygwin-1_7_29-release-branchpoint:1.10.0.2
	cygwin-pre-user-db:1.10
	cygwin-1_7_28-release:1.10
	cygwin-1_7_27-release:1.10
	cygwin-1_7_26-release:1.10
	cygwin-1_7_25-release:1.10
	cygwin-1_7_24-release:1.10
	cygwin-1_7_23-release:1.10
	cygwin-1_7_22-release:1.10
	cygwin-1_7_21-release:1.10
	cygwin-1_7_20-release:1.8
	cygwin-1_7_19-release:1.8
	cygwin-64bit-postmerge:1.8
	cygwin-64bit-premerge-branch:1.8.0.2
	cygwin-64bit-premerge:1.8
	cygwin-1_7_18-release:1.8
	post-ptmalloc3:1.7.6.1
	pre-ptmalloc3:1.7.6.1
	cygwin-1_7_17-release:1.8
	cygwin-64bit-branch:1.7.0.6
	cygwin-1_7_16-release:1.7
	cygwin-1_7_15-release:1.7
	cygwin-1_7_14_2-release:1.7
	cygwin-1_7_14-release:1.7
	cygwin-1_7_12-release:1.7
	cygwin-1_7_11-release:1.7
	cygwin-1_7_10-release:1.7
	signal-rewrite:1.7.0.4
	pre-notty:1.7
	cygwin-1_7_9-release:1.7
	cv-post-1_7_9:1.7.0.2
	cygwin-1_7_8-release:1.7
	cygwin-1_7_7-release:1.7
	cygwin-1_7_5-release:1.6
	cygwin-1_7_4-release:1.6
	cygwin-1_7_3-release:1.6
	cygwin-1_7_2-release:1.6
	fifo_doover3:1.6.0.4
	cygwin-1_7_1-release:1.6
	prefifo:1.6
	cv-branch-2:1.6.0.2
	pre-ripout-set_console_state_for_spawn:1.5
	EOL_registry_mounts:1.5
	preoverlapped:1.5
	drop_9x_support_start:1.5
	cr-0x5f1:1.5.0.26
	cv-branch:1.5.0.24
	pre-ptymaster-archetype:1.5
	cr-0x3b58:1.5.0.22
	cr-0x5ef:1.5.0.18
	after-mmap-privanon-noreserve:1.5
	after-mmap-revamp:1.5
	before-mmap-revamp:1.5
	cgf-more-exit-sync:1.5
	post_wait_sig_exit:1.5
	pre_wait_sig_exit:1.5
	reparent-point:1.5
	noreparent:1.5.0.16
	cr-0x5e6:1.5.0.14
	cr-0x9e:1.5.0.12
	cr-0x9d:1.5.0.10
	cgf-deleteme:1.5.0.8
	pre-sigrewrite:1.5
	corinna-01:1.5
	cr-0x9c:1.5.0.6
	cr-0x9b:1.5.0.4
	cr-0x99:1.5
	Z-emcb-cygwin_daemon:1.5.0.2
	w32api-2_2:1.5
	mingw-runtime-2_4:1.5
	pre-cgf-merge:1.5
	cgf-dev-branch:1.5.0.20
	predaemon:1.4
	cygwin_daemon_merge_HEAD:1.4
	pregp02r1:1.4.0.34
	cygnus_cvs_20020108_pre:1.4
	Z-cygwin_daemon_merge-new_HEAD:1.5
	Z-cygwin_daemon_merge_HEAD:1.5
	cygwin_daemon:1.4.0.4;
locks; strict;
comment	@ * @;
expand	@o@;


1.10
date	2013.06.18.10.01.33;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2013.06.18.09.45.37;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2012.08.14.19.38.43;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2010.08.30.01.57.36;	author cgf;	state Exp;
branches
	1.7.6.1;
next	1.6;

1.6
date	2009.01.03.05.12.20;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.24.14.24.33;	author rbcollins;	state Exp;
branches;
next	1.4;

1.4
date	2001.09.07.21.32.04;	author cgf;	state Exp;
branches
	1.4.4.1;
next	1.3;

1.3
date	2001.06.24.22.26.51;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.03.02.53.24;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.7.6.1
date	2012.08.16.09.41.45;	author corinna;	state Exp;
branches;
next	;

1.4.4.1
date	2002.06.13.14.34.06;	author rbcollins;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.10
log
@	* gmon.c: Drop gratuitous inclusion of strings.h.  Remove __MINGW32__
	around definition of bzero.
@
text
@/*-
 * Copyright (c) 1983, 1992, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

#if !defined(lint) && defined(LIBC_SCCS)
static char rcsid[] = "$OpenBSD: gmon.c,v 1.8 1997/07/23 21:11:27 kstailey Exp $";
#endif

/*
 * This file is taken from Cygwin distribution. Please keep it in sync.
 * The differences should be within __MINGW32__ guard.
 */

#include <fcntl.h>
#include <stdlib.h>
#include <stdio.h>
#ifndef __MINGW32__
#include <unistd.h>
#include <sys/param.h>
#endif
#include <sys/types.h>
#include "gmon.h"
#include "profil.h"

/* XXX needed? */
//extern char *minbrk __asm ("minbrk");

#ifdef _WIN64
#define MINUS_ONE_P (-1LL)
#else
#define MINUS_ONE_P (-1)
#endif

#include <string.h>
#define bzero(ptr,size) memset (ptr, 0, size);

struct gmonparam _gmonparam = { GMON_PROF_OFF, NULL, 0, NULL, 0, NULL, 0, 0L,
  0, 0, 0, 0};

static int	s_scale;
/* see profil(2) where this is describe (incorrectly) */
#define		SCALE_1_TO_1	0x10000L

#define ERR(s) write(2, s, sizeof(s))

void	moncontrol __P((int));

static void *
fake_sbrk(int size)
{
    void *rv = malloc(size);
    if (rv)
      return rv;
    else
      return (void *) MINUS_ONE_P;
}

void monstartup (size_t, size_t);

void
monstartup (size_t lowpc, size_t highpc)
{
	register size_t o;
	char *cp;
	struct gmonparam *p = &_gmonparam;

	/*
	 * round lowpc and highpc to multiples of the density we're using
	 * so the rest of the scaling (here and in gprof) stays in ints.
	 */
	p->lowpc = ROUNDDOWN(lowpc, HISTFRACTION * sizeof(HISTCOUNTER));
	p->highpc = ROUNDUP(highpc, HISTFRACTION * sizeof(HISTCOUNTER));
	p->textsize = p->highpc - p->lowpc;
	p->kcountsize = p->textsize / HISTFRACTION;
	p->hashfraction = HASHFRACTION;
	p->fromssize = p->textsize / p->hashfraction;
	p->tolimit = p->textsize * ARCDENSITY / 100;
	if (p->tolimit < MINARCS)
		p->tolimit = MINARCS;
	else if (p->tolimit > MAXARCS)
		p->tolimit = MAXARCS;
	p->tossize = p->tolimit * sizeof(struct tostruct);

	cp = fake_sbrk(p->kcountsize + p->fromssize + p->tossize);
	if (cp == (char *)MINUS_ONE_P) {
		ERR("monstartup: out of memory\n");
		return;
	}

	/* zero out cp as value will be added there */
	bzero(cp, p->kcountsize + p->fromssize + p->tossize);

	p->tos = (struct tostruct *)cp;
	cp += p->tossize;
	p->kcount = (u_short *)cp;
	cp += p->kcountsize;
	p->froms = (u_short *)cp;

	/* XXX minbrk needed? */
	//minbrk = fake_sbrk(0);
	p->tos[0].link = 0;

	o = p->highpc - p->lowpc;
	if (p->kcountsize < o) {
#ifndef notdef
		s_scale = ((float)p->kcountsize / o ) * SCALE_1_TO_1;
#else /* avoid floating point */
		int quot = o / p->kcountsize;

		if (quot >= 0x10000)
			s_scale = 1;
		else if (quot >= 0x100)
			s_scale = 0x10000 / quot;
		else if (o >= 0x800000)
			s_scale = 0x1000000 / (o / (p->kcountsize >> 8));
		else
			s_scale = 0x1000000 / ((o << 8) / p->kcountsize);
#endif
	} else
		s_scale = SCALE_1_TO_1;

	moncontrol(1);
}

void _mcleanup (void);
void
_mcleanup(void)
{
	static char gmon_out[] = "gmon.out";
	int fd;
	int hz;
	int fromindex;
	int endfrom;
	size_t frompc;
	int toindex;
	struct rawarc rawarc;
	struct gmonparam *p = &_gmonparam;
	struct gmonhdr gmonhdr, *hdr;
	const char *proffile;
#ifdef DEBUG
	int log, len;
	char dbuf[200];
#endif

	if (p->state == GMON_PROF_ERROR)
		ERR("_mcleanup: tos overflow\n");

	hz = PROF_HZ;
	moncontrol(0);

#ifdef nope
	if ((profdir = getenv("PROFDIR")) != NULL) {
		extern char *__progname;
		char *s, *t, *limit;
		pid_t pid;
		long divisor;

		/* If PROFDIR contains a null value, no profiling
		   output is produced */
		if (*profdir == '\0') {
			return;
		}

		limit = buf + sizeof buf - 1 - 10 - 1 -
		    strlen(__progname) - 1;
		t = buf;
		s = profdir;
		while((*t = *s) != '\0' && t < limit) {
			t++;
			s++;
		}
		*t++ = '/';

		/*
		 * Copy and convert pid from a pid_t to a string.  For
		 * best performance, divisor should be initialized to
		 * the largest power of 10 less than PID_MAX.
		 */
		pid = getpid();
		divisor=10000;
		while (divisor > pid) divisor /= 10;	/* skip leading zeros */
		do {
			*t++ = (pid/divisor) + '0';
			pid %= divisor;
		} while (divisor /= 10);
		*t++ = '.';

		s = __progname;
		while ((*t++ = *s++) != '\0')
			;

		proffile = buf;
	} else {
		proffile = gmon_out;
	}
#else
	proffile = gmon_out;
#endif

	fd = open(proffile , O_CREAT|O_TRUNC|O_WRONLY|O_BINARY, 0666);
	if (fd < 0) {
		perror( proffile );
		return;
	}
#ifdef DEBUG
	log = open("gmon.log", O_CREAT|O_TRUNC|O_WRONLY, 0664);
	if (log < 0) {
		perror("mcount: gmon.log");
		return;
	}
	len = sprintf(dbuf, "[mcleanup1] kcount 0x%x ssiz %d\n",
	    p->kcount, p->kcountsize);
	write(log, dbuf, len);
#endif
	hdr = (struct gmonhdr *)&gmonhdr;
	hdr->lpc = p->lowpc;
	hdr->hpc = p->highpc;
	hdr->ncnt = p->kcountsize + sizeof(gmonhdr);
	hdr->version = GMONVERSION;
	hdr->profrate = hz;
	write(fd, (char *)hdr, sizeof *hdr);
	write(fd, p->kcount, p->kcountsize);
	endfrom = p->fromssize / sizeof(*p->froms);
	for (fromindex = 0; fromindex < endfrom; fromindex++) {
		if (p->froms[fromindex] == 0)
			continue;

		frompc = p->lowpc;
		frompc += fromindex * p->hashfraction * sizeof(*p->froms);
		for (toindex = p->froms[fromindex]; toindex != 0;
		     toindex = p->tos[toindex].link) {
#ifdef DEBUG
			len = sprintf(dbuf,
			"[mcleanup2] frompc 0x%x selfpc 0x%x count %d\n" ,
				frompc, p->tos[toindex].selfpc,
				p->tos[toindex].count);
			write(log, dbuf, len);
#endif
			rawarc.raw_frompc = frompc;
			rawarc.raw_selfpc = p->tos[toindex].selfpc;
			rawarc.raw_count = p->tos[toindex].count;
			write(fd, &rawarc, sizeof rawarc);
		}
	}
	close(fd);
}

/*
 * Control profiling
 *	profiling is what mcount checks to see if
 *	all the data structures are ready.
 */
void
moncontrol(int mode)
{
	struct gmonparam *p = &_gmonparam;

	if (mode) {
		/* start */
		profil((char *)p->kcount, p->kcountsize, p->lowpc,
		    s_scale);
		p->state = GMON_PROF_ON;
	} else {
		/* stop */
		profil((char *)0, 0, 0, 0);
		p->state = GMON_PROF_OFF;
	}
}


@


1.9
log
@	* Makefile.in (VPATH): Drop CONFIG_DIR.
	(EXTRA_DLL_OFILES): Remove.
	(DLL_OFILES): Remove EXTRA_DLL_OFILES.
	(ASFLAGS): Define as -D_WIN64 on x86_64.
	(GMON_OFILES): Add mcountFunc.o.
	($(srcdir)/$(TLSOFFSETS_H)): Use target_cpu rather than CONFIG_DIR.
	* configure.ac (CONFIG_DIR): Remove definition.
	* configure: Regenerate.
	* gcrt0.c: Use latest version from Mingw-w64 project.
	* gmon.c: Ditto.
	* gmon.h: Ditto.
	* mcount.c: Ditto.
	* mcountFunc.S: Ditto, new file.
	* profil.c: Ditto.
	* profil.h: Ditto.
	* config: Remove entire directory.
@
text
@a41 1
#include <strings.h>
a58 1
#ifdef __MINGW32__
a60 1
#endif
@


1.8
log
@	* gmon.c (_mcleanup): Fix scope bug when using gmon_out array.
@
text
@a12 4
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
d34 5
a38 1
#include "winlean.h"
d40 1
d42 2
d45 5
a49 4
#include <gmon.h>
#include <stdlib.h>

#include <profil.h>
d54 13
a66 1
struct gmonparam _gmonparam = { GMON_PROF_OFF };
d83 1
a83 1
      return (void *) -1;
d86 2
d89 1
a89 3
monstartup(lowpc, highpc)
	u_long lowpc;
	u_long highpc;
d91 1
a91 1
	register int o;
d113 1
a113 1
	if (cp == (char *)-1) {
d117 2
a118 1
#ifdef notdef
d120 1
a120 1
#endif
d153 1
d155 1
a155 1
_mcleanup()
d157 1
d162 1
a162 1
	u_long frompc;
d167 1
a167 4
	char *proffile;
#ifndef nope
	char gmon_out[] = "gmon.out";
#endif
d222 1
a222 1
		proffile = "gmon.out";
d282 1
a282 2
moncontrol(mode)
	int mode;
@


1.7
log
@* winlean.h: New file.
* automode.c: Use "winlean.h".
* binmode.c: Ditto.
* gmon.c: Ditto.
* textmode.c: Ditto.
* textreadmode.c: Ditto.
* winsup.h: Ditto.
* lib/cygwin_attach_dll.c: Ditto.
* lib/dll_main.cc: Ditto.
* profile.c: Ditto.
* crt0.c: Ditto.  Cleanup ancient cruft.  Add dummy calls to cygwin_premain*.
* include/sys/cygwin.h: Remove old stuff.  Move premain declarations nearer to
other cygwin-specific function declarations.
* globals.cc: Add comment.
@
text
@d149 3
d209 1
a209 4
	{
	  char gmon_out[] = "gmon.out";
	  proffile = gmon_out;
	}
@


1.7.6.1
log
@Pull in changes from HEAD
@
text
@a148 3
#ifndef nope
	char gmon_out[] = "gmon.out";
#endif
d206 4
a209 1
	proffile = gmon_out;
@


1.6
log
@Remove unneeded header files from source files throughout.  Update copyrights
where appropriate.
* globals.cc: New file for generic global variables.
* mkglobals_h: New file to generate globals.h.
* mkstatic: New Script used to build a (currently non-working) static
libcygwin_s.a.
* Makefile.in: Add unused rule to build a non-working libcygwin_s.a.
(DLL_OFILES): Add globals.o.  Make all objects rely on globals.h.
(globals.h): New target.  Generate globals.h.
* cygtls.h: Honor new CYGTLS_HANDLE define to control when the HANDLE operator
is allowed in _cygtls.
* dcrt0.cc: Move most globals to globals.cc.
* init.cc: Ditto.
* environ.cc (strip_title_path): Remove now-unneeded extern.
* fhandler_serial.cc (fhandler_serial::open): Ditto.
* pinfo.cc: Ditto.
(commune_process): Ditto.
* shared.cc: Ditto.
* glob.cc: Ditto.
* strace.cc: Ditto.
* exceptions.cc: Define CYGTLS_HANDLE before including winsup.h.
* path.cc (stat_suffixes): Move here.
* security.h: Add forward class path_conv declaration.
* smallprint.cc (__small_vsprintf): Make a true c++ function.
(__small_sprintf): Ditto.
(small_printf): Ditto.
(console_printf): Ditto.
(__small_vswprintf): Ditto.
(__small_swprintf): Ditto.
* spawn.cc (spawn_guts): Remove _stdcall decoration in favor of regparm.
(hExeced): Move to globals.cc
* strfuncs.cc (current_codepage): Ditto.
(active_codepage): Ditto.
* sync.cc (lock_process::locker): Move here from dcrt0.cc.
* syscalls.cc (stat_suffixes): Move to path.cc.
* tty.cc (tty::create_master): Uncapitalize fatal warning for consistency.
* winsup.h: Include globals.h to declare most of the grab bag list of globals
which were previously defined here.
* mount.h: Move USER_* defines back to shared_info.h.
* speclib: Force temporary directory cleanup.
@
text
@d38 1
d43 1
a45 1
#include <windows.h>
@


1.5
log
@2002-05-25  Robert Collins   <rbtcollins@@hotmail.com>

        * gmon.c (fake_sbrk): Correctly return -1 on failed malloc's.
@
text
@a38 1
#include <stdlib.h>
a40 2
#include <sys/param.h>
#include <sys/types.h>
@


1.4
log
@* cygheap.h (init_cygheap): Move heap pointers here.
* include/sys/cygwin.h (perprocess): Remove heap pointers.
* dcrt0.cc (__cygwin_user_data): Reflect obsolete perprocess stuff.
(_dll_crt0): Don't initialize heap pointers.
(cygwin_dll_init): Ditto.
(release_upto): Use heap pointers from cygheap.
* heap.h: Ditto.
* fork.cc (fork_parent): Ditto.  Don't set heap pointers in ch.
(fork_child): Remove obsolete sigproc_fixup_after_fork.
* shared.cc (memory_init): Reorganize so that cygheap initialization is called
prior to regular heap since regular heap uses cygheap now.
* sigproc.cc (proc_subproc): Eliminate zombies allocation.
(sigproc_init): Move zombies alloation here.  Don't free up array on fork, just
reuse it.
(sigproc_fixup_after_fork): Eliminate.
* sigproc.h: Ditto.
* include/cygwin/version.h: Reflect change to perprocess structure.
@
text
@d47 1
d65 5
a69 1
    return malloc(size);
@


1.4.4.1
log
@Merged changes from HEAD
@
text
@a46 1
#include <windows.h>
d64 1
a64 5
    void *rv = malloc(size);
    if (rv)
      return rv;
    else
      return (void *) -1;
@


1.3
log
@forced commit
@
text
@d107 1
a107 1
        /* XXX minbrk needed? */
d154 1
a154 1
        hz = PROF_HZ;
@


1.2
log
@* cygrun.c (main): Fix compiler warning.
* gmon.c (_mcleanup): Ditto.
* profil.c (profile_off): Ditto.
* net.cc (find_winsock_errno): New function.
(__set_winsock_errno): Use find_winsock_errno.
(cygwin_setsockopt): Detect SO_ERROR for debugging.
(cygwin_getsockopt): Ditto.  Translate error when getsockopt returns SO_ERROR.
* winsup.h: regparmize __set_winsock_errno.
* include/sys/strace.h: Document that strace functions can't use regparm.
@
text
@@


1.1
log
@Initial revision
@
text
@d203 4
a206 1
	proffile = "gmon.out";
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
