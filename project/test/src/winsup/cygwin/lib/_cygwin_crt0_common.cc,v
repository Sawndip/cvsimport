head	1.27;
access;
symbols
	cygwin-1_7_35-release:1.27
	cygwin-1_7_34-release:1.27
	cygwin-1_7_33-release:1.27
	cygwin-1_7_32-release:1.27
	cygwin-1_7_31-release:1.27
	cygwin-1_7_30-release:1.27
	cygwin-1_7_29-release:1.27
	cygwin-1_7_29-release-branchpoint:1.27.0.2
	cygwin-pre-user-db:1.27
	cygwin-1_7_28-release:1.27
	cygwin-1_7_27-release:1.27
	cygwin-1_7_26-release:1.27
	cygwin-1_7_25-release:1.27
	cygwin-1_7_24-release:1.27
	cygwin-1_7_23-release:1.26
	cygwin-1_7_22-release:1.26
	cygwin-1_7_21-release:1.26
	cygwin-1_7_20-release:1.26
	cygwin-1_7_19-release:1.26
	cygwin-64bit-postmerge:1.26
	cygwin-64bit-premerge-branch:1.25.0.2
	cygwin-64bit-premerge:1.25
	cygwin-1_7_18-release:1.25
	post-ptmalloc3:1.24.2.3
	pre-ptmalloc3:1.24.2.3
	cygwin-1_7_17-release:1.24
	cygwin-64bit-branch:1.24.0.2
	cygwin-1_7_16-release:1.24
	cygwin-1_7_15-release:1.23
	cygwin-1_7_14_2-release:1.23
	cygwin-1_7_14-release:1.23
	cygwin-1_7_12-release:1.23
	cygwin-1_7_11-release:1.23
	cygwin-1_7_10-release:1.23
	signal-rewrite:1.22.0.4
	pre-notty:1.22
	cygwin-1_7_9-release:1.22
	cv-post-1_7_9:1.22.0.2
	cygwin-1_7_8-release:1.22
	cygwin-1_7_7-release:1.22
	cygwin-1_7_5-release:1.20
	cygwin-1_7_4-release:1.20
	cygwin-1_7_3-release:1.20
	cygwin-1_7_2-release:1.20
	fifo_doover3:1.20.0.2
	cygwin-1_7_1-release:1.20
	prefifo:1.17
	cv-branch-2:1.16.0.2
	pre-ripout-set_console_state_for_spawn:1.15
	EOL_registry_mounts:1.15
	preoverlapped:1.15
	drop_9x_support_start:1.15
	cr-0x5f1:1.15.0.10
	cv-branch:1.15.0.8
	pre-ptymaster-archetype:1.15
	cr-0x3b58:1.15.0.6
	cr-0x5ef:1.15.0.4
	after-mmap-privanon-noreserve:1.15
	after-mmap-revamp:1.15
	before-mmap-revamp:1.15
	cgf-more-exit-sync:1.15
	post_wait_sig_exit:1.15
	pre_wait_sig_exit:1.15
	reparent-point:1.15
	noreparent:1.15.0.2
	cr-0x5e6:1.12.0.8
	cr-0x9e:1.12.0.6
	cr-0x9d:1.12.0.4
	cgf-deleteme:1.12.0.2
	pre-sigrewrite:1.11
	corinna-01:1.11
	cr-0x9c:1.11.0.8
	cr-0x9b:1.11.0.6
	cr-0x99:1.11
	Z-emcb-cygwin_daemon:1.11.0.2
	w32api-2_2:1.11
	mingw-runtime-2_4:1.11
	pre-cgf-merge:1.11
	cgf-dev-branch:1.11.0.4
	predaemon:1.10
	cygwin_daemon_merge_HEAD:1.10
	pregp02r1:1.10.0.34
	cygnus_cvs_20020108_pre:1.10
	Z-cygwin_daemon_merge-new_HEAD:1.10
	Z-cygwin_daemon_merge_HEAD:1.10
	cygwin_daemon:1.10.0.4;
locks; strict;
comment	@// @;


1.27
date	2013.08.14.11.44.22;	author corinna;	state Exp;
branches;
next	1.26;

1.26
date	2013.04.23.09.44.35;	author corinna;	state Exp;
branches;
next	1.25;

1.25
date	2013.01.21.04.38.31;	author cgf;	state Exp;
branches;
next	1.24;

1.24
date	2012.07.02.02.24.25;	author cgf;	state Exp;
branches
	1.24.2.1;
next	1.23;

1.23
date	2011.12.17.23.39.47;	author cgf;	state Exp;
branches;
next	1.22;

1.22
date	2010.05.07.21.25.19;	author cgf;	state Exp;
branches;
next	1.21;

1.21
date	2010.04.20.03.30.32;	author cgf;	state Exp;
branches;
next	1.20;

1.20
date	2009.09.21.02.19.31;	author cgf;	state Exp;
branches;
next	1.19;

1.19
date	2009.08.17.12.45.51;	author cgf;	state Exp;
branches;
next	1.18;

1.18
date	2009.08.13.07.35.50;	author corinna;	state Exp;
branches;
next	1.17;

1.17
date	2009.07.07.20.12.44;	author davek;	state Exp;
branches;
next	1.16;

1.16
date	2009.01.03.05.12.22;	author cgf;	state Exp;
branches;
next	1.15;

1.15
date	2004.09.27.16.30.44;	author corinna;	state Exp;
branches;
next	1.14;

1.14
date	2004.09.16.09.14.29;	author corinna;	state Exp;
branches;
next	1.13;

1.13
date	2004.09.16.03.49.03;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2003.12.31.06.30.48;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2002.12.09.22.49.12;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2001.09.11.20.01.02;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2000.11.13.04.06.41;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.28.05.41.44;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2000.09.08.15.54.36;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.17.00.24.56;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2000.07.15.02.48.11;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.12.04.02.45;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.08.04.36.27;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.07.05.23.46.44;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.07.01.03.51.55;	author cgf;	state Exp;
branches;
next	;

1.24.2.1
date	2013.01.18.15.34.13;	author corinna;	state Exp;
branches;
next	1.24.2.2;

1.24.2.2
date	2013.01.21.13.52.14;	author corinna;	state Exp;
branches;
next	1.24.2.3;

1.24.2.3
date	2013.01.22.17.40.52;	author corinna;	state Exp;
branches;
next	1.24.2.4;

1.24.2.4
date	2013.03.05.14.29.30;	author corinna;	state Exp;
branches;
next	1.24.2.5;

1.24.2.5
date	2013.03.20.08.44.44;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.27
log
@	* include/sys/cygwin.h (struct per_process): Add posix_memalign.  Reduce
	size of unused2 accordingly.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
	* lib/_cygwin_crt0_common.cc (_cygwin_crt0_common): Initialize
	u->posix_memalign with address of posix_memalign.
	* malloc_wrapper.cc (posix_memalign): Call user-provided posix_memalign
	rather than just returning ENOSYS.
	* globals.cc (__cygwin_user_data): Initialize posix_memalign member.
@
text
@/* _cygwin_crt0_common.cc: common crt0 function for cygwin crt0's.

   Copyright 2000, 2001, 2002, 2003, 2004, 2009, 2010, 2011, 2012, 2013
   Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include "winsup.h"
#include "crt0.h"
#include "cygwin-cxx.h"

/* Weaken these declarations so the references don't pull in C++ dependencies
   unnecessarily.  */
#define WEAK __attribute__ ((weak))

#ifdef __x86_64__
#define REAL_ZNWX		"__real__Znwm"
#define REAL_ZNAX		"__real__Znam"
#define REAL_ZNWX_NOTHROW_T	"__real__ZnwmRKSt9nothrow_t"
#define REAL_ZNAX_NOTHROW_T	"__real__ZnamRKSt9nothrow_t"
#else
#define REAL_ZNWX		"___real__Znwj"
#define REAL_ZNAX		"___real__Znaj"
#define REAL_ZNWX_NOTHROW_T	"___real__ZnwjRKSt9nothrow_t"
#define REAL_ZNAX_NOTHROW_T	"___real__ZnajRKSt9nothrow_t"
#endif
#define REAL_ZDLPV		_SYMSTR (__real__ZdlPv)
#define REAL_ZDAPV		_SYMSTR (__real__ZdaPv)
#define REAL_ZDLPV_NOTHROW_T	_SYMSTR (__real__ZdlPvRKSt9nothrow_t)
#define REAL_ZDAPV_NOTHROW_T	_SYMSTR (__real__ZdaPvRKSt9nothrow_t)

/* Use asm names to bypass the --wrap that is being applied to redirect all other
   references to these operators toward the redirectors in the Cygwin DLL; this
   way we can record what definitions were visible at final link time but still
   send all calls to the redirectors.  */
extern WEAK void *operator new(std::size_t sz) throw (std::bad_alloc)
			__asm__ (REAL_ZNWX);
extern WEAK void *operator new[](std::size_t sz) throw (std::bad_alloc)
			__asm__ (REAL_ZNAX);
extern WEAK void operator delete(void *p) throw()
			__asm__ (REAL_ZDLPV);
extern WEAK void operator delete[](void *p) throw()
			__asm__ (REAL_ZDAPV);
extern WEAK void *operator new(std::size_t sz, const std::nothrow_t &nt) throw()
			__asm__ (REAL_ZNWX_NOTHROW_T);
extern WEAK void *operator new[](std::size_t sz, const std::nothrow_t &nt) throw()
			__asm__ (REAL_ZNAX_NOTHROW_T);
extern WEAK void operator delete(void *p, const std::nothrow_t &nt) throw()
			__asm__ (REAL_ZDLPV_NOTHROW_T);
extern WEAK void operator delete[](void *p, const std::nothrow_t &nt) throw()
			__asm__ (REAL_ZDAPV_NOTHROW_T);

/* Avoid an info message from linker when linking applications.  */
extern __declspec(dllimport) struct _reent *_impure_ptr;

/* Initialised in _cygwin_dll_entry. */
extern int __dynamically_loaded;

#undef environ

extern "C"
{
#ifndef __x86_64__
char **environ;
#endif
int _fmode;

extern char __RUNTIME_PSEUDO_RELOC_LIST__;
extern char __RUNTIME_PSEUDO_RELOC_LIST_END__;
#ifdef __x86_64__
extern char __image_base__;
#define _image_base__ __image_base__
#else
extern char _image_base__;
#endif

struct per_process_cxx_malloc __cygwin_cxx_malloc =
{
  &(operator new), &(operator new[]),
  &(operator delete), &(operator delete[]),
  &(operator new), &(operator new[]),
  &(operator delete), &(operator delete[])
};

/* Set up pointers to various pieces so the dll can then use them,
   and then jump to the dll.  */

int __stdcall
_cygwin_crt0_common (MainFunc f, per_process *u)
{
  per_process *newu = (per_process *) cygwin_internal (CW_USER_DATA);
  bool uwasnull;

  /* u is non-NULL if we are in a DLL, and NULL in the main exe.
     newu is the Cygwin DLL's internal per_process and never NULL.  */
  if (u != NULL)
    uwasnull = false;	/* Caller allocated space for per_process structure.  */
  else
    {
      u = newu;		/* Using DLL built-in per_process.  */
      uwasnull = true;	/* Remember for later.  */
    }

  /* The version numbers are the main source of compatibility checking.
     As a backup to them, we use the size of the per_process struct.  */
  u->magic_biscuit = sizeof (per_process);

  /* cygwin.dll version number in effect at the time the app was created.  */
  u->dll_major = CYGWIN_VERSION_DLL_MAJOR;
  u->dll_minor = CYGWIN_VERSION_DLL_MINOR;
  u->api_major = CYGWIN_VERSION_API_MAJOR;
  u->api_minor = CYGWIN_VERSION_API_MINOR;

  u->ctors = &__CTOR_LIST__;
  u->dtors = &__DTOR_LIST__;
#ifndef __x86_64__
  u->envptr = &environ;
#endif
  if (uwasnull)
    _impure_ptr = u->impure_ptr;	/* Use field initialized in newer DLLs. */
  else
    u->impure_ptr_ptr = &_impure_ptr;	/* Older DLLs need this. */

  u->main = f;

  /* These functions are executed prior to main.  They are just stubs unless the
     user overrides them. */
  u->premain[0] = cygwin_premain0;
  u->premain[1] = cygwin_premain1;
  u->premain[2] = cygwin_premain2;
  u->premain[3] = cygwin_premain3;
  u->fmode_ptr = &_fmode;

  /* This is used to record what the initial sp was.  The value is needed
     when copying the parent's stack to the child during a fork.  */
  u->initial_sp = (char *) __builtin_frame_address (1);

  /* Remember whatever the user linked his application with - or
     point to entries in the dll.  */
  u->malloc = &malloc;
  u->free = &free;
  u->realloc = &realloc;
  u->calloc = &calloc;
  u->posix_memalign = &posix_memalign;

  /* Likewise for the C++ memory operators, if any, but not if we
     were dlopen()'d, as we might get dlclose()'d and that would
     leave stale function pointers behind.    */
  if (newu && newu->cxx_malloc && !__dynamically_loaded)
    {
      /* Inherit what we don't override.  */
#define CONDITIONALLY_OVERRIDE(MEMBER) \
      if (!__cygwin_cxx_malloc.MEMBER) \
	__cygwin_cxx_malloc.MEMBER = newu->cxx_malloc->MEMBER;
      CONDITIONALLY_OVERRIDE(oper_new);
      CONDITIONALLY_OVERRIDE(oper_new__);
      CONDITIONALLY_OVERRIDE(oper_delete);
      CONDITIONALLY_OVERRIDE(oper_delete__);
      CONDITIONALLY_OVERRIDE(oper_new_nt);
      CONDITIONALLY_OVERRIDE(oper_new___nt);
      CONDITIONALLY_OVERRIDE(oper_delete_nt);
      CONDITIONALLY_OVERRIDE(oper_delete___nt);
      /* Now update the resulting set into the global redirectors.  */
      *newu->cxx_malloc = __cygwin_cxx_malloc;
    }

  /* Setup the module handle so fork can get the path name.  */
  u->hmodule = GetModuleHandle (0);

  /* variables for fork */
#ifdef __x86_64__
  u->data_start = &__data_start__;
  u->data_end = &__data_end__;
  u->bss_start = &__bss_start__;
  u->bss_end = &__bss_end__;
#else
  u->data_start = &_data_start__;
  u->data_end = &_data_end__;
  u->bss_start = &_bss_start__;
  u->bss_end = &_bss_end__;
#endif
  u->pseudo_reloc_start = &__RUNTIME_PSEUDO_RELOC_LIST__;
  u->pseudo_reloc_end = &__RUNTIME_PSEUDO_RELOC_LIST_END__;
  u->image_base = &_image_base__;
  /* This is actually a dummy call to force the linker to load this
     symbol for older apps which need it.  */
  _pei386_runtime_relocator (NULL);
  return 1;
}
} /* "C" */
@


1.26
log
@	* Merge in cygwin-64bit-branch.
@
text
@d148 1
@


1.25
log
@Throughout, update copyrights to reflect dates which correspond to main-branch
checkins.  Regularize copyright format.
@
text
@d3 2
a4 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2009, 2010, 2011, 2012 Red Hat, Inc.
d20 16
d41 1
a41 1
			__asm__ ("___real__Znwj");
d43 1
a43 1
			__asm__ ("___real__Znaj");
d45 1
a45 1
			__asm__ ("___real__ZdlPv ");
d47 1
a47 1
			__asm__ ("___real__ZdaPv");
d49 1
a49 1
			__asm__ ("___real__ZnwjRKSt9nothrow_t");
d51 1
a51 1
			__asm__ ("___real__ZnajRKSt9nothrow_t");
d53 1
a53 1
			__asm__ ("___real__ZdlPvRKSt9nothrow_t");
d55 1
a55 1
			__asm__ ("___real__ZdaPvRKSt9nothrow_t");
d67 1
d69 1
d74 4
d79 1
d120 1
d122 1
d174 6
d184 1
@


1.24
log
@* Makefile.in: Add some more optimization flags for cygwait, malloc and path.  Explain
why -fomit-frame-pointer doesn't work right for passwd.o and path.o.  Add
-static to link command line for cygwin0.dll.
* fhandler_disk_file.cc (fhandler_disk_file::facl): Reorganize slightly to
silence compiler warning when compiling with -fstack-check.
* net.cc (inet_ntop6): Initialize structure members to silence compiler warning
when compiling with -fstack-check.
* pseudo-reloc.cc (_pei386_runtime_relocator): Make this a C function.  Detect
NULL u.
* winsup.h (_pei386_runtime_relocator): Declare this as extern "C".
* lib/_cygwin_crt0_common.cc (_pei386_runtime_relocator): Call with NULL
argument.
* signal.cc (sigaction_worker): Eliminate last argument.  Let callers report
their own strace info.  Regparmize.
(sigaction): Reflect sigaction_worker changes.
(siginterrupt): Ditto.
* exceptions.cc: Update copyright.
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2009 Red Hat, Inc.
@


1.24.2.1
log
@	* include/cygwin/config.h (__SYMBOL_PREFIX): Define.
	(_SYMSTR): Define.
	* child_info.h (spawn_info): Use _SYMSTR macro to define assembler
	symbol.
	(fork_info): Ditto.
	* libstdcxx_wrapper.cc: Ditto, throughout.
	* winsup.h (dll_crt0): Ditto.
	* include/cygwin/time.h (daylight): Ditto.
	(timezone): Ditto.
	* lib/_cygwin_crt0_common.cc: Ditto, throughout.
@
text
@d24 1
a24 1
			__asm__ (_SYMSTR (__real__Znwj));
d26 1
a26 1
			__asm__ (_SYMSTR (__real__Znaj));
d28 1
a28 1
			__asm__ (_SYMSTR (__real__ZdlPv ));
d30 1
a30 1
			__asm__ (_SYMSTR (__real__ZdaPv));
d32 1
a32 1
			__asm__ (_SYMSTR (__real__ZnwjRKSt9nothrow_t));
d34 1
a34 1
			__asm__ (_SYMSTR (__real__ZnajRKSt9nothrow_t));
d36 1
a36 1
			__asm__ (_SYMSTR (__real__ZdlPvRKSt9nothrow_t));
d38 1
a38 1
			__asm__ (_SYMSTR (__real__ZdaPvRKSt9nothrow_t));
@


1.24.2.2
log
@Pull in changes from HEAD
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2009, 2010, 2011, 2012 Red Hat, Inc.
@


1.24.2.3
log
@	* Makefile.in (speclib): Exclude main symbol.
	(NEW_FUNCTIONS): Set to empty for x86_64.
	($(DEF_FILE)): Call gendef with target_alias as additional parameter.
	* configure.ac (DLL_ENTRY): Drop leading underscore for x86_64.
	* configure: Regenerate.
	* cygwin.sc.in: Drop _SYM usage for __data_start__, __data_end__,
	__bss_start__, and __bss_end__.
	* cygwin64.din: Remove all fast-call math function entry points.
	(_alloca): Define as __alloca.
	(_dll_crt0): Drop 32 bit stdcall specifier.
	(dll_entry): Ditto.
	(dll_noncygwin_dllcrt0): Remove.
	(getpwduid): Remove.
	(lacl): Remove.
	* dcrt0.cc (dll_data_start): Define for x86_64.
	(dll_data_end): Ditto.
	(dll_bss_start): Ditto.
	(dll_bss_end): Ditto.
	* gendef: Handle new target argument.  Handle 64 bit target.
	Add preliminiary empty function definitions for 64 bit to allow linking.
	* winsup.h: Define linker data and bss section symbols with
	additional underscore for x86_64.
	* lib/_cygwin_crt0_common.cc (__image_base__): Define for 64 bit and
	map to _image_base__ via macro.
	(_cygwin_crt0_common): Fix setting data and bss section borders on
	x86_64.
@
text
@a54 4
#ifdef __x86_64__
extern char __image_base__;
#define _image_base__ __image_base__
#else
a55 1
#endif
a147 6
#ifdef __x86_64__
  u->data_start = &__data_start__;
  u->data_end = &__data_end__;
  u->bss_start = &__bss_start__;
  u->bss_end = &__bss_end__;
#else
a151 1
#endif
@


1.24.2.4
log
@	For x86_64 target:
	* Makefile.in (COMMON_CFLAGS): Add -mcmodel=small to create smaller
	footprint.
	* cygwin64.din (__cygwin_environ): Drop export.  Only export environ
	as alias to __cygwin_environ.
	* dcrt0.cc (dll_crt0_1): Call main with __cygwin_environ as parameter.
	(_dll_crt0): Don't set main_environ.
	(cygwin_dll_init): Don't create local variable envp and don't set
	user_data->envptr.
	* dll_init.cc (dll_list::alloc): Don't assert.
	* dll_init.h (per_module::operator =): Don't set envptr.
	* environ.cc (cur_environ): Disable.
	* environ.h (main_environ): Don't define.
	(cur_environ): Change to macro.
	* globals.cc (main_environ): Don't initialize.
	(struct per_process): Drop envptr.
	* perprocess.h (SIZEOF_PER_PROCESS): Set to 41*8 to accommodate size
	change of struct per_process.
	* include/sys/cygwin.h (struct per_process): Drop envptr.
	* lib/_cygwin_crt0_common.cc (environ): Drop declaration.
	(_cygwin_crt0_common): Don't set u->envptr.
@
text
@d3 1
a3 2
   Copyright 2000, 2001, 2002, 2003, 2004, 2009, 2010, 2011, 2012, 2013
   Red Hat, Inc.
a49 1
#ifndef __x86_64__
a50 1
#endif
a100 1
#ifndef __x86_64__
a101 1
#endif
@


1.24.2.5
log
@	* lib/_cygwin_crt0_common.cc: Fix mangled operator new names for x86_64.
@
text
@a19 16
#ifdef __x86_64__
#define REAL_ZNWX		"__real__Znwm"
#define REAL_ZNAX		"__real__Znam"
#define REAL_ZNWX_NOTHROW_T	"__real__ZnwmRKSt9nothrow_t"
#define REAL_ZNAX_NOTHROW_T	"__real__ZnamRKSt9nothrow_t"
#else
#define REAL_ZNWX		"___real__Znwj"
#define REAL_ZNAX		"___real__Znaj"
#define REAL_ZNWX_NOTHROW_T	"___real__ZnwjRKSt9nothrow_t"
#define REAL_ZNAX_NOTHROW_T	"___real__ZnajRKSt9nothrow_t"
#endif
#define REAL_ZDLPV		_SYMSTR (__real__ZdlPv)
#define REAL_ZDAPV		_SYMSTR (__real__ZdaPv)
#define REAL_ZDLPV_NOTHROW_T	_SYMSTR (__real__ZdlPvRKSt9nothrow_t)
#define REAL_ZDAPV_NOTHROW_T	_SYMSTR (__real__ZdaPvRKSt9nothrow_t)

d25 1
a25 1
			__asm__ (REAL_ZNWX);
d27 1
a27 1
			__asm__ (REAL_ZNAX);
d29 1
a29 1
			__asm__ (REAL_ZDLPV);
d31 1
a31 1
			__asm__ (REAL_ZDAPV);
d33 1
a33 1
			__asm__ (REAL_ZNWX_NOTHROW_T);
d35 1
a35 1
			__asm__ (REAL_ZNAX_NOTHROW_T);
d37 1
a37 1
			__asm__ (REAL_ZDLPV_NOTHROW_T);
d39 1
a39 1
			__asm__ (REAL_ZDAPV_NOTHROW_T);
@


1.23
log
@Clean up whitespace.
@
text
@a51 1
void _pei386_runtime_relocator (void);
d157 1
a157 1
  _pei386_runtime_relocator ();
@


1.22
log
@* Makefile.in (DLL_OFILES): Add pseudo-reloc.o.
* dcrt0.cc (child_info_fork::handle_fork): Call _pei386_runtime_relocator here.
(dll_crt0_1): Ditto for non-fork case.
* dll_init.cc (dll::init): Complain more in comment.  Clean up slightly.
(dll_dllcrt0_1): Call _pei386_runtime_relocator when we know we have a
filled-in per_process structure.
* globals.cc (__cygwin_user_data): Accommodate new fields for
_pei386_runtime_relocator.
* pseudo-reloc.cc: New file adapted from old lib/pseudo-reloc.c.  Include
winsup.h directly.  Collapse #ifdef __CYGWIN__ into one block.  Perform minor
whitespace code reformatting.
(__report_error): Use small_printf to output error.
(_pei386_runtime_relocator): Conditionalize for cygwin to take per_process
pointer parameter.
* winsup.h (_pei386_runtime_relocator): Declare.
* include/cygwin/version.h
(CYGWIN_VERSION_PER_PROCESS_API_VERSION_COMBINED): New macro.
(CYGWIN_VERSION_USER_API_VERSION_COMBINED): Use above macro.
(CYGWIN_VERSION_USE_PSEUDO_RELOC_IN_DLL): New macro.
(CYGWIN_VERSION_API_MINOR): Bump to 227.
* include/sys/cygwin.h: Remove obsolete comment.
(per_process::unused2): Shorten.
(per_process::pseudo_reloc_start): New field.
(per_process::pseudo_reloc_end): Ditto.
(per_process::image_base): Ditto.
* lib/_cygwin_crt0_common.cc: Declare pseudo runtime externs needed for
per_process structure.
(_cygwin_crt0_common): Fill in pseudo_reloc runtime constants.
* lib/pseudo-reloc-dummy.c: New file.  Dummy function to satisify ld.
* lib/pseudo-reloc.c: Delete.
@
text
@d15 1
a15 1
/* Weaken these declarations so the references don't pull in C++ dependencies 
d58 1
a58 1
struct per_process_cxx_malloc __cygwin_cxx_malloc = 
@


1.21
log
@* lib/_cygwin_crt0_common.cc: Remove unneeded declarations.
@
text
@d52 5
a56 1
void _pei386_runtime_relocator ();
d153 5
a157 1

@


1.20
log
@* external.cc (cygwin_internal): Add hack to always reset cxx_malloc to proper
value.
* lib/_cygwin_crt0_common.cc (_cygwin_crt0_common): Relocate wayward comment.
@
text
@a50 3
int cygwin_attach_dll (HMODULE, MainFunc);
int cygwin_attach_noncygwin_dll (HMODULE, MainFunc);
int main (int, char **, char **);
@


1.19
log
@* pipe.cc (fhandler_pipe::create_selectable): Add -pipe to default pipe names.
* lib/_cygwin_crt0_common.cc (_cygwin_crt0_common): Use bool/true/false for
what is actually a boolean variable.
@
text
@a70 2
  /* This is used to record what the initial sp was.  The value is needed
     when copying the parent's stack to the child during a fork.  */
d111 3
@


1.18
log
@	* cxx.cc (default_cygwin_cxx_malloc): Enhance commenting.
	* dll_init.cc (dll_dllcrt0_1): Likewise.
	* dlfcn.cc (dlopen): Prevent dlopen()'d DLL from installing any
	cxx malloc overrides.
	* include/cygwin/cygwin_dll.h (__dynamically_loaded): New variable.
	* lib/_cygwin_crt0_common.cc (_cygwin_crt0_common): Check it and only
	install cxx malloc overrides when statically loaded.  Extend comments.
@
text
@d74 1
a74 1
  int uwasnull;
d79 1
a79 1
    uwasnull = 0;	/* Caller allocated space for per_process structure.  */
d83 1
a83 1
      uwasnull = 1;	/* Remember for later.  */
@


1.17
log
@winsup/ChangeLog:

	* Makefile.common (COMPILE_CXX): Add support for per-file overrides
	to exclude $(nostdinc) and $(nostdincxx) from compiler flags.
	(COMPILE_CC): Likewise for $(nostdinc).

winsup/cygwin/ChangeLog:

	* Makefile.in (DLL_OFILES): Add libstdcxx_wrapper.o
	(libstdcxx_wrapper_CFLAGS): Add flags for new module.
	(_cygwin_crt0_common_STDINCFLAGS): Define per-file override.
	(libstdcxx_wrapper_STDINCFLAGS, cxx_STDINCFLAGS): Likewise.
	* cxx.cc: Include "cygwin-cxx.h".
	(operator new): Tweak prototype for full standards compliance.
	(operator new[]): Likewise.
	(operator new (nothrow)): New fallback function.
	(operator new[] (nothrow), operator delete (nothrow),
	operator delete[] (nothrow)): Likewise.
	(default_cygwin_cxx_malloc): New struct of pointers to the above,
	for final last-resort fallback default.
	* cygwin-cxx.h: New file.
	(struct per_process_cxx_malloc): Define.
	(default_cygwin_cxx_malloc): Declare extern.
	* cygwin.din (__wrap__ZdaPv): Export new wrapper.
	(__wrap__ZdaPvRKSt9nothrow_t, __wrap__ZdlPv,
	__wrap__ZdlPvRKSt9nothrow_t, __wrap__Znaj,
	__wrap__ZnajRKSt9nothrow_t, __wrap__Znwj,
	__wrap__ZnwjRKSt9nothrow_t): Likewise.
	* globals.cc (__cygwin_user_data): Init newly-repurposed 'forkee'
	field (now 'cxx_malloc') to point to default_cygwin_cxx_malloc.
	* libstdcxx_wrapper.cc: New file.
	(__wrap__ZdaPv, __wrap__ZdaPvRKSt9nothrow_t, __wrap__ZdlPv,
	__wrap__ZdlPvRKSt9nothrow_t, __wrap__Znaj,
	__wrap__ZnajRKSt9nothrow_t, __wrap__Znwj,
	__wrap__ZnwjRKSt9nothrow_t): Define wrapper functions for libstdc++
	malloc operators and their overrides.
	* winsup.h (default_cygwin_cxx_malloc): Declare extern.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
	* include/sys/cygwin.h (struct per_process_cxx_malloc): Forward
	declare here.
	(struct per_process::forkee): Rename and repurpose from this ...
	(struct per_process::cxx_malloc): ... to this.
	* lib/_cygwin_crt0_common.cc: Include cygwin-cxx.h.
	(WEAK): Define shorthand helper macro.
	(__cygwin_cxx_malloc): Define and populate with weak references
	to whatever libstdc++ malloc operators will be visible at final
	link time for Cygwin apps and dlls.
	(_cygwin_crt0_common): Always look up cygwin DLL's internal
	per_process data, and don't test for (impossible) failure.  Inherit
	any members of __cygwin_cxx_malloc that we don't have overrides
	for from the DLL's default and store the resulting overall set of
	overrides back into the DLL's global per_process data.
@
text
@d43 3
d76 2
d82 1
a82 1
      u = newu;	/* Using DLL built-in per_process.  */
d122 4
a125 2
  /* Likewise for the C++ memory operators - if any.  */
  if (newu && newu->cxx_malloc)
d139 2
a142 4
  /* Now update the resulting set into the global redirectors.  */
  if (newu)
    newu->cxx_malloc = &__cygwin_cxx_malloc;

@


1.16
log
@Remove unneeded header files from source files throughout.  Update copyrights
where appropriate.
* globals.cc: New file for generic global variables.
* mkglobals_h: New file to generate globals.h.
* mkstatic: New Script used to build a (currently non-working) static
libcygwin_s.a.
* Makefile.in: Add unused rule to build a non-working libcygwin_s.a.
(DLL_OFILES): Add globals.o.  Make all objects rely on globals.h.
(globals.h): New target.  Generate globals.h.
* cygtls.h: Honor new CYGTLS_HANDLE define to control when the HANDLE operator
is allowed in _cygtls.
* dcrt0.cc: Move most globals to globals.cc.
* init.cc: Ditto.
* environ.cc (strip_title_path): Remove now-unneeded extern.
* fhandler_serial.cc (fhandler_serial::open): Ditto.
* pinfo.cc: Ditto.
(commune_process): Ditto.
* shared.cc: Ditto.
* glob.cc: Ditto.
* strace.cc: Ditto.
* exceptions.cc: Define CYGTLS_HANDLE before including winsup.h.
* path.cc (stat_suffixes): Move here.
* security.h: Add forward class path_conv declaration.
* smallprint.cc (__small_vsprintf): Make a true c++ function.
(__small_sprintf): Ditto.
(small_printf): Ditto.
(console_printf): Ditto.
(__small_vswprintf): Ditto.
(__small_swprintf): Ditto.
* spawn.cc (spawn_guts): Remove _stdcall decoration in favor of regparm.
(hExeced): Move to globals.cc
* strfuncs.cc (current_codepage): Ditto.
(active_codepage): Ditto.
* sync.cc (lock_process::locker): Move here from dcrt0.cc.
* syscalls.cc (stat_suffixes): Move to path.cc.
* tty.cc (tty::create_master): Uncapitalize fatal warning for consistency.
* winsup.h: Include globals.h to declare most of the grab bag list of globals
which were previously defined here.
* mount.h: Move USER_* defines back to shared_info.h.
* speclib: Force temporary directory cleanup.
@
text
@d13 1
d15 26
a40 1
/* Avoid an info message from linker when linking applications. */
d54 8
d70 1
a70 1
  DWORD newu;
d74 1
a74 3
    uwasnull = 0;	/* Caller allocated space for per_process structure */
  else if ((newu = cygwin_internal (CW_USER_DATA)) == (DWORD) -1)
    return 0;
d77 2
a78 2
      u = (per_process *) newu;	/* Using DLL built-in per_process */
      uwasnull = 1;	/* Remember for later */
a98 2
  u->forkee = 0;			/* This should only be set in dcrt0.cc
					   when the process is actually forked */
d117 22
a138 1
  /* Setup the module handle so fork can get the path name. */
@


1.15
log
@	* lib/_cygwin_crt0_common.cc: Revert patch from 2004-09-16.  Brakes
	newly built DLLs.
@
text
@d1 1
a1 1
/* common.cc: common crt0 function for cygwin crt0's.
d3 1
a3 1
   Copyright 2000, 2001 Red Hat, Inc.
a11 2
#include "perprocess.h"
#include "cygwin/version.h"
a12 2
#include <reent.h>
#include <stdlib.h>
@


1.14
log
@	* cygwin.din (_impure_ptr): Don't export.
	(reent_data): Export.
	* lib/_cygwin_crt0_common.cc (_impure_ptr): Drop entirely.  Don't
	initialize _impure_ptr or u->impure_ptr_ptr.
@
text
@d18 3
d66 4
@


1.13
log
@* cygwin.din (_impure_ptr): Export.
(reent_data): Don't export.
* dcrt0.cc (reent_data): Drop.
(__cygwin_user_data): Initialize impure_ptr as GLOBAL_REENT.
(_dll_crt0): Initialize _impure_ptr as GLOBAL_REENT.
* lib/_cygwin_crt0_common.cc (_impure_ptr): Drop.  Declare extern as dllimport
instead.
@
text
@a17 3
/* Avoid an info message from linker when linking applications. */
extern __declspec(dllimport) struct _reent *_impure_ptr;

a62 4
  if (uwasnull)
    _impure_ptr = u->impure_ptr;	/* Use field initialized in newer DLLs. */
  else
    u->impure_ptr_ptr = &_impure_ptr;	/* Older DLLs need this. */
@


1.12
log
@* cygwin.din: Make crt0 functions NOSIGFE.
* include/cygwin/version.h: Gratuitous comment change.
* lib/_cygwin_crt0_common.cc: Remove unneeded declaration.
@
text
@d18 3
a28 1
struct _reent *_impure_ptr;
@


1.11
log
@* lib/pseudo-reloc.c: New file.
* lib/_cygwin_crt0_common.cc: Perform pseudo-relocs during initialization of
cygwin binary (.exe or .dll).
@
text
@a22 1
void cygwin_crt0 (MainFunc);
@


1.10
log
@Update copyrights.
@
text
@d29 1
d98 2
@


1.9
log
@* path.cc (get_device_number): Allow /dev/ttySn to designate a com port.
@
text
@d3 1
a3 1
   Copyright 2000 Cygnus Solutions.
@


1.8
log
@Whitespace cleanup.

* configure.in: Eliminate subdir stuff.
* configure: Regenerate.
* include/getopt.h (option): Make name field 'const'.
@
text
@d68 1
a68 1
 
@


1.7
log
@* lib/_cygwin_crt0_common.cc: Add missing header files.
@
text
@d68 1
a68 1
      
@


1.6
log
@* _cygwin_crt0_common.cc: Undef 'environ' or suffer compiler error.
@
text
@d12 2
@


1.5
log
@* hinfo.cc (hinfo::linearize_fd_array): Make max_used_fd an int so that we can
detect when there are no fds to pass.
* dcrt0.cc (host_dependent_constants::init): Revert Sat Mar 18 01:32:04 2000
change.
(dll_crt0_1): Set "cygwin_finished_initializing" flag.
(dll_crt0): Don't perform memcpy if uptr is already set to internal structure.
(_dll_crt0): Remember location of programs envptr.
* dll_init.h (per_module, dll, dll_list): Revamp.
* dll_init.cc: Revamp.  Use new classes.
* fork.cc (fork): Use new revamped dll, dll_list, and per_module stuff.
* environ.cc: Use __cygwin_environ throughout rather than the
user_data->envptr.
* exec.cc: Ditto.
* spawn.cc: Ditto.
* winsup.h: Declare update_envptrs, cygwin_finished_initializing.
* lib/_cygwin_crt0_common.cc (_cygwin_crt0_common): Revert previous change.
* lib/cygwin_attach_dll.cc (cygwin_attach_dll): Always pass in own per_process
structure or we end up overwriting information from the main program.
@
text
@d16 2
@


1.4
log
@* lib/_cygwin_crt0_common.cc (_cygwin_crt0_common): Don't reset environ if
already set.
@
text
@d59 1
a59 4
  if (!u->envptr)
    u->envptr = &environ;
  else
    environ = *(u->envptr);
@


1.3
log
@* external.cc (cygwin_internal): Export __cygwin_user_data.
* include/sys/cygwin.h: Allow definition of per_process even when not compiling
with C++.
(cygwin_getinfo_types): Add CW_USER_DATA.
* lib/_cygwin_crt0_common.cc (_cygwin_crt0_common): Get __cygwin_user_data
pointer from cygwin_internal.  If it doesn't exist, return failure.  Use either
this pointer or passed in pointer throughout.  Clear forkee.
* lib/crt0.h: Accomodate argument changes to _cygwin_crt0_common.
* lib/cygwin_attach_dll.c (cygwin_attach_dll): Reorganize to allow use of newer
binaries with older DLLs.  Detect older DLLs when _cygwin_crt0_common returns 0
and allocate space for a per_process structure on the stack.
* lib/cygwin_crt0.c (cygwin_crt0): Ditto.
@
text
@d59 4
a62 1
  u->envptr = &environ;
@


1.2
log
@* dcrt0.cc (__cygwin_user_data): Initialize.
(dll_crt0_1): Eliminate user_data initialization.
(dll_crt0): Set up impure_ptr_ptr for older executables.
(cygwin_dll_init): Eliminate user_data initializations.
(__api_fatal): Don't check for user_data initialization.
* dll_init.cc (struct dll): Store entire contents of per_process rather than
just a pointer.
(add): Ditto.
(initOneDll): Don't check for user_data initialization.
(DllList::recordDll): Store contents of per_process argument.
(DllList::detachDll): Pass address of per_process field.
(DllList::initAll): Ditto.
(DllList::doGlobalDestructorsOfDlls): Ditto.
(DllListIterator::operator *): Ditto.
(dll_dllcrt0): Default to __cygwin_user_data if arg is NULL.
* include/sys/cygwin.h: Reorganize per_process to eliminate obsolete fields and
accomodate new way of initializing.
* lib/_cygwin_crt0_common: Initialize _impure_ptr from
__cygwin_user_data.impure_ptr.
@
text
@a15 2
extern __declspec(dllimport) per_process __cygwin_user_data;

d29 2
a30 2
void
_cygwin_crt0_common (MainFunc f)
d34 12
a45 1
  int onstack;
d49 1
a49 1
  __cygwin_user_data.magic_biscuit = sizeof (per_process);
d52 25
a76 16
  __cygwin_user_data.dll_major = CYGWIN_VERSION_DLL_MAJOR;
  __cygwin_user_data.dll_minor = CYGWIN_VERSION_DLL_MINOR;
  __cygwin_user_data.api_major = CYGWIN_VERSION_API_MAJOR;
  __cygwin_user_data.api_minor = CYGWIN_VERSION_API_MINOR;

  __cygwin_user_data.ctors = &__CTOR_LIST__;
  __cygwin_user_data.dtors = &__DTOR_LIST__;
  __cygwin_user_data.envptr = &environ;
  _impure_ptr = __cygwin_user_data.impure_ptr;
  __cygwin_user_data.main = f;
  __cygwin_user_data.premain[0] = cygwin_premain0;
  __cygwin_user_data.premain[1] = cygwin_premain1;
  __cygwin_user_data.premain[2] = cygwin_premain2;
  __cygwin_user_data.premain[3] = cygwin_premain3;
  __cygwin_user_data.fmode_ptr = &_fmode;
  __cygwin_user_data.initial_sp = (char *) &onstack;
d80 4
a83 4
  __cygwin_user_data.malloc = &malloc;
  __cygwin_user_data.free = &free;
  __cygwin_user_data.realloc = &realloc;
  __cygwin_user_data.calloc = &calloc;
d86 1
a86 1
  __cygwin_user_data.hmodule = GetModuleHandle (0);
d89 5
a93 4
  __cygwin_user_data.data_start = &_data_start__;
  __cygwin_user_data.data_end = &_data_end__;
  __cygwin_user_data.bss_start = &_bss_start__;
  __cygwin_user_data.bss_end = &_bss_end__;
@


1.1
log
@* Makefile.in: Use variables rather than configure constructs where
appropriate.
(LIBCOS): Find additional stub library stuff in their own subdirectory.
* dcrt0.cc: Convert user_data pointer to static __cygwin_user_data area.
(do_global_ctors): Check magic_bisquit for initialization.
(dll_crt0_1): First group of premain functions prior to fd initialization.  Run
second group before calling main.
(dll_crt0 ()): New function, called from new initialization code.
(dll_crt0 (per_process *uptr)): Call new dll_crt0 () function on
initialization.
* debug.cc (thread_stub): Initialize bottom of stack with per-thread info.
* environ.cc (parse_thing): Use binmode global to control CYGWIN=binmode
behavior.
* fhandler.cc (fhandler_base::open): Allow explicit setting of __fmode to
O_BINARY or O_TEXT to override disk mount settings.
* libcmain.cc: Move to lib subdirectory.
* libccrt0.cc: Ditto.
* dll_main.cc: Ditto.
* dll_entry.cc: Ditto.
* getopt.c: Ditto.
* thread.cc (thread_init_wrapper): Call ExitThread explicitly rather than
returning, as a preliminary step towards placing per thread info at the bottom
of the stack.
* winsup.h: Move per_process class to include/sys/cygwin.h.  Declare new
dll_crt0().
* include/cygwin/version.h: Bump API minor version.
* binmode.c: New file.
* textmode.c: Ditto.
* lib/_cygwin_crt0_common.cc: Ditto.
* lib/crt0.h: Ditto.
* lib/cygwin_attach_dll.c: Ditto.
* lib/cygwin_crt0.c: Ditto.
* lib/dll_entry.cc: Ditto.
* lib/dll_main.cc: Ditto.
* lib/getopt.c: Ditto.
* lib/libcmain.c: Ditto.
* lib/premain0.c: Ditto.
* lib/premain1.c: Ditto.
* lib/premain2.c: Ditto.
* lib/premain3.c: Ditto.
@
text
@d51 1
a51 1
  __cygwin_user_data.impure_ptr_ptr = &_impure_ptr;
@

