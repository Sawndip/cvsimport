head	1.47;
access;
symbols
	cygwin-1_7_35-release:1.47
	cygwin-1_7_34-release:1.47
	cygwin-1_7_33-release:1.47
	cygwin-1_7_32-release:1.47
	cygwin-1_7_31-release:1.47
	cygwin-1_7_30-release:1.47
	cygwin-1_7_29-release:1.47
	cygwin-1_7_29-release-branchpoint:1.47.0.2
	cygwin-pre-user-db:1.47
	cygwin-1_7_28-release:1.47
	cygwin-1_7_27-release:1.47
	cygwin-1_7_26-release:1.47
	cygwin-1_7_25-release:1.47
	cygwin-1_7_24-release:1.47
	cygwin-1_7_23-release:1.47
	cygwin-1_7_22-release:1.47
	cygwin-1_7_21-release:1.47
	cygwin-1_7_20-release:1.47
	cygwin-1_7_19-release:1.47
	cygwin-64bit-postmerge:1.47
	cygwin-64bit-premerge-branch:1.46.0.2
	cygwin-64bit-premerge:1.46
	cygwin-1_7_18-release:1.46
	post-ptmalloc3:1.43.2.3
	pre-ptmalloc3:1.43.2.3
	cygwin-1_7_17-release:1.43
	cygwin-64bit-branch:1.43.0.2
	cygwin-1_7_16-release:1.43
	cygwin-1_7_15-release:1.43
	cygwin-1_7_14_2-release:1.43
	cygwin-1_7_14-release:1.43
	cygwin-1_7_12-release:1.43
	cygwin-1_7_11-release:1.43
	cygwin-1_7_10-release:1.43
	signal-rewrite:1.41.0.2
	pre-notty:1.41
	cygwin-1_7_9-release:1.40
	cv-post-1_7_9:1.40.0.2
	cygwin-1_7_8-release:1.40
	cygwin-1_7_7-release:1.40
	cygwin-1_7_5-release:1.40
	cygwin-1_7_4-release:1.40
	cygwin-1_7_3-release:1.40
	cygwin-1_7_2-release:1.40
	fifo_doover3:1.39.0.4
	cygwin-1_7_1-release:1.39
	prefifo:1.39
	cv-branch-2:1.39.0.2
	pre-ripout-set_console_state_for_spawn:1.38
	EOL_registry_mounts:1.36
	preoverlapped:1.36
	drop_9x_support_start:1.36
	cr-0x5f1:1.36.0.8
	cv-branch:1.36.0.6
	pre-ptymaster-archetype:1.36
	cr-0x3b58:1.36.0.4
	cr-0x5ef:1.36.0.2
	after-mmap-privanon-noreserve:1.36
	after-mmap-revamp:1.36
	before-mmap-revamp:1.36
	cgf-more-exit-sync:1.36
	post_wait_sig_exit:1.36
	pre_wait_sig_exit:1.36
	reparent-point:1.30
	noreparent:1.30.0.4
	cr-0x5e6:1.30.0.2
	cr-0x9e:1.24.0.4
	cr-0x9d:1.24.0.2
	cgf-deleteme:1.23.0.8
	pre-sigrewrite:1.23
	corinna-01:1.23
	cr-0x9c:1.23.0.6
	cr-0x9b:1.23.0.4
	cr-0x99:1.23
	Z-emcb-cygwin_daemon:1.23.0.2
	w32api-2_2:1.23
	mingw-runtime-2_4:1.23
	pre-cgf-merge:1.23
	cgf-dev-branch:1.23.0.20
	predaemon:1.22
	cygwin_daemon_merge_HEAD:1.22
	pregp02r1:1.22.0.2
	cygnus_cvs_20020108_pre:1.20
	Z-cygwin_daemon_merge-new_HEAD:1.23
	Z-cygwin_daemon_merge_HEAD:1.23
	cygwin_daemon:1.20.0.2;
locks; strict;
comment	@// @;
expand	@o@;


1.47
date	2013.04.23.09.44.33;	author corinna;	state Exp;
branches;
next	1.46;

1.46
date	2012.12.21.21.30.56;	author cgf;	state Exp;
branches;
next	1.45;

1.45
date	2012.12.21.19.32.43;	author cgf;	state Exp;
branches;
next	1.44;

1.44
date	2012.12.21.18.52.00;	author cgf;	state Exp;
branches;
next	1.43;

1.43
date	2011.11.29.17.26.57;	author cgf;	state Exp;
branches
	1.43.2.1;
next	1.42;

1.42
date	2011.11.26.02.35.49;	author cgf;	state Exp;
branches;
next	1.41;

1.41
date	2011.04.21.00.53.55;	author cgf;	state Exp;
branches;
next	1.40;

1.40
date	2010.03.12.23.13.48;	author cgf;	state Exp;
branches;
next	1.39;

1.39
date	2009.01.03.05.12.21;	author cgf;	state Exp;
branches;
next	1.38;

1.38
date	2008.04.07.18.45.59;	author cgf;	state Exp;
branches;
next	1.37;

1.37
date	2008.04.07.16.15.45;	author cgf;	state Exp;
branches;
next	1.36;

1.36
date	2005.07.06.20.05.03;	author cgf;	state Exp;
branches;
next	1.35;

1.35
date	2005.06.05.04.07.46;	author cgf;	state Exp;
branches;
next	1.34;

1.34
date	2005.03.27.01.57.38;	author cgf;	state Exp;
branches;
next	1.33;

1.33
date	2005.03.19.21.45.15;	author cgf;	state Exp;
branches;
next	1.32;

1.32
date	2005.03.08.05.05.02;	author cgf;	state Exp;
branches;
next	1.31;

1.31
date	2005.03.06.20.21.30;	author cgf;	state Exp;
branches;
next	1.30;

1.30
date	2004.05.16.04.18.50;	author cgf;	state Exp;
branches;
next	1.29;

1.29
date	2004.05.15.16.10.41;	author cgf;	state Exp;
branches;
next	1.28;

1.28
date	2004.05.15.16.09.04;	author cgf;	state Exp;
branches;
next	1.27;

1.27
date	2004.03.15.15.50.20;	author cgf;	state Exp;
branches;
next	1.26;

1.26
date	2004.02.12.03.01.58;	author cgf;	state Exp;
branches;
next	1.25;

1.25
date	2004.02.09.04.04.24;	author cgf;	state Exp;
branches;
next	1.24;

1.24
date	2004.01.14.15.45.36;	author cgf;	state Exp;
branches;
next	1.23;

1.23
date	2002.06.05.04.01.43;	author cgf;	state Exp;
branches
	1.23.8.1;
next	1.22;

1.22
date	2002.02.17.04.59.55;	author cgf;	state Exp;
branches;
next	1.21;

1.21
date	2002.02.14.21.20.06;	author cgf;	state Exp;
branches;
next	1.20;

1.20
date	2001.09.17.03.05.05;	author cgf;	state Exp;
branches
	1.20.2.1;
next	1.19;

1.19
date	2001.09.13.01.07.25;	author cgf;	state Exp;
branches;
next	1.18;

1.18
date	2001.09.11.17.02.23;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2001.06.24.22.26.53;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2001.05.04.21.02.15;	author cgf;	state Exp;
branches;
next	1.15;

1.15
date	2001.05.04.20.39.38;	author cgf;	state Exp;
branches;
next	1.14;

1.14
date	2000.10.19.17.57.28;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2000.10.02.02.26.04;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2000.09.08.02.56.55;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2000.09.07.01.18.37;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2000.08.22.05.10.20;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2000.08.02.16.28.18;	author dj;	state Exp;
branches;
next	1.8;

1.8
date	2000.05.18.03.20.01;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2000.05.17.05.49.51;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2000.03.15.04.49.36;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2000.02.26.01.11.54;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.24.19.54.01;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.24.06.45.32;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.24.02.49.44;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.43.2.1
date	2012.11.16.13.48.24;	author corinna;	state Exp;
branches;
next	1.43.2.2;

1.43.2.2
date	2012.11.22.12.05.08;	author corinna;	state Exp;
branches;
next	1.43.2.3;

1.43.2.3
date	2013.01.09.16.27.22;	author corinna;	state Exp;
branches;
next	;

1.23.8.1
date	2004.01.11.18.13.52;	author cgf;	state Exp;
branches;
next	1.23.8.2;

1.23.8.2
date	2004.01.13.05.13.23;	author cgf;	state Exp;
branches;
next	;

1.20.2.1
date	2002.02.28.12.53.27;	author rbcollins;	state Exp;
branches;
next	1.20.2.2;

1.20.2.2
date	2002.06.13.14.34.12;	author rbcollins;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.47
log
@	* Merge in cygwin-64bit-branch.
@
text
@/* sync.cc: Synchronization functions for cygwin.

   This file implements the methods for controlling the "muto" class
   which is intended to operate similarly to a mutex but attempts to
   avoid making expensive calls to the kernel.

   Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2010, 2011, 2012
   Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include "winsup.h"
#include "miscfuncs.h"
#include "sync.h"
#include "thread.h"
#include "cygtls.h"

#undef WaitForSingleObject

muto NO_COPY lock_process::locker;

void
muto::grab ()
{
  tls = &_my_tls;
}

/* Constructor */
muto *
muto::init (const char *s)
{
  char *already_exists = (char *) InterlockedExchangePointer ((PVOID *) &name,
							      (PVOID) s);
  if (already_exists)
    while (!bruteforce)
      yield ();
  else
    {
      waiters = -1;
      /* Create event which is used in the fallback case when blocking is necessary */
      bruteforce = CreateEvent (&sec_none_nih, FALSE, FALSE, NULL);
      if (!bruteforce)
	  api_fatal ("couldn't allocate muto '%s', %E", s);
    }

  return this;
}

#if 0 /* FIXME: Do we need this? mutos aren't destroyed until process exit */
/* Destructor (racy?) */
muto::~muto ()
{
  while (visits)
    release ();

  HANDLE h = bruteforce;
  bruteforce = NULL;
  /* Just need to close the event handle */
  if (h)
    CloseHandle (h);
}
#endif

/* Acquire the lock.  Argument is the number of milliseconds to wait for
   the lock.  Multiple visits from the same thread are allowed and should
   be handled correctly.

   Note: The goal here is to minimize, as much as possible, calls to the
   OS.  Hence the use of InterlockedIncrement, etc., rather than (much) more
   expensive OS mutexes.  */
int
muto::acquire (DWORD ms)
{
  void *this_tls = &_my_tls;

  if (tls != this_tls)
    {
      /* Increment the waiters part of the class.  Need to do this first to
	 avoid potential races. */
      LONG was_waiting = ms ? InterlockedIncrement (&waiters) : 0;

      while (was_waiting || InterlockedExchange (&sync, 1) != 0)
	switch (WaitForSingleObject (bruteforce, ms))
	    {
	    case WAIT_OBJECT_0:
	      was_waiting = 0;
	      break;
	    default:
	      return 0;	/* failed. */
	    }

      /* Have to do it this way to avoid a race */
      if (!ms)
	InterlockedIncrement (&waiters);

      tls = this_tls;	/* register this thread. */
    }

  return ++visits;	/* Increment visit count. */
}

bool
muto::acquired ()
{
  return tls == &_my_tls;
}

/* Return the muto lock.  Needs to be called once per every acquire. */
int
muto::release (_cygtls *this_tls)
{
  if (tls != this_tls || !visits)
    {
      SetLastError (ERROR_NOT_OWNER);	/* Didn't have the lock. */
      return 0;	/* failed. */
    }

  /* FIXME: Need to check that other thread has not exited, too. */
  if (!--visits)
    {
      tls = 0;		/* We were the last unlocker. */
      InterlockedExchange (&sync, 0); /* Reset trigger. */
      /* This thread had incremented waiters but had never decremented it.
	 Decrement it now.  If it is >= 0 then there are possibly other
	 threads waiting for the lock, so trigger bruteforce.  */
      if (InterlockedDecrement (&waiters) >= 0)
	SetEvent (bruteforce); /* Wake up one of the waiting threads */
      else if (*name == '!')
	{
	  CloseHandle (bruteforce);	/* If *name == '!' and there are no
					   other waiters, then this is the
					   last time this muto will ever be
					   used, so close the handle. */
#ifdef DEBUGGING
	  bruteforce = NULL;
#endif
	}
    }

  return 1;	/* success. */
}
@


1.46
log
@Revert the reversion and go with implementation described in cgf-000017, with
some modifications.
* init.cc (dll_entry): Revert previous change.
* miscfuncs.cc: Include sigproc.h for exit_thread declaration.
* winsup.h (ExitThread): Define as 'exit_thread' to ensure no accidental use.
* sigproc.cc (exit_thread): New function.
(wait_sig): Handle __SIGTHREADEXIT case.  Don't just block rather than
returning from this function.
* sigproc.h (__SIGTHREADEXIT): New enum.
(exit_thread): Declare.
* sync.cc (muto::release): Accept a tls command-line argument.
* sync.h (muto::release): Accept a tls command-line parameter.  Default to
&_my_tls.
* cygerrno.h (__set_errno): Define as extern so that no function code is ever
emitted.
* cygserver_ipc.h (cygserver_ipc.h): Ditto.
* miscfuncs.h (transform_chars): Ditto.
* path.h (has_attribute): Ditto.
* security.h (privilege_luid): Ditto.
* winsup.h (flush_file_buffers): Ditto.
@
text
@d36 2
a37 1
  char *already_exists = (char *) InterlockedExchangePointer (&name, s);
@


1.45
log
@* DevNotes: Add entry cgf-000018.
* init.cc (dll_entry): Grab process lock before exiting to ensure that thread
doesn't exit before parent if parent is exiting.
* _cygtls.cc (_cygtls::call2): Revert previous 2012-12-21 change.
* miscfuncs.cc (thread_wrapper): Ditto.
* thread.cc (pthread::exit): Ditto.
* sigproc.cc (exit_thread): Ditto.
(wait_sig): Ditto.
* sync.cc (muto::release): Ditto.
* sync.h (muto::release): Ditto.
* sigproc.h (__SIGTHREADEXIT): Delete enum.
(exit_thread): Delete declaration.
@
text
@d7 2
a8 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2010 Red Hat, Inc.
d113 1
a113 1
muto::release ()
a114 2
  void *this_tls = &_my_tls;

@


1.44
log
@* DevNotes: Add entry cgf-000017.
* _cygtls.cc (_cygtls::call2): Use new exit_thread function in place of
ExitThread.
* miscfuncs.cc (thread_wrapper): Ditto.
* thread.cc (pthread::exit): Ditto.
(pthread_mutex::unlock): Set tid to NULL rather than 0.
(pthread_spinlock::unlock): Ditto.
* pinfo.cc (commune_process): Actually call lock_process constructor.
* sigproc.cc (exit_thread): New function.
(wait_sig): Handle __SIGTHREADEXIT case.  Don't just block rather than
returning from this function.
* sigproc.h (__SIGTHREADEXIT): New enum.
(exit_thread): Declare.
* sync.cc (muto::release): Accept a tls command-line argument.
* sync.h (muto::release): Accept a tls command-line parameter.  Default to
&_my_tls.
@
text
@d7 1
a7 2
   Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2010, 2011, 2012
   Red Hat, Inc.
d112 1
a112 1
muto::release (_cygtls *this_tls)
d114 2
@


1.43
log
@* sync.cc: Fix comment.
* dll_init.cc (dll_list::reserve_space): Use %p rather than %lx to show
reserved space.
@
text
@d7 2
a8 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2010 Red Hat, Inc.
d113 1
a113 1
muto::release ()
a114 2
  void *this_tls = &_my_tls;

@


1.43.2.1
log
@	* fhandler_netdrive.cc: Use UINT32_MAX rather than UINT_MAX to make
	absolutely clear that we mean the 32 bit maximum.
	* fhandler_socket.cc: Ditto.
	* pinfo.cc: Ditto with INT32_MAX.
	* select.cc (fd_mask): Drop gratuitious definition.
	(sizeof_fd_set): Cast to size_t.
	* shared.cc (pround): Cast to ptrdiff_t.
	* strace.cc (strace::activate): Fix format string.
	(strace::write_childpid): Take pid_t as parameter.
	* include/sys/strace.h (strace::write_childpid): Change declaration
	accordingly.
	* sync.cc (muto::init): Cast in call to InterlockedExchangePointer to
	make compiler happy.
	* sync.h (class muto): De-const name.
	* syslog.cc (try_connect_syslogd): Take size_t as third argument.
	(vsyslog): Convert len to size_t.
	* thread.cc: Use {U}INT32_MAX rather than {U}LONG_MAX.  Througout change
	types used in Windows calls to matching Windows types.
	(pthread::cancel): Fix access to instruction pointer for x86_64.
	(pthread_attr_getstack): Cast to ptrdiff_t for pointer arithmetic.
	* thread.h: Throughout convert 'long' types to uint32_t or LONG.
@
text
@d35 1
a35 2
  char *already_exists = (char *) InterlockedExchangePointer ((PVOID *) &name,
							      (PVOID) s);
@


1.43.2.2
log
@Fix copyrights.
@
text
@d7 1
a7 2
   Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2010,
   2012 Red Hat, Inc.
@


1.43.2.3
log
@Pull in changes from HEAD
@
text
@d7 2
a8 2
   Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2010, 2011, 2012
   Red Hat, Inc.
d114 1
a114 1
muto::release (_cygtls *this_tls)
d116 2
@


1.42
log
@* exceptions.cc (sigpacket::process): Move signal_exit processing into...
(_cygtls::signal_exit): ...here.  Close my_readsig and comment on why.
* pinfo.cc (pinfo::exit): Move sigproc_terminate earlier.  Set exiting flag in
lock_process.
* sigproc.cc (my_readsig): Make global.
* sync.cc (muto::exiting_thread): Delete.
(muto::acquire): Delete #if 0'ed code.
* sync.h (muto::exiting_thread): Delete.
(set_exiting_thread): Ditto.
(lock_process::lock_process): Don't worry about setting the exiting thread
since it had no meaning.
@
text
@d72 1
a72 2
   expensive OS mutexes.  Also note that the only two valid "ms" times are
   0 and INFINITE. */
@


1.41
log
@* cygheap.cc (init_cygheap::close_ctty): Avoid closing console-cttys since they
don't use archetypes and this will just result in double frees.
* dll_init.cc (dll_list::protect): Define.
(dll_list::alloc): Guard list access.
(dll_list::detach): Ditto.
* dll_init.h (dll_list::protect): Declare new muto.
(dll_list::guard): Define/declare function to guard list access.
* fhandler_termios.cc (fhandler_termios::sigflush): Avoid SEGV in pathological
condition of get_ttyp() == NULL.
@
text
@a22 1
DWORD NO_COPY muto::exiting_thread;
a77 4
#if 0
  if (exiting_thread)
    return this_tid == exiting_thread;
#endif
@


1.40
log
@Throughout change all calls of low_priority_sleep (0) to yield ().
* miscfuncs.cc (yield): Rename from low_priority_sleep.  Remove all of the
logic which called Sleep() and just use SwitchToThread.
* miscfuncs.h (yield): Rename from low_priority_sleep.
(SLEEP_0_STAY_LOW): Delete unused define.
* shared.cc (memory_init): Move heap_init() call directly after shared memory
initialization to more closely mimic long-standing program flow.
* tty.cc (tty_list::terminate): Replace call to low_priority_sleep with Sleep.
@
text
@d7 1
a7 1
   Copyright 2000, 2001, 2002, 2003, 2004, 2005, 2008, 2009 Red Hat, Inc.
@


1.39
log
@Remove unneeded header files from source files throughout.  Update copyrights
where appropriate.
* globals.cc: New file for generic global variables.
* mkglobals_h: New file to generate globals.h.
* mkstatic: New Script used to build a (currently non-working) static
libcygwin_s.a.
* Makefile.in: Add unused rule to build a non-working libcygwin_s.a.
(DLL_OFILES): Add globals.o.  Make all objects rely on globals.h.
(globals.h): New target.  Generate globals.h.
* cygtls.h: Honor new CYGTLS_HANDLE define to control when the HANDLE operator
is allowed in _cygtls.
* dcrt0.cc: Move most globals to globals.cc.
* init.cc: Ditto.
* environ.cc (strip_title_path): Remove now-unneeded extern.
* fhandler_serial.cc (fhandler_serial::open): Ditto.
* pinfo.cc: Ditto.
(commune_process): Ditto.
* shared.cc: Ditto.
* glob.cc: Ditto.
* strace.cc: Ditto.
* exceptions.cc: Define CYGTLS_HANDLE before including winsup.h.
* path.cc (stat_suffixes): Move here.
* security.h: Add forward class path_conv declaration.
* smallprint.cc (__small_vsprintf): Make a true c++ function.
(__small_sprintf): Ditto.
(small_printf): Ditto.
(console_printf): Ditto.
(__small_vswprintf): Ditto.
(__small_swprintf): Ditto.
* spawn.cc (spawn_guts): Remove _stdcall decoration in favor of regparm.
(hExeced): Move to globals.cc
* strfuncs.cc (current_codepage): Ditto.
(active_codepage): Ditto.
* sync.cc (lock_process::locker): Move here from dcrt0.cc.
* syscalls.cc (stat_suffixes): Move to path.cc.
* tty.cc (tty::create_master): Uncapitalize fatal warning for consistency.
* winsup.h: Include globals.h to declare most of the grab bag list of globals
which were previously defined here.
* mount.h: Move USER_* defines back to shared_info.h.
* speclib: Force temporary directory cleanup.
@
text
@d39 1
a39 1
      low_priority_sleep (0);
@


1.38
log
@Remove unneeded header files from source files throughout.
@
text
@d7 1
a7 3
   Copyright 2000, 2001, 2002, 2003, 2004, 2005 Red Hat, Inc.

   Written by Christopher Faylor <cgf@@cygnus.com>
d24 1
@


1.37
log
@Add miscfuncs.h to files as needed throughout.
* mount.cc: New file.
* path.cc: Move mount-specific stuff into mount.cc.  Move common stuff into
miscfuncs.cc.  Remove unneeded includes.
* miscfuncs.cc: Move some common path functions here.
* miscfuncs.h: New file.
* winsup.h: Move miscelleneous functions to miscfuncs.h.
* dcrt0.cc: Remove unneeded includes.
* Makefile.in (DLL_OFILES): Add mount.o.
* include/cygwin/config.h: Fix a minor typo.
@
text
@a18 5
#include <stdlib.h>
#include <time.h>
#include <sys/wait.h>
#include <errno.h>
#include <stdlib.h>
a19 1
#include "security.h"
@


1.36
log
@Eliminate (void) cast on standalone function calls throughout.
@
text
@d18 1
@


1.35
log
@* sync.cc (muto::acquire): Remove unneeded brackets and fix whitespace.
@
text
@d138 1
a138 1
      (void) InterlockedExchange (&sync, 0); /* Reset trigger. */
d143 1
a143 1
	(void) SetEvent (bruteforce); /* Wake up one of the waiting threads */
@


1.34
log
@* wininfo.h (wininfo::timer_active): Delete.
(wininfo::itv): Ditto.
(wininfo::start_time): Ditto.
(wininfo::window_started): Ditto.
(wininfo::getitimer): Ditto.
(wininfo::setitimer): Ditto.
(wininfo::wininfo): Ditto.
(wininfo::lock): New method.
(wininfo::release): Ditto.
* window.cc: Use new lock/acquire wininfo methods throughout.
(wininfo::wininfo): Delete
(wininfo::getitimer): Ditto.
(wininfo::setitimer): Ditto.
(getitimer): Ditto.
(setitimer): Ditto.
(ualarm): Ditto.
(alarm): Ditto.
(wininfo::lock): Define new function.
(wininfo::release): Ditto.
(wininfo::process): Delete WM_TIMER handling.
* timer.cc (struct timetracker): Delete it, flags.  Add it_interval,
interval_us, sleepto_us, running, init_muto(), syncthread, and gettime().
(ttstart): Make NO_COPY.
(lock_timer_tracker): New class.
(timer_tracker::timer_tracker): Distinguish ttstart case.
(timer_tracker::~timer_tracker): New destructor.  Clean out events, and reset
magic.
(timer_tracker::init_muto): New method.
(to_us): Round up as per POSIX.
(timer_thread): Reorganize to match timer_tracker::settime and
timer_tracker::gettime.  Call sig_send without wait.  Call auto_release.
(timer_tracker::settime): Reorganize logic to avoid race.  Call gettime to
recover old value.
(timer_tracker::gettime): New method.
(timer_create): Properly set errno on invalid timerid.  Use new
lock_timer_tracker method.
(timer_delete): Ditto.  Simplify code slightly.
(timer_gettime): New function.
(fixup_timers_after_fork): Reinit ttstart.
(getitimer): New implementation.
(setitimer): Ditto.
(ualarm): Ditto.
(alarm): Ditto.
* cygwin.din: Export timer_gettime.
* winsup.h: Remove has has_visible_window_station declaration.
* Makefile.in (DLL_OFILES): Add lsearch.o.
* cygthread.h (cygthread::notify_detached): New element.
(cygthread::cygthread): Take optional fourth argument signifying event to
signal on thread completion.
* cygthread.cc (cygthread::stub): Signal notify_detached event, if it exists.
(cygthread::cygthread): Initialize notify_detached from fourth argument.
(cygthread::detach): Wait for notify_detached field is present.
* lsearch.cc: New file.
* search.h: Ditto.
* include/cygwin/version.h: Bump API minor number to 126.
* cygwin.din: Export lsearch, lfind.
@
text
@d97 8
a104 10
	  {
	    switch (WaitForSingleObject (bruteforce, ms))
		{
		case WAIT_OBJECT_0:
		  was_waiting = 0;
		  break;
		default:
		  return 0;	/* failed. */
		}
	  }
@


1.33
log
@* child_info.h (fork_info): Use different method to alias variable.
(spawn_info): Ditto.
* cxx.cc (__cxa_guard_acquire): New function (needed for gcc 4.x).
(__cxa_guard_release): Ditto.
* devices.in: Make sure stuff is correctly bracketed (for gcc 4.x).
* devices.cc: Regenerate.
* fhandler.h (fhandler_disk_file::fchmod): Avoid left coercion (for gcc 4.x).
* smallprint.c (__rn): Declare as __fastcall since gcc 4.x complains about use
of regparm, for some reason.
* sync.h (sync::init_lock): Remove.
* sync.cc (sync::init_lock): Ditto.
@
text
@d7 1
a7 1
   Copyright 2000, 2001, 2002, 2003, 2004 Red Hat, Inc.
@


1.32
log
@* dcrt0.cc (dll_crt0_0): Eliminate muto::init call.
* sync.h (locker): New, currently unused class.
(muto::init): Eliminate.
* sync.cc (muto::init): Ditto.
(muto::init): Eliminate critical section lock and instead use name as a guard
to prevent against multiple attempts to initialize the same muto.
* pinfo.cc (pinfo::init): Set myself procinfo when not execing and pid matches
windows pid or cygwin pid.
@
text
@a30 1
CRITICAL_SECTION NO_COPY muto::init_lock;
@


1.31
log
@* sync.h (sync::init_lock): Declare new static member.
(sync::init()): Declare new static function.
* sync.cc (sync::init): Define.
(sync::init): Lock attempt to initialize a muto to stop multiple threads from
colliding.
* dcrt0.cc (dll_crt0_0): Initialize muto environment.
@
text
@a33 6
muto::init ()
{
  InitializeCriticalSection (&init_lock);
}

void
d43 5
a47 3
  muto *res = this;
  EnterCriticalSection (&init_lock);
  if (!bruteforce)
d50 1
d52 2
a53 9
      /* Create event which is used in the fallback case when blocking is necessary */
      if (bruteforce)
	name = s;
      else
	{
	  DWORD oerr = GetLastError ();
	  SetLastError (oerr);
	  res = NULL;
	}
d55 1
a55 1
  LeaveCriticalSection (&init_lock);
@


1.30
log
@* cygthread.cc (cygthread::is): Eliminate.
* cygthread.h (cygthread::is): Eliminate declaratin.
* fhandler_console.cc (fhandler_console::read): Only wait for signal_arrived in
the main thread.
* fhandler_socket.cc: Include new "wininfo.h".
(fhandler_socket::ioctl): Use 'winmsg' rather than 'gethwnd()'.
* sync.cc (muto::grab): Define new function.
(muto::acquire): Use tls pointer rather than tid.
(muto::acquired): Ditto.
(muto::reset): Delete.
(muto::release): Ditto.  Also implement "close on last release".
* sync.h (muto::tid): Delete.
(muto::tls): New field.
(muto::ismine): Delete.
(muto::owner): Delete.
(muto::unstable): Delete.
(muto::reset): Delete.
(muto::upforgrabs): New method.
(muto::grab): Ditto.
(new_muto_name): New define.
* wininfo.h: New file.
(wininfo): New class.
* window.cc: Rework throughout to use winfo class for controlling invisible
window operation.
(gethwnd): Delete definition.
* winsup.h (gethwnd): Delete declaration.
@
text
@d31 7
d49 3
a51 3
  waiters = -1;
  /* Create event which is used in the fallback case when blocking is necessary */
  if (!(bruteforce = CreateEvent (&sec_none_nih, FALSE, FALSE, NULL)))
d53 11
a63 3
      DWORD oerr = GetLastError ();
      SetLastError (oerr);
      return NULL;
d65 1
a65 1
  name = s;
@


1.29
log
@revert previous not-ready-for-primetime checkin.
@
text
@d25 2
d32 6
d80 1
a80 1
  DWORD this_tid = GetCurrentThreadId ();
d86 1
a86 1
  if (tid != this_tid)
d108 1
a108 1
      tid = this_tid;	/* register this thread. */
d114 6
d124 1
a124 1
  DWORD this_tid = GetCurrentThreadId ();
d126 1
a126 1
  if (tid != this_tid || !visits)
d135 1
a135 1
      tid = 0;		/* We were the last unlocker. */
d142 10
a154 19
}

bool
muto::acquired ()
{
  return tid == GetCurrentThreadId ();
}

/* Call only when we're exiting.  This is not thread safe. */
void
muto::reset ()
{
  visits = sync = tid = 0;
  InterlockedExchange (&waiters, -1);
  if (bruteforce)
    {
      CloseHandle (bruteforce);
      bruteforce = CreateEvent (&sec_none_nih, FALSE, FALSE, name);
    }
@


1.28
log
@* cygheap.h: Remove some parameter names from declarations throughout.
(cygheap::set): Reflect changes in declaration for arguments and return value
from previous checkin.
@
text
@a127 10
      else if (*name == '!')
	{
	  CloseHandle (bruteforce);	/* If *name == '!' and there are no
					   other waiters, then this is the
					   last time this muto will ever be
					   used, so close the handle. */
#ifdef DEBUGGING
	  bruteforce = NULL;
#endif
	}
@


1.27
log
@* exceptions.cc (try_to_debug): Report on tid of caller.
* sync.cc (muto::acquire): Fix some races.
* sync.h (muto): Expose some fields for easier debugging.
@
text
@d128 10
@


1.26
log
@Rename _threadinfo to _cygtls, throughout.
* cygtls.h (_cygtls::call_signal_handler): Rename from call_signal_handler_now.
(_cygtls::push): Make second argument mandatory.
(_cygtls::fixup_after_fork): Declare new function.
(_cygtls::lock): Ditto.
* cygtls.cc (_cygtls::fixup_after_fork): Define new function.
* dcrt0.cc (cygwin_finished_initializing): Define as bool.
(alloc_stack): Use _tlstop rather than arbitrary variable in probably vain
attempt to avoid strange fork problem on CTRL-C.
(dll_crt0_0): Remove obsolete winpids::init call.
* dll_init.cc (dll_dllcrt0): Detect forkee condition as equivalent to
initializing.
* winsup.h (cygwin_finished_initializing): Declare as bool.
* exceptions.cc (handle_exceptions): Rely on cygwin_finished_initializing to
determine how to handle exception during process startup.
(_cygtls::call_signal_handler): Rename from call_signal_handler_now.
(_cygtls::interrupt_now): Fill in second argument to push.
(signal_fixup_after_fork): Eliminate.
(setup_handler): Initialize locked to avoid potential inappropriate unlock.
Resume thread if it has acquired the stack lock.
(ctrl_c_handler): Just exit if ctrl-c is hit before cygiwn has finished
initializing.
* fork.cc (sync_with_child): Don't call abort since it can cause exit
deadlocks.
(sync_with_child): Change debugging output slightly.
(fork_child): Set cygwin_finished_initializing here.  Call _cygtls fork fixup
and explicitly call sigproc_init.
(fork_parent): Release malloc lock on fork failure.
(vfork): Call signal handler via _my_tls.
* sigproc.cc (sig_send): Ditto.
* syscalls.cc (readv): Ditto.
* termios.cc (tcsetattr): Ditto.
* wait.cc (wait4): Ditto.
* signal.cc (nanosleep): Ditto.
(abort): Ditto.
(kill_pgrp): Avoid killing self if exiting.
* sync.cc (muto::acquire): Remove (temporarily?) ill-advised exiting_thread
check.
* gendef (_sigfe): Be more agressive in protecting stack pointer from other
access by signal thread.
(_cygtls::locked): Define new function.
(_sigbe): Ditto.
(_cygtls::pop): Protect edx.
(_cygtls::lock): Use guaranteed method to set eax to 1.
(longjmp): Aggressively protect signal stack.
* miscfuncs.cc (low_priority_sleep): Reduce "sleep time" for secs == 0.
* pinfo.cc (winpids::set): Counterintuitively use malloc's lock to protect
simultaneous access to the pids list since there are pathological conditions
which can cause malloc to call winpid.
(winpids::init): Eliminate.
* pinfo.h (winpids::cs): Eliminate declaration.
* pinfo.h (winpids::init): Eliminate definition.
@
text
@d67 2
a68 1
   expensive OS mutexes.  */
d82 1
a82 1
      LONG was_waiting = InterlockedIncrement (&waiters);
d84 17
a100 23
      /* This is deceptively simple.  Basically, it allows multiple attempts to
	 lock the same muto to succeed without attempting to manipulate sync.
	 If the muto is already locked then this thread will wait for ms until
	 it is signalled by muto::release.  Then it will attempt to grab the
	 sync field.  If it succeeds, then this thread owns the muto.

	 There is a pathological condition where a thread times out waiting for
	 bruteforce but the release code triggers the bruteforce event.  In this
	 case, it is possible for a thread which is going to wait for bruteforce
	 to wake up immediately.  It will then attempt to grab sync but will fail
	 and go back to waiting.  */
      if (tid != this_tid && (was_waiting || InterlockedExchange (&sync, 1) != 0))
	{
	  switch (WaitForSingleObject (bruteforce, ms))
	      {
	      case WAIT_OBJECT_0:
		goto gotit;
		break;
	      default:
		InterlockedDecrement (&waiters);
		return 0;	/* failed. */
	      }
	}
a102 2
gotit:
  tid = this_tid;	/* register this thread. */
d125 1
a125 1
	 threads waiting for the lock, so trigger bruteforce. */
@


1.25
log
@* debug.h (console_printf): Define for non-debugging condition.
* cygtls.h (_threadinfo::lock): Remove wait argument.
(_threadinfo::interrupt_setup): Remove retaddr argument.
* exceptions.cc (_threadinfo::interrupt_setup): Ditto.
(_threadinfo::interrupt_now): Accommodate change to interrupt_setup argument.
(setup_handler): Ditto.  Always lock sig stack prior to determining interrupt
method.
* gendef (_sigfe): Correct thinko regarding cmpxchg.
(_sigbe): Ditto.
(_threadinfo::lock): Ditto.
(_threadinfo::pop): Eliminate left-over stack unlock.
* sigproc.cc (proc_subproc): Chnage debugging output to printed warning.
@
text
@d72 1
d75 1
a117 2
  if (exiting_thread)
    return this_tid == exiting_thread;
@


1.24
log
@* cygtls.h (_threadinfo::call): Remove regparm declaration to work around
compiler bug.
* autoload.cc (TryEnterCriticalSection): Remove.
* dcrt0.cc (dll_crt0_0): Delete inappropriate setting of _my_tls.stackptr to
NULL since it has really bad consequences.  Make 'si' an automatic variable.
* cygtls.cc (_threadinfo::init_thread): Correct thinko which caused thread list
to be allocated every time.
* cygtls.h (CYGTLS_PADSIZE): Define as const int.
* sync.h: Make multiple inclusion safe.
(muto::next): Eliminate.
(muto::exiting_thread): New variable.
(muto::set_exiting_thread): New function.
(new_muto): Change to use different section for mutos since c++ give
inexplicable warning in some cases otherwise.
(new_muto1): Ditto.
* dcrt0.cc (do_exit): Call muto::set_exiting_thread here.
* sync.cc (muto_start): Eliminate.
(muto::acquire): Always give exiting thread a lock.  Never give thread a lock
if exiting.
(muto::release): Ditto for releasing.
* dtable.cc (dtable::init_lock): Unline function and define here.
* dtable.h (lock_cs): Define as a muto since critical sections seem to work
oddly on Windows Me.
(lock): Accommodate switch to muto.
(unlock): Ditto.
* exceptions.cc (setup_handler): Don't worry about acquiring mutos since that
hasn't mattered for a long time.
(signal_exit): Ditto: muto stuff will be handled automatically on exit now.
* Makefile.in (DLL_IMPORTS): Link advapi32 to ensure proper DLL initialization.
* autoload.cc (RegCloseKey): Arbitrarily choose this function as a "seed" to
pull the advapi32 link library in.  So, comment out the autoloading.
* cygtls.cc (_threadinfo::init_thread): Just clear CYGTLS_PADSIZE.
(_threadinfo::remove): Add debugging.
(_threadinfo::find_tls): Ditto.
* cygtls.h (_threadinfo::padding): Make zero length (for now?).
* dcrt0.cc (dll_crt0_0): Move more initialization here from dll_crt0_1.
(dll_crt0_1): See above.
* dtable.h (dtable::lock): Remove commented out critical section locking.
* dtable.h (dtable::init_lock): Remove commented out critical section locking.
* dtable.h (dtable::unlock): Remove commented out critical section locking.
* exceptions.cc (interruptible): bool'ize.
* init.cc (threadfunc_fe): Revert to storing threadfunc at stack bottom.
(munge_threadfunc): Ditto.  Avoid adding overhead to calibration_thread.
(prime_threads): Don't initialize tls stuff.
(dll_entry): Make minor change to initialization order.
* tlsoffsets.h: Regenerate.
* sigproc.cc (wait_sig): Add sanity check for end of process thread exit.
* select.h: Make minor formatting change.
* Makefile.in: Add still more -fomit-frame-pointer functions.
* dtable.h (dtable::lock): New function.
(dtable::unlock): New function.
(dtable::init_lock): New function.
* cygheap.h (HEAP_TLS): Declare new enum value.
(init_cygheap::threadlist): Declare new array.
(init_cygheap::sthreads): Declare new variable.
(cygheap_fdmanip::~cygheap_fdmanip): Use new dtable lock/unlock functions.
(cygheap_fdnew::cygheap_fdnew): Ditto.
(cygheap_fdget::cygheap_fdget): Ditto.
* dtable.cc (dtable_init): Initialize fdtab critical section.
(dtable::fixup_after_fork): Ditto.
(dtable::fixup_after_exec): Ditto.
(dtable::dup2): Use lock/unlock calls to protect access to fdtab.
(dtable::find_fifo): Ditto.
(dtable::fixup_before_fork): Ditto.
(dtable::fixup_before_exec): Ditto.
(dtable::set_file_pointers_for_exec): Ditto.
(dtable::vfork_child_dup): Ditto.
(dtable::vfork_parent_restore): Ditto.
* syscalls.cc (close_all_files): Ditto.
* sync.h (muto::acquired): Declare new function.
(new_muto1): Declare new macro used to specify name of muto storage.
* sync.cc (muto::acquired): Define new function.
* cygthread.cc (cygthread::stub): Remove signal chain removal call since it is
handled during initialization now.
* cygthread.cc (cygthread::simplestub): Remove signal chain removal call since
it is handled during initialization now.
* cygtls.cc (sentry): New class used for locking.  Use throughout.
(_threadinfo::reset_exception): Don't pop stack.
(_threadinfo::find_tls): Move from exceptions.cc.
(_threadinfo::init_thread): Initialize array of threads rather than linked
list.  Take second argument indicating thread function for this thread.
(_threadinfo::remove): Search thread array rather than linked list.  Use sentry
to lock.  Only unlock if we got the lock.
(_threadinfo::find_tls): Ditto for first two.
(handle_threadlist_exception): Handle exceptions when manipulating the thread
list in case of premature thread termination.
(_threadinfo::init_threadlist_exceptions): Ditto.
* cygtls.h (TLS_STACK_SIZE): Decrease size.
(_threadinfo::padding): Add element to avoid overwriting lower part of stack.
(_threadinfo::remove): Add a "wait" argument to control how long we wait for a
lock before removing.
* exceptions.cc (init_exception_handler): Make global.  Take argument to
control exception handler being set.
(ctrl_c_handler): Wait forever when removing self from signal chain.
(_threadinfo::find_tls): Move to cygtls.cc.
(sig_handle): Reorganize detection for thread-specific signals.
* heap.cc (heap_init): Rework slightly.  Make fatal error more verbose.  Remove
malloc initialization since it can't happen during dll attach.
* init.cc (search_for): Move address to search for on stack here.
(threadfunc_ix): Ditto for stack offset.  Make shared so that stack walk
potentially only has to be done once when cygwin processes are running.
(threadfunc_fe): Use standard tls to store thread function (may change back
later).
(calibration_thread): New function.  Potentially called to find threadfunc_ix.
(munge_threadfunc): Search for "search_for" value on stack.  Output warning
when thread func not found on stack.  Use standard tls to store thread
function.
(prime_threads): New function.  Called to prime thread front end.
(dll_entry): Call dll_crt0_0 here when DLL_PROCESS_ATTACH.  Call prime_threads
here.  Try to remove thread from signal list here.
* sigproc.cc (wait_sig): Initialize threadlist exception stuff here.
* thread.cc (pthread::exit): Pass argument to signal list remove function.
* thread.h: Remove obsolete *ResourceLock defines.
* tlsoffsets.h: Regenerate.
* winsup.h (spf): Define temporary debug macro to be deleted later.
* dcrt0.cc (dll_crt0_0): New function, called during DLL initialization.
Mainly consists of code pulled from dll_crt0_1.
(dll_crt0_1): See above.
(_dll_crt0): Wait for initial calibration thread to complete, if appropriate.
Move some stuff to dll_crt0_0.
(initialize_main_tls): Accommodate argument change to
_thread_info::init_thread.
* fork.cc (fork_child): Ditto.
(sync_with_child): Fix debug message.
* external.cc (cygwin_internal): Remove special considerations for
uninitialized dll since initialization happens during dll attach now.
* dlfcn.cc (dlopen): Remove obsolete *ResourceLock calls.
(dlclose): Ditto.
* cygheap.h (init_cygheap::close_ctty): Declare new function.
* cygheap.cc (init_cygheap::close_ctty): Define new function.
* syscalls.cc (close_all_files): Use close_ctty.
(setsid): Ditto.
* cygthread.cc (cygthread::stub): Remove exception initialization.
* cygthread.cc (cygthread::stub): Remove exception initialization.
(cygthread::simplestub): Ditto.
* thread.cc (pthread::thread_init_wrapper): Ditto.
* cygtls.cc (_last_thread): Make static.
(_threadinfo::call2): Initialize exception handler here.
(_threadinfo::find_tls): Move here.
* exceptions.cc (_threadinfo::find_tls): Move.
* dcrt0.cc (__api_fatal): Add prefix info to message here rather than including
it in every call to function.
* winsup.h (api_fatal): Accommodate above change.
* debug.cc (add_handle): Don't do anything if cygheap not around.
(mark_closed): Ditto.
* dll_init.cc (dll_list::detach): Fix debug output.
* fork.cc (sync_with_child): Ditto.
(vfork): Improve debug output.
* heap.cc (heap_init): Ditto.
* exceptions.cc (try_to_debug): Clarify message when debugger attaches.
@
text
@d7 1
a7 1
   Copyright 2000, 2001, 2002 Red Hat, Inc.
@


1.23
log
@* dtable.cc (handle_to_fn): Attempt to handle "raw" accesses to remote shares.
* path.cc (mount_info::conv_to_win32_path): Set flags to binary when mount
entry is not found.
(mount_info::set_flags_from_win32_path): Ditto.
@
text
@d26 1
a26 1
muto NO_COPY muto_start;
d28 1
a28 1
#undef WaitForSingleObject
a42 2
  next = muto_start.next;
  muto_start.next = this;
d72 2
d116 2
d138 6
@


1.23.8.1
log
@* Makefile.in: Add still more -fomit-frame-pointer functions.
* dtable.h (dtable::lock): New function.
(dtable::unlock): New function.
(dtable::init_lock): New function.
* cygheap.h (HEAP_TLS): Declare new enum value.
(init_cygheap::threadlist): Declare new array.
(init_cygheap::sthreads): Declare new variable.
(cygheap_fdmanip::~cygheap_fdmanip): Use new dtable lock/unlock functions.
(cygheap_fdnew::cygheap_fdnew): Ditto.
(cygheap_fdget::cygheap_fdget): Ditto.
* dtable.cc (dtable_init): Initialize fdtab critical section.
(dtable::fixup_after_fork): Ditto.
(dtable::fixup_after_exec): Ditto.
(dtable::dup2): Use lock/unlock calls to protect access to fdtab.
(dtable::find_fifo): Ditto.
(dtable::fixup_before_fork): Ditto.
(dtable::fixup_before_exec): Ditto.
(dtable::set_file_pointers_for_exec): Ditto.
(dtable::vfork_child_dup): Ditto.
(dtable::vfork_parent_restore): Ditto.
* syscalls.cc (close_all_files): Ditto.
* sync.h (muto::acquired): Declare new function.
(new_muto1): Declare new macro used to specify name of muto storage.
* sync.cc (muto::acquired): Define new function.
* cygthread.cc (cygthread::stub): Remove signal chain removal call since it is
handled during initialization now.
* cygthread.cc (cygthread::simplestub): Remove signal chain removal call since
it is handled during initialization now.
* cygtls.cc (sentry): New class used for locking.  Use throughout.
(_threadinfo::reset_exception): Don't pop stack.
(_threadinfo::find_tls): Move from exceptions.cc.
(_threadinfo::init_thread): Initialize array of threads rather than linked
list.  Take second argument indicating thread function for this thread.
(_threadinfo::remove): Search thread array rather than linked list.  Use sentry
to lock.  Only unlock if we got the lock.
(_threadinfo::find_tls): Ditto for first two.
(handle_threadlist_exception): Handle exceptions when manipulating the thread
list in case of premature thread termination.
(_threadinfo::init_threadlist_exceptions): Ditto.
* cygtls.h (TLS_STACK_SIZE): Decrease size.
(_threadinfo::padding): Add element to avoid overwriting lower part of stack.
(_threadinfo::remove): Add a "wait" argument to control how long we wait for a
lock before removing.
* exceptions.cc (init_exception_handler): Make global.  Take argument to
control exception handler being set.
(ctrl_c_handler): Wait forever when removing self from signal chain.
(_threadinfo::find_tls): Move to cygtls.cc.
(sig_handle): Reorganize detection for thread-specific signals.
* heap.cc (heap_init): Rework slightly.  Make fatal error more verbose.  Remove
malloc initialization since it can't happen during dll attach.
* init.cc (search_for): Move address to search for on stack here.
(threadfunc_ix): Ditto for stack offset.  Make shared so that stack walk
potentially only has to be done once when cygwin processes are running.
(threadfunc_fe): Use standard tls to store thread function (may change back
later).
(calibration_thread): New function.  Potentially called to find threadfunc_ix.
(munge_threadfunc): Search for "search_for" value on stack.  Output warning
when thread func not found on stack.  Use standard tls to store thread
function.
(prime_threads): New function.  Called to prime thread front end.
(dll_entry): Call dll_crt0_0 here when DLL_PROCESS_ATTACH.  Call prime_threads
here.  Try to remove thread from signal list here.
* sigproc.cc (wait_sig): Initialize threadlist exception stuff here.
* thread.cc (pthread::exit): Pass argument to signal list remove function.
* thread.h: Remove obsolete *ResourceLock defines.
* tlsoffsets.h: Regenerate.
* winsup.h (spf): Define temporary debug macro to be deleted later.
* dcrt0.cc (dll_crt0_0): New function, called during DLL initialization.
Mainly consists of code pulled from dll_crt0_1.
(dll_crt0_1): See above.
(_dll_crt0): Wait for initial calibration thread to complete, if appropriate.
Move some stuff to dll_crt0_0.
(initialize_main_tls): Accommodate argument change to
_thread_info::init_thread.
* fork.cc (fork_child): Ditto.
(sync_with_child): Fix debug message.
* external.cc (cygwin_internal): Remove special considerations for
uninitialized dll since initialization happens during dll attach now.
* dlfcn.cc (dlopen): Remove obsolete *ResourceLock calls.
(dlclose): Ditto.
* cygheap.h (init_cygheap::close_ctty): Declare new function.
* cygheap.cc (init_cygheap::close_ctty): Define new function.
* syscalls.cc (close_all_files): Use close_ctty.
(setsid): Ditto.
* cygthread.cc (cygthread::stub): Remove exception initialization.
* cygthread.cc (cygthread::stub): Remove exception initialization.
(cygthread::simplestub): Ditto.
* thread.cc (pthread::thread_init_wrapper): Ditto.
* cygtls.cc (_last_thread): Make static.
(_threadinfo::call2): Initialize exception handler here.
(_threadinfo::find_tls): Move here.
* exceptions.cc (_threadinfo::find_tls): Move.
* dcrt0.cc (__api_fatal): Add prefix info to message here rather than including
it in every call to function.
* winsup.h (api_fatal): Accommodate above change.
* debug.cc (add_handle): Don't do anything if cygheap not around.
(mark_closed): Ditto.
* dll_init.cc (dll_list::detach): Fix debug output.
* fork.cc (sync_with_child): Ditto.
(vfork): Improve debug output.
* heap.cc (heap_init): Ditto.
* exceptions.cc (try_to_debug): Clarify message when debugger attaches.
@
text
@a137 6
bool
muto::acquired ()
{
  return tid == GetCurrentThreadId ();
}

@


1.23.8.2
log
@* cygtls.cc (_threadinfo::init_thread): Correct thinko which caused thread list
to be allocated every time.
* cygtls.h (CYGTLS_PADSIZE): Define as const int.
* sync.h: Make multiple inclusion safe.
(muto::next): Eliminate.
(muto::exiting_thread): New variable.
(muto::set_exiting_thread): New function.
(new_muto): Change to use different section for mutos since c++ give
inexplicable warning in some cases otherwise.
(new_muto1): Ditto.
* dcrt0.cc (do_exit): Call muto::set_exiting_thread here.
* sync.cc (muto_start): Eliminate.
(muto::acquire): Always give exiting thread a lock.  Never give thread a lock
if exiting.
(muto::release): Ditto for releasing.
* dtable.cc (dtable::init_lock): Unline function and define here.
* dtable.h (lock_cs): Define as a muto since critical sections seem to work
oddly on Windows Me.
(lock): Accommodate switch to muto.
(unlock): Ditto.
* exceptions.cc (setup_handler): Don't worry about acquiring mutos since that
hasn't mattered for a long time.
(signal_exit): Ditto: muto stuff will be handled automatically on exit now.
@
text
@d26 2
a29 2
DWORD NO_COPY muto::exiting_thread;

d43 2
a73 2
  if (exiting_thread)
    return this_tid == exiting_thread;
a115 2
  if (exiting_thread)
    return this_tid == exiting_thread;
@


1.22
log
@* times.cc (hires::prime): Restore thread priority on failure condition.
* uinfo.cc (uinfo_init): Use more robust method for determining if process was
invoked from a non-cygwin process.
* sync.h (muto::init): Eliminate "inheritance" parameter.
(new_muto): Reflect removal of parameter.
* sync.cc (muto::init): Ditto.
* cygheap.cc (cygheap_init): Ditto.
* debug.cc (threadname_init): Ditto.
* exceptions.cc (events_init): Ditto.
* malloc.cc (malloc_init): Ditto.
* path.cc (cwdstuff::init): Ditto.
* sigproc.cc (sigproc_init): Ditto.
* grp.cc (group_lock): Use different method for locking with static member.
(read_etc_group): REALLY ensure that read lock mutex is released.
* passwd.cc (passwd_lock): Use different method for locking with static member.
(read_etc_passwd): REALLY ensure that read lock mutex is released.
* shared.cc (sec_user): Correct reversed inheritance test.
@
text
@d7 1
a7 1
   Copyright 2000, 2001 Red Hat, Inc.
@


1.21
log
@* exceptions.cc (unused_sig_wrapper): Eliminate unused parameter to asm.
* external.cc (cygwin_internal): Change CW_STRACE_ON to CW_STRACE_TOGGLE.
* strace.cc (strace::hello): Toggle strace on and off.
* sync.cc (muto::init): Renamed from constructor.
* sync.h (muto::new): Delete.
(muto::delete): Ditto.
(new_muto): Simplify.  Use muto.init for nearly everything.
* uinfo.cc (uinfo_init): Avoid closing a NULL handle.
* include/sys/cygwin.h (cygwin_getinfo_types): Rename CW_STRACE_OFF to
CW_STRACE_TOGGLE.  Delete CW_STRACE_OFF.
* include/sys/strace.h (strace): Add "inited" field.
@
text
@d32 1
a32 1
muto::init (int inh, const char *s)
d36 1
a36 1
  if (!(bruteforce = CreateEvent (inh ? &sec_all_nih : &sec_none_nih, FALSE, FALSE, NULL)))
@


1.20
log
@* dtable.h (not_open): Assure inline.
* fhandler.h (operator []): Make const.
* sync.cc (muto::~muto): Fix typo which stopped muto event handle from ever
being closed.
@
text
@d31 2
a32 1
muto::muto (int inh, const char *s) : sync (0), visits(0), waiters(-1), tid (0), next (NULL)
d34 1
d36 1
a36 1
  if (!(bruteforce = CreateEvent (inh ? &sec_all_nih : &sec_none_nih, FALSE, FALSE, name)))
d40 1
a40 1
      return;
d43 3
d48 1
d61 1
@


1.20.2.1
log
@Merged changes from HEAD
@
text
@d31 1
a31 2
muto *
muto::init (const char *s)
a32 1
  waiters = -1;
d34 1
a34 1
  if (!(bruteforce = CreateEvent (&sec_none_nih, FALSE, FALSE, NULL)))
d38 1
a38 1
      return NULL;
a40 3
  next = muto_start.next;
  muto_start.next = this;
  return this;
a42 1
#if 0 /* FIXME: Do we need this? mutos aren't destroyed until process exit */
a54 1
#endif
@


1.20.2.2
log
@Merged changes from HEAD
@
text
@d7 1
a7 1
   Copyright 2000, 2001, 2002 Red Hat, Inc.
@


1.19
log
@* sync.cc (muto::acquire): Fix while/if typo.
@
text
@d50 1
a50 1
  h = NULL;
@


1.18
log
@change copyright.
@
text
@d85 1
a85 1
      while (tid != this_tid && (was_waiting || InterlockedExchange (&sync, 1) != 0))
@


1.17
log
@forced commit
@
text
@d7 1
a7 1
   Copyright 2000 Cygnus Solutions.
@


1.16
log
@Revert much of previous erroneous checkin.  Add ChangeLog entry.

* pinfo.h: Correctly set __SIGOFFSET.
* path.cc (hash_path_name): Avoid calling library functions for simple copying
of characters.
* shortcut.c: Use WIN32_LEAN_AND_MEAN.
* smallprint.c: Ditto.
* environ.cc (getwinenv): Minor clarity fix.
* localtime.c: No need to include windows.h
* string.h: New file.
@
text
@@


1.15
log
@* exceptions.cc (ctrl_c_handler): Always send signal to process if it has no
tty.
@
text
@d61 1
a61 1
   OS.  Hence the use of ilockincr, etc., rather than (much) more
d72 1
a72 1
      LONG was_waiting = ilockincr (&waiters);
d85 1
a85 1
      while (tid != this_tid && (was_waiting || ilockexch (&sync, 1) != 0))
d93 1
a93 1
		ilockdecr (&waiters);
d120 1
a120 1
      (void) ilockexch (&sync, 0); /* Reset trigger. */
d124 1
a124 1
      if (ilockdecr (&waiters) >= 0)
d136 1
a136 1
  ilockexch (&waiters, -1);
@


1.14
log
@* dcrt0.cc (sigthread::init): Correct overzealous ifdef.
* exceptions.cc (call_handler): Avoid calling sigthread acquire lock.
* sigproc.h (sigthread): Comment out lock for now.
* sync.cc (muto::acquire): Add a minor optimization.
@
text
@d61 1
a61 1
   OS.  Hence the use of InterlockedIncrement, etc., rather than (much) more
d72 1
a72 1
      LONG was_waiting = InterlockedIncrement (&waiters);
d85 1
a85 1
      while (tid != this_tid && (was_waiting || InterlockedExchange (&sync, 1) != 0))
d93 1
a93 1
		InterlockedDecrement (&waiters);
d120 1
a120 1
      (void) InterlockedExchange (&sync, 0); /* Reset trigger. */
d124 1
a124 1
      if (InterlockedDecrement (&waiters) >= 0)
d136 1
a136 1
  InterlockedExchange (&waiters, -1);
@


1.13
log
@* cygheap.cc (cygheap_init): Born again function.
(_cmalloc): Reorganize to accomodate muto locking.
(_cfree): Use muto lock to avoid multi-thread problems.
* cygheap.h (incygheap): Just use cygheap_max to find upper cygwin heap bounds.
* dcrt0.cc (dll_crt0_1): Reinstitute cygheap_init call.
* path.cc (getcwd): Just return cwdstuff::get result, allowing correct handling
of negative length.
(cwdstuff::get): Malloc a buffer if one is not available.
@
text
@d90 1
a90 1
		was_waiting = 0;
d99 1
@


1.12
log
@Break out more header info into separate files.  Use appropriate header files
throughout.
* shared.h: Remove.
* cygwin_version.h: New file.
* delqueue.h: New file.
* environ.h: New file.
* host_dependent.h: New file.
* perprocess.h: New file.
* registry.h: New file.
* security.h: New file.
@
text
@d119 1
a119 1
      InterlockedExchange (&sync, 0); /* Reset trigger. */
@


1.11
log
@* exceptions.cc (signal_exit): Reset all mutos owned by the main thread.
* fhandler.h: Define *_output_mutex macros for serializing tty output.
(fhandler_termios): Remove restart_output_event.  Define dummy output mutex
methods.
(fhandler_pty_master): Remove unneeded fixup_after_fork method.
* fhandler_termios.cc (fhandler_termios::line_edit): Acquire output_mutex when
CTRL-S is hit.  Release it on CTRL-Q.
* fhandler_tty.cc (fhandler_pty_master::process_slave_output): Remove
inappropriate OutputStopped test here.  Just use the output mutex.
(fhandler_pty_master::fhandler_pty_master): Remove obsolete reference to
restart_output_event.
(fhandler_tty_common::close): Ditto.
(fhandler_pty_master::set_close_on_exec): Ditto.
(fhandler_pty_master::fixup_after_fork): Delete.
* tty.cc (tty::common_init): Ditto.
* sync.cc (muto::reset): New method.
* sync.h: Declare above method.
@
text
@d24 1
@


1.10
log
@* winsup.h: Eliminate inclusion of most of the cygwin .h files.  Use .h files
only in sources which require them.
* Makefile.in: Generate dependencies with -MD option.
@
text
@d128 13
@


1.9
log
@* winsup.h: take out protections of environ, errno, allow C use
* *.cc: put winsup.h before other headers (for __INSIDE_CYGWIN__);
use cur_environ() instead of just environ
* times.cc: remove import protections
* glob.c: add winsup.h
* localtime.c: ditto
* smallprint.c: ditto
* Makefile.in: don't __INSIDE_CYGWIN__ as it messes up profiling.
@
text
@d23 1
@


1.8
log
@* dcrt0.cc (dll_crt0_1): Initialize mainthread stuff here before anything needs
it.
* sigproc.cc (sigproc_init): Move mainthread initialization out of here.
* sigproc.h (sigthread): Add init() method.
(sigframe): Don't try to initialize muto.
* sync.cc: Undef WaitForSingleObject to avoid recursion.
@
text
@d17 1
a22 1
#include "winsup.h"
@


1.7
log
@* path.cc (mount_info::cygdrive_posix_path): Don't add trailing slash if
referring to something like c:\.
* dcrt0.cc (dll_crt0_1): Move uinfo initialization prior to sig_send
initialization to give signal thread a chance to finish.
* debug.cc (WFSO): Move to sigproc.cc
(WFMO): Ditto.
* exceptions.cc (interruptible): Allocate slightly more space for directory
just for paranoia's sake.
(call_handler): Eliminate nonmain argument.  Determine if main thread has set a
frame pointer and use it if so.
(sig_handle): Eliminate nonmain argument.
* net.cc: Record frame information in appropriate routines throughout.
* select.cc (select): Ditto.
* sigproc.cc: Use sigthread structure to record mainthread id throughout.
(sig_send): Record frame information for signal handler.
(wait_sig): Reflect argument change in sig_handle.
(WFSO): Move here and record frame information for signal handler.
(WFMO): Ditto.
* sigproc.h: Implement new "sigthread" class.  Implement "sigframe" class for
manipulating signal frame info.
* thread.cc (__pthread_kill): Use standard _kill() function rather than calling
sig_send directly.
* winsup.h: Eliminate ebp element from signal_dispatch class.
@
text
@d26 2
@


1.6
log
@Pipe changes throughout suggested by Eric Fifer <EFifer@@sanwaint.com>
* debug.cc (threadname_init): Pass name of lock as arg 2 of new_muto.
* malloc.cc (malloc_init): Ditto.
* sigproc.cc (sigproc_init): Ditto.
* exceptions.cc (events_init): Ditto.
(call_handler): Eliminate special case for hExeced.  Report locked thread in
debugging output.
* fhandler.cc (fhandker_pipe::fhandler_pipe): Propagate device type to base
class.
* fhandler.h (fhandler_pipe): Ditto.
* hinfo.cc (hinfo::build_fhandler): Pass specific type of pipe to constructor.
* spawn.cc (spawn_guts): Eliminate dependency on signal when waiting for
subprocess.
* strace.cc: Remove obsolete #ifdef.
* sync.cc (muto::muto): Save the name of the muto.
(muto:~muto): Also release the muto.
* sync.h: Add a muto name field.
* select.cc (peek_pipe): Avoid doing a PeekNamedPipe on the write end of a
pipe.
@
text
@a22 1
#include "sync.h"
d27 1
a27 1
muto::muto(int inh, const char *s) : sync (0), visits(0), waiters(-1), tid (0), next (NULL)
@


1.5
log
@* exceptions.cc (interruptible): Make a little more structured.
(call_handler): Allow signals to be sent even if signalled thread is stopped.
Change order of signal_arrived arming/waiting threads clearing to eliminate a
race.
(reset_signal_arrived): New helper function.
* malloc.cc (malloc_init): Use mutos so that signal handler can keep track of
who owns the lock.
(__malloc_lock): Ditto.
(__malloc_unlock): Ditto.
* sync.h (new_muto): Actually use a muto for the "buffer".
* Makefile.in: Fix a dependency.
@
text
@d28 1
a28 1
muto::muto(int inh, const char *name) : sync (0), visits(0), waiters(-1), tid (0), next (NULL)
d37 1
d40 1
a40 1
/* Destructor */
d43 5
d49 2
a50 2
  if (bruteforce)
    CloseHandle (bruteforce);
@


1.4
log
@* exceptions.cc (call_handler): Use new muto linked list to look for all
potential mutos owned by suspended thread.  Clear waiting threads while thread
is stopped.
(proc_subproc): Clarify debugging output.
* sync.h (class muto): Add 'next' field.
(new_muto): Keep linked list alive.
@
text
@d23 1
d25 1
a25 1
muto muto_start (0, 0);
d28 1
a28 1
muto::muto(int inh, const char *name) : sync (0), visits(0), waiters(-1), tid (0), next (0)
@


1.3
log
@Fix final round of gcc warnings relating to unused parameters.
* debug.cc (iscygthread): New function.
* debug.h: Declare it.
* exceptions.cc (set_process_mask): Flush pending signals.
(handle_sigsuspend): No need to flush pending signals.
(call_handler): Refine previous tests of muto ownership.  Only clear wait()'s
when we have definitely responded to a signal.
* fhandler_console.cc (fhandler_console::read): Don't set EINTR if executing in
a "cygwin" thread.
* sigproc.cc (proc_subproc): Use second argument to control whether CLEARWAIT
actually sets "signalled" flag.
* sync.h (muto): Add 'unstable' method.
@
text
@d24 2
d27 1
a27 1
muto::muto(int inh, const char *name) : sync (0), visits(0), waiters(-1), tid (0)
@


1.2
log
@* exceptions.cc (interruptible): Change method for determining if something is
interruptible.
(call_handler): Avoid suspending a thread if it owns a mutex.  Only set
signal_arrived if the thread was actually interrupted.
(events_init): Initialize module information needed by interruptible().
(sigdelayed): Don't call sig_dispatch_pending since it could screw up
* init.cc (dll_entry): Record module handle of main for use by interruptible().
(proc_subproc): Reorganize handling of terminated child so that the bulk of the
processing comes from the signal thread.
(wait_sig): Force processing of waiting threads if SIGCHLD is not processed.
* sync.cc (muto::release): Set tid == 0 after lock is released or signal
processor will be confused.
@
text
@d106 1
a110 1
      tid = 0;		/* We were the last unlocker. */
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
   Copyright 1999 Cygnus Solutions.
d46 5
a50 1
   be handled correctly.  */
d66 1
a66 1
	 sync field.  If it succeeds, then this thread owns the mutex.
a105 1
      tid = 0;		/* We were the last unlocker. */
d110 1
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
