head	1.81;
access;
symbols
	cygwin-1_7_35-release:1.81
	cygwin-1_7_34-release:1.81
	cygwin-1_7_33-release:1.81
	cygwin-1_7_32-release:1.81
	cygwin-1_7_31-release:1.81
	cygwin-1_7_30-release:1.81
	cygwin-1_7_29-release:1.81
	cygwin-1_7_29-release-branchpoint:1.81.0.2
	cygwin-pre-user-db:1.81
	cygwin-1_7_28-release:1.81
	cygwin-1_7_27-release:1.81
	cygwin-1_7_26-release:1.81
	cygwin-1_7_25-release:1.80
	cygwin-1_7_24-release:1.80
	cygwin-1_7_23-release:1.80
	cygwin-1_7_22-release:1.80
	cygwin-1_7_21-release:1.80
	cygwin-1_7_20-release:1.80
	cygwin-1_7_19-release:1.80
	cygwin-64bit-postmerge:1.80
	cygwin-64bit-premerge-branch:1.79.0.2
	cygwin-64bit-premerge:1.79
	cygwin-1_7_18-release:1.79
	post-ptmalloc3:1.74.2.4
	pre-ptmalloc3:1.74.2.4
	cygwin-1_7_17-release:1.78
	cygwin-64bit-branch:1.74.0.2
	cygwin-1_7_16-release:1.74
	cygwin-1_7_15-release:1.74
	cygwin-1_7_14_2-release:1.74
	cygwin-1_7_14-release:1.74
	cygwin-1_7_12-release:1.74
	cygwin-1_7_11-release:1.74
	cygwin-1_7_10-release:1.74
	signal-rewrite:1.72.0.2
	pre-notty:1.71
	cygwin-1_7_9-release:1.70
	cv-post-1_7_9:1.70.0.6
	cygwin-1_7_8-release:1.70
	cygwin-1_7_7-release:1.70
	cygwin-1_7_5-release:1.70
	cygwin-1_7_4-release:1.70
	cygwin-1_7_3-release:1.70
	cygwin-1_7_2-release:1.70
	fifo_doover3:1.70.0.4
	cygwin-1_7_1-release:1.70
	prefifo:1.70
	cv-branch-2:1.70.0.2
	pre-ripout-set_console_state_for_spawn:1.69
	EOL_registry_mounts:1.68
	preoverlapped:1.68
	drop_9x_support_start:1.66
	cr-0x5f1:1.65.0.8
	cv-branch:1.65.0.6
	pre-ptymaster-archetype:1.65
	cr-0x3b58:1.65.0.4
	cr-0x5ef:1.65.0.2
	after-mmap-privanon-noreserve:1.60
	after-mmap-revamp:1.60
	before-mmap-revamp:1.60
	cgf-more-exit-sync:1.59
	post_wait_sig_exit:1.55
	pre_wait_sig_exit:1.54
	reparent-point:1.51
	noreparent:1.51.0.2
	cr-0x5e6:1.48.0.2
	cr-0x9e:1.37.0.6
	cr-0x9d:1.37.0.4
	cgf-deleteme:1.37.0.2
	pre-sigrewrite:1.37
	corinna-01:1.36
	cr-0x9c:1.34.0.4
	cr-0x9b:1.34.0.2
	cr-0x99:1.32
	Z-emcb-cygwin_daemon:1.32.0.2
	w32api-2_2:1.30
	mingw-runtime-2_4:1.30
	pre-cgf-merge:1.34
	cgf-dev-branch:1.30.0.6
	predaemon:1.24
	cygwin_daemon_merge_HEAD:1.24
	pregp02r1:1.24.0.22
	cygnus_cvs_20020108_pre:1.24
	Z-cygwin_daemon_merge-new_HEAD:1.29
	Z-cygwin_daemon_merge_HEAD:1.29
	cygwin_daemon:1.16.0.2;
locks; strict;
comment	@// @;
expand	@o@;


1.81
date	2013.10.26.13.23.54;	author corinna;	state Exp;
branches;
next	1.80;

1.80
date	2013.04.23.09.44.32;	author corinna;	state Exp;
branches;
next	1.79;

1.79
date	2013.01.21.04.34.51;	author cgf;	state Exp;
branches;
next	1.78;

1.78
date	2012.10.16.09.52.26;	author corinna;	state Exp;
branches;
next	1.77;

1.77
date	2012.10.15.16.11.38;	author corinna;	state Exp;
branches;
next	1.76;

1.76
date	2012.10.13.12.34.18;	author corinna;	state Exp;
branches;
next	1.75;

1.75
date	2012.10.12.13.59.45;	author corinna;	state Exp;
branches;
next	1.74;

1.74
date	2011.11.14.01.37.02;	author cgf;	state Exp;
branches
	1.74.2.1;
next	1.73;

1.73
date	2011.10.15.22.37.29;	author cgf;	state Exp;
branches;
next	1.72;

1.72
date	2011.07.31.12.37.52;	author corinna;	state Exp;
branches;
next	1.71;

1.71
date	2011.06.06.05.02.11;	author cgf;	state Exp;
branches;
next	1.70;

1.70
date	2009.01.03.05.12.20;	author cgf;	state Exp;
branches;
next	1.69;

1.69
date	2008.04.07.18.45.57;	author cgf;	state Exp;
branches;
next	1.68;

1.68
date	2007.03.06.14.48.24;	author corinna;	state Exp;
branches;
next	1.67;

1.67
date	2007.02.23.10.51.59;	author corinna;	state Exp;
branches;
next	1.66;

1.66
date	2007.01.04.09.17.55;	author corinna;	state Exp;
branches;
next	1.65;

1.65
date	2005.12.14.16.38.22;	author corinna;	state Exp;
branches
	1.65.8.1;
next	1.64;

1.64
date	2005.12.14.15.54.33;	author corinna;	state Exp;
branches;
next	1.63;

1.63
date	2005.12.08.10.55.29;	author corinna;	state Exp;
branches;
next	1.62;

1.62
date	2005.12.07.19.01.29;	author corinna;	state Exp;
branches;
next	1.61;

1.61
date	2005.12.07.18.35.29;	author corinna;	state Exp;
branches;
next	1.60;

1.60
date	2005.11.14.04.28.44;	author cgf;	state Exp;
branches;
next	1.59;

1.59
date	2005.09.28.19.33.18;	author corinna;	state Exp;
branches;
next	1.58;

1.58
date	2005.09.28.19.22.22;	author corinna;	state Exp;
branches;
next	1.57;

1.57
date	2005.09.28.19.02.49;	author corinna;	state Exp;
branches;
next	1.56;

1.56
date	2005.09.26.14.55.40;	author corinna;	state Exp;
branches;
next	1.55;

1.55
date	2005.09.14.14.27.54;	author cgf;	state Exp;
branches;
next	1.54;

1.54
date	2005.07.05.03.16.44;	author cgf;	state Exp;
branches;
next	1.53;

1.53
date	2005.03.27.01.57.37;	author cgf;	state Exp;
branches;
next	1.52;

1.52
date	2005.02.27.04.30.07;	author cgf;	state Exp;
branches;
next	1.51;

1.51
date	2004.07.15.14.56.05;	author corinna;	state Exp;
branches;
next	1.50;

1.50
date	2004.07.14.13.51.17;	author corinna;	state Exp;
branches;
next	1.49;

1.49
date	2004.05.28.19.50.05;	author cgf;	state Exp;
branches;
next	1.48;

1.48
date	2004.04.20.11.01.22;	author corinna;	state Exp;
branches;
next	1.47;

1.47
date	2004.04.16.21.22.13;	author corinna;	state Exp;
branches;
next	1.46;

1.46
date	2004.04.10.13.45.09;	author corinna;	state Exp;
branches;
next	1.45;

1.45
date	2004.04.09.20.39.19;	author corinna;	state Exp;
branches;
next	1.44;

1.44
date	2004.04.06.07.57.59;	author corinna;	state Exp;
branches;
next	1.43;

1.43
date	2004.03.26.21.43.48;	author corinna;	state Exp;
branches;
next	1.42;

1.42
date	2004.03.13.18.15.06;	author corinna;	state Exp;
branches;
next	1.41;

1.41
date	2004.03.02.13.07.47;	author corinna;	state Exp;
branches;
next	1.40;

1.40
date	2004.02.09.04.04.23;	author cgf;	state Exp;
branches;
next	1.39;

1.39
date	2004.02.02.21.00.07;	author cgf;	state Exp;
branches;
next	1.38;

1.38
date	2004.01.21.18.19.29;	author cgf;	state Exp;
branches;
next	1.37;

1.37
date	2003.11.14.23.40.05;	author rbcollins;	state Exp;
branches
	1.37.6.1;
next	1.36;

1.36
date	2003.09.30.21.43.40;	author corinna;	state Exp;
branches;
next	1.35;

1.35
date	2003.09.25.00.37.16;	author cgf;	state Exp;
branches;
next	1.34;

1.34
date	2003.09.07.05.18.01;	author cgf;	state Exp;
branches;
next	1.33;

1.33
date	2003.09.05.01.55.01;	author cgf;	state Exp;
branches;
next	1.32;

1.32
date	2003.08.17.17.12.18;	author corinna;	state Exp;
branches;
next	1.31;

1.31
date	2003.06.16.03.24.10;	author cgf;	state Exp;
branches;
next	1.30;

1.30
date	2002.12.14.04.01.32;	author cgf;	state Exp;
branches
	1.30.4.1
	1.30.6.1;
next	1.29;

1.29
date	2002.09.22.03.38.57;	author cgf;	state Exp;
branches;
next	1.28;

1.28
date	2002.07.01.19.03.26;	author cgf;	state Exp;
branches;
next	1.27;

1.27
date	2002.06.05.04.01.42;	author cgf;	state Exp;
branches;
next	1.26;

1.26
date	2002.06.05.01.42.28;	author cgf;	state Exp;
branches;
next	1.25;

1.25
date	2002.05.17.09.32.45;	author corinna;	state Exp;
branches;
next	1.24;

1.24
date	2001.11.16.23.28.56;	author corinna;	state Exp;
branches;
next	1.23;

1.23
date	2001.10.22.18.39.22;	author cgf;	state Exp;
branches;
next	1.22;

1.22
date	2001.10.16.20.17.23;	author corinna;	state Exp;
branches;
next	1.21;

1.21
date	2001.10.16.14.53.26;	author corinna;	state Exp;
branches;
next	1.20;

1.20
date	2001.10.13.17.23.35;	author cgf;	state Exp;
branches;
next	1.19;

1.19
date	2001.10.05.04.21.41;	author cgf;	state Exp;
branches;
next	1.18;

1.18
date	2001.10.04.02.34.19;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2001.10.01.04.10.06;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2001.09.20.11.29.48;	author corinna;	state Exp;
branches
	1.16.2.1;
next	1.15;

1.15
date	2001.07.26.19.22.23;	author cgf;	state Exp;
branches;
next	1.14;

1.14
date	2001.06.24.22.26.51;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2001.04.18.21.10.12;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2001.03.18.03.34.05;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2001.03.05.06.28.23;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2001.02.05.16.10.06;	author corinna;	state Exp;
branches;
next	1.9;

1.9
date	2000.10.31.22.20.59;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2000.09.03.04.16.35;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.22.05.10.20;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.22.03.58.47;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.02.16.28.17;	author dj;	state Exp;
branches;
next	1.4;

1.4
date	2000.07.23.19.33.44;	author corinna;	state Exp;
branches;
next	1.3;

1.3
date	2000.07.17.19.18.21;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.05.12.18.34.50;	author corinna;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.74.2.1
date	2012.08.13.20.04.33;	author corinna;	state Exp;
branches;
next	1.74.2.2;

1.74.2.2
date	2012.10.16.15.18.38;	author corinna;	state Exp;
branches;
next	1.74.2.3;

1.74.2.3
date	2013.01.21.13.52.05;	author corinna;	state Exp;
branches;
next	1.74.2.4;

1.74.2.4
date	2013.02.12.11.24.35;	author corinna;	state Exp;
branches;
next	;

1.65.8.1
date	2007.11.12.15.30.19;	author corinna;	state Exp;
branches;
next	;

1.37.6.1
date	2004.01.21.19.17.55;	author cgf;	state Exp;
branches;
next	;

1.30.4.1
date	2002.12.28.16.56.16;	author cgf;	state Exp;
branches;
next	1.30.4.2;

1.30.4.2
date	2002.12.28.17.39.47;	author cgf;	state Exp;
branches;
next	;

1.30.6.1
date	2003.01.16.01.27.30;	author cgf;	state Exp;
branches;
next	1.30.6.2;

1.30.6.2
date	2003.02.14.03.03.28;	author cgf;	state Exp;
branches;
next	1.30.6.3;

1.30.6.3
date	2003.07.06.05.10.43;	author cgf;	state Exp;
branches;
next	1.30.6.4;

1.30.6.4
date	2003.08.27.20.19.55;	author cgf;	state Exp;
branches;
next	1.30.6.5;

1.30.6.5
date	2003.09.10.16.23.39;	author cgf;	state Exp;
branches;
next	;

1.16.2.1
date	2001.10.02.12.09.54;	author rbcollins;	state Exp;
branches;
next	1.16.2.2;

1.16.2.2
date	2002.01.04.03.56.08;	author rbcollins;	state Exp;
branches;
next	1.16.2.3;

1.16.2.3
date	2002.06.13.14.34.05;	author rbcollins;	state Exp;
branches;
next	1.16.2.4;

1.16.2.4
date	2002.07.02.10.58.18;	author scottc;	state Exp;
branches;
next	1.16.2.5;

1.16.2.5
date	2002.09.22.10.01.27;	author scottc;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.81
log
@	* devices.in (dev_storage): Map /dev/dsp to \Device\Null.
	* devices.cc: Regenerate.
	* fhandler_dsp.cc (fhandler_dev_dsp::open): Call fhandler_base::open.
	(fhandler_dev_dsp::close): Call fhandler_base::close.
	(fhandler_dev_dsp::fixup_after_fork): Call
	fhandler_base::fixup_after_fork.

	* fhandler_raw.cc (fhandler_dev_raw::fixup_after_fork): Call
	fhandler_base::fixup_after_fork.
@
text
@/* fhandler_raw.cc.  See fhandler.h for a description of the fhandler classes.

   Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2011,
   2012, 2013 Red Hat, Inc.

   This file is part of Cygwin.

   This software is a copyrighted work licensed under the terms of the
   Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
   details. */

#include "winsup.h"

#include <unistd.h>
#include <cygwin/rdevio.h>
#include <sys/mtio.h>
#include <sys/param.h>
#include "cygerrno.h"
#include "path.h"
#include "fhandler.h"

/**********************************************************************/
/* fhandler_dev_raw */

fhandler_dev_raw::fhandler_dev_raw ()
  : fhandler_base (),
    status ()
{
  need_fork_fixup (true);
}

fhandler_dev_raw::~fhandler_dev_raw ()
{
  if (devbufsiz > 1L)
    delete [] devbufalloc;
}

int __reg2
fhandler_dev_raw::fstat (struct stat *buf)
{
  debug_printf ("here");

  fhandler_base::fstat (buf);
  if (is_auto_device ())
    {
      if (get_major () == DEV_TAPE_MAJOR)
	buf->st_mode = S_IFCHR | STD_RBITS | STD_WBITS | S_IWGRP | S_IWOTH;
      else
	buf->st_mode = S_IFBLK | STD_RBITS | STD_WBITS | S_IWGRP | S_IWOTH;

      buf->st_uid = geteuid32 ();
      buf->st_gid = getegid32 ();
      buf->st_nlink = 1;
      buf->st_blksize = PREFERRED_IO_BLKSIZE;
      time_as_timestruc_t (&buf->st_ctim);
      buf->st_atim = buf->st_mtim = buf->st_birthtim = buf->st_ctim;
    }
  return 0;
}

int
fhandler_dev_raw::open (int flags, mode_t)
{
  /* Check for illegal flags. */
  if (get_major () != DEV_TAPE_MAJOR && (flags & O_APPEND))
    {
      set_errno (EINVAL);
      return 0;
    }

  /* Always open a raw device existing and binary. */
  flags &= ~(O_CREAT | O_TRUNC);
  flags |= O_BINARY;

  /* Write-only doesn't work well with raw devices */
  if ((flags & O_ACCMODE) == O_WRONLY)
    flags = ((flags & ~O_WRONLY) | O_RDWR);

  int res = fhandler_base::open (flags, 0);

  return res;
}

int
fhandler_dev_raw::dup (fhandler_base *child, int flags)
{
  int ret = fhandler_base::dup (child, flags);

  if (!ret)
    {
      fhandler_dev_raw *fhc = (fhandler_dev_raw *) child;

      if (devbufsiz > 1L)
	{
	  /* Create sector-aligned buffer */
	  fhc->devbufalloc = new char [devbufsiz + devbufalign];
	  fhc->devbuf = (char *) roundup2 ((uintptr_t) fhc->devbufalloc,
					   (uintptr_t) devbufalign);
	}
      fhc->devbufstart = 0;
      fhc->devbufend = 0;
      fhc->lastblk_to_read (false);
    }
  return ret;
}

void
fhandler_dev_raw::fixup_after_fork (HANDLE parent)
{
  fhandler_base::fixup_after_fork (parent);
  devbufstart = 0;
  devbufend = 0;
  lastblk_to_read (false);
}

void
fhandler_dev_raw::fixup_after_exec ()
{
  if (!close_on_exec ())
    {
      if (devbufsiz > 1L)
	{
	  /* Create sector-aligned buffer */
	  devbufalloc = new char [devbufsiz + devbufalign];
	  devbuf = (char *) roundup2 ((uintptr_t) devbufalloc,
				      (uintptr_t) devbufalign);
	}
      devbufstart = 0;
      devbufend = 0;
      lastblk_to_read (false);
    }
}

int
fhandler_dev_raw::ioctl (unsigned int cmd, void *buf)
{
  int ret = NO_ERROR;

  if (cmd == RDIOCDOP)
    {
      struct rdop *op = (struct rdop *) buf;

      if (!op)
	ret = ERROR_INVALID_PARAMETER;
      else
	switch (op->rd_op)
	  {
	  case RDSETBLK:
	    if (get_major () == DEV_TAPE_MAJOR)
	      {
		struct mtop mop;

		mop.mt_op = MTSETBLK;
		mop.mt_count = op->rd_parm;
		ret = ioctl (MTIOCTOP, &mop);
	      }
	    else if ((op->rd_parm <= 1 && get_major () != DEV_TAPE_MAJOR)
		     || (op->rd_parm > 1 && (op->rd_parm % devbufalign))
		     || (get_flags () & O_DIRECT))
	      /* The conditions for a valid parameter are:
		 - The new size is either 0 or 1, both indicating unbuffered
		   I/O, and the device is a tape device.
		 - Or, the new buffersize must be a multiple of the
		   required buffer alignment.
		 - In the O_DIRECT case, the whole request is invalid. */
	      ret = ERROR_INVALID_PARAMETER;
	    else if (!devbuf || op->rd_parm != devbufsiz)
	      {
		char *buf = NULL;
		off_t curpos = lseek (0, SEEK_CUR);

		if (op->rd_parm > 1L)
		  buf = new char [op->rd_parm + devbufalign];

		if (devbufsiz > 1L)
		  delete [] devbufalloc;

		devbufalloc = buf;
		devbuf = (char *) roundup2 ((uintptr_t) buf,
					    (uintptr_t) devbufalign);
		devbufsiz = op->rd_parm ?: 1L;
		devbufstart = devbufend = 0;
		lseek (curpos, SEEK_SET);
	      }
	    break;
	  default:
	    break;
	  }
    }
  else if (cmd == RDIOCGET)
    {
      struct rdget *get = (struct rdget *) buf;

      if (!get)
	ret = ERROR_INVALID_PARAMETER;
      else
	get->bufsiz = devbufsiz;
    }
  else
    return fhandler_base::ioctl (cmd, buf);

  if (ret != NO_ERROR)
    {
      SetLastError (ret);
      __seterrno ();
      return -1;
    }
  return 0;
}
@


1.80
log
@	* Merge in cygwin-64bit-branch.
@
text
@d108 1
a108 1
fhandler_dev_raw::fixup_after_fork (HANDLE)
d110 1
@


1.79
log
@Throughout, change __attribute__ ((regparm (N))) to just __regN.  Throughout,
(mainly in fhandler*) start fixing gcc 4.7.2 mismatch between regparm
definitions and declarations.
* gendef: Define some functions to take @@ declaration to accommodate _regN
defines which use __stdcall.
* gentls_offsets: Define __regN macros as empty.
* autoload.cc (wsock_init): Remove unneeded regparm attribute.
* winsup.h (__reg1): Define.
(__reg2): Define.
(__reg3): Define.
* advapi32.cc (DuplicateTokenEx): Coerce some initializers to avoid warnings
from gcc 4.7.2.
* exceptions.cc (status_info): Declare struct to use NTSTATUS.
(cygwin_exception::dump_exception): Coerce e->ExceptionCode to NTSTATUS.
* fhandler_clipboard.cc (cygnativeformat): Redefine as UINT to avoid gcc 4.7.2
warnings.
(fhandler_dev_clipboard::read): Ditto.
@
text
@d39 1
a39 1
fhandler_dev_raw::fstat (struct __stat64 *buf)
d98 1
a98 1
					   devbufalign);
d124 2
a125 1
	  devbuf = (char *) roundup2 ((uintptr_t) devbufalloc, devbufalign);
d169 1
a169 1
		_off64_t curpos = lseek (0, SEEK_CUR);
d178 2
a179 1
		devbuf = (char *) roundup2 ((uintptr_t) buf, devbufalign);
@


1.78
log
@	* fhandler_floppy.cc (fhandler_dev_floppy::lseek): Remove lloffset.
	Use offset directly.  Add shortcut for lseek(fd, 0, SEEK_CUR) case.
	(fhandler_dev_floppy::ioctl): Drop wrong RDSETBLK case.
	* fhandler_raw.cc (fhandler_dev_raw::ioctl): Revamp RDSETBLK code.
@
text
@d4 1
a4 1
   2012 Red Hat, Inc.
d38 1
a38 1
int __stdcall
@


1.77
log
@	* fhandler_raw.cc (fhandler_dev_raw::fhandler_dev_raw): Drop gratuitous
	initializing from previous patch.
@
text
@d14 1
d155 2
a156 3
	    else if ((devbuf && ((op->rd_parm <= 1 && (devbufend - devbufstart))
				 || op->rd_parm < devbufend - devbufstart))
		     || (op->rd_parm > 1 && (op->rd_parm % 512))
d158 5
a162 5
	      /* The conditions for a *valid* parameter are these:
		 - If there's still data in the current buffer, it must
		   fit in the new buffer.
		 - The new size is either 0 or 1, both indicating unbufferd
		   I/O, or the new buffersize must be a multiple of 512.
d168 2
d171 1
a171 8
		  buf = new char [op->rd_parm];
		if (buf && devbufsiz > 1L)
		  {
		    memcpy (buf, devbuf + devbufstart, devbufend - devbufstart);
		    devbufend -= devbufstart;
		  }
		else
		  devbufend = 0;
d176 2
a177 2
		devbufstart = 0;
		devbuf = buf;
d179 2
@


1.76
log
@	* fhandler.h (class fhandler_dev_raw): Add members devbufalloc and
	devbufalign.
	(class fhandler_dev_floppy): Remove member bytes_per_sector;
	* fhandler_floppy.cc (bytes_per_sector): Define as devbufalign.
	(fhandler_dev_floppy::open): Set devbufalign to a multiple of the
	sector size and handle devbuf allocation and alignment in !O_DIRECT
	case here.  Change comment accordingly.
	Call FSCTL_ALLOW_EXTENDED_DASD_IO for partitions as well.
	(fhandler_dev_floppy::raw_write): Fix comment.  Rewrite and fix
	writing behaviour when application uses read and lseek.
	(fhandler_dev_floppy::lseek): Use rounddown macro.  Call
	SetFilePointerEx rather than the old SetFilePointer.
	(fhandler_dev_floppy::ioctl): Reformat switch.  Call
	IOCTL_DISK_UPDATE_PROPERTIES rather than IOCTL_DISK_UPDATE_DRIVE_SIZE
	in BLKRRPART case.  Support BLKIOMIN, BLKIOOPT, BLKPBSZGET and
	BLKALIGNOFF.
	* fhandler_raw.cc (fhandler_dev_raw::fhandler_dev_raw): Initialize
	all devbuf-related members.
	(fhandler_dev_raw::~fhandler_dev_raw): Delete devbufalloc rather than
	devbuf.
	(fhandler_dev_raw::open): Drop allocating devbuf.
	(fhandler_dev_raw::dup): Allocate devbufalloc and set devbuf to support
	new sector-aligned devbuf handling.
	(fhandler_dev_raw::fixup_after_exec): Ditto.
	* fhandler_tape.cc (fhandler_dev_tape::open): Ditto, set devbufalign
	to 1.
	* include/cygwin/fs.h (BLKIOMIN): Define.
	(BLKIOOPT): Define.
	(BLKALIGNOFF): Define.
	(BLKPBSZGET): Define.
@
text
@a25 6
    devbufalloc (NULL),
    devbuf (NULL),
    devbufalign (0),
    devbufsiz (0),
    devbufstart (0),
    devbufend (0),
@


1.75
log
@	* fhandler_raw.cc (fhandler_dev_raw::open): Allow O_EXCL flag, as on
	Linux.
@
text
@d16 1
d25 8
a32 1
  : fhandler_base (), status ()
d40 1
a40 1
    delete [] devbuf;
a84 2
  if (res && devbufsiz > 1L)
    devbuf = new char [devbufsiz];
d99 6
a104 1
	fhc->devbuf = new char [devbufsiz];
d126 5
a130 1
	devbuf = new char [devbufsiz];
d185 1
a185 1
		  delete [] devbuf;
@


1.74
log
@update copyrights
@
text
@d3 2
a4 2
   Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2011
   Red Hat, Inc.
d62 1
a62 1
  if (get_major () != DEV_TAPE_MAJOR && (flags & (O_APPEND | O_EXCL)))
@


1.74.2.1
log
@	* include/cygwin/stat.h (struct __stat64): Drop entirely in favor of
	struct stat.  Accommodate throughout Cygwin.
	* include/cygwin/types.h: Throughout, drop current, internal types
	used since Cygwin 1.5 with the base type they have been used for.
	Throughout, define types based on bitsize-specific types where
	appropriate.  Accommodate throughout Cygwin.
	* include/sys/cygwin.h: Drop __uid32_t and __gid32_t in favor of
	uid_t and gid_t.  Define uid/gid types based on bitsize-specific types.
	(struct external_pinfo): Accommodate above change.
	* cygtls.h (struct _local_storage): Drop unused members grp and
	namearray,
	* tlsoffsets.h: Regenerate.
	* devices.h (_dev_t): Drop definition.  Use dev_t throughout instead.
	* devices.cc: Regenerate.

	Probably temporary patch to drop unneeded functionality on x86_64:
	* fcntl.cc (_fcntl): Alias to fcntl64 on x86_64.
	* glob.cc (CYGWIN_gl_stat): Simplify on x86_64.
	* grp.cc (grp32togrp16): Don't define on x86_64.
	(getgrgid): Alias to getgrgid32 on x86_64.
	(getgrnam): Alias to getgrnam32 on x86_64.
	(getgrent): Alias to getgrent32 on x86_64.
	(getgroups): Alias to getgroups32 on x86_64.
	(initgroups): Alias to initgroups32 on x86_64.
	(setgroups): Alias to setgroups32 on x86_64.
	* mmap.cc (mmap): Alias to mmap64 on x86_64.
	* passwd.cc (getpwuid): Alias to getpwuid32 on x86_64.
	(getpwuid_r): Alias to getpwuid_r32 on x86_64.
	(getpwduid): Don't define on x86_64.
	* syscalls.cc (lseek): Alias to lseek64 on x86_64.
	(_lseek): Alias to lseek64 on x86_64.
	(chown): Alias to chown32 on x86_64.
	(lchown): Alias to lchown32 on x86_64.
	(fchown): Alias to fchown32 on x86_64.
	(stat64_to_stat32): Don't define on x86_64.
	(fstat): Alias to fstat64 on x86_64.
	(_fstat_r): Alias to _fstat64_r on x86_64.
	(stat): Alias to stat64 on x86_64.
	(_stat_r): Alias to _stat64_r on x86_64.
	(lstat): Alias to lstat64 on x86_64.
	(ftruncate): Alias to ftruncate64 on x86_64.
	(truncate): Alias to truncate64 on x86_64.
	(seteuid): Alias to seteuid32 on x86_64.
	(setuid): Alias to setuid32 on x86_64.
	(setreuid): Alias to setreuid32 on x86_64.
	(setegid): Alias to setegid32 on x86_64.
	(setgid): Alias to setgid32 on x86_64.
	(setregid): Alias to setregid32 on x86_64.
	* uinfo.cc (getuid): Alias to getuid32 on x86_64.
	(getgid): Alias to getgid32 on x86_64.
	(geteuid): Alias to geteuid32 on x86_64.
	(getegid): Alias to getegid32 on x86_64.
	* winsup.h (ILLEGAL_UID16): Don't define on x86_64.
	(ILLEGAL_GID16): Ditto.
	(uid16touid32): Don't declare on x86_64.
	(gid16togid32): Don't declare on x86_64.
@
text
@d36 1
a36 1
fhandler_dev_raw::fstat (struct stat *buf)
@


1.74.2.2
log
@	Pull in changes from HEAD
	ChangeLog.64bit: New file.
@
text
@d3 2
a4 2
   Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2011,
   2012 Red Hat, Inc.
a13 1
#include <unistd.h>
a15 1
#include <sys/param.h>
d24 1
a24 2
  : fhandler_base (),
    status ()
d32 1
a32 1
    delete [] devbufalloc;
d62 1
a62 1
  if (get_major () != DEV_TAPE_MAJOR && (flags & O_APPEND))
d77 2
d93 1
a93 6
	{
	  /* Create sector-aligned buffer */
	  fhc->devbufalloc = new char [devbufsiz + devbufalign];
	  fhc->devbuf = (char *) roundup2 ((uintptr_t) fhc->devbufalloc,
					   devbufalign);
	}
d115 1
a115 5
	{
	  /* Create sector-aligned buffer */
	  devbufalloc = new char [devbufsiz + devbufalign];
	  devbuf = (char *) roundup2 ((uintptr_t) devbufalloc, devbufalign);
	}
d145 3
a147 2
	    else if ((op->rd_parm <= 1 && get_major () != DEV_TAPE_MAJOR)
		     || (op->rd_parm > 1 && (op->rd_parm % devbufalign))
d149 5
a153 5
	      /* The conditions for a valid parameter are:
		 - The new size is either 0 or 1, both indicating unbuffered
		   I/O, and the device is a tape device.
		 - Or, the new buffersize must be a multiple of the
		   required buffer alignment.
a158 2
		off_t curpos = lseek (0, SEEK_CUR);

d160 8
a167 1
		  buf = new char [op->rd_parm + devbufalign];
d170 1
a170 1
		  delete [] devbufalloc;
d172 2
a173 2
		devbufalloc = buf;
		devbuf = (char *) roundup2 ((uintptr_t) buf, devbufalign);
a174 2
		devbufstart = devbufend = 0;
		lseek (curpos, SEEK_SET);
@


1.74.2.3
log
@Pull in changes from HEAD
@
text
@d4 1
a4 1
   2012, 2013 Red Hat, Inc.
d38 1
a38 1
int __reg2
@


1.74.2.4
log
@	* fhandler_floppy.cc (fhandler_dev_floppy::open): Cast second parameter
	in roundup2 to same size as first parameter to make sure mask size is
	correct.
	* fhandler_process.cc (format_process_maps): Ditto.
	* fhandler_raw.cc (fhandler_dev_raw::dup): Ditto.
	* hookapi.cc (find_first_notloaded_dll): Add cast.
	* spawn.cc (av::fixup): Ditto.
	* wincap.h: Add comment to explain the folowing change.
	(wincapc::page_size): Return size_t.
	(wincapc::allocation_granularity): Ditto.

	* mmap.cc: Throughout, accommodate the fact that AT_ROUND_TO_PAGE isn't
	support on 64 bit at all.
	(class mmap_allocator): New class to allocate mmap slots on x86_64.
	(mmap_alloc): Define global instant of mmap_allocator.
	(mmap64): Call mmap_alloc.alloc on x86_64.
@
text
@d98 1
a98 1
					   (uintptr_t) devbufalign);
d124 1
a124 2
	  devbuf = (char *) roundup2 ((uintptr_t) devbufalloc,
				      (uintptr_t) devbufalign);
d177 1
a177 2
		devbuf = (char *) roundup2 ((uintptr_t) buf,
					    (uintptr_t) devbufalign);
@


1.73
log
@* cygerrno.h (__set_errno): Modify debugging output to make searching strace
logs easier.  Throughout, change /dev/tty* to /dev/pty*.  Throughout, add flags
argument to fhandler_*::dup methods.
* devices.in: Rename (temporarily?) /dev/ttyN to /dev/ptyN.  Add /dev/ptymN
devices for pty masters.
* devices.cc: Regenerate.
* devices.h (MAX_CONSOLES): Set to max number supported by devices.in.
(fh_devices::FH_PTMX): Rename from FH_PTYM.
(device::operator int): Return by reference.
* dtable.cc (fh_alloc): Take pc as an argument rather than just the device.
This makes debugging easier since more information is available.  Actually
implement handling for already-allocated pty master devices.  Make different
decisions when generating fhandler for not-opened devices.  Add kludge to deal
with opening /dev/tty.
(cnew_no_ctor): New macro.
(build_fh_pc): Make debugging output more verbose.  Use new clone() fhandler
interface to duplicate archetypes.  Reset last term opened.
(dtable::dup_worker): Use Use new clone() fhandler interface to duplicate
archetypes.  Pass flags to child dup handler.
(dtable::dup3): Set O_NOCTTY flag if newfd is not stdin/stdout/stderr.
* fhandler.cc (fhandler_base::reset): Rename from operator =() and reduce
functionality and sense of copy direction.
(fhandler_base::open_with_arch): Use published interface to query io_handle().
Use new copyto() fhandler method to copy from/to found archetype.
* fhandler.h: Throughout, delete size(), add copyout, clone, and fhandler_*
(void *) methods.
(fhandler_base::reset): Rename from operator =().
(fhandler_termios::is_dev_tty): Delete.
(fhandler_termios): change "protected" region to "private".
(fhandler_termios::is_dev_tty): Delete.
(fhandler_termios): Rearrange protected/public.
(fhandler_termios::fhandler_termios): Remember last fhandler_termios "opened".
(fhandler_termios::~fhandler_termios): Forget last fhandler_termios opened.
(ioctl): Rename from ioctl_termios.  Take a void * argument.  Reflect argument
change in pinfo::set_ctty.
(fhandler_console::dup): Declare new function.  Set ctty here if appropriate.
(fhandler_pty_master::from_master): Privatize.
(fhandler_pty_master::to_master): Ditto.
(fhandler_pty_master::dwProcessId): Ditto.
(fhandler_pty_master::fhandler_pty_master): Add an `int' argument.
(fhandler_pty_master::open_setup): Declare new function.
(fhandler_pty_master::~fhandler_pty_master): Declare new method.
(fhandler_nodevice): Remove commented out function declaration.
* fhandler_console.cc: Use get_ttyp() instead of tc() throughout.
(fhandler_console::dup): Define new function to set controlling ctty on dup, as
appropriate.
(fhandler_console::ioctl): Reflect ioctl_termios name change.
(fhandler_console::setup): Rename from get_tty_stuff.
(fhandler_console::open_setup): Reflect argument change in pinfo::set_ctty.
(fhandler_console::fhandler_console): Set _tc here.
* fhandler_termios.cc (handler_termios::ioctl): Rename.  Take a void * arg like
other ioctl functions.
* fhandler_tty.cc (fhandler_pty_slave::dup): Call myself->set_ctty to
potentially reset the controlling terminal.
(fhandler_pty_slave::ioctl): Reflect name/arg change for ioctl_termios.
(fhandler_pty_slave::fhandler_pty_slave): Take a "unit" argument.  Call setup()
here so that we will know the unit number of this fhandler as soon as possible.
Set the unit as appropriate.
(handler_pty_master::open): Move most stuff to constructor and open_setup.
(handler_pty_slave::open_setup): Reflect argument change in pinfo::set_ctty.
(handler_pty_master::open_setup): Define new function.
(fhandler_pty_master::cleanup): Clear handles as a flag that the destructor
does not have to do "close" operations.
(fhandler_pty_master::close): Ditto.
(fhandler_pty_master::~fhandler_pty_master): Define new method.
(fhandler_pty_master::ioctl): Reflect name/arg change for ioctl_termios.
(fhandler_pty_master::setup): Allocate tty here.  Rely on handles being
returned from allocated test rather than opening them here.  Avoid setting
_need_nl here since it is already zeroed in the constructor.  Set up device
information with DEV_TTYM_MAJOR.
* path.h (path_conv &operator =): Take a const argument.
(path_conv::dup): Ditto.
(pathconv_arg::PC_OPEN): New enum.
(pathconv_arg::PC_CTTY): Ditto.
(path_types::PATH_CTTY): Ditto.
(path_types::PATH_OPEN): Ditto.
(path_conv::isopen): New method.
(path_conv::isctty_capable): Ditto.
* path.cc (path_conv::check): Set PATH_OPEN and PATH_CTTY as appropriate.
* pipe.cc (fhandler_pipe::open): Use copyto to copy pipe handle.
* syscall.cc (open): Reinstate fd > 2 check to disallow resetting ctty on
non-std* handles.
* tty.cc (tty_list::allocate): Pass out handles for allocated tty.  use
`not_allocated' to find unallocated ttys.  Avoid keeping the lock since the
allocation of the tty should be sufficient to prevent multiple access.
(tty::not_allocated): Clarify comment.  Rename.  Return handles when an unused
tty is found.  Simply test for existing tty.
(tty::exists): Rewrite to use `not_allocated'.
* tty.h (NTTYS): Reset down to actual number supported by devices.in.
(tty::not_allocated): Declare new function.
(tty_list::allocate): Pass out read/write tty handles.  Zero them when not
found.
* fhandler_proc.cc: Reflect name change from FH_PTYM -> FH_PTMX.
* pinfo.h (pinfo::set_ctty): Reduce/reorder arguments passed in.
* pinfo.cc (pinfo::set_ctty): Ditto.  Just use tc() built into the passed-in
fhandler_termios pointer.  Return true if ctty is assigned.
* syscalls.cc (open): Call build_fh_pc with PC_OPEN flag.  Set PC_CTTY if
appropriate.
(stat_worker): Remove is_dev_tty () stuff.
@
text
@d3 1
a3 1
   Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009
@


1.72
log
@	* fhandler.h (class fhandler_dev_mem): Remove dup method declaration.
	* fhandler_clipboard.cc (fhandler_dev_clipboard::dup): Accommodate the
	fact that the entire fhandler gets copied over to the child in
	operator =.
	* fhandler_floppy.cc (fhandler_dev_floppy::dup): Ditto.
	* fhandler_raw.cc (fhandler_dev_raw::dup): Ditto.
	* fhandler_serial.cc (fhandler_serial::dup): Ditto.
	* fhandler_socket.cc (fhandler_socket::dup): Ditto.
	* fhandler_virtual.cc (fhandler_virtual::dup): Ditto.
	* fhandler_mem.cc (fhandler_dev_mem::dup): Ditto.  Remove entirely.
@
text
@d84 1
a84 1
fhandler_dev_raw::dup (fhandler_base *child)
d86 1
a86 1
  int ret = fhandler_base::dup (child);
@


1.71
log
@whitespace elimination
@
text
@a91 1
      fhc->devbufsiz = devbufsiz;
@


1.70
log
@Remove unneeded header files from source files throughout.  Update copyrights
where appropriate.
* globals.cc: New file for generic global variables.
* mkglobals_h: New file to generate globals.h.
* mkstatic: New Script used to build a (currently non-working) static
libcygwin_s.a.
* Makefile.in: Add unused rule to build a non-working libcygwin_s.a.
(DLL_OFILES): Add globals.o.  Make all objects rely on globals.h.
(globals.h): New target.  Generate globals.h.
* cygtls.h: Honor new CYGTLS_HANDLE define to control when the HANDLE operator
is allowed in _cygtls.
* dcrt0.cc: Move most globals to globals.cc.
* init.cc: Ditto.
* environ.cc (strip_title_path): Remove now-unneeded extern.
* fhandler_serial.cc (fhandler_serial::open): Ditto.
* pinfo.cc: Ditto.
(commune_process): Ditto.
* shared.cc: Ditto.
* glob.cc: Ditto.
* strace.cc: Ditto.
* exceptions.cc: Define CYGTLS_HANDLE before including winsup.h.
* path.cc (stat_suffixes): Move here.
* security.h: Add forward class path_conv declaration.
* smallprint.cc (__small_vsprintf): Make a true c++ function.
(__small_sprintf): Ditto.
(small_printf): Ditto.
(console_printf): Ditto.
(__small_vswprintf): Ditto.
(__small_swprintf): Ditto.
* spawn.cc (spawn_guts): Remove _stdcall decoration in favor of regparm.
(hExeced): Move to globals.cc
* strfuncs.cc (current_codepage): Ditto.
(active_codepage): Ditto.
* sync.cc (lock_process::locker): Move here from dcrt0.cc.
* syscalls.cc (stat_suffixes): Move to path.cc.
* tty.cc (tty::create_master): Uncapitalize fatal warning for consistency.
* winsup.h: Include globals.h to declare most of the grab bag list of globals
which were previously defined here.
* mount.h: Move USER_* defines back to shared_info.h.
* speclib: Force temporary directory cleanup.
@
text
@d151 1
a151 1
	         - If there's still data in the current buffer, it must
@


1.69
log
@Remove unneeded header files from source files throughout.
@
text
@d3 2
a4 1
   Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007 Red Hat, Inc.
a16 1
#include "security.h"
@


1.68
log
@	* fhandler_mailslot.cc (fhandler_mailslot::fstat): Set new stat member
	st_birthtim to useful value.
	* fhandler_process.cc (fhandler_process::fstat): Ditto.
	* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Take
	additional parameter for creation time.  Fill st_birthtim with it.
	Accomodate additional creation time parameter throughout.
	* fhandler_raw.cc (fhandler_dev_raw::fstat): Set new stat member
	st_birthtim to useful value.
	* fhandler.cc (fhandler_base::fstat): Ditto.
	* fhandler_registry.cc (fhandler_registry::fstat): Ditto.
	* include/cygwin/version.h: Bump API minor number.
	* include/cygwin/stat.h (struct __stat64): Replace st_spare4 with
	timestruc_t st_birthtim.
	(struct stat): Ditto if __CYGWIN_USE_BIG_TYPES__ is defined.
	(st_birthtime): Define if __CYGWIN_USE_BIG_TYPES__ is defined.
@
text
@a11 2
#include <sys/termios.h>
#include <unistd.h>
a14 1
#include <ntdef.h>
a15 1
#include "perprocess.h"
a18 3
#include "dtable.h"
#include "cygheap.h"
#include "ntdll.h"
@


1.67
log
@	* exceptions.cc (dummy_ctrl_c_handler): Remove.
	(init_console_handler): Drop has_null_console_handler_routine checks.
	* fhandler_raw.cc (fhandler_dev_raw::open): Drop has_raw_devices check.
	* fhandler_serial.cc (fhandler_serial::open): Drop
	.supports_reading_modem_output_lines check.
	* miscfuncs.cc (low_priority_sleep): Drop has_switch_to_thread check.
	* shared.cc (open_shared): Drop needs_memory_protection checks.
	* spawn.cc (spawn_guts): Drop start_proc_suspended check.
	* uname.cc (uname): Drop has_valid_processorlevel check.
	* wincap.cc: Remove has_raw_devices, has_valid_processorlevel,
	supports_reading_modem_output_lines, needs_memory_protection,
	has_switch_to_thread, start_proc_suspended and
	has_null_console_handler_routine throughout.
	* wincap.h: Ditto.
@
text
@d60 1
a60 1
      buf->st_atim = buf->st_mtim = buf->st_ctim;
@


1.66
log
@	* fhandler.h (PREFERRED_IO_BLKSIZE): Define as 64K.
	* fhandler.cc (fhandler_base::fstat): Set st_blksize to
	PREFERRED_IO_BLKSIZE.
	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Ditto.
	* fhandler_mailslot.cc (fhandler_mailslot::fstat): Ditto.
	* fhandler_raw.cc (fhandler_dev_raw::fstat): Ditto.
@
text
@a67 7
  if (!wincap.has_raw_devices ())
    {
      set_errno (ENOENT);
      debug_printf ("%s is accessible under NT/W2K only", get_win32_name ());
      return 0;
    }

@


1.65
log
@	* fhandler.cc (ACCFLAGS): Remove macro.
	(fhandler_base::get_default_fmode): Use O_ACCMODE instead of ACCFLAGS
	and or'ed read/write flags.
	(fhandler_base::open_9x): Use O_ACCMODE instead of or'ed read/write
	flags.
	(fhandler_base::open): Ditto.
	* fhandler_disk_file.cc (fhandler_base::open_fs): Ditto.
	* fhandler_mem.cc (fhandler_dev_mem::open): Ditto.
	* fhandler_raw.cc (fhandler_dev_raw::open): Ditto.
@
text
@d3 1
a3 1
   Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005 Red Hat, Inc.
d58 1
a58 1
      buf->st_blksize = S_BLKSIZE;
@


1.65.8.1
log
@2007-11-08  Christopher Faylor  <me+cygwin@@cgf.cx>

	* dllfixdbg: Eliminate extra objcopy step.

2007-11-07  Pedro Alves  <pedro_alves@@portugalmail.pt>

	* dllfixdbg: Pass --only-keep-debug to objcopy, instead of
	selecting the sections manually.

2007-11-06  Corinna Vinschen  <corinna@@vinschen.de>

	* thread.cc (pthread_key_create): Drop check for incoming valid object.

2007-11-06  Corinna Vinschen  <corinna@@vinschen.de>

	* shm.cc: Include sync.h
	(struct shm_shmid_list): Add ref_count member.
	(struct shm_attached_list): Remove hdl and size members.  Add a parent
	member pointing to referenced shm_shmid_list entry.
	(shm_guard): New muto.
	(SLIST_LOCK): Define.
	(SLIST_UNLOCK): Define.
	(fixup_shms_after_fork): Use hdl and size members of parent
	shm_shmid_list entry.
	(shmat): Access sequential bookkeeping lists in a thread safe way.
	Accommodate change in list element layout.  Align comments.
	(shmctl): Ditto.
	(shmdt): Ditto.
	(shmget): Ditto.

2007-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* shm.cc (shmctl): On IPC_RMID don't unmap views and don't close handle
	if the map is still referenced to emulate Linux and BSD behaviour.

2007-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* shm.cc (shmctl): On IPC_RMID also unmap all views on shared mem
	as well as connected shm_attached_list entry.

2007-10-30  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Don't remove
	write bits for directories with R/O attribute.
	(fhandler_base::fhaccess): Don't shortcircuit R/O attribute with W_OK
	scenarios for directories.

2007-09-26  Corinna Vinschen  <corinna@@vinschen.de>

	* termios.cc (setspeed): Support new baud rates introduced 2007-02-05.

2007-09-18  Corinna Vinschen  <corinna@@vinschen.de>

	* mmap.cc (fh_disk_file): Delete as global static variable and...
	(mmap64): ...define as local pointer to make mmap thread-safe.
	Accommodate throughout.  Only initialize fh_disk_file after file could
	be opened with GENERIC_EXECUTE access.

2007-09-06  Brian Dessent  <brian@@dessent.net>

	* include/sys/stdio.h (_flockfile): Don't try to lock a FILE
	that has the __SSTR flag set.
	(_ftrylockfile): Likewise.
	(_funlockfile): Likewise.

2007-08-24  Corinna Vinschen  <corinna@@vinschen.de>

	* syscalls.cc (open): Don't follow symlinks if O_EXCL is given.

2007-08-09  Ernie Coskrey  <Ernie.Coskrey@@steeleye.com>

	* gendef (sigbe): Reset "incyg" while the stack lock is active to avoid
	a potential race.

2007-08-01  Corinna Vinschen  <corinna@@vinschen.de>

	* localtime.cc (tzsetwall): Don't set TZ.

2007-07-17  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.cc (fhandler_base::fhaccess): Add check for R/O file system.

2007-07-14  Christopher Faylor  <me+cygwin@@cgf.cx>

	* init.cc (in_dllentry): Delete.
	(dll_entry): Remove assignment to deleted variable.
	* winsup.h (in_dllentry): Delete declaration.
	* exceptions.cc (inside_kernel): Use another method to see if we are in
	dll_entry phase.

2007-07-14  Christopher Faylor  <me+cygwin@@cgf.cx>

	* init.cc (in_dllentry): Make NO_COPY to avoid spurious false positives.

2007-07-09  Christopher Faylor  <me+cygwin@@cgf.cx>

	* dlfcn.cc (dlclose): Don't close handle returned from
	GetModuleHandle(NULL).

2007-07-06  Corinna Vinschen  <corinna@@vinschen.de>

	* times.cc (gettimeofday): Align definition to POSIX.

2007-07-04  Corinna Vinschen  <corinna@@vinschen.de>

	* times.cc: Define __timezonefunc__ before including time.h to protect
	definition of timezone function.

2007-07-04  Corinna Vinschen  <corinna@@vinschen.de>

	* include/cygwin/time.h: Switch to timezone variable by default.  Add
	comment.

2007-06-27  Corinna Vinschen  <corinna@@vinschen.de>

	* shared_info.h (SHARED_INFO_CB): Accommodate change to shared_info.
	(CURR_SHARED_MAGIC): Ditto.
	(class shared_info): Add heap_slop_inited member.
	* shared.cc (shared_info::heap_slop_size): Use heap_slop_inited to
	track initializing heap_slop since 0 is a valid value for heap_slop.
	Drop useless < 0 consideration.

2007-06-12  Christopher Faylor  <me+cygwin@@cgf.cx>

	* signal.cc (usleep): Use useconds_t for the type as per POSIX.

2007-06-12  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.cc (fhandler_base::fstat): Set pipe permission bits more
	correctly.

2007-05-29  Corinna Vinschen  <corinna@@vinschen.de>

	* dtable.cc (dtable::set_file_pointers_for_exec): Call SetFilePointer
	correctly for 64 bit file access.  Comment out functionality.
	* fhandler.cc (fhandler_base::open): Don't set append_mode.
	(fhandler_base::write): Check for O_APPEND instead of append_mode.
	Call SetFilePointer correctly for 64 bit file access.  Handle
	errors from SetFilePointer.
	* fhandler.h (class fhandler_base): Drop append_mode status flag.
	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Handle
	seeking correctly for 64 bit file access.

2007-05-21  Christian Franke <franke@@computer.org>

	* fhandler_floppy.cc (fhandler_dev_floppy::lseek): Don't invalidate
	devbuf if new position is within buffered range.

2007-05-21  Eric Blake  <ebb9@@byu.net>

	* include/search.h (hsearch_r): Provide declaration.

2007-05-21  Christian Franke <franke@@computer.org>
	     Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_floppy.cc (fhandler_dev_floppy::lseek): Set buf size to
	sector size.  Simplify non-sector aligned case.  Handle errors from
	raw_read.

2007-05-15  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_socket.cc (adjust_socket_file_mode): New inline function.
	(fhandler_socket::fchmod): Squeeze mode through adjust_socket_file_mode
	before using it.
	(fhandler_socket::bind): Ditto.

2007-04-18  Brian Dessent  <brian@@dessent.net>

	* cygwin.sc: Remove duplicated .debug_macinfo section.
	* dllfixdbg: Also copy DWARF-2 sections into .dbg file.

2007-04-06  Eric Blake  <ebb9@@byu.net>

	* include/stdint.h (WINT_MIN): Fix sign.

2007-04-04  Eric Blake  <ebb9@@byu.net>

	* include/stdint.h (WINT_MIN, WINT_MAX): Fix definition.

2007-03-28  Christopher Faylor  <me@@cgf.cx>

	* spawn.cc (spawn_guts): Start pure-windows processes in a suspended
	state to avoid potential DuplicateHandle problems.

2007-03-07  Christopher Faylor  <me@@cgf.cx>

	* signal.cc (handle_sigprocmask): Remove extraneous
	sig_dispatch_pending.

2007-02-26  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.cc (fhandler_base::fstat): Set all file times to arbitrary
	fixed value.

2007-02-20  Christopher Faylor  <me@@cgf.cx>

	* exceptions.cc (_cygtls::signal_exit): Only call myself.exit when when
	exit_state indicates that we've visited do_exit.
	* sync.h (lock_process::lock_process): Use renamed exit_state -
	ES_PROCESS_LOCKED.
	* winsup.h: Rename ES_MUTO_SET to ES_PROCESS_LOCKED.

2007-02-20  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_socket.cc (fhandler_socket::bind): Remove printing wrong
	errno in debug output.

2007-02-05  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_serial.cc (fhandler_serial::tcsetattr): Add support for
	baud rates up to 3000000 baud.  Add missing 128K and 256K cases.
	(fhandler_serial::tcgetattr): Ditto.
	* include/sys/termios.h: Add baud rate definitions from B460800 up to
	B3000000.

2007-01-04  Brian Ford  <Brian.Ford@@FlightSafety.com>
	     Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.h (PREFERRED_IO_BLKSIZE): Define as 64K.
	* fhandler.cc (fhandler_base::fstat): Set st_blksize to
	PREFERRED_IO_BLKSIZE.
	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Ditto.
	* fhandler_mailslot.cc (fhandler_mailslot::fstat): Ditto.
	* fhandler_raw.cc (fhandler_dev_raw::fstat): Ditto.

2006-11-08  Corinna Vinschen  <corinna@@vinschen.de>

	* security.cc (get_token_group_sidlist): Always add the local
	group to the token.

2006-07-14  Corinna Vinschen  <corinna@@vinschen.de>

	* security.cc (get_token_group_sidlist): Always add the interactive
	group to the token.  Create logon_id group SID by copying it from
	incoming group list.
@
text
@d3 1
a3 1
   Copyright 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007 Red Hat, Inc.
d58 1
a58 1
      buf->st_blksize = PREFERRED_IO_BLKSIZE;
@


1.64
log
@	* fhandler.cc (fhandler_base::open_9x): Handle O_SYNC and O_DIRECT
	flags.
	(fhandler_base::open): Ditto.
	* fhandler_floppy.cc (fhandler_dev_floppy::open): Don't allocate devbuf
	in O_DIRECT case.
	* fhandler_raw.cc (fhandler_dev_raw::ioctl): Don't allow buffer
	changes in O_DIRECT case.  Allow returning a buffer size 0, which
	indicates O_DIRECT.
	* fhandler_tape.cc (fhandler_dev_tape::open): Use O_SYNC flag to
	hand down the !buffer_writes case.  Don't allocate devbuf in O_DIRECT
	case.
	(fhandler_dev_tape::raw_read): Don't mess with devbuf if it's NULL.
	* include/fcntl.h: Define _FDIRECT, O_DIRECT, O_DSYNC and O_RSYNC.
	* include/cygwin/version.h: Bump API minor version.
@
text
@d87 1
a87 1
  if ((flags & (O_RDONLY | O_WRONLY | O_RDWR)) == O_WRONLY)
@


1.63
log
@	* fhandler_raw.cc (fhandler_dev_raw::ioctl): Only allow 0, 1 or a
	multiple of 512 as new buffersize.
@
text
@d162 2
a163 1
		     || (op->rd_parm > 1 && (op->rd_parm % 512)))
d168 2
a169 1
		   I/O, or the new buffersize must be a multiple of 512. */
d203 1
a203 1
	get->bufsiz = devbufsiz ?: 1L;
@


1.62
log
@	* fhandler_raw.cc (fhandler_dev_raw::ioctl): Fix INVALID_PARAMETER
	condition.  Only copy devbuf to buf if buf is non-NULL.
@
text
@d160 8
a167 2
	    else if (devbuf && ((op->rd_parm <= 1 && (devbufend - devbufstart))
				|| op->rd_parm < devbufend - devbufstart))
@


1.61
log
@	* fhandler_raw.cc (fhandler_dev_raw::ioctl): Fix setting devbuf
	when rd_parm is 0 or 1.
@
text
@d160 2
a161 1
	    else if (devbuf && op->rd_parm < devbufend - devbufstart)
d168 1
a168 1
		if (devbufsiz > 1L)
a171 1
		    delete [] devbuf;
d176 3
@


1.60
log
@* cygheap.h (init_cygheap::manage_console_count): Declare new function.
(init_cygheap::console_count): Renamed from open_fhs.  Make private.
* cygheap.cc (init_cygheap::manage_console_count): Define new function.
* dtable.cc (dtable::fixup_after_exec): Always call fixup_after_exec on
elements of fd even when they are about to be closed.
* fhandler.h (report_tty_counts): Remove open_fhs from debugging output.
* fhandler_console.cc (fhandler_console::open): Use manage_console_count rather
than manipulating count directly.
(fhandler_console::close): Ditto.
(fhandler_console::fixup_after_fork): Ditto.
(fhandler_console::fixup_after_exec): Ditto.  Don't close handles if
close_on_exec.
* fhandler_tty.cc (fhandler_tty_slave::open): Use manage_console_count() rather
than manipulating count directly.  Reflect change in arguments to
report_tty_counts().
(fhandler_tty_slave::close): Ditto for both.
(fhandler_tty_slave::dup): Ditto for both.
(fhandler_tty_slave::ioctl): Use myctty() rather than raw ctty #.
(fhandler_tty_slave::fixup_after_fork): Reflect change in arguments to
report_tty_counts().
(fhandler_tty_master::init_console): Use manage_console_count() rather than
manipulating count directly.
* fhandler_clipboard.cc (fhandler_dev_clipboard::fixup_after_exec): Don't
perform any operations if close_on_exec.
* fhandler_dsp.cc (fhandler_dev_dsp::fixup_after_exec): Ditto.
* fhandler_raw.cc (fhandler_dev_raw::fixup_after_exec): Ditto.
* fhandler_serial.cc (fhandler_serial::fixup_after_exec): Ditto.
* pinfo.h (_pinfo::_ctty): Declare new function.
(myctty): Declare new macro.
(__ctty): Declare new macro.
* pinfo.cc (_pinfo::_ctty): Define new function.
(_pinfo::set_ctty): Use manage_console_count() rather than manipulating count
directly.
* signal.cc (kill_pgrp): Use myctty() and __ctty() macros rather than raw ctty
#.
* syscalls.cc (setsid): Ditto.  Use manage_console_count() rather than
manipulating count directly.
@
text
@d164 3
a166 1
		char *buf = new char [op->rd_parm];
d178 1
a178 1
		devbufsiz = op->rd_parm;
d192 1
a192 1
	get->bufsiz = devbufsiz ? devbufsiz : 1L;
@


1.59
log
@	* fhandler.h (class fhandler_dev_raw): Delete current_position and
	eof_detected status flag.  Delete is_eom and is_eof methods.
	Move drive_size, bytes_per_sector, eom_detected status flag, as well
	as the methods read_file, write_file, raw_read and raw_write to ...
	(class fhandler_dev_floppy): ... here. Remove is_eom and is_eof
	methods.  Add dup method.
	* fhandler_floppy.cc (IS_EOM): New macro.
	(fhandler_dev_floppy::is_eom): Remove.
	(fhandler_dev_floppy::is_eof): Remove.
	(fhandler_dev_floppy::fhandler_dev_floppy): Initialize status flags.
	(fhandler_dev_floppy::get_drive_info): Only call EX functions on
	systems supporting them and stop suffering strange delays.
	(fhandler_dev_floppy::read_file): Move here, drop setting
	current_position.
	(fhandler_dev_floppy::write_file): Move here, drop setting
	current_position.
	(fhandler_dev_floppy::open): Rearrange comment.
	(fhandler_dev_floppy::dup): New method.
	(fhandler_dev_floppy::get_current_position): New inline method.  Use
	instead of former current_position were appropriate.
	(fhandler_dev_floppy::raw_read): Move here.  Drop EOF handling.
	(fhandler_dev_floppy::raw_write): Move here.  Drop EOF handling.
	(fhandler_dev_floppy::lseek): Remove useless conditions.  Convert
	sector_aligned_offset to LARGE_INTEGER to improve SetFilePointer call.
	(fhandler_dev_floppy::ioctl): Move blocksize check in RDSETBLK case
	to here.
	* fhandler_raw.cc (fhandler_dev_raw::is_eom): Remove.
	(fhandler_dev_raw::is_eof): Remove.
	(fhandler_dev_raw::write_file): Remove.
	(fhandler_dev_raw::read_file): Remove.
	(fhandler_dev_raw::raw_read): Remove.
	(fhandler_dev_raw::raw_write): Remove.
	(fhandler_dev_raw::dup): Drop copying removed members.
	(fhandler_dev_raw::ioctl): Drop blocksize testing.
	* wincap.h: Implement has_disk_ex_ioctls throughout.
	* wincap.cc: Ditto.
	(wincap_vista): Preliminary wincaps for Windows Vista/Longhorn.
	(wincapc::init): Add Vista/Longhorn handling.
@
text
@d127 8
a134 5
  if (devbufsiz > 1L)
    devbuf = new char [devbufsiz];
  devbufstart = 0;
  devbufend = 0;
  lastblk_to_read (false);
@


1.58
log
@	Revert erroneous checkin.
@
text
@a29 46
int
fhandler_dev_raw::is_eom (int win_error)
{
  return 0;
}

int
fhandler_dev_raw::is_eof (int)
{
  return 0;
}


/* Wrapper functions to simplify error handling. */

BOOL
fhandler_dev_raw::write_file (const void *buf, DWORD to_write,
			      DWORD *written, int *err)
{
  BOOL ret;

  *err = 0;
  if (!(ret = WriteFile (get_handle (), buf, to_write, written, 0)))
    *err = GetLastError ();
  else
    current_position += *written;
  syscall_printf ("%d (err %d) = WriteFile (%d, %d, write %d, written %d, 0)",
		  ret, *err, get_handle (), buf, to_write, *written);
  return ret;
}

BOOL
fhandler_dev_raw::read_file (void *buf, DWORD to_read, DWORD *read, int *err)
{
  BOOL ret;

  *err = 0;
  if (!(ret = ReadFile (get_handle (), buf, to_read, read, 0)))
    *err = GetLastError ();
  else
    current_position += *read;
  syscall_printf ("%d (err %d) = ReadFile (%d, %d, to_read %d, read %d, 0)",
		  ret, *err, get_handle (), buf, to_read, *read);
  return ret;
}

a96 180
void
fhandler_dev_raw::raw_read (void *ptr, size_t& ulen)
{
  DWORD bytes_read = 0;
  DWORD read2;
  DWORD bytes_to_read;
  int ret;
  size_t len = ulen;
  char *tgt;
  char *p = (char *) ptr;

  /* Checking a previous end of file */
  if (eof_detected () && !lastblk_to_read ())
    {
      eof_detected (false);
      ulen = 0;
      return;
    }

  /* Checking a previous end of media */
  if (eom_detected () && !lastblk_to_read ())
    {
      set_errno (ENOSPC);
      goto err;
    }

  if (devbuf)
    {
      while (len > 0)
	{
	  if (devbufstart < devbufend)
	    {
	      bytes_to_read = min (len, devbufend - devbufstart);
	      debug_printf ("read %d bytes from buffer (rest %d)",
			    bytes_to_read,
			    devbufend - devbufstart - bytes_to_read);
	      memcpy (p, devbuf + devbufstart, bytes_to_read);
	      len -= bytes_to_read;
	      p += bytes_to_read;
	      bytes_read += bytes_to_read;
	      devbufstart += bytes_to_read;

	      if (lastblk_to_read ())
		{
		  lastblk_to_read (false);
		  break;
		}
	    }
	  if (len > 0)
	    {
	      if (len >= devbufsiz)
		{
		  bytes_to_read = (len / bytes_per_sector) * bytes_per_sector;
		  if (current_position + bytes_to_read >= drive_size)
		    bytes_to_read = drive_size - current_position;
		  tgt = p;
		  debug_printf ("read %d bytes direct from file",bytes_to_read);
		}
	      else
		{
		  tgt = devbuf;
		  bytes_to_read = devbufsiz;
		  if (current_position + bytes_to_read >= drive_size)
		    bytes_to_read = drive_size - current_position;
		  debug_printf ("read %d bytes from file into buffer",
				bytes_to_read);
		}
	      if (!bytes_to_read)
		{
		  eom_detected (true);
		  break;
		}

	      if (!read_file (tgt, bytes_to_read, &read2, &ret))
		{
		  if (!is_eof (ret) && !is_eom (ret))
		    {
		      __seterrno ();
		      goto err;
		    }

		  if (is_eof (ret))
		    eof_detected (true);
		  else
		    eom_detected (true);

		  if (!read2)
		    {
		      if (!bytes_read && is_eom (ret))
			{
			  debug_printf ("return -1, set errno to ENOSPC");
			  set_errno (ENOSPC);
			  goto err;
			}
		      break;
		    }
		  lastblk_to_read (true);
		}
	      if (!read2)
	       break;
	      if (tgt == devbuf)
		{
		  devbufstart = 0;
		  devbufend = read2;
		}
	      else
		{
		  len -= read2;
		  p += read2;
		  bytes_read += read2;
		}
	    }
	}
    }
  else if (!read_file (p, len, &bytes_read, &ret))
    {
      if (!is_eof (ret) && !is_eom (ret))
	{
	  __seterrno ();
	  goto err;
	}
      if (bytes_read)
	{
	  if (is_eof (ret))
	    eof_detected (true);
	  else
	    eom_detected (true);
	}
      else if (is_eom (ret))
	{
	  debug_printf ("return -1, set errno to ENOSPC");
	  set_errno (ENOSPC);
	  goto err;
	}
    }

  ulen = (size_t) bytes_read;
  return;

err:
  ulen = (size_t) -1;
}

int
fhandler_dev_raw::raw_write (const void *ptr, size_t len)
{
  DWORD bytes_written = 0;
  char *p = (char *) ptr;
  int ret;

  /* Checking a previous end of media on tape */
  if (eom_detected ())
    {
      set_errno (ENOSPC);
      return -1;
    }

  /* Invalidate buffer. */
  devbufstart = devbufend = 0;

  if (len > 0)
    {
      if (!write_file (p, len, &bytes_written, &ret))
	{
	  if (!is_eom (ret))
	    {
	      __seterrno ();
	      return -1;
	    }
	  eom_detected (true);
	  if (!bytes_written)
	    {
	      set_errno (ENOSPC);
	      return -1;
	    }
	}
    }
  return bytes_written;
}

d102 1
a102 1
  if (! ret)
a105 3
      fhc->drive_size = drive_size;
      fhc->current_position = current_position;
      fhc->bytes_per_sector = bytes_per_sector;
a110 2
      fhc->eom_detected (eom_detected ());
      fhc->eof_detected (eof_detected ());
a156 2
	    else if (op->rd_parm % bytes_per_sector)
	      ret = ERROR_INVALID_PARAMETER;
@


1.57
log
@	* fhandler.h (class fhandler_dev_raw): Delete current_position and
	eof_detected status flag.  Delete is_eom and is_eof methods.
	Move drive_size, bytes_per_sector, eom_detected status flag, as well
	as the methods read_file, write_file, raw_read and raw_write to ...
	(class fhandler_dev_floppy): ... here. Remove is_eom and is_eof
	methods.  Add dup method.
	* fhandler_floppy.cc (IS_EOM): New macro.
	(fhandler_dev_floppy::is_eom): Remove.
	(fhandler_dev_floppy::is_eof): Remove.
	(fhandler_dev_floppy::fhandler_dev_floppy): Initialize status flags.
	(fhandler_dev_floppy::get_drive_info): Only call EX functions on
	systems supporting them and stop suffering strange delays.
	(fhandler_dev_floppy::read_file): Move here, drop setting
	current_position.
	(fhandler_dev_floppy::write_file): Move here, drop setting
	current_position.
	(fhandler_dev_floppy::open): Rearrange comment.
	(fhandler_dev_floppy::dup): New method.
	(fhandler_dev_floppy::get_current_position): New inline method.  Use
	instead of former current_position were appropriate.
	(fhandler_dev_floppy::raw_read): Move here.  Drop EOF handling.
	(fhandler_dev_floppy::raw_write): Move here.  Drop EOF handling.
	(fhandler_dev_floppy::lseek): Remove useless conditions.  Convert
	sector_aligned_offset to LARGE_INTEGER to improve SetFilePointer call.
	(fhandler_dev_floppy::ioctl): Move blocksize check in RDSETBLK case
	to here.
	* fhandler_raw.cc (fhandler_dev_raw::is_eom): Remove.
	(fhandler_dev_raw::is_eof): Remove.
	(fhandler_dev_raw::write_file): Remove.
	(fhandler_dev_raw::read_file): Remove.
	(fhandler_dev_raw::raw_read): Remove.
	(fhandler_dev_raw::raw_write): Remove.
	(fhandler_dev_raw::dup): Drop copying removed members.
	(fhandler_dev_raw::ioctl): Drop blocksize testing.
	* wincap.h: Implement has_disk_ex_ioctls throughout.
	* wincap.cc: Ditto.
	(wincap_vista): Preliminary wincaps for Windows Vista/Longhorn.
	(wincapc::init): Add Vista/Longhorn handling.
@
text
@d324 1
a324 1
fhandler_dev_raw::dup (fhandler_base *child, HANDLE from_proc)
d326 1
a326 1
  int ret = fhandler_base::dup (child, from_proc);
d348 1
a348 1
fhandler_dev_raw::fixup_after_fork (HANDLE parent)
a349 1
  fhandler_base::fixup_after_fork (parent);
@


1.56
log
@	* fhandler.h (class fhandler_dev_raw): Add drive information members
	drive_size, current_position and bytes_per_sector.
	(fhandler_dev_floppy::get_drive_info): Declare.
	* fhandler_floppy.cc (fhandler_dev_floppy::is_eom): Define ERROR_SEEK
	and ERROR_SECTOR_NOT_FOUND as end-of-medium conditions.
	(fhandler_dev_floppy::get_drive_info): New method to have one function
	retrieving drive info.
	(fhandler_dev_floppy::open): Call get_drive_info to get drive
	information right from the start.
	(fhandler_dev_floppy::lseek): Use and set drive information members.
	Especially keep track of current_position.
	(fhandler_dev_floppy::ioctl): Ditto.
	* fhandler_raw.cc (fhandler_dev_raw::write_file): Keep track of
	current_position.
	(fhandler_dev_raw::read_file): Ditto.
	(fhandler_dev_raw::raw_read): Never try to read beyond end-of-medium.
	(fhandler_dev_raw::dup): Handle new drive information members.
@
text
@d324 1
a324 1
fhandler_dev_raw::dup (fhandler_base *child)
d326 1
a326 1
  int ret = fhandler_base::dup (child);
d348 1
a348 1
fhandler_dev_raw::fixup_after_fork (HANDLE)
d350 1
@


1.55
log
@Remove some more unneeded 'return;'s throughout.
@
text
@d54 2
d69 2
d195 3
a197 1
		  bytes_to_read = (len / 512) * 512;
d205 2
d210 6
d332 3
d388 1
a388 1
	    else if (op->rd_parm % 512)
@


1.54
log
@Change foo (void) to foo () for all c++ functions throughout.  Remove all
fhandler_*::dump functions throughout.
* fhandler.h (fhandler_dev_mem::close): Remove pass-through function in favor
of virtual method.
(handler_dev_raw::close): Ditto.
(fhandler_dev_clipboard::fixup_after_exec): New method.
* fhandler_dev_mem.cc (fhandler_dev_mem::close): Eliminate pass through
* fhandler_dev_raw.cc (fhandler_dev_raw::close): Ditto.
* fhandler_clipboard.cc (fhandler_dev_clipboard::close): Don't go to extra
effort when execing.
(fhandler_dev_clipboard::fixup_after_exec): New function.
* fhandler_console.cc (fhandler_console::close): Don't do "extra stuff" when we
know we're execing.
* fhandler_disk_file.cc (fhandler_disk_file::close): Ditto.
* fhandler_dsp.cc (fhandler_dev_dsp::close): Ditto.
* fhandler_fifo.cc (fhandler_fifo.cc::close): Ditto.  function in favor of base
function.
* fhandler_random.cc (fhandler_dev_random::close): Ditto.
* fhandler_registry.cc (fhandler_registry::close): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::close): Ditto.
* fhandler_virtual.cc (fhandler_virtual::close): Ditto.
* pinfo.cc (proc_waiter): Remove unneeded hExeced declaration.
* sigproc.cc: Ditto.
* winsup.h (hExeced): Define here.
* fhandler_virtual.cc (fhandler_virtual::fixup_after_exec): Just call close()
to reinitialize things to known state.
@
text
@a269 1
  return;
@


1.53
log
@* wininfo.h (wininfo::timer_active): Delete.
(wininfo::itv): Ditto.
(wininfo::start_time): Ditto.
(wininfo::window_started): Ditto.
(wininfo::getitimer): Ditto.
(wininfo::setitimer): Ditto.
(wininfo::wininfo): Ditto.
(wininfo::lock): New method.
(wininfo::release): Ditto.
* window.cc: Use new lock/acquire wininfo methods throughout.
(wininfo::wininfo): Delete
(wininfo::getitimer): Ditto.
(wininfo::setitimer): Ditto.
(getitimer): Ditto.
(setitimer): Ditto.
(ualarm): Ditto.
(alarm): Ditto.
(wininfo::lock): Define new function.
(wininfo::release): Ditto.
(wininfo::process): Delete WM_TIMER handling.
* timer.cc (struct timetracker): Delete it, flags.  Add it_interval,
interval_us, sleepto_us, running, init_muto(), syncthread, and gettime().
(ttstart): Make NO_COPY.
(lock_timer_tracker): New class.
(timer_tracker::timer_tracker): Distinguish ttstart case.
(timer_tracker::~timer_tracker): New destructor.  Clean out events, and reset
magic.
(timer_tracker::init_muto): New method.
(to_us): Round up as per POSIX.
(timer_thread): Reorganize to match timer_tracker::settime and
timer_tracker::gettime.  Call sig_send without wait.  Call auto_release.
(timer_tracker::settime): Reorganize logic to avoid race.  Call gettime to
recover old value.
(timer_tracker::gettime): New method.
(timer_create): Properly set errno on invalid timerid.  Use new
lock_timer_tracker method.
(timer_delete): Ditto.  Simplify code slightly.
(timer_gettime): New function.
(fixup_timers_after_fork): Reinit ttstart.
(getitimer): New implementation.
(setitimer): Ditto.
(ualarm): Ditto.
(alarm): Ditto.
* cygwin.din: Export timer_gettime.
* winsup.h: Remove has has_visible_window_station declaration.
* Makefile.in (DLL_OFILES): Add lsearch.o.
* cygthread.h (cygthread::notify_detached): New element.
(cygthread::cygthread): Take optional fourth argument signifying event to
signal on thread completion.
* cygthread.cc (cygthread::stub): Signal notify_detached event, if it exists.
(cygthread::cygthread): Initialize notify_detached from fourth argument.
(cygthread::detach): Wait for notify_detached field is present.
* lsearch.cc: New file.
* search.h: Ditto.
* include/cygwin/version.h: Bump API minor number to 126.
* cygwin.din: Export lsearch, lfind.
@
text
@d78 1
a78 1
fhandler_dev_raw::~fhandler_dev_raw (void)
a138 6
int
fhandler_dev_raw::close (void)
{
  return fhandler_base::close ();
}

@


1.52
log
@* sigproc.cc (_pinfo::set_ctty): Move function
* pinfo.cc (_pinfo::set_ctty): to here.
* fhandler_mem.cc (fhandler_dev_mem::fstat): Don't fill out structure if this
is an on-disk device rather than an "auto" device.
* fhandler_raw.cc (fhandler_dev_raw::fstat): Ditto.
* path.cc (normalize_posix_path): Don't treat a standalone '//' as introducing
a UNC path.
(normalize_win32_path): Ditto.
@
text
@d3 1
a3 1
   Copyright 1999, 2000, 2001, 2002, 2003, 2004 Red Hat, Inc.
@


1.51
log
@	* fhandler.h (class fhandler_dev_raw): Remove is_writing flag.
	Remove declaration of writebuf.
	(class fhandler_dev_floppy): Remove declaration of close.
	* fhandler_floppy.cc (fhandler_dev_floppy::close): Delete.
	(fhandler_dev_floppy::lseek): Remove calls to writebuf.  Set
	eom_detected to false after successful seek.
	* fhandler_raw.cc (fhandler_dev_raw::writebuf): Delete.
	(fhandler_dev_raw::raw_read): Remove calls to writebuf.
	(fhandler_dev_raw::raw_write): Always invalidate buffer.
@
text
@d89 7
a95 4
  if (get_major () == DEV_TAPE_MAJOR)
    buf->st_mode = S_IFCHR | STD_RBITS | STD_WBITS | S_IWGRP | S_IWOTH;
  else
    buf->st_mode = S_IFBLK | STD_RBITS | STD_WBITS | S_IWGRP | S_IWOTH;
d97 7
a103 6
  buf->st_uid = geteuid32 ();
  buf->st_gid = getegid32 ();
  buf->st_nlink = 1;
  buf->st_blksize = S_BLKSIZE;
  time_as_timestruc_t (&buf->st_ctim);
  buf->st_atim = buf->st_mtim = buf->st_ctim;
@


1.50
log
@	* fhandler_raw.cc (fhandler_dev_raw::raw_write): Remove buffered
	write entirely.
@
text
@d43 1
a43 2
/* Wrapper functions to allow fhandler_dev_tape to detect and care for
   media changes and bus resets. */
a71 22
int
fhandler_dev_raw::writebuf (void)
{
  DWORD written;
  int ret = 0;

  if (is_writing () && devbuf && devbufend)
    {
      DWORD to_write;
      int ret = 0;

      memset (devbuf + devbufend, 0, devbufsiz - devbufend);
      to_write = ((devbufend - 1) / 512 + 1) * 512;
      if (!write_file (devbuf, to_write, &written, &ret)
	  && is_eom (ret))
	eom_detected (true);
      devbufstart = devbufend = 0;
    }
  is_writing (false);
  return ret;
}

a151 11
  /* In mode O_RDWR the buffer has to be written to device first */
  ret = writebuf ();
  if (ret)
    {
      if (is_eom (ret))
	set_errno (ENOSPC);
      else
	__seterrno ();
      goto err;
    }

d289 2
a290 3
  if (!is_writing ())
    devbufstart = devbufend = 0;
  is_writing (true);
@


1.49
log
@* path.cc (chdir): Always use the normalized_path as posix_cwd, except if it
starts with a drive.

Also perform whitespace cleanup.
@
text
@a312 2
  DWORD bytes_to_write;
  DWORD written;
a313 1
  char *tgt;
d327 1
a327 67
  if (devbuf)
    {
      while (len > 0)
	{
	  if ((len < devbufsiz || devbufend > 0) && devbufend < devbufsiz)
	    {
	      bytes_to_write = min (len, devbufsiz - devbufend);
	      memcpy (devbuf + devbufend, p, bytes_to_write);
	      bytes_written += bytes_to_write;
	      devbufend += bytes_to_write;
	      p += bytes_to_write;
	      len -= bytes_to_write;
	    }
	  else
	    {
	      if (devbufend == devbufsiz)
		{
		  bytes_to_write = devbufsiz;
		  tgt = devbuf;
		}
	      else
		{
		  bytes_to_write = (len / devbufsiz) * devbufsiz;
		  tgt = p;
		}

	      ret = 0;
	      write_file (tgt, bytes_to_write, &written, &ret);

	      if (ret)
		{
		  if (!is_eom (ret))
		    {
		      __seterrno ();
		      return -1;
		    }

		  eom_detected (true);

		  if (!written && !bytes_written)
		    {
		      set_errno (ENOSPC);
		      return -1;
		    }

		  if (tgt == p)
		    bytes_written += written;

		  break;	// from while (len > 0)
		}

	      if (tgt == devbuf)
		{
		  if (written != devbufsiz)
		    memmove (devbuf, devbuf + written, devbufsiz - written);
		  devbufend = devbufsiz - written;
		}
	      else
		{
		  len -= written;
		  p += written;
		  bytes_written += written;
		}
	    }
	}
    }
  else if (len > 0)
@


1.48
log
@	* fhandler.cc (fhandler_base::open): Remove special DEV_FLOPPY_MAJOR
	treatment.
	* fhandler_raw.cc (fhandler_dev_raw::open): Simplify write-only case.
	* fhandler_tape.cc (fhandler_dev_tape::raw_write): Add accidentally
	dropped condition.
@
text
@d182 1
a182 1
        __seterrno ();
@


1.47
log
@	* autoload.cc (NtCreateFile): Add.
	* dir.cc (mkdir): Change set_file_attribute call to indicate that
	NT security isn't used.
	* fhandler.cc (fhandler_base::open_9x): New method, created from
	fhandler_base::open.
	(fhandler_base::open): Rearrange to use NtCreateFile instead of
	CreateFile.
	* fhandler.h (enum query_state): Redefine query_null_access to
	query_stat_control.  query_null_access isn't allowed in NtCreateFile.
	(fhandler_base::open_9x): Declare.
	* fhandler_disk_file.cc (fhandler_base::fstat_fs): Use
	query_stat_control first, query_read_control if that fails.
	(fhandler_disk_file::fchmod): Call enable_restore_privilege before
	trying to open for query_write_control.  Don't fall back to
	opening for query_read_control.
	(fhandler_disk_file::fchown): Ditto.
	(fhandler_disk_file::facl):  Only request restore privilege and query
	access necessary for given cmd.
	* fhandler_raw.cc (fhandler_dev_raw::open): Call fhandler_base::open
	instead of opening device here.
	* ntdll.h (NtCreateFile): Declare.
	* path.cc (symlink_worker): Change set_file_attribute call to indicate
	that NT security isn't used.
	* sec_acl.cc (getacl): Fix bracketing.
	* sec_helper.cc (enable_restore_privilege): New function.
	* security.cc (str2buf2uni_cat): New function.
	(write_sd): Don't request restore permission here.
	* security.h (set_process_privileges): Drop stale declaration.
	(str2buf2uni): Declare.
	(str2buf2uni_cat): Declare.
	(enable_restore_privilege): Declare.
	* syscalls.cc (fchown32): Return immediate success on 9x.
@
text
@d147 3
a149 4
  if (get_major () == DEV_TAPE_MAJOR
      || (flags & (O_RDONLY | O_WRONLY | O_RDWR)) == O_WRONLY
      || (flags & (O_RDONLY | O_WRONLY | O_RDWR)) == O_RDWR)
    flags = ((flags & ~(O_WRONLY | O_RDWR)) | O_RDWR);
@


1.46
log
@	* Use new unified status_flag accessor methods from classes fhandler_*,
	tty_min, mtinfo and fs_info thoroughout.
	* fhandler.h: Redefine all set_close_on_exec methods to take a bool
	argument.
	(enum conn_state): Rename from connect_state.
	(class fhandler_base): Rename some status flags to align with
	accessor method names.  Drop encoded flag entirely.  Unify status
	accessor methods.  Const'ify all read accessor methods.
	(class fhandler_socket): Ditto.
	(class fhandler_dev_raw): Ditto.
	* fhandler_disk_file.cc (fhandler_base::fstat_fs): Use fs.fs_is_fat()
	instead of evaluating FATness of file system here.
	(fhandler_disk_file::opendir): Drop call to set_encoded().
	(fhandler_disk_file::readdir): Use pc.isencoded() directly.
	* mtinfo.h (class mtinfo_drive): Const'ify all read accessor methods.
	* path.cc (fsinfo_cnt): Add.
	(fs_info::update): Accomodate class changes. Evaluate file system
	name specific flags right here. Add thread safety for reading and
	writing global fsinfo array.
	* path.h (enum path_types): Drop values for flags kept in fs already.
	(struct fs_info): Move status informatin into private struct type
	status_flags.  Add accessor methods. Remove path and file system
	name string arrays in favor of status bits.
	(class path_conv): Use new fs_info status information where
	appropriate.
	(path_conf::fs_has_ea): Rename from fs_fast_ea.
	(path_conf::fs_has_acls): New method.
	(path_conf::root_dir): Remove.
	(path_conf::volname): Remove.
	* syscalls (statfs): Evaluate root dir locally.
	* tty.h (class tty_min): Unify status accessor methods.  Const'ify
	all read accessor methods.
@
text
@a146 1
  DWORD access = GENERIC_READ | SYNCHRONIZE;
d150 1
a150 1
    access |= GENERIC_WRITE;
d152 2
a153 26
  extern void str2buf2uni (UNICODE_STRING &, WCHAR *, const char *);
  UNICODE_STRING dev;
  WCHAR devname[CYG_MAX_PATH + 1];
  str2buf2uni (dev, devname, get_win32_name ());
  OBJECT_ATTRIBUTES attr;
  ULONG options = FILE_SYNCHRONOUS_IO_NONALERT;
  /* The O_TEXT flag is used to indicate write-through on tape devices */
  if (get_major () == DEV_TAPE_MAJOR && (flags & O_TEXT))
    options |= FILE_WRITE_THROUGH;
  flags &= ~O_TEXT;
  InitializeObjectAttributes (&attr, &dev, OBJ_CASE_INSENSITIVE, NULL, NULL);

  HANDLE h;
  IO_STATUS_BLOCK io;
  NTSTATUS status = NtOpenFile (&h, access, &attr, &io, 0 /* excl. access */,
				options);
  if (!NT_SUCCESS (status))
    {
      __seterrno_from_win_error (RtlNtStatusToDosError (status));
      return 0;
    }

  set_io_handle (h);
  set_flags ((flags & ~O_TEXT) | O_BINARY);

  if (devbufsiz > 1L)
d156 1
a156 1
  return 1;
@


1.45
log
@	* fhandler.h (class fhandler_dev_raw): Move status bits into protected
	bitfield struct type status_flags.  Drop unused has_written bit.
	Add accessor methods.
	(fhandler_dev_raw::clear): Remove.
	(fhandler_dev_raw::reset_devbuf): Remove.
	* fhandler_floppy.cc (fhandler_dev_floppy::lseek): Use accessor method
	for is_writing.
	* fhandler_raw.cc: Use status accessor methods throughout.
	(fhandler_dev_raw::clear): Remove.
	(fhandler_dev_raw::fhandler_dev_raw): Drop clear call.
	(fhandler_dev_raw::~fhandler_dev_raw): Ditto.
	* fhandler_tape.cc: Use mtinfo::status accessor methods throughout.
	(mtinfo_drive::close): Fix conditional to enable BSD semantics
	correctly.
	(mtinfo_drive::get_status): Rename from mtinfo_drive::status.
	* mtinfo.h (class mtinfo_drive): Move status bits into private bitfield
	struct type status_flags.  Add accessor methods.
	Rename status method to get_status.
@
text
@d98 1
a98 1
  set_need_fork_fixup ();
@


1.44
log
@	* fhandler_raw.cc (fhandler_dev_raw::open): Actually use "options".
@
text
@a29 12
void
fhandler_dev_raw::clear (void)
{
  devbuf = NULL;
  devbufsiz = 0;
  devbufstart = 0;
  devbufend = 0;
  eom_detected = 0;
  eof_detected = 0;
  lastblk_to_read = 0;
}

d79 1
a79 1
  if (is_writing && devbuf && devbufend)
d88 1
a88 3
	eom_detected = 1;
      if (written)
	has_written = 1;
d91 1
a91 1
  is_writing = 0;
d96 1
a96 1
  : fhandler_base ()
a97 1
  clear ();
a104 1
  clear ();
d213 1
a213 1
  if (eof_detected && !lastblk_to_read)
d215 1
a215 1
      eof_detected = 0;
d221 1
a221 1
  if (eom_detected && !lastblk_to_read)
d243 1
a243 1
	      if (lastblk_to_read)
d245 1
a245 1
		  lastblk_to_read = 0;
d273 1
a273 1
		    eof_detected = 1;
d275 1
a275 1
		    eom_detected = 1;
d287 1
a287 1
		  lastblk_to_read = 1;
d315 1
a315 1
	    eof_detected = 1;
d317 1
a317 1
	    eom_detected = 1;
d346 1
a346 1
  if (eom_detected)
d352 1
a352 1
  if (!is_writing)
d354 1
a354 1
  is_writing = 1;
a383 2
	      if (written)
		has_written = 1;
d393 1
a393 1
		  eom_detected = 1;
a425 2
	  if (bytes_written)
	    has_written = 1;
d431 1
a431 1
	  eom_detected = 1;
a437 1
      has_written = 1;
d456 3
a458 3
      fhc->eom_detected = eom_detected;
      fhc->eof_detected = eof_detected;
      fhc->lastblk_to_read = 0;
d468 1
a468 1
  lastblk_to_read = 0;
d478 1
a478 1
  lastblk_to_read = 0;
@


1.43
log
@	* errno.cc (errmap): Map ERROR_SHARING_VIOLATION to EBUSY,
	ERROR_EOM_OVERFLOW and ERROR_NO_DATA_DETECTED to EIO.  Add mappings
	for ERROR_NO_MEDIA_IN_DRIVE, ERROR_DEVICE_REQUIRES_CLEANING and
	ERROR_DEVICE_DOOR_OPEN.
	* fhandler.h (class fhandler_dev_raw): Drop varblkop member.
	(fhandler_dev_raw::is_eom): De-virtualize.
	(fhandler_dev_raw::is_eof): Ditto.
	(class fhandler_dev_tape): Drop lasterr and dp member.  Add mt_mtx
	member.  Drop all private methods formerly used by ioctl.
	(fhandler_dev_tape::is_rewind_device): Use get_minor for clarity.
	(fhandler_dev_tape::driveno): New method.
	(fhandler_dev_tape::drive_init): New method.
	(fhandler_dev_tape::clear): Remove method.
	(fhandler_dev_tape::is_eom): Ditto.
	(fhandler_dev_tape::is_eof): Ditto.
	(fhandler_dev_tape::write_file): Ditto.
	(fhandler_dev_tape::read_file): Ditto.
	(fhandler_dev_tape::_lock): New method.
	(fhandler_dev_tape::unlock): New method.
	(fhandler_dev_tape::raw_read): New method.
	(fhandler_dev_tape::raw_write): New method.
	* fhandler_raw.cc (fhandler_dev_raw::is_eom): New method.
	(fhandler_dev_raw::is_eof): New method.
	(fhandler_dev_raw::open): Allow setting write through option by
	using the O_TEXT flag as ... flag.
	(fhandler_dev_raw::writebuf): Remove usage of varblkop and other
	tape specific code.
	(fhandler_dev_raw::raw_read): Ditto.
	(fhandler_dev_raw::dup): Ditto.
	* fhandler_tape.cc: Rewrite tape operations entirely.  Implement
	new tape driver classes mtinfo, mtinfo_drive and mtinfo_part.
	Reduce fhandler_dev_tape methods to mostly just calling appropriate
	mtinfo_drive methods.
	(mtinfo_init): New function adding the mtinfo shared memory area.
	* mtinfo.h: New file, containing the definition of the new tape
	driver classes.
	* shared.cc: Include mtinfo.h.
	(offsets): Add entry for mtinfo shared memory area.
	(memory_init): Call mtinfo_init.
	* shared_info.h (shared_locations): Add SH_MTINFO shared location.
	* include/cygwin/mtio.h: Change and add various comments.  Add GMT_xxx
	macros for new generic flags.  Add MT_ST_xxx bitfield definitions
	for MTSETDRVBUFFER ioctl.
	* include/cygwin/version.h: Bump API minor version number.
@
text
@d184 1
a184 1
				FILE_SYNCHRONOUS_IO_NONALERT);
@


1.42
log
@	* errno.cc (errmap): Handle ERROR_BUS_RESET.
	* fhandler.h (fhandler_dev_raw::write_file): New method, created
	from former static function.
	(fhandler_dev_raw::read_file): Ditto.
	(reset_devbuf): New inline method.
	(class fhandler_dev_tape): Add TAPE_GET_DRIVE_PARAMETERS
	member `dp'.
	(fhandler_dev_tape::write_file): New method.
	(fhandler_dev_tape::read_file): Ditto.
	(fhandler_dev_tape::tape_get_feature): Convert to inline method.
	(fhandler_dev_tape::tape_error): New method, created from former
	static function.
	(fhandler_dev_tape::tape_get_blocksize): Remove declaration.
	* fhandler_raw.cc (fhandler_dev_raw::write_file): New method, created
	from former static function.
	(fhandler_dev_raw::read_file): Ditto.
	(fhandler_dev_raw::writebuf): Accomodate the fact that no devbuf
	exists under variable block size condition.
	(fhandler_dev_raw::raw_read): Ditto. Add local p pointer to simplify
	pointer arithmetic.
	(fhandler_dev_raw::raw_write): Always set devbufend to 0 when starting
	with writing. Accomodate the fact that no devbuf exists under
	variable block size condition.
	* fhandler_tape.cc: Various formatting changes.
	(TAPE_FUNC): New macro. Use throughout as tape function loop.
	(get_ll): Convert into macro.
	(IS_EOM): New macro.
	(IS_EOF): New macro.
	(fhandler_dev_tape::is_eom): Use IS_EOM macro.
	(fhandler_dev_tape::is_eof): Use IS_EOF macro.
	(fhandler_dev_tape::write_file): New method.
	(fhandler_dev_tape::read_file): New method.
	(fhandler_dev_tape::open): Get drive information block here once.
	(fhandler_dev_tape::lseek): Remove unneeded duplicate code.
	(fhandler_dev_tape::dup): Duplicate drive information block.
	(fhandler_dev_tape::ioctl): Remove drvbuf in variable block size mode.
	Return ERROR_INVALID_BLOCK_LENGTH instead of ERROR_MORE_DATA if
	buffer contains data which would get lost on buffer size changing.
	Use absolute tape positioning also if drive only supports logical
	block positioning.
	(fhandler_dev_tape::tape_error): New method, created from former
	static function.
	(fhandler_dev_tape::tape_get_pos): Allow logical block reporting.
	Workaround tape driver bug.
	(fhandler_dev_tape::_tape_set_pos): Reset device buffer and flags
	after successful repositioning.
	(fhandler_dev_tape::tape_set_pos): Allow logical block positioning.
	Workaround tape driver bug.
	(fhandler_dev_tape::tape_erase): Use dp instead of calling
	GetTapeParameters.
	(fhandler_dev_tape::tape_prepare): Ditto.
	(fhandler_dev_tape::tape_get_blocksize): Remove.
	(fhandler_dev_tape::tape_set_blocksize): Don't call tape_get_blocksize.
	Error handling already done in fhandler_dev_tape::ioctl.
	(fhandler_dev_tape::tape_status): Remove local `dp' variable.
	Accomodate logical tape reporting.  Call tape_get_feature instead
	of accessing feature words directly.
	(fhandler_dev_tape::tape_compression): Use dp instead of calling
	GetTapeParameters.  Fix resetting datcompression.
@
text
@a39 1
  varblkop = 0;
d42 13
d91 1
a91 1
  if (!varblkop && is_writing && devbuf && devbufend)
d97 1
a97 4
      if (get_major () != DEV_TAPE_MAJOR)
	to_write = ((devbufend - 1) / 512 + 1) * 512;
      else
	to_write = devbufsiz;
d153 1
a153 1
  if (flags & (O_APPEND | O_EXCL))
d174 5
d183 1
a183 1
  NTSTATUS status = NtOpenFile (&h, access, &attr, &io, wincap.shared (),
d251 2
a252 1
			    bytes_to_read, devbufend - devbufend);
d269 1
a269 4
		  if (get_major () == DEV_TAPE_MAJOR)
		    bytes_to_read = (len / devbufsiz) * devbufsiz;
		  else
		    bytes_to_read = (len / 512) * 512;
a324 5
	  if (varblkop && ret == ERROR_MORE_DATA)
	    /* *ulen < blocksize.  Linux returns ENOMEM here
	       when reading with variable blocksize . */
	    set_errno (ENOMEM);
	  else
a479 1
      fhc->varblkop = varblkop;
@


1.41
log
@	* fhandler_raw.cc (fhandler_dev_raw::raw_read): When reading with
	variable block size, read only one block, read directly into user
	supplied buffer, return ENOMEM if user supplied buffer is smaller
	than size of next block to read.  Use read2 instead of bytes_to_read
	to count number of bytes read.
	* fhandler_tape.cc (fhandler_dev_tape::open): Add debug output.
@
text
@d27 2
a28 3
/* static wrapper functions to hide the effect of media changes and
   bus resets which occurs after a new media is inserted. This is
   also related to the used tape device.  */
d30 19
a48 2
static BOOL write_file (HANDLE fh, const void *buf, DWORD to_write,
			DWORD *written, int *err)
d53 2
a54 10
  if (!(ret = WriteFile (fh, buf, to_write, written, 0)))
    {
      if ((*err = GetLastError ()) == ERROR_MEDIA_CHANGED
	  || *err == ERROR_BUS_RESET)
	{
	  *err = 0;
	  if (!(ret = WriteFile (fh, buf, to_write, written, 0)))
	    *err = GetLastError ();
	}
    }
d56 1
a56 1
		  ret, *err, fh, buf, to_write, *written);
d60 2
a61 2
static BOOL read_file (HANDLE fh, void *buf, DWORD to_read,
		       DWORD *read, int *err)
d66 2
a67 10
  if (!(ret = ReadFile (fh, buf, to_read, read, 0)))
    {
      if ((*err = GetLastError ()) == ERROR_MEDIA_CHANGED
	  || *err == ERROR_BUS_RESET)
	{
	  *err = 0;
	  if (!(ret = ReadFile (fh, buf, to_read, read, 0)))
	    *err = GetLastError ();
	}
    }
d69 1
a69 1
		  ret, *err, fh, buf, to_read, *read);
a72 16
/**********************************************************************/
/* fhandler_dev_raw */

void
fhandler_dev_raw::clear (void)
{
  devbuf = NULL;
  devbufsiz = 0;
  devbufstart = 0;
  devbufend = 0;
  eom_detected = 0;
  eof_detected = 0;
  lastblk_to_read = 0;
  varblkop = 0;
}

d79 1
a79 1
  if (is_writing && devbuf && devbufend)
a86 2
      else if (varblkop)
	to_write = devbufend;
d89 1
a89 1
      if (!write_file (get_handle (), devbuf, to_write, &written, &ret)
d201 1
d237 2
a238 2
			    bytes_to_read, devbufstart - devbufend);
	      memcpy (ptr, devbuf + devbufstart, bytes_to_read);
d240 1
a240 1
	      ptr = (void *) ((char *) ptr + bytes_to_read);
d252 1
a252 1
	      if (!varblkop && len >= devbufsiz)
d258 1
a258 1
		  tgt = (char *) ptr;
a260 6
	      else if (varblkop)
		{
		  tgt = (char *) ptr;
		  bytes_to_read = len;
		  debug_printf ("read variable bytes direct from file");
		}
d268 1
a268 1
	      if (!read_file (get_handle (), tgt, bytes_to_read, &read2, &ret))
d272 1
a272 6
		      if (varblkop && ret == ERROR_MORE_DATA)
		        /* *ulen < blocksize.  Linux returns ENOMEM here
			   when reading with variable blocksize . */
		        set_errno (ENOMEM);
		      else
			__seterrno ();
a299 7
	      else if (varblkop)
		{
		  /* When reading tapes with variable block size, we
		     leave right after reading one block. */
		  bytes_read = read2;
		  break;
		}
d303 1
a303 1
		  ptr = (void *) ((char *) ptr + read2);
d309 1
a309 1
  else if (!read_file (get_handle (), ptr, len, &bytes_read, &ret))
d313 5
d362 1
a362 4
    {
      devbufend = devbufstart;
      devbufstart = 0;
    }
d369 1
a369 2
	  if (!varblkop &&
	      (len < devbufsiz || devbufend > 0) && devbufend < devbufsiz)
d380 1
a380 6
	      if (varblkop)
		{
		  bytes_to_write = len;
		  tgt = p;
		}
	      else if (devbufend == devbufsiz)
d392 1
a392 1
	      write_file (get_handle (), tgt, bytes_to_write, &written, &ret);
d435 1
a435 1
      if (!write_file (get_handle (), ptr, len, &bytes_written, &ret))
@


1.40
log
@* debug.h (console_printf): Define for non-debugging condition.
* cygtls.h (_threadinfo::lock): Remove wait argument.
(_threadinfo::interrupt_setup): Remove retaddr argument.
* exceptions.cc (_threadinfo::interrupt_setup): Ditto.
(_threadinfo::interrupt_now): Accommodate change to interrupt_setup argument.
(setup_handler): Ditto.  Always lock sig stack prior to determining interrupt
method.
* gendef (_sigfe): Correct thinko regarding cmpxchg.
(_sigbe): Ditto.
(_threadinfo::lock): Ditto.
(_threadinfo::pop): Eliminate left-over stack unlock.
* sigproc.cc (proc_subproc): Chnage debugging output to printed warning.
@
text
@d278 6
d286 1
d288 2
a289 6
		  tgt = devbuf;
		  if (varblkop)
		    debug_printf ("read variable bytes from file into buffer");
		  else
		    debug_printf ("read %d bytes from file into buffer",
				  bytes_to_read);
d295 6
a300 1
		      __seterrno ();
d321 1
a321 1
	      if (! read2)
d328 7
d337 3
a339 3
		  len -= bytes_to_read;
		  ptr = (void *) ((char *) ptr + bytes_to_read);
		  bytes_read += bytes_to_read;
@


1.39
log
@* fhandler.h (*::fixup_after_exec): Eliminate unused handle argument.
* fhandler.h (dtable::fixup_after_exec): Eliminate unused handle argument.
* dcrt0.cc (dll_crt0_1): Reflect elimination of unused handle argument to
fixup_after_exec.
* dtable.cc (dtable::fixup_after_exec): Ditto.
* fhandler_console.cc (fhandler_console::fixup_after_exec): Ditto.
* fhandler_dsp.cc (fhandler_dsp::fixup_after_exec): Ditto.
* fhandler_raw.cc (fhandler_raw::fixup_after_exec): Ditto.
* fhandler_socket.cc (fhandler_socket::fixup_after_exec): Ditto.
* fhandler_virtual.cc (fhandler_virtual::fixup_after_exec): Ditto.
* pipe.cc (fhandler_pipe::fixup_after_exec): Ditto.
* spawn.cc (spawn_guts): Do not set ciresrv.parent.
* child_info.h (child_info_spawn::~child_info_spawn): Do not close parent.
Update CURR_CHILD_INFO_MAGIC.
* dcrt0.cc (dll_crt0_0): Do not close spawn_info->parent.  Pass NULL to
cygheap->fdtab.fixup_after_exec().
@
text
@d3 1
a3 1
   Copyright 1999, 2000, 2001, 2002 Red Hat, Inc.
@


1.38
log
@* fhandler.cc (fhandler_base::open): Use major numbers rather than device
numbers to control special behavior for devices which take units.
* fhandler_raw.cc (fhandler_dev_raw::writebuf): Ditto.
(fhandler_dev_raw::fstat): Ditto.
(fhandler_dev_raw::open): Ditto.
(fhandler_dev_raw::ioctl): Ditto.
@
text
@d511 1
a511 1
fhandler_dev_raw::fixup_after_exec (HANDLE)
@


1.37
log
@2003-11-11  Robert Collins <rbtcollins@@hotmail.com>
	    Ron Parker <rdparker@@butlermfg.com>

	* bsdlib.cc: Update throughout to use CYG_MAX_PATH rather than MAX_PATH.
	* cygheap.h: Ditto.
	* dcrt0.cc: Ditto.
	* delqueue.cc: Ditto.
	* dlfcn.cc: Ditto.
	* dll_init.cc: Ditto.
	* dll_init.h: Ditto.
	* dtable.cc: Ditto.
	* environ.cc: Ditto.
	* environ.h: Ditto.
	* exceptions.cc: Ditto.
	* external.cc: Ditto.
	* fhandler_disk_file.cc: Ditto.
	* fhandler_proc.cc: Ditto.
	* fhandler_process.cc: Ditto.
	* fhandler_raw.cc: Ditto.
	* fhandler_registry.cc: Ditto.
	* fhandler_socket.cc: Ditto.
	* fhandler_virtual.cc: Ditto.
	* miscfuncs.cc: Ditto.
	* mmap.cc: Ditto.
	* netdb.cc: Ditto.
	* path.cc: Ditto.
	* path.h: Ditto.
	* pinfo.cc: Ditto.
	* pinfo.h: Ditto.
	* pthread.cc: Ditto.
	* registry.cc: Ditto.
	* shared.cc: Ditto.
	* shared_info.h: Ditto.
	* smallprint.c: Ditto.
	* spawn.cc: Ditto.
	* strace.cc: Ditto.
	* syscalls.cc: Ditto.
	* thread.h: Ditto.
	* uinfo.cc: Ditto.
	* winsup.h: Ditto.
	* include/limits.h: Ditto.
	* include/cygwin/config.h: Ditto.
	* include/sys/param.h: Ditto.
@
text
@d101 1
a101 1
      if (get_device () != FH_TAPE)
d137 4
a140 10
  switch (get_device ())
    {
    case FH_TAPE:
    case FH_NTAPE:
      buf->st_mode = S_IFCHR | STD_RBITS | STD_WBITS | S_IWGRP | S_IWOTH;
      break;
    default:
      buf->st_mode = S_IFBLK | STD_RBITS | STD_WBITS | S_IWGRP | S_IWOTH;
      break;
    }
d173 1
a173 1
  if (get_device () == FH_TAPE
d271 1
a271 1
		  if (get_device () == FH_TAPE)
d535 1
a535 1
	    if (get_device () == FH_TAPE)
@


1.37.6.1
log
@* devices.in: Change raw com device to more correct form.
* fhandler.cc (fhandler_base::open): Use major numbers rather than device
numbers to control special behavior for devices which take units.
* fhandler_raw.cc (fhandler_dev_raw::writebuf): Ditto.
(fhandler_dev_raw::fstat): Ditto.
(fhandler_dev_raw::open): Ditto.
(fhandler_dev_raw::ioctl): Ditto.
@
text
@d101 1
a101 1
      if (get_major () != DEV_TAPE_MAJOR)
d137 10
a146 4
  if (get_major () == DEV_TAPE_MAJOR)
    buf->st_mode = S_IFCHR | STD_RBITS | STD_WBITS | S_IWGRP | S_IWOTH;
  else
    buf->st_mode = S_IFBLK | STD_RBITS | STD_WBITS | S_IWGRP | S_IWOTH;
d179 1
a179 1
  if (get_major () == DEV_TAPE_MAJOR
d277 1
a277 1
		  if (get_major () == DEV_TAPE_MAJOR)
d541 1
a541 1
	    if (get_major () == DEV_TAPE_MAJOR)
@


1.36
log
@	* fhandler.h (class fhandler_dev_raw): Add method fstat.
	* fhandler_raw.cc (fhandler_dev_raw::fstat): New method.

	Add missing ChangeLog for previous patch.
@
text
@d186 1
a186 1
  WCHAR devname[MAX_PATH + 1];
@


1.35
log
@* devices.cc: New file.
* devices.gperf: New file.
* devices.shilka: New file.
* cygwin-gperf: New file.
* cygwin-shilka: New file.
* fhandler_fifo.cc: New file.
* fhandler_nodevice.cc : New file.  Reorganize headers so that path.h precedes
fhandler.h throughout.  Remove device argument and unit arguments from fhandler
constructors throughout.  Remove pc arguments to fhandler functions and use
internal pc element instead, throughout.  Use dev element in pc throughout.
Use major/minor elements rather than units and device numbers previously in
fhandler class.  Use correct methods for fhandler file names rather than
directly accessing file name variables, throughout.
* Makefile.in (DLL_OFILES): Add devices.o, fhandler_fifo.o
* dcrt0.cc (dll_crt0_1): Call device::init.
* devices.h: Renumber devices based on more Linux-like major/minor numbers.
Add more devices.  Declare standard device storage.
(device): Declare struct.
* dir.cc (opendir): Use new 'build_fh_name' to construct a fhandler_* type.
* dtable.cc (dtable::get_debugger_info): Ditto.
(cygwin_attach_handle_to_fd): Ditto.
(dtable::release): Remove special FH_SOCKET case in favor of generic
"need_fixup_before" test.
(dtable::init_std_file_from_handle): Use either build_fh_dev or build_fh_name
to build standard fhandler.
(dtable::build_fh_name): Renamed from dtable::build_fhandler_from_name.  Move
out of dtable class.  Don't accept a path_conv argument.  Just build it here
and pass it to:
(build_fh_pc): Renamed from dtable::build_fhandler.  Move out of dtable class.
Use intrinsic device type in path_conv to create new fhandler.
(build_fh_dev): Renamed from dtable::build_fhandler.  Move out of dtable class.
Simplify arguments to just take new 'device' type and a name.  Just return
pointer to fhandler rather than trying to insert into dtable.
(dtable::dup_worker): Accommodate above build_fh name changes.
(dtable::find_fifo): New (currently broken) function.
(handle_to_fn): Use strechr for efficiency.
* dtable.h: Reflect above build_fh name changes and argument differences.
(fhandler_base *&operator []): Return self rather than copy of self.
* fhandler.cc (fhandler_base::operator =): Use pc element to set normalized
path.
(fhandler_base::set_name): Ditto.
(fhandler_base::raw_read): Use method to access name.
(fhandler_base::write): Correctly use get_output_handle rather than get_handle.
(handler_base::device_access_denied): New function.
(fhandler_base::open): Eliminate pc argument and use pc element of
fhandler_base throughout.
(fhandler_base::fstat): Detect if device is based in filesystem and use
fstat_fs to calculate stat, if so.
(fhandler_base::fhandler_base): Eliminate handling of file names and, instead,
just free appropriate component from pc.
(fhandler_base::opendir): Remove path_conv parameter.
* fhandler.h: Remove all device flags.
(fhandler_base::pc): New element.
(fhandler_base::set_name): Change argument to path_conv.
(fhandler_base::error): New function.
(fhandler_base::exists): New function.
(fhandler_base::pc_binmode): New function.
(fhandler_base::dev): New function.
(fhandler_base::open_fs): New function.
(fhandler_base::fstat_fs): New function.
(fhandler_base::fstat_by_name): New function.
(fhandler_base::fstat_by_handle): New function.
(fhandler_base::isfifo): New function.
(fhandler_base::is_slow): New function.
(fhandler_base::is_auto_device): New function.
(fhandler_base::is_fs_special): New function.
(fhandler_base::device_access_denied): New function.
(fhandler_base::operator DWORD&): New operator.
(fhandler_base::get_name): Return normalized path from pc.
(fhandler_base::get_win32_name): Return windows path from pc.
(fhandler_base::isdevice): Renamed from is_device.
(fhandler_base::get_native_name): Return device format.
(fhandler_fifo): New class.
(fhandler_nodevice): New class.
(select_stuff::device_specific): Remove array.
(select_stuff::device_specific_pipe): New class element.
(select_stuff::device_specific_socket): New class element.
(select_stuff::device_specific_serial): New class element.
(select_stuff::select_stuff): Initialize new elements.
* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Move to base class
from fhandler_disk_file.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_disk_file::open): Move most functionality into
fhandler_base::open_fs.
(fhandler_base::open_fs): New function.
(fhandler_disk_file::close): Move most functionality into
fhandler_base::close_fs.
(fhandler_base::close_fs): New function.
* fhandler_mem.cc (fhandler_dev_mem::open): Use device name in debugging
output.
* fhandler_socket.cc (fhandler_socket::set_connect_secret): Copy standard
urandom device into appropriate place.
(fhandler_socket::accept): Reflect change in fdsock return value.
* fhandler_tty.cc: See "throughouts" above.
* net.cc: Accommodate fdsock change throughout.
(fdsock): Return success or failure, accept fd argument and device argument.
* path.cc (symlink_info::major): New element.
(symlink_info::minor): New element.
(symlink_info::parse_device): Declare new function.
(fs_info::update): Accommodate changes in path_conv class.
(path_conv::fillin): Ditto.
(path_conv::return_and_clear_normalized_path): Eliminate.
(path_conv::set_normalized_path): New function.
(path_conv::path_conv): Set info in dev element.  Use path_conv methods Check
for FH_FS rather than FH_BAD to indicate when to fill in filesystem stuff.
where appropriate rather than direct access.  Use set_normalized_path to set
normalized path.
(windows_device_names): Eliminate.
(get_dev): Ditto.
(get_raw_device_number): Ditto.
(get_device_number): Ditto.
(win32_device_name): Call new device name parser to do most of the heavy
lifting.
(mount_info::conv_to_win32_path): Fill in dev field as appropriate.
(symlink_worker): Handle new device files.
(symlink_info::check): Ditto.
(symlink_info::parse_device): Define new function.
* path.h (executable_states): Move here from fhandler.h.
(fs_info): Rename variables to *_storage and create methods for accessing same.
(path_conv): Add dev element, remove devn and unit and adjust inline methods to
accommodate.
(set_normalized_path): Declare new function.
* pinfo.cc (_pinfo::commune_recv): Add broken support for handling fifos.
(_pinfo::commune_send): Ditto.
* pipe.cc (fhandler_pipe::close): check for existence of handle before closing
it.
(handler_pipe::create): Rename from make_pipe.  Change arguments to accept
fhandler_pipe array.  Accommodate fifos.
(pipe): Rework to deal with fhandler_pipe::create changes.
(_pipe): Ditto.
* select.cc: Use individual device_specific types throughout rather than
indexing with obsolete device number.
(set_bits): Use is_socket call rather than checking device number.
* shared_info.h (CURR_MOUNT_MAGIC): Update.
(conv_to_win32_path): Reflect addition of device argument.
* syscalls.cc (mknod_worker): New function.
(open): Use build_fh_name to build fhandler.
(chown_worker): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(chmod_device): New function.
(chmod): Detect if this is an 'auto' device rather than an on-filesystem device
and handle appropriately.  Use chmod_device to set mode of in-filesystem
devices.
(stat_worker): Eliminate path_conv argument.  Call build_fh_name to construct
fhandler.  Use fh->error() rather than pc->error to detect errors in fhandler
construction.
(access_worker): New function pulled from access.  Accommodate in-filesystem
devices.
(access): Use access_worker.
(fpathconf): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(mknod_worker): New function.
(mknod32): New function.
(chroot): Free normalized path -- assuming it was actually cmalloced.
* tty.cc (create_tty_master): Tweak for new device class.
(tty::common_init): Ditto.
* winsup.h (stat_worker): Remove.
(symlink_worker): Declare.
* exceptions.cc (set_process_mask): Just call sig_dispatch_pending and don't
worry about pending_signals since sig_dispatch_pending should always do the
right thing now.
(sig_handle): Reorganize SIGCONT handling to more closely conform to SUSv3.
* pinfo.h: Move __SIG enum to sigproc.h.
(PICOM_FIFO): New enum element.
(_pinfo): Remove 'thread2signal' stuff throughout class.
(_pinfo::commune_send): Make varargs.
(_pinfo::sigtodo): Eliminate.
(_pinfo::thread2signal): Ditto.
* signal.cc (kill_worker): Eliminate call to setthread2signal.
* sigproc.cc (local_sigtodo): Eliminate.
(getlocal_sigtodo): Ditto.
(sigelem): New class.
(pending_signals): New class.
(sigqueue): New variable, start of sigqueue linked list.
(sigcatch_nonmain): Eliminate.
(sigcatch_main): Eliminate.
(sigcatch_nosync): Eliminate.
(sigcomplete_nonmain): Eliminate.
(pending_signals): Eliminate.
(sig_clear): Call signal thread to clear pending signals, unless already in
signal thread.
(sigpending): Call signal thread to get pending signals.
(sig_dispatch_pending): Eliminate use of pending_signals and just check
sigqueue.
(sigproc_terminate): Eliminate all of the obsolete semaphore stuff.  Close
signal pipe handle.
(sig_send): Eliminate all of the obsolete semaphore stuff and use pipe to send
signals.
(getevent): Eliminate.
(pending_signals::add): New function.
(pending_signals::del): New function.
(pending_signals::next): New function.
(wait_sig): Eliminate all of the obsolete semaphore stuff.  Use pipe to
communicate and maintain a linked list of signals.
* sigproc.h: Move __SIG defines here.  Add __SIGPENDING.
(sig_dispatch_pending): Remove "C" specifier.
(sig_handle): Accept a mask argument.
* thread.cc: Remove signal handling considerations throughout.
@
text
@d132 25
@


1.34
log
@* signal.cc (nanosleep): Improve test for valid values.  Round delay up to
resolution.  Fix test for negative remainder.  Use timeGetTime through gtod.
(sleep): Round up return value.  Christopher Faylor <cgf@@redhat.com>
* hires.h (HIRES_DELAY_MAX): Define.
(hires_ms::minperiod): Declare static.
(hires_ms::resolution): New.
(hires_ms::dmsecs): New.
(hires_ms::prime): Return UINT.
(gtod): Declare.
* times.cc (hires_ms::prime): Always calculate minperiod and set it to 1 in
case of failure.  Return minperiod.
(hires_ms::resolution): Define.
(hires_ms::~hires_ms): Delete.
(hires_ms::usecs): Check minperiod to prime.
(gtod) Define as global.
@
text
@d21 1
a22 1
#include "path.h"
d118 2
a119 2
fhandler_dev_raw::fhandler_dev_raw (DWORD devtype, int nunit)
  : fhandler_base (devtype), unit (nunit)
d133 1
a133 1
fhandler_dev_raw::open (path_conv *real_path, int flags, mode_t)
d138 1
a138 1
      debug_printf ("%s is accessible under NT/W2K only",real_path->get_win32());
d162 1
a162 1
  str2buf2uni (dev, devname, real_path->get_win32 ());
a478 1
      fhc->unit = unit;
@


1.33
log
@* dcrt0.cc (__argc_safe): New variable.
(dll_crt0_1): Store argc in __argc_safe, which will theoretically remain
untouched by the user.
* fhandler_console.cc (fhandler_console::read): Silence some compiler warnings.
* fhandler_raw.cc (fhandler_dev_raw::raw_read): Ditto.
* pinfo.cc (_pinfo::commune_recv): Carefully bound argv scan and check for
potentially bad pointers since user could have set argv cell to anythinw.
* cygheap.h (CYGHEAPSIZE): Bump up size.
@
text
@d332 1
a332 1
  (ssize_t) ulen = bytes_read;
@


1.32
log
@	* errno.cc (errmap): Map ERROR_INVALID_BLOCK_LENGTH to EIO.
	* fhandler_raw.cc (fhandler_dev_raw::raw_read): Set more accurate
	errnos instead of EACCES.
	(fhandler_dev_raw::raw_write): Ditto.
@
text
@d336 1
a336 1
  (ssize_t) ulen = -1;
@


1.31
log
@Throughout, remove "include <errno.h>" from files which already include
cygerrno.h.
* include/cygwin/config.h (__DYNAMIC_REENT__): Define.
* include/cygwin/version.h: Bump API minor version.
* cygwin.din: Export __getreent
* cygerrno.h: Include errno.h.  Fix places where _impure_ptr is used directly
to store the errno value.
* debug.cc (__set_errno): Ditto.
* errno.cc: Remove _RRENT_ONLY define to get errno.cc compiled.
* signal.cc: Rename _reent_clib to _REENT throughout.
* thread.h (reent_clib): Remove prototype.
* thread.cc (reent_clib): Rename reent_clib to __getreent.  Return _impure_ptr
until MTinterface is initialized.
(reent_winsup): Fix a possible SEGV when _r == NULL.  Return NULL instead.
* MTinterface::fixup_after_fork: Switch reent back to _impure_ptr to keep
signal handling running when fork is called from a thread other than the
mainthread.
@
text
@d205 4
a208 1
      set_errno (is_eom (ret) ? ENOSPC : EACCES);
d273 1
a273 2
		      debug_printf ("return -1, set errno to EACCES");
		      set_errno (EACCES);
d314 1
a314 2
	  debug_printf ("return -1, set errno to EACCES");
	  set_errno (EACCES);
d446 1
a446 1
	      set_errno (EACCES);
@


1.30
log
@Throughout, change fhandler_*::read and fhandler_*::raw_read to void functions
whose second arguments are both the lenght and the return value.
* fhandler.cc (fhandler_base::read): Rework slightly to use second argument as
input/output.  Tweak CRLF stuff.
(fhandler_base::readv): Accommodate fhandler_*::read changes.
* cygthread.h (cygthread::detach): Declare as taking optional handle argument.
(cygthread::detach): When given a handle argument, wait for the handle to be
signalled before waiting for thread to detach.  Return true when signal
detected.
@
text
@a12 1
#include <errno.h>
@


1.30.6.1
log
@merge from trunk
@
text
@d119 2
a120 2
fhandler_dev_raw::fhandler_dev_raw ()
  : fhandler_base ()
d479 1
@


1.30.6.2
log
@merge from trunk.
Reorganize includes throughout so that path.h comes before fhandler.h.
Eliminate path_conv arguments from fhandler functions which take them,
throughout.  Use get_name() and get_win32_name() consistently throughout for
fhandler objects.  Use build_fh_* functions throughout, where appropriate.
* fhandler.h (fhandler_base): Store path_conv struct here.  Remove dev.
* dtable.h (dtable::build_fhandler_*): Remove.
(build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* dtable.cc (build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* fhandler.h (fhandler_base::set_name): Change argument.
* fhandler.cc (fhandler_base::set_name): Just accept a path_conv argument.
(executable_states): Move.
* path.h (executable_state): Accept.
* syscalls.cc (stat_worker): Make static.
* winsup.h (stat_worker): Remove definition.
@
text
@d22 1
a23 1
#include "fhandler.h"
d134 1
a134 1
fhandler_dev_raw::open (int flags, mode_t)
d139 1
a139 1
      debug_printf ("%s is accessible under NT/W2K only", get_win32_name ());
d163 1
a163 1
  str2buf2uni (dev, devname, get_win32_name ());
@


1.30.6.3
log
@merge from trunk
@
text
@d13 1
@


1.30.6.4
log
@merge from trunk
@
text
@d205 1
a205 4
      if (is_eom (ret))
	set_errno (ENOSPC);
      else
        __seterrno ();
d270 2
a271 1
		      __seterrno ();
d312 2
a313 1
	  __seterrno ();
d445 1
a445 1
	      __seterrno ();
@


1.30.6.5
log
@merge from trunk
@
text
@d332 1
a332 1
  ulen = (size_t) bytes_read;
d336 1
a336 1
  ulen = (size_t) -1;
@


1.30.4.1
log
@Eliminate unit argument and special unit fields from fhandler classes and
constructors throughout.
* fhandler_mem.cc (fhandler_dev_mem::fhandler_dev_mem): Make decisions based on
specific device type rather than unit number.
* fhandler_random.cc (fhandler_dev_random::write): Ditto.
(fhandler_dev_random::read): Ditto.
* fhandler_socket.cc (fhandler_socket::set_connect_secret): Set device type to
"urandom" after construction of entropy_source.
* path.cc (windows_devices_names): Remove.
@
text
@d119 2
a120 2
fhandler_dev_raw::fhandler_dev_raw (DWORD devtype)
  : fhandler_base (devtype)
d479 1
@


1.30.4.2
log
@Eliminate device number argument from fhandler constructors throughout.
@
text
@d119 2
a120 2
fhandler_dev_raw::fhandler_dev_raw ()
  : fhandler_base ()
@


1.29
log
@* fhandler.cc (fhandler_base::dup): Don't set handle on failure.  Caller has
already taken care of that.
* fhandler_console.cc (fhandler_console::open): Initialize handles to NULL.
(fhandler_console::close): Ditto.  GNUify non-GNU formatted functions calls
throughout.
@
text
@d192 2
a193 2
int
fhandler_dev_raw::raw_read (void *ptr, size_t ulen)
d207 1
a207 1
      return -1;
d214 2
a215 1
      return 0;
d222 1
a222 1
      return -1;
d273 1
a273 1
		      return -1;
d287 1
a287 1
			  return -1;
d315 1
a315 1
	  return -1;
d328 1
a328 1
	  return -1;
d332 6
a337 1
  return bytes_read;
@


1.28
log
@* fhandler_clipboard.c (fhandler_dev_clipboard::open): Force text mode.
* fhandler_console.cc (fhandler_console::open): *Really* force binary mode
rather than make it optional.
* fhandler_proc.cc (fhandler_proc::open): Ditto.
* fhandler_process.cc (fhandler_process::open): Ditto.
* fhandler_random.cc (fhandler_dev_random::fhandler_dev_random): Ditto.
* fhandler_raw.cc (fhandler_dev_raw::open): Ditto.
* fhandler_registry.cc (fhandler_registry::open): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::open): Ditto.
* fhandler_virtual.cc (fhandler_virtual::open): Ditto.
* fhandler_windows.cc (fhandler_windows::open): Ditto.
* fhandler_zero.cc (fhandler_dev_zero::open): Ditto.
* net.cc (fdsock): Ditto.
* path.cc (set_flags): Add more debugging.
@
text
@d59 1
a59 1
  if (!(ret = ReadFile(fh, buf, to_read, read, 0)))
d139 1
a139 1
      debug_printf("%s is accessible under NT/W2K only",real_path->get_win32());
@


1.27
log
@* dtable.cc (handle_to_fn): Attempt to handle "raw" accesses to remote shares.
* path.cc (mount_info::conv_to_win32_path): Set flags to binary when mount
entry is not found.
(mount_info::set_flags_from_win32_path): Ditto.
@
text
@d178 1
a178 1
  set_flags (flags & ~O_TEXT, O_BINARY);
@


1.26
log
@Remove fcntl.h includes throughout.
* fhandler.h: Move fcntl.h include here.
(fhandler_base::set_flags): Accept supplied_bin argument.  Make non-inlined.
* dtable.cc (dtable::init_std_file_from_handle): Just use binmode from pc.
(reset_to_open_binmode): Use set_flags.
* cygwin.din (open): Avoid newlib wrapper.
(read): Ditto.
(unlink): Ditto.
(write): Ditto.
* fhandler.cc (fhandler_base::set_flags): Accept supplied_bin argument.  Make
binmode decisions here.
(fhandler_base::open): Avoid using pc if it is NULL.  Eliminate binmode logic.
Just call set_flags with binmode argument.
(fhandler_base::init): Call set_flags with binmode argument.
* fhandler_clipboard.cc (fhandler_dev_clipboard::open): Ditto.
* fhandler_console.cc (fhandler_console::open): Ditto.
(fhandler_console::init): Force binary on open.
* fhandler_disk_file.cc (fhandler_disk_file::open): Don't set binmode here.
Let it happen in base class.
* fhandler_dsp.cc (fhandler_dev_dsp::open): Force binmode open.  Set return
value appropriately if unable to open.
* fhandler_proc.cc (fhandler_proc::open): Make sure flags are set before
open_status.
* fhandler_process.cc (fhandler_process::open): Ditto.
* fhandler_registry.cc (fhandler_registry::open): Ditto.
* fhandler_random.cc (fhandler_dev_random::fhandler_dev_random): Ditto.
* fhandler_raw.cc (fhandler_dev_raw::open): Force O_BINARY by default.
* fhandler_serial.cc (fhandler_serial::init): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::open): Ditto.
(fhandler_pty_master::open): Ditto.
* fhandler_virtual.cc (fhandler_virtual::open): Ditto.
* fhandler_windows.cc (fhandler_windows::open): Ditto.
* fhandler_zero.cc (fhandler_dev_zero::open): Ditto.
* net.cc (fdsock): Ditto.
* path.cc (path_conv::check): Avoid checking for extension when error or
directory.
(set_flags): Set PATH_TEXT explicitly, when appropriate.
(mount_info::conv_to_win32_path): Use set_flags() to set path flags.
* path.h (PATH_TEXT): New enum.
(path_conv::binmode): Return appropriate constant based on binmode.
* pipe.cc (make_pipe): Set binmode to O_TEXT xor O_BINARY.
* syscalls.cc (setmode_helper): Make debugging message a little clearer.
(setmode): Set binmode via set_flags.
@
text
@d3 1
a3 1
   Copyright 1999, 2000, 2001 Red Hat, Inc.
@


1.25
log
@	* fhandler_raw.cc (fhandler_dev_raw::open): Replace set_errno()
	by __seterrno_from_win_error().
	* security.cc (open_local_policy): Ditto.
	(get_lsa_srv_inf): Ditto.
	(get_user_groups): Ditto.
	(get_user_primary_group): Ditto.
	(create_token): Ditto.
	(subauth): Ditto.
@
text
@a12 1
#include <fcntl.h>
d178 1
a178 3
  set_flags (flags);
  set_r_binary (O_BINARY);
  set_w_binary (O_BINARY);
@


1.24
log
@	* fhandler_raw.cc (fhandler_dev_raw::clear): Don't reset unit.
	* fhandler_tape.cc (fhandler_dev_tape::fhandler_dev_tape): Add debug
	output.
@
text
@d174 1
a174 2
      set_errno (RtlNtStatusToDosError (status));
      debug_printf ("NtOpenFile: NTSTATUS: %d, Win32: %E", status);
@


1.23
log
@Remove 'cb' parameter and modify fhandler_* constructors throughout.
* dtable.cc (dtable::build_fhandler): Remove debugging output which uses 'cb'.
* exec.cc (execvp): New function.
(execvpe): Ditto.
* fhandler.cc (fhandler_base::fhandler_base): Use constructor initialization.
* fhandler.h (fhandler_tty_common::fhandler_tty_common): Ditto.
* fhandler_clipboard.cc (fhandler_dev_clipboard::fhandler_dev_clipboard):
Ditto.
* fhandler_console.cc (fhandler_console::fhandler_console): Ditto.
* fhandler_raw.cc (fhandler_dev_raw::fhandler_dev_raw): Ditto.
* fhandler_serial.cc (fhandler_serial::fhandler_serial): Ditto.
* fhandler_tty.cc (fhandler_tty_master::fhandler_tty_master): Ditto.
(fhandler_tty_slave::fhandler_tty_slave): Ditto.
(fhandler_pty_master::fhandler_pty_master): Ditto.
* fhandler_windows.cc (fhandler_windows::fhandler_windows): Ditto.
@
text
@a88 1
  unit = 0;
@


1.22
log
@        * fhandler_raw.cc (fhandler_dev_raw::open): Eliminate compatibility
        code since no Win32 device names are used anymore.
        * fhandler_tape.cc (fhandler_dev_tape::tape_set_blocksize): Allow
        0 as blocksize to indicate variable blocksize.
        * path.cc (win32_device_name): Generate NT internal device names
        using upper/lower case names for readability.
        Generate \DosDevices\<letter>: device name for mount table
        compatibility devices.
@
text
@d121 2
a122 2
fhandler_dev_raw::fhandler_dev_raw (DWORD devtype, int unit)
  : fhandler_base (devtype)
a124 1
  this->unit = unit;
@


1.21
log
@	* autoload.cc: Add load statement for `NtOpenFile'.
	* fhandler.h (fhandler_dev_raw::get_unit): New method.
	(fhandler_dev_tape::norewind): Eliminate.
	(fhandler_dev_tape::is_rewind_device): New method.
	* fhandler_raw.cc (fhandler_dev_raw::open): Open new
	fixed device name devices using NT internal method.
	Keep calling fhandler_base::open() for old mount table
	device mapping compatibility devices.
	(fhandler_dev_raw::fstat): Eliminate.  Settings are done
	by fhandler_base::fstat() already.
	* fhandler_tape.cc: Remove `norewind' usage throughout.
	* ntdll.h: Define FILE_SYNCHRONOUS_IO_NONALERT.
	Define struct _IO_STATUS_BLOCK.
	Declare NtOpenFile().
	* path.cc (get_raw_device_number): Add new approach for
	using fixed device names.
	(win32_device_name): Ditto.
	(get_device_number): Ditto.  Require POSIX path to begin
	with "/dev/".
	(mount_info::conv_to_win32_path): Call win32_device_name()
	instead of get_device_number() after evaluating mount points
	to allow changing the win32 destination path again.
	* security.cc (str2buf2uni): Remove `static' to be able to
	call function from fhandler_dev_raw::open().
	* wincap.cc: Set flag has_raw_devices appropriately.
	* wincap.h: Add flag has_raw_devices.
@
text
@d157 5
a161 13
  if (get_device () == FH_FLOPPY && get_unit () >= 224)
    {
      /* Compatibility mode for old mount table device mapping. */
      if (!fhandler_base::open (real_path, flags))
        return 0;
    }
  else
    {
      DWORD access = GENERIC_READ | SYNCHRONIZE;
      if (get_device () == FH_TAPE
	  || (flags & (O_RDONLY | O_WRONLY | O_RDWR)) == O_WRONLY
	  || (flags & (O_RDONLY | O_WRONLY | O_RDWR)) == O_RDWR)
	access |= GENERIC_WRITE;
d163 6
a168 6
      extern void str2buf2uni (UNICODE_STRING &, WCHAR *, const char *);
      UNICODE_STRING dev;
      WCHAR devname[MAX_PATH + 1];
      str2buf2uni (dev, devname, real_path->get_win32 ());
      OBJECT_ATTRIBUTES attr;
      InitializeObjectAttributes(&attr, &dev, OBJ_CASE_INSENSITIVE, NULL, NULL);
d170 9
a178 13
      HANDLE h;
      IO_STATUS_BLOCK io;
      NTSTATUS status = NtOpenFile (&h, access, &attr, &io, wincap.shared (),
				    FILE_SYNCHRONOUS_IO_NONALERT);
      if (!NT_SUCCESS (status))
	{
	  set_errno (RtlNtStatusToDosError (status));
	  debug_printf ("NtOpenFile: NTSTATUS: %d, Win32: %E", status);
	  return 0;
	}

      set_io_handle (h);
      set_flags (flags);
d181 2
@


1.20
log
@* fhandler_dsp.cc (fhandler_dsp::ioctl): Return 0 for successful
SNDCTL_DSP_GETBLKSIZE operation.  Remove obsolete 'name' arg from fhandler_*
constructors throughout.
* winsup.h (winsock_active): New macro.
(winsock2_active): Ditto.
* autoload.cc (wsock_init): Use new macros to decide if winsock or winsock2 is
loaded.
(nonexist_wsock32): Dummy function to force winsock load.
(nonexist_ws2_32): Dummy function to force winsock2 load.
* fhandler.h (fhandler_socket::fstat): Declare new method.  Currently unused.
* fhandler_socket.cc (fhandler_socket::fixup_before_fork_exec): Check that
winsock2 is active before trying WSADuplicateSocketA.
(fhandler_socket::fixup_after_fork): Add extra check for winsock2_active.
Otherwise use iffy procedures for Windows 95.
(fhandler_socket::fixup_after_exec): Add debugging.
(fhandler_socket::dup): Add debugging.
(fhandler_socket::fstat): New method.
(fhandler_socket::set_close_on_exec): Attempt to perform iffy stuff on Windows
95.
* errno.cc (_sys_nerr): Work around compiler strangeness.
* pinfo.cc (winpids::add): Add extra element at end of allocated array for
setting to NULL.
(winpids::enumNT): Ditto.
(winpids::init): Don't modify pidlist if it hasn't been allocated
(possibly due to malloc problem).
@
text
@d19 1
d27 1
d137 1
a137 1
fhandler_dev_raw::open (path_conv *, int flags, mode_t)
d139 13
a151 1
  int ret;
d156 2
a157 2
  ret = fhandler_base::open (NULL, flags);
  if (ret)
d159 3
a161 2
      if (devbufsiz > 1L)
	devbuf = new char [devbufsiz];
d164 36
a199 2
    devbufsiz = 0;
  return ret;
a205 9
}

int
fhandler_dev_raw::fstat (struct stat *buf, path_conv *pc)
{
  this->fhandler_base::fstat (buf, pc);
  buf->st_blksize = devbuf ? devbufsiz : 1;

  return 0;
@


1.19
log
@Add second path_conv * argument to fstat()s throughout.
* fhandler.h: Change read and fstat to regparm/stdcall throughout.
(fhandler_base::fstat): Just declare.  Don't define.
(fhandler_disk_file::fstat_helper): Declare.
* fhandler.cc (fhandler_base::fstat): Move here from fhandler.h, adapt from
former stat_dev().
(fhandler_disk_file::fstat): Move most of the disk-file-specific logic from
stat_worker to here.  Use fstat_helper to derive final fstat output.
(fhandler_disk_file::fstat_helper): New method, renamed from former fstat
method.
(num_entries): Moved here from syscalls.cc.
* fhandler_mem.cc (fhandler_dev_mem::fstat): Use base class to initialize most
stuff.  Invert has_physical_mem_access test for establishing permissions.
* fhandler_raw.cc (fhandler_dev_raw::fstat): Eliminate unneed test and memory
clearing.  Use base class to initialize most stuff.
* syscalls.cc (stat_dev): Eliminate.
(stat_worker): Simply call fstat method to generate fstat output.  Move all
device specific code to appropriate fstats.
* dir.cc (opendir): Pass correct arg to stat_worker to allow following
symlinks.
@
text
@d119 2
a120 1
fhandler_dev_raw::fhandler_dev_raw (DWORD devtype, const char *name, int unit) : fhandler_base (devtype, name)
@


1.18
log
@* dcrt0.cc (dll_crt0_1): Don't close hexec_proc if it is NULL.
* fork.cc (vfork): Add debugging statements.
* path.cc (get_device_number): Make static.  Rewrite to inspect both unix and
windows paths.
(get_raw_device_number): Just check for parts of raw device that we care about.
(get_devn): New function, pulled from get_device_number.
(win32_device_name): Accomodate arg changes to get_device_number.
(mount_info::get_device_number): Call get_device_number on translated Windows
path.
* spawn.cc (spawn_guts): Don't treat P_VFORK differently from P_NOWAIT.  Add
handle to child's shared region to child so that it will be preserved if the
parent goes away.
* fhandler.h: Throughout, simplify to one open method for all fhandler classes,
requiring a path_conv first element.
* fhandler.cc (fhandler_base::open): Remove obsolete method.  Generalize to
require path_conv * as first argument.
(fhandler_disk_file::open): Remove obsolete method.
(fhandler_disk_file::open): Use path_conv pointer rather than reference.
* fhandler_clipboard.cc (fhandler_dev_clipboard::dup): Use new open method.
(fhandler_dev_clipboard::open): Accomodate new argument for open methods.
* fhandler_console.cc (fhandler_console::open): Ditto.
(fhandler_console::dup): Use new open method.
(fhandler_console::fixup_after_fork): Ditto.
(fhandler_console::fixup_after_exec): Ditto.
* fhandler_dsp.cc (fhandler_dev_dsp::open): Accomodate new argument for open
methods.
* fhandler_floppy.cc (fhandler_dev_floppy::open): Ditto.
* fhandler_mem.cc (fhandler_dev_mem::open): Ditto.
* fhandler_random (fhandler_dev_random::open): Ditto.
* fhandler_raw.cc (fhandler_dev_raw::open): Ditto.
* fhandler_serial.cc (fhandler_serial::open): Ditto.
* fhandler_tape.cc (fhandler_dev_tape::open): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::open): Ditto.
(fhandler_pty_master::open): Ditto.
* fhandler_windows.cc (fhandler_windows::open): Ditto.
* fhandler_zero.cc (fhandler_dev_zero::open): Ditto.
* fhandler_socket.cc (fhandler_socket::set_connect_secret): Accomodate new
argument for open methods.
* syscalls.cc (_open): Ditto.
(stat_worker): Ditto.
@
text
@d159 1
a159 1
fhandler_dev_raw::fstat (struct stat *buf)
d161 1
a161 12
  if (!buf)
    {
      set_errno (EINVAL);
      return -1;
    }

  memset (buf, 0, sizeof *buf);
  buf->st_mode = S_IFCHR |
		 S_IRUSR | S_IWUSR |
		 S_IRGRP | S_IWGRP |
		 S_IROTH | S_IWOTH;
  buf->st_nlink = 1;
a162 1
  buf->st_dev = buf->st_rdev = get_device () << 8 | (unit & 0xff);
@


1.17
log
@Add "path.h" include throughout, where needed.  Use new path_conv methods and
operators to simplify testing for directory and attributes, throughout.
* path.h (path_conv::exists): New method.
(path_conv::has_attribute): Ditto.
(path_conv::isdir): Ditto.
(path_conv::DWORD &): New operator.
(path_conv::int &): Ditto.
* dir.cc (rmdir): Eliminate a goto.
* dtable.cc (dtable::build_fhandler): Accept opt and suffix info for
path_conv.check.  Return fh == NULL on path_conv error.  Pass unit to set_name
as appropriate.
(dtable::reset_unix_path_name): New method.
* dtable.h (dtable): Declare new method.  Reflect arg changes to
build_fhandler.
* fhandler.cc (fhandler_disk_dummy_name): Eliminate.
(fhandler_base::set_name): Expect paths to be NULL.  Build unix_path_name from
win32_path_name when it is a device.
(fhandler_base::reset_unix_path_name): New method.
(fhandler_base::raw_read): Report EISDIR when ERROR_INVALID_FUNCTION or
ERROR_INVALID_PARAMETER and reading a directory.
(fhandler_disk_file::fstat): Don't call stat_dev since we should now never be
calling fhandler_disk_file methods with devices.
(fhandler_base::fhandler_base): Clear {unix,win32}_path_name.
(fhandler_base::~fhandler_base): Always free {unix,win32}_path_name.
(fhandler_disk_file::fhandler_disk_file): Remove set_no_free_names kludge.
(fhandler_disk_file::open): Ditto.
* fhandler.h (fhandler_base::no_free_names): Eliminate.
(fhandler_base::set_no_free_names): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::fhandler_tty_slave): Don't set
unix_path_name here.
* path.cc (fchdir): Lock fd table throughout.  Use new
dtable::reset_unix_path_name method to reset path.
* syscalls.cc (stat_worker): Reorganize to always call fstat method.  Pass
path_conv method to fhandler_*::open.
(chroot): Elminate a goto.
@
text
@d134 1
a134 1
fhandler_dev_raw::open (const char *path, int flags, mode_t)
a135 1
  path_conv real_path (path, PC_SYM_IGNORE);
a137 2
  set_name (path, real_path.get_win32 ());

d141 1
a141 1
  ret = fhandler_base::open (path, flags);
@


1.16
log
@        * fhandler.h (fhandler_socket::fixup_after_exec): Remove inline
        implementation.
        (fhandler_dev_raw::fixup_after_exec): Ditto.
        * fhandler_raw.cc (fhandler_dev_raw::fixup_after_fork): Don't
        duplicate buffer on fork to avoid memory leak.
        (fhandler_dev_raw::fixup_after_exec): New implementation equal to
        former fixup_after_fork() implementation.
        * fhandler_socket.cc (fhandler_socket::fixup_after_fork): Do
        nothing when not using Winsock2.
        (fhandler_socket::fixup_after_exec): New implementation.
        (fhandler_socket::set_close_on_exec): Never call set_inheritance().
@
text
@d23 1
a25 1
#include "path.h"
@


1.16.2.1
log
@Merged changes from HEAD
@
text
@a22 1
#include "path.h"
d25 1
@


1.16.2.2
log
@Merged changes from HEAD
@
text
@a18 1
#include <ntdef.h>
a25 1
#include "ntdll.h"
d87 1
d119 1
a119 2
fhandler_dev_raw::fhandler_dev_raw (DWORD devtype, int nunit)
  : fhandler_base (devtype), unit (nunit)
d122 1
d134 1
a134 1
fhandler_dev_raw::open (path_conv *real_path, int flags, mode_t)
d136 2
a137 6
  if (!wincap.has_raw_devices ())
    {
      set_errno (ENOENT);
      debug_printf("%s is accessible under NT/W2K only",real_path->get_win32());
      return 0;
    }
d139 1
a139 6
  /* Check for illegal flags. */
  if (flags & (O_APPEND | O_EXCL))
    {
      set_errno (EINVAL);
      return 0;
    }
d144 2
a145 19

  DWORD access = GENERIC_READ | SYNCHRONIZE;
  if (get_device () == FH_TAPE
      || (flags & (O_RDONLY | O_WRONLY | O_RDWR)) == O_WRONLY
      || (flags & (O_RDONLY | O_WRONLY | O_RDWR)) == O_RDWR)
    access |= GENERIC_WRITE;

  extern void str2buf2uni (UNICODE_STRING &, WCHAR *, const char *);
  UNICODE_STRING dev;
  WCHAR devname[MAX_PATH + 1];
  str2buf2uni (dev, devname, real_path->get_win32 ());
  OBJECT_ATTRIBUTES attr;
  InitializeObjectAttributes (&attr, &dev, OBJ_CASE_INSENSITIVE, NULL, NULL);

  HANDLE h;
  IO_STATUS_BLOCK io;
  NTSTATUS status = NtOpenFile (&h, access, &attr, &io, wincap.shared (),
				FILE_SYNCHRONOUS_IO_NONALERT);
  if (!NT_SUCCESS (status))
d147 2
a148 3
      set_errno (RtlNtStatusToDosError (status));
      debug_printf ("NtOpenFile: NTSTATUS: %d, Win32: %E", status);
      return 0;
d150 3
a152 10

  set_io_handle (h);
  set_flags (flags);
  set_r_binary (O_BINARY);
  set_w_binary (O_BINARY);

  if (devbufsiz > 1L)
    devbuf = new char [devbufsiz];

  return 1;
d159 21
@


1.16.2.3
log
@Merged changes from HEAD
@
text
@d3 1
a3 1
   Copyright 1999, 2000, 2001, 2002 Red Hat, Inc.
d13 1
d174 2
a175 1
      __seterrno_from_win_error (RtlNtStatusToDosError (status));
d180 3
a182 1
  set_flags (flags & ~O_TEXT, O_BINARY);
@


1.16.2.4
log
@Merged changes from HEAD
@
text
@d178 1
a178 1
  set_flags ((flags & ~O_TEXT) | O_BINARY);
@


1.16.2.5
log
@Merged changes from HEAD
@
text
@d59 1
a59 1
  if (!(ret = ReadFile (fh, buf, to_read, read, 0)))
d139 1
a139 1
      debug_printf ("%s is accessible under NT/W2K only",real_path->get_win32());
@


1.15
log
@Throughout, reorganize header file inclusion to put security.h prior to
fhandler.h.
* fhandler.h (fhandler_base::get_inheritance): New method.
* fhandler_socket.cc (fhandler_socket::create_secret_event): Use proper
close-on-exec inheritance when creating.
(fhandler_socket::check_peer_secret_event): Create handle as non-inheritable.
@
text
@d471 8
@


1.14
log
@forced commit
@
text
@d21 1
@


1.13
log
@Throughout, change fdtab references to cygheap->fdtab.
* child_info.h (cygheap_exec_info): Eliminate special fdtab stuff.
* spawn.cc (spawn_guts): Ditto.
* cygheap.cc (cygheap_init): Initialize fdtab, if appropriate.
* cygheap.h (CYGHEAPSIZE): Include size of init_cygheap.
(_cmalloc_entry): Include fdtab here.
* dtable.h (dtable): Declare/define new methods.
* dtable.cc (dtable::vfork_child_fixup): New method.
(dtable::fixup_after_exec): Remove unneeded extra arguments.
* dcrt0.cc (dll_crt0_1): Ditto.
* environ.cc (getwinenv): Use case sensitive comparison.
(winenv): Make a copy of environment cache to avoid realloc problems when
duplicate environment variables exist in the environment.  (From Egor Duda)
* net.cc (cygwin_socket): Revert Apr 14 change.
* include/sys/file.h: Protect against previous X_OK definition.
* passwd.cc: Eliminate passwd_sem throughout.
* security.cc: Ditto.
* cygwin.din: Export New functions.
* passwd.cc (read_etc_passwd): Make race safe.
(getpwuid_r): New function.
(getpwnam_r): New function.
@
text
@@


1.12
log
@Update copyrights.
@
text
@a18 1
#include "cygheap.h"
d22 2
@


1.11
log
@* dlopen.c (dlopen): Return NULL when name is NULL (suggested by
chrisiasci@@aol.com).
* cygwin.din: Add a new, internally used export - _check_for_executable.
* dcrt0.cc (dll_crt0_1): Set _check_for_executable for older binaries.  Pass
user_data to premain functions.
* fhandler.cc (fhandler_disk_file::open): Only check for executable if the
linked program is intereested in the executable bit.
(fhandler_disk_file::check_execable_p): Delete.
* fhandler.h (executable_states): New enumeration of various states of
executable bit caring.
(fhandler_base::set_execable_p): New method.
* fhandler_termios.cc (fhandler_termios::line_edit): Flag when a signal has
been sent to the tty.  Return -1 when this is so.
* fhandler_console.cc (fhandler_console::read): Return -1 when signal sending
character encountered.
* path.cc (path_conv::check): Record when path refers to a disk device.  Move
executable extension check here.
(check_sysfile): Accomodate new EXEC path states.
(has_suffix): Remove.
(next_suffix): Remove.
(class suffix_scan): New clas.
(suffix_scan::has): New method.
(suffix_scan:next): New method.
(symlink_info::check): Use suffix_scan method to control for scanning for
suffixes.
* path.h (path_conv::exec_state): New method.
* perprocess.h: Make "C" friendly.
* include/cygwin/version.h: Define CYGWIN_VERSION_CHECK_FOR_S_IEXEC.  Bump
CYGWIN_VERSION_API_MINOR.
* include/sys/cygwin.h: Change premain declarations.
* winsup.h: Move __cplusplus test to after builtin defines.
@
text
@d3 1
a3 1
   Copyright 1999, 2000 Cygnus Solutions.
@


1.10
log
@        * fhandler.cc (fhandler_base::open): Always add GENERIC_READ access
        when opening raw disk devices.
        * fhandler_floppy.cc (fhandler_dev_floppy::lseek): Implement bytewise
        access.
        * fhandler_raw.cc (fhandler_dev_raw::open): Always open raw disk device
        binary.
        (fhandler_dev_raw::raw_write): Don't drop read buffer content when
        writing after read.
@
text
@d21 1
@


1.9
log
@        * fhandler.h (fhandler_dev_raw): Add definition for method
        `fixup_after_fork'.
        * fhandler_raw.cc (fhandler_dev_raw::fhandler_dev_raw): Add
        `set_need_fixup_after_fork' call.
        (fhandler_dev_raw::~fhandler_dev_raw): Revert to user space
        allocation.
        (fhandler_dev_raw::open): Ditto.
        (fhandler_dev_raw::dup): Ditto. Reset buffer pointer.
        (fhandler_dev_raw::fixup_after_fork): New function.
        * fhandler_tape.cc (fhandler_dev_tape::open): Revert to user space
        memory allocation.
        (fhandler_dev_tape::ioctl): Ditto. Change behaviour on MTSETBLK when
        new size is 1.
@
text
@d138 4
a141 2
  /* Always open a raw device existing */
  ret = fhandler_base::open (path, flags & ~(O_CREAT | O_TRUNC));
d339 4
a342 1
    devbufstart = devbufend = 0;
@


1.8
log
@* Makefile.in: Add cygheap.o.
* child_info.h: Add specific exec class.
* cygheap.h: New file.  Contains declarations for cygwin heap.
* cygheap.cc: New file.  Implements cygwin heap functions.
* dcrt0.cc (quoted): Simplify due to new method for passing arguments between
cygwin programs.
(alloc_stack_hard_way): Attempt to handle overlapped stack.
(dll_crt0_1): Move child_info processing here.  Accomodate new method for
passing arguments between cygwin programs.  Initialize cygwin heap.  Establish
__argc and __argv variables.
(_dll_crt0): Move most of child_info processing to dll_crt0_1.
(cygwin_dll_init): Remove duplication.
* dtable.cc (dtable::extend): Allocate dtable using cygwin heap.
(dtable::build_fhandler): Ditto for fhandler type being constructed.
(dtable::dup_worker): Free new fhandler from cygwin heap on error.
(dtable::select_*): Don't assume that this == fdtab.
(dtable::linearize_fd_array): Delete.
(dtable::delinearize_fd_array): Delete.
(dtable::fixup_after_exec): New file.
(dtable::vfork_child_dup): Use cygwin heap.
(dtable::vfork_parent_restore): Ditto.
* dtable.h: Remove obsolete methods.  Add new method.
* environ.cc (posify): Eliminate already_posix parameter and logic.
(envsize): New function.
(_addenv): Use envsize.
(environ_init): Accept an argument pointing to an existing environment list.
If supplied, allocate space for this in the the program's heap.
* fhandler.cc (fhandler_base::operator =): Move here from fhandler.h.  Use
cygwin heap to allocate filenames.
(fhandler_base::set_name): Allocate/free names from cygwin heap.
(fhandler_base::linearize): Delete.
(fhandler_base::de_linearize): Delete.
(fhandler_base::operator delete): Free from cygwin heap.
(fhandler_base::~fhandler_base): Ditto.
* fhandler.h: Accomodate elimination of *linearize and other changes above.
* fhandler_console.cc (fhandler_console::fixup_after_exec): Rename from
de_linearize.
* heap.h: New file.
* fhandler_tty.cc (fhandler_tty_slave::fhandler_tty_slave): Use cygwin heap for
name.  fhandler_tty::fixup_after_exec): Rename from de_linearize.
* fork.cc (fork): Call cygheap_fixup_in_child.
* heap.cc: Use declarations in heap.h.
* malloc.cc: Sprinkle assertions throughout to catch attempts to free/realloc
something from the cygwin heap.
* path.cc: Throughout, eliminate use of per-thread cache for cwd.  Use cwd_*
functions rather than cwd_* variables to access cwd_win32 and cwd_posix.
(cwd_win32): New function.
(cwd_posix): New function.
(cwd_hash): New function.
(cwd_fixup_after_exec): New function.
* path.h: Accomodate path.cc changes.
* pinfo.cc (pinfo_init): Accept a pointer to an environment table.  Pass this
to environ_init.  Eliminate old 'title' tests.
* pinfo.h: Accomodate above change in argument.
* spawn.cc (struct av): New method for building argv list.
(av::unshift): New method.
(spawn_guts): Allocate everything that the child process needs in the cygwin
heap and pass a pointer to this to the child.  Build argv list using new
method.  Eliminate delinearize stuff.
* thread.h: Eliminate _cwd_win32 and _cwd_posix buffers.
* winsup.h: Eliminate obsolete functions.  Add envsize() declaration.
@
text
@d120 1
d125 2
a126 2
  if (devbufsiz >= 1L)
    cfree (devbuf);
d143 1
a143 1
	devbuf = (char *) cmalloc (HEAP_BUF, devbufsiz);
d448 3
a450 6
	{
	  fhc->devbuf = (char *) cmalloc (HEAP_BUF, devbufsiz);
	  memcpy (fhc->devbuf, devbuf, devbufend);
	}
      fhc->devbufstart = devbufstart;
      fhc->devbufend = devbufend;
d453 1
a453 1
      fhc->lastblk_to_read = lastblk_to_read;
d460 10
d499 2
a500 2
		char *buf = (char *) cmalloc (HEAP_BUF, op->rd_parm);
		if (devbuf)
d504 1
a504 1
		    cfree (devbuf);
@


1.7
log
@* winsup.h: Eliminate inclusion of most of the cygwin .h files.  Use .h files
only in sources which require them.
* Makefile.in: Generate dependencies with -MD option.
@
text
@d19 1
d29 1
a29 1
                        DWORD *written, int *err)
d37 6
a42 6
          || *err == ERROR_BUS_RESET)
        {
          *err = 0;
          if (!(ret = WriteFile (fh, buf, to_write, written, 0)))
            *err = GetLastError ();
        }
d45 1
a45 1
                  ret, *err, fh, buf, to_write, *written);
d50 1
a50 1
                       DWORD *read, int *err)
d58 6
a63 6
          || *err == ERROR_BUS_RESET)
        {
          *err = 0;
          if (!(ret = ReadFile (fh, buf, to_read, read, 0)))
            *err = GetLastError ();
        }
d66 1
a66 1
                  ret, *err, fh, buf, to_read, *read);
d100 1
a100 1
        to_write = ((devbufend - 1) / 512 + 1) * 512;
d102 1
a102 1
        to_write = devbufend;
d104 1
a104 1
        to_write = devbufsiz;
d106 1
a106 1
          && is_eom (ret))
d124 2
a125 1
  delete[]devbuf;
a129 13
fhandler_dev_raw::de_linearize (const char *buf, const char *unix_name,
			        const char *win32_name)
{
  int ret = fhandler_base::de_linearize (buf, unix_name, win32_name);
  if (devbufsiz > 1L)
    {
      devbuf = new char[devbufsiz];
      devbufstart = devbufend = 0;
    }
  return ret;
}

int
d142 1
a142 1
	devbuf = new char[devbufsiz];
d166 3
a168 3
                 S_IRUSR | S_IWUSR |
                 S_IRGRP | S_IWGRP |
                 S_IROTH | S_IWOTH;
d233 1
a233 1
                  if (get_device () == FH_TAPE)
d235 1
a235 1
                  else
d244 1
a244 1
                  if (varblkop)
d246 1
a246 1
                  else
d254 1
a254 1
                      debug_printf ("return -1, set errno to EACCES");
d268 1
a268 1
                          debug_printf ("return -1, set errno to ENOSPC");
d296 1
a296 1
          debug_printf ("return -1, set errno to EACCES");
d309 1
a309 1
          debug_printf ("return -1, set errno to ENOSPC");
d344 1
a344 1
              (len < devbufsiz || devbufend > 0) && devbufend < devbufsiz)
d448 1
a448 1
	  fhc->devbuf = new char[devbufsiz];
d491 1
a491 1
		char *buf = new char[op->rd_parm];
d496 1
a496 1
		    delete[]devbuf;
@


1.6
log
@* cygerrno.h: New file.  Use this throughout whenever errno manipulation is
required.
* errno.cc: Use DWORD to hold Windows errors.
(geterrno_from_win_error): New function.
(seterrno_from_win_error): Use geterrno_from_win_error to convert supplied
windows error (suggested by Corinna Vinschen).
* path.cc (symlink_info): Add error element.
* path.cc (path_conv::check): Remove errno setting.  Use new symlink_info errno
element to set path_conv error, where appropriate.
(symlink_info::check): Set error element rather than attempting to manipulate
errno.  Add more checks for trailing / and /..  even though they are currently
useless.  Avoid setting EINVAL.
* path.cc (normalize_posix_path): Correct check for trailing /.
@
text
@d20 2
@


1.5
log
@* winsup.h: take out protections of environ, errno, allow C use
* *.cc: put winsup.h before other headers (for __INSIDE_CYGWIN__);
use cur_environ() instead of just environ
* times.cc: remove import protections
* glob.c: add winsup.h
* localtime.c: ditto
* smallprint.c: ditto
* Makefile.in: don't __INSIDE_CYGWIN__ as it messes up profiling.
@
text
@d19 1
@


1.4
log
@        * fhandler.h (class fhandler_dev_raw): Add private member `varblkop'
        to be set when variable blocksize mode is on.
        * fhandler_raw.cc: Eliminate `\n' from trace output.
        (clear): Set `varblkop' to 0.
        (dup): Copy varblkop as well.
        (writebuf): Care for variable blocksize.
        (open): Ditto.
        (raw_read): Ditto.
        (raw_write): Ditto.
        * fhandler_tape.cc (open): Ditto.
        (ioctl): Ditto. Some cleanups.
@
text
@d11 1
a15 1
#include "winsup.h"
@


1.3
log
@Throughout, eliminate third argument to path_conv and use new PC_* constants
for second argument.
* path.h: Generalize SYMLINK_* constants to PC_*.
(path_conv): Create a new method.  Fold third argument into second.
* dll_init.cc (dll_list::alloc): Try harder to find space to allocate dll
struct.
(dll_dllcrt0): Don't check sanity if we've already called dll_crt0.
* path.cc (path_conv::check): Don't check for a null or empty path unless
specifically told with a flag setting.
(check_null_empty_path): New function, adapted from macro.
* syscalls.cc (_rename): Use already-determined file attributes rather than
checking again.
* lib/cygwin/cygwin_attach.dll.c (cygwin_attach_dll): Use a static per_process
structure since this is apparently supposed to be zeroed.
* lib/cygwin_crt0.c (cygwin_crt0): Zero per_process structure sent to older
DLLs.
@
text
@d40 1
a40 1
  syscall_printf ("%d (err %d) = WriteFile (%d, %d, write %d, written %d, 0)\n",
d61 1
a61 1
  syscall_printf ("%d (err %d) = ReadFile (%d, %d, to_read %d, read %d, 0)\n",
d79 1
d91 3
d95 9
a103 8
      DWORD to_write = ((devbufend - 1) / 512 + 1) * 512;
      ret = 0;

      if (!write_file (get_handle (), devbuf, to_write, &written, &ret))
	{
	  if (is_eom (ret))
	    eom_detected = 1;
	}
d150 1
a150 3
	{
	  devbuf = new char[devbufsiz];
	}
d153 1
a153 3
    {
      devbufsiz = 0;
    }
d223 1
a223 1
	      debug_printf ("read %d bytes from buffer (rest %d)\n",
d239 1
a239 1
	      if (len >= devbufsiz)
d241 4
a244 1
		  bytes_to_read = (len / 512) * 512;
d246 1
a246 2
		  debug_printf ("read %d bytes direct from file\n",
				bytes_to_read);
d252 5
a256 2
		  debug_printf ("read %d bytes from file into buffer\n",
				bytes_to_read);
d351 2
a352 1
	  if ((len < devbufsiz || devbufend > 0) && devbufend < devbufsiz)
d363 6
a368 1
	      if (devbufend == devbufsiz)
d464 1
@


1.2
log
@        * fhandler_raw.cc (write_file, read_file): New wrapper functions
        for WriteFile and ReadFile to get rid of ERROR_MEDIA_CHANGED
        and ERROR_BUS_RESET in case of first access to tape.
        (fhandler_dev_raw::raw_write): Use write_file instead of WriteFile.
        (fhandler_dev_raw::raw_read): Use read_file instead of ReadFile.
@
text
@d135 1
a135 1
  path_conv real_path (path, SYMLINK_IGNORE);
@


1.1
log
@Initial revision
@
text
@d20 46
d94 1
a94 1
      if (!WriteFile (get_handle (), devbuf, to_write, &written, 0))
a95 1
	  ret = GetLastError ();
a98 1

a100 3

      syscall_printf ("%d = WriteFile(%d, %d, write %d, written %d, 0)\n",
		      ret, get_handle (), devbuf, to_write, written);
d252 1
a252 1
	      if (!ReadFile (get_handle (), tgt, bytes_to_read, &read2, 0))
a253 3
		  ret = GetLastError ();
		  syscall_printf ("ReadFile %s failed with error %d\n",
				  get_name (), ret);
d294 1
a294 1
  else if (!ReadFile (get_handle (), ptr, len, &bytes_read, 0))
a295 3
      ret = GetLastError ();
      syscall_printf ("ReadFile %s failed with error %d\n",
		      get_name (), ret);
d368 1
a368 4
	      if (!WriteFile (get_handle (), tgt, bytes_to_write, &written, 0))
		ret = GetLastError ();
	      syscall_printf ("%d = WriteFile(%d, %d, write %d, written %d, 0)\n",
			  ret, get_handle (), tgt, bytes_to_write, written);
d411 1
a411 1
      if (!WriteFile (get_handle (), ptr, len, &bytes_written, 0))
a412 3
	  ret = GetLastError ();
	  syscall_printf ("WriteFile %s failed with error %d\n",
			  get_name (), ret);
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
