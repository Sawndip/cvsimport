head	1.48;
access;
symbols
	cygwin-1_7_35-release:1.48
	cygwin-1_7_34-release:1.48
	cygwin-1_7_33-release:1.46.2.1
	cygwin-1_7_32-release:1.46.2.1
	cygwin-1_7_31-release:1.46.2.1
	cygwin-1_7_30-release:1.46
	cygwin-1_7_29-release:1.46
	cygwin-1_7_29-release-branchpoint:1.46.0.2
	cygwin-pre-user-db:1.46
	cygwin-1_7_28-release:1.46
	cygwin-1_7_27-release:1.46
	cygwin-1_7_26-release:1.46
	cygwin-1_7_25-release:1.46
	cygwin-1_7_24-release:1.46
	cygwin-1_7_23-release:1.45
	cygwin-1_7_22-release:1.45
	cygwin-1_7_21-release:1.45
	cygwin-1_7_20-release:1.45
	cygwin-1_7_19-release:1.45
	cygwin-64bit-postmerge:1.45
	cygwin-64bit-premerge-branch:1.44.0.2
	cygwin-64bit-premerge:1.44
	cygwin-1_7_18-release:1.44
	post-ptmalloc3:1.39.10.3
	pre-ptmalloc3:1.39.10.2
	cygwin-1_7_17-release:1.39
	cygwin-64bit-branch:1.39.0.10
	cygwin-1_7_16-release:1.39
	cygwin-1_7_15-release:1.39
	cygwin-1_7_14_2-release:1.39
	cygwin-1_7_14-release:1.39
	cygwin-1_7_12-release:1.39
	cygwin-1_7_11-release:1.39
	cygwin-1_7_10-release:1.39
	signal-rewrite:1.39.0.8
	pre-notty:1.39
	cygwin-1_7_9-release:1.39
	cv-post-1_7_9:1.39.0.6
	cygwin-1_7_8-release:1.39
	cygwin-1_7_7-release:1.39
	cygwin-1_7_5-release:1.39
	cygwin-1_7_4-release:1.39
	cygwin-1_7_3-release:1.39
	cygwin-1_7_2-release:1.39
	fifo_doover3:1.39.0.4
	cygwin-1_7_1-release:1.39
	prefifo:1.39
	cv-branch-2:1.39.0.2
	pre-ripout-set_console_state_for_spawn:1.38
	EOL_registry_mounts:1.37
	preoverlapped:1.37
	drop_9x_support_start:1.37
	cr-0x5f1:1.35.0.8
	cv-branch:1.35.0.6
	pre-ptymaster-archetype:1.35
	cr-0x3b58:1.35.0.4
	cr-0x5ef:1.35.0.2
	after-mmap-privanon-noreserve:1.34
	after-mmap-revamp:1.34
	before-mmap-revamp:1.34
	cgf-more-exit-sync:1.34
	post_wait_sig_exit:1.34
	pre_wait_sig_exit:1.33
	reparent-point:1.30
	noreparent:1.30.0.4
	cr-0x5e6:1.30.0.2
	cr-0x9e:1.27.0.4
	cr-0x9d:1.27.0.2
	cgf-deleteme:1.26.0.2
	pre-sigrewrite:1.26
	corinna-01:1.26
	cr-0x9c:1.25.0.6
	cr-0x9b:1.25.0.4
	cr-0x99:1.25
	Z-emcb-cygwin_daemon:1.25.0.2
	w32api-2_2:1.23
	mingw-runtime-2_4:1.23
	pre-cgf-merge:1.25
	cgf-dev-branch:1.23.0.16
	predaemon:1.19
	cygwin_daemon_merge_HEAD:1.19
	pregp02r1:1.18.0.2
	cygnus_cvs_20020108_pre:1.17
	Z-cygwin_daemon_merge-new_HEAD:1.22
	Z-cygwin_daemon_merge_HEAD:1.22
	cygwin_daemon:1.15.0.4;
locks; strict;
comment	@// @;
expand	@o@;


1.48
date	2015.01.16.16.19.37;	author corinna;	state Exp;
branches;
next	1.47;

1.47
date	2014.06.23.13.45.49;	author corinna;	state Exp;
branches;
next	1.46;

1.46
date	2013.08.14.11.44.22;	author corinna;	state Exp;
branches
	1.46.2.1;
next	1.45;

1.45
date	2013.04.23.09.44.33;	author corinna;	state Exp;
branches;
next	1.44;

1.44
date	2013.01.23.14.24.34;	author cgf;	state Exp;
branches;
next	1.43;

1.43
date	2013.01.23.02.02.36;	author cgf;	state Exp;
branches;
next	1.42;

1.42
date	2013.01.21.04.43.48;	author cgf;	state Exp;
branches;
next	1.41;

1.41
date	2013.01.21.04.34.51;	author cgf;	state Exp;
branches;
next	1.40;

1.40
date	2013.01.20.22.59.58;	author cgf;	state Exp;
branches;
next	1.39;

1.39
date	2009.02.16.20.22.38;	author corinna;	state Exp;
branches
	1.39.10.1;
next	1.38;

1.38
date	2008.04.07.18.45.57;	author cgf;	state Exp;
branches;
next	1.37;

1.37
date	2007.02.08.11.35.52;	author corinna;	state Exp;
branches;
next	1.36;

1.36
date	2007.02.07.17.22.40;	author corinna;	state Exp;
branches;
next	1.35;

1.35
date	2005.12.29.20.46.34;	author cgf;	state Exp;
branches;
next	1.34;

1.34
date	2005.09.14.14.27.55;	author cgf;	state Exp;
branches;
next	1.33;

1.33
date	2005.04.05.04.30.58;	author cgf;	state Exp;
branches;
next	1.32;

1.32
date	2005.02.20.04.25.32;	author cgf;	state Exp;
branches;
next	1.31;

1.31
date	2005.01.12.22.40.45;	author cgf;	state Exp;
branches;
next	1.30;

1.30
date	2004.03.04.05.31.14;	author cgf;	state Exp;
branches;
next	1.29;

1.29
date	2004.02.09.04.04.23;	author cgf;	state Exp;
branches;
next	1.28;

1.28
date	2004.01.20.19.36.34;	author cgf;	state Exp;
branches;
next	1.27;

1.27
date	2004.01.14.15.45.36;	author cgf;	state Exp;
branches;
next	1.26;

1.26
date	2003.09.25.00.37.17;	author cgf;	state Exp;
branches
	1.26.2.1;
next	1.25;

1.25
date	2003.06.16.03.24.11;	author cgf;	state Exp;
branches;
next	1.24;

1.24
date	2003.02.22.23.02.15;	author cgf;	state Exp;
branches;
next	1.23;

1.23
date	2002.09.23.00.31.30;	author cgf;	state Exp;
branches
	1.23.16.1;
next	1.22;

1.22
date	2002.08.18.03.28.52;	author cgf;	state Exp;
branches;
next	1.21;

1.21
date	2002.08.16.19.50.22;	author cgf;	state Exp;
branches;
next	1.20;

1.20
date	2002.06.05.04.01.42;	author cgf;	state Exp;
branches;
next	1.19;

1.19
date	2002.02.22.19.33.41;	author cgf;	state Exp;
branches;
next	1.18;

1.18
date	2002.02.17.04.59.54;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2001.10.15.23.39.32;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2001.10.01.04.10.06;	author cgf;	state Exp;
branches;
next	1.15;

1.15
date	2001.09.11.20.01.00;	author cgf;	state Exp;
branches
	1.15.4.1;
next	1.14;

1.14
date	2001.09.09.03.34.36;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2001.09.06.04.41.59;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2001.07.26.19.22.24;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2001.06.24.22.26.51;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2001.04.18.21.10.12;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2000.09.08.02.56.54;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2000.09.03.04.16.35;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.22.05.10.20;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2000.05.17.05.49.51;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2000.03.15.04.49.36;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2000.02.26.01.11.54;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.21.05.20.37;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.21.03.13.24;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.46.2.1
date	2014.07.15.14.34.38;	author corinna;	state Exp;
branches;
next	;

1.39.10.1
date	2013.01.21.13.52.06;	author corinna;	state Exp;
branches;
next	1.39.10.2;

1.39.10.2
date	2013.01.29.22.16.53;	author corinna;	state Exp;
branches;
next	1.39.10.3;

1.39.10.3
date	2013.02.27.08.36.58;	author corinna;	state Exp;
branches;
next	1.39.10.4;

1.39.10.4
date	2013.03.13.16.51.25;	author corinna;	state Exp;
branches;
next	1.39.10.5;

1.39.10.5
date	2013.04.10.12.29.49;	author corinna;	state Exp;
branches;
next	1.39.10.6;

1.39.10.6
date	2013.04.23.09.06.12;	author corinna;	state Exp;
branches;
next	1.39.10.7;

1.39.10.7
date	2013.04.23.09.08.21;	author corinna;	state Exp;
branches;
next	;

1.26.2.1
date	2004.01.11.18.13.52;	author cgf;	state Exp;
branches;
next	;

1.23.16.1
date	2003.02.14.03.03.28;	author cgf;	state Exp;
branches;
next	1.23.16.2;

1.23.16.2
date	2003.02.23.06.00.22;	author cgf;	state Exp;
branches;
next	1.23.16.3;

1.23.16.3
date	2003.07.06.05.10.43;	author cgf;	state Exp;
branches;
next	;

1.15.4.1
date	2001.10.02.12.09.55;	author rbcollins;	state Exp;
branches;
next	1.15.4.2;

1.15.4.2
date	2002.01.04.03.56.09;	author rbcollins;	state Exp;
branches;
next	1.15.4.3;

1.15.4.3
date	2002.02.28.12.53.25;	author rbcollins;	state Exp;
branches;
next	1.15.4.4;

1.15.4.4
date	2002.06.13.14.34.07;	author rbcollins;	state Exp;
branches;
next	1.15.4.5;

1.15.4.5
date	2002.08.16.21.46.49;	author scottc;	state Exp;
branches;
next	1.15.4.6;

1.15.4.6
date	2002.08.18.12.09.27;	author scottc;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.48
log
@	* gendef: Export _sigbe on 64 bit as well.
	* malloc_wrapper.cc (free): In malloc_printf, call caller_return_address
	instead of __builtin_return_address.
	(malloc): Ditto.
	(realloc): Ditto.
	(calloc): Ditto.
	* miscfuncs.cc (__caller_return_address): New function.
	* miscfuncs.h (caller_return_address): New macro calling
	__caller_return_address.
	(__caller_return_address): Add prototype.
@
text
@/* malloc_wrapper.cc

   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2007, 2008, 2009, 2013, 2015 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include "winsup.h"
#include "cygerrno.h"
#include "security.h"
#include "path.h"
#include "fhandler.h"
#include "dtable.h"
#include "perprocess.h"
#include "miscfuncs.h"
#include "cygmalloc.h"
#ifndef MALLOC_DEBUG
#include <malloc.h>
#endif
extern "C" struct mallinfo dlmallinfo ();

/* we provide these stubs to call into a user's
   provided malloc if there is one - otherwise
   functions we provide - like strdup will cause
   problems if malloced on our heap and free'd on theirs.
*/

static bool use_internal = true;
static bool internal_malloc_determined;

/* These routines are used by the application if it
   doesn't provide its own malloc. */

extern "C" void
free (void *p)
{
  malloc_printf ("(%p), called by %p", p, caller_return_address ());
  if (!use_internal)
    user_data->free (p);
  else
    {
      __malloc_lock ();
      dlfree (p);
      __malloc_unlock ();
    }
}

extern "C" void *
malloc (size_t size)
{
  void *res;
  if (!use_internal)
    res = user_data->malloc (size);
  else
    {
      __malloc_lock ();
      res = dlmalloc (size);
      __malloc_unlock ();
    }
  malloc_printf ("(%ld) = %p, called by %p", size, res,
					     caller_return_address ());
  return res;
}

extern "C" void *
realloc (void *p, size_t size)
{
  void *res;
  if (!use_internal)
    res = user_data->realloc (p, size);
  else
    {
      __malloc_lock ();
      res = dlrealloc (p, size);
      __malloc_unlock ();
    }
  malloc_printf ("(%p, %ld) = %p, called by %p", p, size, res,
  						 caller_return_address ());
  return res;
}

/* BSD extension:  Same as realloc, just if it fails to allocate new memory,
   it frees the incoming pointer. */
extern "C" void *
reallocf (void *p, size_t size)
{
  void *res = realloc (p, size);
  if (!res && p)
    free (p);
  return res;
}

extern "C" void *
calloc (size_t nmemb, size_t size)
{
  void *res;
  if (!use_internal)
    res = user_data->calloc (nmemb, size);
  else
    {
      __malloc_lock ();
      res = dlcalloc (nmemb, size);
      __malloc_unlock ();
    }
  malloc_printf ("(%ld, %ld) = %p, called by %p", nmemb, size, res,
						  caller_return_address ());
  return res;
}

extern "C" int
posix_memalign (void **memptr, size_t alignment, size_t bytes)
{
  save_errno save;

  void *res;
  if (!use_internal)
    return user_data->posix_memalign (memptr, alignment, bytes);
  if ((alignment & (alignment - 1)) != 0)
    return EINVAL;
  __malloc_lock ();
  res = dlmemalign (alignment, bytes);
  __malloc_unlock ();
  if (!res)
    return ENOMEM;
  if (memptr)
    *memptr = res;
  return 0;
}

extern "C" void *
memalign (size_t alignment, size_t bytes)
{
  void *res;
  if (!use_internal)
    {
      set_errno (ENOSYS);
      res = NULL;
    }
  else
    {
      __malloc_lock ();
      res = dlmemalign (alignment, bytes);
      __malloc_unlock ();
    }

  return res;
}

extern "C" void *
valloc (size_t bytes)
{
  void *res;
  if (!use_internal)
    {
      set_errno (ENOSYS);
      res = NULL;
    }
  else
    {
      __malloc_lock ();
      res = dlvalloc (bytes);
      __malloc_unlock ();
    }

  return res;
}

extern "C" size_t
malloc_usable_size (void *p)
{
  size_t res;
  if (!use_internal)
    {
      set_errno (ENOSYS);
      res = 0;
    }
  else
    {
      __malloc_lock ();
      res = dlmalloc_usable_size (p);
      __malloc_unlock ();
    }

  return res;
}

extern "C" int
malloc_trim (size_t pad)
{
  size_t res;
  if (!use_internal)
    {
      set_errno (ENOSYS);
      res = 0;
    }
  else
    {
      __malloc_lock ();
      res = dlmalloc_trim (pad);
      __malloc_unlock ();
    }

  return res;
}

extern "C" int
mallopt (int p, int v)
{
  int res;
  if (!use_internal)
    {
      set_errno (ENOSYS);
      res = 0;
    }
  else
    {
      __malloc_lock ();
      res = dlmallopt (p, v);
      __malloc_unlock ();
    }

  return res;
}

extern "C" void
malloc_stats ()
{
  if (!use_internal)
    set_errno (ENOSYS);
  else
    {
      __malloc_lock ();
      dlmalloc_stats ();
      __malloc_unlock ();
    }
}

extern "C" struct mallinfo
mallinfo ()
{
  struct mallinfo m;
  if (!use_internal)
    {
      memset (&m, 0, sizeof m);
      set_errno (ENOSYS);
    }
  else
    {
      __malloc_lock ();
      m = dlmallinfo ();
      __malloc_unlock ();
    }

  return m;
}

extern "C" char *
strdup (const char *s)
{
  char *p;
  size_t len = strlen (s) + 1;
  if ((p = (char *) malloc (len)) != NULL)
    memcpy (p, s, len);
  return p;
}

/* We use a critical section to lock access to the malloc data
   structures.  This permits malloc to be called from different
   threads.  Note that it does not make malloc reentrant, and it does
   not permit a signal handler to call malloc.  The malloc code in
   newlib will call __malloc_lock and __malloc_unlock at appropriate
   times.  */

muto NO_COPY mallock;

void
malloc_init ()
{
  mallock.init ("mallock");

#ifndef MALLOC_DEBUG
  /* Check if malloc is provided by application. If so, redirect all
     calls to malloc/free/realloc to application provided. This may
     happen if some other dll calls cygwin's malloc, but main code provides
     its own malloc */
  if (!internal_malloc_determined)
    {
      extern void *_sigfe_malloc;
      /* Decide if we are using our own version of malloc by testing the import
	 address from user_data.  */
      use_internal = user_data->malloc == malloc
		     || import_address (user_data->malloc) == &_sigfe_malloc;
      malloc_printf ("using %s malloc", use_internal ? "internal" : "external");
      internal_malloc_determined = true;
    }
#endif
}

extern "C" void
__set_ENOMEM ()
{
  set_errno (ENOMEM);
}
@


1.47
log
@	* malloc_wrapper.cc (mallinfo): Initialize m if external malloc is used,
	too (CID 60120).
@
text
@d4 1
a4 1
   2007, 2008, 2009, 2013 Red Hat, Inc.
d41 1
a41 1
  malloc_printf ("(%p), called by %p", p, __builtin_return_address (0));
d64 2
a65 1
  malloc_printf ("(%ld) = %p, called by %p", size, res, __builtin_return_address (0));
d81 2
a82 1
  malloc_printf ("(%p, %ld) = %p, called by %p", p, size, res, __builtin_return_address (0));
d109 2
a110 1
  malloc_printf ("(%ld, %ld) = %p, called by %p", nmemb, size, res, __builtin_return_address (0));
@


1.46
log
@	* include/sys/cygwin.h (struct per_process): Add posix_memalign.  Reduce
	size of unused2 accordingly.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
	* lib/_cygwin_crt0_common.cc (_cygwin_crt0_common): Initialize
	u->posix_memalign with address of posix_memalign.
	* malloc_wrapper.cc (posix_memalign): Call user-provided posix_memalign
	rather than just returning ENOSYS.
	* globals.cc (__cygwin_user_data): Initialize posix_memalign member.
@
text
@d244 4
a247 1
    set_errno (ENOSYS);
@


1.46.2.1
log
@2014-07-14  Christopher Faylor  <me.cygwin2014@@cgf.cx>

	* sigproc.cc (send_sig): Fix bad format in diagnostic output.

2014-07-14  Yaakov Selkowitz  <yselkowitz@@cygwin.com>

	* thread.cc (pthread_mutex::pthread_mutex): Change default type
	to PTHREAD_MUTEX_NORMAL.
	(pthread_mutex::unlock): Return EPERM if the mutex has no owner and
	the mutex type is PTHREAD_MUTEX_ERRORCHECK, as on Linux.
	(pthread_mutexattr::pthread_mutexattr): Ditto.
	(pthread_mutex_unlock): Do not fail if mutex is a normal mutex
	initializer.
	* include/pthread.h (PTHREAD_MUTEX_INITIALIZER): Redefine as
	PTHREAD_NORMAL_MUTEX_INITIALIZER_NP.

2014-07-09  Corinna Vinschen  <corinna@@vinschen.de>

	* thread.cc (pthread::create): Use PTHREAD_DEFAULT_STACKSIZE stacksize
	if attr.stacksize is 0.
	(pthread_attr::pthread_attr): Initialize stacksize to 0 to align more
	closely to Linux.
	(pthread_attr_getstack): Fix incorrect stackaddr computation.  Return
	stackaddr just like pthread_attr_getstackaddr.  Remove slightly off
	comment.
	(pthread_attr_getstackaddr): Remove slightly off comment.
	(pthread_getattr_np): Return stackaddr and stacksize based on the full
	allocated stackarea.

2014-07-09  Corinna Vinschen  <corinna@@vinschen.de>

	* exceptions.cc (exception::myfault_handle): Rephrase comment.

2014-07-09  Corinna Vinschen  <corinna@@vinschen.de>

	* exceptions.cc (exception::myfault_handle): Fix typo in comment.

2014-07-07  Corinna Vinschen  <corinna@@vinschen.de>

	* exceptions.cc (exception::myfault_handle): Disable handling
	STATUS_STACK_OVERFLOW.  Explain why.

2014-07-07  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_socket.cc (fhandler_socket::send_internal): Improve loop to
	write streams in chunks of wmem() bytes to raise performance when
	writing small buffers.  Rename variables and add comments to help
	understanding the code in years to come.

2014-07-07  Corinna Vinschen  <corinna@@vinschen.de>

	* libc/minires.c (minires_dprintf): Change "Minires" to "Resolv" to
	differ from external minres lib.
	(res_nquerydomain): Fix off-by-one in domain concatenation.  Add debug
	output.

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* spawn.cc (find_exec): Initialize err (CID 60111).
	* strace.cc (strace::activate): Fix potential buffer overrun (CID 59938)
	* syscalls.cc (popen): Close parent pipe descriptor via fclosing fp on
	error to avoid resource leak (CID 59981).
	* thread.cc (pthread::exit): Avoid accessing cygtls member after
	deleting "this" (CID 60217).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* select.cc (start_thread_socket): Delete si on early return in case of
	an error (CID 59967).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* regex/regcomp.c (computematchjumps): Free local memory in case of
	error (CID 59975).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* mount.cc (fs_info::update): Define dir in the outermost scope to avoid
	accessing out-of-scope value (CID 60027).  Always initialize attr to
	upath (CID 60113).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* malloc_wrapper.cc (mallinfo): Initialize m if external malloc is used,
	too (CID 60120).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* localtime.cc (tzload): Fix leaking memory (CID 60001).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* environ.cc (regopt): Allocate small local buffer to avoid copying
	twice.  Fixes resource leak (CID 60012).  Add comment.

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* dll_init.cc (dll_list::alloc): Fix buffer overrun (CID 59940).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* dcrt0.cc (insert_file): Fix resource leaks (CIDs 59987, 59988).
@
text
@d244 1
a244 4
    {
      memset (&m, 0, sizeof m);
      set_errno (ENOSYS);
    }
@


1.45
log
@	* Merge in cygwin-64bit-branch.
@
text
@d118 1
a118 1
    return ENOSYS;
@


1.44
log
@* miscfuncs.cc (__import_address): Check if malloc field points directly at
'malloc'.
@
text
@d64 1
a64 1
  malloc_printf ("(%d) = %x, called by %p", size, res, __builtin_return_address (0));
d80 1
a80 1
  malloc_printf ("(%x, %d) = %x, called by %x", p, size, res, __builtin_return_address (0));
d107 1
a107 1
  malloc_printf ("(%d, %d) = %x, called by %x", nmemb, size, res, __builtin_return_address (0));
@


1.43
log
@* miscfuncs.cc (__import_address): Avoid treating random instructions as import
jump.
* malloc_wrapper.cc (malloc_init): Remove comment about 64-bit.
@
text
@d289 2
a290 1
      use_internal = import_address (user_data->malloc) == &_sigfe_malloc;
@


1.42
log
@* malloc_wrapper.cc (malloc_init): Re-add inadvertently dropped comment which
explains what's going on with the use_internal calculation.
@
text
@d288 1
a288 2
	 address from user_data.  This will likely need to be updated
	 for 64-bit.  */
@


1.41
log
@Throughout, change __attribute__ ((regparm (N))) to just __regN.  Throughout,
(mainly in fhandler*) start fixing gcc 4.7.2 mismatch between regparm
definitions and declarations.
* gendef: Define some functions to take @@ declaration to accommodate _regN
defines which use __stdcall.
* gentls_offsets: Define __regN macros as empty.
* autoload.cc (wsock_init): Remove unneeded regparm attribute.
* winsup.h (__reg1): Define.
(__reg2): Define.
(__reg3): Define.
* advapi32.cc (DuplicateTokenEx): Coerce some initializers to avoid warnings
from gcc 4.7.2.
* exceptions.cc (status_info): Declare struct to use NTSTATUS.
(cygwin_exception::dump_exception): Coerce e->ExceptionCode to NTSTATUS.
* fhandler_clipboard.cc (cygnativeformat): Redefine as UINT to avoid gcc 4.7.2
warnings.
(fhandler_dev_clipboard::read): Ditto.
@
text
@d287 3
@


1.40
log
@* malloc_wrapper.cc: Change 'use_internal_malloc' to 'use_internal' throughout.
(export_malloc_called): Delete.
(internal_malloc_determined): New variable.
(malloc_init): Control calculation of internal/external malloc based on
'internal_malloc_determined'.  Use import_address() to determine if malloc in
user_data is ours or not.
* miscfuncs.cc (thread_wrapper): Make static.
(__import_address): Define new function.
* miscfuncs.h (import_address): New define.
(__import_address): Declare new function.
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
   2006, 2007, 2013 Red Hat, Inc.
@


1.39
log
@	* cygwin.din: Export reallocf.
	* malloc_wrapper.cc( reallocf): New function.
	* posix.sgml: Add reallocf to BSD section.
	* include/cygwin/version.h: Bump API minor number.
	* libc/fts.c: Remove erroneous reallocf definition.
@
text
@d4 1
a4 4
   2006, 2007 Red Hat, Inc.

   Originally written by Steve Chamberlain of Cygnus Support
   sac@@cygnus.com
d19 1
d32 2
a33 2
static int export_malloc_called;
static int use_internal_malloc = 1;
d42 1
a42 1
  if (!use_internal_malloc)
d56 1
a56 2
  export_malloc_called = 1;
  if (!use_internal_malloc)
d72 1
a72 1
  if (!use_internal_malloc)
d99 1
a99 1
  if (!use_internal_malloc)
d117 1
a117 1
  if (!use_internal_malloc)
d135 1
a135 1
  if (!use_internal_malloc)
d154 1
a154 1
  if (!use_internal_malloc)
d173 1
a173 1
  if (!use_internal_malloc)
d192 1
a192 1
  if (!use_internal_malloc)
d211 1
a211 1
  if (!use_internal_malloc)
d229 1
a229 1
  if (!use_internal_malloc)
d243 1
a243 1
  if (!use_internal_malloc)
d284 1
a284 1
  if (!in_forkee)
d286 4
a289 8
      user_data->free (user_data->malloc (16));
      if (export_malloc_called)
	malloc_printf ("using internal malloc");
      else
	{
	  use_internal_malloc = 0;
	  malloc_printf ("using external malloc");
	}
@


1.39.10.1
log
@Pull in changes from HEAD
@
text
@d3 5
a7 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2007, 2008, 2009, 2013 Red Hat, Inc.
a21 1
#include "miscfuncs.h"
d34 2
a35 2
static bool use_internal = true;
static bool internal_malloc_determined;
d44 1
a44 1
  if (!use_internal)
d58 2
a59 1
  if (!use_internal)
d75 1
a75 1
  if (!use_internal)
d102 1
a102 1
  if (!use_internal)
d120 1
a120 1
  if (!use_internal)
d138 1
a138 1
  if (!use_internal)
d157 1
a157 1
  if (!use_internal)
d176 1
a176 1
  if (!use_internal)
d195 1
a195 1
  if (!use_internal)
d214 1
a214 1
  if (!use_internal)
d232 1
a232 1
  if (!use_internal)
d246 1
a246 1
  if (!use_internal)
d287 1
a287 1
  if (!internal_malloc_determined)
d289 8
a296 7
      extern void *_sigfe_malloc;
      /* Decide if we are using our own version of malloc by testing the import
	 address from user_data.  This will likely need to be updated
	 for 64-bit.  */
      use_internal = import_address (user_data->malloc) == &_sigfe_malloc;
      malloc_printf ("using %s malloc", use_internal ? "internal" : "external");
      internal_malloc_determined = true;
@


1.39.10.2
log
@...and pull in changes from HEAD
@
text
@d288 3
a290 3
	 address from user_data.  */
      use_internal = user_data->malloc == malloc
		     || import_address (user_data->malloc) == &_sigfe_malloc;
@


1.39.10.3
log
@	* configure.ac (MALLOC_OFILES): Add ptmalloc3.o.
	* configure: Regenerate.
	* cygmalloc.h: Declare pt* functions rather than dl* functions.
	(mmap64): Declare.
	(mmap): Define as mmap64.
	(__malloc_lock): Drop macro.
	(__malloc_unlock): Ditto.
	(MSPACES): Define.
	(ONLY_MSPACES): Define.
	* debug.h: Include malloc.h rather than otherwise unused dlmalloc.h.
	* fork.cc (frok::parent): Drop malloc locking since that's performed
	by malloc_atfork now.
	* heap.cc (heap_init): Accommodate the fact that there's a chance
	that no heap space has been allocated at fork time.
	* malloc-private.h: New file from ptmalloc3, having malloc-machine.h
	and malloc-2.8.3.h folded in.
	* malloc.cc: Replaced by new file from ptmalloc3.
	* malloc_wrapper.cc: Throughout, remove malloc locks and call pt*
	functions rather than dl* functions.
	* pinfo.cc (winpids::set): Drop malloc locking.
	* ptmalloc3.cc: New file from ptmalloc3.
@
text
@d24 1
a24 1
extern "C" struct mallinfo ptmallinfo ();
d45 5
a49 1
    ptfree (p);
d59 5
a63 1
    res = ptmalloc (size);
d75 5
a79 1
    res = ptrealloc (p, size);
d102 5
a106 1
    res = ptcalloc (nmemb, size);
d121 3
a123 1
  res = ptmemalign (alignment, bytes);
d141 5
a145 1
    res = ptmemalign (alignment, bytes);
d160 5
a164 1
    res = ptvalloc (bytes);
d179 5
a183 1
    res = ptmalloc_usable_size (p);
d198 5
a202 1
    res = ptmalloc_trim (pad);
d217 5
a221 1
    res = ptmallopt (p, v);
d232 5
a236 1
    ptmalloc_stats ();
d246 5
a250 1
    m = ptmallinfo ();
d265 9
d277 2
@


1.39.10.4
log
@	* Revert to old malloc.
	* mmap.cc (MMAP_STORAGE_LOW): Set higher.  Add comment.
	(MMAP_STORAGE_HIGH): Add comment.
	(class mmap_allocator): Change comment.  Add mmap_current_low member.
	(mmap_allocator::mmap_allocator): Define default constructor.
	(mmap_allocator::alloc): Change to a round-robin mechanism.  Add or
	change comments accordingly.
@
text
@d24 1
a24 1
extern "C" struct mallinfo dlmallinfo ();
d45 1
a45 5
    {
      __malloc_lock ();
      dlfree (p);
      __malloc_unlock ();
    }
d55 1
a55 5
    {
      __malloc_lock ();
      res = dlmalloc (size);
      __malloc_unlock ();
    }
d67 1
a67 5
    {
      __malloc_lock ();
      res = dlrealloc (p, size);
      __malloc_unlock ();
    }
d90 1
a90 5
    {
      __malloc_lock ();
      res = dlcalloc (nmemb, size);
      __malloc_unlock ();
    }
d105 1
a105 3
  __malloc_lock ();
  res = dlmemalign (alignment, bytes);
  __malloc_unlock ();
d123 1
a123 5
    {
      __malloc_lock ();
      res = dlmemalign (alignment, bytes);
      __malloc_unlock ();
    }
d138 1
a138 5
    {
      __malloc_lock ();
      res = dlvalloc (bytes);
      __malloc_unlock ();
    }
d153 1
a153 5
    {
      __malloc_lock ();
      res = dlmalloc_usable_size (p);
      __malloc_unlock ();
    }
d168 1
a168 5
    {
      __malloc_lock ();
      res = dlmalloc_trim (pad);
      __malloc_unlock ();
    }
d183 1
a183 5
    {
      __malloc_lock ();
      res = dlmallopt (p, v);
      __malloc_unlock ();
    }
d194 1
a194 5
    {
      __malloc_lock ();
      dlmalloc_stats ();
      __malloc_unlock ();
    }
d204 1
a204 5
    {
      __malloc_lock ();
      m = dlmallinfo ();
      __malloc_unlock ();
    }
a218 9
/* We use a critical section to lock access to the malloc data
   structures.  This permits malloc to be called from different
   threads.  Note that it does not make malloc reentrant, and it does
   not permit a signal handler to call malloc.  The malloc code in
   newlib will call __malloc_lock and __malloc_unlock at appropriate
   times.  */

muto NO_COPY mallock;

a221 2
  mallock.init ("mallock");

@


1.39.10.5
log
@	* Reinstantiate ptmalloc3.
	* configure.ac (MALLOC_OFILES): Drop here.
	* configure: Regenerate.
	* Makefile.in (MALLOC_OFILES): Set to fixed value here.
	* cygmalloc.h (HAVE_MORECORE): Define.
	* malloc.cc (init_user_mstate): Don't disable MORECORE if building
	with ONLY_MSPACES.
@
text
@d24 1
a24 1
extern "C" struct mallinfo ptmallinfo ();
d45 5
a49 1
    ptfree (p);
d59 5
a63 1
    res = ptmalloc (size);
d75 5
a79 1
    res = ptrealloc (p, size);
d102 5
a106 1
    res = ptcalloc (nmemb, size);
d121 3
a123 1
  res = ptmemalign (alignment, bytes);
d141 5
a145 1
    res = ptmemalign (alignment, bytes);
d160 5
a164 1
    res = ptvalloc (bytes);
d179 5
a183 1
    res = ptmalloc_usable_size (p);
d198 5
a202 1
    res = ptmalloc_trim (pad);
d217 5
a221 1
    res = ptmallopt (p, v);
d232 5
a236 1
    ptmalloc_stats ();
d246 5
a250 1
    m = ptmallinfo ();
d265 9
d277 2
@


1.39.10.6
log
@	* Remove ptmalloc3 once and for all.
@
text
@d24 1
a24 1
extern "C" struct mallinfo dlmallinfo ();
d45 1
a45 5
    {
      __malloc_lock ();
      dlfree (p);
      __malloc_unlock ();
    }
d55 1
a55 5
    {
      __malloc_lock ();
      res = dlmalloc (size);
      __malloc_unlock ();
    }
d67 1
a67 5
    {
      __malloc_lock ();
      res = dlrealloc (p, size);
      __malloc_unlock ();
    }
d90 1
a90 5
    {
      __malloc_lock ();
      res = dlcalloc (nmemb, size);
      __malloc_unlock ();
    }
d105 1
a105 3
  __malloc_lock ();
  res = dlmemalign (alignment, bytes);
  __malloc_unlock ();
d123 1
a123 5
    {
      __malloc_lock ();
      res = dlmemalign (alignment, bytes);
      __malloc_unlock ();
    }
d138 1
a138 5
    {
      __malloc_lock ();
      res = dlvalloc (bytes);
      __malloc_unlock ();
    }
d153 1
a153 5
    {
      __malloc_lock ();
      res = dlmalloc_usable_size (p);
      __malloc_unlock ();
    }
d168 1
a168 5
    {
      __malloc_lock ();
      res = dlmalloc_trim (pad);
      __malloc_unlock ();
    }
d183 1
a183 5
    {
      __malloc_lock ();
      res = dlmallopt (p, v);
      __malloc_unlock ();
    }
d194 1
a194 5
    {
      __malloc_lock ();
      dlmalloc_stats ();
      __malloc_unlock ();
    }
d204 1
a204 5
    {
      __malloc_lock ();
      m = dlmallinfo ();
      __malloc_unlock ();
    }
a218 9
/* We use a critical section to lock access to the malloc data
   structures.  This permits malloc to be called from different
   threads.  Note that it does not make malloc reentrant, and it does
   not permit a signal handler to call malloc.  The malloc code in
   newlib will call __malloc_lock and __malloc_unlock at appropriate
   times.  */

muto NO_COPY mallock;

a221 2
  mallock.init ("mallock");

@


1.39.10.7
log
@	* malloc_wrapper.cc: Throughout fix format specifiers in malloc_printf.
@
text
@d64 1
a64 1
  malloc_printf ("(%ld) = %p, called by %p", size, res, __builtin_return_address (0));
d80 1
a80 1
  malloc_printf ("(%p, %ld) = %p, called by %p", p, size, res, __builtin_return_address (0));
d107 1
a107 1
  malloc_printf ("(%ld, %ld) = %p, called by %p", nmemb, size, res, __builtin_return_address (0));
@


1.38
log
@Remove unneeded header files from source files throughout.
@
text
@d87 11
@


1.37
log
@	* cygmalloc.h (__set_ENOMEM): Declare.
	(MALLOC_FAILURE_ACTION): Call __set_ENOMEM.
	* malloc_wrapper.cc (malloc) Remove setting errno here.
	(realloc): Ditto.
	(calloc): Ditto.
	(memalign): Ditto.
	(valloc): Ditto.
	(posix_memalign): Save and restore errno.
@
text
@a15 2
#include <stdlib.h>
#include <assert.h>
a20 3
#include "cygheap.h"
#include "heap.h"
#include "sync.h"
@


1.36
log
@	* cygmalloc.h (MALLOC_FAILURE_ACTION): Define empty.
	* cygwin.din (posix_madvise): Export.
	(posix_memalign): Export.
	* fhandler.cc (fhandler_base::fpathconf): Return useful values in
	_PC_VDISABLE, _PC_SYNC_IO and _PC_SYMLINK_MAX cases.
	* malloc_wrapper.cc (malloc): Set errno here since it's not set in
	dlmalloc.c anymore.
	(realloc): Ditto.
	(calloc): Ditto.
	(memalign): Ditto.
	(valloc): Ditto.
	(posix_memalign): New function.
	* mmap.cc (posix_madvise): New function.
	* sysconf.cc (get_open_max): New function.
	(get_page_size): Ditto.
	(get_nproc_values): Ditto.
	(get_avphys): Ditto.
	(sc_type): New type.
	(sca): New array to map _SC_xxx options to sysconf return values.
	(sysconf): Reimplement using sca array.
	* include/limits.h: Add all missing values as defined by SUSv3.
	* include/pthread.h (PTHREAD_DESTRUCTOR_ITERATIONS): Move definition
	to sys/limits.h.
	(PTHREAD_KEYS_MAX): Ditto.
	* include/semaphore.h (SEM_VALUE_MAX): Ditto.
	* include/cygwin/stdlib.h (posix_memalign): Declare.
	* include/cygwin/version.h: Bump API minor number.
	* include/sys/mman.h: Add posix_madvise flags.
	(posix_madvise): Declare.
	* include/sys/termios.h (_POSIX_VDISABLE): Move definition to
	sys/limits.h.
@
text
@a72 2
  if (!res)
    set_errno (ENOMEM);
a88 2
  if (!res)
    set_errno (ENOMEM);
a104 2
  if (!res)
    set_errno (ENOMEM);
d111 2
a141 2
      if (!res)
	set_errno (ENOMEM);
a160 2
      if (!res)
	set_errno (ENOMEM);
d294 6
@


1.35
log
@*** cygwin DLL Changes:
* child_info.h (CURR_CHILD_INFO_MAGIC): Reset.
(child_info::dwProcessId): Delete.
(child_info::straced): New variable.
(child_info::handle_fork): New member function.
* dcrt0.cc (in_forkee): New global variable.
(__cygwin_user_data::forkee): Mark as obsolete.
(do_global_ctors): Use in_forkee rather than user_data->forkee.
(get_cygwin_startup_info): Ditto.  Deal with new straced field to allow strace
to deal with children of attached processes.
(initial_env): Accommodate changes to strace::hello.
(child_info_fork::handle_fork): Rename from plain old 'handle_fork'.  Move
alloc_stack() call elsewhere.
(dll_crt0_0): Fill out more of user_data.  Reference handle_fork via fork_info.
Add some debugging output.
(_dll_crt0): Don't wait for sync thread if sync_startup is invalid.  Zero
sync_startup here.  Call alloc_stack() here, if appropriate.
(dll_crt0_1): Use in_forkee rather than user_data->forkee.
(dll_crt0): Ditto.
* malloc_wrapper.cc (malloc_init): Ditto.
* dll_init.cc (in_forkee): Remove local static version of this variable.
(dll_list::load_after_fork): Don't set in_forkee here.
* external.cc (cygwin_internal): Use strace method rather than accessing field
directly.
* fhandler.cc (fhandler_base::read): Ditto.
* fhandler_tty.cc (fhandler_tty_common::__acquire_output_mutex): Ditto.
* fork.cc (frok::parent): Invoke strace write_childpid to communicate with
potential strace.
(child_copy): Add more detail to debugging output.
* init.cc (calibration_id): New static variable.
(prime_threads): Set sync_startup to invalid handle if we already know about
thread_func_ix.  Use static calibration_id to hold calibration thread id.
* munge_threadfunc (munge_threadfunc): Don't try to debug if we don't find
threadfunc_ix.
(dll_entry): Avoid calling munge_threadfunc and _cygtls::remove on non-cygwin
threads invoked during process startup.
* pinfo.cc (set_myself): Always call strace.hello here regardless of DEBUGGING.
* sigproc.cc (child_info::child_info): Remove spurious handling of dwProcessId.
Set straced as appropriate.
* spawn.cc (spawn_guts): Rename ciresrv to ch.  Invoke strace write_childpid to
communicate with potential strace.
* strace.cc: Include child_info.h.
(strace::hello): Remove inited test.  Use active() method to test if strace has
been activated.  Handle case where we are started before
(mypid): New function.
(strace::vsprntf): Try to deal more intelligently with case where progname may
not be filled out.  Put pid in parentheses if it is a windows pid rather than a
cygwin pid.  myself has been filled out.
(strace::write_childpid): New function for notifying strace about the creation
of children.
(strace::vprntf): Use strace method rather than accessing field directly.
(strace_printf): Ditto.
(strace::wm): Ditto.
* winsup.h (in_forkee): Declare.
* include/sys/strace.h (strace::write_childpid): Declare new function.
(strace::attached): Define new function.
(strace::active): Ditto.
(strace::active_val): Ditto.
(_STRACE_ON): Delete.
(_STRACE_OFF): Ditto.
(define_strace0): Use strace method rather than accessing field directly.
(strace_printf_wrap): Ditto.
(strace_printf_wrap1): Ditto.

*** cygwin utils changes:
* strace.cc (nprocesses): Make static global.
(quiet): New variable.
(strace_active): Ditto.
(add_child): Increment nprocesses here.  Don't add a child if it is already
added (windows bug?).  Report on child if not quiet.
(get_child): Just return NULL if child not found.
(remove_child): Report on child if not quiet.
(attach_process): Don't complain if given a windows process.  Use windows pid
in error.
(handle_output_debug_string): Issue error if trying to manipulate a process
that we don't know about.  Handle _STRACE_CHILD_PID - attach to reported child
when we get this.
(proc_child): Move nprocesses to file scope.  Report on exceptions.
(longopts): Implement "--quiet".
(opts): Implement "-q".
(main): Manipulate quiet flag.
* utils.sgml (strace): Add words describing '-q'.
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005
   Red Hat, Inc.
d73 2
d91 2
d109 2
d114 18
d146 2
d167 2
@


1.34
log
@Remove some more unneeded 'return;'s throughout.
@
text
@d261 1
a261 1
  if (!user_data->forkee)
@


1.33
log
@* sync.h (muto::operator int): New operator.
(locker): Remove unused class.
(new_muto): Delete.
(new_muto1): Ditto.
(new_muto_name): Ditto.
* cygheap.cc (cygheap_setup_for_child): Reflect use of static storage for muto
rather than pointer.
(_csbrk): Ditto.
(_cmalloc): Ditto.
(_cmalloc): Ditto.
(_cfree): Ditto.
* cygheap.h (cwdstuff::cwd_lock): Ditto.
(cwdstuff::get_drive): Ditto.
* cygmalloc.h (__malloc_lock): Ditto.
(__malloc_unlock): Ditto.
* cygtls.cc (sentry::lock): Ditto.
(sentry::sentry): Ditto.
(~sentry): Ditto.
(_cygtls::init): Ditto.
* dcrt0.cc: Ditto.
(cygwin_atexit): Ditto.
(cygwin_exit): Ditto.
* debug.cc (lock_debug::locker): Ditto.
(lock_debug::lock_debug): Ditto.
(lock_debug::unlock): Ditto.
(debug_init): Ditto.
* dtable.cc (dtable::init_lock): Ditto.
* dtable.h (dtable::lock_cs): Ditto.
(dtable::lock): Ditto.
(dtable::unlock): Ditto.
* exceptions.cc (mask_sync): Ditto.
(sighold): Ditto.
(set_process_mask_delta): Ditto.
(set_signal_mask): Ditto.
(events_init): Ditto.
* grp.cc (pwdgrp::pwdgrp): Ditto.
* malloc_wrapper.cc (mallock): Ditto.
(malloc_init): Ditto.
* path.cc (cwdstuff::cwd_lock): Ditto.
(cwdstuff::get_hash): Ditto.
(cwdstuff::get_hash): Ditto.
(cwdstuff::init): Ditto.
(cwdstuff::set): Ditto.
(cwdstuff::get): Ditto.
* pwdgrp.h (pwdgrp::pglock): Ditto.
(pwdgrp::refresh): Ditto.
* sigproc.cc (sync_proc_subproc): Ditto.
(get_proc_lock): Ditto.
(proc_subproc): Ditto.
(_cygtls::remove_wq): Ditto.
(proc_terminate): Ditto.
(sigproc_init): Ditto.
* timer.cc (lock_timer_tracker::protect): Ditto.
(lock_timer_tracker::lock_timer_tracker): Ditto.
(lock_timer_tracker::~lock_timer_tracker): Ditto.
* wininfo.cc (wininfo::_lock;): Ditto.
(wininfo::winthread): Ditto.
(operator HWND): Ditto.
(wininfo::lock): Ditto.
(wininfo::release): Ditto.
* wininfo.h (wininfo::_lock;): Ditto.
@
text
@a213 2

  return;
@


1.32
log
@copyright
@
text
@d251 1
a251 1
NO_COPY muto *mallock = NULL;
d256 1
a256 1
  new_muto (mallock);
@


1.31
log
@Reorganize header file inclusion throughout so that cygerrno.h comes first.
* fhandler.h (select_record::thread_errno): Save any encountered errno here.
(select_record::set_select_errno): New function.
(select_record::saw_error): New function.
(select_record::select_record): Initialize thread_errno to zero.
* select.cc (set_handle_or_return_if_not_open): Set thread_errno on failure.
(select_stuff::wait): Record errno for later resurrection in calling thread.
(peek_serial): Ditto.
@
text
@d3 2
a4 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Red Hat, Inc.
@


1.30
log
@* gendef (sigreturn): Call stabilize_sig_stack to ensure that there are no
pending signals.  Restore edx later.
(sigdelayed): Save edx earlier.
* malloc_wrapper.cc (malloc_init): Add some more debugging output.
@
text
@d17 1
a21 1
#include "cygerrno.h"
@


1.29
log
@* debug.h (console_printf): Define for non-debugging condition.
* cygtls.h (_threadinfo::lock): Remove wait argument.
(_threadinfo::interrupt_setup): Remove retaddr argument.
* exceptions.cc (_threadinfo::interrupt_setup): Ditto.
(_threadinfo::interrupt_now): Accommodate change to interrupt_setup argument.
(setup_handler): Ditto.  Always lock sig stack prior to determining interrupt
method.
* gendef (_sigfe): Correct thinko regarding cmpxchg.
(_sigbe): Ditto.
(_threadinfo::lock): Ditto.
(_threadinfo::pop): Eliminate left-over stack unlock.
* sigproc.cc (proc_subproc): Chnage debugging output to printed warning.
@
text
@d258 1
a258 1
  /* Check if mallock is provided by application. If so, redirect all
d265 7
a271 2
      if (!export_malloc_called)
	use_internal_malloc = 0;
@


1.28
log
@* include/cygwin/version.h: Bump DLL minor number to 8.
* cygmalloc.h: Make more concessions to attempts to get debugging malloc
working.
* debug.h: Ditto.
* dlmalloc.cc: Ditto.
* dlmalloc.h: Ditto.
* malloc_wrapper.cc: Ditto.
* perthread.h (perthread::create): Use calloc to ensure zeroed memory.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
@


1.27
log
@* cygtls.h (_threadinfo::call): Remove regparm declaration to work around
compiler bug.
* autoload.cc (TryEnterCriticalSection): Remove.
* dcrt0.cc (dll_crt0_0): Delete inappropriate setting of _my_tls.stackptr to
NULL since it has really bad consequences.  Make 'si' an automatic variable.
* cygtls.cc (_threadinfo::init_thread): Correct thinko which caused thread list
to be allocated every time.
* cygtls.h (CYGTLS_PADSIZE): Define as const int.
* sync.h: Make multiple inclusion safe.
(muto::next): Eliminate.
(muto::exiting_thread): New variable.
(muto::set_exiting_thread): New function.
(new_muto): Change to use different section for mutos since c++ give
inexplicable warning in some cases otherwise.
(new_muto1): Ditto.
* dcrt0.cc (do_exit): Call muto::set_exiting_thread here.
* sync.cc (muto_start): Eliminate.
(muto::acquire): Always give exiting thread a lock.  Never give thread a lock
if exiting.
(muto::release): Ditto for releasing.
* dtable.cc (dtable::init_lock): Unline function and define here.
* dtable.h (lock_cs): Define as a muto since critical sections seem to work
oddly on Windows Me.
(lock): Accommodate switch to muto.
(unlock): Ditto.
* exceptions.cc (setup_handler): Don't worry about acquiring mutos since that
hasn't mattered for a long time.
(signal_exit): Ditto: muto stuff will be handled automatically on exit now.
* Makefile.in (DLL_IMPORTS): Link advapi32 to ensure proper DLL initialization.
* autoload.cc (RegCloseKey): Arbitrarily choose this function as a "seed" to
pull the advapi32 link library in.  So, comment out the autoloading.
* cygtls.cc (_threadinfo::init_thread): Just clear CYGTLS_PADSIZE.
(_threadinfo::remove): Add debugging.
(_threadinfo::find_tls): Ditto.
* cygtls.h (_threadinfo::padding): Make zero length (for now?).
* dcrt0.cc (dll_crt0_0): Move more initialization here from dll_crt0_1.
(dll_crt0_1): See above.
* dtable.h (dtable::lock): Remove commented out critical section locking.
* dtable.h (dtable::init_lock): Remove commented out critical section locking.
* dtable.h (dtable::unlock): Remove commented out critical section locking.
* exceptions.cc (interruptible): bool'ize.
* init.cc (threadfunc_fe): Revert to storing threadfunc at stack bottom.
(munge_threadfunc): Ditto.  Avoid adding overhead to calibration_thread.
(prime_threads): Don't initialize tls stuff.
(dll_entry): Make minor change to initialization order.
* tlsoffsets.h: Regenerate.
* sigproc.cc (wait_sig): Add sanity check for end of process thread exit.
* select.h: Make minor formatting change.
* Makefile.in: Add still more -fomit-frame-pointer functions.
* dtable.h (dtable::lock): New function.
(dtable::unlock): New function.
(dtable::init_lock): New function.
* cygheap.h (HEAP_TLS): Declare new enum value.
(init_cygheap::threadlist): Declare new array.
(init_cygheap::sthreads): Declare new variable.
(cygheap_fdmanip::~cygheap_fdmanip): Use new dtable lock/unlock functions.
(cygheap_fdnew::cygheap_fdnew): Ditto.
(cygheap_fdget::cygheap_fdget): Ditto.
* dtable.cc (dtable_init): Initialize fdtab critical section.
(dtable::fixup_after_fork): Ditto.
(dtable::fixup_after_exec): Ditto.
(dtable::dup2): Use lock/unlock calls to protect access to fdtab.
(dtable::find_fifo): Ditto.
(dtable::fixup_before_fork): Ditto.
(dtable::fixup_before_exec): Ditto.
(dtable::set_file_pointers_for_exec): Ditto.
(dtable::vfork_child_dup): Ditto.
(dtable::vfork_parent_restore): Ditto.
* syscalls.cc (close_all_files): Ditto.
* sync.h (muto::acquired): Declare new function.
(new_muto1): Declare new macro used to specify name of muto storage.
* sync.cc (muto::acquired): Define new function.
* cygthread.cc (cygthread::stub): Remove signal chain removal call since it is
handled during initialization now.
* cygthread.cc (cygthread::simplestub): Remove signal chain removal call since
it is handled during initialization now.
* cygtls.cc (sentry): New class used for locking.  Use throughout.
(_threadinfo::reset_exception): Don't pop stack.
(_threadinfo::find_tls): Move from exceptions.cc.
(_threadinfo::init_thread): Initialize array of threads rather than linked
list.  Take second argument indicating thread function for this thread.
(_threadinfo::remove): Search thread array rather than linked list.  Use sentry
to lock.  Only unlock if we got the lock.
(_threadinfo::find_tls): Ditto for first two.
(handle_threadlist_exception): Handle exceptions when manipulating the thread
list in case of premature thread termination.
(_threadinfo::init_threadlist_exceptions): Ditto.
* cygtls.h (TLS_STACK_SIZE): Decrease size.
(_threadinfo::padding): Add element to avoid overwriting lower part of stack.
(_threadinfo::remove): Add a "wait" argument to control how long we wait for a
lock before removing.
* exceptions.cc (init_exception_handler): Make global.  Take argument to
control exception handler being set.
(ctrl_c_handler): Wait forever when removing self from signal chain.
(_threadinfo::find_tls): Move to cygtls.cc.
(sig_handle): Reorganize detection for thread-specific signals.
* heap.cc (heap_init): Rework slightly.  Make fatal error more verbose.  Remove
malloc initialization since it can't happen during dll attach.
* init.cc (search_for): Move address to search for on stack here.
(threadfunc_ix): Ditto for stack offset.  Make shared so that stack walk
potentially only has to be done once when cygwin processes are running.
(threadfunc_fe): Use standard tls to store thread function (may change back
later).
(calibration_thread): New function.  Potentially called to find threadfunc_ix.
(munge_threadfunc): Search for "search_for" value on stack.  Output warning
when thread func not found on stack.  Use standard tls to store thread
function.
(prime_threads): New function.  Called to prime thread front end.
(dll_entry): Call dll_crt0_0 here when DLL_PROCESS_ATTACH.  Call prime_threads
here.  Try to remove thread from signal list here.
* sigproc.cc (wait_sig): Initialize threadlist exception stuff here.
* thread.cc (pthread::exit): Pass argument to signal list remove function.
* thread.h: Remove obsolete *ResourceLock defines.
* tlsoffsets.h: Regenerate.
* winsup.h (spf): Define temporary debug macro to be deleted later.
* dcrt0.cc (dll_crt0_0): New function, called during DLL initialization.
Mainly consists of code pulled from dll_crt0_1.
(dll_crt0_1): See above.
(_dll_crt0): Wait for initial calibration thread to complete, if appropriate.
Move some stuff to dll_crt0_0.
(initialize_main_tls): Accommodate argument change to
_thread_info::init_thread.
* fork.cc (fork_child): Ditto.
(sync_with_child): Fix debug message.
* external.cc (cygwin_internal): Remove special considerations for
uninitialized dll since initialization happens during dll attach now.
* dlfcn.cc (dlopen): Remove obsolete *ResourceLock calls.
(dlclose): Ditto.
* cygheap.h (init_cygheap::close_ctty): Declare new function.
* cygheap.cc (init_cygheap::close_ctty): Define new function.
* syscalls.cc (close_all_files): Use close_ctty.
(setsid): Ditto.
* cygthread.cc (cygthread::stub): Remove exception initialization.
* cygthread.cc (cygthread::stub): Remove exception initialization.
(cygthread::simplestub): Ditto.
* thread.cc (pthread::thread_init_wrapper): Ditto.
* cygtls.cc (_last_thread): Make static.
(_threadinfo::call2): Initialize exception handler here.
(_threadinfo::find_tls): Move here.
* exceptions.cc (_threadinfo::find_tls): Move.
* dcrt0.cc (__api_fatal): Add prefix info to message here rather than including
it in every call to function.
* winsup.h (api_fatal): Accommodate above change.
* debug.cc (add_handle): Don't do anything if cygheap not around.
(mark_closed): Ditto.
* dll_init.cc (dll_list::detach): Fix debug output.
* fork.cc (sync_with_child): Ditto.
(vfork): Improve debug output.
* heap.cc (heap_init): Ditto.
* exceptions.cc (try_to_debug): Clarify message when debugger attaches.
@
text
@d27 1
d29 1
a40 65
#ifdef MALLOC_DEBUG
extern "C" void * _sbrk (size_t incr_arg);

#if 0
extern "C" void *
_sbrk_r (struct _reent *, size_t incr_arg)
{
  return _sbrk (incr_arg);
}
#endif

extern "C" void *
_malloc_r (struct _reent *, size_t size)
{
  export_malloc_called = 1;
  return malloc (size);
}
#undef malloc

extern "C" void *
_calloc_r (struct _reent *, size_t nmemb, size_t size)
{
  export_malloc_called = 1;
  return calloc (nmemb, size);
}
#undef calloc

extern "C" void
_free_r (struct _reent *, void *p)
{
  export_malloc_called = 1;
  assert (!incygheap (p));
  assert (inheap (p));
  free (p);
}
#undef free

extern "C" void *
_realloc_r (struct _reent *, void *p, size_t size)
{
  export_malloc_called = 1;
  assert (!incygheap (p));
  assert (inheap (p));
  return realloc (p, size);
}
#undef realloc

extern "C" char *
strdup_dbg (const char *s, const char *file, int line)
{
  char *p;
  export_malloc_called = 1;
  if ((p = (char *) malloc_dbg (strlen (s) + 1, file, line)) != NULL)
      strcpy (p, s);
  return p;
}

#undef strdup
extern "C" char *
strdup (const char *s)
{
  return strdup_dbg (s, __FILE__, __LINE__);
}
#else
#endif
d257 1
a263 3
#ifdef MALLOC_DEBUG
      _free_r (NULL, _malloc_r (NULL, 16));
#else
a264 1
#endif
d268 1
@


1.26
log
@* devices.cc: New file.
* devices.gperf: New file.
* devices.shilka: New file.
* cygwin-gperf: New file.
* cygwin-shilka: New file.
* fhandler_fifo.cc: New file.
* fhandler_nodevice.cc : New file.  Reorganize headers so that path.h precedes
fhandler.h throughout.  Remove device argument and unit arguments from fhandler
constructors throughout.  Remove pc arguments to fhandler functions and use
internal pc element instead, throughout.  Use dev element in pc throughout.
Use major/minor elements rather than units and device numbers previously in
fhandler class.  Use correct methods for fhandler file names rather than
directly accessing file name variables, throughout.
* Makefile.in (DLL_OFILES): Add devices.o, fhandler_fifo.o
* dcrt0.cc (dll_crt0_1): Call device::init.
* devices.h: Renumber devices based on more Linux-like major/minor numbers.
Add more devices.  Declare standard device storage.
(device): Declare struct.
* dir.cc (opendir): Use new 'build_fh_name' to construct a fhandler_* type.
* dtable.cc (dtable::get_debugger_info): Ditto.
(cygwin_attach_handle_to_fd): Ditto.
(dtable::release): Remove special FH_SOCKET case in favor of generic
"need_fixup_before" test.
(dtable::init_std_file_from_handle): Use either build_fh_dev or build_fh_name
to build standard fhandler.
(dtable::build_fh_name): Renamed from dtable::build_fhandler_from_name.  Move
out of dtable class.  Don't accept a path_conv argument.  Just build it here
and pass it to:
(build_fh_pc): Renamed from dtable::build_fhandler.  Move out of dtable class.
Use intrinsic device type in path_conv to create new fhandler.
(build_fh_dev): Renamed from dtable::build_fhandler.  Move out of dtable class.
Simplify arguments to just take new 'device' type and a name.  Just return
pointer to fhandler rather than trying to insert into dtable.
(dtable::dup_worker): Accommodate above build_fh name changes.
(dtable::find_fifo): New (currently broken) function.
(handle_to_fn): Use strechr for efficiency.
* dtable.h: Reflect above build_fh name changes and argument differences.
(fhandler_base *&operator []): Return self rather than copy of self.
* fhandler.cc (fhandler_base::operator =): Use pc element to set normalized
path.
(fhandler_base::set_name): Ditto.
(fhandler_base::raw_read): Use method to access name.
(fhandler_base::write): Correctly use get_output_handle rather than get_handle.
(handler_base::device_access_denied): New function.
(fhandler_base::open): Eliminate pc argument and use pc element of
fhandler_base throughout.
(fhandler_base::fstat): Detect if device is based in filesystem and use
fstat_fs to calculate stat, if so.
(fhandler_base::fhandler_base): Eliminate handling of file names and, instead,
just free appropriate component from pc.
(fhandler_base::opendir): Remove path_conv parameter.
* fhandler.h: Remove all device flags.
(fhandler_base::pc): New element.
(fhandler_base::set_name): Change argument to path_conv.
(fhandler_base::error): New function.
(fhandler_base::exists): New function.
(fhandler_base::pc_binmode): New function.
(fhandler_base::dev): New function.
(fhandler_base::open_fs): New function.
(fhandler_base::fstat_fs): New function.
(fhandler_base::fstat_by_name): New function.
(fhandler_base::fstat_by_handle): New function.
(fhandler_base::isfifo): New function.
(fhandler_base::is_slow): New function.
(fhandler_base::is_auto_device): New function.
(fhandler_base::is_fs_special): New function.
(fhandler_base::device_access_denied): New function.
(fhandler_base::operator DWORD&): New operator.
(fhandler_base::get_name): Return normalized path from pc.
(fhandler_base::get_win32_name): Return windows path from pc.
(fhandler_base::isdevice): Renamed from is_device.
(fhandler_base::get_native_name): Return device format.
(fhandler_fifo): New class.
(fhandler_nodevice): New class.
(select_stuff::device_specific): Remove array.
(select_stuff::device_specific_pipe): New class element.
(select_stuff::device_specific_socket): New class element.
(select_stuff::device_specific_serial): New class element.
(select_stuff::select_stuff): Initialize new elements.
* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Move to base class
from fhandler_disk_file.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_disk_file::open): Move most functionality into
fhandler_base::open_fs.
(fhandler_base::open_fs): New function.
(fhandler_disk_file::close): Move most functionality into
fhandler_base::close_fs.
(fhandler_base::close_fs): New function.
* fhandler_mem.cc (fhandler_dev_mem::open): Use device name in debugging
output.
* fhandler_socket.cc (fhandler_socket::set_connect_secret): Copy standard
urandom device into appropriate place.
(fhandler_socket::accept): Reflect change in fdsock return value.
* fhandler_tty.cc: See "throughouts" above.
* net.cc: Accommodate fdsock change throughout.
(fdsock): Return success or failure, accept fd argument and device argument.
* path.cc (symlink_info::major): New element.
(symlink_info::minor): New element.
(symlink_info::parse_device): Declare new function.
(fs_info::update): Accommodate changes in path_conv class.
(path_conv::fillin): Ditto.
(path_conv::return_and_clear_normalized_path): Eliminate.
(path_conv::set_normalized_path): New function.
(path_conv::path_conv): Set info in dev element.  Use path_conv methods Check
for FH_FS rather than FH_BAD to indicate when to fill in filesystem stuff.
where appropriate rather than direct access.  Use set_normalized_path to set
normalized path.
(windows_device_names): Eliminate.
(get_dev): Ditto.
(get_raw_device_number): Ditto.
(get_device_number): Ditto.
(win32_device_name): Call new device name parser to do most of the heavy
lifting.
(mount_info::conv_to_win32_path): Fill in dev field as appropriate.
(symlink_worker): Handle new device files.
(symlink_info::check): Ditto.
(symlink_info::parse_device): Define new function.
* path.h (executable_states): Move here from fhandler.h.
(fs_info): Rename variables to *_storage and create methods for accessing same.
(path_conv): Add dev element, remove devn and unit and adjust inline methods to
accommodate.
(set_normalized_path): Declare new function.
* pinfo.cc (_pinfo::commune_recv): Add broken support for handling fifos.
(_pinfo::commune_send): Ditto.
* pipe.cc (fhandler_pipe::close): check for existence of handle before closing
it.
(handler_pipe::create): Rename from make_pipe.  Change arguments to accept
fhandler_pipe array.  Accommodate fifos.
(pipe): Rework to deal with fhandler_pipe::create changes.
(_pipe): Ditto.
* select.cc: Use individual device_specific types throughout rather than
indexing with obsolete device number.
(set_bits): Use is_socket call rather than checking device number.
* shared_info.h (CURR_MOUNT_MAGIC): Update.
(conv_to_win32_path): Reflect addition of device argument.
* syscalls.cc (mknod_worker): New function.
(open): Use build_fh_name to build fhandler.
(chown_worker): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(chmod_device): New function.
(chmod): Detect if this is an 'auto' device rather than an on-filesystem device
and handle appropriately.  Use chmod_device to set mode of in-filesystem
devices.
(stat_worker): Eliminate path_conv argument.  Call build_fh_name to construct
fhandler.  Use fh->error() rather than pc->error to detect errors in fhandler
construction.
(access_worker): New function pulled from access.  Accommodate in-filesystem
devices.
(access): Use access_worker.
(fpathconf): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(mknod_worker): New function.
(mknod32): New function.
(chroot): Free normalized path -- assuming it was actually cmalloced.
* tty.cc (create_tty_master): Tweak for new device class.
(tty::common_init): Ditto.
* winsup.h (stat_worker): Remove.
(symlink_worker): Declare.
* exceptions.cc (set_process_mask): Just call sig_dispatch_pending and don't
worry about pending_signals since sig_dispatch_pending should always do the
right thing now.
(sig_handle): Reorganize SIGCONT handling to more closely conform to SUSv3.
* pinfo.h: Move __SIG enum to sigproc.h.
(PICOM_FIFO): New enum element.
(_pinfo): Remove 'thread2signal' stuff throughout class.
(_pinfo::commune_send): Make varargs.
(_pinfo::sigtodo): Eliminate.
(_pinfo::thread2signal): Ditto.
* signal.cc (kill_worker): Eliminate call to setthread2signal.
* sigproc.cc (local_sigtodo): Eliminate.
(getlocal_sigtodo): Ditto.
(sigelem): New class.
(pending_signals): New class.
(sigqueue): New variable, start of sigqueue linked list.
(sigcatch_nonmain): Eliminate.
(sigcatch_main): Eliminate.
(sigcatch_nosync): Eliminate.
(sigcomplete_nonmain): Eliminate.
(pending_signals): Eliminate.
(sig_clear): Call signal thread to clear pending signals, unless already in
signal thread.
(sigpending): Call signal thread to get pending signals.
(sig_dispatch_pending): Eliminate use of pending_signals and just check
sigqueue.
(sigproc_terminate): Eliminate all of the obsolete semaphore stuff.  Close
signal pipe handle.
(sig_send): Eliminate all of the obsolete semaphore stuff and use pipe to send
signals.
(getevent): Eliminate.
(pending_signals::add): New function.
(pending_signals::del): New function.
(pending_signals::next): New function.
(wait_sig): Eliminate all of the obsolete semaphore stuff.  Use pipe to
communicate and maintain a linked list of signals.
* sigproc.h: Move __SIG defines here.  Add __SIGPENDING.
(sig_dispatch_pending): Remove "C" specifier.
(sig_handle): Accept a mask argument.
* thread.cc: Remove signal handling considerations throughout.
@
text
@d319 1
@


1.26.2.1
log
@* Makefile.in: Add still more -fomit-frame-pointer functions.
* dtable.h (dtable::lock): New function.
(dtable::unlock): New function.
(dtable::init_lock): New function.
* cygheap.h (HEAP_TLS): Declare new enum value.
(init_cygheap::threadlist): Declare new array.
(init_cygheap::sthreads): Declare new variable.
(cygheap_fdmanip::~cygheap_fdmanip): Use new dtable lock/unlock functions.
(cygheap_fdnew::cygheap_fdnew): Ditto.
(cygheap_fdget::cygheap_fdget): Ditto.
* dtable.cc (dtable_init): Initialize fdtab critical section.
(dtable::fixup_after_fork): Ditto.
(dtable::fixup_after_exec): Ditto.
(dtable::dup2): Use lock/unlock calls to protect access to fdtab.
(dtable::find_fifo): Ditto.
(dtable::fixup_before_fork): Ditto.
(dtable::fixup_before_exec): Ditto.
(dtable::set_file_pointers_for_exec): Ditto.
(dtable::vfork_child_dup): Ditto.
(dtable::vfork_parent_restore): Ditto.
* syscalls.cc (close_all_files): Ditto.
* sync.h (muto::acquired): Declare new function.
(new_muto1): Declare new macro used to specify name of muto storage.
* sync.cc (muto::acquired): Define new function.
* cygthread.cc (cygthread::stub): Remove signal chain removal call since it is
handled during initialization now.
* cygthread.cc (cygthread::simplestub): Remove signal chain removal call since
it is handled during initialization now.
* cygtls.cc (sentry): New class used for locking.  Use throughout.
(_threadinfo::reset_exception): Don't pop stack.
(_threadinfo::find_tls): Move from exceptions.cc.
(_threadinfo::init_thread): Initialize array of threads rather than linked
list.  Take second argument indicating thread function for this thread.
(_threadinfo::remove): Search thread array rather than linked list.  Use sentry
to lock.  Only unlock if we got the lock.
(_threadinfo::find_tls): Ditto for first two.
(handle_threadlist_exception): Handle exceptions when manipulating the thread
list in case of premature thread termination.
(_threadinfo::init_threadlist_exceptions): Ditto.
* cygtls.h (TLS_STACK_SIZE): Decrease size.
(_threadinfo::padding): Add element to avoid overwriting lower part of stack.
(_threadinfo::remove): Add a "wait" argument to control how long we wait for a
lock before removing.
* exceptions.cc (init_exception_handler): Make global.  Take argument to
control exception handler being set.
(ctrl_c_handler): Wait forever when removing self from signal chain.
(_threadinfo::find_tls): Move to cygtls.cc.
(sig_handle): Reorganize detection for thread-specific signals.
* heap.cc (heap_init): Rework slightly.  Make fatal error more verbose.  Remove
malloc initialization since it can't happen during dll attach.
* init.cc (search_for): Move address to search for on stack here.
(threadfunc_ix): Ditto for stack offset.  Make shared so that stack walk
potentially only has to be done once when cygwin processes are running.
(threadfunc_fe): Use standard tls to store thread function (may change back
later).
(calibration_thread): New function.  Potentially called to find threadfunc_ix.
(munge_threadfunc): Search for "search_for" value on stack.  Output warning
when thread func not found on stack.  Use standard tls to store thread
function.
(prime_threads): New function.  Called to prime thread front end.
(dll_entry): Call dll_crt0_0 here when DLL_PROCESS_ATTACH.  Call prime_threads
here.  Try to remove thread from signal list here.
* sigproc.cc (wait_sig): Initialize threadlist exception stuff here.
* thread.cc (pthread::exit): Pass argument to signal list remove function.
* thread.h: Remove obsolete *ResourceLock defines.
* tlsoffsets.h: Regenerate.
* winsup.h (spf): Define temporary debug macro to be deleted later.
* dcrt0.cc (dll_crt0_0): New function, called during DLL initialization.
Mainly consists of code pulled from dll_crt0_1.
(dll_crt0_1): See above.
(_dll_crt0): Wait for initial calibration thread to complete, if appropriate.
Move some stuff to dll_crt0_0.
(initialize_main_tls): Accommodate argument change to
_thread_info::init_thread.
* fork.cc (fork_child): Ditto.
(sync_with_child): Fix debug message.
* external.cc (cygwin_internal): Remove special considerations for
uninitialized dll since initialization happens during dll attach now.
* dlfcn.cc (dlopen): Remove obsolete *ResourceLock calls.
(dlclose): Ditto.
* cygheap.h (init_cygheap::close_ctty): Declare new function.
* cygheap.cc (init_cygheap::close_ctty): Define new function.
* syscalls.cc (close_all_files): Use close_ctty.
(setsid): Ditto.
* cygthread.cc (cygthread::stub): Remove exception initialization.
* cygthread.cc (cygthread::stub): Remove exception initialization.
(cygthread::simplestub): Ditto.
* thread.cc (pthread::thread_init_wrapper): Ditto.
* cygtls.cc (_last_thread): Make static.
(_threadinfo::call2): Initialize exception handler here.
(_threadinfo::find_tls): Move here.
* exceptions.cc (_threadinfo::find_tls): Move.
* dcrt0.cc (__api_fatal): Add prefix info to message here rather than including
it in every call to function.
* winsup.h (api_fatal): Accommodate above change.
* debug.cc (add_handle): Don't do anything if cygheap not around.
(mark_closed): Ditto.
* dll_init.cc (dll_list::detach): Fix debug output.
* fork.cc (sync_with_child): Ditto.
(vfork): Improve debug output.
* heap.cc (heap_init): Ditto.
* exceptions.cc (try_to_debug): Clarify message when debugger attaches.
@
text
@a318 1

@


1.25
log
@Throughout, remove "include <errno.h>" from files which already include
cygerrno.h.
* include/cygwin/config.h (__DYNAMIC_REENT__): Define.
* include/cygwin/version.h: Bump API minor version.
* cygwin.din: Export __getreent
* cygerrno.h: Include errno.h.  Fix places where _impure_ptr is used directly
to store the errno value.
* debug.cc (__set_errno): Ditto.
* errno.cc: Remove _RRENT_ONLY define to get errno.cc compiled.
* signal.cc: Rename _reent_clib to _REENT throughout.
* thread.h (reent_clib): Remove prototype.
* thread.cc (reent_clib): Rename reent_clib to __getreent.  Return _impure_ptr
until MTinterface is initialized.
(reent_winsup): Fix a possible SEGV when _r == NULL.  Return NULL instead.
* MTinterface::fixup_after_fork: Switch reent back to _impure_ptr to keep
signal handling running when fork is called from a thread other than the
mainthread.
@
text
@d18 1
a19 1
#include "path.h"
@


1.24
log
@* cygmalloc.h: Remove MORECORE_CANNOT_TRIM.  It's not true.  # cygwin.din:
Export mallinfo.  # malloc_wrapper.cc (mallinfo): New function.
@
text
@a20 1
#include <errno.h>
@


1.23
log
@More GNUify non-GNU formatted functions calls throughout.
@
text
@d28 2
d279 16
@


1.23.16.1
log
@merge from trunk.
Reorganize includes throughout so that path.h comes before fhandler.h.
Eliminate path_conv arguments from fhandler functions which take them,
throughout.  Use get_name() and get_win32_name() consistently throughout for
fhandler objects.  Use build_fh_* functions throughout, where appropriate.
* fhandler.h (fhandler_base): Store path_conv struct here.  Remove dev.
* dtable.h (dtable::build_fhandler_*): Remove.
(build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* dtable.cc (build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* fhandler.h (fhandler_base::set_name): Change argument.
* fhandler.cc (fhandler_base::set_name): Just accept a path_conv argument.
(executable_states): Move.
* path.h (executable_state): Accept.
* syscalls.cc (stat_worker): Make static.
* winsup.h (stat_worker): Remove definition.
@
text
@d18 1
a19 1
#include "fhandler.h"
@


1.23.16.2
log
@merge from trunk
@
text
@a27 2
#include <malloc.h>
extern "C" struct mallinfo dlmallinfo ();
a276 16
}

extern "C" struct mallinfo
mallinfo ()
{
  struct mallinfo m;
  if (!use_internal_malloc)
    set_errno (ENOSYS);
  else
    {
      __malloc_lock ();
      m = dlmallinfo ();
      __malloc_unlock ();
    }

  return m;
@


1.23.16.3
log
@merge from trunk
@
text
@d21 1
@


1.22
log
@* malloc.cc: Update to 2.7.2.
* malloc_wrapper.cc (malloc_init): Call user level mallocs to determine if the
malloc has been wrapped.
@
text
@a37 5
#undef in
#undef out
#define in(x)
#define out(x)

@


1.21
log
@Missed this commit in last checkin.
@
text
@d114 1
a114 1
  malloc_printf ("(%p), called by %x", p, ((int *)&p)[-1]);
d138 1
a138 1
  malloc_printf ("(%d) = %x, called by %x", size, res, ((int *)&size)[-1]);
d154 1
a154 1
  malloc_printf ("(%x, %d) = %x, called by %x", p, size, res, ((int *)&p)[-1]);
d170 1
a170 1
  malloc_printf ("(%d, %d) = %x, called by %x", nmemb, size, res, ((int *)&nmemb)[-1]);
d316 1
a316 1
      free (malloc (16));
@


1.20
log
@* dtable.cc (handle_to_fn): Attempt to handle "raw" accesses to remote shares.
* path.cc (mount_info::conv_to_win32_path): Set flags to binary when mount
entry is not found.
(mount_info::set_flags_from_win32_path): Ditto.
@
text
@d1 1
a1 1
/* malloc.cc
d27 1
d107 3
a109 3
/* Call though the application pointer,
   which either points to export_malloc, or the application's
   own version. */
d111 15
a125 1
void *
d129 10
a138 1
  res = user_data->malloc (size);
d142 1
a142 7
void
free (void *p)
{
  user_data->free (p);
}

void *
d146 9
a154 1
  res = user_data->realloc (p, size);
d158 1
a158 1
void *
d162 9
a170 1
  res = user_data->calloc (nmemb, size);
d174 2
a175 2
extern "C" char *
strdup (const char *s)
d177 14
a190 5
  char *p;
  size_t len = strlen (s) + 1;
  if ((p = (char *) malloc (len)) != NULL)
      memcpy (p, s, len);
  return p;
d193 2
a194 2
extern "C" char *
_strdup_r (struct _reent *, const char *s)
d196 14
a209 1
  return strdup (s);
a210 4
#endif

/* These routines are used by the application if it
   doesn't provide its own malloc. */
d212 2
a213 2
extern "C" void
export_free (void *p)
d215 6
a220 3
  malloc_printf ("(%p), called by %x", p, ((int *)&p)[-1]);
  if (use_internal_malloc)
    _free_r (_impure_ptr, p);
d222 7
a228 1
    user_data->free (p);
d231 2
a232 2
extern "C" void *
export_malloc (int size)
d234 6
a239 4
  void *res;
  export_malloc_called = 1;
  if (use_internal_malloc)
    res = _malloc_r (_impure_ptr, size);
d241 6
a246 2
    res = user_data->malloc (size);
  malloc_printf ("(%d) = %x, called by %x", size, res, ((int *)&size)[-1]);
d250 2
a251 2
extern "C" void *
export_realloc (void *p, int size)
d253 6
a258 3
  void *res;
  if (use_internal_malloc)
    res = _realloc_r (_impure_ptr, p, size);
d260 6
a265 2
    res = user_data->realloc (p, size);
  malloc_printf ("(%x, %d) = %x, called by %x", p, size, res, ((int *)&p)[-1]);
d269 2
a270 2
extern "C" void *
export_calloc (size_t nmemb, size_t size)
d272 2
a273 3
  void *res;
  if (use_internal_malloc)
    res = _calloc_r (_impure_ptr, nmemb, size);
d275 17
a291 3
    res = user_data->calloc (nmemb, size);
  malloc_printf ("(%d, %d) = %x, called by %x", nmemb, size, res, ((int *)&nmemb)[-1]);
  return res;
d301 1
a301 1
static NO_COPY muto *mprotect = NULL;
d306 1
a306 1
  new_muto (mprotect);
d308 1
a308 1
     calls to export_malloc/free/realloc to application provided. This may
a320 12
}

extern "C" void
__malloc_lock (struct _reent *)
{
  mprotect->acquire ();
}

extern "C" void
__malloc_unlock (struct _reent *)
{
  mprotect->release ();
@


1.19
log
@* sync.h (new_muto): Just accept an argument which denotes the name of the
muto.  Use this argument to construct static storage.
* cygheap.cc (cygheap_init): Reflect above change.
* exceptions.cc (events_init): Ditto.
* malloc.cc (malloc_init): Ditto.
* path.cc (cwdstuff::init): Ditto.
* cygheap.h (cwdstuff): Change name of lock element to make it less generic.
* path.cc (cwdstuff::get_hash): Ditto.
(cwdstuff::get_initial): Ditto.
(cwdstuff::set): Ditto.
(cwdstuff::get): Ditto.
* sigproc.cc (proc_subproc): Ditto.
* debug.cc (lock_debug): Change to method.  Use method rather than macro
throughout.
* tty.h (tty_min::kill_pgrp): Declare new method.
* fhandler_termios.cc (tty_min::kill_pgrp): New method.
(fhandler_termios::line_edit): Use new method for killing process.
* dcrt0.cc (do_exit): Ditto.
* dtable.cc (dtable::get_debugger_info): New method for inheriting dtable info
from a debugger.
* tty.cc (tty_init): Attempt to grab file handle info from parent debugger, if
appropriate.  # dtable.cc (dtable::stdio_init): Make this a method.
(dtable::init_std_file_from_handle): Don't set fd unless it's not open.
(dtable::build_fhandler_from_name): Move name setting to
dtable::build_fhandler.
(dtable::build_fhandler): Add win32 name parameter.
* dcrt0.cc (dll_crt0_1): Change to use dtable stdio_init.
* dtable.h (dtable): Reflect build_fhandler parameter change.
* mmap.cc (mmap_record::alloc_fh): Don't set name parameter in build_fhandler.
* net.cc (fdsock): Remove set_name call since it is now handled by
build_fhandler.
* sigproc.cc (proc_subproc): Release muto as early as possible.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001 Red Hat, Inc.
@


1.18
log
@* times.cc (hires::prime): Restore thread priority on failure condition.
* uinfo.cc (uinfo_init): Use more robust method for determining if process was
invoked from a non-cygwin process.
* sync.h (muto::init): Eliminate "inheritance" parameter.
(new_muto): Reflect removal of parameter.
* sync.cc (muto::init): Ditto.
* cygheap.cc (cygheap_init): Ditto.
* debug.cc (threadname_init): Ditto.
* exceptions.cc (events_init): Ditto.
* malloc.cc (malloc_init): Ditto.
* path.cc (cwdstuff::init): Ditto.
* sigproc.cc (sigproc_init): Ditto.
* grp.cc (group_lock): Use different method for locking with static member.
(read_etc_group): REALLY ensure that read lock mutex is released.
* passwd.cc (passwd_lock): Use different method for locking with static member.
(read_etc_passwd): REALLY ensure that read lock mutex is released.
* shared.cc (sec_user): Correct reversed inheritance test.
@
text
@d219 1
a219 1
  mprotect = new_muto ("mprotect");
@


1.17
log
@* fhandler.cc (fhandler_base::fork_fixup): Don't protect handle.
* dlfcn.cc: Fix to confirm to coding standards.  Reorganize includes throughout
to accomodate new cygheap.h usage.
* cygheap.h (cygheap_fdmanip): New class: simplifies locking and retrieval of
fds from cygheap->fdtab.
(cygheap_fdget): Ditto.
(cygheap_fdnew): Ditto.
* fcntl.cc (_fcntl): Use new method to lock fdtab and retrieve info.
* ioctl.cc (ioctl): Ditto.
* mmap.cc (mmap): Ditto.
* net.cc: Ditto, throughout.
* passwd.cc (getpass): Ditto.
* path.cc (fchdir): Ditto.
* pipe.cc (make_pipe): Ditto.
* sec_acl.cc (facl): Ditto.
* syscalls.cc: Ditto, throughout.
* termios.cc: Ditto, throughout.
@
text
@d219 1
a219 1
  mprotect = new_muto (FALSE, "mprotect");
@


1.16
log
@Add "path.h" include throughout, where needed.  Use new path_conv methods and
operators to simplify testing for directory and attributes, throughout.
* path.h (path_conv::exists): New method.
(path_conv::has_attribute): Ditto.
(path_conv::isdir): Ditto.
(path_conv::DWORD &): New operator.
(path_conv::int &): Ditto.
* dir.cc (rmdir): Eliminate a goto.
* dtable.cc (dtable::build_fhandler): Accept opt and suffix info for
path_conv.check.  Return fh == NULL on path_conv error.  Pass unit to set_name
as appropriate.
(dtable::reset_unix_path_name): New method.
* dtable.h (dtable): Declare new method.  Reflect arg changes to
build_fhandler.
* fhandler.cc (fhandler_disk_dummy_name): Eliminate.
(fhandler_base::set_name): Expect paths to be NULL.  Build unix_path_name from
win32_path_name when it is a device.
(fhandler_base::reset_unix_path_name): New method.
(fhandler_base::raw_read): Report EISDIR when ERROR_INVALID_FUNCTION or
ERROR_INVALID_PARAMETER and reading a directory.
(fhandler_disk_file::fstat): Don't call stat_dev since we should now never be
calling fhandler_disk_file methods with devices.
(fhandler_base::fhandler_base): Clear {unix,win32}_path_name.
(fhandler_base::~fhandler_base): Always free {unix,win32}_path_name.
(fhandler_disk_file::fhandler_disk_file): Remove set_no_free_names kludge.
(fhandler_disk_file::open): Ditto.
* fhandler.h (fhandler_base::no_free_names): Eliminate.
(fhandler_base::set_no_free_names): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::fhandler_tty_slave): Don't set
unix_path_name here.
* path.cc (fchdir): Lock fd table throughout.  Use new
dtable::reset_unix_path_name method to reset path.
* syscalls.cc (stat_worker): Reorganize to always call fstat method.  Pass
path_conv method to fhandler_*::open.
(chroot): Elminate a goto.
@
text
@d21 2
@


1.15
log
@Update copyrights.
@
text
@d19 1
@


1.15.4.1
log
@Merged changes from HEAD
@
text
@a18 1
#include "path.h"
@


1.15.4.2
log
@Merged changes from HEAD
@
text
@a20 2
#include <errno.h>
#include "cygerrno.h"
@


1.15.4.3
log
@Merged changes from HEAD
@
text
@d219 1
a219 1
  new_muto (mprotect);
@


1.15.4.4
log
@Merged changes from HEAD
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
@


1.15.4.5
log
@Merged changes from HEAD
@
text
@d1 1
a1 1
/* malloc_wrapper.cc
a26 1
#include "cygmalloc.h"
d106 3
a108 3
#endif
/* These routines are used by the application if it
   doesn't provide its own malloc. */
d110 2
a111 2
extern "C" void
free (void *p)
d113 3
a115 9
  malloc_printf ("(%p), called by %x", p, ((int *)&p)[-1]);
  if (!use_internal_malloc)
    user_data->free (p);
  else
    {
      __malloc_lock ();
      dlfree (p);
      __malloc_unlock ();
    }
d118 2
a119 2
extern "C" void *
malloc (size_t size)
d121 1
a121 12
  void *res;
  export_malloc_called = 1;
  if (!use_internal_malloc)
    res = user_data->malloc (size);
  else
    {
      __malloc_lock ();
      res = dlmalloc (size);
      __malloc_unlock ();
    }
  malloc_printf ("(%d) = %x, called by %x", size, res, ((int *)&size)[-1]);
  return res;
d124 1
a124 1
extern "C" void *
d128 1
a128 9
  if (!use_internal_malloc)
    res = user_data->realloc (p, size);
  else
    {
      __malloc_lock ();
      res = dlrealloc (p, size);
      __malloc_unlock ();
    }
  malloc_printf ("(%x, %d) = %x, called by %x", p, size, res, ((int *)&p)[-1]);
d132 1
a132 1
extern "C" void *
d136 1
a136 9
  if (!use_internal_malloc)
    res = user_data->calloc (nmemb, size);
  else
    {
      __malloc_lock ();
      res = dlcalloc (nmemb, size);
      __malloc_unlock ();
    }
  malloc_printf ("(%d, %d) = %x, called by %x", nmemb, size, res, ((int *)&nmemb)[-1]);
d140 2
a141 2
extern "C" void *
memalign (size_t alignment, size_t bytes)
d143 5
a147 14
  void *res;
  if (!use_internal_malloc)
    {
      set_errno (ENOSYS);
      res = NULL;
    }
  else
    {
      __malloc_lock ();
      res = dlmemalign (alignment, bytes);
      __malloc_unlock ();
    }

  return res;
d150 2
a151 2
extern "C" void *
valloc (size_t bytes)
d153 3
a155 12
  void *res;
  if (!use_internal_malloc)
    {
      set_errno (ENOSYS);
      res = NULL;
    }
  else
    {
      __malloc_lock ();
      res = dlvalloc (bytes);
      __malloc_unlock ();
    }
d157 2
a158 2
  return res;
}
d160 2
a161 2
extern "C" size_t
malloc_usable_size (void *p)
d163 3
a165 6
  size_t res;
  if (!use_internal_malloc)
    {
      set_errno (ENOSYS);
      res = 0;
    }
d167 1
a167 7
    {
      __malloc_lock ();
      res = dlmalloc_usable_size (p);
      __malloc_unlock ();
    }

  return res;
d170 2
a171 2
extern "C" int
malloc_trim (size_t pad)
d173 4
a176 6
  size_t res;
  if (!use_internal_malloc)
    {
      set_errno (ENOSYS);
      res = 0;
    }
d178 2
a179 6
    {
      __malloc_lock ();
      res = dlmalloc_trim (pad);
      __malloc_unlock ();
    }

d183 2
a184 2
extern "C" int
mallopt (int p, int v)
d186 3
a188 6
  int res;
  if (!use_internal_malloc)
    {
      set_errno (ENOSYS);
      res = 0;
    }
d190 2
a191 6
    {
      __malloc_lock ();
      res = dlmallopt (p, v);
      __malloc_unlock ();
    }

d195 2
a196 2
extern "C" void
malloc_stats ()
d198 3
a200 2
  if (!use_internal_malloc)
    set_errno (ENOSYS);
d202 3
a204 17
    {
      __malloc_lock ();
      dlmalloc_stats ();
      __malloc_unlock ();
    }

  return;
}

extern "C" char *
strdup (const char *s)
{
  char *p;
  size_t len = strlen (s) + 1;
  if ((p = (char *) malloc (len)) != NULL)
    memcpy (p, s, len);
  return p;
d214 1
a214 1
NO_COPY muto *mallock = NULL;
d219 1
a219 1
  new_muto (mallock);
d221 1
a221 1
     calls to malloc/free/realloc to application provided. This may
d234 12
@


1.15.4.6
log
@Merged changes from HEAD
@
text
@d114 1
a114 1
  malloc_printf ("(%p), called by %p", p, __builtin_return_address (0));
d138 1
a138 1
  malloc_printf ("(%d) = %x, called by %p", size, res, __builtin_return_address (0));
d154 1
a154 1
  malloc_printf ("(%x, %d) = %x, called by %x", p, size, res, __builtin_return_address (0));
d170 1
a170 1
  malloc_printf ("(%d, %d) = %x, called by %x", nmemb, size, res, __builtin_return_address (0));
d316 1
a316 1
      user_data->free (user_data->malloc (16));
@


1.14
log
@* fork.cc (fork_parent): Stop malloc activity while fork is in control of the
heap.
* sigproc.cc (NZOMBIES): Rename from ZOMBIEMAX for clarity.
(zombies): Revert to original behavior.  Allocating zombie array resulted in
performance hit.
* winsup.h: Declare malloc lock routines.
@
text
@d1 1
a1 1
/* malloc.cc for WIN32.
d3 1
a3 1
   Copyright 1996, 1997, 1998 Cygnus Solutions.
d5 1
a5 1
   Written by Steve Chamberlain of Cygnus Support
@


1.13
log
@Remove initialization of static or global values to zero, throughout.  This
just needlessly grows the size of the DLL.
* tty.cc (tty::alive): Make inuse handle non-inheriting on open, just for
thread safety.
@
text
@d157 1
a157 2
extern "C"
void
d167 1
a167 2
extern "C"
void *
d180 1
a180 2
extern "C"
void *
d192 1
a192 2
extern "C"
void *
d233 1
a233 2
extern "C"
void
d239 1
a239 2
extern "C"
void
@


1.12
log
@Throughout, reorganize header file inclusion to put security.h prior to
fhandler.h.
* fhandler.h (fhandler_base::get_inheritance): New method.
* fhandler_socket.cc (fhandler_socket::create_secret_event): Use proper
close-on-exec inheritance when creating.
(fhandler_socket::check_peer_secret_event): Create handle as non-inheritable.
@
text
@d31 1
a31 1
static int export_malloc_called = 0;
@


1.11
log
@forced commit
@
text
@d17 1
@


1.10
log
@Throughout, change fdtab references to cygheap->fdtab.
* child_info.h (cygheap_exec_info): Eliminate special fdtab stuff.
* spawn.cc (spawn_guts): Ditto.
* cygheap.cc (cygheap_init): Initialize fdtab, if appropriate.
* cygheap.h (CYGHEAPSIZE): Include size of init_cygheap.
(_cmalloc_entry): Include fdtab here.
* dtable.h (dtable): Declare/define new methods.
* dtable.cc (dtable::vfork_child_fixup): New method.
(dtable::fixup_after_exec): Remove unneeded extra arguments.
* dcrt0.cc (dll_crt0_1): Ditto.
* environ.cc (getwinenv): Use case sensitive comparison.
(winenv): Make a copy of environment cache to avoid realloc problems when
duplicate environment variables exist in the environment.  (From Egor Duda)
* net.cc (cygwin_socket): Revert Apr 14 change.
* include/sys/file.h: Protect against previous X_OK definition.
* passwd.cc: Eliminate passwd_sem throughout.
* security.cc: Ditto.
* cygwin.din: Export New functions.
* passwd.cc (read_etc_passwd): Make race safe.
(getpwuid_r): New function.
(getpwnam_r): New function.
@
text
@@


1.9
log
@Break out more header info into separate files.  Use appropriate header files
throughout.
* shared.h: Remove.
* cygwin_version.h: New file.
* delqueue.h: New file.
* environ.h: New file.
* host_dependent.h: New file.
* perprocess.h: New file.
* registry.h: New file.
* security.h: New file.
@
text
@d17 2
@


1.8
log
@* Makefile.in: Add cygheap.o.
* child_info.h: Add specific exec class.
* cygheap.h: New file.  Contains declarations for cygwin heap.
* cygheap.cc: New file.  Implements cygwin heap functions.
* dcrt0.cc (quoted): Simplify due to new method for passing arguments between
cygwin programs.
(alloc_stack_hard_way): Attempt to handle overlapped stack.
(dll_crt0_1): Move child_info processing here.  Accomodate new method for
passing arguments between cygwin programs.  Initialize cygwin heap.  Establish
__argc and __argv variables.
(_dll_crt0): Move most of child_info processing to dll_crt0_1.
(cygwin_dll_init): Remove duplication.
* dtable.cc (dtable::extend): Allocate dtable using cygwin heap.
(dtable::build_fhandler): Ditto for fhandler type being constructed.
(dtable::dup_worker): Free new fhandler from cygwin heap on error.
(dtable::select_*): Don't assume that this == fdtab.
(dtable::linearize_fd_array): Delete.
(dtable::delinearize_fd_array): Delete.
(dtable::fixup_after_exec): New file.
(dtable::vfork_child_dup): Use cygwin heap.
(dtable::vfork_parent_restore): Ditto.
* dtable.h: Remove obsolete methods.  Add new method.
* environ.cc (posify): Eliminate already_posix parameter and logic.
(envsize): New function.
(_addenv): Use envsize.
(environ_init): Accept an argument pointing to an existing environment list.
If supplied, allocate space for this in the the program's heap.
* fhandler.cc (fhandler_base::operator =): Move here from fhandler.h.  Use
cygwin heap to allocate filenames.
(fhandler_base::set_name): Allocate/free names from cygwin heap.
(fhandler_base::linearize): Delete.
(fhandler_base::de_linearize): Delete.
(fhandler_base::operator delete): Free from cygwin heap.
(fhandler_base::~fhandler_base): Ditto.
* fhandler.h: Accomodate elimination of *linearize and other changes above.
* fhandler_console.cc (fhandler_console::fixup_after_exec): Rename from
de_linearize.
* heap.h: New file.
* fhandler_tty.cc (fhandler_tty_slave::fhandler_tty_slave): Use cygwin heap for
name.  fhandler_tty::fixup_after_exec): Rename from de_linearize.
* fork.cc (fork): Call cygheap_fixup_in_child.
* heap.cc: Use declarations in heap.h.
* malloc.cc: Sprinkle assertions throughout to catch attempts to free/realloc
something from the cygwin heap.
* path.cc: Throughout, eliminate use of per-thread cache for cwd.  Use cwd_*
functions rather than cwd_* variables to access cwd_win32 and cwd_posix.
(cwd_win32): New function.
(cwd_posix): New function.
(cwd_hash): New function.
(cwd_fixup_after_exec): New function.
* path.h: Accomodate path.cc changes.
* pinfo.cc (pinfo_init): Accept a pointer to an environment table.  Pass this
to environ_init.  Eliminate old 'title' tests.
* pinfo.h: Accomodate above change in argument.
* spawn.cc (struct av): New method for building argv list.
(av::unshift): New method.
(spawn_guts): Allocate everything that the child process needs in the cygwin
heap and pass a pointer to this to the child.  Build argv list using new
method.  Eliminate delinearize stuff.
* thread.h: Eliminate _cwd_win32 and _cwd_posix buffers.
* winsup.h: Eliminate obsolete functions.  Add envsize() declaration.
@
text
@d20 1
@


1.7
log
@* winsup.h: Eliminate inclusion of most of the cygwin .h files.  Use .h files
only in sources which require them.
* Makefile.in: Generate dependencies with -MD option.
@
text
@d16 3
d66 2
d76 2
d132 16
a201 16
}

extern "C" char *
strdup (const char *s)
{
  char *p;
  size_t len = strlen (s) + 1;
  if ((p = (char *) malloc (len)) != NULL)
      memcpy (p, s, len);
  return p;
}

extern "C" char *
_strdup_r (struct _reent *, const char *s)
{
  return strdup (s);
@


1.6
log
@* path.cc (mount_info::cygdrive_posix_path): Don't add trailing slash if
referring to something like c:\.
* dcrt0.cc (dll_crt0_1): Move uinfo initialization prior to sig_send
initialization to give signal thread a chance to finish.
* debug.cc (WFSO): Move to sigproc.cc
(WFMO): Ditto.
* exceptions.cc (interruptible): Allocate slightly more space for directory
just for paranoia's sake.
(call_handler): Eliminate nonmain argument.  Determine if main thread has set a
frame pointer and use it if so.
(sig_handle): Eliminate nonmain argument.
* net.cc: Record frame information in appropriate routines throughout.
* select.cc (select): Ditto.
* sigproc.cc: Use sigthread structure to record mainthread id throughout.
(sig_send): Record frame information for signal handler.
(wait_sig): Reflect argument change in sig_handle.
(WFSO): Move here and record frame information for signal handler.
(WFMO): Ditto.
* sigproc.h: Implement new "sigthread" class.  Implement "sigframe" class for
manipulating signal frame info.
* thread.cc (__pthread_kill): Use standard _kill() function rather than calling
sig_send directly.
* winsup.h: Eliminate ebp element from signal_dispatch class.
@
text
@d16 1
@


1.5
log
@Pipe changes throughout suggested by Eric Fifer <EFifer@@sanwaint.com>
* debug.cc (threadname_init): Pass name of lock as arg 2 of new_muto.
* malloc.cc (malloc_init): Ditto.
* sigproc.cc (sigproc_init): Ditto.
* exceptions.cc (events_init): Ditto.
(call_handler): Eliminate special case for hExeced.  Report locked thread in
debugging output.
* fhandler.cc (fhandker_pipe::fhandler_pipe): Propagate device type to base
class.
* fhandler.h (fhandler_pipe): Ditto.
* hinfo.cc (hinfo::build_fhandler): Pass specific type of pipe to constructor.
* spawn.cc (spawn_guts): Eliminate dependency on signal when waiting for
subprocess.
* strace.cc: Remove obsolete #ifdef.
* sync.cc (muto::muto): Save the name of the muto.
(muto:~muto): Also release the muto.
* sync.h: Add a muto name field.
* select.cc (peek_pipe): Avoid doing a PeekNamedPipe on the write end of a
pipe.
@
text
@a15 1
#include "sync.h"
@


1.4
log
@* exceptions.cc (interruptible): Make a little more structured.
(call_handler): Allow signals to be sent even if signalled thread is stopped.
Change order of signal_arrived arming/waiting threads clearing to eliminate a
race.
(reset_signal_arrived): New helper function.
* malloc.cc (malloc_init): Use mutos so that signal handler can keep track of
who owns the lock.
(__malloc_lock): Ditto.
(__malloc_unlock): Ditto.
* sync.h (new_muto): Actually use a muto for the "buffer".
* Makefile.in: Fix a dependency.
@
text
@d209 1
a209 1
  mprotect = new_muto (FALSE, NULL);
@


1.3
log
@Respond to a multitude of g++ warnings.
@
text
@d16 1
d204 1
a204 1
static NO_COPY CRITICAL_SECTION malloc_critical_section;
d209 1
a209 1
  InitializeCriticalSection (&malloc_critical_section);
d230 1
a230 1
  SetResourceLock(LOCK_MEMORY_LIST,WRITE_LOCK|READ_LOCK," __malloc_lock");
d237 1
a237 1
  ReleaseResourceLock(LOCK_MEMORY_LIST,WRITE_LOCK|READ_LOCK," __malloc_unlock");
@


1.2
log
@* environ.cc (getwinenv): Make __stdcall.
(winenv): Ditto.
* malloc.cc (strdup): New function.  Occludes newlib version.
(_strdup_r): Ditto.
* winsup.h: Reflect above __stdcall changes.
@
text
@d227 1
a227 1
__malloc_lock (struct _reent *ptr)
d234 1
a234 1
__malloc_unlock (struct _reent *ptr)
@


1.1
log
@Initial revision
@
text
@d77 1
a77 1
  char    *p;
d178 16
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
