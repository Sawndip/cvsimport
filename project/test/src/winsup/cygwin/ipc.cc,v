head	1.14;
access;
symbols
	cygwin-1_7_35-release:1.14
	cygwin-1_7_34-release:1.14
	cygwin-1_7_33-release:1.14
	cygwin-1_7_32-release:1.14
	cygwin-1_7_31-release:1.14
	cygwin-1_7_30-release:1.14
	cygwin-1_7_29-release:1.14
	cygwin-1_7_29-release-branchpoint:1.14.0.2
	cygwin-pre-user-db:1.14
	cygwin-1_7_28-release:1.14
	cygwin-1_7_27-release:1.14
	cygwin-1_7_26-release:1.14
	cygwin-1_7_25-release:1.14
	cygwin-1_7_24-release:1.14
	cygwin-1_7_23-release:1.14
	cygwin-1_7_22-release:1.14
	cygwin-1_7_21-release:1.14
	cygwin-1_7_20-release:1.14
	cygwin-1_7_19-release:1.14
	cygwin-64bit-postmerge:1.14
	cygwin-64bit-premerge-branch:1.13.0.2
	cygwin-64bit-premerge:1.13
	cygwin-1_7_18-release:1.13
	post-ptmalloc3:1.12.6.2
	pre-ptmalloc3:1.12.6.2
	cygwin-1_7_17-release:1.12
	cygwin-64bit-branch:1.12.0.6
	cygwin-1_7_16-release:1.12
	cygwin-1_7_15-release:1.12
	cygwin-1_7_14_2-release:1.12
	cygwin-1_7_14-release:1.12
	cygwin-1_7_12-release:1.12
	cygwin-1_7_11-release:1.12
	cygwin-1_7_10-release:1.12
	signal-rewrite:1.12.0.4
	pre-notty:1.12
	cygwin-1_7_9-release:1.12
	cv-post-1_7_9:1.12.0.2
	cygwin-1_7_8-release:1.12
	cygwin-1_7_7-release:1.12
	cygwin-1_7_5-release:1.12
	cygwin-1_7_4-release:1.12
	cygwin-1_7_3-release:1.12
	cygwin-1_7_2-release:1.12
	fifo_doover3:1.11.0.4
	cygwin-1_7_1-release:1.11
	prefifo:1.11
	cv-branch-2:1.11.0.2
	pre-ripout-set_console_state_for_spawn:1.11
	EOL_registry_mounts:1.10
	preoverlapped:1.10
	drop_9x_support_start:1.10
	cr-0x5f1:1.10.0.24
	cv-branch:1.10.0.22
	pre-ptymaster-archetype:1.10
	cr-0x3b58:1.10.0.20
	cr-0x5ef:1.10.0.18
	after-mmap-privanon-noreserve:1.10
	after-mmap-revamp:1.10
	before-mmap-revamp:1.10
	cgf-more-exit-sync:1.10
	post_wait_sig_exit:1.10
	pre_wait_sig_exit:1.10
	reparent-point:1.10
	noreparent:1.10.0.16
	cr-0x5e6:1.10.0.14
	cr-0x9e:1.10.0.12
	cr-0x9d:1.10.0.10
	cgf-deleteme:1.10.0.8
	pre-sigrewrite:1.10
	corinna-01:1.10
	cr-0x9c:1.10.0.6
	cr-0x9b:1.10.0.4
	cr-0x99:1.10
	Z-emcb-cygwin_daemon:1.10.0.2
	w32api-2_2:1.7
	mingw-runtime-2_4:1.7
	pre-cgf-merge:1.10
	cgf-dev-branch:1.7.0.16
	cygwin_daemon_merge_HEAD:1.1
	Z-cygwin_daemon_merge_HEAD:1.6
	Z-cygwin_daemon_merge-new_HEAD:1.6
	cygwin_daemon:1.1.0.2;
locks; strict;
comment	@// @;


1.14
date	2013.04.23.09.44.33;	author corinna;	state Exp;
branches;
next	1.13;

1.13
date	2013.01.21.04.38.27;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2010.02.26.09.36.21;	author corinna;	state Exp;
branches
	1.12.6.1;
next	1.11;

1.11
date	2008.04.07.18.45.57;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2003.07.26.04.53.59;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2003.05.20.12.38.03;	author corinna;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.12.11.06.26;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2002.09.23.00.31.30;	author cgf;	state Exp;
branches
	1.7.16.1;
next	1.6;

1.6
date	2002.09.21.13.03.23;	author scottc;	state Exp;
branches;
next	1.5;

1.5
date	2002.06.23.22.56.56;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.05.04.01.42;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.28.01.55.40;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2002.02.28.14.30.28;	author rbcollins;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.25.06.31.04;	author rbcollins;	state dead;
branches
	1.1.2.1;
next	;

1.12.6.1
date	2012.08.13.20.04.34;	author corinna;	state Exp;
branches;
next	1.12.6.2;

1.12.6.2
date	2013.01.21.13.52.06;	author corinna;	state Exp;
branches;
next	;

1.7.16.1
date	2003.05.26.19.39.06;	author cgf;	state Exp;
branches;
next	1.7.16.2;

1.7.16.2
date	2003.08.06.03.58.57;	author cgf;	state Exp;
branches;
next	;

1.1.2.1
date	2001.09.25.06.31.04;	author rbcollins;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2002.06.13.14.34.06;	author rbcollins;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2002.06.24.10.55.35;	author scottc;	state Exp;
branches;
next	1.1.2.4;

1.1.2.4
date	2002.06.29.12.40.35;	author scottc;	state Exp;
branches;
next	1.1.2.5;

1.1.2.5
date	2002.09.21.13.11.44;	author scottc;	state Exp;
branches;
next	;


desc
@@


1.14
log
@	* Merge in cygwin-64bit-branch.
@
text
@/* ipc.cc: Single unix specification IPC interface for Cygwin

   Copyright 2001, 2002, 2003, 2008, 2010 Red Hat, Inc.

   Originally written by Robert Collins <robert.collins@@hotmail.com>
   Updated to 64 bit key_t by Charles Wilson <cygwin@@cwilson.fastmail.fm>

   This file is part of Cygwin.

   This software is a copyrighted work licensed under the terms of the
   Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
   details. */

#include "winsup.h"
#include <sys/stat.h>

/* Notes: we return a valid key even if id's low order 8 bits are 0. */
extern "C" key_t
ftok (const char *path, int id)
{
  struct stat statbuf;
  key_t tmp;
  if (stat64 (path, &statbuf))
    {
      /* stat set the appropriate errno for us */
      return (key_t) -1;
    }

  /* Since Cygwin 1.5
     dev_t is 32bits for cygwin
     ino_t is 64bits for cygwin
     and we need 8 bits for the id.
     thus key_t needs 104 bits total -- but we only have 64 (long long)
     We will have to alias; leaving open the possibility that the same
     key will be returned for multiple files.  This possibility exists
     also on Linux; the question is, how to minimize this possibility.

     How to solve?  Well, based on C. Vinschen's research, the nFileIndex*
     words vary as follows, on a partition with > 110,000 files
     nFileIndexHigh:    564 values between 0x00010000 -- 0xffff0000
     nFileIndexLow : 103812 values between 0x00000000 -- 0x0003ffff
     R. Collins suggests that these may represent a tree path,
     and that it would require ~2.9M files to force the tree depth
     to increase and reveal more bit usage.

     Implementation details: dev_t is 32bits, but is formed by
	device(32bits) << 16 | unit(32bits)
     But device is ACTUALLY == status & FH_DEVMASK, where FH_DEVMASK
     is 0x00000fff --> 12 bits

     As it happens, the maximum number of devices is actually
     FH_NDEV, not FH_DEVMASK, where FH_NDEV is currently 0x0000001d.
     However, FH_NDEV grows as new device types are added.  So
     currently the device number needs 5 bits, but later?  Let's
     take a cue from Linux, and use the lower 8 bits (instead of the
     lower 12 or 16) for the device (major?) number.

     Similarly, while 'units' is an int (32bits), it is unclear
     how many of these are significant. For most devices, it seems that
     'units' is equivalent to 'minor'.  For FH_TAPE, it's obvious that
     only 8 bits are important.  However, for FH_SOCKET...it might be
     as high as 16 significant bits.

     Let's assume that we only need 8 bits from device (major) and
     only 8 bits from unit (minor). (On linux, only 8 bits of minor
     are used, and none from major).
     ---> so, we only need 0x00ff00ff (16 bits) of dev_t

     ---> we MUST have all 8 bits of id.

     ---> So, we only have 64 - 8 - 16 = 40 bits for ino_t.  But, we
     need 0xffff0000 for nFileIndexHigh and 0x0003ffff for nFileIndexLow
     minimum, or 16 + 18 = 34 bits.  Lucky us - we have 6 more bits
     to distribute.

     For lack of a better idea, we'll allocate 2 of the extra bits to
     nFileIndexHigh and 4 to nFileIndexLow.  */

  /* get 8 bits from dev_t (major), put into 0xff00000000000000L */
  tmp  = (((key_t) statbuf.st_dev) & 0x0000000000ff0000LL) << 40;
  /* get 8 bits from dev_t (minor), put into 0x00ff000000000000L */
  tmp |= (((key_t) statbuf.st_dev) & 0x00000000000000ffLL) << 48;
  /* get upper 16+2 bits from nFileInfoHigh, put into 0x0000ffffc0000000L
     shift down first, then mask, to avoid sign extension on rightshift  */
  tmp |= (((key_t) statbuf.st_ino) & 0xffffc00000000000LL) >> 16;
  /* get lower 18+4 bits from nFileInfoLow, put into  0x000000003fffff00L  */
  tmp |= (((key_t) statbuf.st_ino) & 0x00000000003fffffLL) << 8;
  /* use all 8 bits of id, and put into 0x00000000000000ffL */
  tmp |= (id & 0x00ff);
  return tmp;
}
@


1.13
log
@Throughout, update copyrights to reflect dates which correspond to main-branch
checkins.  Regularize copyright format.
@
text
@d21 1
a21 1
  struct __stat64 statbuf;
@


1.12
log
@	Remove all traces of __CYGWIN_USE_BIG_TYPES__.

	* include/cygwin/config.h: Move Cygwin-specific build flags from
	newlib's sys/config.h here.  Add a comment.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003, 2010 Red Hat, Inc.
@


1.12.6.1
log
@	* include/cygwin/stat.h (struct __stat64): Drop entirely in favor of
	struct stat.  Accommodate throughout Cygwin.
	* include/cygwin/types.h: Throughout, drop current, internal types
	used since Cygwin 1.5 with the base type they have been used for.
	Throughout, define types based on bitsize-specific types where
	appropriate.  Accommodate throughout Cygwin.
	* include/sys/cygwin.h: Drop __uid32_t and __gid32_t in favor of
	uid_t and gid_t.  Define uid/gid types based on bitsize-specific types.
	(struct external_pinfo): Accommodate above change.
	* cygtls.h (struct _local_storage): Drop unused members grp and
	namearray,
	* tlsoffsets.h: Regenerate.
	* devices.h (_dev_t): Drop definition.  Use dev_t throughout instead.
	* devices.cc: Regenerate.

	Probably temporary patch to drop unneeded functionality on x86_64:
	* fcntl.cc (_fcntl): Alias to fcntl64 on x86_64.
	* glob.cc (CYGWIN_gl_stat): Simplify on x86_64.
	* grp.cc (grp32togrp16): Don't define on x86_64.
	(getgrgid): Alias to getgrgid32 on x86_64.
	(getgrnam): Alias to getgrnam32 on x86_64.
	(getgrent): Alias to getgrent32 on x86_64.
	(getgroups): Alias to getgroups32 on x86_64.
	(initgroups): Alias to initgroups32 on x86_64.
	(setgroups): Alias to setgroups32 on x86_64.
	* mmap.cc (mmap): Alias to mmap64 on x86_64.
	* passwd.cc (getpwuid): Alias to getpwuid32 on x86_64.
	(getpwuid_r): Alias to getpwuid_r32 on x86_64.
	(getpwduid): Don't define on x86_64.
	* syscalls.cc (lseek): Alias to lseek64 on x86_64.
	(_lseek): Alias to lseek64 on x86_64.
	(chown): Alias to chown32 on x86_64.
	(lchown): Alias to lchown32 on x86_64.
	(fchown): Alias to fchown32 on x86_64.
	(stat64_to_stat32): Don't define on x86_64.
	(fstat): Alias to fstat64 on x86_64.
	(_fstat_r): Alias to _fstat64_r on x86_64.
	(stat): Alias to stat64 on x86_64.
	(_stat_r): Alias to _stat64_r on x86_64.
	(lstat): Alias to lstat64 on x86_64.
	(ftruncate): Alias to ftruncate64 on x86_64.
	(truncate): Alias to truncate64 on x86_64.
	(seteuid): Alias to seteuid32 on x86_64.
	(setuid): Alias to setuid32 on x86_64.
	(setreuid): Alias to setreuid32 on x86_64.
	(setegid): Alias to setegid32 on x86_64.
	(setgid): Alias to setgid32 on x86_64.
	(setregid): Alias to setregid32 on x86_64.
	* uinfo.cc (getuid): Alias to getuid32 on x86_64.
	(getgid): Alias to getgid32 on x86_64.
	(geteuid): Alias to geteuid32 on x86_64.
	(getegid): Alias to getegid32 on x86_64.
	* winsup.h (ILLEGAL_UID16): Don't define on x86_64.
	(ILLEGAL_GID16): Ditto.
	(uid16touid32): Don't declare on x86_64.
	(gid16togid32): Don't declare on x86_64.
@
text
@d21 1
a21 1
  struct stat statbuf;
@


1.12.6.2
log
@Pull in changes from HEAD
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003, 2008, 2010 Red Hat, Inc.
@


1.11
log
@Remove unneeded header files from source files throughout.
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003 Red Hat, Inc.
d29 1
a29 1
  /* Since __CYGWIN_USE_BIG_TYPES__,
@


1.10
log
@* exceptions.cc (ctrl_c_handler): Send SIGHUP when events occur only if there
is a tty associated with the process.  Send SIGHUP on CTRL_LOGOFF_EVENT.
* fhandler_tty.cc (fhandler_tty_slave::open): Adjust console open handle
counter regardless of whether this is a pty or tty.
(fhandler_tty_slave::open): Ditto.
(fhandler_tty_slave::dup): Ditto.
(fhandler_tty_common::set_close_on_exec): Ditto.
(fhandler_tty_master::init_console): Decrement console open handle counter
after init since it will now be handled by all tty open.
* syscalls.cc (setsid): Rework debugging output slightly.
@
text
@a14 1
#include <cygwin/ipc.h>
@


1.9
log
@	* winsup/cygwin/include/cygwin/version.h: Bump API minor version.
	* winsup/cygwin/include/cygwin/types.h: Define key_t as long long.
	* winsup/cygwin/cygwin.din: Add ftok, _ftok.
	* winsup/cygwin/ipc.cc (ftok): Rework implementation.
@
text
@d38 1
a38 1
    
d43 1
a43 1
     R. Collins suggests that these may represent a tree path, 
d46 1
a46 1
    
d48 1
a48 1
        device(32bits) << 16 | unit(32bits)
d51 2
a52 2
    
     As it happens, the maximum number of devices is actually 
d58 1
a58 1
    
d64 1
a64 1
    
d69 1
a69 1
    
d71 1
a71 1
    
d76 1
a76 1
    
@


1.8
log
@	* Makefile.in (CYGWIN_START): Define as crt0.o.  Add to TARGET_LIBS.
	* fhandler.h (fhandler_virtual::fstat): Remove useless declaration.
	* fhandler_virtual.cc: Remove _COMPILING_NEWLIB define.
	* ipc.cc (ftok): Use stat64.
	* syscalls.cc (_fstat64): Remove alias.
	(_fstat): Ditto.
	(_stat): Ditto.
	(_fstat64_r): New function.
	(_fstat_r): Ditto.
	(_stat64_r): Ditto.
	(stat_r): Ditto.
	* crt0.o: New file, moved from newlib.
	* include/sys/param.h: Ditto.
	* include/sys/utime.h: Ditto.
	* include/sys/utmp.h: Ditto.
	* include/sys/dirent.h: Ditto.  Expose different struct dirent,
	dependening of the environment.
@
text
@d3 1
a3 1
   Copyright 2001, 2002 Red Hat, Inc.
d6 1
a17 3
extern "C"
{

d19 1
a19 1
key_t
d23 1
d30 62
a91 8
  /* dev_t is short for cygwin
   * ino_t is long for cygwin
   * and we need 8 bits for the id.
   * thus key_t is long long.
   */
  return ((long long) statbuf.st_dev << (5*8)) | (statbuf.st_ino << (8) ) | (id & 0x00ff);
}

@


1.7
log
@More GNUify non-GNU formatted functions calls throughout.
@
text
@d24 2
a25 2
  struct stat statbuf;
  if (stat (path, &statbuf))
@


1.7.16.1
log
@merge from trunk
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003 Red Hat, Inc.
a5 1
   Updated to 64 bit key_t by Charles Wilson <cygwin@@cwilson.fastmail.fm>
d17 3
d21 1
a21 1
extern "C" key_t
d24 2
a25 3
  struct __stat64 statbuf;
  key_t tmp;
  if (stat64 (path, &statbuf))
d31 8
a38 62
  /* Since __CYGWIN_USE_BIG_TYPES__,
     dev_t is 32bits for cygwin
     ino_t is 64bits for cygwin
     and we need 8 bits for the id.
     thus key_t needs 104 bits total -- but we only have 64 (long long)
     We will have to alias; leaving open the possibility that the same
     key will be returned for multiple files.  This possibility exists
     also on Linux; the question is, how to minimize this possibility.
    
     How to solve?  Well, based on C. Vinschen's research, the nFileIndex*
     words vary as follows, on a partition with > 110,000 files
     nFileIndexHigh:    564 values between 0x00010000 -- 0xffff0000
     nFileIndexLow : 103812 values between 0x00000000 -- 0x0003ffff
     R. Collins suggests that these may represent a tree path, 
     and that it would require ~2.9M files to force the tree depth
     to increase and reveal more bit usage.
    
     Implementation details: dev_t is 32bits, but is formed by
        device(32bits) << 16 | unit(32bits)
     But device is ACTUALLY == status & FH_DEVMASK, where FH_DEVMASK
     is 0x00000fff --> 12 bits
    
     As it happens, the maximum number of devices is actually 
     FH_NDEV, not FH_DEVMASK, where FH_NDEV is currently 0x0000001d.
     However, FH_NDEV grows as new device types are added.  So
     currently the device number needs 5 bits, but later?  Let's
     take a cue from Linux, and use the lower 8 bits (instead of the
     lower 12 or 16) for the device (major?) number.
    
     Similarly, while 'units' is an int (32bits), it is unclear
     how many of these are significant. For most devices, it seems that
     'units' is equivalent to 'minor'.  For FH_TAPE, it's obvious that
     only 8 bits are important.  However, for FH_SOCKET...it might be
     as high as 16 significant bits.
    
     Let's assume that we only need 8 bits from device (major) and
     only 8 bits from unit (minor). (On linux, only 8 bits of minor
     are used, and none from major).
     ---> so, we only need 0x00ff00ff (16 bits) of dev_t
    
     ---> we MUST have all 8 bits of id.
    
     ---> So, we only have 64 - 8 - 16 = 40 bits for ino_t.  But, we
     need 0xffff0000 for nFileIndexHigh and 0x0003ffff for nFileIndexLow
     minimum, or 16 + 18 = 34 bits.  Lucky us - we have 6 more bits
     to distribute.
    
     For lack of a better idea, we'll allocate 2 of the extra bits to
     nFileIndexHigh and 4 to nFileIndexLow.  */

  /* get 8 bits from dev_t (major), put into 0xff00000000000000L */
  tmp  = (((key_t) statbuf.st_dev) & 0x0000000000ff0000LL) << 40;
  /* get 8 bits from dev_t (minor), put into 0x00ff000000000000L */
  tmp |= (((key_t) statbuf.st_dev) & 0x00000000000000ffLL) << 48;
  /* get upper 16+2 bits from nFileInfoHigh, put into 0x0000ffffc0000000L
     shift down first, then mask, to avoid sign extension on rightshift  */
  tmp |= (((key_t) statbuf.st_ino) & 0xffffc00000000000LL) >> 16;
  /* get lower 18+4 bits from nFileInfoLow, put into  0x000000003fffff00L  */
  tmp |= (((key_t) statbuf.st_ino) & 0x00000000003fffffLL) << 8;
  /* use all 8 bits of id, and put into 0x00000000000000ffL */
  tmp |= (id & 0x00ff);
  return tmp;
@


1.7.16.2
log
@merge from trunk
@
text
@d38 1
a38 1

d43 1
a43 1
     R. Collins suggests that these may represent a tree path,
d46 1
a46 1

d48 1
a48 1
	device(32bits) << 16 | unit(32bits)
d51 2
a52 2

     As it happens, the maximum number of devices is actually
d58 1
a58 1

d64 1
a64 1

d69 1
a69 1

d71 1
a71 1

d76 1
a76 1

@


1.6
log
@	* cygwin_ipc.h: Move to "include/cygwin/ipc.h".
	* cygwin_shm.h: Move to "include/cygwin/shm.h".
	* include/cygwin/ipc.h: New file.
	* include/cygwin/shm.h: New file.
	* ipc.c:c Update <cygwin/ipc.h> include.
	* cygserver_shm.cc: Update <cygwin/shm.h> include.
	* shm.cc: Ditto.
@
text
@d22 1
a22 1
ftok(const char *path, int id)
d25 1
a25 1
  if (stat(path, &statbuf))
@


1.5
log
@Use cygwin_{shm,ipc}.h instead of /sys/{shm,ipc}.h throughout.
* sys/ipc.h: Remove.
* sys/shm.h: Remove.
* cygwin_ipc.h: New file.
* cygwin_shm.h: New file.
@
text
@d14 1
a14 1
#include "cygwin_ipc.h"
@


1.4
log
@* dtable.cc (handle_to_fn): Attempt to handle "raw" accesses to remote shares.
* path.cc (mount_info::conv_to_win32_path): Set flags to binary when mount
entry is not found.
(mount_info::set_flags_from_win32_path): Ditto.
@
text
@d14 1
a14 1
#include <sys/ipc.h>
@


1.3
log
@* autoload.cc (LoadFuncEx): Define via new LoadFuncEx2 macro.
(LoadFuncEx2): Adapted from LoadFuncEx.  Provides control of return value for
nonexistent function.
(NtQueryObject): Declare.
(IsDebuggerPresent): Declare via LoadFuncEx2 and always return true if not
available.
* debug.h (being_debugged): Just rely on IsDebuggerPresent return value.
* dtable.cc (handle_to_fn): New function.
(dtable::init_std_file_from_handle): Attempt to derive std handle's name via
handle_to_fn.
(dtable::build_fhandler_from_name): Fill in what we can in path_conv structure
when given a handle and path doesn't exist.
* fhandler.cc (fhandler_base::open): Don't set the file pointer here.  Use
pc->exists () to determine if file exists rather than calling GetFileAttributes
again.
* fhandler.h (fhandler_base::exec_state_isknown): New method.
(fhandler_base::fstat_helper): Add extra arguments to declaration.
(fhandler_base::fstat_by_handle): Declare new method.
(fhandler_base::fstat_by_name): Declare new method.
* fhandler_disk_file (num_entries): Make __stdcall.
(fhandler_base::fstat_by_handle): Define new method.
(fhandler_base::fstat_by_name): Define new method.
(fhandler_base:fstat): Call fstat_by_{handle,name} as appropriate.
(fhandler_disk_file::fstat_helper): Accept extra arguments for filling out stat
structure.  Move handle or name specific stuff to new methods above.
(fhandler_disk_file::open): Use real_path->exists rather than calling
GetFileAttributes again.
* ntdll.h (FILE_NAME_INFORMATION): Define new structure.
(OBJECT_INFORMATION_CLASS): Partially define new enum.
(OBJECT_NAME_INFORMATION): Define new structure.
(NtQueryInformationFile): New declaration.
(NtQueryObject): New declaration.
* path.cc (path_conv::fillin): Define new method.
* path.h (path_conv::fillin): Declare new method.
(path_conv::drive_thpe): Rename from 'get_drive_type'.
(path_conv::volser): Declare new method.
(path_conv::volname): Declare new method.
(path_conv::root_dir): Declare new method.
* syscalls.cc (fstat64): Send real path_conv to fstat as second argument.
@
text
@d3 1
a3 1
   Copyright 2001 Red Hat, Inc.
@


1.2
log
@2002-02-28  Robert Collins  <rbtcollins@@hotmail.com>

	* Merged cygwin_daemon into head minus the new shm and ipc exports.

2002-02-28  Robert Collins  <rbtcollins@@hotmail.com>

	* fhandler_tty.cc (fhandler_tty_slave::open): More debugging.
	(fhandler_tty_slave::read): Fix printf type for the handle.
	* tty.cc (tty::common_init): Add a FIXME for security.

2002-01-29  Robert Collins  <rbtcollins@@hotmail.com>

	* Makefile.in (OBJS): Remove duplicate localtime.o.

2002-01-17  Robert Collins  <rbtcollins@@hotmail.com>

	* cygserver.cc (check_and_dup_handle): Consolidate the two variants for
	simplicity.
	Add Some basic debug output.
	(client_request_attach_tty::serve): Use the new debug_printf for clarity.
	Mark the duplicated handles as inheritable - fixup_after_fork() doesn't reopen
	tty's.

2002-01-16  Robert Collins  <rbtcollins@@hotmail.com>

	* cygserver.cc (transport): Correct scope.
	(client_request_attach_tty::serve): Add more debug information.
	Fix erroneous use of transport instead of conn.
	* cygserver_transport_pipes.cc (transport_layer_pipes::close): More debug.
	(transport_layer_pipes::read): Ditto.
	(transport_layer_pipes::write): Ditto.
	(transport_layer_pipes::impersonate_client): Ditto.

Mon Oct  8  7:41:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* cygserver.cc (server_request::process): Rename client_request_shm_get to
	client_request_shm.
	* cygserver_process.cc (process_cache::add): Rename to add_task.
	Use process_cleanup instead of process_request.
	(process_cache::remove_process): New method.
	(process::process): Initialize new members.
	(process::~process): New member.
	(process::cleanup): New method.
	(process::add_cleanup_routine): New method.
	(process_request::process): Rename to process_cleanup.
	Call the process object's cleanup method and then delete it.
	(process_process_param::request_loop): Remove the signalling process.
	* cygserver_shm.cc: Globally rename client_request_shm_get to client_request_shm.
	(client_request_shm_get::serve): Handle attach request counting.
	* cygserver_shm.h: Globally rename client_request_shm_get to client_request_shm.
	(class shm_cleanup): New class.
	* shm.cc: Globally rename client_request_shm_get to client_request_shm.
	(client_request_shm::client_request_shm): New constructor for attach requests.
	(shmat): Use it.
	* include/cygwin/cygserver_process.h (class process_request): Rename to
	process_cleanup.
	(class cleanup_routine): New class.
	(class process): New members and methods to allow calling back when the process
	terminates.

Thu Oct  4 14:12:00 2001  Robert Collins <rbtcollins@@hotmail.com>
	* cygserver.cc (request_loop): Make static.
	(main): Use new cache constructor syntax.
	Start cache worker threads.
	Cleanup the cache at shutdown.
	* cygserver_process.cc: Run indent.
	(process_cache::process_cache): Add a trigger to use when adding a process.
	(process_cache::process): Move process_entry to process.
	Insert at the end of the list.
	Trigger the request loop when new process's inserted.
	(process_cache::process_requests): Do it.
	(process_cache::add): New method.
	(process_cache::handle_snapshot): New method.
	(process::process): Merge in the process_entry fields.
	(process::handle): Make a stub function.
	(process::exit_code): New method.
	(process_request::process): New method.
	(process_process_param::request_loop): New method.
	* cygserver_shm.cc: New header dependency - threaded_queue.h.
	* threaded_queue.cc (threaded_queue::cleanup): Clearer messages.
	(queue_process_param::stop): Short spinlock on interruptible threads.
	* threaded_queue.h (class threaded_queue): New constructor.
	* include/cygwin/cygserver_process.h (process_request): New class.
	(process_entry): Remove.
	(process): Merge in process_entry.
	(process_cache): Inherit from threaded_queue.

Tue Oct  2 23:24:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* cygserver.cc (class server_process_param): Use new constructor syntax.
	* cygserver_process.cc (process_cache::~process_cache): New function.
	* threaded_queue.cc: Define condition debug_printf.
	Run indent.
	(threaded_queue::cleanup): Move queue_process_param guts to a method.
	(threaded_queue::process_requests): Ditto.
	(queue_process_param::queue_process_param): New method.
	(queue_process_param::~queue_process_param): Ditto.
	(queue_process_param::start): Ditto.
	(queue_process_param::stop): Ditto.
	* threaded_queue.h (class queue_process_param): Add support for
	interruptible request loops.
	* cygwin/include/cygwin/cygserver_process.h (class process_cache): Add
	destructor.

Tue Oct  2 23:24:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* cygserver_client.cc: New flag allow_daemon to disable the daemon completely.
	(cygserver_request): Check it.
	(cygserver_init): Ditto.
	* environ.cc (parse_thing): Add (no)daemon option.

Tue Oct  2 23:00:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* shm.cc: Update to handle include changes from HEAD.

Tue Oct  2 16:06:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* Makefile.in: Remove cygserver_shm.o from cygwin1.dll.
	Rename cygserver_shm_outside.o to cygserver_shm.o.
	* cygserver.cc (server_request::process): Use the new client_request
	constructor.
	* cygserver_client.cc: Remove the #ifdef's stubs for the server method
	within cygwin.
	(client_request_attach_tty::client_request_attach_tty): Use the new
	client_request constructor.
	(client_request_shutdown::client_request_shutdown): Ditto.
	(client_request::client_request): Ditto.
	* cygserver_shm.cc (client_request_shm_get::serve): Remove the
	#ifdef'd stub for in-cygwin builds.
	(client_request_shm_get::client_request_shm_get): Use the new
	client_request constructor, and remove the in-cygwin variants.
	* cygserver_shm.h (class client_request_shm_get): #ifndef test the
	serve method - it's only used in cygserver.
	* shm.cc (client_request_shm_get::client_request_shm_get): New function.
	* include/cygwin/cygserver.h (request_header): New constructor.
	(class client_request): Use it.
	New constructor accepting the header size.
	#ifndef test the server method - it's only used within cygserver.
	(client_request_get_version): #ifdef test the server method.
	(client_request_shutdown): Ditto.
	(client_request_attach_tty): Ditto.

Tue Oct  2  9:57:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* Makefile.in: add threaded_queue.o to cygserver.exe.
	* cygserver.cc: Include threaded_queue.h
	(class server_request): Inherit from queue_request.
	(class server_process_param): Inherit from queue_process_param.
	(class server_request_queue): Inherit from threaded_queue.
	(request_loop): Adjust for new types.
	(server_request_queue::process_requests): Remove guts to
	threaded_queue::process_requests.
	(server_request::server_request): Adjust for new types.
	(worker_function): Delete.
	(server_request_queue::create_workers): Delete.
	(server_request_queue::cleanup): Delete.
	(server_request_queue::add): Move guts to threaded_queue::add.
	* threaded_queue.cc: New file.
	* threaded_queue.h: New file.

Mon Oct  1 12:38:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* cygserver.cc (client_request::serve): New function.
	* cygserver_process.cc: Inlude <pthread.h> for pthread_once.
	(process_cache::process_cache): Initialise a crtiical section for write access.
	(process_cache::process): Use the critical section. Also add missing entries to
	the cache.
	(do_process_init): New function to initalise class process static variables.
	(process::process): Ensure that the process access critical section is
	initialised.
	(process::handle): Close the handle of old process's when they have terminated
	and we are returning the handle for a process with the same pid.
	* cygserver_shm.cc: Run indent.
	Include cygserver_process.h to allow process cache functionality.
	(client_request_shm_get::serve): New parameter for process cache support.
	Use the process cache, not OpenProcess to get a handle to the originating process.
	Fix a handle leak with token_handle.
	* cygserver_shm.h (class client_request_shm_get): Update ::serve for process
	cache support.
	* cygserver_transport_pipes.cc: Redefine debug_printf to be conditional on DEBUG.
	* include/cygwin/cygserver.h: Do not implement client_request::serve in the
	header.
	* include/cygwin/cygserver_process.h (class process_cache): Add a write access
	critical section to prevent races when requests from a  multithreaded
	application arrive.

Sun Sep 30 23:41:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* Makefile.in: Add cygserver_process.o to cygserver.exe.
	* cygserver.cc: Include signal.h and cygwin_version.h.
	Define debug_printf as a macro.
	Define DEBUG to a value.
	(client_request_attach_tty::serve): Add beginning of process cache support.
	Change from #ifdef DEBUG to work with new DEBUG style.
	(client_request_get_version::serve): Add beginning of process cache support.
	(class server_request): New prototype for support of process cache.
	(class queue_process_param): New class to allow request loop threading.
	(class server_request_queue): Add beginning of process cache support.
	Allow request loop threading.
	(request_loop): Thread function for request loops.
	(server_request_queue::process_requests): Initiator for threaded request loops.
	(client_request_shutdown::serve): Add beginning of process cache support.
	(server_request::server_request): Ditto.
	(server_request::process): Use debug_printf. Add beginning of process cache
	support.
	(server_request_queue::cleanup): Kill off any request loop threads.
	(server_request_queue::add): Add beginning of process cache support.
	(handle_signal): Trigger a shutdown.
	(main): Print out some useful info at startup - version, date time.
	Add process cache support.
	Spawn a separate thread for the transport request loop, thus allowing concurrent
	support for multiple transports.
	* cygserver_client.cc (client_request_get_version::serve): Add process cache
	support.
	(client_request_attach_tty::serve): Add process cache support.
	(client_request_shutdown::serve): Add process cache support.
	* cygsserver_process.cc: New file with the process cache support.
	* cygserver_shm.cc: Redefine debug_printf to allow conditional output.
	* cygwin.din: Export shmdt().
	* shm.cc: Run indent.
	Update FIXME's.
	(shmdt): New function.
	* include/cygwin/cygserver.h (class client_request): Add process cache support.
	(class client_request_get_version): Ditto.
	(class client_request_shutdown): Ditto.
	(class client_request_attach_tty): Ditto.
	* include/cygwin/cygserver_process.h: New header for process cache support.

Sun Sep 30  8:52:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* include/cygwin/cygserver_transport.h: Add copyright header.
	* include/cygwin/cygserver_transport_pipes.h: Ditto.
	* include/cygwin/cygserver_transport_sockets.h: Ditto.

Sat Sep 29 20:40:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* Makefile.in: Add cygserver_transport_sockets.o to DLL_OFILES.
	Add cygserver_transport_sockets_outside.o to cygserver.exe.
	* cygserver.cc: Include new include files.
	* cygserver_client.cc: Ditto.
	* cygserver_shm.h: No need to include <sys/socket.h> now.
	* cygerver_transport.cc: Include new include files.
	(transport_layer_base::transport_layer_base): Strip back to a stub.
	(transport_layer_base::listen): Ditto.
	(transport_layer_base::accept): Ditto.
	(transport_layer_base::close): Ditto.
	(transport_layer_base::read): Ditto.
	(transport_layer_base::write): Ditto.
	(transport_layer_base::connect): Ditto.
	* cygserver_transport_pipes.cc: Include new header
	"cygwin/cygserver_transport_pipes.h".
	* cygserver_transport_sockets.cc: New file.
	* dcrt0.cc: No need to include <sys/socket.h> now.
	* fhandler_tty.cc: Ditto.
	* tty.cc: Ditto.
	* include/cygwin/cygserver_transport.h: Strip the base class to a stub.
	Remove the cygserver_transport_pipes class.
	* include/cygwin/cygserver_transport_pipes.h: New file.
	* include/cygwin/cygserver_transport_sockets.h: New file.

Tue Sep 25 16:22:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* autoload.cc: Add dynamic load statement for 'ImpersonateNamedPipeClient'.
	* Makefile.in: Add new object files, and build instructions for cygserver.exe.
	* cygwin.din: Export ftok, shmat, shmctl and shmget.
	* dcrt0.cc: Additional includes for cygserver support.
	(dll_crt0_1): Initialise the cygserver client.
	* fhandler.h (fhandler_tty): New method cygserver_attach_tty.
	* fhandler_tty.cc: Additional includes for cygserver support.
	(fhandler_tty_slave::open): Attempt to use the cygserver when obtaining
	handles from the parent process. On failure or 9x use the current method.
	(fhandler_tty_slave::cygserver_attach_tty): New function.
	* fork.cc (fork_child): Fixup shm memory mapped areas.
	* pinfo.h: Declare fixup_shms_after_fork().
	* security.h: Declare alloc_sd().
	* tty.cc: Additonal includes to support cygserver.
	(tty::common_init): Don't allow others to open us if the cygserver is running.
	* winsup.h: Declare cygserver_running.
	* cygserver.cc: New file.
	* cygserver_client.cc: New file.
	* cygserver_shm.cc: New file.
	* cygserver_shm.h: New file.
	* cygserver_transport.cc: New file.
	* cygserver_transport_pipes.cc: New file.
	* ipc.cc: New file.
	* shm.cc: New file.
	* include/cygwin/cygserver.h: New file.
	* include/cygwin/cygserver_transport.h: New file.
	* include/sys/ipc.h: New file.
	* include/sys/shm.h: New file.

2002-02-28  Robert Collins  <rbtcollins@@hotmail.com>

	* thread.cc (semaphore::TryWait): Set errno as required by posix 1003.1.
	(__sem_wait): Ditto.
	(__sem_trywait): Ditto.
@
text
@d30 2
a31 2
  
  /* dev_t is short for cygwin 
d34 1
a34 1
   * thus key_t is long long. 
@


1.1
log
@file ipc.cc was initially added on branch cygwin_daemon.
@
text
@d1 39
@


1.1.2.1
log
@Tue Sep 25 16:22:00 2001 Robert Collins <rbtcollins@@hotmail.com>

        * autoload.cc: Add dynamic load statement for
	'ImpersonateNamedPipeClient'.
	* Makefile.in: Add new object files, and build
	instructions for cygserver.exe.
	* cygwin.din: Export ftok, shmat, shmctl and shmget.
	* dcrt0.cc: Additional includes for cygserver support.
	(dll_crt0_1): Initialise the cygserver client.
	* fhandler.h (fhandler_tty): New method cygserver_attach_tty.
	* fhandler_tty.cc: Additional includes for cygserver support.
	(fhandler_tty_slave::open): Attempt to use the cygserver when
	obtaining handles from the parent process. On failure or 9x
	use the current method.
	(fhandler_tty_slave::cygserver_attach_tty): New function.
	* fork.cc (fork_child): Fixup shm memory mapped areas.
	* pinfo.h: Declare fixup_shms_after_fork().
	* security.h: Declare alloc_sd().
	* tty.cc: Additonal includes to support cygserver.
	(tty::common_init): Don't allow others to open us if the cygserver is running.
	* winsup.h: Declare cygserver_running.
										CVS: ----------------------------------------------------------------------
@
text
@a0 39
/* ipc.cc: Single unix specification IPC interface for Cygwin

   Copyright 2001 Red Hat, Inc.

   Originally written by Robert Collins <robert.collins@@hotmail.com>

   This file is part of Cygwin.

   This software is a copyrighted work licensed under the terms of the
   Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
   details. */

#include "winsup.h"
#include <sys/ipc.h>
#include <sys/stat.h>

extern "C"
{

/* Notes: we return a valid key even if id's low order 8 bits are 0. */
key_t
ftok(const char *path, int id)
{
  struct stat statbuf;
  if (stat(path, &statbuf))
    {
      /* stat set the appropriate errno for us */
      return (key_t) -1;
    }
  
  /* dev_t is short for cygwin 
   * ino_t is long for cygwin
   * and we need 8 bits for the id.
   * thus key_t is long long. 
   */
  return ((long long) statbuf.st_dev << (5*8)) | (statbuf.st_ino << (8) ) | (id & 0x00ff);
}

}
@


1.1.2.2
log
@Merged changes from HEAD
@
text
@d3 1
a3 1
   Copyright 2001, 2002 Red Hat, Inc.
d30 2
a31 2

  /* dev_t is short for cygwin
d34 1
a34 1
   * thus key_t is long long.
@


1.1.2.3
log
@Merged changes from HEAD
@
text
@d14 1
a14 1
#include "cygwin_ipc.h"
@


1.1.2.4
log
@	* cygwin_ipc.h: Moved (back) to "include/sys/ipc.h".
	* cygwin_shm.h: Moved (back) to "include/sys/shm.h".
	* include/sys/ipc.h: New file.
	* include/sys/shm.h: New file.
	* cygserver_shm.h: Update for new header file locations.
	* ipc.cc: Ditto.
@
text
@d14 1
a14 1
#include <sys/ipc.h>
@


1.1.2.5
log
@Merged changes from HEAD
@
text
@d14 1
a14 1
#include <cygwin/ipc.h>
@


