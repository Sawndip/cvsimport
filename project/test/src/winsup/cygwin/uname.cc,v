head	1.34;
access;
symbols
	cygwin-1_7_35-release:1.34
	cygwin-1_7_34-release:1.34
	cygwin-1_7_33-release:1.32.4.1
	cygwin-1_7_32-release:1.32
	cygwin-1_7_31-release:1.32
	cygwin-1_7_30-release:1.32
	cygwin-1_7_29-release:1.32
	cygwin-1_7_29-release-branchpoint:1.32.0.4
	cygwin-pre-user-db:1.32
	cygwin-1_7_28-release:1.32
	cygwin-1_7_27-release:1.32
	cygwin-1_7_26-release:1.32
	cygwin-1_7_25-release:1.32
	cygwin-1_7_24-release:1.32
	cygwin-1_7_23-release:1.32
	callout:1.32.0.2
	cygwin-1_7_22-release:1.32
	cygwin-1_7_21-release:1.32
	cygwin-1_7_20-release:1.31
	cygwin-1_7_19-release:1.31
	cygwin-64bit-postmerge:1.31
	cygwin-64bit-premerge-branch:1.31.0.2
	cygwin-64bit-premerge:1.31
	cygwin-1_7_18-release:1.31
	post-ptmalloc3:1.30.10.1
	pre-ptmalloc3:1.30.10.1
	cygwin-1_7_17-release:1.30
	cygwin-64bit-branch:1.30.0.10
	cygwin-1_7_16-release:1.30
	cygwin-1_7_15-release:1.30
	cygwin-1_7_14_2-release:1.30
	cygwin-1_7_14-release:1.30
	cygwin-1_7_12-release:1.30
	cygwin-1_7_11-release:1.30
	cygwin-1_7_10-release:1.30
	signal-rewrite:1.30.0.8
	pre-notty:1.30
	cygwin-1_7_9-release:1.30
	cv-post-1_7_9:1.30.0.6
	cygwin-1_7_8-release:1.30
	cygwin-1_7_7-release:1.30
	cygwin-1_7_5-release:1.30
	cygwin-1_7_4-release:1.30
	cygwin-1_7_3-release:1.30
	cygwin-1_7_2-release:1.30
	fifo_doover3:1.30.0.4
	cygwin-1_7_1-release:1.30
	prefifo:1.30
	cv-branch-2:1.30.0.2
	pre-ripout-set_console_state_for_spawn:1.30
	EOL_registry_mounts:1.29
	preoverlapped:1.29
	drop_9x_support_start:1.28
	cr-0x5f1:1.28.0.8
	cv-branch:1.28.0.6
	pre-ptymaster-archetype:1.28
	cr-0x3b58:1.28.0.4
	cr-0x5ef:1.28.0.2
	after-mmap-privanon-noreserve:1.27
	after-mmap-revamp:1.27
	before-mmap-revamp:1.27
	cgf-more-exit-sync:1.27
	post_wait_sig_exit:1.26
	pre_wait_sig_exit:1.26
	reparent-point:1.23
	noreparent:1.23.0.2
	cr-0x5e6:1.21.0.16
	cr-0x9e:1.21.0.14
	cr-0x9d:1.21.0.12
	cgf-deleteme:1.21.0.10
	pre-sigrewrite:1.21
	corinna-01:1.21
	cr-0x9c:1.21.0.8
	cr-0x9b:1.21.0.6
	cr-0x99:1.21
	Z-emcb-cygwin_daemon:1.21.0.4
	w32api-2_2:1.21
	mingw-runtime-2_4:1.21
	pre-cgf-merge:1.21
	cgf-dev-branch:1.21.0.2
	predaemon:1.17
	cygwin_daemon_merge_HEAD:1.17
	pregp02r1:1.17.0.30
	cygnus_cvs_20020108_pre:1.17
	Z-cygwin_daemon_merge-new_HEAD:1.19
	Z-cygwin_daemon_merge_HEAD:1.19
	cygwin_daemon:1.15.0.2;
locks; strict;
comment	@// @;
expand	@o@;


1.34
date	2015.01.24.19.56.42;	author corinna;	state Exp;
branches;
next	1.33;

1.33
date	2014.08.22.09.21.33;	author corinna;	state Exp;
branches;
next	1.32;

1.32
date	2013.07.11.11.20.38;	author corinna;	state Exp;
branches
	1.32.2.1
	1.32.4.1;
next	1.31;

1.31
date	2013.01.21.04.38.29;	author cgf;	state Exp;
branches;
next	1.30;

1.30
date	2008.04.07.18.45.59;	author cgf;	state Exp;
branches
	1.30.10.1;
next	1.29;

1.29
date	2007.02.23.10.51.59;	author corinna;	state Exp;
branches;
next	1.28;

1.28
date	2006.01.13.14.00.10;	author corinna;	state Exp;
branches;
next	1.27;

1.27
date	2005.10.03.09.24.42;	author corinna;	state Exp;
branches;
next	1.26;

1.26
date	2005.07.03.02.40.30;	author cgf;	state Exp;
branches;
next	1.25;

1.25
date	2005.06.06.16.17.10;	author corinna;	state Exp;
branches;
next	1.24;

1.24
date	2005.06.06.15.58.08;	author corinna;	state Exp;
branches;
next	1.23;

1.23
date	2004.09.12.03.47.57;	author cgf;	state Exp;
branches;
next	1.22;

1.22
date	2004.07.24.09.41.34;	author corinna;	state Exp;
branches;
next	1.21;

1.21
date	2003.01.15.10.21.23;	author corinna;	state Exp;
branches;
next	1.20;

1.20
date	2003.01.12.11.45.54;	author corinna;	state Exp;
branches;
next	1.19;

1.19
date	2002.06.05.04.01.43;	author cgf;	state Exp;
branches;
next	1.18;

1.18
date	2002.05.28.01.55.40;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2001.11.05.06.09.09;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2001.10.15.09.41.18;	author corinna;	state Exp;
branches;
next	1.15;

1.15
date	2001.09.16.14.26.11;	author duda;	state Exp;
branches
	1.15.2.1;
next	1.14;

1.14
date	2001.09.12.17.46.37;	author corinna;	state Exp;
branches;
next	1.13;

1.13
date	2001.09.11.20.01.01;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2001.09.07.21.32.05;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2001.09.04.20.16.33;	author corinna;	state Exp;
branches;
next	1.10;

1.10
date	2001.06.24.22.26.53;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2001.04.15.20.39.46;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2000.09.30.01.38.13;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2000.09.08.02.56.55;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2000.08.02.16.28.18;	author dj;	state Exp;
branches;
next	1.5;

1.5
date	2000.05.23.14.10.31;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2000.05.23.05.18.48;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.28.06.21.07;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.28.05.05.33;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.32.2.1
date	2013.07.31.14.50.09;	author cgf;	state Exp;
branches;
next	;

1.32.4.1
date	2014.11.13.12.53.08;	author corinna;	state Exp;
branches;
next	1.32.4.2;

1.32.4.2
date	2014.11.13.19.46.12;	author corinna;	state Exp;
branches;
next	;

1.30.10.1
date	2013.01.21.13.52.11;	author corinna;	state Exp;
branches;
next	;

1.15.2.1
date	2002.01.04.03.56.11;	author rbcollins;	state Exp;
branches;
next	1.15.2.2;

1.15.2.2
date	2002.06.13.14.34.14;	author rbcollins;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.34
log
@	* uname.cc (uname): Shorten "WOW64" to "WOW" to account for the new
	Windows 10 OS version "10.0" starting with preview build 9926.
@
text
@/* uname.cc

   Copyright 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
   2006, 2007, 2008, 2013, 2014, 2015 Red Hat, Inc.
   Written by Steve Chamberlain of Cygnus Support, sac@@cygnus.com
   Rewritten by Geoffrey Noer of Cygnus Solutions, noer@@cygnus.com

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include "winsup.h"
#include <sys/utsname.h>
#include "cygwin_version.h"
#include "cygtls.h"

/* uname: POSIX 4.4.1.1 */
extern "C" int
uname (struct utsname *name)
{
  SYSTEM_INFO sysinfo;

  __try
    {
      char *snp = strstr  (cygwin_version.dll_build_date, "SNP");

      memset (name, 0, sizeof (*name));
      __small_sprintf (name->sysname, "CYGWIN_%s", wincap.osname ());

      /* Add a hint to the sysname, that we're running under WOW64.  This might
	 give an early clue if somebody encounters problems. */
      if (wincap.is_wow64 ())
	strncat (name->sysname, "-WOW",
		 sizeof name->sysname - strlen (name->sysname) - 1);

      GetSystemInfo (&sysinfo);

      /* Computer name */
      cygwin_gethostname (name->nodename, sizeof (name->nodename) - 1);

      /* Cygwin dll release */
      __small_sprintf (name->release, "%d.%d.%d%s(%d.%d/%d/%d)",
		       cygwin_version.dll_major / 1000,
		       cygwin_version.dll_major % 1000,
		       cygwin_version.dll_minor,
		       snp ? "s" : "",
		       cygwin_version.api_major,
		       cygwin_version.api_minor,
		       cygwin_version.shared_data,
		       cygwin_version.mount_registry);

      /* Cygwin "version" aka build date */
      strcpy (name->version, cygwin_version.dll_build_date);
      if (snp)
	name->version[snp - cygwin_version.dll_build_date] = '\0';

      /* CPU type */
      switch (sysinfo.wProcessorArchitecture)
	{
	  case PROCESSOR_ARCHITECTURE_INTEL:
	    unsigned int ptype;
	    if (sysinfo.wProcessorLevel < 3) /* Shouldn't happen. */
	      ptype = 3;
	    else if (sysinfo.wProcessorLevel > 9) /* P4 */
	      ptype = 6;
	    else
	      ptype = sysinfo.wProcessorLevel;
	    __small_sprintf (name->machine, "i%d86", ptype);
	    break;
	  case PROCESSOR_ARCHITECTURE_IA64:
	    strcpy (name->machine, "ia64");
	    break;
	  case PROCESSOR_ARCHITECTURE_AMD64:
	    strcpy (name->machine, "x86_64");
	    break;
	  case PROCESSOR_ARCHITECTURE_IA32_ON_WIN64:
	    strcpy (name->machine, "ia32-win64");
	    break;
	  case PROCESSOR_ARCHITECTURE_ALPHA:
	    strcpy (name->machine, "alpha");
	    break;
	  case PROCESSOR_ARCHITECTURE_MIPS:
	    strcpy (name->machine, "mips");
	    break;
	  default:
	    strcpy (name->machine, "unknown");
	    break;
	}
    }
  __except (EFAULT)
    {
      return -1;
    }
  __endtry
  return 0;
}
@


1.33
log
@	* Throughout, use __try/__except/__endtry blocks, rather than myfault
	handler.
	* cygtls.cc (_cygtls::remove): Accommodate the fact that pathbufs
	has been moved from _local_storage to _cygtls.
	* cygtls.h (class tls_pathbuf): Add comment to hint to gendef usage
	of counters.  Change type of counters to uint32_t for clarity.
	Remove _cygtls as friend class.
	(struct _local_storage): Move pathbufs from here...
	(struct _cygtls): ...to here, allowing to access it from _sigbe.
	(class san): Only define on 32 bit.  Remove errno, _c_cnt and _w_cnt
	members.
	(san::setup): Drop parameter.  Don't initialize removed members.
	(san::leave): Don't set removed members.
	(class myfault): Only define on 32 bit.
	(myfault::faulted): Only keep implementation not taking any parameter.
	Drop argument in call to sebastian.setup.
	(__try/__leave/__except/__endtry): Implement to support real SEH.  For
	now stick to SJLJ on 32 bit.
	* dcrt0.cc (dll_crt0_0): Drop 64 bit call to
	exception::install_myfault_handler.
	* exception.h (exception_handler): Define with EXCEPTION_DISPOSITION
	as return type.
	(PDISPATCHER_CONTEXT): Define as void * on 32 bit.  Define as pointer
	to _DISPATCHER_CONTEXT on 64 bit.
	(class exception): Define separately for 32 and 64 bit.
	(exception::myfault): Add handler for myfault SEH handling on 64 bit.
	(exception::exception): Fix mangled method name to account for change
	in type of last parameter.
	(exception::install_myfault_handler): Remove.
	* exceptions.cc (exception::myfault_handle): Remove.
	(exception::myfault): New SEH handler for 64 bit.
	* gendef (_sigbe): Set tls_pathbuf counters to 0 explicitely when
	returning to the caller.
	* ntdll.h: Move a comment to a better place.
	(struct _SCOPE_TABLE): Define on 64 bit.
	* thread.cc (verifyable_object_isvalid): Remove gcc 4.7 workaround.
	* tls_pbuf.cc (tls_pbuf): Fix to accommodate new place of pathbufs.
	(tls_pathbuf::destroy): Change type of loop variables to uint32_t.
	* tls_pbuf.h (class tmp_pathbuf): Change type of buffer counters to
	uint32_t.  Accommodate new place of pathbufs.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Regenerate.
@
text
@d4 1
a4 1
   2006, 2007, 2008, 2013, 2014 Red Hat, Inc.
d35 1
a35 1
	strncat (name->sysname, "-WOW64",
@


1.32
log
@	* uname.cc (uname): Drop unused code.
@
text
@d4 1
a4 1
   2006, 2007, 2008, 2013 Red Hat, Inc.
d25 6
a30 35
  myfault efault;
  if (efault.faulted (EFAULT))
    return -1;

  char *snp = strstr  (cygwin_version.dll_build_date, "SNP");

  memset (name, 0, sizeof (*name));
  __small_sprintf (name->sysname, "CYGWIN_%s", wincap.osname ());

  /* Add a hint to the sysname, that we're running under WOW64.  This might
     give an early clue if somebody encounters problems. */
  if (wincap.is_wow64 ())
    strncat (name->sysname, "-WOW64",
	     sizeof name->sysname - strlen (name->sysname) - 1);

  GetSystemInfo (&sysinfo);

  /* Computer name */
  cygwin_gethostname (name->nodename, sizeof (name->nodename) - 1);

  /* Cygwin dll release */
  __small_sprintf (name->release, "%d.%d.%d%s(%d.%d/%d/%d)",
		   cygwin_version.dll_major / 1000,
		   cygwin_version.dll_major % 1000,
		   cygwin_version.dll_minor,
		   snp ? "s" : "",
		   cygwin_version.api_major,
		   cygwin_version.api_minor,
		   cygwin_version.shared_data,
		   cygwin_version.mount_registry);

  /* Cygwin "version" aka build date */
  strcpy (name->version, cygwin_version.dll_build_date);
  if (snp)
    name->version[snp - cygwin_version.dll_build_date] = '\0';
d32 61
a92 2
  /* CPU type */
  switch (sysinfo.wProcessorArchitecture)
d94 1
a94 28
      case PROCESSOR_ARCHITECTURE_INTEL:
	unsigned int ptype;
	if (sysinfo.wProcessorLevel < 3) /* Shouldn't happen. */
	  ptype = 3;
	else if (sysinfo.wProcessorLevel > 9) /* P4 */
	  ptype = 6;
	else
	  ptype = sysinfo.wProcessorLevel;
	__small_sprintf (name->machine, "i%d86", ptype);
	break;
      case PROCESSOR_ARCHITECTURE_IA64:
	strcpy (name->machine, "ia64");
	break;
      case PROCESSOR_ARCHITECTURE_AMD64:
	strcpy (name->machine, "x86_64");
	break;
      case PROCESSOR_ARCHITECTURE_IA32_ON_WIN64:
	strcpy (name->machine, "ia32-win64");
	break;
      case PROCESSOR_ARCHITECTURE_ALPHA:
	strcpy (name->machine, "alpha");
	break;
      case PROCESSOR_ARCHITECTURE_MIPS:
	strcpy (name->machine, "mips");
	break;
      default:
	strcpy (name->machine, "unknown");
	break;
d96 1
a96 1

@


1.32.4.1
log
@2014-11-07  Corinna Vinschen  <corinna@@vinschen.de>

	* dcrt0.cc (cygwin__cxa_atexit): Fetch correct DSO handle value
	by searching dll list.  Explain why.

2014-11-06  Corinna Vinschen  <corinna@@vinschen.de>

	* dcrt0.cc (cygwin_atexit): Change preceeding comment to reflect
	API version numbers.
	* external.cc (cygwin_internal): disable setting cxx_malloc on 64 bit.
	Add CW_FIXED_ATEXIT case.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
	* include/sys/cygwin.h (cygwin_getinfo_types): Add CW_FIXED_ATEXIT.
	* lib/atexit.c (atexit): Test running Cygwin version by checking
	return value of cygwin_internal (CW_FIXED_ATEXIT).

2014-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* lib/atexit.c (atexit): Check for being linked into the executable.
	If so, call __cxa_atexit with NULL DSO handle.  Explain why.
	* lib/dso_handle.c: New file providing fallback __dso_handle.

2014-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (NEW_FUNCTIONS): Add atexit to be not exported.
	* lib/atexit.c (atexit): New, statically linkable version of atexit.
	* dcrt0.cc (cygwin_atexit): Add comment to mark this function as old
	entry point.  Indiscriminately check for DSO of function pointer for
	all functions, if checking for DSO of return address fails on x86_64.
	Change comment accordingly.

2014-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (NEW_FUNCTIONS): Define target-independent.  Add target
	dependent stuff afterwards.  Globally define timezone and all xdr
	symbols as non-exported from libcygwin.a.

2014-11-03  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc: Fix formatting.

2014-10-29  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc (init_cygheap::init_installation_root): Create content of
	installation_dir as non-prefixed path, if possible.

2014-10-29  Corinna Vinschen  <corinna@@vinschen.de>

	* common.din (__cxa_atexit): Define as cygwin__cxa_atexit.
	* dcrt0.cc (cygwin__cxa_atexit): New function.  Explain what we do.

2014-10-28  Corinna Vinschen  <corinna@@vinschen.de>

	* globals.cc (dos_file_warning): Set to false by default.
	* path.cc (warn_msdos): Make static.  Drop test for dos_file_warning.
	(path_conv::check): Check for dos_file_warning here to avoid a function
	call in the default case.

2014-10-27  Corinna Vinschen  <corinna@@vinschen.de>

	* dcrt0.cc (cygwin_atexit): Add workaround for broken atexit calls
	in __gcc_register_frame of DLLs built with gcc-4.8.3-3.

2014-10-27  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc (init_cygheap::init_installation_root): Set
	installation_dir_len.
	* cygheap.h (struct init_cygheap): Add installation_dir_len member.
	* environ.cc (win_env::add_cache): Use stpcpy for speed.
	(posify_maybe): Use tmp_pathbuf buffer instead of stack.
	(raise_envblock): New function to resize Windows environment block.
	(build_env): Fix indentation.  Call raise_envblock function.  Check if
	$PATH exists and is non-empty.  If not, add PATH variable with Cygwin
	installation directory as content to Windows environment.  Explain why.

2014-10-24  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_proc.cc (format_proc_cygdrive): Fix symlink path if cygdrive
	is "/".

2014-10-24  Corinna Vinschen  <corinna@@vinschen.de>

	* gendef (sigdelayed): 64 bit only: Fix seh_pushreg statements in
	prologue.

2014-10-22  Yaakov Selkowitz  <yselkowi@@redhat.com>

	* common.din (stime): Export.
	* times.cc (stime): New function.
	* include/cygwin/time.h (stime): Declare.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.

2014-10-20  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_serial.cc: Revert debug code accidentally checked in on
	2014-08-18.

2014-10-20  Corinna Vinschen  <corinna@@vinschen.de>

	* path.cc (symlink_info::check): Set error from status code if opening
	the parent directory failed, but keep special case for root dirs.

2014-10-17  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc (init_cygheap::init_installation_root): Just memmove
	contents of installation_root instead of calling GetModuleFileNameW
	again.  Copy installation_root to installation_dir before stripping of
	"bin" dir.  Explain what we do.
	* cygheap.h (struct init_cygheap): Add installation_dir member.

2014-10-17  Corinna Vinschen  <corinna@@vinschen.de>

	* cygtls.h (__try): Define __l_endtry as block-local label in 32 bit
	case as well.

2014-10-17  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (DLL_OFILES): Add quotactl.o.
	* common.din (quotactl): Export.
	* ntdll.h: Define FILE_FS_CONTROL_INFORMATION::FileSystemControlFlags
	flag values.
	(struct _FILE_FS_CONTROL_INFORMATION): Define.
	(struct _FILE_GET_QUOTA_INFORMATION): Define.
	(typedef struct _FILE_QUOTA_INFORMATION): Define.
	(NtQueryObject): Use PVOID rather than VOID*.
	(NtQueryVolumeInformationFile): Ditto.
	(NtQueryQuotaInformationFile): Declare.
	(NtSetQuotaInformationFile): Declare.
	(NtSetVolumeInformationFile): Declare.
	* quotactl.cc: New file implementing quotactl().
	* include/sys/mount.h (BLOCK_SIZE): Define.
	(BLOCK_SIZE_BITS): Define.
	* include/sys/quota.h: New header.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.

2014-10-16  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (DLL_OFILES): Rearrange with one file per line.

2014-10-16  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_proc.cc (format_proc_partitions): Extend output to print
	the windows mount points the device is mounted on.

2014-10-13  Corinna Vinschen  <corinna@@vinschen.de>

	* net.cc (cygwin_setsockopt): Drop redundant test for AF_LOCAL and
	SOCK_STREAM in SO_PEERCRED case, as in the original patch.

2014-10-12  Corinna Vinschen  <corinna@@vinschen.de>

	* dlfcn.cc (gfpod_helper): Only check for POSIX dir separator, same as
	in get_full_path_of_dll.

2014-10-12  Corinna Vinschen  <corinna@@vinschen.de>

	* dlfcn.cc (set_dl_error): Drop useless __stdcall.
	(check_path_access): Ditto.  Drop FE_CWD from call to find_exec.
	(gfpod_helper): Call path_conv::check for all paths containing a dir
	separator to more closely follow the Linux search algorithm.
	(get_full_path_of_dll): Drop useless __stdcall.
	(dlopen): Simplify RTLD_NOLOAD case by calling GetModuleHandleEx
	instead of GetModuleHandle/LoadLibrary.

2014-10-11  Christian Franke  <franke@@computer.org>

	Add setsockopt(sd, SOL_SOCKET, SO_PEERCRED, NULL, 0) to disable
	initial handshake on AF_LOCAL sockets.
	* fhandler.h (class fhandler_socket): Add no_getpeereid status flag.
	(fhandler_socket::af_local_set_no_getpeereid): New prototype.
	* fhandler_socket.cc (fhandler_socket::af_local_connect): Skip handshake
	if no_getpeereid is set.  Add debug output.
	(fhandler_socket::af_local_accept): Likewise.
	(fhandler_socket::af_local_set_no_getpeereid): New function.
	(fhandler_socket::af_local_copy): Copy no_getpeereid.
	(fhandler_socket::getpeereid): Fail if no_getpeereid is set.
	* net.cc (cygwin_setsockopt): Add SO_PEERCRED for AF_LOCAL/SOCK_STREAM
	sockets.  Add comment to explain why we need it.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.

2014-10-10  Corinna Vinschen  <corinna@@vinschen.de>

	* dlfcn.cc (dlopen): Disable old 32 bit code on 64 bit.
	* dcrt0.cc (check_sanity_and_sync): Ditto.
	* dll_init.cc (dll_dllcrt0_1): Fix typo in comment.

2014-10-08  Corinna Vinschen  <corinna@@vinschen.de>

	* common.din (ffsl): Export.
	(ffsll): Export.
	* syscalls.cc (ffs): Implement using GCC intrinsic.
	(ffsl): Ditto.
	(ffsll): Ditto.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.

2014-10-08  Christian Franke  <franke@@computer.org>

	* syscalls.cc (ffs): Fix crash of ffs (0x80000000) on 64 bit.

2014-10-08  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_process.cc (format_process_statm): Fix output of dirty
	pages.  Add linefeed.

2014-09-05  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_proc.cc (proc_tab): Add entry for cygdrive symlink.
	(format_proc_cygdrive): New function to implement /proc/cygdrive.

2014-09-05  Corinna Vinschen  <corinna@@vinschen.de>

	* exception.h (class exception): Remove unnecessary #ifdef.

2014-09-05  Corinna Vinschen  <corinna@@vinschen.de>

	* winlean.h (DNLEN): Raise to 31.  Explain why.

2014-08-28  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_disk_file.cc (fhandler_disk_file::fstatvfs): Try the
	FileFsSizeInformation information class on filesystems choking on
	FileFsFullSizeInformation (I see you Netapp!)

2014-08-27  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.h (fhandler_pty_slave::fch_open_handles): Add bool parameter
	to declaration.
	* fhandler_tty.cc (fhandler_pty_slave::fch_open_handles): Add bool
	parameter "chown".  Only request WRITE_OWNER access when opening pty
	synchronization objects if "chown" is set.
	(fhandler_pty_slave::fchmod): Call fch_open_handles with new bool
	parameter set to false.
	(fhandler_pty_slave::fchown): Call fch_open_handles with new bool
	parameter set to true.
	* kernel32.cc (CreateFileMappingW): Fix default standard rights for
	file mappings from READ_CONTROL to STANDARD_RIGHTS_REQUIRED to allow
	changing the DACL (fixes "access denied" error in pinfo::set_acl).

	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Change debug
	output to print mode bits in octal.
	* security.cc (alloc_sd): Ditto.
	(set_file_attribute): Ditto.

2014-08-27  Corinna Vinschen  <corinna@@vinschen.de>

	* ntea.cc (read_ea): Change left-over return to __leave.  Fix
	condition to close handle.  Call NtClose rather than CloseHandle.
	(write_ea): Fix condition to close handle.  Call NtClose rather than
	CloseHandle.
	* security.cc (get_file_sd): Call pc.init_reopen_attr if a valid
	incoming handle was given, pc.get_object_attr otherwise.
	(set_file_sd): Ditto.

2014-08-26  Corinna Vinschen  <corinna@@vinschen.de>

	* path.h (path_conv::init_reopen_attr): Change from void to returning
	POBJECT_ATTRIBUTES.  Take OBJECT_ATTRIBUTES reference as argument, not
	pointer.
	* fhandler_disk_file.cc: Throughout accommodate above change.
	* syscalls.cc: Ditto.
	* ntea.cc (read_ea): Don't set hdl to NULL if it's already NULL.  Set
	attr with pc.init_reopen_attr before trying to reopen file.
	(write_ea): Ditto.
	* security.cc (get_file_sd): Use pc.init_reopen_attr rather than
	pc.get_object_attr when trying to reopen file.
	(set_file_sd): Ditto.

2014-08-25  Corinna Vinschen  <corinna@@vinschen.de>

	* cygtls.cc (san::leave/x86_64): Implement.
	* cygtls.h (class tls_pathbuf): Move counter variables into a union.
	Add 64 bit element _counters covering both counter variables to
	optimize save and restore operations.
	(class san/x86_64): Only store single 64 bit value.
	(san::san/x86_64): Implement.
	(san::leave/x86_64): Only declare here, as returns_twice function.
	Explain why.
	(class san/i686): Change type of _c_cnt and _w_cnt to uint32_t.
	(__try/x86_64): Move definition of __sebastian after the first memory
	barrier.  Drop __sebastian.setup call.

2014-08-25  Corinna Vinschen  <corinna@@vinschen.de>

	* cygtls.cc (_cygtls::remove): Revert previous patch.
	*  cygtls.h (struct _local_storage): Move pathbufs back here.
	(class san/x86_64): Revert class.  Save and restore pathbufs counters
	only.
	(class san/i686): Revert saving and restoring pathbufs counters.
	(__try/x86_64): Add a san variable and call it's setup method.
	(__except/x86_64): Call san::leave to restore pathbufs counters.
	* gendef (_sigbe): Revert previous change.
	* thread.cc (verifyable_object_state): Remove gcc 4.7 workaround in
	forward declaration as well.
	* tls_pbuf.cc (tls_pbuf): Revert previous change.
	* tls_pbuf.h (class tmp_pathbuf): Accommodate reverting pathbufs to
	locals structure.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Regenerate.

2014-08-21  Corinna Vinschen  <corinna@@vinschen.de>

	* Throughout, use __try/__except/__endtry blocks, rather than myfault
	handler.
	* cygtls.cc (_cygtls::remove): Accommodate the fact that pathbufs
	has been moved from _local_storage to _cygtls.
	* cygtls.h (class tls_pathbuf): Add comment to hint to gendef usage
	of counters.  Change type of counters to uint32_t for clarity.
	Remove _cygtls as friend class.
	(struct _local_storage): Move pathbufs from here...
	(struct _cygtls): ...to here, allowing to access it from _sigbe.
	(class san): Only define on 32 bit.  Remove errno, _c_cnt and _w_cnt
	members.
	(san::setup): Drop parameter.  Don't initialize removed members.
	(san::leave): Don't set removed members.
	(class myfault): Only define on 32 bit.
	(myfault::faulted): Only keep implementation not taking any parameter.
	Drop argument in call to sebastian.setup.
	(__try/__leave/__except/__endtry): Implement to support real SEH.  For
	now stick to SJLJ on 32 bit.
	* dcrt0.cc (dll_crt0_0): Drop 64 bit call to
	exception::install_myfault_handler.
	* exception.h (exception_handler): Define with EXCEPTION_DISPOSITION
	as return type.
	(PDISPATCHER_CONTEXT): Define as void * on 32 bit.  Define as pointer
	to _DISPATCHER_CONTEXT on 64 bit.
	(class exception): Define separately for 32 and 64 bit.
	(exception::myfault): Add handler for myfault SEH handling on 64 bit.
	(exception::exception): Fix mangled method name to account for change
	in type of last parameter.
	(exception::install_myfault_handler): Remove.
	* exceptions.cc (exception::myfault_handle): Remove.
	(exception::myfault): New SEH handler for 64 bit.
	* gendef (_sigbe): Set tls_pathbuf counters to 0 explicitely when
	returning to the caller.
	* ntdll.h: Move a comment to a better place.
	(struct _SCOPE_TABLE): Define on 64 bit.
	* thread.cc (verifyable_object_isvalid): Remove gcc 4.7 workaround.
	* tls_pbuf.cc (tls_pbuf): Fix to accommodate new place of pathbufs.
	(tls_pathbuf::destroy): Change type of loop variables to uint32_t.
	* tls_pbuf.h (class tmp_pathbuf): Change type of buffer counters to
	uint32_t.  Accommodate new place of pathbufs.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Regenerate.

2014-08-21  Corinna Vinschen  <corinna@@vinschen.de>

	* miscfuncs.cc (__import_address): Cover the first dereference to imp
	under the fault handler.

2014-08-21  Corinna Vinschen  <corinna@@vinschen.de>

	* net.cc (if_freenameindex): Don't catch a SEGV from free to fail
	loudly on double free.

2014-08-21  Corinna Vinschen  <corinna@@vinschen.de>

	* dir.cc (rmdir): Don't skip deleting fh in the ENOTEMPTY case.

2014-08-20  Corinna Vinschen  <corinna@@vinschen.de>

	* tls_pbuf.h (tmp_pathbuf::tmp_pathbuf): Convert to inline method.
	(tmp_pathbuf::~tmp_pathbuf): Ditto.
	* tls_pbuf.cc (tmp_pathbuf::tmp_pathbuf): Remove here.
	(tmp_pathbuf::~tmp_pathbuf): Ditto.

2014-08-19  Corinna Vinschen  <corinna@@vinschen.de>

	* dir.cc (dirfd): Per POSIX, return EINVAL on invalid directory stream.
	(telldir): Per POSIX, return -1 and set errno to EBADF, rather than
	just returning 0, on invalid directory stream.
	* signal.cc (sigwaitinfo): Return -1, not EFAULT, when SEGV was catched.

2014-08-19  Corinna Vinschen  <corinna@@vinschen.de>

	* autoload.cc: Replace WNet[...]A with WNet[...]W imports.
	* dcrt0.cc (initial_env): Drop strlwr calls.  Call strcasestr instead.
	* fhandler_netdrive.cc: Throughout, convert to calling WNet UNICODE
	functions.  Use tmp_pathbuf rather than alloca.  Replace call to
	strlwr with call to RtlDowncaseUnicodeString.

2014-08-19  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.h (fhandler_serial::is_tty): Reinstantiate.

2014-08-18  Corinna Vinschen  <corinna@@vinschen.de>

	* miscfuncs.cc (strlwr): Rename from cygwin_strlwr.  Drop __stdcall
	decoration.
	(strupr): Rename from cygwin_strupr.  Drop __stdcall decoration.
	* string.h (strlwr): Remove override macro.  Simply declare.
	(strupr): Ditto.

2014-08-18  Corinna Vinschen  <corinna@@vinschen.de>

	* dtable.cc (dtable::init_std_file_from_handle): Mention that console
	handles are kernel objects since Windows 8.
	* fhandler.h (enum conn_state): Add "listener" state.
	(class fhandler_socket): Drop listener status flag.
	(fhandler_socket::lseek): Return -1 and errno ESPIPE.
	(fhandler_serial::lseek): Ditto.
	(fhandler_serial::is_tty): Remove.
	* fhandler_socket.cc (fhandler_socket::listen): Set connect_state to
	listener.  Add comment.
	(fhandler_socket::accept4): Explicitely check if the socket is listening
	and fail with EINVAL, if not.  Explain why we have to do that.
	(fhandler_socket::getpeereid): Drop now redundant test.

2014-08-15  Corinna Vinschen  <corinna@@vinschen.de>

	* winsup.h (_GNU_SOURCE): Define.  Explain why.

2014-08-14  Corinna Vinschen  <corinna@@vinschen.de>

	* dlmalloc.c: Remove unused file.
	* dlmalloc.h: Ditto.
	* malloc.cc: Update to Doug Lea's malloc version 2.8.6.

2014-08-13  Corinna Vinschen  <corinna@@vinschen.de>

	* include/cygwin/version.h (CYGWIN_VERSION_DLL_MINOR): Bump to 33.
	(CYGWIN_VERSION_API_MINOR): Bump to reflect intermediate 1.7.32 release.

2014-07-21  Corinna Vinschen  <corinna@@vinschen.de>

	* include/cygwin/version.h (CYGWIN_VERSION_DLL_MINOR): Bump to 32.

2014-05-06  Corinna Vinschen  <corinna@@vinschen.de>

	* winlean.h (PIPE_REJECT_REMOTE_CLIENTS): Drop temporary definition
	since Mingw64 catched up.
	(DNLEN): Redefine as 16.  Explain why.

2014-03-06  Corinna Vinschen  <corinna@@vinschen.de>

	* setlsapwd.cc (setlsapwd): Use RtlSecureZeroMemory to delete password
	from memory.

2014-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): Document atexit.

2014-10-28  Corinna Vinschen  <corinna@@vinschen.de>

	* cygwinenv.xml: Change default setting of dosfilewarning.
	* new-features.xml (ov-new1.7.33): Document aforementioned change.

2014-10-27  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): Document empty $PATH handling.

2014-10-22  Corinna Vinschen  <corinna@@vinschen.de>

	* posix.xml (std-gnu): Add ffsl, ffsll, quotactl.
	(std-notes): Add restrictions of quotactl.

2014-10-22  Yaakov Selkowitz  <yselkowi@@redhat.com>

	* new-features.xml (ov-new1.7.33): Document stime.
	* posix.xml (std-deprec): Add stime.

2014-10-22  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): s/Linux/glibc.

2014-10-22  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): Update to current state.

2014-08-13  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): Add new section.
	(ov-new1.7.32): Reflect intermediate 1.7.32 release.

2014-10-21  Corinna Vinschen  <corinna@@vinschen.de>

	* cygcheck.cc (CYGLSA64_DLL): Remove unused macro.
	(dump_sysinfo): If COMSPEC isn't set in the MSVCRT environment, set it.
	Explain why.
@
text
@d4 1
a4 1
   2006, 2007, 2008, 2013, 2014 Red Hat, Inc.
d25 35
a59 6
  __try
    {
      char *snp = strstr  (cygwin_version.dll_build_date, "SNP");

      memset (name, 0, sizeof (*name));
      __small_sprintf (name->sysname, "CYGWIN_%s", wincap.osname ());
d61 2
a62 66
      /* Add a hint to the sysname, that we're running under WOW64.  This might
	 give an early clue if somebody encounters problems. */
      if (wincap.is_wow64 ())
	strncat (name->sysname, "-WOW64",
		 sizeof name->sysname - strlen (name->sysname) - 1);

      GetSystemInfo (&sysinfo);

      /* Computer name */
      cygwin_gethostname (name->nodename, sizeof (name->nodename) - 1);

      /* Cygwin dll release */
      __small_sprintf (name->release, "%d.%d.%d%s(%d.%d/%d/%d)",
		       cygwin_version.dll_major / 1000,
		       cygwin_version.dll_major % 1000,
		       cygwin_version.dll_minor,
#if 0
		       snp ? "s" : "",
#else
		       /* Add a hint to allow to recognize updates */
		       "-2",
#endif
		       cygwin_version.api_major,
		       cygwin_version.api_minor,
		       cygwin_version.shared_data,
		       cygwin_version.mount_registry);

      /* Cygwin "version" aka build date */
      strcpy (name->version, cygwin_version.dll_build_date);
      if (snp)
	name->version[snp - cygwin_version.dll_build_date] = '\0';

      /* CPU type */
      switch (sysinfo.wProcessorArchitecture)
	{
	  case PROCESSOR_ARCHITECTURE_INTEL:
	    unsigned int ptype;
	    if (sysinfo.wProcessorLevel < 3) /* Shouldn't happen. */
	      ptype = 3;
	    else if (sysinfo.wProcessorLevel > 9) /* P4 */
	      ptype = 6;
	    else
	      ptype = sysinfo.wProcessorLevel;
	    __small_sprintf (name->machine, "i%d86", ptype);
	    break;
	  case PROCESSOR_ARCHITECTURE_IA64:
	    strcpy (name->machine, "ia64");
	    break;
	  case PROCESSOR_ARCHITECTURE_AMD64:
	    strcpy (name->machine, "x86_64");
	    break;
	  case PROCESSOR_ARCHITECTURE_IA32_ON_WIN64:
	    strcpy (name->machine, "ia32-win64");
	    break;
	  case PROCESSOR_ARCHITECTURE_ALPHA:
	    strcpy (name->machine, "alpha");
	    break;
	  case PROCESSOR_ARCHITECTURE_MIPS:
	    strcpy (name->machine, "mips");
	    break;
	  default:
	    strcpy (name->machine, "unknown");
	    break;
	}
    }
  __except (EFAULT)
d64 28
a91 1
      return -1;
d93 1
a93 1
  __endtry
@


1.32.4.2
log
@Fix copy/paste remnant
@
text
@d48 1
d50 4
@


1.32.2.1
log
@* environ.cc (known): Add preload keyword.
* external.cc: Include new callout.h header.
(cygwin_internal): Initial implementation of CW_CALLOUT and CW_CYGHEAP_MALLOC.
(dll_preload): Handle CYGWIN=preload:foo.dll.
(dummy_callout): Default NULL callout function.
* globals.cc: Include new callout.h header.
(callout): Declare/define.
* uname.cc (uname): Initial implementation of callout handling.
* winsup.h (dll_preload): Declare.
* include/cygwin/version.h: Bump API minor number to 269.
* include/sys/cygwin.h: Define CW_CALLOUT, CW_CYGHEAP_MALLOC.
@
text
@a17 1
#include <cygwin/callout.h>
a93 7
  switch (callout (CO_UNAME, name))
    {
    case CO_R_KEEP_GOING:
      break;
    default:
      return -1;
    }
@


1.31
log
@Throughout, update copyrights to reflect dates which correspond to main-branch
checkins.  Regularize copyright format.
@
text
@d4 1
a4 1
   2006, 2007, 2008 Red Hat, Inc.
d34 2
a35 11
#if 0
  /* Recognition of the real 64 bit CPU inside of a WOW64 system, irritates
     build systems which think the native system is a 64 bit system.  Since
     we're actually running in a 32 bit environment, it looks more correct
     just to use the CPU info given by WOW64. */
  if (wincap.is_wow64 ())
    GetNativeSystemInfo (&sysinfo);
  else
#else
  /* But it seems ok to add a hint to the sysname, that we're running under
     WOW64.  This might give an early clue if somebody encounters problems. */
d39 2
a40 2
#endif
    GetSystemInfo (&sysinfo);
@


1.30
log
@Remove unneeded header files from source files throughout.
@
text
@d3 2
a4 2
   Copyright 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
   2005, 2006, 2007 Red Hat, Inc.
@


1.30.10.1
log
@Pull in changes from HEAD
@
text
@d3 2
a4 2
   Copyright 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
   2006, 2007, 2008 Red Hat, Inc.
@


1.29
log
@	* exceptions.cc (dummy_ctrl_c_handler): Remove.
	(init_console_handler): Drop has_null_console_handler_routine checks.
	* fhandler_raw.cc (fhandler_dev_raw::open): Drop has_raw_devices check.
	* fhandler_serial.cc (fhandler_serial::open): Drop
	.supports_reading_modem_output_lines check.
	* miscfuncs.cc (low_priority_sleep): Drop has_switch_to_thread check.
	* shared.cc (open_shared): Drop needs_memory_protection checks.
	* spawn.cc (spawn_guts): Drop start_proc_suspended check.
	* uname.cc (uname): Drop has_valid_processorlevel check.
	* wincap.cc: Remove has_raw_devices, has_valid_processorlevel,
	supports_reading_modem_output_lines, needs_memory_protection,
	has_switch_to_thread, start_proc_suspended and
	has_null_console_handler_routine throughout.
	* wincap.h: Ditto.
@
text
@a14 1
#include <stdio.h>
@


1.28
log
@	* uname.cc (uname): Concatenate a "-WOW64" to utsname's sysname
	member to see when running under WOW64.
@
text
@d3 2
a4 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Red Hat, Inc.
d76 4
a79 9
	if (wincap.has_valid_processorlevel ())
	  {
	    if (sysinfo.wProcessorLevel < 3) /* Shouldn't happen. */
	      ptype = 3;
	    else if (sysinfo.wProcessorLevel > 9) /* P4 */
	      ptype = 6;
	    else
	      ptype = sysinfo.wProcessorLevel;
	  }
d81 1
a81 7
	  {
	    if (sysinfo.dwProcessorType == PROCESSOR_INTEL_386 ||
		sysinfo.dwProcessorType == PROCESSOR_INTEL_486)
	      ptype = sysinfo.dwProcessorType / 100;
	    else
	      ptype = PROCESSOR_INTEL_PENTIUM / 100;
	  }
@


1.27
log
@	* uname.cc (uname): Disable use of GetNativeSystemInfo.
@
text
@d39 1
a39 2
  BOOL is_64bit_machine = FALSE;
  if (IsWow64Process (hMainProc, &is_64bit_machine) && is_64bit_machine)
d42 6
@


1.26
log
@Replace valid memory checks with new myfault class "exception handling", almost
everywhere.  Leave some thread.cc stuff alone for now.
* cygtls.h: Kludge some definitions to avoid including a problematic windows
header.
(_cygtls::_myfault): New entry.
(_cygtls::_myfault_errno): Ditto.
(_cygtls::fault_guarded): New function.
(_cygtls::setup_fault): Ditto.
(_cygtls::return_from_fault): Ditto.
(_cygtls::clear_fault): Ditto.
(myfault): New class.
* exceptions.cc (handle_exceptions): Handle case of guarded fault in system
routine.
* gendef: Add another entry point for setjmp that the compiler doesn't know
about and won't complain about.
* gentls_offsets: Just include windows.h rather than kludging a HANDLE def.
* miscfuncs.cc (check_null_str): Delete.
(check_null_empty_str): Ditto.
(check_null_empty_str_errno): Ditto.
(check_null_str_errno): Ditto.
(__check_null_invalid_struct): Ditto.
(__check_null_invalid_struct_errno): Ditto.
(__check_invalid_read_ptr): Ditto.
(__check_invalid_read_ptr_errno): Ditto.
(dummytest): New function.
(check_iovec_for_read): Delete.
(chec_iovec): Rename from check_iovec_for_write.  Take a read/write parameter.
* tlsoffsets.h: Regenerate.
* winsup.h: Remove check_* declarations.
(check_iovec_for_read): Delete declaration.  Turn into a define instead.
(check_iovec_for_write): Ditto.
(check_iovec): New declaration.
* thread.h: Use ifdef guard name consistent with other header files.
@
text
@d34 5
d43 1
@


1.25
log
@	* uname.cc (uname): Change "amd64" to "x86_64" as on Linux.
@
text
@d17 1
d25 2
a26 1
  if (check_null_invalid_struct_errno (name))
@


1.24
log
@	* uname.cc (uname): Add missing break.
@
text
@d85 1
a85 1
	strcpy (name->machine, "amd64");
@


1.23
log
@* exceptions.cc: (ctrl_c_handler): Do nothing while a Cygwin subprocess is
starting.
* child_info.h (init_child_info): Remove pid argument from declaration.
* cygheap.h (init_cygheap::pid): New element.
* dcrt0.cc (dll_crt0_0): Eliminate handling of now-noexistent cygpid parameter
in child_info struct.  Set forkee to 'true' rather than cygpid since the pid
value was never used.
(dll_crt0_1): Ditto.
(_dll_crt0): Ditto.
* fork.cc (fork_child): Don't wait for sigthread.  This is handled in the fork
call now.
(fork_parent): Remove obsolete pid argument from init_child_info call.  Don't
do anything special with cygpid when DEBUGGING.
(fork): Delay all signals during fork.
(fork_init): Don't do anything special when DEBUGGING.
* pinfo.cc (set_myself): Remove pid parameter.  Use new pid field in cygheap.
(pinfo_init): Don't pass pid argument to set_myself.
* sigproc.cc (sig_send): Wait for dwProcessId to be non-zero as well as
sendsig.
(init_child_info): Eliminate handling of pid.
(wait_sig): Implement method to temporarily hold off sending signals.
* sigproc.h (__SIGHOLD): New enum.
(__SIGNOHOLD): Ditto.
* spawn.cc (spawn_guts): Remove obsolete pid argument from init_child_info
call.
@
text
@d89 1
@


1.22
log
@	* autoload.cc (GetNativeSystemInfo): Add.
	(IsWow64Process): Add.
	* init.cc (respawn_wow64_process): New function.
	(dll_entry): If process has been started from a 64 bit
	process, call respawn_wow64_process.
	* uname.cc (uname): On 64 bit systems, use GetNativeSystemInfo.
	Show actual CPU type.
@
text
@d82 1
a82 1
        strcpy (name->machine, "ia64");
d85 1
a85 1
        strcpy (name->machine, "amd64");
d88 1
a88 1
      	strcpy (name->machine, "ia32-win64");
@


1.21
log
@	* autoload.cc: Fix copyright date.
	* fhandler_dsp.cc: Ditto.
	* mmap.cc: Ditto.
	* net.cc: Ditto.
	* ntdll.h: Ditto.
	* signal.cc: Ditto.
	* syscalls.cc: Ditto.
	* uname.cc: Ditto.
	* wait.cc: Ditto.
@
text
@d32 5
a36 1
  GetSystemInfo (&sysinfo);
d81 8
@


1.20
log
@	* uname.cc (uname): Use cygwin_gethostname() to retrieve hostname.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
@


1.19
log
@* dtable.cc (handle_to_fn): Attempt to handle "raw" accesses to remote shares.
* path.cc (mount_info::conv_to_win32_path): Set flags to binary when mount
entry is not found.
(mount_info::set_flags_from_win32_path): Ditto.
@
text
@a21 1
  DWORD len;
d35 1
a35 2
  len = sizeof (name->nodename) - 1;
  GetComputerNameA (name->nodename, &len);
@


1.18
log
@* autoload.cc (LoadFuncEx): Define via new LoadFuncEx2 macro.
(LoadFuncEx2): Adapted from LoadFuncEx.  Provides control of return value for
nonexistent function.
(NtQueryObject): Declare.
(IsDebuggerPresent): Declare via LoadFuncEx2 and always return true if not
available.
* debug.h (being_debugged): Just rely on IsDebuggerPresent return value.
* dtable.cc (handle_to_fn): New function.
(dtable::init_std_file_from_handle): Attempt to derive std handle's name via
handle_to_fn.
(dtable::build_fhandler_from_name): Fill in what we can in path_conv structure
when given a handle and path doesn't exist.
* fhandler.cc (fhandler_base::open): Don't set the file pointer here.  Use
pc->exists () to determine if file exists rather than calling GetFileAttributes
again.
* fhandler.h (fhandler_base::exec_state_isknown): New method.
(fhandler_base::fstat_helper): Add extra arguments to declaration.
(fhandler_base::fstat_by_handle): Declare new method.
(fhandler_base::fstat_by_name): Declare new method.
* fhandler_disk_file (num_entries): Make __stdcall.
(fhandler_base::fstat_by_handle): Define new method.
(fhandler_base::fstat_by_name): Define new method.
(fhandler_base:fstat): Call fstat_by_{handle,name} as appropriate.
(fhandler_disk_file::fstat_helper): Accept extra arguments for filling out stat
structure.  Move handle or name specific stuff to new methods above.
(fhandler_disk_file::open): Use real_path->exists rather than calling
GetFileAttributes again.
* ntdll.h (FILE_NAME_INFORMATION): Define new structure.
(OBJECT_INFORMATION_CLASS): Partially define new enum.
(OBJECT_NAME_INFORMATION): Define new structure.
(NtQueryInformationFile): New declaration.
(NtQueryObject): New declaration.
* path.cc (path_conv::fillin): Define new method.
* path.h (path_conv::fillin): Declare new method.
(path_conv::drive_thpe): Rename from 'get_drive_type'.
(path_conv::volser): Declare new method.
(path_conv::volname): Declare new method.
(path_conv::root_dir): Declare new method.
* syscalls.cc (fstat64): Send real path_conv to fstat as second argument.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001 Red Hat, Inc.
@


1.17
log
@Eliminate excess whitespace.
@
text
@d72 1
a72 1
	        sysinfo.dwProcessorType == PROCESSOR_INTEL_486)
@


1.16
log
@        * uname.cc (uname):  Use `wProcessorLevel' unless OS sets it wrong.
        Use `dwProcessorType' then instead.
        * wincap.cc: Set flag has_valid_processorlevel appropriately.
        * wincap.h: Add flag has_valid_processorlevel.
@
text
@d27 1
a27 1
    
@


1.15
log
@* path.cc (symlink): Check arguments for validity.
(getcwd): Ditto.
* syscalls.cc (ftruncate): Ditto.
* times.cc (times): Ditto.
* uname.cc (uname): Ditto.
@
text
@d60 9
a68 4
	if (sysinfo.dwProcessorType < 3) /* Shouldn't happen. */
	  ptype = 3;
	else if (sysinfo.dwProcessorType > 9) /* P4 */
	  ptype = 6;
d70 7
a76 2
	  ptype = sysinfo.dwProcessorType;

@


1.15.2.1
log
@Merged changes from HEAD
@
text
@d27 1
a27 1

d60 4
a63 9
	if (wincap.has_valid_processorlevel ())
	  {
	    if (sysinfo.wProcessorLevel < 3) /* Shouldn't happen. */
	      ptype = 3;
	    else if (sysinfo.wProcessorLevel > 9) /* P4 */
	      ptype = 6;
	    else
	      ptype = sysinfo.wProcessorLevel;
	  }
d65 2
a66 7
	  {
	    if (sysinfo.dwProcessorType == PROCESSOR_INTEL_386 ||
	        sysinfo.dwProcessorType == PROCESSOR_INTEL_486)
	      ptype = sysinfo.dwProcessorType / 100;
	    else
	      ptype = PROCESSOR_INTEL_PENTIUM / 100;
	  }
@


1.15.2.2
log
@Merged changes from HEAD
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
d72 1
a72 1
		sysinfo.dwProcessorType == PROCESSOR_INTEL_486)
@


1.14
log
@        * Makefile.in: Build wincap.o.
        * wincap.cc: New file.
        * wincap.h: Ditto.
        * autoload.cc: Add dynamic load statement for `CreateHardLinkA'.
        * dcrt0.cc (os_being_run): Eliminated.
        (osname): Ditto.
        (iswinnt): Ditto.
        (set_os_type): Ditto.
        (dll_crt0_1): Call wincap.init() instead of set_os_type().
        (_dll_crt0): Ditto.
        * environ.cc (set_chunksize): New function.
        (parse_thing): `forkchunk' setting now invokes function `set_chunksize'.
        * fork.cc (chunksize): Eliminated. Moved to be member of wincap.
        * host_dependent.h: Removed.
        * syscalls.cc (_link): Try using `CreateHardLinkA' first, if available.
        * cygheap.cc, dcrt0.cc, delqueue.cc, dir.cc,
        environ.cc, fhandler.cc, fhandler.h, fhandler_console.cc,
        fhandler_mem.cc, fork.cc, mmap.cc, net.cc, pinfo.cc, pinfo.h,
        security.cc, syscalls.cc, sysconf.cc, syslog.cc, thread.cc,
        times.cc, tty.cc, uinfo.cc, uname.cc, winsup.h: Use new wincap
        capability check throughout.
        * winsup.h: Include wincap.h. Eliminate extern declarations of
        `os_being_run' and `iswinnt'. Eliminate `os_type" definition.
        * include/cygwin/version.h: Bump version to 1.3.4.
@
text
@d24 4
@


1.13
log
@Update copyrights.
@
text
@a23 1
  extern char osname[];
d27 1
a27 1
  __small_sprintf (name->sysname, "CYGWIN_%s", osname);
@


1.12
log
@* cygheap.h (init_cygheap): Move heap pointers here.
* include/sys/cygwin.h (perprocess): Remove heap pointers.
* dcrt0.cc (__cygwin_user_data): Reflect obsolete perprocess stuff.
(_dll_crt0): Don't initialize heap pointers.
(cygwin_dll_init): Ditto.
(release_upto): Use heap pointers from cygheap.
* heap.h: Ditto.
* fork.cc (fork_parent): Ditto.  Don't set heap pointers in ch.
(fork_child): Remove obsolete sigproc_fixup_after_fork.
* shared.cc (memory_init): Reorganize so that cygheap initialization is called
prior to regular heap since regular heap uses cygheap now.
* sigproc.cc (proc_subproc): Eliminate zombies allocation.
(sigproc_init): Move zombies alloation here.  Don't free up array on fork, just
reuse it.
(sigproc_fixup_after_fork): Eliminate.
* sigproc.h: Ditto.
* include/cygwin/version.h: Reflect change to perprocess structure.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000 Cygnus Solutions.
@


1.11
log
@        * uname.cc (uname): Eliminate os specific retrieving of x86
	processor type.
@
text
@d64 1
a64 1
	__small_sprintf (name->machine, "i%d86", ptype);   
@


1.10
log
@forced commit
@
text
@d56 9
a64 25
	/* But which of the x86 chips are we? */
	/* Default to i386 if the specific chip cannot be determined */
	switch (os_being_run)
	  {
	    case win95:
	    case win98:
	    case winME:
	      /* dwProcessorType only valid in Windows 95 */
	      if ((sysinfo.dwProcessorType == PROCESSOR_INTEL_386) ||
		  (sysinfo.dwProcessorType == PROCESSOR_INTEL_486) ||
		  (sysinfo.dwProcessorType == PROCESSOR_INTEL_PENTIUM))
		__small_sprintf (name->machine, "i%d", sysinfo.dwProcessorType);
	      else
		strcpy (name->machine, "i386");
	      break;
	    case winNT:
	      /* wProcessorLevel only valid in Windows NT */
	      __small_sprintf (name->machine, "i%d86",
			       sysinfo.dwProcessorType > 6 ?
				6 : sysinfo.dwProcessorType);
	      break;
	    default:
	      strcpy (name->machine, "i386");
	      break;
	  }
@


1.9
log
@* uname.c (uname): Default n in in86 to 6 if Windows returns > 6.
@
text
@@


1.8
log
@        * winsup.h: Add `winME' to os_type symbols.
        * dcrt0.cc (set_os_type): Identify Windows ME systems.
        * (host_dependent_constants::init): Care for winME.
        * uname.cc (uname): Ditto.
@
text
@d73 3
a75 1
	      __small_sprintf (name->machine, "i%d86", sysinfo.wProcessorLevel);
@


1.7
log
@Break out more header info into separate files.  Use appropriate header files
throughout.
* shared.h: Remove.
* cygwin_version.h: New file.
* delqueue.h: New file.
* environ.h: New file.
* host_dependent.h: New file.
* perprocess.h: New file.
* registry.h: New file.
* security.h: New file.
@
text
@d62 1
@


1.6
log
@* winsup.h: take out protections of environ, errno, allow C use
* *.cc: put winsup.h before other headers (for __INSIDE_CYGWIN__);
use cur_environ() instead of just environ
* times.cc: remove import protections
* glob.c: add winsup.h
* localtime.c: ditto
* smallprint.c: ditto
* Makefile.in: don't __INSIDE_CYGWIN__ as it messes up profiling.
@
text
@d16 1
@


1.5
log
@* uname.cc (uname): Use a "s" to denote a snapshot to avoid confusion with the
number "5".
@
text
@d13 1
a15 1
#include "winsup.h"
@


1.4
log
@* mkvers.sh: Use snapshot date as build date since it is more interesting.
* uname.cc (uname): Detect if this is a snapshot build and add an "S" to the
version number.  Report the snapshot date as the release date.
@
text
@d40 1
a40 1
		   snp ? "S" : "",
@


1.3
log
@Fix sysname.
@
text
@d24 1
d36 1
a36 1
  __small_sprintf (name->release, "%d.%d.%d(%d.%d/%d/%d)",
d40 1
d48 2
@


1.2
log
@* dcrt0.cc (set_os_type): Record OS name string.
(getprogname): Eliminate obsolete function.
(dll_crt0_1): Move initial strace initialization output to set_myself.
* exceptions.cc (interruptible): Add debugging output.
(interrupt_setup): New function.
(interrupt_now): Use interrupt_setup to set up common interrupt handler stuff.
(interrupt_on_return): Ditto.
(call_handler): Move signal_arrived arm and clear threads to region where
signalled thread is suspended or suffer races.
* pinfo.cc (set_myself): Output interesting information when strace is first
initialized.  Initialize progname here.
* sigproc.cc (sig_dispatch_pending): Modify to ensure that flush signal are
sent synchronously.
* strace.cc (strace_vsprintf): Move code into strace program.
* uname.cc (uname): Use 'osname' global to construct cygwin name + Windows type
+ version.
@
text
@d25 1
a30 1
  memset (name, 0, sizeof (*name));
@


1.1
log
@Initial revision
@
text
@d18 1
a18 2
extern "C"
int
d23 1
a23 1
  OSVERSIONINFO os_version_info;
d25 1
a25 2
  os_version_info.dwOSVersionInfoSize = sizeof (OSVERSIONINFO);
  GetVersionEx (&os_version_info);
a32 22

  /* Operating system type */
  switch (os_being_run)
    {
      case winNT:
	strcpy (name->sysname, "CYGWIN_NT");
	break;
      case win98:
	strcpy (name->sysname, "CYGWIN_98");
	break;
      case win95:
	strcpy (name->sysname, "CYGWIN_95");
	break;
      default:
	strcpy (name->sysname, "CYGWIN_??");
	break;
    }

  __small_sprintf (strchr (name->sysname, '\0'), "-%d.%d",
		   os_version_info.dwMajorVersion,
		   os_version_info.dwMinorVersion);

@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
