head	1.15;
access;
symbols
	cygwin-1_7_35-release:1.15
	cygwin-1_7_34-release:1.14
	cygwin-1_7_33-release:1.14
	cygwin-1_7_32-release:1.14
	cygwin-1_7_31-release:1.14
	cygwin-1_7_30-release:1.14
	cygwin-1_7_29-release:1.14
	cygwin-1_7_29-release-branchpoint:1.14.0.2
	cygwin-pre-user-db:1.14
	cygwin-1_7_28-release:1.14
	cygwin-1_7_27-release:1.14
	cygwin-1_7_26-release:1.14
	cygwin-1_7_25-release:1.14
	cygwin-1_7_24-release:1.14
	cygwin-1_7_23-release:1.14
	cygwin-1_7_22-release:1.14
	cygwin-1_7_21-release:1.12
	cygwin-1_7_20-release:1.10
	cygwin-1_7_19-release:1.10
	cygwin-64bit-postmerge:1.10
	cygwin-64bit-premerge-branch:1.10.0.2
	cygwin-64bit-premerge:1.10
	cygwin-1_7_18-release:1.10
	post-ptmalloc3:1.9.6.1
	pre-ptmalloc3:1.9.6.1
	cygwin-1_7_17-release:1.9
	cygwin-64bit-branch:1.9.0.6
	cygwin-1_7_16-release:1.9
	cygwin-1_7_15-release:1.9
	cygwin-1_7_14_2-release:1.9
	cygwin-1_7_14-release:1.9
	cygwin-1_7_12-release:1.9
	cygwin-1_7_11-release:1.9
	cygwin-1_7_10-release:1.9
	signal-rewrite:1.9.0.4
	pre-notty:1.9
	cygwin-1_7_9-release:1.9
	cv-post-1_7_9:1.9.0.2
	cygwin-1_7_8-release:1.9
	cygwin-1_7_7-release:1.7
	cygwin-1_7_5-release:1.7
	cygwin-1_7_4-release:1.7
	cygwin-1_7_3-release:1.7
	cygwin-1_7_2-release:1.7
	fifo_doover3:1.7.0.2
	cygwin-1_7_1-release:1.7
	prefifo:1.6
	cv-branch-2:1.6.0.2
	pre-ripout-set_console_state_for_spawn:1.6
	EOL_registry_mounts:1.6
	preoverlapped:1.4
	drop_9x_support_start:1.3
	cr-0x5f1:1.3.0.4
	cv-branch:1.3.0.2
	pre-ptymaster-archetype:1.3;
locks; strict;
comment	@ * @;


1.15
date	2015.02.11.13.15.59;	author corinna;	state Exp;
branches;
next	1.14;

1.14
date	2013.07.19.22.44.02;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2013.07.19.17.28.34;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2013.06.19.17.21.25;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2013.06.19.16.00.43;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2013.01.21.04.34.52;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2011.01.20.11.09.21;	author corinna;	state Exp;
branches
	1.9.6.1;
next	1.8;

1.8
date	2011.01.19.09.15.17;	author corinna;	state Exp;
branches;
next	1.7;

1.7
date	2009.08.01.19.52.46;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2007.12.05.15.10.19;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2007.11.26.21.30.49;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2007.02.23.12.01.52;	author corinna;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.29.15.51.18;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.13.01.37.00;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.12.15.53.22;	author cgf;	state Exp;
branches;
next	;

1.9.6.1
date	2013.01.21.13.52.11;	author corinna;	state Exp;
branches;
next	;


desc
@@


1.15
log
@	* dlfcn.cc (check_path_access): Drop FE_NATIVE from find_exec call.
	(gfpod_helper): Drop equality sign from environment variable name
	in call to check_path_access.
	* exec.cc (execlp): Drop equality sign from environment variable name
	in call to find_exec.
	(execvp): Ditto.
	(execvpe): Ditto.
	* path.h (enum fe_types): Drop FE_NATIVE.
	(find_exec): Rename third paramter in declaration from search.  Drop
	equality sign from default value.
	* spawn.cc (perhaps_suffix): Add PC_POSIX to path_conv::check call.
	(find_exec): Simplify function.  Iterate over POSIX pathlist rather
	than Windows pathlist.  Drop handling of FE_NATIVE flag.  Always fill
	posix path of incoming path_conv buf, unless FE_NNF flag is given.
	(av::setup): Drop equality sign from environment variable name
	in call to find_exec.  Call unshift with normalized_path.
	* winf.cc (av::unshift): Drop conv parameter and code converting
	Windows to POSIX path.
	* winf.h (av::unshift): Accommodate prototype.
@
text
@/* winf.h

   Copyright 2006, 2007, 2009, 2011, 2013, 2015 Red Hat, Inc.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#pragma once
/* Hack for Cygwin processes.  If the Windows command line length gets slightly
   bigger than this value, the stack position is suddenly moved up by 64K for
   no apparent reason, which results in subsequent forks failing.  Since Cygwin
   processes get the full command line as argv array anyway, this only affects
   the maximum command line length of Cygwin applications which nonsensically
   have a WinMain instead of a main entry point or which use GetCommandLine. */
#define MAXCYGWINCMDLEN 30000

#define MAXWINCMDLEN 32767
#define LINE_BUF_CHUNK (MAX_PATH * 2)

class av
{
  char **argv;
  int calloced;
 public:
  int argc;
  bool win16_exe;
  av (): argv (NULL) {}
  av (int ac_in, const char * const *av_in) : calloced (0), argc (ac_in), win16_exe (false)
  {
    argv = (char **) cmalloc_abort (HEAP_1_ARGV, (argc + 5) * sizeof (char *));
    memcpy (argv, av_in, (argc + 1) * sizeof (char *));
  }
  void *operator new (size_t, void *p) __attribute__ ((nothrow)) {return p;}
  ~av ()
  {
    if (argv)
      {
	for (int i = 0; i < calloced; i++)
	  cfree (argv[i]);
	cfree (argv);
      }
  }
  int unshift (const char *what) __reg2;
  operator char **() {return argv;}
  void all_calloced () {calloced = argc;}
  void replace0_maybe (const char *arg0)
  {
    /* Note: Assumes that argv array has not yet been "unshifted" */
    if (!calloced)
      {
	argv[0] = cstrdup1 (arg0);
	calloced = 1;
      }
  }
  void dup_all ()
  {
    for (int i = calloced; i < argc; i++)
      argv[i] = cstrdup1 (argv[i]);
    calloced = argc;
  }
  int setup (const char *, path_conv&, const char *, int, const char *const *,
	     bool) __reg3;
};

class linebuf
{
  size_t ix;
  char *buf;
  size_t alloced;
 public:
  linebuf () : ix (0), buf (NULL), alloced (0) {}
  ~linebuf () {if (buf) free (buf);}
  void __reg3 add (const char *, int);
  void add (const char *what) {add (what, strlen (what));}
  void prepend (const char *, int);
  void __reg2 finish (bool);
  bool __reg3 fromargv(av&, const char *, bool);;
  operator size_t () const { return ix + 1; }
  operator const char * () const { return buf; }
  operator wchar_t * ()
  {
    size_t n = ix + 1;
    /* Note that this malloc'ed buffer is not freed by the destructor.
       It is up to the caller to do (or not do) that. */
    wchar_t *wbuf = (wchar_t *) malloc (sizeof (wchar_t) * n);
    return wcs (wbuf, n);
  }
  wchar_t *wcs (wchar_t *wbuf) { return wcs (wbuf, ix + 1); }
  wchar_t *wcs (wchar_t *wbuf, size_t n)
  {
    if (n == 1)
      wbuf[0] = L'\0';
    else
      sys_mbstowcs (wbuf, n, buf);
    return wbuf;
  }
};
@


1.14
log
@* spawn.cc (child_info_spawn::worker): Reinstate using temp buffer for wide
character command-line storage.  Use wcs method to convert command line.
* winf.h (lb_wcs): Delete.
(linebuf::wcs): Implement new single-argument method.
@
text
@d3 1
a3 1
   Copyright 2006, 2007, 2009, 2011, 2013 Red Hat, Inc.
d44 1
a44 1
  int unshift (const char *what, int conv = 0) __reg2;
@


1.13
log
@* common.din: Export GetCommandLine{A,W}.
* kernel32.cc: Add includes needed for GetCommandLine functions.
(ucmd): New function.
(cygwin_GetCommandLineW): Ditto.
(cygwin_GetCommandLineA): Ditto.
* spawn.cc (child_info_spawn::worker): Rename one_line -> cmd.  Use lb_wcs
macro to generate a wide character version of the line buffer.  Remove
duplicate printing of command line.  Don't access members of linebuf directly.
* winf.h: Use pragma once.
(linebuf): Make storage private.
(linebuf::operator size_t): New operator.  Return size of buf.
(linebuf::operator wchar_t): New operator.
(linebuf::wcs): New function.
(lb_wcs): New macro.
* include/cygwin/version.h: Bump API minor number to 268.
* strfuncs.cc: Clarify descriptive file comment.
@
text
@d89 1
a98 9

/* Return a temporary buffer representing the wide character version
   of a linebuf command line. */
#define lb_wcs(__x) \
({ \
 wchar_t __wbuf[(size_t) __x]; \
 __x.wcs (__wbuf, sizeof (__wbuf) / sizeof (__wbuf[0])); \
 __wbuf; \
})
@


1.12
log
@* winf.h (av::unshift): Make __reg2.
@
text
@d9 1
a9 3
#ifndef _WINF_H
#define _WINF_H

a67 1
 public:
d71 1
d79 18
a96 1
  operator char *() {return buf;}
d99 8
a106 1
#endif /*_WINF_H*/
@


1.11
log
@* spawn.cc (child_info_spawn::worker): Eliminate call to newargv.set() in favor
of conglomerated newargv.setup().  Let newargv.setup() decide when to call
dup_all().  Only set argc and argv for cygwin processes.
(av::setup): Rename from av::fixup.  Accept argc and argv parameters.  Fill out
argv and argc here.  Duplicate whole argv structure when this is a Cygwin
executable.
* winf.cc (linebuf::fromargv): Don't bother duplicating argv elements since
they will never be used.
* winf.h (av::set): Delete.
(av::setup): Rename from av::fixup.  Add two parameters.
(av::replace0_maybe): Assign calloced to 1 rather than 'true' for clarity.
(av::dup_maybe): Delete.
(av::dup_all): Set calloced to show that we have duplicated all of the
arguments in the list.
@
text
@d46 1
a46 1
  int unshift (const char *what, int conv = 0);
d64 2
a65 1
  int setup (const char *, path_conv&, const char *, int, const char *const *, bool) __reg3;
@


1.10
log
@Throughout, change __attribute__ ((regparm (N))) to just __regN.  Throughout,
(mainly in fhandler*) start fixing gcc 4.7.2 mismatch between regparm
definitions and declarations.
* gendef: Define some functions to take @@ declaration to accommodate _regN
defines which use __stdcall.
* gentls_offsets: Define __regN macros as empty.
* autoload.cc (wsock_init): Remove unneeded regparm attribute.
* winsup.h (__reg1): Define.
(__reg2): Define.
(__reg3): Define.
* advapi32.cc (DuplicateTokenEx): Coerce some initializers to avoid warnings
from gcc 4.7.2.
* exceptions.cc (status_info): Declare struct to use NTSTATUS.
(cygwin_exception::dump_exception): Coerce e->ExceptionCode to NTSTATUS.
* fhandler_clipboard.cc (cygnativeformat): Redefine as UINT to avoid gcc 4.7.2
warnings.
(fhandler_dev_clipboard::read): Ditto.
@
text
@a36 1
  void set (int ac_in, const char * const *av_in) {new (this) av (ac_in, av_in);}
d42 1
a42 2
	  if (argv[i])
	    cfree (argv[i]);
d55 1
a55 1
	calloced = true;
a57 5
  void dup_maybe (int i)
  {
    if (i >= calloced)
      argv[i] = cstrdup1 (argv[i]);
  }
d62 1
d64 1
a64 1
  int fixup (const char *, path_conv&, const char *, bool);
@


1.9
log
@	* exec.cc: Include pinfo.h.
	* winf.h: Move definitions of _P_PATH_TYPE_EXEC and _P_MODE from here...
	* pinfo.h: ...to here.
	(_P_PATH_TYPE_EXEC): Redefine to be bigger than _P_SYSTEM.
	(_P_MODE): Redefine so as not to mask out _P_SYSTEM.
	* spawn.cc (spawnlp): Add _P_PATH_TYPE_EXEC flag in call to spawnve.
	(spawnlpe): Ditto.
	(spawnvp): Ditto.
@
text
@d3 1
a3 1
   Copyright 2006, 2007, 2011 Red Hat, Inc.
d81 1
a81 1
  void add (const char *, int) __attribute__ ((regparm (3)));
d84 2
a85 2
  void finish (bool) __attribute__ ((regparm (2)));
  bool fromargv(av&, const char *, bool) __attribute__ ((regparm (3)));;
@


1.9.6.1
log
@Pull in changes from HEAD
@
text
@d3 1
a3 1
   Copyright 2006, 2007, 2009, 2011, 2013 Red Hat, Inc.
d81 1
a81 1
  void __reg3 add (const char *, int);
d84 2
a85 2
  void __reg2 finish (bool);
  bool __reg3 fromargv(av&, const char *, bool);;
@


1.8
log
@	* errno.cc (errmap): Add error codes for invalid binaries.
	* exec.cc (execvp): Call spawnve with _P_PATH_TYPE_EXEC flag
	from here.
	(execvpe): Ditto.
	* spawn.cc (spawn_guts): Filter _P_PATH_TYPE_EXEC from mode and
	store in p_type_exec.  Call av::fixup with addtional p_type_exec
	argument.
	(spawnve): Check for filtered mode.
	(spawnvpe): Add _P_PATH_TYPE_EXEC flag when calling spawnve.
	(av::fixup): Accept additional bool parameter p_type_exec.  Only check
	for script if p_type_exec is true.
	* winf.h (_P_PATH_TYPE_EXEC): Define.
	(_P_MODE): Define.
	(av::fixup): Declare with additional bool parameter.
@
text
@a22 10
/* Add this flag in calls to spawn_guts if the calling function is one of
   'p' type functions: execlp, execvp, spawnlp, spawnvp.  Per POSIX, only
   these p-type functions fall back to call /bin/sh if the file is not a
   binary.  The setting of _P_PATH_TYPE_EXEC is used as a bool value in
   av::fixup to decide if the file should be evaluated as a script, or if
   ENOEXEC should be returned. */
#define _P_PATH_TYPE_EXEC	0x100
/* Helper macro to mask actual mode and drop additional flags defined above. */
#define _P_MODE(x)		((x) & 0xff)

@


1.7
log
@* cygheap_malloc.h: New file.
* cygheap.h: Remove stuff now included in cygheap_malloc.h and include that
file.  Make cygheap_init a standard c++ function.  Remove unneeded child_info
declaration.
* path.h: Include cygheap_malloc.h.  Remove extra cstrdup declaration.
(path_conv): Reorganize to group variables together.
(path_conv::path): Make const char *.
(path_conv::known_suffix): Ditto.
(path_conv::normalized_path): Ditto.
(path_conv::path_conv): Reorganize initializers to reflect new element
ordering.
(path_conv::get_win32): Change return value to const char *.
(path_conv::set_path): Move back here from spawn.cc.
(parh_conv::modifiable_path): New function.
* path.cc (path_conv::add_ext_from_sym): Accommodate const'ness of
known_suffixes.
(path_conv::set_normalized_path): Ditto for normalized_path.
(path_conv::check): Use modifiable_path whereever we need to modify the path
element.  Use set_path to set the path.
(path_conv::~path_conv): Accommodate new const'ness.
* spawn.cc (perhaps_suffix): Declare ext as const since that's what is being
returned.
(path_conv::set_path): Move back to path.h.
* winf.f (linebuf): Perform minor cleanup.
(linebuf::fromargv): Change second parameter to const.
* winf.cc (linebuf::fromargv): Ditto.
@
text
@d3 1
a3 1
   Copyright 2006, 2007 Red Hat, Inc.
d23 10
d80 1
a80 1
  int fixup (const char *, path_conv&, const char *);
@


1.6
log
@	* fhandler_registry.cc: Use NAME_MAX + 1 instead of CYG_MAX_PATH
	throughout for subkey name buffer size.
	* fhandler_socket.cc (search_wsa_event_slot): Use MAX_PATH instead of
	CYG_MAX_PATH for mutext name buffer size.
	(fhandler_socket::init_events): Ditto.
	* fhandler_virtual.cc (fhandler_virtual::opendir): Check path length
	against PATH_MAX instead of against CYG_MAX_PATH.
	* registry.cc (get_registry_hive_path): Use PATH_MAX instead of
	CYG_MAX_PATH for registry value path buffer size.
	* shared.cc (open_shared): Use MAX_PATH instead of CYG_MAX_PATH
	for shared memory name buffer size.
	* thread.cc (semaphore::semaphore): Use MAX_PATH instead of CYG_MAX_PATH
	for semaphore name buffer size.
	* uinfo.cc (cygheap_user::env_userprofile): Use PATH_MAX instead of
	CYG_MAX_PATH for temporary path name buffer size.
	* winf.h (LINE_BUF_CHUNK): Define as MAX_PATH * 2.
	* include/sys/dirent.h: Include sys/limits.h.  Define name buffer sizes
	using NAME_MAX.
@
text
@d81 1
a81 1
  void add (const char *what, int len) __attribute__ ((regparm (3)));
d83 1
a83 1
  void prepend (const char *what, int len);
d85 1
a85 1
  bool fromargv(av&, char *, bool) __attribute__ ((regparm (3)));;
@


1.5
log
@Change many cygheap allocation routines to their *_abort analogs.
* cygheap.cc (cmalloc_abort): New function.
(crealloc_abort): Ditto.
(ccalloc_abort): Ditto.
@
text
@d21 1
a21 1
#define LINE_BUF_CHUNK (CYG_MAX_PATH * 2)
@


1.4
log
@	* fhandler_console.cc (fhandler_console::need_invisible): Drop
	pty_needs_alloc_console check.
	* spawn.cc (spawn_guts): Ditto.
	(av::fixup): Remove setting iscui.
	* syscalls.cc (rename): Drop has_move_file_ex checks.  Remove 9x
	specific code.
	* wincap.cc: Remove has_move_file_ex and pty_needs_alloc_console
	throughout.
	* wincap.h: Ditto.
@
text
@d33 1
a33 1
    argv = (char **) cmalloc (HEAP_1_ARGV, (argc + 5) * sizeof (char *));
@


1.3
log
@* winf.h (MAXCYGWINCMDLEN): Set down size to 30000 or suffer fork errors.
@
text
@d3 1
a3 1
   Copyright 2003, 2004, 2005 Red Hat, Inc.
d30 2
a31 3
  bool iscui;
  av (): argv (NULL), iscui (false) {}
  av (int ac_in, const char * const *av_in) : calloced (0), argc (ac_in), win16_exe (false), iscui (false)
@


1.2
log
@* spawn.cc (spawn_guts): Revert patch which treated derived cygwin programs
differently from those which are mounted with -X.  Pass extra argument to
linebuf::fromargv.
* winf.h (MAXCYGWINCMDLEN): New define.
(linebuf::finish): Add a new argument denoting when command line overflow is
ok.
(linebuf::fromargv): Ditto.
* winf.cc (linebuf::finish): Implement above change.
(linebuf::fromargv): Ditto.
@
text
@d16 3
a18 3
   the maximum command line length of Cygwin applications which non-sensically
   have a WinMain instead of a main entry point. */
#define MAXCYGWINCMDLEN 31767
@


1.1
log
@* Makefile.in (DLL_OFILES): Add winf.o.
* spawn.cc: Move command line handling stuff into winf.cc.
* winf.h: New file.
* winf.cc: New file.
@
text
@d12 8
d85 2
a86 2
  void finish () __attribute__ ((regparm (1)));
  bool fromargv(av&, char *);
@

