head	1.466;
access;
symbols
	cygwin-1_7_35-release:1.466
	cygwin-1_7_34-release:1.466
	cygwin-1_7_33-release:1.452.2.5
	cygwin-1_7_32-release:1.452.2.4
	cygwin-1_7_31-release:1.452.2.3
	cygwin-1_7_30-release:1.452.2.2
	cygwin-1_7_29-release:1.452.2.2
	cygwin-1_7_29-release-branchpoint:1.452.0.2
	cygwin-pre-user-db:1.452
	cygwin-1_7_28-release:1.452
	cygwin-1_7_27-release:1.449
	cygwin-1_7_26-release:1.449
	cygwin-1_7_25-release:1.449
	cygwin-1_7_24-release:1.449
	cygwin-1_7_23-release:1.449
	cygwin-1_7_22-release:1.449
	cygwin-1_7_21-release:1.448
	cygwin-1_7_20-release:1.446
	cygwin-1_7_19-release:1.446
	cygwin-64bit-postmerge:1.445
	cygwin-64bit-premerge-branch:1.444.0.2
	cygwin-64bit-premerge:1.444
	cygwin-1_7_18-release:1.444
	post-ptmalloc3:1.434.2.15
	pre-ptmalloc3:1.434.2.15
	cygwin-1_7_17-release:1.434
	cygwin-64bit-branch:1.434.0.2
	cygwin-1_7_16-release:1.431
	cygwin-1_7_15-release:1.427
	cygwin-1_7_14_2-release:1.426
	cygwin-1_7_14-release:1.426
	cygwin-1_7_12-release:1.426
	cygwin-1_7_11-release:1.423
	cygwin-1_7_10-release:1.423
	signal-rewrite:1.406.0.2
	pre-notty:1.400
	cygwin-1_7_9-release:1.393
	cv-post-1_7_9:1.392.0.2
	cygwin-1_7_8-release:1.392
	cygwin-1_7_7-release:1.382
	cygwin-1_7_5-release:1.378
	cygwin-1_7_4-release:1.378
	cygwin-1_7_3-release:1.378
	cygwin-1_7_2-release:1.377
	fifo_doover3:1.369.0.2
	cygwin-1_7_1-release:1.365
	prefifo:1.359
	cv-branch-2:1.358.0.2
	pre-ripout-set_console_state_for_spawn:1.339
	EOL_registry_mounts:1.336
	preoverlapped:1.320
	drop_9x_support_start:1.316
	cr-0x5f1:1.311.0.4
	cv-branch:1.311.0.2
	pre-ptymaster-archetype:1.308
	cr-0x3b58:1.284.0.4
	cr-0x5ef:1.284.0.2
	after-mmap-privanon-noreserve:1.273
	after-mmap-revamp:1.273
	before-mmap-revamp:1.272
	cgf-more-exit-sync:1.269
	post_wait_sig_exit:1.265
	pre_wait_sig_exit:1.261
	reparent-point:1.223
	noreparent:1.223.0.2
	cr-0x5e6:1.218.0.2
	cr-0x9e:1.203.0.4
	cr-0x9d:1.203.0.2
	cgf-deleteme:1.202.0.2
	pre-sigrewrite:1.191
	corinna-01:1.189
	cr-0x9c:1.180.2.1.0.2
	cr-0x9b:1.180.0.2
	cr-0x99:1.177
	Z-emcb-cygwin_daemon:1.177.0.2
	w32api-2_2:1.170
	mingw-runtime-2_4:1.170
	pre-cgf-merge:1.183
	cgf-dev-branch:1.168.0.2
	predaemon:1.126
	cygwin_daemon_merge_HEAD:1.126
	pregp02r1:1.125.0.2
	cygnus_cvs_20020108_pre:1.121
	Z-cygwin_daemon_merge-new_HEAD:1.150
	Z-cygwin_daemon_merge_HEAD:1.150
	cygwin_daemon:1.112.0.2;
locks; strict;
comment	@// @;
expand	@o@;


1.466
date	2014.11.07.08.33.22;	author corinna;	state Exp;
branches;
next	1.465;

1.465
date	2014.11.06.15.32.20;	author corinna;	state Exp;
branches;
next	1.464;

1.464
date	2014.11.05.09.48.00;	author corinna;	state Exp;
branches;
next	1.463;

1.463
date	2014.10.29.09.56.18;	author corinna;	state Exp;
branches;
next	1.462;

1.462
date	2014.10.27.21.19.40;	author corinna;	state Exp;
branches;
next	1.461;

1.461
date	2014.10.17.14.36.59;	author corinna;	state Exp;
branches;
next	1.460;

1.460
date	2014.10.10.15.29.18;	author corinna;	state Exp;
branches;
next	1.459;

1.459
date	2014.08.22.09.21.30;	author corinna;	state Exp;
branches;
next	1.458;

1.458
date	2014.08.19.08.41.40;	author corinna;	state Exp;
branches;
next	1.457;

1.457
date	2014.08.07.16.25.06;	author yselkowitz;	state Exp;
branches;
next	1.456;

1.456
date	2014.06.23.10.18.26;	author corinna;	state Exp;
branches;
next	1.455;

1.455
date	2014.03.28.22.31.53;	author corinna;	state Exp;
branches;
next	1.454;

1.454
date	2014.02.16.15.42.40;	author corinna;	state Exp;
branches;
next	1.453;

1.453
date	2014.02.10.10.45.50;	author corinna;	state Exp;
branches;
next	1.452;

1.452
date	2013.12.18.17.44.20;	author cgf;	state Exp;
branches
	1.452.2.1;
next	1.451;

1.451
date	2013.12.18.04.39.36;	author cgf;	state Exp;
branches;
next	1.450;

1.450
date	2013.12.18.04.28.46;	author cgf;	state Exp;
branches;
next	1.449;

1.449
date	2013.07.17.17.46.10;	author cgf;	state Exp;
branches;
next	1.448;

1.448
date	2013.06.27.17.00.12;	author corinna;	state Exp;
branches;
next	1.447;

1.447
date	2013.06.19.05.06.35;	author cgf;	state Exp;
branches;
next	1.446;

1.446
date	2013.05.23.20.10.35;	author corinna;	state Exp;
branches;
next	1.445;

1.445
date	2013.04.23.09.44.31;	author corinna;	state Exp;
branches;
next	1.444;

1.444
date	2013.04.07.23.53.00;	author cgf;	state Exp;
branches;
next	1.443;

1.443
date	2013.03.31.12.35.44;	author cgf;	state Exp;
branches;
next	1.442;

1.442
date	2013.01.21.17.17.44;	author cgf;	state Exp;
branches;
next	1.441;

1.441
date	2013.01.21.16.56.09;	author cgf;	state Exp;
branches;
next	1.440;

1.440
date	2013.01.09.14.23.44;	author corinna;	state Exp;
branches;
next	1.439;

1.439
date	2012.12.28.18.06.17;	author cgf;	state Exp;
branches;
next	1.438;

1.438
date	2012.12.20.13.39.34;	author corinna;	state Exp;
branches;
next	1.437;

1.437
date	2012.11.30.07.14.36;	author cgf;	state Exp;
branches;
next	1.436;

1.436
date	2012.11.30.07.11.19;	author cgf;	state Exp;
branches;
next	1.435;

1.435
date	2012.10.27.12.09.38;	author ktietz;	state Exp;
branches;
next	1.434;

1.434
date	2012.08.09.19.58.52;	author cgf;	state Exp;
branches
	1.434.2.1;
next	1.433;

1.433
date	2012.07.29.19.18.04;	author cgf;	state Exp;
branches;
next	1.432;

1.432
date	2012.07.21.22.58.19;	author cgf;	state Exp;
branches;
next	1.431;

1.431
date	2012.07.04.17.30.55;	author cgf;	state Exp;
branches;
next	1.430;

1.430
date	2012.06.19.00.38.01;	author cgf;	state Exp;
branches;
next	1.429;

1.429
date	2012.06.19.00.31.14;	author cgf;	state Exp;
branches;
next	1.428;

1.428
date	2012.05.14.22.42.56;	author cgf;	state Exp;
branches;
next	1.427;

1.427
date	2012.05.07.15.05.56;	author cgf;	state Exp;
branches;
next	1.426;

1.426
date	2012.03.20.23.13.40;	author cgf;	state Exp;
branches;
next	1.425;

1.425
date	2012.03.20.15.07.29;	author cgf;	state Exp;
branches;
next	1.424;

1.424
date	2012.03.05.12.09.22;	author corinna;	state Exp;
branches;
next	1.423;

1.423
date	2012.01.27.09.28.38;	author corinna;	state Exp;
branches;
next	1.422;

1.422
date	2011.12.21.17.19.48;	author corinna;	state Exp;
branches;
next	1.421;

1.421
date	2011.12.19.12.50.35;	author corinna;	state Exp;
branches;
next	1.420;

1.420
date	2011.12.17.23.39.46;	author cgf;	state Exp;
branches;
next	1.419;

1.419
date	2011.12.17.10.24.09;	author corinna;	state Exp;
branches;
next	1.418;

1.418
date	2011.12.16.18.09.42;	author corinna;	state Exp;
branches;
next	1.417;

1.417
date	2011.12.16.11.58.03;	author corinna;	state Exp;
branches;
next	1.416;

1.416
date	2011.12.13.20.06.30;	author cgf;	state Exp;
branches;
next	1.415;

1.415
date	2011.12.12.10.16.53;	author corinna;	state Exp;
branches;
next	1.414;

1.414
date	2011.12.10.18.10.22;	author cgf;	state Exp;
branches;
next	1.413;

1.413
date	2011.12.10.17.40.19;	author cgf;	state Exp;
branches;
next	1.412;

1.412
date	2011.11.24.21.36.52;	author cgf;	state Exp;
branches;
next	1.411;

1.411
date	2011.11.24.02.17.54;	author cgf;	state Exp;
branches;
next	1.410;

1.410
date	2011.11.16.04.09.31;	author cgf;	state Exp;
branches;
next	1.409;

1.409
date	2011.11.14.01.29.46;	author cgf;	state Exp;
branches;
next	1.408;

1.408
date	2011.10.26.19.42.39;	author cgf;	state Exp;
branches;
next	1.407;

1.407
date	2011.10.17.18.25.04;	author cgf;	state Exp;
branches;
next	1.406;

1.406
date	2011.08.18.15.59.16;	author cgf;	state Exp;
branches;
next	1.405;

1.405
date	2011.07.30.20.50.23;	author cgf;	state Exp;
branches;
next	1.404;

1.404
date	2011.07.04.15.25.36;	author corinna;	state Exp;
branches;
next	1.403;

1.403
date	2011.06.17.08.30.26;	author corinna;	state Exp;
branches;
next	1.402;

1.402
date	2011.06.14.21.48.43;	author cgf;	state Exp;
branches;
next	1.401;

1.401
date	2011.06.09.21.20.26;	author cgf;	state Exp;
branches;
next	1.400;

1.400
date	2011.06.06.05.02.08;	author cgf;	state Exp;
branches;
next	1.399;

1.399
date	2011.05.28.18.17.08;	author cgf;	state Exp;
branches;
next	1.398;

1.398
date	2011.05.20.07.23.10;	author corinna;	state Exp;
branches;
next	1.397;

1.397
date	2011.05.16.09.55.17;	author corinna;	state Exp;
branches;
next	1.396;

1.396
date	2011.05.05.07.31.13;	author corinna;	state Exp;
branches;
next	1.395;

1.395
date	2011.04.28.09.30.35;	author corinna;	state Exp;
branches;
next	1.394;

1.394
date	2011.04.02.11.30.27;	author corinna;	state Exp;
branches;
next	1.393;

1.393
date	2011.03.17.08.40.25;	author corinna;	state Exp;
branches;
next	1.392;

1.392
date	2011.02.22.09.17.57;	author corinna;	state Exp;
branches
	1.392.2.1;
next	1.391;

1.391
date	2011.02.18.17.43.22;	author cgf;	state Exp;
branches;
next	1.390;

1.390
date	2010.12.26.21.11.37;	author cgf;	state Exp;
branches;
next	1.389;

1.389
date	2010.10.24.18.50.57;	author cgf;	state Exp;
branches;
next	1.388;

1.388
date	2010.10.02.19.08.20;	author cgf;	state Exp;
branches;
next	1.387;

1.387
date	2010.09.26.14.57.11;	author cgf;	state Exp;
branches;
next	1.386;

1.386
date	2010.09.19.20.18.36;	author cgf;	state Exp;
branches;
next	1.385;

1.385
date	2010.09.12.15.49.30;	author cgf;	state Exp;
branches;
next	1.384;

1.384
date	2010.09.01.21.06.36;	author cgf;	state Exp;
branches;
next	1.383;

1.383
date	2010.09.01.18.24.10;	author cgf;	state Exp;
branches;
next	1.382;

1.382
date	2010.08.30.23.23.28;	author cgf;	state Exp;
branches;
next	1.381;

1.381
date	2010.08.28.08.51.21;	author corinna;	state Exp;
branches;
next	1.380;

1.380
date	2010.06.21.17.09.33;	author cgf;	state Exp;
branches;
next	1.379;

1.379
date	2010.05.07.21.25.18;	author cgf;	state Exp;
branches;
next	1.378;

1.378
date	2010.03.28.17.27.52;	author cgf;	state Exp;
branches;
next	1.377;

1.377
date	2010.03.15.21.29.15;	author cgf;	state Exp;
branches;
next	1.376;

1.376
date	2010.03.12.23.13.47;	author cgf;	state Exp;
branches;
next	1.375;

1.375
date	2010.03.03.15.05.18;	author corinna;	state Exp;
branches;
next	1.374;

1.374
date	2010.02.28.15.54.25;	author cgf;	state Exp;
branches;
next	1.373;

1.373
date	2010.02.26.21.36.31;	author cgf;	state Exp;
branches;
next	1.372;

1.372
date	2010.02.10.07.25.25;	author cgf;	state Exp;
branches;
next	1.371;

1.371
date	2010.02.02.02.00.01;	author cgf;	state Exp;
branches;
next	1.370;

1.370
date	2010.01.14.18.56.24;	author corinna;	state Exp;
branches;
next	1.369;

1.369
date	2010.01.01.19.28.15;	author cgf;	state Exp;
branches;
next	1.368;

1.368
date	2010.01.01.19.15.11;	author cgf;	state Exp;
branches;
next	1.367;

1.367
date	2009.12.21.09.38.25;	author corinna;	state Exp;
branches;
next	1.366;

1.366
date	2009.12.18.20.32.03;	author corinna;	state Exp;
branches;
next	1.365;

1.365
date	2009.10.02.14.58.10;	author corinna;	state Exp;
branches;
next	1.364;

1.364
date	2009.10.02.06.04.57;	author cgf;	state Exp;
branches;
next	1.363;

1.363
date	2009.09.28.10.43.49;	author corinna;	state Exp;
branches;
next	1.362;

1.362
date	2009.09.21.02.32.06;	author cgf;	state Exp;
branches;
next	1.361;

1.361
date	2009.08.04.04.20.36;	author cgf;	state Exp;
branches;
next	1.360;

1.360
date	2009.07.30.15.48.51;	author corinna;	state Exp;
branches;
next	1.359;

1.359
date	2009.07.03.18.05.50;	author cgf;	state Exp;
branches;
next	1.358;

1.358
date	2009.06.08.03.53.40;	author cgf;	state Exp;
branches;
next	1.357;

1.357
date	2009.05.14.19.49.37;	author corinna;	state Exp;
branches;
next	1.356;

1.356
date	2009.05.13.15.00.06;	author corinna;	state Exp;
branches;
next	1.355;

1.355
date	2009.04.18.11.08.37;	author corinna;	state Exp;
branches;
next	1.354;

1.354
date	2009.04.17.14.51.44;	author corinna;	state Exp;
branches;
next	1.353;

1.353
date	2009.03.24.12.18.34;	author corinna;	state Exp;
branches;
next	1.352;

1.352
date	2009.03.04.11.45.58;	author corinna;	state Exp;
branches;
next	1.351;

1.351
date	2009.01.03.05.12.20;	author cgf;	state Exp;
branches;
next	1.350;

1.350
date	2008.12.20.17.32.31;	author cgf;	state Exp;
branches;
next	1.349;

1.349
date	2008.11.12.11.04.27;	author corinna;	state Exp;
branches;
next	1.348;

1.348
date	2008.10.05.16.48.30;	author cgf;	state Exp;
branches;
next	1.347;

1.347
date	2008.09.11.06.22.31;	author cgf;	state Exp;
branches;
next	1.346;

1.346
date	2008.09.11.04.34.22;	author cgf;	state Exp;
branches;
next	1.345;

1.345
date	2008.08.04.15.55.32;	author cgf;	state Exp;
branches;
next	1.344;

1.344
date	2008.08.01.19.12.49;	author cgf;	state Exp;
branches;
next	1.343;

1.343
date	2008.07.27.22.31.48;	author cgf;	state Exp;
branches;
next	1.342;

1.342
date	2008.07.26.08.32.28;	author corinna;	state Exp;
branches;
next	1.341;

1.341
date	2008.07.25.15.23.55;	author corinna;	state Exp;
branches;
next	1.340;

1.340
date	2008.07.09.11.58.38;	author corinna;	state Exp;
branches;
next	1.339;

1.339
date	2008.04.26.18.01.42;	author corinna;	state Exp;
branches;
next	1.338;

1.338
date	2008.04.22.20.56.26;	author corinna;	state Exp;
branches;
next	1.337;

1.337
date	2008.04.07.16.15.45;	author cgf;	state Exp;
branches;
next	1.336;

1.336
date	2008.04.03.16.00.14;	author corinna;	state Exp;
branches;
next	1.335;

1.335
date	2008.04.02.10.34.17;	author corinna;	state Exp;
branches;
next	1.334;

1.334
date	2008.04.01.13.22.46;	author corinna;	state Exp;
branches;
next	1.333;

1.333
date	2008.03.24.14.48.58;	author corinna;	state Exp;
branches;
next	1.332;

1.332
date	2008.03.12.12.41.49;	author corinna;	state Exp;
branches;
next	1.331;

1.331
date	2008.02.25.18.32.23;	author corinna;	state Exp;
branches;
next	1.330;

1.330
date	2008.02.15.17.53.10;	author cgf;	state Exp;
branches;
next	1.329;

1.329
date	2008.02.14.16.47.11;	author corinna;	state Exp;
branches;
next	1.328;

1.328
date	2008.02.11.16.39.06;	author corinna;	state Exp;
branches;
next	1.327;

1.327
date	2008.02.01.12.37.51;	author corinna;	state Exp;
branches;
next	1.326;

1.326
date	2008.01.31.20.26.00;	author corinna;	state Exp;
branches;
next	1.325;

1.325
date	2007.12.12.12.12.23;	author corinna;	state Exp;
branches;
next	1.324;

1.324
date	2007.12.06.18.24.06;	author corinna;	state Exp;
branches;
next	1.323;

1.323
date	2007.11.27.14.45.14;	author corinna;	state Exp;
branches;
next	1.322;

1.322
date	2007.08.02.14.21.53;	author cgf;	state Exp;
branches;
next	1.321;

1.321
date	2007.07.19.07.24.17;	author corinna;	state Exp;
branches;
next	1.320;

1.320
date	2007.03.29.16.37.35;	author corinna;	state Exp;
branches;
next	1.319;

1.319
date	2007.02.23.15.15.48;	author corinna;	state Exp;
branches;
next	1.318;

1.318
date	2007.02.22.12.34.54;	author cgf;	state Exp;
branches;
next	1.317;

1.317
date	2007.02.22.10.54.47;	author corinna;	state Exp;
branches;
next	1.316;

1.316
date	2006.12.12.16.27.32;	author corinna;	state Exp;
branches;
next	1.315;

1.315
date	2006.12.11.18.55.28;	author cgf;	state Exp;
branches;
next	1.314;

1.314
date	2006.12.05.13.16.24;	author corinna;	state Exp;
branches;
next	1.313;

1.313
date	2006.12.05.10.59.20;	author corinna;	state Exp;
branches;
next	1.312;

1.312
date	2006.10.27.10.41.51;	author corinna;	state Exp;
branches;
next	1.311;

1.311
date	2006.06.03.20.32.07;	author cgf;	state Exp;
branches
	1.311.4.1;
next	1.310;

1.310
date	2006.06.03.06.35.10;	author cgf;	state Exp;
branches;
next	1.309;

1.309
date	2006.06.03.02.58.59;	author cgf;	state Exp;
branches;
next	1.308;

1.308
date	2006.06.02.00.09.50;	author cgf;	state Exp;
branches;
next	1.307;

1.307
date	2006.05.28.15.50.13;	author cgf;	state Exp;
branches;
next	1.306;

1.306
date	2006.05.25.02.33.12;	author cgf;	state Exp;
branches;
next	1.305;

1.305
date	2006.05.16.03.14.23;	author cgf;	state Exp;
branches;
next	1.304;

1.304
date	2006.04.05.16.42.27;	author cgf;	state Exp;
branches;
next	1.303;

1.303
date	2006.04.03.17.33.07;	author cgf;	state Exp;
branches;
next	1.302;

1.302
date	2006.04.03.16.04.02;	author cgf;	state Exp;
branches;
next	1.301;

1.301
date	2006.03.29.06.35.25;	author cgf;	state Exp;
branches;
next	1.300;

1.300
date	2006.03.23.16.52.34;	author cgf;	state Exp;
branches;
next	1.299;

1.299
date	2006.03.22.16.42.44;	author cgf;	state Exp;
branches;
next	1.298;

1.298
date	2006.03.21.01.37.24;	author cgf;	state Exp;
branches;
next	1.297;

1.297
date	2006.03.20.18.01.17;	author cgf;	state Exp;
branches;
next	1.296;

1.296
date	2006.03.20.01.16.39;	author cgf;	state Exp;
branches;
next	1.295;

1.295
date	2006.03.20.01.11.30;	author cgf;	state Exp;
branches;
next	1.294;

1.294
date	2006.03.18.19.17.21;	author cgf;	state Exp;
branches;
next	1.293;

1.293
date	2006.03.16.02.57.37;	author cgf;	state Exp;
branches;
next	1.292;

1.292
date	2006.03.15.00.29.14;	author cgf;	state Exp;
branches;
next	1.291;

1.291
date	2006.03.14.19.07.36;	author cgf;	state Exp;
branches;
next	1.290;

1.290
date	2006.03.13.21.10.14;	author cgf;	state Exp;
branches;
next	1.289;

1.289
date	2006.03.13.18.29.48;	author cgf;	state Exp;
branches;
next	1.288;

1.288
date	2006.03.12.23.57.04;	author cgf;	state Exp;
branches;
next	1.287;

1.287
date	2006.02.20.02.06.37;	author cgf;	state Exp;
branches;
next	1.286;

1.286
date	2006.02.20.02.04.31;	author cgf;	state Exp;
branches;
next	1.285;

1.285
date	2006.02.06.18.24.06;	author cgf;	state Exp;
branches;
next	1.284;

1.284
date	2006.01.10.18.11.31;	author corinna;	state Exp;
branches;
next	1.283;

1.283
date	2006.01.05.16.21.14;	author cgf;	state Exp;
branches;
next	1.282;

1.282
date	2006.01.02.15.48.29;	author cgf;	state Exp;
branches;
next	1.281;

1.281
date	2006.01.02.13.01.42;	author corinna;	state Exp;
branches;
next	1.280;

1.280
date	2006.01.01.16.51.29;	author cgf;	state Exp;
branches;
next	1.279;

1.279
date	2005.12.29.20.46.33;	author cgf;	state Exp;
branches;
next	1.278;

1.278
date	2005.12.26.21.23.05;	author cgf;	state Exp;
branches;
next	1.277;

1.277
date	2005.12.26.19.34.59;	author cgf;	state Exp;
branches;
next	1.276;

1.276
date	2005.12.17.04.36.38;	author cgf;	state Exp;
branches;
next	1.275;

1.275
date	2005.12.03.04.23.35;	author cgf;	state Exp;
branches;
next	1.274;

1.274
date	2005.12.02.03.12.06;	author cgf;	state Exp;
branches;
next	1.273;

1.273
date	2005.11.28.22.32.29;	author corinna;	state Exp;
branches;
next	1.272;

1.272
date	2005.11.06.14.02.33;	author cgf;	state Exp;
branches;
next	1.271;

1.271
date	2005.10.23.23.47.45;	author cgf;	state Exp;
branches;
next	1.270;

1.270
date	2005.10.17.23.27.00;	author cgf;	state Exp;
branches;
next	1.269;

1.269
date	2005.10.03.17.23.54;	author cgf;	state Exp;
branches;
next	1.268;

1.268
date	2005.10.02.00.13.40;	author cgf;	state Exp;
branches;
next	1.267;

1.267
date	2005.09.30.23.52.13;	author cgf;	state Exp;
branches;
next	1.266;

1.266
date	2005.09.28.15.18.49;	author cgf;	state Exp;
branches;
next	1.265;

1.265
date	2005.09.23.03.35.41;	author cgf;	state Exp;
branches;
next	1.264;

1.264
date	2005.09.20.02.06.56;	author cgf;	state Exp;
branches;
next	1.263;

1.263
date	2005.09.14.14.00.03;	author cgf;	state Exp;
branches;
next	1.262;

1.262
date	2005.09.13.17.08.52;	author cgf;	state Exp;
branches;
next	1.261;

1.261
date	2005.09.07.03.10.16;	author cgf;	state Exp;
branches;
next	1.260;

1.260
date	2005.09.02.17.35.21;	author cgf;	state Exp;
branches;
next	1.259;

1.259
date	2005.09.02.17.12.34;	author cgf;	state Exp;
branches;
next	1.258;

1.258
date	2005.09.02.04.51.09;	author cgf;	state Exp;
branches;
next	1.257;

1.257
date	2005.09.02.04.46.50;	author cgf;	state Exp;
branches;
next	1.256;

1.256
date	2005.08.17.16.10.47;	author cgf;	state Exp;
branches;
next	1.255;

1.255
date	2005.08.12.02.39.12;	author cgf;	state Exp;
branches;
next	1.254;

1.254
date	2005.08.11.16.30.48;	author cgf;	state Exp;
branches;
next	1.253;

1.253
date	2005.08.08.04.06.07;	author cgf;	state Exp;
branches;
next	1.252;

1.252
date	2005.08.07.02.38.46;	author cgf;	state Exp;
branches;
next	1.251;

1.251
date	2005.08.07.02.38.13;	author cgf;	state Exp;
branches;
next	1.250;

1.250
date	2005.07.28.17.03.33;	author cgf;	state Exp;
branches;
next	1.249;

1.249
date	2005.07.06.20.04.59;	author cgf;	state Exp;
branches;
next	1.248;

1.248
date	2005.07.05.20.20.47;	author cgf;	state Exp;
branches;
next	1.247;

1.247
date	2005.06.30.02.52.12;	author cgf;	state Exp;
branches;
next	1.246;

1.246
date	2005.06.15.22.50.31;	author cgf;	state Exp;
branches;
next	1.245;

1.245
date	2005.06.07.18.41.31;	author cgf;	state Exp;
branches;
next	1.244;

1.244
date	2005.06.04.02.11.50;	author cgf;	state Exp;
branches;
next	1.243;

1.243
date	2005.06.02.02.36.49;	author cgf;	state Exp;
branches;
next	1.242;

1.242
date	2005.06.01.03.46.55;	author cgf;	state Exp;
branches;
next	1.241;

1.241
date	2005.05.17.01.27.31;	author cgf;	state Exp;
branches;
next	1.240;

1.240
date	2005.05.11.21.53.54;	author cgf;	state Exp;
branches;
next	1.239;

1.239
date	2005.05.10.16.08.46;	author cgf;	state Exp;
branches;
next	1.238;

1.238
date	2005.05.09.01.19.37;	author cgf;	state Exp;
branches;
next	1.237;

1.237
date	2005.04.14.17.34.03;	author cgf;	state Exp;
branches;
next	1.236;

1.236
date	2005.04.05.04.30.58;	author cgf;	state Exp;
branches;
next	1.235;

1.235
date	2005.04.04.10.26.34;	author corinna;	state Exp;
branches;
next	1.234;

1.234
date	2005.04.03.13.06.41;	author corinna;	state Exp;
branches;
next	1.233;

1.233
date	2005.04.03.08.45.17;	author corinna;	state Exp;
branches;
next	1.232;

1.232
date	2005.03.22.19.00.28;	author cgf;	state Exp;
branches;
next	1.231;

1.231
date	2005.03.10.14.41.50;	author cgf;	state Exp;
branches;
next	1.230;

1.230
date	2005.03.08.05.05.02;	author cgf;	state Exp;
branches;
next	1.229;

1.229
date	2005.03.06.20.21.30;	author cgf;	state Exp;
branches;
next	1.228;

1.228
date	2005.01.11.15.31.02;	author cgf;	state Exp;
branches;
next	1.227;

1.227
date	2005.01.06.16.36.39;	author cgf;	state Exp;
branches;
next	1.226;

1.226
date	2005.01.05.21.40.08;	author cgf;	state Exp;
branches;
next	1.225;

1.225
date	2004.12.05.19.41.24;	author cgf;	state Exp;
branches;
next	1.224;

1.224
date	2004.11.26.04.15.06;	author cgf;	state Exp;
branches;
next	1.223;

1.223
date	2004.10.07.16.59.02;	author corinna;	state Exp;
branches
	1.223.2.1;
next	1.222;

1.222
date	2004.09.16.03.49.03;	author cgf;	state Exp;
branches;
next	1.221;

1.221
date	2004.09.12.03.47.56;	author cgf;	state Exp;
branches;
next	1.220;

1.220
date	2004.07.24.19.18.58;	author cgf;	state Exp;
branches;
next	1.219;

1.219
date	2004.05.28.19.50.05;	author cgf;	state Exp;
branches;
next	1.218;

1.218
date	2004.03.12.03.09.28;	author cgf;	state Exp;
branches;
next	1.217;

1.217
date	2004.02.25.01.19.13;	author cgf;	state Exp;
branches;
next	1.216;

1.216
date	2004.02.24.17.13.16;	author cgf;	state Exp;
branches;
next	1.215;

1.215
date	2004.02.18.22.32.15;	author cgf;	state Exp;
branches;
next	1.214;

1.214
date	2004.02.16.02.03.54;	author cgf;	state Exp;
branches;
next	1.213;

1.213
date	2004.02.14.04.38.37;	author cgf;	state Exp;
branches;
next	1.212;

1.212
date	2004.02.12.03.07.35;	author cgf;	state Exp;
branches;
next	1.211;

1.211
date	2004.02.12.03.01.57;	author cgf;	state Exp;
branches;
next	1.210;

1.210
date	2004.02.05.17.23.19;	author corinna;	state Exp;
branches;
next	1.209;

1.209
date	2004.02.02.21.00.07;	author cgf;	state Exp;
branches;
next	1.208;

1.208
date	2004.01.26.18.52.02;	author cgf;	state Exp;
branches;
next	1.207;

1.207
date	2004.01.23.23.05.32;	author cgf;	state Exp;
branches;
next	1.206;

1.206
date	2004.01.22.19.14.07;	author cgf;	state Exp;
branches;
next	1.205;

1.205
date	2004.01.19.23.03.42;	author cgf;	state Exp;
branches;
next	1.204;

1.204
date	2004.01.19.05.46.54;	author cgf;	state Exp;
branches;
next	1.203;

1.203
date	2004.01.14.15.45.36;	author cgf;	state Exp;
branches
	1.203.4.1;
next	1.202;

1.202
date	2004.01.03.18.53.48;	author cgf;	state Exp;
branches
	1.202.2.1;
next	1.201;

1.201
date	2004.01.03.18.15.03;	author cgf;	state Exp;
branches;
next	1.200;

1.200
date	2003.12.26.04.40.52;	author cgf;	state Exp;
branches;
next	1.199;

1.199
date	2003.12.23.16.26.29;	author cgf;	state Exp;
branches;
next	1.198;

1.198
date	2003.12.14.07.09.22;	author cgf;	state Exp;
branches;
next	1.197;

1.197
date	2003.12.12.05.04.47;	author cgf;	state Exp;
branches;
next	1.196;

1.196
date	2003.12.10.03.19.19;	author cgf;	state Exp;
branches;
next	1.195;

1.195
date	2003.12.07.22.37.11;	author cgf;	state Exp;
branches;
next	1.194;

1.194
date	2003.12.06.18.08.37;	author cgf;	state Exp;
branches;
next	1.193;

1.193
date	2003.12.03.05.21.55;	author cgf;	state Exp;
branches;
next	1.192;

1.192
date	2003.11.28.20.55.58;	author cgf;	state Exp;
branches;
next	1.191;

1.191
date	2003.11.22.17.22.59;	author cgf;	state Exp;
branches;
next	1.190;

1.190
date	2003.11.14.23.40.05;	author rbcollins;	state Exp;
branches;
next	1.189;

1.189
date	2003.10.16.14.08.27;	author corinna;	state Exp;
branches;
next	1.188;

1.188
date	2003.10.15.08.23.26;	author corinna;	state Exp;
branches;
next	1.187;

1.187
date	2003.10.08.21.40.33;	author cgf;	state Exp;
branches;
next	1.186;

1.186
date	2003.10.02.04.46.59;	author cgf;	state Exp;
branches;
next	1.185;

1.185
date	2003.09.25.02.29.04;	author phumblet;	state Exp;
branches;
next	1.184;

1.184
date	2003.09.25.00.37.16;	author cgf;	state Exp;
branches;
next	1.183;

1.183
date	2003.09.23.04.02.07;	author cgf;	state Exp;
branches;
next	1.182;

1.182
date	2003.09.16.00.45.50;	author phumblet;	state Exp;
branches;
next	1.181;

1.181
date	2003.09.14.01.58.03;	author cgf;	state Exp;
branches;
next	1.180;

1.180
date	2003.09.12.06.41.53;	author cgf;	state Exp;
branches
	1.180.2.1;
next	1.179;

1.179
date	2003.09.09.03.11.31;	author cgf;	state Exp;
branches;
next	1.178;

1.178
date	2003.09.05.01.55.01;	author cgf;	state Exp;
branches;
next	1.177;

1.177
date	2003.07.30.04.46.07;	author cgf;	state Exp;
branches;
next	1.176;

1.176
date	2003.07.02.03.16.00;	author cgf;	state Exp;
branches;
next	1.175;

1.175
date	2003.06.16.03.24.10;	author cgf;	state Exp;
branches;
next	1.174;

1.174
date	2003.05.15.19.42.51;	author tpfaff;	state Exp;
branches;
next	1.173;

1.173
date	2003.03.27.19.52.20;	author tpfaff;	state Exp;
branches;
next	1.172;

1.172
date	2003.03.20.01.34.53;	author cgf;	state Exp;
branches;
next	1.171;

1.171
date	2003.03.01.02.02.40;	author cgf;	state Exp;
branches;
next	1.170;

1.170
date	2003.01.25.10.36.46;	author corinna;	state Exp;
branches;
next	1.169;

1.169
date	2003.01.17.18.05.32;	author cgf;	state Exp;
branches;
next	1.168;

1.168
date	2003.01.10.12.32.46;	author corinna;	state Exp;
branches
	1.168.2.1;
next	1.167;

1.167
date	2002.12.25.20.33.21;	author cgf;	state Exp;
branches
	1.167.4.1;
next	1.166;

1.166
date	2002.12.14.17.23.42;	author corinna;	state Exp;
branches;
next	1.165;

1.165
date	2002.11.29.07.05.25;	author cgf;	state Exp;
branches;
next	1.164;

1.164
date	2002.11.24.13.54.14;	author rbcollins;	state Exp;
branches;
next	1.163;

1.163
date	2002.10.22.20.16.31;	author cgf;	state Exp;
branches;
next	1.162;

1.162
date	2002.10.22.16.18.55;	author cgf;	state Exp;
branches;
next	1.161;

1.161
date	2002.10.21.01.00.56;	author cgf;	state Exp;
branches;
next	1.160;

1.160
date	2002.10.19.00.57.06;	author cgf;	state Exp;
branches;
next	1.159;

1.159
date	2002.10.15.07.03.44;	author cgf;	state Exp;
branches;
next	1.158;

1.158
date	2002.10.14.20.25.52;	author cgf;	state Exp;
branches;
next	1.157;

1.157
date	2002.10.13.18.16.33;	author cgf;	state Exp;
branches;
next	1.156;

1.156
date	2002.10.10.05.23.23;	author cgf;	state Exp;
branches;
next	1.155;

1.155
date	2002.10.09.05.55.40;	author cgf;	state Exp;
branches;
next	1.154;

1.154
date	2002.10.07.04.12.54;	author cgf;	state Exp;
branches;
next	1.153;

1.153
date	2002.09.30.15.17.44;	author cgf;	state Exp;
branches;
next	1.152;

1.152
date	2002.09.30.04.35.17;	author cgf;	state Exp;
branches;
next	1.151;

1.151
date	2002.09.29.02.19.35;	author cgf;	state Exp;
branches;
next	1.150;

1.150
date	2002.09.22.12.04.15;	author scottc;	state Exp;
branches;
next	1.149;

1.149
date	2002.09.19.15.12.48;	author cgf;	state Exp;
branches;
next	1.148;

1.148
date	2002.09.02.06.00.59;	author cgf;	state Exp;
branches;
next	1.147;

1.147
date	2002.08.27.04.10.54;	author cgf;	state Exp;
branches;
next	1.146;

1.146
date	2002.08.18.05.49.25;	author cgf;	state Exp;
branches;
next	1.145;

1.145
date	2002.08.16.19.41.39;	author cgf;	state Exp;
branches;
next	1.144;

1.144
date	2002.08.15.20.34.49;	author cgf;	state Exp;
branches;
next	1.143;

1.143
date	2002.08.15.15.46.27;	author cgf;	state Exp;
branches;
next	1.142;

1.142
date	2002.08.11.19.19.29;	author cgf;	state Exp;
branches;
next	1.141;

1.141
date	2002.08.01.16.20.31;	author cgf;	state Exp;
branches;
next	1.140;

1.140
date	2002.07.30.01.31.51;	author cgf;	state Exp;
branches;
next	1.139;

1.139
date	2002.07.15.03.48.52;	author cgf;	state Exp;
branches;
next	1.138;

1.138
date	2002.07.14.19.15.32;	author cgf;	state Exp;
branches;
next	1.137;

1.137
date	2002.07.13.21.08.13;	author cgf;	state Exp;
branches;
next	1.136;

1.136
date	2002.07.13.20.00.25;	author cgf;	state Exp;
branches;
next	1.135;

1.135
date	2002.06.27.20.44.27;	author cgf;	state Exp;
branches;
next	1.134;

1.134
date	2002.06.27.16.01.38;	author corinna;	state Exp;
branches;
next	1.133;

1.133
date	2002.06.26.05.37.29;	author cgf;	state Exp;
branches;
next	1.132;

1.132
date	2002.06.26.04.21.01;	author cgf;	state Exp;
branches;
next	1.131;

1.131
date	2002.06.15.21.59.32;	author cgf;	state Exp;
branches;
next	1.130;

1.130
date	2002.06.14.18.01.19;	author cgf;	state Exp;
branches;
next	1.129;

1.129
date	2002.06.10.17.08.09;	author cgf;	state Exp;
branches;
next	1.128;

1.128
date	2002.05.25.02.22.50;	author cgf;	state Exp;
branches;
next	1.127;

1.127
date	2002.02.28.14.25.53;	author rbcollins;	state Exp;
branches;
next	1.126;

1.126
date	2002.02.22.19.33.41;	author cgf;	state Exp;
branches;
next	1.125;

1.125
date	2002.02.10.13.38.48;	author corinna;	state Exp;
branches;
next	1.124;

1.124
date	2002.01.13.20.03.03;	author cgf;	state Exp;
branches;
next	1.123;

1.123
date	2002.01.13.16.55.32;	author cgf;	state Exp;
branches;
next	1.122;

1.122
date	2002.01.10.03.21.27;	author cgf;	state Exp;
branches;
next	1.121;

1.121
date	2001.12.26.21.35.16;	author cgf;	state Exp;
branches;
next	1.120;

1.120
date	2001.12.26.04.53.34;	author cgf;	state Exp;
branches;
next	1.119;

1.119
date	2001.11.28.00.06.35;	author cgf;	state Exp;
branches;
next	1.118;

1.118
date	2001.10.15.23.39.32;	author cgf;	state Exp;
branches;
next	1.117;

1.117
date	2001.10.10.02.32.12;	author cgf;	state Exp;
branches;
next	1.116;

1.116
date	2001.10.09.23.28.24;	author cgf;	state Exp;
branches;
next	1.115;

1.115
date	2001.10.04.02.34.19;	author cgf;	state Exp;
branches;
next	1.114;

1.114
date	2001.10.02.01.58.06;	author cgf;	state Exp;
branches;
next	1.113;

1.113
date	2001.10.01.04.10.06;	author cgf;	state Exp;
branches;
next	1.112;

1.112
date	2001.09.15.04.36.43;	author cgf;	state Exp;
branches
	1.112.2.1;
next	1.111;

1.111
date	2001.09.15.00.47.44;	author cgf;	state Exp;
branches;
next	1.110;

1.110
date	2001.09.14.08.23.46;	author corinna;	state Exp;
branches;
next	1.109;

1.109
date	2001.09.12.17.46.35;	author corinna;	state Exp;
branches;
next	1.108;

1.108
date	2001.09.11.08.15.39;	author rbcollins;	state Exp;
branches;
next	1.107;

1.107
date	2001.09.07.21.32.04;	author cgf;	state Exp;
branches;
next	1.106;

1.106
date	2001.09.06.05.17.22;	author cgf;	state Exp;
branches;
next	1.105;

1.105
date	2001.09.06.04.41.59;	author cgf;	state Exp;
branches;
next	1.104;

1.104
date	2001.09.03.02.13.05;	author cgf;	state Exp;
branches;
next	1.103;

1.103
date	2001.08.22.17.50.22;	author cgf;	state Exp;
branches;
next	1.102;

1.102
date	2001.08.04.21.10.52;	author cgf;	state Exp;
branches;
next	1.101;

1.101
date	2001.07.29.02.33.30;	author cgf;	state Exp;
branches;
next	1.100;

1.100
date	2001.07.26.19.22.23;	author cgf;	state Exp;
branches;
next	1.99;

1.99
date	2001.07.18.17.05.34;	author cgf;	state Exp;
branches;
next	1.98;

1.98
date	2001.07.17.03.41.52;	author cgf;	state Exp;
branches;
next	1.97;

1.97
date	2001.06.24.22.26.49;	author cgf;	state Exp;
branches;
next	1.96;

1.96
date	2001.06.04.01.28.09;	author cgf;	state Exp;
branches;
next	1.95;

1.95
date	2001.05.08.15.16.48;	author cgf;	state Exp;
branches;
next	1.94;

1.94
date	2001.04.28.23.48.27;	author cgf;	state Exp;
branches;
next	1.93;

1.93
date	2001.04.18.21.10.11;	author cgf;	state Exp;
branches;
next	1.92;

1.92
date	2001.04.17.03.52.08;	author cgf;	state Exp;
branches;
next	1.91;

1.91
date	2001.04.09.01.23.27;	author cgf;	state Exp;
branches;
next	1.90;

1.90
date	2001.03.28.03.42.58;	author cgf;	state Exp;
branches;
next	1.89;

1.89
date	2001.03.05.06.28.23;	author cgf;	state Exp;
branches;
next	1.88;

1.88
date	2001.03.03.03.56.34;	author cgf;	state Exp;
branches;
next	1.87;

1.87
date	2001.02.20.03.28.01;	author cgf;	state Exp;
branches;
next	1.86;

1.86
date	2001.02.20.02.53.55;	author cgf;	state Exp;
branches;
next	1.85;

1.85
date	2001.01.29.00.46.25;	author cgf;	state Exp;
branches;
next	1.84;

1.84
date	2001.01.28.05.51.14;	author cgf;	state Exp;
branches;
next	1.83;

1.83
date	2001.01.08.04.02.01;	author cgf;	state Exp;
branches;
next	1.82;

1.82
date	2000.12.10.00.45.11;	author cgf;	state Exp;
branches;
next	1.81;

1.81
date	2000.11.15.06.27.48;	author cgf;	state Exp;
branches;
next	1.80;

1.80
date	2000.11.15.00.13.08;	author corinna;	state Exp;
branches;
next	1.79;

1.79
date	2000.11.14.05.53.32;	author cgf;	state Exp;
branches;
next	1.78;

1.78
date	2000.11.11.05.36.34;	author cgf;	state Exp;
branches;
next	1.77;

1.77
date	2000.11.06.23.12.05;	author cgf;	state Exp;
branches;
next	1.76;

1.76
date	2000.11.06.06.36.32;	author cgf;	state Exp;
branches;
next	1.75;

1.75
date	2000.10.27.18.53.56;	author corinna;	state Exp;
branches;
next	1.74;

1.74
date	2000.10.25.14.18.56;	author cgf;	state Exp;
branches;
next	1.73;

1.73
date	2000.10.25.03.59.07;	author cgf;	state Exp;
branches;
next	1.72;

1.72
date	2000.10.25.03.54.50;	author cgf;	state Exp;
branches;
next	1.71;

1.71
date	2000.10.19.17.57.28;	author cgf;	state Exp;
branches;
next	1.70;

1.70
date	2000.10.19.00.53.25;	author cgf;	state Exp;
branches;
next	1.69;

1.69
date	2000.10.19.00.45.39;	author dj;	state Exp;
branches;
next	1.68;

1.68
date	2000.10.17.01.46.26;	author dj;	state Exp;
branches;
next	1.67;

1.67
date	2000.10.16.23.55.57;	author cgf;	state Exp;
branches;
next	1.66;

1.66
date	2000.10.15.01.37.06;	author cgf;	state Exp;
branches;
next	1.65;

1.65
date	2000.10.14.05.52.38;	author cgf;	state Exp;
branches;
next	1.64;

1.64
date	2000.10.12.22.15.46;	author cgf;	state Exp;
branches;
next	1.63;

1.63
date	2000.10.12.04.38.29;	author cgf;	state Exp;
branches;
next	1.62;

1.62
date	2000.10.02.20.21.47;	author corinna;	state Exp;
branches;
next	1.61;

1.61
date	2000.10.02.02.26.04;	author cgf;	state Exp;
branches;
next	1.60;

1.60
date	2000.09.30.04.54.11;	author cgf;	state Exp;
branches;
next	1.59;

1.59
date	2000.09.30.01.38.13;	author corinna;	state Exp;
branches;
next	1.58;

1.58
date	2000.09.26.00.52.21;	author cgf;	state Exp;
branches;
next	1.57;

1.57
date	2000.09.13.19.57.36;	author cgf;	state Exp;
branches;
next	1.56;

1.56
date	2000.09.13.19.57.00;	author cgf;	state Exp;
branches;
next	1.55;

1.55
date	2000.09.10.16.43.47;	author cgf;	state Exp;
branches;
next	1.54;

1.54
date	2000.09.08.02.56.54;	author cgf;	state Exp;
branches;
next	1.53;

1.53
date	2000.09.07.16.23.50;	author cgf;	state Exp;
branches;
next	1.52;

1.52
date	2000.09.05.03.16.28;	author cgf;	state Exp;
branches;
next	1.51;

1.51
date	2000.09.03.04.16.35;	author cgf;	state Exp;
branches;
next	1.50;

1.50
date	2000.09.01.20.54.22;	author cgf;	state Exp;
branches;
next	1.49;

1.49
date	2000.08.26.01.36.20;	author cgf;	state Exp;
branches;
next	1.48;

1.48
date	2000.08.25.02.27.41;	author cgf;	state Exp;
branches;
next	1.47;

1.47
date	2000.08.24.04.07.50;	author cgf;	state Exp;
branches;
next	1.46;

1.46
date	2000.08.23.14.56.28;	author cgf;	state Exp;
branches;
next	1.45;

1.45
date	2000.08.23.14.53.24;	author cgf;	state Exp;
branches;
next	1.44;

1.44
date	2000.08.22.05.10.20;	author cgf;	state Exp;
branches;
next	1.43;

1.43
date	2000.08.22.03.58.46;	author cgf;	state Exp;
branches;
next	1.42;

1.42
date	2000.08.12.05.35.42;	author cgf;	state Exp;
branches;
next	1.41;

1.41
date	2000.08.12.04.48.44;	author cgf;	state Exp;
branches;
next	1.40;

1.40
date	2000.08.02.16.28.17;	author dj;	state Exp;
branches;
next	1.39;

1.39
date	2000.07.29.16.24.37;	author cgf;	state Exp;
branches;
next	1.38;

1.38
date	2000.07.28.22.33.43;	author cgf;	state Exp;
branches;
next	1.37;

1.37
date	2000.07.17.19.18.21;	author cgf;	state Exp;
branches;
next	1.36;

1.36
date	2000.07.16.17.38.41;	author cgf;	state Exp;
branches;
next	1.35;

1.35
date	2000.07.16.06.31.06;	author cgf;	state Exp;
branches;
next	1.34;

1.34
date	2000.07.16.04.37.43;	author cgf;	state Exp;
branches;
next	1.33;

1.33
date	2000.07.16.04.34.05;	author cgf;	state Exp;
branches;
next	1.32;

1.32
date	2000.07.15.02.48.10;	author cgf;	state Exp;
branches;
next	1.31;

1.31
date	2000.07.12.04.02.45;	author cgf;	state Exp;
branches;
next	1.30;

1.30
date	2000.07.05.23.46.44;	author cgf;	state Exp;
branches;
next	1.29;

1.29
date	2000.07.04.02.26.20;	author cgf;	state Exp;
branches;
next	1.28;

1.28
date	2000.07.03.20.16.23;	author cgf;	state Exp;
branches;
next	1.27;

1.27
date	2000.07.03.20.14.06;	author cgf;	state Exp;
branches;
next	1.26;

1.26
date	2000.07.03.01.55.17;	author cgf;	state Exp;
branches;
next	1.25;

1.25
date	2000.07.01.04.26.45;	author cgf;	state Exp;
branches;
next	1.24;

1.24
date	2000.07.01.03.51.55;	author cgf;	state Exp;
branches;
next	1.23;

1.23
date	2000.06.19.17.36.30;	author corinna;	state Exp;
branches;
next	1.22;

1.22
date	2000.06.16.19.36.07;	author corinna;	state Exp;
branches;
next	1.21;

1.21
date	2000.06.08.00.55.27;	author dj;	state Exp;
branches;
next	1.20;

1.20
date	2000.06.01.05.57.54;	author cgf;	state Exp;
branches;
next	1.19;

1.19
date	2000.05.31.12.32.59;	author corinna;	state Exp;
branches;
next	1.18;

1.18
date	2000.05.30.00.38.51;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2000.05.22.00.54.22;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2000.05.18.21.30.30;	author cgf;	state Exp;
branches;
next	1.15;

1.15
date	2000.05.18.03.20.01;	author cgf;	state Exp;
branches;
next	1.14;

1.14
date	2000.05.17.05.49.51;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2000.05.13.01.42.53;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2000.05.07.03.29.08;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2000.05.02.00.25.43;	author corinna;	state Exp;
branches;
next	1.10;

1.10
date	2000.04.18.23.16.56;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2000.04.18.21.28.45;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2000.04.13.22.43.48;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2000.03.28.21.49.16;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2000.03.25.05.25.27;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2000.03.18.06.33.33;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.16.19.35.18;	author corinna;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.28.05.05.33;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.21.05.20.37;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.452.2.1
date	2014.02.19.18.39.45;	author cgf;	state Exp;
branches;
next	1.452.2.2;

1.452.2.2
date	2014.03.28.22.32.27;	author corinna;	state Exp;
branches;
next	1.452.2.3;

1.452.2.3
date	2014.07.15.14.34.37;	author corinna;	state Exp;
branches;
next	1.452.2.4;

1.452.2.4
date	2014.08.13.17.39.10;	author corinna;	state Exp;
branches;
next	1.452.2.5;

1.452.2.5
date	2014.11.13.12.52.55;	author corinna;	state Exp;
branches;
next	;

1.434.2.1
date	2012.10.23.11.37.23;	author corinna;	state Exp;
branches;
next	1.434.2.2;

1.434.2.2
date	2012.10.23.12.54.26;	author corinna;	state Exp;
branches;
next	1.434.2.3;

1.434.2.3
date	2012.10.26.12.09.53;	author corinna;	state Exp;
branches;
next	1.434.2.4;

1.434.2.4
date	2012.10.27.12.11.51;	author ktietz;	state Exp;
branches;
next	1.434.2.5;

1.434.2.5
date	2012.10.31.17.00.04;	author corinna;	state Exp;
branches;
next	1.434.2.6;

1.434.2.6
date	2012.12.10.11.45.45;	author corinna;	state Exp;
branches;
next	1.434.2.7;

1.434.2.7
date	2012.12.20.16.52.16;	author corinna;	state Exp;
branches;
next	1.434.2.8;

1.434.2.8
date	2013.01.09.16.27.19;	author corinna;	state Exp;
branches;
next	1.434.2.9;

1.434.2.9
date	2013.01.19.17.20.33;	author corinna;	state Exp;
branches;
next	1.434.2.10;

1.434.2.10
date	2013.01.22.17.40.52;	author corinna;	state Exp;
branches;
next	1.434.2.11;

1.434.2.11
date	2013.01.29.18.29.35;	author corinna;	state Exp;
branches;
next	1.434.2.12;

1.434.2.12
date	2013.01.29.22.15.13;	author corinna;	state Exp;
branches;
next	1.434.2.13;

1.434.2.13
date	2013.01.29.22.16.53;	author corinna;	state Exp;
branches;
next	1.434.2.14;

1.434.2.14
date	2013.02.05.15.30.11;	author corinna;	state Exp;
branches;
next	1.434.2.15;

1.434.2.15
date	2013.02.09.20.37.59;	author corinna;	state Exp;
branches;
next	1.434.2.16;

1.434.2.16
date	2013.03.05.14.29.30;	author corinna;	state Exp;
branches;
next	1.434.2.17;

1.434.2.17
date	2013.03.15.15.18.06;	author corinna;	state Exp;
branches;
next	1.434.2.18;

1.434.2.18
date	2013.03.18.12.05.51;	author corinna;	state Exp;
branches;
next	1.434.2.19;

1.434.2.19
date	2013.04.11.12.13.01;	author corinna;	state Exp;
branches;
next	;

1.392.2.1
date	2011.03.17.08.41.20;	author corinna;	state Exp;
branches;
next	;

1.311.4.1
date	2006.10.27.10.49.53;	author corinna;	state Exp;
branches;
next	1.311.4.2;

1.311.4.2
date	2006.12.05.11.33.59;	author corinna;	state Exp;
branches;
next	1.311.4.3;

1.311.4.3
date	2006.12.05.13.16.37;	author corinna;	state Exp;
branches;
next	1.311.4.4;

1.311.4.4
date	2007.01.15.11.56.06;	author corinna;	state Exp;
branches;
next	1.311.4.5;

1.311.4.5
date	2007.11.29.11.14.52;	author corinna;	state Exp;
branches;
next	;

1.223.2.1
date	2004.11.16.06.02.05;	author cgf;	state Exp;
branches;
next	1.223.2.2;

1.223.2.2
date	2004.11.16.15.16.56;	author cgf;	state Exp;
branches;
next	1.223.2.3;

1.223.2.3
date	2004.11.18.00.48.40;	author cgf;	state Exp;
branches;
next	1.223.2.4;

1.223.2.4
date	2004.11.24.05.48.29;	author cgf;	state Exp;
branches;
next	;

1.203.4.1
date	2004.01.20.19.57.29;	author cgf;	state Exp;
branches;
next	1.203.4.2;

1.203.4.2
date	2004.01.22.20.41.27;	author cgf;	state Exp;
branches;
next	1.203.4.3;

1.203.4.3
date	2004.01.24.01.53.52;	author cgf;	state Exp;
branches;
next	1.203.4.4;

1.203.4.4
date	2004.01.26.18.52.52;	author cgf;	state Exp;
branches;
next	;

1.202.2.1
date	2004.01.11.18.13.52;	author cgf;	state Exp;
branches;
next	1.202.2.2;

1.202.2.2
date	2004.01.12.05.15.19;	author cgf;	state Exp;
branches;
next	1.202.2.3;

1.202.2.3
date	2004.01.13.05.13.22;	author cgf;	state Exp;
branches;
next	1.202.2.4;

1.202.2.4
date	2004.01.13.22.23.53;	author cgf;	state Exp;
branches;
next	1.202.2.5;

1.202.2.5
date	2004.01.15.18.29.37;	author cgf;	state Exp;
branches;
next	1.202.2.6;

1.202.2.6
date	2004.01.17.04.13.20;	author cgf;	state Exp;
branches;
next	;

1.180.2.1
date	2003.09.19.01.55.54;	author cgf;	state Exp;
branches
	1.180.2.1.2.1;
next	;

1.180.2.1.2.1
date	2003.09.24.17.10.21;	author cgf;	state Exp;
branches;
next	;

1.168.2.1
date	2003.01.16.01.27.30;	author cgf;	state Exp;
branches;
next	1.168.2.2;

1.168.2.2
date	2003.01.24.04.04.20;	author cgf;	state Exp;
branches;
next	1.168.2.3;

1.168.2.3
date	2003.01.25.16.36.59;	author cgf;	state Exp;
branches;
next	1.168.2.4;

1.168.2.4
date	2003.01.27.00.32.04;	author cgf;	state Exp;
branches;
next	1.168.2.5;

1.168.2.5
date	2003.02.14.03.03.27;	author cgf;	state Exp;
branches;
next	1.168.2.6;

1.168.2.6
date	2003.03.01.02.05.42;	author cgf;	state Exp;
branches;
next	1.168.2.7;

1.168.2.7
date	2003.03.21.15.15.17;	author cgf;	state Exp;
branches;
next	1.168.2.8;

1.168.2.8
date	2003.04.03.01.32.32;	author cgf;	state Exp;
branches;
next	1.168.2.9;

1.168.2.9
date	2003.05.26.19.39.05;	author cgf;	state Exp;
branches;
next	1.168.2.10;

1.168.2.10
date	2003.07.06.05.10.42;	author cgf;	state Exp;
branches;
next	1.168.2.11;

1.168.2.11
date	2003.08.06.03.58.57;	author cgf;	state Exp;
branches;
next	1.168.2.12;

1.168.2.12
date	2003.09.10.16.23.39;	author cgf;	state Exp;
branches;
next	1.168.2.13;

1.168.2.13
date	2003.09.14.01.35.37;	author cgf;	state Exp;
branches;
next	;

1.167.4.1
date	2002.12.28.07.10.26;	author cgf;	state Exp;
branches;
next	;

1.112.2.1
date	2001.09.25.06.31.04;	author rbcollins;	state Exp;
branches;
next	1.112.2.2;

1.112.2.2
date	2001.09.29.10.47.58;	author rbcollins;	state Exp;
branches;
next	1.112.2.3;

1.112.2.3
date	2001.10.02.12.09.53;	author rbcollins;	state Exp;
branches;
next	1.112.2.4;

1.112.2.4
date	2002.01.04.03.56.06;	author rbcollins;	state Exp;
branches;
next	1.112.2.5;

1.112.2.5
date	2002.01.15.12.52.49;	author rbcollins;	state Exp;
branches;
next	1.112.2.6;

1.112.2.6
date	2002.02.28.12.53.23;	author rbcollins;	state Exp;
branches;
next	1.112.2.7;

1.112.2.7
date	2002.06.13.14.34.01;	author rbcollins;	state Exp;
branches;
next	1.112.2.8;

1.112.2.8
date	2002.06.15.10.26.31;	author rbcollins;	state Exp;
branches;
next	1.112.2.9;

1.112.2.9
date	2002.06.18.00.17.05;	author scottc;	state Exp;
branches;
next	1.112.2.10;

1.112.2.10
date	2002.06.24.12.31.24;	author scottc;	state Exp;
branches;
next	1.112.2.11;

1.112.2.11
date	2002.06.27.11.30.13;	author scottc;	state Exp;
branches;
next	1.112.2.12;

1.112.2.12
date	2002.06.28.18.15.47;	author scottc;	state Exp;
branches;
next	1.112.2.13;

1.112.2.13
date	2002.07.03.15.35.42;	author scottc;	state Exp;
branches;
next	1.112.2.14;

1.112.2.14
date	2002.07.13.20.39.24;	author scottc;	state Exp;
branches;
next	1.112.2.15;

1.112.2.15
date	2002.07.13.21.44.07;	author scottc;	state Exp;
branches;
next	1.112.2.16;

1.112.2.16
date	2002.07.14.19.26.23;	author scottc;	state Exp;
branches;
next	1.112.2.17;

1.112.2.17
date	2002.07.23.03.19.13;	author scottc;	state Exp;
branches;
next	1.112.2.18;

1.112.2.18
date	2002.07.30.13.31.46;	author scottc;	state Exp;
branches;
next	1.112.2.19;

1.112.2.19
date	2002.08.01.20.34.06;	author scottc;	state Exp;
branches;
next	1.112.2.20;

1.112.2.20
date	2002.08.12.14.06.34;	author scottc;	state Exp;
branches;
next	1.112.2.21;

1.112.2.21
date	2002.08.16.21.46.48;	author scottc;	state Exp;
branches;
next	1.112.2.22;

1.112.2.22
date	2002.08.18.12.09.27;	author scottc;	state Exp;
branches;
next	1.112.2.23;

1.112.2.23
date	2002.08.27.12.28.37;	author scottc;	state Exp;
branches;
next	1.112.2.24;

1.112.2.24
date	2002.09.03.13.52.06;	author scottc;	state Exp;
branches;
next	1.112.2.25;

1.112.2.25
date	2002.09.19.21.51.22;	author scottc;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.466
log
@	* dcrt0.cc (cygwin__cxa_atexit): Fetch correct DSO handle value
	by searching dll list.  Explain why.
@
text
@/* dcrt0.cc -- essentially the main() for the Cygwin dll

   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include "winsup.h"
#include "miscfuncs.h"
#include <unistd.h>
#include <stdlib.h>
#include "glob.h"
#include <ctype.h>
#include <locale.h>
#include "environ.h"
#include "sigproc.h"
#include "pinfo.h"
#include "cygerrno.h"
#define NEED_VFORK
#include "perprocess.h"
#include "path.h"
#include "fhandler.h"
#include "dtable.h"
#include "cygheap.h"
#include "child_info_magic.h"
#include "cygtls.h"
#include "shared_info.h"
#include "cygwin_version.h"
#include "dll_init.h"
#include "heap.h"
#include "tls_pbuf.h"
#include "exception.h"
#include "cygxdr.h"
#include "fenv.h"
#include "ntdll.h"
#include "wow64.h"

#define MAX_AT_FILE_LEVEL 10

#define PREMAIN_LEN (sizeof (user_data->premain) / sizeof (user_data->premain[0]))

extern "C" void cygwin_exit (int) __attribute__ ((noreturn));
extern "C" void __sinit (_reent *);

static int NO_COPY envc;
static char NO_COPY **envp;

bool NO_COPY jit_debug;

static void
do_global_dtors ()
{
  void (**pfunc) () = user_data->dtors;
  if (pfunc)
    {
      user_data->dtors = NULL;
      while (*++pfunc)
	(*pfunc) ();
    }
}

static void __stdcall
do_global_ctors (void (**in_pfunc)(), int force)
{
  if (!force && in_forkee)
    return;		// inherit constructed stuff from parent pid

  /* Run ctors backwards, so skip the first entry and find how many
     there are, then run them. */

  void (**pfunc) () = in_pfunc;

  while (*++pfunc)
    ;
  while (--pfunc > in_pfunc)
    (*pfunc) ();
}

/*
 * Replaces @@file in the command line with the contents of the file.
 * There may be multiple @@file's in a single command line
 * A \@@file is replaced with @@file so that echo \@@foo would print
 * @@foo and not the contents of foo.
 */
static bool __stdcall
insert_file (char *name, char *&cmd)
{
  HANDLE f;
  DWORD size;
  tmp_pathbuf tp;

  PWCHAR wname = tp.w_get ();
  sys_mbstowcs (wname, NT_MAX_PATH, name + 1);
  f = CreateFileW (wname,
		   GENERIC_READ,		/* open for reading	*/
		   FILE_SHARE_VALID_FLAGS,      /* share for reading	*/
		   &sec_none_nih,		/* default security	*/
		   OPEN_EXISTING,		/* existing file only	*/
		   FILE_ATTRIBUTE_NORMAL,	/* normal file		*/
		   NULL);			/* no attr. template	*/

  if (f == INVALID_HANDLE_VALUE)
    {
      debug_printf ("couldn't open file '%s', %E", name);
      return false;
    }

  /* This only supports files up to about 4 billion bytes in
     size.  I am making the bold assumption that this is big
     enough for this feature */
  size = GetFileSize (f, NULL);
  if (size == 0xFFFFFFFF)
    {
      CloseHandle (f);
      debug_printf ("couldn't get file size for '%s', %E", name);
      return false;
    }

  int new_size = strlen (cmd) + size + 2;
  char *tmp = (char *) malloc (new_size);
  if (!tmp)
    {
      CloseHandle (f);
      debug_printf ("malloc failed, %E");
      return false;
    }

  /* realloc passed as it should */
  DWORD rf_read;
  BOOL rf_result;
  rf_result = ReadFile (f, tmp, size, &rf_read, NULL);
  CloseHandle (f);
  if (!rf_result || (rf_read != size))
    {
      free (tmp);
      debug_printf ("ReadFile failed, %E");
      return false;
    }

  tmp[size++] = ' ';
  strcpy (tmp + size, cmd);
  cmd = tmp;
  return true;
}

static inline int
isquote (char c)
{
  char ch = c;
  return ch == '"' || ch == '\'';
}

/* Step over a run of characters delimited by quotes */
static /*__inline*/ char *
quoted (char *cmd, int winshell)
{
  char *p;
  char quote = *cmd;

  if (!winshell)
    {
      char *p;
      strcpy (cmd, cmd + 1);
      if (*(p = strchrnul (cmd, quote)))
	strcpy (p, p + 1);
      return p;
    }

  const char *s = quote == '\'' ? "'" : "\\\"";
  /* This must have been run from a Windows shell, so preserve
     quotes for globify to play with later. */
  while (*cmd && *++cmd)
    if ((p = strpbrk (cmd, s)) == NULL)
      {
	cmd = strchr (cmd, '\0');	// no closing quote
	break;
      }
    else if (*p == '\\')
      cmd = ++p;
    else if (quote == '"' && p[1] == '"')
      {
	*p = '\\';
	cmd = ++p;			// a quoted quote
      }
    else
      {
	cmd = p + 1;		// point to after end
	break;
      }
  return cmd;
}

/* Perform a glob on word if it contains wildcard characters.
   Also quote every character between quotes to force glob to
   treat the characters literally. */

/* Either X:[...] or \\server\[...] */
#define is_dos_path(s) (isdrive(s) \
			|| ((s)[0] == '\\' \
			    && (s)[1] == '\\' \
			    && isalpha ((s)[2]) \
			    && strchr ((s) + 3, '\\')))

static int __stdcall
globify (char *word, char **&argv, int &argc, int &argvlen)
{
  if (*word != '~' && strpbrk (word, "?*[\"\'(){}") == NULL)
    return 0;

  int n = 0;
  char *p, *s;
  int dos_spec = is_dos_path (word);
  if (!dos_spec && isquote (*word) && word[1] && word[2])
    dos_spec = is_dos_path (word + 1);

  /* We'll need more space if there are quoting characters in
     word.  If that is the case, doubling the size of the
     string should provide more than enough space. */
  if (strpbrk (word, "'\""))
    n = strlen (word);
  char pattern[strlen (word) + ((dos_spec + 1) * n) + 1];

  /* Fill pattern with characters from word, quoting any
     characters found within quotes. */
  for (p = pattern, s = word; *s != '\000'; s++, p++)
    if (!isquote (*s))
      {
	if (dos_spec && *s == '\\')
	  *p++ = '\\';
	*p = *s;
      }
    else
      {
	char quote = *s;
	while (*++s && *s != quote)
	  {
	    if (dos_spec || *s != '\\')
	      /* nothing */;
	    else if (s[1] == quote || s[1] == '\\')
	      s++;
	    *p++ = '\\';
	    size_t cnt = isascii (*s) ? 1 : mbtowc (NULL, s, MB_CUR_MAX);
	    if (cnt <= 1 || cnt == (size_t)-1)
	      *p++ = *s;
	    else
	      {
		--s;
		while (cnt-- > 0)
		  *p++ = *++s;
	      }
	  }
	if (*s == quote)
	  p--;
	if (*s == '\0')
	    break;
      }

  *p = '\0';

  glob_t gl;
  gl.gl_offs = 0;

  /* Attempt to match the argument.  Return just word (minus quoting) if no match. */
  if (glob (pattern, GLOB_TILDE | GLOB_NOCHECK | GLOB_BRACE | GLOB_QUOTE, NULL, &gl) || !gl.gl_pathc)
    return 0;

  /* Allocate enough space in argv for the matched filenames. */
  n = argc;
  if ((argc += gl.gl_pathc) > argvlen)
    {
      argvlen = argc + 10;
      argv = (char **) realloc (argv, (1 + argvlen) * sizeof (argv[0]));
    }

  /* Copy the matched filenames to argv. */
  char **gv = gl.gl_pathv;
  char **av = argv + n;
  while (*gv)
    {
      debug_printf ("argv[%d] = '%s'", n++, *gv);
      *av++ = *gv++;
    }

  /* Clean up after glob. */
  free (gl.gl_pathv);
  return 1;
}

/* Build argv, argc from string passed from Windows.  */

static void __stdcall
build_argv (char *cmd, char **&argv, int &argc, int winshell)
{
  int argvlen = 0;
  int nesting = 0;		// monitor "nesting" from insert_file

  argc = 0;
  argvlen = 0;
  argv = NULL;

  /* Scan command line until there is nothing left. */
  while (*cmd)
    {
      /* Ignore spaces */
      if (issep (*cmd))
	{
	  cmd++;
	  continue;
	}

      /* Found the beginning of an argument. */
      char *word = cmd;
      char *sawquote = NULL;
      while (*cmd)
	{
	  if (*cmd != '"' && (!winshell || *cmd != '\''))
	    cmd++;		// Skip over this character
	  else
	    /* Skip over characters until the closing quote */
	    {
	      sawquote = cmd;
	      /* Handle quoting.  Only strip off quotes if the parent is
		 a Cygwin process, or if the word starts with a '@@'.
		 In this case, the insert_file function needs an unquoted
		 DOS filename and globbing isn't performed anyway. */
	      cmd = quoted (cmd, winshell && argc > 0 && *word != '@@');
	    }
	  if (issep (*cmd))	// End of argument if space
	    break;
	}
      if (*cmd)
	*cmd++ = '\0';		// Terminate `word'

      /* Possibly look for @@file construction assuming that this isn't
	 the very first argument and the @@ wasn't quoted */
      if (argc && sawquote != word && *word == '@@')
	{
	  if (++nesting > MAX_AT_FILE_LEVEL)
	    api_fatal ("Too many levels of nesting for %s", word);
	  if (insert_file (word, cmd))
	      continue;			// There's new stuff in cmd now
	}

      /* See if we need to allocate more space for argv */
      if (argc >= argvlen)
	{
	  argvlen = argc + 10;
	  argv = (char **) realloc (argv, (1 + argvlen) * sizeof (argv[0]));
	}

      /* Add word to argv file after (optional) wildcard expansion. */
      if (!winshell || !argc || !globify (word, argv, argc, argvlen))
	{
	  debug_printf ("argv[%d] = '%s'", argc, word);
	  argv[argc++] = word;
	}
    }

  if (argv)
    argv[argc] = NULL;

  debug_printf ("argc %d", argc);
}

/* sanity and sync check */
void __stdcall
check_sanity_and_sync (per_process *p)
{
  /* Sanity check to make sure developers didn't change the per_process    */
  /* struct without updating SIZEOF_PER_PROCESS [it makes them think twice */
  /* about changing it].						   */
  if (sizeof (per_process) != SIZEOF_PER_PROCESS)
    api_fatal ("per_process sanity check failed");

  /* Make sure that the app and the dll are in sync. */

  /* Complain if older than last incompatible change */
  if (p->dll_major < CYGWIN_VERSION_DLL_EPOCH)
    api_fatal ("cygwin DLL and APP are out of sync -- DLL version mismatch %u < %u",
	       p->dll_major, CYGWIN_VERSION_DLL_EPOCH);

  /* magic_biscuit != 0 if using the old style version numbering scheme.  */
  if (p->magic_biscuit != SIZEOF_PER_PROCESS)
    api_fatal ("Incompatible cygwin .dll -- incompatible per_process info %u != %u",
	       p->magic_biscuit, SIZEOF_PER_PROCESS);

  /* Complain if incompatible API changes made */
  if (p->api_major > cygwin_version.api_major)
    api_fatal ("cygwin DLL and APP are out of sync -- API version mismatch %u > %u",
	       p->api_major, cygwin_version.api_major);

#ifndef __x86_64__
  /* This is a kludge to work around a version of _cygwin_common_crt0
     which overwrote the cxx_malloc field with the local DLL copy.
     Hilarity ensues if the DLL is not loaded while the process
     is forking. */
  __cygwin_user_data.cxx_malloc = &default_cygwin_cxx_malloc;
#endif
}

child_info NO_COPY *child_proc_info;

#define CYGWIN_GUARD (PAGE_READWRITE | PAGE_GUARD)

void
child_info_fork::alloc_stack_hard_way (volatile char *b)
{
  void *stack_ptr;
  SIZE_T stacksize;

  /* First check if the requested stack area is part of the user heap
     or part of a mmapped region.  If so, we have been started from a
     pthread with an application-provided stack, and the stack has just
     to be used as is. */
  if ((stacktop >= cygheap->user_heap.base
      && stackbottom <= cygheap->user_heap.max)
      || is_mmapped_region ((caddr_t) stacktop, (caddr_t) stackbottom))
    return;
  /* First, try to reserve the entire stack. */
  stacksize = (SIZE_T) stackbottom - (SIZE_T) stackaddr;
  if (!VirtualAlloc (stackaddr, stacksize, MEM_RESERVE, PAGE_NOACCESS))
    {
      PTEB teb = NtCurrentTeb ();
      api_fatal ("fork: can't reserve memory for parent stack "
		 "%p - %p, (child has %p - %p), %E",
		 stackaddr, stackbottom, teb->DeallocationStack, _tlsbase);
    }
  stacksize = (SIZE_T) stackbottom - (SIZE_T) stacktop;
  stack_ptr = VirtualAlloc (stacktop, stacksize, MEM_COMMIT, PAGE_READWRITE);
  if (!stack_ptr)
    abort ("can't commit memory for stack %p(%ly), %E", stacktop, stacksize);
  if (guardsize != (size_t) -1)
    {
      /* Allocate PAGE_GUARD page if it still fits. */
      if (stack_ptr > stackaddr)
	{
	  stack_ptr = (void *) ((LPBYTE) stack_ptr
					- wincap.page_size ());
	  if (!VirtualAlloc (stack_ptr, wincap.page_size (), MEM_COMMIT,
			     CYGWIN_GUARD))
	    api_fatal ("fork: couldn't allocate new stack guard page %p, %E",
		       stack_ptr);
	}
      /* Allocate POSIX guard pages. */
      if (guardsize > 0)
	VirtualAlloc (stackaddr, guardsize, MEM_COMMIT, PAGE_NOACCESS);
    }
  b[0] = '\0';
}

void *getstack (void *) __attribute__ ((noinline));
volatile char *
getstack (volatile char * volatile p)
{
  *p ^= 1;
  *p ^= 1;
  return p - 4096;
}

/* extend the stack prior to fork longjmp */

void
child_info_fork::alloc_stack ()
{
  volatile char * volatile stackp;
#ifdef __x86_64__
  __asm__ volatile ("movq %%rsp,%0": "=r" (stackp));
#else
  __asm__ volatile ("movl %%esp,%0": "=r" (stackp));
#endif
  /* Make sure not to try a hard allocation if we have been forked off from
     the main thread of a Cygwin process which has been started from a 64 bit
     parent.  In that case the _tlsbase of the forked child is not the same
     as the _tlsbase of the parent (== stackbottom), but only because the
     stack of the parent has been slightly rearranged.  See comment in
     wow64_revert_to_original_stack for details. We check here if the
     parent stack fits into the child stack. */
  if (_tlsbase != stackbottom
      && (!wincap.is_wow64 ()
      	  || stacktop < (char *) NtCurrentTeb ()->DeallocationStack
	  || stackbottom > _tlsbase))
    alloc_stack_hard_way (stackp);
  else
    {
      char *st = (char *) stacktop;
      while (_tlstop > st)
	stackp = getstack (stackp);
      stackaddr = 0;
      /* This only affects forked children of a process started from a native
	 64 bit process, but it doesn't hurt to do it unconditionally.  Fix
	 StackBase in the child to be the same as in the parent, so that the
	 computation of _my_tls is correct. */
      _tlsbase = (PVOID) stackbottom;
    }
}

extern "C" void
break_here ()
{
  static int NO_COPY sent_break;
  if (!sent_break++)
    DebugBreak ();
  debug_printf ("break here");
}

static void
initial_env ()
{
  if (GetEnvironmentVariableA ("CYGWIN_TESTING", NULL, 0))
    _cygwin_testing = 1;

#ifdef DEBUGGING
  char buf[NT_MAX_PATH];
  if (GetEnvironmentVariableA ("CYGWIN_DEBUG", buf, sizeof (buf) - 1))
    {
      char buf1[NT_MAX_PATH];
      GetModuleFileName (NULL, buf1, NT_MAX_PATH);
      char *p = strpbrk (buf, ":=");
      if (!p)
	p = (char *) "gdb.exe -nw";
      else
	*p++ = '\0';
      if (strcasestr (buf1, buf))
	{
	  error_start_init (p);
	  jit_debug = true;
	  try_to_debug ();
	  console_printf ("*** Sending Break.  gdb may issue spurious SIGTRAP message.\n");
	  break_here ();
	}
    }
#endif
}

child_info *
get_cygwin_startup_info ()
{
  STARTUPINFO si;

  GetStartupInfo (&si);
  child_info *res = (child_info *) si.lpReserved2;

  if (si.cbReserved2 < EXEC_MAGIC_SIZE || !res
      || res->intro != PROC_MAGIC_GENERIC || res->magic != CHILD_INFO_MAGIC)
    {
      strace.activate (false);
      res = NULL;
    }
  else
    {
      if ((res->intro & OPROC_MAGIC_MASK) == OPROC_MAGIC_GENERIC)
	multiple_cygwin_problem ("proc intro", res->intro, 0);
      else if (res->cygheap != (void *) &_cygheap_start)
	multiple_cygwin_problem ("cygheap base", (uintptr_t) res->cygheap,
				 (uintptr_t) &_cygheap_start);

      unsigned should_be_cb = 0;
      switch (res->type)
	{
	  case _CH_FORK:
	    in_forkee = true;
	    should_be_cb = sizeof (child_info_fork);
	    /* fall through */;
	  case _CH_SPAWN:
	  case _CH_EXEC:
	    if (!should_be_cb)
	      should_be_cb = sizeof (child_info_spawn);
	    if (should_be_cb != res->cb)
	      multiple_cygwin_problem ("proc size", res->cb, should_be_cb);
	    else if (sizeof (fhandler_union) != res->fhandler_union_cb)
	      multiple_cygwin_problem ("fhandler size", res->fhandler_union_cb,
				       sizeof (fhandler_union));
	    if (res->isstraced ())
	      {
		while (!being_debugged ())
		  yield ();
		strace.activate (res->type == _CH_FORK);
	      }
	    break;
	  default:
	    system_printf ("unknown exec type %u", res->type);
	    /* intentionally fall through */
	  case _CH_WHOOPS:
	    res = NULL;
	    break;
	}
    }

  return res;
}

#ifdef __x86_64__
#define dll_data_start &__data_start__
#define dll_data_end &__data_end__
#define dll_bss_start &__bss_start__
#define dll_bss_end &__bss_end__
#else
#define dll_data_start &_data_start__
#define dll_data_end &_data_end__
#define dll_bss_start &_bss_start__
#define dll_bss_end &_bss_end__
#endif

void
child_info_fork::handle_fork ()
{
  cygheap_fixup_in_child (false);
  memory_init ();
  myself.thisproc (NULL);
  myself->uid = cygheap->user.real_uid;
  myself->gid = cygheap->user.real_gid;

  child_copy (parent, false,
	      "dll data", dll_data_start, dll_data_end,
	      "dll bss", dll_bss_start, dll_bss_end,
	      "user heap", cygheap->user_heap.base, cygheap->user_heap.ptr,
	      NULL);

  /* If my_wr_proc_pipe != NULL then it's a leftover handle from a previously
     forked process.  Close it now or suffer confusion with the parent of our
     parent.  */
  if (my_wr_proc_pipe)
    ForceCloseHandle1 (my_wr_proc_pipe, wr_proc_pipe);

  /* Setup our write end of the process pipe.  Clear the one in the structure.
     The destructor should never be called for this but, it can't hurt to be
     safe. */
  my_wr_proc_pipe = wr_proc_pipe;
  rd_proc_pipe = wr_proc_pipe = NULL;
  /* Do the relocations here.  These will actually likely be overwritten by the
     below child_copy but we do them here in case there is a read-only section
     which does not get copied by fork. */
  _pei386_runtime_relocator (user_data);

  /* step 2 now that the dll has its heap filled in, we can fill in the
     user's data and bss since user_data is now filled out. */
  child_copy (parent, false,
	      "data", user_data->data_start, user_data->data_end,
	      "bss", user_data->bss_start, user_data->bss_end,
	      NULL);

  if (fixup_mmaps_after_fork (parent))
    api_fatal ("recreate_mmaps_after_fork_failed");
}

bool
child_info_spawn::get_parent_handle ()
{
  parent = OpenProcess (PROCESS_VM_READ, false, parent_winpid);
  moreinfo->myself_pinfo = NULL;
  return !!parent;
}

void
child_info_spawn::handle_spawn ()
{
  extern void fixup_lockf_after_exec (bool);
  HANDLE h;
  if (!dynamically_loaded || get_parent_handle ())
      {
	cygheap_fixup_in_child (true);
	memory_init ();
      }
  if (!moreinfo->myself_pinfo ||
      !DuplicateHandle (GetCurrentProcess (), moreinfo->myself_pinfo,
			GetCurrentProcess (), &h, 0,
			FALSE, DUPLICATE_SAME_ACCESS | DUPLICATE_CLOSE_SOURCE))
    h = NULL;

  /* Setup our write end of the process pipe.  Clear the one in the structure.
     The destructor should never be called for this but, it can't hurt to be
     safe. */
  my_wr_proc_pipe = wr_proc_pipe;
  rd_proc_pipe = wr_proc_pipe = NULL;

  myself.thisproc (h);
  __argc = moreinfo->argc;
  __argv = moreinfo->argv;
  envp = moreinfo->envp;
  envc = moreinfo->envc;
  if (!dynamically_loaded)
    cygheap->fdtab.fixup_after_exec ();
  if (__stdin >= 0)
    cygheap->fdtab.move_fd (__stdin, 0);
  if (__stdout >= 0)
    cygheap->fdtab.move_fd (__stdout, 1);
  cygheap->user.groups.clear_supp ();

  /* If we're execing we may have "inherited" a list of children forked by the
     previous process executing under this pid.  Reattach them here so that we
     can wait for them.  */
  if (type == _CH_EXEC)
    reattach_children ();

  ready (true);

  /* Keep pointer to parent open if we've execed so that pid will not be reused.
     Otherwise, we no longer need this handle so close it.
     Need to do this after debug_fixup_after_fork_exec or DEBUGGING handling of
     handles might get confused. */
  if (type != _CH_EXEC && child_proc_info->parent)
    {
      CloseHandle (child_proc_info->parent);
      child_proc_info->parent = NULL;
    }

  signal_fixup_after_exec ();
  fixup_lockf_after_exec (type == _CH_EXEC);
}

/* Retrieve and store system directory for later use.  Note that the
   directory is stored with a trailing backslash! */
static void
init_windows_system_directory ()
{
  if (!windows_system_directory_length)
    {
      windows_system_directory_length =
	    GetSystemDirectoryW (windows_system_directory, MAX_PATH);
      if (windows_system_directory_length == 0)
	api_fatal ("can't find windows system directory");
      windows_system_directory[windows_system_directory_length++] = L'\\';
      windows_system_directory[windows_system_directory_length] = L'\0';
#ifndef __x86_64__
      system_wow64_directory_length =
	GetSystemWow64DirectoryW (system_wow64_directory, MAX_PATH);
      if (system_wow64_directory_length)
	{
	  system_wow64_directory[system_wow64_directory_length++] = L'\\';
	  system_wow64_directory[system_wow64_directory_length] = L'\0';
	}
#endif /* !__x86_64__ */
    }
}

void
dll_crt0_0 ()
{
  wincap.init ();
  child_proc_info = get_cygwin_startup_info ();
  init_windows_system_directory ();
  initial_env ();

  SetErrorMode (SEM_FAILCRITICALERRORS | SEM_NOGPFAULTERRORBOX);

  lock_process::init ();
  _impure_ptr = _GLOBAL_REENT;
  _impure_ptr->_stdin = &_impure_ptr->__sf[0];
  _impure_ptr->_stdout = &_impure_ptr->__sf[1];
  _impure_ptr->_stderr = &_impure_ptr->__sf[2];
  _impure_ptr->_current_locale = "C";
  user_data->impure_ptr = _impure_ptr;
  user_data->impure_ptr_ptr = &_impure_ptr;

  DuplicateHandle (GetCurrentProcess (), GetCurrentThread (),
		   GetCurrentProcess (), &hMainThread,
		   0, false, DUPLICATE_SAME_ACCESS);

  NtOpenProcessToken (NtCurrentProcess (), MAXIMUM_ALLOWED, &hProcToken);
  set_cygwin_privileges (hProcToken);

  device::init ();
  do_global_ctors (&__CTOR_LIST__, 1);
  cygthread::init ();

  if (!child_proc_info)
    {
      setup_cygheap ();
      memory_init ();
#ifndef __x86_64__
      /* WOW64 process on XP/64 or Server 2003/64?  Check if we have been
	 started from 64 bit process and if our stack is at an unusual
	 address.  Set wow64_needs_stack_adjustment if so.  Problem
	 description in wow64_test_for_64bit_parent. */
      if (wincap.wow64_has_secondary_stack ())
	wow64_needs_stack_adjustment = wow64_test_for_64bit_parent ();
#endif /* !__x86_64__ */
    }
  else
    {
      cygwin_user_h = child_proc_info->user_h;
      switch (child_proc_info->type)
	{
	case _CH_FORK:
	  fork_info->handle_fork ();
	  break;
	case _CH_SPAWN:
	case _CH_EXEC:
	  spawn_info->handle_spawn ();
	  break;
	}
    }

  user_data->threadinterface->Init ();

  _main_tls = &_my_tls;

  /* Initialize signal processing here, early, in the hopes that the creation
     of a thread early in the process will cause more predictability in memory
     layout for the main thread. */
  if (!dynamically_loaded)
    sigproc_init ();

  debug_printf ("finished dll_crt0_0 initialization");
}

static inline void
main_thread_sinit ()
{
  __sinit (_impure_ptr);
  /* At this point, _impure_ptr == _global_impure_ptr == _GLOBAL_REENT is
     initialized, but _REENT == _my_tls.local_clib doesn't know about it.
     It has been copied over from _GLOBAL_REENT in _cygtls::init_thread
     *before* the initialization took place.

     As soon as the main thread calls a stdio function, this would be
     rectified.  But if another thread calls a stdio function on
     stdin/out/err before the main thread does, all the required
     initialization of stdin/out/err will be done, but _REENT->__sdidinit
     is *still* 0.  This in turn will result in a call to __sinit in the
     wrong spot.  The input or output buffer will be NULLed and nothing is
     read or written in the first stdio function call in the main thread.

     To fix this issue we have to copy over the relevant part of _GLOBAL_REENT
     to _REENT here again. */
  _REENT->__sdidinit = -1;
  _REENT->__cleanup = _GLOBAL_REENT->__cleanup;
}

/* Take over from libc's crt0.o and start the application. Note the
   various special cases when Cygwin DLL is being runtime loaded (as
   opposed to being link-time loaded by Cygwin apps) from a non
   cygwin app via LoadLibrary.  */
void
dll_crt0_1 (void *)
{
  extern void initial_setlocale ();

  _my_tls.incyg++;
  /* Inherit "parent" exec'ed process sigmask */
  if (spawn_info && !in_forkee)
    _my_tls.sigmask = spawn_info->moreinfo->sigmask;

  if (dynamically_loaded)
    sigproc_init ();

  check_sanity_and_sync (user_data);

  /* Initialize malloc and then call user_shared_initialize since it relies
     on a functioning malloc and it's possible that the user's program may
     have overridden malloc.  We only know about that at this stage,
     unfortunately. */
  malloc_init ();
  user_shared->initialize ();

#ifdef CYGHEAP_DEBUG
  int i = 0;
  const int n = 2 * 1024 * 1024;
  while (i--)
    {
      void *p = cmalloc (HEAP_STR, n);
      if (p)
	small_printf ("cmalloc returns %p\n", cmalloc (HEAP_STR, n));
      else
	{
	  small_printf ("total allocated %y\n", (i - 1) * n);
	  break;
	}
    }
#endif

  ProtectHandle (hMainThread);

  cygheap->cwd.init ();

  /* Initialize pthread mainthread when not forked and it is safe to call new,
     otherwise it is reinitalized in fixup_after_fork */
  if (!in_forkee)
    {
      pthread::init_mainthread ();
      _pei386_runtime_relocator (user_data);
    }

#ifdef DEBUGGING
  strace.microseconds ();
#endif

  /* Initialize debug muto, if DLL is built with --enable-debugging.
     Need to do this before any helper threads start. */
  debug_init ();

#ifdef NEWVFORK
  cygheap->fdtab.vfork_child_fixup ();
  main_vfork = vfork_storage.create ();
#endif

  cygbench ("pre-forkee");
  if (in_forkee)
    {
      /* If we've played with the stack, stacksize != 0.  That means that
	 fork() was invoked from other than the main thread.  Make sure that
	 frame pointer is referencing the new stack so that the OS knows what
	 to do when it needs to increase the size of the stack.

	 NOTE: Don't do anything that involves the stack until you've completed
	 this step. */
      if (fork_info->stackaddr)
	{
	  _tlsbase = (PVOID) fork_info->stackbottom;
	  _tlstop = (PVOID) fork_info->stacktop;
	}

      /* Not resetting _my_tls.incyg here because presumably fork will overwrite
	 it with the value of the forker and all will be good.   */
      longjmp (fork_info->jmp, true);
    }

  main_thread_sinit ();

#ifdef DEBUGGING
  {
  extern void fork_init ();
  fork_init ();
  }
#endif
  pinfo_init (envp, envc);
  strace.dll_info ();

  /* Allocate cygheap->fdtab */
  dtable_init ();

  /* Set internal locale to the environment settings. */
  initial_setlocale ();

  uinfo_init ();	/* initialize user info */

  /* Connect to tty. */
  tty::init_session ();

  if (!__argc)
    {
      PWCHAR wline = GetCommandLineW ();
      size_t size = sys_wcstombs (NULL, 0, wline);
      char *line = (char *) alloca (size);
      sys_wcstombs (line, size, wline);

      /* Scan the command line and build argv.  Expand wildcards if not
	 called from another cygwin process. */
      build_argv (line, __argv, __argc,
		  NOTSTATE (myself, PID_CYGPARENT) && allow_glob);

      /* Convert argv[0] to posix rules if it's currently blatantly
	 win32 style. */
      if ((strchr (__argv[0], ':')) || (strchr (__argv[0], '\\')))
	{
	  char *new_argv0 = (char *) malloc (NT_MAX_PATH);
	  cygwin_conv_path (CCP_WIN_A_TO_POSIX | CCP_RELATIVE, __argv[0],
			    new_argv0, NT_MAX_PATH);
	  __argv[0] = (char *) realloc (new_argv0, strlen (new_argv0) + 1);
	}
    }

  __argc_safe = __argc;
  if (user_data->premain[0])
    for (unsigned int i = 0; i < PREMAIN_LEN / 2; i++)
      user_data->premain[i] (__argc, __argv, user_data);

  /* Set up standard fds in file descriptor table. */
  cygheap->fdtab.stdio_init ();

  /* Set up __progname for getopt error call. */
  if (__argv[0] && (__progname = strrchr (__argv[0], '/')))
    ++__progname;
  else
    __progname = __argv[0];
  program_invocation_name = __argv[0];
  program_invocation_short_name = __progname;
  if (__progname)
    {
      char *cp = strchr (__progname, '\0') - 4;
      if (cp > __progname && ascii_strcasematch (cp, ".exe"))
	*cp = '\0';
    }

  (void) xdr_set_vprintf (&cygxdr_vwarnx);
  cygwin_finished_initializing = true;
  /* Call init of loaded dlls. */
  dlls.init ();

  /* Execute any specified "premain" functions */
  if (user_data->premain[PREMAIN_LEN / 2])
    for (unsigned int i = PREMAIN_LEN / 2; i < PREMAIN_LEN; i++)
      user_data->premain[i] (__argc, __argv, user_data);

  set_errno (0);

  if (dynamically_loaded)
    {
      _setlocale_r (_REENT, LC_CTYPE, "C");
      return;
    }

  /* Disable case-insensitive globbing */
  ignore_case_with_glob = false;

  MALLOC_CHECK;
  cygbench (__progname);

  ld_preload ();
  /* Per POSIX set the default application locale back to "C". */
  _setlocale_r (_REENT, LC_CTYPE, "C");

  if (!user_data->main)
    {
      /* Handle any signals which may have arrived */
      _my_tls.call_signal_handler ();
      _my_tls.incyg--;	/* Not in Cygwin anymore */
    }
  else
    {
      /* Create a copy of Cygwin's version of __argv so that, if the user makes
	 a change to an element of argv[] it does not affect Cygwin's argv.
	 Changing the the contents of what argv[n] points to will still
	 affect Cygwin.  This is similar (but not exactly like) Linux. */
      char *newargv[__argc + 1];
      char **nav = newargv;
      char **oav = __argv;
      while ((*nav++ = *oav++) != NULL)
	continue;
      /* Handle any signals which may have arrived */
      sig_dispatch_pending (false);
      _my_tls.call_signal_handler ();
      _my_tls.incyg--;	/* Not in Cygwin anymore */
#ifdef __x86_64__
      cygwin_exit (user_data->main (__argc, newargv, __cygwin_environ));
#else
      cygwin_exit (user_data->main (__argc, newargv, *user_data->envptr));
#endif
    }
  __asm__ ("				\n\
	.global _cygwin_exit_return	\n\
	.global __cygwin_exit_return	\n\
_cygwin_exit_return:			\n\
__cygwin_exit_return:			\n\
		nop			\n\
");
}

extern "C" void __stdcall
_dll_crt0 ()
{
#ifndef __x86_64__
  /* Handle WOW64 process on XP/2K3 which has been started from native 64 bit
     process.  See comment in wow64_test_for_64bit_parent for a full problem
     description. */
  if (wow64_needs_stack_adjustment && !dynamically_loaded)
    {
      /* Must be static since it's referenced after the stack and frame
	 pointer registers have been changed. */
      static PVOID allocationbase = 0;

      /* Check if we just move the stack.  If so, wow64_revert_to_original_stack
	 returns a non-NULL, 16 byte aligned address.  See comments in
	 wow64_revert_to_original_stack for the gory details. */
      PVOID stackaddr = wow64_revert_to_original_stack (allocationbase);
      if (stackaddr)
      	{
	  /* 2nd half of the stack move.  Set stack pointer to new address.
	     Set frame pointer to 0. */
	  __asm__ ("\n\
		   movl  %[ADDR], %%esp \n\
		   xorl  %%ebp, %%ebp   \n"
		   : : [ADDR] "r" (stackaddr));
	  /* Now we're back on the original stack.  Free up space taken by the
	     former main thread stack and set DeallocationStack correctly. */
	  VirtualFree (NtCurrentTeb ()->DeallocationStack, 0, MEM_RELEASE);
	  NtCurrentTeb ()->DeallocationStack = allocationbase;
	}
      else
	/* Fall back to respawn if wow64_revert_to_original_stack fails. */
	wow64_respawn_process ();
    }
#endif /* !__x86_64__ */
  _feinitialise ();
#ifndef __x86_64__
  main_environ = user_data->envptr;
#endif
  if (in_forkee)
    {
      fork_info->alloc_stack ();
      _main_tls = &_my_tls;
    }

  _main_tls->call ((DWORD (*) (void *, void *)) dll_crt0_1, NULL);
}

void
dll_crt0 (per_process *uptr)
{
  /* Set the local copy of the pointer into the user space. */
  if (!in_forkee && uptr && uptr != user_data)
    {
      memcpy (user_data, uptr, per_process_overwrite);
      *(user_data->impure_ptr_ptr) = _GLOBAL_REENT;
    }
  _dll_crt0 ();
}

/* This must be called by anyone who uses LoadLibrary to load cygwin1.dll.
   You must have CYGTLS_PADSIZE bytes reserved at the bottom of the stack
   calling this function, and that storage must not be overwritten until you
   unload cygwin1.dll, as it is used for _my_tls.  It is best to load
   cygwin1.dll before spawning any additional threads in your process.

   See winsup/testsuite/cygload for an example of how to use cygwin1.dll
   from MSVC and non-cygwin MinGW applications.  */
extern "C" void
cygwin_dll_init ()
{
#ifndef __x86_64__
  static char **envp;
#endif
  static int _fmode;

  user_data->magic_biscuit = sizeof (per_process);

#ifndef __x86_64__
  user_data->envptr = &envp;
#endif
  user_data->fmode_ptr = &_fmode;

  _dll_crt0 ();
}

extern "C" void
__main (void)
{
  /* Ordering is critical here.  DLL ctors have already been
     run as they were being loaded, so we should stack the
     queued call to DLL dtors now.  */
  atexit (dll_global_dtors);
  do_global_ctors (user_data->ctors, false);
  /* Now we have run global ctors, register their dtors.

     At exit, global dtors will run first, so the app can still
     use shared library functions while terminating; then the
     DLLs will be destroyed; finally newlib will shut down stdio
     and terminate itself.  */
  atexit (do_global_dtors);
  sig_dispatch_pending (true);
}

void __reg1
do_exit (int status)
{
  syscall_printf ("do_exit (%d), exit_state %d", status, exit_state);

#ifdef NEWVFORK
  vfork_save *vf = vfork_storage.val ();
  if (vf != NULL && vf->pid < 0)
    {
      exit_state = ES_NOT_EXITING;
      vf->restore_exit (status);
    }
#endif

  lock_process until_exit (true);

  if (exit_state < ES_EVENTS_TERMINATE)
    exit_state = ES_EVENTS_TERMINATE;

  if (exit_state < ES_SIGNAL)
    {
      exit_state = ES_SIGNAL;
      signal (SIGCHLD, SIG_IGN);
      signal (SIGHUP, SIG_IGN);
      signal (SIGINT, SIG_IGN);
      signal (SIGQUIT, SIG_IGN);
    }

  if (exit_state < ES_CLOSEALL)
    {
      exit_state = ES_CLOSEALL;
      close_all_files ();
    }

  UINT n = (UINT) status;
  if (exit_state < ES_THREADTERM)
    {
      exit_state = ES_THREADTERM;
      cygthread::terminate ();
    }

  myself->stopsig = 0;

  if (exit_state < ES_HUP_PGRP)
    {
      exit_state = ES_HUP_PGRP;
      /* Kill orphaned children on group leader exit */
      if (myself->has_pgid_children && myself->pid == myself->pgid)
	{
	  siginfo_t si = {0};
	  si.si_signo = -SIGHUP;
	  si.si_code = SI_KERNEL;
	  sigproc_printf ("%u == pgrp %u, send SIG{HUP,CONT} to stopped children",
			  myself->pid, myself->pgid);
	  kill_pgrp (myself->pgid, si);
	}
    }

  if (exit_state < ES_HUP_SID)
    {
      exit_state = ES_HUP_SID;
      /* Kill the foreground process group on session leader exit */
      if (getpgrp () > 0 && myself->pid == myself->sid && real_tty_attached (myself))
	{
	  tty *tp = cygwin_shared->tty[myself->ctty];
	  sigproc_printf ("%u == sid %u, send SIGHUP to children",
			  myself->pid, myself->sid);

	/* CGF FIXME: This can't be right. */
	  if (tp->getsid () == myself->sid)
	    tp->kill_pgrp (SIGHUP);
	}

    }

  myself.exit (n);
}

/* When introducing support for -fuse-cxa-atexit with Cygwin 1.7.32 and
   GCC 4.8.3-3, we defined __dso_value as &ImageBase.  This supposedly allowed
   a reproducible value which could also be easily evaluated in cygwin_atexit.
   However, when building C++ applications with -fuse-cxa-atexit, G++ creates
   calls to __cxa_atexit using the *address* of __dso_handle as DSO handle.
   
   So what we do here is this:  A call to __cxa_atexit from the application
   actually calls cygwin__cxa_atexit.  From dso_handle (which is either
   &__dso_handle, or __dso_handle == ImageBase or NULL) we fetch the dll
   structure of the DLL.  Then use dll::handle == ImageBase as the actual DSO
   handle value in calls to __cxa_atexit and __cxa_finalize.
   Thus, __cxa_atexit becomes entirely independent of the incoming value of
   dso_handle, as long as it's *some* pointer into the DSO's address space. */
extern "C" int
cygwin__cxa_atexit (void (*fn)(void *), void *obj, void *dso_handle)
{
  dll *d = dso_handle ? dlls.find (dso_handle) : NULL;
  return __cxa_atexit (fn, obj, d ? d->handle : NULL);
}

/* This function is only called for applications built with Cygwin versions
   up to API 0.279.  Starting with API 0.280 (Cygwin 1.7.33/1.8.6-2), atexit
   is a statically linked function inside of libcygwin.a.  The reason is that
   the old method to fetch the caller return address is unreliable given GCCs
   ability to perform tail call elimination.  For the details, see the below
   comment.  The atexit replacement is defined in libcygwin.a to allow reliable
   access to the correct DSO handle. */
extern "C" int
cygwin_atexit (void (*fn) (void))
{
  int res;

  dll *d = dlls.find ((void *) _my_tls.retaddr ());
#ifdef __x86_64__
  /* x86_64 DLLs created with GCC 4.8.3-3 register __gcc_deregister_frame
     as atexit function using a call to atexit, rather than __cxa_atexit.
     Due to GCC's tail call optimizing, cygwin_atexit doesn't get the correct
     return address on the stack.  As a result it fails to get the HMODULE of
     the caller and thus calls atexit rather than __cxa_atexit.  Then, if the
     module gets dlclosed, __cxa_finalize (called from dll_list::detach) can't
     remove __gcc_deregister_frame from the atexit function chain.  So at
     process exit, __call_exitprocs calls __gcc_deregister_frame while the
     module is already unloaded and the __gcc_deregister_frame function not
     available ==> SEGV.

     This also occurs for other functions.

     Workaround: If dlls.find fails, try to find the dll entry of the DLL
     containing fn.  If that works, proceed by calling __cxa_atexit, otherwise
     call atexit.
     
     This *should* be sufficiently safe.  Ultimately, new applications will
     use the statically linked atexit function though, as outlined above. */
  if (!d)
    d = dlls.find ((void *) fn);
#endif
  res = d ? __cxa_atexit ((void (*) (void *)) fn, NULL, d->handle) : atexit (fn);
  return res;
}

extern "C" void
cygwin_exit (int n)
{
  exit_state = ES_EXIT_STARTING;
  exit (n);
}

extern "C" void
_exit (int n)
{
  do_exit (((DWORD) n & 0xff) << 8);
}

extern "C" void cygwin_stackdump ();

extern "C" void
vapi_fatal (const char *fmt, va_list ap)
{
  char buf[4096];
  int n = __small_sprintf (buf, "%P: *** fatal error %s- ", in_forkee ? "in forked process " : "");
  __small_vsprintf (buf + n, fmt, ap);
  va_end (ap);
  strace.prntf (_STRACE_SYSTEM, NULL, "%s", buf);

#ifdef DEBUGGING
  try_to_debug ();
#endif
  cygwin_stackdump ();
  myself.exit (__api_fatal_exit_val);
}

extern "C" void
api_fatal (const char *fmt, ...)
{
  va_list ap;

  va_start (ap, fmt);
  vapi_fatal (fmt, ap);
}

void
multiple_cygwin_problem (const char *what, uintptr_t magic_version, uintptr_t version)
{
  if (_cygwin_testing && (strstr (what, "proc") || strstr (what, "cygheap")))
    {
      child_proc_info->type = _CH_WHOOPS;
      return;
    }

  if (GetEnvironmentVariableA ("CYGWIN_MISMATCH_OK", NULL, 0))
    return;

  if (CYGWIN_VERSION_MAGIC_VERSION (magic_version) == version)
    system_printf ("%s magic number mismatch detected - %p/%ly", what, magic_version, version);
  else
    api_fatal ("%s mismatch detected - %ly/%ly.\n\
This problem is probably due to using incompatible versions of the cygwin DLL.\n\
Search for cygwin1.dll using the Windows Start->Find/Search facility\n\
and delete all but the most recent version.  The most recent version *should*\n\
reside in x:\\cygwin\\bin, where 'x' is the drive on which you have\n\
installed the cygwin distribution.  Rebooting is also suggested if you\n\
are unable to find another cygwin DLL.",
	       what, magic_version, version);
}

#ifdef DEBUGGING
void __reg1
cygbench (const char *s)
{
  if (GetEnvironmentVariableA ("CYGWIN_BENCH", NULL, 0))
    small_printf ("%05u ***** %s : %10d\n", GetCurrentProcessId (), s, strace.microseconds ());
}
#endif
@


1.465
log
@	* dcrt0.cc (cygwin_atexit): Change preceeding comment to reflect
	API version numbers.
	* external.cc (cygwin_internal): disable setting cxx_malloc on 64 bit.
	Add CW_FIXED_ATEXIT case.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
	* include/sys/cygwin.h (cygwin_getinfo_types): Add CW_FIXED_ATEXIT.
	* lib/atexit.c (atexit): Test running Cygwin version by checking
	return value of cygwin_internal (CW_FIXED_ATEXIT).
@
text
@d1242 6
a1247 3
   actually calls cygwin__cxa_atexit.  From the dso_handle value we fetch the
   ImageBase address, which is then used as the actual DSO handle value in
   calls to __cxa_atexit and __cxa_finalize. */
d1251 2
a1252 3
  if (dso_handle)
    dso_handle = *(void **) dso_handle;
  return __cxa_atexit (fn, obj, dso_handle);
@


1.464
log
@	* Makefile.in (NEW_FUNCTIONS): Add atexit to be not exported.
	* lib/atexit.c (atexit): New, statically linkable version of atexit.
	* dcrt0.cc (cygwin_atexit): Add comment to mark this function as old
	entry point.  Indiscriminately check for DSO of function pointer for
	all functions, if checking for DSO of return address fails on x86_64.
	Change comment accordingly.
@
text
@d1254 6
a1259 6
   up to 1.7.32.  Starting with 1.7.33, atexit is a statically linked function
   inside of libcygwin.a.  The reason is that the old method to fetch the
   caller return address is unreliable given GCCs ability to perform tail call
   elimination.  For the details, see the below comment.
   The atexit replacement is defined in libcygwin.a to allow reliable access
   to the correct DSO handle. */
@


1.463
log
@	* common.din (__cxa_atexit): Define as cygwin__cxa_atexit.
	* dcrt0.cc (cygwin__cxa_atexit): New function.  Explain what we do.
@
text
@d1253 7
d1269 1
a1269 1
     Due to GCC's aggressive optimizing, cygwin_atexit doesn't get the correct
d1278 10
a1287 16
     Workaround: If dlls.find fails, and _my_tls.retaddr is a Cygwin function
     address, and fn is a function address in another DLL, try to find the
     dll entry of the DLL containing fn.  Then check if fn is the address of
     the DLLs __gcc_deregister_frame function.  If so, proceed by calling
     __cxa_atexit, otherwise call atexit. */
  extern void *__image_base__;
  if (!d
      && (uintptr_t) _my_tls.retaddr () >= (uintptr_t) &__image_base__
      && (uintptr_t) _my_tls.retaddr () <= (uintptr_t) &_cygheap_start
      && (uintptr_t) fn > (uintptr_t) &_cygheap_start)
    {
      d = dlls.find ((void *) fn);
      if (d && (void *) GetProcAddress (d->handle, "__gcc_deregister_frame")
	       != fn)
	d = NULL;
    }
@


1.462
log
@	* dcrt0.cc (cygwin_atexit): Add workaround for broken atexit calls
	in __gcc_register_frame of DLLs built with gcc-4.8.3-3.
@
text
@d1235 18
@


1.461
log
@	* cygheap.cc (cygheap_fixup_in_child): Call set_dll_dir.
	(init_cygheap::init_installation_root): Just memmove contents of
	installation_root instead of calling GetModuleFileNameW again.
	Copy installation_root to installation_dir before stripping of
	"bin" dir.  Don't call SetDllDirectory here.  Explain what we do.
	(setup_cygheap): New function taking over initial cygheap setup
	from memory_init.  Additionally call set_dll_dir.
	* cygheap.h (struct init_cygheap): Add installation_dir member.
	(init_cygheap::set_dll_dir): Define.
	(setup_cygheap): Declare.
	* dcrt0.cc: Throughout drop parameter from memory_init call.
	(dll_crt0_0): Call setup_cygheap prior to memory_init.
	* dlfcn.cc (dlopen): Change comment to point to the right function.
	* shared.cc (memory_init): Drop parameter.  Drop cygheap setup.
	* shared_info.h (memory_init): Change declaration accordingly.
@
text
@d1239 1
d1241 29
@


1.460
log
@	* dlfcn.cc (dlopen): Disable old 32 bit code on 64 bit.
	* dcrt0.cc (check_sanity_and_sync): Ditto.
	* dll_init.cc (dll_dllcrt0_1): Fix typo in comment.
@
text
@d612 1
a612 1
  memory_init (false);
d666 1
a666 1
	memory_init (false);
d772 2
a773 1
      memory_init (true);
@


1.459
log
@	* Throughout, use __try/__except/__endtry blocks, rather than myfault
	handler.
	* cygtls.cc (_cygtls::remove): Accommodate the fact that pathbufs
	has been moved from _local_storage to _cygtls.
	* cygtls.h (class tls_pathbuf): Add comment to hint to gendef usage
	of counters.  Change type of counters to uint32_t for clarity.
	Remove _cygtls as friend class.
	(struct _local_storage): Move pathbufs from here...
	(struct _cygtls): ...to here, allowing to access it from _sigbe.
	(class san): Only define on 32 bit.  Remove errno, _c_cnt and _w_cnt
	members.
	(san::setup): Drop parameter.  Don't initialize removed members.
	(san::leave): Don't set removed members.
	(class myfault): Only define on 32 bit.
	(myfault::faulted): Only keep implementation not taking any parameter.
	Drop argument in call to sebastian.setup.
	(__try/__leave/__except/__endtry): Implement to support real SEH.  For
	now stick to SJLJ on 32 bit.
	* dcrt0.cc (dll_crt0_0): Drop 64 bit call to
	exception::install_myfault_handler.
	* exception.h (exception_handler): Define with EXCEPTION_DISPOSITION
	as return type.
	(PDISPATCHER_CONTEXT): Define as void * on 32 bit.  Define as pointer
	to _DISPATCHER_CONTEXT on 64 bit.
	(class exception): Define separately for 32 and 64 bit.
	(exception::myfault): Add handler for myfault SEH handling on 64 bit.
	(exception::exception): Fix mangled method name to account for change
	in type of last parameter.
	(exception::install_myfault_handler): Remove.
	* exceptions.cc (exception::myfault_handle): Remove.
	(exception::myfault): New SEH handler for 64 bit.
	* gendef (_sigbe): Set tls_pathbuf counters to 0 explicitely when
	returning to the caller.
	* ntdll.h: Move a comment to a better place.
	(struct _SCOPE_TABLE): Define on 64 bit.
	* thread.cc (verifyable_object_isvalid): Remove gcc 4.7 workaround.
	* tls_pbuf.cc (tls_pbuf): Fix to accommodate new place of pathbufs.
	(tls_pathbuf::destroy): Change type of loop variables to uint32_t.
	* tls_pbuf.h (class tmp_pathbuf): Change type of buffer counters to
	uint32_t.  Accommodate new place of pathbufs.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Regenerate.
@
text
@d396 1
d402 1
@


1.458
log
@	* autoload.cc: Replace WNet[...]A with WNet[...]W imports.
	* dcrt0.cc (initial_env): Drop strlwr calls.  Call strcasestr instead.
	* fhandler_netdrive.cc: Throughout, convert to calling WNet UNICODE
	functions.  Use tmp_pathbuf rather than alloca.  Replace call to
	strlwr with call to RtlDowncaseUnicodeString.
@
text
@a798 4
#ifdef __x86_64__
  exception::install_myfault_handler ();
#endif

@


1.457
log
@* common.din (__cxa_finalize): Export.
* dcrt0.cc (cygwin_atexit): Use d->handle with __cxa_atexit.
* dll_init.cc (dll_list::detach): Use d->handle with __cxa_finalize.
* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Use 274 for
__cxa_finalize as well.
@
text
@a519 2
      strlwr (buf1);
      strlwr (buf);
d525 1
a525 1
      if (strstr (buf1, buf))
@


1.456
log
@	* dcrt0.cc (insert_file): Fix resource leaks (CIDs 59987, 59988).
@
text
@d4 1
a4 1
   2007, 2008, 2009, 2010, 2011, 2012, 2013 Red Hat, Inc.
d1243 1
a1243 1
  res = d ? __cxa_atexit ((void (*) (void *)) fn, NULL, d) : atexit (fn);
@


1.455
log
@	* dcrt0.cc (dll_crt0_0): Install myfault exception handler on x86_64.
	* exception.h (exception_list): Typedef as void on x86_64.
	(exception::handler_installed): Remove.
	(exception::handle_while_being_debugged): Remove.
	(exception::myfault_handle): Declare for x86_64.
	(exception::handle): Declare as ordinary exception handler on x86_64
	as well.
	(exception::exception): Drop previous code (again).  Install
	exception::handle as SEH handler.
	(exception::install_myfault_handler): New x86_64-only method to
	install exception::myfault_handle as VEH handler.  Explain why.
	(exception::~exception): For x86_64, define frame end label (again).
	* exceptions.cc (CYG_EXC_CONTINUE_EXECUTION): Drop definition.
	(CYG_EXC_CONTINUE_SEARCH): Ditto.
	(exception::myfault_handle): New x86_64-only method, VEH handler to
	handle myfault exceptions.
	(exception::handle): Define as ordinary exception handler on x86_64
	as well.  Use ExceptionContinueExecution and ExceptionContinueSearch
	throughout instead of deleted Cygwin macros.  Don't handle myfault
	exceptions on x86_64.
@
text
@d118 1
d127 1
d139 1
@


1.454
log
@	* dcrt0.cc (dll_crt0_1): Call initial_setlocale before fetching
	current user information.
@
text
@d798 4
@


1.453
log
@	* dcrt0.cc (child_info_spawn::handle_spawn): Call fixup_lockf_after_exec
	with additional argument to specify if the process has been execed
	or spawned.
	* flock.cc (fixup_lockf_after_exec): Take bool parameter to handle
	exec and spawn differently.  In case of spawn, just give up POSIX
	locks in favor of the still running parent.  Add comments to explain.
@
text
@d932 3
a939 3
  /* Set internal locale to the environment settings. */
  initial_setlocale ();

@


1.452
log
@* dcrt0.cc (dll_crt0_1): Remove NtSetTimerResolution.
* pinfo.cc (pinfo::init): Increase wait interval when waiting for procinfo to
stabilize.
@
text
@d658 1
a658 1
  extern void fixup_lockf_after_exec ();
d709 1
a709 1
  fixup_lockf_after_exec ();
@


1.452.2.1
log
@* dcrt0.cc (child_info_spawn::handle_spawn): Call fixup_lockf_after_exec with
additional argument to specify if the process has been execed or spawned.
* flock.cc (fixup_lockf_after_exec): Take bool parameter to handle exec and
spawn differently.  In case of spawn, just give up POSIX locks in favor of the
still running parent.  Add comments to explain.
@
text
@d658 1
a658 1
  extern void fixup_lockf_after_exec (bool);
d709 1
a709 1
  fixup_lockf_after_exec (type == _CH_EXEC);
@


1.452.2.2
log
@	* dcrt0.cc (dll_crt0_0): Install myfault exception handler on x86_64.
	* exception.h (exception_list): Typedef as void on x86_64.
	(exception::handler_installed): Remove.
	(exception::handle_while_being_debugged): Remove.
	(exception::myfault_handle): Declare for x86_64.
	(exception::handle): Declare as ordinary exception handler on x86_64
	as well.
	(exception::exception): Drop previous code (again).  Install
	exception::handle as SEH handler.
	(exception::install_myfault_handler): New x86_64-only method to
	install exception::myfault_handle as VEH handler.  Explain why.
	(exception::~exception): For x86_64, define frame end label (again).
	* exceptions.cc (CYG_EXC_CONTINUE_EXECUTION): Drop definition.
	(CYG_EXC_CONTINUE_SEARCH): Ditto.
	(exception::myfault_handle): New x86_64-only method, VEH handler to
	handle myfault exceptions.
	(exception::handle): Define as ordinary exception handler on x86_64
	as well.  Use ExceptionContinueExecution and ExceptionContinueSearch
	throughout instead of deleted Cygwin macros.  Don't handle myfault
	exceptions on x86_64.
@
text
@a797 4
#ifdef __x86_64__
  exception::install_myfault_handler ();
#endif

@


1.452.2.3
log
@2014-07-14  Christopher Faylor  <me.cygwin2014@@cgf.cx>

	* sigproc.cc (send_sig): Fix bad format in diagnostic output.

2014-07-14  Yaakov Selkowitz  <yselkowitz@@cygwin.com>

	* thread.cc (pthread_mutex::pthread_mutex): Change default type
	to PTHREAD_MUTEX_NORMAL.
	(pthread_mutex::unlock): Return EPERM if the mutex has no owner and
	the mutex type is PTHREAD_MUTEX_ERRORCHECK, as on Linux.
	(pthread_mutexattr::pthread_mutexattr): Ditto.
	(pthread_mutex_unlock): Do not fail if mutex is a normal mutex
	initializer.
	* include/pthread.h (PTHREAD_MUTEX_INITIALIZER): Redefine as
	PTHREAD_NORMAL_MUTEX_INITIALIZER_NP.

2014-07-09  Corinna Vinschen  <corinna@@vinschen.de>

	* thread.cc (pthread::create): Use PTHREAD_DEFAULT_STACKSIZE stacksize
	if attr.stacksize is 0.
	(pthread_attr::pthread_attr): Initialize stacksize to 0 to align more
	closely to Linux.
	(pthread_attr_getstack): Fix incorrect stackaddr computation.  Return
	stackaddr just like pthread_attr_getstackaddr.  Remove slightly off
	comment.
	(pthread_attr_getstackaddr): Remove slightly off comment.
	(pthread_getattr_np): Return stackaddr and stacksize based on the full
	allocated stackarea.

2014-07-09  Corinna Vinschen  <corinna@@vinschen.de>

	* exceptions.cc (exception::myfault_handle): Rephrase comment.

2014-07-09  Corinna Vinschen  <corinna@@vinschen.de>

	* exceptions.cc (exception::myfault_handle): Fix typo in comment.

2014-07-07  Corinna Vinschen  <corinna@@vinschen.de>

	* exceptions.cc (exception::myfault_handle): Disable handling
	STATUS_STACK_OVERFLOW.  Explain why.

2014-07-07  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_socket.cc (fhandler_socket::send_internal): Improve loop to
	write streams in chunks of wmem() bytes to raise performance when
	writing small buffers.  Rename variables and add comments to help
	understanding the code in years to come.

2014-07-07  Corinna Vinschen  <corinna@@vinschen.de>

	* libc/minires.c (minires_dprintf): Change "Minires" to "Resolv" to
	differ from external minres lib.
	(res_nquerydomain): Fix off-by-one in domain concatenation.  Add debug
	output.

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* spawn.cc (find_exec): Initialize err (CID 60111).
	* strace.cc (strace::activate): Fix potential buffer overrun (CID 59938)
	* syscalls.cc (popen): Close parent pipe descriptor via fclosing fp on
	error to avoid resource leak (CID 59981).
	* thread.cc (pthread::exit): Avoid accessing cygtls member after
	deleting "this" (CID 60217).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* select.cc (start_thread_socket): Delete si on early return in case of
	an error (CID 59967).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* regex/regcomp.c (computematchjumps): Free local memory in case of
	error (CID 59975).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* mount.cc (fs_info::update): Define dir in the outermost scope to avoid
	accessing out-of-scope value (CID 60027).  Always initialize attr to
	upath (CID 60113).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* malloc_wrapper.cc (mallinfo): Initialize m if external malloc is used,
	too (CID 60120).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* localtime.cc (tzload): Fix leaking memory (CID 60001).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* environ.cc (regopt): Allocate small local buffer to avoid copying
	twice.  Fixes resource leak (CID 60012).  Add comment.

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* dll_init.cc (dll_list::alloc): Fix buffer overrun (CID 59940).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* dcrt0.cc (insert_file): Fix resource leaks (CIDs 59987, 59988).
@
text
@a117 1
      CloseHandle (f);
a125 1
      CloseHandle (f);
a136 1
      free (tmp);
@


1.452.2.4
log
@2014-08-11  Corinna Vinschen  <corinna@@vinschen.de>

	* cpuid.h: Add missing copyright header.  Fix formatting.  Use uint32_t
	instead of unsigned throughout.  Change functions to static inline and
	always inline.
	(cpuid): Add parameter to set ecx, allowing to request extended CPUID
	info.
	* fhandler_proc.cc (format_proc_cpuinfo): Use uint32_t instead of
	unsigned throughout.  Add fake decimal places to MHz info.  Handle more
	feature flags.
	* fhandler_random.cc (fhandler_dev_random::write): Allow up to 4K
	input to add entropy.
	* syscalls.cc: Drop including cpuid.h.

2014-08-07  Yaakov Selkowitz  <yselkowi@@redhat.com>

	* common.din (__cxa_finalize): Export.
	* dcrt0.cc (cygwin_atexit): Use d->handle with __cxa_atexit.
	* dll_init.cc (dll_list::detach): Use d->handle with __cxa_finalize.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Use 274 for
	__cxa_finalize as well.

2014-08-04  Anthony Heading  <anthony@@ajrh.net>

	* include/sys/file.h: Add extern "C".

2014-08-04  Corinna Vinschen  <corinna@@vinschen.de>

	* common.din (__cxa_atexit): Export.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump to 274.

2014-07-31  Eric Blake  <eblake@@redhat.com>

	* include/pthread.h: Decorate attribute names with __, for
	namespace safety.
	* include/cygwin/core_dump.h: Likewise.
	* include/cygwin/cygwin_dll.h: Likewise.
	* include/sys/cygwin.h: Likewise.
	* include/sys/strace.h: Likewise.
@
text
@d4 1
a4 1
   2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014 Red Hat, Inc.
d1243 1
a1243 1
  res = d ? __cxa_atexit ((void (*) (void *)) fn, NULL, d->handle) : atexit (fn);
@


1.452.2.5
log
@2014-11-07  Corinna Vinschen  <corinna@@vinschen.de>

	* dcrt0.cc (cygwin__cxa_atexit): Fetch correct DSO handle value
	by searching dll list.  Explain why.

2014-11-06  Corinna Vinschen  <corinna@@vinschen.de>

	* dcrt0.cc (cygwin_atexit): Change preceeding comment to reflect
	API version numbers.
	* external.cc (cygwin_internal): disable setting cxx_malloc on 64 bit.
	Add CW_FIXED_ATEXIT case.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
	* include/sys/cygwin.h (cygwin_getinfo_types): Add CW_FIXED_ATEXIT.
	* lib/atexit.c (atexit): Test running Cygwin version by checking
	return value of cygwin_internal (CW_FIXED_ATEXIT).

2014-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* lib/atexit.c (atexit): Check for being linked into the executable.
	If so, call __cxa_atexit with NULL DSO handle.  Explain why.
	* lib/dso_handle.c: New file providing fallback __dso_handle.

2014-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (NEW_FUNCTIONS): Add atexit to be not exported.
	* lib/atexit.c (atexit): New, statically linkable version of atexit.
	* dcrt0.cc (cygwin_atexit): Add comment to mark this function as old
	entry point.  Indiscriminately check for DSO of function pointer for
	all functions, if checking for DSO of return address fails on x86_64.
	Change comment accordingly.

2014-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (NEW_FUNCTIONS): Define target-independent.  Add target
	dependent stuff afterwards.  Globally define timezone and all xdr
	symbols as non-exported from libcygwin.a.

2014-11-03  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc: Fix formatting.

2014-10-29  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc (init_cygheap::init_installation_root): Create content of
	installation_dir as non-prefixed path, if possible.

2014-10-29  Corinna Vinschen  <corinna@@vinschen.de>

	* common.din (__cxa_atexit): Define as cygwin__cxa_atexit.
	* dcrt0.cc (cygwin__cxa_atexit): New function.  Explain what we do.

2014-10-28  Corinna Vinschen  <corinna@@vinschen.de>

	* globals.cc (dos_file_warning): Set to false by default.
	* path.cc (warn_msdos): Make static.  Drop test for dos_file_warning.
	(path_conv::check): Check for dos_file_warning here to avoid a function
	call in the default case.

2014-10-27  Corinna Vinschen  <corinna@@vinschen.de>

	* dcrt0.cc (cygwin_atexit): Add workaround for broken atexit calls
	in __gcc_register_frame of DLLs built with gcc-4.8.3-3.

2014-10-27  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc (init_cygheap::init_installation_root): Set
	installation_dir_len.
	* cygheap.h (struct init_cygheap): Add installation_dir_len member.
	* environ.cc (win_env::add_cache): Use stpcpy for speed.
	(posify_maybe): Use tmp_pathbuf buffer instead of stack.
	(raise_envblock): New function to resize Windows environment block.
	(build_env): Fix indentation.  Call raise_envblock function.  Check if
	$PATH exists and is non-empty.  If not, add PATH variable with Cygwin
	installation directory as content to Windows environment.  Explain why.

2014-10-24  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_proc.cc (format_proc_cygdrive): Fix symlink path if cygdrive
	is "/".

2014-10-24  Corinna Vinschen  <corinna@@vinschen.de>

	* gendef (sigdelayed): 64 bit only: Fix seh_pushreg statements in
	prologue.

2014-10-22  Yaakov Selkowitz  <yselkowi@@redhat.com>

	* common.din (stime): Export.
	* times.cc (stime): New function.
	* include/cygwin/time.h (stime): Declare.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.

2014-10-20  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_serial.cc: Revert debug code accidentally checked in on
	2014-08-18.

2014-10-20  Corinna Vinschen  <corinna@@vinschen.de>

	* path.cc (symlink_info::check): Set error from status code if opening
	the parent directory failed, but keep special case for root dirs.

2014-10-17  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc (init_cygheap::init_installation_root): Just memmove
	contents of installation_root instead of calling GetModuleFileNameW
	again.  Copy installation_root to installation_dir before stripping of
	"bin" dir.  Explain what we do.
	* cygheap.h (struct init_cygheap): Add installation_dir member.

2014-10-17  Corinna Vinschen  <corinna@@vinschen.de>

	* cygtls.h (__try): Define __l_endtry as block-local label in 32 bit
	case as well.

2014-10-17  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (DLL_OFILES): Add quotactl.o.
	* common.din (quotactl): Export.
	* ntdll.h: Define FILE_FS_CONTROL_INFORMATION::FileSystemControlFlags
	flag values.
	(struct _FILE_FS_CONTROL_INFORMATION): Define.
	(struct _FILE_GET_QUOTA_INFORMATION): Define.
	(typedef struct _FILE_QUOTA_INFORMATION): Define.
	(NtQueryObject): Use PVOID rather than VOID*.
	(NtQueryVolumeInformationFile): Ditto.
	(NtQueryQuotaInformationFile): Declare.
	(NtSetQuotaInformationFile): Declare.
	(NtSetVolumeInformationFile): Declare.
	* quotactl.cc: New file implementing quotactl().
	* include/sys/mount.h (BLOCK_SIZE): Define.
	(BLOCK_SIZE_BITS): Define.
	* include/sys/quota.h: New header.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.

2014-10-16  Corinna Vinschen  <corinna@@vinschen.de>

	* Makefile.in (DLL_OFILES): Rearrange with one file per line.

2014-10-16  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_proc.cc (format_proc_partitions): Extend output to print
	the windows mount points the device is mounted on.

2014-10-13  Corinna Vinschen  <corinna@@vinschen.de>

	* net.cc (cygwin_setsockopt): Drop redundant test for AF_LOCAL and
	SOCK_STREAM in SO_PEERCRED case, as in the original patch.

2014-10-12  Corinna Vinschen  <corinna@@vinschen.de>

	* dlfcn.cc (gfpod_helper): Only check for POSIX dir separator, same as
	in get_full_path_of_dll.

2014-10-12  Corinna Vinschen  <corinna@@vinschen.de>

	* dlfcn.cc (set_dl_error): Drop useless __stdcall.
	(check_path_access): Ditto.  Drop FE_CWD from call to find_exec.
	(gfpod_helper): Call path_conv::check for all paths containing a dir
	separator to more closely follow the Linux search algorithm.
	(get_full_path_of_dll): Drop useless __stdcall.
	(dlopen): Simplify RTLD_NOLOAD case by calling GetModuleHandleEx
	instead of GetModuleHandle/LoadLibrary.

2014-10-11  Christian Franke  <franke@@computer.org>

	Add setsockopt(sd, SOL_SOCKET, SO_PEERCRED, NULL, 0) to disable
	initial handshake on AF_LOCAL sockets.
	* fhandler.h (class fhandler_socket): Add no_getpeereid status flag.
	(fhandler_socket::af_local_set_no_getpeereid): New prototype.
	* fhandler_socket.cc (fhandler_socket::af_local_connect): Skip handshake
	if no_getpeereid is set.  Add debug output.
	(fhandler_socket::af_local_accept): Likewise.
	(fhandler_socket::af_local_set_no_getpeereid): New function.
	(fhandler_socket::af_local_copy): Copy no_getpeereid.
	(fhandler_socket::getpeereid): Fail if no_getpeereid is set.
	* net.cc (cygwin_setsockopt): Add SO_PEERCRED for AF_LOCAL/SOCK_STREAM
	sockets.  Add comment to explain why we need it.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.

2014-10-10  Corinna Vinschen  <corinna@@vinschen.de>

	* dlfcn.cc (dlopen): Disable old 32 bit code on 64 bit.
	* dcrt0.cc (check_sanity_and_sync): Ditto.
	* dll_init.cc (dll_dllcrt0_1): Fix typo in comment.

2014-10-08  Corinna Vinschen  <corinna@@vinschen.de>

	* common.din (ffsl): Export.
	(ffsll): Export.
	* syscalls.cc (ffs): Implement using GCC intrinsic.
	(ffsl): Ditto.
	(ffsll): Ditto.
	* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.

2014-10-08  Christian Franke  <franke@@computer.org>

	* syscalls.cc (ffs): Fix crash of ffs (0x80000000) on 64 bit.

2014-10-08  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_process.cc (format_process_statm): Fix output of dirty
	pages.  Add linefeed.

2014-09-05  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_proc.cc (proc_tab): Add entry for cygdrive symlink.
	(format_proc_cygdrive): New function to implement /proc/cygdrive.

2014-09-05  Corinna Vinschen  <corinna@@vinschen.de>

	* exception.h (class exception): Remove unnecessary #ifdef.

2014-09-05  Corinna Vinschen  <corinna@@vinschen.de>

	* winlean.h (DNLEN): Raise to 31.  Explain why.

2014-08-28  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_disk_file.cc (fhandler_disk_file::fstatvfs): Try the
	FileFsSizeInformation information class on filesystems choking on
	FileFsFullSizeInformation (I see you Netapp!)

2014-08-27  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.h (fhandler_pty_slave::fch_open_handles): Add bool parameter
	to declaration.
	* fhandler_tty.cc (fhandler_pty_slave::fch_open_handles): Add bool
	parameter "chown".  Only request WRITE_OWNER access when opening pty
	synchronization objects if "chown" is set.
	(fhandler_pty_slave::fchmod): Call fch_open_handles with new bool
	parameter set to false.
	(fhandler_pty_slave::fchown): Call fch_open_handles with new bool
	parameter set to true.
	* kernel32.cc (CreateFileMappingW): Fix default standard rights for
	file mappings from READ_CONTROL to STANDARD_RIGHTS_REQUIRED to allow
	changing the DACL (fixes "access denied" error in pinfo::set_acl).

	* fhandler_disk_file.cc (fhandler_base::fstat_helper): Change debug
	output to print mode bits in octal.
	* security.cc (alloc_sd): Ditto.
	(set_file_attribute): Ditto.

2014-08-27  Corinna Vinschen  <corinna@@vinschen.de>

	* ntea.cc (read_ea): Change left-over return to __leave.  Fix
	condition to close handle.  Call NtClose rather than CloseHandle.
	(write_ea): Fix condition to close handle.  Call NtClose rather than
	CloseHandle.
	* security.cc (get_file_sd): Call pc.init_reopen_attr if a valid
	incoming handle was given, pc.get_object_attr otherwise.
	(set_file_sd): Ditto.

2014-08-26  Corinna Vinschen  <corinna@@vinschen.de>

	* path.h (path_conv::init_reopen_attr): Change from void to returning
	POBJECT_ATTRIBUTES.  Take OBJECT_ATTRIBUTES reference as argument, not
	pointer.
	* fhandler_disk_file.cc: Throughout accommodate above change.
	* syscalls.cc: Ditto.
	* ntea.cc (read_ea): Don't set hdl to NULL if it's already NULL.  Set
	attr with pc.init_reopen_attr before trying to reopen file.
	(write_ea): Ditto.
	* security.cc (get_file_sd): Use pc.init_reopen_attr rather than
	pc.get_object_attr when trying to reopen file.
	(set_file_sd): Ditto.

2014-08-25  Corinna Vinschen  <corinna@@vinschen.de>

	* cygtls.cc (san::leave/x86_64): Implement.
	* cygtls.h (class tls_pathbuf): Move counter variables into a union.
	Add 64 bit element _counters covering both counter variables to
	optimize save and restore operations.
	(class san/x86_64): Only store single 64 bit value.
	(san::san/x86_64): Implement.
	(san::leave/x86_64): Only declare here, as returns_twice function.
	Explain why.
	(class san/i686): Change type of _c_cnt and _w_cnt to uint32_t.
	(__try/x86_64): Move definition of __sebastian after the first memory
	barrier.  Drop __sebastian.setup call.

2014-08-25  Corinna Vinschen  <corinna@@vinschen.de>

	* cygtls.cc (_cygtls::remove): Revert previous patch.
	*  cygtls.h (struct _local_storage): Move pathbufs back here.
	(class san/x86_64): Revert class.  Save and restore pathbufs counters
	only.
	(class san/i686): Revert saving and restoring pathbufs counters.
	(__try/x86_64): Add a san variable and call it's setup method.
	(__except/x86_64): Call san::leave to restore pathbufs counters.
	* gendef (_sigbe): Revert previous change.
	* thread.cc (verifyable_object_state): Remove gcc 4.7 workaround in
	forward declaration as well.
	* tls_pbuf.cc (tls_pbuf): Revert previous change.
	* tls_pbuf.h (class tmp_pathbuf): Accommodate reverting pathbufs to
	locals structure.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Regenerate.

2014-08-21  Corinna Vinschen  <corinna@@vinschen.de>

	* Throughout, use __try/__except/__endtry blocks, rather than myfault
	handler.
	* cygtls.cc (_cygtls::remove): Accommodate the fact that pathbufs
	has been moved from _local_storage to _cygtls.
	* cygtls.h (class tls_pathbuf): Add comment to hint to gendef usage
	of counters.  Change type of counters to uint32_t for clarity.
	Remove _cygtls as friend class.
	(struct _local_storage): Move pathbufs from here...
	(struct _cygtls): ...to here, allowing to access it from _sigbe.
	(class san): Only define on 32 bit.  Remove errno, _c_cnt and _w_cnt
	members.
	(san::setup): Drop parameter.  Don't initialize removed members.
	(san::leave): Don't set removed members.
	(class myfault): Only define on 32 bit.
	(myfault::faulted): Only keep implementation not taking any parameter.
	Drop argument in call to sebastian.setup.
	(__try/__leave/__except/__endtry): Implement to support real SEH.  For
	now stick to SJLJ on 32 bit.
	* dcrt0.cc (dll_crt0_0): Drop 64 bit call to
	exception::install_myfault_handler.
	* exception.h (exception_handler): Define with EXCEPTION_DISPOSITION
	as return type.
	(PDISPATCHER_CONTEXT): Define as void * on 32 bit.  Define as pointer
	to _DISPATCHER_CONTEXT on 64 bit.
	(class exception): Define separately for 32 and 64 bit.
	(exception::myfault): Add handler for myfault SEH handling on 64 bit.
	(exception::exception): Fix mangled method name to account for change
	in type of last parameter.
	(exception::install_myfault_handler): Remove.
	* exceptions.cc (exception::myfault_handle): Remove.
	(exception::myfault): New SEH handler for 64 bit.
	* gendef (_sigbe): Set tls_pathbuf counters to 0 explicitely when
	returning to the caller.
	* ntdll.h: Move a comment to a better place.
	(struct _SCOPE_TABLE): Define on 64 bit.
	* thread.cc (verifyable_object_isvalid): Remove gcc 4.7 workaround.
	* tls_pbuf.cc (tls_pbuf): Fix to accommodate new place of pathbufs.
	(tls_pathbuf::destroy): Change type of loop variables to uint32_t.
	* tls_pbuf.h (class tmp_pathbuf): Change type of buffer counters to
	uint32_t.  Accommodate new place of pathbufs.
	* tlsoffsets.h: Regenerate.
	* tlsoffsets64.h: Regenerate.

2014-08-21  Corinna Vinschen  <corinna@@vinschen.de>

	* miscfuncs.cc (__import_address): Cover the first dereference to imp
	under the fault handler.

2014-08-21  Corinna Vinschen  <corinna@@vinschen.de>

	* net.cc (if_freenameindex): Don't catch a SEGV from free to fail
	loudly on double free.

2014-08-21  Corinna Vinschen  <corinna@@vinschen.de>

	* dir.cc (rmdir): Don't skip deleting fh in the ENOTEMPTY case.

2014-08-20  Corinna Vinschen  <corinna@@vinschen.de>

	* tls_pbuf.h (tmp_pathbuf::tmp_pathbuf): Convert to inline method.
	(tmp_pathbuf::~tmp_pathbuf): Ditto.
	* tls_pbuf.cc (tmp_pathbuf::tmp_pathbuf): Remove here.
	(tmp_pathbuf::~tmp_pathbuf): Ditto.

2014-08-19  Corinna Vinschen  <corinna@@vinschen.de>

	* dir.cc (dirfd): Per POSIX, return EINVAL on invalid directory stream.
	(telldir): Per POSIX, return -1 and set errno to EBADF, rather than
	just returning 0, on invalid directory stream.
	* signal.cc (sigwaitinfo): Return -1, not EFAULT, when SEGV was catched.

2014-08-19  Corinna Vinschen  <corinna@@vinschen.de>

	* autoload.cc: Replace WNet[...]A with WNet[...]W imports.
	* dcrt0.cc (initial_env): Drop strlwr calls.  Call strcasestr instead.
	* fhandler_netdrive.cc: Throughout, convert to calling WNet UNICODE
	functions.  Use tmp_pathbuf rather than alloca.  Replace call to
	strlwr with call to RtlDowncaseUnicodeString.

2014-08-19  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler.h (fhandler_serial::is_tty): Reinstantiate.

2014-08-18  Corinna Vinschen  <corinna@@vinschen.de>

	* miscfuncs.cc (strlwr): Rename from cygwin_strlwr.  Drop __stdcall
	decoration.
	(strupr): Rename from cygwin_strupr.  Drop __stdcall decoration.
	* string.h (strlwr): Remove override macro.  Simply declare.
	(strupr): Ditto.

2014-08-18  Corinna Vinschen  <corinna@@vinschen.de>

	* dtable.cc (dtable::init_std_file_from_handle): Mention that console
	handles are kernel objects since Windows 8.
	* fhandler.h (enum conn_state): Add "listener" state.
	(class fhandler_socket): Drop listener status flag.
	(fhandler_socket::lseek): Return -1 and errno ESPIPE.
	(fhandler_serial::lseek): Ditto.
	(fhandler_serial::is_tty): Remove.
	* fhandler_socket.cc (fhandler_socket::listen): Set connect_state to
	listener.  Add comment.
	(fhandler_socket::accept4): Explicitely check if the socket is listening
	and fail with EINVAL, if not.  Explain why we have to do that.
	(fhandler_socket::getpeereid): Drop now redundant test.

2014-08-15  Corinna Vinschen  <corinna@@vinschen.de>

	* winsup.h (_GNU_SOURCE): Define.  Explain why.

2014-08-14  Corinna Vinschen  <corinna@@vinschen.de>

	* dlmalloc.c: Remove unused file.
	* dlmalloc.h: Ditto.
	* malloc.cc: Update to Doug Lea's malloc version 2.8.6.

2014-08-13  Corinna Vinschen  <corinna@@vinschen.de>

	* include/cygwin/version.h (CYGWIN_VERSION_DLL_MINOR): Bump to 33.
	(CYGWIN_VERSION_API_MINOR): Bump to reflect intermediate 1.7.32 release.

2014-07-21  Corinna Vinschen  <corinna@@vinschen.de>

	* include/cygwin/version.h (CYGWIN_VERSION_DLL_MINOR): Bump to 32.

2014-05-06  Corinna Vinschen  <corinna@@vinschen.de>

	* winlean.h (PIPE_REJECT_REMOTE_CLIENTS): Drop temporary definition
	since Mingw64 catched up.
	(DNLEN): Redefine as 16.  Explain why.

2014-03-06  Corinna Vinschen  <corinna@@vinschen.de>

	* setlsapwd.cc (setlsapwd): Use RtlSecureZeroMemory to delete password
	from memory.

2014-11-05  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): Document atexit.

2014-10-28  Corinna Vinschen  <corinna@@vinschen.de>

	* cygwinenv.xml: Change default setting of dosfilewarning.
	* new-features.xml (ov-new1.7.33): Document aforementioned change.

2014-10-27  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): Document empty $PATH handling.

2014-10-22  Corinna Vinschen  <corinna@@vinschen.de>

	* posix.xml (std-gnu): Add ffsl, ffsll, quotactl.
	(std-notes): Add restrictions of quotactl.

2014-10-22  Yaakov Selkowitz  <yselkowi@@redhat.com>

	* new-features.xml (ov-new1.7.33): Document stime.
	* posix.xml (std-deprec): Add stime.

2014-10-22  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): s/Linux/glibc.

2014-10-22  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): Update to current state.

2014-08-13  Corinna Vinschen  <corinna@@vinschen.de>

	* new-features.xml (ov-new1.7.33): Add new section.
	(ov-new1.7.32): Reflect intermediate 1.7.32 release.

2014-10-21  Corinna Vinschen  <corinna@@vinschen.de>

	* cygcheck.cc (CYGLSA64_DLL): Remove unused macro.
	(dump_sysinfo): If COMSPEC isn't set in the MSVCRT environment, set it.
	Explain why.
@
text
@a395 1
#ifndef __x86_64__
a400 1
#endif
d520 2
d527 1
a527 1
      if (strcasestr (buf1, buf))
d801 4
a938 3
  /* Set internal locale to the environment settings. */
  initial_setlocale ();

d944 3
a1237 27
/* When introducing support for -fuse-cxa-atexit with Cygwin 1.7.32 and
   GCC 4.8.3-3, we defined __dso_value as &ImageBase.  This supposedly allowed
   a reproducible value which could also be easily evaluated in cygwin_atexit.
   However, when building C++ applications with -fuse-cxa-atexit, G++ creates
   calls to __cxa_atexit using the *address* of __dso_handle as DSO handle.
   
   So what we do here is this:  A call to __cxa_atexit from the application
   actually calls cygwin__cxa_atexit.  From dso_handle (which is either
   &__dso_handle, or __dso_handle == ImageBase or NULL) we fetch the dll
   structure of the DLL.  Then use dll::handle == ImageBase as the actual DSO
   handle value in calls to __cxa_atexit and __cxa_finalize.
   Thus, __cxa_atexit becomes entirely independent of the incoming value of
   dso_handle, as long as it's *some* pointer into the DSO's address space. */
extern "C" int
cygwin__cxa_atexit (void (*fn)(void *), void *obj, void *dso_handle)
{
  dll *d = dso_handle ? dlls.find (dso_handle) : NULL;
  return __cxa_atexit (fn, obj, d ? d->handle : NULL);
}

/* This function is only called for applications built with Cygwin versions
   up to API 0.279.  Starting with API 0.280 (Cygwin 1.7.33/1.8.6-2), atexit
   is a statically linked function inside of libcygwin.a.  The reason is that
   the old method to fetch the caller return address is unreliable given GCCs
   ability to perform tail call elimination.  For the details, see the below
   comment.  The atexit replacement is defined in libcygwin.a to allow reliable
   access to the correct DSO handle. */
a1241 1

a1242 23
#ifdef __x86_64__
  /* x86_64 DLLs created with GCC 4.8.3-3 register __gcc_deregister_frame
     as atexit function using a call to atexit, rather than __cxa_atexit.
     Due to GCC's tail call optimizing, cygwin_atexit doesn't get the correct
     return address on the stack.  As a result it fails to get the HMODULE of
     the caller and thus calls atexit rather than __cxa_atexit.  Then, if the
     module gets dlclosed, __cxa_finalize (called from dll_list::detach) can't
     remove __gcc_deregister_frame from the atexit function chain.  So at
     process exit, __call_exitprocs calls __gcc_deregister_frame while the
     module is already unloaded and the __gcc_deregister_frame function not
     available ==> SEGV.

     This also occurs for other functions.

     Workaround: If dlls.find fails, try to find the dll entry of the DLL
     containing fn.  If that works, proceed by calling __cxa_atexit, otherwise
     call atexit.
     
     This *should* be sufficiently safe.  Ultimately, new applications will
     use the statically linked atexit function though, as outlined above. */
  if (!d)
    d = dlls.find ((void *) fn);
#endif
@


1.451
log
@* autoload.cc (timeBeginPeriod): Delete.
* dcrt0.cc (dll_crt0_1): Use NtSetTimerResolution rather than timeBeginPeriod.
@
text
@a838 1
  NtSetTimerResolution (10000, TRUE, NULL);
@


1.450
log
@* autoload.cc (timeBeginPeriod): Autoload.
* dcrt0.cc (dll_crt0_1): Use timeBeginPeriod to set default resolution to 1 ms.
* pinfo.cc (pinfo::thisproc): Set ppid for redirected _pinfo blocks too.
(pinfo::init): Avoid using VirtualQuery.  Just rely on the assumption that
procinfo will be populated.
* pinfo.h (_pinfo::ppid): Move into redirected block.
@
text
@d839 1
a839 1
  timeBeginPeriod (1);
@


1.449
log
@* winsup.h (cygbench): Fix declaration to match definition.
* dcrt0.cc (initial_env): Remove unused variable.
@
text
@d839 1
@


1.448
log
@	* dcrt0.cc (child_info_fork::alloc_stack): Fix a comparison to avoid
	taking 4K more stack in forked child.
	* fork.cc (frok::parent): Print child exit code in hex if sync failed.
@
text
@a511 1
  DWORD len;
d516 1
a516 1
      len = GetModuleFileName (NULL, buf1, NT_MAX_PATH);
d1306 1
a1306 1
void __stdcall
@


1.447
log
@* dcrt0.cc (child_info_fork::alloc_stack): Don't subtract 4096 from stack
pointer since getstack() already does that.
@
text
@d485 1
a485 1
      while (_tlstop >= st)
@


1.446
log
@	* dcrt0.cc (child_info_fork::alloc_stack_hard_way): Fix datatype of
	stacksize to SIZE_T.  Cast to SIZE_T in pointer arithmetic.  Slightly
	enhance output in case of a fatal error.
	* fork.cc (frok::parent): Always set ch.stackaddr to DeallocationStack
	value of current thread to help stack reservation in
	child_info_fork::alloc_stack_hard_way along.  Simplify subsequent code
	storing stack values in ch.  Print guardsize in hex, too.
@
text
@d484 1
a484 1
      char *st = (char *) stacktop - 4096;
@


1.445
log
@	* Merge in cygwin-64bit-branch.
@
text
@d408 1
a408 1
  DWORD stacksize;
a417 1

d419 1
a419 1
  stacksize = (char *) stackbottom - (char *) stackaddr;
d421 7
a427 3
    api_fatal ("fork: can't reserve memory for stack %p - %p, %E",
	       stackaddr, stackbottom);
  stacksize = (char *) stackbottom - (char *) stacktop;
d430 1
a430 1
    abort ("can't commit memory for stack %p(%d), %E", stacktop, stacksize);
@


1.444
log
@* cygheap.cc (init_cygheap::find_tls): Add a comment.
* dcrt0.cc (parent_sigmask): Delete.
(dll_crt0_1): Use spawn_info->moreinfo->sigmask rather than saved parent signal
mask.
* thread.cc (pthread::thread_init_wrapper): Add comment stressing the
importance of maintaining ordering of statements.
@
text
@d380 1
a380 1
    api_fatal ("cygwin DLL and APP are out of sync -- DLL version mismatch %d < %d",
d385 1
a385 1
    api_fatal ("Incompatible cygwin .dll -- incompatible per_process info %d != %d",
d390 1
a390 1
    api_fatal ("cygwin DLL and APP are out of sync -- API version mismatch %d > %d",
d461 6
a466 2
  volatile char * volatile esp;
  __asm__ volatile ("movl %%esp,%0": "=r" (esp));
d478 1
a478 1
    alloc_stack_hard_way (esp);
d483 1
a483 1
	esp = getstack (esp);
d489 1
a489 1
      _tlsbase = (char *) stackbottom;
d553 2
a554 2
	multiple_cygwin_problem ("cygheap base", (DWORD) res->cygheap,
				 (DWORD) &_cygheap_start);
d570 2
a571 1
	      multiple_cygwin_problem ("fhandler size", res->fhandler_union_cb, sizeof (fhandler_union));
d580 1
a580 1
	    system_printf ("unknown exec type %d", res->type);
d591 6
d601 1
d723 1
a723 1

d731 1
a740 1
  init_global_security ();
d768 1
d775 1
d864 1
a864 1
	  small_printf ("total allocated %p\n", (i - 1) * n);
d907 2
a908 2
	  _tlsbase = (char *) fork_info->stackbottom;
	  _tlstop = (char *) fork_info->stacktop;
d1032 3
d1036 1
d1039 1
d1041 1
d1043 1
d1050 1
d1081 1
a1081 1
#ifdef __i386__
d1083 2
a1085 1
  main_environ = user_data->envptr;
d1118 1
d1120 1
d1125 1
d1127 1
d1151 1
a1151 1
void __stdcall
d1203 1
a1203 1
	  sigproc_printf ("%d == pgrp %d, send SIG{HUP,CONT} to stopped children",
d1216 1
a1216 1
	  sigproc_printf ("%d == sid %d, send SIGHUP to children",
d1279 1
a1279 1
multiple_cygwin_problem (const char *what, unsigned magic_version, unsigned version)
d1291 1
a1291 1
    system_printf ("%s magic number mismatch detected - %p/%p", what, magic_version, version);
d1293 1
a1293 1
    api_fatal ("%s mismatch detected - %p/%p.\n\
d1308 1
a1308 1
    small_printf ("%05d ***** %s : %10d\n", GetCurrentProcessId (), s, strace.microseconds ());
@


1.443
log
@* child_info.h (cygheap_exec_info::sigmask): Declare new field.
* cygheap.cc (init_cygheap::find_tls): Rename threadlist_ix -> ix.  Only take
one pass through thread list, looking for eligible threads to signal.  Set a
new param indicating that function has found a sigwait* mask.
* cygheap.h (init_cygheap::find_tls): Reflect new parameter.
* dcrt0.cc (parent_sigmask): New variable.
(child_info_spawn::handle_spawn): Save parent's signal mask here.
(dll_crt0_1): Restore parent's signal mask to tls sigmask as appropriate.  Call
sig_dispatch_pending to flush signal queue when we can finally do something
with signals.
* exceptions.cc (sigpacket::process): Avoid attempting to handle signals if we
haven't finished initializing.  Rely on the fact that find_tls will do mask
checking and don't do it again.  Delete ill-named 'dummy' variable.
* sigproc.cc (cygheap_exec_info::alloc): Save calling thread's signal mask in
new sigmask field.
(wait_sig): Try to debug when WFSO fails and DEBUGGING is defined.
* thread.cc (pthread::set_tls_self_pointer): Make this a true automatic method
rather than inexplicably relying on a thread parameter.
(pthread::thread_init_wrapper): Accommodate set_tls_self_pointer change to
non-static.  Initialize sigmask before setting tid or suffer signal races.
* ehread.h (pthread::set_tls_self_pointer): Make non-static, delete parameter.
@
text
@a400 1
static NO_COPY sigset_t parent_sigmask;
a656 2
  parent_sigmask = moreinfo->sigmask;

d824 3
a826 3
  if (!in_forkee)
    _my_tls.sigmask = parent_sigmask;	/* always zero if started by non-cygwin
					   process */
@


1.442
log
@* dcrt0.cc (dll_crt0_1): Comment assumption.
* exceptions.cc (sigpacket::setup_handler): Avoid sending signals during fork
processing.
@
text
@d400 2
a401 1
child_info NO_COPY *child_proc_info = NULL;
d658 2
d827 3
d1018 1
@


1.441
log
@* dcrt0.cc (dll_crt0_1): Flag that we are working "incyg".  Handle any signals
(presumably exiting signals) which may have come in while we are in the process
of setting up.
@
text
@d894 2
@


1.440
log
@	* dcrt0.cc (main_thread_sinit): New inline function.  Fix and explain
	a stdio initialization issue.
	(dll_crt0_1): Call main_thread_sinit rather than __sinit.
@
text
@d823 2
d992 7
a998 1
  if (user_data->main)
d1009 3
@


1.439
log
@* DevNotes: Add entry cgf-000019.
* dcrt0.cc (do_exit): Just set exit_state to ES_EVENTS_TERMINATE and nuke call
to events_terminate which just set a superfluous flag.
* sigproc.cc (signal_exit_code): New variable.
(setup_signal_exit): Define new function.
(_cygtls::signal_exit): Remove accommodations for closing the signal pipe
handle.
(exit_thread): Just sleep if we're exiting.
(wait_sig): If signal_exit_code is set, just handle bookkeeping signals and
exit ReadFile loop if there is nothing more to process.  Call signal_exit at
end if signal_exit_code is non-zero.
* sigproc.h (setup_signal_exit): Declare new function.
* exceptions.cc (sigpacket::process): Use setup_signal_exit to control exiting
due to a signal.
(exception::handle): Ditto.  Query exit_state rather than defunct exit_already
to determine if we are exiting.
* globals.cc (ES_SIGNAL_EXIT): New enum.
* sync.h (lock_process::release): New function for explicitly unlocking muto.
(lock_process::~lock_process): Use release method.
@
text
@d4 1
a4 1
   2007, 2008, 2009, 2010, 2011, 2012 Red Hat, Inc.
d791 23
d895 1
a895 1
  __sinit (_impure_ptr);
@


1.438
log
@	* dcrt0.cc (build_argv): Allow quoted filenames in @@ expression.
@
text
@d1101 1
a1101 4
    {
      exit_state = ES_EVENTS_TERMINATE;
      events_terminate ();
    }
@


1.437
log
@revert erroneous checkin
@
text
@d323 5
a327 1
	      cmd = quoted (cmd, winshell && argc > 0);
@


1.436
log
@* spawn.cc (child_info_spawn::worker): Make detection of '/c' case insensitive
when looking for cmd.exe command line.
@
text
@a720 1
  small_printf ("HERE\n");
a784 1
  small_printf ("THERE\n");
@


1.435
log
@        * dcrt0.cc (quoted): Renamed strechr to strchrnul.
        * environ.cc (environ_init): Likewise.
        * sec_acl.cc (aclfromtext32): Likewise.
        * sec_auth.cc (extract_nt_dom_user): Likewise.
        * uinfo.cc (pwdgrp::next_str): Likewise.
        * string.h (strechr): Likewise.
@
text
@d721 1
d786 1
@


1.434
log
@* DevNotes: Add entry cgf-000014.
* cygheap.cc (tls_sentry): Move here, rename from 'sentry' in cygtls.cc
(tls_sentry::lock): Ditto.
(nthreads): Move from cygtls.cc
(THREADLIST_CHUNK): Ditto.
(cygheap_init): Call init_tls_list().
(init_cygheap::init_tls_list): Define new function.
(init_cygheap::add_tls): Ditto.
(init_cygheap::remove_tls): Ditto.
(init_cygheap::find_tls): Ditto.  Semi-resurrect from _cygtls::find_tls.
* cygheap.h (init_cygheap::init_tls_list): Declare new function.
(init_cygheap::add_tls): Ditto.
(init_cygheap::remove_tls): Ditto.
(init_cygheap::find_tls): Ditto.
* cygtls.cc (sentry): Delete.
(sentry::lock): Ditto.
(nthreads): Ditto.
(THREADLIST_CHUNK): Ditto.
(_cygtls::init): Delete definition.
(_cygtls::init_thread): Call cygheap->add_tls() to add thread to global list.
(_cygtls::remove): cygheap->remove_tls() to remove thread from global list.
* cygtls.h (_cygtls::init): Delete declaration.
* dcrt0.cc (dll_crt0_0): Delete call to _cygtls::init().
* exceptions.cc (sigpacket::process): When no thread is specified, try to find
one via cygheap->find_tls.
@
text
@d165 1
a165 1
      if (*(p = strechr (cmd, quote)))
@


1.434.2.1
log
@	* cygtls.h (__stack_t): Define as uintptr_t.
	* dcrt0.cc (child_info_fork::alloc_stack): Conditionalize assembler
	code on a per-CPU base.  Rename esp to stackp.
	(get_cygwin_startup_info): Cast pointers to uintptr_t in
	multiple_cygwin_problem call.  Minor formatting change.
	(_dll_crt0): Conditionalize assembler code on a per-CPU base.
	(multiple_cygwin_problem): Change parameters from unsigned to uintptr_t.
	* winsup.h (multiple_cygwin_problem): Change declaration accordingly.
	* pinfo.h (pinfo::reattach): Cast 2nd argument in proc_subproc call
	to uintptr_t.
	(pinfo::remember): Ditto.
	* sigproc.cc (proc_subproc): Change 2nd parameter to uintptr_t to allow
	pointer values.
	* sigproc.h (proc_subproc): Change declaration accordingly.
	* include/sys/cygwin.h (per_process_overwrite): Use offsetof to compute
	value.
@
text
@d457 2
a458 6
  volatile char * volatile stackp;
#ifdef __x86_64__
  __asm__ volatile ("movq %%rsp,%0": "=r" (stackp));
#else
  __asm__ volatile ("movl %%esp,%0": "=r" (stackp));
#endif
d470 1
a470 1
    alloc_stack_hard_way (stackp);
d475 1
a475 1
	stackp = getstack (stackp);
d545 2
a546 2
	multiple_cygwin_problem ("cygheap base", (uintptr_t) res->cygheap,
				 (uintptr_t) &_cygheap_start);
d562 1
a562 2
	      multiple_cygwin_problem ("fhandler size", res->fhandler_union_cb,
				       sizeof (fhandler_union));
a1001 6
#ifdef __x86_64__
	  __asm__ ("\n\
		   movq  %[ADDR], %%rsp \n\
		   xorq  %%rbp, %%rbp   \n"
		   : : [ADDR] "r" (stackaddr));
#else
a1005 1
#endif
d1211 1
a1211 1
multiple_cygwin_problem (const char *what, uintptr_t magic_version, uintptr_t version)
@


1.434.2.2
log
@	* cygtls.h (__stack_t): Define as uintptr_t.
	* dcrt0.cc (child_info_fork::alloc_stack): Conditionalize assembler
	code on a per-CPU base.  Rename esp to stackp.
	(get_cygwin_startup_info): Cast pointers to uintptr_t in
	multiple_cygwin_problem call.  Minor formatting change.
	(_dll_crt0): Conditionalize assembler code on a per-CPU base.
	(multiple_cygwin_problem): Change parameters from unsigned to uintptr_t.
	* winsup.h (multiple_cygwin_problem): Change declaration accordingly.
	* pinfo.h (pinfo::reattach): Cast 2nd argument in proc_subproc call
	to uintptr_t.
	(pinfo::remember): Ditto.
	* sigproc.cc (proc_subproc): Change 2nd parameter to uintptr_t to allow
	pointer values.
	* sigproc.h (proc_subproc): Change declaration accordingly.
	* include/sys/cygwin.h (per_process_overwrite): Use offsetof to compute
	value.
@
text
@d712 1
a712 1
#ifndef __x86_64__
a719 1
#endif /* !__x86_64__ */
a756 1
#ifndef __x86_64__
a762 1
#endif /* !__x86_64__ */
a983 1
		nop			\n\
a989 1
#ifndef __x86_64__
d1007 6
d1017 1
d1027 1
a1027 1
#endif /* !__x86_64__ */
d1029 1
@


1.434.2.3
log
@	* cygtls.cc (_cygtls::remove): Fix debug printf to be type-safe.
	* dcrt0.cc: Ditto, throughout.
	* include/sys/cygwin.h (struct per_process): Define magic_biscuit,
	dll_major and dll_minor as uint32_t.
@
text
@d376 1
a376 1
    api_fatal ("cygwin DLL and APP are out of sync -- DLL version mismatch %u < %u",
d381 1
a381 1
    api_fatal ("Incompatible cygwin .dll -- incompatible per_process info %u != %u",
d386 1
a386 1
    api_fatal ("cygwin DLL and APP are out of sync -- API version mismatch %u > %u",
d576 1
a576 1
	    system_printf ("unknown exec type %u", res->type);
d1144 1
a1144 1
	  sigproc_printf ("%u == pgrp %u, send SIG{HUP,CONT} to stopped children",
d1157 1
a1157 1
	  sigproc_printf ("%u == sid %u, send SIGHUP to children",
d1249 1
a1249 1
    small_printf ("%05u ***** %s : %10d\n", GetCurrentProcessId (), s, strace.microseconds ());
@


1.434.2.4
log
@        * dcrt0.cc (quoted): Renamed strechr to strchrnul.
        * environ.cc (environ_init): Likewise.
        * sec_acl.cc (aclfromtext32): Likewise.
        * sec_auth.cc (extract_nt_dom_user): Likewise.
        * uinfo.cc (pwdgrp::next_str): Likewise.
        * string.h (strechr): Likewise.
@
text
@d165 1
a165 1
      if (*(p = strchrnul (cmd, quote)))
@


1.434.2.5
log
@	* cygthread.cc: Fix usage of %p in debug printfs, throughout.
	* dcrt0.cc: Ditto.
	* dtable.cc: Ditto.
	* errno.cc: Ditto.
	* exceptions.cc: Ditto.
	* fhandler.cc: Ditto.
	* fhandler_console.cc: Ditto.
	* fhandler_disk_file.cc: Ditto.

	* fhandler_clipboard.cc (cygnativeformat): Define as UINT.
	(fhandler_dev_clipboard::read): Ditto for local format variable.
	Use casts to compare off_t with size_t value.
	* fhandler_console.cc (fhandler_console::ioctl): Avoid compiler
	warnings.
	* fhandler_disk_file.cc (fhandler_disk_file::opendir): Fix cast.
	* include/sys/dirent.h (struct __DIR): Define __d_internal as uintptr_t,
	rather than unsigned int.

	And pull in changes from HEAD.
@
text
@d826 1
a826 1
	  small_printf ("total allocated %y\n", (i - 1) * n);
d1232 1
a1232 1
    system_printf ("%s magic number mismatch detected - %p/%ly", what, magic_version, version);
d1234 1
a1234 1
    api_fatal ("%s mismatch detected - %p/%ly.\n\
@


1.434.2.6
log
@	* Throughout, fix format string of debug printf and api_fatal calls
	to work in 32 and 64 bit environment, as well as to honor signedness.
	Use %y instead of 0x%x.
	* fhandler.h (class fhandler_dev_mem): Change type of mem_size from
	DWORD to SIZE_T.
	* fhandler_mem.cc: Throughout, cast mem_size in comparisons to make
	GCC happy.
	* fhandler_process.cc (format_process_maps): Change type of ret_len
	to SIZE_T.
	(get_mem_values): Ditto for n and length.
	* mmap.cc (MapView): Ditto for commitsize and viewsize.
	(class mmap_record): Ditto for len.  Use SIZE_T througout for memory
	size in method args and return types.
	* ntdll.h (NtLockVirtualMemory): Fix type of memory size parameters
	to SIZE_T.
	(NtMapViewOfSection): Ditto.
	(NtQueryVirtualMemory): Ditto.
	(NtUnlockVirtualMemory): Ditto.
	(RtlFreeHeap): Change type of first parameter to HANDLE.
	* shm.cc (shmat): Change type of viewsize to SIZE_T.
	* timer.cc (timer_thread): Change type of sleep_ms to LONG.
	(ualarm): Drop casts to unsigned int in timer value computation.
@
text
@d1234 1
a1234 1
    api_fatal ("%s mismatch detected - %ly/%ly.\n\
@


1.434.2.7
log
@Pull in changes from HEAD
@
text
@d323 1
a323 5
	      /* Handle quoting.  Only strip off quotes if the parent is
		 a Cygwin process, or if the word starts with a '@@'.
		 In this case, the insert_file function needs an unquoted
		 DOS filename and globbing isn't performed anyway. */
	      cmd = quoted (cmd, winshell && argc > 0 && *word != '@@');
@


1.434.2.8
log
@Pull in changes from HEAD
@
text
@d4 1
a4 1
   2007, 2008, 2009, 2010, 2011, 2012, 2013 Red Hat, Inc.
a798 23
static inline void
main_thread_sinit ()
{
  __sinit (_impure_ptr);
  /* At this point, _impure_ptr == _global_impure_ptr == _GLOBAL_REENT is
     initialized, but _REENT == _my_tls.local_clib doesn't know about it.
     It has been copied over from _GLOBAL_REENT in _cygtls::init_thread
     *before* the initialization took place.

     As soon as the main thread calls a stdio function, this would be
     rectified.  But if another thread calls a stdio function on
     stdin/out/err before the main thread does, all the required
     initialization of stdin/out/err will be done, but _REENT->__sdidinit
     is *still* 0.  This in turn will result in a call to __sinit in the
     wrong spot.  The input or output buffer will be NULLed and nothing is
     read or written in the first stdio function call in the main thread.

     To fix this issue we have to copy over the relevant part of _GLOBAL_REENT
     to _REENT here again. */
  _REENT->__sdidinit = -1;
  _REENT->__cleanup = _GLOBAL_REENT->__cleanup;
}

d880 1
a880 1
  main_thread_sinit ();
d1110 4
a1113 1
    exit_state = ES_EVENTS_TERMINATE;
@


1.434.2.9
log
@	* dcrt0.cc (_cygwin_exit_return): Define to allow usage of same C
	symbol name independent of target.
	* perprocess.h (SIZEOF_PER_PROCESS): Define for x86_64.
	* include/sys/cygwin.h (struct per_process): Tweak definition for
	x86_64.
@
text
@a1011 1
	.global _cygwin_exit_return	\n\
a1012 1
_cygwin_exit_return:			\n\
@


1.434.2.10
log
@	* Makefile.in (speclib): Exclude main symbol.
	(NEW_FUNCTIONS): Set to empty for x86_64.
	($(DEF_FILE)): Call gendef with target_alias as additional parameter.
	* configure.ac (DLL_ENTRY): Drop leading underscore for x86_64.
	* configure: Regenerate.
	* cygwin.sc.in: Drop _SYM usage for __data_start__, __data_end__,
	__bss_start__, and __bss_end__.
	* cygwin64.din: Remove all fast-call math function entry points.
	(_alloca): Define as __alloca.
	(_dll_crt0): Drop 32 bit stdcall specifier.
	(dll_entry): Ditto.
	(dll_noncygwin_dllcrt0): Remove.
	(getpwduid): Remove.
	(lacl): Remove.
	* dcrt0.cc (dll_data_start): Define for x86_64.
	(dll_data_end): Ditto.
	(dll_bss_start): Ditto.
	(dll_bss_end): Ditto.
	* gendef: Handle new target argument.  Handle 64 bit target.
	Add preliminiary empty function definitions for 64 bit to allow linking.
	* winsup.h: Define linker data and bss section symbols with
	additional underscore for x86_64.
	* lib/_cygwin_crt0_common.cc (__image_base__): Define for 64 bit and
	map to _image_base__ via macro.
	(_cygwin_crt0_common): Fix setting data and bss section borders on
	x86_64.
@
text
@a590 6
#ifdef __x86_64__
#define dll_data_start &__data_start__
#define dll_data_end &__data_end__
#define dll_bss_start &__bss_start__
#define dll_bss_end &__bss_end__
#else
a594 1
#endif
@


1.434.2.11
log
@	* cygtls.h (_tlsbase): Temporary workaround for GCC bug.
	(_tlsbase): Ditto.
	* cygwin64.din: Set BASE temporariliy to address < 32 bit to workaround
	GDB bug.
	* dcrt0.cc (child_info_fork::alloc_stack): Temporary workaround for GCC
	bug.
	(dll_crt0_1): Ditto.
	* miscfuncs.cc (memset): Temporary workaround missing MSABI function in
	newlib.
	(memcpy): Ditto.
	* include/cygwin/config.h (__getreent): Drop definition for x86_64 to
	workaround GCC bug.
@
text
@d489 1
a489 2
      // FIXME: Temp. workaround for gcc asm error (see cygtls.h)
      NtCurrentTeb()->Tib.StackBase = (PVOID) stackbottom;
d903 2
a904 3
	  // FIXME: Temp. workaround for gcc asm error (see cygtls.h)
	  NtCurrentTeb()->Tib.StackBase = (PVOID) fork_info->stackbottom;
	  NtCurrentTeb()->Tib.StackLimit = (PVOID) fork_info->stacktop;
@


1.434.2.12
log
@	* cygtls.h: Cleanup x86_64 related comment.
	(_tlsbase): Change return type to PVOID.
	(_tlstop): Ditto.
	(_my_tls): Accommodate above change.
	* dcrt0.cc (child_info_fork::alloc_stack): Revert previous patch, but
	keep cast to PVOID.
	(dll_crt0_1): Ditto.
	* exception.h: Define _exception_list as _EXCEPTION_REGISTRATION_RECORD
	on x86_64.
	(_except_list): Define in terms of NtCurrentTeb() on x86_64.
	* miscfuncs.cc (__import_address): Handle 32 bit absolute addressing
	in IAT on x86_64.
	* include/cygwin/config.h (___getreent): New inline function on
	x86_64.  Define __getreent in terms of ___getreent on x86_64.  Fix
	comment accordingly.
@
text
@d489 2
a490 1
      _tlsbase = (PVOID) stackbottom;
d904 3
a906 2
	  _tlsbase = (PVOID) fork_info->stackbottom;
	  _tlstop = (PVOID) fork_info->stacktop;
@


1.434.2.13
log
@...and pull in changes from HEAD
@
text
@a837 2
  _my_tls.incyg++;

a906 2
      /* Not resetting _my_tls.incyg here because presumably fork will overwrite
	 it with the value of the forker and all will be good.   */
d1005 1
a1005 7
  if (!user_data->main)
    {
      /* Handle any signals which may have arrived */
      _my_tls.call_signal_handler ();
      _my_tls.incyg--;	/* Not in Cygwin anymore */
    }
  else
a1015 3
      /* Handle any signals which may have arrived */
      _my_tls.call_signal_handler ();
      _my_tls.incyg--;	/* Not in Cygwin anymore */
@


1.434.2.14
log
@Pull in changes from HEAD
@
text
@d1138 1
a1138 1
void __reg1
@


1.434.2.15
log
@	* cygwin.sc.in (.rdata): Add .rdata_cygwin_nocopy subsection.
	(.cygheap): Raise size to 3 Megs on x86_64.
	* dcrt0.cc (dll_crt0_0): Drop call to init_global_security.
	* dtable.cc (std_consts): Drop NO_COPY.
	* errno.cc (errmap): Drop NO_COPY, constify instead.
	(_sys_errlist): Drop NO_COPY.
	* fhandler_clipboard.cc (CYGWIN_NATIVE): Ditto.
	* fhandler_console.cc (keytable): Drop NO_COPY, constify instead.
	* grp.cc (null_ptr): Make NO_COPY_RO.
	* heap.cc (eval_start_address): Fix comment.
	* localtime.cc (wildabbr): Make NO_COPY_RO.
	(gmt): Ditto.
	* miscfuncs.cc (case_folded_lower): Drop NO_COPY.
	(case_folded_upper): Ditto.
	(isalpha_array): Ditto.
	(nice_to_winprio): Ditto for priority.
	(class thread_allocator): New class to allocate thread stack on x86_64.
	(thr_alloc): Define global NO_COPY instant of thread_allocator.
	(CygwinCreateThread): Call thr_alloc.alloc on x86_64 to reserve stack.
	* net.cc (errmap): Drop NO_COPY, constify instead.
	(host_errmap): Ditto.
	* netdb.cc (SPACE): Drop NO_COPY.
	* sec_helper.cc (null_sdp): Static NO_COPY_RO definition of null SD.
	(sec_none): Define NO_COPY_RO, define content statically.
	(sec_none_nih): Ditto.
	(sec_all): Ditto.
	(sec_all_nih): Ditto.
	(get_null_sd): Remove.
	(init_global_security): Remove.
	* security.cc (file_mapping): Define NO_COPY_RO.
	(check_registry_access): Ditto for reg_mapping.
	* spawn.cc (exe_suffixes): Drop NO_COPY, constify instead.
	(dll_suffixes): Drop unused, disabled definition and comment.
	* strsig.cc (sys_sigabbrev): Drop NO_COPY_INIT.
	(sys_siglist): Ditto.
	* syscalls.cc (def_shells): Drop NO_COPY.
	* winsup.h (NO_COPY_RO): Define to place variable in
	.rdata_cygwin_nocopy section.
	(init_global_security): Drop declaration.
@
text
@d741 1
@


1.434.2.16
log
@	For x86_64 target:
	* Makefile.in (COMMON_CFLAGS): Add -mcmodel=small to create smaller
	footprint.
	* cygwin64.din (__cygwin_environ): Drop export.  Only export environ
	as alias to __cygwin_environ.
	* dcrt0.cc (dll_crt0_1): Call main with __cygwin_environ as parameter.
	(_dll_crt0): Don't set main_environ.
	(cygwin_dll_init): Don't create local variable envp and don't set
	user_data->envptr.
	* dll_init.cc (dll_list::alloc): Don't assert.
	* dll_init.h (per_module::operator =): Don't set envptr.
	* environ.cc (cur_environ): Disable.
	* environ.h (main_environ): Don't define.
	(cur_environ): Change to macro.
	* globals.cc (main_environ): Don't initialize.
	(struct per_process): Drop envptr.
	* perprocess.h (SIZEOF_PER_PROCESS): Set to 41*8 to accommodate size
	change of struct per_process.
	* include/sys/cygwin.h (struct per_process): Drop envptr.
	* lib/_cygwin_crt0_common.cc (environ): Drop declaration.
	(_cygwin_crt0_common): Don't set u->envptr.
@
text
@a1027 3
#ifdef __x86_64__
      cygwin_exit (user_data->main (__argc, newargv, __cygwin_environ));
#else
a1028 1
#endif
a1074 1
#ifndef __x86_64__
a1075 1
#endif
a1107 1
#ifndef __x86_64__
a1108 1
#endif
a1112 1
#ifndef __x86_64__
a1113 1
#endif
@


1.434.2.17
log
@	* dcrt0.cc (child_info_fork::handle_fork): Call
	_pei386_runtime_relocator first thing, before copying parent data and
	bss segment.  Tweak comment to explain why.
@
text
@a611 5
  /* Do the relocations here.  Do them *before* copying data and bss,
     otherwise we end up relocating the already relocated parent data
     here in the child again. */
  _pei386_runtime_relocator (user_data);

d629 4
@


1.434.2.18
log
@	* cygwin.sc.in: Fix comment.
	* dcrt0.cc (child_info_fork::handle_fork): Revert patch from 2013-03-15.
@
text
@d612 5
a633 4
  /* Do the relocations here.  These will actually likely be overwritten by the
     below child_copy but we do them here in case there is a read-only section
     which does not get copied by fork. */
  _pei386_runtime_relocator (user_data);
@


1.434.2.19
log
@Pull in changes from HEAD
@
text
@d400 1
a400 1
child_info NO_COPY *child_proc_info;
a837 3
  /* Inherit "parent" exec'ed process sigmask */
  if (spawn_info && !in_forkee)
    _my_tls.sigmask = spawn_info->moreinfo->sigmask;
a1025 1
      sig_dispatch_pending (false);
@


1.433
log
@* fhandler_termios.cc (fhandler_termios::line_edit): Use special case '%0c'
handling to print non-printable characters using hex notation.
* smallprint.cc (__small_vsprintf): Semi-reimplement printing of non-printable
characters in hex but only when padding is specified.
* dcrt0.cc (dll_crt0_0): Remove tty_list initialization.
* shared.cc (memory_init): Initialize tty_list here.
* path.cc (path_conv::check): Remove unneeded parentheses from if check.
@
text
@a775 2
  _cygtls::init ();

@


1.432
log
@* DevNotes: Add entry cgf-000013.
* cygserver_ipc.h (ipc_set_proc_info): Use _cygtls::ipc_set_proc_info to set
per-thread signal arrived value.
* cygthread.cc (cygthread::detach): Use per-thread signal_arrived via
set_thread_waiting.
* fork.cc (_cygtls::fixup_after_fork): Clear signal_arrived.
(_cygtls::remove): Close any signal_arrived handle when thread exists.
(_cygtls::find_tls): Remove unneeded function.
* cygtls.h: Update copyright.
(class _cygtls): Reorganize to help avoid rebuilding newlib when structure
changes.
(_cygtls::event): Delete.
(_cygtls::threadkill): Ditto.
(_cygtls::signal_waiting): Declare new bool.
(_cygtls::find_tls): Delete declaration.
(_cygtls::set_threadkill): Ditto.
(_cygtls::reset_threadkill): Ditto.
(_cygtls::set_signal_arrived): Declare new function.
(class set_thread_waiting): Declare new class.
* cygwait.cc (cw_nowait_storage): Define.
(cygwait): Set per-thread signal_arrived via set_thread_waiting.  Don't
special-case _main_tls.
* cygwait.h (cw_nowait): Define.
(cw_infinite): Ditto.
(cygwait): Redefine pathological wait-only case.
* dcrt0.cc (dll_crt0_0): Remove call to now-defunct events_init().
(dll_crt0_1): Remove call to now-defunct create_signal_arrived().
* exceptions.cc: Reflect set_signal_mask() argument reordering throughout.
Remove signal mask synchronization throughout.
(events_init): Delete definition.
(mask_sync): Delete now-unneeded mask synchronization.
(set_signal_mask): Reverse order of arguments to "standard" to, from layout.
Rename "newmask" argument to "setmask".  Remove debugging.
(sig_handle_tty_stop): Use cancelable_wait rather than WFMO.
(_cygtls::interrupt_setup): Don't treat "threadkill" events specially.
Conditionally set signal_arrived depending on whether the thread has created it
or not.
(sigpacket::process): Reorganize to reflect thread-specific sending of signals
which is more in line with the way it was actually supposed to work.
* fhandler_socket.cc (get_inet_addr): Use cancelable_wait rather than
IsEventSignalled to avoid potential race.
(fhandler_socket::wait_for_events): Set signal_arrived event using
set_thread_waiting().
(fhandler_socket::close): Use cygwait for the case of just waiting 10 ms for a
signal.
* fhandler_tape.cc (fhandler_dev_tape::_lock): Use cancelable_wait rather than
WFMO.  Redo switch/case tests accordingly.
* fhandler_termios.cc (fhandler_termios::bg_check): Use cygwait for case of
just waiting 0 ms for a potential signal.
* fhandler_tty.cc (fhandler_pty_master::process_slave_output): Use
cancelable_wait rather than WFSO.
* fhandler_windows.cc (fhandler_windows::read): Set per-thread signal_arrived
via set_thread_waiting().
* flock.cc (lf_setlock): Ditto.
* select.cc (pselect): Ditto.  Set per-thread signal_arrived using
set_thread_waiting().
* gendef: Don't special case handling of _cygtls::sig for threads.
* gentls_offsets: Use #pragma once in tlsoffsets.h.
* ntdll.h: Use #pragma once.
* poll.cc: Reflect set_signal_mask() argument reordering.
* posix_ipc.cc (ipc_mutex_lock): Use cancelable_wait rather than WFMO.
(ipc_cond_timedwait): Set perl-thread signal arrived using
set_thread_waiting().
* security.h: Use #pragma once.
* signal.cc (abort): Reflect set_signal_mask() argument reordering.
(clock_nanosleep): Ditto.  Change call to cancelable_wait to properly specify
handling of cancel and interrupt.
(sigwaitinfo): Remove handling of per-thread event in favor of per-thread
signal_arrived.  Use cancelable_wait rather than WFSO.
* sigproc.cc (signal_arrived): Delete definition.
(create_signal_arrived): Ditto.
* sigproc.h (signal_arrived): Delete declaration.
(set_signal_mask): Avoid defining as a "C" function.  Don't conditionally
declare.
(create_signal_arrived): Delete declaration.
* syscalls.cc (rename): Use cygwait() rather than WFSO.
* thread.h (fast_mutex::lock): Use cw_infinite rather than LARGE_NULL.
* wait.cc (wait4): Ditto.
* thread.cc (pthread_mutex::lock): Ditto.
(pthread::join): Ditto.
(semaphore::_wait): Ditto.
(pthread_kill): Remove set_threadkill() accommodation.
* tlsoffsets.h: Regenerate.
@
text
@a776 1
  tty_list::init_session ();
@


1.431
log
@* dcrt0.cc (build_argv): Guard against NULL pointer dereference found by Clang.
@
text
@a776 3

  /* Initialize events */
  events_init ();
a842 2
  create_signal_arrived (); /* FIXME: move into wait_sig? */

@


1.430
log
@Revert errneous checkin.
Check in actual change associated with ChangeLog.
@
text
@d356 2
a357 1
  argv[argc] = NULL;
@


1.429
log
@* cygwait.cc (cancelable_wait): Mimic old cygwait behavior more closely wrt
handling of call_signal_handler.
* cygwait.h (WAIT_CANCELED): Move here and redefine.
(WAIT_SIGNALED): Ditto.
* thread.h (WAIT_CANCELED): Delete.
(WAIT_SIGNALED): Ditto.
@
text
@d845 2
@


1.428
log
@* DevNotes: Add entry cgf-000007.
* child_info.h (child_info_spawn::parent_winpid): Declare new field.
(child_info_spawn::get_parent_handle): Declare new function.
* dcrt0.cc (child_info_spawn::get_parent_handle): Define new function.
(child_info_spawn::handle_spawn): Recreate parent handle if possible when
dynamically loaded.  Don't mess with parent handle if it's NULL.
* spawn.cc (child_info_spawn::worker): Set parent_winpid appropriately.
@
text
@a844 2
  create_signal_arrived (); /* FIXME: move into wait_sig? */

@


1.427
log
@* DevNotes: Add entry cgf-000003.
* cygheap.h (init_cygheap::pid_handle): Delete.
* dcrt0.cc (child_info_spawn::handle_spawn): Keep parent open if we have
execed.
* pinfo.cc (pinfo::thisproc): Remove pid_handle manipulations.
(pinfo::init): Don't consider a reaped process to be available.
* spawn.cc (child_info_spawn::worker): Remove pid_handle manipulations.  Make
wr_proc_pipe and parent noninheritable when starting a program which doesn't
use the Cygwin DLL.  Conditionally reset wr_proc_pipe to inheritable if
CreateProcess fails.  Inject wr_proc_pipe handle into non-Cygwin process.
Consider a non-cygwin process to be 'synced'.
@
text
@d628 8
d641 5
a645 2
  cygheap_fixup_in_child (true);
  memory_init (false);
d683 1
a683 1
  if (type != _CH_EXEC)
@


1.426
log
@* dtable.cc (set_std_handle): Call SetStdHandle with NULL if fd is closed.
(dtable::release): "Close" standard handle if appropriate.
* dcrt0.cc (dll_crt0_0): Fix minor switch formatting problem.
* fork.cc (frok::parent): Make minor comment indentation change.
@
text
@d668 3
a670 1
  /* Need to do this after debug_fixup_after_fork_exec or DEBUGGING handling of
d672 5
a676 2
  CloseHandle (child_proc_info->parent);
  child_proc_info->parent = NULL;
@


1.425
log
@* child_info.h (CURR_CHILD_INFO_MAGIC): Reset.
(child_info::rd_proc_pipe): Declare new field.
(child_info::wr_proc_pipe): Ditto.
(child_info::prefork): Declare new function, derived from previous pinfo
version.
* dcrt0.cc (child_info_fork::handle_fork): Close previous wr_proc_pipe when
appropriate and assign new one from passed-in child_info block.
(child_info_spawn::handle_spawn): Assign our wr_proc_pipe handle from passed-in
child_info block.
* fork.cc (child_info::prefork): Define new function.
(frok::child): Clear rd_proc_pipe and wr_proc_pipe so they will not be closed
by the child_info destructor.
(frok::parent): Use child_info prefork handling, outside of retry loop.  Set
rd_proc_pipe in child's pinfo after successful CreateProcess.  Eliminate
postfork call.
* globals.cc (my_wr_proc_pipe): Define/declare new variable.
* pinfo.cc (pinfo::pending_rd_proc_pipe): Delete.
(pinfo::pending_wr_proc_pipe): Ditto.
(pinfo::prefork): Ditto.
(pinfo::postfork): Ditto.
(pinfo::postexec): Ditto.
(pinfo::wait): Assume that rd_proc_pipe is set up correctly prior to call.
(_pinfo::alert_parent): Replace "wr_proc_pipe" with "my_wr_proc_pipe".
* pinfo.h (_pinfo::_wr_proc_pipe): Delete declaration.
(_pinfo::set_rd_proc_pipe): Define new function.
(pinfo::pending_rd_proc_pipe): Delete declaration.
(pinfo::pending_wr_proc_pipe): Ditto.
(pinfo::prefork): Ditto.
(pinfo::postfork): Ditto.
(pinfo::postexec): Ditto.
(pinfo::wr_proc_pipe): Ditto.
* sigproc.cc (child_info::child_info): Clear rd_proc_pipe and wr_proc_pipe.
(child_info::cleanup): Close rd_proc_pipe and wr_proc_pipe if necessary.
(child_info_fork::child_info_fork): Set forker_finished to NULL by default.
(child_info_spawn::child_info_spawn): Use my_wr_proc_pipe rather than
myself->wr_proc_pipe.
(child_info::sync): Ditto.
(child_info_spawn::cleanup): Call child_info::cleanup.
* spawn.cc (child_info_spawn::worker): Remove call to myself.prefork().  Set
wr_proc_pipe when execing or set up new rd_proc_pipe/wr_proc_pipe via
child_info::prefork when spawning.  Remove call to pinfo::postexec.  Set
rd_proc_pipe in child pinfo when spawning.  Use my_wr_proc_pipe rather than
myself->wr_proc_pipe.  Remove call to postfork.
@
text
@d747 7
a753 7
	  case _CH_FORK:
	    fork_info->handle_fork ();
	    break;
	  case _CH_SPAWN:
	  case _CH_EXEC:
	    spawn_info->handle_spawn ();
	    break;
@


1.424
log
@	* init.cc (dll_entry): Move wincap.init call back from here...
	* dcrt0.cc (dll_crt0_0): ...to here.
@
text
@d601 11
d640 7
@


1.423
log
@	* dcrt0.cc (is_dos_path): New macro to recognize drive letter and UNC
	DOS paths.
	(globify): Call is_dos_path instead of isdrive.
@
text
@d4 1
a4 1
   2007, 2008, 2009, 2010, 2011 Red Hat, Inc.
d686 1
@


1.422
log
@	* dcrt0.cc (_dll_crt0): Rephrase comments.  Set $ebp to NULL, as in
	the pthread stack setup.
	* wow64.cc (wow64_revert_to_original_stack): Rephrase some comments.
	Return _tlsbase-16 rather than _main_tls-4 so as not to waste stack.
@
text
@d197 8
d213 1
a213 1
  int dos_spec = isdrive (word);
d215 1
a215 1
    dos_spec = isdrive (word + 1);
@


1.421
log
@	* dcrt0.cc (dll_crt0_0): Check for wincap.wow64_has_secondary_stack
	rather than for wincap.is_wow64.  Accommodate name change from
	wow64_has_64bit_parent to wow64_needs_stack_adjustment.  Align comment.
	(_dll_crt0): Ditto.
	* wincap.h (wincaps::wow64_has_secondary_stack): New element.
	* wincap.cc: Implement above element throughout.
	(wincapc::init): Set wow64_has_secondary_stack to false on non-64 bit
	systems.
	* wow64.cc (wow64_needs_stack_adjustment): Rename (hopefully the last
	time) from wow64_has_64bit_parent.
	(wow64_eval_expected_main_stack): Fix comment to reflect real life.
	(wow64_test_for_64bit_parent): Fix comment.
	* wow64.h (wow64_needs_stack_adjustment): Accommodate new name.
@
text
@d954 2
a955 2
      /* Must be static since it's referenced after the stack pointers have
	 been moved. */
d958 2
a959 1
      /* Check if we just move the stack.  See comment in
d964 2
a965 1
	  /* 2nd half of the stack move.  Set stack pointers to new address. */
d968 1
a968 1
		   movl  %%esp, %%ebp   \n"
@


1.420
log
@Clean up whitespace.
@
text
@d708 6
a713 5
      /* WOW64 process?  Check if we have been started from 64 bit process
	 and if our stack is at an unusual address.  Set wow64_has_64bit_parent
	 if so.  Problem description in wow64_test_for_64bit_parent. */
      if (wincap.is_wow64 ())
	wow64_has_64bit_parent = wow64_test_for_64bit_parent ();
d949 4
a952 3
  /* Handle WOW64 process started from native 64 bit process.  See comment
     in wow64_test_for_64bit_parent for a full problem description. */
  if (wow64_has_64bit_parent && !dynamically_loaded)
@


1.419
log
@	* dcrt0.cc (_dll_crt0): Fix formatting.
@
text
@d469 1
a469 1
         64 bit process, but it doesn't hurt to do it unconditionally.  Fix
d709 1
a709 1
         and if our stack is at an unusual address.  Set wow64_has_64bit_parent
@


1.418
log
@	* dcrt0.cc (child_info_fork::alloc_stack): Correctly check if the
	parent stack fits into the child stack.  Align comment.
	* wow64.cc (wow64_eval_expected_main_stack): New function to fetch
	expected addresses of main thread stack from PE/COFF image header
	values.
	(wow64_test_for_64bit_parent): Fix comment.  Check current stack
	against real expected main thread stack addresses.
	(wow64_revert_to_original_stack): Fix and add comments. Check memory
	against real expected main thread stack addresses.  Use orignal stack
	if reserved area is >= 256K.
@
text
@d961 1
a961 2
	  /* 2nd half of the stack move.  First set stack pointers to
	     our new address. */
d967 2
a968 4
	     former main thread stack and... */
	  VirtualFree (NtCurrentTeb ()->DeallocationStack,
		       0, MEM_RELEASE);
	  /* ...set DeallocationStack correctly. */
@


1.417
log
@	* Makefile.in (DLL_OFILES): Add wow64.o.
	* dcrt0.cc (CYGWIN_GUARD): Drop execute permission for stack, it's
	not used for stacks by the OS either.
	(child_info_fork::alloc_stack_hard_way): Ditto.
	(child_info_fork::alloc_stack): Don't alloc_stack_hard_way under WOW64
	if forked from a 64 bit parent.  Set child's StackBase to parent's
	StackBase.  Add comments to explain why.
	(wow64_respawn): Move to wow64.cc.
	(wow64_started_from_native64): Move to wow64.cc.
	(respawn_wow64_process): Move to wow64.cc.
	(dll_crt0_0): Drop wow64_test_stack_marker and move stack test into
	wow64_test_for_64bit_parent function.  Don't return early if WOW64
	process has been started from native 64 bit process.
	(_dll_crt0): Implement moving stack for WOW64 processes started from
	native 64 bit process.
	* wow64.cc: New file.
	(wow64_has_64bit_parent): Rename from wow64_respawn.
	(wow64_test_for_64bit_parent): Rename from wow64_started_from_native64.
	Change comment.
	(wow64_revert_to_original_stack): New function.
	(wow64_respawn_process): Rename from respawn_wow64_process for symmetry.
	* wow64.h: New file.
@
text
@d455 2
a456 2
     wow64_revert_to_original_stack for details. We just check here if the
     stack is in the usual range for the main thread stack. */
d458 3
a460 1
      && (!wincap.is_wow64 () || stackbottom > (char *) 0x400000))
@


1.416
log
@* dcrt0.cc (init_windows_system_directory): Record system_wow64_directory
information.
* exceptions.cc (_cygtls::inside_kernel): Modernize comment.  Consider
executing a DLL from the Wow64 directory as being "in the kernel".
(_cygtls::call_signal_handler): For now, only deal with main_tls signals if
main_tls is known to be executing in the cygwin DLL.  To more closely emulate
linux, consider the operation to be restartable if not executing in the main
thread.
* globals.cc (windows_system_directory): Remove NO_COPY.
(windows_system_directory_length): Ditto.
(system_wow64_directory): New variable.
(system_wow64_directory_length): Ditto.
* select.cc (cygwin_select): Don't issue a EINTR on non-main threads since that
seems to be what Linux does.  Add missing break to signal case/switch.
(select_stuff::wait): Don't issue a EINTR on non-main threads since that seems
to be what Linux does.  Remove now-unneeded accommodation for
WAIT_IO_COMPLETION.  Add a comment.
* sigproc.h (cygwait): Ditto.  Don't return if signal_received noticed and it's
not the main thread.
* signal.cc (sigprocmask): Add standard syscall debug stuff.
* thread.cc (pthread_sigmask): Ditto.
@
text
@d40 1
d389 1
a389 1
#define CYGWIN_GUARD (PAGE_EXECUTE_READWRITE | PAGE_GUARD)
d412 1
a412 2
  stack_ptr = VirtualAlloc (stacktop, stacksize, MEM_COMMIT,
			    PAGE_EXECUTE_READWRITE);
d450 9
a458 1
  if (_tlsbase != stackbottom)
d466 5
a672 69
static bool NO_COPY wow64_respawn = false;

inline static bool
wow64_started_from_native64 ()
{
  /* On Windows XP 64 and 2003 64 there's a problem with processes running
     under WOW64.  The first process started from a 64 bit process has an
     unusual stack address for the main thread.  That is, an address which
     is in the usual space occupied by the process image, but below the auto
     load address of DLLs.  If we encounter this situation, check if we
     really have been started from a 64 bit process here.  If so, we exit
     early from dll_crt0_0 and respawn first thing in dll_crt0_1.  This
     ping-pong game is necessary to workaround a problem observed on
     Windows 2003 R2 64.  Starting with Cygwin 1.7.10 we don't link against
     advapi32.dll anymore.  However, *any* process linked against advapi32,
     directly or indirectly, now fails to respawn if respawn_wow_64_process
     is called during DLL_PROCESS_ATTACH initialization.  In that case
     CreateProcessW returns with ERROR_ACCESS_DENIED for some reason.
     Calling CreateProcessW later, inside dll_crt0_1 and so outside of
     dll initialization works as before, though. */
  NTSTATUS ret;
  PROCESS_BASIC_INFORMATION pbi;
  HANDLE parent;

  ULONG wow64 = TRUE;   /* Opt on the safe side. */

  /* Unfortunately there's no simpler way to retrieve the
     parent process in NT, as far as I know.  Hints welcome. */
  ret = NtQueryInformationProcess (NtCurrentProcess (),
                                   ProcessBasicInformation,
                                   &pbi, sizeof pbi, NULL);
  if (NT_SUCCESS (ret)
      && (parent = OpenProcess (PROCESS_QUERY_INFORMATION,
                                FALSE,
                                pbi.InheritedFromUniqueProcessId)))
    {
      NtQueryInformationProcess (parent, ProcessWow64Information,
                                 &wow64, sizeof wow64, NULL);
      CloseHandle (parent);
    }
  return !wow64;
}

inline static void
respawn_wow64_process ()
{
  /* The parent is a real 64 bit process.  Respawn. */
  WCHAR path[PATH_MAX];
  PROCESS_INFORMATION pi;
  STARTUPINFOW si;
  DWORD ret = 0;

  GetModuleFileNameW (NULL, path, PATH_MAX);
  GetStartupInfoW (&si);
  if (!CreateProcessW (path, GetCommandLineW (), NULL, NULL, TRUE,
		       CREATE_DEFAULT_ERROR_MODE
		       | GetPriorityClass (GetCurrentProcess ()),
		       NULL, NULL, &si, &pi))
    api_fatal ("Failed to create process <%W> <%W>, %E",
	       path, GetCommandLineW ());
  CloseHandle (pi.hThread);
  if (WaitForSingleObject (pi.hProcess, INFINITE) == WAIT_FAILED)
    api_fatal ("Waiting for process %d failed, %E", pi.dwProcessId);
  GetExitCodeProcess (pi.hProcess, &ret);
  CloseHandle (pi.hProcess);
  TerminateProcess (GetCurrentProcess (), ret);
  ExitProcess (ret);
}

d706 5
a710 9
      /* WOW64 bit process with stack at unusual address?  Check if we
	 have been started from 64 bit process ans set wow64_respawn.
	 Full description in wow64_started_from_native64 above. */
      BOOL wow64_test_stack_marker;
      if (wincap.is_wow64 ()
	  && &wow64_test_stack_marker >= (PBOOL) 0x400000
	  && &wow64_test_stack_marker <= (PBOOL) 0x10000000
	  && (wow64_respawn = wow64_started_from_native64 ()))
	return;
d946 30
a975 4
  /* Respawn WOW64 process started from native 64 bit process.  See comment
     in wow64_started_from_native64 above for a full description. */
  if (wow64_respawn)
    respawn_wow64_process ();
@


1.415
log
@	* dcrt0.cc (wow64_respawn): New static variable.
	(wow64_started_from_native64): New function to check if a WOW64
	process got started from a native 64 bit process.
	(respawn_wow64_process): New function to respawn process.
	(dll_crt0_0): When started from a native parent, check if parent
	is a 64 bit process.  If so, return early.
	(_dll_crt0): Respawn WOW64 process here if required.
	* init.cc (respawn_wow64_process): Remove.
	(dll_entry): Rename wow64_test_stack_marker to test_stack_marker.
	Drop WOW64 test here.
@
text
@d641 17
a657 6
  windows_system_directory_length =
	GetSystemDirectoryW (windows_system_directory, MAX_PATH);
  if (windows_system_directory_length == 0)
    api_fatal ("can't find windows system directory");
  windows_system_directory[windows_system_directory_length++] = L'\\';
  windows_system_directory[windows_system_directory_length] = L'\0';
@


1.414
log
@Add ChangeLog entry for previous change and revert erroneously checked in
changes to dcrt0.cc and init.cc
@
text
@d649 69
d749 12
a760 1
    memory_init (true);
d995 4
@


1.413
log
@Clarify entry
@
text
@a648 69
bool NO_COPY wow64_respawn = false;

inline static bool
wow64_started_from_native64 ()
{
  /* On Windows XP 64 and 2003 64 there's a problem with processes running
     under WOW64.  The first process started from a 64 bit process has an
     unusual stack address for the main thread.  That is, an address which
     is in the usual space occupied by the process image, but below the auto
     load address of DLLs.  If we encounter this situation, check if we
     really have been started from a 64 bit process here.  If so, we exit
     early from dll_crt0_0 and respawn first thing in dll_crt0_1.  This
     ping-pong game is necessary to workaround a problem observed on
     Windows 2003 R2 64.  Starting with Cygwin 1.7.10 we don't link against
     advapi32.dll anymore.  However, *any* process linked against advapi32,
     directly or indirectly, now fails to respawn if respawn_wow_64_process
     is called during DLL_PROCESS_ATTACH initialization.  In that case
     CreateProcessW returns with ERROR_ACCESS_DENIED for some reason.
     Calling CreateProcessW later, inside dll_crt0_1 and so outside of
     dll initialization works as before, though. */
  NTSTATUS ret;
  PROCESS_BASIC_INFORMATION pbi;
  HANDLE parent;

  ULONG wow64 = TRUE;   /* Opt on the safe side. */

  /* Unfortunately there's no simpler way to retrieve the
     parent process in NT, as far as I know.  Hints welcome. */
  ret = NtQueryInformationProcess (NtCurrentProcess (),
                                   ProcessBasicInformation,
                                   &pbi, sizeof pbi, NULL);
  if (NT_SUCCESS (ret)
      && (parent = OpenProcess (PROCESS_QUERY_INFORMATION,
                                FALSE,
                                pbi.InheritedFromUniqueProcessId)))
    {
      NtQueryInformationProcess (parent, ProcessWow64Information,
                                 &wow64, sizeof wow64, NULL);
      CloseHandle (parent);
    }
  return !wow64;
}

inline static void
respawn_wow64_process ()
{
  /* The parent is a real 64 bit process.  Respawn. */
  WCHAR path[PATH_MAX];
  PROCESS_INFORMATION pi;
  STARTUPINFOW si;
  DWORD ret = 0;

  GetModuleFileNameW (NULL, path, PATH_MAX);
  GetStartupInfoW (&si);
  if (!CreateProcessW (path, GetCommandLineW (), NULL, NULL, TRUE,
		       CREATE_DEFAULT_ERROR_MODE
		       | GetPriorityClass (GetCurrentProcess ()),
		       NULL, NULL, &si, &pi))
    api_fatal ("Failed to create process <%W> <%W>, %E",
	       path, GetCommandLineW ());
  CloseHandle (pi.hThread);
  if (WaitForSingleObject (pi.hProcess, INFINITE) == WAIT_FAILED)
    api_fatal ("Waiting for process %d failed, %E", pi.dwProcessId);
  GetExitCodeProcess (pi.hProcess, &ret);
  CloseHandle (pi.hProcess);
  TerminateProcess (GetCurrentProcess (), ret);
  ExitProcess (ret);
}

a652 10
  BOOL wow64_test_stack_marker;
  if (!child_proc_info
      && wincap.is_wow64 ()
      /* WOW64 bit process with stack at unusual address?  Check if we
	 have been started from 64 bit process ans set wow64_respawn.
	 Full description in wow64_started_from_native64 above. */
      && &wow64_test_stack_marker >= (PBOOL) 0x400000
      && &wow64_test_stack_marker <= (PBOOL) 0x10000000
      && (wow64_respawn = wow64_started_from_native64 ()))
    return;
a914 4
  /* Respawn WOW64 process started from native 64 bit process.  See comment
     in wow64_started_from_native64 above for a full description. */
  if (wow64_respawn)
    respawn_wow64_process ();
@


1.412
log
@* cygthread.h (cygthread::name): Default name to "main" if we are early in the
process of setting up the DLL and no name is known.
* dcrt0.cc (initial_env): Remove CYGWIN_SLEEP stuff.
(get_cygwin_startup_info): Activate strace here as appropriate.
(dll_crt0_0): Move get_cygwin_startup_info as early as possible to avoid
missing strace output.
* fork.cc (frok::child): Move debugging statement to point where ppid will be
set.
* pinfo.cc (pinfo::thisproc): Remove obsolete call to strace.hello.  Tweak
debug output slightly.
* select.cc (select_stuff::wait): Allow APCS to be triggered while waiting
since we use them now.  Report when that happens.
* sigproc.cc (child_info::child_info): Use strace.active() rather than
strace.attached().
* spawn.cc (child_info_spawn::worker): Only write strace child pid when we know
it's a cygwin process.  Accommodate change to write_child argument list.
* strace.cc (strace::hello): Delete.  Move functionality...
(strace::activate): ...to here.
(mypid): Just use raw GetCurrentProcessId () if myself isn't set.
(strace::write_childpid): Don't wait for subproc_ready.  Remove arg which was
required for it.
* include/sys/strace.h (strace::hello): Delete.
(strace::write_childpid): Delete first argument.
@
text
@d649 69
d722 10
d994 4
@


1.411
log
@* child_info.h (CURR_CHILD_INFO_MAGIC): Reset for previous changes.
* dcrt0.cc (get_cygwin_startup_info): Signal readiness when stracing since
strace::write_child relies on it.  Use strace.activate to notify strace
process, passing in arg indicating whether we're forked.
* sigproc.cc (wait_sig): Accommodate new strace::activate argument.
* spawn.cc (child_info_spawn::worker): Oops.  Previous suspended test was
actually correct.  Revert and document.
* strace.cc (strace::activate): Send additional flag indicating whether this is
an attempt to activate a forked process.
(strace::hello): Report on windows pid.
* include/sys/strace.h (strace::strace): Make a dummy.
(strace::activate): Modify declaration to accept an argument.
(strace::write_childpid): Set regparm.
@
text
@d477 1
a478 10
  DWORD len;

  if (GetEnvironmentVariableA ("CYGWIN_SLEEP", buf, sizeof (buf) - 1))
    {
      DWORD ms = atoi (buf);
      console_printf ("Sleeping %d, pid %u %P\n", ms, GetCurrentProcessId ());
      Sleep (ms);
      if (!strace.active () && !dynamically_loaded)
	strace.hello ();
    }
a499 1

d512 4
a515 1
    res = NULL;
d541 1
a541 2
		res->ready (false);
		for (unsigned i = 0; !being_debugged () && i < 1000000; i++)
d652 1
a678 1
  child_proc_info = get_cygwin_startup_info ();
@


1.410
log
@* child_info.h (CURR_CHILD_INFO_MAGIC): Reset.
(cygheap_exec_info::nchildren): Move from child_info_spawn.
(cygheap_exec_info::cchildren): Ditto.
(cygheap_exec_info::record_children): Declare new function.
(cygheap_exec_info::reattach_children): Ditto.
(cygheap_exec_info::alloc): Ditto.
(child_info_spawn::nchildren): Move to cygheap_exec_info.
(child_info_spawn::cchildren): Ditto.
* sigproc.cc (cygheap_exec_info::alloc): Define new function.
(child_info_spawn::cleanup): Accommodate move of children info to
cygheap_exec_info.
(cygheap_exec_info::record_children): Define new function.
(cygheap_exec_info::reattach_children): Ditto.
(child_info_spawn::record_children): Use cygheap_exec_info function to
accomplish this task.
(child_info_spawn::reattach_children): Ditto.
* spawn.cc (child_info_spawn::worker): Allocate moreinfo using
cygheap_exec_info::alloc.
* dcrt0.cc (child_info_fork::alloc_stack_hard_way): Use abort for the error to
avoid a retry.
@
text
@d548 2
a549 1
		for (unsigned i = 0; !being_debugged () && i < 10000; i++)
d551 1
a551 1
		strace.hello ();
@


1.409
log
@Throughout use "have_execed" macro rather than "hExeced" global handle.
Throughout rename _PROC_* to _CH_*.
* child_info.h: Include "pinfo.h".
(child_info_types): Rename _PROC_* -> _CH_* to avoid confusion with similarly
named constants.
(_PROC_*): Delete unneeded aliases.
(PROC_*): Ditto.
(CURR_CHILD_INFO_MAGIC): Ditto.
(cchildren): Define using "pinfo_minimal".
(child_info::set_saw_ctrl_c): Move to
(child_info_spawn::set_saw_ctrl_c): Here.
(child_info_spawn::lock): New field.
(child_info_spawn::hExeced): Ditto.
(child_info_spawn::ev): Ditto.
(child_info_spawn::~child_info_spawn): Move to sigproc.cc.
(child_info_spawn::child_info_spawn): Ditto.
(child_info_spawn::cleanup): Declare new function.
(child_info_spawn::set_saw_ctrl_c): Move to this class.  Set flag only when
execed and return true when we have set the flag.
(child_info_spawn::child_info_spawn::signal_myself_exited): New function.
(child_info_spawn::wait_for_myself): Ditto.
(child_info_spawn::has_execed_cygwin): Ditto.
(child_info_spawn::has_execed): Ditto.  Replaces "hExeced" test.
(child_info_spawn::operator HANDLE&): New operator.
(child_info_spawn::worker): Define old "spawn_guts" as class member.
(ch_spawn): Declare.
(have_execed): Define.
(have_execed_cygwin): Ditto.
* cygheap.h: Update comment.
* dcrt0.cc (get_cygwin_startup_info): Use _CH_* enums.
(child_info_spawn::handle_spawn): Ditto.
(dll_crt0_0): Ditto.
(multiple_cygwin_problem): Ditto.
* exceptions.cc (chExeced): Delete obsolete declaration.
(ctrl_c_handler): Reference set_saw_ctrl_c via new ch_spawn global.
* globals.cc (hExeced): Delete.
* pinfo.cc (pinfo::thisproc): Refer to cygheap as ::cygheap for consistency in
handle naming when -DDEBUGGING.
(pinfo::init): Accommodate case where myself.h is known but h0 is passed in.
(pinfo::pinfo): New constructor for setting up a pinfo passed in by previous
exec'or.
(pinfo::proc_waiter): Don't handle subprocess if we're in the process of
exiting due to an exec of a cygwin process.  Don't close rd_proc_pipe here.
Close it when we actually are finished with the process.  Use new
ch_spawn.signal_myself_exited function to let exec stub know that subprocess
has exited.
(pinfo::wait): Clarify debugging output.
(pinfo::release): Use "close_h" to close all handles to avoid races.
(winpids::add): Assume that elements of the array do not need to be zeroed and
are properly initialized or suffer problems on pinfo::release.  Don't close
hProcess since release does that now.
* pinfo.h: Update comment.
(pinfo_minimal): Move some elements from pinfo here so that child_info_spawn
can use them.
(pinfo): Inherit from pinfo_minimal.
(pinfo::pinfo): Modify to accommodate new pinfo_minimal.
(pinfo::allow_remove): New function.
* sigproc.cc (proc_subproc): Use boolean values for true/false.  Implement
PROC_EXEC_CLEANUP.
(proc_terminate): Set ppid = 1 since the procs list will only be iterated when
the process has not execed.  Don't do any cleanup here since it is now handled
in pinfo::release.
(sigproc_init): Initialize sync_proc_subproc earlier.
(child_info::child_info): Assume that all important fields are properly
initialized and avoid memset().
(child_info_spawn::child_info_spawn): Specifically test for execing and then
set up appropriate fields in the struct.
(child_info_spawn::cleanup): Define new function.
(child_info_spawn::record_children): Specifically test for being execed here.
Fill in pinfo_minimal part of children array.
(child_info_spawn::reattach_children): Use constructor to duplicate information
for previous exec'or.  Add more debugging output.
(remove_proc): Force deletion of thread when exiting due to exec.  Rely on
pinfo::cleanup in release.
* sigproc.h (PROC_EXEC_CLEANUP): New enum.
(PROC_DETACHED_CHILD): Delete.
* spawn.cc (chExeced): Delete.
(child_info_spawn::worker): Rename from spawn_guts.  Use elements of
child_info_spawn throughout rather than ch.whatever.  Use ::cygheap to refer to
global rather than element of child_info.  Use wait_for_myself() rather than
waitpid().  Call child_info_spawn::cleanup on function return.
(spawnve): Reflect movement of spawn_guts functionality into
child_info_spawn::worker.
* syscalls.cc (popen): Ditto.
* winsup.h (spawn_guts): Delete declaration.
@
text
@d414 1
a414 2
    api_fatal ("fork: can't commit memory for stack %p(%d), %E",
	       stacktop, stacksize);
@


1.408
log
@* child_info.h (cchildren): New struct.
(child_info_spawn::nchildren): Rename from nprocs.
(child_info_spawn::children): Change type to cchildren for more bookkeeping
possibilities.
(child_info_spawn::child_info_spawn): Clear nchildren.
(child_info_spawn::record_children): Declare new function.
(child_info_spawn::reattach_children): Ditto.
* dcrt0.cc (child_info_spawn::handle_spawn): Call reattach_children to gather
list of processes we are potentially waiting for.
* pinfo.h (pinfo::pinfo): Make sure that rd_proc_pipe is always cleared.
(pinfo::reattach): New function.
* sigproc.cc: Move pinfo.h earlier so that it can be used in sigproc.h.
(get_proc_lock): Don't bother with a lock during DLL initialization.
(proc_subproc): Handle PROC_REATTACH_CHILD.
(proc_terminate): Orphan children only when we are not an execed process or
when the pid is about to be occupied by a non-cygwin process.
(child_info_spawn::record_children): Define new function.
(child_info_spawn::reattach_children): Ditto.
* sigproc.h (procstuff): Define PROC_REATTACH_CHILD and renumber other
elements.
* spawn.cc (spawn_guts): Record any to-be-waited-for subprocesses if about to
exec a cygwin process.
* sigproc.cc (sig_send): Fix harmless transposition of fifth and six arguments
to DuplicateHandle().
(child_info::child_info): Ditto.
* globals.cc (hExeced): Make NO_COPY.
@
text
@d535 1
a535 1
	  case _PROC_FORK:
d539 2
a540 2
	  case _PROC_SPAWN:
	  case _PROC_EXEC:
a548 1
		res->ready (false);
d557 1
a557 1
	  case _PROC_WHOOPS:
d630 1
a630 1
  if (type == _PROC_EXEC)
d694 1
a694 1
	  case _PROC_FORK:
d697 2
a698 2
	  case _PROC_SPAWN:
	  case _PROC_EXEC:
d1123 1
a1123 1
      child_proc_info->type = _PROC_WHOOPS;
@


1.407
log
@* dcrt0.cc (dll_crt0_1): Copy argv before passing to main().
@
text
@d628 6
@


1.406
log
@* dcrt0.cc (dll_crt0_0): Remove unneeded __stdcall decoration.
* init.cc: Reflect change to dll_crt0_0 in declaration.
@
text
@d897 12
a908 1
    cygwin_exit (user_data->main (__argc, __argv, *user_data->envptr));
@


1.405
log
@* cygthread.cc (cygthread::async_create): Define new function.
* cygthread.h (cygthread::create): Use correct regparm.
(cygthread::standalone): Delete from class and from all constructors.
(cygthread::cygthread): Use three only arguments for detached threads, and
start the thread via QueueUserAPC/async_create.
* dcrt0.cc (dll_crt0_0): Remove handling for wincap.has_buggy_thread_startup.
(dll_crt0_1): Ditto.
* wincap.cc: Ditto throughout.
* wincap.h: Ditto.
@
text
@d652 1
a652 1
void __stdcall
@


1.404
log
@	Throughout, open console handles with sharing for reading and writing.
	* dcrt0.cc (insert_file): Open file with full sharing allowed.
	* hookapi.cc (find_first_notloaded_dll): Ditto.
	* spawn.cc (av::fixup): Ditto.
@
text
@d712 1
a712 1
  if (!wincap.has_buggy_thread_startup () && !dynamically_loaded)
d727 1
a727 1
  if (wincap.has_buggy_thread_startup () || dynamically_loaded)
d729 1
@


1.403
log
@	* dcrt0.cc (dll_crt0_1): Call strace.dll_info after call to pinfo_init.
	* strace.cc (strace::hello): Drop printing DLL information here since
	application info is not always available at this point.
	(strace::dll_info): New method to print DLL info.
	* include/sys/strace.h (strace::dll_info): Declare.
@
text
@d98 6
a103 6
		   GENERIC_READ,	 /* open for reading	*/
		   FILE_SHARE_READ,      /* share for reading	*/
		   &sec_none_nih,	 /* default security	*/
		   OPEN_EXISTING,	 /* existing file only	*/
		   FILE_ATTRIBUTE_NORMAL,/* normal file		*/
		   NULL);		 /* no attr. template	*/
@


1.402
log
@* cygheap.h (init_cygheap::ctty_on_hold): Remove conditionalized variable.
* dcrt0.cc (do_exit): Remove code which handled CYGWIN=tty style ttys.
* devices.in: Remove "/dev/ttym".
* dtable.cc: Rename tty to pty where appropriate throughout.
(dtable::stdio_init): Use new t->is_console rather than using now-deleted hwnd
element in tty structure.
(dtable::init_std_file_from_handle): Remove code which handled CYGWIN=tty style
ttys.
(fh_alloc): Ditto.
* fhandler.h: Rename tty to pty where appropriate.
(fhandler_pty_common): Delete output_done_event, ioctl_request_event,
ioctl_done_event.
(fhandler_pty_master::setup): Delete argument.
(fhandler_tty_master): Delete.
(fhandler_union): Delete __tty_master.
* fhandler_console.cc (use_tty): Delete.
(fhandler_console::get_tty_stuff): Set is_console to true rather than calling
sethwnd.
(fhandler_console::send_winch_maybe): Remove CYGWIN=tty considerations.
(fhandler_console::input_tcsetattr): Ditto.
* fhandler_termios.cc (fhandler_termios::tcsetpgrp): Use new t->is_console
rather than using now-deleted hwnd element in tty structure.
* fhandler_tty.cc: Rename tty to pty where appropriate throughout.
(tty_master): Delete.
(process_input): Ditto.
(process_output): Ditto.
(process_ioctl): Ditto.
(fhandler_tty_master::*): Ditto.
(fhandler_pty_master::process_slave_output): Remove CYGWIN=tty considerations.
(fhandler_pty_slave::open): Ditto for *_done_event.
(fhandler_pty_slave::write): Ditto.
(fhandler_pty_slave::ioctl): Ditto.
(fhandler_pty_slave::fch_open_handles): Ditto.
(fhandler_pty_slave::fch_set_sd): Ditto.
(fhandler_pty_slave::fch_close_handles): Ditto.
(fhandler_pty_common::close): Ditto.
(fhandler_pty_master::setup): Ditto.  Remove now-unneeded ispty parameter.
(fhandler_pty_master::open): Reflect argument removal for tty::allocate.
* select.cc: Rename tty to pty where appropriate throughout.
* sigproc.cc (proc_subproc): Remove CYGWIN=tty considerations.
* tty.cc (ttyslot): Accommodate CYGWIN=tty removal.
(tty_list::init_session): Ditto.
(tty_list::attach): Ditto.
(tty::create_master): Delete.
(tty_list::terminate): Ditto.
(tty_list::allocate): Delete "with_console" parameter.  Remove CYGWIN=tty
considerations.
(tty::init): Set is_console = false.  Use 'false' for was_opened since it is a
boolean.
* tty.h (*_{DONE,REQUEST}_EVENT): Delete.
(tty_min::is_console): Declare new field which replaces hwnd.
(tty_min::gethwnd): Delete.
(tty_min::sethwnd): Ditto.
(tty_list::allocate): Delete parameter.
(tty_list::terminate): Delete declaration.
* include/sys/cygwin.h (PID_USETTY): Redefine to PID_UNUSED1 and change comment
to reflect its availability.
@
text
@d809 1
@


1.401
log
@* child_info.h (CURR_CHILD_INFO_MAGIC): Reset.
(child_info::old_title): Delete.
(child_info::~child_info_spawn): Remove recording of old_title.
* dcrt0.cc (title_buf): Delete.
(child_info_spawn::handle_spawn): Remove recording of old_title.
(dll_crt0_1): Get rid of all title handling.
(do_exit): Ditto.
* environ.cc (known): Delete strip_title and title.
* fhandler_console.cc (fhandler_console::write): Remove recording of old_title.
* globals.cc (exit_states): Remove ES_TITLE.
(display_title): Delete.
(strip_title_path): Delete.
(old_title): Delete.
* spawn.cc (spawn_guts): Remove old_title accommodation.
@
text
@a1047 6
  if (exit_state < ES_TTY_TERMINATE)
    {
      exit_state = ES_TTY_TERMINATE;
      cygwin_shared->tty.terminate ();
    }

@


1.400
log
@whitespace elimination
@
text
@a50 2
static char title_buf[TITLESIZE + 1];

a635 5
  if (moreinfo->old_title)
    {
      old_title = strcpy (title_buf, moreinfo->old_title);
      cfree (moreinfo->old_title);
    }
a809 3
  if (!old_title && GetConsoleTitle (title_buf, TITLESIZE))
    old_title = title_buf;

a865 12
  /* Set new console title if appropriate. */

  if (display_title && !dynamically_loaded)
    {
      char *cp = __progname;
      if (strip_title_path)
	for (char *ptr = cp; *ptr && *ptr != ' '; ptr++)
	  if (isdirsep (*ptr))
	    cp = ptr + 1;
      set_console_title (cp);
    }

a1047 8
  if (exit_state < ES_TITLE)
    {
      exit_state = ES_TITLE;
      /* restore console title */
      if (old_title && display_title)
	set_console_title (old_title);
    }

@


1.399
log
@* autoload.cc: Call _api_fatal in asm.
* child_info.h: Redefine CURR_CHILD_INFO_MAGIC.
(child_info_fork::abort): Rename from handle_failure.  Change arguments.
* cygtls.h (_local_storage::ttybuf): New field.
* dcrt0.cc (vapi_fatal): Split api_fatal.  Add "in forked process" to message
when appropriate.
(api_fatal): Use vapi_fatal.
* devices.h: Make multiple inclusion safe.
(fh_devices): Add FH_CONS* stuff.  Reorder slightly.
(device): Eliminate anonymous union.  Add more ways to access minor/major.
(device::setunit): Accommodate no-longer-anonymous union.
(device::is_fs): Ditto.
(device::is_fs_special): Ditto.
(device::major): New function.
(device::minor): Ditto.
(device::is_device): New function.
(device::not_device): Ditto.
(device::operator int): New operator.
(device::operator fh_devices): Ditto.
(device::operator bool): Ditto.
(device::operator DWORD): Ditto.
(device::operator =): Ditto.
(isproc_dev): New function.
(isprocsys_dev): Ditto.
(iscons_dev): Ditto.
(istty_slave_dev): Ditto.
* devices.in: Add new "/dev/cons*" strings.  Accommodate no-longer-anonymous
union throughout.
(BRACK): Use more precise method for initialization.
* devices.cc: Regenerate.
* dtable.cc (dtable::stdio_init): Use get_cttyp instead of get_tty.
(dtable::find_archetype): Use new DWORD operator in device to test archetypes.
(dtable::init_std_file_from_handle): Use different method to initialize 'dev'.
Adapt to different ctty handling and accommodate /dev/cons*.
(fh_alloc): Accommodate no-longer-anonymous union.  Adapt to new /dev/cons*.
(build_fh_pc): Make debugging output more useful.
* exceptions.cc (ctrl_c_handler): Use get_cttyp instead of get_tty.
* external.cc (fillout_pinfo): Accommodate new cons* stuff.
* fhandler.cc (fhandler_base::read): Eliminate is_slow() test.
* fhandler.h (fhandler_base::*): Adapt to changes in device.h.
(fhandler_*::is_slow): Delete.
( fhandler_proc::get_proc_fhandler): Return fh_devices type.
* fhandler_console.cc (open_shared_console): New function.
(console_unit): New class.
(console_unit::console_unit): New constructor.
(enum_windows): New function.  Declare as friend to console_unit.
(fhandler_console::set_unit): New function.
(fhandler_console::get_tty_stuff): Call set_unit to set the unit number and
determine if initialization is needed.  Eliminate flags parameter.
(tty_list::get_cttyp): Rename (sorta) from get_tty.  Return pointer to correct
tty_min.
(fhandler_console::open): Adapt to elimination of argument to get_tty_stuff.
(fhandler_console::output_tcsetattr): Properly detect error condition.
(fhandler_console::fixup_after_fork_exec): Adapt to get_tty_stuff() setting tc
automatically.
* fhandler_proc.cc: Use FH_BAD rather than 0 throughout where using fh_devices
enum.
(fhandler_proc::get_proc_fhandler): Return fh_devices.  Adapt to devices.h
changes.
* fhandler_process.cc: Adapt to devices.h changes.  Use FH_BAD rather than 0
throughout where using fh_devices enum.
* fhandler_procnet.cc: Ditto.
* fhandler_procsys.cc: Ditto.
* fhandler_procsysvipc.cc: Ditto.
* fhandler_tape.cc (fhandler_dev_tape::fhandler_dev_tape): Ditto.
* fhandler_termios.cc (handler_termios::bg_check): Use tc->ttyname() rather
than assuming that we can construct a tty.
* fhandler_tty.cc (fhandler_tty_master::fhandler_tty_master): Just return
get_minor() of dev.
(fhandler_pty_master::process_slave_output): Add slightly more debugging info.
(fhandler_tty_slave::fhandler_tty_slave): Change name from ntty to unit.
(fhandler_pty_master::open): Ditto.
(fhandler_tty_slave::ioctl): Adapt to change which causes ctty to represent a
complete device.
(fhandler_tty_master::init_console): Add debugging for failure path.
(fhandler_pty_master::setup): Use get_unit() to retrieve unit number rather
than relying on raw ntty.
(fhandler_pty_master::setup): Ditto.
* fhandler_virtual.h (virt_tab_t): Redefine fhandler as fh_devices.
* fork.cc: Remove obsolete vfork stuff.
(frok::child): Don't assume that a ctty == 0 is valid.
* mount.cc (mount_info::conv_to_win32_path): Adapt to device struct changes.
(mount_info::conv_to_win32_path): Ditto.
* path.cc (path_conv::check): Retrive major/minor numbers via a method rather
than accessing them directly from device.  Rely on dev operators to
set/retrieve device information as required by device struct change.
* path.h (isproc_dev): Move to devices.h.
(isprocsys_dev): Ditto.
(isvirtual_dev): Ditto.
(path_conv:{isdevice,isfifo,isspecial,iscygdrive,issocket,get_devn,get_unitn}):
Use device methods to access/manipulate devices.
* pinfo.cc (pinfo::exit): Don't assume that ctty == 0 is valid.  Use iscons_dev
to determine if a device is a console.
(_pinfo::_ctty): Use device::parse to generate tty/cons name.
(_pinfo::set_ctty): Don't assume that ctty == 0 is valid.  Remove redundant
info from debugging.
* shared.cc (offsets): Remove console offset.
* shared_info.h (shared_locations): Ditto.
* syscalls.cc (umask): Use device methods to manipulate device information.
(ctermid): Use device::parse to generate term device name.
* tlsoffsets.h: Regenerate.
* tty.cc (ttyslot): Return minor number of ctty since ctty now represents a
full device.
(tty::create_master): Set ctty to a complete device.
(tty_list::attach): Rework to detect new /dev/cons* stuff.
(tty_list::terminate): Adapt to changes to ctty.
(tty_list::init): Adapt to change to setntty - pass in device major number.
(tty::exists): Use get_unit() to retrive tty unit number.
(tty::open_mutex): Ditto.
(tty::open_inuse): Ditto.
(tty::create_inuse): Ditto.
(tty::get_event): Ditto.
(tty_min::ttyname): Define new function.
* tty.h (tty_min::ntty): Redefine as fh_devices.
(tty::exists): Use get_unit() to retrive tty unit number.
(tty::open_mutex): Ditto.
(tty::open_inuse): Ditto.
(tty::create_inuse): Ditto.
(tty::get_event): Ditto.
(tty_min::ttyname): Declare new function.
(tty::getntty): Declare as const.
(tty_list::operator []): Assure that only minor part of argument is used.
* dll_init.cc (dll_list::alloc): Detect mismatch of data segments early issuing
an explicit error message if necessary.
* heap.cc (heap_init): Adapt to changes from fork->handle_failure to
fork->abort.
* pinfo.h (EXITCODE_FORK_FAILED): New enum.  (from Ryan Johnson)
* sigproc.cc (child_info_fork::abort): Rename from handle_failure.  Change
arguments to allow passing in a printf-like message.
* winsup.h (api_fatal): Delete macro definition.
(api_fatal): Redefine from __api_fatal.
(vapi_fatal): Declare new function.
* include/sys/strace.h (strace_vprintf): Define new macro.
* ntdll.h (_SYSTEM_INFORMATION_CLASS): Add SystemHandleInformation.
@
text
@d242 1
a242 1
	      	while (cnt-- > 0)
d646 1
a646 1
/* Retrieve and store system directory for later use.  Note that the 
@


1.398
log
@	* child_info.h (CURR_CHILD_INFO_MAGIC): Update.
	(class child_info_fork): Remove stacksize, add stackaddr and guardsize
	members.
	* dcrt0.cc (child_info_fork::alloc_stack_hard_way): Partial rewrite
	to regenerate the stack exactly as in the parent.
	(child_info_fork::alloc_stack): Set stackaddr to 0, rather than
	stacksize.
	(dll_crt0_1): Check for stackaddr before changing the stack addresses
	in the TEB.
	* fork.cc (frok::child): Check for stackaddr here.
	(frok::parent): Set ch.stackaddr and ch.guardsize if not called from
	the main thread.
	* init.cc (dll_entry): Replace pointer to NT_TIB with pointer to TEB.
	Fix incorrectly changed address test before removing _my_tls.
	Set StackLimit to NULL on Windows 2000.  Explain why.
	* miscfuncs.cc (struct thread_wrapper_arg): Store stackbase rather
	than stacksize, store commitaddr, remove guardsize.  Store all pointers
	as char * for easier address arithmetic.
	(thread_wrapper): Rewrite to remove OS stack before calling thread
	function.  Add lots of comments to explain what we do.
	(CygwinCreateThread): Reserve our own stack in case we got no
	application stack.  Add comments.
	* ntdll.h (struct _TEB): Extend defintion up to DeallocationStack
	member.
	* thread.cc (pthread_attr::pthread_attr): Use "(size_t) -1"
	rather then 0xffffffff.
	* wincap.h (wincaps::has_stack_size_param_is_a_reservation): New
	element.
	* wincap.cc: Implement above element throughout.
@
text
@d1112 1
a1112 1
__api_fatal (const char *fmt, ...)
d1115 1
a1115 4
  va_list ap;

  va_start (ap, fmt);
  int n = __small_sprintf (buf, "%P: *** fatal error - ");
d1127 9
@


1.397
log
@	* dcrt0.cc (child_info_fork::alloc_stack_hard_way): Check if the
	requested stack is application-provided within the user heap or an
	mmapped region.  If so, just use it.  Add comment to explain why.
	* miscfuncs.cc (thread_wrapper): If an application-provided stack
	has been given, implement cygtls area at the stackbase.  Fix comment.
	* mmap.cc (is_mmapped_region): New function.
	* winsup.h (is_mmapped_region): Declare.
@
text
@d395 2
a396 5
  void *new_stack_pointer;
  MEMORY_BASIC_INFORMATION m;
  void *newbase;
  int newlen;
  bool guard;
d399 1
a399 1
     or part of a mmaped region.  If so, we have been started from a
d407 12
a418 6
  if (!VirtualQuery ((LPCVOID) &b, &m, sizeof m))
    api_fatal ("fork: couldn't get stack info, %E");

  LPBYTE curbot = (LPBYTE) m.BaseAddress + m.RegionSize;

  if (stacktop > (LPBYTE) m.AllocationBase && stacktop < curbot)
d420 13
a432 3
      newbase = curbot;
      newlen = (LPBYTE) stackbottom - (LPBYTE) curbot;
      guard = false;
a433 29
  else
    {
      newbase = (LPBYTE) stacktop - (128 * 1024);
      newlen = (LPBYTE) stackbottom - (LPBYTE) newbase;
      guard = true;
    }

  if (!VirtualAlloc (newbase, newlen, MEM_RESERVE, PAGE_NOACCESS))
    api_fatal ("fork: can't reserve memory for stack %p - %p, %E",
		stacktop, stackbottom);
  new_stack_pointer = (void *) ((LPBYTE) stackbottom - (stacksize += 8192));
  if (!VirtualAlloc (new_stack_pointer, stacksize, MEM_COMMIT,
		     PAGE_EXECUTE_READWRITE))
    api_fatal ("fork: can't commit memory for stack %p(%d), %E",
	       new_stack_pointer, stacksize);
  if (!VirtualQuery ((LPCVOID) new_stack_pointer, &m, sizeof m))
    api_fatal ("fork: couldn't get new stack info, %E");

  if (guard)
    {
      m.BaseAddress = (LPBYTE) m.BaseAddress - 1;
      if (!VirtualAlloc ((LPVOID) m.BaseAddress, 1, MEM_COMMIT,
			 CYGWIN_GUARD))
	api_fatal ("fork: couldn't allocate new stack guard page %p, %E",
		   m.BaseAddress);
    }
  if (!VirtualQuery ((LPCVOID) m.BaseAddress, &m, sizeof m))
    api_fatal ("fork: couldn't get new stack info, %E");
  stacktop = m.BaseAddress;
d460 1
a460 1
      stacksize = 0;
d798 1
a798 1
      if (fork_info->stacksize)
@


1.396
log
@	* dcrt0.cc (dll_crt0_1): Reset locale to "C" even when dynamically
	loaded.
@
text
@d401 9
@


1.395
log
@	* advapi32.cc (InitializeAcl): Remove.
	(AddAce): Remove.
	(FindFirstFreeAce): Remove.
	(GetAce): Remove.
	(InitializeSecurityDescriptor): Remove.
	(OpenProcessToken): Remove.
	* dcrt0.cc: Replace above functions throughout with their ntdll.dll
	equivalent.
	* fhandler_tty.cc: Ditto.
	* flock.cc: Ditto.
	* pinfo.cc: Ditto.  Drop unnecessary error handling.
	* sec_acl.cc: Ditto.
	* sec_auth.cc: Ditto.
	* sec_helper.cc: Ditto.
	* security.cc: Ditto.
@
text
@d908 4
a911 1
    return;
@


1.394
log
@	* autoload.cc (GetExtendedTcpTable): Remove.
	(GetTcpTable): Remove.
	(CharNextExA): Remove.
	(FindWindowA): Remove.
	(ShowWindowAsync): Remove.
	* dcrt0.cc (disable_dep): Remove unused function.
	(dll_crt0_0): Drop comment babbling about TS & DEP.
	* fhandler_socket.cc (address_in_use): Remove unused function.
	* wincap.cc: Throughout, drop ts_has_dep_problem from wincaps.
	(wincapc::init): Drop code setting ts_has_dep_problem flag.
	* wincap.h (struct wincaps): Drop ts_has_dep_problem flags and method.
@
text
@d688 1
a688 1
  OpenProcessToken (GetCurrentProcess (), MAXIMUM_ALLOWED, &hProcToken);
@


1.393
log
@	* crt0.c (mainCRTStartup): Move call to _feinitialise from here...
	* dcrt0.cc (_dll_crt0): ...to here.
@
text
@a652 30
#if 0
/* Setting the TS-aware flag in the application's PE header is sufficient.
   Just keep this in as a reminder. */

static DEP_SYSTEM_POLICY_TYPE dep_system_policy = (DEP_SYSTEM_POLICY_TYPE) -1;

static void
disable_dep ()
{
  DWORD ppolicy;
  BOOL perm;

  if (dep_system_policy < 0)
    {
      dep_system_policy = GetSystemDEPPolicy ();
      debug_printf ("DEP System Policy: %d", (int) dep_system_policy);
    }
  if (dep_system_policy < OptIn)
    return;
  if (!GetProcessDEPPolicy (GetCurrentProcess (), &ppolicy, &perm))
    {
      debug_printf ("GetProcessDEPPolicy: %E");
      return;
    }
  debug_printf ("DEP Process Policy: %d (permanent = %d)", ppolicy, perm);
  if (ppolicy > 0 && !perm && !SetProcessDEPPolicy (0))
    debug_printf ("SetProcessDEPPolicy: %E");
}
#endif

a720 23
#if 0
  /* Setting the TS-aware flag in the application's PE header is sufficient.
     Just keep this in as a reminder. */

  /* The disable_dep function disables DEP for all Cygwin processes if
     the process runs on a Windows Server 2008 with Terminal Services
     installed.  This combination (TS+DEP) breaks *some* Cygwin
     applications.  The Terminal Service specific DLL tsappcmp.dll
     changes the page protection of some pages in the application's text
     segment from PAGE_EXECUTE_WRITECOPY to PAGE_WRITECOPY for no
     apparent reason.  This occurs before any Cygwin or applicaton code
     had a chance to run.  MS has no explanation for this so far, but is
     rather busy trying to avoid giving support for this problem (as of
     2008-11-11).

     Unfortunately disabling DEP seems to have a not negligible
     performance hit.  In the long run, either MS has to fix their
     problem, or we have to find a better workaround, if any exists.
     Idle idea: Adding EXECUTE protection to all text segment pages? */
  if (wincap.ts_has_dep_problem ())
    disable_dep ();
#endif

@


1.392
log
@	* dcrt0.cc: Fix copyright dates.
	* winsup.h: Ditto.
	* syscalls.cc (_read): Move EXPORT_ALIAS to its rightful place.
@
text
@d38 1
d984 3
@


1.392.2.1
log
@	* crt0.c (mainCRTStartup): Move call to _feinitialise from here...
	* dcrt0.cc (_dll_crt0): ...to here.
@
text
@a37 1
#include "fenv.h"
a982 3
#ifdef __i386__
  _feinitialise ();
#endif
@


1.391
log
@* dcrt0.cc (dll_crt0_1): Add a CYGHEAP_DEBUG conditional for debugging which
allocates a lot of space at startup.
@
text
@d4 1
a4 2
   2007, 2008, 2009, 2010
   Red Hat, Inc.
@


1.390
log
@cygwin:
	* cygwin.din: Export program_invocation_name and
	program_invocation_short_name.
	* dcrt0.cc: Set program_invocation*name to correct values, based on
	argv[0].
	* globals.cc (program_invocation_name): Define.
	(program_invocation_short_name): Ditto
newlib:
	* libc/include/sys/errno.h (program_invocation_name): Declare.
	(program_invocation_short_name): Ditto.
@
text
@d805 1
a805 1
#ifdef CGF
d809 10
a818 1
    small_printf ("cmalloc returns %p\n", cmalloc (HEAP_STR, n));
@


1.389
log
@* dcrt0.cc (do_exit): Don't set thread termination until all fds have been
closed since an fd may rely on a thread.
* fhandler_tty.cc: Reformat comment.
(fhandler_pty_master::pty_master_thread): Refuse ERROR_PIPE_CONNECTED state as
an error.
* globals.cc (exit_states): Reorder ES_THREADTERM.
* path.cc (find_fast_cwd_pointers): Remove excessively wordy DEBUGGING output.
@
text
@d918 2
@


1.388
log
@* dcrt0.cc (dll_crt0_0): Move _main_tls initialization here.
(__dll_crt0): Only initialize _main_tls if it changes.
* fhandler_console.cc (fhandler_console::write): Fix debugging output.
@
text
@a1056 7
  UINT n = (UINT) status;
  if (exit_state < ES_THREADTERM)
    {
      exit_state = ES_THREADTERM;
      cygthread::terminate ();
    }

d1072 7
@


1.387
log
@* dcrt0.cc (__main): Force signal synchronization.
@
text
@d774 2
d975 4
a978 1
    fork_info->alloc_stack ();
a979 1
  _main_tls = &_my_tls;
@


1.386
log
@* wincap.h (wincaps::has_buggy_thread_startup): Declare.
(wincapc::has_buggy_thread_startup): Ditto.
* wincap.cc::wincap_*): Accommodate has_buggy_thread_startup.
(wincapc::init): Explicitly turn off has_buggy_thread_startup if not WOW64.
* cygthread.h (cygthread::thread_handle): Declare/define new method.
* dcrt0.cc (_dll_crt0): Don't call __sinit here.
(dll_crt0_0): Don't call sigproc_init during initialization if
wincap.has_buggy_thread_startup().
(dll_crt0_1): Defer sigproc_init to here when
wincap.has_buggy_thread_startup().  Call __sinit after we've determined that
we're not forking.
(__main): Rework comments.  Add potential future reminder.
@
text
@a1027 1
#if 0	/* Don't enable for now.  See if we really need this. */
a1028 1
#endif
@


1.385
log
@* cygthread.h (cygthread::cygthread): Reorganize slightly.
* dcrt0.cc (dll_crt0_0): Move sigproc initialization later to ensure everything
we need has been set up.
(dll_crt0_1): Streamline some logic slightly.
* sigproc.cc (no_signals_available): Add back dropped test for macro parameter.
* fhandler_console.cc (fhandler_console::write): Show a little bit of what's
being written to the console in debugging output.
@
text
@d777 1
a777 1
  if (!dynamically_loaded)
d792 1
a792 1
  if (dynamically_loaded)
d856 2
d973 1
a973 9
    {
      fork_info->alloc_stack ();
      _main_tls = &_my_tls;
    }
  else
    {
      _main_tls = &_my_tls;
      __sinit (_impure_ptr);
    }
d975 1
d1021 3
a1023 3
  /* Now we have run global ctors, register their dtors.  */
  atexit (do_global_dtors);
  /* At exit, global dtors will run first, so the app can still
d1027 4
@


1.384
log
@* dcrt0.cc (dll_crt0_0): Remove myself settings.
* fork.cc (fork): Set myself process_state
* pinfo.cc (pinfo_init): Ditto.
(pinfo::thisproc): Make sure any sendsig setting is correctly copied.
* pinfo.h: Update copyright.  Remove unused code.
@
text
@a742 6
  /* Initialize signal processing here, early, in the hopes that the creation
     of a thread early in the process will cause more predictability in memory
     layout for the main thread. */
  if (!dynamically_loaded)
    sigproc_init ();

d774 6
d943 1
a943 1
  debug_printf ("user_data->main %p", user_data->main);
d946 1
a946 4
    {
      set_errno (0);
      return;
    }
a950 2
  set_errno (0);

d957 1
@


1.383
log
@* cygthread.cc (cygthread::create): Fix incorrect use of name rather than
__name.
* cygthread.h (cygthread::cygthread): Create versions which eliminate 'n'
parameter.
* dcrt0.cc (dll_crt0_1): Remove check for threadfunc_ix.  Remove obsolete
comments.  Set process_state to active here.
* fhandler_netdrive.cc (create_thread_and_wait): Use shortened cygthread
constructor.
* timer.cc (timer_tracker::settime): Ditto.
* window.cc (HWND): Ditto.
* fhandler_tty.cc: Use shortened cygthread constructor, where appropriate,
throughout.
* select.cc: Ditto.
* fork.cc (frok::child): Remove wait_for_sigthread.
(fork): Reformat if for slightly better clarity.
* init.cc (dll_finished_loading): New variable.
(dll_entry): Use dll_finished_loading to determine when we should call
merge_threadfunc.
* sigproc.cc (no_signals_available): Simplify by using my_readsig.
(wait_sig_inited): Delete.
(wait_sig): Define as void function.
(pending_signals): Accommodate change to wait_sig definition.
(wait_for_sigthread): Delete definition.
(sigproc_init): Initialize signal pipe here, before wait_sig thread is created.
Use void form of cygthread creation.
(init_sig_pipe): Delete.
(wait_sig): Return void rather than DWORD.  Assume previous initialization of
signal pipe.  Set my_sendsig to NULL when exiting.
* sigproc.h (wait_for_sigthread): Delete declaration.
@
text
@a717 3
  myself->process_state |= PID_ACTIVE;
  myself->process_state &= ~PID_INITIALIZING;

@


1.382
log
@* dcrt0.cc (dll_crt0_0): Move sigproc_init later, after cygheap initialization
since it relies on the cygheap existing (even if it shouldn't matter do to dll
initialization serialization).
@
text
@d718 3
a874 5
  wait_for_sigthread ();
  extern DWORD threadfunc_ix;
  if (!threadfunc_ix)
    system_printf ("internal error: couldn't determine location of thread function on stack.  Expect signal problems.");

a961 3
  /* Flush signals and ensure that signal thread is up and running. Can't
     do this for noncygwin case since the signal thread is blocked due to
     LoadLibrary serialization. */
@


1.381
log
@	* autoload.cc (LoadDLLprime): Change dllname storage to string16.
	(struct dll_info): Convert name to WCHAR.
	(std_dll_init): Load DLLs with full path to windows system directory.
	Add hint to Microsoft security advisory.
	* dcrt0.cc (init_windows_system_directory): New function.
	(dll_crt0_0): Call init_windows_system_directory first.
	* exceptions.cc (windows_system_directory): Move to globals.cc.
	(windows_system_directory_length): Ditto.
	(events_init): Drop code fetching windows_system_directory.
	* globals.cc (windows_system_directory): New global variable.
	(windows_system_directory_length): Ditto.
	* net.cc (load_ipv6_funcs): Use windows_system_directory rather than
	GetSystemDirectoryW.
	* netdb.cc (open_system_file): Ditto.  Simplify debug output.
@
text
@a704 6
  /* Initialize signal processing here, early, in the hopes that the creation
     of a thread early in the process will cause more predictability in memory
     layout for the main thread. */
  if (!dynamically_loaded)
    sigproc_init ();

d743 6
@


1.380
log
@* dcrt0.cc (__api_fatal): Temporarily generate a stackdump.
@
text
@d39 1
d683 13
d699 1
@


1.379
log
@* Makefile.in (DLL_OFILES): Add pseudo-reloc.o.
* dcrt0.cc (child_info_fork::handle_fork): Call _pei386_runtime_relocator here.
(dll_crt0_1): Ditto for non-fork case.
* dll_init.cc (dll::init): Complain more in comment.  Clean up slightly.
(dll_dllcrt0_1): Call _pei386_runtime_relocator when we know we have a
filled-in per_process structure.
* globals.cc (__cygwin_user_data): Accommodate new fields for
_pei386_runtime_relocator.
* pseudo-reloc.cc: New file adapted from old lib/pseudo-reloc.c.  Include
winsup.h directly.  Collapse #ifdef __CYGWIN__ into one block.  Perform minor
whitespace code reformatting.
(__report_error): Use small_printf to output error.
(_pei386_runtime_relocator): Conditionalize for cygwin to take per_process
pointer parameter.
* winsup.h (_pei386_runtime_relocator): Declare.
* include/cygwin/version.h
(CYGWIN_VERSION_PER_PROCESS_API_VERSION_COMBINED): New macro.
(CYGWIN_VERSION_USER_API_VERSION_COMBINED): Use above macro.
(CYGWIN_VERSION_USE_PSEUDO_RELOC_IN_DLL): New macro.
(CYGWIN_VERSION_API_MINOR): Bump to 227.
* include/sys/cygwin.h: Remove obsolete comment.
(per_process::unused2): Shorten.
(per_process::pseudo_reloc_start): New field.
(per_process::pseudo_reloc_end): Ditto.
(per_process::image_base): Ditto.
* lib/_cygwin_crt0_common.cc: Declare pseudo runtime externs needed for
per_process structure.
(_cygwin_crt0_common): Fill in pseudo_reloc runtime constants.
* lib/pseudo-reloc-dummy.c: New file.  Dummy function to satisify ld.
* lib/pseudo-reloc.c: Delete.
@
text
@d1148 2
d1165 1
@


1.378
log
@* globals.cc (exit_status): Add new ES_EXIT_STARTING enum.
* dcrt0.cc (cygwin_exit): Set exit_state to ES_EXIT_STARTING prior to calling
real exit.
* dll_init.cc (dll_list::detach): Remove dll from linked list and call
destructors even if exiting.  Don't call __cxa_finalize in exiting case.
@
text
@a43 1

d594 6
d802 4
a805 1
    pthread::init_mainthread ();
@


1.377
log
@* shared_info.h (user_info): Add dll_crt0_1 as a friend.
(user_info::version): Make LONG to accommodate spinlock use.
(user_info::create): New static function renamed from user_info_create.
(user_info::initialize): New private function renamed from
user_info_initialize.
(SHARED_VERSION): Delete.
(SHARED_VERSION_MAGIC): Ditto.
(USER_VERSION_MAGIC): Ditto.
(SHARED_INFO_CB): Ditto.
(USER_VERSION): Ditto.
(USER_VERSION_MAGIC): Ditto.
(CURR_SHARED_MAGIC): Update.
(CURR_USER_MAGIC): Ditto.
(shared_info::version): Make LONG to accommodate spinlock use.
(shared_info::create): New static function mirroring user_info::create.
(dll_crt0_1): Accommodate change to user_info::initialize.
* spinlock.h (spinlock::setto): New variable member.
(spinlock::done): New function.
(spinlock::spinlock): Generalize to allow arbitrary values and timeouts.  Call
done() when lock is not needed.
* ntdll.h: Make multiple-inclusion safe.
(NtQuerySystemTime): Declare.
* shared.cc (installation_root_inited): Rename from shared_mem_inited.
(init_installation_root): Make inline.  Use a spinlock to ensure that this is
initialized only once per session.
(user_info::initialize): Rename from user_shared_initialize.  Protect with
spinlock on sversion and remove other spinlock-like things.  Remove reference
to user_shared since it is now implicit.  Refer to spinlock version of
multiple_cygwin_problem to ensure that any spinlock is released.
(user_info::create): Rename from user_shared_create.  Accommodate change from
user_shared_initialize to user_info::initialize.
(shared_info::create): New inline function.
(shared_info::initialize): Protect with spinlock on sversion.  Move heap_init
back under specific control of shared_info spinlock.  Remove reference to
SHARED_INFO_CB and just use sizeof(*this).
(memory_init): Move all locking into respective functions where it is needed.
Accommodate name changes.  Remove call to heap_init().
* syscalls.cc (seteuid32): Accommodate name change to user_info::create().
* mount.cc (mount_info::create_root_entry): Report on errors from add_item
since they should be nonexistent.
(mount_info::init): Don't initialize nmounts.  It should already be zero.  Give
more verbose error when root_idx < 0.  Implicitly use this pointer rather than
explicitly referencing mount_table->.
(mount_info::add_item): Minor whitespace fix.
@
text
@d1130 1
@


1.376
log
@Throughout change all calls of low_priority_sleep (0) to yield ().
* miscfuncs.cc (yield): Rename from low_priority_sleep.  Remove all of the
logic which called Sleep() and just use SwitchToThread.
* miscfuncs.h (yield): Rename from low_priority_sleep.
(SLEEP_0_STAY_LOW): Delete unused define.
* shared.cc (memory_init): Move heap_init() call directly after shared memory
initialization to more closely mimic long-standing program flow.
* tty.cc (tty_list::terminate): Replace call to low_priority_sleep with Sleep.
@
text
@d781 1
a781 1
  user_shared_initialize ();
@


1.375
log
@	Add XDR support.
	* cygwin.din: Export xdr functions.
	* include/cygwin/version.h: Bump version.
	* cygxdr.cc: New.
	* cygxdr.h: New.
	* dcrt0.cc (dll_crt0_1): Print the (rare) xdr-related
	error messages to stderr.
	* Makefile.in: Add cygxdr.
	* posix.sgml: Add new XDR functions to list of implemented Solaris
	functions.
@
text
@d560 1
a560 1
		  low_priority_sleep (0);
@


1.374
log
@Update some copyrights.
* cygtls.cc (_cygtls::call): Invoke new exception protection here.
(_cygtls::init_thread): Remove conditionalized exception handler setup.
(exception_list): Delete declaration.
(_cygtls::init_exception_handler): Delete obsolete function.
* cygtls.h: Remove (now) unneeded include.
(_cygtls): Make this a real C++ class.
(_cygtls::handle_exceptions): Remove.
(_cygtls::init_exception_handler): Remove.
(_cygtls::call2): Make private.
(myfault::faulted): Remove unneeded parentheses.
* dcrt0.cc (dll_crt0_1): Remove exception handler setup.
* dlfcn.cc (dlopen): Ditto.
(dlclose): Ditto.
* dll_init.cc (dll_dllcrt0_1): Ditto.
(dll_list::detach): Use new exception handler protection.
* exceptions.cc (dump_exception): Rename to prevent confusion with new class.
(exception::handle): Rename from _cygtls::handle_exceptions.  Accommodate new
exception class.  Accommodate rename to dump_exception.
* tlsoffsets.h: Regenerate.
@
text
@d38 1
d915 1
@


1.373
log
@* cygtls.h (_cygtls::init_exception_handler): Eliminate argument.
(_cygtls::andreas): Convert to a pointer.
(san): Convert to a real class with methods.  Use a linked list to keep track
of previous handlers on the "stack".
(myfault): Rewrite to use new san class rather than calling directly into
_cygtls.
* cygtls.cc (_cygtls::init_exception_handler): Just assume that we're always
using the standard exception handler.
(_cygtls::init_thread): Reflect loss of argument to init_exception_handler.
* dcrt0.cc (dll_crt0_1): Ditto.
* dfcn.cc (dlopen): Ditto.
(dlclose): Reset the exception handler after FreeLibrary.
* dll_init.cc (dll_list::detach): Make sure that the exception handler is
initialized before calling destructors.
* exceptions.cc (_cygtls::handle_exceptions): Accommodate new andreas pointer.
* thread.cc (verifyable_object_isvalid): Pass objectptr to faulted for explicit
NULL pointer checking.
* tlsoffsets.h: Regenerate.
@
text
@d37 1
a826 1
	  _my_tls.init_exception_handler ();
@


1.372
log
@* dcrt0.cc (_dll_crt0): Set _main_tls as early as possible.
* thread.cc (pthread_mutex::can_be_unlocked): Remove check for
MUTEX_OWNER_ANONYMOUS since it is racy and unsafe.
(pthread::init_mainthread): Initialize thread directly from _my_tls.
(pthread::self): Ditto.
(pthread::get_tls_self_pointer): Delete.
(pthread_mutex::pthread_mutex): Use an event rather than a semaphore.
(pthread_mutex::lock): Rename from _<func>.  Derive self directly.
(pthread_mutex::tryunlock): Ditto.
(pthread_mutex::destroy): Ditto.
(pthread_mutex::unlock): Ditto.  Accommodate change from semaphore to event.
(pthread_mutex::_fixup_after_fork): Accommodate change from semaphore to event.
(pthread_mutex::init): Don't attempt to initialize a semaphore unless it is in
an initialized state.  Do this check under mutex_initialization_lock.lock
* thread.h (fast_mutex::init): Use event rather than semaphore.
(fast_mutex::lock): Ditto.
(pthread_mutex::_lock): Delete.
(pthread_mutex::_unlock): Ditto.
(pthread_mutex::_trylock): Ditto.
(pthread_mutex::_destroy): Ditto.
(pthread_mutex::get_pthread_self): Ditto.
(pthread_mutex::get_tls_self_pointer): Ditto.
(pthread_mutex::lock): Un-inline.
(pthread_mutex::unlock): Ditto.
(pthread_mutex::trylock): Ditto.
(pthread_mutex::destroy): Ditto.
@
text
@d826 1
a826 1
	  _my_tls.init_exception_handler (_cygtls::handle_exceptions);
@


1.371
log
@* dcrt0.cc (atexit_lock): Delete.
(cygwin_exit): Remove atexit lock.
(cygwin_atexit): Ditto.  Rename parameter to match newlib.  Call __cxa_atexit
when invoked by a registered DLL.
* dll_init.cc (remove_dll_atexit): Delete.
(dll_list::find): New function.
(dll_list::detach): Use dll_list::find to find dll associated with return
address.  Use __cxa_finalize to run atexit functions associated with the dll.
(cygwin_detach_dll): Don't assume that HANDLE == void *.
* dll_init.h (dll_list::find): Declare.
(__cxa_atexit): Ditto.
(__cxa_finalize): Ditto.
* init.cc (dll_entry): Clarify comment.
@
text
@d958 4
a961 1
    fork_info->alloc_stack ();
d963 4
a966 1
    __sinit (_impure_ptr);
a967 1
  _main_tls = &_my_tls;
@


1.370
log
@	* dcrt0.cc (dll_crt0_1): Reset locale to "C" at the last moment before
	calling the application's main.
	* syscalls.cc (internal_setlocale): Don't reset locale to "C here.
	Change comment accordingly.
@
text
@a1110 2
static NO_COPY muto atexit_lock;

d1112 1
a1112 1
cygwin_atexit (void (*function)(void))
d1115 2
a1116 4
  atexit_lock.init ("atexit_lock");
  atexit_lock.acquire ();
  res = atexit (function);
  atexit_lock.release ();
a1122 2
  if (atexit_lock)
    atexit_lock.acquire ();
@


1.369
log
@* dcrt0.cc: Bump copyright.
Do the changelog shuffle.
@
text
@d943 2
@


1.368
log
@* dcrt0.cc (dll_crt0_1): Move internal locale setting prior to potential
globify to prevent creation of unglobbed filenames in the wrong character set.
@
text
@d4 1
a4 1
   2007, 2008, 2009
@


1.367
log
@	Throughout, revert ill-conceived replacement of hMainThread with
	GetCurrentThread/NtCurrentThread.
	* dcrt0.cc (dll_crt0_0): Duplicate main thread handle to hMainThread
	again.
@
text
@d856 3
a942 2
  /* Set internal locale to the environment settings. */
  initial_setlocale ();
@


1.366
log
@	Throughout, replace hMainProc with GetCurrentProcess/NtCurrentProcess
	according to context.  Throughout, replace hMainThread with
	GetCurrentThread/NtCurrentThread according to context.
	* dcrt0.cc (dll_crt0_0): Drop duplication of GetCurrentProcess to
	hMainProc.  Drop duplication of GetCurrentThread to hMainThread.
	* dtable.cc (dtable::stdio_init): Remove useless comment.
	* globals.cc (hMainProc): Remove.
	(hMainThread): Remove.
	* ntdll.h (NtCurrentProcess): Define.
	(NtCurrentThread: Define.
@
text
@d698 4
d788 2
@


1.365
log
@	* dcrt0.cc (dll_crt0_1): Drop calls to setlocale/_setlocale_r.  Just
	call initial_setlocale from here.
	* syscalls.cc (initial_setlocale): Set internal charset and revert
	application locale to "C".
	(setlocale): Don't set Cygwin's internal charset here.
@
text
@d612 2
a613 1
      !DuplicateHandle (hMainProc, moreinfo->myself_pinfo, hMainProc, &h, 0,
d664 1
a664 1
  if (!GetProcessDEPPolicy (hMainProc, &ppolicy, &perm))
d698 1
a698 9
  if (!DuplicateHandle (GetCurrentProcess (), GetCurrentProcess (),
		       GetCurrentProcess (), &hMainProc, 0, FALSE,
			DUPLICATE_SAME_ACCESS))
    hMainProc = GetCurrentProcess ();

  DuplicateHandle (hMainProc, GetCurrentThread (), hMainProc,
		   &hMainThread, 0, false, DUPLICATE_SAME_ACCESS);

  OpenProcessToken (hMainProc, MAXIMUM_ALLOWED, &hProcToken);
a783 3
  ProtectHandle (hMainProc);
  ProtectHandle (hMainThread);

@


1.364
log
@* dcrt0.cc (dll_crt0_1): Move cxx_malloc reset kluge from here.
(check_sanity_and_sync): to here.
* path.cc (has_dot_last_component): Rewrite to detect some corner cases that
were previously uncaught.
@
text
@d771 2
d945 1
a945 3
  setlocale (LC_CTYPE, "");
  /* Reset application locale to "C" per POSIX */
  _setlocale_r (_REENT, LC_CTYPE, "C");
@


1.363
log
@	* cygheap.cc (cygheap_init): Default locale.charset to "UTF-8".
	* dcrt0.cc (dll_crt0_1): Call setlocale (LC_CTYPE, "") here, just
	before resetting application locale to "C".
	* environ.cc (environ_init): Drop code setting locale here.
	* syscalls.cc (check_codepage): Break out check for required codepage
	from internal_setlocale.
	(internal_setlocale): Just convert CWD and $PATH from old charset to
	new charset and set internal charset.
	(setlocale): Change accordingly.  Don't require LC_ALL or LC_CTYPE to
	store old locale value.  Always call internal_setlocale if charset
	changed due to locale environment changes.
@
text
@d378 6
a774 6
  /* This is a kludge to work around a version of _cygwin_common_crt0
     which overwrote the cxx_malloc field with the local DLL copy.
     Hilarity ensues if the DLL is not loaded like while the process
     is forking. */
  __cygwin_user_data.cxx_malloc = &default_cygwin_cxx_malloc;

@


1.362
log
@* dcrt0.cc (dll_crt0_1): Add another hack to REALLY make sure that cxx_malloc
is always set to the cygwin version.
@
text
@d942 3
a944 1
  /* Reset current application locale to "C" per POSIX */
@


1.361
log
@* fhandler.h (fhandler_cygdrive:DRVSZ): New enum.
(pdrive_buf): New place to hold information about cygdrive.
* fhandler_disk_file.cc (fhandler_cygdrive::set_drives): Store drive info in
pdrive_buf since get_win32_name() could now be too small to hold everything.
(fhandler_cygdrive::rewinddir): Reset pdrive to pdrive_buf.
(fhandler_cygdrive::closedir): Ditto.
* pipe.cc (fhandler_pipe::init): Be more defensive when referencing
get_win32_name().  Rework logic which made a copy of the POSIX path and then
never used it.
@
text
@d769 6
@


1.360
log
@	* globals.cc (enum exit_states::ES_GLOBAL_DTORS): Delete.
	* dcrt0.cc (__main): Schedule dll_global_dtors to run
	atexit before global dtors.
	(do_exit): Delete test for ES_GLOBAL_DTORS and call to
	dll_global_dtors.
@
text
@d997 1
a997 1
     run as they were being loaded, so we should stack the 
@


1.359
log
@* dcrt0.cc (jit_debug): New global.
(initial_env): Set jit_debug when we are automatically starting a gdb process.
* dtable.cc (dtable::get_debugger_info): Don't tty tricks when we are being
debugged by our own captive gdb, as determined by jit_debug == true.
(dtable::init_std_file_from_handle): Detect errors when initializing a tty
early rather than at random points later.
* fhandler.h (fhandler_*::init): Return int to indicate success/failure.
* fhandler.cc (fhandler_base::init): Reflect change in return value.
* pipe.cc (fhandler_pipe::init): Ditto.
(fhandler_pipe::create_selectable): Don't say we're retrying when we aren't.
* fhandler_console.cc (fhandler_console::init): Ditto.  Return success/failure.
* fhandler_serial.cc (fhandler_serial::init): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::init): Ditto.
(fhandler_tty_slave::open): Make debugging output more detailed.
* tty.cc (tty_list::terminate): Don't close I/O handles before all slaves have
checked in.
(tty::slave_alive): Make a non-inlined function.  Check if tty pipe handles can
be created as an additional exists check.
* tty.h (tty::slave_alive): Just define here.
@
text
@d996 4
d1001 1
d1003 4
a1024 6
  if (exit_state < ES_GLOBAL_DTORS)
    {
      exit_state = ES_GLOBAL_DTORS;
      dll_global_dtors ();
    }

@


1.358
log
@* cygheap.h (mini_cygheap): New struct.
(init_cygheap): Inherit locale field via mini_cygheap.
* cygheap.cc (cygheap_at_start): Define new variable.
(cygheap): Initialize as cygheap_at_start so that locale information is always
available.
(cygheap_init): Initialize cygheap iff it is set to cygheap_at_start.
* shared_info.h (memory_init): Accommodate argument change.
* memory.cc (memory_init): Accept an argument indicating whether cygheap should
be initialized or not.
* dcrt0.cc (child_info_fork::handle_fork): Pass false to memory_init().
(child_info_spawn::handle_spawn): Ditto.
(dll_crt0_0): Pass true to memory_init when not forking or execing.
* cygheap.h (cygheap_types::HEAP_2_DLL): New enum.
* dll_init.h (dll): Remove unused namelen field.
(dll_list::load_after_fork): Accommodate change in arguments.
* dll_init.cc (dll_list::alloc): Allocate dll information in the cygwin heap.
(dll_list::detach): Free dll information from the cygwin heap.
(dll_list::load_after_fork): Use dll information in the cygwin heap directly
rather than querying parent.
* fork.cc (frok::first_dll): Delete.
(frok::child): Don't report on first_dll.  Don't pass it to load_on_fork.
(frok::parent): Don't set first_dll.
(fork): Ditto.
@
text
@d51 2
d504 1
@


1.357
log
@	* cygheap.cc (cygheap_init): Set Cygwin default locale values.
	* cygheap.h (struct cygheap_locale): New structure.
	(struct user_heap_info): Add cygheap_locale member locale.
	* dcrt0.cc (dll_crt0_1): Revert to calling _setlocale_r so that only
	the applications locale is reverted to "C".
	* environ.cc (environ_init): Remove unused got_lc variable.
	* fhandler.h (class dev_console): Remove now unsed locale variables.
	* fhandler_console.cc (fhandler_console::get_tty_stuff): Remove
	setting dev_console's locale members.
	(dev_console::con_to_str): Use internal locale settings.  Default to
	__ascii_wctomb if charset is "ASCII".
	(fhandler_console::write_normal): Ditto.
	* strfuncs.cc (__ascii_wctomb): Drop declaration.
	(__db_wctomb): Use fixed value 2 instead of not
	necessarily matching MB_CUR_MAX.
	(__eucjp_wctomb): Use 3 instead of MB_CUR_MAX.
	(sys_cp_wcstombs): Remove special case for "C" locale.
	(sys_wcstombs): Implement here.  Use internal locale data stored on
	cygheap.
	(sys_cp_mbstowcs): Remove special case for "C" locale.
	(sys_mbstowcs): Implement here.  Use internal locale data stored on
	cygheap.
	* syscalls.cc (internal_setlocale): New function to set cygheap locale
	data and to reset CWD posix path.
	(setlocale): Just call internal_setlocale from here if necessary.
	* wchar.h (__ascii_wctomb): Declare.
	(sys_wcstombs): Don't define inline, just declare.
	(sys_mbstowcs): Ditto.
@
text
@d574 1
a574 1
  memory_init ();
d601 1
a601 1
  memory_init ();
d705 1
a705 1
    memory_init ();
@


1.356
log
@	* cygheap.h (cwdstuff): Convert to class.  Make posix and dir private.
	(cwdstuff::get_posix): New method.
	(cwdstuff::reset_posix): New method.
	* dcrt0.cc (dll_crt0_1): Call setlocale rather than _setlocale_r.
	* environ.cc (environ_init): Ditto.  Prefer "C" locale over current
	codepage default locale.
	* path.cc (chdir): Use cwdstuff::get_posix method instead of accessing
	cwdstuff::posix directly.
	(cwdstuff::set): Defer creating posix path to first usage.
	(cwdstuff::get_posix): Create posix path if it's empty, and return it.
	(cwdstuff::get): Create posix path if it's empty.
	* strfuncs.cc (sys_cp_wcstombs): Use UTF-8 conversion in the "C"
	locale.
	(sys_cp_mbstowcs): Ditto.
	* syscalls.cc (gen_full_path_at): Fetch CWD posix path locked.
	(setlocale): Implement here.  Reset CWD posix path.
@
text
@d933 2
a934 2
  /* Reset current locale to "C" per POSIX */
  setlocale (LC_CTYPE, "C");
@


1.355
log
@	* dcrt0.cc (globify): Only call mbtowc for non-ascii chars.
@
text
@d934 1
a934 1
  _setlocale_r (_GLOBAL_REENT, LC_CTYPE, "C");
@


1.354
log
@	* dcrt0.cc (globify): Make multibyte-aware.
@
text
@d232 1
a232 1
	    size_t cnt = mbtowc (NULL, s, MB_CUR_MAX);
@


1.353
log
@	* ctype.cc (_CTYPE_DATA_0_127): Add _B class to TAB character.
	(__ctype_default): New character class array for default ASCII
	character set.
	(__ctype_iso): New array of character class array for ISO charsets.
	(__ctype_cp): Ditto for singlebyte Windows codepages.
	(tolower): Implement as distinct function to support any singlebyte
	charset.
	(toupper): Ditto.
	(__set_ctype): New function to copy singlebyte character classes
	corresponding to current charset to ctype_b array.
	Align copyright text to upstream.
	* dcrt0.cc (dll_crt0_1): Reset current locale to "C" per POSIX.
	* environ.cc (set_file_api_mode): Remove.
	(codepage_init): Remove.
	(parse_thing): Remove "codepage" setting.
	(environ_init): Set locale according to environment settings, or
	to current codepage, before converting environment to multibyte.
	* fhandler.h (fhandler_console::write_replacement_char): Drop argument.
	* fhandler_console.cc (dev_console::str_to_con): Call sys_cp_mbstowcs
	rather than MultiByteToWideChar.
	(fhandler_console::write_replacement_char): Always print a funny
	half filled square if a character isn't in the current charset.
	(fhandler_console::write_normal): Convert to using __mbtowc
	rather than next_char.
	* fork.cc (frok::child): Drop call to set_file_api_mode.
	* globals.cc (enum codepage_type) Remove.
	(current_codepage): Remove.
	* miscfuncs.cc (cygwin_wcslwr): Unused, dangerous.  Remove.
	(cygwin_wcsupr): Ditto.
	(is_cp_multibyte): Remove.
	(next_char): Remove.
	* miscfuncs.h (is_cp_multibyte): Drop declaration.
	(next_char): Ditto.
	* strfuncs.cc (get_cp): Remove.
	(__db_wctomb): New function to implement _wctomb_r functionality for
	doublebyte charsets using WideCharToMultiByte.
	(__sjis_wctomb): New function to replace unusable newlib function.
	(__jis_wctomb): Ditto.
	(__eucjp_wctomb): Ditto.
	(__gbk_wctomb): New function.
	(__kr_wctomb): Ditto.
	(__big5_wctomb): Ditto.
	(__db_mbtowc): New function to implement _mbtowc_r functionality for
	doublebyte charsets using MultiByteToWideChar.
	(__sjis_mbtowc): New function to replace unusable newlib function.
	(__jis_mbtowc): Ditto.
	(__eucjp_mbtowc): Ditto.
	(__gbk_mbtowc): New function.
	(__kr_mbtowc): New function
	(__big5_mbtowc): New function
	(__set_charset_from_codepage): New function.
	(sys_wcstombs): Reimplement, basically using same wide char to multibyte
	conversion as newlib's application level functions.  Plus extras.
	Add lengthy comment to explain.  Change return type to size_t.
	(sys_wcstombs_alloc): Just use sys_wcstombs.  Change return type to
	size_t.
	(sys_cp_mbstowcs): Replace sys_mbstowcs, take additional codepage
	argument.  Explain why.  Change return type to size_t.
	(sys_mbstowcs_alloc): Just use sys_mbstowcs.  Change return type to
	size_t.
	* wchar.h: Declare internal functions implemented in strfuncs.cc.
	(wcscasecmp): Remove.
	(wcsncasecmp): Remove.
	(wcslwr): Remove.
	(wcsupr): Remove.
	* winsup.h (codepage_init): Remove declaration.
	(get_cp): Ditto.
	(sys_wcstombs): Align declaration to new implementation.
	(sys_wcstombs_alloc): Ditto.
	(sys_cp_mbstowcs): Add declaration.
	(sys_mbstowcs): Define as inline function.
	(sys_mbstowcs_alloc): Align declaration to new implementation.
	(set_file_api_mode): Remove declaration.
	* include/ctype.h (isblank): Redefine to use _B character class.
	(toupper): Remove ASCII-only definition.
	(tolower): Ditto.
@
text
@d232 9
a240 1
	    *p++ = *s;
@


1.352
log
@	* dcrt0.cc (disable_dep): Disable.  Explain why.
	(dll_crt0_0): Disable calling disable_dep.  Explain why.
@
text
@d19 1
d925 2
@


1.351
log
@Remove unneeded header files from source files throughout.  Update copyrights
where appropriate.
* globals.cc: New file for generic global variables.
* mkglobals_h: New file to generate globals.h.
* mkstatic: New Script used to build a (currently non-working) static
libcygwin_s.a.
* Makefile.in: Add unused rule to build a non-working libcygwin_s.a.
(DLL_OFILES): Add globals.o.  Make all objects rely on globals.h.
(globals.h): New target.  Generate globals.h.
* cygtls.h: Honor new CYGTLS_HANDLE define to control when the HANDLE operator
is allowed in _cygtls.
* dcrt0.cc: Move most globals to globals.cc.
* init.cc: Ditto.
* environ.cc (strip_title_path): Remove now-unneeded extern.
* fhandler_serial.cc (fhandler_serial::open): Ditto.
* pinfo.cc: Ditto.
(commune_process): Ditto.
* shared.cc: Ditto.
* glob.cc: Ditto.
* strace.cc: Ditto.
* exceptions.cc: Define CYGTLS_HANDLE before including winsup.h.
* path.cc (stat_suffixes): Move here.
* security.h: Add forward class path_conv declaration.
* smallprint.cc (__small_vsprintf): Make a true c++ function.
(__small_sprintf): Ditto.
(small_printf): Ditto.
(console_printf): Ditto.
(__small_vswprintf): Ditto.
(__small_swprintf): Ditto.
* spawn.cc (spawn_guts): Remove _stdcall decoration in favor of regparm.
(hExeced): Move to globals.cc
* strfuncs.cc (current_codepage): Ditto.
(active_codepage): Ditto.
* sync.cc (lock_process::locker): Move here from dcrt0.cc.
* syscalls.cc (stat_suffixes): Move to path.cc.
* tty.cc (tty::create_master): Uncapitalize fatal warning for consistency.
* winsup.h: Include globals.h to declare most of the grab bag list of globals
which were previously defined here.
* mount.h: Move USER_* defines back to shared_info.h.
* speclib: Force temporary directory cleanup.
@
text
@d626 4
d654 1
d720 3
a722 2
  /* FIXME: This is hopefully a temporary hack, at least until the support
     case at Microsoft has been closed one way or the other.
d724 1
a724 1
     The disable_dep function disables DEP for all Cygwin processes if
d741 1
@


1.350
log
@* pinfo.h (pinfo::thisproc): Declare.  Rename from set_myself.
* pinfo.cc (pinfo::thisproc): Define.  Rename from set_myself.  Set procinfo to
NULL to avoid confusing subsequent init.
(pinfo_init): Accommodate set_myself -> pinfo::thisproc rename.
* dcrt0.cc (child_info_fork::handle_fork): Ditto.
(child_info_spawn::handle_spawn): Ditto.
@
text
@d3 3
a5 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
   2006, 2007, 2008 Red Hat, Inc.
d19 1
d41 1
d43 1
a43 19

HANDLE NO_COPY hMainProc = (HANDLE) -1;
HANDLE NO_COPY hMainThread;
HANDLE NO_COPY hProcToken;
HANDLE NO_COPY hProcImpToken;

muto NO_COPY lock_process::locker;

bool display_title;
bool strip_title_path;
bool allow_glob = true;
bool NO_COPY in_forkee;

int __argc_safe;
int __argc;
char **__argv;
#ifdef NEWVFORK
vfork_save NO_COPY *main_vfork;
#endif
d46 1
a46 7
char NO_COPY **envp;

extern "C" void __sinit (_reent *);

_cygtls NO_COPY *_main_tls;

bool NO_COPY cygwin_finished_initializing;
d48 1
a48 43
MTinterface _mtinterf;

bool NO_COPY _cygwin_testing;

char NO_COPY almost_null[1];

extern "C"
{
  /* This is an exported copy of environ which can be used by DLLs
     which use cygwin.dll.  */
  char **__cygwin_environ;
  char ***main_environ = &__cygwin_environ;
  /* __progname used in getopt error message */
  char *__progname;
  struct per_process __cygwin_user_data =
  {/* initial_sp */ 0, /* magic_biscuit */ 0,
   /* dll_major */ CYGWIN_VERSION_DLL_MAJOR,
   /* dll_major */ CYGWIN_VERSION_DLL_MINOR,
   /* impure_ptr_ptr */ NULL, /* envptr */ NULL,
   /* malloc */ malloc, /* free */ free,
   /* realloc */ realloc,
   /* fmode_ptr */ NULL, /* main */ NULL, /* ctors */ NULL,
   /* dtors */ NULL, /* data_start */ NULL, /* data_end */ NULL,
   /* bss_start */ NULL, /* bss_end */ NULL,
   /* calloc */ calloc,
   /* premain */ {NULL, NULL, NULL, NULL},
   /* run_ctors_p */ 0,
   /* unused */ {0, 0, 0, 0, 0, 0, 0},
   /* UNUSED forkee */ 0,
   /* hmodule */ NULL,
   /* api_major */ CYGWIN_VERSION_API_MAJOR,
   /* api_minor */ CYGWIN_VERSION_API_MINOR,
   /* unused2 */ {0, 0, 0, 0, 0, 0},
   /* threadinterface */ &_mtinterf,
   /* impure_ptr */ _GLOBAL_REENT,
  };
  bool ignore_case_with_glob;
  int _check_for_executable = true;
};

int NO_COPY __api_fatal_exit_val = 1;
char *old_title;
char title_buf[TITLESIZE + 1];
a978 2
exit_states NO_COPY exit_state;

@


1.349
log
@	* autoload.cc (GetSystemDEPPolicy): Define.
	(GetProcessDEPPolicy): Ditto.
	(SetProcessDEPPolicy): Ditto.
	* dcrt0.cc (disable_dep): New static function.
	(dll_crt0_0): Call disable_dep on platforms requiring it.  Add longish
	comment to explain the circumstances.
	* wincap.h (wincaps::ts_has_dep_problem): New element.
	* wincap.cc: Implement above element throughout.
	(wincapc::init): Set ts_has_dep_problem to true on 2008 Terminal
	Servers.
	* winsup.h (WINVER): Set to 0x0601.
@
text
@d629 1
a629 1
  set_myself (NULL);
d660 1
a660 1
  set_myself (h);
@


1.348
log
@* dcrt0.cc (dll_crt0_0): Don't initialize signals early when dynamically
loaded.
(dll_crt0_1): Wait until this phase to initialize signals when dynamically
loaded.
@
text
@d689 25
d778 21
@


1.347
log
@* cygwin.din (sys_sigabbrev): Add this here.
* dcrt0.cc (__argc,__argv,_check_for_executable): Remove dllexport decoration
since it is already handled in cygwin.din.
* errno.cc (_sys_errlist): Ditto.
* strsig.cc (sys_sigabbrev): Ditto.
* include/cygwin/signal.h: Protect use of dllimport when __INSIDE_CYGWIN__.
* libc/getopt.c: Revert previous changes.  Define __INSIDE_CYGWIN__.
@
text
@d700 2
a701 1
  sigproc_init ();
d763 2
@


1.346
log
@* cygheap.cc (creturn): Reorganize to avoid a new compiler warning/error.
* dtable.cc (handle_to_fn): Ditto.
* fhandler_console.cc (fhandler_console::read): Ditto.
(fhandler_console::scroll_screen): Ditto.
(dev_console::set_color): Ditto.
* fhandler_dsp.cc (fhandler_dev_dsp::write): Ditto.
(fhandler_dev_dsp::read): Ditto.
* fhandler_tape.cc (mtinfo_drive::get_status): Ditto.
* hookapi.cc (find_first_notloaded_dll): Ditto.
* mmap.cc (msync): Ditto.
* pipe.cc (pipesync::pipesync): Ditto.
* sec_acl.cc (getace): Ditto.
* sec_auth.cc (create_token): Ditto.
(lsaauth): Ditto.
* select.cc (peek_pipe): Ditto.
* spawn.cc (av::fixup): Ditto.
* syscalls.cc (popen): Ditto.
* tty.cc (tty::init_session): Ditto.
* uinfo.cc (pwdgrp::load): Ditto.
* fhandler.cc (fhandler_base::setup_overlapped): Ditto.
(fhandler_base::wait_overlapped): Rename second use of res variable to wres or
errors are not returned correctly.
* dcrt0.cc: Remove obsolete variable.
* dll_init.cc (release_upto): Fix typo involving incorrect use of '|'.
* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Avoid a compiler
warning regarding coercing type-punned variables.
(fhandler_base::fstat_by_name): Ditto.  fhandler_fifo.cc
(fhandler_fifo::open_nonserver): Fix = vs.  == typo.
(fhandler_fifo::wait): Add all conditions to switch statement to avoid a
compiler warning.
* fhandler_process.cc: Avoid unneeded initialization of variables to zero.
(fhandler_socket::listen): Add braces around initializer.
* flock.cc (inode_t::get_all_locks_list): Reorganize to avoid a compiler
warning.  Fix problem with EWOULDBLOCK error return.
* path.cc (GUID_shortcut): Use braces around struct initializer.
(cygwin_conv_path): Reorganize to avoid a compiler warning.
* random.cc (dummy): Mark variable as volatile to avoid a "used uninitialized"
warning.
* libc/getopt.c: Mark some variables as dllexport although gcc doesn't seem to
do the right thing with them.
* libc/minires-os-if.c (get_registry_dns_items): Coerce some function arguments
to avoid a compiler warning.
@
text
@d54 2
a55 2
int _declspec(dllexport) __argc;
char _declspec(dllexport) **__argv;
d106 1
a106 1
  int __declspec (dllexport) _check_for_executable = true;
@


1.345
log
@Changes suggested by Dave Korn.
* dcrt0.cc (cygwin_exit): Remove (hopefully) extraneous call to
dll_global_dtors.
* dll_init.cc (dll_global_dtors): Run destructors in reverse dependency/load
order.
* dll_init.h (dll_list): Add dll_global_dtors as a friend.
@
text
@a106 3
#ifdef DEBUGGING
  int pinger;
#endif
@


1.344
log
@* dcrt0.cc (dll_crt0_1): Add a symbol denoting return from call to main().
* exceptions.cc (stack_info::walk): Stop walking the stack when we hit
_cygwin_exit_return rather than just blindly stopping when PC becomes zero.
@
text
@a1114 1
  dll_global_dtors ();
@


1.343
log
@* dcrt0.cc (dll_crt0_0): Remove calling malloc_init and
user_shared_initialize_1 from here.
(dll_crt0_1): Remove dynamically_loaded check.  Just call malloc_init and
user_shared_initialize unconditionally.
* shared.cc (user_shared_create): Rename from user_shared_initialize.
(user_shared_initialize): Rename from user_shared_initialize_1.  Move complete
user_shared content initialization code here from user_shared_create.
* syscalls.cc (seteuid32): Remove call to user_shared_initialize_1.  That is
implied by the "true" argument to user_shared_create().
@
text
@d936 4
@


1.342
log
@	* dcrt0.cc (dll_crt0_1): Call malloc_init and user_shared_initialize_1
	only in non-dynamically loaded case.
@
text
@a754 14
  if (dynamically_loaded)
    {
      /* When dynamically loaded. we must initialize the user shared memory
	 entirely here since dll_crt0_1 will not be called.  Stuff in
	 user_shared_initialize_1 relies on malloc and cygtls being available
	 and the initialization isn't finished without calling it.  In the
	 non-dynamical case this is called in dll_crt0_1, because malloc_init
	 has to test for overloaded malloc functionality in the application.
	 That's not an issue when cygwin is loaded dynamically.  It will just
	 use its own malloc area. */
      malloc_init ();
      user_shared_initialize_1 ();
    }

d767 6
a772 5
  if (!dynamically_loaded)
    {
      malloc_init ();
      user_shared_initialize_1 ();
    }
@


1.341
log
@	* dcrt0.cc (dll_crt0_0): Call malloc_init and user_shared_initialize_1
	here in case we're dynamically loaded.  Explain why.
	(dll_crt0_1): Call user_shared_initialize_1 from here.
	* mount.cc (is_native_path): New inline function testing for native
	and long Win32 path prefix.
	(is_unc_share): Remove long WIn32 path prefix test.
	(mount_info::create_root_entry): Use PATH_MAX buffer.
	(mount_info::init): Ditto.
	(mount_info::add_item): Test for is_native_path as well.
	* path.cc (normalize_win32_path): Simplify native path prefix code.
	* shared.cc (user_shared_initialize_1): New function taking user
	shared initialization code relying on malloc and cygtls.
	(user_shared_initialize): Move mountinfo initialization to
	user_shared_initialize_1.
	* shared_info.h (user_shared_initialize_1): Declare.
	* syscalls.cc (seteuid32): Call user_shared_initialize_1 after user
	changed.
@
text
@d780 7
a786 1
  malloc_init ();
a796 2
  user_shared_initialize_1 ();

@


1.340
log
@	* autoload.cc (DsGetDcNameW): Replace DsGetDcNameA.
	* dcrt0.cc (child_info_spawn::handle_spawn): Drop artificial
	supplementary group list from calling setgroups in parent.
	* grp.cc (internal_getgroups): Drop 9x-only code.  Reformat.
	* sec_auth.cc (get_logon_server): Do everything in WCHAR only.
	(get_user_groups): Ditto.  Use wlogonserver in LookupAccountNameW
	calls, too.
	(is_group_member): Get logon server as first argument and use in call
	to NetLocalGroupGetMembers.
	(get_user_local_groups): Get logon server as first argument and use in
	calls to NetLocalGroupEnum and LookupAccountNameW.  Revamp to work
	more correctly in domain environments.
	(get_server_groups): Accommodate aforementioned changed function calls.
	* security.h (get_logon_server): Change prototype accordingly.
	* uinfo.cc (cygheap_user::env_logsrv): Accommodate changed
	get_logon_server call.
@
text
@d755 14
d791 2
@


1.339
log
@	* dcrt0.cc (dll_crt0_0): Set SEM_NOGPFAULTERRORBOX error mode, too,
	to accommodate Vista/Longhorn.
	* spawn.cc (spawn_guts): Move check for CREATE_SUSPENDED condition
	after the call to ch.set() since it depends on it.
@
text
@d674 1
@


1.338
log
@	* dcrt0.cc (dll_crt0_0): Move CWD initialization from here...
	(dll_crt0_1): ...to here.
@
text
@d697 1
a697 1
  SetErrorMode (SEM_FAILCRITICALERRORS);
@


1.337
log
@Add miscfuncs.h to files as needed throughout.
* mount.cc: New file.
* path.cc: Move mount-specific stuff into mount.cc.  Move common stuff into
miscfuncs.cc.  Remove unneeded includes.
* miscfuncs.cc: Move some common path functions here.
* miscfuncs.h: New file.
* winsup.h: Move miscelleneous functions to miscfuncs.h.
* dcrt0.cc: Remove unneeded includes.
* Makefile.in (DLL_OFILES): Add mount.o.
* include/cygwin/config.h: Fix a minor typo.
@
text
@a753 2
  cygheap->cwd.init ();

d776 2
@


1.336
log
@	* dcrt0.cc (insert_file): Fix potential buffer overflow.
@
text
@d13 1
a14 1
#include <stdio.h>
a15 1
#include <string.h>
a16 1
#include "exceptions.h"
a17 4
#include <limits.h>
#include <winnls.h>
#include <wingdi.h>
#include <winuser.h>
a22 1
#include "security.h"
a31 1
#include "sync.h"
a32 1
#include "environ.h"
a109 1
  int NO_COPY __api_fatal_exit_val = 1;
d112 1
@


1.335
log
@	* dcrt0.cc (insert_file): Convert filename to WCHAR and call
	CreateFileW to allow UTF-8 filenames.
@
text
@d168 1
a168 1
  sys_mbstowcs (wname, NT_MAX_PATH + 1, name + 1);
@


1.334
log
@	* Fix copyright dates.
@
text
@d42 1
d165 1
d167 9
a175 7
  f = CreateFile (name + 1,
		  GENERIC_READ,		 /* open for reading	*/
		  FILE_SHARE_READ,       /* share for reading	*/
		  &sec_none_nih,	 /* no security		*/
		  OPEN_EXISTING,	 /* existing file only	*/
		  FILE_ATTRIBUTE_NORMAL, /* normal file		*/
		  NULL);		 /* no attr. template	*/
@


1.333
log
@	* fhandler.cc (fhandler_base::dup): Drop setting flags in the parent.

	Implement advisory file locking.
	* cygheap.h (struct init_cygheap): Add inode_list member.
	* cygwin.din (lockf): Export.
	* dcrt0.cc (child_info_spawn::handle_spawn): Call
	fixup_lockf_after_exec.
	* dtable.h (class dtable): Add fhandler_disk_file as friend class.
	* fhandler.cc (fhandler_base::close): Call del_my_locks if node is set.
	(fhandler_base::fhandler_base): Initialize node to NULL.
	(fhandler_base::fixup_after_fork): Ditto.
	* fhandler.h (class fhandler_base): Add member node.
	* fhandler_disk_file.cc (fhandler_disk_file::lock): Delete.
	* flock.cc: Implement all advisory file locking here.
	(fhandler_disk_file::lock): Implement here.
	(flock): Call fcntl with F_FLOCK bit set.  Remove test main function.
	(lockf): New function.
	* fork.cc (frok::child): Call fixup_lockf_after_fork.
	* ntdll.h (DIRECTORY_ALL_ACCESS): Define.
	(struct _OBJECT_BASIC_INFORMATION): Define.
	(enum _EVENT_TYPE): Define.
	(NtCreateDirectoryObject): Declare.
	(NtCreateEvent): Declare.
	(NtCreateMutant): Declare.
	(NtOpenEvent): Declare.
	(NtOpenMutant): Declare.
	* include/cygwin/version.h: Bump API minor number.
@
text
@d4 1
a4 1
   2006, 2007 Red Hat, Inc.
@


1.332
log
@	* winsup.h (NT_MAX_PATH): Revert ill-advised change to 32767.
	Accommodate change throughout.

	* cygwin.din (cygwin_conv_path): Export.
	(cygwin_conv_path_list): Export.
	(cygwin_create_path): Export.
	* dcrt0.cc (dll_crt0_1): Use cygwin_conv_path.
	* dtable.cc (handle_to_fn): Ditto.  Don't expect UNICODE_STRING being
	0-terminated.
	* environ.cc (env_plist_to_posix): New helper function.
	(env_plist_to_win32): Ditto.
	(env_path_to_posix): Ditto.
	(env_path_to_win32): Ditto.
	(return_MAX_PATH): Remove.
	(conv_envvars): Use new helper functions.  Drop removed members.
	(win_env::operator =): Accommodate removal of path length functions.
	(win_env::add_cache): Accommodate new env helper function API.
	(posify): Ditto.
	* environ.h (struct win_env): Ditto. Remove path length function
	pointers since they are unused.
	* path.cc (warn_msdos): Use cygwin_conv_path.
	(getfileattr): Use new tmp_pathbuf::u_get method.
	(fillout_mntent): Ditto.
	(symlink_info::check): Ditto.
	(path_conv::check): Use sizeof (WCHAR) instead of constant 2.
	(symlink_info::check_reparse_point): Ditto.
	(conv_path_list): Get max size of target string as argument.  Call
	cygwin_conv_path as helper function.
	(cygwin_conv_path): New function.
	(cygwin_create_path): New function.
	(cygwin_conv_to_win32_path): Just call cygwin_conv_path with size set
	to MAX_PATH.
	(cygwin_conv_to_full_win32_path): Ditto.
	(cygwin_conv_to_posix_path): Ditto.
	(cygwin_conv_to_full_posix_path): Ditto.
	(conv_path_list_buf_size): Add FIXME comment.
	(env_PATH_to_posix): Rename from env_win32_to_posix_path_list.
	Add size argument as required for env helper functions.
	(cygwin_win32_to_posix_path_list): Call conv_path_list with size set to
	MAX_PATH.
	(cygwin_posix_to_win32_path_list): Ditto.
	(cygwin_conv_path_list): New function.
	(cwdstuff::get): Fix length argument in call to sys_wcstombs.
	* spawn.cc (find_exec): Use cygwin_conv_path_list.
	* tls_pbuf.h (tmp_pathbuf::u_get: New method.
	* uinfo.cc (cygheap_user::ontherange): Allocate temporary path buffers
	using tmp_pathbuf.  Use cygwin_conv_path.
	* winf.cc (av::unshift): Use cygwin_conv_path.
	* include/cygwin/version.h: Bump API minor number.
	* include/sys/cygwin.h: Comment out old cygwin32_XXX API.
	Mark old path handling API as deprecated.
	(cygwin_conv_path_t): Typedef.  Define values.
	(cygwin_conv_path): Declare.
	(cygwin_create_path): Declare.
	(cygwin_conv_path_list): Declare.
@
text
@d660 1
d693 1
@


1.331
log
@	* dcrt0.cc (initial_env): Only use local buffer "buf" if DEBUGGING is
	enabled.  Replace calls to GetEnvironmentVariable by calls to
	GetEnvironmentVariableA for clarity.  Call GetEnvironmentVariableA
	with NULL buffer.
	(cygbench): Ditto, drop local buffer.
	* environ.cc (getearly): Call GetEnvironmentVariableA.
	(environ_init): Retrieve unicode environment and convert to current
	codepage locally.
	(getwinenveq): Ditto.
	* exceptions.cc (try_to_debug): Accommodate new sys_mbstowcs calling
	convention.
	* fhandler_clipboard.cc (set_clipboard): Call sys_mbstowcs to retrieve
	required buffer length.
	* fork.cc (frok::child): Call GetEnvironmentVariableA.
	* miscfuncs.cc: Accommodate changed arguments in calls to sys_mbstowcs.
	* sec_auth.cc: Ditto.
	* strfuncs.cc (sys_wcstombs_alloc): Fix formatting.
	(sys_mbstowcs): Change arguments to allow specifying a source string
	length.
	(sys_mbstowcs_alloc): Ditto.
	* uinfo.cc (cygheap_user::ontherange): Accommodate changed arguments in
	calls to sys_mbstowcs.
	* winsup.h (sys_mbstowcs): Adjust declaration.
	(sys_mbstowcs_alloc): Ditto.
@
text
@d862 2
a863 1
	  cygwin_conv_to_posix_path (__argv[0], new_argv0);
@


1.330
log
@Perform whitespace cleanup throughout.
* dcrt0.cc (signal_shift_subtract): Eliminate ancient backwards compatibility.
(check_sanity_and_sync): Ditto.
* winsup.h (SIGTOMASK): Ditto.  Just use constant in signal calculation.
* include/cygwin/version: Remove backwards signal mask compatibility define.
* path.cc (symlink_info::check_sysfile): Cosmetic change.
* registry.cc (get_registry_hive_path): Remove unneeded variable.
* exceptions.cc (handle_sigsuspend): Eliminate thread signal mask and use
either main sigmask or current thread sigmask.
(set_process_mask): Ditto.
(sighold): Ditto.
(sigrelse): Ditto.
(sigset): Ditto.
(set_process_mask_delta): Ditto.
(_cygtls::call_signal_handler): Ditto.
* fhandler_process.cc (format_process_status): Ditto.
* fhandler_termios.cc (fhandler_termios::bg_check): Ditto.
* pinfo.h (class pinfo): Ditto.
* select.cc (pselect): Ditto.
* signal.cc (sigprocmask): Ditto.
(abort): Ditto.
(sigpause): Ditto.
(sigsend): Ditto.
(wait_sig): Ditto.
* thread.h (pthread::parent_tls): New member.
* thread.cc (pthread::pthread): Record parent_tls here.
(pthread::thread_init_wrapper): Initialize sigmask from parent thread.
@
text
@d535 1
a535 2
  char buf[NT_MAX_PATH];
  if (GetEnvironmentVariable ("CYGWIN_TESTING", buf, sizeof (buf) - 1))
d539 1
d542 1
a542 1
  if (GetEnvironmentVariable ("CYGWIN_SLEEP", buf, sizeof (buf) - 1))
d550 1
a550 1
  if (GetEnvironmentVariable ("CYGWIN_DEBUG", buf, sizeof (buf) - 1))
d1144 1
a1144 2
  char buf[1024];
  if (GetEnvironmentVariable ("CYGWIN_MISMATCH_OK", buf, sizeof (buf)))
d1164 1
a1164 2
  char buf[1024];
  if (GetEnvironmentVariable ("CYGWIN_BENCH", buf, sizeof (buf)))
@


1.329
log
@	* cygheap.cc (cwcsdup): New function.
	(cwcsdup1): New function.
	* cygheap.h (cygheap_user::get_windows_id): New method returning PWCHAR.
	(cwcsdup): Declare.
	(cwcsdup1): Declare.
	* registry.cc (get_registry_hive_path): Use WCHAR instead of char
	throughout.
	(load_registry_hive): Ditto.
	* registry.h (get_registry_hive_path): Change declaration accordingly.
	(load_registry_hive): Ditto.
	* sec_helper.cc (cygpsid::string): New method returning PWCHAR.
	* security.h (cygpsid::string): Declare.
	* syscalls.cc (seteuid32): Convert local name var to WCHAR.
	* uinfo.cc (cygheap_user::env_userprofile): Convert local name buffers
	to WCHAR.  Call sys_wcstombs_alloc to generate puserprof buffer.

	* winsup.h: Fix comment.
	(NT_MAX_PATH): New definition for maximum internal path length.
	Use throughout where appropriate.
	* include/limits.h (PATH_MAX): Set to 4096 as on Linux.
@
text
@a76 8
/* Used in SIGTOMASK for generating a bit for insertion into a sigset_t.
   This is subtracted from the signal number prior to shifting the bit.
   In older versions of cygwin, the signal was used as-is to shift the
   bit for masking.  So, we'll temporarily detect this and set it to zero
   for programs that are linked using older cygwins.  This is just a stopgap
   measure to allow an orderly transfer to the new, correct sigmask method. */
unsigned NO_COPY int signal_shift_subtract = 1;

a437 4

  if (CYGWIN_VERSION_DLL_MAKE_COMBINED (p->dll_major, p->dll_minor) <=
      CYGWIN_VERSION_DLL_BAD_SIGNAL_MASK)
    signal_shift_subtract = 0;
@


1.328
log
@	* dcrt0.cc (dll_crt0_1): Fix typo in call to sys_wcstombs.
	* miscfuncs.cc (next_char): Initialize ret to keep gcc happy.
@
text
@d547 1
a547 1
  char buf[PATH_MAX];
d564 2
a565 2
      char buf1[PATH_MAX];
      len = GetModuleFileName (NULL, buf1, PATH_MAX);
d873 1
a873 1
	  char *new_argv0 = (char *) malloc (PATH_MAX);
@


1.327
log
@	* string.h: Re-enable inline strcasematch and strncasematch
	implementations and rename to ascii_strcasematch/ascii_strncasematch.
	* dcrt0.cc: Replace str[n]casematch with ascii_str[n]casematch where
	applicable.
	* environ.cc: Ditto.
	* fhandler_process.cc: Ditto.
	* hookapi.cc: Ditto.
	* path.cc: Ditto.
	* spawn.cc: Ditto.
	* strace.cc: Ditto.
	* syscalls.cc: Ditto.
	* uinfo.cc: Ditto.
	* winf.cc: Ditto.
@
text
@d860 1
a860 1
      size_t size = sys_wcstombs (NULL, size, wline);
@


1.326
log
@	* dcrt0.cc (dll_crt0_1): Use GetCommandLineW and convert to current
	codepage.
	* environ.cc (set_file_api_mode): Always set file api to ANSI if not
	using the OEM codepage.
	(codepage_init): Allow "utf8" codepage.
	* fhandler_clipboard.cc (set_clipboard): Convert clipbuf to void and
	cast as needed.  Always convert input to wide char and write
	CF_UNICODETEXT to clipboard.
	(fhandler_dev_clipboard::read): Read CF_UNICODETEXT from clipboard and
	convert to current codepage if CYGWIN_NATIVE format is not available.
	* fhandler_console.cc: Drop redundant undef.
	* smallprint.cc (__small_vsprintf): Convert PWCHAR and UNICODE_STRING
	to current codepage for printing.
	* strfuncs.cc: Use PWCHAR throughout.
	(get_cp): Return CP_UTF8 for utf8_cp codepage setting.
	(sys_wcstombs): Allow NULL target buffer.
	(sys_wcstombs_alloc): New function.
	(sys_mbstowcs_alloc): Ditto.
	* winsup.h (codepage_type): Add utf8_cp.
	(HEAP_NOTHEAP): Define.
	(sys_wcstombs_alloc): Declare.
	(sys_mbstowcs_alloc): Declare.
@
text
@d895 1
a895 1
      if (cp > __progname && strcasematch (cp, ".exe"))
@


1.325
log
@	* dcrt0.cc: Include string.h.
	(initial_env): Use small_printf's %P specifier.
	* dll_init.cc (dll_list::alloc): Use PATH_MAX instead of CYG_MAX_PATH
	for path name buffer size.
	* dll_init.h (struct dll): Ditto.
	* environ.cc: Include string.h.
	(win_env::add_cache): Use temporary local buffer for path conversion.
	(posify): Ditto.
	* exceptions.cc (try_to_debug): Use CreateProcessW to allow long path
	names.
	* miscfuncs.cc: Drop unused implementations of strcasematch and
	strncasematch.
	(ch_case_eq): Drop.
	(strcasestr): Drop.
	(cygwin_wcscasecmp): New function.
	(cygwin_wcsncasecmp): New function.
	(cygwin_strcasecmp): New function.
	(cygwin_strncasecmp): New function.
	(cygwin_wcslwr): New function.
	(cygwin_wcsupr): New function.
	(cygwin_strlwr): New function.
	(cygwin_strupr): New function.
	* ntdll.h (RtlDowncaseUnicodeString): Declare.
	(RtlUpcaseUnicodeString): Declare.
	(RtlInt64ToHexUnicodeString): Fix typo in comment.
	* string.h: Disable not NLS aware implementations of strcasematch
	and strncasematch.
	(cygwin_strcasecmp): Declare.
	(strcasecmp): Define as cygwin_strcasecmp.
	(cygwin_strncasecmp): Declare.
	(strncasecmp): Define as cygwin_strncasecmp.
	(strcasematch):Define using cygwin_strcasecmp.
	(strncasematch):Define using cygwin_strncasecmp.
	(cygwin_strlwr): Declare.
	(strlwr): Define as cygwin_strlwr.
	(cygwin_strupr): Declare.
	(strupr): Define as cygwin_strupr.
	* wchar.h: New file.
	* wincap.cc (wincapc::init): Use "NT" as fix OS string.
	* winsup.h (strcasematch): Drop declaration.
	(strncasematch): Ditto.
	(strcasestr): Ditto.
@
text
@d21 1
d859 4
a862 5
      char *line = GetCommandLineA ();
      line = strcpy ((char *) alloca (strlen (line) + 1), line);

      if (current_codepage == oem_cp)
	CharToOemA (line, line);
@


1.324
log
@	* dcrt0.cc (initial_env): Use PATH_MAX instead of CYG_MAX_PATH for path
	name buffer size.
	(dll_crt0_1): Allocate new_argv0 with PATH_MAX size.
	* exceptions.cc (debugger_command): Set size to 2 * PATH_MAX + 20;
	(error_start_init): Use PATH_MAX instead of CYG_MAX_PATH for path
	name buffer size.
	* external.cc (fillout_pinfo): Always fill out ep.progname 0-terminated.
	Fill out ep.progname_long.
	* fhandler_process.cc (fhandler_process::fill_filebuf): Allocate
	buffer for executable filename with PATH_MAX size.
	* pinfo.cc: Throughout use PATH_MAX instead of CYG_MAX_PATH.
	* pinfo.h (class _pinfo): Set progname size to PATH_MAX.
	* smallprint.cc: Include limits.h.  Use PATH_MAX instead of CYG_MAX_PATH
	for path name buffer size.
	* strace.cc (strace::vsprntf): Ditto.
	* include/sys/cygwin.h (EXTERNAL_PINFO_VERSION_32_LP): Define.
	(EXTERNAL_PINFO_VERSION): Set to EXTERNAL_PINFO_VERSION_32_LP.
	(struct external_pinfo): Add progname_long member.
	* include/sys/dirent.h: Correctly include limits.h instead of
	sys/limits.h.
@
text
@d16 1
d556 1
a556 3
      buf[0] = '\0';
      len = GetModuleFileName (NULL, buf, PATH_MAX);
      console_printf ("Sleeping %d, pid %u %s\n", ms, GetCurrentProcessId (), buf);
@


1.323
log
@	Drop old SetResourceLock stuff in favor of mutos.
	* dcrt0.cc (_reslock): Remove.
	(__cygwin_user_data): Accommodate removal of resourcelocks member.
	(dll_crt0_0): Don't initialize resourcelocks.
	* exceptions.cc (_cygtls::signal_exit): Drop resourcelocks handling.
	* mmap.cc (mmap_guard): New muto.
	(LIST_LOCK): Define.
	(LIST_UNLOCK): Define.
	(mmap_list::search_record): Remove.
	(mmap_list::try_map): Include code for anonymous case from
	mmap_list::search_record.
	(mmap_is_attached_or_noreserve): Access bookkeeping lists in a thread
	safe way.
	(mmap64): Replace SetResourceLock/ReleaseResourceLock by
	LIST_LOCK/LIST_UNLOCK.  Lock at the latest possible point.
	(munmap): Replace SetResourceLock/ReleaseResourceLock by
	LIST_LOCK/LIST_UNLOCK.
	(msync): Ditto.
	(mprotect): Ditto.
	* thread.cc (ResourceLocks::Lock): Remove.
	(SetResourceLock): Remove.
	(ReleaseResourceLock): Remove.
	(ResourceLocks::Init): Remove.
	(ResourceLocks::Delete): Remove.
	* thread.h (SetResourceLock): Drop declaration.
	(ReleaseResourceLock): Ditto.
	(class ResourceLocks): Drop definition.
	* include/sys/cygwin.h (class ResourceLocks): Drop forward declaration.
	(struct per_process): Replace resourcelocks with additional unused2
	element.
	(per_process_overwrite): Accommodate above change.
@
text
@d545 1
a545 1
  char buf[CYG_MAX_PATH];
d556 1
a556 1
      len = GetModuleFileName (NULL, buf, CYG_MAX_PATH);
d564 2
a565 2
      char buf1[CYG_MAX_PATH];
      len = GetModuleFileName (NULL, buf1, CYG_MAX_PATH);
d874 1
a874 1
	  char *new_argv0 = (char *) malloc (CYG_MAX_PATH);
@


1.322
log
@* dcrt0.cc (codepage_type): Remove definition.
* strfuncs.cc: Move it here.  New file with bits of miscfuncs.cc.
* miscfuncs.cc: Remove wide character stuff.
@
text
@a82 1
ResourceLocks _reslock NO_COPY;
d115 2
a116 2
   /* unused2 */ {0, 0, 0, 0, 0},
   /* resourcelocks */ &_reslock, /* threadinterface */ &_mtinterf,
a760 1
  user_data->resourcelocks->Init ();
@


1.321
log
@	* dcrt0.cc (dll_crt0_0): Call set_cygwin_privileges here, after
	initializing hProcToken.
	* sec_helper.cc (init_global_security): Don't call set_cygwin_privileges        here.
@
text
@a57 1
codepage_type current_codepage = ansi_cp;
@


1.320
log
@	* cygheap.cc (cygheap_init): Fix formatting.  Remove comment.  Set
	shared_prefix depending only on terminal service capability.
	* dcrt0.cc (dll_crt0_1): Don't call set_cygwin_privileges here.
	* fhandler_fifo.cc (fhandler_fifo::open): Create the mutex as global
	object.
	* posix_ipc.cc (ipc_mutex_init): Use cygheap->shared_prefix.
	(ipc_cond_init): Ditto.
	* sec_helper.cc (privilege_name): Make static.  Use LookupPrivilegeName
	directly to be independent of the state of cygheap.
	(set_privilege): Take a LUID as parameter instead of an index value.
	Only print debug output in case of failure.
	(set_cygwin_privileges): Add comment.  Use LookupPrivilegeValue to
	get privilege LUIDs.
	(init_global_security): Call set_cygwin_privileges here.
	* security.h (privilege_name): Drop declaration.
	(set_privilege): Declare according to above change.
	(set_process_privilege): Call privilege_luid to get LUID.
	(_push_thread_privilege): Ditto.
	* shared.cc (open_shared): Add comment.  On systems supporting the
	SeCreateGlobalPrivilege, try to create/open global shared memory first.
	Fall back to local shared memory if that fails.
	* thread.cc (semaphore::semaphore): Use cygheap->shared_prefix.
	* wincap.h (wincapc::has_create_global_privilege): New element.
	* wincap.cc: Implement above element throughout.
@
text
@d737 1
d739 1
@


1.319
log
@	Throughout remove all usage of wincap.has_security.
	* environ.cc (environ_init): Drop setting allow_ntsec here.
	* grp.cc (initgroups32): Drop usage of label "out".
	* security.cc (allow_ntsec): Set to true by default.
	* syscalls.cc (seteuid32): Remove label success_9x.
	* wincap.cc: Remove has_security throughout.
	* wincap.h: Ditto.
@
text
@a841 3
  /* Can be set only after environment has been initialized. */
  set_cygwin_privileges (hProcToken);

@


1.318
log
@* dcrt0.cc (child_info_fork::alloc_stack_hard_way): Change sense of guard test.
Increase size of stack reserved and increase size before the current stack
pointer.  Use pointers when doing arithmetic.
(dll_crt0_1): Initialize exception handler when we notice we're the child of a
fork from non-main thread.
* fork.cc (frok::parent): Make argument volatile.
(frok::child): Ditto.
(lock_signals): New class.
(lock_pthread): Ditto.
(hold_everhthing): Ditto.
(frok::parent): Move atforkprepare and atforkparent to lock_pthread class.
(fork): Make ischild boolean.  Use hold_everything variable within limited
scope to set various mutexes in such a way as to avoid deadlocks.
* thread.h (pthread_mutex::tid): New variable, active when debugging for
tracking thread id of owner.
(pthread_mutex::set_owner): Set tid when debugging.
* thread.cc (pthread_mutex::pthread_mutex): Clear tid.
(pthread_mutex::_unlock): Ditto when unlocking.
(pthread_mutex::fixup_after_fork): Set tid to special value after forking since
owner is unknown.
@
text
@d737 1
a737 2
  if (wincap.has_security ())
    OpenProcessToken (hMainProc, MAXIMUM_ALLOWED, &hProcToken);
d843 1
a843 2
  if (wincap.has_security ())
    set_cygwin_privileges (hProcToken);
@


1.317
log
@	* Makefile.in (DLL_IMPORTS): Add libntdll.a.
	* autoload.cc: Remove all symbols from advapi32.dll, kernel32.dll and
	ntdll.dll available on all platforms since NT4.

	Throughout remove all usage of wincap.is_winnt.
	* dcrt0.cc (dll_crt0_0): Remove call to mmap_init.
	* fhandler.h (class fhandler_base): Remove has_changed flag.
	(fhandler_disk_file::touch_ctime): Remove declaration.
	(fhandler_disk_file::readdir_9x): Ditto.
	(fhandler_disk_file::touch_ctime): Remove.
	(fhandler_disk_file::readdir_9x): Remove.
	(fhandler_disk_file::closedir): Call NtClose instead of CloseHandle.
	* mmap.cc: Throughout call CreateMapping and MapView directly.
	(VirtualProt9x): Remove.
	(VirtualProtNT): Remove.
	(VirtualProtEx9x): Remove.
	(VirtualProtExNT): Remove.
	(VirtualProtect): Remove define.
	(VirtualProtectEx): Remove define.
	(CreateMapping9x): Remove.
	(CreateMappingNT): Rename to CreateMapping.
	(MapView9x): Remove.
	(MapViewNT): Rename to MapView.
	(struct mmap_func_t): Remove definition.
	(mmap_funcs_9x): Remove.
	(mmap_funcs_nt): Remove.
	(mmap_func): Remove.
	(mmap_init): Remove.
	* net.cc (getdomainname): Drop comment. Use NT4 registry key only.
	(get_95_ifconf): Remove.
	* pinfo.cc (winpids::enumNT): Rename to winpids::enum_processes.
	(winpids::enum9x): Remove.
	(winpids::set): Just call enum_processes directly.
	(winpids::enum_init): Ditto.
	* pinfo.h (class winpids): Drop enum_processes pointer.  Rename
	enumNT to enum_processes.  Drop enum9x declaration.  Drop initialization
	of enum_processes throughout.
	* registry.cc (get_registry_hive_path): Just create NT key.
	(load_registry_hive): Only load NT specific file.
	* syscalls.cc (unlink_9x): Remove.
	(unlink): Just call unlink_nt.
	* wincap.cc: Remove is_winnt flag throughout.
	* wincap.h: Ditto.
	* winsup.h: Remove mmap_init declaration.
@
text
@d454 1
a454 2
#define CYGWIN_GUARD ((wincap.has_page_guard ()) ? \
		     PAGE_EXECUTE_READWRITE|PAGE_GUARD : PAGE_NOACCESS)
d463 1
a463 1
  bool noguard;
d474 1
a474 1
      noguard = 1;
d478 3
a480 3
      newbase = stacktop;
      newlen = (DWORD) stackbottom - (DWORD) stacktop;
      noguard = 0;
d482 1
d486 1
a486 2

  new_stack_pointer = (void *) ((LPBYTE) stackbottom - stacksize);
d493 2
a494 1
  if (!noguard)
d496 1
a496 1
      m.BaseAddress = (LPVOID) ((DWORD) m.BaseAddress - 1);
d829 1
d831 1
@


1.316
log
@	Partially revert change from 2005-04-03, always running under an
	impersonation token, which collides with Vista UAC.
	* cygheap.h (deimpersonate): revert to self instead of impersonating
	hProcImpToken.
	(reimpersonate): Only impersonate if setuid.
	* dcrt0.cc (dll_crt0_0): Don't initialize hProcImpToken here.
	(dll_crt0_1): Set privileges on hProcToken.
	* fork.cc (frok::child): Set privileges on hProcToken.  Close handle to
	hProcImpToken.
	* grp.cc (internal_getgroups): Use hProcToken instead of hProcImpToken.
	* security.cc (check_access): Create hProcImpToken on demand here.
	* security.h (set_process_privilege): Set privileges on hProcToken.
	(_push_thread_privilege): Use hProcToken instead of hProcImpToken.
	(pop_thread_privilege): If not setuid'ed, revert to self.
	* syscalls.cc (setegid32): Drop setting primary group on hProcImpToken.
	Close handle to hProcImpToken.
	* uinfo.cc (internal_getlogin): Ditto.
	* winsup.h (clear_procimptoken): New inline function.
@
text
@d4 1
a4 1
   2006 Red Hat, Inc.
a728 1
  mmap_init ();
@


1.315
log
@* child_info.h (child_info_spawn::__stdin): New element.
(child_info_spawn::__stdin): Ditto.
(CURR_CHILD_INFO_MAGIC): Regenerate.
* dcrt0.cc (check_sanity_and_sync): Minor cleanup.
(child_info_spawn::handle_spawn): Handle new __std* elements by calling
move_fd.
* dtable.cc (dtable::move_fd): Define new function.
* dtable.h (dtable::move_fd): Declare new function.
* fhandler.h (fhandler_pipe::popen_pid): Declare new element.
* fhandler.h (fhandler_pipe::get_popen_pid): Define new function.
* fhandler.h (fhandler_pipe::set_popen_pid): Ditto.
* pipe.cc (fhandler_pipe::fhandler_pipe): Zero popen_pid.
(fhandler_pipe::dup): Ditto.
* spawn.cc (handle): Change second argument to bool.
(spawn_guts): Accept __stdin/__stdout arguments and set them appropriately in
child_info structure and in STARTUPINFO structure.
* syscalls.cc (popen): New cygwin-specific implementation using spawn.
(pclose): Ditto.
* winsup.h (spawn_guts): Accommodate new arguments for spawn_guts.
* fhandler.cc (fhandler_base::set_no_inheritance): Make second arg a bool.
* fhandler.h (fhandler_base::set_no_inheritance): Ditto for declaration.
* child_info.h (child_info::msv_count): Rename from the now-inappropriate
"zero".
(child_info_spawn::filler): Add filler to work around Vista bug.
(child_info_fork::filler): Ditto.
* dcrt0.cc (get_cygwin_startup_info): Remove "zero" check since it is now
always filled out.
* fork.cc (frok::parent): Move ch.zero manipulation to constructor.
* spawn.cc (spawn_guts): Ditto.  Remove _ch wrapper.
* sigproc.cc (child_info::child_info): Initialize starter[].
* shared.cc (shared_info::heap_slop_size): Remove noisy system_printfs.
* shared_info.h (CURR_SHARED_MAGIC): Regenerate.
@
text
@a773 11
  /* Late duplicate simplifies tweaking the process token in uinfo.cc. */
  if (wincap.has_security ()
      && !DuplicateTokenEx (hProcToken, MAXIMUM_ALLOWED, NULL,
			    SecurityImpersonation, TokenImpersonation,
			    &hProcImpToken))
#ifdef DEBUGGING
    system_printf ("DuplicateTokenEx failed, %E");
#else
    ;
#endif

d844 1
a844 1
    set_cygwin_privileges (hProcImpToken);
@


1.314
log
@	* dcrt0.cc (get_cygwin_startup_info): Fix comment.
	* wincap.cc (wincapc::init): Always reset needs_count_in_si_lpres2 to
	false on non 64-bit systems.
@
text
@d428 1
a428 3
    {
      api_fatal ("per_process sanity check failed");
    }
a590 2
  DWORD zeros[sizeof (child_proc_info->zero)
	      / sizeof (child_proc_info->zero[0])] = {0};
a594 25
  /* It appears that when running under WOW64 on Vista 64, the first DWORD
     value in the datastructure lpReserved2 is pointing to (zero[0] in
     Cygwin), has to reflect the size of that datastructure as used in the
     Microsoft C runtime (a count value, counting the number of elements in
     two subsequent arrays, BYTE[count and HANDLE[count]), even though the C
     runtime isn't used.  Otherwise, if zero[0] is 0 or too small, the
     datastructure gets overwritten.

     This seems to be a bug in Vista's WOW64, which apparently copies the
     lpReserved2 datastructure not using the cbReserved2 size information,
     but using the information given in the first DWORD within lpReserved2
     instead.  32 bit Windows and former WOW64 don't care if zero[0] is 0
     or a sensible non-0 count value.  However, it's not clear if a non-0
     count doesn't result in trying to evaluate the content, so we do this
     really only for Vista 64 for now.

     exec/spawn as well as fork write an appropriate value into zero[0] now,
     depending on the wincap.needs_count_in_si_lpres2 flag.  The value is
     sizeof (child_info_*) / 5 which results in a count which covers the
     full datastructure, plus not more than 4 extra bytes.  This is ok as
     long as the child_info structure is cosily stored within a bigger
     datastructure. */
  if (wincap.needs_count_in_si_lpres2 ())
    zeros[0] = si.cbReserved2 / 5;

d596 1
a596 1
      || memcmp (res->zero, zeros, sizeof (res->zero)) != 0)
a601 4
      else if (res->intro == PROC_MAGIC_GENERIC
	       && res->magic != CHILD_INFO_MAGIC)
	multiple_cygwin_problem ("proc magic", res->magic,
				 CHILD_INFO_MAGIC);
d688 5
@


1.313
log
@	* dcrt0.cc (get_cygwin_startup_info): Change zeros to DWORD array.
	Expect first DWORD in child_info struct being set to non-zero if
	wincap.needs_count_in_si_lpres2 is set.  Add comment to explain why.
	* fork.cc (frok::parent): Set ch.zero[0] to a sensible count value
	if wincap.needs_count_in_si_lpres2 is set.
	* spawn.cc (spawn_guts): Ditto.  Add filler bytes after ch on stack
	to accomodate needs_count_in_si_lpres2.
	* wincap.h: Define needs_count_in_si_lpres2 throughout.
	* wincap.cc: Ditto.
@
text
@d610 4
a613 3
     instead.  Funny enough, 32 bit Vista doesn't care if zero[0] is 0 or a
     non-0 count value, while older versions of Windows might crash if
     zero[0] is set to a non-zero value, as observed at least on XP 64.
@


1.312
log
@	* dcrt0.cc (__api_fatal): Drop spare argument to __small_sprintf.
	* smallprint.c (__small_vsprintf): Preserve GetLastError value.
	* winsup.h (api_fatal): Simplify.  Drop duplicate filename arg.
@
text
@d593 2
a594 1
  char zeros[sizeof (child_proc_info->zero)] = {0};
d598 25
@


1.311
log
@* dcrt0.cc (dll_crt0_0): Call tty_list::init_session here.
(dll_crt0_1): Reflect renaming from tty_init to tty::init_session.
(do_exit): Reflect moving of tty_terminate into tty_list.
* exceptions.cc (events_init): Move tty_mutex stuff elsewhere.
* fhandler_console.cc (set_console_title): Use lock_ttys class.
* fhandler_termios.cc (fhandler_termios::bg_check): Make debug output more
accurate.
* fhandler_tty.cc (fhandler_tty_slave::open): Reflect move of attach_tty into
tty_list class.  Don't attempt to grab master end of pty if master doesn't
exist.
(fhandler_pty_master::open): Reflect move of allocate_tty into tty_list class.
Use lock_ttys::release to release mutex.  Improve debugging output.
(fhandler_pty_master::setup): Remove if 0'ed block.  Fix argument to
SetNamedPipeHandleState.
* pinfo.cc (_pinfo::set_ctty): Lock ttys before setting sid/pgid.  Improve
debugging.  Add temporary debugging.
* tty.cc (tty_list::init_session): New function.
(tty::init_session): Rename from tty_init.  Reflect move of attach_tty to
tty_list class.
(tty::create_master): Rename from create_tty_master.
(tty_list::attach): Rename from attach_tty.  Reflect renaming of connect_tty to
connect.  Ditto for allocate_tty.
(tty_terminate): Delete.
(tty_list::terminate): Subsume tty_terminate.  Use lock_ttys rather than
manipulating mutex directly.
(tty_list::allocate): Rename from allocate_tty.  Use lock_ttys rather than
manipulating mutex directly.  Don't set sid here since linux apparently doesn't
do this.  Reflect move of create_tty_master into tty.
(lock_ttys::lock_ttys): Define new constructor.
(lock_ttys::release): New function.
* tty.h (tty::exists): Return false immediately if !master_pid.
(tty::set_master_closed): Define new function.
(tty::create_master): Ditto.
(tty::init_session): Ditto.
(tty_list::mutex): New field.
(tty_list::allocate): Define new function.
(tty_list::connect): Ditto.
(tty_list::attach): Ditto.
(tty_list::init_session): Ditto.
(lock_ttys): New class.
(tty_init): Delete declaration.
(tty_terminate): Ditto.
(attach_tty): Ditto.
(create_tty_master): Ditto.
@
text
@d1154 1
a1154 1
  int n = __small_sprintf (buf, "%P: *** fatal error - ", cygwin_pid (GetCurrentProcessId ()));
@


1.311.4.1
log
@	* dcrt0.cc (__api_fatal): Drop spare argument to __small_sprintf.
	* smallprint.c (__small_vsprintf): Preserve GetLastError value.
	* winsup.h (api_fatal): Simplify.  Drop duplicate filename arg.
@
text
@d1154 1
a1154 1
  int n = __small_sprintf (buf, "%P: *** fatal error - ");
@


1.311.4.2
log
@	* dcrt0.cc (get_cygwin_startup_info): Change zeros to DWORD array.
	Expect first DWORD in child_info struct being set to non-zero if
	wincap.needs_count_in_si_lpres2 is set.  Add comment to explain why.
	* fork.cc (frok::parent): Set ch.zero[0] to a sensible count value
	if wincap.needs_count_in_si_lpres2 is set.
	* spawn.cc (spawn_guts): Ditto.  Add filler bytes after ch on stack
	to accomodate needs_count_in_si_lpres2.
	* wincap.h: Define needs_count_in_si_lpres2 throughout.
	* wincap.cc: Ditto.
@
text
@d593 1
a593 2
  DWORD zeros[sizeof (child_proc_info->zero)
	      / sizeof (child_proc_info->zero[0])] = {0};
a596 25

  /* It appears that when running under WOW64 on Vista 64, the first DWORD
     value in the datastructure lpReserved2 is pointing to (zero[0] in
     Cygwin), has to reflect the size of that datastructure as used in the
     Microsoft C runtime (a count value, counting the number of elements in
     two subsequent arrays, BYTE[count and HANDLE[count]), even though the C
     runtime isn't used.  Otherwise, if zero[0] is 0 or too small, the
     datastructure gets overwritten.

     This seems to be a bug in Vista's WOW64, which apparently copies the
     lpReserved2 datastructure not using the cbReserved2 size information,
     but using the information given in the first DWORD within lpReserved2
     instead.  Funny enough, 32 bit Vista doesn't care if zero[0] is 0 or a
     non-0 count value, while older versions of Windows might crash if
     zero[0] is set to a non-zero value, as observed at least on XP 64.

     exec/spawn as well as fork write an appropriate value into zero[0] now,
     depending on the wincap.needs_count_in_si_lpres2 flag.  The value is
     sizeof (child_info_*) / 5 which results in a count which covers the
     full datastructure, plus not more than 4 extra bytes.  This is ok as
     long as the child_info structure is cosily stored within a bigger
     datastructure. */
  if (wincap.needs_count_in_si_lpres2 ())
    zeros[0] = si.cbReserved2 / 5;

@


1.311.4.3
log
@	* dcrt0.cc (get_cygwin_startup_info): Fix comment.
	* wincap.cc (wincapc::init): Always reset needs_count_in_si_lpres2 to
	false on non 64-bit systems.
@
text
@d610 3
a612 4
     instead.  32 bit Windows and former WOW64 don't care if zero[0] is 0
     or a sensible non-0 count value.  However, it's not clear if a non-0
     count doesn't result in trying to evaluate the content, so we do this
     really only for Vista 64 for now.
@


1.311.4.4
log
@2007-01-13  Christopher Faylor  <me@@cgf.cx>

	* glob.cc: Update copyright notice with latest from FreeBSD.
	(glob0): Use correct type for c variable to propagate previously
	detected protection.

2007-01-12  Corinna Vinschen  <corinna@@vinschen.de>

	* cygheap.cc (_csbrk): Fix off-by-one error.
	* cygwin.sc: Give .cygheap a minimum size of 512K.

2007-01-12  Corinna Vinschen  <corinna@@vinschen.de>

	* fork.cc (child_copy): Add missing Windows PID in debug output.

2007-01-12  Corinna Vinschen  <corinna@@vinschen.de>

	* syscalls.cc: Update copyright.

2007-01-10  Corinna Vinschen  <corinna@@vinschen.de>

	* mmap.cc (mmap64): Pre-Reserve space for the whole mapping to get a
	useful, valid address before the actual mappings take place.
	Fix typo in comment.

2007-01-10  Corinna Vinschen  <corinna@@vinschen.de>

	* syscalls.cc (sync): Use b_drive for B: drive (Thanks to Howard Chu).

2007-01-09  Corinna Vinschen  <corinna@@vinschen.de>

	* mmap.cc: Do bookkeeping in 4K pages, rather than in 64K chunks.

2007-01-01  Christopher Faylor  <me@@cgf.cx>

	* spawn.cc (spawn_guts): Don't expect synchronization from a non-cygwin
	_P_NOWAIT process.

2006-12-12  Christopher Faylor  <me@@cgf.cx>

	* syscalls.cc (popen): Allow '[rw][bt]'.

2006-12-11  Christopher Faylor  <me@@cgf.cx>

	* sigproc.cc (child_info::child_info): Move old comment about msv_count
	here.  Edit it slightly to reflect new sensibilities.

2006-12-11  Christopher Faylor  <me+cygwin@@cgf.cx>

	* child_info.h (child_info_spawn::__stdin): New element.
	(child_info_spawn::__stdin): Ditto.
	(CURR_CHILD_INFO_MAGIC): Regenerate.
	* dcrt0.cc (check_sanity_and_sync): Minor cleanup.
	(child_info_spawn::handle_spawn): Handle new __std* elements by calling
	move_fd.
	* dtable.cc (dtable::move_fd): Define new function.
	* dtable.h (dtable::move_fd): Declare new function.
	* fhandler.h (fhandler_pipe::popen_pid): Declare new element.
	* fhandler.h (fhandler_pipe::get_popen_pid): Define new function.
	* fhandler.h (fhandler_pipe::set_popen_pid): Ditto.
	* pipe.cc (fhandler_pipe::fhandler_pipe): Zero popen_pid.
	(fhandler_pipe::dup): Ditto.
	* spawn.cc (handle): Change second argument to bool.
	(spawn_guts): Accept __stdin/__stdout arguments and set them
	appropriately in child_info structure and in STARTUPINFO structure.
	* syscalls.cc (popen): New cygwin-specific implementation using spawn.
	(pclose): Ditto.
	* winsup.h (spawn_guts): Accommodate new arguments for spawn_guts.

	* fhandler.cc (fhandler_base::set_no_inheritance): Make second arg a bool.
	* fhandler.h (fhandler_base::set_no_inheritance): Ditto for declaration.

	* child_info.h (child_info::msv_count): Rename from the now-inappropriate
	"zero".
	(child_info_spawn::filler): Add filler to work around Vista bug.
	(child_info_fork::filler): Ditto.
	* dcrt0.cc (get_cygwin_startup_info): Remove "zero" check since it is
	now always filled out.
	* fork.cc (frok::parent): Move ch.zero manipulation to constructor.
	* spawn.cc (spawn_guts): Ditto.  Remove _ch wrapper.
	* sigproc.cc (child_info::child_info): Initialize starter[].

	* shared.cc (shared_info::heap_slop_size): Remove noisy system_printfs.
	* shared_info.h (CURR_SHARED_MAGIC): Regenerate.
@
text
@d428 3
a430 1
    api_fatal ("per_process sanity check failed");
d593 2
d599 25
d625 1
a625 1
      || res->intro != PROC_MAGIC_GENERIC || res->magic != CHILD_INFO_MAGIC)
d631 4
a720 5
  if (__stdin >= 0)
    cygheap->fdtab.move_fd (__stdin, 0);
  if (__stdout >= 0)
    cygheap->fdtab.move_fd (__stdout, 1);

@


1.311.4.5
log
@	Drop old SetResourceLock stuff in favor of mutos.
	* dcrt0.cc (_reslock): Remove.
	(__cygwin_user_data): Accommodate removal of resourcelocks member.
	(dll_crt0_0): Don't initialize resourcelocks.
	* exceptions.cc (_cygtls::signal_exit): Drop resourcelocks handling.
	* mmap.cc (mmap_guard): New muto.
	(LIST_LOCK): Define.
	(LIST_UNLOCK): Define.
	(mmap_list::search_record): Remove.
	(mmap_list::try_map): Include code for anonymous case from
	mmap_list::search_record.
	(mmap_is_attached_or_noreserve): Access bookkeeping lists in a thread
	safe way.
	(mmap64): Replace SetResourceLock/ReleaseResourceLock by
	LIST_LOCK/LIST_UNLOCK.  Lock at the latest possible point.
	(munmap): Replace SetResourceLock/ReleaseResourceLock by
	LIST_LOCK/LIST_UNLOCK.
	(msync): Ditto.
	(mprotect): Ditto.
	* thread.cc (ResourceLocks::Lock): Remove.
	(SetResourceLock): Remove.
	(ReleaseResourceLock): Remove.
	(ResourceLocks::Init): Remove.
	(ResourceLocks::Delete): Remove.
	* thread.h (SetResourceLock): Drop declaration.
	(ReleaseResourceLock): Ditto.
	(class ResourceLocks): Drop definition.
	* include/sys/cygwin.h (class ResourceLocks): Drop forward declaration.
	(struct per_process): Replace resourcelocks with additional unused2
	element.
	(per_process_overwrite): Accommodate above change.

	* mmap.cc: Convert usage of dynamically growing cmalloced arrays to
	cmalloced linked lists throughout.
	(class mmap_record): Add LIST_ENTRY element.
	(mmap_record::match): New method, taking over match algorithm from
	list::search_record.
	(class mmap_list): Rename from class list.  Add LIST_ENTRY.  Convert
	recs to a LIST_HEAD.  Drop nrecs and maxrecs members.
	(mmap_list::get_record): Drop entirely.
	(mmap_list::free_recs): Drop entirely.
	(mmap_list::del_record): Take mmap_record to delete as parameter.
	(mmap_list::search_record): Convert to mmap_record::match.
	(class mmap_areas): Rename from class map.  Convert lists to LIST_HEAD.
	(mmap_areas::get_list): Drop entirely.
	(mmap_areas::del_list): Take mmap_list to delete as parameter.
	(mprotect): Fix indentation.
@
text
@d84 1
d117 2
a118 2
   /* unused2 */ {0, 0, 0, 0, 0, 0},
   /* threadinterface */ &_mtinterf,
d763 1
@


1.310
log
@* cygheap.cc (init_cygheap::close_ctty): Remove obsolete code.
* dcrt0.cc (child_info_spawn::handle_spawn): Signal ready after we've run
fixup_after_exec.
* dtable.cc (dtable::fixup_after_exec): Add debugging output.
* fhandler_tty.cc (fhandler_pty_master::doecho): Use class version of
to_master.
(fhandler_tty_common::close): Remove obsolete code.
(fhandler_tty_slave::fixup_after_exec): Don't close, since this is done in
dtable's fixup_after_exec.  (revisit later?)
(fhandler_pty_master::fixup_after_exec): Ditto.
@
text
@d771 1
a870 1

d872 1
a872 1
  tty_init ();
d1113 1
a1113 1
      tty_terminate ();
@


1.309
log
@* cygtls.h (CYGTLS_PADSIZE): Bump up or suffer a regrettable collision with the
call chain.
@
text
@a687 1
  ready (true);
d694 1
@


1.308
log
@* cygheap.cc (cygheap_fixup_in_child): Don't close parent handle here.  Let the
caller do that.
* dcrt0.cc (child_info_spawn::handle_spawn): Close parent handle here to allow
fixup_after_exec functions to use it.
* cygtls.cc (_cygtls::call2): Avoid calling exit thread if called with
*crt0_1 functions.
* cygtls.h (_cygtls::isinitialized): Check that we actually have a tls before
seeing if it is initialized.
* gendef (_sigfe_maybe): Ditto.
* dcrt0.cc (dll_crt0_1): Remove static, use just one argument.
* dll_init.cc (dllcrt0_info): New structure.
(dll_dllcrt0): Change into a front-end to renamed dll_dllcrt0_1 so that we'll
always be assured of having something like a tls.
(dll_dllcrt0_1): New function, basically renamed from from dll_dllcrt0.
Unconditionally call _my_tls.init_exception_handler now that we are assured of
having a tls.  Change variable name from "linking" to "linked".
* winsup.h (dll_crt0_1): Declare.
(dll_dllcrt0_1): Ditto.
@
text
@d537 1
a537 2
#ifdef DEBUGGING
void
d540 3
a544 1
#endif
a581 1
	  DebugBreak ();
@


1.307
log
@white space
@
text
@d695 6
d792 2
a793 2
static void
dll_crt0_1 (void *, void *)
@


1.306
log
@* cygtls.cc (_cygtls::call): Call call2 using _my_tls.
(_cygtls::init_exception_handler): Always replace existing exception handler
with cygwin exception handler.
* cygtls.h (_cygtls::call2): Remove static designation.
* dcrto.cc (dll_crt0_1): Define in a way that allows calling via _cygtls::call.
(_initialize_main_tls): Delete.
(_dll_crt0): Call dll_crt0_1 via cygtls::call.  Set _main_tls here.
* external.cc (cygwin_internal): Implement CW_CYGTLS_PADSIZE.
* include/sys/cygwin.h (CW_CYGTLS_PADSIZE): Define.
* tlsoffsets.h: Regenerate.
@
text
@d489 1
a489 1
  new_stack_pointer = (void *) ((LPBYTE) stackbottom - stacksize); 
@


1.305
log
@* sigproc.cc (no_signals_available): Detect hwait_sig == INVALID_HANDLE_VALUE.
(wait_sig): Set hwait_sig to INVALID_HANDLE_VALUE on __SIGEXIT.
* cygtls.cc (_cygtls::init_thread): Zero entire _my_tls structure and no more.
* cygtls.h (_my_tls::padding): Delete.
(CYGTLS_PADSIZE): Redefine concept of padding to mean padding at the end of the
stack.
* dcrt0.cc (initialize_main_tls): Change return to void.
* gentls_offsets: Treat const specially, too.  Keep going after a '}' is found.
Change negative offset calculation to use CYGTLS_PADSIZE.
* init.cc (_my_oldfunc): New variable.
(threadfunc_fe): Use stored tls value for oldfunc rather than blindly writing
to the stack.
(munge_threadfunc): Set oldfunc in tls.
(dll_entry): Initialize tls allocation.
* tlsoffsets.h: Regenerate.
@
text
@d787 1
a787 1
dll_crt0_1 (char *)
a955 17
static void
initialize_main_tls (char *padding)
{
  if (!_main_tls)
    {
      _main_tls = &_my_tls;
      _main_tls->init_thread (padding, NULL);
    }
  return;
}

/* Wrap the real one, otherwise gdb gets confused about
   two symbols with the same name, but different addresses.

   UPTR is a pointer to global data that lives on the libc side of the
   line [if one distinguishes the application from the dll].  */

a959 3

  char padding[CYGTLS_PADSIZE];

d965 2
a966 2
  initialize_main_tls (padding);
  dll_crt0_1 (padding);
@


1.304
log
@* dcrt0.cc (dll_crt0_0): Move user_data->{resourcelocks,threadinterface}
initialization here from dll_crt0_1.
(dll_crt0_1): See above.
@
text
@d956 1
a956 1
struct _reent *
d964 1
a964 1
  return &_main_tls->local_clib;
@


1.303
log
@* child_info.h (CURR_CHILD_INFO_MAGIC): Update.
(child_info_fork::alloc_stack): Move into this class.
(child_info_fork::alloc_stack_hard_way): Ditto.
* dcrt0.cc (child_info_fork::alloc_stack): Ditto.
(child_info_fork::alloc_stack_hard_way): Ditto.
(_dll_crt0): Reference alloc_stack via fork_info.
@
text
@d758 3
a797 2
  user_data->resourcelocks->Init ();
  user_data->threadinterface->Init ();
@


1.302
log
@* dcrt0.cc (sm): Delete.
(alloc_stack_hard_way): Figure out where the stack lives here rather than
relying on previously filled out information which has been invalid since
1.5.19.
@
text
@d459 2
a460 2
static void
alloc_stack_hard_way (child_info_fork *ci, volatile char *b)
d473 1
a473 1
  if (ci->stacktop > (LPBYTE) m.AllocationBase && ci->stacktop < curbot)
d476 1
a476 1
      newlen = (LPBYTE) ci->stackbottom - (LPBYTE) curbot;
d481 2
a482 2
      newbase = ci->stacktop;
      newlen = (DWORD) ci->stackbottom - (DWORD) ci->stacktop;
d487 1
a487 3
		ci->stacktop, ci->stackbottom);

  new_stack_pointer = (void *) ((LPBYTE) ci->stackbottom - ci->stacksize);
d489 2
a490 1
  if (!VirtualAlloc (new_stack_pointer, ci->stacksize, MEM_COMMIT,
d493 1
a493 1
	       new_stack_pointer, ci->stacksize);
d506 1
a506 1
  ci->stacktop = m.BaseAddress;
d521 2
a522 2
static void
alloc_stack (child_info_fork *ci)
d526 2
a527 2
  if (_tlsbase != ci->stackbottom)
    alloc_stack_hard_way (ci, esp);
d530 2
a531 2
      char *stacktop = (char *) ci->stacktop - 4096;
      while (_tlstop >= stacktop)
d533 1
a533 1
      ci->stacksize = 0;
d980 1
a980 1
    alloc_stack (fork_info);
@


1.301
log
@* dcrt0.cc (child_info_fork::handle_fork): Set uid/gid in myself so that it can
be used by subsequent startup functions.
(dll_crt0_0): Issue a warning if DuplicateTokenEx fails and DEBUGGING.
(dll_crt0_1): Move user_data->{resourcelocks,threadinterface} initialization
here from dll_crt0_0.
* fork.cc (frok::child): Tell wait_for_sigthread that this is fork.
(frok::parent): Only initialize start_time once.  Tighten time when we're
"deimpersonated".
* sigproc.cc (signal_fixup_after_exec): Rework (futiley) sa_buf stuff.  Add
debugging output.
(wait_for_sigthread): Accept an argument which illustrates whether we are
forked or not.
(wait_sig): Avoid using myself pointer.
* winsup.h ((wait_for_sigthread): Reflect change to argument.
@
text
@a454 1
static MEMORY_BASIC_INFORMATION NO_COPY sm;
a465 1
  LPBYTE curbot = (LPBYTE) sm.BaseAddress + sm.RegionSize;
d468 6
a473 1
  if (ci->stacktop > (LPBYTE) sm.AllocationBase && ci->stacktop < curbot)
@


1.300
log
@* dcrt0.cc (child_info_spawn::handle_spawn): Don't initialize the console
handler here.
* dtable.cc (dtable::stdio_init): Initialize console handler here.
@
text
@d656 3
a755 3
  user_data->resourcelocks->Init ();
  user_data->threadinterface->Init ();

d764 10
a773 4
  if (wincap.has_security ())
    DuplicateTokenEx (hProcToken, MAXIMUM_ALLOWED, NULL,
		      SecurityImpersonation, TokenImpersonation,
		      &hProcImpToken);
d793 2
d807 1
a807 1
  create_signal_arrived ();
d849 1
a849 1
      old_title = title_buf;
@


1.299
log
@* fhandler.cc (fcntl): Print flags in hex.
* dcrt0.cc (dll_crt0_0): Semi-revert 2006-03-14 change which moved pinfo_init
and uinfo_init here.
(dll_crt0_1): Ditto.
(__dll_crt0): Ditto.  Don't call update_envptrs here.
(dll_crt0_1): Ditto.  Move wait_for_sigthread call here from dll_crt0_0.
* environ.cc (environ_init): Call it here instead.
* sigproc.cc (my_readsig): New static variable.
(wait_for_sigthread): Set up read pipe here since we are assured that we have
the proper privileges when this is called.
(talktome): Eliminate second argument since it is available as a global now.
(wait_sig): Reflect use of my_readsig.
@
text
@a695 1
  init_console_handler (myself->ctty >= 0);
@


1.298
log
@* dcrt0.cc (dll_crt0_0): Call SetErrorMode earlier.
* pinfo.cc (_pinfo::dup_proc_pipe): Reset wr_proc_pipe on failure.  Return
previous pipe handle.
* pinfo.h (_pinfo::dup_proc_pipe): Reflect change to return value.
* spawn.cc (spawn_guts): Restore previous proc pipe on retry or if process
exits before synchronization.
@
text
@a756 6
  if (!in_forkee)
    {
      pinfo_init (envp, envc);
      uinfo_init ();	/* initialize user info */
    }

d835 1
d847 8
a965 5
  extern DWORD threadfunc_ix;
  wait_for_sigthread ();
  if (!threadfunc_ix)
    system_printf ("internal error: couldn't determine location of thread function on stack.  Expect signal problems.");

a966 1
  update_envptrs ();
@


1.297
log
@* child_info.h (child_status): New enum.
(child_info::flag): Rename from 'straced'.
(child_info::isstraced): New function.
(child_info::iscygwin): Ditto.
(child_info_fork::handle_fork): Reparmize.
(child_info_fork::handle_failure): Ditto.
(child_info_spawn::handle_spawn): New function.
* dcrt0.cc (get_cygwin_startup_info): Use isstraced method.
(child_info_spawn::handle_spawn): Define new function from code previously in
dll_crt0_0.
(dll_crt0_0): Move spawn stuff into handle_spawn.  Only call
init_console_handler for fork case.
* sigproc.cc (child_info::child_info): Set flag appropriately.
(child_info::proc_retry): Treat exit code as "funny" if it's a cygwin process.
* spawn.cc (spawn_guts): Remove commented out flag setting.
@
text
@d705 2
a731 1
  SetErrorMode (SEM_FAILCRITICALERRORS);
@


1.296
log
@* dcrt0.cc (dll_crt0_0): Oops.  We need to bother with setting this in the
fork/exec case.
@
text
@d625 1
a625 1
	    if (res->straced)
d672 27
d748 1
a748 22
	    HANDLE h;
	    cygheap_fixup_in_child (true);
	    memory_init ();
	    if (!spawn_info->moreinfo->myself_pinfo ||
		!DuplicateHandle (hMainProc, spawn_info->moreinfo->myself_pinfo,
				  hMainProc, &h, 0, FALSE,
				  DUPLICATE_SAME_ACCESS | DUPLICATE_CLOSE_SOURCE))
	      h = NULL;
	    set_myself (h);
	    child_proc_info->ready (true);
	    __argc = spawn_info->moreinfo->argc;
	    __argv = spawn_info->moreinfo->argv;
	    envp = spawn_info->moreinfo->envp;
	    envc = spawn_info->moreinfo->envc;
	    if (!dynamically_loaded)
	      cygheap->fdtab.fixup_after_exec ();
	    signal_fixup_after_exec ();
	    if (spawn_info->moreinfo->old_title)
	      {
		old_title = strcpy (title_buf, spawn_info->moreinfo->old_title);
		cfree (spawn_info->moreinfo->old_title);
	      }
a750 1
      init_console_handler (myself->ctty >= 0);
@


1.295
log
@* dcrt0.cc (dll_crt0_0): Don't bother with setting init_console_handler here
since it will be set later when we discover if we have a ctty or not.
* exceptions.cc (init_console_handler): Properly remove NULL handler.
@
text
@d745 1
@


1.294
log
@* child_info.h (CURR_CHILD_INFO_MAGIC): Regenerate.
(child_info::retry): Move here from fork subclass.
(child_info::exit_code): New field.
(child_info::retry_count): Max retry count for process start.
(child_info::proc_retry): Declare new function.
(child_info_fork::retry): Move to parent.
(child_info_fork::fork_retry): Ditto.
* dcrt0.cc (child_info::fork_retry): Rename and move.
(child_info_fork::handle_failure): Move.
(dll_crt0_0): Initialize console handler based on whether we have a controlling
tty or not.  Avoid nonsensical check for fork where it can never occur.
* environ.cc (set_proc_retry): Rename from set_fork_retry.  Set retry_count in
child_info.
(parse_thing): Reflect above change.
* exceptions.cc (dummy_ctrl_c_handler): Remove unused variable name.
(ctrl_c_handler): Always return TRUE for the annoying CTRL_LOGOFF_EVENT.
* fhandler_termios.cc (fhandler_termios::tcsetpgrp): Remove call to
init_console_handler.
* fhandler_tty.cc (fhandler_tty_slave::open): Just call mange_console_count
here and let it decide what to do with initializing console control handling.
* fork.cc (fork_retry): Remove definition.
(frok::parent): Define static errbuf and use in error messages (not thread safe
yet).  Close pi.hThread as soon as possible.  Protect pi.hProcess as soon as
possible.  Don't set retry_count.  That happens automatically in the
constructor now.  Accommodate name change from fork_retry to proc_retry.
* init.cc (dll_entry): Turn off ctrl-c handling early until we know how it is
supposed to be handled.
* pinfo.cc (_pinfo::dup_proc_pipe): Remember original proc pipe value for
failure error message.  Tweak debug message slightly.
* sigproc.cc (child_info::retry_count): Define.
(child_info::child_info): Initialize retry count.
(child_info::sync): Set exit code if process dies before synchronization.
(child_info::proc_retry): Rename from child_info_fork::fork_retry.  Use
previously derived exit code.  Be more defensive about what is classified as an
error exit.
(child_info_fork::handle_failure): Move here from dcrt0.cc.
* spawn.cc (spawn_guts): Maintain error mode when starting new process to avoid
annoying pop ups.  Move deimpersonate call within new loop.  Move envblock
freeing to end.  Loop if process dies prematurely with bad exit code.
* syscalls.cc (init_console_handler): Remove hopefully unneeded call to
init_console_handler.
@
text
@d710 1
a710 4
    {
      memory_init ();
      init_console_handler (!!GetConsoleCP ());
    }
@


1.293
log
@* cygheap.cc (init_cygheap::manage_console_count): Turn console control handler
on/off depending on whether we have allocated a console or not.
* dcrt0.cc (child_info_fork::fork_retry): Add more potential retry statuses.
(dll_crt0_0): Turn on/off console control depending on whether we have a
controlling tty or not.
* exceptions.cc (init_console_handler): Change BOOL to bool.
* fhandler_console.cc (fhandler_console::need_invisible): Cosmetic change.
* winsup.h (init_console_handler): Reflect argument type change.
* wincap.h (supports_setconsolectrlhandler_null): Remove duplicate capability
throughout.
* wincap.cc: Ditto.
@
text
@a644 27
DWORD
child_info_fork::fork_retry (HANDLE h)
{
  DWORD exit_code;
  if (!GetExitCodeProcess (h, &exit_code))
    return STILL_ACTIVE;	/* should never happen */
  switch (exit_code)
    {
    case STATUS_CONTROL_C_EXIT:
    case STATUS_DLL_INIT_FAILED:
    case STATUS_DLL_INIT_FAILED_LOGOFF:
    case EXITCODE_RETRY:
      if (retry-- > 0)
	return 0;
      break;
    }
  return exit_code;
}

bool
child_info_fork::handle_failure (DWORD err)
{
  if (retry > 0)
    ExitProcess (EXITCODE_RETRY);
  return 0;
}

d712 1
a712 1
      init_console_handler (myself->ctty >= 0);
d733 1
a733 2
	    if (child_proc_info->type != _PROC_FORK)
	      child_proc_info->ready (true);
a747 1
	init_console_handler (myself->ctty >= 0);
@


1.292
log
@* child_info.h (child_info_fork::fork_retry): Declare new function.
* dcrt0.cc (child_info_fork::fork_retry): Define new function.
* fork.cc (frok::parent): Move retry decision into child_info_fork::fork_retry
and honor what it tells us to do.
* sigproc.cc (sig_send): Unhold signals on __SIGEXIT.
@
text
@d654 2
a655 3
      if (retry-- > 0)
	return 0;
      break;
a710 1
  init_console_handler (TRUE);
d737 4
a740 1
    memory_init ();
d776 1
d787 1
@


1.291
log
@* dcrt0.cc (main_environ): Initialize to &__cygwin_environment.
(dll_crt0_1): Move resourcelocks, thread interface, pinfo_init, and
uinfo_init...
(dll_crt0_0): ...to here.
(_dll_crt0): Call update_envptrs here after setting main_environ.
* environ.cc (environ_init): Eliminate initted variable.  Don't call
update_envptrs here.
* sigproc.cc (wait_sig): Use my_sendsig when calling CreatePipe to avoid a
dereference.
@
text
@d645 20
@


1.290
log
@* child_info.h (child_info_fork::handle_failure): Declare new function.
(child_info_fork::retry): New field.
* dcrt0.cc (__api_fatal_exit_val): Define.
(child_info_fork::handle_failure): Define new function.
(__api_fatal): Exit using __api_fatal_exit_val value.
* environ.cc (set_fork_retry): Set fork_retry based on CYGWIN environment
variable.
(parse_thing): Add "fork_retry" setting.
* fork.cc (fork_retry): Define.
(frok::parent): Reorganize to allow retry of failed child creation if child
signalled that it was ok to do so.
* heap.cc (heap_init): Signal parent via handle_failure when VirtualAlloc
fails.
* pinfo.h (EXITCODE_RETRY): Declare.
* sigproc.cc (child_info::sync): Properly exit with failure condition if called
for fork and didn't see subproc_ready.
* spawn.cc (spawn_guts): Use windows pid as first argument.
* winsup.h: Remove obsolete NEW_MACRO_VARARGS define.
(__api_fatal_exit_val): Declare.
(set_api_fatal_return): Define.
(in_dllentry): Declare.
* exceptions.cc (inside_kernel): Remove unneeded in_dllentry declaration.
@
text
@d39 1
d96 1
a96 1
  char ***main_environ;
d757 8
a795 2
  user_data->resourcelocks->Init ();
  user_data->threadinterface->Init ();
a843 3
  /* Initialize our process table entry. */
  pinfo_init (envp, envc);

a853 3
  /* Initialize user info. */
  uinfo_init ();

d971 1
@


1.289
log
@* dcrt0.cc (dll_crt0_0): Reorganize so that sigproc_init is called a little
later.  Add a comment.
* fork.cc (resume_child): Make void.
(frok::parent): Only zero pi when necessary.  Explicitly zero si.  Set
this_errno when child_copy fails.  Accommodate change to resume_child.
* sigproc.cc (sigalloc): Move global_sigs initialization here.
(sigproc_init): Move global_sigs.
(sig_send): Just check for flush signals once.
* wincap.h: Define supports_setconsolectrlhandler_null throughout.
* wincap.cc: Ditto.
@
text
@d125 1
d644 8
d1169 1
a1169 1
  myself.exit (1);
@


1.288
log
@* cygtls.h (CYGTLS_INITIALIZED): Change to a little more unlikely value.
(CYGTLSMAGIC): Delete.
* dcrt0.cc (dll_crt0_0): Call sigproc_init during init startup.
(_dll_crt0): Don't worry about sync_startup.  Just wait for sigthread here.
* dll_init.cc (cygwin_detach_dll): Only pick up tls version of retaddr if we
have a valid tls.
* fork.cc (frok::child): Remove sigproc_init initialization since it happens
much earlier now.
* gendef: Recognize SIGFE_MAYBE.
(fefunc): Generate calls to _sigfe_maybe, if appropriate.
(_sigfe_maybe): New function.
* init.cc (search_for): Always initialize search_for, even on fork.
(calibration_thread): Delete.
(calibration_id): Delete.
(prime_threads): Delete.
(munge_threadfunc): Remove calibration_thread special case.  Avoid calling
thread function if we haven't yet hit the "search_for" thread.
(dll_entry): Remove prime_threads call.  Only call munge_threadfunc when
hwait_sig is active.  Ditto.  for _my_tls.remove ();
* sigproc.cc (hwait_sig): Make global.
(sigproc_init): Don't bother with sync_startup.
(sig_send): Treat flush as a no-op when signals are held.
(wait_sig): Cause signals to be held after fork.
@
text
@d674 7
a689 1
  initial_env ();
a758 2
  /* Initialize signal/subprocess handling. */
  sigproc_init ();
@


1.287
log
@revert erroneous checkin
@
text
@d753 2
a839 3
  /* Initialize signal/subprocess handling. */
  sigproc_init ();

a925 1
  wait_for_sigthread ();
a950 1
  extern HANDLE sync_startup;
d952 1
a952 6
  if (sync_startup != INVALID_HANDLE_VALUE)
    {
      WaitForSingleObject (sync_startup, INFINITE);
      CloseHandle (sync_startup);
    }

@


1.286
log
@* exceptions.cc (stackdump): Avoid dumping more than once.
@
text
@a126 12
#ifdef DEBUGGING
void __stdcall
envvar ()
{
  const char *s = "PATH";
  char buf[4096];
  Sleep (500);
  small_printf ("%d = GetEnvironmentVariable (\"%s\")\n", GetEnvironmentVariable (s, buf, sizeof buf), s);
  small_printf ("value = '%s'\n", buf);
}
#endif

@


1.285
log
@Always zero all elements of siginfo_t throughout.
* cygtls.h (_cygtls::thread_context): Declare new field.
(_cygtls::thread_id): Ditto.
(_cygtls::signal_exit): Move into this class.
(_cygtls::copy_context): Declare new function.
(_cygtls::signal_debugger): Ditto.
* cygtls.cc (_cygtls::init_thread): Fill out thread id field.
* exceptions.cc (exception): Change message when exception info is unknown.
Copy context to thread local storage.
(_cygtls::handle_exceptions): Avoid double test for fault_guarded.  Reflect
move of signal_exit to _cygtls class.
(sigpacket::process): Copy context to thread local storage.
(_cygtls::signal_exit): Move to _cygtls class.  Call signal_debugger to notify
debugger of exiting signal (WIP).  Call stackdump here (WIP).
(_cygtls::copy_context): Define new function.
(_cygtls::signal_debugger): Ditto.
* tlsoffsets.h: Regenerate.
* include/cygwin.h (_fpstate): New internal structure.
(ucontext): Declare new structure (WIP).
(__COPY_CONTEXT_SIZE): New define.
* exceptions.cc (_cygtls::interrupt_setup): Clear "threadkill" field when there
is no sigwaiting thread.
(setup_handler): Move event handling into interrupt_setup.
@
text
@d127 12
@


1.284
log
@	* dcrt0.cc (dll_crt0_0): Remove call to wincap.init.
	* init.cc (dll_entry): Rename is_wow64_proc to wow64_test_stack_marker.
	Call wincap.init here before doing anything else.  Use wincap.is_wow64
	to determine if we're running in a WOW64 emulator.
	* mmap.cc (MapViewNT): Don't use AT_ROUND_TO_PAGE in WOW64, it's
	apparently not supported.
	(mmap64): Don't create mappings beyond EOF, which would need to use
	AT_ROUND_TO_PAGE, on WOW64.
	* wincap.cc (wincap): Throw into the .cygwin_dll_common section.
	(wincapc::init): Determine if running in WOW64 and set wow_64 flag.
	* wincap.h (class wincapc): Add wow64 member.
	(wincapc::is_wow64): New method.
@
text
@d1078 1
a1078 1
	  siginfo_t si;
a1080 1
	  si.si_pid = si.si_uid = si.si_errno = 0;
@


1.283
log
@* spawn.cc (spawn_guts): Invert the argument to set_console_state_for_spawn.
@
text
@a682 1
  wincap.init ();
@


1.282
log
@* dcrt0.cc (_dll_crt0): Move more leftover debugging stuff.
(cygwin_dll_init): Remove unneeded initializations.  Call _dll_crt0 rather than
dll_crt0_1.
* dcrt0.cc (_dll_crt0): Move more leftover debugging stuff.
(cygwin_dll_init): Remove unneeded initializations.  Call _dll_crt0 rather than
dll_crt0_1.
@
text
@d954 1
a955 1
  extern HANDLE sync_startup;
a961 1
  sync_startup = NULL;
@


1.281
log
@	Bump copyright dates.
@
text
@a966 3
#if 0
  *main_environ = NULL;
#endif
a969 1
debug_printf ("in_forkee %d, fork_info %p", in_forkee, fork_info);
a1004 7
  if (!DuplicateHandle (GetCurrentProcess (), GetCurrentProcess (),
		       GetCurrentProcess (), &hMainProc, 0, FALSE,
			DUPLICATE_SAME_ACCESS))
    hMainProc = GetCurrentProcess ();

  DuplicateHandle (hMainProc, GetCurrentThread (), hMainProc,
		   &hMainThread, 0, FALSE, DUPLICATE_SAME_ACCESS);
d1010 1
a1010 6
  main_environ = user_data->envptr;
#if 0
  *main_environ = NULL;
#endif
  initialize_main_tls((char *)&_my_tls);
  dll_crt0_1 (NULL);
@


1.280
log
@* exceptions.cc (_cygtls::interrupt_setup): Implement SA_RESETHAND.
* include/cygwin/signal.h: Define SA_ONESHOT and SA_NOMASK.
* dcrt0.cc (get_cygwin_startup_info): Remove commented out code.
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005
   Red Hat, Inc.
@


1.279
log
@*** cygwin DLL Changes:
* child_info.h (CURR_CHILD_INFO_MAGIC): Reset.
(child_info::dwProcessId): Delete.
(child_info::straced): New variable.
(child_info::handle_fork): New member function.
* dcrt0.cc (in_forkee): New global variable.
(__cygwin_user_data::forkee): Mark as obsolete.
(do_global_ctors): Use in_forkee rather than user_data->forkee.
(get_cygwin_startup_info): Ditto.  Deal with new straced field to allow strace
to deal with children of attached processes.
(initial_env): Accommodate changes to strace::hello.
(child_info_fork::handle_fork): Rename from plain old 'handle_fork'.  Move
alloc_stack() call elsewhere.
(dll_crt0_0): Fill out more of user_data.  Reference handle_fork via fork_info.
Add some debugging output.
(_dll_crt0): Don't wait for sync thread if sync_startup is invalid.  Zero
sync_startup here.  Call alloc_stack() here, if appropriate.
(dll_crt0_1): Use in_forkee rather than user_data->forkee.
(dll_crt0): Ditto.
* malloc_wrapper.cc (malloc_init): Ditto.
* dll_init.cc (in_forkee): Remove local static version of this variable.
(dll_list::load_after_fork): Don't set in_forkee here.
* external.cc (cygwin_internal): Use strace method rather than accessing field
directly.
* fhandler.cc (fhandler_base::read): Ditto.
* fhandler_tty.cc (fhandler_tty_common::__acquire_output_mutex): Ditto.
* fork.cc (frok::parent): Invoke strace write_childpid to communicate with
potential strace.
(child_copy): Add more detail to debugging output.
* init.cc (calibration_id): New static variable.
(prime_threads): Set sync_startup to invalid handle if we already know about
thread_func_ix.  Use static calibration_id to hold calibration thread id.
* munge_threadfunc (munge_threadfunc): Don't try to debug if we don't find
threadfunc_ix.
(dll_entry): Avoid calling munge_threadfunc and _cygtls::remove on non-cygwin
threads invoked during process startup.
* pinfo.cc (set_myself): Always call strace.hello here regardless of DEBUGGING.
* sigproc.cc (child_info::child_info): Remove spurious handling of dwProcessId.
Set straced as appropriate.
* spawn.cc (spawn_guts): Rename ciresrv to ch.  Invoke strace write_childpid to
communicate with potential strace.
* strace.cc: Include child_info.h.
(strace::hello): Remove inited test.  Use active() method to test if strace has
been activated.  Handle case where we are started before
(mypid): New function.
(strace::vsprntf): Try to deal more intelligently with case where progname may
not be filled out.  Put pid in parentheses if it is a windows pid rather than a
cygwin pid.  myself has been filled out.
(strace::write_childpid): New function for notifying strace about the creation
of children.
(strace::vprntf): Use strace method rather than accessing field directly.
(strace_printf): Ditto.
(strace::wm): Ditto.
* winsup.h (in_forkee): Declare.
* include/sys/strace.h (strace::write_childpid): Declare new function.
(strace::attached): Define new function.
(strace::active): Ditto.
(strace::active_val): Ditto.
(_STRACE_ON): Delete.
(_STRACE_OFF): Ditto.
(define_strace0): Use strace method rather than accessing field directly.
(strace_printf_wrap): Ditto.
(strace_printf_wrap1): Ditto.

*** cygwin utils changes:
* strace.cc (nprocesses): Make static global.
(quiet): New variable.
(strace_active): Ditto.
(add_child): Increment nprocesses here.  Don't add a child if it is already
added (windows bug?).  Report on child if not quiet.
(get_child): Just return NULL if child not found.
(remove_child): Report on child if not quiet.
(attach_process): Don't complain if given a windows process.  Use windows pid
in error.
(handle_output_debug_string): Issue error if trying to manipulate a process
that we don't know about.  Handle _STRACE_CHILD_PID - attach to reported child
when we get this.
(proc_child): Move nprocesses to file scope.  Report on exceptions.
(longopts): Implement "--quiet".
(opts): Implement "-q".
(main): Manipulate quiet flag.
* utils.sgml (strace): Add words describing '-q'.
@
text
@a625 4
#if 0
		DWORD prio = GetThreadPriority (GetCurrentThread ());
		SetThreadPriority (GetCurrentThread (), THREAD_PRIORITY_IDLE);
#endif
a627 3
#if 0
		SetThreadPriority (GetCurrentThread (), prio);
#endif
@


1.278
log
@white space
@
text
@d56 1
d112 1
a112 1
   /* forkee */ 0,
d145 1
a145 1
  if (!force && user_data->forkee)
d558 2
a559 5
      if (!strace.active && !dynamically_loaded)
	{
	  strace.inited = 0;
	  strace.hello ();
	}
d612 1
a612 1
	    user_data->forkee = true;
d623 14
d656 1
a656 1
handle_fork ()
a657 1
  alloc_stack (fork_info);
d661 1
a661 2
  HANDLE hp = fork_info->parent;
  child_copy (hp, false,
d668 1
a668 1
  child_copy (hp, false,
d673 1
a673 1
  if (fixup_mmaps_after_fork (hp))
d688 2
a704 1

d718 1
a718 1
	    handle_fork ();
d761 1
d787 1
a787 1
  if (!user_data->forkee)
d806 1
a806 1
  if (user_data->forkee)
d961 1
d963 1
a963 6
  extern unsigned threadfunc_ix;
  if (threadfunc_ix)
    /* nothing to do */;
  else if (!sync_startup)
    system_printf ("internal error: sync_startup not called at start.  Expect signal problems.");
  else
d969 1
d980 3
a982 2
  if (child_proc_info && child_proc_info->type == _PROC_FORK)
    user_data->forkee = true;
d994 1
a994 1
  if (!user_data->forkee && uptr && uptr != user_data)
@


1.277
log
@* dcrt0.cc (__api_fatal): Simplify to just use strace mechamisms.
(do_exit): Move minimal_printf...
* pinfo.cc (pinfo::exit): ...into here.
* strace.cc (strace::vprntf): Guarantee output to the console when
system_printf/api_fatal.
* heap.cc (heap_init): Wait a second before issuing an error when
ERROR_INVALID_ADDRESS since this is probably due to a CTRL-C handler sneaking
in, using the memory that we want to use for the heap, and, eventually exiting.
@
text
@a914 1

@


1.276
log
@* winsup.h (child_copy): Change prototype to match new functionality.
* cygheap.cc (cygheap_fixup_in_child): Accommodate new child_copy arguments.
* dcrt0.cc (dll_data_start): Move definition here from fork.
(dll_data_end): Ditto.
(dll_bss_start): Ditto.
(dll_bss_end): Ditto.
(handle_fork): New function.  Called when forked to deal with fork issues and
copy data to this process from the parent.
(dll_crt0_0): Call handle_fork when _PROC_FORK condition.
(dll_crt0): Don't copy user_data when we've forked.  Don't zero first element
of main_environment ever.
(cygwin_dll_init): Ditto.
* fork.cc (child_copy): Rename from fork_copy and change arguments so that each
pair of things to copy gets its own descriptor.
(frok::child): Remove fixup_mmaps_after_fork call here.  Move to handle_fork in
dcrt0.cc.
(frok::parent): Use child_copy rather than fork_copy and accommodate changes in
parameters.
* exceptions.cc (setup_handler): Delay test of whether we're locked until after
GetThreadContext has been called since there are apparently cases where
SuspendThread does not cause an immediate thread suspension.
@
text
@a1134 1
  minimal_printf ("winpid %d, exit %d", GetCurrentProcessId (), n);
d1173 1
a1173 1
  int n = __small_sprintf (buf, "%P (%u): *** ", cygwin_pid (GetCurrentProcessId ()));
d1176 1
a1176 15
  strcat (buf, "\n");
  int len = strlen (buf);
  DWORD done;
  WriteFile (GetStdHandle (STD_ERROR_HANDLE), buf, len, &done, 0);

  /* Make sure that the message shows up on the screen, too, since this is
     a serious error. */
  if (GetFileType (GetStdHandle (STD_ERROR_HANDLE)) != FILE_TYPE_CHAR)
    {
      HANDLE h = CreateFile ("CONOUT$", GENERIC_READ | GENERIC_WRITE,
			     FILE_SHARE_WRITE | FILE_SHARE_WRITE,
			     &sec_none, OPEN_EXISTING, 0, 0);
      if (h != INVALID_HANDLE_VALUE)
	WriteFile (h, buf, len, &done, 0);
    }
@


1.275
log
@* cygtls.h (_cygtls::el): New field.
(_cygtls::handle_exceptions): New function declaration.
(_cygtls::handle_threadlist_exception): Ditto.
(_cygtls::init_exception_handler): Ditto.
(_cygtls::init_threadlist_exceptions): Remove arg from declaration.
* cygtls.cc (_cygtls::call2): Don't initialize exceptions here.
(_cygtls::init_thread): Do it here instead and use member function.
(_cygtls::handle_threadlist_exception): Move into _cygtls class.
(_cygtls::init_exception_handler): Ditto.  Rely on existence of 'el' memmber in
_cygtls.
(_cygtls::init_threadlist_exceptions): Ditto.
* dcrt0.cc (dll_crt0_1): Remove exception_list definition and setting since it
now commonly resides in the tls.
* exceptions.cc (init_exception_handler): Move to cygtls.cc.
(init_exceptions): Ditto.
(rtl_unwind): New, safe wrapper function for RtlUnwind.
(_cygtls::handle_exceptions): Move to _cygtls.  Call rtl_unwind to unwind
frames and eliminate copying of structures.  Put address of failing instruction
in si_addr, not the address on the stack.  Return 0 to indicate that we've
handled this exception.
* external.cc (cygwin_internal): Make CW_INIT_EXCEPTIONS a no-op.
* sigproc.cc (wait_sig): Accommodate argument change to
_cygtls::init_threadlist_exceptions.
* tlsoffsets.h: Regenerate.
* include/exceptions.h (exception_list): Add more stuff to the exception list.
Apparently windows needs this?
(init_exceptions): Remove bogus declaration.
* include/cygwin/signal.h (SI_USER): Redefine as zero as per SUSv3.
* thread.cc (pthread_kill): Set si_pid and si_uid.
* timer.cc (timer_thread): Set si_code to SI_TIMER.
@
text
@d638 29
d707 1
a707 4
	    alloc_stack (fork_info);
	    cygheap_fixup_in_child (false);
	    memory_init ();
	    set_myself (NULL);
d966 1
d968 1
d985 1
a985 1
  if (uptr && uptr != user_data)
d1020 1
d1022 1
@


1.274
log
@* dcrt0.cc (getstack): Try harder to modify memory.
(alloc_stack): Alloc page prior to stack top, too.
@
text
@a732 5
  /* According to onno@@stack.urc.tue.nl, the exception handler record must
     be on the stack.  */
  /* FIXME: Verify forked children get their exception handler set up ok. */
  exception_list cygwin_except_entry;

a741 3
  /* Initialize SIGSEGV handling, etc. */
  init_exceptions (&cygwin_except_entry);

@


1.273
log
@	* autoload.cc (NtCreateSection): Define.
	* cygheap.cc (_csbrk): Call getpagesize instead of getshmlba.
	* dcrt0.cc (dll_crt0_0): Call mmap_init.
	* external.cc (cygwin_internal): Call getpagesize instead of getshmlba.
	* fhandler.h (fhandler_base::mmap): Change access to prot parameter.
	(fhandler_base::fixup_mmap_after_fork): Ditto.
	(fhandler_disk_file::mmap): Ditto.
	(fhandler_disk_file::fixup_mmap_after_fork): Ditto.
	(fhandler_dev_mem::mmap): Ditto.
	(fhandler_dev_mem::fixup_mmap_after_fork): Ditto.
	* fhandler_mem.cc (fhandler_dev_mem::write): Call getsystempagesize
	instead of getpagesize.
	(fhandler_dev_mem::read): Ditto.
	(fhandler_dev_mem::fstat): Ditto.
	(fhandler_dev_mem::mmap): Move to mmap.cc.
	(fhandler_dev_mem::munmap): Ditto.
	(fhandler_dev_mem::msync): Ditto.
	(fhandler_dev_mem::fixup_mmap_after_fork): Ditto.
	* fhandler_proc.cc (format_proc_meminfo): Call getsystempagesize
	instead of getpagesize.
	* fhandler_process.cc (format_process_stat): Ditto.
	(format_process_status): Ditto.
	(get_mem_values): Ditto.
	* mmap.cc: Fix formatting.  Try to make more readable and modular.
	Take advantage of pagesize==granularity.
	(gen_protect): New static function to evaluate Windows
	protection bits from POSIX protection and flags.
	(gen_access): Ditto for Windows access mode.
	(VirtualProt9x): Wrapper function to call VirtualProtect on 9x.
	(VirtualProtNT): Ditto for NT.
	(VirtualProtEx9x): Ditto for VirtualProtectEx on 9x.
	(VirtualProtExNT): Ditto for NT.
	(CreateMapping9x): Wrapper function for creating a mapping handle on 9x.
	(CreateMappingNT): Ditto for NT.
	(MapView9x): Wrapper function to map a view on 9x.
	(MapViewNT): Ditto for NT.
	(mmap_funcs_9x): Structure containing function pointers to wrapper
	functions for 9x.
	(mmap_funcs_nt): Ditto for NT.
	(mmap_func): Pointer to wrapper functions used in subsequent code.
	(mmap_init): Initialize mmap_func depending on OS.
	(class mmap_record): Use sensible member names.  Add POSIX protection
	member. Drop Windows access flags member.  Constify more methods.
	Use accessors instead of direct member access inside of own methods.
	(mmap_record::gen_protect): Class wrapper to evaluate matching
	Windows protection bits.
	(mmap_record::gen_access): Ditto for Windows access flags.
	(mmap_record::compatible_flags): New function to check if flags are
	compatible with flags of existing map.
	(list::add_record): Drop offset and length arguments.
	(class map): Change counters to unsigned.  Match usage throughout.
	(mmapped_areas): Convert from pointer to global struct.
	(mmap_record::alloc_page_map): Simplify.
	(mmap_record::map_pages): Ditto.
	(mmap_record::fixup_page_map): Delete.
	(mmap64): Simplify.  Add workaround for Windows 98 bug.  Fix bug on
	NT that existing anonymous mappings weren't searched for a match.
	(munmap): Add workaround for Windows 98 bug.
	(msync): Simplify.
	(mprotect): Handle existing maps correctly.
	(mlock): Add local pagesize variable and enlightening comment.
	(fhandler_disk_file::mmap): Main functionality now in CreateMapping/
	MapView wrapper functions.
	(fhandler_disk_file::fixup_mmap_after_fork): Call MapView wrapper.
	(fhandler_dev_mem::mmap): Moved from fhandler_mem.cc.  Simplify by
	calling MapViewNT.
	(fhandler_dev_mem::munmap): Moved from fhandler_mem.cc.
	(fhandler_dev_mem::msync): Ditto.
	(fhandler_dev_mem::fixup_mmap_after_fork): Ditto.  Call MapViewNT.
	(fixup_mmaps_after_fork): Restructure and hopefully speed up loop for
	setting protection and memory content on MAP_PRIVATE maps.
	* ntdll.h (AT_ROUND_TO_PAGE): Remove define.
	(AT_EXTENDABLE_FILE): Add define.
	(NtCreateSection): Add prototype.
	* syscalls.cc (getpagesize): Return granularity as pagesize now.
	(getsystempagesize): New function to retrieve "real" pagesize.
	(getshmlba): Delete since it's replaced by getpagesize now.
	* wincap.h (wincaps::has_mmap_alignment_bug): New element.
	* wincap.cc: Implement above element throughout.
	* winsup.h (getshmlba): Drop prototype.
	(getsystempagesize): Add prototype.
	(mmap_init): Ditto.
	* include/sys/mman.h: (Not yet) define MAP_NORESERVE.
@
text
@d507 1
a507 1
getstack (volatile char *p)
d509 2
a510 1
  *p |= 0;
d519 1
a519 1
  volatile char *esp;
d525 2
a526 1
      while (_tlstop > ci->stacktop)
@


1.272
log
@* dcrt0.cc (dll_crt0_0): Initialize security data first so that it can be used
by subsequent handle creation.
@
text
@d649 1
@


1.271
log
@* cygheap.h (cygheap_fdenum::cygheap_fdenum): Record locked state or suffer
deadlocks.
(class locked_process): Move to another header.
* sync.h (lock_process): Define here.
* cygtls.cc (_cygtls::fixup_after_fork): Reset spinning state as well as
stacklock state.
* dcrt0.cc (lock_process::locker): Define.
(dtable::lock_cs): Delete.
* dtable.cc (dtable_init): Eliminate call to init_lock().
(dtable::fixup_after_fork): Ditto.
(dtable::init_lock): Delete definition.
* dtable.h (dtable::init_lock): Delete declaration.
(dtable::lock): Use process lock rather than dtable-specific lock.
(dtable::unlock): Ditto.
* sigproc.cc (sigproc_init): Minor change to debugging output.
* times.cc (utime_worker): Use build_fh_pc rather than reinterpreting the posix
path name again.  Return any error from path_conv immediately.
@
text
@d639 1
a649 1
  init_global_security ();
@


1.270
log
@Change process_lock to lock_process throughout.  Change all calls to new
cygthread to handle extra argument, throughout.
* cygthread.h (cygthread::callproc): Declare new method.
(cygthread::cygthread): Add optional length argument to allow copying arguments
to executing thread.
* cygthread.cc (cygthread::callproc): Define new method.
(cygthread::stub): Use callfunc to invoke thread func to allow potentially
allocating stack memory which will be returned.
(cygthread::simplestub): Ditto.
(cygthread::cygthread): Accept arglen argument.  Reset ev here prior to
activating thread.  Wait for ev after activating thread if we're copying
contents to the thread.  Wait until the end before setting h, to allow thread
synchronization.
(cygthread::release): Don't reset ev here.  Rely on that happening the next
time the thread is activated.
* pinfo.h (commune_process): Rename declaration from _pinfo::commune_process.
* pinfo.cc (commune_process): Ditto for definition.  Modify slightly to allow
running as a separate cygthread.
* sigproc.cc (child_info::sync): Always wait for both subproc_ready and any
hProcess if we have a cygwin parent.
(talktome): Change argument to be a pointer to siginfo_t.  Contiguously
allocate whole siginfo_t structure + any needed extra for eventual passing to
commune_process thread.
(wait_sig): Accommodate change in talktome argument.
* pipe.cc (fhandler_pipe::fixup_after_exec): Remove debugging.
@
text
@d50 2
a51 2
muto NO_COPY dtable::lock_cs;	/* This should be in dtable.cc but it causes inexplicable
				   errors there. */
d639 1
@


1.269
log
@* cygheap.h (class process_lock): New class.
* dtable.h (class dtable): Add class process_lock as a friend.
* dcrt0.cc (get_exit_lock): Delete.
(do_exit): Use process_lock class instead of get_exit_lock.
* exceptions.cc (signal_exit): Ditto.
* pinfo.cc (pinfo::exit): Ditto.
(_pinfo::commune_process): Set process lock around this whole function.
(_pinfo::commune_request): Use process_lock rather than myself.lock.
* pinfo.h (pinfo::_lock): Delete.
(pinfo::initialize_lock): Delete.
(pinfo::lock): Delete.
(pinfo::unlock): Delete.
* winsup.h (get_exit_lock): Delete declaration.
@
text
@d1024 1
a1024 1
  process_lock until_exit (true);
@


1.268
log
@* dcrt0.cc (get_exit_lock): Use myself.lock rather than exit_lock.
* exceptions.cc (exit_lock): Delete.
(events_init): Don't init exit_lock.
* (_pinfo::commune_process): Add per-PICOM debugging.
* sigproc.cc (talktome): Add some temporary debugging statements.
* fhandler_proc.cc (format_proc_cpuinfo): Cosmetic change.
(format_proc_partitions): Ditto.
* syscalls.cc (locked_append): Ditto.
@
text
@d1024 1
a1024 1
  get_exit_lock ();
a1140 11
void
get_exit_lock ()
{
  myself.lock ();
  if (exit_state < ES_SET_MUTO)
    {
      exit_state = ES_SET_MUTO;
      muto::set_exiting_thread ();
    }
}

@


1.267
log
@* dcrt0.cc (do_exit): Don't set ES_SET_MUTO here.  Call get_exit_lock()
instead.
(get_exit_lock): New function.  Grabs the lock and sets initial exit_state.
* exceptions.cc (try_to_debug): Use low_priority_sleep.
(sigpacket::process): Avoid handler if this is an exec stub.
(signal_exit): Use get_exit_lock rather than manipulating the exit_lock
critical section directly.
* pinfo.cc (pinfo::exit): Ditto.
* winsup.h (get_exit_lock): Declare.
(exit_lock): Delete declaration.
@
text
@d1144 1
a1144 2
  extern CRITICAL_SECTION exit_lock;
  EnterCriticalSection (&exit_lock);
@


1.266
log
@* dcrt0.cc (getstack): New function.
(alloc_stack): Use tls stuff for stack info rather than calling VirtualQuery.
(dll_crt0_0): Initialize _impure_ptr stuff much earlier.  Move
init_console_handler here.
* fork.cc (class frok): New class renamed from local fork() struct.
(stack_base): Change argument type.  Use tls stuff to determine stack info
rather than calling VirtualQuery.
(frok::child): Rename from fork_child.  Eliminate now unneeded arguments.
(frok::parent): Rename from fork_parent and ditto.  Set error and errno as
appropriate.  Fixup impersonation in cleanup, if needed.  Try harder to set
errno appropriately.
(fork): Define "grouped" as a frok type.  Deal with errors from fork_parent
here.
* init.cc (dll_entry): Remove init_console_handler call.
@
text
@d1024 1
a1024 7
  EnterCriticalSection (&exit_lock);

  if (exit_state < ES_SET_MUTO)
    {
      exit_state = ES_SET_MUTO;
      muto::set_exiting_thread ();
    }
d1141 12
@


1.265
log
@* cygheap.cc (cygheap_fixup_in_child): It's not just for exec.
* cygtls.h (struct _cygtls::thread_handle): New field.
* dcrt0.cc (exit_lock): Remove declaration.
* winsup.h (exit_lock): Add declaration.
* exceptions.cc (sigpacket::process): Properly return after signal_exit.
* pinfo.cc (pinfo::exit): Only exit the process if _my_tls.thread_handle has
not been filled out -- which should be an impossible event.
* sigproc.cc (sigproc_terminate): Fillout _my_tls.thread_handle to provide
something for wait_sig to wait for.  Use the siginfo_t version of sig_send and
fill out the tls argument with _my_tls.
(wait_sig): Wait for the thread specified in pack.tls or (for now) complain
bitterly if it doesn't exit.
@
text
@d505 8
d518 4
a521 9
  /* FIXME: adding 16384 seems to avoid a stack copy problem during
     fork on Win95, but I don't know exactly why yet. DJ */
  volatile char b[ci->stacksize + 16384];

  if (!VirtualQuery ((LPCVOID) &b, &sm, sizeof sm))
    api_fatal ("fork: couldn't get stack info, %E");

  if (sm.AllocationBase == ci->stacktop)
    ci->stacksize = 0;
d523 5
a527 1
    alloc_stack_hard_way (ci, b + sizeof (b) - 1);
d639 6
a946 5
  _impure_ptr = _GLOBAL_REENT;
  _impure_ptr->_stdin = &_impure_ptr->__sf[0];
  _impure_ptr->_stdout = &_impure_ptr->__sf[1];
  _impure_ptr->_stderr = &_impure_ptr->__sf[2];
  _impure_ptr->_current_locale = "C";
@


1.264
log
@* dcrt0.cc (do_exit): Only call sigproc_terminate from one location --
pinfo::exit.
* pinfo.cc (pinfo::exit): Move sigproc_terminate later so that signals can be
processed while waiting for hExeced child.
(pinfo::maybe_set_exit_code_from_windows): Set exit code from sigExeced if it
is non-zero.  Set exit_state to ES_EXEC_EXIT prior to waiting for captive
process exit code.
* exceptions.cc (sigExeced): New global variable.
(signal_exit): Remove noreturn attribute from declaration.
(signal_exit): Just terminate captive process and return if hExeced on the
theory that the exit will be subsequently handled in the main thread.
* sigproc.cc (sigproc_terminate): Eliminate test for ES_SIGPROCTERMINATE and
use ES_FINAL instead.
(sig_send): Use no_signals_available instead of duplicate test.
* winsup.h (ES_EXEC_EXIT): New enum.
(ES_SIGPROCTERMINATE): Delete.
@
text
@a1000 1
extern CRITICAL_SECTION exit_lock;
@


1.263
log
@* exceptions.cc (sigtid): Remove declaration.
(handle_exceptions): Use _sig_tls rather than sigtid to determine if this is
the signal thread.
(set_signal_mask): Ditto for conditionalized CGF code.
* pinfo.cc (pinfo::exit): Exit the thread if we forcefully terminated the main
thread
* sigproc.cc (sigtid): Delete.
(_sig_tls): Define.
(sig_clear): Use _sig_tls rather than sigtid to determine if this is the signal
thread.
(sig_dispatch_pending): Ditto.
(wait_sig): Set _sig_tls here.
* dcrt0.cc (do_exit): Move sigproc_terminate call later since signal handling
was still needed for subsequent stuff.  Call sigproc_terminate with new
exit_state value.
* pinfo.cc (pinfo::exit): Call sigproc_terminate with new exit_state value.
* sigproc.cc (proc_terminate): Remove unnecessary (void) parameter.
(sigproc_terminate): Ditto.  Add new argument to accept exit state to be set.
(wait_sig): Reorganize __SIGEXIT handling.  Add more debugging output.
* winsup.h (sigproc_terminate): Declare with new exit_state argument.
(exit_states): Reorganize to reflect new exit ordering of sigproc_terminate.
@
text
@a1093 3
  if (exit_state < ES_SIGPROCTERMINATE)
    sigproc_terminate (ES_SIGPROCTERMINATE);	// sets exit_state directly

@


1.262
log
@* dcrt0.cc (do_exit): Rely on sigproc_terminate to set exit_state
appropriately.
* pinfo.cc (pinfo::exit): Always call sigproc_terminate here.  Rely on
sigproc_terminate to signal signal thread to handle eventual process exit.
* sigproc.cc (no_signals_available): Change criteria for determining if this
process can handle signals to itself.
(my_sendsig): New variable.  Copy of my sendsig handle.
(proc_can_be_signalled): Don't send signals if exit code is set.
(sigproc_terminate): Use and set exit_state appropriately to determine when to
do anything.  Send __SIGEXIT to self to control process exit.
(sig_send): Use my_sendsig for sending signals.  Don't call
proc_can_be_signalled for myself since the criteria is now different for
sending signals to myself.
(wait_sig): Copy myself->sendsig to my_sendsig for future use.  Exit signal
loop when __SIGEXIT is received.  Wait for main thread to exit and use its exit
status to actually exit process.
* sigproc.h (__SIGEXIT): New enum.
* dcrt0.cc (alloc_stack): Eliminate superfluous "return;".
* debug.cc (add_handle): Ditto.
* devices.in (device::parse): Ditto.
* dtable.cc (dtable::vfork_parent_restore): Ditto.
(dtable::vfork_child_fixup): Ditto.
* environ.cc (parse_options): Ditto.
* errno.cc (seterrno_from_win_error): Ditto.
* exceptions.cc (sig_handle_tty_stop): Ditto.
(set_signal_mask): Ditto.
* fhandler.cc (fhandler_base::read): Ditto.
(fhandler_base::operator delete): Ditto.
(fhandler_base::seekdir): Ditto.
(fhandler_base::rewinddir): Ditto.
* fhandler_console.cc (fhandler_console::read): Ditto.
(fhandler_console::fixup_after_exec): Ditto.
* sigproc.cc (sigproc_init): Ditto.
(sigproc_terminate): Ditto.

* devices.cc: Regenerate.
@
text
@a1058 3
  if (exit_state < ES_SIGPROCTERMINATE)
    sigproc_terminate ();	// sets exit_state directly

a1059 7
  if (exit_state < ES_TITLE)
    {
      exit_state = ES_TITLE;
      /* restore console title */
      if (old_title && display_title)
	set_console_title (old_title);
    }
d1094 11
a1168 3
  /* We are going down without mercy.  Make sure we reset
     our process_state. */
  sigproc_terminate ();
@


1.261
log
@* dcrt0.cc (initial_env): Don't attempt stracing if dynamically loaded.
(dll_crt0_0): Move console initialization earlier.
* init.cc (dll_entry): Move console initialization here.
* exceptions.cc (init_console_handler): Fully remove any old console handler.
* spawn.cc (spawn_guts): Don't fill out windows argv if we've deduced that this
is a cygwin-using program.
(av::fixup): Always check executables to see if they are using cygwin1.dll.
Don't consider .com files to be scripts.
* hookapi.cc (rvadelta): New function.
(PEHeaderFromHModule): Simplify slightly.
(hook_or_detect_cygwin): Use passed in name argument for "HMODULE" rather than
incorrectly reading current program.  Calculate delta needed to read image data
and file names if this isn't a real "HMODULE".
@
text
@a520 2

  return;
d1060 1
a1060 4
    {
      exit_state = ES_SIGPROCTERMINATE;
      sigproc_terminate ();
    }
@


1.260
log
@Grr.  REVERT erroneous checkin.  AGAIN.
@
text
@d550 1
a550 1
      if (!strace.active)
a636 1
  init_console_handler (TRUE);
@


1.259
log
@* Makefile.in (CXXFLAGS): Use 'override' to correctly set flags to generate
dependencies when invoked from top-level make.
@
text
@d550 1
a550 1
      if (!strace.active && !dynamically_loaded)
d637 1
@


1.258
log
@revert inexplicable previous checkin
@
text
@d550 1
a550 1
      if (!strace.active)
a636 1
  init_console_handler (TRUE);
@


1.257
log
@bad_addresses
@
text
@d550 1
a550 1
      if (!strace.active && !dynamically_loaded)
d637 1
@


1.256
log
@* dcrt0.cc (dll_crt0_1): Tweak debugging stuff.
* fhandler_tty.cc (fhandler_tty_common::close): Rearrange the code so that the
master end of the input and output pipes is closed before signalling an EOF
event to the slave.
(fhandler_pty_master::close): Likewise.
@
text
@d550 1
a550 1
      if (!strace.active)
a636 1
  init_console_handler (TRUE);
@


1.255
log
@white space
@
text
@d728 3
a730 2
  while (i)
    cmalloc (HEAP_STR, 2000000);
@


1.254
log
@* dcrt0.cc: Remove ld_preload declaration.
* winsup.h: Move ld_preload declaration here.
* fork.cc (fork_child): Call ld_preload() before returning.
@
text
@d968 1
a968 1
  
@


1.253
log
@* Makefile.in (dtable_CFLAGS): Use -fomit-frame-pointer and -fcheck-new.
* cygheap.cc (cmalloc): Only emit system_printf warnings on failure if
DEBUGGING.
(crealloc): Ditto.
(ccalloc): Ditto.
* dtable.cc (build_fh_name): Treat NULL return from cnew as indicative of
EMFILE condition.
(build_fh_dev): Ditto.
(dtable::dup_worker): Handle NULL return from build_fh_pc.
(dtable::vfork_child_dup): Trust dup_worker to set errno.
* fhandler.h (fhandler_base::new): Mark as nothrow.
@
text
@a45 2
void ld_preload ();

@


1.252
log
@revert erroneous checkin
@
text
@d728 5
@


1.251
log
@* Makefile.in: Warn when end of cygheap is not on 64k boundary.
* cygwin.sc: Try harder to ensure that cygheap is on a 64k boundary.  Move
cygheap to end of image to stop interference from unstripped debug regions.
@
text
@a727 3
  int i = 0;
  while (i)
    cmalloc (HEAP_STR, 2000000);
@


1.250
log
@* cygmalloc.h (MSPACES): Define.  This dropped through the cracks after the
last malloc update.
* dcrt0.cc: Fix a comment.
* malloc.cc (internal_malloc): Fix definition so that it can be safely coerced.
@
text
@d728 3
@


1.249
log
@Eliminate (void) cast on standalone function calls throughout.
@
text
@d961 7
a967 8
 * You must have CYGTLS_PADSIZE bytes reserved at the bottom of the stack
 * calling this function, and that storage must not be overwritten until you
 * unload cygwin1.dll, as it is used for _my_tls.  It is best to load
 * cygwin1.dll before spawning any additional threads in your process.
 *
 * See winsup/testsuite/cygload for an example of how to use cygwin1.dll
 * from MSVC and non-cygwin MinGW applications.
 */
@


1.248
log
@* dcrt0.cc (cygwin_exit): Mark as "noreturn".
* sigproc.cc (child_info::ready): Don't signal parent that we are a cygwin
process if we are dynamically loaded.
@
text
@d651 1
a651 1
  (void) SetErrorMode (SEM_FAILCRITICALERRORS);
d922 1
a922 1
      (void) WaitForSingleObject (sync_startup, INFINITE);
d1158 1
a1158 1
  (void) WriteFile (GetStdHandle (STD_ERROR_HANDLE), buf, len, &done, 0);
d1168 1
a1168 1
	(void) WriteFile (h, buf, len, &done, 0);
d1175 1
a1175 1
  (void) try_to_debug ();
@


1.247
log
@* cygerrno.h: Make multi-inclusion safe.
* fhandler_termios.cc (fhandler_termios::tcsetpgrp): Deal with EINTR.
* dcrt0.cc (dll_crt0_0): Accommodate init_console_handler argument change.
* winsup.h: Ditto.
* fhandler_tty.cc (fhandler_tty_slave::open): Ditto.
* exceptions.cc (init_console_handler): Ditto.  Ignore console events if we're
not attached to a terminal.
* fhandler_tty.cc (fhandler_tty_slave::open): Ditto.
* wincap.cc: Implement has_null_console_handler_routine throughout.
* wincap.h: Ditto.
@
text
@d44 1
a44 1
extern "C" void cygwin_exit (int);
@


1.246
log
@* cygthread.cc (cygthread::detach): Fix debugging output.
* dcrt0.cc (dll_crt0_1): Create signal_arrived early -- before any filename
manipulation.
* sigproc.cc (sigproc_init): Don't create signal_arrived here.
* fork.cc (fork_child): Ditto.
@
text
@d639 1
a639 1
  init_console_handler ();
@


1.245
log
@* cygthread.cc (cygthread::detach): Make error message a little more detailed.
* fhandler.cc (fhandler_base::raw_read): Ditto for debug message.
* dcrt0.cc (do_exit): Add some more synchronization tests.
* fhandler_fifo.cc (fhandler_fifo::dup): Don't duplicate a nonexistent handle.
Use derived return value rather than always retuning 0.
* fhandler_netdrive.cc (fhandler_netdrive::exists): Wnet -> WNet.
* winsup.h (exit_states): Add a couple of new exit states.
@
text
@d746 2
@


1.244
log
@* dcrt0.cc (cygwin_dll_init): Now initializes main_environ and cygtls.  Comment
to explain the caveats of this method.
* how-cygtls-works.txt: New file.
@
text
@d1016 12
a1027 2
  muto::set_exiting_thread ();
  dll_global_dtors ();
@


1.243
log
@Revert 2005-05-30 close_all_files changes.
* spawn.cc (spawn_guts): When execing, close all files after the child has
synced with us.
@
text
@d958 9
a966 1
/* This must be called by anyone who uses LoadLibrary to load cygwin1.dll */
d985 3
@


1.242
log
@* child_info.h (child_info::cygheap_h): Delete.
(child_info::dwProcessId): New field.
* cygheap.cc (init_cheap): Delete.
(dup_now): Ditto.
(cygheap_setup_for_child): Ditto.
(cygheap_setup_for_child_cleanup): Ditto.
(cygheap_fixup_in_child): Simplify.  Use new "child_copy" function to copy heap
from parent.
(_csbrk): Don't attempt allocation if within cygheap section.  Fix so that more
than one allocation will succeed.
(cygheap_init): Reset possibly-nonzero region to zero.
* cygheap.h (cygheap_setup_for_child): Delete declaration.
(cygheap_setup_for_child_cleanup): Ditto.
(cygheap_start): Define as an array.
* cygwin.sc: Modernize.  Remove unneeded sections.  Define cygheap here.
* dcrt0.cc (do_exit): Reflect argument change to close_all_files.
* dtable.cc (dtable::vfork_parent_restore): Ditto.
* dtable.h: Ditto.
* fhandler.h: Ditto.
* fork.cc (fork_copy): Call ReadProcessMemory if there is no thread
(indicating that we're execing).
(fork_child): Don't mess with hParent.
(fork_parent): Remove hParent stuff.  It happens earlier now.  Remove call to
cygheap_setup_for_child* stuff.
(fork): Put child_info_stuff in grouped structure.  Issue error if parent
handle is not set.
(child_copy): New function.
* sigproc.cc (child_info::child_info): Put cygheap settings here.  Set parent
handle.
(child_info::~child_info): Close parent handle if it exists.
* spawn.cc (spawn_guts): Reorganize so that ciresrv is allocated at only the
last minute so that cygheap changes are reflected.  Delete cygheap_setup*
calls.
* syscalls.cc (close_all_files): Add an argument to flag when the fd entry
should be released.
* winsup.h (close_all_files): Add an argument to close_all_files declaration.
Declare child_copy.
@
text
@d1033 1
a1033 1
      close_all_files (false);
@


1.241
log
@* dcrt0.cc (dll_crt0_0): Don't do fixup_after_exec if dynamically loaded since
the state of fds is unknown at this point.
@
text
@d1033 1
a1033 1
      close_all_files ();
@


1.240
log
@* dcrt0.cc (do_global_dtors): Don't call dll_global_dtors here.
(__main): Reinstate atexit of do_global_dtors.
(cygwin_exit): Call dll_global_dtors here.
(do_exit): And here.
@
text
@a652 1

d688 2
a689 1
	    cygheap->fdtab.fixup_after_exec ();
@


1.239
log
@* dcrt0.cc (dll_crt0_1): Call cygwin_exit to ensure that destructors are
handled correctly.
@
text
@d132 1
a132 1
do_global_dtors (void)
a133 1
  dll_global_dtors ();
d984 1
d1006 1
a1006 1
  do_global_dtors ();
d1110 1
a1110 1
  do_global_dtors ();
@


1.238
log
@* dcrt0.cc (get_cygwin_startup_info): New function pulled from dll_crt0_0.
(dll_crt0_0): Use get_cygwin_startup_info to retrieve cygwin-specific startup
pointer.
* external.cc (cygwin_internal): Implement CW_ARGV and CW_ENVP.
* include/sys/cygwin.h: Implement CW_ARGV and CW_ENVP.
@
text
@d44 2
d890 1
a890 1
    exit (user_data->main (__argc, __argv, *user_data->envptr));
@


1.237
log
@* dcrt0.cc (do_global_dtors): Run DLL dtors.
(__main): Don't rely on atexit to run dtors.
(do_exit): Specifically call do_global_dtors here.
(cygwin_exit): Ditto.
* dll_init.cc (dll_global_dtors): Make global.  Only run dtors once.
(dll_list::init): Just set flag that dtors should be run.  Don't rely on
atexit.
* dll_init.h (dll_global_dtors): Declare.
* exceptions.cc (sigrelse): Define.
* path.h (is_fs_device): New method.
(is_lnk_special): Ditto.
* fhandler_disk_file.cc (fhandler_disk_file::link): Use "is_lnk_special" rather
than "is_lnk_symlink".
* syscalls.cc (rename): Ditto.
* hookapi.cc (ld_preload): Use colon as a separator rather than space.
@
text
@d581 2
a582 2
void __stdcall
dll_crt0_0 ()
d584 1
a584 3
  wincap.init ();
  initial_env ();

a586 15
  init_console_handler ();
  init_global_security ();
  if (!DuplicateHandle (GetCurrentProcess (), GetCurrentProcess (),
		       GetCurrentProcess (), &hMainProc, 0, FALSE,
			DUPLICATE_SAME_ACCESS))
    hMainProc = GetCurrentProcess ();

  DuplicateHandle (hMainProc, GetCurrentThread (), hMainProc,
		   &hMainThread, 0, false, DUPLICATE_SAME_ACCESS);
  if (wincap.has_security ())
    OpenProcessToken (hMainProc, MAXIMUM_ALLOWED, &hProcToken);

  (void) SetErrorMode (SEM_FAILCRITICALERRORS);

  STARTUPINFO si;
d588 4
a591 6
  child_proc_info = (child_info *) si.lpReserved2;

  if (si.cbReserved2 < EXEC_MAGIC_SIZE || !child_proc_info
      || memcmp (child_proc_info->zero, zeros,
		 sizeof (child_proc_info->zero)) != 0)
    child_proc_info = NULL;
d594 5
a598 5
      if ((child_proc_info->intro & OPROC_MAGIC_MASK) == OPROC_MAGIC_GENERIC)
	multiple_cygwin_problem ("proc intro", child_proc_info->intro, 0);
      else if (child_proc_info->intro == PROC_MAGIC_GENERIC
	       && child_proc_info->magic != CHILD_INFO_MAGIC)
	multiple_cygwin_problem ("proc magic", child_proc_info->magic,
d600 2
a601 2
      else if (child_proc_info->cygheap != (void *) &_cygheap_start)
	multiple_cygwin_problem ("cygheap base", (DWORD) child_proc_info->cygheap,
d603 1
d605 1
a605 1
      switch (child_proc_info->type)
d615 4
a618 6
	    if (should_be_cb != child_proc_info->cb)
	      multiple_cygwin_problem ("proc size", child_proc_info->cb, should_be_cb);
	    else if (sizeof (fhandler_union) != child_proc_info->fhandler_union_cb)
	      multiple_cygwin_problem ("fhandler size", child_proc_info->fhandler_union_cb, sizeof (fhandler_union));
	    else
	      cygwin_user_h = child_proc_info->user_h;
d621 1
a621 1
	    system_printf ("unknown exec type %d", child_proc_info->type);
d624 1
a624 1
	    child_proc_info = NULL;
d629 24
d657 1
d662 1
@


1.236
log
@* sync.h (muto::operator int): New operator.
(locker): Remove unused class.
(new_muto): Delete.
(new_muto1): Ditto.
(new_muto_name): Ditto.
* cygheap.cc (cygheap_setup_for_child): Reflect use of static storage for muto
rather than pointer.
(_csbrk): Ditto.
(_cmalloc): Ditto.
(_cmalloc): Ditto.
(_cfree): Ditto.
* cygheap.h (cwdstuff::cwd_lock): Ditto.
(cwdstuff::get_drive): Ditto.
* cygmalloc.h (__malloc_lock): Ditto.
(__malloc_unlock): Ditto.
* cygtls.cc (sentry::lock): Ditto.
(sentry::sentry): Ditto.
(~sentry): Ditto.
(_cygtls::init): Ditto.
* dcrt0.cc: Ditto.
(cygwin_atexit): Ditto.
(cygwin_exit): Ditto.
* debug.cc (lock_debug::locker): Ditto.
(lock_debug::lock_debug): Ditto.
(lock_debug::unlock): Ditto.
(debug_init): Ditto.
* dtable.cc (dtable::init_lock): Ditto.
* dtable.h (dtable::lock_cs): Ditto.
(dtable::lock): Ditto.
(dtable::unlock): Ditto.
* exceptions.cc (mask_sync): Ditto.
(sighold): Ditto.
(set_process_mask_delta): Ditto.
(set_signal_mask): Ditto.
(events_init): Ditto.
* grp.cc (pwdgrp::pwdgrp): Ditto.
* malloc_wrapper.cc (mallock): Ditto.
(malloc_init): Ditto.
* path.cc (cwdstuff::cwd_lock): Ditto.
(cwdstuff::get_hash): Ditto.
(cwdstuff::get_hash): Ditto.
(cwdstuff::init): Ditto.
(cwdstuff::set): Ditto.
(cwdstuff::get): Ditto.
* pwdgrp.h (pwdgrp::pglock): Ditto.
(pwdgrp::refresh): Ditto.
* sigproc.cc (sync_proc_subproc): Ditto.
(get_proc_lock): Ditto.
(proc_subproc): Ditto.
(_cygtls::remove_wq): Ditto.
(proc_terminate): Ditto.
(sigproc_init): Ditto.
* timer.cc (lock_timer_tracker::protect): Ditto.
(lock_timer_tracker::lock_timer_tracker): Ditto.
(lock_timer_tracker::~lock_timer_tracker): Ditto.
* wininfo.cc (wininfo::_lock;): Ditto.
(wininfo::winthread): Ditto.
(operator HWND): Ditto.
(wininfo::lock): Ditto.
(wininfo::release): Ditto.
* wininfo.h (wininfo::_lock;): Ditto.
@
text
@d132 3
a134 1
  if (user_data->dtors)
d136 1
a136 1
      void (**pfunc)() = user_data->dtors;
a976 1
  atexit (do_global_dtors);
d998 2
d1102 1
@


1.235
log
@	* dcrt0.cc (dll_crt0_1): Don't call set_cygwin_privileges on 9x.

	* fhandler.h (enum change_state): Add.
	(fhandler_base::status): Add a bit to has_changed flag.
	(fhandler_base::has_changed): Implement with type change_state.
	* fhandler.cc (fhandler_base::raw_write): Accomodate type change
	of has_changed.
	* fhandler_disk_file.cc )fhandler_disk_file::touch_ctime): Also
	touch modification time if has_changed == data_changed.
	(fhandler_disk_file::fchmod): Also open on 9x, otherwise we can't
	touch ctime.  Accomodate type change of has_changed.
	(fhandler_disk_file::fchown): Accomodate type change of has_changed.
	(fhandler_disk_file::facl): Ditto.
	(fhandler_disk_file::ftruncate): Ditto.
	(fhandler_disk_file::link): Ditto.
	(fhandler_base::open_fs): Ditto.
@
text
@d50 2
d1083 1
a1083 1
static muto *atexit_lock;
d1089 2
a1090 3
  if (!atexit_lock)
    new_muto (atexit_lock);
  atexit_lock->acquire ();
d1092 1
a1092 1
  atexit_lock->release ();
d1100 1
a1100 1
    atexit_lock->acquire ();
@


1.234
log
@	* cygheap.cc (cygheap_init): Accomodate set_process_privilege change.
	* cygheap.h (cygheap_user::curr_primary_token): New member.
	(cygheap_user::primary_token): New method.
	(cygheap_user::deimpersonate): Always revert to processes'
	impersonation token.
	(cygheap_user::reimpersonate): Set processes' or setuid token as
	necessary.
	(cygheap_user::has_impersonation_tokens): Look for curr_primary_token
	value.
	(cygheap_user::close_impersonation_tokens): Close curr_primary_token
	here if necessary.  Don't reset token values to NO_IMPERSONATION since
	that's done in uinfo_init anyway.
	(init_cygheap::luid): New LUID array keeping privilege LUIDs.
	* cygtls.cc (_cygtls::init_thread): Call cygheap->user.reimpersonate.
	* dcrt0.cc (hProcToken): New global variable to keep process token.
	(hProcImpToken): Ditto for process impersonation token.
	(dll_crt0_0): Open process token here once.  Duplicate to create
	hProcImpToken.
	(dll_crt0_1): Call set_cygwin_privileges.
	* environ.cc (allow_ntea): Drop duplicate declaration.
	(allow_smbntsec): Ditto.
	(set_traverse): Only set allow_traverse here.
	(environ_init): Ditto.
	* fhandler_disk_file.cc (fhandler_disk_file::fchmod): Drop call to
	enable_restore_privilege.
	(fhandler_disk_file::fchown): Ditto.
	(fhandler_disk_file::facl): Ditto.
	* fork.cc (fork_child): Move call to cygheap->user.reimpersonate after
	syn with parent. Call set_cygwin_privileges.
	* grp.cc (internal_getgroups): Use hProcImpToken instead of opening
	process token.
	* path.cc (fs_info::update): Bypass traverse checking when retrieving
	volume information using push/pop_thread_privileges.
	* registry.cc (load_registry_hive): Drop setting restore privilege
	since it's already set if available.
	* sec_helper.cc: Include cygtls.h.
	(cygpriv): Privilege string array.
	(privilege_luid): New function, evaluate LUID from cygpriv_idx.
	(privilege_luid_by_name): New function, evaluate LUID from privilege
	string.
	(privilege_name): New function, evaluate privilege string from
	cygpriv_idx.
	(set_privilege): New static function called by set_process_privilege
	and set_thread_privilege.  Call privilege_luid to get privilege LUID.
	Fix bug in return value evaluation. Improve debug output.
	(set_cygwin_privileges): New function.
	(set_process_privilege): Remove.
	(enable_restore_privilege): Remove.
	* security.cc (allow_traverse): New global variable.
	(sys_privs): Change type to cygpriv_idx and store privilege indices
	instead of strings.
	(SYSTEM_PRIVILEGES_COUNT): Renamed from SYSTEM_PERMISSION_COUNT.
	(get_system_priv_list): Don't use numerical constant in malloc call.
	Use privilege_luid to get privilege LUIDs.
	(get_priv_list): Call privilege_luid_by_name to get LUIDs. Improve
	inner privilege LUID comparison loop.
	(create_token): Enable create token privilege using
	push/pop_self_privileges. Use hProcToken instead of opening process
	token. Use default DACL when duplicating token.
	(subauth): Enable tcb privilege using push/pop_self_privileges.
	Use sec_none instead of homw made security attributes when duplicating
	token.
	(check_file_access): Don't duplicate access token, use active
	impersonation token as is.
	* security.h (enum cygpriv_idx): New enumeration type enumerating
	possible privileges.
	(privilege_luid): Declare new function.
	(privilege_luid_by_name): Ditto.
	(privilege_name): Ditto.
	(allow_traverse): Declare.
	(set_privilege): Declare function.
	(set_process_privilege): Define as macro.
	(enable_restore_privilege): Remove declaration.
	(_push_thread_privilege): Define macro.
	(push_thread_privilege): Ditto.
	(pop_thread_privilege): Ditto.
	(pop_self_privilege): Ditto.
	* spawn.cc (spawn_guts): Use cygheap->user.primary_token instead of
	cygheap->user.token.
	* syscalls.cc (statvfs): Bypass traverse checking when retrieving
	volume information using push/pop_thread_privileges. Rearrange code
	to simplify push/pop bracketing.
	(seteuid32): Use hProcToken instead of opening process token. Call
	cygheap->user.deimpersonate instead of RevertToSelf.  Create
	impersonation token from primary internal or external token.  Set
	cygheap->user.curr_primary_token and cygheap->user.current_token
	privileges once here.  Drop "failed" and "failed_ptok" labels.
	Drop setting DefaultDacl of process token.
	(setegid32): Use hProcToken and hProcImpToken instead of opening
	process token. Always reimpersonate afterwards.
	* uinfo.cc (cygheap_user::init): Use hProcToken instead of opening
	process token.
	(internal_getlogin): Ditto. Set hProcImpToken, too.
	(uinfo_init): Initialize cygheap->user.curr_primary_token.
	* winsup.h (hProcToken): Declare.
	(hProcImpToken): Declare.
@
text
@d773 2
a774 1
  set_cygwin_privileges (hProcImpToken);
@


1.233
log
@	Unify usage of CYG_MAX_PATH throughout.  Change buffers from
	size CYG_MAX_PATH + 1 to CYG_MAX_PATH.  Change length tests
	accordingly.
@
text
@d48 2
d594 2
d695 6
d772 3
@


1.232
log
@* Makefile.in (DLL_OFILES): Add hookapi.o.  Eliminate some cruft.
* cygheap.h (cygheap_types): Add new enum: HEAP_1_HOOK.
(hook_chain): New struct.
(init_cygheap::hooks): Define new element.
* cygheap.cc (cygheap_fixup_in_child): Zero hook chain on exec.
* dcrt0.cc (dll_crt0_1): Call ld_preload just before calling main function.
* external.cc (cygwin_internal): Implement CW_HOOK.
* fork.cc (fork_child): Call fixup_hooks_after_fork.
* init.cc (cygwin_hmodule): Reinstate after a long absence.
* include/sys/cygwin.h: Define CW_HOOK.
* hookapi.cc: New file.
* select.cc (start_thread_socket): Add debugging output.
* fhandler_disk_file.cc (fhandler_disk_file::fchmod): gcc 4.x accommodation.
* fhandler_socket.cc (fhandler_socket::connect): Make sure that err is
initialized.
@
text
@d531 1
a531 1
  char buf[CYG_MAX_PATH + 1];
d553 1
a553 1
      char buf1[CYG_MAX_PATH + 1];
@


1.231
log
@* autoload.cc (LoadDllprime): Scrap use of .linkonce and just use an ifdef
guard to load .foo_init into data segment.
* dcrt0.cc (initial_env): Allow colon or space as CYGWIN_DEBUG separator for
consistency.
@
text
@d44 2
d862 1
@


1.230
log
@* dcrt0.cc (dll_crt0_0): Eliminate muto::init call.
* sync.h (locker): New, currently unused class.
(muto::init): Eliminate.
* sync.cc (muto::init): Ditto.
(muto::init): Eliminate critical section lock and instead use name as a guard
to prevent against multiple attempts to initialize the same muto.
* pinfo.cc (pinfo::init): Set myself procinfo when not execing and pid matches
windows pid or cygwin pid.
@
text
@d555 1
a555 1
      char *p = strchr (buf, ':');
@


1.229
log
@* sync.h (sync::init_lock): Declare new static member.
(sync::init()): Declare new static function.
* sync.cc (sync::init): Define.
(sync::init): Lock attempt to initialize a muto to stop multiple threads from
colliding.
* dcrt0.cc (dll_crt0_0): Initialize muto environment.
@
text
@a576 1
  muto::init ();
@


1.228
log
@* pinfo.h (_pinfo::set_exit_state): Declare new function.
(pinfo::exit): Move here from _pinfo::exit.
* sigproc.cc (child_info::sync): Use new function to set exitcode and
process_state.
* pinfo.cc (_pinfo::exit): Ditto.
(proc_waiter): Ditto.
(_pinfo::set_exit_state): Define new function.
(_pinfo::dup_proc_pipe): Close handle when there is no parent process around to
care about the exit value.
* dcrt0.cc (dll_crt0_0): Move subproc_ready synchronization later to make sure
that myself is still mapped in parent.
(do_exit): Reflect movement to pinfo::exit.
(__api_fatal): Ditto.
* exceptions.cc (signal_exit): Ditto.
* errno.cc (errmap): Map PROC_NOT_FOUND.
* init.cc (dll_entry): Release myself before exiting.
* sigproc.cc (proc_can_be_signalled): Set errno appropriately.
(sig_send): Ditto.  Also remove ill-advised test for !myself->sendsig since
this is an indication of a process which is still initializating -- it is not
an error.
(child_info::sync): Don't set exitcode here.  Assume that will happen in
proc_waiter, if necessary.
* spawn.cc (spawn_guts): Delay "wait_for_myself" logic until later.  Don't wait
at all if the process has already exited.  Reflect movement to pinfo::exit.
@
text
@d577 1
@


1.227
log
@update copyright
@
text
@d628 2
a629 6
	      {
		if (child_proc_info->type != _PROC_FORK)
		  child_proc_info->ready (true);
		cygwin_user_h = child_proc_info->user_h;
		break;
	      }
d666 2
d1061 1
a1061 1
  myself->exit (n);
d1124 1
a1124 1
  myself->exit (1);
@


1.226
log
@* dcrt0.cc (multiple_cygwin_problem): Reorganize error message to not always
talk about a "version" when it's not a version.
(dll_crt0_0): Change info passed to multiple_cygwin_problem to be a little more
precise.
* shared.cc (user_shared_initialize): Ditto.
(shared_info::initialize): Ditto.
@
text
@d3 2
a4 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Red Hat, Inc.
@


1.225
log
@* sigproc.cc (mychild): Reimplement as list scan.
(proc_subproc): Don't mess with pinfo if it's myself.
* child_info.h (child_info_types): Label enum for _PROC constants.
(child_info::child_info): New constructor.
(child_info::~child_info): New destructor.
(child_info::sync): Declare new function.
(child_info_fork::child_info_fork): New constructor.
(child_info_spawn::child_info_spawn): Remove old constructor.
(child_info_spawn::child_info_spawn): New constructor.
* dcrt0.cc (dll_crt0_0): Use correct sizeof when doing sanity check on passed
in child_info.  Signal readiness to parent when not forking (and not spawning).
* fork.cc (sync_with_child): Delete.
(resume_child): Remove extra argument.
(sync_with_parent): Use child_info method to sync with parent.
(fork_child): Don't close fork_info->subproc_ready since that is now handled by
the destructor.
(fork_parent): Remove subproc_ready stuff.  Use child_info sync method for
waiting..  Set start time here for child.  Rename "forked" to "child".
(fork): Check ch.subproc_ready for validity here.
* pinfo.h (_pinfo::exec_sendsig): Temp storage for exec stub which may be
staying around to handle non-cygwin captive process.
(_pinfo::exec_dwProcessId): Ditto.
(_pinfo::_lock): Renamed from lock.
(_pinfo::lock): New method.
(_pinfo::unlock): Ditto.
(_pinfo::initialize_lock): Ditto.
* pinfo.cc (set_myself): Use initialize_lock method to initialize myself lock.
Set "exec" fields in _pinfo to zero to indicate that we've started
successfully.  Set start time here when appropriate.
(_pinfo::commune_send): Use pinfo lock/unlock methods.
(proc_waiter): Remove special case for non-cywin processes.  Reinstitute
handling for PID_NOCLDSTOP.
* sigproc.cc (proc_subproc): Set proper EAGAIN errno when process table is
filled.
(sig_send): Use exec_* fields from _pinfo for sending signals if the the _pinfo
sendsig never materializes.
(child_info::child_info): New constructor, renamed from init_child_info.
Zeroes child_info structure and sets appropriate fields in structure based on
chtype.
(child_info::~child_info): New destructor.  Closes subproc_ready if it exists.
(child_info_fork::child_info_fork): New constructor.
(child_info_spawn::child_info_spawn): New constructor.
(child_info::ready): New function.  Signals parent when child is ready.
(child_info::sync): New function.  Wait for child to signal us or process to
die.
(remove_proc): Remove closing of hProcess since this should now be handled
shortly after process creation.
* spawn.cc (spawn_guts): Use child_info_spawn constructor rather than
init_child_info.  Save exec_sendsig and exec_dwProcessId in execing _pinfo.
Rely on child_info constructor to properly set parent_wr_proc_pipe in ciresrv.
Revert to previous determination on whether to start a process in suspended
mode.  Remove reparenting stuff.  Just keep a stub around if starting a
non-cygwin process.
@
text
@d603 1
a603 1
	multiple_cygwin_problem ("proc", child_proc_info->intro, 0);
d606 1
a606 1
	multiple_cygwin_problem ("proc", child_proc_info->magic,
d609 1
a609 1
	multiple_cygwin_problem ("cygheap", (DWORD) child_proc_info->cygheap,
d1144 2
a1145 2
    api_fatal ("%s version mismatch detected - %p/%p.\n\
You have multiple copies of cygwin1.dll on your system.\n\
d1149 3
a1151 1
installed the cygwin distribution.", what, magic_version, version);
@


1.224
log
@* child_info.h (child_info_spawn::hexec_proc): Eliminate.
* dcrt0.cc (dll_crt0_0): Remove hexec_proc stuff.
* fork.cc (fork_child): Remove call to pinfo_fixup_after_fork.
* pinfo.cc (set_myself): Close and zero pid_handle if set.
(pinfo_fixup_after_fork): Delete.
(proc_waiter): Don't close vchild.hProcess here.  Do that when we are remove
the vchild from procs.  Save hProcess as pid_handle only on first reparent
operation.
(pinfo::wait): Don't set pid_handle here.
(pinfo::alert_parent): Always try to send signal.  If unsuccessful then close
and zero wr_proc_pipe.
* pinfo.h (pinfo::pinfo): Make sure that appropriate parts of the class are
zeroed on construction.
(pinfo::alert_parent): Take char argument.
(pinfo_fixup_after_fork): Delete declaration.
(hexec_proc): Ditto.
* sigproc.cc (remove_proc): Close pid_handle and hProcess if appropriate.
* spawn.cc (spawn_guts): Set cygheap->pid_handle on first exec.
* cygheap.h (init_cygheap::pid_handle): New element.
* pinfo.cc (set_myself): Clear previously existing cygheap->pid_handle when a
new process has been started.
(pinfo::wait): Make sure that a handle to the newly forked/spawned process is
kept around so that the pid will not be reused.
* pinfo.h (_pinfo::pid_handle): Move.
(pinfo::pid_handle): to here.
* spawn.cc (spawn_guts): Create a pid_handle in cygheap prior to spawning to
ensure that the pid does not get reused during the lifetime of the "cygwin
pid".
* pinfo.h (pinfo::alert_parent): New function.
* exceptions.cc (sig_handle_tty_stop): Use alert_parent to send "signals" to
parent.
* fork.cc (fork_parent): Don't close pi.hProcess.  Let the waiter thread do
that.
* pinfo.cc (proc_waiter): Detect case where process exits without setting the
exit code and use value from GetExitCodeProcess.  Reluctantly implement
__SIGREPARENT.
(pinfo::alert_parent): Define.
* sigproc.h (__SIGREPARENT): New enum.
* spawn.cc (spawn_guts): Send reparent signal to parent on exec.  Always create
process in suspended state to avoid races.  Remove cygthread.h in favor of
cygtls.h throughout since cygtls now includes cygthread.h.  Eliminate
ppid_handle usage throughout.
* child_info.h: Regenerate magic number
(child_info): Remove pppid_handle.
* cygthread.h (cygthread::release): New method.  Frees thread without waiting.
* cygthread.cc (cygthread::stub): Set _ctinfo in _mytls to point to information
for executing thread.  Don't call SetEvent if thread is no longer in use.
(cygthread::simplestub): Ditto.
* cygtls.h (_cygtls::_ctinfo): New element contains pointer to information
about executing cygthread, if any.
* dcrt0.cc: Remove last vestiges of per_thread stuff.
(dll_crt0_0): Ditto.  Remove accommodation for ppid_handle.
(do_exit): Remove obsolete reparenting test.
(_exit): Exit with a more SUSv3-like exit value.
* dtable.cc (dtable::stdio_init): Check for myself->cygstarted rather than
myself->ppid_handle to see if we were started by a cygwin process.
* exceptions.cc (open_stackdumpfile): Ditto.
(handle_exceptions): Ditto.
(ctrl_c_handler): Ditto.
(sig_handle_tty_stop): Ditto.  Let parent send signal to itself on STOP.
(sigpacket::process): Comment out vfork test.
(signal_exit): Use more SUSv3-like exit value on signal.
* external.cc (fillout_pinfo): Don't set hProcess.
* fork.cc: Remove VFORK cruft.
(per_thread::set): Delete.
(fork_child): Remove perthread stuff.
(fork_parent): Remove obsolete subproc_init.  Accommodate new method for
tracking subprocesses.
* pinfo.cc (set_myself): Accommodate new pinfo/_pinfo layout.  Set some things
here that used to be set in wait_sig.
(_pinfo::exit): Set exitcode here.  Close process pipe.
(_pinfo::commune_send): Accommodeate new pinfo/_pinfo layout.
(proc_waiter): New function.  Waits, in a thread for subprocess to go away.
(pinfo::wait): New function.  Initialization for proc_waiter.
* pinfo.h (_pinfo::exitcode): New element.
(_pinfo::cygstarted): Ditto.
(_pinfo::wr_proc_pipe): Ditto.
(_pinfo::ppid_handle): Delete.
(_pinfo::hProcess): Delete.
(_pinfo::lock): Delete.
(pinfo::hProcess): New element.
(pinfo::lock): Ditto.
(pinfo::wait): Declare new function.
(pinfo::preserve): Define new function.
* sigproc.cc: Remove old stuff from wait_subproc thread based method.
(zombies): Remove.
(procs): New.
(my_parent_is_alive): Just check that the parent pid exists.
(mychild): Just use pinfo methods to determine if child is mine.
(proc_subproc): Revamp PROC_ADDCHILD to use pinfo::wait.  Remove
PROC_CHILDTERMINATED logic.  Use different method to remove processes from list
when SIGCHLD == SIG_IGN.
(proc_terminate): Gut.
(subproc_init): Delete.
(init_child_info): Remove setting of pppid_handle.
(checkstate): Revamp to only scan procs array.
(remove_proc): Rename from remove_zombie.  Don't close hProcess or pid_handle.
Don't release memory if it's myself.
(stopped_or_terminated): Change logic to handle new consolidated proc/zombie
array.
(wait_subproc): Delete.
* sigproc.h: Remove obsolete EXIT_* defines.
(subproc_init): Remove declaration.
* spawn.cc (spawn_guts): Remove reparenting stuff.  Use standard wait logic to
wait for child if started from a non-cygwin process.
* tlsoffsets.h: Regenerate.
* tty.cc (tty_init): Check for myself->cygstarted rather than
myself->ppid_handle to see if we were started by a cygwin process.
* include/sys/signal.h (external_pinfo::exitcode): Replace hProcess.
* include/sys/wait.h (WCOREDUMP): Define.
* fhandler_tty.cc (fhandler_tty_slave::read): Add debugging output for timeout
case.
* signal.cc (abort): Flag that we are exiting with the ABORT signal.
@
text
@d621 1
a621 1
	      should_be_cb = sizeof (child_info);
d628 2
@


1.223
log
@	* dcrt0.cc (dll_crt0_0): Drop duplicated line.
@
text
@d32 1
a32 1
#include "perthread.h"
a35 1
#include "cygthread.h"
a45 10
#ifdef NEWVFORK
per_thread_vfork NO_COPY vfork_storage;
#endif

per_thread NO_COPY *threadstuff[] = {
#ifdef NEWVFORK
				     &vfork_storage,
#endif
				     NULL};

a647 2
      bool close_ppid_handle = false;
      bool close_hexec_proc = false;
a654 1
	    close_ppid_handle = !!child_proc_info->pppid_handle;
a656 4
	    /* Have to delay closes until after cygheap is setup */
	    close_hexec_proc = !!spawn_info->hexec_proc;
	    close_ppid_handle = !!child_proc_info->pppid_handle;
	    goto around;
a657 2
	    hexec_proc = spawn_info->hexec_proc;
	  around:
a679 4
      if (close_hexec_proc)
	CloseHandle (spawn_info->hexec_proc);
      if (close_ppid_handle)
	CloseHandle (child_proc_info->pppid_handle);
d993 4
a996 7
      if (!(n & EXIT_REPARENTING))
	{
	  signal (SIGCHLD, SIG_IGN);
	  signal (SIGHUP, SIG_IGN);
	  signal (SIGINT, SIG_IGN);
	  signal (SIGQUIT, SIG_IGN);
	}
d1088 1
a1088 1
  do_exit ((DWORD) n & 0xffff);
@


1.223.2.1
log
@experimental branch which removes cygwin's reparenting code, in favor of a pipe.
@
text
@d659 1
d668 1
d673 1
d702 2
d1017 7
a1023 4
      signal (SIGCHLD, SIG_IGN);
      signal (SIGHUP, SIG_IGN);
      signal (SIGINT, SIG_IGN);
      signal (SIGQUIT, SIG_IGN);
d1115 1
a1115 1
  do_exit (((DWORD) n & 0xff) << 8);
@


1.223.2.2
log
@Use cygthread.  Add release mechanism to cygthread so that it can be
used by threads which detach themselves.
@
text
@d36 1
@


1.223.2.3
log
@checkpoint
@
text
@d32 1
a32 1
#include "cygtls.h"
d46 10
@


1.223.2.4
log
@* child_info.h (child_info_spawn::hexec_proc): Eliminate.
* dcrt0.cc (dll_crt0_0): Remove hexec_proc stuff.
* fork.cc (fork_child): Remove call to pinfo_fixup_after_fork.
* pinfo.cc (set_myself): Close and zero pid_handle if set.
(pinfo_fixup_after_fork): Delete.
(proc_waiter): Don't close vchild.hProcess here.  Do that when we are remove
the vchild from procs.  Save hProcess as pid_handle only on first reparent
operation.
(pinfo::wait): Don't set pid_handle here.
(pinfo::alert_parent): Always try to send signal.  If unsuccessful then close
and zero wr_proc_pipe.
* pinfo.h (pinfo::pinfo): Make sure that appropriate parts of the class are
zeroed on construction.
(pinfo::alert_parent): Take char argument.
(pinfo_fixup_after_fork): Delete declaration.
(hexec_proc): Ditto.
* sigproc.cc (remove_proc): Close pid_handle and hProcess if appropriate.
* spawn.cc (spawn_guts): Set cygheap->pid_handle on first exec.
@
text
@d648 1
d658 3
d662 2
d686 2
@


1.222
log
@* cygwin.din (_impure_ptr): Export.
(reent_data): Don't export.
* dcrt0.cc (reent_data): Drop.
(__cygwin_user_data): Initialize impure_ptr as GLOBAL_REENT.
(_dll_crt0): Initialize _impure_ptr as GLOBAL_REENT.
* lib/_cygwin_crt0_common.cc (_impure_ptr): Drop.  Declare extern as dllimport
instead.
@
text
@a690 1
	    envp = spawn_info->moreinfo->envp;
@


1.221
log
@* exceptions.cc: (ctrl_c_handler): Do nothing while a Cygwin subprocess is
starting.
* child_info.h (init_child_info): Remove pid argument from declaration.
* cygheap.h (init_cygheap::pid): New element.
* dcrt0.cc (dll_crt0_0): Eliminate handling of now-noexistent cygpid parameter
in child_info struct.  Set forkee to 'true' rather than cygpid since the pid
value was never used.
(dll_crt0_1): Ditto.
(_dll_crt0): Ditto.
* fork.cc (fork_child): Don't wait for sigthread.  This is handled in the fork
call now.
(fork_parent): Remove obsolete pid argument from init_child_info call.  Don't
do anything special with cygpid when DEBUGGING.
(fork): Delay all signals during fork.
(fork_init): Don't do anything special when DEBUGGING.
* pinfo.cc (set_myself): Remove pid parameter.  Use new pid field in cygheap.
(pinfo_init): Don't pass pid argument to set_myself.
* sigproc.cc (sig_send): Wait for dwProcessId to be non-zero as well as
sendsig.
(init_child_info): Eliminate handling of pid.
(wait_sig): Implement method to temporarily hold off sending signals.
* sigproc.h (__SIGHOLD): New enum.
(__SIGNOHOLD): Ditto.
* spawn.cc (spawn_guts): Remove obsolete pid argument from init_child_info
call.
@
text
@a100 1
  struct _reent reent_data;
d121 1
a121 1
   /* impure_ptr */ &reent_data,
d927 1
a927 1
  _impure_ptr = &reent_data;
d949 1
a949 1
      *(user_data->impure_ptr_ptr) = &reent_data;
@


1.220
log
@* dcrt0.cc (dll_crt0_0): Use proper boolean arguments.
* pinfo.cc (pinfo::init): Don't consider MapViewOfFileEx error to be fatal if
exiting.
* pinfo.h (pinfo::init): Eliminate default argument and supply the argument in
the one case that needed it.
@
text
@a607 1
  int mypid = 0;
d627 1
a627 1
	    user_data->forkee = child_proc_info->cygpid;
a640 1
		mypid = child_proc_info->cygpid;
d668 1
a668 1
	    set_myself (mypid);
d687 1
a687 1
	    set_myself (mypid, h);
d772 1
a772 1
      longjmp (fork_info->jmp, fork_info->cygpid);
d935 1
a935 1
    user_data->forkee = child_proc_info->cygpid;
@


1.219
log
@* path.cc (chdir): Always use the normalized_path as posix_cwd, except if it
starts with a drive.

Also perform whitespace cleanup.
@
text
@d668 1
a668 1
	    cygheap_fixup_in_child (0);
d682 1
a682 1
	    cygheap_fixup_in_child (1);
d686 1
a686 1
				  hMainProc, &h, 0, 0,
@


1.218
log
@* cygtls.h (waitq): Declare structure here.
(_cygtls::wq): Declare.
* cygtls.cc (_cygtls::fixup_after_fork): Clear wq.thread_ev to avoid using an
invalid event handle in forked process.
* dcrt0.cc (waitq_storage): Delete.
(threadstuff): Remove waitq_storage.
* perthread.h (per_thread_waitq): Delete.
(waitq_storage): Delete declaration.
* sigproc.cc (sigproc_init): Remove perthread waitq consideration.
* sigproc.h (waitq): Delete declaration.
* wait.cc (wait4): Use _my_tls waitq structure rather than per_thread.
* cygtls.h (_cygtls::newmask): Delete member.
(_cygtls::deltamask): New member.
* gendef (_sigdelayed): Replace the call to set_process_mask by a call to
set_process_mask_delta.
* exceptions.cc (handle_sigsuspend): Do not filter tempmask.  Or
SIG_NONMASKABLE in deltamask as a flag.
(_cygtls::interrupt_setup): Set deltamask only.
(set_process_mask_delta): New function.
(_cygtls::call_signal_handler): Replace the first call to set_process_mask by a
call to set_process_mask_delta.
* tlsoffsets.h: Regenerate.
@
text
@d907 1
a907 1
  
@


1.217
log
@* dcrt0.cc (_dll_crt0): Don't check sync_startup if threadfunc_ix is set.
* external.cc (cygwin_internal): Implement CW_GET_BINMODE.
* include/sys/cygwin.h: Declare CW_GET_BINMODE.
@
text
@a46 1
per_thread_waitq NO_COPY waitq_storage;
d51 1
a51 1
per_thread NO_COPY *threadstuff[] = {&waitq_storage,
@


1.216
log
@* dcrt0.cc (_dll_crt0): Add some stern internal errors.
@
text
@d913 4
a916 1
  if (!sync_startup)
a923 1
  extern unsigned threadfunc_ix;
@


1.215
log
@* fork.cc (fork_child): Invert sense of test which defeated correct handling in
a fork from a non-main thread.
* dcrt0.cc (initial_env): Eliminate parameter and just send DebugBreak when
appropriate.
(dll_crt0_0): Reflect parameter change to initial_env.
(dll_crt0_1): Don't call initial_env.
@
text
@d913 3
a915 1
  if (sync_startup)
d920 4
@


1.214
log
@* cygheap.cc (_csbrk): Report failing condition to stderr rather than strace.
@
text
@d539 1
a539 1
initial_env (bool first)
d542 1
a542 3
  if (!first)
    /* nothing */;
  else if (GetEnvironmentVariable ("CYGWIN_TESTING", buf, sizeof (buf) - 1))
d544 1
a546 8
  static bool NO_COPY did_debugging_stuff;
#if 0
  if (did_debugging_stuff || (first && wincap.cant_debug_dll_entry ()))
    return;
#else
  if (first)
    return;
#endif
a547 1
  did_debugging_stuff = true;
d576 2
d589 1
a589 1
  initial_env (true);
a730 1
  initial_env (false);
@


1.213
log
@* dcrt0.cc (alloc_stack_hard_way): Revert to previous implementation.
(alloc_stack): Ditto.
* exceptions.cc (ctrl_c_handler): Add debugging output.
@
text
@a745 6
  /* Nasty static stuff needed by newlib -- point to a local copy of
     the reent stuff.
     Note: this MUST be done here (before the forkee code) as the
     fork copy code doesn't copy the data in libccrt0.cc (that's why we
     pass in the per_process struct into the .dll from libccrt0). */

@


1.212
log
@* dcrt0.cc (alloc_stack_hard_way): Eliminate second argument.
(alloc_stack): Remove use of 'b' throughout.
@
text
@d462 2
a463 3
// __inline__ void
extern void
alloc_stack_hard_way (child_info_fork *ci)
d498 1
a498 1
      m.BaseAddress = (LPVOID)((DWORD)m.BaseAddress - 1);
d507 1
d515 5
a519 1
  if (!VirtualQuery ((LPCVOID) _tlstop, &sm, sizeof sm))
d523 3
a525 4
    {
      ci->stacksize = 0;
      return;
    }
a526 1
  alloc_stack_hard_way (ci);
a789 1

@


1.211
log
@Rename _threadinfo to _cygtls, throughout.
* cygtls.h (_cygtls::call_signal_handler): Rename from call_signal_handler_now.
(_cygtls::push): Make second argument mandatory.
(_cygtls::fixup_after_fork): Declare new function.
(_cygtls::lock): Ditto.
* cygtls.cc (_cygtls::fixup_after_fork): Define new function.
* dcrt0.cc (cygwin_finished_initializing): Define as bool.
(alloc_stack): Use _tlstop rather than arbitrary variable in probably vain
attempt to avoid strange fork problem on CTRL-C.
(dll_crt0_0): Remove obsolete winpids::init call.
* dll_init.cc (dll_dllcrt0): Detect forkee condition as equivalent to
initializing.
* winsup.h (cygwin_finished_initializing): Declare as bool.
* exceptions.cc (handle_exceptions): Rely on cygwin_finished_initializing to
determine how to handle exception during process startup.
(_cygtls::call_signal_handler): Rename from call_signal_handler_now.
(_cygtls::interrupt_now): Fill in second argument to push.
(signal_fixup_after_fork): Eliminate.
(setup_handler): Initialize locked to avoid potential inappropriate unlock.
Resume thread if it has acquired the stack lock.
(ctrl_c_handler): Just exit if ctrl-c is hit before cygiwn has finished
initializing.
* fork.cc (sync_with_child): Don't call abort since it can cause exit
deadlocks.
(sync_with_child): Change debugging output slightly.
(fork_child): Set cygwin_finished_initializing here.  Call _cygtls fork fixup
and explicitly call sigproc_init.
(fork_parent): Release malloc lock on fork failure.
(vfork): Call signal handler via _my_tls.
* sigproc.cc (sig_send): Ditto.
* syscalls.cc (readv): Ditto.
* termios.cc (tcsetattr): Ditto.
* wait.cc (wait4): Ditto.
* signal.cc (nanosleep): Ditto.
(abort): Ditto.
(kill_pgrp): Avoid killing self if exiting.
* sync.cc (muto::acquire): Remove (temporarily?) ill-advised exiting_thread
check.
* gendef (_sigfe): Be more agressive in protecting stack pointer from other
access by signal thread.
(_cygtls::locked): Define new function.
(_sigbe): Ditto.
(_cygtls::pop): Protect edx.
(_cygtls::lock): Use guaranteed method to set eax to 1.
(longjmp): Aggressively protect signal stack.
* miscfuncs.cc (low_priority_sleep): Reduce "sleep time" for secs == 0.
* pinfo.cc (winpids::set): Counterintuitively use malloc's lock to protect
simultaneous access to the pids list since there are pathological conditions
which can cause malloc to call winpid.
(winpids::init): Eliminate.
* pinfo.h (winpids::cs): Eliminate declaration.
* pinfo.h (winpids::init): Eliminate definition.
@
text
@d464 1
a464 1
alloc_stack_hard_way (child_info_fork *ci, volatile char *b)
a507 1
  *b = 0;
d524 1
a524 1
  alloc_stack_hard_way (ci, b + sizeof (b) - 1);
@


1.210
log
@	* security.h (SID): New macro.
	(well_known_*_sid): Change type to cygpsid.
	(cygsid::init): Delete declaration.
	* sec_helper.cc (well_known_*_sid): Define using above SID macro.
	(cygsid::init): Delete.
	* dcrt0.cc (dll_crt0_0): Do not call cygsid::init.
	* security.cc (get_user_local_groups): Change the second argument type
	to cygpsid.
@
text
@d75 1
a75 1
_threadinfo NO_COPY *_main_tls;
d77 1
a77 1
int cygwin_finished_initializing;
d516 1
a516 5
  /* FIXME: adding 16384 seems to avoid a stack copy problem during
     fork on Win95, but I don't know exactly why yet. DJ */
  volatile char b[ci->stacksize + 16384];

  if (!VirtualQuery ((LPCVOID) &b, &sm, sizeof sm))
d520 4
a523 3
    ci->stacksize = 0;
  else
    alloc_stack_hard_way (ci, b + sizeof (b) - 1);
d525 1
a662 1
  winpids::init ();
d718 1
a718 1
  _threadinfo::init ();
d873 1
a873 1
  cygwin_finished_initializing = 1;
@


1.209
log
@* fhandler.h (*::fixup_after_exec): Eliminate unused handle argument.
* fhandler.h (dtable::fixup_after_exec): Eliminate unused handle argument.
* dcrt0.cc (dll_crt0_1): Reflect elimination of unused handle argument to
fixup_after_exec.
* dtable.cc (dtable::fixup_after_exec): Ditto.
* fhandler_console.cc (fhandler_console::fixup_after_exec): Ditto.
* fhandler_dsp.cc (fhandler_dsp::fixup_after_exec): Ditto.
* fhandler_raw.cc (fhandler_raw::fixup_after_exec): Ditto.
* fhandler_socket.cc (fhandler_socket::fixup_after_exec): Ditto.
* fhandler_virtual.cc (fhandler_virtual::fixup_after_exec): Ditto.
* pipe.cc (fhandler_pipe::fixup_after_exec): Ditto.
* spawn.cc (spawn_guts): Do not set ciresrv.parent.
* child_info.h (child_info_spawn::~child_info_spawn): Do not close parent.
Update CURR_CHILD_INFO_MAGIC.
* dcrt0.cc (dll_crt0_0): Do not close spawn_info->parent.  Pass NULL to
cygheap->fdtab.fixup_after_exec().
@
text
@a725 2
  /* Init global well known SID objects */
  cygsid::init ();
@


1.208
log
@* cygtls.cc (_threadinfo::init_thread): Add more local reent stdio
initialization.
* dcrt0.cc (initial_env): Can it really be true that XP doesn't allow attaching
a debugger during DLL attach?  Add temporary workaround.
(dll_crt0_0): Ensure that _impure_ptr stdio is initialized before any threads.
(dll_crt0_1): Move _impure_ptr initialization to dll_crt0_0.
* exceptions.cc (try_to_debug): Reinstate old method for looping while
debugging.
* syscalls.cc (_cygwin_istext_for_stdio): Regularize debugging output.  Remove
hopefully extraneous check.
(setmode_helper): Add debugging output for improbable case.  Use "binary"
rather "raw" for consistency.
@
text
@d706 1
a706 1
	    cygheap->fdtab.fixup_after_exec (spawn_info->parent);
a707 1
	    CloseHandle (spawn_info->parent);
@


1.207
log
@* configure.in: Remove NEWVFORK default.
* configure: Regenerate.
* dcrt0.cc: Conditionalize vfork stuff throughout.
* dtable.cc: Ditto.
* perthread.h: Ditto.
* pipe.cc (fhandler_pipe::close): Ditto.
* spawn.cc (spawnve): Ditto.
* syscalls.cc (setsid): Ditto.
* exceptions.cc (sigpacket::process): Use macro to refer to vfork pid.
* debug.cc (verify_handle): Define new function.
* debug.h (VerifyHandle): Define new macro.
(verify_handle): Declare new function
* fhandler.cc (fhandler_base::dup): Verify that dup'ed handle is not supposed
to be in use.
(fhandler_base::set_inheritance): Ditto.
(fhandler_base::fork_fixup): Ditto.
* fhandler_socket.cc (fhandler_socket::dup): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::open): Ditto.
* net.cc (set_socket_inheritance): Ditto.
* pinfo.cc (pinfo_fixup_after_exec): Ditto.
* sigproc.cc (proc_subproc): Ditto.
(sig_send): Ditto.
* spawn.cc (spawn_guts): Ditto.
* thread.cc (pthread::init_mainthread): Ditto.
* pipe.cc (fhandler_pipe::close): Close read_state with ForceCloseHandle since
it was protected.
(fhandler_pipe::fixup_after_exec): Protect read_state handle.
(fhandler_pipe::dup): Correctly close open handles on error condition.  Verify
that dup'ed handle is not supposed to be in use.
(fhandler_pipe::create): Protect read_state.
@
text
@d550 1
d553 4
d765 1
a765 4
    {
      __sinit (_impure_ptr);
      pthread::init_mainthread ();
    }
a942 3
  if (child_proc_info && child_proc_info->type == _PROC_FORK)
    user_data->forkee = child_proc_info->cygpid;

d949 6
@


1.206
log
@* dcrt0.cc (reent_data): Make global.
* cygwin.din: Reexport reent_data.
@
text
@d48 1
d50 1
d53 1
d55 1
d66 1
d68 1
d773 1
a774 1

d776 1
d1003 1
d1010 1
@


1.205
log
@* sigproc.cc (sigproc_terminate): Don't close sendsig handle when execing since
we're not closing what we think we're closing.
(sig_send): Improve debugging when exiting due to no_signals_available.
* wincap.h (wincaps::cant_debug_dll_entry): New element.
* wincap.cc: Implement above element throughout.
* dcrt0.cc (initial_env): Accommodate changes necessary to allow initial
debugging for systems which do not allow debugging in dll_entry.
(dll_crt0_0): Add initial_env call back here.
* Makefile.in (install-man): Use mandir as target for installation.
* include/cygwin/version.h: Bump DLL minor number to 7 (should have been done
earlier).
@
text
@d96 1
a96 1
  static struct _reent reent_data;
@


1.204
log
@* cygwin/include/signal.h: Add copyright notice.
* cygwin.din: Make clock SIGFE.  Add clock_gettime, sigwaitinfo, timer_create,
timer_delete, timer_settime.
* include/cygwin/version.h: Reflect above additions.
* fork.cc (fork_child): Call fixup_timers_after_fork.
* signal.cc (sigwait): Remove unused variable.
* timer.cc: New file.
(clock_gettime): Define new function.
(timer_tracker): Define new struct used by timer functions.
(timer_tracker::timer_tracker): New function.
(to_us): New function.
(timer_thread): New function.
(timer_tracker::settime): New function.
(timer_create): New function.
(timer_settime): New function.
(timer_delete): New function.
(fixup_timers_after_fork): New function.
* cygthread.cc: Bump thread count.
* signal.cc (sigwaitinfo): Define new function.
(sigwait): Redefine based on sigwaitinfo.
* include/cygwin/signal.h (sigwaitinfo): Declare.
(sigwait): Ditto.
* dtable.cc (dtable::vfork_parent_restore): Avoid double close of ctty when
ctty == ctty_on_hold.
* cygtls.h (_threadinfo::threadkill): New element.
(_threadinfo::set_threadkill): Declare new function.
(_threadinfo::reset_threadkill): Declare new function.
* dcrt0.cc (dcrt0_1): Call here so that it will be possible to attach to
running process with #(*& Windows Me/9x.
(initial_env): Try to initialize strace if uninitialized.
* gendef: Don't zero signal if threadkill is set since that will happen in the
called function.
* signal.cc (sigwait): Ensure cleanup in error conditions.
* sigproc.cc (sig_send): Clear packet mask storage.
(wait_subproc): Fill in child exit code in siginfo_t structure.
* thread.cc (pthread_kill): Set threadkill flag.
* tlsoffsets.h: Regenerate.  Throughout, use siginfo_t to fill out all signal
information for "kernel" signals.
* cygtls.h (_threadinfo::set_siginfo): Declare new function.
* cygtls.cc (_threadinfo::set_siginfo): Define new function.
* dcrt0.cc (do_exit): Accommodate siginfo_t considerations.
* exceptions.cc (handle_exceptions): Ditto.
(sig_handle_tty_stop): Ditto.
(ctrl_c_handler): Use killsys() to send signal.
(sigpacket::process): Rename from sig_handle.  Use siginfo_t field from
sigpacket for everything.
(tty_min::kill_pgrp): Accommodate siginfo_t considerations.
(fhandler_termios::bg_check): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::ioctl): Use killsys() to send signal.
* signal.cc (kill_worker): Rewrite to use siginfo_t second argument.
(kill_pgrp): Ditto.
(kill0): Define new function pulled from kill().
(kill): Rewrite as frontend to kill0.
(killsys): Define new function.
* sigproc.cc (sigelem): Eliminate.
(sigpacket): Move to sigproc.h.  Subsume sigelem.
(pending_signals): Use sigpacket rather than sigelem for everything.
(sig_clear): Ditto.
(wait_sig): Ditto.
(sig_send): Rewrite to use siginfo_t argument.
(sig_send): New function wratpper to sig_send with siginfo_t argument.
(wait_subproc): Accommodate siginfo_t considerations.
* thread.cc (pthread_kill): Ditto.
* sigproc.h (sigpacket): Move here.
(sigpacket::process): Declare "new" function.
(sig_handle): Eliminate declaration.
(sig_send): Declare with new paramaters.
(killsys): Declare new function.
(kill_pgrp): Declare.
* winsup.h: Move some signal-specific stuff to sigproc.h.
* include/cygwin/signal.h: Tweak some siginfo_t stuff.
@
text
@d534 1
a534 1
initial_env ()
d537 4
d543 5
a580 2
  if (GetEnvironmentVariable ("CYGWIN_TESTING", buf, sizeof (buf) - 1))
    _cygwin_testing = 1;
d587 1
d733 1
a733 1
  initial_env ();
@


1.203
log
@* cygtls.h (_threadinfo::call): Remove regparm declaration to work around
compiler bug.
* autoload.cc (TryEnterCriticalSection): Remove.
* dcrt0.cc (dll_crt0_0): Delete inappropriate setting of _my_tls.stackptr to
NULL since it has really bad consequences.  Make 'si' an automatic variable.
* cygtls.cc (_threadinfo::init_thread): Correct thinko which caused thread list
to be allocated every time.
* cygtls.h (CYGTLS_PADSIZE): Define as const int.
* sync.h: Make multiple inclusion safe.
(muto::next): Eliminate.
(muto::exiting_thread): New variable.
(muto::set_exiting_thread): New function.
(new_muto): Change to use different section for mutos since c++ give
inexplicable warning in some cases otherwise.
(new_muto1): Ditto.
* dcrt0.cc (do_exit): Call muto::set_exiting_thread here.
* sync.cc (muto_start): Eliminate.
(muto::acquire): Always give exiting thread a lock.  Never give thread a lock
if exiting.
(muto::release): Ditto for releasing.
* dtable.cc (dtable::init_lock): Unline function and define here.
* dtable.h (lock_cs): Define as a muto since critical sections seem to work
oddly on Windows Me.
(lock): Accommodate switch to muto.
(unlock): Ditto.
* exceptions.cc (setup_handler): Don't worry about acquiring mutos since that
hasn't mattered for a long time.
(signal_exit): Ditto: muto stuff will be handled automatically on exit now.
* Makefile.in (DLL_IMPORTS): Link advapi32 to ensure proper DLL initialization.
* autoload.cc (RegCloseKey): Arbitrarily choose this function as a "seed" to
pull the advapi32 link library in.  So, comment out the autoloading.
* cygtls.cc (_threadinfo::init_thread): Just clear CYGTLS_PADSIZE.
(_threadinfo::remove): Add debugging.
(_threadinfo::find_tls): Ditto.
* cygtls.h (_threadinfo::padding): Make zero length (for now?).
* dcrt0.cc (dll_crt0_0): Move more initialization here from dll_crt0_1.
(dll_crt0_1): See above.
* dtable.h (dtable::lock): Remove commented out critical section locking.
* dtable.h (dtable::init_lock): Remove commented out critical section locking.
* dtable.h (dtable::unlock): Remove commented out critical section locking.
* exceptions.cc (interruptible): bool'ize.
* init.cc (threadfunc_fe): Revert to storing threadfunc at stack bottom.
(munge_threadfunc): Ditto.  Avoid adding overhead to calibration_thread.
(prime_threads): Don't initialize tls stuff.
(dll_entry): Make minor change to initialization order.
* tlsoffsets.h: Regenerate.
* sigproc.cc (wait_sig): Add sanity check for end of process thread exit.
* select.h: Make minor formatting change.
* Makefile.in: Add still more -fomit-frame-pointer functions.
* dtable.h (dtable::lock): New function.
(dtable::unlock): New function.
(dtable::init_lock): New function.
* cygheap.h (HEAP_TLS): Declare new enum value.
(init_cygheap::threadlist): Declare new array.
(init_cygheap::sthreads): Declare new variable.
(cygheap_fdmanip::~cygheap_fdmanip): Use new dtable lock/unlock functions.
(cygheap_fdnew::cygheap_fdnew): Ditto.
(cygheap_fdget::cygheap_fdget): Ditto.
* dtable.cc (dtable_init): Initialize fdtab critical section.
(dtable::fixup_after_fork): Ditto.
(dtable::fixup_after_exec): Ditto.
(dtable::dup2): Use lock/unlock calls to protect access to fdtab.
(dtable::find_fifo): Ditto.
(dtable::fixup_before_fork): Ditto.
(dtable::fixup_before_exec): Ditto.
(dtable::set_file_pointers_for_exec): Ditto.
(dtable::vfork_child_dup): Ditto.
(dtable::vfork_parent_restore): Ditto.
* syscalls.cc (close_all_files): Ditto.
* sync.h (muto::acquired): Declare new function.
(new_muto1): Declare new macro used to specify name of muto storage.
* sync.cc (muto::acquired): Define new function.
* cygthread.cc (cygthread::stub): Remove signal chain removal call since it is
handled during initialization now.
* cygthread.cc (cygthread::simplestub): Remove signal chain removal call since
it is handled during initialization now.
* cygtls.cc (sentry): New class used for locking.  Use throughout.
(_threadinfo::reset_exception): Don't pop stack.
(_threadinfo::find_tls): Move from exceptions.cc.
(_threadinfo::init_thread): Initialize array of threads rather than linked
list.  Take second argument indicating thread function for this thread.
(_threadinfo::remove): Search thread array rather than linked list.  Use sentry
to lock.  Only unlock if we got the lock.
(_threadinfo::find_tls): Ditto for first two.
(handle_threadlist_exception): Handle exceptions when manipulating the thread
list in case of premature thread termination.
(_threadinfo::init_threadlist_exceptions): Ditto.
* cygtls.h (TLS_STACK_SIZE): Decrease size.
(_threadinfo::padding): Add element to avoid overwriting lower part of stack.
(_threadinfo::remove): Add a "wait" argument to control how long we wait for a
lock before removing.
* exceptions.cc (init_exception_handler): Make global.  Take argument to
control exception handler being set.
(ctrl_c_handler): Wait forever when removing self from signal chain.
(_threadinfo::find_tls): Move to cygtls.cc.
(sig_handle): Reorganize detection for thread-specific signals.
* heap.cc (heap_init): Rework slightly.  Make fatal error more verbose.  Remove
malloc initialization since it can't happen during dll attach.
* init.cc (search_for): Move address to search for on stack here.
(threadfunc_ix): Ditto for stack offset.  Make shared so that stack walk
potentially only has to be done once when cygwin processes are running.
(threadfunc_fe): Use standard tls to store thread function (may change back
later).
(calibration_thread): New function.  Potentially called to find threadfunc_ix.
(munge_threadfunc): Search for "search_for" value on stack.  Output warning
when thread func not found on stack.  Use standard tls to store thread
function.
(prime_threads): New function.  Called to prime thread front end.
(dll_entry): Call dll_crt0_0 here when DLL_PROCESS_ATTACH.  Call prime_threads
here.  Try to remove thread from signal list here.
* sigproc.cc (wait_sig): Initialize threadlist exception stuff here.
* thread.cc (pthread::exit): Pass argument to signal list remove function.
* thread.h: Remove obsolete *ResourceLock defines.
* tlsoffsets.h: Regenerate.
* winsup.h (spf): Define temporary debug macro to be deleted later.
* dcrt0.cc (dll_crt0_0): New function, called during DLL initialization.
Mainly consists of code pulled from dll_crt0_1.
(dll_crt0_1): See above.
(_dll_crt0): Wait for initial calibration thread to complete, if appropriate.
Move some stuff to dll_crt0_0.
(initialize_main_tls): Accommodate argument change to
_thread_info::init_thread.
* fork.cc (fork_child): Ditto.
(sync_with_child): Fix debug message.
* external.cc (cygwin_internal): Remove special considerations for
uninitialized dll since initialization happens during dll attach now.
* dlfcn.cc (dlopen): Remove obsolete *ResourceLock calls.
(dlclose): Ditto.
* cygheap.h (init_cygheap::close_ctty): Declare new function.
* cygheap.cc (init_cygheap::close_ctty): Define new function.
* syscalls.cc (close_all_files): Use close_ctty.
(setsid): Ditto.
* cygthread.cc (cygthread::stub): Remove exception initialization.
* cygthread.cc (cygthread::stub): Remove exception initialization.
(cygthread::simplestub): Ditto.
* thread.cc (pthread::thread_init_wrapper): Ditto.
* cygtls.cc (_last_thread): Make static.
(_threadinfo::call2): Initialize exception handler here.
(_threadinfo::find_tls): Move here.
* exceptions.cc (_threadinfo::find_tls): Move.
* dcrt0.cc (__api_fatal): Add prefix info to message here rather than including
it in every call to function.
* winsup.h (api_fatal): Accommodate above change.
* debug.cc (add_handle): Don't do anything if cygheap not around.
(mark_closed): Ditto.
* dll_init.cc (dll_list::detach): Fix debug output.
* fork.cc (sync_with_child): Ditto.
(vfork): Improve debug output.
* heap.cc (heap_init): Ditto.
* exceptions.cc (try_to_debug): Clarify message when debugger attaches.
@
text
@d545 6
a550 2
      while (ms--)
	Sleep (1);
a579 1
  initial_env ();
d725 1
d1049 4
d1055 1
a1055 1
	  kill_pgrp (myself->pgid, -SIGHUP);
@


1.203.4.1
log
@merge from trunk.
@
text
@d534 1
a534 1
initial_env (bool first)
a536 4
  if (!first)
    /* nothing */;
  else if (GetEnvironmentVariable ("CYGWIN_TESTING", buf, sizeof (buf) - 1))
    _cygwin_testing = 1;
a538 5
  static bool NO_COPY did_debugging_stuff;
  if (did_debugging_stuff || (first && wincap.cant_debug_dll_entry ()))
    return;

  did_debugging_stuff = true;
d567 3
d576 1
a576 1
  initial_env (true);
a721 1
  initial_env (false);
@


1.203.4.2
log
@* dcrt0.cc (reent_data): Make global.
* cygwin.din: Reexport reent_data.
* cygtls.cc (_threadinfo::remove): Don't assume that we are removing _my_tls.
* exceptions.cc (setup_handler): Improve debugging output.
(call_signal_handler_now): Remove ill-advised debugger call.
* sigproc.cc (sigcomplete_main): Delete.
(sig_send): Honor FIXME and avoid using main thread's completion event for
everything or suffer races.
(pending_signals::add): Default stored mask to current process mask rather than
mask at time of signal send.
(wait_sig): Add debugging output.
* sigproc.h (sigpacket::mask_storage): Delete.
* fhandler.cc (fhandler_base::open): Revert isfs change.
@
text
@d96 1
a96 1
  struct _reent reent_data;
@


1.203.4.3
log
@* fhandler_socket.cc (fhandler_socket::create_secret_event): Avoid creating
multiple handles.  Always allow event inheritance but set the handle
inheritance appropriately.  Improve error handling.
(fhandler_socket::check_peer_secret_event): Improve error handling.
(fhandler_socket::close_secret_event): Simply call CloseHandle.
(fhandler_socket::set_close_on_exec): Set secret event inheritance.
* configure.in: Remove NEWVFORK default.
* configure: Regenerate.
* dcrt0.cc: Conditionalize vfork stuff throughout.
* dtable.cc: Ditto.
* perthread.h: Ditto.
* pipe.cc (fhandler_pipe::close): Ditto.
* spawn.cc (spawnve): Ditto.
* syscalls.cc (setsid): Ditto.
* exceptions.cc (sigpacket::process): Use macro to refer to vfork pid.
* debug.cc (verify_handle): Define new function.
* debug.h (VerifyHandle): Define new macro.
(verify_handle): Declare new function
* fhandler.cc (fhandler_base::dup): Verify that dup'ed handle is not supposed
to be in use.
(fhandler_base::set_inheritance): Ditto.
(fhandler_base::fork_fixup): Ditto.
* fhandler_socket.cc (fhandler_socket::dup): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::open): Ditto.
* net.cc (set_socket_inheritance): Ditto.
* pinfo.cc (pinfo_fixup_after_exec): Ditto.
* sigproc.cc (proc_subproc): Ditto.
(sig_send): Ditto.
* spawn.cc (spawn_guts): Ditto.
* thread.cc (pthread::init_mainthread): Ditto.
* pipe.cc (fhandler_pipe::close): Close read_state with ForceCloseHandle since
it was protected.
(fhandler_pipe::fixup_after_exec): Protect read_state handle.
(fhandler_pipe::dup): Correctly close open handles on error condition.  Verify
that dup'ed handle is not supposed to be in use.
(fhandler_pipe::create): Protect read_state.
@
text
@a47 1
#ifdef NEWVFORK
a48 1
#endif
a50 1
#ifdef NEWVFORK
a51 1
#endif
a61 1
#ifdef NEWVFORK
a62 1
#endif
a761 1
#ifdef NEWVFORK
d763 1
a764 1
#endif
a990 1
#ifdef NEWVFORK
a996 1
#endif
@


1.203.4.4
log
@* cygtls.cc (_threadinfo::init_thread): Add more local reent stdio
initialization.
* dcrt0.cc (initial_env): Can it really be true that XP doesn't allow attaching
a debugger during DLL attach?  Add temporary workaround.
(dll_crt0_0): Ensure that _impure_ptr stdio is initialized before any threads.
(dll_crt0_1): Move _impure_ptr initialization to dll_crt0_0.
* exceptions.cc (try_to_debug): Reinstate old method for looping while
debugging.
* syscalls.cc (_cygwin_istext_for_stdio): Regularize debugging output.  Remove
hopefully extraneous check.
(setmode_helper): Add debugging output for improbable case.  Use "binary"
rather "raw" for consistency.
@
text
@a549 1
#if 0
a551 4
#else
  if (first)
    return;
#endif
d755 4
a758 1
    pthread::init_mainthread ();
d936 3
a944 6

  if (child_proc_info && child_proc_info->type == _PROC_FORK)
    user_data->forkee = child_proc_info->cygpid;
  else
    __sinit (_impure_ptr);

@


1.202
log
@2004 stuff
@
text
@d38 1
a58 1
static NO_COPY int mypid = 0;
d62 4
a65 1
vfork_save NO_COPY *main_vfork = NULL;
d525 8
a532 4
/* Take over from libc's crt0.o and start the application. Note the
   various special cases when Cygwin DLL is being runtime loaded (as
   opposed to being link-time loaded by Cygwin apps) from a non
   cygwin app via LoadLibrary.  */
d534 1
a534 1
dll_crt0_1 (char *)
d536 31
a566 4
  /* According to onno@@stack.urc.tue.nl, the exception handler record must
     be on the stack.  */
  /* FIXME: Verify forked children get their exception handler set up ok. */
  exception_list cygwin_except_entry;
d568 3
a570 2
  /* Initialize SIGSEGV handling, etc. */
  init_exceptions (&cygwin_except_entry);
d572 3
a574 1
  /* Set the os_being_run global. */
d576 13
a588 2
  device::init ();
  check_sanity_and_sync (user_data);
d590 1
a590 1
  do_global_ctors (&__CTOR_LIST__, 1);
d592 3
a594 5
  /* Nasty static stuff needed by newlib -- point to a local copy of
     the reent stuff.
     Note: this MUST be done here (before the forkee code) as the
     fork copy code doesn't copy the data in libccrt0.cc (that's why we
     pass in the per_process struct into the .dll from libccrt0). */
d596 45
a640 2
  user_data->resourcelocks->Init ();
  user_data->threadinterface->Init ();
d642 1
d644 2
a645 3

  int envc = 0;
  char **envp = NULL;
d683 1
d700 36
a737 1
  cygthread::init ();
a756 6
  (void) SetErrorMode (SEM_FAILCRITICALERRORS);

  /* Initialize events. */
  events_init ();

  cygheap->cwd.init ();
a784 3
  /* Init global well known SID objects */
  cygsid::init ();

a891 46
#ifdef DEBUGGING
void
break_here ()
{
  debug_printf ("break here");
}
#endif

void
initial_env ()
{
  char buf[CYG_MAX_PATH + 1];
#ifdef DEBUGGING
  DWORD len;
  if (GetEnvironmentVariable ("CYGWIN_SLEEP", buf, sizeof (buf) - 1))
    {
      DWORD ms = atoi (buf);
      buf[0] = '\0';
      len = GetModuleFileName (NULL, buf, CYG_MAX_PATH);
      console_printf ("Sleeping %d, pid %u %s\n", ms, GetCurrentProcessId (), buf);
      Sleep (ms);
    }
  if (GetEnvironmentVariable ("CYGWIN_DEBUG", buf, sizeof (buf) - 1))
    {
      char buf1[CYG_MAX_PATH + 1];
      len = GetModuleFileName (NULL, buf1, CYG_MAX_PATH);
      strlwr (buf1);
      strlwr (buf);
      char *p = strchr (buf, ':');
      if (!p)
	p = (char *) "gdb.exe -nw";
      else
	*p++ = '\0';
      if (strstr (buf1, buf))
	{
	  error_start_init (p);
	  try_to_debug ();
	  break_here ();
	}
    }
#endif

  if (GetEnvironmentVariable ("CYGWIN_TESTING", buf, sizeof (buf) - 1))
    _cygwin_testing = 1;
}

a896 1
      _threadinfo::init ();
d898 1
a898 1
      _main_tls->init_thread (padding);
d908 1
a908 1

d912 6
a917 3
  initial_env ();
  char zeros[max (CYGTLS_PADSIZE, sizeof (child_proc_info->zero))] = {0};
  static NO_COPY STARTUPINFO si;
d922 2
a923 6
  init_console_handler ();
  init_global_security ();
  if (!DuplicateHandle (GetCurrentProcess (), GetCurrentProcess (),
		       GetCurrentProcess (), &hMainProc, 0, FALSE,
			DUPLICATE_SAME_ACCESS))
    hMainProc = GetCurrentProcess ();
d925 1
a925 50
  DuplicateHandle (hMainProc, GetCurrentThread (), hMainProc,
		   &hMainThread, 0, false, DUPLICATE_SAME_ACCESS);

  GetStartupInfo (&si);
  child_proc_info = (child_info *) si.lpReserved2;
  if (si.cbReserved2 < EXEC_MAGIC_SIZE || !child_proc_info
      || memcmp (child_proc_info->zero, zeros,
		 sizeof (child_proc_info->zero)) != 0)
    child_proc_info = NULL;
  else
    {
      if ((child_proc_info->intro & OPROC_MAGIC_MASK) == OPROC_MAGIC_GENERIC)
	multiple_cygwin_problem ("proc", child_proc_info->intro, 0);
      else if (child_proc_info->intro == PROC_MAGIC_GENERIC
	       && child_proc_info->magic != CHILD_INFO_MAGIC)
	multiple_cygwin_problem ("proc", child_proc_info->magic,
				 CHILD_INFO_MAGIC);
      else if (child_proc_info->cygheap != (void *) &_cygheap_start)
	multiple_cygwin_problem ("cygheap", (DWORD) child_proc_info->cygheap,
				 (DWORD) &_cygheap_start);
      unsigned should_be_cb = 0;
      switch (child_proc_info->type)
	{
	  case _PROC_FORK:
	    user_data->forkee = child_proc_info->cygpid;
	    should_be_cb = sizeof (child_info_fork);
	    /* fall through */;
	  case _PROC_SPAWN:
	  case _PROC_EXEC:
	    if (!should_be_cb)
	      should_be_cb = sizeof (child_info);
	    if (should_be_cb != child_proc_info->cb)
	      multiple_cygwin_problem ("proc size", child_proc_info->cb, should_be_cb);
	    else if (sizeof (fhandler_union) != child_proc_info->fhandler_union_cb)
	      multiple_cygwin_problem ("fhandler size", child_proc_info->fhandler_union_cb, sizeof (fhandler_union));
	    else
	      {
		cygwin_user_h = child_proc_info->user_h;
		mypid = child_proc_info->cygpid;
		break;
	      }
	  default:
	    system_printf ("unknown exec type %d", child_proc_info->type);
	    /* intentionally fall through */
	  case _PROC_WHOOPS:
	    child_proc_info = NULL;
	    break;
	}
    }
  
d931 2
a932 2
  initialize_main_tls (zeros);
  dll_crt0_1 (zeros);
d992 1
d1113 2
a1114 1
  __small_vsprintf (buf, fmt, ap);
@


1.202.2.1
log
@* Makefile.in: Add still more -fomit-frame-pointer functions.
* dtable.h (dtable::lock): New function.
(dtable::unlock): New function.
(dtable::init_lock): New function.
* cygheap.h (HEAP_TLS): Declare new enum value.
(init_cygheap::threadlist): Declare new array.
(init_cygheap::sthreads): Declare new variable.
(cygheap_fdmanip::~cygheap_fdmanip): Use new dtable lock/unlock functions.
(cygheap_fdnew::cygheap_fdnew): Ditto.
(cygheap_fdget::cygheap_fdget): Ditto.
* dtable.cc (dtable_init): Initialize fdtab critical section.
(dtable::fixup_after_fork): Ditto.
(dtable::fixup_after_exec): Ditto.
(dtable::dup2): Use lock/unlock calls to protect access to fdtab.
(dtable::find_fifo): Ditto.
(dtable::fixup_before_fork): Ditto.
(dtable::fixup_before_exec): Ditto.
(dtable::set_file_pointers_for_exec): Ditto.
(dtable::vfork_child_dup): Ditto.
(dtable::vfork_parent_restore): Ditto.
* syscalls.cc (close_all_files): Ditto.
* sync.h (muto::acquired): Declare new function.
(new_muto1): Declare new macro used to specify name of muto storage.
* sync.cc (muto::acquired): Define new function.
* cygthread.cc (cygthread::stub): Remove signal chain removal call since it is
handled during initialization now.
* cygthread.cc (cygthread::simplestub): Remove signal chain removal call since
it is handled during initialization now.
* cygtls.cc (sentry): New class used for locking.  Use throughout.
(_threadinfo::reset_exception): Don't pop stack.
(_threadinfo::find_tls): Move from exceptions.cc.
(_threadinfo::init_thread): Initialize array of threads rather than linked
list.  Take second argument indicating thread function for this thread.
(_threadinfo::remove): Search thread array rather than linked list.  Use sentry
to lock.  Only unlock if we got the lock.
(_threadinfo::find_tls): Ditto for first two.
(handle_threadlist_exception): Handle exceptions when manipulating the thread
list in case of premature thread termination.
(_threadinfo::init_threadlist_exceptions): Ditto.
* cygtls.h (TLS_STACK_SIZE): Decrease size.
(_threadinfo::padding): Add element to avoid overwriting lower part of stack.
(_threadinfo::remove): Add a "wait" argument to control how long we wait for a
lock before removing.
* exceptions.cc (init_exception_handler): Make global.  Take argument to
control exception handler being set.
(ctrl_c_handler): Wait forever when removing self from signal chain.
(_threadinfo::find_tls): Move to cygtls.cc.
(sig_handle): Reorganize detection for thread-specific signals.
* heap.cc (heap_init): Rework slightly.  Make fatal error more verbose.  Remove
malloc initialization since it can't happen during dll attach.
* init.cc (search_for): Move address to search for on stack here.
(threadfunc_ix): Ditto for stack offset.  Make shared so that stack walk
potentially only has to be done once when cygwin processes are running.
(threadfunc_fe): Use standard tls to store thread function (may change back
later).
(calibration_thread): New function.  Potentially called to find threadfunc_ix.
(munge_threadfunc): Search for "search_for" value on stack.  Output warning
when thread func not found on stack.  Use standard tls to store thread
function.
(prime_threads): New function.  Called to prime thread front end.
(dll_entry): Call dll_crt0_0 here when DLL_PROCESS_ATTACH.  Call prime_threads
here.  Try to remove thread from signal list here.
* sigproc.cc (wait_sig): Initialize threadlist exception stuff here.
* thread.cc (pthread::exit): Pass argument to signal list remove function.
* thread.h: Remove obsolete *ResourceLock defines.
* tlsoffsets.h: Regenerate.
* winsup.h (spf): Define temporary debug macro to be deleted later.
* dcrt0.cc (dll_crt0_0): New function, called during DLL initialization.
Mainly consists of code pulled from dll_crt0_1.
(dll_crt0_1): See above.
(_dll_crt0): Wait for initial calibration thread to complete, if appropriate.
Move some stuff to dll_crt0_0.
(initialize_main_tls): Accommodate argument change to
_thread_info::init_thread.
* fork.cc (fork_child): Ditto.
(sync_with_child): Fix debug message.
* external.cc (cygwin_internal): Remove special considerations for
uninitialized dll since initialization happens during dll attach now.
* dlfcn.cc (dlopen): Remove obsolete *ResourceLock calls.
(dlclose): Ditto.
* cygheap.h (init_cygheap::close_ctty): Declare new function.
* cygheap.cc (init_cygheap::close_ctty): Define new function.
* syscalls.cc (close_all_files): Use close_ctty.
(setsid): Ditto.
* cygthread.cc (cygthread::stub): Remove exception initialization.
* cygthread.cc (cygthread::stub): Remove exception initialization.
(cygthread::simplestub): Ditto.
* thread.cc (pthread::thread_init_wrapper): Ditto.
* cygtls.cc (_last_thread): Make static.
(_threadinfo::call2): Initialize exception handler here.
(_threadinfo::find_tls): Move here.
* exceptions.cc (_threadinfo::find_tls): Move.
* dcrt0.cc (__api_fatal): Add prefix info to message here rather than including
it in every call to function.
* winsup.h (api_fatal): Accommodate above change.
* debug.cc (add_handle): Don't do anything if cygheap not around.
(mark_closed): Ditto.
* dll_init.cc (dll_list::detach): Fix debug output.
* fork.cc (sync_with_child): Ditto.
(vfork): Improve debug output.
* heap.cc (heap_init): Ditto.
* exceptions.cc (try_to_debug): Clarify message when debugger attaches.
@
text
@a37 1
#include "heap.h"
d58 1
d62 1
a62 4
vfork_save NO_COPY *main_vfork;

static int NO_COPY envc;
char NO_COPY **envp;
d522 4
a525 8
#ifdef DEBUGGING
void
break_here ()
{
  debug_printf ("break here");
}
#endif

d527 1
a527 1
initial_env ()
d529 4
a532 31
  char buf[CYG_MAX_PATH + 1];
#ifdef DEBUGGING
  DWORD len;
  if (GetEnvironmentVariable ("CYGWIN_SLEEP", buf, sizeof (buf) - 1))
    {
      DWORD ms = atoi (buf);
      buf[0] = '\0';
      len = GetModuleFileName (NULL, buf, CYG_MAX_PATH);
      console_printf ("Sleeping %d, pid %u %s\n", ms, GetCurrentProcessId (), buf);
      while (ms--)
	Sleep (1);
    }
  if (GetEnvironmentVariable ("CYGWIN_DEBUG", buf, sizeof (buf) - 1))
    {
      char buf1[CYG_MAX_PATH + 1];
      len = GetModuleFileName (NULL, buf1, CYG_MAX_PATH);
      strlwr (buf1);
      strlwr (buf);
      char *p = strchr (buf, ':');
      if (!p)
	p = (char *) "gdb.exe -nw";
      else
	*p++ = '\0';
      if (strstr (buf1, buf))
	{
	  error_start_init (p);
	  try_to_debug ();
	  break_here ();
	}
    }
#endif
d534 2
a535 3
  if (GetEnvironmentVariable ("CYGWIN_TESTING", buf, sizeof (buf) - 1))
    _cygwin_testing = 1;
}
d537 1
a537 3
void __stdcall
dll_crt0_0 ()
{
d539 2
a540 1
  initial_env ();
d542 1
a542 3
  char zeros[sizeof (child_proc_info->zero)] = {0};
  static NO_COPY STARTUPINFO si;
  int mypid = 0;
d544 5
a548 1
  _my_tls.stackptr = NULL;
d550 2
a551 6
  init_console_handler ();
  init_global_security ();
  if (!DuplicateHandle (GetCurrentProcess (), GetCurrentProcess (),
		       GetCurrentProcess (), &hMainProc, 0, FALSE,
			DUPLICATE_SAME_ACCESS))
    hMainProc = GetCurrentProcess ();
d553 1
a553 2
  DuplicateHandle (hMainProc, GetCurrentThread (), hMainProc,
		   &hMainThread, 0, false, DUPLICATE_SAME_ACCESS);
d555 2
a556 50
  GetStartupInfo (&si);
  child_proc_info = (child_info *) si.lpReserved2;
  if (si.cbReserved2 < EXEC_MAGIC_SIZE || !child_proc_info
      || memcmp (child_proc_info->zero, zeros,
		 sizeof (child_proc_info->zero)) != 0)
    child_proc_info = NULL;
  else
    {
      if ((child_proc_info->intro & OPROC_MAGIC_MASK) == OPROC_MAGIC_GENERIC)
	multiple_cygwin_problem ("proc", child_proc_info->intro, 0);
      else if (child_proc_info->intro == PROC_MAGIC_GENERIC
	       && child_proc_info->magic != CHILD_INFO_MAGIC)
	multiple_cygwin_problem ("proc", child_proc_info->magic,
				 CHILD_INFO_MAGIC);
      else if (child_proc_info->cygheap != (void *) &_cygheap_start)
	multiple_cygwin_problem ("cygheap", (DWORD) child_proc_info->cygheap,
				 (DWORD) &_cygheap_start);
      unsigned should_be_cb = 0;
      switch (child_proc_info->type)
	{
	  case _PROC_FORK:
	    user_data->forkee = child_proc_info->cygpid;
	    should_be_cb = sizeof (child_info_fork);
	    /* fall through */;
	  case _PROC_SPAWN:
	  case _PROC_EXEC:
	    if (!should_be_cb)
	      should_be_cb = sizeof (child_info);
	    if (should_be_cb != child_proc_info->cb)
	      multiple_cygwin_problem ("proc size", child_proc_info->cb, should_be_cb);
	    else if (sizeof (fhandler_union) != child_proc_info->fhandler_union_cb)
	      multiple_cygwin_problem ("fhandler size", child_proc_info->fhandler_union_cb, sizeof (fhandler_union));
	    else
	      {
		cygwin_user_h = child_proc_info->user_h;
		mypid = child_proc_info->cygpid;
		break;
	      }
	  default:
	    system_printf ("unknown exec type %d", child_proc_info->type);
	    /* intentionally fall through */
	  case _PROC_WHOOPS:
	    child_proc_info = NULL;
	    break;
	}
    }

  device::init ();
  winpids::init ();
  do_global_ctors (&__CTOR_LIST__, 1);
a593 1
	    envp = spawn_info->moreinfo->envp;
a609 28
  _threadinfo::init ();
}

/* Take over from libc's crt0.o and start the application. Note the
   various special cases when Cygwin DLL is being runtime loaded (as
   opposed to being link-time loaded by Cygwin apps) from a non
   cygwin app via LoadLibrary.  */
static void
dll_crt0_1 (char *)
{
  /* According to onno@@stack.urc.tue.nl, the exception handler record must
     be on the stack.  */
  /* FIXME: Verify forked children get their exception handler set up ok. */
  exception_list cygwin_except_entry;

  /* Initialize SIGSEGV handling, etc. */
  init_exceptions (&cygwin_except_entry);
  check_sanity_and_sync (user_data);
  malloc_init ();

  /* Nasty static stuff needed by newlib -- point to a local copy of
     the reent stuff.
     Note: this MUST be done here (before the forkee code) as the
     fork copy code doesn't copy the data in libccrt0.cc (that's why we
     pass in the per_process struct into the .dll from libccrt0). */

  user_data->resourcelocks->Init ();
  user_data->threadinterface->Init ();
d776 46
d827 1
d829 1
a829 1
      _main_tls->init_thread (padding, NULL);
d839 1
a839 1
  
d843 3
a845 6
  extern HANDLE sync_startup;
  if (sync_startup)
    {
      (void) WaitForSingleObject (sync_startup, INFINITE);
      CloseHandle (sync_startup);
    }
d850 6
a855 2
  if (child_proc_info && child_proc_info->type == _PROC_FORK)
    user_data->forkee = child_proc_info->cygpid;
d857 50
a906 1
  char padding[CYGTLS_PADSIZE];
d912 2
a913 2
  initialize_main_tls (padding);
  dll_crt0_1 (padding);
d1093 1
a1093 2
  int n = __small_sprintf (buf, "%P (%u): *** ", cygwin_pid (GetCurrentProcessId ()));
  __small_vsprintf (buf + n, fmt, ap);
@


1.202.2.2
log
@* Makefile.in (DLL_IMPORTS): Link advapi32 to ensure proper DLL initialization.
* autoload.cc (RegCloseKey): Arbitrarily choose this function as a "seed" to
pull the advapi32 link library in.  So, comment out the autoloading.
* cygtls.cc (_threadinfo::init_thread): Just clear CYGTLS_PADSIZE.
(_threadinfo::remove): Add debugging.
(_threadinfo::find_tls): Ditto.
* cygtls.h (_threadinfo::padding): Make zero length (for now?).
* dcrt0.cc (dll_crt0_0): Move more initialization here from dll_crt0_1.
(dll_crt0_1): See above.
* dtable.h (dtable::lock): Remove commented out critical section locking.
* dtable.h (dtable::init_lock): Remove commented out critical section locking.
* dtable.h (dtable::unlock): Remove commented out critical section locking.
* exceptions.cc (interruptible): bool'ize.
* init.cc (threadfunc_fe): Revert to storing threadfunc at stack bottom.
(munge_threadfunc): Ditto.  Avoid adding overhead to calibration_thread.
(prime_threads): Don't initialize tls stuff.
(dll_entry): Make minor change to initialization order.
* tlsoffsets.h: Regenerate.
* sigproc.cc (wait_sig): Add sanity check for end of process thread exit.
* select.h: Make minor formatting change.
@
text
@d580 1
a593 2
  (void) SetErrorMode (SEM_FAILCRITICALERRORS);

a595 2

  int mypid = 0;
a643 1
  cygthread::init ();
a698 7

  /* Initialize events */
  events_init ();

  /* Init global well known SID objects */
  cygsid::init ();
  cygheap->cwd.init ();
d713 2
a717 3
  /* Initialize SIGSEGV handling, etc. */
  init_exceptions (&cygwin_except_entry);

d728 1
d748 6
d781 3
@


1.202.2.3
log
@* cygtls.cc (_threadinfo::init_thread): Correct thinko which caused thread list
to be allocated every time.
* cygtls.h (CYGTLS_PADSIZE): Define as const int.
* sync.h: Make multiple inclusion safe.
(muto::next): Eliminate.
(muto::exiting_thread): New variable.
(muto::set_exiting_thread): New function.
(new_muto): Change to use different section for mutos since c++ give
inexplicable warning in some cases otherwise.
(new_muto1): Ditto.
* dcrt0.cc (do_exit): Call muto::set_exiting_thread here.
* sync.cc (muto_start): Eliminate.
(muto::acquire): Always give exiting thread a lock.  Never give thread a lock
if exiting.
(muto::release): Ditto for releasing.
* dtable.cc (dtable::init_lock): Unline function and define here.
* dtable.h (lock_cs): Define as a muto since critical sections seem to work
oddly on Windows Me.
(lock): Accommodate switch to muto.
(unlock): Ditto.
* exceptions.cc (setup_handler): Don't worry about acquiring mutos since that
hasn't mattered for a long time.
(signal_exit): Ditto: muto stuff will be handled automatically on exit now.
@
text
@a993 1
  muto::set_exiting_thread ();
@


1.202.2.4
log
@* autoload.cc (TryEnterCriticalSection): Remove.
* dcrt0.cc (dll_crt0_0): Delete inappropriate setting of _my_tls.stackptr to
NULL since it has really bad consequences.  Make 'si' an automatic variable.
@
text
@d579 3
a594 1
  STARTUPINFO si;
@


1.202.2.5
log
@* gentls_offsets: Reinstate unlink of temp files.
@
text
@a1044 4
	  siginfo_t si;
	  si.si_signo = -SIGHUP;
	  si.si_code = SI_KERNEL;
	  si.si_pid = si.si_uid = si.si_errno = 0;
d1047 1
a1047 1
	  kill_pgrp (myself->pgid, si);
@


1.202.2.6
log
@* cygtls.h (_threadinfo::threadkill): New element.
(_threadinfo::set_threadkill): Declare new function.
(_threadinfo::reset_threadkill): Declare new function.
* dcrt0.cc (dcrt0_1): Call here so that it will be possible to attach to
running process with #(*& Windows Me/9x.
(initial_env): Try to initialize strace if uninitialized.
* gendef: Don't zero signal if threadkill is set since that will happen in the
called function.
* signal.cc (sigwait): Ensure cleanup in error conditions.
* sigproc.cc (sig_send): Clear packet mask storage.
(wait_subproc): Fill in child exit code in siginfo_t structure.
* thread.cc (pthread_kill): Set threadkill flag.
* tlsoffsets.h: Regenerate.  Throughout, use siginfo_t to fill out all signal
information for "kernel" signals.
* cygtls.h (_threadinfo::set_siginfo): Declare new function.
* cygtls.cc (_threadinfo::set_siginfo): Define new function.
* dcrt0.cc (do_exit): Accommodate siginfo_t considerations.
* exceptions.cc (handle_exceptions): Ditto.
(sig_handle_tty_stop): Ditto.
(ctrl_c_handler): Use killsys() to send signal.
(sigpacket::process): Rename from sig_handle.  Use siginfo_t field from
sigpacket for everything.
(tty_min::kill_pgrp): Accommodate siginfo_t considerations.
(fhandler_termios::bg_check): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::ioctl): Use killsys() to send signal.
* signal.cc (kill_worker): Rewrite to use siginfo_t second argument.
(kill_pgrp): Ditto.
(kill0): Define new function pulled from kill().
(kill): Rewrite as frontend to kill0.
(killsys): Define new function.
* sigproc.cc (sigelem): Eliminate.
(sigpacket): Move to sigproc.h.  Subsume sigelem.
(pending_signals): Use sigpacket rather than sigelem for everything.
(sig_clear): Ditto.
(wait_sig): Ditto.
(sig_send): Rewrite to use siginfo_t argument.
(sig_send): New function wratpper to sig_send with siginfo_t argument.
(wait_subproc): Accommodate siginfo_t considerations.
* thread.cc (pthread_kill): Ditto.
* sigproc.h (sigpacket): Move here.
(sigpacket::process): Declare "new" function.
(sig_handle): Eliminate declaration.
(sig_send): Declare with new paramaters.
(killsys): Declare new function.
(kill_pgrp): Declare.
* winsup.h: Move some signal-specific stuff to sigproc.h.
* include/cygwin/signal.h: Tweak some siginfo_t stuff.
* fhandler_console.cc (fhandler_console::close): Remove obsolete test for
vfork_cleanup.
* pipe.cc (fhandler_pipe::close): Add comment.
* cygheap.cc (init_cygheap::close_ctty): Don't NULL ctty if it is still active.
* dtable.cc (dtable::vfork_parent_restore): Store ctty_on_hold prior to calling
close_all_files since it will be zeroed.
@
text
@d545 2
a546 6
      Sleep (ms);
      if (!strace.active)
	{
	  strace.inited = 0;
	  strace.hello ();
	}
d576 1
a721 1
  initial_env ();
@


1.201
log
@* cygheap.h (init_cygheap): Play more vfork shell games and move ctty_on_hold
and open_fhs_on_hold (back) here.
* dcrt0.cc (_dll_crt0): Just set impure_ptr_ptr here and let later
initialization deal with tls.
* dtable.cc (dtable::vfork_child_fixup): Move ctty considerations here.
(dtable:vfork_parent_restore): And here.
* fork.cc (vfork): Reflect change to ctty handling.
* perthread.h (vfork_save::fhctty): Eliminate.
* cygwin.din: Make more exports NOSIGFE that will never be interrupted by a
signal.
* init.cc (dll_entry): Set stackptr to NULL to catch problems earlier.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003 Red Hat, Inc.
@


1.200
log
@* dcrt0.cc (reent_data): Reluctantly resurrect.
(__cygwin_user_data::impure_ptr): Ditto.
(_dll_crt0): Reluctantly initialize _impure_ptr here.
(initialize_main_tls): Eliminate local_clib initialization since it now happens
in init_thread.
* init.cc (dll_entry): Reluctantly remove code which set _impure_ptr to the
main thread's local_clib.
* perthread.h (reent_data): Remove obsolete declaration.
* sigproc.cc (proc_subproc): Add more debugging output.
(get_proc_lock): Ditto.
*dcrt0.cc (dll_crt0_1): Allocate argv[0] via malloc since main thread could
exit.
@
text
@a918 1
  char padding[CYGTLS_PADSIZE];
d923 1
a923 1
      *(user_data->impure_ptr_ptr) = initialize_main_tls (padding);
@


1.199
log
@* exceptions.cc (set_signal_mask): Redefine to not pass by address.  Report
calculated mask in debugging output.
* sigproc.h (set_signal_mask): Reflect above change in declaration.
* path.cc (mount_item::build_win32): Take path apart before feeding it to
fnmunge.  Throughout, change use of _reent_winsup()-> to _my_tls.locals.
instead.  Throughout, remove obsolete MT_SAFE/_CYG_THREAD_FAILSAFE
considerations.  Througout, add cygtls.h include.
* Makefile.in (DLL_OFILES): Add cygtls.o.  Add some more objects to the
-fomit-frame-pointer list.
* acconfig.h: Remove obsolete settings.
* config.h.in: Ditto.
* bsdlib.cc: Add cygtls.h include.
* configure.in: Remove --enable-extra-threadsafe-checking.
* configure: Regenerate.
* cygtls.h (_local_storage): New struct renamed from _winsup_t (sic).
(_threadinfo:local_clib): Add new field.
(_threadinfo::locals): Ditto.
(_threadinfo::init_thread): Accept second _reent * argument.
(_threadinfo::call): Define as regparm.
(CYGTLS_PADSIZE): Remove unnecessary slop.
(_getreent): Define as a macro.
* thread.h: Remove _CYG_THREAD_FAILSAFE and MT_SAFE stuff.
(_winsup_t): Move to cygtls.h.
(ResourceLocks::ResourceLocks): Eliminate empty constructor.
(MTinterface::reents): Eliminate.
(MTinterface::thread_self_key): Eliminate.
(MTinterface::MTinterface): Eliminate.
* dcrt0.cc: Include stdio.h for _impure_ptr initialization.
(do_global_ctors): Remove run_ctors_p (sic) considerations.  Don't call atexit
here.
(__main): Initialize destructors for user here.
(dll_crt0_1): Accept a dummy argument.  Don't call init_thread here.  Don't set
_impure_ptr here.  Call do_global_ctors after more things have been
initialized.
(_dll_crt0): Define zeros buffer as max of needed size of CYGTLS_PADSIZE so
that it can be used for two purposes while minimizing stack usage.  Initialize
_impure_ptr specifically, for speed.  Call dll_crt0_1 with buffer argument.
(cygwin_dll_init): Call dll_crt0_1 with dummy argument.
* dtable.cc (dtable::find_unused_handle): Remove call to AssertResourceOwner.
* exceptions.cc: Move _threadinfo stuff to new file.
* cygtls.cc: New file.
* gentls_offsets: Accommodate increasing complexity of cygtls.h.
* hires.h (hires_base::~hires_base): Remove.
* init.cc (dll_entry): Remove setting of reents.
* thread.cc: Remove syslog.h include.
(__getreent): Simplify to use _my_tls.
(_reent_winsup): Delete.
(AssertResourceOwner): Delete.
(MTinterface::Init): Remove setting of _clib and _winsup, with all that
entails.
(MTinterface::fixup_after_fork): Ditto.
(pthread::thread_init_wrapper): Ditto.  Also remove call to
set_tls_self_pointer.
(pthread::set_tls_self_pointer): Eliminate.
(pthread::get_tls_self_pointer): Just return _my_tls.tid;
(__reent_t::init_clib): Eliminate.
* tlsoffsets.h: Regenerate.
@
text
@d93 1
d114 1
a114 1
   /* impure_ptr */ NULL,
d704 1
a704 1
	  char *new_argv0 = (char *) alloca (CYG_MAX_PATH);
d706 1
a706 1
	  __argv[0] = new_argv0;
a829 3
      _main_tls->local_clib._stdin = &_main_tls->local_clib.__sf[0];
      _main_tls->local_clib._stdout = &_main_tls->local_clib.__sf[1];
      _main_tls->local_clib._stderr = &_main_tls->local_clib.__sf[2];
d907 6
a912 1
  user_data->impure_ptr = _impure_ptr = initialize_main_tls (zeros);
@


1.198
log
@* cygthread.cc (cygthread::stub): Revert previous change and again subsume
cygthread::stub2.  Just return from function now since ExitThread is guaranteed
by automatic _threadinfo wrapper.  Define as per ThreadProc convention.
(cygthread::stub2): Remove.
(cygthread::simplestub): Perform similar operations to cygthread::stub.
(cygthread::simplestub2): Remove.
* cygthread.h (cygthread::stub): Declare as per ThreadProc convention.
(cygthread::stub2): Remove declaration.
(cygthread::simplestub): Declare as per ThreadProc convention.
(cygthread::simplestub2): Remove declaration.
* cygtls.h (_threadinfo::call): Define first argument as per ThreadProc
convention.
(_threadinfo::call2): Ditto.
(_tlsbase): Define as char * pointer.
(_tlstop): New definition.
(_main_tls): Define here.
* dcrt0.cc (alloc_stack): Revert previous change which called init_thread since
information would be overwritten by fork later anyway.
(dll_crt0_1): Use _tlsbase and _tlstop for setting stack bottom, top.
* exceptions.cc: Move _main_tls declaration to cygtls.h.
(_threadinfo::call): Define first argument as per ThreadProc convention.
(_threadinfo::call2): Call ExitThread with thread function return value.
(_threadinfo::init_thread): Don't initialize cygtls to zero if input arg is
NULL.
* fork.cc (fork_child): Reset _main_tls here.  Reinitialize parts of _my_tls
after copying data from parent.
* init.cc (threadfunc_fe): New function.  Front-end for all threads created in
cygwin processes.
(munge_threadfunc): New function.
(dll_entry): Call munge_threadfunc to force the call of a thread wrapper.
* thread.cc (pthread::thread_init_wrapper): Perform similar operations to
cygthread::stub.
(pthread::thread_init_wrapper2): Remove.
* thread.h (pthread::thread_init_wrapper): Declare as per ThreadProc
convention.
(pthread::thread_init_wrapper2): Remove declaration.
* window.cc (Winmain): Just return from function now since ExitThread is
guaranteed by automatic _threadinfo wrapper.
@
text
@d13 1
a92 1
  struct _reent reent_data = _REENT_INIT(reent_data);
d113 1
a113 1
   /* impure_ptr */ &reent_data,
d139 2
a140 6
  if (!force)
    {
      if (user_data->forkee || user_data->run_ctors_p)
	return;		// inherit constructed stuff from parent pid
      user_data->run_ctors_p = 1;
    }
d145 1
a145 1
  void (**pfunc)() = in_pfunc;
a150 3

  if (user_data->magic_biscuit == SIZEOF_PER_PROCESS)
    atexit (do_global_dtors);
d526 1
a526 1
dll_crt0_1 ()
a527 4
  char padding[CYGTLS_PADSIZE];
  _main_tls = &_my_tls;
  _main_tls->init_thread (padding);

a548 2
  _impure_ptr = &reent_data;

a760 4
  /* Flush signals and ensure that signal thread is up and running. Can't
     do this for noncygwin case since the signal thread is blocked due to
     LoadLibrary serialization. */
  wait_for_sigthread ();
d766 5
d821 15
d846 1
a846 1
  char zeros[sizeof (fork_info->zero)] = {0};
d865 2
a866 1
      || memcmp (child_proc_info->zero, zeros, sizeof (zeros)) != 0)
d908 3
a910 3

  _threadinfo::init ();
  dll_crt0_1 ();
d916 1
d921 1
a921 1
      *(user_data->impure_ptr_ptr) = &reent_data;
d945 1
a945 1
  dll_crt0_1 ();
d952 1
@


1.197
log
@* dcrt0.cc (alloc_stack): Move _main_tls if stack is relocated.
@
text
@d523 1
a523 5
    {
      alloc_stack_hard_way (ci, b + sizeof (b) - 1);
      _main_tls = &_my_tls;
      _main_tls->init_thread (NULL);
    }
d664 2
a665 2
	  asm ("movl %0,%%fs:4" : : "r" (fork_info->stackbottom));
	  asm ("movl %0,%%fs:8" : : "r" (fork_info->stacktop));
@


1.196
log
@* fhandler_tty.cc (fhandler_tty_common::dup): Just copy cygheap->ctty to child
if duping the current ctty.
(fhandler_tty_common::close): Move debugging statement earlier in function.
(fhandler_tty_slave::close): Return success when closing ctty.
* syscalls.cc (close_all_files): Avoid calling fhandler_tty_slave close method
so that open_fhs will not be decremented when closing cygheap ctty.
(setsid): Ditto.
* dcrt0.cc (do_exit): Reorganize to avoid leaving a critical section active
after vfork.
* fhandler.h (fhandler_tty_slave::get_unit): Remove regparm parameter since it
can't work in a virtualized function.
@
text
@d57 10
d520 2
a521 2
  if (sm.AllocationBase != ci->stacktop)
    alloc_stack_hard_way (ci, b + sizeof (b) - 1);
d523 5
a527 1
    ci->stacksize = 0;
a530 10

static NO_COPY int mypid = 0;
int __argc_safe;
int _declspec(dllexport) __argc;
char _declspec(dllexport) **__argv;
vfork_save NO_COPY *main_vfork = NULL;

extern "C" void __sinit (_reent *);

_threadinfo NO_COPY *_main_tls;
@


1.195
log
@Change use of BOOL, TRUE, FALSE to bool, true, false, as appropriate,
throughout.
* tty.cc (tty::common_init): Remove call to SetKernelObjectSecurity and edit
some comments.
* cygheap.h (init_cygheap::ctty): Add new element.
* devices.in (device::parse): Remove special handling for /dev/tty.
* devices.cc: Regenerate.
* dtable.cc (build_fh_pc): Don't reset /dev/tty device.  Let the device opener
do that.
* fhandler_termios.cc (tty_min::set_ctty): Redefine to _pinfo class.
* fhandler_tty.cc (fhandler_tty_common::set_close_on_exec): Avoid setting
noninherit flag for ctty.
* tty.h: Move BOOLs to bools.
(tty_min::set_ctty): Redeclare to _pinfo class.
* pinfo.cc (_pinfo::set_ctty): Define new function based on tty_min::set_ctty.
Change first argument from tty number to tty_min class.
* pinfo.h (_pinfo::set_ctty): Declare.
* fhandler_console.cc (fhandler_console::get_tty_stuff): Reflect move of
set_ctty to _pinfo class.
* fhandler_tty.cc (fhandler_tty_slave::open): Treat FH_TTY specially.  Use
saved cygheap value if it exists.  Otherwise convert to real device and save on
first time open.
(fhandler_tty_common::dup): Potentially set controlling tty if duping a slave
tty.
* syscalls.cc (setsid): Close controlling tty in cygheap.
* tty.cc: Change some BOOLs to bools.
@
text
@d955 10
a970 1
  EnterCriticalSection (&exit_lock);
a971 7

  syscall_printf ("do_exit (%d)", n);

  vfork_save *vf = vfork_storage.val ();
  if (vf != NULL && vf->pid < 0)
    vf->restore_exit (status);

@


1.194
log
@* cygtls.h: Add more "don't parse this" guards.
(_threadinfo::init_thread): Rename from 'init'.
(_threadinfo::init): Declare new function.
(_threadinfo::protect_linked_list): Declare new critical section.
* dcrt0.cc (dll_crt0_1): Call init_thread to initialize thread stuff.
(_dll_crt0): Call _threadinfo::init prior to invoking dll_crt0_1.
* exceptions.cc (_threadinfo::init_thread): Rename from 'init'.
(_threadinfo::init): Define new function.  Protect linked list manipulation
with new critical section.
(_threadinfo::call): Reflect function name change.
(_threadinfo::remove): Protect linked list manipulation with new critical
section
* gentls_offsets: Rework to allow multi-line "don't parse this" protection.
* init.cc (dll_entry): Don't remove threads info stuff here since the remove
function uses a critical section which can't be used during thread creation or
destruction.
* thread.cc (pthread::exit): Call _threadinfo remove function here.
@
text
@d54 1
a54 1
bool allow_glob = TRUE;
d106 1
a106 1
  int __declspec (dllexport) _check_for_executable = TRUE;
d156 1
a156 1
static int __stdcall
d173 1
a173 1
      return FALSE;
d183 1
a183 1
      return FALSE;
d191 1
a191 1
      return FALSE;
d202 1
a202 1
      return FALSE;
d208 1
a208 1
  return TRUE;
d772 1
a772 1
  ignore_case_with_glob = FALSE;
d946 1
a946 1
  do_global_ctors (user_data->ctors, FALSE);
@


1.193
log
@* cygthread.cc (cygthread::stub): Properly establish _threadinfo environment.
(cygthread::stub2): New function.
(cygthread::simplestub): Ditto.
(cygthread::simplestub2): New function.
* cygthread.h (cygthread::stub2): Declare new function.
(cygthread::simplestub2): Ditto.
* cygtls.h (_threadinfo::call): Declare new function.
(_threadinfo::call2): Ditto.
* dcrt0.cc (dll_crt0_1): Accommodate new _threadinfo::init which doesn't return
pointer to tls.
(_dll_crt0): Remove obsolete DECLARE_TLS_STORAGE.
(dll_crt0): Ditto.
* exceptions.cc (_threadinfo::call): New function.
(_threadinfo::call2): Ditto.
(_threadinfo::init): Don't return pointer.
* thread.cc (pthread::thread_init_wrapper): Properly establish _threadinfo
environment.
(pthread::thread_init_wrapper2): New function.
* thread.h (pthread::thread_init_wrapper): Remove noreturn attribute
(pthread::thread_init_wrapper2): Declare new function.
* winbase.h: Remove obsolete code.
@
text
@d537 1
a537 1
  _main_tls->init (padding);
d904 2
@


1.192
log
@Eliminate use of sigframe and sigthread throughout.
* Makefile.in (DLL_OFILES): Add sigfe.o.  Remove reliance on cygwin.def from
cygwin0.dll dependency since dependence on sigfe.o implies that.  Generate def
file on the fly using 'gendef'.
* configure.in: Don't auto-generate cygwin.def.
* configure: Regenerate.
* cygwin.din: Add SIGFE stuff where appropriate.
* dcrt0.cc (dll_crt0_1): Initialize cygwin tls early in process startup.  Set
_main_tls to address of the main thread's cygwin tls.
* debug.h: Remove now unneeded WFSO and WFMO declarations.
* exceptions.cc (_last_thread): Define.
(set_thread_state_for_signals): New function.
(reset_thread_exception_for_signals): Ditto.
(init_thread_for_signals): Ditto.
(delete_thread_for_signals): Ditto.
(capture_thread_for_signals): Ditto.
(handle_exceptions): Set return address explicitly for exceptions prior to
calling sig_send.
(interrupt_on_return): Eliminate.
(setup_handler): Add preliminary implementation for dealing with
thread-specific signals by querying _main_tls.
(signal_exit): Use cygthread::main_thread_id instead of mainthread.id.
(call_signal_handler_now): For now, just handle the main thread.
* fork.cc (vfork): Save and restore main _my_tls.
* gendef: New file.  Generates def file and sigfe.s file.
* gentls_offsets: New file.  Generates offsets for perl to use in sigfe.s.
* how-signals-work.txt: Mention that info is obsolete.
* init.cc (dll_entry): Initialize cygwin tls storage here.
* miscfuncs.cc (low_priority_sleep): Make a C function for easier calling from
asm.
* perthread.h (vfork_save::tls): New element.
* signal.cc (nanosleep): Replace previous use of
sigframe.call_signal_handler_now with straight call to call_signal_handler_now.
(abort): Ditto.
* syscalls.cc (readv): Ditto.
* termios.cc (tcsetattr): Ditto.
* wait.cc (wait4): Ditto.
* sigproc.cc (sig_dispatch_pending): Ditto.
(sig_send): Ditto.
* sigproc.h: Declare call_signal_handler_now.
* thread.cc (pthread::thread_init_wrapper): Initialize cygwin tls.  Remove
obsolete and unworking signal stuff.
* thread.h (verifyable_object::sigs): Eliminate.
(verifyable_object::sigmask): Eliminate.
(verifyable_object::sigtodo): Eliminate.
(verifyable_object::exit): Make attribute noreturn.
(verifyable_object::thread_init_wrapper): Ditto.
(pthread_null::exit): Ditto.
* winbase.h (__stackbase): Always define.
* winsup.h (low_priority_sleep): Declare as a "C" function.
* include/cygwin/version.h: Bump API version to reflect sigwait export.
* include/sys/queue.h: Protect SLIST_ENTRY from previous declaration.
* signal.cc (sigwait): Implement.
* select.cc (fhandler_base::ready_for_read): Add debugging output.
* devices.h: Define more device pointers via their storage.
* devices.in: Don't parse things like /dev/inet/tcp, as they really have no
meaning.
* devices.cc: Regenerate.
* gendevices: Set proper protection for output file.
* cygtls.h: New file.
* gendef: New file.
* gentls_offsets: New file.
* tlsoffsets.h: New file.  Autogenerated.
* config/i386/longjmp.c: Remove.  File subsumed by gendef output.
* config/i386/makefrag: Remove obsolete file.
* fhandler.cc: Remove spurious access_worker declaration.
* spawn.cc (spawnve): Make debugging output more accurate.
* cygwin-gperf: Remove.
* devices.cc: Remove.
@
text
@d535 3
a537 2
  __uint64_t padding[CYGTLS_PADSIZE];
  _main_tls = _my_tls.init (padding);
a841 1
  DECLARE_TLS_STORAGE;
a909 1
  DECLARE_TLS_STORAGE;
@


1.191
log
@* dcrt0.cc (check_sanity_and_sync): Correct api major version check so that
newer dlls will work with older apps but not vice versa.
@
text
@a44 2
sigthread NO_COPY mainthread;		// ID of the main thread

a46 1
per_thread_signal_dispatch NO_COPY signal_dispatch_storage;
a49 1
				     &signal_dispatch_storage,
a70 1
unsigned NO_COPY _cygwin_testing_magic;
d524 1
a524 6
void
sigthread::init (const char *s)
{
  InitializeCriticalSection (&lock);
  id = GetCurrentThreadId ();
}
d526 1
a526 1
extern "C" void __sinit (_reent *);
d535 3
a563 3
  mainthread.init ("mainthread"); // For use in determining if signals
				  //  should be blocked.

d625 1
a625 1
  /* Initialize pthread mainthread when not forked and it is save to call new,
a796 1
  DWORD len;
d799 1
d829 1
a829 8
    {
      _cygwin_testing = 1;
      if ((len = GetModuleFileName (cygwin_hmodule, buf, CYG_MAX_PATH))
	  && len > sizeof ("new-cygwin1.dll")
	  && strcasematch (buf + len - sizeof ("new-cygwin1.dll"),
			   "\\new-cygwin1.dll"))
	_cygwin_testing_magic = 0x10;
    }
@


1.190
log
@2003-11-11  Robert Collins <rbtcollins@@hotmail.com>
	    Ron Parker <rdparker@@butlermfg.com>

	* bsdlib.cc: Update throughout to use CYG_MAX_PATH rather than MAX_PATH.
	* cygheap.h: Ditto.
	* dcrt0.cc: Ditto.
	* delqueue.cc: Ditto.
	* dlfcn.cc: Ditto.
	* dll_init.cc: Ditto.
	* dll_init.h: Ditto.
	* dtable.cc: Ditto.
	* environ.cc: Ditto.
	* environ.h: Ditto.
	* exceptions.cc: Ditto.
	* external.cc: Ditto.
	* fhandler_disk_file.cc: Ditto.
	* fhandler_proc.cc: Ditto.
	* fhandler_process.cc: Ditto.
	* fhandler_raw.cc: Ditto.
	* fhandler_registry.cc: Ditto.
	* fhandler_socket.cc: Ditto.
	* fhandler_virtual.cc: Ditto.
	* miscfuncs.cc: Ditto.
	* mmap.cc: Ditto.
	* netdb.cc: Ditto.
	* path.cc: Ditto.
	* path.h: Ditto.
	* pinfo.cc: Ditto.
	* pinfo.h: Ditto.
	* pthread.cc: Ditto.
	* registry.cc: Ditto.
	* shared.cc: Ditto.
	* shared_info.h: Ditto.
	* smallprint.c: Ditto.
	* spawn.cc: Ditto.
	* strace.cc: Ditto.
	* syscalls.cc: Ditto.
	* thread.h: Ditto.
	* uinfo.cc: Ditto.
	* winsup.h: Ditto.
	* include/limits.h: Ditto.
	* include/cygwin/config.h: Ditto.
	* include/sys/param.h: Ditto.
@
text
@d439 2
a440 2
  if (p->api_major != cygwin_version.api_major)
    api_fatal ("cygwin DLL and APP are out of sync -- API version mismatch %d < %d",
@


1.189
log
@	* dcrt0.cc: Remove local variable alternate_charset_active.
	* fhandler.h: Add variable alternate_charset_active, functions
	str_to_con, con_to_str to dev_console structure.
	* fhandler_console.cc (con_to_str): Move function into dev_console
	class.
	(str_to_con): Ditto.
	(fhandler_console::read): Call con_to_str on dev_state.
	(fhandler_console::write_normal): Call str_to_con on dev_state.
	(fhandler_console::char_command): Change active_charset_active
	assignment to be on dev_state.
	* winsup.h: Remove global external variable alternate_charset_active.
@
text
@d725 1
a725 1
	  char *new_argv0 = (char *) alloca (MAX_PATH);
d808 1
a808 1
  char buf[MAX_PATH + 1];
d814 1
a814 1
      len = GetModuleFileName (NULL, buf, MAX_PATH);
d820 2
a821 2
      char buf1[MAX_PATH + 1];
      len = GetModuleFileName (NULL, buf1, MAX_PATH);
d841 1
a841 1
      if ((len = GetModuleFileName (cygwin_hmodule, buf, MAX_PATH))
@


1.188
log
@	* fhandler_console.cc (char_command): Add escape sequence for codepage
	ansi <-> oem switching for ncurses frame drawing capabilities.
	* dcrt0.cc: Add local variable alternate_charset_active.
	* winsup.h: Add global external variable alternate_charset_active.
@
text
@a59 1
bool alternate_charset_active;
@


1.187
log
@* dcrt0.cc (hMainProc): Initialize to useful value for use when dll is
dynamically loaded.
(shared_info::initialize): Don't initialize user stuff if myself doesn't exit.
@
text
@d60 1
@


1.186
log
@* dcrt0.cc (dll_crt0_1): Call newlib __sinit routine to ensure that stdio
buffers are initialized to avoid thread initialization races.
@
text
@d42 1
a42 1
HANDLE NO_COPY hMainProc;
@


1.185
log
@2003-09-24  Pierre Humblet <pierre.humblet@@ieee.org>

	* shared_info.h (class user_info): New.
	(cygwin_user_h): New.
	(user_shared): New.
	(enum shared_locations): Replace SH_MOUNT_TABLE by SH_USER_SHARED;
	(mount_table): Change from variable to macro.
	* shared.cc: Use sizeof(user_info) in "offsets".
	(user_shared_initialize): Add "reinit" argument to indicate need
	to reinitialize the mapping. Replace "mount_table" by "user_shared"
	throughout. Call user_shared->mountinfo.init and
	user_shared->delqueue.init.
	(shared_info::initialize): Do not call delqueue.init.
	(memory_init): Add argument to user_shared_initialize.
	* child_info.h (child_info::mount_h): Delete.
	(child_info::user_h): New.
	* sigpproc.cc (init_child_info): Use user_h instead of mount_h.
	* dcrt0.cc (_dll_crt0): Ditto.
	* fhandler_disk_file.cc (fhandler_disk_file::close): Use
	user_shared->delqueue instead of cygwin_shared->delqueue.
	* fhandler_virtual.cc (fhandler_virtual::close): Ditto.
	* syscalls.cc (close_all_files): Ditto.
	(unlink): Ditto.
	(seteuid32): Add argument to user_shared_initialize.
@
text
@d536 2
d638 4
a641 1
    pthread::init_mainthread ();
@


1.184
log
@* devices.cc: New file.
* devices.gperf: New file.
* devices.shilka: New file.
* cygwin-gperf: New file.
* cygwin-shilka: New file.
* fhandler_fifo.cc: New file.
* fhandler_nodevice.cc : New file.  Reorganize headers so that path.h precedes
fhandler.h throughout.  Remove device argument and unit arguments from fhandler
constructors throughout.  Remove pc arguments to fhandler functions and use
internal pc element instead, throughout.  Use dev element in pc throughout.
Use major/minor elements rather than units and device numbers previously in
fhandler class.  Use correct methods for fhandler file names rather than
directly accessing file name variables, throughout.
* Makefile.in (DLL_OFILES): Add devices.o, fhandler_fifo.o
* dcrt0.cc (dll_crt0_1): Call device::init.
* devices.h: Renumber devices based on more Linux-like major/minor numbers.
Add more devices.  Declare standard device storage.
(device): Declare struct.
* dir.cc (opendir): Use new 'build_fh_name' to construct a fhandler_* type.
* dtable.cc (dtable::get_debugger_info): Ditto.
(cygwin_attach_handle_to_fd): Ditto.
(dtable::release): Remove special FH_SOCKET case in favor of generic
"need_fixup_before" test.
(dtable::init_std_file_from_handle): Use either build_fh_dev or build_fh_name
to build standard fhandler.
(dtable::build_fh_name): Renamed from dtable::build_fhandler_from_name.  Move
out of dtable class.  Don't accept a path_conv argument.  Just build it here
and pass it to:
(build_fh_pc): Renamed from dtable::build_fhandler.  Move out of dtable class.
Use intrinsic device type in path_conv to create new fhandler.
(build_fh_dev): Renamed from dtable::build_fhandler.  Move out of dtable class.
Simplify arguments to just take new 'device' type and a name.  Just return
pointer to fhandler rather than trying to insert into dtable.
(dtable::dup_worker): Accommodate above build_fh name changes.
(dtable::find_fifo): New (currently broken) function.
(handle_to_fn): Use strechr for efficiency.
* dtable.h: Reflect above build_fh name changes and argument differences.
(fhandler_base *&operator []): Return self rather than copy of self.
* fhandler.cc (fhandler_base::operator =): Use pc element to set normalized
path.
(fhandler_base::set_name): Ditto.
(fhandler_base::raw_read): Use method to access name.
(fhandler_base::write): Correctly use get_output_handle rather than get_handle.
(handler_base::device_access_denied): New function.
(fhandler_base::open): Eliminate pc argument and use pc element of
fhandler_base throughout.
(fhandler_base::fstat): Detect if device is based in filesystem and use
fstat_fs to calculate stat, if so.
(fhandler_base::fhandler_base): Eliminate handling of file names and, instead,
just free appropriate component from pc.
(fhandler_base::opendir): Remove path_conv parameter.
* fhandler.h: Remove all device flags.
(fhandler_base::pc): New element.
(fhandler_base::set_name): Change argument to path_conv.
(fhandler_base::error): New function.
(fhandler_base::exists): New function.
(fhandler_base::pc_binmode): New function.
(fhandler_base::dev): New function.
(fhandler_base::open_fs): New function.
(fhandler_base::fstat_fs): New function.
(fhandler_base::fstat_by_name): New function.
(fhandler_base::fstat_by_handle): New function.
(fhandler_base::isfifo): New function.
(fhandler_base::is_slow): New function.
(fhandler_base::is_auto_device): New function.
(fhandler_base::is_fs_special): New function.
(fhandler_base::device_access_denied): New function.
(fhandler_base::operator DWORD&): New operator.
(fhandler_base::get_name): Return normalized path from pc.
(fhandler_base::get_win32_name): Return windows path from pc.
(fhandler_base::isdevice): Renamed from is_device.
(fhandler_base::get_native_name): Return device format.
(fhandler_fifo): New class.
(fhandler_nodevice): New class.
(select_stuff::device_specific): Remove array.
(select_stuff::device_specific_pipe): New class element.
(select_stuff::device_specific_socket): New class element.
(select_stuff::device_specific_serial): New class element.
(select_stuff::select_stuff): Initialize new elements.
* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Move to base class
from fhandler_disk_file.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_disk_file::open): Move most functionality into
fhandler_base::open_fs.
(fhandler_base::open_fs): New function.
(fhandler_disk_file::close): Move most functionality into
fhandler_base::close_fs.
(fhandler_base::close_fs): New function.
* fhandler_mem.cc (fhandler_dev_mem::open): Use device name in debugging
output.
* fhandler_socket.cc (fhandler_socket::set_connect_secret): Copy standard
urandom device into appropriate place.
(fhandler_socket::accept): Reflect change in fdsock return value.
* fhandler_tty.cc: See "throughouts" above.
* net.cc: Accommodate fdsock change throughout.
(fdsock): Return success or failure, accept fd argument and device argument.
* path.cc (symlink_info::major): New element.
(symlink_info::minor): New element.
(symlink_info::parse_device): Declare new function.
(fs_info::update): Accommodate changes in path_conv class.
(path_conv::fillin): Ditto.
(path_conv::return_and_clear_normalized_path): Eliminate.
(path_conv::set_normalized_path): New function.
(path_conv::path_conv): Set info in dev element.  Use path_conv methods Check
for FH_FS rather than FH_BAD to indicate when to fill in filesystem stuff.
where appropriate rather than direct access.  Use set_normalized_path to set
normalized path.
(windows_device_names): Eliminate.
(get_dev): Ditto.
(get_raw_device_number): Ditto.
(get_device_number): Ditto.
(win32_device_name): Call new device name parser to do most of the heavy
lifting.
(mount_info::conv_to_win32_path): Fill in dev field as appropriate.
(symlink_worker): Handle new device files.
(symlink_info::check): Ditto.
(symlink_info::parse_device): Define new function.
* path.h (executable_states): Move here from fhandler.h.
(fs_info): Rename variables to *_storage and create methods for accessing same.
(path_conv): Add dev element, remove devn and unit and adjust inline methods to
accommodate.
(set_normalized_path): Declare new function.
* pinfo.cc (_pinfo::commune_recv): Add broken support for handling fifos.
(_pinfo::commune_send): Ditto.
* pipe.cc (fhandler_pipe::close): check for existence of handle before closing
it.
(handler_pipe::create): Rename from make_pipe.  Change arguments to accept
fhandler_pipe array.  Accommodate fifos.
(pipe): Rework to deal with fhandler_pipe::create changes.
(_pipe): Ditto.
* select.cc: Use individual device_specific types throughout rather than
indexing with obsolete device number.
(set_bits): Use is_socket call rather than checking device number.
* shared_info.h (CURR_MOUNT_MAGIC): Update.
(conv_to_win32_path): Reflect addition of device argument.
* syscalls.cc (mknod_worker): New function.
(open): Use build_fh_name to build fhandler.
(chown_worker): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(chmod_device): New function.
(chmod): Detect if this is an 'auto' device rather than an on-filesystem device
and handle appropriately.  Use chmod_device to set mode of in-filesystem
devices.
(stat_worker): Eliminate path_conv argument.  Call build_fh_name to construct
fhandler.  Use fh->error() rather than pc->error to detect errors in fhandler
construction.
(access_worker): New function pulled from access.  Accommodate in-filesystem
devices.
(access): Use access_worker.
(fpathconf): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(mknod_worker): New function.
(mknod32): New function.
(chroot): Free normalized path -- assuming it was actually cmalloced.
* tty.cc (create_tty_master): Tweak for new device class.
(tty::common_init): Ditto.
* winsup.h (stat_worker): Remove.
(symlink_worker): Declare.
* exceptions.cc (set_process_mask): Just call sig_dispatch_pending and don't
worry about pending_signals since sig_dispatch_pending should always do the
right thing now.
(sig_handle): Reorganize SIGCONT handling to more closely conform to SUSv3.
* pinfo.h: Move __SIG enum to sigproc.h.
(PICOM_FIFO): New enum element.
(_pinfo): Remove 'thread2signal' stuff throughout class.
(_pinfo::commune_send): Make varargs.
(_pinfo::sigtodo): Eliminate.
(_pinfo::thread2signal): Ditto.
* signal.cc (kill_worker): Eliminate call to setthread2signal.
* sigproc.cc (local_sigtodo): Eliminate.
(getlocal_sigtodo): Ditto.
(sigelem): New class.
(pending_signals): New class.
(sigqueue): New variable, start of sigqueue linked list.
(sigcatch_nonmain): Eliminate.
(sigcatch_main): Eliminate.
(sigcatch_nosync): Eliminate.
(sigcomplete_nonmain): Eliminate.
(pending_signals): Eliminate.
(sig_clear): Call signal thread to clear pending signals, unless already in
signal thread.
(sigpending): Call signal thread to get pending signals.
(sig_dispatch_pending): Eliminate use of pending_signals and just check
sigqueue.
(sigproc_terminate): Eliminate all of the obsolete semaphore stuff.  Close
signal pipe handle.
(sig_send): Eliminate all of the obsolete semaphore stuff and use pipe to send
signals.
(getevent): Eliminate.
(pending_signals::add): New function.
(pending_signals::del): New function.
(pending_signals::next): New function.
(wait_sig): Eliminate all of the obsolete semaphore stuff.  Use pipe to
communicate and maintain a linked list of signals.
* sigproc.h: Move __SIG defines here.  Add __SIGPENDING.
(sig_dispatch_pending): Remove "C" specifier.
(sig_handle): Accept a mask argument.
* thread.cc: Remove signal handling considerations throughout.
@
text
@d904 1
a904 1
		cygwin_mount_h = child_proc_info->mount_h;
@


1.183
log
@* dcrt0.cc (do_exit): Eliminate "C" linkage.  Call events_terminate early.
(exit_states): Move out of source file into header file.
* winsup.h: Move exit_states here.  Remove "C" linkage from do_exit
declaration.
* debug.cc (lock_debug): Remove explicit (and incorrect) external for
exit_state.
* sigproc.cc (sig_dispatch_pending): Don't flush signals if exiting.
@
text
@d26 1
a27 1
#include "path.h"
d553 1
@


1.182
log
@2003-09-15  Pierre Humblet <pierre.humblet@@ieee.org>

	* security.h (__sec_user): Add "access2" argument.
	(sec_acl): Add "original" and "access2" arguments.
	(sec_user): Add "sid2" and "access2" argument. Remove dependence on
	allow_ntsec.
	(sec_user_nih): Ditto.
	* sec_helper.cc (__sec_user): Add "has_security" test.
	Call sec_acl with new arguments, letting it handle original_sid.
	(sec_acl): Add "original" and "access2" arguments. Handle original_sid
	depending on flag but avoiding duplicates. Use "access2" for sid2.
	* pinfo.cc (pinfo::init): Use security attributes created by sec_user
	when creating the mapping.
	* security.cc (create_token): Adjust arguments in call to sec_acl.
	Call sec_user instead of __sec_user.
	* syscall.cc (seteuid32):  Adjust arguments in call to sec_acl. Remove
	now unnecessary test. Remove useless conversions to psid.
	* dcrt0.cc (dll_crt0_1): Call cygsid::init before pinfo_init.
@
text
@a958 14
enum exit_states
  {
    ES_NOT_EXITING = 0,
    ES_THREADTERM,
    ES_SIGNAL,
    ES_CLOSEALL,
    ES_SIGPROCTERMINATE,
    ES_TITLE,
    ES_HUP_PGRP,
    ES_HUP_SID,
    ES_TTY_TERMINATE,
    ES_EVENTS_TERMINATE
  };

d962 1
a962 1
extern "C" void __stdcall
d965 6
a1051 6
    }

  if (exit_state < ES_EVENTS_TERMINATE)
    {
      exit_state = ES_EVENTS_TERMINATE;
      events_terminate ();
@


1.181
log
@* Makefile.in: Make malloc_wrapper -fomit-frame-pointer.
* cygwin.din: Remove extraneous mallinfo definition.
* dcrt0.cc (quoted): Use strechr for efficiency.
* fhandler.cc (fhandler_base::write): Correctly use get_output_handle rather
than get_handle.
(fhandler_base::lseek): Use method for accessing name in debug output.
@
text
@d681 3
a691 3

  /* Init global well known SID objects */
  cygsid::init ();
@


1.180
log
@* dcrt0.cc (_dll_crt0): Accommodate breaking apart of early_stuff_init.
* exceptions.cc (early_stuff_init): Delete.
(init_console_handler): New function - top half of early_stuff_init.
(init_global_security): New function - bottom half of early_stuff_init.
(sig_handle): Avoid special hExeced test for SIGINT.  Just terminate the
captive process.
(signal_exit): Add debugging output.
* fhandler_tty.cc (fhandler_tty_slave::open): Don't allocate a console if one
already seems to exist.  Properly initialize ctrl-c handling if we do allocate
a console.
* winsup.h (early_stuff_init): Delete declaration.
(init_console_handler): New declaration.
(init_global_security): New declaration.
@
text
@d234 1
a234 1
      if ((p = strchr (cmd, quote)) != NULL)
a235 2
      else
	p = strchr (cmd, '\0');
@


1.180.2.1
log
@* fhandler_disk_file.cc (path_conv::ndisk_links): Fix potential off-by-one
problem when first file in a directory is a directory.
* Makefile.in: Make malloc_wrapper -fomit-frame-pointer.
* cygwin.din: Remove extraneous mallinfo definition.
* dcrt0.cc (quoted): Use strechr for efficiency.
* exceptions.cc (sig_handle_tty_stop): Fix boneheaded mistake by using correct
check for parent state rather than inverted check.
* getopt.c (opterr): Reinstate initialization.
(optind): Ditto.
(optopt): Ditto.
@
text
@d234 1
a234 1
      if (*(p = strechr (cmd, quote)))
d236 2
@


1.180.2.1.2.1
log
@* dcrt0.cc (do_exit): Eliminate "C" linkage.  Call events_terminate early.
(exit_states): Move out of source file into header file.
* winsup.h: Move exit_states here.  Remove "C" linkage from do_exit
declaration.
* debug.cc (lock_debug): Remove explicit (and incorrect) external for
exit_state.
* sigproc.cc (sig_dispatch_pending): Don't flush signals if exiting.
@
text
@d959 14
d976 1
a976 1
void __stdcall
a978 6
  if (exit_state < ES_EVENTS_TERMINATE)
    {
      exit_state = ES_EVENTS_TERMINATE;
      events_terminate ();
    }

d1060 6
@


1.179
log
@* dcrt0.cc (dlL_crt0_1): Set __argc_safe after __argc is absolutely know to be
set.
* exceptions.cc (sig_handle_tty_stop): Don't reset sigCONT event since it is
reset automatically.
* fork.cc (fork): Remove obsolete usage of PID_SPLIT_HEAP.
* include/sys/cygwin.h: Ditto.
* sigproc.cc (sig_send): Use sigframe init method to set frame since it checks
for previous ownership of the frame.
* sigproc.h (sigframe::init): Accept an "is_exception" argument.
@
text
@d862 2
a863 1
  early_stuff_init ();
@


1.178
log
@* dcrt0.cc (__argc_safe): New variable.
(dll_crt0_1): Store argc in __argc_safe, which will theoretically remain
untouched by the user.
* fhandler_console.cc (fhandler_console::read): Silence some compiler warnings.
* fhandler_raw.cc (fhandler_dev_raw::raw_read): Ditto.
* pinfo.cc (_pinfo::commune_recv): Carefully bound argv scan and check for
potentially bad pointers since user could have set argv cell to anythinw.
* cygheap.h (CYGHEAPSIZE): Bump up size.
@
text
@d610 1
a610 1
	    __argc = __argc_safe = spawn_info->moreinfo->argc;
d727 1
@


1.177
log
@* dcrt0.cc (_dll_crt0): Move strace.microseconds initialization to after
pthread initialization.
(dll_crt0_1): i.e., here.
@
text
@d526 1
d610 1
a610 1
	    __argc = spawn_info->moreinfo->argc;
@


1.176
log
@* Makefile.in: Remove cygserver stuff.
* acconfig.h: Add USE_CYGSERVER define.
* config.h.in: Regenerate.
* configure.in: Add --enable-server setting.
* configure: Regenerate.
* fhandler_tty.cc (fhandler_tty_slave::open): Conditionalize compilation of
cygserver stuff.
* fork.cc (fork_child): Ditto.
* shm.cc: Ditto.
* tty.cc (tty::common_init): Ditto.
* dcrt0.cc: Use bool rather than BOOL for CYGWIN environment variable
definitions.
* environ.cc: Ditto.
* ntea.cc: Ditto.
* security.cc: Ditto.
* security.h: Ditto.
* syscalls.cc (check_posix_perm): Remove externs that were already declared in
a header.
* winsup.h: Ditto.  Declare _MT_SAFE here.  Delete it someday since cygwin
should always be _MT_SAFE.
@
text
@d638 4
a855 3
#ifdef DEBUGGING
  strace.microseconds ();
#endif
@


1.175
log
@Throughout, remove "include <errno.h>" from files which already include
cygerrno.h.
* include/cygwin/config.h (__DYNAMIC_REENT__): Define.
* include/cygwin/version.h: Bump API minor version.
* cygwin.din: Export __getreent
* cygerrno.h: Include errno.h.  Fix places where _impure_ptr is used directly
to store the errno value.
* debug.cc (__set_errno): Ditto.
* errno.cc: Remove _RRENT_ONLY define to get errno.cc compiled.
* signal.cc: Rename _reent_clib to _REENT throughout.
* thread.h (reent_clib): Remove prototype.
* thread.cc (reent_clib): Rename reent_clib to __getreent.  Return _impure_ptr
until MTinterface is initialized.
(reent_winsup): Fix a possible SEGV when _r == NULL.  Return NULL instead.
* MTinterface::fixup_after_fork: Switch reent back to _impure_ptr to keep
signal handling running when fork is called from a thread other than the
mainthread.
@
text
@d56 3
a58 3
BOOL display_title;
BOOL strip_title_path;
BOOL allow_glob = TRUE;
@


1.174
log
@
* thread.h (pthread::init_mainthread): Remove function parameter.
(MTinterface::Init): Ditto.
* thread.cc (MTinterface::Init): Remove function parameter.
Always initialize reent_key.
(pthread::init_mainthread): Remove function parameter.
(MTinterface::fixup_after_fork): Fix pthread::init_mainthread call.
* dcrt0.cc (dll_crt_0_1) Fix calls to MTinterface::Init and
pthread::init_mainthread.
Call pthread::init_mainthread only when not forked.
@
text
@a19 1
#include <errno.h>
@


1.173
log
@
* thread.h: Change class names, methods, members and local vars
according to the GNU coding style.
* thread.cc: Ditto.
* dcrt0.cc (dll_crt0_1): Rename pthread::initMainThread call to
pthread::init_mainthread.
* pthread.cc (pthead_getsequence_np): Rename pthread::isGoodObject
call to pthread::is_good_object.
@
text
@d568 1
a568 1
  user_data->threadinterface->Init (user_data->forkee);
d634 4
a637 1
  pthread::init_mainthread (!user_data->forkee);
@


1.172
log
@* sigproc.h (signal_fixup_after_exec): Eliminate argument in declaration.
* exceptions.cc (signal_fixup_after_exec): Eliminate argument in definition.
Don't reset signal handlers after spawm.  Just treat like fork/exec.
* dcrt0.cc (dll_crt0_1): Don't pass PROC_SPAWN argument to
signal_fixup_after_exec.
* syscalls.cc (unlink): Don't change attributes of file if not readonly/system.
Ditto for resetting of arguments.
@
text
@d634 1
a634 1
  pthread::initMainThread (!user_data->forkee);
@


1.171
log
@* cygwin.din: Wrap atexit and exit with cygwin, thread-safe functions.
* dcrt0.cc (cygwin_atexit): New function.
(cygwin_exit): Ditto.
@
text
@d615 1
a615 1
	    signal_fixup_after_exec (child_proc_info->type == PROC_SPAWN);
@


1.170
log
@	* syscalls.cc (seteuid32): On Win95 get the pw entry. If it exists
	update the euid and call cygheap->user.set_name. Remove special
	handling of ILLEGAL_UID.
	(setgid32): Add a debug_printf. On Win95, always set the egid.
	Remove special handling of ILLEGAL_GID. Do not compare gid and gr_gid.
	* child_info.h (class cygheap_exec_info): Remove uid.
	* spawn.cc (spawn_guts): Do not set ciresrv.moreinfo->uid.
	* dcrto.cc (dll_crt0_1): Always call uinfo_init.
	* uinfo.cc (uinfo_init): Reorganize and close handle if needed.
	(cygheap_user::ontherange): Do not call internal_getpwnam if pw is NULL.
@
text
@d37 1
d1066 22
@


1.169
log
@* dcrt0.cc (initialize_env): Use colon for CYGWIN_DEBUG separator.
* grp.cc: Change most statics to NO_COPY throughout.
* passwd.cc: Ditto.
* pwdgrp.h: Change some BOOLs to bools.
(pwdgrp::pwdgrp): Remove unneeded constructor.
* passwd.cc: Change BOOL to bool throughout.
@
text
@d687 2
a688 3
  /* Initialize uid, gid if necessary. */
  if (child_proc_info == NULL || spawn_info->moreinfo->uid == ILLEGAL_UID)
    uinfo_init ();
@


1.168
log
@	Split ChangeLog, create ChangeLog-2002.
	Fix copyright dates.
@
text
@d812 1
a812 1
      char *p = strchr (buf, '=');
@


1.168.2.1
log
@merge from trunk
@
text
@a553 1
  device::init ();
@


1.168.2.2
log
@trunk merge
@
text
@d813 1
a813 1
      char *p = strchr (buf, ':');
@


1.168.2.3
log
@merge from trunk
@
text
@d688 3
a690 2
  /* Initialize user info. */
  uinfo_init ();
@


1.168.2.4
log
@merge from trunk
@
text
@d234 1
a234 1
      if (*(p = strechr (cmd, quote)))
d236 2
@


1.168.2.5
log
@merge from trunk.
Reorganize includes throughout so that path.h comes before fhandler.h.
Eliminate path_conv arguments from fhandler functions which take them,
throughout.  Use get_name() and get_win32_name() consistently throughout for
fhandler objects.  Use build_fh_* functions throughout, where appropriate.
* fhandler.h (fhandler_base): Store path_conv struct here.  Remove dev.
* dtable.h (dtable::build_fhandler_*): Remove.
(build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* dtable.cc (build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* fhandler.h (fhandler_base::set_name): Change argument.
* fhandler.cc (fhandler_base::set_name): Just accept a path_conv argument.
(executable_states): Move.
* path.h (executable_state): Accept.
* syscalls.cc (stat_worker): Make static.
* winsup.h (stat_worker): Remove definition.
@
text
@d27 1
a28 1
#include "fhandler.h"
@


1.168.2.6
log
@merge from trunk
@
text
@a36 1
#include "sync.h"
a1063 22
}

static muto *atexit_lock;

extern "C" int
cygwin_atexit (void (*function)(void))
{
  int res;
  if (!atexit_lock)
    new_muto (atexit_lock);
  atexit_lock->acquire ();
  res = atexit (function);
  atexit_lock->release ();
  return res;
}

extern "C" void
cygwin_exit (int n)
{
  if (atexit_lock)
    atexit_lock->acquire ();
  exit (n);
@


1.168.2.7
log
@merge from trunk
@
text
@d614 1
a614 1
	    signal_fixup_after_exec ();
@


1.168.2.8
log
@merge from trunk
@
text
@d633 1
a633 1
  pthread::init_mainthread (!user_data->forkee);
@


1.168.2.9
log
@merge from trunk
@
text
@d567 1
a567 1
  user_data->threadinterface->Init ();
d633 1
a633 4
  /* Initialize pthread mainthread when not forked and it is save to call new,
     otherwise it is reinitalized in fixup_after_fork */
  if (!user_data->forkee)
    pthread::init_mainthread ();
@


1.168.2.10
log
@merge from trunk
@
text
@d20 1
d57 3
a59 3
bool display_title;
bool strip_title_path;
bool allow_glob = TRUE;
@


1.168.2.11
log
@merge from trunk
@
text
@a636 4
#ifdef DEBUGGING
  strace.microseconds ();
#endif

d851 3
@


1.168.2.12
log
@merge from trunk
@
text
@a523 1
int __argc_safe;
a724 1
  __argc_safe = __argc;
@


1.168.2.13
log
@merge from trunk
@
text
@d861 1
a861 2
  init_console_handler ();
  init_global_security ();
@


1.167
log
@* exceptions.cc (events_init): Initialize critical section to control exiting
via signal.
(signal_exit): Enter critical section early to avoid exit races with main
thread.
* dcrt0.cc (do_exit): Use exit_lock critical section to avoid races.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
@


1.167.4.1
log
@Introduce device class to cygwin throughout.  Rename FH_DISK to FH_FS
throughout.
* dcrt0.cc (dll_crt0_1): Initialize device globals via device::init.
* dtable.cc (dtable::init_std_file_from_handle): Use device numbers rather than
names when they are known.  Should speed up process startup slightly.
(dtable::build_fhandler_from_name): Pass path_conv device to build_fhandler.
(dtable::build_fhandler): Accept device argument rather than separate
device/unit arguments.
(dtable::build_fhandler): Ditto.  Separate switch statement by devices which
take units and those which don't.  Build unix/win32 names from device if
required.
(dtable::dup_worker): Reflect changes to build_fhandler arguments.
* dtable.h (dtable::build_fhandler): Ditto.
* fhandler.cc (fhandler_base::set_name): Eliminate unit argument.  Use get_unit
to derive unit.
* fhandler.h: Separate FH device defines into devices.h include.  Define
is_slow as appropriate for each fhandler_class.
(fhandler_base::dev): New element.
(fhandler_base::fhandler_base): Eliminate unit argument.
(fhandler_base::get_device): Return device number.
(fhandler_base::get_major): Return device major number.
(fhandler_base::get_minor): Return device minor number.
(fhandler_base::get_unit): Ditto.
(fhandler_base::get_native_name): Return device format field.
(fhandler_fifo): New class.
(select_stuff::device_specific): Remove array.
(select_stuff::device_specific_pipe): New class element.
(select_stuff::device_specific_socket): New class element.
(select_stuff::device_specific_serial): New class element.
(select_stuff::select_stuff): Initialize new elements.
* fhandler_disk_file.cc (fhandler_cygdrive::fhandler_cygdrive): Remove unit
initialization.
* fhandler_tty.cc (fhandler_tty_master::init_console): Use "console_dev" global
to initialize captive console used by tty master.
* mmap.cc (mmap_record::devtype_): Remove.
(mmap_record::dev): New.
(mmap_record::mmap_record): Use dev.
(mmap_record::get_device): Implement via dev.
* net.cc (fdsock): Use socket_dev global to initialize socket fhandler.
* path.cc (path_conv::check): Accommodate new path_conv::dev element.
(get_devn): Eliminate.
(get_raw_device_number): Ditto.
(get_device_number): Ditto.
(win32_device_name): Accept dev argument.  Use it.  Use device::parse to derive
potential device name.
(mount_info::conv_to_win32_path): Accept dev argument.  Use it.
* path.h (path_conv::devn): Eliminate.
(path_conv::unit): Ditto.
(path_conv::dev): Declare.
(path_conv::path_conv): Don't initialize deleted members.
(path_conv::is_device): Implement via dev element.
(path_conv::get_devn): Ditto.
(path_conv::get_unitn): Ditto.
* pipe.cc (make_pipe): Use pipe[rw]_dev in fhandler construction.
* select.cc: Use new device_specific_* select class elements
* shared_info.h (CURR_MOUNT_MAGIC): Update.
(mount_info::conv_to_win32_path): Reflect new arguments.
* syscalls.cc (fstat64): Just use get_device() without interpretation for
st_dev element.
(stat_worker): Ditto.
* tty.cc (create_tty_master): Use ttym_dev in fhandler constructor.
(tty::common_init): Check for tty major device number rather than FH_TTYM.
@
text
@a553 1
  device::init ();
@


1.166
log
@2002-12-14  Corinna Vinschen  <corinna@@vinschen.de>

	* dcrt0.cc (dll_crt0_1): Call well known SID initializer function.
	* security.h (cygsid::init): Declare new static method.
	* sec_helper.cc (cygsid::init): New method for initializing well
	known SIDs.

2002-12-14  Pierre Humblet  <pierre.humblet@@ieee.org>

	* security.h: Declare well_known_creator_group_sid.
	* sec_helper.cc: Define and initialize well_known_creator_group_sid.
@
text
@d970 1
d975 1
@


1.165
log
@* pinfo.h (winpids::set): Renamed from init.
(winpids::init): New declaration.
(winpids::cs): Ditto.
(winpids::winpids): Use set rather than init.
* external.cc (fillout_pinfo): Ditto.
* dcrt0.cc (dll_crt0_1): Call winpids::init.
* pinfo.cc (winpids::set): Renamed from init.  Wrap calls in critical section.
(winpids::init): New function.
(winpids::cs): Define.
@
text
@d684 3
@


1.164
log
@2002-11-05  Thomas Pfaff  <tpfaff@@gmx.net>

        * dcrt0.cc (dll_crt0_1): Add call to pthread::initMainThread to
        initialize mainthread when it is safe to call new.
        * init.cc (dll_entry): Change call to store reents in tls key.
        * thread.cc (_reent_clib) : Change call to get reents from tls
        key.
        (_reent_winsup): Ditto.
        (MTinterface::Init): Key handling changed. Remove initialization
        of member variables.
        (MTinterface::fixup_after_fork): Reinitialize mainthread object
        after fork. Reset threadount to 1.
        (pthread::initMainThread): Create mainthread object dynamically.
        and initialize with valid handles.
        (pthread::self): Remove calls to create thread objects.
        (pthread::setTlsSelfPointer): Change call to store thread self
        handle in tls key.
        (pthread::getTlsSelfPointer): New static method.
        (pthread::exit): Remove setTlsSelfPointer call.
        (pthread::initCurrentThread): New method.
        (pthread::thread_init_wrapper): Change call to store thread self
        handle in tls key.
        (pthread::join): Check for a valid joiner.
        (pthreadNull::pthreadNull): Mark Null object as detached.
        (pthreadNull::exit): Terminate thread via ExitThread.
        * thread.h (pthread::initMainThread): Change parameter in function
        call.
        (pthread::getTlsSelfPointer): New static method.
        (pthread::initCurrentThread): New method.
        (MTinterface::reent_key): Remove.
        (MTinterface::thread_self_dwTlsIndex): Ditto..
        (MTinterface::indexallocated): Ditto.
        (MTinterface::mainthread): Ditto.
        (MTinterface::reent_key): New member.
        (MTinterface::thread_self_key): Ditto.
        (MTinterface::MTinterface): Initialize all members.
@
text
@d572 2
@


1.163
log
@* cygthread.cc (cygthread::exiting): New variable.
(cygthread::initialized): Delete.
(cygthread::stub): Use exiting variable to determine when to exit.
(cygthread::runner): Delete.
(cygthread_protect): New variable.
(cygthread::init): Don't start runner thread.  Initialize muto for list
protection.
(cygthread::freerange): Return pointer to cygthread.
(cygthread::operator new): Change logic to start threads on an as-needed basis.
(cygthread::detach): Don't zero id.
(cygthread::terminate): Don't kill any executing threads.  Just set exiting
flag.
* cygthread.h (cygthread): Reflect above changes.
* dcrt0.cc (dll_crt0_1): Move cygthread initialization later.
* fork.cc (fork_child): Do fdtab fixup after dll fixup or (apparently) winsock
may allocate memory in dll load address.
@
text
@d631 2
@


1.162
log
@* cygheap.cc (cygheap_fixup_in_child): Use user_heap element in cygheap.
(init_cheap): Ditto for declaration.
* fork.cc (fork_parent): Use user_heap element in cygheap.
* heap.h (inheap): Ditto.
* heap.cc (sbrk): Ditto.
(heap_init): Ditto.  Reorganize to shrink heap chunk as required and record new
value in cygheap.
* dcrt0.cc (dll_crt0_1): More "move the cygthread init" games.
* shared.cc (open_shared): Rework memory protection to properly deal with
relocated shared segment.
(shared_info::heap_chunk_size): Rename element to 'heap_chunk'.
* shared_info.h (shared_info): Ditto for declaration.
* strace.cc (strace::hello): Report on heap chunk size from cygheap since it
may shrink.
@
text
@d576 1
a576 4
    {
      cygthread::init ();
      memory_init ();
    }
a586 1
	    cygthread::init ();
a598 1
	    cygthread::init ();
a618 1
	    // cygthread::init ();
d629 1
@


1.161
log
@Change _function() to function() throughout.
* cygwin.din: Remove last vestiges (?) of newlib wrappers.
* cygthread.cc (cygthread::detach): Always wait for event or suffer an
apparently inavoidable race.
* dcrt0.cc (dll_crt0_1): Allocate threads after stack has been relocated.
* debub.cc (lock_debug): Don't acquire lock on exit.
* fork.cc (fork_child): Recreate mmaps before doing anything else since Windows
has a habit of using blocks of memory in the child that could previously have
been occupied by shared memory in the parent.
* mmap.cc (fhandler_disk_file::fixup_mmap_after_fork): Issue error here and
provide some details about what went wrong.
(fixup_mmaps_after_fork): Remove error message.
* shared.cc (open_shared): Move warning message so that more detail is
possible.
* sigproc.cc (sigproc_init): Initialize sync_proc_subproc to avoid a race.
(sigproc_terminate): Specifically wait for process thread to terminate.
@
text
@a587 1
	    cygthread::init ();
a588 1
	    close_ppid_handle = !!child_proc_info->pppid_handle;
d590 1
d592 1
@


1.160
log
@* dcrt0.cc (dll_crt0_1): Initialize cygwin threads here only when not forking.
* fork.cc (fork_child): Initialize cygwin thread later in process to avoid
allocating memory for thread stacks.
* shared.cc (open_shared): Issue warning if NT and shared segment is relocated.
@
text
@d577 1
a578 1
      cygthread::init ();
d587 2
a589 1
	    alloc_stack (fork_info);
d603 1
d624 1
a624 1
	    cygthread::init ();
@


1.159
log
@* child_info.h (CURR_CHILD_INFO_MAGIC): Reset.
(child_info_fork::mount_table): Remove.
(child_info_fork::myself_addr): Remove.
* fork.cc (fork_child): Don't set either of the above.
* dcrt0.cc (dll_crt0_1): Call memory_init as early as possible.
* fhandler_console.cc (console_state): Move to shared_info.h.
(fhandler_console::get_tty_stuff): Reflect open_shared arg change.
* pinfo.cc (myself_addr): Remove definition.
(pinfo::init): Get myself address from open_shared.
* pinfo.h (myself_addr): Remove declaration.
* shared.cc (open_shared): Rework so that known shared memory locations are
protected.  Take shared memory type as fifth argument.
(memory_init): Reflect open_shared arg change.
* shared_info.h (shared_locations): New enum.
(console_state): Move here.
(open_shared): Reflect open_shared arg change in declaration.
@
text
@d576 4
a579 1
    memory_init ();
d622 1
a629 2

  cygthread::init ();
@


1.158
log
@* child_info.h (CURR_CHILD_INFO_MAGIC): Reset.
(child_info_fork::heaptop): Remove obsolete element.
(child_info_fork::heabbase): Ditto.
(child_info_fork::heapptr): Ditto.
(child_info_fork::mount_table): New element.
(child_info_fork::myself_addr): Ditto.
* dcrt0.cc (dll_crt0_1): Set mount_table and myself_addr when forking.
(initial_env): Add newline to "sleeping" message.
* dll_init.cc (reserve_upto): Accommodate cygwin heap when freeing memory.
Make debugging output a little more descriptive.
* fork.cc (fork_parent): Save mount_table and myself_addr.
* pinfo.cc (myself_addr): New variable.
(set_myself): Pass PID_MYSELF flag to init.
(pinfo::Init): Honor PID_MYSELF.  Save address where myself shared memory
resides in myself_addr, for fork.
* pinfo.h (myself_addr): Declare.
* shared.cc (memory_init): On fork, use previously saved address for location
of mount table.
* include/sys/cygwin.h (PID_MYSELF): New value.
* dtable.cc (dtable::stdio_init): Don't pass access type to
init_std_file_from_handle.  It's always the same.
(dtable::init_std_file_from_handle): Remove access type argument.  Assume
read/write.
* dtable.h (dtable::init_std_file_from_handle): Ditto for declaration.
* exceptions.cc (try_to_debug): Don't try to debug if already being debugged.
* fhandler_console.cc (shared_console_info_save): New variable.
(fhandler_console::get_tty_stuff): Save address of shared console stuff for
fork.
@
text
@d575 3
a577 1
  if (child_proc_info)
d586 2
a587 2
	    mount_table = fork_info->mount_table;
	    myself_addr = fork_info->myself_addr;
a588 1
	    close_ppid_handle = !!child_proc_info->pppid_handle;
d600 1
a626 3
  /* Initialize the cygwin subsystem if this is the first process,
     or attach to shared data structures if it's already running. */
  memory_init ();
@


1.157
log
@* cygthread.cc (cygthread::stub): Don't create event for long-running threads.
Initialize thread_sync event here which is used to Suspend using an event
rather than relying on SuspendThread/ResumeThread.
(cygthread::init): Save handle to runner thread for future termination.
(cygthread::cygthread): Only resume thread when it is actually suspended.
Otherwise signal thread completion event.
(cygthread::terminate): Forcibly terminate runner thread and any helper
threads.  Call DisableThreadLibrary calls if execing.
* cygthread.h (cygthread::thread_sync): Declare.
* dcrt0.cc (do_exit): Eliminate calls to obsolete window_terminate and
shared_terminate.
* exceptions.cc (events_terminate): Don't bother closing title_mutex since it
is going away anyway.
* pinfo.cc (_pinfo::exit): Call cygthread::terminate to ensure that threads are
shut down before process exit or otherwise strange races seem to occur.
* shared.cc (shared_terminate): Eliminate.
* shared.h (shared_terminate): Eliminate declaration.
* winsup.h (window_terminate): Eliminate declaration.
* spawn.cc (spawn_guts): Call cygthread::terminate early in process if execing.
Call DisableThreadLibrary calls if execing.
* window.cc (Winmain): Call ExitThread to force exit.
(window_terminate): Eliminate.
* dcrt0.cc (do_exit): Track exit state more closely.
@
text
@d584 2
d798 1
a798 1
      console_printf ("Sleeping %d, pid %u %s", ms, GetCurrentProcessId (), buf);
@


1.156
log
@* Makefile.in (new-cygwin1.dll): Reorganize library order.
* dcrt0.cc (do_exit): Move thread stuff after vfork stuff or threads are
terminated during vfork.
* sigproc.cc (proc_terminate): Grab proc lock prior to signalling subproc
thread exit to avoid an extra "wait-for-thread-to-exit".
@
text
@d948 1
a948 1
enum
d950 10
a959 4
    ES_THREADTERM = 1,
    ES_SIGNAL = 2,
    ES_CLOSEALL = 3,
    ES_SIGPROCTERMINATE = 4
d962 2
a967 1
  static int NO_COPY exit_state = 0;
a974 4
  if (!DisableThreadLibraryCalls (cygwin_hmodule))
    system_printf ("DisableThreadLibraryCalls (%p) failed, %E",
		   cygwin_hmodule);

d1005 2
a1006 3
  if (n & EXIT_REPARENTING)
    n &= ~EXIT_REPARENTING;
  else
d1008 1
a1008 2
      myself->stopsig = 0;

d1012 1
d1014 3
d1024 1
d1026 3
d1041 5
d1049 5
a1053 3
  window_terminate ();
  events_terminate ();
  shared_terminate ();
@


1.155
log
@* cygthread.cc (cygthread::stub): Don't create an event for "cygself" threads.
Assume that they exit via an ExitThread call.
* cygthread.h (cygthread::SetThreadPriority): New function.
(cygthread::zap_h): New function.
* dcrt0.cc (do_exit): Move cygthread::terminate earlier and establish
exit_state guard.
* fhandler.h (fhandler_tty_master::output_thread): Delete.
* fhandler_tty.cc (fhandler_tty_master::init): Set priority for threads via
method.  Zap handles when done.  Don't treat process_output specially.
(process_output): Call ExitThread directly.
(fhandler_tty_master::fixup_after_fork): Don't worry about output_thread.
(fhandler_tty_master::fixup_after_exec): Ditto.
* sigproc.cc (proc_terminate): Don't detach from hwait_subproc.  Just let it
exit.
(sigproc_init): Close thread handle after initialization.
(wait_sig): Use GetCurrentThread() as SetThreadPriority call rather than
*event* handle.  Call ExitThread directly on termination.
(wait_subproc): Call ExitThread directly on termination.
* tty.cc (tty_list::terminate): Don't attempt t detach from output_thread.
@
text
@d962 6
a976 6

  syscall_printf ("do_exit (%d)", n);

  vfork_save *vf = vfork_storage.val ();
  if (vf != NULL && vf->pid < 0)
    vf->restore_exit (status);
@


1.154
log
@* dcrt0.cc (do_exit): Call DisableThreadLibraryCalls since we don't need to
track thread detaches.
* init.cc (dll_entry): Reorganize slightly.  Fix api_fatal message.
@
text
@d950 4
a953 3
    ES_SIGNAL = 1,
    ES_CLOSEALL = 2,
    ES_SIGPROCTERMINATE = 3
d966 6
a1037 1
  cygthread::terminate ();
@


1.153
log
@whitespace
@
text
@d961 4
@


1.152
log
@Remove \n from calls to strace class printfs throughout.
@
text
@d454 1
a454 1
                     PAGE_EXECUTE_READWRITE|PAGE_GUARD : PAGE_NOACCESS)
@


1.151
log
@* cygthread.h (cygthread::terminate): Declare new function.
(cygthread::initialized): Change to 'int'.
* cygthread.cc (cygthread::stub): Exit thread if initialized < 0.
(cygthread::new): Ditto.
(cygthread::runner): Ditto.  Set initialized using xor to preserve sign.
(cygthread::terminate): New function.
* dcrt0.cc (do_exit): Call cygthread::terminate.
@
text
@d336 1
a336 1
      debug_printf ("argv[%d] = '%s'\n", n++, *gv);
d406 1
a406 1
	  debug_printf ("argv[%d] = '%s'\n", argc, word);
d796 1
a796 1
      console_printf ("Sleeping %d, pid %u %s\n", ms, GetCurrentProcessId (), buf);
@


1.150
log
@2002-09-22  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	GNUify non-GNU formatted functions calls throughout.

2002-09-22  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_shm.cc (with_strerr): Remove macro.
	(server_shmmgr::segment_t::~segment_t): Remove calls to with_strerr.
	(server_shmmgr::segment_t::attach): Ditto.
	(server_shmmgr::new_segment): Ditto.
	* shm.cc (with_strerr): Remove macro.
	(client_shmmgr::shmdt): Remove calls to with_strerr.
	(client_shmmgr::attach): Ditto.

2002-09-21  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* include/sys/ipc.h: Move to "include/cygwin/ipc.h".
	* include/sys/msg.h: Move to "include/cygwin/msg.h".
	* include/sys/sem.h: Move to "include/cygwin/sem.h".
	* include/sys/shm.h: Move to "include/cygwin/shm.h".
	* include/cygwin/ipc.h: New file.
	* include/cygwin/msg.h: Ditto.
	* include/cygwin/sem.h: Ditto.
	* include/cygwin/shm.h: Ditto.
	* cygserver_shm.h: Update includes.
	* msg.cc: Ditto.
	* sem.cc: Ditto.

2002-09-21  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* safe_memory.h (safe_delete): Make a templated function.
	* cygserver.cc (~server_request): Update use of safe_delete.
	(main): Ditto.
	* cygserver_client.cc (client_request::handle_request): Ditto.
	(client_request::make_request): Ditto.
	* cygserver_process.cc (~process_cleanup): Ditto.
	(process::remove): Ditto.
	(process::cleanup): Ditto.
	(process_cache::process): Ditto.
	* cygserver_shm.cc (server_shmmgr::segment_t::detach): Ditto.
	(server_shmmgr::delete_segment): Ditto.
	* shm.cc (client_shmmgr::shmdt): Ditto.
	* threaded_queue.cc (~threaded_queue): Ditto.
	(threaded_queue::worker_loop): Ditto.

2002-08-29  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* safe_memory.h: Replace #include <new> with an explicit
	definition of the placement new operator.
	(safe_delete): Remove unnecessary ## operator.

2002-07-28  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_shm.cc (class server_shmmgr): Remove `cleanup_t'
	friend declaration.
	(cleanup_t::cleanup_t): Use the segment's shmid as the key rather
	than the segment pointer itself.
	(cleanup_t::segptr): Remove method.
	(cleanup_t::shmid): New method.
	(cleanup_t::cleanup): Update for new key value.
	(server_shmmgr::find (segment_t *)): Remove method.
	* include/cygwin/cygserver_process.h (cleanup_routine::key): Make
	method const.

2002-07-27  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* include/cygwin/cygserver_process.h
	(cleanup_routine::_key): New field.
	(cleanup_routine::cleanup_routine): Initialise new field with new
	argument.
	(cleanup_routine::operator==): New method.
	(cleanup_routine::key): New method.
	(cleanup_routine::cleanup): Make argument non-const.
	(process::is_active): New method.
	(process::remove): Ditto.
	(process::check_exit_code): Rename method.
	* cygserver_process.cc (process::add): Reorganize code.
	(process::remove): New method.
	(process::check_exit_code): Rename method.
	(process::cleanup): Use new `process::is_active' method.
	(process_cache::process): Ditto.
	(process_cache::sync_wait_array): Ditto.
	(process_cache::check_and_remove_process): Ditto.
	* cygserver_shm.cc (server_shmmgr): Make `cleanup_t' a friend.
	(segment_t::detach): Make argument non-const.  Remove cleanup
	object from client if appropriate.
	(cleanup_t::_segptr): Remove field.
	(cleanup_t::cleanup_t): Initialise parent explicitly.  Remove
	field.
	(cleanup_t::segptr): New method.
	(cleanup_t::cleanup): Add error checking and reporting.
	(server_shmmgr::shmdt): Make argument non-const.
	(server_shmmgr::find (segment_t *)): New method.

2002-07-27  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver.cc (client_request_shutdown::client_request_shutdown):
	Comment out verbose tracing statement.
	* cygserver_client.cc
	(client_request_get_version::client_request_get_version): Ditto.
	(client_request_attach_tty::client_request_attach_tty): Ditto.
	* cygserver_shm.cc (client_request_shm::client_request_shm):
	Ditto.

2002-07-27  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_transport_pipes.cc (transport_layer_pipes::listen):
	Set `_is_listening_endpoint' appropriately.

2002-07-27  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* include/cygwin/cygserver_transport.h
	(transport_layer_base::listen): Change return type.
	(transport_layer_base::connect): Ditto.
	* include/cygwin/cygserver_transport_pipes.h
	(transport_layer_pipes::listen): Change return type.
	(transport_layer_pipes::connect): Ditto.
	(transport_layer_pipes::_sec_none_nih): Remove unused field.
	(transport_layer_pipes::_is_listening_endpoint): New field.
	* cygserver_transport_pipes.cc: Synchronize with sockets code.
	(transport_layer_pipes::transport_layer_pipes): Initialise new
	field.  Separate out asserts.
	(transport_layer_pipes::listen): Change return type.  Add asserts.
	(transport_layer_pipes::accept): Add asserts.
	(transport_layer_pipes::read): Change conditional to an assert.
	Add assert.
	(transport_layer_pipes::write): Ditto.
	(transport_layer_pipes::connect): Change return type.  Change
	conditional to an assert.  Add asserts.  Rationalize error code
	slightly.
	(transport_layer_pipes::impersonate_client): Add asserts.
	* include/cygwin/cygserver_transport_sockets.h
	(transport_layer_sockets::listen): Change return type.
	(transport_layer_sockets::connect): Ditto.
	(transport_layer_sockets::_addr): Change type of field.
	(transport_layer_sockets::_addr_len): Ditto.
	(transport_layer_sockets::_is_accepted_endpoint): New field.
	(transport_layer_sockets::_is_listening_endpoint): Ditto.
	* cygserver_transport_sockets.cc
	(MAX_CONNECT_RETRY): New constant.
	(transport_layer_sockets::transport_layer_sockets): Initialise new
	fields.  Only initialise the socket address where necessary.
	(transport_layer_sockets::listen): Change return type.  Rewrite.
	(transport_layer_sockets::accept): Add asserts.  Add tracing
	statements.  Use a local variable to hold the accepted address.
	(transport_layer_sockets::close): Add tracing statements.  Unlink
	the UNIX domain socket file as appropriate.  Close the socket
	cleanly.
	(transport_layer_sockets::read): Rewrite method.
	(transport_layer_sockets::write): Ditto.
	(transport_layer_sockets::connect): Change return type.  Rewrite.
	* cygserver.cc (server_submission_loop::request_loop): Run the
	listening thread at high priority with special handling for
	shutdown.
	(main): Print the request error code rather than errno in shutdown
	request code.  Install signal handlers with sigaction(2) to avoid
	setting SA_RESTART.  Check value of the listen method call, now it
	has one.
	* cygserver_client.cc (client_request::make_request): Check new
	return value on connect method call.

2002-07-27  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* include/cygwin/cygserver_transport_pipes.h
	(cygserver_transport_pipes::_sd): Rename field.
	(cygserver_transport_pipes::_sec_none_nih): Ditto.
	(cygserver_transport_pipes::_sec_all_nih): Ditto.
	(cygserver_transport_pipes::_pipe_name): Ditto.
	(cygserver_transport_pipes::_hPipe): Ditto.
	(cygserver_transport_pipes::_is_accepted_endpoint): Ditto.
	* cygserver_transport_pipes.cc
	(transport_layer_pipes::transport_layer_pipes): Rename fields.
	(transport_layer_pipes::init_security): Ditto.
	(transport_layer_pipes::listen): Ditto.
	(transport_layer_pipes::accept): Ditto.
	(transport_layer_pipes::close): Ditto.
	(transport_layer_pipes::read): Ditto.
	(transport_layer_pipes::write): Ditto.
	(transport_layer_pipes::connect): Ditto.
	(transport_layer_pipes::impersonate_client): Ditto.
	(transport_layer_pipes::revert_to_self): Ditto.
	* include/cygwin/cygserver_transport_sockets.h
	(cygserver_transport_sockets::_fd): Rename field.
	(cygserver_transport_sockets::_addr): Ditto.
	(cygserver_transport_sockets::_addr_len): Ditto.
	* cygserver_transport_sockets.cc
	(transport_layer_sockets::transport_layer_sockets): Rename fields.
	(transport_layer_sockets::listen): Ditto.
	(transport_layer_sockets::accept): Ditto.
	(transport_layer_sockets::close): Ditto.
	(transport_layer_sockets::read): Ditto.
	(transport_layer_sockets::write): Ditto.
	(transport_layer_sockets::connect): Ditto.

2002-07-27  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_shm.cc (with_strerr): Fix use of %p format.
	* shm.cc (client_shmmgr::shmat): Ditto.
	(client_shmmgr::shmctl): Ditto.
	(client_shmmgr::shmdt): Ditto.
	(client_shmmgr::attach): Ditto.

2002-07-14  Christopher Faylor  <cgf@@redhat.com>

	* woutsup.h (system_printf): Remove extraneous semicolon from macro
	definition.

2002-07-14  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_transport_pipes.cc
	(transport_layer_pipes::connect): Use ProtectHandle in DLL code.
	(transport_layer_pipes::close): Use ForceCloseHandle in DLL code.

2002-07-13  Nicholas Wourms  <nwourms@@netscape.com>

	* threaded_queue.h (class queue_submission_loop): Correct friend
	declaration for GCC 3.1.1.
	* include/cygwin/cygserver_process.h (class process): Ditto.
	(class process_cache): Ditto.

2002-07-12  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_shm.cc (server_shmmgr::shmdt): Only call
	delete_segment if the segment exists [sic].

2002-07-12  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* safe_memory.h: Include <new> rather than <new.h> for gcc 3.

2002-07-11  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* safe_memory.h: New file extracted from "woutsup.h".
	* woutsup.h: Move the "safe" new/delete macros into the new
	"safe_memory.h" header file and include that here.
	* cygserver_client.cc: Explicitly include "safe_memory.h" for
	client-side code.
	(client_request::make_request): Use the "safe" new/delete macros
	unconditionally, i.e. use them on the client side as well as on
	the server side.
	* cygserver_transport.cc: Explicitly include "safe_memory.h" for
	client-side code.
	(create_server_transport): Use the "safe" new/delete macros
	unconditionally, i.e. use them on the client side as well as on
	the server side.
	* shm.cc: Include "safe_memory.h".
	(client_shmmgr::instance): Use the "safe" new/delete macros.
	(client_shmmgr::shmdt): Ditto.
	(client_shmmgr::new_segment): Ditto.

2002-07-11  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_process (process::process): Add the client's cygpid
	and winpid to all tracing statements as appropriate.
	(process::exit_code): Ditto.
	(process_cache::check_and_remove_process): Ditto.
	* cygserver_shm.cc (server_shmmgr::shmat): Ditto.
	(server_shmmgr::shmdt): Ditto.
	(server_shmmgr::shmctl): Add a process object argument and remove
	the explicit cygpid argument.  Add the client's cygpid and winpid
	to all tracing statements as appropriate.
	(server_shmmgr::shmget): Ditto.
	(client_request_shm::serve): Update for the new signature of the
	shmctl and shmget methods.

2002-07-11  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver.cc (client_request_shutdown::serve): Don't set the
	shutdown flag directly, but send a SIGINT, as the signal handler
	sets the flag and the signal breaks the pause(2) in the main loop.
	(print_usage): Add new options.
	(main): Add new --cleanup-threads and --request-threads options to
	set the number of threads used by the daemon.  Use pause(2) rather
	the win32 Sleep in the main loop.
	* shm.cc (shmat): Add sigframe.
	(shmctl): Ditto.
	(shmdt): Ditto.
	(shmget): Ditto.

2002-07-11  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_shm.cc: Automatically detach processes from any
	segments they are attached to at exit.
	(class server_shmmgr::attach_t): New class.
	(server_shmmgr::segment_t::IS_DELETED): Rename and make private.
	(server_shmmgr::segment_t::_sequence): Make private.
	(server_shmmgr::segment_t::_flg): Ditto.
	(server_shmmgr::segment_t::_hFileMap): Ditto.
	(server_shmmgr::segment_t::_attach_head): New private field.
	(server_shmmgr::segment_t::segment_t): Initialise new fields.
	Make non-inline.
	(server_shmmgr::segment_t::~segment_t): New method.
	(server_shmmgr::segment_t::is_deleted): Ditto.
	(server_shmmgr::segment_t::is_pending_delete): Ditto.
	(server_shmmgr::segment_t::mark_deleted): Ditto.
	(server_shmmgr::segment_t::attach): Ditto.
	(server_shmmgr::segment_t::detach): Ditto.
	(server_shmmgr::segment_t::find): Ditto.
	(class server_shmmgr::cleanup_t): New class.
	(server_shmmgr::_shm_atts): New private field.
	(server_shmmgr::shmat): Add a process object argument to replace
	the removed process_cache, cygpid and winpid arguments.  Remove
	the process_cache manipulations.  Move body of code to the
	segment_t::attach method.  Increment _shm_atts when required.
	Update tracing statements.
	(server_shmmgr::shmdt): Add a process object argument to replace
	the removed cygpid argument.  Move body of code to the
	segment_t::detach method.  Decrement _shm_atts when required.
	Update tracing statements.
	(server_shmmgr::shmget): Use the new segment_t::is_deleted method.
	(server_shmmgr::server_shmmgr): Initialise the new _shm_atts
	field.
	(server_shmmgr::delete_segment): Remove the CloseHandle code, as
	this is now done in the segment_t destructor.
	(client_request_shm::serve): Look up the client's process object
	and pass to the server_shmmgr::shmat and server_shmmgr::shmdt
	methods rather than passing the cache, winpid and cygpid.
	* cygserver_process.h: Add a cygpid to the process object to make
	it more useful and then pass process objects rather than winpids
	where possible.
	(cleanup_routine::cleanup): Change argument to be a pointer to a
	process object.
	(class process): Re-order fields for no discernible reason.
	(process::_cygpid): New field.
	(process::process): Add a cygpid argument.
	(process::winpid): New method.
	(process::cygpid): Ditto.
	(process::add): Make public, as it always should have been.
	(process_cache::process): Add a cygpid argument.
	* cygserver_process.cc (process::process): Add a cygpid argument
	and use it to initialise the `_cygpid' field.  Re-order
	initialisers to match new field order.
	(process::cleanup): Pass `this' rather than just the winpid to
	cleanup_routine::cleanup.
	(process_cache::process): Add a cygpid argument and pass it to the
	process object constructor.
	* include/sys/shm.h (shmatt_t): Make unsigned as per SUSv3.
	(shm_info::shm_atts): New field.

2002-07-11  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_shm.cc (class server_shmmgr::segment_t): Add `_'
	prefix to the names of all fields.

2002-07-10  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* msg.cc: New file of stub functions, no functionality.
	* sem.cc: Ditto.
	* shm.cc (client_shmmgr::shmctl): Add support for an out shm_info
	buffer for the SHM_INFO command.
	(client_shmmgr::shmget): Use %X to print keys.
	* include/sys/ipc.h: Comment all fields and values.
	(IPC_PRIVATE): Change to be non-negative.
	* include/sys/msg.h: New file with SUSv3 and ipcs(8) interfaces.
	* include/sys/sem.h: Ditto.
	* include/sys/shm.h: Comment all fields and values.
	(struct shm_info): New struct.
	* cygserver_shm.h (client_request_shm::shminfo): Rename.
	(client_request_shm::shm_info): New method.
	(client_request_shm::_parameters.out.hFileMap): Move into union.
	(client_request_shm::_parameters.out.shminfo): Rename.
	(client_request_shm::_parameters.out.shm_info): New field.
	* cygserver_shm.cc (server_shmmgr::_shm_ids): Rename.
	(server_shmmgr::_shm_tot): New field.
	(server_shmmgr::shmctl): Rename `out_shminfo' argument.  Add
	`out_shm_info' argument.  Fill in the `out_shm_info' argument in
	the SHM_INFO command.
	(server_shmmgr::shmget): Check `shmflg' against the mode of
	existing segments as per Stevens 1990, p. 123.
	(server_shmmgr::server_shmmgr): Initialise the new `_shm_tot'
	field.
	(server_shmmgr::new_segment): Set ENOMEM if CreateFileMapping
	fails.  Pass `size' to new_segment.
	(server_shmmgr::new_segment): Add size argument and use it to
	check against and update the new `_shm_tot' field.
	(server_shmmgr::delete_segment): Update the new `_shm_tot' field.
	* Makefile.in (DLL_OFILES): Add new DLL object files.

2002-07-09  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_transport_pipes.cc: The main change is to make the
	client try harder to connect to the server if it's previously
	connected, and so has good grounds for believing that the server
	is running.
	(MAX_WAIT_NAMED_PIPE_RETRY): Change to be an enumerator.
	(WAIT_NAMED_PIPE_TIMEOUT): Ditto.
	(transport_layer_pipes::accept): Use interlocked operators on
	`pipe_instance'.
	(transport_layer_pipes::close): Rearrange so that FlushFileBuffers
	and DisconnectNamedPipe are only called for accepted endpoints.
	Use interlocked operators on `pipe_instance'.
	(transport_layer_pipes::read): Use set_errno where required.
	(transport_layer_pipes::write): Ditto.
	(transport_layer_pipes::connect): Add local static variable
	`assume_cygserver'.  Set it if a connection is made to cygserver,
	clear it if a connection is not made even after retrying.  If set,
	ignore all errors from CreateFile and retry the connection.  Catch
	the situation where WaitNamedPipe fails to wait [sic] and add a
	`Sleep (0)' so that the server gets a chance to run.

2002-07-03  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* dcrt0.cc: Only check for cygserver if and when required.
	(dll_crt0_1): Remove call to `cygserver_init ()'.
	* fhandler_tty.cc (fhandler_tty_slave::open): Change the cygserver
	logic to allow for the fact that `cygserver_init ()' may not yet
	have been called.
	(fhandler_tty_slave::cygserver_attach_tty): Tweak the cygserver
	request logic to conform to the practice elsewhere in the code.
	* tty.cc (tty::common_init): Add an explicit call to
	`cygserver_init ()' if it hasn't already been called.
	* include/cygwin/cygserver.h (CYGSERVER_UNAVAIL): Rename from
	`CYGSERVER_DEAD'.
	(client_request_get_version::check_version): Make available in
	cygserver as well the DLL.
	(check_cygserver_available): Ditto.  Remove `check_version_too'
	argument.
	(cygserver_init): Ditto.  And likewise.
	* cygserver_client.cc (client_request_get_version::check_version):
	Make available in cygserver as well the DLL.
	(client_request::make_request): This may now be called without
	`cygserver_init ()' having been called first.  Detect this and
	call it as required.  Add tracing.
	(check_cygserver_available): Make available in cygserver as well
	the DLL.  Remove `check_version_too' argument and always check the
	version information.  And since this is called from within
	`cygserver_init ()', force `cygserver_running' before calling
	`client_request::make_request ()'.
	(cygserver_init): Make available in cygserver as well the DLL.
	Remove `check_version_too' argument.

2002-07-03  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_shm.cc: Implement the ipcs(8) interfaces, IPC_INFO,
	SHM_STAT and SHM_INFO.
	(server_shmmgr::segment_t::sequence): New static field.
	(server_shmmgr::segment_t::key): Remove field, use the new
	ds.shm_perm.key field instead.
	(server_shmmgr::segment_t::shmid): Remove field.
	(server_shmmgr::segment_t::intid): New field.
	(server_shmmgr::segment_t::segment_t): Use the `key' argument to
	initialise `ds.shm_perm.key'.  Change from using `shmid' to
	`intid'.
	(server_shmmgr::_shmseg_cnt): Renamed from `_shmid_cnt'.
	(server_shmmgr::_intid_max): Renamed from `_shmid_max.
	(server_shmmgr::shmat): Move the out arguments to the start of the
	argument list.  Rename the `pid' argument as `cygpid'.  Add
	tracing.  Pass an intid to `find ()', not a shmid.
	(server_shmmgr::shmctl): Add separate out arguments.  Rename the
	`pid' argument as `cygpid'.  Add support for the ipcs(8)
	interfaces.  Add tracing.  Pass an intid to `find ()', not a
	shmid.
	(server_shmmgr::shmdt): Rename the `pid' argument as `cygpid'.
	Add tracing.  Pass an intid to `find ()', not a shmid.
	(server_shmmgr::shmget): Add a separate out arguments.  Rename the
	`pid' argument as `cygpid'.  Add tracing.
	(server_shmmgr::server_shmmgr): Update for new field names.
	(server_shmmgr::find_by_key): Update for the new `ds.shm_perm.key'
	field.
	(server_shmmgr::find): Update to use the new `segment_t::intid'
	field.
	(server_shmmgr::new_segment): Rename the `pid' argument as
	`cygpid'.  Check that the requested size is within bounds.  Handle
	new error result from `new_segment (key, HANDLE)'.
	(server_shmmgr::new_segment): Work with intids, not shmids.  Check
	that the new intid is within bounds.  Update for new field names.
	(server_shmmgr::delete_segment): Pass an intid to `find ()', not a
	shmid.  Update for new field names.
	(client_request_shm::serve): Check that the incoming message
	length is the size of the `_parameters.in' struct, not of the
	whole in/out parameter union.  Likewise, set the outgoing message
	length to the size of the `_parameters.out' struct.  Update for
	the new server_shmmgr interfaces.
	* include/sys/ipc.h (ipc_perm::key): New field.
	* include/sys/shm.h (SHM_INFO): New constant.
	* cygserver_ipc.h (IPCMNI): New constant.
	(ipc_int2ext): Add `sequence' argument and munge this into the
	external ipc id.
	(ipc_ext2int_subsys): Unmunge the sequence number from the
	external ipc id.
	(ipc_ext2int): Ditto.
	(ipc_inc_id): Remove.
	(ipc_dec_id): Remove.
	* cygserver_shm.h (SHMMAX): New constant.
	(SHMMIN): Ditto.
	(SHMMNI): Ditto.
	(SHMSEG): Ditto.
	(SHMALL): Ditto.
	(client_request_shm::_parameters): Re-arrange as a union of two
	separate structs, one for in arguments, the other for out.
	(client_request_shm::shmid): Update for the new parameter layout.
	(client_request_shm::ds): Ditto.
	(client_request_shm::info): New method.
	* shm.cc (client_shmmgr::_shmat_cnt): New static field.
	(client_shmmgr::shmat): Add locking.  Add tracing.
	(client_shmmgr::shmctl): Update for ipcs(8) commands.  Add
	tracing.  Add more argument checking.
	(client_shmmgr::shmdt): Add locking.  Add tracing.  Update the new
	`_shmat_cnt' field.
	(client_shmmgr::shmget): Add tracing.
	(client_shmmgr::fixup_shms_after_fork): Add tracing.  Add
	consistency checking.
	(client_shmmgr::attach): Add more tracing.
	(client_shmmgr::new_segment): Update the new `_shmat_cnt' field.
	(client_request_shm::client_request_shm): Update for the new
	parameter layout.  Set the outgoing message length to the size of
	the `_parameters.in' struct, not of the whole in/out parameter
	union.

2002-07-02  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* shm.cc: Remove the use of a static client_shmmgr object.
	(client_shmmgr::_instance): New static variable.
	(client_shmmgr::instance): Allocate a new shmmgr on the heap,
	rather than using a local static object.

2002-07-01  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_transport.cc (create_server_transport): Fix
	cut-and-paste error.

2002-06-30  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_client.cc (client_request::handle_request): Don't
	bother with the client request activity marker when compiled with
	debugging output.

2002-06-30  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_transport_pipes.cc
	(MAX_WAIT_NAMED_PIPE_RETRY): New constant.
	(WAIT_NAMED_PIPE_TIMEOUT): Ditto.
	(transport_layer_pipes::close): The `pipe' field is now either
	NULL or a valid handle, and it should never have the value
	`INVALID_HANDLE_VALUE'.
	(transport_layer_pipes::read): Ditto.
	(transport_layer_pipes::write): Ditto.
	(transport_layer_pipes::connect): Ditto.
	(transport_layer_pipes::impersonate_client): Ditto.
	(transport_layer_pipes::connect): Ditto.  New, but still bogus,
	retry logic.

2002-06-30  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_shm.cc (server_shmmgr::server_shmmgr): All fields have
	to be initialized now that the singleton is no longer static.

2002-06-30  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_shm.cc (server_shmmgr::_instance): New static field.
	(server_shmmgr::_instance_once): Ditto.
	(server_shmmgr::initialise_instance): New static method.
	(server_shmmgr::instance): Use a pthread_once_t rather than
	relying on a local static variable.

2002-06-30  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* woutsup.h: Remove all uses of the C++ new and delete operators
	throughout cygserver until they are fully thread-safe.
	(safe_new0): New macro to replace the C++ new operator.
	(safe_new): Ditto.
	(safe_delete): New macro to replace the C++ delete operator.
	* cygserver_client.cc (client_request::handle_request): Replace
	all uses of the C++ new and delete operators with the new macros
	from "woutsup.h".
	(client_request::make_request): Ditto.
	* cygserver_process.cc (~process_cleanup): Ditto.
	(process::cleanup): Ditto.
	(process_cache::process): Ditto.
	(process_cache::check_and_remove_process): Ditto.
	* cygserver_shm.cc (server_shmmgr::new_segment): Ditto.
	(server_shmmgr::delete_segment): Ditto.
	* cygserver_transport.cc (create_server_transport): Ditto.
	* cygserver_transport_pipes.cc
	(transport_layer_pipes::accept): Ditto.
	* cygserver_transport_sockets.cc
	(transport_layer_sockets::accept): Ditto.
	* threaded_queue.cc (~threaded_queue): Ditto.
	(threaded_queue::worker_loop): Ditto.
	(threaded_queue::stop): Replace sleep(3) with win32 Sleep.
	* cygserver.cc (~server_request): Replace all uses of the C++ new
	and delete operators with the new macros from "woutsup.h".
	(server_submission_loop::request_loop): Ditto.
	(main): Ditto.  Replace sleep(3) with win32 Sleep.  Replace
	iostreams with FILEs.
	(print_usage): Replace iostreams with FILEs.
	(print_version): Ditto.

2002-06-30  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_transport_sockets.cc
	(transport_layer_sockets::accept): Rename local variable
	`accept_fd' to avoid shadowing the `fd' field.

2002-06-29  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygwin_ipc.h: Moved (back) to "include/sys/ipc.h".
	* cygwin_shm.h: Moved (back) to "include/sys/shm.h".
	* include/sys/ipc.h: New file.
	* include/sys/shm.h: New file.
	* cygserver_shm.h: Update for new header file locations.
	* ipc.cc: Ditto.

2002-06-28  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_client.cc (client_request::make_request): Comment out
	a verbose tracing statement.
	* cygserver_process.cc (process_cache::sync_wait_array): Fix
	broken assert.
	* include/cygwin/cygserver.h (class client_request): Remove excess
	use of `class' qualifier in declarations.
	(class client_request_get_version): Ditto.
	(class client_request_shutdown): Ditto.
	(class client_request_attach_tty): Ditto.

2002-06-28  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_ipc.h: New file.
	* cygserver_shm.h: Re-written from scratch.
	* cygserver_shm.cc: Ditto.
	* shm.cc: Ditto.

2002-06-28  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* threaded_queue.h (class queue_request): Re-write.
	(threaded_queue_thread_function): Remove.
	(class queue_process_param): Remove.
	(class threaded_queue): Re-write.
	(class queue_submission_loop): New version of the old
	`queue_process_param' class.
	(TInterlockedExchangePointer): New templated function.
	(TInterlockedCompareExchangePointer): Ditto.
	* threaded_queue.cc (worker_function): Remove.
	(class threaded_queue): Re-write.
	(class queue_process_param): Remove.
	(class queue_submission_loop): New version of the old
	`queue_process_param' class.
	* include/cygwin/cygserver_process.h (process_cleanup): Re-write.
	(class process_process_param): Remove.
	(class cleanup_routine): Re-write.
	(class process): Re-write.
	(class process_cache): Re-write.
	* cygserver_process.cc (process_cleanup): Re-write.
	(class process_process_param): Remove.
	(class cleanup_routine): Re-write.
	(class process): Re-write.
	(class process_cache): Re-write.
	* cygserver.cc (request_count): Remove unused variable.
	(class server_request): Move methods inline.
	(class server_process_param): Remove.
	(class server_request_queue): Remove.
	(request_queue): Move into `main ()' and change type to
	`threaded_queue'.
	(request_loop): Remove.
	(class server_submission_loop): New version of the old
	`server_process_param' class.
	(shutdown_server): New variable.
	(client_request_shutdown::serve): Set `shutdown_server' to trigger
	shutdown.
	(handle_signal): Ditto.
	(main): Install signal handler for SIGINT rather than SIGQUIT.
	Use new interfaces for the `request_queue' and the `cache'.
	Create a `server_submission_loop' and add to the `request_queue'.
	Add check for the `shutdown_server' variable to the main loop.
	* cygserver_shm.cc (client_request_shm::serve): Release the
	process object after use.

2002-06-27  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_client.cc (client_request::handle_request): Correct
	tracing statement.
	* cygserver_transport_pipes.cc: Remove local definition of
	FILE_FLAG_FIRST_PIPE_INSTANCE constant.
	* cygwin_ipc.h: Update copyright notice.
	* cygwin_shm.h: Ditto.
	* woutsup.h: Add definition of _WIN32_WINNT.

2002-06-24  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_client (client_request::make_request): Replace my
	inappropriate use of set_errno () with error_code () throughout.

2002-06-24  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* include/cygwin/cygserver.h: Add forward declarations of class
	transport_layer_base and class process_cache to reduce
	dependencies between header files.
	* include/cygwin/cygserver_process.h: Add include of
	"threaded_queue.h".
	* cygserver.cc: Remove unnecessary cygserver header files.
	* cygserver_client.cc: Ditto.
	* cygserver_process.cc: Ditto.
	* cygserver_shm.cc: Ditto.
	* cygserver_shm.h: Ditto.
	* cygserver_transport_pipes.cc: Ditto.
	* dcrt0.cc: Ditto.
	* fhandler_tty.cc: Ditto.
	* tty.cc: Ditto.

2002-06-24  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_shm.h: Replace <sys/shm.h> with "cygwin_shm.h" after
	merge from HEAD.
	* cygwin_ipc.h: Update with changes to include/sys/ipc.h lost in
	merge from HEAD.
	* cygwin_shm.h: Ditto.

2002-06-21  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver.cc: The tests for a duplicate server instance are now
	the responsibility of the transport layer.
	(request_loop): Use new `recoverable' flag in call to
	`cygserver_transport::accept ()' and shutdown on an unrecoverable
	error.
	(main): Never call `cygserver_init ()'.  Fake `cygserver_running'
	just for sending a shutdown request.
	* cygserver_client.cc (client_request::send): Comment out
	message-size tracing statements as verbose.
	(client_request::handle): Ditto.
	(client_request_get_version::check_version): #ifdef as DLL-only.
	(check_cygserver_available): Ditto.
	(cygserver_init): Ditto.
	* include/cygwin/cygserver.h
	(client_request_get_version::check_version): #ifdef as DLL-only.
	(check_cygserver_available): Ditto.
	(cygserver_init): Ditto.
	* include/cygwin/cygserver_transport.h
	(transport_layer_base::impersonate_client): #ifdef as
	cygserver-only.
	(transport_layer_base::revert_to_self): Ditto.
	(transport_layer_base::listen): Ditto.
	(transport_layer_base::accept): Ditto.  Add a `recoverable' out
	flag for error handling.
	* include/cygwin/cygserver_transport_sockets.h: Ditto.
	* include/cygwin/cygserver_transport_pipes.h: Ditto.
	(transport_layer_pipes): Change type of the `pipe_name' field.
	Remove the `inited' field, as unnecessary.  Add new
	`is_accepted_endpoint' field.
	* include/cygwin/cygserver_transport.cc
	(transport_layer_base::impersonate_client): #ifdef as
	cygserver-only.
	(transport_layer_base::revert_to_self): Ditto.
	* include/cygwin/cygserver_transport_sockets.cc
	(transport_layer_sockets::listen): #ifdef as cygserver-only.
	(transport_layer_sockets::accept): #ifdef as cygserver-only.
	Analyse any errno from `accept ()' and set `recoverable' as
	appropriate.
	* cygserver_transport_pipes.cc: Add local #define of
	`FILE_FLAG_FIRST_PIPE_INSTANCE'.
	(pipe_instance_lock_once): New variable.
	(pipe_instance_lock): Ditto.
	(pipe_instance): Ditto.
	(initialise_pipe_instance_lock): New function.
	(transport_layer_pipes::transport_layer_pipes): Change
	initialization of `pipe_name'.  Initialize `is_accepted_endpoint'
	as appropriate.  Remove use of `inited'.
	(transport_layer_pipes::impersonate_client): #ifdef as
	cygserver-only.
	(transport_layer_pipes::revert_to_self): Ditto.
	(transport_layer_pipes::listen): Ditto.
	(transport_layer_pipes::accept): Ditto.  Keep track of how often
	many named pipes have been created, in the `pipe_instance'
	variable, and pass the `FILE_FLAG_FIRST_PIPE_INSTANCE' flag on the
	open of the first instance.  Analyse the error code from
	`CreateNamedPipe ()' and set the `recoverable' flag as
	appropriate.
	(transport_layer_pipes::close): Update the `pipe_instance' count.

2002-06-18  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* woutsup.h (cygserver_running): Add declaration.
	(api_fatal): Eliminate.
	* include/cygwin/cygserver.h
	(client_request_get_version::check_version): Change return type to
	bool.
	(check_cygserver_available): New function.
	(cygserver_init): Add check_version_too argument.
	* cygserver_client.cc (allow_daemon): Make a bool.
	(client_request_get_version::make_request): See errno on error.
	Remove special case for CYGSERVER_REQUEST_GET_VERSION; this is now
	handled in cygserver_init().
	(client_request_get_version::check_version): Use syscall_printf()
	instead of api_fatal(). Return true if cygserver version is
	compatible.
	(check_cygserver_available): New function; code moved here from
	cygserver_init().
	(cygserver_init): Move some code into check_cygserver_available().
	* cygserver.cc (__set_errno): Copy from debug.cc so that
	set_errno() can be used when __OUTSIDE_CYGWIN__.
	(main): Call cygserver_init() to set up cygserver_running and add
	checks against this to (try and) prevent multiple copies of
	cygserver running simultaneously.  Remember to delete all
	transport connections so that (one day) the transport classes can
	tidy up on cygserver shutdown.

2002-06-17  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver.cc (main): Adjust tracing output for a cleaner display
	when compiled without --enable-debugging.
	* threaded_queue.cc (threaded_queue::cleanup): Ditto.
	(queue_process_param::stop): Ditto.
	* include/cygwin/cygserver.h
	(client_request::make_request): Make non-virtual.
	(client_request::send): Make virtual and protected, not private.
	(client_request_attach_tty::send): New virtual method.
	* cygserver_client.cc: Use the `msglen()' accessor rather than
	`_header.msglen' throughout.
	(client_request_attach_tty::send): New method.
	(client_request::make_request): Remove the explicit close of
	`transport' as it is closed on deletion.

2002-06-17  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* include/cygwin/cygserver.h: Change the client_request classes to
	give greater encapsulation and to allow variable length requests
	and replies.
	(enum cygserver_request_code): Now client_request::request_code_t.
	(class request_header): Now client_request::header_t.  Make a
	union of the request_code and the error_code.  The `cb' field,
	which was the buffer length, is now the `size_t msglen' field.
	(struct request_get_version): Now
	client_request_get_version::request_get_version.
	(struct request_shutdown): Remove unused type.
	(struct request_attach_tty): Now
	client_request_attach_tty::request_attach_tty.
	(client_request::_buf): Make field const.
	(client_request::_buflen): New const private field.
	(client_request::request_code): New accessor.
	(client_request::error_code): Ditto.
	(client_request::msglen): Ditto.
	(client_request::handle_request): New static method.
	(client_request::make_request): New virtual method.
	(client_request::handle): New method.
	(client_request::send): Make private.
	(client_request_get_version::check_version): New method.
	(client_request_get_version::serve): Make private.
	(client_request_get_version::version): Ditto.
	(client_request_shutdown::serve): Ditto.
	(client_request_attach_tty::req): Ditto.
	(client_request_attach_tty::serve): Ditto.
	(client_request_attach_tty::from_master): Make method const.
	(client_request_attach_tty::from_master): Ditto.
	* cygserver_client.cc
	(client_request_get_version::client_request_get_version): Track
	changes to the client_request classes.
	(client_request_attach_tty::client_request_attach_tty): Ditto.
	(client_request_get_version::check_version): New method to
	encapsulate code from cygserver_init().
	(client_request_shutdown::client_request_shutdown): Move into
	"cygserver.cc".
	(client_request::send): Track changes to the client_request
	classes.  Add more error checking.
	(client_request::handle_request): New static method containing the
	first half of the old server_request::process() code.
	(client_request::make_request): New method to replace the old
	cygserver_request() function.
	(client_request::handle): New method containing the second half of
	the old server_request::process() code.
	(cygserver_init): Track changes to the client_request classes.  In
	particular, some code moved into the
	client_request_get_version::check_version() method.
	* cygserver.cc (client_request_attach_tty::serve): Track changes
	to the client_request classes.  In particular, only return a reply
	body if some handles are successfully duplicated for the client.
	And remove goto's.
	(client_request_get_version::serve): Track changes to the
	client_request classes.
	(client_request_shutdown::serve): Ditto.
	(class client_request_invalid): Dead, and so young too.
	(server_request::request_buffer): Remove unnecessary field.
	(client_request_shutdown::client_request_shutdown): Moved here
	from "cygserver_client.cc".
	(server_request::process): Implementation moved into the new
	client_request::handle_request() and client_request::handle()
	methods.
	* cygserver_shm.h (class client_request_shm): Put client- and
	server-specific interfaces inside #ifdef/#ifndef __INSIDE_CYGWIN__
	guards.
	(client_request_shm::serve): Make private.
	* cygserver_shm.cc
	(client_request_shm::client_request_shm): Track changes to the
	client_request classes.
	(client_request_shm::serve): Ditto
	* shm.cc (client_request_shm::client_request_shm): Ditto.  Use
	alloc_sd() rather than set_security_attribute() to get access to
	the SECURITY_DESCRIPTOR length, so that we can use it to set the
	request body length.
	(shmat): Track changes to the client_request classes. In
	particular, allocate client_request objects on the stack rather
	than on the heap, and use the client_request::make_request()
	method rather than the old cygserver_request() function.
	(shmdt): Ditto.
	(shmctl): Ditto.
	(shmget): Ditto.
	* fhandler_tty.cc (fhandler_tty_slave::cygserver_attach_tty): Ditto.

2002-06-17  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* include/cygwin/cygserver_transport.h
	(cygserver_transport::read): Change buffer type to void *.
	(cygserver_transport::write): Ditto.
	* include/cygwin/cygserver_transport_sockets.h
	(cygserver_transport_sockets::read): Ditto.
	(cygserver_transport_sockets::write): Ditto.
	* include/cygwin/cygserver_transport_pipes.h
	(cygserver_transport_pipes::read): Ditto.
	(cygserver_transport_pipes::write): Ditto.
	* cygserver_transport_sockets.cc
	(cygserver_transport_sockets::read): Ditto.
	(cygserver_transport_sockets::write): Ditto.
	* cygserver_transport_pipes.cc
	(cygserver_transport_pipes::read): Ditto. Set errno on error, to
	match behaviour of cygserver_transport_sockets class.
	(cygserver_transport_pipes::write): Ditto.

2002-06-16  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver.cc (version): New static variable.
	(server_request_queue::add_connection): Remove my gratuitous use
	of studly caps.
	(setup_privileges): Declare static.
	(handle_signal): Ditto.
	(longopts): Make a local variable of main().
	(opts): Ditto.
	(print_usage): New function.
	(print_version): Ditto (tip of the hat to Joshua Daniel Franklin
	for inspiration here).
	(main): More argument checking.  Add --help and --version options.

2002-06-16  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* include/cygwin/cygserver.h (client_request::serve): Make pure
	virtual.
	* cygserver.cc (client_request::serve): Remove definition of pure
	virtual method.
	(class client_request_invalid): New class.
	(server_request::process): Use new client_request_invalid
	class. And remove goto's.

2002-06-16  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver.cc (class server_request): Add virtual destructor.
	(server_request_queue::addConnection): New method to replace bad
	virtual add() method.
	(request_loop): Replace call to queue->add() with call to
	queue->addConnection().
	(server_request::server_request): Use field initialization.
	(server_request::~server_request): New virtual destructor.
	(server_request::process): Remove close and delete of
	transport_layer_base object. It is deleted by the server_request's
	own destructor and closed by its own destructor.
	* include/cygwin/cygserver.h
	(client_request::operator request_header): Remove unused method.
	* cygserver_client.cc: Ditto.
	* include/cygwin/cygserver_process.h
	(class cleanup_routine): Add virtual destructor.
	(cleanup_routine::cleanup): Make pure virtual.
	(class process_cache): Make destructor non-virtual.
	(process_cache::add): Ditto.
	* cygserver_process.cc
	(cleanup_routine::~cleanup_routine): New virtual destructor.
	* include/cygwin/cygserver_transport.h
	(class transport_layer_base): Add virtual destructor.
	* cygserver_transport.cc
	(transport_layer_base::~transport_layer_base): New virtual
	destructor.
	* include/cygwin/cygserver_transport_pipes.h
	(class transport_layer_pipes): Add virtual destructor.
	* cygserver_transport_pipes.cc
	(transport_layer_pipes::~transport_layer_pipes): New virtual
	destructor.
	(transport_layer_pipes::close): Null out handle after closing.
	* include/cygwin/cygserver_transport_sockets.h
	(class transport_layer_sockets): Add virtual destructor.
	* cygserver_transport_sockets.cc
	(transport_layer_sockets::~transport_layer_sockets): New virtual
	destructor.
	(transport_layer_sockets::close): Null out fd after closing.
	* threaded_queue.h (class queue_request): Add virtual destructor.
	(queue_request::process): Make pure virtual.
	* threaded_queue.cc (~queue_request): New virtual destructor.
	(queue_request::process): Remove definition of pure virtual
	method.

2002-06-16  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* include/cygwin/cygserver.h (client_request::send): Make
	non-virtual.
	(class client_request_attach_tty): Put client- and server-specific
	interfaces inside #ifdef/#ifndef __INSIDE_CYGWIN__ guards.
	* cygserver_client.cc: Ditto.
	(cygserver_init): Fix error handling.

2002-06-16  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver.cc: Throughout the code, check and correct level of
	the XXX_printf() functions used. Comment out several of the
	debug_printf() calls with "// verbose:".  Reformat and correct
	typos of some of the XXX_printf() formats.
	* cygserver_process.cc: Ditto.
	* cygserver_shm.cc: Ditto.
	* cygserver_transport_pipes.cc: Ditto.
	* cygserver_transport_sockets.cc: Ditto.
	* shm.cc (hi_ulong): New function to allow printing of a 64-bit
	key with current small_printf implementation.
	(lo_ulong): Ditto.
	(client_request_shm::client_request_shm): Use hi_ulong() and
	lo_ulong() in call to debug_printf().

2002-06-16  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver_shm.cc: Remove #define __INSIDE_CYGWIN__ from around
	<sys/shm.h> as it no longer contains any internal code.

2002-06-16  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* include/sys/ipc.h (IPC_PRIVATE): Add cast to key_t.
	(IPC_INFO): New flag for ipcs(8).
	(IPC_RMID IPC_SET IPC_STAT): Renumber.
	* include/sys/shm.h (SHM_RDONLY SHM_RND): Renumber with distinct
	values [sic].
	(class _shmattach): Internal type moved to "cygserver_shm.h".
	(class shmnode): Ditto.
	(class shmid_ds): Ditto.
	(struct shmid_ds): Add spare fields.
	(struct shminfo): New type for IPC_INFO interface.
	* cygserver_shm.h: Remove obsolete #if 0 ... #endif block.
	(class shm_cleanup): Remove unused class.
	(struct _shmattach): Internal type moved from <sys/shm.h>.
	(struct shmnode): Ditto.
	(struct int_shmid_ds): Ditto. Renamed to avoid name clash with
	public interface struct shmid_ds. Use the shmid_bs structure as a
	field.
	* cygserver_shm.cc: Remove obsolete #if 0 ... #endif block.
	(client_request_shm::serve): Update for redefinition of
	int_shmid_ds structure.
	* shm.cc (build_inprocess_shmds): Ditto.
	(fixup_shms_after_fork): Ditto.
	(shmctl): Ditto.
	(shmget): Ditto. Remove obsolete #if 0 ... #endif code.

2002-06-16  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* include/cygwin/cygserver_transport.h
	(transport_layer_base::transport_layer_base): Remove since it is
	now redundant.
	(transport_layer_base::listen): Make a pure virtual method.
	(transport_layer_base::accept): Ditto.
	(transport_layer_base::close): Ditto.
	(transport_layer_base::read): Ditto.
	(transport_layer_base::write): Ditto.
	(transport_layer_base::connect): Ditto.
	* cygserver_transport.cc
	(transport_layer_base::transport_layer_base): Remove since it is
	now redundant.
	(transport_layer_base::listen): Remove since it is now a pure
	virtual method.
	(transport_layer_base::accept): Ditto.
	(transport_layer_base::close): Ditto.
	(transport_layer_base::read): Ditto.
	(transport_layer_base::write): Ditto.
	(transport_layer_base::connect): Ditto.

2002-06-16  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* cygserver.cc (check_and_dup_handle): Only use security code if
	running on NT, i.e. if wincap.has_security().
	(client_request_attach_tty::serve): Add check for has_security().
	* cygserver_process.cc (process_cache::process): Use DWORD winpid
	throughout to avoid win32 vs. cygwin pid confusion.
	(process::process): Ditto.
	* cygserver_shm.cc (client_request_shm::serve): Only use security
	code if running on NT, i.e. if wincap.has_security().
	* cygserver_shm.h (client_request_shm::parameters.in): Replace the
	ambiguous pid field with cygpid and winpid fields.
	(client_request_shm::client_request_shm): Reduce to only two
	client-side constructors: one for SHM_CREATE, another for all the
	other requests.
	* shm.cc (client_request_shm::client_request_shm):
	Ditto. Initialize cygpid and winpid fields here. On NT initialize
	sd_buf here using set_security_attribute() to make use of the euid
	and egid.
	(shmat): Use new client_request_shm constructor.
	(shmdt): Ditto.
	(shmctl): Ditto.
	(shmget): Ditto. Remove security code, now performed in the
	relevant client_request_shm constructor.
	* include/cygwin/cygserver_process.h: (class cleanup_routine):
	Change winpid type to DWORD.
	(class process): Ditto.

2002-06-15  Conrad Scott  <conrad.scott@@dsl.pipex.com>

	* woutsup.h: New file.
	* cygserver.cc: Use "woutsup.h" and new XXX_printf macros.
	(getfunc): New function, copied verbatim from "strace.cc".
	(__cygserver__printf): New function.
	* cygserver_client.cc: Use "woutsup.h" and new XXX_printf macros.
	* cygserver_process.cc: Ditto.
	* cygserver_shm.cc: Ditto.
	* cygserver_transport.cc: Ditto.
	* cygserver_transport_pipes.cc: Ditto.
	* cygserver_transport_sockets.cc: Ditto.
	* threaded_queue.cc: Ditto.
	* shm.cc: Remove trailing \n from XXX_printf format strings.
	* Makefile.in: Remove special __OUTSIDE_CYGWIN__ case for
	cygserver_shm.cc.
@
text
@d1027 1
@


1.149
log
@Cleanup calls to CreateFile throughout.
* dcrt0.cc (__api_fatal): Correctly check for failing return from CreateFile.
* assert.cc (__assert): Don't check return value from CreateFile for NULL.
* fhandler_console.cc (set_console_state_for_spawn): Ditto.
* fork.cc (fork_parent): Ditto.
@
text
@a36 2
#include "cygwin/cygserver_transport.h"
#include "cygwin/cygserver.h"
a685 2

  cygserver_init ();
@


1.148
log
@* dcrt0.cc (dll_crt0_1): Remove getpagesize() call.
* shared.cc (memory_init): Move it here.
@
text
@d1060 4
a1063 4
      HANDLE h = CreateFileA ("CONOUT$", GENERIC_READ|GENERIC_WRITE,
			      FILE_SHARE_WRITE | FILE_SHARE_WRITE, &sec_none,
			      OPEN_EXISTING, 0, 0);
      if (h)
@


1.147
log
@* child_info.h: Add _PROC_WHOOPS enum value.
(CURR_CHILD_INFO_MAGIC): Update.
(child_info::magic): Make 'long'.
* cygheap.h: Export _cygheap_start.
* cygheap.cc: Don't declare _cygheap_start.
* cygmagic: Use cksum to produce checksums.  Append 'U' to end of checksum.
* dcrt0.cc (initial_env): Calculate sleep ms before reusing buffer.
(_dll_crt0): Detect cygheap mismatch as indicative of different cygwin version.
Set child_proc_info to NULL when _PROC_WHOOPS.
(multiple_cygwin_problem): If child_info specific problem, then set
child_proc_info type to _PROC_WHOOPS.
* shared_info.h (CURR_MOUNT_MAGIC): Update.
(CURR_SHARED_MAGIC): Ditto.
@
text
@a570 2
  (void) getpagesize ();	/* initialize page size constant */

@


1.146
log
@* perthread.h (vfork_save): Add ctty, sid, pgid, exitval fields.
(vfork_save::restore_pid): New method.
(vfork_save::restore_exit): New method.
* fork.cc (vfork): Save ctty, sid, pgid and restore them when returning to
"parent".  Use exitval field if exiting but never created a new process.
* syscalls.cc (setsid): Detect when in "vfork" and force an actual fork so that
pid will be allocated (UGLY!).
(getsid): New function.
* dcrt0.cc (do_exit): Use vfork_save::restore_exit method for returning from a
vfork.
* spawn.cc (spawnve): Use vfork_save::{restore_pid,restore_exit} methods for
returning from vfork.
* cygwin.din: Export getsid.
* include/cygwin/version.h: Bump api minor number.
* malloc.cc: #ifdef sYSTRIm for when MORECORE_CANNOT_TRIM is true.
@
text
@d799 1
d802 2
a803 2
      console_printf ("Sleeping %d, pid %u %s\n", atoi (buf), GetCurrentProcessId (), buf);
      Sleep (atoi (buf));
d876 5
a880 1
	multiple_cygwin_problem ("proc", child_proc_info->magic, CHILD_INFO_MAGIC);
d904 2
d1081 1
a1081 1
  if (_cygwin_testing && strstr (what, "proc"))
d1083 1
a1083 1
      fork_info = NULL;
@


1.145
log
@* Makefile.in: Add support for new malloc.o and renamed malloc_wrapper.o.  Use
-fomit-frame-pointer for malloc.o compilation.
* malloc_wrapper.cc: New file.  Rename from malloc.cc.  Add support for more
malloc functions.  Eliminate export_* calls.  Just use straight malloc names.
Remove unused argument from malloc lock functions.
* cygwin.din: Just export straight malloc names.  Add malloc_stats,
malloc_trim, malloc_usable_size, mallopt, memalign, valloc.
* dcrt0.cc (__cygwin_user): Eliminate export_* malloc entries.
* fork.cc (fork_parent): Remove unused argument from malloc_lock argument.
* malloc.cc: New file.  Doug Lea's malloc v2.7.1.
* cygmalloc.h: New file.
* include/cygwin/version.h: Bump API_MINOR.
* sync.h (muto::acquire): Use appropriate number for regparm attribute.
(muto::reset): Ditto.
(muto::release): Ditto.
@
text
@d964 1
a964 4
    {
      vf->pid = status < 0 ? status : -status;
      longjmp (vf->j, 1);
    }
@


1.144
log
@* dcrt0.cc: Modify define for CYGWIN_GUARD.
(alloc_stack_hard_way): Just use CYGWIN_GUARD in VirtualAlloc call.
@
text
@a82 5
  void *export_malloc (unsigned int);
  void export_free (void *);
  void *export_realloc (void *, unsigned int);
  void *export_calloc (unsigned int, unsigned int);

d95 2
a96 2
   /* malloc */ export_malloc, /* free */ export_free,
   /* realloc */ export_realloc,
d100 1
a100 1
   /* calloc */ export_calloc,
@


1.143
log
@make comment more accurate.
@
text
@d460 2
a461 1
#define CYGWIN_GUARD ((wincap.has_page_guard ()) ? PAGE_GUARD : PAGE_NOACCESS)
d502 1
a502 1
			 PAGE_EXECUTE_READWRITE|CYGWIN_GUARD))
@


1.142
log
@* assert.cc (__assert): Call debugger on assertion failure if debugging.
* dcrt0.cc (dll_crt0_1): Just wait for signal thread to go live rather than
going through the overhead of invoking it.
* fork.cc (fork_child): Ditto.
* exceptions.cc (signal_fixup_after_fork): Call sigproc_init here.
* sigproc.cc (proc_can_be_signalled): Assume that the signal thread is live.
(sig_dispatch): Ditto.
(sig_send): Ditto.
(wait_for_sigthread): Renamed from "wait_for_me".  Assume that wait_sig_inited
has been set and that this function is only called from the main thread.
* winsup.h (wait_for_sigthread): Declare new function.
@
text
@d163 4
a166 4
 * Replaces -@@file in the command line with the contents of the file.
 * There may be multiple -@@file's in a single command line
 * A \-@@file is replaced with -@@file so that echo \-@@foo would print
 * -@@foo and not the contents of foo.
@


1.141
log
@* Makefile.in (DLL_OFILES): Add cygthread.o.
* dcrt0.cc (dll_crt0_1): Eliminate various thread initialization functions in
favor of new cygthread class.
* debug.cc: Remove thread manipulation functions.
* debug.h: Ditto.
* external.cc (cygwin_internal): Use cygthread method for determining thread
name.  Remove capability for setting thread name.
* fhandler_console.cc (fhandler_console::read): Use cygthread method rather
than iscygthread function.
* fhandler_tty.cc (fhandler_tty_master::fhandler_tty_master): Use cygthread
methods to create threads.
(fhandler_tty_common::__acquire_output_mutex): Use cygthread method to retrieve
thread name.
* select.cc (pipeinf): Use cygthread pointer rather than handle.
(start_thread_pipe): Ditto.
(pipe_cleanup): Ditto.
(serialinf): Ditto.
(start_thread_serial): Ditto.
(serial_cleanup): Ditto.
(socketinf): Ditto.
(start_thread_socket): Ditto.
(socket_cleanup): Ditto.
* sigproc.cc (hwait_sig): Ditto.
(hwait_subproc): Ditto.
(proc_terminate): Ditto.
(sigproc_terminate): Ditto.
(sigproc_init): Initialize cygthread hwait_sig pointer.
(subproc_init): Initialize cygthread hwait_subproc pointer.
(wait_sig): Rely on cygthread HANDLE operator.
* strace.cc (strace::vsprntf): Use cygthread::name rather than threadname.
* window.cc (gethwnd): Use cygthread method to initialize thread.
@
text
@d777 1
a777 1
  sig_send (NULL, __SIGFLUSH);
@


1.140
log
@* dcrt0.cc (dll_crt0_1): Move debug_fixup_after_fork_exec.
* cygheap.cc (cygheap_fixup_in_child): Call debug_fixup_after_fork_exec
immediately after cygheap has ben set up.
@
text
@d36 1
d44 2
a45 2
HANDLE NO_COPY hMainProc = NULL;
HANDLE NO_COPY hMainThread = NULL;
a574 1
  threadname_init ();
a576 1
  regthread ("main", GetCurrentThreadId ());
d634 1
@


1.139
log
@* dcrt0.cc (initial_env): Force path and CYGWIN_DEBUG contents to lower case.
* exceptions.cc (error_start_init): Use the name derived from GetModuleName
rather than myself->progname.
@
text
@a629 1
      debug_fixup_after_fork_exec ();
@


1.138
log
@* dcrt0.cc (dll_crt0_1): Move debug_init call back to here.  Avoid a compiler
warning.
* shared.cc (memory_init): Remove debug_init call.
* debug.h (handle_list): Change "clexec" to "inherited".
* debug.cc: Remove a spurious declaration.
(setclexec): Conditionalize away since it is currently unused.
(add_handle): Use inherited field rather than clexec.
(debug_fixup_after_fork_exec): Ditto.  Move debugging output to delete_handle.
(delete_handle): Add debugging output.
* fhandler.cc (fhandler_base::set_inheritance): Don't bother setting
inheritance in debugging table since the handle was never protected anyway.
(fhandler_base::fork_fixup): Ditto.
* exceptions.cc (debugger_command): Revert.
@
text
@d813 2
@


1.137
log
@* dcrt0.cc (dll_crt0_1): Delay closing of some handles until cygheap has been
set up.
(break_here): New function, for debugging.
(initial_env): Add program name to "Sleeping" message.  Implement new
"CYGWIN_DEBUG" environment variable option.
* exceptions.cc (debugger_command): Add argument to dumper call.
* strace.cc (strace::hello): Use winpid if cygwin pid is unavailable.
(strace::vsprntf): Ditto.
@
text
@d636 1
d640 4
d815 1
a815 1
	p = "gdb.exe -nw";
@


1.136
log
@* debug.h (handle_list): Move here from debug.cc.  Add "inherit" flag
functionality.
* cygheap.cc (init_cheap): Move cygheap_max calculation to _csbrk.
(_csbrk): Reorganize to not assume first allocation is <= 1 page.
(cygheap_setup_for_child): Mark protected handle as inheritable.
* cygheap.h (cygheap_debug): New struct.
(init_cygheap): Add new structure when debugging.
* dcrt0.cc (dll_crt0_1): Remove call to debug_init.  Close ppid_handle here, if
appropriate.  Don't protect subproc_ready, since it is already protected in the
parent.  Call memory_init prior to ProtectHandle to ensure that cygheap is set
up.  Call debug_fixup_after_fork_exec when appropriate.
(_dll_crt0): Don't close ppid_handle here.
* debug.cc: Use cygheap debug structure rather than static elements throughout.
(add_handle): Don't issue a warning if attempt to protect handle in exactly the
same way from exactly the same place.  Add pid info to warning output.  Accept
additional argument controlling whether handle is to be inherited.  Add pid to
stored information.
(debug_fixup_after_fork_exec): Renamed from debug_fixup_after_fork.  Reorganize
to avoid erroneously skipping handles.
(mark_closed): Add pid info to warning output.
(setclexec): Rename from setclexec_pid.
* fhandler.cc (fhandler_base::get_default_fmode): Minor reorg.
(fhandler_base::fstat): Add debugging output.
(fhandler_base::set_inheritance): Call setclexec rather than setclexec_pid.
(fhandler_base::fork_fixup): Ditto.
* fhandler_console.cc (get_tty_stuff): Mark protected handle as inheritable.
* fhandler_tty.cc (fhandler_tty_slave::open): Ditto.
* tty.cc (tty::make_pipes): Ditto.
(tty::common_init): Ditto.
* fork.cc (fork_parent): Ditto.
(fork_child): Close protected handles with correct name.  Remove
debug_fixup_after_fork call.
* fhandler_socket.cc (fhandler_socket::create_secret_event): Mark protected
handle as inheritable/non-inheritable, as appropriate.
* shared.cc (memory_init): Mark protected handle as inheritable.  Call
debug_init here.
* sigproc.cc (wait_sig): Close protected handle with correct name.
* spawn.cc (spawn_guts): Rename spr to subproc_ready and mark it as
inheritable.
* exceptions.cc (debugger_command): Try to run dumper.exe, if found.
* syscalls.cc (fstat64): Don't follow symlinks for path_conv lookup since path
is already resolved.
@
text
@d586 2
d594 1
d597 3
a599 4
	    if (spawn_info->hexec_proc)
	      CloseHandle (spawn_info->hexec_proc);
	    if (child_proc_info->pppid_handle)
	      CloseHandle (child_proc_info->pppid_handle);
d626 4
d783 8
d794 1
d799 3
a801 1
      console_printf ("Sleeping %d, pid %u\n", atoi (buf), GetCurrentProcessId ());
d804 16
a824 1
      DWORD len;
@


1.135
log
@* cygheap.cc (cfree_and_set): New function.
(cygheap_user::set_name): Use cfree_and_set to reset members.
* cygheap.h (cygheap_user): Delete static members.
(cygheap_user::puserprof): New member.
(cfree_and_set): Declare.
* dcrt0.cc (almost_null): Define.
* winsup.h (almost_null): Declare.
* syscalls.cc (cfree_and_set): Remove unused variable.
* uinfo.cc (cygheap_user::homepath_env_buf): Eliminate.
(cygheap_user::homedrive_env_buf): Ditto.
(cygheap_user::userprofile_env_buf): Ditto.
(cygheap_user::ontherange): YA change to try to preserve existing HOMEPATH and
HOMEDRIVE.  Return almost_null values when variables should not actually exist.
(cygheap_user::env_logsrv): Ditto.
(cygheap_user::env_domain): Ditto.
(cygheap_user::env_userprofile): Ditto.
@
text
@a574 1
  debug_init ();
a591 1
	    ProtectHandle (fork_info->forker_finished);
d596 2
a621 2
	    if (child_proc_info->subproc_ready)
	      ProtectHandle (child_proc_info->subproc_ready);
d624 1
a625 2
  ProtectHandle (hMainProc);
  ProtectHandle (hMainThread);
d630 3
a849 3
	    if (child_proc_info->pppid_handle)
	      CloseHandle (child_proc_info->pppid_handle);
	    /* fall through */;
@


1.134
log
@	* dcrt0.cc (dll_crt0_1): Let __progname point to the applications
	basename.  Move eliminating ".exe" suffix from argv[0] so that it
	always also affects __progname.
@
text
@d78 2
@


1.133
log
@* dcrt0.cc (_dcrt0): Be more defensive when reserved block is used and it's not
cygwin info.
@
text
@a706 3
	  char *p = strchr (new_argv0, '\0') - 4;
	  if (p > new_argv0 && strcasematch (p, ".exe"))
	    *p = '\0';
d719 10
a728 1
  __progname = __argv[0];
@


1.132
log
@* winsup.h: Minor cleanup.
* path.h (path_conv::[]): New operator.
* syscalls.cc (_link): Use path_conv operators rather than methods, where
appropriate.  Minor white space cleanup.
* include/cygwin/version.h: Bump DLL minor number.
* dcrt0.cc (sm): Make NO_COPY.
@
text
@d824 4
a827 2
  if (si.cbReserved2 >= EXEC_MAGIC_SIZE &&
      memcmp (child_proc_info->zero, zeros, sizeof (zeros)) == 0)
@


1.131
log
@* child_info.h (child_proc_info): Declare as base class.
(spawn_info): Declare as alias of child_proc_info to aid debugging.
(fork_info): Ditto.
* cygheap.cc (cygheap_fixup_in_child): Use child_proc_info global rather than
parameter.
* cygheap.h (cygheap_fixup_in_child): Reflect above change in declaration.
* dcrt0.cc (_dll_crt0): Move 'si' definition here.  Assign child_proc_info.
(dll_crt0_1): Accommodate cygheap_fixup_in_child and *_info changes.
* environ.cc (spenv::retrieve): Make regparm.
* environ.h (environ_init): Ditto.
(win_env::add_cache): Ditto.
(build_env): Ditto.
(getwinenv): Ditto.
* fork.cc (sync_with_parent): Use fork_info global.
(fork_child): Ditto.
@
text
@d455 1
a455 1
static MEMORY_BASIC_INFORMATION sm;
@


1.130
log
@* cygheap.cc (cygheap_user::set_logsrv): Remove.
(cygheap_user::set_domain): Ditto.
* cygheap.h (cygheap_user::set_logsrv): Remove declaration.
(cygheap_user::set_domain): Ditto.
(cygheap_user::env_domain): Declare new method.
(cygheap_user::env_name): Ditto.
* environ.cc (spenvs): Add two environment variables.
* spawn.cc (spawn_guts): Call build_env after RevertToSelf.  Always set
ciresrv.mount_h.
(cygheap_user::ontherange): Recalculate homedrive/homepath if they are empty.
Use env_logsrv to get logon server.
(cygheap_user::env_logsrv): Calculate server name here rather than relying on
it having been previously calculated.
(cygheap_user::env_domain): Ditto for domain name.
(cygheap-user::env_name): New method.
* syscalls.cc (seteuid32): Do not get or set the environment.  Do not call
LookupAccountSid nor internal_getlogin.  Set cygheap->user name and sid from
the passwd entry.
* uinfo.cc (uinfo_init): Only call internal_getlogin when starting from a non
Cygwin process and use the values returned in user.
(internal_getlogin): Simplify to case where starting from a non Cygwin process.
Store return values in user and return void.  Do not set the Windows default
environment.
* dcrt0.cc (dll_crt0_1): Call uinfo_init only when needed.  Do not set
myself->uid nor reset user.sid.
* spawn.cc (spawn_guts): Get the sid from cygheap->user.  Always
RevertToSelf().  Don't set uid in impersonated case.
* cygheap.cc (cygheap_user::set_sid): Do not set orig_sig.
(cygheap_user::set_orig_sid): New.
* cygheap.h: Declare cygheap_user::set_sid.
* winsup.h: Add argument to uinfo_init().
@
text
@d454 1
a454 4
static NO_COPY STARTUPINFO si;
# define fork_info ((struct child_info_fork *)(si.lpReserved2))
# define spawn_info ((struct child_info_spawn *)(si.lpReserved2))
child_info_fork NO_COPY *child_proc_info = NULL;
d588 1
a588 1
	    cygheap_fixup_in_child (child_proc_info, 0);
d591 1
a591 1
	    ProtectHandle (child_proc_info->forker_finished);
d601 1
a601 1
	    cygheap_fixup_in_child (spawn_info, 1);
d805 1
d823 1
d825 1
a825 1
      memcmp (fork_info->zero, zeros, sizeof (zeros)) == 0)
d827 5
a831 5
      if ((fork_info->intro & OPROC_MAGIC_MASK) == OPROC_MAGIC_GENERIC)
	multiple_cygwin_problem ("proc", fork_info->intro, 0);
      else if (fork_info->intro == PROC_MAGIC_GENERIC
	       && fork_info->magic != CHILD_INFO_MAGIC)
	multiple_cygwin_problem ("proc", fork_info->magic, CHILD_INFO_MAGIC);
d833 1
a833 1
      switch (fork_info->type)
d836 1
a836 1
	    user_data->forkee = fork_info->cygpid;
d840 2
a841 2
	    if (fork_info->pppid_handle)
	      CloseHandle (fork_info->pppid_handle);
d846 4
a849 4
	    if (should_be_cb != fork_info->cb)
	      multiple_cygwin_problem ("proc size", fork_info->cb, should_be_cb);
	    else if (sizeof (fhandler_union) != fork_info->fhandler_union_cb)
	      multiple_cygwin_problem ("fhandler size", fork_info->fhandler_union_cb, sizeof (fhandler_union));
a851 1
		child_proc_info = fork_info;
d857 2
a858 2
	    system_printf ("unknown exec type %d", fork_info->type);
	    fork_info = NULL;
@


1.129
log
@* dcrt0.cc (dll_crt0_1): Initialize wincap and check for sanity before running
global ctors.
* wincap.h (wincap): Eliminate constructor.  Default is to zero memory, anyway.
* wincap.cc (wincap): Copy this on fork to avoid initialization in forked
processes.
@
text
@a610 1
	    myself->uid = spawn_info->moreinfo->uid;
a624 2
	    if (myself->uid == ILLEGAL_UID)
	      cygheap->user.set_sid (NULL);
d679 3
a681 2
/* Initialize uid, gid. */
  uinfo_init ();
@


1.128
log
@Remove unneeded sync.h, where appropriate, throughout.  Remove unneeded heap.h,
where appropriate, throughout.  Remove unneeded exceptions.h, where
appropriate, throughout.  Remove unneeded perprocess.h, where appropriate,
throughout.
@
text
@a557 2
  do_global_ctors (&__CTOR_LIST__, 1);

d561 2
@


1.127
log
@2002-02-28  Robert Collins  <rbtcollins@@hotmail.com>

	* Merged cygwin_daemon into head minus the new shm and ipc exports.

2002-02-28  Robert Collins  <rbtcollins@@hotmail.com>

	* fhandler_tty.cc (fhandler_tty_slave::open): More debugging.
	(fhandler_tty_slave::read): Fix printf type for the handle.
	* tty.cc (tty::common_init): Add a FIXME for security.

2002-01-29  Robert Collins  <rbtcollins@@hotmail.com>

	* Makefile.in (OBJS): Remove duplicate localtime.o.

2002-01-17  Robert Collins  <rbtcollins@@hotmail.com>

	* cygserver.cc (check_and_dup_handle): Consolidate the two variants for
	simplicity.
	Add Some basic debug output.
	(client_request_attach_tty::serve): Use the new debug_printf for clarity.
	Mark the duplicated handles as inheritable - fixup_after_fork() doesn't reopen
	tty's.

2002-01-16  Robert Collins  <rbtcollins@@hotmail.com>

	* cygserver.cc (transport): Correct scope.
	(client_request_attach_tty::serve): Add more debug information.
	Fix erroneous use of transport instead of conn.
	* cygserver_transport_pipes.cc (transport_layer_pipes::close): More debug.
	(transport_layer_pipes::read): Ditto.
	(transport_layer_pipes::write): Ditto.
	(transport_layer_pipes::impersonate_client): Ditto.

Mon Oct  8  7:41:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* cygserver.cc (server_request::process): Rename client_request_shm_get to
	client_request_shm.
	* cygserver_process.cc (process_cache::add): Rename to add_task.
	Use process_cleanup instead of process_request.
	(process_cache::remove_process): New method.
	(process::process): Initialize new members.
	(process::~process): New member.
	(process::cleanup): New method.
	(process::add_cleanup_routine): New method.
	(process_request::process): Rename to process_cleanup.
	Call the process object's cleanup method and then delete it.
	(process_process_param::request_loop): Remove the signalling process.
	* cygserver_shm.cc: Globally rename client_request_shm_get to client_request_shm.
	(client_request_shm_get::serve): Handle attach request counting.
	* cygserver_shm.h: Globally rename client_request_shm_get to client_request_shm.
	(class shm_cleanup): New class.
	* shm.cc: Globally rename client_request_shm_get to client_request_shm.
	(client_request_shm::client_request_shm): New constructor for attach requests.
	(shmat): Use it.
	* include/cygwin/cygserver_process.h (class process_request): Rename to
	process_cleanup.
	(class cleanup_routine): New class.
	(class process): New members and methods to allow calling back when the process
	terminates.

Thu Oct  4 14:12:00 2001  Robert Collins <rbtcollins@@hotmail.com>
	* cygserver.cc (request_loop): Make static.
	(main): Use new cache constructor syntax.
	Start cache worker threads.
	Cleanup the cache at shutdown.
	* cygserver_process.cc: Run indent.
	(process_cache::process_cache): Add a trigger to use when adding a process.
	(process_cache::process): Move process_entry to process.
	Insert at the end of the list.
	Trigger the request loop when new process's inserted.
	(process_cache::process_requests): Do it.
	(process_cache::add): New method.
	(process_cache::handle_snapshot): New method.
	(process::process): Merge in the process_entry fields.
	(process::handle): Make a stub function.
	(process::exit_code): New method.
	(process_request::process): New method.
	(process_process_param::request_loop): New method.
	* cygserver_shm.cc: New header dependency - threaded_queue.h.
	* threaded_queue.cc (threaded_queue::cleanup): Clearer messages.
	(queue_process_param::stop): Short spinlock on interruptible threads.
	* threaded_queue.h (class threaded_queue): New constructor.
	* include/cygwin/cygserver_process.h (process_request): New class.
	(process_entry): Remove.
	(process): Merge in process_entry.
	(process_cache): Inherit from threaded_queue.

Tue Oct  2 23:24:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* cygserver.cc (class server_process_param): Use new constructor syntax.
	* cygserver_process.cc (process_cache::~process_cache): New function.
	* threaded_queue.cc: Define condition debug_printf.
	Run indent.
	(threaded_queue::cleanup): Move queue_process_param guts to a method.
	(threaded_queue::process_requests): Ditto.
	(queue_process_param::queue_process_param): New method.
	(queue_process_param::~queue_process_param): Ditto.
	(queue_process_param::start): Ditto.
	(queue_process_param::stop): Ditto.
	* threaded_queue.h (class queue_process_param): Add support for
	interruptible request loops.
	* cygwin/include/cygwin/cygserver_process.h (class process_cache): Add
	destructor.

Tue Oct  2 23:24:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* cygserver_client.cc: New flag allow_daemon to disable the daemon completely.
	(cygserver_request): Check it.
	(cygserver_init): Ditto.
	* environ.cc (parse_thing): Add (no)daemon option.

Tue Oct  2 23:00:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* shm.cc: Update to handle include changes from HEAD.

Tue Oct  2 16:06:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* Makefile.in: Remove cygserver_shm.o from cygwin1.dll.
	Rename cygserver_shm_outside.o to cygserver_shm.o.
	* cygserver.cc (server_request::process): Use the new client_request
	constructor.
	* cygserver_client.cc: Remove the #ifdef's stubs for the server method
	within cygwin.
	(client_request_attach_tty::client_request_attach_tty): Use the new
	client_request constructor.
	(client_request_shutdown::client_request_shutdown): Ditto.
	(client_request::client_request): Ditto.
	* cygserver_shm.cc (client_request_shm_get::serve): Remove the
	#ifdef'd stub for in-cygwin builds.
	(client_request_shm_get::client_request_shm_get): Use the new
	client_request constructor, and remove the in-cygwin variants.
	* cygserver_shm.h (class client_request_shm_get): #ifndef test the
	serve method - it's only used in cygserver.
	* shm.cc (client_request_shm_get::client_request_shm_get): New function.
	* include/cygwin/cygserver.h (request_header): New constructor.
	(class client_request): Use it.
	New constructor accepting the header size.
	#ifndef test the server method - it's only used within cygserver.
	(client_request_get_version): #ifdef test the server method.
	(client_request_shutdown): Ditto.
	(client_request_attach_tty): Ditto.

Tue Oct  2  9:57:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* Makefile.in: add threaded_queue.o to cygserver.exe.
	* cygserver.cc: Include threaded_queue.h
	(class server_request): Inherit from queue_request.
	(class server_process_param): Inherit from queue_process_param.
	(class server_request_queue): Inherit from threaded_queue.
	(request_loop): Adjust for new types.
	(server_request_queue::process_requests): Remove guts to
	threaded_queue::process_requests.
	(server_request::server_request): Adjust for new types.
	(worker_function): Delete.
	(server_request_queue::create_workers): Delete.
	(server_request_queue::cleanup): Delete.
	(server_request_queue::add): Move guts to threaded_queue::add.
	* threaded_queue.cc: New file.
	* threaded_queue.h: New file.

Mon Oct  1 12:38:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* cygserver.cc (client_request::serve): New function.
	* cygserver_process.cc: Inlude <pthread.h> for pthread_once.
	(process_cache::process_cache): Initialise a crtiical section for write access.
	(process_cache::process): Use the critical section. Also add missing entries to
	the cache.
	(do_process_init): New function to initalise class process static variables.
	(process::process): Ensure that the process access critical section is
	initialised.
	(process::handle): Close the handle of old process's when they have terminated
	and we are returning the handle for a process with the same pid.
	* cygserver_shm.cc: Run indent.
	Include cygserver_process.h to allow process cache functionality.
	(client_request_shm_get::serve): New parameter for process cache support.
	Use the process cache, not OpenProcess to get a handle to the originating process.
	Fix a handle leak with token_handle.
	* cygserver_shm.h (class client_request_shm_get): Update ::serve for process
	cache support.
	* cygserver_transport_pipes.cc: Redefine debug_printf to be conditional on DEBUG.
	* include/cygwin/cygserver.h: Do not implement client_request::serve in the
	header.
	* include/cygwin/cygserver_process.h (class process_cache): Add a write access
	critical section to prevent races when requests from a  multithreaded
	application arrive.

Sun Sep 30 23:41:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* Makefile.in: Add cygserver_process.o to cygserver.exe.
	* cygserver.cc: Include signal.h and cygwin_version.h.
	Define debug_printf as a macro.
	Define DEBUG to a value.
	(client_request_attach_tty::serve): Add beginning of process cache support.
	Change from #ifdef DEBUG to work with new DEBUG style.
	(client_request_get_version::serve): Add beginning of process cache support.
	(class server_request): New prototype for support of process cache.
	(class queue_process_param): New class to allow request loop threading.
	(class server_request_queue): Add beginning of process cache support.
	Allow request loop threading.
	(request_loop): Thread function for request loops.
	(server_request_queue::process_requests): Initiator for threaded request loops.
	(client_request_shutdown::serve): Add beginning of process cache support.
	(server_request::server_request): Ditto.
	(server_request::process): Use debug_printf. Add beginning of process cache
	support.
	(server_request_queue::cleanup): Kill off any request loop threads.
	(server_request_queue::add): Add beginning of process cache support.
	(handle_signal): Trigger a shutdown.
	(main): Print out some useful info at startup - version, date time.
	Add process cache support.
	Spawn a separate thread for the transport request loop, thus allowing concurrent
	support for multiple transports.
	* cygserver_client.cc (client_request_get_version::serve): Add process cache
	support.
	(client_request_attach_tty::serve): Add process cache support.
	(client_request_shutdown::serve): Add process cache support.
	* cygsserver_process.cc: New file with the process cache support.
	* cygserver_shm.cc: Redefine debug_printf to allow conditional output.
	* cygwin.din: Export shmdt().
	* shm.cc: Run indent.
	Update FIXME's.
	(shmdt): New function.
	* include/cygwin/cygserver.h (class client_request): Add process cache support.
	(class client_request_get_version): Ditto.
	(class client_request_shutdown): Ditto.
	(class client_request_attach_tty): Ditto.
	* include/cygwin/cygserver_process.h: New header for process cache support.

Sun Sep 30  8:52:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* include/cygwin/cygserver_transport.h: Add copyright header.
	* include/cygwin/cygserver_transport_pipes.h: Ditto.
	* include/cygwin/cygserver_transport_sockets.h: Ditto.

Sat Sep 29 20:40:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* Makefile.in: Add cygserver_transport_sockets.o to DLL_OFILES.
	Add cygserver_transport_sockets_outside.o to cygserver.exe.
	* cygserver.cc: Include new include files.
	* cygserver_client.cc: Ditto.
	* cygserver_shm.h: No need to include <sys/socket.h> now.
	* cygerver_transport.cc: Include new include files.
	(transport_layer_base::transport_layer_base): Strip back to a stub.
	(transport_layer_base::listen): Ditto.
	(transport_layer_base::accept): Ditto.
	(transport_layer_base::close): Ditto.
	(transport_layer_base::read): Ditto.
	(transport_layer_base::write): Ditto.
	(transport_layer_base::connect): Ditto.
	* cygserver_transport_pipes.cc: Include new header
	"cygwin/cygserver_transport_pipes.h".
	* cygserver_transport_sockets.cc: New file.
	* dcrt0.cc: No need to include <sys/socket.h> now.
	* fhandler_tty.cc: Ditto.
	* tty.cc: Ditto.
	* include/cygwin/cygserver_transport.h: Strip the base class to a stub.
	Remove the cygserver_transport_pipes class.
	* include/cygwin/cygserver_transport_pipes.h: New file.
	* include/cygwin/cygserver_transport_sockets.h: New file.

Tue Sep 25 16:22:00 2001  Robert Collins <rbtcollins@@hotmail.com>

	* autoload.cc: Add dynamic load statement for 'ImpersonateNamedPipeClient'.
	* Makefile.in: Add new object files, and build instructions for cygserver.exe.
	* cygwin.din: Export ftok, shmat, shmctl and shmget.
	* dcrt0.cc: Additional includes for cygserver support.
	(dll_crt0_1): Initialise the cygserver client.
	* fhandler.h (fhandler_tty): New method cygserver_attach_tty.
	* fhandler_tty.cc: Additional includes for cygserver support.
	(fhandler_tty_slave::open): Attempt to use the cygserver when obtaining
	handles from the parent process. On failure or 9x use the current method.
	(fhandler_tty_slave::cygserver_attach_tty): New function.
	* fork.cc (fork_child): Fixup shm memory mapped areas.
	* pinfo.h: Declare fixup_shms_after_fork().
	* security.h: Declare alloc_sd().
	* tty.cc: Additonal includes to support cygserver.
	(tty::common_init): Don't allow others to open us if the cygserver is running.
	* winsup.h: Declare cygserver_running.
	* cygserver.cc: New file.
	* cygserver_client.cc: New file.
	* cygserver_shm.cc: New file.
	* cygserver_shm.h: New file.
	* cygserver_transport.cc: New file.
	* cygserver_transport_pipes.cc: New file.
	* ipc.cc: New file.
	* shm.cc: New file.
	* include/cygwin/cygserver.h: New file.
	* include/cygwin/cygserver_transport.h: New file.
	* include/sys/ipc.h: New file.
	* include/sys/shm.h: New file.

2002-02-28  Robert Collins  <rbtcollins@@hotmail.com>

	* thread.cc (semaphore::TryWait): Set errno as required by posix 1003.1.
	(__sem_wait): Ditto.
	(__sem_trywait): Ditto.
@
text
@a20 1
#include "sync.h"
a22 1
#include "heap.h"
@


1.126
log
@* sync.h (new_muto): Just accept an argument which denotes the name of the
muto.  Use this argument to construct static storage.
* cygheap.cc (cygheap_init): Reflect above change.
* exceptions.cc (events_init): Ditto.
* malloc.cc (malloc_init): Ditto.
* path.cc (cwdstuff::init): Ditto.
* cygheap.h (cwdstuff): Change name of lock element to make it less generic.
* path.cc (cwdstuff::get_hash): Ditto.
(cwdstuff::get_initial): Ditto.
(cwdstuff::set): Ditto.
(cwdstuff::get): Ditto.
* sigproc.cc (proc_subproc): Ditto.
* debug.cc (lock_debug): Change to method.  Use method rather than macro
throughout.
* tty.h (tty_min::kill_pgrp): Declare new method.
* fhandler_termios.cc (tty_min::kill_pgrp): New method.
(fhandler_termios::line_edit): Use new method for killing process.
* dcrt0.cc (do_exit): Ditto.
* dtable.cc (dtable::get_debugger_info): New method for inheriting dtable info
from a debugger.
* tty.cc (tty_init): Attempt to grab file handle info from parent debugger, if
appropriate.  # dtable.cc (dtable::stdio_init): Make this a method.
(dtable::init_std_file_from_handle): Don't set fd unless it's not open.
(dtable::build_fhandler_from_name): Move name setting to
dtable::build_fhandler.
(dtable::build_fhandler): Add win32 name parameter.
* dcrt0.cc (dll_crt0_1): Change to use dtable stdio_init.
* dtable.h (dtable): Reflect build_fhandler parameter change.
* mmap.cc (mmap_record::alloc_fh): Don't set name parameter in build_fhandler.
* net.cc (fdsock): Remove set_name call since it is now handled by
build_fhandler.
* sigproc.cc (proc_subproc): Release muto as early as possible.
@
text
@d38 2
d689 2
@


1.125
log
@	* (child_info.h, cygheap.h, dcrt0.cc, dir.cc, fhandler.cc, fhandler.h,
	fhandler_clipboard.cc, fhandler_disk_file.cc, fhandler_dsp.cc,
	fhandler_floppy.cc, fhandler_mem.cc, fhandler_random.cc,
	fhandler_tape.cc, fhandler_zero.cc, grp.cc, mmap.cc, passwd.cc,
	pinfo.cc, pinfo.h, pipe.cc, sec_acl.cc, sec_helper.cc, security.cc,
	security.h, spawn.cc, syscalls.cc, thread.h, uinfo.cc, winsup.h):
	Change usage of uid_t to __uid16_t, gid_t to __gid16_t and
	off_t to __off32_t throughout.  Use INVALID_UID, INVALID_GID and
	INVALID_SEEK instead casting -1 to the appropriate type.
	* winsup.h: Define INVALID_UID, INVALID_GID and INVALID_SEEK.
	* include/cygwin/acl.h: Define internal __aclent16_t and __aclent32_t
	types.  Don't declare acl functions when compiling Cygwin.
	* include/cygwin/grp.h: Declare getgrgid() and getgrnam() with
	correct types for internal usage.
@
text
@d722 1
a722 1
  stdio_init ();
a795 1

d981 1
a981 1
	    kill_pgrp (tp->getpgid (), SIGHUP);
@


1.124
log
@Add copyright stuff
@
text
@d626 1
a626 1
	    if (myself->uid == USHRT_MAX)
@


1.123
log
@* dcrt0.cc (multiple_cygwin_problem): Clarify logic and make CYGWIN_MISMATCH_OK
more powerful.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001 Red Hat, Inc.
@


1.122
log
@* exceptions.cc (early_stuff_init): Rename from misnamed set_console_handler.
(ctrl_c_handler): Attempt to work around potential signal duplication during
process startup.
(sig_handle): Ignore SIGINT when we're just an "exec stub".
* spawn.cc (spawn_guts): Store pid of spawned process in global for use by
ctrl_c_handler.
* dcrt0.cc (dll_crt0_1): Call renamed initialization function.
* winsup.h: Reflect function name change.
@
text
@d840 1
d844 1
d1044 8
a1051 1
  if (CYGWIN_VERSION_MAGIC_VERSION (magic_version) != version)
a1057 4

  char buf[1024];
  if (!GetEnvironmentVariable ("CYGWIN_MISMATCH_OK", buf, sizeof (buf)))
    system_printf ("%s magic number mismatch detected - %p/%p", what, magic_version, version);
@


1.121
log
@* cygmagic: Add define name to warning.
* dcrt0.cc (_dll_crt0): Check for changes in child_info size.
(multiple_cygwin_problem): Avoid "proc" errors when testing.  Just assume new
cygwin proc.
* shared_info.h (mount_info): Add 'cb' element for sanity checks.
(shared_info): Ditto.
* child_info.h (child_info): Add fhandler_union_size element for sanity
checking.
* shared.cc (open_shared): Detect shared region size mismatch between parent
and child.
(shared_info::initialize): Detect shared region size mismatch with expectation.
(memory_Init): Ditto.
* sigproc.cc (init_child_info): Correctly set cb in passed structure.
* shared.cc (open_shared):
@
text
@d816 1
a816 1
  set_console_handler ();
@


1.120
log
@* Makefile.in: Autogenerate some header files which provide magic numbers.
Force dependencies for files which depend on autogenerated headers to ensure
that they are always built.
* child_info.h (child_info): Add new fields to accommodate new magic number
header stuff.
* dcrt0.cc: Rely on "child_info_magic.h" to ensure that correct child_info
magic numbers are used.
(dll_crt0_1): Temporarily remove _cygwin_testing_magic test.
(_dll_crt0): Do more testing on magic numbers from fork_info structure.  Call
"multiple_cygwin_problem" where appropriate.
(multiple_cygwin_problem): Rename from multiple_cygwin_die.  Issue a warning or
die, as appropriate based on cygwin version/magic number mismatch.
* pinfo.cc (pinfo::exit): Don't attempt to dereference `this' if it doesn't
exist.  This can happen when a fatal error occurs early in process
initialization.
* shared.cc: Rely on "shared_info_magic.h" to accommodate that new magic number
header stuff.
(shared_info::initialize): Use new magic number stuff, for shared region.
(memory_init): Ditto, for mount table.
* shared_info.h: Accomodate new magic number stuff for shared region and mount
table.
* sigproc.cc: Rely on "child_info_magic.h" to accommodate new magic number
header stuff.
(init_child_info): Initialize new fields in child_info) to accomodate magic
numbers.
* winsup.h: Rename multiple_cygwin_die to multiple_cygwin_problem.
* include/cygwin/version.h: Define macros for manipulating version magic.
* cygmagic: New shell script for generating magic numbers.
@
text
@d834 1
d839 1
d844 13
a856 6
	    {
	      child_proc_info = fork_info;
	      cygwin_mount_h = child_proc_info->mount_h;
	      mypid = child_proc_info->cygpid;
	      break;
	    }
d1037 5
@


1.119
log
@* cygwin.din (ualarm): New export.
* dcrt0.cc (_dll_crt0): Add experimental tls storage declaration.
(dll_crt0): Ditto.
* debug.cc (thread_stub): Ditto.
* thread.cc: Minor cleanup.
(__pthread_create): Add experimental tls storage declaration.
* miscfuncs.cc: Define tls index.
* winsup.h: Declare experimental tls storage.
* window.cc (alarm): Use old timer return from setitimer.
(ualarm): New function.
@
text
@d33 1
a33 1
#include "child_info.h"
d588 1
a588 1
      switch (child_proc_info->type - _cygwin_testing_magic)
d829 6
a834 1
      switch (fork_info->type - _cygwin_testing_magic)
d849 2
a850 4
	    if (_cygwin_testing)
	      fork_info = NULL;
	    else if ((fork_info->type & PROC_MAGIC_MASK) == PROC_MAGIC_GENERIC)
	      multiple_cygwin_die ();
d1026 1
a1026 1
multiple_cygwin_die ()
d1028 2
a1029 1
  api_fatal ("\
d1032 7
a1038 3
and delete all but the most recent version.  This will probably be\n\
the one that resides in x:\\cygwin\\bin, where 'x' is the drive on which\n\
you have installed the cygwin distribution.\n");
@


1.118
log
@* fhandler.cc (fhandler_base::fork_fixup): Don't protect handle.
* dlfcn.cc: Fix to confirm to coding standards.  Reorganize includes throughout
to accomodate new cygheap.h usage.
* cygheap.h (cygheap_fdmanip): New class: simplifies locking and retrieval of
fds from cygheap->fdtab.
(cygheap_fdget): Ditto.
(cygheap_fdnew): Ditto.
* fcntl.cc (_fcntl): Use new method to lock fdtab and retrieve info.
* ioctl.cc (ioctl): Ditto.
* mmap.cc (mmap): Ditto.
* net.cc: Ditto, throughout.
* passwd.cc (getpass): Ditto.
* path.cc (fchdir): Ditto.
* pipe.cc (make_pipe): Ditto.
* sec_acl.cc (facl): Ditto.
* syscalls.cc: Ditto, throughout.
* termios.cc: Ditto, throughout.
@
text
@d806 1
d857 1
@


1.117
log
@Throughout, rename PROC_FORK1 to PROC_FORK.
* child_info.h: Rename PROC_* to _PROC_*.  Define PROC_* with additional
testing magic.  Eliminate old PROC_FORK and rename PROC_FORK1 to PROC_FORK.
* dcrt0.cc (_cygwin_testing_magic): New variable.  Added to magic number in
proc_info.
(alloc_stack): Eliminate old PROC_FORK test.
(dll_crt0_1): Ditto.  Use _PROC_* enums for test.  Subtract
_cygwin_testing_magic from child_proc_info->type so that normal cygwin programs
invoked by test suite programs do not consider themselves to be in a cygwin
environment.
(_dll_crt0): Ditto.  Move environment checks to initial_env function to
conserve on stack space.
(initial_env): New function.  Checks for testing and debugging environment
variables.
* init.cc (cygwin_hmodule): Move declaration.
* winsup.h: Declare variables used for cygwin testing.
@
text
@d20 1
@


1.116
log
@* uinfo.cc (internal_getlogin): Reorganize slightly to minimize work in default
condition.
@
text
@d75 1
d519 5
a523 2
  if (ci->type == PROC_FORK)
    ci->stacksize = 0;		// flag to fork not to do any funny business
d525 1
a525 9
    {
      if (!VirtualQuery ((LPCVOID) &b, &sm, sizeof sm))
	api_fatal ("fork: couldn't get stack info, %E");

      if (sm.AllocationBase != ci->stacktop)
	alloc_stack_hard_way (ci, b + sizeof (b) - 1);
      else
	ci->stacksize = 0;
    }
d587 1
a587 1
      switch (child_proc_info->type)
d589 1
a589 2
	  case PROC_FORK:
	  case PROC_FORK1:
d595 1
a595 1
	  case PROC_SPAWN:
d599 1
a599 1
	  case PROC_EXEC:
d771 25
d805 1
a805 12
  char envbuf[8];
#ifdef DEBUGGING
  if (GetEnvironmentVariable ("CYGWIN_SLEEP", envbuf, sizeof (envbuf) - 1))
    {
      console_printf ("Sleeping %d, pid %u\n", atoi (envbuf), GetCurrentProcessId ());
      Sleep (atoi (envbuf));
    }
#endif

  if (GetEnvironmentVariable ("CYGWIN_TESTING", envbuf, sizeof (envbuf) - 1))
    _cygwin_testing = 1;

d827 1
a827 1
      switch (fork_info->type)
d829 1
a829 2
	  case PROC_FORK:
	  case PROC_FORK1:
d831 1
a831 1
	  case PROC_SPAWN:
d834 1
a834 1
	  case PROC_EXEC:
@


1.115
log
@* dcrt0.cc (dll_crt0_1): Don't close hexec_proc if it is NULL.
* fork.cc (vfork): Add debugging statements.
* path.cc (get_device_number): Make static.  Rewrite to inspect both unix and
windows paths.
(get_raw_device_number): Just check for parts of raw device that we care about.
(get_devn): New function, pulled from get_device_number.
(win32_device_name): Accomodate arg changes to get_device_number.
(mount_info::get_device_number): Call get_device_number on translated Windows
path.
* spawn.cc (spawn_guts): Don't treat P_VFORK differently from P_NOWAIT.  Add
handle to child's shared region to child so that it will be preserved if the
parent goes away.
* fhandler.h: Throughout, simplify to one open method for all fhandler classes,
requiring a path_conv first element.
* fhandler.cc (fhandler_base::open): Remove obsolete method.  Generalize to
require path_conv * as first argument.
(fhandler_disk_file::open): Remove obsolete method.
(fhandler_disk_file::open): Use path_conv pointer rather than reference.
* fhandler_clipboard.cc (fhandler_dev_clipboard::dup): Use new open method.
(fhandler_dev_clipboard::open): Accomodate new argument for open methods.
* fhandler_console.cc (fhandler_console::open): Ditto.
(fhandler_console::dup): Use new open method.
(fhandler_console::fixup_after_fork): Ditto.
(fhandler_console::fixup_after_exec): Ditto.
* fhandler_dsp.cc (fhandler_dev_dsp::open): Accomodate new argument for open
methods.
* fhandler_floppy.cc (fhandler_dev_floppy::open): Ditto.
* fhandler_mem.cc (fhandler_dev_mem::open): Ditto.
* fhandler_random (fhandler_dev_random::open): Ditto.
* fhandler_raw.cc (fhandler_dev_raw::open): Ditto.
* fhandler_serial.cc (fhandler_serial::open): Ditto.
* fhandler_tape.cc (fhandler_dev_tape::open): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::open): Ditto.
(fhandler_pty_master::open): Ditto.
* fhandler_windows.cc (fhandler_windows::open): Ditto.
* fhandler_zero.cc (fhandler_dev_zero::open): Ditto.
* fhandler_socket.cc (fhandler_socket::set_connect_secret): Accomodate new
argument for open methods.
* syscalls.cc (_open): Ditto.
(stat_worker): Ditto.
@
text
@d837 1
a837 6
	      api_fatal ("\
You have multiple copies of cygwin1.dll on your system.\n\
Search for cygwin1.dll using the Windows Start->Find/Search facility\n\
and delete all but the most recent version.  This will probably be\n\
the one that resides in x:\\cygwin\\bin, where 'x' is the drive on which\n\
you have installed the cygwin distribution.\n");
d1009 11
@


1.114
log
@* dtable.h (dtable::build_fhandler): Make path_conv parameter non-optional.
(dtable::init_std_file_from_handle): Eliminate name parameter.
* dtable.cc (stdio_init): Don't pass bogus name to init_std_file_from_handle.
The function will figure out the name itself.
(dtable::init_std_file_from_handle): Eliminate name parameter.  Assume that
we're always called with an appropriate fd.  Pass name as NULL if we can't
simply figure it out from context.
(cygwin_attach_handle_to_fd): Pass path_conv argument to build_fhandler.
(dtable::build_fhandler): Make path_conv argument mandatory.  Eliminate
specific call to get_device_number.  With unknown device names, set name from
handle context for parsing by path_conv.
(dtable::build_fhandler): Pass path_conv argument to build_fhandler.
* path.h (path_conv::set_isdisk): Set disk device type.
(path_conv::is_device): Don't consider FH_DISK a "device".
* syscalls.cc (_open): Pass path_conv argument by reference.
(stat_worker): Ditto.
(_rename): Use path_conv operators.  Add bounds to DeleteFile/MoveFile for
loop.
@
text
@d601 2
a602 1
	    CloseHandle (spawn_info->hexec_proc);
@


1.113
log
@Add "path.h" include throughout, where needed.  Use new path_conv methods and
operators to simplify testing for directory and attributes, throughout.
* path.h (path_conv::exists): New method.
(path_conv::has_attribute): Ditto.
(path_conv::isdir): Ditto.
(path_conv::DWORD &): New operator.
(path_conv::int &): Ditto.
* dir.cc (rmdir): Eliminate a goto.
* dtable.cc (dtable::build_fhandler): Accept opt and suffix info for
path_conv.check.  Return fh == NULL on path_conv error.  Pass unit to set_name
as appropriate.
(dtable::reset_unix_path_name): New method.
* dtable.h (dtable): Declare new method.  Reflect arg changes to
build_fhandler.
* fhandler.cc (fhandler_disk_dummy_name): Eliminate.
(fhandler_base::set_name): Expect paths to be NULL.  Build unix_path_name from
win32_path_name when it is a device.
(fhandler_base::reset_unix_path_name): New method.
(fhandler_base::raw_read): Report EISDIR when ERROR_INVALID_FUNCTION or
ERROR_INVALID_PARAMETER and reading a directory.
(fhandler_disk_file::fstat): Don't call stat_dev since we should now never be
calling fhandler_disk_file methods with devices.
(fhandler_base::fhandler_base): Clear {unix,win32}_path_name.
(fhandler_base::~fhandler_base): Always free {unix,win32}_path_name.
(fhandler_disk_file::fhandler_disk_file): Remove set_no_free_names kludge.
(fhandler_disk_file::open): Ditto.
* fhandler.h (fhandler_base::no_free_names): Eliminate.
(fhandler_base::set_no_free_names): Ditto.
* fhandler_tty.cc (fhandler_tty_slave::fhandler_tty_slave): Don't set
unix_path_name here.
* path.cc (fchdir): Lock fd table throughout.  Use new
dtable::reset_unix_path_name method to reset path.
* syscalls.cc (stat_worker): Reorganize to always call fstat method.  Pass
path_conv method to fhandler_*::open.
(chroot): Elminate a goto.
@
text
@d836 6
a841 1
	      api_fatal ("conflicting versions of cygwin1.dll detected.  Use only the most recent version.\n");
@


1.112
log
@* Makefile.in: Generate libcygwin.a during the link pass rather than as a
separate dlltool step.
* dcrt0.cc (_dll_crt0): pppid_handle could be NULL.  Don't close it if so.
@
text
@d29 1
a30 1
#include "path.h"
@


1.112.2.1
log
@Tue Sep 25 16:22:00 2001 Robert Collins <rbtcollins@@hotmail.com>

        * autoload.cc: Add dynamic load statement for
	'ImpersonateNamedPipeClient'.
	* Makefile.in: Add new object files, and build
	instructions for cygserver.exe.
	* cygwin.din: Export ftok, shmat, shmctl and shmget.
	* dcrt0.cc: Additional includes for cygserver support.
	(dll_crt0_1): Initialise the cygserver client.
	* fhandler.h (fhandler_tty): New method cygserver_attach_tty.
	* fhandler_tty.cc: Additional includes for cygserver support.
	(fhandler_tty_slave::open): Attempt to use the cygserver when
	obtaining handles from the parent process. On failure or 9x
	use the current method.
	(fhandler_tty_slave::cygserver_attach_tty): New function.
	* fork.cc (fork_child): Fixup shm memory mapped areas.
	* pinfo.h: Declare fixup_shms_after_fork().
	* security.h: Declare alloc_sd().
	* tty.cc: Additonal includes to support cygserver.
	(tty::common_init): Don't allow others to open us if the cygserver is running.
	* winsup.h: Declare cygserver_running.
										CVS: ----------------------------------------------------------------------
@
text
@a36 3
#include <sys/socket.h>
#include "cygwin/cygserver_transport.h"
#include "cygwin/cygserver.h"
a689 2

  cygserver_init ();
@


1.112.2.2
log
@Sat Sep 29 20:40:00 2001 Robert Collins <rbtcollins@@hotmail.com>

        * Makefile.in: Add cygserver_transport_sockets.o to DLL_OFILES.
        Add cygserver_transport_sockets_outside.o to cygserver.exe.
        * cygserver.cc: Include new include files.
        * cygserver_client.cc: Ditto.
        * cygserver_shm.h: No need to include <sys/socket.h> now.
        * cygerver_transport.cc: Include new include files.
        (transport_layer_base::transport_layer_base): Strip back to a stub.
        (transport_layer_base::listen): Ditto.
        (transport_layer_base::accept): Ditto.
        (transport_layer_base::close): Ditto.
        (transport_layer_base::read): Ditto.
        (transport_layer_base::write): Ditto.
        (transport_layer_base::connect): Ditto.
        * cygserver_transport_pipes.cc: Include new header
        "cygwin/cygserver_transport_pipes.h".
        * cygserver_transport_sockets.cc: New file.
        * dcrt0.cc: No need to include <sys/socket.h> now.
        * fhandler_tty.cc: Ditto.
        * tty.cc: Ditto.
        * include/cygwin/cygserver_transport.h: Strip the base class to a stub.
        Remove the cygserver_transport_pipes class.
        * include/cygwin/cygserver_transport_pipes.h: New file.
        * include/cygwin/cygserver_transport_sockets.h: New file.
@
text
@d37 1
@


1.112.2.3
log
@Merged changes from HEAD
@
text
@d29 1
a30 1
#include "dtable.h"
d840 1
a840 6
	      api_fatal ("\
You have multiple copies of cygwin1.dll on your system.\n\
Search for cygwin1.dll using the Windows Start->Find/Search facility\n\
and delete all but the most recent version.  This will probably be\n\
the one that resides in x:\\cygwin\\bin, where 'x' is the drive on which\n\
you have installed the cygwin distribution.\n");
@


1.112.2.4
log
@Merged changes from HEAD
@
text
@a19 1
#include <errno.h>
d32 1
a32 1
#include "child_info_magic.h"
a76 1
unsigned NO_COPY _cygwin_testing_magic;
d520 6
a525 2
  if (!VirtualQuery ((LPCVOID) &b, &sm, sizeof sm))
    api_fatal ("fork: couldn't get stack info, %E");
d527 5
a531 4
  if (sm.AllocationBase != ci->stacktop)
    alloc_stack_hard_way (ci, b + sizeof (b) - 1);
  else
    ci->stacksize = 0;
d595 2
a596 1
	  case _PROC_FORK:
d602 2
a603 3
	  case _PROC_SPAWN:
	    if (spawn_info->hexec_proc)
	      CloseHandle (spawn_info->hexec_proc);
d605 1
a605 1
	  case _PROC_EXEC:
a778 25
void
initial_env ()
{
  char buf[MAX_PATH + 1];
#ifdef DEBUGGING
  if (GetEnvironmentVariable ("CYGWIN_SLEEP", buf, sizeof (buf) - 1))
    {
      console_printf ("Sleeping %d, pid %u\n", atoi (buf), GetCurrentProcessId ());
      Sleep (atoi (buf));
    }
#endif

  if (GetEnvironmentVariable ("CYGWIN_TESTING", buf, sizeof (buf) - 1))
    {
      _cygwin_testing = 1;
      DWORD len;
      if ((len = GetModuleFileName (cygwin_hmodule, buf, MAX_PATH))
	  && len > sizeof ("new-cygwin1.dll")
	  && strcasematch (buf + len - sizeof ("new-cygwin1.dll"),
			   "\\new-cygwin1.dll"))
	_cygwin_testing_magic = 0x10;
    }
}


d788 12
a799 2
  DECLARE_TLS_STORAGE;
  initial_env ();
a820 6
      if ((fork_info->intro & OPROC_MAGIC_MASK) == OPROC_MAGIC_GENERIC)
	multiple_cygwin_problem ("proc", fork_info->intro, 0);
      else if (fork_info->intro == PROC_MAGIC_GENERIC
	       && fork_info->magic != CHILD_INFO_MAGIC)
	multiple_cygwin_problem ("proc", fork_info->magic, CHILD_INFO_MAGIC);
      unsigned should_be_cb = 0;
d823 2
a824 1
	  case _PROC_FORK:
d826 1
a826 2
	    should_be_cb = sizeof (child_info_fork);
	  case _PROC_SPAWN:
d829 7
a835 14
	  case _PROC_EXEC:
	    if (!should_be_cb)
	      should_be_cb = sizeof (child_info);
	    if (should_be_cb != fork_info->cb)
	      multiple_cygwin_problem ("proc size", fork_info->cb, should_be_cb);
	    else if (sizeof (fhandler_union) != fork_info->fhandler_union_cb)
	      multiple_cygwin_problem ("fhandler size", fork_info->fhandler_union_cb, sizeof (fhandler_union));
	    else
	      {
		child_proc_info = fork_info;
		cygwin_mount_h = child_proc_info->mount_h;
		mypid = child_proc_info->cygpid;
		break;
	      }
d837 9
a845 2
	    system_printf ("unknown exec type %d", fork_info->type);
	    fork_info = NULL;
a854 1
  DECLARE_TLS_STORAGE;
a1016 21
}

void
multiple_cygwin_problem (const char *what, unsigned magic_version, unsigned version)
{
  if (_cygwin_testing && strstr (what, "proc"))
    {
      fork_info = NULL;
      return;
    }
  if (CYGWIN_VERSION_MAGIC_VERSION (magic_version) != version)
    api_fatal ("%s version mismatch detected - %p/%p.\n\
You have multiple copies of cygwin1.dll on your system.\n\
Search for cygwin1.dll using the Windows Start->Find/Search facility\n\
and delete all but the most recent version.  The most recent version *should*\n\
reside in x:\\cygwin\\bin, where 'x' is the drive on which you have\n\
installed the cygwin distribution.", what, magic_version, version);

  char buf[1024];
  if (!GetEnvironmentVariable ("CYGWIN_MISMATCH_OK", buf, sizeof (buf)))
    system_printf ("%s magic number mismatch detected - %p/%p", what, magic_version, version);
@


1.112.2.5
log
@Merged changes from HEAD
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
d820 1
a820 1
  early_stuff_init ();
a843 1
	    /* fall through */;
a846 1
	    /* fall through */;
d1046 1
a1046 8

  char buf[1024];
  if (GetEnvironmentVariable ("CYGWIN_MISMATCH_OK", buf, sizeof (buf)))
    return;

  if (CYGWIN_VERSION_MAGIC_VERSION (magic_version) == version)
    system_printf ("%s magic number mismatch detected - %p/%p", what, magic_version, version);
  else
d1053 4
@


1.112.2.6
log
@Merged changes from HEAD
@
text
@d628 1
a628 1
	    if (myself->uid == ILLEGAL_UID)
d726 1
a726 1
  cygheap->fdtab.stdio_init ();
d800 1
d986 1
a986 1
	    tp->kill_pgrp (SIGHUP);
@


1.112.2.7
log
@Merged changes from HEAD
@
text
@d21 1
d24 1
d560 2
a564 2

  do_global_ctors (&__CTOR_LIST__, 1);
@


1.112.2.8
log
@Merged changes from HEAD
@
text
@d611 1
d626 2
d682 2
a683 3
  /* Initialize uid, gid if necessary. */
  if (child_proc_info == NULL || spawn_info->moreinfo->uid == ILLEGAL_UID)
    uinfo_init ();
@


1.112.2.9
log
@Merged changes from HEAD
@
text
@d454 4
a457 1
child_info NO_COPY *child_proc_info = NULL;
d591 1
a591 1
	    cygheap_fixup_in_child (0);
d594 1
a594 1
	    ProtectHandle (fork_info->forker_finished);
d604 1
a604 1
	    cygheap_fixup_in_child (1);
a807 1
  static NO_COPY STARTUPINFO si;
a824 1
  child_proc_info = (child_info *) si.lpReserved2;
d826 1
a826 1
      memcmp (child_proc_info->zero, zeros, sizeof (zeros)) == 0)
d828 5
a832 5
      if ((child_proc_info->intro & OPROC_MAGIC_MASK) == OPROC_MAGIC_GENERIC)
	multiple_cygwin_problem ("proc", child_proc_info->intro, 0);
      else if (child_proc_info->intro == PROC_MAGIC_GENERIC
	       && child_proc_info->magic != CHILD_INFO_MAGIC)
	multiple_cygwin_problem ("proc", child_proc_info->magic, CHILD_INFO_MAGIC);
d834 1
a834 1
      switch (child_proc_info->type)
d837 1
a837 1
	    user_data->forkee = child_proc_info->cygpid;
d841 2
a842 2
	    if (child_proc_info->pppid_handle)
	      CloseHandle (child_proc_info->pppid_handle);
d847 4
a850 4
	    if (should_be_cb != child_proc_info->cb)
	      multiple_cygwin_problem ("proc size", child_proc_info->cb, should_be_cb);
	    else if (sizeof (fhandler_union) != child_proc_info->fhandler_union_cb)
	      multiple_cygwin_problem ("fhandler size", child_proc_info->fhandler_union_cb, sizeof (fhandler_union));
d853 1
d859 2
a860 2
	    system_printf ("unknown exec type %d", child_proc_info->type);
	    child_proc_info = NULL;
@


1.112.2.10
log
@	* include/cygwin/cygserver.h: Add forward declarations of class
	transport_layer_base and class process_cache to reduce
	dependencies between header files.
	* include/cygwin/cygserver_process.h: Add include of
	"threaded_queue.h".
	* cygserver.cc: Remove unnecessary cygserver header files.
	* cygserver_client.cc: Ditto.
	* cygserver_process.cc: Ditto.
	* cygserver_shm.cc: Ditto.
	* cygserver_shm.h: Ditto.
	* cygserver_transport_pipes.cc: Ditto.
	* dcrt0.cc: Ditto.
	* fhandler_tty.cc: Ditto.
	* tty.cc: Ditto.
@
text
@d36 1
@


1.112.2.11
log
@Merged changes from HEAD
@
text
@d454 1
a454 1
static MEMORY_BASIC_INFORMATION NO_COPY sm;
d823 2
a824 4
  if (si.cbReserved2 < EXEC_MAGIC_SIZE || !child_proc_info
      || memcmp (child_proc_info->zero, zeros, sizeof (zeros)) != 0)
    child_proc_info = NULL;
  else
@


1.112.2.12
log
@Merged changes from HEAD
@
text
@a76 2
char NO_COPY almost_null[1];

d706 3
d721 1
a721 10
  if (__argv[0] && (__progname = strrchr (__argv[0], '/')))
    ++__progname;
  else
    __progname = __argv[0];
  if (__progname)
    {
      char *cp = strchr (__progname, '\0') - 4;
      if (cp > __progname && strcasematch (cp, ".exe"))
	*cp = '\0';
    }
@


1.112.2.13
log
@	* dcrt0.cc: Only check for cygserver if and when required.
	(dll_crt0_1): Remove call to `cygserver_init ()'.
	* fhandler_tty.cc (fhandler_tty_slave::open): Change the cygserver
	logic to allow for the fact that `cygserver_init ()' may not yet
	have been called.
	(fhandler_tty_slave::cygserver_attach_tty): Tweak the cygserver
	request logic to conform to the practice elsewhere in the code.
	* tty.cc (tty::common_init): Add an explicit call to
	`cygserver_init ()' if it hasn't already been called.
	* include/cygwin/cygserver.h (CYGSERVER_UNAVAIL): Rename from
	`CYGSERVER_DEAD'.
	(client_request_get_version::check_version): Make available in
	cygserver as well the DLL.
	(check_cygserver_available): Ditto.  Remove `check_version_too'
	argument.
	(cygserver_init): Ditto.  And likewise.
	* cygserver_client.cc (client_request_get_version::check_version):
	Make available in cygserver as well the DLL.
	(client_request::make_request): This may now be called without
	`cygserver_init ()' having been called first.  Detect this and
	call it as required.  Add tracing.
	(check_cygserver_available): Make available in cygserver as well
	the DLL.  Remove `check_version_too' argument and always check the
	version information.  And since this is called from within
	`cygserver_init ()', force `cygserver_running' before calling
	`client_request::make_request ()'.
	(cygserver_init): Make available in cygserver as well the DLL.
	Remove `check_version_too' argument.
@
text
@d36 1
d683 2
@


1.112.2.14
log
@Merged changes from HEAD
@
text
@d573 1
d591 1
a595 2
	    if (child_proc_info->pppid_handle)
	      CloseHandle (child_proc_info->pppid_handle);
d620 2
a623 1
      debug_fixup_after_fork_exec ();
d625 2
a630 3
  ProtectHandle (hMainProc);
  ProtectHandle (hMainThread);

d846 3
@


1.112.2.15
log
@Merged changes from HEAD
@
text
@a583 2
      bool close_ppid_handle = false;
      bool close_hexec_proc = false;
a589 1
	    close_ppid_handle = !!child_proc_info->pppid_handle;
d592 4
a595 3
	    /* Have to delay closes until after cygheap is setup */
	    close_hexec_proc = !!spawn_info->hexec_proc;
	    close_ppid_handle = !!child_proc_info->pppid_handle;
a621 4
      if (close_hexec_proc)
	CloseHandle (spawn_info->hexec_proc);
      if (close_ppid_handle)
	CloseHandle (child_proc_info->pppid_handle);
a772 8
#ifdef DEBUGGING
void
break_here ()
{
  debug_printf ("break here");
}
#endif

a775 1
  DWORD len;
d780 1
a780 3
      buf[0] = '\0';
      len = GetModuleFileName (NULL, buf, MAX_PATH);
      console_printf ("Sleeping %d, pid %u %s\n", atoi (buf), GetCurrentProcessId (), buf);
a782 16
  if (GetEnvironmentVariable ("CYGWIN_DEBUG", buf, sizeof (buf) - 1))
    {
      char buf1[MAX_PATH + 1];
      len = GetModuleFileName (NULL, buf1, MAX_PATH);
      char *p = strchr (buf, '=');
      if (!p)
	p = "gdb.exe -nw";
      else
	*p++ = '\0';
      if (strstr (buf1, buf))
	{
	  error_start_init (p);
	  try_to_debug ();
	  break_here ();
	}
    }
d788 1
@


1.112.2.16
log
@Merged changes from HEAD
@
text
@a633 1

a636 4
  /* Initialize debug muto, if DLL is built with --enable-debugging.
     Need to do this before any helper threads start. */
  debug_init ();

d806 1
a806 1
	p = (char *) "gdb.exe -nw";
@


1.112.2.17
log
@Merged changes from HEAD
@
text
@a808 2
      strlwr (buf1);
      strlwr (buf);
@


1.112.2.18
log
@Merged changes from HEAD
@
text
@d628 1
@


1.112.2.19
log
@Merged changes from HEAD
@
text
@a35 1
#include "cygthread.h"
d41 2
a42 2
HANDLE NO_COPY hMainProc;
HANDLE NO_COPY hMainThread;
d572 1
d575 1
a632 1
  cygthread::init ();
@


1.112.2.20
log
@Merged changes from HEAD
@
text
@d773 1
a773 1
  wait_for_sigthread ();
@


1.112.2.21
log
@Merged changes from HEAD
@
text
@d81 5
d98 2
a99 2
   /* malloc */ malloc, /* free */ free,
   /* realloc */ realloc,
d103 1
a103 1
   /* calloc */ calloc,
d161 4
a164 4
 * Replaces @@file in the command line with the contents of the file.
 * There may be multiple @@file's in a single command line
 * A \@@file is replaced with @@file so that echo \@@foo would print
 * @@foo and not the contents of foo.
d458 1
a458 2
#define CYGWIN_GUARD ((wincap.has_page_guard ()) ? \
                     PAGE_EXECUTE_READWRITE|PAGE_GUARD : PAGE_NOACCESS)
d499 1
a499 1
			 CYGWIN_GUARD))
@


1.112.2.22
log
@Merged changes from HEAD
@
text
@d960 4
a963 1
    vf->restore_exit (status);
@


1.112.2.23
log
@Merged changes from HEAD
@
text
@a794 1
      DWORD ms = atoi (buf);
d797 2
a798 2
      console_printf ("Sleeping %d, pid %u %s\n", ms, GetCurrentProcessId (), buf);
      Sleep (ms);
d871 1
a871 5
	multiple_cygwin_problem ("proc", child_proc_info->magic,
				 CHILD_INFO_MAGIC);
      else if (child_proc_info->cygheap != (void *) &_cygheap_start)
	multiple_cygwin_problem ("cygheap", (DWORD) child_proc_info->cygheap,
				 (DWORD) &_cygheap_start);
a894 2
	    /* intentionally fall through */
	  case _PROC_WHOOPS:
d1070 1
a1070 1
  if (_cygwin_testing && (strstr (what, "proc") || strstr (what, "cygheap")))
d1072 1
a1072 1
      child_proc_info->type = _PROC_WHOOPS;
@


1.112.2.24
log
@Merged changes from HEAD
@
text
@d569 2
@


1.112.2.25
log
@Merged changes from HEAD
@
text
@d1056 4
a1059 4
      HANDLE h = CreateFile ("CONOUT$", GENERIC_READ | GENERIC_WRITE,
			     FILE_SHARE_WRITE | FILE_SHARE_WRITE,
			     &sec_none, OPEN_EXISTING, 0, 0);
      if (h != INVALID_HANDLE_VALUE)
@


1.111
log
@* dcrt0.cc (dll_crt0_1): Create vfork main storage here so that it can be
queried in waitsig later.
* sigproc.cc (wait_sig): Don't deliver a signal if in a vfork.
* fork.cc (vfork): Deliver all signals on parent return from vfork.
@
text
@d811 1
a811 1
		   &hMainThread, 0, FALSE, DUPLICATE_SAME_ACCESS);
d823 2
a824 1
	    CloseHandle (fork_info->pppid_handle);
@


1.110
log
@        * dcrt0.cc (_dll_crt0()): Don't call wincap.init() here.
@
text
@d537 1
d648 1
@


1.109
log
@        * Makefile.in: Build wincap.o.
        * wincap.cc: New file.
        * wincap.h: Ditto.
        * autoload.cc: Add dynamic load statement for `CreateHardLinkA'.
        * dcrt0.cc (os_being_run): Eliminated.
        (osname): Ditto.
        (iswinnt): Ditto.
        (set_os_type): Ditto.
        (dll_crt0_1): Call wincap.init() instead of set_os_type().
        (_dll_crt0): Ditto.
        * environ.cc (set_chunksize): New function.
        (parse_thing): `forkchunk' setting now invokes function `set_chunksize'.
        * fork.cc (chunksize): Eliminated. Moved to be member of wincap.
        * host_dependent.h: Removed.
        * syscalls.cc (_link): Try using `CreateHardLinkA' first, if available.
        * cygheap.cc, dcrt0.cc, delqueue.cc, dir.cc,
        environ.cc, fhandler.cc, fhandler.h, fhandler_console.cc,
        fhandler_mem.cc, fork.cc, mmap.cc, net.cc, pinfo.cc, pinfo.h,
        security.cc, syscalls.cc, sysconf.cc, syslog.cc, thread.cc,
        times.cc, tty.cc, uinfo.cc, uname.cc, winsup.h: Use new wincap
        capability check throughout.
        * winsup.h: Include wincap.h. Eliminate extern declarations of
        `os_being_run' and `iswinnt'. Eliminate `os_type" definition.
        * include/cygwin/version.h: Bump version to 1.3.4.
@
text
@a798 3
  /* Set the os capabilities. */
  wincap.init ();

@


1.108
log
@Tue Sep 11 18:15:00 2001  Robert Collins <rbtcollins@@hotmail.com>

        * dcrt0.cc (cygwin_finished_initializing): Copy _mtinterf on fork;
        * fork.cc (fork_child): fixup thread-related structures after fork;
        * thread.cc (MTinterface::Init): Initialise the new mutex, condition and semaphore lists.
        (MTinterface::fixup_after_fork): Iterate through each list and fixup the objects.
        (pthread_cond::pthread_cond): Add this to the condition list.
        (pthread_cond::~pthread_cond): Remove this from the condition list.
        (pthread_cond::fixup_after_fork): Recreate as best we can the pre-fork state.
        (pthread_mutex::pthread_mutex): Add this to the mutex list.
        (pthread_mutex::~pthread_mutex): Remove this from the mutex list.
        (pthread_mutex::fixup_after_fork): Recreate as best we can the pre-fork state.
        (semaphore::semaphore): Store the initial value, and add this to the semaphore list.
        (semaphore::~semaphore): Remove this from the semaphore list.
        (semaphore::Post): Increment the current semaphore value.
        (semaphore::TryWait): Decrement the current semaphore value.
        (semaphore::Wait): Ditto.
        (semaphote::fixup_after_fork): Recreate the pre-fork state as best we can.
        * thread.h (pthread_mutex): New members to allow fixup_after_fork.
        (pthread_cond): Ditto.
        (semaphore): Ditto.
        (MTinterface): New list heads for tracking conds and semaphores.
@
text
@a36 1
#include "host_dependent.h"
a156 88
/* remember the type of Win32 OS being run for future use. */
os_type NO_COPY os_being_run;
char NO_COPY osname[40];
bool iswinnt;

/* set_os_type: Set global variable os_being_run with type of Win32
   operating system being run.  This information is used internally
   to manage the inconsistency in Win32 API calls between Win32 OSes. */
/* Cygwin internal */
static void
set_os_type ()
{
  OSVERSIONINFO os_version_info;
  const char *os;

  memset (&os_version_info, 0, sizeof os_version_info);
  os_version_info.dwOSVersionInfoSize = sizeof (OSVERSIONINFO);
  GetVersionEx (&os_version_info);

  iswinnt = 0;
  switch (os_version_info.dwPlatformId)
    {
      case VER_PLATFORM_WIN32_NT:
	os_being_run = winNT;
	os = "NT";
	iswinnt = 1;
	break;
      case VER_PLATFORM_WIN32_WINDOWS:
	if (os_version_info.dwMinorVersion == 0)
	  {
	    os_being_run = win95;
	    os = "95";
	  }
	else if (os_version_info.dwMinorVersion < 90)
	  {
	    os_being_run = win98;
	    os = "98";
	  }
	else /* os_version_info.dwMinorVersion == 90 */
	  {
	    os_being_run = winME;
	    os = "ME";
	  }
	break;
      default:
	os_being_run = unknown;
	os = "??";
	break;
    }
  __small_sprintf (osname, "%s-%d.%d", os, os_version_info.dwMajorVersion,
		   os_version_info.dwMinorVersion);
}

host_dependent_constants NO_COPY host_dependent;

/* Constructor for host_dependent_constants.  */

void
host_dependent_constants::init ()
{
  extern DWORD chunksize;
  /* fhandler_disk_file::lock needs a platform specific upper word
     value for locking entire files.

     fhandler_base::open requires host dependent file sharing
     attributes.  */

  switch (os_being_run)
    {
    case winNT:
      win32_upper = 0xffffffff;
      shared = FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE;
      break;

    case winME:
    case win98:
    case win95:
    case win32s:
      win32_upper = 0x00000000;
      shared = FILE_SHARE_READ | FILE_SHARE_WRITE;
      chunksize = 32 * 1024 * 1024;
      break;

    default:
      api_fatal ("unrecognized system type");
    }
}

d458 1
a458 1
#define CYGWIN_GUARD ((iswinnt) ? PAGE_GUARD : PAGE_NOACCESS)
d563 1
a563 1
  set_os_type ();
a635 3
  /* Initialize the host dependent constants object. */
  host_dependent.init ();

d799 2
a800 2
  /* Set the os_being_run global. */
  set_os_type ();
@


1.107
log
@* cygheap.h (init_cygheap): Move heap pointers here.
* include/sys/cygwin.h (perprocess): Remove heap pointers.
* dcrt0.cc (__cygwin_user_data): Reflect obsolete perprocess stuff.
(_dll_crt0): Don't initialize heap pointers.
(cygwin_dll_init): Ditto.
(release_upto): Use heap pointers from cygheap.
* heap.h: Ditto.
* fork.cc (fork_parent): Ditto.  Don't set heap pointers in ch.
(fork_child): Remove obsolete sigproc_fixup_after_fork.
* shared.cc (memory_init): Reorganize so that cygheap initialization is called
prior to regular heap since regular heap uses cygheap now.
* sigproc.cc (proc_subproc): Eliminate zombies allocation.
(sigproc_init): Move zombies alloation here.  Don't free up array on fork, just
reuse it.
(sigproc_fixup_after_fork): Eliminate.
* sigproc.h: Ditto.
* include/cygwin/version.h: Reflect change to perprocess structure.
@
text
@d73 1
a73 1
MTinterface _mtinterf NO_COPY;
@


1.106
log
@Move appropriate variables to NO_COPY segment, throughout.
@
text
@d104 3
a106 3
    /* unused */ { 0, 0, 0},
   /* heapbase */ NULL, /* heapptr */ NULL, /* heaptop */ NULL,
   /* unused1 */ 0, /* forkee */ 0, /* hmodule */ NULL,
a685 3
	    user_data->heaptop = child_proc_info->heaptop;
	    user_data->heapbase = child_proc_info->heapbase;
	    user_data->heapptr = child_proc_info->heapptr;
a895 1
  user_data->heapbase = user_data->heapptr = user_data->heaptop = NULL;
a952 1
  user_data->heapbase = user_data->heapptr = user_data->heaptop = NULL;
@


1.105
log
@Remove initialization of static or global values to zero, throughout.  This
just needlessly grows the size of the DLL.
* tty.cc (tty::alive): Make inuse handle non-inheriting on open, just for
thread safety.
@
text
@d70 1
a70 1
unsigned int signal_shift_subtract = 1;
@


1.104
log
@* child_info.h: Modify magic number.
* dcrt0.cc (_cygwin_testing): Define.
(_dll_crt0): Set _cygwin_testing if CYGWIN_TESTING environment variable exists.
Don't issue "conflicting versions" error if _cygwin_testing is true.
* shared.cc (shared_name): Use _cygwin_testing global rather than testing the
environment.
* syscalls.cc (_write): Remove debugging info.
@
text
@d57 2
a58 2
BOOL display_title = FALSE;
BOOL strip_title_path = FALSE;
d62 1
a62 1
int cygwin_finished_initializing = 0;
d89 1
a89 1
  char *__progname = NULL;
d113 1
a113 1
  bool ignore_case_with_glob = FALSE;
d116 1
a116 1
  int pinger = 0;
d120 1
a120 1
char *old_title = NULL;
d624 2
a625 2
int _declspec(dllexport) __argc = 0;
char _declspec(dllexport) **__argv = NULL;
@


1.103
log
@* smallprint.c (console_printf): New function.
* dcrt0.cc (dll_crt0_1): Use console_printf for debugging output.
* debug.cc (debug_mark_closed): New function.
(close_handle): Use debug_mark_closed.
* debug.h: Declare new functions.
* dtable.cc (dtable::build_fhandler): Remove unneeded extern.
* spawn.cc: Cosmetic changes.
* winsup.h: Define NO_COPY for C files, too.  Declare a global.
@
text
@d75 2
d877 1
d879 1
a879 2
  char buf[80];
  if (GetEnvironmentVariable ("CYGWIN_SLEEP", buf, sizeof (buf)))
d881 2
a882 2
      console_printf ("Sleeping %d, pid %u\n", atoi (buf), GetCurrentProcessId ());
      Sleep (atoi (buf));
d886 3
d929 3
a931 1
	    if ((fork_info->type & PROC_MAGIC_MASK) == PROC_MAGIC_GENERIC)
@


1.102
log
@Throughout, change check for running under Windows NT to 'iswinnt'.
* dcrt0.cc (set_os_type): Set 'iswinnt' appropriately.
* cygheap.cc (init_cheap): Revert to using VirtualAlloc for allocating cygheap.
(cygheap_setup_for_child_cleanup): New function.  Standard function to call
after calling CreateProcess to cleanup cygheap info passed to child.
(cygheap_fixup_in_child): Copy cygheap from shared memory into allocated space
under Windows 9x or if can't relocate shared space under NT.
* cygheap.h: Declare new function.
* spawn.cc (spawn_guts): Use cygheap_fixup_in_child.
* fork.cc (fork_parent): Ditto.
* winsup.h: Declare iswinnt.
@
text
@d879 1
a879 1
      small_printf ("Sleeping %d, pid %u\n", atoi (buf), GetCurrentProcessId ());
@


1.101
log
@* dcrt0.cc (alloc_stack_hard_way): Make half-hearted attempt to deal with
growing stack under Windows 95.
* Makefile.in: Add install-lib and install-headers.
@
text
@d159 1
d175 1
d181 1
d545 1
a545 1
#define CYGWIN_GUARD ((os_being_run == winNT) ? PAGE_GUARD : PAGE_NOACCESS)
@


1.100
log
@Throughout, reorganize header file inclusion to put security.h prior to
fhandler.h.
* fhandler.h (fhandler_base::get_inheritance): New method.
* fhandler_socket.cc (fhandler_socket::create_secret_event): Use proper
close-on-exec inheritance when creating.
(fhandler_socket::check_peer_secret_event): Create handle as non-inheritable.
@
text
@d542 2
d583 1
a583 1
			 PAGE_EXECUTE_READWRITE|PAGE_GUARD))
@


1.99
log
@* cygheap.cc (_cmalloc): Use correct constants for size calculation.
* dcrt0.cc (dll_crt0_1): Move uid initialization earlier.
* fork.cc (fork_parent): Move cygheap_setup_in_child to just prior to
CreateProcess so that all contents of cygheap are copied.
* spawn.cc (spawn_guts): Ditto.
@
text
@d27 1
a37 1
#include "security.h"
@


1.98
log
@* child_info.h: Bump magic number.
(class child_info): Add an element.
* cygheap.cc (init_cheap): Allocate cygwin heap in shared memory area.
(cygheap_fixup_in_child): Map cygwin heap, passed from parent via shared memory
into correct address.
(cygheap_setup_for_child): New function.
* cygheap.h: Declare new functions.
* dcrt0.cc (dll_crt0_1): Accomodate new cygheap_fixup_in_child arguments.
Avoid protecting subproc_ready unless it is spawn/nowait.
* fork.cc (fork_parent): Use new cygheap_setup_for_child function to setup
cygwin heap info.  Close passed cygheap shared memory handle.
* spawn.cc (spawn_guts): Ditto.  Also, reorganize to avoid synchronization
between parent and child in non-P_OVERLAY case.
* sigproc.cc (wait_sig): Only signal subproc_ready when execing.
@
text
@d698 1
a712 1
	    myself->uid = spawn_info->moreinfo->uid;
@


1.97
log
@forced commit
@
text
@a671 2
      cygheap = child_proc_info->cygheap;
      cygheap_max = child_proc_info->cygheap_max;
d676 1
a676 1
	    cygheap_fixup_in_child (child_proc_info->parent, 0);
d691 1
a691 1
	    cygheap_fixup_in_child (spawn_info->parent, 1);
d710 2
a711 1
	    ProtectHandle (child_proc_info->subproc_ready);
@


1.96
log
@* path.cc (normalize_posix_path): Revert ..  check removed by previous changes.
* cygheap.h: Temporarily declare path_prefix_p here.
@
text
@@


1.95
log
@* cygheap.cc (_cfree): Add regparm attribute.
(_crealloc): Ditto.
* dcrt0.cc (dll_crt0_1): Default to always checking for executable for now.
* dtable.cc (dtable::not_open): Move method.
* dtable.h (dtable): Here.
* exceptions.cc (ctrl_c_handler): Don't expect process group leader to handle a
signal if it doesn't exist.
* fhandler.h (fhandler_base): Make openflags protected.
* localtime.c (tzsetwall): Check for __CYGWIN__ as well as __WIN32__.
* path.cc (path_conv::check): Add some comments.  Change strcat to assignment.
* lib/_cygwin_S_IEXEC.cc (_cygwin_bob__): Eliminate.
* fhandler_tty.cc (fhandler_console::dup): Set controlling terminal if
necessary.
* fhandler_tty.cc (fhandler_tty_slave::dup): Ditto.
@
text
@d29 1
a31 1
#include "path.h"
@


1.94
log
@Throughout, change 'tty_attached' to 'real_tty_attached', for clarity.
Throughout, change 'OutputStopped' to 'output_stopped', for consistency.
* dtable.cc (stdio_init): Set controlling tty if not set by stdio opens.
* exceptions.cc (ctrl_c_handler): Avoid special pgid checking if no tty is
associated with the process.
(Suggested by Tim Baker <dbaker@@direct.ca>)
* external.cc (fillout_pinfo): Return actual tty number for ctty.
* fhandler_console.cc (get_tty_stuff): Set ctty when shared memory is
allocated.  Accept flags input from open().
(set_console_ctty): New function.
(fhandler_console::open): Pass flags to get_tty_stuff and rely on this function
to set the ctty, if appropriate.
* fhandler_termios.cc (fhandler_termios::set_ctty): Move to tty_min class.
* fhandler_tty.cc (fhandler_tty_slave::open): Use tc field to access
set_ctty().
* tty.h (TTY_CONSOLE): Move to include/sys/cygwin.h.
(tty_min): Add set_ctty class here.
* include/sys/cygwin.h (TTY_CONSOLE): New home here.
* path.cc (symlink_info): Make contents an actual buffer.  Pass more flags to
case_check.
(path_conv::check): Reorganize to do parsing based on posix path rather than
native path.
(symlink_info::check): Expect posix path as input.  Translate to native path
here.  Accept path_conv flags.  Stop parsing if not a symlink regardless of
whether previous path was a symlink.
@
text
@d112 1
a112 1
  int __declspec (dllexport) _check_for_executable = FALSE;
a754 3

  if (!CYGWIN_VERSION_CHECK_FOR_S_IEXEC)
    _check_for_executable = TRUE;
@


1.93
log
@Throughout, change fdtab references to cygheap->fdtab.
* child_info.h (cygheap_exec_info): Eliminate special fdtab stuff.
* spawn.cc (spawn_guts): Ditto.
* cygheap.cc (cygheap_init): Initialize fdtab, if appropriate.
* cygheap.h (CYGHEAPSIZE): Include size of init_cygheap.
(_cmalloc_entry): Include fdtab here.
* dtable.h (dtable): Declare/define new methods.
* dtable.cc (dtable::vfork_child_fixup): New method.
(dtable::fixup_after_exec): Remove unneeded extra arguments.
* dcrt0.cc (dll_crt0_1): Ditto.
* environ.cc (getwinenv): Use case sensitive comparison.
(winenv): Make a copy of environment cache to avoid realloc problems when
duplicate environment variables exist in the environment.  (From Egor Duda)
* net.cc (cygwin_socket): Revert Apr 14 change.
* include/sys/file.h: Protect against previous X_OK definition.
* passwd.cc: Eliminate passwd_sem throughout.
* security.cc: Ditto.
* cygwin.din: Export New functions.
* passwd.cc (read_etc_passwd): Make race safe.
(getpwuid_r): New function.
(getpwnam_r): New function.
@
text
@d1037 1
a1037 1
      if (getpgrp () > 0 && myself->pid == myself->sid && tty_attached (myself))
@


1.92
log
@* path.h (cwdstuff): Move class.
* cygheap.h (cwdstuff): To here.
(init_cygheap): Add cwd field.
* child_info.h (cygheap_exec_info): Eliminate cwd stuff.
(child_info_spawn): Ditto.
* dcrt0.cc (dll_crt0_1): Remove cygcwd.fixup_after_exec call.  Convert cygcwd
reference to cygheap->cwd.
* path.cc: Ditto, throughout.
(cwdstuff::copy): Eliminate.
(cwdstuff::fixup_after_exec): Ditto.
* spawn.cc (spawn_guts): Eliminate call to cygcwd.copy.
* fhandler.h (FH_OSS_DSP): Move into "fast" device category.
@
text
@a22 1
#include "cygheap.h"
d25 2
d28 2
d31 1
a31 1
#define NEED_VFORK
a32 3
#include "perprocess.h"
#include "path.h"
#include "dtable.h"
d704 1
a704 2
	    fdtab.fixup_after_exec (spawn_info->parent, spawn_info->moreinfo->nfds,
				    spawn_info->moreinfo->fds);
a717 1
      // fdtab.vfork_child_fixup ();
d728 1
d772 1
a772 1
  /* Allocate fdtab */
@


1.91
log
@Work around new g++ problem.
@
text
@a703 3
	    cygcwd.fixup_after_exec (spawn_info->moreinfo->cwd_win32,
				     spawn_info->moreinfo->cwd_posix,
				     spawn_info->moreinfo->cwd_hash);
d719 1
d736 1
a736 1
  cygcwd.init ();
@


1.90
log
@* lib/_cygwin_S_IEXEC.c: Remove "const" from globals or they never seem to be
defined.  Wrap definitions in extern "C".  Include winsup.h to assure proper
definitions.
* dcrt0.cc (dll_crt0_1): Call stdio_init after premain run so that binmode.o,
etc., will control default stdio settings.
* dtable.cc (dtable::init_std_file_from_handle): Allow __fmode to force
binmode/textmode settings.  Default pipes to binmode.
@
text
@d928 1
@


1.89
log
@* dlopen.c (dlopen): Return NULL when name is NULL (suggested by
chrisiasci@@aol.com).
* cygwin.din: Add a new, internally used export - _check_for_executable.
* dcrt0.cc (dll_crt0_1): Set _check_for_executable for older binaries.  Pass
user_data to premain functions.
* fhandler.cc (fhandler_disk_file::open): Only check for executable if the
linked program is intereested in the executable bit.
(fhandler_disk_file::check_execable_p): Delete.
* fhandler.h (executable_states): New enumeration of various states of
executable bit caring.
(fhandler_base::set_execable_p): New method.
* fhandler_termios.cc (fhandler_termios::line_edit): Flag when a signal has
been sent to the tty.  Return -1 when this is so.
* fhandler_console.cc (fhandler_console::read): Return -1 when signal sending
character encountered.
* path.cc (path_conv::check): Record when path refers to a disk device.  Move
executable extension check here.
(check_sysfile): Accomodate new EXEC path states.
(has_suffix): Remove.
(next_suffix): Remove.
(class suffix_scan): New clas.
(suffix_scan::has): New method.
(suffix_scan:next): New method.
(symlink_info::check): Use suffix_scan method to control for scanning for
suffixes.
* path.h (path_conv::exec_state): New method.
* perprocess.h: Make "C" friendly.
* include/cygwin/version.h: Define CYGWIN_VERSION_CHECK_FOR_S_IEXEC.  Bump
CYGWIN_VERSION_API_MINOR.
* include/sys/cygwin.h: Change premain declarations.
* winsup.h: Move __cplusplus test to after builtin defines.
@
text
@a786 3
  /* Set up standard fds in file descriptor table. */
  stdio_init ();

d816 3
@


1.88
log
@*** empty log message ***
@
text
@d30 1
a34 1
#include "perprocess.h"
d111 5
a115 1
  BOOL ignore_case_with_glob = FALSE;
d759 3
d818 1
a818 1
      user_data->premain[i] (__argc, __argv);
d842 1
a842 1
      user_data->premain[i] (__argc, __argv);
@


1.87
log
@* dcrt0.cc (locale_init): Remove.
@
text
@d41 1
a41 1
#define PREMAIN_LEN (sizeof(user_data->premain) / sizeof (user_data->premain[0]))
d359 1
a359 1
  if (!dos_spec && isquote(*word) && word[1] && word[2])
d604 1
a604 1
	alloc_stack_hard_way (ci, b + sizeof(b) - 1);
d875 1
a875 1
      Sleep (atoi(buf));
@


1.86
log
@* cygwin.din: Export rand48 functions.
* thread.cc (MTinterface::Init): Remove the initialization of `reent_data'.
* dcrt0.cc: Add the initalizer to the declaration of `reent_data'.
* include/cygwin/version.h: Bump CYGWIN_VERSION_API_MINOR to 35.
@
text
@a767 3
  /* Initialize locale */
  locale_init ();

@


1.85
log
@* syscalls.cc (_link): Make sure that newpath does not exist.  Set errno if it
does.
* cygheap.cc (init_cheap): Don't specify a load address for the heap.  It
doesn't work on #!*& Windows 9x.
(cygheap_init): Move GetUserName to memory_init.
* dcrt0.cc (dll_crt0_1): Call new memory_init functin, eliminate call to
heap_init.
* heap.cc (heap_init): Improve error output.
* heap.h: Correct some declarations.
* shared.cc (mount_table_init): Remove.
(memory_init): Renamed from shared_init.  Reorganize to accomodate strange
Windows 9x problems with cygheap/heap interaction.
* shared_info.h: Rename shared_init to memory_init.
@
text
@d88 1
a88 1
  struct _reent reent_data;
d767 3
@


1.84
log
@Throughout, change 'cygwin_shared.mount' to 'mount_table'.
* child_info.h (child_info): Move shared_h, console_h to cygheap.  Add mount_h.
* cygheap.h (init_cygheap): Add shared_h, console_h.
* cygheap.cc (init_cheap): Initialize heap at a fixed location after the shared
memory regions.  Initialize cygheap->user name here.
* dcrt0.cc (dll_crt0_1): Call getpagesize () to initialize constants.  Remove
cygheap_init since it is done in shared_init now.
(_dll_crt0): Initialize mount_h, remove shared_h and console_h initialization.
* fhandler_console.cc (console_shared_h): Eliminate.
(get_tty_stuff): Use cygheap->console_h rather than console_shared_h.
* heap.cc (heap_init): Use page size constant calculated earlier in
initialization.
* shared.cc: Eliminate cygwin_shared_h.  Add cygwin_mount_h.
(mount_table_init): New function for initializing a user mount table.
(open_shared_file_map): Use constant for shared memory region.  Initialize
cygheap and mount table here.
(open_shared): Improve debugging output.
(shared_info::initialize): Eliminate call to mount.init.
(shared_terminate): Use cygheap->shared_h.  Close cygwin_mount_h.
(open_shared_file_map): Eliminate.
* shared_info.h (mount_info): Add a version field.
(shared_align_past): New macro for calculating location for shared memory
regions.
* sigproc.cc (init_child_info): Eliminate shared_h, console_h.
* spawn.cc (spawn_guts): Pass on cygwin_mount_h iff not a different user.
* syscalls.cc (system_info): New global holding system memory defaults.
(getpagesize): Use system_info.
* uinfo.cc (internal_getlogin): Only fill in user name if nonexistent.
* winsup.h: Declare system_info.
* passwd.cc (read_etc_passwd): Use cygheap->user.name () rather than retrieving
the name again.
@
text
@d726 2
a727 2
     or attach to the shared data structure if it's already running. */
  shared_init ();
a729 3

  /* Initialize the heap. */
  heap_init ();
@


1.83
log
@* pinfo.cc (codepage_init): Move function.
* environ.cc (codepage_init): To here.
* exceptoins.cc (SIG_NONMASKABLE): Remove SIGCONT from consideration since it
is supposed to be maskable.
* signal.cc (sigaction): Ditto.
* sigproc.cc (wait_sig): Ditto.
* winsup.h: Eliminate global declaration of codepage_init.
@
text
@d635 1
a635 3
  /* Initialize SIGSEGV handling, etc...  Because the exception handler
     references data in the shared area, this must be done after
     shared_init. */
d657 1
a736 3
  if (!child_proc_info)
    cygheap_init ();

d917 1
a918 2
	      cygwin_shared_h = child_proc_info->shared_h;
	      console_shared_h = child_proc_info->console_h;
@


1.82
log
@* autoload.cc: Autoload CharToOemA.
* dcrt0.cc (dll_crt0_1): Translate command line to OEM if current codepage is
OEM.
* environ.cc: Add new option 'codepage' to CYGWIN environment variable.
* fhandler_clipboard.cc (fhandler_clipboard::read): Read clipboard in OEM mode
if current codepage is OEM.
* fhandler_console.cc (fhandler_console::read): Only translate console input if
current codepage is ANSI.
* fhandler_console.cc (fhandler_console::write_normal): Translate output data
if current codepage is ANSI.
* pinfo.cc (codepage_init): New function.  Setup current codepage from CYGWIN
environment variable and set codepage for file APIs.
* security.cc (read_sd): Translate file name to it if current codepage is OEM.
* winsup.h: (sys_wcstombs,sys_mbstowcs): Use current codepage for translations
between multibyte and widechar string and vice versa.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000 Cygnus Solutions.
d796 1
a796 1
	CharToOemA ( line, line );
@


1.81
log
@Throughout use myself->ppid_handle rather than parent_alive.
* child_info.h (child_info): Eliminate parent_alive.
* dcrt0.cc (dll_crt0_1): Call fork_init for debugging pid creation.
* fork.cc (fork_child): Reflect change to fixup_mmaps_after_fork arguments.
(slow_pid_reuse): New function to grab last 'n' pids to prevent pid reuse.
(fork_parent): Move last_fork_proc into slow_pid_reuse.  Handle fork_pids
debugging.  Eliminate unnecessary call to set_child_mmap_ptr.
(fork_init): New debugging function.
* mmap.cc (fixup_mmaps_after_fork): Renamed from recreate_mmaps_after_fork.
Rely on copied data after a fork.
(set_child_mmap_ptr): Eliminate.
* pinfo.h (_pinfo): Eliminate parent_alive, mmap_ptr and reflect above changes.
* spawn.cc (spawn_guts): Eliminate vestiges of "old way" of sending new hProc
to parent process.
@
text
@d18 2
d60 1
d794 3
@


1.80
log
@        * cygheap.cc (cygheap_root::cygheap_root): New function.
        (cygheap_root::~cygheap_root): Ditto.
        (cygheap_root::operator=): Ditto.
        (cygheap_user::~cygheap_user): Ditto.
        (cygheap_user::set_name): Ditto.
        (cygheap_user::set_logsrv): Ditto.
        (cygheap_user::set_domain): Ditto.
        (cygheap_user::set_sid): Ditto.
        * cygheap.h (cygheap_root): New class.
        (cygheap_user): Ditto.
        (init_cygheap): Change type of `root' member to cygheap_root.
        Add `user' member.
        * dir.cc (opendir): Use new `cygheap_root' class.
        * dcrt0.cc (dll_crt0_1): Use new `cygheap_user' class.
        * fork.cc (fork_parent): Ditto.
        * grp.cc (getgroups): Ditto.
        * passwd.cc (search_for): Ditto.
        * path.cc: Use new `cygheap_root' class throughout.
        * pinfo.h (_pinfo): Remove `use_psid'. Move `username', `psid',
        `logsrv', `domain', `orig_{uid,gid}' and `real_{uid,gid}' to
        cygheap_user class.
        * security.cc: Use new `cygheap_user' class throughout.
        * shared.cc (sec_user): Ditto.
        * sigproc.cc (proc_subproc): Remove copy statements for user
        related information moved to `cygheap_user' class.
        * spawn.cc (spawn_guts): Invalidate current chroot settings
        when creating Windows environment. Use new `cygheap_user' class.
        * syscalls.cc: Use new `cygheap_user' class throughout.
        * uinfo.cc: Ditto.
        * uinfo.cc (internal_getlogin): Change parameters to reflect the
        move of user information to cygheap.
@
text
@a58 1
HANDLE NO_COPY parent_alive = NULL;
a740 1

d759 7
a917 10

	      /* We don't want subprocesses to inherit this */
	      if (dynamically_loaded)
		parent_alive = NULL;
	      else if (!DuplicateHandle (hMainProc, child_proc_info->parent_alive,
					hMainProc, &parent_alive, 0, 0,
					DUPLICATE_SAME_ACCESS
					| DUPLICATE_CLOSE_SOURCE))
		  system_printf ("parent_alive DuplicateHandle failed, %E");

@


1.79
log
@* cygheap.h (init_cygheap): New struct holding values that live in the Cygwin
heap.
* child_info.h (child_info): Change pointer type of cygheap to init_cygheap.
* cygheap.cc (init_cheap): Point cygheap_max after contents of cygheap.  Move
some stuff into cygheap.h.
* dir.cc (opendir): Change to use root and rootlen in cygheap rather than in
myself.
(mkdir): Change to use umask in cygheap rather than in myself.
* path.cc: Ditto, throughout.
* syscalls.cc (_open): Ditto.  Change to use umask in cygheap rather than in
myself.
(chroot): Change to allocate root dir on the cygwin heap.
(umask): Change to use umask in cygheap rather than in myself.
(cygwin_bind): Ditto.
* sigproc.cc (proc_subproc): Don't copy umask or root stuff as this happens
automatically now.
* pinfo.h (_pinfo): Migrate stuff out of here and into init_cheap.
* dcrt0.cc (dll_crt0_1): Call cygheap_init later in startup for first cygwin
process.
@
text
@d714 1
a714 1
	      myself->use_psid = 0;
@


1.78
log
@* dcrt0.cc: New global variable `ignore_case_with_glob'.
(dll_crt0_1): Disable case-insensitive globbing before calling `main'.
* environ.cc (glob_init): New static function to set or clear
`ignore_case_with_glob'.
(known): Changed "glob" entry to call `glob_init'.
* glob.c (match): Use case-insensitive globbing if needed.
@
text
@a656 1
  cygheap_init ();	/* Initialize cygheap muto */
d736 3
a865 8
  char zeros[sizeof (fork_info->zero)] = {0};
#ifdef DEBUGGING
  strace.microseconds ();
#endif

  /* Set the os_being_run global. */
  set_os_type ();

d875 8
d884 1
@


1.77
log
@* dcrt0.cc (sigthread::init): Reinstitute sigthread lock as a critical section.
(dll_crt0_1): Move sigthread lock initialization to earlier in startup.
* exceptions.cc (interrupt_on_return): Remove previous kludgy attempt to detect
an invalid frame.
(call_handler): Eliminate inner for loop.  Grab signal critical section lock
where appropriate.
* sigproc.cc (proc_subproc): Restore uid setting.
* sigproc.h (sigthread): Reinstitute sigthread lock as a critical section.
(sigframe): Grab the sigthread lock before clearing frame to avoid having the
signal thread use an invalid frame.
@
text
@d109 1
d838 3
@


1.76
log
@* child_info.h (child_info): Add pppid_handle for closing the parent's of the
parent handle.
* dcrt0.cc (_dll_crt0): Close parent's parent handle when spawned or forked.
* debug.cc (add_handle): Correct erroneous reference to handle structure when
printing warning.
* exceptions.cc (interrupt_now): Always return 1.
(interrupt_on_return): Accept a sigthread argument.  Check to see if this
argument has been trashed prior to setting up the stack return.
(call_handler): Add a loop around attempts to dispatch signals to detect case
where interrupt_on_return fails.
(_sigdelayed): Set up a temporary frame pointer prior to calling stuff that
could trigger an interrupt or the stack walking code will be very confused.
* fork.cc (fork_parent): Move a lot of the setup of the child process into
proc_subproc.
* spawn.cc (spawn_guts): Ditto.  Use ppid_handle to contact logical parent when
reparenting.
* pinfo.h (_pinfo): Remember the logical handle of the parent process.
* sigproc.cc (proc_subproc): Record most stuff necessary for the _pinfo
structure that is inferrable from myself when adding children.
(wait_sig): Always set 'pending_signals' flag when about to kick off the signal
scanning loop.  Reset it only if there are no pending signals.
@
text
@d616 1
a616 3
#if 0 /* FIXME: Someday we'll need this for inter-thread signalling */
  lock = new_muto (FALSE, s);
#endif
d659 2
a726 3

  mainthread.init ("mainthread"); // For use in determining if signals
				  //  should be blocked.
@


1.75
log
@        * autoload.cc: New file keeping all autoload stuff.
        * Makefile.in: Add autoload.o to dependencies.
        * dcrt0.cc: Move all autoload stuff to autoload.cc.
        * fhandler_mem.cc: Ditto.
        * net.cc: Ditto.
        * uinfo.cc: Ditto.
@
text
@d901 2
a903 1
	  case PROC_SPAWN:
@


1.74
log
@Add comment.
@
text
@a15 1
#include "autoload.h"
a1104 181

extern "C" {

/* This struct is unused, but it illustrates the layout of a DLL
   information block. */
struct DLLinfo
{
  char jmpinst[4];
  HANDLE h;
  DWORD flag;
  char name[0];
};

/* FIXME: This is not thread-safe! */
__asm__ ("
msg1:
  .ascii \"couldn't dynamically determine load address for '%s' (handle %p), %E\\0\"

  .align 32
noload:
  popl %edx		# Get the address of the information block
  movl 8(%edx),%eax	# Should we 'ignore' the lack
  test $1,%eax		#  of this function?
  jz 1f			# Nope.
  decl %eax		# Yes.  This is the # of bytes + 1
  popl %edx		# Caller's caller
  addl %eax,%esp	# Pop off bytes
  xor %eax,%eax		# Zero functional return
  jmp *%edx		# Return
1:
  movl 4(%edx),%eax	# Handle value
  pushl (%eax)
  leal 12(%edx),%eax	# Location of name of function
  push %eax
  push $msg1		# The message
  call ___api_fatal	# Print message. Never returns

  .globl cygwin_dll_func_load
cygwin_dll_func_load:
  movl (%esp),%eax	# 'Return address' contains load info
  addl $12,%eax		# Address of name of function to load
  pushl %eax		# Second argument
  movl -8(%eax),%eax	# Address of Handle to DLL
  pushl (%eax)		# Handle to DLL
  call _GetProcAddress@@8# Load it
  test %eax,%eax	# Success?
  jne gotit		# Yes
  jmp noload		# Issue an error or return
gotit:
  popl %ecx		# Pointer to 'return address'
  movb $0xe0,-1(%ecx)	# Turn preceding call to a jmp *%eax
  movl %eax,(%ecx)	# Point dispatch to address loaded above
  jmp *%eax
");

LoadDLLinitfunc (user32)
{
  HANDLE h;
  static NO_COPY LONG here = -1L;

  while (InterlockedIncrement (&here))
    {
      InterlockedDecrement (&here);
      Sleep (0);
    }

  if (user32_handle)
    /* nothing to do */;
  else if ((h = LoadLibrary ("user32.dll")) != NULL)
    user32_handle = h;
  else if (!user32_handle)
    api_fatal ("could not load user32.dll, %E");

  InterlockedDecrement (&here);
  return 0;		/* Already done by another thread? */
}

LoadDLLinitfunc (advapi32)
{
  HANDLE h;
  static NO_COPY LONG here = -1L;

  while (InterlockedIncrement (&here))
    {
      InterlockedDecrement (&here);
      Sleep (0);
    }

  if (advapi32_handle)
    /* nothing to do */;
  else if ((h = LoadLibrary ("advapi32.dll")) != NULL)
    advapi32_handle = h;
  else if (!advapi32_handle)
    api_fatal ("could not load advapi32.dll, %E");

  InterlockedDecrement (&here);
  return 0;
}

static void dummy_autoload (void) __attribute__ ((unused));
static void
dummy_autoload (void)
{
LoadDLLinit (user32)
LoadDLLfunc (CharToOemBuffA, 12, user32)
LoadDLLfunc (CloseClipboard, 0, user32)
LoadDLLfunc (CreateWindowExA, 48, user32)
LoadDLLfunc (DefWindowProcA, 16, user32)
LoadDLLfunc (DispatchMessageA, 4, user32)
LoadDLLfunc (FindWindowA, 8, user32)
LoadDLLfunc (GetClipboardData, 4, user32)
LoadDLLfunc (GetMessageA, 16, user32)
LoadDLLfunc (GetProcessWindowStation, 0, user32)
LoadDLLfunc (GetThreadDesktop, 4, user32)
LoadDLLfunc (GetUserObjectInformationA, 20, user32)
LoadDLLfunc (KillTimer, 8, user32)
LoadDLLfunc (MessageBoxA, 16, user32)
LoadDLLfunc (MsgWaitForMultipleObjects, 20, user32)
LoadDLLfunc (OemToCharBuffA, 12, user32)
LoadDLLfunc (OpenClipboard, 4, user32)
LoadDLLfunc (PeekMessageA, 20, user32)
LoadDLLfunc (PostMessageA, 16, user32)
LoadDLLfunc (PostQuitMessage, 4, user32)
LoadDLLfunc (RegisterClassA, 4, user32)
LoadDLLfunc (SendMessageA, 16, user32)
LoadDLLfunc (SetTimer, 16, user32)
LoadDLLfunc (SetUserObjectSecurity, 12, user32)

LoadDLLinit (advapi32)
LoadDLLfunc (AddAccessAllowedAce, 16, advapi32)
LoadDLLfunc (AddAccessDeniedAce, 16, advapi32)
LoadDLLfunc (AddAce, 20, advapi32)
LoadDLLfunc (AdjustTokenPrivileges, 24, advapi32)
LoadDLLfunc (CopySid, 12, advapi32)
LoadDLLfunc (CreateProcessAsUserA, 44, advapi32)
LoadDLLfuncEx (CryptAcquireContextA, 20, advapi32, 1)
LoadDLLfuncEx (CryptGenRandom, 12, advapi32, 1)
LoadDLLfuncEx (CryptReleaseContext, 8, advapi32, 1)
LoadDLLfunc (DeregisterEventSource, 4, advapi32)
LoadDLLfunc (EqualSid, 8, advapi32)
LoadDLLfunc (GetAce, 12, advapi32)
LoadDLLfunc (GetFileSecurityA, 20, advapi32)
LoadDLLfunc (GetLengthSid, 4, advapi32)
LoadDLLfunc (GetSecurityDescriptorDacl, 16, advapi32)
LoadDLLfunc (GetSecurityDescriptorGroup, 12, advapi32)
LoadDLLfunc (GetSecurityDescriptorOwner, 12, advapi32)
LoadDLLfunc (GetSidIdentifierAuthority, 4, advapi32)
LoadDLLfunc (GetSidSubAuthority, 8, advapi32)
LoadDLLfunc (GetSidSubAuthorityCount, 4, advapi32)
LoadDLLfunc (GetTokenInformation, 20, advapi32)
LoadDLLfunc (GetUserNameA, 8, advapi32)
LoadDLLfunc (ImpersonateLoggedOnUser, 4, advapi32)
LoadDLLfunc (InitializeAcl, 12, advapi32)
LoadDLLfunc (InitializeSecurityDescriptor, 8, advapi32)
LoadDLLfunc (InitializeSid, 12, advapi32)
LoadDLLfunc (IsValidSid, 4, advapi32)
LoadDLLfunc (LogonUserA, 24, advapi32)
LoadDLLfunc (LookupAccountNameA, 28, advapi32)
LoadDLLfunc (LookupAccountSidA, 28, advapi32)
LoadDLLfunc (LookupPrivilegeValueA, 12, advapi32)
LoadDLLfunc (MakeSelfRelativeSD, 12, advapi32)
LoadDLLfunc (OpenProcessToken, 12, advapi32)
LoadDLLfunc (RegCloseKey, 4, advapi32)
LoadDLLfunc (RegCreateKeyExA, 36, advapi32)
LoadDLLfunc (RegDeleteKeyA, 8, advapi32)
LoadDLLfunc (RegDeleteValueA, 8, advapi32)
LoadDLLfunc (RegLoadKeyA, 12, advapi32)
LoadDLLfunc (RegEnumKeyExA, 32, advapi32)
LoadDLLfunc (RegEnumValueA, 32, advapi32)
LoadDLLfunc (RegOpenKeyExA, 20, advapi32)
LoadDLLfunc (RegQueryValueExA, 24, advapi32)
LoadDLLfunc (RegSetValueExA, 24, advapi32)
LoadDLLfunc (RegisterEventSourceA, 8, advapi32)
LoadDLLfunc (ReportEventA, 36, advapi32)
LoadDLLfunc (RevertToSelf, 0, advapi32)
LoadDLLfunc (SetKernelObjectSecurity, 12, advapi32)
LoadDLLfunc (SetSecurityDescriptorDacl, 16, advapi32)
LoadDLLfunc (SetSecurityDescriptorGroup, 12, advapi32)
LoadDLLfunc (SetSecurityDescriptorOwner, 12, advapi32)
}
}
@


1.73
log
@* dcrt0.cc (do_exit): Remove debugging statement.
@
text
@d1041 1
@


1.72
log
@* dcrt0.cc (do_exit): Don't bother looking for pgrp children to send SIGHUP if
process has never created any children.
* fork.cc (fork): Set flag indicating that there is another process with our
process group.
* spawn.cc (spawn_guts): Ditto.
* pinfo.h (set_has_pgid_children): New methods for setting when process has
children in its process group.
* syscalls.cc (setpgid): Clear has_gid_children if pgid changes.
@
text
@a1028 2
	  system_printf ("%d == pgrp %d, send SIG{HUP,CONT} to stopped children",
			  myself->pid, myself->pgid);
@


1.71
log
@* dcrt0.cc (sigthread::init): Correct overzealous ifdef.
* exceptions.cc (call_handler): Avoid calling sigthread acquire lock.
* sigproc.h (sigthread): Comment out lock for now.
* sync.cc (muto::acquire): Add a minor optimization.
@
text
@d1027 1
a1027 1
      if (myself->pid == myself->pgid)
d1044 1
a1044 1
	    kill (-tp->getpgid (), SIGHUP);
@


1.70
log
@* sigproc.h (sigthread): Eliminate locking for now since per thread signalling
is not available.
* dcrt0.cc (sigthread::init): Ditto.
(dll_crt0_1): Move set_process_privileges call (temporarily?) to pinfo_init.
(pinfo_init): Only call set_process_privileges when allow_ntsec.
@
text
@d619 1
a620 1
#endif
@


1.69
log
@* dcrt0.cc (dll_crt0_1): init cygcwd before forkee branch

* environ.cc (conv_start_chars): Cache a table of "first
characters" for environment variables needing conversion.
(getwinenv): Use it.
(environ_init): Create it, also check first chars for TERM and
CYGWIN.

* path.cc: Use lookup table for case insensitive comparisons.
@
text
@d617 1
d620 1
a738 4

  /* Allow backup semantics. It's better done only once on process start
     instead of each time a file is opened. */
  set_process_privileges ();
@


1.68
log
@* fhandler_clipboard.cc: new file
* Makefile.in: include fhandler_clipboard.o in DLL_OFILES list.
* fhandler.h: add FH_CLIPBOARD to the devices enum.
(fhandler_dev_clipboard): new
* path.cc (windows_device_names): add "\\dev\\clipboard"
(get_device_number): check for "clipboard"
* dcrt0.cc: declare a few more functions from winuser.h
* dtable.cc (dtable::build_fhandler): check for FH_CLIPBOARD in
switch().
@
text
@d742 2
a762 2

  cygcwd.init ();
@


1.67
log
@* Makefile.in: Remove some obsolete stuff.
* dcrt0.cc (dll_crt0_1): Call signal_fixup_after_exec where appropriate.  Set
myself->uid from parent version.  Just use ThreadItem Init method.  Close or
store hexec_proc as appropriate.
(_dll_crt0): Store user_data->forkee here so that proper tests can be made
subsequently.
(do_exit): Remove hExeced stuff.
* environ.cc (environ_init): Accept environ count as well as environ pointer.
* environ.h: Reflect above change.
* pinfo.cc (pinfo_init): Ditto.  Accept environ count.
(fixup_in_spawned_child): Remove.
* spawn.cc (spawn_guts): Move signal code to dll_crt0_1.  Don't suspend execing
process since it is no longer necessary.  Store envc.
* exceptions.cc (signal_fixup_after_exec): New function.
(call_handler): Remove hExeced test.
* child_info.h (cygheap_exec_info): Store envc as well as envp.
(child_info_spawn): Store hexec_proc so that it can be closed in child.
* path.cc (normalize_posix_path): Avoid intermediate use of temporary cwd buf.
(normalize_win32_path): Ditto.
(cwdstuff::get_initial): Always set lock.
* sigproc.h: Remove hExeced.
* strace.cc (strace::vsprntf): Modify to accomodate for lack of hExeced.
* thread.cc (MTinterface::Init): Merge Init1 and ClearReent into this method.
(MTinterface::Init1): Eliminate.
(MTinterface::ClearReent): Eliminate.
* thread.h: Reflect above changes.
* include/sys/strace.h (strace): Make microseconds() public.  Make various
functions 'regparm', throughout.
* pinfo.h (_pinfo): Inline simple signal manipulation functions.  Requires
inclusion of thread.h which was removed from .cc files, where appropriate.
throughout.
* pinfo.cc: Eliminate signal manipulation functions.
(_pinfo::exit): Calculate total rusage for exiting process here.
* cygheap.cc (size2bucket): Eliminate.
(init_buckets): Ditto.
(_cmalloc): Calculate size and bits in a loop rather than going through a
function call.
(_crealloc): Use stored array index to calculate allocated size.
* spawn.cc (spawn_guts): Use _pinfo exit method to exit, calculating cpu usage.
@
text
@d1214 1
d1219 1
d1228 1
@


1.66
log
@* exceptions.cc (set_console_handler): Don't allocate
console_handler_thread_waiter.  It is obsolete.
(ctrl_c_handler): Don't use console_handler_thread_waiter.
* path.cc (hash_path_name): Fix handling of relative names.  Make case
insensitive.
* path.h (suffix_info): Use initializers.
* pinfo.h (_pinfo): Avoid initializers for null case.
* resource.cc (fill_rusage): Zero rest of rusage structure.
* security.cc (set_process_privileges): Don't reopen parent process.  Just use
hMainProc.
* signal.cc (signal): Track when a signal handler has been used.
(sigaction): Ditto.
* sigproc.cc (pchildren): Use default initializer.
(zombies): Ditto.
(sigproc_terminate): Avoid closing handles that will be closed on exit anyway.
(wait_sig): Send signal to "parent" on EXECing, not FORKing.
(wait_subproc): Send SIGCHLD here rather than in proc_wait to avoid potential
muto conflicts.
* sigproc.h (sigthread): Don't initialize to zero.  It's the default.
* spawn.cc (spawn_guts): Fill in resources from exec parent prior to
termination.
* sync.h (muto): Don't initialize to zero.
* syscalls.cc (close_all_files): Use one lock around entire loop and call
fhandler close/release stuff directly.
(_read): Don't use ready_for_read if there are not signal handlers active.
* dcrt0.cc (dll_crt0_1): Fix display of "title".
(do_exit): Use pinfo exit method to exit.
(__api_fatal): Ditto.
* exceptions.cc (signal_exit): Ditto.
* fork.cc (fork_child): Remove debugging stuff.  Use pinfo_fixup_after fork in
place of exec_fixup_after_fork.
* pinfo.cc (pinfo_fixup_after_fork): New method.
(pinfo_fixup_in_spawned_child): Ditto.
(_pinfo::exit): New method.
(_pinfo::init): Remove recursion.  Detect pathological case where pinfo
structure already exists for new pid.
* pinfo.h (_pinfo): Reorganize slightly.  Add new method and new function
declarations.
* sigproc.cc (proc_exists): Previous simplification was a little to simple.
Try harder to detect if a process exists.
(proc_terminate): Use PID_EXITED setting to determine if process is still
around.
(WFSO): Remove debugging statement.
(WFMO): Ditto.
* spawn.cc (exec_fixup_after_fork): Eliminate.
(spawn_guts): Always set old_title to NULL.  Is it really needed?  Move
hexec_proc to pinfo.cc.  Call pinfo_fixup_in_spawned_child to eliminate handle
link after a spawn.
* include/sys/cygwin.h: Remove PID_NOT_IN_USE.  Add PID_EXITED.
@
text
@d18 1
a30 1
#include "thread.h"
d653 1
a653 1
  user_data->threadinterface->Init0 ();
d661 1
a674 1
	    user_data->forkee = child_proc_info->cygpid;
d680 3
d684 2
a685 1
	  case PROC_SPAWN:
d696 2
a697 1
	    envp = spawn_info->moreinfo->environ;
d703 1
d711 3
d742 2
d765 1
a765 1
  pinfo_init (envp);
a769 13
  /* Nasty static stuff needed by newlib - initialize it.
     Note that impure_ptr has already been set up to point to this above
     NB. This *MUST* be done here, just after the forkee code as some
     of the calls below (eg. uinfo_init) do stdio calls - this area must
     be set to zero before then. */

  user_data->threadinterface->ClearReent();
  user_data->threadinterface->Init1();

  char *line = GetCommandLineA ();

  line = strcpy ((char *) alloca (strlen (line) + 1), line);

d787 3
d852 1
d867 3
d901 3
a905 2
	  case PROC_FORK:
	  case PROC_FORK1:
d1006 1
a1006 3
  if ((hExeced && hExeced != INVALID_HANDLE_VALUE) || (n & EXIT_NOCLOSEALL))
    n &= ~EXIT_NOCLOSEALL;
  else if (exit_state < ES_CLOSEALL)
d1031 2
a1052 2
  fill_rusage (&myself->rusage_self, hMainProc);

a1053 8

  if (hExeced && hExeced != INVALID_HANDLE_VALUE)
    {
      debug_printf ("Killing(%d) non-cygwin process, handle %p", n, hExeced);
      TerminateProcess (hExeced, n);
      ForceCloseHandle1 (hExeced, childhProc);
    }

d1099 10
@


1.65
log
@* cygheap.cc (cygheap_fixup_in_child): Don't page round cygheap copied from
parent.
* dcrt0.cc (do_exit): Don't cleanup pinfo on exit.  That happens automatically
now.
* exceptions.cc (signal_exit): Ditto.
* fork.cc (fork_parent): Use stack_here value passed in from fork().
(fork): Figure out top of stack here and pass it to fork_parent.
* pinfo.cc (_pinfo::record_death): Eliminate.
* pinfo.h (_pinfo): Ditto.
* sigproc.cc (proc_exists): Simplify.
(proc_terminate): Ditto.
(remove_zombie): Don't cleanup pinfo stuff.
(wait_sig): Send subproc_ready signal whether execed or spawned.
* spawn.cc (spawn_guts): Always create subproc_ready event.  Use it for both
exec and spawn.
(_spawnve): Send proper mode to spawn_guts when mode != _P_OVERLAY.
@
text
@d686 2
a687 2
				 hMainProc, &h, 0, 0,
				 DUPLICATE_SAME_ACCESS | DUPLICATE_CLOSE_SOURCE))
a771 12
  /* Set new console title if appropriate. */

  if (display_title && !dynamically_loaded)
    {
      char *cp = line;
      if (strip_title_path)
	for (char *ptr = cp; *ptr && *ptr != ' '; ptr++)
	  if (isdirsep (*ptr))
	    cp = ptr + 1;
      set_console_title (cp);
    }

d814 12
a1059 1
  sigproc_printf ("calling ExitProcess %d", n);
d1061 1
a1061 1
  ExitProcess (n);
d1101 1
a1101 1
  ExitProcess (1);
@


1.64
log
@* child_info: Bump child_info "version".
(child_info): Move some fields from child_info_spawn to here.
* cygheap.cc: Make cygheap pointers NOCOPY.
* dcrt0.cc (dll_crt0_1): Copy cygwin heap here regardless of whether we've been
forked or execed.
* dtable.cc (dtable::fixup_after_fork): Just release close-on-exec fds.
* exceptions.cc (stackdump): Respond to C warning.
* fork.cc: Reorganize to minimize stack copying.
(fork_child): New function.
(fork_parent): Ditto.
(sync_with_child): Don't suspend the forkee.
(sync_with_parent): Ditto.  Make into a function.
* heap.cc (heap_init): Add some debugging output.
* path.cc (path_conv::check): Add an assertion.
(has_suffix): Ditto.
* security.cc (get_pw_sid): Defend against NULL.
* sigproc.cc (proc_subproc): Fix debugging output.
(wait_sig): Ditto.
* strace.cc: Make statics NO_COPY throughout.
(strace::vsprntf): Defend against NULL.
@
text
@a975 1
  BOOL cleanup_pinfo;
d1015 1
a1015 4
    {
      n &= ~EXIT_REPARENTING;
      cleanup_pinfo = FALSE;
    }
a1043 1
      cleanup_pinfo = TRUE;
a1057 5
  if (cleanup_pinfo)
    myself->record_death ();
  else
    sigproc_printf ("not cleanup_pinfo");

a1098 1
  myself->record_death ();
@


1.63
log
@* errno.cc (seterrno_from_win_error): Fix debugging output.
* fhandler.cc (fhandler_base::fstat): Move to inline method in fhandler.h.
(fhandler_base::set_io_handle): Ditto.
* fhandler.h (fhandler_base): Make some methods inline.
* fhandler_console.cc (fhandler_console::write_normal): Make buffer larger.
* sigproc.h (sigframe::sigframe): Actually use set ebp parameter correctly.
* spawn.cc (spawn_guts): Set dwProcessId when exec'ing.  Just exit immediately
after reparenting.
* syscalls.cc: Sprinkle sigframe stuff throughout.
* wait.cc (wait4): Set signal frame here.
* dcrt0.cc (__api_fatal): Don't rely on small_printf to display errors.  Always
display problems to the console, if possible.
@
text
@d665 2
d671 1
a682 2
	    cygheap = spawn_info->cygheap;
	    cygheap_max = spawn_info->cygheap_max;
@


1.62
log
@        * dcrt0.cc: Add LoadDLLFunc statement for RegEnumValueA().
        * net.cc: Change comments related to get_ifconf.
        (get_2k_ifconf): Eliminate `type' variable. Eliminate `sa' parameter.
        (get_nt_ifconf): Ditto.
        (get_9x_ifconf): Ditto. Rewritten.
        (get_ifconf): Chage calls to OS specific functions.
@
text
@d1045 1
d1089 15
a1103 1
  small_printf ("%s\n", buf);
a1176 1
small_printf ("Multiple tries to read user32.dll\n");
a1198 1
small_printf ("Multiple tries to read advapi32.dll\n");
@


1.61
log
@* cygheap.cc (cygheap_init): Born again function.
(_cmalloc): Reorganize to accomodate muto locking.
(_cfree): Use muto lock to avoid multi-thread problems.
* cygheap.h (incygheap): Just use cygheap_max to find upper cygwin heap bounds.
* dcrt0.cc (dll_crt0_1): Reinstitute cygheap_init call.
* path.cc (getcwd): Just return cwdstuff::get result, allowing correct handling
of negative length.
(cwdstuff::get): Malloc a buffer if one is not available.
@
text
@d1266 1
@


1.60
log
@* cygheap.cc (init_cheap): Set aside space for heap walk pointer.
(_csbrk): Make logic for detecting when to alloc cognizant of initialization
condition.
(_cmalloc): Use a structure to hold bucket size and heap chain pointer.  Store
pointer to next freed block in bucket size location so that it will be easy to
see if a block is allocated.
(_cfree): Store pointer to next freed block in bucket size location.
(_crealloc): Use macro to retrieve bucket size.
(cygheap_init): Eliminate.
(cygheap_fixup_in_child): Add second argument to determine if we were execed or
not.  In execed case, walk the heap, cleaning up any orphaned blocks.
* cygheap.h: Add a "MAX" value to cygheap_types.  Remove cygheap_init
declaration.  Accomodate new argument to cygheap_fixup_in child.
* fork.cc (fork): Accomodate extra argument to cygheap_fixup_in_child.
* dcrt0.cc (dll_crt0_1): Ditto.  Remove call to cygheap_init.
@
text
@d657 1
@


1.59
log
@        * winsup.h: Add `winME' to os_type symbols.
        * dcrt0.cc (set_os_type): Identify Windows ME systems.
        * (host_dependent_constants::init): Care for winME.
        * uname.cc (uname): Ditto.
@
text
@d681 1
a681 1
	    cygheap_fixup_in_child (spawn_info->parent);
a748 1
  cygheap_init ();	/* Initialize cygwin's heap */
@


1.58
log
@* dcrt0.cc (quoted): Fix problem where ' quoted strings were skipped.
* fhandler.h (fhandler_socket::~fhandler_socket): Delete declaration.
* net.cc: Remove unnecessary "number_of_sockets" usage.
(fhandler_socket::fhandler_socket): Ditto.
(fhandler_socket::~fhandler_socket): Delete definition.
* spawn.cc (spawn_guts): Force first argument passed to CreateProcess as a
command line to be windows style.
@
text
@d180 1
a180 1
	else /* os_version_info.dwMinorVersion == 10 */
d185 5
d221 1
@


1.57
log
@Commit change mentioned in ChangeLog.
@
text
@d315 1
d318 2
a319 2
  while (*++cmd)
    if ((p = strpbrk (cmd, "\\\"")) == NULL)
a323 2
    else if (quote == '\'')
      continue;
d326 1
a326 1
    else if (p[1] == quote)
@


1.56
log
@* spawn.cc (av): Hide 'calloced' field and limit cstrduping to class methods
only.
(spawn_guts): Use methods for manipulating most newargv stuff.
* child_info.h (child_info_spawn::~child_info_spawn): Avoid memory leaks in
cygheap.
* spawn.cc (spawn_guts): Ditto.
* dcrt0.cc (quoted): Return next character after a quoted string when not doing
special quote processing.  Also ensure that non-NULL is returned in all circumstances.
* spawn.cc (spawn_guts): Ensure that argv[0] is correctly set to the full path
when a script is detected.  Suggested by Kazuhiro Fujieda
<fujieda@@jaist.ac.jp>.
@
text
@d310 2
@


1.55
log
@* dcrt0.cc (dll_crt0_1): Initialize thread and debug stuff before handling
exec/fork.
* dtable.cc (dtable::fixup_after_exec): Always clear out the read ahead buffer
whether closing or adjusting.
* path.cc (chdir): Avoid a compiler warning.
@
text
@d310 1
a310 1
      return p + 1;
@


1.54
log
@Break out more header info into separate files.  Use appropriate header files
throughout.
* shared.h: Remove.
* cygwin_version.h: New file.
* delqueue.h: New file.
* environ.h: New file.
* host_dependent.h: New file.
* perprocess.h: New file.
* registry.h: New file.
* security.h: New file.
@
text
@d647 4
a718 3

  threadname_init ();
  debug_init ();
@


1.53
log
@Split out tty and shared_info stuff into their own headers and use throughout.
Include sys/termios.h for files which need it.
* tty.h: New file.
* shared_info.h: New file.
* fhandler.h: Move inline methods that rely on tty stuff to
fhandler_console.cc.
* fhandler_tty.cc (fhandler_pty_master::process_slave_output): Set
output_done_event immediately after reading data to speed up tty output
processing.
(process_output): Set write_error to errno or zero.
(fhandler_tty_slave::write): Check previous write error prior to writing to
slave end of pipe.  This allows tty output to be slightly less synchronous.
* fhandler_console.cc (fhandler_console::tcsetpgrp): Moved here from
fhandler.h.
(fhandler_console::set_input_state): Ditto.
@
text
@a15 1
#include "dll_init.h"
a19 1
#include "perthread.h"
d26 2
a30 1
#include "tty.h"
d32 5
@


1.52
log
@* path.cc (cwd_win32): Eliminate.
(cwd_posix): Eliminate.
(cwd_hash): Eliminate.
(cwdstuff::init): Rename from cwd_init.
(cwdstuff::fixup_after_exec): Rename from cwd_fixup_after_exec.
(cwdstuff::get): Rename from get_cwd_inner.
(normalize_posix_path): Eliminate cwd argument.  Just calculate when necessary.
(normalize_win32_path): Ditto.
(mount_info::conv_to_win32_path): Eliminate cwd retrieval here.
(mount_info::conv_to_posix_path): Ditto.
(hash_path_name): Accomodate additional methods in cwdstuff.
(get_cwd_win32): Eliminate.
(getcwd): Use cwdstuff methods.  Properly handle case where buf == NULL and len
< 0.
(cwdstuff::get_hash): New method.
(cwdstuff::get_initial): New method.
(cwdstuff::set): New method.
(cwdstuff::get): New method.
(cwdstuff::copy): New method.
* path.h: Move cwdstuff struct here.  Add a bunch of stuff to cwdstuff.  Make
cygcwd an extern.
* spawn.cc (spawn_guts): Use copy method to get copies of cwd info to pass to
execed process.
* dcrt0.cc (dll_crt0_1): Use cygcwd methods for cwd initialization.
@
text
@d31 2
@


1.51
log
@* Makefile.in: Add cygheap.o.
* child_info.h: Add specific exec class.
* cygheap.h: New file.  Contains declarations for cygwin heap.
* cygheap.cc: New file.  Implements cygwin heap functions.
* dcrt0.cc (quoted): Simplify due to new method for passing arguments between
cygwin programs.
(alloc_stack_hard_way): Attempt to handle overlapped stack.
(dll_crt0_1): Move child_info processing here.  Accomodate new method for
passing arguments between cygwin programs.  Initialize cygwin heap.  Establish
__argc and __argv variables.
(_dll_crt0): Move most of child_info processing to dll_crt0_1.
(cygwin_dll_init): Remove duplication.
* dtable.cc (dtable::extend): Allocate dtable using cygwin heap.
(dtable::build_fhandler): Ditto for fhandler type being constructed.
(dtable::dup_worker): Free new fhandler from cygwin heap on error.
(dtable::select_*): Don't assume that this == fdtab.
(dtable::linearize_fd_array): Delete.
(dtable::delinearize_fd_array): Delete.
(dtable::fixup_after_exec): New file.
(dtable::vfork_child_dup): Use cygwin heap.
(dtable::vfork_parent_restore): Ditto.
* dtable.h: Remove obsolete methods.  Add new method.
* environ.cc (posify): Eliminate already_posix parameter and logic.
(envsize): New function.
(_addenv): Use envsize.
(environ_init): Accept an argument pointing to an existing environment list.
If supplied, allocate space for this in the the program's heap.
* fhandler.cc (fhandler_base::operator =): Move here from fhandler.h.  Use
cygwin heap to allocate filenames.
(fhandler_base::set_name): Allocate/free names from cygwin heap.
(fhandler_base::linearize): Delete.
(fhandler_base::de_linearize): Delete.
(fhandler_base::operator delete): Free from cygwin heap.
(fhandler_base::~fhandler_base): Ditto.
* fhandler.h: Accomodate elimination of *linearize and other changes above.
* fhandler_console.cc (fhandler_console::fixup_after_exec): Rename from
de_linearize.
* heap.h: New file.
* fhandler_tty.cc (fhandler_tty_slave::fhandler_tty_slave): Use cygwin heap for
name.  fhandler_tty::fixup_after_exec): Rename from de_linearize.
* fork.cc (fork): Call cygheap_fixup_in_child.
* heap.cc: Use declarations in heap.h.
* malloc.cc: Sprinkle assertions throughout to catch attempts to free/realloc
something from the cygwin heap.
* path.cc: Throughout, eliminate use of per-thread cache for cwd.  Use cwd_*
functions rather than cwd_* variables to access cwd_win32 and cwd_posix.
(cwd_win32): New function.
(cwd_posix): New function.
(cwd_hash): New function.
(cwd_fixup_after_exec): New function.
* path.h: Accomodate path.cc changes.
* pinfo.cc (pinfo_init): Accept a pointer to an environment table.  Pass this
to environ_init.  Eliminate old 'title' tests.
* pinfo.h: Accomodate above change in argument.
* spawn.cc (struct av): New method for building argv list.
(av::unshift): New method.
(spawn_guts): Allocate everything that the child process needs in the cygwin
heap and pass a pointer to this to the child.  Build argv list using new
method.  Eliminate delinearize stuff.
* thread.h: Eliminate _cwd_win32 and _cwd_posix buffers.
* winsup.h: Eliminate obsolete functions.  Add envsize() declaration.
@
text
@d674 3
a676 3
	    cwd_fixup_after_exec (spawn_info->moreinfo->cwd_win32,
				  spawn_info->moreinfo->cwd_posix,
				  spawn_info->moreinfo->cwd_hash);
d736 1
a736 1
  cwd_init ();
@


1.50
log
@* sigproc.cc (proc_info): Rename proc_exists which takes a pid to "pid_exists".
* shared.h: Split out "child_info" stuff into a new header file and use where
necessary.  Declare pid_exists.
* child_info.h: New file.
@
text
@d23 2
d126 1
a126 1
	return;         // inherit constructed stuff from parent pid
d298 1
a298 3
  /* If this is being run from a Windows shell then we have
     to preserve quotes for globify to play with later. */
  if (winshell)
d300 5
a304 17
      while (*++cmd)
	if ((p = strchr (cmd, quote)) == NULL)
	  {
	    cmd = strchr (cmd, '\0');	// no closing quote
	    break;
	  }
	else if (p[1] == quote && p[-1] != '\\')
	  {
	    *p = '\\';
	    cmd = ++p;			// a quoted quote
	  }
	else
	  {
	    cmd = p + 1;		// point to after end
	    break;
	  }
      return cmd;
d307 23
a329 29
  /* When running as a child of a cygwin process, the quoted
     characters should have been placed here by spawn_guts, so
     we'll just pinch them out of the command string unless
     they're quoted with a preceding \ */
  p = cmd + 1;
  while (*p)
    {
      if (*p == '\\' && p[1] == '\\')
	{
	  strcpy (p, p + 1);
	  p++;
	}
      else if (*p != quote)
	p++;
      else if (p[-1] == '\\')
	strcpy (p - 1, p);
      else if (p[1] == quote)
	{
	  strcpy (p, p + 1);
	  p++;
	}
      else
	{
	  strcpy (p, p + 1);
	  break;
	}
    }
  strcpy (cmd, cmd + 1);
  return p - 1;
d479 2
a480 1
  debug_printf ("argv[%d] = '%s'\n", argc, argv[argc]);
d518 2
a519 1
# define ciresrv ((struct child_info_fork *)(si.lpReserved2))
d523 2
a524 4
#define EBP	6
#define ESP	7

extern __inline__ void
d529 18
a546 4

  if (!VirtualAlloc (ci->stacktop,
		     (DWORD) ci->stackbottom - (DWORD) ci->stacktop,
		     MEM_RESERVE, PAGE_NOACCESS))
d558 8
a565 5
  m.BaseAddress = (LPVOID)((DWORD)m.BaseAddress - 1);
  if (!VirtualAlloc ((LPVOID) m.BaseAddress, 1, MEM_COMMIT,
		     PAGE_EXECUTE_READWRITE|PAGE_GUARD))
    api_fatal ("fork: couldn't allocate new stack guard page %p, %E",
	       m.BaseAddress);
d574 1
a574 1
extern __inline__ void
a596 3
/* These must be static due to the way we have to deal with forked
   processes. */
static NO_COPY LPBYTE info = NULL;
d598 2
a599 2
static int argc = 0;
static char **argv = NULL;
d615 9
a623 13
#ifdef DEBUGGING
  if (child_proc_info)
    switch (child_proc_info->type)
      {
	case PROC_FORK:
	case PROC_FORK1:
	  ProtectHandle (child_proc_info->forker_finished);
	case PROC_EXEC:
	  ProtectHandle (child_proc_info->subproc_ready);
      }
  ProtectHandle (hMainProc);
  ProtectHandle (hMainThread);
#endif
d625 1
a625 1
  regthread ("main", GetCurrentThreadId ());
d627 2
d639 52
a690 4
#ifdef _MT_SAFE
  user_data->resourcelocks->Init();
  user_data->threadinterface->Init0();
#endif
a701 3
  if (mypid)
    set_myself ((pid_t) mypid, NULL);

d726 1
a726 1
      if (ciresrv->stacksize)
d728 2
a729 2
	  asm ("movl %0,%%fs:4" : : "r" (ciresrv->stackbottom));
	  asm ("movl %0,%%fs:8" : : "r" (ciresrv->stacktop));
d732 1
a732 1
      longjmp (ciresrv->jmp, ciresrv->cygpid);
d735 5
a739 3
  /* Initialize our process table entry. Don't use the parent info for
     dynamically loaded case. */
  pinfo_init ((dynamically_loaded) ? NULL : info);
d784 20
d806 1
a806 15
      user_data->premain[i] (argc, argv);

  /* Scan the command line and build argv.  Expand wildcards if not
     called from another cygwin process. */
  build_argv (line, argv, argc,
	      NOTSTATE (myself, PID_CYGPARENT) && allow_glob);

  /* Convert argv[0] to posix rules if it's currently blatantly
     win32 style. */
  if ((strchr (argv[0], ':')) || (strchr (argv[0], '\\')))
    {
      char *new_argv0 = (char *) alloca (MAX_PATH);
      cygwin_conv_to_posix_path (argv[0], new_argv0);
      argv[0] = new_argv0;
    }
d809 1
a809 1
  __progname = argv[0];
d818 1
a818 1
      user_data->premain[i] (argc, argv);
d835 1
d837 1
a837 1
    exit (user_data->main (argc, argv, *user_data->envptr));
d849 1
a849 10
  char zeros[sizeof (ciresrv->zero)] = {0};
  /* According to onno@@stack.urc.tue.nl, the exception handler record must
     be on the stack.  */
  /* FIXME: Verify forked children get their exception handler set up ok. */
  exception_list cygwin_except_entry;
  /* Initialize SIGSEGV handling, etc...  Because the exception handler
     references data in the shared area, this must be done after
     shared_init. */
  init_exceptions (&cygwin_except_entry);
  do_global_ctors (&__CTOR_LIST__, 1);
a874 1
  HANDLE h;
d877 1
a877 1
      memcmp (ciresrv->zero, zeros, sizeof (zeros)) == 0)
d879 1
a879 1
      switch (ciresrv->type)
d886 1
a886 2
	      HANDLE me = hMainProc;
	      child_proc_info = ciresrv;
d892 4
a895 4
	      if (!dynamically_loaded)
		{
		  if (!DuplicateHandle (me, child_proc_info->parent_alive,
					me, &parent_alive, 0, 0,
d898 1
a898 4
		    system_printf ("parent_alive DuplicateHandle failed, %E");
		}
	      else if (parent_alive)
		parent_alive = NULL;
a899 22
	      switch (child_proc_info->type)
		{
		  case PROC_EXEC:
		  case PROC_SPAWN:
		    info = si.lpReserved2 + ciresrv->cb;
		    if (child_proc_info->myself_pinfo &&
			DuplicateHandle (hMainProc, child_proc_info->myself_pinfo,
					 hMainProc, &h, 0, 0,
					 DUPLICATE_SAME_ACCESS | DUPLICATE_CLOSE_SOURCE))
		      {
			set_myself (mypid, h);
			mypid = 0;
		      }
		    break;
		  case PROC_FORK:
		  case PROC_FORK1:
		    user_data->forkee = child_proc_info->cygpid;
		    user_data->heaptop = child_proc_info->heaptop;
		    user_data->heapbase = child_proc_info->heapbase;
		    user_data->heapptr = child_proc_info->heapptr;
		    alloc_stack (ciresrv);		// may never return
		}
d903 1
a903 1
	    if ((ciresrv->type & PROC_MAGIC_MASK) == PROC_MAGIC_GENERIC)
a927 13
  /* According to onno@@stack.urc.tue.nl, the exception handler record must
     be on the stack.  */
  /* FIXME: Verify forked children get their exception handler set up ok. */
  exception_list cygwin_except_entry;
  /* Initialize SIGSEGV handling, etc...  Because the exception handler
     references data in the shared area, this must be done after
     shared_init. */
  init_exceptions (&cygwin_except_entry);
  do_global_ctors (&__CTOR_LIST__, 1);

  /* Set the os_being_run global. */
  set_os_type ();

@


1.49
log
@* dcrt0.cc (dll_crt0_1): Move set_os_type.
(_dll_crt0): To here.
(cygwin_dll_init): And here.
* external.cc (fillout_pinfo): Use more foolproof method for scanning for pids.
* pinfo.cc (set_myself): Eliminate myself_identity.init.
* sigproc.cc (wait_sig): Do it here instead to reduce the amount of time where
there could potentially be two processes with the same pid.
* spawn.cc (spawn_guts): Eliminate duplicate initialization.
* include/sys/cygwin.h: Mark unused PID_* elements.
@
text
@d25 1
@


1.48
log
@* external.cc (cygwin_internal): Add CW_INIT_EXCEPTIONS to allow cygwin
exception handling on threads not created by cygwin.
* sigproc.cc (proc_terminate): Don't release pinfo structs since we are
exiting.
* include/sys/cygwin.h: Add CW_INIT_EXCEPTIONS.
@
text
@a648 3
  /* Set the os_being_run global. */
  set_os_type ();

d811 3
d924 3
@


1.47
log
@* dcrt0.cc (dll_crt0_1): Move exception list and constructor stuff earlier in
the process.  Use new second argument to set_myself.
(cygwin_dll_init): Initialize exception list and constructor stuff here.
(_dll_crt0): And here.  Also, deal with inherited pinfo shared memory region
from parent.
* pinfo.cc (set_myself): Accept a second argument signifying the a shared
memory region, passed from an execing parent.
(pinfo_init): Ditto.
* pinfo.h: Ditto.
* shared.h (child_info): Add a handle field to pass to child.
* spawn.cc (spawn_guts): Create a shared handle to pass to an execed child.
* winsup.h: Remove extraneous declaration.
@
text
@d1045 1
a1045 1
    myself->record_death ();	// Locks pinfo mutex
@


1.46
log
@Revert previous erroneous checkin.
@
text
@a617 6
  /* According to onno@@stack.urc.tue.nl, the exception handler record must
     be on the stack.  */
  /* FIXME: Verify forked children get their exception handler set up ok. */
  exception_list cygwin_except_entry;
  do_global_ctors (&__CTOR_LIST__, 1);

d663 1
a663 1
    set_myself ((pid_t) mypid);
a679 5
  /* Initialize SIGSEGV handling, etc...  Because the exception handler
     references data in the shared area, this must be done after
     shared_init. */
  init_exceptions (&cygwin_except_entry);

d804 9
d835 1
d870 8
d915 10
@


1.45
log
@* include/sys/cygwin.h: Protect class definitions.
@
text
@d669 1
a669 1
    set_myself ((pid_t) mypid, NULL);
a836 1
  HANDLE h;
a870 8
		    if (child_proc_info->myself_pinfo &&
			DuplicateHandle (hMainProc, child_proc_info->myself_pinfo,
					 hMainProc, &h, 0, 0,
					 DUPLICATE_SAME_ACCESS | DUPLICATE_CLOSE_SOURCE))
		      {
			set_myself (mypid, h);
			mypid = 0;
		      }
@


1.44
log
@* winsup.h: Eliminate inclusion of most of the cygwin .h files.  Use .h files
only in sources which require them.
* Makefile.in: Generate dependencies with -MD option.
@
text
@d669 1
a669 1
    set_myself ((pid_t) mypid);
d837 1
d872 8
@


1.43
log
@* cygerrno.h: New file.  Use this throughout whenever errno manipulation is
required.
* errno.cc: Use DWORD to hold Windows errors.
(geterrno_from_win_error): New function.
(seterrno_from_win_error): Use geterrno_from_win_error to convert supplied
windows error (suggested by Corinna Vinschen).
* path.cc (symlink_info): Add error element.
* path.cc (path_conv::check): Remove errno setting.  Use new symlink_info errno
element to set path_conv error, where appropriate.
(symlink_info::check): Set error element rather than attempting to manipulate
errno.  Add more checks for trailing / and /..  even though they are currently
useless.  Avoid setting EINVAL.
* path.cc (normalize_posix_path): Correct check for trailing /.
@
text
@d19 3
a21 1
#include "dtable.h"
d24 4
@


1.42
log
@* winsup.h: Split out dtable definitions into separate header file.
* dtable.h: New file.
* sigproc.h: Eliminate pinfo.h usage here.  Use it in source files that need
it.
@
text
@d21 1
@


1.41
log
@Rename hinfo -> dtable.  Name the former dtable array 'fdtab'.
@
text
@d19 2
d735 1
a735 1
  fdtab_init ();
@


1.40
log
@* winsup.h: take out protections of environ, errno, allow C use
* *.cc: put winsup.h before other headers (for __INSIDE_CYGWIN__);
use cur_environ() instead of just environ
* times.cc: remove import protections
* glob.c: add winsup.h
* localtime.c: ditto
* smallprint.c: ditto
* Makefile.in: don't __INSIDE_CYGWIN__ as it messes up profiling.
@
text
@d732 2
a733 2
  /* Allocate dtable */
  dtable_init ();
d745 1
a745 1
  hinfo_init ();
@


1.39
log
@* include/cygwin/version.h: Bump DLL minor version number to 5 due to all of
the changes below.  Redefine process structure to avoid a fixed size table.
Redefine pinfo/_pinfo classes.  Use these throughout.
* dcrt0.cc (dll_crt0_1): Accomodate set_myself argument change.
(__api_fatal): Accomodate _pinfo::record_death argument change.
* exceptions.cc (really_exit): Ditto.
(sig_handle_tty_stop): Use pinfo constructor to access process info.
(events_init): Don't create pinfo_mutex since it is no longer required.
* external.cc (fillout_pinfo): Use winpids class to iterate over all system
pids.
(cygwin_internal): lock_pinfo_for_update and unlock_pinfo are now noops.
* fhandler_termios.cc (fhandler_termios::set_ctty): Use pinfo constructor to
access process info.
* fork.cc (fork): Reorganize to initialize child info after the child has
started since that is when we know the child's winpid, which is necessary to
allocate the pinfo shared memory.
* mmap.cc (recreate_mmaps_after_fork): Change arg type to _pinfo.
* pinfo.cc: Rename pinfo methods to _pinfo throughout.  Eliminate pinfo_list
stuff.
(set_myself): Accept a pid argument now.  Call pinfo initializer to initialize
myself.  Detect when this is an "execed" process and create an "indirect" pid
block.
(pinfo_init): Accomodate set_myself arg change.
(procinfo): Remove.
(pinfo::lock_pinfo): Remove.
(pinfo::unlock_pinfo): Remove.
(pinfo::init): New method.  Allocates shared memory space for process pinfo
structure.
(pinfo::record_death): Don't call locking functions.
(cygwin_winpid_to_pid): Simplify by using new pinfo constructor.
(EnumProcessesW95): New function for iterating over processes on Windows 95.
(winpids::winpids): New constructor for winpids class.  Sets up a list of
process ids.
(enum_init): Initialize w95/wnt pid enumerators.
* shared.cc (shared-info::initialize): Remove pid initialization.
* shared.h: Move pinfo stuff into pinfo.h.
(class shared_info): Remove pinfo_list element.
* signal.cc (kill_worker): Use pinfo constructor to access process info.
(kill_pgrp): Ditto.  Use winpids methods to access list of processes.
* sigproc.cc: Throughout, modify to use _pinfo where appropriate.
(proc_exists (pid_t)): New function.  Determines if a process exists based on
the pid.
(proc_exists (_pinfo *p): Use new proc_exists function above.
(proc_subproc): Copy pinfo stuff around rather than _pinfo pointers.  Try to be
careful about releasing shared memory when we don't need it anymore.  Remove
pinfo locks.
(remove_zombies): Remove pinfo memory when zombie is going away.
* sigproc.h: Reflect _pinfo/pinfo changes in sigproc.cc.
* spawn.cc (spawn_guts): Eliminate pinfo *child argument.  Reorganize to only
initialize child pinfo after process has been started and we know the windows
pid.
(_spawnve): Reflect spawn_guts changes.
* syscalls.cc (setpgid): Use pinfo constructor to access process info.
(getpgid): Ditto.
(internal_getlogin): Use _pinfo.
* winsup.h: Eliminate pinfo_mutex.  Eliminate spawn_guts declaration since it
is static now.  Reflect set_myself argument change.
* include/sys/cygwin.h: Add some PID_* enums to accomodate new pinfo stuff.
* include/cygwin/version.h: Update minor version for cygdrive changes below.
@
text
@d11 1
a13 1
#include "winsup.h"
@


1.38
log
@* dcrt0.cc (dummy_autoload): Add load statement for RegDeleteValueA.
* external.cc (get_cygdrive_prefixes): New function.
(cygwin_internal): Add CW_GET_CYGDRIVE_PREFIXES case.
* path.cc (mount_info::read_cygdrive_info_from_registry): Read system cygdrive
prefix if user one is undefined.
(mount_info::write_cygdrive_info_to_registry): Write cygdrive prefix to the
appropriate registry hive.  Overwrite in-memory copy of cygdrive, if
appropriate.
(mount_info::remove_cygdrive_info_from_registry): New method.
(mount_info::get_cygdrive_prefixes): New method.
(cygwin_umount): Remove cygdrive prefix, if appropriate.
* registry.cc (reg_key::killvalue): New method.
* shared.h (class reg_key): Add killvalue, remove_cygdrive_info_to_registry,
and get_cygdrive_prefixes declarations.
* include/sys/cygwin.h (cygwin_getinfo_types): Add CW_GET_CYGDRIVE_PREFIXES.
@
text
@d660 1
a660 1
    set_myself (cygwin_shared->p[mypid]);
d1050 1
a1050 1
  myself->record_death (FALSE);
@


1.37
log
@Throughout, eliminate third argument to path_conv and use new PC_* constants
for second argument.
* path.h: Generalize SYMLINK_* constants to PC_*.
(path_conv): Create a new method.  Fold third argument into second.
* dll_init.cc (dll_list::alloc): Try harder to find space to allocate dll
struct.
(dll_dllcrt0): Don't check sanity if we've already called dll_crt0.
* path.cc (path_conv::check): Don't check for a null or empty path unless
specifically told with a flag setting.
(check_null_empty_path): New function, adapted from macro.
* syscalls.cc (_rename): Use already-determined file attributes rather than
checking again.
* lib/cygwin/cygwin_attach.dll.c (cygwin_attach_dll): Use a static per_process
structure since this is apparently supposed to be zeroed.
* lib/cygwin_crt0.c (cygwin_crt0): Zero per_process structure sent to older
DLLs.
@
text
@d1220 1
@


1.36
log
@* acconfig.h: Add support for NEWVFORK.
* config.h.in: Ditto.
* configure.in: Add --enable-vfork option.
* configure: Regenerate.
* dcrt0.cc (quoted): Detect and fix up quoted backslashes.
* sigproc.cc (proc_subproc): Correctly name handle of newly added child process
to avoid erroneous debugging messages about closing the wrong handle.
@
text
@a737 7
  /* beyond this we only do for cygwin apps or dlls */
  if (dynamically_loaded)
    {
      cygwin_finished_initializing = 1;
      return;
    }

d744 3
a750 3
  /* Set up standard fds in file descriptor table. */
  hinfo_init ();

a767 5
  /* Flush signals and ensure that signal thread is up and running. Can't
     do this for noncygwin case since the signal thread is blocked due to
     LoadLibrary serialization. */
  sig_send (NULL, __SIGFLUSH);

d778 11
@


1.35
log
@* spawn.cc (spawn_guts): Use \ for quoting '"'.
* dcrt0.cc (quoted): Understand \ quoting for '"'.
@
text
@d316 6
a321 1
      if (*p != quote)
@


1.34
log
@Slightly more efficient version of previous change.
@
text
@d280 1
a280 1
static __inline char *
d296 1
a296 1
	else if (p[1] == quote)
d298 2
a299 2
	    *p++ = '\\';
	    cmd = p;			// a quoted quote
d313 2
a314 2
  strcpy (cmd, cmd + 1);
  while (*cmd)
d316 9
a324 4
      if (*cmd != quote)
	cmd++;
      else if (cmd[1] == quote)
	strcpy (cmd++, cmd + 1);
d327 1
a327 1
	  strcpy (cmd, cmd + 1);
d331 2
a332 1
  return cmd;
@


1.33
log
@* dcrt0.cc (build_argv): Strip quotes from argv[0] since it should never be
globified.
@
text
@d442 1
a442 1
	      cmd = quoted (cmd, argc > 0 && winshell);
@


1.32
log
@* hinfo.cc (hinfo::linearize_fd_array): Make max_used_fd an int so that we can
detect when there are no fds to pass.
* dcrt0.cc (host_dependent_constants::init): Revert Sat Mar 18 01:32:04 2000
change.
(dll_crt0_1): Set "cygwin_finished_initializing" flag.
(dll_crt0): Don't perform memcpy if uptr is already set to internal structure.
(_dll_crt0): Remember location of programs envptr.
* dll_init.h (per_module, dll, dll_list): Revamp.
* dll_init.cc: Revamp.  Use new classes.
* fork.cc (fork): Use new revamped dll, dll_list, and per_module stuff.
* environ.cc: Use __cygwin_environ throughout rather than the
user_data->envptr.
* exec.cc: Ditto.
* spawn.cc: Ditto.
* winsup.h: Declare update_envptrs, cygwin_finished_initializing.
* lib/_cygwin_crt0_common.cc (_cygwin_crt0_common): Revert previous change.
* lib/cygwin_attach_dll.cc (cygwin_attach_dll): Always pass in own per_process
structure or we end up overwriting information from the main program.
@
text
@d442 1
a442 1
	      cmd = quoted (cmd, winshell);
@


1.31
log
@* lib/_cygwin_crt0_common.cc (_cygwin_crt0_common): Don't reset environ if
already set.
@
text
@d43 1
a52 1
#ifdef _MT_SAFE
a54 1
#endif
d66 1
d195 1
a195 1
      shared = FILE_SHARE_READ | FILE_SHARE_WRITE;
a701 1
#ifdef _MT_SAFE
a703 7
#else
  memset (&reent_data, 0, sizeof (reent_data));
  reent_data._errno = 0;
  reent_data._stdin =  reent_data.__sf + 0;
  reent_data._stdout = reent_data.__sf + 1;
  reent_data._stderr = reent_data.__sf + 2;
#endif
d729 4
a732 1
    return;
a763 5
  /* Call init of loaded dlls. */
  DllList::the().initAll();

  set_errno (0);

d767 5
a771 1
  sig_send (NULL, __SIGFLUSH);	/* also initializes uid, gid */
d779 3
d806 1
d875 1
a875 1
  if (uptr)
@


1.30
log
@* dcrt0.cc (__cygwin_user_data): Initialize.
(dll_crt0_1): Eliminate user_data initialization.
(dll_crt0): Set up impure_ptr_ptr for older executables.
(cygwin_dll_init): Eliminate user_data initializations.
(__api_fatal): Don't check for user_data initialization.
* dll_init.cc (struct dll): Store entire contents of per_process rather than
just a pointer.
(add): Ditto.
(initOneDll): Don't check for user_data initialization.
(DllList::recordDll): Store contents of per_process argument.
(DllList::detachDll): Pass address of per_process field.
(DllList::initAll): Ditto.
(DllList::doGlobalDestructorsOfDlls): Ditto.
(DllListIterator::operator *): Ditto.
(dll_dllcrt0): Default to __cygwin_user_data if arg is NULL.
* include/sys/cygwin.h: Reorganize per_process to eliminate obsolete fields and
accomodate new way of initializing.
* lib/_cygwin_crt0_common: Initialize _impure_ptr from
__cygwin_user_data.impure_ptr.
@
text
@d74 1
a74 1
   /* impure_ptr_ptr */ NULL, /*envptr */ NULL,
@


1.29
log
@* dcrt0.cc (dll_crt0_1): Eliminate SetFileApisToOEM and CharToOem.
* (dummy_autoload): Add functions used in fhandler_console.
* fhandler_console.cc (fhandler_console::read): Use ENCHANCED_KEY flag to
distinguish extended keys.  Translate an input character from the OEM code page
to the ANSI code page.
* (fhandler_console::write_normal): Translate output characters from the ANSI
code page to the OEM code page.
* syscalls.cc (_link): Use MultiByteToWideChar instead of OemToCharW.
@
text
@d52 5
d59 5
d70 22
a91 1
  struct per_process __cygwin_user_data;
a583 5
#ifdef _MT_SAFE
ResourceLocks _reslock NO_COPY;
MTinterface _mtinterf NO_COPY;
#endif

a627 1
  *(user_data->impure_ptr_ptr) = &reent_data;
a630 1
  user_data->resourcelocks = &_reslock;
a631 2

  user_data->threadinterface = &_mtinterf;
d780 1
a780 1
  if (user_data->premain[0])
d878 4
a881 1
    *user_data = *uptr;
a884 5
extern "C" void *export_malloc (unsigned int);
extern "C" void export_free (void *);
extern "C" void *export_realloc (void *, unsigned int);
extern "C" void *export_calloc (unsigned int, unsigned int);

d886 1
a886 2
extern "C" void cygwin_dll_init ();
void
a888 1
  static struct _reent *temp_impure;
a899 4
  user_data->dll_major = CYGWIN_VERSION_DLL_MAJOR;
  user_data->dll_minor = CYGWIN_VERSION_DLL_MINOR;
  user_data->api_major = CYGWIN_VERSION_API_MAJOR;
  user_data->api_minor = CYGWIN_VERSION_API_MINOR;
a901 1
  user_data->impure_ptr_ptr = &temp_impure;
a904 5
  user_data->malloc = &export_malloc;
  user_data->free = &export_free;
  user_data->realloc = &export_realloc;
  user_data->calloc = &export_calloc;

d1041 2
a1042 5
  if (user_data != NULL)
    {
      sigproc_terminate ();
      myself->record_death (FALSE);
    }
@


1.28
log
@Revert errnoneous commit.
@
text
@a615 9
  /* If we didn't call SetFileApisToOEM, console I/O calls would use a
     different codepage than other Win32 API calls.  In some languages
     (not English), this would result in "cat > filename" creating a file
     by a different name than if CreateFile was used to create filename.
     SetFileApisToOEM prevents this problem by making all calls use the
     OEM codepage. */

  SetFileApisToOEM ();

a691 1
  CharToOem (line, line);
d1149 1
a1149 1
LoadDLLfunc (CharToOemA, 8, user32)
d1161 1
a1161 2
LoadDLLfunc (OemToCharA, 8, user32)
LoadDLLfunc (OemToCharW, 8, user32)
@


1.27
log
@* exceptions.cc (stack_info::walk): Use method to find offset.
(handle_exceptions): Be more assertive in finding ebp for use under W2K.
Create a dummy stack frame for cases where program is dying and a stack dump is
being output.
(sig_handle): Fill out a GetThreadContext for use with a user-generated "core
dump".
@
text
@d640 3
a674 3

  /* Initialize the heap. */
  heap_init ();
@


1.26
log
@* dcrt0.cc (user32_init): Add primitive guard against concurrent attempts to
call this function.  Also add temporary debugging code to display a message if
the function is called multiple times.
(api32_init): Ditto.
@
text
@a639 3
  /* Initialize the heap. */
  heap_init ();

d672 3
@


1.25
log
@* dcrt0.cc (_dll_crt0): Renamed from dll_crt0 ().
* winsup.h: Accomodate above change.
* cygwin.din: Ditto.
* lib/cygwin_crt0.c: Ditto.
@
text
@d1111 1
d1113 10
a1122 1
  if ((h = LoadLibrary ("user32.dll")) != NULL)
d1127 1
d1134 8
d1143 3
a1145 1
  if ((h = LoadLibrary ("advapi32.dll")) != NULL)
d1150 2
a1151 1
  return 0;		/* Already done by another thread? */
@


1.24
log
@* Makefile.in: Use variables rather than configure constructs where
appropriate.
(LIBCOS): Find additional stub library stuff in their own subdirectory.
* dcrt0.cc: Convert user_data pointer to static __cygwin_user_data area.
(do_global_ctors): Check magic_bisquit for initialization.
(dll_crt0_1): First group of premain functions prior to fd initialization.  Run
second group before calling main.
(dll_crt0 ()): New function, called from new initialization code.
(dll_crt0 (per_process *uptr)): Call new dll_crt0 () function on
initialization.
* debug.cc (thread_stub): Initialize bottom of stack with per-thread info.
* environ.cc (parse_thing): Use binmode global to control CYGWIN=binmode
behavior.
* fhandler.cc (fhandler_base::open): Allow explicit setting of __fmode to
O_BINARY or O_TEXT to override disk mount settings.
* libcmain.cc: Move to lib subdirectory.
* libccrt0.cc: Ditto.
* dll_main.cc: Ditto.
* dll_entry.cc: Ditto.
* getopt.c: Ditto.
* thread.cc (thread_init_wrapper): Call ExitThread explicitly rather than
returning, as a preliminary step towards placing per thread info at the bottom
of the stack.
* winsup.h: Move per_process class to include/sys/cygwin.h.  Declare new
dll_crt0().
* include/cygwin/version.h: Bump API minor version.
* binmode.c: New file.
* textmode.c: Ditto.
* lib/_cygwin_crt0_common.cc: Ditto.
* lib/crt0.h: Ditto.
* lib/cygwin_attach_dll.c: Ditto.
* lib/cygwin_crt0.c: Ditto.
* lib/dll_entry.cc: Ditto.
* lib/dll_main.cc: Ditto.
* lib/getopt.c: Ditto.
* lib/libcmain.c: Ditto.
* lib/premain0.c: Ditto.
* lib/premain1.c: Ditto.
* lib/premain2.c: Ditto.
* lib/premain3.c: Ditto.
@
text
@d783 2
a784 2
void __stdcall
dll_crt0 ()
d867 1
a867 1
  dll_crt0 ();
@


1.23
log
@        * dcrt0.cc: Add load statements for `GetSidIdentifierAuthority'
        and `RegLoadKeyA'.
        * registry.cc (get_registry_hive_path): New function.
        (load_registry_hive): Ditto.
        * security.cc (convert_sid_to_string_sid): New function.
        (get_ssid): Renamed to `convert_string_sid_to_sid'.
        (get_pw_sid): Call `convert_string_sid_to_sid' instead of `get_ssid'.
        (get_gr_sid): Ditto.
        (get_admin_sid): Ditto.
        (get_system_sid): Ditto.
        (get_creator_owner_sid): Ditto.
        (get_world_sid): Ditto.
        * shared.h: New prototypes for `get_registry_hive_path' and
        `load_registry_hive'.
        * spawn.cc (spawn_guts): Set child->psid to NULL to force calling
        `internal_getlogin' from child process in case of changing user context.
        Call `load_registry_hive' in case of changing user context.
        (_spawnve): Copy user infos only if user context remains the same.
        * uinfo.cc: Add load statement for `NetUserGetInfo'.
        Remove load statement for `NetGetDCName'.
        (internal_getlogin): Rewrite to speed up process startup
        and to correct user environment in case user context changes.
        (uinfo_init): Call internal_getlogin only if myself->psid is NULL,
        that is user context changes.
        * winsup.h: Add prototypes for `convert_sid_to_string_sid',
        `convert_string_sid_to_sid' and `get_pw_sid'.
@
text
@d22 2
a28 3
static NO_COPY char dummy_user_data[sizeof (per_process)] = {0};
per_process NO_COPY *user_data = (per_process *) &dummy_user_data;

d58 1
a58 1
  char *__progname;
d60 1
a62 2
static void dll_crt0_1 ();

d97 1
a97 1
  if (user_data != (per_process *) &dummy_user_data)
a102 1

a575 1

d733 4
a760 1
  debug_printf ("user_data->main %p", user_data->main);
d767 6
d783 2
a784 2
void
dll_crt0 (per_process *uptr)
d787 10
a796 2
  /* Set the local copy of the pointer into the user space. */
  user_data = uptr;
d859 9
@


1.22
log
@        * cygwin.din: Define symbols for `cygwin_logon_user' and
        `cygwin_set_impersonation_token'.
        * dcrt0.cc (dll_crt0_1): Eliminate superfluous conditional
        statements.
        Add load statements for `ImpersonateLoggedOnUser', `LogonUserA'
        and `RevertToSelf'.
        * fork.cc (fork): Care for correct impersonation of parent
        and child process.
        * security.cc (cygwin_set_impersonation_token): New function.
        (cygwin_logon_user): Ditto.
        shared.h (class pinfo): New members `orig_uid', `orig_gid',
        `real_uid' nad `real_gid'.
        spawn.cc (spawn_guts): Care for impersonation when starting
        child process in a different user context.
        * syscalls.cc (setgid): Call `setegid' now. Set real_gid.
        (setuid): Call `seteuid' now. Set real_uid.
        (seteuid): Functionality moved from setuid to here. Care for
        correct impersonation.
        (setegid): Functionality moved from setgid to here.
        * uinfo.cc (uinfo_init): Initialization of additional pinfo
        members.
        (getuid): Return real uid.
        (getgid): Return real gid.
        (geteuid): Return effective uid.
        (getegid): Return effective gid.
        include/sys/cygwin.h: Add prototypes for `cygwin_logon_user' and
        `cygwin_set_impersonation_token'.
        include/cygwin/version.h: Bumb API minor version to 22.
@
text
@d1155 1
d1174 1
@


1.21
log
@* cygwin.din: add cygwin_dll_init
* dcrt0.cc (cygwin_dll_init): new
(dll_crt0_1): short circuit if manually loaded
* path.cc (mount_info::init): don't init if manually loaded
@
text
@d766 1
a766 2
  if (!dynamically_loaded)
    sig_send (NULL, __SIGFLUSH);	/* also initializes uid, gid */
d768 1
a768 1
  if (user_data->main && !dynamically_loaded)
d1159 1
d1164 1
d1179 1
@


1.20
log
@* exceptions.cc: Remove unneeded include.
* dcrt0.cc: Wrap LoadDLLfunc stuff in dummy function.
* init.cc: Ditto.
* uinfo.cc: Ditto.
@
text
@d727 4
d846 40
@


1.19
log
@        * dcrt0.cc: Use LoadDLLfuncEx for loading Crypto API functions
        with parameter `notimp' set to 1.
@
text
@a1041 1
}
d1055 16
a1093 12
LoadDLLinitfunc (advapi32)
{
  HANDLE h;

  if ((h = LoadLibrary ("advapi32.dll")) != NULL)
    advapi32_handle = h;
  else if (!advapi32_handle)
    api_fatal ("could not load advapi32.dll, %E");

  return 0;		/* Already done by another thread? */
}

d1138 2
@


1.18
log
@* Makefile.in: Remove libadvapi32.a.
* autoload.h: Add additional field to autoload block for handling unimplemented
functions.
(LoadDLLfuncEx): New function which accepts additional parameter for
controlling unimplemented function behavior.
(LoadDLLfunc): Use LoadDLLfuncEx.
* dcrt0.cc: Use new arguments for LoadDLLfunc.  Add advapi32 routines.
(noload): Rewrite in assembler.  Handle new unimplemented function type.
* exceptions.cc: Eliminate another vestige of StackWalk stuff.
* net.cc: Use new arguments for LoadDLLfunc.
* uinfo.cc: Ditto.

* config.h.in: Remove obsolete define.
* path.h (isdrive): New macro.
* dcrt0.cc (globify): Use new macro to determine if a string refers to an
MS-DOS drive.
* environ.cc (winenv): Ditto.
* spawn.cc (find_exec): Ditto.
* path.cc (get_raw_device_number): Ditto.
(mount_info::conv_to_posix_path): Ditto.
(chdir): Ditto.
(cygwin_posix_path_list_p): Ditto.
(cygwin_split_path): Ditto.
(path_conv::check): Move tmp_buf to beginning of function since it can be used
earlier in the loop.  Use tmp_buf rather than 'root' to hold root information.
(mount_info::conv_to_win32_path): Add trailing slash to end of mount path when
it translates to a drive.  Add defensive code to avoid writing beyond the end
of 'dst'.
@
text
@d1098 3
a1100 3
LoadDLLfunc (CryptAcquireContextA, 20, advapi32)
LoadDLLfunc (CryptGenRandom, 12, advapi32)
LoadDLLfunc (CryptReleaseContext, 8, advapi32)
@


1.17
log
@* dcrt0.cc (dll_crt0_1): Move uinfo_init call to before sigproc_init to avoid a
race.
(noload): Add an extra argument for debugging.
* uinfo.cc (uinfo_init): Eliminate test for multiple calls.
(getlogin): Assume that uinfo_init has already been called.
@
text
@d312 1
a312 1
  int dos_spec = isalpha(*word) && word[1] == ':' ? 1 : 0;
d314 1
a314 1
    dos_spec = isalpha(word[1]) && word[2] == ':' ? 1 : 0;
d656 1
a656 1
  
d990 4
a993 3
static void noload (HANDLE h, char *s) __asm__ ("noload");
static void __attribute__((unused))
noload (HANDLE h, char *s)
d995 5
a999 2
  api_fatal ("couldn't dynamically determine load address for '%s' (handle %p), %E", s, h);
}
d1003 23
a1025 1
.globl	cygwin_dll_func_load
d1028 1
a1028 1
  addl $8,%eax		# Address of name of function to load
d1030 1
a1030 1
  movl -4(%eax),%eax	# Address of Handle to DLL
d1035 1
a1035 6
  popl %eax		# No.  Get back
  addl $8,%eax		#  pointer to name
  pushl %eax		#   and
  movl -4(%eax),%eax	# Address of Handle to DLL
  pushl (%eax)		# Handle to DLL
  call noload		#    issue an error
d1057 78
a1134 21
LoadDLLfunc (CharToOemA, CharToOemA@@8, user32)
LoadDLLfunc (CreateWindowExA, CreateWindowExA@@48, user32)
LoadDLLfunc (DefWindowProcA, DefWindowProcA@@16, user32)
LoadDLLfunc (DispatchMessageA, DispatchMessageA@@4, user32)
LoadDLLfunc (FindWindowA, FindWindowA@@8, user32)
LoadDLLfunc (GetMessageA, GetMessageA@@16, user32)
LoadDLLfunc (GetProcessWindowStation, GetProcessWindowStation@@0, user32)
LoadDLLfunc (GetThreadDesktop, GetThreadDesktop@@4, user32)
LoadDLLfunc (GetUserObjectInformationA, GetUserObjectInformationA@@20, user32)
LoadDLLfunc (KillTimer, KillTimer@@8, user32)
LoadDLLfunc (MessageBoxA, MessageBoxA@@16, user32)
LoadDLLfunc (MsgWaitForMultipleObjects, MsgWaitForMultipleObjects@@20, user32)
LoadDLLfunc (OemToCharA, OemToCharA@@8, user32)
LoadDLLfunc (OemToCharW, OemToCharW@@8, user32)
LoadDLLfunc (PeekMessageA, PeekMessageA@@20, user32)
LoadDLLfunc (PostMessageA, PostMessageA@@16, user32)
LoadDLLfunc (PostQuitMessage, PostQuitMessage@@4, user32)
LoadDLLfunc (RegisterClassA, RegisterClassA@@4, user32)
LoadDLLfunc (SendMessageA, SendMessageA@@16, user32)
LoadDLLfunc (SetTimer, SetTimer@@16, user32)
LoadDLLfunc (SetUserObjectSecurity, SetUserObjectSecurity@@12, user32)
@


1.16
log
@* Makefile.in: Remove external.h dependency.
* dcrt0.cc (sigthread::init): Move here from sigproc.h.
* sigproc.h (sigthread): Move init to dcrt0.cc.
@
text
@d724 3
a735 5
#if 0
  /* Initialize uid, gid. */
  uinfo_init ();
#endif

a758 3
  /* Initialize uid, gid. */
  uinfo_init ();

d763 1
a763 1
    sig_send (NULL, __SIGFLUSH);
d990 1
a990 1
static void noload (char *s) __asm__ ("noload");
d992 1
a992 1
noload (char *s)
d994 1
a994 1
  api_fatal ("couldn't dynamically determine load address for '%s', %E", s);
d997 1
d1012 2
@


1.15
log
@* dcrt0.cc (dll_crt0_1): Initialize mainthread stuff here before anything needs
it.
* sigproc.cc (sigproc_init): Move mainthread initialization out of here.
* sigproc.h (sigthread): Add init() method.
(sigframe): Don't try to initialize muto.
* sync.cc: Undef WaitForSingleObject to avoid recursion.
@
text
@d561 7
@


1.14
log
@* path.cc (mount_info::cygdrive_posix_path): Don't add trailing slash if
referring to something like c:\.
* dcrt0.cc (dll_crt0_1): Move uinfo initialization prior to sig_send
initialization to give signal thread a chance to finish.
* debug.cc (WFSO): Move to sigproc.cc
(WFMO): Ditto.
* exceptions.cc (interruptible): Allocate slightly more space for directory
just for paranoia's sake.
(call_handler): Eliminate nonmain argument.  Determine if main thread has set a
frame pointer and use it if so.
(sig_handle): Eliminate nonmain argument.
* net.cc: Record frame information in appropriate routines throughout.
* select.cc (select): Ditto.
* sigproc.cc: Use sigthread structure to record mainthread id throughout.
(sig_send): Record frame information for signal handler.
(wait_sig): Reflect argument change in sig_handle.
(WFSO): Move here and record frame information for signal handler.
(WFMO): Ditto.
* sigproc.h: Implement new "sigthread" class.  Implement "sigframe" class for
manipulating signal frame info.
* thread.cc (__pthread_kill): Use standard _kill() function rather than calling
sig_send directly.
* winsup.h: Eliminate ebp element from signal_dispatch class.
@
text
@d25 2
d628 3
@


1.13
log
@* dcrt0.cc (build_argv): Remove unneeded variable.
* select.cc (peek_pipe): Don't check for "ready" if it's already set.
(peek_console): Ditto.
(peek_serial): Ditto.
(peek_socket): Ditto.
(peek_windows): Ditto.
@
text
@d749 3
a756 3

  /* Initialize uid, gid. */
  uinfo_init ();
@


1.12
log
@* dcrt0.cc (insert_file): Eliminate unused parameter.
(build_argv): Ditto.
* exceptions.cc (stack): Eliminate unused parameters.
(stackdump): Ditto.
(cygwin_stackdump): Reflect above changes.
(sig_handle): Ditto.
* fhandler.cc (fhandler_base::set_inheritance): Use kludge to avoid unused
parameter warning.
@
text
@a384 1
  int alloc_cmd = 0;	// command allocated by insert_file
@


1.11
log
@        * dcrt0.cc: Add dynamic load code for `OemToCharA' from user32.dll.
        * security.cc (read_sd): Call `OemToCharA' to make
        `GetFileSecurity' happy on filenames with umlauts.
@
text
@d188 1
a188 1
insert_file (char *name, char *&cmd, int& alloc_cmd)
d427 1
a427 1
	  if (insert_file (word, cmd, alloc_cmd))
@


1.10
log
@* dcrt0.cc (globify): Don't use \ quoting when apparently quoting a DOS path
spec, even within a quoted string.
@
text
@d1039 1
@


1.9
log
@* dcrt0.cc (globify): Don't use \ quoting when apparently quoting a DOS path
spec.
@
text
@d335 1
a335 1
	    if (*s != '\\')
a336 2
	    else if (dos_spec)
	      *p++ = '\\';
@


1.8
log
@* dcrt0.cc (insert_file): Avoid freeing previously allocated argument list.
* path.cc (symlink_info::check): Rename from symlink_check_one.  Use new
symlink_info struct for communication.
(path_conv::path_conv): Use symlink_info structure for communication with
symlink_info::check.  Fix typo which resulted in symbolic links always being
resolved.
(readlink): Use stat_suffixes array when resolving a link.
* syscalls.cc (stat_suffixes): Make global.
@
text
@d311 2
d335 5
a339 1
	    if (*s == '\\' && s[1] == quote)
@


1.7
log
@* Makefile.in: Use default rules when compiling cygrun.o.
* dcrt0.cc (host_dependent_constants::init): Limit non-NT platforms to 32K
chunks when copying regions during a fork.
* path.cc (symlink_check_one): Add temporary debugging output.  Simplify
PATH_EXEC test.
* syscalls.cc (stat_suffixes): Null terminate this list.
@
text
@d188 1
a188 1
insert_file (char *name, char *&cmd)
d381 1
a381 1
  char *alloc_cmd = NULL;	// command allocated by insert_file
d423 1
a423 5
	  if (insert_file (word, cmd))
	    {
	      if (alloc_cmd)
		free (alloc_cmd);	// Free space from previous insert_file
	      alloc_cmd = cmd;		//  and remember it for next time.
a424 1
	    }
@


1.6
log
@* environ.cc: Add TMPDIR to the list of environment variables which are
converted to POSIX format.
* sigproc.cc (proc_terminate): Don't attempt to delete when a muto pointer is
NULL.
@
text
@d154 1
d173 1
@


1.5
log
@* dcrt0.cc (host_dependent_constants::init): Eliminate DELETE flag from shared
constant.
@
text
@d152 1
a152 1
host_dependent_constants::init (void)
@


1.4
log
@        * security.cc (set_process_privileges): Removed `static'.
        (get_nt_attribute): Returns uid and gid additionally. Removed call
        to set_process_privileges().
        (get_file_attribute): Returns uid and gid additionally. Don't
        call ntea if ntsec is ON.
        (set_nt_attribute): Removed call to set_process_privileges().
        Don't call ntea if ntsec is ON.
        (acl): Removed call to set_process_privileges().
        * dcrt0.cc (dll_crt0_1): Calls set_process_privileges() now.
        * winsup.h: New prototype for set_process_privileges(),
        changed prototype for get_file_attribute().
        * fhandler.cc (get_file_owner): Discarded.
        (get_file_group): Ditto.
        (fhandler_disk_file::fstat): Discard calls to get_file_owner() and
        get_file_group().
        * path.cc (path_conv::path_conv): Added debugging output for result
        of GetVolumeInformation().
        (mount_info::conv_to_win32_path): Call backslashify() with pathbuf
        instead of src_path.
        * syscalls.cc (chown): Reformatted.
        (chmod): Replace get_file_owner() and get_file_group() calls
        by a call to get_file_attribute(). Discard local variable has_acls.
        Slightly reformatted.
        (stat_worker): Replaced idiot's (it's me) root dir check by call
        to rootdir(). Don't call num_entries() on remote drives.
        Discard local variable has_acls.
@
text
@d164 1
a164 1
      shared = FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE;
@


1.3
log
@* dcrt0.cc (set_os_type): Record OS name string.
(getprogname): Eliminate obsolete function.
(dll_crt0_1): Move initial strace initialization output to set_myself.
* exceptions.cc (interruptible): Add debugging output.
(interrupt_setup): New function.
(interrupt_now): Use interrupt_setup to set up common interrupt handler stuff.
(interrupt_on_return): Ditto.
(call_handler): Move signal_arrived arm and clear threads to region where
signalled thread is suspended or suffer races.
* pinfo.cc (set_myself): Output interesting information when strace is first
initialized.  Initialize progname here.
* sigproc.cc (sig_dispatch_pending): Modify to ensure that flush signal are
sent synchronously.
* strace.cc (strace_vsprintf): Move code into strace program.
* uname.cc (uname): Use 'osname' global to construct cygwin name + Windows type
+ version.
@
text
@d641 4
@


1.2
log
@Respond to a multitude of g++ warnings.
@
text
@d83 1
a83 1
        return;         // inherit constructed stuff from parent pid
d104 2
d114 3
a117 1

d124 1
d128 4
a131 1
	  os_being_run = win95;
d133 4
a136 4
	  os_being_run = win98;
	break;
      case VER_PLATFORM_WIN32s:
	os_being_run = win32s;
d140 1
d143 2
a178 25
/* Save the program name.  It's used in debugging messages and by
   the fork code (forking spawns a copy of us).  Copy it into a temp and
   then into the final spot because debugging messages use
   myself->progname. Try getting the absolute path from the
   module handle, if this fails get the name from the path.
   This call references $PATH so we can't do this until the environment
   vars are set up.  */
/* FIXME: What if argv[0] is relative, $PATH changes, and then the program
   tries to do a fork?  */

static void __stdcall
getprogname (char *argv0)
{
  char tmp[MAX_PATH];

  if (user_data->hmodule != 0)
    {
      if (GetModuleFileName (user_data->hmodule, tmp, MAX_PATH) == 0)
	find_exec (argv0, tmp);
    }
  else
    find_exec (argv0, tmp);
  strcpy (myself->progname, tmp);
}

a721 7
  syscall_printf ("Application CYGWIN version: %d.%d, api: %d.%d",
		  user_data->dll_major, user_data->dll_minor,
		  user_data->api_major, user_data->api_minor);
  syscall_printf ("CYGWIN DLL version: %d.%d, api: %d.%d",
		  cygwin_version.dll_major, cygwin_version.dll_minor,
		  cygwin_version.api_major, cygwin_version.api_minor);

a735 1
  getprogname (argv[0]);
d800 1
a800 1
	        {
d802 3
a804 3
	                                me, &parent_alive, 0, 0,
				        DUPLICATE_SAME_ACCESS
				        | DUPLICATE_CLOSE_SOURCE))
@


1.1
log
@Initial revision
@
text
@d25 2
a26 2
static per_process dummy_user_data = {0};
per_process NO_COPY *user_data = &dummy_user_data;
d97 1
a97 1
  if (user_data != &dummy_user_data)
d263 1
a263 1
quoted (char *word, char *cmd, int winshell)
d421 1
a421 1
	      cmd = quoted (word, cmd, winshell);
d505 1
a505 1
extern void __inline__
d538 1
a538 1
extern void __inline__
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
