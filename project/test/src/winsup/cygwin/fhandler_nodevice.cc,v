head	1.7;
access;
symbols
	cygwin-1_7_35-release:1.7
	cygwin-1_7_34-release:1.7
	cygwin-1_7_33-release:1.7
	cygwin-1_7_32-release:1.7
	cygwin-1_7_31-release:1.7
	cygwin-1_7_30-release:1.7
	cygwin-1_7_29-release:1.7
	cygwin-1_7_29-release-branchpoint:1.7.0.6
	cygwin-pre-user-db:1.7
	cygwin-1_7_28-release:1.7
	cygwin-1_7_27-release:1.7
	cygwin-1_7_26-release:1.7
	cygwin-1_7_25-release:1.7
	cygwin-1_7_24-release:1.7
	cygwin-1_7_23-release:1.7
	cygwin-1_7_22-release:1.7
	cygwin-1_7_21-release:1.7
	cygwin-1_7_20-release:1.7
	cygwin-1_7_19-release:1.7
	cygwin-64bit-postmerge:1.7
	cygwin-64bit-premerge-branch:1.7.0.4
	cygwin-64bit-premerge:1.7
	cygwin-1_7_18-release:1.7
	post-ptmalloc3:1.7
	pre-ptmalloc3:1.7
	cygwin-1_7_17-release:1.7
	cygwin-64bit-branch:1.7.0.2
	cygwin-1_7_16-release:1.7
	cygwin-1_7_15-release:1.7
	cygwin-1_7_14_2-release:1.7
	cygwin-1_7_14-release:1.7
	cygwin-1_7_12-release:1.6
	cygwin-1_7_11-release:1.6
	cygwin-1_7_10-release:1.6
	signal-rewrite:1.6.0.8
	pre-notty:1.6
	cygwin-1_7_9-release:1.6
	cv-post-1_7_9:1.6.0.6
	cygwin-1_7_8-release:1.6
	cygwin-1_7_7-release:1.6
	cygwin-1_7_5-release:1.6
	cygwin-1_7_4-release:1.6
	cygwin-1_7_3-release:1.6
	cygwin-1_7_2-release:1.6
	fifo_doover3:1.6.0.4
	cygwin-1_7_1-release:1.6
	prefifo:1.6
	cv-branch-2:1.6.0.2
	pre-ripout-set_console_state_for_spawn:1.5
	EOL_registry_mounts:1.4
	preoverlapped:1.4
	drop_9x_support_start:1.4
	cr-0x5f1:1.4.0.12
	cv-branch:1.4.0.10
	pre-ptymaster-archetype:1.4
	cr-0x3b58:1.4.0.8
	cr-0x5ef:1.4.0.6
	after-mmap-privanon-noreserve:1.4
	after-mmap-revamp:1.4
	before-mmap-revamp:1.4
	cgf-more-exit-sync:1.4
	post_wait_sig_exit:1.4
	pre_wait_sig_exit:1.4
	reparent-point:1.4
	noreparent:1.4.0.4
	cr-0x5e6:1.4.0.2
	cr-0x9e:1.2.0.6
	cr-0x9d:1.2.0.4
	cgf-deleteme:1.2.0.2
	pre-sigrewrite:1.2
	corinna-01:1.2
	pre-cgf-merge:1.2
	cgf-dev-branch:1.1.0.2;
locks; strict;
comment	@// @;


1.7
date	2012.04.04.12.45.24;	author corinna;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.03.05.12.20;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2008.04.07.18.45.57;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2004.03.27.18.01.04;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.09.04.04.23;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2003.09.20.00.31.13;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.25.18.59.43;	author cgf;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2003.01.25.18.59.43;	author cgf;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2003.02.14.03.03.28;	author cgf;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2003.02.23.07.03.23;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.7
log
@	* fhandler_nodevice.cc (fhandler_nodevice::open): Convert EROFS to
	ENOENT if non-existent file got opened for reading only.  Explain why.
	* path.cc (path_conv::check): Stick to ENOENT if file has been opened
	for informational purposes only.  Add to comment.
@
text
@/* fhandler_nodevice.cc.  "No such device" handler.

   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2008, 2009
   Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include "winsup.h"
#include "cygerrno.h"
#include "path.h"
#include "fhandler.h"

int
fhandler_nodevice::open (int flags, mode_t)
{
  if (!pc.error)
    set_errno (ENXIO);
  /* Fixup EROFS error returned from path_conv if /dev is not backed by real
     directory on disk and the file doesn't exist. */
  else if (pc.error == EROFS && (flags & O_ACCMODE) == O_RDONLY)
    set_errno (ENOENT);
  return 0;
}

fhandler_nodevice::fhandler_nodevice ()
{
}
@


1.6
log
@Remove unneeded header files from source files throughout.  Update copyrights
where appropriate.
* globals.cc: New file for generic global variables.
* mkglobals_h: New file to generate globals.h.
* mkstatic: New Script used to build a (currently non-working) static
libcygwin_s.a.
* Makefile.in: Add unused rule to build a non-working libcygwin_s.a.
(DLL_OFILES): Add globals.o.  Make all objects rely on globals.h.
(globals.h): New target.  Generate globals.h.
* cygtls.h: Honor new CYGTLS_HANDLE define to control when the HANDLE operator
is allowed in _cygtls.
* dcrt0.cc: Move most globals to globals.cc.
* init.cc: Ditto.
* environ.cc (strip_title_path): Remove now-unneeded extern.
* fhandler_serial.cc (fhandler_serial::open): Ditto.
* pinfo.cc: Ditto.
(commune_process): Ditto.
* shared.cc: Ditto.
* glob.cc: Ditto.
* strace.cc: Ditto.
* exceptions.cc: Define CYGTLS_HANDLE before including winsup.h.
* path.cc (stat_suffixes): Move here.
* security.h: Add forward class path_conv declaration.
* smallprint.cc (__small_vsprintf): Make a true c++ function.
(__small_sprintf): Ditto.
(small_printf): Ditto.
(console_printf): Ditto.
(__small_vswprintf): Ditto.
(__small_swprintf): Ditto.
* spawn.cc (spawn_guts): Remove _stdcall decoration in favor of regparm.
(hExeced): Move to globals.cc
* strfuncs.cc (current_codepage): Ditto.
(active_codepage): Ditto.
* sync.cc (lock_process::locker): Move here from dcrt0.cc.
* syscalls.cc (stat_suffixes): Move to path.cc.
* tty.cc (tty::create_master): Uncapitalize fatal warning for consistency.
* winsup.h: Include globals.h to declare most of the grab bag list of globals
which were previously defined here.
* mount.h: Move USER_* defines back to shared_info.h.
* speclib: Force temporary directory cleanup.
@
text
@d18 1
a18 1
fhandler_nodevice::open (int, mode_t)
d22 4
@


1.5
log
@Remove unneeded header files from source files throughout.
@
text
@d1 1
a1 1
/* fhandler.cc.  See console.cc for fhandler_console functions.
d3 2
a4 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Red Hat, Inc.
a13 1
#include "security.h"
@


1.4
log
@* fhandler_nodevice.cc (fhandler_nodevice::open): Assume that errno has already
been set if pc.error is nonzero.
@
text
@a11 6
#include <errno.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/cygwin.h>
#include <sys/uio.h>
#include <signal.h>
a12 1
#include "perprocess.h"
a13 1
#include "cygwin/version.h"
a15 6
#include "dtable.h"
#include "cygheap.h"
#include "shared_info.h"
#include "pinfo.h"
#include <assert.h>
#include <limits.h>
@


1.3
log
@* debug.h (console_printf): Define for non-debugging condition.
* cygtls.h (_threadinfo::lock): Remove wait argument.
(_threadinfo::interrupt_setup): Remove retaddr argument.
* exceptions.cc (_threadinfo::interrupt_setup): Ditto.
(_threadinfo::interrupt_now): Accommodate change to interrupt_setup argument.
(setup_handler): Ditto.  Always lock sig stack prior to determining interrupt
method.
* gendef (_sigfe): Correct thinko regarding cmpxchg.
(_sigbe): Ditto.
(_threadinfo::lock): Ditto.
(_threadinfo::pop): Eliminate left-over stack unlock.
* sigproc.cc (proc_subproc): Chnage debugging output to printed warning.
@
text
@d34 2
a35 1
  set_errno (ENXIO);
@


1.2
log
@* syscalls.cc (system): Strip signal considerations from here so that they are
not inherited by a child process.
* spawn.cc (spawn_guts): Handle system() signal stuff here.
* winsup.h (_P_SYSTEM): Define.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
@


1.1
log
@file fhandler_nodevice.cc was initially added on branch cgf-dev-branch.
@
text
@d1 40
@


1.1.2.1
log
@* Makefile.in (DLL_OFILES): Add fhandler_nodevice.o.
* devices.gperf (device::parse): Just set devn to input if device not found --
nonexistent device will be caught later.
* dtable.cc (dtable::build_fhandler): Build fhandler_nodevice type when unknown
device.
* fhandler.h (fhandler_nodevice): New class.
(fhandler_union): Add fhandler_nodevice.
* path.cc (path_conv::check): Always set device stuff if major/minor are
specified.
@
text
@a0 40
/* fhandler.cc.  See console.cc for fhandler_console functions.

   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include "winsup.h"
#include <errno.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/cygwin.h>
#include <sys/uio.h>
#include <signal.h>
#include "cygerrno.h"
#include "perprocess.h"
#include "security.h"
#include "cygwin/version.h"
#include "fhandler.h"
#include "path.h"
#include "dtable.h"
#include "cygheap.h"
#include "shared_info.h"
#include "pinfo.h"
#include <assert.h>
#include <limits.h>

int
fhandler_nodevice::open (path_conv *, int, mode_t)
{
  set_errno (ENODEV);
  return 0;
}

fhandler_nodevice::fhandler_nodevice ()
{
}
@


1.1.2.2
log
@merge from trunk.
Reorganize includes throughout so that path.h comes before fhandler.h.
Eliminate path_conv arguments from fhandler functions which take them,
throughout.  Use get_name() and get_win32_name() consistently throughout for
fhandler objects.  Use build_fh_* functions throughout, where appropriate.
* fhandler.h (fhandler_base): Store path_conv struct here.  Remove dev.
* dtable.h (dtable::build_fhandler_*): Remove.
(build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* dtable.cc (build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* fhandler.h (fhandler_base::set_name): Change argument.
* fhandler.cc (fhandler_base::set_name): Just accept a path_conv argument.
(executable_states): Move.
* path.h (executable_state): Accept.
* syscalls.cc (stat_worker): Make static.
* winsup.h (stat_worker): Remove definition.
@
text
@d22 1
a23 1
#include "fhandler.h"
d32 1
a32 1
fhandler_nodevice::open (int, mode_t)
@


1.1.2.3
log
@* cygwin-gperf: Fix typo in FH_FS static storage.
* devices.gperf (device::parse): Default to fs "device" when nothing else is
found.
* fhandler.cc (fhandler_base::device_access_denied): Use access_worker rather
than access to avoid reparsing pc.
* fhandler_nodevice.cc (fhandler_nodevice::open): Set errno to ENXIO rather
than ENODEV.
* path.cc (path_conv::check): Default to FH_FS rather than FH_BAD.
(mount_info::conv_to_win32_path): Ditto.
(win32_device_name): Don't do device handling if FH_FS.
* path.h (path_conv::get_devn): Just return raw device number.
* syscalls.cc (access_worker): New function, split from access().  Correctly
deal with special devices in light of recent ntsec changes.
(access): Use access_worker.
@
text
@d34 1
a34 1
  set_errno (ENXIO);
@


