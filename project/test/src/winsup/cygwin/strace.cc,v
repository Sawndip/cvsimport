head	1.82;
access;
symbols
	cygwin-1_7_35-release:1.82
	cygwin-1_7_34-release:1.82
	cygwin-1_7_33-release:1.81.2.1
	cygwin-1_7_32-release:1.81.2.1
	cygwin-1_7_31-release:1.81.2.1
	cygwin-1_7_30-release:1.81
	cygwin-1_7_29-release:1.81
	cygwin-1_7_29-release-branchpoint:1.81.0.2
	cygwin-pre-user-db:1.81
	cygwin-1_7_28-release:1.81
	cygwin-1_7_27-release:1.80
	cygwin-1_7_26-release:1.80
	cygwin-1_7_25-release:1.79
	cygwin-1_7_24-release:1.79
	cygwin-1_7_23-release:1.79
	cygwin-1_7_22-release:1.79
	cygwin-1_7_21-release:1.79
	cygwin-1_7_20-release:1.79
	cygwin-1_7_19-release:1.79
	cygwin-64bit-postmerge:1.79
	cygwin-64bit-premerge-branch:1.78.0.2
	cygwin-64bit-premerge:1.78
	cygwin-1_7_18-release:1.78
	post-ptmalloc3:1.77.2.2
	pre-ptmalloc3:1.77.2.2
	cygwin-1_7_17-release:1.77
	cygwin-64bit-branch:1.77.0.2
	cygwin-1_7_16-release:1.77
	cygwin-1_7_15-release:1.76
	cygwin-1_7_14_2-release:1.76
	cygwin-1_7_14-release:1.76
	cygwin-1_7_12-release:1.76
	cygwin-1_7_11-release:1.76
	cygwin-1_7_10-release:1.76
	signal-rewrite:1.72.0.2
	pre-notty:1.70
	cygwin-1_7_9-release:1.69
	cv-post-1_7_9:1.69.0.2
	cygwin-1_7_8-release:1.69
	cygwin-1_7_7-release:1.69
	cygwin-1_7_5-release:1.67
	cygwin-1_7_4-release:1.67
	cygwin-1_7_3-release:1.67
	cygwin-1_7_2-release:1.66
	fifo_doover3:1.66.0.2
	cygwin-1_7_1-release:1.66
	prefifo:1.65
	cv-branch-2:1.65.0.2
	pre-ripout-set_console_state_for_spawn:1.63
	EOL_registry_mounts:1.61
	preoverlapped:1.57
	drop_9x_support_start:1.57
	cr-0x5f1:1.57.0.8
	cv-branch:1.57.0.6
	pre-ptymaster-archetype:1.57
	cr-0x3b58:1.57.0.4
	cr-0x5ef:1.57.0.2
	after-mmap-privanon-noreserve:1.53
	after-mmap-revamp:1.53
	before-mmap-revamp:1.53
	cgf-more-exit-sync:1.53
	post_wait_sig_exit:1.52
	pre_wait_sig_exit:1.51
	reparent-point:1.45
	noreparent:1.45.0.10
	cr-0x5e6:1.45.0.8
	cr-0x9e:1.45.0.6
	cr-0x9d:1.45.0.4
	cgf-deleteme:1.45.0.2
	pre-sigrewrite:1.44
	corinna-01:1.43
	cr-0x9c:1.42.0.6
	cr-0x9b:1.42.0.4
	cr-0x99:1.42
	Z-emcb-cygwin_daemon:1.42.0.2
	w32api-2_2:1.41
	mingw-runtime-2_4:1.41
	pre-cgf-merge:1.42
	cgf-dev-branch:1.40.0.12
	predaemon:1.25
	cygwin_daemon_merge_HEAD:1.25
	pregp02r1:1.25.0.2
	cygnus_cvs_20020108_pre:1.22
	Z-cygwin_daemon_merge-new_HEAD:1.37
	Z-cygwin_daemon_merge_HEAD:1.37
	cygwin_daemon:1.21.0.4;
locks; strict;
comment	@// @;
expand	@o@;


1.82
date	2014.06.23.19.05.14;	author corinna;	state Exp;
branches;
next	1.81;

1.81
date	2013.12.22.07.07.48;	author cgf;	state Exp;
branches
	1.81.2.1;
next	1.80;

1.80
date	2013.11.24.12.13.35;	author corinna;	state Exp;
branches;
next	1.79;

1.79
date	2013.04.23.09.44.33;	author corinna;	state Exp;
branches;
next	1.78;

1.78
date	2013.01.21.04.38.28;	author cgf;	state Exp;
branches;
next	1.77;

1.77
date	2012.05.21.19.45.12;	author corinna;	state Exp;
branches
	1.77.2.1;
next	1.76;

1.76
date	2011.12.08.06.17.49;	author cgf;	state Exp;
branches;
next	1.75;

1.75
date	2011.11.24.21.36.52;	author cgf;	state Exp;
branches;
next	1.74;

1.74
date	2011.11.24.02.17.54;	author cgf;	state Exp;
branches;
next	1.73;

1.73
date	2011.11.14.01.37.02;	author cgf;	state Exp;
branches;
next	1.72;

1.72
date	2011.07.04.15.25.36;	author corinna;	state Exp;
branches;
next	1.71;

1.71
date	2011.06.17.08.30.27;	author corinna;	state Exp;
branches;
next	1.70;

1.70
date	2011.05.02.17.05.10;	author cgf;	state Exp;
branches;
next	1.69;

1.69
date	2010.08.09.16.47.47;	author yselkowitz;	state Exp;
branches;
next	1.68;

1.68
date	2010.05.18.14.30.51;	author cgf;	state Exp;
branches;
next	1.67;

1.67
date	2010.03.31.18.06.02;	author cgf;	state Exp;
branches;
next	1.66;

1.66
date	2009.10.14.04.17.05;	author ericb;	state Exp;
branches;
next	1.65;

1.65
date	2009.01.03.05.12.21;	author cgf;	state Exp;
branches;
next	1.64;

1.64
date	2008.12.19.19.09.49;	author cgf;	state Exp;
branches;
next	1.63;

1.63
date	2008.04.28.16.01.54;	author corinna;	state Exp;
branches;
next	1.62;

1.62
date	2008.04.07.18.45.59;	author cgf;	state Exp;
branches;
next	1.61;

1.61
date	2008.04.01.13.22.47;	author corinna;	state Exp;
branches;
next	1.60;

1.60
date	2008.02.14.16.47.11;	author corinna;	state Exp;
branches;
next	1.59;

1.59
date	2008.02.01.12.37.51;	author corinna;	state Exp;
branches;
next	1.58;

1.58
date	2007.12.06.18.24.06;	author corinna;	state Exp;
branches;
next	1.57;

1.57
date	2006.01.02.02.57.54;	author cgf;	state Exp;
branches;
next	1.56;

1.56
date	2006.01.02.02.55.14;	author cgf;	state Exp;
branches;
next	1.55;

1.55
date	2005.12.29.20.46.34;	author cgf;	state Exp;
branches;
next	1.54;

1.54
date	2005.12.26.19.34.59;	author cgf;	state Exp;
branches;
next	1.53;

1.53
date	2005.09.27.18.54.32;	author cgf;	state Exp;
branches;
next	1.52;

1.52
date	2005.09.22.17.06.48;	author cgf;	state Exp;
branches;
next	1.51;

1.51
date	2005.05.02.03.50.08;	author cgf;	state Exp;
branches;
next	1.50;

1.50
date	2005.04.22.13.58.09;	author cgf;	state Exp;
branches;
next	1.49;

1.49
date	2005.04.03.08.45.21;	author corinna;	state Exp;
branches;
next	1.48;

1.48
date	2005.01.12.22.40.46;	author cgf;	state Exp;
branches;
next	1.47;

1.47
date	2005.01.11.15.49.17;	author cgf;	state Exp;
branches;
next	1.46;

1.46
date	2005.01.11.15.31.04;	author cgf;	state Exp;
branches;
next	1.45;

1.45
date	2003.12.07.22.37.12;	author cgf;	state Exp;
branches;
next	1.44;

1.44
date	2003.11.14.23.40.05;	author rbcollins;	state Exp;
branches;
next	1.43;

1.43
date	2003.09.25.00.37.17;	author cgf;	state Exp;
branches;
next	1.42;

1.42
date	2003.06.16.03.24.12;	author cgf;	state Exp;
branches;
next	1.41;

1.41
date	2003.02.04.03.01.17;	author cgf;	state Exp;
branches;
next	1.40;

1.40
date	2002.10.22.16.18.55;	author cgf;	state Exp;
branches
	1.40.12.1;
next	1.39;

1.39
date	2002.10.18.23.52.59;	author cgf;	state Exp;
branches;
next	1.38;

1.38
date	2002.09.23.00.31.30;	author cgf;	state Exp;
branches;
next	1.37;

1.37
date	2002.09.22.03.38.57;	author cgf;	state Exp;
branches;
next	1.36;

1.36
date	2002.09.19.03.30.20;	author cgf;	state Exp;
branches;
next	1.35;

1.35
date	2002.08.01.16.20.31;	author cgf;	state Exp;
branches;
next	1.34;

1.34
date	2002.07.13.21.08.13;	author cgf;	state Exp;
branches;
next	1.33;

1.33
date	2002.06.19.15.27.25;	author cgf;	state Exp;
branches;
next	1.32;

1.32
date	2002.06.07.03.44.33;	author cgf;	state Exp;
branches;
next	1.31;

1.31
date	2002.06.06.01.26.33;	author cgf;	state Exp;
branches;
next	1.30;

1.30
date	2002.06.05.04.01.43;	author cgf;	state Exp;
branches;
next	1.29;

1.29
date	2002.06.02.06.07.01;	author cgf;	state Exp;
branches;
next	1.28;

1.28
date	2002.05.27.02.25.28;	author cgf;	state Exp;
branches;
next	1.27;

1.27
date	2002.05.25.02.22.50;	author cgf;	state Exp;
branches;
next	1.26;

1.26
date	2002.04.15.19.23.27;	author cgf;	state Exp;
branches;
next	1.25;

1.25
date	2002.02.15.17.06.40;	author cgf;	state Exp;
branches;
next	1.24;

1.24
date	2002.02.14.21.20.06;	author cgf;	state Exp;
branches;
next	1.23;

1.23
date	2002.01.29.02.02.01;	author cgf;	state Exp;
branches;
next	1.22;

1.22
date	2001.10.13.01.35.15;	author cgf;	state Exp;
branches;
next	1.21;

1.21
date	2001.06.24.22.26.52;	author cgf;	state Exp;
branches
	1.21.4.1;
next	1.20;

1.20
date	2001.03.07.17.44.32;	author cgf;	state Exp;
branches;
next	1.19;

1.19
date	2001.02.26.09.50.24;	author corinna;	state Exp;
branches;
next	1.18;

1.18
date	2000.10.24.02.25.27;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2000.10.17.18.55.58;	author cgf;	state Exp;
branches;
next	1.16;

1.16
date	2000.10.16.23.55.57;	author cgf;	state Exp;
branches;
next	1.15;

1.15
date	2000.10.12.22.15.47;	author cgf;	state Exp;
branches;
next	1.14;

1.14
date	2000.10.07.18.12.11;	author cgf;	state Exp;
branches;
next	1.13;

1.13
date	2000.09.08.02.56.55;	author cgf;	state Exp;
branches;
next	1.12;

1.12
date	2000.08.22.05.10.20;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2000.08.12.05.35.42;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2000.08.02.19.26.01;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2000.08.02.16.28.18;	author dj;	state Exp;
branches;
next	1.8;

1.8
date	2000.08.02.03.42.31;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2000.07.27.17.30.48;	author dj;	state Exp;
branches;
next	1.6;

1.6
date	2000.07.01.17.30.35;	author corinna;	state Exp;
branches;
next	1.5;

1.5
date	2000.03.15.04.49.36;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2000.03.07.05.33.09;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.28.05.05.33;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2000.02.21.05.20.38;	author cgf;	state Exp;
branches;
next	1.1;

1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches
	1.1.1.1;
next	;

1.81.2.1
date	2014.07.15.14.34.38;	author corinna;	state Exp;
branches;
next	;

1.77.2.1
date	2012.11.16.13.48.24;	author corinna;	state Exp;
branches;
next	1.77.2.2;

1.77.2.2
date	2013.01.21.13.52.10;	author corinna;	state Exp;
branches;
next	;

1.40.12.1
date	2003.02.05.14.25.11;	author cgf;	state Exp;
branches;
next	1.40.12.2;

1.40.12.2
date	2003.02.14.03.03.29;	author cgf;	state Exp;
branches;
next	1.40.12.3;

1.40.12.3
date	2003.07.06.05.10.43;	author cgf;	state Exp;
branches;
next	;

1.21.4.1
date	2002.01.04.03.56.11;	author rbcollins;	state Exp;
branches;
next	1.21.4.2;

1.21.4.2
date	2002.02.28.12.53.27;	author rbcollins;	state Exp;
branches;
next	1.21.4.3;

1.21.4.3
date	2002.06.13.14.34.12;	author rbcollins;	state Exp;
branches;
next	1.21.4.4;

1.21.4.4
date	2002.06.19.20.58.58;	author scottc;	state Exp;
branches;
next	1.21.4.5;

1.21.4.5
date	2002.07.13.21.44.07;	author scottc;	state Exp;
branches;
next	1.21.4.6;

1.21.4.6
date	2002.08.01.20.34.07;	author scottc;	state Exp;
branches;
next	1.21.4.7;

1.21.4.7
date	2002.09.19.08.11.17;	author scottc;	state Exp;
branches;
next	1.21.4.8;

1.21.4.8
date	2002.09.22.10.01.28;	author scottc;	state Exp;
branches;
next	;

1.1.1.1
date	2000.02.17.19.38.31;	author cgf;	state Exp;
branches;
next	;


desc
@@


1.82
log
@	* spawn.cc (find_exec): Initialize err (CID 60111).
	* strace.cc (strace::activate): Fix potential buffer overrun (CID 59938)
	* syscalls.cc (popen): Close parent pipe descriptor via fclosing fp on
	error to avoid resource leak (CID 59981).
	* thread.cc (pthread::exit): Avoid accessing cygtls member after
	deleting "this" (CID 60217).
@
text
@/* strace.cc: system/windows tracing

   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2007, 2008, 2009, 2010, 2011, 2012 Red Hat, Inc.

This file is part of Cygwin.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include "winsup.h"
#include <ctype.h>
#include "cygerrno.h"
#include "pinfo.h"
#include "perprocess.h"
#include "cygwin_version.h"
#include "cygthread.h"
#include "path.h"
#include "fhandler.h"
#include "dtable.h"
#include "cygheap.h"
#include "child_info.h"

#define PROTECT(x) x[sizeof (x)-1] = 0
#define CHECK(x) if (x[sizeof (x)-1] != 0) { small_printf ("array bound exceeded %d\n", __LINE__); ExitProcess (1); }

class strace NO_COPY strace;

#ifndef NOSTRACE

void
strace::activate (bool isfork)
{
  if (!_active && being_debugged ())
    {
      char buf[30];
      __small_sprintf (buf, "cYg%8x %lx %d", _STRACE_INTERFACE_ACTIVATE_ADDR, &_active, isfork);
      OutputDebugString (buf);
      if (_active)
	{
	  char pidbuf[80];
	  WCHAR progname_buf[NT_MAX_PATH - 512];
	  WCHAR *progname;
	  if (myself)
	    {
	      __small_sprintf (pidbuf, "(pid %d, ppid %d, windows pid %u)", myself->pid,
			       myself->ppid ?: 1, GetCurrentProcessId ());
	      progname = myself->progname;
	    }
	  else
	    {
	      GetModuleFileNameW (NULL, progname_buf,
	      			  sizeof progname_buf / sizeof (WCHAR));
	      __small_sprintf (pidbuf, "(windows pid %u)", GetCurrentProcessId ());
	      progname = progname_buf;
	    }
	  prntf (1, NULL, "**********************************************");
	  prntf (1, NULL, "Program name: %W %s", progname, pidbuf);
	  prntf (1, NULL, "OS version:   Windows %s", wincap.osname ());
	  prntf (1, NULL, "**********************************************");
	}
    }
}

void
strace::dll_info ()
{
  if (active ())
    {
      prntf (1, NULL, "App version:  %d.%d, api: %d.%d",
	     user_data->dll_major, user_data->dll_minor,
	     user_data->api_major, user_data->api_minor);
      prntf (1, NULL, "DLL version:  %d.%d, api: %d.%d",
	     cygwin_version.dll_major, cygwin_version.dll_minor,
	     cygwin_version.api_major, cygwin_version.api_minor);
      prntf (1, NULL, "DLL build:    %s", cygwin_version.dll_build_date);
    }
}

int
strace::microseconds ()
{
  static hires_ns now;
  return (int) now.usecs ();
}

static int __stdcall
getfunc (char *in_dst, const char *func)
{
  const char *p;
  const char *pe;
  char *dst = in_dst;
  for (p = func; (pe = strchr (p, '(')); p = pe + 1)
    if (isalnum ((int)pe[-1]) || pe[-1] == '_')
      break;
    else if (isspace ((int)pe[-1]))
      {
	pe--;
	break;
      }
  if (!pe)
    pe = strchr (func, '\0');
  for (p = pe; p > func; p--)
    if (p != pe && *p == ' ')
      {
	p++;
	break;
      }
  if (*p == '*')
    p++;
  while (p < pe)
    *dst++ = *p++;

  *dst++ = ':';
  *dst++ = ' ';
  *dst = '\0';

  return dst - in_dst;
}

static char *
mypid (char *buf)
{
  if (myself && myself->pid)
    __small_sprintf (buf, "%d", myself->pid);
  else
    __small_sprintf (buf, "(%d)", GetCurrentProcessId ());
  return buf;
}

/* sprintf analog for use by output routines. */
int
strace::vsprntf (char *buf, const char *func, const char *infmt, va_list ap)
{
  int count;
  char fmt[80];
  static NO_COPY bool nonewline = false;
  DWORD err = GetLastError ();
  const char *tn = cygthread::name ();

  int microsec = microseconds ();
  lmicrosec = microsec;

  __small_sprintf (fmt, "%7d [%s] %s ", microsec, tn, "%W %s%s");

  SetLastError (err);

  if (nonewline)
    count = 0;
  else
    {
      PWCHAR pn = NULL;
      WCHAR progname[NT_MAX_PATH];
      if (!cygwin_finished_initializing)
	pn = (myself) ? myself->progname : NULL;
      else if (__progname)
	sys_mbstowcs(pn = progname, NT_MAX_PATH, __progname);

      WCHAR empty[1] = {};
      PWCHAR p;
      if (!pn)
	GetModuleFileNameW (NULL, pn = progname, sizeof (progname));
      if (!pn)
	p = empty;
      else if ((p = wcsrchr (pn, L'\\')) != NULL)
	p++;
      else if ((p = wcsrchr (pn, L'/')) != NULL)
	p++;
      else
	p = pn;
      if (p != progname)
	wcscpy (progname, p);
      if ((p = wcsrchr (progname, '.')) != NULL
	  && !wcscasecmp (p, L".exe"))
	*p = '\000';
      p = progname;
      char tmpbuf[20];
      count = __small_sprintf (buf, fmt, *p ? p : L"?", mypid (tmpbuf),
			       execing ? "!" : "");
      if (func)
	count += getfunc (buf + count, func);
    }

  count += __small_vsprintf (buf + count, infmt, ap);
  char *p;
  for (p = buf + count; p > buf; p--)
    switch (p[-1])
      {
	case '\n':
	  p[-1] = '\0';
	  break;
	case '\b':
	  *--p = '\0';
	   nonewline = true;
	  goto done;
	default:
	  goto addnl;
      }

addnl:
  *p++ = '\n';
  *p = '\0';
  nonewline = false;

done:
  return p - buf;
}

/* Write to strace file or strace queue. */
void
strace::write (unsigned category, const char *buf, int count)
{
# define PREFIX (3 + 8 + 1 + 8 + 1)
  char outbuf[PREFIX + 1 + count + 1];
# define outstuff (outbuf + 12)
  __small_sprintf (outstuff, "%x %s", category, buf);
  __small_sprintf (outbuf, "cYg%08x", strlen (outstuff) + 1);
  outstuff[-1] = ' ';
  OutputDebugString (outbuf);
#undef outstuff
#undef PREFIX
}

void
strace::write_childpid (pid_t pid)
{
  char buf[30];

  if (!attached () || !being_debugged ())
    return;
  __small_sprintf (buf, "cYg%8x %x", _STRACE_CHILD_PID, pid);
  OutputDebugString (buf);
}

/* Printf function used when tracing system calls.
   Warning: DO NOT SET ERRNO HERE! */

void
strace::vprntf (unsigned category, const char *func, const char *fmt, va_list ap)
{
  DWORD err = GetLastError ();
  int len;
  char buf[NT_MAX_PATH];

  PROTECT (buf);
  SetLastError (err);

  len = vsprntf (buf, func, fmt, ap);
  CHECK (buf);
  if (category & _STRACE_SYSTEM)
    {
      DWORD done;
      WriteFile (GetStdHandle (STD_ERROR_HANDLE), buf, len, &done, 0);
      FlushFileBuffers (GetStdHandle (STD_ERROR_HANDLE));
      /* Make sure that the message shows up on the screen, too, since this is
	 a serious error. */
      if (GetFileType (GetStdHandle (STD_ERROR_HANDLE)) != FILE_TYPE_CHAR)
	{
	  HANDLE h = CreateFile ("CONOUT$", GENERIC_READ | GENERIC_WRITE,
				 FILE_SHARE_READ | FILE_SHARE_WRITE,
				 &sec_none, OPEN_EXISTING, 0, 0);
	  if (h != INVALID_HANDLE_VALUE)
	    {
	      WriteFile (h, buf, len, &done, 0);
	      CloseHandle (h);
	    }
	}
    }

#ifndef NOSTRACE
  if (active ())
    write (category, buf, len);
#endif
  SetLastError (err);
}

void
strace::prntf (unsigned category, const char *func, const char *fmt, ...)
{
  va_list ap;

  va_start (ap, fmt);
  vprntf (category, func, fmt, ap);
  va_end (ap);
}

extern "C" void
strace_printf (unsigned category, const char *func, const char *fmt, ...)
{
  va_list ap;

  if ((category & _STRACE_SYSTEM) || strace.active ())
    {
      va_start (ap, fmt);
      strace.vprntf (category, func, fmt, ap);
      va_end (ap);
    }
}

static NO_COPY struct tab
{
  int v;
  const char *n;
}
ta[] =
{
  {  WM_NULL, "WM_NULL"  },
  {  WM_CREATE, "WM_CREATE"  },
  {  WM_DESTROY, "WM_DESTROY"  },
  {  WM_MOVE, "WM_MOVE"  },
  {  WM_SIZE, "WM_SIZE"  },
  {  WM_ACTIVATE, "WM_ACTIVATE"  },
  {  WM_SETFOCUS, "WM_SETFOCUS"  },
  {  WM_KILLFOCUS, "WM_KILLFOCUS"  },
  {  WM_ENABLE, "WM_ENABLE"  },
  {  WM_SETREDRAW, "WM_SETREDRAW"  },
  {  WM_SETTEXT, "WM_SETTEXT"  },
  {  WM_GETTEXT, "WM_GETTEXT"  },
  {  WM_GETTEXTLENGTH, "WM_GETTEXTLENGTH"  },
  {  WM_PAINT, "WM_PAINT"  },
  {  WM_CLOSE, "WM_CLOSE"  },
  {  WM_QUERYENDSESSION, "WM_QUERYENDSESSION"  },
  {  WM_QUIT, "WM_QUIT"  },
  {  WM_QUERYOPEN, "WM_QUERYOPEN"  },
  {  WM_ERASEBKGND, "WM_ERASEBKGND"  },
  {  WM_SYSCOLORCHANGE, "WM_SYSCOLORCHANGE"  },
  {  WM_ENDSESSION, "WM_ENDSESSION"  },
  {  WM_SHOWWINDOW, "WM_SHOWWINDOW"  },
  {  WM_WININICHANGE, "WM_WININICHANGE"  },
  {  WM_DEVMODECHANGE, "WM_DEVMODECHANGE"  },
  {  WM_ACTIVATEAPP, "WM_ACTIVATEAPP"  },
  {  WM_FONTCHANGE, "WM_FONTCHANGE"  },
  {  WM_TIMECHANGE, "WM_TIMECHANGE"  },
  {  WM_CANCELMODE, "WM_CANCELMODE"  },
  {  WM_SETCURSOR, "WM_SETCURSOR"  },
  {  WM_MOUSEACTIVATE, "WM_MOUSEACTIVATE"  },
  {  WM_CHILDACTIVATE, "WM_CHILDACTIVATE"  },
  {  WM_QUEUESYNC, "WM_QUEUESYNC"  },
  {  WM_GETMINMAXINFO, "WM_GETMINMAXINFO"  },
  {  WM_PAINTICON, "WM_PAINTICON"  },
  {  WM_ICONERASEBKGND, "WM_ICONERASEBKGND"  },
  {  WM_NEXTDLGCTL, "WM_NEXTDLGCTL"  },
  {  WM_SPOOLERSTATUS, "WM_SPOOLERSTATUS"  },
  {  WM_DRAWITEM, "WM_DRAWITEM"  },
  {  WM_MEASUREITEM, "WM_MEASUREITEM"  },
  {  WM_DELETEITEM, "WM_DELETEITEM"  },
  {  WM_VKEYTOITEM, "WM_VKEYTOITEM"  },
  {  WM_CHARTOITEM, "WM_CHARTOITEM"  },
  {  WM_SETFONT, "WM_SETFONT"  },
  {  WM_GETFONT, "WM_GETFONT"  },
  {  WM_SETHOTKEY, "WM_SETHOTKEY"  },
  {  WM_GETHOTKEY, "WM_GETHOTKEY"  },
  {  WM_QUERYDRAGICON, "WM_QUERYDRAGICON"  },
  {  WM_COMPAREITEM, "WM_COMPAREITEM"  },
  {  WM_COMPACTING, "WM_COMPACTING"  },
  {  WM_WINDOWPOSCHANGING, "WM_WINDOWPOSCHANGING"  },
  {  WM_WINDOWPOSCHANGED, "WM_WINDOWPOSCHANGED"  },
  {  WM_POWER, "WM_POWER"  },
  {  WM_COPYDATA, "WM_COPYDATA"  },
  {  WM_CANCELJOURNAL, "WM_CANCELJOURNAL"  },
  {  WM_NCCREATE, "WM_NCCREATE"  },
  {  WM_NCDESTROY, "WM_NCDESTROY"  },
  {  WM_NCCALCSIZE, "WM_NCCALCSIZE"  },
  {  WM_NCHITTEST, "WM_NCHITTEST"  },
  {  WM_NCPAINT, "WM_NCPAINT"  },
  {  WM_NCACTIVATE, "WM_NCACTIVATE"  },
  {  WM_GETDLGCODE, "WM_GETDLGCODE"  },
  {  WM_NCMOUSEMOVE, "WM_NCMOUSEMOVE"  },
  {  WM_NCLBUTTONDOWN, "WM_NCLBUTTONDOWN"  },
  {  WM_NCLBUTTONUP, "WM_NCLBUTTONUP"  },
  {  WM_NCLBUTTONDBLCLK, "WM_NCLBUTTONDBLCLK"  },
  {  WM_NCRBUTTONDOWN, "WM_NCRBUTTONDOWN"  },
  {  WM_NCRBUTTONUP, "WM_NCRBUTTONUP"  },
  {  WM_NCRBUTTONDBLCLK, "WM_NCRBUTTONDBLCLK"  },
  {  WM_NCMBUTTONDOWN, "WM_NCMBUTTONDOWN"  },
  {  WM_NCMBUTTONUP, "WM_NCMBUTTONUP"  },
  {  WM_NCMBUTTONDBLCLK, "WM_NCMBUTTONDBLCLK"  },
  {  WM_KEYFIRST, "WM_KEYFIRST"  },
  {  WM_KEYDOWN, "WM_KEYDOWN"  },
  {  WM_KEYUP, "WM_KEYUP"  },
  {  WM_CHAR, "WM_CHAR"  },
  {  WM_DEADCHAR, "WM_DEADCHAR"  },
  {  WM_SYSKEYDOWN, "WM_SYSKEYDOWN"  },
  {  WM_SYSKEYUP, "WM_SYSKEYUP"  },
  {  WM_SYSCHAR, "WM_SYSCHAR"  },
  {  WM_SYSDEADCHAR, "WM_SYSDEADCHAR"  },
  {  WM_KEYLAST, "WM_KEYLAST"  },
  {  WM_INITDIALOG, "WM_INITDIALOG"  },
  {  WM_COMMAND, "WM_COMMAND"  },
  {  WM_SYSCOMMAND, "WM_SYSCOMMAND"  },
  {  WM_TIMER, "WM_TIMER"  },
  {  WM_HSCROLL, "WM_HSCROLL"  },
  {  WM_VSCROLL, "WM_VSCROLL"  },
  {  WM_INITMENU, "WM_INITMENU"  },
  {  WM_INITMENUPOPUP, "WM_INITMENUPOPUP"  },
  {  WM_MENUSELECT, "WM_MENUSELECT"  },
  {  WM_MENUCHAR, "WM_MENUCHAR"  },
  {  WM_ENTERIDLE, "WM_ENTERIDLE"  },
  {  WM_CTLCOLORMSGBOX, "WM_CTLCOLORMSGBOX"  },
  {  WM_CTLCOLOREDIT, "WM_CTLCOLOREDIT"  },
  {  WM_CTLCOLORLISTBOX, "WM_CTLCOLORLISTBOX"  },
  {  WM_CTLCOLORBTN, "WM_CTLCOLORBTN"  },
  {  WM_CTLCOLORDLG, "WM_CTLCOLORDLG"  },
  {  WM_CTLCOLORSCROLLBAR, "WM_CTLCOLORSCROLLBAR"  },
  {  WM_CTLCOLORSTATIC, "WM_CTLCOLORSTATIC"  },
  {  WM_MOUSEFIRST, "WM_MOUSEFIRST"  },
  {  WM_MOUSEMOVE, "WM_MOUSEMOVE"  },
  {  WM_LBUTTONDOWN, "WM_LBUTTONDOWN"  },
  {  WM_LBUTTONUP, "WM_LBUTTONUP"  },
  {  WM_LBUTTONDBLCLK, "WM_LBUTTONDBLCLK"  },
  {  WM_RBUTTONDOWN, "WM_RBUTTONDOWN"  },
  {  WM_RBUTTONUP, "WM_RBUTTONUP"  },
  {  WM_RBUTTONDBLCLK, "WM_RBUTTONDBLCLK"  },
  {  WM_MBUTTONDOWN, "WM_MBUTTONDOWN"  },
  {  WM_MBUTTONUP, "WM_MBUTTONUP"  },
  {  WM_MBUTTONDBLCLK, "WM_MBUTTONDBLCLK"  },
  {  WM_MOUSELAST, "WM_MOUSELAST"  },
  {  WM_PARENTNOTIFY, "WM_PARENTNOTIFY"  },
  {  WM_ENTERMENULOOP, "WM_ENTERMENULOOP"  },
  {  WM_EXITMENULOOP, "WM_EXITMENULOOP"  },
  {  WM_MDICREATE, "WM_MDICREATE"  },
  {  WM_MDIDESTROY, "WM_MDIDESTROY"  },
  {  WM_MDIACTIVATE, "WM_MDIACTIVATE"  },
  {  WM_MDIRESTORE, "WM_MDIRESTORE"  },
  {  WM_MDINEXT, "WM_MDINEXT"  },
  {  WM_MDIMAXIMIZE, "WM_MDIMAXIMIZE"  },
  {  WM_MDITILE, "WM_MDITILE"  },
  {  WM_MDICASCADE, "WM_MDICASCADE"  },
  {  WM_MDIICONARRANGE, "WM_MDIICONARRANGE"  },
  {  WM_MDIGETACTIVE, "WM_MDIGETACTIVE"  },
  {  WM_MDISETMENU, "WM_MDISETMENU"  },
  {  WM_DROPFILES, "WM_DROPFILES"  },
  {  WM_MDIREFRESHMENU, "WM_MDIREFRESHMENU"  },
  {  WM_CUT, "WM_CUT"  },
  {  WM_COPY, "WM_COPY"  },
  {  WM_PASTE, "WM_PASTE"  },
  {  WM_CLEAR, "WM_CLEAR"  },
  {  WM_UNDO, "WM_UNDO"  },
  {  WM_RENDERFORMAT, "WM_RENDERFORMAT"  },
  {  WM_RENDERALLFORMATS, "WM_RENDERALLFORMATS"  },
  {  WM_DESTROYCLIPBOARD, "WM_DESTROYCLIPBOARD"  },
  {  WM_DRAWCLIPBOARD, "WM_DRAWCLIPBOARD"  },
  {  WM_PAINTCLIPBOARD, "WM_PAINTCLIPBOARD"  },
  {  WM_VSCROLLCLIPBOARD, "WM_VSCROLLCLIPBOARD"  },
  {  WM_SIZECLIPBOARD, "WM_SIZECLIPBOARD"  },
  {  WM_ASKCBFORMATNAME, "WM_ASKCBFORMATNAME"  },
  {  WM_CHANGECBCHAIN, "WM_CHANGECBCHAIN"  },
  {  WM_HSCROLLCLIPBOARD, "WM_HSCROLLCLIPBOARD"  },
  {  WM_QUERYNEWPALETTE, "WM_QUERYNEWPALETTE"  },
  {  WM_PALETTEISCHANGING, "WM_PALETTEISCHANGING"  },
  {  WM_PALETTECHANGED, "WM_PALETTECHANGED"  },
  {  WM_HOTKEY, "WM_HOTKEY"  },
  {  WM_PENWINFIRST, "WM_PENWINFIRST"  },
  {  WM_PENWINLAST, "WM_PENWINLAST"  },
  {  WM_ASYNCIO, "ASYNCIO"  },
  {  0, 0  }};

void
strace::wm (int message, int word, int lon)
{
  if (active ())
    {
      int i;

      for (i = 0; ta[i].n; i++)
	{
	  if (ta[i].v == message)
	    {
	      prntf (_STRACE_WM, NULL, "wndproc %d %s %d %d", message, ta[i].n, word, lon);
	      return;
	    }
	}
      prntf (_STRACE_WM, NULL, "wndproc %d unknown  %d %d", message, word, lon);
    }
}
#endif /*NOSTRACE*/
@


1.81
log
@* strace.cc (strace::vsprntf): Fix potential (if unlikely) use of uninitialized
variable.
@
text
@d53 2
a54 1
	      GetModuleFileNameW (NULL, progname_buf, sizeof (myself->progname));
@


1.81.2.1
log
@2014-07-14  Christopher Faylor  <me.cygwin2014@@cgf.cx>

	* sigproc.cc (send_sig): Fix bad format in diagnostic output.

2014-07-14  Yaakov Selkowitz  <yselkowitz@@cygwin.com>

	* thread.cc (pthread_mutex::pthread_mutex): Change default type
	to PTHREAD_MUTEX_NORMAL.
	(pthread_mutex::unlock): Return EPERM if the mutex has no owner and
	the mutex type is PTHREAD_MUTEX_ERRORCHECK, as on Linux.
	(pthread_mutexattr::pthread_mutexattr): Ditto.
	(pthread_mutex_unlock): Do not fail if mutex is a normal mutex
	initializer.
	* include/pthread.h (PTHREAD_MUTEX_INITIALIZER): Redefine as
	PTHREAD_NORMAL_MUTEX_INITIALIZER_NP.

2014-07-09  Corinna Vinschen  <corinna@@vinschen.de>

	* thread.cc (pthread::create): Use PTHREAD_DEFAULT_STACKSIZE stacksize
	if attr.stacksize is 0.
	(pthread_attr::pthread_attr): Initialize stacksize to 0 to align more
	closely to Linux.
	(pthread_attr_getstack): Fix incorrect stackaddr computation.  Return
	stackaddr just like pthread_attr_getstackaddr.  Remove slightly off
	comment.
	(pthread_attr_getstackaddr): Remove slightly off comment.
	(pthread_getattr_np): Return stackaddr and stacksize based on the full
	allocated stackarea.

2014-07-09  Corinna Vinschen  <corinna@@vinschen.de>

	* exceptions.cc (exception::myfault_handle): Rephrase comment.

2014-07-09  Corinna Vinschen  <corinna@@vinschen.de>

	* exceptions.cc (exception::myfault_handle): Fix typo in comment.

2014-07-07  Corinna Vinschen  <corinna@@vinschen.de>

	* exceptions.cc (exception::myfault_handle): Disable handling
	STATUS_STACK_OVERFLOW.  Explain why.

2014-07-07  Corinna Vinschen  <corinna@@vinschen.de>

	* fhandler_socket.cc (fhandler_socket::send_internal): Improve loop to
	write streams in chunks of wmem() bytes to raise performance when
	writing small buffers.  Rename variables and add comments to help
	understanding the code in years to come.

2014-07-07  Corinna Vinschen  <corinna@@vinschen.de>

	* libc/minires.c (minires_dprintf): Change "Minires" to "Resolv" to
	differ from external minres lib.
	(res_nquerydomain): Fix off-by-one in domain concatenation.  Add debug
	output.

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* spawn.cc (find_exec): Initialize err (CID 60111).
	* strace.cc (strace::activate): Fix potential buffer overrun (CID 59938)
	* syscalls.cc (popen): Close parent pipe descriptor via fclosing fp on
	error to avoid resource leak (CID 59981).
	* thread.cc (pthread::exit): Avoid accessing cygtls member after
	deleting "this" (CID 60217).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* select.cc (start_thread_socket): Delete si on early return in case of
	an error (CID 59967).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* regex/regcomp.c (computematchjumps): Free local memory in case of
	error (CID 59975).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* mount.cc (fs_info::update): Define dir in the outermost scope to avoid
	accessing out-of-scope value (CID 60027).  Always initialize attr to
	upath (CID 60113).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* malloc_wrapper.cc (mallinfo): Initialize m if external malloc is used,
	too (CID 60120).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* localtime.cc (tzload): Fix leaking memory (CID 60001).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* environ.cc (regopt): Allocate small local buffer to avoid copying
	twice.  Fixes resource leak (CID 60012).  Add comment.

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* dll_init.cc (dll_list::alloc): Fix buffer overrun (CID 59940).

2014-06-23  Corinna Vinschen  <corinna@@vinschen.de>

	* dcrt0.cc (insert_file): Fix resource leaks (CIDs 59987, 59988).
@
text
@d53 1
a53 2
	      GetModuleFileNameW (NULL, progname_buf,
	      			  sizeof progname_buf / sizeof (WCHAR));
@


1.80
log
@	Throughout, drop unnecessary explicit includes of windows header files
	included by default.
	* winlean.h: Add long comment to explain why we have to define certain
	symbols.
	(_NORMALIZE_): Define.
	(_WINNLS_): Drop definition and subsequent undef.
	(_WINNETWK_): Ditto.
	(_WINSVC_): Ditto.

2013-11-23  Eric Blake  <eblake@@redhat.com>
@
text
@d159 1
d164 1
a164 1
	/* hmm */;
@


1.79
log
@	* Merge in cygwin-64bit-branch.
@
text
@a12 2
#include <wingdi.h>
#include <winuser.h>
@


1.78
log
@Throughout, update copyrights to reflect dates which correspond to main-branch
checkins.  Regularize copyright format.
@
text
@d40 1
a40 1
      __small_sprintf (buf, "cYg%8x %x %d", _STRACE_INTERFACE_ACTIVATE_ADDR, &_active, isfork);
d226 1
a226 1
strace::write_childpid (DWORD pid)
@


1.77
log
@	* strace.cc (strace::activate): Move printing heap size from here...
	* heap.cc (heap_init_info): ...to here.  Explain why.  Print heap
	size in hex and decimal.
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
   2006, 2007, 2008, 2009, 2010, 2011, 2012 Red Hat, Inc.
@


1.77.2.1
log
@	* fhandler_netdrive.cc: Use UINT32_MAX rather than UINT_MAX to make
	absolutely clear that we mean the 32 bit maximum.
	* fhandler_socket.cc: Ditto.
	* pinfo.cc: Ditto with INT32_MAX.
	* select.cc (fd_mask): Drop gratuitious definition.
	(sizeof_fd_set): Cast to size_t.
	* shared.cc (pround): Cast to ptrdiff_t.
	* strace.cc (strace::activate): Fix format string.
	(strace::write_childpid): Take pid_t as parameter.
	* include/sys/strace.h (strace::write_childpid): Change declaration
	accordingly.
	* sync.cc (muto::init): Cast in call to InterlockedExchangePointer to
	make compiler happy.
	* sync.h (class muto): De-const name.
	* syslog.cc (try_connect_syslogd): Take size_t as third argument.
	(vsyslog): Convert len to size_t.
	* thread.cc: Use {U}INT32_MAX rather than {U}LONG_MAX.  Througout change
	types used in Windows calls to matching Windows types.
	(pthread::cancel): Fix access to instruction pointer for x86_64.
	(pthread_attr_getstack): Cast to ptrdiff_t for pointer arithmetic.
	* thread.h: Throughout convert 'long' types to uint32_t or LONG.
@
text
@d40 1
a40 1
      __small_sprintf (buf, "cYg%8x %lx %d", _STRACE_INTERFACE_ACTIVATE_ADDR, &_active, isfork);
d226 1
a226 1
strace::write_childpid (pid_t pid)
@


1.77.2.2
log
@Pull in changes from HEAD
@
text
@d3 2
a4 2
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
   2007, 2008, 2009, 2010, 2011, 2012 Red Hat, Inc.
@


1.76
log
@* dll_init.cc (dll_dllcrt0): Don't try to initialize dll data if we're
dynamically loaded since fork() doesn't work in that scenario anyway.
(dll_dllcrt0_1): Don't accommodate dynamically loaded dlls.
* exceptions.cc (ctrl_c_handler): Don't lock the process; there's too much risk
of deadlock.
* sigproc.cc (_cygtls::remove_wq): Don't try to remove anything from the waitq
if there is obviously nothing there.
* strace.cc (strace::activate): Allow stracing dynamically loaded cygwin1.dll.
@
text
@d4 1
a4 1
   2006, 2007, 2008, 2009, 2010, 2011 Red Hat, Inc.
a61 2
	  if (cygheap && cygheap->user_heap.chunk)
	    prntf (1, NULL, "Heap size:    %u", cygheap->user_heap.chunk);
@


1.75
log
@* cygthread.h (cygthread::name): Default name to "main" if we are early in the
process of setting up the DLL and no name is known.
* dcrt0.cc (initial_env): Remove CYGWIN_SLEEP stuff.
(get_cygwin_startup_info): Activate strace here as appropriate.
(dll_crt0_0): Move get_cygwin_startup_info as early as possible to avoid
missing strace output.
* fork.cc (frok::child): Move debugging statement to point where ppid will be
set.
* pinfo.cc (pinfo::thisproc): Remove obsolete call to strace.hello.  Tweak
debug output slightly.
* select.cc (select_stuff::wait): Allow APCS to be triggered while waiting
since we use them now.  Report when that happens.
* sigproc.cc (child_info::child_info): Use strace.active() rather than
strace.attached().
* spawn.cc (child_info_spawn::worker): Only write strace child pid when we know
it's a cygwin process.  Accommodate change to write_child argument list.
* strace.cc (strace::hello): Delete.  Move functionality...
(strace::activate): ...to here.
(mypid): Just use raw GetCurrentProcessId () if myself isn't set.
(strace::write_childpid): Don't wait for subproc_ready.  Remove arg which was
required for it.
* include/sys/strace.h (strace::hello): Delete.
(strace::write_childpid): Delete first argument.
@
text
@d37 1
a37 1
  if (!dynamically_loaded && !_active && being_debugged ())
@


1.74
log
@* child_info.h (CURR_CHILD_INFO_MAGIC): Reset for previous changes.
* dcrt0.cc (get_cygwin_startup_info): Signal readiness when stracing since
strace::write_child relies on it.  Use strace.activate to notify strace
process, passing in arg indicating whether we're forked.
* sigproc.cc (wait_sig): Accommodate new strace::activate argument.
* spawn.cc (child_info_spawn::worker): Oops.  Previous suspended test was
actually correct.  Revert and document.
* strace.cc (strace::activate): Send additional flag indicating whether this is
an attempt to activate a forked process.
(strace::hello): Report on windows pid.
* include/sys/strace.h (strace::strace): Make a dummy.
(strace::activate): Modify declaration to accept an argument.
(strace::write_childpid): Set regparm.
@
text
@d42 1
a42 13
    }
}

void
strace::hello ()
{
  if (active ())
    {
      char pidbuf[80];
      if (myself->progname[0])
	__small_sprintf (pidbuf, "(pid %d, ppid %d, windows pid %u)", myself->pid,
			 myself->ppid ?: 1, GetCurrentProcessId ());
      else
d44 21
a64 2
	  GetModuleFileNameW (NULL, myself->progname, sizeof (myself->progname));
	  __small_sprintf (pidbuf, "(windows pid %d)", GetCurrentProcessId ());
a65 6
      prntf (1, NULL, "**********************************************");
      prntf (1, NULL, "Program name: %W %s", myself->progname, pidbuf);
      prntf (1, NULL, "OS version:   Windows %s", wincap.osname ());
      if (cygheap)
	prntf (1, NULL, "Heap size:    %u", cygheap->user_heap.chunk);
      prntf (1, NULL, "**********************************************");
d131 1
a131 1
    __small_sprintf (buf, "(%d)", cygwin_pid (GetCurrentProcessId ()));
d228 1
a228 1
strace::write_childpid (child_info& ch, DWORD pid)
a233 1
  WaitForSingleObject (ch.subproc_ready, 30000);
@


1.73
log
@update copyrights
@
text
@d35 1
a35 1
strace::activate ()
d40 1
a40 1
      __small_sprintf (buf, "cYg%8x %x", _STRACE_INTERFACE_ACTIVATE_ADDR, &_active);
d50 1
a50 1
      char pidbuf[40];
d52 2
a53 1
	__small_sprintf (pidbuf, "(pid %d, ppid %d)", myself->pid, myself->ppid ?: 1);
@


1.72
log
@	Throughout, open console handles with sharing for reading and writing.
	* dcrt0.cc (insert_file): Open file with full sharing allowed.
	* hookapi.cc (find_first_notloaded_dll): Ditto.
	* spawn.cc (av::fixup): Ditto.
@
text
@d4 1
a4 1
   2006, 2007, 2008, 2009 Red Hat, Inc.
@


1.71
log
@	* dcrt0.cc (dll_crt0_1): Call strace.dll_info after call to pinfo_init.
	* strace.cc (strace::hello): Drop printing DLL information here since
	application info is not always available at this point.
	(strace::dll_info): New method to print DLL info.
	* include/sys/strace.h (strace::dll_info): Declare.
@
text
@d262 1
a262 1
				 FILE_SHARE_WRITE | FILE_SHARE_WRITE,
@


1.70
log
@* strace.cc (strace::vprntf): Avoid closing unopened handle.
@
text
@d60 12
a78 4
      prntf (1, NULL, "OS version:   Windows %s", wincap.osname ());
      if (cygheap)
	prntf (1, NULL, "Heap size:    %u", cygheap->user_heap.chunk);
      prntf (1, NULL, "**********************************************");
@


1.69
log
@Implement POSIX.1-2004 Monotonic Clock.
* hires.h: Change hires_us to hires_ns, with nanosecond resolution.
(hires_ns::primed_ft): Remove.
(hires_ns::nsecs): New prototype.
(hires_ns::usecs): Rewrite in terms of nsecs.
(hires_ns::resolution): New prototype.
* times.cc: Change hires_us to hires_ns.
(ntod): Declare.
(systime): Remove.
(hires_ns::prime): Increase resolution to nanoseconds.
(hires_ns::nsecs): Rename usecs to nsecs to reflect increased resolution.
Remove justdelta argument.
(hires_ns::resolution): New function.
(clock_gettime): Accept CLOCK_MONOTONIC.
Use EINVAL instead of ENOSYS per POSIX.1-2004.
(clock_getres): Ditto.
(clock_setres): Use EINVAL instead of ENOSYS to conform with other
implementations.
* strace.cc (strace::microseconds): Adjust for hires_ns.
* sysconf.cc (sca): Set _SC_MONOTONIC_CLOCK to _POSIX_MONOTONIC_CLOCK.
* include/cygwin/version.h (CYGWIN_VERSION_API_MINOR): Bump.
@
text
@d257 4
a260 2
	    WriteFile (h, buf, len, &done, 0);
	  CloseHandle (h);
@


1.68
log
@* environ.cc (regopt): Change the first argument to wide char string.
(environ_init): Accommodate change to the first argument of regopt.
* exception.cc (open_stackdumpfile): Accommodate change to the type of progname
in _pinfo.
* external.cc (fillout_pinfo): Ditto.
* fhandler_process.cc (format_process_winexename): Ditto.
(format_process_stat): Ditto.
* fork.cc (fork::parent): Ditto.
* pinfo.cc (pinfo_basic::pinfo_basic): Call GetModuleFileNameW instead of
GetModuleFileName.
(pinfo::thisproc): Accommodate change to the type of progname in _pinfo.
(pinfo_init): Ditto.
* pinfo.h (_pinfo): Change the type of progname to a wide char array.
* registry.h (reg_key::get_int): Change the first argument from constant point
to pointer to constant.
(reg_key::get_string): Ditto.  Change the last argument likewise.
* registry.cc (reg_key::get_int): Accommodate change to the declaration.
(reg_key::get_string): Ditto.
* strace.cc (strace::hello): Accommodate change to the type of progname in
_pinfo.
(strace::vsprntf): Ditto.
@
text
@d77 2
a78 2
  static hires_us now;
  return (int) now.usecs (true);
@


1.67
log
@* sigproc.cc (wait_sig): Make sure that strace is activated on __SIGSTRACE by
calling new strace::activate function.
* strace.cc (strace::activate): Rename from strace::strace.
* strace.h (strace::activate): Define new function.
(strace::strace): Call activate.
@
text
@d55 1
a55 1
	  GetModuleFileName (NULL, myself->progname, sizeof (myself->progname));
d59 1
a59 1
      prntf (1, NULL, "Program name: %s %s", myself->progname, pidbuf);
d138 1
a138 1
  __small_sprintf (fmt, "%7d [%s] %s ", microsec, tn, "%s %s%s");
d146 2
a147 1
      char *pn;
d149 1
a149 1
	pn = myself ? myself->progname : NULL;
d151 1
a151 3
	pn = __progname;
      else
	pn = NULL;
d153 1
a153 2
      char *p;
      char progname[NT_MAX_PATH];
d155 1
a155 1
	GetModuleFileName (NULL, pn = progname, sizeof (progname));
d158 1
a158 1
      else if ((p = strrchr (pn, '\\')) != NULL)
d160 1
a160 1
      else if ((p = strrchr (pn, '/')) != NULL)
d165 3
a167 3
	strcpy (progname, p);
      if ((p = strrchr (progname, '.')) != NULL
	  && ascii_strcasematch (p, ".exe"))
d171 1
a171 1
      count = __small_sprintf (buf, fmt, p && *p ? p : "?", mypid (tmpbuf),
@


1.66
log
@Consistently use va_end.

* external.cc (cygwin_internal): Use va_end.
* fork.cc (child_copy): Likewise.
* libc/bsdlib.cc (warn, warnx, err, errx): Likewise.
* pinfo.cc (commune_request): Likewise.
* strace.cc (strace::prntf, strace_printf): Likewise.
@
text
@d34 2
a35 1
strace::strace ()
@


1.65
log
@Remove unneeded header files from source files throughout.  Update copyrights
where appropriate.
* globals.cc: New file for generic global variables.
* mkglobals_h: New file to generate globals.h.
* mkstatic: New Script used to build a (currently non-working) static
libcygwin_s.a.
* Makefile.in: Add unused rule to build a non-working libcygwin_s.a.
(DLL_OFILES): Add globals.o.  Make all objects rely on globals.h.
(globals.h): New target.  Generate globals.h.
* cygtls.h: Honor new CYGTLS_HANDLE define to control when the HANDLE operator
is allowed in _cygtls.
* dcrt0.cc: Move most globals to globals.cc.
* init.cc: Ditto.
* environ.cc (strip_title_path): Remove now-unneeded extern.
* fhandler_serial.cc (fhandler_serial::open): Ditto.
* pinfo.cc: Ditto.
(commune_process): Ditto.
* shared.cc: Ditto.
* glob.cc: Ditto.
* strace.cc: Ditto.
* exceptions.cc: Define CYGTLS_HANDLE before including winsup.h.
* path.cc (stat_suffixes): Move here.
* security.h: Add forward class path_conv declaration.
* smallprint.cc (__small_vsprintf): Make a true c++ function.
(__small_sprintf): Ditto.
(small_printf): Ditto.
(console_printf): Ditto.
(__small_vswprintf): Ditto.
(__small_swprintf): Ditto.
* spawn.cc (spawn_guts): Remove _stdcall decoration in favor of regparm.
(hExeced): Move to globals.cc
* strfuncs.cc (current_codepage): Ditto.
(active_codepage): Ditto.
* sync.cc (lock_process::locker): Move here from dcrt0.cc.
* syscalls.cc (stat_suffixes): Move to path.cc.
* tty.cc (tty::create_master): Uncapitalize fatal warning for consistency.
* winsup.h: Include globals.h to declare most of the grab bag list of globals
which were previously defined here.
* mount.h: Move USER_* defines back to shared_info.h.
* speclib: Force temporary directory cleanup.
@
text
@d277 1
d289 1
@


1.64
log
@* pinfo.cc (pinfo_basic): New class.
(pinfo_basic::pinfo_basic): Define constructor for new class.
(myself): Initialize from myself_initial.
(set_myself): Set pid and progname from already myself_initial.
* strace.cc (strace::strace): Split apart strace::hello.  Send notification to
strace as early as possible.
(strace::hello): Just send clause which describes the current process.  This
can now be preceded by early initialization strace output.
* include/sys/strace.h (strace::strace): Declare new constructor.
@
text
@d4 1
a4 1
   2006, 2007, 2008 Red Hat, Inc.
a123 2
extern "C" char *__progname;

@


1.63
log
@	* path.cc (symlink_info::check): Avoid special handling for
	STATUS_BUFFER_OVERFLOW when calling NtQueryDirectoryFile.
	* strace.cc (strace::vprntf): Use bigger buffer.
@
text
@d34 10
a46 7
  if (_active || !being_debugged ())
    return;

  char buf[30];
  __small_sprintf (buf, "cYg%8x %x", _STRACE_INTERFACE_ACTIVATE_ADDR, &_active);
  OutputDebugString (buf);

@


1.62
log
@Remove unneeded header files from source files throughout.
@
text
@d237 1
a237 1
  char buf[10000];
@


1.61
log
@	* Fix copyright dates.
@
text
@a12 2
#include <stdlib.h>
#include <time.h>
a19 2
#include "hires.h"
#include "security.h"
@


1.60
log
@	* cygheap.cc (cwcsdup): New function.
	(cwcsdup1): New function.
	* cygheap.h (cygheap_user::get_windows_id): New method returning PWCHAR.
	(cwcsdup): Declare.
	(cwcsdup1): Declare.
	* registry.cc (get_registry_hive_path): Use WCHAR instead of char
	throughout.
	(load_registry_hive): Ditto.
	* registry.h (get_registry_hive_path): Change declaration accordingly.
	(load_registry_hive): Ditto.
	* sec_helper.cc (cygpsid::string): New method returning PWCHAR.
	* security.h (cygpsid::string): Declare.
	* syscalls.cc (seteuid32): Convert local name var to WCHAR.
	* uinfo.cc (cygheap_user::env_userprofile): Convert local name buffers
	to WCHAR.  Call sys_wcstombs_alloc to generate puserprof buffer.

	* winsup.h: Fix comment.
	(NT_MAX_PATH): New definition for maximum internal path length.
	Use throughout where appropriate.
	* include/limits.h (PATH_MAX): Set to 4096 as on Linux.
@
text
@d4 1
a4 1
   2006 Red Hat, Inc.
@


1.59
log
@	* string.h: Re-enable inline strcasematch and strncasematch
	implementations and rename to ascii_strcasematch/ascii_strncasematch.
	* dcrt0.cc: Replace str[n]casematch with ascii_str[n]casematch where
	applicable.
	* environ.cc: Ditto.
	* fhandler_process.cc: Ditto.
	* hookapi.cc: Ditto.
	* path.cc: Ditto.
	* spawn.cc: Ditto.
	* strace.cc: Ditto.
	* syscalls.cc: Ditto.
	* uinfo.cc: Ditto.
	* winf.cc: Ditto.
@
text
@d157 1
a157 1
      char progname[PATH_MAX];
@


1.58
log
@	* dcrt0.cc (initial_env): Use PATH_MAX instead of CYG_MAX_PATH for path
	name buffer size.
	(dll_crt0_1): Allocate new_argv0 with PATH_MAX size.
	* exceptions.cc (debugger_command): Set size to 2 * PATH_MAX + 20;
	(error_start_init): Use PATH_MAX instead of CYG_MAX_PATH for path
	name buffer size.
	* external.cc (fillout_pinfo): Always fill out ep.progname 0-terminated.
	Fill out ep.progname_long.
	* fhandler_process.cc (fhandler_process::fill_filebuf): Allocate
	buffer for executable filename with PATH_MAX size.
	* pinfo.cc: Throughout use PATH_MAX instead of CYG_MAX_PATH.
	* pinfo.h (class _pinfo): Set progname size to PATH_MAX.
	* smallprint.cc: Include limits.h.  Use PATH_MAX instead of CYG_MAX_PATH
	for path name buffer size.
	* strace.cc (strace::vsprntf): Ditto.
	* include/sys/cygwin.h (EXTERNAL_PINFO_VERSION_32_LP): Define.
	(EXTERNAL_PINFO_VERSION): Set to EXTERNAL_PINFO_VERSION_32_LP.
	(struct external_pinfo): Add progname_long member.
	* include/sys/dirent.h: Correctly include limits.h instead of
	sys/limits.h.
@
text
@d170 2
a171 1
      if ((p = strrchr (progname, '.')) != NULL && strcasematch (p, ".exe"))
@


1.57
log
@add copyright
@
text
@d157 1
a157 1
      char progname[CYG_MAX_PATH];
@


1.56
log
@* cygtls.cc (_cygtls::remove): Remove left over debugging cruft which caused
this function to always return prematurely.
@
text
@d3 2
a4 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
@


1.55
log
@*** cygwin DLL Changes:
* child_info.h (CURR_CHILD_INFO_MAGIC): Reset.
(child_info::dwProcessId): Delete.
(child_info::straced): New variable.
(child_info::handle_fork): New member function.
* dcrt0.cc (in_forkee): New global variable.
(__cygwin_user_data::forkee): Mark as obsolete.
(do_global_ctors): Use in_forkee rather than user_data->forkee.
(get_cygwin_startup_info): Ditto.  Deal with new straced field to allow strace
to deal with children of attached processes.
(initial_env): Accommodate changes to strace::hello.
(child_info_fork::handle_fork): Rename from plain old 'handle_fork'.  Move
alloc_stack() call elsewhere.
(dll_crt0_0): Fill out more of user_data.  Reference handle_fork via fork_info.
Add some debugging output.
(_dll_crt0): Don't wait for sync thread if sync_startup is invalid.  Zero
sync_startup here.  Call alloc_stack() here, if appropriate.
(dll_crt0_1): Use in_forkee rather than user_data->forkee.
(dll_crt0): Ditto.
* malloc_wrapper.cc (malloc_init): Ditto.
* dll_init.cc (in_forkee): Remove local static version of this variable.
(dll_list::load_after_fork): Don't set in_forkee here.
* external.cc (cygwin_internal): Use strace method rather than accessing field
directly.
* fhandler.cc (fhandler_base::read): Ditto.
* fhandler_tty.cc (fhandler_tty_common::__acquire_output_mutex): Ditto.
* fork.cc (frok::parent): Invoke strace write_childpid to communicate with
potential strace.
(child_copy): Add more detail to debugging output.
* init.cc (calibration_id): New static variable.
(prime_threads): Set sync_startup to invalid handle if we already know about
thread_func_ix.  Use static calibration_id to hold calibration thread id.
* munge_threadfunc (munge_threadfunc): Don't try to debug if we don't find
threadfunc_ix.
(dll_entry): Avoid calling munge_threadfunc and _cygtls::remove on non-cygwin
threads invoked during process startup.
* pinfo.cc (set_myself): Always call strace.hello here regardless of DEBUGGING.
* sigproc.cc (child_info::child_info): Remove spurious handling of dwProcessId.
Set straced as appropriate.
* spawn.cc (spawn_guts): Rename ciresrv to ch.  Invoke strace write_childpid to
communicate with potential strace.
* strace.cc: Include child_info.h.
(strace::hello): Remove inited test.  Use active() method to test if strace has
been activated.  Handle case where we are started before
(mypid): New function.
(strace::vsprntf): Try to deal more intelligently with case where progname may
not be filled out.  Put pid in parentheses if it is a windows pid rather than a
cygwin pid.  myself has been filled out.
(strace::write_childpid): New function for notifying strace about the creation
of children.
(strace::vprntf): Use strace method rather than accessing field directly.
(strace_printf): Ditto.
(strace::wm): Ditto.
* winsup.h (in_forkee): Declare.
* include/sys/strace.h (strace::write_childpid): Declare new function.
(strace::attached): Define new function.
(strace::active): Ditto.
(strace::active_val): Ditto.
(_STRACE_ON): Delete.
(_STRACE_OFF): Ditto.
(define_strace0): Use strace method rather than accessing field directly.
(strace_printf_wrap): Ditto.
(strace_printf_wrap1): Ditto.

*** cygwin utils changes:
* strace.cc (nprocesses): Make static global.
(quiet): New variable.
(strace_active): Ditto.
(add_child): Increment nprocesses here.  Don't add a child if it is already
added (windows bug?).  Report on child if not quiet.
(get_child): Just return NULL if child not found.
(remove_child): Report on child if not quiet.
(attach_process): Don't complain if given a windows process.  Use windows pid
in error.
(handle_output_debug_string): Issue error if trying to manipulate a process
that we don't know about.  Handle _STRACE_CHILD_PID - attach to reported child
when we get this.
(proc_child): Move nprocesses to file scope.  Report on exceptions.
(longopts): Implement "--quiet".
(opts): Implement "-q".
(main): Manipulate quiet flag.
* utils.sgml (strace): Add words describing '-q'.
@
text
@a225 1
int res =
a226 1
do { if ((0x00040 & 0x08000) || active ()) prntf (0x00040, __PRETTY_FUNCTION__, "res %d", res); } while (0);
@


1.54
log
@* dcrt0.cc (__api_fatal): Simplify to just use strace mechamisms.
(do_exit): Move minimal_printf...
* pinfo.cc (pinfo::exit): ...into here.
* strace.cc (strace::vprntf): Guarantee output to the console when
system_printf/api_fatal.
* heap.cc (heap_init): Wait a second before issuing an error when
ERROR_INVALID_ADDRESS since this is probably due to a CTRL-C handler sneaking
in, using the memory that we want to use for the heap, and, eventually exiting.
@
text
@d28 1
d40 1
a40 10
  char buf[30];

  if (inited)
    {
      active ^= 1;
      return;
    }

  inited = 1;
  if (!being_debugged ())
d43 2
a44 1
  __small_sprintf (buf, "cYg%8x %x", _STRACE_INTERFACE_ACTIVATE_ADDR, &active);
d47 1
a47 1
  if (active)
d49 8
d58 1
a58 3
      prntf (1, NULL, "Program name: %s (pid %d, ppid %d)", myself->progname,
	     myself->pid ?: GetCurrentProcessId (),
	     myself->ppid ?: 1);
d67 2
a68 1
      prntf (1, NULL, "Heap size:    %u", cygheap->user_heap.chunk);
d114 10
a134 1
  char *pn = __progname ?: (myself ? myself->progname : NULL);
d139 1
a139 1
  __small_sprintf (fmt, "%7d [%s] %s ", microsec, tn, "%s %d%s");
d147 10
a156 1
      char *p, progname[CYG_MAX_PATH];
d158 3
a160 1
	p = (char *) "*** unknown ***";
d167 2
a168 1
      strcpy (progname, p);
d172 2
a173 2
      count = __small_sprintf (buf, fmt, p && *p ? p : "?",
			      (myself && myself->pid) ? myself->pid : GetCurrentProcessId (),
d219 14
d267 1
a267 1
  if (active)
d287 1
a287 1
  if ((category & _STRACE_SYSTEM) || strace.active)
d455 1
a455 1
  if (active)
@


1.53
log
@* strace.cc (strace::vsprntf): Avoid printing a zero pid.
@
text
@d205 1
a205 1
  int count;
d211 1
a211 1
  count = vsprntf (buf, func, fmt, ap);
d216 1
a216 1
      WriteFile (GetStdHandle (STD_ERROR_HANDLE), buf, count, &done, 0);
d218 11
d233 1
a233 1
    write (category, buf, count);
@


1.52
log
@* strace.cc (strace::vsprntf): Avoid accessing myself->pid if !myself.
@
text
@d152 1
a152 1
			      myself ? myself->pid : GetCurrentProcessId (),
@


1.51
log
@white space and minor comment cleanup.
@
text
@d152 1
a152 1
			      myself->pid ?: GetCurrentProcessId (),
@


1.50
log
@* fhandler.cc (fhandler_base::read): Remove unused signal state tweaks.
* fhandler.h (fhandler_pipe::create_selectable): Declare.
(fhandler_fifo::close_one_end): Declare.
* fhandler_fifo.cc (fhandler_fifo::close_one_end): Define.
(fhandler_fifo::open_not_mine): Use close_one_end to close appropriate end of
pipe.
* pinfo.cc (_pinfo::commune_recv): Ditto.
* pipe.cc (fhandler_pipe::create_selectable): Rename from
create_selectable_pipe.  Reorganize.
(fhandler_pipe::create): Use create_selectable.
@
text
@d152 1
a152 1
                              myself->pid ?: GetCurrentProcessId (),
@


1.49
log
@	Unify usage of CYG_MAX_PATH throughout.  Change buffers from
	size CYG_MAX_PATH + 1 to CYG_MAX_PATH.  Change length tests
	accordingly.
@
text
@d57 3
a59 1
      prntf (1, NULL, "Program name: %s (%d)", myself->progname, myself->pid ?: GetCurrentProcessId ());
@


1.48
log
@Reorganize header file inclusion throughout so that cygerrno.h comes first.
* fhandler.h (select_record::thread_errno): Save any encountered errno here.
(select_record::set_select_errno): New function.
(select_record::saw_error): New function.
(select_record::select_record): Initialize thread_errno to zero.
* select.cc (set_handle_or_return_if_not_open): Set thread_errno on failure.
(select_stuff::wait): Record errno for later resurrection in calling thread.
(peek_serial): Ditto.
@
text
@d136 1
a136 1
      char *p, progname[CYG_MAX_PATH + 1];
@


1.47
log
@revert previous erroneous checkin.
@
text
@d17 1
a26 1
#include "cygerrno.h"
@


1.46
log
@* pinfo.h (_pinfo::set_exit_state): Declare new function.
(pinfo::exit): Move here from _pinfo::exit.
* sigproc.cc (child_info::sync): Use new function to set exitcode and
process_state.
* pinfo.cc (_pinfo::exit): Ditto.
(proc_waiter): Ditto.
(_pinfo::set_exit_state): Define new function.
(_pinfo::dup_proc_pipe): Close handle when there is no parent process around to
care about the exit value.
* dcrt0.cc (dll_crt0_0): Move subproc_ready synchronization later to make sure
that myself is still mapped in parent.
(do_exit): Reflect movement to pinfo::exit.
(__api_fatal): Ditto.
* exceptions.cc (signal_exit): Ditto.
* errno.cc (errmap): Map PROC_NOT_FOUND.
* init.cc (dll_entry): Release myself before exiting.
* sigproc.cc (proc_can_be_signalled): Set errno appropriately.
(sig_send): Ditto.  Also remove ill-advised test for !myself->sendsig since
this is an indication of a process which is still initializating -- it is not
an error.
(child_info::sync): Don't set exitcode here.  Assume that will happen in
proc_waiter, if necessary.
* spawn.cc (spawn_guts): Delay "wait_for_myself" logic until later.  Don't wait
at all if the process has already exited.  Reflect movement to pinfo::exit.
@
text
@d128 1
a128 1
  __small_sprintf (fmt, "%7d [%s] %s ", microsec, tn, "%s %d/%d%s");
d150 1
a150 1
			       myself->pid ?: GetCurrentProcessId (), GetCurrentProcessId (),
@


1.45
log
@Change use of BOOL, TRUE, FALSE to bool, true, false, as appropriate,
throughout.
* tty.cc (tty::common_init): Remove call to SetKernelObjectSecurity and edit
some comments.
* cygheap.h (init_cygheap::ctty): Add new element.
* devices.in (device::parse): Remove special handling for /dev/tty.
* devices.cc: Regenerate.
* dtable.cc (build_fh_pc): Don't reset /dev/tty device.  Let the device opener
do that.
* fhandler_termios.cc (tty_min::set_ctty): Redefine to _pinfo class.
* fhandler_tty.cc (fhandler_tty_common::set_close_on_exec): Avoid setting
noninherit flag for ctty.
* tty.h: Move BOOLs to bools.
(tty_min::set_ctty): Redeclare to _pinfo class.
* pinfo.cc (_pinfo::set_ctty): Define new function based on tty_min::set_ctty.
Change first argument from tty number to tty_min class.
* pinfo.h (_pinfo::set_ctty): Declare.
* fhandler_console.cc (fhandler_console::get_tty_stuff): Reflect move of
set_ctty to _pinfo class.
* fhandler_tty.cc (fhandler_tty_slave::open): Treat FH_TTY specially.  Use
saved cygheap value if it exists.  Otherwise convert to real device and save on
first time open.
(fhandler_tty_common::dup): Potentially set controlling tty if duping a slave
tty.
* syscalls.cc (setsid): Close controlling tty in cygheap.
* tty.cc: Change some BOOLs to bools.
@
text
@d128 1
a128 1
  __small_sprintf (fmt, "%7d [%s] %s ", microsec, tn, "%s %d%s");
d150 1
a150 1
			       myself->pid ?: GetCurrentProcessId (),
@


1.44
log
@2003-11-11  Robert Collins <rbtcollins@@hotmail.com>
	    Ron Parker <rdparker@@butlermfg.com>

	* bsdlib.cc: Update throughout to use CYG_MAX_PATH rather than MAX_PATH.
	* cygheap.h: Ditto.
	* dcrt0.cc: Ditto.
	* delqueue.cc: Ditto.
	* dlfcn.cc: Ditto.
	* dll_init.cc: Ditto.
	* dll_init.h: Ditto.
	* dtable.cc: Ditto.
	* environ.cc: Ditto.
	* environ.h: Ditto.
	* exceptions.cc: Ditto.
	* external.cc: Ditto.
	* fhandler_disk_file.cc: Ditto.
	* fhandler_proc.cc: Ditto.
	* fhandler_process.cc: Ditto.
	* fhandler_raw.cc: Ditto.
	* fhandler_registry.cc: Ditto.
	* fhandler_socket.cc: Ditto.
	* fhandler_virtual.cc: Ditto.
	* miscfuncs.cc: Ditto.
	* mmap.cc: Ditto.
	* netdb.cc: Ditto.
	* path.cc: Ditto.
	* path.h: Ditto.
	* pinfo.cc: Ditto.
	* pinfo.h: Ditto.
	* pthread.cc: Ditto.
	* registry.cc: Ditto.
	* shared.cc: Ditto.
	* shared_info.h: Ditto.
	* smallprint.c: Ditto.
	* spawn.cc: Ditto.
	* strace.cc: Ditto.
	* syscalls.cc: Ditto.
	* thread.h: Ditto.
	* uinfo.cc: Ditto.
	* winsup.h: Ditto.
	* include/limits.h: Ditto.
	* include/cygwin/config.h: Ditto.
	* include/sys/param.h: Ditto.
@
text
@d120 1
a120 1
  static NO_COPY int nonewline = FALSE;
d166 1
a166 1
	   nonewline = TRUE;
d175 1
a175 1
  nonewline = FALSE;
@


1.43
log
@* devices.cc: New file.
* devices.gperf: New file.
* devices.shilka: New file.
* cygwin-gperf: New file.
* cygwin-shilka: New file.
* fhandler_fifo.cc: New file.
* fhandler_nodevice.cc : New file.  Reorganize headers so that path.h precedes
fhandler.h throughout.  Remove device argument and unit arguments from fhandler
constructors throughout.  Remove pc arguments to fhandler functions and use
internal pc element instead, throughout.  Use dev element in pc throughout.
Use major/minor elements rather than units and device numbers previously in
fhandler class.  Use correct methods for fhandler file names rather than
directly accessing file name variables, throughout.
* Makefile.in (DLL_OFILES): Add devices.o, fhandler_fifo.o
* dcrt0.cc (dll_crt0_1): Call device::init.
* devices.h: Renumber devices based on more Linux-like major/minor numbers.
Add more devices.  Declare standard device storage.
(device): Declare struct.
* dir.cc (opendir): Use new 'build_fh_name' to construct a fhandler_* type.
* dtable.cc (dtable::get_debugger_info): Ditto.
(cygwin_attach_handle_to_fd): Ditto.
(dtable::release): Remove special FH_SOCKET case in favor of generic
"need_fixup_before" test.
(dtable::init_std_file_from_handle): Use either build_fh_dev or build_fh_name
to build standard fhandler.
(dtable::build_fh_name): Renamed from dtable::build_fhandler_from_name.  Move
out of dtable class.  Don't accept a path_conv argument.  Just build it here
and pass it to:
(build_fh_pc): Renamed from dtable::build_fhandler.  Move out of dtable class.
Use intrinsic device type in path_conv to create new fhandler.
(build_fh_dev): Renamed from dtable::build_fhandler.  Move out of dtable class.
Simplify arguments to just take new 'device' type and a name.  Just return
pointer to fhandler rather than trying to insert into dtable.
(dtable::dup_worker): Accommodate above build_fh name changes.
(dtable::find_fifo): New (currently broken) function.
(handle_to_fn): Use strechr for efficiency.
* dtable.h: Reflect above build_fh name changes and argument differences.
(fhandler_base *&operator []): Return self rather than copy of self.
* fhandler.cc (fhandler_base::operator =): Use pc element to set normalized
path.
(fhandler_base::set_name): Ditto.
(fhandler_base::raw_read): Use method to access name.
(fhandler_base::write): Correctly use get_output_handle rather than get_handle.
(handler_base::device_access_denied): New function.
(fhandler_base::open): Eliminate pc argument and use pc element of
fhandler_base throughout.
(fhandler_base::fstat): Detect if device is based in filesystem and use
fstat_fs to calculate stat, if so.
(fhandler_base::fhandler_base): Eliminate handling of file names and, instead,
just free appropriate component from pc.
(fhandler_base::opendir): Remove path_conv parameter.
* fhandler.h: Remove all device flags.
(fhandler_base::pc): New element.
(fhandler_base::set_name): Change argument to path_conv.
(fhandler_base::error): New function.
(fhandler_base::exists): New function.
(fhandler_base::pc_binmode): New function.
(fhandler_base::dev): New function.
(fhandler_base::open_fs): New function.
(fhandler_base::fstat_fs): New function.
(fhandler_base::fstat_by_name): New function.
(fhandler_base::fstat_by_handle): New function.
(fhandler_base::isfifo): New function.
(fhandler_base::is_slow): New function.
(fhandler_base::is_auto_device): New function.
(fhandler_base::is_fs_special): New function.
(fhandler_base::device_access_denied): New function.
(fhandler_base::operator DWORD&): New operator.
(fhandler_base::get_name): Return normalized path from pc.
(fhandler_base::get_win32_name): Return windows path from pc.
(fhandler_base::isdevice): Renamed from is_device.
(fhandler_base::get_native_name): Return device format.
(fhandler_fifo): New class.
(fhandler_nodevice): New class.
(select_stuff::device_specific): Remove array.
(select_stuff::device_specific_pipe): New class element.
(select_stuff::device_specific_socket): New class element.
(select_stuff::device_specific_serial): New class element.
(select_stuff::select_stuff): Initialize new elements.
* fhandler_disk_file.cc (fhandler_base::fstat_by_handle): Move to base class
from fhandler_disk_file.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_base::fstat_by_name): Ditto.
(fhandler_disk_file::open): Move most functionality into
fhandler_base::open_fs.
(fhandler_base::open_fs): New function.
(fhandler_disk_file::close): Move most functionality into
fhandler_base::close_fs.
(fhandler_base::close_fs): New function.
* fhandler_mem.cc (fhandler_dev_mem::open): Use device name in debugging
output.
* fhandler_socket.cc (fhandler_socket::set_connect_secret): Copy standard
urandom device into appropriate place.
(fhandler_socket::accept): Reflect change in fdsock return value.
* fhandler_tty.cc: See "throughouts" above.
* net.cc: Accommodate fdsock change throughout.
(fdsock): Return success or failure, accept fd argument and device argument.
* path.cc (symlink_info::major): New element.
(symlink_info::minor): New element.
(symlink_info::parse_device): Declare new function.
(fs_info::update): Accommodate changes in path_conv class.
(path_conv::fillin): Ditto.
(path_conv::return_and_clear_normalized_path): Eliminate.
(path_conv::set_normalized_path): New function.
(path_conv::path_conv): Set info in dev element.  Use path_conv methods Check
for FH_FS rather than FH_BAD to indicate when to fill in filesystem stuff.
where appropriate rather than direct access.  Use set_normalized_path to set
normalized path.
(windows_device_names): Eliminate.
(get_dev): Ditto.
(get_raw_device_number): Ditto.
(get_device_number): Ditto.
(win32_device_name): Call new device name parser to do most of the heavy
lifting.
(mount_info::conv_to_win32_path): Fill in dev field as appropriate.
(symlink_worker): Handle new device files.
(symlink_info::check): Ditto.
(symlink_info::parse_device): Define new function.
* path.h (executable_states): Move here from fhandler.h.
(fs_info): Rename variables to *_storage and create methods for accessing same.
(path_conv): Add dev element, remove devn and unit and adjust inline methods to
accommodate.
(set_normalized_path): Declare new function.
* pinfo.cc (_pinfo::commune_recv): Add broken support for handling fifos.
(_pinfo::commune_send): Ditto.
* pipe.cc (fhandler_pipe::close): check for existence of handle before closing
it.
(handler_pipe::create): Rename from make_pipe.  Change arguments to accept
fhandler_pipe array.  Accommodate fifos.
(pipe): Rework to deal with fhandler_pipe::create changes.
(_pipe): Ditto.
* select.cc: Use individual device_specific types throughout rather than
indexing with obsolete device number.
(set_bits): Use is_socket call rather than checking device number.
* shared_info.h (CURR_MOUNT_MAGIC): Update.
(conv_to_win32_path): Reflect addition of device argument.
* syscalls.cc (mknod_worker): New function.
(open): Use build_fh_name to build fhandler.
(chown_worker): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(chmod_device): New function.
(chmod): Detect if this is an 'auto' device rather than an on-filesystem device
and handle appropriately.  Use chmod_device to set mode of in-filesystem
devices.
(stat_worker): Eliminate path_conv argument.  Call build_fh_name to construct
fhandler.  Use fh->error() rather than pc->error to detect errors in fhandler
construction.
(access_worker): New function pulled from access.  Accommodate in-filesystem
devices.
(access): Use access_worker.
(fpathconf): Detect if this is an 'auto' device rather than an on-filesystem
device and handle appropriately.
(mknod_worker): New function.
(mknod32): New function.
(chroot): Free normalized path -- assuming it was actually cmalloced.
* tty.cc (create_tty_master): Tweak for new device class.
(tty::common_init): Ditto.
* winsup.h (stat_worker): Remove.
(symlink_worker): Declare.
* exceptions.cc (set_process_mask): Just call sig_dispatch_pending and don't
worry about pending_signals since sig_dispatch_pending should always do the
right thing now.
(sig_handle): Reorganize SIGCONT handling to more closely conform to SUSv3.
* pinfo.h: Move __SIG enum to sigproc.h.
(PICOM_FIFO): New enum element.
(_pinfo): Remove 'thread2signal' stuff throughout class.
(_pinfo::commune_send): Make varargs.
(_pinfo::sigtodo): Eliminate.
(_pinfo::thread2signal): Ditto.
* signal.cc (kill_worker): Eliminate call to setthread2signal.
* sigproc.cc (local_sigtodo): Eliminate.
(getlocal_sigtodo): Ditto.
(sigelem): New class.
(pending_signals): New class.
(sigqueue): New variable, start of sigqueue linked list.
(sigcatch_nonmain): Eliminate.
(sigcatch_main): Eliminate.
(sigcatch_nosync): Eliminate.
(sigcomplete_nonmain): Eliminate.
(pending_signals): Eliminate.
(sig_clear): Call signal thread to clear pending signals, unless already in
signal thread.
(sigpending): Call signal thread to get pending signals.
(sig_dispatch_pending): Eliminate use of pending_signals and just check
sigqueue.
(sigproc_terminate): Eliminate all of the obsolete semaphore stuff.  Close
signal pipe handle.
(sig_send): Eliminate all of the obsolete semaphore stuff and use pipe to send
signals.
(getevent): Eliminate.
(pending_signals::add): New function.
(pending_signals::del): New function.
(pending_signals::next): New function.
(wait_sig): Eliminate all of the obsolete semaphore stuff.  Use pipe to
communicate and maintain a linked list of signals.
* sigproc.h: Move __SIG defines here.  Add __SIGPENDING.
(sig_dispatch_pending): Remove "C" specifier.
(sig_handle): Accept a mask argument.
* thread.cc: Remove signal handling considerations throughout.
@
text
@d136 1
a136 1
      char *p, progname[MAX_PATH + 1];
@


1.42
log
@Throughout, remove "include <errno.h>" from files which already include
cygerrno.h.
* include/cygwin/config.h (__DYNAMIC_REENT__): Define.
* include/cygwin/version.h: Bump API minor version.
* cygwin.din: Export __getreent
* cygerrno.h: Include errno.h.  Fix places where _impure_ptr is used directly
to store the errno value.
* debug.cc (__set_errno): Ditto.
* errno.cc: Remove _RRENT_ONLY define to get errno.cc compiled.
* signal.cc: Rename _reent_clib to _REENT throughout.
* thread.h (reent_clib): Remove prototype.
* thread.cc (reent_clib): Rename reent_clib to __getreent.  Return _impure_ptr
until MTinterface is initialized.
(reent_winsup): Fix a possible SEGV when _r == NULL.  Return NULL instead.
* MTinterface::fixup_after_fork: Switch reent back to _impure_ptr to keep
signal handling running when fork is called from a thread other than the
mainthread.
@
text
@d23 1
a24 1
#include "path.h"
@


1.41
log
@Eliminate most unneeded this-> pointers throughout.
@
text
@a16 1
#include <errno.h>
@


1.40
log
@* cygheap.cc (cygheap_fixup_in_child): Use user_heap element in cygheap.
(init_cheap): Ditto for declaration.
* fork.cc (fork_parent): Use user_heap element in cygheap.
* heap.h (inheap): Ditto.
* heap.cc (sbrk): Ditto.
(heap_init): Ditto.  Reorganize to shrink heap chunk as required and record new
value in cygheap.
* dcrt0.cc (dll_crt0_1): More "move the cygthread init" games.
* shared.cc (open_shared): Rework memory protection to properly deal with
relocated shared segment.
(shared_info::heap_chunk_size): Rename element to 'heap_chunk'.
* shared_info.h (shared_info): Ditto for declaration.
* strace.cc (strace::hello): Report on heap chunk size from cygheap since it
may shrink.
@
text
@d210 1
a210 1
  count = this->vsprntf (buf, func, fmt, ap);
d221 1
a221 1
    this->write (category, buf, count);
d232 1
a232 1
  this->vprntf (category, func, fmt, ap);
d416 1
a416 1
	      this->prntf (_STRACE_WM, NULL, "wndproc %d %s %d %d", message, ta[i].n, word, lon);
d420 1
a420 1
      this->prntf (_STRACE_WM, NULL, "wndproc %d unknown  %d %d", message, word, lon);
@


1.40.12.1
log
@merge from trunk
@
text
@d210 1
a210 1
  count = vsprntf (buf, func, fmt, ap);
d221 1
a221 1
    write (category, buf, count);
d232 1
a232 1
  vprntf (category, func, fmt, ap);
d416 1
a416 1
	      prntf (_STRACE_WM, NULL, "wndproc %d %s %d %d", message, ta[i].n, word, lon);
d420 1
a420 1
      prntf (_STRACE_WM, NULL, "wndproc %d unknown  %d %d", message, word, lon);
@


1.40.12.2
log
@merge from trunk.
Reorganize includes throughout so that path.h comes before fhandler.h.
Eliminate path_conv arguments from fhandler functions which take them,
throughout.  Use get_name() and get_win32_name() consistently throughout for
fhandler objects.  Use build_fh_* functions throughout, where appropriate.
* fhandler.h (fhandler_base): Store path_conv struct here.  Remove dev.
* dtable.h (dtable::build_fhandler_*): Remove.
(build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* dtable.cc (build_fh_dev): New.
(build_fh_pc): New.
(build_fh_name): New.
* fhandler.h (fhandler_base::set_name): Change argument.
* fhandler.cc (fhandler_base::set_name): Just accept a path_conv argument.
(executable_states): Move.
* path.h (executable_state): Accept.
* syscalls.cc (stat_worker): Make static.
* winsup.h (stat_worker): Remove definition.
@
text
@d24 1
a25 1
#include "fhandler.h"
@


1.40.12.3
log
@merge from trunk
@
text
@d17 1
@


1.39
log
@* fork.cc (fork_child): Move mmap initialization.
* shared.cc (shared_info::heap_chunk_size): Store info as megabytes.  Search
HKEY_LOCAL_MACHINE as well as HKEY_CURRENT_USER.
* shared_info.h (shared_info::initial_heap_size): Change element name to
reflect new functionality.
* strace.cc (strace::hello): Report on initial heap size.
@
text
@d17 1
d22 1
d24 5
a28 1
#include "shared_info.h"
d67 1
a67 1
      prntf (1, NULL, "Heap size:    %u", cygwin_shared->heap_chunk_size ());
@


1.38
log
@More GNUify non-GNU formatted functions calls throughout.
@
text
@d22 1
d61 1
@


1.37
log
@* fhandler.cc (fhandler_base::dup): Don't set handle on failure.  Caller has
already taken care of that.
* fhandler_console.cc (fhandler_console::open): Initialize handles to NULL.
(fhandler_console::close): Ditto.  GNUify non-GNU formatted functions calls
throughout.
@
text
@d23 2
a24 2
#define PROTECT(x) x[sizeof(x)-1] = 0
#define CHECK(x) if (x[sizeof(x)-1] != 0) { small_printf ("array bound exceeded %d\n", __LINE__); ExitProcess (1); }
d80 1
a80 1
    else if (isspace((int)pe[-1]))
@


1.36
log
@* cygthread.cc (cygthread::initialized): Avoid copying on fork or some threads
may not end up in the pool.
(cygthread::new): Avoid race when checking for initialized.  Add debugging
code.
* fhandler.cc (fhandler_base::raw_read): Add case for ERROR_INVALID_HANDLE due
to Win95 directories.
(fhandler_base::open): Handle errors due to Win95 directories.
(fhandler_base::close): Add get_nohandle () test.
(fhandler_base::set_close_on_exec): Ditto.
(fhandler_base::fork_fixup): Ditto.
(fhandler_base::lock): Change error code to Posix EINVAL.
(fhandler_base::dup): If get_nohandle (), set new value to INVALID_HANDLE_VALUE
instead of NULL.
* fhandler_disk_file.cc (fhandler_disk_file::fstat): Call fstat_by_name if
get_nohandle ().  Remove extraneous element from strpbrk.
(fhandler_disk_file::open): Remove test for Win95 directory.
* fhandler_random.cc (fhandler_dev_random::open): Add set_nohandle ().
* fhandler_clipboard.cc (fhandler_dev_clipboard::open): Ditto.
* fhandler_zero.cc (fhandler_dev_zero::open): Ditto.
(fhandler_dev_zero::close): Delete.
* fhandler.h (class fhandler_dev_zero): Ditto.
@
text
@d24 1
a24 1
#define CHECK(x) if (x[sizeof(x)-1] != 0) { small_printf("array bound exceeded %d\n", __LINE__); ExitProcess(1); }
d31 1
a31 1
strace::hello()
d199 1
a199 1
  PROTECT(buf);
d203 1
a203 1
  CHECK(buf);
@


1.35
log
@* Makefile.in (DLL_OFILES): Add cygthread.o.
* dcrt0.cc (dll_crt0_1): Eliminate various thread initialization functions in
favor of new cygthread class.
* debug.cc: Remove thread manipulation functions.
* debug.h: Ditto.
* external.cc (cygwin_internal): Use cygthread method for determining thread
name.  Remove capability for setting thread name.
* fhandler_console.cc (fhandler_console::read): Use cygthread method rather
than iscygthread function.
* fhandler_tty.cc (fhandler_tty_master::fhandler_tty_master): Use cygthread
methods to create threads.
(fhandler_tty_common::__acquire_output_mutex): Use cygthread method to retrieve
thread name.
* select.cc (pipeinf): Use cygthread pointer rather than handle.
(start_thread_pipe): Ditto.
(pipe_cleanup): Ditto.
(serialinf): Ditto.
(start_thread_serial): Ditto.
(serial_cleanup): Ditto.
(socketinf): Ditto.
(start_thread_socket): Ditto.
(socket_cleanup): Ditto.
* sigproc.cc (hwait_sig): Ditto.
(hwait_subproc): Ditto.
(proc_terminate): Ditto.
(sigproc_terminate): Ditto.
(sigproc_init): Initialize cygthread hwait_sig pointer.
(subproc_init): Initialize cygthread hwait_subproc pointer.
(wait_sig): Rely on cygthread HANDLE operator.
* strace.cc (strace::vsprntf): Use cygthread::name rather than threadname.
* window.cc (gethwnd): Use cygthread method to initialize thread.
@
text
@d116 1
a116 1
  char *pn = __progname ?: myself->progname;
@


1.34
log
@* dcrt0.cc (dll_crt0_1): Delay closing of some handles until cygheap has been
set up.
(break_here): New function, for debugging.
(initial_env): Add program name to "Sleeping" message.  Implement new
"CYGWIN_DEBUG" environment variable option.
* exceptions.cc (debugger_command): Add argument to dumper call.
* strace.cc (strace::hello): Use winpid if cygwin pid is unavailable.
(strace::vsprntf): Ditto.
@
text
@d21 1
d115 1
a115 1
  const char *tn = threadname (0);
@


1.33
log
@Use hMainProc where appropriate, throughout.
* environ.cc (spenv::retrieve): Add debugging statements.
* pinfo.cc (set_myself): Don't call strace.hello if already stracing.
* strace.cc (strace): Move NO_COPY keyword so that it will actually take
effect.
@
text
@d50 1
a50 1
      prntf (1, NULL, "Program name: %s (%d)", myself->progname, myself->pid);
d141 2
a142 1
      count = __small_sprintf (buf, fmt, p && *p ? p : "?", myself->pid,
@


1.32
log
@* autoload.cc (timeGetDevCaps): Define new autoload function.
(timeGetTime): Ditto.
(timeBeginPeriod): Ditto.
(timeEndPeriod): Ditto.
* hires.h (hires_base): New class.  Renamed from hires.
(hires_us): New class.
(hires_ms): New class.
* strace.cc (strace::microseconds): Use hires_us class.
* times.cc (gettimeofday): Use hires-ms class.
(hires_us::prime): Renamed from hires::prime.
(hires_us::usecs): Renamed from hires:usecs.
(hires_ms::prime): New method.
(hires_ms::usecs): New method.
(hires_ms::~hires_ms): New destructor.
@
text
@d25 1
a25 1
class NO_COPY strace strace;
@


1.31
log
@* strace.cc (strace::hello): Set inited, when appropriate.
@
text
@d66 1
a66 1
  static hires now;
@


1.30
log
@* dtable.cc (handle_to_fn): Attempt to handle "raw" accesses to remote shares.
* path.cc (mount_info::conv_to_win32_path): Set flags to binary when mount
entry is not found.
(mount_info::set_flags_from_win32_path): Ditto.
@
text
@d40 1
@


1.29
log
@Remove unneeded sigproc.h includes throughout.
* fhandler.h (fhandler_proc::fill_filebuf): Take a pinfo argument.
* fhandler_proc.cc (fhandler_proc::get_proc_fhandler): Simplify search for
given pid.
(fhandler_proc::readdir): Assume that pid exists if it shows up in the winpid
list.
* fhandler_process.cc (fhandler_process::open): Simplify search for given pid.
Call fill_filebuf with pinfo argument.
(fhandler_process::fill_filebuf): Pass pinfo here and assume that it exists.
* pinfo.h (pinfo::remember): Define differently if sigproc.h is not included.
* dll_init.cc (dll_list::detach): Don't run destructor on exit.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001 Red Hat, Inc.
@


1.28
log
@* debug.h (being_debugged): New macro.
* dtable.cc (dtable::extend): Use new macro.
* exceptions.cc (try_to_debug): Ditto.
* strace.cc (strace::hello): Only output debugging info when we think we're
being debugged.
@
text
@a16 1
#include "sigproc.h"
@


1.27
log
@Remove unneeded sync.h, where appropriate, throughout.  Remove unneeded heap.h,
where appropriate, throughout.  Remove unneeded exceptions.h, where
appropriate, throughout.  Remove unneeded perprocess.h, where appropriate,
throughout.
@
text
@d41 3
@


1.26
log
@remove obsolete comment.
@
text
@a16 1
#include "sync.h"
@


1.25
log
@* hires.h (hires::usecs): Rename from utime.  Accept an argument.
* strace.cc (strace::microseconds): Use hires class for calculating times.
* sync.h (new_muto): Use NO_COPY explicitly in declaration.
* times.cc (gettimeofday): Reflect change in usecs argument.
(hires::usecs): Ditto.  Changed name from utime.
* winsup.h (NO_COPY): Add nocommon attribute to force setting aside space for
variable.
* regcomp.c (REQUIRE): Add a void cast to bypass a warning.
@
text
@a28 3
/* 'twould be nice to declare this in winsup.h but winsup.h doesn't require
   stdarg.h, so we declare it here instead. */

@


1.24
log
@* exceptions.cc (unused_sig_wrapper): Eliminate unused parameter to asm.
* external.cc (cygwin_internal): Change CW_STRACE_ON to CW_STRACE_TOGGLE.
* strace.cc (strace::hello): Toggle strace on and off.
* sync.cc (muto::init): Renamed from constructor.
* sync.h (muto::new): Delete.
(muto::delete): Ditto.
(new_muto): Simplify.  Use muto.init for nearly everything.
* uinfo.cc (uinfo_init): Avoid closing a NULL handle.
* include/sys/cygwin.h (cygwin_getinfo_types): Rename CW_STRACE_OFF to
CW_STRACE_TOGGLE.  Delete CW_STRACE_OFF.
* include/sys/strace.h (strace): Add "inited" field.
@
text
@d22 1
d65 1
a65 1
strace::microseconds()
d67 2
a68 29
  static NO_COPY int first_microsec = 0;
  static NO_COPY long long hires_frequency = 0;
  static NO_COPY int hires_initted = 0;

  int microsec;

  if (!hires_initted)
    {
      hires_initted = 1;
      QueryPerformanceFrequency ((LARGE_INTEGER *) &hires_frequency);
      if (hires_frequency == 0)
	  hires_initted = 2;
    }
  if (hires_initted == 2)
    {
      int count = GetTickCount ();
      microsec = count * 1000;
    }
  else
    {
      long long thiscount;
      QueryPerformanceCounter ((LARGE_INTEGER *) &thiscount);
      thiscount = (long long) (((double) thiscount/(double) hires_frequency)
			       * 1000000.0);
      microsec = thiscount;
    }
  if (first_microsec == 0)
    first_microsec = microsec;
  return microsec - first_microsec;
@


1.23
log
@* external.cc (cygwin_internal): Initialize various internal settings if
required to allow use of some things from user loaded DLL.
(CW_STRACE_ON): Add new feature.
(CW_CYGWIN_PID_TO_WINPID): Ditto.
* pinfo.cc (set_myself): Call "strace.hello" to initiate possible strace
session.
(pinfo::init): Guard against dereferencing uninitialized myself.
* sigproc.cc (wait_sig): Call strace.hello() when __SIGTRACE "signal" received.
* strace.cc (strace::hello): New method.
* wincap.cc (wincapc::init): Avoid initializing if already initialized.
* wincap.h (wincapc::wincapc): New method.
* include/sys/cygwin.h: Add new CW_ enums.  Kludge typedefs of {g,u}id_t if
required.
* strace.h (strace::hello): Declare new method.
@
text
@d37 7
@


1.22
log
@* autoload.cc (wsock_init): Reorganize slightly to accomodate a new compiler.
@
text
@d20 2
d32 23
@


1.21
log
@forced commit
@
text
@d232 1
a232 1
static NO_COPY const struct tab
@


1.21.4.1
log
@Merged changes from HEAD
@
text
@d232 1
a232 1
static NO_COPY struct tab
@


1.21.4.2
log
@Merged changes from HEAD
@
text
@a19 3
#include "perprocess.h"
#include "cygwin_version.h"
#include "hires.h"
d31 2
a32 2
void
strace::hello()
d34 5
a38 1
  char buf[30];
d40 1
a40 1
  if (inited)
d42 4
a45 2
      active ^= 1;
      return;
d47 6
a52 5

  __small_sprintf (buf, "cYg%8x %x", _STRACE_INTERFACE_ACTIVATE_ADDR, &active);
  OutputDebugString (buf);

  if (active)
d54 5
a58 11
      prntf (1, NULL, "**********************************************");
      prntf (1, NULL, "Program name: %s (%d)", myself->progname, myself->pid);
      prntf (1, NULL, "App version:  %d.%d, api: %d.%d",
	     user_data->dll_major, user_data->dll_minor,
	     user_data->api_major, user_data->api_minor);
      prntf (1, NULL, "DLL version:  %d.%d, api: %d.%d",
	     cygwin_version.dll_major, cygwin_version.dll_minor,
	     cygwin_version.api_major, cygwin_version.api_minor);
      prntf (1, NULL, "DLL build:    %s", cygwin_version.dll_build_date);
      prntf (1, NULL, "OS version:   Windows %s", wincap.osname ());
      prntf (1, NULL, "**********************************************");
d60 3
a62 7
}

int
strace::microseconds ()
{
  static hires now;
  return (int) now.usecs (true);
@


1.21.4.3
log
@Merged changes from HEAD
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2002 Red Hat, Inc.
d17 2
d29 3
a44 4
  inited = 1;
  if (!being_debugged ())
    return;

d67 1
a67 1
  static hires_us now;
@


1.21.4.4
log
@Merged changes from HEAD
@
text
@d25 1
a25 1
class strace NO_COPY strace;
@


1.21.4.5
log
@Merged changes from HEAD
@
text
@d50 1
a50 1
      prntf (1, NULL, "Program name: %s (%d)", myself->progname, myself->pid ?: GetCurrentProcessId ());
d141 1
a141 2
      count = __small_sprintf (buf, fmt, p && *p ? p : "?",
			       myself->pid ?: GetCurrentProcessId (),
@


1.21.4.6
log
@Merged changes from HEAD
@
text
@a20 1
#include "cygthread.h"
d114 1
a114 1
  const char *tn = cygthread::name ();
@


1.21.4.7
log
@Merged changes from HEAD
@
text
@d116 1
a116 1
  char *pn = __progname ?: (myself ? myself->progname : NULL);
@


1.21.4.8
log
@Merged changes from HEAD
@
text
@d24 1
a24 1
#define CHECK(x) if (x[sizeof(x)-1] != 0) { small_printf ("array bound exceeded %d\n", __LINE__); ExitProcess (1); }
d31 1
a31 1
strace::hello ()
d199 1
a199 1
  PROTECT (buf);
d203 1
a203 1
  CHECK (buf);
@


1.20
log
@Update copyright.
@
text
@@


1.19
log
@        * strace.cc (strace::vprntf): Move prntf functionality to this function
        adding an va_list interface to strace.
        (strace::printf): Calls strace::vprntf now.
        (strace_printf): New function providing an extern "C" interface to
        trace output.
        * include/sys/strace.h: Make plain C clean.
        (class strace): Add `vprntf' method.
@
text
@d3 1
a3 1
   Copyright 1996, 1997, 1998, 1999, 2000 Cygnus Solutions.
@


1.18
log
@* exceptions.cc (signal_exit): Kill any executing child process if we're dying.
* path.h: Remove unneeded extern.
* spawn.cc (std_suffixes): Make static.  Don't set dwProcessId here since it
makes the process unsignalable.  Set strace flag that this is an execed process
stub.
* strace.cc (strace::vsprntf): Use strace flag to indicate when to visually
flag that this is an exec stub.
* include/sys/strace.h (strace): Add 'execing' flag.
@
text
@d186 1
a186 1
strace::prntf (unsigned category, const char *func, const char *fmt, ...)
a190 1
  va_list ap;
a194 1
  va_start (ap, fmt);
d209 21
@


1.17
log
@* sigproc.cc (proc_subproc): Remove unneeded test for correct process in
PROC_ADDCHILD.  Return 0 when terminated child has just been reparented.
(wait_subproc): Only send SIGCHLD when proc_subproc returns != 0.
* strace.cc (strace::vsprntf): Only strip .exe extension from program name.
@
text
@d136 2
a137 4
      count = __small_sprintf (buf, fmt, p && *p ? p : "?",
			       myself->pid,
			       myself->dwProcessId != GetCurrentProcessId ()
			       ? "!" : "");
d178 2
@


1.16
log
@* Makefile.in: Remove some obsolete stuff.
* dcrt0.cc (dll_crt0_1): Call signal_fixup_after_exec where appropriate.  Set
myself->uid from parent version.  Just use ThreadItem Init method.  Close or
store hexec_proc as appropriate.
(_dll_crt0): Store user_data->forkee here so that proper tests can be made
subsequently.
(do_exit): Remove hExeced stuff.
* environ.cc (environ_init): Accept environ count as well as environ pointer.
* environ.h: Reflect above change.
* pinfo.cc (pinfo_init): Ditto.  Accept environ count.
(fixup_in_spawned_child): Remove.
* spawn.cc (spawn_guts): Move signal code to dll_crt0_1.  Don't suspend execing
process since it is no longer necessary.  Store envc.
* exceptions.cc (signal_fixup_after_exec): New function.
(call_handler): Remove hExeced test.
* child_info.h (cygheap_exec_info): Store envc as well as envp.
(child_info_spawn): Store hexec_proc so that it can be closed in child.
* path.cc (normalize_posix_path): Avoid intermediate use of temporary cwd buf.
(normalize_win32_path): Ditto.
(cwdstuff::get_initial): Always set lock.
* sigproc.h: Remove hExeced.
* strace.cc (strace::vsprntf): Modify to accomodate for lack of hExeced.
* thread.cc (MTinterface::Init): Merge Init1 and ClearReent into this method.
(MTinterface::Init1): Eliminate.
(MTinterface::ClearReent): Eliminate.
* thread.h: Reflect above changes.
* include/sys/strace.h (strace): Make microseconds() public.  Make various
functions 'regparm', throughout.
* pinfo.h (_pinfo): Inline simple signal manipulation functions.  Requires
inclusion of thread.h which was removed from .cc files, where appropriate.
throughout.
* pinfo.cc: Eliminate signal manipulation functions.
(_pinfo::exit): Calculate total rusage for exiting process here.
* cygheap.cc (size2bucket): Eliminate.
(init_buckets): Ditto.
(_cmalloc): Calculate size and bits in a loop rather than going through a
function call.
(_crealloc): Use stored array index to calculate allocated size.
* spawn.cc (spawn_guts): Use _pinfo exit method to exit, calculating cpu usage.
@
text
@d133 1
a133 1
      if ((p = strrchr (progname, '.')) != NULL)
@


1.15
log
@* child_info: Bump child_info "version".
(child_info): Move some fields from child_info_spawn to here.
* cygheap.cc: Make cygheap pointers NOCOPY.
* dcrt0.cc (dll_crt0_1): Copy cygwin heap here regardless of whether we've been
forked or execed.
* dtable.cc (dtable::fixup_after_fork): Just release close-on-exec fds.
* exceptions.cc (stackdump): Respond to C warning.
* fork.cc: Reorganize to minimize stack copying.
(fork_child): New function.
(fork_parent): Ditto.
(sync_with_child): Don't suspend the forkee.
(sync_with_parent): Ditto.  Make into a function.
* heap.cc (heap_init): Add some debugging output.
* path.cc (path_conv::check): Add an assertion.
(has_suffix): Ditto.
* security.cc (get_pw_sid): Defend against NULL.
* sigproc.cc (proc_subproc): Fix debugging output.
(wait_sig): Ditto.
* strace.cc: Make statics NO_COPY throughout.
(strace::vsprntf): Defend against NULL.
@
text
@d137 3
a139 1
			       myself->pid, hExeced ? "!" : "");
@


1.14
log
@* fhandler.h (fhandler_base): Remove obsolete _rpos and _rsize elements.
* fhandler.cc (fhandler_base::open): Ditto.
* fhandler.cc (fhandler_base::fhandler_base): Ditto.
(fhandler_base::read): Ditto.  Add more debugging output.  Don't issue a \r
when \r\n detected.
* pipe.cc (make_pipe): Streamline slightly.  Make debug output more
interesting.
* strace.cc (strace::vsprintf): Use __progname where appropriate to distinguish
strace output when exec'ing.
@
text
@d24 1
a24 1
class strace NO_COPY strace;
d34 3
a36 3
  static int first_microsec = 0;
  static long long hires_frequency = 0;
  static int hires_initted = 0;
d107 1
a107 1
  static int nonewline = FALSE;
d124 3
a126 1
      if ((p = strrchr (pn, '\\')) != NULL)
d211 1
a211 1
static const struct tab
@


1.13
log
@Break out more header info into separate files.  Use appropriate header files
throughout.
* shared.h: Remove.
* cygwin_version.h: New file.
* delqueue.h: New file.
* environ.h: New file.
* host_dependent.h: New file.
* perprocess.h: New file.
* registry.h: New file.
* security.h: New file.
@
text
@d99 2
d110 1
d123 4
a126 2
      char *p, progname[sizeof (myself->progname)];
      if ((p = strrchr (myself->progname, '\\')) != NULL)
d129 1
a129 1
	p = myself->progname;
@


1.12
log
@* winsup.h: Eliminate inclusion of most of the cygwin .h files.  Use .h files
only in sources which require them.
* Makefile.in: Generate dependencies with -MD option.
@
text
@a203 5
void __stdcall
mark (const char *, int)
{
}

@


1.11
log
@* winsup.h: Split out dtable definitions into separate header file.
* dtable.h: New file.
* sigproc.h: Eliminate pinfo.h usage here.  Use it in source files that need
it.
@
text
@d17 2
@


1.10
log
@* strace.cc (strace::prntf): Make second argument the function name, rather
than use special format options.
(strace::vprntf): Ditto.
(getfunc): New function.
* include/sys/strace.h: Reflect above changes.
* smallprint.c (__small_vsprintf): Eliminate '%F' formatting.
* pinfo.cc (set_myself): Modify for new strace::prntf parameter.
* errno.cc (seterrno_from_win_error): Ditto.
* fhandler_tty.cc (fhandler_tty_common::__acquire_output_mutex): Ditto.
* fhandler_tty.cc (fhandler_tty_common::__release_output_mutex): Ditto.
@
text
@d17 1
@


1.9
log
@* winsup.h: take out protections of environ, errno, allow C use
* *.cc: put winsup.h before other headers (for __INSIDE_CYGWIN__);
use cur_environ() instead of just environ
* times.cc: remove import protections
* glob.c: add winsup.h
* localtime.c: ditto
* smallprint.c: ditto
* Makefile.in: don't __INSIDE_CYGWIN__ as it messes up profiling.
@
text
@d16 1
d62 34
d98 1
a98 1
strace::vsprntf (char *buf, const char *infmt, va_list ap)
d112 1
d114 1
a114 8
    {
      count = 0;
      if (strncmp (infmt, "%F: ", 4) == 0)
	{
	  infmt += 4;
	  (void) va_arg (ap, char *);
	}
    }
d128 2
d174 1
a174 1
strace::prntf (unsigned category, const char *fmt, ...)
d185 1
a185 1
  count = this->vsprntf (buf, fmt, ap);
d375 1
a375 1
	      this->prntf (_STRACE_WM, "wndproc %d %s %d %d", message, ta[i].n, word, lon);
d379 1
a379 1
      this->prntf (_STRACE_WM, "wndproc %d unknown  %d %d", message, word, lon);
@


1.8
log
@* strace.h: Add kludgy workarounds to avoid using deprecated methods for
variable argument macros when possible.
* sigproc.cc: Throughout, use sigproc_printf rather than sip_printf.
* strace.cc (strace::prntf): Remove 'active' check, since callers are supposed
to ensure this.
(__system_printf): Remove.  Subsumed by strace::prntf.
* winsup.h: Define "NEW_MACRO_VARARGS" to indicate when to use new macro
varargs capability.
@
text
@d11 1
a13 1
#include "winsup.h"
@


1.7
log
@* testsuite/winsup.api/winsup.exp: ignore stdout by default
* testsuite/winsup.api/crlf.c: non-verbose by default

* winsup.h: prune out windows headers we don't normally need
* assert.cc: add wingdi.h and winuser.h
* fhandler_console.cc: ditto
* fhandler_windows.cc: ditto
* select.cc: ditto
* spawn.cc: ditto
* strace.cc: ditto
* tty.cc: ditto
* window.cc: ditto
* hinfo.cc: add winsock.h
* syscalls.cc: add winnls.h
* uinfo.cc: ditto

* include/windows.h: optimize non-inclusion of repeat headers
@
text
@a19 1

d143 1
a143 1
strace::prntf (unsigned category, const char *fmt,...)
d146 11
a156 1
  if (active)
d158 4
a161 10
      int count;
      va_list ap;
      char buf[10000];

      PROTECT(buf);
      va_start (ap, fmt);
      SetLastError (err);
      count = this->vsprntf (buf, fmt, ap);
      va_end (ap);
      CHECK(buf);
d163 4
a166 2
      this->write (category, buf, count);
    }
a349 31
}

/* Print a message on stderr (bypassing anything that could prevent the
   message from being printed, for example a buggy or corrupted stdio).
   This is used, for example, to print diagnostics of fatal errors.  */

void
__system_printf (const char *fmt,...)
{
  char buf[6000];
  va_list ap;
  int count;

  PROTECT (buf);
  va_start (ap, fmt);
  count = strace.vsprntf (buf, fmt, ap);
  va_end (ap);
  CHECK (buf);

  DWORD done;
  WriteFile (GetStdHandle (STD_ERROR_HANDLE), buf, count, &done, 0);
  FlushFileBuffers (GetStdHandle (STD_ERROR_HANDLE));

#ifndef NOSTRACE
  if (strace.active)
    strace.write (1, buf, count);
#endif

#ifdef DEBUGGING
//  try_to_debug ();
#endif
@


1.6
log
@Changes by  Kazuhiro Fujieda  <fujieda@@jaist.ac.jp>
        * assert.cc (__assert): Reduce dependency on newlib.
        * exec.cc: Eliminate unnecessary inclusion of ctype.h.
        * glob.c: Ditto.
        * hinfo.cc: Ditto.
        * init.cc: Ditto.
        * strace.cc: Ditto.
        * tty.cc: Ditto.
        * grp.cc (parse_grp): Eliminate atoi.
        * passwd.cc (grab_int): Ditto.
        * grp.cc (getgroups): Eliminate str{n,}casecmp.
        * path.cc (get_raw_device_number): Ditto.
        * path.cc (sort_by_native_name): Ditto.
        * spawn.cc (iscmd): Ditto.
        * uinfo.cc (internal_getlogin): Ditto.
@
text
@d14 2
@


1.5
log
@Pipe changes throughout suggested by Eric Fifer <EFifer@@sanwaint.com>
* debug.cc (threadname_init): Pass name of lock as arg 2 of new_muto.
* malloc.cc (malloc_init): Ditto.
* sigproc.cc (sigproc_init): Ditto.
* exceptions.cc (events_init): Ditto.
(call_handler): Eliminate special case for hExeced.  Report locked thread in
debugging output.
* fhandler.cc (fhandker_pipe::fhandler_pipe): Propagate device type to base
class.
* fhandler.h (fhandler_pipe): Ditto.
* hinfo.cc (hinfo::build_fhandler): Pass specific type of pipe to constructor.
* spawn.cc (spawn_guts): Eliminate dependency on signal when waiting for
subprocess.
* strace.cc: Remove obsolete #ifdef.
* sync.cc (muto::muto): Save the name of the muto.
(muto:~muto): Also release the muto.
* sync.h: Add a muto name field.
* select.cc (peek_pipe): Avoid doing a PeekNamedPipe on the write end of a
pipe.
@
text
@a10 1
#include <ctype.h>
@


1.4
log
@Throughout use strace class in place of individual functions and variables.
* cygwin.din: Eliminate _strace_wm.
* sigproc.cc (wait_sig): Temporarily add more debugging output.
* include/cygwin/version.h: Bump minor api to reflect export change.
@
text
@a26 1
#ifndef STRACE_HHMMSS
a59 1
#endif
@


1.3
log
@* dcrt0.cc (set_os_type): Record OS name string.
(getprogname): Eliminate obsolete function.
(dll_crt0_1): Move initial strace initialization output to set_myself.
* exceptions.cc (interruptible): Add debugging output.
(interrupt_setup): New function.
(interrupt_now): Use interrupt_setup to set up common interrupt handler stuff.
(interrupt_on_return): Ditto.
(call_handler): Move signal_arrived arm and clear threads to region where
signalled thread is suspended or suffer races.
* pinfo.cc (set_myself): Output interesting information when strace is first
initialized.  Initialize progname here.
* sigproc.cc (sig_dispatch_pending): Modify to ensure that flush signal are
sent synchronously.
* strace.cc (strace_vsprintf): Move code into strace program.
* uname.cc (uname): Use 'osname' global to construct cygwin name + Windows type
+ version.
@
text
@a11 1
#include <stdarg.h>
d19 2
a20 1
DWORD NO_COPY strace_active = 0;
d28 2
a29 4
static long long hires_frequency = 0;
static int hires_initted = 0;

static int strace_microseconds()
d32 3
d36 1
d64 2
a65 2
static int
strace_vsprintf (char *buf, const char *infmt, va_list ap)
d73 1
a73 2
  static int lmicrosec = 0;
  int microsec = strace_microseconds ();
d129 2
a130 2
static void
strace_write (unsigned category, const char *buf, int count)
d145 1
a145 1
strace_printf (unsigned category, const char *fmt,...)
d148 1
a148 1
  if (strace_active)
d157 1
a157 1
      count = strace_vsprintf (buf, fmt, ap);
d161 1
a161 1
      strace_write (category, buf, count);
d329 2
a330 1
void _strace_wm (int message, int word, int lon)
d332 1
a332 1
  if (strace_active)
d340 1
a340 1
	      strace_printf (_STRACE_WM, "wndproc %d %s %d %d", message, ta[i].n, word, lon);
d344 1
a344 1
      strace_printf (_STRACE_WM, "wndproc %d unknown  %d %d", message, word, lon);
d361 1
a361 1
  count = strace_vsprintf (buf, fmt, ap);
d370 2
a371 2
  if (strace_active)
    strace_write (1, buf, count);
a376 13
}

#else

/* empty functions for when strace is disabled */

void
strace_init (const char *buf)
{}

extern "C" {
void _strace_wm (int message, int word, int lon)
{}
@


1.2
log
@Respond to a multitude of g++ warnings.
@
text
@d66 1
a66 1
  char fmt[80], unkfmt[80];
d69 1
a70 1
#ifndef STRACE_HHMMSS
a72 1
  int dmicrosec = lmicrosec ? microsec - lmicrosec : 0;
d75 1
a75 14
  __small_sprintf (fmt, "%5d %7d [%s] %s ",
		   dmicrosec, microsec, threadname (0), "%s %d%s");
  __small_sprintf (unkfmt, "%6d %7d [%s] %s ",
		   dmicrosec, microsec, threadname (0),
		   "(unknown)");
#else
  SYSTEMTIME st;
  GetLocalTime (&st);
  const char *tn = threadname (0);
  __small_sprintf (fmt, "%02d:%02d:%02d [%s] %s ",
		   st.wHour, st.wMinute, st.wSecond, tn, "%s %d%s");
  __small_sprintf (unkfmt, "%02d:%02d:%02d [%s] %s ",
		   st.wHour, st.wMinute, st.wSecond, tn, "***");
#endif
d90 2
a91 3
      static BOOL NO_COPY output_path_once = FALSE;
      if (!output_path_once)
	output_path_once = !!(p = myself->progname);
d93 6
a98 11
	{
	  if ((p = strrchr (myself->progname, '\\')) != NULL)
	    p++;
	  else
	    p = myself->progname;
	  strcpy (progname, p);
	  if ((p = strrchr (progname, '.')) != NULL)
	    *p = '\000';
	  p = progname;
	}
      count = __small_sprintf (buf, fmt, p && *p ? p : "(unknown)",
@


1.1
log
@Initial revision
@
text
@d186 1
a186 1
mark (const char *fn, int i)
@


1.1.1.1
log
@import winsup-2000-02-17 snapshot
@
text
@@
