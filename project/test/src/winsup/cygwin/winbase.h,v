head	1.23;
access;
symbols
	cygwin-1_7_35-release:1.23
	cygwin-1_7_34-release:1.23
	cygwin-1_7_33-release:1.23
	cygwin-1_7_32-release:1.23
	cygwin-1_7_31-release:1.23
	cygwin-1_7_30-release:1.23
	cygwin-1_7_29-release:1.23
	cygwin-1_7_29-release-branchpoint:1.23.0.2
	cygwin-pre-user-db:1.23
	cygwin-1_7_28-release:1.23
	cygwin-1_7_27-release:1.23
	cygwin-1_7_26-release:1.23
	cygwin-1_7_25-release:1.23
	cygwin-1_7_24-release:1.23
	cygwin-1_7_23-release:1.23
	cygwin-1_7_22-release:1.23
	cygwin-1_7_21-release:1.23
	cygwin-1_7_20-release:1.23
	cygwin-1_7_19-release:1.23
	cygwin-64bit-postmerge:1.23
	cygwin-64bit-premerge-branch:1.22.0.2
	cygwin-64bit-premerge:1.22
	cygwin-1_7_18-release:1.22
	post-ptmalloc3:1.19.2.4
	pre-ptmalloc3:1.19.2.4
	cygwin-1_7_17-release:1.19
	cygwin-64bit-branch:1.19.0.2
	cygwin-1_7_16-release:1.19
	cygwin-1_7_15-release:1.16
	cygwin-1_7_14_2-release:1.16
	cygwin-1_7_14-release:1.16
	cygwin-1_7_12-release:1.16
	cygwin-1_7_11-release:1.16
	cygwin-1_7_10-release:1.16
	signal-rewrite:1.16.0.6
	pre-notty:1.16
	cygwin-1_7_9-release:1.16
	cv-post-1_7_9:1.16.0.4
	cygwin-1_7_8-release:1.16
	cygwin-1_7_7-release:1.16
	cygwin-1_7_5-release:1.16
	cygwin-1_7_4-release:1.16
	cygwin-1_7_3-release:1.16
	cygwin-1_7_2-release:1.16
	fifo_doover3:1.16.0.2
	cygwin-1_7_1-release:1.16
	prefifo:1.16
	cv-branch-2:1.15.0.2
	pre-ripout-set_console_state_for_spawn:1.13
	EOL_registry_mounts:1.13
	preoverlapped:1.13
	drop_9x_support_start:1.13
	cr-0x5f1:1.13.0.8
	cv-branch:1.13.0.6
	pre-ptymaster-archetype:1.13
	cr-0x3b58:1.13.0.4
	cr-0x5ef:1.13.0.2
	after-mmap-privanon-noreserve:1.13
	after-mmap-revamp:1.13
	before-mmap-revamp:1.13
	cgf-more-exit-sync:1.13
	post_wait_sig_exit:1.13
	pre_wait_sig_exit:1.13
	reparent-point:1.12
	noreparent:1.12.0.2
	cr-0x5e6:1.9.0.2
	cr-0x9e:1.6.0.6
	cr-0x9d:1.6.0.4
	cgf-deleteme:1.6.0.2
	pre-sigrewrite:1.4
	corinna-01:1.4
	cr-0x9c:1.4.0.8
	cr-0x9b:1.4.0.6
	cr-0x99:1.4
	Z-emcb-cygwin_daemon:1.4.0.2
	w32api-2_2:1.4
	mingw-runtime-2_4:1.4
	pre-cgf-merge:1.4
	cgf-dev-branch:1.4.0.4
	predaemon:1.2
	cygwin_daemon_merge_HEAD:1.2
	pregp02r1:1.2.0.24
	cygnus_cvs_20020108_pre:1.2
	Z-cygwin_daemon_merge_HEAD:1.3
	cygwin_daemon:1.2.0.16
	Z-cygwin_daemon_merge-new_HEAD:1.3;
locks; strict;
comment	@ * @;


1.23
date	2013.04.23.09.44.34;	author corinna;	state Exp;
branches;
next	1.22;

1.22
date	2013.01.21.04.38.29;	author cgf;	state Exp;
branches;
next	1.21;

1.21
date	2012.11.11.10.56.01;	author corinna;	state Exp;
branches;
next	1.20;

1.20
date	2012.10.22.17.26.45;	author corinna;	state dead;
branches;
next	1.19;

1.19
date	2012.07.06.13.51.26;	author corinna;	state Exp;
branches
	1.19.2.1;
next	1.18;

1.18
date	2012.06.03.16.32.00;	author cgf;	state Exp;
branches;
next	1.17;

1.17
date	2012.05.23.13.13.56;	author corinna;	state Exp;
branches;
next	1.16;

1.16
date	2009.07.07.21.41.43;	author davek;	state Exp;
branches;
next	1.15;

1.15
date	2009.06.05.13.53.01;	author davek;	state Exp;
branches;
next	1.14;

1.14
date	2008.07.12.18.09.17;	author ericb;	state Exp;
branches;
next	1.13;

1.13
date	2005.06.07.19.31.42;	author corinna;	state Exp;
branches;
next	1.12;

1.12
date	2004.06.04.23.55.44;	author cgf;	state Exp;
branches;
next	1.11;

1.11
date	2004.06.03.21.29.43;	author cgf;	state Exp;
branches;
next	1.10;

1.10
date	2004.06.03.20.48.02;	author cgf;	state Exp;
branches;
next	1.9;

1.9
date	2004.05.25.20.00.18;	author cgf;	state Exp;
branches;
next	1.8;

1.8
date	2004.05.25.04.00.49;	author cgf;	state Exp;
branches;
next	1.7;

1.7
date	2004.05.25.03.21.34;	author cgf;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.03.05.21.55;	author cgf;	state Exp;
branches;
next	1.5;

1.5
date	2003.11.28.20.55.58;	author cgf;	state Exp;
branches;
next	1.4;

1.4
date	2002.12.14.05.06.59;	author cgf;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.23.18.55.23;	author cgf;	state Exp;
branches;
next	1.2;

1.2
date	2001.11.30.06.19.58;	author cgf;	state Exp;
branches
	1.2.16.1;
next	1.1;

1.1
date	2001.11.28.00.06.35;	author cgf;	state Exp;
branches;
next	;

1.19.2.1
date	2012.10.22.17.29.00;	author corinna;	state dead;
branches;
next	1.19.2.2;

1.19.2.2
date	2012.11.11.10.58.44;	author corinna;	state Exp;
branches;
next	1.19.2.3;

1.19.2.3
date	2013.01.21.13.52.11;	author corinna;	state Exp;
branches;
next	1.19.2.4;

1.19.2.4
date	2013.01.29.15.43.30;	author corinna;	state Exp;
branches;
next	;

1.2.16.1
date	2002.01.04.03.56.11;	author rbcollins;	state Exp;
branches;
next	1.2.16.2;

1.2.16.2
date	2002.06.24.10.55.35;	author scottc;	state Exp;
branches;
next	;


desc
@@


1.23
log
@	* Merge in cygwin-64bit-branch.
@
text
@/* winbase.h

   Copyright 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2012 Red Hat, Inc.

This software is a copyrighted work licensed under the terms of the
Cygwin license.  Please consult the file "CYGWIN_LICENSE" for
details. */

#include_next "winbase.h"

#ifndef _WINBASE2_H
#define _WINBASE2_H

extern __inline__ LONG
ilockcmpexch (volatile LONG *t, LONG v, LONG c)
{
  return
  ({
    register LONG ret __asm ("%eax");
    __asm __volatile ("lock cmpxchgl %2, %1"
	: "=a" (ret), "=m" (*t)
	: "r" (v), "m" (*t), "0" (c)
	: "memory");
    ret;
  });
}

#undef InterlockedCompareExchange
#define InterlockedCompareExchange ilockcmpexch
#undef InterlockedCompareExchangePointer

#ifdef __x86_64__
extern __inline__ LONGLONG
ilockcmpexch64 (volatile LONGLONG *t, LONGLONG v, LONGLONG c)
{
  return
  ({
    register LONGLONG ret __asm ("%rax");
    __asm __volatile ("lock cmpxchgq %2, %1"
	: "=a" (ret), "=m" (*t)
	: "r" (v), "m" (*t), "0" (c)
	: "memory");
    ret;
  });
}

#define InterlockedCompareExchange64 ilockcmpexch64
#define InterlockedCompareExchangePointer(d,e,c) \
    (PVOID)InterlockedCompareExchange64((LONGLONG volatile *)(d),(LONGLONG)(e),(LONGLONG)(c))

#else

#define InterlockedCompareExchangePointer(d,e,c) \
    (PVOID)InterlockedCompareExchange((LONG volatile *)(d),(LONG)(e),(LONG)(c))

#endif /* !__x86_64 */
#endif /*_WINBASE2_H*/
@


1.22
log
@Throughout, update copyrights to reflect dates which correspond to main-branch
checkins.  Regularize copyright format.
@
text
@a13 1
#ifndef __x86_64__
d31 22
d55 1
@


1.21
log
@	* winbase.h: Semi-reinstantiate to workaround lack inline assembler
	implementation of InterlockedCompareExchange for i686 in Mingw64
	headers.
	* pinfo.cc (pinfo::init): Remove unused variable mapaddr.
@
text
@d3 1
a3 1
   Copyright 2002, 2003, 2004, 2008, 2009, 2012 Red Hat, Inc.
@


1.20
log
@	* winbase.h: Remove.
@
text
@d14 1
a14 55
/* For some unknown reason, InterlockedAdd is only supported on Itanium
   when using the Windows headers.  Fortunately we're not restricted to the
   Windows headers :) */
extern __inline__ LONG
ilockadd (volatile LONG *m, LONG value)
{
  register LONG __res;
  __asm__ __volatile__ ("\n\
	movl	%3,%0\n\
	lock	xadd %0,%1\n\
	addl	%3,%0\n\
	": "=&r" (__res), "=m" (*m): "m" (*m), "r" (value): "cc");
  return __res;
}

extern __inline__ LONG
ilockincr (volatile LONG *m)
{
  register LONG __res;
  __asm__ __volatile__ ("\n\
	movl	$1,%0\n\
	lock	xadd %0,%1\n\
	inc	%0\n\
	": "=&r" (__res), "=m" (*m): "m" (*m): "cc");
  return __res;
}

extern __inline__ LONG
ilockdecr (volatile LONG *m)
{
  register LONG __res;
  __asm__ __volatile__ ("\n\
	movl	$0xffffffff,%0\n\
	lock	xadd %0,%1\n\
	dec	%0\n\
	": "=&r" (__res), "=m" (*m): "m" (*m): "cc");
  return __res;
}

extern __inline__ LONG
ilockexch (volatile LONG *t, long v)
{
  return
  ({
    register LONG ret __asm ("%eax");
    __asm __volatile ("\n"
	"1:	lock cmpxchgl %2, %1\n"
	"	jne  1b\n"
	: "=a" (ret), "=m" (*t)
	: "r" (v), "m" (*t), "0" (*t)
	: "memory");
    ret;
  });
}

a28 8
#undef InterlockedAdd
#define InterlockedAdd ilockadd
#undef InterlockedIncrement
#define InterlockedIncrement ilockincr
#undef InterlockedDecrement
#define InterlockedDecrement ilockdecr
#undef InterlockedExchange
#define InterlockedExchange ilockexch
a31 1
#ifndef __x86_64
@


1.19
log
@	* winbase.h: Throughout use LONG rather than long type to prepare for
	64 bit.
	(InterlockedCompareExchangePointer): Define.
@
text
@@


1.19.2.1
log
@Merge changes from HEAD
@
text
@@


1.19.2.2
log
@	* pinfo.cc (_pinfo::commune_request): Accommodate the fact that LONG_MAX
	does not match sizeof LONG.

	Pull in changes from HEAD.
@
text
@d14 55
a68 1
#ifndef __x86_64__
d83 8
d94 1
@


1.19.2.3
log
@Pull in changes from HEAD
@
text
@d3 1
a3 1
   Copyright 2001, 2002, 2003, 2004, 2005, 2008, 2009, 2012 Red Hat, Inc.
@


1.19.2.4
log
@Add missing patch
@
text
@d14 1
a31 22

#ifdef __x86_64__
extern __inline__ LONGLONG
ilockcmpexch64 (volatile LONGLONG *t, LONGLONG v, LONGLONG c)
{
  return
  ({
    register LONGLONG ret __asm ("%rax");
    __asm __volatile ("lock cmpxchgq %2, %1"
	: "=a" (ret), "=m" (*t)
	: "r" (v), "m" (*t), "0" (c)
	: "memory");
    ret;
  });
}

#define InterlockedCompareExchange64 ilockcmpexch64
#define InterlockedCompareExchangePointer(d,e,c) \
    (PVOID)InterlockedCompareExchange64((LONGLONG volatile *)(d),(LONGLONG)(e),(LONGLONG)(c))

#else

a33 1

@


1.18
log
@* winbase.h: Add missing copyright date.
@
text
@d17 2
a18 2
extern __inline__ long
ilockadd (volatile long *m, long value)
d20 1
a20 1
  register int __res;
d29 2
a30 2
extern __inline__ long
ilockincr (volatile long *m)
d32 1
a32 1
  register int __res;
d41 2
a42 2
extern __inline__ long
ilockdecr (volatile long *m)
d44 1
a44 1
  register int __res;
d53 2
a54 2
extern __inline__ long
ilockexch (volatile long *t, long v)
d58 1
a58 1
    register long ret __asm ("%eax");
d69 2
a70 2
extern __inline__ long
ilockcmpexch (volatile long *t, long v, long c)
d74 1
a74 1
    register long ret __asm ("%eax");
d93 5
@


1.17
log
@	* fhandler.h (refcnt): Add i interlocked.  Explain why.
	* winbase.h (ilockadd): New function.
	(InterlockedAdd): Define as ilockadd.
@
text
@d3 1
a3 1
   Copyright 2002, 2003, 2004, 2008, 2012 Red Hat, Inc.
@


1.16
log
@	* winbase.h (ilockexch): Avoid making 'ret' volatile.
	(ilockcmpexch): Likewise.
@
text
@d3 1
a3 1
   Copyright 2002, 2003, 2004, 2008 Red Hat, Inc.
d14 15
d83 2
@


1.15
log
@	* winbase.h (ilockexch):  Fix asm constraints.
	(ilockcmpexch):  Likewise.
@
text
@d43 1
a43 1
    register __typeof (*t) ret __asm ("%eax");
d59 1
a59 1
    register __typeof (*t) ret __asm ("%eax");
@


1.14
log
@Fix usage of recently fixed Interlocked* functions.

* winbase.h (ilockincr, ilockdecr, ilockexch, ilockcmpexch): Add
volatile qualifier, to match Interlocked* functions.
@
text
@d41 11
a51 6
  register int __res;
  __asm__ __volatile__ ("\n\
1:	lock	cmpxchgl %3,(%1)\n\
	jne 1b\n\
 	": "=a" (__res), "=q" (t): "1" (t), "q" (v), "0" (*t): "cc");
  return __res;
d57 9
a65 5
  register int __res;
  __asm__ __volatile__ ("\n\
	lock cmpxchgl %3,(%1)\n\
	": "=a" (__res), "=q" (t) : "1" (t), "q" (v), "0" (c): "cc");
  return __res;
@


1.13
log
@	* pinfo.cc (pinfo::init): Define sa_buf as PSECURITY_ATTRIBUTES and
	allocate dynamically.
	(pinfo::set_acl): Replace sa_buf by dynamically allocated acl_buf.
	* sec_acl.cc (setacl): Allocate acl dynamically.
	* sec_helper.cc (sec_acl): Add test for alignment of acl when
	DEBUGGING is defined.
	(__sec_user): Same for sa_buf.
	* security.cc (verify_token): Define sd_buf as PSECURITY_DESCRIPTOR
	and allocate dynamically.
	(alloc_sd): Allocate acl dynamically.
	security.h (sec_user_nih): Change first parameter to
	SECURITY_ATTRIBUTES *.
	(sec_user): Ditto.
	* sigproc.cc (wait_sig): Define sa_buf as PSECURITY_ATTRIBUTES and
	allocate dynamically.
	* syscalls.cc (seteuid32): Define dacl_buf as PACL and allocate
	dynamically.
	* uinfo.cc (cygheap_user::init): Define sa_buf as PSECURITY_ATTRIBUTES
	and allocate dynamically.
	* winbase.h (ilockincr): Mark first argument of inline assembly as
	earlyclobber.
	(ilockdecr): Ditto.
@
text
@d3 1
a3 1
   Copyright 2002, 2003, 2004 Red Hat, Inc.
d15 1
a15 1
ilockincr (long *m)
d27 1
a27 1
ilockdecr (long *m)
d39 1
a39 1
ilockexch (long *t, long v)
d50 1
a50 1
ilockcmpexch (long *t, long v, long c)
@


1.12
log
@* winbase.h (ilockincr): Add more neverending changes from the inexplicable
world of gcc asm constraint magic.  Should stop random crashes.
(ilockdecr): Ditto.
@
text
@d22 1
a22 1
	": "=r" (__res), "=m" (*m): "m" (*m): "cc");
d34 1
a34 1
	": "=r" (__res), "=m" (*m): "m" (*m): "cc");
@


1.11
log
@* winbase.h (ilockincr): More changes from the inexplicable world of gcc asm
magic.
(ilockdecr): Ditto.
@
text
@d22 1
a22 1
	": "=a" (__res), "=m" (*m): "m" (m): "cc");
d34 1
a34 1
	": "=a" (__res), "=m" (*m): "m" (m): "cc");
@


1.10
log
@* winbase.h (ilockincr): YA correction to ensure correct operation with no
optimization.
(ilockdecr): Ditto.
@
text
@d1 8
d20 1
a20 1
	lock	xadd %0,%2\n\
d32 1
a32 1
	lock	xadd %0,%2\n\
@


1.9
log
@* winbase.h: Semi-revert previous patch as it caused strange behavior.  Use
syntax similar to that recommended in mingw-dvlpr.
@
text
@d12 1
a12 1
	lock	xadd %0,%1\n\
d14 1
a14 1
	": "=a" (__res), "+m" (*m): : "cc");
d24 1
a24 1
	lock	xadd %0,%1\n\
d26 1
a26 1
	": "=a" (__res), "+m" (*m):  : "cc");
@


1.8
log
@* winbase.h: Add proper attributions for memory operands throughout.
@
text
@d14 1
a14 1
	": "=a" (__res), "+m" (m): : "memory", "cc");
d26 1
a26 1
	": "=a" (__res), "+m" (m): : "memory", "cc");
d37 1
a37 1
 	": "=a" (__res), "=q" (t): "1" (t), "q" (v), "0" (*t): "memory", "cc");
d47 1
a47 1
	": "=a" (__res), "=q" (t) : "1" (t), "q" (v), "0" (c): "memory", "cc");
@


1.7
log
@* include/cygwin/version.h: Bump api minor version number.
* cygwin.din: Export atoll.
@
text
@d12 1
a12 1
	lock	xadd %0,(%1)\n\
d14 1
a14 1
	": "=a" (__res), "=q" (m): "1" (m));
d24 1
a24 1
	lock	xadd %0,(%1)\n\
d26 1
a26 1
	": "=a" (__res), "=q" (m): "1" (m));
d37 1
a37 1
 	": "=a" (__res), "=q" (t): "1" (t), "q" (v), "0" (*t): "memory": "cc");
d47 1
a47 1
	": "=a" (__res), "=q" (t) : "1" (t), "q" (v), "0" (c): "memory": "cc");
@


1.6
log
@* cygthread.cc (cygthread::stub): Properly establish _threadinfo environment.
(cygthread::stub2): New function.
(cygthread::simplestub): Ditto.
(cygthread::simplestub2): New function.
* cygthread.h (cygthread::stub2): Declare new function.
(cygthread::simplestub2): Ditto.
* cygtls.h (_threadinfo::call): Declare new function.
(_threadinfo::call2): Ditto.
* dcrt0.cc (dll_crt0_1): Accommodate new _threadinfo::init which doesn't return
pointer to tls.
(_dll_crt0): Remove obsolete DECLARE_TLS_STORAGE.
(dll_crt0): Ditto.
* exceptions.cc (_threadinfo::call): New function.
(_threadinfo::call2): Ditto.
(_threadinfo::init): Don't return pointer.
* thread.cc (pthread::thread_init_wrapper): Properly establish _threadinfo
environment.
(pthread::thread_init_wrapper2): New function.
* thread.h (pthread::thread_init_wrapper): Remove noreturn attribute
(pthread::thread_init_wrapper2): Declare new function.
* winbase.h: Remove obsolete code.
@
text
@d37 1
a37 1
 	": "=a" (__res), "=q" (t): "1" (t), "q" (v), "0" (*t));
d47 1
a47 1
	": "=a" (__res), "=q" (t) : "1" (t), "q" (v), "0" (c));
@


1.5
log
@Eliminate use of sigframe and sigthread throughout.
* Makefile.in (DLL_OFILES): Add sigfe.o.  Remove reliance on cygwin.def from
cygwin0.dll dependency since dependence on sigfe.o implies that.  Generate def
file on the fly using 'gendef'.
* configure.in: Don't auto-generate cygwin.def.
* configure: Regenerate.
* cygwin.din: Add SIGFE stuff where appropriate.
* dcrt0.cc (dll_crt0_1): Initialize cygwin tls early in process startup.  Set
_main_tls to address of the main thread's cygwin tls.
* debug.h: Remove now unneeded WFSO and WFMO declarations.
* exceptions.cc (_last_thread): Define.
(set_thread_state_for_signals): New function.
(reset_thread_exception_for_signals): Ditto.
(init_thread_for_signals): Ditto.
(delete_thread_for_signals): Ditto.
(capture_thread_for_signals): Ditto.
(handle_exceptions): Set return address explicitly for exceptions prior to
calling sig_send.
(interrupt_on_return): Eliminate.
(setup_handler): Add preliminary implementation for dealing with
thread-specific signals by querying _main_tls.
(signal_exit): Use cygthread::main_thread_id instead of mainthread.id.
(call_signal_handler_now): For now, just handle the main thread.
* fork.cc (vfork): Save and restore main _my_tls.
* gendef: New file.  Generates def file and sigfe.s file.
* gentls_offsets: New file.  Generates offsets for perl to use in sigfe.s.
* how-signals-work.txt: Mention that info is obsolete.
* init.cc (dll_entry): Initialize cygwin tls storage here.
* miscfuncs.cc (low_priority_sleep): Make a C function for easier calling from
asm.
* perthread.h (vfork_save::tls): New element.
* signal.cc (nanosleep): Replace previous use of
sigframe.call_signal_handler_now with straight call to call_signal_handler_now.
(abort): Ditto.
* syscalls.cc (readv): Ditto.
* termios.cc (tcsetattr): Ditto.
* wait.cc (wait4): Ditto.
* sigproc.cc (sig_dispatch_pending): Ditto.
(sig_send): Ditto.
* sigproc.h: Declare call_signal_handler_now.
* thread.cc (pthread::thread_init_wrapper): Initialize cygwin tls.  Remove
obsolete and unworking signal stuff.
* thread.h (verifyable_object::sigs): Eliminate.
(verifyable_object::sigmask): Eliminate.
(verifyable_object::sigtodo): Eliminate.
(verifyable_object::exit): Make attribute noreturn.
(verifyable_object::thread_init_wrapper): Ditto.
(pthread_null::exit): Ditto.
* winbase.h (__stackbase): Always define.
* winsup.h (low_priority_sleep): Declare as a "C" function.
* include/cygwin/version.h: Bump API version to reflect sigwait export.
* include/sys/queue.h: Protect SLIST_ENTRY from previous declaration.
* signal.cc (sigwait): Implement.
* select.cc (fhandler_base::ready_for_read): Add debugging output.
* devices.h: Define more device pointers via their storage.
* devices.in: Don't parse things like /dev/inet/tcp, as they really have no
meaning.
* devices.cc: Regenerate.
* gendevices: Set proper protection for output file.
* cygtls.h: New file.
* gendef: New file.
* gentls_offsets: New file.
* tlsoffsets.h: New file.  Autogenerated.
* config/i386/longjmp.c: Remove.  File subsumed by gendef output.
* config/i386/makefrag: Remove obsolete file.
* fhandler.cc: Remove spurious access_worker declaration.
* spawn.cc (spawnve): Make debugging output more accurate.
* cygwin-gperf: Remove.
* devices.cc: Remove.
@
text
@a58 45

// extern char * volatile *__stackbase __asm__ ("%fs:4");
#ifndef EXPCGf
#define DECLARE_TLS_STORAGE do {} while (0)
#else
#define DECLARE_TLS_STORAGE char **tls[4096] __attribute__ ((unused))
extern long tls_ix;

extern __inline__ DWORD
my_tlsalloc ()
{
  DWORD n = ilockdecr (&tls_ix);
  __stackbase[tls_ix] = NULL;
  return n;
}

extern __inline__ BOOL
my_tlssetvalue (DWORD ix, void *val)
{
  __stackbase[ix] = (char *) val;
  return 1;
}

extern __inline__ void *
my_tlsgetvalue (DWORD ix)
{
  return __stackbase[ix];
}

extern __inline__ BOOL
my_tlsfree (DWORD ix)
{
  /* nothing for now */
  return 1;
}

#undef TlsAlloc
#define TlsAlloc my_tlsalloc
#undef TlsGetValue
#define TlsGetValue my_tlsgetvalue
#undef TlsSetValue
#define TlsSetValue my_tlssetvalue
#undef TlsFree
#define TlsFree my_tlsfree
#endif /*EXPCGF*/
@


1.4
log
@* winbase.h: Turn on inline versions of Interlocked* by default.
* winbase.h: Fixup inline asm functions.  Add ilockcmpexch.
@
text
@d60 1
a65 1
extern char * volatile *__stackbase __asm__ ("%fs:4");
@


1.3
log
@* cygwin.sc: Add recent changes from ld sources.
* winsup.h: Move #ifdef EXPCGF code into "winbase.h".
* winbase.h: #ifdef EXPCGF code moved here from "winsup.h".
@
text
@a2 7
#ifdef EXPCGF
#define DECLARE_TLS_STORAGE char **tls[4096] __attribute__ ((unused))
#else
#define DECLARE_TLS_STORAGE do {} while (0)
#define _WINBASE2_H
#endif

d6 2
a7 1
extern __inline__ long ilockincr (long *m)
d14 1
a14 1
	": "=a" (__res), "=r" (m): "1" (m));
d17 3
a19 1
extern __inline__ long ilockdecr (long *m)
d26 1
a26 1
	": "=a" (__res), "=r" (m): "1" (m));
d29 3
a31 1
extern __inline__ long ilockexch (long *t, long v)
a34 1
	movl	(%2),%0\n\
d37 11
a47 1
 	": "=a" (__res), "=c" (t): "1" (t), "d" (v));
d57 2
d60 4
d103 1
@


1.2
log
@* debug.cc (makethread): Eliminate unneeded function call.
* miscfuncs.cc (tls_ix): Predefine.
* perthread.h (set_reent): Eliminate.
(get_reent): Ditto.
* winbase.h (my_tlsalloc): Use global stack base pointer.  Set newly allocated
location to NULL.
(my_tlssetvalue): Use global stack base pointer.
(my_tlsgetvalue): Ditto.
@
text
@d3 7
@


1.2.16.1
log
@Merged changes from HEAD
@
text
@@


1.2.16.2
log
@Merged changes from HEAD
@
text
@a2 7
#ifdef EXPCGF
#define DECLARE_TLS_STORAGE char **tls[4096] __attribute__ ((unused))
#else
#define DECLARE_TLS_STORAGE do {} while (0)
#define _WINBASE2_H
#endif

@


1.1
log
@* cygwin.din (ualarm): New export.
* dcrt0.cc (_dll_crt0): Add experimental tls storage declaration.
(dll_crt0): Ditto.
* debug.cc (thread_stub): Ditto.
* thread.cc: Minor cleanup.
(__pthread_create): Add experimental tls storage declaration.
* miscfuncs.cc: Define tls index.
* winsup.h: Declare experimental tls storage.
* window.cc (alarm): Use old timer return from setitimer.
(ualarm): New function.
@
text
@d45 1
d50 3
a52 1
  return (DWORD) ilockincr (&tls_ix);
d58 1
a58 3
  char **stackbase;
  __asm__ volatile ("movl %%fs:4,%0": "=g" (stackbase));
  stackbase[-ix] = (char *) val;
d65 1
a65 3
  char **stackbase;
  __asm__ volatile ("movl %%fs:4,%0": "=g" (stackbase));
  return stackbase[-ix];
@

